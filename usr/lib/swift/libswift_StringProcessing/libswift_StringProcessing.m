BOOL Collection<>.contains<A>(_:)(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  BOOL v17;
  uint64_t v19;

  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  v12 = type metadata accessor for Range();
  v13 = type metadata accessor for Optional();
  v14 = *(void *)(v13 - 8);
  MEMORY[0x270FA5388](v13);
  v16 = (char *)&v19 - v15;
  Collection<>.firstRange<A>(of:)(a1, a2, a3, a4, a5, a6, (char *)&v19 - v15);
  v17 = (*(unsigned int (**)(char *, uint64_t, uint64_t))(*(void *)(v12 - 8) + 48))(v16, 1, v12) != 1;
  (*(void (**)(char *, uint64_t))(v14 + 8))(v16, v13);
  return v17;
}

uint64_t Collection<>.firstRange<A>(of:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, char *a7@<X8>)
{
  uint64_t v117 = a6;
  uint64_t v122 = a4;
  v123 = a7;
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
  unint64_t v13 = *(void *)(TupleTypeMetadata2 - 8);
  uint64_t v14 = MEMORY[0x270FA5388](TupleTypeMetadata2);
  v16 = (char *)&v113 - v15;
  v17 = (char *)&v113 + *(int *)(v14 + 48) - v15;
  unint64_t v18 = *(void *)(a2 - 8);
  (*(void (**)(char *, uint64_t, uint64_t))(v18 + 16))((char *)&v113 - v15, v7, a2);
  uint64_t v120 = *(void *)(a3 - 8);
  (*(void (**)(char *, uint64_t, unint64_t))(v120 + 16))(v17, a1, a3);
  int v19 = swift_dynamicCast();
  v124 = v16;
  v121 = v17;
  if (v19)
  {
    unint64_t v119 = v18;
    unint64_t v118 = a3;
    if (swift_dynamicCast())
    {
      unint64_t v20 = String.subscript.getter();
      unint64_t v22 = v21;
      unint64_t v116 = v23;
      uint64_t v25 = v24;
      swift_bridgeObjectRelease();
      unint64_t v26 = String.subscript.getter();
      unint64_t v28 = v27;
      unint64_t v30 = v29;
      uint64_t v32 = v31;
      uint64_t result = swift_bridgeObjectRelease();
      if (v22 >> 14 >= v20 >> 14)
      {
        uint64_t v117 = a2;
        uint64_t v34 = Substring.subscript.getter();
        uint64_t v36 = v35;
        unint64_t v115 = v30;
        unint64_t v37 = v20;
        unint64_t v38 = v28;
        uint64_t v39 = v25;
        uint64_t v41 = v40;
        uint64_t v43 = v42;
        swift_bridgeObjectRetain();
        uint64_t v44 = v41;
        uint64_t v45 = v39;
        unint64_t v46 = v115;
        uint64_t v47 = specialized SubstringSearcher.State.init(text:pattern:)(v34, v36, v44, v43, v26, v38);
        unint64_t v114 = v37;
        unint64_t v138 = v37;
        unint64_t v139 = v22;
        unint64_t v140 = v116;
        uint64_t v141 = v45;
        unint64_t v142 = v26;
        unint64_t v143 = v38;
        unint64_t v144 = v46;
        uint64_t v145 = v32;
        uint64_t v146 = v47;
        uint64_t v147 = v49;
        unint64_t v148 = v48;
        char v149 = v50 & 1;
        if ((v50 & 1) == 0)
        {
          unint64_t v51 = v48;
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          unint64_t v52 = v114;
          unint64_t v53 = v22;
LABEL_25:
          SubstringSearcher.nextRange(in:searchFromEnd:)(v52, v53, v51, (uint64_t)&v125);
          uint64_t v107 = v125;
          uint64_t v108 = v126;
          char v109 = v127;
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease_n();
          swift_bridgeObjectRelease_n();
          v101 = v121;
          if (v109) {
            goto LABEL_26;
          }
          uint64_t v128 = v107;
          uint64_t v129 = v108;
LABEL_28:
          swift_getCanonicalSpecializedMetadata();
          uint64_t v106 = v117;
          swift_getAssociatedTypeWitness();
          swift_getAssociatedConformanceWitness();
          uint64_t v111 = type metadata accessor for Range();
          v112 = v123;
          swift_dynamicCast();
          (*(void (**)(char *, void, uint64_t, uint64_t))(*(void *)(v111 - 8) + 56))(v112, 0, 1, v111);
          goto LABEL_29;
        }
        goto LABEL_19;
      }
      __break(1u);
      goto LABEL_32;
    }
    if (swift_dynamicCast())
    {
      uint64_t v117 = a2;
      unint64_t v54 = v134;
      unint64_t v55 = v135;
      unint64_t v57 = v136;
      uint64_t v56 = v137;
      unint64_t v116 = String.subscript.getter();
      unint64_t v115 = v58;
      unint64_t v60 = v59;
      uint64_t v62 = v61;
      uint64_t result = swift_bridgeObjectRelease();
      if (v55 >> 14 >= v54 >> 14)
      {
        uint64_t v63 = Substring.subscript.getter();
        uint64_t v65 = v64;
        uint64_t v66 = v56;
        uint64_t v68 = v67;
        uint64_t v70 = v69;
        swift_bridgeObjectRetain();
        uint64_t v71 = v68;
        uint64_t v72 = v66;
        uint64_t v73 = v70;
        unint64_t v74 = v116;
        unint64_t v75 = v115;
        uint64_t v76 = specialized SubstringSearcher.State.init(text:pattern:)(v63, v65, v71, v73, v116, v115);
        unint64_t v138 = v54;
        unint64_t v139 = v55;
        unint64_t v114 = v57;
        unint64_t v140 = v57;
        uint64_t v141 = v72;
        unint64_t v142 = v74;
        unint64_t v143 = v75;
        unint64_t v144 = v60;
        uint64_t v145 = v62;
        uint64_t v146 = v76;
        uint64_t v147 = v78;
        unint64_t v148 = v77;
        char v149 = v79 & 1;
        if ((v79 & 1) == 0)
        {
          unint64_t v51 = v77;
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          unint64_t v52 = v54;
          unint64_t v53 = v55;
          goto LABEL_25;
        }
        goto LABEL_19;
      }
LABEL_32:
      __break(1u);
      goto LABEL_33;
    }
    swift_bridgeObjectRelease();
    a3 = v118;
    unint64_t v18 = v119;
  }
  if (!swift_dynamicCast())
  {
LABEL_23:
    Collection<>._firstRangeGeneric<A>(of:)(a1, a2, a3, v122, a5, v117, v123);
    uint64_t v106 = TupleTypeMetadata2;
    return (*(uint64_t (**)(char *, uint64_t))(v13 + 8))(v124, v106);
  }
  unint64_t v119 = v18;
  unint64_t v115 = v134;
  unint64_t v80 = v136;
  unint64_t v116 = v135;
  uint64_t v81 = v137;
  if (swift_dynamicCast())
  {
    unint64_t v114 = v80;
    unint64_t v118 = a3;
    uint64_t v117 = a2;
    a3 = String.subscript.getter();
    unint64_t v13 = v82;
    a1 = v83;
    TupleTypeMetadata2 = v84;
    swift_bridgeObjectRelease();
    if (v13 >> 14 >= a3 >> 14) {
      goto LABEL_18;
    }
    __break(1u);
  }
  uint64_t result = swift_dynamicCast();
  if (!result)
  {
    swift_bridgeObjectRelease();
    goto LABEL_23;
  }
  unint64_t v114 = v80;
  unint64_t v118 = a3;
  uint64_t v117 = a2;
  a3 = v130;
  unint64_t v13 = v131;
  if (v131 >> 14 >= v130 >> 14)
  {
    a1 = v132;
    TupleTypeMetadata2 = v133;
LABEL_18:
    uint64_t v85 = Substring.subscript.getter();
    uint64_t v87 = v86;
    uint64_t v89 = v88;
    uint64_t v91 = v90;
    swift_bridgeObjectRetain();
    uint64_t v92 = v85;
    uint64_t v93 = v91;
    unint64_t v94 = v115;
    unint64_t v95 = v116;
    unint64_t v96 = v114;
    uint64_t v97 = specialized SubstringSearcher.State.init(text:pattern:)(v92, v87, v89, v93, v115, v116);
    unint64_t v138 = a3;
    unint64_t v139 = v13;
    unint64_t v140 = a1;
    uint64_t v141 = TupleTypeMetadata2;
    unint64_t v142 = v94;
    unint64_t v143 = v95;
    unint64_t v144 = v96;
    uint64_t v145 = v81;
    uint64_t v146 = v97;
    uint64_t v147 = v99;
    unint64_t v148 = v98;
    char v149 = v100 & 1;
    if ((v100 & 1) == 0)
    {
      unint64_t v102 = v98;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      SubstringSearcher.nextRange(in:searchFromEnd:)(a3, v13, v102, (uint64_t)&v125);
      uint64_t v103 = v125;
      uint64_t v104 = v126;
      char v105 = v127;
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease_n();
      swift_bridgeObjectRelease_n();
      v101 = v121;
      if ((v105 & 1) == 0)
      {
        uint64_t v128 = v103;
        uint64_t v129 = v104;
        goto LABEL_28;
      }
LABEL_26:
      uint64_t v106 = v117;
      swift_getAssociatedTypeWitness();
      swift_getAssociatedConformanceWitness();
      uint64_t v110 = type metadata accessor for Range();
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v110 - 8) + 56))(v123, 1, 1, v110);
LABEL_29:
      unint64_t v13 = v119;
      (*(void (**)(char *, unint64_t))(v120 + 8))(v101, v118);
      return (*(uint64_t (**)(char *, uint64_t))(v13 + 8))(v124, v106);
    }
LABEL_19:
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    v101 = v121;
    goto LABEL_26;
  }
LABEL_33:
  __break(1u);
  return result;
}

uint64_t BidirectionalCollection<>.firstRange<A>(of:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, char *a7@<X8>)
{
  unint64_t v119 = (char *)a5;
  uint64_t v124 = a4;
  uint64_t v125 = a7;
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
  unint64_t v13 = *(void *)(TupleTypeMetadata2 - 8);
  uint64_t v14 = MEMORY[0x270FA5388](TupleTypeMetadata2);
  v16 = (char *)&v114 - v15;
  v17 = (char *)&v114 + *(int *)(v14 + 48) - v15;
  unint64_t v18 = *(void *)(a2 - 8);
  (*(void (**)(char *, uint64_t, uint64_t))(v18 + 16))((char *)&v114 - v15, v7, a2);
  uint64_t v122 = *(void *)(a3 - 8);
  (*(void (**)(char *, uint64_t, unint64_t))(v122 + 16))(v17, a1, a3);
  int v19 = swift_dynamicCast();
  v123 = v17;
  if (v19)
  {
    unint64_t v121 = v18;
    unint64_t v120 = a3;
    if (swift_dynamicCast())
    {
      unint64_t v119 = v16;
      unint64_t v20 = String.subscript.getter();
      unint64_t v22 = v21;
      unint64_t v117 = v23;
      uint64_t v25 = v24;
      swift_bridgeObjectRelease();
      unint64_t v26 = String.subscript.getter();
      unint64_t v28 = v27;
      unint64_t v30 = v29;
      uint64_t v32 = v31;
      uint64_t result = swift_bridgeObjectRelease();
      if (v22 >> 14 >= v20 >> 14)
      {
        uint64_t v118 = a2;
        uint64_t v34 = Substring.subscript.getter();
        uint64_t v36 = v35;
        unint64_t v116 = v30;
        unint64_t v37 = v20;
        unint64_t v38 = v28;
        uint64_t v39 = v25;
        uint64_t v41 = v40;
        uint64_t v43 = v42;
        swift_bridgeObjectRetain();
        uint64_t v44 = v41;
        uint64_t v45 = v39;
        unint64_t v46 = v116;
        uint64_t v47 = specialized SubstringSearcher.State.init(text:pattern:)(v34, v36, v44, v43, v26, v38);
        unint64_t v115 = v37;
        unint64_t v139 = v37;
        unint64_t v140 = v22;
        unint64_t v141 = v117;
        uint64_t v142 = v45;
        unint64_t v143 = v26;
        unint64_t v144 = v38;
        unint64_t v145 = v46;
        uint64_t v146 = v32;
        uint64_t v147 = v47;
        uint64_t v148 = v49;
        unint64_t v149 = v48;
        char v150 = v50 & 1;
        if ((v50 & 1) == 0)
        {
          unint64_t v51 = v48;
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          unint64_t v52 = v115;
          unint64_t v53 = v22;
LABEL_25:
          SubstringSearcher.nextRange(in:searchFromEnd:)(v52, v53, v51, (uint64_t)&v126);
          uint64_t v108 = v126;
          uint64_t v109 = v127;
          char v110 = v128;
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease_n();
          swift_bridgeObjectRelease_n();
          v101 = v123;
          if (v110) {
            goto LABEL_26;
          }
          uint64_t v129 = v108;
          uint64_t v130 = v109;
LABEL_28:
          swift_getCanonicalSpecializedMetadata();
          uint64_t v107 = v118;
          swift_getAssociatedTypeWitness();
          swift_getAssociatedConformanceWitness();
          uint64_t v112 = type metadata accessor for Range();
          uint64_t v113 = v125;
          swift_dynamicCast();
          (*(void (**)(char *, void, uint64_t, uint64_t))(*(void *)(v112 - 8) + 56))(v113, 0, 1, v112);
          goto LABEL_29;
        }
        goto LABEL_19;
      }
      __break(1u);
      goto LABEL_32;
    }
    if (swift_dynamicCast())
    {
      unint64_t v119 = v16;
      uint64_t v118 = a2;
      unint64_t v54 = v135;
      unint64_t v55 = v136;
      unint64_t v57 = v137;
      uint64_t v56 = v138;
      unint64_t v117 = String.subscript.getter();
      unint64_t v116 = v58;
      unint64_t v60 = v59;
      uint64_t v62 = v61;
      uint64_t result = swift_bridgeObjectRelease();
      if (v55 >> 14 >= v54 >> 14)
      {
        uint64_t v63 = Substring.subscript.getter();
        uint64_t v65 = v64;
        uint64_t v66 = v56;
        uint64_t v68 = v67;
        uint64_t v70 = v69;
        swift_bridgeObjectRetain();
        uint64_t v71 = v68;
        uint64_t v72 = v66;
        uint64_t v73 = v70;
        unint64_t v74 = v117;
        unint64_t v75 = v116;
        uint64_t v76 = specialized SubstringSearcher.State.init(text:pattern:)(v63, v65, v71, v73, v117, v116);
        unint64_t v139 = v54;
        unint64_t v140 = v55;
        unint64_t v115 = v57;
        unint64_t v141 = v57;
        uint64_t v142 = v72;
        unint64_t v143 = v74;
        unint64_t v144 = v75;
        unint64_t v145 = v60;
        uint64_t v146 = v62;
        uint64_t v147 = v76;
        uint64_t v148 = v78;
        unint64_t v149 = v77;
        char v150 = v79 & 1;
        if ((v79 & 1) == 0)
        {
          unint64_t v51 = v77;
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          unint64_t v52 = v54;
          unint64_t v53 = v55;
          goto LABEL_25;
        }
        goto LABEL_19;
      }
LABEL_32:
      __break(1u);
      goto LABEL_33;
    }
    swift_bridgeObjectRelease();
    a3 = v120;
    unint64_t v18 = v121;
  }
  if (!swift_dynamicCast())
  {
LABEL_23:
    Collection<>._firstRangeGeneric<A>(of:)(a1, a2, a3, *(void *)(v124 + 8), (uint64_t)v119, *(void *)(a6 + 8), v125);
    unint64_t v106 = v13;
    uint64_t v107 = TupleTypeMetadata2;
    return (*(uint64_t (**)(char *, uint64_t))(v106 + 8))(v16, v107);
  }
  unint64_t v121 = v18;
  unint64_t v116 = v135;
  unint64_t v80 = v137;
  unint64_t v117 = v136;
  uint64_t v81 = v138;
  if (swift_dynamicCast())
  {
    unint64_t v115 = v80;
    unint64_t v120 = a3;
    unint64_t v119 = v16;
    uint64_t v118 = a2;
    a3 = String.subscript.getter();
    unint64_t v13 = v82;
    a1 = v83;
    TupleTypeMetadata2 = v84;
    swift_bridgeObjectRelease();
    if (v13 >> 14 >= a3 >> 14) {
      goto LABEL_18;
    }
    __break(1u);
  }
  uint64_t result = swift_dynamicCast();
  if (!result)
  {
    swift_bridgeObjectRelease();
    goto LABEL_23;
  }
  unint64_t v115 = v80;
  unint64_t v120 = a3;
  unint64_t v119 = v16;
  uint64_t v118 = a2;
  a3 = v131;
  unint64_t v13 = v132;
  if (v132 >> 14 >= v131 >> 14)
  {
    a1 = v133;
    TupleTypeMetadata2 = v134;
LABEL_18:
    uint64_t v85 = Substring.subscript.getter();
    uint64_t v87 = v86;
    uint64_t v89 = v88;
    uint64_t v91 = v90;
    swift_bridgeObjectRetain();
    uint64_t v92 = v85;
    uint64_t v93 = v91;
    unint64_t v94 = v116;
    unint64_t v95 = v117;
    unint64_t v96 = v115;
    uint64_t v97 = specialized SubstringSearcher.State.init(text:pattern:)(v92, v87, v89, v93, v116, v117);
    unint64_t v139 = a3;
    unint64_t v140 = v13;
    unint64_t v141 = a1;
    uint64_t v142 = TupleTypeMetadata2;
    unint64_t v143 = v94;
    unint64_t v144 = v95;
    unint64_t v145 = v96;
    uint64_t v146 = v81;
    uint64_t v147 = v97;
    uint64_t v148 = v99;
    unint64_t v149 = v98;
    char v150 = v100 & 1;
    if ((v100 & 1) == 0)
    {
      unint64_t v102 = v98;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      SubstringSearcher.nextRange(in:searchFromEnd:)(a3, v13, v102, (uint64_t)&v126);
      uint64_t v103 = v126;
      uint64_t v104 = v127;
      char v105 = v128;
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease_n();
      swift_bridgeObjectRelease_n();
      v101 = v123;
      if ((v105 & 1) == 0)
      {
        uint64_t v129 = v103;
        uint64_t v130 = v104;
        goto LABEL_28;
      }
LABEL_26:
      uint64_t v107 = v118;
      swift_getAssociatedTypeWitness();
      swift_getAssociatedConformanceWitness();
      uint64_t v111 = type metadata accessor for Range();
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v111 - 8) + 56))(v125, 1, 1, v111);
LABEL_29:
      unint64_t v106 = v121;
      (*(void (**)(char *, unint64_t))(v122 + 8))(v101, v120);
      v16 = v119;
      return (*(uint64_t (**)(char *, uint64_t))(v106 + 8))(v16, v107);
    }
LABEL_19:
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    v101 = v123;
    goto LABEL_26;
  }
LABEL_33:
  __break(1u);
  return result;
}

Swift::Bool __swiftcall StringProtocol.contains(_:)(Swift::String a1)
{
  uint64_t v3 = v1;
  Swift::String v7 = a1;
  uint64_t v4 = *(void *)(v2 + 8);
  unint64_t v5 = lazy protocol witness table accessor for type String and conformance String();
  BidirectionalCollection<>.firstRange<A>(of:)((uint64_t)&v7, v3, MEMORY[0x263F8D310], v4, v5, MEMORY[0x263F8D130], v8);
  return (v8[16] & 1) == 0;
}

BOOL StringProtocol.contains(_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  v10[0] = a1;
  v10[1] = a2;
  v10[2] = a3;
  v10[3] = a4;
  uint64_t v7 = *(void *)(a6 + 8);
  unint64_t v8 = lazy protocol witness table accessor for type Substring and conformance Substring();
  BidirectionalCollection<>.firstRange<A>(of:)((uint64_t)v10, a5, MEMORY[0x263F8D980], v7, v8, MEMORY[0x263F8D130], v11);
  return (v11[16] & 1) == 0;
}

uint64_t BidirectionalCollection<>.contains<A>(_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t))(a5 + 16))(&v11, a3, a5);
  uint64_t v5 = v11;
  uint64_t result = Collection.subscript.getter();
  uint64_t v13 = v5;
  if (v8 >> 14 < v7 >> 14)
  {
    __break(1u);
  }
  else
  {
    swift_getAssociatedTypeWitness();
    type metadata accessor for Regex();
    Regex._firstMatch(_:in:)(v9, v10, v7, v8, &v12);
    swift_bridgeObjectRelease();
    swift_release();
    if (*((void *)&v12 + 1))
    {
      outlined consume of Regex<A1.RegexOutput>.Match?<A><A1>(v12, *((uint64_t *)&v12 + 1));
      return 1;
    }
    else
    {
      return 0;
    }
  }
  return result;
}

unint64_t Regex.firstMatch(in:)@<X0>(unint64_t result@<X0>, unint64_t a2@<X1>, unint64_t a3@<X2>, uint64_t a4@<X3>, _OWORD *a5@<X8>)
{
  if (a2 >> 14 >= result >> 14) {
    return Regex._firstMatch(_:in:)(a3, a4, result, a2, a5);
  }
  __break(1u);
  return result;
}

uint64_t Collection<>._firstRangeGeneric<A>(of:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, char *a7@<X8>)
{
  uint64_t v80 = a6;
  uint64_t v76 = a7;
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
  uint64_t v13 = MEMORY[0x270FA5388](TupleTypeMetadata2);
  uint64_t v73 = (char *)&v64 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v15 = MEMORY[0x270FA5388](v13);
  uint64_t v71 = (char *)&v64 - v16;
  uint64_t v69 = *(void *)(AssociatedTypeWitness - 8);
  uint64_t v17 = MEMORY[0x270FA5388](v15);
  unint64_t v77 = (char *)&v64 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v17);
  uint64_t v78 = (char *)&v64 - v19;
  AssociatedConformanceWitness = (char *)swift_getAssociatedConformanceWitness();
  uint64_t v20 = type metadata accessor for Range();
  uint64_t v74 = *(void *)(v20 - 8);
  uint64_t v75 = v20;
  uint64_t v21 = MEMORY[0x270FA5388](v20);
  uint64_t v67 = (char *)&v64 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v21);
  uint64_t v72 = (char *)&v64 - v23;
  uint64_t v24 = swift_getAssociatedTypeWitness();
  uint64_t v70 = *(void *)(v24 - 8);
  uint64_t v25 = MEMORY[0x270FA5388](v24);
  unint64_t v27 = (void (*)(char *, uint64_t))((char *)&v64 - v26);
  MEMORY[0x270FA5388](v25);
  (*(void (**)(char *, uint64_t, uint64_t))(v29 + 16))((char *)&v64 - ((v28 + 15) & 0xFFFFFFFFFFFFFFF0), a1, a3);
  uint64_t v30 = swift_getAssociatedTypeWitness();
  uint64_t v31 = a5;
  uint64_t v32 = Array.init<A>(_:)();
  v33 = (void *)swift_allocObject();
  v33[2] = a2;
  v33[3] = a3;
  v33[4] = a4;
  v33[5] = v31;
  v33[6] = v80;
  v33[7] = v30;
  uint64_t v34 = v77;
  uint64_t v35 = swift_getAssociatedConformanceWitness();
  uint64_t v36 = (uint64_t)v33;
  unint64_t v37 = v78;
  uint64_t v80 = v24;
  uint64_t v66 = v35;
  unint64_t v38 = (char *)ZSearcher.init(pattern:by:)(v32, (uint64_t (*)(char *, char *))partial apply for implicit closure #3 in Collection<>.split<A>(separator:maxSplits:omittingEmptySubsequences:), v36);
  uint64_t v40 = v39;
  uint64_t v65 = v41;
  uint64_t v43 = v42;
  uint64_t v68 = v27;
  Collection.subscript.getter();
  dispatch thunk of Collection.startIndex.getter();
  dispatch thunk of Collection.endIndex.getter();
  uint64_t v44 = AssociatedTypeWitness;
  uint64_t result = dispatch thunk of static Comparable.<= infix(_:_:)();
  if (result)
  {
    uint64_t v46 = TupleTypeMetadata2;
    uint64_t v47 = *(int *)(TupleTypeMetadata2 + 48);
    uint64_t v81 = v43;
    unint64_t v48 = v71;
    uint64_t v49 = &v71[v47];
    AssociatedConformanceWitness = v38;
    uint64_t v50 = v69;
    uint64_t v64 = v40;
    unint64_t v51 = *(void (**)(char *, char *, uint64_t))(v69 + 32);
    uint64_t v52 = v44;
    v51(v71, v37, v44);
    unint64_t v53 = v49;
    v51(v49, v34, v52);
    unint64_t v54 = v73;
    unint64_t v55 = &v73[*(int *)(v46 + 48)];
    uint64_t v56 = *(void (**)(char *, char *, uint64_t))(v50 + 16);
    v56(v73, v48, v52);
    v56(v55, v53, v52);
    unint64_t v57 = v67;
    v51(v67, v54, v52);
    uint64_t v78 = *(char **)(v50 + 8);
    ((void (*)(char *, uint64_t))v78)(v55, v52);
    unint64_t v58 = &v54[*(int *)(TupleTypeMetadata2 + 48)];
    v51(v54, v48, v52);
    v51(v58, v53, v52);
    uint64_t v59 = v75;
    v51(&v57[*(int *)(v75 + 36)], v58, v52);
    ((void (*)(char *, uint64_t))v78)(v54, v52);
    uint64_t v60 = v74;
    uint64_t v61 = (uint64_t)v72;
    (*(void (**)(char *, char *, uint64_t))(v74 + 32))(v72, v57, v59);
    uint64_t v62 = v68;
    uint64_t v63 = v80;
    ZSearcher.search(_:in:)(v68, v61, AssociatedConformanceWitness, v64, v65, v81, v80, v66, v76);
    swift_release();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    (*(void (**)(uint64_t, uint64_t))(v60 + 8))(v61, v59);
    return (*(uint64_t (**)(void, uint64_t))(v70 + 8))(v62, v63);
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t ZSearcher.init(pattern:by:)(uint64_t a1, uint64_t (*a2)(char *, char *), uint64_t a3)
{
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  zAlgorithm<A>(_:by:)(a1, a2, a3, AssociatedTypeWitness);
  return a1;
}

unint64_t specialized ZSearcher.search(_:in:)(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4, unint64_t a5, unint64_t a6, uint64_t a7, uint64_t a8, uint64_t (*a9)(uint64_t *, uint64_t *))
{
  unint64_t v9 = 0;
  unint64_t v10 = 0;
  unint64_t v11 = a6 >> 14;
  unint64_t v33 = a2 >> 14;
  uint64_t v30 = a8 + 32;
  uint64_t v28 = (uint64_t *)(a7 + 40);
  unint64_t result = a5;
  unint64_t v13 = a5;
  unint64_t v39 = a6 >> 14;
  while (1)
  {
    unint64_t v34 = result >> 14;
    unint64_t v35 = result;
    if (result >> 14 >= v13 >> 14) {
      break;
    }
    if (v10 >= *(void *)(a8 + 16)) {
      goto LABEL_52;
    }
    if (*(void *)(v30 + 8 * v10) < (int64_t)v9)
    {
      if (v34 == v33) {
        return 0;
      }
    }
    else
    {
      unint64_t v15 = *(void *)(a7 + 16);
      BOOL v16 = v9 == v15 || v13 >> 14 == v11;
      uint64_t v29 = *(void *)(a7 + 16);
      if (!v16)
      {
        if (v9 <= v15) {
          unint64_t v23 = *(void *)(a7 + 16);
        }
        else {
          unint64_t v23 = v9;
        }
        unint64_t v36 = v15 - 1;
        unint64_t v38 = v23;
        uint64_t v24 = &v28[2 * v9];
        while (v38 != v9)
        {
          uint64_t v25 = *v24;
          uint64_t v42 = *(v24 - 1);
          uint64_t v43 = v25;
          swift_bridgeObjectRetain();
          uint64_t v40 = Substring.subscript.getter();
          uint64_t v41 = v26;
          char v27 = a9(&v42, &v40);
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          if ((v27 & 1) == 0)
          {
            unint64_t v17 = v9;
LABEL_37:
            unint64_t v11 = v39;
            goto LABEL_38;
          }
          unint64_t v17 = v9 + 1;
          unint64_t result = Substring.index(after:)();
          unint64_t v13 = result;
          if (v36 == v9) {
            goto LABEL_37;
          }
          v24 += 2;
          ++v9;
          unint64_t v11 = v39;
          if (result >> 14 == v39) {
            goto LABEL_38;
          }
        }
LABEL_50:
        __break(1u);
LABEL_51:
        __break(1u);
LABEL_52:
        __break(1u);
LABEL_53:
        __break(1u);
        return result;
      }
      unint64_t v17 = v9;
LABEL_38:
      if (v17 == v29)
      {
        unint64_t result = v35;
        if (v34 > v13 >> 14)
        {
          __break(1u);
          return v9;
        }
        return result;
      }
      unint64_t v10 = 0;
      if (v34 == v33) {
        return 0;
      }
      unint64_t v9 = v17;
    }
LABEL_3:
    unint64_t result = Substring.index(after:)();
    ++v10;
    if (__OFSUB__(v9--, 1)) {
      goto LABEL_51;
    }
  }
  uint64_t v37 = *(void *)(a7 + 16);
  if (!v37) {
    return result;
  }
  if (v34 == v11)
  {
    unint64_t v9 = 0;
    if (v11 == v33) {
      return v9;
    }
    unint64_t v10 = 0;
    unint64_t v13 = result;
    goto LABEL_3;
  }
  unint64_t v18 = 0;
  uint64_t v19 = v28;
  unint64_t v13 = result;
  while (1)
  {
    if (v37 == v18)
    {
      __break(1u);
      goto LABEL_50;
    }
    uint64_t v20 = *v19;
    uint64_t v42 = *(v19 - 1);
    uint64_t v43 = v20;
    swift_bridgeObjectRetain();
    uint64_t v40 = Substring.subscript.getter();
    uint64_t v41 = v21;
    char v22 = a9(&v42, &v40);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if ((v22 & 1) == 0) {
      break;
    }
    unint64_t v9 = v18 + 1;
    unint64_t result = Substring.index(after:)();
    unint64_t v13 = result;
    unint64_t v11 = v39;
    if (v37 - 1 != v18)
    {
      v19 += 2;
      ++v18;
      if (result >> 14 != v39) {
        continue;
      }
    }
    goto LABEL_33;
  }
  unint64_t v9 = v18;
  unint64_t v11 = v39;
LABEL_33:
  if (v9 != v37)
  {
    unint64_t v10 = 0;
    if (v34 != v33) {
      goto LABEL_3;
    }
    return 0;
  }
  unint64_t result = v35;
  if (v34 > v13 >> 14) {
    goto LABEL_53;
  }
  return result;
}

uint64_t ZSearcher.search(_:in:)@<X0>(void (*a1)(char *, uint64_t)@<X0>, uint64_t a2@<X1>, char *a3@<X2>, uint64_t a4@<X3>, uint64_t (*a5)(char *, char *)@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, char *a9@<X8>)
{
  uint64_t v73 = a5;
  uint64_t v74 = a6;
  uint64_t v67 = a4;
  uint64_t v72 = a3;
  uint64_t v80 = a1;
  uint64_t v61 = a9;
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v81 = a8;
  uint64_t v82 = a7;
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  uint64_t v13 = type metadata accessor for Range();
  uint64_t v14 = type metadata accessor for Optional();
  uint64_t v68 = *(void (***)(uint64_t, uint64_t))(v14 - 8);
  uint64_t v69 = v14;
  uint64_t v15 = MEMORY[0x270FA5388](v14);
  uint64_t v64 = (uint64_t)&v57 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v17 = MEMORY[0x270FA5388](v15);
  uint64_t v66 = (uint64_t)&v57 - v18;
  uint64_t v75 = v13;
  uint64_t v19 = *(void *)(v13 - 8);
  uint64_t v20 = MEMORY[0x270FA5388](v17);
  unint64_t v58 = (char *)&v57 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v22 = MEMORY[0x270FA5388](v20);
  uint64_t v59 = (char *)&v57 - v23;
  uint64_t v24 = *(void *)(AssociatedTypeWitness - 8);
  uint64_t v25 = MEMORY[0x270FA5388](v22);
  char v27 = (char *)&v57 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v25);
  uint64_t v29 = (char *)&v57 - v28;
  unint64_t v77 = (void (**)(char *, uint64_t))swift_allocBox();
  uint64_t v31 = v30;
  uint64_t v32 = *(void (**)(uint64_t, uint64_t, uint64_t))(v24 + 16);
  v32(v30, a2, AssociatedTypeWitness);
  uint64_t v76 = (char *)swift_allocBox();
  uint64_t v78 = v33;
  v32(v33, v31, AssociatedTypeWitness);
  uint64_t v34 = swift_allocObject();
  *(void *)(v34 + 16) = 0;
  uint64_t v35 = swift_allocObject();
  *(void *)(v35 + 16) = 0;
  uint64_t v71 = a2;
  uint64_t v62 = (void (*)(char *, uint64_t, uint64_t))v32;
  v32((uint64_t)v29, a2, AssociatedTypeWitness);
  unint64_t v36 = 0;
  uint64_t v37 = 0;
  uint64_t v65 = v67 + 32;
  uint64_t v63 = v24 + 16;
  char v79 = (void (**)(char *, uint64_t))(v24 + 8);
  uint64_t v60 = v19;
  uint64_t v70 = (uint64_t (**)(uint64_t, uint64_t, uint64_t))(v19 + 48);
  ++v68;
  while (1)
  {
    uint64_t result = dispatch thunk of static Comparable.>= infix(_:_:)();
    if (result)
    {
      uint64_t v39 = v66;
      compare #1 <A>(start:end:minLength:) in ZSearcher.search(_:in:)(v29, (uint64_t)v29, 0, v72, v73, v74, v71, v80, v66, v77, v76, v34, v35, v82, v81);
      uint64_t v40 = v75;
      int v41 = (*v70)(v39, 1, v75);
      uint64_t v42 = v39;
      if (v41 != 1)
      {
        (*v79)(v29, AssociatedTypeWitness);
        uint64_t v53 = v60;
        unint64_t v54 = *(void (**)(char *, uint64_t, uint64_t))(v60 + 32);
        unint64_t v55 = v59;
        v54(v59, v66, v40);
LABEL_16:
        uint64_t v52 = v61;
        v54(v61, (uint64_t)v55, v40);
        uint64_t v51 = 0;
        goto LABEL_17;
      }
LABEL_9:
      (*v68)(v42, v69);
      goto LABEL_10;
    }
    uint64_t v43 = v82;
    if ((v36 & 0x8000000000000000) != 0) {
      goto LABEL_20;
    }
    if (v36 >= *(void *)(v67 + 16)) {
      goto LABEL_21;
    }
    if (*(void *)(v65 + 8 * v36) >= v37)
    {
      v62(v27, v78, AssociatedTypeWitness);
      uint64_t v56 = v43;
      uint64_t v44 = v64;
      compare #1 <A>(start:end:minLength:) in ZSearcher.search(_:in:)(v29, (uint64_t)v27, v37, v72, v73, v74, v71, v80, v64, v77, v76, v34, v35, v56, v81);
      uint64_t v45 = *v79;
      (*v79)(v27, AssociatedTypeWitness);
      uint64_t v40 = v75;
      int v46 = (*v70)(v44, 1, v75);
      uint64_t v42 = v44;
      if (v46 != 1)
      {
        v45(v29, AssociatedTypeWitness);
        uint64_t v53 = v60;
        unint64_t v54 = *(void (**)(char *, uint64_t, uint64_t))(v60 + 32);
        unint64_t v55 = v58;
        v54(v58, v64, v40);
        goto LABEL_16;
      }
      goto LABEL_9;
    }
LABEL_10:
    dispatch thunk of Collection.endIndex.getter();
    char v47 = dispatch thunk of static Equatable.== infix(_:_:)();
    unint64_t v48 = *v79;
    (*v79)(v27, AssociatedTypeWitness);
    if (v47)
    {
      v48(v29, AssociatedTypeWitness);
      uint64_t v51 = 1;
      uint64_t v52 = v61;
      uint64_t v40 = v75;
      uint64_t v53 = v60;
LABEL_17:
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v53 + 56))(v52, v51, 1, v40);
      swift_release();
      swift_release();
      swift_release();
      return swift_release();
    }
    uint64_t result = dispatch thunk of Collection.formIndex(after:)();
    uint64_t v49 = *(void *)(v34 + 16);
    unint64_t v36 = v49 + 1;
    if (__OFADD__(v49, 1)) {
      break;
    }
    *(void *)(v34 + 16) = v36;
    uint64_t v50 = *(void *)(v35 + 16);
    uint64_t v37 = v50 - 1;
    if (__OFSUB__(v50, 1)) {
      goto LABEL_19;
    }
    *(void *)(v35 + 16) = v37;
  }
  __break(1u);
LABEL_19:
  __break(1u);
LABEL_20:
  __break(1u);
LABEL_21:
  __break(1u);
  return result;
}

void *BidirectionalCollection<>.firstRange<A>(of:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  Collection.subscript.getter();
  long long v7 = v13;
  unint64_t v9 = v14;
  uint64_t v8 = v15;
  uint64_t result = (*(void *(**)(uint64_t *__return_ptr, uint64_t, uint64_t))(a5 + 16))(&v12, a3, a5);
  uint64_t v16 = v12;
  if (*((void *)&v7 + 1) >> 14 < (unint64_t)v7 >> 14)
  {
    __break(1u);
  }
  else
  {
    swift_getAssociatedTypeWitness();
    type metadata accessor for Regex();
    Regex._firstMatch(_:in:)(v9, v8, v7, *((uint64_t *)&v7 + 1), &v13);
    swift_bridgeObjectRelease();
    swift_release();
    if (!*((void *)&v13 + 1)) {
      return 0;
    }
    uint64_t v11 = v15;
    outlined consume of Regex<A1.RegexOutput>.Match?<A><A1>(v13, *((uint64_t *)&v13 + 1));
    return (void *)v11;
  }
  return result;
}

unint64_t specialized RangesCollection.init(base:searcher:)@<X0>(unint64_t result@<X0>, unint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  if (a2 >> 14 >= result >> 14)
  {
    unint64_t v10 = *(void *)(a5 + 32);
    uint64_t v66 = *(void *)(a5 + 24);
    uint64_t v67 = *(void *)(a5 + 16);
    unint64_t v12 = result;
    unint64_t v13 = *(void *)(a5 + 40);
    uint64_t v72 = *(void *)(a5 + 48);
    long long v73 = *(_OWORD *)(a5 + 56);
    long long v68 = *(_OWORD *)(a5 + 72);
    long long v69 = *(_OWORD *)a5;
    char v63 = *(unsigned char *)(a5 + 88);
    swift_bridgeObjectRetain();
    outlined retain of SubstringSearcher(a5);
    unint64_t v60 = v12;
    unint64_t v71 = a2;
    uint64_t v14 = Substring.subscript.getter();
    uint64_t v16 = v15;
    uint64_t v18 = v17;
    uint64_t v20 = v19;
    uint64_t v70 = a4;
    swift_bridgeObjectRetain();
    unint64_t v64 = v13;
    unint64_t v65 = v10;
    uint64_t v62 = specialized SubstringSearcher.State.init(text:pattern:)(v14, v16, v18, v20, v10, v13);
    if (v23)
    {
      uint64_t v25 = a3;
      swift_bridgeObjectRelease();
      outlined release of SubstringSearcher(a5);
      unint64_t v29 = v60;
    }
    else
    {
      unint64_t v24 = v22;
      uint64_t v59 = v21;
      swift_bridgeObjectRetain();
      uint64_t v25 = a3;
      SubstringSearcher.nextRange(in:searchFromEnd:)(v60, v71, v24, (uint64_t)v74);
      uint64_t v57 = v74[1];
      uint64_t v58 = v74[0];
      char v26 = v75;
      uint64_t v27 = v76;
      char v28 = v77;
      swift_bridgeObjectRelease();
      outlined release of SubstringSearcher(a5);
      uint64_t result = swift_bridgeObjectRelease();
      unint64_t v29 = v60;
      if ((v26 & 1) == 0)
      {
        char v30 = 0;
        unint64_t v31 = v71;
        uint64_t v32 = v25;
        uint64_t v33 = a4;
        unint64_t v34 = v64;
        unint64_t v35 = v65;
        char v36 = v28;
        uint64_t v37 = v72;
        uint64_t v38 = v62;
        unint64_t v39 = v60;
        uint64_t v40 = v58;
        uint64_t v41 = v59;
        uint64_t v42 = v57;
LABEL_7:
        LOBYTE(v74[0]) = v63 & 1;
        char v79 = v30;
        char v78 = v36;
        *(void *)a6 = v39;
        *(void *)(a6 + 8) = v31;
        *(void *)(a6 + 16) = v32;
        *(void *)(a6 + 24) = v33;
        *(_OWORD *)(a6 + 32) = v69;
        *(void *)(a6 + 48) = v67;
        *(void *)(a6 + 56) = v66;
        *(void *)(a6 + 64) = v35;
        *(void *)(a6 + 72) = v34;
        *(void *)(a6 + 80) = v37;
        *(_OWORD *)(a6 + 88) = v73;
        *(_OWORD *)(a6 + 104) = v68;
        *(unsigned char *)(a6 + 120) = v63 & 1;
        *(void *)(a6 + 128) = v40;
        *(void *)(a6 + 136) = v42;
        *(unsigned char *)(a6 + 144) = v30;
        *(void *)(a6 + 152) = v38;
        *(void *)(a6 + 160) = v41;
        *(void *)(a6 + 168) = v27;
        *(unsigned char *)(a6 + 176) = v78;
        return result;
      }
    }
    outlined retain of SubstringSearcher(a5);
    uint64_t v32 = v25;
    uint64_t v43 = Substring.subscript.getter();
    uint64_t v45 = v44;
    uint64_t v47 = v46;
    uint64_t v49 = v48;
    swift_bridgeObjectRetain();
    uint64_t v50 = v45;
    uint64_t v51 = v47;
    uint64_t v52 = v49;
    unint64_t v34 = v64;
    unint64_t v35 = v65;
    uint64_t v37 = v72;
    uint64_t v61 = specialized SubstringSearcher.State.init(text:pattern:)(v43, v50, v51, v52, v65, v64);
    unint64_t v53 = v29;
    uint64_t v41 = v54;
    uint64_t v27 = v55;
    char v36 = v56 & 1;
    outlined release of SubstringSearcher(a5);
    uint64_t result = swift_bridgeObjectRelease();
    unint64_t v39 = v53;
    uint64_t v33 = v70;
    unint64_t v31 = v71;
    uint64_t v40 = 0;
    uint64_t v42 = 0;
    char v30 = 1;
    uint64_t v38 = v61;
    goto LABEL_7;
  }
  __break(1u);
  return result;
}

unint64_t specialized RangesCollection.init(base:searcher:)@<X0>(unint64_t result@<X0>, unint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t (*a7)(uint64_t *, uint64_t *)@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>)
{
  unint64_t v9 = a2 >> 14;
  if (a2 >> 14 < result >> 14)
  {
    __break(1u);
  }
  else
  {
    unint64_t v17 = result;
    swift_bridgeObjectRetain();
    unint64_t v29 = a7;
    uint64_t v30 = a8;
    uint64_t v27 = a5;
    unint64_t v19 = specialized ZSearcher.search(_:in:)(v17, a2, a3, a4, v17, a2, a5, a6, a7);
    unint64_t v21 = v19;
    unint64_t v22 = v20;
    char v24 = v23;
    uint64_t v28 = a6;
    if (v23)
    {
      char v25 = 0;
      uint64_t v26 = v17;
    }
    else if (v19 >> 14 == v20 >> 14)
    {
      if (v19 >> 14 == v9)
      {
        uint64_t v26 = 0;
        char v25 = 1;
      }
      else
      {
        uint64_t v26 = Substring.index(after:)();
        char v25 = 0;
      }
    }
    else
    {
      char v25 = 0;
      uint64_t v26 = v20;
    }
    uint64_t result = swift_bridgeObjectRelease();
    *(void *)a9 = v17;
    *(void *)(a9 + 8) = a2;
    *(void *)(a9 + 16) = a3;
    *(void *)(a9 + 24) = a4;
    *(void *)(a9 + 32) = v27;
    *(void *)(a9 + 40) = v28;
    *(void *)(a9 + 48) = v29;
    *(void *)(a9 + 56) = v30;
    *(void *)(a9 + 64) = v21;
    *(void *)(a9 + 72) = v22;
    *(unsigned char *)(a9 + 80) = v24 & 1;
    *(void *)(a9 + 88) = v26;
    *(unsigned char *)(a9 + 96) = v25;
    *(void *)(a9 + 104) = a2;
  }
  return result;
}

uint64_t RangesCollection.init(base:searcher:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v94 = a2;
  uint64_t v95 = a1;
  uint64_t v96 = a5;
  uint64_t v7 = type metadata accessor for RangesCollection.Index();
  uint64_t v84 = *(void *)(v7 - 8);
  uint64_t v85 = v7;
  MEMORY[0x270FA5388](v7);
  uint64_t v71 = (uint64_t)&v68 - v8;
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  uint64_t v10 = type metadata accessor for Range();
  uint64_t v70 = type metadata accessor for Optional();
  uint64_t v69 = *(void *)(v70 - 8);
  uint64_t v11 = MEMORY[0x270FA5388](v70);
  uint64_t v81 = (char *)&v68 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v11);
  uint64_t v90 = (char *)&v68 - v13;
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
  uint64_t v14 = MEMORY[0x270FA5388](TupleTypeMetadata2);
  char v77 = (char *)&v68 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v16 = MEMORY[0x270FA5388](v14);
  uint64_t v76 = (char *)&v68 - v17;
  uint64_t v72 = *(void *)(AssociatedTypeWitness - 8);
  uint64_t v18 = MEMORY[0x270FA5388](v16);
  unint64_t v20 = (char *)&v68 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v21 = MEMORY[0x270FA5388](v18);
  char v23 = (char *)&v68 - v22;
  uint64_t v91 = v10;
  uint64_t v80 = *(void *)(v10 - 8);
  uint64_t v24 = MEMORY[0x270FA5388](v21);
  uint64_t v26 = (char *)&v68 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v27 = MEMORY[0x270FA5388](v24);
  long long v73 = (char *)&v68 - v28;
  MEMORY[0x270FA5388](v27);
  uint64_t v74 = (char *)&v68 - v29;
  uint64_t v30 = swift_getAssociatedTypeWitness();
  uint64_t v88 = *(void *)(v30 - 8);
  uint64_t v89 = v30;
  uint64_t v31 = MEMORY[0x270FA5388](v30);
  char v75 = (char *)&v68 - ((v32 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v31);
  uint64_t v93 = (uint64_t)&v68 - v33;
  uint64_t v34 = swift_checkMetadataState();
  uint64_t v78 = *(void *)(v34 - 8);
  uint64_t v35 = v96;
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v78 + 16))(v96, v95, v34);
  uint64_t v83 = a4;
  uint64_t v87 = type metadata accessor for RangesCollection();
  uint64_t v36 = v35 + *(int *)(v87 + 36);
  uint64_t v37 = *(void *)(a3 - 8);
  uint64_t v38 = *(void (**)(uint64_t, uint64_t, uint64_t))(v37 + 16);
  uint64_t v82 = a3;
  v38(v36, v94, a3);
  dispatch thunk of Collection.startIndex.getter();
  uint64_t v79 = v34;
  dispatch thunk of Collection.endIndex.getter();
  uint64_t result = dispatch thunk of static Comparable.<= infix(_:_:)();
  if (result)
  {
    long long v68 = v26;
    uint64_t v40 = TupleTypeMetadata2;
    uint64_t v41 = v76;
    uint64_t v42 = &v76[*(int *)(TupleTypeMetadata2 + 48)];
    uint64_t v43 = v72;
    uint64_t AssociatedConformanceWitness = v37;
    uint64_t v44 = *(void (**)(char *, char *, uint64_t))(v72 + 32);
    v44(v76, v23, AssociatedTypeWitness);
    v44(v42, v20, AssociatedTypeWitness);
    uint64_t v45 = v77;
    uint64_t v46 = &v77[*(int *)(v40 + 48)];
    uint64_t v47 = *(void (**)(char *, char *, uint64_t))(v43 + 16);
    v47(v77, v41, AssociatedTypeWitness);
    v47(v46, v42, AssociatedTypeWitness);
    uint64_t v48 = v73;
    v44(v73, v45, AssociatedTypeWitness);
    uint64_t v49 = *(void (**)(char *, uint64_t))(v43 + 8);
    v49(v46, AssociatedTypeWitness);
    uint64_t v50 = &v45[*(int *)(TupleTypeMetadata2 + 48)];
    v44(v45, v41, AssociatedTypeWitness);
    v44(v50, v42, AssociatedTypeWitness);
    uint64_t v51 = v91;
    v44(&v48[*(int *)(v91 + 36)], v50, AssociatedTypeWitness);
    v49(v45, AssociatedTypeWitness);
    uint64_t v52 = v80;
    unint64_t v53 = v74;
    uint64_t v76 = *(char **)(v80 + 32);
    char v77 = (char *)(v80 + 32);
    ((void (*)(char *, char *, uint64_t))v76)(v74, v48, v51);
    uint64_t v55 = v82;
    uint64_t v54 = v83;
    uint64_t v57 = v93;
    uint64_t v56 = v94;
    uint64_t v58 = v95;
    (*(void (**)(uint64_t, char *, uint64_t, uint64_t))(v83 + 32))(v95, v53, v82, v83);
    (*(void (**)(char *, uint64_t))(v52 + 8))(v53, v51);
    uint64_t v59 = (uint64_t)v90;
    uint64_t v74 = *(char **)(v52 + 56);
    ((void (*)(char *, uint64_t, uint64_t, uint64_t))v74)(v90, 1, 1, v51);
    uint64_t v60 = (uint64_t)v75;
    (*(void (**)(char *, uint64_t, uint64_t))(v88 + 16))(v75, v57, v89);
    TupleTypeMetadata2 = v96 + *(int *)(v87 + 40);
    RangesCollection.Index.init(range:state:)(v59, v60, TupleTypeMetadata2);
    uint64_t v61 = v81;
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v54 + 40))(v58, v57, v55, v54);
    (*(void (**)(uint64_t, uint64_t))(AssociatedConformanceWitness + 8))(v56, v55);
    (*(void (**)(uint64_t, uint64_t))(v78 + 8))(v58, v79);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v52 + 48))(v61, 1, v51) == 1)
    {
      (*(void (**)(uint64_t, uint64_t))(v88 + 8))(v93, v89);
      (*(void (**)(char *, uint64_t))(v69 + 8))(v61, v70);
      uint64_t v62 = v71;
      RangesCollection.endIndex.getter(v87, v71);
      return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v84 + 40))(TupleTypeMetadata2, v62, v85);
    }
    else
    {
      char v63 = v68;
      uint64_t v64 = v91;
      unint64_t v65 = (void (*)(char *, char *, uint64_t))v76;
      ((void (*)(char *, char *, uint64_t))v76)(v68, v61, v91);
      uint64_t v66 = (uint64_t)v90;
      v65(v90, v63, v64);
      ((void (*)(uint64_t, void, uint64_t, uint64_t))v74)(v66, 0, 1, v64);
      uint64_t v67 = TupleTypeMetadata2;
      (*(void (**)(uint64_t, uint64_t))(v84 + 8))(TupleTypeMetadata2, v85);
      return RangesCollection.Index.init(range:state:)(v66, v93, v67);
    }
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t RangesCollection.Index.init(range:state:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  type metadata accessor for Range();
  uint64_t v6 = type metadata accessor for Optional();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 32))(a3, a1, v6);
  uint64_t v7 = a3 + *(int *)(type metadata accessor for RangesCollection.Index() + 36);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  unint64_t v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(AssociatedTypeWitness - 8) + 32);

  return v9(v7, a2, AssociatedTypeWitness);
}

uint64_t RangesCollection.endIndex.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v77 = a1;
  uint64_t v71 = a2;
  uint64_t v3 = *(void *)(a1 + 16);
  uint64_t v2 = *(void *)(a1 + 24);
  swift_getAssociatedTypeWitness();
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
  uint64_t v5 = MEMORY[0x270FA5388](TupleTypeMetadata2);
  uint64_t v72 = (char *)&v59 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = MEMORY[0x270FA5388](v5);
  uint64_t v69 = (char *)&v59 - v8;
  uint64_t v64 = *(void *)(AssociatedTypeWitness - 8);
  uint64_t v9 = MEMORY[0x270FA5388](v7);
  uint64_t v74 = (char *)&v59 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v9);
  long long v73 = (char *)&v59 - v11;
  uint64_t v76 = swift_getAssociatedConformanceWitness();
  uint64_t v12 = type metadata accessor for Range();
  uint64_t v13 = *(void *)(v12 - 8);
  uint64_t v14 = MEMORY[0x270FA5388](v12);
  uint64_t v66 = (char *)&v59 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v14);
  long long v68 = (char *)&v59 - v16;
  uint64_t v17 = swift_checkMetadataState();
  uint64_t v18 = *(void *)(v17 - 8);
  uint64_t v19 = MEMORY[0x270FA5388](v17);
  uint64_t v21 = (char *)&v59 - v20;
  uint64_t v22 = *(void *)(v3 - 8);
  MEMORY[0x270FA5388](v19);
  uint64_t v24 = (char *)&v59 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v67 = v2;
  uint64_t v25 = swift_getAssociatedTypeWitness();
  MEMORY[0x270FA5388](v25 - 8);
  uint64_t v61 = (char *)&v59 - v26;
  uint64_t v27 = type metadata accessor for Optional();
  MEMORY[0x270FA5388](v27 - 8);
  uint64_t v70 = v13;
  uint64_t v28 = *(void (**)(void))(v13 + 56);
  uint64_t v59 = v12;
  uint64_t v60 = (uint64_t)&v59 - v29;
  v28();
  uint64_t v30 = v78;
  uint64_t v31 = v78 + *(int *)(v77 + 36);
  uint64_t v65 = v22;
  uint64_t v32 = *(void (**)(char *, uint64_t, uint64_t))(v22 + 16);
  uint64_t v62 = v24;
  uint64_t v33 = v24;
  uint64_t v34 = v3;
  uint64_t v35 = v3;
  uint64_t v37 = v73;
  uint64_t v36 = v74;
  v32(v33, v31, v35);
  uint64_t v77 = v18;
  uint64_t v38 = *(void (**)(char *, uint64_t, uint64_t))(v18 + 16);
  char v63 = v21;
  v38(v21, v30, v17);
  dispatch thunk of Collection.startIndex.getter();
  dispatch thunk of Collection.endIndex.getter();
  uint64_t result = dispatch thunk of static Comparable.<= infix(_:_:)();
  if (result)
  {
    uint64_t v40 = TupleTypeMetadata2;
    uint64_t v41 = v69;
    uint64_t v42 = &v69[*(int *)(TupleTypeMetadata2 + 48)];
    uint64_t v78 = v34;
    uint64_t v43 = v64;
    uint64_t v44 = *(void (**)(char *, char *, uint64_t))(v64 + 32);
    v44(v69, v37, AssociatedTypeWitness);
    uint64_t AssociatedConformanceWitness = (uint64_t)v42;
    v44(v42, v36, AssociatedTypeWitness);
    uint64_t v45 = v72;
    uint64_t v46 = &v72[*(int *)(v40 + 48)];
    uint64_t v76 = v17;
    uint64_t v47 = *(void (**)(char *, char *, uint64_t))(v43 + 16);
    v47(v72, v41, AssociatedTypeWitness);
    v47(v46, v42, AssociatedTypeWitness);
    uint64_t v48 = v66;
    v44(v66, v45, AssociatedTypeWitness);
    uint64_t v49 = *(void (**)(char *, uint64_t))(v43 + 8);
    v49(v46, AssociatedTypeWitness);
    uint64_t v50 = &v45[*(int *)(TupleTypeMetadata2 + 48)];
    v44(v45, v41, AssociatedTypeWitness);
    v44(v50, (char *)AssociatedConformanceWitness, AssociatedTypeWitness);
    uint64_t v51 = v59;
    v44(&v48[*(int *)(v59 + 36)], v50, AssociatedTypeWitness);
    v49(v45, AssociatedTypeWitness);
    uint64_t v52 = v70;
    unint64_t v53 = v68;
    uint64_t v54 = v51;
    (*(void (**)(char *, char *, uint64_t))(v70 + 32))(v68, v48, v51);
    uint64_t v56 = (uint64_t)v61;
    uint64_t v55 = v62;
    uint64_t v57 = v63;
    uint64_t v58 = v78;
    (*(void (**)(char *, char *, uint64_t, uint64_t))(v67 + 32))(v63, v53, v78, v67);
    (*(void (**)(char *, uint64_t))(v52 + 8))(v53, v54);
    (*(void (**)(char *, uint64_t))(v77 + 8))(v57, v76);
    (*(void (**)(char *, uint64_t))(v65 + 8))(v55, v58);
    return RangesCollection.Index.init(range:state:)(v60, v56, v71);
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t RangesIterator.init(base:searcher:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v67 = a5;
  uint64_t v68 = a2;
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
  uint64_t v9 = MEMORY[0x270FA5388](TupleTypeMetadata2);
  uint64_t v55 = (char *)&v48 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = MEMORY[0x270FA5388](v9);
  uint64_t v60 = (char *)&v48 - v12;
  uint64_t v62 = *(void *)(AssociatedTypeWitness - 8);
  uint64_t v13 = MEMORY[0x270FA5388](v11);
  uint64_t v15 = (char *)&v48 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v13);
  uint64_t v17 = (char *)&v48 - v16;
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  uint64_t v63 = type metadata accessor for Range();
  uint64_t v61 = *(void *)(v63 - 8);
  uint64_t v18 = MEMORY[0x270FA5388](v63);
  uint64_t v56 = (char *)&v48 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v18);
  uint64_t v21 = (char *)&v48 - v20;
  uint64_t v22 = swift_getAssociatedTypeWitness();
  uint64_t v58 = *(void *)(v22 - 8);
  uint64_t v59 = v22;
  MEMORY[0x270FA5388](v22);
  uint64_t v57 = (char *)&v48 - v23;
  uint64_t v24 = swift_checkMetadataState();
  uint64_t v53 = *(void *)(v24 - 8);
  uint64_t v25 = v67;
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v53 + 16))(v67, a1, v24);
  uint64_t v64 = a4;
  uint64_t v52 = type metadata accessor for RangesIterator();
  uint64_t v26 = v25 + *(int *)(v52 + 36);
  uint64_t v51 = *(void *)(a3 - 8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v51 + 16))(v26, v68, a3);
  dispatch thunk of Collection.startIndex.getter();
  uint64_t v54 = v24;
  dispatch thunk of Collection.endIndex.getter();
  uint64_t result = dispatch thunk of static Comparable.<= infix(_:_:)();
  if (result)
  {
    uint64_t v49 = v21;
    uint64_t v50 = a1;
    uint64_t v28 = v55;
    uint64_t v29 = v15;
    uint64_t v30 = TupleTypeMetadata2;
    uint64_t v31 = v60;
    uint64_t v32 = &v60[*(int *)(TupleTypeMetadata2 + 48)];
    uint64_t v33 = v62;
    uint64_t AssociatedConformanceWitness = a3;
    uint64_t v34 = *(void (**)(char *, char *, uint64_t))(v62 + 32);
    v34(v60, v17, AssociatedTypeWitness);
    uint64_t v35 = v32;
    v34(v32, v29, AssociatedTypeWitness);
    uint64_t v36 = &v28[*(int *)(v30 + 48)];
    uint64_t v37 = *(void (**)(char *, char *, uint64_t))(v33 + 16);
    v37(v28, v31, AssociatedTypeWitness);
    v37(v36, v35, AssociatedTypeWitness);
    uint64_t v38 = v56;
    v34(v56, v28, AssociatedTypeWitness);
    unint64_t v39 = *(void (**)(char *, uint64_t))(v33 + 8);
    v39(v36, AssociatedTypeWitness);
    uint64_t v40 = &v28[*(int *)(TupleTypeMetadata2 + 48)];
    v34(v28, v31, AssociatedTypeWitness);
    v34(v40, v35, AssociatedTypeWitness);
    uint64_t v41 = v63;
    v34(&v38[*(int *)(v63 + 36)], v40, AssociatedTypeWitness);
    v39(v28, AssociatedTypeWitness);
    uint64_t v42 = v61;
    uint64_t v43 = v49;
    (*(void (**)(char *, char *, uint64_t))(v61 + 32))(v49, v38, v41);
    uint64_t v44 = AssociatedConformanceWitness;
    uint64_t v45 = v57;
    uint64_t v46 = v50;
    uint64_t v47 = v68;
    (*(void (**)(uint64_t, char *, uint64_t))(v64 + 32))(v50, v43, AssociatedConformanceWitness);
    (*(void (**)(uint64_t, uint64_t))(v51 + 8))(v47, v44);
    (*(void (**)(uint64_t, uint64_t))(v53 + 8))(v46, v54);
    (*(void (**)(char *, uint64_t))(v42 + 8))(v43, v41);
    return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v58 + 32))(v67 + *(int *)(v52 + 40), v45, v59);
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t RangesIterator.next()(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t, uint64_t, void))(*(void *)(a1 + 24) + 40))(v1, v1 + *(int *)(a1 + 40), *(void *)(a1 + 16));
}

uint64_t RangesCollection.makeIterator()@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3 = v2;
  uint64_t v6 = *(void *)(a1 + 16);
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = MEMORY[0x270FA5388](a1);
  uint64_t v10 = (char *)&v17 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = *(void *)(v8 + 24);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  MEMORY[0x270FA5388](AssociatedTypeWitness);
  uint64_t v14 = (char *)&v17 - v13;
  (*(void (**)(char *, uint64_t))(v15 + 16))((char *)&v17 - v13, v3);
  (*(void (**)(char *, uint64_t, uint64_t))(v7 + 16))(v10, v3 + *(int *)(a1 + 36), v6);
  return RangesIterator.init(base:searcher:)((uint64_t)v14, (uint64_t)v10, v6, v11, a2);
}

uint64_t protocol witness for Sequence.makeIterator() in conformance RangesCollection<A>(uint64_t a1, uint64_t a2)
{
  return protocol witness for Sequence.makeIterator() in conformance RangesCollection<A>(a1, a2, (void (*)(void))RangesCollection.makeIterator());
}

uint64_t protocol witness for Sequence.underestimatedCount.getter in conformance RangesCollection<A>(uint64_t a1)
{
  uint64_t WitnessTable = swift_getWitnessTable();

  return MEMORY[0x270F9E108](a1, WitnessTable);
}

uint64_t protocol witness for Sequence._customContainsEquatableElement(_:) in conformance RangesCollection<A>()
{
  return 2;
}

uint64_t protocol witness for Sequence._copyToContiguousArray() in conformance RangesCollection<A>(uint64_t a1)
{
  uint64_t WitnessTable = swift_getWitnessTable();

  return MEMORY[0x270F9E128](a1, WitnessTable);
}

uint64_t protocol witness for Sequence.withContiguousStorageIfAvailable<A>(_:) in conformance RangesCollection<A>()
{
  return Sequence.withContiguousStorageIfAvailable<A>(_:)();
}

uint64_t RangesCollection.formIndex(after:)(uint64_t a1, uint64_t a2)
{
  uint64_t v6 = *(void *)(a2 + 16);
  uint64_t v5 = *(void *)(a2 + 24);
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  type metadata accessor for Range();
  uint64_t v7 = type metadata accessor for Optional();
  uint64_t v16 = *(void *)(v7 - 8);
  uint64_t v17 = v7;
  MEMORY[0x270FA5388](v7);
  uint64_t v9 = (char *)&v16 - v8;
  uint64_t v10 = type metadata accessor for RangesCollection.Index();
  uint64_t v11 = *(void *)(v10 - 8);
  MEMORY[0x270FA5388](v10);
  uint64_t v13 = (char *)&v16 - v12;
  RangesCollection.endIndex.getter(a2, (uint64_t)&v16 - v12);
  uint64_t v14 = a1;
  LOBYTE(a1) = static RangesCollection.Index.== infix(_:_:)(a1, (uint64_t)v13);
  (*(void (**)(char *, uint64_t))(v11 + 8))(v13, v10);
  if (a1)
  {
    uint64_t result = _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
  }
  else
  {
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v5 + 40))(v2, v14 + *(int *)(v10 + 36), v6, v5);
    return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v16 + 40))(v14, v9, v17);
  }
  return result;
}

uint64_t RangesCollection.subscript.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  uint64_t v4 = type metadata accessor for Range();
  uint64_t v5 = type metadata accessor for Optional();
  uint64_t v6 = *(void *)(v5 - 8);
  MEMORY[0x270FA5388](v5);
  uint64_t v8 = (char *)&v11 - v7;
  (*(void (**)(char *, uint64_t, uint64_t))(v6 + 16))((char *)&v11 - v7, a1, v5);
  uint64_t v9 = *(void *)(v4 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v9 + 48))(v8, 1, v4) != 1) {
    return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v9 + 32))(a2, v8, v4);
  }
  (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
  uint64_t result = _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t protocol witness for Collection.startIndex.getter in conformance RangesCollection<A>@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return protocol witness for Collection.startIndex.getter in conformance RangesCollection<A>(a1, (uint64_t (*)(void, void, void))type metadata accessor for RangesCollection.Index, a2);
}

uint64_t (*protocol witness for Collection.subscript.read in conformance RangesCollection<A>(uint64_t **a1, uint64_t a2))()
{
  uint64_t v4 = (uint64_t *)malloc(0x28uLL);
  *a1 = v4;
  v4[4] = (uint64_t)RangesCollection.subscript.read(v4, a2);
  return protocol witness for Collection.subscript.read in conformance RangesCollection<A>;
}

uint64_t (*RangesCollection.subscript.read(uint64_t *a1, uint64_t a2))()
{
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  uint64_t v4 = type metadata accessor for Range();
  *a1 = v4;
  uint64_t v5 = *(void *)(v4 - 8);
  a1[1] = v5;
  uint64_t v6 = malloc(*(void *)(v5 + 64));
  a1[2] = (uint64_t)v6;
  RangesCollection.subscript.getter(a2, (uint64_t)v6);
  return RangesCollection.subscript.read;
}

uint64_t protocol witness for Collection.subscript.getter in conformance RangesCollection<A>()
{
  return MEMORY[0x270F9E1D0]();
}

uint64_t protocol witness for Collection.indices.getter in conformance RangesCollection<A>()
{
  return MEMORY[0x270F9E1B8]();
}

uint64_t protocol witness for Collection.isEmpty.getter in conformance RangesCollection<A>()
{
  return MEMORY[0x270F9E178]();
}

uint64_t protocol witness for Collection.count.getter in conformance RangesCollection<A>()
{
  return MEMORY[0x270F9E138]();
}

uint64_t protocol witness for Collection._customIndexOfEquatableElement(_:) in conformance RangesCollection<A>@<X0>(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  return protocol witness for Collection._customIndexOfEquatableElement(_:) in conformance RangesCollection<A>(a1, (void (*)(uint64_t, void, void))type metadata accessor for RangesCollection.Index, a2);
}

uint64_t protocol witness for Collection.index(_:offsetBy:) in conformance RangesCollection<A>()
{
  return MEMORY[0x270F9E150]();
}

uint64_t protocol witness for Collection.index(_:offsetBy:limitedBy:) in conformance RangesCollection<A>()
{
  return MEMORY[0x270F9E148]();
}

uint64_t protocol witness for Collection.distance(from:to:) in conformance RangesCollection<A>()
{
  return MEMORY[0x270F9E180]();
}

uint64_t protocol witness for Collection._failEarlyRangeCheck(_:bounds:) in conformance RangesCollection<A>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return specialized Collection._failEarlyRangeCheck(_:bounds:)(a1, a2, a3, a4, MEMORY[0x263F8D870], MEMORY[0x263F8D170]);
}

{
  return specialized Collection._failEarlyRangeCheck(_:bounds:)(a1, a2, a3, a4, MEMORY[0x263F8D1A0], MEMORY[0x263F8D180]);
}

uint64_t protocol witness for Collection.index(after:) in conformance RangesCollection<A>@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  return RangesCollection.index(after:)(a1, a2, (uint64_t (*)(void, void, void))type metadata accessor for RangesCollection.Index, RangesCollection.formIndex(after:), a3);
}

uint64_t static RangesCollection.Index.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v27 = a1;
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  swift_getAssociatedTypeWitness();
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  uint64_t v3 = type metadata accessor for Range();
  uint64_t v4 = *(void *)(v3 - 8);
  uint64_t v5 = MEMORY[0x270FA5388](v3);
  uint64_t v25 = (char *)&v24 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v5);
  uint64_t v24 = (char *)&v24 - v7;
  uint64_t v8 = type metadata accessor for Optional();
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
  uint64_t v10 = MEMORY[0x270FA5388](TupleTypeMetadata2 - 8);
  uint64_t v12 = (char *)&v24 - v11;
  uint64_t v13 = (char *)&v24 + *(int *)(v10 + 56) - v11;
  uint64_t v14 = *(void *)(v8 - 8);
  uint64_t v15 = *(void (**)(char *, uint64_t, uint64_t))(v14 + 16);
  v15((char *)&v24 - v11, v27, v8);
  v15(v13, a2, v8);
  uint64_t v16 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v4 + 48);
  LODWORD(v15) = v16(v12, 1, v3);
  int v17 = v16(v13, 1, v3);
  if (v15 == 1)
  {
    if (v17 == 1)
    {
      char v18 = 1;
    }
    else
    {
      (*(void (**)(char *, uint64_t))(v14 + 8))(v13, v8);
      char v18 = 0;
    }
  }
  else if (v17 == 1)
  {
    (*(void (**)(char *, uint64_t))(v4 + 8))(v12, v3);
    char v18 = 0;
  }
  else
  {
    uint64_t v19 = *(void (**)(char *, char *, uint64_t))(v4 + 32);
    uint64_t v20 = v24;
    v19(v24, v12, v3);
    uint64_t v21 = v25;
    v19(v25, v13, v3);
    char v18 = dispatch thunk of static Equatable.== infix(_:_:)();
    uint64_t v22 = *(void (**)(char *, uint64_t))(v4 + 8);
    v22(v21, v3);
    v22(v20, v3);
  }
  return v18 & 1;
}

uint64_t static RangesCollection.Index.< infix(_:_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v23 = a1;
  uint64_t v24 = a2;
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  swift_getAssociatedTypeWitness();
  v22[1] = swift_getAssociatedConformanceWitness();
  uint64_t v2 = type metadata accessor for Range();
  uint64_t v3 = *(void **)(v2 - 8);
  uint64_t v4 = MEMORY[0x270FA5388](v2);
  v22[0] = (char *)v22 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v4);
  uint64_t v7 = (char *)v22 - v6;
  uint64_t v8 = type metadata accessor for Optional();
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
  uint64_t v10 = MEMORY[0x270FA5388](TupleTypeMetadata2 - 8);
  uint64_t v12 = (char *)v22 - v11;
  uint64_t v13 = (char *)v22 + *(int *)(v10 + 56) - v11;
  uint64_t v14 = *(void *)(v8 - 8);
  uint64_t v15 = *(void (**)(char *, uint64_t, uint64_t))(v14 + 16);
  v15((char *)v22 - v11, v23, v8);
  v15(v13, v24, v8);
  uint64_t v16 = (unsigned int (*)(char *, uint64_t, uint64_t))v3[6];
  if (v16(v12, 1, v2) == 1)
  {
    (*(void (**)(char *, uint64_t))(v14 + 8))(v13, v8);
    char v17 = 0;
  }
  else if (v16(v13, 1, v2) == 1)
  {
    (*(void (**)(char *, uint64_t))(v14 + 8))(v12, v8);
    char v17 = 1;
  }
  else
  {
    char v18 = (void (*)(char *, char *, uint64_t))v3[4];
    v18(v7, v12, v2);
    uint64_t v19 = v22[0];
    v18((char *)v22[0], v13, v2);
    char v17 = dispatch thunk of static Comparable.< infix(_:_:)();
    uint64_t v20 = (void (*)(uint64_t, uint64_t))v3[1];
    v20(v19, v2);
    v20((uint64_t)v7, v2);
  }
  return v17 & 1;
}

uint64_t protocol witness for static Comparable.< infix(_:_:) in conformance RangesCollection<A>.Index(uint64_t a1, uint64_t a2)
{
  return static RangesCollection.Index.< infix(_:_:)(a1, a2);
}

uint64_t protocol witness for static Comparable.<= infix(_:_:) in conformance RangesCollection<A>.Index()
{
  return MEMORY[0x270F9D4B0]();
}

uint64_t protocol witness for static Comparable.>= infix(_:_:) in conformance RangesCollection<A>.Index()
{
  return MEMORY[0x270F9D4A8]();
}

uint64_t protocol witness for static Comparable.> infix(_:_:) in conformance RangesCollection<A>.Index()
{
  return MEMORY[0x270F9D4A0]();
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance RangesCollection<A>.Index(uint64_t a1, uint64_t a2)
{
  return static RangesCollection.Index.== infix(_:_:)(a1, a2);
}

uint64_t Collection._ranges<A>(of:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X2>, uint64_t a3@<X3>, uint64_t a4@<X8>)
{
  uint64_t v9 = *(void *)(a2 - 8);
  uint64_t v10 = MEMORY[0x270FA5388](a1);
  uint64_t v12 = (char *)&v17 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v10);
  uint64_t v14 = (char *)&v17 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t))(v15 + 16))(v14, v4);
  (*(void (**)(char *, uint64_t, uint64_t))(v9 + 16))(v12, a1, a2);
  return RangesCollection.init(base:searcher:)((uint64_t)v14, (uint64_t)v12, a2, a3, a4);
}

unint64_t specialized Collection<>._ranges<A>(of:)@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, unint64_t a3@<X2>, unint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X8>)
{
  uint64_t v14 = String.count.getter();
  if (v14)
  {
    uint64_t v15 = v14;
    uint64_t v16 = (uint64_t)specialized _ContiguousArrayBuffer.init(_uninitializedCount:minimumCapacity:)(v14, 0);
    swift_bridgeObjectRetain();
    uint64_t v17 = specialized Sequence._copySequenceContents(initializing:)(&v80, (Swift::String_optional *)(v16 + 32), v15, a1, a2);
    swift_bridgeObjectRelease();
    if (v17 == (void *)v15) {
      goto LABEL_5;
    }
    __break(1u);
  }
  uint64_t v16 = MEMORY[0x263F8EE78];
LABEL_5:
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Int>);
  uint64_t v18 = swift_allocObject();
  *(_OWORD *)(v18 + 16) = xmmword_209FAFD60;
  int64_t v19 = *(void *)(v16 + 16);
  *(void *)(v18 + 32) = v19;
  int64_t v78 = v19;
  uint64_t v74 = a5;
  uint64_t v75 = a6;
  unint64_t v72 = a3;
  unint64_t v73 = a4;
  uint64_t v71 = a7;
  if ((unint64_t)v19 >= 2)
  {
LABEL_81:
    uint64_t v61 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)1, v19, 0, (char *)v18);
    int64_t v19 = v78;
    uint64_t v18 = (uint64_t)v61;
  }
  uint64_t v20 = *(void *)(v16 + 16);
  uint64_t v21 = v20 != 0;
  uint64_t v79 = (Swift::String_optional *)v16;
  if (v20 != v21)
  {
    int64_t v24 = 0;
    int64_t v25 = 0;
    uint64_t v70 = (void **)(v16 + 40);
    uint64_t v67 = (Swift::String_optional *)(v16 + 32);
    uint64_t v68 = v20 - 1;
    uint64_t v66 = (void **)(v16 + 56);
    uint64_t v26 = (Swift::String_optional *)(v20 != 0);
    uint64_t v76 = v26;
    uint64_t v77 = *(void *)(v16 + 16);
    while (2)
    {
      uint64_t v27 = (uint64_t)v26 - v24;
      unint64_t result = 32 - 8 * v24;
      uint64_t v28 = -v24;
      if ((uint64_t)v26 <= v25) {
        int64_t v24 = v25;
      }
      else {
        int64_t v24 = (int64_t)v26;
      }
      uint64_t v16 = -(uint64_t)v26;
      uint64_t v69 = v25;
      uint64_t v29 = (char *)v70 + 16 * v25 - 16 * (void)v26;
      uint64_t v30 = &v79[-(void)v26];
      uint64_t v31 = &v79[(void)v26];
      int64_t v32 = (int64_t)v26;
      while (1)
      {
        if ((uint64_t)v26 < v21 || v32 >= v20)
        {
          __break(1u);
LABEL_75:
          __break(1u);
LABEL_76:
          __break(1u);
LABEL_77:
          __break(1u);
LABEL_78:
          __break(1u);
LABEL_79:
          __break(1u);
LABEL_80:
          __break(1u);
          goto LABEL_81;
        }
        int64_t v33 = v32 + 1;
        if (v24 == v32) {
          break;
        }
        if (v27 < 0) {
          goto LABEL_75;
        }
        unint64_t v34 = *(void *)(v18 + 16);
        if (v28 + v32 >= v34) {
          goto LABEL_76;
        }
        uint64_t v35 = *(void *)(v18 + result + 8 * v32);
        if (v35 >= v25 + v16)
        {
          unint64_t v45 = v25 + v16;
          int64_t v33 = v32 + v25 + v16;
          if (!__OFADD__(v32, v25 + v16))
          {
            if (v33 >= v19) {
              goto LABEL_68;
            }
            if ((v45 & 0x8000000000000000) == 0)
            {
              unint64_t countAndFlagsBits = v79[1].value._countAndFlagsBits;
              if (v45 < countAndFlagsBits)
              {
                if (v33 < countAndFlagsBits)
                {
                  uint64_t v50 = &v67[v33];
                  if (*((void *)v29 - 1) == v50->value._countAndFlagsBits && *(void **)v29 == v50->value._object) {
                    goto LABEL_50;
                  }
                  uint64_t v51 = v18;
                  int64_t v52 = v25;
                  char v53 = _stringCompareWithSmolCheck(_:_:expecting:)();
                  int64_t v25 = v52;
                  uint64_t v21 = (uint64_t)v76;
                  uint64_t v20 = v77;
                  int64_t v19 = v78;
                  uint64_t v18 = v51;
                  if (v53)
                  {
LABEL_50:
                    if (++v33 < v19)
                    {
                      uint64_t v54 = v79;
                      while (v16 + v33 < countAndFlagsBits)
                      {
                        if (v33 >= (uint64_t)countAndFlagsBits) {
                          goto LABEL_80;
                        }
                        if (v30[v69 + 3].value._countAndFlagsBits != v54[v69 + 3].value._countAndFlagsBits
                          || v30[v69 + 3].value._object != v54[v69 + 3].value._object)
                        {
                          uint64_t v56 = v18;
                          char v57 = _stringCompareWithSmolCheck(_:_:expecting:)();
                          uint64_t v21 = (uint64_t)v76;
                          uint64_t v20 = v77;
                          int64_t v19 = v78;
                          uint64_t v18 = v56;
                          if ((v57 & 1) == 0)
                          {
                            unint64_t v45 = v16 + v33;
                            goto LABEL_68;
                          }
                        }
                        ++v33;
                        ++v30;
                        ++v54;
                        if (v19 == v33)
                        {
                          unint64_t v45 = v16 + v33;
                          int64_t v33 = v19;
                          goto LABEL_68;
                        }
                      }
                      goto LABEL_79;
                    }
                    unint64_t v45 = v25 - v32 + 1;
                  }
LABEL_68:
                  unint64_t v58 = *(void *)(v18 + 24);
                  int64_t v59 = v34 + 1;
                  if (v34 < v58 >> 1)
                  {
                    int64_t v24 = v32;
                    goto LABEL_70;
                  }
                  uint64_t v60 = (Swift::String_optional *)v32;
LABEL_73:
                  uint64_t v18 = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v58 > 1), v59, 1, (char *)v18);
                  uint64_t v20 = v77;
                  int64_t v19 = v78;
                  uint64_t v21 = (uint64_t)v76;
                  int64_t v24 = (int64_t)v60;
                  goto LABEL_70;
                }
LABEL_87:
                __break(1u);
                return result;
              }
LABEL_86:
              __break(1u);
              goto LABEL_87;
            }
LABEL_85:
            __break(1u);
            goto LABEL_86;
          }
          __break(1u);
LABEL_83:
          __break(1u);
          goto LABEL_84;
        }
        unint64_t v36 = *(void *)(v18 + 24);
        if (v34 >= v36 >> 1)
        {
          uint64_t v62 = v28;
          unint64_t v63 = result;
          uint64_t v37 = (Swift::String_optional *)v24;
          uint64_t v64 = v27;
          int64_t v65 = v25;
          uint64_t v38 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v36 > 1), v34 + 1, 1, (char *)v18);
          uint64_t v27 = v64;
          int64_t v25 = v65;
          int64_t v24 = (int64_t)v37;
          uint64_t v21 = (uint64_t)v76;
          uint64_t v20 = v77;
          int64_t v19 = v78;
          uint64_t v18 = (uint64_t)v38;
          uint64_t v28 = v62;
          unint64_t result = v63;
        }
        *(void *)(v18 + 16) = v34 + 1;
        --v16;
        *(void *)(v18 + 8 * v34 + 32) = v35;
        v29 -= 16;
        --v30;
        ++v31;
        int64_t v32 = v33;
        if (v20 == v33) {
          goto LABEL_7;
        }
      }
      if (v24 >= v19) {
        goto LABEL_61;
      }
      uint64_t v39 = v79[1].value._countAndFlagsBits;
      if (!v39) {
        goto LABEL_83;
      }
      if (v24 >= v39)
      {
LABEL_84:
        __break(1u);
        goto LABEL_85;
      }
      uint64_t v40 = &v67[v24];
      if (v79[2].value._countAndFlagsBits == v40->value._countAndFlagsBits
        && v79[2].value._object == v40->value._object)
      {
        goto LABEL_31;
      }
      uint64_t v41 = v18;
      uint64_t v42 = (Swift::String_optional *)v24;
      char v43 = _stringCompareWithSmolCheck(_:_:expecting:)();
      int64_t v24 = (int64_t)v42;
      uint64_t v21 = (uint64_t)v76;
      uint64_t v20 = v77;
      int64_t v19 = v78;
      uint64_t v18 = v41;
      if (v43)
      {
LABEL_31:
        if (v33 < v19)
        {
          uint64_t v44 = v66;
          unint64_t v45 = 1;
          while (v39 != v45)
          {
            if (v32 + v45 >= v39) {
              goto LABEL_78;
            }
            if (*(v44 - 1) != (void *)v31[3].value._countAndFlagsBits || *v44 != v31[3].value._object)
            {
              uint64_t v47 = v18;
              uint64_t v16 = v24;
              char v48 = _stringCompareWithSmolCheck(_:_:expecting:)();
              int64_t v24 = v16;
              uint64_t v21 = (uint64_t)v76;
              uint64_t v20 = v77;
              int64_t v19 = v78;
              uint64_t v18 = v47;
              if ((v48 & 1) == 0)
              {
                int64_t v33 = v32 + v45;
                goto LABEL_65;
              }
            }
            ++v45;
            v44 += 2;
            ++v31;
            if ((uint64_t)(v32 + v45) >= v19)
            {
              int64_t v33 = v19;
              goto LABEL_65;
            }
          }
          goto LABEL_77;
        }
        unint64_t v45 = 1;
      }
      else
      {
LABEL_61:
        unint64_t v45 = 0;
        int64_t v33 = v24;
      }
LABEL_65:
      unint64_t v34 = *(void *)(v18 + 16);
      unint64_t v58 = *(void *)(v18 + 24);
      int64_t v59 = v34 + 1;
      if (v34 >= v58 >> 1)
      {
        uint64_t v60 = (Swift::String_optional *)v24;
        goto LABEL_73;
      }
LABEL_70:
      *(void *)(v18 + 16) = v59;
      *(void *)(v18 + 8 * v34 + 32) = v45;
      uint64_t v26 = (Swift::String_optional *)(v32 + 1);
      int64_t v25 = v33;
      if (v68 != v32) {
        continue;
      }
      break;
    }
  }
LABEL_7:
  uint64_t v22 = v18;
  swift_bridgeObjectRetain();

  return specialized RangesCollection.init(base:searcher:)(v72, v73, v74, v75, (uint64_t)v79, v22, specialized implicit closure #1 in Collection<>._ranges<A>(of:), 0, v71);
}

uint64_t Collection<>._ranges<A>(of:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X8>)
{
  MEMORY[0x270FA5388](a1);
  (*(void (**)(char *))(v14 + 16))((char *)v24 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v16 = Array.init<A>(_:)();
  uint64_t v17 = (void *)swift_allocObject();
  v17[2] = a2;
  v17[3] = a3;
  v17[4] = a4;
  v17[5] = a5;
  v17[6] = a6;
  v17[7] = AssociatedTypeWitness;
  v24[0] = ZSearcher.init(pattern:by:)(v16, (uint64_t (*)(char *, char *))partial apply for implicit closure #3 in Collection<>.split<A>(separator:maxSplits:omittingEmptySubsequences:), (uint64_t)v17);
  v24[1] = v18;
  v24[2] = v19;
  v24[3] = v20;
  uint64_t v21 = type metadata accessor for ZSearcher();
  uint64_t WitnessTable = swift_getWitnessTable();
  Collection._ranges<A>(of:)((uint64_t)v24, v21, WitnessTable, a7);
  swift_release();
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

uint64_t Collection<>.ranges<A>(of:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, unint64_t a6)
{
  unint64_t v120 = a6;
  uint64_t v119 = a5;
  uint64_t v126 = a4;
  type metadata accessor for ZSearcher();
  swift_getWitnessTable();
  uint64_t v118 = type metadata accessor for RangesCollection();
  MEMORY[0x270FA5388](v118);
  uint64_t v11 = (char *)&v116 - v10;
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
  uint64_t v13 = *(void *)(TupleTypeMetadata2 - 8);
  uint64_t v14 = MEMORY[0x270FA5388](TupleTypeMetadata2);
  uint64_t v16 = (char *)&v116 - v15;
  uint64_t v17 = (char *)&v116 + *(int *)(v14 + 48) - v15;
  uint64_t v18 = *(void *)(a2 - 8);
  uint64_t v19 = *(void (**)(char *, unint64_t, uint64_t))(v18 + 16);
  unint64_t v121 = v6;
  unint64_t v20 = v6;
  uint64_t v21 = a1;
  uint64_t v128 = a2;
  v19((char *)&v116 - v15, v20, a2);
  uint64_t v124 = *(void *)(a3 - 8);
  (*(void (**)(char *, uint64_t, uint64_t))(v124 + 16))(v17, a1, a3);
  int v22 = swift_dynamicCast();
  uint64_t v127 = v16;
  uint64_t v125 = v17;
  if (v22)
  {
    uint64_t v123 = v18;
    uint64_t v122 = a3;
    if (swift_dynamicCast())
    {
      unint64_t v23 = String.subscript.getter();
      unint64_t v25 = v24;
      unint64_t v27 = v26;
      unint64_t v29 = v28;
      swift_bridgeObjectRelease();
      unint64_t v30 = String.subscript.getter();
      unint64_t v32 = v31;
      unint64_t v34 = v33;
      unint64_t v36 = v35;
      uint64_t result = swift_bridgeObjectRelease();
      if (v25 >> 14 >= v23 >> 14)
      {
        uint64_t v38 = Substring.subscript.getter();
        unint64_t v120 = v27;
        unint64_t v121 = v29;
        uint64_t v40 = v39;
        uint64_t v42 = v41;
        unint64_t v43 = v34;
        uint64_t v45 = v44;
        swift_bridgeObjectRetain();
        uint64_t v46 = specialized SubstringSearcher.State.init(text:pattern:)(v38, v40, v42, v45, v30, v32);
        unint64_t v137 = v23;
        unint64_t v138 = v25;
        unint64_t v139 = v120;
        unint64_t v140 = v121;
        unint64_t v141 = v30;
        unint64_t v142 = v32;
        unint64_t v143 = v43;
        unint64_t v144 = v36;
        uint64_t v145 = v46;
        uint64_t v146 = v47;
        uint64_t v147 = v48;
        char v148 = v49 & 1;
        specialized _copySequenceToContiguousArray<A>(_:)((uint64_t)&v137);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
LABEL_8:
        swift_bridgeObjectRelease();
        swift_getCanonicalSpecializedMetadata();
        swift_getAssociatedTypeWitness();
        swift_getAssociatedConformanceWitness();
        type metadata accessor for Range();
        uint64_t v75 = _arrayForceCast<A, B>(_:)();
LABEL_18:
        swift_release();
        (*(void (**)(char *, uint64_t))(v124 + 8))(v125, v122);
        uint64_t v13 = v123;
LABEL_21:
        (*(void (**)(char *, uint64_t))(v13 + 8))(v127, v128);
        return v75;
      }
      __break(1u);
      goto LABEL_23;
    }
    if (swift_dynamicCast())
    {
      unint64_t v50 = v133;
      unint64_t v51 = v134;
      unint64_t v52 = v135;
      unint64_t v53 = v136;
      unint64_t v121 = String.subscript.getter();
      unint64_t v55 = v54;
      unint64_t v120 = v56;
      unint64_t v58 = v57;
      uint64_t result = swift_bridgeObjectRelease();
      if (v51 >> 14 >= v50 >> 14)
      {
        uint64_t v59 = Substring.subscript.getter();
        uint64_t v61 = v60;
        unint64_t v62 = v52;
        uint64_t v64 = v63;
        uint64_t v66 = v65;
        swift_bridgeObjectRetain();
        uint64_t v67 = v59;
        uint64_t v68 = v66;
        unint64_t v69 = v121;
        unint64_t v70 = v120;
        uint64_t v71 = specialized SubstringSearcher.State.init(text:pattern:)(v67, v61, v64, v68, v121, v55);
        unint64_t v137 = v50;
        unint64_t v138 = v51;
        unint64_t v139 = v62;
        unint64_t v140 = v53;
        unint64_t v141 = v69;
        unint64_t v142 = v55;
        unint64_t v143 = v70;
        unint64_t v144 = v58;
        uint64_t v145 = v71;
        uint64_t v146 = v72;
        uint64_t v147 = v73;
        char v148 = v74 & 1;
        specialized _copySequenceToContiguousArray<A>(_:)((uint64_t)&v137);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        goto LABEL_8;
      }
      goto LABEL_24;
    }
    swift_bridgeObjectRelease();
    a3 = v122;
    uint64_t v18 = v123;
  }
  if (!swift_dynamicCast())
  {
LABEL_20:
    Collection<>._ranges<A>(of:)(v21, v128, a3, v126, v119, v120, (uint64_t)v11);
    swift_getAssociatedTypeWitness();
    swift_getAssociatedConformanceWitness();
    type metadata accessor for Range();
    swift_getWitnessTable();
    uint64_t v75 = Array.init<A>(_:)();
    uint64_t v128 = TupleTypeMetadata2;
    goto LABEL_21;
  }
  uint64_t v123 = v18;
  unint64_t v76 = v134;
  unint64_t v117 = v133;
  unint64_t v78 = v135;
  unint64_t v77 = v136;
  if (swift_dynamicCast())
  {
    unint64_t v120 = v76;
    unint64_t v121 = v78;
    uint64_t v122 = a3;
    unint64_t v79 = String.subscript.getter();
    unint64_t v81 = v80;
    unint64_t v83 = v82;
    unint64_t v85 = v84;
    uint64_t result = swift_bridgeObjectRelease();
    if (v81 >> 14 < v79 >> 14)
    {
LABEL_23:
      __break(1u);
LABEL_24:
      __break(1u);
      goto LABEL_25;
    }
    uint64_t v86 = Substring.subscript.getter();
    uint64_t v88 = v87;
    uint64_t v90 = v89;
    uint64_t v92 = v91;
    swift_bridgeObjectRetain();
    uint64_t v93 = v88;
    uint64_t v94 = v90;
    uint64_t v95 = v92;
    unint64_t v96 = v117;
    unint64_t v97 = v120;
    unint64_t v98 = v121;
    uint64_t v99 = specialized SubstringSearcher.State.init(text:pattern:)(v86, v93, v94, v95, v117, v120);
    unint64_t v137 = v79;
    unint64_t v138 = v81;
    unint64_t v139 = v83;
LABEL_17:
    unint64_t v140 = v85;
    unint64_t v141 = v96;
    unint64_t v142 = v97;
    unint64_t v143 = v98;
    unint64_t v144 = v77;
    uint64_t v145 = v99;
    uint64_t v146 = v100;
    uint64_t v147 = v101;
    char v148 = v102 & 1;
    specialized _copySequenceToContiguousArray<A>(_:)((uint64_t)&v137);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_getCanonicalSpecializedMetadata();
    swift_getAssociatedTypeWitness();
    swift_getAssociatedConformanceWitness();
    type metadata accessor for Range();
    uint64_t v75 = _arrayForceCast<A, B>(_:)();
    goto LABEL_18;
  }
  uint64_t result = swift_dynamicCast();
  if (!result)
  {
    swift_bridgeObjectRelease();
    goto LABEL_20;
  }
  unint64_t v120 = v76;
  unint64_t v121 = v78;
  uint64_t v122 = a3;
  unint64_t v103 = v129;
  unint64_t v104 = v130;
  if (v130 >> 14 >= v129 >> 14)
  {
    unint64_t v105 = v131;
    unint64_t v85 = v132;
    uint64_t v106 = Substring.subscript.getter();
    uint64_t v108 = v107;
    uint64_t v110 = v109;
    uint64_t v112 = v111;
    swift_bridgeObjectRetain();
    uint64_t v113 = v108;
    uint64_t v114 = v110;
    uint64_t v115 = v112;
    unint64_t v96 = v117;
    unint64_t v97 = v120;
    unint64_t v98 = v121;
    uint64_t v99 = specialized SubstringSearcher.State.init(text:pattern:)(v106, v113, v114, v115, v117, v120);
    unint64_t v137 = v103;
    unint64_t v138 = v104;
    unint64_t v139 = v105;
    goto LABEL_17;
  }
LABEL_25:
  __break(1u);
  return result;
}

__n128 RegexRangesCollection.init(input:subjectBounds:searchBounds:regex:)@<Q0>(unint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, unint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t *a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>)
{
  uint64_t v17 = *a7;
  RegexMatchesCollection.init(input:subjectBounds:searchBounds:regex:)(a1, a2, a3, a4, a5, a6, &v17, a8, v18);
  uint64_t v10 = v18[0].i64[1];
  uint64_t v11 = v19;
  uint64_t v12 = v22;
  __n128 result = (__n128)v18[1];
  int8x16_t v14 = v18[2];
  long long v15 = v20;
  long long v16 = v21;
  *(void *)a9 = v18[0].i64[0];
  *(void *)(a9 + 8) = v10;
  *(__n128 *)(a9 + 16) = result;
  *(int8x16_t *)(a9 + 32) = v14;
  *(void *)(a9 + 48) = v11;
  *(_OWORD *)(a9 + 56) = v15;
  *(_OWORD *)(a9 + 72) = v16;
  *(void *)(a9 + 88) = v12;
  return result;
}

uint64_t RegexMatchesCollection.init(input:subjectBounds:searchBounds:regex:)@<X0>(unint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, unint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t *a7@<X6>, uint64_t a8@<X7>, int8x16_t *a9@<X8>)
{
  uint64_t v17 = *a7;
  type metadata accessor for Regex();
  swift_bridgeObjectRetain();
  uint64_t v35 = v17;
  swift_retain();
  unint64_t v30 = a1;
  uint64_t v31 = a3;
  uint64_t v32 = a4;
  unint64_t v33 = a5;
  uint64_t v34 = a6;
  Regex._firstMatch(_:subjectBounds:searchBounds:)(a1, a2, a3, a4, a5, a6, (uint64_t)v39);
  swift_release();
  swift_bridgeObjectRelease();
  long long v36 = *(_OWORD *)v39;
  long long v37 = *(_OWORD *)&v39[16];
  uint64_t v38 = *(void *)&v39[32];
  uint64_t v18 = swift_allocObject();
  *(void *)(v18 + 16) = a8;
  v29[2] = a8;
  v29[3] = partial apply for implicit closure #2 in implicit closure #1 in RegexMatchesCollection.init(input:subjectBounds:searchBounds:regex:);
  v29[4] = MEMORY[0x270FA5388](v18);
  type metadata accessor for Regex.Match();
  type metadata accessor for Optional();
  uint64_t v19 = type metadata accessor for RegexMatchesCollection.Index();
  _sSq3mapyqd_0_Sgqd_0_xqd__YKXEqd__YKs5ErrorRd__Ri_d_0_r0_lF((void (*)(char *, char *))partial apply for thunk for @callee_guaranteed (@in_guaranteed Regex<A>.Match) -> (@out RegexMatchesCollection<A>.Index), (uint64_t)v29, MEMORY[0x263F8E628], v19, v20, (uint64_t)v39);
  outlined consume of Regex<A1.RegexOutput>.Match?<A><A1>(v36, *((uint64_t *)&v36 + 1));
  uint64_t result = swift_release();
  uint64_t v22 = *(void *)v39;
  v23.i64[0] = 1;
  int8x16_t v24 = (int8x16_t)vdupq_lane_s64(vmvnq_s8((int8x16_t)vceqq_s64(*(int64x2_t *)&v39[8], v23)).i64[0], 0);
  int8x16_t v25 = vandq_s8(*(int8x16_t *)&v39[8], v24);
  int8x16_t v26 = vandq_s8(*(int8x16_t *)&v39[24], v24);
  if (*(void *)&v39[8] == 1) {
    uint64_t v22 = 0;
  }
  a9->i64[0] = v30;
  a9->i64[1] = a2;
  uint64_t v27 = v32;
  a9[1].i64[0] = v31;
  a9[1].i64[1] = v27;
  uint64_t v28 = v34;
  a9[2].i64[0] = v33;
  a9[2].i64[1] = v28;
  a9[3].i64[0] = v35;
  a9[3].i64[1] = v22;
  a9[4] = v25;
  a9[5] = v26;
  return result;
}

uint64_t RegexRangesCollection.Iterator.next()()
{
  uint64_t v0 = type metadata accessor for RegexMatchesCollection.Iterator();
  RegexMatchesCollection.Iterator.next()(v0, (unint64_t *)&v6);
  long long v5 = v6;
  uint64_t KeyPath = swift_getKeyPath();
  type metadata accessor for Regex.Match();
  type metadata accessor for Optional();
  uint64_t CanonicalSpecializedMetadata = swift_getCanonicalSpecializedMetadata();
  _sSq3mapyqd_0_Sgqd_0_xqd__YKXEqd__YKs5ErrorRd__Ri_d_0_r0_lF((void (*)(char *, char *))partial apply for implicit closure #1 in RegexRangesCollection.Iterator.next(), KeyPath, MEMORY[0x263F8E628], CanonicalSpecializedMetadata, v3, (uint64_t)&v7);
  swift_release();
  outlined consume of Regex<A1.RegexOutput>.Match?<A><A1>(v5, *((uint64_t *)&v5 + 1));
  return v7;
}

uint64_t RegexMatchesCollection.Iterator.next()@<X0>(uint64_t result@<X0>, unint64_t *a2@<X8>)
{
  uint64_t v3 = v2;
  if (*(unsigned char *)(v2 + 96) == 1)
  {
    *(unsigned char *)(v2 + 96) = 0;
    uint64_t v5 = *(void *)(v2 + 56);
    uint64_t v6 = *(void *)(v2 + 64);
    if (v6) {
      unint64_t v7 = *(void *)(v2 + 56);
    }
    else {
      unint64_t v7 = 0;
    }
    if (v6) {
      unint64_t v8 = *(void *)(v2 + 72);
    }
    else {
      unint64_t v8 = 0;
    }
    if (v6) {
      unint64_t v9 = *(void *)(v2 + 80);
    }
    else {
      unint64_t v9 = 0;
    }
    if (v6) {
      unint64_t v10 = *(void *)(v2 + 88);
    }
    else {
      unint64_t v10 = 0;
    }
    *a2 = v7;
    a2[1] = v6;
    a2[2] = v8;
    a2[3] = v9;
    a2[4] = v10;
    return outlined copy of RegexMatchesCollection<A>.Index<A>(v5, v6);
  }
  else if ((*(unsigned char *)(v2 + 112) & 1) != 0 {
         || (unint64_t v11 = *(void *)(v2 + 104), v12 = *(void *)(v2 + 40), v12 >> 14 < v11 >> 14))
  }
  {
    a2[4] = 0;
    *(_OWORD *)a2 = 0u;
    *((_OWORD *)a2 + 1) = 0u;
  }
  else
  {
    unint64_t v49 = *(void *)(v2 + 48);
    unint64_t v13 = v49;
    unint64_t v14 = *(void *)v2;
    uint64_t v15 = *(void *)(v2 + 8);
    uint64_t v17 = *(void *)(v2 + 16);
    uint64_t v16 = *(void *)(v2 + 24);
    uint64_t v43 = *(void *)(result + 16);
    uint64_t v44 = type metadata accessor for Regex();
    swift_retain();
    swift_bridgeObjectRetain();
    uint64_t v46 = v17;
    uint64_t v45 = v16;
    Regex._firstMatch(_:subjectBounds:searchBounds:)(v14, v15, v17, v16, v11, v12, (uint64_t)&v54);
    unint64_t v47 = v14;
    unint64_t v48 = v12;
    uint64_t v18 = v43;
    uint64_t v19 = v15;
    swift_bridgeObjectRelease();
    unint64_t v20 = v13;
    swift_release();
    v33[7] = 0;
    unint64_t v40 = v54;
    uint64_t v41 = v55;
    uint64_t v42 = v56;
    uint64_t v43 = v57;
    uint64_t v44 = v58;
    unint64_t v49 = v54;
    uint64_t v50 = v55;
    uint64_t v51 = v56;
    uint64_t v52 = v57;
    uint64_t v53 = v58;
    uint64_t v39 = *(void *)(v2 + 32);
    uint64_t v38 = *(void *)(v2 + 56);
    uint64_t v37 = *(void *)(v2 + 64);
    uint64_t v36 = *(void *)(v2 + 72);
    uint64_t v35 = *(void *)(v2 + 80);
    uint64_t v34 = *(void *)(v2 + 88);
    uint64_t v22 = v46;
    unint64_t v21 = v47;
    unint64_t v54 = v47;
    uint64_t v55 = v19;
    uint64_t v23 = v45;
    uint64_t v56 = v46;
    uint64_t v57 = v45;
    unint64_t v24 = v48;
    uint64_t v58 = v39;
    unint64_t v59 = v48;
    unint64_t v25 = v20;
    unint64_t v60 = v20;
    uint64_t v61 = v38;
    uint64_t v62 = v37;
    uint64_t v63 = v36;
    uint64_t v64 = v35;
    uint64_t v65 = v34;
    int8x16_t v26 = (void *)swift_allocObject();
    v26[2] = v18;
    v26[3] = v21;
    v26[4] = v19;
    v26[5] = v22;
    uint64_t v27 = v39;
    v26[6] = v23;
    v26[7] = v27;
    v26[8] = v24;
    v26[9] = v25;
    v26[10] = v38;
    v26[11] = v37;
    v26[12] = v36;
    v26[13] = v35;
    v26[14] = v34;
    uint64_t v28 = outlined retain of RegexMatchesCollection<A>((uint64_t)&v54);
    MEMORY[0x270FA5388](v28);
    v33[2] = v18;
    v33[3] = partial apply for implicit closure #2 in implicit closure #1 in RegexMatchesCollection.Iterator.next();
    v33[4] = v26;
    type metadata accessor for Regex.Match();
    type metadata accessor for Optional();
    _sSq7flatMapyqd_0_SgABxqd__YKXEqd__YKs5ErrorRd__Ri_d_0_r0_lF((void (*)(char *, char *))partial apply for thunk for @callee_guaranteed (@in_guaranteed Regex<A>.Match) -> (@unowned String.Index?), (uint64_t)v33, MEMORY[0x263F8E628], MEMORY[0x263F8D2B0], v29, (uint64_t)&v54);
    uint64_t result = swift_release();
    char v30 = v55;
    *(void *)(v3 + 104) = v54;
    *(unsigned char *)(v3 + 112) = v30;
    uint64_t v31 = v41;
    *a2 = v40;
    a2[1] = v31;
    uint64_t v32 = v43;
    a2[2] = v42;
    a2[3] = v32;
    a2[4] = v44;
  }
  return result;
}

uint64_t _sSq3mapyqd_0_Sgqd_0_xqd__YKXEqd__YKs5ErrorRd__Ri_d_0_r0_lF@<X0>(void (*a1)(char *, char *)@<X0>, uint64_t a2@<X1>, uint64_t a3@<X3>, uint64_t a4@<X4>, uint64_t a5@<X6>, uint64_t a6@<X8>)
{
  uint64_t v25 = a5;
  uint64_t v26 = a2;
  uint64_t v28 = a4;
  uint64_t v27 = a1;
  uint64_t v24 = *(void *)(a3 - 8);
  uint64_t v10 = ((uint64_t (*)(void))MEMORY[0x270FA5388])();
  unint64_t v12 = (char *)&v24 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = *(void *)(v13 + 16);
  uint64_t v15 = *(void *)(v14 - 8);
  uint64_t v16 = MEMORY[0x270FA5388](v10);
  uint64_t v18 = (char *)&v24 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v16);
  unint64_t v20 = (char *)&v24 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t))(v21 + 16))(v20, v6);
  uint64_t v22 = 1;
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v15 + 48))(v20, 1, v14) != 1)
  {
    (*(void (**)(char *, char *, uint64_t))(v15 + 32))(v18, v20, v14);
    v27(v18, v12);
    (*(void (**)(char *, uint64_t))(v15 + 8))(v18, v14);
    if (v7) {
      return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v24 + 32))(v25, v12, a3);
    }
    uint64_t v22 = 0;
  }
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v28 - 8) + 56))(a6, v22, 1);
}

uint64_t protocol witness for IteratorProtocol.next() in conformance RegexRangesCollection<A>.Iterator@<X0>(uint64_t a1@<X8>)
{
  uint64_t result = RegexRangesCollection.Iterator.next()();
  *(void *)a1 = result;
  *(void *)(a1 + 8) = v3;
  *(unsigned char *)(a1 + 16) = v4 & 1;
  return result;
}

double RegexRangesCollection.makeIterator()@<D0>(uint64_t a1@<X8>)
{
  uint64_t v2 = type metadata accessor for RegexMatchesCollection();
  RegexMatchesCollection.makeIterator()(v2, (uint64_t)v11);
  uint64_t v3 = v11[1];
  uint64_t v4 = v14;
  uint64_t v5 = v17;
  char v6 = v18;
  uint64_t v7 = v19;
  char v8 = v20;
  *(void *)a1 = v11[0];
  *(void *)(a1 + 8) = v3;
  long long v9 = v13;
  *(_OWORD *)(a1 + 16) = v12;
  *(_OWORD *)(a1 + 32) = v9;
  *(void *)(a1 + 48) = v4;
  *(_OWORD *)(a1 + 56) = v15;
  double result = *(double *)&v16;
  *(_OWORD *)(a1 + 72) = v16;
  *(void *)(a1 + 88) = v5;
  *(unsigned char *)(a1 + 96) = v6;
  *(void *)(a1 + 104) = v7;
  *(unsigned char *)(a1 + 112) = v8;
  return result;
}

uint64_t RegexMatchesCollection.makeIterator()@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v5 = *(void *)(v2 + 8);
  uint64_t v6 = *(void *)(v2 + 48);
  uint64_t v7 = *(void *)(v2 + 56);
  uint64_t v8 = *(void *)(v2 + 64);
  uint64_t v9 = *(void *)(v2 + 72);
  uint64_t v10 = *(void *)(v2 + 80);
  uint64_t v11 = *(void *)(v2 + 88);
  v14[0] = *(void *)v2;
  v14[1] = v5;
  long long v12 = *(_OWORD *)(v2 + 32);
  long long v15 = *(_OWORD *)(v2 + 16);
  long long v16 = v12;
  uint64_t v17 = v6;
  uint64_t v18 = v7;
  uint64_t v19 = v8;
  uint64_t v20 = v9;
  uint64_t v21 = v10;
  uint64_t v22 = v11;
  swift_bridgeObjectRetain();
  swift_retain();
  outlined copy of RegexMatchesCollection<A>.Index<A>(v7, v8);
  return RegexMatchesCollection.Iterator.init(_:)(v14, *(void *)(a1 + 16), a2);
}

uint64_t protocol witness for Sequence.makeIterator() in conformance RegexRangesCollection<A>@<X0>(uint64_t a1@<X8>)
{
  RegexRangesCollection.makeIterator()(a1);
  uint64_t v2 = *(void *)(v1 + 56);
  uint64_t v3 = *(void *)(v1 + 64);
  swift_release();
  swift_bridgeObjectRelease();
  return outlined consume of Regex<A1.RegexOutput>.Match?<A><A1>(v2, v3);
}

uint64_t protocol witness for Sequence.underestimatedCount.getter in conformance RegexRangesCollection<A>(uint64_t a1)
{
  uint64_t WitnessTable = swift_getWitnessTable();

  return MEMORY[0x270F9E108](a1, WitnessTable);
}

uint64_t protocol witness for Sequence._copyToContiguousArray() in conformance RegexRangesCollection<A>(uint64_t a1)
{
  uint64_t WitnessTable = swift_getWitnessTable();

  return MEMORY[0x270F9E128](a1, WitnessTable);
}

uint64_t RegexRangesCollection.startIndex.getter@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v2 = v1[7];
  uint64_t v3 = v1[8];
  uint64_t v4 = v1[9];
  uint64_t v5 = v1[10];
  uint64_t v6 = v1[11];
  *a1 = v2;
  a1[1] = v3;
  a1[2] = v4;
  a1[3] = v5;
  a1[4] = v6;
  return outlined copy of RegexMatchesCollection<A>.Index<A>(v2, v3);
}

double RegexRangesCollection.endIndex.getter@<D0>(uint64_t a1@<X8>)
{
  *(void *)(a1 + 32) = 0;
  double result = 0.0;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  return result;
}

uint64_t RegexRangesCollection.index(after:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = *(void *)(a1 + 32);
  uint64_t v5 = v2[1];
  uint64_t v6 = v2[6];
  uint64_t v7 = v2[11];
  uint64_t v13 = *v2;
  uint64_t v14 = v5;
  long long v8 = *((_OWORD *)v2 + 2);
  long long v15 = *((_OWORD *)v2 + 1);
  long long v16 = v8;
  uint64_t v17 = v6;
  long long v18 = *(_OWORD *)(v2 + 7);
  long long v19 = *(_OWORD *)(v2 + 9);
  uint64_t v20 = v7;
  long long v9 = *(_OWORD *)(a1 + 16);
  v11[0] = *(_OWORD *)a1;
  v11[1] = v9;
  uint64_t v12 = v4;
  type metadata accessor for RegexMatchesCollection();
  return RegexMatchesCollection.index(after:)((uint64_t *)v11, a2);
}

uint64_t RegexMatchesCollection.index(after:)@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = *a1;
  uint64_t v3 = a1[1];
  uint64_t v6 = a1[2];
  uint64_t v5 = a1[3];
  uint64_t v7 = a1[4];
  if (v3)
  {
    unint64_t v8 = *(void *)v2;
    uint64_t v9 = *(void *)(v2 + 16);
    uint64_t v10 = *(void *)(v2 + 24);
    uint64_t v22 = *(void *)(v2 + 8);
    uint64_t v23 = *(void *)(v2 + 88);
    long long v20 = *(_OWORD *)(v2 + 56);
    long long v21 = *(_OWORD *)(v2 + 72);
    uint64_t v11 = *(void *)(v2 + 48);
    unint64_t v19 = *(void *)(v2 + 40);
    uint64_t v12 = *(void *)(v2 + 32);
    outlined copy of RegexMatchesCollection<A>.Index<A>(v4, v3);
    unint64_t v26 = v8;
    *(void *)&long long v27 = v22;
    *((void *)&v27 + 1) = v9;
    uint64_t v18 = v10;
    *(void *)&long long v28 = v10;
    *((void *)&v28 + 1) = v12;
    unint64_t v29 = v19;
    uint64_t v30 = v11;
    long long v31 = v20;
    long long v32 = v21;
    uint64_t v33 = v23;
    v25[0] = v4;
    v25[1] = v3;
    v25[2] = v6;
    v25[3] = v5;
    v25[4] = v7;
    unint64_t v13 = RegexMatchesCollection.searchIndex(after:)((uint64_t)v25);
    LOBYTE(v12) = v14;
    uint64_t result = outlined consume of Regex<A1.RegexOutput>.Match?<A><A1>(v4, v3);
    if ((v12 & 1) != 0
      || v19 >> 14 < v13 >> 14
      || (v25[0] = v11,
          type metadata accessor for Regex(),
          swift_retain(),
          Regex._firstMatch(_:subjectBounds:searchBounds:)(v8, v22, v9, v18, v13, v19, (uint64_t)&v26),
          uint64_t result = swift_release(),
          long long v16 = v27,
          !(void)v27))
    {
      *(void *)(a2 + 32) = 0;
      *(_OWORD *)a2 = 0u;
      *(_OWORD *)(a2 + 16) = 0u;
    }
    else
    {
      long long v17 = v28;
      *(void *)a2 = v26;
      *(_OWORD *)(a2 + 8) = v16;
      *(_OWORD *)(a2 + 24) = v17;
    }
  }
  else
  {
    outlined copy of RegexMatchesCollection<A>.Index<A>(*a1, 0);
    uint64_t result = _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
  }
  return result;
}

uint64_t RegexMatchesCollection.subscript.getter@<X0>(uint64_t *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v2 = *a1;
  uint64_t v3 = a1[1];
  uint64_t v5 = a1[2];
  uint64_t v4 = a1[3];
  uint64_t v6 = a1[4];
  if (v3)
  {
    uint64_t result = outlined copy of RegexMatchesCollection<A>.Index<A>(*a1, v3);
    *a2 = v2;
    a2[1] = v3;
    a2[2] = v5;
    a2[3] = v4;
    a2[4] = v6;
  }
  else
  {
    outlined copy of RegexMatchesCollection<A>.Index<A>(*a1, 0);
    uint64_t result = _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
  }
  return result;
}

double protocol witness for Collection.endIndex.getter in conformance RegexRangesCollection<A>@<D0>(uint64_t a1@<X8>)
{
  return RegexRangesCollection.endIndex.getter(a1);
}

void (*protocol witness for Collection.subscript.read in conformance RegexRangesCollection<A>(void *a1, uint64_t a2))(void *a1)
{
  uint64_t v4 = malloc(0x38uLL);
  *a1 = v4;
  uint64_t v5 = RegexRangesCollection.subscript.read((uint64_t)v4, a2);
  v4[4] = v6;
  v4 += 4;
  v4[1] = v7;
  v4[2] = v5;
  return protocol witness for Collection.subscript.read in conformance RegexRangesCollection<A>;
}

void protocol witness for Collection.subscript.read in conformance RegexRangesCollection<A>(void *a1)
{
  uint64_t v1 = (void *)*a1;
  (*(void (**)(void))(*a1 + 48))(*a1);

  free(v1);
}

uint64_t (*RegexRangesCollection.subscript.read(uint64_t a1, uint64_t a2))()
{
  uint64_t v2 = *(void *)(a2 + 32);
  long long v3 = *(_OWORD *)(a2 + 16);
  v5[0] = *(_OWORD *)a2;
  v5[1] = v3;
  uint64_t v6 = v2;
  specialized RegexRangesCollection.subscript.getter((uint64_t)v5);
  return RegexRangesCollection.subscript.read;
}

double protocol witness for Collection._customIndexOfEquatableElement(_:) in conformance RegexRangesCollection<A>@<D0>(uint64_t a1@<X8>)
{
  double result = 0.0;
  *(_OWORD *)a1 = xmmword_209FAFD70;
  *(void *)(a1 + 24) = 0;
  *(void *)(a1 + 32) = 0;
  *(void *)(a1 + 16) = 0;
  return result;
}

double protocol witness for Collection.formIndex(after:) in conformance RegexRangesCollection<A>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return protocol witness for Collection.formIndex(after:) in conformance RegexRangesCollection<A>(a1, a2, a3, (void (*)(_OWORD *__return_ptr))RegexRangesCollection.index(after:));
}

double Collection<>._ranges<A>(of:subjectBounds:searchBounds:)@<D0>(uint64_t a1@<X1>, uint64_t a2@<X2>, unint64_t a3@<X3>, uint64_t a4@<X4>, uint64_t a5@<X6>, uint64_t a6@<X8>, uint64_t a7)
{
  Collection.subscript.getter();
  unint64_t v13 = v17[3];
  uint64_t v12 = v17[4];
  (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t))(a7 + 16))(v17, a5, a7);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  *(void *)&double result = RegexRangesCollection.init(input:subjectBounds:searchBounds:regex:)(v13, v12, a1, a2, a3, a4, v17, AssociatedTypeWitness, a6).n128_u64[0];
  return result;
}

void Collection<>._ranges<A>(of:)(uint64_t a1@<X2>, uint64_t a2@<X4>, uint64_t a3@<X8>)
{
  dispatch thunk of Collection.startIndex.getter();
  dispatch thunk of Collection.endIndex.getter();
  if (v6 >> 14 < v7 >> 14)
  {
    __break(1u);
    __break(1u);
  }
  else
  {
    dispatch thunk of Collection.startIndex.getter();
    dispatch thunk of Collection.endIndex.getter();
    Collection<>._ranges<A>(of:subjectBounds:searchBounds:)(v7, v6, v7, v6, a1, a3, a2);
  }
}

uint64_t BidirectionalCollection<>.ranges<A>(of:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  Collection<>._ranges<A>(of:)(a3, a5, (uint64_t)&v6);
  swift_getCanonicalSpecializedMetadata();
  swift_getAssociatedTypeWitness();
  type metadata accessor for RegexRangesCollection();
  swift_getWitnessTable();
  return Array.init<A>(_:)();
}

unint64_t Substring._replacingSubstring(_:with:maxReplacements:)(unint64_t result, unint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, unint64_t a10, unint64_t a11, uint64_t a12, uint64_t a13)
{
  unint64_t v33 = result;
  uint64_t v13 = a9;
  if (a9 < 0)
  {
LABEL_16:
    __break(1u);
    goto LABEL_17;
  }
  uint64_t v40 = 0;
  unint64_t v41 = 0xE000000000000000;
  if (a11 >> 14 < a10 >> 14)
  {
LABEL_17:
    __break(1u);
    goto LABEL_18;
  }
  uint64_t v15 = Substring.subscript.getter();
  uint64_t v17 = v16;
  uint64_t v19 = v18;
  uint64_t v21 = v20;
  swift_bridgeObjectRetain();
  uint64_t v32 = specialized SubstringSearcher.State.init(text:pattern:)(v15, v17, v19, v21, v33, a2);
  uint64_t v30 = v24;
  if (a9)
  {
    unint64_t v25 = v22;
    char v26 = v23 & 1;
    uint64_t v31 = a4;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    unint64_t v27 = a10;
    while (1)
    {
      if (v26) {
        goto LABEL_10;
      }
      unint64_t v42 = a10;
      unint64_t v43 = a11;
      uint64_t v44 = a12;
      uint64_t v45 = a13;
      unint64_t v46 = v33;
      unint64_t v47 = a2;
      uint64_t v48 = a3;
      uint64_t v49 = v31;
      uint64_t v50 = v32;
      uint64_t v51 = v30;
      unint64_t v52 = v25;
      char v53 = 0;
      double result = SubstringSearcher.nextRange(in:searchFromEnd:)(a10, a11, v25, (uint64_t)v36);
      if (v37)
      {
LABEL_10:
        unint64_t v28 = v27;
LABEL_11:
        unint64_t v29 = v28 >> 14;
        goto LABEL_13;
      }
      if (v36[0] >> 14 < v27 >> 14) {
        break;
      }
      unint64_t v28 = v36[1];
      unint64_t v25 = v38;
      char v26 = v39;
      Substring.subscript.getter();
      String.append(contentsOf:)();
      swift_bridgeObjectRelease();
      String.append(contentsOf:)();
      unint64_t v27 = v28;
      if (!--v13) {
        goto LABEL_11;
      }
    }
    __break(1u);
    goto LABEL_16;
  }
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  unint64_t v29 = a10 >> 14;
LABEL_13:
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  double result = swift_bridgeObjectRelease();
  if (a11 >> 14 >= v29)
  {
    Substring.subscript.getter();
    String.append(contentsOf:)();
    swift_bridgeObjectRelease();
    return v40;
  }
LABEL_18:
  __break(1u);
  return result;
}

unint64_t specialized Collection.subscript.getter(unint64_t result, uint64_t a2, unint64_t a3)
{
  uint64_t v3 = HIBYTE(a3) & 0xF;
  if ((a3 & 0x2000000000000000) == 0) {
    uint64_t v3 = a2 & 0xFFFFFFFFFFFFLL;
  }
  if (4 * v3 >= result >> 14) {
    return String.subscript.getter();
  }
  __break(1u);
  return result;
}

uint64_t specialized RangeReplaceableCollection._replacing<A, B>(_:with:maxReplacements:)(uint64_t result, uint64_t a2, uint64_t a3, unint64_t a4, uint64_t a5, unint64_t a6)
{
  if ((a4 & 0x8000000000000000) != 0)
  {
LABEL_37:
    __break(1u);
    goto LABEL_38;
  }
  outlined retain of RangesCollection<ZSearcher<Substring>>(result);
  double result = specialized Collection.prefix(_:)(a4, (uint64_t)v38);
  int v7 = v44;
  if ((v39 & 1) == 0)
  {
    uint64_t v27 = v48;
    uint64_t v28 = v47;
    uint64_t v24 = v50;
    uint64_t v25 = v49;
    char v23 = v51;
    char v10 = v41;
    unint64_t v11 = v38[0];
    uint64_t v12 = v38[1];
    unint64_t v33 = v38[0] >> 14;
    unint64_t v34 = v43;
    unint64_t v13 = v40;
    unint64_t v29 = v46;
    uint64_t v30 = v45;
    unint64_t v35 = v46 >> 14;
    unint64_t v31 = v45 >> 14;
    unint64_t v32 = v43 >> 14;
    unint64_t v22 = v42;
    unint64_t v26 = v42 >> 14;
    unint64_t v9 = 15;
    while (1)
    {
      if (((v11 ^ v34) & 0xFFFFFFFFFFFFC000) != 0) {
        int v14 = 1;
      }
      else {
        int v14 = v7;
      }
      if (v14 != 1) {
        goto LABEL_5;
      }
      unint64_t v15 = v11 >> 14;
      if (v11 >> 14 < v33)
      {
        __break(1u);
LABEL_33:
        __break(1u);
LABEL_34:
        __break(1u);
LABEL_35:
        __break(1u);
LABEL_36:
        __break(1u);
        goto LABEL_37;
      }
      if (v15 < v32) {
        int v16 = 1;
      }
      else {
        int v16 = v7;
      }
      if (v16 != 1) {
        goto LABEL_35;
      }
      if (v35 < v31) {
        goto LABEL_33;
      }
      uint64_t v8 = v12;
      if (v10)
      {
        unint64_t v17 = 0;
        uint64_t v12 = 0;
        char v18 = 1;
        char v10 = 1;
        goto LABEL_28;
      }
      if (v26 < v13 >> 14) {
        goto LABEL_36;
      }
      outlined retain of Slice<RangesCollection<ZSearcher<Substring>>>((uint64_t)v38);
      unint64_t v19 = specialized ZSearcher.search(_:in:)(v30, v29, v28, v27, v13, v22, v25, v24, v23);
      char v18 = v21;
      if (v21)
      {
        unint64_t v17 = 0;
        uint64_t v12 = 0;
      }
      else
      {
        unint64_t v17 = v19;
        uint64_t v12 = v20;
        if (v19 >> 14 != v20 >> 14)
        {
          char v10 = 0;
          unint64_t v13 = v20;
          goto LABEL_27;
        }
        if (v19 >> 14 == v35)
        {
          unint64_t v13 = 0;
          char v10 = 1;
          goto LABEL_27;
        }
        unint64_t v13 = Substring.index(after:)();
      }
      char v10 = 0;
LABEL_27:
      double result = outlined release of Slice<RangesCollection<ZSearcher<Substring>>>((uint64_t)v38);
LABEL_28:
      if (v15 < v9 >> 14) {
        goto LABEL_34;
      }
      String.subscript.getter();
      lazy protocol witness table accessor for type Substring and conformance Substring();
      String.append<A>(contentsOf:)();
      swift_bridgeObjectRelease();
      double result = String.append<A>(contentsOf:)();
      unint64_t v11 = v17;
      unint64_t v9 = v8;
      if (v18) {
        goto LABEL_4;
      }
    }
  }
  uint64_t v8 = 15;
LABEL_4:
  unint64_t v9 = v8;
  if (v7)
  {
LABEL_5:
    outlined release of Slice<RangesCollection<ZSearcher<Substring>>>((uint64_t)v38);
    specialized Collection.subscript.getter(v9, a5, a6);
    lazy protocol witness table accessor for type Substring and conformance Substring();
    String.append<A>(contentsOf:)();
    swift_bridgeObjectRelease();
    return 0;
  }
LABEL_38:
  __break(1u);
  return result;
}

uint64_t RangeReplaceableCollection._replacing<A, B>(_:with:maxReplacements:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, void (*a3)(void, void, void)@<X2>, uint64_t a4@<X3>, void *a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, char *a8@<X7>, uint64_t a9@<X8>, uint64_t a10)
{
  unint64_t v104 = (unint64_t)a3;
  unint64_t v105 = a5;
  uint64_t v93 = a2;
  uint64_t v86 = a1;
  uint64_t v101 = a7;
  uint64_t v14 = *(void *)(a7 + 8);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  uint64_t v73 = type metadata accessor for PartialRangeFrom();
  uint64_t v72 = *(void *)(v73 - 8);
  uint64_t v17 = MEMORY[0x270FA5388](v73);
  uint64_t v71 = (char *)&v69 - v18;
  uint64_t v94 = a6;
  uint64_t v75 = *(void (***)(char *, uint64_t, uint64_t))(a6 - 8);
  MEMORY[0x270FA5388](v17);
  uint64_t v92 = (char *)&v69 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v102 = v14;
  uint64_t v20 = a4;
  uint64_t v96 = swift_getAssociatedTypeWitness();
  MEMORY[0x270FA5388](v96);
  uint64_t v95 = (char *)&v69 - v21;
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
  uint64_t v22 = MEMORY[0x270FA5388](TupleTypeMetadata2);
  uint64_t v90 = (char *)&v69 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v22);
  uint64_t v89 = (char *)&v69 - v24;
  uint64_t v100 = AssociatedConformanceWitness;
  uint64_t v25 = type metadata accessor for Range();
  uint64_t v106 = *(void *)(v25 - 8);
  uint64_t v26 = MEMORY[0x270FA5388](v25);
  uint64_t v88 = (char *)&v69 - ((v27 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v28 = MEMORY[0x270FA5388](v26);
  uint64_t v87 = (char *)&v69 - v29;
  MEMORY[0x270FA5388](v28);
  uint64_t v99 = (char *)&v69 - v30;
  uint64_t v31 = type metadata accessor for Optional();
  MEMORY[0x270FA5388](v31 - 8);
  unint64_t v98 = (char *)&v69 - v32;
  unint64_t v33 = v105;
  swift_getAssociatedTypeWitness();
  unint64_t v103 = a8;
  uint64_t v85 = *(void *)(swift_getAssociatedConformanceWitness() + 8);
  uint64_t v34 = swift_getAssociatedTypeWitness();
  uint64_t v35 = *(void *)(v34 - 8);
  uint64_t v36 = MEMORY[0x270FA5388](v34);
  unint64_t v38 = (char *)&v69 - v37;
  uint64_t v80 = *(v33 - 1);
  MEMORY[0x270FA5388](v36);
  unint64_t v84 = (char *)&v69 - ((v39 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v40 = AssociatedTypeWitness;
  uint64_t v41 = swift_checkMetadataState();
  uint64_t v42 = MEMORY[0x270FA5388](v41);
  uint64_t v74 = *(void *)(AssociatedTypeWitness - 8);
  uint64_t result = MEMORY[0x270FA5388](v42);
  if ((v104 & 0x8000000000000000) != 0)
  {
LABEL_9:
    __break(1u);
    goto LABEL_10;
  }
  uint64_t v70 = v35;
  unint64_t v97 = v38;
  unint64_t v45 = (char *)&v69 - v44;
  dispatch thunk of RangeReplaceableCollection.init()();
  uint64_t v107 = v45;
  unint64_t v46 = v99;
  dispatch thunk of Collection.startIndex.getter();
  (*(void (**)(char *, uint64_t, void *))(v80 + 16))(v84, v86, v105);
  Collection.prefix(_:)();
  uint64_t v47 = v97;
  dispatch thunk of Sequence.makeIterator()();
  uint64_t v48 = swift_getAssociatedConformanceWitness();
  uint64_t v49 = v98;
  uint64_t v50 = v47;
  uint64_t v86 = v48;
  dispatch thunk of IteratorProtocol.next()();
  uint64_t v51 = *(char **)(v106 + 48);
  uint64_t v85 = v106 + 48;
  unint64_t v84 = v51;
  uint64_t v52 = v34;
  if (((unsigned int (*)(char *, uint64_t, uint64_t))v51)(v49, 1, v25) != 1)
  {
    uint64_t v80 = a10;
    unint64_t v105 = *(void **)(v106 + 32);
    unint64_t v79 = (void (**)(char *, char *, uint64_t))(v74 + 32);
    unint64_t v78 = (void (**)(char *, char *, uint64_t))(v74 + 16);
    unint64_t v77 = (void (**)(char *, uint64_t))(v74 + 8);
    v106 += 32;
    unint64_t v76 = (void (**)(char *, uint64_t))(v106 - 24);
    v75 += 2;
    uint64_t v83 = a9;
    uint64_t v82 = v20;
    uint64_t v108 = v25;
    uint64_t v81 = v34;
    while (1)
    {
      ((void (*)(char *, char *, uint64_t))v105)(v46, v49, v25);
      uint64_t result = dispatch thunk of static Comparable.<= infix(_:_:)();
      if ((result & 1) == 0) {
        break;
      }
      uint64_t v53 = TupleTypeMetadata2;
      unint64_t v54 = v89;
      uint64_t v55 = &v89[*(int *)(TupleTypeMetadata2 + 48)];
      uint64_t v56 = *v79;
      (*v79)(v89, v107, v40);
      uint64_t v57 = v55;
      unint64_t v103 = v55;
      v56(v55, v46, v40);
      uint64_t v58 = v90;
      unint64_t v59 = &v90[*(int *)(v53 + 48)];
      unint64_t v60 = *v78;
      (*v78)(v90, v54, v40);
      v60(v59, v57, v40);
      uint64_t v61 = v88;
      v56(v88, v58, v40);
      uint64_t v62 = *v77;
      (*v77)(v59, v40);
      uint64_t v63 = &v58[*(int *)(v53 + 48)];
      v56(v58, v54, v40);
      v56(v63, v103, v40);
      unint64_t v104 = (unint64_t)v56;
      v56(&v61[*(int *)(v108 + 36)], v63, v40);
      v62(v58, v40);
      uint64_t v64 = v87;
      uint64_t v65 = v61;
      uint64_t v49 = v98;
      ((void (*)(char *, char *, uint64_t))v105)(v87, v65, v108);
      dispatch thunk of Collection.subscript.getter();
      (*v76)(v64, v108);
      swift_getAssociatedConformanceWitness();
      dispatch thunk of RangeReplaceableCollection.append<A>(contentsOf:)();
      (*v75)(v92, v93, v94);
      uint64_t v52 = v81;
      unint64_t v46 = v99;
      uint64_t v25 = v108;
      dispatch thunk of RangeReplaceableCollection.append<A>(contentsOf:)();
      ((void (*)(char *, char *, uint64_t))v104)(v107, &v46[*(int *)(v25 + 36)], v40);
      uint64_t v50 = v97;
      dispatch thunk of IteratorProtocol.next()();
      if (((unsigned int (*)(char *, uint64_t, uint64_t))v84)(v49, 1, v25) == 1) {
        goto LABEL_6;
      }
    }
    __break(1u);
    goto LABEL_9;
  }
LABEL_6:
  (*(void (**)(char *, uint64_t))(v70 + 8))(v50, v52);
  uint64_t v66 = v107;
  uint64_t result = dispatch thunk of static Equatable.== infix(_:_:)();
  if (result)
  {
    uint64_t v67 = v71;
    (*(void (**)(char *, char *, uint64_t))(v74 + 32))(v71, v66, v40);
    uint64_t v68 = v73;
    swift_getWitnessTable();
    Collection.subscript.getter();
    (*(void (**)(char *, uint64_t))(v72 + 8))(v67, v68);
    swift_getAssociatedConformanceWitness();
    return dispatch thunk of RangeReplaceableCollection.append<A>(contentsOf:)();
  }
LABEL_10:
  __break(1u);
  return result;
}

unint64_t specialized Collection.prefix(_:)@<X0>(unint64_t result@<X0>, uint64_t a2@<X8>)
{
  if ((result & 0x8000000000000000) != 0)
  {
LABEL_30:
    __break(1u);
    goto LABEL_31;
  }
  uint64_t v3 = *(void *)v2;
  unint64_t v4 = *(void *)(v2 + 8);
  if (v4 >> 14 < *(void *)v2 >> 14)
  {
LABEL_31:
    __break(1u);
    goto LABEL_32;
  }
  unint64_t v5 = result;
  unint64_t v7 = *(void *)(v2 + 64);
  uint64_t v8 = *(void *)(v2 + 72);
  char v9 = *(unsigned char *)(v2 + 80);
  unint64_t v10 = *(void *)(v2 + 88);
  char v11 = *(unsigned char *)(v2 + 96);
  unint64_t v12 = *(void *)(v2 + 104);
  char v13 = v11 & 1;
  if (!result)
  {
    unint64_t v15 = *(void *)(v2 + 64);
    unint64_t v16 = *(void *)(v2 + 72);
    uint64_t v3 = *(void *)(v2 + 88);
    if ((*(unsigned char *)(v2 + 80) & 1) == 0) {
      goto LABEL_24;
    }
LABEL_7:
    char v14 = 1;
LABEL_27:
    unint64_t v4 = v12;
    goto LABEL_28;
  }
  if (*(unsigned char *)(v2 + 80))
  {
    char v13 = 0;
    char v14 = 1;
    unint64_t v15 = *(void *)(v2 + 64);
    unint64_t v16 = *(void *)(v2 + 72);
LABEL_28:
    long long v22 = *(_OWORD *)(v2 + 80);
    *(_OWORD *)(a2 + 160) = *(_OWORD *)(v2 + 64);
    *(_OWORD *)(a2 + 176) = v22;
    *(_OWORD *)(a2 + 192) = *(_OWORD *)(v2 + 96);
    long long v23 = *(_OWORD *)(v2 + 16);
    *(_OWORD *)(a2 + 96) = *(_OWORD *)v2;
    *(_OWORD *)(a2 + 112) = v23;
    long long v24 = *(_OWORD *)(v2 + 48);
    *(_OWORD *)(a2 + 128) = *(_OWORD *)(v2 + 32);
    *(_OWORD *)(a2 + 144) = v24;
    *(void *)a2 = v7;
    *(void *)(a2 + 8) = v8;
    *(unsigned char *)(a2 + 16) = v9;
    *(_DWORD *)(a2 + 20) = *(_DWORD *)(v2 + 84);
    *(_DWORD *)(a2 + 17) = *(_DWORD *)(v2 + 81);
    *(void *)(a2 + 24) = v10;
    *(unsigned char *)(a2 + 32) = v11;
    *(_DWORD *)(a2 + 33) = *(_DWORD *)(v2 + 97);
    *(_DWORD *)(a2 + 36) = *(_DWORD *)(v2 + 100);
    *(void *)(a2 + 40) = v12;
    *(void *)(a2 + 48) = v15;
    *(void *)(a2 + 56) = v16;
    *(unsigned char *)(a2 + 64) = v14;
    *(void *)(a2 + 72) = v3;
    *(unsigned char *)(a2 + 80) = v13;
    *(void *)(a2 + 88) = v4;
    return result;
  }
  uint64_t v25 = *(void *)(v2 + 72);
  char v26 = *(unsigned char *)(v2 + 80);
  unint64_t v27 = *(void *)(v2 + 64);
  char v28 = *(unsigned char *)(v2 + 96);
  uint64_t v17 = *(void *)(v2 + 24);
  uint64_t v34 = *(void *)(v2 + 16);
  uint64_t v32 = *(void *)(v2 + 32);
  unint64_t v33 = v12 >> 14;
  unint64_t v29 = *(void *)(v2 + 88);
  uint64_t v30 = *(uint64_t (**)(uint64_t *, uint64_t *))(v2 + 48);
  uint64_t v31 = *(void *)(v2 + 40);
  while ((v13 & 1) != 0)
  {
    unint64_t v15 = 0;
    unint64_t v16 = 0;
    char v13 = 1;
    char v18 = 1;
    if (!--v5) {
      goto LABEL_23;
    }
LABEL_21:
    if (v18)
    {
      char v13 = 0;
      char v14 = 1;
      unint64_t v10 = v29;
      char v11 = v28;
      unint64_t v7 = v27;
      char v9 = v26;
      uint64_t v8 = v25;
      goto LABEL_28;
    }
  }
  if (v33 < v10 >> 14)
  {
    __break(1u);
    goto LABEL_30;
  }
  unint64_t v19 = v12;
  uint64_t result = specialized ZSearcher.search(_:in:)(v3, v4, v34, v17, v10, v12, v32, v31, v30);
  if (v21)
  {
    char v13 = 0;
    unint64_t v15 = 0;
    unint64_t v16 = 0;
    char v18 = 1;
  }
  else
  {
    unint64_t v15 = result;
    unint64_t v16 = v20;
    if (result >> 14 == v20 >> 14)
    {
      if (result >> 14 == v4 >> 14)
      {
        unint64_t v10 = 0;
        char v18 = 0;
        char v13 = 1;
      }
      else
      {
        uint64_t result = Substring.index(after:)();
        unint64_t v10 = result;
        char v13 = 0;
        char v18 = 0;
      }
    }
    else
    {
      char v13 = 0;
      char v18 = 0;
      unint64_t v10 = v20;
    }
  }
  unint64_t v12 = v19;
  if (--v5) {
    goto LABEL_21;
  }
LABEL_23:
  uint64_t v3 = v10;
  unint64_t v10 = v29;
  char v11 = v28;
  unint64_t v7 = v27;
  char v9 = v26;
  uint64_t v8 = v25;
  if (v18) {
    goto LABEL_7;
  }
LABEL_24:
  if ((v9 & 1) == 0)
  {
    if (v15 >> 14 >= v7 >> 14)
    {
      char v14 = 0;
      goto LABEL_27;
    }
LABEL_32:
    __break(1u);
  }
  __break(1u);
  return result;
}

uint64_t RangeReplaceableCollection<>.replacing<A, B>(_:with:subrange:maxReplacements:)@<X0>(unint64_t a1@<X0>, unint64_t a2@<X1>, uint64_t a3@<X2>, void (*a4)(void, void, void)@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>, uint64_t a10, uint64_t a11, uint64_t a12)
{
  uint64_t v13 = v12;
  v239 = a4;
  uint64_t v228 = a3;
  uint64_t v240 = a9;
  uint64_t v233 = a8;
  uint64_t v19 = *(void *)(a8 + 8);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v229 = *(void *)(AssociatedTypeWitness - 8);
  MEMORY[0x270FA5388](AssociatedTypeWitness);
  v226 = (char *)&v219 - v21;
  uint64_t v227 = v19;
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  uint64_t v230 = AssociatedTypeWitness;
  uint64_t v222 = AssociatedConformanceWitness;
  type metadata accessor for ZSearcher();
  swift_getWitnessTable();
  uint64_t v225 = type metadata accessor for RangesCollection();
  uint64_t v224 = *(void *)(v225 - 8);
  MEMORY[0x270FA5388](v225);
  uint64_t v223 = (uint64_t)&v219 - v23;
  TupleTypeMetadata3 = swift_getTupleTypeMetadata3();
  uint64_t v25 = *(void *)(TupleTypeMetadata3 - 8);
  uint64_t v26 = MEMORY[0x270FA5388](TupleTypeMetadata3);
  char v28 = (char *)&v219 - v27;
  unint64_t v29 = (char *)&v219 + *(int *)(v26 + 48) - v27;
  uint64_t v221 = v26;
  uint64_t v30 = (char *)&v219 + *(int *)(v26 + 64) - v27;
  uint64_t v238 = *(void *)(a5 - 8);
  uint64_t v31 = *(void (**)(char *, uint64_t, uint64_t))(v238 + 16);
  uint64_t v234 = v13;
  v31((char *)&v219 - v27, v13, a5);
  uint64_t v237 = *(void *)(a6 - 8);
  uint64_t v32 = *(void (**)(char *, unint64_t, uint64_t))(v237 + 16);
  unint64_t v231 = a1;
  v32(v29, a1, a6);
  uint64_t v236 = *(void *)(a7 - 8);
  unint64_t v33 = *(void (**)(char *, unint64_t, uint64_t))(v236 + 16);
  unint64_t v232 = a2;
  v33(v30, a2, a7);
  uint64_t v245 = a5;
  int v34 = swift_dynamicCast();
  v242 = v28;
  uint64_t v243 = a7;
  v244 = v30;
  v241 = v29;
  if (v34)
  {
    if (swift_dynamicCast())
    {
      if (swift_dynamicCast())
      {
        uint64_t v235 = a6;
        uint64_t v234 = String.subscript.getter();
        uint64_t v233 = v35;
        unint64_t v232 = v36;
        uint64_t v38 = v37;
        swift_bridgeObjectRelease();
        unint64_t v39 = String.subscript.getter();
        unint64_t v41 = v40;
        uint64_t v43 = v42;
        uint64_t v45 = v44;
        swift_bridgeObjectRelease();
        uint64_t v46 = String.subscript.getter();
        uint64_t v48 = v47;
        uint64_t v50 = v49;
        uint64_t v52 = v51;
        swift_bridgeObjectRelease();
        unint64_t v53 = Substring._replacingSubstring(_:with:maxReplacements:)(v39, v41, v43, v45, v46, v48, v50, v52, (uint64_t)v239, v234, v233, v232, v38);
        uint64_t v55 = v54;
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        unint64_t v246 = v53;
        uint64_t v247 = v55;
LABEL_50:
        swift_dynamicCast();
        (*(void (**)(char *, uint64_t))(v236 + 8))(v244, v243);
        goto LABEL_51;
      }
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
    }
    else
    {
      swift_bridgeObjectRelease();
    }
  }
  if (swift_dynamicCast())
  {
    unint64_t v57 = v258;
    unint64_t v56 = v259;
    uint64_t v59 = v260;
    uint64_t v58 = v261;
    if (swift_dynamicCast())
    {
      uint64_t v235 = a6;
      unint64_t v61 = v254;
      unint64_t v60 = v255;
      uint64_t v62 = v257;
      unint64_t v220 = v256;
      uint64_t v64 = v243;
      uint64_t v63 = (uint64_t)v244;
      if (swift_dynamicCast())
      {
        Substring._replacingSubstring(_:with:maxReplacements:)(v61, v60, v220, v62, v250, v251, v252, v253, (uint64_t)v239, v57, v56, v59, v58);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        uint64_t v65 = String.subscript.getter();
        uint64_t v67 = v66;
        uint64_t v69 = v68;
        uint64_t v71 = v70;
        swift_bridgeObjectRelease();
        unint64_t v246 = v65;
        uint64_t v247 = v67;
        uint64_t v248 = v69;
        uint64_t v249 = v71;
        swift_dynamicCast();
        (*(void (**)(uint64_t, uint64_t))(v236 + 8))(v63, v64);
LABEL_51:
        (*(void (**)(char *, uint64_t))(v237 + 8))(v241, v235);
        uint64_t v211 = v238;
        return (*(uint64_t (**)(char *, uint64_t))(v211 + 8))(v242, v245);
      }
      swift_bridgeObjectRelease();
      a6 = v235;
    }
    if (swift_dynamicCast())
    {
      uint64_t result = swift_dynamicCast();
      if (result)
      {
        uint64_t v235 = a6;
        if (v56 >> 14 >= v57 >> 14)
        {
          unint64_t v73 = Substring.subscript.getter();
          uint64_t v234 = v74;
          uint64_t v233 = v75;
          unint64_t v232 = v76;
          swift_bridgeObjectRelease();
          unint64_t v77 = String.subscript.getter();
          unint64_t v79 = v78;
          uint64_t v81 = v80;
          uint64_t v83 = v82;
          swift_bridgeObjectRelease();
          uint64_t v84 = String.subscript.getter();
          uint64_t v86 = v85;
          uint64_t v88 = v87;
          uint64_t v90 = v89;
          swift_bridgeObjectRelease();
          Substring._replacingSubstring(_:with:maxReplacements:)(v77, v79, v81, v83, v84, v86, v88, v90, (uint64_t)v239, v73, v234, v233, v232);
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          uint64_t v91 = String.subscript.getter();
          unint64_t v93 = v92;
          unint64_t v95 = v94;
          uint64_t v97 = v96;
          swift_bridgeObjectRelease();
          unint64_t v254 = v91;
          unint64_t v255 = v93;
          unint64_t v256 = v95;
          uint64_t v257 = v97;
          goto LABEL_50;
        }
        goto LABEL_58;
      }
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
    }
    else
    {
      swift_bridgeObjectRelease();
    }
  }
  if (!swift_dynamicCast())
  {
LABEL_37:
    if (swift_dynamicCast())
    {
      unint64_t v165 = v258;
      unint64_t v166 = v259;
      if (swift_dynamicCast())
      {
        uint64_t result = swift_dynamicCast();
        if (result)
        {
          uint64_t v235 = a6;
          if (v166 >> 14 < v165 >> 14)
          {
LABEL_60:
            __break(1u);
            goto LABEL_61;
          }
          unint64_t v168 = v254;
          unint64_t v167 = v255;
          uint64_t v233 = Substring.subscript.getter();
          unint64_t v231 = v169;
          unint64_t v232 = v170;
          uint64_t v234 = v171;
          swift_bridgeObjectRelease();
          unint64_t v172 = String.subscript.getter();
          unint64_t v174 = v173;
          uint64_t v176 = v175;
          uint64_t v178 = v177;
          uint64_t result = swift_bridgeObjectRelease();
          if (v167 >> 14 < v168 >> 14)
          {
LABEL_61:
            __break(1u);
            goto LABEL_62;
          }
          uint64_t v179 = Substring.subscript.getter();
          uint64_t v181 = v180;
          uint64_t v183 = v182;
          uint64_t v185 = v184;
          swift_bridgeObjectRelease();
          Substring._replacingSubstring(_:with:maxReplacements:)(v172, v174, v176, v178, v179, v181, v183, v185, (uint64_t)v239, v233, v231, v232, v234);
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
LABEL_49:
          uint64_t v204 = String.subscript.getter();
          uint64_t v206 = v205;
          uint64_t v208 = v207;
          uint64_t v210 = v209;
          swift_bridgeObjectRelease();
          uint64_t v250 = v204;
          uint64_t v251 = v206;
          uint64_t v252 = v208;
          uint64_t v253 = v210;
          goto LABEL_50;
        }
        swift_bridgeObjectRelease();
      }
      if (swift_dynamicCast())
      {
        unint64_t v186 = v254;
        unint64_t v187 = v255;
        uint64_t result = swift_dynamicCast();
        if (result)
        {
          uint64_t v235 = a6;
          if (v166 >> 14 < v165 >> 14)
          {
LABEL_62:
            __break(1u);
            goto LABEL_63;
          }
          uint64_t v233 = Substring.subscript.getter();
          unint64_t v232 = v188;
          unint64_t v231 = v189;
          uint64_t v234 = v190;
          uint64_t result = swift_bridgeObjectRelease();
          if (v187 >> 14 < v186 >> 14)
          {
LABEL_63:
            __break(1u);
            goto LABEL_64;
          }
          uint64_t v230 = Substring.subscript.getter();
          unint64_t v192 = v191;
          uint64_t v194 = v193;
          uint64_t v196 = v195;
          swift_bridgeObjectRelease();
          uint64_t v197 = String.subscript.getter();
          uint64_t v199 = v198;
          uint64_t v201 = v200;
          uint64_t v203 = v202;
          swift_bridgeObjectRelease();
          Substring._replacingSubstring(_:with:maxReplacements:)(v230, v192, v194, v196, v197, v199, v201, v203, (uint64_t)v239, v233, v232, v231, v234);
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          goto LABEL_49;
        }
        swift_bridgeObjectRelease();
      }
      swift_bridgeObjectRelease();
    }
    uint64_t v212 = a6;
    v244 = (char *)a11;
    v213 = v226;
    uint64_t v211 = v25;
    uint64_t v214 = v245;
    dispatch thunk of Collection.subscript.getter();
    uint64_t v215 = v223;
    uint64_t v216 = v230;
    Collection<>._ranges<A>(of:)(v231, v230, v212, v222, a10, a12, v223);
    (*(void (**)(char *, uint64_t))(v229 + 8))(v213, v216);
    v217 = (void *)v225;
    uint64_t WitnessTable = (char *)swift_getWitnessTable();
    RangeReplaceableCollection._replacing<A, B>(_:with:maxReplacements:)(v215, v232, v239, v214, v217, v243, v233, WitnessTable, v240, (uint64_t)v244);
    (*(void (**)(uint64_t, void *))(v224 + 8))(v215, v217);
    uint64_t v245 = v221;
    return (*(uint64_t (**)(char *, uint64_t))(v211 + 8))(v242, v245);
  }
  if (swift_dynamicCast())
  {
    unint64_t v99 = v258;
    unint64_t v98 = v259;
    if (swift_dynamicCast())
    {
      uint64_t v235 = a6;
      unint64_t v100 = String.subscript.getter();
      uint64_t v233 = v101;
      unint64_t v232 = v102;
      uint64_t v234 = v103;
      uint64_t result = swift_bridgeObjectRelease();
      if (v98 >> 14 >= v99 >> 14)
      {
        unint64_t v104 = Substring.subscript.getter();
        unint64_t v231 = v105;
        uint64_t v107 = v106;
        uint64_t v109 = v108;
        swift_bridgeObjectRelease();
        uint64_t v110 = String.subscript.getter();
        uint64_t v112 = v111;
        uint64_t v114 = v113;
        uint64_t v116 = v115;
        swift_bridgeObjectRelease();
        unint64_t v117 = Substring._replacingSubstring(_:with:maxReplacements:)(v104, v231, v107, v109, v110, v112, v114, v116, (uint64_t)v239, v100, v233, v232, v234);
        uint64_t v119 = v118;
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        unint64_t v246 = v117;
        uint64_t v247 = v119;
        goto LABEL_50;
      }
      __break(1u);
LABEL_58:
      __break(1u);
      goto LABEL_59;
    }
    swift_bridgeObjectRelease();
  }
  if (!swift_dynamicCast())
  {
LABEL_36:
    swift_bridgeObjectRelease();
    goto LABEL_37;
  }
  unint64_t v120 = v258;
  unint64_t v121 = v259;
  uint64_t v122 = v261;
  if (swift_dynamicCast())
  {
    uint64_t v234 = v122;
    uint64_t v235 = a6;
    unint64_t v123 = String.subscript.getter();
    unint64_t v232 = v124;
    unint64_t v231 = v125;
    uint64_t v233 = v126;
    swift_bridgeObjectRelease();
    unint64_t v127 = String.subscript.getter();
    uint64_t v230 = v128;
    uint64_t v130 = v129;
    uint64_t v132 = v131;
    uint64_t result = swift_bridgeObjectRelease();
    if (v121 >> 14 < v120 >> 14)
    {
LABEL_59:
      __break(1u);
      goto LABEL_60;
    }
    uint64_t v133 = Substring.subscript.getter();
    uint64_t v135 = v134;
    uint64_t v137 = v136;
    uint64_t v139 = v138;
    swift_bridgeObjectRelease();
    unint64_t v140 = Substring._replacingSubstring(_:with:maxReplacements:)(v127, v230, v130, v132, v133, v135, v137, v139, (uint64_t)v239, v123, v232, v231, v233);
LABEL_33:
    unint64_t v163 = v140;
    uint64_t v164 = v141;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    unint64_t v246 = v163;
    uint64_t v247 = v164;
    goto LABEL_50;
  }
  unint64_t v220 = v121;
  if (!swift_dynamicCast())
  {
    swift_bridgeObjectRelease();
    goto LABEL_36;
  }
  uint64_t v234 = v122;
  uint64_t v235 = a6;
  unint64_t v142 = v254;
  unint64_t v143 = v255;
  unint64_t v144 = String.subscript.getter();
  uint64_t v233 = v145;
  unint64_t v232 = v146;
  unint64_t v148 = v147;
  uint64_t result = swift_bridgeObjectRelease();
  if (v143 >> 14 < v142 >> 14)
  {
LABEL_64:
    __break(1u);
    goto LABEL_65;
  }
  unint64_t v231 = v148;
  unint64_t v149 = Substring.subscript.getter();
  unint64_t v151 = v150;
  uint64_t v153 = v152;
  uint64_t v155 = v154;
  uint64_t result = swift_bridgeObjectRelease();
  if (v220 >> 14 >= v120 >> 14)
  {
    uint64_t v156 = Substring.subscript.getter();
    uint64_t v158 = v157;
    uint64_t v160 = v159;
    uint64_t v162 = v161;
    swift_bridgeObjectRelease();
    unint64_t v140 = Substring._replacingSubstring(_:with:maxReplacements:)(v149, v151, v153, v155, v156, v158, v160, v162, (uint64_t)v239, v144, v233, v232, v231);
    goto LABEL_33;
  }
LABEL_65:
  __break(1u);
  return result;
}

uint64_t RangeReplaceableCollection<>.replacing<A, B>(_:with:maxReplacements:)@<X0>(unint64_t a1@<X0>, unint64_t a2@<X1>, void (*a3)(void, void, void)@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>, uint64_t a10, uint64_t a11)
{
  uint64_t v53 = a8;
  uint64_t v54 = a3;
  uint64_t v56 = a5;
  uint64_t v57 = a6;
  unint64_t v51 = a1;
  unint64_t v52 = a2;
  uint64_t v50 = a9;
  uint64_t v58 = a7;
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
  uint64_t v14 = MEMORY[0x270FA5388](TupleTypeMetadata2);
  uint64_t v47 = (char *)&v42 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v16 = MEMORY[0x270FA5388](v14);
  char v18 = (char *)&v42 - v17;
  uint64_t v19 = *(void **)(AssociatedTypeWitness - 8);
  uint64_t v20 = MEMORY[0x270FA5388](v16);
  long long v22 = (char *)&v42 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v20);
  long long v24 = (char *)&v42 - v23;
  swift_getAssociatedConformanceWitness();
  uint64_t v25 = type metadata accessor for Range();
  uint64_t v48 = *(void *)(v25 - 8);
  uint64_t v26 = MEMORY[0x270FA5388](v25);
  uint64_t v45 = (char *)&v42 - ((v27 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v26);
  uint64_t v46 = (char *)&v42 - v28;
  dispatch thunk of Collection.startIndex.getter();
  uint64_t v49 = v11;
  uint64_t v55 = a4;
  dispatch thunk of Collection.endIndex.getter();
  uint64_t result = dispatch thunk of static Comparable.<= infix(_:_:)();
  if (result)
  {
    uint64_t v43 = a10;
    uint64_t v44 = a11;
    uint64_t v42 = v25;
    uint64_t v30 = TupleTypeMetadata2;
    uint64_t v31 = &v18[*(int *)(TupleTypeMetadata2 + 48)];
    uint64_t v32 = (void (*)(char *, char *, uint64_t))v19[4];
    v32(v18, v24, AssociatedTypeWitness);
    v32(v31, v22, AssociatedTypeWitness);
    unint64_t v33 = v47;
    int v34 = &v47[*(int *)(v30 + 48)];
    uint64_t v35 = (void (*)(char *, char *, uint64_t))v19[2];
    v35(v47, v18, AssociatedTypeWitness);
    v35(v34, v31, AssociatedTypeWitness);
    unint64_t v36 = v45;
    v32(v45, v33, AssociatedTypeWitness);
    uint64_t v37 = (void (*)(char *, uint64_t))v19[1];
    v37(v34, AssociatedTypeWitness);
    uint64_t v38 = &v33[*(int *)(TupleTypeMetadata2 + 48)];
    v32(v33, v18, AssociatedTypeWitness);
    v32(v38, v31, AssociatedTypeWitness);
    uint64_t v39 = v42;
    v32(&v36[*(int *)(v42 + 36)], v38, AssociatedTypeWitness);
    v37(v33, AssociatedTypeWitness);
    uint64_t v40 = v48;
    uint64_t v41 = (uint64_t)v46;
    (*(void (**)(char *, char *, uint64_t))(v48 + 32))(v46, v36, v39);
    RangeReplaceableCollection<>.replacing<A, B>(_:with:subrange:maxReplacements:)(v51, v52, v41, v54, v55, v56, v57, v58, v50, v53, v43, v44);
    return (*(uint64_t (**)(uint64_t, uint64_t))(v40 + 8))(v41, v39);
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t RangeReplaceableCollection<>.replace<A, B>(_:with:maxReplacements:)(unint64_t a1, unint64_t a2, void (*a3)(void, void, void), uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  uint64_t v64 = a8;
  uint64_t v65 = a3;
  uint64_t v67 = a5;
  uint64_t v68 = a6;
  unint64_t v62 = a1;
  unint64_t v63 = a2;
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
  uint64_t v14 = MEMORY[0x270FA5388](TupleTypeMetadata2);
  uint64_t v59 = (char *)&v49 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v16 = MEMORY[0x270FA5388](v14);
  uint64_t v58 = (char *)&v49 - v17;
  char v18 = *(void **)(AssociatedTypeWitness - 8);
  uint64_t v19 = MEMORY[0x270FA5388](v16);
  uint64_t v21 = (char *)&v49 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v19);
  uint64_t v23 = (char *)&v49 - v22;
  swift_getAssociatedConformanceWitness();
  uint64_t v24 = type metadata accessor for Range();
  uint64_t v60 = *(void *)(v24 - 8);
  uint64_t v61 = v24;
  uint64_t v25 = MEMORY[0x270FA5388](v24);
  uint64_t v54 = (char *)&v49 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v27 = MEMORY[0x270FA5388](v25);
  uint64_t v56 = (char *)&v49 - v28;
  uint64_t v29 = *(void *)(a4 - 8);
  MEMORY[0x270FA5388](v27);
  uint64_t v31 = *(void (**)(void))(v29 + 16);
  uint64_t v55 = (char *)&v49 - ((v30 + 15) & 0xFFFFFFFFFFFFFFF0);
  v31();
  dispatch thunk of Collection.startIndex.getter();
  dispatch thunk of Collection.endIndex.getter();
  uint64_t v32 = *(void (**)(uint64_t, uint64_t))(v29 + 8);
  uint64_t v66 = v10;
  uint64_t v57 = v29 + 8;
  v32(v10, a4);
  uint64_t result = dispatch thunk of static Comparable.<= infix(_:_:)();
  if (result)
  {
    uint64_t v51 = a9;
    uint64_t v52 = a10;
    uint64_t v49 = a4;
    uint64_t v50 = a7;
    uint64_t v34 = TupleTypeMetadata2;
    uint64_t v35 = v58;
    unint64_t v36 = &v58[*(int *)(TupleTypeMetadata2 + 48)];
    uint64_t v53 = (uint64_t (*)(char *, uint64_t))v32;
    uint64_t v37 = (void (*)(char *, char *, uint64_t))v18[4];
    v37(v58, v23, AssociatedTypeWitness);
    v37(v36, v21, AssociatedTypeWitness);
    uint64_t v38 = v59;
    uint64_t v39 = &v59[*(int *)(v34 + 48)];
    uint64_t v40 = (void (*)(char *, char *, uint64_t))v18[2];
    v40(v59, v35, AssociatedTypeWitness);
    v40(v39, v36, AssociatedTypeWitness);
    uint64_t v41 = v54;
    v37(v54, v38, AssociatedTypeWitness);
    uint64_t v42 = (void (*)(char *, uint64_t))v18[1];
    v42(v39, AssociatedTypeWitness);
    uint64_t v43 = &v38[*(int *)(TupleTypeMetadata2 + 48)];
    v37(v38, v35, AssociatedTypeWitness);
    v37(v43, v36, AssociatedTypeWitness);
    uint64_t v44 = v61;
    v37(&v41[*(int *)(v61 + 36)], v43, AssociatedTypeWitness);
    v42(v38, AssociatedTypeWitness);
    uint64_t v45 = v60;
    uint64_t v46 = (uint64_t)v56;
    (*(void (**)(char *, char *, uint64_t))(v60 + 32))(v56, v41, v44);
    uint64_t v47 = v49;
    uint64_t v48 = v55;
    RangeReplaceableCollection<>.replacing<A, B>(_:with:subrange:maxReplacements:)(v62, v63, v46, v65, v49, v67, v68, v50, v66, v64, v51, v52);
    (*(void (**)(uint64_t, uint64_t))(v45 + 8))(v46, v44);
    return v53(v48, v47);
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t specialized RangeReplaceableCollection<>._replacing<A, B>(_:with:maxReplacements:)(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4, unint64_t a5, uint64_t a6, unint64_t a7)
{
  unint64_t v14 = String.subscript.getter();
  specialized Collection<>._ranges<A>(of:)(a1, a2, v14, v15, v16, v17, (uint64_t)v20);
  swift_bridgeObjectRelease();
  uint64_t v18 = specialized RangeReplaceableCollection._replacing<A, B>(_:with:maxReplacements:)((uint64_t)v20, a3, a4, a5, a6, a7);
  outlined release of RangesCollection<ZSearcher<Substring>>((uint64_t)v20);
  return v18;
}

uint64_t RangeReplaceableCollection<>.replacing<A, B>(_:with:subrange:maxReplacements:)@<X0>(uint64_t a1@<X1>, unint64_t a2@<X2>, uint64_t a3@<X3>, void (*a4)(void, void, void)@<X4>, uint64_t a5@<X5>, uint64_t a6@<X6>, uint64_t a7@<X7>, uint64_t a8@<X8>, uint64_t a9, uint64_t a10, uint64_t a11)
{
  dispatch thunk of Collection.startIndex.getter();
  uint64_t result = dispatch thunk of Collection.endIndex.getter();
  if ((unint64_t)v25[0] >> 14 < (unint64_t)v34[0] >> 14)
  {
    __break(1u);
  }
  else
  {
    uint64_t v21 = a6;
    Collection<>._ranges<A>(of:subjectBounds:searchBounds:)(v34[0], v25[0], a2, a3, a7, (uint64_t)v34, a11);
    uint64_t v20 = v38;
    uint64_t v17 = v39;
    v25[0] = v34[0];
    v25[1] = v34[1];
    long long v26 = v35;
    long long v27 = v36;
    uint64_t v28 = v37;
    uint64_t v29 = v38;
    uint64_t v30 = v39;
    uint64_t v31 = v40;
    uint64_t v32 = v41;
    uint64_t v33 = v42;
    swift_getAssociatedTypeWitness();
    uint64_t v18 = (void *)type metadata accessor for RegexRangesCollection();
    uint64_t WitnessTable = (char *)swift_getWitnessTable();
    RangeReplaceableCollection._replacing<A, B>(_:with:maxReplacements:)((uint64_t)v25, a1, a4, a5, v18, v21, a9, WitnessTable, a8, a10);
    swift_release();
    swift_bridgeObjectRelease();
    return outlined consume of Regex<A1.RegexOutput>.Match?<A><A1>(v20, v17);
  }
  return result;
}

uint64_t RangeReplaceableCollection<>.replacing<A, B>(_:with:maxReplacements:)@<X0>(uint64_t a1@<X1>, void (*a2)(void, void, void)@<X2>, uint64_t a3@<X3>, uint64_t a4@<X4>, uint64_t a5@<X5>, uint64_t a6@<X6>, uint64_t a7@<X7>, uint64_t a8@<X8>, uint64_t a9)
{
  dispatch thunk of Collection.startIndex.getter();
  uint64_t result = dispatch thunk of Collection.endIndex.getter();
  if (v18 >> 14 >= v19 >> 14) {
    return RangeReplaceableCollection<>.replacing<A, B>(_:with:subrange:maxReplacements:)(a1, v19, v18, a2, a3, a4, a5, a8, a6, a7, a9);
  }
  __break(1u);
  return result;
}

uint64_t RangeReplaceableCollection<>.replace<A, B>(_:with:maxReplacements:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6 = *(void *)(a4 - 8);
  MEMORY[0x270FA5388](a1);
  uint64_t v8 = (char *)&v18 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  RangeReplaceableCollection<>.replacing<A, B>(_:with:maxReplacements:)(v9, v10, v11, v12, v13, v14, v15, (uint64_t)v8, v16);
  (*(void (**)(uint64_t, uint64_t))(v6 + 8))(v4, a4);
  return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v6 + 32))(v4, v8, a4);
}

uint64_t SplitCollection.init(base:searcher:maxSplits:omittingEmptySubsequences:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, int a4@<W3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X8>)
{
  int v20 = a4;
  uint64_t v13 = type metadata accessor for RangesCollection();
  uint64_t v14 = *(void *)(v13 - 8);
  MEMORY[0x270FA5388](v13);
  uint64_t v16 = (char *)&v19 - v15;
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  Collection._ranges<A>(of:)(a2, a5, a6, (uint64_t)v16);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(a5 - 8) + 8))(a2, a5);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(AssociatedTypeWitness - 8) + 8))(a1, AssociatedTypeWitness);
  (*(void (**)(uint64_t, char *, uint64_t))(v14 + 32))(a7, v16, v13);
  uint64_t result = type metadata accessor for SplitCollection();
  *(void *)(a7 + *(int *)(result + 36)) = a3;
  *(unsigned char *)(a7 + *(int *)(result + 40)) = v20;
  return result;
}

uint64_t SplitCollection.Iterator.init(ranges:maxSplits:omittingEmptySubsequences:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  int v16 = a3;
  uint64_t v15 = a2;
  uint64_t v14 = type metadata accessor for RangesIterator();
  uint64_t v6 = *(void *)(v14 - 8);
  MEMORY[0x270FA5388](v14);
  uint64_t v8 = (char *)&v13 - v7;
  uint64_t v9 = (int *)type metadata accessor for SplitCollection.Iterator();
  *(void *)(a4 + v9[13]) = 0;
  *(unsigned char *)(a4 + v9[14]) = 0;
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(AssociatedTypeWitness - 8) + 16))(a4, a1, AssociatedTypeWitness);
  swift_getAssociatedConformanceWitness();
  dispatch thunk of Collection.startIndex.getter();
  uint64_t v11 = type metadata accessor for RangesCollection();
  RangesCollection.makeIterator()(v11, (uint64_t)v8);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v11 - 8) + 8))(a1, v11);
  uint64_t result = (*(uint64_t (**)(uint64_t, char *, uint64_t))(v6 + 32))(a4 + v9[10], v8, v14);
  *(void *)(a4 + v9[11]) = v15;
  *(unsigned char *)(a4 + v9[12]) = v16;
  return result;
}

uint64_t SplitCollection.Iterator.next()@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v108 = a2;
  uint64_t v3 = *(void *)(a1 + 16);
  uint64_t v4 = *(void *)(a1 + 24);
  swift_getAssociatedTypeWitness();
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
  uint64_t v7 = MEMORY[0x270FA5388](TupleTypeMetadata2);
  unint64_t v93 = (char *)v82 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v7);
  unint64_t v92 = (char *)v82 - v9;
  uint64_t v10 = swift_checkMetadataState();
  uint64_t v95 = *(void *)(v10 - 8);
  MEMORY[0x270FA5388](v10);
  uint64_t v96 = (char *)v82 - v11;
  uint64_t v12 = swift_getAssociatedConformanceWitness();
  uint64_t v13 = type metadata accessor for Range();
  uint64_t v14 = type metadata accessor for Optional();
  uint64_t v15 = MEMORY[0x270FA5388](v14);
  uint64_t v111 = (char *)v82 - v16;
  uint64_t v97 = v13;
  uint64_t v17 = MEMORY[0x270FA5388](v15);
  uint64_t v18 = MEMORY[0x270FA5388](v17);
  uint64_t v19 = MEMORY[0x270FA5388](v18);
  uint64_t v21 = (char *)v82 - v20;
  uint64_t v22 = MEMORY[0x270FA5388](v19);
  uint64_t v24 = (char *)v82 - v23;
  uint64_t v25 = MEMORY[0x270FA5388](v22);
  uint64_t v33 = (char *)v82 - v32;
  if (*(unsigned char *)(v2 + v29[14]))
  {
    uint64_t v34 = swift_getAssociatedTypeWitness();
    long long v35 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v34 - 8) + 56);
    uint64_t v36 = v34;
    uint64_t v37 = v108;
    return v35(v37, 1, 1, v36);
  }
  unint64_t v105 = v27;
  uint64_t v109 = v4;
  uint64_t v84 = v26;
  uint64_t v85 = v25;
  uint64_t v110 = v3;
  uint64_t v87 = v31;
  uint64_t v88 = v30;
  uint64_t v39 = AssociatedConformanceWitness;
  uint64_t v40 = v2 + v29[9];
  uint64_t v41 = v29;
  uint64_t v113 = v2;
  uint64_t v91 = v10;
  uint64_t v42 = v28;
  dispatch thunk of Collection.endIndex.getter();
  uint64_t v89 = v12;
  uint64_t v106 = *(void *)(v12 + 8);
  uint64_t v107 = v40;
  char v43 = dispatch thunk of static Equatable.== infix(_:_:)();
  uint64_t v86 = v42;
  uint64_t v45 = *(void (**)(char *, uint64_t))(v42 + 8);
  uint64_t v44 = v42 + 8;
  uint64_t v90 = v45;
  v45(v33, AssociatedTypeWitness);
  if (v43)
  {
    uint64_t v46 = v108;
    uint64_t v47 = v113;
    return finish #1 <A>() in SplitCollection.Iterator.next()(v47, v46);
  }
  uint64_t v47 = v113;
  uint64_t v46 = v108;
  if (*(void *)(v113 + v41[13]) >= *(void *)(v113 + v41[11])) {
    return finish #1 <A>() in SplitCollection.Iterator.next()(v47, v46);
  }
  uint64_t v83 = v41[13];
  v82[0] = v44;
  uint64_t v112 = v24;
  v82[1] = v39;
  unint64_t v98 = v41;
  uint64_t v48 = v113 + v41[10];
  uint64_t v49 = type metadata accessor for RangesIterator();
  uint64_t v50 = *(void *)(v49 + 24);
  uint64_t v102 = *(void *)(v49 + 16);
  uint64_t v103 = v50;
  unint64_t v100 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v50 + 40);
  uint64_t v101 = v50 + 40;
  unint64_t v99 = (unsigned int (**)(char *, uint64_t, uint64_t))(v105 + 6);
  uint64_t v51 = (void (**)(char *, uint64_t, uint64_t))(v105 + 2);
  unint64_t v104 = (void (**)(uint64_t, char *, uint64_t))(v105 + 4);
  ++v105;
  for (uint64_t i = v97; ; v58((char *)v59, i))
  {
    uint64_t v53 = v111;
    v100(v48, v48 + *(int *)(v49 + 40), v102, v103);
    if ((*v99)(v53, 1, i) == 1)
    {
      (*(void (**)(char *, uint64_t))(v84 + 8))(v53, v85);
      uint64_t v46 = v108;
      uint64_t v47 = v113;
      return finish #1 <A>() in SplitCollection.Iterator.next()(v47, v46);
    }
    uint64_t v54 = *v104;
    uint64_t v55 = (uint64_t)v112;
    (*v104)((uint64_t)v112, v53, i);
    int v56 = *(unsigned __int8 *)(v113 + v98[12]);
    (*v51)(v21, v55, i);
    if (v56 != 1) {
      break;
    }
    char v57 = dispatch thunk of static Equatable.== infix(_:_:)();
    uint64_t v58 = *v105;
    uint64_t result = (*v105)(v21, i);
    if ((v57 & 1) == 0) {
      goto LABEL_16;
    }
    uint64_t v59 = (uint64_t)v112;
    $defer #1 <A>() in SplitCollection.Iterator.next()(v113, (uint64_t)v112);
  }
  uint64_t v58 = *v105;
  uint64_t result = (*v105)(v21, i);
LABEL_16:
  uint64_t v60 = (uint64_t)v112;
  uint64_t v61 = *(void *)(v113 + v83);
  BOOL v62 = __OFADD__(v61, 1);
  uint64_t v63 = v61 + 1;
  uint64_t v64 = v96;
  if (v62)
  {
    __break(1u);
  }
  else
  {
    *(void *)(v113 + v83) = v63;
    (*(void (**)(char *))(v95 + 16))(v64);
    uint64_t result = dispatch thunk of static Comparable.<= infix(_:_:)();
    if (result)
    {
      uint64_t v65 = TupleTypeMetadata2;
      uint64_t v66 = v92;
      uint64_t v67 = &v92[*(int *)(TupleTypeMetadata2 + 48)];
      uint64_t v68 = v86;
      uint64_t v69 = *(void (**)(char *, uint64_t, uint64_t))(v86 + 16);
      v69(v92, v107, AssociatedTypeWitness);
      uint64_t v111 = v67;
      v69(v67, v60, AssociatedTypeWitness);
      uint64_t v70 = v93;
      uint64_t v71 = &v93[*(int *)(v65 + 48)];
      v69(v93, (uint64_t)v66, AssociatedTypeWitness);
      v69(v71, (uint64_t)v67, AssociatedTypeWitness);
      uint64_t v72 = *(void (**)(char *, char *, uint64_t))(v68 + 32);
      unint64_t v73 = v87;
      v72(v87, v70, AssociatedTypeWitness);
      v90(v71, AssociatedTypeWitness);
      uint64_t v74 = &v70[*(int *)(TupleTypeMetadata2 + 48)];
      v72(v70, v66, AssociatedTypeWitness);
      v72(v74, v111, AssociatedTypeWitness);
      uint64_t v75 = v97;
      v72(&v73[*(int *)(v97 + 36)], v74, AssociatedTypeWitness);
      v90(v70, AssociatedTypeWitness);
      unint64_t v76 = v88;
      v54((uint64_t)v88, v73, v75);
      uint64_t v77 = v108;
      unint64_t v78 = v96;
      uint64_t v79 = v91;
      dispatch thunk of Collection.subscript.getter();
      v58(v76, v75);
      (*(void (**)(char *, uint64_t))(v95 + 8))(v78, v79);
      uint64_t v80 = swift_getAssociatedTypeWitness();
      (*(void (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v80 - 8) + 56))(v77, 0, 1, v80);
      uint64_t v81 = (uint64_t)v112;
      $defer #1 <A>() in SplitCollection.Iterator.next()(v113, (uint64_t)v112);
      return v58((char *)v81, v75);
    }
  }
  __break(1u);
  return result;
}

uint64_t finish #1 <A>() in SplitCollection.Iterator.next()@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v42 = a1;
  uint64_t v40 = a2;
  swift_getAssociatedTypeWitness();
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v41 = swift_getAssociatedConformanceWitness();
  uint64_t v3 = type metadata accessor for PartialRangeFrom();
  uint64_t v33 = *(void *)(v3 - 8);
  uint64_t v34 = v3;
  MEMORY[0x270FA5388](v3);
  uint64_t v39 = (char *)&v29 - v4;
  uint64_t v5 = swift_checkMetadataState();
  uint64_t v6 = *(void *)(v5 - 8);
  uint64_t v7 = MEMORY[0x270FA5388](v5);
  uint64_t v9 = (char *)&v29 - v8;
  uint64_t v10 = *(void *)(AssociatedTypeWitness - 8);
  uint64_t v11 = MEMORY[0x270FA5388](v7);
  uint64_t v13 = (char *)&v29 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v11);
  uint64_t v15 = (char *)&v29 - v14;
  uint64_t v16 = type metadata accessor for SplitCollection.Iterator();
  uint64_t v17 = v42;
  *(unsigned char *)(v42 + *(int *)(v16 + 56)) = 1;
  uint64_t v30 = v16;
  uint64_t v18 = v17 + *(int *)(v16 + 36);
  uint64_t v36 = *(void (**)(char *))(v10 + 16);
  uint64_t v37 = v18;
  v36(v15);
  long long v35 = *(void (**)(char *, uint64_t, uint64_t))(v6 + 16);
  v35(v9, v17, v5);
  dispatch thunk of Collection.endIndex.getter();
  uint64_t v19 = *(void (**)(char *, uint64_t))(v6 + 8);
  uint64_t v38 = v9;
  uint64_t v43 = v5;
  uint64_t v31 = v19;
  uint64_t v32 = v6 + 8;
  v19(v9, v5);
  LOBYTE(v9) = dispatch thunk of static Equatable.== infix(_:_:)();
  uint64_t v20 = *(void (**)(char *, uint64_t))(v10 + 8);
  v20(v13, AssociatedTypeWitness);
  v20(v15, AssociatedTypeWitness);
  if ((v9 & 1) != 0 && *(unsigned char *)(v17 + *(int *)(v30 + 48)) == 1)
  {
    uint64_t v21 = swift_getAssociatedTypeWitness();
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v21 - 8) + 56))(v40, 1, 1, v21);
  }
  else
  {
    uint64_t v23 = v38;
    uint64_t v24 = v43;
    v35(v38, v17, v43);
    uint64_t v25 = v39;
    ((void (*)(char *, uint64_t, uint64_t))v36)(v39, v37, AssociatedTypeWitness);
    uint64_t result = dispatch thunk of static Equatable.== infix(_:_:)();
    if (result)
    {
      uint64_t v26 = v34;
      swift_getWitnessTable();
      uint64_t v27 = v40;
      Collection.subscript.getter();
      (*(void (**)(char *, uint64_t))(v33 + 8))(v25, v26);
      v31(v23, v24);
      uint64_t v28 = swift_getAssociatedTypeWitness();
      return (*(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v28 - 8) + 56))(v27, 0, 1, v28);
    }
    else
    {
      __break(1u);
    }
  }
  return result;
}

uint64_t $defer #1 <A>() in SplitCollection.Iterator.next()(uint64_t a1, uint64_t a2)
{
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  uint64_t v5 = a2 + *(int *)(type metadata accessor for Range() + 36);
  uint64_t v6 = a1 + *(int *)(type metadata accessor for SplitCollection.Iterator() + 36);
  uint64_t v7 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(AssociatedTypeWitness - 8) + 24);

  return v7(v6, v5, AssociatedTypeWitness);
}

uint64_t SplitCollection.makeIterator()@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v5 = type metadata accessor for RangesCollection();
  MEMORY[0x270FA5388](v5);
  uint64_t v7 = (char *)&v10 - v6;
  (*(void (**)(char *, uint64_t))(v8 + 16))((char *)&v10 - v6, v2);
  return SplitCollection.Iterator.init(ranges:maxSplits:omittingEmptySubsequences:)((uint64_t)v7, *(void *)(v2 + *(int *)(a1 + 36)), *(unsigned __int8 *)(v2 + *(int *)(a1 + 40)), a2);
}

uint64_t protocol witness for Sequence.makeIterator() in conformance SplitCollection<A>(uint64_t a1, uint64_t a2)
{
  return protocol witness for Sequence.makeIterator() in conformance RangesCollection<A>(a1, a2, (void (*)(void))SplitCollection.makeIterator());
}

uint64_t protocol witness for Sequence.makeIterator() in conformance RangesCollection<A>(uint64_t a1, uint64_t a2, void (*a3)(void))
{
  a3();
  uint64_t v5 = *(uint64_t (**)(uint64_t, uint64_t))(*(void *)(a1 - 8) + 8);

  return v5(v3, a1);
}

uint64_t protocol witness for Sequence.underestimatedCount.getter in conformance SplitCollection<A>()
{
  return 0;
}

uint64_t Collection.split<A>(by:maxSplits:omittingEmptySubsequences:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, int a3@<W2>, uint64_t a4@<X4>, uint64_t a5@<X5>, uint64_t a6@<X8>)
{
  uint64_t v12 = *(void *)(a4 - 8);
  uint64_t v13 = MEMORY[0x270FA5388](a1);
  uint64_t v15 = (char *)&v22 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v13);
  uint64_t v17 = (char *)&v22 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t))(v18 + 16))(v17, v20, v19);
  (*(void (**)(char *, uint64_t, uint64_t))(v12 + 16))(v15, a1, a4);
  return SplitCollection.init(base:searcher:maxSplits:omittingEmptySubsequences:)((uint64_t)v17, (uint64_t)v15, a2, a3, a4, a5, a6);
}

uint64_t Collection<>.split<A>(separator:maxSplits:omittingEmptySubsequences:)(uint64_t a1, uint64_t a2, int a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v56 = a7;
  uint64_t v57 = a8;
  int v64 = a3;
  uint64_t v65 = a2;
  uint64_t v12 = *(void *)(a5 - 8);
  MEMORY[0x270FA5388](a1);
  uint64_t v53 = (char *)&v48 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v66 = v14;
  uint64_t v15 = type metadata accessor for ZSearcher();
  uint64_t WitnessTable = swift_getWitnessTable();
  unint64_t v59 = type metadata accessor for SplitCollection();
  MEMORY[0x270FA5388](v59);
  uint64_t v54 = (uint64_t)&v48 - v16;
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
  uint64_t v18 = *(void *)(TupleTypeMetadata2 - 8);
  uint64_t v19 = MEMORY[0x270FA5388](TupleTypeMetadata2);
  uint64_t v21 = (char *)&v48 - v20;
  uint64_t v58 = v19;
  uint64_t v22 = (char *)&v48 + *(int *)(v19 + 48) - v20;
  uint64_t v62 = *(void *)(a4 - 8);
  uint64_t v23 = *(void (**)(char *, uint64_t, uint64_t))(v62 + 16);
  uint64_t v60 = v8;
  v23((char *)&v48 - v20, v8, a4);
  uint64_t v24 = *(void (**)(char *, uint64_t, uint64_t))(v12 + 16);
  uint64_t v52 = a1;
  v24(v22, a1, a5);
  if (!swift_dynamicCast()) {
    goto LABEL_8;
  }
  uint64_t v61 = v12;
  uint64_t v63 = v21;
  if (!swift_dynamicCast())
  {
    if (swift_dynamicCast())
    {
      uint64_t v30 = v73;
      unint64_t v59 = v72;
      uint64_t v60 = v71;
      uint64_t v31 = v74;
      unint64_t v32 = String.subscript.getter();
      unint64_t v34 = v33;
      swift_bridgeObjectRelease();
      specialized StringProtocol<>._split(separator:maxSplits:omittingEmptySubsequences:)(v60, v59, v30, v31, v65, v64 & 1, v32, v34);
      swift_bridgeObjectRelease();
      goto LABEL_6;
    }
    swift_bridgeObjectRelease();
    uint64_t v21 = v63;
    uint64_t v12 = v61;
LABEL_8:
    if (swift_dynamicCast())
    {
      uint64_t v61 = v12;
      uint64_t v63 = v21;
      unint64_t v36 = v72;
      unint64_t v50 = v71;
      uint64_t v51 = v22;
      if (swift_dynamicCast())
      {
        specialized StringProtocol<>._split(separator:maxSplits:omittingEmptySubsequences:)(v67, v68, v65, v64 & 1, v50, v36);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_getAssociatedTypeWitness();
        uint64_t v35 = _arrayForceCast<A, B>(_:)();
        swift_bridgeObjectRelease();
        (*(void (**)(char *, uint64_t))(v61 + 8))(v51, a5);
        goto LABEL_13;
      }
      unint64_t v49 = v36;
      unint64_t v37 = v50;
      uint64_t v38 = v51;
      if (swift_dynamicCast())
      {
        specialized StringProtocol<>._split(separator:maxSplits:omittingEmptySubsequences:)(v67, v68, v69, v70, v65, v64 & 1, v37, v49);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_getAssociatedTypeWitness();
        uint64_t v35 = _arrayForceCast<A, B>(_:)();
        swift_bridgeObjectRelease();
        (*(void (**)(char *, uint64_t))(v61 + 8))(v38, a5);
        goto LABEL_13;
      }
      swift_bridgeObjectRelease();
      uint64_t v21 = v63;
    }
    v24(v53, v52, a5);
    uint64_t v39 = v66;
    uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
    uint64_t v41 = v56;
    uint64_t v42 = Array.init<A>(_:)();
    uint64_t v43 = (void *)swift_allocObject();
    v43[2] = a4;
    v43[3] = a5;
    v43[4] = v39;
    v43[5] = v41;
    v43[6] = v57;
    v43[7] = AssociatedTypeWitness;
    uint64_t v71 = ZSearcher.init(pattern:by:)(v42, (uint64_t (*)(char *, char *))partial apply for implicit closure #3 in Collection<>.split<A>(separator:maxSplits:omittingEmptySubsequences:), (uint64_t)v43);
    unint64_t v72 = v44;
    uint64_t v73 = v45;
    uint64_t v74 = v46;
    Collection.split<A>(by:maxSplits:omittingEmptySubsequences:)((uint64_t)&v71, v65, v64 & 1, v15, WitnessTable, v54);
    swift_release();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_getAssociatedTypeWitness();
    swift_getWitnessTable();
    uint64_t v35 = Array.init<A>(_:)();
    a4 = v58;
    goto LABEL_16;
  }
  uint64_t v25 = v71;
  uint64_t v26 = v72;
  unint64_t v27 = String.subscript.getter();
  unint64_t v29 = v28;
  swift_bridgeObjectRelease();
  specialized StringProtocol<>._split(separator:maxSplits:omittingEmptySubsequences:)(v25, v26, v65, v64 & 1, v27, v29);
  swift_bridgeObjectRelease();
LABEL_6:
  swift_bridgeObjectRelease();
  swift_getAssociatedTypeWitness();
  uint64_t v35 = _arrayForceCast<A, B>(_:)();
  swift_bridgeObjectRelease();
  (*(void (**)(char *, uint64_t))(v61 + 8))(v22, a5);
LABEL_13:
  uint64_t v18 = v62;
  uint64_t v21 = v63;
LABEL_16:
  (*(void (**)(char *, uint64_t))(v18 + 8))(v21, a4);
  return v35;
}

uint64_t specialized StringProtocol<>._split(separator:maxSplits:omittingEmptySubsequences:)(uint64_t result, uint64_t a2, uint64_t a3, char a4, unint64_t a5, unint64_t a6)
{
  if (a6 >> 14 < a5 >> 14)
  {
    __break(1u);
  }
  else
  {
    uint64_t v6 = Substring.subscript.getter();
    unint64_t v8 = v7;
    uint64_t v41 = v10;
    uint64_t v42 = v9;
    unint64_t v11 = MEMORY[0x21050F500](0, 0xE000000000000000);
    unint64_t v13 = v12;
    uint64_t v15 = v14;
    uint64_t v17 = v16;
    uint64_t result = String.subscript.getter();
    if (v13 >> 14 >= v11 >> 14)
    {
      uint64_t v36 = v19;
      unint64_t v37 = result;
      unint64_t v21 = v18;
      uint64_t v22 = v20;
      uint64_t v23 = v15;
      unint64_t v38 = v11;
      uint64_t v24 = v17;
      uint64_t v25 = Substring.subscript.getter();
      uint64_t v27 = v26;
      unint64_t v39 = v8;
      unint64_t v40 = v6;
      uint64_t v29 = v28;
      uint64_t v31 = v30;
      swift_bridgeObjectRetain();
      v51[0] = v38;
      v51[1] = v13;
      v51[2] = v23;
      v51[3] = v24;
      v51[4] = v37;
      v51[5] = v21;
      v51[6] = v36;
      v51[7] = v22;
      v51[8] = specialized SubstringSearcher.State.init(text:pattern:)(v25, v27, v29, v31, v37, v21);
      v51[9] = v32;
      v51[10] = v33;
      char v52 = v34 & 1;
      specialized RangesCollection.init(base:searcher:)(v40, v39, v42, v41, (uint64_t)v51, (uint64_t)v45);
      v47[8] = v45[8];
      v47[9] = v45[9];
      v47[10] = v45[10];
      char v48 = v46;
      v47[4] = v45[4];
      v47[5] = v45[5];
      v47[6] = v45[6];
      v47[7] = v45[7];
      v47[0] = v45[0];
      v47[1] = v45[1];
      v47[2] = v45[2];
      v47[3] = v45[3];
      uint64_t v49 = a3;
      char v50 = a4 & 1;
      unint64_t v35 = specialized _copySequenceToContiguousArray<A>(_:)((unint64_t)v47);
      outlined release of RangesCollection<SubstringSearcher>((uint64_t)v45);
      return v35;
    }
  }
  __break(1u);
  return result;
}

uint64_t StringProtocol<>._split(separator:maxSplits:omittingEmptySubsequences:)(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  Collection.subscript.getter();
  unint64_t v5 = MEMORY[0x21050F500](0, 0xE000000000000000);
  unint64_t v7 = v6;
  uint64_t v9 = v8;
  uint64_t v11 = v10;
  uint64_t result = String.subscript.getter();
  if (v7 >> 14 < v5 >> 14)
  {
    __break(1u);
  }
  else
  {
    unint64_t v16 = result;
    uint64_t v31 = v14;
    unint64_t v32 = v13;
    uint64_t v17 = v15;
    uint64_t v18 = v11;
    uint64_t v19 = v9;
    uint64_t v33 = a3;
    uint64_t v20 = Substring.subscript.getter();
    uint64_t v22 = v21;
    uint64_t v24 = v23;
    uint64_t v26 = v25;
    swift_bridgeObjectRetain();
    v45[0] = v5;
    v45[1] = v7;
    v45[2] = v19;
    v45[3] = v18;
    v45[4] = v16;
    v45[5] = v32;
    v45[6] = v31;
    v45[7] = v17;
    v45[8] = specialized SubstringSearcher.State.init(text:pattern:)(v20, v22, v24, v26, v16, v32);
    v45[9] = v27;
    v45[10] = v28;
    char v46 = v29 & 1;
    specialized RangesCollection.init(base:searcher:)(v37, v38, v39, v40, (uint64_t)v45, (uint64_t)v35);
    v41[8] = v35[8];
    v41[9] = v35[9];
    v41[10] = v35[10];
    char v42 = v36;
    v41[4] = v35[4];
    v41[5] = v35[5];
    v41[6] = v35[6];
    v41[7] = v35[7];
    v41[0] = v35[0];
    v41[1] = v35[1];
    v41[2] = v35[2];
    v41[3] = v35[3];
    uint64_t v43 = v33;
    char v44 = a4 & 1;
    unint64_t v30 = specialized _copySequenceToContiguousArray<A>(_:)((unint64_t)v41);
    outlined release of RangesCollection<SubstringSearcher>((uint64_t)v35);
    return v30;
  }
  return result;
}

uint64_t specialized StringProtocol<>._split(separator:maxSplits:omittingEmptySubsequences:)(uint64_t result, unint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, char a6, unint64_t a7, unint64_t a8)
{
  if (a8 >> 14 < a7 >> 14)
  {
    __break(1u);
    goto LABEL_6;
  }
  unint64_t v9 = result;
  uint64_t v10 = Substring.subscript.getter();
  unint64_t v12 = v11;
  uint64_t v43 = v14;
  uint64_t v44 = v13;
  uint64_t result = MEMORY[0x21050F500](0, 0xE000000000000000);
  if (a2 >> 14 < v9 >> 14)
  {
LABEL_6:
    __break(1u);
    goto LABEL_7;
  }
  unint64_t v18 = result;
  unint64_t v19 = v15;
  uint64_t v20 = v17;
  uint64_t v21 = v16;
  uint64_t result = Substring.subscript.getter();
  if (v19 >> 14 >= v18 >> 14)
  {
    unint64_t v25 = result;
    uint64_t v39 = v23;
    unint64_t v40 = v22;
    uint64_t v26 = v24;
    uint64_t v27 = v20;
    uint64_t v28 = Substring.subscript.getter();
    uint64_t v30 = v29;
    unint64_t v41 = v12;
    unint64_t v42 = v10;
    uint64_t v32 = v31;
    uint64_t v34 = v33;
    swift_bridgeObjectRetain();
    v51[0] = v18;
    v51[1] = v19;
    v51[2] = v21;
    v51[3] = v27;
    v51[4] = v25;
    v51[5] = v40;
    v51[6] = v39;
    v51[7] = v26;
    v51[8] = specialized SubstringSearcher.State.init(text:pattern:)(v28, v30, v32, v34, v25, v40);
    v51[9] = v35;
    v51[10] = v36;
    char v52 = v37 & 1;
    specialized RangesCollection.init(base:searcher:)(v42, v41, v44, v43, (uint64_t)v51, (uint64_t)v53);
    v47[8] = v53[8];
    v47[9] = v53[9];
    v47[10] = v53[10];
    char v48 = v54;
    v47[4] = v53[4];
    v47[5] = v53[5];
    v47[6] = v53[6];
    v47[7] = v53[7];
    v47[0] = v53[0];
    v47[1] = v53[1];
    v47[2] = v53[2];
    v47[3] = v53[3];
    uint64_t v49 = a5;
    char v50 = a6 & 1;
    unint64_t v38 = specialized _copySequenceToContiguousArray<A>(_:)((unint64_t)v47);
    outlined release of RangesCollection<SubstringSearcher>((uint64_t)v53);
    return v38;
  }
LABEL_7:
  __break(1u);
  return result;
}

uint64_t StringProtocol<>._split(separator:maxSplits:omittingEmptySubsequences:)(unint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, char a6)
{
  Collection.subscript.getter();
  uint64_t result = MEMORY[0x21050F500](0, 0xE000000000000000);
  if (a2 >> 14 < a1 >> 14)
  {
    __break(1u);
  }
  else
  {
    unint64_t v12 = result;
    unint64_t v13 = v9;
    uint64_t v14 = v11;
    uint64_t v15 = v10;
    uint64_t result = Substring.subscript.getter();
    if (v13 >> 14 >= v12 >> 14)
    {
      unint64_t v19 = result;
      uint64_t v33 = v17;
      unint64_t v34 = v16;
      uint64_t v20 = v18;
      uint64_t v21 = v15;
      uint64_t v22 = Substring.subscript.getter();
      uint64_t v24 = v23;
      uint64_t v26 = v25;
      uint64_t v28 = v27;
      swift_bridgeObjectRetain();
      v51[0] = v12;
      v51[1] = v13;
      v51[2] = v21;
      v51[3] = v14;
      v51[4] = v19;
      v51[5] = v34;
      v51[6] = v33;
      v51[7] = v20;
      v51[8] = specialized SubstringSearcher.State.init(text:pattern:)(v22, v24, v26, v28, v19, v34);
      v51[9] = v29;
      v51[10] = v30;
      char v52 = v31 & 1;
      specialized RangesCollection.init(base:searcher:)(v37, *((unint64_t *)&v37 + 1), v38, *((uint64_t *)&v38 + 1), (uint64_t)v51, (uint64_t)v53);
      long long v45 = v53[8];
      long long v46 = v53[9];
      long long v47 = v53[10];
      char v48 = v54;
      long long v41 = v53[4];
      long long v42 = v53[5];
      long long v43 = v53[6];
      long long v44 = v53[7];
      long long v37 = v53[0];
      long long v38 = v53[1];
      long long v39 = v53[2];
      long long v40 = v53[3];
      uint64_t v49 = a5;
      char v50 = a6 & 1;
      unint64_t v32 = specialized _copySequenceToContiguousArray<A>(_:)((unint64_t)&v37);
      outlined release of RangesCollection<SubstringSearcher>((uint64_t)v53);
      return v32;
    }
  }
  __break(1u);
  return result;
}

char *BidirectionalCollection<>.split<A>(separator:maxSplits:omittingEmptySubsequences:)(char *a1, uint64_t a2, int a3, unint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v8 = v7;
  uint64_t v41 = a5;
  uint64_t v42 = a7;
  unint64_t v10 = a4;
  int v46 = a3;
  long long v44 = a1;
  uint64_t v12 = *(void *)(a4 - 8);
  MEMORY[0x270FA5388](a1);
  uint64_t v14 = (char *)v38 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v15 = swift_allocObject();
  *(void *)(v15 + 16) = MEMORY[0x263F8EE78];
  uint64_t v47 = swift_allocObject();
  unint64_t v16 = *(void *)(a6 + 8);
  long long v45 = (unint64_t *)(v47 + 16);
  dispatch thunk of Collection.startIndex.getter();
  (*(void (**)(char *, char *, unint64_t))(v12 + 16))(v14, v7, v10);
  uint64_t v43 = a2;
  if (a2 < 1)
  {
    (*(void (**)(char *, unint64_t))(v12 + 8))(v14, v10);
  }
  else
  {
    char v17 = dispatch thunk of Collection.isEmpty.getter();
    (*(void (**)(char *, unint64_t))(v12 + 8))(v14, v10);
    if ((v17 & 1) == 0)
    {
      unint64_t v40 = v16;
      long long v44 = v8;
      BidirectionalCollection<>._matches<A>(of:)(v41, v42, &v57);
      uint64_t v18 = v62;
      void v38[2] = v63;
      uint64_t v39 = v61;
      v38[0] = v65;
      v38[1] = v64;
      int8x16_t v48 = v57;
      long long v49 = v58;
      long long v50 = v59;
      uint64_t v51 = v60;
      uint64_t v52 = v61;
      uint64_t v53 = v62;
      uint64_t v54 = v63;
      uint64_t v55 = v64;
      uint64_t v56 = v65;
      swift_getAssociatedTypeWitness();
      uint64_t v19 = type metadata accessor for RegexMatchesCollection();
      RegexMatchesCollection.makeIterator()(v19, (uint64_t)v66);
      swift_release();
      swift_bridgeObjectRelease();
      outlined consume of Regex<A1.RegexOutput>.Match?<A><A1>(v39, v18);
      uint64_t v20 = type metadata accessor for RegexMatchesCollection.Iterator();
      RegexMatchesCollection.Iterator.next()(v20, (unint64_t *)&v57);
      uint64_t v21 = v57.i64[1];
      if (v57.i64[1])
      {
        uint64_t v22 = v57.i64[0];
        unint64_t v23 = *((void *)&v58 + 1);
        unint64_t v24 = v59;
        while ((appendSubsequence #1 <A><A1>(end:) in BidirectionalCollection<>.split<A>(separator:maxSplits:omittingEmptySubsequences:)(v23, v47, v46 & 1, v15) & 1) == 0|| *(void *)(*(void *)(v15 + 16) + 16) != v43)
        {
          *long long v45 = v24;
          outlined consume of Regex<A1.RegexOutput>.Match?<A><A1>(v22, v21);
          RegexMatchesCollection.Iterator.next()(v20, (unint64_t *)&v57);
          uint64_t v21 = v57.i64[1];
          uint64_t v22 = v57.i64[0];
          unint64_t v23 = *((void *)&v58 + 1);
          unint64_t v24 = v59;
          if (!v57.i64[1]) {
            goto LABEL_11;
          }
        }
        uint64_t v25 = v67;
        uint64_t v42 = v69;
        uint64_t v43 = v68;
        uint64_t v41 = v70;
        uint64_t v39 = v71;
        swift_release();
        swift_bridgeObjectRelease();
        outlined consume of Regex<A1.RegexOutput>.Match?<A><A1>(v25, v43);
        *long long v45 = v24;
        uint64_t v26 = v22;
        uint64_t v27 = v21;
      }
      else
      {
LABEL_11:
        uint64_t v29 = v67;
        uint64_t v30 = v68;
        uint64_t v22 = v70;
        swift_release();
        swift_bridgeObjectRelease();
        uint64_t v26 = v29;
        uint64_t v27 = v30;
      }
      outlined consume of Regex<A1.RegexOutput>.Match?<A><A1>(v26, v27);
      uint64_t v28 = v44;
      unint64_t v31 = *v45;
      unint64_t v32 = v40;
      dispatch thunk of Collection.endIndex.getter();
      unint64_t v33 = v31 >> 14;
      if (v31 >> 14 == v66[0] >> 14 && (v46 & 1) != 0)
      {
        uint64_t v28 = *(char **)(v15 + 16);
LABEL_20:
        swift_bridgeObjectRetain();
        swift_release();
        goto LABEL_21;
      }
      dispatch thunk of Collection.endIndex.getter();
      if (v33 > v66[0] >> 14)
      {
        __break(1u);
      }
      else
      {
        v57.i64[0] = v31;
        v57.i64[1] = v66[0];
        dispatch thunk of Collection.subscript.getter();
        unint64_t v33 = v66[0];
        unint64_t v10 = v66[1];
        unint64_t v32 = v66[2];
        uint64_t v22 = v66[3];
        uint64_t v28 = *(char **)(v15 + 16);
        if (swift_isUniquelyReferenced_nonNull_native())
        {
LABEL_17:
          unint64_t v35 = *((void *)v28 + 2);
          unint64_t v34 = *((void *)v28 + 3);
          if (v35 >= v34 >> 1) {
            uint64_t v28 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v34 > 1), v35 + 1, 1, v28);
          }
          *((void *)v28 + 2) = v35 + 1;
          uint64_t v36 = &v28[32 * v35];
          *((void *)v36 + 4) = v33;
          *((void *)v36 + 5) = v10;
          *((void *)v36 + 6) = v32;
          *((void *)v36 + 7) = v22;
          *(void *)(v15 + 16) = v28;
          goto LABEL_20;
        }
      }
      uint64_t v28 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *((void *)v28 + 2) + 1, 1, v28);
      goto LABEL_17;
    }
  }
  dispatch thunk of Collection.endIndex.getter();
  appendSubsequence #1 <A><A1>(end:) in BidirectionalCollection<>.split<A>(separator:maxSplits:omittingEmptySubsequences:)(v66[0], v47, v46 & 1, v15);
  uint64_t v28 = *(char **)(v15 + 16);
  swift_bridgeObjectRetain();
  swift_release();
LABEL_21:
  swift_release();
  return v28;
}

uint64_t appendSubsequence #1 <A><A1>(end:) in BidirectionalCollection<>.split<A>(separator:maxSplits:omittingEmptySubsequences:)(unint64_t a1, uint64_t a2, unsigned __int8 a3, uint64_t a4)
{
  unint64_t v10 = *(void *)(a2 + 16) >> 14;
  int v11 = (v10 == a1 >> 14) & a3;
  if (v11) {
    return v11 ^ 1u;
  }
  if (a1 >> 14 < v10)
  {
    __break(1u);
    goto LABEL_9;
  }
  uint64_t v4 = a4;
  dispatch thunk of Collection.subscript.getter();
  uint64_t v6 = v17;
  uint64_t v7 = v18;
  uint64_t v8 = v19;
  uint64_t v9 = v20;
  unint64_t v5 = *(char **)(v4 + 16);
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  *(void *)(v4 + 16) = v5;
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
  {
LABEL_9:
    unint64_t v5 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *((void *)v5 + 2) + 1, 1, v5);
    *(void *)(v4 + 16) = v5;
  }
  unint64_t v14 = *((void *)v5 + 2);
  unint64_t v13 = *((void *)v5 + 3);
  if (v14 >= v13 >> 1)
  {
    unint64_t v5 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v13 > 1), v14 + 1, 1, v5);
    *(void *)(v4 + 16) = v5;
  }
  *((void *)v5 + 2) = v14 + 1;
  uint64_t v15 = &v5[32 * v14];
  *((void *)v15 + 4) = v6;
  *((void *)v15 + 5) = v7;
  *((void *)v15 + 6) = v8;
  *((void *)v15 + 7) = v9;
  return v11 ^ 1u;
}

uint64_t BidirectionalCollection<>._matches<A>(of:)@<X0>(uint64_t a1@<X2>, uint64_t a2@<X4>, int8x16_t *a3@<X8>)
{
  Collection.subscript.getter();
  unint64_t v6 = v13[3];
  dispatch thunk of Collection.startIndex.getter();
  uint64_t v7 = v13[0];
  uint64_t result = dispatch thunk of Collection.endIndex.getter();
  if (v12 >> 14 < (unint64_t)v13[0] >> 14)
  {
    __break(1u);
    __break(1u);
  }
  else
  {
    uint64_t v11 = v13[4];
    dispatch thunk of Collection.startIndex.getter();
    unint64_t v9 = v13[0];
    dispatch thunk of Collection.endIndex.getter();
    (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t))(a2 + 16))(v13, a1, a2);
    uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
    return RegexMatchesCollection.init(input:subjectBounds:searchBounds:regex:)(v6, v11, v7, v12, v9, v12, v13, AssociatedTypeWitness, a3);
  }
  return result;
}

uint64_t BidirectionalCollection<>.starts<A>(with:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  Collection.subscript.getter();
  unint64_t v7 = v13;
  unint64_t v8 = v14;
  uint64_t v10 = v15;
  uint64_t v9 = v16;
  (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t))(a5 + 16))(&v12, a3, a5);
  swift_getAssociatedTypeWitness();
  type metadata accessor for Regex();
  Regex.prefixMatch(in:)(v7, v8, v10, v9, (uint64_t)&v13);
  swift_bridgeObjectRelease();
  swift_release();
  if (!v14) {
    return 0;
  }
  outlined consume of Regex<A1.RegexOutput>.Match?<A><A1>(v13, v14);
  return 1;
}

unint64_t Regex.prefixMatch(in:)@<X0>(unint64_t a1@<X0>, unint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  return Regex.prefixMatch(in:)(a1, a2, a3, a4, 1, a5);
}

unint64_t SubstringSearcher.nextRangeNaive(in:searchFromEnd:)@<X0>(unint64_t result@<X0>, unint64_t a2@<X1>, uint64_t a3@<X8>)
{
  if (*(uint64_t *)(v3 + 72) < 1)
  {
LABEL_37:
    __break(1u);
LABEL_38:
    __break(1u);
  }
  else
  {
    unint64_t v5 = result;
    unint64_t v6 = *(void *)(v3 + 32);
    unint64_t v7 = Substring.index(before:)();
    if (a2 >> 14 >= (unint64_t)Substring.index(before:)() >> 14)
    {
      unint64_t v41 = v5 >> 14;
      unint64_t v44 = v6 >> 14;
      unint64_t v40 = v7 >> 14;
      while (1)
      {
        unint64_t v8 = Substring.subscript.getter();
        unint64_t v10 = v9;
        uint64_t v11 = Substring.subscript.getter();
        uint64_t v13 = v12;
        unint64_t v14 = v8;
        unint64_t v15 = v8 >> 14;
        if (v15 == v10 >> 14) {
          goto LABEL_31;
        }
        unint64_t v43 = v14;
        if (Substring.subscript.getter() == v11 && v16 == v13)
        {
LABEL_7:
          swift_bridgeObjectRelease();
        }
        else
        {
          char v17 = _stringCompareWithSmolCheck(_:_:expecting:)();
          swift_bridgeObjectRelease();
          if ((v17 & 1) == 0)
          {
            uint64_t v42 = v13;
            while (1)
            {
              unint64_t v19 = Substring.index(after:)();
              unint64_t v15 = v19 >> 14;
              if (v19 >> 14 == v10 >> 14) {
                goto LABEL_31;
              }
              unint64_t v20 = v19;
              if (Substring.subscript.getter() == v11 && v21 == v42)
              {
                unint64_t v43 = v20;
                goto LABEL_7;
              }
              char v18 = _stringCompareWithSmolCheck(_:_:expecting:)();
              swift_bridgeObjectRelease();
              if (v18)
              {
                unint64_t v43 = v20;
                break;
              }
            }
          }
        }
        swift_bridgeObjectRelease();
        uint64_t result = swift_bridgeObjectRelease();
        if (v15 < v41)
        {
          __break(1u);
          goto LABEL_37;
        }
        if (v44 >= v40) {
          break;
        }
        unint64_t v22 = Substring.index(before:)();
        unint64_t v23 = Substring.index(before:)();
        uint64_t v24 = Substring.subscript.getter();
        uint64_t v26 = v25;
        if (v24 == Substring.subscript.getter() && v26 == v27)
        {
          swift_bridgeObjectRelease_n();
LABEL_22:
          if (v44 < v22 >> 14)
          {
            do
            {
              unint64_t v30 = Substring.index(before:)();
              unint64_t v23 = Substring.index(before:)();
              uint64_t v31 = Substring.subscript.getter();
              uint64_t v33 = v32;
              if (v31 == Substring.subscript.getter() && v33 == v34)
              {
                swift_bridgeObjectRelease_n();
              }
              else
              {
                char v29 = _stringCompareWithSmolCheck(_:_:expecting:)();
                swift_bridgeObjectRelease();
                swift_bridgeObjectRelease();
                if ((v29 & 1) == 0) {
                  goto LABEL_29;
                }
              }
            }
            while (v44 < v30 >> 14);
          }
LABEL_33:
          uint64_t result = Substring.index(after:)();
          if (result >> 14 < v23 >> 14) {
            goto LABEL_38;
          }
          unint64_t v35 = result;
          uint64_t result = Substring.index(_:offsetBy:limitedBy:)();
          char v36 = 0;
          char v37 = v38 & 1;
          goto LABEL_35;
        }
        char v28 = _stringCompareWithSmolCheck(_:_:expecting:)();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        if (v28) {
          goto LABEL_22;
        }
LABEL_29:
        if (a2 >> 14 < (unint64_t)Substring.index(after:)() >> 14) {
          goto LABEL_30;
        }
      }
      unint64_t v23 = v43;
      goto LABEL_33;
    }
LABEL_30:
    __break(1u);
LABEL_31:
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    unint64_t v23 = 0;
    unint64_t v35 = 0;
    uint64_t result = 0;
    char v36 = 1;
    char v37 = 1;
LABEL_35:
    *(void *)a3 = v23;
    *(void *)(a3 + 8) = v35;
    *(unsigned char *)(a3 + 16) = v36;
    *(void *)(a3 + 24) = result;
    *(unsigned char *)(a3 + 32) = v37;
  }
  return result;
}

unint64_t SubstringSearcher.nextRange(in:searchFromEnd:)@<X0>(unint64_t result@<X0>, unint64_t a2@<X1>, unint64_t a3@<X4>, uint64_t a4@<X8>)
{
  unint64_t v5 = a3;
  uint64_t v6 = a4;
  uint64_t v7 = *(void *)(v4 + 72);
  if (!v7)
  {
    if ((a3 ^ a2) >= 0x4000)
    {
      uint64_t result = Substring.index(after:)();
      unint64_t v12 = result;
      char v37 = 0;
      char v38 = 0;
    }
    else
    {
      char v37 = 0;
      unint64_t v12 = 0;
      char v38 = 1;
    }
    unint64_t v36 = v5;
    goto LABEL_44;
  }
  uint64_t v8 = v4;
  uint64_t v9 = *(void *)(v4 + 64);
  if (!*(void *)(v9 + 16))
  {
    uint64_t result = SubstringSearcher.nextRangeNaive(in:searchFromEnd:)(result, a2, (uint64_t)v49);
    unint64_t v5 = v49[0];
    unint64_t v36 = v49[1];
    char v37 = v50;
    unint64_t v12 = v51;
    char v38 = v52;
LABEL_44:
    *(void *)uint64_t v6 = v5;
    *(void *)(v6 + 8) = v36;
    *(unsigned char *)(v6 + 16) = v37;
    *(void *)(v6 + 24) = v12;
    *(unsigned char *)(v6 + 32) = v38;
    return result;
  }
  if (__OFSUB__(v7, 1)) {
    goto LABEL_49;
  }
  uint64_t v10 = *(void *)(v8 + 48);
  unint64_t v48 = *(void *)(v8 + 32) >> 14;
  uint64_t v43 = v7 - 1;
  uint64_t v44 = v9;
  uint64_t v41 = v7 - 2;
  BOOL v11 = __OFSUB__(v7 - 1, 1);
  BOOL v42 = v11;
  unint64_t v47 = result >> 14;
  unint64_t v12 = a3;
  uint64_t v46 = *(void *)(v8 + 48);
  while (1)
  {
    unint64_t v5 = Substring.index(before:)();
    unint64_t v13 = (unint64_t)Substring.index(before:)() >> 14;
    unint64_t v45 = v12;
    if (v13 >= v48) {
      break;
    }
    uint64_t v14 = v43;
LABEL_29:
    uint64_t v30 = Substring.subscript.getter();
    if (*(void *)(v44 + 16) && (unint64_t v32 = specialized __RawDictionaryStorage.find<A>(_:)(v30, v31), (v33 & 1) != 0)) {
      uint64_t v34 = *(void *)(*(void *)(v44 + 56) + 8 * v32);
    }
    else {
      uint64_t v34 = 0;
    }
    uint64_t result = swift_bridgeObjectRelease();
    if (__OFSUB__(v14, v34)) {
      goto LABEL_47;
    }
    uint64_t result = Substring.index(_:offsetBy:limitedBy:)();
    unint64_t v12 = result;
    if (v35)
    {
      unint64_t v5 = 0;
      unint64_t v36 = 0;
      char v37 = 1;
      char v38 = 1;
LABEL_40:
      uint64_t v6 = a4;
      goto LABEL_44;
    }
  }
  uint64_t v15 = Substring.subscript.getter();
  uint64_t v17 = v16;
  if (v15 != Substring.subscript.getter() || v17 != v18)
  {
    char v19 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    uint64_t result = swift_bridgeObjectRelease();
    if (v19) {
      goto LABEL_14;
    }
    uint64_t v14 = v43;
    goto LABEL_29;
  }
  uint64_t result = swift_bridgeObjectRelease_n();
LABEL_14:
  if (!v42)
  {
    uint64_t v14 = v41;
    if (v13 == v48)
    {
LABEL_38:
      if (v45 >> 14 < v5 >> 14) {
        goto LABEL_50;
      }
      uint64_t result = Substring.index(_:offsetBy:limitedBy:)();
      char v37 = 0;
      unint64_t v12 = result;
      unint64_t v36 = v45;
      char v38 = v39 & 1;
      goto LABEL_40;
    }
    while (v47 < v5 >> 14)
    {
      unint64_t v5 = Substring.index(before:)();
      unint64_t v20 = Substring.index(before:)();
      uint64_t v21 = v10;
      unint64_t v22 = v20 >> 14;
      if (v20 >> 14 < v48)
      {
        uint64_t v10 = v21;
        goto LABEL_29;
      }
      uint64_t v23 = Substring.subscript.getter();
      uint64_t v25 = v24;
      if (v23 == Substring.subscript.getter() && v25 == v26)
      {
        uint64_t result = swift_bridgeObjectRelease_n();
      }
      else
      {
        char v27 = _stringCompareWithSmolCheck(_:_:expecting:)();
        swift_bridgeObjectRelease();
        uint64_t result = swift_bridgeObjectRelease();
        if ((v27 & 1) == 0)
        {
          uint64_t v10 = v46;
          goto LABEL_29;
        }
      }
      if (__OFSUB__(v14--, 1)) {
        goto LABEL_46;
      }
      BOOL v29 = v22 == v48;
      uint64_t v10 = v46;
      if (v29) {
        goto LABEL_38;
      }
    }
    __break(1u);
LABEL_46:
    __break(1u);
LABEL_47:
    __break(1u);
  }
  __break(1u);
LABEL_49:
  __break(1u);
LABEL_50:
  __break(1u);
  return result;
}

__n128 protocol witness for Sequence.makeIterator() in conformance SubstringSearcher@<Q0>(uint64_t a1@<X8>)
{
  uint64_t v2 = *(void *)(v1 + 16);
  uint64_t v3 = *(void *)(v1 + 24);
  uint64_t v4 = *(void *)(v1 + 48);
  char v5 = *(unsigned char *)(v1 + 88);
  *(_OWORD *)a1 = *(_OWORD *)v1;
  *(void *)(a1 + 16) = v2;
  *(void *)(a1 + 24) = v3;
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(v1 + 32);
  *(void *)(a1 + 48) = v4;
  *(_OWORD *)(a1 + 56) = *(_OWORD *)(v1 + 56);
  __n128 result = *(__n128 *)(v1 + 72);
  *(__n128 *)(a1 + 72) = result;
  *(unsigned char *)(a1 + 88) = v5;
  return result;
}

unint64_t protocol witness for Sequence._copyToContiguousArray() in conformance SubstringSearcher()
{
  long long v1 = v0[3];
  _OWORD v5[2] = v0[2];
  v5[3] = v1;
  v6[0] = v0[4];
  *(_OWORD *)((char *)v6 + 9) = *(_OWORD *)((char *)v0 + 73);
  long long v2 = v0[1];
  v5[0] = *v0;
  v5[1] = v2;
  unint64_t v3 = specialized _copySequenceToContiguousArray<A>(_:)((uint64_t)v5);
  outlined release of SubstringSearcher((uint64_t)v5);
  return v3;
}

_OWORD *protocol witness for Sequence._copyContents(initializing:) in conformance SubstringSearcher(_OWORD *a1, uint64_t a2, uint64_t a3)
{
  return specialized Sequence._copySequenceContents(initializing:)(a1, a2, a3);
}

unint64_t protocol witness for IteratorProtocol.next() in conformance SubstringSearcher@<X0>(uint64_t a1@<X8>)
{
  if (*(unsigned char *)(v1 + 88))
  {
    long long v3 = 0uLL;
    char v4 = 1;
  }
  else
  {
    unint64_t v5 = *(void *)(v1 + 8);
    uint64_t v6 = *(void *)(v1 + 16);
    uint64_t v7 = *(void *)(v1 + 24);
    uint64_t v8 = *(void *)(v1 + 48);
    uint64_t v10 = *(void *)(v1 + 72);
    unint64_t v9 = *(void *)(v1 + 80);
    unint64_t v17 = *(void *)v1;
    unint64_t v18 = v5;
    uint64_t v19 = v6;
    uint64_t v20 = v7;
    long long v21 = *(_OWORD *)(v1 + 32);
    uint64_t v22 = v8;
    long long v23 = *(_OWORD *)(v1 + 56);
    uint64_t v24 = v10;
    unint64_t v25 = v9;
    char v26 = 0;
    unint64_t result = SubstringSearcher.nextRange(in:searchFromEnd:)(v17, v5, v9, (uint64_t)&v13);
    long long v3 = v13;
    char v4 = v14;
    char v12 = v16;
    *(void *)(v1 + 80) = v15;
    *(unsigned char *)(v1 + 88) = v12;
  }
  *(_OWORD *)a1 = v3;
  *(unsigned char *)(a1 + 16) = v4;
  return result;
}

uint64_t protocol witness for CollectionSearcher.state(for:in:) in conformance SubstringSearcher@<X0>(uint64_t a1@<X8>)
{
  unint64_t v3 = *(void *)(v1 + 32);
  unint64_t v4 = *(void *)(v1 + 40);
  uint64_t v5 = Substring.subscript.getter();
  uint64_t v7 = v6;
  uint64_t v9 = v8;
  uint64_t v11 = v10;
  swift_bridgeObjectRetain();
  uint64_t result = specialized SubstringSearcher.State.init(text:pattern:)(v5, v7, v9, v11, v3, v4);
  *(void *)a1 = result;
  *(void *)(a1 + 8) = v13;
  *(void *)(a1 + 16) = v14;
  *(unsigned char *)(a1 + 24) = v15 & 1;
  return result;
}

unint64_t *protocol witness for CollectionSearcher.search(_:_:) in conformance SubstringSearcher@<X0>(unint64_t *result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  if (*(unsigned char *)(a2 + 24))
  {
    long long v4 = 0uLL;
    char v5 = 1;
  }
  else
  {
    uint64_t result = (unint64_t *)SubstringSearcher.nextRange(in:searchFromEnd:)(*result, result[1], *(void *)(a2 + 16), (uint64_t)&v8);
    long long v4 = v8;
    char v5 = v9;
    char v7 = v11;
    *(void *)(a2 + 16) = v10;
    *(unsigned char *)(a2 + 24) = v7;
  }
  *(_OWORD *)a3 = v4;
  *(unsigned char *)(a3 + 16) = v5;
  return result;
}

uint64_t Collection._trimmingPrefix<A>(_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v6 = v5;
  uint64_t v34 = a4;
  uint64_t v35 = a1;
  uint64_t v33 = a5;
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v37 = AssociatedConformanceWitness;
  uint64_t v36 = swift_getAssociatedConformanceWitness();
  uint64_t v11 = type metadata accessor for PartialRangeFrom();
  uint64_t v31 = *(void *)(v11 - 8);
  uint64_t v32 = v11;
  uint64_t v12 = MEMORY[0x270FA5388](v11);
  uint64_t v14 = (char *)&v28 - v13;
  uint64_t v15 = *(void *)(a2 - 8);
  MEMORY[0x270FA5388](v12);
  unint64_t v17 = (char *)&v28 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v18 = type metadata accessor for Optional();
  uint64_t v29 = *(void *)(v18 - 8);
  uint64_t v30 = v18;
  uint64_t v19 = MEMORY[0x270FA5388](v18);
  long long v21 = (char *)&v28 - v20;
  uint64_t v22 = *(void *)(AssociatedTypeWitness - 8);
  MEMORY[0x270FA5388](v19);
  uint64_t v24 = (char *)&v28 - v23;
  CollectionConsumer.consuming(_:)(v6, a3, v34, (uint64_t)v21);
  unint64_t v25 = *(void (**)(char *, uint64_t, uint64_t))(v15 + 16);
  uint64_t v35 = v6;
  v25(v17, v6, a2);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v22 + 48))(v21, 1, AssociatedTypeWitness) == 1)
  {
    dispatch thunk of Collection.startIndex.getter();
    (*(void (**)(char *, uint64_t))(v15 + 8))(v17, a2);
    (*(void (**)(char *, uint64_t))(v29 + 8))(v21, v30);
  }
  else
  {
    (*(void (**)(char *, uint64_t))(v15 + 8))(v17, a2);
    (*(void (**)(char *, char *, uint64_t))(v22 + 32))(v24, v21, AssociatedTypeWitness);
  }
  uint64_t result = dispatch thunk of static Equatable.== infix(_:_:)();
  if (result)
  {
    (*(void (**)(char *, char *, uint64_t))(v22 + 32))(v14, v24, AssociatedTypeWitness);
    uint64_t v27 = v32;
    swift_getWitnessTable();
    Collection.subscript.getter();
    return (*(uint64_t (**)(char *, uint64_t))(v31 + 8))(v14, v27);
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t CollectionConsumer.consuming(_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v42 = a4;
  swift_getAssociatedTypeWitness();
  uint64_t v45 = a3;
  uint64_t v44 = a2;
  swift_getAssociatedConformanceWitness();
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
  uint64_t v8 = MEMORY[0x270FA5388](TupleTypeMetadata2);
  unint64_t v40 = (char *)&v36 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = MEMORY[0x270FA5388](v8);
  uint64_t v12 = (char *)&v36 - v11;
  uint64_t v39 = *(void *)(AssociatedTypeWitness - 8);
  uint64_t v13 = MEMORY[0x270FA5388](v10);
  uint64_t v15 = (char *)&v36 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v13);
  unint64_t v17 = (char *)&v36 - v16;
  swift_getAssociatedConformanceWitness();
  uint64_t v18 = type metadata accessor for Range();
  uint64_t v41 = *(void *)(v18 - 8);
  uint64_t v19 = MEMORY[0x270FA5388](v18);
  uint64_t v37 = (char *)&v36 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v19);
  char v38 = (char *)&v36 - v21;
  swift_checkMetadataState();
  dispatch thunk of Collection.startIndex.getter();
  uint64_t v43 = a1;
  dispatch thunk of Collection.endIndex.getter();
  uint64_t result = dispatch thunk of static Comparable.<= infix(_:_:)();
  if (result)
  {
    uint64_t v36 = v18;
    uint64_t v23 = TupleTypeMetadata2;
    uint64_t v24 = &v12[*(int *)(TupleTypeMetadata2 + 48)];
    uint64_t v25 = v39;
    char v26 = *(void (**)(char *, char *, uint64_t))(v39 + 32);
    v26(v12, v17, AssociatedTypeWitness);
    v26(v24, v15, AssociatedTypeWitness);
    uint64_t v27 = v40;
    uint64_t v28 = &v40[*(int *)(v23 + 48)];
    uint64_t v29 = *(void (**)(char *, char *, uint64_t))(v25 + 16);
    v29(v40, v12, AssociatedTypeWitness);
    v29(v28, v24, AssociatedTypeWitness);
    uint64_t v30 = v37;
    v26(v37, v27, AssociatedTypeWitness);
    uint64_t v31 = *(void (**)(char *, uint64_t))(v25 + 8);
    v31(v28, AssociatedTypeWitness);
    uint64_t v32 = &v27[*(int *)(TupleTypeMetadata2 + 48)];
    v26(v27, v12, AssociatedTypeWitness);
    v26(v32, v24, AssociatedTypeWitness);
    uint64_t v33 = v36;
    v26(&v30[*(int *)(v36 + 36)], v32, AssociatedTypeWitness);
    v31(v27, AssociatedTypeWitness);
    uint64_t v34 = v41;
    uint64_t v35 = v38;
    (*(void (**)(char *, char *, uint64_t))(v41 + 32))(v38, v30, v33);
    (*(void (**)(uint64_t, char *, uint64_t))(v45 + 24))(v43, v35, v44);
    return (*(uint64_t (**)(char *, uint64_t))(v34 + 8))(v35, v33);
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t CollectionConsumer.consume<>(_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v34 = *(void *)(AssociatedTypeWitness - 8);
  MEMORY[0x270FA5388](AssociatedTypeWitness);
  uint64_t v33 = (char *)&v28 - v7;
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  uint64_t v9 = swift_getAssociatedTypeWitness();
  uint64_t v32 = AssociatedConformanceWitness;
  uint64_t v36 = swift_getAssociatedConformanceWitness();
  uint64_t v10 = type metadata accessor for PartialRangeFrom();
  uint64_t v30 = *(void *)(v10 - 8);
  uint64_t v31 = v10;
  MEMORY[0x270FA5388](v10);
  uint64_t v29 = (char *)&v28 - v11;
  uint64_t v12 = type metadata accessor for Optional();
  uint64_t v13 = *(void *)(v12 - 8);
  uint64_t v14 = MEMORY[0x270FA5388](v12);
  uint64_t v16 = (char *)&v28 - v15;
  uint64_t v17 = *(void *)(v9 - 8);
  MEMORY[0x270FA5388](v14);
  uint64_t v19 = (char *)&v28 - v18;
  uint64_t v35 = a1;
  CollectionConsumer.consuming(_:)(a1, a2, a3, (uint64_t)v16);
  int v20 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v17 + 48))(v16, 1, v9);
  if (v20 == 1)
  {
    (*(void (**)(char *, uint64_t))(v13 + 8))(v16, v12);
    return v20 != 1;
  }
  uint64_t v21 = *(void (**)(char *, char *, uint64_t))(v17 + 32);
  v21(v19, v16, v9);
  uint64_t result = dispatch thunk of static Equatable.== infix(_:_:)();
  if (result)
  {
    uint64_t v23 = v29;
    v21(v29, v19, v9);
    uint64_t v24 = v31;
    swift_getWitnessTable();
    uint64_t v25 = v33;
    uint64_t v26 = v35;
    Collection.subscript.getter();
    uint64_t v27 = v34;
    (*(void (**)(uint64_t, uint64_t))(v34 + 8))(v26, AssociatedTypeWitness);
    (*(void (**)(char *, uint64_t))(v30 + 8))(v23, v24);
    (*(void (**)(uint64_t, char *, uint64_t))(v27 + 32))(v26, v25, AssociatedTypeWitness);
    return v20 != 1;
  }
  __break(1u);
  return result;
}

uint64_t RangeReplaceableCollection._trimPrefix<A>(_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v27 = a1;
  uint64_t v28 = a5;
  uint64_t v26 = a3;
  uint64_t v24 = a4;
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v23 = a2;
  swift_getAssociatedConformanceWitness();
  uint64_t v8 = type metadata accessor for PartialRangeUpTo();
  uint64_t v22 = *(void *)(v8 - 8);
  MEMORY[0x270FA5388](v8);
  uint64_t v10 = (char *)&v21 - v9;
  uint64_t v11 = type metadata accessor for Optional();
  uint64_t v12 = *(void *)(v11 - 8);
  uint64_t v13 = MEMORY[0x270FA5388](v11);
  uint64_t v15 = (char *)&v21 - v14;
  uint64_t v16 = *(void *)(AssociatedTypeWitness - 8);
  MEMORY[0x270FA5388](v13);
  uint64_t v18 = (char *)&v21 - v17;
  uint64_t v25 = v5;
  CollectionConsumer.consuming(_:)(v5, v26, v28, (uint64_t)v15);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v16 + 48))(v15, 1, AssociatedTypeWitness) == 1) {
    return (*(uint64_t (**)(char *, uint64_t))(v12 + 8))(v15, v11);
  }
  int v20 = *(void (**)(char *, char *, uint64_t))(v16 + 32);
  v20(v18, v15, AssociatedTypeWitness);
  uint64_t result = dispatch thunk of static Equatable.== infix(_:_:)();
  if (result)
  {
    v20(v10, v18, AssociatedTypeWitness);
    swift_getWitnessTable();
    RangeReplaceableCollection.removeSubrange<A>(_:)();
    return (*(uint64_t (**)(char *, uint64_t))(v22 + 8))(v10, v8);
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t Collection.endOfPrefix(while:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v23 = a5;
  uint64_t v29 = *(void *)(a3 - 8);
  MEMORY[0x270FA5388](a1);
  uint64_t v24 = (char *)&v21 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v13 = type metadata accessor for Optional();
  uint64_t v22 = *(void *)(v13 - 8);
  MEMORY[0x270FA5388](v13);
  uint64_t v15 = (char *)&v21 - v14;
  uint64_t v25 = a3;
  uint64_t v26 = a4;
  uint64_t v27 = a1;
  uint64_t v28 = a2;
  uint64_t result = Collection.firstIndex(where:)();
  if (!v6)
  {
    uint64_t v21 = v13;
    uint64_t v18 = v23;
    uint64_t v17 = v24;
    uint64_t v19 = v29;
    (*(void (**)(char *, uint64_t, uint64_t))(v29 + 16))(v24, v5, a3);
    uint64_t v20 = *(void *)(AssociatedTypeWitness - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v20 + 48))(v15, 1, AssociatedTypeWitness) == 1)
    {
      dispatch thunk of Collection.endIndex.getter();
      (*(void (**)(char *, uint64_t))(v19 + 8))(v17, a3);
      return (*(uint64_t (**)(char *, uint64_t))(v22 + 8))(v15, v21);
    }
    else
    {
      (*(void (**)(char *, uint64_t))(v19 + 8))(v17, a3);
      return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v20 + 32))(v18, v15, AssociatedTypeWitness);
    }
  }
  return result;
}

uint64_t Collection.trimmingPrefix(while:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v20 = a5;
  uint64_t v21 = a2;
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  uint64_t v10 = type metadata accessor for PartialRangeFrom();
  uint64_t v19 = *(void *)(v10 - 8);
  uint64_t v11 = MEMORY[0x270FA5388](v10);
  uint64_t v13 = (char *)&v18 - v12;
  uint64_t v18 = *(void *)(AssociatedTypeWitness - 8);
  MEMORY[0x270FA5388](v11);
  uint64_t v15 = (char *)&v18 - v14;
  uint64_t v16 = v22;
  uint64_t result = Collection.endOfPrefix(while:)(a1, v21, a3, a4, (uint64_t)&v18 - v14);
  if (!v16)
  {
    uint64_t v22 = v5;
    uint64_t result = dispatch thunk of static Equatable.== infix(_:_:)();
    if (result)
    {
      (*(void (**)(char *, char *, uint64_t))(v18 + 32))(v13, v15, AssociatedTypeWitness);
      swift_getWitnessTable();
      Collection.subscript.getter();
      return (*(uint64_t (**)(char *, uint64_t))(v19 + 8))(v13, v10);
    }
    else
    {
      __break(1u);
    }
  }
  return result;
}

uint64_t Collection<>.trimPrefix(while:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v30 = a2;
  uint64_t v28 = *(void *)(a3 - 8);
  MEMORY[0x270FA5388](a1);
  uint64_t v27 = (char *)&v25 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  uint64_t v10 = type metadata accessor for PartialRangeFrom();
  uint64_t v26 = *(void *)(v10 - 8);
  uint64_t v11 = MEMORY[0x270FA5388](v10);
  uint64_t v13 = (char *)&v25 - v12;
  uint64_t v29 = *(void *)(AssociatedTypeWitness - 8);
  MEMORY[0x270FA5388](v11);
  uint64_t v15 = (char *)&v25 - v14;
  uint64_t v16 = v31;
  uint64_t result = Collection.endOfPrefix(while:)(a1, v30, a3, a4, (uint64_t)&v25 - v14);
  if (!v16)
  {
    uint64_t v30 = a4;
    uint64_t v18 = v29;
    uint64_t v31 = v4;
    uint64_t result = dispatch thunk of static Equatable.== infix(_:_:)();
    if (result)
    {
      uint64_t v19 = *(void (**)(char *, char *, uint64_t))(v18 + 32);
      uint64_t v20 = v13;
      v19(v13, v15, AssociatedTypeWitness);
      uint64_t v21 = v10;
      swift_getWitnessTable();
      uint64_t v22 = v27;
      uint64_t v23 = v31;
      Collection.subscript.getter();
      uint64_t v24 = v28;
      (*(void (**)(uint64_t, uint64_t))(v28 + 8))(v23, a3);
      (*(void (**)(char *, uint64_t))(v26 + 8))(v20, v21);
      return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v24 + 32))(v23, v22, a3);
    }
    else
    {
      __break(1u);
    }
  }
  return result;
}

uint64_t RangeReplaceableCollection.trimPrefix(while:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v49 = a2;
  uint64_t v48 = a1;
  uint64_t v45 = a4;
  uint64_t v6 = *(void *)(a4 + 8);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
  uint64_t v8 = MEMORY[0x270FA5388](TupleTypeMetadata2);
  uint64_t v43 = (char *)&v39 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v8);
  unint64_t v51 = (char *)&v39 - v10;
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  uint64_t v11 = type metadata accessor for Range();
  uint64_t v44 = *(void *)(v11 - 8);
  uint64_t v12 = MEMORY[0x270FA5388](v11);
  uint64_t v14 = (char *)&v39 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v15 = MEMORY[0x270FA5388](v12);
  uint64_t v17 = (char *)&v39 - v16;
  uint64_t v42 = *(void *)(AssociatedTypeWitness - 8);
  uint64_t v18 = MEMORY[0x270FA5388](v15);
  MEMORY[0x270FA5388](v18);
  uint64_t v20 = (char *)&v39 - v19;
  uint64_t v21 = v48;
  uint64_t v22 = v49;
  uint64_t v48 = a3;
  uint64_t v49 = v4;
  uint64_t v23 = v50;
  uint64_t result = Collection.endOfPrefix(while:)(v21, v22, a3, v6, (uint64_t)&v39 - v19);
  if (!v23)
  {
    uint64_t v39 = 0;
    unint64_t v40 = v14;
    uint64_t v41 = v17;
    uint64_t v25 = TupleTypeMetadata2;
    uint64_t v50 = v11;
    dispatch thunk of Collection.startIndex.getter();
    uint64_t result = dispatch thunk of static Comparable.<= infix(_:_:)();
    if (result)
    {
      uint64_t v26 = &v51[*(int *)(v25 + 48)];
      uint64_t v27 = v42;
      uint64_t v28 = *(void (**)(void))(v42 + 32);
      v28();
      uint64_t v29 = v26;
      uint64_t AssociatedConformanceWitness = (uint64_t)v26;
      ((void (*)(char *, char *, uint64_t))v28)(v26, v20, AssociatedTypeWitness);
      uint64_t v30 = *(int *)(v25 + 48);
      uint64_t v31 = v43;
      uint64_t v32 = &v43[v30];
      uint64_t v33 = *(void (**)(char *, char *, uint64_t))(v27 + 16);
      v33(v43, v51, AssociatedTypeWitness);
      v33(v32, v29, AssociatedTypeWitness);
      uint64_t v34 = v40;
      ((void (*)(char *, char *, uint64_t))v28)(v40, v31, AssociatedTypeWitness);
      uint64_t v42 = *(void *)(v27 + 8);
      ((void (*)(char *, uint64_t))v42)(v32, AssociatedTypeWitness);
      uint64_t v35 = &v31[*(int *)(TupleTypeMetadata2 + 48)];
      ((void (*)(char *, char *, uint64_t))v28)(v31, v51, AssociatedTypeWitness);
      ((void (*)(char *, uint64_t, uint64_t))v28)(v35, AssociatedConformanceWitness, AssociatedTypeWitness);
      uint64_t v36 = v50;
      ((void (*)(char *, char *, uint64_t))v28)(&v34[*(int *)(v50 + 36)], v35, AssociatedTypeWitness);
      ((void (*)(char *, uint64_t))v42)(v31, AssociatedTypeWitness);
      uint64_t v37 = v44;
      char v38 = v41;
      (*(void (**)(char *, char *, uint64_t))(v44 + 32))(v41, v34, v36);
      dispatch thunk of RangeReplaceableCollection.removeSubrange(_:)();
      return (*(uint64_t (**)(char *, uint64_t))(v37 + 8))(v38, v36);
    }
    else
    {
      __break(1u);
    }
  }
  return result;
}

uint64_t Collection<>.trimmingPrefix<A>(_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v8 = *(void *)(a3 - 8);
  MEMORY[0x270FA5388](a1);
  uint64_t v10 = (char *)v22 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v22[1] = v11;
  void v22[2] = v12;
  v22[3] = v13;
  v22[4] = v14;
  v22[5] = v15;
  uint64_t v16 = type metadata accessor for FixedPatternConsumer();
  uint64_t v17 = *(void *)(v16 - 8);
  MEMORY[0x270FA5388](v16);
  uint64_t v19 = (char *)v22 - v18;
  (*(void (**)(char *, uint64_t, uint64_t))(v8 + 16))(v10, a1, a3);
  (*(void (**)(char *, char *, uint64_t))(v8 + 32))(v19, v10, a3);
  uint64_t WitnessTable = swift_getWitnessTable();
  Collection._trimmingPrefix<A>(_:)((uint64_t)v19, a2, v16, WitnessTable, a4);
  return (*(uint64_t (**)(char *, uint64_t))(v17 + 8))(v19, v16);
}

uint64_t Collection<>.trimPrefix<A>(_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = *(void *)(a3 - 8);
  MEMORY[0x270FA5388](a1);
  uint64_t v8 = (char *)v20 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v20[1] = v9;
  v20[2] = v10;
  v20[3] = v11;
  v20[4] = v12;
  v20[5] = v13;
  uint64_t v14 = type metadata accessor for FixedPatternConsumer();
  uint64_t v15 = *(void *)(v14 - 8);
  MEMORY[0x270FA5388](v14);
  uint64_t v17 = (char *)v20 - v16;
  (*(void (**)(char *, uint64_t, uint64_t))(v6 + 16))(v8, a1, a3);
  (*(void (**)(char *, char *, uint64_t))(v6 + 32))(v17, v8, a3);
  uint64_t WitnessTable = swift_getWitnessTable();
  CollectionConsumer.consume<>(_:)(v3, v14, WitnessTable);
  return (*(uint64_t (**)(char *, uint64_t))(v15 + 8))(v17, v14);
}

uint64_t RangeReplaceableCollection<>.trimPrefix<A>(_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8 = *(void *)(a3 - 8);
  MEMORY[0x270FA5388](a1);
  uint64_t v10 = (char *)v23 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = *(void *)(v11 + 8);
  v23[1] = v13;
  v23[2] = v14;
  v23[3] = v12;
  v23[4] = v15;
  v23[5] = v16;
  uint64_t v17 = type metadata accessor for FixedPatternConsumer();
  uint64_t v18 = *(void *)(v17 - 8);
  MEMORY[0x270FA5388](v17);
  uint64_t v20 = (char *)v23 - v19;
  (*(void (**)(char *, uint64_t, uint64_t))(v8 + 16))(v10, a1, a3);
  (*(void (**)(char *, char *, uint64_t))(v8 + 32))(v20, v10, a3);
  uint64_t WitnessTable = swift_getWitnessTable();
  RangeReplaceableCollection._trimPrefix<A>(_:)((uint64_t)v20, a2, v17, a4, WitnessTable);
  return (*(uint64_t (**)(char *, uint64_t))(v18 + 8))(v20, v17);
}

uint64_t BidirectionalCollection<>.trimmingPrefix<A>(_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  Collection.subscript.getter();
  unint64_t v7 = v14;
  unint64_t v8 = v15;
  uint64_t v9 = v16;
  uint64_t v10 = v17;
  (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t))(a5 + 16))(&v13, a3, a5);
  swift_getAssociatedTypeWitness();
  type metadata accessor for Regex();
  Regex.prefixMatch(in:)(v7, v8, v9, v10, (uint64_t)&v14);
  swift_release();
  if (!v15) {
    return v7;
  }
  unint64_t v11 = v18;
  uint64_t result = outlined consume of Regex<A1.RegexOutput>.Match?<A><A1>(v14, v15);
  if (v8 >> 14 >= v11 >> 14)
  {
    unint64_t v7 = Substring.subscript.getter();
    swift_bridgeObjectRelease();
    return v7;
  }
  __break(1u);
  return result;
}

uint64_t RangeReplaceableCollection<>.trimPrefix<A>(_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  Collection.subscript.getter();
  unint64_t v8 = v16;
  unint64_t v9 = v17;
  uint64_t v10 = v18;
  uint64_t v11 = v19;
  (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t))(a6 + 16))(&v15, a3, a6);
  swift_getAssociatedTypeWitness();
  type metadata accessor for Regex();
  Regex.prefixMatch(in:)(v8, v9, v10, v11, (uint64_t)&v16);
  swift_bridgeObjectRelease();
  uint64_t result = swift_release();
  uint64_t v13 = v17;
  if (v17)
  {
    uint64_t v14 = v16;
    unint64_t v16 = v19;
    unint64_t v17 = v20;
    dispatch thunk of RangeReplaceableCollection.removeSubrange(_:)();
    return outlined consume of Regex<A1.RegexOutput>.Match?<A><A1>(v14, v13);
  }
  return result;
}

uint64_t FixedPatternConsumer.consuming(_:in:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v74 = a2;
  uint64_t v76 = a1;
  uint64_t v57 = a4;
  uint64_t v5 = *(void *)(a3 + 16);
  uint64_t v63 = *(void (***)(char *, uint64_t))(v5 - 8);
  MEMORY[0x270FA5388](a1);
  uint64_t v70 = (char *)&v53 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = *(void *)(v7 + 32);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v54 = type metadata accessor for Optional();
  uint64_t v53 = *(void *)(v54 - 8);
  uint64_t v10 = MEMORY[0x270FA5388](v54);
  long long v58 = (char *)&v53 - v11;
  uint64_t v75 = *(void *)(AssociatedTypeWitness - 8);
  uint64_t v12 = MEMORY[0x270FA5388](v10);
  uint64_t v67 = (char *)&v53 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = MEMORY[0x270FA5388](v12);
  unint64_t v16 = (char *)&v53 - v15;
  uint64_t v17 = MEMORY[0x270FA5388](v14);
  uint64_t v69 = (char *)&v53 - v18;
  uint64_t v19 = *(void *)(a3 + 24);
  uint64_t v20 = *(void *)(v19 - 8);
  MEMORY[0x270FA5388](v17);
  uint64_t v22 = (char *)&v53 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v68 = a3;
  uint64_t v23 = swift_getAssociatedTypeWitness();
  uint64_t v55 = *(void *)(v23 - 8);
  MEMORY[0x270FA5388](v23);
  uint64_t v25 = (char *)&v53 - v24;
  uint64_t v26 = swift_getAssociatedTypeWitness();
  MEMORY[0x270FA5388](v26);
  uint64_t v56 = v27;
  uint64_t v28 = *(void (**)(void))(v27 + 16);
  uint64_t v77 = (char *)&v53 - v29;
  uint64_t v73 = v30;
  v28();
  (*(void (**)(char *, uint64_t, uint64_t))(v20 + 16))(v22, v72, v19);
  dispatch thunk of Sequence.makeIterator()();
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  uint64_t v32 = v58;
  uint64_t v71 = v25;
  uint64_t v72 = v23;
  uint64_t v66 = AssociatedConformanceWitness;
  dispatch thunk of IteratorProtocol.next()();
  uint64_t v33 = v32;
  uint64_t v34 = v75;
  uint64_t v64 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v75 + 48);
  uint64_t v65 = v75 + 48;
  if (v64(v32, 1, AssociatedTypeWitness) == 1)
  {
LABEL_6:
    (*(void (**)(char *, uint64_t))(v55 + 8))(v71, v72);
    (*(void (**)(char *, uint64_t))(v53 + 8))(v33, v54);
    uint64_t v48 = v56;
    uint64_t v49 = v57;
    uint64_t v50 = v73;
    (*(void (**)(uint64_t, char *, uint64_t))(v56 + 32))(v57, v77, v73);
    uint64_t v51 = 0;
  }
  else
  {
    uint64_t v36 = *(void (**)(char *, char *, uint64_t))(v34 + 32);
    uint64_t v35 = v34 + 32;
    uint64_t v61 = (void (**)(char *, uint64_t, uint64_t))(v63 + 2);
    uint64_t v62 = v36;
    long long v59 = (void (**)(char *))(v35 - 16);
    ++v63;
    uint64_t v75 = v35;
    uint64_t v60 = (void (**)(char *, uint64_t))(v35 - 24);
    while (1)
    {
      uint64_t v37 = v69;
      char v38 = v33;
      uint64_t v39 = v5;
      unint64_t v40 = v62;
      v62(v69, v33, AssociatedTypeWitness);
      swift_getAssociatedConformanceWitness();
      type metadata accessor for Range();
      char v41 = dispatch thunk of static Equatable.== infix(_:_:)();
      uint64_t v42 = v8;
      uint64_t v43 = v70;
      (*v61)(v70, v76, v5);
      v40(v16, v37, AssociatedTypeWitness);
      if (v41) {
        break;
      }
      uint64_t v44 = (void (*)(char *, void))dispatch thunk of Collection.subscript.read();
      uint64_t v45 = v67;
      (*v59)(v67);
      v44(v78, 0);
      (*v63)(v43, v39);
      char v46 = dispatch thunk of static Equatable.== infix(_:_:)();
      unint64_t v47 = *v60;
      (*v60)(v45, AssociatedTypeWitness);
      v47(v16, AssociatedTypeWitness);
      if ((v46 & 1) == 0) {
        goto LABEL_8;
      }
      dispatch thunk of Collection.formIndex(after:)();
      dispatch thunk of IteratorProtocol.next()();
      uint64_t v33 = v38;
      uint64_t v8 = v42;
      uint64_t v5 = v39;
      if (v64(v38, 1, AssociatedTypeWitness) == 1) {
        goto LABEL_6;
      }
    }
    (*v60)(v16, AssociatedTypeWitness);
    (*v63)(v43, v5);
LABEL_8:
    (*(void (**)(char *, uint64_t))(v55 + 8))(v71, v72);
    uint64_t v48 = v56;
    uint64_t v50 = v73;
    (*(void (**)(char *, uint64_t))(v56 + 8))(v77, v73);
    uint64_t v51 = 1;
    uint64_t v49 = v57;
  }
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v48 + 56))(v49, v51, 1, v50);
}

uint64_t ManyConsumer.consuming(_:in:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, char *a4@<X8>)
{
  uint64_t v5 = v4;
  uint64_t v84 = a1;
  long long v59 = a4;
  uint64_t v7 = *(void *)(a3 + 16);
  uint64_t v8 = *(void *)(a3 + 24);
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
  uint64_t v10 = MEMORY[0x270FA5388](TupleTypeMetadata2);
  uint64_t v81 = (char *)&v56 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v10);
  uint64_t v80 = (char *)&v56 - v12;
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  uint64_t v14 = type metadata accessor for Range();
  uint64_t v85 = *(char **)(v14 - 8);
  uint64_t v15 = MEMORY[0x270FA5388](v14);
  unint64_t v78 = (char *)&v56 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v17 = MEMORY[0x270FA5388](v15);
  uint64_t v77 = (char *)&v56 - v18;
  uint64_t v19 = *(void *)(v7 - 8);
  MEMORY[0x270FA5388](v17);
  uint64_t v21 = (char *)&v56 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v58 = type metadata accessor for Optional();
  uint64_t v57 = *(void *)(v58 - 8);
  uint64_t v22 = MEMORY[0x270FA5388](v58);
  uint64_t v88 = (char *)&v56 - v23;
  uint64_t v24 = MEMORY[0x270FA5388](v22);
  uint64_t v66 = (char *)&v56 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v24);
  uint64_t v27 = (char *)&v56 - v26;
  uint64_t v60 = v28;
  uint64_t v75 = *(void (**)(char *, uint64_t, uint64_t))(v28 + 16);
  uint64_t v76 = v28 + 16;
  v75((char *)&v56 - v26, a2, AssociatedTypeWitness);
  uint64_t v79 = v14;
  uint64_t v29 = *(int *)(v14 + 36);
  uint64_t v30 = (void (*)(char *, char *, uint64_t))v19;
  uint64_t v83 = v8;
  uint64_t v73 = *(void (**)(uint64_t, char *, uint64_t, uint64_t))(v8 + 24);
  uint64_t v74 = v8 + 24;
  uint64_t v31 = *(void (**)(char *, uint64_t, uint64_t))(v19 + 16);
  uint64_t v86 = v21;
  uint64_t v32 = v21;
  uint64_t v64 = v5;
  uint64_t v33 = v7;
  uint64_t v34 = v7;
  uint64_t v35 = a2 + v29;
  uint64_t v63 = v19 + 16;
  uint64_t v62 = v31;
  v31(v32, v5, v34);
  if (dispatch thunk of static Comparable.<= infix(_:_:)())
  {
    uint64_t v36 = (void (**)(char *, char *, uint64_t))(v60 + 32);
    uint64_t v69 = (void (**)(char *, uint64_t))(v85 + 8);
    uint64_t v70 = (void (**)(char *, char *, uint64_t))(v85 + 32);
    uint64_t v68 = (void (**)(char *, uint64_t))(v19 + 8);
    uint64_t v67 = (unsigned int (**)(char *, uint64_t, uint64_t))(v60 + 48);
    uint64_t v65 = AssociatedConformanceWitness;
    uint64_t v71 = v33;
    uint64_t v61 = v35;
    uint64_t v87 = (void (**)(char *, uint64_t))(v60 + 8);
    uint64_t v72 = v27;
    while (1)
    {
      uint64_t v37 = TupleTypeMetadata2;
      char v38 = v80;
      uint64_t v39 = &v80[*(int *)(TupleTypeMetadata2 + 48)];
      unint64_t v40 = v75;
      v75(v80, (uint64_t)v27, AssociatedTypeWitness);
      uint64_t v85 = v39;
      v40(v39, v35, AssociatedTypeWitness);
      char v41 = v81;
      uint64_t v42 = &v81[*(int *)(v37 + 48)];
      v40(v81, (uint64_t)v38, AssociatedTypeWitness);
      v40(v42, (uint64_t)v39, AssociatedTypeWitness);
      uint64_t v30 = *v36;
      uint64_t v43 = v78;
      (*v36)(v78, v41, AssociatedTypeWitness);
      uint64_t v44 = (char *)*v87;
      (*v87)(v42, AssociatedTypeWitness);
      uint64_t v45 = &v41[*(int *)(v37 + 48)];
      v30(v41, v38, AssociatedTypeWitness);
      v30(v45, v85, AssociatedTypeWitness);
      uint64_t v46 = v79;
      unint64_t v47 = v45;
      uint64_t v48 = v71;
      v30(&v43[*(int *)(v79 + 36)], v47, AssociatedTypeWitness);
      uint64_t v85 = v44;
      ((void (*)(char *, uint64_t))v44)(v41, AssociatedTypeWitness);
      uint64_t v49 = v77;
      uint64_t v50 = v86;
      (*v70)(v77, v43, v46);
      uint64_t v51 = v88;
      v73(v84, v49, v48, v83);
      (*v69)(v49, v46);
      uint64_t v52 = v48;
      (*v68)(v50, v48);
      if ((*v67)(v51, 1, AssociatedTypeWitness) == 1) {
        break;
      }
      uint64_t v53 = v66;
      v30(v66, v88, AssociatedTypeWitness);
      uint64_t v27 = v72;
      if (dispatch thunk of static Equatable.== infix(_:_:)())
      {
        ((void (*)(char *, uint64_t))v85)(v53, AssociatedTypeWitness);
        goto LABEL_9;
      }
      ((void (*)(char *, uint64_t))v85)(v27, AssociatedTypeWitness);
      v30(v27, v53, AssociatedTypeWitness);
      v62(v86, v64, v52);
      uint64_t v35 = v61;
      if ((dispatch thunk of static Comparable.<= infix(_:_:)() & 1) == 0) {
        goto LABEL_6;
      }
    }
  }
  else
  {
LABEL_6:
    __break(1u);
  }
  (*(void (**)(char *, uint64_t))(v57 + 8))(v88, v58);
  uint64_t v27 = v72;
LABEL_9:
  uint64_t v54 = v59;
  v30(v59, v27, AssociatedTypeWitness);
  return (*(uint64_t (**)(char *, void, uint64_t, uint64_t))(v60 + 56))(v54, 0, 1, AssociatedTypeWitness);
}

uint64_t PredicateConsumer.consuming(_:in:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t (*a3)(char *)@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X8>)
{
  uint64_t v34 = a4;
  uint64_t v35 = a3;
  uint64_t v38 = a7;
  uint64_t v39 = a1;
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v33 = *(void *)(AssociatedTypeWitness - 8);
  uint64_t v10 = MEMORY[0x270FA5388](AssociatedTypeWitness);
  uint64_t v32 = (char *)&v31 - v11;
  uint64_t v40 = *(void *)(a5 - 8);
  MEMORY[0x270FA5388](v10);
  uint64_t v13 = (char *)&v31 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = swift_getAssociatedTypeWitness();
  uint64_t v15 = *(void *)(v14 - 8);
  uint64_t v16 = MEMORY[0x270FA5388](v14);
  uint64_t v18 = (char *)&v31 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v16);
  uint64_t v20 = (char *)&v31 - v19;
  uint64_t v21 = *(void (**)(char *, uint64_t, uint64_t))(v15 + 16);
  v21((char *)&v31 - v19, a2, v14);
  uint64_t v36 = a6;
  swift_getAssociatedConformanceWitness();
  type metadata accessor for Range();
  LOBYTE(a2) = dispatch thunk of static Equatable.== infix(_:_:)();
  (*(void (**)(char *, uint64_t, uint64_t))(v40 + 16))(v13, v39, a5);
  v21(v18, (uint64_t)v20, v14);
  if (a2)
  {
    uint64_t v22 = *(void (**)(char *, uint64_t))(v15 + 8);
    v22(v18, v14);
    (*(void (**)(char *, uint64_t))(v40 + 8))(v13, a5);
LABEL_5:
    v22(v20, v14);
    uint64_t v29 = 1;
    uint64_t v28 = v38;
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v15 + 56))(v28, v29, 1, v14);
  }
  uint64_t v23 = (void (*)(char *, void))dispatch thunk of Collection.subscript.read();
  uint64_t v24 = v33;
  uint64_t v25 = *(void (**)(char *))(v33 + 16);
  uint64_t v31 = v13;
  uint64_t v26 = v32;
  v25(v32);
  v23(v41, 0);
  uint64_t v22 = *(void (**)(char *, uint64_t))(v15 + 8);
  v22(v18, v14);
  (*(void (**)(char *, uint64_t))(v40 + 8))(v31, a5);
  char v27 = v35(v26);
  (*(void (**)(char *, uint64_t))(v24 + 8))(v26, AssociatedTypeWitness);
  if ((v27 & 1) == 0) {
    goto LABEL_5;
  }
  uint64_t v28 = v38;
  dispatch thunk of Collection.index(after:)();
  v22(v20, v14);
  uint64_t v29 = 0;
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v15 + 56))(v28, v29, 1, v14);
}

uint64_t protocol witness for CollectionConsumer.consuming(_:in:) in conformance PredicateConsumer<A>@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  return PredicateConsumer.consuming(_:in:)(a1, a2, *(uint64_t (**)(char *))v4, *(void *)(v4 + 8), *(void *)(a3 + 16), *(void *)(a3 + 24), a4);
}

uint64_t protocol witness for StatelessCollectionSearcher.search(_:in:) in conformance PredicateConsumer<A>@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  return PredicateConsumer.search(_:in:)(a1, a2, *(void *)v4, *(char **)(v4 + 8), *(void *)(a3 + 24), a4);
}

uint64_t protocol witness for CollectionSearcher.state(for:in:) in conformance PredicateConsumer<A>@<X0>(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  return StatelessCollectionSearcher.state(for:in:)(a1, a2);
}

uint64_t StatelessCollectionSearcher.state(for:in:)@<X0>(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  uint64_t v14 = a2;
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v4 = *(void *)(AssociatedTypeWitness - 8);
  MEMORY[0x270FA5388](AssociatedTypeWitness);
  uint64_t v6 = (char *)&v13 - v5;
  uint64_t v7 = type metadata accessor for DefaultSearcherState.Position();
  MEMORY[0x270FA5388](v7 - 8);
  unint64_t v9 = (char *)&v13 - v8;
  uint64_t v10 = *(void (**)(char *, uint64_t, uint64_t))(v4 + 16);
  v10((char *)&v13 - v8, a1, AssociatedTypeWitness);
  (*(void (**)(char *, void, uint64_t, uint64_t))(v4 + 56))(v9, 0, 1, AssociatedTypeWitness);
  swift_getAssociatedConformanceWitness();
  uint64_t v11 = type metadata accessor for Range();
  v10(v6, a1 + *(int *)(v11 + 36), AssociatedTypeWitness);
  swift_checkMetadataState();
  return DefaultSearcherState.init(position:end:)((uint64_t)v9, (uint64_t)v6, v14);
}

uint64_t protocol witness for CollectionSearcher.search(_:_:) in conformance PredicateConsumer<A>@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, char *a4@<X8>)
{
  uint64_t WitnessTable = swift_getWitnessTable();

  return StatelessCollectionSearcher.search(_:_:)(a1, a2, a3, WitnessTable, a4);
}

uint64_t StatelessCollectionSearcher.search(_:_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, char *a5@<X8>)
{
  uint64_t v89 = a4;
  uint64_t v90 = a1;
  unint64_t v93 = a5;
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v88 = a3;
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  uint64_t v9 = swift_getAssociatedTypeWitness();
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
  uint64_t v10 = MEMORY[0x270FA5388](TupleTypeMetadata2);
  uint64_t v86 = (char *)v68 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v10);
  uint64_t v84 = (char *)v68 - v12;
  uint64_t v91 = swift_getAssociatedConformanceWitness();
  uint64_t v13 = type metadata accessor for Range();
  uint64_t v14 = type metadata accessor for Optional();
  uint64_t v79 = *(void *)(v14 - 8);
  uint64_t v80 = v14;
  uint64_t v15 = MEMORY[0x270FA5388](v14);
  uint64_t v87 = (char *)v68 - v16;
  uint64_t v17 = *(void *)(v13 - 8);
  uint64_t v18 = MEMORY[0x270FA5388](v15);
  uint64_t v82 = (char *)v68 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v20 = MEMORY[0x270FA5388](v18);
  uint64_t v83 = (char *)v68 - v21;
  MEMORY[0x270FA5388](v20);
  uint64_t v81 = (char *)v68 - v22;
  uint64_t v92 = AssociatedConformanceWitness;
  uint64_t v23 = type metadata accessor for DefaultSearcherState.Position();
  uint64_t v24 = *(void *)(v23 - 8);
  uint64_t v25 = MEMORY[0x270FA5388](v23);
  uint64_t v77 = (char *)v68 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v27 = MEMORY[0x270FA5388](v25);
  uint64_t v29 = (char *)v68 - v28;
  uint64_t v30 = *(void *)(v9 - 8);
  uint64_t v31 = MEMORY[0x270FA5388](v27);
  unint64_t v78 = (char *)v68 - ((v32 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v31);
  uint64_t v34 = (char *)v68 - v33;
  (*(void (**)(char *, uint64_t, uint64_t))(v24 + 16))(v29, a2, v23);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v30 + 48))(v29, 1, v9) == 1)
  {
    (*(void (**)(char *, uint64_t))(v24 + 8))(v29, v23);
    goto LABEL_6;
  }
  uint64_t v69 = v24;
  uint64_t v70 = v23;
  uint64_t v75 = v17;
  uint64_t v76 = v13;
  uint64_t v35 = *(void (**)(char *, char *, uint64_t))(v30 + 32);
  v35(v34, v29, v9);
  v68[2] = AssociatedTypeWitness;
  uint64_t v36 = *(int *)(type metadata accessor for DefaultSearcherState() + 36);
  uint64_t v71 = a2;
  uint64_t v37 = a2 + v36;
  uint64_t result = dispatch thunk of static Comparable.<= infix(_:_:)();
  if (result)
  {
    uint64_t v72 = v37;
    uint64_t v40 = v84;
    uint64_t v39 = TupleTypeMetadata2;
    char v41 = &v84[*(int *)(TupleTypeMetadata2 + 48)];
    v35(v84, v34, v9);
    uint64_t v42 = v30;
    uint64_t v43 = *(void (**)(char *, uint64_t, uint64_t))(v30 + 16);
    uint64_t v73 = v35;
    uint64_t v44 = v41;
    uint64_t v74 = v41;
    v43(v41, v72, v9);
    uint64_t v45 = v86;
    uint64_t v46 = &v86[*(int *)(v39 + 48)];
    v43(v86, (uint64_t)v40, v9);
    v68[1] = v30 + 16;
    v68[0] = v43;
    v43(v46, (uint64_t)v44, v9);
    unint64_t v47 = v82;
    uint64_t v48 = v73;
    v73(v82, v45, v9);
    uint64_t v72 = v42;
    uint64_t v49 = *(void (**)(char *, uint64_t))(v42 + 8);
    v49(v46, v9);
    uint64_t v50 = &v45[*(int *)(v39 + 48)];
    v48(v45, v40, v9);
    v48(v50, v74, v9);
    uint64_t v51 = v76;
    v48(&v47[*(int *)(v76 + 36)], v50, v9);
    uint64_t v13 = v51;
    uint64_t v86 = (char *)v49;
    v49(v45, v9);
    uint64_t v17 = v75;
    uint64_t v52 = v83;
    uint64_t v53 = v47;
    uint64_t v54 = *(void (**)(char *, char *, uint64_t))(v75 + 32);
    v54(v83, v53, v51);
    uint64_t v55 = v87;
    (*(void (**)(uint64_t, char *, uint64_t))(v89 + 16))(v90, v52, v88);
    (*(void (**)(char *, uint64_t))(v17 + 8))(v52, v13);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v17 + 48))(v55, 1, v13) != 1)
    {
      uint64_t v58 = v81;
      v54(v81, v55, v13);
      if (Range.isEmpty.getter())
      {
        uint64_t v59 = (uint64_t)&v58[*(int *)(v13 + 36)];
        uint64_t v60 = v78;
        dispatch thunk of Collection.endIndex.getter();
        uint64_t v91 = v59;
        char v61 = dispatch thunk of static Equatable.== infix(_:_:)();
        ((void (*)(char *, uint64_t))v86)(v60, v9);
        if (v61)
        {
          uint64_t v62 = v71;
          (*(void (**)(uint64_t, uint64_t))(v69 + 8))(v71, v70);
          (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v72 + 56))(v62, 1, 1, v9);
        }
        else
        {
          uint64_t v65 = v54;
          uint64_t v66 = v77;
          dispatch thunk of Collection.index(after:)();
          (*(void (**)(char *, void, uint64_t, uint64_t))(v72 + 56))(v66, 0, 1, v9);
          uint64_t v67 = v66;
          uint64_t v54 = v65;
          (*(void (**)(uint64_t, char *, uint64_t))(v69 + 40))(v71, v67, v70);
        }
        uint64_t v57 = v93;
        uint64_t v64 = v81;
      }
      else
      {
        uint64_t v63 = v71;
        (*(void (**)(uint64_t, uint64_t))(v69 + 8))(v71, v70);
        ((void (*)(uint64_t, char *, uint64_t))v68[0])(v63, &v58[*(int *)(v13 + 36)], v9);
        (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v72 + 56))(v63, 0, 1, v9);
        uint64_t v57 = v93;
        uint64_t v64 = v58;
      }
      v54(v57, v64, v13);
      uint64_t v56 = 0;
      return (*(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(v17 + 56))(v57, v56, 1, v13);
    }
    (*(void (**)(char *, uint64_t))(v79 + 8))(v55, v80);
LABEL_6:
    uint64_t v56 = 1;
    uint64_t v57 = v93;
    return (*(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(v17 + 56))(v57, v56, 1, v13);
  }
  __break(1u);
  return result;
}

uint64_t protocol witness for BackwardCollectionSearcher.backwardState(for:in:) in conformance <> PredicateConsumer<A>@<X0>(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  return BackwardStatelessCollectionSearcher.backwardState(for:in:)(a1, a2);
}

uint64_t BackwardStatelessCollectionSearcher.backwardState(for:in:)@<X0>(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v5 = *(void *)(AssociatedTypeWitness - 8);
  MEMORY[0x270FA5388](AssociatedTypeWitness);
  uint64_t v7 = (char *)&v14 - v6;
  uint64_t v8 = type metadata accessor for DefaultSearcherState.Position();
  MEMORY[0x270FA5388](v8 - 8);
  uint64_t v10 = (char *)&v14 - v9;
  swift_getAssociatedConformanceWitness();
  uint64_t v11 = type metadata accessor for Range();
  uint64_t v12 = *(void (**)(char *, uint64_t, uint64_t))(v5 + 16);
  v12(v10, a1 + *(int *)(v11 + 36), AssociatedTypeWitness);
  (*(void (**)(char *, void, uint64_t, uint64_t))(v5 + 56))(v10, 0, 1, AssociatedTypeWitness);
  v12(v7, a1, AssociatedTypeWitness);
  swift_checkMetadataState();
  return DefaultSearcherState.init(position:end:)((uint64_t)v10, (uint64_t)v7, a2);
}

uint64_t _MatchResult.init(match:result:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(AssociatedTypeWitness - 8) + 32))(a3, a1, AssociatedTypeWitness);
  uint64_t v7 = a3 + *(int *)(type metadata accessor for _MatchResult() + 36);
  uint64_t v8 = swift_getAssociatedTypeWitness();
  uint64_t v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v8 - 8) + 32);

  return v9(v7, a2, v8);
}

uint64_t _BackwardMatchResult.init(match:result:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(AssociatedTypeWitness - 8) + 32))(a3, a1, AssociatedTypeWitness);
  uint64_t v7 = a3 + *(int *)(type metadata accessor for _BackwardMatchResult() + 36);
  uint64_t v8 = swift_getAssociatedTypeWitness();
  uint64_t v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v8 - 8) + 32);

  return v9(v7, a2, v8);
}

void *BidirectionalCollection<>.firstMatch<A, B>(of:)@<X0>(uint64_t a1@<X3>, uint64_t a2@<X5>, _OWORD *a3@<X8>)
{
  Collection.subscript.getter();
  unint64_t v6 = v12;
  unint64_t v7 = v13;
  unint64_t v9 = v14;
  uint64_t v8 = v15;
  uint64_t result = (*(void *(**)(unint64_t *__return_ptr, uint64_t, uint64_t))(a2 + 16))(&v11, a1, a2);
  unint64_t v12 = v11;
  if (v7 >> 14 < v6 >> 14)
  {
    __break(1u);
  }
  else
  {
    type metadata accessor for Regex();
    Regex._firstMatch(_:in:)(v9, v8, v6, v7, a3);
    swift_bridgeObjectRelease();
    return (void *)swift_release();
  }
  return result;
}

uint64_t RangeReplaceableCollection<>.replacing<A, B, C>(_:subrange:maxReplacements:with:)@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, void (*a3)(long long *)@<X4>, uint64_t a4@<X5>, uint64_t a5@<X6>, uint64_t a6@<X8>, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  uint64_t v48 = a3;
  uint64_t v49 = a4;
  uint64_t v46 = a7;
  uint64_t result = MEMORY[0x270FA5388](a1);
  uint64_t v20 = (char *)v39 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (v17 < 0)
  {
LABEL_15:
    __break(1u);
    return result;
  }
  unint64_t v47 = v20;
  uint64_t v56 = a11;
  uint64_t v45 = a8;
  uint64_t v44 = result;
  uint64_t v65 = v17;
  uint64_t v43 = v18;
  uint64_t v55 = v16;
  dispatch thunk of RangeReplaceableCollection.init()();
  *(void *)&long long v62 = a2;
  swift_getCanonicalSpecializedMetadata();
  uint64_t v21 = *(void *)(a9 + 8);
  lazy protocol witness table accessor for type PartialRangeUpTo<String.Index> and conformance PartialRangeUpTo<A>(&lazy protocol witness table cache variable for type PartialRangeUpTo<String.Index> and conformance PartialRangeUpTo<A>);
  Collection.subscript.getter();
  long long v62 = v58;
  uint64_t v63 = v59;
  uint64_t v64 = v60;
  unint64_t v22 = lazy protocol witness table accessor for type Substring and conformance Substring();
  uint64_t v23 = MEMORY[0x263F8D980];
  uint64_t v51 = a6;
  unint64_t v52 = v22;
  uint64_t v50 = a9;
  dispatch thunk of RangeReplaceableCollection.append<A>(contentsOf:)();
  *(void *)&long long v62 = a2;
  *((void *)&v62 + 1) = v55;
  uint64_t v54 = v11;
  uint64_t v55 = a5;
  uint64_t v53 = v21;
  dispatch thunk of Collection.subscript.getter();
  long long v62 = v58;
  uint64_t v63 = v59;
  uint64_t v64 = v60;
  unint64_t v24 = lazy protocol witness table accessor for type Substring and conformance Substring();
  uint64_t v25 = BidirectionalCollection<>.matches<A, B>(of:)(v44, v23, v43, v45, v24, v56);
  swift_bridgeObjectRelease();
  *(void *)&long long v62 = v25;
  uint64_t v26 = type metadata accessor for Regex.Match();
  type metadata accessor for Array();
  swift_getWitnessTable();
  Collection.prefix(_:)();
  long long v27 = v58;
  uint64_t v29 = v59;
  unint64_t v28 = v60;
  uint64_t v30 = ArraySlice.startIndex.getter();
  if (v30 != ArraySlice.endIndex.getter())
  {
    v39[0] = a10;
    uint64_t v44 = v28 >> 1;
    uint64_t v31 = (uint64_t *)(*((void *)&v27 + 1) + 40 * v30 + 16);
    uint64_t v45 = v30;
    uint64_t v43 = v27;
    uint64_t v42 = v26;
    uint64_t v41 = *((void *)&v27 + 1);
    uint64_t v40 = v29;
    v39[1] = v28;
    while (1)
    {
      uint64_t result = ArraySlice._hoistableIsNativeTypeChecked()();
      if (v45 < v29 || v44 <= v30) {
        break;
      }
      unint64_t v32 = v31[1];
      if (v32 >> 14 < a2 >> 14) {
        goto LABEL_14;
      }
      uint64_t v33 = *(v31 - 1);
      uint64_t v34 = *v31;
      uint64_t v65 = v31[2];
      uint64_t v35 = v51;
      uint64_t v56 = *(v31 - 2);
      *(void *)&long long v62 = a2;
      *((void *)&v62 + 1) = v32;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      uint64_t v36 = v55;
      dispatch thunk of Collection.subscript.getter();
      long long v62 = v58;
      uint64_t v63 = v59;
      uint64_t v64 = v60;
      dispatch thunk of RangeReplaceableCollection.append<A>(contentsOf:)();
      uint64_t v37 = v57;
      *(void *)&long long v58 = v56;
      *((void *)&v58 + 1) = v33;
      uint64_t v59 = v34;
      uint64_t v60 = v32;
      uint64_t v61 = v65;
      v48(&v58);
      if (v37)
      {
        (*(void (**)(uint64_t, uint64_t))(*(void *)(v36 - 8) + 8))(v35, v36);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        return swift_unknownObjectRelease();
      }
      uint64_t v57 = 0;
      ++v30;
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      dispatch thunk of RangeReplaceableCollection.append<A>(contentsOf:)();
      uint64_t v29 = v40;
      uint64_t v38 = ArraySlice.endIndex.getter();
      v31 += 5;
      a2 = v65;
      if (v30 == v38) {
        goto LABEL_10;
      }
    }
    __break(1u);
LABEL_14:
    __break(1u);
    goto LABEL_15;
  }
  uint64_t v65 = a2;
LABEL_10:
  swift_unknownObjectRelease();
  *(void *)&long long v62 = v65;
  swift_getCanonicalSpecializedMetadata();
  lazy protocol witness table accessor for type PartialRangeUpTo<String.Index> and conformance PartialRangeUpTo<A>(&lazy protocol witness table cache variable for type PartialRangeFrom<String.Index> and conformance PartialRangeFrom<A>);
  Collection.subscript.getter();
  long long v62 = v58;
  uint64_t v63 = v59;
  uint64_t v64 = v60;
  return dispatch thunk of RangeReplaceableCollection.append<A>(contentsOf:)();
}

uint64_t BidirectionalCollection<>.matches<A, B>(of:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  type metadata accessor for Regex.Match();
  uint64_t v8 = Array.init()();
  uint64_t v29 = v8;
  BidirectionalCollection<>._matches<A>(of:)(a4, a6, (int8x16_t *)&v21);
  uint64_t v9 = v24;
  uint64_t v10 = v25;
  uint64_t v11 = type metadata accessor for RegexMatchesCollection();
  RegexMatchesCollection.makeIterator()(v11, (uint64_t)v26);
  swift_release();
  swift_bridgeObjectRelease();
  outlined consume of Regex<A1.RegexOutput>.Match?<A><A1>(v9, v10);
  uint64_t v12 = type metadata accessor for RegexMatchesCollection.Iterator();
  RegexMatchesCollection.Iterator.next()(v12, &v21);
  if ((void)v22)
  {
    unint64_t v13 = v21;
    long long v19 = v23;
    long long v20 = v22;
    type metadata accessor for Array();
    long long v15 = v19;
    long long v14 = v20;
    do
    {
      unint64_t v21 = v13;
      long long v22 = v14;
      long long v23 = v15;
      Array.append(_:)();
      RegexMatchesCollection.Iterator.next()(v12, &v21);
      unint64_t v13 = v21;
      long long v14 = v22;
      long long v15 = v23;
    }
    while ((void)v22);
    uint64_t v8 = v29;
  }
  uint64_t v16 = v27;
  uint64_t v17 = v28;
  swift_release();
  swift_bridgeObjectRelease();
  outlined consume of Regex<A1.RegexOutput>.Match?<A><A1>(v16, v17);
  return v8;
}

uint64_t RangeReplaceableCollection<>.replacing<A, B, C>(_:maxReplacements:with:)@<X0>(uint64_t a1@<X0>, void (*a2)(long long *)@<X2>, uint64_t a3@<X3>, uint64_t a4@<X4>, uint64_t a5@<X6>, uint64_t a6@<X7>, uint64_t a7@<X8>, uint64_t a8, uint64_t a9, uint64_t a10)
{
  dispatch thunk of Collection.startIndex.getter();
  uint64_t result = dispatch thunk of Collection.endIndex.getter();
  if (v18 >> 14 >= v19 >> 14) {
    return RangeReplaceableCollection<>.replacing<A, B, C>(_:subrange:maxReplacements:with:)(a1, v19, a2, a3, a4, a7, a5, a6, a8, a9, a10);
  }
  __break(1u);
  return result;
}

uint64_t RangeReplaceableCollection<>.replace<A, B, C>(_:maxReplacements:with:)(uint64_t a1, uint64_t a2, void (*a3)(long long *), uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  uint64_t v24 = a6;
  v21[0] = a8;
  v21[1] = a2;
  long long v22 = a3;
  uint64_t v23 = a4;
  uint64_t v15 = *(void *)(a5 - 8);
  MEMORY[0x270FA5388](a1);
  uint64_t v17 = (char *)v21 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  dispatch thunk of Collection.startIndex.getter();
  unint64_t v18 = v27;
  uint64_t result = dispatch thunk of Collection.endIndex.getter();
  if (v26 >> 14 < v18 >> 14)
  {
    __break(1u);
  }
  else
  {
    uint64_t v20 = v25;
    uint64_t result = RangeReplaceableCollection<>.replacing<A, B, C>(_:subrange:maxReplacements:with:)(a1, v18, v22, v23, a5, (uint64_t)v17, a7, v21[0], a9, a10, a11);
    if (!v20)
    {
      (*(void (**)(uint64_t, uint64_t))(v15 + 8))(v11, a5);
      return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v15 + 32))(v11, v17, a5);
    }
  }
  return result;
}

uint64_t MatchesCollection.Index.init(match:state:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  type metadata accessor for Range();
  swift_getAssociatedTypeWitness();
  swift_getTupleTypeMetadata2();
  uint64_t v5 = type metadata accessor for Optional();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 32))(a3, a1, v5);
  uint64_t v6 = a3 + *(int *)(type metadata accessor for MatchesCollection.Index() + 36);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v8 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(AssociatedTypeWitness - 8) + 32);

  return v8(v6, a2, AssociatedTypeWitness);
}

uint64_t MatchesCollection.endIndex.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v77 = a1;
  uint64_t v73 = a2;
  uint64_t v3 = *(void *)(a1 + 16);
  uint64_t v2 = *(void *)(a1 + 24);
  uint64_t v4 = *(void *)(v2 + 8);
  swift_getAssociatedTypeWitness();
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
  uint64_t v6 = MEMORY[0x270FA5388](TupleTypeMetadata2);
  uint64_t v65 = (char *)&v58 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = MEMORY[0x270FA5388](v6);
  uint64_t v69 = (char *)&v58 - v9;
  uint64_t v67 = *(void *)(AssociatedTypeWitness - 8);
  uint64_t v10 = MEMORY[0x270FA5388](v8);
  uint64_t v76 = (char *)&v58 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v10);
  unint64_t v13 = (char *)&v58 - v12;
  uint64_t v75 = swift_getAssociatedConformanceWitness();
  uint64_t v14 = type metadata accessor for Range();
  uint64_t v70 = *(void *)(v14 - 8);
  uint64_t v15 = MEMORY[0x270FA5388](v14);
  uint64_t v66 = (char *)&v58 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v15);
  uint64_t v68 = (char *)&v58 - v17;
  uint64_t v18 = swift_checkMetadataState();
  uint64_t v80 = *(void *)(v18 - 8);
  uint64_t v19 = MEMORY[0x270FA5388](v18);
  unint64_t v21 = (char *)&v58 - v20;
  uint64_t v22 = *(void *)(v3 - 8);
  MEMORY[0x270FA5388](v19);
  uint64_t v24 = (char *)&v58 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v72 = v4;
  uint64_t v25 = swift_getAssociatedTypeWitness();
  MEMORY[0x270FA5388](v25 - 8);
  uint64_t v61 = v2;
  long long v62 = (char *)&v58 - v26;
  swift_getAssociatedTypeWitness();
  uint64_t v71 = v14;
  uint64_t v27 = swift_getTupleTypeMetadata2();
  uint64_t v28 = type metadata accessor for Optional();
  MEMORY[0x270FA5388](v28 - 8);
  uint64_t v30 = (char *)&v58 - v29;
  uint64_t v31 = *(void (**)(void))(*(void *)(v27 - 8) + 56);
  uint64_t v60 = v30;
  v31();
  uint64_t v32 = v78;
  uint64_t v33 = v78 + *(int *)(v77 + 36);
  uint64_t v77 = v22;
  uint64_t v34 = *(void (**)(char *, uint64_t, uint64_t))(v22 + 16);
  uint64_t v63 = v24;
  v34(v24, v33, v3);
  uint64_t v35 = *(void (**)(char *, uint64_t, uint64_t))(v80 + 16);
  uint64_t v64 = v21;
  v35(v21, v32, v18);
  dispatch thunk of Collection.startIndex.getter();
  uint64_t v78 = v18;
  uint64_t v36 = v76;
  dispatch thunk of Collection.endIndex.getter();
  uint64_t AssociatedConformanceWitness = (uint64_t)v13;
  uint64_t v37 = AssociatedTypeWitness;
  uint64_t result = dispatch thunk of static Comparable.<= infix(_:_:)();
  if (result)
  {
    uint64_t v39 = v67;
    uint64_t v40 = v65;
    uint64_t v75 = v3;
    uint64_t v41 = TupleTypeMetadata2;
    uint64_t v42 = v69;
    uint64_t v43 = &v69[*(int *)(TupleTypeMetadata2 + 48)];
    uint64_t v44 = *(void (**)(char *, uint64_t, uint64_t))(v67 + 32);
    uint64_t v45 = v37;
    v44(v69, AssociatedConformanceWitness, v37);
    uint64_t v59 = v43;
    v44(v43, (uint64_t)v36, v37);
    uint64_t v46 = &v40[*(int *)(v41 + 48)];
    unint64_t v47 = *(void (**)(char *, char *, uint64_t))(v39 + 16);
    v47(v40, v42, v45);
    v47(v46, v43, v45);
    uint64_t v48 = v66;
    v44(v66, (uint64_t)v40, v45);
    uint64_t v49 = *(void (**)(char *, uint64_t))(v39 + 8);
    v49(v46, v45);
    uint64_t v50 = &v40[*(int *)(TupleTypeMetadata2 + 48)];
    v44(v40, (uint64_t)v42, v45);
    v44(v50, (uint64_t)v59, v45);
    uint64_t v51 = v71;
    v44(&v48[*(int *)(v71 + 36)], (uint64_t)v50, v45);
    v49(v40, v45);
    uint64_t v52 = v70;
    uint64_t v53 = v68;
    (*(void (**)(char *, char *, uint64_t))(v70 + 32))(v68, v48, v51);
    uint64_t v55 = (uint64_t)v62;
    uint64_t v54 = v63;
    uint64_t v56 = v64;
    uint64_t v57 = v75;
    (*(void (**)(char *, char *, uint64_t))(v72 + 32))(v64, v53, v75);
    (*(void (**)(char *, uint64_t))(v52 + 8))(v53, v51);
    (*(void (**)(char *, uint64_t))(v80 + 8))(v56, v78);
    (*(void (**)(char *, uint64_t))(v77 + 8))(v54, v57);
    return MatchesCollection.Index.init(match:state:)((uint64_t)v60, v55, v73);
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t MatchesIterator.init(base:searcher:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v67 = a4;
  uint64_t v69 = a2;
  uint64_t v8 = *(void *)(a4 + 8);
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
  uint64_t v10 = MEMORY[0x270FA5388](TupleTypeMetadata2);
  uint64_t v53 = (char *)&v49 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = MEMORY[0x270FA5388](v10);
  uint64_t v61 = (char *)&v49 - v13;
  uint64_t v63 = *(void *)(AssociatedTypeWitness - 8);
  uint64_t v14 = MEMORY[0x270FA5388](v12);
  uint64_t v16 = (char *)&v49 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v14);
  uint64_t v18 = (char *)&v49 - v17;
  swift_getAssociatedConformanceWitness();
  uint64_t v64 = type metadata accessor for Range();
  uint64_t v62 = *(void *)(v64 - 8);
  uint64_t v19 = MEMORY[0x270FA5388](v64);
  uint64_t v56 = (char *)&v49 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v19);
  uint64_t v60 = (char *)&v49 - v21;
  uint64_t v65 = v8;
  uint64_t v22 = swift_getAssociatedTypeWitness();
  uint64_t v58 = *(void *)(v22 - 8);
  uint64_t v59 = v22;
  MEMORY[0x270FA5388](v22);
  uint64_t v57 = (char *)&v49 - v23;
  uint64_t v24 = swift_checkMetadataState();
  uint64_t v55 = *(void *)(v24 - 8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v55 + 16))(a5, a1, v24);
  uint64_t v54 = type metadata accessor for MatchesIterator();
  uint64_t v25 = *(int *)(v54 + 36);
  uint64_t v66 = a5;
  uint64_t v67 = a3;
  uint64_t v26 = a5 + v25;
  uint64_t v27 = *(void *)(a3 - 8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v27 + 16))(v26, v69, a3);
  dispatch thunk of Collection.startIndex.getter();
  dispatch thunk of Collection.endIndex.getter();
  uint64_t result = dispatch thunk of static Comparable.<= infix(_:_:)();
  if (result)
  {
    uint64_t v51 = v27;
    uint64_t v52 = v24;
    uint64_t v29 = v53;
    uint64_t v30 = v16;
    uint64_t v31 = TupleTypeMetadata2;
    uint64_t v32 = v61;
    uint64_t v33 = &v61[*(int *)(TupleTypeMetadata2 + 48)];
    uint64_t v34 = v63;
    uint64_t v50 = a1;
    uint64_t v35 = *(void (**)(char *, char *, uint64_t))(v63 + 32);
    v35(v61, v18, AssociatedTypeWitness);
    uint64_t v36 = v33;
    v35(v33, v30, AssociatedTypeWitness);
    uint64_t v37 = &v29[*(int *)(v31 + 48)];
    uint64_t v38 = *(void (**)(char *, char *, uint64_t))(v34 + 16);
    v38(v29, v32, AssociatedTypeWitness);
    v38(v37, v36, AssociatedTypeWitness);
    uint64_t v39 = v56;
    v35(v56, v29, AssociatedTypeWitness);
    uint64_t v40 = *(void (**)(char *, uint64_t))(v34 + 8);
    v40(v37, AssociatedTypeWitness);
    uint64_t v41 = &v29[*(int *)(TupleTypeMetadata2 + 48)];
    v35(v29, v32, AssociatedTypeWitness);
    v35(v41, v36, AssociatedTypeWitness);
    uint64_t v42 = v64;
    v35(&v39[*(int *)(v64 + 36)], v41, AssociatedTypeWitness);
    v40(v29, AssociatedTypeWitness);
    uint64_t v43 = v62;
    uint64_t v44 = v60;
    (*(void (**)(char *, char *, uint64_t))(v62 + 32))(v60, v39, v42);
    uint64_t v45 = v57;
    uint64_t v46 = v50;
    uint64_t v47 = v69;
    uint64_t v48 = v67;
    (*(void (**)(uint64_t, char *, uint64_t))(v65 + 32))(v50, v44, v67);
    (*(void (**)(uint64_t, uint64_t))(v51 + 8))(v47, v48);
    (*(void (**)(uint64_t, uint64_t))(v55 + 8))(v46, v52);
    (*(void (**)(char *, uint64_t))(v43 + 8))(v44, v42);
    return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v58 + 32))(v66 + *(int *)(v54 + 40), v45, v59);
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t MatchesIterator.next()@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3 = v2;
  uint64_t v7 = *(void *)(a1 + 16);
  uint64_t v6 = *(void *)(a1 + 24);
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  type metadata accessor for Range();
  swift_getAssociatedTypeWitness();
  swift_getTupleTypeMetadata2();
  uint64_t v8 = type metadata accessor for Optional();
  uint64_t v9 = *(void *)(v8 - 8);
  MEMORY[0x270FA5388](v8);
  uint64_t v11 = &v15[-v10];
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v6 + 24))(v3, v3 + *(int *)(a1 + 40), v7, v6);
  uint64_t v21 = v7;
  uint64_t v22 = v6;
  uint64_t v23 = v3;
  uint64_t v16 = v7;
  uint64_t v17 = v6;
  uint64_t v18 = partial apply for closure #1 in MatchesIterator.next();
  uint64_t v19 = &v20;
  uint64_t matched = type metadata accessor for _MatchResult();
  _sSq3mapyqd_0_Sgqd_0_xqd__YKXEqd__YKs5ErrorRd__Ri_d_0_r0_lF((void (*)(char *, char *))partial apply for thunk for @callee_guaranteed (@in_guaranteed Range<A.CollectionSearcher.Searched.Collection.Index>, @in_guaranteed A.MatchingCollectionSearcher.Match) -> (@out _MatchResult<A>), (uint64_t)v15, MEMORY[0x263F8E628], matched, v13, a2);
  return (*(uint64_t (**)(unsigned char *, uint64_t))(v9 + 8))(v11, v8);
}

uint64_t closure #1 in MatchesIterator.next()@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  v16[0] = a3;
  v16[1] = a1;
  uint64_t v17 = a2;
  uint64_t v18 = a4;
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v5 = *(void *)(AssociatedTypeWitness - 8);
  MEMORY[0x270FA5388](AssociatedTypeWitness);
  uint64_t v7 = (char *)v16 - v6;
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  uint64_t v8 = swift_getAssociatedTypeWitness();
  MEMORY[0x270FA5388](v8 - 8);
  uint64_t v10 = (char *)v16 - v9;
  uint64_t v11 = swift_checkMetadataState();
  uint64_t v12 = *(void *)(v11 - 8);
  MEMORY[0x270FA5388](v11);
  uint64_t v14 = (char *)v16 - v13;
  (*(void (**)(char *, void, uint64_t))(v12 + 16))((char *)v16 - v13, v16[0], v11);
  dispatch thunk of Collection.subscript.getter();
  (*(void (**)(char *, uint64_t))(v12 + 8))(v14, v11);
  (*(void (**)(char *, uint64_t, uint64_t))(v5 + 16))(v7, v17, AssociatedTypeWitness);
  return _MatchResult.init(match:result:)((uint64_t)v10, (uint64_t)v7, v18);
}

uint64_t thunk for @callee_guaranteed (@in_guaranteed Range<A.CollectionSearcher.Searched.Collection.Index>, @in_guaranteed A.MatchingCollectionSearcher.Match) -> (@out _MatchResult<A>)(uint64_t a1, uint64_t (*a2)(uint64_t, uint64_t))
{
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  type metadata accessor for Range();
  swift_getAssociatedTypeWitness();
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
  return a2(a1, a1 + *(int *)(TupleTypeMetadata2 + 48));
}

uint64_t protocol witness for Sequence.makeIterator() in conformance MatchesCollection<A>(uint64_t a1, uint64_t a2)
{
  return protocol witness for Sequence.makeIterator() in conformance ReversedMatchesCollection<A>(a1, a2, (uint64_t)&protocol requirements base descriptor for CollectionSearcher, (uint64_t)&associated type descriptor for CollectionSearcher.Searched, (uint64_t (*)(char *, char *, uint64_t, uint64_t))MatchesIterator.init(base:searcher:));
}

uint64_t protocol witness for Sequence.makeIterator() in conformance ReversedMatchesCollection<A>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(char *, char *, uint64_t, uint64_t))
{
  MatchesCollection.makeIterator()(a1, a3, a4, a5);
  uint64_t v7 = *(uint64_t (**)(uint64_t, uint64_t))(*(void *)(a1 - 8) + 8);

  return v7(v5, a1);
}

uint64_t protocol witness for Sequence.underestimatedCount.getter in conformance MatchesCollection<A>(uint64_t a1)
{
  uint64_t WitnessTable = swift_getWitnessTable();

  return MEMORY[0x270F9E108](a1, WitnessTable);
}

uint64_t protocol witness for Sequence._copyToContiguousArray() in conformance MatchesCollection<A>(uint64_t a1)
{
  uint64_t WitnessTable = swift_getWitnessTable();

  return MEMORY[0x270F9E128](a1, WitnessTable);
}

uint64_t MatchesCollection.formIndex(after:)(uint64_t a1, uint64_t a2)
{
  uint64_t v6 = *(void *)(a2 + 16);
  uint64_t v5 = *(void *)(a2 + 24);
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  type metadata accessor for Range();
  swift_getAssociatedTypeWitness();
  swift_getTupleTypeMetadata2();
  uint64_t v7 = type metadata accessor for Optional();
  uint64_t v16 = *(void *)(v7 - 8);
  uint64_t v17 = v7;
  MEMORY[0x270FA5388](v7);
  uint64_t v9 = (char *)&v16 - v8;
  uint64_t v10 = type metadata accessor for MatchesCollection.Index();
  uint64_t v11 = *(void *)(v10 - 8);
  MEMORY[0x270FA5388](v10);
  uint64_t v13 = (char *)&v16 - v12;
  MatchesCollection.endIndex.getter(a2, (uint64_t)&v16 - v12);
  uint64_t v14 = a1;
  LOBYTE(a1) = static MatchesCollection.Index.== infix(_:_:)(a1, (uint64_t)v13);
  (*(void (**)(char *, uint64_t))(v11 + 8))(v13, v10);
  if (a1)
  {
    uint64_t result = _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
  }
  else
  {
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v5 + 24))(v2, v14 + *(int *)(v10 + 36), v6, v5);
    return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v16 + 40))(v14, v9, v17);
  }
  return result;
}

uint64_t RangesCollection.index(after:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t (*a3)(void, void, void)@<X2>, uint64_t (*a4)(uint64_t, uint64_t)@<X3>, uint64_t a5@<X8>)
{
  uint64_t v8 = a3(0, *(void *)(a2 + 16), *(void *)(a2 + 24));
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v8 - 8) + 16))(a5, a1, v8);

  return a4(a5, a2);
}

uint64_t MatchesCollection.subscript.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v49 = a3;
  uint64_t v5 = *(void *)(a2 + 16);
  uint64_t v4 = *(void *)(a2 + 24);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  uint64_t v8 = swift_getAssociatedTypeWitness();
  MEMORY[0x270FA5388](v8 - 8);
  uint64_t v46 = (char *)&v41 - v9;
  swift_getAssociatedTypeWitness();
  uint64_t v47 = AssociatedConformanceWitness;
  uint64_t v48 = AssociatedTypeWitness;
  swift_getAssociatedConformanceWitness();
  uint64_t v10 = type metadata accessor for Range();
  uint64_t v50 = v5;
  uint64_t v51 = v4;
  uint64_t v11 = swift_getAssociatedTypeWitness();
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
  uint64_t v13 = type metadata accessor for Optional();
  uint64_t v14 = *(void *)(v13 - 8);
  MEMORY[0x270FA5388](v13);
  uint64_t v16 = (char *)&v41 - v15;
  uint64_t v17 = swift_getTupleTypeMetadata2();
  uint64_t v18 = MEMORY[0x270FA5388](v17);
  char v20 = (char *)&v41 - v19;
  uint64_t v45 = v11;
  uint64_t v44 = *(void *)(v11 - 8);
  uint64_t v21 = MEMORY[0x270FA5388](v18);
  uint64_t v43 = (char *)&v41 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v23 = MEMORY[0x270FA5388](v21);
  uint64_t v42 = (char *)&v41 - v24;
  uint64_t v25 = *(void *)(v10 - 8);
  MEMORY[0x270FA5388](v23);
  uint64_t v41 = (char *)&v41 - v26;
  (*(void (**)(char *, uint64_t, uint64_t))(v14 + 16))(v16, a1, v13);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(void *)(TupleTypeMetadata2 - 8) + 48))(v16, 1, TupleTypeMetadata2) == 1)
  {
    (*(void (**)(char *, uint64_t))(v14 + 8))(v16, v13);
    uint64_t result = _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
  }
  else
  {
    uint64_t v27 = &v16[*(int *)(TupleTypeMetadata2 + 48)];
    uint64_t v28 = &v20[*(int *)(v17 + 48)];
    uint64_t v29 = *(void (**)(char *, char *, uint64_t))(v25 + 32);
    v29(v20, v16, v10);
    uint64_t v30 = v17;
    uint64_t v31 = v10;
    uint64_t v32 = *(void (**)(char *, char *, uint64_t))(v44 + 32);
    uint64_t v33 = v28;
    uint64_t v34 = v45;
    v32(v33, v27, v45);
    uint64_t v35 = &v20[*(int *)(v30 + 48)];
    uint64_t v36 = v41;
    v29(v41, v20, v31);
    uint64_t v37 = v42;
    v32(v42, v35, v34);
    swift_checkMetadataState();
    uint64_t v38 = (uint64_t)v46;
    dispatch thunk of Collection.subscript.getter();
    (*(void (**)(char *, uint64_t))(v25 + 8))(v36, v31);
    uint64_t v39 = (uint64_t)v43;
    v32(v43, v37, v34);
    return _MatchResult.init(match:result:)(v38, v39, v49);
  }
  return result;
}

uint64_t protocol witness for Collection.startIndex.getter in conformance MatchesCollection<A>@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return protocol witness for Collection.startIndex.getter in conformance RangesCollection<A>(a1, (uint64_t (*)(void, void, void))type metadata accessor for MatchesCollection.Index, a2);
}

uint64_t protocol witness for Collection.startIndex.getter in conformance RangesCollection<A>@<X0>(uint64_t a1@<X0>, uint64_t (*a2)(void, void, void)@<X2>, uint64_t a3@<X8>)
{
  uint64_t v5 = v3 + *(int *)(a1 + 40);
  uint64_t v6 = a2(0, *(void *)(a1 + 16), *(void *)(a1 + 24));
  uint64_t v7 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 16);

  return v7(a3, v5, v6);
}

uint64_t (*protocol witness for Collection.subscript.read in conformance MatchesCollection<A>(uint64_t **a1, uint64_t a2, uint64_t a3))()
{
  uint64_t v6 = (uint64_t *)malloc(0x28uLL);
  *a1 = v6;
  v6[4] = (uint64_t)MatchesCollection.subscript.read(v6, a2, a3);
  return protocol witness for Collection.subscript.read in conformance RangesCollection<A>;
}

uint64_t (*MatchesCollection.subscript.read(uint64_t *a1, uint64_t a2, uint64_t a3))()
{
  uint64_t matched = type metadata accessor for _MatchResult();
  *a1 = matched;
  uint64_t v7 = *(void *)(matched - 8);
  a1[1] = v7;
  uint64_t v8 = malloc(*(void *)(v7 + 64));
  a1[2] = (uint64_t)v8;
  MatchesCollection.subscript.getter(a2, a3, (uint64_t)v8);
  return RangesCollection.subscript.read;
}

uint64_t protocol witness for Collection._customIndexOfEquatableElement(_:) in conformance MatchesCollection<A>@<X0>(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  return protocol witness for Collection._customIndexOfEquatableElement(_:) in conformance RangesCollection<A>(a1, (void (*)(uint64_t, void, void))type metadata accessor for MatchesCollection.Index, a2);
}

uint64_t protocol witness for Collection._customIndexOfEquatableElement(_:) in conformance RangesCollection<A>@<X0>(uint64_t a1@<X1>, void (*a2)(uint64_t, void, void)@<X3>, uint64_t a3@<X8>)
{
  a2(255, *(void *)(a1 + 16), *(void *)(a1 + 24));
  uint64_t v4 = type metadata accessor for Optional();
  uint64_t v5 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 56);

  return v5(a3, 1, 1, v4);
}

uint64_t protocol witness for Collection.index(after:) in conformance MatchesCollection<A>@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  return RangesCollection.index(after:)(a1, a2, (uint64_t (*)(void, void, void))type metadata accessor for MatchesCollection.Index, MatchesCollection.formIndex(after:), a3);
}

uint64_t static MatchesCollection.Index.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v58 = a2;
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  uint64_t v51 = AssociatedTypeWitness;
  uint64_t v4 = type metadata accessor for Range();
  uint64_t v62 = *(void *)(v4 - 8);
  uint64_t v5 = MEMORY[0x270FA5388](v4);
  uint64_t v49 = (char *)&v47 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v5);
  uint64_t v48 = (char *)&v47 - v7;
  uint64_t v8 = type metadata accessor for Optional();
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
  MEMORY[0x270FA5388](TupleTypeMetadata2);
  uint64_t v59 = (char *)&v47 - v9;
  uint64_t v10 = swift_getAssociatedTypeWitness();
  uint64_t v11 = swift_getTupleTypeMetadata2();
  uint64_t v12 = type metadata accessor for Optional();
  uint64_t v13 = *(void *)(v12 - 8);
  uint64_t v14 = MEMORY[0x270FA5388](v12);
  uint64_t v16 = (char *)&v47 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v17 = MEMORY[0x270FA5388](v14);
  uint64_t v19 = (char *)&v47 - v18;
  uint64_t v60 = v8;
  uint64_t v56 = *(void *)(v8 - 8);
  uint64_t v20 = MEMORY[0x270FA5388](v17);
  uint64_t v55 = (char *)&v47 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v20);
  uint64_t v23 = (char *)&v47 - v22;
  uint64_t v54 = v13;
  uint64_t v53 = *(void (**)(char *, uint64_t, uint64_t))(v13 + 16);
  v53(v19, a1, v12);
  uint64_t v24 = *(uint64_t (**)(char *, uint64_t, uint64_t))(*(void *)(v11 - 8) + 48);
  int v25 = v24(v19, 1, v11);
  uint64_t v61 = v23;
  uint64_t v52 = v10;
  if (v25 == 1)
  {
    uint64_t v26 = v54;
    (*(void (**)(char *, uint64_t))(v54 + 8))(v19, v12);
    uint64_t v27 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v62 + 56);
    v27(v23, 1, 1, v4);
    uint64_t v28 = v26;
  }
  else
  {
    uint64_t v47 = &v19[*(int *)(v11 + 48)];
    uint64_t v29 = v62;
    (*(void (**)(char *, char *, uint64_t))(v62 + 32))(v61, v19, v4);
    uint64_t v27 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v29 + 56);
    v27(v61, 0, 1, v4);
    (*(void (**)(char *, uint64_t))(*(void *)(v10 - 8) + 8))(v47, v10);
    uint64_t v28 = v54;
  }
  v53(v16, v58, v12);
  if (v24(v16, 1, v11) == 1)
  {
    (*(void (**)(char *, uint64_t))(v28 + 8))(v16, v12);
    uint64_t v30 = (void *)v62;
    uint64_t v31 = v55;
    v27(v55, 1, 1, v4);
  }
  else
  {
    uint64_t v32 = &v16[*(int *)(v11 + 48)];
    uint64_t v30 = (void *)v62;
    uint64_t v31 = v55;
    (*(void (**)(char *, char *, uint64_t))(v62 + 32))(v55, v16, v4);
    v27(v31, 0, 1, v4);
    (*(void (**)(char *))(*(void *)(v52 - 8) + 8))(v32);
  }
  uint64_t v34 = v59;
  uint64_t v33 = v60;
  uint64_t v35 = v56;
  uint64_t v36 = &v59[*(int *)(TupleTypeMetadata2 + 48)];
  uint64_t v37 = *(void (**)(char *, char *, uint64_t))(v56 + 32);
  v37(v59, v61, v60);
  v37(v36, v31, v33);
  uint64_t v38 = (uint64_t (*)(char *, uint64_t, uint64_t))v30[6];
  int v39 = v38(v34, 1, v4);
  int v40 = v38(v36, 1, v4);
  if (v39 != 1)
  {
    if (v40 != 1)
    {
      uint64_t v42 = (void (*)(char *, char *, uint64_t))v30[4];
      uint64_t v43 = v48;
      v42(v48, v34, v4);
      uint64_t v44 = v49;
      v42(v49, v36, v4);
      char v41 = dispatch thunk of static Equatable.== infix(_:_:)();
      uint64_t v45 = (void (*)(char *, uint64_t))v30[1];
      v45(v44, v4);
      v45(v43, v4);
      return v41 & 1;
    }
    ((void (*)(char *, uint64_t))v30[1])(v34, v4);
    goto LABEL_13;
  }
  if (v40 != 1)
  {
    (*(void (**)(char *, uint64_t))(v35 + 8))(v36, v33);
LABEL_13:
    char v41 = 0;
    return v41 & 1;
  }
  char v41 = 1;
  return v41 & 1;
}

uint64_t static MatchesCollection.Index.< infix(_:_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v55 = a2;
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  uint64_t v48 = AssociatedTypeWitness;
  uint64_t v4 = type metadata accessor for Range();
  uint64_t v59 = *(void *)(v4 - 8);
  uint64_t v5 = MEMORY[0x270FA5388](v4);
  uint64_t v46 = (char *)&v44 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v5);
  uint64_t v45 = (char *)&v44 - v7;
  uint64_t v8 = type metadata accessor for Optional();
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
  MEMORY[0x270FA5388](TupleTypeMetadata2);
  uint64_t v56 = (char *)&v44 - v9;
  uint64_t v52 = swift_getAssociatedTypeWitness();
  uint64_t v10 = swift_getTupleTypeMetadata2();
  uint64_t v11 = type metadata accessor for Optional();
  uint64_t v12 = *(void *)(v11 - 8);
  uint64_t v13 = MEMORY[0x270FA5388](v11);
  uint64_t v15 = (char *)&v44 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v16 = MEMORY[0x270FA5388](v13);
  uint64_t v18 = (char *)&v44 - v17;
  uint64_t v57 = v8;
  uint64_t v53 = *(void *)(v8 - 8);
  uint64_t v19 = MEMORY[0x270FA5388](v16);
  uint64_t v51 = (char *)&v44 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v19);
  uint64_t v22 = (char *)&v44 - v21;
  uint64_t v49 = *(void (**)(char *, uint64_t, uint64_t))(v12 + 16);
  v49(v18, a1, v11);
  uint64_t v23 = *(uint64_t (**)(char *, uint64_t, uint64_t))(*(void *)(v10 - 8) + 48);
  int v24 = v23(v18, 1, v10);
  uint64_t v58 = v22;
  uint64_t v50 = v12;
  if (v24 == 1)
  {
    (*(void (**)(char *, uint64_t))(v12 + 8))(v18, v11);
    int v25 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v59 + 56);
    v25(v22, 1, 1, v4);
  }
  else
  {
    uint64_t v26 = &v18[*(int *)(v10 + 48)];
    uint64_t v27 = v59;
    (*(void (**)(char *, char *, uint64_t))(v59 + 32))(v58, v18, v4);
    int v25 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v27 + 56);
    v25(v58, 0, 1, v4);
    (*(void (**)(char *))(*(void *)(v52 - 8) + 8))(v26);
  }
  uint64_t v28 = v4;
  v49(v15, v55, v11);
  if (v23(v15, 1, v10) == 1)
  {
    (*(void (**)(char *, uint64_t))(v50 + 8))(v15, v11);
    uint64_t v29 = (void *)v59;
    uint64_t v30 = v51;
    v25(v51, 1, 1, v28);
  }
  else
  {
    uint64_t v31 = &v15[*(int *)(v10 + 48)];
    uint64_t v29 = (void *)v59;
    uint64_t v30 = v51;
    (*(void (**)(char *, char *, uint64_t))(v59 + 32))(v51, v15, v28);
    v25(v30, 0, 1, v28);
    (*(void (**)(char *))(*(void *)(v52 - 8) + 8))(v31);
  }
  uint64_t v33 = v56;
  uint64_t v32 = v57;
  uint64_t v34 = v53;
  uint64_t v35 = &v56[*(int *)(TupleTypeMetadata2 + 48)];
  uint64_t v36 = *(void (**)(char *, char *, uint64_t))(v53 + 32);
  v36(v56, v58, v57);
  v36(v35, v30, v32);
  uint64_t v37 = (unsigned int (*)(char *, uint64_t, uint64_t))v29[6];
  if (v37(v33, 1, v28) == 1)
  {
    (*(void (**)(char *, uint64_t))(v34 + 8))(v35, v32);
    char v38 = 0;
  }
  else if (v37(v35, 1, v28) == 1)
  {
    (*(void (**)(char *, uint64_t))(v34 + 8))(v33, v32);
    char v38 = 1;
  }
  else
  {
    int v39 = (void (*)(char *, char *, uint64_t))v29[4];
    int v40 = v45;
    v39(v45, v33, v28);
    char v41 = v46;
    v39(v46, v35, v28);
    char v38 = dispatch thunk of static Comparable.< infix(_:_:)();
    uint64_t v42 = (void (*)(char *, uint64_t))v29[1];
    v42(v41, v28);
    v42(v40, v28);
  }
  return v38 & 1;
}

uint64_t protocol witness for static Comparable.< infix(_:_:) in conformance MatchesCollection<A>.Index(uint64_t a1, uint64_t a2)
{
  return static MatchesCollection.Index.< infix(_:_:)(a1, a2);
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance MatchesCollection<A>.Index(uint64_t a1, uint64_t a2)
{
  return static MatchesCollection.Index.== infix(_:_:)(a1, a2);
}

uint64_t ReversedMatchesCollection.Iterator.init(base:searcher:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v67 = a4;
  uint64_t v69 = a2;
  uint64_t v8 = *(void *)(a4 + 8);
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
  uint64_t v10 = MEMORY[0x270FA5388](TupleTypeMetadata2);
  uint64_t v53 = (char *)&v49 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = MEMORY[0x270FA5388](v10);
  uint64_t v61 = (char *)&v49 - v13;
  uint64_t v63 = *(void *)(AssociatedTypeWitness - 8);
  uint64_t v14 = MEMORY[0x270FA5388](v12);
  uint64_t v16 = (char *)&v49 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v14);
  uint64_t v18 = (char *)&v49 - v17;
  swift_getAssociatedConformanceWitness();
  uint64_t v64 = type metadata accessor for Range();
  uint64_t v62 = *(void *)(v64 - 8);
  uint64_t v19 = MEMORY[0x270FA5388](v64);
  uint64_t v56 = (char *)&v49 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v19);
  uint64_t v60 = (char *)&v49 - v21;
  uint64_t v65 = v8;
  uint64_t v22 = swift_getAssociatedTypeWitness();
  uint64_t v58 = *(void *)(v22 - 8);
  uint64_t v59 = v22;
  MEMORY[0x270FA5388](v22);
  uint64_t v57 = (char *)&v49 - v23;
  uint64_t v24 = swift_checkMetadataState();
  uint64_t v55 = *(void *)(v24 - 8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v55 + 16))(a5, a1, v24);
  uint64_t v54 = type metadata accessor for ReversedMatchesCollection.Iterator();
  uint64_t v25 = *(int *)(v54 + 36);
  uint64_t v66 = a5;
  uint64_t v67 = a3;
  uint64_t v26 = a5 + v25;
  uint64_t v27 = *(void *)(a3 - 8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v27 + 16))(v26, v69, a3);
  dispatch thunk of Collection.startIndex.getter();
  dispatch thunk of Collection.endIndex.getter();
  uint64_t result = dispatch thunk of static Comparable.<= infix(_:_:)();
  if (result)
  {
    uint64_t v51 = v27;
    uint64_t v52 = v24;
    uint64_t v29 = v53;
    uint64_t v30 = v16;
    uint64_t v31 = TupleTypeMetadata2;
    uint64_t v32 = v61;
    uint64_t v33 = &v61[*(int *)(TupleTypeMetadata2 + 48)];
    uint64_t v34 = v63;
    uint64_t v50 = a1;
    uint64_t v35 = *(void (**)(char *, char *, uint64_t))(v63 + 32);
    v35(v61, v18, AssociatedTypeWitness);
    uint64_t v36 = v33;
    v35(v33, v30, AssociatedTypeWitness);
    uint64_t v37 = &v29[*(int *)(v31 + 48)];
    char v38 = *(void (**)(char *, char *, uint64_t))(v34 + 16);
    v38(v29, v32, AssociatedTypeWitness);
    v38(v37, v36, AssociatedTypeWitness);
    int v39 = v56;
    v35(v56, v29, AssociatedTypeWitness);
    int v40 = *(void (**)(char *, uint64_t))(v34 + 8);
    v40(v37, AssociatedTypeWitness);
    char v41 = &v29[*(int *)(TupleTypeMetadata2 + 48)];
    v35(v29, v32, AssociatedTypeWitness);
    v35(v41, v36, AssociatedTypeWitness);
    uint64_t v42 = v64;
    v35(&v39[*(int *)(v64 + 36)], v41, AssociatedTypeWitness);
    v40(v29, AssociatedTypeWitness);
    uint64_t v43 = v62;
    uint64_t v44 = v60;
    (*(void (**)(char *, char *, uint64_t))(v62 + 32))(v60, v39, v42);
    uint64_t v45 = v57;
    uint64_t v46 = v50;
    uint64_t v47 = v69;
    uint64_t v48 = v67;
    (*(void (**)(uint64_t, char *, uint64_t))(v65 + 32))(v50, v44, v67);
    (*(void (**)(uint64_t, uint64_t))(v51 + 8))(v47, v48);
    (*(void (**)(uint64_t, uint64_t))(v55 + 8))(v46, v52);
    (*(void (**)(char *, uint64_t))(v43 + 8))(v44, v42);
    return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v58 + 32))(v66 + *(int *)(v54 + 40), v45, v59);
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t ReversedMatchesCollection.Iterator.next()@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3 = v2;
  uint64_t v7 = *(void *)(a1 + 16);
  uint64_t v6 = *(void *)(a1 + 24);
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  type metadata accessor for Range();
  swift_getAssociatedTypeWitness();
  swift_getTupleTypeMetadata2();
  uint64_t v8 = type metadata accessor for Optional();
  uint64_t v9 = *(void *)(v8 - 8);
  MEMORY[0x270FA5388](v8);
  uint64_t v11 = &v15[-v10];
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v6 + 24))(v3, v3 + *(int *)(a1 + 40), v7, v6);
  uint64_t v21 = v7;
  uint64_t v22 = v6;
  uint64_t v23 = v3;
  uint64_t v16 = v7;
  uint64_t v17 = v6;
  uint64_t v18 = partial apply for closure #1 in ReversedMatchesCollection.Iterator.next();
  uint64_t v19 = &v20;
  uint64_t matched = type metadata accessor for _BackwardMatchResult();
  _sSq3mapyqd_0_Sgqd_0_xqd__YKXEqd__YKs5ErrorRd__Ri_d_0_r0_lF((void (*)(char *, char *))partial apply for thunk for @callee_guaranteed (@in_guaranteed Range<A.BackwardCollectionSearcher.BackwardSearched.Collection.Index>, @in_guaranteed A.BackwardMatchingCollectionSearcher.Match) -> (@out _BackwardMatchResult<A>), (uint64_t)v15, MEMORY[0x263F8E628], matched, v13, a2);
  return (*(uint64_t (**)(unsigned char *, uint64_t))(v9 + 8))(v11, v8);
}

uint64_t closure #1 in ReversedMatchesCollection.Iterator.next()@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  v16[0] = a3;
  v16[1] = a1;
  uint64_t v17 = a2;
  uint64_t v18 = a4;
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v5 = *(void *)(AssociatedTypeWitness - 8);
  MEMORY[0x270FA5388](AssociatedTypeWitness);
  uint64_t v7 = (char *)v16 - v6;
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  uint64_t v8 = swift_getAssociatedTypeWitness();
  MEMORY[0x270FA5388](v8 - 8);
  uint64_t v10 = (char *)v16 - v9;
  uint64_t v11 = swift_checkMetadataState();
  uint64_t v12 = *(void *)(v11 - 8);
  MEMORY[0x270FA5388](v11);
  uint64_t v14 = (char *)v16 - v13;
  (*(void (**)(char *, void, uint64_t))(v12 + 16))((char *)v16 - v13, v16[0], v11);
  dispatch thunk of Collection.subscript.getter();
  (*(void (**)(char *, uint64_t))(v12 + 8))(v14, v11);
  (*(void (**)(char *, uint64_t, uint64_t))(v5 + 16))(v7, v17, AssociatedTypeWitness);
  return _BackwardMatchResult.init(match:result:)((uint64_t)v10, (uint64_t)v7, v18);
}

uint64_t thunk for @callee_guaranteed (@in_guaranteed Range<A.BackwardCollectionSearcher.BackwardSearched.Collection.Index>, @in_guaranteed A.BackwardMatchingCollectionSearcher.Match) -> (@out _BackwardMatchResult<A>)(uint64_t a1, uint64_t (*a2)(uint64_t, uint64_t))
{
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  type metadata accessor for Range();
  swift_getAssociatedTypeWitness();
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
  return a2(a1, a1 + *(int *)(TupleTypeMetadata2 + 48));
}

uint64_t MatchesCollection.makeIterator()(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(char *, char *, uint64_t, uint64_t))
{
  uint64_t v6 = v4;
  uint64_t v8 = *(void *)(a1 + 16);
  uint64_t v9 = *(void *)(v8 - 8);
  uint64_t v10 = MEMORY[0x270FA5388](a1);
  uint64_t v12 = (char *)&v19 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = *(void *)(v10 + 24);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  MEMORY[0x270FA5388](AssociatedTypeWitness);
  uint64_t v16 = (char *)&v19 - v15;
  (*(void (**)(char *, uint64_t))(v17 + 16))((char *)&v19 - v15, v6);
  (*(void (**)(char *, uint64_t, uint64_t))(v9 + 16))(v12, v6 + *(int *)(a1 + 36), v8);
  return a4(v16, v12, v8, v13);
}

uint64_t protocol witness for Sequence.makeIterator() in conformance ReversedMatchesCollection<A>(uint64_t a1, uint64_t a2)
{
  return protocol witness for Sequence.makeIterator() in conformance ReversedMatchesCollection<A>(a1, a2, (uint64_t)&protocol requirements base descriptor for BackwardCollectionSearcher, (uint64_t)&associated type descriptor for BackwardCollectionSearcher.BackwardSearched, (uint64_t (*)(char *, char *, uint64_t, uint64_t))ReversedMatchesCollection.Iterator.init(base:searcher:));
}

uint64_t protocol witness for Sequence._copyToContiguousArray() in conformance SplitCollection<A>(uint64_t a1)
{
  uint64_t v3 = specialized Sequence._copyToContiguousArray()();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(a1 - 8) + 8))(v1, a1);
  return v3;
}

uint64_t Regex._firstMatch(_:subjectBounds:searchBounds:)@<X0>(unint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, unint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X8>)
{
  uint64_t v23 = a6;
  unint64_t v22 = a5;
  uint64_t v13 = type metadata accessor for Executor(0);
  MEMORY[0x270FA5388](v13 - 8);
  uint64_t v15 = (char *)&v21 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v16 = *v7;
  swift_retain();
  Regex.Program.loweredProgram.getter((uint64_t)v15);
  swift_release();
  swift_retain();
  uint64_t v24 = v16;
  uint64_t v17 = Regex.initialOptions.getter();
  uint64_t result = swift_release();
  uint64_t v19 = *(void *)(v17 + 16);
  if (v19)
  {
    unsigned int v20 = *(_DWORD *)(v17 + 4 * v19 + 28);
    swift_bridgeObjectRelease();
    Executor.firstMatch<A>(_:subjectBounds:searchBounds:graphemeSemantic:)(a1, a2, a3, a4, v22, v23, HIWORD(v20) & 1, a7);
    return outlined destroy of MEProgram((uint64_t)v15, type metadata accessor for Executor);
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t RegexMatchesCollection.searchIndex(after:)(uint64_t a1)
{
  unint64_t v2 = *(void *)(a1 + 32);
  uint64_t v3 = *(void *)(a1 + 24) >> 14;
  if (v3 != v2 >> 14) {
    return v2;
  }
  unint64_t v5 = *v1;
  unint64_t v4 = v1[1];
  uint64_t v6 = HIBYTE(v4) & 0xF;
  if ((v4 & 0x2000000000000000) == 0) {
    uint64_t v6 = *v1 & 0xFFFFFFFFFFFFLL;
  }
  if (v3 == 4 * v6) {
    return 0;
  }
  v17[0] = v1[6];
  uint64_t v7 = Regex.initialOptions.getter();
  uint64_t v8 = *(void *)(v7 + 16);
  if (!v8)
  {
    __break(1u);
    return String.UnicodeScalarView._foreignIndex(after:)();
  }
  int v9 = *(_DWORD *)(v7 + 4 * v8 + 28);
  swift_bridgeObjectRelease();
  if ((v9 & 0x10000) != 0) {
    return String.index(after:)();
  }
  unint64_t v10 = _StringGuts.validateScalarIndex(_:)(v2, v5, v4);
  if ((v4 & 0x1000000000000000) != 0) {
    return String.UnicodeScalarView._foreignIndex(after:)();
  }
  unint64_t v11 = v10 >> 16;
  if ((v4 & 0x2000000000000000) != 0)
  {
    v17[0] = v5;
    v17[1] = v4 & 0xFFFFFFFFFFFFFFLL;
    int v12 = *((unsigned __int8 *)v17 + v11);
  }
  else if ((v5 & 0x1000000000000000) != 0)
  {
    int v12 = *(unsigned __int8 *)((v4 & 0xFFFFFFFFFFFFFFFLL) + 0x20 + (v10 >> 16));
  }
  else
  {
    int v12 = *(unsigned __int8 *)(_StringObject.sharedUTF8.getter() + v11);
  }
  int v14 = (char)v12;
  unsigned int v15 = __clz(v12 ^ 0xFF) - 24;
  if (v14 >= 0) {
    LOBYTE(v15) = 1;
  }
  return ((v11 + v15) << 16) | 5;
}

uint64_t Regex.initialOptions.getter()
{
  uint64_t v0 = type metadata accessor for MEProgram(0);
  uint64_t v1 = v0 - 8;
  MEMORY[0x270FA5388](v0);
  uint64_t v3 = (char *)&v6 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  Regex.Program.loweredProgram.getter((uint64_t)v3);
  uint64_t v4 = *(void *)&v3[*(int *)(v1 + 72)];
  swift_bridgeObjectRetain();
  outlined destroy of MEProgram((uint64_t)v3, type metadata accessor for MEProgram);
  return v4;
}

uint64_t RegexMatchesCollection.Iterator.init(_:)@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v37 = a2;
  uint64_t v36 = *a1;
  uint64_t v35 = a1[1];
  uint64_t v34 = a1[2];
  uint64_t v32 = a1[3];
  uint64_t v39 = a1[4];
  uint64_t v33 = a1[5];
  uint64_t v4 = a1[7];
  uint64_t v31 = a1[6];
  uint64_t v5 = a1[8];
  uint64_t v6 = a1[9];
  uint64_t v8 = a1[10];
  uint64_t v7 = a1[11];
  char v45 = 1;
  if (v5) {
    uint64_t v9 = v4;
  }
  else {
    uint64_t v9 = 0;
  }
  if (v5) {
    uint64_t v10 = v6;
  }
  else {
    uint64_t v10 = 0;
  }
  if (v5) {
    uint64_t v11 = v8;
  }
  else {
    uint64_t v11 = 0;
  }
  if (v5) {
    uint64_t v12 = v7;
  }
  else {
    uint64_t v12 = 0;
  }
  uint64_t v38 = v4;
  outlined copy of RegexMatchesCollection<A>.Index<A>(v4, v5);
  uint64_t v40 = v9;
  uint64_t v41 = v5;
  uint64_t v13 = v5;
  uint64_t v42 = v10;
  uint64_t v43 = v11;
  uint64_t v44 = v12;
  uint64_t v14 = v36;
  uint64_t v15 = v35;
  uint64_t v46 = v36;
  uint64_t v47 = v35;
  uint64_t v16 = v34;
  uint64_t v48 = v34;
  uint64_t v49 = v32;
  uint64_t v17 = v33;
  uint64_t v50 = v39;
  uint64_t v51 = v33;
  uint64_t v52 = v31;
  uint64_t v53 = v4;
  uint64_t v54 = v13;
  uint64_t v55 = v6;
  uint64_t v18 = v13;
  uint64_t v56 = v8;
  uint64_t v57 = v7;
  uint64_t v19 = (void *)swift_allocObject();
  v19[2] = v37;
  v19[3] = v14;
  v19[4] = v15;
  v19[5] = v16;
  uint64_t v20 = v32;
  uint64_t v21 = v39;
  v19[6] = v32;
  v19[7] = v21;
  v19[8] = v17;
  uint64_t v22 = v31;
  uint64_t v23 = v38;
  v19[9] = v31;
  v19[10] = v23;
  v19[11] = v18;
  v19[12] = v6;
  v19[13] = v8;
  v19[14] = v7;
  uint64_t v24 = outlined retain of RegexMatchesCollection<A>((uint64_t)&v46);
  MEMORY[0x270FA5388](v24);
  v30[2] = v37;
  v30[3] = partial apply for implicit closure #2 in implicit closure #1 in RegexMatchesCollection.Iterator.next();
  v30[4] = v19;
  type metadata accessor for Regex.Match();
  type metadata accessor for Optional();
  _sSq7flatMapyqd_0_SgABxqd__YKXEqd__YKs5ErrorRd__Ri_d_0_r0_lF((void (*)(char *, char *))partial apply for thunk for @callee_guaranteed (@in_guaranteed Regex<A>.Match) -> (@unowned String.Index?), (uint64_t)v30, MEMORY[0x263F8E628], MEMORY[0x263F8D2B0], v25, (uint64_t)&v46);
  outlined consume of Regex<A1.RegexOutput>.Match?<A><A1>(v40, v41);
  uint64_t result = swift_release();
  uint64_t v27 = v46;
  char v28 = v47;
  char v29 = v45;
  *(void *)a3 = v36;
  *(void *)(a3 + 8) = v35;
  *(void *)(a3 + 16) = v34;
  *(void *)(a3 + 24) = v20;
  *(void *)(a3 + 32) = v39;
  *(void *)(a3 + 40) = v33;
  *(void *)(a3 + 48) = v22;
  *(void *)(a3 + 56) = v38;
  *(void *)(a3 + 64) = v18;
  *(void *)(a3 + 72) = v6;
  *(void *)(a3 + 80) = v8;
  *(void *)(a3 + 88) = v7;
  *(unsigned char *)(a3 + 96) = v29;
  *(void *)(a3 + 104) = v27;
  *(unsigned char *)(a3 + 112) = v28;
  return result;
}

uint64_t _sSq7flatMapyqd_0_SgABxqd__YKXEqd__YKs5ErrorRd__Ri_d_0_r0_lF@<X0>(void (*a1)(char *, char *)@<X0>, uint64_t a2@<X1>, uint64_t a3@<X3>, uint64_t a4@<X4>, uint64_t a5@<X6>, uint64_t a6@<X8>)
{
  uint64_t v29 = a2;
  uint64_t v30 = a1;
  uint64_t v10 = *(void *)(a3 - 8);
  uint64_t v27 = a5;
  uint64_t v28 = v10;
  uint64_t v11 = MEMORY[0x270FA5388](a1);
  uint64_t v13 = (char *)&v26 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v15 = *(void *)(v14 + 16);
  uint64_t v16 = *(void *)(v15 - 8);
  uint64_t v17 = MEMORY[0x270FA5388](v11);
  uint64_t v19 = (char *)&v26 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v17);
  uint64_t v21 = (char *)&v26 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t))(v22 + 16))(v21, v23);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v16 + 48))(v21, 1, v15) == 1) {
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(a4 - 8) + 56))(a6, 1, 1, a4);
  }
  uint64_t v25 = v28;
  (*(void (**)(char *, char *, uint64_t))(v16 + 32))(v19, v21, v15);
  v30(v19, v13);
  uint64_t result = (*(uint64_t (**)(char *, uint64_t))(v16 + 8))(v19, v15);
  if (v6) {
    return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v25 + 32))(v27, v13, a3);
  }
  return result;
}

uint64_t protocol witness for Sequence.makeIterator() in conformance RegexMatchesCollection<A>@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  RegexMatchesCollection.makeIterator()(a1, a2);
  uint64_t v3 = *(void *)(v2 + 56);
  uint64_t v4 = *(void *)(v2 + 64);
  swift_release();
  swift_bridgeObjectRelease();
  return outlined consume of Regex<A1.RegexOutput>.Match?<A><A1>(v3, v4);
}

uint64_t protocol witness for Sequence.underestimatedCount.getter in conformance RegexMatchesCollection<A>(uint64_t a1)
{
  uint64_t WitnessTable = swift_getWitnessTable();

  return MEMORY[0x270F9E108](a1, WitnessTable);
}

uint64_t protocol witness for Sequence._copyToContiguousArray() in conformance RegexMatchesCollection<A>(uint64_t a1)
{
  uint64_t WitnessTable = swift_getWitnessTable();

  return MEMORY[0x270F9E128](a1, WitnessTable);
}

BOOL static RegexMatchesCollection.Index.== infix(_:_:)(void *a1, void *a2)
{
  uint64_t v2 = a2[1];
  if (!a1[1]) {
    return v2 == 0;
  }
  if (v2) {
    BOOL v3 = (a1[3] ^ a2[3]) >> 14 == 0;
  }
  else {
    BOOL v3 = 0;
  }
  return v3 && (a2[4] ^ a1[4]) < 0x4000uLL;
}

uint64_t static RegexMatchesCollection.Index.< infix(_:_:)(void *a1, void *a2)
{
  if (!a1[1]) {
    return 0;
  }
  if (!a2[1]) {
    return 1;
  }
  unint64_t v2 = a1[3] >> 14;
  unint64_t v3 = a2[3] >> 14;
  if (v2 == v3) {
    return a1[4] >> 14 < a2[4] >> 14;
  }
  else {
    return v2 < v3;
  }
}

uint64_t (*protocol witness for Collection.subscript.read in conformance RegexMatchesCollection<A>(uint64_t ***a1, uint64_t a2))()
{
  uint64_t v4 = (uint64_t **)malloc(0x28uLL);
  *a1 = v4;
  v4[4] = (uint64_t *)RegexMatchesCollection.subscript.read(v4, a2);
  return protocol witness for Collection.subscript.read in conformance RangesCollection<A>;
}

void (*RegexMatchesCollection.subscript.read(uint64_t **a1, uint64_t a2))(void **a1)
{
  uint64_t v4 = (uint64_t *)malloc(0x28uLL);
  *a1 = v4;
  uint64_t v5 = *(void *)(a2 + 32);
  long long v6 = *(_OWORD *)(a2 + 16);
  v8[0] = *(_OWORD *)a2;
  v8[1] = v6;
  uint64_t v9 = v5;
  RegexMatchesCollection.subscript.getter((uint64_t *)v8, v4);
  return RegexMatchesCollection.subscript.read;
}

void RegexMatchesCollection.subscript.read(void **a1)
{
  uint64_t v1 = *a1;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  free(v1);
}

double protocol witness for Collection.formIndex(after:) in conformance RegexMatchesCollection<A>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return protocol witness for Collection.formIndex(after:) in conformance RegexRangesCollection<A>(a1, a2, a3, (void (*)(_OWORD *__return_ptr))RegexMatchesCollection.index(after:));
}

double protocol witness for Collection.formIndex(after:) in conformance RegexRangesCollection<A>(uint64_t a1, uint64_t a2, uint64_t a3, void (*a4)(_OWORD *__return_ptr))
{
  a4(v8);
  outlined consume of Regex<A1.RegexOutput>.Match?<A><A1>(*(void *)a1, *(void *)(a1 + 8));
  uint64_t v5 = v9;
  double result = *(double *)v8;
  long long v7 = v8[1];
  *(_OWORD *)a1 = v8[0];
  *(_OWORD *)(a1 + 16) = v7;
  *(void *)(a1 + 32) = v5;
  return result;
}

uint64_t MatchingStatelessCollectionSearcher.matchingSearch(_:_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, void (*a4)(char *, char *, uint64_t)@<X3>, uint64_t a5@<X8>)
{
  uint64_t v115 = a4;
  uint64_t v119 = a1;
  uint64_t v123 = a5;
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  uint64_t v9 = swift_getAssociatedTypeWitness();
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
  uint64_t v10 = MEMORY[0x270FA5388](TupleTypeMetadata2);
  uint64_t v111 = (char *)&v90 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v10);
  uint64_t v110 = (char *)&v90 - v12;
  uint64_t v120 = swift_getAssociatedConformanceWitness();
  uint64_t v13 = type metadata accessor for Range();
  uint64_t v113 = a3;
  uint64_t v14 = swift_getAssociatedTypeWitness();
  uint64_t v124 = swift_getTupleTypeMetadata2();
  uint64_t v15 = type metadata accessor for Optional();
  uint64_t v104 = *(void *)(v15 - 8);
  uint64_t v105 = v15;
  MEMORY[0x270FA5388](v15);
  uint64_t v112 = (char *)&v90 - v16;
  uint64_t v103 = swift_getTupleTypeMetadata2();
  uint64_t v17 = MEMORY[0x270FA5388](v103);
  uint64_t v102 = (char *)&v90 - v18;
  uint64_t v117 = *(void *)(v14 - 8);
  uint64_t v19 = MEMORY[0x270FA5388](v17);
  uint64_t v116 = (char *)&v90 - v20;
  uint64_t v118 = v13;
  uint64_t v109 = *(void *)(v13 - 8);
  uint64_t v21 = MEMORY[0x270FA5388](v19);
  uint64_t v107 = (char *)&v90 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v23 = MEMORY[0x270FA5388](v21);
  uint64_t v108 = (char *)&v90 - v24;
  MEMORY[0x270FA5388](v23);
  uint64_t v106 = (char *)&v90 - v25;
  uint64_t v121 = AssociatedConformanceWitness;
  uint64_t v26 = type metadata accessor for DefaultSearcherState.Position();
  uint64_t v27 = *(void *)(v26 - 8);
  uint64_t v28 = MEMORY[0x270FA5388](v26);
  unint64_t v100 = (char *)&v90 - ((v29 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v30 = MEMORY[0x270FA5388](v28);
  uint64_t v32 = (char *)&v90 - v31;
  uint64_t v33 = *(void *)(v9 - 8);
  uint64_t v34 = MEMORY[0x270FA5388](v30);
  uint64_t v101 = (char *)&v90 - ((v35 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v34);
  uint64_t v37 = (char *)&v90 - v36;
  uint64_t v38 = a2;
  (*(void (**)(char *, uint64_t, uint64_t))(v27 + 16))(v32, a2, v26);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v33 + 48))(v32, 1, v9) == 1)
  {
    (*(void (**)(char *, uint64_t))(v27 + 8))(v32, v26);
    uint64_t v39 = *(void *)(v124 - 8);
    goto LABEL_6;
  }
  uint64_t v94 = v27;
  uint64_t v95 = v26;
  uint64_t v40 = *(void (**)(char *, char *, uint64_t))(v33 + 32);
  v40(v37, v32, v9);
  uint64_t v93 = AssociatedTypeWitness;
  uint64_t v41 = *(int *)(type metadata accessor for DefaultSearcherState() + 36);
  uint64_t v96 = v38;
  uint64_t v42 = v38 + v41;
  uint64_t result = dispatch thunk of static Comparable.<= infix(_:_:)();
  if (result)
  {
    uint64_t v99 = v14;
    uint64_t v44 = *(int *)(TupleTypeMetadata2 + 48);
    uint64_t v97 = v42;
    uint64_t v45 = TupleTypeMetadata2;
    uint64_t v46 = v110;
    uint64_t v47 = &v110[v44];
    v40(v110, v37, v9);
    uint64_t v48 = v9;
    uint64_t v50 = v33 + 16;
    uint64_t v49 = *(void (**)(char *, uint64_t, uint64_t))(v33 + 16);
    uint64_t v51 = v33;
    uint64_t v52 = v47;
    unint64_t v98 = v47;
    v49(v47, v97, v48);
    uint64_t v53 = v111;
    uint64_t v54 = &v111[*(int *)(v45 + 48)];
    v49(v111, (uint64_t)v46, v48);
    uint64_t v92 = v50;
    uint64_t v91 = (void (*)(uint64_t, char *, uint64_t))v49;
    v49(v54, (uint64_t)v52, v48);
    uint64_t v55 = v48;
    uint64_t v56 = v107;
    v40(v107, v53, v48);
    uint64_t v97 = v51;
    uint64_t v58 = v51 + 8;
    uint64_t v57 = *(void (**)(char *, uint64_t))(v51 + 8);
    v57(v54, v55);
    uint64_t v59 = &v53[*(int *)(TupleTypeMetadata2 + 48)];
    v40(v53, v46, v55);
    v40(v59, v98, v55);
    uint64_t v60 = v118;
    v40(&v56[*(int *)(v118 + 36)], v59, v55);
    uint64_t v111 = (char *)v57;
    v57(v53, v55);
    uint64_t v62 = v108;
    uint64_t v61 = v109;
    uint64_t v63 = *(void (**)(char *, char *, uint64_t))(v109 + 32);
    TupleTypeMetadata2 = v109 + 32;
    v63(v108, v56, v60);
    uint64_t v64 = v112;
    (*((void (**)(uint64_t, char *, uint64_t))v115 + 3))(v119, v62, v113);
    (*(void (**)(char *, uint64_t))(v61 + 8))(v62, v60);
    uint64_t v39 = *(void *)(v124 - 8);
    uint64_t v65 = v39;
    if ((*(unsigned int (**)(char *, uint64_t))(v39 + 48))(v64, 1) != 1)
    {
      uint64_t v113 = v58;
      uint64_t v68 = &v64[*(int *)(v124 + 48)];
      uint64_t v69 = v103;
      uint64_t v70 = *(int *)(v103 + 48);
      uint64_t v115 = v63;
      uint64_t v71 = v102;
      uint64_t v72 = &v102[v70];
      v115(v102, v64, v60);
      uint64_t v74 = v117 + 32;
      uint64_t v73 = *(void (**)(char *, char *, uint64_t))(v117 + 32);
      uint64_t v75 = v72;
      uint64_t v76 = v99;
      v73(v75, v68, v99);
      uint64_t v77 = &v71[*(int *)(v69 + 48)];
      uint64_t v78 = v106;
      uint64_t v79 = v71;
      uint64_t v80 = (void (*)(uint64_t, char *, uint64_t))v115;
      v115(v106, v79, v60);
      uint64_t v114 = (void (*)(uint64_t, char *, uint64_t))v73;
      v73(v116, v77, v76);
      if (Range.isEmpty.getter())
      {
        uint64_t v117 = v74;
        uint64_t v81 = v101;
        dispatch thunk of Collection.endIndex.getter();
        char v82 = dispatch thunk of static Equatable.== infix(_:_:)();
        ((void (*)(char *, uint64_t))v111)(v81, v55);
        if (v82)
        {
          uint64_t v83 = v96;
          (*(void (**)(uint64_t, uint64_t))(v94 + 8))(v96, v95);
          (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v97 + 56))(v83, 1, 1, v55);
        }
        else
        {
          uint64_t v88 = v100;
          dispatch thunk of Collection.index(after:)();
          (*(void (**)(char *, void, uint64_t, uint64_t))(v97 + 56))(v88, 0, 1, v55);
          (*(void (**)(uint64_t, char *, uint64_t))(v94 + 40))(v96, v88, v95);
        }
        uint64_t v66 = v123;
        uint64_t v85 = v118;
        uint64_t v86 = v99;
        uint64_t v87 = v106;
        uint64_t v80 = (void (*)(uint64_t, char *, uint64_t))v115;
      }
      else
      {
        uint64_t v84 = v96;
        (*(void (**)(uint64_t, uint64_t))(v94 + 8))(v96, v95);
        v91(v84, &v78[*(int *)(v60 + 36)], v55);
        (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v97 + 56))(v84, 0, 1, v55);
        uint64_t v66 = v123;
        uint64_t v85 = v60;
        uint64_t v86 = v99;
        uint64_t v87 = v78;
      }
      uint64_t v89 = v66 + *(int *)(v124 + 48);
      v80(v66, v87, v85);
      v114(v89, v116, v86);
      uint64_t v67 = 0;
      return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v65 + 56))(v66, v67, 1, v124);
    }
    (*(void (**)(char *, uint64_t))(v104 + 8))(v64, v105);
LABEL_6:
    uint64_t v66 = v123;
    uint64_t v65 = v39;
    uint64_t v67 = 1;
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v65 + 56))(v66, v67, 1, v124);
  }
  __break(1u);
  return result;
}

uint64_t BackwardMatchingStatelessCollectionSearcher.matchingSearchBack(_:_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, char *a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v109 = a4;
  uint64_t v111 = a1;
  uint64_t v116 = a5;
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  uint64_t v8 = *(void *)(AssociatedConformanceWitness + 8);
  uint64_t v9 = swift_getAssociatedTypeWitness();
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
  uint64_t v10 = MEMORY[0x270FA5388](TupleTypeMetadata2);
  uint64_t v106 = (char *)&v83 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v10);
  uint64_t v104 = (char *)&v83 - v12;
  uint64_t v112 = swift_getAssociatedConformanceWitness();
  uint64_t v13 = type metadata accessor for Range();
  uint64_t v108 = a3;
  uint64_t v14 = swift_getAssociatedTypeWitness();
  uint64_t v118 = swift_getTupleTypeMetadata2();
  uint64_t v99 = type metadata accessor for Optional();
  uint64_t v98 = *(void *)(v99 - 8);
  MEMORY[0x270FA5388](v99);
  uint64_t v107 = (char *)&v83 - v15;
  uint64_t v97 = swift_getTupleTypeMetadata2();
  uint64_t v16 = MEMORY[0x270FA5388](v97);
  uint64_t v96 = (char *)&v83 - v17;
  uint64_t v114 = *(void *)(v14 - 8);
  uint64_t v18 = MEMORY[0x270FA5388](v16);
  uint64_t v110 = (char *)&v83 - v19;
  uint64_t v115 = v13;
  uint64_t v103 = *(void *)(v13 - 8);
  uint64_t v20 = MEMORY[0x270FA5388](v18);
  uint64_t v101 = (char *)&v83 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v22 = MEMORY[0x270FA5388](v20);
  uint64_t v102 = (char *)&v83 - v23;
  MEMORY[0x270FA5388](v22);
  unint64_t v100 = (char *)&v83 - v24;
  uint64_t v113 = v8;
  uint64_t v25 = type metadata accessor for DefaultSearcherState.Position();
  uint64_t v26 = *(void *)(v25 - 8);
  uint64_t v27 = MEMORY[0x270FA5388](v25);
  uint64_t v93 = (char *)&v83 - ((v28 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v29 = MEMORY[0x270FA5388](v27);
  uint64_t v31 = (char *)&v83 - v30;
  uint64_t v32 = *(void *)(v9 - 8);
  uint64_t v33 = MEMORY[0x270FA5388](v29);
  uint64_t v95 = (char *)&v83 - ((v34 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v33);
  uint64_t v36 = (char *)&v83 - v35;
  (*(void (**)(char *, uint64_t, uint64_t))(v26 + 16))(v31, a2, v25);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v32 + 48))(v31, 1, v9) == 1)
  {
    (*(void (**)(char *, uint64_t))(v26 + 8))(v31, v25);
    uint64_t v37 = *(void *)(v118 - 8);
    goto LABEL_6;
  }
  uint64_t v88 = v26;
  uint64_t v89 = v25;
  uint64_t v38 = *(void (**)(char *, char *, uint64_t))(v32 + 32);
  v38(v36, v31, v9);
  uint64_t v86 = AssociatedTypeWitness;
  uint64_t v39 = *(int *)(type metadata accessor for DefaultSearcherState() + 36);
  uint64_t v90 = a2;
  uint64_t v40 = a2 + v39;
  uint64_t result = dispatch thunk of static Comparable.<= infix(_:_:)();
  if (result)
  {
    uint64_t v92 = v14;
    uint64_t v43 = v104;
    uint64_t v42 = TupleTypeMetadata2;
    uint64_t v44 = &v104[*(int *)(TupleTypeMetadata2 + 48)];
    uint64_t v117 = v9;
    uint64_t v45 = *(void (**)(char *, uint64_t, uint64_t))(v32 + 16);
    v45(v104, v40, v9);
    uint64_t v46 = v44;
    uint64_t v91 = v44;
    v38(v44, v36, v117);
    uint64_t v47 = v106;
    uint64_t v48 = &v106[*(int *)(v42 + 48)];
    v45(v106, (uint64_t)v43, v117);
    uint64_t v85 = v32 + 16;
    uint64_t v84 = (void (*)(uint64_t, char *, uint64_t))v45;
    v45(v48, (uint64_t)v46, v117);
    uint64_t v49 = v117;
    uint64_t v50 = v101;
    v38(v101, v47, v117);
    uint64_t v87 = v32;
    uint64_t v51 = *(void (**)(char *, uint64_t))(v32 + 8);
    v51(v48, v49);
    uint64_t v52 = &v47[*(int *)(v42 + 48)];
    v38(v47, v43, v49);
    v38(v52, v91, v49);
    uint64_t v53 = v115;
    v38(&v50[*(int *)(v115 + 36)], v52, v49);
    uint64_t v104 = (char *)(v32 + 8);
    TupleTypeMetadata2 = (uint64_t)v51;
    v51(v47, v49);
    uint64_t v55 = v102;
    uint64_t v54 = v103;
    uint64_t v56 = *(void (**)(char *, char *, uint64_t))(v103 + 32);
    uint64_t v106 = (char *)(v103 + 32);
    v56(v102, v50, v53);
    uint64_t v57 = v107;
    (*((void (**)(uint64_t, char *, uint64_t))v109 + 3))(v111, v55, v108);
    (*(void (**)(char *, uint64_t))(v54 + 8))(v55, v53);
    uint64_t v37 = *(void *)(v118 - 8);
    uint64_t v58 = v37;
    if ((*(unsigned int (**)(char *, uint64_t))(v37 + 48))(v57, 1) != 1)
    {
      uint64_t v109 = &v57[*(int *)(v118 + 48)];
      uint64_t v61 = v97;
      uint64_t v62 = v96;
      uint64_t v63 = &v96[*(int *)(v97 + 48)];
      v56(v96, v57, v53);
      uint64_t v64 = v114 + 32;
      uint64_t v65 = *(char **)(v114 + 32);
      uint64_t v66 = v63;
      uint64_t v67 = v92;
      ((void (*)(char *, char *, uint64_t))v65)(v66, v109, v92);
      uint64_t v68 = &v62[*(int *)(v61 + 48)];
      uint64_t v69 = v100;
      uint64_t v70 = v62;
      uint64_t v71 = (void (*)(uint64_t, char *, uint64_t))v56;
      v56(v100, v70, v53);
      uint64_t v114 = v64;
      uint64_t v109 = v65;
      ((void (*)(char *, char *, uint64_t))v65)(v110, v68, v67);
      uint64_t v72 = v69;
      if (Range.isEmpty.getter())
      {
        uint64_t v73 = v95;
        dispatch thunk of Collection.startIndex.getter();
        uint64_t v74 = v117;
        char v75 = dispatch thunk of static Equatable.== infix(_:_:)();
        ((void (*)(char *, uint64_t))TupleTypeMetadata2)(v73, v74);
        uint64_t v76 = v89;
        if (v75)
        {
          uint64_t v77 = v90;
          (*(void (**)(uint64_t, uint64_t))(v88 + 8))(v90, v89);
          (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v87 + 56))(v77, 1, 1, v74);
        }
        else
        {
          uint64_t v80 = v93;
          dispatch thunk of BidirectionalCollection.index(before:)();
          (*(void (**)(char *, void, uint64_t, uint64_t))(v87 + 56))(v80, 0, 1, v74);
          (*(void (**)(uint64_t, char *, uint64_t))(v88 + 40))(v90, v80, v76);
        }
      }
      else
      {
        uint64_t v78 = v90;
        (*(void (**)(uint64_t, uint64_t))(v88 + 8))(v90, v89);
        uint64_t v79 = v117;
        v84(v78, v69, v117);
        (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v87 + 56))(v78, 0, 1, v79);
      }
      uint64_t v59 = v116;
      uint64_t v81 = v92;
      uint64_t v82 = v116 + *(int *)(v118 + 48);
      v71(v116, v72, v115);
      ((void (*)(uint64_t, char *, uint64_t))v109)(v82, v110, v81);
      uint64_t v60 = 0;
      return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v58 + 56))(v59, v60, 1, v118);
    }
    (*(void (**)(char *, uint64_t))(v98 + 8))(v57, v99);
LABEL_6:
    uint64_t v59 = v116;
    uint64_t v58 = v37;
    uint64_t v60 = 1;
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v58 + 56))(v59, v60, 1, v118);
  }
  __break(1u);
  return result;
}

uint64_t DefaultSearcherState.init(position:end:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6 = type metadata accessor for DefaultSearcherState.Position();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 32))(a3, a1, v6);
  uint64_t v7 = a3 + *(int *)(type metadata accessor for DefaultSearcherState() + 36);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(AssociatedTypeWitness - 8) + 32);

  return v9(v7, a2, AssociatedTypeWitness);
}

uint64_t ConsumerSearcher.search(_:in:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, char *a4@<X8>)
{
  uint64_t v67 = a4;
  uint64_t v7 = *(char **)(a3 + 16);
  uint64_t v6 = *(void *)(a3 + 24);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  uint64_t v10 = swift_getAssociatedTypeWitness();
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
  uint64_t v11 = MEMORY[0x270FA5388](TupleTypeMetadata2);
  uint64_t v97 = (char *)&v65 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v11);
  uint64_t v96 = (char *)&v65 - v13;
  uint64_t v71 = AssociatedConformanceWitness;
  uint64_t v72 = AssociatedTypeWitness;
  uint64_t v14 = swift_getAssociatedConformanceWitness();
  uint64_t v15 = type metadata accessor for Range();
  uint64_t v68 = *(void *)(v15 - 8);
  uint64_t v16 = MEMORY[0x270FA5388](v15);
  uint64_t v88 = (char *)&v65 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v18 = MEMORY[0x270FA5388](v16);
  uint64_t v95 = (char *)&v65 - v19;
  uint64_t v20 = *((void *)v7 - 1);
  MEMORY[0x270FA5388](v18);
  uint64_t v22 = (char *)&v65 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v75 = type metadata accessor for Optional();
  uint64_t v101 = *(char **)(v75 - 8);
  uint64_t v23 = MEMORY[0x270FA5388](v75);
  uint64_t v87 = (char *)&v65 - v24;
  uint64_t v25 = MEMORY[0x270FA5388](v23);
  uint64_t v66 = (char *)&v65 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v25);
  uint64_t v28 = (char *)&v65 - v27;
  uint64_t v80 = (unsigned int (**)(char *, uint64_t, uint64_t))v29;
  uint64_t v93 = *(void (**)(char *, uint64_t, uint64_t))(v29 + 16);
  uint64_t v94 = v29 + 16;
  v93((char *)&v65 - v27, a2, v10);
  uint64_t v99 = v15;
  uint64_t v30 = (void (*)(char *, char *, uint64_t))(a2 + *(int *)(v15 + 36));
  uint64_t v89 = v6;
  uint64_t v85 = *(void (**)(void))(v6 + 24);
  uint64_t v86 = v6 + 24;
  uint64_t v31 = *(void (**)(char *, char *, char *))(v20 + 16);
  uint64_t v70 = v20 + 16;
  uint64_t v69 = v31;
  v31(v22, v90, v7);
  if (dispatch thunk of static Comparable.<= infix(_:_:)())
  {
    uint64_t v92 = (void (**)(char *, char *, uint64_t))(v80 + 4);
    uint64_t v98 = (void (**)(char *, uint64_t))(v80 + 1);
    uint64_t v91 = (void (**)(char *, char *, uint64_t))(v68 + 32);
    uint64_t v81 = (void (**)(char *, char *))(v20 + 8);
    uint64_t v82 = (void (**)(char *, uint64_t))(v68 + 8);
    v80 += 6;
    uint64_t v74 = (void (**)(char *, uint64_t))(v101 + 8);
    uint64_t v83 = v14;
    uint64_t v84 = v7;
    uint64_t v79 = v28;
    uint64_t v73 = v30;
    uint64_t v78 = v22;
    uint64_t v77 = a1;
    uint64_t v32 = v97;
    while (1)
    {
      uint64_t v33 = TupleTypeMetadata2;
      uint64_t v34 = v96;
      uint64_t v35 = &v96[*(int *)(TupleTypeMetadata2 + 48)];
      uint64_t v36 = v93;
      v93(v96, (uint64_t)v28, v10);
      uint64_t v101 = v35;
      v36(v35, (uint64_t)v30, v10);
      uint64_t v37 = &v32[*(int *)(v33 + 48)];
      v36(v32, (uint64_t)v34, v10);
      v36(v37, (uint64_t)v35, v10);
      uint64_t v38 = *v92;
      uint64_t v39 = v88;
      (*v92)(v88, v32, v10);
      uint64_t v40 = *v98;
      (*v98)(v37, v10);
      uint64_t v41 = &v32[*(int *)(v33 + 48)];
      v38(v32, v34, v10);
      v38(v41, v101, v10);
      uint64_t v42 = v99;
      uint64_t v43 = &v39[*(int *)(v99 + 36)];
      uint64_t v101 = (char *)v38;
      v38(v43, v41, v10);
      uint64_t v76 = v40;
      v40(v32, v10);
      uint64_t v30 = *v91;
      uint64_t v44 = v95;
      (*v91)(v95, v39, v42);
      uint64_t v7 = v87;
      uint64_t v45 = v84;
      uint64_t v46 = v78;
      v85();
      (*v82)(v44, v42);
      uint64_t v47 = v45;
      (*v81)(v46, v45);
      if ((*v80)(v7, 1, v10) != 1) {
        break;
      }
      (*v74)(v7, v75);
      uint64_t v28 = v79;
      uint64_t v30 = v73;
      if (dispatch thunk of static Equatable.== infix(_:_:)())
      {
        v76(v28, v10);
        uint64_t v64 = 1;
        uint64_t v63 = v67;
        uint64_t v62 = v99;
        return (*(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(v68 + 56))(v63, v64, 1, v62);
      }
      swift_checkMetadataState();
      dispatch thunk of Collection.formIndex(after:)();
      v69(v46, v90, v47);
      if ((dispatch thunk of static Comparable.<= infix(_:_:)() & 1) == 0) {
        goto LABEL_6;
      }
    }
  }
  else
  {
LABEL_6:
    __break(1u);
  }
  uint64_t v48 = v66;
  ((void (*)(char *, char *, uint64_t))v101)(v66, v7, v10);
  uint64_t v49 = v79;
  uint64_t result = dispatch thunk of static Comparable.<= infix(_:_:)();
  if (result)
  {
    uint64_t v51 = v49;
    uint64_t v52 = v101;
    uint64_t v53 = TupleTypeMetadata2;
    uint64_t v54 = v96;
    uint64_t v55 = &v96[*(int *)(TupleTypeMetadata2 + 48)];
    ((void (*)(char *, char *, uint64_t))v101)(v96, v51, v10);
    uint64_t v90 = v55;
    ((void (*)(char *, char *, uint64_t))v52)(v55, v48, v10);
    uint64_t v56 = v97;
    uint64_t v57 = &v97[*(int *)(v53 + 48)];
    uint64_t v58 = (void (*)(char *, char *, uint64_t))v93;
    v93(v97, (uint64_t)v54, v10);
    v58(v57, v55, v10);
    uint64_t v59 = v95;
    ((void (*)(char *, char *, uint64_t))v52)(v95, v56, v10);
    uint64_t v60 = v76;
    v76(v57, v10);
    uint64_t v61 = &v56[*(int *)(TupleTypeMetadata2 + 48)];
    ((void (*)(char *, char *, uint64_t))v52)(v56, v54, v10);
    ((void (*)(char *, char *, uint64_t))v52)(v61, v90, v10);
    uint64_t v62 = v99;
    ((void (*)(char *, char *, uint64_t))v52)(&v59[*(int *)(v99 + 36)], v61, v10);
    v60(v56, v10);
    uint64_t v63 = v67;
    v30(v67, v59, v62);
    uint64_t v64 = 0;
    return (*(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(v68 + 56))(v63, v64, 1, v62);
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t protocol witness for CollectionSearcher.state(for:in:) in conformance ConsumerSearcher<A>@<X0>(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  return StatelessCollectionSearcher.state(for:in:)(a1, a2);
}

uint64_t protocol witness for CollectionSearcher.search(_:_:) in conformance ConsumerSearcher<A>@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, char *a4@<X8>)
{
  uint64_t WitnessTable = swift_getWitnessTable();

  return StatelessCollectionSearcher.search(_:_:)(a1, a2, a3, WitnessTable, a4);
}

uint64_t protocol witness for BackwardCollectionSearcher.backwardState(for:in:) in conformance <> ConsumerSearcher<A>@<X0>(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  return BackwardStatelessCollectionSearcher.backwardState(for:in:)(a1, a2);
}

uint64_t ConsumerSearcher<>.matchingSearch(_:in:)@<X0>(char *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, char *a5@<X8>)
{
  uint64_t v122 = a1;
  uint64_t v83 = a5;
  uint64_t v7 = *(void *)(a3 + 16);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  uint64_t v10 = swift_getAssociatedTypeWitness();
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
  uint64_t v11 = MEMORY[0x270FA5388](TupleTypeMetadata2);
  uint64_t v113 = (char *)&v79 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v11);
  uint64_t v120 = (void (*)(char *, char *))((char *)&v79 - v13);
  uint64_t v87 = AssociatedConformanceWitness;
  uint64_t v88 = AssociatedTypeWitness;
  uint64_t v14 = swift_getAssociatedConformanceWitness();
  uint64_t v15 = type metadata accessor for Range();
  uint64_t v121 = *(void *)(v15 - 8);
  uint64_t v16 = MEMORY[0x270FA5388](v15);
  uint64_t v106 = (char *)&v79 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v18 = MEMORY[0x270FA5388](v16);
  uint64_t v117 = (char *)&v79 - v19;
  uint64_t v20 = *(void *)(v7 - 8);
  MEMORY[0x270FA5388](v18);
  uint64_t v22 = (char *)&v79 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v23 = (void (*)(char *, char *, uint64_t))swift_getAssociatedTypeWitness();
  uint64_t v119 = swift_getTupleTypeMetadata2();
  uint64_t v93 = type metadata accessor for Optional();
  uint64_t v98 = *(void *)(v93 - 8);
  MEMORY[0x270FA5388](v93);
  uint64_t v105 = (char *)&v79 - v24;
  uint64_t v115 = swift_getTupleTypeMetadata2();
  uint64_t v92 = type metadata accessor for Optional();
  uint64_t v90 = *(void (***)(char *, uint64_t))(v92 - 8);
  uint64_t v25 = MEMORY[0x270FA5388](v92);
  uint64_t v104 = (char *)&v79 - v26;
  uint64_t v84 = *((void *)v23 - 1);
  uint64_t v27 = MEMORY[0x270FA5388](v25);
  uint64_t v82 = (char *)&v79 - v28;
  uint64_t v29 = MEMORY[0x270FA5388](v27);
  uint64_t v81 = (char *)&v79 - ((v30 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v29);
  uint64_t v32 = (char *)&v79 - v31;
  uint64_t v114 = (void (**)(char *, char *))v33;
  uint64_t v111 = *(void (**)(char *, uint64_t, uint64_t))(v33 + 16);
  uint64_t v112 = v33 + 16;
  v111((char *)&v79 - v31, a2, v10);
  uint64_t v123 = v15;
  uint64_t v34 = (void (*)(char *, char *))(a2 + *(int *)(v15 + 36));
  uint64_t v107 = a4;
  uint64_t v102 = *(void (**)(char *, char *, uint64_t, uint64_t))(a4 + 24);
  uint64_t v103 = a4 + 24;
  uint64_t v35 = *(void (**)(char *, uint64_t, uint64_t))(v20 + 16);
  uint64_t v86 = v20 + 16;
  uint64_t v85 = v35;
  v35(v22, v108, v7);
  if (dispatch thunk of static Comparable.<= infix(_:_:)())
  {
    uint64_t v116 = (void (**)(char *, char *, char *))(v114 + 4);
    ++v114;
    uint64_t v109 = (void (**)(char *, char *, uint64_t))(v121 + 32);
    uint64_t v97 = (void (**)(char *, uint64_t))(v121 + 8);
    uint64_t v96 = (void (**)(char *, uint64_t))(v20 + 8);
    uint64_t v95 = v119 - 8;
    uint64_t v91 = (void (**)(uint64_t, uint64_t))(v98 + 8);
    uint64_t v98 = v115 - 8;
    ++v90;
    uint64_t v110 = v23;
    uint64_t v101 = v14;
    uint64_t v100 = v7;
    uint64_t v99 = v32;
    uint64_t v89 = v34;
    uint64_t v94 = v22;
    while (1)
    {
      uint64_t v36 = TupleTypeMetadata2;
      uint64_t v37 = v120;
      uint64_t v38 = (char *)v120 + *(int *)(TupleTypeMetadata2 + 48);
      uint64_t v39 = (void (*)(char *, void (*)(char *, char *), uint64_t))v111;
      v111((char *)v120, (uint64_t)v32, v10);
      uint64_t v121 = (uint64_t)v38;
      v39(v38, v34, v10);
      uint64_t v40 = v113;
      uint64_t v41 = &v113[*(int *)(v36 + 48)];
      v39(v113, v37, v10);
      v39(v41, (void (*)(char *, char *))v38, v10);
      uint64_t v42 = *v116;
      uint64_t v22 = (char *)v10;
      uint64_t v43 = v106;
      (*v116)(v106, v40, v22);
      uint64_t v44 = *v114;
      (*v114)(v41, v22);
      uint64_t v45 = *(int *)(v36 + 48);
      uint64_t v46 = v100;
      uint64_t v47 = &v40[v45];
      v42(v40, (char *)v37, v22);
      v42(v47, (char *)v121, v22);
      uint64_t v48 = v47;
      uint64_t v32 = (char *)v42;
      v42(&v43[*(int *)(v123 + 36)], v48, v22);
      uint64_t v49 = v40;
      uint64_t v50 = v123;
      uint64_t v34 = v44;
      v44(v49, v22);
      uint64_t v23 = *v109;
      uint64_t v51 = v117;
      (*v109)(v117, v43, v50);
      uint64_t v10 = (uint64_t)v105;
      uint64_t v52 = v94;
      v102(v122, v51, v46, v107);
      (*v97)(v51, v50);
      uint64_t v53 = v46;
      (*v96)(v52, v46);
      if ((*(unsigned int (**)(uint64_t, uint64_t))(*(void *)(v119 - 8) + 48))(v10, 1) != 1) {
        break;
      }
      (*v91)(v10, v93);
      uint64_t v54 = v104;
      (*(void (**)(char *, uint64_t, uint64_t))(*(void *)(v115 - 8) + 56))(v104, 1, 1);
      (*v90)(v54, v92);
      uint64_t v32 = v99;
      uint64_t v55 = v89;
      char v56 = dispatch thunk of static Equatable.== infix(_:_:)();
      uint64_t v23 = v110;
      uint64_t v10 = (uint64_t)v22;
      if (v56)
      {
        v34(v32, v22);
        uint64_t v78 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(swift_getTupleTypeMetadata2() - 8) + 56);
        return v78((uint64_t)v83, 1, 1);
      }
      swift_checkMetadataState();
      dispatch thunk of Collection.formIndex(after:)();
      v85(v52, v108, v53);
      uint64_t v34 = v55;
      if ((dispatch thunk of static Comparable.<= infix(_:_:)() & 1) == 0) {
        goto LABEL_6;
      }
    }
  }
  else
  {
LABEL_6:
    __break(1u);
  }
  uint64_t v122 = (char *)(v10 + *(int *)(v119 + 48));
  uint64_t v57 = v115;
  uint64_t v58 = v104;
  uint64_t v59 = &v104[*(int *)(v115 + 48)];
  uint64_t v80 = (void (*)(char *, char *, char *))v32;
  ((void (*)(char *, uint64_t, char *))v32)(v104, v10, v22);
  uint64_t v61 = v84 + 32;
  uint64_t v60 = *(char **)(v84 + 32);
  uint64_t v62 = v59;
  uint64_t v63 = v110;
  ((void (*)(char *, char *, void))v60)(v62, v122, v110);
  (*(void (**)(char *, void, uint64_t, uint64_t))(*(void *)(v57 - 8) + 56))(v58, 0, 1, v57);
  uint64_t v122 = &v58[*(int *)(v57 + 48)];
  v80(v81, v58, v22);
  uint64_t v64 = v122;
  uint64_t v84 = v61;
  uint64_t v122 = v60;
  ((void (*)(char *, char *, void))v60)(v82, v64, v63);
  uint64_t v121 = swift_getTupleTypeMetadata2();
  uint64_t v65 = *(int *)(v121 + 48);
  uint64_t result = dispatch thunk of static Comparable.<= infix(_:_:)();
  if (result)
  {
    uint64_t v119 = (uint64_t)&v83[v65];
    uint64_t v67 = TupleTypeMetadata2;
    uint64_t v68 = (char *)v120 + *(int *)(TupleTypeMetadata2 + 48);
    uint64_t v69 = (void (*)(char *, char *, char *))v32;
    ((void (*)(void))v32)();
    uint64_t v115 = (uint64_t)v68;
    ((void (*)(char *, char *, char *))v32)(v68, v81, v22);
    uint64_t v70 = v113;
    uint64_t v71 = &v113[*(int *)(v67 + 48)];
    uint64_t v72 = (void (*)(char *, char *, char *))v111;
    v111(v113, (uint64_t)v120, (uint64_t)v22);
    v72(v71, v68, v22);
    v69(v117, v70, v22);
    uint64_t v73 = v34;
    v34(v71, v22);
    uint64_t v74 = v123;
    uint64_t v75 = &v70[*(int *)(TupleTypeMetadata2 + 48)];
    v69(v70, (char *)v120, v22);
    v69(v75, (char *)v115, v22);
    uint64_t v76 = v117;
    v69(&v117[*(int *)(v74 + 36)], v75, v22);
    v73(v70, v22);
    uint64_t v77 = v83;
    v23(v83, v76, v74);
    ((void (*)(uint64_t, char *, void))v122)(v119, v82, v110);
    return (*(uint64_t (**)(char *, void, uint64_t))(*(void *)(v121 - 8) + 56))(v77, 0, 1);
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t protocol witness for MatchingCollectionSearcher.matchingSearch(_:_:) in conformance <> ConsumerSearcher<A>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return protocol witness for MatchingCollectionSearcher.matchingSearch(_:_:) in conformance <> ConsumerSearcher<A>(a1, a2, a3, a4, (uint64_t)&protocol conformance descriptor for <> ConsumerSearcher<A>, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))MatchingStatelessCollectionSearcher.matchingSearch(_:_:));
}

uint64_t protocol witness for MatchingStatelessCollectionSearcher.matchingSearch(_:in:) in conformance <> ConsumerSearcher<A>@<X0>(char *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, char *a5@<X8>)
{
  return ConsumerSearcher<>.matchingSearch(_:in:)(a1, a2, a3, *(void *)(a4 - 8), a5);
}

uint64_t ConsumerSearcher<>.matchingSearchBack(_:in:)@<X0>(void (*a1)(uint64_t, char *, uint64_t)@<X0>, char *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v138 = a1;
  uint64_t v96 = a5;
  uint64_t v101 = *(void *)(a4 + 8);
  uint64_t v7 = *(void *)(a3 + 16);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  uint64_t v10 = swift_getAssociatedTypeWitness();
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
  uint64_t v11 = MEMORY[0x270FA5388](TupleTypeMetadata2);
  uint64_t v131 = (char *)&v92 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v11);
  uint64_t v130 = (char *)&v92 - v13;
  uint64_t v107 = AssociatedConformanceWitness;
  uint64_t v108 = AssociatedTypeWitness;
  uint64_t v14 = swift_getAssociatedConformanceWitness();
  uint64_t v15 = type metadata accessor for Range();
  uint64_t v136 = *(char **)(v15 - 8);
  uint64_t v16 = MEMORY[0x270FA5388](v15);
  uint64_t v122 = (char *)&v92 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v18 = MEMORY[0x270FA5388](v16);
  uint64_t v129 = (char *)&v92 - v19;
  uint64_t v20 = *(void *)(v7 - 8);
  MEMORY[0x270FA5388](v18);
  uint64_t v22 = (char *)&v92 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v23 = swift_getAssociatedTypeWitness();
  uint64_t v135 = swift_getTupleTypeMetadata2();
  uint64_t v106 = type metadata accessor for Optional();
  uint64_t v113 = *(void *)(v106 - 8);
  MEMORY[0x270FA5388](v106);
  uint64_t v121 = (char *)&v92 - v24;
  uint64_t v132 = swift_getTupleTypeMetadata2();
  uint64_t v105 = type metadata accessor for Optional();
  uint64_t v102 = *(void (***)(char *, uint64_t))(v105 - 8);
  uint64_t v25 = MEMORY[0x270FA5388](v105);
  uint64_t v120 = (char *)&v92 - v26;
  uint64_t v97 = *(void *)(v23 - 8);
  uint64_t v27 = MEMORY[0x270FA5388](v25);
  uint64_t v95 = (char *)&v92 - v28;
  uint64_t v29 = MEMORY[0x270FA5388](v27);
  uint64_t v104 = (char *)&v92 - ((v30 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v31 = MEMORY[0x270FA5388](v29);
  uint64_t v93 = (char *)&v92 - v32;
  MEMORY[0x270FA5388](v31);
  uint64_t v137 = v15;
  uint64_t v33 = *(int *)(v15 + 36);
  uint64_t v35 = (char *)&v92 - v34;
  unint64_t v125 = v36;
  unint64_t v127 = v36[2];
  uint64_t v128 = v36 + 2;
  ((void (*)(char *, char *, uint64_t))v127)((char *)&v92 - v34, &a2[v33], v10);
  uint64_t v123 = a4;
  uint64_t v37 = a4;
  uint64_t v38 = v10;
  uint64_t v118 = *(void (**)(void (*)(void, void, void), char *, uint64_t, uint64_t))(v37 + 24);
  uint64_t v119 = v37 + 24;
  uint64_t v39 = *(void (**)(char *, uint64_t, uint64_t))(v20 + 16);
  uint64_t v100 = v20 + 16;
  uint64_t v99 = v39;
  v39(v22, v124, v7);
  if (dispatch thunk of static Comparable.<= infix(_:_:)())
  {
    uint64_t v133 = (void (**)(char *, char *, uint64_t))(v125 + 4);
    uint64_t v40 = v125 + 1;
    unint64_t v125 = (char **)(v136 + 32);
    uint64_t v112 = (void (**)(char *, uint64_t))(v136 + 8);
    uint64_t v111 = (void (**)(char *, uint64_t))(v20 + 8);
    uint64_t v110 = v135 - 8;
    uint64_t v103 = (void (**)(char *, uint64_t))(v113 + 8);
    uint64_t v113 = v132 - 8;
    ++v102;
    uint64_t v98 = a2;
    uint64_t v126 = v23;
    uint64_t v117 = v14;
    uint64_t v116 = v22;
    uint64_t v115 = v7;
    uint64_t v109 = v40;
    uint64_t v114 = v35;
    while (1)
    {
      uint64_t v41 = TupleTypeMetadata2;
      uint64_t v42 = v130;
      uint64_t v43 = &v130[*(int *)(TupleTypeMetadata2 + 48)];
      uint64_t v44 = v35;
      uint64_t v45 = v127;
      ((void (*)(char *, char *, uint64_t))v127)(v130, a2, v38);
      uint64_t v46 = v43;
      uint64_t v136 = v43;
      ((void (*)(char *, char *, uint64_t))v45)(v43, v44, v38);
      uint64_t v47 = v131;
      uint64_t v48 = &v131[*(int *)(v41 + 48)];
      ((void (*)(char *, char *, uint64_t))v45)(v131, v42, v38);
      ((void (*)(char *, char *, uint64_t))v45)(v48, v46, v38);
      uint64_t v49 = *v133;
      uint64_t v50 = v122;
      (*v133)(v122, v47, v38);
      uint64_t v51 = *v40;
      ((void (*)(char *, uint64_t))v51)(v48, v38);
      uint64_t v52 = &v47[*(int *)(v41 + 48)];
      uint64_t v53 = v42;
      uint64_t v54 = v115;
      v49(v47, v53, v38);
      v49(v52, v136, v38);
      uint64_t v55 = &v50[*(int *)(v137 + 36)];
      uint64_t v136 = (char *)v49;
      v49(v55, v52, v38);
      a2 = v51;
      uint64_t v56 = v137;
      ((void (*)(char *, uint64_t))a2)(v47, v38);
      uint64_t v35 = *v125;
      uint64_t v57 = v129;
      uint64_t v58 = v50;
      uint64_t v59 = v116;
      ((void (*)(char *, char *, uint64_t))*v125)(v129, v58, v56);
      uint64_t v60 = v121;
      v118((void (*)(void, void, void))v138, v57, v54, v123);
      uint64_t v61 = v57;
      uint64_t v23 = (uint64_t)v60;
      (*v112)(v61, v56);
      (*v111)(v59, v54);
      if ((*(unsigned int (**)(char *, uint64_t))(*(void *)(v135 - 8) + 48))(v60, 1) != 1) {
        break;
      }
      (*v103)(v60, v106);
      uint64_t v62 = v120;
      (*(void (**)(char *, uint64_t, uint64_t))(*(void *)(v132 - 8) + 56))(v120, 1, 1);
      (*v102)(v62, v105);
      swift_checkMetadataState();
      uint64_t v63 = v104;
      dispatch thunk of Collection.startIndex.getter();
      uint64_t v35 = v114;
      char v64 = dispatch thunk of static Equatable.== infix(_:_:)();
      uint64_t v40 = v109;
      ((void (*)(char *, uint64_t))a2)(v63, v38);
      uint64_t v23 = v126;
      if (v64)
      {
        ((void (*)(char *, uint64_t))a2)(v35, v38);
        uint64_t v91 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(swift_getTupleTypeMetadata2() - 8) + 56);
        return v91(v96, 1, 1);
      }
      swift_getAssociatedConformanceWitness();
      dispatch thunk of BidirectionalCollection.formIndex(before:)();
      v99(v59, v124, v54);
      a2 = v98;
      if ((dispatch thunk of static Comparable.<= infix(_:_:)() & 1) == 0) {
        goto LABEL_6;
      }
    }
  }
  else
  {
LABEL_6:
    __break(1u);
  }
  uint64_t v138 = (void (*)(uint64_t, char *, uint64_t))(v23 + *(int *)(v135 + 48));
  uint64_t v65 = v132;
  uint64_t v66 = v120;
  uint64_t v67 = &v120[*(int *)(v132 + 48)];
  ((void (*)(char *, uint64_t, uint64_t))v136)(v120, v23, v38);
  uint64_t v69 = v97 + 32;
  uint64_t v68 = *(void (**)(uint64_t, char *, uint64_t))(v97 + 32);
  uint64_t v70 = v126;
  v68((uint64_t)v67, (char *)v138, v126);
  (*(void (**)(char *, void, uint64_t, uint64_t))(*(void *)(v65 - 8) + 56))(v66, 0, 1, v65);
  uint64_t v71 = &v66[*(int *)(v65 + 48)];
  uint64_t v72 = v93;
  ((void (*)(char *, char *, uint64_t))v136)(v93, v66, v38);
  uint64_t v97 = v69;
  uint64_t v138 = v68;
  v68((uint64_t)v95, v71, v70);
  uint64_t v73 = swift_getTupleTypeMetadata2();
  uint64_t v74 = *(int *)(v73 + 48);
  uint64_t v75 = v114;
  uint64_t result = dispatch thunk of static Comparable.<= infix(_:_:)();
  if (result)
  {
    uint64_t v132 = v96 + v74;
    uint64_t v77 = TupleTypeMetadata2;
    uint64_t v78 = *(int *)(TupleTypeMetadata2 + 48);
    uint64_t v135 = v73;
    uint64_t v79 = v130;
    uint64_t v80 = &v130[v78];
    uint64_t v94 = (void (*)(char *, uint64_t))a2;
    uint64_t v81 = v136;
    ((void (*)(char *, char *, uint64_t))v136)(v130, v72, v38);
    ((void (*)(char *, char *, uint64_t))v81)(v80, v75, v38);
    uint64_t v82 = *(int *)(v77 + 48);
    uint64_t v83 = v131;
    uint64_t v84 = v38;
    uint64_t v85 = &v131[v82];
    uint64_t v86 = v127;
    ((void (*)(char *, char *, uint64_t))v127)(v131, v79, v84);
    ((void (*)(char *, char *, uint64_t))v86)(v85, v80, v84);
    uint64_t v87 = v129;
    ((void (*)(char *, char *, uint64_t))v81)(v129, v83, v84);
    v94(v85, v84);
    uint64_t v88 = &v83[*(int *)(TupleTypeMetadata2 + 48)];
    ((void (*)(char *, char *, uint64_t))v81)(v83, v79, v84);
    ((void (*)(char *, char *, uint64_t))v81)(v88, v80, v84);
    uint64_t v89 = v137;
    ((void (*)(char *, char *, uint64_t))v81)(&v87[*(int *)(v137 + 36)], v88, v84);
    v94(v83, v84);
    uint64_t v90 = v96;
    ((void (*)(uint64_t, char *, uint64_t))v35)(v96, v87, v89);
    v138(v132, v95, v126);
    return (*(uint64_t (**)(uint64_t, void, uint64_t))(*(void *)(v135 - 8) + 56))(v90, 0, 1);
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t protocol witness for BackwardMatchingCollectionSearcher.matchingSearchBack(_:_:) in conformance <> ConsumerSearcher<A>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return protocol witness for MatchingCollectionSearcher.matchingSearch(_:_:) in conformance <> ConsumerSearcher<A>(a1, a2, a3, a4, (uint64_t)&protocol conformance descriptor for <> ConsumerSearcher<A>, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))BackwardMatchingStatelessCollectionSearcher.matchingSearchBack(_:_:));
}

uint64_t protocol witness for MatchingCollectionSearcher.matchingSearch(_:_:) in conformance <> ConsumerSearcher<A>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t (*a6)(uint64_t, uint64_t, uint64_t, uint64_t))
{
  uint64_t WitnessTable = swift_getWitnessTable();
  return a6(a1, a2, a3, WitnessTable);
}

uint64_t protocol witness for BackwardMatchingStatelessCollectionSearcher.matchingSearchBack(_:in:) in conformance <> ConsumerSearcher<A>@<X0>(void (*a1)(uint64_t, char *, uint64_t)@<X0>, char *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  return ConsumerSearcher<>.matchingSearchBack(_:in:)(a1, a2, a3, *(void *)(a4 - 8), a5);
}

uint64_t NaivePatternSearcher.search(_:in:)@<X0>(uint64_t a1@<X0>, char *a2@<X1>, void *a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v177 = a1;
  uint64_t v146 = a4;
  uint64_t v174 = a3[5];
  uint64_t v6 = a3[3];
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v160 = *(char **)(AssociatedTypeWitness - 8);
  uint64_t v7 = MEMORY[0x270FA5388](AssociatedTypeWitness);
  unint64_t v167 = (char *)&v126 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = MEMORY[0x270FA5388](v7);
  unint64_t v166 = (char *)&v126 - v10;
  MEMORY[0x270FA5388](v9);
  uint64_t v171 = (char *)&v126 - v11;
  uint64_t v12 = a3[4];
  unint64_t v144 = a3;
  uint64_t v13 = a3[2];
  uint64_t v143 = swift_getAssociatedTypeWitness();
  uint64_t v161 = *(void (***)(char *, char *, uint64_t))(v143 - 8);
  MEMORY[0x270FA5388](v143);
  unint64_t v142 = (char *)&v126 - v14;
  uint64_t v15 = swift_getAssociatedTypeWitness();
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
  uint64_t v16 = MEMORY[0x270FA5388](TupleTypeMetadata2);
  unint64_t v150 = (char *)&v126 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v16);
  unint64_t v148 = (char *)&v126 - v18;
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  uint64_t v155 = type metadata accessor for Range();
  uint64_t v151 = *(void *)(v155 - 8);
  uint64_t v19 = MEMORY[0x270FA5388](v155);
  uint64_t v141 = (char *)&v126 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v19);
  unint64_t v149 = (char *)&v126 - v21;
  uint64_t v131 = type metadata accessor for Optional();
  uint64_t v130 = *(void *)(v131 - 8);
  MEMORY[0x270FA5388](v131);
  unint64_t v140 = (char *)&v126 - v22;
  uint64_t v139 = v12;
  uint64_t v23 = (void (*)(char *, uint64_t))swift_getAssociatedTypeWitness();
  uint64_t v24 = type metadata accessor for Optional();
  unint64_t v169 = *(void (***)(char *, uint64_t))(v24 - 8);
  uint64_t v170 = v24;
  uint64_t v25 = MEMORY[0x270FA5388](v24);
  uint64_t v27 = (char *)&v126 - v26;
  uint64_t v28 = *((void *)v23 - 1);
  uint64_t v29 = MEMORY[0x270FA5388](v25);
  unint64_t v165 = (char *)&v126 - ((v30 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v31 = MEMORY[0x270FA5388](v29);
  uint64_t v164 = (char *)&v126 - v32;
  uint64_t v33 = MEMORY[0x270FA5388](v31);
  uint64_t v35 = (char *)&v126 - v34;
  uint64_t v36 = MEMORY[0x270FA5388](v33);
  uint64_t v137 = (char *)&v126 - ((v37 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v38 = MEMORY[0x270FA5388](v36);
  unint64_t v168 = (char *)&v126 - v39;
  uint64_t v40 = MEMORY[0x270FA5388](v38);
  unint64_t v147 = (char *)&v126 - v41;
  MEMORY[0x270FA5388](v40);
  uint64_t v43 = (char *)&v126 - v42;
  uint64_t v45 = v44;
  uint64_t v46 = *(void (**)(void, void, void))(v44 + 16);
  uint64_t v153 = v44 + 16;
  uint64_t v154 = v46;
  v46((char *)&v126 - v42, a2, v15);
  uint64_t v172 = v6;
  Collection.first.getter();
  uint64_t v162 = v28;
  if ((*(unsigned int (**)(char *, uint64_t, void (*)(char *, uint64_t)))(v28 + 48))(v27, 1, v23) == 1)
  {
    v169[1](v27, v170);
    uint64_t result = dispatch thunk of static Comparable.<= infix(_:_:)();
    if (result)
    {
      uint64_t v48 = v43;
      uint64_t v49 = *(int *)(TupleTypeMetadata2 + 48);
      uint64_t v50 = v45;
      uint64_t v51 = TupleTypeMetadata2;
      uint64_t v52 = v148;
      uint64_t v53 = v50;
      uint64_t v152 = v50;
      uint64_t v54 = &v148[v49];
      uint64_t v55 = v43;
      uint64_t v56 = v154;
      v154(v148, v55, v15);
      uint64_t v57 = *(void (**)(void, void, void))(v53 + 32);
      v57(v54, v48, v15);
      uint64_t v58 = v150;
      uint64_t v59 = &v150[*(int *)(v51 + 48)];
      v56(v150, v52, v15);
      v56(v59, v54, v15);
      uint64_t v60 = v149;
      v57(v149, v58, v15);
      uint64_t v61 = *(void (**)(void, void))(v152 + 8);
      v152 += 8;
      v61(v59, v15);
      uint64_t v62 = &v58[*(int *)(TupleTypeMetadata2 + 48)];
      v57(v58, v52, v15);
      v57(v62, v54, v15);
      uint64_t v63 = v155;
      v57(&v60[*(int *)(v155 + 36)], v62, v15);
      v61(v58, v15);
      uint64_t v64 = v151;
      uint64_t v65 = v146;
      (*(void (**)(uint64_t, char *, uint64_t))(v151 + 32))(v146, v60, v63);
      return (*(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(v64 + 56))(v65, 0, 1, v63);
    }
    __break(1u);
LABEL_20:
    __break(1u);
    return result;
  }
  uint64_t v66 = *(void (**)(void, void, void))(v162 + 32);
  uint64_t v138 = v35;
  unint64_t v163 = v23;
  v66(v35, v27, v23);
  uint64_t v170 = (uint64_t)&a2[*(int *)(v155 + 36)];
  char v67 = dispatch thunk of static Comparable.<= infix(_:_:)();
  uint64_t v68 = v168;
  if ((v67 & 1) == 0)
  {
LABEL_12:
    __break(1u);
    goto LABEL_13;
  }
  uint64_t v23 = (void (*)(char *, uint64_t))v43;
  uint64_t v69 = *(char **)(v45 + 32);
  uint64_t v145 = (void (**)(char *, uint64_t))(v45 + 8);
  uint64_t v136 = (void (**)(void, void, void))(v151 + 32);
  uint64_t v134 = (void (**)(char *, uint64_t))(v151 + 8);
  uint64_t v133 = (void (**)(char *, uint64_t))(v161 + 1);
  uint64_t v70 = v45 + 32;
  uint64_t v132 = (unsigned int (**)(char *, uint64_t, uint64_t))(v70 + 16);
  uint64_t v161 = (void (**)(char *, char *, uint64_t))(v160 + 16);
  unint64_t v169 = (void (**)(char *, uint64_t))(v160 + 8);
  uint64_t v159 = (void (**)(char *))(v162 + 16);
  v162 += 8;
  uint64_t v176 = v15;
  uint64_t v152 = v70;
  unint64_t v127 = v23;
  uint64_t v129 = v69;
  uint64_t v158 = v13;
LABEL_6:
  uint64_t v71 = TupleTypeMetadata2;
  uint64_t v72 = v148;
  uint64_t v73 = &v148[*(int *)(TupleTypeMetadata2 + 48)];
  ((void (*)(char *, void (*)(char *, uint64_t), uint64_t))v69)(v148, v23, v15);
  uint64_t v160 = v73;
  uint64_t v74 = v154;
  v154(v73, v170, v15);
  uint64_t v75 = v150;
  uint64_t v76 = &v150[*(int *)(v71 + 48)];
  v74(v150, v72, v176);
  v74(v76, v73, v176);
  uint64_t v77 = v141;
  ((void (*)(char *, char *, uint64_t))v69)(v141, v75, v176);
  uint64_t v78 = *v145;
  (*v145)(v76, v176);
  uint64_t v79 = &v75[*(int *)(TupleTypeMetadata2 + 48)];
  ((void (*)(char *, char *, uint64_t))v69)(v75, v72, v176);
  ((void (*)(char *, char *, uint64_t))v69)(v79, v160, v176);
  uint64_t v80 = v155;
  ((void (*)(char *, char *, uint64_t))v69)(&v77[*(int *)(v155 + 36)], v79, v176);
  uint64_t v81 = v75;
  uint64_t v82 = v176;
  uint64_t v135 = v78;
  v78(v81, v176);
  uint64_t v83 = v149;
  uint64_t v128 = *v136;
  v128(v149, v77, v80);
  uint64_t v84 = v142;
  uint64_t v85 = v139;
  dispatch thunk of Collection.subscript.getter();
  (*v134)(v83, v80);
  uint64_t v86 = v143;
  swift_getAssociatedConformanceWitness();
  uint64_t v87 = v140;
  uint64_t v160 = (char *)v144[6];
  Collection<>.firstIndex(of:)();
  (*v133)(v84, v86);
  if ((*v132)(v87, 1, v82) != 1)
  {
    uint64_t v88 = v147;
    ((void (*)(char *, char *, uint64_t))v69)(v147, v87, v82);
    v154(v68, v88, v82);
    uint64_t v89 = v171;
    uint64_t v90 = v85;
    dispatch thunk of Collection.startIndex.getter();
    while (1)
    {
      uint64_t v91 = v90;
      dispatch thunk of Collection.formIndex(after:)();
      dispatch thunk of Collection.formIndex(after:)();
      a2 = v68;
      uint64_t v92 = v166;
      uint64_t v93 = AssociatedTypeWitness;
      (*v161)(v166, v89, AssociatedTypeWitness);
      uint64_t v94 = v167;
      dispatch thunk of Collection.endIndex.getter();
      swift_getAssociatedConformanceWitness();
      char v95 = dispatch thunk of static Equatable.== infix(_:_:)();
      uint64_t v23 = *v169;
      (*v169)(v94, v93);
      v23(v92, v93);
      if (v95) {
        break;
      }
      uint64_t v96 = v176;
      if (dispatch thunk of static Equatable.== infix(_:_:)())
      {
        v23(v171, AssociatedTypeWitness);
        unint64_t v125 = v135;
        v135(a2, v96);
        v125(v147, v96);
        (*(void (**)(char *, void *))v162)(v138, v163);
        return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v151 + 56))(v146, 1, 1, v155);
      }
      uint64_t v157 = v23;
      uint64_t v90 = v91;
      uint64_t v97 = (void (*)(void, void))dispatch thunk of Collection.subscript.read();
      uint64_t v98 = *v159;
      uint64_t v99 = v163;
      uint64_t v100 = v164;
      (*v159)(v164);
      v97(v179, 0);
      uint64_t v89 = v171;
      uint64_t v101 = (void (*)(void, void))dispatch thunk of Collection.subscript.read();
      uint64_t v102 = v165;
      v98(v165);
      v101(v179, 0);
      char v103 = dispatch thunk of static Equatable.== infix(_:_:)();
      uint64_t v104 = *(void (**)(char *, void *))v162;
      (*(void (**)(char *, void *))v162)(v102, v99);
      uint64_t v105 = v100;
      uint64_t v68 = v168;
      v104(v105, v99);
      if ((v103 & 1) == 0)
      {
        v157(v89, AssociatedTypeWitness);
        uint64_t v106 = v176;
        uint64_t v107 = v135;
        v135(v68, v176);
        uint64_t v108 = v137;
        uint64_t v109 = v147;
        dispatch thunk of Collection.index(after:)();
        v107(v109, v106);
        uint64_t v23 = v127;
        a2 = v129;
        ((void (*)(void (*)(char *, uint64_t), char *, uint64_t))v129)(v127, v108, v106);
        uint64_t v15 = v106;
        uint64_t v69 = a2;
        if (dispatch thunk of static Comparable.<= infix(_:_:)()) {
          goto LABEL_6;
        }
        goto LABEL_12;
      }
    }
LABEL_13:
    v23(v171, AssociatedTypeWitness);
    (*(void (**)(char *, void *))v162)(v138, v163);
    uint64_t v110 = v137;
    uint64_t v111 = v176;
    uint64_t v112 = v129;
    ((void (*)(char *, char *, uint64_t))v129)(v137, a2, v176);
    uint64_t v113 = v147;
    uint64_t result = dispatch thunk of static Comparable.<= infix(_:_:)();
    uint64_t v114 = v154;
    if (result)
    {
      uint64_t v115 = TupleTypeMetadata2;
      uint64_t v116 = v148;
      uint64_t v117 = &v148[*(int *)(TupleTypeMetadata2 + 48)];
      ((void (*)(char *, char *, uint64_t))v112)(v148, v113, v111);
      uint64_t v178 = v117;
      ((void (*)(char *, char *, uint64_t))v112)(v117, v110, v111);
      uint64_t v118 = v150;
      uint64_t v119 = &v150[*(int *)(v115 + 48)];
      v114(v150, v116, v111);
      v114(v119, v117, v111);
      uint64_t v120 = v149;
      ((void (*)(char *, char *, uint64_t))v112)(v149, v118, v111);
      uint64_t v121 = v135;
      v135(v119, v111);
      uint64_t v122 = &v118[*(int *)(v115 + 48)];
      ((void (*)(char *, char *, uint64_t))v112)(v118, v116, v111);
      ((void (*)(char *, char *, uint64_t))v112)(v122, v178, v111);
      uint64_t v123 = v155;
      ((void (*)(char *, char *, uint64_t))v112)(&v120[*(int *)(v155 + 36)], v122, v111);
      v121(v118, v111);
      uint64_t v124 = v146;
      v128(v146, v120, v123);
      return (*(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(v151 + 56))(v124, 0, 1, v123);
    }
    goto LABEL_20;
  }
  (*(void (**)(char *, void *))v162)(v138, v163);
  (*(void (**)(char *, uint64_t))(v130 + 8))(v87, v131);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v151 + 56))(v146, 1, 1, v155);
}

unint64_t specialized Collection.first.getter(unint64_t a1, unint64_t a2)
{
  if ((a2 & 0x2000000000000000) != 0) {
    uint64_t v2 = HIBYTE(a2) & 0xF;
  }
  else {
    uint64_t v2 = a1 & 0xFFFFFFFFFFFFLL;
  }
  if (v2)
  {
    _StringGuts.validateScalarIndex(_:)(0xFuLL, a1, a2);
    if ((a2 & 0x1000000000000000) != 0)
    {
      unsigned int v5 = _StringGuts.foreignErrorCorrectedScalar(startingAt:)();
    }
    else
    {
      if ((a2 & 0x2000000000000000) == 0 && (a1 & 0x1000000000000000) == 0) {
        _StringObject.sharedUTF8.getter();
      }
      unsigned int v5 = _decodeScalar(_:startingAt:)();
    }
  }
  else
  {
    unsigned int v5 = 0;
  }
  return v5 | ((unint64_t)(v2 == 0) << 32);
}

uint64_t specialized Collection.first.getter(uint64_t a1, unint64_t a2)
{
  uint64_t v2 = HIBYTE(a2) & 0xF;
  if ((a2 & 0x2000000000000000) == 0) {
    uint64_t v2 = a1 & 0xFFFFFFFFFFFFLL;
  }
  if (v2) {
    return String.subscript.getter();
  }
  else {
    return 0;
  }
}

uint64_t protocol witness for CollectionSearcher.state(for:in:) in conformance NaivePatternSearcher<A, B>@<X0>(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  return StatelessCollectionSearcher.state(for:in:)(a1, a2);
}

uint64_t protocol witness for CollectionSearcher.search(_:_:) in conformance NaivePatternSearcher<A, B>@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, char *a4@<X8>)
{
  uint64_t WitnessTable = swift_getWitnessTable();

  return StatelessCollectionSearcher.search(_:_:)(a1, a2, a3, WitnessTable, a4);
}

unint64_t specialized BidirectionalCollection.last.getter(unint64_t a1, unint64_t a2)
{
  if ((a2 & 0x2000000000000000) != 0) {
    uint64_t v2 = HIBYTE(a2) & 0xF;
  }
  else {
    uint64_t v2 = a1 & 0xFFFFFFFFFFFFLL;
  }
  if (!v2)
  {
    unsigned int v12 = 0;
    goto LABEL_28;
  }
  uint64_t v5 = 7;
  if (((a2 >> 60) & ((a1 & 0x800000000000000) == 0)) != 0) {
    uint64_t v5 = 11;
  }
  unint64_t v6 = _StringGuts.validateInclusiveScalarIndex(_:)(v5 | (v2 << 16), a1, a2);
  if (v6 < 0x4000)
  {
    __break(1u);
    goto LABEL_30;
  }
  if ((a2 & 0x1000000000000000) != 0)
  {
LABEL_30:
    unint64_t v18 = String.UnicodeScalarView._foreignIndex(before:)();
    _StringGuts.validateScalarIndex(_:)(v18, a1, a2);
    unsigned int v12 = _StringGuts.foreignErrorCorrectedScalar(startingAt:)();
    goto LABEL_28;
  }
  if ((a2 & 0x2000000000000000) != 0)
  {
    unint64_t v20 = a1;
    uint64_t v21 = a2 & 0xFFFFFFFFFFFFFFLL;
    uint64_t v13 = (char *)&v20 + (v6 >> 16);
    if ((*(v13 - 1) & 0xC0) == 0x80)
    {
      uint64_t v9 = 0;
      uint64_t v14 = v13 - 2;
      do
        int v15 = v14[v9--] & 0xC0;
      while (v15 == 128);
      goto LABEL_20;
    }
LABEL_21:
    uint64_t v16 = 1;
    goto LABEL_22;
  }
  if ((a1 & 0x1000000000000000) != 0)
  {
    uint64_t v7 = (a2 & 0xFFFFFFFFFFFFFFFLL) + 32;
  }
  else
  {
    unint64_t v19 = v6;
    uint64_t v7 = _StringObject.sharedUTF8.getter();
    unint64_t v6 = v19;
  }
  unint64_t v8 = (v6 >> 16) + v7;
  if ((*(unsigned char *)(v8 - 1) & 0xC0) != 0x80) {
    goto LABEL_21;
  }
  uint64_t v9 = 0;
  unint64_t v10 = v8 - 2;
  do
    int v11 = *(unsigned char *)(v10 + v9--) & 0xC0;
  while (v11 == 128);
LABEL_20:
  uint64_t v16 = 1 - v9;
LABEL_22:
  _StringGuts.validateScalarIndex(_:)((v6 - (v16 << 16)) & 0xFFFFFFFFFFFF0000 | 5, a1, a2);
  if ((a2 & 0x2000000000000000) != 0)
  {
    unint64_t v20 = a1;
    uint64_t v21 = a2 & 0xFFFFFFFFFFFFFFLL;
  }
  else if ((a1 & 0x1000000000000000) == 0)
  {
    _StringObject.sharedUTF8.getter();
  }
  unsigned int v12 = _decodeScalar(_:startingAt:)();
LABEL_28:
  LOBYTE(v20) = v2 == 0;
  return v12 | ((unint64_t)(v2 == 0) << 32);
}

uint64_t specialized BidirectionalCollection.last.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3 = *(void *)(a1 + 16);
  if (v3)
  {
    uint64_t v5 = v3 - 1;
    uint64_t v6 = type metadata accessor for DSLTree.CustomCharacterClass.Member(0);
    uint64_t v13 = *(void *)(v6 - 8);
    outlined init with copy of MEProgram(a1+ ((*(unsigned __int8 *)(v13 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v13 + 80))+ *(void *)(v13 + 72) * v5, a2, type metadata accessor for DSLTree.CustomCharacterClass.Member);
    uint64_t v7 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v13 + 56);
    uint64_t v8 = a2;
    uint64_t v9 = 0;
    uint64_t v10 = v6;
  }
  else
  {
    uint64_t v11 = type metadata accessor for DSLTree.CustomCharacterClass.Member(0);
    uint64_t v7 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v11 - 8) + 56);
    uint64_t v10 = v11;
    uint64_t v8 = a2;
    uint64_t v9 = 1;
  }

  return v7(v8, v9, 1, v10);
}

uint64_t protocol witness for BackwardCollectionSearcher.backwardState(for:in:) in conformance <> NaivePatternSearcher<A, B>@<X0>(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  return BackwardStatelessCollectionSearcher.backwardState(for:in:)(a1, a2);
}

uint64_t PatternOrEmpty.state(for:in:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v5 = v4;
  uint64_t v26 = a1;
  uint64_t v27 = a2;
  uint64_t v29 = a4;
  uint64_t v6 = *(void *)(a3 + 16);
  uint64_t v7 = *(void *)(a3 + 24);
  uint64_t v28 = type metadata accessor for PatternOrEmpty.State.Representation();
  uint64_t v8 = *(void *)(v28 - 8);
  MEMORY[0x270FA5388](v28);
  uint64_t v10 = (char *)&v26 - v9;
  uint64_t v11 = type metadata accessor for Optional();
  uint64_t v12 = *(void *)(v11 - 8);
  uint64_t v13 = MEMORY[0x270FA5388](v11);
  int v15 = (char *)&v26 - v14;
  uint64_t v16 = *(void *)(v6 - 8);
  MEMORY[0x270FA5388](v13);
  unint64_t v18 = (char *)&v26 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t))(v12 + 16))(v15, v5, v11);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v16 + 48))(v15, 1, v6) == 1)
  {
    (*(void (**)(char *, uint64_t))(v12 + 8))(v15, v11);
    swift_getAssociatedTypeWitness();
    swift_getAssociatedConformanceWitness();
    uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
    unint64_t v20 = &v10[*(int *)(swift_getTupleTypeMetadata2() + 48)];
    uint64_t v21 = *(void (**)(char *, uint64_t, uint64_t))(*(void *)(AssociatedTypeWitness - 8) + 16);
    uint64_t v22 = v27;
    v21(v10, v27, AssociatedTypeWitness);
    swift_getAssociatedConformanceWitness();
    uint64_t v23 = type metadata accessor for Range();
    v21(v20, v22 + *(int *)(v23 + 36), AssociatedTypeWitness);
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v16 + 32))(v18, v15, v6);
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v7 + 32))(v26, v27, v6, v7);
    (*(void (**)(char *, uint64_t))(v16 + 8))(v18, v6);
  }
  uint64_t v24 = v28;
  swift_storeEnumTagMultiPayload();
  return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v8 + 32))(v29, v10, v24);
}

uint64_t PatternOrEmpty.search(_:_:)@<X0>(uint64_t a1@<X0>, char *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v92 = a4;
  uint64_t v93 = a2;
  uint64_t v82 = a1;
  uint64_t v5 = *(void *)(a3 + 16);
  uint64_t v4 = *(void *)(a3 + 24);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  uint64_t v8 = swift_getAssociatedTypeWitness();
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
  uint64_t v9 = MEMORY[0x270FA5388](TupleTypeMetadata2);
  uint64_t v71 = (char *)v68 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v9);
  uint64_t v70 = (char *)v68 - v11;
  v68[0] = AssociatedConformanceWitness;
  v68[1] = AssociatedTypeWitness;
  uint64_t v91 = (void (*)(char *, char *, uint64_t))swift_getAssociatedConformanceWitness();
  uint64_t v12 = type metadata accessor for Range();
  uint64_t v84 = *(void *)(v12 - 8);
  uint64_t v13 = MEMORY[0x270FA5388](v12);
  uint64_t v69 = (char *)v68 - v14;
  uint64_t v81 = *(void *)(v8 - 8);
  uint64_t v15 = MEMORY[0x270FA5388](v13);
  uint64_t v79 = (char *)v68 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v15);
  uint64_t v80 = (char *)v68 - v17;
  uint64_t v18 = type metadata accessor for Optional();
  uint64_t v75 = *(void *)(v18 - 8);
  uint64_t v76 = v18;
  MEMORY[0x270FA5388](v18);
  uint64_t v88 = (char *)v68 - v19;
  uint64_t v85 = v12;
  uint64_t v73 = type metadata accessor for Optional();
  uint64_t v72 = *(void *)(v73 - 8);
  MEMORY[0x270FA5388](v73);
  uint64_t v74 = (char *)v68 - v20;
  uint64_t v87 = swift_getAssociatedTypeWitness();
  uint64_t v77 = *(void *)(v87 - 8);
  MEMORY[0x270FA5388](v87);
  uint64_t v86 = (char *)v68 - v21;
  uint64_t v22 = type metadata accessor for PatternOrEmpty.State.Representation();
  uint64_t v23 = *(void *)(v22 - 8);
  uint64_t v24 = MEMORY[0x270FA5388](v22);
  uint64_t v89 = (char *)v68 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v24);
  uint64_t v27 = (char *)v68 - v26;
  uint64_t v28 = type metadata accessor for PatternOrEmpty.State();
  uint64_t v29 = *(void *)(v28 - 8);
  MEMORY[0x270FA5388](v28);
  uint64_t v31 = (char *)v68 - v30;
  (*(void (**)(char *, char *, uint64_t))(v29 + 16))((char *)v68 - v30, v93, v28);
  uint64_t v32 = *(void (**)(char *, char *, uint64_t))(v23 + 32);
  uint64_t v90 = v23 + 32;
  v32(v27, v31, v22);
  int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  if (!EnumCaseMultiPayload)
  {
    uint64_t v41 = v74;
    uint64_t v91 = v32;
    uint64_t v42 = *(void (**)(char *, char *, uint64_t))(v77 + 32);
    v42(v86, v27, v87);
    uint64_t v43 = v88;
    (*(void (**)(char *, uint64_t, uint64_t))(v75 + 16))(v88, v78, v76);
    uint64_t v44 = *(void *)(v5 - 8);
    uint64_t result = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v44 + 48))(v43, 1, v5);
    if (result != 1)
    {
      uint64_t v46 = v93;
      (*(void (**)(char *, uint64_t))(v29 + 8))(v93, v28);
      uint64_t v47 = v41;
      uint64_t v48 = v86;
      uint64_t v49 = v88;
      (*(void (**)(uint64_t, char *, uint64_t, uint64_t))(v4 + 40))(v82, v86, v5, v4);
      (*(void (**)(char *, uint64_t))(v44 + 8))(v49, v5);
      uint64_t v50 = v89;
      v42(v89, v48, v87);
      swift_storeEnumTagMultiPayload();
      v91(v46, v50, v22);
      return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v72 + 32))(v92, v47, v73);
    }
    goto LABEL_13;
  }
  if (EnumCaseMultiPayload != 1) {
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v84 + 56))(v92, 1, 1, v85);
  }
  (*(void (**)(char *, uint64_t))(v29 + 8))(v93, v28);
  uint64_t v34 = swift_getTupleTypeMetadata2();
  uint64_t v35 = &v27[*(int *)(v34 + 48)];
  uint64_t v36 = v81;
  uint64_t v37 = *(void (**)(void))(v81 + 32);
  uint64_t v38 = v80;
  v37();
  uint64_t v39 = v79;
  ((void (*)(char *, char *, uint64_t))v37)(v79, v35, v8);
  if (dispatch thunk of static Equatable.== infix(_:_:)())
  {
    (*(void (**)(char *, uint64_t))(v36 + 8))(v39, v8);
    uint64_t v40 = v89;
  }
  else
  {
    uint64_t v51 = *(int *)(v34 + 48);
    uint64_t v40 = v89;
    uint64_t v88 = &v89[v51];
    swift_checkMetadataState();
    dispatch thunk of Collection.index(after:)();
    ((void (*)(char *, char *, uint64_t))v37)(v88, v39, v8);
  }
  swift_storeEnumTagMultiPayload();
  v32(v93, v40, v22);
  uint64_t result = dispatch thunk of static Comparable.<= infix(_:_:)();
  if ((result & 1) == 0)
  {
    __break(1u);
LABEL_13:
    __break(1u);
    return result;
  }
  uint64_t v52 = TupleTypeMetadata2;
  uint64_t v53 = v37;
  uint64_t v54 = v36;
  uint64_t v55 = v38;
  uint64_t v56 = v70;
  uint64_t v57 = &v70[*(int *)(TupleTypeMetadata2 + 48)];
  uint64_t v58 = *(void (**)(char *, char *, uint64_t))(v36 + 16);
  v58(v70, v55, v8);
  uint64_t v93 = v57;
  ((void (*)(char *, char *, uint64_t))v53)(v57, v55, v8);
  uint64_t v59 = *(int *)(v52 + 48);
  uint64_t v60 = v71;
  uint64_t v61 = &v71[v59];
  v58(v71, v56, v8);
  v58(v61, v57, v8);
  uint64_t v62 = v69;
  ((void (*)(char *, char *, uint64_t))v53)(v69, v60, v8);
  uint64_t v63 = *(void (**)(char *, uint64_t))(v54 + 8);
  v63(v61, v8);
  uint64_t v64 = &v60[*(int *)(TupleTypeMetadata2 + 48)];
  ((void (*)(char *, char *, uint64_t))v53)(v60, v56, v8);
  ((void (*)(char *, char *, uint64_t))v53)(v64, v93, v8);
  uint64_t v65 = v85;
  ((void (*)(char *, char *, uint64_t))v53)(&v62[*(int *)(v85 + 36)], v64, v8);
  v63(v60, v8);
  uint64_t v66 = v84;
  uint64_t v67 = v92;
  (*(void (**)(uint64_t, char *, uint64_t))(v84 + 32))(v92, v62, v65);
  return (*(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(v66 + 56))(v67, 0, 1, v65);
}

uint64_t PredicateConsumer.search(_:in:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, char *a4@<X3>, uint64_t a5@<X5>, uint64_t a6@<X8>)
{
  uint64_t v58 = a3;
  uint64_t v59 = a4;
  uint64_t v57 = a2;
  uint64_t v55 = a6;
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
  uint64_t v9 = MEMORY[0x270FA5388](TupleTypeMetadata2);
  uint64_t v47 = (char *)&v45 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v9);
  uint64_t v46 = (char *)&v45 - v11;
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  uint64_t v12 = type metadata accessor for Range();
  uint64_t v53 = *(void *)(v12 - 8);
  uint64_t v54 = v12;
  MEMORY[0x270FA5388](v12);
  uint64_t v45 = (char *)&v45 - v13;
  uint64_t v14 = swift_getAssociatedTypeWitness();
  uint64_t v15 = *(void *)(v14 - 8);
  MEMORY[0x270FA5388](v14);
  uint64_t v17 = (char *)&v45 - v16;
  uint64_t v18 = type metadata accessor for Optional();
  uint64_t v48 = *(void *)(v18 - 8);
  uint64_t v49 = v18;
  uint64_t v19 = MEMORY[0x270FA5388](v18);
  uint64_t v21 = (char *)&v45 - v20;
  uint64_t v56 = *(void *)(AssociatedTypeWitness - 8);
  uint64_t v22 = MEMORY[0x270FA5388](v19);
  uint64_t v24 = (char *)&v45 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v22);
  uint64_t v26 = (char *)&v45 - v25;
  uint64_t v51 = a1;
  dispatch thunk of Collection.subscript.getter();
  uint64_t v57 = a5;
  swift_getAssociatedConformanceWitness();
  Collection.firstIndex(where:)();
  uint64_t v27 = v14;
  uint64_t v28 = v56;
  (*(void (**)(char *, uint64_t))(v15 + 8))(v17, v27);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v28 + 48))(v21, 1, AssociatedTypeWitness) == 1)
  {
    (*(void (**)(char *, uint64_t))(v48 + 8))(v21, v49);
    uint64_t v29 = 1;
    uint64_t v31 = v54;
    uint64_t v30 = v55;
    uint64_t v32 = v53;
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v32 + 56))(v30, v29, 1, v31);
  }
  uint64_t v33 = *(void (**)(char *, char *, uint64_t))(v28 + 32);
  v33(v26, v21, AssociatedTypeWitness);
  dispatch thunk of Collection.index(after:)();
  uint64_t result = dispatch thunk of static Comparable.<= infix(_:_:)();
  if (result)
  {
    uint64_t v35 = TupleTypeMetadata2;
    uint64_t v36 = v46;
    uint64_t v37 = &v46[*(int *)(TupleTypeMetadata2 + 48)];
    v33(v46, v26, AssociatedTypeWitness);
    uint64_t v59 = v37;
    v33(v37, v24, AssociatedTypeWitness);
    uint64_t v38 = v28;
    uint64_t v39 = v47;
    uint64_t v40 = &v47[*(int *)(v35 + 48)];
    uint64_t v41 = *(void (**)(char *, char *, uint64_t))(v38 + 16);
    v41(v47, v36, AssociatedTypeWitness);
    v41(v40, v37, AssociatedTypeWitness);
    uint64_t v42 = v45;
    v33(v45, v39, AssociatedTypeWitness);
    uint64_t v43 = *(void (**)(char *, uint64_t))(v38 + 8);
    v43(v40, AssociatedTypeWitness);
    uint64_t v44 = &v39[*(int *)(TupleTypeMetadata2 + 48)];
    v33(v39, v36, AssociatedTypeWitness);
    v33(v44, v59, AssociatedTypeWitness);
    uint64_t v31 = v54;
    v33(&v42[*(int *)(v54 + 36)], v44, AssociatedTypeWitness);
    v43(v39, AssociatedTypeWitness);
    uint64_t v32 = v53;
    uint64_t v30 = v55;
    (*(void (**)(uint64_t, char *, uint64_t))(v53 + 32))(v55, v42, v31);
    uint64_t v29 = 0;
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v32 + 56))(v30, v29, 1, v31);
  }
  __break(1u);
  return result;
}

uint64_t protocol witness for CollectionSearcher.state(for:in:) in conformance PredicateSearcher<A>@<X0>(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  return StatelessCollectionSearcher.state(for:in:)(a1, a2);
}

uint64_t protocol witness for CollectionSearcher.search(_:_:) in conformance PredicateSearcher<A>@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, char *a4@<X8>)
{
  uint64_t WitnessTable = swift_getWitnessTable();

  return StatelessCollectionSearcher.search(_:_:)(a1, a2, a3, WitnessTable, a4);
}

uint64_t protocol witness for BackwardCollectionSearcher.backwardState(for:in:) in conformance <> PredicateSearcher<A>@<X0>(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  return BackwardStatelessCollectionSearcher.backwardState(for:in:)(a1, a2);
}

uint64_t zAlgorithm<A>(_:by:)(uint64_t a1, uint64_t (*a2)(char *, char *), uint64_t a3, uint64_t a4)
{
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Int>);
  uint64_t v6 = swift_allocObject();
  *(_OWORD *)(v6 + 16) = xmmword_209FAFD60;
  uint64_t v7 = a4;
  int64_t isUniquelyReferenced_nonNull_native = MEMORY[0x21050F1F0](a1, a4);
  *(void *)(v6 + 32) = isUniquelyReferenced_nonNull_native;
  if (isUniquelyReferenced_nonNull_native >= 2) {
    goto LABEL_26;
  }
  while (1)
  {
    uint64_t v9 = swift_allocObject();
    *(void *)(v9 + 16) = v6;
    uint64_t v10 = swift_allocObject();
    *(void *)(v10 + 16) = 0;
    uint64_t v11 = (void *)swift_allocObject();
    _OWORD v11[2] = 0;
    type metadata accessor for Array();
    swift_getWitnessTable();
    RandomAccessCollection<>.indices.getter();
    swift_getCanonicalSpecializedMetadata();
    lazy protocol witness table accessor for type Int and conformance Int();
    swift_getWitnessTable();
    int64_t isUniquelyReferenced_nonNull_native = Collection.dropFirst(_:)();
    uint64_t v6 = a1;
    uint64_t v12 = a3;
    if (a1 == v27) {
      break;
    }
    if (v27 < a1)
    {
      __break(1u);
LABEL_6:
      int64_t isUniquelyReferenced_nonNull_native = compare #1 <A>(start:minLength:) in zAlgorithm<A>(_:by:)(v6, 0, a1, a2, v12, v9, v10, v11, v7);
      goto LABEL_7;
    }
    while (v27 != v6)
    {
      uint64_t v15 = v11[2];
      if (v6 >= v15) {
        goto LABEL_6;
      }
      uint64_t v16 = v15 - v6;
      if (__OFSUB__(v15, v6)) {
        goto LABEL_22;
      }
      uint64_t v17 = *(void *)(v10 + 16);
      BOOL v18 = __OFSUB__(v6, v17);
      unint64_t v19 = v6 - v17;
      if (v18) {
        goto LABEL_23;
      }
      if ((v19 & 0x8000000000000000) != 0) {
        goto LABEL_24;
      }
      int64_t v20 = *(void *)(v9 + 16);
      unint64_t v21 = *(void *)(v20 + 16);
      if (v19 >= v21) {
        goto LABEL_25;
      }
      uint64_t v22 = *(void *)(v20 + 8 * v19 + 32);
      if (v22 >= v16)
      {
        int64_t isUniquelyReferenced_nonNull_native = compare #1 <A>(start:minLength:) in zAlgorithm<A>(_:by:)(v6, v16, a1, a2, v12, v9, v10, v11, v7);
      }
      else
      {
        int64_t isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
        if ((isUniquelyReferenced_nonNull_native & 1) == 0)
        {
          int64_t isUniquelyReferenced_nonNull_native = (int64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v21 + 1, 1, (char *)v20);
          int64_t v20 = isUniquelyReferenced_nonNull_native;
        }
        unint64_t v24 = *(void *)(v20 + 16);
        unint64_t v23 = *(void *)(v20 + 24);
        if (v24 >= v23 >> 1)
        {
          int64_t isUniquelyReferenced_nonNull_native = (int64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v23 > 1), v24 + 1, 1, (char *)v20);
          int64_t v20 = isUniquelyReferenced_nonNull_native;
        }
        *(void *)(v20 + 16) = v24 + 1;
        *(void *)(v20 + 8 * v24 + 32) = v22;
        *(void *)(v9 + 16) = v20;
        uint64_t v12 = a3;
      }
LABEL_7:
      if (v27 == ++v6) {
        goto LABEL_3;
      }
    }
    __break(1u);
LABEL_22:
    __break(1u);
LABEL_23:
    __break(1u);
LABEL_24:
    __break(1u);
LABEL_25:
    __break(1u);
LABEL_26:
    uint64_t v6 = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)1, isUniquelyReferenced_nonNull_native, 0, (char *)v6);
  }
LABEL_3:
  uint64_t v13 = *(void *)(v9 + 16);
  swift_bridgeObjectRetain();
  swift_release();
  swift_release();
  swift_release();
  return v13;
}

uint64_t compare #1 <A>(start:end:minLength:) in ZSearcher.search(_:in:)@<X0>(char *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, char *a4@<X3>, uint64_t (*a5)(char *, char *)@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, void (*a8)(char *, uint64_t)@<X7>, uint64_t a9@<X8>, void (**a10)(char *, uint64_t), char *a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15)
{
  uint64_t v105 = a8;
  uint64_t v123 = a7;
  uint64_t v118 = a5;
  uint64_t v119 = a6;
  unint64_t v127 = a4;
  uint64_t v121 = a2;
  uint64_t v101 = (char *)a1;
  uint64_t v103 = a9;
  uint64_t v124 = a11;
  uint64_t v115 = a10;
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
  uint64_t v17 = MEMORY[0x270FA5388](TupleTypeMetadata2);
  uint64_t v94 = (char *)&v89 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v17);
  uint64_t v93 = (char *)&v89 - v19;
  uint64_t v20 = swift_getAssociatedTypeWitness();
  uint64_t v107 = *(uint64_t (***)(char *, uint64_t))(v20 - 8);
  uint64_t v21 = MEMORY[0x270FA5388](v20);
  uint64_t v117 = (char *)&v89 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v23 = MEMORY[0x270FA5388](v21);
  uint64_t v116 = (char *)&v89 - v24;
  uint64_t v25 = *(void *)(a14 - 8);
  MEMORY[0x270FA5388](v23);
  uint64_t v122 = (char *)&v89 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v126 = a15;
  uint64_t v102 = a14;
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  uint64_t v28 = type metadata accessor for Range();
  uint64_t v29 = *(void *)(v28 - 8);
  uint64_t v30 = MEMORY[0x270FA5388](v28);
  uint64_t v92 = (char *)&v89 - ((v31 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v32 = MEMORY[0x270FA5388](v30);
  uint64_t v34 = (char *)&v89 - v33;
  uint64_t v35 = *(void *)(AssociatedTypeWitness - 8);
  uint64_t v36 = MEMORY[0x270FA5388](v32);
  uint64_t v97 = (char *)&v89 - ((v37 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v36);
  uint64_t v39 = (char *)&v89 - v38;
  uint64_t v95 = swift_projectBox();
  uint64_t v96 = swift_projectBox();
  uint64_t v40 = *(void (**)(char *, char *, uint64_t))(v35 + 16);
  uint64_t v124 = v39;
  uint64_t v41 = v39;
  uint64_t v42 = v34;
  uint64_t v91 = v35 + 16;
  uint64_t v90 = v40;
  v40(v41, (char *)v121, AssociatedTypeWitness);
  uint64_t v121 = v20;
  uint64_t v43 = MEMORY[0x21050F210](v127, v20);
  uint64_t v113 = *(void (**)(char *, uint64_t, uint64_t))(v29 + 16);
  uint64_t v114 = v29 + 16;
  v113(v42, v123, v28);
  uint64_t v125 = AssociatedTypeWitness;
  uint64_t v100 = v29;
  uint64_t v98 = AssociatedConformanceWitness;
  uint64_t v99 = v25;
  uint64_t v120 = v28;
  if (v43 == a3)
  {
    uint64_t v44 = v103;
    uint64_t v45 = *(void (**)(char *, uint64_t))(v29 + 8);
    uint64_t v46 = v122;
    uint64_t v47 = v124;
    uint64_t v48 = v105;
    v45(v42, v28);
LABEL_9:
    uint64_t v64 = v99;
    uint64_t v65 = (void (*)(void, void))v48;
    uint64_t v53 = v46;
    uint64_t v66 = v102;
    (*(void (**)(char *, void (*)(char *, uint64_t), uint64_t))(v99 + 16))(v46, (void (*)(char *, uint64_t))v65, v102);
    uint64_t v67 = v101;
    uint64_t v56 = v121;
LABEL_11:
    (*(void (**)(char *, uint64_t))(v64 + 8))(v53, v66);
    uint64_t v68 = TupleTypeMetadata2;
    uint64_t v69 = v44;
    uint64_t v70 = v125;
LABEL_12:
    if (a3 != MEMORY[0x21050F1F0](v127, v56))
    {
      (*(void (**)(uint64_t, char *, uint64_t))(v35 + 24))(v95, v67, v70);
      (*(void (**)(uint64_t, char *, uint64_t))(v35 + 40))(v96, v47, v70);
      *(void *)(a12 + 16) = 0;
      *(void *)(a13 + 16) = a3;
      uint64_t v88 = 1;
      uint64_t v86 = v120;
      uint64_t v87 = v100;
      return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v87 + 56))(v69, v88, 1, v86);
    }
    uint64_t v71 = *(void (**)(char *, char *, uint64_t))(v35 + 32);
    uint64_t v72 = v47;
    uint64_t v73 = v97;
    v71(v97, v72, v70);
    uint64_t result = dispatch thunk of static Comparable.<= infix(_:_:)();
    if (result)
    {
      uint64_t v74 = v68;
      uint64_t v75 = v93;
      uint64_t v76 = &v93[*(int *)(v68 + 48)];
      uint64_t v77 = v90;
      v90(v93, v67, v70);
      unint64_t v127 = v76;
      v71(v76, v73, v70);
      uint64_t v78 = *(int *)(v74 + 48);
      uint64_t v79 = v35;
      uint64_t v80 = v94;
      uint64_t v81 = &v94[v78];
      v77(v94, v75, v70);
      v77(v81, v76, v70);
      uint64_t v82 = v92;
      v71(v92, v80, v70);
      uint64_t v83 = *(void (**)(char *, uint64_t))(v79 + 8);
      v83(v81, v70);
      uint64_t v84 = &v80[*(int *)(TupleTypeMetadata2 + 48)];
      uint64_t v85 = v75;
      uint64_t v69 = v103;
      v71(v80, v85, v70);
      v71(v84, v127, v70);
      uint64_t v86 = v120;
      v71(&v82[*(int *)(v120 + 36)], v84, v70);
      v83(v80, v70);
      uint64_t v87 = v100;
      (*(void (**)(uint64_t, char *, uint64_t))(v100 + 32))(v69, v82, v86);
      uint64_t v88 = 0;
      return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v87 + 56))(v69, v88, 1, v86);
    }
  }
  else
  {
    uint64_t v115 = (void (**)(char *, uint64_t))(v29 + 8);
    uint64_t v111 = (void (**)(char *, void (*)(void, void), uint64_t))(v25 + 16);
    uint64_t v112 = v35;
    uint64_t v110 = *(void *)(AssociatedConformanceWitness + 8);
    uint64_t v109 = (void (**)(char *))(v107 + 2);
    uint64_t v108 = (void (**)(char *, uint64_t))(v25 + 8);
    ++v107;
    uint64_t v49 = v105;
    uint64_t v50 = v102;
    uint64_t v47 = v124;
    uint64_t v106 = v42;
    while (1)
    {
      char v51 = dispatch thunk of static Equatable.== infix(_:_:)();
      uint64_t v52 = *v115;
      (*v115)(v42, v28);
      uint64_t v53 = v122;
      uint64_t v48 = v49;
      (*v111)(v122, v49, v50);
      uint64_t v54 = v50;
      if (v51)
      {
        uint64_t v44 = v103;
        uint64_t v66 = v50;
        uint64_t v67 = v101;
        uint64_t v35 = v112;
        uint64_t v56 = v121;
        uint64_t v64 = v99;
        goto LABEL_11;
      }
      uint64_t v105 = v52;
      uint64_t v55 = v116;
      uint64_t v56 = v121;
      Array.subscript.getter();
      uint64_t v57 = (void (*)(char *, void))dispatch thunk of Collection.subscript.read();
      uint64_t v58 = v117;
      (*v109)(v117);
      v57(v128, 0);
      (*v108)(v53, v54);
      char v59 = v118(v55, v58);
      uint64_t v60 = *v107;
      (*v107)(v58, v56);
      uint64_t result = v60(v55, v56);
      uint64_t v35 = v112;
      if ((v59 & 1) == 0)
      {
        uint64_t v69 = v103;
        uint64_t v47 = v124;
        uint64_t v70 = v125;
        uint64_t v67 = v101;
        uint64_t v68 = TupleTypeMetadata2;
        goto LABEL_12;
      }
      uint64_t v62 = a3 + 1;
      if (__OFADD__(a3, 1)) {
        break;
      }
      uint64_t v47 = v124;
      uint64_t v49 = v48;
      dispatch thunk of Collection.formIndex(after:)();
      uint64_t v63 = MEMORY[0x21050F210](v127, v56);
      uint64_t v42 = v106;
      uint64_t v50 = v54;
      uint64_t v28 = v120;
      v113(v106, v123, v120);
      ++a3;
      if (v62 == v63)
      {
        a3 = v62;
        uint64_t v44 = v103;
        uint64_t v35 = v112;
        uint64_t v46 = v122;
        v105(v42, v28);
        goto LABEL_9;
      }
    }
    __break(1u);
  }
  __break(1u);
  return result;
}

uint64_t protocol witness for StatelessCollectionSearcher.search(_:in:) in conformance ZSearcher<A>@<X0>(void (*a1)(char *, uint64_t)@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, char *a4@<X8>)
{
  return ZSearcher.search(_:in:)(a1, a2, *(char **)v4, *(void *)(v4 + 8), *(uint64_t (**)(char *, char *))(v4 + 16), *(void *)(v4 + 24), *(void *)(a3 + 16), *(void *)(a3 + 24), a4);
}

uint64_t protocol witness for CollectionSearcher.state(for:in:) in conformance ZSearcher<A>@<X0>(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  return StatelessCollectionSearcher.state(for:in:)(a1, a2);
}

uint64_t protocol witness for CollectionSearcher.search(_:_:) in conformance ZSearcher<A>@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, char *a4@<X8>)
{
  uint64_t WitnessTable = swift_getWitnessTable();

  return StatelessCollectionSearcher.search(_:_:)(a1, a2, a3, WitnessTable, a4);
}

uint64_t compare #1 <A>(start:minLength:) in zAlgorithm<A>(_:by:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(char *, char *), uint64_t a5, uint64_t a6, uint64_t a7, void *a8, uint64_t a9)
{
  uint64_t v28 = a6;
  uint64_t v29 = a4;
  uint64_t v13 = *(void *)(a9 - 8);
  uint64_t v14 = MEMORY[0x270FA5388](a1);
  uint64_t v16 = (char *)&v26 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v17 = MEMORY[0x270FA5388](v14);
  uint64_t v19 = (char *)&v26 - v18;
  uint64_t v30 = v17;
  uint64_t v21 = v17 + v20;
  if (__OFADD__(v17, v20))
  {
LABEL_16:
    __break(1u);
LABEL_17:
    uint64_t result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *((void *)v16 + 2) + 1, 1, v16);
    uint64_t v16 = (char *)result;
    *(void *)(v21 + 16) = result;
    goto LABEL_12;
  }
  uint64_t v31 = MEMORY[0x21050F1F0](a3, a9);
  if (v21 < v31)
  {
    uint64_t v26 = a7;
    uint64_t v27 = a8;
    a7 = v13 + 8;
    uint64_t v13 = v30;
    while (1)
    {
      v13 += a2;
      Array.subscript.getter();
      Array.subscript.getter();
      uint64_t v21 = v29(v19, v16);
      a8 = *(void **)a7;
      (*(void (**)(char *, uint64_t))a7)(v16, a9);
      ((void (*)(char *, uint64_t))a8)(v19, a9);
      if ((v21 & 1) == 0)
      {
        uint64_t v31 = v13;
        a7 = v26;
        a8 = v27;
        goto LABEL_10;
      }
      uint64_t v22 = a2 + 1;
      if (__OFADD__(a2, 1)) {
        break;
      }
      ++a2;
      uint64_t v13 = v30;
      if (v30 + a2 >= v31)
      {
        a2 = v22;
        a7 = v26;
        a8 = v27;
        goto LABEL_11;
      }
    }
    __break(1u);
    goto LABEL_16;
  }
  uint64_t v31 = v21;
LABEL_10:
  uint64_t v13 = v30;
LABEL_11:
  uint64_t v21 = v28;
  uint64_t v16 = *(char **)(v28 + 16);
  uint64_t result = swift_isUniquelyReferenced_nonNull_native();
  *(void *)(v21 + 16) = v16;
  if ((result & 1) == 0) {
    goto LABEL_17;
  }
LABEL_12:
  unint64_t v25 = *((void *)v16 + 2);
  unint64_t v24 = *((void *)v16 + 3);
  if (v25 >= v24 >> 1)
  {
    uint64_t result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v24 > 1), v25 + 1, 1, v16);
    uint64_t v16 = (char *)result;
  }
  *((void *)v16 + 2) = v25 + 1;
  *(void *)&v16[8 * v25 + 32] = a2;
  *(void *)(v21 + 16) = v16;
  *(void *)(a7 + 16) = v13;
  a8[2] = v31;
  return result;
}

uint64_t Compiler.ByteCodeGen.emitRoot(_:)@<X0>(unint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = v3;
  uint64_t v7 = swift_allocObject();
  *(void *)(v7 + 24) = 0;
  *(void *)(v7 + 32) = 0;
  *(void *)(v7 + 16) = 0;
  *(unsigned char *)(v7 + 40) = 1;
  *(void *)(v7 + 48) = a1;
  unint64_t v8 = v7 | 0x1000000000000000;
  *(_OWORD *)(v7 + 56) = 0u;
  *(_OWORD *)(v7 + 72) = 0u;
  *(unsigned char *)(v7 + 88) = 0;
  swift_retain();
  Compiler.ByteCodeGen.emitNode(_:)(v8);
  uint64_t result = swift_release();
  if (!v4)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<MatchingOptions.Representation>);
    uint64_t v10 = swift_allocObject();
    *(_OWORD *)(v10 + 16) = xmmword_209FAFD60;
    *(_DWORD *)(v10 + 32) = 81984;
    uint64_t v16 = v10;
    char v11 = DSLTree.Node._canOnlyMatchAtStartImpl(_:)((uint64_t)&v16, a1);
    swift_bridgeObjectRelease();
    uint64_t v12 = (char **)(v2 + *(int *)(type metadata accessor for Compiler.ByteCodeGen(0) + 20));
    *((unsigned char *)v12 + *(int *)(type metadata accessor for MEProgram.Builder(0) + 88)) = v11 & 1;
    uint64_t v13 = *v12;
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
      uint64_t v13 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *((void *)v13 + 2) + 1, 1, v13, &demangling cache variable for type metadata for _ContiguousArrayStorage<Instruction>);
    }
    unint64_t v15 = *((void *)v13 + 2);
    unint64_t v14 = *((void *)v13 + 3);
    if (v15 >= v14 >> 1) {
      uint64_t v13 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v14 > 1), v15 + 1, 1, v13, &demangling cache variable for type metadata for _ContiguousArrayStorage<Instruction>);
    }
    *((void *)v13 + 2) = v15 + 1;
    *(void *)&v13[8 * v15 + 32] = 0x1B00000000000000;
    *uint64_t v12 = v13;
    return MEProgram.Builder.assemble()(a2);
  }
  return result;
}

uint64_t Compiler.ByteCodeGen.emitNode(_:)(unint64_t a1)
{
  uint64_t v3 = v1;
  uint64_t v5 = type metadata accessor for DSLTree.Atom(0);
  MEMORY[0x270FA5388](v5 - 8);
  uint64_t v7 = &v87[-((v6 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v8 = type metadata accessor for DSLTree.QuantificationKind(0);
  MEMORY[0x270FA5388](v8 - 8);
  uint64_t v10 = &v87[-((v9 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v11 = type metadata accessor for DSLTree._AST.QuantificationAmount(0);
  MEMORY[0x270FA5388](v11 - 8);
  uint64_t v13 = &v87[-((v12 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v14 = type metadata accessor for DSLTree._AST.GroupKind(0);
  MEMORY[0x270FA5388](v14 - 8);
  uint64_t v16 = &v87[-((v15 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v17 = 0;
  switch((a1 >> 59) & 0x1E | (a1 >> 2) & 1)
  {
    case 1uLL:
      uint64_t v17 = v3;
      Compiler.ByteCodeGen.emitConcatenation(_:)(*(void *)((a1 & 0xFFFFFFFFFFFFFFBLL) + 0x10));
      if (!v2) {
        return 0;
      }
      return v17;
    case 2uLL:
      uint64_t v18 = a1 & 0xFFFFFFFFFFFFFFBLL;
      uint64_t v19 = *(void *)((a1 & 0xFFFFFFFFFFFFFFBLL) + 0x10);
      uint64_t v20 = *(void **)(v18 + 24);
      Swift::UInt v21 = *(void *)(v18 + 32);
      char v22 = *(unsigned char *)(v18 + 40);
      unint64_t v23 = *(void *)(v18 + 48);
      uint64_t v24 = *(void *)(v18 + 64);
      uint64_t v25 = *(void *)(v18 + 72);
      uint64_t v26 = *(void *)(v18 + 80);
      int v27 = *(unsigned __int8 *)(v18 + 88);
      uint64_t v96 = *(void *)(v18 + 56);
      uint64_t v90 = v24;
      uint64_t v91 = v25;
      uint64_t v92 = v26;
      unint64_t v93 = v23;
      outlined copy of CaptureTransform?(v96, v24, v25, v26, v27);
      uint64_t v28 = (char *)v3;
      MatchingOptions.beginScope()();
      uint64_t v29 = (char **)(v3 + *(int *)(type metadata accessor for Compiler.ByteCodeGen(0) + 20));
      if ((v22 & 1) == 0)
      {
        uint64_t v89 = v29[13];
        Swift::UInt v30 = v21;
        uint64_t v31 = v19;
        int v32 = v27;
        uint64_t v33 = *(int *)(type metadata accessor for MEProgram.Builder(0) + 96);
        char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
        uint64_t v94 = *(char **)((char *)v29 + v33);
        *(char **)((char *)v29 + v33) = (char *)0x8000000000000000;
        uint64_t v28 = (char *)&v94;
        specialized _NativeDictionary.updateValue(_:forKey:isUnique:)((uint64_t)v89, v30, isUniquelyReferenced_nonNull_native);
        *(char **)((char *)v29 + v33) = v94;
        int v27 = v32;
        uint64_t v19 = v31;
        swift_bridgeObjectRelease();
      }
      if (v20)
      {
        uint64_t v28 = (char *)v29 + *(int *)(type metadata accessor for MEProgram.Builder(0) + 80);
        v35._unint64_t countAndFlagsBits = v19;
        v35._object = v20;
        CaptureList.indexOfCapture(named:)(v35);
      }
      unint64_t v36 = (unint64_t)v29[13];
      if (__OFADD__(v36, 1))
      {
        __break(1u);
      }
      else
      {
        v29[13] = (char *)(v36 + 1);
        uint64_t v19 = 0x1600000000000000;
        uint64_t v28 = *v29;
        if (swift_isUniquelyReferenced_nonNull_native()) {
          goto LABEL_12;
        }
      }
      uint64_t v28 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *((void *)v28 + 2) + 1, 1, v28, &demangling cache variable for type metadata for _ContiguousArrayStorage<Instruction>);
LABEL_12:
      uint64_t v37 = v36 | v19;
      unint64_t v39 = *((void *)v28 + 2);
      unint64_t v38 = *((void *)v28 + 3);
      uint64_t v40 = v39 + 1;
      if (v39 >= v38 >> 1) {
        uint64_t v28 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v38 > 1), v39 + 1, 1, v28, &demangling cache variable for type metadata for _ContiguousArrayStorage<Instruction>);
      }
      *((void *)v28 + 2) = v40;
      *(void *)&v28[8 * v39 + 32] = v37;
      *uint64_t v29 = v28;
      uint64_t v41 = Compiler.ByteCodeGen.emitNode(_:)(v93);
      if (!v2)
      {
        uint64_t v40 = v41;
        LOBYTE(v37) = v42;
        unint64_t v39 = 0x1700000000000000;
        uint64_t v17 = (uint64_t)*v29;
        char v74 = swift_isUniquelyReferenced_nonNull_native();
        unsigned int v88 = v27;
        if (v74) {
          goto LABEL_52;
        }
        goto LABEL_81;
      }
      outlined consume of CaptureTransform?(v96, v90, v91, v92, v27);
      uint64_t v17 = *(void *)v3;
      if (!*(void *)(*(void *)v3 + 16))
      {
        __break(1u);
LABEL_78:
        uint64_t v17 = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew()(v17);
        uint64_t v43 = *(void *)(v17 + 16);
        if (v43) {
          goto LABEL_18;
        }
        goto LABEL_79;
      }
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
        goto LABEL_78;
      }
      uint64_t v43 = *(void *)(v17 + 16);
      if (v43)
      {
LABEL_18:
        *(void *)(v17 + 16) = v43 - 1;
        *(void *)uint64_t v3 = v17;
        return v17;
      }
LABEL_79:
      __break(1u);
LABEL_80:
      __break(1u);
LABEL_81:
      uint64_t v17 = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(void *)(v17 + 16) + 1, 1, (char *)v17, &demangling cache variable for type metadata for _ContiguousArrayStorage<Instruction>);
LABEL_52:
      unint64_t v93 = v36;
      unint64_t v75 = v36 | v39;
      unint64_t v77 = *(void *)(v17 + 16);
      unint64_t v76 = *(void *)(v17 + 24);
      unint64_t v39 = v77 + 1;
      if (v77 >= v76 >> 1) {
        uint64_t v17 = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v76 > 1), v77 + 1, 1, (char *)v17, &demangling cache variable for type metadata for _ContiguousArrayStorage<Instruction>);
      }
      *(void *)(v17 + 16) = v39;
      *(void *)(v17 + 8 * v77 + 32) = v75;
      *uint64_t v29 = (char *)v17;
      unint64_t v36 = v88;
      if ((v37 & 1) == 0)
      {
        uint64_t v37 = v40 | (v93 << 16) | 0x1900000000000000;
        unint64_t v39 = *(void *)(v17 + 16);
        unint64_t v78 = *(void *)(v17 + 24);
        if (v39 >= v78 >> 1) {
          uint64_t v17 = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v78 > 1), v39 + 1, 1, (char *)v17, &demangling cache variable for type metadata for _ContiguousArrayStorage<Instruction>);
        }
        *(void *)(v17 + 16) = v39 + 1;
        *(void *)(v17 + 8 * v39 + 32) = v37;
        *uint64_t v29 = (char *)v17;
      }
      uint64_t v17 = v96;
      if (v96)
      {
        uint64_t v79 = swift_allocObject();
        uint64_t v80 = v90;
        *(void *)(v79 + 16) = v17;
        *(void *)(v79 + 24) = v80;
        uint64_t v81 = v92;
        *(void *)(v79 + 32) = v91;
        *(void *)(v79 + 40) = v81;
        *(unsigned char *)(v79 + 48) = v36;
        uint64_t v17 = (uint64_t)v29[8];
        unint64_t v39 = *(void *)(v17 + 16);
        uint64_t v40 = swift_allocObject();
        *(void *)(v40 + 16) = partial apply for closure #1 in Compiler.ByteCodeGen.emitNode(_:);
        *(void *)(v40 + 24) = v79;
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
          goto LABEL_84;
        }
        goto LABEL_60;
      }
      while (1)
      {
        uint64_t v40 = *(void *)v3;
        if (!*(void *)(*(void *)v3 + 16)) {
          goto LABEL_80;
        }
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
          break;
        }
        uint64_t v85 = *(void *)(v40 + 16);
        if (v85) {
          goto LABEL_70;
        }
LABEL_83:
        __break(1u);
LABEL_84:
        uint64_t v17 = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(void *)(v17 + 16) + 1, 1, (void *)v17, &demangling cache variable for type metadata for _ContiguousArrayStorage<(_:_:)>);
LABEL_60:
        unint64_t v36 = *(void *)(v17 + 16);
        unint64_t v82 = *(void *)(v17 + 24);
        if (v36 >= v82 >> 1) {
          uint64_t v17 = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v82 > 1), v36 + 1, 1, (void *)v17, &demangling cache variable for type metadata for _ContiguousArrayStorage<(_:_:)>);
        }
        *(void *)(v17 + 16) = v36 + 1;
        uint64_t v83 = v17 + 16 * v36;
        *(void *)(v83 + 32) = partial apply for thunk for @escaping @callee_guaranteed (@guaranteed String, @in_guaranteed Processor._StoredCapture) -> (@out Any?, @error @owned Error);
        *(void *)(v83 + 40) = v40;
        v29[8] = (char *)v17;
        uint64_t v37 = v93 | (v39 << 16) | 0x1800000000000000;
        uint64_t v17 = (uint64_t)*v29;
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
          uint64_t v17 = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(void *)(v17 + 16) + 1, 1, (char *)v17, &demangling cache variable for type metadata for _ContiguousArrayStorage<Instruction>);
        }
        unint64_t v39 = *(void *)(v17 + 16);
        unint64_t v84 = *(void *)(v17 + 24);
        if (v39 >= v84 >> 1) {
          uint64_t v17 = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v84 > 1), v39 + 1, 1, (char *)v17, &demangling cache variable for type metadata for _ContiguousArrayStorage<Instruction>);
        }
        *(void *)(v17 + 16) = v39 + 1;
        *(void *)(v17 + 8 * v39 + 32) = v37;
        *uint64_t v29 = (char *)v17;
      }
      uint64_t v40 = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew()(v40);
      uint64_t v85 = *(void *)(v40 + 16);
      if (!v85) {
        goto LABEL_83;
      }
LABEL_70:
      uint64_t v17 = 0;
      *(void *)(v40 + 16) = v85 - 1;
      *(void *)uint64_t v3 = v40;
      return v17;
    case 3uLL:
      uint64_t v44 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (DSLTree._AST.GroupKind, DSLTree.Node));
      uint64_t v45 = swift_projectBox();
      uint64_t v46 = *(void *)(v45 + *(int *)(v44 + 48));
      outlined init with copy of MEProgram(v45, (uint64_t)v16, type metadata accessor for DSLTree._AST.GroupKind);
      uint64_t v47 = v46;
      uint64_t v17 = v3;
      Compiler.ByteCodeGen.emitNoncapturingGroup(_:_:)((unint64_t)v16, v47);
      uint64_t v48 = type metadata accessor for DSLTree._AST.GroupKind;
      uint64_t v49 = (uint64_t)v16;
      goto LABEL_24;
    case 4uLL:
      uint64_t v17 = v3;
      Compiler.ByteCodeGen.emitNode(_:)(*(void *)((a1 & 0xFFFFFFFFFFFFFFBLL) + 0x10));
      if (!v2) {
        return 0;
      }
      return v17;
    case 5uLL:
      type metadata accessor for Unsupported();
      lazy protocol witness table accessor for type AST.Quantification.Kind and conformance AST.Quantification.Kind(&lazy protocol witness table cache variable for type Unsupported and conformance Unsupported, MEMORY[0x263F8F860]);
      swift_allocError();
      unint64_t v50 = 0x6F697469646E6F43;
      unint64_t v51 = 0xEC000000736C616ELL;
      uint64_t v52 = 1239;
      goto LABEL_46;
    case 6uLL:
      uint64_t v53 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (DSLTree._AST.QuantificationAmount, DSLTree.QuantificationKind, DSLTree.Node));
      uint64_t v54 = swift_projectBox();
      uint64_t v55 = v54 + *(int *)(v53 + 48);
      unint64_t v56 = *(void *)(v54 + *(int *)(v53 + 64));
      outlined init with copy of MEProgram(v54, (uint64_t)v13, type metadata accessor for DSLTree._AST.QuantificationAmount);
      outlined init with copy of MEProgram(v55, (uint64_t)v10, type metadata accessor for DSLTree.QuantificationKind);
      uint64_t v17 = v3;
      Compiler.ByteCodeGen.emitQuantification(_:_:_:)((uint64_t)v13, (uint64_t)v10, v56);
      outlined destroy of MEProgram((uint64_t)v10, type metadata accessor for DSLTree.QuantificationKind);
      uint64_t v48 = type metadata accessor for DSLTree._AST.QuantificationAmount;
      uint64_t v49 = (uint64_t)v13;
LABEL_24:
      outlined destroy of MEProgram(v49, v48);
      if (!v2) {
        return 0;
      }
      return v17;
    case 7uLL:
      uint64_t v57 = *(char **)((a1 & 0xFFFFFFFFFFFFFFBLL) + 0x10);
      int v58 = *(unsigned __int8 *)((a1 & 0xFFFFFFFFFFFFFFBLL) + 0x18);
      uint64_t v94 = v57;
      char v95 = v58;
      uint64_t v17 = (uint64_t)&v94;
      if ((DSLTree.CustomCharacterClass.containsDot.getter() & 1) == 0)
      {
        uint64_t v94 = v57;
        char v95 = v58;
        uint64_t v17 = v3;
        Compiler.ByteCodeGen.emitCustomCharacterClass(_:)((uint64_t)&v94);
        if (v2) {
          return v17;
        }
        return 0;
      }
      if (v58)
      {
        type metadata accessor for Unsupported();
        lazy protocol witness table accessor for type AST.Quantification.Kind and conformance AST.Quantification.Kind(&lazy protocol witness table cache variable for type Unsupported and conformance Unsupported, MEMORY[0x263F8F860]);
        swift_allocError();
        unint64_t v50 = 0x6465747265766E49;
        unint64_t v51 = 0xEC000000796E6120;
        uint64_t v52 = 1249;
LABEL_46:
        MEMORY[0x21050E6B0](v50, v51, "/Library/Caches/com.apple.xbs/Sources/swiftlang_overlay_Platform_Device/swift-experimental-string-processing/Sources/_StringProcessing/ByteCodeGen.swift", 152, 2, v52);
        swift_willThrow();
      }
      else
      {
        uint64_t v17 = v3;
        Compiler.ByteCodeGen.emitDot()();
        if (!v2) {
          return 0;
        }
      }
      return v17;
    case 8uLL:
      uint64_t v59 = swift_projectBox();
      outlined init with copy of MEProgram(v59, (uint64_t)v7, type metadata accessor for DSLTree.Atom);
      uint64_t v17 = v3;
      Compiler.ByteCodeGen.emitAtom(_:)((uint64_t)v7);
      if (v2)
      {
        outlined destroy of MEProgram((uint64_t)v7, type metadata accessor for DSLTree.Atom);
      }
      else
      {
        outlined destroy of MEProgram((uint64_t)v7, type metadata accessor for DSLTree.Atom);
        return 0;
      }
      return v17;
    case 9uLL:
    case 0x10uLL:
      return v17;
    case 0xAuLL:
      Compiler.ByteCodeGen.emitQuotedLiteral(_:)(*(void *)((a1 & 0xFFFFFFFFFFFFFFBLL) + 0x10), *(void *)((a1 & 0xFFFFFFFFFFFFFFBLL) + 0x18));
      return 0;
    case 0xBuLL:
      type metadata accessor for Unsupported();
      lazy protocol witness table accessor for type AST.Quantification.Kind and conformance AST.Quantification.Kind(&lazy protocol witness table cache variable for type Unsupported and conformance Unsupported, MEMORY[0x263F8F860]);
      swift_allocError();
      unint64_t v50 = 0x6620746E65736261;
      unint64_t v51 = 0xEF6E6F6974636E75;
      uint64_t v52 = 1265;
      goto LABEL_46;
    case 0xCuLL:
      uint64_t v60 = (void *)swift_projectBox();
      uint64_t v17 = v3;
      uint64_t v61 = Compiler.ByteCodeGen.emitNode(_:)(*v60);
      if (!v2) {
        return v61;
      }
      return v17;
    case 0xDuLL:
      type metadata accessor for Unsupported();
      lazy protocol witness table accessor for type AST.Quantification.Kind and conformance AST.Quantification.Kind(&lazy protocol witness table cache variable for type Unsupported and conformance Unsupported, MEMORY[0x263F8F860]);
      swift_allocError();
      unint64_t v50 = 0x72656D75736E6F63;
      unint64_t v51 = 0xE800000000000000;
      uint64_t v52 = 1267;
      goto LABEL_46;
    case 0xEuLL:
      uint64_t v62 = *(void *)((a1 & 0xFFFFFFFFFFFFFFBLL) + 0x18);
      uint64_t v63 = *(void *)((a1 & 0xFFFFFFFFFFFFFFBLL) + 0x20);
      uint64_t v64 = swift_allocObject();
      *(void *)(v64 + 16) = v62;
      *(void *)(v64 + 24) = v63;
      uint64_t v65 = (uint64_t *)(v3 + *(int *)(type metadata accessor for Compiler.ByteCodeGen(0) + 20));
      uint64_t v66 = (void *)v65[9];
      uint64_t v67 = v66[2];
      uint64_t v68 = swift_allocObject();
      *(void *)(v68 + 16) = partial apply for closure #1 in Compiler.ByteCodeGen.emitMatcher(_:);
      *(void *)(v68 + 24) = v64;
      swift_retain();
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
        uint64_t v66 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v66[2] + 1, 1, v66, &demangling cache variable for type metadata for _ContiguousArrayStorage<(_:_:_:)>);
      }
      unint64_t v70 = v66[2];
      unint64_t v69 = v66[3];
      if (v70 >= v69 >> 1) {
        uint64_t v66 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v69 > 1), v70 + 1, 1, v66, &demangling cache variable for type metadata for _ContiguousArrayStorage<(_:_:_:)>);
      }
      v66[2] = v70 + 1;
      uint64_t v71 = &v66[2 * v70];
      v71[4] = partial apply for thunk for @escaping @callee_guaranteed (@guaranteed String, @unowned String.Index, @unowned Range<String.Index>) -> (@out (String.Index, Any)?, @error @owned Error);
      v71[5] = v68;
      v65[9] = (uint64_t)v66;
      uint64_t v17 = v65[14];
      if (__OFADD__(v17, 1))
      {
        __break(1u);
      }
      else
      {
        v65[14] = v17 + 1;
        uint64_t v68 = *v65;
        if (swift_isUniquelyReferenced_nonNull_native()) {
          goto LABEL_42;
        }
      }
      uint64_t v68 = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(void *)(v68 + 16) + 1, 1, (char *)v68, &demangling cache variable for type metadata for _ContiguousArrayStorage<Instruction>);
LABEL_42:
      unint64_t v73 = *(void *)(v68 + 16);
      unint64_t v72 = *(void *)(v68 + 24);
      if (v73 >= v72 >> 1) {
        uint64_t v68 = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v72 > 1), v73 + 1, 1, (char *)v68, &demangling cache variable for type metadata for _ContiguousArrayStorage<Instruction>);
      }
      *(void *)(v68 + 16) = v73 + 1;
      *(void *)(v68 + 8 * v73 + 32) = v67 | (v17 << 16) | 0xF00000000000000;
      *uint64_t v65 = v68;
      return v17;
    case 0xFuLL:
      type metadata accessor for Unsupported();
      lazy protocol witness table accessor for type AST.Quantification.Kind and conformance AST.Quantification.Kind(&lazy protocol witness table cache variable for type Unsupported and conformance Unsupported, MEMORY[0x263F8F860]);
      swift_allocError();
      unint64_t v50 = 0xD000000000000014;
      unint64_t v51 = 0x8000000209FB62F0;
      uint64_t v52 = 1273;
      goto LABEL_46;
    default:
      specialized Compiler.ByteCodeGen.emitAlternationGen<A>(_:withBacktracking:_:)(*(void *)(a1 + 16), v3);
      if (!v2) {
        return 0;
      }
      return v17;
  }
}

uint64_t MEProgram.Builder.assemble()@<X0>(uint64_t a1@<X8>)
{
  uint64_t v66 = (int *)type metadata accessor for MEProgram.Builder(0);
  unint64_t v3 = *(void *)(v1 + v66[23]);
  unint64_t v4 = v3 + 64;
  uint64_t v5 = 1 << *(unsigned char *)(v3 + 32);
  uint64_t v6 = -1;
  if (v5 < 64) {
    uint64_t v6 = ~(-1 << v5);
  }
  unint64_t v7 = v6 & *(void *)(v3 + 64);
  uint64_t v8 = *(char **)v1;
  swift_bridgeObjectRetain();
  uint64_t v58 = a1;
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
LABEL_74:
  }
    uint64_t v8 = specialized _ArrayBuffer._consumeAndCreateNew()((uint64_t)v8);
  int64_t v9 = 0;
  int64_t v67 = (unint64_t)(v5 + 63) >> 6;
  unint64_t v10 = (unint64_t)(v8 + 32);
  uint64_t v11 = 0x1A00000000000000;
  while (1)
  {
    if (v7)
    {
      unint64_t v12 = __clz(__rbit64(v7));
      v7 &= v7 - 1;
      unint64_t v13 = v12 | (v9 << 6);
    }
    else
    {
      int64_t v14 = v9 + 1;
      if (__OFADD__(v9, 1)) {
        goto LABEL_73;
      }
      if (v14 >= v67)
      {
LABEL_32:
        uint64_t result = swift_release();
        uint64_t v11 = (uint64_t)v70;
        *unint64_t v70 = v8;
        uint64_t v1 = v59;
        if (v59) {
          return result;
        }
        goto LABEL_33;
      }
      unint64_t v15 = *(void *)(v4 + 8 * v14);
      ++v9;
      if (!v15)
      {
        int64_t v9 = v14 + 1;
        if (v14 + 1 >= v67) {
          goto LABEL_32;
        }
        unint64_t v15 = *(void *)(v4 + 8 * v9);
        if (!v15)
        {
          int64_t v9 = v14 + 2;
          if (v14 + 2 >= v67) {
            goto LABEL_32;
          }
          unint64_t v15 = *(void *)(v4 + 8 * v9);
          if (!v15)
          {
            int64_t v16 = v14 + 3;
            if (v16 >= v67) {
              goto LABEL_32;
            }
            unint64_t v15 = *(void *)(v4 + 8 * v16);
            int64_t v9 = v16;
            if (!v15)
            {
              while (1)
              {
                int64_t v9 = v16 + 1;
                if (__OFADD__(v16, 1)) {
                  break;
                }
                if (v9 >= v67) {
                  goto LABEL_32;
                }
                unint64_t v15 = *(void *)(v4 + 8 * v9);
                ++v16;
                if (v15) {
                  goto LABEL_20;
                }
              }
              __break(1u);
LABEL_76:
              __break(1u);
LABEL_77:
              uint64_t v5 = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew()(v5);
              if ((v10 & 0x8000000000000000) != 0)
              {
LABEL_78:
                __break(1u);
LABEL_79:
                __break(1u);
LABEL_80:
                unint64_t v4 = (unint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(void *)(v4 + 16) + 1, 1, (char *)v4, &demangling cache variable for type metadata for _ContiguousArrayStorage<Instruction>);
LABEL_38:
                unint64_t v27 = *(void *)(v4 + 16);
                unint64_t v26 = *(void *)(v4 + 24);
                if (v27 >= v26 >> 1) {
                  unint64_t v4 = (unint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v26 > 1), v27 + 1, 1, (char *)v4, &demangling cache variable for type metadata for _ContiguousArrayStorage<Instruction>);
                }
                *(void *)(v4 + 16) = v27 + 1;
                *(void *)(v4 + 8 * v27 + 32) = 0x1C00000000000000;
                *(void *)uint64_t v11 = v4;
LABEL_41:
                uint64_t v59 = v1;
                uint64_t v28 = *(void *)(v11 + 88);
                uint64_t v5 = *(void *)(v28 + 16);
                swift_bridgeObjectRetain();
                uint64_t v62 = v5;
                if (!v5)
                {
LABEL_59:
                  uint64_t v34 = *(void *)(v11 + 24);
                  uint64_t v57 = *(void *)(v34 + 16);
                  uint64_t v35 = *(void *)(v11 + 48);
                  uint64_t v49 = *(void *)(v11 + 40);
                  uint64_t v53 = *(void *)(v49 + 16);
                  uint64_t v69 = *(void *)(v11 + 112);
                  uint64_t v65 = *(void *)(v11 + 120);
                  uint64_t v47 = *(void *)(v11 + 56);
                  uint64_t v48 = *(void *)(v11 + 64);
                  uint64_t v54 = *(void *)(v48 + 16);
                  uint64_t v55 = *(void *)(v35 + 16);
                  uint64_t v46 = *(void *)(v11 + 72);
                  uint64_t v50 = *(void *)(v46 + 16);
                  uint64_t v51 = *(void *)(v47 + 16);
                  uint64_t v52 = *(void *)(v11 + 96);
                  uint64_t v63 = *(void *)(v11 + 104);
                  char v61 = *(unsigned char *)(v11 + 8);
                  uint64_t v36 = v11 + v66[20];
                  char v56 = *(unsigned char *)(v11 + 9);
                  unint64_t v37 = v4;
                  unint64_t v38 = (int *)type metadata accessor for MEProgram(0);
                  uint64_t v39 = v58 + v38[14];
                  uint64_t v40 = type metadata accessor for CaptureList();
                  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v40 - 8) + 16))(v39, v36, v40);
                  uint64_t v41 = *(void *)(v11 + v66[24]);
                  uint64_t v42 = v11;
                  uint64_t v43 = *(void *)(v11 + v66[21]);
                  char v44 = *(unsigned char *)(v42 + v66[22]);
                  *(void *)uint64_t v58 = v37;
                  *(void *)(v58 + 8) = v34;
                  *(void *)(v58 + 16) = v49;
                  *(void *)(v58 + 24) = v35;
                  *(void *)(v58 + 32) = v47;
                  *(void *)(v58 + 40) = v48;
                  *(void *)(v58 + 48) = v46;
                  *(void *)(v58 + 56) = v57;
                  *(void *)(v58 + 64) = v53;
                  *(void *)(v58 + 72) = 0;
                  *(void *)(v58 + 80) = 0;
                  *(void *)(v58 + 88) = v55;
                  *(void *)(v58 + 96) = v51;
                  *(void *)(v58 + 104) = v54;
                  *(void *)(v58 + 112) = v50;
                  *(void *)(v58 + 120) = v52;
                  *(void *)(v58 + 128) = 0;
                  *(void *)(v58 + 136) = v65;
                  *(void *)(v58 + 144) = v69;
                  *(_OWORD *)(v58 + 168) = 0u;
                  *(_OWORD *)(v58 + 152) = 0u;
                  *(void *)(v58 + 184) = v63;
                  *(unsigned char *)(v58 + 192) = v61;
                  *(unsigned char *)(v58 + 193) = v56;
                  *(void *)(v58 + v38[15]) = v41;
                  *(void *)(v58 + v38[16]) = v43;
                  *(unsigned char *)(v58 + v38[17]) = v44;
                  swift_bridgeObjectRetain();
                  swift_bridgeObjectRetain();
                  swift_bridgeObjectRetain();
                  swift_bridgeObjectRetain();
                  swift_bridgeObjectRetain();
                  swift_bridgeObjectRetain();
                  swift_bridgeObjectRetain();
                  return swift_bridgeObjectRetain();
                }
                unint64_t v7 = 0;
                uint64_t v8 = (char *)(v28 + 56);
                uint64_t v60 = v28;
                while (v7 < *(void *)(v28 + 16))
                {
                  unint64_t v3 = *((void *)v8 - 3);
                  if ((v3 & 0x8000000000000000) != 0) {
                    goto LABEL_68;
                  }
                  if (v3 >= *(void *)(v4 + 16)) {
                    goto LABEL_69;
                  }
                  unint64_t v29 = *((void *)v8 - 2);
                  if ((v29 & 0x8000000000000000) != 0) {
                    goto LABEL_70;
                  }
                  uint64_t v30 = *(void *)(v11 + 80);
                  unint64_t v31 = *(void *)(v30 + 16);
                  if (v29 >= v31) {
                    goto LABEL_71;
                  }
                  uint64_t v11 = v30 + 32;
                  uint64_t v32 = v30 + 32 + 16 * v29;
                  if (*(unsigned char *)(v32 + 8))
                  {
                    __break(1u);
LABEL_82:
                    __break(1u);
                    JUMPOUT(0x209F34D18);
                  }
                  unint64_t v10 = *((void *)v8 - 1);
                  uint64_t v1 = *v8;
                  uint64_t v64 = v4;
                  unint64_t v4 = *(void *)(v4 + 8 * v3 + 32);
                  uint64_t v68 = *(void *)v32;
                  uint64_t v5 = specialized Instruction.OpCode.init(rawValue:)(HIBYTE(v4));
                  switch((char)v5)
                  {
                    case 4:
                    case 16:
                    case 17:
                    case 19:
                      goto LABEL_55;
                    case 5:
                    case 6:
                      v68 |= v4 << 16;
                      goto LABEL_55;
                    case 20:
                      if (v1)
                      {
                        type metadata accessor for Unreachable();
                        lazy protocol witness table accessor for type AST.Quantification.Kind and conformance AST.Quantification.Kind(&lazy protocol witness table cache variable for type Unreachable and conformance Unreachable, MEMORY[0x263F8F850]);
                        swift_allocError();
                        uint64_t v45 = 380;
                        goto LABEL_65;
                      }
                      if (v10 >= v31) {
                        goto LABEL_76;
                      }
                      uint64_t v33 = v11 + 16 * v10;
                      if (*(unsigned char *)(v33 + 8)) {
                        goto LABEL_82;
                      }
                      v68 |= *(void *)v33 << 16;
LABEL_55:
                      unint64_t v4 = v64;
                      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
                        unint64_t v4 = (unint64_t)specialized _ArrayBuffer._consumeAndCreateNew()(v64);
                      }
                      uint64_t v11 = (uint64_t)v70;
                      if (v3 >= *(void *)(v4 + 16)) {
                        goto LABEL_72;
                      }
                      ++v7;
                      *(void *)(v4 + 8 * v3 + 32) = v68 | (v5 << 56);
                      v8 += 32;
                      uint64_t v28 = v60;
                      if (v62 == v7) {
                        goto LABEL_59;
                      }
                      break;
                    default:
                      goto LABEL_63;
                  }
                }
                __break(1u);
LABEL_68:
                __break(1u);
LABEL_69:
                __break(1u);
LABEL_70:
                __break(1u);
LABEL_71:
                __break(1u);
LABEL_72:
                __break(1u);
LABEL_73:
                __break(1u);
                goto LABEL_74;
              }
LABEL_36:
              if (v10 >= *(void *)(v5 + 16)) {
                goto LABEL_79;
              }
              uint64_t v25 = v5 + 16 * v10;
              *(void *)(v25 + 32) = v7;
              *(unsigned char *)(v25 + 40) = 0;
              *(void *)(v11 + 80) = v5;
              if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
                goto LABEL_80;
              }
              goto LABEL_38;
            }
          }
        }
      }
LABEL_20:
      unint64_t v7 = (v15 - 1) & v15;
      unint64_t v13 = __clz(__rbit64(v15)) + (v9 << 6);
    }
    uint64_t v17 = *(uint64_t *)((char *)v70 + v66[24]);
    if (!*(void *)(v17 + 16)
      || (uint64_t v5 = *(void *)(*(void *)(v3 + 56) + 8 * v13),
          unint64_t v18 = specialized __RawDictionaryStorage.find<A>(_:)(*(void *)(*(void *)(v3 + 48) + 8 * v13)),
          (v19 & 1) == 0))
    {
      swift_release();
      uint64_t v11 = (uint64_t)v70;
      *unint64_t v70 = v8;
      lazy protocol witness table accessor for type RegexCompilationError and conformance RegexCompilationError();
      uint64_t v1 = swift_allocError();
      *(void *)uint64_t v23 = 0;
      *(void *)(v23 + 8) = 0;
      *(unsigned char *)(v23 + 16) = 2;
      uint64_t result = swift_willThrow();
      if (v1) {
        return result;
      }
LABEL_33:
      unint64_t v4 = *(void *)v11;
      if (*(unsigned char *)(v11 + 136)) {
        goto LABEL_41;
      }
      unint64_t v10 = *(void *)(v11 + 128);
      unint64_t v7 = *(void *)(v4 + 16);
      uint64_t v5 = *(void *)(v11 + 80);
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
        goto LABEL_77;
      }
      if ((v10 & 0x8000000000000000) != 0) {
        goto LABEL_78;
      }
      goto LABEL_36;
    }
    uint64_t v1 = *(void *)(*(void *)(v17 + 56) + 8 * v18);
    uint64_t v20 = *(void *)(v5 + 16);
    swift_bridgeObjectRetain();
    if (v20) {
      break;
    }
LABEL_5:
    swift_bridgeObjectRelease();
  }
  unint64_t v21 = 0;
  while (v21 < *(void *)(v5 + 16))
  {
    unint64_t v22 = *(void *)(v5 + 32 + 8 * v21);
    if ((v22 & 0x8000000000000000) != 0) {
      goto LABEL_61;
    }
    if (v22 >= *((void *)v8 + 2)) {
      goto LABEL_62;
    }
    ++v21;
    *(void *)(v10 + 8 * v22) = (v1 << 16) | 0x1A00000000000000 | (*(_WORD *)(v10 + 8 * v22) == 1);
    if (v20 == v21) {
      goto LABEL_5;
    }
  }
  __break(1u);
LABEL_61:
  __break(1u);
LABEL_62:
  __break(1u);
LABEL_63:
  type metadata accessor for Unreachable();
  lazy protocol witness table accessor for type AST.Quantification.Kind and conformance AST.Quantification.Kind(&lazy protocol witness table cache variable for type Unreachable and conformance Unreachable, MEMORY[0x263F8F850]);
  swift_allocError();
  uint64_t v45 = 385;
LABEL_65:
  MEMORY[0x21050E690](0x6572203A4F444F54, 0xEC0000006E6F7361, "/Library/Caches/com.apple.xbs/Sources/swiftlang_overlay_Platform_Device/swift-experimental-string-processing/Sources/_StringProcessing/Engine/MEBuilder.swift", 157, 2, v45);
  swift_willThrow();
  return swift_bridgeObjectRelease();
}

uint64_t Compiler.ByteCodeGen.emitAtom(_:)(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for DSLTree._AST.Atom(0);
  MEMORY[0x270FA5388](v2 - 8);
  unint64_t v4 = (char *)&v100 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = type metadata accessor for DSLTree._AST.MatchingOptionSequence(0);
  MEMORY[0x270FA5388](v5 - 8);
  uint64_t v103 = (char *)&v100 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = type metadata accessor for DSLTree._AST.Reference(0);
  MEMORY[0x270FA5388](v7 - 8);
  uint64_t v9 = (uint64_t)&v100 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = type metadata accessor for Unicode.Scalar.Properties();
  uint64_t v101 = *(void *)(v10 - 8);
  MEMORY[0x270FA5388](v10);
  unint64_t v12 = (unint64_t)&v100 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = type metadata accessor for DSLTree.Atom(0);
  uint64_t v14 = MEMORY[0x270FA5388](v13);
  uint64_t v16 = (uint64_t)&v100 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v17 = MEMORY[0x270FA5388](v14);
  char v19 = (char *)&v100 - v18;
  uint64_t v20 = MEMORY[0x270FA5388](v17);
  uint64_t v102 = (uint64_t)&v100 - v21;
  uint64_t v22 = MEMORY[0x270FA5388](v20);
  uint64_t v24 = (char *)&v100 - v23;
  uint64_t v25 = MEMORY[0x270FA5388](v22);
  uint64_t v104 = (uint64_t)&v100 - v26;
  uint64_t v27 = MEMORY[0x270FA5388](v25);
  uint64_t v100 = (uint64_t)&v100 - v28;
  MEMORY[0x270FA5388](v27);
  uint64_t v30 = (uint64_t *)((char *)&v100 - v29);
  uint64_t v105 = a1;
  outlined init with copy of MEProgram(a1, (uint64_t)&v100 - v29, type metadata accessor for DSLTree.Atom);
  switch(swift_getEnumCaseMultiPayload())
  {
    case 1u:
      uint64_t v33 = *(void *)(*v106 + 16);
      if (!v33)
      {
        __break(1u);
        goto LABEL_89;
      }
      uint64_t v34 = *(unsigned int *)v30;
      int v35 = *(_DWORD *)(*v106 + 4 * v33 + 28);
      if ((v35 & 0x10000) == 0)
      {
        uint64_t v30 = v106;
        if ((v35 & 1) != 0
          && (Unicode.Scalar.properties.getter(),
              char v36 = Unicode.Scalar.Properties.isCased.getter(),
              (*(void (**)(unint64_t, uint64_t))(v101 + 8))(v12, v10),
              (v36 & 1) != 0))
        {
          uint64_t v37 = *(int *)(type metadata accessor for Compiler.ByteCodeGen(0) + 20);
          uint64_t v38 = 0x980000000000000;
        }
        else
        {
          uint64_t v37 = *(int *)(type metadata accessor for Compiler.ByteCodeGen(0) + 20);
          uint64_t v38 = 0x900000000000000;
        }
        uint64_t v85 = *(char **)((char *)v30 + v37);
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
          uint64_t v85 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *((void *)v85 + 2) + 1, 1, v85, &demangling cache variable for type metadata for _ContiguousArrayStorage<Instruction>);
        }
        uint64_t v86 = v34 | v38;
        unint64_t v88 = *((void *)v85 + 2);
        unint64_t v87 = *((void *)v85 + 3);
        if (v88 >= v87 >> 1) {
          uint64_t v85 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v87 > 1), v88 + 1, 1, v85, &demangling cache variable for type metadata for _ContiguousArrayStorage<Instruction>);
        }
        *((void *)v85 + 2) = v88 + 1;
        *(void *)&v85[8 * v88 + 32] = v86;
        *(uint64_t *)((char *)v30 + v37) = (uint64_t)v85;
        goto LABEL_79;
      }
      uint64_t v30 = v106;
      if (v34 > 0x7F)
      {
        int v97 = (v34 & 0x3F) << 8;
        if (v34 >= 0x800)
        {
          unsigned int v98 = (v97 | (v34 >> 6) & 0x3F) << 8;
          unsigned int v99 = (((v98 | (v34 >> 12) & 0x3F) << 8) | (v34 >> 18)) - 2122219023;
          unsigned int v78 = (v98 | (v34 >> 12)) + 8487393;
          if (WORD1(v34)) {
            unsigned int v78 = v99;
          }
          uint64_t v30 = v106;
        }
        else
        {
          unsigned int v78 = (v97 | (v34 >> 6)) + 33217;
          uint64_t v30 = v106;
        }
      }
      else
      {
        unsigned int v78 = v34 + 1;
      }
      v107[0] = (v78 + 0xFEFEFEFEFEFEFFLL) & ~(-1 << (8 * (4 - (__clz(v78) >> 3))));
      unint64_t v31 = MEMORY[0x21050F010](v107);
      goto LABEL_58;
    case 2u:
      LOBYTE(v107[0]) = *(unsigned char *)v30;
      uint64_t v30 = v106;
      int v39 = DSLTree.Atom.CharacterClass.asRuntimeModel(_:)(*v106);
      uint64_t v9 = *(int *)(type metadata accessor for Compiler.ByteCodeGen(0) + 20);
      unint64_t v12 = v39 | ((((unint64_t)(v39 & 0x100) >> 8) & 1) << 53) & 0xFFBFFFFFFFFFFFFFLL | ((((unint64_t)(v39 & 0x10000) >> 16) & 1) << 54) | ((unint64_t)((v39 & 0xFF000000) != 0) << 55);
      uint64_t v10 = 0xB00000000000000;
      uint64_t v16 = *(uint64_t *)((char *)v30 + v9);
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
LABEL_89:
      }
        uint64_t v16 = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(void *)(v16 + 16) + 1, 1, (char *)v16, &demangling cache variable for type metadata for _ContiguousArrayStorage<Instruction>);
      unint64_t v40 = v12 | v10;
      unint64_t v42 = *(void *)(v16 + 16);
      unint64_t v41 = *(void *)(v16 + 24);
      if (v42 >= v41 >> 1) {
        uint64_t v16 = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v41 > 1), v42 + 1, 1, (char *)v16, &demangling cache variable for type metadata for _ContiguousArrayStorage<Instruction>);
      }
      *(void *)(v16 + 16) = v42 + 1;
      *(void *)(v16 + 8 * v42 + 32) = v40;
      *(uint64_t *)((char *)v30 + v9) = v16;
      goto LABEL_79;
    case 3u:
      uint64_t v16 = *(unsigned __int8 *)v30;
      if (v16 == 3)
      {
        type metadata accessor for Unsupported();
        lazy protocol witness table accessor for type AST.Quantification.Kind and conformance AST.Quantification.Kind(&lazy protocol witness table cache variable for type Unsupported and conformance Unsupported, MEMORY[0x263F8F860]);
        uint64_t v43 = swift_allocError();
        MEMORY[0x21050E6B0](0xD000000000000019, 0x8000000209FB65C0, "/Library/Caches/com.apple.xbs/Sources/swiftlang_overlay_Platform_Device/swift-experimental-string-processing/Sources/_StringProcessing/ByteCodeGen.swift", 152, 2, 170);
        swift_willThrow();
        uint64_t v30 = v106;
        if (!v43)
        {
LABEL_47:
          uint64_t v111 = v43;
          goto LABEL_79;
        }
LABEL_54:
        uint64_t v16 = v102;
        outlined init with copy of MEProgram(v105, v102, type metadata accessor for DSLTree.Atom);
        uint64_t result = swift_getEnumCaseMultiPayload();
        switch((int)result)
        {
          case 1:
          case 2:
          case 5:
          case 8:
          case 9:
          case 10:
            goto LABEL_82;
          case 3:
            return result;
          case 6:
            goto LABEL_84;
          default:
            goto LABEL_80;
        }
        return result;
      }
      uint64_t v30 = v106;
      uint64_t v67 = *(void *)(*v106 + 16);
      if (!v67) {
        goto LABEL_98;
      }
      int v68 = *(_DWORD *)(*v106 + 4 * v67 + 28);
      uint64_t v69 = (v68 & 0x2800) != 0;
      unint64_t v70 = (unint64_t)(v68 & 0x10000) >> 16;
      unint64_t v71 = (unint64_t)(v68 & 4) >> 2;
      unint64_t v72 = (unint64_t)(v68 & 0x40) >> 6;
      uint64_t v73 = *(int *)(type metadata accessor for Compiler.ByteCodeGen(0) + 20);
      unint64_t v74 = v16 & 0xFF2FFFFFFFFFFFFFLL | ((v70 & 1) << 52) & 0xFF3FFFFFFFFFFFFFLL | (v69 << 53) & 0xFF3FFFFFFFFFFFFFLL | ((v72 & 1) << 54) & 0xFF7FFFFFFFFFFFFFLL | ((v71 & 1) << 55);
      unint64_t v75 = *(char **)((char *)v30 + v73);
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
        unint64_t v75 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *((void *)v75 + 2) + 1, 1, v75, &demangling cache variable for type metadata for _ContiguousArrayStorage<Instruction>);
      }
      unint64_t v77 = *((void *)v75 + 2);
      unint64_t v76 = *((void *)v75 + 3);
      if (v77 >= v76 >> 1) {
        unint64_t v75 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v76 > 1), v77 + 1, 1, v75, &demangling cache variable for type metadata for _ContiguousArrayStorage<Instruction>);
      }
      *((void *)v75 + 2) = v77 + 1;
      *(void *)&v75[8 * v77 + 32] = v74 ^ 0xE50000000000000;
      *(uint64_t *)((char *)v30 + v73) = (uint64_t)v75;
      if (v111) {
        goto LABEL_54;
      }
LABEL_79:
      uint64_t v16 = v104;
      outlined init with copy of MEProgram(v105, v104, type metadata accessor for DSLTree.Atom);
      uint64_t result = swift_getEnumCaseMultiPayload();
      switch((int)result)
      {
        case 1:
        case 2:
        case 5:
        case 8:
        case 9:
        case 10:
          goto LABEL_82;
        case 3:
          return result;
        case 6:
          goto LABEL_84;
        default:
          goto LABEL_80;
      }
      return result;
    case 4u:
      outlined init with take of DSLTree.QuantificationKind((uint64_t)v30, v9, type metadata accessor for DSLTree._AST.Reference);
      uint64_t v30 = v106;
      uint64_t v44 = v111;
      Compiler.ByteCodeGen.emitBackreference(_:)(v9);
      if (!v44)
      {
        uint64_t v111 = 0;
        outlined destroy of MEProgram(v9, type metadata accessor for DSLTree._AST.Reference);
        goto LABEL_79;
      }
      outlined destroy of MEProgram(v9, type metadata accessor for DSLTree._AST.Reference);
      outlined init with copy of MEProgram(v105, (uint64_t)v19, type metadata accessor for DSLTree.Atom);
      uint64_t result = swift_getEnumCaseMultiPayload();
      switch((int)result)
      {
        case 1:
        case 2:
        case 5:
        case 8:
        case 9:
        case 10:
          goto LABEL_82;
        case 3:
          return result;
        case 6:
          uint64_t v96 = (uint64_t)v19;
          goto LABEL_85;
        default:
          uint64_t v46 = (uint64_t)v19;
          goto LABEL_81;
      }
      return result;
    case 5u:
      v107[0] = *v30;
      uint64_t v30 = v106;
      uint64_t v47 = *(void *)(*v106 + 16);
      if (v47)
      {
        Swift::Bool v48 = (*(_DWORD *)(*v106 + 4 * v47 + 28) & 0x10000) == 0;
        type metadata accessor for Compiler.ByteCodeGen(0);
        MEProgram.Builder.buildUnresolvedReference(id:isScalarMode:)((_StringProcessing::ReferenceID)v107, v48);
        goto LABEL_79;
      }
      __break(1u);
LABEL_91:
      __break(1u);
LABEL_92:
      __break(1u);
      while (2)
      {
        uint64_t v16 = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew()(v16);
        *uint64_t v30 = v16;
        if (!v12)
        {
LABEL_94:
          __break(1u);
          goto LABEL_95;
        }
LABEL_27:
        if (v12 > *(void *)(v16 + 16))
        {
LABEL_95:
          __break(1u);
LABEL_96:
          uint64_t v16 = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew()(v16);
          if (v12)
          {
LABEL_23:
            if (v12 > *(void *)(v16 + 16)) {
              goto LABEL_99;
            }
            MatchingOptions.Representation.apply(_:)((uint64_t)v4);
            *(void *)(v9 + v10) = v16;
LABEL_25:
            uint64_t v16 = *v30;
            unint64_t v12 = *(void *)(*v30 + 16);
            char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
            *uint64_t v30 = v16;
            if ((isUniquelyReferenced_nonNull_native & 1) == 0) {
              continue;
            }
            if (!v12) {
              goto LABEL_94;
            }
            goto LABEL_27;
          }
LABEL_97:
          __break(1u);
LABEL_98:
          __break(1u);
LABEL_99:
          __break(1u);
LABEL_100:
          uint64_t v16 = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(void *)(v16 + 16) + 1, 1, (char *)v16, &demangling cache variable for type metadata for _ContiguousArrayStorage<Instruction>);
LABEL_34:
          unint64_t v58 = *(void *)(v16 + 16);
          unint64_t v57 = *(void *)(v16 + 24);
          if (v58 >= v57 >> 1) {
            uint64_t v16 = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v57 > 1), v58 + 1, 1, (char *)v16, &demangling cache variable for type metadata for _ContiguousArrayStorage<Instruction>);
          }
          *(void *)(v16 + 16) = v58 + 1;
          uint64_t v59 = v16 + 8 * v58;
          uint64_t v60 = 0x700000000010001;
LABEL_69:
          *(void *)(v59 + 32) = v60;
          *(uint64_t *)((char *)v30 + v9) = v16;
        }
        else
        {
          MatchingOptions.Representation.apply(_:)((uint64_t)v4);
          outlined destroy of MEProgram((uint64_t)v4, type metadata accessor for DSLTree._AST.MatchingOptionSequence);
        }
        goto LABEL_79;
      }
    case 6u:
      unint64_t v4 = v103;
      outlined init with take of DSLTree.QuantificationKind((uint64_t)v30, (uint64_t)v103, type metadata accessor for DSLTree._AST.MatchingOptionSequence);
      uint64_t v49 = type metadata accessor for Compiler.ByteCodeGen(0);
      uint64_t v30 = v106;
      if (*((unsigned char *)v106 + *(int *)(v49 + 24))) {
        goto LABEL_25;
      }
      uint64_t v9 = (uint64_t)v106 + *(int *)(v49 + 20);
      uint64_t v10 = *(int *)(type metadata accessor for MEProgram.Builder(0) + 84);
      uint64_t v16 = *(void *)(v9 + v10);
      unint64_t v12 = *(void *)(v16 + 16);
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
        goto LABEL_96;
      }
      if (v12) {
        goto LABEL_23;
      }
      goto LABEL_97;
    case 7u:
      outlined init with take of DSLTree.QuantificationKind((uint64_t)v30, (uint64_t)v4, type metadata accessor for DSLTree._AST.Atom);
      uint64_t v30 = v106;
      uint64_t v51 = v111;
      uint64_t v52 = AST.Atom.generateConsumer(_:)((void *)*v106);
      if (v51)
      {
        outlined destroy of MEProgram((uint64_t)v4, type metadata accessor for DSLTree._AST.Atom);
        outlined init with copy of MEProgram(v105, v16, type metadata accessor for DSLTree.Atom);
        uint64_t result = swift_getEnumCaseMultiPayload();
        switch((int)result)
        {
          case 1:
          case 2:
          case 5:
          case 8:
          case 9:
          case 10:
            goto LABEL_82;
          case 3:
            return result;
          case 6:
            goto LABEL_84;
          default:
            goto LABEL_80;
        }
      }
      else
      {
        uint64_t v83 = (uint64_t)v52;
        if (v52)
        {
          uint64_t v84 = v53;
          uint64_t v111 = 0;
          outlined destroy of MEProgram((uint64_t)v4, type metadata accessor for DSLTree._AST.Atom);
          type metadata accessor for Compiler.ByteCodeGen(0);
          MEProgram.Builder.buildConsume(by:)(v83, v84);
          outlined consume of (@escaping @callee_guaranteed (@guaranteed String, @unowned Range<String.Index>) -> (@unowned String.Index?))?(v83);
          goto LABEL_79;
        }
        uint64_t v109 = 0;
        unint64_t v110 = 0xE000000000000000;
        unint64_t v89 = AST.Atom._patternBase.getter();
        uint64_t v91 = v90;
        char v93 = v92;
        outlined destroy of MEProgram((uint64_t)v4, type metadata accessor for DSLTree._AST.Atom);
        v107[0] = v89;
        v107[1] = v91;
        char v108 = v93 & 1;
        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (String, canBeWrapped: Bool));
        _print_unlocked<A, B>(_:_:)();
        swift_bridgeObjectRelease();
        uint64_t v94 = v109;
        unint64_t v95 = v110;
        type metadata accessor for Unsupported();
        lazy protocol witness table accessor for type AST.Quantification.Kind and conformance AST.Quantification.Kind(&lazy protocol witness table cache variable for type Unsupported and conformance Unsupported, MEMORY[0x263F8F860]);
        swift_allocError();
        MEMORY[0x21050E6B0](v94, v95, "/Library/Caches/com.apple.xbs/Sources/swiftlang_overlay_Platform_Device/swift-experimental-string-processing/Sources/_StringProcessing/ByteCodeGen.swift", 152, 2, 105);
        swift_willThrow();
        uint64_t v16 = v100;
        outlined init with copy of MEProgram(v105, v100, type metadata accessor for DSLTree.Atom);
        uint64_t result = swift_getEnumCaseMultiPayload();
        switch((int)result)
        {
          case 1:
          case 2:
          case 5:
          case 8:
          case 9:
          case 10:
            goto LABEL_82;
          case 3:
            return result;
          case 6:
LABEL_84:
            uint64_t v96 = v16;
            goto LABEL_85;
          default:
LABEL_80:
            uint64_t v46 = v16;
            goto LABEL_81;
        }
      }
      return result;
    case 8u:
      uint64_t v30 = v106;
      uint64_t v54 = *(void *)(*v106 + 16);
      if (!v54) {
        goto LABEL_91;
      }
      int v55 = *(_DWORD *)(*v106 + 4 * v54 + 28);
      uint64_t v9 = *(int *)(type metadata accessor for Compiler.ByteCodeGen(0) + 20);
      uint64_t v16 = *(uint64_t *)((char *)v30 + v9);
      char v56 = swift_isUniquelyReferenced_nonNull_native();
      if ((v55 & 0x10000) != 0)
      {
        if ((v56 & 1) == 0) {
          uint64_t v16 = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(void *)(v16 + 16) + 1, 1, (char *)v16, &demangling cache variable for type metadata for _ContiguousArrayStorage<Instruction>);
        }
        unint64_t v80 = *(void *)(v16 + 16);
        unint64_t v79 = *(void *)(v16 + 24);
        if (v80 >= v79 >> 1) {
          uint64_t v16 = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v79 > 1), v80 + 1, 1, (char *)v16, &demangling cache variable for type metadata for _ContiguousArrayStorage<Instruction>);
        }
        *(void *)(v16 + 16) = v80 + 1;
        uint64_t v59 = v16 + 8 * v80;
        uint64_t v60 = 0x700000000010000;
        goto LABEL_69;
      }
      if ((v56 & 1) == 0) {
        goto LABEL_100;
      }
      goto LABEL_34;
    case 9u:
      uint64_t v30 = v106;
      uint64_t v61 = *(void *)(*v106 + 16);
      if (!v61) {
        goto LABEL_92;
      }
      int v62 = *(_DWORD *)(*v106 + 4 * v61 + 28);
      uint64_t v9 = *(int *)(type metadata accessor for Compiler.ByteCodeGen(0) + 20);
      uint64_t v16 = *(uint64_t *)((char *)v30 + v9);
      char v63 = swift_isUniquelyReferenced_nonNull_native();
      if ((v62 & 0x10000) != 0)
      {
        if ((v63 & 1) == 0) {
          uint64_t v16 = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(void *)(v16 + 16) + 1, 1, (char *)v16, &demangling cache variable for type metadata for _ContiguousArrayStorage<Instruction>);
        }
        unint64_t v82 = *(void *)(v16 + 16);
        unint64_t v81 = *(void *)(v16 + 24);
        if (v82 >= v81 >> 1) {
          uint64_t v16 = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v81 > 1), v82 + 1, 1, (char *)v16, &demangling cache variable for type metadata for _ContiguousArrayStorage<Instruction>);
        }
        *(void *)(v16 + 16) = v82 + 1;
        uint64_t v59 = v16 + 8 * v82;
        uint64_t v60 = 0xC00000000000000;
      }
      else
      {
        if ((v63 & 1) == 0) {
          uint64_t v16 = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(void *)(v16 + 16) + 1, 1, (char *)v16, &demangling cache variable for type metadata for _ContiguousArrayStorage<Instruction>);
        }
        unint64_t v65 = *(void *)(v16 + 16);
        unint64_t v64 = *(void *)(v16 + 24);
        if (v65 >= v64 >> 1) {
          uint64_t v16 = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v64 > 1), v65 + 1, 1, (char *)v16, &demangling cache variable for type metadata for _ContiguousArrayStorage<Instruction>);
        }
        *(void *)(v16 + 16) = v65 + 1;
        uint64_t v59 = v16 + 8 * v65;
        uint64_t v60 = 0xC00000000000001;
      }
      goto LABEL_69;
    case 0xAu:
      uint64_t v30 = v106;
      uint64_t v66 = v111;
      Compiler.ByteCodeGen.emitDot()();
      uint64_t v43 = v66;
      if (!v66) {
        goto LABEL_47;
      }
      outlined init with copy of MEProgram(v105, (uint64_t)v24, type metadata accessor for DSLTree.Atom);
      uint64_t result = swift_getEnumCaseMultiPayload();
      switch((int)result)
      {
        case 1:
        case 2:
        case 5:
        case 8:
        case 9:
        case 10:
          goto LABEL_82;
        case 3:
          return result;
        case 6:
          uint64_t v96 = (uint64_t)v24;
LABEL_85:
          uint64_t result = outlined destroy of MEProgram(v96, type metadata accessor for DSLTree.Atom);
          break;
        default:
          uint64_t v46 = (uint64_t)v24;
LABEL_81:
          outlined destroy of MEProgram(v46, type metadata accessor for DSLTree.Atom);
LABEL_82:
          uint64_t result = type metadata accessor for Compiler.ByteCodeGen(0);
          *((unsigned char *)v30 + *(int *)(result + 24)) = 1;
          break;
      }
      return result;
    default:
      unint64_t v31 = *v30;
      unint64_t v32 = v30[1];
      uint64_t v30 = v106;
LABEL_58:
      Compiler.ByteCodeGen.emitCharacter(_:)(v31, v32);
      swift_bridgeObjectRelease();
      goto LABEL_79;
  }
}

uint64_t Compiler.ByteCodeGen.emitDot()()
{
  uint64_t v3 = *(void *)(*(void *)v0 + 16);
  if (!v3)
  {
    __break(1u);
    goto LABEL_27;
  }
  int v4 = *(_DWORD *)(*(void *)v0 + 4 * v3 + 28);
  if ((v4 & 0x10) == 0)
  {
    uint64_t v2 = *(int *)(type metadata accessor for Compiler.ByteCodeGen(0) + 20);
    uint64_t v1 = *(void *)(v0 + v2);
    uint64_t result = swift_isUniquelyReferenced_nonNull_native();
    if ((v4 & 0x10000) != 0)
    {
      if ((result & 1) == 0)
      {
        uint64_t result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(void *)(v1 + 16) + 1, 1, (char *)v1, &demangling cache variable for type metadata for _ContiguousArrayStorage<Instruction>);
        uint64_t v1 = result;
      }
      unint64_t v7 = *(void *)(v1 + 16);
      unint64_t v16 = *(void *)(v1 + 24);
      unint64_t v8 = v7 + 1;
      if (v7 >= v16 >> 1)
      {
        uint64_t result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v16 > 1), v7 + 1, 1, (char *)v1, &demangling cache variable for type metadata for _ContiguousArrayStorage<Instruction>);
        uint64_t v1 = result;
      }
      uint64_t v9 = 0xC00000000000000;
      goto LABEL_18;
    }
    if (result)
    {
LABEL_5:
      unint64_t v7 = *(void *)(v1 + 16);
      unint64_t v6 = *(void *)(v1 + 24);
      unint64_t v8 = v7 + 1;
      if (v7 >= v6 >> 1)
      {
        uint64_t result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v6 > 1), v7 + 1, 1, (char *)v1, &demangling cache variable for type metadata for _ContiguousArrayStorage<Instruction>);
        uint64_t v1 = result;
      }
      uint64_t v9 = 0xC00000000000001;
LABEL_18:
      *(void *)(v1 + 16) = v8;
      *(void *)(v1 + 8 * v7 + 32) = v9;
      *(void *)(v0 + v2) = v1;
      return result;
    }
LABEL_27:
    uint64_t result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(void *)(v1 + 16) + 1, 1, (char *)v1, &demangling cache variable for type metadata for _ContiguousArrayStorage<Instruction>);
    uint64_t v1 = result;
    goto LABEL_5;
  }
  if ((v4 & 0x200) != 0)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<DSLTree.Node>);
    unint64_t inited = swift_initStackObject();
    *(_OWORD *)(inited + 16) = xmmword_209FAFD80;
    type metadata accessor for DSLTree.Atom(0);
    uint64_t v18 = swift_allocBox();
    *char v19 = 4;
    swift_storeEnumTagMultiPayload();
    *(void *)(inited + 32) = v18 | 0x4000000000000000;
    uint64_t v20 = swift_allocBox();
    swift_storeEnumTagMultiPayload();
    *(void *)(inited + 40) = v20 | 0x4000000000000000;
    specialized Compiler.ByteCodeGen.emitAlternationGen<A>(_:withBacktracking:_:)(inited, v0);
    swift_setDeallocating();
    return swift_arrayDestroy();
  }
  else
  {
    uint64_t v10 = 0x700000000010001;
    uint64_t v11 = *(int *)(type metadata accessor for Compiler.ByteCodeGen(0) + 20);
    uint64_t v12 = *(void *)(v0 + v11);
    uint64_t result = swift_isUniquelyReferenced_nonNull_native();
    if ((v4 & 0x10000) != 0)
    {
      if ((result & 1) == 0)
      {
        uint64_t result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(void *)(v12 + 16) + 1, 1, (char *)v12, &demangling cache variable for type metadata for _ContiguousArrayStorage<Instruction>);
        uint64_t v12 = result;
      }
      unint64_t v13 = *(void *)(v12 + 16);
      unint64_t v14 = *(void *)(v12 + 24);
      int64_t v15 = v13 + 1;
      uint64_t v10 = 0x700000000010000;
    }
    else
    {
      if ((result & 1) == 0)
      {
        uint64_t result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(void *)(v12 + 16) + 1, 1, (char *)v12, &demangling cache variable for type metadata for _ContiguousArrayStorage<Instruction>);
        uint64_t v12 = result;
      }
      unint64_t v13 = *(void *)(v12 + 16);
      unint64_t v14 = *(void *)(v12 + 24);
      int64_t v15 = v13 + 1;
    }
    if (v13 >= v14 >> 1)
    {
      uint64_t v21 = (char *)v12;
      unint64_t v22 = v13;
      uint64_t result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v14 > 1), v15, 1, v21, &demangling cache variable for type metadata for _ContiguousArrayStorage<Instruction>);
      unint64_t v13 = v22;
      uint64_t v12 = result;
    }
    *(void *)(v12 + 16) = v15;
    *(void *)(v12 + 8 * v13 + 32) = v10;
    *(void *)(v0 + v11) = v12;
  }
  return result;
}

uint64_t Compiler.ByteCodeGen.emitCharacter(_:)(unint64_t a1, unint64_t a2)
{
  uint64_t v3 = v2;
  uint64_t v6 = type metadata accessor for Unicode.Scalar.Properties();
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t result = MEMORY[0x270FA5388](v6);
  int64_t v10 = (int64_t)v49 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  unint64_t v11 = *v3;
  uint64_t v12 = *(void *)(*v3 + 16);
  if (!v12) {
    goto LABEL_100;
  }
  int v13 = *(_DWORD *)(v11 + 4 * v12 + 28);
  if ((v13 & 0x10000) == 0)
  {
    if ((a2 & 0x2000000000000000) != 0) {
      uint64_t v14 = HIBYTE(a2) & 0xF;
    }
    else {
      uint64_t v14 = a1 & 0xFFFFFFFFFFFFLL;
    }
    if (v14)
    {
      uint64_t v15 = 0;
      do
      {
        if ((a2 & 0x1000000000000000) != 0)
        {
          uint64_t v16 = _StringGuts.foreignErrorCorrectedScalar(startingAt:)();
        }
        else
        {
          if ((a2 & 0x2000000000000000) != 0)
          {
            unint64_t v57 = a1;
            uint64_t v58 = a2 & 0xFFFFFFFFFFFFFFLL;
          }
          else if ((a1 & 0x1000000000000000) == 0)
          {
            _StringObject.sharedUTF8.getter();
          }
          uint64_t v16 = _decodeScalar(_:startingAt:)();
        }
        v15 += v17;
        uint64_t result = Compiler.ByteCodeGen.emitMatchScalar(_:)(v16);
      }
      while (v15 < v14);
    }
    return result;
  }
  if (v13)
  {
    if ((Character._isSingleScalar.getter() & 1) == 0) {
      goto LABEL_80;
    }
    uint64_t result = specialized Collection.first.getter(a1, a2);
    if ((result & 0x100000000) != 0)
    {
      __break(1u);
      goto LABEL_105;
    }
    Unicode.Scalar.properties.getter();
    char v43 = Unicode.Scalar.Properties.isCased.getter();
    (*(void (**)(int64_t, uint64_t))(v7 + 8))(v10, v6);
    if ((v43 & 1) == 0)
    {
LABEL_80:
      if (Character._isUppercased.getter() & 1) != 0 && (Character._isLowercased.getter()) {
        goto LABEL_17;
      }
    }
    uint64_t v44 = type metadata accessor for Compiler.ByteCodeGen(0);
    if ((*((unsigned char *)v3 + *(int *)(v44 + 28)) & 1) != 0 || (Character.asciiValue.getter() & 0x100) != 0)
    {
      uint64_t v6 = (uint64_t)v3 + *(int *)(v44 + 20);
      uint64_t v48 = specialized TypedSetVector.store(_:)(a1, a2);
      uint64_t v3 = *(unint64_t **)v6;
      uint64_t result = swift_isUniquelyReferenced_nonNull_native();
      if ((result & 1) == 0)
      {
        uint64_t result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v3[2] + 1, 1, (char *)v3, &demangling cache variable for type metadata for _ContiguousArrayStorage<Instruction>);
        uint64_t v3 = (unint64_t *)result;
      }
      a2 = (v48 << 16) | 0x800000000000001;
LABEL_93:
      a1 = v3[2];
      unint64_t v11 = v3[3];
      int64_t v10 = a1 + 1;
      if (a1 >= v11 >> 1) {
        goto LABEL_101;
      }
      goto LABEL_94;
    }
    uint64_t result = specialized BidirectionalCollection.last.getter(a1, a2);
    if ((result & 0x100000000) == 0)
    {
      LODWORD(a2) = result;
      a1 = *(int *)(v44 + 20);
      uint64_t v6 = 0x9C0000000000000;
      int64_t v10 = *(unint64_t *)((char *)v3 + a1);
      uint64_t result = swift_isUniquelyReferenced_nonNull_native();
      if (result)
      {
LABEL_85:
        unint64_t v45 = v6 & 0xFFFFFFFF00000000 | a2;
        unint64_t v47 = *(void *)(v10 + 16);
        unint64_t v46 = *(void *)(v10 + 24);
        if (v47 >= v46 >> 1)
        {
          uint64_t result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v46 > 1), v47 + 1, 1, (char *)v10, &demangling cache variable for type metadata for _ContiguousArrayStorage<Instruction>);
          int64_t v10 = result;
        }
        *(void *)(v10 + 16) = v47 + 1;
        *(void *)(v10 + 8 * v47 + 32) = v45;
        *(unint64_t *)((char *)v3 + a1) = v10;
        return result;
      }
LABEL_103:
      uint64_t result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(void *)(v10 + 16) + 1, 1, (char *)v10, &demangling cache variable for type metadata for _ContiguousArrayStorage<Instruction>);
      int64_t v10 = result;
      goto LABEL_85;
    }
LABEL_105:
    __break(1u);
    return result;
  }
LABEL_17:
  uint64_t v56 = type metadata accessor for Compiler.ByteCodeGen(0);
  if ((*((unsigned char *)v3 + *(int *)(v56 + 28)) & 1) != 0 || (Character.asciiValue.getter() & 0x100) != 0)
  {
    uint64_t v6 = (uint64_t)v3 + *(int *)(v56 + 20);
    a2 = (specialized TypedSetVector.store(_:)(a1, a2) << 16) | 0x800000000000000;
    uint64_t v3 = *(unint64_t **)v6;
    uint64_t result = swift_isUniquelyReferenced_nonNull_native();
    if ((result & 1) == 0)
    {
      uint64_t result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v3[2] + 1, 1, (char *)v3, &demangling cache variable for type metadata for _ContiguousArrayStorage<Instruction>);
      uint64_t v3 = (unint64_t *)result;
    }
    goto LABEL_93;
  }
  v49[1] = a1 & 0xFFFFFFFFFFFFLL;
  void v49[2] = HIBYTE(a2) & 0xF;
  if ((a2 & 0x2000000000000000) != 0) {
    unint64_t v18 = HIBYTE(a2) & 0xF;
  }
  else {
    unint64_t v18 = a1 & 0xFFFFFFFFFFFFLL;
  }
  if (!v18)
  {
    __break(1u);
    goto LABEL_103;
  }
  uint64_t v53 = 4 * v18;
  int v19 = (a2 & 0x1000000000000000) == 0 || (a1 & 0x800000000000000) != 0;
  uint64_t v20 = 11;
  if (v19) {
    uint64_t v20 = 7;
  }
  unint64_t v21 = 15;
  unint64_t v22 = specialized DefaultIndices<>.index(before:)(v20 | (v18 << 16), a1, a2);
  uint64_t v50 = (a2 & 0xFFFFFFFFFFFFFFFLL) + 32;
  uint64_t v51 = a2 & 0xFFFFFFFFFFFFFFLL;
  unint64_t v52 = v22 >> 14;
  swift_bridgeObjectRetain();
  uint64_t v23 = 4 << v19;
  unint64_t v24 = 0;
  unint64_t v54 = v18;
  uint64_t v55 = 4 << v19;
  while (1)
  {
    unint64_t v25 = v21 & 0xC;
    BOOL v26 = (v21 & 1) == 0 || v25 == v23;
    int64_t v10 = v26;
    if (!v26) {
      break;
    }
    unint64_t v27 = v21;
    if (v25 == v23)
    {
      unint64_t v42 = _StringGuts._slowEnsureMatchingEncoding(_:)(v21, a1, a2);
      uint64_t v23 = v55;
      unint64_t v27 = v42;
      if (v18 <= v42 >> 16) {
        goto LABEL_97;
      }
    }
    else if (v18 <= v21 >> 16)
    {
      goto LABEL_97;
    }
    if ((v27 & 1) == 0)
    {
      unint64_t v28 = _StringGuts.scalarAlignSlow(_:)(v27, a1, a2);
      uint64_t v23 = v55;
      unint64_t v27 = v27 & 0xC | v28 & 0xFFFFFFFFFFFFFFF3 | 1;
    }
LABEL_42:
    if ((a2 & 0x1000000000000000) != 0)
    {
      uint64_t v34 = String.UnicodeScalarView._foreignIndex(after:)();
      uint64_t v23 = v55;
      unint64_t v33 = v34;
      if (!v10) {
        goto LABEL_57;
      }
    }
    else
    {
      uint64_t v6 = v27 >> 16;
      if ((a2 & 0x2000000000000000) != 0)
      {
        unint64_t v57 = a1;
        uint64_t v58 = v51;
        int v30 = *((unsigned __int8 *)&v57 + v6);
      }
      else
      {
        uint64_t v29 = v50;
        if ((a1 & 0x1000000000000000) == 0)
        {
          uint64_t v29 = _StringObject.sharedUTF8.getter();
          uint64_t v23 = v55;
        }
        int v30 = *(unsigned __int8 *)(v29 + v6);
      }
      int v31 = (char)v30;
      unsigned int v32 = __clz(v30 ^ 0xFF) - 24;
      if (v31 >= 0) {
        LOBYTE(v32) = 1;
      }
      unint64_t v11 = v6 + v32;
      unint64_t v33 = (v11 << 16) | 5;
      if (!v10)
      {
LABEL_57:
        if (v21 >> 16 >= v18) {
          goto LABEL_99;
        }
        goto LABEL_58;
      }
    }
    if (v25 == v23) {
      unint64_t v21 = _StringGuts._slowEnsureMatchingEncoding(_:)(v21, a1, a2);
    }
    if (v21 >> 16 >= v18) {
      goto LABEL_98;
    }
    if ((v21 & 1) == 0) {
      _StringGuts.scalarAlignSlow(_:)(v21, a1, a2);
    }
LABEL_58:
    if ((a2 & 0x1000000000000000) != 0)
    {
      unsigned int v35 = _StringGuts.foreignErrorCorrectedScalar(startingAt:)();
    }
    else
    {
      if ((a2 & 0x2000000000000000) != 0)
      {
        unint64_t v57 = a1;
        uint64_t v58 = v51;
      }
      else if ((a1 & 0x1000000000000000) == 0)
      {
        _StringObject.sharedUTF8.getter();
      }
      unsigned int v35 = _decodeScalar(_:startingAt:)();
    }
    unsigned int v36 = v35;
    uint64_t v37 = *(int *)(v56 + 20);
    if (v24 == v52) {
      uint64_t v6 = 0x940000000000000;
    }
    else {
      uint64_t v6 = 0x900000000000000;
    }
    uint64_t v38 = *(char **)((char *)v3 + v37);
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
      uint64_t v38 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *((void *)v38 + 2) + 1, 1, v38, &demangling cache variable for type metadata for _ContiguousArrayStorage<Instruction>);
    }
    unint64_t v40 = *((void *)v38 + 2);
    unint64_t v39 = *((void *)v38 + 3);
    uint64_t v23 = v55;
    if (v40 >= v39 >> 1)
    {
      unint64_t v41 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v39 > 1), v40 + 1, 1, v38, &demangling cache variable for type metadata for _ContiguousArrayStorage<Instruction>);
      uint64_t v23 = v55;
      uint64_t v38 = v41;
    }
    *((void *)v38 + 2) = v40 + 1;
    *(void *)&v38[8 * v40 + 32] = v6 | v36;
    *(unint64_t *)((char *)v3 + v37) = (unint64_t)v38;
    unint64_t v24 = v33 >> 14;
    unint64_t v21 = v33;
    unint64_t v11 = v53;
    unint64_t v18 = v54;
    if (v33 >> 14 == v53) {
      return swift_bridgeObjectRelease();
    }
  }
  unint64_t v27 = v21;
  if (v18 > v21 >> 16) {
    goto LABEL_42;
  }
  __break(1u);
LABEL_97:
  __break(1u);
LABEL_98:
  __break(1u);
LABEL_99:
  __break(1u);
LABEL_100:
  __break(1u);
LABEL_101:
  uint64_t result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v11 > 1), v10, 1, (char *)v3, &demangling cache variable for type metadata for _ContiguousArrayStorage<Instruction>);
  uint64_t v3 = (unint64_t *)result;
LABEL_94:
  v3[2] = v10;
  v3[a1 + 4] = a2;
  *(void *)uint64_t v6 = v3;
  return result;
}

uint64_t Compiler.ByteCodeGen.emitMatchScalar(_:)(uint64_t a1)
{
  uint64_t v3 = v1;
  uint64_t v5 = type metadata accessor for Unicode.Scalar.Properties();
  uint64_t v6 = *(void *)(v5 - 8);
  MEMORY[0x270FA5388](v5);
  unint64_t v8 = (char *)&v15 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = *(void *)(*(void *)v3 + 16);
  if (!v9)
  {
    __break(1u);
LABEL_11:
    uint64_t result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *((void *)v8 + 2) + 1, 1, v8, &demangling cache variable for type metadata for _ContiguousArrayStorage<Instruction>);
    unint64_t v8 = (char *)result;
    goto LABEL_7;
  }
  if ((*(_DWORD *)(*(void *)v3 + 4 * v9 + 28) & 1) != 0
    && (Unicode.Scalar.properties.getter(),
        char v10 = Unicode.Scalar.Properties.isCased.getter(),
        (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5),
        (v10 & 1) != 0))
  {
    uint64_t v5 = *(int *)(type metadata accessor for Compiler.ByteCodeGen(0) + 20);
    a1 = a1;
    uint64_t v2 = 0x980000000000000;
  }
  else
  {
    uint64_t v5 = *(int *)(type metadata accessor for Compiler.ByteCodeGen(0) + 20);
    a1 = a1;
    uint64_t v2 = 0x900000000000000;
  }
  unint64_t v8 = *(char **)(v3 + v5);
  uint64_t result = swift_isUniquelyReferenced_nonNull_native();
  if ((result & 1) == 0) {
    goto LABEL_11;
  }
LABEL_7:
  uint64_t v12 = a1 | v2;
  unint64_t v14 = *((void *)v8 + 2);
  unint64_t v13 = *((void *)v8 + 3);
  if (v14 >= v13 >> 1)
  {
    uint64_t result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v13 > 1), v14 + 1, 1, v8, &demangling cache variable for type metadata for _ContiguousArrayStorage<Instruction>);
    unint64_t v8 = (char *)result;
  }
  *((void *)v8 + 2) = v14 + 1;
  *(void *)&v8[8 * v14 + 32] = v12;
  *(void *)(v3 + v5) = v8;
  return result;
}

uint64_t Compiler.ByteCodeGen.emitBackreference(_:)(uint64_t a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = type metadata accessor for AST.Atom.Number();
  uint64_t v5 = *(void *)(v4 - 8);
  MEMORY[0x270FA5388](v4);
  uint64_t v7 = (char *)&v42 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = type metadata accessor for AST.Reference.Kind();
  uint64_t v9 = *(void *)(v8 - 8);
  MEMORY[0x270FA5388](v8);
  unint64_t v11 = (uint64_t *)((char *)&v42 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0));
  if (AST.Reference.recursesWholePattern.getter())
  {
    unint64_t v42 = 0;
    unint64_t v43 = 0xE000000000000000;
    _StringGuts.grow(_:)(22);
    swift_bridgeObjectRelease();
    unint64_t v42 = 0xD000000000000014;
    unint64_t v43 = 0x8000000209FB65E0;
    type metadata accessor for AST.Reference();
    lazy protocol witness table accessor for type AST.Quantification.Kind and conformance AST.Quantification.Kind(&lazy protocol witness table cache variable for type AST.Reference and conformance AST.Reference, MEMORY[0x263F8FD00]);
    v12._unint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
    String.append(_:)(v12);
    swift_bridgeObjectRelease();
    unint64_t v13 = v42;
    unint64_t v14 = v43;
    type metadata accessor for Unsupported();
    lazy protocol witness table accessor for type AST.Quantification.Kind and conformance AST.Quantification.Kind(&lazy protocol witness table cache variable for type Unsupported and conformance Unsupported, MEMORY[0x263F8F860]);
    swift_allocError();
    MEMORY[0x21050E6B0](v13, v14, "/Library/Caches/com.apple.xbs/Sources/swiftlang_overlay_Platform_Device/swift-experimental-string-processing/Sources/_StringProcessing/ByteCodeGen.swift", 152, 2, 144);
    return swift_willThrow();
  }
  uint64_t v16 = a1;
  AST.Reference.kind.getter();
  int v17 = (*(uint64_t (**)(uint64_t *, uint64_t))(v9 + 88))(v11, v8);
  if (v17 == *MEMORY[0x263F8FCF0])
  {
    (*(void (**)(uint64_t *, uint64_t))(v9 + 96))(v11, v8);
    (*(void (**)(char *, uint64_t *, uint64_t))(v5 + 32))(v7, v11, v4);
    uint64_t v16 = AST.Atom.Number.value.getter();
    unint64_t v11 = v18;
    int v19 = *(void (**)(char *, uint64_t))(v5 + 8);
    v5 += 8;
    v19(v7, v4);
    if (v11)
    {
      type metadata accessor for Unreachable();
      lazy protocol witness table accessor for type AST.Quantification.Kind and conformance AST.Quantification.Kind(&lazy protocol witness table cache variable for type Unreachable and conformance Unreachable, MEMORY[0x263F8F850]);
      swift_allocError();
      MEMORY[0x21050E690](0xD000000000000010, 0x8000000209FB6600, "/Library/Caches/com.apple.xbs/Sources/swiftlang_overlay_Platform_Device/swift-experimental-string-processing/Sources/_StringProcessing/ByteCodeGen.swift", 152, 2, 150);
      return swift_willThrow();
    }
    uint64_t v20 = *(void *)(*(void *)v2 + 16);
    if (v20)
    {
      unint64_t v11 = (uint64_t *)(((*(_DWORD *)(*(void *)v2 + 4 * v20 + 28) & 0x10000) == 0) | (unint64_t)(v16 << 16));
      uint64_t v8 = 0x1A00000000000000;
      uint64_t v5 = *(int *)(type metadata accessor for Compiler.ByteCodeGen(0) + 20);
      uint64_t v16 = *(void *)(v2 + v5);
      uint64_t result = swift_isUniquelyReferenced_nonNull_native();
      if (result)
      {
LABEL_8:
        unint64_t v21 = (unint64_t)v11 | v8;
        unint64_t v23 = *(void *)(v16 + 16);
        unint64_t v22 = *(void *)(v16 + 24);
        if (v23 >= v22 >> 1)
        {
          uint64_t result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v22 > 1), v23 + 1, 1, (char *)v16, &demangling cache variable for type metadata for _ContiguousArrayStorage<Instruction>);
          uint64_t v16 = result;
        }
        *(void *)(v16 + 16) = v23 + 1;
        *(void *)(v16 + 8 * v23 + 32) = v21;
        *(void *)(v2 + v5) = v16;
        return result;
      }
LABEL_29:
      uint64_t result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(void *)(v16 + 16) + 1, 1, (char *)v16, &demangling cache variable for type metadata for _ContiguousArrayStorage<Instruction>);
      uint64_t v16 = result;
      goto LABEL_8;
    }
    __break(1u);
LABEL_28:
    __break(1u);
    goto LABEL_29;
  }
  if (v17 == *MEMORY[0x263F8FCF8])
  {
    unint64_t v42 = 0;
    unint64_t v43 = 0xE000000000000000;
    _StringGuts.grow(_:)(22);
    swift_bridgeObjectRelease();
    unint64_t v42 = 0xD000000000000014;
    unint64_t v43 = 0x8000000209FB65E0;
    type metadata accessor for AST.Reference();
    lazy protocol witness table accessor for type AST.Quantification.Kind and conformance AST.Quantification.Kind(&lazy protocol witness table cache variable for type AST.Reference and conformance AST.Reference, MEMORY[0x263F8FD00]);
    v24._unint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
    String.append(_:)(v24);
    swift_bridgeObjectRelease();
    unint64_t v25 = v42;
    unint64_t v26 = v43;
    type metadata accessor for Unsupported();
    lazy protocol witness table accessor for type AST.Quantification.Kind and conformance AST.Quantification.Kind(&lazy protocol witness table cache variable for type Unsupported and conformance Unsupported, MEMORY[0x263F8F860]);
    swift_allocError();
    MEMORY[0x21050E6B0](v25, v26, "/Library/Caches/com.apple.xbs/Sources/swiftlang_overlay_Platform_Device/swift-experimental-string-processing/Sources/_StringProcessing/ByteCodeGen.swift", 152, 2, 158);
    swift_willThrow();
    return (*(uint64_t (**)(uint64_t *, uint64_t))(v9 + 8))(v11, v8);
  }
  if (v17 != *MEMORY[0x263F8FCE8])
  {
    uint64_t result = _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
    return result;
  }
  (*(void (**)(uint64_t *, uint64_t))(v9 + 96))(v11, v8);
  uint64_t v27 = *(void *)(*(void *)v2 + 16);
  if (!v27) {
    goto LABEL_28;
  }
  int v30 = v11;
  uint64_t v28 = *v11;
  uint64_t v29 = (void *)v30[1];
  int v31 = *(_DWORD *)(*(void *)v2 + 4 * v27 + 28);
  unsigned int v32 = (uint64_t *)(v2 + *(int *)(type metadata accessor for Compiler.ByteCodeGen(0) + 20));
  type metadata accessor for MEProgram.Builder(0);
  v33._unint64_t countAndFlagsBits = v28;
  v33._object = v29;
  Swift::Int_optional v44 = CaptureList.indexOfCapture(named:)(v33);
  Swift::Int value = v44.value;
  Swift::Bool is_nil = v44.is_nil;
  swift_bridgeObjectRelease();
  if ((v31 & 0x10000) != 0)
  {
    if (!is_nil)
    {
      uint64_t v36 = 0x1A00000000000000;
      goto LABEL_21;
    }
LABEL_26:
    lazy protocol witness table accessor for type RegexCompilationError and conformance RegexCompilationError();
    swift_allocError();
    *(void *)uint64_t v41 = 0;
    *(void *)(v41 + 8) = 0;
    *(unsigned char *)(v41 + 16) = 2;
    return swift_willThrow();
  }
  if (is_nil) {
    goto LABEL_26;
  }
  uint64_t v36 = 0x1A00000000000001;
LABEL_21:
  uint64_t v37 = *v32;
  uint64_t result = swift_isUniquelyReferenced_nonNull_native();
  if ((result & 1) == 0)
  {
    uint64_t result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(void *)(v37 + 16) + 1, 1, (char *)v37, &demangling cache variable for type metadata for _ContiguousArrayStorage<Instruction>);
    uint64_t v37 = result;
  }
  uint64_t v38 = v36 | (value << 16);
  unint64_t v40 = *(void *)(v37 + 16);
  unint64_t v39 = *(void *)(v37 + 24);
  if (v40 >= v39 >> 1)
  {
    uint64_t result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v39 > 1), v40 + 1, 1, (char *)v37, &demangling cache variable for type metadata for _ContiguousArrayStorage<Instruction>);
    uint64_t v37 = result;
  }
  *(void *)(v37 + 16) = v40 + 1;
  *(void *)(v37 + 8 * v40 + 32) = v38;
  *unsigned int v32 = v37;
  return result;
}

Swift::Void __swiftcall MEProgram.Builder.buildUnresolvedReference(id:isScalarMode:)(_StringProcessing::ReferenceID id, Swift::Bool isScalarMode)
{
  uint64_t v3 = v2;
  uint64_t v6 = type metadata accessor for MEProgram.Builder(0);
  MEMORY[0x270FA5388](v6);
  uint64_t v8 = (char *)&v32 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  Swift::UInt v9 = *(void *)id.base;
  uint64_t v10 = *(char **)v3;
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
    uint64_t v10 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *((void *)v10 + 2) + 1, 1, v10, &demangling cache variable for type metadata for _ContiguousArrayStorage<Instruction>);
  }
  unint64_t v12 = *((void *)v10 + 2);
  unint64_t v11 = *((void *)v10 + 3);
  if (v12 >= v11 >> 1) {
    uint64_t v10 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v11 > 1), v12 + 1, 1, v10, &demangling cache variable for type metadata for _ContiguousArrayStorage<Instruction>);
  }
  *((void *)v10 + 2) = v12 + 1;
  *(void *)&v10[8 * v12 + 32] = isScalarMode | 0x1A00000000000000;
  *(void *)uint64_t v3 = v10;
  outlined init with copy of MEProgram((uint64_t)v3, (uint64_t)v8, type metadata accessor for MEProgram.Builder);
  uint64_t v13 = *(void *)(*(void *)v8 + 16);
  outlined destroy of MEProgram((uint64_t)v8, type metadata accessor for MEProgram.Builder);
  uint64_t v14 = *(int *)(v6 + 92);
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  uint64_t v33 = *(void *)&v3[v14];
  uint64_t v16 = v33;
  *(void *)&v3[v14] = 0x8000000000000000;
  unint64_t v18 = specialized __RawDictionaryStorage.find<A>(_:)(v9);
  uint64_t v19 = *(void *)(v16 + 16);
  BOOL v20 = (v17 & 1) == 0;
  uint64_t v21 = v19 + v20;
  if (__OFADD__(v19, v20))
  {
    __break(1u);
    goto LABEL_19;
  }
  char v22 = v17;
  if (*(void *)(v16 + 24) >= v21)
  {
    if ((isUniquelyReferenced_nonNull_native & 1) == 0)
    {
      specialized _NativeDictionary.copy()();
      uint64_t v16 = v33;
    }
  }
  else
  {
    specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v21, isUniquelyReferenced_nonNull_native);
    uint64_t v16 = v33;
    unint64_t v23 = specialized __RawDictionaryStorage.find<A>(_:)(v9);
    if ((v22 & 1) != (v24 & 1))
    {
LABEL_21:
      KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
      __break(1u);
      return;
    }
    unint64_t v18 = v23;
  }
  *(void *)&v3[v14] = v16;
  swift_bridgeObjectRelease();
  unint64_t v25 = *(void **)&v3[v14];
  if (v22) {
    goto LABEL_14;
  }
  v25[(v18 >> 6) + 8] |= 1 << v18;
  *(void *)(v25[6] + 8 * v18) = v9;
  *(void *)(v25[7] + 8 * v18) = MEMORY[0x263F8EE78];
  uint64_t v26 = v25[2];
  BOOL v27 = __OFADD__(v26, 1);
  uint64_t v28 = v26 + 1;
  if (v27)
  {
    __break(1u);
    goto LABEL_21;
  }
  uint64_t v25[2] = v28;
LABEL_14:
  Swift::UInt v9 = v25[7];
  uint64_t v3 = *(char **)(v9 + 8 * v18);
  char v29 = swift_isUniquelyReferenced_nonNull_native();
  *(void *)(v9 + 8 * v18) = v3;
  if ((v29 & 1) == 0)
  {
LABEL_19:
    uint64_t v3 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *((void *)v3 + 2) + 1, 1, v3, &demangling cache variable for type metadata for _ContiguousArrayStorage<TypedInt<_InstructionAddress>>);
    *(void *)(v9 + 8 * v18) = v3;
  }
  unint64_t v31 = *((void *)v3 + 2);
  unint64_t v30 = *((void *)v3 + 3);
  if (v31 >= v30 >> 1)
  {
    uint64_t v3 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v30 > 1), v31 + 1, 1, v3, &demangling cache variable for type metadata for _ContiguousArrayStorage<TypedInt<_InstructionAddress>>);
    *(void *)(v9 + 8 * v18) = v3;
  }
  *((void *)v3 + 2) = v31 + 1;
  *(void *)&v3[8 * v31 + 32] = v13 - 1;
}

uint64_t (*AST.Atom.generateConsumer(_:)(void *a1))(unint64_t a1, unint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v3 = type metadata accessor for AST.Atom.CharacterProperty();
  uint64_t v4 = *(void *)(v3 - 8);
  MEMORY[0x270FA5388](v3);
  uint64_t v6 = (uint64_t (*)())((char *)v23 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v7 = type metadata accessor for AST.Atom.Kind();
  uint64_t v8 = *(void *)(v7 - 8);
  MEMORY[0x270FA5388](v7);
  uint64_t v10 = (void *)((char *)v23 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0));
  AST.Atom.kind.getter();
  int v11 = (*(uint64_t (**)(uint64_t *, uint64_t))(v8 + 88))(v10, v7);
  if (v11 == *MEMORY[0x263F8FBC0] || v11 == *MEMORY[0x263F8FBC8]) {
    goto LABEL_35;
  }
  if (v11 == *MEMORY[0x263F8FB90])
  {
LABEL_6:
    (*(void (**)(uint64_t *, uint64_t))(v8 + 8))(v10, v7);
    return 0;
  }
  if (v11 == *MEMORY[0x263F8FBE8])
  {
    uint64_t v14 = *(void (**)(uint64_t *, uint64_t))(v8 + 96);
    v8 += 96;
    v14(v10, v7);
    (*(void (**)(uint64_t (*)(), uint64_t *, uint64_t))(v4 + 32))(v6, v10, v3);
    uint64_t v15 = a1[2];
    if (v15)
    {
      if ((*((_DWORD *)a1 + v15 + 7) & 0x10000) != 0) {
        uint64_t v16 = (uint64_t (*)(void *, uint64_t))consumeCharacterWithLeadingScalar(_:);
      }
      else {
        uint64_t v16 = (uint64_t (*)(void *, uint64_t))consumeScalar(_:);
      }
      uint64_t v17 = closure #1 in AST.Atom.CharacterProperty.generateConsumer(_:)(v6, v16, a1);
      uint64_t v19 = (void (**)(uint64_t (*)(), uint64_t))(v4 + 8);
      if (v1)
      {
        (*v19)(v6, v3);
      }
      else
      {
        uint64_t v7 = v17;
        uint64_t v20 = v18;
        char v21 = AST.Atom.CharacterProperty.isInverted.getter();
        (*v19)(v6, v3);
        if (v21)
        {
          char v22 = (void *)swift_allocObject();
          void v22[2] = v7;
          v22[3] = v20;
          v22[4] = a1;
          swift_bridgeObjectRetain();
          return partial apply for closure #1 in invert #1 (_:) in AST.Atom.CharacterProperty.generateConsumer(_:);
        }
      }
      return (uint64_t (*)(unint64_t, unint64_t, unint64_t, uint64_t))v7;
    }
    __break(1u);
    goto LABEL_35;
  }
  if (v11 == *MEMORY[0x263F8FBD8])
  {
LABEL_35:
    (*(void (**)(uint64_t *, uint64_t))(v8 + 8))(v10, v7);
    goto LABEL_36;
  }
  if (v11 == *MEMORY[0x263F8FB98] || v11 == *MEMORY[0x263F8FB78] || v11 == *MEMORY[0x263F8FBA0]) {
    goto LABEL_6;
  }
  if (v11 == *MEMORY[0x263F8FB88])
  {
    (*(void (**)(uint64_t *, uint64_t))(v8 + 96))(v10, v7);
    uint64_t v7 = consumeName(_:opts:)(*v10, v10[1], (uint64_t)a1);
    swift_bridgeObjectRelease();
    return (uint64_t (*)(unint64_t, unint64_t, unint64_t, uint64_t))v7;
  }
  if (v11 == *MEMORY[0x263F8FB80]
    || v11 == *MEMORY[0x263F8FB60]
    || v11 == *MEMORY[0x263F8FBD0]
    || v11 == *MEMORY[0x263F8FBA8]
    || v11 == *MEMORY[0x263F8FBB0])
  {
    goto LABEL_6;
  }
  if (v11 != *MEMORY[0x263F8FBB8]
    && v11 != *MEMORY[0x263F8FB68]
    && v11 != *MEMORY[0x263F8FB70]
    && v11 == *MEMORY[0x263F8FBE0])
  {
    return 0;
  }
LABEL_36:
  uint64_t result = (uint64_t (*)(unint64_t, unint64_t, unint64_t, uint64_t))_assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t MEProgram.Builder.buildConsume(by:)(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = (void *)v2[7];
  uint64_t v6 = v5[2];
  uint64_t v7 = swift_allocObject();
  *(void *)(v7 + 16) = a1;
  *(void *)(v7 + 24) = a2;
  swift_retain();
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
    uint64_t v5 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v5[2] + 1, 1, v5, &demangling cache variable for type metadata for _ContiguousArrayStorage<(_:_:)>);
  }
  unint64_t v9 = v5[2];
  unint64_t v8 = v5[3];
  if (v9 >= v8 >> 1) {
    uint64_t v5 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v8 > 1), v9 + 1, 1, v5, &demangling cache variable for type metadata for _ContiguousArrayStorage<(_:_:)>);
  }
  _OWORD v5[2] = v9 + 1;
  uint64_t v10 = &v5[2 * v9];
  void v10[4] = partial apply for thunk for @escaping @callee_guaranteed (@guaranteed String, @unowned Range<String.Index>) -> (@unowned String.Index?);
  v10[5] = v7;
  v2[7] = (uint64_t)v5;
  uint64_t v11 = *v2;
  uint64_t result = swift_isUniquelyReferenced_nonNull_native();
  if ((result & 1) == 0)
  {
    uint64_t result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(void *)(v11 + 16) + 1, 1, (char *)v11, &demangling cache variable for type metadata for _ContiguousArrayStorage<Instruction>);
    uint64_t v11 = result;
  }
  unint64_t v14 = *(void *)(v11 + 16);
  unint64_t v13 = *(void *)(v11 + 24);
  if (v14 >= v13 >> 1)
  {
    uint64_t result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v13 > 1), v14 + 1, 1, (char *)v11, &demangling cache variable for type metadata for _ContiguousArrayStorage<Instruction>);
    uint64_t v11 = result;
  }
  *(void *)(v11 + 16) = v14 + 1;
  *(void *)(v11 + 8 * v14 + 32) = v6 | 0xD00000000000000;
  *uint64_t v2 = v11;
  return result;
}

unint64_t AST.Atom._patternBase.getter()
{
  uint64_t v1 = type metadata accessor for AST.Atom.CharacterProperty();
  uint64_t v27 = *(void *)(v1 - 8);
  uint64_t v28 = v1;
  MEMORY[0x270FA5388](v1);
  uint64_t v26 = (char *)&v25 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v3 = type metadata accessor for AST.Atom.EscapedBuiltin();
  uint64_t v4 = *(void *)(v3 - 8);
  MEMORY[0x270FA5388](v3);
  uint64_t v6 = (char *)&v25 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = type metadata accessor for AST.Atom.Kind();
  uint64_t v8 = *(void *)(v7 - 8);
  uint64_t v9 = MEMORY[0x270FA5388](v7);
  uint64_t v11 = (char *)&v25 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v9);
  unint64_t v13 = (char *)&v25 - v12;
  uint64_t v29 = v0;
  AST.Atom.kind.getter();
  unint64_t v14 = *(uint64_t (**)(char *, uint64_t))(v8 + 88);
  int v15 = v14(v13, v7);
  if (v15 == *MEMORY[0x263F8FBD8])
  {
    (*(void (**)(char *, uint64_t))(v8 + 96))(v13, v7);
    (*(void (**)(char *, char *, uint64_t))(v4 + 32))(v6, v13, v3);
    AST.Atom.EscapedBuiltin.dslAssertionKind.getter(&v31);
    (*(void (**)(char *, uint64_t))(v4 + 8))(v6, v3);
  }
  else
  {
    if (v15 == *MEMORY[0x263F8FB68])
    {
      char v16 = 9;
      goto LABEL_11;
    }
    if (v15 == *MEMORY[0x263F8FB70])
    {
      char v16 = 10;
      goto LABEL_11;
    }
    char v31 = 13;
    (*(void (**)(char *, uint64_t))(v8 + 8))(v13, v7);
  }
  char v16 = v31;
  if (v31 != 13)
  {
LABEL_11:
    char v30 = v16;
    return DSLTree.Atom.Assertion._patternBase.getter();
  }
  AST.Atom.kind.getter();
  int v17 = v14(v11, v7);
  if (v17 == *MEMORY[0x263F8FBE8])
  {
    (*(void (**)(char *, uint64_t))(v8 + 96))(v11, v7);
    uint64_t v19 = v26;
    uint64_t v18 = v27;
    uint64_t v20 = v28;
    (*(void (**)(char *, char *, uint64_t))(v27 + 32))(v26, v11, v28);
    char v21 = AST.Atom.CharacterProperty.isUnprintableProperty.getter();
    (*(void (**)(char *, uint64_t))(v18 + 8))(v19, v20);
    if (v21) {
      return AST.Atom._regexBase.getter();
    }
    return AST.Atom._dslBase.getter();
  }
  int v23 = v17;
  if (v17 == *MEMORY[0x263F8FB98] || v17 == *MEMORY[0x263F8FB78] || v17 == *MEMORY[0x263F8FBA0])
  {
    (*(void (**)(char *, uint64_t))(v8 + 8))(v11, v7);
  }
  else
  {
    int v24 = *MEMORY[0x263F8FB88];
    (*(void (**)(char *, uint64_t))(v8 + 8))(v11, v7);
    if (v23 != v24) {
      return AST.Atom._dslBase.getter();
    }
  }
  return AST.Atom._regexBase.getter();
}

uint64_t Compiler.ByteCodeGen.emitQuotedLiteral(_:)(unint64_t a1, unint64_t object)
{
  uint64_t v3 = v2;
  uint64_t v78 = type metadata accessor for Unicode.Scalar.Properties();
  uint64_t v6 = *(void *)(v78 - 8);
  MEMORY[0x270FA5388](v78);
  unint64_t v77 = (char *)v68 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = *(void *)(*(void *)v2 + 16);
  if (!v8) {
    goto LABEL_114;
  }
  if ((*(_DWORD *)(*(void *)v2 + 4 * v8 + 28) & 0x10000) == 0)
  {
    uint64_t v9 = HIBYTE(object) & 0xF;
    unint64_t v81 = a1;
    unint64_t v82 = object;
    if ((object & 0x2000000000000000) == 0) {
      uint64_t v9 = a1 & 0xFFFFFFFFFFFFLL;
    }
    uint64_t v83 = 0;
    unint64_t v84 = v9;
    swift_bridgeObjectRetain();
    Swift::String_optional v10 = String.Iterator.next()();
    if (!v10.value._object) {
      return swift_bridgeObjectRelease();
    }
    uint64_t countAndFlagsBits = v10.value._countAndFlagsBits;
    object = (unint64_t)v10.value._object;
    uint64_t v76 = v6 + 8;
    while (1)
    {
      uint64_t v12 = HIBYTE(object) & 0xF;
      if ((object & 0x2000000000000000) == 0) {
        uint64_t v12 = countAndFlagsBits & 0xFFFFFFFFFFFFLL;
      }
      uint64_t v79 = v12;
      if (v12) {
        break;
      }
LABEL_45:
      swift_bridgeObjectRelease();
      Swift::String_optional v31 = String.Iterator.next()();
      uint64_t countAndFlagsBits = v31.value._countAndFlagsBits;
      object = (unint64_t)v31.value._object;
      if (!v31.value._object) {
        return swift_bridgeObjectRelease();
      }
    }
    unint64_t v74 = (object & 0xFFFFFFFFFFFFFFFLL) + 32;
    unint64_t v75 = object & 0xFFFFFFFFFFFFFFLL;
    swift_bridgeObjectRetain_n();
    uint64_t v13 = 0;
    while (1)
    {
      if ((object & 0x1000000000000000) != 0)
      {
        unsigned int v17 = _StringGuts.foreignErrorCorrectedScalar(startingAt:)();
        uint64_t v20 = v19;
      }
      else
      {
        if ((object & 0x2000000000000000) != 0)
        {
          v80[0] = countAndFlagsBits;
          v80[1] = v75;
          unsigned int v17 = *((unsigned __int8 *)v80 + v13);
          if (*((char *)v80 + v13) < 0)
          {
            switch(__clz(v17 ^ 0xFF))
            {
              case 0x1Au:
                uint64_t v18 = (char *)v80 + v13;
LABEL_37:
                unsigned int v17 = v18[1] & 0x3F | ((v17 & 0x1F) << 6);
                uint64_t v20 = 2;
                break;
              case 0x1Bu:
                uint64_t v29 = (char *)v80 + v13;
LABEL_41:
                unsigned int v17 = ((v17 & 0xF) << 12) | ((v29[1] & 0x3F) << 6) | v29[2] & 0x3F;
                uint64_t v20 = 3;
                break;
              case 0x1Cu:
                char v30 = (char *)v80 + v13;
LABEL_43:
                unsigned int v17 = ((v17 & 0xF) << 18) | ((v30[1] & 0x3F) << 12) | ((v30[2] & 0x3F) << 6) | v30[3] & 0x3F;
                uint64_t v20 = 4;
                break;
              default:
                goto LABEL_22;
            }
            goto LABEL_23;
          }
        }
        else
        {
          uint64_t v16 = v74;
          if ((countAndFlagsBits & 0x1000000000000000) == 0) {
            uint64_t v16 = _StringObject.sharedUTF8.getter();
          }
          unsigned int v17 = *(unsigned __int8 *)(v16 + v13);
          if (*(char *)(v16 + v13) < 0)
          {
            switch(__clz(v17 ^ 0xFF))
            {
              case 0x1Au:
                uint64_t v18 = (char *)(v13 + v16);
                goto LABEL_37;
              case 0x1Bu:
                uint64_t v29 = (char *)(v13 + v16);
                goto LABEL_41;
              case 0x1Cu:
                char v30 = (char *)(v13 + v16);
                goto LABEL_43;
              default:
                break;
            }
          }
        }
LABEL_22:
        uint64_t v20 = 1;
      }
LABEL_23:
      uint64_t v21 = *(void *)(*(void *)v3 + 16);
      if (!v21) {
        goto LABEL_64;
      }
      if ((*(_DWORD *)(*(void *)v3 + 4 * v21 + 28) & 1) != 0
        && (char v22 = v77,
            Unicode.Scalar.properties.getter(),
            char v23 = Unicode.Scalar.Properties.isCased.getter(),
            (*(void (**)(char *, uint64_t))v76)(v22, v78),
            (v23 & 1) != 0))
      {
        uint64_t v24 = *(int *)(type metadata accessor for Compiler.ByteCodeGen(0) + 20);
        uint64_t v25 = *(char **)(v3 + v24);
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
          uint64_t v25 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *((void *)v25 + 2) + 1, 1, v25, &demangling cache variable for type metadata for _ContiguousArrayStorage<Instruction>);
        }
        a1 = *((void *)v25 + 2);
        unint64_t v26 = *((void *)v25 + 3);
        unint64_t v27 = a1 + 1;
        if (a1 >= v26 >> 1) {
          uint64_t v25 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v26 > 1), a1 + 1, 1, v25, &demangling cache variable for type metadata for _ContiguousArrayStorage<Instruction>);
        }
        uint64_t v14 = v17;
        uint64_t v15 = 0x980000000000000;
      }
      else
      {
        uint64_t v24 = *(int *)(type metadata accessor for Compiler.ByteCodeGen(0) + 20);
        uint64_t v25 = *(char **)(v3 + v24);
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
          uint64_t v25 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *((void *)v25 + 2) + 1, 1, v25, &demangling cache variable for type metadata for _ContiguousArrayStorage<Instruction>);
        }
        a1 = *((void *)v25 + 2);
        unint64_t v28 = *((void *)v25 + 3);
        unint64_t v27 = a1 + 1;
        if (a1 >= v28 >> 1) {
          uint64_t v25 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v28 > 1), a1 + 1, 1, v25, &demangling cache variable for type metadata for _ContiguousArrayStorage<Instruction>);
        }
        uint64_t v14 = v17;
        uint64_t v15 = 0x900000000000000;
      }
      *((void *)v25 + 2) = v27;
      *(void *)&v25[8 * a1 + 32] = v14 | v15;
      *(void *)(v3 + v24) = v25;
      v13 += v20;
      if (v13 >= v79)
      {
        swift_bridgeObjectRelease_n();
        goto LABEL_45;
      }
    }
  }
  uint64_t v76 = type metadata accessor for Compiler.ByteCodeGen(0);
  if (*(unsigned char *)(v2 + *(int *)(v76 + 28))) {
    goto LABEL_65;
  }
  uint64_t v32 = object & 0x2000000000000000;
  unint64_t v81 = a1;
  unint64_t v82 = object;
  uint64_t v70 = a1 & 0xFFFFFFFFFFFFLL;
  uint64_t v71 = HIBYTE(object) & 0xF;
  if ((object & 0x2000000000000000) != 0) {
    unint64_t v33 = HIBYTE(object) & 0xF;
  }
  else {
    unint64_t v33 = a1 & 0xFFFFFFFFFFFFLL;
  }
  uint64_t v83 = 0;
  unint64_t v84 = v33;
  swift_bridgeObjectRetain();
  Swift::String_optional v34 = String.Iterator.next()();
  if (!v34.value._object)
  {
LABEL_66:
    swift_bridgeObjectRelease();
    if (!v33)
    {
LABEL_104:
      uint64_t v42 = v70;
      uint64_t v41 = v71;
      goto LABEL_105;
    }
    int v43 = (object & 0x1000000000000000) == 0 || (a1 & 0x800000000000000) != 0;
    uint64_t v44 = 11;
    if (v43) {
      uint64_t v44 = 7;
    }
    uint64_t v72 = 4 * v33;
    unint64_t v45 = 15;
    unint64_t v75 = v44 | (v33 << 16);
    unint64_t v74 = (unint64_t)specialized DefaultIndices<>.index(before:)(v75, a1, object) >> 14;
    uint64_t v79 = 4 << v43;
    v80[0] = 15;
    v68[1] = (object & 0xFFFFFFFFFFFFFFFLL) + 32;
    uint64_t v69 = object & 0xFFFFFFFFFFFFFFLL;
    v68[0] = v6 + 8;
    swift_bridgeObjectRetain();
    unint64_t v46 = 0;
    unint64_t v73 = object;
    while (1)
    {
      specialized DefaultIndices.formIndex(after:)(v80, a1, object);
      if (v45 & 0xC) != v79 && (v45) {
        break;
      }
      if ((v45 & 0xC) == v79) {
        unint64_t v45 = _StringGuts._slowEnsureMatchingEncoding(_:)(v45, a1, object);
      }
      if (v45 >> 16 >= v33) {
        goto LABEL_113;
      }
      if (v45) {
        goto LABEL_81;
      }
      _StringGuts.scalarAlignSlow(_:)(v45, a1, object);
      if ((object & 0x1000000000000000) != 0)
      {
LABEL_102:
        unsigned int v47 = _StringGuts.foreignErrorCorrectedScalar(startingAt:)();
        goto LABEL_87;
      }
LABEL_82:
      if (v32)
      {
        unint64_t v81 = a1;
        unint64_t v82 = v69;
      }
      else if ((a1 & 0x1000000000000000) == 0)
      {
        _StringObject.sharedUTF8.getter();
      }
      unsigned int v47 = _decodeScalar(_:startingAt:)();
LABEL_87:
      unsigned int v48 = v47;
      uint64_t v49 = *(void *)(*(void *)v3 + 16);
      if (!v49)
      {
        __break(1u);
LABEL_112:
        __break(1u);
LABEL_113:
        __break(1u);
LABEL_114:
        __break(1u);
LABEL_115:
        __break(1u);
LABEL_116:
        __break(1u);
        JUMPOUT(0x209F387F8);
      }
      unint64_t v50 = a1;
      unint64_t v51 = v33;
      uint64_t v52 = v32;
      if ((*(_DWORD *)(*(void *)v3 + 4 * v49 + 28) & 1) != 0
        && (uint64_t v53 = v77,
            Unicode.Scalar.properties.getter(),
            char v54 = Unicode.Scalar.Properties.isCased.getter(),
            (*(void (**)(char *, uint64_t))v68[0])(v53, v78),
            (v54 & 1) != 0))
      {
        uint64_t v55 = *(int *)(v76 + 20);
        BOOL v56 = v46 == v74;
        uint64_t v57 = 0x980000000000000;
        uint64_t v58 = 0x9C0000000000000;
      }
      else
      {
        uint64_t v55 = *(int *)(v76 + 20);
        BOOL v56 = v46 == v74;
        uint64_t v57 = 0x900000000000000;
        uint64_t v58 = 0x940000000000000;
      }
      if (v56) {
        uint64_t v59 = v58;
      }
      else {
        uint64_t v59 = v57;
      }
      uint64_t v60 = *(char **)(v3 + v55);
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
        uint64_t v60 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *((void *)v60 + 2) + 1, 1, v60, &demangling cache variable for type metadata for _ContiguousArrayStorage<Instruction>);
      }
      unint64_t v62 = *((void *)v60 + 2);
      unint64_t v61 = *((void *)v60 + 3);
      if (v62 >= v61 >> 1) {
        uint64_t v60 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v61 > 1), v62 + 1, 1, v60, &demangling cache variable for type metadata for _ContiguousArrayStorage<Instruction>);
      }
      *((void *)v60 + 2) = v62 + 1;
      *(void *)&v60[8 * v62 + 32] = v59 | v48;
      *(void *)(v3 + v55) = v60;
      unint64_t v45 = v80[0];
      unint64_t v46 = v80[0] >> 14;
      uint64_t v32 = v52;
      unint64_t v33 = v51;
      a1 = v50;
      object = v73;
      if (v80[0] >> 14 == v72) {
        return swift_bridgeObjectRelease();
      }
    }
    if (v45 >> 16 >= v33) {
      goto LABEL_112;
    }
LABEL_81:
    if ((object & 0x1000000000000000) != 0) {
      goto LABEL_102;
    }
    goto LABEL_82;
  }
  unint64_t v35 = v34.value._countAndFlagsBits;
  uint64_t v36 = v34.value._object;
  while (1)
  {
    if (v35 == 2573 && v36 == (void *)0xE200000000000000 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
    {
      swift_bridgeObjectRelease();
      goto LABEL_54;
    }
    if ((Character._isSingleScalar.getter() & 1) == 0) {
      goto LABEL_103;
    }
    unint64_t v38 = specialized Collection.first.getter(v35, (unint64_t)v36);
    if ((v38 & 0x100000000) != 0) {
      goto LABEL_115;
    }
    if ((v38 & 0xFFFFFF80) != 0)
    {
LABEL_103:
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      goto LABEL_104;
    }
    unint64_t v39 = specialized Collection.first.getter(v35, (unint64_t)v36);
    if ((v39 & 0x100000000) != 0) {
      goto LABEL_116;
    }
    int v40 = v39;
    swift_bridgeObjectRelease();
    if ((v40 & 0xFFFFFF00) != 0) {
      break;
    }
LABEL_54:
    Swift::String_optional v37 = String.Iterator.next()();
    unint64_t v35 = v37.value._countAndFlagsBits;
    uint64_t v36 = v37.value._object;
    if (!v37.value._object) {
      goto LABEL_66;
    }
  }
  __break(1u);
LABEL_64:
  __break(1u);
LABEL_65:
  uint64_t v32 = object & 0x2000000000000000;
  uint64_t v41 = HIBYTE(object) & 0xF;
  uint64_t v42 = a1 & 0xFFFFFFFFFFFFLL;
LABEL_105:
  if (!v32) {
    uint64_t v41 = v42;
  }
  unint64_t v81 = a1;
  unint64_t v82 = object;
  uint64_t v83 = 0;
  unint64_t v84 = v41;
  swift_bridgeObjectRetain();
  Swift::String_optional v64 = String.Iterator.next()();
  unint64_t v63 = v64.value._countAndFlagsBits;
  if (v64.value._object)
  {
    unint64_t v65 = v64.value._object;
    do
    {
      Compiler.ByteCodeGen.emitCharacter(_:)(v63, (unint64_t)v65);
      swift_bridgeObjectRelease();
      Swift::String_optional v66 = String.Iterator.next()();
      unint64_t v63 = v66.value._countAndFlagsBits;
      unint64_t v65 = v66.value._object;
    }
    while (v66.value._object);
  }
  return swift_bridgeObjectRelease();
}

BOOL specialized Sequence.allSatisfy(_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a1 + 16);
  uint64_t v4 = (uint64_t *)(a1 + 32);
  do
  {
    uint64_t v5 = v3;
    if (!v3) {
      break;
    }
    uint64_t v6 = *v4++;
    swift_retain();
    char v7 = DSLTree.Node._canOnlyMatchAtStartImpl(_:)(a2, v6);
    swift_release();
    uint64_t v3 = v5 - 1;
  }
  while ((v7 & 1) != 0);
  return v5 == 0;
}

uint64_t DSLTree.Atom.CharacterClass.asRuntimeModel(_:)(uint64_t a1)
{
  unsigned __int8 v3 = 2;
  char v4 = 0;
  switch(*v1)
  {
    case 1u:
      char v4 = 1;
      break;
    case 2u:
      char v4 = 0;
      unsigned __int8 v3 = 3;
      break;
    case 3u:
      char v4 = 1;
      unsigned __int8 v3 = *v1;
      break;
    case 4u:
    case 6u:
      char v4 = 0;
      unsigned __int8 v3 = *v1;
      break;
    case 5u:
      unsigned __int8 v3 = 4;
      char v4 = 1;
      break;
    case 7u:
      unsigned __int8 v3 = 6;
      char v4 = 1;
      break;
    case 8u:
      char v4 = 0;
      unsigned __int8 v3 = 5;
      break;
    case 9u:
      unsigned __int8 v3 = 5;
      char v4 = 1;
      break;
    case 0xAu:
      char v4 = 0;
      unsigned __int8 v3 = 7;
      break;
    case 0xBu:
      unsigned __int8 v3 = 7;
      char v4 = 1;
      break;
    case 0xCu:
      char v4 = 0;
      unsigned __int8 v3 = 1;
      break;
    case 0xDu:
      _assertionFailure(_:_:file:line:flags:)();
      __break(1u);
      JUMPOUT(0x209F389D4);
    default:
      return specialized _CharacterClassModel.init(cc:options:isInverted:)(v3, a1, v4) & 0x10101FF;
  }
  return specialized _CharacterClassModel.init(cc:options:isInverted:)(v3, a1, v4) & 0x10101FF;
}

uint64_t specialized Compiler.ByteCodeGen.emitAlternationGen<A>(_:withBacktracking:_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v38 = a1;
  uint64_t v36 = type metadata accessor for DSLTree.CustomCharacterClass.Member(0);
  uint64_t v43 = *(void *)(v36 - 8);
  MEMORY[0x270FA5388](v36);
  uint64_t v41 = (uint64_t)&v35 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for DSLTree.CustomCharacterClass.Member?);
  MEMORY[0x270FA5388](v5 - 8);
  char v7 = (char *)&v35 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = *(int *)(type metadata accessor for Compiler.ByteCodeGen(0) + 20);
  uint64_t v42 = a2;
  uint64_t v9 = (char **)(a2 + v8);
  Swift::String_optional v10 = *(char **)(a2 + v8 + 80);
  unint64_t v11 = *((void *)v10 + 2);
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  unint64_t v35 = v7;
  if ((isUniquelyReferenced_nonNull_native & 1) == 0) {
    goto LABEL_29;
  }
  while (1)
  {
    unint64_t v14 = *((void *)v10 + 2);
    unint64_t v13 = *((void *)v10 + 3);
    if (v14 >= v13 >> 1) {
      Swift::String_optional v10 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v13 > 1), v14 + 1, 1, v10);
    }
    *((void *)v10 + 2) = v14 + 1;
    uint64_t v15 = &v10[16 * v14];
    *((void *)v15 + 4) = 0;
    v15[40] = 1;
    v9[10] = v10;
    uint64_t v37 = specialized Collection.dropLast(_:)(1, v38);
    uint64_t v40 = v16;
    uint64_t v18 = v17;
    int64_t v20 = v19 >> 1;
    swift_bridgeObjectRetain();
    if (v18 == v20) {
      break;
    }
    unint64_t v39 = v11;
    while (v18 < v20)
    {
      uint64_t v26 = v41;
      outlined init with copy of MEProgram(v40 + *(void *)(v43 + 72) * v18, v41, type metadata accessor for DSLTree.CustomCharacterClass.Member);
      unint64_t v28 = *((void *)v10 + 2);
      unint64_t v27 = *((void *)v10 + 3);
      if (v28 >= v27 >> 1) {
        Swift::String_optional v10 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v27 > 1), v28 + 1, 1, v10);
      }
      *((void *)v10 + 2) = v28 + 1;
      uint64_t v29 = &v10[16 * v28];
      *((void *)v29 + 4) = 0;
      v29[40] = 1;
      v9[10] = v10;
      MEProgram.Builder.buildSave(_:)(v28);
      Compiler.ByteCodeGen.emitCCCMember(_:)(v26);
      if (v2)
      {
        swift_unknownObjectRelease();
        return outlined destroy of MEProgram(v26, type metadata accessor for DSLTree.CustomCharacterClass.Member);
      }
      outlined destroy of MEProgram(v26, type metadata accessor for DSLTree.CustomCharacterClass.Member);
      char v30 = *v9;
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
        char v30 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *((void *)v30 + 2) + 1, 1, v30, &demangling cache variable for type metadata for _ContiguousArrayStorage<Instruction>);
      }
      unint64_t v32 = *((void *)v30 + 2);
      unint64_t v31 = *((void *)v30 + 3);
      if (v32 >= v31 >> 1) {
        char v30 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v31 > 1), v32 + 1, 1, v30, &demangling cache variable for type metadata for _ContiguousArrayStorage<Instruction>);
      }
      *((void *)v30 + 2) = v32 + 1;
      *(void *)&v30[8 * v32 + 32] = 0x1200000000000000;
      *uint64_t v9 = v30;
      unint64_t v11 = v39;
      MEProgram.Builder.buildBranch(to:)(v39);
      uint64_t v33 = *((void *)*v9 + 2);
      Swift::String_optional v10 = v9[10];
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
        Swift::String_optional v10 = specialized _ArrayBuffer._consumeAndCreateNew()((uint64_t)v10);
      }
      if (v28 >= *((void *)v10 + 2)) {
        goto LABEL_28;
      }
      Swift::String_optional v34 = &v10[16 * v28];
      *((void *)v34 + 4) = v33;
      ++v18;
      v34[40] = 0;
      v9[10] = v10;
      if (v20 == v18) {
        goto LABEL_5;
      }
    }
    __break(1u);
LABEL_28:
    __break(1u);
LABEL_29:
    Swift::String_optional v10 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v11 + 1, 1, v10);
  }
LABEL_5:
  swift_unknownObjectRelease();
  uint64_t v21 = (uint64_t)v35;
  specialized BidirectionalCollection.last.getter(v38, (uint64_t)v35);
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v43 + 48))(v21, 1, v36);
  if (result == 1)
  {
LABEL_31:
    __break(1u);
    return result;
  }
  Compiler.ByteCodeGen.emitCCCMember(_:)(v21);
  uint64_t result = outlined destroy of MEProgram(v21, type metadata accessor for DSLTree.CustomCharacterClass.Member);
  if (!v2)
  {
    uint64_t v23 = *((void *)*v9 + 2);
    uint64_t v24 = (uint64_t)v9[10];
    uint64_t result = swift_isUniquelyReferenced_nonNull_native();
    if ((result & 1) == 0)
    {
      uint64_t result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew()(v24);
      uint64_t v24 = result;
    }
    if (v11 < *(void *)(v24 + 16))
    {
      unint64_t v25 = v24 + 16 * v11;
      *(void *)(v25 + 32) = v23;
      *(unsigned char *)(v25 + 40) = 0;
      v9[10] = (char *)v24;
      return result;
    }
    __break(1u);
    goto LABEL_31;
  }
  return result;
}

uint64_t specialized Compiler.ByteCodeGen.emitAlternationGen<A>(_:withBacktracking:_:)(unint64_t a1, uint64_t a2)
{
  uint64_t v3 = v2;
  uint64_t v5 = (void *)(a2 + *(int *)(type metadata accessor for Compiler.ByteCodeGen(0) + 20));
  uint64_t v6 = (char *)v5[10];
  unint64_t v7 = *((void *)v6 + 2);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
    goto LABEL_22;
  }
  while (1)
  {
    unint64_t v9 = *((void *)v6 + 2);
    unint64_t v8 = *((void *)v6 + 3);
    uint64_t v10 = v9 + 1;
    if (v9 >= v8 >> 1) {
      uint64_t v6 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v8 > 1), v9 + 1, 1, v6);
    }
    *((void *)v6 + 2) = v10;
    unint64_t v11 = &v6[16 * v9];
    *((void *)v11 + 4) = 0;
    v11[40] = 1;
    v5[10] = v6;
    unint64_t v12 = *(void *)(a1 + 16);
    swift_bridgeObjectRetain();
    swift_unknownObjectRetain();
    if (v12 < 2) {
      break;
    }
    uint64_t v24 = (v12 - 1) & 0x7FFFFFFFFFFFFFFFLL;
    if (!v24) {
      break;
    }
    uint64_t v13 = 0;
    unint64_t v25 = a1;
    while (1)
    {
      uint64_t v14 = v7;
      uint64_t v15 = *(void *)(a1 + 8 * v13 + 32);
      a1 = *((void *)v6 + 2);
      unint64_t v16 = *((void *)v6 + 3);
      swift_retain();
      if (a1 >= v16 >> 1) {
        uint64_t v6 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v16 > 1), a1 + 1, 1, v6);
      }
      *((void *)v6 + 2) = a1 + 1;
      uint64_t v10 = 16 * a1;
      uint64_t v17 = &v6[16 * a1];
      *((void *)v17 + 4) = 0;
      v17[40] = 1;
      v5[10] = v6;
      MEProgram.Builder.buildSave(_:)(a1);
      Compiler.ByteCodeGen.emitNode(_:)(v15);
      swift_release();
      if (v3) {
        return swift_unknownObjectRelease_n();
      }
      unint64_t v7 = v14;
      MEProgram.Builder.buildBranch(to:)(v14);
      uint64_t v18 = *(void *)(*v5 + 16);
      uint64_t v6 = (char *)v5[10];
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
        uint64_t v6 = specialized _ArrayBuffer._consumeAndCreateNew()((uint64_t)v6);
      }
      if (a1 >= *((void *)v6 + 2)) {
        break;
      }
      unint64_t v19 = &v6[v10];
      *((void *)v19 + 4) = v18;
      ++v13;
      v19[40] = 0;
      v5[10] = v6;
      a1 = v25;
      if (v24 == v13) {
        goto LABEL_14;
      }
    }
    __break(1u);
LABEL_22:
    uint64_t v6 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v7 + 1, 1, v6);
  }
LABEL_14:
  swift_unknownObjectRelease_n();
  uint64_t v20 = *(void *)(a1 + 16);
  if (!v20)
  {
    __break(1u);
LABEL_24:
    uint64_t result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew()((uint64_t)v6);
    uint64_t v6 = (char *)result;
    goto LABEL_17;
  }
  uint64_t v21 = *(void *)(a1 + 32 + 8 * v20 - 8);
  swift_retain();
  Compiler.ByteCodeGen.emitNode(_:)(v21);
  uint64_t result = swift_release();
  if (v3) {
    return result;
  }
  uint64_t v10 = *(void *)(*v5 + 16);
  uint64_t v6 = (char *)v5[10];
  uint64_t result = swift_isUniquelyReferenced_nonNull_native();
  if ((result & 1) == 0) {
    goto LABEL_24;
  }
LABEL_17:
  if (v7 >= *((void *)v6 + 2))
  {
    __break(1u);
  }
  else
  {
    uint64_t v23 = &v6[16 * v7];
    *((void *)v23 + 4) = v10;
    v23[40] = 0;
    v5[10] = v6;
  }
  return result;
}

uint64_t specialized Collection.dropLast(_:)(uint64_t result, uint64_t a2)
{
  if (result < 0)
  {
    __break(1u);
  }
  else
  {
    type metadata accessor for DSLTree.CustomCharacterClass.Member(0);
    return a2;
  }
  return result;
}

uint64_t MEProgram.Builder.buildSave(_:)(uint64_t a1)
{
  uint64_t v3 = *(char **)v1;
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
    uint64_t v3 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *((void *)v3 + 2) + 1, 1, v3, &demangling cache variable for type metadata for _ContiguousArrayStorage<Instruction>);
  }
  unint64_t v5 = *((void *)v3 + 2);
  unint64_t v4 = *((void *)v3 + 3);
  if (v5 >= v4 >> 1) {
    uint64_t v3 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v4 > 1), v5 + 1, 1, v3, &demangling cache variable for type metadata for _ContiguousArrayStorage<Instruction>);
  }
  *((void *)v3 + 2) = v5 + 1;
  *(void *)&v3[8 * v5 + 32] = 0x1000000000000000;
  *(void *)uint64_t v1 = v3;
  uint64_t v6 = *((void *)v3 + 2);
  uint64_t v7 = *(void *)(v1 + 88);
  uint64_t result = swift_isUniquelyReferenced_nonNull_native();
  if ((result & 1) == 0)
  {
    uint64_t result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(void *)(v7 + 16) + 1, 1, (char *)v7);
    uint64_t v7 = result;
  }
  unint64_t v10 = *(void *)(v7 + 16);
  unint64_t v9 = *(void *)(v7 + 24);
  if (v10 >= v9 >> 1)
  {
    uint64_t result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v9 > 1), v10 + 1, 1, (char *)v7);
    uint64_t v7 = result;
  }
  *(void *)(v7 + 16) = v10 + 1;
  unint64_t v11 = v7 + 32 * v10;
  *(void *)(v11 + 32) = v6 - 1;
  *(void *)(v11 + 40) = a1;
  *(void *)(v11 + 48) = 0;
  *(unsigned char *)(v11 + 56) = 1;
  *(void *)(v1 + 88) = v7;
  return result;
}

uint64_t MEProgram.Builder.buildBranch(to:)(uint64_t a1)
{
  uint64_t v3 = *(char **)v1;
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
    uint64_t v3 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *((void *)v3 + 2) + 1, 1, v3, &demangling cache variable for type metadata for _ContiguousArrayStorage<Instruction>);
  }
  unint64_t v5 = *((void *)v3 + 2);
  unint64_t v4 = *((void *)v3 + 3);
  if (v5 >= v4 >> 1) {
    uint64_t v3 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v4 > 1), v5 + 1, 1, v3, &demangling cache variable for type metadata for _ContiguousArrayStorage<Instruction>);
  }
  *((void *)v3 + 2) = v5 + 1;
  *(void *)&v3[8 * v5 + 32] = 0x400000000000000;
  *(void *)uint64_t v1 = v3;
  uint64_t v6 = *((void *)v3 + 2);
  uint64_t v7 = *(void *)(v1 + 88);
  uint64_t result = swift_isUniquelyReferenced_nonNull_native();
  if ((result & 1) == 0)
  {
    uint64_t result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(void *)(v7 + 16) + 1, 1, (char *)v7);
    uint64_t v7 = result;
  }
  unint64_t v10 = *(void *)(v7 + 16);
  unint64_t v9 = *(void *)(v7 + 24);
  if (v10 >= v9 >> 1)
  {
    uint64_t result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v9 > 1), v10 + 1, 1, (char *)v7);
    uint64_t v7 = result;
  }
  *(void *)(v7 + 16) = v10 + 1;
  unint64_t v11 = v7 + 32 * v10;
  *(void *)(v11 + 32) = v6 - 1;
  *(void *)(v11 + 40) = a1;
  *(void *)(v11 + 48) = 0;
  *(unsigned char *)(v11 + 56) = 1;
  *(void *)(v1 + 88) = v7;
  return result;
}

uint64_t MEProgram.Builder.buildClearThrough(_:)(uint64_t a1)
{
  uint64_t v3 = *(char **)v1;
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
    uint64_t v3 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *((void *)v3 + 2) + 1, 1, v3, &demangling cache variable for type metadata for _ContiguousArrayStorage<Instruction>);
  }
  unint64_t v5 = *((void *)v3 + 2);
  unint64_t v4 = *((void *)v3 + 3);
  if (v5 >= v4 >> 1) {
    uint64_t v3 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v4 > 1), v5 + 1, 1, v3, &demangling cache variable for type metadata for _ContiguousArrayStorage<Instruction>);
  }
  *((void *)v3 + 2) = v5 + 1;
  *(void *)&v3[8 * v5 + 32] = 0x1300000000000000;
  *(void *)uint64_t v1 = v3;
  uint64_t v6 = *((void *)v3 + 2);
  uint64_t v7 = *(void *)(v1 + 88);
  uint64_t result = swift_isUniquelyReferenced_nonNull_native();
  if ((result & 1) == 0)
  {
    uint64_t result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(void *)(v7 + 16) + 1, 1, (char *)v7);
    uint64_t v7 = result;
  }
  unint64_t v10 = *(void *)(v7 + 16);
  unint64_t v9 = *(void *)(v7 + 24);
  if (v10 >= v9 >> 1)
  {
    uint64_t result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v9 > 1), v10 + 1, 1, (char *)v7);
    uint64_t v7 = result;
  }
  *(void *)(v7 + 16) = v10 + 1;
  unint64_t v11 = v7 + 32 * v10;
  *(void *)(v11 + 32) = v6 - 1;
  *(void *)(v11 + 40) = a1;
  *(void *)(v11 + 48) = 0;
  *(unsigned char *)(v11 + 56) = 1;
  *(void *)(v1 + 88) = v7;
  return result;
}

uint64_t MEProgram.Builder.buildSaveAddress(_:)(uint64_t a1)
{
  uint64_t v3 = *(char **)v1;
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
    uint64_t v3 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *((void *)v3 + 2) + 1, 1, v3, &demangling cache variable for type metadata for _ContiguousArrayStorage<Instruction>);
  }
  unint64_t v5 = *((void *)v3 + 2);
  unint64_t v4 = *((void *)v3 + 3);
  if (v5 >= v4 >> 1) {
    uint64_t v3 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v4 > 1), v5 + 1, 1, v3, &demangling cache variable for type metadata for _ContiguousArrayStorage<Instruction>);
  }
  *((void *)v3 + 2) = v5 + 1;
  *(void *)&v3[8 * v5 + 32] = 0x1100000000000000;
  *(void *)uint64_t v1 = v3;
  uint64_t v6 = *((void *)v3 + 2);
  uint64_t v7 = *(void *)(v1 + 88);
  uint64_t result = swift_isUniquelyReferenced_nonNull_native();
  if ((result & 1) == 0)
  {
    uint64_t result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(void *)(v7 + 16) + 1, 1, (char *)v7);
    uint64_t v7 = result;
  }
  unint64_t v10 = *(void *)(v7 + 16);
  unint64_t v9 = *(void *)(v7 + 24);
  if (v10 >= v9 >> 1)
  {
    uint64_t result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v9 > 1), v10 + 1, 1, (char *)v7);
    uint64_t v7 = result;
  }
  *(void *)(v7 + 16) = v10 + 1;
  unint64_t v11 = v7 + 32 * v10;
  *(void *)(v11 + 32) = v6 - 1;
  *(void *)(v11 + 40) = a1;
  *(void *)(v11 + 48) = 0;
  *(unsigned char *)(v11 + 56) = 1;
  *(void *)(v1 + 88) = v7;
  return result;
}

uint64_t Compiler.ByteCodeGen.emitNoncapturingGroup(_:_:)(unint64_t a1, uint64_t a2)
{
  LODWORD(v4) = v3;
  uint64_t v72 = a2;
  uint64_t v6 = type metadata accessor for AST.MatchingOptionSequence();
  unint64_t v69 = *(void *)(v6 - 8);
  MEMORY[0x270FA5388](v6);
  uint64_t v70 = (uint64_t)&v67 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = type metadata accessor for AST.Group.Kind();
  unint64_t v9 = *(void *)(v8 - 8);
  MEMORY[0x270FA5388](v8);
  unint64_t v11 = (char *)&v67 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  unint64_t v12 = *v2;
  uint64_t v13 = *(void *)(*v2 + 16);
  if (v13)
  {
    uint64_t v71 = v3;
    unint64_t v73 = v2;
    LODWORD(v4) = *(_DWORD *)(v12 + 4 * v13 + 28);
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v68 = v6;
    if (isUniquelyReferenced_nonNull_native) {
      goto LABEL_3;
    }
    goto LABEL_122;
  }
  while (1)
  {
    __break(1u);
LABEL_122:
    unint64_t v12 = (unint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v13 + 1, 1, (char *)v12);
LABEL_3:
    unint64_t v16 = *(void *)(v12 + 16);
    unint64_t v15 = *(void *)(v12 + 24);
    if (v16 >= v15 >> 1) {
      unint64_t v12 = (unint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v15 > 1), v16 + 1, 1, (char *)v12);
    }
    *(void *)(v12 + 16) = v16 + 1;
    *(_DWORD *)(v12 + 4 * v16 + 32) = v4;
    unint64_t v4 = (char *)v73;
    *unint64_t v73 = v12;
    uint64_t v17 = (char *)a1;
    __int16 v18 = AST.Group.Kind.lookaroundKind.getter();
    if (v18 == 2) {
      break;
    }
    LOWORD(v13) = v18;
    if ((v18 & 1) == 0)
    {
      type metadata accessor for Unsupported();
      lazy protocol witness table accessor for type AST.Quantification.Kind and conformance AST.Quantification.Kind(&lazy protocol witness table cache variable for type Unsupported and conformance Unsupported, MEMORY[0x263F8F860]);
      swift_allocError();
      MEMORY[0x21050E6B0](0xD000000000000014, 0x8000000209FB63E0, "/Library/Caches/com.apple.xbs/Sources/swiftlang_overlay_Platform_Device/swift-experimental-string-processing/Sources/_StringProcessing/ByteCodeGen.swift", 152, 2, 374);
      swift_willThrow();
      goto LABEL_71;
    }
LABEL_28:
    unint64_t v16 = (unint64_t)&v4[*(int *)(type metadata accessor for Compiler.ByteCodeGen(0) + 20)];
    uint64_t v17 = *(char **)(v16 + 80);
    a1 = *((void *)v17 + 2);
    LOBYTE(result) = swift_isUniquelyReferenced_nonNull_native();
    if ((v13 & 0x100) != 0) {
      goto LABEL_52;
    }
    if ((result & 1) == 0) {
      goto LABEL_132;
    }
LABEL_30:
    unint64_t v28 = *((void *)v17 + 2);
    unint64_t v27 = *((void *)v17 + 3);
    if (v28 >= v27 >> 1) {
      uint64_t v17 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v27 > 1), v28 + 1, 1, v17);
    }
    *((void *)v17 + 2) = v28 + 1;
    uint64_t v29 = &v17[16 * v28];
    *((void *)v29 + 4) = 0;
    v29[40] = 1;
    *(void *)(v16 + 80) = v17;
    unint64_t v12 = *((void *)v17 + 2);
    unint64_t v30 = *((void *)v17 + 3);
    if (v12 >= v30 >> 1) {
      uint64_t v17 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v30 > 1), v12 + 1, 1, v17);
    }
    *((void *)v17 + 2) = v12 + 1;
    uint64_t v8 = 16 * v12;
    unint64_t v31 = &v17[16 * v12];
    *((void *)v31 + 4) = 0;
    v31[40] = 1;
    *(void *)(v16 + 80) = v17;
    MEProgram.Builder.buildSave(_:)(v12);
    MEProgram.Builder.buildSave(_:)(a1);
    uint64_t v32 = v71;
    Compiler.ByteCodeGen.emitNode(_:)(v72);
    if (v32)
    {
      while (1)
      {
LABEL_71:
        uint64_t v17 = *(char **)v4;
        if (*(void *)(*(void *)v4 + 16))
        {
          uint64_t result = swift_isUniquelyReferenced_nonNull_native();
          if (result)
          {
            uint64_t v26 = *((void *)v17 + 2);
            if (v26) {
              goto LABEL_74;
            }
            goto LABEL_125;
          }
        }
        else
        {
          __break(1u);
        }
        uint64_t result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew()((uint64_t)v17);
        uint64_t v17 = (char *)result;
        uint64_t v26 = *(void *)(result + 16);
        if (v26) {
          goto LABEL_74;
        }
LABEL_125:
        __break(1u);
LABEL_126:
        __break(1u);
LABEL_127:
        uint64_t result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew()((uint64_t)v17);
        uint64_t v17 = (char *)result;
        uint64_t v26 = *(void *)(result + 16);
        if (v26) {
          goto LABEL_74;
        }
LABEL_51:
        __break(1u);
LABEL_52:
        if ((result & 1) == 0) {
          uint64_t v17 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, a1 + 1, 1, v17);
        }
        unint64_t v39 = *((void *)v17 + 2);
        unint64_t v38 = *((void *)v17 + 3);
        if (v39 >= v38 >> 1) {
          uint64_t v17 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v38 > 1), v39 + 1, 1, v17);
        }
        *((void *)v17 + 2) = v39 + 1;
        uint64_t v40 = &v17[16 * v39];
        *((void *)v40 + 4) = 0;
        v40[40] = 1;
        *(void *)(v16 + 80) = v17;
        unint64_t v12 = *((void *)v17 + 2);
        unint64_t v41 = *((void *)v17 + 3);
        if (v12 >= v41 >> 1) {
          uint64_t v17 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v41 > 1), v12 + 1, 1, v17);
        }
        *((void *)v17 + 2) = v12 + 1;
        uint64_t v8 = 16 * v12;
        uint64_t v42 = &v17[16 * v12];
        *((void *)v42 + 4) = 0;
        v42[40] = 1;
        *(void *)(v16 + 80) = v17;
        MEProgram.Builder.buildSave(_:)(v12);
        MEProgram.Builder.buildSave(_:)(a1);
        uint64_t v43 = v71;
        Compiler.ByteCodeGen.emitNode(_:)(v72);
        if (!v43)
        {
          MEProgram.Builder.buildClearThrough(_:)(a1);
          uint64_t v17 = *(char **)v16;
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
            uint64_t v17 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *((void *)v17 + 2) + 1, 1, v17, &demangling cache variable for type metadata for _ContiguousArrayStorage<Instruction>);
          }
          unint64_t v9 = *((void *)v17 + 2);
          unint64_t v44 = *((void *)v17 + 3);
          if (v9 >= v44 >> 1) {
            uint64_t v17 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v44 > 1), v9 + 1, 1, v17, &demangling cache variable for type metadata for _ContiguousArrayStorage<Instruction>);
          }
          *((void *)v17 + 2) = v9 + 1;
          *(void *)&v17[8 * v9 + 32] = 0x1C00000000000001;
          *(void *)unint64_t v16 = v17;
          unint64_t v45 = *((void *)v17 + 2);
          unint64_t v4 = *(char **)(v16 + 80);
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
            unint64_t v4 = specialized _ArrayBuffer._consumeAndCreateNew()((uint64_t)v4);
          }
          unint64_t v46 = *((void *)v4 + 2);
          if (a1 >= v46)
          {
            __break(1u);
          }
          else
          {
            unint64_t v9 = (unint64_t)(v4 + 32);
            uint64_t v47 = (uint64_t)&v4[16 * a1 + 32];
            *(void *)uint64_t v47 = v45;
            *(unsigned char *)(v47 + 8) = 0;
            *(void *)(v16 + 80) = v4;
            unint64_t v45 = *((void *)v17 + 2);
            unint64_t v46 = *((void *)v17 + 3);
            a1 = v45 + 1;
            if (v45 < v46 >> 1) {
              goto LABEL_67;
            }
          }
          uint64_t v17 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v46 > 1), a1, 1, v17, &demangling cache variable for type metadata for _ContiguousArrayStorage<Instruction>);
LABEL_67:
          *((void *)v17 + 2) = a1;
          *(void *)&v17[8 * v45 + 32] = 0x1200000000000000;
          *(void *)unint64_t v16 = v17;
          unint64_t v11 = (char *)*((void *)v17 + 2);
          unint64_t v48 = *((void *)v17 + 3);
          a1 = (unint64_t)(v11 + 1);
          if ((unint64_t)v11 >= v48 >> 1) {
            uint64_t v17 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v48 > 1), (int64_t)(v11 + 1), 1, v17, &demangling cache variable for type metadata for _ContiguousArrayStorage<Instruction>);
          }
          *((void *)v17 + 2) = a1;
          *(void *)&v17[8 * (void)v11 + 32] = 0x1C00000000000000;
          *(void *)unint64_t v16 = v17;
          if (v12 < *((void *)v4 + 2))
          {
LABEL_70:
            unint64_t v49 = v9 + v8;
            *(void *)unint64_t v49 = *((void *)v17 + 2);
            *(unsigned char *)(v49 + 8) = 0;
            *(void *)(v16 + 80) = v4;
            unint64_t v4 = (char *)v73;
            goto LABEL_99;
          }
          __break(1u);
LABEL_147:
          __break(1u);
LABEL_148:
          uint64_t result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew()((uint64_t)v17);
          uint64_t v17 = (char *)result;
          uint64_t v26 = *(void *)(result + 16);
          if (v26) {
            goto LABEL_74;
          }
LABEL_102:
          __break(1u);
          goto LABEL_103;
        }
      }
    }
    MEProgram.Builder.buildClearThrough(_:)(a1);
    uint64_t v17 = *(char **)v16;
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
      uint64_t v17 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *((void *)v17 + 2) + 1, 1, v17, &demangling cache variable for type metadata for _ContiguousArrayStorage<Instruction>);
    }
    unint64_t v34 = *((void *)v17 + 2);
    unint64_t v33 = *((void *)v17 + 3);
    if (v34 >= v33 >> 1) {
      uint64_t v17 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v33 > 1), v34 + 1, 1, v17, &demangling cache variable for type metadata for _ContiguousArrayStorage<Instruction>);
    }
    *((void *)v17 + 2) = v34 + 1;
    *(void *)&v17[8 * v34 + 32] = 0x1200000000000000;
    *(void *)unint64_t v16 = v17;
    unint64_t v9 = *((void *)v17 + 2);
    unint64_t v35 = *((void *)v17 + 3);
    if (v9 >= v35 >> 1) {
      uint64_t v17 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v35 > 1), v9 + 1, 1, v17, &demangling cache variable for type metadata for _ContiguousArrayStorage<Instruction>);
    }
    *((void *)v17 + 2) = v9 + 1;
    *(void *)&v17[8 * v9 + 32] = 0x1C00000000000000;
    *(void *)unint64_t v16 = v17;
    unint64_t v11 = (char *)*((void *)v17 + 2);
    unint64_t v4 = *(char **)(v16 + 80);
    LODWORD(result) = swift_isUniquelyReferenced_nonNull_native();
    if ((result & 1) == 0)
    {
      uint64_t result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew()((uint64_t)v4);
      unint64_t v4 = (char *)result;
    }
    unint64_t v36 = *((void *)v4 + 2);
    if (a1 >= v36)
    {
      __break(1u);
LABEL_143:
      uint64_t result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v36 > 1), a1, 1, v17, &demangling cache variable for type metadata for _ContiguousArrayStorage<Instruction>);
      uint64_t v17 = (char *)result;
      goto LABEL_45;
    }
    unint64_t v9 = (unint64_t)(v4 + 32);
    uint64_t v37 = (uint64_t)&v4[16 * a1 + 32];
    *(void *)uint64_t v37 = v11;
    *(unsigned char *)(v37 + 8) = 0;
    *(void *)(v16 + 80) = v4;
    unint64_t v11 = (char *)*((void *)v17 + 2);
    unint64_t v36 = *((void *)v17 + 3);
    a1 = (unint64_t)(v11 + 1);
    if ((unint64_t)v11 >= v36 >> 1) {
      goto LABEL_143;
    }
LABEL_45:
    *((void *)v17 + 2) = a1;
    *(void *)&v17[8 * (void)v11 + 32] = 0x1C00000000000000;
    *(void *)unint64_t v16 = v17;
    if (v12 < *((void *)v4 + 2)) {
      goto LABEL_70;
    }
    __break(1u);
LABEL_47:
    if (result == *MEMORY[0x263F8FCC8]) {
      goto LABEL_48;
    }
    if (result == *MEMORY[0x263F8FCA0])
    {
      unint64_t v50 = (char **)&v4[*(int *)(type metadata accessor for Compiler.ByteCodeGen(0) + 20)];
      unint64_t v51 = v50[10];
      unint64_t v12 = *((void *)v51 + 2);
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
        unint64_t v51 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v12 + 1, 1, v51);
      }
      unint64_t v53 = *((void *)v51 + 2);
      unint64_t v52 = *((void *)v51 + 3);
      if (v53 >= v52 >> 1) {
        unint64_t v51 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v52 > 1), v53 + 1, 1, v51);
      }
      *((void *)v51 + 2) = v53 + 1;
      char v54 = &v51[16 * v53];
      *((void *)v54 + 4) = 0;
      unint64_t v9 = 1;
      v54[40] = 1;
      v50[10] = v51;
      a1 = *((void *)v51 + 2);
      unint64_t v55 = *((void *)v51 + 3);
      if (a1 >= v55 >> 1) {
        unint64_t v51 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v55 > 1), a1 + 1, 1, v51);
      }
      *((void *)v51 + 2) = a1 + 1;
      uint64_t v8 = 16 * a1;
      BOOL v56 = &v51[16 * a1];
      *((void *)v56 + 4) = 0;
      v56[40] = 1;
      v50[10] = v51;
      MEProgram.Builder.buildSaveAddress(_:)(a1);
      MEProgram.Builder.buildSave(_:)(v12);
      uint64_t v57 = v71;
      Compiler.ByteCodeGen.emitNode(_:)(v72);
      uint64_t v13 = v57;
      if (!v57)
      {
        MEProgram.Builder.buildClearThrough(_:)(v12);
        uint64_t v17 = *v50;
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
          uint64_t v17 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *((void *)v17 + 2) + 1, 1, v17, &demangling cache variable for type metadata for _ContiguousArrayStorage<Instruction>);
        }
        unint64_t v9 = *((void *)v17 + 2);
        unint64_t v58 = *((void *)v17 + 3);
        if (v9 >= v58 >> 1) {
          uint64_t v17 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v58 > 1), v9 + 1, 1, v17, &demangling cache variable for type metadata for _ContiguousArrayStorage<Instruction>);
        }
        *((void *)v17 + 2) = v9 + 1;
        *(void *)&v17[8 * v9 + 32] = 0x1C00000000000001;
        *unint64_t v50 = v17;
        unint64_t v59 = *((void *)v17 + 2);
        unint64_t v4 = v50[10];
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
          unint64_t v4 = specialized _ArrayBuffer._consumeAndCreateNew()((uint64_t)v4);
        }
        unint64_t v60 = *((void *)v4 + 2);
        if (v12 >= v60)
        {
          __break(1u);
        }
        else
        {
          unint64_t v9 = (unint64_t)(v4 + 32);
          uint64_t v61 = (uint64_t)&v4[16 * v12 + 32];
          *(void *)uint64_t v61 = v59;
          *(unsigned char *)(v61 + 8) = 0;
          v50[10] = v4;
          unint64_t v59 = *((void *)v17 + 2);
          unint64_t v60 = *((void *)v17 + 3);
          unint64_t v12 = v59 + 1;
          if (v59 < v60 >> 1)
          {
LABEL_91:
            *((void *)v17 + 2) = v12;
            *(void *)&v17[8 * v59 + 32] = 0x1200000000000000;
            *unint64_t v50 = v17;
            unint64_t v11 = (char *)*((void *)v17 + 2);
            unint64_t v62 = *((void *)v17 + 3);
            unint64_t v12 = (unint64_t)(v11 + 1);
            if ((unint64_t)v11 >= v62 >> 1) {
              uint64_t v17 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v62 > 1), (int64_t)(v11 + 1), 1, v17, &demangling cache variable for type metadata for _ContiguousArrayStorage<Instruction>);
            }
            *((void *)v17 + 2) = v12;
            *(void *)&v17[8 * (void)v11 + 32] = 0x1C00000000000000;
            *unint64_t v50 = v17;
            if (a1 < *((void *)v4 + 2))
            {
              unint64_t v63 = v9 + v8;
              *(void *)unint64_t v63 = *((void *)v17 + 2);
              *(unsigned char *)(v63 + 8) = 0;
              v50[10] = v4;
              unint64_t v4 = (char *)v73;
              goto LABEL_117;
            }
            __break(1u);
            goto LABEL_159;
          }
        }
        uint64_t v17 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v60 > 1), v12, 1, v17, &demangling cache variable for type metadata for _ContiguousArrayStorage<Instruction>);
        goto LABEL_91;
      }
      uint64_t v17 = *(char **)v4;
      if (*(void *)(*(void *)v4 + 16))
      {
        uint64_t result = swift_isUniquelyReferenced_nonNull_native();
        if (result)
        {
          uint64_t v26 = *((void *)v17 + 2);
          if (v26) {
            goto LABEL_74;
          }
          goto LABEL_98;
        }
      }
      else
      {
        __break(1u);
      }
      uint64_t result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew()((uint64_t)v17);
      uint64_t v17 = (char *)result;
      uint64_t v26 = *(void *)(result + 16);
      if (v26) {
        goto LABEL_74;
      }
LABEL_98:
      __break(1u);
LABEL_99:
      uint64_t v17 = *(char **)v4;
      if (!*(void *)(*(void *)v4 + 16)) {
        goto LABEL_147;
      }
      uint64_t result = swift_isUniquelyReferenced_nonNull_native();
      if ((result & 1) == 0) {
        goto LABEL_148;
      }
      uint64_t v26 = *((void *)v17 + 2);
      if (v26) {
        goto LABEL_74;
      }
      goto LABEL_102;
    }
LABEL_103:
    if (result == *MEMORY[0x263F8FCD0]
      || result == *MEMORY[0x263F8FC98]
      || result == *MEMORY[0x263F8FC68]
      || result == *MEMORY[0x263F8FCA8])
    {
      goto LABEL_112;
    }
    uint64_t v64 = v71;
    Compiler.ByteCodeGen.emitNode(_:)(v72);
    uint64_t v13 = v64;
    if (v64)
    {
      unint64_t v65 = *(void (**)(char *, uint64_t))(v9 + 8);
      v9 += 8;
      v65(v11, v8);
      uint64_t v17 = *(char **)v4;
      if (*(void *)(*(void *)v4 + 16))
      {
        uint64_t result = swift_isUniquelyReferenced_nonNull_native();
        if (result)
        {
          uint64_t v26 = *((void *)v17 + 2);
          if (v26) {
            goto LABEL_74;
          }
LABEL_111:
          __break(1u);
LABEL_112:
          type metadata accessor for Unreachable();
          lazy protocol witness table accessor for type AST.Quantification.Kind and conformance AST.Quantification.Kind(&lazy protocol witness table cache variable for type Unreachable and conformance Unreachable, MEMORY[0x263F8F850]);
          uint64_t v13 = swift_allocError();
          MEMORY[0x21050E690](0x6572203A4F444F54, 0xEC0000006E6F7361, "/Library/Caches/com.apple.xbs/Sources/swiftlang_overlay_Platform_Device/swift-experimental-string-processing/Sources/_StringProcessing/ByteCodeGen.swift", 152, 2, 449);
          swift_willThrow();
          uint64_t v17 = *(char **)v4;
          if (*(void *)(*(void *)v4 + 16))
          {
            uint64_t result = swift_isUniquelyReferenced_nonNull_native();
            if (result)
            {
              uint64_t v26 = *((void *)v17 + 2);
              if (v26) {
                goto LABEL_74;
              }
LABEL_115:
              __break(1u);
              goto LABEL_116;
            }
          }
          else
          {
            __break(1u);
          }
          uint64_t result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew()((uint64_t)v17);
          uint64_t v17 = (char *)result;
          uint64_t v26 = *(void *)(result + 16);
          if (v26) {
            goto LABEL_74;
          }
          goto LABEL_115;
        }
LABEL_160:
        uint64_t result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew()((uint64_t)v17);
        uint64_t v17 = (char *)result;
        uint64_t v26 = *(void *)(result + 16);
        if (v26) {
          goto LABEL_74;
        }
        goto LABEL_111;
      }
LABEL_159:
      __break(1u);
      goto LABEL_160;
    }
LABEL_116:
    Swift::String_optional v66 = *(void (**)(char *, uint64_t))(v9 + 8);
    v9 += 8;
    v66(v11, v8);
LABEL_117:
    uint64_t v17 = *(char **)v4;
    if (!*(void *)(*(void *)v4 + 16)) {
      goto LABEL_139;
    }
    uint64_t result = swift_isUniquelyReferenced_nonNull_native();
    if (result)
    {
      uint64_t v26 = *((void *)v17 + 2);
      if (v26) {
        goto LABEL_74;
      }
      goto LABEL_120;
    }
LABEL_140:
    uint64_t result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew()((uint64_t)v17);
    uint64_t v17 = (char *)result;
    uint64_t v26 = *(void *)(result + 16);
    if (v26) {
      goto LABEL_74;
    }
LABEL_120:
    __break(1u);
  }
  (*(void (**)(char *, unint64_t, uint64_t))(v9 + 16))(v11, a1, v8);
  LODWORD(result) = (*(uint64_t (**)(char *, uint64_t))(v9 + 88))(v11, v8);
  if (result != *MEMORY[0x263F8FC78] && result != *MEMORY[0x263F8FC88])
  {
    if (result != *MEMORY[0x263F8FCC0]) {
      goto LABEL_47;
    }
    (*(void (**)(char *, uint64_t))(v9 + 96))(v11, v8);
    a1 = v69;
    unint64_t v16 = v68;
    (*(void (**)(uint64_t, char *, uint64_t))(v69 + 32))(v70, v11, v68);
    uint64_t v21 = type metadata accessor for Compiler.ByteCodeGen(0);
    if ((v4[*(int *)(v21 + 24)] & 1) == 0)
    {
      unint64_t v9 = (unint64_t)&v4[*(int *)(v21 + 20)];
      uint64_t v13 = *(int *)(type metadata accessor for MEProgram.Builder(0) + 84);
      uint64_t v8 = *(void *)(v9 + v13);
      uint64_t v17 = *(char **)(v8 + 16);
      if (swift_isUniquelyReferenced_nonNull_native())
      {
        if (!v17) {
          goto LABEL_137;
        }
      }
      else
      {
        uint64_t v8 = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew()(v8);
        if (!v17)
        {
LABEL_137:
          __break(1u);
LABEL_138:
          __break(1u);
LABEL_139:
          __break(1u);
          goto LABEL_140;
        }
      }
      if ((unint64_t)v17 > *(void *)(v8 + 16)) {
        goto LABEL_138;
      }
      uint64_t v17 = (char *)(v8 + 4 * (void)(v17 - 1) + 32);
      MatchingOptions.Representation.apply(_:)(v70);
      *(void *)(v9 + v13) = v8;
    }
    unint64_t v22 = *(void *)(v12 + 16);
    char v23 = swift_isUniquelyReferenced_nonNull_native();
    *(void *)unint64_t v4 = v12;
    if (v23)
    {
      if (!v22) {
        goto LABEL_130;
      }
    }
    else
    {
      unint64_t v12 = (unint64_t)specialized _ArrayBuffer._consumeAndCreateNew()(v12);
      *(void *)unint64_t v4 = v12;
      if (!v22)
      {
LABEL_130:
        __break(1u);
LABEL_131:
        __break(1u);
LABEL_132:
        uint64_t v17 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, a1 + 1, 1, v17);
        goto LABEL_30;
      }
    }
    if (v22 > *(void *)(v12 + 16)) {
      goto LABEL_131;
    }
    unint64_t v9 = v70;
    MatchingOptions.Representation.apply(_:)(v70);
    uint64_t v24 = *(void (**)(unint64_t, unint64_t))(a1 + 8);
    a1 += 8;
    v24(v9, v16);
    uint64_t v25 = v71;
    Compiler.ByteCodeGen.emitNode(_:)(v72);
    uint64_t v13 = v25;
    if (!v25) {
      goto LABEL_117;
    }
    uint64_t v17 = *(char **)v4;
    if (*(void *)(*(void *)v4 + 16))
    {
      uint64_t result = swift_isUniquelyReferenced_nonNull_native();
      if (result)
      {
        uint64_t v26 = *((void *)v17 + 2);
        if (v26) {
          goto LABEL_74;
        }
LABEL_27:
        __break(1u);
        goto LABEL_28;
      }
    }
    else
    {
      __break(1u);
    }
    uint64_t result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew()((uint64_t)v17);
    uint64_t v17 = (char *)result;
    uint64_t v26 = *(void *)(result + 16);
    if (v26) {
      goto LABEL_74;
    }
    goto LABEL_27;
  }
  (*(void (**)(char *, uint64_t))(v9 + 8))(v11, v8);
LABEL_48:
  type metadata accessor for Unreachable();
  lazy protocol witness table accessor for type AST.Quantification.Kind and conformance AST.Quantification.Kind(&lazy protocol witness table cache variable for type Unreachable and conformance Unreachable, MEMORY[0x263F8F850]);
  swift_allocError();
  MEMORY[0x21050E690](0xD000000000000023, 0x8000000209FB63B0, "/Library/Caches/com.apple.xbs/Sources/swiftlang_overlay_Platform_Device/swift-experimental-string-processing/Sources/_StringProcessing/ByteCodeGen.swift", 152, 2, 452);
  swift_willThrow();
  uint64_t v17 = *(char **)v4;
  if (!*(void *)(*(void *)v4 + 16)) {
    goto LABEL_126;
  }
  uint64_t result = swift_isUniquelyReferenced_nonNull_native();
  if ((result & 1) == 0) {
    goto LABEL_127;
  }
  uint64_t v26 = *((void *)v17 + 2);
  if (!v26) {
    goto LABEL_51;
  }
LABEL_74:
  *((void *)v17 + 2) = v26 - 1;
  *(void *)unint64_t v4 = v17;
  return result;
}

Swift::Void __swiftcall MatchingOptions.beginScope()()
{
  uint64_t v2 = *v0;
  uint64_t v3 = *((void *)*v0 + 2);
  if (v3)
  {
    int v1 = *(_DWORD *)&v2[4 * v3 + 28];
    if (swift_isUniquelyReferenced_nonNull_native()) {
      goto LABEL_3;
    }
  }
  else
  {
    __break(1u);
  }
  uint64_t v2 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v3 + 1, 1, v2);
LABEL_3:
  unint64_t v5 = *((void *)v2 + 2);
  unint64_t v4 = *((void *)v2 + 3);
  if (v5 >= v4 >> 1) {
    uint64_t v2 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v4 > 1), v5 + 1, 1, v2);
  }
  *((void *)v2 + 2) = v5 + 1;
  *(_DWORD *)&v2[4 * v5 + 32] = v1;
  *uint64_t v0 = v2;
}

uint64_t Compiler.ByteCodeGen.emitQuantification(_:_:_:)(uint64_t a1, uint64_t a2, unint64_t a3)
{
  unint64_t v99 = a3;
  uint64_t v5 = type metadata accessor for DSLTree._AST.QuantificationKind(0);
  MEMORY[0x270FA5388](v5 - 8);
  uint64_t v7 = &v81[-((v6 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v8 = type metadata accessor for DSLTree.QuantificationKind(0);
  MEMORY[0x270FA5388](v8);
  uint64_t v10 = &v81[-((v9 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v11 = type metadata accessor for AST.Quantification.Kind();
  uint64_t v12 = *(void *)(v11 - 8);
  uint64_t v13 = MEMORY[0x270FA5388](v11);
  int v97 = &v81[-((v14 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v15 = MEMORY[0x270FA5388](v13);
  uint64_t v17 = (uint64_t)&v81[-v16];
  MEMORY[0x270FA5388](v15);
  unint64_t v19 = &v81[-v18];
  outlined init with copy of MEProgram(a2, (uint64_t)v10, type metadata accessor for DSLTree.QuantificationKind);
  int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  if (EnumCaseMultiPayload)
  {
    if (EnumCaseMultiPayload == 1)
    {
      outlined init with take of DSLTree.QuantificationKind((uint64_t)v10, (uint64_t)v7, type metadata accessor for DSLTree._AST.QuantificationKind);
      uint64_t v21 = (char *)v104;
      AST.Quantification.Kind.applying(_:)(*v104, (uint64_t)v19);
      outlined destroy of MEProgram((uint64_t)v7, type metadata accessor for DSLTree._AST.QuantificationKind);
    }
    else
    {
      uint64_t v21 = (char *)v104;
      MatchingOptions.defaultQuantificationKind.getter(*v104, (uint64_t)v19);
    }
  }
  else
  {
    outlined init with take of DSLTree.QuantificationKind((uint64_t)v10, (uint64_t)v7, type metadata accessor for DSLTree._AST.QuantificationKind);
    (*(void (**)(unsigned char *, unsigned char *, uint64_t))(v12 + 32))(v19, v7, v11);
    uint64_t v21 = (char *)v104;
  }
  uint64_t v22 = a1;
  uint64_t v23 = AST.Quantification.Amount.bounds.getter();
  if (v26)
  {
    (*(void (**)(unsigned char *, uint64_t))(v12 + 8))(v19, v11);
    type metadata accessor for Unreachable();
    lazy protocol witness table accessor for type AST.Quantification.Kind and conformance AST.Quantification.Kind(&lazy protocol witness table cache variable for type Unreachable and conformance Unreachable, MEMORY[0x263F8F850]);
    swift_allocError();
    MEMORY[0x21050E690](0xD000000000000017, 0x8000000209FB6400, "/Library/Caches/com.apple.xbs/Sources/swiftlang_overlay_Platform_Device/swift-experimental-string-processing/Sources/_StringProcessing/ByteCodeGen.swift", 152, 2, 487);
    return swift_willThrow();
  }
  uint64_t v27 = v23;
  uint64_t v28 = v24;
  int v29 = v25 & 1;
  if ((v25 & 1) == 0)
  {
    if (!v24) {
      return (*(uint64_t (**)(unsigned char *, uint64_t))(v12 + 8))(v19, v11);
    }
    uint64_t v28 = v24 - v23;
    if (v24 < v23) {
      return (*(uint64_t (**)(unsigned char *, uint64_t))(v12 + 8))(v19, v11);
    }
    if (__OFSUB__(v24, v23))
    {
      __break(1u);
      goto LABEL_106;
    }
  }
  if (Compiler.ByteCodeGen.tryEmitFastQuant(_:_:_:_:)(v99, (uint64_t)v19, v23, v28, v29)) {
    return (*(uint64_t (**)(unsigned char *, uint64_t))(v12 + 8))(v19, v11);
  }
  uint64_t v93 = v28;
  uint64_t v90 = type metadata accessor for Compiler.ByteCodeGen(0);
  uint64_t v28 = (uint64_t)&v21[*(int *)(v90 + 20)];
  unint64_t v31 = *(char **)(v28 + 80);
  unint64_t v92 = *((void *)v31 + 2);
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  int v96 = v29;
  if ((isUniquelyReferenced_nonNull_native & 1) == 0) {
    unint64_t v31 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v92 + 1, 1, v31);
  }
  unint64_t v34 = *((void *)v31 + 2);
  unint64_t v33 = *((void *)v31 + 3);
  if (v34 >= v33 >> 1) {
    unint64_t v31 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v33 > 1), v34 + 1, 1, v31);
  }
  *((void *)v31 + 2) = v34 + 1;
  unint64_t v35 = &v31[16 * v34];
  *((void *)v35 + 4) = 0;
  v35[40] = 1;
  *(void *)(v28 + 80) = v31;
  unint64_t v37 = *((void *)v31 + 2);
  unint64_t v36 = *((void *)v31 + 3);
  unint64_t v38 = v37 + 1;
  unint64_t v95 = v37;
  if (v37 >= v36 >> 1) {
    unint64_t v31 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v36 > 1), v37 + 1, 1, v31);
  }
  *((void *)v31 + 2) = v38;
  uint64_t v89 = 16 * v95;
  unint64_t v39 = &v31[16 * v95];
  *((void *)v39 + 4) = 0;
  unsigned char v39[40] = 1;
  *(void *)(v28 + 80) = v31;
  unint64_t v41 = *((void *)v31 + 2);
  unint64_t v40 = *((void *)v31 + 3);
  if (v41 >= v40 >> 1) {
    unint64_t v31 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v40 > 1), v41 + 1, 1, v31);
  }
  *((void *)v31 + 2) = v41 + 1;
  unint64_t v91 = v41;
  uint64_t v84 = 16 * v41;
  uint64_t v42 = &v31[16 * v41];
  *((void *)v42 + 4) = 0;
  v42[40] = 1;
  *(void *)(v28 + 80) = v31;
  unint64_t v44 = *((void *)v31 + 2);
  unint64_t v43 = *((void *)v31 + 3);
  unint64_t v45 = v44 + 1;
  unint64_t v94 = v44;
  if (v44 >= v43 >> 1) {
    unint64_t v31 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v43 > 1), v44 + 1, 1, v31);
  }
  uint64_t v86 = 0;
  *((void *)v31 + 2) = v45;
  uint64_t v83 = 16 * v94;
  unint64_t v46 = &v31[16 * v94];
  *((void *)v46 + 4) = 0;
  v46[40] = 1;
  *(void *)(v28 + 80) = v31;
  if (v27 < 2) {
    goto LABEL_30;
  }
  uint64_t v47 = *(void *)(v28 + 96);
  if (__OFADD__(v47, 1)) {
    goto LABEL_100;
  }
  *(void *)(v28 + 96) = v47 + 1;
  unint64_t v31 = *(char **)v28;
  char v48 = swift_isUniquelyReferenced_nonNull_native();
  uint64_t v86 = v47;
  uint64_t v88 = v27 | (v47 << 16) | 0x100000000000000;
  if ((v48 & 1) == 0) {
    goto LABEL_102;
  }
  while (1)
  {
    unint64_t v50 = *((void *)v31 + 2);
    unint64_t v49 = *((void *)v31 + 3);
    if (v50 >= v49 >> 1) {
      unint64_t v31 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v49 > 1), v50 + 1, 1, v31, &demangling cache variable for type metadata for _ContiguousArrayStorage<Instruction>);
    }
    *((void *)v31 + 2) = v50 + 1;
    *(void *)&v31[8 * v50 + 32] = v88;
    *(void *)uint64_t v28 = v31;
LABEL_30:
    *(_DWORD *)&v85[8] = 0;
    int v51 = v96;
    *(void *)uint64_t v85 = v96 == 0;
    if (!v96 && v93 >= 1)
    {
      uint64_t v52 = *(void *)(v28 + 96);
      if (__OFADD__(v52, 1)) {
        goto LABEL_101;
      }
      *(void *)(v28 + 96) = v52 + 1;
      uint64_t v53 = v93 | (v52 << 16) | 0x100000000000000;
      char v54 = *(char **)v28;
      char v55 = swift_isUniquelyReferenced_nonNull_native();
      *(void *)&v85[4] = v52;
      uint64_t v88 = v53;
      if ((v55 & 1) == 0) {
        char v54 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *((void *)v54 + 2) + 1, 1, v54, &demangling cache variable for type metadata for _ContiguousArrayStorage<Instruction>);
      }
      unint64_t v57 = *((void *)v54 + 2);
      unint64_t v56 = *((void *)v54 + 3);
      if (v57 >= v56 >> 1) {
        char v54 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v56 > 1), v57 + 1, 1, v54, &demangling cache variable for type metadata for _ContiguousArrayStorage<Instruction>);
      }
      *((void *)v54 + 2) = v57 + 1;
      *(void *)&v54[8 * v57 + 32] = v88;
      *(void *)uint64_t v28 = v54;
      int v51 = v96;
    }
    unint64_t v58 = *(void (**)(uint64_t))(v12 + 104);
    int v82 = *MEMORY[0x263F8F948];
    v58(v17);
    lazy protocol witness table accessor for type AST.Quantification.Kind and conformance AST.Quantification.Kind(&lazy protocol witness table cache variable for type AST.Quantification.Kind and conformance AST.Quantification.Kind, MEMORY[0x263F8F960]);
    dispatch thunk of RawRepresentable.rawValue.getter();
    dispatch thunk of RawRepresentable.rawValue.getter();
    unint64_t v87 = *(void (**)(uint64_t, uint64_t))(v12 + 8);
    uint64_t v88 = v12 + 8;
    v87(v17, v11);
    if (v102 != v100) {
      goto LABEL_41;
    }
    if (v103 == v101)
    {
      swift_bridgeObjectRelease_n();
    }
    else
    {
LABEL_41:
      uint64_t v17 = _stringCompareWithSmolCheck(_:_:expecting:)();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      if ((v17 & 1) == 0) {
        goto LABEL_49;
      }
    }
    if (*(unsigned char *)(v28 + 136) == 1)
    {
      uint64_t v21 = *(char **)(v28 + 80);
      uint64_t v22 = *((void *)v21 + 2);
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
LABEL_106:
      }
        uint64_t v21 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v22 + 1, 1, v21);
      unint64_t v60 = *((void *)v21 + 2);
      unint64_t v59 = *((void *)v21 + 3);
      uint64_t v17 = v60 + 1;
      if (v60 >= v59 >> 1) {
        uint64_t v21 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v59 > 1), v60 + 1, 1, v21);
      }
      *((void *)v21 + 2) = v17;
      uint64_t v61 = &v21[16 * v60];
      *((void *)v61 + 4) = 0;
      v61[40] = 1;
      *(void *)(v28 + 80) = v21;
      *(void *)(v28 + 128) = v22;
      *(unsigned char *)(v28 + 136) = 0;
      int v51 = v96;
    }
    else
    {
      uint64_t v22 = *(void *)(v28 + 128);
    }
    MEProgram.Builder.buildSaveAddress(_:)(v22);
LABEL_49:
    unint64_t v62 = *(char **)(*(void *)v28 + 16);
    unint64_t v31 = *(char **)(v28 + 80);
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
      unint64_t v31 = specialized _ArrayBuffer._consumeAndCreateNew()((uint64_t)v31);
    }
    if (v92 >= *((void *)v31 + 2))
    {
      __break(1u);
LABEL_98:
      unint64_t v62 = specialized _ArrayBuffer._consumeAndCreateNew()((uint64_t)v62);
      goto LABEL_58;
    }
    unint64_t v63 = &v31[16 * v92];
    *((void *)v63 + 4) = v62;
    v63[40] = 0;
    *(void *)(v28 + 80) = v31;
    if (v27 != 1)
    {
      if (v27)
      {
        if (v27 < 2)
        {
          __break(1u);
          goto LABEL_112;
        }
        MEProgram.Builder.buildCondBranch(to:ifZeroElseDecrement:)(v91, v86);
      }
      else
      {
        MEProgram.Builder.buildBranch(to:)(v91);
      }
    }
    unint64_t v31 = *(char **)v28;
    uint64_t v17 = *(void *)(*(void *)v28 + 16);
    unint64_t v62 = *(char **)(v28 + 80);
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
      goto LABEL_98;
    }
LABEL_58:
    if (v95 < *((void *)v62 + 2)) {
      break;
    }
    __break(1u);
LABEL_100:
    __break(1u);
LABEL_101:
    __break(1u);
LABEL_102:
    unint64_t v31 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *((void *)v31 + 2) + 1, 1, v31, &demangling cache variable for type metadata for _ContiguousArrayStorage<Instruction>);
  }
  uint64_t v64 = &v62[v89];
  *((void *)v64 + 4) = v17;
  v64[40] = 0;
  *(void *)(v28 + 80) = v62;
  if ((*((unsigned char *)v104 + *(int *)(v90 + 28)) & 1) == 0)
  {
    int v65 = DSLTree.Node.guaranteesForwardProgress.getter(v99);
    if ((v65 | *(_DWORD *)v85))
    {
      uint64_t v66 = 0;
      int v67 = (v51 != 0) & ~v65;
      LODWORD(v89) = 1;
      goto LABEL_68;
    }
LABEL_63:
    uint64_t v66 = *(void *)(v28 + 120);
    if (__OFADD__(v66, 1))
    {
      __break(1u);
    }
    else
    {
      *(void *)(v28 + 120) = v66 + 1;
      char v68 = swift_isUniquelyReferenced_nonNull_native();
      uint64_t v90 = v66 | 0x200000000000000;
      if (v68)
      {
LABEL_65:
        unint64_t v70 = *((void *)v31 + 2);
        unint64_t v69 = *((void *)v31 + 3);
        if (v70 >= v69 >> 1) {
          unint64_t v31 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v69 > 1), v70 + 1, 1, v31, &demangling cache variable for type metadata for _ContiguousArrayStorage<Instruction>);
        }
        LODWORD(v89) = 0;
        *((void *)v31 + 2) = v70 + 1;
        *(void *)&v31[8 * v70 + 32] = v90;
        *(void *)uint64_t v28 = v31;
        int v51 = v96;
        int v67 = v96;
LABEL_68:
        uint64_t v71 = v98;
        Compiler.ByteCodeGen.emitNode(_:)(v99);
        if (!v71)
        {
          if (!v67) {
            goto LABEL_74;
          }
          if ((v89 & 1) == 0)
          {
            MEProgram.Builder.buildCondBranch(to:ifSamePositionAs:)(v94, v66);
            goto LABEL_74;
          }
LABEL_112:
          __break(1u);
LABEL_113:
          __break(1u);
LABEL_114:
          uint64_t result = _assertionFailure(_:_:file:line:flags:)();
          __break(1u);
          return result;
        }
        return ((uint64_t (*)(unsigned char *, uint64_t))v87)(v19, v11);
      }
    }
    unint64_t v31 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *((void *)v31 + 2) + 1, 1, v31, &demangling cache variable for type metadata for _ContiguousArrayStorage<Instruction>);
    goto LABEL_65;
  }
  if (v51) {
    goto LABEL_63;
  }
  uint64_t v72 = v98;
  Compiler.ByteCodeGen.emitNode(_:)(v99);
  if (v72) {
    return ((uint64_t (*)(unsigned char *, uint64_t))v87)(v19, v11);
  }
LABEL_74:
  if (v27 >= 2) {
    MEProgram.Builder.buildBranch(to:)(v92);
  }
  uint64_t v73 = *(void *)(*(void *)v28 + 16);
  unint64_t v74 = *(char **)(v28 + 80);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
    unint64_t v74 = specialized _ArrayBuffer._consumeAndCreateNew()((uint64_t)v74);
  }
  if (v91 >= *((void *)v74 + 2))
  {
    __break(1u);
    goto LABEL_108;
  }
  unint64_t v75 = &v74[v84];
  *((void *)v75 + 4) = v73;
  v75[40] = 0;
  *(void *)(v28 + 80) = v74;
  if (!v51)
  {
    if (v93)
    {
      if (v93 < 1) {
        goto LABEL_113;
      }
      MEProgram.Builder.buildCondBranch(to:ifZeroElseDecrement:)(v94, *(uint64_t *)&v85[4]);
    }
    else
    {
      MEProgram.Builder.buildBranch(to:)(v94);
    }
  }
  uint64_t v76 = v97;
  (*(void (**)(unsigned char *, unsigned char *, uint64_t))(v12 + 16))(v97, v19, v11);
  int v77 = (*(uint64_t (**)(unsigned char *, uint64_t))(v12 + 88))(v76, v11);
  if (v77 != *MEMORY[0x263F8F950])
  {
    if (v77 == *MEMORY[0x263F8F958])
    {
      v87((uint64_t)v19, v11);
      MEProgram.Builder.buildSave(_:)(v95);
      goto LABEL_94;
    }
    if (v77 == v82)
    {
      v87((uint64_t)v19, v11);
      unint64_t v74 = *(char **)v28;
      if (swift_isUniquelyReferenced_nonNull_native()) {
        goto LABEL_90;
      }
      goto LABEL_110;
    }
    goto LABEL_114;
  }
  v87((uint64_t)v19, v11);
  while (1)
  {
    MEProgram.Builder.buildSplit(to:saving:)(v95, v94);
LABEL_94:
    uint64_t v12 = *(void *)(*(void *)v28 + 16);
    unint64_t v74 = *(char **)(v28 + 80);
    uint64_t result = swift_isUniquelyReferenced_nonNull_native();
    if ((result & 1) == 0)
    {
LABEL_108:
      uint64_t result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew()((uint64_t)v74);
      unint64_t v74 = (char *)result;
    }
    if (v94 < *((void *)v74 + 2)) {
      break;
    }
    __break(1u);
LABEL_110:
    unint64_t v74 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *((void *)v74 + 2) + 1, 1, v74, &demangling cache variable for type metadata for _ContiguousArrayStorage<Instruction>);
LABEL_90:
    unint64_t v79 = *((void *)v74 + 2);
    unint64_t v78 = *((void *)v74 + 3);
    if (v79 >= v78 >> 1) {
      unint64_t v74 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v78 > 1), v79 + 1, 1, v74, &demangling cache variable for type metadata for _ContiguousArrayStorage<Instruction>);
    }
    *((void *)v74 + 2) = v79 + 1;
    *(void *)&v74[8 * v79 + 32] = 0x1200000000000000;
    *(void *)uint64_t v28 = v74;
  }
  unint64_t v80 = &v74[v83];
  *((void *)v80 + 4) = v12;
  v80[40] = 0;
  *(void *)(v28 + 80) = v74;
  return result;
}

uint64_t AST.Quantification.Kind.applying(_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v5 = type metadata accessor for AST.Quantification.Kind();
  uint64_t v6 = *(void *)(v5 - 8);
  uint64_t v7 = MEMORY[0x270FA5388](v5);
  uint64_t v9 = (char *)&v27 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = MEMORY[0x270FA5388](v7);
  uint64_t v12 = (char *)&v27 - v11;
  uint64_t result = MEMORY[0x270FA5388](v10);
  uint64_t v15 = (char *)&v27 - v14;
  uint64_t v16 = *(void *)(a1 + 16);
  if (!v16)
  {
    __break(1u);
    return result;
  }
  uint64_t v29 = v2;
  uint64_t v30 = a2;
  int v17 = *(_DWORD *)(a1 + 4 * v16 + 28);
  uint64_t v18 = *(void (**)(char *, uint64_t, uint64_t))(v6 + 16);
  v18((char *)&v27 - v14, v2, v5);
  if ((v17 & 0x20) == 0)
  {
    (*(void (**)(char *, uint64_t))(v6 + 8))(v15, v5);
    return ((uint64_t (*)(uint64_t, uint64_t, uint64_t))v18)(v30, v29, v5);
  }
  uint64_t v19 = *MEMORY[0x263F8F948];
  uint64_t v28 = *(void (**)(char *, uint64_t, uint64_t))(v6 + 104);
  v28(v12, v19, v5);
  lazy protocol witness table accessor for type AST.Quantification.Kind and conformance AST.Quantification.Kind(&lazy protocol witness table cache variable for type AST.Quantification.Kind and conformance AST.Quantification.Kind, MEMORY[0x263F8F960]);
  char v20 = dispatch thunk of static Equatable.== infix(_:_:)();
  uint64_t v21 = *(void (**)(char *, uint64_t))(v6 + 8);
  v21(v12, v5);
  v21(v15, v5);
  if (v20) {
    return ((uint64_t (*)(uint64_t, uint64_t, uint64_t))v18)(v30, v29, v5);
  }
  uint64_t v22 = *MEMORY[0x263F8F950];
  uint64_t v23 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))v28;
  v28(v9, v22, v5);
  lazy protocol witness table accessor for type AST.Quantification.Kind and conformance AST.Quantification.Kind(&lazy protocol witness table cache variable for type AST.Quantification.Kind and conformance AST.Quantification.Kind, MEMORY[0x263F8F960]);
  dispatch thunk of RawRepresentable.rawValue.getter();
  dispatch thunk of RawRepresentable.rawValue.getter();
  v21(v9, v5);
  if (v33 == v31 && v34 == v32)
  {
    swift_bridgeObjectRelease_n();
    uint64_t v24 = v30;
  }
  else
  {
    char v25 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    uint64_t v24 = v30;
    if ((v25 & 1) == 0)
    {
      uint64_t v26 = v22;
      return v23(v24, v26, v5);
    }
  }
  uint64_t v26 = *MEMORY[0x263F8F958];
  return v23(v24, v26, v5);
}

uint64_t MatchingOptions.defaultQuantificationKind.getter@<X0>(uint64_t result@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3 = *(void *)(result + 16);
  if (v3)
  {
    int v4 = *(_DWORD *)(result + 4 * v3 + 28);
    if ((v4 & 0x80000) != 0)
    {
      uint64_t v8 = *MEMORY[0x263F8F948];
      uint64_t v9 = type metadata accessor for AST.Quantification.Kind();
      uint64_t v6 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v9 - 8) + 104);
      uint64_t v5 = v9;
      uint64_t v10 = a2;
      uint64_t v11 = v8;
    }
    else
    {
      uint64_t v5 = type metadata accessor for AST.Quantification.Kind();
      uint64_t v6 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 104);
      if ((v4 & 0x20) != 0) {
        uint64_t v7 = (unsigned int *)MEMORY[0x263F8F958];
      }
      else {
        uint64_t v7 = (unsigned int *)MEMORY[0x263F8F950];
      }
      uint64_t v11 = *v7;
      uint64_t v10 = a2;
    }
    return v6(v10, v11, v5);
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t Compiler.ByteCodeGen.tryEmitFastQuant(_:_:_:_:)(unint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, char a5)
{
  uint64_t v78 = a3;
  uint64_t v79 = a2;
  unint64_t v76 = a1;
  uint64_t v8 = type metadata accessor for AST.Group.Kind();
  uint64_t v71 = *(void *)(v8 - 8);
  uint64_t v72 = v8;
  MEMORY[0x270FA5388](v8);
  unint64_t v70 = (char *)&v68 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = type metadata accessor for DSLTree._AST.GroupKind(0);
  MEMORY[0x270FA5388](v10 - 8);
  uint64_t v69 = (uint64_t)&v68 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = type metadata accessor for DSLTree.Atom(0);
  MEMORY[0x270FA5388](v12);
  uint64_t v14 = (uint64_t *)((char *)&v68 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v15 = type metadata accessor for AST.Quantification.Kind();
  uint64_t v16 = *(void *)(v15 - 8);
  uint64_t v17 = MEMORY[0x270FA5388](v15);
  uint64_t v19 = (uint64_t)&v68 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v20 = MEMORY[0x270FA5388](v17);
  uint64_t v22 = (char *)&v68 - v21;
  MEMORY[0x270FA5388](v20);
  uint64_t v24 = (uint64_t)&v68 - v23;
  uint64_t v25 = *(void *)v5;
  uint64_t v26 = *(void *)(*(void *)v5 + 16);
  if (!v26)
  {
    __break(1u);
LABEL_48:
    uint64_t v12 = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(void *)(v12 + 16) + 1, 1, (char *)v12, &demangling cache variable for type metadata for _ContiguousArrayStorage<Instruction>);
    goto LABEL_40;
  }
  unsigned int v77 = a5 & 1;
  int v73 = *(_DWORD *)(v25 + 4 * v26 + 28);
  int v27 = 0;
  char v28 = *(unsigned char *)(v5 + *(int *)(type metadata accessor for Compiler.ByteCodeGen(0) + 28));
  unint64_t v75 = (uint64_t *)v5;
  if ((v28 & 1) == 0 && v78 <= 255)
  {
    if (v77) {
      BOOL v29 = 1;
    }
    else {
      BOOL v29 = a4 < 256;
    }
    int v27 = v29;
  }
  uint64_t v74 = a4;
  uint64_t v30 = *(void (**)(uint64_t, uint64_t, uint64_t))(v16 + 16);
  v30(v24, v79, v15);
  if (v27)
  {
    char v68 = (void (*)(char *, uint64_t, uint64_t))v30;
    (*(void (**)(char *, void, uint64_t))(v16 + 104))(v22, *MEMORY[0x263F8F958], v15);
    lazy protocol witness table accessor for type AST.Quantification.Kind and conformance AST.Quantification.Kind(&lazy protocol witness table cache variable for type AST.Quantification.Kind and conformance AST.Quantification.Kind, MEMORY[0x263F8F960]);
    char v31 = dispatch thunk of static Equatable.== infix(_:_:)();
    uint64_t v5 = *(void *)(v16 + 8);
    ((void (*)(char *, uint64_t))v5)(v22, v15);
    ((void (*)(uint64_t, uint64_t))v5)(v24, v15);
    char v32 = 0;
    if (v31) {
      return v32 & 1;
    }
    switch((v76 >> 59) & 0x1E | (v76 >> 2) & 1)
    {
      case 3uLL:
        uint64_t v33 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (DSLTree._AST.GroupKind, DSLTree.Node));
        uint64_t v34 = swift_projectBox();
        uint64_t v35 = *(void *)(v34 + *(int *)(v33 + 48));
        uint64_t v36 = v69;
        outlined init with copy of MEProgram(v34, v69, type metadata accessor for DSLTree._AST.GroupKind);
        unint64_t v38 = v70;
        uint64_t v37 = v71;
        uint64_t v39 = v72;
        (*(void (**)(char *, void, uint64_t))(v71 + 104))(v70, *MEMORY[0x263F8FC70], v72);
        LOBYTE(v33) = MEMORY[0x21050ECA0](v36, v38);
        (*(void (**)(char *, uint64_t))(v37 + 8))(v38, v39);
        outlined destroy of MEProgram(v36, type metadata accessor for DSLTree._AST.GroupKind);
        if ((v33 & 1) == 0) {
          goto LABEL_16;
        }
        uint64_t v40 = v35;
LABEL_26:
        char v32 = Compiler.ByteCodeGen.tryEmitFastQuant(_:_:_:_:)(v40, v79, v78, v74, v77);
        return v32 & 1;
      case 7uLL:
        char v42 = *(unsigned char *)((v76 & 0xFFFFFFFFFFFFFFBLL) + 0x18);
        uint64_t v80 = *(void *)((v76 & 0xFFFFFFFFFFFFFFBLL) + 0x10);
        char v81 = v42;
        char v43 = DSLTree.CustomCharacterClass.asAsciiBitset(_:)(*v75);
        if (v43 == 2) {
          goto LABEL_16;
        }
        uint64_t v46 = v44;
        uint64_t v47 = v45;
        BOOL v48 = (v73 & 0x10000) == 0;
        char v49 = v43 & 1;
        type metadata accessor for Compiler.ByteCodeGen(0);
        MEProgram.Builder.buildQuantify(bitset:_:_:_:isScalarSemantics:)(v49, v46, v47, v79, v78, v74, v77, v48);
        char v32 = 1;
        return v32 & 1;
      case 8uLL:
        uint64_t v50 = swift_projectBox();
        outlined init with copy of MEProgram(v50, (uint64_t)v14, type metadata accessor for DSLTree.Atom);
        switch(swift_getEnumCaseMultiPayload())
        {
          case 0u:
            if (*v14 == 2573 && v14[1] == 0xE200000000000000
              || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
            {
              swift_bridgeObjectRelease();
              goto LABEL_16;
            }
            uint64_t v12 = Character.asciiValue.getter();
            swift_bridgeObjectRelease();
            if ((v12 & 0x100) != 0) {
              goto LABEL_16;
            }
            char v67 = (v73 & 0x10000) == 0;
            uint64_t v19 = *(int *)(type metadata accessor for Compiler.ByteCodeGen(0) + 20);
            v68(v22, v79, v15);
            uint64_t v24 = specialized static QuantifyPayload.packInfoValues(_:_:_:_:isScalarSemantics:)((uint64_t)v22, v78, v74, v77, 1, v67);
            ((void (*)(char *, uint64_t))v5)(v22, v15);
            uint64_t v5 = v24 + v12;
            if (__CFADD__(v24, v12)) {
              goto LABEL_51;
            }
            uint64_t v24 = 0x1500000000000000;
            uint64_t v14 = v75;
            uint64_t v12 = *(uint64_t *)((char *)v75 + v19);
            if (swift_isUniquelyReferenced_nonNull_native()) {
              goto LABEL_46;
            }
            goto LABEL_52;
          case 2u:
            char v51 = (v73 & 0x10000) == 0;
            char v82 = *(unsigned char *)v14;
            int v52 = DSLTree.Atom.CharacterClass.asRuntimeModel(_:)(*v75);
            type metadata accessor for Compiler.ByteCodeGen(0);
            MEProgram.Builder.buildQuantify(model:_:_:_:isScalarSemantics:)(v52 & 0x101FF | (((v52 & 0xFF000000) != 0) << 24), v79, v78, v74, v77, v51);
            char v32 = 1;
            return v32 & 1;
          case 8u:
            char v53 = (v73 & 0x10000) == 0;
            uint64_t v24 = *(int *)(type metadata accessor for Compiler.ByteCodeGen(0) + 20);
            v68(v22, v79, v15);
            uint64_t v54 = specialized static QuantifyPayload.packInfoValues(_:_:_:_:isScalarSemantics:)((uint64_t)v22, v78, v74, v77, 2, v53);
            ((void (*)(char *, uint64_t))v5)(v22, v15);
            uint64_t v5 = v54 + 1;
            if (v54 != -1) {
              goto LABEL_39;
            }
            __break(1u);
LABEL_31:
            char v55 = (v73 & 0x10000) == 0;
            uint64_t v19 = *(int *)(type metadata accessor for Compiler.ByteCodeGen(0) + 20);
            v68(v22, v79, v15);
            uint64_t v56 = specialized static QuantifyPayload.packInfoValues(_:_:_:_:isScalarSemantics:)((uint64_t)v22, v78, v74, v77, 2, v55);
            ((void (*)(char *, uint64_t))v5)(v22, v15);
            uint64_t v14 = v75;
            uint64_t v12 = *(uint64_t *)((char *)v75 + v19);
            if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
              uint64_t v12 = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(void *)(v12 + 16) + 1, 1, (char *)v12, &demangling cache variable for type metadata for _ContiguousArrayStorage<Instruction>);
            }
            uint64_t v57 = v56 | 0x1500000000000000;
            goto LABEL_34;
          case 9u:
            goto LABEL_31;
          case 0xAu:
            uint64_t v60 = *(void *)(*v75 + 16);
            if (v60)
            {
              char v61 = (v73 & 0x10000) == 0;
              unint64_t v62 = *(unsigned int *)(*v75 + 4 * v60 + 28);
              uint64_t v24 = *(int *)(type metadata accessor for Compiler.ByteCodeGen(0) + 20);
              v68((char *)v19, v79, v15);
              uint64_t v63 = (v62 >> 4) & 1;
              uint64_t v12 = specialized static QuantifyPayload.packInfoValues(_:_:_:_:isScalarSemantics:)(v19, v78, v74, v77, 2, v61);
              ((void (*)(uint64_t, uint64_t))v5)(v19, v15);
              uint64_t v5 = v63 + v12;
              if (!__CFADD__(v63, v12))
              {
LABEL_39:
                uint64_t v19 = 0x1500000000000000;
                uint64_t v14 = v75;
                uint64_t v12 = *(uint64_t *)((char *)v75 + v24);
                if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
                  goto LABEL_48;
                }
LABEL_40:
                uint64_t v64 = v5 | v19;
                unint64_t v66 = *(void *)(v12 + 16);
                unint64_t v65 = *(void *)(v12 + 24);
                if (v66 >= v65 >> 1) {
                  uint64_t v12 = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v65 > 1), v66 + 1, 1, (char *)v12, &demangling cache variable for type metadata for _ContiguousArrayStorage<Instruction>);
                }
                *(void *)(v12 + 16) = v66 + 1;
                *(void *)(v12 + 8 * v66 + 32) = v64;
                *(uint64_t *)((char *)v14 + v24) = v12;
                char v32 = 1;
                return v32 & 1;
              }
            }
            else
            {
              __break(1u);
            }
            __break(1u);
LABEL_51:
            __break(1u);
LABEL_52:
            uint64_t v12 = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(void *)(v12 + 16) + 1, 1, (char *)v12, &demangling cache variable for type metadata for _ContiguousArrayStorage<Instruction>);
LABEL_46:
            uint64_t v57 = v5 | v24;
LABEL_34:
            unint64_t v59 = *(void *)(v12 + 16);
            unint64_t v58 = *(void *)(v12 + 24);
            if (v59 >= v58 >> 1) {
              uint64_t v12 = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v58 > 1), v59 + 1, 1, (char *)v12, &demangling cache variable for type metadata for _ContiguousArrayStorage<Instruction>);
            }
            *(void *)(v12 + 16) = v59 + 1;
            *(void *)(v12 + 8 * v59 + 32) = v57;
            *(uint64_t *)((char *)v14 + v19) = v12;
            char v32 = 1;
            return v32 & 1;
          default:
            outlined destroy of MEProgram((uint64_t)v14, type metadata accessor for DSLTree.Atom);
            goto LABEL_16;
        }
      case 0xCuLL:
        uint64_t v40 = *(void *)swift_projectBox();
        goto LABEL_26;
      default:
        return v32 & 1;
    }
  }
  (*(void (**)(uint64_t, uint64_t))(v16 + 8))(v24, v15);
LABEL_16:
  char v32 = 0;
  return v32 & 1;
}

uint64_t MEProgram.Builder.buildCondBranch(to:ifZeroElseDecrement:)(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = *(char **)v2;
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
    uint64_t v5 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *((void *)v5 + 2) + 1, 1, v5, &demangling cache variable for type metadata for _ContiguousArrayStorage<Instruction>);
  }
  unint64_t v7 = *((void *)v5 + 2);
  unint64_t v6 = *((void *)v5 + 3);
  if (v7 >= v6 >> 1) {
    uint64_t v5 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v6 > 1), v7 + 1, 1, v5, &demangling cache variable for type metadata for _ContiguousArrayStorage<Instruction>);
  }
  *((void *)v5 + 2) = v7 + 1;
  *(void *)&v5[8 * v7 + 32] = a2 | 0x500000000000000;
  *(void *)uint64_t v2 = v5;
  uint64_t v8 = *((void *)v5 + 2);
  uint64_t v9 = *(void *)(v2 + 88);
  uint64_t result = swift_isUniquelyReferenced_nonNull_native();
  if ((result & 1) == 0)
  {
    uint64_t result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(void *)(v9 + 16) + 1, 1, (char *)v9);
    uint64_t v9 = result;
  }
  unint64_t v12 = *(void *)(v9 + 16);
  unint64_t v11 = *(void *)(v9 + 24);
  if (v12 >= v11 >> 1)
  {
    uint64_t result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v11 > 1), v12 + 1, 1, (char *)v9);
    uint64_t v9 = result;
  }
  *(void *)(v9 + 16) = v12 + 1;
  unint64_t v13 = v9 + 32 * v12;
  *(void *)(v13 + 32) = v8 - 1;
  *(void *)(v13 + 40) = a1;
  *(void *)(v13 + 48) = 0;
  *(unsigned char *)(v13 + 56) = 1;
  *(void *)(v2 + 88) = v9;
  return result;
}

uint64_t DSLTree.Node.guaranteesForwardProgress.getter(unint64_t a1)
{
  while (2)
  {
    unint64_t v1 = a1;
    uint64_t v2 = type metadata accessor for DSLTree._AST.QuantificationAmount(0);
    MEMORY[0x270FA5388](v2 - 8);
    int v4 = (char *)&v45 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
    uint64_t v5 = type metadata accessor for DSLTree.Atom(0);
    MEMORY[0x270FA5388](v5);
    unint64_t v7 = (char *)&v45 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
    uint64_t v8 = type metadata accessor for AST.Group.Kind();
    uint64_t v9 = *(void *)(v8 - 8);
    MEMORY[0x270FA5388](v8);
    unint64_t v11 = (char *)&v45 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
    uint64_t v12 = type metadata accessor for DSLTree._AST.GroupKind(0);
    MEMORY[0x270FA5388](v12 - 8);
    uint64_t v14 = (char *)&v45 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
    char v15 = 0;
    switch((v1 >> 59) & 0x1E | (v1 >> 2) & 1)
    {
      case 0uLL:
        unint64_t v16 = 0;
        uint64_t v17 = *(void *)(v1 + 16);
        uint64_t v18 = *(void *)(v17 + 16);
        while (2)
        {
          char v15 = v18 == v16;
          if (v18 == v16) {
            return v15 & 1;
          }
          if (v16 < *(void *)(v17 + 16))
          {
            unint64_t v19 = v16 + 1;
            uint64_t v20 = *(void *)(v17 + 32 + 8 * v16);
            swift_retain();
            LOBYTE(v20) = DSLTree.Node.guaranteesForwardProgress.getter(v20);
            swift_release();
            unint64_t v16 = v19;
            if ((v20 & 1) == 0) {
              return v15 & 1;
            }
            continue;
          }
          break;
        }
        __break(1u);
        goto LABEL_44;
      case 1uLL:
        unint64_t v21 = 0;
        uint64_t v22 = *(void *)((v1 & 0xFFFFFFFFFFFFFFBLL) + 0x10);
        uint64_t v23 = *(void *)(v22 + 16);
        do
        {
          char v15 = v23 != v21;
          if (v23 == v21) {
            break;
          }
          if (v21 >= *(void *)(v22 + 16))
          {
LABEL_44:
            __break(1u);
            JUMPOUT(0x209F3C948);
          }
          unint64_t v24 = v21 + 1;
          uint64_t v25 = *(void *)(v22 + 32 + 8 * v21);
          swift_retain();
          LOBYTE(v25) = DSLTree.Node.guaranteesForwardProgress.getter(v25);
          swift_release();
          unint64_t v21 = v24;
        }
        while ((v25 & 1) == 0);
        return v15 & 1;
      case 2uLL:
        a1 = *(void *)((v1 & 0xFFFFFFFFFFFFFFBLL) + 0x30);
        goto LABEL_37;
      case 3uLL:
        uint64_t v26 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (DSLTree._AST.GroupKind, DSLTree.Node));
        uint64_t v27 = swift_projectBox();
        uint64_t v28 = *(void *)(v27 + *(int *)(v26 + 48));
        outlined init with copy of MEProgram(v27, (uint64_t)v14, type metadata accessor for DSLTree._AST.GroupKind);
        (*(void (**)(char *, char *, uint64_t))(v9 + 32))(v11, v14, v8);
        int v29 = (*(uint64_t (**)(char *, uint64_t))(v9 + 88))(v11, v8);
        if (v29 == *MEMORY[0x263F8FCD0]
          || v29 == *MEMORY[0x263F8FC98]
          || v29 == *MEMORY[0x263F8FC68]
          || v29 == *MEMORY[0x263F8FCA8])
        {
          goto LABEL_40;
        }
        char v15 = DSLTree.Node.guaranteesForwardProgress.getter(v28);
        (*(void (**)(char *, uint64_t))(v9 + 8))(v11, v8);
        return v15 & 1;
      case 6uLL:
        uint64_t v33 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (DSLTree._AST.QuantificationAmount, DSLTree.QuantificationKind, DSLTree.Node));
        uint64_t v34 = swift_projectBox();
        uint64_t v35 = *(void *)(v34 + *(int *)(v33 + 64));
        outlined init with copy of MEProgram(v34, (uint64_t)v4, type metadata accessor for DSLTree._AST.QuantificationAmount);
        uint64_t v36 = AST.Quantification.Amount.bounds.getter();
        char v38 = v37;
        outlined destroy of MEProgram((uint64_t)v4, type metadata accessor for DSLTree._AST.QuantificationAmount);
        char v15 = 0;
        if ((v38 & 1) == 0 && v36 >= 1) {
          char v15 = DSLTree.Node.guaranteesForwardProgress.getter(v35);
        }
        return v15 & 1;
      case 7uLL:
        char v39 = *(unsigned char *)((v1 & 0xFFFFFFFFFFFFFFBLL) + 0x18);
        uint64_t v45 = *(void *)((v1 & 0xFFFFFFFFFFFFFFBLL) + 0x10);
        char v46 = v39;
        char v15 = DSLTree.CustomCharacterClass.guaranteesForwardProgress.getter();
        return v15 & 1;
      case 8uLL:
        uint64_t v40 = swift_projectBox();
        outlined init with copy of MEProgram(v40, (uint64_t)v7, type metadata accessor for DSLTree.Atom);
        int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
        if (EnumCaseMultiPayload == 3)
        {
LABEL_40:
          char v15 = 0;
        }
        else if (EnumCaseMultiPayload == 4 || EnumCaseMultiPayload == 6)
        {
          outlined destroy of MEProgram((uint64_t)v7, type metadata accessor for DSLTree.Atom);
          char v15 = 0;
        }
        else
        {
          outlined destroy of MEProgram((uint64_t)v7, type metadata accessor for DSLTree.Atom);
          char v15 = 1;
        }
        return v15 & 1;
      case 0xAuLL:
        unint64_t v42 = *(void *)((v1 & 0xFFFFFFFFFFFFFFBLL) + 0x18);
        if ((v42 & 0x2000000000000000) != 0) {
          uint64_t v43 = HIBYTE(v42) & 0xF;
        }
        else {
          uint64_t v43 = *(void *)((v1 & 0xFFFFFFFFFFFFFFBLL) + 0x10) & 0xFFFFFFFFFFFFLL;
        }
        char v15 = v43 != 0;
        return v15 & 1;
      case 0xCuLL:
        a1 = *(void *)swift_projectBox();
LABEL_37:
        continue;
      default:
        return v15 & 1;
    }
  }
}

uint64_t MEProgram.Builder.buildCondBranch(to:ifSamePositionAs:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = a2 | 0x600000000000000;
  uint64_t v5 = *(char **)v2;
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
    uint64_t v5 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *((void *)v5 + 2) + 1, 1, v5, &demangling cache variable for type metadata for _ContiguousArrayStorage<Instruction>);
  }
  unint64_t v7 = *((void *)v5 + 2);
  unint64_t v6 = *((void *)v5 + 3);
  if (v7 >= v6 >> 1) {
    uint64_t v5 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v6 > 1), v7 + 1, 1, v5, &demangling cache variable for type metadata for _ContiguousArrayStorage<Instruction>);
  }
  *((void *)v5 + 2) = v7 + 1;
  *(void *)&v5[8 * v7 + 32] = v4;
  *(void *)uint64_t v2 = v5;
  uint64_t v8 = *((void *)v5 + 2);
  uint64_t v9 = *(void *)(v2 + 88);
  uint64_t result = swift_isUniquelyReferenced_nonNull_native();
  if ((result & 1) == 0)
  {
    uint64_t result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(void *)(v9 + 16) + 1, 1, (char *)v9);
    uint64_t v9 = result;
  }
  unint64_t v12 = *(void *)(v9 + 16);
  unint64_t v11 = *(void *)(v9 + 24);
  if (v12 >= v11 >> 1)
  {
    uint64_t result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v11 > 1), v12 + 1, 1, (char *)v9);
    uint64_t v9 = result;
  }
  *(void *)(v9 + 16) = v12 + 1;
  unint64_t v13 = v9 + 32 * v12;
  *(void *)(v13 + 32) = v8 - 1;
  *(void *)(v13 + 40) = a1;
  *(void *)(v13 + 48) = 0;
  *(unsigned char *)(v13 + 56) = 1;
  *(void *)(v2 + 88) = v9;
  return result;
}

uint64_t MEProgram.Builder.buildSplit(to:saving:)(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = *(char **)v2;
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
    uint64_t v5 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *((void *)v5 + 2) + 1, 1, v5, &demangling cache variable for type metadata for _ContiguousArrayStorage<Instruction>);
  }
  unint64_t v7 = *((void *)v5 + 2);
  unint64_t v6 = *((void *)v5 + 3);
  if (v7 >= v6 >> 1) {
    uint64_t v5 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v6 > 1), v7 + 1, 1, v5, &demangling cache variable for type metadata for _ContiguousArrayStorage<Instruction>);
  }
  *((void *)v5 + 2) = v7 + 1;
  *(void *)&v5[8 * v7 + 32] = 0x1400000000000000;
  *(void *)uint64_t v2 = v5;
  uint64_t v8 = *((void *)v5 + 2);
  uint64_t v9 = *(void *)(v2 + 88);
  uint64_t result = swift_isUniquelyReferenced_nonNull_native();
  if ((result & 1) == 0)
  {
    uint64_t result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(void *)(v9 + 16) + 1, 1, (char *)v9);
    uint64_t v9 = result;
  }
  unint64_t v12 = *(void *)(v9 + 16);
  unint64_t v11 = *(void *)(v9 + 24);
  if (v12 >= v11 >> 1)
  {
    uint64_t result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v11 > 1), v12 + 1, 1, (char *)v9);
    uint64_t v9 = result;
  }
  *(void *)(v9 + 16) = v12 + 1;
  unint64_t v13 = v9 + 32 * v12;
  *(void *)(v13 + 32) = v8 - 1;
  *(void *)(v13 + 40) = a1;
  *(void *)(v13 + 48) = a2;
  *(unsigned char *)(v13 + 56) = 0;
  *(void *)(v2 + 88) = v9;
  return result;
}

uint64_t DSLTree.CustomCharacterClass.asAsciiBitset(_:)(uint64_t a1)
{
  uint64_t v20 = a1;
  uint64_t v2 = type metadata accessor for DSLTree.CustomCharacterClass.Member(0);
  uint64_t v3 = *(void *)(v2 - 8);
  uint64_t result = MEMORY[0x270FA5388](v2 - 8);
  unint64_t v6 = (char *)&v18 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = *(void *)v1;
  unint64_t v8 = v1[8];
  uint64_t v19 = *(void *)(*(void *)v1 + 16);
  if (v19)
  {
    uint64_t v21 = 0;
    uint64_t v9 = 0;
    unint64_t v10 = 0;
    unint64_t v11 = v8;
    while (v10 < *(void *)(v7 + 16))
    {
      outlined init with copy of MEProgram(v7+ ((*(unsigned __int8 *)(v3 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80))+ *(void *)(v3 + 72) * v10, (uint64_t)v6, type metadata accessor for DSLTree.CustomCharacterClass.Member);
      unint64_t v12 = v8;
      unint64_t v13 = DSLTree.CustomCharacterClass.Member.asAsciiBitset(_:_:)(v20, v8);
      uint64_t v15 = v14;
      uint64_t v17 = v16;
      uint64_t result = outlined destroy of MEProgram((uint64_t)v6, type metadata accessor for DSLTree.CustomCharacterClass.Member);
      if (v13 == 2)
      {
        uint64_t v9 = v15;
        uint64_t v21 = v17;
      }
      else if (v11 == 2)
      {
        unint64_t v13 = v11;
      }
      else
      {
        if ((v11 ^ v13)) {
          goto LABEL_14;
        }
        unint64_t v13 = v11 & 1;
        v9 |= v15;
        v21 |= v17;
      }
      ++v10;
      unint64_t v11 = v13;
      unint64_t v8 = v12;
      if (v19 == v10) {
        return v13;
      }
    }
    __break(1u);
LABEL_14:
    __break(1u);
  }
  else
  {
    uint64_t v21 = 0;
    return v8;
  }
  return result;
}

uint64_t MEProgram.Builder.buildQuantify(bitset:_:_:_:isScalarSemantics:)(char a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, char a7, int a8)
{
  uint64_t v32 = a5;
  uint64_t v33 = a6;
  uint64_t v28 = a3;
  uint64_t v29 = a4;
  int v30 = a7 & 1;
  int v31 = a8;
  uint64_t v11 = type metadata accessor for AST.Quantification.Kind();
  uint64_t v12 = *(void *)(v11 - 8);
  MEMORY[0x270FA5388](v11);
  uint64_t v14 = (char *)&v27 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v15 = (char *)v8[6];
  uint64_t v16 = *((void *)v15 + 2);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
    uint64_t v15 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v16 + 1, 1, v15);
  }
  unint64_t v18 = *((void *)v15 + 2);
  unint64_t v17 = *((void *)v15 + 3);
  if (v18 >= v17 >> 1) {
    uint64_t v15 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v17 > 1), v18 + 1, 1, v15);
  }
  *((void *)v15 + 2) = v18 + 1;
  uint64_t v19 = &v15[24 * v18];
  v19[32] = a1 & 1;
  uint64_t v21 = v28;
  uint64_t v20 = v29;
  *((void *)v19 + 5) = a2;
  *((void *)v19 + 6) = v21;
  v8[6] = (uint64_t)v15;
  (*(void (**)(char *, uint64_t, uint64_t))(v12 + 16))(v14, v20, v11);
  uint64_t v22 = specialized static QuantifyPayload.packInfoValues(_:_:_:_:isScalarSemantics:)((uint64_t)v14, v32, v33, v30, 0, v31 & 1);
  (*(void (**)(char *, uint64_t))(v12 + 8))(v14, v11);
  uint64_t v23 = v16 + v22;
  if (__CFADD__(v16, v22))
  {
    __break(1u);
  }
  else
  {
    uint64_t v22 = *v8;
    uint64_t result = swift_isUniquelyReferenced_nonNull_native();
    if (result) {
      goto LABEL_7;
    }
  }
  uint64_t result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(void *)(v22 + 16) + 1, 1, (char *)v22, &demangling cache variable for type metadata for _ContiguousArrayStorage<Instruction>);
  uint64_t v22 = result;
LABEL_7:
  unint64_t v26 = *(void *)(v22 + 16);
  unint64_t v25 = *(void *)(v22 + 24);
  if (v26 >= v25 >> 1)
  {
    uint64_t result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v25 > 1), v26 + 1, 1, (char *)v22, &demangling cache variable for type metadata for _ContiguousArrayStorage<Instruction>);
    uint64_t v22 = result;
  }
  *(void *)(v22 + 16) = v26 + 1;
  *(void *)(v22 + 8 * v26 + 32) = v23 | 0x1500000000000000;
  *unint64_t v8 = v22;
  return result;
}

uint64_t MEProgram.Builder.buildQuantify(model:_:_:_:isScalarSemantics:)(int a1, uint64_t a2, uint64_t a3, uint64_t a4, char a5, char a6)
{
  char v12 = a5 & 1;
  uint64_t v13 = type metadata accessor for AST.Quantification.Kind();
  uint64_t v14 = *(void *)(v13 - 8);
  MEMORY[0x270FA5388](v13);
  uint64_t v16 = (char *)&v24 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t))(v14 + 16))(v16, a2, v13);
  uint64_t v17 = a1;
  if ((a1 & 0x1000000) != 0)
  {
    uint64_t v17 = a1 | 0x200;
    if ((a1 & 0x10000) != 0) {
      goto LABEL_3;
    }
  }
  else if ((a1 & 0x10000) != 0)
  {
LABEL_3:
    uint64_t v18 = 1024;
    goto LABEL_6;
  }
  uint64_t v18 = 0;
LABEL_6:
  uint64_t v19 = v17 + v18;
  uint64_t v20 = specialized static QuantifyPayload.packInfoValues(_:_:_:_:isScalarSemantics:)((uint64_t)v16, a3, a4, v12, 3, a6 & 1);
  (*(void (**)(char *, uint64_t))(v14 + 8))(v16, v13);
  if (__CFADD__(v19, v20))
  {
    __break(1u);
  }
  else
  {
    uint64_t v13 = *v6;
    uint64_t result = swift_isUniquelyReferenced_nonNull_native();
    if (result) {
      goto LABEL_8;
    }
  }
  uint64_t result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(void *)(v13 + 16) + 1, 1, (char *)v13, &demangling cache variable for type metadata for _ContiguousArrayStorage<Instruction>);
  uint64_t v13 = result;
LABEL_8:
  unint64_t v23 = *(void *)(v13 + 16);
  unint64_t v22 = *(void *)(v13 + 24);
  if (v23 >= v22 >> 1)
  {
    uint64_t result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v22 > 1), v23 + 1, 1, (char *)v13, &demangling cache variable for type metadata for _ContiguousArrayStorage<Instruction>);
    uint64_t v13 = result;
  }
  *(void *)(v13 + 16) = v23 + 1;
  *(void *)(v13 + 8 * v23 + 32) = (v19 + v20) | 0x1500000000000000;
  *unint64_t v6 = v13;
  return result;
}

void *Compiler.ByteCodeGen.coalescingCustomCharacterClassMembers(_:)(uint64_t a1)
{
  uint64_t v102 = type metadata accessor for DSLTree.Atom(0);
  uint64_t v3 = MEMORY[0x270FA5388](v102);
  uint64_t v95 = (uint64_t)&v93 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = MEMORY[0x270FA5388](v3);
  uint64_t v99 = (uint64_t)&v93 - v6;
  uint64_t v7 = MEMORY[0x270FA5388](v5);
  uint64_t v101 = (uint64_t)&v93 - v8;
  uint64_t v9 = MEMORY[0x270FA5388](v7);
  uint64_t v98 = (uint64_t)&v93 - v10;
  uint64_t v11 = MEMORY[0x270FA5388](v9);
  uint64_t v97 = (uint64_t)&v93 - v12;
  MEMORY[0x270FA5388](v11);
  uint64_t v96 = (uint64_t)&v93 - v13;
  uint64_t v100 = type metadata accessor for DSLTree.CustomCharacterClass.Member(0);
  uint64_t v106 = *(void *)(v100 - 8);
  uint64_t v14 = MEMORY[0x270FA5388](v100);
  uint64_t v103 = (uint64_t)&v93 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v16 = MEMORY[0x270FA5388](v14);
  uint64_t v18 = (uint64_t *)((char *)&v93 - v17);
  MEMORY[0x270FA5388](v16);
  uint64_t v20 = (char *)&v93 - v19;
  uint64_t v108 = v1;
  uint64_t v21 = _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSay17_StringProcessing7DSLTreeV20CustomCharacterClassV6MemberOG_ALs5NeverOTg5((void (*)(uint64_t))partial apply for closure #1 in Compiler.ByteCodeGen.coalescingCustomCharacterClassMembers(_:), (uint64_t)v107, a1);
  unint64_t v110 = (void *)MEMORY[0x263F8EE78];
  uint64_t v105 = *(void *)(v21 + 16);
  if (!v105)
  {
    swift_bridgeObjectRelease();
LABEL_95:
    swift_bridgeObjectRelease();
    return v110;
  }
  unint64_t v22 = 0;
  char v23 = 0;
  uint64_t v24 = (char *)&outlined read-only object #0 of Compiler.ByteCodeGen.coalescingCustomCharacterClassMembers(_:);
  uint64_t v104 = v21;
  while (2)
  {
    if (v22 >= *(void *)(v21 + 16))
    {
      __break(1u);
LABEL_98:
      __break(1u);
LABEL_99:
      __break(1u);
LABEL_100:
      __break(1u);
LABEL_101:
      __break(1u);
LABEL_102:
      __break(1u);
LABEL_103:
      __break(1u);
LABEL_104:
      __break(1u);
LABEL_105:
      __break(1u);
LABEL_106:
      __break(1u);
LABEL_107:
      __break(1u);
LABEL_108:
      __break(1u);
      JUMPOUT(0x209F3DE20);
    }
    unint64_t v26 = (*(unsigned __int8 *)(v106 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v106 + 80);
    uint64_t v27 = *(void *)(v106 + 72);
    outlined init with copy of MEProgram(v21 + v26 + v27 * v22, (uint64_t)v20, type metadata accessor for DSLTree.CustomCharacterClass.Member);
    outlined init with copy of MEProgram((uint64_t)v20, (uint64_t)v18, type metadata accessor for DSLTree.CustomCharacterClass.Member);
    switch(swift_getEnumCaseMultiPayload())
    {
      case 0u:
        uint64_t v28 = v96;
        outlined init with take of DSLTree.QuantificationKind((uint64_t)v18, v96, type metadata accessor for DSLTree.Atom);
        outlined init with copy of MEProgram(v28, v97, type metadata accessor for DSLTree.Atom);
        int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
        if (EnumCaseMultiPayload == 1)
        {
          unsigned int v46 = *(_DWORD *)v97;
          if (*(_DWORD *)v97 > 0x7Fu)
          {
            int v76 = (*(_DWORD *)v97 & 0x3F) << 8;
            if (v46 >= 0x800)
            {
              unsigned int v79 = v46 >> 12;
              int v80 = (v76 | (v46 >> 6) & 0x3F) << 8;
              unsigned int v81 = HIWORD(v46);
              unsigned int v47 = (((v80 | (v46 >> 12) & 0x3F) << 8) | (v46 >> 18)) - 2122219023;
              int v82 = (v80 | v79) + 8487393;
              if (!v81) {
                unsigned int v47 = v82;
              }
            }
            else
            {
              unsigned int v47 = (v76 | (v46 >> 6)) + 33217;
            }
          }
          else
          {
            unsigned int v47 = v46 + 1;
          }
          uint64_t v109 = (v47 + 0xFEFEFEFEFEFEFFLL) & ~(-1 << (8 * (4 - (__clz(v47) >> 3))));
          uint64_t v31 = MEMORY[0x21050F010](&v109);
          uint64_t v30 = v48;
          goto LABEL_30;
        }
        if (!EnumCaseMultiPayload)
        {
          uint64_t v31 = *(void *)v97;
          uint64_t v30 = *(void *)(v97 + 8);
LABEL_30:
          outlined destroy of MEProgram(v96, type metadata accessor for DSLTree.Atom);
          outlined destroy of MEProgram((uint64_t)v20, type metadata accessor for DSLTree.CustomCharacterClass.Member);
          unint64_t v49 = *((void *)v24 + 2);
          if (swift_isUniquelyReferenced_nonNull_native())
          {
            if (!v49) {
              goto LABEL_104;
            }
          }
          else
          {
            uint64_t v24 = specialized _ArrayBuffer._consumeAndCreateNew()((uint64_t)v24);
            if (!v49) {
              goto LABEL_104;
            }
          }
          if (v49 > *((void *)v24 + 2)) {
            goto LABEL_105;
          }
          swift_bridgeObjectRetain();
          MEMORY[0x21050F090](v31, v30);
LABEL_4:
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          goto LABEL_5;
        }
        outlined destroy of MEProgram(v97, type metadata accessor for DSLTree.Atom);
        outlined destroy of MEProgram(v96, type metadata accessor for DSLTree.Atom);
        if (v23) {
          goto LABEL_44;
        }
LABEL_26:
        uint64_t v45 = v110;
LABEL_58:
        outlined init with take of DSLTree.QuantificationKind((uint64_t)v20, v103, type metadata accessor for DSLTree.CustomCharacterClass.Member);
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
          uint64_t v45 = (void *)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v45[2] + 1, 1, v45, &demangling cache variable for type metadata for _ContiguousArrayStorage<DSLTree.CustomCharacterClass.Member>, type metadata accessor for DSLTree.CustomCharacterClass.Member);
        }
        unint64_t v68 = v45[2];
        unint64_t v67 = v45[3];
        if (v68 >= v67 >> 1) {
          uint64_t v45 = (void *)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(v67 > 1, v68 + 1, 1, v45, &demangling cache variable for type metadata for _ContiguousArrayStorage<DSLTree.CustomCharacterClass.Member>, type metadata accessor for DSLTree.CustomCharacterClass.Member);
        }
        v45[2] = v68 + 1;
        outlined init with take of DSLTree.QuantificationKind(v103, (uint64_t)v45 + v26 + v68 * v27, type metadata accessor for DSLTree.CustomCharacterClass.Member);
        char v23 = 0;
        unint64_t v110 = v45;
LABEL_6:
        uint64_t v21 = v104;
        if (v105 != ++v22) {
          continue;
        }
        swift_bridgeObjectRelease();
        if ((v23 & 1) == 0) {
          goto LABEL_95;
        }
        size_t v91 = finish() in Accumulator #1 in Compiler.ByteCodeGen.coalescingCustomCharacterClassMembers(_:)(v24);
        swift_bridgeObjectRelease();
        specialized Array.append<A>(contentsOf:)(v91);
        return v110;
      case 1u:
        uint64_t v32 = (uint64_t)v18
            + *(int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (DSLTree.Atom, DSLTree.Atom))
                     + 48);
        uint64_t v33 = v98;
        outlined init with take of DSLTree.QuantificationKind((uint64_t)v18, v98, type metadata accessor for DSLTree.Atom);
        outlined init with take of DSLTree.QuantificationKind(v32, v101, type metadata accessor for DSLTree.Atom);
        outlined init with copy of MEProgram(v33, v99, type metadata accessor for DSLTree.Atom);
        int v34 = swift_getEnumCaseMultiPayload();
        if (v34 == 1)
        {
          unsigned int v50 = *(_DWORD *)v99;
          if (*(_DWORD *)v99 >= 0x80u)
          {
            int v77 = (*(_DWORD *)v99 & 0x3F) << 8;
            if (v50 >= 0x800)
            {
              unsigned int v83 = v50 >> 12;
              int v84 = (v77 | (v50 >> 6) & 0x3F) << 8;
              unsigned int v85 = HIWORD(v50);
              unsigned int v51 = (((v84 | (v50 >> 12) & 0x3F) << 8) | (v50 >> 18)) - 2122219023;
              int v86 = (v84 | v83) + 8487393;
              if (!v85) {
                unsigned int v51 = v86;
              }
            }
            else
            {
              unsigned int v51 = (v77 | (v50 >> 6)) + 33217;
            }
          }
          else
          {
            unsigned int v51 = v50 + 1;
          }
          uint64_t v109 = (v51 + 0xFEFEFEFEFEFEFFLL) & ~(-1 << (8 * (4 - (__clz(v51) >> 3))));
          uint64_t v94 = MEMORY[0x21050F010](&v109);
          uint64_t v35 = v52;
        }
        else
        {
          if (v34)
          {
            outlined destroy of MEProgram(v99, type metadata accessor for DSLTree.Atom);
            outlined destroy of MEProgram(v98, type metadata accessor for DSLTree.Atom);
            outlined destroy of MEProgram(v101, type metadata accessor for DSLTree.Atom);
LABEL_43:
            if ((v23 & 1) == 0) {
              goto LABEL_26;
            }
            goto LABEL_44;
          }
          uint64_t v35 = *(void *)(v99 + 8);
          uint64_t v94 = *(void *)v99;
        }
        outlined destroy of MEProgram(v98, type metadata accessor for DSLTree.Atom);
        outlined init with copy of MEProgram(v101, v95, type metadata accessor for DSLTree.Atom);
        int v53 = swift_getEnumCaseMultiPayload();
        if (v53 == 1)
        {
          unsigned int v69 = *(_DWORD *)v95;
          if (*(_DWORD *)v95 > 0x7Fu)
          {
            int v78 = (*(_DWORD *)v95 & 0x3F) << 8;
            if (v69 >= 0x800)
            {
              unsigned int v87 = v69 >> 12;
              int v88 = (v78 | (v69 >> 6) & 0x3F) << 8;
              unsigned int v89 = HIWORD(v69);
              unsigned int v70 = (((v88 | (v69 >> 12) & 0x3F) << 8) | (v69 >> 18)) - 2122219023;
              int v90 = (v88 | v87) + 8487393;
              if (!v89) {
                unsigned int v70 = v90;
              }
            }
            else
            {
              unsigned int v70 = (v78 | (v69 >> 6)) + 33217;
            }
          }
          else
          {
            unsigned int v70 = v69 + 1;
          }
          uint64_t v54 = v35;
          uint64_t v109 = (v70 + 0xFEFEFEFEFEFEFFLL) & ~(-1 << (8 * (4 - (__clz(v70) >> 3))));
          uint64_t v56 = MEMORY[0x21050F010](&v109);
          uint64_t v55 = v71;
        }
        else
        {
          if (v53)
          {
            outlined destroy of MEProgram(v95, type metadata accessor for DSLTree.Atom);
            outlined destroy of MEProgram(v101, type metadata accessor for DSLTree.Atom);
            swift_bridgeObjectRelease();
            if ((v23 & 1) == 0) {
              goto LABEL_26;
            }
LABEL_44:
            uint64_t v57 = finish() in Accumulator #1 in Compiler.ByteCodeGen.coalescingCustomCharacterClassMembers(_:)(v24);
            swift_bridgeObjectRelease();
            uint64_t v58 = *(void *)(v57 + 16);
            uint64_t v45 = v110;
            int64_t v59 = v110[2];
            int64_t v60 = v59 + v58;
            if (__OFADD__(v59, v58)) {
              goto LABEL_98;
            }
            size_t isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
            if (!isUniquelyReferenced_nonNull_native || (int64_t v62 = v45[3] >> 1, v62 < v60))
            {
              if (v59 <= v60) {
                int64_t v63 = v59 + v58;
              }
              else {
                int64_t v63 = v59;
              }
              uint64_t v45 = (void *)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(isUniquelyReferenced_nonNull_native, v63, 1, v45, &demangling cache variable for type metadata for _ContiguousArrayStorage<DSLTree.CustomCharacterClass.Member>, type metadata accessor for DSLTree.CustomCharacterClass.Member);
              int64_t v62 = v45[3] >> 1;
            }
            if (*(void *)(v57 + 16))
            {
              if (v62 - v45[2] < v58) {
                goto LABEL_103;
              }
              swift_arrayInitWithCopy();
              if (v58)
              {
                uint64_t v64 = v45[2];
                BOOL v65 = __OFADD__(v64, v58);
                uint64_t v66 = v64 + v58;
                if (v65) {
                  goto LABEL_108;
                }
                v45[2] = v66;
              }
            }
            else if (v58)
            {
              goto LABEL_99;
            }
            swift_bridgeObjectRelease();
            unint64_t v110 = v45;
            uint64_t v24 = (char *)&outlined read-only object #0 of Compiler.ByteCodeGen.coalescingCustomCharacterClassMembers(_:);
            goto LABEL_58;
          }
          uint64_t v54 = v35;
          uint64_t v56 = *(void *)v95;
          uint64_t v55 = *(void *)(v95 + 8);
        }
        outlined destroy of MEProgram(v101, type metadata accessor for DSLTree.Atom);
        outlined destroy of MEProgram((uint64_t)v20, type metadata accessor for DSLTree.CustomCharacterClass.Member);
        unint64_t v72 = *((void *)v24 + 2);
        if (swift_isUniquelyReferenced_nonNull_native())
        {
          if (!v72) {
            goto LABEL_106;
          }
        }
        else
        {
          uint64_t v24 = specialized _ArrayBuffer._consumeAndCreateNew()((uint64_t)v24);
          if (!v72) {
            goto LABEL_106;
          }
        }
        if (v72 > *((void *)v24 + 2)) {
          goto LABEL_107;
        }
        swift_bridgeObjectRetain();
        MEMORY[0x21050F090](v94, v54);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        unint64_t v74 = *((void *)v24 + 2);
        unint64_t v73 = *((void *)v24 + 3);
        if (v74 >= v73 >> 1) {
          uint64_t v24 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v73 > 1), v74 + 1, 1, v24);
        }
        *((void *)v24 + 2) = v74 + 1;
        unint64_t v75 = &v24[16 * v74];
        *((void *)v75 + 4) = v56;
        *((void *)v75 + 5) = v55;
LABEL_5:
        char v23 = 1;
        goto LABEL_6;
      case 3u:
        outlined destroy of MEProgram((uint64_t)v20, type metadata accessor for DSLTree.CustomCharacterClass.Member);
        uint64_t v37 = *v18;
        uint64_t v36 = (void *)v18[1];
        unint64_t v38 = *((void *)v24 + 2);
        if (swift_isUniquelyReferenced_nonNull_native())
        {
          if (!v38) {
            goto LABEL_101;
          }
        }
        else
        {
          uint64_t v24 = specialized _ArrayBuffer._consumeAndCreateNew()((uint64_t)v24);
          if (!v38) {
            goto LABEL_101;
          }
        }
        if (v38 > *((void *)v24 + 2)) {
          goto LABEL_102;
        }
        swift_bridgeObjectRetain();
        v25._uint64_t countAndFlagsBits = v37;
        v25._object = v36;
        String.append(_:)(v25);
        goto LABEL_4;
      case 4u:
        outlined destroy of MEProgram((uint64_t)v18, type metadata accessor for DSLTree.CustomCharacterClass.Member);
        uint64_t v39 = *((void *)v24 + 2);
        if (!v39) {
          goto LABEL_100;
        }
        uint64_t v40 = &v24[16 * v39];
        uint64_t v42 = *((void *)v40 + 2);
        unint64_t v41 = *((void *)v40 + 3);
        uint64_t v43 = v42 & 0xFFFFFFFFFFFFLL;
        if ((v41 & 0x2000000000000000) != 0) {
          uint64_t v44 = HIBYTE(v41) & 0xF;
        }
        else {
          uint64_t v44 = v43;
        }
        if (!v44) {
          goto LABEL_43;
        }
        outlined destroy of MEProgram((uint64_t)v20, type metadata accessor for DSLTree.CustomCharacterClass.Member);
        goto LABEL_5;
      default:
        outlined destroy of MEProgram((uint64_t)v18, type metadata accessor for DSLTree.CustomCharacterClass.Member);
        if ((v23 & 1) == 0) {
          goto LABEL_26;
        }
        goto LABEL_44;
    }
  }
}

uint64_t closure #1 in Compiler.ByteCodeGen.coalescingCustomCharacterClassMembers(_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6 = type metadata accessor for DSLTree.CustomCharacterClass.Member(0);
  MEMORY[0x270FA5388](v6);
  uint64_t v8 = (char *)&v22 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of MEProgram(a1, (uint64_t)v8, type metadata accessor for DSLTree.CustomCharacterClass.Member);
  uint64_t v9 = type metadata accessor for DSLTree.CustomCharacterClass.Member;
  switch(swift_getEnumCaseMultiPayload())
  {
    case 1u:
      uint64_t v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (DSLTree.Atom, DSLTree.Atom));
      uint64_t v9 = type metadata accessor for DSLTree.Atom;
      outlined destroy of MEProgram((uint64_t)&v8[*(int *)(v10 + 48)], type metadata accessor for DSLTree.Atom);
      goto LABEL_3;
    case 2u:
      uint64_t v12 = *(void *)(*(void *)a2 + 16);
      if (!v12)
      {
        __break(1u);
        JUMPOUT(0x209F3E158);
      }
      uint64_t v13 = *(void *)v8;
      char v14 = v8[8];
      if ((*(_DWORD *)(*(void *)a2 + 4 * v12 + 28) & 0x10000) != 0)
      {
        uint64_t v15 = Compiler.ByteCodeGen.coalescingCustomCharacterClassMembers(_:)(*(void *)v8);
      }
      else
      {
        swift_bridgeObjectRetain();
        uint64_t v15 = v13;
      }
      uint64_t v21 = Compiler.ByteCodeGen.flatteningCustomCharacterClassMembers(_:)(v15);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      *(void *)a3 = v21;
      *(unsigned char *)(a3 + 8) = v14;
      uint64_t result = swift_storeEnumTagMultiPayload();
      break;
    case 5u:
    case 6u:
    case 7u:
      uint64_t v16 = *(void *)(*(void *)v8 + 16);
      char v17 = *(unsigned char *)(*(void *)v8 + 24);
      uint64_t v18 = *(void *)(*(void *)v8 + 32);
      char v19 = *(unsigned char *)(*(void *)v8 + 40);
      uint64_t v20 = swift_allocObject();
      uint64_t v22 = v16;
      char v23 = v17;
      Compiler.ByteCodeGen.coalescingCustomCharacterClass(_:)((uint64_t)&v22, v20 + 16);
      uint64_t v22 = v18;
      char v23 = v19;
      Compiler.ByteCodeGen.coalescingCustomCharacterClass(_:)((uint64_t)&v22, v20 + 32);
      *(void *)a3 = v20;
      swift_storeEnumTagMultiPayload();
      uint64_t result = swift_release();
      break;
    default:
LABEL_3:
      outlined destroy of MEProgram((uint64_t)v8, v9);
      uint64_t result = outlined init with copy of MEProgram(a1, a3, type metadata accessor for DSLTree.CustomCharacterClass.Member);
      break;
  }
  return result;
}

uint64_t Compiler.ByteCodeGen.coalescingCustomCharacterClass(_:)@<X0>(uint64_t result@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = *(void *)(*(void *)v2 + 16);
  if (v4)
  {
    uint64_t v5 = *(void *)result;
    char v6 = *(unsigned char *)(result + 8);
    if ((*(_DWORD *)(*(void *)v2 + 4 * v4 + 28) & 0x10000) != 0) {
      uint64_t v5 = Compiler.ByteCodeGen.coalescingCustomCharacterClassMembers(_:)(*(void *)result);
    }
    else {
      swift_bridgeObjectRetain();
    }
    uint64_t v7 = Compiler.ByteCodeGen.flatteningCustomCharacterClassMembers(_:)(v5);
    uint64_t result = swift_bridgeObjectRelease();
    *(void *)a2 = v7;
    *(unsigned char *)(a2 + 8) = v6;
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSay17_StringProcessing7DSLTreeV20CustomCharacterClassV6MemberOG_ALs5NeverOTg5(void (*a1)(uint64_t), uint64_t a2, uint64_t a3)
{
  uint64_t v4 = v3;
  char v19 = a1;
  uint64_t v20 = a2;
  uint64_t v6 = type metadata accessor for DSLTree.CustomCharacterClass.Member(0);
  uint64_t v7 = *(void *)(v6 - 8);
  MEMORY[0x270FA5388](v6 - 8);
  uint64_t v9 = (char *)&v17 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  int64_t v10 = *(void *)(a3 + 16);
  uint64_t v11 = MEMORY[0x263F8EE78];
  if (v10)
  {
    uint64_t v21 = MEMORY[0x263F8EE78];
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v10, 0);
    uint64_t v11 = v21;
    unint64_t v18 = (*(unsigned __int8 *)(v7 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80);
    uint64_t v12 = a3 + v18;
    uint64_t v13 = *(void *)(v7 + 72);
    while (1)
    {
      v19(v12);
      if (v4) {
        break;
      }
      uint64_t v4 = 0;
      uint64_t v21 = v11;
      unint64_t v15 = *(void *)(v11 + 16);
      unint64_t v14 = *(void *)(v11 + 24);
      if (v15 >= v14 >> 1)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v14 > 1, v15 + 1, 1);
        uint64_t v11 = v21;
      }
      *(void *)(v11 + 16) = v15 + 1;
      outlined init with take of DSLTree.QuantificationKind((uint64_t)v9, v11 + v18 + v15 * v13, type metadata accessor for DSLTree.CustomCharacterClass.Member);
      v12 += v13;
      if (!--v10) {
        return v11;
      }
    }
    swift_release();
  }
  return v11;
}

uint64_t finish() in Accumulator #1 in Compiler.ByteCodeGen.coalescingCustomCharacterClassMembers(_:)(void *a1)
{
  uint64_t v3 = type metadata accessor for DSLTree.CustomCharacterClass.Member(0);
  unint64_t v4 = *(void *)(v3 - 8);
  uint64_t v5 = MEMORY[0x270FA5388](v3);
  uint64_t v6 = MEMORY[0x270FA5388](v5);
  uint64_t v8 = (uint64_t *)((char *)&v70 - v7);
  MEMORY[0x270FA5388](v6);
  int v77 = (uint64_t *)((char *)&v70 - v10);
  uint64_t v11 = a1[2];
  uint64_t v78 = v11 - 1;
  if (v11 == 1)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<DSLTree.CustomCharacterClass.Member>);
    unint64_t v12 = (*(unsigned __int8 *)(v4 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80);
    size_t v13 = swift_allocObject();
    *(_OWORD *)(v13 + 16) = xmmword_209FAFD60;
    unint64_t v14 = (void *)(v13 + v12);
    uint64_t v15 = a1[5];
    *unint64_t v14 = a1[4];
    v14[1] = v15;
    swift_storeEnumTagMultiPayload();
    swift_bridgeObjectRetain();
    return v13;
  }
  uint64_t v71 = v9;
  swift_bridgeObjectRetain();
  unint64_t v73 = a1;
  swift_unknownObjectRetain();
  size_t v13 = MEMORY[0x263F8EE78];
  uint64_t v72 = v11;
  if (!v11 || (uint64_t v76 = v78 & 0x7FFFFFFFFFFFFFFFLL, (v78 & 0x7FFFFFFFFFFFFFFFLL) == 0))
  {
LABEL_33:
    int v53 = v73;
    swift_unknownObjectRelease_n();
    if (v72)
    {
      uint64_t v54 = (uint64_t)&v53[2 * v72 + 4];
      uint64_t v55 = *(void *)(v54 - 16);
      unint64_t v56 = *(void *)(v54 - 8);
      swift_bridgeObjectRetain();
      unint64_t v57 = specialized Collection.dropFirst(_:)(1uLL, v55, v56, MEMORY[0x263F8D2C8], MEMORY[0x263F8D3A0]);
      uint64_t v59 = v58;
      uint64_t v61 = v60;
      uint64_t v63 = v62;
      swift_bridgeObjectRelease();
      if ((v57 ^ v59) < 0x4000)
      {
        swift_bridgeObjectRelease();
        return v13;
      }
      uint64_t v64 = MEMORY[0x21050EFC0](v57, v59, v61, v63);
      uint64_t v66 = v65;
      swift_bridgeObjectRelease();
      uint64_t v1 = v71;
      *uint64_t v71 = v64;
      v1[1] = v66;
      swift_storeEnumTagMultiPayload();
      if (swift_isUniquelyReferenced_nonNull_native())
      {
LABEL_37:
        unint64_t v68 = *(void *)(v13 + 16);
        unint64_t v67 = *(void *)(v13 + 24);
        if (v68 >= v67 >> 1) {
          size_t v13 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(v67 > 1, v68 + 1, 1, (void *)v13, &demangling cache variable for type metadata for _ContiguousArrayStorage<DSLTree.CustomCharacterClass.Member>, type metadata accessor for DSLTree.CustomCharacterClass.Member);
        }
        *(void *)(v13 + 16) = v68 + 1;
        outlined init with take of DSLTree.QuantificationKind((uint64_t)v1, v13+ ((*(unsigned __int8 *)(v4 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80))+ *(void *)(v4 + 72) * v68, type metadata accessor for DSLTree.CustomCharacterClass.Member);
        return v13;
      }
    }
    else
    {
LABEL_44:
      __break(1u);
    }
    size_t v13 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(void *)(v13 + 16) + 1, 1, (void *)v13, &demangling cache variable for type metadata for _ContiguousArrayStorage<DSLTree.CustomCharacterClass.Member>, type metadata accessor for DSLTree.CustomCharacterClass.Member);
    goto LABEL_37;
  }
  uint64_t v16 = 0;
  uint64_t v1 = v73 + 7;
  unint64_t v74 = v8;
  unint64_t v75 = v4;
  uint64_t v79 = v3;
  while (1)
  {
    if (v78 == v16)
    {
      __break(1u);
LABEL_42:
      __break(1u);
LABEL_43:
      __break(1u);
      goto LABEL_44;
    }
    uint64_t v18 = *(v1 - 3);
    unint64_t v17 = *(v1 - 2);
    unint64_t v19 = *v1;
    uint64_t v80 = *(v1 - 1);
    size_t v81 = v13;
    swift_bridgeObjectRetain_n();
    swift_bridgeObjectRetain();
    if (v16)
    {
      unint64_t v20 = specialized Collection.dropFirst(_:)(1uLL, v18, v17, MEMORY[0x263F8D2C8], MEMORY[0x263F8D3A0]);
      unint64_t v4 = v21;
      swift_bridgeObjectRelease();
      if (__OFSUB__(Substring.distance(from:to:)(), 1)) {
        goto LABEL_42;
      }
      uint64_t v22 = Substring.index(_:offsetBy:limitedBy:)();
      if (v23) {
        unint64_t v24 = v4;
      }
      else {
        unint64_t v24 = v22;
      }
      if (v24 >> 14 < v20 >> 14) {
        goto LABEL_43;
      }
      uint64_t v25 = Substring.subscript.getter();
      unint64_t v27 = v26;
      uint64_t v29 = v28;
      uint64_t v31 = v30;
    }
    else
    {
      uint64_t v25 = specialized Collection.dropLast(_:)(1, v18, v17, MEMORY[0x263F8D2C0], MEMORY[0x263F8D2C8], MEMORY[0x263F8D3A0]);
      unint64_t v27 = v32;
      uint64_t v29 = v33;
      uint64_t v31 = v34;
    }
    swift_bridgeObjectRelease();
    if ((v25 ^ v27) >= 0x4000)
    {
      uint64_t v35 = MEMORY[0x21050EFC0](v25, v27, v29, v31);
      uint64_t v37 = v36;
      swift_bridgeObjectRelease();
      unint64_t v38 = v77;
      *int v77 = v35;
      v38[1] = v37;
      swift_storeEnumTagMultiPayload();
      size_t v13 = v81;
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
        size_t v13 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(void *)(v13 + 16) + 1, 1, (void *)v13, &demangling cache variable for type metadata for _ContiguousArrayStorage<DSLTree.CustomCharacterClass.Member>, type metadata accessor for DSLTree.CustomCharacterClass.Member);
      }
      unint64_t v40 = *(void *)(v13 + 16);
      unint64_t v39 = *(void *)(v13 + 24);
      unint64_t v4 = v75;
      if (v40 >= v39 >> 1) {
        size_t v13 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(v39 > 1, v40 + 1, 1, (void *)v13, &demangling cache variable for type metadata for _ContiguousArrayStorage<DSLTree.CustomCharacterClass.Member>, type metadata accessor for DSLTree.CustomCharacterClass.Member);
      }
      *(void *)(v13 + 16) = v40 + 1;
      outlined init with take of DSLTree.QuantificationKind((uint64_t)v77, v13+ ((*(unsigned __int8 *)(v4 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80))+ *(void *)(v4 + 72) * v40, type metadata accessor for DSLTree.CustomCharacterClass.Member);
    }
    else
    {
      swift_bridgeObjectRelease();
      unint64_t v4 = v75;
      size_t v13 = v81;
    }
    uint64_t v41 = HIBYTE(v17) & 0xF;
    if ((v17 & 0x2000000000000000) == 0) {
      uint64_t v41 = v18 & 0xFFFFFFFFFFFFLL;
    }
    if (!v41) {
      break;
    }
    String.index(before:)();
    uint64_t v42 = String.subscript.getter();
    uint64_t v44 = v43;
    swift_bridgeObjectRelease();
    uint64_t v45 = (uint64_t)v74;
    *unint64_t v74 = v42;
    *(void *)(v45 + 8) = v44;
    type metadata accessor for DSLTree.Atom(0);
    swift_storeEnumTagMultiPayload();
    uint64_t v46 = HIBYTE(v19) & 0xF;
    if ((v19 & 0x2000000000000000) == 0) {
      uint64_t v46 = v80 & 0xFFFFFFFFFFFFLL;
    }
    if (!v46) {
      goto LABEL_47;
    }
    unsigned int v47 = (uint64_t *)(v45
                    + *(int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (DSLTree.Atom, DSLTree.Atom))
                             + 48));
    uint64_t v48 = String.subscript.getter();
    uint64_t v50 = v49;
    swift_bridgeObjectRelease();
    *unsigned int v47 = v48;
    v47[1] = v50;
    swift_storeEnumTagMultiPayload();
    swift_storeEnumTagMultiPayload();
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
      size_t v13 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(void *)(v13 + 16) + 1, 1, (void *)v13, &demangling cache variable for type metadata for _ContiguousArrayStorage<DSLTree.CustomCharacterClass.Member>, type metadata accessor for DSLTree.CustomCharacterClass.Member);
    }
    unint64_t v52 = *(void *)(v13 + 16);
    unint64_t v51 = *(void *)(v13 + 24);
    if (v52 >= v51 >> 1) {
      size_t v13 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(v51 > 1, v52 + 1, 1, (void *)v13, &demangling cache variable for type metadata for _ContiguousArrayStorage<DSLTree.CustomCharacterClass.Member>, type metadata accessor for DSLTree.CustomCharacterClass.Member);
    }
    ++v16;
    v1 += 2;
    *(void *)(v13 + 16) = v52 + 1;
    outlined init with take of DSLTree.QuantificationKind(v45, v13+ ((*(unsigned __int8 *)(v4 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80))+ *(void *)(v4 + 72) * v52, type metadata accessor for DSLTree.CustomCharacterClass.Member);
    if (v76 == v16) {
      goto LABEL_33;
    }
  }
  swift_bridgeObjectRelease();
  __break(1u);
LABEL_47:
  uint64_t result = swift_bridgeObjectRelease();
  __break(1u);
  return result;
}

uint64_t Compiler.ByteCodeGen.flatteningCustomCharacterClassMembers(_:)(uint64_t a1)
{
  uint64_t v68 = type metadata accessor for DSLTree.Atom(0);
  MEMORY[0x270FA5388](v68);
  uint64_t v3 = (uint64_t *)((char *)&v63 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v69 = type metadata accessor for DSLTree.CustomCharacterClass.Member(0);
  uint64_t v4 = MEMORY[0x270FA5388](v69);
  uint64_t v64 = (char *)&v63 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = MEMORY[0x270FA5388](v4);
  uint64_t v8 = (uint64_t *)((char *)&v63 - v7);
  uint64_t v9 = MEMORY[0x270FA5388](v6);
  uint64_t v11 = (uint64_t *)((char *)&v63 - v10);
  MEMORY[0x270FA5388](v9);
  unint64_t v14 = (char *)&v63 - v13;
  uint64_t v15 = MEMORY[0x263F8EE88];
  uint64_t v73 = MEMORY[0x263F8EE88];
  uint64_t v74 = MEMORY[0x263F8EE88];
  uint64_t v72 = (void *)MEMORY[0x263F8EE78];
  uint64_t v16 = *(void *)(a1 + 16);
  uint64_t v67 = v12;
  if (v16)
  {
    uint64_t v17 = v16;
    uint64_t v18 = 0;
    uint64_t v19 = *(void *)(v12 + 72);
    unint64_t v65 = (*(unsigned __int8 *)(v12 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v12 + 80);
    uint64_t v66 = a1 + v65;
    unint64_t v20 = (void *)MEMORY[0x263F8EE78];
    while (1)
    {
      outlined init with copy of MEProgram(v66 + v19 * v18, (uint64_t)v14, type metadata accessor for DSLTree.CustomCharacterClass.Member);
      outlined init with copy of MEProgram((uint64_t)v14, (uint64_t)v11, type metadata accessor for DSLTree.CustomCharacterClass.Member);
      int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
      if (EnumCaseMultiPayload == 3)
      {
        outlined destroy of MEProgram((uint64_t)v14, type metadata accessor for DSLTree.CustomCharacterClass.Member);
        unint64_t v27 = v11[1];
        uint64_t v28 = HIBYTE(v27) & 0xF;
        if ((v27 & 0x2000000000000000) == 0) {
          uint64_t v28 = *v11 & 0xFFFFFFFFFFFFLL;
        }
        v71[0] = *v11;
        v71[1] = v27;
        v71[2] = 0;
        v71[3] = v28;
        Swift::String_optional v29 = String.Iterator.next()();
        if (v29.value._object)
        {
          Swift::Int countAndFlagsBits = v29.value._countAndFlagsBits;
          object = v29.value._object;
          do
          {
            specialized Set._Variant.insert(_:)(&v70, countAndFlagsBits, (Swift::Int)object);
            swift_bridgeObjectRelease();
            Swift::String_optional v32 = String.Iterator.next()();
            Swift::Int countAndFlagsBits = v32.value._countAndFlagsBits;
            object = v32.value._object;
          }
          while (v32.value._object);
        }
      }
      else
      {
        if (EnumCaseMultiPayload)
        {
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
            unint64_t v20 = (void *)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v20[2] + 1, 1, v20, &demangling cache variable for type metadata for _ContiguousArrayStorage<DSLTree.CustomCharacterClass.Member>, type metadata accessor for DSLTree.CustomCharacterClass.Member);
          }
          unint64_t v34 = v20[2];
          unint64_t v33 = v20[3];
          if (v34 >= v33 >> 1) {
            unint64_t v20 = (void *)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(v33 > 1, v34 + 1, 1, v20, &demangling cache variable for type metadata for _ContiguousArrayStorage<DSLTree.CustomCharacterClass.Member>, type metadata accessor for DSLTree.CustomCharacterClass.Member);
          }
          v20[2] = v34 + 1;
          outlined init with take of DSLTree.QuantificationKind((uint64_t)v14, (uint64_t)v20 + v65 + v34 * v19, type metadata accessor for DSLTree.CustomCharacterClass.Member);
          uint64_t v72 = v20;
          uint64_t v25 = type metadata accessor for DSLTree.CustomCharacterClass.Member;
          uint64_t v26 = (uint64_t)v11;
          goto LABEL_26;
        }
        outlined init with take of DSLTree.QuantificationKind((uint64_t)v11, (uint64_t)v3, type metadata accessor for DSLTree.Atom);
        int v22 = swift_getEnumCaseMultiPayload();
        if (v22 == 1)
        {
          outlined destroy of MEProgram((uint64_t)v14, type metadata accessor for DSLTree.CustomCharacterClass.Member);
          specialized Set._Variant.insert(_:)(v71, *(unsigned int *)v3);
          goto LABEL_5;
        }
        if (v22)
        {
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
            unint64_t v20 = (void *)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v20[2] + 1, 1, v20, &demangling cache variable for type metadata for _ContiguousArrayStorage<DSLTree.CustomCharacterClass.Member>, type metadata accessor for DSLTree.CustomCharacterClass.Member);
          }
          unint64_t v24 = v20[2];
          unint64_t v23 = v20[3];
          if (v24 >= v23 >> 1) {
            unint64_t v20 = (void *)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(v23 > 1, v24 + 1, 1, v20, &demangling cache variable for type metadata for _ContiguousArrayStorage<DSLTree.CustomCharacterClass.Member>, type metadata accessor for DSLTree.CustomCharacterClass.Member);
          }
          v20[2] = v24 + 1;
          outlined init with take of DSLTree.QuantificationKind((uint64_t)v14, (uint64_t)v20 + v65 + v24 * v19, type metadata accessor for DSLTree.CustomCharacterClass.Member);
          uint64_t v72 = v20;
          uint64_t v25 = type metadata accessor for DSLTree.Atom;
          uint64_t v26 = (uint64_t)v3;
LABEL_26:
          outlined destroy of MEProgram(v26, v25);
          goto LABEL_5;
        }
        outlined destroy of MEProgram((uint64_t)v14, type metadata accessor for DSLTree.CustomCharacterClass.Member);
        specialized Set._Variant.insert(_:)(v71, *v3, v3[1]);
      }
      swift_bridgeObjectRelease();
LABEL_5:
      if (++v18 == v17)
      {
        uint64_t v15 = v74;
        break;
      }
    }
  }
  int64_t v35 = *(void *)(v15 + 16);
  Swift::Int v36 = MEMORY[0x263F8EE78];
  if (v35)
  {
    v71[0] = MEMORY[0x263F8EE78];
    swift_bridgeObjectRetain();
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v35, 0);
    size_t v37 = v71[0];
    uint64_t result = specialized _NativeSet.startIndex.getter(v15);
    int64_t v39 = result;
    LODWORD(v41) = v40;
    char v43 = v42 & 1;
    uint64_t v66 = v15 + 56;
    while ((v43 & 1) == 0)
    {
      if (v39 < 0 || v39 >= 1 << *(unsigned char *)(v15 + 32))
      {
        __break(1u);
LABEL_55:
        __break(1u);
LABEL_56:
        __break(1u);
LABEL_57:
        __break(1u);
LABEL_58:
        __break(1u);
LABEL_59:
        __break(1u);
        break;
      }
      if (((*(void *)(v66 + (((unint64_t)v39 >> 3) & 0x1FFFFFFFFFFFFFF8)) >> v39) & 1) == 0) {
        goto LABEL_55;
      }
      if (*(_DWORD *)(v15 + 36) != v41) {
        goto LABEL_56;
      }
      uint64_t v44 = (void *)(*(void *)(v15 + 48) + 16 * v39);
      uint64_t v45 = v44[1];
      *uint64_t v8 = *v44;
      v8[1] = v45;
      swift_storeEnumTagMultiPayload();
      swift_storeEnumTagMultiPayload();
      v71[0] = v37;
      unint64_t v46 = *(void *)(v37 + 16);
      unint64_t v47 = *(void *)(v37 + 24);
      swift_bridgeObjectRetain();
      if (v46 >= v47 >> 1)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v47 > 1, v46 + 1, 1);
        size_t v37 = v71[0];
      }
      *(void *)(v37 + 16) = v46 + 1;
      outlined init with take of DSLTree.QuantificationKind((uint64_t)v8, v37+ ((*(unsigned __int8 *)(v67 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v67 + 80))+ *(void *)(v67 + 72) * v46, type metadata accessor for DSLTree.CustomCharacterClass.Member);
      uint64_t result = specialized _NativeSet.index(after:)(v39, v41, 0, v15);
      int64_t v39 = result;
      uint64_t v41 = v48;
      char v43 = v49 & 1;
      if (!--v35)
      {
        swift_bridgeObjectRelease();
        outlined consume of Set<Character>.Index._Variant(v39, v41, v43);
        Swift::Int v36 = MEMORY[0x263F8EE78];
        goto LABEL_41;
      }
    }
    __break(1u);
    goto LABEL_61;
  }
  size_t v37 = MEMORY[0x263F8EE78];
LABEL_41:
  specialized Array.append<A>(contentsOf:)(v37);
  uint64_t v50 = v73;
  int64_t v51 = *(void *)(v73 + 16);
  if (v51)
  {
    v71[0] = v36;
    swift_bridgeObjectRetain();
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v51, 0);
    size_t v52 = v71[0];
    uint64_t result = specialized _NativeSet.startIndex.getter(v50);
    int64_t v53 = result;
    int v55 = v54;
    char v57 = v56 & 1;
    uint64_t v58 = v64;
    while ((v57 & 1) == 0)
    {
      if (v53 < 0 || v53 >= 1 << *(unsigned char *)(v50 + 32)) {
        goto LABEL_57;
      }
      if (((*(void *)(v50 + 56 + (((unint64_t)v53 >> 3) & 0x1FFFFFFFFFFFFFF8)) >> v53) & 1) == 0) {
        goto LABEL_58;
      }
      if (*(_DWORD *)(v50 + 36) != v55) {
        goto LABEL_59;
      }
      *uint64_t v58 = *(_DWORD *)(*(void *)(v50 + 48) + 4 * v53);
      swift_storeEnumTagMultiPayload();
      swift_storeEnumTagMultiPayload();
      v71[0] = v52;
      unint64_t v60 = *(void *)(v52 + 16);
      unint64_t v59 = *(void *)(v52 + 24);
      if (v60 >= v59 >> 1)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v59 > 1, v60 + 1, 1);
        uint64_t v58 = v64;
        size_t v52 = v71[0];
      }
      *(void *)(v52 + 16) = v60 + 1;
      outlined init with take of DSLTree.QuantificationKind((uint64_t)v58, v52+ ((*(unsigned __int8 *)(v67 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v67 + 80))+ *(void *)(v67 + 72) * v60, type metadata accessor for DSLTree.CustomCharacterClass.Member);
      uint64_t result = specialized _NativeSet.index(after:)(v53, v55, 0, v50);
      int64_t v53 = result;
      int v55 = v61;
      char v57 = v62 & 1;
      if (!--v51)
      {
        outlined consume of Set<Character>.Index._Variant(result, v61, v57);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease_n();
        goto LABEL_53;
      }
    }
LABEL_61:
    __break(1u);
    return result;
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  size_t v52 = MEMORY[0x263F8EE78];
LABEL_53:
  specialized Array.append<A>(contentsOf:)(v52);
  return (uint64_t)v72;
}

size_t specialized Array.append<A>(contentsOf:)(size_t result)
{
  uint64_t v2 = *(void *)(result + 16);
  uint64_t v3 = *(void **)v1;
  int64_t v4 = *(void *)(*(void *)v1 + 16);
  int64_t v5 = v4 + v2;
  if (__OFADD__(v4, v2))
  {
    __break(1u);
LABEL_16:
    __break(1u);
    goto LABEL_17;
  }
  size_t v6 = result;
  uint64_t result = swift_isUniquelyReferenced_nonNull_native();
  if (result && v5 <= v3[3] >> 1)
  {
    if (*(void *)(v6 + 16)) {
      goto LABEL_5;
    }
    goto LABEL_13;
  }
  if (v4 <= v5) {
    int64_t v11 = v4 + v2;
  }
  else {
    int64_t v11 = v4;
  }
  uint64_t result = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(result, v11, 1, v3, &demangling cache variable for type metadata for _ContiguousArrayStorage<DSLTree.CustomCharacterClass.Member>, type metadata accessor for DSLTree.CustomCharacterClass.Member);
  uint64_t v3 = (void *)result;
  if (!*(void *)(v6 + 16))
  {
LABEL_13:
    if (!v2) {
      goto LABEL_14;
    }
    goto LABEL_16;
  }
LABEL_5:
  uint64_t v7 = (v3[3] >> 1) - v3[2];
  uint64_t result = type metadata accessor for DSLTree.CustomCharacterClass.Member(0);
  if (v7 < v2)
  {
LABEL_17:
    __break(1u);
    goto LABEL_18;
  }
  uint64_t result = swift_arrayInitWithCopy();
  if (!v2)
  {
LABEL_14:
    uint64_t result = swift_bridgeObjectRelease();
    *(void *)uint64_t v1 = v3;
    return result;
  }
  uint64_t v8 = v3[2];
  BOOL v9 = __OFADD__(v8, v2);
  uint64_t v10 = v8 + v2;
  if (!v9)
  {
    v3[2] = v10;
    goto LABEL_14;
  }
LABEL_18:
  __break(1u);
  return result;
}

uint64_t specialized Array.append<A>(contentsOf:)(uint64_t result)
{
  uint64_t v2 = *(void *)(result + 16);
  uint64_t v3 = *v1;
  int64_t v4 = *(void *)(*v1 + 16);
  int64_t v5 = v4 + v2;
  if (__OFADD__(v4, v2))
  {
    __break(1u);
LABEL_16:
    __break(1u);
    goto LABEL_17;
  }
  uint64_t v6 = result;
  uint64_t result = swift_isUniquelyReferenced_nonNull_native();
  if (result && v5 <= *(void *)(v3 + 24) >> 1)
  {
    if (*(void *)(v6 + 16)) {
      goto LABEL_5;
    }
    goto LABEL_13;
  }
  if (v4 <= v5) {
    int64_t v10 = v4 + v2;
  }
  else {
    int64_t v10 = v4;
  }
  uint64_t result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)result, v10, 1, (char *)v3);
  uint64_t v3 = result;
  if (!*(void *)(v6 + 16))
  {
LABEL_13:
    uint64_t result = swift_bridgeObjectRelease();
    if (!v2) {
      goto LABEL_14;
    }
    goto LABEL_16;
  }
LABEL_5:
  if ((*(void *)(v3 + 24) >> 1) - *(void *)(v3 + 16) < v2)
  {
LABEL_17:
    __break(1u);
    goto LABEL_18;
  }
  swift_arrayInitWithCopy();
  uint64_t result = swift_bridgeObjectRelease();
  if (!v2)
  {
LABEL_14:
    *uint64_t v1 = v3;
    return result;
  }
  uint64_t v7 = *(void *)(v3 + 16);
  BOOL v8 = __OFADD__(v7, v2);
  uint64_t v9 = v7 + v2;
  if (!v8)
  {
    *(void *)(v3 + 16) = v9;
    goto LABEL_14;
  }
LABEL_18:
  __break(1u);
  return result;
}

_StringProcessing::DSLTree::CustomCharacterClass __swiftcall DSLTree.CustomCharacterClass.init(members:isInverted:)(Swift::OpaquePointer members, Swift::Bool isInverted)
{
  *(Swift::OpaquePointer *)uint64_t v2 = members;
  *(unsigned char *)(v2 + 8) = isInverted;
  result.members = members;
  result.isInverted = isInverted;
  return result;
}

uint64_t Compiler.ByteCodeGen.emitCharacterInCCC(_:)(unint64_t a1, unint64_t a2)
{
  uint64_t v8 = *(void *)(*(void *)v3 + 16);
  if (!v8) {
    goto LABEL_42;
  }
  unint64_t v5 = a2;
  unint64_t v7 = a1;
  if ((*(_DWORD *)(*(void *)v3 + 4 * v8 + 28) & 0x10000) != 0)
  {
    return Compiler.ByteCodeGen.emitCharacter(_:)(a1, a2);
  }
  else
  {
    uint64_t v2 = (char **)(v43 + *(int *)(type metadata accessor for Compiler.ByteCodeGen(0) + 20));
    uint64_t v6 = v2[10];
    unint64_t v4 = *((void *)v6 + 2);
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
      goto LABEL_43;
    }
    while (1)
    {
      unint64_t v10 = *((void *)v6 + 2);
      unint64_t v9 = *((void *)v6 + 3);
      if (v10 >= v9 >> 1) {
        uint64_t v6 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v9 > 1), v10 + 1, 1, v6);
      }
      *((void *)v6 + 2) = v10 + 1;
      int64_t v11 = &v6[16 * v10];
      *((void *)v11 + 4) = 0;
      v11[40] = 1;
      v2[10] = v6;
      swift_bridgeObjectRetain();
      unint64_t v39 = v7;
      uint64_t v12 = specialized Collection.dropLast(_:)(1, v7, v5, (uint64_t (*)(uint64_t, unint64_t))specialized Collection.count.getter, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, unint64_t))String.UnicodeScalarView.index(_:offsetBy:limitedBy:), MEMORY[0x263F8D2A0]);
      unint64_t v14 = v13;
      unint64_t v16 = v15;
      unint64_t v7 = v17;
      unint64_t v40 = v5;
      swift_bridgeObjectRelease();
      unint64_t v42 = v12;
      if ((v12 ^ v14) < 0x4000) {
        break;
      }
      uint64_t v21 = (v7 & 0xFFFFFFFFFFFFFFFLL) + 32;
      unint64_t v22 = v12;
      uint64_t v41 = v4;
      while (1)
      {
        _StringGuts.validateScalarIndex(_:in:)(v22, v42, v14, v16, v7);
        if ((v7 & 0x1000000000000000) != 0)
        {
          uint64_t v23 = _StringGuts.foreignErrorCorrectedScalar(startingAt:)();
          _StringGuts.validateScalarIndex(_:)(v22, v16, v7);
          unint64_t v22 = String.UnicodeScalarView._foreignIndex(after:)();
        }
        else
        {
          if ((v7 & 0x2000000000000000) != 0)
          {
            unint64_t v44 = v16;
            uint64_t v45 = v7 & 0xFFFFFFFFFFFFFFLL;
            uint64_t v23 = _decodeScalar(_:startingAt:)();
            unint64_t v26 = _StringGuts.validateScalarIndex(_:)(v22, v16, v7) >> 16;
            unint64_t v44 = v16;
            uint64_t v45 = v7 & 0xFFFFFFFFFFFFFFLL;
            int v27 = *((unsigned __int8 *)&v44 + v26);
          }
          else
          {
            if ((v16 & 0x1000000000000000) == 0) {
              _StringObject.sharedUTF8.getter();
            }
            uint64_t v23 = _decodeScalar(_:startingAt:)();
            unint64_t v24 = _StringGuts.validateScalarIndex(_:)(v22, v16, v7);
            uint64_t v25 = v21;
            if ((v16 & 0x1000000000000000) == 0) {
              uint64_t v25 = _StringObject.sharedUTF8.getter();
            }
            unint64_t v26 = v24 >> 16;
            int v27 = *(unsigned __int8 *)(v25 + (v24 >> 16));
          }
          int v28 = (char)v27;
          unsigned int v29 = __clz(v27 ^ 0xFF) - 24;
          if (v28 >= 0) {
            LOBYTE(v29) = 1;
          }
          unint64_t v22 = ((v26 + v29) << 16) | 5;
        }
        uint64_t v30 = v2[10];
        unint64_t v31 = *((void *)v30 + 2);
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
          uint64_t v30 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v31 + 1, 1, v30);
        }
        unint64_t v33 = *((void *)v30 + 2);
        unint64_t v32 = *((void *)v30 + 3);
        if (v33 >= v32 >> 1) {
          uint64_t v30 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v32 > 1), v33 + 1, 1, v30);
        }
        *((void *)v30 + 2) = v33 + 1;
        unint64_t v34 = &v30[16 * v33];
        *((void *)v34 + 4) = 0;
        v34[40] = 1;
        v2[10] = v30;
        MEProgram.Builder.buildSave(_:)(v31);
        Compiler.ByteCodeGen.emitMatchScalar(_:)(v23);
        int64_t v35 = *v2;
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
          int64_t v35 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *((void *)v35 + 2) + 1, 1, v35, &demangling cache variable for type metadata for _ContiguousArrayStorage<Instruction>);
        }
        unint64_t v5 = *((void *)v35 + 2);
        unint64_t v36 = *((void *)v35 + 3);
        if (v5 >= v36 >> 1) {
          int64_t v35 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v36 > 1), v5 + 1, 1, v35, &demangling cache variable for type metadata for _ContiguousArrayStorage<Instruction>);
        }
        *((void *)v35 + 2) = v5 + 1;
        *(void *)&v35[8 * v5 + 32] = 0x1200000000000000;
        *uint64_t v2 = v35;
        unint64_t v4 = v41;
        MEProgram.Builder.buildBranch(to:)(v41);
        uint64_t v37 = *((void *)*v2 + 2);
        uint64_t v6 = v2[10];
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
          uint64_t v6 = specialized _ArrayBuffer._consumeAndCreateNew()((uint64_t)v6);
        }
        if (v31 >= *((void *)v6 + 2)) {
          break;
        }
        unint64_t v38 = &v6[16 * v31];
        *((void *)v38 + 4) = v37;
        v38[40] = 0;
        v2[10] = v6;
        uint64_t v21 = (v7 & 0xFFFFFFFFFFFFFFFLL) + 32;
        if ((v22 ^ v14) < 0x4000) {
          goto LABEL_7;
        }
      }
      __break(1u);
LABEL_42:
      __break(1u);
LABEL_43:
      uint64_t v6 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v4 + 1, 1, v6);
    }
LABEL_7:
    swift_bridgeObjectRelease();
    uint64_t result = specialized BidirectionalCollection.last.getter(v39, v40);
    if ((result & 0x100000000) == 0)
    {
      Compiler.ByteCodeGen.emitMatchScalar(_:)(result);
      uint64_t v19 = *((void *)*v2 + 2);
      uint64_t result = swift_isUniquelyReferenced_nonNull_native();
      if ((result & 1) == 0)
      {
        uint64_t result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew()((uint64_t)v6);
        uint64_t v6 = (char *)result;
      }
      if (v4 < *((void *)v6 + 2))
      {
        unint64_t v20 = &v6[16 * v4];
        *((void *)v20 + 4) = v19;
        v20[40] = 0;
        v2[10] = v6;
        return result;
      }
      __break(1u);
    }
    __break(1u);
  }
  return result;
}

uint64_t Compiler.ByteCodeGen.emitCCCMember(_:)(uint64_t a1)
{
  uint64_t v3 = v1;
  uint64_t v5 = type metadata accessor for DSLTree.Atom(0);
  uint64_t v6 = MEMORY[0x270FA5388](v5);
  uint64_t v8 = (unint64_t *)((char *)&v120 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0));
  MEMORY[0x270FA5388](v6);
  unint64_t v10 = (char *)&v120 - v9;
  uint64_t v11 = type metadata accessor for DSLTree.CustomCharacterClass.Member(0);
  LODWORD(v12) = v11;
  MEMORY[0x270FA5388](v11);
  unint64_t v14 = (char *)&v120 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of MEProgram(a1, (uint64_t)v14, type metadata accessor for DSLTree.CustomCharacterClass.Member);
  switch(swift_getEnumCaseMultiPayload())
  {
    case 1u:
      uint64_t v21 = (uint64_t)&v14[*(int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (DSLTree.Atom, DSLTree.Atom))
                                 + 48)];
      unint64_t v22 = DSLTree.CustomCharacterClass.Member.generateConsumer(_:)(*v3);
      if (!v2)
      {
        uint64_t v24 = (uint64_t)v22;
        uint64_t v25 = v23;
        type metadata accessor for Compiler.ByteCodeGen(0);
        MEProgram.Builder.buildConsume(by:)(v24, v25);
        swift_release();
      }
      outlined destroy of MEProgram(v21, type metadata accessor for DSLTree.Atom);
      uint64_t v19 = (uint64_t)v14;
      goto LABEL_81;
    case 2u:
      char v20 = v14[8];
      uint64_t v134 = *(void *)v14;
      char v135 = v20;
      Compiler.ByteCodeGen.emitCustomCharacterClass(_:)(&v134);
      return swift_bridgeObjectRelease();
    case 3u:
      _assertionFailure(_:_:file:line:flags:)();
      __break(1u);
      JUMPOUT(0x209F40C18);
    case 4u:
      uint64_t v18 = type metadata accessor for DSLTree.CustomCharacterClass.Member;
      uint64_t v19 = (uint64_t)v14;
      return outlined destroy of MEProgram(v19, v18);
    case 5u:
      uint64_t v84 = *(void *)v14;
      uint64_t v133 = *(void *)(*(void *)v14 + 16);
      LOBYTE(v54) = *(unsigned char *)(v84 + 24);
      int v28 = *(char ***)(v84 + 32);
      uint64_t v29 = *(unsigned __int8 *)(v84 + 40);
      uint64_t v85 = *(int *)(type metadata accessor for Compiler.ByteCodeGen(0) + 20);
      uint64_t v136 = v3;
      uint64_t v12 = (uint64_t *)((char *)v3 + v85);
      unint64_t v26 = *(uint64_t *)((char *)v3 + v85 + 120);
      if (__OFADD__(v26, 1)) {
        goto LABEL_109;
      }
      v12[15] = v26 + 1;
      uint64_t v3 = (uint64_t *)(v26 | 0x200000000000000);
      a1 = *v12;
      char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
      unint64_t v132 = (unint64_t)v28;
      LODWORD(v131) = v29;
      if (isUniquelyReferenced_nonNull_native) {
        goto LABEL_66;
      }
      goto LABEL_112;
    case 6u:
      a1 = *(void *)(*(void *)v14 + 16);
      unint64_t v26 = *(unsigned __int8 *)(*(void *)v14 + 24);
      uint64_t v27 = *(void *)(*(void *)v14 + 32);
      LODWORD(v12) = *(unsigned __int8 *)(*(void *)v14 + 40);
      int v28 = (char **)((char *)v3 + *(int *)(type metadata accessor for Compiler.ByteCodeGen(0) + 20));
      uint64_t v29 = (uint64_t)v28[15];
      if (__OFADD__(v29, 1))
      {
        __break(1u);
LABEL_108:
        __break(1u);
LABEL_109:
        __break(1u);
      }
      else
      {
        LODWORD(v132) = v26;
        uint64_t v133 = a1;
        v28[15] = (char *)(v29 + 1);
        a1 = (uint64_t)v28[10];
        unint64_t v131 = *(void *)(a1 + 16);
        char v30 = swift_isUniquelyReferenced_nonNull_native();
        uint64_t v130 = v27;
        unint64_t v26 = (unint64_t)v3;
        if (v30) {
          goto LABEL_12;
        }
      }
      a1 = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v131 + 1, 1, (char *)a1);
LABEL_12:
      unint64_t v32 = *(void *)(a1 + 16);
      unint64_t v31 = *(void *)(a1 + 24);
      if (v32 >= v31 >> 1) {
        a1 = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v31 > 1), v32 + 1, 1, (char *)a1);
      }
      *(void *)(a1 + 16) = v32 + 1;
      uint64_t v33 = a1 + 16 * v32;
      *(void *)(v33 + 32) = 0;
      *(unsigned char *)(v33 + 40) = 1;
      v28[10] = (char *)a1;
      unint64_t v34 = *v28;
      char v35 = swift_isUniquelyReferenced_nonNull_native();
      LODWORD(v129) = v12;
      if ((v35 & 1) == 0) {
        unint64_t v34 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *((void *)v34 + 2) + 1, 1, v34, &demangling cache variable for type metadata for _ContiguousArrayStorage<Instruction>);
      }
      unint64_t v37 = *((void *)v34 + 2);
      unint64_t v36 = *((void *)v34 + 3);
      if (v37 >= v36 >> 1) {
        unint64_t v34 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v36 > 1), v37 + 1, 1, v34, &demangling cache variable for type metadata for _ContiguousArrayStorage<Instruction>);
      }
      *((void *)v34 + 2) = v37 + 1;
      *(void *)&v34[8 * v37 + 32] = v29 | 0x200000000000000;
      *int v28 = v34;
      uint64_t v134 = v133;
      char v135 = v132;
      Compiler.ByteCodeGen.emitCustomCharacterClass(_:)(&v134);
      if (v2) {
        return swift_release();
      }
      unint64_t v38 = v26;
      unint64_t v39 = v131;
      MEProgram.Builder.buildSave(_:)(v131);
      uint64_t v40 = v29 | 0x300000000000000;
      uint64_t v41 = *v28;
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
        uint64_t v41 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *((void *)v41 + 2) + 1, 1, v41, &demangling cache variable for type metadata for _ContiguousArrayStorage<Instruction>);
      }
      unint64_t v43 = *((void *)v41 + 2);
      unint64_t v42 = *((void *)v41 + 3);
      unint64_t v44 = v43 + 1;
      if (v43 >= v42 >> 1) {
        uint64_t v41 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v42 > 1), v43 + 1, 1, v41, &demangling cache variable for type metadata for _ContiguousArrayStorage<Instruction>);
      }
      *((void *)v41 + 2) = v44;
      *(void *)&v41[8 * v43 + 32] = v40;
      *int v28 = v41;
      uint64_t v134 = v130;
      char v135 = v129;
      Compiler.ByteCodeGen.emitCustomCharacterClass(_:)(&v134);
      uint64_t v45 = *v28;
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
        uint64_t v45 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *((void *)v45 + 2) + 1, 1, v45, &demangling cache variable for type metadata for _ContiguousArrayStorage<Instruction>);
      }
      unint64_t v47 = *((void *)v45 + 2);
      unint64_t v46 = *((void *)v45 + 3);
      if (v47 >= v46 >> 1) {
        uint64_t v45 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v46 > 1), v47 + 1, 1, v45, &demangling cache variable for type metadata for _ContiguousArrayStorage<Instruction>);
      }
      *((void *)v45 + 2) = v47 + 1;
      *(void *)&v45[8 * v47 + 32] = 0x1200000000000000;
      *int v28 = v45;
      unint64_t v49 = *((void *)v45 + 2);
      unint64_t v48 = *((void *)v45 + 3);
      if (v49 >= v48 >> 1) {
        uint64_t v45 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v48 > 1), v49 + 1, 1, v45, &demangling cache variable for type metadata for _ContiguousArrayStorage<Instruction>);
      }
      *((void *)v45 + 2) = v49 + 1;
      *(void *)&v45[8 * v49 + 32] = 0x1C00000000000000;
      *int v28 = v45;
      uint64_t v50 = *((void *)v45 + 2);
      int64_t v51 = v28[10];
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
        int64_t v51 = specialized _ArrayBuffer._consumeAndCreateNew()((uint64_t)v51);
      }
      if (v39 < *((void *)v51 + 2))
      {
        size_t v52 = &v51[16 * v39];
        *((void *)v52 + 4) = v50;
        v52[40] = 0;
        goto LABEL_106;
      }
      __break(1u);
      goto LABEL_120;
    case 7u:
      uint64_t v53 = *(void *)v14;
      unint64_t v54 = *(void *)(*(void *)v14 + 16);
      LODWORD(v132) = *(unsigned __int8 *)(*(void *)v14 + 24);
      uint64_t v29 = *(void *)(v53 + 32);
      a1 = *(unsigned __int8 *)(v53 + 40);
      int v28 = (char **)((char *)v3 + *(int *)(type metadata accessor for Compiler.ByteCodeGen(0) + 20));
      uint64_t v55 = (uint64_t)v28[15];
      uint64_t v133 = v55;
      unint64_t v26 = v55 + 1;
      if (__OFADD__(v55, 1)) {
        goto LABEL_108;
      }
      v28[15] = (char *)v26;
      uint64_t v12 = (uint64_t *)(v55 + 2);
      if (__OFADD__(v26, 1))
      {
        __break(1u);
LABEL_112:
        a1 = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(void *)(a1 + 16) + 1, 1, (char *)a1, &demangling cache variable for type metadata for _ContiguousArrayStorage<Instruction>);
LABEL_66:
        unint64_t v88 = *(void *)(a1 + 16);
        unint64_t v87 = *(void *)(a1 + 24);
        if (v88 >= v87 >> 1) {
          a1 = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v87 > 1), v88 + 1, 1, (char *)a1, &demangling cache variable for type metadata for _ContiguousArrayStorage<Instruction>);
        }
        *(void *)(a1 + 16) = v88 + 1;
        *(void *)(a1 + 8 * v88 + 32) = v3;
        *uint64_t v12 = a1;
        uint64_t v134 = v133;
        char v135 = v54;
        Compiler.ByteCodeGen.emitCustomCharacterClass(_:)(&v134);
        if (!v2)
        {
          unsigned int v89 = (char *)*v12;
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
            unsigned int v89 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *((void *)v89 + 2) + 1, 1, v89, &demangling cache variable for type metadata for _ContiguousArrayStorage<Instruction>);
          }
          unint64_t v91 = *((void *)v89 + 2);
          unint64_t v90 = *((void *)v89 + 3);
          if (v91 >= v90 >> 1) {
            unsigned int v89 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v90 > 1), v91 + 1, 1, v89, &demangling cache variable for type metadata for _ContiguousArrayStorage<Instruction>);
          }
          *((void *)v89 + 2) = v91 + 1;
          *(void *)&v89[8 * v91 + 32] = v26 | 0x300000000000000;
          *uint64_t v12 = (uint64_t)v89;
          uint64_t v134 = v132;
          char v135 = v131;
          Compiler.ByteCodeGen.emitCustomCharacterClass(_:)(&v134);
        }
        return swift_release();
      }
      unint64_t v131 = v54;
      v28[15] = (char *)v12;
      uint64_t v56 = v55 + 3;
      if (__OFADD__(v12, 1))
      {
        __break(1u);
      }
      else
      {
        int v127 = a1;
        v28[15] = (char *)v56;
        a1 = (uint64_t)v28[10];
        unint64_t v54 = *(void *)(a1 + 16);
        char v57 = swift_isUniquelyReferenced_nonNull_native();
        uint64_t v136 = v3;
        uint64_t v128 = v29;
        if (v57) {
          goto LABEL_37;
        }
      }
      a1 = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v54 + 1, 1, (char *)a1);
LABEL_37:
      unint64_t v59 = *(void *)(a1 + 16);
      unint64_t v58 = *(void *)(a1 + 24);
      unint64_t v124 = v26 + 1;
      if (v59 >= v58 >> 1) {
        a1 = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v58 > 1), v59 + 1, 1, (char *)a1);
      }
      *(void *)(a1 + 16) = v59 + 1;
      uint64_t v60 = a1 + 16 * v59;
      *(void *)(v60 + 32) = 0;
      *(unsigned char *)(v60 + 40) = 1;
      v28[10] = (char *)a1;
      unint64_t v38 = *(void *)(a1 + 16);
      unint64_t v61 = *(void *)(a1 + 24);
      unint64_t v129 = v26;
      if (v38 >= v61 >> 1) {
        a1 = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v61 > 1), v38 + 1, 1, (char *)a1);
      }
      *(void *)(a1 + 16) = v38 + 1;
      uint64_t v123 = 16 * v38;
      unint64_t v62 = a1 + 16 * v38;
      *(void *)(v62 + 32) = 0;
      *(unsigned char *)(v62 + 40) = 1;
      v28[10] = (char *)a1;
      unint64_t v64 = *(void *)(a1 + 16);
      unint64_t v63 = *(void *)(a1 + 24);
      if (v64 >= v63 >> 1) {
        a1 = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v63 > 1), v64 + 1, 1, (char *)a1);
      }
      *(void *)(a1 + 16) = v64 + 1;
      unint64_t v126 = v64;
      uint64_t v122 = 16 * v64;
      unint64_t v65 = a1 + 16 * v64;
      *(void *)(v65 + 32) = 0;
      *(unsigned char *)(v65 + 40) = 1;
      v28[10] = (char *)a1;
      unint64_t v67 = *(void *)(a1 + 16);
      unint64_t v66 = *(void *)(a1 + 24);
      if (v67 >= v66 >> 1) {
        a1 = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v66 > 1), v67 + 1, 1, (char *)a1);
      }
      *(void *)(a1 + 16) = v67 + 1;
      unint64_t v125 = v67;
      uint64_t v121 = 16 * v67;
      unint64_t v68 = a1 + 16 * v67;
      *(void *)(v68 + 32) = 0;
      *(unsigned char *)(v68 + 40) = 1;
      v28[10] = (char *)a1;
      unint64_t v70 = *(void *)(a1 + 16);
      unint64_t v69 = *(void *)(a1 + 24);
      uint64_t v130 = v53;
      if (v70 >= v69 >> 1) {
        a1 = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v69 > 1), v70 + 1, 1, (char *)a1);
      }
      *(void *)(a1 + 16) = v70 + 1;
      uint64_t v120 = 16 * v70;
      unint64_t v71 = a1 + 16 * v70;
      *(void *)(v71 + 32) = 0;
      *(unsigned char *)(v71 + 40) = 1;
      v28[10] = (char *)a1;
      unint64_t v72 = v133 | 0x200000000000000;
      uint64_t v73 = *v28;
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
        uint64_t v73 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *((void *)v73 + 2) + 1, 1, v73, &demangling cache variable for type metadata for _ContiguousArrayStorage<Instruction>);
      }
      unint64_t v75 = *((void *)v73 + 2);
      unint64_t v74 = *((void *)v73 + 3);
      if (v75 >= v74 >> 1) {
        uint64_t v73 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v74 > 1), v75 + 1, 1, v73, &demangling cache variable for type metadata for _ContiguousArrayStorage<Instruction>);
      }
      *((void *)v73 + 2) = v75 + 1;
      *(void *)&v73[8 * v75 + 32] = v72;
      *int v28 = v73;
      MEProgram.Builder.buildSave(_:)(v54);
      uint64_t v134 = v131;
      char v135 = v132;
      Compiler.ByteCodeGen.emitCustomCharacterClass(_:)(&v134);
      if (v2) {
        return swift_release();
      }
      unint64_t v132 = v70;
      unint64_t v49 = (unint64_t)*v28;
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
        unint64_t v49 = (unint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(void *)(v49 + 16) + 1, 1, (char *)v49, &demangling cache variable for type metadata for _ContiguousArrayStorage<Instruction>);
      }
      unint64_t v77 = *(void *)(v49 + 16);
      unint64_t v76 = *(void *)(v49 + 24);
      if (v77 >= v76 >> 1) {
        unint64_t v49 = (unint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v76 > 1), v77 + 1, 1, (char *)v49, &demangling cache variable for type metadata for _ContiguousArrayStorage<Instruction>);
      }
      *(void *)(v49 + 16) = v77 + 1;
      *(void *)(v49 + 8 * v77 + 32) = 0x1200000000000000;
      *int v28 = (char *)v49;
      uint64_t v78 = *(void *)(v49 + 16);
      unint64_t v39 = (unint64_t)v28[10];
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
        unint64_t v39 = (unint64_t)specialized _ArrayBuffer._consumeAndCreateNew()(v39);
      }
      unint64_t v79 = *(void *)(v39 + 16);
      if (v54 >= v79)
      {
        __break(1u);
      }
      else
      {
        unint64_t v80 = v39 + 16 * v54;
        *(void *)(v80 + 32) = v78;
        *(unsigned char *)(v80 + 40) = 0;
        v28[10] = (char *)v39;
        unint64_t v39 = v129;
        uint64_t v78 = v129 | 0x200000000000000;
        unint64_t v72 = *(void *)(v49 + 16);
        unint64_t v79 = *(void *)(v49 + 24);
        unint64_t v54 = v72 + 1;
        if (v72 < v79 >> 1) {
          goto LABEL_60;
        }
      }
      unint64_t v49 = (unint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v79 > 1), v54, 1, (char *)v49, &demangling cache variable for type metadata for _ContiguousArrayStorage<Instruction>);
LABEL_60:
      *(void *)(v49 + 16) = v54;
      *(void *)(v49 + 8 * v72 + 32) = v78;
      *int v28 = (char *)v49;
      uint64_t v81 = v133 | 0x300000000000000;
      unint64_t v83 = *(void *)(v49 + 16);
      unint64_t v82 = *(void *)(v49 + 24);
      unint64_t v44 = v83 + 1;
      if (v83 >= v82 >> 1) {
        unint64_t v49 = (unint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v82 > 1), v83 + 1, 1, (char *)v49, &demangling cache variable for type metadata for _ContiguousArrayStorage<Instruction>);
      }
      *(void *)(v49 + 16) = v44;
      *(void *)(v49 + 8 * v83 + 32) = v81;
      *int v28 = (char *)v49;
      MEProgram.Builder.buildSave(_:)(v38);
      uint64_t v134 = v128;
      char v135 = v127;
      Compiler.ByteCodeGen.emitCustomCharacterClass(_:)(&v134);
      int64_t v51 = *v28;
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
LABEL_120:
      }
        int64_t v51 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *((void *)v51 + 2) + 1, 1, v51, &demangling cache variable for type metadata for _ContiguousArrayStorage<Instruction>);
      unint64_t v96 = *((void *)v51 + 2);
      unint64_t v95 = *((void *)v51 + 3);
      if (v96 >= v95 >> 1) {
        int64_t v51 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v95 > 1), v96 + 1, 1, v51, &demangling cache variable for type metadata for _ContiguousArrayStorage<Instruction>);
      }
      *((void *)v51 + 2) = v96 + 1;
      *(void *)&v51[8 * v96 + 32] = 0x1200000000000000;
      *int v28 = v51;
      uint64_t v97 = *((void *)v51 + 2);
      uint64_t v98 = v28[10];
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
        uint64_t v98 = specialized _ArrayBuffer._consumeAndCreateNew()((uint64_t)v98);
      }
      unint64_t v99 = *((void *)v98 + 2);
      if (v38 >= v99)
      {
        __break(1u);
      }
      else
      {
        unint64_t v49 = v124;
        uint64_t v100 = &v98[v123];
        *((void *)v100 + 4) = v97;
        v100[40] = 0;
        v28[10] = v98;
        uint64_t v97 = v49 | 0x200000000000000;
        unint64_t v44 = *((void *)v51 + 2);
        unint64_t v99 = *((void *)v51 + 3);
        uint64_t v98 = (char *)(v44 + 1);
        if (v44 < v99 >> 1) {
          goto LABEL_90;
        }
      }
      int64_t v51 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v99 > 1), (int64_t)v98, 1, v51, &demangling cache variable for type metadata for _ContiguousArrayStorage<Instruction>);
LABEL_90:
      *((void *)v51 + 2) = v98;
      *(void *)&v51[8 * v44 + 32] = v97;
      *int v28 = v51;
      unint64_t v102 = *((void *)v51 + 2);
      unint64_t v101 = *((void *)v51 + 3);
      if (v102 >= v101 >> 1) {
        int64_t v51 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v101 > 1), v102 + 1, 1, v51, &demangling cache variable for type metadata for _ContiguousArrayStorage<Instruction>);
      }
      *((void *)v51 + 2) = v102 + 1;
      *(void *)&v51[8 * v102 + 32] = v39 | 0x300000000000000;
      *int v28 = v51;
      MEProgram.Builder.buildCondBranch(to:ifSamePositionAs:)(v125, v49);
      MEProgram.Builder.buildCondBranch(to:ifSamePositionAs:)(v126, v133);
      MEProgram.Builder.buildBranch(to:)(v132);
      uint64_t v103 = *v28;
      uint64_t v104 = *((void *)*v28 + 2);
      uint64_t v105 = v28[10];
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
        uint64_t v105 = specialized _ArrayBuffer._consumeAndCreateNew()((uint64_t)v105);
      }
      if (v126 >= *((void *)v105 + 2))
      {
        __break(1u);
      }
      else
      {
        uint64_t v106 = &v105[v122];
        *((void *)v106 + 4) = v104;
        v106[40] = 0;
        v28[10] = v105;
        uint64_t v104 = v49 | 0x300000000000000;
        if (swift_isUniquelyReferenced_nonNull_native()) {
          goto LABEL_96;
        }
      }
      uint64_t v103 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *((void *)v103 + 2) + 1, 1, v103, &demangling cache variable for type metadata for _ContiguousArrayStorage<Instruction>);
LABEL_96:
      unint64_t v108 = *((void *)v103 + 2);
      unint64_t v107 = *((void *)v103 + 3);
      if (v108 >= v107 >> 1) {
        uint64_t v103 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v107 > 1), v108 + 1, 1, v103, &demangling cache variable for type metadata for _ContiguousArrayStorage<Instruction>);
      }
      *((void *)v103 + 2) = v108 + 1;
      *(void *)&v103[8 * v108 + 32] = v104;
      *int v28 = v103;
      MEProgram.Builder.buildBranch(to:)(v132);
      uint64_t v109 = *v28;
      uint64_t v110 = *((void *)*v28 + 2);
      int64_t v51 = v28[10];
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
        int64_t v51 = specialized _ArrayBuffer._consumeAndCreateNew()((uint64_t)v51);
      }
      if (v125 >= *((void *)v51 + 2))
      {
        __break(1u);
      }
      else
      {
        unint64_t v102 = (unint64_t)(v51 + 32);
        uint64_t v111 = &v51[v121 + 32];
        *(void *)uint64_t v111 = v110;
        v111[8] = 0;
        v28[10] = v51;
        if (swift_isUniquelyReferenced_nonNull_native()) {
          goto LABEL_102;
        }
      }
      uint64_t v109 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *((void *)v109 + 2) + 1, 1, v109, &demangling cache variable for type metadata for _ContiguousArrayStorage<Instruction>);
LABEL_102:
      unint64_t v113 = *((void *)v109 + 2);
      unint64_t v112 = *((void *)v109 + 3);
      if (v113 >= v112 >> 1) {
        uint64_t v109 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v112 > 1), v113 + 1, 1, v109, &demangling cache variable for type metadata for _ContiguousArrayStorage<Instruction>);
      }
      *((void *)v109 + 2) = v113 + 1;
      *(void *)&v109[8 * v113 + 32] = 0x1C00000000000000;
      *int v28 = v109;
      unint64_t v93 = *((void *)v51 + 2);
      int v114 = v132;
      if (v132 >= v93)
      {
        __break(1u);
LABEL_128:
        unsigned int v116 = v93 >> 12;
        unsigned int v117 = (v114 | (v93 >> 6) & 0x3F) << 8;
        unsigned int v118 = WORD1(v93);
        unsigned int v94 = (((v117 | (v93 >> 12) & 0x3F) << 8) | (v93 >> 18)) - 2122219023;
        int v119 = (v117 | v116) + 8487393;
        if (!v118) {
          unsigned int v94 = v119;
        }
LABEL_77:
        uint64_t v134 = (v94 + 0xFEFEFEFEFEFEFFLL) & ~(-1 << (8 * (4 - (__clz(v94) >> 3))));
        unint64_t v16 = MEMORY[0x21050F010](&v134);
LABEL_78:
        Compiler.ByteCodeGen.emitCharacterInCCC(_:)(v16, v17);
        return swift_bridgeObjectRelease();
      }
      else
      {
        unint64_t v115 = v102 + v120;
        *(void *)unint64_t v115 = *((void *)v109 + 2);
        *(unsigned char *)(v115 + 8) = 0;
LABEL_106:
        uint64_t result = swift_release();
        v28[10] = v51;
      }
      return result;
    default:
      outlined init with take of DSLTree.QuantificationKind((uint64_t)v14, (uint64_t)v10, type metadata accessor for DSLTree.Atom);
      outlined init with copy of MEProgram((uint64_t)v10, (uint64_t)v8, type metadata accessor for DSLTree.Atom);
      int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
      if (EnumCaseMultiPayload != 1)
      {
        if (!EnumCaseMultiPayload)
        {
          outlined destroy of MEProgram((uint64_t)v10, type metadata accessor for DSLTree.Atom);
          unint64_t v16 = *v8;
          unint64_t v17 = v8[1];
          goto LABEL_78;
        }
        Compiler.ByteCodeGen.emitAtom(_:)((uint64_t)v10);
        outlined destroy of MEProgram((uint64_t)v10, type metadata accessor for DSLTree.Atom);
        uint64_t v19 = (uint64_t)v8;
LABEL_81:
        uint64_t v18 = type metadata accessor for DSLTree.Atom;
        return outlined destroy of MEProgram(v19, v18);
      }
      outlined destroy of MEProgram((uint64_t)v10, type metadata accessor for DSLTree.Atom);
      LODWORD(v93) = *(_DWORD *)v8;
      if (*(_DWORD *)v8 <= 0x7Fu)
      {
        unsigned int v94 = v93 + 1;
        goto LABEL_77;
      }
      int v114 = (*(_DWORD *)v8 & 0x3F) << 8;
      if (v93 < 0x800)
      {
        unsigned int v94 = (v114 | (v93 >> 6)) + 33217;
        goto LABEL_77;
      }
      goto LABEL_128;
  }
}

uint64_t Compiler.ByteCodeGen.emitCustomCharacterClass(_:)(uint64_t a1)
{
  unint64_t v4 = type metadata accessor for DSLTree.CustomCharacterClass.Member(0);
  uint64_t v176 = *(void *)(v4 - 8);
  uint64_t v5 = MEMORY[0x270FA5388](v4);
  uint64_t v6 = MEMORY[0x270FA5388](v5);
  unint64_t v144 = (unint64_t)&v135 - v7;
  uint64_t v8 = MEMORY[0x270FA5388](v6);
  uint64_t v9 = MEMORY[0x270FA5388](v8);
  uint64_t v11 = (char *)&v135 - v10;
  uint64_t v12 = MEMORY[0x270FA5388](v9);
  unint64_t v148 = (char *)&v135 - v13;
  uint64_t v14 = MEMORY[0x270FA5388](v12);
  unint64_t v150 = (uint64_t (*)(uint64_t))((char *)&v135 - v15);
  uint64_t v16 = MEMORY[0x270FA5388](v14);
  uint64_t v138 = (uint64_t (*)(uint64_t))((char *)&v135 - v17);
  uint64_t v18 = MEMORY[0x270FA5388](v16);
  uint64_t v146 = (uint64_t)&v135 - v19;
  uint64_t v20 = MEMORY[0x270FA5388](v18);
  uint64_t v21 = MEMORY[0x270FA5388](v20);
  unint64_t v147 = (uint64_t (*)(uint64_t))((char *)&v135 - v22);
  uint64_t v23 = MEMORY[0x270FA5388](v21);
  uint64_t v160 = (unsigned __int8 *)&v135 - v24;
  uint64_t v25 = MEMORY[0x270FA5388](v23);
  uint64_t v151 = (uint64_t (*)(uint64_t))((char *)&v135 - v26);
  uint64_t v27 = MEMORY[0x270FA5388](v25);
  uint64_t v170 = (uint64_t *)((char *)&v135 - v28);
  uint64_t v29 = MEMORY[0x270FA5388](v27);
  uint64_t v169 = (uint64_t)&v135 - v30;
  MEMORY[0x270FA5388](v29);
  char v35 = (uint64_t (*)(uint64_t))((char *)&v135 - v34);
  uint64_t v36 = *(void *)v1;
  uint64_t v37 = *(void *)(*(void *)v1 + 16);
  if (!v37) {
    goto LABEL_159;
  }
  uint64_t v137 = v31;
  uint64_t v38 = *(void *)a1;
  unint64_t v167 = *(unsigned __int8 *)(a1 + 8);
  int v39 = *(_DWORD *)(v36 + 4 * v37 + 28);
  uint64_t v143 = (_StringProcessing::MatchingOptions *)v1;
  unint64_t v140 = v32;
  uint64_t v139 = v33;
  if ((v39 & 0x10000) != 0) {
    uint64_t v38 = (uint64_t)Compiler.ByteCodeGen.coalescingCustomCharacterClassMembers(_:)(v38);
  }
  else {
    swift_bridgeObjectRetain();
  }
  unint64_t v141 = v4;
  uint64_t v1 = Compiler.ByteCodeGen.flatteningCustomCharacterClassMembers(_:)(v38);
  swift_bridgeObjectRelease();
  uint64_t v40 = (uint64_t *)v1;
  uint64_t v41 = *(unsigned __int8 **)(v1 + 16);
  if (v41)
  {
    uint64_t v166 = v36;
    unint64_t v171 = 0;
    uint64_t v168 = 0;
    a1 = 0;
    uint64_t v2 = v167;
    while (1)
    {
      if (a1 >= (unint64_t)v40[2]) {
        goto LABEL_150;
      }
      unint64_t v42 = v40;
      outlined init with copy of MEProgram((uint64_t)v40+ ((*(unsigned __int8 *)(v176 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v176 + 80))+ *(void *)(v176 + 72) * a1, (uint64_t)v35, type metadata accessor for DSLTree.CustomCharacterClass.Member);
      uint64_t v1 = DSLTree.CustomCharacterClass.Member.asAsciiBitset(_:_:)(v166, v167);
      unint64_t v4 = v43;
      uint64_t v38 = v44;
      outlined destroy of MEProgram((uint64_t)v35, type metadata accessor for DSLTree.CustomCharacterClass.Member);
      if (v1 == 2)
      {
        uint64_t v168 = v4;
        unint64_t v171 = v38;
      }
      else
      {
        if (v2 != 2)
        {
          if ((v2 ^ v1)) {
            goto LABEL_156;
          }
          uint64_t v40 = v42;
          uint64_t v1 = v2 & 1;
          v168 |= v4;
          v171 |= v38;
          goto LABEL_9;
        }
        uint64_t v1 = v2;
      }
      uint64_t v40 = v42;
LABEL_9:
      ++a1;
      uint64_t v2 = v1;
      if (v41 == (unsigned __int8 *)a1) {
        goto LABEL_17;
      }
    }
  }
  uint64_t v168 = 0;
  unint64_t v171 = 0;
  uint64_t v1 = v167;
LABEL_17:
  uint64_t v45 = v40;
  if (v1 != 2)
  {
    uint64_t v46 = type metadata accessor for Compiler.ByteCodeGen(0);
    if ((*((unsigned char *)&v143->stack._rawValue + *(int *)(v46 + 28)) & 1) == 0)
    {
      uint64_t v47 = v46;
      swift_bridgeObjectRelease();
      uint64_t v48 = *((void *)v143->stack._rawValue + 2);
      if (v48)
      {
        char v49 = v1 & 1;
        int v50 = *((_DWORD *)v143->stack._rawValue + v48 + 7);
        uint64_t v45 = (uint64_t *)((char *)v143 + *(int *)(v47 + 20));
        int64_t v51 = (char *)v45[6];
        uint64_t v38 = *((void *)v51 + 2);
        char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
        if ((v50 & 0x10000) != 0)
        {
          if ((isUniquelyReferenced_nonNull_native & 1) == 0) {
            int64_t v51 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v38 + 1, 1, v51);
          }
          unint64_t v129 = *((void *)v51 + 2);
          unint64_t v128 = *((void *)v51 + 3);
          if (v129 >= v128 >> 1) {
            int64_t v51 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v128 > 1), v129 + 1, 1, v51);
          }
          *((void *)v51 + 2) = v129 + 1;
          uint64_t v130 = &v51[24 * v129];
          v130[32] = v49;
          unint64_t v131 = v171;
          *((void *)v130 + 5) = v168;
          *((void *)v130 + 6) = v131;
          v45[6] = (uint64_t)v51;
          uint64_t v1 = 0xA00000000000000;
        }
        else
        {
          if ((isUniquelyReferenced_nonNull_native & 1) == 0) {
            int64_t v51 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v38 + 1, 1, v51);
          }
          unint64_t v54 = *((void *)v51 + 2);
          unint64_t v53 = *((void *)v51 + 3);
          if (v54 >= v53 >> 1) {
            int64_t v51 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v53 > 1), v54 + 1, 1, v51);
          }
          *((void *)v51 + 2) = v54 + 1;
          uint64_t v55 = &v51[24 * v54];
          v55[32] = v49;
          unint64_t v56 = v171;
          *((void *)v55 + 5) = v168;
          *((void *)v55 + 6) = v56;
          v45[6] = (uint64_t)v51;
          uint64_t v1 = 0xA00000000000001;
        }
        uint64_t v47 = *v45;
        uint64_t result = swift_isUniquelyReferenced_nonNull_native();
        if (result) {
          goto LABEL_140;
        }
      }
      else
      {
        __break(1u);
      }
      uint64_t result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(void *)(v47 + 16) + 1, 1, (char *)v47, &demangling cache variable for type metadata for _ContiguousArrayStorage<Instruction>);
      uint64_t v47 = result;
LABEL_140:
      uint64_t v132 = v1 | (v38 << 16);
      unint64_t v134 = *(void *)(v47 + 16);
      unint64_t v133 = *(void *)(v47 + 24);
      if (v134 >= v133 >> 1)
      {
        uint64_t result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v133 > 1), v134 + 1, 1, (char *)v47, &demangling cache variable for type metadata for _ContiguousArrayStorage<Instruction>);
        uint64_t v47 = result;
      }
      *(void *)(v47 + 16) = v134 + 1;
      *(void *)(v47 + 8 * v134 + 32) = v132;
      *uint64_t v45 = v47;
      return result;
    }
  }
  uint64_t v57 = type metadata accessor for Compiler.ByteCodeGen(0);
  char v58 = *((unsigned char *)&v143->stack._rawValue + *(int *)(v57 + 28));
  uint64_t v136 = v57;
  if (v58)
  {
    uint64_t v2 = v141;
    unint64_t v4 = v140;
    uint64_t v1 = (uint64_t)v148;
    uint64_t v60 = v139;
    a1 = (uint64_t)v160;
    unint64_t v59 = v45;
  }
  else
  {
    uint64_t v172 = v45;
    char v173 = v167;
    DSLTree.CustomCharacterClass.coalescingASCIIMembers(_:)((_StringProcessing::MatchingOptions)v143->stack._rawValue);
    swift_bridgeObjectRelease();
    unint64_t v59 = (uint64_t *)v174;
    unint64_t v167 = v175;
    uint64_t v2 = v141;
    unint64_t v4 = v140;
    uint64_t v1 = (uint64_t)v148;
    uint64_t v60 = v139;
    a1 = (uint64_t)v160;
  }
  char v35 = (uint64_t (*)(uint64_t))MEMORY[0x263F8EE78];
  uint64_t v174 = (uint64_t (*)(uint64_t))MEMORY[0x263F8EE78];
  uint64_t v61 = v59[2];
  uint64_t v62 = swift_bridgeObjectRetain();
  uint64_t v165 = v61;
  if (v61)
  {
    unint64_t v63 = 0;
    uint64_t v164 = v62;
LABEL_34:
    if (v63 >= *(void *)(v62 + 16)) {
      goto LABEL_151;
    }
    uint64_t v64 = *(void *)(v176 + 72);
    unint64_t v171 = (*(unsigned __int8 *)(v176 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v176 + 80);
    uint64_t v168 = v63;
    char v35 = type metadata accessor for DSLTree.CustomCharacterClass.Member;
    uint64_t v65 = v169;
    outlined init with copy of MEProgram(v62 + v171 + v64 * v63, v169, type metadata accessor for DSLTree.CustomCharacterClass.Member);
    outlined init with copy of MEProgram(v65, (uint64_t)v170, type metadata accessor for DSLTree.CustomCharacterClass.Member);
    int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
    if (EnumCaseMultiPayload == 4)
    {
      outlined destroy of MEProgram((uint64_t)v170, type metadata accessor for DSLTree.CustomCharacterClass.Member);
LABEL_32:
      outlined destroy of MEProgram(v169, type metadata accessor for DSLTree.CustomCharacterClass.Member);
      goto LABEL_33;
    }
    if (EnumCaseMultiPayload != 2)
    {
      outlined destroy of MEProgram((uint64_t)v170, type metadata accessor for DSLTree.CustomCharacterClass.Member);
      goto LABEL_77;
    }
    uint64_t v67 = *v170;
    uint64_t v155 = *(void *)(*v170 + 16);
    if (!v155)
    {
LABEL_74:
      swift_bridgeObjectRelease();
      goto LABEL_32;
    }
    unint64_t v68 = 0;
    uint64_t v161 = v67;
    uint64_t v162 = v67 + v171;
    while (1)
    {
      if (v68 >= *(void *)(v67 + 16)) {
        goto LABEL_152;
      }
      uint64_t v166 = v68;
      char v35 = v151;
      outlined init with copy of MEProgram(v162 + v68 * v64, (uint64_t)v151, type metadata accessor for DSLTree.CustomCharacterClass.Member);
      outlined init with take of DSLTree.QuantificationKind((uint64_t)v35, a1, type metadata accessor for DSLTree.CustomCharacterClass.Member);
      int v69 = swift_getEnumCaseMultiPayload();
      if (v69 != 2)
      {
        if (v69 != 4)
        {
          outlined destroy of MEProgram(a1, type metadata accessor for DSLTree.CustomCharacterClass.Member);
          swift_bridgeObjectRelease();
          goto LABEL_77;
        }
        outlined destroy of MEProgram(a1, type metadata accessor for DSLTree.CustomCharacterClass.Member);
        goto LABEL_73;
      }
      uint64_t v70 = *(void *)a1;
      uint64_t v152 = *(void *)(*(void *)a1 + 16);
      if (v152) {
        break;
      }
LABEL_72:
      swift_bridgeObjectRelease();
LABEL_73:
      unint64_t v68 = v166 + 1;
      uint64_t v67 = v161;
      if (v166 + 1 == v155) {
        goto LABEL_74;
      }
    }
    unint64_t v71 = 0;
    uint64_t v156 = v70;
    unint64_t v157 = v70 + v171;
    while (1)
    {
      if (v71 >= *(void *)(v70 + 16)) {
        goto LABEL_154;
      }
      unint64_t v163 = v71;
      char v35 = v147;
      outlined init with copy of MEProgram(v157 + v71 * v64, (uint64_t)v147, type metadata accessor for DSLTree.CustomCharacterClass.Member);
      outlined init with take of DSLTree.QuantificationKind((uint64_t)v35, v60, type metadata accessor for DSLTree.CustomCharacterClass.Member);
      int v72 = swift_getEnumCaseMultiPayload();
      if (v72 == 4)
      {
        outlined destroy of MEProgram(v60, type metadata accessor for DSLTree.CustomCharacterClass.Member);
      }
      else
      {
        if (v72 != 2)
        {
          outlined destroy of MEProgram(v60, type metadata accessor for DSLTree.CustomCharacterClass.Member);
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          goto LABEL_77;
        }
        unint64_t v4 = *(void *)v60;
        uint64_t v149 = *(void *)(*(void *)v60 + 16);
        if (v149)
        {
          unint64_t v73 = 0;
          unint64_t v154 = v4 + v171;
          char v35 = v138;
          unint64_t v142 = v4;
          do
          {
            if (v73 >= *(void *)(v4 + 16)) {
              goto LABEL_155;
            }
            uint64_t v74 = v146;
            outlined init with copy of MEProgram(v154 + v73 * v64, v146, type metadata accessor for DSLTree.CustomCharacterClass.Member);
            outlined init with take of DSLTree.QuantificationKind(v74, (uint64_t)v35, type metadata accessor for DSLTree.CustomCharacterClass.Member);
            int v75 = swift_getEnumCaseMultiPayload();
            if (v75 == 4)
            {
              outlined destroy of MEProgram((uint64_t)v35, type metadata accessor for DSLTree.CustomCharacterClass.Member);
            }
            else
            {
              if (v75 != 2)
              {
                outlined destroy of MEProgram((uint64_t)v35, type metadata accessor for DSLTree.CustomCharacterClass.Member);
                swift_bridgeObjectRelease();
                swift_bridgeObjectRelease();
                goto LABEL_86;
              }
              uint64_t v76 = *(void *)v35;
              uint64_t v153 = *(void *)(*(void *)v35 + 16);
              if (v153)
              {
                unint64_t v4 = 0;
                uint64_t v158 = v76;
                uint64_t v159 = v76 + v171;
                do
                {
                  if (v4 >= *(void *)(v76 + 16)) {
                    goto LABEL_153;
                  }
                  char v35 = v150;
                  outlined init with copy of MEProgram(v159 + v4 * v64, (uint64_t)v150, type metadata accessor for DSLTree.CustomCharacterClass.Member);
                  outlined init with take of DSLTree.QuantificationKind((uint64_t)v35, v1, type metadata accessor for DSLTree.CustomCharacterClass.Member);
                  int v77 = swift_getEnumCaseMultiPayload();
                  if (v77 == 4)
                  {
                    outlined destroy of MEProgram(v1, type metadata accessor for DSLTree.CustomCharacterClass.Member);
                  }
                  else
                  {
                    if (v77 != 2)
                    {
                      outlined destroy of MEProgram(v1, type metadata accessor for DSLTree.CustomCharacterClass.Member);
                      swift_bridgeObjectRelease();
                      swift_bridgeObjectRelease();
                      swift_bridgeObjectRelease();
LABEL_86:
                      swift_bridgeObjectRelease();
                      unint64_t v4 = v140;
LABEL_76:
                      uint64_t v60 = v139;
LABEL_77:
                      outlined init with take of DSLTree.QuantificationKind(v169, v4, type metadata accessor for DSLTree.CustomCharacterClass.Member);
                      char v35 = v174;
                      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
                      {
                        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, *((void *)v35 + 2) + 1, 1);
                        uint64_t v1 = (uint64_t)v148;
                        char v35 = v174;
                      }
                      unint64_t v81 = *((void *)v35 + 2);
                      unint64_t v80 = *((void *)v35 + 3);
                      if (v81 >= v80 >> 1)
                      {
                        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v80 > 1, v81 + 1, 1);
                        uint64_t v1 = (uint64_t)v148;
                        char v35 = v174;
                      }
                      *((void *)v35 + 2) = v81 + 1;
                      outlined init with take of DSLTree.QuantificationKind(v4, (uint64_t)v35 + v171 + v81 * v64, type metadata accessor for DSLTree.CustomCharacterClass.Member);
                      a1 = (uint64_t)v160;
LABEL_33:
                      unint64_t v63 = v168 + 1;
                      uint64_t v62 = v164;
                      if (v168 + 1 == v165)
                      {
                        uint64_t v2 = (uint64_t)v174;
                        goto LABEL_89;
                      }
                      goto LABEL_34;
                    }
                    char v35 = 0;
                    uint64_t v2 = *(void *)v1;
                    a1 = *(void *)(*(void *)v1 + 16);
                    uint64_t v78 = *(void *)v1 + v171;
                    while ((uint64_t (*)(uint64_t))a1 != v35)
                    {
                      if ((unint64_t)v35 >= *(void *)(v2 + 16))
                      {
                        __break(1u);
LABEL_150:
                        __break(1u);
LABEL_151:
                        __break(1u);
LABEL_152:
                        __break(1u);
LABEL_153:
                        __break(1u);
LABEL_154:
                        __break(1u);
LABEL_155:
                        __break(1u);
LABEL_156:
                        __break(1u);
                        goto LABEL_157;
                      }
                      char v35 = (uint64_t (*)(uint64_t))((char *)v35 + 1);
                      uint64_t v79 = v78 + v64;
                      outlined init with copy of MEProgram(v78, (uint64_t)v11, type metadata accessor for DSLTree.CustomCharacterClass.Member);
                      uint64_t v1 = DSLTree.CustomCharacterClass.Member.isOnlyTrivia.getter();
                      outlined destroy of MEProgram((uint64_t)v11, type metadata accessor for DSLTree.CustomCharacterClass.Member);
                      uint64_t v78 = v79;
                      if ((v1 & 1) == 0)
                      {
                        swift_bridgeObjectRelease();
                        swift_bridgeObjectRelease();
                        swift_bridgeObjectRelease();
                        swift_bridgeObjectRelease();
                        swift_bridgeObjectRelease();
                        uint64_t v2 = v141;
                        unint64_t v4 = v140;
                        uint64_t v1 = (uint64_t)v148;
                        goto LABEL_76;
                      }
                    }
                    swift_bridgeObjectRelease();
                    uint64_t v2 = v141;
                    uint64_t v1 = (uint64_t)v148;
                    a1 = (uint64_t)v160;
                  }
                  ++v4;
                  uint64_t v76 = v158;
                }
                while (v4 != v153);
              }
              swift_bridgeObjectRelease();
              char v35 = v138;
              unint64_t v4 = v142;
            }
            ++v73;
          }
          while (v73 != v149);
        }
        swift_bridgeObjectRelease();
        unint64_t v4 = v140;
        uint64_t v60 = v139;
      }
      uint64_t v70 = v156;
      unint64_t v71 = v163 + 1;
      if (v163 + 1 == v152) {
        goto LABEL_72;
      }
    }
  }
  uint64_t v2 = (uint64_t)v35;
LABEL_89:
  swift_bridgeObjectRelease_n();
  unint64_t v4 = v144;
  if (!v167)
  {
    specialized Compiler.ByteCodeGen.emitAlternationGen<A>(_:withBacktracking:_:)(v2, (uint64_t)v143);
    return swift_release();
  }
  char v35 = (uint64_t (*)(uint64_t))((char *)v143 + *(int *)(v136 + 20));
  uint64_t v1 = *((void *)v35 + 10);
  a1 = *(void *)(v1 + 16);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
    goto LABEL_160;
  }
  while (1)
  {
    unint64_t v83 = *(void *)(v1 + 16);
    unint64_t v82 = *(void *)(v1 + 24);
    unint64_t v167 = a1;
    if (v83 >= v82 >> 1) {
      uint64_t v1 = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v82 > 1), v83 + 1, 1, (char *)v1);
    }
    *(void *)(v1 + 16) = v83 + 1;
    uint64_t v84 = v1 + 16 * v83;
    *(void *)(v84 + 32) = 0;
    *(unsigned char *)(v84 + 40) = 1;
    *((void *)v35 + 10) = v1;
    uint64_t v168 = specialized Collection.dropLast(_:)(1, v2);
    unint64_t v171 = v85;
    uint64_t v86 = v2;
    uint64_t v2 = v87;
    uint64_t v89 = v88 >> 1;
    uint64_t v169 = v86;
    swift_retain();
    if (v2 == v89) {
      break;
    }
    uint64_t v170 = (uint64_t *)v89;
    while (v2 < v89)
    {
      outlined init with copy of MEProgram(v171 + *(void *)(v176 + 72) * v2, v4, type metadata accessor for DSLTree.CustomCharacterClass.Member);
      unint64_t v110 = *(void *)(v1 + 16);
      unint64_t v109 = *(void *)(v1 + 24);
      if (v110 >= v109 >> 1) {
        uint64_t v1 = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v109 > 1), v110 + 1, 1, (char *)v1);
      }
      *(void *)(v1 + 16) = v110 + 1;
      uint64_t v111 = v1 + 16 * v110;
      *(void *)(v111 + 32) = 0;
      *(unsigned char *)(v111 + 40) = 1;
      *((void *)v35 + 10) = v1;
      unint64_t v112 = *(char **)v35;
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
        unint64_t v112 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *((void *)v112 + 2) + 1, 1, v112, &demangling cache variable for type metadata for _ContiguousArrayStorage<Instruction>);
      }
      unint64_t v114 = *((void *)v112 + 2);
      unint64_t v113 = *((void *)v112 + 3);
      if (v114 >= v113 >> 1) {
        unint64_t v112 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v113 > 1), v114 + 1, 1, v112, &demangling cache variable for type metadata for _ContiguousArrayStorage<Instruction>);
      }
      *((void *)v112 + 2) = v114 + 1;
      *(void *)&v112[8 * v114 + 32] = 0x1000000000000000;
      *(void *)char v35 = v112;
      uint64_t v115 = *((void *)v112 + 2);
      unsigned int v116 = (char *)*((void *)v35 + 11);
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
        unsigned int v116 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *((void *)v116 + 2) + 1, 1, v116);
      }
      unint64_t v118 = *((void *)v116 + 2);
      unint64_t v117 = *((void *)v116 + 3);
      if (v118 >= v117 >> 1) {
        unsigned int v116 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v117 > 1), v118 + 1, 1, v116);
      }
      *((void *)v116 + 2) = v118 + 1;
      int v119 = &v116[32 * v118];
      *((void *)v119 + 4) = v115 - 1;
      *((void *)v119 + 5) = v110;
      *((void *)v119 + 6) = 0;
      v119[56] = 1;
      *((void *)v35 + 11) = v116;
      uint64_t v120 = v144;
      uint64_t v121 = v145;
      Compiler.ByteCodeGen.emitCCCMember(_:)(v144);
      uint64_t v145 = v121;
      if (v121)
      {
        swift_unknownObjectRelease();
        swift_release();
        return outlined destroy of MEProgram(v120, type metadata accessor for DSLTree.CustomCharacterClass.Member);
      }
      outlined destroy of MEProgram(v120, type metadata accessor for DSLTree.CustomCharacterClass.Member);
      uint64_t v122 = *(char **)v35;
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
        uint64_t v122 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *((void *)v122 + 2) + 1, 1, v122, &demangling cache variable for type metadata for _ContiguousArrayStorage<Instruction>);
      }
      unint64_t v124 = *((void *)v122 + 2);
      unint64_t v123 = *((void *)v122 + 3);
      if (v124 >= v123 >> 1) {
        uint64_t v122 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v123 > 1), v124 + 1, 1, v122, &demangling cache variable for type metadata for _ContiguousArrayStorage<Instruction>);
      }
      *((void *)v122 + 2) = v124 + 1;
      *(void *)&v122[8 * v124 + 32] = 0x1200000000000000;
      *(void *)char v35 = v122;
      unint64_t v126 = *((void *)v122 + 2);
      unint64_t v125 = *((void *)v122 + 3);
      if (v126 >= v125 >> 1) {
        uint64_t v122 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v125 > 1), v126 + 1, 1, v122, &demangling cache variable for type metadata for _ContiguousArrayStorage<Instruction>);
      }
      *((void *)v122 + 2) = v126 + 1;
      *(void *)&v122[8 * v126 + 32] = 0x1C00000000000000;
      *(void *)char v35 = v122;
      a1 = *((void *)v122 + 2);
      uint64_t v1 = *((void *)v35 + 10);
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
        uint64_t v1 = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew()(v1);
      }
      unint64_t v4 = v144;
      if (v110 >= *(void *)(v1 + 16)) {
        goto LABEL_158;
      }
      uint64_t v127 = v1 + 16 * v110;
      *(void *)(v127 + 32) = a1;
      ++v2;
      *(unsigned char *)(v127 + 40) = 0;
      *((void *)v35 + 10) = v1;
      uint64_t v89 = (uint64_t)v170;
      if (v170 == (uint64_t *)v2) {
        goto LABEL_94;
      }
    }
LABEL_157:
    __break(1u);
LABEL_158:
    __break(1u);
LABEL_159:
    __break(1u);
LABEL_160:
    uint64_t v1 = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, a1 + 1, 1, (char *)v1);
  }
LABEL_94:
  swift_unknownObjectRelease();
  unint64_t v90 = v167;
  MEProgram.Builder.buildSave(_:)(v167);
  uint64_t v91 = *(void *)(v169 + 16);
  if (!v91)
  {
    uint64_t result = swift_release();
    __break(1u);
    return result;
  }
  uint64_t v92 = v137;
  outlined init with copy of MEProgram(v169+ ((*(unsigned __int8 *)(v176 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v176 + 80))+ *(void *)(v176 + 72) * (v91 - 1), v137, type metadata accessor for DSLTree.CustomCharacterClass.Member);
  swift_release();
  uint64_t v93 = v145;
  Compiler.ByteCodeGen.emitCCCMember(_:)(v92);
  uint64_t result = outlined destroy of MEProgram(v92, type metadata accessor for DSLTree.CustomCharacterClass.Member);
  if (!v93)
  {
    unint64_t v95 = *(char **)v35;
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
      unint64_t v95 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *((void *)v95 + 2) + 1, 1, v95, &demangling cache variable for type metadata for _ContiguousArrayStorage<Instruction>);
    }
    unint64_t v97 = *((void *)v95 + 2);
    unint64_t v96 = *((void *)v95 + 3);
    if (v97 >= v96 >> 1) {
      unint64_t v95 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v96 > 1), v97 + 1, 1, v95, &demangling cache variable for type metadata for _ContiguousArrayStorage<Instruction>);
    }
    *((void *)v95 + 2) = v97 + 1;
    *(void *)&v95[8 * v97 + 32] = 0x1200000000000000;
    *(void *)char v35 = v95;
    unint64_t v99 = *((void *)v95 + 2);
    unint64_t v98 = *((void *)v95 + 3);
    if (v99 >= v98 >> 1) {
      unint64_t v95 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v98 > 1), v99 + 1, 1, v95, &demangling cache variable for type metadata for _ContiguousArrayStorage<Instruction>);
    }
    *((void *)v95 + 2) = v99 + 1;
    *(void *)&v95[8 * v99 + 32] = 0x1C00000000000000;
    *(void *)char v35 = v95;
    int64_t v100 = *((void *)v95 + 2);
    unint64_t v101 = *((void *)v35 + 10);
    uint64_t result = swift_isUniquelyReferenced_nonNull_native();
    if ((result & 1) == 0)
    {
      uint64_t result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew()(v101);
      unint64_t v101 = result;
    }
    unint64_t v102 = v143;
    unint64_t rawValue = *(void *)(v101 + 16);
    if (v90 >= rawValue)
    {
      __break(1u);
    }
    else
    {
      unint64_t v104 = v101 + 16 * v90;
      *(void *)(v104 + 32) = v100;
      *(unsigned char *)(v104 + 40) = 0;
      *((void *)v35 + 10) = v101;
      unint64_t rawValue = (unint64_t)v102->stack._rawValue;
      uint64_t v105 = *((void *)v102->stack._rawValue + 2);
      if (v105)
      {
        int v106 = *(_DWORD *)(rawValue + 4 * v105 + 28);
        unint64_t v101 = *((void *)v95 + 2);
        unint64_t rawValue = *((void *)v95 + 3);
        int64_t v100 = v101 + 1;
        if ((v106 & 0x10000) != 0)
        {
          if (rawValue >> 1 <= v101)
          {
            uint64_t result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(rawValue > 1), v101 + 1, 1, v95, &demangling cache variable for type metadata for _ContiguousArrayStorage<Instruction>);
            unint64_t v95 = (char *)result;
          }
          *((void *)v95 + 2) = v100;
          unint64_t v107 = &v95[8 * v101];
          uint64_t v108 = 0x700000000010000;
          goto LABEL_147;
        }
        if (rawValue >> 1 > v101)
        {
LABEL_108:
          *((void *)v95 + 2) = v100;
          unint64_t v107 = &v95[8 * v101];
          uint64_t v108 = 0x700000000010001;
LABEL_147:
          *((void *)v107 + 4) = v108;
          *(void *)char v35 = v95;
          return result;
        }
LABEL_165:
        uint64_t result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(rawValue > 1), v100, 1, v95, &demangling cache variable for type metadata for _ContiguousArrayStorage<Instruction>);
        unint64_t v95 = (char *)result;
        goto LABEL_108;
      }
    }
    __break(1u);
    goto LABEL_165;
  }
  return result;
}

uint64_t (*DSLTree.CustomCharacterClass.Member.generateConsumer(_:)(uint64_t a1))()
{
  uint64_t v2 = v1;
  uint64_t v4 = type metadata accessor for DSLTree.Atom(0);
  uint64_t v5 = MEMORY[0x270FA5388](v4);
  uint64_t v7 = (char *)&v45 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v5);
  uint64_t v9 = (char *)&v45 - v8;
  uint64_t v10 = type metadata accessor for DSLTree.CustomCharacterClass.Member(0);
  MEMORY[0x270FA5388](v10);
  uint64_t v12 = (uint64_t (*)(uint64_t))((char *)&v45 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0));
  outlined init with copy of MEProgram(v2, (uint64_t)v12, type metadata accessor for DSLTree.CustomCharacterClass.Member);
  switch(swift_getEnumCaseMultiPayload())
  {
    case 1u:
      uint64_t v13 = (uint64_t)v12
          + *(int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (DSLTree.Atom, DSLTree.Atom))
                   + 48);
      outlined init with take of DSLTree.QuantificationKind((uint64_t)v12, (uint64_t)v9, type metadata accessor for DSLTree.Atom);
      outlined init with take of DSLTree.QuantificationKind(v13, (uint64_t)v7, type metadata accessor for DSLTree.Atom);
      uint64_t v14 = DSLTree.Atom.literalCharacterValue.getter();
      if (!v15)
      {
        outlined destroy of MEProgram((uint64_t)v7, type metadata accessor for DSLTree.Atom);
        uint64_t v45 = 0;
        unint64_t v46 = 0xE000000000000000;
        _print_unlocked<A, B>(_:_:)();
        outlined destroy of MEProgram((uint64_t)v9, type metadata accessor for DSLTree.Atom);
        v33._Swift::Int countAndFlagsBits = 0x676E6172206E6920;
        v33._object = (void *)0xE900000000000065;
        String.append(_:)(v33);
        uint64_t v34 = v45;
        unint64_t v35 = v46;
        type metadata accessor for Unsupported();
        lazy protocol witness table accessor for type AST.Quantification.Kind and conformance AST.Quantification.Kind(&lazy protocol witness table cache variable for type Unsupported and conformance Unsupported, MEMORY[0x263F8F860]);
        swift_allocError();
        uint64_t v28 = v34;
        unint64_t v29 = v35;
        uint64_t v30 = 189;
        goto LABEL_18;
      }
      unint64_t v16 = v14;
      unint64_t v17 = v15;
      uint64_t v18 = DSLTree.Atom.literalCharacterValue.getter();
      if (!v19)
      {
        outlined destroy of MEProgram((uint64_t)v9, type metadata accessor for DSLTree.Atom);
        swift_bridgeObjectRelease();
        uint64_t v45 = 0;
        unint64_t v46 = 0xE000000000000000;
        _print_unlocked<A, B>(_:_:)();
        outlined destroy of MEProgram((uint64_t)v7, type metadata accessor for DSLTree.Atom);
        v37._Swift::Int countAndFlagsBits = 0x676E6172206E6920;
        v37._object = (void *)0xE900000000000065;
        String.append(_:)(v37);
        uint64_t v38 = v45;
        unint64_t v39 = v46;
        type metadata accessor for Unsupported();
        lazy protocol witness table accessor for type AST.Quantification.Kind and conformance AST.Quantification.Kind(&lazy protocol witness table cache variable for type Unsupported and conformance Unsupported, MEMORY[0x263F8F860]);
        swift_allocError();
        uint64_t v28 = v38;
        unint64_t v29 = v39;
        uint64_t v30 = 192;
        goto LABEL_18;
      }
      uint64_t v12 = (uint64_t (*)(uint64_t))v18;
      unint64_t v20 = v19;
      if ((Character.hasExactlyOneScalar.getter() & 1) == 0) {
        goto LABEL_15;
      }
      unint64_t v21 = specialized Collection.first.getter(v16, v17);
      if ((v21 & 0x100000000) != 0) {
        goto LABEL_26;
      }
      unint64_t v47 = v21;
      if ((Unicode.Scalar.isNFC.getter(v21) & 1) == 0)
      {
LABEL_15:
        swift_bridgeObjectRelease();
        outlined destroy of MEProgram((uint64_t)v7, type metadata accessor for DSLTree.Atom);
        outlined destroy of MEProgram((uint64_t)v9, type metadata accessor for DSLTree.Atom);
        lazy protocol witness table accessor for type RegexCompilationError and conformance RegexCompilationError();
        swift_allocError();
        *(void *)uint64_t v36 = v16;
        *(void *)(v36 + 8) = v17;
LABEL_16:
        *(unsigned char *)(v36 + 16) = 1;
        return (uint64_t (*)())swift_willThrow();
      }
      swift_bridgeObjectRelease();
      if ((Character.hasExactlyOneScalar.getter() & 1) == 0) {
        goto LABEL_20;
      }
      unint64_t v22 = specialized Collection.first.getter((unint64_t)v12, v20);
      if ((v22 & 0x100000000) != 0) {
        goto LABEL_27;
      }
      unsigned int v23 = v22;
      if ((Unicode.Scalar.isNFC.getter(v22) & 1) == 0)
      {
LABEL_20:
        outlined destroy of MEProgram((uint64_t)v7, type metadata accessor for DSLTree.Atom);
        outlined destroy of MEProgram((uint64_t)v9, type metadata accessor for DSLTree.Atom);
        lazy protocol witness table accessor for type RegexCompilationError and conformance RegexCompilationError();
        swift_allocError();
        *(void *)uint64_t v36 = v12;
        *(void *)(v36 + 8) = v20;
        goto LABEL_16;
      }
      swift_bridgeObjectRelease();
      if (v23 < v47)
      {
        uint64_t v45 = 0;
        unint64_t v46 = 0xE000000000000000;
        _StringGuts.grow(_:)(19);
        v24._Swift::Int countAndFlagsBits = 0x2064696C61766E49;
        v24._object = (void *)0xEE002065676E6172;
        String.append(_:)(v24);
        _print_unlocked<A, B>(_:_:)();
        outlined destroy of MEProgram((uint64_t)v9, type metadata accessor for DSLTree.Atom);
        v25._Swift::Int countAndFlagsBits = 45;
        v25._object = (void *)0xE100000000000000;
        String.append(_:)(v25);
        _print_unlocked<A, B>(_:_:)();
        outlined destroy of MEProgram((uint64_t)v7, type metadata accessor for DSLTree.Atom);
        uint64_t v26 = v45;
        unint64_t v27 = v46;
        type metadata accessor for Unsupported();
        lazy protocol witness table accessor for type AST.Quantification.Kind and conformance AST.Quantification.Kind(&lazy protocol witness table cache variable for type Unsupported and conformance Unsupported, MEMORY[0x263F8F860]);
        swift_allocError();
        uint64_t v28 = v26;
        unint64_t v29 = v27;
        uint64_t v30 = 203;
LABEL_18:
        MEMORY[0x21050E6B0](v28, v29, "/Library/Caches/com.apple.xbs/Sources/swiftlang_overlay_Platform_Device/swift-experimental-string-processing/Sources/_StringProcessing/ConsumerInterface.swift", 158, 2, v30);
        return (uint64_t (*)())swift_willThrow();
      }
      uint64_t v12 = type metadata accessor for DSLTree.Atom;
      outlined destroy of MEProgram((uint64_t)v7, type metadata accessor for DSLTree.Atom);
      outlined destroy of MEProgram((uint64_t)v9, type metadata accessor for DSLTree.Atom);
      uint64_t v40 = *(void *)(a1 + 16);
      if (!v40)
      {
        __break(1u);
LABEL_26:
        __break(1u);
LABEL_27:
        __break(1u);
LABEL_28:
        outlined destroy of MEProgram((uint64_t)v12, type metadata accessor for DSLTree.CustomCharacterClass.Member);
LABEL_29:
        _assertionFailure(_:_:file:line:flags:)();
        __break(1u);
        JUMPOUT(0x209F42954);
      }
      int v41 = *(_DWORD *)(a1 + 4 * v40 + 28);
      char v42 = v41 & 1;
      if ((v41 & 0x10000) != 0)
      {
        uint64_t v44 = swift_allocObject();
        *(unsigned char *)(v44 + 16) = 1;
        *(_DWORD *)(v44 + 20) = v47;
        *(_DWORD *)(v44 + 24) = v23;
        *(unsigned char *)(v44 + 28) = v42;
        return closure #1 in DSLTree.CustomCharacterClass.Member.generateConsumer(_:)partial apply;
      }
      else
      {
        uint64_t v43 = swift_allocObject();
        *(unsigned char *)(v43 + 16) = 0;
        *(_DWORD *)(v43 + 20) = v47;
        *(_DWORD *)(v43 + 24) = v23;
        *(unsigned char *)(v43 + 28) = v42;
        return (uint64_t (*)())partial apply for closure #1 in DSLTree.CustomCharacterClass.Member.generateConsumer(_:);
      }
    case 3u:
      goto LABEL_29;
    case 4u:
      outlined destroy of MEProgram((uint64_t)v12, type metadata accessor for DSLTree.CustomCharacterClass.Member);
      return closure #2 in DSLTree.CustomCharacterClass.Member.generateConsumer(_:);
    default:
      goto LABEL_28;
  }
}

_StringProcessing::DSLTree::CustomCharacterClass __swiftcall DSLTree.CustomCharacterClass.coalescingASCIIMembers(_:)(_StringProcessing::MatchingOptions a1)
{
  unint64_t rawValue = a1.stack._rawValue;
  uint64_t v3 = v1;
  uint64_t v4 = type metadata accessor for DSLTree.CustomCharacterClass.Member(0);
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v6 = (void *)MEMORY[0x270FA5388](v4);
  uint64_t v9 = (char *)v30 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = *(void *)v2;
  LODWORD(v8) = v2[8];
  uint64_t v11 = *(void *)(*(void *)v2 + 16);
  unint64_t v32 = v3;
  uint64_t v33 = v11;
  int v31 = v8;
  v30[1] = v6;
  if (v11)
  {
    unint64_t v12 = 0;
    uint64_t v13 = (void *)MEMORY[0x263F8EE78];
    uint64_t v14 = (void *)MEMORY[0x263F8EE78];
    while (v12 < *(void *)(v10 + 16))
    {
      unint64_t v24 = (*(unsigned __int8 *)(v5 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80);
      uint64_t v25 = *(void *)(v5 + 72);
      outlined init with copy of MEProgram(v10 + v24 + v25 * v12, (uint64_t)v9, type metadata accessor for DSLTree.CustomCharacterClass.Member);
      if (DSLTree.CustomCharacterClass.Member.asAsciiBitset(_:_:)((uint64_t)rawValue, 0) == 2)
      {
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
          uint64_t v13 = (void *)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v13[2] + 1, 1, v13, &demangling cache variable for type metadata for _ContiguousArrayStorage<DSLTree.CustomCharacterClass.Member>, type metadata accessor for DSLTree.CustomCharacterClass.Member);
        }
        unint64_t v27 = v13[2];
        unint64_t v26 = v13[3];
        unint64_t v28 = v27 + 1;
        if (v27 >= v26 >> 1)
        {
          size_t v23 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(v26 > 1, v27 + 1, 1, v13, &demangling cache variable for type metadata for _ContiguousArrayStorage<DSLTree.CustomCharacterClass.Member>, type metadata accessor for DSLTree.CustomCharacterClass.Member);
          uint64_t v13 = (void *)v23;
        }
        else
        {
          size_t v23 = (size_t)v13;
        }
      }
      else
      {
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
          uint64_t v14 = (void *)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v14[2] + 1, 1, v14, &demangling cache variable for type metadata for _ContiguousArrayStorage<DSLTree.CustomCharacterClass.Member>, type metadata accessor for DSLTree.CustomCharacterClass.Member);
        }
        unint64_t v27 = v14[2];
        unint64_t v29 = v14[3];
        unint64_t v28 = v27 + 1;
        if (v27 >= v29 >> 1)
        {
          size_t v23 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(v29 > 1, v27 + 1, 1, v14, &demangling cache variable for type metadata for _ContiguousArrayStorage<DSLTree.CustomCharacterClass.Member>, type metadata accessor for DSLTree.CustomCharacterClass.Member);
          uint64_t v14 = (void *)v23;
        }
        else
        {
          size_t v23 = (size_t)v14;
        }
      }
      ++v12;
      *(void *)(v23 + 16) = v28;
      uint64_t v6 = (void *)outlined init with take of DSLTree.QuantificationKind((uint64_t)v9, v23 + v24 + v27 * v25, type metadata accessor for DSLTree.CustomCharacterClass.Member);
      if (v33 == v12) {
        goto LABEL_4;
      }
    }
    __break(1u);
  }
  else
  {
    uint64_t v14 = (void *)MEMORY[0x263F8EE78];
    uint64_t v13 = (void *)MEMORY[0x263F8EE78];
LABEL_4:
    if (v14[2] && v13[2])
    {
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<DSLTree.CustomCharacterClass.Member>);
      uint64_t v15 = *(void *)(v5 + 72);
      unint64_t v16 = (*(unsigned __int8 *)(v5 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80);
      uint64_t v17 = swift_allocObject();
      *(_OWORD *)(v17 + 16) = xmmword_209FAFD80;
      unint64_t v18 = v17 + v16;
      *(void *)unint64_t v18 = v14;
      *(unsigned char *)(v18 + 8) = 0;
      swift_storeEnumTagMultiPayload();
      uint64_t v19 = v17 + v16 + v15;
      *(void *)uint64_t v19 = v13;
      *(unsigned char *)(v19 + 8) = 0;
      uint64_t v6 = (void *)swift_storeEnumTagMultiPayload();
      unint64_t v20 = v32;
      *unint64_t v32 = v17;
      *((unsigned char *)v20 + 8) = v31;
    }
    else
    {
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      unint64_t v21 = v32;
      char v22 = v31;
      *unint64_t v32 = v10;
      *((unsigned char *)v21 + 8) = v22;
      uint64_t v6 = (void *)swift_bridgeObjectRetain();
    }
  }
  result.members._unint64_t rawValue = v6;
  result.isInverted = v7;
  return result;
}

uint64_t DSLTree.CustomCharacterClass.Member.isOnlyTrivia.getter()
{
  uint64_t v1 = v0;
  uint64_t v2 = type metadata accessor for DSLTree.CustomCharacterClass.Member(0);
  uint64_t v3 = *(void *)(v2 - 8);
  uint64_t v4 = MEMORY[0x270FA5388](v2);
  uint64_t v6 = (char *)&v16 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v4);
  uint64_t v8 = (uint64_t *)((char *)&v16 - v7);
  outlined init with copy of MEProgram(v1, (uint64_t)&v16 - v7, type metadata accessor for DSLTree.CustomCharacterClass.Member);
  uint64_t result = swift_getEnumCaseMultiPayload();
  if (result == 4)
  {
    outlined destroy of MEProgram((uint64_t)v8, type metadata accessor for DSLTree.CustomCharacterClass.Member);
    return 1;
  }
  else if (result == 2)
  {
    unint64_t v10 = 0;
    uint64_t v11 = *v8;
    uint64_t v12 = *(void *)(v11 + 16);
    while (1)
    {
      if (v12 == v10)
      {
        swift_bridgeObjectRelease();
        return 1;
      }
      if (v10 >= *(void *)(v11 + 16)) {
        break;
      }
      unint64_t v13 = v10 + 1;
      uint64_t v14 = outlined init with copy of MEProgram(v11+ ((*(unsigned __int8 *)(v3 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80))+ *(void *)(v3 + 72) * v10, (uint64_t)v6, type metadata accessor for DSLTree.CustomCharacterClass.Member);
      char v15 = DSLTree.CustomCharacterClass.Member.isOnlyTrivia.getter(v14);
      uint64_t result = outlined destroy of MEProgram((uint64_t)v6, type metadata accessor for DSLTree.CustomCharacterClass.Member);
      unint64_t v10 = v13;
      if ((v15 & 1) == 0)
      {
        swift_bridgeObjectRelease();
        return 0;
      }
    }
    __break(1u);
  }
  else
  {
    outlined destroy of MEProgram((uint64_t)v8, type metadata accessor for DSLTree.CustomCharacterClass.Member);
    return 0;
  }
  return result;
}

uint64_t specialized _ArrayProtocol.filter(_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = v2;
  uint64_t v6 = type metadata accessor for DSLTree.CustomCharacterClass.Member(0);
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = MEMORY[0x270FA5388](v6 - 8);
  uint64_t v23 = (uint64_t)&v20 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t result = MEMORY[0x270FA5388](v8);
  uint64_t v12 = (char *)&v20 - v11;
  uint64_t v13 = MEMORY[0x263F8EE78];
  uint64_t v24 = MEMORY[0x263F8EE78];
  uint64_t v22 = *(void *)(a1 + 16);
  if (v22)
  {
    unint64_t v14 = 0;
    uint64_t v20 = a2;
    uint64_t v21 = a1;
    while (v14 < *(void *)(a1 + 16))
    {
      unint64_t v15 = (*(unsigned __int8 *)(v7 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80);
      uint64_t v16 = *(void *)(v7 + 72);
      outlined init with copy of MEProgram(a1 + v15 + v16 * v14, (uint64_t)v12, type metadata accessor for DSLTree.CustomCharacterClass.Member);
      char v17 = closure #1 in PrettyPrinter.printAsPattern(_:wrap:terminateLine:)((uint64_t)v12);
      if (v3)
      {
        outlined destroy of MEProgram((uint64_t)v12, type metadata accessor for DSLTree.CustomCharacterClass.Member);
        swift_release();
        swift_bridgeObjectRelease();
        return v13;
      }
      if (v17)
      {
        outlined init with take of DSLTree.QuantificationKind((uint64_t)v12, v23, type metadata accessor for DSLTree.CustomCharacterClass.Member);
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
          specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(void *)(v13 + 16) + 1, 1);
        }
        uint64_t v13 = v24;
        unint64_t v19 = *(void *)(v24 + 16);
        unint64_t v18 = *(void *)(v24 + 24);
        if (v19 >= v18 >> 1)
        {
          specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v18 > 1, v19 + 1, 1);
          uint64_t v13 = v24;
        }
        *(void *)(v13 + 16) = v19 + 1;
        uint64_t result = outlined init with take of DSLTree.QuantificationKind(v23, v13 + v15 + v19 * v16, type metadata accessor for DSLTree.CustomCharacterClass.Member);
        uint64_t v3 = 0;
        a1 = v21;
      }
      else
      {
        uint64_t result = outlined destroy of MEProgram((uint64_t)v12, type metadata accessor for DSLTree.CustomCharacterClass.Member);
      }
      if (v22 == ++v14)
      {
        uint64_t v13 = v24;
        goto LABEL_15;
      }
    }
    __break(1u);
  }
  else
  {
LABEL_15:
    swift_bridgeObjectRelease();
    return v13;
  }
  return result;
}

uint64_t Compiler.ByteCodeGen.emitConcatenation(_:)(uint64_t a1)
{
  uint64_t v67 = type metadata accessor for DSLTree.Atom(0);
  uint64_t v3 = MEMORY[0x270FA5388](v67);
  uint64_t v66 = (uint64_t)&v61 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v3);
  uint64_t v68 = (uint64_t)&v61 - v5;
  uint64_t v6 = *(void *)(a1 + 16);
  uint64_t v64 = v1;
  if (v6)
  {
    unint64_t v7 = a1 + 32;
    uint64_t v8 = (char *)MEMORY[0x263F8EE78];
    while (1)
    {
      unint64_t v9 = *(void *)v7;
      v7 += 8;
      swift_retain();
      unint64_t v10 = flatten #1 (_:) in Compiler.ByteCodeGen.emitConcatenation(_:)(v9);
      swift_release();
      uint64_t v11 = *(void *)(v10 + 16);
      int64_t v12 = *((void *)v8 + 2);
      uint64_t v13 = (char *)(v12 + v11);
      if (__OFADD__(v12, v11))
      {
LABEL_71:
        __break(1u);
LABEL_72:
        __break(1u);
LABEL_73:
        __break(1u);
LABEL_74:
        __break(1u);
LABEL_75:
        __break(1u);
LABEL_76:
        uint64_t v13 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *((void *)v13 + 2) + 1, 1, v13);
LABEL_58:
        uint64_t v55 = v63;
        unint64_t v57 = *((void *)v13 + 2);
        unint64_t v56 = *((void *)v13 + 3);
        char v58 = (unint64_t *)(v57 + 1);
        if (v57 >= v56 >> 1) {
          uint64_t v13 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v56 > 1), v57 + 1, 1, v13);
        }
        *((void *)v13 + 2) = v58;
        *(void *)&v13[8 * v57 + 32] = v7 | 0x5000000000000000;
        goto LABEL_63;
      }
      char isUniquelyReferenced_nonNull_native = (char *)swift_isUniquelyReferenced_nonNull_native();
      if (isUniquelyReferenced_nonNull_native && (uint64_t)v13 <= *((void *)v8 + 3) >> 1)
      {
        if (!*(void *)(v10 + 16)) {
          goto LABEL_3;
        }
      }
      else
      {
        if (v12 <= (uint64_t)v13) {
          int64_t v15 = v12 + v11;
        }
        else {
          int64_t v15 = v12;
        }
        uint64_t v8 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(isUniquelyReferenced_nonNull_native, v15, 1, v8);
        if (!*(void *)(v10 + 16))
        {
LABEL_3:
          swift_bridgeObjectRelease();
          if (v11) {
            goto LABEL_72;
          }
          goto LABEL_4;
        }
      }
      if ((*((void *)v8 + 3) >> 1) - *((void *)v8 + 2) < v11) {
        goto LABEL_74;
      }
      swift_arrayInitWithCopy();
      swift_bridgeObjectRelease();
      if (v11)
      {
        uint64_t v16 = *((void *)v8 + 2);
        BOOL v17 = __OFADD__(v16, v11);
        uint64_t v18 = v16 + v11;
        if (v17) {
          goto LABEL_75;
        }
        *((void *)v8 + 2) = v18;
      }
LABEL_4:
      if (!--v6) {
        goto LABEL_19;
      }
    }
  }
  uint64_t v8 = (char *)MEMORY[0x263F8EE78];
LABEL_19:
  unint64_t v69 = 0;
  unint64_t v70 = 0xE000000000000000;
  uint64_t v13 = (char *)*((void *)v8 + 2);
  if (!v13)
  {
    uint64_t v65 = (char *)MEMORY[0x263F8EE78];
    goto LABEL_62;
  }
  unint64_t v19 = 0;
  uint64_t v62 = (unint64_t *)(v13 - 1);
  uint64_t v65 = (char *)MEMORY[0x263F8EE78];
  while (2)
  {
    char v20 = 0;
    unint64_t v7 = (unint64_t)v19;
    while (1)
    {
      if (v7 >= *((void *)v8 + 2))
      {
        __break(1u);
        goto LABEL_71;
      }
      unint64_t v24 = *(void *)&v8[8 * v7 + 32];
      int v25 = (v24 >> 59) & 0x1E | (v24 >> 2) & 1;
      if (v25 == 10)
      {
        uint64_t v21 = *(void *)((v24 & 0xFFFFFFFFFFFFFFBLL) + 0x10);
        uint64_t v22 = *(void **)((v24 & 0xFFFFFFFFFFFFFFBLL) + 0x18);
        swift_retain();
        v23._Swift::Int countAndFlagsBits = v21;
        v23._object = v22;
        String.append(_:)(v23);
        swift_release();
        goto LABEL_23;
      }
      if (v25 == 9) {
        break;
      }
      if (v25 != 8) {
        goto LABEL_43;
      }
      unint64_t v26 = v13;
      uint64_t v27 = swift_projectBox();
      uint64_t v28 = v68;
      outlined init with copy of MEProgram(v27, v68, type metadata accessor for DSLTree.Atom);
      uint64_t v29 = v66;
      outlined init with copy of MEProgram(v28, v66, type metadata accessor for DSLTree.Atom);
      int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
      if (EnumCaseMultiPayload)
      {
        uint64_t v13 = v26;
        if (EnumCaseMultiPayload != 1)
        {
          swift_retain();
          outlined destroy of MEProgram(v29, type metadata accessor for DSLTree.Atom);
          outlined destroy of MEProgram(v68, type metadata accessor for DSLTree.Atom);
          if (v20) {
            goto LABEL_44;
          }
          goto LABEL_50;
        }
        unsigned int v31 = *(_DWORD *)v29;
        if (*(_DWORD *)v29 >= 0x80u)
        {
          int v39 = (*(_DWORD *)v29 & 0x3F) << 8;
          if (v31 >= 0x800)
          {
            unsigned int v40 = v31 >> 12;
            int v41 = (v39 | (v31 >> 6) & 0x3F) << 8;
            unsigned int v42 = HIWORD(v31);
            unsigned int v32 = (((v41 | (v31 >> 12) & 0x3F) << 8) | (v31 >> 18)) - 2122219023;
            int v43 = (v41 | v40) + 8487393;
            if (!v42) {
              unsigned int v32 = v43;
            }
          }
          else
          {
            unsigned int v32 = (v39 | (v31 >> 6)) + 33217;
          }
        }
        else
        {
          unsigned int v32 = v31 + 1;
        }
        unsigned int v33 = __clz(v32);
        uint64_t v34 = 4 - (v33 >> 3);
        uint64_t v71 = (v32 + 0xFEFEFEFEFEFEFFLL) & ~(-1 << (8 * (4 - (v33 >> 3))));
        swift_retain();
        uint64_t v35 = MEMORY[0x21050F010](&v71, v34);
        uint64_t v37 = v36;
      }
      else
      {
        uint64_t v35 = *(void *)v29;
        uint64_t v37 = *(void *)(v29 + 8);
        swift_retain();
        uint64_t v13 = v26;
      }
      outlined destroy of MEProgram(v68, type metadata accessor for DSLTree.Atom);
      MEMORY[0x21050F090](v35, v37);
      swift_release();
      swift_bridgeObjectRelease();
LABEL_23:
      ++v7;
      char v20 = 1;
      if (v13 == (char *)v7)
      {
        swift_bridgeObjectRelease();
        unint64_t v53 = v69;
        unint64_t v54 = v70;
        unint64_t v7 = swift_allocObject();
        *(void *)(v7 + 16) = v53;
        *(void *)(v7 + 24) = v54;
        uint64_t v13 = v65;
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
          goto LABEL_76;
        }
        goto LABEL_58;
      }
    }
    uint64_t v38 = v69 & 0xFFFFFFFFFFFFLL;
    if ((v70 & 0x2000000000000000) != 0) {
      uint64_t v38 = HIBYTE(v70) & 0xF;
    }
    if (v38) {
      goto LABEL_23;
    }
LABEL_43:
    swift_retain();
    if ((v20 & 1) == 0)
    {
LABEL_50:
      char v49 = v65;
      goto LABEL_51;
    }
LABEL_44:
    unint64_t v44 = v69;
    unint64_t v45 = v70;
    uint64_t v46 = swift_allocObject();
    *(void *)(v46 + 16) = v44;
    *(void *)(v46 + 24) = v45;
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
      uint64_t v65 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *((void *)v65 + 2) + 1, 1, v65);
    }
    unint64_t v48 = *((void *)v65 + 2);
    unint64_t v47 = *((void *)v65 + 3);
    if (v48 >= v47 >> 1) {
      uint64_t v65 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v47 > 1), v48 + 1, 1, v65);
    }
    char v49 = v65;
    *((void *)v65 + 2) = v48 + 1;
    *(void *)&v49[8 * v48 + 32] = v46 | 0x5000000000000000;
    unint64_t v69 = 0;
    unint64_t v70 = 0xE000000000000000;
LABEL_51:
    uint64_t v65 = v49;
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
      uint64_t v65 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *((void *)v65 + 2) + 1, 1, v65);
    }
    unint64_t v51 = *((void *)v65 + 2);
    unint64_t v50 = *((void *)v65 + 3);
    if (v51 >= v50 >> 1) {
      uint64_t v65 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v50 > 1), v51 + 1, 1, v65);
    }
    unint64_t v19 = (unint64_t *)(v7 + 1);
    size_t v52 = v65;
    *((void *)v65 + 2) = v51 + 1;
    *(void *)&v52[8 * v51 + 32] = v24;
    if (v62 != (unint64_t *)v7) {
      continue;
    }
    break;
  }
LABEL_62:
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v13 = v65;
  char v58 = (unint64_t *)*((void *)v65 + 2);
  uint64_t v55 = v63;
  if (v58)
  {
LABEL_63:
    unint64_t v7 = 0;
    while (1)
    {
      if (v7 >= *((void *)v13 + 2)) {
        goto LABEL_73;
      }
      uint64_t v59 = *(void *)&v13[8 * v7 + 32];
      swift_retain();
      Compiler.ByteCodeGen.emitNode(_:)(v59);
      if (v55) {
        break;
      }
      swift_release();
      if (v58 == (unint64_t *)++v7) {
        return swift_bridgeObjectRelease();
      }
    }
    swift_release();
  }
  return swift_bridgeObjectRelease();
}

unint64_t flatten #1 (_:) in Compiler.ByteCodeGen.emitConcatenation(_:)(unint64_t result)
{
  unint64_t v1 = result;
  int v2 = (result >> 59) & 0x1E | (result >> 2) & 1;
  if (v2 == 12)
  {
    uint64_t v16 = (uint64_t *)swift_projectBox();
LABEL_24:
    uint64_t v17 = *v16;
    swift_retain();
    uint64_t v6 = flatten #1 (_:) in Compiler.ByteCodeGen.emitConcatenation(_:)(v17);
    swift_release();
    return v6;
  }
  if (v2 == 4)
  {
    uint64_t v16 = (uint64_t *)((result & 0xFFFFFFFFFFFFFFBLL) + 16);
    goto LABEL_24;
  }
  if (v2 != 1)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<DSLTree.Node>);
    uint64_t v6 = swift_allocObject();
    *(_OWORD *)(v6 + 16) = xmmword_209FAFD60;
    *(void *)(v6 + 32) = v1;
    swift_retain();
    return v6;
  }
  uint64_t v3 = *(void *)((result & 0xFFFFFFFFFFFFFFBLL) + 0x10);
  uint64_t v4 = *(void *)(v3 + 16);
  if (!v4) {
    return MEMORY[0x263F8EE78];
  }
  unint64_t v5 = 0;
  uint64_t v6 = MEMORY[0x263F8EE78];
  while (v5 < *(void *)(v3 + 16))
  {
    uint64_t v7 = *(void *)(v3 + 32 + 8 * v5);
    swift_retain();
    uint64_t v8 = flatten #1 (_:) in Compiler.ByteCodeGen.emitConcatenation(_:)(v7);
    uint64_t result = swift_release();
    uint64_t v9 = *(void *)(v8 + 16);
    int64_t v10 = *(void *)(v6 + 16);
    int64_t v11 = v10 + v9;
    if (__OFADD__(v10, v9)) {
      goto LABEL_29;
    }
    uint64_t result = swift_isUniquelyReferenced_nonNull_native();
    if (result && v11 <= *(void *)(v6 + 24) >> 1)
    {
      if (*(void *)(v8 + 16)) {
        goto LABEL_18;
      }
    }
    else
    {
      if (v10 <= v11) {
        int64_t v12 = v10 + v9;
      }
      else {
        int64_t v12 = v10;
      }
      uint64_t result = (unint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)result, v12, 1, (char *)v6);
      uint64_t v6 = result;
      if (*(void *)(v8 + 16))
      {
LABEL_18:
        if ((*(void *)(v6 + 24) >> 1) - *(void *)(v6 + 16) < v9) {
          goto LABEL_31;
        }
        swift_arrayInitWithCopy();
        uint64_t result = swift_bridgeObjectRelease();
        if (v9)
        {
          uint64_t v13 = *(void *)(v6 + 16);
          BOOL v14 = __OFADD__(v13, v9);
          uint64_t v15 = v13 + v9;
          if (v14) {
            goto LABEL_32;
          }
          *(void *)(v6 + 16) = v15;
        }
        goto LABEL_7;
      }
    }
    uint64_t result = swift_bridgeObjectRelease();
    if (v9) {
      goto LABEL_30;
    }
LABEL_7:
    if (v4 == ++v5) {
      return v6;
    }
  }
  __break(1u);
LABEL_29:
  __break(1u);
LABEL_30:
  __break(1u);
LABEL_31:
  __break(1u);
LABEL_32:
  __break(1u);
  return result;
}

uint64_t DSLTree.Atom.literalCharacterValue.getter()
{
  uint64_t v1 = type metadata accessor for DSLTree.Atom(0);
  MEMORY[0x270FA5388](v1);
  uint64_t v3 = (char *)&v13 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of MEProgram(v0, (uint64_t)v3, type metadata accessor for DSLTree.Atom);
  int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  if (EnumCaseMultiPayload == 1)
  {
    unsigned int v6 = *(_DWORD *)v3;
    if (*(_DWORD *)v3 > 0x7Fu)
    {
      int v8 = (*(_DWORD *)v3 & 0x3F) << 8;
      if (v6 >= 0x800)
      {
        unsigned int v9 = v6 >> 12;
        int v10 = (v8 | (v6 >> 6) & 0x3F) << 8;
        unsigned int v11 = HIWORD(v6);
        unsigned int v7 = (((v10 | (v6 >> 12) & 0x3F) << 8) | (v6 >> 18)) - 2122219023;
        int v12 = (v10 | v9) + 8487393;
        if (!v11) {
          unsigned int v7 = v12;
        }
      }
      else
      {
        unsigned int v7 = (v8 | (v6 >> 6)) + 33217;
      }
    }
    else
    {
      unsigned int v7 = v6 + 1;
    }
    uint64_t v14 = (v7 + 0xFEFEFEFEFEFEFFLL) & ~(-1 << (8 * (4 - (__clz(v7) >> 3))));
    return MEMORY[0x21050F010](&v14);
  }
  else if (EnumCaseMultiPayload)
  {
    outlined destroy of MEProgram((uint64_t)v3, type metadata accessor for DSLTree.Atom);
    return 0;
  }
  else
  {
    return *(void *)v3;
  }
}

uint64_t CaptureTransform.callAsFunction(_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  outlined init with take of CaptureTransform.Closure((long long *)(v4 + 16), (uint64_t)&v13);
  outlined init with take of CaptureTransform.Closure(&v13, (uint64_t)&v14);
  switch(v15)
  {
    case 1:
    case 3:
      uint64_t result = v14(a1, a2, a3, a4);
      break;
    default:
      unsigned int v9 = v14;
      v12[3] = MEMORY[0x263F8D980];
      int v10 = (void *)swift_allocObject();
      v12[0] = v10;
      v10[2] = a1;
      v10[3] = a2;
      void v10[4] = a3;
      v10[5] = a4;
      swift_bridgeObjectRetain();
      ((void (*)(void *))v9)(v12);
      uint64_t result = __swift_destroy_boxed_opaque_existential_0((uint64_t)v12);
      break;
  }
  return result;
}

_OWORD *constructExistentialOutputComponent(from:component:optionalCount:)@<X0>(uint64_t a1@<X2>, uint64_t a2@<X3>, uint64_t *a3@<X8>)
{
  outlined init with copy of (range: Range<String.Index>, value: Any?)?(a1, (uint64_t)&v28, &demangling cache variable for type metadata for (range: Range<String.Index>, value: Any?)?);
  if (v31 == 1)
  {
    uint64_t result = (_OWORD *)outlined destroy of (range: Range<String.Index>, value: Any?)?((uint64_t)&v28, &demangling cache variable for type metadata for (range: Range<String.Index>, value: Any?)?);
    if (a2 >= 1)
    {
      uint64_t v6 = static TypeConstruction.optionalType<A>(of:depth:)();
      a3[3] = type metadata accessor for Optional();
      boxed_opaque_existential_0 = __swift_allocate_boxed_opaque_existential_0(a3);
      return (_OWORD *)(*(uint64_t (**)(uint64_t *, uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 56))(boxed_opaque_existential_0, 1, 1, v6);
    }
    goto LABEL_11;
  }
  uint64_t v8 = v28;
  uint64_t v9 = v29;
  uint64_t v32 = v28;
  uint64_t v33 = v29;
  outlined init with take of Any?((uint64_t)&v30, (uint64_t)v34);
  uint64_t v28 = v8;
  uint64_t v29 = v9;
  outlined init with copy of Any?((uint64_t)v34, (uint64_t)&v30);
  v24[0] = v8;
  v24[1] = v9;
  outlined init with take of Any?((uint64_t)v34, (uint64_t)&v25);
  outlined destroy of (range: Range<String.Index>, value: Any?)?((uint64_t)v24, &demangling cache variable for type metadata for (range: Range<String.Index>, value: Any?));
  if (!v31)
  {
    uint64_t v14 = String.subscript.getter();
    uint64_t v16 = v15;
    uint64_t v18 = v17;
    uint64_t v20 = v19;
    uint64_t v27 = MEMORY[0x263F8D980];
    uint64_t v21 = (void *)swift_allocObject();
    *(void *)&long long v26 = v21;
    uint64_t v21[2] = v14;
    v21[3] = v16;
    v21[4] = v18;
    v21[5] = v20;
    uint64_t result = (_OWORD *)outlined destroy of Any?((uint64_t)&v30);
    if ((a2 & 0x8000000000000000) == 0) {
      goto LABEL_6;
    }
LABEL_10:
    __break(1u);
LABEL_11:
    __break(1u);
    return result;
  }
  uint64_t result = outlined init with take of Any(&v30, &v26);
  if (a2 < 0) {
    goto LABEL_10;
  }
LABEL_6:
  while (a2)
  {
    outlined init with copy of Any((uint64_t)&v26, (uint64_t)v22);
    uint64_t v10 = v23;
    unsigned int v11 = __swift_project_boxed_opaque_existential_0(v22, v23);
    uint64_t v36 = type metadata accessor for Optional();
    int v12 = __swift_allocate_boxed_opaque_existential_0(v35);
    uint64_t v13 = *(void *)(v10 - 8);
    (*(void (**)(uint64_t *, void *, uint64_t))(v13 + 16))(v12, v11, v10);
    (*(void (**)(uint64_t *, void, uint64_t, uint64_t))(v13 + 56))(v12, 0, 1, v10);
    __swift_destroy_boxed_opaque_existential_0((uint64_t)&v26);
    outlined init with take of Any(v35, &v26);
    __swift_destroy_boxed_opaque_existential_0((uint64_t)v22);
    --a2;
  }
  return outlined init with take of Any(&v26, a3);
}

void *CaptureTransform.callAsFunction(_:)@<X0>(uint64_t a1@<X0>, _OWORD *a2@<X8>)
{
  void (*v7)(long long *__return_ptr);
  void (*v8)(long long *__return_ptr);
  void v9[4];
  long long v10;
  uint64_t v11;
  _OWORD v12[2];
  long long v13;
  void (*v14)(long long *__return_ptr);
  char v15;

  outlined init with take of CaptureTransform.Closure((long long *)(v2 + 16), (uint64_t)&v13);
  outlined init with take of CaptureTransform.Closure(&v13, (uint64_t)&v14);
  switch(v15)
  {
    case 1:
      unsigned int v7 = v14;
      outlined init with copy of Any(a1, (uint64_t)v9);
      swift_dynamicCast();
      v7(&v10);
      uint64_t result = (void *)swift_bridgeObjectRelease();
      if (!v3) {
        goto LABEL_5;
      }
      break;
    case 2:
      uint64_t result = ((void *(*)(_OWORD *__return_ptr, uint64_t))v14)(v12, a1);
      if (!v3) {
        goto LABEL_8;
      }
      break;
    case 3:
      uint64_t v8 = v14;
      outlined init with copy of Any(a1, (uint64_t)&v10);
      swift_dynamicCast();
      ((void (*)(_OWORD *__return_ptr, void, void, void, void))v8)(v12, v9[0], v9[1], v9[2], v9[3]);
      uint64_t result = (void *)swift_bridgeObjectRelease();
      if (!v3) {
        uint64_t result = (void *)outlined init with take of Any?((uint64_t)v12, (uint64_t)a2);
      }
      break;
    default:
      uint64_t result = ((void *(*)(long long *__return_ptr, uint64_t))v14)(&v10, a1);
      if (!v3)
      {
LABEL_5:
        if (v11)
        {
          outlined init with take of Any(&v10, v12);
LABEL_8:
          uint64_t result = outlined init with take of Any(v12, a2);
        }
        else
        {
          uint64_t result = (void *)outlined destroy of Any?((uint64_t)&v10);
          *a2 = 0u;
          a2[1] = 0u;
        }
      }
      break;
  }
  return result;
}

uint64_t DSLTree.CustomCharacterClass.containsDot.getter()
{
  uint64_t v1 = type metadata accessor for DSLTree.CustomCharacterClass.Member(0);
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = MEMORY[0x270FA5388](v1);
  uint64_t v22 = (uint64_t)&v21 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = MEMORY[0x270FA5388](v3);
  unsigned int v7 = (char *)&v21 - v6;
  uint64_t v8 = MEMORY[0x270FA5388](v5);
  uint64_t v10 = (char *)&v21 - v9;
  uint64_t result = MEMORY[0x270FA5388](v8);
  uint64_t v13 = (char *)&v21 - v12;
  uint64_t v14 = *v0;
  uint64_t v15 = *(void *)(*v0 + 16);
  if (!v15) {
    return 0;
  }
  unint64_t v16 = 0;
  while (v16 < *(void *)(v14 + 16))
  {
    outlined init with copy of MEProgram(v14+ ((*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80))+ *(void *)(v2 + 72) * v16, (uint64_t)v13, type metadata accessor for DSLTree.CustomCharacterClass.Member);
    outlined init with take of DSLTree.QuantificationKind((uint64_t)v13, (uint64_t)v10, type metadata accessor for DSLTree.CustomCharacterClass.Member);
    int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
    if (EnumCaseMultiPayload == 2)
    {
      uint64_t v18 = v22;
      uint64_t v19 = outlined init with copy of MEProgram((uint64_t)v10, v22, type metadata accessor for DSLTree.CustomCharacterClass.Member);
      char v20 = *(unsigned char *)(v18 + 8);
      uint64_t v23 = *(void *)v18;
      char v24 = v20;
      LOBYTE(v18) = DSLTree.CustomCharacterClass.containsDot.getter(v19);
      swift_bridgeObjectRelease();
      uint64_t result = outlined destroy of MEProgram((uint64_t)v10, type metadata accessor for DSLTree.CustomCharacterClass.Member);
      if (v18) {
        return 1;
      }
    }
    else
    {
      if (!EnumCaseMultiPayload)
      {
        outlined init with copy of MEProgram((uint64_t)v10, (uint64_t)v7, type metadata accessor for DSLTree.CustomCharacterClass.Member);
        type metadata accessor for DSLTree.Atom(0);
        if (swift_getEnumCaseMultiPayload() == 10)
        {
          outlined destroy of MEProgram((uint64_t)v10, type metadata accessor for DSLTree.CustomCharacterClass.Member);
          return 1;
        }
        outlined destroy of MEProgram((uint64_t)v7, type metadata accessor for DSLTree.Atom);
      }
      uint64_t result = outlined destroy of MEProgram((uint64_t)v10, type metadata accessor for DSLTree.CustomCharacterClass.Member);
    }
    if (v15 == ++v16) {
      return 0;
    }
  }
  __break(1u);
  return result;
}

uint64_t DSLTree.CustomCharacterClass.guaranteesForwardProgress.getter()
{
  uint64_t v1 = type metadata accessor for DSLTree.CustomCharacterClass.Member(0);
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t result = MEMORY[0x270FA5388](v1);
  uint64_t v5 = (char *)&v21 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = *v0;
  uint64_t v7 = *(void *)(v6 + 16);
  if (v7)
  {
    unint64_t v8 = 0;
    while (1)
    {
      if (v8 >= *(void *)(v6 + 16))
      {
        __break(1u);
        return result;
      }
      outlined init with copy of MEProgram(v6+ ((*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80))+ *(void *)(v2 + 72) * v8, (uint64_t)v5, type metadata accessor for DSLTree.CustomCharacterClass.Member);
      uint64_t EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
      if (EnumCaseMultiPayload != 4) {
        break;
      }
      ++v8;
      uint64_t result = outlined destroy of MEProgram((uint64_t)v5, type metadata accessor for DSLTree.CustomCharacterClass.Member);
      if (v7 == v8) {
        goto LABEL_15;
      }
    }
    if (EnumCaseMultiPayload != 5)
    {
      if (EnumCaseMultiPayload == 6)
      {
        char v20 = *(unsigned char *)(*(void *)v5 + 24);
        uint64_t v21 = *(void *)(*(void *)v5 + 16);
        char v22 = v20;
        char v19 = DSLTree.CustomCharacterClass.guaranteesForwardProgress.getter(EnumCaseMultiPayload, v10);
        swift_release();
        return v19 & 1;
      }
      if (EnumCaseMultiPayload != 7)
      {
        outlined destroy of MEProgram((uint64_t)v5, type metadata accessor for DSLTree.CustomCharacterClass.Member);
        char v19 = 1;
        return v19 & 1;
      }
    }
    uint64_t v11 = *(void *)(*(void *)v5 + 16);
    char v12 = *(unsigned char *)(*(void *)v5 + 24);
    uint64_t v13 = *(void *)(*(void *)v5 + 32);
    char v14 = *(unsigned char *)(*(void *)v5 + 40);
    uint64_t v21 = v11;
    char v22 = v12;
    uint64_t v15 = swift_bridgeObjectRetain();
    uint64_t v17 = DSLTree.CustomCharacterClass.guaranteesForwardProgress.getter(v15, v16);
    if (v17)
    {
      uint64_t v21 = v13;
      char v22 = v14;
      char v19 = DSLTree.CustomCharacterClass.guaranteesForwardProgress.getter(v17, v18);
      swift_release();
      swift_bridgeObjectRelease();
      return v19 & 1;
    }
    swift_release();
    swift_bridgeObjectRelease();
  }
LABEL_15:
  char v19 = 0;
  return v19 & 1;
}

uint64_t AnyRegexOutput.Element.range.getter()
{
  outlined init with copy of (range: Range<String.Index>, value: Any?)?(v0 + 8, (uint64_t)&v3, &demangling cache variable for type metadata for (range: Range<String.Index>, value: Any?)?);
  if (v4[3] == 1)
  {
    outlined destroy of (range: Range<String.Index>, value: Any?)?((uint64_t)&v3, &demangling cache variable for type metadata for (range: Range<String.Index>, value: Any?)?);
    return 0;
  }
  else
  {
    uint64_t v1 = v3;
    outlined destroy of Any?((uint64_t)v4);
  }
  return v1;
}

uint64_t specialized Sequence<>.existentialOutput(from:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  uint64_t v12 = MEMORY[0x263F8EE78];
  uint64_t v43 = MEMORY[0x263F8EE78];
  swift_bridgeObjectRetain();
  uint64_t result = swift_bridgeObjectRetain();
  unint64_t v14 = *(void *)(a5 + 16);
  uint64_t v28 = a6;
  if (v14)
  {
    unint64_t v15 = 0;
    uint64_t v16 = a5 + 32;
    while (v15 < v14)
    {
      outlined init with copy of AnyRegexOutput.ElementRepresentation(v16, (uint64_t)&v29);
      *((void *)&v34 + 1) = a3;
      uint64_t v42 = a4;
      long long v36 = v29;
      long long v37 = v30;
      long long v38 = v31;
      long long v39 = v32;
      long long v40 = v33;
      long long v41 = v34;
      if (BYTE1(v34) == 1)
      {
        uint64_t v17 = a1;
        uint64_t v18 = a2;
        long long v33 = v40;
        long long v34 = v41;
        uint64_t v35 = v42;
        long long v29 = v36;
        long long v30 = v37;
        long long v31 = v38;
        long long v32 = v39;
        swift_bridgeObjectRetain();
        uint64_t result = swift_isUniquelyReferenced_nonNull_native();
        if ((result & 1) == 0) {
          uint64_t result = (uint64_t)specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(void *)(v12 + 16) + 1, 1);
        }
        uint64_t v12 = v43;
        unint64_t v20 = *(void *)(v43 + 16);
        unint64_t v19 = *(void *)(v43 + 24);
        if (v20 >= v19 >> 1)
        {
          uint64_t result = (uint64_t)specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v19 > 1), v20 + 1, 1);
          uint64_t v12 = v43;
        }
        *(void *)(v12 + 16) = v20 + 1;
        uint64_t v21 = v12 + 104 * v20;
        *(_OWORD *)(v21 + 80) = v32;
        *(_OWORD *)(v21 + 96) = v33;
        *(_OWORD *)(v21 + 112) = v34;
        *(void *)(v21 + 128) = v35;
        *(_OWORD *)(v21 + 32) = v29;
        *(_OWORD *)(v21 + 48) = v30;
        *(_OWORD *)(v21 + 64) = v31;
        a2 = v18;
        a1 = v17;
      }
      else
      {
        swift_bridgeObjectRetain();
        uint64_t result = outlined destroy of AnyRegexOutput.Element((uint64_t)&v36);
      }
      ++v15;
      unint64_t v14 = *(void *)(a5 + 16);
      v16 += 88;
      if (v15 == v14) {
        goto LABEL_12;
      }
    }
    __break(1u);
    goto LABEL_26;
  }
LABEL_12:
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  int64_t v22 = *(void *)(v12 + 16);
  if (v22)
  {
    uint64_t v43 = MEMORY[0x263F8EE78];
    uint64_t result = (uint64_t)specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v22, 0);
    unint64_t v23 = 0;
    uint64_t v24 = v12 + 32;
    while (v23 < *(void *)(v12 + 16))
    {
      outlined init with copy of AnyRegexOutput.Element(v24, (uint64_t)&v36);
      constructExistentialOutputComponent(from:component:optionalCount:)((uint64_t)&v36 + 8, v36, (uint64_t *)&v29);
      outlined destroy of AnyRegexOutput.Element((uint64_t)&v36);
      uint64_t v25 = v43;
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(void *)(v25 + 16) + 1, 1);
        uint64_t v25 = v43;
      }
      unint64_t v27 = *(void *)(v25 + 16);
      unint64_t v26 = *(void *)(v25 + 24);
      if (v27 >= v26 >> 1)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v26 > 1), v27 + 1, 1);
        uint64_t v25 = v43;
      }
      ++v23;
      *(void *)(v25 + 16) = v27 + 1;
      uint64_t result = (uint64_t)outlined init with take of Any(&v29, (_OWORD *)(v25 + 32 * v27 + 32));
      v24 += 104;
      if (v22 == v23)
      {
        swift_release();
        goto LABEL_22;
      }
    }
LABEL_26:
    __break(1u);
    return result;
  }
  swift_release();
  uint64_t v25 = MEMORY[0x263F8EE78];
LABEL_22:
  if (*(void *)(v25 + 16) == 1)
  {
    outlined init with copy of Any(v25 + 32, v28);
    return swift_bridgeObjectRelease();
  }
  else
  {
    *(void *)&long long v36 = v25;
    swift_getCanonicalSpecializedMetadata();
    lazy protocol witness table accessor for type PartialRangeUpTo<String.Index> and conformance PartialRangeUpTo<A>(&lazy protocol witness table cache variable for type [Any] and conformance [A]);
    return static TypeConstruction.tuple<A>(of:)();
  }
}

uint64_t Compiler.emit()@<X0>(uint64_t a1@<X8>)
{
  uint64_t v29 = a1;
  uint64_t v2 = type metadata accessor for CaptureList();
  uint64_t v27 = *(void *)(v2 - 8);
  uint64_t v28 = v2;
  MEMORY[0x270FA5388](v2);
  uint64_t v4 = (char *)&v23 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v25 = v4;
  uint64_t v5 = type metadata accessor for Compiler.ByteCodeGen(0);
  uint64_t v6 = (int *)(v5 - 8);
  uint64_t v7 = MEMORY[0x270FA5388](v5);
  uint64_t v9 = (uint64_t *)((char *)&v23 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0));
  MEMORY[0x270FA5388](v7);
  uint64_t v11 = (char *)&v23 - v10;
  unint64_t v26 = v1;
  uint64_t v12 = v1[4];
  uint64_t v24 = v1[3];
  unint64_t v30 = v1[2];
  swift_bridgeObjectRetain();
  static CaptureList.Builder.build(_:)(&v30, (uint64_t)v4);
  uint64_t v13 = (char *)v9 + v6[7];
  uint64_t v14 = MEMORY[0x263F8EE78];
  *(void *)uint64_t v13 = MEMORY[0x263F8EE78];
  *((_WORD *)v13 + 4) = 0;
  *((void *)v13 + 2) = specialized Dictionary.init(dictionaryLiteral:)(v14);
  *((void *)v13 + 3) = v14;
  *((void *)v13 + 4) = specialized Dictionary.init(dictionaryLiteral:)(v14);
  *((void *)v13 + 5) = v14;
  *((void *)v13 + 6) = v14;
  *((void *)v13 + 7) = v14;
  *((void *)v13 + 8) = v14;
  *((void *)v13 + 9) = v14;
  *((void *)v13 + 10) = v14;
  *((void *)v13 + 11) = v14;
  *((_OWORD *)v13 + 6) = 0u;
  *((_OWORD *)v13 + 7) = 0u;
  *((void *)v13 + 16) = 0;
  v13[136] = 1;
  unint64_t v15 = (int *)type metadata accessor for MEProgram.Builder(0);
  uint64_t v16 = &v13[v15[20]];
  CaptureList.init(arrayLiteral:)();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<MatchingOptions.Representation>);
  uint64_t v17 = swift_allocObject();
  *(_OWORD *)(v17 + 16) = xmmword_209FAFD60;
  uint64_t v18 = v15[21];
  *(_DWORD *)(v17 + 32) = 81984;
  *(void *)&v13[v18] = v17;
  v13[v15[22]] = 0;
  uint64_t v19 = v15[23];
  *(void *)&v13[v19] = specialized Dictionary.init(dictionaryLiteral:)(v14);
  uint64_t v20 = v15[24];
  *(void *)&v13[v20] = specialized Dictionary.init(dictionaryLiteral:)(v14);
  *((unsigned char *)v9 + v6[8]) = 0;
  uint64_t v21 = v25;
  *uint64_t v9 = v24;
  *(void *)((char *)v9 + v6[9]) = v12;
  (*(void (**)(char *, char *, uint64_t))(v27 + 40))(v16, v21, v28);
  v13[8] = (v12 & 2) != 0;
  v13[9] = (v12 & 4) != 0;
  outlined init with take of DSLTree.QuantificationKind((uint64_t)v9, (uint64_t)v11, type metadata accessor for Compiler.ByteCodeGen);
  Compiler.ByteCodeGen.emitRoot(_:)(v26[2], v29);
  outlined destroy of MEProgram((uint64_t)v11, type metadata accessor for Compiler.ByteCodeGen);
  return swift_release();
}

uint64_t Compiler.__deallocating_deinit()
{
  swift_release();
  swift_bridgeObjectRelease();

  return MEMORY[0x270FA0228](v0, 40, 7);
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance AnyHashableType()
{
  return _typeName(_:qualified:)();
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance AnyHashableType()
{
  Swift::UInt v1 = *v0;
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v1);
  return Hasher._finalize()();
}

void protocol witness for Hashable.hash(into:) in conformance AnyHashableType()
{
  Hasher._combine(_:)(*v0);
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance AnyHashableType()
{
  Swift::UInt v1 = *v0;
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v1);
  return Hasher._finalize()();
}

unint64_t RegexCompilationError.description.getter(uint64_t a1, uint64_t a2, char a3)
{
  if (!a3)
  {
    _StringGuts.grow(_:)(56);
    v6._Swift::Int countAndFlagsBits = 0xD00000000000001ELL;
    v6._object = (void *)0x8000000209FB6010;
    String.append(_:)(v6);
    v7._Swift::Int countAndFlagsBits = _typeName(_:qualified:)();
    String.append(_:)(v7);
    swift_bridgeObjectRelease();
    v8._object = (void *)0x8000000209FB6030;
    v8._Swift::Int countAndFlagsBits = 0xD000000000000014;
    String.append(_:)(v8);
    v9._Swift::Int countAndFlagsBits = _typeName(_:qualified:)();
    String.append(_:)(v9);
    swift_bridgeObjectRelease();
    unint64_t v4 = 10046;
    unint64_t v5 = 0xE200000000000000;
    goto LABEL_5;
  }
  if (a3 == 1)
  {
    _StringGuts.grow(_:)(50);
    v3._Swift::Int countAndFlagsBits = 39;
    v3._object = (void *)0xE100000000000000;
    String.append(_:)(v3);
    Character.write<A>(to:)();
    unint64_t v4 = 0xD00000000000002FLL;
    unint64_t v5 = 0x8000000209FB5FE0;
LABEL_5:
    String.append(_:)(*(Swift::String *)&v4);
    return 0;
  }
  return 0xD000000000000034;
}

void RegexCompilationError.hash(into:)(uint64_t a1, Swift::UInt a2, Swift::UInt a3, char a4)
{
  if (a4)
  {
    if (a4 == 1)
    {
      Hasher._combine(_:)(2uLL);
      JUMPOUT(0x21050EE80);
    }
    Swift::UInt v6 = 0;
  }
  else
  {
    Hasher._combine(_:)(1uLL);
    Hasher._combine(_:)(a2);
    Swift::UInt v6 = a3;
  }
  Hasher._combine(_:)(v6);
}

Swift::Int RegexCompilationError.hashValue.getter(Swift::UInt a1, Swift::UInt a2, char a3)
{
  Hasher.init(_seed:)();
  if (!a3)
  {
    Hasher._combine(_:)(1uLL);
    Hasher._combine(_:)(a1);
    Swift::UInt v6 = a2;
LABEL_6:
    Hasher._combine(_:)(v6);
    return Hasher._finalize()();
  }
  if (a3 != 1)
  {
    Swift::UInt v6 = 0;
    goto LABEL_6;
  }
  Hasher._combine(_:)(2uLL);
  MEMORY[0x21050EE80](v8, a1, a2);
  return Hasher._finalize()();
}

uint64_t protocol witness for Error._domain.getter in conformance RegexCompilationError()
{
  return MEMORY[0x270F9FB40]();
}

uint64_t protocol witness for Error._code.getter in conformance RegexCompilationError()
{
  return MEMORY[0x270F9FB38]();
}

uint64_t protocol witness for Error._userInfo.getter in conformance RegexCompilationError()
{
  return MEMORY[0x270F9FB48]();
}

uint64_t protocol witness for Error._getEmbeddedNSError() in conformance RegexCompilationError()
{
  return MEMORY[0x270F9FB30]();
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance RegexCompilationError()
{
  return RegexCompilationError.hashValue.getter(*(void *)v0, *(void *)(v0 + 8), *(unsigned char *)(v0 + 16));
}

void protocol witness for Hashable.hash(into:) in conformance RegexCompilationError(uint64_t a1)
{
  RegexCompilationError.hash(into:)(a1, *(void *)v1, *(void *)(v1 + 8), *(unsigned char *)(v1 + 16));
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance RegexCompilationError()
{
  Swift::UInt v2 = *(void *)v0;
  Swift::UInt v1 = *(void *)(v0 + 8);
  int v3 = *(unsigned __int8 *)(v0 + 16);
  Hasher.init(_seed:)();
  if (!v3)
  {
    Hasher._combine(_:)(1uLL);
    Hasher._combine(_:)(v2);
    Swift::UInt v4 = v1;
LABEL_6:
    Hasher._combine(_:)(v4);
    return Hasher._finalize()();
  }
  if (v3 != 1)
  {
    Swift::UInt v4 = 0;
    goto LABEL_6;
  }
  Hasher._combine(_:)(2uLL);
  MEMORY[0x21050EE80](v6, v2, v1);
  return Hasher._finalize()();
}

unint64_t protocol witness for CustomStringConvertible.description.getter in conformance RegexCompilationError()
{
  return RegexCompilationError.description.getter(*(void *)v0, *(void *)(v0 + 8), *(unsigned char *)(v0 + 16));
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance RegexCompilationError(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4 = *a1;
  uint64_t v5 = a1[1];
  int v6 = *((unsigned __int8 *)a1 + 16);
  uint64_t v7 = *a2;
  uint64_t v8 = a2[1];
  int v9 = *((unsigned __int8 *)a2 + 16);
  if (v6)
  {
    if (v6 == 1)
    {
      if (v9 == 1)
      {
        if (v4 != v7 || v5 != v8) {
          return _stringCompareWithSmolCheck(_:_:expecting:)();
        }
        return 1;
      }
    }
    else if (v9 == 2 && (v8 | v7) == 0)
    {
      return 1;
    }
    return 0;
  }
  if (v9) {
    return 0;
  }
  return v4 == v7 && v5 == v8;
}

uint64_t _CompileOptions.rawValue.getter()
{
  return *(void *)v0;
}

_StringProcessing::_CompileOptions __swiftcall _CompileOptions.init(rawValue:)(_StringProcessing::_CompileOptions rawValue)
{
  v1->unint64_t rawValue = rawValue.rawValue;
  return rawValue;
}

void static _CompileOptions.disableOptimizations.getter(void *a1@<X8>)
{
  *a1 = 1;
}

void static _CompileOptions.enableTracing.getter(void *a1@<X8>)
{
  *a1 = 2;
}

void static _CompileOptions.enableMetrics.getter(void *a1@<X8>)
{
  *a1 = 4;
}

uint64_t specialized SetAlgebra<>.init(arrayLiteral:)@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  uint64_t v3 = *(void *)(a1 + 16);
  if (v3)
  {
    uint64_t v4 = 0;
    uint64_t v5 = (uint64_t *)(a1 + 32);
    do
    {
      uint64_t v7 = *v5++;
      uint64_t v6 = v7;
      if ((v7 & ~v4) == 0) {
        uint64_t v6 = 0;
      }
      v4 |= v6;
      --v3;
    }
    while (v3);
  }
  else
  {
    uint64_t v4 = 0;
  }
  uint64_t result = swift_bridgeObjectRelease();
  *a2 = v4;
  return result;
}

uint64_t static _CompileOptions.default.getter@<X0>(void *a1@<X8>)
{
  if (one-time initialization token for default != -1) {
    uint64_t result = swift_once();
  }
  *a1 = 0;
  return result;
}

void *protocol witness for OptionSet.init(rawValue:) in conformance _CompileOptions@<X0>(void *result@<X0>, void *a2@<X8>)
{
  *a2 = *result;
  return result;
}

void protocol witness for SetAlgebra.init() in conformance _CompileOptions(void *a1@<X8>)
{
  *a1 = 0;
}

void *protocol witness for SetAlgebra.union(_:) in conformance _CompileOptions@<X0>(void *result@<X0>, void *a2@<X8>)
{
  *a2 = *v2 | *result;
  return result;
}

void *protocol witness for SetAlgebra.intersection(_:) in conformance _CompileOptions@<X0>(void *result@<X0>, void *a2@<X8>)
{
  *a2 = *v2 & *result;
  return result;
}

void *protocol witness for SetAlgebra.symmetricDifference(_:) in conformance _CompileOptions@<X0>(void *result@<X0>, void *a2@<X8>)
{
  *a2 = *v2 ^ *result;
  return result;
}

BOOL protocol witness for SetAlgebra.insert(_:) in conformance _CompileOptions(void *a1, uint64_t *a2)
{
  uint64_t v3 = *a2;
  uint64_t v4 = *v2 & *a2;
  if (v4 != *a2) {
    *v2 |= v3;
  }
  *a1 = v3;
  return v4 != v3;
}

void *protocol witness for SetAlgebra.remove(_:) in conformance _CompileOptions@<X0>(void *result@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3 = *v2 & *result;
  if (v3) {
    *v2 &= ~*result;
  }
  *(void *)a2 = v3;
  *(unsigned char *)(a2 + 8) = v3 == 0;
  return result;
}

uint64_t *protocol witness for SetAlgebra.update(with:) in conformance _CompileOptions@<X0>(uint64_t *result@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3 = *result;
  uint64_t v4 = *v2;
  *v2 |= *result;
  uint64_t v5 = v4 & v3;
  *(void *)a2 = v5;
  *(unsigned char *)(a2 + 8) = v5 == 0;
  return result;
}

void *protocol witness for SetAlgebra.formUnion(_:) in conformance _CompileOptions(void *result)
{
  *v1 |= *result;
  return result;
}

void *protocol witness for SetAlgebra.formIntersection(_:) in conformance _CompileOptions(void *result)
{
  *v1 &= *result;
  return result;
}

void *protocol witness for SetAlgebra.formSymmetricDifference(_:) in conformance _CompileOptions(void *result)
{
  *v1 ^= *result;
  return result;
}

void *protocol witness for SetAlgebra.subtracting(_:) in conformance _CompileOptions@<X0>(void *result@<X0>, void *a2@<X8>)
{
  *a2 = *v2 & ~*result;
  return result;
}

BOOL protocol witness for SetAlgebra.isSubset(of:) in conformance _CompileOptions(void *a1)
{
  return (*v1 & ~*a1) == 0;
}

BOOL protocol witness for SetAlgebra.isDisjoint(with:) in conformance _CompileOptions(void *a1)
{
  return (*v1 & *a1) == 0;
}

BOOL protocol witness for SetAlgebra.isSuperset(of:) in conformance _CompileOptions(void *a1)
{
  return (*a1 & ~*v1) == 0;
}

BOOL protocol witness for SetAlgebra.isEmpty.getter in conformance _CompileOptions()
{
  return *v0 == 0;
}

uint64_t protocol witness for SetAlgebra.init<A>(_:) in conformance _CompileOptions(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return MEMORY[0x270F9E7D8](a1, a4, a2, a5, a3);
}

void *protocol witness for SetAlgebra.subtract(_:) in conformance _CompileOptions(void *result)
{
  *v1 &= ~*result;
  return result;
}

uint64_t AST.Atom.singleScalarASCIIValue.getter()
{
  uint64_t v0 = type metadata accessor for AST.Atom.Kind();
  uint64_t v1 = *(void *)(v0 - 8);
  MEMORY[0x270FA5388](v0);
  uint64_t v3 = (uint64_t *)((char *)&v9 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0));
  unint64_t v4 = AST.Atom.singleScalar.getter();
  if ((v4 & 0x1FFFFFF80) != 0)
  {
    AST.Atom.kind.getter();
    if ((*(unsigned int (**)(void *, uint64_t))(v1 + 88))(v3, v0) == *MEMORY[0x263F8FBC0])
    {
      (*(void (**)(void *, uint64_t))(v1 + 96))(v3, v0);
      BOOL v5 = *v3 == 2573 && v3[1] == 0xE200000000000000;
      if (!v5 && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0)
      {
        unsigned int v6 = Character.asciiValue.getter();
        swift_bridgeObjectRelease();
        int v7 = (v6 >> 8) & 1;
        return v6 | (v7 << 8);
      }
      swift_bridgeObjectRelease();
    }
    else
    {
      (*(void (**)(void *, uint64_t))(v1 + 8))(v3, v0);
    }
    LOBYTE(v6) = 0;
    int v7 = 1;
  }
  else
  {
    LOBYTE(v6) = v4;
    int v7 = 0;
  }
  return v6 | (v7 << 8);
}

uint64_t DSLTree.Atom.singleScalarASCIIValue.getter()
{
  uint64_t v1 = v0;
  uint64_t v2 = type metadata accessor for DSLTree._AST.Atom(0);
  MEMORY[0x270FA5388](v2 - 8);
  unint64_t v4 = &v23[-((v3 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v5 = type metadata accessor for DSLTree.Atom(0);
  uint64_t v6 = MEMORY[0x270FA5388](v5);
  uint64_t v8 = &v23[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v9 = MEMORY[0x270FA5388](v6);
  uint64_t v11 = &v23[-v10];
  uint64_t v12 = MEMORY[0x270FA5388](v9);
  uint64_t v14 = &v23[-v13];
  MEMORY[0x270FA5388](v12);
  uint64_t v16 = &v23[-v15];
  outlined init with copy of MEProgram(v1, (uint64_t)&v23[-v15], type metadata accessor for DSLTree.Atom);
  int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  if (EnumCaseMultiPayload == 7)
  {
    outlined init with copy of MEProgram((uint64_t)v16, (uint64_t)v8, type metadata accessor for DSLTree.Atom);
    outlined init with take of DSLTree.QuantificationKind((uint64_t)v8, (uint64_t)v4, type metadata accessor for DSLTree._AST.Atom);
    unsigned int v21 = AST.Atom.singleScalarASCIIValue.getter();
    LOBYTE(v19) = v21;
    int v20 = (v21 >> 8) & 1;
    outlined destroy of MEProgram((uint64_t)v4, type metadata accessor for DSLTree._AST.Atom);
  }
  else if (EnumCaseMultiPayload == 1)
  {
    outlined init with copy of MEProgram((uint64_t)v16, (uint64_t)v11, type metadata accessor for DSLTree.Atom);
    int v20 = *v11 > 0x7Fu;
    if (*v11 <= 0x7Fu) {
      LOBYTE(v19) = *v11;
    }
    else {
      LOBYTE(v19) = 0;
    }
  }
  else
  {
    if (!EnumCaseMultiPayload)
    {
      outlined init with copy of MEProgram((uint64_t)v16, (uint64_t)v14, type metadata accessor for DSLTree.Atom);
      BOOL v18 = *v14 == 2573 && v14[1] == 0xE200000000000000;
      if (!v18 && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0)
      {
        unsigned int v19 = Character.asciiValue.getter();
        swift_bridgeObjectRelease();
        int v20 = (v19 >> 8) & 1;
        goto LABEL_16;
      }
      swift_bridgeObjectRelease();
    }
    LOBYTE(v19) = 0;
    int v20 = 1;
  }
LABEL_16:
  outlined destroy of MEProgram((uint64_t)v16, type metadata accessor for DSLTree.Atom);
  return v19 | (v20 << 8);
}

BOOL String.isEqualByUAX44LM2(to:)(uint64_t a1, unint64_t a2, uint64_t a3, unint64_t a4)
{
  unint64_t v4 = a2;
  uint64_t v5 = a1;
  uint64_t v6 = HIBYTE(a4) & 0xF;
  if ((a4 & 0x2000000000000000) == 0) {
    uint64_t v6 = a3 & 0xFFFFFFFFFFFFLL;
  }
  unint64_t v7 = 4 * v6;
  uint64_t v46 = HIBYTE(a2) & 0xF;
  if (!v6)
  {
    unint64_t v8 = 0;
    unint64_t v12 = 15;
LABEL_39:
    uint64_t v36 = v5 & 0xFFFFFFFFFFFFLL;
    if ((v4 & 0x2000000000000000) != 0) {
      uint64_t v36 = v46;
    }
    BOOL v37 = v12 >> 14 == 4 * v36;
    return v8 == v7 && v37;
  }
  unint64_t v8 = 0;
  uint64_t v9 = a1 & 0xFFFFFFFFFFFFLL;
  if ((a2 & 0x2000000000000000) != 0) {
    uint64_t v9 = HIBYTE(a2) & 0xF;
  }
  unint64_t v10 = 4 * v9;
  unint64_t v11 = 15;
  unint64_t v12 = 15;
  while (2)
  {
    uint64_t v13 = v5;
    unint64_t v45 = v12;
    unint64_t v14 = v12 >> 14;
    while (1)
    {
      if (v14 >= v10) {
        goto LABEL_38;
      }
      String.subscript.getter();
      char v16 = Character.isWhitespace.getter();
      swift_bridgeObjectRelease();
      if (v16) {
        goto LABEL_9;
      }
      if (String.subscript.getter() != 45 || v17 != 0xE100000000000000)
      {
        char v18 = _stringCompareWithSmolCheck(_:_:expecting:)();
        swift_bridgeObjectRelease();
        if (v18) {
          goto LABEL_9;
        }
        if (String.subscript.getter() != 95 || v19 != 0xE100000000000000) {
          break;
        }
      }
      swift_bridgeObjectRelease();
LABEL_9:
      unint64_t v15 = String.index(after:)();
      unint64_t v11 = v15;
      if (v15 >> 14 >= v7)
      {
        unint64_t v8 = v15 >> 14;
LABEL_38:
        uint64_t v5 = v13;
        unint64_t v4 = a2;
        unint64_t v12 = v45;
        goto LABEL_39;
      }
    }
    char v20 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if (v20) {
      goto LABEL_9;
    }
    uint64_t v5 = v13;
    unint64_t v4 = a2;
    String.subscript.getter();
    char v21 = Character.isWhitespace.getter();
    swift_bridgeObjectRelease();
    if (v21) {
      goto LABEL_23;
    }
    if (String.subscript.getter() == 45 && v22 == 0xE100000000000000)
    {
LABEL_21:
      swift_bridgeObjectRelease();
      goto LABEL_23;
    }
    char v23 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if (v23) {
      goto LABEL_23;
    }
    if (String.subscript.getter() == 95 && v24 == 0xE100000000000000) {
      goto LABEL_21;
    }
    char v25 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if (v25)
    {
LABEL_23:
      unint64_t v12 = String.index(after:)();
      unint64_t v8 = v11 >> 14;
      if (v11 >> 14 < v7) {
        continue;
      }
      goto LABEL_39;
    }
    break;
  }
  uint64_t v26 = String.subscript.getter();
  uint64_t v28 = v27;
  if (v26 == String.subscript.getter() && v28 == v29)
  {
LABEL_30:
    swift_bridgeObjectRelease_n();
    goto LABEL_35;
  }
  char v42 = _stringCompareWithSmolCheck(_:_:expecting:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if (v42) {
    goto LABEL_35;
  }
  uint64_t v30 = String.subscript.getter();
  uint64_t v31 = MEMORY[0x21050EE00](v30);
  uint64_t v39 = v32;
  uint64_t v40 = v31;
  swift_bridgeObjectRelease();
  uint64_t v33 = String.subscript.getter();
  uint64_t v34 = MEMORY[0x21050EE00](v33);
  uint64_t v43 = v35;
  swift_bridgeObjectRelease();
  if (v40 == v34 && v39 == v43) {
    goto LABEL_30;
  }
  char v41 = _stringCompareWithSmolCheck(_:_:expecting:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if (v41)
  {
LABEL_35:
    unint64_t v11 = String.index(after:)();
    goto LABEL_23;
  }
  return 0;
}

uint64_t consumeName(_:opts:)(uint64_t result, uint64_t a2, uint64_t a3)
{
  uint64_t v3 = *(void *)(a3 + 16);
  if (v3)
  {
    uint64_t v5 = result;
    if ((*(_DWORD *)(a3 + 4 * v3 + 28) & 0x10000) != 0) {
      uint64_t v6 = (uint64_t (*)(uint64_t (*)(uint64_t), uint64_t))consumeCharacterWithLeadingScalar(_:);
    }
    else {
      uint64_t v6 = (uint64_t (*)(uint64_t (*)(uint64_t), uint64_t))consumeScalar(_:);
    }
    uint64_t v7 = swift_allocObject();
    *(void *)(v7 + 16) = v5;
    *(void *)(v7 + 24) = a2;
    uint64_t v8 = swift_allocObject();
    *(void *)(v8 + 16) = partial apply for closure #1 in consumeName(_:opts:);
    *(void *)(v8 + 24) = v7;
    swift_bridgeObjectRetain();
    uint64_t v9 = v6(partial apply for closure #1 in propertyScalarPredicate(_:), v8);
    swift_release();
    return v9;
  }
  else
  {
    __break(1u);
  }
  return result;
}

BOOL closure #1 in consumeName(_:opts:)(uint64_t a1, uint64_t a2, unint64_t a3)
{
  uint64_t v6 = type metadata accessor for Unicode.Scalar.Properties();
  uint64_t v7 = *(void *)(v6 - 8);
  MEMORY[0x270FA5388](v6);
  uint64_t v9 = (char *)&v18 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = Unicode.Scalar.Properties.name.getter();
  if (v11)
  {
    BOOL v12 = String.isEqualByUAX44LM2(to:)(a2, a3, v10, v11);
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t, uint64_t))(v7 + 16))(v9, a1, v6);
    if (v12)
    {
      (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v6);
      return 1;
    }
  }
  else
  {
    (*(void (**)(char *, uint64_t, uint64_t))(v7 + 16))(v9, a1, v6);
  }
  uint64_t v14 = Unicode.Scalar.Properties.nameAlias.getter();
  unint64_t v16 = v15;
  (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v6);
  if (v16)
  {
    BOOL v13 = String.isEqualByUAX44LM2(to:)(a2, a3, v14, v16);
    swift_bridgeObjectRelease();
  }
  else
  {
    return 0;
  }
  return v13;
}

unint64_t AST.Atom.singleScalar.getter()
{
  uint64_t v0 = type metadata accessor for AST.Atom.EscapedBuiltin();
  uint64_t v1 = *(void *)(v0 - 8);
  MEMORY[0x270FA5388](v0);
  uint64_t v3 = &v16[-((v2 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v4 = type metadata accessor for AST.Atom.Scalar();
  uint64_t v5 = *(void *)(v4 - 8);
  MEMORY[0x270FA5388](v4);
  uint64_t v7 = &v16[-((v6 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v8 = type metadata accessor for AST.Atom.Kind();
  uint64_t v9 = *(void *)(v8 - 8);
  MEMORY[0x270FA5388](v8);
  unint64_t v11 = &v16[-((v10 + 15) & 0xFFFFFFFFFFFFFFF0)];
  AST.Atom.kind.getter();
  int v12 = (*(uint64_t (**)(unsigned char *, uint64_t))(v9 + 88))(v11, v8);
  if (v12 == *MEMORY[0x263F8FBC8])
  {
    (*(void (**)(unsigned char *, uint64_t))(v9 + 96))(v11, v8);
    (*(void (**)(unsigned char *, unsigned char *, uint64_t))(v5 + 32))(v7, v11, v4);
    unsigned int v13 = AST.Atom.Scalar.value.getter();
    (*(void (**)(unsigned char *, uint64_t))(v5 + 8))(v7, v4);
    LOBYTE(v4) = 0;
  }
  else if (v12 == *MEMORY[0x263F8FBD8])
  {
    (*(void (**)(unsigned char *, uint64_t))(v9 + 96))(v11, v8);
    (*(void (**)(unsigned char *, unsigned char *, uint64_t))(v1 + 32))(v3, v11, v0);
    unint64_t v14 = AST.Atom.EscapedBuiltin.scalarValue.getter();
    unsigned int v13 = v14;
    uint64_t v4 = HIDWORD(v14) & 1;
    (*(void (**)(unsigned char *, uint64_t))(v1 + 8))(v3, v0);
  }
  else
  {
    (*(void (**)(unsigned char *, uint64_t))(v9 + 8))(v11, v8);
    unsigned int v13 = 0;
    LOBYTE(v4) = 1;
  }
  return v13 | ((unint64_t)v4 << 32);
}

unint64_t DSLTree.CustomCharacterClass.Member.asAsciiBitset(_:_:)(uint64_t a1, char a2)
{
  uint64_t v3 = v2;
  uint64_t v6 = type metadata accessor for DSLTree.Atom(0);
  uint64_t v7 = MEMORY[0x270FA5388](v6 - 8);
  uint64_t v9 = (uint64_t)v38 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = MEMORY[0x270FA5388](v7);
  object = (char *)v38 - v11;
  MEMORY[0x270FA5388](v10);
  unint64_t v14 = (char *)v38 - v13;
  uint64_t v15 = type metadata accessor for DSLTree.CustomCharacterClass.Member(0);
  MEMORY[0x270FA5388](v15);
  uint64_t countAndFlagsBits = (uint64_t)v38 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of MEProgram(v3, countAndFlagsBits, type metadata accessor for DSLTree.CustomCharacterClass.Member);
  int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  if (EnumCaseMultiPayload != 3)
  {
    if (EnumCaseMultiPayload == 1)
    {
LABEL_33:
      uint64_t v32 = countAndFlagsBits
          + *(int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (DSLTree.Atom, DSLTree.Atom))
                   + 48);
      outlined init with take of DSLTree.QuantificationKind(countAndFlagsBits, (uint64_t)object, type metadata accessor for DSLTree.Atom);
      outlined init with take of DSLTree.QuantificationKind(v32, v9, type metadata accessor for DSLTree.Atom);
      uint64_t v33 = DSLTree.Atom.singleScalarASCIIValue.getter();
      outlined destroy of MEProgram((uint64_t)object, type metadata accessor for DSLTree.Atom);
      if ((v33 & 0x100) == 0)
      {
        __int16 v34 = DSLTree.Atom.singleScalarASCIIValue.getter();
        unint64_t result = outlined destroy of MEProgram(v9, type metadata accessor for DSLTree.Atom);
        if ((v34 & 0x100) == 0)
        {
          uint64_t v35 = *(void *)(a1 + 16);
          if (!v35) {
            goto LABEL_46;
          }
          char v21 = specialized DSLTree.CustomCharacterClass.AsciiBitset.init(low:high:isInverted:isCaseInsensitive:)(v33, v34, a2 & 1, *(_DWORD *)(a1 + 4 * v35 + 28) & 1);
          return v21 & 1;
        }
        return 2;
      }
      uint64_t v36 = type metadata accessor for DSLTree.Atom;
      uint64_t v37 = v9;
    }
    else
    {
      if (!EnumCaseMultiPayload)
      {
        outlined init with take of DSLTree.QuantificationKind(countAndFlagsBits, (uint64_t)v14, type metadata accessor for DSLTree.Atom);
        uint64_t v19 = DSLTree.Atom.singleScalarASCIIValue.getter();
        unint64_t result = outlined destroy of MEProgram((uint64_t)v14, type metadata accessor for DSLTree.Atom);
        if ((v19 & 0x100) == 0)
        {
          if (!*(void *)(a1 + 16)) {
            goto LABEL_45;
          }
          char v21 = specialized DSLTree.CustomCharacterClass.AsciiBitset.init(_:_:_:)(v19, a2 & 1);
          return v21 & 1;
        }
        return 2;
      }
      uint64_t v36 = type metadata accessor for DSLTree.CustomCharacterClass.Member;
      uint64_t v37 = countAndFlagsBits;
    }
    outlined destroy of MEProgram(v37, v36);
    return 2;
  }
  unint64_t v22 = *(void *)(countAndFlagsBits + 8);
  uint64_t v23 = HIBYTE(v22) & 0xF;
  if ((v22 & 0x2000000000000000) == 0) {
    uint64_t v23 = *(void *)countAndFlagsBits & 0xFFFFFFFFFFFFLL;
  }
  v38[0] = *(void *)countAndFlagsBits;
  v38[1] = v22;
  void v38[2] = 0;
  void v38[3] = v23;
  Swift::String_optional v24 = String.Iterator.next()();
  if (!v24.value._object)
  {
LABEL_41:
    swift_bridgeObjectRelease();
    return a2 & 1;
  }
  uint64_t countAndFlagsBits = v24.value._countAndFlagsBits;
  object = (char *)v24.value._object;
  uint64_t v25 = 0;
  uint64_t v9 = 0;
  while (1)
  {
    if (countAndFlagsBits == 2573 && object == (char *)0xE200000000000000
      || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
    {
LABEL_42:
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      return 2;
    }
    if ((_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0) {
      break;
    }
    swift_bridgeObjectRelease();
    unsigned int v29 = 10;
    uint64_t v30 = *(void *)(a1 + 16);
    if (!v30)
    {
LABEL_32:
      __break(1u);
      goto LABEL_33;
    }
LABEL_23:
    if (v29 <= 0x3F)
    {
      uint64_t v26 = 0;
      uint64_t v27 = 1 << v29;
    }
    else
    {
      if ((char)v29 > 63)
      {
        int v31 = *(_DWORD *)(a1 + 32 + 4 * v30 - 4);
        uint64_t v26 = 1 << v29;
        if ((v31 & 1) != 0 && (v29 <= 0x5A || v29 - 123 >= 0xFFFFFFE6))
        {
          uint64_t v27 = 0;
          v26 |= 1 << (v29 + 32);
          goto LABEL_12;
        }
      }
      else
      {
        uint64_t v26 = 0;
      }
      uint64_t v27 = 0;
    }
LABEL_12:
    v9 |= v27;
    v25 |= v26;
    Swift::String_optional v28 = String.Iterator.next()();
    uint64_t countAndFlagsBits = v28.value._countAndFlagsBits;
    object = (char *)v28.value._object;
    if (!v28.value._object) {
      goto LABEL_41;
    }
  }
  if ((Character._isSingleScalar.getter() & 1) == 0) {
    goto LABEL_42;
  }
  unint64_t result = specialized Collection.first.getter(countAndFlagsBits, (unint64_t)object);
  if ((result & 0x100000000) != 0) {
    goto LABEL_47;
  }
  if ((result & 0xFFFFFF80) != 0) {
    goto LABEL_42;
  }
  unint64_t result = specialized Collection.first.getter(countAndFlagsBits, (unint64_t)object);
  if ((result & 0x100000000) != 0) {
    goto LABEL_48;
  }
  uint64_t countAndFlagsBits = result;
  unint64_t result = swift_bridgeObjectRelease();
  if ((countAndFlagsBits & 0xFFFFFF00) == 0)
  {
    unsigned int v29 = countAndFlagsBits;
    uint64_t v30 = *(void *)(a1 + 16);
    if (!v30) {
      goto LABEL_32;
    }
    goto LABEL_23;
  }
  __break(1u);
LABEL_45:
  __break(1u);
LABEL_46:
  __break(1u);
LABEL_47:
  __break(1u);
LABEL_48:
  __break(1u);
  return result;
}

uint64_t Unicode.Scalar.isNFC.getter(unsigned int a1)
{
  uint64_t v2 = type metadata accessor for Unicode._NFC();
  uint64_t v3 = *(void *)(v2 - 8);
  MEMORY[0x270FA5388](v2);
  uint64_t v5 = (char *)&v20 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = type metadata accessor for Unicode._NFC.Iterator();
  uint64_t v7 = *(void *)(v6 - 8);
  MEMORY[0x270FA5388](v6);
  uint64_t v9 = (char *)&v20 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  int v10 = (a1 & 0x3F) << 8;
  unsigned int v11 = (v10 | (a1 >> 6)) + 33217;
  int v12 = (v10 | (a1 >> 6) & 0x3F) << 8;
  int v13 = (((v12 | (a1 >> 12) & 0x3F) << 8) | (a1 >> 18)) - 2122219023;
  int v14 = (v12 | (a1 >> 12)) + 8487393;
  if (HIWORD(a1)) {
    int v14 = v13;
  }
  if (a1 >= 0x800) {
    unsigned int v11 = v14;
  }
  if (a1 <= 0x7F) {
    unsigned int v11 = a1 + 1;
  }
  uint64_t v21 = (v11 + 0xFEFEFEFEFEFEFFLL) & ~(-1 << (8 * (4 - (__clz(v11) >> 3))));
  uint64_t v15 = MEMORY[0x21050F010](&v21);
  MEMORY[0x21050F020](v15);
  Unicode._NFC.makeIterator()();
  (*(void (**)(char *, uint64_t))(v3 + 8))(v5, v2);
  uint64_t v16 = Unicode._NFC.Iterator.next()();
  if ((v16 & 0x100000000) != 0)
  {
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v6);
    return 0;
  }
  else
  {
    int v17 = v16;
    uint64_t v18 = Unicode._NFC.Iterator.next()();
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v6);
    return BYTE4(v18) & (v17 == a1);
  }
}

uint64_t closure #1 in DSLTree.CustomCharacterClass.Member.generateConsumer(_:)(unint64_t a1, unint64_t a2, unint64_t a3, int a4, unsigned int a5, unsigned int a6, int a7)
{
  int v46 = a7;
  unsigned int v51 = a5;
  unsigned int v52 = a6;
  uint64_t v49 = type metadata accessor for Unicode.Scalar.Properties();
  uint64_t v45 = *(void *)(v49 - 8);
  MEMORY[0x270FA5388](v49);
  unint64_t v48 = &v43[-((v11 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v12 = type metadata accessor for Unicode._NFC();
  uint64_t v13 = *(void *)(v12 - 8);
  MEMORY[0x270FA5388](v12);
  uint64_t v15 = &v43[-((v14 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v50 = type metadata accessor for Unicode._NFC.Iterator();
  uint64_t v16 = *(void *)(v50 - 8);
  MEMORY[0x270FA5388](v50);
  uint64_t v18 = &v43[-((v17 + 15) & 0xFFFFFFFFFFFFFFF0)];
  int v44 = a4;
  uint64_t v47 = String.index(after:isScalarSemantics:)(a3, (a4 & 1) == 0, a1, a2);
  if ((a4 & 1) == 0)
  {
    _StringGuts.validateScalarIndex(_:)(a3, a1, a2);
    if ((a2 & 0x1000000000000000) != 0) {
      goto LABEL_34;
    }
    unsigned int v24 = v51;
    unsigned int v23 = v52;
    if ((a2 & 0x2000000000000000) != 0)
    {
      unint64_t v53 = a1;
      uint64_t v54 = a2 & 0xFFFFFFFFFFFFFFLL;
    }
    else if ((a1 & 0x1000000000000000) == 0)
    {
      _StringObject.sharedUTF8.getter();
    }
    unsigned int v21 = _decodeScalar(_:startingAt:)();
    goto LABEL_12;
  }
  uint64_t v19 = String.subscript.getter();
  MEMORY[0x21050F020](v19);
  Unicode._NFC.makeIterator()();
  (*(void (**)(unsigned char *, uint64_t))(v13 + 8))(v15, v12);
  uint64_t v20 = Unicode._NFC.Iterator.next()();
  if ((v20 & 0x100000000) != 0)
  {
    swift_bridgeObjectRelease();
    (*(void (**)(unsigned char *, uint64_t))(v16 + 8))(v18, v50);
  }
  else
  {
    unsigned int v21 = v20;
    uint64_t v22 = Unicode._NFC.Iterator.next()();
    swift_bridgeObjectRelease();
    (*(void (**)(unsigned char *, uint64_t))(v16 + 8))(v18, v50);
    if ((v22 & 0x100000000) != 0)
    {
      while (1)
      {
        unsigned int v24 = v51;
        unsigned int v23 = v52;
LABEL_12:
        if (v23 >= v24) {
          break;
        }
        __break(1u);
LABEL_34:
        unsigned int v21 = _StringGuts.foreignErrorCorrectedScalar(startingAt:)();
      }
      if (v21 >= v24 && v21 <= v23) {
        return v47;
      }
      if (v46)
      {
        uint64_t v26 = v48;
        Unicode.Scalar.properties.getter();
        char v27 = Unicode.Scalar.Properties.changesWhenLowercased.getter();
        Swift::String_optional v28 = *(void (**)(unsigned char *, uint64_t))(v45 + 8);
        v28(v26, v49);
        if (v27)
        {
          unsigned int v29 = v48;
          Unicode.Scalar.properties.getter();
          uint64_t v30 = Unicode.Scalar.Properties.lowercaseMapping.getter();
          unint64_t v32 = v31;
          v28(v29, v49);
          unint64_t v33 = (v44 & 1) != 0 ? String.singleNFCScalar.getter(v30, v32) : String.singleScalar.getter(v30, v32);
          unint64_t v34 = v33;
          swift_bridgeObjectRelease();
          if ((v34 & 0x100000000) == 0 && v34 >= v24 && v34 <= v23) {
            return v47;
          }
        }
        uint64_t v35 = v48;
        Unicode.Scalar.properties.getter();
        char v36 = Unicode.Scalar.Properties.changesWhenUppercased.getter();
        v28(v35, v49);
        if (v36)
        {
          uint64_t v37 = v48;
          Unicode.Scalar.properties.getter();
          uint64_t v38 = Unicode.Scalar.Properties.uppercaseMapping.getter();
          unint64_t v40 = v39;
          v28(v37, v49);
          unint64_t v41 = (v44 & 1) != 0 ? String.singleNFCScalar.getter(v38, v40) : String.singleScalar.getter(v38, v40);
          unint64_t v42 = v41;
          swift_bridgeObjectRelease();
          if ((v42 & 0x100000000) == 0 && v42 >= v24 && v42 <= v23) {
            return v47;
          }
        }
      }
    }
  }
  return 0;
}

uint64_t String.index(after:isScalarSemantics:)(unint64_t a1, char a2, unint64_t a3, unint64_t a4)
{
  if (a2)
  {
    unint64_t v6 = _StringGuts.validateScalarIndex(_:)(a1, a3, a4);
    if ((a4 & 0x1000000000000000) != 0)
    {
      return String.UnicodeScalarView._foreignIndex(after:)();
    }
    else
    {
      unint64_t v7 = v6 >> 16;
      if ((a4 & 0x2000000000000000) != 0)
      {
        v14[0] = a3;
        v14[1] = a4 & 0xFFFFFFFFFFFFFFLL;
        int v9 = *((unsigned __int8 *)v14 + v7);
      }
      else
      {
        if ((a3 & 0x1000000000000000) != 0)
        {
          uint64_t v8 = (a4 & 0xFFFFFFFFFFFFFFFLL) + 32;
        }
        else
        {
          unint64_t v13 = v6 >> 16;
          uint64_t v8 = _StringObject.sharedUTF8.getter();
          unint64_t v7 = v13;
        }
        int v9 = *(unsigned __int8 *)(v8 + v7);
      }
      int v11 = (char)v9;
      unsigned int v12 = __clz(v9 ^ 0xFF) - 24;
      if (v11 >= 0) {
        LOBYTE(v12) = 1;
      }
      return ((v7 + v12) << 16) | 5;
    }
  }
  else
  {
    return String.index(after:)();
  }
}

unint64_t String.singleNFCScalar.getter(uint64_t a1, unint64_t a2)
{
  uint64_t v4 = type metadata accessor for Unicode._NFC();
  uint64_t v5 = *(void *)(v4 - 8);
  MEMORY[0x270FA5388](v4);
  unint64_t v7 = &v19[-((v6 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v8 = type metadata accessor for Unicode._NFC.Iterator();
  uint64_t v9 = *(void *)(v8 - 8);
  MEMORY[0x270FA5388](v8);
  int v11 = &v19[-((v10 + 15) & 0xFFFFFFFFFFFFFFF0)];
  if ((a2 & 0x2000000000000000) != 0) {
    uint64_t v12 = HIBYTE(a2) & 0xF;
  }
  else {
    uint64_t v12 = a1 & 0xFFFFFFFFFFFFLL;
  }
  if (!v12 || (unint64_t)String.index(after:)() >> 14 != 4 * v12) {
    goto LABEL_11;
  }
  unint64_t result = specialized Collection.first.getter(a1, a2);
  if (v14)
  {
    MEMORY[0x21050F020](result);
    Unicode._NFC.makeIterator()();
    (*(void (**)(unsigned char *, uint64_t))(v5 + 8))(v7, v4);
    uint64_t v15 = Unicode._NFC.Iterator.next()();
    if ((v15 & 0x100000000) != 0)
    {
      swift_bridgeObjectRelease();
      (*(void (**)(unsigned char *, uint64_t))(v9 + 8))(v11, v8);
    }
    else
    {
      unsigned int v16 = v15;
      uint64_t v17 = Unicode._NFC.Iterator.next()();
      swift_bridgeObjectRelease();
      (*(void (**)(unsigned char *, uint64_t))(v9 + 8))(v11, v8);
      if ((v17 & 0x100000000) != 0)
      {
        unsigned __int8 v18 = 0;
LABEL_12:
        v19[12] = v18;
        return v16 | ((unint64_t)v18 << 32);
      }
    }
LABEL_11:
    unsigned int v16 = 0;
    unsigned __int8 v18 = 1;
    goto LABEL_12;
  }
  __break(1u);
  return result;
}

unint64_t String.singleScalar.getter(unint64_t a1, unint64_t a2)
{
  uint64_t v2 = HIBYTE(a2) & 0xF;
  if ((a2 & 0x2000000000000000) == 0) {
    uint64_t v2 = a1 & 0xFFFFFFFFFFFFLL;
  }
  if (!v2) {
    goto LABEL_16;
  }
  uint64_t v5 = 4 * v2;
  unint64_t v6 = _StringGuts.validateScalarIndex(_:)(0xFuLL, a1, a2);
  if ((a2 & 0x1000000000000000) != 0)
  {
    if (v5 == (unint64_t)String.UnicodeScalarView._foreignIndex(after:)() >> 14) {
      goto LABEL_13;
    }
LABEL_16:
    LODWORD(result) = 0;
    unsigned __int8 v13 = 1;
    goto LABEL_17;
  }
  unint64_t v7 = v6 >> 16;
  if ((a2 & 0x2000000000000000) != 0)
  {
    v14[0] = a1;
    v14[1] = a2 & 0xFFFFFFFFFFFFFFLL;
    int v9 = *((unsigned __int8 *)v14 + v7);
  }
  else
  {
    if ((a1 & 0x1000000000000000) != 0) {
      uint64_t v8 = (a2 & 0xFFFFFFFFFFFFFFFLL) + 32;
    }
    else {
      uint64_t v8 = _StringObject.sharedUTF8.getter();
    }
    int v9 = *(unsigned __int8 *)(v8 + v7);
  }
  int v10 = (char)v9;
  unsigned int v11 = __clz(v9 ^ 0xFF) - 24;
  if (v10 >= 0) {
    LOBYTE(v11) = 1;
  }
  if (v5 != (((v7 + v11) << 16) | 5) >> 14) {
    goto LABEL_16;
  }
LABEL_13:
  unint64_t result = specialized Collection.first.getter(a1, a2);
  if ((result & 0x100000000) == 0)
  {
    unsigned __int8 v13 = 0;
LABEL_17:
    LOBYTE(v14[0]) = v13;
    return result | ((unint64_t)v13 << 32);
  }
  __break(1u);
  return result;
}

uint64_t closure #2 in DSLTree.CustomCharacterClass.Member.generateConsumer(_:)()
{
  return 0;
}

uint64_t closure #1 in scriptScalarPredicate(_:)(unsigned int a1)
{
  uint64_t v2 = type metadata accessor for Unicode.Script();
  uint64_t v3 = *(void *)(v2 - 8);
  MEMORY[0x270FA5388](v2);
  uint64_t v5 = (char *)v8 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  Unicode.Script.init(_:)(a1, (uint64_t)v5);
  lazy protocol witness table accessor for type AST.Quantification.Kind and conformance AST.Quantification.Kind(&lazy protocol witness table cache variable for type Unicode.Script and conformance Unicode.Script, MEMORY[0x263F90088]);
  dispatch thunk of RawRepresentable.rawValue.getter();
  (*(void (**)(char *, uint64_t))(v3 + 8))(v5, v2);
  dispatch thunk of RawRepresentable.rawValue.getter();
  if (v8[2] == v8[0] && v8[3] == v8[1]) {
    char v6 = 1;
  }
  else {
    char v6 = _stringCompareWithSmolCheck(_:_:expecting:)();
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v6 & 1;
}

uint64_t Unicode.Script.init(_:)@<X0>(unsigned int a1@<W0>, uint64_t a2@<X8>)
{
  char Script = _swift_string_processing_getScript(a1);
  _StringGuts.grow(_:)(27);
  swift_bridgeObjectRelease();
  v6[0] = 0xD000000000000019;
  v6[1] = 0x8000000209FB6AC0;
  v4._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
  String.append(_:)(v4);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  LOBYTE(v6[0]) = Script;
  uint64_t result = type metadata accessor for Unicode.Script();
  if (*(void *)(*(void *)(result - 8) + 64) == 1) {
    return (*(uint64_t (**)(uint64_t, void *, uint64_t))(*(void *)(result - 8) + 16))(a2, v6, result);
  }
  __break(1u);
  return result;
}

void *static Unicode.Script.extensions(for:)(unsigned int a1)
{
  uint64_t v19 = *MEMORY[0x263EF8340];
  uint64_t v2 = type metadata accessor for Unicode.Script();
  uint64_t v3 = *(void *)(v2 - 8);
  MEMORY[0x270FA5388](v2);
  uint64_t v16 = v4;
  uint64_t v5 = (char *)&v15 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  unsigned __int8 v18 = 0;
  ScriptExtensions = _swift_string_processing_getScriptExtensions(a1, &v18);
  if (ScriptExtensions)
  {
    uint64_t v7 = v18;
    if (v18)
    {
      uint64_t v8 = ScriptExtensions;
      int v9 = (void *)MEMORY[0x263F8EE78];
      do
      {
        char v10 = *v8++;
        char v17 = v10;
        if (v16 != 1) {
          __break(1u);
        }
        (*(void (**)(char *, char *, uint64_t))(v3 + 16))(v5, &v17, v2);
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
          int v9 = (void *)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v9[2] + 1, 1, v9, &demangling cache variable for type metadata for _ContiguousArrayStorage<Unicode.Script>, MEMORY[0x263F90088]);
        }
        unint64_t v12 = v9[2];
        unint64_t v11 = v9[3];
        if (v12 >= v11 >> 1) {
          int v9 = (void *)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(v11 > 1, v12 + 1, 1, v9, &demangling cache variable for type metadata for _ContiguousArrayStorage<Unicode.Script>, MEMORY[0x263F90088]);
        }
        v9[2] = v12 + 1;
        (*(void (**)(unint64_t, char *, uint64_t))(v3 + 32))((unint64_t)v9+ ((*(unsigned __int8 *)(v3 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80))+ *(void *)(v3 + 72) * v12, v5, v2);
        --v7;
      }
      while (v7);
    }
    else
    {
      return (void *)MEMORY[0x263F8EE78];
    }
  }
  else
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Unicode.Script>);
    unint64_t v13 = (*(unsigned __int8 *)(v3 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
    int v9 = (void *)swift_allocObject();
    *((_OWORD *)v9 + 1) = xmmword_209FAFD60;
    Unicode.Script.init(_:)(a1, (uint64_t)v9 + v13);
  }
  return v9;
}

uint64_t closure #1 in categoryScalarPredicate(_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = type metadata accessor for Unicode.GeneralCategory();
  uint64_t v4 = *(void *)(v3 - 8);
  MEMORY[0x270FA5388](v3);
  char v6 = (char *)&v13 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = type metadata accessor for Unicode.Scalar.Properties();
  uint64_t v8 = *(void *)(v7 - 8);
  MEMORY[0x270FA5388](v7);
  char v10 = (char *)&v13 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  Unicode.Scalar.properties.getter();
  Unicode.Scalar.Properties.generalCategory.getter();
  (*(void (**)(char *, uint64_t))(v8 + 8))(v10, v7);
  char v11 = MEMORY[0x21050F860](a2, v6);
  (*(void (**)(char *, uint64_t))(v4 + 8))(v6, v3);
  return v11 & 1;
}

BOOL closure #1 in categoriesScalarPredicate(_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = type metadata accessor for Unicode.GeneralCategory();
  uint64_t v4 = *(void *)(v3 - 8);
  MEMORY[0x270FA5388](v3);
  char v6 = (char *)&v15 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = type metadata accessor for Unicode.Scalar.Properties();
  uint64_t v8 = *(void *)(v7 - 8);
  MEMORY[0x270FA5388](v7);
  char v10 = (char *)&v15 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  Unicode.Scalar.properties.getter();
  Unicode.Scalar.Properties.generalCategory.getter();
  (*(void (**)(char *, uint64_t))(v8 + 8))(v10, v7);
  uint64_t v11 = 0;
  uint64_t v12 = *(void *)(a2 + 16);
  do
  {
    uint64_t v13 = v11;
    if (v12 == v11) {
      break;
    }
    ++v11;
  }
  while ((dispatch thunk of static Equatable.== infix(_:_:)() & 1) == 0);
  (*(void (**)(char *, uint64_t))(v4 + 8))(v6, v3);
  return v12 != v13;
}

uint64_t specialized closure #1 in propertyScalarPredicate(_:)()
{
  uint64_t v0 = type metadata accessor for Unicode.Scalar.Properties();
  uint64_t v1 = *(void *)(v0 - 8);
  uint64_t v2 = MEMORY[0x270FA5388](v0);
  uint64_t v4 = (char *)&v11 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v2);
  char v6 = (char *)&v11 - v5;
  Unicode.Scalar.properties.getter();
  char v7 = Unicode.Scalar.Properties.isHexDigit.getter();
  (*(void (**)(char *, char *, uint64_t))(v1 + 16))(v4, v6, v0);
  if (v7) {
    char v8 = Unicode.Scalar.Properties.isASCIIHexDigit.getter();
  }
  else {
    char v8 = 0;
  }
  uint64_t v9 = *(void (**)(char *, uint64_t))(v1 + 8);
  v9(v4, v0);
  v9(v6, v0);
  return v8 & 1;
}

uint64_t specialized closure #1 in propertyScalarPredicate(_:)(uint64_t a1)
{
  return specialized closure #1 in propertyScalarPredicate(_:)(a1, MEMORY[0x263F8EBD0]);
}

{
  return specialized closure #1 in propertyScalarPredicate(_:)(a1, MEMORY[0x263F8EBF8]);
}

{
  return specialized closure #1 in propertyScalarPredicate(_:)(a1, MEMORY[0x263F8EC18]);
}

{
  return specialized closure #1 in propertyScalarPredicate(_:)(a1, MEMORY[0x263F8ED10]);
}

{
  return specialized closure #1 in propertyScalarPredicate(_:)(a1, MEMORY[0x263F8EC28]);
}

{
  return specialized closure #1 in propertyScalarPredicate(_:)(a1, MEMORY[0x263F8ECA8]);
}

{
  return specialized closure #1 in propertyScalarPredicate(_:)(a1, MEMORY[0x263F8ECB0]);
}

{
  return specialized closure #1 in propertyScalarPredicate(_:)(a1, MEMORY[0x263F8ECE8]);
}

{
  return specialized closure #1 in propertyScalarPredicate(_:)(a1, MEMORY[0x263F8ECB8]);
}

{
  return specialized closure #1 in propertyScalarPredicate(_:)(a1, MEMORY[0x263F8ECC0]);
}

{
  return specialized closure #1 in propertyScalarPredicate(_:)(a1, MEMORY[0x263F8ECC8]);
}

{
  return specialized closure #1 in propertyScalarPredicate(_:)(a1, MEMORY[0x263F8ED00]);
}

{
  return specialized closure #1 in propertyScalarPredicate(_:)(a1, MEMORY[0x263F8EBD8]);
}

{
  return specialized closure #1 in propertyScalarPredicate(_:)(a1, MEMORY[0x263F8ECF8]);
}

{
  return specialized closure #1 in propertyScalarPredicate(_:)(a1, MEMORY[0x263F8EBB8]);
}

{
  return specialized closure #1 in propertyScalarPredicate(_:)(a1, MEMORY[0x263F8EC78]);
}

{
  return specialized closure #1 in propertyScalarPredicate(_:)(a1, MEMORY[0x263F8EC30]);
}

{
  return specialized closure #1 in propertyScalarPredicate(_:)(a1, MEMORY[0x263F8ED18]);
}

{
  return specialized closure #1 in propertyScalarPredicate(_:)(a1, MEMORY[0x263F8EC80]);
}

{
  return specialized closure #1 in propertyScalarPredicate(_:)(a1, MEMORY[0x263F8EBA0]);
}

{
  return specialized closure #1 in propertyScalarPredicate(_:)(a1, MEMORY[0x263F8ECF0]);
}

{
  return specialized closure #1 in propertyScalarPredicate(_:)(a1, MEMORY[0x263F8EC20]);
}

{
  return specialized closure #1 in propertyScalarPredicate(_:)(a1, MEMORY[0x263F8EC48]);
}

{
  return specialized closure #1 in propertyScalarPredicate(_:)(a1, MEMORY[0x263F8EBA8]);
}

{
  return specialized closure #1 in propertyScalarPredicate(_:)(a1, MEMORY[0x263F8EBE0]);
}

{
  return specialized closure #1 in propertyScalarPredicate(_:)(a1, MEMORY[0x263F8EC00]);
}

{
  return specialized closure #1 in propertyScalarPredicate(_:)(a1, MEMORY[0x263F8ED20]);
}

{
  return specialized closure #1 in propertyScalarPredicate(_:)(a1, MEMORY[0x263F8EC88]);
}

{
  return specialized closure #1 in propertyScalarPredicate(_:)(a1, MEMORY[0x263F8ECA0]);
}

{
  return specialized closure #1 in propertyScalarPredicate(_:)(a1, MEMORY[0x263F8EC08]);
}

{
  return specialized closure #1 in propertyScalarPredicate(_:)(a1, MEMORY[0x263F8ECD8]);
}

{
  return specialized closure #1 in propertyScalarPredicate(_:)(a1, MEMORY[0x263F8EBC0]);
}

{
  return specialized closure #1 in propertyScalarPredicate(_:)(a1, MEMORY[0x263F8ED08]);
}

{
  return specialized closure #1 in propertyScalarPredicate(_:)(a1, MEMORY[0x263F8ECE0]);
}

{
  return specialized closure #1 in propertyScalarPredicate(_:)(a1, MEMORY[0x263F8EC38]);
}

{
  return specialized closure #1 in propertyScalarPredicate(_:)(a1, MEMORY[0x263F8EC90]);
}

{
  return specialized closure #1 in propertyScalarPredicate(_:)(a1, MEMORY[0x263F8EC40]);
}

{
  return specialized closure #1 in propertyScalarPredicate(_:)(a1, MEMORY[0x263F8ED28]);
}

{
  return specialized closure #1 in propertyScalarPredicate(_:)(a1, MEMORY[0x263F8EBE8]);
}

{
  return specialized closure #1 in propertyScalarPredicate(_:)(a1, MEMORY[0x263F8EC68]);
}

{
  return specialized closure #1 in propertyScalarPredicate(_:)(a1, MEMORY[0x263F8ECD0]);
}

{
  return specialized closure #1 in propertyScalarPredicate(_:)(a1, MEMORY[0x263F8EC70]);
}

{
  return specialized closure #1 in propertyScalarPredicate(_:)(a1, MEMORY[0x263F8EBC8]);
}

{
  return specialized closure #1 in propertyScalarPredicate(_:)(a1, MEMORY[0x263F8EC98]);
}

{
  return specialized closure #1 in propertyScalarPredicate(_:)(a1, MEMORY[0x263F8EBF0]);
}

{
  return specialized closure #1 in propertyScalarPredicate(_:)(a1, MEMORY[0x263F8EC10]);
}

{
  return specialized closure #1 in propertyScalarPredicate(_:)(a1, MEMORY[0x263F8EBB0]);
}

{
  return specialized closure #1 in propertyScalarPredicate(_:)(a1, (uint64_t (*)(char *))closure #3 in Unicode.POSIXProperty.generateConsumer(_:));
}

{
  return specialized closure #1 in propertyScalarPredicate(_:)(a1, (uint64_t (*)(char *))closure #5 in Unicode.POSIXProperty.generateConsumer(_:));
}

{
  return specialized closure #1 in propertyScalarPredicate(_:)(a1, MEMORY[0x263F8EBA8]);
}

BOOL specialized closure #1 in propertyScalarPredicate(_:)()
{
  uint64_t v0 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Unicode.NumericType?);
  MEMORY[0x270FA5388](v0 - 8);
  uint64_t v2 = (char *)&v15 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v3 = type metadata accessor for Unicode.Scalar.Properties();
  uint64_t v4 = *(void *)(v3 - 8);
  uint64_t v5 = MEMORY[0x270FA5388](v3);
  char v7 = (char *)&v15 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v5);
  uint64_t v9 = (char *)&v15 - v8;
  Unicode.Scalar.properties.getter();
  char v10 = Unicode.Scalar.Properties.isAlphabetic.getter();
  (*(void (**)(char *, char *, uint64_t))(v4 + 16))(v7, v9, v3);
  if (v10)
  {
    uint64_t v11 = *(void (**)(char *, uint64_t))(v4 + 8);
    v11(v7, v3);
    BOOL v12 = 1;
  }
  else
  {
    Unicode.Scalar.Properties.numericType.getter();
    uint64_t v11 = *(void (**)(char *, uint64_t))(v4 + 8);
    v11(v7, v3);
    uint64_t v13 = type metadata accessor for Unicode.NumericType();
    BOOL v12 = (*(unsigned int (**)(char *, uint64_t, uint64_t))(*(void *)(v13 - 8) + 48))(v2, 1, v13) != 1;
    outlined destroy of (range: Range<String.Index>, value: Any?)?((uint64_t)v2, &demangling cache variable for type metadata for Unicode.NumericType?);
  }
  v11(v9, v3);
  return v12;
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  char v11;
  void (*v12)(char *, uint64_t);
  uint64_t v14;

  uint64_t v0 = type metadata accessor for Unicode.GeneralCategory();
  uint64_t v1 = *(void *)(v0 - 8);
  uint64_t v2 = MEMORY[0x270FA5388](v0);
  uint64_t v4 = (char *)&v14 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v2);
  uint64_t v6 = (char *)&v14 - v5;
  char v7 = type metadata accessor for Unicode.Scalar.Properties();
  uint64_t v8 = *(void *)(v7 - 8);
  MEMORY[0x270FA5388](v7);
  char v10 = (char *)&v14 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  Unicode.Scalar.properties.getter();
  Unicode.Scalar.Properties.generalCategory.getter();
  (*(void (**)(char *, void, uint64_t))(v1 + 104))(v4, *MEMORY[0x263F8EB40], v0);
  uint64_t v11 = dispatch thunk of static Equatable.== infix(_:_:)();
  BOOL v12 = *(void (**)(char *, uint64_t))(v1 + 8);
  v12(v4, v0);
  v12(v6, v0);
  (*(void (**)(char *, uint64_t))(v8 + 8))(v10, v7);
  return (v11 & 1) == 0;
}

uint64_t specialized closure #1 in propertyScalarPredicate(_:)(uint64_t a1, uint64_t (*a2)(char *))
{
  uint64_t v3 = type metadata accessor for Unicode.Scalar.Properties();
  uint64_t v4 = *(void *)(v3 - 8);
  MEMORY[0x270FA5388](v3);
  uint64_t v6 = (char *)&v8 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  Unicode.Scalar.properties.getter();
  LOBYTE(a2) = a2(v6);
  (*(void (**)(char *, uint64_t))(v4 + 8))(v6, v3);
  return a2 & 1;
}

uint64_t specialized closure #1 in propertyScalarPredicate(_:)(uint64_t a1, uint64_t (*a2)(uint64_t))
{
  uint64_t v3 = type metadata accessor for Unicode.Scalar.Properties();
  uint64_t v4 = *(void *)(v3 - 8);
  MEMORY[0x270FA5388](v3);
  uint64_t v6 = (char *)&v9 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = Unicode.Scalar.properties.getter();
  LOBYTE(a2) = a2(v7);
  (*(void (**)(char *, uint64_t))(v4 + 8))(v6, v3);
  return a2 & 1;
}

uint64_t closure #1 in propertyScalarPredicate(_:)(uint64_t a1, uint64_t (*a2)(char *))
{
  uint64_t v3 = type metadata accessor for Unicode.Scalar.Properties();
  uint64_t v4 = *(void *)(v3 - 8);
  MEMORY[0x270FA5388](v3);
  uint64_t v6 = (char *)&v8 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  Unicode.Scalar.properties.getter();
  LOBYTE(a2) = a2(v6);
  (*(void (**)(char *, uint64_t))(v4 + 8))(v6, v3);
  return a2 & 1;
}

uint64_t (*consumeScalar(_:)(uint64_t a1, uint64_t a2))(unint64_t a1, unint64_t a2, unint64_t a3)
{
  uint64_t v4 = swift_allocObject();
  *(void *)(v4 + 16) = a1;
  *(void *)(v4 + 24) = a2;
  swift_retain();
  return partial apply for closure #1 in consumeScalar(_:);
}

uint64_t specialized closure #1 in consumeScalar(_:)(unint64_t a1, unint64_t a2, unint64_t a3)
{
  _StringGuts.validateScalarIndex(_:)(a3, a1, a2);
  if ((a2 & 0x1000000000000000) != 0)
  {
    if (_StringGuts.foreignErrorCorrectedScalar(startingAt:)() <= 0x7F)
    {
      _StringGuts.validateScalarIndex(_:)(a3, a1, a2);
      return String.UnicodeScalarView._foreignIndex(after:)();
    }
    return 0;
  }
  if ((a2 & 0x2000000000000000) == 0)
  {
    if ((a1 & 0x1000000000000000) == 0) {
      _StringObject.sharedUTF8.getter();
    }
    if (_decodeScalar(_:startingAt:)() <= 0x7F)
    {
      unint64_t v6 = _StringGuts.validateScalarIndex(_:)(a3, a1, a2) >> 16;
      if ((a1 & 0x1000000000000000) != 0) {
        uint64_t v7 = (a2 & 0xFFFFFFFFFFFFFFFLL) + 32;
      }
      else {
        uint64_t v7 = _StringObject.sharedUTF8.getter();
      }
      int v8 = *(unsigned __int8 *)(v7 + v6);
      goto LABEL_12;
    }
    return 0;
  }
  unint64_t v12 = a1;
  uint64_t v13 = a2 & 0xFFFFFFFFFFFFFFLL;
  if (_decodeScalar(_:startingAt:)() > 0x7F) {
    return 0;
  }
  unint64_t v6 = _StringGuts.validateScalarIndex(_:)(a3, a1, a2) >> 16;
  unint64_t v12 = a1;
  uint64_t v13 = a2 & 0xFFFFFFFFFFFFFFLL;
  int v8 = *((unsigned __int8 *)&v12 + v6);
LABEL_12:
  int v10 = (char)v8;
  unsigned int v11 = __clz(v8 ^ 0xFF) - 24;
  if (v10 >= 0) {
    LOBYTE(v11) = 1;
  }
  return ((v6 + v11) << 16) | 5;
}

uint64_t (*consumeCharacterWithLeadingScalar(_:)(uint64_t a1, uint64_t a2))()
{
  uint64_t v4 = swift_allocObject();
  *(void *)(v4 + 16) = a1;
  *(void *)(v4 + 24) = a2;
  swift_retain();
  return partial apply for closure #1 in consumeCharacterWithLeadingScalar(_:);
}

uint64_t specialized closure #1 in consumeCharacterWithSingleScalar(_:)()
{
  String.subscript.getter();
  char v0 = Character.hasExactlyOneScalar.getter();
  swift_bridgeObjectRelease();
  if ((v0 & 1) == 0) {
    return 0;
  }
  unint64_t v1 = String.subscript.getter();
  unint64_t v3 = specialized Collection.first.getter(v1, v2);
  uint64_t result = swift_bridgeObjectRelease();
  if ((v3 & 0x100000000) != 0)
  {
    __break(1u);
  }
  else
  {
    if ((v3 & 0xFFFFFF80) != 0) {
      return 0;
    }
    return String.index(after:)();
  }
  return result;
}

uint64_t closure #1 in invert #1 (_:) in AST.Atom.CharacterProperty.generateConsumer(_:)(unint64_t a1, unint64_t a2, unint64_t a3, uint64_t a4, uint64_t (*a5)(void), uint64_t a6, uint64_t a7)
{
  uint64_t result = a5();
  if ((v12 & 1) == 0) {
    return 0;
  }
  uint64_t v13 = *(void *)(a7 + 16);
  if (v13) {
    return String.index(after:isScalarSemantics:)(a3, (*(_DWORD *)(a7 + 4 * v13 + 28) & 0x10000) == 0, a1, a2);
  }
  __break(1u);
  return result;
}

uint64_t closure #1 in AST.Atom.CharacterProperty.generateConsumer(_:)(uint64_t (*a1)(), uint64_t (*a2)(void *, uint64_t), void *a3)
{
  uint64_t v170 = a3;
  unint64_t v163 = a2;
  uint64_t v139 = type metadata accessor for AST.Atom.CharacterProperty.JavaSpecial();
  uint64_t v138 = *(void *)(v139 - 8);
  MEMORY[0x270FA5388](v139);
  uint64_t v137 = (char *)&v136 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v142 = type metadata accessor for AST.Atom.CharacterProperty.PCRESpecialCategory();
  uint64_t v141 = *(void *)(v142 - 8);
  MEMORY[0x270FA5388](v142);
  unint64_t v140 = (char *)&v136 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v145 = type metadata accessor for Unicode.POSIXProperty();
  uint64_t v144 = *(void *)(v145 - 8);
  MEMORY[0x270FA5388](v145);
  uint64_t v143 = (char *)&v136 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v148 = type metadata accessor for Unicode.Block();
  uint64_t v147 = *(void *)(v148 - 8);
  MEMORY[0x270FA5388](v148);
  uint64_t v146 = (char *)&v136 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = type metadata accessor for Unicode.CanonicalCombiningClass();
  uint64_t v152 = *(void *)(v8 - 8);
  uint64_t v153 = v8;
  MEMORY[0x270FA5388](v8);
  uint64_t v150 = v9;
  uint64_t v151 = (char *)&v136 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = type metadata accessor for Unicode.NumericType();
  uint64_t v157 = *(void *)(v10 - 8);
  uint64_t v158 = v10;
  MEMORY[0x270FA5388](v10);
  uint64_t v155 = v11;
  uint64_t v156 = (char *)&v136 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = type metadata accessor for Unicode.Script();
  uint64_t v161 = *(void *)(v12 - 8);
  uint64_t v162 = v12;
  MEMORY[0x270FA5388](v12);
  uint64_t v159 = v13;
  uint64_t v160 = (char *)&v136 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = type metadata accessor for Unicode.BinaryProperty();
  uint64_t v166 = *(void *)(v14 - 8);
  uint64_t v167 = v14;
  MEMORY[0x270FA5388](v14);
  uint64_t v165 = (uint64_t (*)())((char *)&v136 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v16 = type metadata accessor for Unicode.ExtendedGeneralCategory();
  uint64_t v17 = *(void *)(v16 - 8);
  MEMORY[0x270FA5388](v16);
  uint64_t v19 = (char *)&v136 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v20 = type metadata accessor for AST.Atom.CharacterProperty.Kind();
  uint64_t v21 = *(void *)(v20 - 8);
  uint64_t v22 = MEMORY[0x270FA5388](v20);
  unint64_t v154 = (char *)&v136 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v24 = MEMORY[0x270FA5388](v22);
  uint64_t v164 = (char *)&v136 - v25;
  uint64_t v26 = MEMORY[0x270FA5388](v24);
  Swift::String_optional v28 = (char *)&v136 - v27;
  uint64_t v29 = MEMORY[0x270FA5388](v26);
  unint64_t v31 = (char *)&v136 - v30;
  MEMORY[0x270FA5388](v29);
  unint64_t v33 = (char *)&v136 - v32;
  uint64_t v149 = a1;
  AST.Atom.CharacterProperty.kind.getter();
  uint64_t result = (*(uint64_t (**)(char *, uint64_t))(v21 + 88))(v33, v20);
  if (result == *MEMORY[0x263F8FAF0])
  {
    (*(void (**)(char *, char *, uint64_t))(v21 + 16))(v31, v33, v20);
    (*(void (**)(char *, uint64_t))(v21 + 96))(v31, v20);
    (*(void (**)(char *, char *, uint64_t))(v17 + 32))(v19, v31, v16);
    uint64_t v35 = v169;
    a1 = (uint64_t (*)())v19;
    uint64_t v36 = Unicode.ExtendedGeneralCategory.generateConsumer(_:)(v170);
    uint64_t v37 = v20;
    if (v35)
    {
      (*(void (**)(char *, uint64_t))(v17 + 8))(v19, v16);
      uint64_t v38 = v33;
LABEL_7:
      (*(void (**)(char *, uint64_t))(v21 + 8))(v38, v37);
      return (uint64_t)a1;
    }
    a1 = (uint64_t (*)())v36;
    (*(void (**)(char *, uint64_t))(v17 + 8))(v19, v16);
    uint64_t v56 = v20;
    uint64_t v47 = v33;
    goto LABEL_20;
  }
  unint64_t v39 = v170;
  uint64_t v168 = v33;
  if (result == *MEMORY[0x263F8FB38])
  {
    (*(void (**)(char *, char *, uint64_t))(v21 + 16))(v28, v168, v20);
    (*(void (**)(char *, uint64_t))(v21 + 96))(v28, v20);
    char v40 = v28[*(int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Unicode.BinaryProperty, value: Bool))
                     + 48)];
    a1 = v165;
    uint64_t v41 = v166;
    uint64_t v42 = v167;
    (*(void (**)(uint64_t (*)(), char *, uint64_t))(v166 + 32))(v165, v28, v167);
    uint64_t v43 = v169;
    uint64_t v44 = Unicode.BinaryProperty.generateConsumer(_:)((uint64_t)v39);
    if (v43)
    {
      (*(void (**)(uint64_t (*)(), uint64_t))(v41 + 8))(a1, v42);
      uint64_t v38 = v168;
      uint64_t v37 = v20;
      goto LABEL_7;
    }
    uint64_t v66 = v45;
    uint64_t v169 = (uint64_t (*)())v44;
    (*(void (**)(uint64_t (*)(), uint64_t))(v41 + 8))(a1, v42);
    if (v40)
    {
      uint64_t v47 = v168;
      a1 = v169;
    }
    else
    {
      unint64_t v69 = (void *)swift_allocObject();
      v69[2] = v169;
      v69[3] = v66;
      v69[4] = v39;
      swift_bridgeObjectRetain();
      a1 = closure #1 in invert #1 (_:) in AST.Atom.CharacterProperty.generateConsumer(_:)partial apply;
      uint64_t v47 = v168;
    }
    uint64_t v56 = v20;
LABEL_20:
    (*(void (**)(char *, uint64_t))(v21 + 8))(v47, v56);
    return (uint64_t)a1;
  }
  if (result == *MEMORY[0x263F8FB40])
  {
    int v46 = v164;
    uint64_t v47 = v168;
    uint64_t v48 = v20;
    (*(void (**)(char *, char *, uint64_t))(v21 + 16))(v164, v168, v20);
    (*(void (**)(char *, uint64_t))(v21 + 96))(v46, v20);
    uint64_t v49 = v160;
    uint64_t v51 = v161 + 32;
    uint64_t v50 = *(void (**)(char *, char *, uint64_t))(v161 + 32);
    uint64_t v52 = v162;
    v50(v160, v46, v162);
    unint64_t v53 = (*(unsigned __int8 *)(v51 + 48) + 16) & ~(unint64_t)*(unsigned __int8 *)(v51 + 48);
    uint64_t v54 = swift_allocObject();
    uint64_t v55 = v52;
    uint64_t v56 = v48;
    v50((char *)(v54 + v53), v49, v55);
    unint64_t v57 = partial apply for closure #1 in scriptScalarPredicate(_:);
LABEL_10:
    a1 = (uint64_t (*)())v163(v57, v54);
    swift_release();
    goto LABEL_20;
  }
  uint64_t v38 = v168;
  if (result == *MEMORY[0x263F8FAF8])
  {
    char v58 = v164;
    uint64_t v59 = v20;
    (*(void (**)(char *, char *, uint64_t))(v21 + 16))(v164, v168, v20);
    (*(void (**)(char *, uint64_t))(v21 + 96))(v58, v20);
    uint64_t v60 = v160;
    uint64_t v62 = v161 + 32;
    uint64_t v61 = *(void (**)(char *, char *, uint64_t))(v161 + 32);
    uint64_t v63 = v162;
    v61(v160, v58, v162);
    unint64_t v64 = (*(unsigned __int8 *)(v62 + 48) + 16) & ~(unint64_t)*(unsigned __int8 *)(v62 + 48);
    uint64_t v65 = swift_allocObject();
    v61((char *)(v65 + v64), v60, v63);
    uint64_t v56 = v59;
    a1 = (uint64_t (*)())v163(partial apply for closure #1 in scriptExtensionScalarPredicate(_:), v65);
    swift_release();
    uint64_t v47 = v38;
    goto LABEL_20;
  }
  if (result == *MEMORY[0x263F8FB28])
  {
    uint64_t v67 = (uint64_t *)v164;
    uint64_t v47 = v168;
    (*(void (**)(char *, char *, uint64_t))(v21 + 16))(v164, v168, v20);
    (*(void (**)(uint64_t *, uint64_t))(v21 + 96))(v67, v20);
    uint64_t v68 = (uint64_t)v39;
    uint64_t v56 = v20;
    a1 = (uint64_t (*)())consumeName(_:opts:)(*v67, v67[1], v68);
    swift_bridgeObjectRelease();
    goto LABEL_20;
  }
  if (result == *MEMORY[0x263F8FAD8])
  {
    unint64_t v70 = v164;
    uint64_t v47 = v168;
    uint64_t v71 = v20;
    (*(void (**)(char *, char *, uint64_t))(v21 + 16))(v164, v168, v20);
    (*(void (**)(char *, uint64_t))(v21 + 96))(v70, v20);
    int v72 = v156;
    uint64_t v74 = v157 + 32;
    unint64_t v73 = *(void (**)(char *, char *, uint64_t))(v157 + 32);
    uint64_t v75 = v158;
    v73(v156, v70, v158);
    unint64_t v76 = (*(unsigned __int8 *)(v74 + 48) + 16) & ~(unint64_t)*(unsigned __int8 *)(v74 + 48);
    uint64_t v77 = v71;
    uint64_t v54 = swift_allocObject();
    uint64_t v78 = v75;
    uint64_t v56 = v77;
    v73((char *)(v54 + v76), v72, v78);
    unint64_t v57 = partial apply for closure #5 in closure #1 in AST.Atom.CharacterProperty.generateConsumer(_:);
    goto LABEL_10;
  }
  if (result == *MEMORY[0x263F8FAE8])
  {
    uint64_t v79 = v164;
    uint64_t v47 = v168;
    uint64_t v56 = v20;
    (*(void (**)(char *, char *, uint64_t))(v21 + 16))(v164, v168, v20);
    (*(void (**)(char *, uint64_t))(v21 + 96))(v79, v20);
    uint64_t v80 = *(void *)v79;
    uint64_t v54 = swift_allocObject();
    *(void *)(v54 + 16) = v80;
    unint64_t v57 = partial apply for closure #4 in closure #1 in AST.Atom.CharacterProperty.generateConsumer(_:);
    goto LABEL_10;
  }
  uint64_t v81 = v20;
  if (result == *MEMORY[0x263F8FB50])
  {
    unint64_t v82 = v154;
    (*(void (**)(char *, char *, uint64_t))(v21 + 16))(v154, v168, v20);
    unint64_t v83 = *(void (**)(char *, uint64_t))(v21 + 96);
    uint64_t v167 = v20;
    v83(v82, v20);
    uint64_t v84 = &v82[*(int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (AST.Atom.CharacterProperty.Kind.MapKind, String))
                      + 48)];
    uint64_t v86 = *(void *)v84;
    uint64_t v85 = *((void *)v84 + 1);
    uint64_t v87 = type metadata accessor for AST.Atom.CharacterProperty.Kind.MapKind();
    uint64_t v88 = *(void *)(v87 - 8);
    int v89 = (*(uint64_t (**)(char *, uint64_t))(v88 + 88))(v82, v87);
    if (v89 == *MEMORY[0x263F8FAB8])
    {
      uint64_t v90 = swift_allocObject();
      *(void *)(v90 + 16) = v86;
      *(void *)(v90 + 24) = v85;
      uint64_t v91 = partial apply for closure #7 in closure #1 in AST.Atom.CharacterProperty.generateConsumer(_:);
LABEL_37:
      a1 = (uint64_t (*)())v163(v91, v90);
      swift_release();
      uint64_t v47 = v38;
      uint64_t v56 = v167;
      goto LABEL_20;
    }
    if (v89 == *MEMORY[0x263F8FAC8])
    {
      uint64_t v90 = swift_allocObject();
      *(void *)(v90 + 16) = v86;
      *(void *)(v90 + 24) = v85;
      uint64_t v91 = partial apply for closure #8 in closure #1 in AST.Atom.CharacterProperty.generateConsumer(_:);
      goto LABEL_37;
    }
    if (v89 == *MEMORY[0x263F8FAC0])
    {
      uint64_t v90 = swift_allocObject();
      *(void *)(v90 + 16) = v86;
      *(void *)(v90 + 24) = v85;
      uint64_t v91 = partial apply for closure #9 in closure #1 in AST.Atom.CharacterProperty.generateConsumer(_:);
      goto LABEL_37;
    }
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v88 + 8))(v82, v87);
    goto LABEL_41;
  }
  if (result == *MEMORY[0x263F8FB10])
  {
    uint64_t v92 = v164;
    uint64_t v47 = v168;
    (*(void (**)(char *, char *, uint64_t))(v21 + 16))(v164, v168, v20);
    (*(void (**)(char *, uint64_t))(v21 + 96))(v92, v20);
    uint64_t v93 = v153;
    uint64_t v95 = v152 + 32;
    unsigned int v94 = *(void (**)(char *, char *, uint64_t))(v152 + 32);
    unint64_t v96 = v151;
    v94(v151, v92, v153);
    unint64_t v97 = (*(unsigned __int8 *)(v95 + 48) + 16) & ~(unint64_t)*(unsigned __int8 *)(v95 + 48);
    uint64_t v54 = swift_allocObject();
    uint64_t v98 = v93;
    uint64_t v56 = v81;
    v94((char *)(v54 + v97), v96, v98);
    unint64_t v57 = partial apply for closure #6 in closure #1 in AST.Atom.CharacterProperty.generateConsumer(_:);
    goto LABEL_10;
  }
  if (result == *MEMORY[0x263F8FB00])
  {
    unint64_t v99 = v164;
    uint64_t v47 = v168;
    uint64_t v56 = v20;
    (*(void (**)(char *, char *, uint64_t))(v21 + 16))(v164, v168, v20);
    (*(void (**)(char *, uint64_t))(v21 + 96))(v99, v20);
    uint64_t v100 = *(void *)v99;
    uint64_t v101 = *((void *)v99 + 1);
    uint64_t v54 = swift_allocObject();
    *(void *)(v54 + 16) = v100;
    *(void *)(v54 + 24) = v101;
    unint64_t v57 = partial apply for closure #3 in closure #1 in AST.Atom.CharacterProperty.generateConsumer(_:);
    goto LABEL_10;
  }
  if (result == *MEMORY[0x263F8FB20])
  {
    unint64_t v102 = v164;
    (*(void (**)(char *, char *, uint64_t))(v21 + 16))(v164, v168, v20);
    (*(void (**)(char *, uint64_t))(v21 + 96))(v102, v20);
    uint64_t v103 = v147;
    unint64_t v104 = v146;
    uint64_t v105 = v102;
    uint64_t v106 = v148;
    (*(void (**)(char *, char *, uint64_t))(v147 + 32))(v146, v105, v148);
    uint64_t v171 = 0;
    unint64_t v172 = 0xE000000000000000;
    _StringGuts.grow(_:)(19);
    v107._uint64_t countAndFlagsBits = 0xD000000000000011;
    v107._object = (void *)0x8000000209FB6A80;
    String.append(_:)(v107);
    _print_unlocked<A, B>(_:_:)();
    uint64_t v37 = v20;
    (*(void (**)(char *, uint64_t))(v103 + 8))(v104, v106);
    uint64_t v108 = v171;
    a1 = (uint64_t (*)())v172;
    type metadata accessor for Unsupported();
    lazy protocol witness table accessor for type AST.Quantification.Kind and conformance AST.Quantification.Kind(&lazy protocol witness table cache variable for type Unsupported and conformance Unsupported, MEMORY[0x263F8F860]);
    swift_allocError();
    uint64_t v109 = v108;
    unint64_t v110 = a1;
    uint64_t v111 = 424;
LABEL_48:
    MEMORY[0x21050E6B0](v109, v110, "/Library/Caches/com.apple.xbs/Sources/swiftlang_overlay_Platform_Device/swift-experimental-string-processing/Sources/_StringProcessing/ConsumerInterface.swift", 158, 2, v111);
    goto LABEL_49;
  }
  if (result == *MEMORY[0x263F8FB30])
  {
    uint64_t v115 = v164;
    uint64_t v47 = v168;
    (*(void (**)(char *, char *, uint64_t))(v21 + 16))(v164, v168, v20);
    (*(void (**)(char *, uint64_t))(v21 + 96))(v115, v20);
    uint64_t v116 = v144;
    unint64_t v117 = v143;
    uint64_t v118 = v145;
    (*(void (**)(char *, char *, uint64_t))(v144 + 32))(v143, v115, v145);
    uint64_t v119 = (uint64_t)v39;
    uint64_t v56 = v81;
    a1 = (uint64_t (*)())Unicode.POSIXProperty.generateConsumer(_:)(v119);
    (*(void (**)(char *, uint64_t))(v116 + 8))(v117, v118);
    goto LABEL_20;
  }
  if (result == *MEMORY[0x263F8FAE0])
  {
    uint64_t v120 = v164;
    (*(void (**)(char *, char *, uint64_t))(v21 + 16))(v164, v168, v20);
    (*(void (**)(char *, uint64_t))(v21 + 96))(v120, v20);
    uint64_t v121 = v141;
    uint64_t v122 = v140;
    unint64_t v123 = v120;
    uint64_t v124 = v142;
    (*(void (**)(char *, char *, uint64_t))(v141 + 32))(v140, v123, v142);
    uint64_t v171 = 0;
    unint64_t v172 = 0xE000000000000000;
    _StringGuts.grow(_:)(26);
    v125._object = (void *)0x8000000209FB6A60;
    v125._uint64_t countAndFlagsBits = 0xD000000000000018;
    String.append(_:)(v125);
    _print_unlocked<A, B>(_:_:)();
    uint64_t v37 = v20;
    (*(void (**)(char *, uint64_t))(v121 + 8))(v122, v124);
    uint64_t v126 = v171;
    a1 = (uint64_t (*)())v172;
    type metadata accessor for Unsupported();
    lazy protocol witness table accessor for type AST.Quantification.Kind and conformance AST.Quantification.Kind(&lazy protocol witness table cache variable for type Unsupported and conformance Unsupported, MEMORY[0x263F8F860]);
    swift_allocError();
    uint64_t v109 = v126;
    unint64_t v110 = a1;
    uint64_t v111 = 430;
    goto LABEL_48;
  }
  if (result == *MEMORY[0x263F8FAD0])
  {
    uint64_t v127 = v164;
    (*(void (**)(char *, char *, uint64_t))(v21 + 16))(v164, v168, v20);
    (*(void (**)(char *, uint64_t))(v21 + 96))(v127, v20);
    uint64_t v128 = v138;
    unint64_t v129 = v137;
    uint64_t v130 = v127;
    uint64_t v131 = v139;
    (*(void (**)(char *, char *, uint64_t))(v138 + 32))(v137, v130, v139);
    uint64_t v171 = 0;
    unint64_t v172 = 0xE000000000000000;
    _StringGuts.grow(_:)(26);
    v132._object = (void *)0x8000000209FB6A40;
    v132._uint64_t countAndFlagsBits = 0xD000000000000018;
    String.append(_:)(v132);
    _print_unlocked<A, B>(_:_:)();
    uint64_t v37 = v20;
    (*(void (**)(char *, uint64_t))(v128 + 8))(v129, v131);
    uint64_t v133 = v171;
    a1 = (uint64_t (*)())v172;
    type metadata accessor for Unsupported();
    lazy protocol witness table accessor for type AST.Quantification.Kind and conformance AST.Quantification.Kind(&lazy protocol witness table cache variable for type Unsupported and conformance Unsupported, MEMORY[0x263F8F860]);
    swift_allocError();
    uint64_t v109 = v133;
    unint64_t v110 = a1;
    uint64_t v111 = 433;
    goto LABEL_48;
  }
  if (result == *MEMORY[0x263F8FB48])
  {
    type metadata accessor for Unreachable();
    lazy protocol witness table accessor for type AST.Quantification.Kind and conformance AST.Quantification.Kind(&lazy protocol witness table cache variable for type Unreachable and conformance Unreachable, MEMORY[0x263F8F850]);
    swift_allocError();
    MEMORY[0x21050E690](0xD000000000000017, 0x8000000209FB6A20, "/Library/Caches/com.apple.xbs/Sources/swiftlang_overlay_Platform_Device/swift-experimental-string-processing/Sources/_StringProcessing/ConsumerInterface.swift", 158, 2, 436);
    swift_willThrow();
    uint64_t v37 = v20;
    uint64_t v38 = v168;
    goto LABEL_7;
  }
  if (result == *MEMORY[0x263F8FB08])
  {
    uint64_t v56 = v20;
    uint64_t v47 = v168;
    a1 = closure #1 in closure #1 in AST.Atom.CharacterProperty.generateConsumer(_:);
    goto LABEL_20;
  }
  if (result == *MEMORY[0x263F8FB58])
  {
    a1 = (uint64_t (*)())v163(closure #2 in closure #1 in AST.Atom.CharacterProperty.generateConsumer(_:), 0);
LABEL_61:
    uint64_t v56 = v20;
    uint64_t v47 = v168;
    goto LABEL_20;
  }
  int v134 = *MEMORY[0x263F8FB18];
  uint64_t v167 = v20;
  uint64_t v38 = v168;
  if (result != v134)
  {
LABEL_41:
    uint64_t v171 = 0;
    unint64_t v172 = 0xE000000000000000;
    v112._uint64_t countAndFlagsBits = 0x206E776F6E6B6E55;
    v112._object = (void *)0xED000020646E696BLL;
    String.append(_:)(v112);
    unint64_t v113 = v164;
    AST.Atom.CharacterProperty.kind.getter();
    uint64_t v37 = v167;
    _print_unlocked<A, B>(_:_:)();
    (*(void (**)(char *, uint64_t))(v21 + 8))(v113, v37);
    uint64_t v114 = v171;
    a1 = (uint64_t (*)())v172;
    type metadata accessor for Unreachable();
    lazy protocol witness table accessor for type AST.Quantification.Kind and conformance AST.Quantification.Kind(&lazy protocol witness table cache variable for type Unreachable and conformance Unreachable, MEMORY[0x263F8F850]);
    swift_allocError();
    MEMORY[0x21050E690](v114, a1, "/Library/Caches/com.apple.xbs/Sources/swiftlang_overlay_Platform_Device/swift-experimental-string-processing/Sources/_StringProcessing/ConsumerInterface.swift", 158, 2, 440);
LABEL_49:
    swift_willThrow();
    goto LABEL_7;
  }
  uint64_t v135 = v170[2];
  if (v135)
  {
    if ((*((_DWORD *)v170 + v135 + 7) & 0x10000) != 0) {
      a1 = specialized closure #1 in consumeCharacterWithSingleScalar(_:);
    }
    else {
      a1 = (uint64_t (*)())specialized closure #1 in consumeScalar(_:);
    }
    goto LABEL_61;
  }
  __break(1u);
  return result;
}

uint64_t closure #1 in closure #1 in AST.Atom.CharacterProperty.generateConsumer(_:)()
{
  return String.index(after:)();
}

BOOL closure #2 in closure #1 in AST.Atom.CharacterProperty.generateConsumer(_:)()
{
  uint64_t v0 = type metadata accessor for Unicode.GeneralCategory();
  uint64_t v1 = *(void *)(v0 - 8);
  uint64_t v2 = MEMORY[0x270FA5388](v0);
  uint64_t v4 = (char *)&v14 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v2);
  uint64_t v6 = (char *)&v14 - v5;
  uint64_t v7 = type metadata accessor for Unicode.Scalar.Properties();
  uint64_t v8 = *(void *)(v7 - 8);
  MEMORY[0x270FA5388](v7);
  uint64_t v10 = (char *)&v14 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  Unicode.Scalar.properties.getter();
  Unicode.Scalar.Properties.generalCategory.getter();
  (*(void (**)(char *, uint64_t))(v8 + 8))(v10, v7);
  (*(void (**)(char *, void, uint64_t))(v1 + 104))(v4, *MEMORY[0x263F8EA70], v0);
  char v11 = dispatch thunk of static Equatable.== infix(_:_:)();
  uint64_t v12 = *(void (**)(char *, uint64_t))(v1 + 8);
  v12(v4, v0);
  v12(v6, v0);
  return (v11 & 1) == 0;
}

uint64_t Unicode.ExtendedGeneralCategory.generateConsumer(_:)(void *a1)
{
  uint64_t v3 = type metadata accessor for Unicode.GeneralCategory();
  uint64_t v4 = *(void *)(v3 - 8);
  uint64_t v5 = *(void *)(v4 + 64);
  uint64_t v6 = MEMORY[0x270FA5388](v3);
  uint64_t v150 = (char *)&v149 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v6);
  uint64_t v8 = (char *)&v149 - v7;
  uint64_t v9 = type metadata accessor for Unicode.ExtendedGeneralCategory();
  uint64_t v10 = *(void *)(v9 - 8);
  int v11 = MEMORY[0x270FA5388](v9);
  uint64_t v13 = (char *)&v149 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = a1[2];
  if (v14)
  {
    if ((*((_DWORD *)a1 + v14 + 7) & 0x10000) != 0) {
      a1 = consumeCharacterWithLeadingScalar(_:);
    }
    else {
      a1 = consumeScalar(_:);
    }
    (*(void (**)(char *, uint64_t, uint64_t))(v10 + 16))(v13, v1, v9);
    int v11 = (*(uint64_t (**)(char *, uint64_t))(v10 + 88))(v13, v9);
    if (v11 == *MEMORY[0x263F90048])
    {
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Unicode.GeneralCategory>);
      uint64_t v15 = *(void *)(v4 + 72);
      unint64_t v16 = (*(unsigned __int8 *)(v4 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80);
      uint64_t v17 = swift_allocObject();
      *(_OWORD *)(v17 + 16) = xmmword_209FAFDC0;
      unint64_t v18 = v17 + v16;
      uint64_t v19 = *(void (**)(unint64_t, void, uint64_t))(v4 + 104);
      v19(v18, *MEMORY[0x263F8EB40], v3);
      v19(v18 + v15, *MEMORY[0x263F8EB38], v3);
      v19(v18 + 2 * v15, *MEMORY[0x263F8EB48], v3);
      v19(v18 + 3 * v15, *MEMORY[0x263F8EA68], v3);
      v19(v18 + 4 * v15, *MEMORY[0x263F8EA70], v3);
      uint64_t v20 = swift_allocObject();
      *(void *)(v20 + 16) = v17;
      uint64_t v21 = closure #1 in categoriesScalarPredicate(_:)partial apply;
LABEL_82:
      uint64_t v147 = ((uint64_t (*)(uint64_t (*)(), uint64_t))a1)(v21, v20);
      swift_release();
      return v147;
    }
    if (v11 == *MEMORY[0x263F90070])
    {
      (*(void (**)(char *, void, uint64_t))(v4 + 104))(v8, *MEMORY[0x263F8EB40], v3);
      uint64_t v22 = *(void (**)(char *, char *, uint64_t))(v4 + 32);
      uint64_t v23 = v150;
      v22(v150, v8, v3);
      unint64_t v24 = (*(unsigned __int8 *)(v4 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80);
      uint64_t v20 = swift_allocObject();
      v22((char *)(v20 + v24), v23, v3);
      uint64_t v21 = (uint64_t (*)())partial apply for closure #1 in categoryScalarPredicate(_:);
      goto LABEL_82;
    }
    if (v11 == *MEMORY[0x263F90050])
    {
      (*(void (**)(char *, void, uint64_t))(v4 + 104))(v8, *MEMORY[0x263F8EB38], v3);
      uint64_t v25 = *(void (**)(char *, char *, uint64_t))(v4 + 32);
      uint64_t v26 = v150;
      v25(v150, v8, v3);
      unint64_t v27 = (*(unsigned __int8 *)(v4 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80);
      uint64_t v20 = swift_allocObject();
      v25((char *)(v20 + v27), v26, v3);
      uint64_t v21 = (uint64_t (*)())partial apply for closure #1 in categoryScalarPredicate(_:);
      goto LABEL_82;
    }
    if (v11 == *MEMORY[0x263F8FF68])
    {
      (*(void (**)(char *, void, uint64_t))(v4 + 104))(v8, *MEMORY[0x263F8EA70], v3);
      Swift::String_optional v28 = *(void (**)(char *, char *, uint64_t))(v4 + 32);
      uint64_t v29 = v150;
      v28(v150, v8, v3);
      unint64_t v30 = (*(unsigned __int8 *)(v4 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80);
      uint64_t v20 = swift_allocObject();
      v28((char *)(v20 + v30), v29, v3);
      uint64_t v21 = (uint64_t (*)())partial apply for closure #1 in categoryScalarPredicate(_:);
      goto LABEL_82;
    }
    if (v11 == *MEMORY[0x263F8FF60])
    {
      (*(void (**)(char *, void, uint64_t))(v4 + 104))(v8, *MEMORY[0x263F8EA68], v3);
      unint64_t v31 = *(void (**)(char *, char *, uint64_t))(v4 + 32);
      uint64_t v32 = v150;
      v31(v150, v8, v3);
      unint64_t v33 = (*(unsigned __int8 *)(v4 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80);
      uint64_t v20 = swift_allocObject();
      v31((char *)(v20 + v33), v32, v3);
      uint64_t v21 = (uint64_t (*)())partial apply for closure #1 in categoryScalarPredicate(_:);
      goto LABEL_82;
    }
    if (v11 == *MEMORY[0x263F90080])
    {
      (*(void (**)(char *, void, uint64_t))(v4 + 104))(v8, *MEMORY[0x263F8EB48], v3);
      unint64_t v34 = *(void (**)(char *, char *, uint64_t))(v4 + 32);
      uint64_t v35 = v150;
      v34(v150, v8, v3);
      unint64_t v36 = (*(unsigned __int8 *)(v4 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80);
      uint64_t v20 = swift_allocObject();
      v34((char *)(v20 + v36), v35, v3);
      uint64_t v21 = (uint64_t (*)())partial apply for closure #1 in categoryScalarPredicate(_:);
      goto LABEL_82;
    }
    if (v11 == *MEMORY[0x263F90058])
    {
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Unicode.GeneralCategory>);
      uint64_t v37 = *(void *)(v4 + 72);
      unint64_t v38 = (*(unsigned __int8 *)(v4 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80);
      uint64_t v39 = swift_allocObject();
      *(_OWORD *)(v39 + 16) = xmmword_209FAFDC0;
      unint64_t v40 = v39 + v38;
      uint64_t v41 = *(void (**)(unint64_t, void, uint64_t))(v4 + 104);
      v41(v40, *MEMORY[0x263F8EB00], v3);
      v41(v40 + v37, *MEMORY[0x263F8EAE8], v3);
      v41(v40 + 2 * v37, *MEMORY[0x263F8EAF8], v3);
      v41(v40 + 3 * v37, *MEMORY[0x263F8EAC0], v3);
      v41(v40 + 4 * v37, *MEMORY[0x263F8EA78], v3);
      uint64_t v20 = swift_allocObject();
      *(void *)(v20 + 16) = v39;
      uint64_t v21 = closure #1 in categoriesScalarPredicate(_:)partial apply;
      goto LABEL_82;
    }
    if (v11 == *MEMORY[0x263F8FF70])
    {
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Unicode.GeneralCategory>);
      uint64_t v42 = *(void *)(v4 + 72);
      unint64_t v43 = (*(unsigned __int8 *)(v4 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80);
      uint64_t v44 = swift_allocObject();
      *(_OWORD *)(v44 + 16) = xmmword_209FAFD90;
      unint64_t v45 = v44 + v43;
      int v46 = *(void (**)(unint64_t, void, uint64_t))(v4 + 104);
      v46(v45, *MEMORY[0x263F8EB00], v3);
      v46(v45 + v42, *MEMORY[0x263F8EAE8], v3);
      v46(v45 + 2 * v42, *MEMORY[0x263F8EAF8], v3);
      uint64_t v20 = swift_allocObject();
      *(void *)(v20 + 16) = v44;
      uint64_t v21 = (uint64_t (*)())partial apply for closure #1 in categoriesScalarPredicate(_:);
      goto LABEL_82;
    }
    if (v11 == *MEMORY[0x263F8FFF0])
    {
      (*(void (**)(char *, void, uint64_t))(v4 + 104))(v8, *MEMORY[0x263F8EAE8], v3);
      uint64_t v47 = *(void (**)(char *, char *, uint64_t))(v4 + 32);
      uint64_t v48 = v150;
      v47(v150, v8, v3);
      unint64_t v49 = (*(unsigned __int8 *)(v4 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80);
      uint64_t v20 = swift_allocObject();
      v47((char *)(v20 + v49), v48, v3);
      uint64_t v21 = (uint64_t (*)())partial apply for closure #1 in categoryScalarPredicate(_:);
      goto LABEL_82;
    }
    if (v11 == *MEMORY[0x263F8FFC8])
    {
      (*(void (**)(char *, void, uint64_t))(v4 + 104))(v8, *MEMORY[0x263F8EAC0], v3);
      uint64_t v50 = *(void (**)(char *, char *, uint64_t))(v4 + 32);
      uint64_t v51 = v150;
      v50(v150, v8, v3);
      unint64_t v52 = (*(unsigned __int8 *)(v4 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80);
      uint64_t v20 = swift_allocObject();
      v50((char *)(v20 + v52), v51, v3);
      uint64_t v21 = (uint64_t (*)())partial apply for closure #1 in categoryScalarPredicate(_:);
      goto LABEL_82;
    }
    if (v11 == *MEMORY[0x263F8FF78])
    {
      (*(void (**)(char *, void, uint64_t))(v4 + 104))(v8, *MEMORY[0x263F8EA78], v3);
      unint64_t v53 = *(void (**)(char *, char *, uint64_t))(v4 + 32);
      uint64_t v54 = v150;
      v53(v150, v8, v3);
      unint64_t v55 = (*(unsigned __int8 *)(v4 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80);
      uint64_t v20 = swift_allocObject();
      v53((char *)(v20 + v55), v54, v3);
      uint64_t v21 = (uint64_t (*)())partial apply for closure #1 in categoryScalarPredicate(_:);
      goto LABEL_82;
    }
  }
  else
  {
    __break(1u);
  }
  if (v11 == *MEMORY[0x263F90000])
  {
    (*(void (**)(char *, void, uint64_t))(v4 + 104))(v8, *MEMORY[0x263F8EAF8], v3);
    uint64_t v56 = *(void (**)(char *, char *, uint64_t))(v4 + 32);
    unint64_t v57 = v150;
    v56(v150, v8, v3);
    unint64_t v58 = (*(unsigned __int8 *)(v4 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80);
    uint64_t v20 = swift_allocObject();
    v56((char *)(v20 + v58), v57, v3);
    uint64_t v21 = (uint64_t (*)())partial apply for closure #1 in categoryScalarPredicate(_:);
    goto LABEL_82;
  }
  if (v11 == *MEMORY[0x263F90008])
  {
    (*(void (**)(char *, void, uint64_t))(v4 + 104))(v8, *MEMORY[0x263F8EB00], v3);
    uint64_t v59 = *(void (**)(char *, char *, uint64_t))(v4 + 32);
    uint64_t v60 = v150;
    v59(v150, v8, v3);
    unint64_t v61 = (*(unsigned __int8 *)(v4 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80);
    uint64_t v20 = swift_allocObject();
    v59((char *)(v20 + v61), v60, v3);
    uint64_t v21 = (uint64_t (*)())partial apply for closure #1 in categoryScalarPredicate(_:);
    goto LABEL_82;
  }
  if (v11 == *MEMORY[0x263F90040])
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Unicode.GeneralCategory>);
    uint64_t v62 = *(void *)(v4 + 72);
    unint64_t v63 = (*(unsigned __int8 *)(v4 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80);
    uint64_t v64 = swift_allocObject();
    *(_OWORD *)(v64 + 16) = xmmword_209FAFD90;
    unint64_t v65 = v64 + v63;
    uint64_t v66 = *(void (**)(unint64_t, void, uint64_t))(v4 + 104);
    v66(v65, *MEMORY[0x263F8EAD0], v3);
    v66(v65 + v62, *MEMORY[0x263F8EA90], v3);
    v66(v65 + 2 * v62, *MEMORY[0x263F8EAA8], v3);
    uint64_t v20 = swift_allocObject();
    *(void *)(v20 + 16) = v64;
    uint64_t v21 = closure #1 in categoriesScalarPredicate(_:)partial apply;
    goto LABEL_82;
  }
  if (v11 == *MEMORY[0x263F8FF98])
  {
    (*(void (**)(char *, void, uint64_t))(v4 + 104))(v8, *MEMORY[0x263F8EA90], v3);
    uint64_t v67 = *(void (**)(char *, char *, uint64_t))(v4 + 32);
    uint64_t v68 = v150;
    v67(v150, v8, v3);
    unint64_t v69 = (*(unsigned __int8 *)(v4 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80);
    uint64_t v20 = swift_allocObject();
    v67((char *)(v20 + v69), v68, v3);
    uint64_t v21 = (uint64_t (*)())partial apply for closure #1 in categoryScalarPredicate(_:);
    goto LABEL_82;
  }
  if (v11 == *MEMORY[0x263F8FFB0])
  {
    (*(void (**)(char *, void, uint64_t))(v4 + 104))(v8, *MEMORY[0x263F8EAA8], v3);
    unint64_t v70 = *(void (**)(char *, char *, uint64_t))(v4 + 32);
    uint64_t v71 = v150;
    v70(v150, v8, v3);
    unint64_t v72 = (*(unsigned __int8 *)(v4 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80);
    uint64_t v20 = swift_allocObject();
    v70((char *)(v20 + v72), v71, v3);
    uint64_t v21 = (uint64_t (*)())partial apply for closure #1 in categoryScalarPredicate(_:);
    goto LABEL_82;
  }
  if (v11 == *MEMORY[0x263F8FFD8])
  {
    (*(void (**)(char *, void, uint64_t))(v4 + 104))(v8, *MEMORY[0x263F8EAD0], v3);
    unint64_t v73 = *(void (**)(char *, char *, uint64_t))(v4 + 32);
    uint64_t v74 = v150;
    v73(v150, v8, v3);
    unint64_t v75 = (*(unsigned __int8 *)(v4 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80);
    uint64_t v20 = swift_allocObject();
    v73((char *)(v20 + v75), v74, v3);
    uint64_t v21 = (uint64_t (*)())partial apply for closure #1 in categoryScalarPredicate(_:);
    goto LABEL_82;
  }
  if (v11 == *MEMORY[0x263F90060])
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Unicode.GeneralCategory>);
    uint64_t v76 = *(void *)(v4 + 72);
    unint64_t v77 = (*(unsigned __int8 *)(v4 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80);
    uint64_t v78 = swift_allocObject();
    *(_OWORD *)(v78 + 16) = xmmword_209FAFD90;
    unint64_t v79 = v78 + v77;
    uint64_t v80 = *(void (**)(unint64_t, void, uint64_t))(v4 + 104);
    v80(v79, *MEMORY[0x263F8EAA0], v3);
    v80(v79 + v76, *MEMORY[0x263F8EA98], v3);
    v80(v79 + 2 * v76, *MEMORY[0x263F8EA80], v3);
    uint64_t v20 = swift_allocObject();
    *(void *)(v20 + 16) = v78;
    uint64_t v21 = closure #1 in categoriesScalarPredicate(_:)partial apply;
    goto LABEL_82;
  }
  if (v11 == *MEMORY[0x263F8FFA8])
  {
    (*(void (**)(char *, void, uint64_t))(v4 + 104))(v8, *MEMORY[0x263F8EAA0], v3);
    uint64_t v81 = *(void (**)(char *, char *, uint64_t))(v4 + 32);
    unint64_t v82 = v150;
    v81(v150, v8, v3);
    unint64_t v83 = (*(unsigned __int8 *)(v4 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80);
    uint64_t v20 = swift_allocObject();
    v81((char *)(v20 + v83), v82, v3);
    uint64_t v21 = (uint64_t (*)())partial apply for closure #1 in categoryScalarPredicate(_:);
    goto LABEL_82;
  }
  if (v11 == *MEMORY[0x263F8FFA0])
  {
    (*(void (**)(char *, void, uint64_t))(v4 + 104))(v8, *MEMORY[0x263F8EA98], v3);
    uint64_t v84 = *(void (**)(char *, char *, uint64_t))(v4 + 32);
    uint64_t v85 = v150;
    v84(v150, v8, v3);
    unint64_t v86 = (*(unsigned __int8 *)(v4 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80);
    uint64_t v20 = swift_allocObject();
    v84((char *)(v20 + v86), v85, v3);
    uint64_t v21 = (uint64_t (*)())partial apply for closure #1 in categoryScalarPredicate(_:);
    goto LABEL_82;
  }
  if (v11 == *MEMORY[0x263F8FF80])
  {
    (*(void (**)(char *, void, uint64_t))(v4 + 104))(v8, *MEMORY[0x263F8EA80], v3);
    uint64_t v87 = *(void (**)(char *, char *, uint64_t))(v4 + 32);
    uint64_t v88 = v150;
    v87(v150, v8, v3);
    unint64_t v89 = (*(unsigned __int8 *)(v4 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80);
    uint64_t v20 = swift_allocObject();
    v87((char *)(v20 + v89), v88, v3);
    uint64_t v21 = (uint64_t (*)())partial apply for closure #1 in categoryScalarPredicate(_:);
    goto LABEL_82;
  }
  if (v11 == *MEMORY[0x263F8FF90])
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Unicode.GeneralCategory>);
    uint64_t v90 = *(void *)(v4 + 72);
    unint64_t v91 = (*(unsigned __int8 *)(v4 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80);
    uint64_t v92 = swift_allocObject();
    *(_OWORD *)(v92 + 16) = xmmword_209FAFDB0;
    unint64_t v93 = v92 + v91;
    unsigned int v94 = *(void (**)(unint64_t, void, uint64_t))(v4 + 104);
    v94(v93, *MEMORY[0x263F8EB30], v3);
    v94(v93 + v90, *MEMORY[0x263F8EAE0], v3);
    v94(v93 + 2 * v90, *MEMORY[0x263F8EAF0], v3);
    v94(v93 + 3 * v90, *MEMORY[0x263F8EB08], v3);
    v94(v93 + 4 * v90, *MEMORY[0x263F8EB20], v3);
    v94(v93 + 5 * v90, *MEMORY[0x263F8EB10], v3);
    v94(v93 + 6 * v90, *MEMORY[0x263F8EB18], v3);
    uint64_t v20 = swift_allocObject();
    *(void *)(v20 + 16) = v92;
    uint64_t v21 = closure #1 in categoriesScalarPredicate(_:)partial apply;
    goto LABEL_82;
  }
  if (v11 == *MEMORY[0x263F90038])
  {
    (*(void (**)(char *, void, uint64_t))(v4 + 104))(v8, *MEMORY[0x263F8EB30], v3);
    uint64_t v95 = *(void (**)(char *, char *, uint64_t))(v4 + 32);
    unint64_t v96 = v150;
    v95(v150, v8, v3);
    unint64_t v97 = (*(unsigned __int8 *)(v4 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80);
    uint64_t v20 = swift_allocObject();
    v95((char *)(v20 + v97), v96, v3);
    uint64_t v21 = (uint64_t (*)())partial apply for closure #1 in categoryScalarPredicate(_:);
    goto LABEL_82;
  }
  if (v11 == *MEMORY[0x263F8FFE8])
  {
    (*(void (**)(char *, void, uint64_t))(v4 + 104))(v8, *MEMORY[0x263F8EAE0], v3);
    uint64_t v98 = *(void (**)(char *, char *, uint64_t))(v4 + 32);
    unint64_t v99 = v150;
    v98(v150, v8, v3);
    unint64_t v100 = (*(unsigned __int8 *)(v4 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80);
    uint64_t v20 = swift_allocObject();
    v98((char *)(v20 + v100), v99, v3);
    uint64_t v21 = (uint64_t (*)())partial apply for closure #1 in categoryScalarPredicate(_:);
    goto LABEL_82;
  }
  if (v11 == *MEMORY[0x263F90010])
  {
    (*(void (**)(char *, void, uint64_t))(v4 + 104))(v8, *MEMORY[0x263F8EB08], v3);
    uint64_t v101 = *(void (**)(char *, char *, uint64_t))(v4 + 32);
    unint64_t v102 = v150;
    v101(v150, v8, v3);
    unint64_t v103 = (*(unsigned __int8 *)(v4 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80);
    uint64_t v20 = swift_allocObject();
    v101((char *)(v20 + v103), v102, v3);
    uint64_t v21 = (uint64_t (*)())partial apply for closure #1 in categoryScalarPredicate(_:);
    goto LABEL_82;
  }
  if (v11 == *MEMORY[0x263F90018])
  {
    (*(void (**)(char *, void, uint64_t))(v4 + 104))(v8, *MEMORY[0x263F8EB10], v3);
    unint64_t v104 = *(void (**)(char *, char *, uint64_t))(v4 + 32);
    uint64_t v105 = v150;
    v104(v150, v8, v3);
    unint64_t v106 = (*(unsigned __int8 *)(v4 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80);
    uint64_t v20 = swift_allocObject();
    v104((char *)(v20 + v106), v105, v3);
    uint64_t v21 = (uint64_t (*)())partial apply for closure #1 in categoryScalarPredicate(_:);
    goto LABEL_82;
  }
  if (v11 == *MEMORY[0x263F90028])
  {
    (*(void (**)(char *, void, uint64_t))(v4 + 104))(v8, *MEMORY[0x263F8EB20], v3);
    Swift::String v107 = *(void (**)(char *, char *, uint64_t))(v4 + 32);
    uint64_t v108 = v150;
    v107(v150, v8, v3);
    unint64_t v109 = (*(unsigned __int8 *)(v4 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80);
    uint64_t v20 = swift_allocObject();
    v107((char *)(v20 + v109), v108, v3);
    uint64_t v21 = (uint64_t (*)())partial apply for closure #1 in categoryScalarPredicate(_:);
    goto LABEL_82;
  }
  if (v11 == *MEMORY[0x263F90020])
  {
    (*(void (**)(char *, void, uint64_t))(v4 + 104))(v8, *MEMORY[0x263F8EB18], v3);
    unint64_t v110 = *(void (**)(char *, char *, uint64_t))(v4 + 32);
    uint64_t v111 = v150;
    v110(v150, v8, v3);
    unint64_t v112 = (*(unsigned __int8 *)(v4 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80);
    uint64_t v20 = swift_allocObject();
    v110((char *)(v20 + v112), v111, v3);
    uint64_t v21 = (uint64_t (*)())partial apply for closure #1 in categoryScalarPredicate(_:);
    goto LABEL_82;
  }
  if (v11 == *MEMORY[0x263F8FFF8])
  {
    (*(void (**)(char *, void, uint64_t))(v4 + 104))(v8, *MEMORY[0x263F8EAF0], v3);
    unint64_t v113 = *(void (**)(char *, char *, uint64_t))(v4 + 32);
    uint64_t v114 = v150;
    v113(v150, v8, v3);
    unint64_t v115 = (*(unsigned __int8 *)(v4 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80);
    uint64_t v20 = swift_allocObject();
    v113((char *)(v20 + v115), v114, v3);
    uint64_t v21 = (uint64_t (*)())partial apply for closure #1 in categoryScalarPredicate(_:);
    goto LABEL_82;
  }
  if (v11 == *MEMORY[0x263F90068])
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Unicode.GeneralCategory>);
    uint64_t v116 = *(void *)(v4 + 72);
    unint64_t v117 = (*(unsigned __int8 *)(v4 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80);
    uint64_t v118 = swift_allocObject();
    *(_OWORD *)(v118 + 16) = xmmword_209FAFDA0;
    unint64_t v119 = v118 + v117;
    uint64_t v120 = *(void (**)(unint64_t, void, uint64_t))(v4 + 104);
    v120(v119, *MEMORY[0x263F8EA60], v3);
    v120(v119 + v116, *MEMORY[0x263F8EAB8], v3);
    v120(v119 + 2 * v116, *MEMORY[0x263F8EAC8], v3);
    v120(v119 + 3 * v116, *MEMORY[0x263F8EA88], v3);
    uint64_t v20 = swift_allocObject();
    *(void *)(v20 + 16) = v118;
    uint64_t v21 = closure #1 in categoriesScalarPredicate(_:)partial apply;
    goto LABEL_82;
  }
  if (v11 == *MEMORY[0x263F8FFC0])
  {
    (*(void (**)(char *, void, uint64_t))(v4 + 104))(v8, *MEMORY[0x263F8EAB8], v3);
    uint64_t v121 = *(void (**)(char *, char *, uint64_t))(v4 + 32);
    uint64_t v122 = v150;
    v121(v150, v8, v3);
    unint64_t v123 = (*(unsigned __int8 *)(v4 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80);
    uint64_t v20 = swift_allocObject();
    v121((char *)(v20 + v123), v122, v3);
    uint64_t v21 = (uint64_t (*)())partial apply for closure #1 in categoryScalarPredicate(_:);
    goto LABEL_82;
  }
  if (v11 == *MEMORY[0x263F8FFD0])
  {
    (*(void (**)(char *, void, uint64_t))(v4 + 104))(v8, *MEMORY[0x263F8EAC8], v3);
    uint64_t v124 = *(void (**)(char *, char *, uint64_t))(v4 + 32);
    Swift::String v125 = v150;
    v124(v150, v8, v3);
    unint64_t v126 = (*(unsigned __int8 *)(v4 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80);
    uint64_t v20 = swift_allocObject();
    v124((char *)(v20 + v126), v125, v3);
    uint64_t v21 = (uint64_t (*)())partial apply for closure #1 in categoryScalarPredicate(_:);
    goto LABEL_82;
  }
  if (v11 == *MEMORY[0x263F8FF58])
  {
    (*(void (**)(char *, void, uint64_t))(v4 + 104))(v8, *MEMORY[0x263F8EA60], v3);
    uint64_t v127 = *(void (**)(char *, char *, uint64_t))(v4 + 32);
    uint64_t v128 = v150;
    v127(v150, v8, v3);
    unint64_t v129 = (*(unsigned __int8 *)(v4 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80);
    uint64_t v20 = swift_allocObject();
    v127((char *)(v20 + v129), v128, v3);
    uint64_t v21 = (uint64_t (*)())partial apply for closure #1 in categoryScalarPredicate(_:);
    goto LABEL_82;
  }
  if (v11 == *MEMORY[0x263F8FF88])
  {
    (*(void (**)(char *, void, uint64_t))(v4 + 104))(v8, *MEMORY[0x263F8EA88], v3);
    uint64_t v130 = *(void (**)(char *, char *, uint64_t))(v4 + 32);
    uint64_t v131 = v150;
    v130(v150, v8, v3);
    unint64_t v132 = (*(unsigned __int8 *)(v4 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80);
    uint64_t v20 = swift_allocObject();
    v130((char *)(v20 + v132), v131, v3);
    uint64_t v21 = (uint64_t (*)())partial apply for closure #1 in categoryScalarPredicate(_:);
    goto LABEL_82;
  }
  if (v11 == *MEMORY[0x263F90078])
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Unicode.GeneralCategory>);
    uint64_t v133 = *(void *)(v4 + 72);
    unint64_t v134 = (*(unsigned __int8 *)(v4 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80);
    uint64_t v135 = swift_allocObject();
    *(_OWORD *)(v135 + 16) = xmmword_209FAFD90;
    unint64_t v136 = v135 + v134;
    uint64_t v137 = *(void (**)(unint64_t, void, uint64_t))(v4 + 104);
    v137(v136, *MEMORY[0x263F8EAD8], v3);
    v137(v136 + v133, *MEMORY[0x263F8EAB0], v3);
    v137(v136 + 2 * v133, *MEMORY[0x263F8EB28], v3);
    uint64_t v20 = swift_allocObject();
    *(void *)(v20 + 16) = v135;
    uint64_t v21 = closure #1 in categoriesScalarPredicate(_:)partial apply;
    goto LABEL_82;
  }
  if (v11 == *MEMORY[0x263F8FFB8])
  {
    (*(void (**)(char *, void, uint64_t))(v4 + 104))(v8, *MEMORY[0x263F8EAB0], v3);
    uint64_t v138 = *(void (**)(char *, char *, uint64_t))(v4 + 32);
    uint64_t v139 = v150;
    v138(v150, v8, v3);
    unint64_t v140 = (*(unsigned __int8 *)(v4 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80);
    uint64_t v20 = swift_allocObject();
    v138((char *)(v20 + v140), v139, v3);
    uint64_t v21 = (uint64_t (*)())partial apply for closure #1 in categoryScalarPredicate(_:);
    goto LABEL_82;
  }
  if (v11 == *MEMORY[0x263F90030])
  {
    (*(void (**)(char *, void, uint64_t))(v4 + 104))(v8, *MEMORY[0x263F8EB28], v3);
    uint64_t v141 = *(void (**)(char *, char *, uint64_t))(v4 + 32);
    uint64_t v142 = v150;
    v141(v150, v8, v3);
    unint64_t v143 = (*(unsigned __int8 *)(v4 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80);
    uint64_t v20 = swift_allocObject();
    v141((char *)(v20 + v143), v142, v3);
    uint64_t v21 = (uint64_t (*)())partial apply for closure #1 in categoryScalarPredicate(_:);
    goto LABEL_82;
  }
  if (v11 == *MEMORY[0x263F8FFE0])
  {
    (*(void (**)(char *, void, uint64_t))(v4 + 104))(v8, *MEMORY[0x263F8EAD8], v3);
    uint64_t v144 = *(void (**)(char *, char *, uint64_t))(v4 + 32);
    uint64_t v145 = v150;
    v144(v150, v8, v3);
    unint64_t v146 = (*(unsigned __int8 *)(v4 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80);
    uint64_t v20 = swift_allocObject();
    v144((char *)(v20 + v146), v145, v3);
    uint64_t v21 = (uint64_t (*)())partial apply for closure #1 in categoryScalarPredicate(_:);
    goto LABEL_82;
  }
  uint64_t result = _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t Unicode.BinaryProperty.generateConsumer(_:)(uint64_t a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = type metadata accessor for Unicode.BinaryProperty();
  uint64_t v5 = *(void *)(v4 - 8);
  MEMORY[0x270FA5388](v4);
  uint64_t v7 = (char *)&v22 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = *(void *)(a1 + 16);
  if (!v8)
  {
    __break(1u);
    goto LABEL_77;
  }
  if ((*(_DWORD *)(a1 + 4 * v8 + 28) & 0x10000) != 0) {
    uint64_t v9 = (uint64_t (*)(void *, void))consumeCharacterWithLeadingScalar(_:);
  }
  else {
    uint64_t v9 = (uint64_t (*)(void *, void))consumeScalar(_:);
  }
  (*(void (**)(char *, uint64_t, uint64_t))(v5 + 16))(v7, v2, v4);
  int v10 = (*(uint64_t (**)(char *, uint64_t))(v5 + 88))(v7, v4);
  int v11 = specialized closure #1 in propertyScalarPredicate(_:);
  if (v10 == *MEMORY[0x263F8FDC0]) {
    return v9(v11, 0);
  }
  int v11 = specialized closure #1 in propertyScalarPredicate(_:);
  if (v10 == *MEMORY[0x263F8FD48]) {
    return v9(v11, 0);
  }
  int v11 = specialized closure #1 in propertyScalarPredicate(_:);
  if (v10 == *MEMORY[0x263F8FD70]) {
    return v9(v11, 0);
  }
  int v11 = specialized closure #1 in propertyScalarPredicate(_:);
  if (v10 == *MEMORY[0x263F8FD90]) {
    return v9(v11, 0);
  }
  int v11 = specialized closure #1 in propertyScalarPredicate(_:);
  if (v10 == *MEMORY[0x263F8FEF8]) {
    return v9(v11, 0);
  }
  if (v10 == *MEMORY[0x263F8FE70]) {
    goto LABEL_12;
  }
  int v11 = specialized closure #1 in propertyScalarPredicate(_:);
  if (v10 == *MEMORY[0x263F8FDC8]) {
    return v9(v11, 0);
  }
  int v11 = specialized closure #1 in propertyScalarPredicate(_:);
  if (v10 == *MEMORY[0x263F8FE80]) {
    return v9(v11, 0);
  }
  int v11 = specialized closure #1 in propertyScalarPredicate(_:);
  if (v10 == *MEMORY[0x263F8FE88]) {
    return v9(v11, 0);
  }
  int v11 = specialized closure #1 in propertyScalarPredicate(_:);
  if (v10 == *MEMORY[0x263F8FEC8]) {
    return v9(v11, 0);
  }
  int v11 = specialized closure #1 in propertyScalarPredicate(_:);
  if (v10 == *MEMORY[0x263F8FE90]) {
    return v9(v11, 0);
  }
  int v11 = specialized closure #1 in propertyScalarPredicate(_:);
  if (v10 == *MEMORY[0x263F8FE98]) {
    return v9(v11, 0);
  }
  int v11 = specialized closure #1 in propertyScalarPredicate(_:);
  if (v10 == *MEMORY[0x263F8FEA0]) {
    return v9(v11, 0);
  }
  int v11 = specialized closure #1 in propertyScalarPredicate(_:);
  if (v10 == *MEMORY[0x263F8FEE8]) {
    return v9(v11, 0);
  }
  int v11 = specialized closure #1 in propertyScalarPredicate(_:);
  if (v10 == *MEMORY[0x263F8FD50]) {
    return v9(v11, 0);
  }
  int v11 = specialized closure #1 in propertyScalarPredicate(_:);
  if (v10 == *MEMORY[0x263F8FED0]) {
    return v9(v11, 0);
  }
  int v11 = specialized closure #1 in propertyScalarPredicate(_:);
  if (v10 == *MEMORY[0x263F8FF38]) {
    return v9(v11, 0);
  }
  int v11 = specialized closure #1 in propertyScalarPredicate(_:);
  if (v10 == *MEMORY[0x263F8FE38]) {
    return v9(v11, 0);
  }
  if (v10 != *MEMORY[0x263F8FDF8])
  {
    int v11 = specialized closure #1 in propertyScalarPredicate(_:);
    if (v10 == *MEMORY[0x263F8FDD0]) {
      return v9(v11, 0);
    }
    int v11 = specialized closure #1 in propertyScalarPredicate(_:);
    if (v10 == *MEMORY[0x263F8FF00]) {
      return v9(v11, 0);
    }
    int v11 = specialized closure #1 in propertyScalarPredicate(_:);
    if (v10 == *MEMORY[0x263F8FE40]) {
      return v9(v11, 0);
    }
    int v11 = specialized closure #1 in propertyScalarPredicate(_:);
    if (v10 == *MEMORY[0x263F8FF20]) {
      return v9(v11, 0);
    }
    if (v10 != *MEMORY[0x263F8FE78])
    {
      int v11 = specialized closure #1 in propertyScalarPredicate(_:);
      if (v10 == *MEMORY[0x263F8FEC0]) {
        return v9(v11, 0);
      }
      int v11 = specialized closure #1 in propertyScalarPredicate(_:);
      if (v10 == *MEMORY[0x263F8FDA8]) {
        return v9(v11, 0);
      }
      int v11 = specialized closure #1 in propertyScalarPredicate(_:);
      if (v10 == *MEMORY[0x263F8FE20]) {
        return v9(v11, 0);
      }
      if (v10 != *MEMORY[0x263F8FDB0])
      {
        int v11 = specialized closure #1 in propertyScalarPredicate(_:);
        if (v10 == *MEMORY[0x263F8FF28]) {
          return v9(v11, 0);
        }
        if (v10 != *MEMORY[0x263F8FF08])
        {
          int v11 = specialized closure #1 in propertyScalarPredicate(_:);
          if (v10 == *MEMORY[0x263F8FD58]) {
            return v9(v11, 0);
          }
          int v11 = specialized closure #1 in propertyScalarPredicate(_:);
          if (v10 == *MEMORY[0x263F8FD78]) {
            return v9(v11, 0);
          }
          int v11 = specialized closure #1 in propertyScalarPredicate(_:);
          if (v10 == *MEMORY[0x263F8FF10]) {
            return v9(v11, 0);
          }
          int v11 = specialized closure #1 in propertyScalarPredicate(_:);
          if (v10 == *MEMORY[0x263F8FD40]) {
            return v9(v11, 0);
          }
          int v11 = specialized closure #1 in propertyScalarPredicate(_:);
          if (v10 == *MEMORY[0x263F8FE60]) {
            return v9(v11, 0);
          }
          int v11 = specialized closure #1 in propertyScalarPredicate(_:);
          if (v10 == *MEMORY[0x263F8FD80]) {
            return v9(v11, 0);
          }
          int v11 = specialized closure #1 in propertyScalarPredicate(_:);
          if (v10 == *MEMORY[0x263F8FEA8]) {
            return v9(v11, 0);
          }
          int v11 = specialized closure #1 in propertyScalarPredicate(_:);
          if (v10 == *MEMORY[0x263F8FF40]) {
            return v9(v11, 0);
          }
          int v11 = specialized closure #1 in propertyScalarPredicate(_:);
          if (v10 == *MEMORY[0x263F8FEF0]) {
            return v9(v11, 0);
          }
          int v11 = specialized closure #1 in propertyScalarPredicate(_:);
          if (v10 == *MEMORY[0x263F8FEB0]) {
            return v9(v11, 0);
          }
          if (v10 == *MEMORY[0x263F8FE10]
            || v10 == *MEMORY[0x263F8FEE0]
            || v10 == *MEMORY[0x263F8FEB8]
            || v10 == *MEMORY[0x263F8FE18]
            || v10 == *MEMORY[0x263F8FDB8]
            || v10 == *MEMORY[0x263F8FE00]
            || v10 == *MEMORY[0x263F8FF48]
            || v10 == *MEMORY[0x263F8FE08])
          {
            goto LABEL_12;
          }
          int v11 = specialized closure #1 in propertyScalarPredicate(_:);
          if (v10 == *MEMORY[0x263F8FDE8]) {
            return v9(v11, 0);
          }
          int v11 = specialized closure #1 in propertyScalarPredicate(_:);
          if (v10 == *MEMORY[0x263F8FE48]) {
            return v9(v11, 0);
          }
          if (v10 != *MEMORY[0x263F8FED8])
          {
            int v11 = specialized closure #1 in propertyScalarPredicate(_:);
            if (v10 != *MEMORY[0x263F8FDF0])
            {
              int v11 = specialized closure #1 in propertyScalarPredicate(_:);
              if (v10 != *MEMORY[0x263F8FF18])
              {
                int v11 = closure #2 in Unicode.BinaryProperty.generateConsumer(_:);
                if (v10 != *MEMORY[0x263F8FE50])
                {
                  int v11 = specialized closure #1 in propertyScalarPredicate(_:);
                  if (v10 != *MEMORY[0x263F8FD60])
                  {
                    int v11 = specialized closure #1 in propertyScalarPredicate(_:);
                    if (v10 != *MEMORY[0x263F8FE28])
                    {
                      int v11 = specialized closure #1 in propertyScalarPredicate(_:);
                      if (v10 != *MEMORY[0x263F8FE68])
                      {
                        int v11 = specialized closure #1 in propertyScalarPredicate(_:);
                        if (v10 != *MEMORY[0x263F8FE30])
                        {
                          int v11 = specialized closure #1 in propertyScalarPredicate(_:);
                          if (v10 != *MEMORY[0x263F8FF50])
                          {
                            int v11 = specialized closure #1 in propertyScalarPredicate(_:);
                            if (v10 != *MEMORY[0x263F8FE58])
                            {
                              int v11 = specialized closure #1 in propertyScalarPredicate(_:);
                              if (v10 != *MEMORY[0x263F8FD68])
                              {
                                int v11 = specialized closure #1 in propertyScalarPredicate(_:);
                                if (v10 != *MEMORY[0x263F8FD88])
                                {
                                  int v11 = specialized closure #1 in propertyScalarPredicate(_:);
                                  if (v10 != *MEMORY[0x263F8FF30])
                                  {
                                    if (v10 != *MEMORY[0x263F8FD98]
                                      && v10 != *MEMORY[0x263F8FDA0]
                                      && v10 != *MEMORY[0x263F8FDD8]
                                      && v10 != *MEMORY[0x263F8FDE0])
                                    {
                                      (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
                                      goto LABEL_12;
                                    }
LABEL_77:
                                    uint64_t v22 = 0;
                                    unint64_t v23 = 0xE000000000000000;
                                    _StringGuts.grow(_:)(22);
                                    v19._object = (void *)0x8000000209FB6AA0;
                                    v19._uint64_t countAndFlagsBits = 0xD000000000000014;
                                    String.append(_:)(v19);
                                    _print_unlocked<A, B>(_:_:)();
                                    uint64_t v20 = v22;
                                    unint64_t v21 = v23;
                                    type metadata accessor for Unsupported();
                                    lazy protocol witness table accessor for type AST.Quantification.Kind and conformance AST.Quantification.Kind(&lazy protocol witness table cache variable for type Unsupported and conformance Unsupported, MEMORY[0x263F8F860]);
                                    swift_allocError();
                                    uint64_t v16 = v20;
                                    unint64_t v17 = v21;
                                    uint64_t v18 = 612;
                                    goto LABEL_13;
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
            return v9(v11, 0);
          }
        }
      }
    }
  }
LABEL_12:
  uint64_t v22 = 0;
  unint64_t v23 = 0xE000000000000000;
  _StringGuts.grow(_:)(17);
  v13._uint64_t countAndFlagsBits = 0x616D203A4F444F54;
  v13._object = (void *)0xEF20706F72702070;
  String.append(_:)(v13);
  _print_unlocked<A, B>(_:_:)();
  uint64_t v14 = v22;
  unint64_t v15 = v23;
  type metadata accessor for Unsupported();
  lazy protocol witness table accessor for type AST.Quantification.Kind and conformance AST.Quantification.Kind(&lazy protocol witness table cache variable for type Unsupported and conformance Unsupported, MEMORY[0x263F8F860]);
  swift_allocError();
  uint64_t v16 = v14;
  unint64_t v17 = v15;
  uint64_t v18 = 619;
LABEL_13:
  MEMORY[0x21050E6B0](v16, v17, "/Library/Caches/com.apple.xbs/Sources/swiftlang_overlay_Platform_Device/swift-experimental-string-processing/Sources/_StringProcessing/ConsumerInterface.swift", 158, 2, v18);
  return swift_willThrow();
}

BOOL closure #3 in closure #1 in AST.Atom.CharacterProperty.generateConsumer(_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = type metadata accessor for Unicode.Scalar.Properties();
  uint64_t v6 = *(void *)(v5 - 8);
  MEMORY[0x270FA5388](v5);
  uint64_t v8 = (char *)&v16 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  Unicode.Scalar.properties.getter();
  uint64_t v9 = Unicode.Scalar.Properties.age.getter();
  uint64_t v11 = v10;
  char v13 = v12;
  (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
  if (v13) {
    return 0;
  }
  BOOL v14 = v9 <= a2;
  if (v9 == a2) {
    return v11 <= a3;
  }
  return v14;
}

BOOL closure #4 in closure #1 in AST.Atom.CharacterProperty.generateConsumer(_:)(double a1)
{
  uint64_t v2 = type metadata accessor for Unicode.Scalar.Properties();
  uint64_t v3 = *(void *)(v2 - 8);
  MEMORY[0x270FA5388](v2);
  uint64_t v5 = (char *)&v10 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  Unicode.Scalar.properties.getter();
  double v6 = COERCE_DOUBLE(Unicode.Scalar.Properties.numericValue.getter());
  BOOL v8 = (v7 & 1) == 0;
  (*(void (**)(char *, uint64_t))(v3 + 8))(v5, v2);
  return v6 == a1 && v8;
}

uint64_t closure #5 in closure #1 in AST.Atom.CharacterProperty.generateConsumer(_:)(int a1, uint64_t a2)
{
  uint64_t v33 = a2;
  int v32 = a1;
  uint64_t v2 = type metadata accessor for Unicode.NumericType();
  uint64_t v3 = *(void *)(v2 - 8);
  MEMORY[0x270FA5388](v2);
  unint64_t v31 = (char *)&v30 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Unicode.NumericType?, Unicode.NumericType?));
  uint64_t v6 = v5 - 8;
  MEMORY[0x270FA5388](v5);
  BOOL v8 = (char *)&v30 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Unicode.NumericType?);
  uint64_t v10 = MEMORY[0x270FA5388](v9 - 8);
  char v12 = (char *)&v30 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = MEMORY[0x270FA5388](v10);
  unint64_t v15 = (char *)&v30 - v14;
  MEMORY[0x270FA5388](v13);
  unint64_t v17 = (char *)&v30 - v16;
  uint64_t v18 = type metadata accessor for Unicode.Scalar.Properties();
  uint64_t v19 = *(void *)(v18 - 8);
  MEMORY[0x270FA5388](v18);
  unint64_t v21 = (char *)&v30 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  Unicode.Scalar.properties.getter();
  Unicode.Scalar.Properties.numericType.getter();
  (*(void (**)(char *, uint64_t))(v19 + 8))(v21, v18);
  (*(void (**)(char *, uint64_t, uint64_t))(v3 + 16))(v15, v33, v2);
  (*(void (**)(char *, void, uint64_t, uint64_t))(v3 + 56))(v15, 0, 1, v2);
  uint64_t v22 = (uint64_t)&v8[*(int *)(v6 + 56)];
  outlined init with take of (offset: Int, element: (CaptureList.Capture, Processor._StoredCapture))?((uint64_t)v17, (uint64_t)v8, &demangling cache variable for type metadata for Unicode.NumericType?);
  outlined init with take of (offset: Int, element: (CaptureList.Capture, Processor._StoredCapture))?((uint64_t)v15, v22, &demangling cache variable for type metadata for Unicode.NumericType?);
  unint64_t v23 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v3 + 48);
  if (v23((uint64_t)v8, 1, v2) == 1)
  {
    int v24 = v23(v22, 1, v2);
    if (v24 == 1) {
      uint64_t v25 = &demangling cache variable for type metadata for Unicode.NumericType?;
    }
    else {
      uint64_t v25 = &demangling cache variable for type metadata for (Unicode.NumericType?, Unicode.NumericType?);
    }
    if (v24 == 1) {
      char v26 = -1;
    }
    else {
      char v26 = 0;
    }
  }
  else
  {
    outlined init with copy of (range: Range<String.Index>, value: Any?)?((uint64_t)v8, (uint64_t)v12, &demangling cache variable for type metadata for Unicode.NumericType?);
    if (v23(v22, 1, v2) == 1)
    {
      (*(void (**)(char *, uint64_t))(v3 + 8))(v12, v2);
      char v26 = 0;
      uint64_t v25 = &demangling cache variable for type metadata for (Unicode.NumericType?, Unicode.NumericType?);
    }
    else
    {
      unint64_t v27 = v31;
      (*(void (**)(char *, uint64_t, uint64_t))(v3 + 32))(v31, v22, v2);
      char v26 = dispatch thunk of static Equatable.== infix(_:_:)();
      Swift::String_optional v28 = *(void (**)(char *, uint64_t))(v3 + 8);
      v28(v27, v2);
      v28(v12, v2);
      uint64_t v25 = &demangling cache variable for type metadata for Unicode.NumericType?;
    }
  }
  outlined destroy of (range: Range<String.Index>, value: Any?)?((uint64_t)v8, v25);
  return v26 & 1;
}

uint64_t closure #6 in closure #1 in AST.Atom.CharacterProperty.generateConsumer(_:)()
{
  uint64_t v0 = type metadata accessor for Unicode.CanonicalCombiningClass();
  uint64_t v1 = *(void *)(v0 - 8);
  MEMORY[0x270FA5388](v0);
  uint64_t v3 = (char *)&v10 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v4 = type metadata accessor for Unicode.Scalar.Properties();
  uint64_t v5 = *(void *)(v4 - 8);
  MEMORY[0x270FA5388](v4);
  uint64_t v7 = (char *)&v10 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  Unicode.Scalar.properties.getter();
  Unicode.Scalar.Properties.canonicalCombiningClass.getter();
  (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
  char v8 = static Unicode.CanonicalCombiningClass.== infix(_:_:)();
  (*(void (**)(char *, uint64_t))(v1 + 8))(v3, v0);
  return v8 & 1;
}

uint64_t closure #7 in closure #1 in AST.Atom.CharacterProperty.generateConsumer(_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(uint64_t))
{
  uint64_t v7 = type metadata accessor for Unicode.Scalar.Properties();
  uint64_t v8 = *(void *)(v7 - 8);
  MEMORY[0x270FA5388](v7);
  uint64_t v10 = (char *)&v18 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = Unicode.Scalar.properties.getter();
  uint64_t v12 = a4(v11);
  uint64_t v14 = v13;
  (*(void (**)(char *, uint64_t))(v8 + 8))(v10, v7);
  if (v12 == a2 && v14 == a3) {
    char v16 = 1;
  }
  else {
    char v16 = _stringCompareWithSmolCheck(_:_:expecting:)();
  }
  swift_bridgeObjectRelease();
  return v16 & 1;
}

uint64_t Unicode.POSIXProperty.generateConsumer(_:)(uint64_t a1)
{
  uint64_t v3 = type metadata accessor for Unicode.POSIXProperty();
  uint64_t v4 = *(void *)(v3 - 8);
  MEMORY[0x270FA5388](v3);
  uint64_t v6 = (char *)&v13 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = *(void *)(a1 + 16);
  if (!v7)
  {
    __break(1u);
LABEL_12:
    uint64_t result = _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
    return result;
  }
  int v8 = *(_DWORD *)(a1 + 4 * v7 + 28);
  (*(void (**)(char *, uint64_t, uint64_t))(v4 + 16))(v6, v1, v3);
  int v9 = (*(uint64_t (**)(char *, uint64_t))(v4 + 88))(v6, v3);
  uint64_t v10 = specialized closure #1 in propertyScalarPredicate(_:);
  if (v9 != *MEMORY[0x263F8FD18])
  {
    uint64_t v10 = closure #2 in Unicode.POSIXProperty.generateConsumer(_:);
    if (v9 != *MEMORY[0x263F8FD20])
    {
      uint64_t v10 = specialized closure #1 in propertyScalarPredicate(_:);
      if (v9 != *MEMORY[0x263F8FD28])
      {
        uint64_t v10 = specialized closure #1 in propertyScalarPredicate(_:);
        if (v9 != *MEMORY[0x263F8FD30])
        {
          uint64_t v10 = specialized closure #1 in propertyScalarPredicate(_:);
          if (v9 != *MEMORY[0x263F8FD10])
          {
            uint64_t v10 = specialized closure #1 in propertyScalarPredicate(_:);
            if (v9 != *MEMORY[0x263F8FD38]) {
              goto LABEL_12;
            }
          }
        }
      }
    }
  }
  uint64_t v11 = (uint64_t (*)(void *, void))consumeCharacterWithLeadingScalar(_:);
  if ((v8 & 0x10000) == 0) {
    uint64_t v11 = (uint64_t (*)(void *, void))consumeScalar(_:);
  }
  return v11(v10, 0);
}

BOOL closure #2 in Unicode.BinaryProperty.generateConsumer(_:)(int a1)
{
  return (a1 - 127462) < 0x1A;
}

uint64_t closure #2 in Unicode.POSIXProperty.generateConsumer(_:)(int a1)
{
  uint64_t v2 = type metadata accessor for Unicode.GeneralCategory();
  uint64_t v3 = *(void *)(v2 - 8);
  uint64_t v4 = MEMORY[0x270FA5388](v2);
  uint64_t v6 = (char *)&v15 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v4);
  int v8 = (char *)&v15 - v7;
  uint64_t v9 = type metadata accessor for Unicode.Scalar.Properties();
  uint64_t v10 = *(void *)(v9 - 8);
  MEMORY[0x270FA5388](v9);
  uint64_t v12 = (char *)&v15 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  Unicode.Scalar.properties.getter();
  Unicode.Scalar.Properties.generalCategory.getter();
  (*(void (**)(char *, uint64_t))(v10 + 8))(v12, v9);
  (*(void (**)(char *, void, uint64_t))(v3 + 104))(v6, *MEMORY[0x263F8EAD8], v2);
  LOBYTE(v12) = MEMORY[0x21050F860](v8, v6);
  uint64_t v13 = *(void (**)(char *, uint64_t))(v3 + 8);
  v13(v6, v2);
  v13(v8, v2);
  return v12 & 1 | (a1 == 9);
}

uint64_t closure #3 in Unicode.POSIXProperty.generateConsumer(_:)(uint64_t a1)
{
  uint64_t v49 = type metadata accessor for Unicode.GeneralCategory();
  uint64_t v47 = *(char **)(v49 - 8);
  uint64_t v2 = MEMORY[0x270FA5388](v49);
  uint64_t v48 = (char *)&v39 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v2);
  uint64_t v5 = (char *)&v39 - v4;
  uint64_t v6 = type metadata accessor for Unicode.Scalar.Properties();
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = MEMORY[0x270FA5388](v6);
  uint64_t v50 = (char *)&v39 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = MEMORY[0x270FA5388](v8);
  uint64_t v12 = (char *)&v39 - v11;
  MEMORY[0x270FA5388](v10);
  uint64_t v14 = (char *)&v39 - v13;
  char v15 = Unicode.Scalar.Properties.isWhitespace.getter();
  char v16 = *(void (**)(char *, uint64_t, uint64_t))(v7 + 16);
  v16(v14, a1, v6);
  if (v15)
  {
    unint64_t v17 = *(void (**)(char *, uint64_t))(v7 + 8);
    v17(v14, v6);
    v16(v12, a1, v6);
LABEL_5:
    v17(v12, v6);
    uint64_t v25 = v50;
    v16(v50, a1, v6);
    v17(v25, v6);
    goto LABEL_6;
  }
  Unicode.Scalar.Properties.generalCategory.getter();
  int v46 = *(void (**)(char *, uint64_t))(v7 + 8);
  v46(v14, v6);
  uint64_t v18 = *MEMORY[0x263F8EB40];
  uint64_t v20 = v47;
  uint64_t v19 = v48;
  unint64_t v21 = (void (*)(char *, void, uint64_t))*((void *)v47 + 13);
  uint64_t v44 = a1;
  uint64_t v22 = v49;
  unint64_t v40 = v21;
  uint64_t v41 = v47 + 104;
  v21(v48, v18, v49);
  int v43 = MEMORY[0x21050F860](v5, v19);
  unint64_t v45 = v16;
  unint64_t v23 = (void (*)(char *, uint64_t))*((void *)v20 + 1);
  v23(v19, v22);
  uint64_t v47 = v5;
  uint64_t v24 = v22;
  a1 = v44;
  uint64_t v42 = v23;
  v23(v5, v24);
  char v16 = v45;
  v45(v12, a1, v6);
  if (v43)
  {
    unint64_t v17 = v46;
    goto LABEL_5;
  }
  Swift::String_optional v28 = v47;
  Unicode.Scalar.Properties.generalCategory.getter();
  v46(v12, v6);
  uint64_t v29 = v48;
  uint64_t v30 = v49;
  v40(v48, *MEMORY[0x263F8EB48], v49);
  int v43 = MEMORY[0x21050F860](v28, v29);
  unint64_t v31 = v42;
  v42(v29, v30);
  v31(v28, v30);
  int v32 = v50;
  v45(v50, a1, v6);
  if ((v43 & 1) == 0)
  {
    uint64_t v33 = v47;
    Unicode.Scalar.Properties.generalCategory.getter();
    v46(v32, v6);
    uint64_t v35 = v48;
    uint64_t v34 = v49;
    v40(v48, *MEMORY[0x263F8EA70], v49);
    char v36 = MEMORY[0x21050F860](v33, v35);
    uint64_t v37 = v35;
    unint64_t v38 = v42;
    v42(v37, v34);
    v38(v33, v34);
    char v26 = v36 ^ 1;
    return v26 & 1;
  }
  v46(v32, v6);
LABEL_6:
  char v26 = 0;
  return v26 & 1;
}

uint64_t closure #5 in Unicode.POSIXProperty.generateConsumer(_:)(uint64_t a1)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Unicode.NumericType?);
  MEMORY[0x270FA5388](v2 - 8);
  uint64_t v4 = (char *)&v24 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = type metadata accessor for Unicode.Scalar.Properties();
  uint64_t v6 = *(void *)(v5 - 8);
  uint64_t v7 = MEMORY[0x270FA5388](v5);
  uint64_t v25 = (char *)&v24 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = MEMORY[0x270FA5388](v7);
  uint64_t v11 = (char *)&v24 - v10;
  MEMORY[0x270FA5388](v9);
  uint64_t v13 = (char *)&v24 - v12;
  char v14 = Unicode.Scalar.Properties.isAlphabetic.getter();
  char v15 = *(void (**)(char *, uint64_t, uint64_t))(v6 + 16);
  v15(v13, a1, v5);
  if (v14)
  {
    char v16 = *(void (**)(char *, uint64_t))(v6 + 8);
    v16(v13, v5);
    v15(v11, a1, v5);
    char v17 = 1;
  }
  else
  {
    Unicode.Scalar.Properties.numericType.getter();
    char v16 = *(void (**)(char *, uint64_t))(v6 + 8);
    uint64_t v24 = v4;
    v16(v13, v5);
    uint64_t v18 = type metadata accessor for Unicode.NumericType();
    char v17 = 1;
    uint64_t v19 = (uint64_t)v24;
    int v20 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(*(void *)(v18 - 8) + 48))(v24, 1, v18);
    outlined destroy of (range: Range<String.Index>, value: Any?)?(v19, &demangling cache variable for type metadata for Unicode.NumericType?);
    v15(v11, a1, v5);
    if (v20 == 1) {
      char v17 = Unicode.Scalar.Properties.isJoinControl.getter();
    }
  }
  v16(v11, v5);
  unint64_t v21 = v25;
  v15(v25, a1, v5);
  if (v17) {
    char v22 = 1;
  }
  else {
    char v22 = Unicode.Scalar.Properties.isDash.getter();
  }
  v16(v21, v5);
  return v22 & 1;
}

Swift::Void __swiftcall Processor.SavePoint.takePositionFromQuantifiedRange(_:)(Swift::String a1)
{
  if ((*(unsigned char *)(v1 + 40) & 1) == 0)
  {
    unint64_t countAndFlagsBits = a1._countAndFlagsBits;
    unint64_t v3 = *(void *)(v1 + 24);
    a1._unint64_t countAndFlagsBits = *(void *)(v1 + 32);
    *(void *)(v1 + 8) = a1._countAndFlagsBits;
    *(unsigned char *)(v1 + 16) = 0;
    unint64_t v4 = v3 >> 14;
    unint64_t v5 = (unint64_t)a1._countAndFlagsBits >> 14;
    if (v3 >> 14 == (unint64_t)a1._countAndFlagsBits >> 14)
    {
      unint64_t v3 = 0;
      unint64_t v6 = 0;
LABEL_15:
      *(void *)(v1 + 24) = v3;
      *(void *)(v1 + 32) = v6;
      *(unsigned char *)(v1 + 40) = v4 == v5;
      return;
    }
    unint64_t object = (unint64_t)a1._object;
    if (*(unsigned char *)(v1 + 41) != 1)
    {
      unint64_t v6 = String.index(before:)();
      if (v4 <= v6 >> 14) {
        goto LABEL_15;
      }
      do
      {
LABEL_22:
        __break(1u);
LABEL_23:
        __break(1u);
LABEL_24:
        unint64_t v6 = String.UnicodeScalarView._foreignIndex(before:)();
      }
      while (v4 > v6 >> 14);
      goto LABEL_15;
    }
    unint64_t v8 = _StringGuts.validateInclusiveScalarIndex(_:)(a1._countAndFlagsBits, countAndFlagsBits, (unint64_t)a1._object);
    if (v8 < 0x4000) {
      goto LABEL_23;
    }
    if ((object & 0x1000000000000000) != 0) {
      goto LABEL_24;
    }
    if ((object & 0x2000000000000000) != 0)
    {
      v19[0] = countAndFlagsBits;
      v19[1] = object & 0xFFFFFFFFFFFFFFLL;
      char v14 = (char *)v19 + (v8 >> 16);
      if ((*(v14 - 1) & 0xC0) == 0x80)
      {
        uint64_t v11 = 0;
        char v15 = v14 - 2;
        do
          int v16 = v15[v11--] & 0xC0;
        while (v16 == 128);
        goto LABEL_19;
      }
    }
    else
    {
      if ((countAndFlagsBits & 0x1000000000000000) != 0)
      {
        uint64_t v9 = (object & 0xFFFFFFFFFFFFFFFLL) + 32;
      }
      else
      {
        unint64_t v18 = v8;
        uint64_t v9 = _StringObject.sharedUTF8.getter();
        unint64_t v8 = v18;
      }
      unint64_t v10 = (v8 >> 16) + v9;
      if ((*(unsigned char *)(v10 - 1) & 0xC0) == 0x80)
      {
        uint64_t v11 = 0;
        unint64_t v12 = v10 - 2;
        do
          int v13 = *(unsigned char *)(v12 + v11--) & 0xC0;
        while (v13 == 128);
LABEL_19:
        uint64_t v17 = 1 - v11;
        goto LABEL_21;
      }
    }
    uint64_t v17 = 1;
LABEL_21:
    unint64_t v6 = (v8 - (v17 << 16)) & 0xFFFFFFFFFFFF0000 | 5;
    if (v4 <= v6 >> 14) {
      goto LABEL_15;
    }
    goto LABEL_22;
  }
  __break(1u);
}

Swift::Void __swiftcall Processor.cycle()()
{
  void (*v18)(long long *__return_ptr, long long *, _OWORD *);
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  Swift::Bool v22;
  uint64_t v23;
  uint64_t v24;
  Swift::String v25;
  Swift::Bool v26;
  uint64_t v27;
  BOOL v28;
  unint64_t v29;
  uint64_t v30;
  char v31;
  unint64_t v32;
  unint64_t v33;
  unint64_t v34;
  unint64_t v35;
  unint64_t v36;
  unint64_t v37;
  unint64_t v38;
  char v39;
  uint64_t v40;
  unint64_t v41;
  unint64_t v42;
  char *v43;
  uint64_t v44;
  char v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  unint64_t v50;
  unint64_t v51;
  unint64_t v52;
  unint64_t v53;
  unint64_t v54;
  uint64_t v55;
  char v56;
  char v57;
  unint64_t v58;
  unint64_t v59;
  unint64_t v60;
  unint64_t v61;
  char v62;
  char v63;
  char v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  unint64_t v68;
  uint64_t v69;
  unint64_t v70;
  unint64_t v71;
  unint64_t v72;
  unint64_t v73;
  unsigned __int8 v74;
  unint64_t v75;
  char v76;
  unint64_t v77;
  char v78;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v80;
  unint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  unint64_t v86;
  uint64_t v87;
  unint64_t v88;
  unint64_t v89;
  char *v90;
  uint64_t v91;
  unint64_t v92;
  unint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  unint64_t v97;
  unint64_t v98;
  char v100;
  char v101;
  uint64_t v102;
  char v103;
  uint64_t v104;
  uint64_t v105;
  long long v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  unint64_t v114;
  unint64_t v115;
  long long v116;
  uint64_t v117;
  _OWORD v118[2];
  uint64_t vars8;

  unint64_t v8 = *(void *)(v1 + 72);
  if ((v8 & 0x8000000000000000) != 0)
  {
LABEL_145:
    __break(1u);
LABEL_146:
    __break(1u);
LABEL_147:
    unint64_t v1 = (unint64_t)specialized _ArrayBuffer._consumeAndCreateNew()(v1);
LABEL_5:
    if (v2 >= *(void *)(v1 + 16))
    {
      __break(1u);
LABEL_149:
      __break(1u);
LABEL_150:
      __break(1u);
LABEL_151:
      __break(1u);
LABEL_152:
      unint64_t v5 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *((void *)v5 + 2) + 1, 1, v5);
LABEL_26:
      uint64_t v42 = *((void *)v5 + 2);
      uint64_t v41 = *((void *)v5 + 3);
      if (v42 >= v41 >> 1) {
        unint64_t v5 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v41 > 1), v42 + 1, 1, v5);
      }
      *((void *)v5 + 2) = v42 + 1;
      int v43 = &v5[80 * v42];
      *((void *)v43 + 4) = v1;
      *((void *)v43 + 5) = v105;
      v43[48] = 0;
      *((void *)v43 + 7) = 0;
      *((void *)v43 + 8) = 0;
      *((_WORD *)v43 + 36) = 1;
      *((void *)v43 + 10) = v7;
LABEL_107:
      *((void *)v43 + 11) = v4;
      *((void *)v43 + 12) = v2;
      *((void *)v43 + 13) = v3;
      *(void *)(v0 + 152) = v5;
      uint64_t v29 = v8 + 1;
      goto LABEL_129;
    }
    *(void *)(v1 + 8 * v2 + 32) = (unsigned __int16)v3;
    goto LABEL_82;
  }
  unint64_t v0 = v1;
  uint64_t v9 = *(void *)(v1 + 56);
  if (v8 >= *(void *)(v9 + 16)) {
    goto LABEL_146;
  }
  unint64_t v3 = *(void *)(v9 + 8 * v8 + 32);
  unint64_t v1 = v3 & 0xFFFFFFFFFFFFFFLL;
  switch(specialized Instruction.OpCode.init(rawValue:)(HIBYTE(v3)))
  {
    case 1u:
      unint64_t v2 = WORD1(v3);
      unint64_t v1 = *(void *)(v0 + 128);
      if (swift_isUniquelyReferenced_nonNull_native()) {
        goto LABEL_5;
      }
      goto LABEL_147;
    case 2u:
      unint64_t v3 = *(void *)(v0 + 64);
      unint64_t v2 = *(void *)(v0 + 144);
      if (swift_isUniquelyReferenced_nonNull_native()) {
        goto LABEL_63;
      }
      goto LABEL_156;
    case 3u:
      unint64_t v65 = *(void *)(v0 + 144);
      if (v1 >= *(void *)(v65 + 16)) {
        goto LABEL_155;
      }
      int v20 = *(void *)(v65 + 8 * v1 + 32);
      goto LABEL_53;
    case 4u:
      *(void *)(v0 + 72) = v1;
      return;
    case 5u:
      unint64_t v2 = WORD1(v3);
      unint64_t v1 = *(void *)(v0 + 128);
      if ((unint64_t)WORD1(v3) >= *(void *)(v1 + 16)) {
        goto LABEL_160;
      }
      unint64_t v69 = *(void *)(v1 + 8 * WORD1(v3) + 32);
      if (!v69) {
        goto LABEL_116;
      }
      unint64_t v3 = v69 - 1;
      if (__OFSUB__(v69, 1)) {
        goto LABEL_170;
      }
      if (swift_isUniquelyReferenced_nonNull_native()) {
        goto LABEL_80;
      }
      goto LABEL_171;
    case 6u:
      goto LABEL_35;
    case 7u:
      uint64_t v48 = (unsigned __int16)v3;
      uint64_t v49 = WORD1(v3);
      uint64_t v50 = *(void *)v0;
      uint64_t v51 = *(void *)(v0 + 8);
      unint64_t v52 = *(void *)(v0 + 64);
      unint64_t v53 = *(void *)(v0 + 40);
      if (v48 == 1)
      {
        uint64_t v54 = *(void *)(v0 + 64);
        unint64_t v55 = v49;
        goto LABEL_40;
      }
      unint64_t v12 = String.index(_:offsetBy:limitedBy:)();
      if ((v100 & 1) == 0) {
        goto LABEL_128;
      }
      if (v49 == 1)
      {
        uint64_t v54 = v52;
        unint64_t v55 = 1;
LABEL_40:
        unint64_t v12 = String.UnicodeScalarView.index(_:offsetBy:limitedBy:)(v54, v55, v53, v50, v51);
        if ((v56 & 1) == 0) {
          goto LABEL_128;
        }
        goto LABEL_133;
      }
      goto LABEL_133;
    case 8u:
      unint64_t v21 = *(void *)(v0 + 80);
      if ((unint64_t)WORD1(v3) >= *(void *)(v21 + 16)) {
        goto LABEL_151;
      }
      char v22 = (unsigned __int16)v3 == 1;
      unint64_t v23 = v21 + 16 * WORD1(v3);
      uint64_t v24 = *(void *)(v23 + 32);
      unint64_t v3 = *(void *)(v23 + 40);
      swift_bridgeObjectRetain();
      v25._unint64_t countAndFlagsBits = v24;
      v25._unint64_t object = (void *)v3;
      char v26 = Processor.match(_:isCaseInsensitive:)(v25, v22);
      swift_bridgeObjectRelease();
      if (!v26) {
        return;
      }
      unint64_t v27 = *(void *)(v0 + 72);
      Swift::String_optional v28 = __OFADD__(v27, 1);
      uint64_t v29 = v27 + 1;
      if (!v28) {
        goto LABEL_129;
      }
      __break(1u);
LABEL_21:
      uint64_t v30 = *(void *)(v0 + 168);
      if ((unint64_t)WORD1(v3) >= *(void *)(v30 + 16)) {
        goto LABEL_177;
      }
      if (*(unsigned char *)(v30 + 72 * WORD1(v3) + 48)) {
        goto LABEL_133;
      }
      unint64_t v31 = (unsigned __int16)v3 == 1;
      int v32 = *(void *)v0;
      uint64_t v33 = *(void *)(v0 + 8);
      uint64_t v34 = String.subscript.getter();
      unint64_t v38 = String.matchSeq(_:at:limitedBy:isScalarSemantics:)(v34, v35, v36, v37, *(void *)(v0 + 64), *(void *)(v0 + 40), v31, v32, v33);
      LOBYTE(v32) = v39;
      swift_bridgeObjectRelease();
      if (v32) {
        goto LABEL_133;
      }
      uint64_t v29 = v8 + 1;
      *(void *)(v0 + 64) = v38;
      goto LABEL_129;
    case 9u:
      unint64_t v12 = String.matchScalar(_:at:limitedBy:boundaryCheck:isCaseInsensitive:)(v3, *(void *)(v0 + 64), *(void *)(v0 + 40), (v3 >> 54) & 1, (v3 & 0x80000000000000) != 0, *(void *)v0, *(void *)(v0 + 8));
      if (v64) {
        goto LABEL_133;
      }
      goto LABEL_128;
    case 0xAu:
      uint64_t v11 = *(void *)(v0 + 96);
      if ((unint64_t)WORD1(v3) >= *(void *)(v11 + 16)) {
        goto LABEL_149;
      }
      unint64_t v12 = String.matchASCIIBitset(_:at:limitedBy:isScalarSemantics:)(*(unsigned char *)(v11 + 24 * WORD1(v3) + 32), *(void *)(v11 + 24 * WORD1(v3) + 40), *(void *)(v11 + 24 * WORD1(v3) + 48), *(void *)(v0 + 64), *(void *)(v0 + 40), (unsigned __int16)v3 == 1, *(void *)v0, *(void *)(v0 + 8));
      if (v13) {
        goto LABEL_133;
      }
      goto LABEL_128;
    case 0xBu:
      if ((v3 & 0xF8) != 0) {
        unint64_t v57 = 8;
      }
      else {
        unint64_t v57 = v3;
      }
      unint64_t v58 = *(void *)(v0 + 64);
      uint64_t v59 = *(void *)(v0 + 40);
      if (v58 >> 14 >= v59 >> 14) {
        goto LABEL_133;
      }
      uint64_t v60 = *(void *)v0;
      unint64_t v61 = *(void *)(v0 + 8);
      unint64_t v12 = String._quickMatch(_:at:limitedBy:isScalarSemantics:)(v57, *(void *)(v0 + 64), *(void *)(v0 + 40), (v3 & 0x20000000000000) != 0, *(void *)v0, v61);
      if (v62 != 2) {
        goto LABEL_127;
      }
      unint64_t v12 = String._thoroughMatchBuiltinCC(_:at:limitedBy:isInverted:isStrictASCII:isScalarSemantics:)(v57, v58, v59, (v3 >> 55) & 1, (v3 >> 54) & 1, (v3 >> 53) & 1, v60, v61);
      if (v63) {
        goto LABEL_133;
      }
      goto LABEL_128;
    case 0xCu:
      unint64_t v70 = *(void *)(v0 + 64);
      uint64_t v71 = *(void *)(v0 + 40);
      if (v70 >> 14 >= v71 >> 14) {
        goto LABEL_133;
      }
      unint64_t v72 = *(void *)v0;
      unint64_t v73 = *(void *)(v0 + 8);
      uint64_t v74 = String._quickASCIICharacter(at:limitedBy:)(*(void *)(v0 + 64), *(void *)(v0 + 40), *(void *)v0, v73);
      if (v76 == 2)
      {
        unint64_t v77 = String._thoroughMatchAnyNonNewline(at:limitedBy:isScalarSemantics:)(v70, v71, v1 == 1, v72, v73);
        if ((v78 & 1) == 0)
        {
          int v20 = v77;
LABEL_53:
          *(void *)(v0 + 64) = v20;
          *(void *)(v0 + 72) = v8 + 1;
          return;
        }
      }
      else if (v74 - 14 < 0xFFFFFFFC)
      {
        int v20 = v75;
        goto LABEL_53;
      }
      goto LABEL_133;
    case 0xDu:
      uint64_t v14 = *(void *)(v0 + 104);
      if (v1 >= *(void *)(v14 + 16)) {
        goto LABEL_150;
      }
      unint64_t v15 = *(void *)(v0 + 64);
      unint64_t v16 = *(void *)(v0 + 40);
      unint64_t v17 = v16 >> 14;
      if (v16 >> 14 <= v15 >> 14) {
        goto LABEL_133;
      }
      unint64_t v18 = *(void (**)(long long *__return_ptr, long long *, _OWORD *))(v14 + 16 * v1 + 32);
      uint64_t v19 = *(void *)(v0 + 8);
      *(void *)&unint64_t v106 = *(void *)v0;
      *((void *)&v106 + 1) = v19;
      *(void *)&v118[0] = v15;
      *((void *)&v118[0] + 1) = v16;
      swift_retain();
      v18(&v116, &v106, v118);
      swift_release();
      if (BYTE8(v116)) {
        goto LABEL_133;
      }
      int v20 = v116;
      if (v17 < (unint64_t)v116 >> 14) {
        goto LABEL_133;
      }
      goto LABEL_53;
    case 0xEu:
      if ((Processor.builtinAssert(by:)(v3 & 0xFFFFFFFFFFFFFFLL) & 1) == 0) {
        goto LABEL_133;
      }
      uint64_t v66 = *(void *)(v0 + 72);
      Swift::String_optional v28 = __OFADD__(v66, 1);
      uint64_t v29 = v66 + 1;
      if (!v28) {
        goto LABEL_129;
      }
      __break(1u);
LABEL_58:
      if (!*(void *)(*(void *)(v0 + 152) + 16)) {
        goto LABEL_177;
      }
      specialized Array._customRemoveLast()((uint64_t)&v106);
      if (v112)
      {
        outlined consume of Processor.SavePoint?(v106, *((uint64_t *)&v106 + 1), v107, v108, v109, v110, v111, v112);
      }
      else
      {
        specialized Array.remove(at:)(*(void *)(*(void *)(v0 + 152) + 16) - 1, (uint64_t)&v106);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
      }
      uint64_t v29 = v8 + 1;
      goto LABEL_129;
    case 0xFu:
      goto LABEL_94;
    case 0x10u:
      unint64_t v40 = *(void *)(v0 + 64);
      unint64_t v2 = *(void *)(v0 + 128);
      unint64_t v4 = *(void *)(v0 + 168);
      uint64_t v7 = *(void *)(*(void *)(v0 + 160) + 16);
      unint64_t v3 = *(void *)(v0 + 144);
      unint64_t v5 = *(char **)(v0 + 152);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      uint64_t v105 = v40;
      if (swift_isUniquelyReferenced_nonNull_native()) {
        goto LABEL_26;
      }
      goto LABEL_152;
    case 0x11u:
      unint64_t v2 = *(void *)(v0 + 128);
      unint64_t v4 = *(void *)(v0 + 168);
      unint64_t v91 = *(void *)(*(void *)(v0 + 160) + 16);
      unint64_t v3 = *(void *)(v0 + 144);
      unint64_t v5 = *(char **)(v0 + 152);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
        unint64_t v5 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *((void *)v5 + 2) + 1, 1, v5);
      }
      unint64_t v93 = *((void *)v5 + 2);
      uint64_t v92 = *((void *)v5 + 3);
      if (v93 >= v92 >> 1) {
        unint64_t v5 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v92 > 1), v93 + 1, 1, v5);
      }
      *((void *)v5 + 2) = v93 + 1;
      int v43 = &v5[80 * v93];
      *((void *)v43 + 4) = v1;
      *((void *)v43 + 5) = 0;
      v43[48] = 1;
      *((void *)v43 + 7) = 0;
      *((void *)v43 + 8) = 0;
      *((_WORD *)v43 + 36) = 1;
      *((void *)v43 + 10) = v91;
      goto LABEL_107;
    case 0x12u:
      goto LABEL_58;
    case 0x13u:
      Processor.clearThrough(_:)(v3 & 0xFFFFFFFFFFFFFFLL);
      return;
    case 0x14u:
      uint64_t v6 = (unsigned __int16)v3;
      uint64_t v87 = *(void *)(v0 + 64);
      unint64_t v1 = *(void *)(v0 + 128);
      unint64_t v4 = *(void *)(v0 + 168);
      unint64_t v8 = *(void *)(*(void *)(v0 + 160) + 16);
      unint64_t v2 = *(void *)(v0 + 144);
      unint64_t v5 = *(char **)(v0 + 152);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      uint64_t v105 = v87;
      if (swift_isUniquelyReferenced_nonNull_native()) {
        goto LABEL_99;
      }
      goto LABEL_164;
    case 0x15u:
      unint64_t v1 = v0;
      if ((Processor.runQuantify(_:)(v3 & 0xFFFFFFFFFFFFFFLL) & 1) == 0) {
        return;
      }
      uint64_t v67 = *(void *)(v0 + 72);
      Swift::String_optional v28 = __OFADD__(v67, 1);
      uint64_t v29 = v67 + 1;
      if (!v28) {
        goto LABEL_129;
      }
      __break(1u);
LABEL_69:
      unint64_t v3 = *(void *)(v0 + 64);
      unint64_t v2 = *(void *)(v0 + 168);
      if (swift_isUniquelyReferenced_nonNull_native()) {
        goto LABEL_70;
      }
      goto LABEL_158;
    case 0x16u:
      goto LABEL_69;
    case 0x17u:
      unint64_t v3 = *(void *)(v0 + 64);
      unint64_t v2 = *(void *)(v0 + 168);
      char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
      *(void *)(v0 + 168) = v2;
      if (isUniquelyReferenced_nonNull_native) {
        goto LABEL_88;
      }
      goto LABEL_161;
    case 0x18u:
      unsigned int v94 = WORD1(v3);
      uint64_t v95 = *(void *)(v0 + 112);
      if ((unint64_t)WORD1(v3) >= *(void *)(v95 + 16))
      {
        __break(1u);
LABEL_166:
        unint64_t v1 = (unint64_t)specialized _ArrayBuffer._consumeAndCreateNew()(v1);
        *(void *)(v0 + 168) = v1;
LABEL_31:
        if (v2 >= *(void *)(v1 + 16))
        {
          __break(1u);
          goto LABEL_168;
        }
        unint64_t v2 = v1 + 72 * v2 + 56;
        swift_bridgeObjectRetain();
        outlined destroy of Any?(v2);
        outlined init with take of Any(&v106, (_OWORD *)v2);
        swift_bridgeObjectRelease();
        int v46 = *(void *)(v0 + 72);
        Swift::String_optional v28 = __OFADD__(v46, 1);
        uint64_t v29 = v46 + 1;
        if (!v28) {
          goto LABEL_129;
        }
        __break(1u);
LABEL_35:
        uint64_t v47 = *(void *)(v0 + 144);
        if ((unint64_t)WORD1(v3) < *(void *)(v47 + 16))
        {
          if ((*(void *)(v0 + 64) ^ *(void *)(v47 + 8 * WORD1(v3) + 32)) >> 14) {
            uint64_t v29 = v8 + 1;
          }
          else {
LABEL_116:
          }
            uint64_t v29 = (unsigned __int16)v3;
          goto LABEL_129;
        }
LABEL_154:
        __break(1u);
LABEL_155:
        __break(1u);
LABEL_156:
        unint64_t v2 = (unint64_t)specialized _ArrayBuffer._consumeAndCreateNew()(v2);
LABEL_63:
        if (v1 < *(void *)(v2 + 16))
        {
          *(void *)(v2 + 8 * v1 + 32) = v3;
          *(void *)(v0 + 144) = v2;
          uint64_t v29 = v8 + 1;
LABEL_129:
          *(void *)(v0 + 72) = v29;
          return;
        }
        __break(1u);
LABEL_158:
        unint64_t v2 = (unint64_t)specialized _ArrayBuffer._consumeAndCreateNew()(v2);
LABEL_70:
        if (v1 < *(void *)(v2 + 16))
        {
          uint64_t v68 = v2 + 72 * v1;
          *(void *)(v68 + 88) = v3;
          *(unsigned char *)(v68 + 96) = 0;
          *(void *)(v0 + 168) = v2;
          uint64_t v29 = v8 + 1;
          goto LABEL_129;
        }
        __break(1u);
LABEL_160:
        __break(1u);
LABEL_161:
        unint64_t v2 = (unint64_t)specialized _ArrayBuffer._consumeAndCreateNew()(v2);
        *(void *)(v0 + 168) = v2;
LABEL_88:
        if (v1 >= *(void *)(v2 + 16))
        {
          __break(1u);
          goto LABEL_163;
        }
        uint64_t v80 = v2 + 72 * v1;
        if (*(unsigned char *)(v80 + 96)) {
          goto LABEL_177;
        }
        uint64_t v81 = *(void *)(v80 + 88);
        if (v3 >> 14 >= v81 >> 14)
        {
          unint64_t v4 = v80 + 32;
          *(void *)(v80 + 32) = v81;
          *(void *)(v80 + 40) = v3;
          *(unsigned char *)(v80 + 48) = 0;
          unint64_t v1 = v80 + 56;
          swift_bridgeObjectRetain();
          outlined destroy of Any?(v1);
          *(_OWORD *)(v4 + 24) = 0u;
          *(_OWORD *)(v4 + 40) = 0u;
          *(void *)(v4 + 56) = 0;
          *(unsigned char *)(v4 + 64) = 1;
          swift_bridgeObjectRelease();
          unint64_t v82 = *(void *)(v0 + 72);
          Swift::String_optional v28 = __OFADD__(v82, 1);
          uint64_t v29 = v82 + 1;
          if (!v28) {
            goto LABEL_129;
          }
          __break(1u);
LABEL_94:
          unint64_t v83 = *(void *)(v0 + 120);
          if ((unint64_t)(unsigned __int16)v3 < *(void *)(v83 + 16))
          {
            unint64_t v5 = *(char **)(v83 + 16 * (unsigned __int16)v3 + 32);
            uint64_t v84 = *(void *)(v0 + 8);
            uint64_t v85 = *(void *)(v0 + 64);
            unint64_t v86 = *(void *)(v0 + 32);
            unint64_t v4 = *(void *)(v0 + 40);
            *(void *)&uint64_t v116 = *(void *)v0;
            *((void *)&v116 + 1) = v84;
            unint64_t v113 = v85;
            uint64_t v114 = v86;
            unint64_t v115 = v4;
            swift_retain();
            ((void (*)(long long *__return_ptr, long long *, uint64_t *, unint64_t *))v5)(&v106, &v116, &v113, &v114);
            swift_release();
            if (v109)
            {
              unint64_t v2 = v106;
              outlined init with take of Any((long long *)((char *)&v106 + 8), v118);
              if (v4 >> 14 >= v2 >> 14)
              {
                unint64_t v3 = WORD1(v3);
                outlined init with take of Any(v118, &v106);
                unint64_t v1 = *(void *)(v0 + 136);
                unint64_t v103 = swift_isUniquelyReferenced_nonNull_native();
                *(void *)(v0 + 136) = v1;
                if (v103)
                {
LABEL_141:
                  if (v3 < *(void *)(v1 + 16))
                  {
                    v1 += 32 * v3 + 32;
                    __swift_destroy_boxed_opaque_existential_0(v1);
                    outlined init with take of Any(&v106, (_OWORD *)v1);
                    *(void *)(v0 + 64) = v2;
                    unint64_t v104 = *(void *)(v0 + 72);
                    Swift::String_optional v28 = __OFADD__(v104, 1);
                    uint64_t v29 = v104 + 1;
                    if (!v28) {
                      goto LABEL_129;
                    }
                    __break(1u);
                    goto LABEL_145;
                  }
                  __break(1u);
                  while (1)
                  {
LABEL_177:
                    _assertionFailure(_:_:file:line:flags:)();
                    __break(1u);
                  }
                }
LABEL_175:
                unint64_t v1 = (unint64_t)specialized _ArrayBuffer._consumeAndCreateNew()(v1);
                *(void *)(v0 + 136) = v1;
                goto LABEL_141;
              }
              __swift_destroy_boxed_opaque_existential_0((uint64_t)v118);
            }
            else
            {
              outlined destroy of (range: Range<String.Index>, value: Any?)?((uint64_t)&v106, &demangling cache variable for type metadata for (String.Index, Any)?);
            }
            goto LABEL_139;
          }
LABEL_163:
          __break(1u);
LABEL_164:
          unint64_t v5 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *((void *)v5 + 2) + 1, 1, v5);
LABEL_99:
          unint64_t v89 = *((void *)v5 + 2);
          uint64_t v88 = *((void *)v5 + 3);
          if (v89 >= v88 >> 1) {
            unint64_t v5 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v88 > 1), v89 + 1, 1, v5);
          }
          *((void *)v5 + 2) = v89 + 1;
          uint64_t v90 = &v5[80 * v89];
          *((void *)v90 + 4) = WORD1(v3);
          *((void *)v90 + 5) = v105;
          v90[48] = 0;
          *((void *)v90 + 7) = 0;
          *((void *)v90 + 8) = 0;
          *((_WORD *)v90 + 36) = 1;
          *((void *)v90 + 10) = v8;
          *((void *)v90 + 11) = v4;
          *((void *)v90 + 12) = v1;
          *((void *)v90 + 13) = v2;
          *(void *)(v0 + 152) = v5;
          *(void *)(v0 + 72) = v6;
          return;
        }
LABEL_168:
        __break(1u);
        goto LABEL_169;
      }
      unint64_t v3 = (unsigned __int16)v3;
      unint64_t v96 = *(void *)(v0 + 168);
      if ((unint64_t)(unsigned __int16)v3 < *(void *)(v96 + 16))
      {
        unint64_t v5 = *(char **)(v95 + 16 * v94 + 32);
        unint64_t v97 = *(void *)v0;
        uint64_t v98 = *(void *)(v0 + 8);
        unint64_t v4 = 72 * (unsigned __int16)v3;
        outlined init with copy of Processor._StoredCapture((long long *)(v96 + v4 + 32), (uint64_t)&v106);
        uint64_t v114 = v97;
        unint64_t v115 = v98;
        swift_retain();
        unint64_t v2 = 0;
        ((void (*)(long long *__return_ptr, unint64_t *, long long *))v5)(&v116, &v114, &v106);
        swift_release();
        outlined destroy of Processor._StoredCapture((uint64_t)&v106);
        if (v117)
        {
          outlined init with take of Any(&v116, v118);
          unint64_t v1 = *(void *)(v0 + 168);
          uint64_t v101 = swift_isUniquelyReferenced_nonNull_native();
          *(void *)(v0 + 168) = v1;
          if (v101) {
            goto LABEL_123;
          }
          goto LABEL_173;
        }
        outlined destroy of Any?((uint64_t)&v116);
LABEL_139:
        Processor.signalFailure(preservingCaptures:)(0);
        return;
      }
LABEL_169:
      __break(1u);
LABEL_170:
      __break(1u);
LABEL_171:
      unint64_t v1 = (unint64_t)specialized _ArrayBuffer._consumeAndCreateNew()(v1);
LABEL_80:
      if (v2 < *(void *)(v1 + 16))
      {
        *(void *)(v1 + 8 * v2 + 32) = v3;
LABEL_82:
        *(void *)(v0 + 128) = v1;
        uint64_t v29 = v8 + 1;
        goto LABEL_129;
      }
      __break(1u);
LABEL_173:
      unint64_t v1 = (unint64_t)specialized _ArrayBuffer._consumeAndCreateNew()(v1);
      *(void *)(v0 + 168) = v1;
LABEL_123:
      if (v3 >= *(void *)(v1 + 16))
      {
        __break(1u);
        goto LABEL_175;
      }
      swift_bridgeObjectRetain();
      outlined destroy of Any?(v1 + v4 + 56);
      outlined init with take of Any(v118, (_OWORD *)(v1 + v4 + 56));
      unint64_t v12 = swift_bridgeObjectRelease();
      unint64_t v102 = *(void *)(v0 + 72);
      Swift::String_optional v28 = __OFADD__(v102, 1);
      uint64_t v29 = v102 + 1;
      if (!v28) {
        goto LABEL_129;
      }
      __break(1u);
LABEL_127:
      if (((v3 >> 55) & 1) == ((v62 & 1) == 0))
      {
LABEL_128:
        uint64_t v29 = v8 + 1;
        *(void *)(v0 + 64) = v12;
        goto LABEL_129;
      }
LABEL_133:
      Swift::Bool v10 = 0;
LABEL_134:
      Processor.signalFailure(preservingCaptures:)(v10);
      return;
    case 0x19u:
      uint64_t v44 = *(void *)(v0 + 136);
      if ((unint64_t)(unsigned __int16)v3 >= *(void *)(v44 + 16))
      {
        __break(1u);
        goto LABEL_154;
      }
      unint64_t v2 = WORD1(v3);
      outlined init with copy of Any(v44 + 32 * (unsigned __int16)v3 + 32, (uint64_t)&v106);
      unint64_t v1 = *(void *)(v0 + 168);
      unint64_t v45 = swift_isUniquelyReferenced_nonNull_native();
      *(void *)(v0 + 168) = v1;
      if (v45) {
        goto LABEL_31;
      }
      goto LABEL_166;
    case 0x1Au:
      goto LABEL_21;
    case 0x1Bu:
      if ((*(void *)(v0 + 40) ^ *(void *)(v0 + 64)) >= 0x4000 && *(unsigned char *)(v0 + 48) == 0) {
        goto LABEL_133;
      }
      *(unsigned char *)(v0 + 193) = 2;
      return;
    case 0x1Cu:
      Swift::Bool v10 = v1 == 1;
      goto LABEL_134;
    default:
      goto LABEL_177;
  }
}

void MEProgram.description.getter()
{
  v1._unint64_t countAndFlagsBits = MEMORY[0x21050F1D0](v0[1], MEMORY[0x263F8D120]);
  String.append(_:)(v1);
  swift_bridgeObjectRelease();
  v2._unint64_t countAndFlagsBits = 10;
  v2._unint64_t object = (void *)0xE100000000000000;
  String.append(_:)(v2);
  uint64_t v3 = v0[4];
  if (*(void *)(v3 + 16))
  {
    _StringGuts.grow(_:)(21);
    swift_bridgeObjectRelease();
    uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (_:_:));
    v5._unint64_t countAndFlagsBits = MEMORY[0x21050F1D0](v3, v4);
    String.append(_:)(v5);
    swift_bridgeObjectRelease();
    v6._unint64_t countAndFlagsBits = 0xD000000000000013;
    v6._unint64_t object = (void *)0x8000000209FB5EC0;
    String.append(_:)(v6);
    swift_bridgeObjectRelease();
  }
  uint64_t v7 = *v0;
  uint64_t v8 = *(void *)(*v0 + 16);
  if (v8)
  {
    unint64_t v9 = 0;
    uint64_t v10 = v7 + 32;
    while (v9 < *(void *)(v7 + 16))
    {
      unint64_t v12 = *(void *)(v10 + 8 * v9);
      v13._unint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
      String.append(_:)(v13);
      swift_bridgeObjectRelease();
      v14._unint64_t countAndFlagsBits = 8285;
      v14._unint64_t object = (void *)0xE200000000000000;
      String.append(_:)(v14);
      v15._unint64_t countAndFlagsBits = Instruction.description.getter(v12);
      String.append(_:)(v15);
      swift_bridgeObjectRelease();
      v16._unint64_t countAndFlagsBits = 91;
      v16._unint64_t object = (void *)0xE100000000000000;
      String.append(_:)(v16);
      swift_bridgeObjectRelease();
      unsigned int v17 = specialized Instruction.OpCode.init(rawValue:)(HIBYTE(v12));
      if (v17 <= 0x11 && ((1 << v17) & 0x30010) != 0)
      {
        if ((v12 & 0xFFFFFFFFFFFFFFLL) >= *(void *)(v7 + 16)) {
          goto LABEL_13;
        }
        v18._unint64_t countAndFlagsBits = Instruction.description.getter(*(void *)(v10 + 8 * (v12 & 0xFFFFFFFFFFFFFFLL)));
        String.append(_:)(v18);
        swift_bridgeObjectRelease();
        v19._unint64_t countAndFlagsBits = 539963168;
        v19._unint64_t object = (void *)0xE400000000000000;
        String.append(_:)(v19);
        swift_bridgeObjectRelease();
      }
      ++v9;
      v11._unint64_t countAndFlagsBits = 10;
      v11._unint64_t object = (void *)0xE100000000000000;
      String.append(_:)(v11);
      if (v8 == v9) {
        return;
      }
    }
    __break(1u);
LABEL_13:
    __break(1u);
  }
}

BOOL protocol witness for static Equatable.== infix(_:_:) in conformance QuantifyPayload.PayloadType(char *a1, char *a2)
{
  return qword_209FB33E8[*a1] == qword_209FB33E8[*a2];
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance QuantifyPayload.PayloadType()
{
  uint64_t v1 = *v0;
  Hasher.init(_seed:)();
  Hasher._combine(_:)(qword_209FB33E8[v1]);
  return Hasher._finalize()();
}

void protocol witness for Hashable.hash(into:) in conformance QuantifyPayload.PayloadType()
{
  Hasher._combine(_:)(qword_209FB33E8[*v0]);
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance QuantifyPayload.PayloadType()
{
  uint64_t v1 = *v0;
  Hasher.init(_seed:)();
  Hasher._combine(_:)(qword_209FB33E8[v1]);
  return Hasher._finalize()();
}

uint64_t protocol witness for RawRepresentable.init(rawValue:) in conformance QuantifyPayload.PayloadType@<X0>(unint64_t *a1@<X0>, unsigned char *a2@<X8>)
{
  uint64_t result = specialized QuantifyPayload.PayloadType.init(rawValue:)(*a1);
  *a2 = result;
  return result;
}

void protocol witness for RawRepresentable.rawValue.getter in conformance QuantifyPayload.PayloadType(void *a1@<X8>)
{
  *a1 = qword_209FB33E8[*v1];
}

uint64_t DSLTree.Atom.Assertion.rawValue.getter()
{
  return *v0;
}

_StringProcessing::DSLTree::Atom::Assertion_optional __swiftcall DSLTree.Atom.Assertion.init(rawValue:)(Swift::UInt64 rawValue)
{
  char v2 = 13;
  if (rawValue < 0xD) {
    char v2 = rawValue;
  }
  *uint64_t v1 = v2;
  return (_StringProcessing::DSLTree::Atom::Assertion_optional)rawValue;
}

void *protocol witness for RawRepresentable.init(rawValue:) in conformance Instruction@<X0>(void *result@<X0>, uint64_t a2@<X8>)
{
  *(void *)a2 = *result;
  *(unsigned char *)(a2 + 8) = 0;
  return result;
}

void protocol witness for RawRepresentable.rawValue.getter in conformance Instruction(void *a1@<X8>)
{
  *a1 = *v1;
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance Instruction()
{
  Swift::UInt64 v1 = *v0;
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v1);
  return Hasher._finalize()();
}

void protocol witness for Hashable.hash(into:) in conformance Instruction()
{
  Hasher._combine(_:)(*v0);
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance Instruction()
{
  Swift::UInt64 v1 = *v0;
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v1);
  return Hasher._finalize()();
}

BOOL protocol witness for static Equatable.== infix(_:_:) in conformance Instruction(void *a1, void *a2)
{
  return *a1 == *a2;
}

BOOL protocol witness for static Equatable.== infix(_:_:) in conformance Instruction.OpCode(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return *a1 == *a2;
}

void protocol witness for Hashable.hash(into:) in conformance Instruction.OpCode()
{
  Hasher._combine(_:)(*v0);
}

unint64_t protocol witness for RawRepresentable.init(rawValue:) in conformance Instruction.OpCode@<X0>(unint64_t *a1@<X0>, unsigned char *a2@<X8>)
{
  unint64_t result = specialized Instruction.OpCode.init(rawValue:)(*a1);
  *a2 = result;
  return result;
}

void protocol witness for RawRepresentable.rawValue.getter in conformance Instruction.OpCode(void *a1@<X8>)
{
  *a1 = *v1;
}

uint64_t specialized TypedSetVector.store(_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = v2;
  uint64_t v6 = *v2;
  if (*(void *)(v6 + 16))
  {
    unint64_t v7 = specialized __RawDictionaryStorage.find<A>(_:)(a1, a2);
    if (v8) {
      return *(void *)(*(void *)(v6 + 56) + 8 * v7);
    }
  }
  uint64_t v10 = (char *)v3[1];
  uint64_t v9 = *((void *)v10 + 2);
  swift_bridgeObjectRetain();
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
    uint64_t v10 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v9 + 1, 1, v10);
  }
  unint64_t v12 = *((void *)v10 + 2);
  unint64_t v11 = *((void *)v10 + 3);
  if (v12 >= v11 >> 1) {
    uint64_t v10 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v11 > 1), v12 + 1, 1, v10);
  }
  *((void *)v10 + 2) = v12 + 1;
  Swift::String v13 = &v10[16 * v12];
  *((void *)v13 + 4) = a1;
  *((void *)v13 + 5) = a2;
  v3[1] = (uint64_t)v10;
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  uint64_t v16 = *v3;
  *uint64_t v3 = 0x8000000000000000;
  specialized _NativeDictionary.setValue(_:forKey:isUnique:)(v9, a1, a2, isUniquelyReferenced_nonNull_native);
  *uint64_t v3 = v16;
  swift_bridgeObjectRelease();
  return v9;
}

uint64_t specialized Sequence.forEach(_:)(uint64_t result)
{
  uint64_t v1 = *(void *)(result + 16);
  if (v1)
  {
    char v2 = (uint64_t *)(result + 32);
    do
    {
      uint64_t v3 = *v2++;
      swift_retain();
      PrettyPrinter.printAsPattern(convertedFromAST:isTopLevel:)(v3, 0);
      unint64_t result = swift_release();
      --v1;
    }
    while (v1);
  }
  return result;
}

uint64_t Character._isHorizontalWhitespace.getter(unint64_t a1, unint64_t a2)
{
  uint64_t v4 = type metadata accessor for Unicode.GeneralCategory();
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v6 = MEMORY[0x270FA5388](v4);
  char v8 = (char *)&v19 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v6);
  uint64_t v10 = (char *)&v19 - v9;
  uint64_t v11 = type metadata accessor for Unicode.Scalar.Properties();
  uint64_t v12 = *(void *)(v11 - 8);
  MEMORY[0x270FA5388](v11);
  Swift::String v14 = (char *)&v19 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  unint64_t v15 = specialized Collection.first.getter(a1, a2);
  if ((v15 & 0x100000000) != 0)
  {
    char v16 = 0;
  }
  else if (v15 == 9)
  {
    char v16 = 1;
  }
  else
  {
    Unicode.Scalar.properties.getter();
    Unicode.Scalar.Properties.generalCategory.getter();
    (*(void (**)(char *, uint64_t))(v12 + 8))(v14, v11);
    (*(void (**)(char *, void, uint64_t))(v5 + 104))(v8, *MEMORY[0x263F8EAD8], v4);
    char v16 = MEMORY[0x21050F860](v10, v8);
    unsigned int v17 = *(void (**)(char *, uint64_t))(v5 + 8);
    v17(v8, v4);
    v17(v10, v4);
  }
  return v16 & 1;
}

uint64_t Character._isNewline.getter(unint64_t a1, unint64_t a2)
{
  unint64_t v2 = specialized Collection.first.getter(a1, a2);
  BOOL v3 = (v2 - 8232) < 2 || v2 == 133;
  unsigned int v4 = (v2 - 14) > 0xFFFFFFFB || v3;
  if ((v2 & 0x100000000) != 0) {
    return 0;
  }
  else {
    return v4;
  }
}

Swift::Void __swiftcall Processor.signalFailure(preservingCaptures:)(Swift::Bool preservingCaptures)
{
  unint64_t v2 = (void *)v1;
  uint64_t v4 = v1 + 152;
  BOOL v3 = *(char **)(v1 + 152);
  unint64_t v5 = *((void *)v3 + 2);
  if (v5)
  {
    unint64_t v7 = v5 - 1;
    if ((v3[80 * v5 - 8] & 1) == 0)
    {
      uint64_t v9 = *(void *)v1;
      char v8 = *(void **)(v1 + 8);
      swift_bridgeObjectRetain();
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
        goto LABEL_21;
      }
      goto LABEL_8;
    }
    specialized Array._customRemoveLast()((uint64_t)&v18);
    BOOL v3 = v22;
    if (v22)
    {
      char v8 = v23;
      uint64_t v4 = v24;
      uint64_t v9 = v21;
      unint64_t v7 = v19;
      char v10 = v20 & 1;
      *(void *)(v1 + 72) = v18;
      if (v10) {
        goto LABEL_11;
      }
    }
    else
    {
      specialized Array.remove(at:)(*(void *)(*(void *)v4 + 16) - 1, (uint64_t)&v18);
      unint64_t v7 = v19;
      char v17 = v20;
      uint64_t v9 = v21;
      BOOL v3 = v22;
      char v8 = v23;
      uint64_t v4 = v24;
      *(void *)(v1 + 72) = v18;
      if (v17) {
        goto LABEL_11;
      }
    }
    while (1)
    {
      uint64_t v15 = v2[20];
      v2[8] = v7;
      uint64_t v16 = *(void *)(v15 + 16);
      if (!__OFSUB__(v16, v9)) {
        break;
      }
      __break(1u);
LABEL_21:
      BOOL v3 = specialized _ArrayBuffer._consumeAndCreateNew()((uint64_t)v3);
LABEL_8:
      if (v5 > *((void *)v3 + 2))
      {
        __break(1u);
LABEL_23:
        __break(1u);
        return;
      }
      swift_bridgeObjectRetain();
      v11._unint64_t countAndFlagsBits = v9;
      v11._unint64_t object = v8;
      Processor.SavePoint.takePositionFromQuantifiedRange(_:)(v11);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      *(void *)uint64_t v4 = v3;
      if (v5 > *((void *)v3 + 2)) {
        goto LABEL_23;
      }
      uint64_t v12 = *(void *)&v3[80 * v7 + 32];
      uint64_t v13 = (uint64_t)&v3[80 * v7 + 32];
      unint64_t v7 = *(void *)(v13 + 8);
      int v14 = *(unsigned __int8 *)(v13 + 16);
      uint64_t v9 = *(void *)(v13 + 48);
      BOOL v3 = *(char **)(v13 + 56);
      char v8 = *(void **)(v13 + 64);
      uint64_t v4 = *(void *)(v13 + 72);
      v2[9] = v12;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      if (v14 == 1) {
LABEL_11:
      }
        unint64_t v7 = v2[8];
    }
    specialized RangeReplaceableCollection<>.removeLast(_:)(v16 - v9);
    swift_bridgeObjectRelease();
    v2[16] = v8;
    swift_bridgeObjectRelease();
    v2[18] = v4;
    if (preservingCaptures)
    {
      swift_bridgeObjectRelease();
    }
    else
    {
      swift_bridgeObjectRelease();
      v2[21] = v3;
    }
  }
  else
  {
    *(unsigned char *)(v1 + 193) = 1;
  }
}

unint64_t Processor.isAtStartOfLine(_:)(uint64_t a1)
{
  unint64_t v3 = v1[8];
  if ((v1[2] ^ v3) < 0x4000) {
    return 1;
  }
  unint64_t v5 = *v1;
  if ((a1 & 0x10000000000000) != 0)
  {
    unint64_t v9 = v1[1];
    unint64_t v10 = _StringGuts.validateInclusiveScalarIndex(_:)(v3, v5, v9);
    if (v10 < 0x4000)
    {
      __break(1u);
    }
    else if ((v9 & 0x1000000000000000) == 0)
    {
      if ((v9 & 0x2000000000000000) != 0)
      {
        unint64_t v25 = v5;
        uint64_t v26 = v9 & 0xFFFFFFFFFFFFFFLL;
        uint64_t v16 = (char *)&v25 + (v10 >> 16);
        if ((*(v16 - 1) & 0xC0) == 0x80)
        {
          uint64_t v13 = 0;
          char v17 = v16 - 2;
          do
            int v18 = v17[v13--] & 0xC0;
          while (v18 == 128);
          goto LABEL_22;
        }
      }
      else
      {
        if ((v5 & 0x1000000000000000) != 0)
        {
          uint64_t v11 = (v9 & 0xFFFFFFFFFFFFFFFLL) + 32;
        }
        else
        {
          unint64_t v24 = v10;
          uint64_t v11 = _StringObject.sharedUTF8.getter();
          unint64_t v10 = v24;
        }
        unint64_t v12 = (v10 >> 16) + v11;
        if ((*(unsigned char *)(v12 - 1) & 0xC0) == 0x80)
        {
          uint64_t v13 = 0;
          unint64_t v14 = v12 - 2;
          do
            int v15 = *(unsigned char *)(v14 + v13--) & 0xC0;
          while (v15 == 128);
LABEL_22:
          uint64_t v19 = 1 - v13;
LABEL_24:
          _StringGuts.validateScalarIndex(_:)((v10 - (v19 << 16)) & 0xFFFFFFFFFFFF0000 | 5, v5, v9);
          if ((v9 & 0x2000000000000000) != 0)
          {
            unint64_t v25 = v5;
            uint64_t v26 = v9 & 0xFFFFFFFFFFFFFFLL;
          }
          else if ((v5 & 0x1000000000000000) == 0)
          {
            _StringObject.sharedUTF8.getter();
          }
          int v20 = _decodeScalar(_:startingAt:)();
LABEL_29:
          int v21 = v20;
          unsigned int v22 = v20 - 14;
          unint64_t result = 1;
          if (v22 <= 0xFFFFFFFB && (v21 - 8232) >= 2 && v21 != 133) {
            return 0;
          }
          return result;
        }
      }
      uint64_t v19 = 1;
      goto LABEL_24;
    }
    unint64_t v23 = String.UnicodeScalarView._foreignIndex(before:)();
    _StringGuts.validateScalarIndex(_:)(v23, v5, v9);
    int v20 = _StringGuts.foreignErrorCorrectedScalar(startingAt:)();
    goto LABEL_29;
  }
  String.index(before:)();
  unint64_t v6 = String.subscript.getter();
  unint64_t result = specialized Collection.first.getter(v6, v7);
  if ((result & 0x100000000) != 0)
  {
    __break(1u);
    return result;
  }
  int v8 = result;
  swift_bridgeObjectRelease();
  unint64_t result = 1;
  if ((v8 - 14) <= 0xFFFFFFFB && (v8 - 8232) >= 2 && v8 != 133) {
    return 0;
  }
  return result;
}

unint64_t Processor.isAtEndOfLine(_:)(uint64_t a1)
{
  unint64_t v3 = v1[8];
  if ((v1[3] ^ v3) < 0x4000) {
    return 1;
  }
  unint64_t v5 = *v1;
  if ((a1 & 0x10000000000000) != 0)
  {
    unint64_t v9 = v1[1];
    _StringGuts.validateScalarIndex(_:)(v3, v5, v9);
    if ((v9 & 0x1000000000000000) != 0)
    {
      int v10 = _StringGuts.foreignErrorCorrectedScalar(startingAt:)();
    }
    else
    {
      if ((v9 & 0x2000000000000000) == 0 && (v5 & 0x1000000000000000) == 0) {
        _StringObject.sharedUTF8.getter();
      }
      int v10 = _decodeScalar(_:startingAt:)();
    }
    int v11 = v10;
    unsigned int v12 = v10 - 14;
    unint64_t result = 1;
    if (v12 <= 0xFFFFFFFB && (v11 - 8232) >= 2) {
      return v11 == 133;
    }
  }
  else
  {
    unint64_t v6 = String.subscript.getter();
    unint64_t result = specialized Collection.first.getter(v6, v7);
    if ((result & 0x100000000) != 0)
    {
      __break(1u);
    }
    else
    {
      int v8 = result;
      swift_bridgeObjectRelease();
      unint64_t result = 1;
      if ((v8 - 14) <= 0xFFFFFFFB && (v8 - 8232) >= 2) {
        return v8 == 133;
      }
    }
  }
  return result;
}

unint64_t Processor.builtinAssert(by:)(uint64_t a1)
{
  DSLTree.Atom.Assertion.init(rawValue:)(a1);
  switch((char)v59)
  {
    case 1:
      uint64_t v3 = *((void *)v1 + 3) >> 14;
      if (v3 == *((void *)v1 + 8) >> 14)
      {
        char v4 = 1;
        return v4 & 1;
      }
      unint64_t v37 = *(void *)v1;
      uint64_t v36 = *((void *)v1 + 1);
      if ((a1 & 0x10000000000000) != 0)
      {
        unint64_t v48 = _StringGuts.validateScalarIndex(_:)(*((void *)v1 + 8), *(void *)v1, *((void *)v1 + 1));
        if ((v36 & 0x1000000000000000) != 0)
        {
          uint64_t v54 = String.UnicodeScalarView._foreignIndex(after:)();
        }
        else
        {
          unint64_t v49 = v48 >> 16;
          if ((v36 & 0x2000000000000000) != 0)
          {
            *(void *)&long long v59 = v37;
            *((void *)&v59 + 1) = v36 & 0xFFFFFFFFFFFFFFLL;
            int v51 = *((unsigned __int8 *)&v59 + v49);
          }
          else
          {
            if ((v37 & 0x1000000000000000) != 0) {
              uint64_t v50 = (v36 & 0xFFFFFFFFFFFFFFFLL) + 32;
            }
            else {
              uint64_t v50 = _StringObject.sharedUTF8.getter();
            }
            int v51 = *(unsigned __int8 *)(v50 + v49);
          }
          int v52 = (char)v51;
          unsigned int v53 = __clz(v51 ^ 0xFF) - 24;
          if (v52 >= 0) {
            LOBYTE(v53) = 1;
          }
          uint64_t v54 = ((v49 + v53) << 16) | 5;
        }
        if ((*((void *)v1 + 3) ^ (unint64_t)v54) >= 0x4000) {
          goto LABEL_47;
        }
        unint64_t v56 = *(void *)v1;
        unint64_t v55 = *((void *)v1 + 1);
        _StringGuts.validateScalarIndex(_:)(*((void *)v1 + 8), *(void *)v1, v55);
        if ((v55 & 0x1000000000000000) != 0)
        {
          int v58 = _StringGuts.foreignErrorCorrectedScalar(startingAt:)();
        }
        else
        {
          if ((v55 & 0x2000000000000000) == 0)
          {
            if ((v56 & 0x1000000000000000) == 0) {
              _StringObject.sharedUTF8.getter();
            }
            swift_bridgeObjectRetain();
            int v57 = _decodeScalar(_:startingAt:)();
            swift_bridgeObjectRelease();
LABEL_44:
            char v4 = 1;
            if ((v57 - 14) > 0xFFFFFFFB || (v57 - 8232) < 2 || v57 == 133) {
              return v4 & 1;
            }
LABEL_47:
            char v4 = 0;
            return v4 & 1;
          }
          *(void *)&long long v59 = v56;
          *((void *)&v59 + 1) = v55 & 0xFFFFFFFFFFFFFFLL;
          int v58 = _decodeScalar(_:startingAt:)();
        }
        int v57 = v58;
        goto LABEL_44;
      }
      if (v3 != (unint64_t)String.index(after:)() >> 14) {
        goto LABEL_47;
      }
      unint64_t v38 = String.subscript.getter();
      unint64_t v40 = specialized Collection.first.getter(v38, v39);
      if ((v40 & 0x100000000) != 0)
      {
        __break(1u);
LABEL_53:
        _assertionFailure(_:_:file:line:flags:)();
        __break(1u);
        JUMPOUT(0x209F5088CLL);
      }
      int v41 = v40;
      swift_bridgeObjectRelease();
      char v4 = 1;
      if ((v41 - 14) <= 0xFFFFFFFB && (v41 - 8232) >= 2 && v41 != 133) {
        goto LABEL_47;
      }
      return v4 & 1;
    case 2:
      goto LABEL_7;
    case 3:
      goto LABEL_53;
    case 4:
      unint64_t v10 = *((void *)v1 + 8);
      uint64_t v11 = *((void *)v1 + 4);
      goto LABEL_14;
    case 5:
      char v4 = String.isOnGraphemeClusterBoundary(_:)();
      return v4 & 1;
    case 6:
      char v4 = String.isOnGraphemeClusterBoundary(_:)() ^ 1;
      return v4 & 1;
    case 7:
      goto LABEL_15;
    case 8:
      goto LABEL_8;
    case 9:
      if ((a1 & 0x80000000000000) == 0) {
        goto LABEL_13;
      }
LABEL_15:
      long long v18 = v1[11];
      long long v69 = v1[10];
      long long v70 = v18;
      long long v71 = v1[12];
      long long v19 = v1[7];
      long long v65 = v1[6];
      long long v66 = v19;
      long long v20 = v1[9];
      long long v67 = v1[8];
      long long v68 = v20;
      long long v21 = v1[3];
      long long v61 = v1[2];
      long long v62 = v21;
      long long v22 = v1[5];
      long long v63 = v1[4];
      long long v64 = v22;
      long long v23 = v1[1];
      long long v59 = *v1;
      long long v60 = v23;
      char v4 = Processor.isAtStartOfLine(_:)(a1);
      return v4 & 1;
    case 10:
      if ((a1 & 0x80000000000000) != 0)
      {
LABEL_8:
        long long v12 = v1[11];
        long long v69 = v1[10];
        long long v70 = v12;
        long long v71 = v1[12];
        long long v13 = v1[7];
        long long v65 = v1[6];
        long long v66 = v13;
        long long v14 = v1[9];
        long long v67 = v1[8];
        long long v68 = v14;
        long long v15 = v1[3];
        long long v61 = v1[2];
        long long v62 = v15;
        long long v16 = v1[5];
        long long v63 = v1[4];
        long long v64 = v16;
        long long v17 = v1[1];
        long long v59 = *v1;
        long long v60 = v17;
        char v4 = Processor.isAtEndOfLine(_:)(a1);
      }
      else
      {
LABEL_7:
        unint64_t v10 = *((void *)v1 + 8);
        uint64_t v11 = *((void *)v1 + 3);
LABEL_14:
        char v4 = (v11 ^ v10) < 0x4000;
      }
      return v4 & 1;
    case 11:
      if ((a1 & 0x40000000000000) == 0)
      {
        unint64_t v24 = *((void *)v1 + 8);
        unint64_t v25 = (uint64_t *)(v1 + 11);
        uint64_t v26 = (uint64_t)v1 + 184;
        unint64_t v28 = *((void *)v1 + 2);
        unint64_t v27 = *((void *)v1 + 3);
        swift_bridgeObjectRetain();
        LOBYTE(v27) = String.isOnWordBoundary(at:in:using:_:)(v24, v28, v27, v25, v26);
        swift_bridgeObjectRelease();
        return v27 & 1;
      }
      long long v42 = v1[11];
      long long v69 = v1[10];
      long long v70 = v42;
      long long v71 = v1[12];
      long long v43 = v1[7];
      long long v65 = v1[6];
      long long v66 = v43;
      long long v44 = v1[9];
      long long v67 = v1[8];
      long long v68 = v44;
      long long v45 = v1[3];
      long long v61 = v1[2];
      long long v62 = v45;
      long long v46 = v1[5];
      long long v63 = v1[4];
      long long v64 = v46;
      long long v47 = v1[1];
      long long v59 = *v1;
      long long v60 = v47;
      char v4 = Processor.atSimpleBoundary(_:_:)((a1 & 0x20000000000000) != 0, (_StringProcessing::MatchingOptions::SemanticLevel)((a1 & 0x10000000000000) != 0));
      return v4 & 1;
    case 12:
      if ((a1 & 0x40000000000000) != 0)
      {
        long long v30 = v1[11];
        long long v69 = v1[10];
        long long v70 = v30;
        long long v71 = v1[12];
        long long v31 = v1[7];
        long long v65 = v1[6];
        long long v66 = v31;
        long long v32 = v1[9];
        long long v67 = v1[8];
        long long v68 = v32;
        long long v33 = v1[3];
        long long v61 = v1[2];
        long long v62 = v33;
        long long v34 = v1[5];
        long long v63 = v1[4];
        long long v64 = v34;
        long long v35 = v1[1];
        long long v59 = *v1;
        long long v60 = v35;
        char v4 = !Processor.atSimpleBoundary(_:_:)((a1 & 0x20000000000000) != 0, (_StringProcessing::MatchingOptions::SemanticLevel)((a1 & 0x10000000000000) != 0));
      }
      else
      {
        unint64_t v5 = *((void *)v1 + 8);
        unint64_t v6 = (uint64_t *)(v1 + 11);
        uint64_t v7 = (uint64_t)v1 + 184;
        unint64_t v9 = *((void *)v1 + 2);
        unint64_t v8 = *((void *)v1 + 3);
        swift_bridgeObjectRetain();
        LOBYTE(v8) = String.isOnWordBoundary(at:in:using:_:)(v5, v9, v8, v6, v7);
        swift_bridgeObjectRelease();
        char v4 = v8 ^ 1;
      }
      return v4 & 1;
    default:
LABEL_13:
      unint64_t v10 = *((void *)v1 + 8);
      uint64_t v11 = *((void *)v1 + 2);
      goto LABEL_14;
  }
}

Swift::Bool __swiftcall Processor.atSimpleBoundary(_:_:)(Swift::Bool a1, _StringProcessing::MatchingOptions::SemanticLevel a2)
{
  unint64_t v3 = v2[2] >> 14;
  unint64_t v4 = v2[3] >> 14;
  if (v3 == v4)
  {
    char v5 = 0;
    return v5 & 1;
  }
  char v8 = a2 & 1;
  unint64_t v9 = v2[8];
  if (v9 >> 14 != v3)
  {
    unint64_t v13 = *v2;
    if ((a2 & 1) == 0)
    {
      unint64_t v14 = String.index(before:)();
      goto LABEL_25;
    }
    unint64_t v15 = v2[1];
    unint64_t v16 = _StringGuts.validateInclusiveScalarIndex(_:)(v2[8], *v2, v15);
    if (v16 < 0x4000)
    {
      __break(1u);
    }
    else if ((v15 & 0x1000000000000000) == 0)
    {
      if ((v15 & 0x2000000000000000) != 0)
      {
        v28[0] = v13;
        v28[1] = v15 & 0xFFFFFFFFFFFFFFLL;
        long long v22 = (char *)v28 + (v16 >> 16);
        if ((*(v22 - 1) & 0xC0) == 0x80)
        {
          uint64_t v19 = 0;
          long long v23 = v22 - 2;
          do
            int v24 = v23[v19--] & 0xC0;
          while (v24 == 128);
          goto LABEL_22;
        }
      }
      else
      {
        if ((v13 & 0x1000000000000000) != 0)
        {
          uint64_t v17 = (v15 & 0xFFFFFFFFFFFFFFFLL) + 32;
        }
        else
        {
          unint64_t v27 = v16;
          uint64_t v17 = _StringObject.sharedUTF8.getter();
          unint64_t v16 = v27;
        }
        unint64_t v18 = (v16 >> 16) + v17;
        if ((*(unsigned char *)(v18 - 1) & 0xC0) == 0x80)
        {
          uint64_t v19 = 0;
          unint64_t v20 = v18 - 2;
          do
            int v21 = *(unsigned char *)(v20 + v19--) & 0xC0;
          while (v21 == 128);
LABEL_22:
          uint64_t v25 = 1 - v19;
LABEL_24:
          unint64_t v14 = (v16 - (v25 << 16)) & 0xFFFFFFFFFFFF0000 | 5;
          goto LABEL_25;
        }
      }
      uint64_t v25 = 1;
      goto LABEL_24;
    }
    unint64_t v14 = String.UnicodeScalarView._foreignIndex(before:)();
LABEL_25:
    Swift::Bool v26 = a1;
    char v5 = matchesWord #1 (at:) in Processor.atSimpleBoundary(_:_:)(v14, v8, v2, a1);
    if (v9 >> 14 != v4) {
      v5 ^= matchesWord #1 (at:) in Processor.atSimpleBoundary(_:_:)(v9, v8, v2, v26);
    }
    return v5 & 1;
  }
  Swift::Bool v10 = a1;
  unint64_t v11 = v2[8];
  char v12 = a2 & 1;

  return matchesWord #1 (at:) in Processor.atSimpleBoundary(_:_:)(v11, v12, v2, v10);
}

BOOL String.isOnWordBoundary(at:in:using:_:)(unint64_t a1, unint64_t a2, unint64_t a3, uint64_t *a4, uint64_t a5)
{
  unint64_t v5 = a1 >> 14;
  unint64_t v6 = a2 >> 14;
  if (a1 >> 14 == a2 >> 14) {
    return 1;
  }
  unint64_t v7 = a3 >> 14;
  if (v5 == a3 >> 14) {
    return 1;
  }
  unint64_t v10 = a2;
  if (*a4)
  {
    if (specialized Set.contains(_:)(a1, *a4)) {
      return 1;
    }
  }
  if ((*(unsigned char *)(a5 + 8) & 1) == 0)
  {
    unint64_t v10 = *(void *)a5;
    unint64_t v6 = *(void *)a5 >> 14;
    if (v5 < v6) {
      return 0;
    }
  }
  swift_bridgeObjectRelease();
  uint64_t v13 = MEMORY[0x263F8EE88];
  uint64_t v16 = MEMORY[0x263F8EE88];
  if (v6 < v7 && v5 >= v6)
  {
    do
    {
      specialized Set._Variant.insert(_:)(&v15, v10);
      unint64_t v10 = String._wordIndex(after:)();
    }
    while (v10 >> 14 < v7 && v5 >= v10 >> 14);
    uint64_t v13 = v16;
  }
  *a4 = v13;
  *(void *)a5 = v10;
  *(unsigned char *)(a5 + 8) = 0;

  return specialized Set.contains(_:)(a1, v13);
}

unint64_t String._thoroughMatchAnyNonNewline(at:limitedBy:isScalarSemantics:)(unint64_t a1, unint64_t a2, char a3, unint64_t a4, unint64_t a5)
{
  unint64_t v8 = a1 >> 14;
  unint64_t v9 = a2 >> 14;
  if (a3)
  {
    if (v8 < v9)
    {
      _StringGuts.validateScalarIndex(_:)(a1, a4, a5);
      if ((a5 & 0x1000000000000000) != 0)
      {
        int v17 = _StringGuts.foreignErrorCorrectedScalar(startingAt:)();
      }
      else
      {
        if ((a5 & 0x2000000000000000) != 0)
        {
          unint64_t v27 = a4;
          uint64_t v28 = a5 & 0xFFFFFFFFFFFFFFLL;
        }
        else if ((a4 & 0x1000000000000000) == 0)
        {
          _StringObject.sharedUTF8.getter();
        }
        int v17 = _decodeScalar(_:startingAt:)();
      }
      if ((v17 - 14) <= 0xFFFFFFFB)
      {
        unint64_t v13 = 0;
        if ((v17 - 8232) >= 2 && v17 != 133)
        {
          unint64_t v18 = _StringGuts.validateScalarIndex(_:)(a1, a4, a5);
          if ((a5 & 0x1000000000000000) != 0)
          {
            return String.UnicodeScalarView._foreignIndex(after:)();
          }
          else
          {
            unint64_t v19 = v18 >> 16;
            if ((a5 & 0x2000000000000000) != 0)
            {
              unint64_t v27 = a4;
              uint64_t v28 = a5 & 0xFFFFFFFFFFFFFFLL;
              int v21 = *((unsigned __int8 *)&v27 + v19);
            }
            else
            {
              if ((a4 & 0x1000000000000000) != 0) {
                uint64_t v20 = (a5 & 0xFFFFFFFFFFFFFFFLL) + 32;
              }
              else {
                uint64_t v20 = _StringObject.sharedUTF8.getter();
              }
              int v21 = *(unsigned __int8 *)(v20 + v19);
            }
            int v25 = (char)v21;
            unsigned int v26 = __clz(v21 ^ 0xFF) - 24;
            if (v25 >= 0) {
              LOBYTE(v26) = 1;
            }
            return ((v19 + v26) << 16) | 5;
          }
        }
        return v13;
      }
    }
    return 0;
  }
  if (v8 >= v9) {
    return 0;
  }
  unint64_t v10 = String.index(after:)();
  if (v9 >= v10 >> 14)
  {
    unint64_t v13 = v10;
    unint64_t v14 = String.subscript.getter();
    unint64_t v16 = v15;
  }
  else
  {
    uint64_t v11 = String.subscript.getter();
    if ((v11 ^ v12) < 0x4000)
    {
      swift_bridgeObjectRelease();
      return 0;
    }
    unint64_t v13 = v12;
    unint64_t v14 = Substring.subscript.getter();
    unint64_t v16 = v22;
    swift_bridgeObjectRelease();
  }
  unint64_t result = specialized Collection.first.getter(v14, v16);
  if ((result & 0x100000000) == 0)
  {
    int v24 = result;
    swift_bridgeObjectRelease();
    if ((v24 - 14) <= 0xFFFFFFFB && (v24 - 8232) >= 2 && v24 != 133) {
      return v13;
    }
    return 0;
  }
  __break(1u);
  return result;
}

uint64_t String._quickASCIICharacter(at:limitedBy:)(unint64_t a1, unint64_t a2, unint64_t a3, unint64_t a4)
{
  unint64_t v4 = a2 >> 14;
  if (a2 >> 14 == a1 >> 14) {
    return 0;
  }
  unint64_t v7 = a1;
  uint64_t v8 = (a3 >> 59) & 1;
  if ((a4 & 0x1000000000000000) == 0) {
    LOBYTE(v8) = 1;
  }
  unint64_t v9 = a1 & 0xC;
  uint64_t v10 = 4 << v8;
  if (v9 == 4 << v8) {
    a1 = _StringGuts._slowEnsureMatchingEncoding(_:)(a1, a3, a4);
  }
  if ((a4 & 0x2000000000000000) != 0) {
    unint64_t v11 = HIBYTE(a4) & 0xF;
  }
  else {
    unint64_t v11 = a3 & 0xFFFFFFFFFFFFLL;
  }
  unint64_t v12 = a1 >> 16;
  if (a1 >> 16 >= v11)
  {
    __break(1u);
LABEL_22:
    unsigned __int8 v14 = String.UTF8View._foreignSubscript(position:)();
    if ((v14 & 0x80) != 0) {
      return 0;
    }
    goto LABEL_17;
  }
  if ((a4 & 0x1000000000000000) != 0) {
    goto LABEL_22;
  }
  if ((a4 & 0x2000000000000000) != 0)
  {
    unint64_t v25 = a3;
    uint64_t v26 = a4 & 0xFFFFFFFFFFFFFFLL;
    unsigned __int8 v14 = *((unsigned char *)&v25 + v12);
    if ((v14 & 0x80) != 0) {
      return 0;
    }
  }
  else
  {
    if ((a3 & 0x1000000000000000) != 0) {
      uint64_t v13 = (a4 & 0xFFFFFFFFFFFFFFFLL) + 32;
    }
    else {
      uint64_t v13 = _StringObject.sharedUTF8.getter();
    }
    unsigned __int8 v14 = *(unsigned char *)(v13 + v12);
    if ((v14 & 0x80) != 0) {
      return 0;
    }
  }
LABEL_17:
  if (v9 == v10)
  {
    unint64_t v7 = _StringGuts._slowEnsureMatchingEncoding(_:)(v7, a3, a4);
    if ((a4 & 0x1000000000000000) == 0)
    {
LABEL_19:
      unint64_t v7 = (v7 & 0xFFFFFFFFFFFF0000) + 65540;
      if (v4 == v7 >> 14) {
        return v14;
      }
LABEL_27:
      unint64_t v9 = v7 & 0xC;
      unint64_t v15 = v7;
      if (v9 != v10) {
        goto LABEL_28;
      }
      goto LABEL_44;
    }
  }
  else if ((a4 & 0x1000000000000000) == 0)
  {
    goto LABEL_19;
  }
  if (v11 > v7 >> 16)
  {
    unint64_t v7 = String.UTF8View._foreignIndex(after:)();
    if (v4 == v7 >> 14) {
      return v14;
    }
    goto LABEL_27;
  }
  __break(1u);
LABEL_44:
  unint64_t v15 = _StringGuts._slowEnsureMatchingEncoding(_:)(v7, a3, a4);
LABEL_28:
  unint64_t v16 = v15 >> 16;
  if (v15 >> 16 >= v11)
  {
    __break(1u);
    goto LABEL_46;
  }
  if ((a4 & 0x1000000000000000) != 0)
  {
    unsigned __int8 v18 = String.UTF8View._foreignSubscript(position:)();
  }
  else
  {
    if ((a4 & 0x2000000000000000) == 0)
    {
      if ((a3 & 0x1000000000000000) != 0)
      {
        uint64_t v17 = (a4 & 0xFFFFFFFFFFFFFFFLL) + 32;
LABEL_33:
        unsigned __int8 v18 = *(unsigned char *)(v17 + v16);
        goto LABEL_36;
      }
LABEL_46:
      unint64_t v24 = v15 >> 16;
      uint64_t v17 = _StringObject.sharedUTF8.getter();
      unint64_t v16 = v24;
      goto LABEL_33;
    }
    unint64_t v25 = a3;
    uint64_t v26 = a4 & 0xFFFFFFFFFFFFFFLL;
    unsigned __int8 v18 = *((unsigned char *)&v25 + v16);
  }
LABEL_36:
  if (v18 >= 0xCCu) {
    return 0;
  }
  if (v14 == 13 && v18 == 10)
  {
    if (v9 == v10)
    {
      unint64_t v7 = _StringGuts._slowEnsureMatchingEncoding(_:)(v7, a3, a4);
      if ((a4 & 0x1000000000000000) == 0) {
        goto LABEL_41;
      }
    }
    else if ((a4 & 0x1000000000000000) == 0)
    {
LABEL_41:
      unint64_t v7 = (v7 & 0xFFFFFFFFFFFF0000) + 65540;
      goto LABEL_50;
    }
    if (v11 <= v7 >> 16)
    {
      __break(1u);
      goto LABEL_65;
    }
    unint64_t v7 = String.UTF8View._foreignIndex(after:)();
LABEL_50:
    if (v4 == v7 >> 14) {
      return 13;
    }
    unint64_t v19 = v7;
    if ((v7 & 0xC) != v10)
    {
LABEL_52:
      unint64_t v20 = v19 >> 16;
      if (v19 >> 16 < v11)
      {
        if ((a4 & 0x1000000000000000) != 0)
        {
          unsigned __int8 v22 = String.UTF8View._foreignSubscript(position:)();
        }
        else
        {
          if ((a4 & 0x2000000000000000) == 0)
          {
            if ((a3 & 0x1000000000000000) != 0)
            {
              uint64_t v21 = (a4 & 0xFFFFFFFFFFFFFFFLL) + 32;
LABEL_57:
              unsigned __int8 v22 = *(unsigned char *)(v21 + v20);
              goto LABEL_60;
            }
LABEL_67:
            uint64_t v21 = _StringObject.sharedUTF8.getter();
            goto LABEL_57;
          }
          unint64_t v25 = a3;
          uint64_t v26 = a4 & 0xFFFFFFFFFFFFFFLL;
          unsigned __int8 v22 = *((unsigned char *)&v25 + v20);
        }
LABEL_60:
        if (v22 < 0xCCu) {
          return 13;
        }
        return 0;
      }
      __break(1u);
      goto LABEL_67;
    }
LABEL_65:
    unint64_t v19 = _StringGuts._slowEnsureMatchingEncoding(_:)(v7, a3, a4);
    goto LABEL_52;
  }
  return v14;
}

uint64_t String._thoroughMatchBuiltinCC(_:at:limitedBy:isInverted:isStrictASCII:isScalarSemantics:)(char a1, unint64_t a2, unint64_t a3, int a4, BOOL a5, int a6, unint64_t a7, unint64_t a8)
{
  int v77 = a4;
  int v78 = a6;
  BOOL v76 = a5;
  uint64_t v13 = type metadata accessor for Unicode.GeneralCategory();
  uint64_t v73 = *(void *)(v13 - 8);
  uint64_t v74 = v13;
  uint64_t v14 = MEMORY[0x270FA5388](v13);
  unint64_t v72 = (char *)&v66 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v14);
  long long v71 = (char *)&v66 - v16;
  uint64_t v17 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Unicode.NumericType?);
  MEMORY[0x270FA5388](v17 - 8);
  unint64_t v75 = (char *)&v66 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v19 = type metadata accessor for Unicode.Scalar.Properties();
  uint64_t v20 = MEMORY[0x270FA5388](v19);
  unsigned __int8 v22 = (char *)&v66 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v23 = MEMORY[0x270FA5388](v20);
  unint64_t v25 = (char *)&v66 - v24;
  uint64_t v26 = MEMORY[0x270FA5388](v23);
  uint64_t v28 = (char *)&v66 - v27;
  uint64_t v29 = MEMORY[0x270FA5388](v26);
  long long v32 = (char *)&v66 - v31;
  unint64_t v33 = a3 >> 14;
  if (a3 >> 14 <= a2 >> 14) {
    return 0;
  }
  uint64_t v66 = v30;
  uint64_t v67 = v29;
  unint64_t v34 = String.index(after:)();
  if (v33 >= v34 >> 14)
  {
    unint64_t v70 = v34;
    unint64_t v68 = String.subscript.getter();
    unint64_t v69 = v37;
  }
  else
  {
    uint64_t v35 = String.subscript.getter();
    if ((v35 ^ v36) < 0x4000)
    {
      swift_bridgeObjectRelease();
      return 0;
    }
    unint64_t v70 = v36;
    unint64_t v68 = Substring.subscript.getter();
    unint64_t v69 = v38;
    swift_bridgeObjectRelease();
  }
  _StringGuts.validateScalarIndex(_:)(a2, a7, a8);
  if ((a8 & 0x1000000000000000) != 0)
  {
    unsigned int v39 = _StringGuts.foreignErrorCorrectedScalar(startingAt:)();
  }
  else
  {
    if ((a8 & 0x2000000000000000) != 0)
    {
      unint64_t v79 = a7;
      uint64_t v80 = a8 & 0xFFFFFFFFFFFFFFLL;
    }
    else if ((a7 & 0x1000000000000000) == 0)
    {
      _StringObject.sharedUTF8.getter();
    }
    unsigned int v39 = _decodeScalar(_:startingAt:)();
  }
  char v40 = a1;
  if (!v76)
  {
    unsigned int v41 = v39;
    if ((v78 & 1) == 0)
    {
      BOOL v76 = 1;
      int v42 = 0;
LABEL_32:
      switch(v42)
      {
        case 2:
          if (!v42)
          {
            char isHorizontal = Character.isNumber.getter();
            goto LABEL_73;
          }
          swift_bridgeObjectRelease();
          Unicode.Scalar.properties.getter();
          uint64_t v49 = (uint64_t)v75;
          Unicode.Scalar.Properties.numericType.getter();
          (*(void (**)(char *, uint64_t))(v66 + 8))(v32, v67);
          uint64_t v50 = type metadata accessor for Unicode.NumericType();
          int v51 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v50 - 8) + 48))(v49, 1, v50);
          outlined destroy of (range: Range<String.Index>, value: Any?)?(v49, &demangling cache variable for type metadata for Unicode.NumericType?);
          char v52 = v76;
          if (v51 == 1) {
            char v52 = 0;
          }
          goto LABEL_75;
        case 3:
          if (!v42)
          {
            char isHorizontal = Character._isHorizontalWhitespace.getter(v68, v69);
            goto LABEL_73;
          }
          swift_bridgeObjectRelease();
          if (v41 == 9) {
            goto LABEL_70;
          }
          Unicode.Scalar.properties.getter();
          unsigned int v53 = v71;
          Unicode.Scalar.Properties.generalCategory.getter();
          (*(void (**)(char *, uint64_t))(v66 + 8))(v28, v67);
          unint64_t v55 = v72;
          uint64_t v54 = v73;
          uint64_t v56 = v74;
          (*(void (**)(char *, void, uint64_t))(v73 + 104))(v72, *MEMORY[0x263F8EAD8], v74);
          char v57 = MEMORY[0x21050F860](v53, v55);
          int v58 = *(void (**)(char *, uint64_t))(v54 + 8);
          v58(v55, v56);
          v58(v53, v56);
          goto LABEL_74;
        case 4:
          if (!v42) {
            goto LABEL_67;
          }
          swift_bridgeObjectRelease();
          if (v41 - 14 <= 0xFFFFFFFB && v41 - 8232 >= 2 && v41 != 133)
          {
            uint64_t result = v70;
            if ((v77 & 1) == 0) {
              return 0;
            }
            return result;
          }
          uint64_t result = v70;
          if (!v76)
          {
            if ((v77 & 1) == 0) {
              return 0;
            }
            return result;
          }
          if (v41 != 13 || v33 <= v70 >> 14)
          {
            if (v77) {
              return 0;
            }
            return result;
          }
          _StringGuts.validateScalarIndex(_:)(v70, a7, a8);
          if ((a8 & 0x1000000000000000) != 0)
          {
            if (_StringGuts.foreignErrorCorrectedScalar(startingAt:)() != 10) {
              goto LABEL_34;
            }
            _StringGuts.validateScalarIndex(_:)(v70, a7, a8);
            uint64_t result = String.UnicodeScalarView._foreignIndex(after:)();
            if (v77) {
              return 0;
            }
          }
          else
          {
            if ((a8 & 0x2000000000000000) != 0)
            {
              unint64_t v79 = a7;
              uint64_t v80 = a8 & 0xFFFFFFFFFFFFFFLL;
              if (_decodeScalar(_:startingAt:)() != 10) {
                goto LABEL_34;
              }
              unint64_t v59 = _StringGuts.validateScalarIndex(_:)(v70, a7, a8) >> 16;
              unint64_t v79 = a7;
              uint64_t v80 = a8 & 0xFFFFFFFFFFFFFFLL;
              int v60 = *((unsigned __int8 *)&v79 + v59);
            }
            else
            {
              if ((a7 & 0x1000000000000000) == 0) {
                _StringObject.sharedUTF8.getter();
              }
              if (_decodeScalar(_:startingAt:)() != 10) {
                goto LABEL_34;
              }
              unint64_t v59 = _StringGuts.validateScalarIndex(_:)(v70, a7, a8) >> 16;
              if ((a7 & 0x1000000000000000) != 0) {
                int v60 = *(unsigned __int8 *)((a8 & 0xFFFFFFFFFFFFFFFLL) + 32 + v59);
              }
              else {
                int v60 = *(unsigned __int8 *)(_StringObject.sharedUTF8.getter() + v59);
              }
            }
            int v64 = (char)v60;
            unsigned int v65 = __clz(v60 ^ 0xFF) - 24;
            if (v64 >= 0) {
              LOBYTE(v65) = 1;
            }
            uint64_t result = ((v59 + v65) << 16) | 5;
            if (v77) {
              return 0;
            }
          }
          return result;
        case 5:
          if (!v42)
          {
LABEL_67:
            char isHorizontal = Character._isNewline.getter(v68, v69);
            goto LABEL_73;
          }
          swift_bridgeObjectRelease();
          if (v41 - 14 > 0xFFFFFFFB)
          {
LABEL_70:
            char v52 = v76;
            char v61 = v77;
            goto LABEL_76;
          }
          char v52 = v76;
          char v61 = v77;
          uint64_t result = v70;
          if (v41 - 8232 < 2 || v41 == 133) {
            goto LABEL_77;
          }
          if ((v77 & 1) == 0) {
            return 0;
          }
          return result;
        case 6:
          if (v42)
          {
            swift_bridgeObjectRelease();
            Unicode.Scalar.properties.getter();
            char v57 = Unicode.Scalar.Properties.isWhitespace.getter();
            (*(void (**)(char *, uint64_t))(v66 + 8))(v25, v67);
            goto LABEL_74;
          }
          char isHorizontal = Character.isWhitespace.getter();
          goto LABEL_73;
        case 7:
          if (v42)
          {
            swift_bridgeObjectRelease();
            Unicode.Scalar.properties.getter();
            char v62 = Unicode.Scalar.Properties.isAlphabetic.getter();
            (*(void (**)(char *, uint64_t))(v66 + 8))(v22, v67);
            char v52 = v62 & v76;
          }
          else
          {
            char isHorizontal = Character.isWordCharacter.getter();
LABEL_73:
            char v57 = isHorizontal;
            swift_bridgeObjectRelease();
LABEL_74:
            char v52 = v57 & v76;
          }
LABEL_75:
          char v61 = v77;
LABEL_76:
          uint64_t result = v70;
LABEL_77:
          if (v61)
          {
            if (v52) {
              return 0;
            }
          }
          else if ((v52 & 1) == 0)
          {
            return 0;
          }
          break;
        default:
          goto LABEL_33;
      }
      return result;
    }
    goto LABEL_19;
  }
  unsigned int v41 = v39;
  if (v39 <= 0x7F && (v78 & 1) != 0)
  {
LABEL_19:
    BOOL v76 = 1;
    goto LABEL_20;
  }
  BOOL v76 = (Character.asciiValue.getter() & 0x100) == 0;
  if ((v78 & 1) == 0)
  {
    int v42 = 0;
    goto LABEL_32;
  }
LABEL_20:
  if (v40 != 1)
  {
    unint64_t v43 = _StringGuts.validateScalarIndex(_:)(a2, a7, a8);
    if ((a8 & 0x1000000000000000) != 0)
    {
      unint64_t v70 = String.UnicodeScalarView._foreignIndex(after:)();
    }
    else
    {
      unint64_t v44 = v43 >> 16;
      if ((a8 & 0x2000000000000000) != 0)
      {
        unint64_t v79 = a7;
        uint64_t v80 = a8 & 0xFFFFFFFFFFFFFFLL;
        int v45 = *((unsigned __int8 *)&v79 + v44);
      }
      else if ((a7 & 0x1000000000000000) != 0)
      {
        int v45 = *(unsigned __int8 *)((a8 & 0xFFFFFFFFFFFFFFFLL) + 0x20 + (v43 >> 16));
      }
      else
      {
        int v45 = *(unsigned __int8 *)(_StringObject.sharedUTF8.getter() + v44);
      }
      int v46 = (char)v45;
      unsigned int v47 = __clz(v45 ^ 0xFF) - 24;
      if (v46 >= 0) {
        LOBYTE(v47) = 1;
      }
      unint64_t v70 = ((v44 + v47) << 16) | 5;
    }
    int v42 = 1;
    goto LABEL_32;
  }
LABEL_33:
  swift_bridgeObjectRelease();
LABEL_34:
  uint64_t result = v70;
  if (v77) {
    return 0;
  }
  return result;
}

unint64_t String._quickMatch(_:at:limitedBy:isScalarSemantics:)(char a1, unint64_t a2, unint64_t a3, char a4, unint64_t a5, unint64_t a6)
{
  unsigned __int8 v10 = String._quickASCIICharacter(at:limitedBy:)(a2, a3, a5, a6);
  if (v12 == 2) {
    return 0;
  }
  unsigned __int8 v14 = v10;
  unint64_t result = v11;
  switch(a1)
  {
    case 4:
    case 5:
      if (v14 - 10 > 3 || (v12 & 1) == 0 || (a4 & 1) == 0 || a1 != 5) {
        return result;
      }
      uint64_t v15 = (a5 >> 59) & 1;
      if ((a6 & 0x1000000000000000) == 0) {
        LOBYTE(v15) = 1;
      }
      if ((v11 & 0xC) != 4 << v15)
      {
        if (v11 >= 0x4000) {
          goto LABEL_12;
        }
LABEL_29:
        __break(1u);
        goto LABEL_30;
      }
      unint64_t result = _StringGuts._slowEnsureMatchingEncoding(_:)(v11, a5, a6);
      if (result < 0x4000) {
        goto LABEL_29;
      }
LABEL_12:
      if ((a6 & 0x1000000000000000) == 0) {
        return (result & 0xFFFFFFFFFFFF0000) - 65532;
      }
      unint64_t v16 = HIBYTE(a6) & 0xF;
      if ((a6 & 0x2000000000000000) == 0) {
        unint64_t v16 = a5 & 0xFFFFFFFFFFFFLL;
      }
      if (v16 < result >> 16)
      {
        __break(1u);
        return result;
      }
      return String.UTF8View._foreignIndex(before:)();
    case 6:
      if (v14 - 9 >= 5 && v14 != 32 || (v12 & 1) == 0 || (a4 & 1) == 0) {
        return result;
      }
      uint64_t v17 = (a5 >> 59) & 1;
      if ((a6 & 0x1000000000000000) == 0) {
        LOBYTE(v17) = 1;
      }
      if ((v11 & 0xC) == 4 << v17)
      {
LABEL_30:
        unint64_t result = _StringGuts._slowEnsureMatchingEncoding(_:)(result, a5, a6);
        if (result >= 0x4000) {
          goto LABEL_24;
        }
      }
      else if (v11 >= 0x4000)
      {
LABEL_24:
        if ((a6 & 0x1000000000000000) == 0) {
          return (result & 0xFFFFFFFFFFFF0000) - 65532;
        }
LABEL_32:
        unint64_t v18 = HIBYTE(a6) & 0xF;
        if ((a6 & 0x2000000000000000) == 0) {
          unint64_t v18 = a5 & 0xFFFFFFFFFFFFLL;
        }
        if (v18 < result >> 16)
        {
          __break(1u);
          JUMPOUT(0x209F51C84);
        }
        return String.UTF8View._foreignIndex(before:)();
      }
      __break(1u);
      goto LABEL_32;
    default:
      return result;
  }
}

uint64_t Processor.runQuantify(_:)(unint64_t a1)
{
  unint64_t v2 = v1;
  unint64_t v441 = a1;
  uint64_t v4 = type metadata accessor for AST.Quantification.Kind();
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v6 = MEMORY[0x270FA5388](v4);
  unint64_t v8 = (unint64_t)&v421 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v6);
  unsigned __int8 v10 = (char *)&v421 - v9;
  unint64_t v11 = (a1 >> 27);
  unint64_t v12 = (a1 >> 18) & 0x1FF;
  BOOL v38 = v12 == 1;
  uint64_t v13 = v12 == 1;
  uint64_t v14 = v11 + (v12 >> 1);
  if (v38) {
    uint64_t v14 = -1;
  }
  unint64_t v440 = v14;
  uint64_t v15 = (a1 >> 16) & 3;
  unint64_t v16 = (unsigned int *)MEMORY[0x263F8F950];
  if (v15)
  {
    if (v15 == 1)
    {
      uint64_t v17 = (unsigned int *)MEMORY[0x263F8F958];
    }
    else
    {
      if (v15 != 2) {
        goto LABEL_1463;
      }
      uint64_t v17 = (unsigned int *)MEMORY[0x263F8F948];
    }
    uint64_t v18 = *v17;
  }
  else
  {
    uint64_t v18 = *MEMORY[0x263F8F950];
  }
  uint64_t v19 = *(void (**)(char *, uint64_t, uint64_t))(v5 + 104);
  unint64_t v20 = (v5 + 104) & 0xFFFFFFFFFFFFLL | 0xB2E4000000000000;
  v19((char *)&v421 - v9, v18, v4);
  v19((char *)v8, *v16, v4);
  lazy protocol witness table accessor for type AST.Quantification.Kind and conformance AST.Quantification.Kind(&lazy protocol witness table cache variable for type AST.Quantification.Kind and conformance AST.Quantification.Kind, MEMORY[0x263F8F960]);
  dispatch thunk of RawRepresentable.rawValue.getter();
  uint64_t v21 = *(void *)(v5 + 8);
  ((void (*)(char *, uint64_t))v21)(v10, v4);
  dispatch thunk of RawRepresentable.rawValue.getter();
  ((void (*)(unint64_t, uint64_t))v21)(v8, v4);
  unint64_t v22 = v447;
  uint64_t v23 = v444;
  if (v446 == v443 && v447 == v444)
  {
    int v435 = 1;
    uint64_t v23 = v447;
  }
  else
  {
    int v435 = _stringCompareWithSmolCheck(_:_:expecting:)();
  }
  unint64_t v24 = v441;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if (v11)
  {
    int v25 = 0;
    int v26 = 0;
    if (v11 == 1) {
      goto LABEL_20;
    }
  }
  else
  {
    int v25 = v13;
  }
  uint64_t v13 = 0;
  int v26 = v25;
LABEL_20:
  unint64_t v442 = v24 & 0x4000000000;
  switch((v24 >> 35) & 7)
  {
    case 0uLL:
      unint64_t v27 = *(void *)v2;
      unint64_t v8 = *(void *)(v2 + 8);
      v436 = (void *)v2;
      unint64_t v437 = v27;
      uint64_t v28 = *(void *)(v2 + 96);
      unint64_t v29 = *(void *)(v28 + 16);
      if (!v26)
      {
        if (v13)
        {
          if ((unsigned __int16)v24 >= v29) {
            goto LABEL_1407;
          }
          uint64_t v21 = 0;
          uint64_t v132 = v28 + 24 * (unsigned __int16)v24;
          int v133 = *(unsigned __int8 *)(v132 + 32);
          unint64_t v430 = *(void *)(v2 + 40);
          unint64_t v24 = v430 >> 14;
          uint64_t v13 = v437;
          unint64_t v134 = *(void *)(v132 + 40);
          unint64_t v432 = *(void *)(v132 + 48);
          char v135 = (v8 & 0x1000000000000000) == 0 || (v437 & 0x800000000000000) != 0;
          uint64_t v136 = 4 << v135;
          unint64_t v137 = *(void *)(v2 + 64);
          uint64_t v138 = HIBYTE(v8) & 0xF;
          unint64_t v429 = v138;
          unint64_t v428 = v437 & 0xFFFFFFFFFFFFLL;
          if ((v8 & 0x2000000000000000) == 0) {
            uint64_t v138 = v437 & 0xFFFFFFFFFFFFLL;
          }
          unint64_t v441 = v138;
          unint64_t v433 = (v8 & 0xFFFFFFFFFFFFFFFLL) + 32;
          uint64_t v434 = v8 & 0xFFFFFFFFFFFFFFLL;
          unint64_t v431 = v134;
          LODWORD(v438) = v133;
          LODWORD(v427) = v133 ^ (v134 >> 13) & 1;
          unint64_t v426 = (unint64_t)v445;
          uint64_t v23 = v137;
          unint64_t v439 = v137;
          unint64_t v440 = v136;
          while (1)
          {
            unint64_t v2 = v137 >> 14;
            if (v137 >> 14 == v24) {
              goto LABEL_331;
            }
            unint64_t v20 = v137 & 0xC;
            unint64_t v142 = v137;
            if (v20 == v136)
            {
              unint64_t v142 = _StringGuts._slowEnsureMatchingEncoding(_:)(v137, v13, v8);
              uint64_t v136 = v440;
            }
            unint64_t v22 = v142 >> 16;
            if (v142 >> 16 >= v441)
            {
              __break(1u);
LABEL_1364:
              __break(1u);
LABEL_1365:
              __break(1u);
LABEL_1366:
              __break(1u);
LABEL_1367:
              __break(1u);
LABEL_1368:
              __break(1u);
LABEL_1369:
              __break(1u);
LABEL_1370:
              __break(1u);
LABEL_1371:
              __break(1u);
LABEL_1372:
              __break(1u);
LABEL_1373:
              __break(1u);
LABEL_1374:
              __break(1u);
LABEL_1375:
              __break(1u);
LABEL_1376:
              __break(1u);
LABEL_1377:
              __break(1u);
LABEL_1378:
              __break(1u);
LABEL_1379:
              __break(1u);
LABEL_1380:
              __break(1u);
              goto LABEL_1381;
            }
            if ((v8 & 0x1000000000000000) != 0)
            {
              uint64_t v165 = String.UTF8View._foreignSubscript(position:)();
              uint64_t v136 = v440;
              unint64_t v22 = v165;
              if ((v165 & 0x80) != 0) {
                goto LABEL_331;
              }
            }
            else if ((v8 & 0x2000000000000000) != 0)
            {
              uint64_t v446 = v13;
              unint64_t v447 = v434;
              unint64_t v22 = *((unsigned __int8 *)&v446 + v22);
              if ((v22 & 0x80) != 0) {
                goto LABEL_331;
              }
            }
            else
            {
              uint64_t v143 = v433;
              if ((v13 & 0x1000000000000000) == 0)
              {
                uint64_t v143 = _StringObject.sharedUTF8.getter();
                uint64_t v136 = v440;
              }
              unint64_t v22 = *(unsigned __int8 *)(v143 + v22);
              if ((v22 & 0x80) != 0) {
                goto LABEL_331;
              }
            }
            unint64_t v149 = v137;
            if (v20 == v136)
            {
              unint64_t v149 = _StringGuts._slowEnsureMatchingEncoding(_:)(v137, v13, v8);
              uint64_t v136 = v440;
              if ((v8 & 0x1000000000000000) == 0)
              {
LABEL_363:
                unint64_t v20 = (v149 & 0xFFFFFFFFFFFF0000) + 65540;
                if (v24 == v20 >> 14) {
                  goto LABEL_426;
                }
                goto LABEL_428;
              }
            }
            else if ((v8 & 0x1000000000000000) == 0)
            {
              goto LABEL_363;
            }
            if (v441 <= v149 >> 16) {
              goto LABEL_1388;
            }
            unint64_t v20 = String.UTF8View._foreignIndex(after:)();
            uint64_t v136 = v440;
            if (v24 == v20 >> 14)
            {
LABEL_426:
              if (v22 >= 0x40u) {
                unint64_t v166 = v432;
              }
              else {
                unint64_t v166 = v431;
              }
              if (((v438 ^ (v166 >> v22)) & 1) == 0) {
                goto LABEL_1301;
              }
              goto LABEL_324;
            }
LABEL_428:
            unint64_t v167 = v20;
            if ((v20 & 0xC) == v136)
            {
              unint64_t v167 = _StringGuts._slowEnsureMatchingEncoding(_:)(v20, v13, v8);
              uint64_t v136 = v440;
            }
            unint64_t v168 = v167 >> 16;
            if (v167 >> 16 >= v441) {
              goto LABEL_1389;
            }
            if ((v8 & 0x1000000000000000) != 0)
            {
              uint64_t v13 = v437;
              unsigned __int8 v170 = String.UTF8View._foreignSubscript(position:)();
              uint64_t v136 = v440;
            }
            else if ((v8 & 0x2000000000000000) != 0)
            {
              uint64_t v446 = v437;
              unint64_t v447 = v434;
              unsigned __int8 v170 = *((unsigned char *)&v446 + v168);
              uint64_t v13 = v437;
            }
            else
            {
              uint64_t v169 = v433;
              if ((v437 & 0x1000000000000000) == 0)
              {
                uint64_t v169 = _StringObject.sharedUTF8.getter();
                uint64_t v136 = v440;
              }
              unsigned __int8 v170 = *(unsigned char *)(v169 + v168);
              uint64_t v13 = v437;
            }
            if (v170 > 0xCBu) {
              goto LABEL_331;
            }
            if (v22 != 13 || v170 != 10) {
              goto LABEL_426;
            }
            if ((v20 & 0xC) == v136)
            {
              uint64_t v172 = _StringGuts._slowEnsureMatchingEncoding(_:)(v20, v13, v8);
              uint64_t v136 = v440;
              unint64_t v20 = v172;
              if ((v8 & 0x1000000000000000) != 0)
              {
LABEL_449:
                if (v441 <= v20 >> 16) {
                  goto LABEL_1425;
                }
                unint64_t v20 = String.UTF8View._foreignIndex(after:)();
                uint64_t v136 = v440;
                goto LABEL_451;
              }
            }
            else if ((v8 & 0x1000000000000000) != 0)
            {
              goto LABEL_449;
            }
            unint64_t v20 = (v20 & 0xFFFFFFFFFFFF0000) + 65540;
LABEL_451:
            if (v24 == v20 >> 14) {
              goto LABEL_463;
            }
            unint64_t v173 = v20;
            if ((v20 & 0xC) == v136)
            {
              unint64_t v173 = _StringGuts._slowEnsureMatchingEncoding(_:)(v20, v437, v8);
              uint64_t v136 = v440;
            }
            unint64_t v174 = v173 >> 16;
            if (v173 >> 16 >= v441) {
              goto LABEL_1426;
            }
            if ((v8 & 0x1000000000000000) != 0)
            {
              uint64_t v13 = v437;
              unsigned __int8 v176 = String.UTF8View._foreignSubscript(position:)();
              uint64_t v136 = v440;
            }
            else if ((v8 & 0x2000000000000000) != 0)
            {
              uint64_t v446 = v437;
              unint64_t v447 = v434;
              unsigned __int8 v176 = *((unsigned char *)&v446 + v174);
              uint64_t v13 = v437;
            }
            else
            {
              uint64_t v175 = v433;
              if ((v437 & 0x1000000000000000) == 0)
              {
                uint64_t v175 = _StringObject.sharedUTF8.getter();
                uint64_t v136 = v440;
              }
              unsigned __int8 v176 = *(unsigned char *)(v175 + v174);
              uint64_t v13 = v437;
            }
            if (v176 < 0xCCu)
            {
LABEL_463:
              if ((v427 & 1) == 0) {
                goto LABEL_1301;
              }
              if (v442)
              {
                if (v20 & 0xC) != v136 && (v20)
                {
                  if (v441 < v20 >> 16) {
                    goto LABEL_1442;
                  }
                  goto LABEL_475;
                }
                if ((v20 & 0xC) == v136)
                {
                  uint64_t v182 = _StringGuts._slowEnsureMatchingEncoding(_:)(v20, v13, v8);
                  uint64_t v136 = v440;
                  unint64_t v20 = v182;
                }
                if (v441 < v20 >> 16) {
                  goto LABEL_1443;
                }
                if (v20)
                {
LABEL_475:
                  if (v20 < 0x4000) {
                    goto LABEL_1431;
                  }
                }
                else
                {
                  unint64_t v183 = _StringGuts.scalarAlignSlow(_:)(v20, v13, v8);
                  uint64_t v136 = v440;
                  unint64_t v20 = v20 & 0xC | v183 & 0xFFFFFFFFFFFFFFF3 | 1;
                  if (v20 < 0x4000) {
                    goto LABEL_1431;
                  }
                }
                if ((v8 & 0x1000000000000000) != 0)
                {
                  uint64_t v161 = String.UnicodeScalarView._foreignIndex(before:)();
                  goto LABEL_411;
                }
                if ((v8 & 0x2000000000000000) != 0)
                {
                  uint64_t v446 = v13;
                  unint64_t v447 = v434;
                  if ((*((unsigned char *)&v446 + (v20 >> 16) - 1) & 0xC0) != 0x80) {
                    goto LABEL_489;
                  }
                  uint64_t v178 = 0;
                  do
                    int v180 = *(unsigned char *)(v426 + (v20 >> 16) + v178--) & 0xC0;
                  while (v180 == 128);
LABEL_488:
                  uint64_t v181 = 1 - v178;
                }
                else
                {
                  uint64_t v177 = v433;
                  if ((v13 & 0x1000000000000000) == 0)
                  {
                    uint64_t v177 = _StringObject.sharedUTF8.getter();
                    uint64_t v136 = v440;
                  }
                  if ((*(unsigned char *)((v20 >> 16) + v177 - 1) & 0xC0) == 0x80)
                  {
                    uint64_t v178 = 0;
                    do
                      int v179 = *(unsigned char *)(v177 + (v20 >> 16) - 2 + v178--) & 0xC0;
                    while (v179 == 128);
                    goto LABEL_488;
                  }
LABEL_489:
                  uint64_t v181 = 1;
                }
                unint64_t v20 = (v20 - (v181 << 16)) & 0xFFFFFFFFFFFF0000 | 5;
                goto LABEL_324;
              }
              if ((v438 & 1) == 0) {
                goto LABEL_1301;
              }
              goto LABEL_324;
            }
LABEL_331:
            if (!v442)
            {
              if (v2 >= v24) {
                goto LABEL_1301;
              }
              unint64_t v144 = String.index(after:)();
              if (v24 >= v144 >> 14)
              {
                unint64_t v20 = v144;
                unint64_t v147 = String.subscript.getter();
                unint64_t v22 = v150;
                if (v147 != 2573) {
                  goto LABEL_383;
                }
              }
              else
              {
                uint64_t v145 = String.subscript.getter();
                if (!((v145 ^ v146) >> 14))
                {
                  swift_bridgeObjectRelease();
LABEL_1301:
                  if ((v435 & (v21 != 1)) != 0) {
                    uint64_t v410 = v23;
                  }
                  else {
                    uint64_t v410 = 0;
                  }
                  uint64_t v411 = v439;
                  if ((v435 & (v21 != 1)) != 0)
                  {
                    int v412 = 0;
                  }
                  else
                  {
                    uint64_t v411 = 0;
                    int v412 = 1;
                  }
                  if (v21 >= 1) {
                    unint64_t v100 = v137;
                  }
                  else {
                    unint64_t v100 = 0;
                  }
                  if (v21 >= 1) {
                    uint64_t v13 = v410;
                  }
                  else {
                    uint64_t v13 = 0;
                  }
                  if (v21 >= 1) {
                    uint64_t v23 = v411;
                  }
                  else {
                    uint64_t v23 = 0;
                  }
                  if (v21 >= 1) {
                    int v99 = v412;
                  }
                  else {
                    int v99 = 0;
                  }
                  unint64_t v2 = (unint64_t)v436;
                  if (v21 >= 1) {
                    goto LABEL_1327;
                  }
LABEL_1349:
                  Processor.signalFailure(preservingCaptures:)(0);
                  return 0;
                }
                unint64_t v20 = v146;
                unint64_t v147 = Substring.subscript.getter();
                unint64_t v22 = v148;
                swift_bridgeObjectRelease();
                if (v147 != 2573) {
                  goto LABEL_383;
                }
              }
              if (v22 == 0xE200000000000000) {
                goto LABEL_323;
              }
LABEL_383:
              if (_stringCompareWithSmolCheck(_:_:expecting:)()) {
                goto LABEL_323;
              }
              if (_stringCompareWithSmolCheck(_:_:expecting:)())
              {
                swift_bridgeObjectRelease();
                char v164 = 10;
                uint64_t v136 = v440;
              }
              else
              {
                if ((Character._isSingleScalar.getter() & 1) == 0) {
                  goto LABEL_323;
                }
                unint64_t v154 = specialized Collection.first.getter(v147, v22);
                if ((v154 & 0x100000000) != 0) {
                  goto LABEL_1459;
                }
                if ((v154 & 0xFFFFFF80) != 0)
                {
LABEL_323:
                  swift_bridgeObjectRelease();
                  uint64_t v136 = v440;
                  if ((v438 & 1) == 0) {
                    goto LABEL_1301;
                  }
                  goto LABEL_324;
                }
                unint64_t v155 = specialized Collection.first.getter(v147, v22);
                if ((v155 & 0x100000000) != 0) {
                  goto LABEL_1460;
                }
                int v156 = v155;
                swift_bridgeObjectRelease();
                if ((v156 & 0xFFFFFF00) != 0) {
                  goto LABEL_1410;
                }
                uint64_t v136 = v440;
                if ((v156 & 0xC0) != 0)
                {
                  if ((((_BYTE)v156 - 64) & 0xC0) != 0) {
                    unint64_t v157 = 0;
                  }
                  else {
                    unint64_t v157 = (v432 >> v156) & 1;
                  }
                  if (v438)
                  {
LABEL_395:
                    if (v157) {
                      goto LABEL_1301;
                    }
                    goto LABEL_324;
                  }
                  goto LABEL_418;
                }
                char v164 = v156;
              }
              unint64_t v157 = (1 << v164) & v431;
              if (v438) {
                goto LABEL_395;
              }
LABEL_418:
              if (!v157) {
                goto LABEL_1301;
              }
              goto LABEL_324;
            }
            if (v2 >= v24) {
              goto LABEL_1301;
            }
            unint64_t v20 = v137 & 0xC;
            BOOL v140 = (v137 & 1) == 0 || v20 == v136;
            unint64_t v2 = v140;
            if (v140)
            {
              unint64_t v141 = v137;
              if (v20 == v136) {
                unint64_t v141 = _StringGuts._slowEnsureMatchingEncoding(_:)(v137, v13, v8);
              }
              unint64_t v22 = v141 >> 16;
              if (v141 >> 16 >= v441) {
                goto LABEL_1379;
              }
              if ((v141 & 1) == 0) {
                unint64_t v22 = _StringGuts.scalarAlignSlow(_:)(v141, v13, v8) >> 16;
              }
            }
            else
            {
              unint64_t v22 = v137 >> 16;
              if (v137 >> 16 >= v441) {
                goto LABEL_1380;
              }
            }
            if ((v8 & 0x1000000000000000) != 0)
            {
              unsigned int v151 = _StringGuts.foreignErrorCorrectedScalar(startingAt:)();
            }
            else
            {
              if ((v8 & 0x2000000000000000) != 0)
              {
                uint64_t v446 = v13;
                unint64_t v447 = v434;
              }
              else if ((v13 & 0x1000000000000000) == 0)
              {
                _StringObject.sharedUTF8.getter();
              }
              unsigned int v151 = _decodeScalar(_:startingAt:)();
            }
            uint64_t v136 = v440;
            if (v151 < 0x80)
            {
              unint64_t v152 = v431;
              if ((v151 & 0xC0) != 0) {
                unint64_t v152 = v432;
              }
              uint64_t v153 = (1 << v151) & v152;
              if (v438)
              {
                if (v153) {
                  goto LABEL_1301;
                }
              }
              else if (!v153)
              {
                goto LABEL_1301;
              }
            }
            else if ((v438 & 1) == 0)
            {
              goto LABEL_1301;
            }
            if (v2)
            {
              unint64_t v22 = v137;
              if (v20 == v440)
              {
                uint64_t v171 = _StringGuts._slowEnsureMatchingEncoding(_:)(v137, v13, v8);
                uint64_t v136 = v440;
                unint64_t v22 = v171;
              }
              if (v441 <= v22 >> 16)
              {
                __break(1u);
LABEL_1385:
                __break(1u);
LABEL_1386:
                __break(1u);
LABEL_1387:
                __break(1u);
LABEL_1388:
                __break(1u);
LABEL_1389:
                __break(1u);
LABEL_1390:
                __break(1u);
LABEL_1391:
                __break(1u);
LABEL_1392:
                __break(1u);
LABEL_1393:
                __break(1u);
LABEL_1394:
                __break(1u);
LABEL_1395:
                __break(1u);
LABEL_1396:
                __break(1u);
LABEL_1397:
                __break(1u);
LABEL_1398:
                __break(1u);
LABEL_1399:
                __break(1u);
LABEL_1400:
                __break(1u);
LABEL_1401:
                __break(1u);
LABEL_1402:
                __break(1u);
LABEL_1403:
                __break(1u);
LABEL_1404:
                __break(1u);
LABEL_1405:
                __break(1u);
LABEL_1406:
                __break(1u);
LABEL_1407:
                __break(1u);
LABEL_1408:
                __break(1u);
LABEL_1409:
                __break(1u);
LABEL_1410:
                __break(1u);
LABEL_1411:
                __break(1u);
LABEL_1412:
                __break(1u);
LABEL_1413:
                __break(1u);
LABEL_1414:
                __break(1u);
LABEL_1415:
                __break(1u);
LABEL_1416:
                __break(1u);
LABEL_1417:
                __break(1u);
LABEL_1418:
                __break(1u);
LABEL_1419:
                __break(1u);
LABEL_1420:
                __break(1u);
LABEL_1421:
                __break(1u);
LABEL_1422:
                __break(1u);
LABEL_1423:
                __break(1u);
LABEL_1424:
                __break(1u);
LABEL_1425:
                __break(1u);
LABEL_1426:
                __break(1u);
LABEL_1427:
                __break(1u);
LABEL_1428:
                __break(1u);
LABEL_1429:
                __break(1u);
LABEL_1430:
                __break(1u);
LABEL_1431:
                __break(1u);
LABEL_1432:
                __break(1u);
LABEL_1433:
                __break(1u);
LABEL_1434:
                __break(1u);
LABEL_1435:
                __break(1u);
LABEL_1436:
                __break(1u);
LABEL_1437:
                __break(1u);
LABEL_1438:
                __break(1u);
LABEL_1439:
                __break(1u);
LABEL_1440:
                __break(1u);
LABEL_1441:
                __break(1u);
LABEL_1442:
                __break(1u);
LABEL_1443:
                __break(1u);
LABEL_1444:
                __break(1u);
LABEL_1445:
                __break(1u);
LABEL_1446:
                __break(1u);
LABEL_1447:
                __break(1u);
LABEL_1448:
                __break(1u);
LABEL_1449:
                __break(1u);
LABEL_1450:
                __break(1u);
LABEL_1451:
                __break(1u);
LABEL_1452:
                __break(1u);
LABEL_1453:
                __break(1u);
LABEL_1454:
                __break(1u);
LABEL_1455:
                __break(1u);
LABEL_1456:
                __break(1u);
LABEL_1457:
                __break(1u);
LABEL_1458:
                __break(1u);
LABEL_1459:
                __break(1u);
LABEL_1460:
                __break(1u);
LABEL_1461:
                __break(1u);
LABEL_1462:
                __break(1u);
LABEL_1463:
                _assertionFailure(_:_:file:line:flags:)();
                __break(1u);
                JUMPOUT(0x209F56688);
              }
              if ((v22 & 1) == 0)
              {
                unint64_t v158 = _StringGuts.scalarAlignSlow(_:)(v22, v13, v8);
                uint64_t v136 = v440;
                unint64_t v22 = v22 & 0xC | v158 & 0xFFFFFFFFFFFFFFF3 | 1;
              }
            }
            else
            {
              unint64_t v22 = v137;
              if (v441 <= v137 >> 16) {
                goto LABEL_1385;
              }
            }
            if ((v8 & 0x1000000000000000) != 0)
            {
              uint64_t v161 = String.UnicodeScalarView._foreignIndex(after:)();
LABEL_411:
              uint64_t v136 = v440;
              unint64_t v20 = v161;
              goto LABEL_324;
            }
            v22 >>= 16;
            if ((v8 & 0x2000000000000000) != 0)
            {
              uint64_t v446 = v13;
              unint64_t v447 = v434;
              int v160 = *((unsigned __int8 *)&v446 + v22);
            }
            else
            {
              uint64_t v159 = v433;
              if ((v13 & 0x1000000000000000) == 0)
              {
                uint64_t v159 = _StringObject.sharedUTF8.getter();
                uint64_t v136 = v440;
              }
              int v160 = *(unsigned __int8 *)(v159 + v22);
            }
            int v162 = (char)v160;
            unsigned int v163 = __clz(v160 ^ 0xFF) - 24;
            if (v162 >= 0) {
              LOBYTE(v163) = 1;
            }
            unint64_t v20 = ((v22 + v163) << 16) | 5;
LABEL_324:
            BOOL v38 = v21++ == 0;
            if (v38) {
              uint64_t v139 = v20;
            }
            else {
              uint64_t v139 = v23;
            }
            if (v21 >= 0) {
              uint64_t v23 = v139;
            }
            unint64_t v439 = v137;
            unint64_t v137 = v20;
          }
        }
        if ((unsigned __int16)v24 >= v29) {
          goto LABEL_1408;
        }
        unint64_t v100 = *(void *)(v2 + 64);
        if (!v440)
        {
          uint64_t v21 = 0;
          uint64_t v13 = *(void *)(v2 + 64);
          unint64_t v20 = v13;
LABEL_1123:
          uint64_t v23 = v100;
          unint64_t v100 = v20;
          if (v21 < v11) {
            goto LABEL_1349;
          }
LABEL_1336:
          unint64_t v2 = (unint64_t)v436;
          if (v21 == 0 || (v435 & 1) == 0 || v21 <= v11)
          {
            uint64_t v13 = 0;
            uint64_t v23 = 0;
            int v99 = 1;
          }
          else
          {
            int v99 = 0;
          }
          goto LABEL_1327;
        }
        uint64_t v251 = 0;
        uint64_t v21 = 0;
        uint64_t v252 = v28 + 24 * (unsigned __int16)v24;
        int v253 = *(unsigned __int8 *)(v252 + 32);
        unint64_t v426 = *(void *)(v2 + 40);
        unint64_t v24 = v426 >> 14;
        unint64_t v254 = *(void *)(v252 + 40);
        unint64_t v428 = *(void *)(v252 + 48);
        char v255 = (v8 & 0x1000000000000000) == 0 || (v437 & 0x800000000000000) != 0;
        uint64_t v256 = 4 << v255;
        uint64_t v257 = HIBYTE(v8) & 0xF;
        uint64_t v425 = v257;
        uint64_t v424 = v437 & 0xFFFFFFFFFFFFLL;
        if ((v8 & 0x2000000000000000) == 0) {
          uint64_t v257 = v437 & 0xFFFFFFFFFFFFLL;
        }
        unint64_t v441 = v257;
        unint64_t v430 = (v8 & 0xFFFFFFFFFFFFFFFLL) + 32;
        unint64_t v431 = v8 & 0xFFFFFFFFFFFFFFLL;
        uint64_t v427 = v254;
        LODWORD(v432) = v253;
        int v423 = v253 ^ (v254 >> 13) & 1;
        v422 = v445;
        unint64_t v20 = v100;
        uint64_t v13 = v100;
        unint64_t v429 = v426 >> 14;
        unint64_t v439 = v256;
        while (1)
        {
          unint64_t v433 = v20;
          uint64_t v434 = v251;
          uint64_t v23 = v100;
          unint64_t v100 = v20;
          unint64_t v2 = v20 >> 14;
          if (v20 >> 14 == v24) {
            goto LABEL_712;
          }
          v20 &= 0xCu;
          unint64_t v261 = v100;
          if ((v100 & 0xC) == v256)
          {
            unint64_t v261 = _StringGuts._slowEnsureMatchingEncoding(_:)(v100, v437, v8);
            uint64_t v256 = v439;
            unint64_t v100 = v433;
          }
          unint64_t v22 = v261 >> 16;
          if (v261 >> 16 >= v441) {
            goto LABEL_1375;
          }
          if ((v8 & 0x1000000000000000) != 0)
          {
            uint64_t v285 = String.UTF8View._foreignSubscript(position:)();
            uint64_t v256 = v439;
            unint64_t v100 = v433;
            unint64_t v22 = v285;
            if ((v285 & 0x80) != 0) {
              goto LABEL_712;
            }
          }
          else if ((v8 & 0x2000000000000000) != 0)
          {
            uint64_t v446 = v437;
            unint64_t v447 = v431;
            unint64_t v22 = *((unsigned __int8 *)&v446 + v22);
            if ((v22 & 0x80) != 0) {
              goto LABEL_712;
            }
          }
          else
          {
            uint64_t v262 = v430;
            if ((v437 & 0x1000000000000000) == 0)
            {
              uint64_t v262 = _StringObject.sharedUTF8.getter();
              uint64_t v256 = v439;
              unint64_t v100 = v433;
            }
            unint64_t v22 = *(unsigned __int8 *)(v262 + v22);
            if ((v22 & 0x80) != 0) {
              goto LABEL_712;
            }
          }
          unint64_t v269 = v100;
          if (v20 == v256)
          {
            unint64_t v269 = _StringGuts._slowEnsureMatchingEncoding(_:)(v100, v437, v8);
            uint64_t v256 = v439;
            unint64_t v100 = v433;
            if ((v8 & 0x1000000000000000) == 0)
            {
LABEL_743:
              unint64_t v20 = (v269 & 0xFFFFFFFFFFFF0000) + 65540;
              if (v24 == v20 >> 14) {
                goto LABEL_809;
              }
              goto LABEL_811;
            }
          }
          else if ((v8 & 0x1000000000000000) == 0)
          {
            goto LABEL_743;
          }
          if (v441 <= v269 >> 16) {
            goto LABEL_1403;
          }
          unint64_t v20 = String.UTF8View._foreignIndex(after:)();
          unint64_t v100 = v433;
          uint64_t v256 = v439;
          if (v24 == v20 >> 14)
          {
LABEL_809:
            if (v22 >= 0x40u) {
              v286 = &v449;
            }
            else {
              v286 = &v448;
            }
            if (((v432 ^ ((unint64_t)*(v286 - 32) >> v22)) & 1) == 0) {
              goto LABEL_1335;
            }
            goto LABEL_821;
          }
LABEL_811:
          uint64_t v287 = v23;
          unint64_t v288 = v20;
          if ((v20 & 0xC) == v256)
          {
            unint64_t v288 = _StringGuts._slowEnsureMatchingEncoding(_:)(v20, v437, v8);
            uint64_t v256 = v439;
            unint64_t v100 = v433;
          }
          unint64_t v289 = v288 >> 16;
          if (v288 >> 16 >= v441) {
            goto LABEL_1404;
          }
          if ((v8 & 0x1000000000000000) != 0)
          {
            unsigned __int8 v291 = String.UTF8View._foreignSubscript(position:)();
            uint64_t v256 = v439;
            unint64_t v100 = v433;
          }
          else if ((v8 & 0x2000000000000000) != 0)
          {
            uint64_t v446 = v437;
            unint64_t v447 = v431;
            unsigned __int8 v291 = *((unsigned char *)&v446 + v289);
          }
          else
          {
            uint64_t v290 = v430;
            if ((v437 & 0x1000000000000000) == 0)
            {
              uint64_t v290 = _StringObject.sharedUTF8.getter();
              uint64_t v256 = v439;
              unint64_t v100 = v433;
            }
            unsigned __int8 v291 = *(unsigned char *)(v290 + v289);
          }
          uint64_t v23 = v287;
          unint64_t v24 = v429;
          if (v291 > 0xCBu) {
            goto LABEL_712;
          }
          if (v22 != 13 || v291 != 10) {
            goto LABEL_809;
          }
          if ((v20 & 0xC) == v256)
          {
            uint64_t v294 = _StringGuts._slowEnsureMatchingEncoding(_:)(v20, v437, v8);
            uint64_t v256 = v439;
            unint64_t v100 = v433;
            unint64_t v20 = v294;
            if ((v8 & 0x1000000000000000) != 0)
            {
LABEL_839:
              if (v441 <= v20 >> 16) {
                goto LABEL_1438;
              }
              unint64_t v20 = String.UTF8View._foreignIndex(after:)();
              unint64_t v100 = v433;
              uint64_t v256 = v439;
              goto LABEL_841;
            }
          }
          else if ((v8 & 0x1000000000000000) != 0)
          {
            goto LABEL_839;
          }
          unint64_t v20 = (v20 & 0xFFFFFFFFFFFF0000) + 65540;
LABEL_841:
          if (v24 == v20 >> 14) {
            goto LABEL_853;
          }
          unint64_t v295 = v20;
          if ((v20 & 0xC) == v256)
          {
            unint64_t v295 = _StringGuts._slowEnsureMatchingEncoding(_:)(v20, v437, v8);
            uint64_t v256 = v439;
            unint64_t v100 = v433;
          }
          unint64_t v22 = v295 >> 16;
          if (v295 >> 16 >= v441) {
            goto LABEL_1439;
          }
          if ((v8 & 0x1000000000000000) != 0)
          {
            unsigned __int8 v297 = String.UTF8View._foreignSubscript(position:)();
            uint64_t v256 = v439;
            unint64_t v100 = v433;
          }
          else if ((v8 & 0x2000000000000000) != 0)
          {
            uint64_t v446 = v437;
            unint64_t v447 = v431;
            unsigned __int8 v297 = *((unsigned char *)&v446 + v22);
          }
          else
          {
            uint64_t v296 = v430;
            if ((v437 & 0x1000000000000000) == 0)
            {
              uint64_t v296 = _StringObject.sharedUTF8.getter();
              uint64_t v256 = v439;
              unint64_t v100 = v433;
            }
            unsigned __int8 v297 = *(unsigned char *)(v296 + v22);
          }
          if (v297 < 0xCCu)
          {
LABEL_853:
            if ((v423 & 1) == 0) {
              goto LABEL_1335;
            }
            if (!v442)
            {
              if ((v432 & 1) == 0) {
                goto LABEL_1335;
              }
              goto LABEL_821;
            }
            if (v20 & 0xC) != v256 && (v20)
            {
              if (v441 < v20 >> 16) {
                goto LABEL_1450;
              }
              goto LABEL_865;
            }
            if ((v20 & 0xC) == v256)
            {
              uint64_t v303 = _StringGuts._slowEnsureMatchingEncoding(_:)(v20, v437, v8);
              uint64_t v256 = v439;
              unint64_t v100 = v433;
              unint64_t v20 = v303;
            }
            if (v441 < v20 >> 16) {
              goto LABEL_1451;
            }
            if (v20)
            {
LABEL_865:
              if (v20 < 0x4000) {
                goto LABEL_1445;
              }
            }
            else
            {
              unint64_t v304 = _StringGuts.scalarAlignSlow(_:)(v20, v437, v8);
              uint64_t v256 = v439;
              unint64_t v100 = v433;
              unint64_t v20 = v20 & 0xC | v304 & 0xFFFFFFFFFFFFFFF3 | 1;
              if (v20 < 0x4000) {
                goto LABEL_1445;
              }
            }
            if ((v8 & 0x1000000000000000) == 0)
            {
              unint64_t v22 = v20 >> 16;
              if ((v8 & 0x2000000000000000) != 0)
              {
                uint64_t v446 = v437;
                unint64_t v447 = v431;
                if ((*((unsigned char *)&v446 + v22 - 1) & 0xC0) != 0x80) {
                  goto LABEL_879;
                }
                uint64_t v299 = 0;
                do
                  int v301 = v422[v22 + v299--] & 0xC0;
                while (v301 == 128);
LABEL_878:
                uint64_t v302 = 1 - v299;
              }
              else
              {
                uint64_t v298 = v430;
                if ((v437 & 0x1000000000000000) == 0)
                {
                  uint64_t v298 = _StringObject.sharedUTF8.getter();
                  uint64_t v256 = v439;
                  unint64_t v100 = v433;
                }
                if ((*(unsigned char *)(v22 + v298 - 1) & 0xC0) == 0x80)
                {
                  uint64_t v299 = 0;
                  do
                    int v300 = *(unsigned char *)(v298 + v22 - 2 + v299--) & 0xC0;
                  while (v300 == 128);
                  goto LABEL_878;
                }
LABEL_879:
                uint64_t v302 = 1;
              }
              unint64_t v20 = (v20 - (v302 << 16)) & 0xFFFFFFFFFFFF0000 | 5;
              goto LABEL_821;
            }
            uint64_t v281 = String.UnicodeScalarView._foreignIndex(before:)();
LABEL_791:
            uint64_t v256 = v439;
            unint64_t v100 = v433;
            unint64_t v20 = v281;
            goto LABEL_821;
          }
LABEL_712:
          if (v442)
          {
            if (v2 >= v24) {
              goto LABEL_1335;
            }
            unint64_t v20 = v100 & 0xC;
            BOOL v258 = (v100 & 1) == 0 || v20 == v256;
            int v259 = v258;
            if (v258)
            {
              unint64_t v260 = v100;
              if (v20 == v256) {
                unint64_t v260 = _StringGuts._slowEnsureMatchingEncoding(_:)(v100, v437, v8);
              }
              unint64_t v22 = v260 >> 16;
              if (v260 >> 16 >= v441) {
                goto LABEL_1397;
              }
              if ((v260 & 1) == 0) {
                unint64_t v22 = _StringGuts.scalarAlignSlow(_:)(v260, v437, v8) >> 16;
              }
            }
            else
            {
              unint64_t v22 = v100 >> 16;
              if (v100 >> 16 >= v441) {
                goto LABEL_1398;
              }
            }
            if ((v8 & 0x1000000000000000) != 0)
            {
              unsigned int v271 = _StringGuts.foreignErrorCorrectedScalar(startingAt:)();
            }
            else
            {
              if ((v8 & 0x2000000000000000) != 0)
              {
                uint64_t v446 = v437;
                unint64_t v447 = v431;
              }
              else if ((v437 & 0x1000000000000000) == 0)
              {
                _StringObject.sharedUTF8.getter();
              }
              unsigned int v271 = _decodeScalar(_:startingAt:)();
            }
            unint64_t v100 = v433;
            uint64_t v256 = v439;
            if (v271 < 0x80)
            {
              unint64_t v272 = v427;
              if ((v271 & 0xC0) != 0) {
                unint64_t v272 = v428;
              }
              uint64_t v273 = (1 << v271) & v272;
              if (v432)
              {
                if (v273) {
                  goto LABEL_1335;
                }
              }
              else if (!v273)
              {
                goto LABEL_1335;
              }
            }
            else if ((v432 & 1) == 0)
            {
              goto LABEL_1335;
            }
            if (v259)
            {
              unint64_t v22 = v433;
              if (v20 == v439)
              {
                uint64_t v293 = _StringGuts._slowEnsureMatchingEncoding(_:)(v433, v437, v8);
                uint64_t v256 = v439;
                unint64_t v100 = v433;
                unint64_t v22 = v293;
              }
              if (v441 <= v22 >> 16) {
                goto LABEL_1401;
              }
              if ((v22 & 1) == 0)
              {
                unint64_t v278 = _StringGuts.scalarAlignSlow(_:)(v22, v437, v8);
                uint64_t v256 = v439;
                unint64_t v100 = v433;
                unint64_t v22 = v22 & 0xC | v278 & 0xFFFFFFFFFFFFFFF3 | 1;
              }
            }
            else
            {
              unint64_t v22 = v433;
              if (v441 <= v433 >> 16) {
                goto LABEL_1402;
              }
            }
            if ((v8 & 0x1000000000000000) == 0)
            {
              v22 >>= 16;
              if ((v8 & 0x2000000000000000) != 0)
              {
                uint64_t v446 = v437;
                unint64_t v447 = v431;
                int v280 = *((unsigned __int8 *)&v446 + v22);
              }
              else
              {
                uint64_t v279 = v430;
                if ((v437 & 0x1000000000000000) == 0)
                {
                  uint64_t v279 = _StringObject.sharedUTF8.getter();
                  uint64_t v256 = v439;
                  unint64_t v100 = v433;
                }
                int v280 = *(unsigned __int8 *)(v279 + v22);
              }
              int v282 = (char)v280;
              unsigned int v283 = __clz(v280 ^ 0xFF) - 24;
              if (v282 >= 0) {
                LOBYTE(v283) = 1;
              }
              unint64_t v20 = ((v22 + v283) << 16) | 5;
              goto LABEL_821;
            }
            uint64_t v281 = String.UnicodeScalarView._foreignIndex(after:)();
            goto LABEL_791;
          }
          if (v2 >= v24) {
            goto LABEL_1335;
          }
          unint64_t v22 = v437;
          unint64_t v263 = v24;
          unint64_t v24 = v100;
          unint64_t v264 = String.index(after:)();
          if (v263 >= v264 >> 14)
          {
            unint64_t v20 = v264;
            unint64_t v267 = String.subscript.getter();
            unint64_t v22 = v270;
          }
          else
          {
            uint64_t v265 = String.subscript.getter();
            if (!((v265 ^ v266) >> 14))
            {
              swift_bridgeObjectRelease();
              unint64_t v100 = v433;
LABEL_1335:
              if (v434 & 1 | (v21 < v11)) {
                goto LABEL_1349;
              }
              goto LABEL_1336;
            }
            unint64_t v20 = v266;
            unint64_t v267 = Substring.subscript.getter();
            unint64_t v22 = v268;
            swift_bridgeObjectRelease();
          }
          unint64_t v24 = v429;
          if ((v267 != 2573 || v22 != 0xE200000000000000) && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0)
          {
            if (_stringCompareWithSmolCheck(_:_:expecting:)())
            {
              swift_bridgeObjectRelease();
              char v284 = 10;
              unint64_t v100 = v433;
              uint64_t v256 = v439;
              goto LABEL_797;
            }
            if (Character._isSingleScalar.getter())
            {
              unint64_t v274 = specialized Collection.first.getter(v267, v22);
              if ((v274 & 0x100000000) != 0) {
                goto LABEL_1461;
              }
              if ((v274 & 0xFFFFFF80) == 0)
              {
                unint64_t v275 = specialized Collection.first.getter(v267, v22);
                if ((v275 & 0x100000000) != 0) {
                  goto LABEL_1462;
                }
                int v276 = v275;
                swift_bridgeObjectRelease();
                if ((v276 & 0xFFFFFF00) != 0) {
                  goto LABEL_1424;
                }
                unint64_t v100 = v433;
                uint64_t v256 = v439;
                if ((v276 & 0xC0) != 0)
                {
                  if ((((_BYTE)v276 - 64) & 0xC0) != 0) {
                    uint64_t v277 = 0;
                  }
                  else {
                    uint64_t v277 = (v428 >> v276) & 1;
                  }
LABEL_798:
                  if (v432)
                  {
                    if (v277) {
                      goto LABEL_1335;
                    }
                  }
                  else if (!v277)
                  {
                    goto LABEL_1335;
                  }
                  goto LABEL_821;
                }
                char v284 = v276;
LABEL_797:
                uint64_t v277 = (1 << v284) & v427;
                goto LABEL_798;
              }
            }
          }
          swift_bridgeObjectRelease();
          unint64_t v100 = v433;
          uint64_t v256 = v439;
          if ((v432 & 1) == 0) {
            goto LABEL_1335;
          }
LABEL_821:
          uint64_t v251 = (unint64_t)++v21 >> 63;
          if (v21 == v11) {
            uint64_t v292 = v20;
          }
          else {
            uint64_t v292 = v13;
          }
          if (v21 >= 0) {
            uint64_t v13 = v292;
          }
          if ((v21 & 0x8000000000000000) == 0 && v21 >= v440) {
            goto LABEL_1123;
          }
        }
      }
      if ((unsigned __int16)v24 >= v29) {
        goto LABEL_1392;
      }
      uint64_t v21 = 0;
      uint64_t v30 = v28 + 24 * (unsigned __int16)v24;
      int v31 = *(unsigned __int8 *)(v30 + 32);
      unint64_t v430 = *(void *)(v2 + 40);
      unint64_t v24 = v430 >> 14;
      uint64_t v13 = v437;
      unint64_t v32 = *(void *)(v30 + 40);
      unint64_t v432 = *(void *)(v30 + 48);
      char v33 = (v8 & 0x1000000000000000) == 0 || (v437 & 0x800000000000000) != 0;
      uint64_t v34 = 4 << v33;
      unint64_t v35 = *(void *)(v2 + 64);
      uint64_t v36 = HIBYTE(v8) & 0xF;
      unint64_t v429 = v36;
      unint64_t v428 = v437 & 0xFFFFFFFFFFFFLL;
      if ((v8 & 0x2000000000000000) == 0) {
        uint64_t v36 = v437 & 0xFFFFFFFFFFFFLL;
      }
      unint64_t v441 = v36;
      unint64_t v433 = (v8 & 0xFFFFFFFFFFFFFFFLL) + 32;
      uint64_t v434 = v8 & 0xFFFFFFFFFFFFFFLL;
      unint64_t v431 = v32;
      LODWORD(v438) = v31;
      LODWORD(v427) = v31 ^ (v32 >> 13) & 1;
      unint64_t v426 = (unint64_t)v445;
      uint64_t v23 = v35;
      unint64_t v439 = v35;
      unint64_t v440 = v34;
      while (1)
      {
        unint64_t v2 = v35 >> 14;
        if (v35 >> 14 == v24) {
          break;
        }
        unint64_t v20 = v35 & 0xC;
        unint64_t v40 = v35;
        if (v20 == v34)
        {
          unint64_t v40 = _StringGuts._slowEnsureMatchingEncoding(_:)(v35, v13, v8);
          uint64_t v34 = v440;
        }
        unint64_t v22 = v40 >> 16;
        if (v40 >> 16 >= v441)
        {
          __break(1u);
          goto LABEL_1351;
        }
        if ((v8 & 0x1000000000000000) != 0)
        {
          uint64_t v63 = String.UTF8View._foreignSubscript(position:)();
          uint64_t v34 = v440;
          unint64_t v22 = v63;
          if ((v63 & 0x80) != 0) {
            break;
          }
        }
        else if ((v8 & 0x2000000000000000) != 0)
        {
          uint64_t v446 = v13;
          unint64_t v447 = v434;
          unint64_t v22 = *((unsigned __int8 *)&v446 + v22);
          if ((v22 & 0x80) != 0) {
            break;
          }
        }
        else
        {
          uint64_t v41 = v433;
          if ((v13 & 0x1000000000000000) == 0)
          {
            uint64_t v41 = _StringObject.sharedUTF8.getter();
            uint64_t v34 = v440;
          }
          unint64_t v22 = *(unsigned __int8 *)(v41 + v22);
          if ((v22 & 0x80) != 0) {
            break;
          }
        }
        unint64_t v47 = v35;
        if (v20 == v34)
        {
          unint64_t v47 = _StringGuts._slowEnsureMatchingEncoding(_:)(v35, v13, v8);
          uint64_t v34 = v440;
          if ((v8 & 0x1000000000000000) == 0)
          {
LABEL_69:
            unint64_t v20 = (v47 & 0xFFFFFFFFFFFF0000) + 65540;
            if (v24 == v20 >> 14) {
              goto LABEL_132;
            }
            goto LABEL_134;
          }
        }
        else if ((v8 & 0x1000000000000000) == 0)
        {
          goto LABEL_69;
        }
        if (v441 <= v47 >> 16) {
          goto LABEL_1370;
        }
        unint64_t v64 = String.UTF8View._foreignIndex(after:)();
        uint64_t v34 = v440;
        unint64_t v20 = v64;
        if (v24 == v64 >> 14)
        {
LABEL_132:
          if (v22 >= 0x40u) {
            unint64_t v65 = v432;
          }
          else {
            unint64_t v65 = v431;
          }
          if (((v438 ^ (v65 >> v22)) & 1) == 0) {
            goto LABEL_1244;
          }
          goto LABEL_30;
        }
LABEL_134:
        unint64_t v66 = v20;
        if ((v20 & 0xC) == v34)
        {
          unint64_t v66 = _StringGuts._slowEnsureMatchingEncoding(_:)(v20, v13, v8);
          uint64_t v34 = v440;
        }
        uint64_t v13 = v66 >> 16;
        if (v66 >> 16 >= v441) {
          goto LABEL_1371;
        }
        if ((v8 & 0x1000000000000000) != 0)
        {
          uint64_t v13 = v437;
          unsigned __int8 v68 = String.UTF8View._foreignSubscript(position:)();
          uint64_t v34 = v440;
        }
        else if ((v8 & 0x2000000000000000) != 0)
        {
          uint64_t v446 = v437;
          unint64_t v447 = v434;
          unsigned __int8 v68 = *((unsigned char *)&v446 + v13);
          uint64_t v13 = v437;
        }
        else
        {
          uint64_t v67 = v433;
          if ((v437 & 0x1000000000000000) == 0)
          {
            uint64_t v67 = _StringObject.sharedUTF8.getter();
            uint64_t v34 = v440;
          }
          unsigned __int8 v68 = *(unsigned char *)(v67 + v13);
          uint64_t v13 = v437;
        }
        if (v68 > 0xCBu) {
          break;
        }
        if (v22 != 13 || v68 != 10) {
          goto LABEL_132;
        }
        if ((v20 & 0xC) == v34)
        {
          uint64_t v70 = _StringGuts._slowEnsureMatchingEncoding(_:)(v20, v13, v8);
          uint64_t v34 = v440;
          unint64_t v20 = v70;
          if ((v8 & 0x1000000000000000) == 0)
          {
LABEL_152:
            unint64_t v20 = (v20 & 0xFFFFFFFFFFFF0000) + 65540;
            if (v24 == v20 >> 14) {
              goto LABEL_169;
            }
            goto LABEL_158;
          }
        }
        else if ((v8 & 0x1000000000000000) == 0)
        {
          goto LABEL_152;
        }
        if (v441 <= v20 >> 16) {
          goto LABEL_1411;
        }
        unint64_t v20 = String.UTF8View._foreignIndex(after:)();
        uint64_t v34 = v440;
        if (v24 == v20 >> 14) {
          goto LABEL_169;
        }
LABEL_158:
        unint64_t v71 = v20;
        if ((v20 & 0xC) == v34)
        {
          unint64_t v71 = _StringGuts._slowEnsureMatchingEncoding(_:)(v20, v437, v8);
          uint64_t v34 = v440;
        }
        unint64_t v72 = v71 >> 16;
        if (v71 >> 16 >= v441) {
          goto LABEL_1412;
        }
        if ((v8 & 0x1000000000000000) != 0)
        {
          uint64_t v13 = v437;
          unsigned __int8 v74 = String.UTF8View._foreignSubscript(position:)();
          uint64_t v34 = v440;
        }
        else if ((v8 & 0x2000000000000000) != 0)
        {
          uint64_t v446 = v437;
          unint64_t v447 = v434;
          unsigned __int8 v74 = *((unsigned char *)&v446 + v72);
          uint64_t v13 = v437;
        }
        else
        {
          uint64_t v73 = v433;
          if ((v437 & 0x1000000000000000) == 0)
          {
            uint64_t v73 = _StringObject.sharedUTF8.getter();
            uint64_t v34 = v440;
          }
          unsigned __int8 v74 = *(unsigned char *)(v73 + v72);
          uint64_t v13 = v437;
        }
        if (v74 >= 0xCCu) {
          break;
        }
LABEL_169:
        if ((v427 & 1) == 0) {
          goto LABEL_1244;
        }
        if (v442)
        {
          if (v20 & 0xC) != v34 && (v20)
          {
            if (v441 < v20 >> 16) {
              goto LABEL_1430;
            }
            goto LABEL_181;
          }
          if ((v20 & 0xC) == v34)
          {
            uint64_t v80 = _StringGuts._slowEnsureMatchingEncoding(_:)(v20, v13, v8);
            uint64_t v34 = v440;
            unint64_t v20 = v80;
          }
          if (v441 < v20 >> 16) {
            goto LABEL_1429;
          }
          if (v20)
          {
LABEL_181:
            if (v20 < 0x4000) {
              goto LABEL_1419;
            }
          }
          else
          {
            unint64_t v81 = _StringGuts.scalarAlignSlow(_:)(v20, v13, v8);
            uint64_t v34 = v440;
            unint64_t v20 = v20 & 0xC | v81 & 0xFFFFFFFFFFFFFFF3 | 1;
            if (v20 < 0x4000) {
              goto LABEL_1419;
            }
          }
          if ((v8 & 0x1000000000000000) != 0)
          {
            uint64_t v59 = String.UnicodeScalarView._foreignIndex(before:)();
            goto LABEL_117;
          }
          unint64_t v22 = v20 >> 16;
          if ((v8 & 0x2000000000000000) != 0)
          {
            uint64_t v446 = v13;
            unint64_t v447 = v434;
            if ((*((unsigned char *)&v446 + v22 - 1) & 0xC0) != 0x80) {
              goto LABEL_195;
            }
            uint64_t v76 = 0;
            do
              int v78 = *(unsigned char *)(v426 + v22 + v76--) & 0xC0;
            while (v78 == 128);
LABEL_194:
            uint64_t v79 = 1 - v76;
          }
          else
          {
            uint64_t v75 = v433;
            if ((v13 & 0x1000000000000000) == 0)
            {
              uint64_t v75 = _StringObject.sharedUTF8.getter();
              uint64_t v34 = v440;
            }
            if ((*(unsigned char *)(v22 + v75 - 1) & 0xC0) == 0x80)
            {
              uint64_t v76 = 0;
              do
                int v77 = *(unsigned char *)(v75 + v22 - 2 + v76--) & 0xC0;
              while (v77 == 128);
              goto LABEL_194;
            }
LABEL_195:
            uint64_t v79 = 1;
          }
          unint64_t v20 = (v20 - (v79 << 16)) & 0xFFFFFFFFFFFF0000 | 5;
          goto LABEL_30;
        }
        if ((v438 & 1) == 0) {
          goto LABEL_1244;
        }
LABEL_30:
        BOOL v328 = __CFADD__(v21++, 1);
        if (v328) {
          uint64_t v37 = v20;
        }
        else {
          uint64_t v37 = v23;
        }
        if (v21 >= 0) {
          uint64_t v23 = v37;
        }
        unint64_t v439 = v35;
        unint64_t v35 = v20;
      }
      if (v442)
      {
        if (v2 >= v24) {
          goto LABEL_1244;
        }
        unint64_t v20 = v35 & 0xC;
        BOOL v38 = (v35 & 1) == 0 || v20 == v34;
        unint64_t v2 = v38;
        if (v38)
        {
          unint64_t v39 = v35;
          if (v20 == v34) {
            unint64_t v39 = _StringGuts._slowEnsureMatchingEncoding(_:)(v35, v13, v8);
          }
          unint64_t v22 = v39 >> 16;
          if (v39 >> 16 >= v441) {
            goto LABEL_1365;
          }
          if ((v39 & 1) == 0) {
            unint64_t v22 = _StringGuts.scalarAlignSlow(_:)(v39, v13, v8) >> 16;
          }
        }
        else
        {
          unint64_t v22 = v35 >> 16;
          if (v35 >> 16 >= v441) {
            goto LABEL_1366;
          }
        }
        if ((v8 & 0x1000000000000000) != 0)
        {
          unsigned int v49 = _StringGuts.foreignErrorCorrectedScalar(startingAt:)();
        }
        else
        {
          if ((v8 & 0x2000000000000000) != 0)
          {
            uint64_t v446 = v13;
            unint64_t v447 = v434;
          }
          else if ((v13 & 0x1000000000000000) == 0)
          {
            _StringObject.sharedUTF8.getter();
          }
          unsigned int v49 = _decodeScalar(_:startingAt:)();
        }
        uint64_t v34 = v440;
        if (v49 < 0x80)
        {
          unint64_t v50 = v431;
          if ((v49 & 0xC0) != 0) {
            unint64_t v50 = v432;
          }
          uint64_t v51 = (1 << v49) & v50;
          if (v438)
          {
            if (v51) {
              goto LABEL_1244;
            }
          }
          else if (!v51)
          {
            goto LABEL_1244;
          }
        }
        else if ((v438 & 1) == 0)
        {
          goto LABEL_1244;
        }
        if (v2)
        {
          unint64_t v22 = v35;
          if (v20 == v440)
          {
            uint64_t v69 = _StringGuts._slowEnsureMatchingEncoding(_:)(v35, v13, v8);
            uint64_t v34 = v440;
            unint64_t v22 = v69;
          }
          if (v441 <= v22 >> 16) {
            goto LABEL_1367;
          }
          if ((v22 & 1) == 0)
          {
            unint64_t v56 = _StringGuts.scalarAlignSlow(_:)(v22, v13, v8);
            uint64_t v34 = v440;
            unint64_t v22 = v22 & 0xC | v56 & 0xFFFFFFFFFFFFFFF3 | 1;
          }
        }
        else
        {
          unint64_t v22 = v35;
          if (v441 <= v35 >> 16) {
            goto LABEL_1368;
          }
        }
        if ((v8 & 0x1000000000000000) != 0)
        {
          uint64_t v59 = String.UnicodeScalarView._foreignIndex(after:)();
LABEL_117:
          uint64_t v34 = v440;
          unint64_t v20 = v59;
          goto LABEL_30;
        }
        v22 >>= 16;
        if ((v8 & 0x2000000000000000) != 0)
        {
          uint64_t v446 = v13;
          unint64_t v447 = v434;
          int v58 = *((unsigned __int8 *)&v446 + v22);
        }
        else
        {
          uint64_t v57 = v433;
          if ((v13 & 0x1000000000000000) == 0)
          {
            uint64_t v57 = _StringObject.sharedUTF8.getter();
            uint64_t v34 = v440;
          }
          int v58 = *(unsigned __int8 *)(v57 + v22);
        }
        int v60 = (char)v58;
        unsigned int v61 = __clz(v58 ^ 0xFF) - 24;
        if (v60 >= 0) {
          LOBYTE(v61) = 1;
        }
        unint64_t v20 = ((v22 + v61) << 16) | 5;
        goto LABEL_30;
      }
      if (v2 >= v24) {
        goto LABEL_1244;
      }
      unint64_t v42 = String.index(after:)();
      if (v24 >= v42 >> 14)
      {
        unint64_t v20 = v42;
        unint64_t v45 = String.subscript.getter();
        unint64_t v22 = v48;
        if (v45 != 2573) {
          goto LABEL_89;
        }
LABEL_77:
        if (v22 == 0xE200000000000000) {
          goto LABEL_29;
        }
LABEL_89:
        if (_stringCompareWithSmolCheck(_:_:expecting:)()) {
          goto LABEL_29;
        }
        if (_stringCompareWithSmolCheck(_:_:expecting:)())
        {
          swift_bridgeObjectRelease();
          char v62 = 10;
          uint64_t v34 = v440;
        }
        else
        {
          if ((Character._isSingleScalar.getter() & 1) == 0) {
            goto LABEL_29;
          }
          unint64_t v52 = specialized Collection.first.getter(v45, v22);
          if ((v52 & 0x100000000) != 0) {
            goto LABEL_1455;
          }
          if ((v52 & 0xFFFFFF80) != 0)
          {
LABEL_29:
            swift_bridgeObjectRelease();
            uint64_t v34 = v440;
            if ((v438 & 1) == 0) {
              goto LABEL_1244;
            }
            goto LABEL_30;
          }
          unint64_t v53 = specialized Collection.first.getter(v45, v22);
          if ((v53 & 0x100000000) != 0) {
            goto LABEL_1456;
          }
          int v54 = v53;
          swift_bridgeObjectRelease();
          if ((v54 & 0xFFFFFF00) != 0) {
            goto LABEL_1396;
          }
          uint64_t v34 = v440;
          if ((v54 & 0xC0) != 0)
          {
            if ((((_BYTE)v54 - 64) & 0xC0) != 0) {
              unint64_t v55 = 0;
            }
            else {
              unint64_t v55 = (v432 >> v54) & 1;
            }
            if (v438)
            {
LABEL_101:
              if (v55) {
                goto LABEL_1244;
              }
              goto LABEL_30;
            }
            goto LABEL_124;
          }
          char v62 = v54;
        }
        unint64_t v55 = (1 << v62) & v431;
        if (v438) {
          goto LABEL_101;
        }
LABEL_124:
        if (!v55) {
          goto LABEL_1244;
        }
        goto LABEL_30;
      }
      uint64_t v43 = String.subscript.getter();
      if ((v43 ^ v44) >> 14)
      {
        unint64_t v20 = v44;
        unint64_t v45 = Substring.subscript.getter();
        unint64_t v22 = v46;
        swift_bridgeObjectRelease();
        if (v45 != 2573) {
          goto LABEL_89;
        }
        goto LABEL_77;
      }
      swift_bridgeObjectRelease();
LABEL_1244:
      if ((v435 & (v21 != 0)) != 0) {
        uint64_t v404 = v23;
      }
      else {
        uint64_t v404 = 0;
      }
      uint64_t v405 = v439;
      if ((v435 & (v21 != 0)) != 0)
      {
        int v406 = 0;
      }
      else
      {
        uint64_t v405 = 0;
        int v406 = 1;
      }
      if (v21 >= 0) {
        unint64_t v100 = v35;
      }
      else {
        unint64_t v100 = 0;
      }
      if (v21 >= 0) {
        uint64_t v13 = v404;
      }
      else {
        uint64_t v13 = 0;
      }
      if (v21 >= 0) {
        uint64_t v23 = v405;
      }
      else {
        uint64_t v23 = 0;
      }
      if (v21 >= 0) {
        int v99 = v406;
      }
      else {
        int v99 = 0;
      }
      unint64_t v2 = (unint64_t)v436;
      if (v21 < 0) {
        goto LABEL_1349;
      }
LABEL_1327:
      if (!v99)
      {
        unint64_t v440 = v23;
        uint64_t v413 = *(void *)(v2 + 72);
        v414 = (void *)v2;
        unint64_t v2 = v413 + 1;
        if (!__OFADD__(v413, 1))
        {
          unint64_t v24 = v100;
          unint64_t v22 = v414[16];
          uint64_t v21 = v414[21];
          unint64_t v20 = *(void *)(v414[20] + 16);
          uint64_t v23 = v414[18];
          unint64_t v8 = v414[19];
          v436 = v414;
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          if (swift_isUniquelyReferenced_nonNull_native()) {
            goto LABEL_1330;
          }
          goto LABEL_1382;
        }
LABEL_1381:
        __break(1u);
LABEL_1382:
        unint64_t v8 = (unint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(void *)(v8 + 16) + 1, 1, (char *)v8);
LABEL_1330:
        unint64_t v416 = *(void *)(v8 + 16);
        unint64_t v415 = *(void *)(v8 + 24);
        if (v416 >= v415 >> 1)
        {
          v420 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v415 > 1), v416 + 1, 1, (char *)v8);
          unint64_t v100 = v24;
          unint64_t v8 = (unint64_t)v420;
        }
        else
        {
          unint64_t v100 = v24;
        }
        *(void *)(v8 + 16) = v416 + 1;
        unint64_t v417 = v8 + 80 * v416;
        *(void *)(v417 + 32) = v2;
        *(void *)(v417 + 40) = 0;
        *(unsigned char *)(v417 + 48) = 1;
        unint64_t v418 = v440;
        *(void *)(v417 + 56) = v13;
        *(void *)(v417 + 64) = v418;
        *(unsigned char *)(v417 + 72) = 0;
        *(unsigned char *)(v417 + 73) = v442 >> 38;
        *(void *)(v417 + 80) = v20;
        *(void *)(v417 + 88) = v21;
        *(void *)(v417 + 96) = v22;
        *(void *)(v417 + 104) = v23;
        unint64_t v2 = (unint64_t)v436;
        v436[19] = v8;
      }
      *(void *)(v2 + 64) = v100;
      return 1;
    case 1uLL:
      unint64_t v89 = v11;
      unint64_t v90 = *(void *)v2;
      unint64_t v8 = *(void *)(v2 + 8);
      uint64_t v21 = v24;
      unint64_t v24 = *(void *)(v2 + 64);
      unint64_t v91 = *(void *)(v2 + 40);
      if (v26)
      {
        BOOL v92 = v442 == 0;
        uint64_t v93 = String.matchScalar(_:at:limitedBy:boundaryCheck:isCaseInsensitive:)(v21, *(void *)(v2 + 64), *(void *)(v2 + 40), v92, 0, *(void *)v2, *(void *)(v2 + 8));
        if ((v94 & 1) == 0)
        {
          unint64_t v95 = v93;
          v436 = (void *)v2;
          uint64_t v96 = 1;
          unint64_t v20 = v24;
          do
          {
            unint64_t v22 = v24;
            uint64_t v97 = v96;
            unint64_t v24 = v95;
            if (v96) {
              uint64_t v13 = v20;
            }
            else {
              uint64_t v13 = v95;
            }
            if (v96 >= 0) {
              unint64_t v20 = v13;
            }
            unint64_t v95 = String.matchScalar(_:at:limitedBy:boundaryCheck:isCaseInsensitive:)(v21, v95, v91, v92, 0, v90, v8);
            uint64_t v96 = v97 + 1;
          }
          while ((v98 & 1) == 0);
          if (v97 < 0) {
            goto LABEL_1349;
          }
          if ((v435 & (v96 != 1)) != 0)
          {
            int v99 = 0;
            unint64_t v2 = (unint64_t)v436;
            uint64_t v23 = v22;
            unint64_t v100 = v24;
            goto LABEL_1327;
          }
          unint64_t v2 = (unint64_t)v436;
        }
        uint64_t v13 = 0;
        uint64_t v23 = 0;
        int v99 = 1;
        unint64_t v100 = v24;
        goto LABEL_1327;
      }
      if (v13)
      {
        BOOL v184 = v442 == 0;
        unint64_t v185 = String.matchScalar(_:at:limitedBy:boundaryCheck:isCaseInsensitive:)(v21, *(void *)(v2 + 64), *(void *)(v2 + 40), v184, 0, *(void *)v2, *(void *)(v2 + 8));
        if ((v186 & 1) == 0)
        {
          unint64_t v22 = v2;
          unint64_t v187 = -1;
          unint64_t v20 = v24;
          do
          {
            unint64_t v188 = v24;
            unint64_t v24 = v185;
            uint64_t v189 = v187 + 2;
            BOOL v328 = __CFADD__(v187++, 1);
            if (v328) {
              unint64_t v190 = v185;
            }
            else {
              unint64_t v190 = v20;
            }
            if (v189 >= 0) {
              unint64_t v20 = v190;
            }
            unint64_t v185 = String.matchScalar(_:at:limitedBy:boundaryCheck:isCaseInsensitive:)(v21, v185, v91, v184, 0, v90, v8);
          }
          while ((v191 & 1) == 0);
          unint64_t v192 = (v435 & (v187 != 0)) != 0 ? v20 : 0;
          unint64_t v193 = (v435 & (v187 != 0)) != 0 ? v188 : 0;
          BOOL v194 = (v435 & (v187 != 0)) == 0;
          BOOL v195 = v187 > 0x7FFFFFFFFFFFFFFELL;
          BOOL v196 = v187 > 0x7FFFFFFFFFFFFFFELL;
          unint64_t v100 = v187 <= 0x7FFFFFFFFFFFFFFELL ? v24 : 0;
          uint64_t v13 = v187 <= 0x7FFFFFFFFFFFFFFELL ? v192 : 0;
          uint64_t v23 = v195 ? 0 : v193;
          int v99 = !v195 && v194;
          unint64_t v2 = v22;
          if (!v196) {
            goto LABEL_1327;
          }
        }
        goto LABEL_1349;
      }
      v436 = (void *)v2;
      unint64_t v438 = v89;
      if (v440)
      {
        BOOL v305 = v442 == 0;
        unint64_t v306 = String.matchScalar(_:at:limitedBy:boundaryCheck:isCaseInsensitive:)(v21, v24, v91, v305, 0, v90, v8);
        if (v307)
        {
          LOBYTE(v374) = 0;
          unint64_t v22 = 0;
          unint64_t v20 = v24;
          unint64_t v310 = v24;
        }
        else
        {
          uint64_t v308 = 1;
          unint64_t v20 = v24;
          do
          {
            unint64_t v310 = v24;
            unint64_t v22 = v308;
            unint64_t v24 = v306;
            if (v438 == v308) {
              unint64_t v311 = v306;
            }
            else {
              unint64_t v311 = v20;
            }
            if ((v22 & 0x8000000000000000) == 0) {
              unint64_t v20 = v311;
            }
            if ((v22 & 0x8000000000000000) == 0 && v22 >= v440) {
              goto LABEL_1120;
            }
            unint64_t v306 = String.matchScalar(_:at:limitedBy:boundaryCheck:isCaseInsensitive:)(v21, v306, v91, v305, 0, v90, v8);
            uint64_t v308 = v22 + 1;
          }
          while ((v309 & 1) == 0);
          unint64_t v374 = v22 >> 63;
        }
        int v99 = 0;
        unint64_t v100 = 0;
        BOOL v373 = 1;
        uint64_t v13 = 0;
        uint64_t v23 = 0;
        if ((v374 & 1) != 0 || v22 < v438) {
          goto LABEL_1348;
        }
      }
      else
      {
        unint64_t v22 = 0;
        unint64_t v20 = v24;
        unint64_t v310 = v24;
LABEL_1120:
        if (v22 < v438) {
          goto LABEL_1127;
        }
      }
      if (v22 == 0 || (v435 & 1) == 0 || v22 <= v438)
      {
        uint64_t v13 = 0;
        uint64_t v23 = 0;
        BOOL v373 = 0;
        int v99 = 1;
        unint64_t v100 = v24;
      }
      else
      {
        int v99 = 0;
        BOOL v373 = 0;
        unint64_t v100 = v24;
        uint64_t v13 = v20;
        uint64_t v23 = v310;
      }
      goto LABEL_1348;
    case 2uLL:
      unint64_t v82 = *(void *)v2;
      unint64_t v8 = *(void *)(v2 + 8);
      unint64_t v83 = *(void *)(v2 + 64);
      unint64_t v84 = *(void *)(v2 + 40);
      unint64_t v439 = *(void *)v2;
      if (v26)
      {
        unint64_t v85 = v84 >> 14;
        if (v84 >> 14 <= v83 >> 14)
        {
LABEL_1134:
          char v342 = 0;
          uint64_t v13 = 0;
          uint64_t v23 = 0;
          int v99 = 1;
          goto LABEL_1241;
        }
        v436 = (void *)v2;
        unint64_t v2 = 0;
        uint64_t v86 = (v82 >> 59) & 1;
        if ((v8 & 0x1000000000000000) == 0) {
          LOBYTE(v86) = 1;
        }
        uint64_t v87 = 4 << v86;
        uint64_t v88 = HIBYTE(v8) & 0xF;
        if ((v8 & 0x2000000000000000) == 0) {
          uint64_t v88 = v82 & 0xFFFFFFFFFFFFLL;
        }
        unint64_t v437 = v88;
        unint64_t v438 = v87;
        unint64_t v433 = v8 & 0xFFFFFFFFFFFFFFLL;
        uint64_t v434 = v84;
        unint64_t v432 = (v8 & 0xFFFFFFFFFFFFFFFLL) + 32;
        uint64_t v23 = 1;
        uint64_t v13 = v83;
        unint64_t v22 = v83;
        while (1)
        {
          unint64_t v440 = v22;
          unint64_t v22 = v83;
          if (v24)
          {
            if (v442)
            {
              if ((v83 & 0xC) == v438 || (v83 & 1) == 0)
              {
                if ((v83 & 0xC) == v438)
                {
                  uint64_t v122 = _StringGuts._slowEnsureMatchingEncoding(_:)(v83, v82, v8);
                  unint64_t v82 = v439;
                  unint64_t v83 = v122;
                }
                if (v437 <= v83 >> 16) {
                  goto LABEL_1387;
                }
                if (v83) {
                  goto LABEL_258;
                }
                unint64_t v123 = _StringGuts.scalarAlignSlow(_:)(v83, v82, v8);
                unint64_t v82 = v439;
                unint64_t v83 = v83 & 0xC | v123 & 0xFFFFFFFFFFFFFFF3 | 1;
                if ((v8 & 0x1000000000000000) == 0)
                {
LABEL_259:
                  uint64_t v21 = v83 >> 16;
                  if ((v8 & 0x2000000000000000) != 0)
                  {
                    uint64_t v446 = v82;
                    unint64_t v447 = v433;
                    int v113 = *((unsigned __int8 *)&v446 + v21);
                  }
                  else
                  {
                    uint64_t v112 = v432;
                    if ((v82 & 0x1000000000000000) == 0)
                    {
                      uint64_t v112 = _StringObject.sharedUTF8.getter();
                      unint64_t v82 = v439;
                    }
                    int v113 = *(unsigned __int8 *)(v112 + v21);
                  }
                  int v114 = (char)v113;
                  unsigned int v115 = __clz(v113 ^ 0xFF) - 24;
                  if (v114 >= 0) {
                    LOBYTE(v115) = 1;
                  }
                  unint64_t v83 = ((v21 + v115) << 16) | 5;
                  goto LABEL_226;
                }
              }
              else
              {
                if (v437 <= v83 >> 16) {
                  goto LABEL_1386;
                }
LABEL_258:
                if ((v8 & 0x1000000000000000) == 0) {
                  goto LABEL_259;
                }
              }
              uint64_t v110 = String.UnicodeScalarView._foreignIndex(after:)();
            }
            else
            {
              uint64_t v110 = String.index(after:)();
            }
            unint64_t v82 = v439;
            unint64_t v83 = v110;
            goto LABEL_226;
          }
          uint64_t v21 = v83 & 0xC;
          unint64_t v107 = v83;
          if (v21 == v438)
          {
            unint64_t v107 = _StringGuts._slowEnsureMatchingEncoding(_:)(v83, v82, v8);
            unint64_t v82 = v439;
          }
          unint64_t v108 = v107 >> 16;
          if (v107 >> 16 >= v437) {
            goto LABEL_1352;
          }
          if ((v8 & 0x1000000000000000) != 0)
          {
            uint64_t v116 = String.UTF8View._foreignSubscript(position:)();
            unint64_t v82 = v439;
            unint64_t v20 = v116;
            if ((v116 & 0x80) != 0) {
              goto LABEL_305;
            }
          }
          else if ((v8 & 0x2000000000000000) != 0)
          {
            uint64_t v446 = v82;
            unint64_t v447 = v433;
            unint64_t v20 = *((unsigned __int8 *)&v446 + v108);
            if ((v20 & 0x80) != 0) {
              goto LABEL_305;
            }
          }
          else
          {
            uint64_t v109 = v432;
            if ((v82 & 0x1000000000000000) == 0)
            {
              uint64_t v109 = _StringObject.sharedUTF8.getter();
              unint64_t v82 = v439;
            }
            unint64_t v20 = *(unsigned __int8 *)(v109 + v108);
            if ((v20 & 0x80) != 0) {
              goto LABEL_305;
            }
          }
          unint64_t v111 = v22;
          if (v21 == v438)
          {
            unint64_t v111 = _StringGuts._slowEnsureMatchingEncoding(_:)(v22, v82, v8);
            unint64_t v82 = v439;
            if ((v8 & 0x1000000000000000) == 0)
            {
LABEL_252:
              unint64_t v83 = (v111 & 0xFFFFFFFFFFFF0000) + 65540;
              if (v85 == v83 >> 14) {
                goto LABEL_225;
              }
              goto LABEL_272;
            }
          }
          else if ((v8 & 0x1000000000000000) == 0)
          {
            goto LABEL_252;
          }
          if (v437 <= v111 >> 16) {
            goto LABEL_1377;
          }
          unint64_t v117 = String.UTF8View._foreignIndex(after:)();
          unint64_t v82 = v439;
          unint64_t v83 = v117;
          if (v85 == v117 >> 14)
          {
LABEL_225:
            if ((v20 - 14) >= 0xFCu) {
              goto LABEL_1238;
            }
            goto LABEL_226;
          }
LABEL_272:
          uint64_t v21 = v83 & 0xC;
          unint64_t v118 = v83;
          if (v21 == v438)
          {
            unint64_t v118 = _StringGuts._slowEnsureMatchingEncoding(_:)(v83, v82, v8);
            unint64_t v82 = v439;
          }
          unint64_t v24 = v118 >> 16;
          if (v118 >> 16 >= v437) {
            goto LABEL_1378;
          }
          if ((v8 & 0x1000000000000000) != 0)
          {
            unsigned __int8 v120 = String.UTF8View._foreignSubscript(position:)();
            unint64_t v82 = v439;
          }
          else if ((v8 & 0x2000000000000000) != 0)
          {
            uint64_t v446 = v82;
            unint64_t v447 = v433;
            unsigned __int8 v120 = *((unsigned char *)&v446 + v24);
          }
          else
          {
            uint64_t v119 = v432;
            if ((v82 & 0x1000000000000000) == 0)
            {
              uint64_t v119 = _StringObject.sharedUTF8.getter();
              unint64_t v82 = v439;
            }
            unsigned __int8 v120 = *(unsigned char *)(v119 + v24);
          }
          unint64_t v24 = v441;
          if (v120 <= 0xCBu)
          {
            if (v20 != 13 || v120 != 10) {
              goto LABEL_225;
            }
            if (v21 == v438)
            {
              uint64_t v124 = _StringGuts._slowEnsureMatchingEncoding(_:)(v83, v82, v8);
              unint64_t v82 = v439;
              unint64_t v83 = v124;
              if ((v8 & 0x1000000000000000) != 0) {
                goto LABEL_291;
              }
LABEL_287:
              unint64_t v121 = (v83 & 0xFFFFFFFFFFFF0000) + 65540;
            }
            else
            {
              if ((v8 & 0x1000000000000000) == 0) {
                goto LABEL_287;
              }
LABEL_291:
              if (v437 <= v83 >> 16) {
                goto LABEL_1421;
              }
              unint64_t v121 = String.UTF8View._foreignIndex(after:)();
              unint64_t v82 = v439;
            }
            if (v85 == v121 >> 14) {
              goto LABEL_1238;
            }
            if ((v121 & 0xC) == v438)
            {
              unint64_t v121 = _StringGuts._slowEnsureMatchingEncoding(_:)(v121, v82, v8);
              unint64_t v82 = v439;
            }
            uint64_t v21 = v121 >> 16;
            if (v121 >> 16 >= v437) {
              goto LABEL_1409;
            }
            if ((v8 & 0x1000000000000000) != 0)
            {
              unsigned __int8 v126 = String.UTF8View._foreignSubscript(position:)();
              unint64_t v82 = v439;
            }
            else if ((v8 & 0x2000000000000000) != 0)
            {
              uint64_t v446 = v82;
              unint64_t v447 = v433;
              unsigned __int8 v126 = *((unsigned char *)&v446 + v21);
            }
            else
            {
              uint64_t v125 = v432;
              if ((v82 & 0x1000000000000000) == 0)
              {
                uint64_t v125 = _StringObject.sharedUTF8.getter();
                unint64_t v82 = v439;
              }
              unsigned __int8 v126 = *(unsigned char *)(v125 + v21);
            }
            if (v126 < 0xCCu) {
              goto LABEL_1238;
            }
          }
LABEL_305:
          unint64_t v127 = String._thoroughMatchAnyNonNewline(at:limitedBy:isScalarSemantics:)(v22, v434, v442 != 0, v82, v8);
          if (v128)
          {
            unint64_t v2 = v23 - 1;
LABEL_1238:
            unint64_t v83 = v22;
            uint64_t v23 = v440;
            if ((v2 & 0x8000000000000000) != 0) {
              goto LABEL_1239;
            }
LABEL_1011:
            if ((v435 & (v2 != 0)) != 0)
            {
              char v342 = 0;
              int v99 = 0;
              goto LABEL_1240;
            }
            unint64_t v2 = (unint64_t)v436;
            goto LABEL_1134;
          }
          unint64_t v83 = v127;
          unint64_t v82 = v439;
LABEL_226:
          ++v2;
          if (v23) {
            uint64_t v106 = v13;
          }
          else {
            uint64_t v106 = v83;
          }
          if (v23 >= 0) {
            uint64_t v13 = v106;
          }
          ++v23;
          if (v85 <= v83 >> 14)
          {
            unint64_t v2 = v23 - 1;
            uint64_t v23 = v22;
            if ((v2 & 0x8000000000000000) == 0) {
              goto LABEL_1011;
            }
LABEL_1239:
            unint64_t v83 = 0;
            uint64_t v13 = 0;
            uint64_t v23 = 0;
            int v99 = 0;
            char v342 = 1;
LABEL_1240:
            unint64_t v2 = (unint64_t)v436;
LABEL_1241:
            unint64_t v100 = v83;
            if ((v342 & 1) == 0) {
              goto LABEL_1327;
            }
            goto LABEL_1349;
          }
        }
      }
      if (v13)
      {
        v436 = (void *)v2;
        unint64_t v2 = v84 >> 14;
        if (v84 >> 14 > v83 >> 14)
        {
          uint64_t v129 = 0;
          uint64_t v130 = (v82 >> 59) & 1;
          if ((v8 & 0x1000000000000000) == 0) {
            LOBYTE(v130) = 1;
          }
          unint64_t v440 = 4 << v130;
          if ((v8 & 0x2000000000000000) != 0) {
            uint64_t v131 = HIBYTE(v8) & 0xF;
          }
          else {
            uint64_t v131 = v82 & 0xFFFFFFFFFFFFLL;
          }
          unint64_t v437 = v8 & 0xFFFFFFFFFFFFFFLL;
          unint64_t v438 = v131;
          unint64_t v433 = (v8 & 0xFFFFFFFFFFFFFFFLL) + 32;
          uint64_t v434 = v84;
          uint64_t v13 = v83;
          unint64_t v22 = v83;
          while (1)
          {
            uint64_t v23 = v22;
            unint64_t v22 = v83;
            if ((v24 & 1) == 0)
            {
              uint64_t v21 = v83 & 0xC;
              unint64_t v203 = v83;
              if (v21 == v440)
              {
                unint64_t v203 = _StringGuts._slowEnsureMatchingEncoding(_:)(v83, v82, v8);
                unint64_t v82 = v439;
              }
              unint64_t v204 = v203 >> 16;
              if (v203 >> 16 >= v438) {
                goto LABEL_1369;
              }
              if ((v8 & 0x1000000000000000) != 0)
              {
                uint64_t v212 = String.UTF8View._foreignSubscript(position:)();
                unint64_t v82 = v439;
                unint64_t v20 = v212;
                if ((v212 & 0x80) != 0) {
                  goto LABEL_609;
                }
              }
              else if ((v8 & 0x2000000000000000) != 0)
              {
                uint64_t v446 = v82;
                unint64_t v447 = v437;
                unint64_t v20 = *((unsigned __int8 *)&v446 + v204);
                if ((v20 & 0x80) != 0) {
                  goto LABEL_609;
                }
              }
              else
              {
                uint64_t v205 = v433;
                if ((v82 & 0x1000000000000000) == 0)
                {
                  uint64_t v205 = _StringObject.sharedUTF8.getter();
                  unint64_t v82 = v439;
                }
                unint64_t v20 = *(unsigned __int8 *)(v205 + v204);
                if ((v20 & 0x80) != 0) {
                  goto LABEL_609;
                }
              }
              unint64_t v207 = v22;
              if (v21 == v440)
              {
                unint64_t v207 = _StringGuts._slowEnsureMatchingEncoding(_:)(v22, v82, v8);
                unint64_t v82 = v439;
                if ((v8 & 0x1000000000000000) != 0) {
                  goto LABEL_574;
                }
LABEL_556:
                unint64_t v83 = (v207 & 0xFFFFFFFFFFFF0000) + 65540;
                if (v2 != v83 >> 14)
                {
LABEL_576:
                  uint64_t v21 = v83 & 0xC;
                  unint64_t v214 = v83;
                  if (v21 == v440)
                  {
                    unint64_t v214 = _StringGuts._slowEnsureMatchingEncoding(_:)(v83, v82, v8);
                    unint64_t v82 = v439;
                  }
                  unint64_t v215 = v214 >> 16;
                  if (v214 >> 16 >= v438) {
                    goto LABEL_1395;
                  }
                  if ((v8 & 0x1000000000000000) != 0)
                  {
                    unsigned __int8 v217 = String.UTF8View._foreignSubscript(position:)();
                    unint64_t v82 = v439;
                  }
                  else if ((v8 & 0x2000000000000000) != 0)
                  {
                    uint64_t v446 = v82;
                    unint64_t v447 = v437;
                    unsigned __int8 v217 = *((unsigned char *)&v446 + v215);
                  }
                  else
                  {
                    uint64_t v216 = v433;
                    if ((v82 & 0x1000000000000000) == 0)
                    {
                      uint64_t v216 = _StringObject.sharedUTF8.getter();
                      unint64_t v82 = v439;
                    }
                    unsigned __int8 v217 = *(unsigned char *)(v216 + v215);
                  }
                  unint64_t v24 = v441;
                  if (v217 > 0xCBu) {
                    goto LABEL_609;
                  }
                  if (v20 == 13 && v217 == 10)
                  {
                    if (v21 == v440)
                    {
                      uint64_t v221 = _StringGuts._slowEnsureMatchingEncoding(_:)(v83, v82, v8);
                      unint64_t v82 = v439;
                      unint64_t v83 = v221;
                      if ((v8 & 0x1000000000000000) != 0) {
                        goto LABEL_595;
                      }
LABEL_591:
                      unint64_t v218 = (v83 & 0xFFFFFFFFFFFF0000) + 65540;
                    }
                    else
                    {
                      if ((v8 & 0x1000000000000000) == 0) {
                        goto LABEL_591;
                      }
LABEL_595:
                      if (v438 <= v83 >> 16) {
                        goto LABEL_1434;
                      }
                      unint64_t v218 = String.UTF8View._foreignIndex(after:)();
                      unint64_t v82 = v439;
                    }
                    if (v2 == v218 >> 14) {
                      goto LABEL_1264;
                    }
                    if ((v218 & 0xC) == v440)
                    {
                      unint64_t v218 = _StringGuts._slowEnsureMatchingEncoding(_:)(v218, v82, v8);
                      unint64_t v82 = v439;
                    }
                    uint64_t v21 = v218 >> 16;
                    if (v218 >> 16 >= v438) {
                      goto LABEL_1423;
                    }
                    if ((v8 & 0x1000000000000000) != 0)
                    {
                      unsigned __int8 v223 = String.UTF8View._foreignSubscript(position:)();
                      unint64_t v82 = v439;
                    }
                    else if ((v8 & 0x2000000000000000) != 0)
                    {
                      uint64_t v446 = v82;
                      unint64_t v447 = v437;
                      unsigned __int8 v223 = *((unsigned char *)&v446 + v21);
                    }
                    else
                    {
                      uint64_t v222 = v433;
                      if ((v82 & 0x1000000000000000) == 0)
                      {
                        uint64_t v222 = _StringObject.sharedUTF8.getter();
                        unint64_t v82 = v439;
                      }
                      unsigned __int8 v223 = *(unsigned char *)(v222 + v21);
                    }
                    if (v223 < 0xCCu)
                    {
LABEL_1264:
                      uint64_t v201 = v129;
                      unint64_t v83 = v22;
LABEL_1265:
                      if ((v435 & (v201 != 1)) != 0) {
                        uint64_t v407 = v13;
                      }
                      else {
                        uint64_t v407 = 0;
                      }
                      if ((v435 & (v201 != 1)) != 0) {
                        uint64_t v408 = v23;
                      }
                      else {
                        uint64_t v408 = 0;
                      }
                      BOOL v373 = v201 < 1;
                      if (v201 >= 1) {
                        unint64_t v100 = v83;
                      }
                      else {
                        unint64_t v100 = 0;
                      }
                      if (v201 >= 1) {
                        uint64_t v13 = v407;
                      }
                      else {
                        uint64_t v13 = 0;
                      }
                      if (v201 >= 1) {
                        uint64_t v23 = v408;
                      }
                      else {
                        uint64_t v23 = 0;
                      }
                      int v99 = v201 >= 1 && (v435 & (v201 != 1)) == 0;
LABEL_1348:
                      unint64_t v2 = (unint64_t)v436;
                      if (!v373) {
                        goto LABEL_1327;
                      }
                      goto LABEL_1349;
                    }
LABEL_609:
                    unint64_t v224 = String._thoroughMatchAnyNonNewline(at:limitedBy:isScalarSemantics:)(v22, v434, v442 != 0, v82, v8);
                    if (v225) {
                      goto LABEL_1264;
                    }
                    unint64_t v83 = v224;
                    unint64_t v82 = v439;
                    goto LABEL_530;
                  }
                }
              }
              else
              {
                if ((v8 & 0x1000000000000000) == 0) {
                  goto LABEL_556;
                }
LABEL_574:
                if (v438 <= v207 >> 16) {
                  goto LABEL_1394;
                }
                unint64_t v213 = String.UTF8View._foreignIndex(after:)();
                unint64_t v82 = v439;
                unint64_t v83 = v213;
                if (v2 != v213 >> 14) {
                  goto LABEL_576;
                }
              }
              if ((v20 - 14) >= 0xFCu) {
                goto LABEL_1264;
              }
              goto LABEL_530;
            }
            if (v442) {
              break;
            }
            uint64_t v206 = String.index(after:)();
LABEL_552:
            unint64_t v82 = v439;
            unint64_t v83 = v206;
LABEL_530:
            uint64_t v201 = v129 + 1;
            if (v129) {
              uint64_t v202 = v13;
            }
            else {
              uint64_t v202 = v83;
            }
            if (v201 >= 0) {
              uint64_t v13 = v202;
            }
            ++v129;
            uint64_t v23 = v22;
            if (v2 <= v83 >> 14) {
              goto LABEL_1265;
            }
          }
          if ((v83 & 0xC) == v440 || (v83 & 1) == 0)
          {
            if ((v83 & 0xC) == v440)
            {
              uint64_t v219 = _StringGuts._slowEnsureMatchingEncoding(_:)(v83, v82, v8);
              unint64_t v82 = v439;
              unint64_t v83 = v219;
            }
            if (v438 <= v83 >> 16) {
              goto LABEL_1400;
            }
            if ((v83 & 1) == 0)
            {
              unint64_t v220 = _StringGuts.scalarAlignSlow(_:)(v83, v82, v8);
              unint64_t v82 = v439;
              unint64_t v83 = v83 & 0xC | v220 & 0xFFFFFFFFFFFFFFF3 | 1;
              if ((v8 & 0x1000000000000000) == 0)
              {
LABEL_563:
                uint64_t v21 = v83 >> 16;
                if ((v8 & 0x2000000000000000) != 0)
                {
                  uint64_t v446 = v82;
                  unint64_t v447 = v437;
                  int v209 = *((unsigned __int8 *)&v446 + v21);
                }
                else
                {
                  uint64_t v208 = v433;
                  if ((v82 & 0x1000000000000000) == 0)
                  {
                    uint64_t v208 = _StringObject.sharedUTF8.getter();
                    unint64_t v82 = v439;
                  }
                  int v209 = *(unsigned __int8 *)(v208 + v21);
                }
                int v210 = (char)v209;
                unsigned int v211 = __clz(v209 ^ 0xFF) - 24;
                if (v210 >= 0) {
                  LOBYTE(v211) = 1;
                }
                unint64_t v83 = ((v21 + v211) << 16) | 5;
                goto LABEL_530;
              }
              goto LABEL_593;
            }
          }
          else if (v438 <= v83 >> 16)
          {
            goto LABEL_1399;
          }
          if ((v8 & 0x1000000000000000) == 0) {
            goto LABEL_563;
          }
LABEL_593:
          uint64_t v206 = String.UnicodeScalarView._foreignIndex(after:)();
          goto LABEL_552;
        }
LABEL_1127:
        unint64_t v100 = 0;
        uint64_t v13 = 0;
        uint64_t v23 = 0;
        int v99 = 0;
        BOOL v373 = 1;
        goto LABEL_1348;
      }
      unint64_t v438 = v11;
      if (!v440)
      {
        v436 = (void *)v2;
        unint64_t v2 = 0;
        uint64_t v409 = v83;
        unint64_t v20 = v83;
        goto LABEL_1291;
      }
      uint64_t v226 = (v82 >> 59) & 1;
      if ((v8 & 0x1000000000000000) == 0) {
        LOBYTE(v226) = 1;
      }
      uint64_t v227 = HIBYTE(v8) & 0xF;
      if ((v8 & 0x2000000000000000) == 0) {
        uint64_t v227 = v82 & 0xFFFFFFFFFFFFLL;
      }
      unint64_t v432 = v227;
      unint64_t v433 = v84 >> 14;
      if (v84 >> 14 <= v83 >> 14)
      {
        LOBYTE(v23) = 0;
        unint64_t v228 = 0;
        uint64_t v13 = v83;
        unint64_t v20 = v83;
LABEL_1356:
        int v99 = 0;
        unint64_t v100 = 0;
        char v372 = 1;
        if (v23)
        {
          uint64_t v13 = 0;
          uint64_t v23 = 0;
        }
        else
        {
          uint64_t v409 = v13;
          uint64_t v13 = 0;
          uint64_t v23 = 0;
          if (v228 >= v438) {
            goto LABEL_1358;
          }
        }
        goto LABEL_1326;
      }
      uint64_t v434 = v84;
      unint64_t v228 = 0;
      LOBYTE(v23) = 0;
      v436 = (void *)v2;
      unint64_t v437 = 4 << v226;
      unint64_t v430 = (v8 & 0xFFFFFFFFFFFFFFFLL) + 32;
      unint64_t v431 = v8 & 0xFFFFFFFFFFFFFFLL;
      unint64_t v2 = 1;
      unint64_t v24 = v83;
      uint64_t v13 = v83;
      while (1)
      {
        unint64_t v20 = v83;
        if ((v441 & 1) == 0)
        {
          uint64_t v21 = v83 & 0xC;
          unint64_t v229 = v83;
          if (v21 == v437)
          {
            unint64_t v229 = _StringGuts._slowEnsureMatchingEncoding(_:)(v83, v82, v8);
            unint64_t v82 = v439;
          }
          unint64_t v230 = v229 >> 16;
          if (v229 >> 16 >= v432) {
            goto LABEL_1393;
          }
          if ((v8 & 0x1000000000000000) != 0)
          {
            uint64_t v238 = String.UTF8View._foreignSubscript(position:)();
            unint64_t v82 = v439;
            unint64_t v22 = v238;
            if ((v238 & 0x80) != 0) {
              goto LABEL_693;
            }
          }
          else if ((v8 & 0x2000000000000000) != 0)
          {
            uint64_t v446 = v82;
            unint64_t v447 = v431;
            unint64_t v22 = *((unsigned __int8 *)&v446 + v230);
            if ((v22 & 0x80) != 0) {
              goto LABEL_693;
            }
          }
          else
          {
            uint64_t v231 = v430;
            if ((v82 & 0x1000000000000000) == 0)
            {
              uint64_t v231 = _StringObject.sharedUTF8.getter();
              unint64_t v82 = v439;
            }
            unint64_t v22 = *(unsigned __int8 *)(v231 + v230);
            if ((v22 & 0x80) != 0)
            {
LABEL_693:
              unint64_t v232 = String._thoroughMatchAnyNonNewline(at:limitedBy:isScalarSemantics:)(v20, v434, v442 != 0, v82, v8);
              if (v249) {
                goto LABEL_1354;
              }
              goto LABEL_694;
            }
          }
          unint64_t v233 = v83;
          if (v21 == v437)
          {
            unint64_t v233 = _StringGuts._slowEnsureMatchingEncoding(_:)(v83, v82, v8);
            if ((v8 & 0x1000000000000000) != 0) {
              goto LABEL_655;
            }
LABEL_638:
            unint64_t v83 = (v233 & 0xFFFFFFFFFFFF0000) + 65540;
          }
          else
          {
            if ((v8 & 0x1000000000000000) == 0) {
              goto LABEL_638;
            }
LABEL_655:
            if (v432 <= v233 >> 16) {
              goto LABEL_1415;
            }
            unint64_t v83 = String.UTF8View._foreignIndex(after:)();
          }
          if (v433 == v83 >> 14) {
            goto LABEL_658;
          }
          unint64_t v429 = v13;
          uint64_t v21 = v83 & 0xC;
          unint64_t v239 = v83;
          if (v21 == v437) {
            unint64_t v239 = _StringGuts._slowEnsureMatchingEncoding(_:)(v83, v439, v8);
          }
          unint64_t v240 = v239 >> 16;
          unint64_t v82 = v439;
          if (v239 >> 16 >= v432) {
            goto LABEL_1416;
          }
          if ((v8 & 0x1000000000000000) != 0)
          {
            unsigned __int8 v242 = String.UTF8View._foreignSubscript(position:)();
            unint64_t v82 = v439;
          }
          else if ((v8 & 0x2000000000000000) != 0)
          {
            uint64_t v446 = v439;
            unint64_t v447 = v431;
            unsigned __int8 v242 = *((unsigned char *)&v446 + v240);
          }
          else
          {
            uint64_t v241 = v430;
            if ((v439 & 0x1000000000000000) == 0)
            {
              uint64_t v241 = _StringObject.sharedUTF8.getter();
              unint64_t v82 = v439;
            }
            unsigned __int8 v242 = *(unsigned char *)(v241 + v240);
          }
          uint64_t v13 = v429;
          if (v242 > 0xCBu) {
            goto LABEL_693;
          }
          if (v22 != 13 || v242 != 10)
          {
LABEL_658:
            if ((v22 - 14) >= 0xFCu) {
              goto LABEL_1354;
            }
            goto LABEL_695;
          }
          if (v21 == v437)
          {
            unint64_t v83 = _StringGuts._slowEnsureMatchingEncoding(_:)(v83, v439, v8);
            unint64_t v82 = v439;
            if ((v8 & 0x1000000000000000) != 0) {
              goto LABEL_679;
            }
LABEL_675:
            unint64_t v243 = (v83 & 0xFFFFFFFFFFFF0000) + 65540;
          }
          else
          {
            unint64_t v82 = v439;
            if ((v8 & 0x1000000000000000) == 0) {
              goto LABEL_675;
            }
LABEL_679:
            if (v432 <= v83 >> 16) {
              goto LABEL_1449;
            }
            unint64_t v243 = String.UTF8View._foreignIndex(after:)();
            unint64_t v82 = v439;
          }
          if (v433 == v243 >> 14) {
            goto LABEL_1353;
          }
          if ((v243 & 0xC) == v437)
          {
            unint64_t v243 = _StringGuts._slowEnsureMatchingEncoding(_:)(v243, v82, v8);
            unint64_t v82 = v439;
          }
          unint64_t v246 = v243 >> 16;
          if (v243 >> 16 >= v432) {
            goto LABEL_1437;
          }
          if ((v8 & 0x1000000000000000) != 0)
          {
            unsigned __int8 v248 = String.UTF8View._foreignSubscript(position:)();
            unint64_t v82 = v439;
          }
          else if ((v8 & 0x2000000000000000) != 0)
          {
            uint64_t v446 = v82;
            unint64_t v447 = v431;
            unsigned __int8 v248 = *((unsigned char *)&v446 + v246);
          }
          else
          {
            uint64_t v247 = v430;
            if ((v82 & 0x1000000000000000) == 0)
            {
              uint64_t v247 = _StringObject.sharedUTF8.getter();
              unint64_t v82 = v439;
            }
            unsigned __int8 v248 = *(unsigned char *)(v247 + v246);
          }
          uint64_t v13 = v429;
          if (v248 < 0xCCu) {
            goto LABEL_1354;
          }
          goto LABEL_693;
        }
        if (v442) {
          break;
        }
        unint64_t v232 = String.index(after:)();
LABEL_694:
        unint64_t v83 = v232;
LABEL_695:
        if (v438 == v2) {
          uint64_t v250 = v83;
        }
        else {
          uint64_t v250 = v13;
        }
        if ((v2 & 0x8000000000000000) == 0) {
          uint64_t v13 = v250;
        }
        if ((v2 & 0x8000000000000000) == 0 && v2 >= v440)
        {
          uint64_t v409 = v13;
LABEL_1291:
          unint64_t v228 = v2;
          BOOL v328 = v2 >= v438;
          unint64_t v2 = (unint64_t)v436;
          if (!v328) {
            goto LABEL_1349;
          }
LABEL_1358:
          if (v228 == 0 || (v435 & 1) == 0 || v228 <= v438)
          {
            uint64_t v13 = 0;
            uint64_t v23 = 0;
            int v99 = 1;
            unint64_t v100 = v83;
          }
          else
          {
            int v99 = 0;
            unint64_t v100 = v83;
            uint64_t v13 = v409;
            uint64_t v23 = v20;
          }
          goto LABEL_1327;
        }
        uint64_t v23 = v2++ >> 63;
        ++v228;
        unint64_t v24 = v20;
        unint64_t v82 = v439;
        if (v433 <= v83 >> 14)
        {
          unint64_t v228 = v2 - 1;
          goto LABEL_1355;
        }
      }
      if ((v83 & 0xC) == v437 || (v83 & 1) == 0)
      {
        unint64_t v22 = v83;
        if ((v83 & 0xC) == v437)
        {
          uint64_t v244 = _StringGuts._slowEnsureMatchingEncoding(_:)(v83, v82, v8);
          unint64_t v82 = v439;
          unint64_t v22 = v244;
        }
        if (v432 <= v22 >> 16) {
          goto LABEL_1418;
        }
        if ((v22 & 1) == 0)
        {
          unint64_t v245 = _StringGuts.scalarAlignSlow(_:)(v22, v82, v8);
          unint64_t v82 = v439;
          unint64_t v22 = v22 & 0xC | v245 & 0xFFFFFFFFFFFFFFF3 | 1;
          if ((v8 & 0x1000000000000000) == 0)
          {
LABEL_644:
            v22 >>= 16;
            if ((v8 & 0x2000000000000000) != 0)
            {
              uint64_t v446 = v82;
              unint64_t v447 = v431;
              int v235 = *((unsigned __int8 *)&v446 + v22);
            }
            else
            {
              uint64_t v234 = v430;
              if ((v82 & 0x1000000000000000) == 0) {
                uint64_t v234 = _StringObject.sharedUTF8.getter();
              }
              int v235 = *(unsigned __int8 *)(v234 + v22);
            }
            int v236 = (char)v235;
            unsigned int v237 = __clz(v235 ^ 0xFF) - 24;
            if (v236 >= 0) {
              LOBYTE(v237) = 1;
            }
            unint64_t v83 = ((v22 + v237) << 16) | 5;
            goto LABEL_695;
          }
          goto LABEL_677;
        }
      }
      else
      {
        unint64_t v22 = v83;
        if (v432 <= v83 >> 16) {
          goto LABEL_1417;
        }
      }
      if ((v8 & 0x1000000000000000) == 0) {
        goto LABEL_644;
      }
LABEL_677:
      unint64_t v232 = String.UnicodeScalarView._foreignIndex(after:)();
      goto LABEL_694;
    case 4uLL:
      unint64_t v101 = *(void *)v2;
      unint64_t v8 = *(void *)(v2 + 8);
      uint64_t v434 = (v24 >> 10) & 1;
      unint64_t v437 = (v24 >> 9) & 1;
      unint64_t v439 = v101;
      if (v26)
      {
        int v102 = v24;
        unint64_t v100 = *(void *)(v2 + 64);
        unint64_t v432 = *(void *)(v2 + 40);
        unint64_t v22 = v432 >> 14;
        if (v432 >> 14 <= v100 >> 14) {
          goto LABEL_1324;
        }
        v436 = (void *)v2;
        unint64_t v20 = 0;
        LODWORD(v428) = v442 == 0;
        uint64_t v103 = (v101 >> 59) & 1;
        if ((v8 & 0x1000000000000000) == 0) {
          LOBYTE(v103) = 1;
        }
        unint64_t v2 = 4 << v103;
        uint64_t v104 = HIBYTE(v8) & 0xF;
        if ((v8 & 0x2000000000000000) == 0) {
          uint64_t v104 = v101 & 0xFFFFFFFFFFFFLL;
        }
        unint64_t v438 = v104;
        unint64_t v430 = (v8 & 0xFFFFFFFFFFFFFFFLL) + 32;
        unint64_t v431 = v8 & 0xFFFFFFFFFFFFFFLL;
        uint64_t v23 = 1;
        unint64_t v429 = v441;
        uint64_t v13 = v100;
        unint64_t v105 = v100;
        while (1)
        {
          unint64_t v440 = v105;
          unint64_t v105 = v100;
          uint64_t v21 = v100 & 0xC;
          unint64_t v344 = v100;
          if (v21 == v2)
          {
            unint64_t v344 = _StringGuts._slowEnsureMatchingEncoding(_:)(v100, v101, v8);
            unint64_t v101 = v439;
          }
          unint64_t v24 = v344 >> 16;
          if (v344 >> 16 >= v438)
          {
LABEL_1351:
            __break(1u);
LABEL_1352:
            __break(1u);
LABEL_1353:
            unint64_t v228 = v2 - 1;
LABEL_1354:
            unint64_t v83 = v20;
            unint64_t v20 = v24;
LABEL_1355:
            unint64_t v2 = (unint64_t)v436;
            goto LABEL_1356;
          }
          if ((v8 & 0x1000000000000000) != 0)
          {
            unsigned __int8 v353 = String.UTF8View._foreignSubscript(position:)();
            unint64_t v101 = v439;
            unsigned __int8 v346 = v353;
            if ((v353 & 0x80) != 0) {
              goto LABEL_1109;
            }
          }
          else if ((v8 & 0x2000000000000000) != 0)
          {
            uint64_t v446 = v101;
            unint64_t v447 = v431;
            unsigned __int8 v346 = *((unsigned char *)&v446 + v24);
            if ((v346 & 0x80) != 0) {
              goto LABEL_1109;
            }
          }
          else
          {
            uint64_t v345 = v430;
            if ((v101 & 0x1000000000000000) == 0)
            {
              uint64_t v345 = _StringObject.sharedUTF8.getter();
              unint64_t v101 = v439;
            }
            unsigned __int8 v346 = *(unsigned char *)(v345 + v24);
            if ((v346 & 0x80) != 0) {
              goto LABEL_1109;
            }
          }
          unint64_t v347 = v105;
          if (v21 == v2)
          {
            unint64_t v347 = _StringGuts._slowEnsureMatchingEncoding(_:)(v105, v101, v8);
            unint64_t v101 = v439;
            if ((v8 & 0x1000000000000000) == 0)
            {
LABEL_1033:
              unint64_t v100 = (v347 & 0xFFFFFFFFFFFF0000) + 65540;
              if (v22 == v100 >> 14) {
                goto LABEL_1034;
              }
              goto LABEL_1077;
            }
          }
          else if ((v8 & 0x1000000000000000) == 0)
          {
            goto LABEL_1033;
          }
          if (v438 <= v347 >> 16) {
            goto LABEL_1372;
          }
          unint64_t v354 = String.UTF8View._foreignIndex(after:)();
          unint64_t v101 = v439;
          unint64_t v100 = v354;
          if (v22 == v354 >> 14)
          {
LABEL_1034:
            int v348 = 1;
            goto LABEL_1035;
          }
LABEL_1077:
          unint64_t v24 = v22;
          uint64_t v21 = v100 & 0xC;
          unint64_t v355 = v100;
          if (v21 == v2)
          {
            unint64_t v359 = v100;
            unint64_t v355 = _StringGuts._slowEnsureMatchingEncoding(_:)(v100, v101, v8);
            unint64_t v101 = v439;
            unint64_t v100 = v359;
          }
          unint64_t v22 = v355 >> 16;
          if (v355 >> 16 >= v438) {
            goto LABEL_1373;
          }
          if ((v8 & 0x1000000000000000) != 0)
          {
            unint64_t v358 = v100;
            unsigned __int8 v357 = String.UTF8View._foreignSubscript(position:)();
            unint64_t v101 = v439;
            unint64_t v100 = v358;
          }
          else if ((v8 & 0x2000000000000000) != 0)
          {
            uint64_t v446 = v101;
            unint64_t v447 = v431;
            unsigned __int8 v357 = *((unsigned char *)&v446 + v22);
          }
          else
          {
            uint64_t v356 = v430;
            if ((v101 & 0x1000000000000000) == 0)
            {
              unint64_t v433 = v100;
              uint64_t v356 = _StringObject.sharedUTF8.getter();
              unint64_t v101 = v439;
              unint64_t v100 = v433;
            }
            unsigned __int8 v357 = *(unsigned char *)(v356 + v22);
          }
          unint64_t v22 = v24;
          if (v357 > 0xCBu) {
            goto LABEL_1109;
          }
          int v348 = 1;
          if (v346 == 13 && v357 == 10)
          {
            if (v21 == v2)
            {
              uint64_t v360 = _StringGuts._slowEnsureMatchingEncoding(_:)(v100, v101, v8);
              unint64_t v101 = v439;
              unint64_t v100 = v360;
              if ((v8 & 0x1000000000000000) != 0) {
                goto LABEL_1095;
              }
LABEL_1092:
              unint64_t v100 = (v100 & 0xFFFFFFFFFFFF0000) + 65540;
              if (v24 != v100 >> 14)
              {
LABEL_1097:
                unint64_t v362 = v100;
                if ((v100 & 0xC) == v2)
                {
                  unint64_t v369 = v100;
                  unint64_t v362 = _StringGuts._slowEnsureMatchingEncoding(_:)(v100, v101, v8);
                  unint64_t v101 = v439;
                  unint64_t v100 = v369;
                }
                unint64_t v363 = v362 >> 16;
                if (v362 >> 16 >= v438) {
                  goto LABEL_1414;
                }
                if ((v8 & 0x1000000000000000) != 0)
                {
                  unint64_t v366 = v100;
                  unsigned __int8 v365 = String.UTF8View._foreignSubscript(position:)();
                  unint64_t v101 = v439;
                  unint64_t v100 = v366;
                }
                else if ((v8 & 0x2000000000000000) != 0)
                {
                  uint64_t v446 = v101;
                  unint64_t v447 = v431;
                  unsigned __int8 v365 = *((unsigned char *)&v446 + v363);
                }
                else
                {
                  uint64_t v364 = v430;
                  if ((v101 & 0x1000000000000000) == 0)
                  {
                    uint64_t v21 = v100;
                    uint64_t v364 = _StringObject.sharedUTF8.getter();
                    unint64_t v101 = v439;
                    unint64_t v100 = v21;
                  }
                  unsigned __int8 v365 = *(unsigned char *)(v364 + v363);
                }
                unint64_t v22 = v24;
                if (v365 > 0xCBu)
                {
LABEL_1109:
                  uint64_t v367 = String._thoroughMatchBuiltinCC(_:at:limitedBy:isInverted:isStrictASCII:isScalarSemantics:)(v441, v105, v432, v437, v434, v442 != 0, v101, v8);
                  if (v368) {
                    goto LABEL_1321;
                  }
                  unint64_t v100 = v367;
                  unint64_t v101 = v439;
                  goto LABEL_1015;
                }
              }
            }
            else
            {
              if ((v8 & 0x1000000000000000) == 0) {
                goto LABEL_1092;
              }
LABEL_1095:
              if (v438 <= v100 >> 16) {
                goto LABEL_1413;
              }
              unint64_t v361 = String.UTF8View._foreignIndex(after:)();
              unint64_t v101 = v439;
              unint64_t v100 = v361;
              if (v24 != v361 >> 14) {
                goto LABEL_1097;
              }
            }
            int v348 = 0;
          }
LABEL_1035:
          switch(v102)
          {
            case 0:
            case 1:
              goto LABEL_1014;
            case 2:
              BOOL v349 = (v346 - 48) >= 0xAu;
              goto LABEL_1057;
            case 3:
              int v351 = v346 == 32 || v346 == 9;
              goto LABEL_1060;
            case 4:
            case 5:
              if ((v346 - 10) > 3u) {
                goto LABEL_1070;
              }
              if (!v442 || v441 != 5 || v348 == 1) {
                goto LABEL_1014;
              }
              if ((v100 & 0xC) == v2)
              {
                unint64_t v370 = _StringGuts._slowEnsureMatchingEncoding(_:)(v100, v101, v8);
                unint64_t v101 = v439;
                unint64_t v100 = v370;
                if (v370 < 0x4000) {
                  goto LABEL_1420;
                }
              }
              else if (v100 < 0x4000)
              {
                goto LABEL_1420;
              }
              if ((v8 & 0x1000000000000000) == 0) {
                goto LABEL_1013;
              }
              if (v438 < v100 >> 16) {
                goto LABEL_1433;
              }
              goto LABEL_1068;
            case 6:
              if (v346 - 9 < 5 || v346 == 32)
              {
                if (((v348 | v428) & 1) == 0)
                {
                  if ((v100 & 0xC) == v2)
                  {
                    unint64_t v371 = _StringGuts._slowEnsureMatchingEncoding(_:)(v100, v101, v8);
                    unint64_t v101 = v439;
                    unint64_t v100 = v371;
                    if (v371 < 0x4000) {
                      goto LABEL_1422;
                    }
                  }
                  else if (v100 < 0x4000)
                  {
                    goto LABEL_1422;
                  }
                  if ((v8 & 0x1000000000000000) != 0)
                  {
                    if (v438 < v100 >> 16) {
                      goto LABEL_1436;
                    }
LABEL_1068:
                    uint64_t v352 = String.UTF8View._foreignIndex(before:)();
                    unint64_t v101 = v439;
                    unint64_t v100 = v352;
                  }
                  else
                  {
LABEL_1013:
                    unint64_t v100 = (v100 & 0xFFFFFFFFFFFF0000) - 65532;
                  }
                }
LABEL_1014:
                if ((v441 & 0x200) != 0)
                {
LABEL_1321:
                  unint64_t v100 = v105;
                  uint64_t v23 = v440;
                  unint64_t v2 = (unint64_t)v436;
                  if ((v20 & 0x8000000000000000) == 0)
                  {
LABEL_1322:
                    if ((v435 & (v20 != 0)) != 0)
                    {
                      char v372 = 0;
                      int v99 = 0;
                      goto LABEL_1326;
                    }
LABEL_1324:
                    char v372 = 0;
LABEL_1325:
                    uint64_t v13 = 0;
                    uint64_t v23 = 0;
                    int v99 = 1;
LABEL_1326:
                    if ((v372 & 1) == 0) {
                      goto LABEL_1327;
                    }
                    goto LABEL_1349;
                  }
LABEL_1116:
                  unint64_t v100 = 0;
                  uint64_t v13 = 0;
                  uint64_t v23 = 0;
                  int v99 = 0;
                  char v372 = 1;
                  goto LABEL_1326;
                }
              }
              else
              {
LABEL_1070:
                if ((v441 & 0x200) == 0) {
                  goto LABEL_1321;
                }
              }
              break;
            case 7:
              if ((v346 - 58) > 0xF5u || (v346 - 123) > 0xE5u) {
                goto LABEL_1014;
              }
              BOOL v349 = v346 != 95 && (v346 - 65) >= 0x1Au;
LABEL_1057:
              int v351 = !v349;
LABEL_1060:
              if (v437 != v351) {
                break;
              }
              unint64_t v20 = v23 - 1;
              goto LABEL_1321;
            default:
              goto LABEL_1454;
          }
LABEL_1015:
          ++v20;
          if (v23) {
            uint64_t v343 = v13;
          }
          else {
            uint64_t v343 = v100;
          }
          if (v23 >= 0) {
            uint64_t v13 = v343;
          }
          ++v23;
          if (v22 <= v100 >> 14)
          {
            unint64_t v20 = v23 - 1;
            uint64_t v23 = v105;
            unint64_t v2 = (unint64_t)v436;
            if ((v20 & 0x8000000000000000) == 0) {
              goto LABEL_1322;
            }
            goto LABEL_1116;
          }
        }
      }
      if (v13)
      {
        int v197 = v24;
        unint64_t v100 = *(void *)(v2 + 64);
        unint64_t v438 = *(void *)(v2 + 40);
        unint64_t v24 = v438 >> 14;
        if (v438 >> 14 <= v100 >> 14) {
          goto LABEL_1116;
        }
        v436 = (void *)v2;
        unint64_t v22 = 0;
        LODWORD(v429) = v442 == 0;
        uint64_t v198 = (v101 >> 59) & 1;
        if ((v8 & 0x1000000000000000) == 0) {
          LOBYTE(v198) = 1;
        }
        unint64_t v2 = 4 << v198;
        uint64_t v199 = HIBYTE(v8) & 0xF;
        if ((v8 & 0x2000000000000000) == 0) {
          uint64_t v199 = v101 & 0xFFFFFFFFFFFFLL;
        }
        unint64_t v440 = v199;
        unint64_t v431 = (v8 & 0xFFFFFFFFFFFFFFFLL) + 32;
        unint64_t v432 = v8 & 0xFFFFFFFFFFFFFFLL;
        unint64_t v430 = v441;
        uint64_t v13 = v100;
        unint64_t v200 = v100;
        while (1)
        {
          unint64_t v20 = v200;
          unint64_t v200 = v100;
          uint64_t v21 = v100 & 0xC;
          unint64_t v377 = v100;
          if (v21 == v2)
          {
            unint64_t v377 = _StringGuts._slowEnsureMatchingEncoding(_:)(v100, v101, v8);
            unint64_t v101 = v439;
          }
          uint64_t v23 = v377 >> 16;
          if (v377 >> 16 >= v440) {
            goto LABEL_1364;
          }
          if ((v8 & 0x1000000000000000) != 0)
          {
            unsigned __int8 v386 = String.UTF8View._foreignSubscript(position:)();
            unint64_t v101 = v439;
            unsigned __int8 v379 = v386;
            if ((v386 & 0x80) != 0) {
              goto LABEL_1231;
            }
          }
          else if ((v8 & 0x2000000000000000) != 0)
          {
            uint64_t v446 = v101;
            unint64_t v447 = v432;
            unsigned __int8 v379 = *((unsigned char *)&v446 + v23);
            if ((v379 & 0x80) != 0) {
              goto LABEL_1231;
            }
          }
          else
          {
            uint64_t v378 = v431;
            if ((v101 & 0x1000000000000000) == 0)
            {
              uint64_t v378 = _StringObject.sharedUTF8.getter();
              unint64_t v101 = v439;
            }
            unsigned __int8 v379 = *(unsigned char *)(v378 + v23);
            if ((v379 & 0x80) != 0) {
              goto LABEL_1231;
            }
          }
          unint64_t v380 = v200;
          if (v21 == v2)
          {
            unint64_t v380 = _StringGuts._slowEnsureMatchingEncoding(_:)(v200, v101, v8);
            unint64_t v101 = v439;
            if ((v8 & 0x1000000000000000) == 0)
            {
LABEL_1155:
              unint64_t v100 = (v380 & 0xFFFFFFFFFFFF0000) + 65540;
              if (v24 == v100 >> 14) {
                goto LABEL_1156;
              }
              goto LABEL_1199;
            }
          }
          else if ((v8 & 0x1000000000000000) == 0)
          {
            goto LABEL_1155;
          }
          if (v440 <= v380 >> 16) {
            goto LABEL_1390;
          }
          unint64_t v387 = String.UTF8View._foreignIndex(after:)();
          unint64_t v101 = v439;
          unint64_t v100 = v387;
          if (v24 == v387 >> 14)
          {
LABEL_1156:
            int v381 = 1;
            goto LABEL_1157;
          }
LABEL_1199:
          unint64_t v388 = v100 & 0xC;
          unint64_t v389 = v100;
          if (v388 == v2)
          {
            unint64_t v392 = v100;
            unint64_t v389 = _StringGuts._slowEnsureMatchingEncoding(_:)(v100, v101, v8);
            unint64_t v101 = v439;
            unint64_t v100 = v392;
          }
          uint64_t v21 = v389 >> 16;
          if (v389 >> 16 >= v440) {
            goto LABEL_1391;
          }
          if ((v8 & 0x1000000000000000) != 0)
          {
            uint64_t v21 = v100;
            unsigned __int8 v391 = String.UTF8View._foreignSubscript(position:)();
            unint64_t v101 = v439;
            unint64_t v100 = v21;
          }
          else if ((v8 & 0x2000000000000000) != 0)
          {
            uint64_t v446 = v101;
            unint64_t v447 = v432;
            unsigned __int8 v391 = *((unsigned char *)&v446 + v21);
          }
          else
          {
            uint64_t v390 = v431;
            if ((v101 & 0x1000000000000000) == 0)
            {
              unint64_t v433 = v100;
              uint64_t v390 = _StringObject.sharedUTF8.getter();
              unint64_t v101 = v439;
              unint64_t v100 = v433;
            }
            unsigned __int8 v391 = *(unsigned char *)(v390 + v21);
          }
          if (v391 > 0xCBu) {
            goto LABEL_1231;
          }
          int v381 = 1;
          if (v379 != 13 || v391 != 10) {
            goto LABEL_1157;
          }
          if (v388 == v2)
          {
            uint64_t v393 = _StringGuts._slowEnsureMatchingEncoding(_:)(v100, v101, v8);
            unint64_t v101 = v439;
            unint64_t v100 = v393;
            if ((v8 & 0x1000000000000000) == 0)
            {
LABEL_1214:
              unint64_t v100 = (v100 & 0xFFFFFFFFFFFF0000) + 65540;
              goto LABEL_1218;
            }
          }
          else if ((v8 & 0x1000000000000000) == 0)
          {
            goto LABEL_1214;
          }
          if (v440 <= v100 >> 16) {
            goto LABEL_1427;
          }
          uint64_t v394 = String.UTF8View._foreignIndex(after:)();
          unint64_t v101 = v439;
          unint64_t v100 = v394;
LABEL_1218:
          if (v24 != v100 >> 14)
          {
            unint64_t v395 = v100;
            if ((v100 & 0xC) == v2)
            {
              unint64_t v400 = v100;
              unint64_t v395 = _StringGuts._slowEnsureMatchingEncoding(_:)(v100, v101, v8);
              unint64_t v101 = v439;
              unint64_t v100 = v400;
            }
            uint64_t v21 = v395 >> 16;
            if (v395 >> 16 >= v440) {
              goto LABEL_1428;
            }
            if ((v8 & 0x1000000000000000) != 0)
            {
              uint64_t v21 = v100;
              unsigned __int8 v397 = String.UTF8View._foreignSubscript(position:)();
              unint64_t v101 = v439;
              unint64_t v100 = v21;
            }
            else if ((v8 & 0x2000000000000000) != 0)
            {
              uint64_t v446 = v101;
              unint64_t v447 = v432;
              unsigned __int8 v397 = *((unsigned char *)&v446 + v21);
            }
            else
            {
              uint64_t v396 = v431;
              if ((v101 & 0x1000000000000000) == 0)
              {
                unint64_t v403 = v100;
                uint64_t v396 = _StringObject.sharedUTF8.getter();
                unint64_t v101 = v439;
                unint64_t v100 = v403;
              }
              unsigned __int8 v397 = *(unsigned char *)(v396 + v21);
            }
            if (v397 > 0xCBu)
            {
LABEL_1231:
              uint64_t v398 = String._thoroughMatchBuiltinCC(_:at:limitedBy:isInverted:isStrictASCII:isScalarSemantics:)(v441, v200, v438, v437, v434, v442 != 0, v101, v8);
              if (v399)
              {
                uint64_t v375 = v22;
                unint64_t v100 = v200;
                uint64_t v23 = v20;
LABEL_1295:
                if (v375 < 1)
                {
                  unint64_t v100 = 0;
                  uint64_t v13 = 0;
                  uint64_t v23 = 0;
                  int v99 = 0;
                  char v372 = 1;
                  unint64_t v2 = (unint64_t)v436;
                  goto LABEL_1326;
                }
                unint64_t v2 = (unint64_t)v436;
                char v372 = 0;
                if ((v435 & (v375 != 1)) != 0)
                {
                  int v99 = 0;
                  goto LABEL_1326;
                }
                goto LABEL_1325;
              }
              unint64_t v100 = v398;
              unint64_t v101 = v439;
              goto LABEL_1137;
            }
          }
          int v381 = 0;
LABEL_1157:
          uint64_t v23 = v20;
          switch(v197)
          {
            case 0:
            case 1:
              goto LABEL_1136;
            case 2:
              BOOL v382 = (v379 - 48) >= 0xAu;
              goto LABEL_1179;
            case 3:
              int v384 = v379 == 32 || v379 == 9;
              goto LABEL_1182;
            case 4:
            case 5:
              if ((v379 - 10) > 3u) {
                goto LABEL_1192;
              }
              if (!v442 || v441 != 5 || v381 == 1) {
                goto LABEL_1136;
              }
              if ((v100 & 0xC) == v2)
              {
                unint64_t v401 = _StringGuts._slowEnsureMatchingEncoding(_:)(v100, v101, v8);
                unint64_t v101 = v439;
                unint64_t v100 = v401;
                if (v401 < 0x4000) {
                  goto LABEL_1432;
                }
              }
              else if (v100 < 0x4000)
              {
                goto LABEL_1432;
              }
              if ((v8 & 0x1000000000000000) == 0) {
                goto LABEL_1135;
              }
              if (v440 < v100 >> 16) {
                goto LABEL_1444;
              }
              goto LABEL_1190;
            case 6:
              if (v379 - 9 < 5 || v379 == 32)
              {
                if (((v381 | v429) & 1) == 0)
                {
                  if ((v100 & 0xC) == v2)
                  {
                    unint64_t v402 = _StringGuts._slowEnsureMatchingEncoding(_:)(v100, v101, v8);
                    unint64_t v101 = v439;
                    unint64_t v100 = v402;
                    if (v402 < 0x4000) {
                      goto LABEL_1435;
                    }
                  }
                  else if (v100 < 0x4000)
                  {
                    goto LABEL_1435;
                  }
                  if ((v8 & 0x1000000000000000) != 0)
                  {
                    if (v440 < v100 >> 16) {
                      goto LABEL_1446;
                    }
LABEL_1190:
                    uint64_t v385 = String.UTF8View._foreignIndex(before:)();
                    unint64_t v101 = v439;
                    unint64_t v100 = v385;
                  }
                  else
                  {
LABEL_1135:
                    unint64_t v100 = (v100 & 0xFFFFFFFFFFFF0000) - 65532;
                  }
                }
LABEL_1136:
                if ((v441 & 0x200) != 0)
                {
LABEL_1294:
                  uint64_t v375 = v22;
                  unint64_t v100 = v200;
                  goto LABEL_1295;
                }
              }
              else
              {
LABEL_1192:
                if ((v441 & 0x200) == 0) {
                  goto LABEL_1294;
                }
              }
              break;
            case 7:
              if ((v379 - 58) > 0xF5u || (v379 - 123) > 0xE5u) {
                goto LABEL_1136;
              }
              BOOL v382 = v379 != 95 && (v379 - 65) >= 0x1Au;
LABEL_1179:
              int v384 = !v382;
LABEL_1182:
              if (v437 == v384) {
                goto LABEL_1294;
              }
              break;
            default:
              goto LABEL_1457;
          }
LABEL_1137:
          uint64_t v375 = v22 + 1;
          if (v22) {
            uint64_t v376 = v13;
          }
          else {
            uint64_t v376 = v100;
          }
          if (v375 >= 0) {
            uint64_t v13 = v376;
          }
          ++v22;
          uint64_t v23 = v200;
          if (v24 <= v100 >> 14) {
            goto LABEL_1295;
          }
        }
      }
      if (v24 > 7u) {
        goto LABEL_1458;
      }
      unint64_t v312 = v2;
      unint64_t v2 = *(void *)(v2 + 64);
      v436 = (void *)v312;
      unint64_t v438 = v11;
      if (!v440)
      {
        unint64_t v316 = 0;
        unint64_t v317 = v2;
        unint64_t v318 = v2;
LABEL_1126:
        unint64_t v20 = v316;
        if (v316 >= v438) {
          goto LABEL_1343;
        }
        goto LABEL_1127;
      }
      unint64_t v429 = *(void *)(v312 + 40);
      uint64_t v313 = (v101 >> 59) & 1;
      if ((v8 & 0x1000000000000000) == 0) {
        LOBYTE(v313) = 1;
      }
      uint64_t v314 = HIBYTE(v8) & 0xF;
      if ((v8 & 0x2000000000000000) == 0) {
        uint64_t v314 = v101 & 0xFFFFFFFFFFFFLL;
      }
      unint64_t v431 = v429 >> 14;
      unint64_t v432 = v314;
      if (v429 >> 14 <= v2 >> 14)
      {
        LOBYTE(v13) = 0;
        unint64_t v20 = 0;
        unint64_t v317 = v2;
        unint64_t v318 = v2;
        goto LABEL_1341;
      }
      LODWORD(v425) = v442 == 0;
      unint64_t v20 = 0;
      uint64_t v13 = 0;
      uint64_t v315 = 4 << v313;
      unint64_t v428 = v8 & 0xFFFFFFFFFFFFFFLL;
      uint64_t v427 = (v8 & 0xFFFFFFFFFFFFFFFLL) + 32;
      unint64_t v316 = 1;
      unint64_t v426 = v24;
      uint64_t v23 = v2;
      unint64_t v317 = v2;
      unint64_t v430 = 4 << v313;
      break;
    default:
      goto LABEL_1374;
  }
  while (1)
  {
    unint64_t v433 = v317;
    unint64_t v318 = v2;
    uint64_t v21 = v2 & 0xC;
    unint64_t v319 = v2;
    if (v21 == v315)
    {
      unint64_t v319 = _StringGuts._slowEnsureMatchingEncoding(_:)(v2, v101, v8);
      uint64_t v315 = v430;
      unint64_t v101 = v439;
    }
    unint64_t v22 = v319 >> 16;
    if (v319 >> 16 >= v432) {
      goto LABEL_1376;
    }
    if ((v8 & 0x1000000000000000) != 0)
    {
      uint64_t v322 = String.UTF8View._foreignSubscript(position:)();
      uint64_t v315 = v430;
      unint64_t v101 = v439;
      unint64_t v22 = v322;
      if ((v322 & 0x80) != 0) {
        goto LABEL_996;
      }
    }
    else if ((v8 & 0x2000000000000000) != 0)
    {
      uint64_t v446 = v101;
      unint64_t v447 = v428;
      unint64_t v22 = *((unsigned __int8 *)&v446 + v22);
      if ((v22 & 0x80) != 0) {
        goto LABEL_996;
      }
    }
    else
    {
      uint64_t v320 = v427;
      if ((v101 & 0x1000000000000000) == 0)
      {
        uint64_t v320 = _StringObject.sharedUTF8.getter();
        uint64_t v315 = v430;
        unint64_t v101 = v439;
      }
      unint64_t v22 = *(unsigned __int8 *)(v320 + v22);
      if ((v22 & 0x80) != 0) {
        goto LABEL_996;
      }
    }
    unint64_t v321 = v2;
    if (v21 == v315)
    {
      unint64_t v321 = _StringGuts._slowEnsureMatchingEncoding(_:)(v2, v101, v8);
      uint64_t v315 = v430;
      unint64_t v101 = v439;
      if ((v8 & 0x1000000000000000) == 0)
      {
LABEL_916:
        unint64_t v2 = (v321 & 0xFFFFFFFFFFFF0000) + 65540;
        goto LABEL_922;
      }
    }
    else if ((v8 & 0x1000000000000000) == 0)
    {
      goto LABEL_916;
    }
    if (v432 <= v321 >> 16) {
      goto LABEL_1405;
    }
    uint64_t v323 = String.UTF8View._foreignIndex(after:)();
    unint64_t v101 = v439;
    unint64_t v2 = v323;
    uint64_t v315 = v430;
LABEL_922:
    if (v431 == v2 >> 14)
    {
      int v324 = 1;
      goto LABEL_924;
    }
    unint64_t v24 = v2 & 0xC;
    unint64_t v325 = v2;
    if (v24 == v315)
    {
      unint64_t v325 = _StringGuts._slowEnsureMatchingEncoding(_:)(v2, v101, v8);
      uint64_t v315 = v430;
      unint64_t v101 = v439;
    }
    uint64_t v21 = v325 >> 16;
    if (v325 >> 16 >= v432) {
      goto LABEL_1406;
    }
    if ((v8 & 0x1000000000000000) != 0)
    {
      unsigned __int8 v327 = String.UTF8View._foreignSubscript(position:)();
      uint64_t v315 = v430;
      unint64_t v101 = v439;
    }
    else if ((v8 & 0x2000000000000000) != 0)
    {
      uint64_t v446 = v101;
      unint64_t v447 = v428;
      unsigned __int8 v327 = *((unsigned char *)&v446 + v21);
    }
    else
    {
      uint64_t v326 = v427;
      if ((v101 & 0x1000000000000000) == 0)
      {
        uint64_t v326 = _StringObject.sharedUTF8.getter();
        uint64_t v315 = v430;
        unint64_t v101 = v439;
      }
      unsigned __int8 v327 = *(unsigned char *)(v326 + v21);
    }
    if (v327 > 0xCBu) {
      goto LABEL_996;
    }
    int v324 = 1;
    if (v22 == 13 && v327 == 10)
    {
      if (v24 == v315)
      {
        uint64_t v332 = _StringGuts._slowEnsureMatchingEncoding(_:)(v2, v101, v8);
        uint64_t v315 = v430;
        unint64_t v101 = v439;
        unint64_t v2 = v332;
        if ((v8 & 0x1000000000000000) != 0) {
          goto LABEL_981;
        }
LABEL_951:
        unint64_t v2 = (v2 & 0xFFFFFFFFFFFF0000) + 65540;
      }
      else
      {
        if ((v8 & 0x1000000000000000) == 0) {
          goto LABEL_951;
        }
LABEL_981:
        if (v432 <= v2 >> 16) {
          goto LABEL_1440;
        }
        uint64_t v333 = String.UTF8View._foreignIndex(after:)();
        unint64_t v101 = v439;
        unint64_t v2 = v333;
        uint64_t v315 = v430;
      }
      if (v431 != v2 >> 14)
      {
        unint64_t v334 = v2;
        if ((v2 & 0xC) == v315)
        {
          unint64_t v334 = _StringGuts._slowEnsureMatchingEncoding(_:)(v2, v101, v8);
          uint64_t v315 = v430;
          unint64_t v101 = v439;
        }
        uint64_t v21 = v334 >> 16;
        if (v334 >> 16 >= v432) {
          goto LABEL_1441;
        }
        if ((v8 & 0x1000000000000000) != 0)
        {
          unsigned __int8 v336 = String.UTF8View._foreignSubscript(position:)();
          uint64_t v315 = v430;
          unint64_t v101 = v439;
        }
        else if ((v8 & 0x2000000000000000) != 0)
        {
          uint64_t v446 = v101;
          unint64_t v447 = v428;
          unsigned __int8 v336 = *((unsigned char *)&v446 + v21);
        }
        else
        {
          uint64_t v335 = v427;
          if ((v101 & 0x1000000000000000) == 0)
          {
            uint64_t v335 = _StringObject.sharedUTF8.getter();
            uint64_t v315 = v430;
            unint64_t v101 = v439;
          }
          unsigned __int8 v336 = *(unsigned char *)(v335 + v21);
        }
        if (v336 > 0xCBu)
        {
LABEL_996:
          uint64_t v337 = String._thoroughMatchBuiltinCC(_:at:limitedBy:isInverted:isStrictASCII:isScalarSemantics:)(v441, v318, v429, v437, v434, v442 != 0, v101, v8);
          if (v338) {
            goto LABEL_1340;
          }
          unint64_t v2 = v337;
          unint64_t v101 = v439;
          uint64_t v315 = v430;
          goto LABEL_998;
        }
      }
      int v324 = 0;
    }
LABEL_924:
    uint64_t v21 = v441;
    switch(v426)
    {
      case 2uLL:
        BOOL v328 = (v22 - 48) >= 0xAu;
        goto LABEL_964;
      case 3uLL:
        int v330 = v22 == 32 || v22 == 9;
        goto LABEL_967;
      case 4uLL:
      case 5uLL:
        if ((v22 - 10) > 3u) {
          goto LABEL_976;
        }
        if (!v442 || v441 != 5 || v324 == 1) {
          goto LABEL_925;
        }
        if ((v2 & 0xC) == v315)
        {
          unint64_t v340 = _StringGuts._slowEnsureMatchingEncoding(_:)(v2, v101, v8);
          uint64_t v315 = v430;
          unint64_t v101 = v439;
          unint64_t v2 = v340;
          if (v340 < 0x4000) {
            goto LABEL_1447;
          }
        }
        else if (v2 < 0x4000)
        {
          goto LABEL_1447;
        }
        if ((v8 & 0x1000000000000000) == 0) {
          goto LABEL_974;
        }
        if (v432 < v2 >> 16) {
          goto LABEL_1452;
        }
        goto LABEL_979;
      case 6uLL:
        if (v22 - 9 < 5 || v22 == 32)
        {
          if (((v324 | v425) & 1) == 0)
          {
            if ((v2 & 0xC) == v315)
            {
              unint64_t v341 = _StringGuts._slowEnsureMatchingEncoding(_:)(v2, v101, v8);
              uint64_t v315 = v430;
              unint64_t v101 = v439;
              unint64_t v2 = v341;
              if (v341 < 0x4000) {
                goto LABEL_1448;
              }
            }
            else if (v2 < 0x4000)
            {
              goto LABEL_1448;
            }
            if ((v8 & 0x1000000000000000) != 0)
            {
              if (v432 < v2 >> 16) {
                goto LABEL_1453;
              }
LABEL_979:
              uint64_t v331 = String.UTF8View._foreignIndex(before:)();
              unint64_t v101 = v439;
              unint64_t v2 = v331;
              uint64_t v315 = v430;
            }
            else
            {
LABEL_974:
              unint64_t v2 = (v2 & 0xFFFFFFFFFFFF0000) - 65532;
            }
          }
LABEL_925:
          if ((v21 & 0x200) != 0)
          {
            unint64_t v20 = v316 - 1;
LABEL_1340:
            unint64_t v2 = v318;
            unint64_t v318 = v23;
            unint64_t v317 = v433;
LABEL_1341:
            int v99 = 0;
            unint64_t v100 = 0;
            BOOL v373 = 1;
            if (v13)
            {
              uint64_t v13 = 0;
              uint64_t v23 = 0;
              goto LABEL_1348;
            }
            uint64_t v13 = 0;
            uint64_t v23 = 0;
            if (v20 < v438) {
              goto LABEL_1348;
            }
LABEL_1343:
            if (v20 == 0 || (v435 & 1) == 0 || v20 <= v438)
            {
              uint64_t v13 = 0;
              uint64_t v23 = 0;
              BOOL v373 = 0;
              int v99 = 1;
              unint64_t v100 = v2;
            }
            else
            {
              int v99 = 0;
              BOOL v373 = 0;
              unint64_t v100 = v2;
              uint64_t v13 = v317;
              uint64_t v23 = v318;
            }
            goto LABEL_1348;
          }
        }
        else
        {
LABEL_976:
          if ((v441 & 0x200) == 0) {
            goto LABEL_1340;
          }
        }
        break;
      case 7uLL:
        if ((v22 - 58) > 0xF5u || (v22 - 123) > 0xE5u) {
          goto LABEL_925;
        }
        BOOL v328 = v22 != 95 && (v22 - 65) >= 0x1Au;
LABEL_964:
        int v330 = !v328;
LABEL_967:
        if (v437 == v330) {
          goto LABEL_1340;
        }
        break;
      default:
        goto LABEL_925;
    }
LABEL_998:
    unint64_t v317 = v433;
    if (v438 == v316) {
      unint64_t v339 = v2;
    }
    else {
      unint64_t v339 = v433;
    }
    if ((v316 & 0x8000000000000000) == 0) {
      unint64_t v317 = v339;
    }
    if ((v316 & 0x8000000000000000) == 0 && v316 >= v440) {
      goto LABEL_1126;
    }
    uint64_t v13 = v316++ >> 63;
    ++v20;
    uint64_t v23 = v318;
    if (v431 <= v2 >> 14)
    {
      unint64_t v20 = v316 - 1;
      goto LABEL_1341;
    }
  }
}

unint64_t String.matchASCIIBitset(_:at:limitedBy:isScalarSemantics:)(unsigned __int8 a1, unint64_t a2, unint64_t a3, unint64_t a4, unint64_t a5, char a6, unint64_t a7, unint64_t a8)
{
  unsigned __int8 v16 = String._quickASCIICharacter(at:limitedBy:)(a4, a5, a7, a8);
  if (v18 == 2)
  {
    unint64_t v19 = a4 >> 14;
    unint64_t v20 = a5 >> 14;
    if (a6)
    {
      if (v19 >= v20) {
        return 0;
      }
      _StringGuts.validateScalarIndex(_:)(a4, a7, a8);
      if ((a8 & 0x1000000000000000) != 0)
      {
        unsigned int v37 = _StringGuts.foreignErrorCorrectedScalar(startingAt:)();
        if (v37 >= 0x80) {
          goto LABEL_39;
        }
      }
      else
      {
        if ((a8 & 0x2000000000000000) != 0)
        {
          unint64_t v57 = a7;
          uint64_t v58 = a8 & 0xFFFFFFFFFFFFFFLL;
        }
        else if ((a7 & 0x1000000000000000) == 0)
        {
          _StringObject.sharedUTF8.getter();
        }
        unsigned int v37 = _decodeScalar(_:startingAt:)();
        if (v37 >= 0x80)
        {
LABEL_39:
          if (a1) {
            goto LABEL_73;
          }
          return 0;
        }
      }
      char v47 = v37;
      if ((v37 & 0xC0) != 0)
      {
        char v47 = v37 & 0x3F;
        unint64_t v48 = a3;
      }
      else
      {
        unint64_t v48 = a2;
      }
      uint64_t v49 = (1 << v47) & v48;
      if (a1)
      {
        if (v49) {
          return 0;
        }
      }
      else if (!v49)
      {
        return 0;
      }
LABEL_73:
      unint64_t v51 = _StringGuts.validateScalarIndex(_:)(a4, a7, a8);
      if ((a8 & 0x1000000000000000) == 0)
      {
        unint64_t v52 = v51 >> 16;
        if ((a8 & 0x2000000000000000) != 0)
        {
          unint64_t v57 = a7;
          uint64_t v58 = a8 & 0xFFFFFFFFFFFFFFLL;
          int v53 = *((unsigned __int8 *)&v57 + v52);
        }
        else if ((a7 & 0x1000000000000000) != 0)
        {
          int v53 = *(unsigned __int8 *)((a8 & 0xFFFFFFFFFFFFFFFLL) + 0x20 + (v51 >> 16));
        }
        else
        {
          int v53 = *(unsigned __int8 *)(_StringObject.sharedUTF8.getter() + v52);
        }
        int v55 = (char)v53;
        unsigned int v56 = __clz(v53 ^ 0xFF) - 24;
        if (v55 >= 0) {
          LOBYTE(v56) = 1;
        }
        return ((v52 + v56) << 16) | 5;
      }
      return String.UnicodeScalarView._foreignIndex(after:)();
    }
    if (v19 >= v20) {
      return 0;
    }
    unint64_t v31 = String.index(after:)();
    if (v20 >= v31 >> 14)
    {
      unint64_t v23 = v31;
      uint64_t v34 = String.subscript.getter();
      uint64_t v36 = v35;
      if (v34 != 2573) {
        goto LABEL_49;
      }
    }
    else
    {
      uint64_t v32 = String.subscript.getter();
      if ((v32 ^ v33) < 0x4000)
      {
        swift_bridgeObjectRelease();
        return 0;
      }
      unint64_t v23 = v33;
      uint64_t v42 = Substring.subscript.getter();
      uint64_t v36 = v43;
      swift_bridgeObjectRelease();
      if (v42 != 2573) {
        goto LABEL_49;
      }
    }
    if (v36 == 0xE200000000000000) {
      goto LABEL_50;
    }
LABEL_49:
    if (_stringCompareWithSmolCheck(_:_:expecting:)())
    {
LABEL_50:
      swift_bridgeObjectRelease();
      if (a1) {
        return v23;
      }
      return 0;
    }
    __int16 v44 = Character.asciiValue.getter();
    swift_bridgeObjectRelease();
    if ((v44 & 0x100) == 0)
    {
      if (v44 <= 0x3Fu)
      {
        char v45 = v44;
        goto LABEL_59;
      }
      if ((char)v44 >= 64)
      {
        char v45 = v44 & 0x3F;
        a2 = a3;
LABEL_59:
        uint64_t v46 = (1 << v45) & a2;
        if (a1)
        {
          if (!v46) {
            return v23;
          }
        }
        else if (v46)
        {
          return v23;
        }
        return 0;
      }
    }
    if (a1) {
      return v23;
    }
    return 0;
  }
  uint64_t v21 = (a3 >> v16) & 1;
  if ((char)v16 < 64) {
    LOBYTE(v21) = 0;
  }
  if (v16 <= 0x3Fu) {
    unsigned __int8 v22 = (a2 >> v16) & 1;
  }
  else {
    unsigned __int8 v22 = v21;
  }
  if ((v22 ^ a1)) {
    unint64_t v23 = v17;
  }
  else {
    unint64_t v23 = 0;
  }
  if (v18 & 1) != 0 && ((v22 ^ a1))
  {
    if ((a6 & 1) == 0)
    {
      if (a1) {
        return v17;
      }
      else {
        return 0;
      }
    }
    unint64_t v24 = _StringGuts.validateInclusiveScalarIndex(_:)(v17, a7, a8);
    if (v24 < 0x4000)
    {
      __break(1u);
    }
    else
    {
      unint64_t v25 = v24;
      if ((a8 & 0x1000000000000000) == 0)
      {
        if ((a8 & 0x2000000000000000) != 0)
        {
          unint64_t v57 = a7;
          uint64_t v58 = a8 & 0xFFFFFFFFFFFFFFLL;
          BOOL v38 = (char *)&v57 + (v24 >> 16);
          if ((*(v38 - 1) & 0xC0) == 0x80)
          {
            uint64_t v28 = 0;
            unint64_t v39 = v38 - 2;
            do
              int v40 = v39[v28--] & 0xC0;
            while (v40 == 128);
            goto LABEL_44;
          }
        }
        else
        {
          if ((a7 & 0x1000000000000000) != 0) {
            uint64_t v26 = (a8 & 0xFFFFFFFFFFFFFFFLL) + 32;
          }
          else {
            uint64_t v26 = _StringObject.sharedUTF8.getter();
          }
          uint64_t v27 = (v25 >> 16) + v26;
          if ((*(unsigned char *)(v27 - 1) & 0xC0) == 0x80)
          {
            uint64_t v28 = 0;
            uint64_t v29 = v27 - 2;
            do
              int v30 = *(unsigned char *)(v29 + v28--) & 0xC0;
            while (v30 == 128);
LABEL_44:
            uint64_t v41 = 1 - v28;
            return (v25 - (v41 << 16)) & 0xFFFFFFFFFFFF0000 | 5;
          }
        }
        uint64_t v41 = 1;
        return (v25 - (v41 << 16)) & 0xFFFFFFFFFFFF0000 | 5;
      }
    }
    return String.UnicodeScalarView._foreignIndex(before:)();
  }
  return v23;
}

uint64_t String.matchScalar(_:at:limitedBy:boundaryCheck:isCaseInsensitive:)(int a1, unint64_t a2, unint64_t a3, int a4, char a5, unint64_t a6, unint64_t a7)
{
  int v41 = a4;
  uint64_t v13 = type metadata accessor for Unicode.Scalar.Properties();
  uint64_t v14 = *(void *)(v13 - 8);
  uint64_t v15 = MEMORY[0x270FA5388](v13);
  unint64_t v17 = (char *)&v38 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v15);
  unint64_t v19 = (char *)&v38 - v18;
  if (a2 >> 14 >= a3 >> 14) {
    return 0;
  }
  _StringGuts.validateScalarIndex(_:)(a2, a6, a7);
  if ((a7 & 0x1000000000000000) != 0)
  {
    int v20 = _StringGuts.foreignErrorCorrectedScalar(startingAt:)();
    unint64_t v40 = a6;
    if (a5) {
      goto LABEL_8;
    }
  }
  else
  {
    if ((a7 & 0x2000000000000000) != 0)
    {
      unint64_t v42 = a6;
      uint64_t v43 = a7 & 0xFFFFFFFFFFFFFFLL;
    }
    else if ((a6 & 0x1000000000000000) == 0)
    {
      _StringObject.sharedUTF8.getter();
    }
    int v20 = _decodeScalar(_:startingAt:)();
    unint64_t v40 = a6;
    if (a5)
    {
LABEL_8:
      Unicode.Scalar.properties.getter();
      uint64_t v39 = Unicode.Scalar.Properties.lowercaseMapping.getter();
      uint64_t v22 = v21;
      unint64_t v23 = *(void (**)(char *, uint64_t))(v14 + 8);
      v23(v19, v13);
      Unicode.Scalar.properties.getter();
      uint64_t v24 = Unicode.Scalar.Properties.lowercaseMapping.getter();
      uint64_t v26 = v25;
      v23(v17, v13);
      if (v39 == v24 && v22 == v26)
      {
        swift_bridgeObjectRelease_n();
      }
      else
      {
        char v28 = _stringCompareWithSmolCheck(_:_:expecting:)();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        if ((v28 & 1) == 0) {
          return 0;
        }
      }
      goto LABEL_17;
    }
  }
  if (v20 != a1) {
    return 0;
  }
LABEL_17:
  unint64_t v29 = v40;
  unint64_t v30 = _StringGuts.validateScalarIndex(_:)(a2, v40, a7);
  if ((a7 & 0x1000000000000000) != 0)
  {
    uint64_t v34 = String.UnicodeScalarView._foreignIndex(after:)();
    if ((v41 & 1) == 0) {
      return v34;
    }
    goto LABEL_28;
  }
  unint64_t v31 = v30 >> 16;
  if ((a7 & 0x2000000000000000) != 0)
  {
    unint64_t v42 = v29;
    uint64_t v43 = a7 & 0xFFFFFFFFFFFFFFLL;
    int v33 = *((unsigned __int8 *)&v42 + v31);
  }
  else
  {
    if ((v29 & 0x1000000000000000) != 0) {
      uint64_t v32 = (a7 & 0xFFFFFFFFFFFFFFFLL) + 32;
    }
    else {
      uint64_t v32 = _StringObject.sharedUTF8.getter();
    }
    int v33 = *(unsigned __int8 *)(v32 + v31);
  }
  int v35 = (char)v33;
  unsigned int v36 = __clz(v33 ^ 0xFF) - 24;
  if (v35 >= 0) {
    LOBYTE(v36) = 1;
  }
  uint64_t v34 = ((v31 + v36) << 16) | 5;
  if (v41)
  {
LABEL_28:
    if (String.isOnGraphemeClusterBoundary(_:)()) {
      return v34;
    }
    return 0;
  }
  return v34;
}

uint64_t specialized Array.init(repeating:count:)(uint64_t result, uint64_t a2)
{
  if (a2 < 0)
  {
    __break(1u);
  }
  else
  {
    uint64_t v2 = a2;
    uint64_t v3 = result;
    if (a2)
    {
      uint64_t v4 = static Array._allocateBufferUninitialized(minimumCapacity:)();
      *(void *)(v4 + 16) = v2;
      uint64_t v5 = v4 + 32;
      do
      {
        outlined init with copy of Any(v3, v5);
        v5 += 32;
        --v2;
      }
      while (v2);
    }
    else
    {
      uint64_t v4 = MEMORY[0x263F8EE78];
    }
    __swift_destroy_boxed_opaque_existential_0(v3);
    return v4;
  }
  return result;
}

uint64_t specialized Array.init(repeating:count:)(uint64_t result, unint64_t a2)
{
  if ((a2 & 0x8000000000000000) != 0)
  {
    __break(1u);
    return result;
  }
  if (!a2) {
    return MEMORY[0x263F8EE78];
  }
  unint64_t v3 = result;
  unint64_t result = static Array._allocateBufferUninitialized(minimumCapacity:)();
  *(void *)(result + 16) = a2;
  uint64_t v4 = (unint64_t *)(result + 32);
  if (a2 < 4)
  {
    unint64_t v5 = 0;
LABEL_9:
    unint64_t v9 = a2 - v5;
    do
    {
      *v4++ = v3;
      --v9;
    }
    while (v9);
    return result;
  }
  unint64_t v5 = a2 & 0xFFFFFFFFFFFFFFFCLL;
  v4 += a2 & 0xFFFFFFFFFFFFFFFCLL;
  int64x2_t v6 = vdupq_n_s64(v3);
  uint64_t v7 = (int64x2_t *)(result + 48);
  unint64_t v8 = a2 & 0xFFFFFFFFFFFFFFFCLL;
  do
  {
    v7[-1] = v6;
    *uint64_t v7 = v6;
    v7 += 2;
    v8 -= 4;
  }
  while (v8);
  if (v5 != a2) {
    goto LABEL_9;
  }
  return result;
}

long long *specialized Array.init(repeating:count:)(long long *result, uint64_t a2)
{
  if (a2 < 0)
  {
    __break(1u);
  }
  else
  {
    uint64_t v2 = a2;
    unint64_t v3 = result;
    if (a2)
    {
      uint64_t v4 = static Array._allocateBufferUninitialized(minimumCapacity:)();
      *(void *)(v4 + 16) = v2;
      uint64_t v5 = v4 + 32;
      do
      {
        outlined init with copy of Processor._StoredCapture(v3, v5);
        v5 += 72;
        --v2;
      }
      while (v2);
    }
    else
    {
      uint64_t v4 = MEMORY[0x263F8EE78];
    }
    outlined destroy of Processor._StoredCapture((uint64_t)v3);
    return (long long *)v4;
  }
  return result;
}

unint64_t String.UnicodeScalarView.index(_:offsetBy:limitedBy:)(unint64_t a1, uint64_t a2, unint64_t a3, unint64_t a4, unint64_t a5)
{
  unint64_t v7 = a3;
  uint64_t v10 = (a4 >> 59) & 1;
  if ((a5 & 0x1000000000000000) == 0) {
    LOBYTE(v10) = 1;
  }
  uint64_t v11 = 4 << v10;
  if ((a3 & 0xC) == 4 << v10) {
LABEL_57:
  }
    unint64_t v7 = _StringGuts._slowEnsureMatchingEncoding(_:)(v7, a4, a5);
  unint64_t v12 = a1;
  if ((a1 & 0xC) == v11) {
    unint64_t v12 = _StringGuts._slowEnsureMatchingEncoding(_:)(a1, a4, a5);
  }
  unint64_t result = _StringGuts.validateInclusiveScalarIndex(_:)(a1, a4, a5);
  v7 >>= 14;
  if (a2 < 0)
  {
    uint64_t v11 = 0;
    a1 = v12 >> 14;
    int v20 = (char *)&v28 + 6;
    while (1)
    {
      if (a1 >= v7 && v7 >= result >> 14) {
        return 0;
      }
      if (result < 0x10000)
      {
LABEL_56:
        __break(1u);
        goto LABEL_57;
      }
      if ((a5 & 0x1000000000000000) != 0)
      {
        uint64_t v27 = v20;
        unint64_t result = String.UnicodeScalarView._foreignIndex(before:)();
        int v20 = v27;
        goto LABEL_48;
      }
      unint64_t v21 = result >> 16;
      if ((a5 & 0x2000000000000000) != 0)
      {
        unint64_t v29 = a4;
        uint64_t v30 = a5 & 0xFFFFFFFFFFFFFFLL;
        if ((*((unsigned char *)&v29 + v21 - 1) & 0xC0) != 0x80) {
          goto LABEL_46;
        }
        uint64_t v23 = 0;
        do
          int v25 = v20[v21 + v23--] & 0xC0;
        while (v25 == 128);
      }
      else
      {
        uint64_t v22 = (a5 & 0xFFFFFFFFFFFFFFFLL) + 32;
        if ((a4 & 0x1000000000000000) == 0)
        {
          char v28 = v20;
          uint64_t v22 = _StringObject.sharedUTF8.getter();
          int v20 = v28;
        }
        if ((*(unsigned char *)(v21 + v22 - 1) & 0xC0) != 0x80)
        {
LABEL_46:
          uint64_t v26 = 1;
          goto LABEL_47;
        }
        uint64_t v23 = 0;
        do
          int v24 = *(unsigned char *)(v22 + v21 - 2 + v23--) & 0xC0;
        while (v24 == 128);
      }
      uint64_t v26 = 1 - v23;
LABEL_47:
      unint64_t result = ((v21 - v26) << 16) | 5;
LABEL_48:
      if (--v11 <= a2)
      {
        if (a1 < v7 || result >> 14 >= v7) {
          return result;
        }
        return 0;
      }
    }
  }
  a1 = v12 >> 14;
  if (a2)
  {
    if ((a5 & 0x2000000000000000) != 0) {
      unint64_t v14 = HIBYTE(a5) & 0xF;
    }
    else {
      unint64_t v14 = a4 & 0xFFFFFFFFFFFFLL;
    }
    uint64_t v11 = a5 & 0xFFFFFFFFFFFFFFLL;
    while (v7 < a1 || result >> 14 < v7)
    {
      unint64_t v15 = result >> 16;
      if (result >> 16 >= v14)
      {
        __break(1u);
        goto LABEL_56;
      }
      if ((a5 & 0x1000000000000000) != 0)
      {
        unint64_t result = String.UnicodeScalarView._foreignIndex(after:)();
      }
      else
      {
        if ((a5 & 0x2000000000000000) != 0)
        {
          unint64_t v29 = a4;
          uint64_t v30 = a5 & 0xFFFFFFFFFFFFFFLL;
          int v17 = *((unsigned __int8 *)&v29 + v15);
        }
        else
        {
          uint64_t v16 = (a5 & 0xFFFFFFFFFFFFFFFLL) + 32;
          if ((a4 & 0x1000000000000000) == 0) {
            uint64_t v16 = _StringObject.sharedUTF8.getter();
          }
          int v17 = *(unsigned __int8 *)(v16 + v15);
        }
        int v18 = (char)v17;
        unsigned int v19 = __clz(v17 ^ 0xFF) - 24;
        if (v18 >= 0) {
          LOBYTE(v19) = 1;
        }
        unint64_t result = ((v15 + v19) << 16) | 5;
      }
      if (!--a2) {
        goto LABEL_27;
      }
    }
    return 0;
  }
LABEL_27:
  if (v7 >= a1 && v7 < result >> 14) {
    return 0;
  }
  return result;
}

Swift::Bool __swiftcall Processor.match(_:isCaseInsensitive:)(Swift::String _, Swift::Bool isCaseInsensitive)
{
  unint64_t v3 = *(void *)(v2 + 40) >> 14;
  if (v3 <= *(void *)(v2 + 64) >> 14) {
    goto LABEL_14;
  }
  unint64_t object = _._object;
  uint64_t countAndFlagsBits = _._countAndFlagsBits;
  unint64_t v7 = String.index(after:)();
  if (v3 >= v7 >> 14)
  {
    unint64_t v10 = v7;
    uint64_t v11 = String.subscript.getter();
    uint64_t v13 = v12;
    if (!isCaseInsensitive)
    {
LABEL_10:
      if (v11 == countAndFlagsBits && v13 == object) {
        goto LABEL_12;
      }
      char v21 = _stringCompareWithSmolCheck(_:_:expecting:)();
      swift_bridgeObjectRelease();
      if ((v21 & 1) == 0) {
        goto LABEL_14;
      }
      goto LABEL_16;
    }
  }
  else
  {
    uint64_t v8 = String.subscript.getter();
    if ((v8 ^ v9) < 0x4000)
    {
      swift_bridgeObjectRelease();
LABEL_14:
      Processor.signalFailure(preservingCaptures:)(0);
      return 0;
    }
    unint64_t v10 = v9;
    uint64_t v11 = Substring.subscript.getter();
    uint64_t v13 = v18;
    swift_bridgeObjectRelease();
    if (!isCaseInsensitive) {
      goto LABEL_10;
    }
  }
  uint64_t v14 = MEMORY[0x21050EE00](v11, v13);
  uint64_t v16 = v15;
  swift_bridgeObjectRelease();
  if (v14 == MEMORY[0x21050EE00](countAndFlagsBits, object) && v16 == v17)
  {
    swift_bridgeObjectRelease();
LABEL_12:
    swift_bridgeObjectRelease();
    goto LABEL_16;
  }
  char v19 = _stringCompareWithSmolCheck(_:_:expecting:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if ((v19 & 1) == 0) {
    goto LABEL_14;
  }
LABEL_16:
  *(void *)(v2 + 64) = v10;
  return 1;
}

unint64_t String.matchSeq(_:at:limitedBy:isScalarSemantics:)(unint64_t a1, unint64_t a2, unint64_t a3, unint64_t a4, unint64_t a5, unint64_t a6, char a7, unint64_t a8, unint64_t a9)
{
  unint64_t v12 = a3;
  unint64_t v13 = a2;
  unint64_t v14 = a1 ^ a2;
  if (a7)
  {
    swift_bridgeObjectRetain();
    if (v14 < 0x4000)
    {
LABEL_3:
      swift_bridgeObjectRelease();
      goto LABEL_5;
    }
    uint64_t v16 = (a4 & 0xFFFFFFFFFFFFFFFLL) + 32;
    uint64_t v17 = (a8 >> 59) & 1;
    if ((a9 & 0x1000000000000000) == 0) {
      LOBYTE(v17) = 1;
    }
    uint64_t v18 = 4 << v17;
    if ((a9 & 0x2000000000000000) != 0) {
      unint64_t v19 = HIBYTE(a9) & 0xF;
    }
    else {
      unint64_t v19 = a8 & 0xFFFFFFFFFFFFLL;
    }
    unint64_t v20 = a1;
    while (1)
    {
      _StringGuts.validateScalarIndex(_:in:)(v20, a1, v13, v12, a4);
      if ((a4 & 0x1000000000000000) != 0)
      {
        int v21 = _StringGuts.foreignErrorCorrectedScalar(startingAt:)();
        _StringGuts.validateScalarIndex(_:)(v20, v12, a4);
        unint64_t v20 = String.UnicodeScalarView._foreignIndex(after:)();
      }
      else
      {
        if ((a4 & 0x2000000000000000) != 0)
        {
          unint64_t v56 = v12;
          uint64_t v57 = a4 & 0xFFFFFFFFFFFFFFLL;
          int v21 = _decodeScalar(_:startingAt:)();
          unint64_t v24 = _StringGuts.validateScalarIndex(_:)(v20, v12, a4) >> 16;
          unint64_t v56 = v12;
          uint64_t v57 = a4 & 0xFFFFFFFFFFFFFFLL;
          int v25 = *((unsigned __int8 *)&v56 + v24);
        }
        else
        {
          if ((v12 & 0x1000000000000000) == 0) {
            _StringObject.sharedUTF8.getter();
          }
          int v21 = _decodeScalar(_:startingAt:)();
          unint64_t v22 = _StringGuts.validateScalarIndex(_:)(v20, v12, a4);
          uint64_t v23 = v16;
          if ((v12 & 0x1000000000000000) == 0) {
            uint64_t v23 = _StringObject.sharedUTF8.getter();
          }
          unint64_t v24 = v22 >> 16;
          int v25 = *(unsigned __int8 *)(v23 + (v22 >> 16));
        }
        int v26 = (char)v25;
        unsigned int v27 = __clz(v25 ^ 0xFF) - 24;
        if (v26 >= 0) {
          LOBYTE(v27) = 1;
        }
        unint64_t v20 = ((v24 + v27) << 16) | 5;
      }
      if (a6 >> 14 <= a5 >> 14) {
        break;
      }
      unint64_t v28 = a5 & 0xC;
      BOOL v29 = (a5 & 1) == 0 || v28 == v18;
      int v30 = v29;
      if (v29)
      {
        unint64_t result = a5;
        if (v28 == v18) {
          unint64_t result = _StringGuts._slowEnsureMatchingEncoding(_:)(a5, a8, a9);
        }
        if (result >> 16 >= v19)
        {
          __break(1u);
LABEL_83:
          __break(1u);
LABEL_84:
          __break(1u);
LABEL_85:
          __break(1u);
          return result;
        }
        if ((result & 1) == 0) {
          _StringGuts.scalarAlignSlow(_:)(result, a8, a9);
        }
      }
      else
      {
        unint64_t result = a5;
        if (a5 >> 16 >= v19) {
          goto LABEL_83;
        }
      }
      if ((a9 & 0x1000000000000000) != 0)
      {
        unint64_t result = _StringGuts.foreignErrorCorrectedScalar(startingAt:)();
        if (result != v21) {
          break;
        }
      }
      else
      {
        if ((a9 & 0x2000000000000000) != 0)
        {
          unint64_t v56 = a8;
          uint64_t v57 = a9 & 0xFFFFFFFFFFFFFFLL;
        }
        else if ((a8 & 0x1000000000000000) == 0)
        {
          _StringObject.sharedUTF8.getter();
        }
        unint64_t result = _decodeScalar(_:startingAt:)();
        if (result != v21) {
          break;
        }
      }
      if (v30)
      {
        unint64_t v13 = a2;
        if (v28 == v18)
        {
          unint64_t result = _StringGuts._slowEnsureMatchingEncoding(_:)(a5, a8, a9);
          a5 = result;
        }
        unint64_t v12 = a3;
        uint64_t v16 = (a4 & 0xFFFFFFFFFFFFFFFLL) + 32;
        if (v19 <= a5 >> 16) {
          goto LABEL_84;
        }
        if ((a5 & 1) == 0) {
          a5 = a5 & 0xC | _StringGuts.scalarAlignSlow(_:)(a5, a8, a9) & 0xFFFFFFFFFFFFFFF3 | 1;
        }
      }
      else
      {
        unint64_t v13 = a2;
        unint64_t v12 = a3;
        uint64_t v16 = (a4 & 0xFFFFFFFFFFFFFFFLL) + 32;
        if (v19 <= a5 >> 16) {
          goto LABEL_85;
        }
      }
      if ((a9 & 0x1000000000000000) != 0)
      {
        a5 = String.UnicodeScalarView._foreignIndex(after:)();
      }
      else
      {
        unint64_t v31 = a5 >> 16;
        if ((a9 & 0x2000000000000000) != 0)
        {
          unint64_t v56 = a8;
          uint64_t v57 = a9 & 0xFFFFFFFFFFFFFFLL;
          int v33 = *((unsigned __int8 *)&v56 + v31);
        }
        else
        {
          uint64_t v32 = (a9 & 0xFFFFFFFFFFFFFFFLL) + 32;
          if ((a8 & 0x1000000000000000) == 0) {
            uint64_t v32 = _StringObject.sharedUTF8.getter();
          }
          int v33 = *(unsigned __int8 *)(v32 + v31);
        }
        int v34 = (char)v33;
        unsigned int v35 = __clz(v33 ^ 0xFF) - 24;
        if (v34 >= 0) {
          LOBYTE(v35) = 1;
        }
        a5 = ((v31 + v35) << 16) | 5;
      }
      if ((v20 ^ v13) < 0x4000) {
        goto LABEL_3;
      }
    }
  }
  else
  {
    if (v14 < 0x4000)
    {
LABEL_5:
      if (a6 >> 14 >= a5 >> 14) {
        return a5;
      }
      else {
        return 0;
      }
    }
    unint64_t v36 = a6 >> 14;
    while (1)
    {
      uint64_t v38 = Substring.subscript.getter();
      uint64_t v40 = v39;
      uint64_t v41 = Substring.index(after:)();
      if (v36 <= a5 >> 14) {
        break;
      }
      uint64_t v42 = v41;
      unint64_t v43 = String.index(after:)();
      if (v36 >= v43 >> 14)
      {
        unint64_t v49 = v43;
        uint64_t v46 = String.subscript.getter();
        uint64_t v48 = v50;
        a5 = v49;
      }
      else
      {
        uint64_t v44 = String.subscript.getter();
        if ((v44 ^ v45) < 0x4000)
        {
          swift_bridgeObjectRelease();
          break;
        }
        a5 = v45;
        uint64_t v46 = Substring.subscript.getter();
        uint64_t v48 = v47;
        swift_bridgeObjectRelease();
      }
      if (v46 == v38 && v48 == v40)
      {
        swift_bridgeObjectRelease_n();
      }
      else
      {
        char v37 = _stringCompareWithSmolCheck(_:_:expecting:)();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        if ((v37 & 1) == 0) {
          return 0;
        }
      }
      if ((v42 ^ a2) < 0x4000) {
        goto LABEL_5;
      }
    }
  }
  swift_bridgeObjectRelease();
  return 0;
}

uint64_t specialized RangeReplaceableCollection<>.removeLast()(uint64_t a1)
{
  uint64_t v2 = v1[1];
  if ((v2 & 0x2000000000000000) == 0)
  {
    if ((*v1 & 0xFFFFFFFFFFFFLL) != 0) {
      goto LABEL_5;
    }
    __break(1u);
  }
  if ((v2 & 0xF00000000000000) == 0)
  {
    __break(1u);
    return MEMORY[0x270F9D7B8](a1);
  }
LABEL_5:
  a1 = String.index(before:)();

  return MEMORY[0x270F9D7B8](a1);
}

unint64_t specialized RangeReplaceableCollection<>.removeLast(_:)(unint64_t result)
{
  if (result)
  {
    if ((result & 0x8000000000000000) != 0)
    {
      __break(1u);
    }
    else
    {
      unint64_t v2 = *(void *)(*(void *)v1 + 16);
      BOOL v3 = v2 >= result;
      unint64_t result = v2 - result;
      if (v3) {
        return specialized Array.replaceSubrange<A>(_:with:)(result, v2);
      }
    }
    __break(1u);
  }
  return result;
}

uint64_t Processor.clearThrough(_:)(uint64_t a1)
{
  uint64_t v3 = *(void *)(v1 + 152);
  while (*(void *)(v3 + 16))
  {
    uint64_t result = swift_isUniquelyReferenced_nonNull_native();
    if (result)
    {
      uint64_t v5 = *(void *)(v3 + 16);
      if (!v5) {
        goto LABEL_8;
      }
    }
    else
    {
      uint64_t result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew()(v3);
      uint64_t v3 = result;
      uint64_t v5 = *(void *)(result + 16);
      if (!v5)
      {
LABEL_8:
        __break(1u);
LABEL_9:
        *(void *)(v1 + 152) = v3;
        uint64_t v8 = *(void *)(v1 + 72);
        BOOL v9 = __OFADD__(v8, 1);
        uint64_t v10 = v8 + 1;
        if (!v9)
        {
          *(void *)(v1 + 72) = v10;
          return result;
        }
        __break(1u);
        break;
      }
    }
    uint64_t v6 = v5 - 1;
    uint64_t v7 = *(void *)(v3 + 80 * v6 + 32);
    *(void *)(v3 + 16) = v6;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    uint64_t result = swift_bridgeObjectRelease();
    if (v7 == a1) {
      goto LABEL_9;
    }
  }
  uint64_t result = _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance SentinelValue()
{
  return Hasher._finalize()();
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance SentinelValue()
{
  return Hasher._finalize()();
}

unint64_t protocol witness for CustomStringConvertible.description.getter in conformance SentinelValue()
{
  return 0xD000000000000010;
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance SentinelValue()
{
  return 1;
}

uint64_t specialized MutableCollection._setAll(to:)(unint64_t a1)
{
  uint64_t v3 = *v1;
  uint64_t v4 = *(void *)(*v1 + 16);
  uint64_t result = swift_isUniquelyReferenced_nonNull_native();
  if ((result & 1) == 0) {
    goto LABEL_15;
  }
  for (; v4; uint64_t v3 = result)
  {
    unint64_t v6 = *(void *)(v3 + 16);
    unint64_t v7 = v4 - 1;
    if (v4 - 1 >= v6) {
      unint64_t v7 = *(void *)(v3 + 16);
    }
    if (v7 >= 4)
    {
      unint64_t v9 = v7 + 1;
      uint64_t v10 = v9 & 3;
      if ((v9 & 3) == 0) {
        uint64_t v10 = 4;
      }
      unint64_t v8 = v9 - v10;
      int64x2_t v11 = vdupq_n_s64(a1);
      unint64_t v12 = (int64x2_t *)(v3 + 48);
      unint64_t v13 = v8;
      do
      {
        v12[-1] = v11;
        *unint64_t v12 = v11;
        v12 += 2;
        v13 -= 4;
      }
      while (v13);
    }
    else
    {
      unint64_t v8 = 0;
    }
    while (v8 < v6)
    {
      *(void *)(v3 + 32 + 8 * v8++) = a1;
      if (v4 == v8) {
        goto LABEL_13;
      }
    }
    __break(1u);
LABEL_15:
    uint64_t result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew()(v3);
  }
LABEL_13:
  *uint64_t v1 = v3;
  return result;
}

{
  uint64_t *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t result;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  int64x2_t v11;
  int64x2_t *v12;
  unint64_t v13;

  uint64_t v3 = *v1;
  uint64_t v4 = *(void *)(*v1 + 16);
  uint64_t result = swift_isUniquelyReferenced_nonNull_native();
  if ((result & 1) == 0) {
    goto LABEL_15;
  }
  for (; v4; uint64_t v3 = result)
  {
    unint64_t v6 = *(void *)(v3 + 16);
    unint64_t v7 = v4 - 1;
    if (v4 - 1 >= v6) {
      unint64_t v7 = *(void *)(v3 + 16);
    }
    if (v7 >= 4)
    {
      unint64_t v9 = v7 + 1;
      uint64_t v10 = v9 & 3;
      if ((v9 & 3) == 0) {
        uint64_t v10 = 4;
      }
      unint64_t v8 = v9 - v10;
      int64x2_t v11 = vdupq_n_s64(a1);
      unint64_t v12 = (int64x2_t *)(v3 + 48);
      unint64_t v13 = v8;
      do
      {
        v12[-1] = v11;
        *unint64_t v12 = v11;
        v12 += 2;
        v13 -= 4;
      }
      while (v13);
    }
    else
    {
      unint64_t v8 = 0;
    }
    while (v8 < v6)
    {
      *(void *)(v3 + 32 + 8 * v8++) = a1;
      if (v4 == v8) {
        goto LABEL_13;
      }
    }
    __break(1u);
LABEL_15:
    uint64_t result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew()(v3);
  }
LABEL_13:
  *uint64_t v1 = v3;
  return result;
}

uint64_t Processor.Registers.description.getter()
{
  uint64_t v1 = *v0;
  uint64_t v2 = *(void *)(*v0 + 16);
  if (v2)
  {
    swift_bridgeObjectRetain();
    v3._uint64_t countAndFlagsBits = 8250;
    v3._unint64_t object = (void *)0xE200000000000000;
    String.append(_:)(v3);
    v4._uint64_t countAndFlagsBits = MEMORY[0x21050F1D0](v1, MEMORY[0x263F8D120]);
    String.append(_:)(v4);
    swift_bridgeObjectRelease();
    v5._uint64_t countAndFlagsBits = 10;
    v5._unint64_t object = (void *)0xE100000000000000;
    String.append(_:)(v5);
    uint64_t v2 = 0x73746E656D656C65;
  }
  uint64_t v14 = v2;
  uint64_t v6 = v0[6];
  if (*(void *)(v6 + 16))
  {
    swift_bridgeObjectRetain();
    v7._uint64_t countAndFlagsBits = 8250;
    v7._unint64_t object = (void *)0xE200000000000000;
    String.append(_:)(v7);
    v8._uint64_t countAndFlagsBits = MEMORY[0x21050F1D0](v6, MEMORY[0x263F8D6C8]);
    String.append(_:)(v8);
    swift_bridgeObjectRelease();
    v9._uint64_t countAndFlagsBits = 10;
    v9._unint64_t object = (void *)0xE100000000000000;
    String.append(_:)(v9);
    uint64_t v10 = 1937010281;
    unint64_t v11 = 0xE400000000000000;
  }
  else
  {
    uint64_t v10 = 0;
    unint64_t v11 = 0xE000000000000000;
  }
  unint64_t v12 = v11;
  String.append(_:)(*(Swift::String *)&v10);
  swift_bridgeObjectRelease();
  return v14;
}

uint64_t CaptureList.createElements(_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v80 = type metadata accessor for CaptureList.Capture();
  uint64_t v4 = *(void *)(v80 - 8);
  MEMORY[0x270FA5388](v80);
  unint64_t v82 = (char *)&v65 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v78 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (offset: Int, element: (CaptureList.Capture, Processor._StoredCapture)));
  uint64_t v6 = *(void *)(v78 - 8);
  MEMORY[0x270FA5388](v78);
  uint64_t v67 = (char *)&v65 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (CaptureList.Capture, Processor._StoredCapture)?);
  MEMORY[0x270FA5388](v8 - 8);
  uint64_t v10 = (char *)&v65 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v81 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (CaptureList.Capture, Processor._StoredCapture));
  uint64_t v11 = *(void *)(v81 - 8);
  uint64_t v12 = MEMORY[0x270FA5388](v81);
  unint64_t v72 = (char *)&v65 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v12);
  uint64_t v66 = (uint64_t)&v65 - v14;
  uint64_t v15 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (offset: Int, element: (CaptureList.Capture, Processor._StoredCapture))?);
  uint64_t v16 = MEMORY[0x270FA5388](v15 - 8);
  uint64_t v18 = (long long **)((char *)&v65 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0));
  MEMORY[0x270FA5388](v16);
  uint64_t v76 = (uint64_t *)((char *)&v65 - v19);
  uint64_t v20 = CaptureList.captures.getter();
  int v77 = (unsigned int (**)(char *, uint64_t, uint64_t))(v11 + 48);
  uint64_t v75 = (void (**)(void *, uint64_t, uint64_t, uint64_t))(v6 + 56);
  uint64_t v91 = v20;
  uint64_t v92 = 0;
  uint64_t v93 = a1;
  uint64_t v94 = 0;
  unsigned __int8 v74 = (unsigned int (**)(uint64_t *, uint64_t, uint64_t))(v6 + 48);
  unint64_t v71 = (void (**)(char *))(v4 + 32);
  unint64_t v65 = &v84;
  uint64_t v21 = a2 + 64;
  uint64_t v69 = (void (**)(char *, uint64_t))(v4 + 8);
  char v95 = 0;
  uint64_t v68 = (uint64_t)v87 + 8;
  swift_bridgeObjectRetain();
  uint64_t v73 = 0;
  unint64_t v22 = (char *)MEMORY[0x263F8EE78];
  uint64_t v70 = v10;
LABEL_2:
  specialized Zip2Sequence.Iterator.next()((uint64_t)v10);
  if ((*v77)(v10, 1, v81) == 1)
  {
    outlined destroy of (range: Range<String.Index>, value: Any?)?((uint64_t)v10, &demangling cache variable for type metadata for (CaptureList.Capture, Processor._StoredCapture)?);
    uint64_t v23 = v78;
    (*v75)(v18, 1, 1, v78);
  }
  else
  {
    uint64_t v24 = v66;
    outlined init with take of (offset: Int, element: (CaptureList.Capture, Processor._StoredCapture))?((uint64_t)v10, v66, &demangling cache variable for type metadata for (CaptureList.Capture, Processor._StoredCapture));
    uint64_t v23 = v78;
    uint64_t v25 = (uint64_t)&v67[*(int *)(v78 + 48)];
    uint64_t result = outlined init with take of (offset: Int, element: (CaptureList.Capture, Processor._StoredCapture))?(v24, v25, &demangling cache variable for type metadata for (CaptureList.Capture, Processor._StoredCapture));
    uint64_t v27 = v73 + 1;
    if (__OFADD__(v73, 1))
    {
LABEL_44:
      __break(1u);
      goto LABEL_45;
    }
    uint64_t v28 = (uint64_t)v18 + *(int *)(v23 + 48);
    *uint64_t v18 = v73;
    outlined init with take of (offset: Int, element: (CaptureList.Capture, Processor._StoredCapture))?(v25, v28, &demangling cache variable for type metadata for (CaptureList.Capture, Processor._StoredCapture));
    (*v75)(v18, 0, 1, v23);
    uint64_t v73 = v27;
  }
  BOOL v29 = v76;
  outlined init with take of (offset: Int, element: (CaptureList.Capture, Processor._StoredCapture))?((uint64_t)v18, (uint64_t)v76, &demangling cache variable for type metadata for (offset: Int, element: (CaptureList.Capture, Processor._StoredCapture))?);
  if ((*v74)(v29, 1, v23) == 1)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    return (uint64_t)v22;
  }
  uint64_t v79 = v22;
  int v30 = v18;
  uint64_t v31 = *v29;
  uint64_t v32 = *(int *)(v81 + 48);
  int v33 = (char *)v29 + *(int *)(v23 + 48) + v32;
  int v34 = v72;
  uint64_t v35 = (uint64_t)&v72[v32];
  unint64_t v36 = *v71;
  uint64_t v37 = v80;
  (*v71)(v72);
  long long v38 = *((_OWORD *)v33 + 3);
  *(_OWORD *)(v35 + 32) = *((_OWORD *)v33 + 2);
  *(_OWORD *)(v35 + 48) = v38;
  *(unsigned char *)(v35 + 64) = v33[64];
  long long v39 = *((_OWORD *)v33 + 1);
  *(_OWORD *)uint64_t v35 = *(_OWORD *)v33;
  *(_OWORD *)(v35 + 16) = v39;
  ((void (*)(char *, char *, uint64_t))v36)(v82, v34, v37);
  uint64_t v40 = CaptureList.Capture.optionalDepth.getter();
  if (*(unsigned char *)(v35 + 16))
  {
    long long v84 = 0u;
    long long v83 = 0u;
    uint64_t v85 = 0;
    uint64_t v86 = 1;
  }
  else
  {
    long long v83 = *(_OWORD *)v35;
    outlined init with copy of Any?(v35 + 24, (uint64_t)v65);
  }
  uint64_t v18 = v30;
  outlined destroy of Processor._StoredCapture(v35);
  uint64_t result = CaptureList.Capture.name.getter();
  uint64_t v41 = result;
  uint64_t v43 = v42;
  int64_t v44 = 0;
  uint64_t v45 = 1 << *(unsigned char *)(a2 + 32);
  if (v45 < 64) {
    uint64_t v46 = ~(-1 << v45);
  }
  else {
    uint64_t v46 = -1;
  }
  unint64_t v47 = v46 & *(void *)(a2 + 64);
  int64_t v48 = (unint64_t)(v45 + 63) >> 6;
  while (v47)
  {
    unint64_t v49 = __clz(__rbit64(v47));
    v47 &= v47 - 1;
    unint64_t v50 = v49 | (v44 << 6);
LABEL_15:
    if (*(void *)(*(void *)(a2 + 56) + 8 * v50) == v31)
    {
      char v54 = 0;
      uint64_t v55 = *(void *)(*(void *)(a2 + 48) + 8 * v50);
LABEL_37:
      unint64_t v56 = v82;
      char v57 = CaptureList.Capture.visibleInTypedOutput.getter();
      (*v69)(v56, v80);
      *(void *)&v87[0] = v40;
      outlined init with take of (offset: Int, element: (CaptureList.Capture, Processor._StoredCapture))?((uint64_t)&v83, v68, &demangling cache variable for type metadata for (range: Range<String.Index>, value: Any?)?);
      *((void *)&v88 + 1) = v41;
      *(void *)&long long v89 = v43;
      *((void *)&v89 + 1) = v55;
      LOBYTE(v90) = v54;
      HIBYTE(v90) = v57 & 1;
      unint64_t v22 = v79;
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
        unint64_t v22 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *((void *)v22 + 2) + 1, 1, v22);
      }
      uint64_t v10 = v70;
      unint64_t v59 = *((void *)v22 + 2);
      unint64_t v58 = *((void *)v22 + 3);
      if (v59 >= v58 >> 1) {
        unint64_t v22 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v58 > 1), v59 + 1, 1, v22);
      }
      *((void *)v22 + 2) = v59 + 1;
      int v60 = &v22[88 * v59];
      long long v61 = v87[1];
      *((_OWORD *)v60 + 2) = v87[0];
      *((_OWORD *)v60 + 3) = v61;
      long long v62 = v87[2];
      long long v63 = v88;
      long long v64 = v89;
      *((_WORD *)v60 + 56) = v90;
      *((_OWORD *)v60 + 5) = v63;
      *((_OWORD *)v60 + 6) = v64;
      *((_OWORD *)v60 + 4) = v62;
      goto LABEL_2;
    }
  }
  int64_t v51 = v44 + 1;
  if (__OFADD__(v44, 1))
  {
    __break(1u);
    goto LABEL_44;
  }
  if (v51 >= v48)
  {
LABEL_36:
    uint64_t v55 = 0;
    char v54 = 1;
    goto LABEL_37;
  }
  unint64_t v52 = *(void *)(v21 + 8 * v51);
  ++v44;
  if (v52) {
    goto LABEL_34;
  }
  int64_t v44 = v51 + 1;
  if (v51 + 1 >= v48) {
    goto LABEL_36;
  }
  unint64_t v52 = *(void *)(v21 + 8 * v44);
  if (v52) {
    goto LABEL_34;
  }
  int64_t v44 = v51 + 2;
  if (v51 + 2 >= v48) {
    goto LABEL_36;
  }
  unint64_t v52 = *(void *)(v21 + 8 * v44);
  if (v52) {
    goto LABEL_34;
  }
  int64_t v44 = v51 + 3;
  if (v51 + 3 >= v48) {
    goto LABEL_36;
  }
  unint64_t v52 = *(void *)(v21 + 8 * v44);
  if (v52) {
    goto LABEL_34;
  }
  int64_t v44 = v51 + 4;
  if (v51 + 4 >= v48) {
    goto LABEL_36;
  }
  unint64_t v52 = *(void *)(v21 + 8 * v44);
  if (v52)
  {
LABEL_34:
    unint64_t v47 = (v52 - 1) & v52;
    unint64_t v50 = __clz(__rbit64(v52)) + (v44 << 6);
    goto LABEL_15;
  }
  int64_t v53 = v51 + 5;
  if (v53 >= v48) {
    goto LABEL_36;
  }
  unint64_t v52 = *(void *)(v21 + 8 * v53);
  if (v52)
  {
    int64_t v44 = v53;
    goto LABEL_34;
  }
  while (1)
  {
    int64_t v44 = v53 + 1;
    if (__OFADD__(v53, 1)) {
      break;
    }
    if (v44 >= v48) {
      goto LABEL_36;
    }
    unint64_t v52 = *(void *)(v21 + 8 * v44);
    ++v53;
    if (v52) {
      goto LABEL_34;
    }
  }
LABEL_45:
  __break(1u);
  return result;
}

uint64_t Instruction.description.getter(unint64_t a1)
{
  switch(specialized Instruction.OpCode.init(rawValue:)(HIBYTE(a1)))
  {
    case 1u:
      v69[0] = 0;
      v69[1] = 0xE000000000000000;
      _StringGuts.grow(_:)(16);
      _print_unlocked<A, B>(_:_:)();
      v2._uint64_t countAndFlagsBits = 32;
      v2._unint64_t object = (void *)0xE100000000000000;
      String.append(_:)(v2);
      v3._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
      String.append(_:)(v3);
      swift_bridgeObjectRelease();
      v4._uint64_t countAndFlagsBits = 0x5B746E69203E2D20;
      v4._unint64_t object = (void *)0xE800000000000000;
      String.append(_:)(v4);
      goto LABEL_53;
    case 2u:
      v69[0] = 0;
      v69[1] = 0xE000000000000000;
      _print_unlocked<A, B>(_:_:)();
      v5._uint64_t countAndFlagsBits = 0x5B736F70203E2D20;
      v5._unint64_t object = (void *)0xE800000000000000;
      String.append(_:)(v5);
      goto LABEL_53;
    case 4u:
      v69[0] = 0;
      v69[1] = 0xE000000000000000;
      _print_unlocked<A, B>(_:_:)();
      v6._uint64_t countAndFlagsBits = 32;
      v6._unint64_t object = (void *)0xE100000000000000;
      String.append(_:)(v6);
      goto LABEL_33;
    case 5u:
      v69[0] = 0;
      v69[1] = 0xE000000000000000;
      _print_unlocked<A, B>(_:_:)();
      v7._uint64_t countAndFlagsBits = 32;
      v7._unint64_t object = (void *)0xE100000000000000;
      String.append(_:)(v7);
      v8._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
      String.append(_:)(v8);
      swift_bridgeObjectRelease();
      v9._uint64_t countAndFlagsBits = 35;
      v9._unint64_t object = (void *)0xE100000000000000;
      String.append(_:)(v9);
      swift_bridgeObjectRelease();
      uint64_t v10 = 1953392928;
      goto LABEL_8;
    case 6u:
      v69[0] = 0;
      v69[1] = 0xE000000000000000;
      _print_unlocked<A, B>(_:_:)();
      v11._uint64_t countAndFlagsBits = 32;
      v11._unint64_t object = (void *)0xE100000000000000;
      String.append(_:)(v11);
      v12._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
      String.append(_:)(v12);
      swift_bridgeObjectRelease();
      v13._uint64_t countAndFlagsBits = 35;
      v13._unint64_t object = (void *)0xE100000000000000;
      String.append(_:)(v13);
      swift_bridgeObjectRelease();
      uint64_t v10 = 1936683040;
LABEL_8:
      v14._uint64_t countAndFlagsBits = v10 & 0xFFFF0000FFFFFFFFLL | 0x5B00000000;
      v14._unint64_t object = (void *)0xE500000000000000;
      String.append(_:)(v14);
      goto LABEL_53;
    case 7u:
      v69[0] = 0;
      v69[1] = 0xE000000000000000;
      _print_unlocked<A, B>(_:_:)();
      v15._uint64_t countAndFlagsBits = 32;
      v15._unint64_t object = (void *)0xE100000000000000;
      String.append(_:)(v15);
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (isScalarDistance: Bool, TypedInt<_Distance>));
      goto LABEL_26;
    case 8u:
      if ((unsigned __int16)a1 == 1)
      {
        v69[0] = 0;
        v69[1] = 0xE000000000000000;
        _StringGuts.grow(_:)(29);
        swift_bridgeObjectRelease();
        unint64_t v16 = 0xD00000000000001ALL;
        uint64_t v17 = "matchCaseInsensitive char[";
LABEL_51:
        unint64_t v56 = (unint64_t)(v17 - 32) | 0x8000000000000000;
      }
      else
      {
        unint64_t v16 = 0x686320686374616DLL;
        unint64_t v56 = 0xEB000000005B7261;
      }
      v69[0] = v16;
      v69[1] = v56;
      goto LABEL_53;
    case 9u:
      if ((a1 & 0x40000000000000) != 0) {
        uint64_t v18 = 1702195828;
      }
      else {
        uint64_t v18 = 0x65736C6166;
      }
      if ((a1 & 0x40000000000000) != 0) {
        uint64_t v19 = (void *)0xE400000000000000;
      }
      else {
        uint64_t v19 = (void *)0xE500000000000000;
      }
      v69[0] = 0;
      v69[1] = 0xE000000000000000;
      if ((a1 & 0x80000000000000) != 0)
      {
        _StringGuts.grow(_:)(49);
        unint64_t v20 = 0xD00000000000001CLL;
        unint64_t v21 = 0x8000000209FB5F00;
      }
      else
      {
        _StringGuts.grow(_:)(34);
        unint64_t v20 = 0x616353686374616DLL;
        unint64_t v21 = 0xED0000272072616CLL;
      }
      String.append(_:)(*(Swift::String *)&v20);
      Unicode.Scalar.write<A>(to:)();
      v57._unint64_t object = (void *)0x8000000209FB5EE0;
      v57._uint64_t countAndFlagsBits = 0xD000000000000011;
      String.append(_:)(v57);
      v58._uint64_t countAndFlagsBits = v18;
      v58._unint64_t object = v19;
      String.append(_:)(v58);
      swift_bridgeObjectRelease();
      return v69[0];
    case 0xAu:
      v69[0] = 0;
      v69[1] = 0xE000000000000000;
      if ((unsigned __int16)a1 == 1)
      {
        _StringGuts.grow(_:)(28);
        swift_bridgeObjectRelease();
        unint64_t v16 = 0xD000000000000019;
        uint64_t v17 = "matchBitsetScalar bitset[";
      }
      else
      {
        _StringGuts.grow(_:)(22);
        swift_bridgeObjectRelease();
        unint64_t v16 = 0xD000000000000013;
        uint64_t v17 = "matchBitset bitset[";
      }
      goto LABEL_51;
    case 0xBu:
      _StringGuts.grow(_:)(20);
      swift_bridgeObjectRelease();
      strcpy((char *)v69, "matchBuiltin ");
      HIWORD(v69[1]) = -4864;
      unint64_t v22 = 0xD000000000000017;
      unint64_t v23 = 0x8000000209FB5F60;
      switch((char)a1)
      {
        case 1:
          unint64_t v23 = 0xEE003E656D656870;
          unint64_t v22 = 0x61726720796E613CLL;
          break;
        case 2:
          unint64_t v23 = 0xE700000000000000;
          unint64_t v22 = 0x3E74696769643CLL;
          break;
        case 3:
          break;
        case 4:
          unint64_t v22 = 0xD000000000000012;
          unint64_t v65 = "<newline sequence>";
          goto LABEL_61;
        case 5:
          unint64_t v22 = 0xD000000000000013;
          unint64_t v65 = "vertical whitespace";
LABEL_61:
          unint64_t v23 = (unint64_t)(v65 - 32) | 0x8000000000000000;
          break;
        case 6:
          unint64_t v23 = 0xEC0000003E656361;
          unint64_t v22 = 0x707365746968773CLL;
          break;
        case 7:
          unint64_t v23 = 0xE600000000000000;
          unint64_t v22 = 0x3E64726F773CLL;
          break;
        default:
          unint64_t v23 = 0xE500000000000000;
          unint64_t v22 = 0x3E796E613CLL;
          break;
      }
      unint64_t v66 = v23;
      String.append(_:)(*(Swift::String *)&v22);
      swift_bridgeObjectRelease();
      v67._uint64_t countAndFlagsBits = 10272;
      v67._unint64_t object = (void *)0xE200000000000000;
      String.append(_:)(v67);
      if ((a1 & 0x80000000000000) != 0) {
        uint64_t v45 = 1702195828;
      }
      else {
        uint64_t v45 = 0x65736C6166;
      }
      if ((a1 & 0x80000000000000) != 0) {
        unint64_t v46 = 0xE400000000000000;
      }
      else {
        unint64_t v46 = 0xE500000000000000;
      }
      goto LABEL_70;
    case 0xDu:
      v69[0] = 0;
      v69[1] = 0xE000000000000000;
      _print_unlocked<A, B>(_:_:)();
      v24._uint64_t countAndFlagsBits = 0x656D75736E6F6320;
      v24._unint64_t object = (void *)0xEA00000000005B72;
      String.append(_:)(v24);
      goto LABEL_53;
    case 0xEu:
      v69[0] = 0;
      v69[1] = 0xE000000000000000;
      _print_unlocked<A, B>(_:_:)();
      v25._uint64_t countAndFlagsBits = 32;
      v25._unint64_t object = (void *)0xE100000000000000;
      String.append(_:)(v25);
      goto LABEL_26;
    case 0xFu:
      v69[0] = 0;
      v69[1] = 0xE000000000000000;
      _StringGuts.grow(_:)(23);
      _print_unlocked<A, B>(_:_:)();
      v26._uint64_t countAndFlagsBits = 0x5B686374616D20;
      v26._unint64_t object = (void *)0xE700000000000000;
      String.append(_:)(v26);
      v27._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
      String.append(_:)(v27);
      swift_bridgeObjectRelease();
      v28._uint64_t countAndFlagsBits = 35;
      v28._unint64_t object = (void *)0xE100000000000000;
      String.append(_:)(v28);
      swift_bridgeObjectRelease();
      unint64_t v29 = 0xE90000000000005BLL;
      uint64_t v30 = 0x6C6176203E2D205DLL;
      goto LABEL_46;
    case 0x10u:
      v69[0] = 0;
      v69[1] = 0xE000000000000000;
      goto LABEL_30;
    case 0x11u:
      v69[0] = 0;
      v69[1] = 0xE000000000000000;
LABEL_30:
      _print_unlocked<A, B>(_:_:)();
      v31._uint64_t countAndFlagsBits = 32;
      v31._unint64_t object = (void *)0xE100000000000000;
      String.append(_:)(v31);
      goto LABEL_33;
    case 0x14u:
      v69[0] = 0;
      v69[1] = 0xE000000000000000;
      _StringGuts.grow(_:)(27);
      _print_unlocked<A, B>(_:_:)();
      v32._uint64_t countAndFlagsBits = 0x3A676E6976617320;
      v32._unint64_t object = (void *)0xE900000000000020;
      String.append(_:)(v32);
      v33._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
      String.append(_:)(v33);
      swift_bridgeObjectRelease();
      v34._uint64_t countAndFlagsBits = 35;
      v34._unint64_t object = (void *)0xE100000000000000;
      String.append(_:)(v34);
      swift_bridgeObjectRelease();
      v35._uint64_t countAndFlagsBits = 0x676E69706D756A20;
      v35._unint64_t object = (void *)0xEC000000203A6F54;
      String.append(_:)(v35);
LABEL_33:
      v36._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
      String.append(_:)(v36);
      swift_bridgeObjectRelease();
      uint64_t v37 = 35;
      unint64_t v38 = 0xE100000000000000;
      goto LABEL_34;
    case 0x15u:
      v69[0] = 0;
      v69[1] = 0xE000000000000000;
      _print_unlocked<A, B>(_:_:)();
      v48._uint64_t countAndFlagsBits = 32;
      v48._unint64_t object = (void *)0xE100000000000000;
      String.append(_:)(v48);
      unint64_t v49 = (a1 >> 35) & 7;
      if (v49 > 4 || ((0x17u >> v49) & 1) == 0)
      {
        __break(1u);
        JUMPOUT(0x209F59700);
      }
      _print_unlocked<A, B>(_:_:)();
      v50._uint64_t countAndFlagsBits = 32;
      v50._unint64_t object = (void *)0xE100000000000000;
      String.append(_:)(v50);
      v51._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
      String.append(_:)(v51);
      swift_bridgeObjectRelease();
      v52._uint64_t countAndFlagsBits = 32;
      v52._unint64_t object = (void *)0xE100000000000000;
      String.append(_:)(v52);
      if (((a1 >> 18) & 0x1FF) == 1)
      {
        unint64_t v38 = 0xE900000000000064;
        uint64_t v37 = 0x65646E756F626E75;
      }
      else
      {
        lazy protocol witness table accessor for type UInt64 and conformance UInt64();
        uint64_t v37 = BinaryInteger.description.getter();
        unint64_t v38 = v64;
      }
LABEL_34:
      unint64_t v39 = v38;
      goto LABEL_40;
    case 0x16u:
      v69[0] = 0;
      v69[1] = 0xE000000000000000;
      goto LABEL_39;
    case 0x17u:
      v69[0] = 0;
      v69[1] = 0xE000000000000000;
      goto LABEL_39;
    case 0x18u:
      v69[0] = 0;
      v69[1] = 0xE000000000000000;
      _StringGuts.grow(_:)(16);
      _print_unlocked<A, B>(_:_:)();
      v40._uint64_t countAndFlagsBits = 0x5B736E61727420;
      v40._unint64_t object = (void *)0xE700000000000000;
      String.append(_:)(v40);
      v41._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
      String.append(_:)(v41);
      swift_bridgeObjectRelease();
      v42._uint64_t countAndFlagsBits = 35;
      v42._unint64_t object = (void *)0xE100000000000000;
      String.append(_:)(v42);
      swift_bridgeObjectRelease();
      v43._uint64_t countAndFlagsBits = 10333;
      v43._unint64_t object = (void *)0xE200000000000000;
      String.append(_:)(v43);
      v44._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
      String.append(_:)(v44);
      swift_bridgeObjectRelease();
      uint64_t v45 = 35;
      unint64_t v46 = 0xE100000000000000;
LABEL_70:
      unint64_t v68 = v46;
      String.append(_:)(*(Swift::String *)&v45);
      swift_bridgeObjectRelease();
      uint64_t v61 = 41;
      goto LABEL_54;
    case 0x19u:
      v69[0] = 0;
      v69[1] = 0xE000000000000000;
      _StringGuts.grow(_:)(27);
      _print_unlocked<A, B>(_:_:)();
      v53._uint64_t countAndFlagsBits = 0x5B736C617620;
      v53._unint64_t object = (void *)0xE600000000000000;
      String.append(_:)(v53);
      v54._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
      String.append(_:)(v54);
      swift_bridgeObjectRelease();
      v55._uint64_t countAndFlagsBits = 35;
      v55._unint64_t object = (void *)0xE100000000000000;
      String.append(_:)(v55);
      swift_bridgeObjectRelease();
      uint64_t v30 = 0x706163203E2D205DLL;
      unint64_t v29 = 0xEE005B7365727574;
LABEL_46:
      String.append(_:)(*(Swift::String *)&v30);
LABEL_53:
      v59._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
      String.append(_:)(v59);
      swift_bridgeObjectRelease();
      v60._uint64_t countAndFlagsBits = 35;
      v60._unint64_t object = (void *)0xE100000000000000;
      String.append(_:)(v60);
      swift_bridgeObjectRelease();
      uint64_t v61 = 93;
LABEL_54:
      unint64_t v62 = 0xE100000000000000;
      String.append(_:)(*(Swift::String *)&v61);
      break;
    case 0x1Au:
      v69[0] = 0;
      v69[1] = 0xE000000000000000;
LABEL_39:
      _print_unlocked<A, B>(_:_:)();
      v47._uint64_t countAndFlagsBits = 32;
      v47._unint64_t object = (void *)0xE100000000000000;
      String.append(_:)(v47);
      uint64_t v37 = dispatch thunk of CustomStringConvertible.description.getter();
LABEL_40:
      String.append(_:)(*(Swift::String *)&v37);
      swift_bridgeObjectRelease();
      break;
    default:
      v69[0] = 0;
      v69[1] = 0xE000000000000000;
LABEL_26:
      _print_unlocked<A, B>(_:_:)();
      break;
  }
  return v69[0];
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance Instruction()
{
  return Instruction.description.getter(*v0);
}

uint64_t Executor.firstMatch<A>(_:subjectBounds:searchBounds:graphemeSemantic:)@<X0>(unint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, unint64_t a5@<X4>, uint64_t a6@<X5>, int a7@<W6>, uint64_t a8@<X8>)
{
  LODWORD(v57) = a7;
  Swift::String v55 = (long long *)a4;
  uint64_t v56 = a6;
  uint64_t v14 = type metadata accessor for MEProgram(0);
  MEMORY[0x270FA5388](v14 - 8);
  unint64_t v16 = (uint64_t *)((char *)&v45 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0));
  outlined init with copy of MEProgram(v8, (uint64_t)v16, type metadata accessor for MEProgram);
  swift_bridgeObjectRetain();
  uint64_t v17 = v16;
  unint64_t v18 = a2;
  uint64_t v19 = a3;
  unint64_t v20 = v56;
  specialized Processor.init(program:input:subjectBounds:searchBounds:matchMode:isTracingEnabled:shouldMeasureMetrics:)(v17, a1, a2, v19, (uint64_t)v55, a5, v56, 1, (uint64_t)&v73);
  unint64_t v21 = v86;
  Executor._match<A>(_:from:using:)(a1, a2, a5, (uint64_t)&v73, (uint64_t)&v69);
  if (v21)
  {
    long long v66 = v83;
    long long v67 = v84;
    long long v68 = v85;
    long long v62 = v79;
    long long v63 = v80;
    long long v64 = v81;
    long long v65 = v82;
    v59[1] = v75;
    v59[2] = v76;
    long long v60 = v77;
    long long v61 = v78;
    long long v58 = v73;
    v59[0] = v74;
    return outlined release of Processor((uint64_t)&v58);
  }
  unint64_t v86 = v20 >> 14;
  uint64_t v46 = (a2 & 0xFFFFFFFFFFFFFFFLL) + 32;
  uint64_t v47 = a2 & 0xFFFFFFFFFFFFFFLL;
  Swift::String v54 = &v82;
  Swift::String v55 = &v81;
  Swift::String v48 = &v83;
  unint64_t v49 = (char *)&v82 + 8;
  uint64_t v51 = a2;
  uint64_t v52 = v8;
  uint64_t v53 = a8;
  unint64_t v50 = a1;
  while (1)
  {
    uint64_t v23 = v70;
    if (v70)
    {
      uint64_t v43 = v72;
      long long v57 = v71;
      uint64_t v44 = v69;
      long long v66 = v83;
      long long v67 = v84;
      long long v68 = v85;
      long long v62 = v79;
      long long v63 = v80;
      long long v64 = v81;
      long long v65 = v82;
      v59[1] = v75;
      v59[2] = v76;
      long long v60 = v77;
      long long v61 = v78;
      long long v58 = v73;
      v59[0] = v74;
      uint64_t result = outlined release of Processor((uint64_t)&v58);
      *(void *)a8 = v44;
      *(void *)(a8 + 8) = v23;
      *(_OWORD *)(a8 + 16) = v57;
      *(void *)(a8 + 32) = v43;
      return result;
    }
    if (v86 <= a5 >> 14)
    {
      long long v66 = v83;
      long long v67 = v84;
      long long v68 = v85;
      long long v62 = v79;
      long long v63 = v80;
      long long v64 = v81;
      long long v65 = v82;
      v59[1] = v75;
      v59[2] = v76;
      long long v60 = v77;
      long long v61 = v78;
      long long v58 = v73;
      v59[0] = v74;
      uint64_t result = outlined release of Processor((uint64_t)&v58);
      *(_OWORD *)a8 = 0u;
      *(_OWORD *)(a8 + 16) = 0u;
      *(void *)(a8 + 32) = 0;
      return result;
    }
    if (v57)
    {
      uint64_t v24 = v56;
      uint64_t v25 = String.index(_:offsetBy:limitedBy:)();
      a5 = (v26 & 1) != 0 ? v24 : v25;
    }
    else
    {
      unint64_t v27 = _StringGuts.validateScalarIndex(_:)(a5, a1, v18);
      if ((v18 & 0x1000000000000000) != 0)
      {
        a5 = String.UnicodeScalarView._foreignIndex(after:)();
      }
      else
      {
        unint64_t v28 = v27 >> 16;
        if ((v18 & 0x2000000000000000) != 0)
        {
          *(void *)&long long v58 = a1;
          *((void *)&v58 + 1) = v47;
          int v30 = *((unsigned __int8 *)&v59[-1] + v28);
        }
        else
        {
          uint64_t v29 = v46;
          if ((a1 & 0x1000000000000000) == 0) {
            uint64_t v29 = _StringObject.sharedUTF8.getter();
          }
          int v30 = *(unsigned __int8 *)(v29 + v28);
        }
        int v31 = (char)v30;
        unsigned int v32 = __clz(v30 ^ 0xFF) - 24;
        if (v31 >= 0) {
          LOBYTE(v32) = 1;
        }
        a5 = ((v28 + v32) << 16) | 5;
      }
    }
    long long v77 = a5;
    specialized MutableCollection._setAll(to:)(0);
    *((void *)&v59[0] + 1) = &type metadata for SentinelValue;
    uint64_t v33 = *((void *)&v81 + 1);
    uint64_t v34 = *(void *)(*((void *)&v81 + 1) + 16);
    uint64_t result = swift_isUniquelyReferenced_nonNull_native();
    if ((result & 1) == 0) {
      break;
    }
    *((void *)&v81 + 1) = v33;
    if (v34) {
      goto LABEL_22;
    }
LABEL_25:
    __swift_destroy_boxed_opaque_existential_0((uint64_t)&v58);
    specialized MutableCollection._setAll(to:)(0xFuLL);
    uint64_t v37 = *((void *)&v82 + 1);
    if (swift_isUniquelyReferenced_nonNull_native())
    {
      specialized Array.replaceSubrange<A>(_:with:)(0, *(void *)(v37 + 16));
    }
    else
    {
      *((void *)&v82 + 1) = specialized _ContiguousArrayBuffer.init(_uninitializedCount:minimumCapacity:)(0, *(void *)(v37 + 24) >> 1);
      swift_bridgeObjectRelease();
    }
    uint64_t v38 = v83;
    if (swift_isUniquelyReferenced_nonNull_native())
    {
      specialized Array.replaceSubrange<A>(_:with:)(0, *(void *)(v38 + 16));
    }
    else
    {
      *(void *)&long long v83 = specialized _ContiguousArrayBuffer.init(_uninitializedCount:minimumCapacity:)(0, *(void *)(v38 + 24) >> 1);
      swift_bridgeObjectRelease();
    }
    uint64_t v39 = *((void *)&v83 + 1);
    uint64_t v40 = *(void *)(*((void *)&v83 + 1) + 16);
    uint64_t result = swift_isUniquelyReferenced_nonNull_native();
    if (result)
    {
      *((void *)&v83 + 1) = v39;
      if (v40) {
        goto LABEL_33;
      }
    }
    else
    {
      uint64_t result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew()(v39);
      uint64_t v39 = result;
      *((void *)&v83 + 1) = result;
      if (v40)
      {
LABEL_33:
        unint64_t v41 = 0;
        uint64_t v42 = 32;
        do
        {
          long long v58 = 0uLL;
          LOBYTE(v59[0]) = 1;
          *(_OWORD *)((char *)v59 + 8) = 0u;
          *(_OWORD *)((char *)&v59[1] + 8) = 0u;
          *((void *)&v59[2] + 1) = 0;
          LOBYTE(v60) = 1;
          *((void *)&v83 + 1) = v39;
          if (v41 >= *(void *)(v39 + 16)) {
            goto LABEL_45;
          }
          ++v41;
          uint64_t result = outlined assign with take of Processor._StoredCapture(&v58, v39 + v42);
          uint64_t v39 = *((void *)&v83 + 1);
          v42 += 72;
        }
        while (v40 != v41);
      }
    }
    BYTE1(v85) = 0;
    MEMORY[0x21050FBD0](*((void *)&v85 + 1));
    *((void *)&v85 + 1) = 0;
    a1 = v50;
    unint64_t v18 = v51;
    Executor._match<A>(_:from:using:)(v50, v51, a5, (uint64_t)&v73, (uint64_t)&v69);
    a8 = v53;
  }
  uint64_t result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew()(v33);
  uint64_t v33 = result;
  *((void *)&v81 + 1) = result;
  if (!v34) {
    goto LABEL_25;
  }
LABEL_22:
  unint64_t v35 = 0;
  uint64_t v36 = 32;
  while (1)
  {
    *((void *)&v81 + 1) = v33;
    if (v35 >= *(void *)(v33 + 16)) {
      break;
    }
    ++v35;
    uint64_t result = (uint64_t)__swift_assign_boxed_opaque_existential_0((uint64_t *)(v33 + v36), (uint64_t *)&v58);
    uint64_t v33 = *((void *)&v81 + 1);
    v36 += 32;
    if (v34 == v35) {
      goto LABEL_25;
    }
  }
  __break(1u);
LABEL_45:
  __break(1u);
  return result;
}

void Executor._match<A>(_:from:using:)(uint64_t a1@<X0>, uint64_t a2@<X1>, unint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v7 = v5;
  unint64_t v35 = a3;
  uint64_t v34 = a1;
  uint64_t v11 = type metadata accessor for CaptureList();
  uint64_t v12 = *(void *)(v11 - 8);
  MEMORY[0x270FA5388](v11);
  uint64_t v14 = (char *)&v29 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v15 = type metadata accessor for Engine(0);
  MEMORY[0x270FA5388](v15 - 8);
  uint64_t v17 = (char *)&v29 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  for (int i = *(unsigned __int8 *)(a4 + 193); !*(unsigned char *)(a4 + 193); int i = *(unsigned __int8 *)(a4 + 193))
    Processor.cycle()();
  if (i == 1)
  {
    uint64_t v19 = *(void *)(a4 + 200);
    if (v19)
    {
      MEMORY[0x21050FBE0](v19);
      swift_willThrow();
    }
    else
    {
      *(void *)(a5 + 32) = 0;
      *(_OWORD *)a5 = 0u;
      *(_OWORD *)(a5 + 16) = 0u;
    }
  }
  else
  {
    uint64_t v30 = v11;
    uint64_t v32 = a2;
    uint64_t v33 = v6;
    uint64_t v20 = v7;
    unint64_t v21 = *(void *)(a4 + 64);
    uint64_t v22 = *(void *)(a4 + 168);
    outlined init with copy of MEProgram(v20, (uint64_t)v17, type metadata accessor for Engine);
    uint64_t v23 = type metadata accessor for MEProgram(0);
    uint64_t v24 = *(void *)&v17[*(int *)(v23 + 60)];
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    outlined destroy of MEProgram((uint64_t)v17, type metadata accessor for MEProgram);
    unint64_t v31 = v21;
    if (v21 >> 14 < v35 >> 14)
    {
      __break(1u);
    }
    else
    {
      unint64_t v25 = v35;
      outlined init with copy of MEProgram(v20, (uint64_t)v17, type metadata accessor for Engine);
      uint64_t v26 = v30;
      (*(void (**)(char *, char *, uint64_t))(v12 + 16))(v14, &v17[*(int *)(v23 + 56)], v30);
      outlined destroy of MEProgram((uint64_t)v17, type metadata accessor for MEProgram);
      uint64_t v27 = CaptureList.createElements(_:)(v22, v24);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      (*(void (**)(char *, uint64_t))(v12 + 8))(v14, v26);
      uint64_t v28 = v32;
      *(void *)a5 = v34;
      *(void *)(a5 + 8) = v28;
      *(void *)(a5 + 16) = v27;
      *(void *)(a5 + 24) = v25;
      *(void *)(a5 + 32) = v31;
      swift_bridgeObjectRetain();
    }
  }
}

uint64_t Executor.match<A>(_:in:_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unint64_t a3@<X2>, uint64_t a4@<X3>, char a5@<W4>, uint64_t a6@<X8>)
{
  char v12 = a5 & 1;
  uint64_t v13 = type metadata accessor for MEProgram(0);
  MEMORY[0x270FA5388](v13 - 8);
  uint64_t v15 = (uint64_t *)((char *)v17 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0));
  outlined init with copy of MEProgram(v6, (uint64_t)v15, type metadata accessor for MEProgram);
  swift_bridgeObjectRetain();
  specialized Processor.init(program:input:subjectBounds:searchBounds:matchMode:isTracingEnabled:shouldMeasureMetrics:)(v15, a1, a2, a3, a4, a3, a4, v12, (uint64_t)v18);
  Executor._match<A>(_:from:using:)(a1, a2, a3, (uint64_t)v18, a6);
  v17[10] = v18[10];
  v17[11] = v18[11];
  v17[12] = v18[12];
  v17[6] = v18[6];
  v17[7] = v18[7];
  v17[8] = v18[8];
  v17[9] = v18[9];
  void v17[2] = v18[2];
  v17[3] = v18[3];
  v17[4] = v18[4];
  uint64_t v17[5] = v18[5];
  v17[0] = v18[0];
  v17[1] = v18[1];
  return outlined release of Processor((uint64_t)v17);
}

uint64_t Regex._literalPattern.getter()
{
  uint64_t v1 = *v0;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<MatchingOptions.Representation>);
  uint64_t v2 = swift_allocObject();
  *(_OWORD *)(v2 + 16) = xmmword_209FAFD60;
  *(_DWORD *)(v2 + 32) = 81984;
  uint64_t v9 = MEMORY[0x263F8EE78];
  LiteralPrinter.outputNode(_:)(*(void *)(v1 + 24));
  uint64_t v3 = *(void *)(v9 + 16);
  MEMORY[0x21050EFD0](v3);
  if (v3)
  {
    Swift::String v4 = (unsigned char *)(v9 + 48);
    while ((*v4 & 1) == 0)
    {
      uint64_t v6 = *((void *)v4 - 2);
      uint64_t v5 = (void *)*((void *)v4 - 1);
      swift_bridgeObjectRetain();
      v7._uint64_t countAndFlagsBits = v6;
      v7._unint64_t object = v5;
      String.append(_:)(v7);
      outlined consume of PatternSegment(v6, (uint64_t)v5, 0);
      v4 += 24;
      if (!--v3) {
        goto LABEL_7;
      }
    }
    swift_bridgeObjectRelease();
  }
LABEL_7:
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return 0;
}

void LiteralPrinter.outputNode(_:)(unint64_t a1)
{
  while (2)
  {
    unint64_t v1 = a1;
    uint64_t v2 = type metadata accessor for DSLTree.Atom(0);
    MEMORY[0x270FA5388](v2 - 8);
    Swift::String v4 = (char *)&v80 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
    uint64_t v5 = type metadata accessor for DSLTree.QuantificationKind(0);
    MEMORY[0x270FA5388](v5 - 8);
    Swift::String v7 = (char *)&v80 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
    uint64_t v8 = type metadata accessor for DSLTree._AST.QuantificationAmount(0);
    MEMORY[0x270FA5388](v8 - 8);
    uint64_t v10 = (char *)&v80 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
    uint64_t v11 = type metadata accessor for AST.Group.Kind();
    *(void *)&long long v82 = *(void *)(v11 - 8);
    MEMORY[0x270FA5388](v11);
    uint64_t v13 = (char *)&v80 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
    uint64_t v14 = type metadata accessor for AST.MatchingOptionSequence();
    unint64_t v81 = *(void *)(v14 - 8);
    MEMORY[0x270FA5388](v14);
    uint64_t v16 = (char *)&v80 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
    uint64_t v17 = type metadata accessor for DSLTree._AST.GroupKind(0);
    MEMORY[0x270FA5388](v17 - 8);
    uint64_t v19 = (char *)&v80 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
    uint64_t v20 = v83;
    switch((v1 >> 59) & 0x1E | (v1 >> 2) & 1)
    {
      case 1uLL:
        uint64_t v37 = *(void *)((v1 & 0xFFFFFFFFFFFFFFBLL) + 0x10);
        uint64_t v38 = *(void *)(v37 + 16);
        if (v38)
        {
          uint64_t v39 = (uint64_t *)(v37 + 32);
          do
          {
            uint64_t v40 = *v39++;
            swift_retain();
            LiteralPrinter.outputNode(_:)(v40);
            swift_release();
            --v38;
          }
          while (v38);
        }
        return;
      case 2uLL:
        uint64_t v41 = v1 & 0xFFFFFFFFFFFFFFBLL;
        if ((*(unsigned char *)((v1 & 0xFFFFFFFFFFFFFFBLL) + 0x28) & 1) != 0 && !*(void *)((v1 & 0xFFFFFFFFFFFFFFBLL) + 0x38))
        {
          uint64_t v76 = *(void *)((v1 & 0xFFFFFFFFFFFFFFBLL) + 0x10);
          uint64_t v77 = *(void *)((v1 & 0xFFFFFFFFFFFFFFBLL) + 0x18);
          uint64_t v78 = *(void *)(v41 + 48);
          long long v57 = v83;
          MatchingOptions.beginScope()();
          LiteralPrinter.outputCapture(_:_:)(v76, v77, v78);
          uint64_t v56 = (char *)*v57;
          if (*(void *)(*v57 + 16))
          {
            if (swift_isUniquelyReferenced_nonNull_native())
            {
              uint64_t v79 = *((void *)v56 + 2);
              if (v79)
              {
LABEL_61:
                *((void *)v56 + 2) = v79 - 1;
                *long long v57 = (uint64_t)v56;
                return;
              }
LABEL_70:
              __break(1u);
              JUMPOUT(0x209F5ADBCLL);
            }
LABEL_69:
            uint64_t v56 = specialized _ArrayBuffer._consumeAndCreateNew()((uint64_t)v56);
            uint64_t v79 = *((void *)v56 + 2);
            if (v79) {
              goto LABEL_61;
            }
            goto LABEL_70;
          }
LABEL_68:
          __break(1u);
          goto LABEL_69;
        }
        uint64_t v22 = v83;
        unint64_t v21 = (char *)v83[1];
LABEL_47:
        swift_retain();
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
LABEL_48:
        }
          unint64_t v21 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *((void *)v21 + 2) + 1, 1, v21, &demangling cache variable for type metadata for _ContiguousArrayStorage<PatternSegment>);
LABEL_3:
        unint64_t v24 = *((void *)v21 + 2);
        unint64_t v23 = *((void *)v21 + 3);
        if (v24 >= v23 >> 1) {
          unint64_t v21 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v23 > 1), v24 + 1, 1, v21, &demangling cache variable for type metadata for _ContiguousArrayStorage<PatternSegment>);
        }
        *((void *)v21 + 2) = v24 + 1;
        unint64_t v25 = &v21[24 * v24];
        *((void *)v25 + 4) = v1;
        *((void *)v25 + 5) = 0;
        v25[48] = 1;
        v22[1] = (uint64_t)v21;
        return;
      case 3uLL:
        uint64_t v42 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (DSLTree._AST.GroupKind, DSLTree.Node));
        uint64_t v43 = swift_projectBox();
        uint64_t v80 = *(void *)(v43 + *(int *)(v42 + 48));
        outlined init with copy of MEProgram(v43, (uint64_t)v19, type metadata accessor for DSLTree._AST.GroupKind);
        uint64_t v44 = DSLTree._AST.GroupKind._patternString.getter();
        if (!v45)
        {
          outlined destroy of MEProgram((uint64_t)v19, type metadata accessor for DSLTree._AST.GroupKind);
          uint64_t v22 = v83;
          unint64_t v21 = (char *)v83[1];
          goto LABEL_47;
        }
        uint64_t v46 = v44;
        uint64_t v47 = v45;
        Swift::String v48 = v83;
        MatchingOptions.beginScope()();
        unint64_t v49 = (char *)v48[1];
        swift_bridgeObjectRetain();
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
          unint64_t v49 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *((void *)v49 + 2) + 1, 1, v49, &demangling cache variable for type metadata for _ContiguousArrayStorage<PatternSegment>);
        }
        unint64_t v51 = *((void *)v49 + 2);
        unint64_t v50 = *((void *)v49 + 3);
        if (v51 >= v50 >> 1) {
          unint64_t v49 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v50 > 1), v51 + 1, 1, v49, &demangling cache variable for type metadata for _ContiguousArrayStorage<PatternSegment>);
        }
        *((void *)v49 + 2) = v51 + 1;
        uint64_t v52 = &v49[24 * v51];
        *((void *)v52 + 4) = v46;
        *((void *)v52 + 5) = v47;
        v52[48] = 0;
        swift_bridgeObjectRelease();
        uint64_t v53 = (char **)v83;
        v83[1] = (uint64_t)v49;
        uint64_t v54 = v82;
        (*(void (**)(char *, char *, uint64_t))(v82 + 32))(v13, v19, v11);
        if ((*(unsigned int (**)(char *, uint64_t))(v54 + 88))(v13, v11) != *MEMORY[0x263F8FCC0])
        {
          (*(void (**)(char *, uint64_t))(v54 + 8))(v13, v11);
          goto LABEL_50;
        }
        (*(void (**)(char *, uint64_t))(v54 + 96))(v13, v11);
        unint64_t v55 = v81;
        (*(void (**)(char *, char *, uint64_t))(v81 + 32))(v16, v13, v14);
        uint64_t v56 = *v53;
        long long v57 = (uint64_t *)*((void *)*v53 + 2);
        char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
        *uint64_t v53 = v56;
        if ((isUniquelyReferenced_nonNull_native & 1) == 0) {
          goto LABEL_65;
        }
        if (!v57)
        {
LABEL_66:
          __break(1u);
LABEL_67:
          __break(1u);
          goto LABEL_68;
        }
        break;
      case 4uLL:
        a1 = *(void *)((v1 & 0xFFFFFFFFFFFFFFBLL) + 0x10);
        goto LABEL_43;
      case 5uLL:
      case 0xBuLL:
      case 0xDuLL:
      case 0xEuLL:
      case 0xFuLL:
        unint64_t v21 = (char *)v83[1];
        swift_retain();
        uint64_t v22 = v20;
        if (swift_isUniquelyReferenced_nonNull_native()) {
          goto LABEL_3;
        }
        goto LABEL_48;
      case 6uLL:
        uint64_t v59 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (DSLTree._AST.QuantificationAmount, DSLTree.QuantificationKind, DSLTree.Node));
        uint64_t v60 = swift_projectBox();
        uint64_t v61 = v60 + *(int *)(v59 + 48);
        unint64_t v62 = *(void *)(v60 + *(int *)(v59 + 64));
        outlined init with copy of MEProgram(v60, (uint64_t)v10, type metadata accessor for DSLTree._AST.QuantificationAmount);
        outlined init with copy of MEProgram(v61, (uint64_t)v7, type metadata accessor for DSLTree.QuantificationKind);
        LiteralPrinter.outputQuantification(_:_:_:)((uint64_t)v10, (uint64_t)v7, v62);
        outlined destroy of MEProgram((uint64_t)v7, type metadata accessor for DSLTree.QuantificationKind);
        outlined destroy of MEProgram((uint64_t)v10, type metadata accessor for DSLTree._AST.QuantificationAmount);
        return;
      case 7uLL:
        char v63 = *(unsigned char *)((v1 & 0xFFFFFFFFFFFFFFBLL) + 0x18);
        uint64_t v84 = *(void *)((v1 & 0xFFFFFFFFFFFFFFBLL) + 0x10);
        char v85 = v63;
        LiteralPrinter.outputCustomCharacterClass(_:)(&v84);
        return;
      case 8uLL:
        uint64_t v64 = swift_projectBox();
        outlined init with copy of MEProgram(v64, (uint64_t)v4, type metadata accessor for DSLTree.Atom);
        LiteralPrinter.outputAtom(_:)(v4);
        outlined destroy of MEProgram((uint64_t)v4, type metadata accessor for DSLTree.Atom);
        return;
      case 9uLL:
      case 0x10uLL:
        return;
      case 0xAuLL:
        v87._uint64_t countAndFlagsBits = *(void *)((v1 & 0xFFFFFFFFFFFFFFBLL) + 0x10);
        v87._unint64_t object = *(void **)((v1 & 0xFFFFFFFFFFFFFFBLL) + 0x18);
        long long v65 = (char *)v83[1];
        uint64_t v66 = specialized LiteralPrinter.prepareQuotedLiteral(_:)(v87, *v83);
        uint64_t v68 = v67;
        swift_bridgeObjectRetain();
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
          long long v65 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *((void *)v65 + 2) + 1, 1, v65, &demangling cache variable for type metadata for _ContiguousArrayStorage<PatternSegment>);
        }
        unint64_t v70 = *((void *)v65 + 2);
        unint64_t v69 = *((void *)v65 + 3);
        if (v70 >= v69 >> 1) {
          long long v65 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v69 > 1), v70 + 1, 1, v65, &demangling cache variable for type metadata for _ContiguousArrayStorage<PatternSegment>);
        }
        *((void *)v65 + 2) = v70 + 1;
        long long v71 = &v65[24 * v70];
        *((void *)v71 + 4) = v66;
        *((void *)v71 + 5) = v68;
        v71[48] = 0;
        swift_bridgeObjectRelease();
        v20[1] = (uint64_t)v65;
        return;
      case 0xCuLL:
        a1 = *(void *)swift_projectBox();
LABEL_43:
        continue;
      default:
        uint64_t v26 = *(void **)(v1 + 16);
        uint64_t v27 = v26[2];
        if (v27)
        {
          uint64_t v28 = v26[4];
          swift_retain();
          LiteralPrinter.outputNode(_:)(v28);
          swift_release();
          uint64_t v29 = v27 - 1;
          if (v27 != 1)
          {
            uint64_t v30 = v26 + 5;
            long long v82 = xmmword_209FAFDE0;
            do
            {
              uint64_t v32 = *v30++;
              uint64_t v31 = v32;
              uint64_t v33 = (char *)v20[1];
              swift_retain();
              if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
                uint64_t v33 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *((void *)v33 + 2) + 1, 1, v33, &demangling cache variable for type metadata for _ContiguousArrayStorage<PatternSegment>);
              }
              unint64_t v35 = *((void *)v33 + 2);
              unint64_t v34 = *((void *)v33 + 3);
              if (v35 >= v34 >> 1) {
                uint64_t v33 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v34 > 1), v35 + 1, 1, v33, &demangling cache variable for type metadata for _ContiguousArrayStorage<PatternSegment>);
              }
              *((void *)v33 + 2) = v35 + 1;
              uint64_t v36 = &v33[24 * v35];
              *((_OWORD *)v36 + 2) = v82;
              v36[48] = 0;
              uint64_t v20 = v83;
              v83[1] = (uint64_t)v33;
              LiteralPrinter.outputNode(_:)(v31);
              swift_release();
              --v29;
            }
            while (v29);
          }
        }
        return;
    }
    break;
  }
  while (1)
  {
    if ((unint64_t)v57 > *((void *)v56 + 2)) {
      goto LABEL_67;
    }
    MatchingOptions.Representation.apply(_:)((uint64_t)v16);
    (*(void (**)(char *, uint64_t))(v55 + 8))(v16, v14);
LABEL_50:
    LiteralPrinter.outputNode(_:)(v80);
    uint64_t v72 = v53[1];
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
      uint64_t v72 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *((void *)v72 + 2) + 1, 1, v72, &demangling cache variable for type metadata for _ContiguousArrayStorage<PatternSegment>);
    }
    unint64_t v55 = *((void *)v72 + 2);
    unint64_t v73 = *((void *)v72 + 3);
    long long v57 = (uint64_t *)(v55 + 1);
    if (v55 >= v73 >> 1) {
      uint64_t v72 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v73 > 1), v55 + 1, 1, v72, &demangling cache variable for type metadata for _ContiguousArrayStorage<PatternSegment>);
    }
    *((void *)v72 + 2) = v57;
    long long v74 = &v72[24 * v55];
    *((_OWORD *)v74 + 2) = xmmword_209FAFDD0;
    v74[48] = 0;
    v53[1] = v72;
    uint64_t v56 = *v53;
    if (*((void *)*v53 + 2))
    {
      if (swift_isUniquelyReferenced_nonNull_native())
      {
        uint64_t v75 = *((void *)v56 + 2);
        if (v75) {
          goto LABEL_57;
        }
        goto LABEL_64;
      }
    }
    else
    {
      __break(1u);
    }
    uint64_t v56 = specialized _ArrayBuffer._consumeAndCreateNew()((uint64_t)v56);
    uint64_t v75 = *((void *)v56 + 2);
    if (v75)
    {
LABEL_57:
      *((void *)v56 + 2) = v75 - 1;
      *uint64_t v53 = v56;
      return;
    }
LABEL_64:
    __break(1u);
LABEL_65:
    uint64_t v56 = specialized _ArrayBuffer._consumeAndCreateNew()((uint64_t)v56);
    *uint64_t v53 = v56;
    if (!v57) {
      goto LABEL_66;
    }
  }
}

double LiteralPrinter.outputCapture(_:_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = v3;
  if (a2)
  {
    String.append(_:)(*(Swift::String *)&a1);
    v6._uint64_t countAndFlagsBits = 62;
    v6._unint64_t object = (void *)0xE100000000000000;
    String.append(_:)(v6);
    Swift::String v7 = *(char **)(v3 + 8);
    swift_bridgeObjectRetain();
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
      Swift::String v7 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *((void *)v7 + 2) + 1, 1, v7, &demangling cache variable for type metadata for _ContiguousArrayStorage<PatternSegment>);
    }
    unint64_t v9 = *((void *)v7 + 2);
    unint64_t v8 = *((void *)v7 + 3);
    if (v9 >= v8 >> 1) {
      Swift::String v7 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v8 > 1), v9 + 1, 1, v7, &demangling cache variable for type metadata for _ContiguousArrayStorage<PatternSegment>);
    }
    *((void *)v7 + 2) = v9 + 1;
    uint64_t v10 = &v7[24 * v9];
    *((void *)v10 + 4) = 3948328;
    *((void *)v10 + 5) = 0xE300000000000000;
    v10[48] = 0;
    swift_bridgeObjectRelease();
    *(void *)(v3 + 8) = v7;
  }
  else
  {
    uint64_t v11 = *(char **)(v3 + 8);
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
      uint64_t v11 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *((void *)v11 + 2) + 1, 1, v11, &demangling cache variable for type metadata for _ContiguousArrayStorage<PatternSegment>);
    }
    unint64_t v13 = *((void *)v11 + 2);
    unint64_t v12 = *((void *)v11 + 3);
    if (v13 >= v12 >> 1) {
      uint64_t v11 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v12 > 1), v13 + 1, 1, v11, &demangling cache variable for type metadata for _ContiguousArrayStorage<PatternSegment>);
    }
    *((void *)v11 + 2) = v13 + 1;
    uint64_t v14 = &v11[24 * v13];
    *((_OWORD *)v14 + 2) = xmmword_209FAFDF0;
    v14[48] = 0;
    *(void *)(v4 + 8) = v11;
  }
  LiteralPrinter.outputNode(_:)(a3);
  uint64_t v15 = *(char **)(v4 + 8);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
    uint64_t v15 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *((void *)v15 + 2) + 1, 1, v15, &demangling cache variable for type metadata for _ContiguousArrayStorage<PatternSegment>);
  }
  unint64_t v17 = *((void *)v15 + 2);
  unint64_t v16 = *((void *)v15 + 3);
  if (v17 >= v16 >> 1) {
    uint64_t v15 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v16 > 1), v17 + 1, 1, v15, &demangling cache variable for type metadata for _ContiguousArrayStorage<PatternSegment>);
  }
  *((void *)v15 + 2) = v17 + 1;
  *(void *)&double result = 41;
  uint64_t v19 = &v15[24 * v17];
  *((_OWORD *)v19 + 2) = xmmword_209FAFDD0;
  v19[48] = 0;
  *(void *)(v4 + 8) = v15;
  return result;
}

uint64_t DSLTree._AST.GroupKind._patternString.getter()
{
  uint64_t v1 = v0;
  uint64_t v2 = type metadata accessor for AST.MatchingOptionSequence();
  uint64_t v3 = *(void *)(v2 - 8);
  MEMORY[0x270FA5388](v2);
  uint64_t v5 = (char *)&v22 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Source.Located<String>);
  uint64_t v7 = *(void *)(v6 - 8);
  MEMORY[0x270FA5388](v6);
  unint64_t v9 = (char *)&v22 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = type metadata accessor for AST.Group.Kind();
  uint64_t v11 = *(void *)(v10 - 8);
  MEMORY[0x270FA5388](v10);
  unint64_t v13 = (char *)&v22 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t))(v11 + 16))(v13, v1, v10);
  int v14 = (*(uint64_t (**)(char *, uint64_t))(v11 + 88))(v13, v10);
  if (v14 == *MEMORY[0x263F8FC78])
  {
    (*(void (**)(char *, uint64_t))(v11 + 96))(v13, v10);
    (*(void (**)(char *, char *, uint64_t))(v7 + 32))(v9, v13, v6);
    uint64_t v23 = 3948328;
    unint64_t v24 = 0xE300000000000000;
    MEMORY[0x21050EDA0](&v22, v6);
    (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v6);
    String.append(_:)(v22);
    swift_bridgeObjectRelease();
    v15._uint64_t countAndFlagsBits = 62;
    v15._unint64_t object = (void *)0xE100000000000000;
    String.append(_:)(v15);
    return v23;
  }
  int v17 = v14;
  if (v14 == *MEMORY[0x263F8FC88])
  {
    (*(void (**)(char *, uint64_t))(v11 + 8))(v13, v10);
    return 0;
  }
  else
  {
    if (v14 == *MEMORY[0x263F8FCC0])
    {
      (*(void (**)(char *, uint64_t))(v11 + 96))(v13, v10);
      (*(void (**)(char *, char *, uint64_t))(v3 + 32))(v5, v13, v2);
      uint64_t v18 = AST.MatchingOptionSequence._patternString.getter();
      unint64_t v20 = v19;
      (*(void (**)(char *, uint64_t))(v3 + 8))(v5, v2);
      uint64_t v23 = v18;
      unint64_t v24 = v20;
      swift_bridgeObjectRetain();
      v21._uint64_t countAndFlagsBits = 58;
      v21._unint64_t object = (void *)0xE100000000000000;
      String.append(_:)(v21);
      swift_bridgeObjectRelease();
      return v23;
    }
    if (v14 == *MEMORY[0x263F8FCC8])
    {
      return 40;
    }
    else
    {
      uint64_t result = 2178856;
      if (v17 == *MEMORY[0x263F8FC70])
      {
        return 3817256;
      }
      else if (v17 == *MEMORY[0x263F8FC90])
      {
        return 8142632;
      }
      else if (v17 == *MEMORY[0x263F8FCA0])
      {
        return 4079400;
      }
      else if (v17 == *MEMORY[0x263F8FCD0])
      {
        return 4013864;
      }
      else if (v17 != *MEMORY[0x263F8FC98])
      {
        if (v17 == *MEMORY[0x263F8FCB0])
        {
          return 2768680;
        }
        else if (v17 == *MEMORY[0x263F8FC68])
        {
          return 1027358504;
        }
        else if (v17 == *MEMORY[0x263F8FCA8])
        {
          return 557596456;
        }
        else if (v17 == *MEMORY[0x263F8FCB8])
        {
          return 708591400;
        }
        else if (v17 == *MEMORY[0x263F8FCD8])
        {
          return 0x3A72732A28;
        }
        else if (v17 == *MEMORY[0x263F8FC80])
        {
          return 0x3A7273612A28;
        }
        else
        {
          uint64_t result = _assertionFailure(_:_:file:line:flags:)();
          __break(1u);
        }
      }
    }
  }
  return result;
}

uint64_t LiteralPrinter.outputQuantification(_:_:_:)(uint64_t a1, uint64_t a2, unint64_t a3)
{
  uint64_t v80 = a2;
  uint64_t v6 = type metadata accessor for AST.Atom.Number();
  uint64_t v79 = *(void *)(v6 - 8);
  uint64_t v7 = MEMORY[0x270FA5388](v6);
  uint64_t v77 = (char *)&v74 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = MEMORY[0x270FA5388](v7);
  uint64_t v76 = (char *)&v74 - v10;
  uint64_t v11 = MEMORY[0x270FA5388](v9);
  uint64_t v78 = (char *)&v74 - v12;
  uint64_t v13 = MEMORY[0x270FA5388](v11);
  Swift::String v15 = (char *)&v74 - v14;
  MEMORY[0x270FA5388](v13);
  int v17 = (char *)&v74 - v16;
  uint64_t v18 = type metadata accessor for AST.Quantification.Amount();
  uint64_t v19 = *(void *)(v18 - 8);
  MEMORY[0x270FA5388](v18);
  Swift::String v21 = (char *)&v74 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  Swift::String v22 = (char *)v3[1];
  if (LiteralPrinter.requiresGrouping(_:)(a3, *v3))
  {
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v74 = a1;
    uint64_t v75 = v6;
    if ((isUniquelyReferenced_nonNull_native & 1) == 0) {
      Swift::String v22 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *((void *)v22 + 2) + 1, 1, v22, &demangling cache variable for type metadata for _ContiguousArrayStorage<PatternSegment>);
    }
    unint64_t v25 = *((void *)v22 + 2);
    unint64_t v24 = *((void *)v22 + 3);
    if (v25 >= v24 >> 1) {
      Swift::String v22 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v24 > 1), v25 + 1, 1, v22, &demangling cache variable for type metadata for _ContiguousArrayStorage<PatternSegment>);
    }
    *((void *)v22 + 2) = v25 + 1;
    uint64_t v26 = &v22[24 * v25];
    *((_OWORD *)v26 + 2) = xmmword_209FAFE00;
    v26[48] = 0;
    v3[1] = (uint64_t)v22;
    uint64_t v27 = v3;
    LiteralPrinter.outputNode(_:)(a3);
    uint64_t v28 = (char *)v3[1];
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
      uint64_t v28 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *((void *)v28 + 2) + 1, 1, v28, &demangling cache variable for type metadata for _ContiguousArrayStorage<PatternSegment>);
    }
    unint64_t v30 = *((void *)v28 + 2);
    unint64_t v29 = *((void *)v28 + 3);
    if (v30 >= v29 >> 1) {
      uint64_t v28 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v29 > 1), v30 + 1, 1, v28, &demangling cache variable for type metadata for _ContiguousArrayStorage<PatternSegment>);
    }
    *((void *)v28 + 2) = v30 + 1;
    uint64_t v31 = &v28[24 * v30];
    *((_OWORD *)v31 + 2) = xmmword_209FAFDD0;
    v31[48] = 0;
    v27[1] = (uint64_t)v28;
    a1 = v74;
    uint64_t v6 = v75;
  }
  else
  {
    LiteralPrinter.outputNode(_:)(a3);
    uint64_t v27 = v3;
  }
  (*(void (**)(char *, uint64_t, uint64_t))(v19 + 16))(v21, a1, v18);
  int v32 = (*(uint64_t (**)(char *, uint64_t))(v19 + 88))(v21, v18);
  if (v32 == *MEMORY[0x263F8F990])
  {
    (*(void (**)(char *, uint64_t))(v19 + 96))(v21, v18);
    uint64_t v33 = v79;
    (*(void (**)(char *, char *, uint64_t))(v79 + 32))(v17, v21, v6);
    uint64_t v82 = 123;
    unint64_t v83 = 0xE100000000000000;
    uint64_t v34 = AST.Atom.Number.value.getter();
    if ((v35 & 1) == 0)
    {
      uint64_t v36 = v34;
      (*(void (**)(char *, uint64_t))(v33 + 8))(v17, v6);
LABEL_15:
      uint64_t v81 = v36;
      v37._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
      String.append(_:)(v37);
      swift_bridgeObjectRelease();
      uint64_t v38 = 125;
      unint64_t v39 = 0xE100000000000000;
LABEL_19:
      String.append(_:)(*(Swift::String *)&v38);
      uint64_t v46 = v82;
      unint64_t v45 = v83;
      uint64_t v47 = (char *)v27[1];
      swift_bridgeObjectRetain();
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
        uint64_t v47 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *((void *)v47 + 2) + 1, 1, v47, &demangling cache variable for type metadata for _ContiguousArrayStorage<PatternSegment>);
      }
      unint64_t v49 = *((void *)v47 + 2);
      unint64_t v48 = *((void *)v47 + 3);
      if (v49 >= v48 >> 1) {
        uint64_t v47 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v48 > 1), v49 + 1, 1, v47, &demangling cache variable for type metadata for _ContiguousArrayStorage<PatternSegment>);
      }
      *((void *)v47 + 2) = v49 + 1;
      unint64_t v50 = &v47[24 * v49];
      *((void *)v50 + 4) = v46;
      *((void *)v50 + 5) = v45;
      v50[48] = 0;
      swift_bridgeObjectRelease();
      goto LABEL_24;
    }
    __break(1u);
    goto LABEL_52;
  }
  if (v32 == *MEMORY[0x263F8F998])
  {
    (*(void (**)(char *, uint64_t))(v19 + 96))(v21, v18);
    uint64_t v40 = v79;
    (*(void (**)(char *, char *, uint64_t))(v79 + 32))(v15, v21, v6);
    uint64_t v82 = 123;
    unint64_t v83 = 0xE100000000000000;
    uint64_t v41 = AST.Atom.Number.value.getter();
    if ((v42 & 1) == 0)
    {
      uint64_t v43 = v41;
      (*(void (**)(char *, uint64_t))(v40 + 8))(v15, v6);
      uint64_t v81 = v43;
      v44._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
      String.append(_:)(v44);
      swift_bridgeObjectRelease();
      uint64_t v38 = 32044;
      unint64_t v39 = 0xE200000000000000;
      goto LABEL_19;
    }
LABEL_52:
    __break(1u);
LABEL_53:
    __break(1u);
    goto LABEL_54;
  }
  if (v32 == *MEMORY[0x263F8F988])
  {
    (*(void (**)(char *, uint64_t))(v19 + 96))(v21, v18);
    uint64_t v52 = v78;
    uint64_t v53 = v79;
    (*(void (**)(char *, char *, uint64_t))(v79 + 32))(v78, v21, v6);
    uint64_t v82 = 11387;
    unint64_t v83 = 0xE200000000000000;
    uint64_t v54 = AST.Atom.Number.value.getter();
    if ((v55 & 1) == 0)
    {
      uint64_t v36 = v54;
      (*(void (**)(char *, uint64_t))(v53 + 8))(v52, v6);
      goto LABEL_15;
    }
    goto LABEL_53;
  }
  if (v32 == *MEMORY[0x263F8F980])
  {
    (*(void (**)(char *, uint64_t))(v19 + 96))(v21, v18);
    uint64_t v56 = &v21[*(int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (AST.Atom.Number, AST.Atom.Number))
                      + 48)];
    uint64_t v57 = v79;
    long long v58 = *(void (**)(char *, char *, uint64_t))(v79 + 32);
    uint64_t v59 = v76;
    v58(v76, v21, v6);
    uint64_t v60 = v77;
    v58(v77, v56, v6);
    uint64_t v82 = 123;
    unint64_t v83 = 0xE100000000000000;
    uint64_t v61 = AST.Atom.Number.value.getter();
    if ((v62 & 1) == 0)
    {
      uint64_t v81 = v61;
      v63._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
      String.append(_:)(v63);
      swift_bridgeObjectRelease();
      v64._uint64_t countAndFlagsBits = 44;
      v64._unint64_t object = (void *)0xE100000000000000;
      String.append(_:)(v64);
      uint64_t v65 = AST.Atom.Number.value.getter();
      if ((v66 & 1) == 0)
      {
        uint64_t v36 = v65;
        uint64_t v67 = *(void (**)(char *, uint64_t))(v57 + 8);
        v67(v60, v6);
        v67(v59, v6);
        goto LABEL_15;
      }
      goto LABEL_55;
    }
LABEL_54:
    __break(1u);
LABEL_55:
    __break(1u);
    goto LABEL_56;
  }
  if (v32 == *MEMORY[0x263F8F978])
  {
    uint64_t v47 = (char *)v27[1];
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
      uint64_t v47 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *((void *)v47 + 2) + 1, 1, v47, &demangling cache variable for type metadata for _ContiguousArrayStorage<PatternSegment>);
    }
    unint64_t v69 = *((void *)v47 + 2);
    unint64_t v68 = *((void *)v47 + 3);
    if (v69 >= v68 >> 1) {
      uint64_t v47 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v68 > 1), v69 + 1, 1, v47, &demangling cache variable for type metadata for _ContiguousArrayStorage<PatternSegment>);
    }
    *((void *)v47 + 2) = v69 + 1;
    long long v70 = xmmword_209FAFE30;
LABEL_50:
    unint64_t v73 = &v47[24 * v69];
    *((_OWORD *)v73 + 2) = v70;
    v73[48] = 0;
LABEL_24:
    v27[1] = (uint64_t)v47;
    return LiteralPrinter.outputQuantificationKind(_:)(v80);
  }
  if (v32 == *MEMORY[0x263F8F9A0])
  {
    uint64_t v47 = (char *)v27[1];
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
      uint64_t v47 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *((void *)v47 + 2) + 1, 1, v47, &demangling cache variable for type metadata for _ContiguousArrayStorage<PatternSegment>);
    }
    unint64_t v69 = *((void *)v47 + 2);
    unint64_t v71 = *((void *)v47 + 3);
    if (v69 >= v71 >> 1) {
      uint64_t v47 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v71 > 1), v69 + 1, 1, v47, &demangling cache variable for type metadata for _ContiguousArrayStorage<PatternSegment>);
    }
    *((void *)v47 + 2) = v69 + 1;
    long long v70 = xmmword_209FAFE20;
    goto LABEL_50;
  }
  if (v32 == *MEMORY[0x263F8F9A8])
  {
    uint64_t v47 = (char *)v27[1];
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
      uint64_t v47 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *((void *)v47 + 2) + 1, 1, v47, &demangling cache variable for type metadata for _ContiguousArrayStorage<PatternSegment>);
    }
    unint64_t v69 = *((void *)v47 + 2);
    unint64_t v72 = *((void *)v47 + 3);
    if (v69 >= v72 >> 1) {
      uint64_t v47 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v72 > 1), v69 + 1, 1, v47, &demangling cache variable for type metadata for _ContiguousArrayStorage<PatternSegment>);
    }
    *((void *)v47 + 2) = v69 + 1;
    long long v70 = xmmword_209FAFE10;
    goto LABEL_50;
  }
LABEL_56:
  uint64_t result = _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

double LiteralPrinter.outputCustomCharacterClass(_:)(uint64_t *a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = type metadata accessor for DSLTree.Atom(0);
  uint64_t v5 = MEMORY[0x270FA5388](v4 - 8);
  unint64_t v84 = (unint64_t)&v78 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = MEMORY[0x270FA5388](v5);
  uint64_t v82 = (char *)&v78 - v8;
  MEMORY[0x270FA5388](v7);
  unint64_t v81 = (unint64_t)&v78 - v9;
  uint64_t v88 = type metadata accessor for DSLTree.CustomCharacterClass.Member(0);
  uint64_t v10 = *(void *)(v88 - 8);
  uint64_t v11 = MEMORY[0x270FA5388](v88);
  char v85 = (char *)&v78 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = MEMORY[0x270FA5388](v11);
  Swift::String v15 = (char *)&v78 - v14;
  uint64_t v16 = MEMORY[0x270FA5388](v13);
  uint64_t v86 = (uint64_t)&v78 - v17;
  uint64_t v18 = MEMORY[0x270FA5388](v16);
  uint64_t v20 = (char *)&v78 - v19;
  MEMORY[0x270FA5388](v18);
  Swift::String v22 = (char *)&v78 - v21;
  uint64_t v23 = *a1;
  char v24 = *((unsigned char *)a1 + 8);
  uint64_t v87 = *a1;
  if (v24)
  {
    unint64_t v25 = (char *)0xE200000000000000;
    unint64_t v26 = 24155;
  }
  else
  {
    unint64_t v25 = (char *)MEMORY[0x263F8EE78];
    uint64_t v89 = MEMORY[0x263F8EE78];
    uint64_t v27 = *(char **)(v23 + 16);
    if (v27)
    {
      *(void *)&long long v80 = v15;
      unint64_t v26 = 0;
      *(void *)&long long v83 = v27;
      do
      {
        if (v26 >= *(void *)(v23 + 16)) {
          goto LABEL_74;
        }
        unint64_t v28 = (*(unsigned __int8 *)(v10 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v10 + 80);
        uint64_t v29 = v10;
        uint64_t v30 = *(void *)(v10 + 72);
        outlined init with copy of MEProgram(v23 + v28 + v30 * v26, (uint64_t)v22, type metadata accessor for DSLTree.CustomCharacterClass.Member);
        outlined init with copy of MEProgram((uint64_t)v22, (uint64_t)v20, type metadata accessor for DSLTree.CustomCharacterClass.Member);
        int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
        outlined destroy of MEProgram((uint64_t)v20, type metadata accessor for DSLTree.CustomCharacterClass.Member);
        if (EnumCaseMultiPayload == 4)
        {
          outlined destroy of MEProgram((uint64_t)v22, type metadata accessor for DSLTree.CustomCharacterClass.Member);
        }
        else
        {
          int v32 = v2;
          outlined init with take of DSLTree.QuantificationKind((uint64_t)v22, v86, type metadata accessor for DSLTree.CustomCharacterClass.Member);
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
            specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, *((void *)v25 + 2) + 1, 1);
          }
          unint64_t v25 = (char *)v89;
          unint64_t v34 = *(void *)(v89 + 16);
          unint64_t v33 = *(void *)(v89 + 24);
          if (v34 >= v33 >> 1)
          {
            specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v33 > 1, v34 + 1, 1);
            unint64_t v25 = (char *)v89;
          }
          *((void *)v25 + 2) = v34 + 1;
          outlined init with take of DSLTree.QuantificationKind(v86, (uint64_t)&v25[v28 + v34 * v30], type metadata accessor for DSLTree.CustomCharacterClass.Member);
          uint64_t v2 = v32;
          uint64_t v27 = (char *)v83;
        }
        ++v26;
        uint64_t v10 = v29;
        uint64_t v23 = v87;
      }
      while (v27 != (char *)v26);
      unint64_t v25 = (char *)v89;
      Swift::String v15 = (char *)v80;
    }
    if (*((void *)v25 + 2) == 1)
    {
      outlined init with copy of MEProgram((uint64_t)&v25[(*(unsigned __int8 *)(v10 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v10 + 80)], (uint64_t)v15, type metadata accessor for DSLTree.CustomCharacterClass.Member);
      swift_release();
      if (swift_getEnumCaseMultiPayload() == 2)
      {
        char v35 = v15[8];
        uint64_t v89 = *(void *)v15;
        LOBYTE(v90) = v35;
        LiteralPrinter.outputCustomCharacterClass(_:)(&v89);
        swift_bridgeObjectRelease();
        return result;
      }
      outlined destroy of MEProgram((uint64_t)v15, type metadata accessor for DSLTree.CustomCharacterClass.Member);
    }
    else
    {
      swift_release();
    }
    unint64_t v25 = (char *)0xE100000000000000;
    unint64_t v26 = 91;
  }
  uint64_t v27 = (char *)*((void *)v2 + 1);
  swift_bridgeObjectRetain();
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
    goto LABEL_75;
  }
  while (1)
  {
    unint64_t v38 = *((void *)v27 + 2);
    unint64_t v37 = *((void *)v27 + 3);
    if (v38 >= v37 >> 1) {
      uint64_t v27 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v37 > 1), v38 + 1, 1, v27, &demangling cache variable for type metadata for _ContiguousArrayStorage<PatternSegment>);
    }
    *((void *)v27 + 2) = v38 + 1;
    unint64_t v39 = &v27[24 * v38];
    *((void *)v39 + 4) = v26;
    *((void *)v39 + 5) = v25;
    v39[48] = 0;
    swift_bridgeObjectRelease();
    *((void *)v2 + 1) = v27;
    uint64_t v40 = *(void *)(v23 + 16);
    swift_bridgeObjectRetain();
    uint64_t v41 = (uint64_t)v85;
    if (!v40) {
      break;
    }
    unint64_t v42 = 0;
    long long v83 = xmmword_209FAFE70;
    long long v80 = xmmword_209FAFE60;
    long long v79 = xmmword_209FAFE50;
    long long v78 = xmmword_209FAFE40;
    uint64_t v86 = v40;
    while (v42 < *(void *)(v23 + 16))
    {
      uint64_t v45 = v42++;
      outlined init with copy of MEProgram(v23+ ((*(unsigned __int8 *)(v10 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v10 + 80))+ *(void *)(v10 + 72) * v45, v41, type metadata accessor for DSLTree.CustomCharacterClass.Member);
      switch(swift_getEnumCaseMultiPayload())
      {
        case 1u:
          uint64_t v55 = v41
              + *(int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (DSLTree.Atom, DSLTree.Atom))
                       + 48);
          uint64_t v56 = v82;
          outlined init with take of DSLTree.QuantificationKind(v41, (uint64_t)v82, type metadata accessor for DSLTree.Atom);
          outlined init with take of DSLTree.QuantificationKind(v55, v84, type metadata accessor for DSLTree.Atom);
          LiteralPrinter.outputAtom(_:)(v56);
          outlined destroy of MEProgram((uint64_t)v56, type metadata accessor for DSLTree.Atom);
          uint64_t v57 = (char *)*((void *)v2 + 1);
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
            uint64_t v57 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *((void *)v57 + 2) + 1, 1, v57, &demangling cache variable for type metadata for _ContiguousArrayStorage<PatternSegment>);
          }
          unint64_t v59 = *((void *)v57 + 2);
          unint64_t v58 = *((void *)v57 + 3);
          uint64_t v27 = (char *)(v59 + 1);
          if (v59 >= v58 >> 1) {
            uint64_t v57 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v58 > 1), v59 + 1, 1, v57, &demangling cache variable for type metadata for _ContiguousArrayStorage<PatternSegment>);
          }
          *((void *)v57 + 2) = v27;
          uint64_t v60 = &v57[24 * v59];
          *((_OWORD *)v60 + 2) = v83;
          v60[48] = 0;
          *((void *)v2 + 1) = v57;
          unint64_t v26 = v84;
          goto LABEL_48;
        case 2u:
          uint64_t v27 = *(char **)v41;
          char v46 = *(unsigned char *)(v41 + 8);
          uint64_t v89 = *(void *)v41;
          LOBYTE(v90) = v46;
          unint64_t v25 = v2;
          LiteralPrinter.outputCustomCharacterClass(_:)(&v89);
          swift_bridgeObjectRelease();
          break;
        case 3u:
          uint64_t v47 = *(void *)(*(void *)v2 + 16);
          if (!v47)
          {
            swift_bridgeObjectRelease();
            __break(1u);
            JUMPOUT(0x209F5CBA4);
          }
          uint64_t v27 = *(char **)v41;
          unint64_t v48 = *(void **)(v41 + 8);
          if ((*(_DWORD *)(*(void *)v2 + 4 * v47 + 28) & 0x300000) != 0
            || (String.containsRegexMetaCharacters.getter(*(void *)v41, *(void *)(v41 + 8)) & 1) != 0)
          {
            uint64_t v89 = 20828;
            unint64_t v90 = 0xE200000000000000;
            v49._uint64_t countAndFlagsBits = (uint64_t)v27;
            v49._unint64_t object = v48;
            String.append(_:)(v49);
            swift_bridgeObjectRelease();
            v50._uint64_t countAndFlagsBits = 17756;
            v50._unint64_t object = (void *)0xE200000000000000;
            String.append(_:)(v50);
            unint64_t v26 = v89;
            unint64_t v48 = (void *)v90;
            unint64_t v25 = (char *)*((void *)v2 + 1);
            swift_bridgeObjectRetain();
            if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
              unint64_t v25 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *((void *)v25 + 2) + 1, 1, v25, &demangling cache variable for type metadata for _ContiguousArrayStorage<PatternSegment>);
            }
            unint64_t v52 = *((void *)v25 + 2);
            unint64_t v51 = *((void *)v25 + 3);
            uint64_t v27 = (char *)(v52 + 1);
            if (v52 >= v51 >> 1) {
              unint64_t v25 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v51 > 1), v52 + 1, 1, v25, &demangling cache variable for type metadata for _ContiguousArrayStorage<PatternSegment>);
            }
            *((void *)v25 + 2) = v27;
            uint64_t v53 = &v25[24 * v52];
            *((void *)v53 + 4) = v26;
            uint64_t v54 = v53 + 32;
          }
          else
          {
            unint64_t v25 = (char *)*((void *)v2 + 1);
            swift_bridgeObjectRetain();
            if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
              unint64_t v25 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *((void *)v25 + 2) + 1, 1, v25, &demangling cache variable for type metadata for _ContiguousArrayStorage<PatternSegment>);
            }
            unint64_t v26 = *((void *)v25 + 2);
            unint64_t v72 = *((void *)v25 + 3);
            if (v26 >= v72 >> 1) {
              unint64_t v25 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v72 > 1), v26 + 1, 1, v25, &demangling cache variable for type metadata for _ContiguousArrayStorage<PatternSegment>);
            }
            *((void *)v25 + 2) = v26 + 1;
            unint64_t v73 = &v25[24 * v26];
            *((void *)v73 + 4) = v27;
            uint64_t v54 = v73 + 32;
          }
          *((void *)v54 + 1) = v48;
          v54[16] = 0;
          swift_bridgeObjectRelease();
          *((void *)v2 + 1) = v25;
          uint64_t v41 = (uint64_t)v85;
          uint64_t v23 = v87;
          break;
        case 4u:
          outlined destroy of MEProgram(v41, type metadata accessor for DSLTree.CustomCharacterClass.Member);
          break;
        case 5u:
          uint64_t v27 = *(char **)v41;
          char v61 = *(unsigned char *)(*(void *)v41 + 24);
          unint64_t v26 = *(void *)(*(void *)v41 + 32);
          char v62 = *(unsigned char *)(*(void *)v41 + 40);
          uint64_t v89 = *(void *)(*(void *)v41 + 16);
          LOBYTE(v90) = v61;
          LiteralPrinter.outputCustomCharacterClass(_:)(&v89);
          Swift::String v63 = (char *)*((void *)v2 + 1);
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
            Swift::String v63 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *((void *)v63 + 2) + 1, 1, v63, &demangling cache variable for type metadata for _ContiguousArrayStorage<PatternSegment>);
          }
          unint64_t v65 = *((void *)v63 + 2);
          unint64_t v64 = *((void *)v63 + 3);
          if (v65 >= v64 >> 1) {
            Swift::String v63 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v64 > 1), v65 + 1, 1, v63, &demangling cache variable for type metadata for _ContiguousArrayStorage<PatternSegment>);
          }
          *((void *)v63 + 2) = v65 + 1;
          uint64_t v43 = &v63[24 * v65];
          long long v44 = v80;
          goto LABEL_27;
        case 6u:
          uint64_t v27 = *(char **)v41;
          char v66 = *(unsigned char *)(*(void *)v41 + 24);
          unint64_t v26 = *(void *)(*(void *)v41 + 32);
          char v62 = *(unsigned char *)(*(void *)v41 + 40);
          uint64_t v89 = *(void *)(*(void *)v41 + 16);
          LOBYTE(v90) = v66;
          LiteralPrinter.outputCustomCharacterClass(_:)(&v89);
          Swift::String v63 = (char *)*((void *)v2 + 1);
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
            Swift::String v63 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *((void *)v63 + 2) + 1, 1, v63, &demangling cache variable for type metadata for _ContiguousArrayStorage<PatternSegment>);
          }
          unint64_t v68 = *((void *)v63 + 2);
          unint64_t v67 = *((void *)v63 + 3);
          if (v68 >= v67 >> 1) {
            Swift::String v63 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v67 > 1), v68 + 1, 1, v63, &demangling cache variable for type metadata for _ContiguousArrayStorage<PatternSegment>);
          }
          *((void *)v63 + 2) = v68 + 1;
          uint64_t v43 = &v63[24 * v68];
          long long v44 = v79;
          goto LABEL_27;
        case 7u:
          uint64_t v27 = *(char **)v41;
          char v69 = *(unsigned char *)(*(void *)v41 + 24);
          unint64_t v26 = *(void *)(*(void *)v41 + 32);
          char v62 = *(unsigned char *)(*(void *)v41 + 40);
          uint64_t v89 = *(void *)(*(void *)v41 + 16);
          LOBYTE(v90) = v69;
          LiteralPrinter.outputCustomCharacterClass(_:)(&v89);
          Swift::String v63 = (char *)*((void *)v2 + 1);
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
            Swift::String v63 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *((void *)v63 + 2) + 1, 1, v63, &demangling cache variable for type metadata for _ContiguousArrayStorage<PatternSegment>);
          }
          unint64_t v71 = *((void *)v63 + 2);
          unint64_t v70 = *((void *)v63 + 3);
          if (v71 >= v70 >> 1) {
            Swift::String v63 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v70 > 1), v71 + 1, 1, v63, &demangling cache variable for type metadata for _ContiguousArrayStorage<PatternSegment>);
          }
          *((void *)v63 + 2) = v71 + 1;
          uint64_t v43 = &v63[24 * v71];
          long long v44 = v78;
LABEL_27:
          *((_OWORD *)v43 + 2) = v44;
          v43[48] = 0;
          *((void *)v2 + 1) = v63;
          uint64_t v89 = v26;
          LOBYTE(v90) = v62;
          unint64_t v25 = v2;
          LiteralPrinter.outputCustomCharacterClass(_:)(&v89);
          swift_release();
          uint64_t v41 = (uint64_t)v85;
          uint64_t v40 = v86;
          break;
        default:
          unint64_t v26 = v81;
          outlined init with take of DSLTree.QuantificationKind(v41, v81, type metadata accessor for DSLTree.Atom);
LABEL_48:
          unint64_t v25 = v2;
          LiteralPrinter.outputAtom(_:)((char *)v26);
          outlined destroy of MEProgram(v26, type metadata accessor for DSLTree.Atom);
          break;
      }
      if (v40 == v42) {
        goto LABEL_68;
      }
    }
    __break(1u);
LABEL_74:
    __break(1u);
LABEL_75:
    uint64_t v27 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *((void *)v27 + 2) + 1, 1, v27, &demangling cache variable for type metadata for _ContiguousArrayStorage<PatternSegment>);
  }
LABEL_68:
  swift_bridgeObjectRelease();
  uint64_t v74 = (char *)*((void *)v2 + 1);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
    uint64_t v74 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *((void *)v74 + 2) + 1, 1, v74, &demangling cache variable for type metadata for _ContiguousArrayStorage<PatternSegment>);
  }
  unint64_t v76 = *((void *)v74 + 2);
  unint64_t v75 = *((void *)v74 + 3);
  if (v76 >= v75 >> 1) {
    uint64_t v74 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v75 > 1), v76 + 1, 1, v74, &demangling cache variable for type metadata for _ContiguousArrayStorage<PatternSegment>);
  }
  *((void *)v74 + 2) = v76 + 1;
  *(void *)&double result = 93;
  uint64_t v77 = &v74[24 * v76];
  *((_OWORD *)v77 + 2) = xmmword_209FAFE80;
  v77[48] = 0;
  *((void *)v2 + 1) = v74;
  return result;
}

uint64_t LiteralPrinter.outputAtom(_:)(char *a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = type metadata accessor for DSLTree._AST.Atom(0);
  MEMORY[0x270FA5388](v4 - 8);
  unint64_t v6 = (unint64_t)&v76 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = type metadata accessor for DSLTree._AST.MatchingOptionSequence(0);
  MEMORY[0x270FA5388](v7 - 8);
  uint64_t v9 = (char *)&v76 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = type metadata accessor for DSLTree._AST.Reference(0);
  MEMORY[0x270FA5388](v10 - 8);
  uint64_t v12 = (char *)&v76 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = type metadata accessor for DSLTree.Atom(0);
  MEMORY[0x270FA5388](v13);
  Swift::String v15 = (char *)&v76 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of MEProgram((uint64_t)a1, (uint64_t)v15, type metadata accessor for DSLTree.Atom);
  switch(swift_getEnumCaseMultiPayload())
  {
    case 1u:
      unint64_t v20 = Unicode.Scalar.escapedString.getter(*(_DWORD *)v15);
      unint64_t v19 = v21;
      Swift::String v22 = v2[1];
      goto LABEL_52;
    case 2u:
      unint64_t v6 = 22620;
      switch(*v15)
      {
        case 1:
          unint64_t v6 = 17500;
          break;
        case 2:
          unint64_t v6 = 26716;
          break;
        case 3:
          unint64_t v6 = 18524;
          break;
        case 4:
          unint64_t v6 = 21084;
          break;
        case 5:
          unint64_t v6 = 20060;
          break;
        case 6:
          unint64_t v6 = 29532;
          break;
        case 7:
          unint64_t v6 = 21340;
          break;
        case 8:
          unint64_t v6 = 30300;
          break;
        case 9:
          unint64_t v6 = 22108;
          break;
        case 10:
          unint64_t v6 = 30556;
          break;
        case 11:
          unint64_t v6 = 22364;
          break;
        case 12:
          break;
        case 13:
          goto LABEL_9;
        default:
          unint64_t v6 = 25692;
          break;
      }
      a1 = v2[1];
      swift_bridgeObjectRetain();
      if (swift_isUniquelyReferenced_nonNull_native()) {
        goto LABEL_135;
      }
      goto LABEL_147;
    case 3u:
      switch(*v15)
      {
        case 1:
          a1 = v2[1];
          uint64_t result = swift_isUniquelyReferenced_nonNull_native();
          if ((result & 1) == 0)
          {
            uint64_t result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *((void *)a1 + 2) + 1, 1, a1, &demangling cache variable for type metadata for _ContiguousArrayStorage<PatternSegment>);
            a1 = (char *)result;
          }
          unint64_t v30 = *((void *)a1 + 2);
          unint64_t v57 = *((void *)a1 + 3);
          if (v30 >= v57 >> 1)
          {
            uint64_t result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v57 > 1), v30 + 1, 1, a1, &demangling cache variable for type metadata for _ContiguousArrayStorage<PatternSegment>);
            a1 = (char *)result;
          }
          *((void *)a1 + 2) = v30 + 1;
          long long v31 = xmmword_209FAFF70;
          break;
        case 2:
          a1 = v2[1];
          uint64_t result = swift_isUniquelyReferenced_nonNull_native();
          if ((result & 1) == 0)
          {
            uint64_t result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *((void *)a1 + 2) + 1, 1, a1, &demangling cache variable for type metadata for _ContiguousArrayStorage<PatternSegment>);
            a1 = (char *)result;
          }
          unint64_t v30 = *((void *)a1 + 2);
          unint64_t v58 = *((void *)a1 + 3);
          if (v30 >= v58 >> 1)
          {
            uint64_t result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v58 > 1), v30 + 1, 1, a1, &demangling cache variable for type metadata for _ContiguousArrayStorage<PatternSegment>);
            a1 = (char *)result;
          }
          *((void *)a1 + 2) = v30 + 1;
          long long v31 = xmmword_209FAFF60;
          break;
        case 3:
          a1 = v2[1];
          uint64_t result = swift_isUniquelyReferenced_nonNull_native();
          if ((result & 1) == 0)
          {
            uint64_t result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *((void *)a1 + 2) + 1, 1, a1, &demangling cache variable for type metadata for _ContiguousArrayStorage<PatternSegment>);
            a1 = (char *)result;
          }
          unint64_t v30 = *((void *)a1 + 2);
          unint64_t v59 = *((void *)a1 + 3);
          if (v30 >= v59 >> 1)
          {
            uint64_t result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v59 > 1), v30 + 1, 1, a1, &demangling cache variable for type metadata for _ContiguousArrayStorage<PatternSegment>);
            a1 = (char *)result;
          }
          *((void *)a1 + 2) = v30 + 1;
          long long v31 = xmmword_209FAFF50;
          break;
        case 4:
          a1 = v2[1];
          uint64_t result = swift_isUniquelyReferenced_nonNull_native();
          if ((result & 1) == 0)
          {
            uint64_t result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *((void *)a1 + 2) + 1, 1, a1, &demangling cache variable for type metadata for _ContiguousArrayStorage<PatternSegment>);
            a1 = (char *)result;
          }
          unint64_t v30 = *((void *)a1 + 2);
          unint64_t v60 = *((void *)a1 + 3);
          if (v30 >= v60 >> 1)
          {
            uint64_t result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v60 > 1), v30 + 1, 1, a1, &demangling cache variable for type metadata for _ContiguousArrayStorage<PatternSegment>);
            a1 = (char *)result;
          }
          *((void *)a1 + 2) = v30 + 1;
          long long v31 = xmmword_209FAFF40;
          break;
        case 5:
          a1 = v2[1];
          uint64_t result = swift_isUniquelyReferenced_nonNull_native();
          if ((result & 1) == 0)
          {
            uint64_t result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *((void *)a1 + 2) + 1, 1, a1, &demangling cache variable for type metadata for _ContiguousArrayStorage<PatternSegment>);
            a1 = (char *)result;
          }
          unint64_t v30 = *((void *)a1 + 2);
          unint64_t v61 = *((void *)a1 + 3);
          if (v30 >= v61 >> 1)
          {
            uint64_t result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v61 > 1), v30 + 1, 1, a1, &demangling cache variable for type metadata for _ContiguousArrayStorage<PatternSegment>);
            a1 = (char *)result;
          }
          *((void *)a1 + 2) = v30 + 1;
          long long v31 = xmmword_209FAFF30;
          break;
        case 6:
          a1 = v2[1];
          uint64_t result = swift_isUniquelyReferenced_nonNull_native();
          if ((result & 1) == 0)
          {
            uint64_t result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *((void *)a1 + 2) + 1, 1, a1, &demangling cache variable for type metadata for _ContiguousArrayStorage<PatternSegment>);
            a1 = (char *)result;
          }
          unint64_t v30 = *((void *)a1 + 2);
          unint64_t v62 = *((void *)a1 + 3);
          if (v30 >= v62 >> 1)
          {
            uint64_t result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v62 > 1), v30 + 1, 1, a1, &demangling cache variable for type metadata for _ContiguousArrayStorage<PatternSegment>);
            a1 = (char *)result;
          }
          *((void *)a1 + 2) = v30 + 1;
          long long v31 = xmmword_209FAFF20;
          break;
        case 7:
          uint64_t v63 = *((void *)*v2 + 2);
          if (!v63)
          {
            __break(1u);
            goto LABEL_149;
          }
          int v64 = *(_DWORD *)&(*v2)[4 * v63 + 28];
          a1 = v2[1];
          uint64_t result = swift_isUniquelyReferenced_nonNull_native();
          if ((v64 & 4) != 0)
          {
            if (result) {
              goto LABEL_107;
            }
            goto LABEL_139;
          }
          if ((result & 1) == 0)
          {
            uint64_t result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *((void *)a1 + 2) + 1, 1, a1, &demangling cache variable for type metadata for _ContiguousArrayStorage<PatternSegment>);
            a1 = (char *)result;
          }
          unint64_t v30 = *((void *)a1 + 2);
          unint64_t v65 = *((void *)a1 + 3);
          if (v30 >= v65 >> 1)
          {
            uint64_t result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v65 > 1), v30 + 1, 1, a1, &demangling cache variable for type metadata for _ContiguousArrayStorage<PatternSegment>);
            a1 = (char *)result;
          }
          *((void *)a1 + 2) = v30 + 1;
          long long v31 = xmmword_209FAFF10;
          break;
        case 8:
          uint64_t v66 = *((void *)*v2 + 2);
          if (!v66)
          {
LABEL_149:
            __break(1u);
            goto LABEL_150;
          }
          int v67 = *(_DWORD *)&(*v2)[4 * v66 + 28];
          a1 = v2[1];
          uint64_t result = swift_isUniquelyReferenced_nonNull_native();
          if ((v67 & 4) != 0)
          {
            if (result) {
              goto LABEL_111;
            }
            goto LABEL_141;
          }
          if ((result & 1) == 0)
          {
            uint64_t result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *((void *)a1 + 2) + 1, 1, a1, &demangling cache variable for type metadata for _ContiguousArrayStorage<PatternSegment>);
            a1 = (char *)result;
          }
          unint64_t v30 = *((void *)a1 + 2);
          unint64_t v68 = *((void *)a1 + 3);
          if (v30 >= v68 >> 1)
          {
            uint64_t result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v68 > 1), v30 + 1, 1, a1, &demangling cache variable for type metadata for _ContiguousArrayStorage<PatternSegment>);
            a1 = (char *)result;
          }
          *((void *)a1 + 2) = v30 + 1;
          long long v31 = xmmword_209FAFF00;
          break;
        case 9:
          a1 = v2[1];
          uint64_t result = swift_isUniquelyReferenced_nonNull_native();
          if ((result & 1) == 0)
          {
LABEL_139:
            uint64_t result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *((void *)a1 + 2) + 1, 1, a1, &demangling cache variable for type metadata for _ContiguousArrayStorage<PatternSegment>);
            a1 = (char *)result;
          }
LABEL_107:
          unint64_t v30 = *((void *)a1 + 2);
          unint64_t v69 = *((void *)a1 + 3);
          if (v30 >= v69 >> 1)
          {
            uint64_t result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v69 > 1), v30 + 1, 1, a1, &demangling cache variable for type metadata for _ContiguousArrayStorage<PatternSegment>);
            a1 = (char *)result;
          }
          *((void *)a1 + 2) = v30 + 1;
          long long v31 = xmmword_209FAFEF0;
          break;
        case 10:
          a1 = v2[1];
          uint64_t result = swift_isUniquelyReferenced_nonNull_native();
          if ((result & 1) == 0)
          {
LABEL_141:
            uint64_t result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *((void *)a1 + 2) + 1, 1, a1, &demangling cache variable for type metadata for _ContiguousArrayStorage<PatternSegment>);
            a1 = (char *)result;
          }
LABEL_111:
          unint64_t v30 = *((void *)a1 + 2);
          unint64_t v70 = *((void *)a1 + 3);
          if (v30 >= v70 >> 1)
          {
            uint64_t result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v70 > 1), v30 + 1, 1, a1, &demangling cache variable for type metadata for _ContiguousArrayStorage<PatternSegment>);
            a1 = (char *)result;
          }
          *((void *)a1 + 2) = v30 + 1;
          long long v31 = xmmword_209FAFEE0;
          break;
        case 11:
          a1 = v2[1];
          uint64_t result = swift_isUniquelyReferenced_nonNull_native();
          if ((result & 1) == 0)
          {
LABEL_150:
            uint64_t result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *((void *)a1 + 2) + 1, 1, a1, &demangling cache variable for type metadata for _ContiguousArrayStorage<PatternSegment>);
            a1 = (char *)result;
          }
          unint64_t v30 = *((void *)a1 + 2);
          unint64_t v71 = *((void *)a1 + 3);
          if (v30 >= v71 >> 1)
          {
            uint64_t result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v71 > 1), v30 + 1, 1, a1, &demangling cache variable for type metadata for _ContiguousArrayStorage<PatternSegment>);
            a1 = (char *)result;
          }
          *((void *)a1 + 2) = v30 + 1;
          long long v31 = xmmword_209FAFED0;
          break;
        case 12:
          a1 = v2[1];
          uint64_t result = swift_isUniquelyReferenced_nonNull_native();
          if ((result & 1) == 0)
          {
            uint64_t result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *((void *)a1 + 2) + 1, 1, a1, &demangling cache variable for type metadata for _ContiguousArrayStorage<PatternSegment>);
            a1 = (char *)result;
          }
          unint64_t v30 = *((void *)a1 + 2);
          unint64_t v72 = *((void *)a1 + 3);
          if (v30 >= v72 >> 1)
          {
            uint64_t result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v72 > 1), v30 + 1, 1, a1, &demangling cache variable for type metadata for _ContiguousArrayStorage<PatternSegment>);
            a1 = (char *)result;
          }
          *((void *)a1 + 2) = v30 + 1;
          long long v31 = xmmword_209FAFEC0;
          break;
        default:
          a1 = v2[1];
          uint64_t result = swift_isUniquelyReferenced_nonNull_native();
          if ((result & 1) == 0)
          {
            uint64_t result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *((void *)a1 + 2) + 1, 1, a1, &demangling cache variable for type metadata for _ContiguousArrayStorage<PatternSegment>);
            a1 = (char *)result;
          }
          unint64_t v30 = *((void *)a1 + 2);
          unint64_t v29 = *((void *)a1 + 3);
          if (v30 >= v29 >> 1)
          {
            uint64_t result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v29 > 1), v30 + 1, 1, a1, &demangling cache variable for type metadata for _ContiguousArrayStorage<PatternSegment>);
            a1 = (char *)result;
          }
          *((void *)a1 + 2) = v30 + 1;
          long long v31 = xmmword_209FAFF80;
          break;
      }
      goto LABEL_48;
    case 4u:
      outlined init with take of DSLTree.QuantificationKind((uint64_t)v15, (uint64_t)v12, type metadata accessor for DSLTree._AST.Reference);
      LiteralPrinter.outputReference(_:)((uint64_t)v12);
      int v32 = type metadata accessor for DSLTree._AST.Reference;
      uint64_t v33 = (uint64_t)v12;
      return outlined destroy of MEProgram(v33, v32);
    case 5u:
LABEL_9:
      uint64_t v23 = swift_allocBox();
      outlined init with copy of MEProgram((uint64_t)a1, v24, type metadata accessor for DSLTree.Atom);
      a1 = v2[1];
      swift_retain();
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
        a1 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *((void *)a1 + 2) + 1, 1, a1, &demangling cache variable for type metadata for _ContiguousArrayStorage<PatternSegment>);
      }
      unint64_t v26 = *((void *)a1 + 2);
      unint64_t v25 = *((void *)a1 + 3);
      if (v26 >= v25 >> 1) {
        a1 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v25 > 1), v26 + 1, 1, a1, &demangling cache variable for type metadata for _ContiguousArrayStorage<PatternSegment>);
      }
      *((void *)a1 + 2) = v26 + 1;
      uint64_t v27 = &a1[24 * v26];
      *((void *)v27 + 4) = v23 | 0x4000000000000000;
      *((void *)v27 + 5) = 0;
      v27[48] = 1;
      uint64_t result = swift_release();
      goto LABEL_49;
    case 6u:
      outlined init with take of DSLTree.QuantificationKind((uint64_t)v15, (uint64_t)v9, type metadata accessor for DSLTree._AST.MatchingOptionSequence);
      uint64_t v34 = AST.MatchingOptionSequence._patternString.getter();
      uint64_t v36 = v35;
      unint64_t v37 = v2[1];
      swift_bridgeObjectRetain();
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
        unint64_t v37 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *((void *)v37 + 2) + 1, 1, v37, &demangling cache variable for type metadata for _ContiguousArrayStorage<PatternSegment>);
      }
      unint64_t v39 = *((void *)v37 + 2);
      unint64_t v38 = *((void *)v37 + 3);
      if (v39 >= v38 >> 1) {
        unint64_t v37 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v38 > 1), v39 + 1, 1, v37, &demangling cache variable for type metadata for _ContiguousArrayStorage<PatternSegment>);
      }
      *((void *)v37 + 2) = v39 + 1;
      uint64_t v40 = &v37[24 * v39];
      *((void *)v40 + 4) = v34;
      *((void *)v40 + 5) = v36;
      v40[48] = 0;
      swift_bridgeObjectRelease();
      v2[1] = v37;
      unint64_t v42 = *((void *)v37 + 2);
      unint64_t v41 = *((void *)v37 + 3);
      if (v42 >= v41 >> 1) {
        unint64_t v37 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v41 > 1), v42 + 1, 1, v37, &demangling cache variable for type metadata for _ContiguousArrayStorage<PatternSegment>);
      }
      *((void *)v37 + 2) = v42 + 1;
      uint64_t v43 = &v37[24 * v42];
      *((_OWORD *)v43 + 2) = xmmword_209FAFDD0;
      v43[48] = 0;
      v2[1] = v37;
      a1 = *v2;
      unint64_t v6 = *((void *)*v2 + 2);
      char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
      *uint64_t v2 = a1;
      if (isUniquelyReferenced_nonNull_native)
      {
        if (v6) {
          goto LABEL_29;
        }
LABEL_143:
        __break(1u);
LABEL_144:
        __break(1u);
LABEL_145:
        __break(1u);
        goto LABEL_146;
      }
      a1 = specialized _ArrayBuffer._consumeAndCreateNew()((uint64_t)a1);
      *uint64_t v2 = a1;
      if (!v6) {
        goto LABEL_143;
      }
LABEL_29:
      if (v6 <= *((void *)a1 + 2))
      {
        MatchingOptions.Representation.apply(_:)((uint64_t)v9);
        int v32 = type metadata accessor for DSLTree._AST.MatchingOptionSequence;
        uint64_t v33 = (uint64_t)v9;
        return outlined destroy of MEProgram(v33, v32);
      }
LABEL_146:
      __break(1u);
LABEL_147:
      a1 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *((void *)a1 + 2) + 1, 1, a1, &demangling cache variable for type metadata for _ContiguousArrayStorage<PatternSegment>);
LABEL_135:
      unint64_t v74 = *((void *)a1 + 2);
      unint64_t v73 = *((void *)a1 + 3);
      if (v74 >= v73 >> 1) {
        a1 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v73 > 1), v74 + 1, 1, a1, &demangling cache variable for type metadata for _ContiguousArrayStorage<PatternSegment>);
      }
      *((void *)a1 + 2) = v74 + 1;
      unint64_t v75 = &a1[24 * v74];
      *((void *)v75 + 4) = v6;
      *((void *)v75 + 5) = 0xE200000000000000;
      v75[48] = 0;
      uint64_t result = swift_bridgeObjectRelease();
LABEL_49:
      v2[1] = a1;
      return result;
    case 7u:
      outlined init with take of DSLTree.QuantificationKind((uint64_t)v15, v6, type metadata accessor for DSLTree._AST.Atom);
      LiteralPrinter.outputUnconvertedAST(_:)(v6);
      int v32 = type metadata accessor for DSLTree._AST.Atom;
      uint64_t v33 = v6;
      return outlined destroy of MEProgram(v33, v32);
    case 8u:
      uint64_t v45 = *((void *)*v2 + 2);
      if (!v45) {
        goto LABEL_144;
      }
      int v46 = *(_DWORD *)&(*v2)[4 * v45 + 28];
      a1 = v2[1];
      uint64_t result = swift_isUniquelyReferenced_nonNull_native();
      if ((v46 & 0x10) != 0) {
        goto LABEL_42;
      }
      if ((result & 1) == 0)
      {
        uint64_t result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *((void *)a1 + 2) + 1, 1, a1, &demangling cache variable for type metadata for _ContiguousArrayStorage<PatternSegment>);
        a1 = (char *)result;
      }
      unint64_t v30 = *((void *)a1 + 2);
      unint64_t v47 = *((void *)a1 + 3);
      if (v30 >= v47 >> 1)
      {
        uint64_t result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v47 > 1), v30 + 1, 1, a1, &demangling cache variable for type metadata for _ContiguousArrayStorage<PatternSegment>);
        a1 = (char *)result;
      }
      *((void *)a1 + 2) = v30 + 1;
      long long v31 = xmmword_209FAFEB0;
      goto LABEL_48;
    case 9u:
      uint64_t v48 = *((void *)*v2 + 2);
      if (!v48) {
        goto LABEL_145;
      }
      int v49 = *(_DWORD *)&(*v2)[4 * v48 + 28];
      a1 = v2[1];
      uint64_t result = swift_isUniquelyReferenced_nonNull_native();
      if ((v49 & 0x10) != 0)
      {
        if ((result & 1) == 0)
        {
          uint64_t result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *((void *)a1 + 2) + 1, 1, a1, &demangling cache variable for type metadata for _ContiguousArrayStorage<PatternSegment>);
          a1 = (char *)result;
        }
        unint64_t v30 = *((void *)a1 + 2);
        unint64_t v56 = *((void *)a1 + 3);
        if (v30 >= v56 >> 1)
        {
          uint64_t result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v56 > 1), v30 + 1, 1, a1, &demangling cache variable for type metadata for _ContiguousArrayStorage<PatternSegment>);
          a1 = (char *)result;
        }
        *((void *)a1 + 2) = v30 + 1;
        long long v31 = xmmword_209FAFEA0;
      }
      else
      {
LABEL_42:
        if ((result & 1) == 0)
        {
LABEL_43:
          uint64_t result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *((void *)a1 + 2) + 1, 1, a1, &demangling cache variable for type metadata for _ContiguousArrayStorage<PatternSegment>);
          a1 = (char *)result;
        }
LABEL_45:
        unint64_t v30 = *((void *)a1 + 2);
        unint64_t v50 = *((void *)a1 + 3);
        if (v30 >= v50 >> 1)
        {
          uint64_t result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v50 > 1), v30 + 1, 1, a1, &demangling cache variable for type metadata for _ContiguousArrayStorage<PatternSegment>);
          a1 = (char *)result;
        }
        *((void *)a1 + 2) = v30 + 1;
        long long v31 = xmmword_209FAFE90;
      }
LABEL_48:
      unint64_t v51 = &a1[24 * v30];
      *((_OWORD *)v51 + 2) = v31;
      v51[48] = 0;
      goto LABEL_49;
    case 0xAu:
      a1 = v2[1];
      uint64_t result = swift_isUniquelyReferenced_nonNull_native();
      if (result) {
        goto LABEL_45;
      }
      goto LABEL_43;
    default:
      unint64_t v16 = *(void *)v15;
      unint64_t v17 = *((void *)v15 + 1);
      if (one-time initialization token for metachars != -1) {
        swift_once();
      }
      if (specialized Set.contains(_:)(v16, v17, metachars))
      {
        unint64_t v76 = 0;
        unint64_t v77 = 0xE000000000000000;
        v18._uint64_t countAndFlagsBits = 92;
        v18._unint64_t object = (void *)0xE100000000000000;
        String.append(_:)(v18);
        Character.write<A>(to:)();
        swift_bridgeObjectRelease();
        unint64_t v20 = v76;
        unint64_t v19 = v77;
      }
      else
      {
        unint64_t v20 = Character.escapingConfusable.getter(v16, v17);
        unint64_t v19 = v52;
        swift_bridgeObjectRelease();
      }
      Swift::String v22 = v2[1];
LABEL_52:
      swift_bridgeObjectRetain();
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
        Swift::String v22 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *((void *)v22 + 2) + 1, 1, v22, &demangling cache variable for type metadata for _ContiguousArrayStorage<PatternSegment>);
      }
      unint64_t v54 = *((void *)v22 + 2);
      unint64_t v53 = *((void *)v22 + 3);
      if (v54 >= v53 >> 1) {
        Swift::String v22 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v53 > 1), v54 + 1, 1, v22, &demangling cache variable for type metadata for _ContiguousArrayStorage<PatternSegment>);
      }
      *((void *)v22 + 2) = v54 + 1;
      uint64_t v55 = &v22[24 * v54];
      *((void *)v55 + 4) = v20;
      *((void *)v55 + 5) = v19;
      v55[48] = 0;
      uint64_t result = swift_bridgeObjectRelease();
      v2[1] = v22;
      return result;
  }
}

BOOL LiteralPrinter.requiresGrouping(_:)(unint64_t a1, uint64_t a2)
{
  int v3 = (a1 >> 59) & 0x1E | (a1 >> 2) & 1;
  if (v3 == 10)
  {
    uint64_t v9 = a1 & 0xFFFFFFFFFFFFFFBLL;
    v11._uint64_t countAndFlagsBits = *(void *)((a1 & 0xFFFFFFFFFFFFFFBLL) + 0x10);
    v11._unint64_t object = *(void **)(v9 + 24);
    specialized LiteralPrinter.prepareQuotedLiteral(_:)(v11, a2);
    uint64_t v10 = String.count.getter();
    swift_bridgeObjectRelease();
    return v10 > 1;
  }
  else if (v3 == 1 && (uint64_t v4 = *(void *)((a1 & 0xFFFFFFFFFFFFFFBLL) + 0x10), (v5 = *(void *)(v4 + 16)) != 0))
  {
    if (v5 == 1)
    {
      uint64_t v6 = *(void *)(v4 + 32);
      swift_retain();
      char v7 = LiteralPrinter.requiresGrouping(_:)(v6, a2);
      swift_release();
      return v7 & 1;
    }
    else
    {
      return 1;
    }
  }
  else
  {
    return 0;
  }
}

uint64_t LiteralPrinter.outputQuantificationKind(_:)(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for AST.Quantification.Kind();
  uint64_t v3 = *(void *)(v2 - 8);
  uint64_t v4 = MEMORY[0x270FA5388](v2);
  uint64_t v6 = (char *)&v47 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v4);
  uint64_t v8 = (char *)&v47 - v7;
  uint64_t v9 = type metadata accessor for DSLTree._AST.QuantificationKind(0);
  uint64_t v10 = MEMORY[0x270FA5388](v9 - 8);
  uint64_t v12 = (char *)&v47 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v10);
  uint64_t v14 = (char *)&v47 - v13;
  uint64_t v15 = type metadata accessor for DSLTree.QuantificationKind(0);
  uint64_t v16 = MEMORY[0x270FA5388](v15);
  Swift::String v18 = (char *)&v47 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v16);
  unint64_t v20 = (char *)&v47 - v19;
  outlined init with copy of MEProgram(a1, (uint64_t)&v47 - v19, type metadata accessor for DSLTree.QuantificationKind);
  int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  if (EnumCaseMultiPayload)
  {
    if (EnumCaseMultiPayload != 1)
    {
      MatchingOptions.defaultQuantificationKind.getter(*v48, (uint64_t)v18);
      swift_storeEnumTagMultiPayload();
      LiteralPrinter.outputQuantificationKind(_:)(v18);
      return outlined destroy of MEProgram((uint64_t)v18, type metadata accessor for DSLTree.QuantificationKind);
    }
    outlined init with take of DSLTree.QuantificationKind((uint64_t)v20, (uint64_t)v12, type metadata accessor for DSLTree._AST.QuantificationKind);
    (*(void (**)(char *, char *, uint64_t))(v3 + 16))(v6, v12, v2);
    int v22 = (*(uint64_t (**)(char *, uint64_t))(v3 + 88))(v6, v2);
    uint64_t v6 = (char *)v48;
    if (v22 == *MEMORY[0x263F8F950])
    {
      outlined destroy of MEProgram((uint64_t)v12, type metadata accessor for DSLTree._AST.QuantificationKind);
      uint64_t v2 = *((void *)v6 + 1);
      uint64_t result = swift_isUniquelyReferenced_nonNull_native();
      if ((result & 1) == 0)
      {
        uint64_t result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(void *)(v2 + 16) + 1, 1, (char *)v2, &demangling cache variable for type metadata for _ContiguousArrayStorage<PatternSegment>);
        uint64_t v2 = result;
      }
      unint64_t v25 = *(void *)(v2 + 16);
      unint64_t v24 = *(void *)(v2 + 24);
      if (v25 >= v24 >> 1)
      {
        uint64_t result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v24 > 1), v25 + 1, 1, (char *)v2, &demangling cache variable for type metadata for _ContiguousArrayStorage<PatternSegment>);
        uint64_t v2 = result;
      }
      *(void *)(v2 + 16) = v25 + 1;
      long long v26 = xmmword_209FAFF90;
LABEL_40:
      uint64_t v42 = v2 + 24 * v25;
      *(_OWORD *)(v42 + 32) = v26;
      *(unsigned char *)(v42 + 48) = 0;
      *((void *)v6 + 1) = v2;
      return result;
    }
    if (v22 == *MEMORY[0x263F8F958])
    {
      outlined destroy of MEProgram((uint64_t)v12, type metadata accessor for DSLTree._AST.QuantificationKind);
      uint64_t v2 = *((void *)v6 + 1);
      uint64_t result = swift_isUniquelyReferenced_nonNull_native();
      if (result)
      {
LABEL_18:
        unint64_t v25 = *(void *)(v2 + 16);
        unint64_t v34 = *(void *)(v2 + 24);
        if (v25 >= v34 >> 1)
        {
          uint64_t result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v34 > 1), v25 + 1, 1, (char *)v2, &demangling cache variable for type metadata for _ContiguousArrayStorage<PatternSegment>);
          uint64_t v2 = result;
        }
        *(void *)(v2 + 16) = v25 + 1;
        long long v26 = xmmword_209FAFE10;
        goto LABEL_40;
      }
LABEL_48:
      uint64_t result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(void *)(v2 + 16) + 1, 1, (char *)v2, &demangling cache variable for type metadata for _ContiguousArrayStorage<PatternSegment>);
      uint64_t v2 = result;
      goto LABEL_18;
    }
    if (v22 == *MEMORY[0x263F8F948])
    {
      outlined destroy of MEProgram((uint64_t)v12, type metadata accessor for DSLTree._AST.QuantificationKind);
      uint64_t v2 = *((void *)v6 + 1);
      uint64_t result = swift_isUniquelyReferenced_nonNull_native();
      if (result)
      {
LABEL_37:
        unint64_t v25 = *(void *)(v2 + 16);
        unint64_t v41 = *(void *)(v2 + 24);
        if (v25 >= v41 >> 1)
        {
          uint64_t result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v41 > 1), v25 + 1, 1, (char *)v2, &demangling cache variable for type metadata for _ContiguousArrayStorage<PatternSegment>);
          uint64_t v2 = result;
        }
        *(void *)(v2 + 16) = v25 + 1;
        long long v26 = xmmword_209FAFE20;
        goto LABEL_40;
      }
LABEL_50:
      uint64_t result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(void *)(v2 + 16) + 1, 1, (char *)v2, &demangling cache variable for type metadata for _ContiguousArrayStorage<PatternSegment>);
      uint64_t v2 = result;
      goto LABEL_37;
    }
    goto LABEL_51;
  }
  outlined init with take of DSLTree.QuantificationKind((uint64_t)v20, (uint64_t)v14, type metadata accessor for DSLTree._AST.QuantificationKind);
  (*(void (**)(char *, char *, uint64_t))(v3 + 16))(v8, v14, v2);
  int v27 = (*(uint64_t (**)(char *, uint64_t))(v3 + 88))(v8, v2);
  if (v27 == *MEMORY[0x263F8F950])
  {
    outlined destroy of MEProgram((uint64_t)v14, type metadata accessor for DSLTree._AST.QuantificationKind);
    unint64_t v28 = v48;
    uint64_t v29 = *(void *)(*v48 + 16);
    if (!v29)
    {
      __break(1u);
      goto LABEL_48;
    }
    BOOL v30 = (*(_DWORD *)(*v48 + 4 * v29 + 28) & 0x20) == 0;
    if ((*(_DWORD *)(*v48 + 4 * v29 + 28) & 0x20) != 0) {
      uint64_t v31 = 63;
    }
    else {
      uint64_t v31 = 0;
    }
    unint64_t v32 = 0xE100000000000000;
    unint64_t v33 = 0xE000000000000000;
LABEL_27:
    if (v30) {
      unint64_t v36 = v33;
    }
    else {
      unint64_t v36 = v32;
    }
    unint64_t v37 = (char *)v28[1];
    swift_bridgeObjectRetain();
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
      unint64_t v37 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *((void *)v37 + 2) + 1, 1, v37, &demangling cache variable for type metadata for _ContiguousArrayStorage<PatternSegment>);
    }
    unint64_t v39 = *((void *)v37 + 2);
    unint64_t v38 = *((void *)v37 + 3);
    if (v39 >= v38 >> 1) {
      unint64_t v37 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v38 > 1), v39 + 1, 1, v37, &demangling cache variable for type metadata for _ContiguousArrayStorage<PatternSegment>);
    }
    *((void *)v37 + 2) = v39 + 1;
    uint64_t v40 = &v37[24 * v39];
    *((void *)v40 + 4) = v31;
    *((void *)v40 + 5) = v36;
    v40[48] = 0;
    uint64_t result = swift_bridgeObjectRelease();
    v28[1] = (uint64_t)v37;
    return result;
  }
  unint64_t v28 = v48;
  if (v27 == *MEMORY[0x263F8F958])
  {
    outlined destroy of MEProgram((uint64_t)v14, type metadata accessor for DSLTree._AST.QuantificationKind);
    uint64_t v35 = *(void *)(*v28 + 16);
    if (!v35)
    {
      __break(1u);
      goto LABEL_50;
    }
    BOOL v30 = (*(_DWORD *)(*v28 + 4 * v35 + 28) & 0x20) == 0;
    if ((*(_DWORD *)(*v28 + 4 * v35 + 28) & 0x20) != 0) {
      uint64_t v31 = 0;
    }
    else {
      uint64_t v31 = 63;
    }
    unint64_t v32 = 0xE000000000000000;
    unint64_t v33 = 0xE100000000000000;
    goto LABEL_27;
  }
  if (v27 != *MEMORY[0x263F8F948])
  {
LABEL_51:
    uint64_t result = _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
    return result;
  }
  outlined destroy of MEProgram((uint64_t)v14, type metadata accessor for DSLTree._AST.QuantificationKind);
  uint64_t v43 = v28[1];
  uint64_t result = swift_isUniquelyReferenced_nonNull_native();
  if ((result & 1) == 0)
  {
    uint64_t result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(void *)(v43 + 16) + 1, 1, (char *)v43, &demangling cache variable for type metadata for _ContiguousArrayStorage<PatternSegment>);
    uint64_t v43 = result;
  }
  unint64_t v45 = *(void *)(v43 + 16);
  unint64_t v44 = *(void *)(v43 + 24);
  if (v45 >= v44 >> 1)
  {
    uint64_t result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v44 > 1), v45 + 1, 1, (char *)v43, &demangling cache variable for type metadata for _ContiguousArrayStorage<PatternSegment>);
    uint64_t v43 = result;
  }
  *(void *)(v43 + 16) = v45 + 1;
  unint64_t v46 = v43 + 24 * v45;
  *(_OWORD *)(v46 + 32) = xmmword_209FAFE20;
  *(unsigned char *)(v46 + 48) = 0;
  v28[1] = v43;
  return result;
}

uint64_t Unicode.Scalar.escapedString.getter(int a1)
{
  switch(a1)
  {
    case 9:
      return 29788;
    case 10:
      return 28252;
    case 13:
      return 29276;
  }
  lazy protocol witness table accessor for type UInt32 and conformance UInt32();
  uint64_t v2 = String.init<A>(_:radix:uppercase:)();
  uint64_t v4 = v3;
  uint64_t v5 = String.count.getter();
  uint64_t result = String.count.getter();
  if (v5 <= 4)
  {
    if (!__OFSUB__(4, result))
    {
      uint64_t v6 = MEMORY[0x21050F120](48, 0xE100000000000000, 4 - result);
      uint64_t v8 = 30044;
      goto LABEL_12;
    }
LABEL_15:
    __break(1u);
    return result;
  }
  if (__OFSUB__(8, result))
  {
    __break(1u);
    goto LABEL_15;
  }
  uint64_t v6 = MEMORY[0x21050F120](48, 0xE100000000000000, 8 - result);
  uint64_t v8 = 21852;
LABEL_12:
  uint64_t v10 = v8;
  String.append(_:)(*(Swift::String *)&v6);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  v9._uint64_t countAndFlagsBits = v2;
  v9._unint64_t object = v4;
  String.append(_:)(v9);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v10;
}

uint64_t LiteralPrinter.outputReference(_:)(uint64_t a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = type metadata accessor for AST.Atom.Number();
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v6 = MEMORY[0x270FA5388](v4);
  uint64_t v8 = (char *)&v42 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v6);
  uint64_t v10 = (char *)&v42 - v9;
  uint64_t v11 = type metadata accessor for AST.Reference.Kind();
  uint64_t v12 = *(void *)(v11 - 8);
  MEMORY[0x270FA5388](v11);
  uint64_t v14 = (uint64_t *)((char *)&v42 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0));
  AST.Reference.kind.getter();
  int v15 = (*(uint64_t (**)(uint64_t *, uint64_t))(v12 + 88))(v14, v11);
  if (v15 == *MEMORY[0x263F8FCF0])
  {
    (*(void (**)(uint64_t *, uint64_t))(v12 + 96))(v14, v11);
    (*(void (**)(char *, uint64_t *, uint64_t))(v5 + 32))(v10, v14, v4);
    uint64_t v16 = AST.Atom.Number.value.getter();
    char v18 = v17;
    (*(void (**)(char *, uint64_t))(v5 + 8))(v10, v4);
    if ((v18 & 1) == 0)
    {
      if (v16 <= 9)
      {
        uint64_t v44 = 92;
        unint64_t v45 = 0xE100000000000000;
        uint64_t v43 = v16;
        v19._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
        String.append(_:)(v19);
        swift_bridgeObjectRelease();
LABEL_23:
        uint64_t v38 = v44;
        unint64_t v37 = v45;
        unint64_t v28 = *(char **)(v2 + 8);
        swift_bridgeObjectRetain();
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
          unint64_t v28 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *((void *)v28 + 2) + 1, 1, v28, &demangling cache variable for type metadata for _ContiguousArrayStorage<PatternSegment>);
        }
        unint64_t v40 = *((void *)v28 + 2);
        unint64_t v39 = *((void *)v28 + 3);
        if (v40 >= v39 >> 1) {
          unint64_t v28 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v39 > 1), v40 + 1, 1, v28, &demangling cache variable for type metadata for _ContiguousArrayStorage<PatternSegment>);
        }
        *((void *)v28 + 2) = v40 + 1;
        unint64_t v41 = &v28[24 * v40];
        *((void *)v41 + 4) = v38;
        *((void *)v41 + 5) = v37;
        v41[48] = 0;
        uint64_t result = swift_bridgeObjectRelease();
LABEL_28:
        *(void *)(v2 + 8) = v28;
        return result;
      }
      uint64_t v44 = 8087388;
      unint64_t v45 = 0xE300000000000000;
      uint64_t v43 = v16;
      goto LABEL_21;
    }
LABEL_13:
    type metadata accessor for DSLTree.Atom(0);
    uint64_t v26 = swift_allocBox();
    outlined init with copy of MEProgram(a1, v27, type metadata accessor for DSLTree._AST.Reference);
    swift_storeEnumTagMultiPayload();
    unint64_t v28 = *(char **)(v2 + 8);
    swift_retain();
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
      unint64_t v28 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *((void *)v28 + 2) + 1, 1, v28, &demangling cache variable for type metadata for _ContiguousArrayStorage<PatternSegment>);
    }
    unint64_t v30 = *((void *)v28 + 2);
    unint64_t v29 = *((void *)v28 + 3);
    if (v30 >= v29 >> 1) {
      unint64_t v28 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v29 > 1), v30 + 1, 1, v28, &demangling cache variable for type metadata for _ContiguousArrayStorage<PatternSegment>);
    }
    *((void *)v28 + 2) = v30 + 1;
    uint64_t v31 = &v28[24 * v30];
    *((void *)v31 + 4) = v26 | 0x4000000000000000;
    *((void *)v31 + 5) = 0;
    v31[48] = 1;
    uint64_t result = swift_release();
    goto LABEL_28;
  }
  if (v15 == *MEMORY[0x263F8FCF8])
  {
    (*(void (**)(uint64_t *, uint64_t))(v12 + 96))(v14, v11);
    (*(void (**)(char *, uint64_t *, uint64_t))(v5 + 32))(v8, v14, v4);
    uint64_t v20 = AST.Atom.Number.value.getter();
    char v22 = v21;
    (*(void (**)(char *, uint64_t))(v5 + 8))(v8, v4);
    if (v22) {
      goto LABEL_13;
    }
    if (v20 >= 0) {
      uint64_t v23 = 43;
    }
    else {
      uint64_t v23 = 45;
    }
    uint64_t v44 = 8087388;
    unint64_t v45 = 0xE300000000000000;
    unint64_t v24 = 0xE100000000000000;
    String.append(_:)(*(Swift::String *)&v23);
    swift_bridgeObjectRelease();
    if ((v20 & 0x8000000000000000) == 0 || (v25 = __OFSUB__(0, v20), uint64_t v20 = -v20, !v25))
    {
      uint64_t v43 = v20;
LABEL_21:
      uint64_t v33 = dispatch thunk of CustomStringConvertible.description.getter();
      goto LABEL_22;
    }
    __break(1u);
  }
  else if (v15 == *MEMORY[0x263F8FCE8])
  {
    (*(void (**)(uint64_t *, uint64_t))(v12 + 96))(v14, v11);
    uint64_t v33 = *v14;
    uint64_t v34 = v14[1];
    uint64_t v44 = 8087388;
    unint64_t v45 = 0xE300000000000000;
    uint64_t v35 = v34;
LABEL_22:
    String.append(_:)(*(Swift::String *)&v33);
    swift_bridgeObjectRelease();
    v36._uint64_t countAndFlagsBits = 125;
    v36._unint64_t object = (void *)0xE100000000000000;
    String.append(_:)(v36);
    goto LABEL_23;
  }
  uint64_t result = _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t AST.MatchingOptionSequence._patternString.getter()
{
  uint64_t v59 = type metadata accessor for AST.MatchingOption.Kind();
  uint64_t v1 = *(void *)(v59 - 8);
  MEMORY[0x270FA5388](v59);
  uint64_t v3 = (char *)v50 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v58 = type metadata accessor for AST.MatchingOption();
  uint64_t v4 = *(void *)(v58 - 8);
  uint64_t v5 = MEMORY[0x270FA5388](v58);
  unint64_t v56 = (char *)v50 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v5);
  uint64_t v8 = (char *)v50 - v7;
  uint64_t v52 = v0;
  uint64_t result = AST.MatchingOptionSequence.adding.getter();
  uint64_t v10 = (void *)result;
  uint64_t v57 = *(void *)(result + 16);
  v50[0] = v1;
  if (v57)
  {
    unint64_t v11 = 0;
    uint64_t v54 = v4 + 8;
    uint64_t v55 = v4 + 16;
    uint64_t v12 = (uint64_t (**)(char *, uint64_t))(v1 + 8);
    uint64_t v13 = MEMORY[0x263F8EE78];
    unint64_t v53 = (void *)result;
    while (v11 < v10[2])
    {
      uint64_t v15 = v58;
      (*(void (**)(char *, unint64_t, uint64_t))(v4 + 16))(v8, (unint64_t)v10+ ((*(unsigned __int8 *)(v4 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80))+ *(void *)(v4 + 72) * v11, v58);
      AST.MatchingOption.kind.getter();
      (*(void (**)(char *, uint64_t))(v4 + 8))(v8, v15);
      uint64_t v16 = AST.MatchingOption.Kind._patternString.getter();
      uint64_t v18 = v17;
      uint64_t result = (*v12)(v3, v59);
      if (v18)
      {
        uint64_t result = swift_isUniquelyReferenced_nonNull_native();
        if ((result & 1) == 0)
        {
          uint64_t result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(void *)(v13 + 16) + 1, 1, (char *)v13);
          uint64_t v13 = result;
        }
        unint64_t v20 = *(void *)(v13 + 16);
        unint64_t v19 = *(void *)(v13 + 24);
        if (v20 >= v19 >> 1)
        {
          uint64_t result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v19 > 1), v20 + 1, 1, (char *)v13);
          uint64_t v13 = result;
        }
        *(void *)(v13 + 16) = v20 + 1;
        unint64_t v14 = v13 + 16 * v20;
        *(void *)(v14 + 32) = v16;
        *(void *)(v14 + 40) = v18;
        uint64_t v10 = v53;
      }
      if (v57 == ++v11) {
        goto LABEL_12;
      }
    }
    __break(1u);
    goto LABEL_33;
  }
  uint64_t v13 = MEMORY[0x263F8EE78];
LABEL_12:
  swift_bridgeObjectRelease();
  uint64_t v60 = v13;
  uint64_t CanonicalSpecializedMetadata = swift_getCanonicalSpecializedMetadata();
  uint64_t v22 = lazy protocol witness table accessor for type PartialRangeUpTo<String.Index> and conformance PartialRangeUpTo<A>(&lazy protocol witness table cache variable for type [String] and conformance [A]);
  uint64_t v23 = BidirectionalCollection<>.joined(separator:)();
  BOOL v25 = v24;
  swift_bridgeObjectRelease();
  uint64_t result = AST.MatchingOptionSequence.removing.getter();
  uint64_t v26 = result;
  uint64_t v57 = *(void *)(result + 16);
  unint64_t v53 = v25;
  v50[2] = CanonicalSpecializedMetadata;
  uint64_t v51 = v23;
  v50[1] = v22;
  if (v57)
  {
    unint64_t v27 = 0;
    uint64_t v54 = v4 + 8;
    uint64_t v55 = v4 + 16;
    unint64_t v28 = (uint64_t (**)(char *, uint64_t))(v50[0] + 8);
    uint64_t v29 = MEMORY[0x263F8EE78];
    while (v27 < *(void *)(v26 + 16))
    {
      uint64_t v31 = v56;
      uint64_t v32 = v58;
      (*(void (**)(char *, unint64_t, uint64_t))(v4 + 16))(v56, v26+ ((*(unsigned __int8 *)(v4 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80))+ *(void *)(v4 + 72) * v27, v58);
      AST.MatchingOption.kind.getter();
      (*(void (**)(char *, uint64_t))(v4 + 8))(v31, v32);
      uint64_t v33 = AST.MatchingOption.Kind._patternString.getter();
      uint64_t v35 = v34;
      uint64_t result = (*v28)(v3, v59);
      if (v35)
      {
        uint64_t result = swift_isUniquelyReferenced_nonNull_native();
        if ((result & 1) == 0)
        {
          uint64_t result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(void *)(v29 + 16) + 1, 1, (char *)v29);
          uint64_t v29 = result;
        }
        unint64_t v37 = *(void *)(v29 + 16);
        unint64_t v36 = *(void *)(v29 + 24);
        if (v37 >= v36 >> 1)
        {
          uint64_t result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v36 > 1), v37 + 1, 1, (char *)v29);
          uint64_t v29 = result;
        }
        *(void *)(v29 + 16) = v37 + 1;
        unint64_t v30 = v29 + 16 * v37;
        *(void *)(v30 + 32) = v33;
        *(void *)(v30 + 40) = v35;
      }
      if (v57 == ++v27) {
        goto LABEL_23;
      }
    }
LABEL_33:
    __break(1u);
    return result;
  }
  uint64_t v29 = MEMORY[0x263F8EE78];
LABEL_23:
  swift_bridgeObjectRelease();
  uint64_t v60 = v29;
  uint64_t v38 = BidirectionalCollection<>.joined(separator:)();
  unint64_t v40 = v39;
  swift_bridgeObjectRelease();
  if (AST.MatchingOptionSequence.resetsCurrentOptions.getter())
  {
    swift_bridgeObjectRelease();
    uint64_t v60 = 6176552;
    unint64_t v61 = 0xE300000000000000;
    v41._uint64_t countAndFlagsBits = v51;
    v41._unint64_t object = v53;
    String.append(_:)(v41);
  }
  else
  {
    uint64_t v60 = 16168;
    unint64_t v61 = 0xE200000000000000;
    v42._uint64_t countAndFlagsBits = v51;
    v42._unint64_t object = v53;
    String.append(_:)(v42);
    swift_bridgeObjectRelease();
    uint64_t v44 = v60;
    unint64_t v43 = v61;
    uint64_t v45 = HIBYTE(v40) & 0xF;
    if ((v40 & 0x2000000000000000) == 0) {
      uint64_t v45 = v38 & 0xFFFFFFFFFFFFLL;
    }
    if (v45)
    {
      uint64_t v60 = 45;
      unint64_t v61 = 0xE100000000000000;
      v46._uint64_t countAndFlagsBits = v38;
      v46._unint64_t object = (void *)v40;
      String.append(_:)(v46);
      swift_bridgeObjectRelease();
      uint64_t v48 = v60;
      uint64_t v47 = (void *)v61;
    }
    else
    {
      swift_bridgeObjectRelease();
      uint64_t v48 = 0;
      uint64_t v47 = (void *)0xE000000000000000;
    }
    uint64_t v60 = v44;
    unint64_t v61 = v43;
    swift_bridgeObjectRetain();
    v49._uint64_t countAndFlagsBits = v48;
    v49._unint64_t object = v47;
    String.append(_:)(v49);
    swift_bridgeObjectRelease();
  }
  swift_bridgeObjectRelease();
  return v60;
}

uint64_t LiteralPrinter.outputUnconvertedAST(_:)(uint64_t a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = type metadata accessor for AST.Atom.CharacterProperty();
  uint64_t v5 = *(void *)(v4 - 8);
  MEMORY[0x270FA5388](v4);
  uint64_t v7 = (char *)&v45 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = type metadata accessor for AST.Atom.Kind();
  uint64_t v9 = *(void *)(v8 - 8);
  MEMORY[0x270FA5388](v8);
  unint64_t v11 = (uint64_t *)((char *)&v45 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0));
  AST.Atom.kind.getter();
  int v12 = (*(uint64_t (**)(uint64_t *, uint64_t))(v9 + 88))(v11, v8);
  if (v12 == *MEMORY[0x263F8FBE8])
  {
    (*(void (**)(uint64_t *, uint64_t))(v9 + 96))(v11, v8);
    (*(void (**)(char *, uint64_t *, uint64_t))(v5 + 32))(v7, v11, v4);
    uint64_t v13 = AST.Atom.CharacterProperty._regexBase.getter();
    uint64_t v15 = v14;
    (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
    if (v15)
    {
      uint64_t v16 = *(char **)(v2 + 8);
      swift_bridgeObjectRetain();
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
        uint64_t v16 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *((void *)v16 + 2) + 1, 1, v16, &demangling cache variable for type metadata for _ContiguousArrayStorage<PatternSegment>);
      }
      unint64_t v18 = *((void *)v16 + 2);
      unint64_t v17 = *((void *)v16 + 3);
      if (v18 >= v17 >> 1) {
        uint64_t v16 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v17 > 1), v18 + 1, 1, v16, &demangling cache variable for type metadata for _ContiguousArrayStorage<PatternSegment>);
      }
      *((void *)v16 + 2) = v18 + 1;
      unint64_t v19 = &v16[24 * v18];
      *((void *)v19 + 4) = v13;
      *((void *)v19 + 5) = v15;
      v19[48] = 0;
      uint64_t result = swift_bridgeObjectRelease();
      *(void *)(v2 + 8) = v16;
      return result;
    }
    type metadata accessor for DSLTree.Atom(0);
    uint64_t v38 = swift_allocBox();
    uint64_t v40 = v39;
    uint64_t v41 = type metadata accessor for AST.Atom();
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v41 - 8) + 16))(v40, a1, v41);
    swift_storeEnumTagMultiPayload();
    uint64_t v26 = *(char **)(v2 + 8);
    swift_retain();
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
      uint64_t v26 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *((void *)v26 + 2) + 1, 1, v26, &demangling cache variable for type metadata for _ContiguousArrayStorage<PatternSegment>);
    }
    unint64_t v43 = *((void *)v26 + 2);
    unint64_t v42 = *((void *)v26 + 3);
    if (v43 >= v42 >> 1) {
      uint64_t v26 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v42 > 1), v43 + 1, 1, v26, &demangling cache variable for type metadata for _ContiguousArrayStorage<PatternSegment>);
    }
    *((void *)v26 + 2) = v43 + 1;
    uint64_t v44 = &v26[24 * v43];
    *((void *)v44 + 4) = v38 | 0x4000000000000000;
    *((void *)v44 + 5) = 0;
    v44[48] = 1;
    uint64_t result = swift_release();
LABEL_24:
    *(void *)(v2 + 8) = v26;
    return result;
  }
  if (v12 == *MEMORY[0x263F8FB88])
  {
    (*(void (**)(uint64_t *, uint64_t))(v9 + 96))(v11, v8);
    v21._uint64_t countAndFlagsBits = *v11;
    uint64_t v22 = (void *)v11[1];
    uint64_t v45 = 8080988;
    unint64_t v46 = 0xE300000000000000;
    v21._unint64_t object = v22;
    String.append(_:)(v21);
    swift_bridgeObjectRelease();
    v23._uint64_t countAndFlagsBits = 125;
    v23._unint64_t object = (void *)0xE100000000000000;
    String.append(_:)(v23);
    uint64_t v25 = v45;
    unint64_t v24 = v46;
    uint64_t v26 = *(char **)(v2 + 8);
    swift_bridgeObjectRetain();
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
      uint64_t v26 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *((void *)v26 + 2) + 1, 1, v26, &demangling cache variable for type metadata for _ContiguousArrayStorage<PatternSegment>);
    }
    unint64_t v28 = *((void *)v26 + 2);
    unint64_t v27 = *((void *)v26 + 3);
    if (v28 >= v27 >> 1) {
      uint64_t v26 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v27 > 1), v28 + 1, 1, v26, &demangling cache variable for type metadata for _ContiguousArrayStorage<PatternSegment>);
    }
    *((void *)v26 + 2) = v28 + 1;
    uint64_t v29 = &v26[24 * v28];
    *((void *)v29 + 4) = v25;
    *((void *)v29 + 5) = v24;
    v29[48] = 0;
    uint64_t result = swift_bridgeObjectRelease();
    goto LABEL_24;
  }
  type metadata accessor for DSLTree.Atom(0);
  uint64_t v30 = swift_allocBox();
  uint64_t v32 = v31;
  uint64_t v33 = type metadata accessor for AST.Atom();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v33 - 8) + 16))(v32, a1, v33);
  swift_storeEnumTagMultiPayload();
  uint64_t v34 = *(char **)(v2 + 8);
  swift_retain();
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
    uint64_t v34 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *((void *)v34 + 2) + 1, 1, v34, &demangling cache variable for type metadata for _ContiguousArrayStorage<PatternSegment>);
  }
  unint64_t v36 = *((void *)v34 + 2);
  unint64_t v35 = *((void *)v34 + 3);
  if (v36 >= v35 >> 1) {
    uint64_t v34 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v35 > 1), v36 + 1, 1, v34, &demangling cache variable for type metadata for _ContiguousArrayStorage<PatternSegment>);
  }
  *((void *)v34 + 2) = v36 + 1;
  unint64_t v37 = &v34[24 * v36];
  *((void *)v37 + 4) = v30 | 0x4000000000000000;
  *((void *)v37 + 5) = 0;
  v37[48] = 1;
  swift_release();
  *(void *)(v2 + 8) = v34;
  return (*(uint64_t (**)(uint64_t *, uint64_t))(v9 + 8))(v11, v8);
}

uint64_t String.containsRegexMetaCharacters.getter(uint64_t a1, unint64_t a2)
{
  uint64_t v2 = HIBYTE(a2) & 0xF;
  uint64_t v18 = a1;
  unint64_t v19 = a2;
  if ((a2 & 0x2000000000000000) == 0) {
    uint64_t v2 = a1 & 0xFFFFFFFFFFFFLL;
  }
  uint64_t v20 = 0;
  uint64_t v21 = v2;
  swift_bridgeObjectRetain();
  Swift::String_optional v3 = String.Iterator.next()();
  uint64_t object = (uint64_t)v3.value._object;
  if (v3.value._object)
  {
    uint64_t countAndFlagsBits = v3.value._countAndFlagsBits;
    while (1)
    {
      if (one-time initialization token for metachars != -1) {
        swift_once();
      }
      uint64_t v7 = metachars;
      if (*(void *)(metachars + 16))
      {
        Hasher.init(_seed:)();
        MEMORY[0x21050EE80](v17, countAndFlagsBits, object);
        Swift::Int v8 = Hasher._finalize()();
        uint64_t v9 = -1 << *(unsigned char *)(v7 + 32);
        unint64_t v10 = v8 & ~v9;
        uint64_t v11 = v7 + 56;
        if ((*(void *)(v7 + 56 + ((v10 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v10)) {
          break;
        }
      }
LABEL_5:
      swift_bridgeObjectRelease();
      Swift::String_optional v6 = String.Iterator.next()();
      uint64_t countAndFlagsBits = v6.value._countAndFlagsBits;
      uint64_t object = (uint64_t)v6.value._object;
      if (!v6.value._object) {
        goto LABEL_19;
      }
    }
    uint64_t v12 = ~v9;
    uint64_t v13 = *(void *)(v7 + 48);
    while (1)
    {
      uint64_t v14 = (void *)(v13 + 16 * v10);
      BOOL v15 = *v14 == countAndFlagsBits && object == v14[1];
      if (v15 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0) {
        break;
      }
      unint64_t v10 = (v10 + 1) & v12;
      if (((*(void *)(v11 + ((v10 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v10) & 1) == 0) {
        goto LABEL_5;
      }
    }
    swift_bridgeObjectRelease();
    uint64_t object = 1;
  }
LABEL_19:
  swift_bridgeObjectRelease();
  return object;
}

uint64_t AST.Atom.CharacterProperty._regexBase.getter()
{
  uint64_t v0 = type metadata accessor for Unicode.Script();
  uint64_t v80 = *(void *)(v0 - 8);
  uint64_t v81 = v0;
  uint64_t v1 = MEMORY[0x270FA5388](v0);
  long long v78 = (char *)&v74 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v1);
  long long v79 = (char *)&v74 - v3;
  uint64_t v4 = type metadata accessor for Unicode.POSIXProperty();
  uint64_t v76 = *(void *)(v4 - 8);
  uint64_t v77 = v4;
  MEMORY[0x270FA5388](v4);
  unint64_t v75 = (char *)&v74 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = type metadata accessor for Unicode.ExtendedGeneralCategory();
  uint64_t v7 = *(void *)(v6 - 8);
  MEMORY[0x270FA5388](v6);
  uint64_t v9 = (char *)&v74 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = type metadata accessor for Unicode.BinaryProperty();
  uint64_t v11 = *(void *)(v10 - 8);
  uint64_t v82 = v10;
  uint64_t v83 = v11;
  MEMORY[0x270FA5388](v10);
  uint64_t v13 = (char *)&v74 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = type metadata accessor for AST.Atom.CharacterProperty.Kind();
  uint64_t v15 = *(void *)(v14 - 8);
  MEMORY[0x270FA5388](v14);
  unint64_t v17 = (uint64_t *)((char *)&v74 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0));
  if (AST.Atom.CharacterProperty.isInverted.getter()) {
    uint64_t v18 = 20572;
  }
  else {
    uint64_t v18 = 28764;
  }
  AST.Atom.CharacterProperty.kind.getter();
  int v19 = (*(uint64_t (**)(uint64_t *, uint64_t))(v15 + 88))(v17, v14);
  if (v19 == *MEMORY[0x263F8FAF0])
  {
    (*(void (**)(uint64_t *, uint64_t))(v15 + 96))(v17, v14);
    (*(void (**)(char *, uint64_t *, uint64_t))(v7 + 32))(v9, v17, v6);
    uint64_t v84 = v18;
    unint64_t v85 = 0xE200000000000000;
    v20._uint64_t countAndFlagsBits = 123;
    v20._uint64_t object = (void *)0xE100000000000000;
    String.append(_:)(v20);
    uint64_t v21 = Unicode.ExtendedGeneralCategory.rawValue.getter();
    Swift::String v23 = v22;
    (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v6);
    v24._uint64_t countAndFlagsBits = v21;
    v24._uint64_t object = v23;
    String.append(_:)(v24);
LABEL_14:
    swift_bridgeObjectRelease();
    uint64_t v38 = 125;
    unint64_t v39 = 0xE100000000000000;
    goto LABEL_33;
  }
  int v25 = v19;
  if (v19 == *MEMORY[0x263F8FB38])
  {
    (*(void (**)(uint64_t *, uint64_t))(v15 + 96))(v17, v14);
    int v26 = *((unsigned __int8 *)v17
          + *(int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Unicode.BinaryProperty, value: Bool))
                   + 48));
    uint64_t v28 = v82;
    uint64_t v27 = v83;
    (*(void (**)(char *, uint64_t *, uint64_t))(v83 + 32))(v13, v17, v82);
    BOOL v29 = v26 == 0;
    if (v26) {
      uint64_t v30 = 0;
    }
    else {
      uint64_t v30 = 0x65736C61663DLL;
    }
    if (v29) {
      uint64_t v31 = (void *)0xE600000000000000;
    }
    else {
      uint64_t v31 = (void *)0xE000000000000000;
    }
    uint64_t v84 = v18;
    unint64_t v85 = 0xE200000000000000;
    v32._uint64_t countAndFlagsBits = 123;
    v32._uint64_t object = (void *)0xE100000000000000;
    String.append(_:)(v32);
    uint64_t v33 = Unicode.BinaryProperty.rawValue.getter();
    unint64_t v35 = v34;
    (*(void (**)(char *, uint64_t))(v27 + 8))(v13, v28);
    v36._uint64_t countAndFlagsBits = v33;
    v36._uint64_t object = v35;
    String.append(_:)(v36);
    swift_bridgeObjectRelease();
    v37._uint64_t countAndFlagsBits = v30;
    v37._uint64_t object = v31;
    String.append(_:)(v37);
    goto LABEL_14;
  }
  if (v19 == *MEMORY[0x263F8FB40])
  {
    swift_bridgeObjectRelease();
    (*(void (**)(uint64_t *, uint64_t))(v15 + 96))(v17, v14);
    uint64_t v41 = v79;
    uint64_t v40 = v80;
    uint64_t v42 = v81;
    (*(void (**)(char *, uint64_t *, uint64_t))(v80 + 32))(v79, v17, v81);
    uint64_t v84 = 14939;
    unint64_t v85 = 0xE200000000000000;
    char v43 = AST.Atom.CharacterProperty.isInverted.getter();
    BOOL v44 = (v43 & 1) == 0;
    if (v43) {
      uint64_t v45 = 94;
    }
    else {
      uint64_t v45 = 0;
    }
    if (v44) {
      unint64_t v46 = 0xE000000000000000;
    }
    else {
      unint64_t v46 = 0xE100000000000000;
    }
    unint64_t v47 = v46;
    String.append(_:)(*(Swift::String *)&v45);
    swift_bridgeObjectRelease();
    uint64_t v48 = 0x3D747069726373;
    unint64_t v49 = 0xE700000000000000;
LABEL_31:
    String.append(_:)(*(Swift::String *)&v48);
    uint64_t v55 = Unicode.Script.rawValue.getter();
LABEL_32:
    uint64_t v57 = v55;
    uint64_t v58 = v56;
    (*(void (**)(char *, uint64_t))(v40 + 8))(v41, v42);
    v59._uint64_t countAndFlagsBits = v57;
    v59._uint64_t object = v58;
    String.append(_:)(v59);
    swift_bridgeObjectRelease();
    uint64_t v38 = 23866;
    unint64_t v39 = 0xE200000000000000;
    goto LABEL_33;
  }
  if (v19 == *MEMORY[0x263F8FAF8])
  {
    swift_bridgeObjectRelease();
    (*(void (**)(uint64_t *, uint64_t))(v15 + 96))(v17, v14);
    uint64_t v40 = v80;
    uint64_t v42 = v81;
    uint64_t v41 = v78;
    (*(void (**)(char *, uint64_t *, uint64_t))(v80 + 32))(v78, v17, v81);
    uint64_t v84 = 14939;
    unint64_t v85 = 0xE200000000000000;
    char v50 = AST.Atom.CharacterProperty.isInverted.getter();
    BOOL v51 = (v50 & 1) == 0;
    if (v50) {
      uint64_t v52 = 94;
    }
    else {
      uint64_t v52 = 0;
    }
    if (v51) {
      unint64_t v53 = 0xE000000000000000;
    }
    else {
      unint64_t v53 = 0xE100000000000000;
    }
    unint64_t v54 = v53;
    String.append(_:)(*(Swift::String *)&v52);
    swift_bridgeObjectRelease();
    uint64_t v48 = 1031299955;
    unint64_t v49 = 0xE400000000000000;
    goto LABEL_31;
  }
  if (v19 == *MEMORY[0x263F8FB28])
  {
    swift_bridgeObjectRelease();
    (*(void (**)(uint64_t *, uint64_t))(v15 + 96))(v17, v14);
    v61._uint64_t countAndFlagsBits = *v17;
    unint64_t v62 = (void *)v17[1];
    uint64_t v84 = 8080988;
    unint64_t v85 = 0xE300000000000000;
    v61._uint64_t object = v62;
    String.append(_:)(v61);
    goto LABEL_14;
  }
  if (v19 == *MEMORY[0x263F8FB30])
  {
    swift_bridgeObjectRelease();
    (*(void (**)(uint64_t *, uint64_t))(v15 + 96))(v17, v14);
    uint64_t v41 = v75;
    uint64_t v40 = v76;
    uint64_t v42 = v77;
    (*(void (**)(char *, uint64_t *, uint64_t))(v76 + 32))(v75, v17, v77);
    uint64_t v84 = 14939;
    unint64_t v85 = 0xE200000000000000;
    char v63 = AST.Atom.CharacterProperty.isInverted.getter();
    BOOL v64 = (v63 & 1) == 0;
    if (v63) {
      uint64_t v65 = 94;
    }
    else {
      uint64_t v65 = 0;
    }
    if (v64) {
      unint64_t v66 = 0xE000000000000000;
    }
    else {
      unint64_t v66 = 0xE100000000000000;
    }
    unint64_t v67 = v66;
    String.append(_:)(*(Swift::String *)&v65);
    swift_bridgeObjectRelease();
    uint64_t v55 = Unicode.POSIXProperty.rawValue.getter();
    goto LABEL_32;
  }
  if (v19 == *MEMORY[0x263F8FB08])
  {
    uint64_t v84 = v18;
    unint64_t v85 = 0xE200000000000000;
    uint64_t v38 = 0x7D796E417BLL;
    unint64_t v39 = 0xE500000000000000;
  }
  else if (v19 == *MEMORY[0x263F8FB58])
  {
    uint64_t v84 = v18;
    unint64_t v85 = 0xE200000000000000;
    uint64_t v38 = 0x656E67697373417BLL;
    unint64_t v39 = 0xEA00000000007D64;
  }
  else
  {
    int v68 = *MEMORY[0x263F8FB18];
    swift_bridgeObjectRelease();
    if (v25 != v68)
    {
      (*(void (**)(uint64_t *, uint64_t))(v15 + 8))(v17, v14);
      return 0;
    }
    uint64_t v84 = 14939;
    unint64_t v85 = 0xE200000000000000;
    char v69 = AST.Atom.CharacterProperty.isInverted.getter();
    BOOL v70 = (v69 & 1) == 0;
    if (v69) {
      uint64_t v71 = 94;
    }
    else {
      uint64_t v71 = 0;
    }
    if (v70) {
      unint64_t v72 = 0xE000000000000000;
    }
    else {
      unint64_t v72 = 0xE100000000000000;
    }
    unint64_t v73 = v72;
    String.append(_:)(*(Swift::String *)&v71);
    swift_bridgeObjectRelease();
    uint64_t v38 = 0x5D3A6969637361;
    unint64_t v39 = 0xE700000000000000;
  }
LABEL_33:
  String.append(_:)(*(Swift::String *)&v38);
  return v84;
}

uint64_t one-time initialization function for metachars()
{
  uint64_t result = specialized Set.init<A>(_:)(0x7C7D7B29285D5B5CLL, 0xEF2D2E245E3F2A2BLL);
  metachars = result;
  return result;
}

uint64_t specialized Set.init<A>(_:)(Swift::Int a1, unint64_t a2)
{
  String.count.getter();
  uint64_t v4 = Set.init(minimumCapacity:)();
  uint64_t v12 = v4;
  uint64_t v5 = HIBYTE(a2) & 0xF;
  if ((a2 & 0x2000000000000000) == 0) {
    uint64_t v5 = a1 & 0xFFFFFFFFFFFFLL;
  }
  _OWORD v11[2] = a1;
  v11[3] = a2;
  v11[4] = 0;
  v11[5] = v5;
  Swift::String_optional v6 = String.Iterator.next()();
  if (v6.value._object)
  {
    Swift::Int countAndFlagsBits = v6.value._countAndFlagsBits;
    uint64_t object = v6.value._object;
    do
    {
      specialized Set._Variant.insert(_:)(v11, countAndFlagsBits, (Swift::Int)object);
      swift_bridgeObjectRelease();
      Swift::String_optional v9 = String.Iterator.next()();
      Swift::Int countAndFlagsBits = v9.value._countAndFlagsBits;
      uint64_t object = v9.value._object;
    }
    while (v9.value._object);
    uint64_t v4 = v12;
  }
  swift_bridgeObjectRelease();
  return v4;
}

unint64_t Character.escapingConfusable.getter(unint64_t a1, unint64_t a2)
{
  char v4 = Character.isConfusable.getter();
  swift_bridgeObjectRetain();
  if ((v4 & 1) == 0) {
    return a1;
  }
  unint64_t result = specialized Collection.first.getter(a1, a2);
  if ((result & 0x100000000) == 0)
  {
    if ((result & 0xFFFFFF80) != 0)
    {
      int v17 = (result & 0x3F) << 8;
      unsigned int v6 = (v17 | (result >> 6)) + 33217;
      unsigned int v18 = (v17 | (result >> 6) & 0x3F) << 8;
      unsigned int v19 = (((v18 | (result >> 12) & 0x3F) << 8) | (result >> 18)) - 2122219023;
      unsigned int v20 = (v18 | (result >> 12)) + 8487393;
      if (WORD1(result)) {
        unsigned int v20 = v19;
      }
      if (result >= 0x800) {
        unsigned int v6 = v20;
      }
      goto LABEL_6;
    }
    if (result <= 0xFF)
    {
      unsigned int v6 = (result + 1);
LABEL_6:
      v21[0] = (v6 + 0xFEFEFEFEFEFEFFLL) & ~(-1 << (8 * ((4 - (__clz(v6) >> 3)) & 7)));
      uint64_t v7 = MEMORY[0x21050F010](v21);
      uint64_t v9 = v8;
      unint64_t v10 = specialized Collection.dropFirst(_:)(1uLL, a1, a2, (uint64_t (*)(uint64_t, unint64_t, unint64_t, uint64_t, unint64_t))String.UnicodeScalarView.index(_:offsetBy:limitedBy:), MEMORY[0x263F8D2A0]);
      uint64_t v12 = v11;
      uint64_t v14 = v13;
      uint64_t v16 = v15;
      swift_bridgeObjectRelease();
      uint64_t v22 = v7;
      uint64_t v23 = v9;
      v21[0] = v10;
      v21[1] = v12;
      uint64_t v21[2] = v14;
      v21[3] = v16;
      v21[4] = specialized implicit closure #1 in Character.escapingConfusable.getter;
      v21[5] = 0;
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for LazySequence<FlattenSequence<LazyMapSequence<Substring.UnicodeScalarView, String>>>);
      lazy protocol witness table accessor for type [Any.Type] and conformance [A](&lazy protocol witness table cache variable for type LazySequence<FlattenSequence<LazyMapSequence<Substring.UnicodeScalarView, String>>> and conformance LazySequence<A>, &demangling cache variable for type metadata for LazySequence<FlattenSequence<LazyMapSequence<Substring.UnicodeScalarView, String>>>);
      String.append<A>(contentsOf:)();
      swift_bridgeObjectRelease();
      return v22;
    }
    __break(1u);
  }
  __break(1u);
  return result;
}

unint64_t specialized implicit closure #1 in String.escapingConfusableCharacters()@<X0>(unint64_t *a1@<X0>, unint64_t *a2@<X8>)
{
  unint64_t result = Character.escapingConfusable.getter(*a1, a1[1]);
  *a2 = result;
  a2[1] = v4;
  return result;
}

BOOL specialized Set.contains(_:)(unint64_t a1, uint64_t a2)
{
  if (!*(void *)(a2 + 16)) {
    return 0;
  }
  Hasher.init(_seed:)();
  Swift::UInt64 v4 = a1 >> 14;
  Hasher._combine(_:)(v4);
  Swift::Int v5 = Hasher._finalize()();
  uint64_t v6 = -1 << *(unsigned char *)(a2 + 32);
  unint64_t v7 = v5 & ~v6;
  if (((*(void *)(a2 + 56 + ((v7 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v7) & 1) == 0) {
    return 0;
  }
  uint64_t v8 = ~v6;
  do
  {
    uint64_t v9 = *(void *)(*(void *)(a2 + 48) + 8 * v7) >> 14;
    BOOL result = v9 == v4;
    if (v9 == v4) {
      break;
    }
    unint64_t v7 = (v7 + 1) & v8;
  }
  while (((*(void *)(a2 + 56 + ((v7 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v7) & 1) != 0);
  return result;
}

uint64_t specialized Set.contains(_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (!*(void *)(a3 + 16)) {
    return 0;
  }
  Hasher.init(_seed:)();
  MEMORY[0x21050EE80](v15, a1, a2);
  Swift::Int v6 = Hasher._finalize()();
  uint64_t v7 = -1 << *(unsigned char *)(a3 + 32);
  unint64_t v8 = v6 & ~v7;
  uint64_t v9 = a3 + 56;
  if (((*(void *)(a3 + 56 + ((v8 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v8) & 1) == 0) {
    return 0;
  }
  uint64_t v10 = ~v7;
  uint64_t v11 = *(void *)(a3 + 48);
  while (1)
  {
    uint64_t v12 = (void *)(v11 + 16 * v8);
    BOOL v13 = *v12 == a1 && v12[1] == a2;
    if (v13 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0) {
      break;
    }
    unint64_t v8 = (v8 + 1) & v10;
    if (((*(void *)(v9 + ((v8 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v8) & 1) == 0) {
      return 0;
    }
  }
  return 1;
}

uint64_t specialized implicit closure #1 in Character.escapingConfusable.getter@<X0>(int *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result = Unicode.Scalar.escapedString.getter(*a1);
  *a2 = result;
  a2[1] = v4;
  return result;
}

uint64_t AST.MatchingOption.Kind._patternString.getter()
{
  uint64_t v1 = type metadata accessor for AST.MatchingOption.Kind();
  uint64_t v2 = *(void *)(v1 - 8);
  MEMORY[0x270FA5388](v1);
  uint64_t v4 = (char *)&v8 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t))(v2 + 16))(v4, v0, v1);
  int v5 = (*(uint64_t (**)(char *, uint64_t))(v2 + 88))(v4, v1);
  if (v5 == *MEMORY[0x263F8F8D8]) {
    return 105;
  }
  int v7 = v5;
  if (v5 == *MEMORY[0x263F8F928]) {
    return 74;
  }
  if (v5 == *MEMORY[0x263F8F940]) {
    return 109;
  }
  if (v5 == *MEMORY[0x263F8F8E0]) {
    return 110;
  }
  if (v5 == *MEMORY[0x263F8F8A8]) {
    return 115;
  }
  if (v5 == *MEMORY[0x263F8F8F0]) {
    return 85;
  }
  if (v5 == *MEMORY[0x263F8F938]) {
    return 120;
  }
  if (v5 == *MEMORY[0x263F8F8C0]) {
    return 30840;
  }
  if (v5 == *MEMORY[0x263F8F910]) {
    return 119;
  }
  if (v5 == *MEMORY[0x263F8F8C8]) {
    return 68;
  }
  if (v5 == *MEMORY[0x263F8F8F8]) {
    return 80;
  }
  if (v5 == *MEMORY[0x263F8F8D0]) {
    return 83;
  }
  if (v5 == *MEMORY[0x263F8F8B0]) {
    return 87;
  }
  uint64_t result = 2103933817;
  if (v7 != *MEMORY[0x263F8F920])
  {
    if (v7 == *MEMORY[0x263F8F908])
    {
      return 2104982393;
    }
    else if (v7 == *MEMORY[0x263F8F930])
    {
      return 88;
    }
    else if (v7 == *MEMORY[0x263F8F918])
    {
      return 117;
    }
    else if (v7 == *MEMORY[0x263F8F8B8])
    {
      return 98;
    }
    else
    {
      uint64_t result = 0;
      if (v7 != *MEMORY[0x263F8F900] && v7 != *MEMORY[0x263F8F8E8])
      {
        uint64_t result = _assertionFailure(_:_:file:line:flags:)();
        __break(1u);
      }
    }
  }
  return result;
}

uint64_t MatchingOptions.Representation.apply(_:)(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for AST.MatchingOption.Kind();
  uint64_t v74 = *(void *)(v2 - 8);
  uint64_t v3 = MEMORY[0x270FA5388](v2);
  uint64_t v83 = (char *)&v57 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = MEMORY[0x270FA5388](v3);
  uint64_t v86 = (char *)&v57 - v6;
  uint64_t v7 = MEMORY[0x270FA5388](v5);
  unint64_t v85 = (char *)&v57 - v8;
  MEMORY[0x270FA5388](v7);
  uint64_t v10 = (char *)&v57 - v9;
  uint64_t v87 = type metadata accessor for AST.MatchingOption();
  uint64_t v11 = *(void *)(v87 - 8);
  uint64_t v12 = MEMORY[0x270FA5388](v87);
  uint64_t v82 = (char *)&v57 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v12);
  uint64_t v15 = (char *)&v57 - v14;
  uint64_t v16 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Source.Location?);
  MEMORY[0x270FA5388](v16 - 8);
  unsigned int v18 = (char *)&v57 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  AST.MatchingOptionSequence.caretLoc.getter();
  uint64_t v19 = type metadata accessor for Source.Location();
  int v20 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(*(void *)(v19 - 8) + 48))(v18, 1, v19);
  outlined destroy of (range: Range<String.Index>, value: Any?)?((uint64_t)v18, &demangling cache variable for type metadata for Source.Location?);
  if (v20 != 1) {
    *uint64_t v88 = 81984;
  }
  uint64_t v73 = a1;
  uint64_t v21 = AST.MatchingOptionSequence.adding.getter();
  uint64_t v84 = *(void *)(v21 + 16);
  if (v84)
  {
    unint64_t v22 = 0;
    LODWORD(v81) = *MEMORY[0x263F8F8D8];
    uint64_t v79 = v11 + 8;
    uint64_t v80 = v11 + 16;
    int v77 = *MEMORY[0x263F8F928];
    long long v78 = (void (**)(char *, char *, uint64_t))(v74 + 16);
    uint64_t v23 = (uint64_t (**)(char *, uint64_t))(v74 + 88);
    int v76 = *MEMORY[0x263F8F940];
    int v75 = *MEMORY[0x263F8F8E0];
    int v72 = *MEMORY[0x263F8F8A8];
    int v71 = *MEMORY[0x263F8F8F0];
    int v70 = *MEMORY[0x263F8F938];
    int v69 = *MEMORY[0x263F8F8C0];
    int v68 = *MEMORY[0x263F8F910];
    int v67 = *MEMORY[0x263F8F8C8];
    int v66 = *MEMORY[0x263F8F8F8];
    int v65 = *MEMORY[0x263F8F8D0];
    int v64 = *MEMORY[0x263F8F8B0];
    int v63 = *MEMORY[0x263F8F920];
    int v62 = *MEMORY[0x263F8F908];
    int v61 = *MEMORY[0x263F8F930];
    int v60 = *MEMORY[0x263F8F918];
    int v59 = *MEMORY[0x263F8F8B8];
    int v58 = *MEMORY[0x263F8F900];
    Swift::String v24 = (void (**)(char *, uint64_t))(v74 + 8);
    int v57 = *MEMORY[0x263F8F8E8];
    while (v22 < *(void *)(v21 + 16))
    {
      uint64_t v27 = v21;
      uint64_t v28 = v87;
      (*(void (**)(char *, unint64_t, uint64_t))(v11 + 16))(v15, v21+ ((*(unsigned __int8 *)(v11 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v11 + 80))+ *(void *)(v11 + 72) * v22, v87);
      AST.MatchingOption.kind.getter();
      (*(void (**)(char *, uint64_t))(v11 + 8))(v15, v28);
      BOOL v29 = v85;
      (*v78)(v85, v10, v2);
      int v30 = (*v23)(v29, v2);
      if (v30 == v81)
      {
        char v31 = 0;
      }
      else if (v30 == v77)
      {
        char v31 = 1;
      }
      else if (v30 == v76)
      {
        char v31 = 2;
      }
      else if (v30 == v75)
      {
        char v31 = 3;
      }
      else if (v30 == v72)
      {
        char v31 = 4;
      }
      else if (v30 == v71)
      {
        char v31 = 5;
      }
      else if (v30 == v70)
      {
        char v31 = 20;
      }
      else if (v30 == v69)
      {
        char v31 = 21;
      }
      else if (v30 == v68)
      {
        char v31 = 6;
      }
      else if (v30 == v67)
      {
        char v31 = 10;
      }
      else if (v30 == v66)
      {
        char v31 = 11;
      }
      else if (v30 == v65)
      {
        char v31 = 12;
      }
      else if (v30 == v64)
      {
        char v31 = 13;
      }
      else if (v30 == v63)
      {
        char v31 = 14;
      }
      else if (v30 == v62)
      {
        char v31 = 15;
      }
      else if (v30 == v61)
      {
        char v31 = 16;
      }
      else if (v30 == v60)
      {
        char v31 = 17;
      }
      else if (v30 == v59)
      {
        char v31 = 18;
      }
      else if (v30 == v58)
      {
        char v31 = 19;
      }
      else
      {
        if (v30 != v57) {
          goto LABEL_121;
        }
        char v31 = 9;
      }
      (*v24)(v10, v2);
      int v25 = 1 << v31;
      BOOL v32 = ((1 << v31) & 0x70000) != 0;
      BOOL v33 = (*v88 & 0x70000) != 0;
      BOOL v34 = v32 && v33;
      if (v32 && v33) {
        unsigned int v35 = *v88 & 0xFFF8FFFF;
      }
      else {
        unsigned int v35 = *v88;
      }
      BOOL v36 = ((1 << v31) & 0xC000) != 0;
      BOOL v37 = (v35 & 0xC000) != 0;
      BOOL v38 = v36 && v37;
      if (v36 && v37) {
        v35 &= 0xFFFF3FFF;
      }
      if ((v25 & 0x80020) != 0 && (v35 & 0x80020) != 0) {
        unsigned int v39 = v35 & 0xFFF7FFDF;
      }
      else {
        unsigned int v39 = v35;
      }
      BOOL v40 = (v25 & 0x80020) != 0 && (v35 & 0x80020) != 0 || (v39 & v25) == 0;
      if (v34 || v38 || (v25 & 0x80020) != 0 && (v35 & 0x80020) != 0 || (v39 & v25) == 0)
      {
        if ((v39 & v25) != 0) {
          int v25 = 0;
        }
        int v26 = v25 | v39;
        if (!v40) {
          int v26 = v35;
        }
        *uint64_t v88 = v26;
      }
      ++v22;
      uint64_t v21 = v27;
      if (v84 == v22) {
        goto LABEL_64;
      }
    }
    __break(1u);
  }
  else
  {
LABEL_64:
    swift_bridgeObjectRelease();
    uint64_t v41 = AST.MatchingOptionSequence.removing.getter();
    unint64_t v85 = *(char **)(v41 + 16);
    if (!v85) {
      return swift_bridgeObjectRelease();
    }
    unint64_t v42 = 0;
    LODWORD(v84) = *MEMORY[0x263F8F8D8];
    uint64_t v80 = v11 + 8;
    uint64_t v81 = v11 + 16;
    LODWORD(v79) = *MEMORY[0x263F8F928];
    char v43 = (void (**)(char *, char *, uint64_t))(v74 + 16);
    BOOL v44 = (uint64_t (**)(char *, uint64_t))(v74 + 88);
    LODWORD(v78) = *MEMORY[0x263F8F940];
    int v77 = *MEMORY[0x263F8F8E0];
    int v76 = *MEMORY[0x263F8F8A8];
    int v75 = *MEMORY[0x263F8F8F0];
    LODWORD(v73) = *MEMORY[0x263F8F938];
    int v72 = *MEMORY[0x263F8F8C0];
    int v71 = *MEMORY[0x263F8F910];
    int v70 = *MEMORY[0x263F8F8C8];
    int v69 = *MEMORY[0x263F8F8F8];
    int v68 = *MEMORY[0x263F8F8D0];
    int v67 = *MEMORY[0x263F8F8B0];
    int v66 = *MEMORY[0x263F8F920];
    int v65 = *MEMORY[0x263F8F908];
    int v64 = *MEMORY[0x263F8F930];
    int v63 = *MEMORY[0x263F8F918];
    int v62 = *MEMORY[0x263F8F8B8];
    int v61 = *MEMORY[0x263F8F900];
    uint64_t v45 = (void (**)(char *, uint64_t))(v74 + 8);
    LODWORD(v74) = *MEMORY[0x263F8F8E8];
    unint64_t v47 = v86;
    uint64_t v46 = v87;
    while (v42 < *(void *)(v41 + 16))
    {
      unint64_t v49 = v82;
      (*(void (**)(char *, unint64_t, uint64_t))(v11 + 16))(v82, v41+ ((*(unsigned __int8 *)(v11 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v11 + 80))+ *(void *)(v11 + 72) * v42, v46);
      AST.MatchingOption.kind.getter();
      (*(void (**)(char *, uint64_t))(v11 + 8))(v49, v46);
      char v50 = v83;
      (*v43)(v83, v47, v2);
      int v51 = (*v44)(v50, v2);
      if (v51 == v84)
      {
        char v52 = 0;
      }
      else if (v51 == v79)
      {
        char v52 = 1;
      }
      else if (v51 == v78)
      {
        char v52 = 2;
      }
      else if (v51 == v77)
      {
        char v52 = 3;
      }
      else if (v51 == v76)
      {
        char v52 = 4;
      }
      else if (v51 == v75)
      {
        char v52 = 5;
      }
      else if (v51 == v73)
      {
        char v52 = 20;
      }
      else if (v51 == v72)
      {
        char v52 = 21;
      }
      else if (v51 == v71)
      {
        char v52 = 6;
      }
      else if (v51 == v70)
      {
        char v52 = 10;
      }
      else if (v51 == v69)
      {
        char v52 = 11;
      }
      else if (v51 == v68)
      {
        char v52 = 12;
      }
      else if (v51 == v67)
      {
        char v52 = 13;
      }
      else if (v51 == v66)
      {
        char v52 = 14;
      }
      else if (v51 == v65)
      {
        char v52 = 15;
      }
      else if (v51 == v64)
      {
        char v52 = 16;
      }
      else if (v51 == v63)
      {
        char v52 = 17;
      }
      else if (v51 == v62)
      {
        char v52 = 18;
      }
      else if (v51 == v61)
      {
        char v52 = 19;
      }
      else
      {
        if (v51 != v74) {
          goto LABEL_121;
        }
        char v52 = 9;
      }
      (*v45)(v86, v2);
      int v53 = 1 << v52;
      if (((1 << v52) & 0x80020) != 0 && (*v88 & 0x80020) != 0) {
        unsigned int v54 = *v88 & 0xFFF7FFDF;
      }
      else {
        unsigned int v54 = *v88;
      }
      int v55 = v54 & v53;
      if (((1 << v52) & 0x80020) != 0 && (*v88 & 0x80020) != 0 || v55)
      {
        if (v55) {
          int v48 = ~v53;
        }
        else {
          int v48 = -1;
        }
        *uint64_t v88 = v54 & v48;
      }
      if (v85 == (char *)++v42) {
        return swift_bridgeObjectRelease();
      }
    }
  }
  __break(1u);
LABEL_121:
  uint64_t result = _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

BOOL protocol witness for static Equatable.== infix(_:_:) in conformance MatchingOptions.SemanticLevel(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return ((*a1 ^ *a2) & 1) == 0;
}

void protocol witness for Hashable.hash(into:) in conformance MatchingOptions.SemanticLevel()
{
  Hasher._combine(_:)(*v0);
}

_DWORD *protocol witness for OptionSet.init(rawValue:) in conformance MatchingOptions.Representation@<X0>(_DWORD *result@<X0>, _DWORD *a2@<X8>)
{
  *a2 = *result;
  return result;
}

_DWORD *protocol witness for RawRepresentable.init(rawValue:) in conformance MatchingOptions.Representation@<X0>(_DWORD *result@<X0>, uint64_t a2@<X8>)
{
  *(_DWORD *)a2 = *result;
  *(unsigned char *)(a2 + 4) = 0;
  return result;
}

void protocol witness for RawRepresentable.rawValue.getter in conformance MatchingOptions.Representation(_DWORD *a1@<X8>)
{
  *a1 = *v1;
}

void protocol witness for SetAlgebra.init() in conformance MatchingOptions.Representation(_DWORD *a1@<X8>)
{
  *a1 = 0;
}

_DWORD *protocol witness for SetAlgebra.union(_:) in conformance MatchingOptions.Representation@<X0>(_DWORD *result@<X0>, int *a2@<X8>)
{
  *a2 = *v2 | *result;
  return result;
}

_DWORD *protocol witness for SetAlgebra.intersection(_:) in conformance MatchingOptions.Representation@<X0>(_DWORD *result@<X0>, int *a2@<X8>)
{
  *a2 = *v2 & *result;
  return result;
}

_DWORD *protocol witness for SetAlgebra.symmetricDifference(_:) in conformance MatchingOptions.Representation@<X0>(_DWORD *result@<X0>, int *a2@<X8>)
{
  *a2 = *v2 ^ *result;
  return result;
}

BOOL protocol witness for SetAlgebra.insert(_:) in conformance MatchingOptions.Representation(_DWORD *a1, int *a2)
{
  int v3 = *a2;
  int v4 = *v2 & *a2;
  if (v4 != *a2) {
    *v2 |= v3;
  }
  *a1 = v3;
  return v4 != v3;
}

_DWORD *protocol witness for SetAlgebra.remove(_:) in conformance MatchingOptions.Representation@<X0>(_DWORD *result@<X0>, uint64_t a2@<X8>)
{
  int v3 = *v2 & *result;
  if (v3) {
    *v2 &= ~*result;
  }
  *(_DWORD *)a2 = v3;
  *(unsigned char *)(a2 + 4) = v3 == 0;
  return result;
}

int *protocol witness for SetAlgebra.update(with:) in conformance MatchingOptions.Representation@<X0>(int *result@<X0>, uint64_t a2@<X8>)
{
  int v3 = *result;
  int v4 = *v2;
  *v2 |= *result;
  int v5 = v4 & v3;
  *(_DWORD *)a2 = v5;
  *(unsigned char *)(a2 + 4) = v5 == 0;
  return result;
}

_DWORD *protocol witness for SetAlgebra.formUnion(_:) in conformance MatchingOptions.Representation(_DWORD *result)
{
  *v1 |= *result;
  return result;
}

_DWORD *protocol witness for SetAlgebra.formIntersection(_:) in conformance MatchingOptions.Representation(_DWORD *result)
{
  *v1 &= *result;
  return result;
}

_DWORD *protocol witness for SetAlgebra.formSymmetricDifference(_:) in conformance MatchingOptions.Representation(_DWORD *result)
{
  *v1 ^= *result;
  return result;
}

_DWORD *protocol witness for SetAlgebra.subtracting(_:) in conformance MatchingOptions.Representation@<X0>(_DWORD *result@<X0>, int *a2@<X8>)
{
  *a2 = *v2 & ~*result;
  return result;
}

BOOL protocol witness for SetAlgebra.isSubset(of:) in conformance MatchingOptions.Representation(_DWORD *a1)
{
  return (*v1 & ~*a1) == 0;
}

BOOL protocol witness for SetAlgebra.isDisjoint(with:) in conformance MatchingOptions.Representation(_DWORD *a1)
{
  return (*v1 & *a1) == 0;
}

BOOL protocol witness for SetAlgebra.isSuperset(of:) in conformance MatchingOptions.Representation(_DWORD *a1)
{
  return (*a1 & ~*v1) == 0;
}

BOOL protocol witness for SetAlgebra.isEmpty.getter in conformance MatchingOptions.Representation()
{
  return *v0 == 0;
}

_DWORD *protocol witness for SetAlgebra.subtract(_:) in conformance MatchingOptions.Representation(_DWORD *result)
{
  *v1 &= ~*result;
  return result;
}

BOOL protocol witness for static Equatable.== infix(_:_:) in conformance MatchingOptions.Representation(_DWORD *a1, _DWORD *a2)
{
  return *a1 == *a2;
}

uint64_t protocol witness for ExpressibleByArrayLiteral.init(arrayLiteral:) in conformance MatchingOptions.Representation@<X0>(uint64_t a1@<X0>, _DWORD *a2@<X8>)
{
  int v3 = specialized SetAlgebra<>.init(arrayLiteral:)(a1);
  uint64_t result = swift_bridgeObjectRelease();
  *a2 = v3;
  return result;
}

uint64_t renderAsBuilderDSL(ast:maxTopDownLevels:minBottomUpLevels:)(uint64_t a1)
{
  uint64_t v12 = a1;
  uint64_t v1 = type metadata accessor for AST();
  uint64_t v2 = *(void *)(v1 - 8);
  MEMORY[0x270FA5388](v1);
  int v4 = (char *)&v11 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = type metadata accessor for PrettyPrinter();
  uint64_t v6 = *(void *)(v5 - 8);
  MEMORY[0x270FA5388](v5);
  uint64_t v8 = (char *)&v11 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  PrettyPrinter.init(maxTopDownLevels:minBottomUpLevels:)();
  outlined init with copy of Any(v12, (uint64_t)v13);
  swift_dynamicCast();
  PrettyPrinter.printAsPattern(_:)();
  (*(void (**)(char *, uint64_t))(v2 + 8))(v4, v1);
  uint64_t countAndFlagsBits = PrettyPrinter.finish()()._countAndFlagsBits;
  (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
  return countAndFlagsBits;
}

uint64_t PrettyPrinter.printAsPattern(_:)()
{
  uint64_t v0 = type metadata accessor for AST.Node();
  uint64_t v1 = *(void *)(v0 - 8);
  MEMORY[0x270FA5388](v0);
  uint64_t v3 = (char *)&v27 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  AST.root.getter();
  unint64_t v4 = convert #1 () in AST.Node.dslTreeNode.getter((uint64_t)v3);
  if (((v4 >> 59) & 0x1E | (v4 >> 2) & 1) == 0xC)
  {
    (*(void (**)(char *, uint64_t))(v1 + 8))(v3, v0);
  }
  else
  {
    uint64_t v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (DSLTree.Node, DSLTree._AST.ASTNode));
    uint64_t v9 = swift_allocBox();
    uint64_t v11 = (char *)v10 + *(int *)(v8 + 48);
    *uint64_t v10 = v4;
    (*(void (**)(char *, char *, uint64_t))(v1 + 32))(v11, v3, v0);
    unint64_t v4 = v9 | 0x6000000000000000;
  }
  unint64_t v27 = v4;
  uint64_t v12 = DSLTree.Node.getNamedCaptures()(v4, v5, v6, v7);
  uint64_t v13 = v12;
  uint64_t v14 = *((void *)v12 + 2);
  if (v14)
  {
    unint64_t v15 = 0;
    uint64_t v16 = (void **)(v12 + 40);
    while (v15 < *((void *)v13 + 2))
    {
      uint64_t v17 = (uint64_t)*(v16 - 1);
      unsigned int v18 = *v16;
      v28._uint64_t countAndFlagsBits = 0;
      v28._uint64_t object = (void *)0xE000000000000000;
      swift_bridgeObjectRetain();
      _StringGuts.grow(_:)(34);
      swift_bridgeObjectRelease();
      ++v15;
      v28._uint64_t countAndFlagsBits = 544499052;
      v28._uint64_t object = (void *)0xE400000000000000;
      v19._uint64_t countAndFlagsBits = v17;
      v19._uint64_t object = v18;
      String.append(_:)(v19);
      swift_bridgeObjectRelease();
      v20._uint64_t countAndFlagsBits = 0xD00000000000001CLL;
      v20._uint64_t object = (void *)0x8000000209FB6AE0;
      String.append(_:)(v20);
      PrettyPrinter.print(_:)(v28);
      swift_bridgeObjectRelease();
      v16 += 2;
      if (v14 == v15) {
        goto LABEL_8;
      }
    }
    __break(1u);
    uint64_t result = swift_unexpectedError();
    __break(1u);
  }
  else
  {
LABEL_8:
    uint64_t v21 = swift_bridgeObjectRelease();
    MEMORY[0x270FA5388](v21);
    *(&v27 - 2) = v27;
    PrettyPrinter.printBlock(_:startDelimiter:endDelimiter:_:)();
    swift_release();
    while (1)
    {
      uint64_t v22 = *(void *)(PrettyPrinter.inlineMatchingOptions.getter() + 16);
      uint64_t result = swift_bridgeObjectRelease();
      if (!v22) {
        break;
      }
      unint64_t v24 = (unint64_t)PrettyPrinter.popMatchingOptions()();
      *(&v27 - 2) = MEMORY[0x270FA5388](v24);
      *((unsigned char *)&v27 - 8) = v25 & 1;
      PrettyPrinter.printIndented(_:)();
      swift_bridgeObjectRelease();
      v26._uint64_t countAndFlagsBits = 125;
      v26._uint64_t object = (void *)0xE100000000000000;
      PrettyPrinter.print(_:)(v26);
    }
  }
  return result;
}

uint64_t PrettyPrinter.printBackoff(_:)(unint64_t a1)
{
  uint64_t v3 = type metadata accessor for Diagnostics();
  MEMORY[0x270FA5388](v3 - 8);
  uint64_t v5 = (char *)v33 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AST.GlobalMatchingOptionSequence?);
  MEMORY[0x270FA5388](v6 - 8);
  uint64_t v8 = (char *)v33 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v36 = type metadata accessor for AST.Node();
  uint64_t v9 = *(void *)(v36 - 8);
  MEMORY[0x270FA5388](v36);
  uint64_t v11 = (char *)v33 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = type metadata accessor for AST();
  uint64_t v13 = *(void *)(v12 - 8);
  MEMORY[0x270FA5388](v12);
  unsigned int v35 = (char *)v33 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v15 = type metadata accessor for DSLTree._AST.ASTNode(0);
  MEMORY[0x270FA5388](v15 - 8);
  uint64_t v17 = (char *)v33 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v18 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AST.Node?);
  MEMORY[0x270FA5388](v18 - 8);
  Swift::String v20 = (char *)v33 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (((a1 >> 59) & 0x1E | (a1 >> 2) & 1) == 0xC)
  {
    uint64_t v34 = v12;
    uint64_t v21 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (DSLTree.Node, DSLTree._AST.ASTNode));
    v33[2] = v5;
    v33[0] = v8;
    uint64_t v22 = v21;
    uint64_t v23 = swift_projectBox();
    outlined init with copy of MEProgram(v23 + *(int *)(v22 + 48), (uint64_t)v17, type metadata accessor for DSLTree._AST.ASTNode);
    v33[1] = v1;
    unint64_t v24 = v11;
    uint64_t v25 = v13;
    Swift::String v26 = *(void (**)(char *, char *, uint64_t))(v9 + 32);
    uint64_t v27 = v36;
    v26(v20, v17, v36);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v9 + 56))(v20, 0, 1, v27);
    outlined destroy of (range: Range<String.Index>, value: Any?)?((uint64_t)v20, &demangling cache variable for type metadata for AST.Node?);
    uint64_t v28 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (DSLTree.Node, DSLTree._AST.ASTNode));
    uint64_t v29 = swift_projectBox();
    outlined init with copy of MEProgram(v29 + *(int *)(v28 + 48), (uint64_t)v17, type metadata accessor for DSLTree._AST.ASTNode);
    v26(v24, v17, v27);
    uint64_t v30 = type metadata accessor for AST.GlobalMatchingOptionSequence();
    (*(void (**)(void, uint64_t, uint64_t, uint64_t))(*(void *)(v30 - 8) + 56))(v33[0], 1, 1, v30);
    Diagnostics.init()();
    char v31 = v35;
    AST.init(_:globalOptions:diags:)();
    PrettyPrinter.printAsCanonical(_:delimiters:terminateLine:)();
    return (*(uint64_t (**)(char *, uint64_t))(v25 + 8))(v31, v34);
  }
  else
  {
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v9 + 56))(v20, 1, 1, v36);
    uint64_t result = outlined destroy of (range: Range<String.Index>, value: Any?)?((uint64_t)v20, &demangling cache variable for type metadata for AST.Node?);
    __break(1u);
  }
  return result;
}

char *DSLTree.Node.getNamedCaptures()(unint64_t a1, uint64_t a2, uint64_t a3, char *a4)
{
  uint64_t v23 = MEMORY[0x263F8EE78];
  switch((a1 >> 59) & 0x1E | (a1 >> 2) & 1)
  {
    case 1uLL:
      uint64_t v7 = *(void *)((a1 & 0xFFFFFFFFFFFFFFBLL) + 0x10);
      uint64_t v8 = *(void *)(v7 + 16);
      if (v8)
      {
        unint64_t v9 = 0;
        uint64_t v10 = (char *)MEMORY[0x263F8EE78];
        while (1)
        {
          unint64_t v11 = *(void *)(v7 + 16);
          if (v9 >= v11)
          {
            __break(1u);
LABEL_30:
            __break(1u);
LABEL_31:
            __break(1u);
LABEL_32:
            __break(1u);
LABEL_33:
            __break(1u);
            goto LABEL_34;
          }
          uint64_t v12 = *(void *)(v7 + 32 + 8 * v9);
          swift_retain();
          unint64_t v6 = DSLTree.Node.getNamedCaptures()(v12);
          swift_release();
          int64_t v5 = *(void *)(v6 + 16);
          int64_t v13 = *((void *)v10 + 2);
          int64_t v4 = v13 + v5;
          if (__OFADD__(v13, v5)) {
            goto LABEL_31;
          }
          char isUniquelyReferenced_nonNull_native = (char *)swift_isUniquelyReferenced_nonNull_native();
          if (isUniquelyReferenced_nonNull_native && v4 <= *((void *)v10 + 3) >> 1)
          {
            if (!*(void *)(v6 + 16)) {
              goto LABEL_4;
            }
          }
          else
          {
            if (v13 <= v4) {
              int64_t v15 = v13 + v5;
            }
            else {
              int64_t v15 = v13;
            }
            uint64_t v10 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(isUniquelyReferenced_nonNull_native, v15, 1, v10);
            if (!*(void *)(v6 + 16))
            {
LABEL_4:
              swift_bridgeObjectRelease();
              if (v5) {
                goto LABEL_30;
              }
              goto LABEL_5;
            }
          }
          unint64_t v11 = *((void *)v10 + 2);
          if ((uint64_t)((*((void *)v10 + 3) >> 1) - v11) < v5) {
            goto LABEL_32;
          }
          swift_arrayInitWithCopy();
          swift_bridgeObjectRelease();
          if (v5)
          {
            uint64_t v16 = *((void *)v10 + 2);
            BOOL v17 = __OFADD__(v16, v5);
            unint64_t v11 = v16 + v5;
            if (v17) {
              goto LABEL_33;
            }
            *((void *)v10 + 2) = v11;
          }
LABEL_5:
          if (v8 == ++v9) {
            return v10;
          }
        }
      }
      return (char *)MEMORY[0x263F8EE78];
    case 2uLL:
      uint64_t v10 = *(char **)((a1 & 0xFFFFFFFFFFFFFFBLL) + 0x18);
      if (v10)
      {
        int64_t v5 = *(void *)((a1 & 0xFFFFFFFFFFFFFFBLL) + 0x10);
        swift_bridgeObjectRetain();
        a4 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, 1, 1, MEMORY[0x263F8EE78]);
        unint64_t v6 = *((void *)a4 + 2);
        unint64_t v11 = *((void *)a4 + 3);
        int64_t v4 = v6 + 1;
        if (v6 >= v11 >> 1) {
LABEL_34:
        }
          a4 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v11 > 1), v4, 1, a4);
        *((void *)a4 + 2) = v4;
        uint64_t v18 = &a4[16 * v6];
        *((void *)v18 + 4) = v5;
        *((void *)v18 + 5) = v10;
        return a4;
      }
      return (char *)v23;
    case 6uLL:
      uint64_t v19 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (DSLTree._AST.QuantificationAmount, DSLTree.QuantificationKind, DSLTree.Node));
      uint64_t v20 = *(void *)(swift_projectBox() + *(int *)(v19 + 64));
      goto LABEL_25;
    case 0xCuLL:
      uint64_t v20 = *(void *)swift_projectBox();
LABEL_25:
      uint64_t v21 = DSLTree.Node.getNamedCaptures()(v20);
      specialized Array.append<A>(contentsOf:)(v21);
      return (char *)v23;
    default:
      return (char *)v23;
  }
}

void PrettyPrinter.printAsPattern(convertedFromAST:isTopLevel:)(unint64_t a1, int a2)
{
  LODWORD(v182) = a2;
  uint64_t v160 = type metadata accessor for AST.Atom.CharacterProperty();
  uint64_t v159 = *(void *)(v160 - 8);
  MEMORY[0x270FA5388](v160);
  unint64_t v158 = (char *)&v155 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v165 = type metadata accessor for AST.Atom.Kind();
  uint64_t v164 = *(void *)(v165 - 8);
  MEMORY[0x270FA5388](v165);
  unsigned int v163 = (char *)&v155 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = type metadata accessor for DSLTree._AST.Atom(0);
  MEMORY[0x270FA5388](v6 - 8);
  uint64_t v166 = (uint64_t)&v155 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v169 = type metadata accessor for DSLTree.Atom(0);
  uint64_t v8 = MEMORY[0x270FA5388](v169);
  uint64_t v170 = (uint64_t)&v155 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = MEMORY[0x270FA5388](v8);
  uint64_t v172 = (uint64_t)&v155 - v11;
  uint64_t v12 = MEMORY[0x270FA5388](v10);
  uint64_t v156 = (uint64_t)&v155 - v13;
  MEMORY[0x270FA5388](v12);
  uint64_t v157 = (uint64_t)&v155 - v14;
  uint64_t v15 = type metadata accessor for AST.Quantification.Amount();
  uint64_t v178 = *(void *)(v15 - 8);
  uint64_t v179 = v15;
  MEMORY[0x270FA5388](v15);
  uint64_t v177 = (char *)&v155 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v180 = type metadata accessor for AST.Quantification.Kind();
  uint64_t v175 = *(void *)(v180 - 8);
  uint64_t v17 = MEMORY[0x270FA5388](v180);
  unint64_t v167 = (char *)&v155 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v19 = MEMORY[0x270FA5388](v17);
  unsigned __int8 v176 = (char *)&v155 - v20;
  uint64_t v21 = MEMORY[0x270FA5388](v19);
  unint64_t v174 = (char *)&v155 - v22;
  uint64_t v23 = MEMORY[0x270FA5388](v21);
  unint64_t v173 = (char *)&v155 - v24;
  MEMORY[0x270FA5388](v23);
  int v162 = (char *)&v155 - v25;
  uint64_t v26 = type metadata accessor for DSLTree._AST.QuantificationKind(0);
  MEMORY[0x270FA5388](v26 - 8);
  uint64_t v161 = (uint64_t)&v155 - ((v27 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v28 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AST.Quantification.Kind?);
  MEMORY[0x270FA5388](v28 - 8);
  uint64_t v171 = (char *)&v155 - ((v29 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v30 = type metadata accessor for DSLTree.QuantificationKind(0);
  uint64_t v31 = MEMORY[0x270FA5388](v30);
  BOOL v33 = (char *)&v155 - ((v32 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v31);
  unsigned int v35 = (char *)&v155 - v34;
  uint64_t v36 = type metadata accessor for DSLTree._AST.QuantificationAmount(0);
  MEMORY[0x270FA5388](v36 - 8);
  uint64_t v181 = (uint64_t)&v155 - ((v37 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v38 = type metadata accessor for AST.Group.Kind();
  uint64_t v168 = *(void *)(v38 - 8);
  MEMORY[0x270FA5388](v38);
  BOOL v40 = (char *)&v155 - ((v39 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v41 = type metadata accessor for DSLTree._AST.GroupKind(0);
  MEMORY[0x270FA5388](v41 - 8);
  char v43 = (char *)&v155 - ((v42 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v185 = a1;
  uint64_t v44 = PrettyPrinter.maxTopDownLevels.getter();
  if ((v45 & 1) == 0 && PrettyPrinter.depth.getter() >= v44
    || (uint64_t v46 = PrettyPrinter.minBottomUpLevels.getter(), (v48 & 1) == 0)
    && (uint64_t v49 = v46,
        lazy protocol witness table accessor for type DSLTree._Tree and conformance DSLTree._Tree(),
        uint64_t v46 = _TreeNode.height.getter(),
        v49 >= v46))
  {
    PrettyPrinter.printBackoff(_:)(a1);
    return;
  }
  uint64_t v183 = v2;
  switch((a1 >> 59) & 0x1E | (a1 >> 2) & 1)
  {
    case 1uLL:
      PrettyPrinter.printConcatenationAsPattern(_:isTopLevel:)(*(Swift::OpaquePointer *)((a1 & 0xFFFFFFFFFFFFFFBLL) + 0x10), v182 & 1);
      return;
    case 2uLL:
      uint64_t v71 = 0x65727574706143;
      uint64_t v73 = *(void *)((a1 & 0xFFFFFFFFFFFFFFBLL) + 0x10);
      uint64_t v72 = *(void *)((a1 & 0xFFFFFFFFFFFFFFBLL) + 0x18);
      uint64_t v185 = 0x65727574706143;
      unint64_t v186 = 0xE700000000000000;
      if (v72)
      {
        v184._uint64_t countAndFlagsBits = 0x203A736128;
        v184._uint64_t object = (void *)0xE500000000000000;
        uint64_t v74 = v73;
        String.append(_:)(*(Swift::String *)(&v72 - 1));
        v75._uint64_t countAndFlagsBits = 41;
        v75._uint64_t object = (void *)0xE100000000000000;
        String.append(_:)(v75);
        String.append(_:)(v184);
        swift_bridgeObjectRelease();
        uint64_t v71 = v185;
      }
      MEMORY[0x270FA5388](v71);
      PrettyPrinter.printBlock(_:startDelimiter:endDelimiter:_:)();
      swift_bridgeObjectRelease();
      return;
    case 3uLL:
      uint64_t v53 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (DSLTree._AST.GroupKind, DSLTree.Node));
      uint64_t v54 = swift_projectBox();
      uint64_t v55 = *(void *)(v54 + *(int *)(v53 + 48));
      outlined init with copy of MEProgram(v54, (uint64_t)v43, type metadata accessor for DSLTree._AST.GroupKind);
      uint64_t v56 = v168;
      (*(void (**)(char *, char *, uint64_t))(v168 + 32))(v40, v43, v38);
      uint64_t v46 = (*(uint64_t (**)(char *, uint64_t))(v56 + 88))(v40, v38);
      if (v46 == *MEMORY[0x263F8FCA0]
        || v46 == *MEMORY[0x263F8FCD0]
        || v46 == *MEMORY[0x263F8FC98])
      {
        goto LABEL_11;
      }
      PrettyPrinter.printAsPattern(convertedFromAST:isTopLevel:)(v55, 0);
      (*(void (**)(char *, uint64_t))(v56 + 8))(v40, v38);
      return;
    case 4uLL:
      uint64_t v57 = *(void *)((a1 & 0xFFFFFFFFFFFFFFBLL) + 0x10);
      goto LABEL_25;
    case 5uLL:
      unint64_t v50 = 0xD000000000000017;
      char v52 = "/* TODO: conditional */";
      goto LABEL_28;
    case 6uLL:
      uint64_t v76 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (DSLTree._AST.QuantificationAmount, DSLTree.QuantificationKind, DSLTree.Node));
      uint64_t v77 = swift_projectBox();
      uint64_t v78 = v77 + *(int *)(v76 + 48);
      unint64_t v182 = *(void *)(v77 + *(int *)(v76 + 64));
      outlined init with copy of MEProgram(v77, v181, type metadata accessor for DSLTree._AST.QuantificationAmount);
      outlined init with copy of MEProgram(v78, (uint64_t)v35, type metadata accessor for DSLTree.QuantificationKind);
      uint64_t v79 = AST.Quantification.Amount._patternBase.getter();
      uint64_t v81 = v80;
      outlined init with copy of MEProgram((uint64_t)v35, (uint64_t)v33, type metadata accessor for DSLTree.QuantificationKind);
      if (swift_getEnumCaseMultiPayload() >= 2)
      {
        uint64_t v86 = 1;
        uint64_t v85 = v180;
        uint64_t v83 = v175;
        uint64_t v84 = (uint64_t)v171;
      }
      else
      {
        uint64_t v82 = v161;
        outlined init with take of DSLTree.QuantificationKind((uint64_t)v33, v161, type metadata accessor for DSLTree._AST.QuantificationKind);
        uint64_t v83 = v175;
        uint64_t v84 = (uint64_t)v171;
        uint64_t v85 = v180;
        (*(void (**)(char *, uint64_t, uint64_t))(v175 + 32))(v171, v82, v180);
        uint64_t v86 = 0;
      }
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v83 + 56))(v84, v86, 1, v85);
      uint64_t v90 = swift_allocObject();
      outlined destroy of MEProgram((uint64_t)v35, type metadata accessor for DSLTree.QuantificationKind);
      int v91 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v83 + 48))(v84, 1, v85);
      uint64_t v172 = v81;
      uint64_t v170 = v79;
      if (v91 == 1)
      {
        outlined destroy of (range: Range<String.Index>, value: Any?)?(v84, &demangling cache variable for type metadata for AST.Quantification.Kind?);
        *(void *)(v90 + 16) = 0;
        *(void *)(v90 + 24) = 0xE000000000000000;
        uint64_t v92 = *MEMORY[0x263F8F950];
        uint64_t v93 = v183;
        uint64_t v94 = v90;
      }
      else
      {
        char v95 = v162;
        (*(void (**)(char *, uint64_t, uint64_t))(v83 + 16))(v162, v84, v85);
        int v96 = (*(uint64_t (**)(char *, uint64_t))(v83 + 88))(v95, v85);
        uint64_t v92 = *MEMORY[0x263F8F950];
        uint64_t v93 = v183;
        uint64_t v94 = v90;
        if (v96 == v92)
        {
          unint64_t v97 = 0xE600000000000000;
          uint64_t v98 = 0x72656761652ELL;
        }
        else if (v96 == *MEMORY[0x263F8F958])
        {
          unint64_t v97 = 0xEA0000000000746ELL;
          uint64_t v98 = 0x617463756C65722ELL;
        }
        else
        {
          if (v96 != *MEMORY[0x263F8F948]) {
            goto LABEL_95;
          }
          unint64_t v97 = 0xEB00000000657669;
          uint64_t v98 = 0x73736573736F702ELL;
        }
        (*(void (**)(uint64_t, uint64_t))(v83 + 8))(v84, v85);
        *(void *)(v94 + 16) = v98;
        *(void *)(v94 + 24) = v97;
      }
      int v113 = v173;
      uint64_t v114 = v93;
      PrettyPrinter.quantificationBehavior.getter();
      unsigned int v115 = v174;
      (*(void (**)(char *, uint64_t, uint64_t))(v83 + 104))(v174, v92, v85);
      lazy protocol witness table accessor for type AST.Quantification.Kind and conformance AST.Quantification.Kind(&lazy protocol witness table cache variable for type AST.Quantification.Kind and conformance AST.Quantification.Kind, MEMORY[0x263F8F960]);
      char v116 = dispatch thunk of static Equatable.== infix(_:_:)();
      unint64_t v117 = *(void (**)(char *, uint64_t))(v83 + 8);
      v117(v115, v85);
      v117(v113, v85);
      if (v116)
      {
LABEL_69:
        uint64_t v123 = v170;
        uint64_t v124 = v172;
        uint64_t v185 = v170;
        unint64_t v186 = v172;
        swift_bridgeObjectRetain();
        v125._uint64_t countAndFlagsBits = 40;
        v125._uint64_t object = (void *)0xE100000000000000;
        String.append(_:)(v125);
        uint64_t v127 = *(void *)(v94 + 16);
        unsigned __int8 v126 = *(void **)(v94 + 24);
        swift_bridgeObjectRetain();
        v128._uint64_t countAndFlagsBits = v127;
        v128._uint64_t object = v126;
        String.append(_:)(v128);
        uint64_t v129 = (Swift::String *)swift_allocObject();
        v130._uint64_t countAndFlagsBits = 41;
        v130._uint64_t object = (void *)0xE100000000000000;
        String.append(_:)(v130);
        uint64_t v131 = (void *)v186;
        v129[1]._uint64_t countAndFlagsBits = v185;
        v129[1]._uint64_t object = v131;
        if (v127 == 0x72656761652ELL && v126 == (void *)0xE600000000000000)
        {
          swift_bridgeObjectRelease();
        }
        else
        {
          char v132 = _stringCompareWithSmolCheck(_:_:expecting:)();
          swift_bridgeObjectRelease();
          if ((v132 & 1) == 0)
          {
            swift_bridgeObjectRelease();
            uint64_t v133 = v178;
            uint64_t v135 = v179;
            unint64_t v134 = v177;
            goto LABEL_75;
          }
        }
        swift_bridgeObjectRelease();
        unint64_t v134 = v177;
        uint64_t v133 = v178;
        v129[1]._uint64_t countAndFlagsBits = v123;
        v129[1]._uint64_t object = (void *)v124;
        uint64_t v135 = v179;
LABEL_75:
        (*(void (**)(char *, uint64_t, uint64_t))(v133 + 32))(v134, v181, v135);
        uint64_t v136 = (*(uint64_t (**)(char *, uint64_t))(v133 + 88))(v134, v135);
        if (v136 != *MEMORY[0x263F8F978]
          && v136 != *MEMORY[0x263F8F9A0]
          && v136 != *MEMORY[0x263F8F9A8])
        {
          uint64_t v136 = (*(uint64_t (**)(char *, uint64_t))(v133 + 8))(v134, v135);
LABEL_79:
          MEMORY[0x270FA5388](v136);
          swift_bridgeObjectRetain();
          PrettyPrinter.printBlock(_:startDelimiter:endDelimiter:_:)();
          swift_release();
          swift_release();
          swift_bridgeObjectRelease();
          return;
        }
        int v137 = (v182 >> 59) & 0x1E | (v182 >> 2) & 1;
        switch(v137)
        {
          case 7:
            unint64_t v145 = v182;
            break;
          case 12:
            uint64_t v136 = swift_projectBox();
            unint64_t v145 = *(void *)v136;
            int v146 = (*(void *)v136 >> 59) & 0x1E | (*(void *)v136 >> 2) & 1;
            if (v146 != 7)
            {
              if (v146 != 8) {
                goto LABEL_79;
              }
              uint64_t v147 = swift_projectBox();
              uint64_t v148 = v156;
              outlined init with copy of MEProgram(v147, v156, type metadata accessor for DSLTree.Atom);
              uint64_t v140 = DSLTree.Atom._patternBase(_:)(v114);
              unint64_t v142 = v149;
              char v151 = v150;
              uint64_t v136 = outlined destroy of MEProgram(v148, type metadata accessor for DSLTree.Atom);
              if (!v142) {
                goto LABEL_79;
              }
              if ((v151 & 1) == 0)
              {
LABEL_86:
                uint64_t v136 = swift_bridgeObjectRelease();
                goto LABEL_79;
              }
LABEL_91:
              printAtom #1 (_:) in PrettyPrinter.printAsPattern(convertedFromAST:isTopLevel:)(v140, v142, v114, v94, v129);
              swift_release();
              swift_release();
              swift_bridgeObjectRelease();
              return;
            }
            break;
          case 8:
            uint64_t v138 = swift_projectBox();
            uint64_t v139 = v157;
            outlined init with copy of MEProgram(v138, v157, type metadata accessor for DSLTree.Atom);
            uint64_t v140 = DSLTree.Atom._patternBase(_:)(v114);
            unint64_t v142 = v141;
            char v144 = v143;
            uint64_t v136 = outlined destroy of MEProgram(v139, type metadata accessor for DSLTree.Atom);
            if (!v142) {
              goto LABEL_79;
            }
            if ((v144 & 1) == 0) {
              goto LABEL_86;
            }
            goto LABEL_91;
          default:
            goto LABEL_79;
        }
        uint64_t v152 = v145 & 0xFFFFFFFFFFFFFFBLL;
        uint64_t v153 = *(void *)(v152 + 16);
        char v154 = *(unsigned char *)(v152 + 24);
        uint64_t v185 = v153;
        LOBYTE(v186) = v154;
        uint64_t v136 = DSLTree.CustomCharacterClass.isSimplePrint.getter();
        if (v136)
        {
          uint64_t v185 = v153;
          LOBYTE(v186) = v154;
          printSimpleCCC #1 (_:) in PrettyPrinter.printAsPattern(convertedFromAST:isTopLevel:)((uint64_t)&v185, v114, v94, (uint64_t)v129);
          swift_release();
          swift_release();
          return;
        }
        goto LABEL_79;
      }
      unint64_t v118 = v176;
      PrettyPrinter.quantificationBehavior.getter();
      uint64_t v119 = v167;
      (*(void (**)(char *, char *, uint64_t))(v83 + 16))(v167, v118, v85);
      int v120 = (*(uint64_t (**)(char *, uint64_t))(v83 + 88))(v119, v85);
      if (v120 == v92)
      {
        unint64_t v121 = 0xE600000000000000;
        uint64_t v122 = 0x72656761652ELL;
LABEL_68:
        v117(v176, v180);
        swift_bridgeObjectRelease();
        *(void *)(v94 + 16) = v122;
        *(void *)(v94 + 24) = v121;
        goto LABEL_69;
      }
      if (v120 == *MEMORY[0x263F8F958])
      {
        unint64_t v121 = 0xEA0000000000746ELL;
        uint64_t v122 = 0x617463756C65722ELL;
        goto LABEL_68;
      }
      if (v120 == *MEMORY[0x263F8F948])
      {
        unint64_t v121 = 0xEB00000000657669;
        uint64_t v122 = 0x73736573736F702ELL;
        goto LABEL_68;
      }
LABEL_95:
      _assertionFailure(_:_:file:line:flags:)();
      __break(1u);
      JUMPOUT(0x209F63BFCLL);
    case 7uLL:
      char v89 = *(unsigned char *)((a1 & 0xFFFFFFFFFFFFFFBLL) + 0x18);
      uint64_t v185 = *(void *)((a1 & 0xFFFFFFFFFFFFFFBLL) + 0x10);
      LOBYTE(v186) = v89;
      v187.members._unint64_t rawValue = &v185;
      v187.isInverted = 1;
      PrettyPrinter.printAsPattern(_:wrap:terminateLine:)(v187, 1, v47);
      return;
    case 8uLL:
      uint64_t v58 = swift_projectBox();
      uint64_t v59 = v172;
      outlined init with copy of MEProgram(v58, v172, type metadata accessor for DSLTree.Atom);
      uint64_t v60 = v170;
      outlined init with copy of MEProgram(v59, v170, type metadata accessor for DSLTree.Atom);
      if (swift_getEnumCaseMultiPayload() != 7)
      {
        outlined destroy of MEProgram(v60, type metadata accessor for DSLTree.Atom);
        uint64_t v70 = v183;
        goto LABEL_47;
      }
      uint64_t v61 = v166;
      outlined init with take of DSLTree.QuantificationKind(v60, v166, type metadata accessor for DSLTree._AST.Atom);
      int v62 = v163;
      AST.Atom.kind.getter();
      uint64_t v63 = v164;
      uint64_t v64 = v165;
      int v65 = (*(uint64_t (**)(char *, uint64_t))(v164 + 88))(v62, v165);
      if (v65 == *MEMORY[0x263F8FBE8])
      {
        (*(void (**)(char *, uint64_t))(v63 + 96))(v62, v64);
        uint64_t v66 = v159;
        int v67 = v158;
        uint64_t v68 = v160;
        (*(void (**)(char *, char *, uint64_t))(v159 + 32))(v158, v62, v160);
        char v69 = AST.Atom.CharacterProperty.isUnprintableProperty.getter();
        (*(void (**)(char *, uint64_t))(v66 + 8))(v67, v68);
        uint64_t v70 = v183;
        if (v69) {
          goto LABEL_57;
        }
        goto LABEL_46;
      }
      int v99 = v65;
      uint64_t v70 = v183;
      if (v65 == *MEMORY[0x263F8FB98] || v65 == *MEMORY[0x263F8FB78] || v65 == *MEMORY[0x263F8FBA0])
      {
        (*(void (**)(char *, uint64_t))(v63 + 8))(v62, v64);
        goto LABEL_57;
      }
      int v100 = *MEMORY[0x263F8FB88];
      (*(void (**)(char *, uint64_t))(v63 + 8))(v62, v64);
      if (v99 == v100)
      {
LABEL_57:
        outlined destroy of MEProgram(v59, type metadata accessor for DSLTree.Atom);
        uint64_t v185 = 12067;
        unint64_t v186 = 0xE200000000000000;
        uint64_t v108 = AST.Atom._regexBase.getter();
        uint64_t v110 = v109;
        outlined destroy of MEProgram(v61, type metadata accessor for DSLTree._AST.Atom);
        v111._uint64_t countAndFlagsBits = v108;
        v111._uint64_t object = v110;
        String.append(_:)(v111);
        swift_bridgeObjectRelease();
        v112._uint64_t countAndFlagsBits = 9007;
        v112._uint64_t object = (void *)0xE200000000000000;
        String.append(_:)(v112);
        uint64_t v87 = v185;
        unint64_t v88 = v186;
        goto LABEL_54;
      }
LABEL_46:
      outlined destroy of MEProgram(v61, type metadata accessor for DSLTree._AST.Atom);
LABEL_47:
      uint64_t v101 = DSLTree.Atom._patternBase(_:)(v70);
      uint64_t v103 = v102;
      char v105 = v104;
      outlined destroy of MEProgram(v59, type metadata accessor for DSLTree.Atom);
      if (!v103) {
        return;
      }
      if (v105)
      {
        uint64_t v185 = 677736015;
        unint64_t v186 = 0xE400000000000000;
        v106._uint64_t countAndFlagsBits = v101;
        v106._uint64_t object = v103;
        String.append(_:)(v106);
        swift_bridgeObjectRelease();
        v107._uint64_t countAndFlagsBits = 41;
        v107._uint64_t object = (void *)0xE100000000000000;
        String.append(_:)(v107);
        uint64_t v87 = v185;
        uint64_t v103 = (void *)v186;
      }
      else
      {
        uint64_t v87 = v101;
      }
      unint64_t v88 = (unint64_t)v103;
LABEL_54:
      PrettyPrinter.print(_:)(*(Swift::String *)&v87);
      swift_bridgeObjectRelease();
      return;
    case 9uLL:
      return;
    case 0xAuLL:
      uint64_t v87 = String._quoted.getter(*(void *)((a1 & 0xFFFFFFFFFFFFFFBLL) + 0x10), *(void *)((a1 & 0xFFFFFFFFFFFFFFBLL) + 0x18));
      goto LABEL_54;
    case 0xBuLL:
      unint64_t v50 = 0xD00000000000001BLL;
      char v52 = "/* TODO: absent function */";
      goto LABEL_28;
    case 0xCuLL:
      uint64_t v57 = *(void *)swift_projectBox();
LABEL_25:
      PrettyPrinter.printAsPattern(convertedFromAST:isTopLevel:)(v57, v182 & 1);
      return;
    case 0xDuLL:
      unint64_t v50 = 0xD000000000000015;
      char v52 = "/* TODO: consumers */";
      goto LABEL_28;
    case 0xEuLL:
      unint64_t v50 = 0xD00000000000001FLL;
      char v52 = "/* TODO: consumer validators */";
      goto LABEL_28;
    case 0xFuLL:
      unint64_t v50 = 0xD000000000000020;
      char v52 = "/* TODO: character predicates */";
LABEL_28:
      unint64_t v51 = (unint64_t)(v52 - 32) | 0x8000000000000000;
      goto LABEL_29;
    case 0x10uLL:
      unint64_t v50 = 0;
      unint64_t v51 = 0xE000000000000000;
LABEL_29:
      PrettyPrinter.print(_:)(*(Swift::String *)&v50);
      return;
    default:
LABEL_11:
      MEMORY[0x270FA5388](v46);
      PrettyPrinter.printBlock(_:startDelimiter:endDelimiter:_:)();
      return;
  }
}

uint64_t closure #1 in PrettyPrinter.printInlineMatchingOptions()(uint64_t a1, uint64_t a2, char a3)
{
  uint64_t v36 = a1;
  uint64_t v37 = type metadata accessor for AST.MatchingOption.Kind();
  uint64_t v5 = *(void *)(v37 - 8);
  uint64_t result = MEMORY[0x270FA5388](v37);
  uint64_t v8 = (char *)&v21 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = *(void *)(a2 + 16);
  if (v9)
  {
    uint64_t v10 = *(void *)(type metadata accessor for AST.MatchingOption() - 8);
    uint64_t v11 = a2 + ((*(unsigned __int8 *)(v10 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v10 + 80));
    uint64_t v12 = (uint64_t (**)(char *, uint64_t))(v5 + 88);
    uint64_t v13 = *(void *)(v10 + 72);
    uint64_t v22 = (uint64_t (**)(char *, uint64_t))(v5 + 8);
    if (a3) {
      uint64_t v14 = 1702195828;
    }
    else {
      uint64_t v14 = 0x65736C6166;
    }
    if (a3) {
      uint64_t v15 = (void *)0xE400000000000000;
    }
    else {
      uint64_t v15 = (void *)0xE500000000000000;
    }
    int v16 = *MEMORY[0x263F8F8D8];
    int v35 = *MEMORY[0x263F8F940];
    int v33 = *MEMORY[0x263F8F8A8];
    unint64_t v34 = 0x8000000209FB6B20;
    int v17 = *MEMORY[0x263F8F8F0];
    unint64_t v32 = 0x8000000209FB6B00;
    int v30 = *MEMORY[0x263F8F8C8];
    int v31 = v17;
    int v28 = *MEMORY[0x263F8F8F8];
    int v26 = *MEMORY[0x263F8F8D0];
    int v24 = *MEMORY[0x263F8F8B0];
    unint64_t v29 = 0x8000000209FB6BA0;
    unint64_t v27 = 0x8000000209FB6B80;
    unint64_t v25 = 0x8000000209FB6B60;
    unint64_t v23 = 0x8000000209FB6B40;
    while (1)
    {
      AST.MatchingOption.kind.getter();
      uint64_t result = (*v12)(v8, v37);
      if (result == v16) {
        break;
      }
      if (result == v35)
      {
        v38._uint64_t countAndFlagsBits = 0;
        v38._uint64_t object = (void *)0xE000000000000000;
        _StringGuts.grow(_:)(28);
        swift_bridgeObjectRelease();
        v38._uint64_t countAndFlagsBits = 0xD000000000000019;
        uint64_t v18 = (void *)v34;
        goto LABEL_24;
      }
      if (result == v33)
      {
        v38._uint64_t countAndFlagsBits = 0;
        v38._uint64_t object = (void *)0xE000000000000000;
        _StringGuts.grow(_:)(23);
        swift_bridgeObjectRelease();
        v38._uint64_t countAndFlagsBits = 0xD000000000000014;
        uint64_t v18 = (void *)v32;
        goto LABEL_24;
      }
      if (result != v31)
      {
        if (result == v30)
        {
          v38._uint64_t countAndFlagsBits = 0;
          v38._uint64_t object = (void *)0xE000000000000000;
          _StringGuts.grow(_:)(20);
          swift_bridgeObjectRelease();
          v38._uint64_t countAndFlagsBits = 0xD000000000000011;
          uint64_t v18 = (void *)v29;
        }
        else if (result == v28)
        {
          v38._uint64_t countAndFlagsBits = 0;
          v38._uint64_t object = (void *)0xE000000000000000;
          _StringGuts.grow(_:)(30);
          swift_bridgeObjectRelease();
          v38._uint64_t countAndFlagsBits = 0xD00000000000001BLL;
          uint64_t v18 = (void *)v27;
        }
        else if (result == v26)
        {
          v38._uint64_t countAndFlagsBits = 0;
          v38._uint64_t object = (void *)0xE000000000000000;
          _StringGuts.grow(_:)(24);
          swift_bridgeObjectRelease();
          v38._uint64_t countAndFlagsBits = 0xD000000000000015;
          uint64_t v18 = (void *)v25;
        }
        else
        {
          if (result != v24)
          {
            uint64_t result = (*v22)(v8, v37);
            goto LABEL_25;
          }
          v38._uint64_t countAndFlagsBits = 0;
          v38._uint64_t object = (void *)0xE000000000000000;
          _StringGuts.grow(_:)(28);
          swift_bridgeObjectRelease();
          v38._uint64_t countAndFlagsBits = 0xD000000000000019;
          uint64_t v18 = (void *)v23;
        }
        goto LABEL_24;
      }
LABEL_25:
      v11 += v13;
      if (!--v9) {
        return result;
      }
    }
    v38._uint64_t countAndFlagsBits = 0;
    v38._uint64_t object = (void *)0xE000000000000000;
    _StringGuts.grow(_:)(16);
    swift_bridgeObjectRelease();
    v38._uint64_t countAndFlagsBits = 0x7365726F6E67692ELL;
    uint64_t v18 = (void *)0xED00002865736143;
LABEL_24:
    v38._uint64_t object = v18;
    v19._uint64_t countAndFlagsBits = v14;
    v19._uint64_t object = v15;
    String.append(_:)(v19);
    swift_bridgeObjectRelease();
    v20._uint64_t countAndFlagsBits = 41;
    v20._uint64_t object = (void *)0xE100000000000000;
    String.append(_:)(v20);
    PrettyPrinter.print(_:)(v38);
    uint64_t result = swift_bridgeObjectRelease();
    goto LABEL_25;
  }
  return result;
}

Swift::Void __swiftcall PrettyPrinter.printConcatenationAsPattern(_:isTopLevel:)(Swift::OpaquePointer _, Swift::Bool isTopLevel)
{
  BOOL v3 = isTopLevel;
  uint64_t v99 = type metadata accessor for DSLTree.Atom(0);
  uint64_t v5 = MEMORY[0x270FA5388](v99);
  uint64_t v98 = (int *)&v92[-((v6 + 15) & 0xFFFFFFFFFFFFFFF0)];
  MEMORY[0x270FA5388](v5);
  unint64_t v97 = (uint64_t *)&v92[-v7];
  unint64_t v8 = *((void *)_._rawValue + 2);
  uint64_t v94 = v2;
  BOOL v93 = v3;
  if (v8)
  {
    *(void *)&v115[0] = MEMORY[0x263F8EE78];
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v8, 0);
    uint64_t v9 = *(void *)&v115[0];
    uint64_t v10 = (unint64_t *)((char *)_._rawValue + 32);
    do
    {
      unint64_t v12 = *v10++;
      unint64_t v11 = v12;
      if (((v12 >> 59) & 0x1E | (v12 >> 2) & 1) == 0xC) {
        unint64_t v11 = *(void *)swift_projectBox();
      }
      *(void *)&v115[0] = v9;
      unint64_t v13 = *(void *)(v9 + 16);
      unint64_t v14 = *(void *)(v9 + 24);
      swift_retain();
      if (v13 >= v14 >> 1)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v14 > 1), v13 + 1, 1);
        uint64_t v9 = *(void *)&v115[0];
      }
      *(void *)(v9 + 16) = v13 + 1;
      uint64_t v15 = v9 + 24 * v13;
      *(void *)(v15 + 32) = v11;
      *(void *)(v15 + 40) = 0;
      *(unsigned char *)(v15 + 48) = 0;
      --v8;
    }
    while (v8);
    unint64_t v16 = v13 + 1;
    v111._uint64_t countAndFlagsBits = 0;
    v111._uint64_t object = (void *)0xE000000000000000;
  }
  else
  {
    uint64_t v9 = MEMORY[0x263F8EE78];
    unint64_t v16 = *(void *)(MEMORY[0x263F8EE78] + 16);
    v111._uint64_t countAndFlagsBits = 0;
    v111._uint64_t object = (void *)0xE000000000000000;
    int v100 = (char *)MEMORY[0x263F8EE78];
    if (!v16)
    {
LABEL_55:
      swift_bridgeObjectRelease();
      uint64_t v82 = swift_bridgeObjectRelease();
      uint64_t v85 = v100;
      goto LABEL_44;
    }
  }
  unint64_t v17 = 0;
  uint64_t v18 = v9 + 48;
  unint64_t v95 = v16 - 1;
  int v100 = (char *)MEMORY[0x263F8EE78];
  unint64_t v101 = v16;
  uint64_t v102 = v9;
  uint64_t v96 = v9 + 48;
LABEL_11:
  _._unint64_t rawValue = 0;
  Swift::String v19 = (char *)(v18 + 24 * v17);
  unint64_t v20 = v17;
  do
  {
    if (v20 >= *(void *)(v9 + 16))
    {
      __break(1u);
      goto LABEL_57;
    }
    unint64_t v8 = *((void *)v19 - 2);
    uint64_t v22 = *((void *)v19 - 1);
    unint64_t v17 = v20 + 1;
    char v23 = *v19;
    if (*v19)
    {
LABEL_27:
      if ((uint64_t)_._rawValue)
      {
        uint64_t countAndFlagsBits = v111._countAndFlagsBits;
        uint64_t object = v111._object;
        *(void *)&long long v104 = 34;
        *((void *)&v104 + 1) = 0xE100000000000000;
        outlined copy of PrettyPrinter.NodeToPrint(v8, v22, v23);
        v69._uint64_t countAndFlagsBits = countAndFlagsBits;
        v69._uint64_t object = object;
        String.append(_:)(v69);
        v70._uint64_t countAndFlagsBits = 34;
        v70._uint64_t object = (void *)0xE100000000000000;
        String.append(_:)(v70);
        swift_bridgeObjectRelease();
        long long v71 = v104;
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
          int v100 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *((void *)v100 + 2) + 1, 1, v100, &demangling cache variable for type metadata for _ContiguousArrayStorage<PrettyPrinter.NodeToPrint>);
        }
        unint64_t v73 = *((void *)v100 + 2);
        unint64_t v72 = *((void *)v100 + 3);
        if (v73 >= v72 >> 1) {
          int v100 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v72 > 1), v73 + 1, 1, v100, &demangling cache variable for type metadata for _ContiguousArrayStorage<PrettyPrinter.NodeToPrint>);
        }
        uint64_t v74 = v100;
        *((void *)v100 + 2) = v73 + 1;
        Swift::String v75 = &v74[24 * v73];
        *((_OWORD *)v75 + 2) = v71;
        v75[48] = 1;
        v111._uint64_t countAndFlagsBits = 0;
        v111._uint64_t object = (void *)0xE000000000000000;
      }
      else
      {
        outlined copy of PrettyPrinter.NodeToPrint(v8, v22, v23);
        uint64_t v74 = v100;
      }
      int v100 = v74;
      char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
      uint64_t v18 = v96;
      if ((isUniquelyReferenced_nonNull_native & 1) == 0) {
        int v100 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *((void *)v100 + 2) + 1, 1, v100, &demangling cache variable for type metadata for _ContiguousArrayStorage<PrettyPrinter.NodeToPrint>);
      }
      unint64_t v16 = v101;
      _._unint64_t rawValue = (void *)*((void *)v100 + 2);
      unint64_t v77 = *((void *)v100 + 3);
      if ((unint64_t)_._rawValue >= v77 >> 1)
      {
        uint64_t v80 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v77 > 1), (int64_t)_._rawValue + 1, 1, v100, &demangling cache variable for type metadata for _ContiguousArrayStorage<PrettyPrinter.NodeToPrint>);
        unint64_t v16 = v101;
        int v100 = v80;
      }
      uint64_t v78 = v100;
      *((void *)v100 + 2) = (char *)_._rawValue + 1;
      uint64_t v79 = &v78[24 * (uint64_t)_._rawValue];
      *((void *)v79 + 4) = v8;
      *((void *)v79 + 5) = v22;
      v79[48] = v23;
      uint64_t v9 = v102;
      if (v95 == v20)
      {
        LOBYTE(v3) = v93;
        goto LABEL_55;
      }
      goto LABEL_11;
    }
    int v24 = (v8 >> 59) & 0x1E | (v8 >> 2) & 1;
    if (v24 == 10)
    {
      uint64_t v34 = *(void *)((v8 & 0xFFFFFFFFFFFFFFBLL) + 0x10);
      unint64_t v35 = *(void *)((v8 & 0xFFFFFFFFFFFFFFBLL) + 0x18);
      outlined copy of PrettyPrinter.NodeToPrint(*((void *)v19 - 2), *((void *)v19 - 1), 0);
      unint64_t v36 = String.subscript.getter();
      specialized Collection<>._ranges<A>(of:)(92, 0xE100000000000000, v36, v37, v38, v39, (uint64_t)&v104);
      swift_bridgeObjectRelease();
      v115[4] = v108;
      v115[5] = v109;
      v115[6] = v110;
      v115[0] = v104;
      v115[1] = v105;
      v115[2] = v106;
      v115[3] = v107;
      uint64_t v40 = specialized RangeReplaceableCollection._replacing<A, B>(_:with:maxReplacements:)((uint64_t)v115, 23644, 0xE200000000000000, 0x7FFFFFFFFFFFFFFFuLL, v34, v35);
      unint64_t v42 = v41;
      outlined release of RangesCollection<ZSearcher<Substring>>((uint64_t)v115);
      unint64_t v43 = String.subscript.getter();
      specialized Collection<>._ranges<A>(of:)(34, 0xE100000000000000, v43, v44, v45, v46, (uint64_t)&v104);
      swift_bridgeObjectRelease();
      v114[4] = v108;
      v114[5] = v109;
      v114[6] = v110;
      v114[0] = v104;
      v114[1] = v105;
      v114[2] = v106;
      v114[3] = v107;
      uint64_t v47 = specialized RangeReplaceableCollection._replacing<A, B>(_:with:maxReplacements:)((uint64_t)v114, 8796, 0xE200000000000000, 0x7FFFFFFFFFFFFFFFuLL, v40, v42);
      uint64_t v33 = v48;
      outlined release of RangesCollection<ZSearcher<Substring>>((uint64_t)v114);
      swift_bridgeObjectRelease();
      uint64_t v32 = v47;
LABEL_26:
      uint64_t v66 = v33;
      String.append(_:)(*(Swift::String *)&v32);
      swift_bridgeObjectRelease();
      outlined consume of PrettyPrinter.NodeToPrint(v8, v22, 0);
      unint64_t v16 = v101;
      goto LABEL_15;
    }
    if (v24 != 9)
    {
      if (v24 != 8) {
        goto LABEL_27;
      }
      uint64_t v25 = swift_projectBox();
      int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
      if (EnumCaseMultiPayload)
      {
        if (EnumCaseMultiPayload != 1) {
          goto LABEL_27;
        }
        uint64_t v27 = v25;
        int v28 = v98;
        outlined init with copy of MEProgram(v27, (uint64_t)v98, type metadata accessor for DSLTree.Atom);
        int v29 = *v28;
        *(void *)&long long v104 = 8090972;
        *((void *)&v104 + 1) = 0xE300000000000000;
        int v103 = v29;
        outlined copy of PrettyPrinter.NodeToPrint(v8, v22, 0);
        lazy protocol witness table accessor for type UInt32 and conformance UInt32();
        v30._uint64_t countAndFlagsBits = String.init<A>(_:radix:uppercase:)();
        String.append(_:)(v30);
        swift_bridgeObjectRelease();
        v31._uint64_t countAndFlagsBits = 125;
        v31._uint64_t object = (void *)0xE100000000000000;
        String.append(_:)(v31);
        uint64_t v33 = *((void *)&v104 + 1);
        uint64_t v32 = v104;
      }
      else
      {
        uint64_t v49 = v25;
        unint64_t v50 = v97;
        outlined init with copy of MEProgram(v49, (uint64_t)v97, type metadata accessor for DSLTree.Atom);
        uint64_t v52 = *v50;
        unint64_t v51 = v50[1];
        outlined copy of PrettyPrinter.NodeToPrint(v8, v22, 0);
        unint64_t v53 = String.subscript.getter();
        specialized Collection<>._ranges<A>(of:)(92, 0xE100000000000000, v53, v54, v55, v56, (uint64_t)&v104);
        swift_bridgeObjectRelease();
        v113[4] = v108;
        v113[5] = v109;
        v113[6] = v110;
        v113[0] = v104;
        v113[1] = v105;
        v113[2] = v106;
        v113[3] = v107;
        uint64_t v57 = specialized RangeReplaceableCollection._replacing<A, B>(_:with:maxReplacements:)((uint64_t)v113, 23644, 0xE200000000000000, 0x7FFFFFFFFFFFFFFFuLL, v52, v51);
        unint64_t v59 = v58;
        outlined release of RangesCollection<ZSearcher<Substring>>((uint64_t)v113);
        swift_bridgeObjectRelease();
        unint64_t v60 = String.subscript.getter();
        specialized Collection<>._ranges<A>(of:)(34, 0xE100000000000000, v60, v61, v62, v63, (uint64_t)&v104);
        swift_bridgeObjectRelease();
        v112[4] = v108;
        v112[5] = v109;
        v112[6] = v110;
        v112[0] = v104;
        v112[1] = v105;
        v112[2] = v106;
        v112[3] = v107;
        uint64_t v64 = specialized RangeReplaceableCollection._replacing<A, B>(_:with:maxReplacements:)((uint64_t)v112, 8796, 0xE200000000000000, 0x7FFFFFFFFFFFFFFFuLL, v57, v59);
        uint64_t v33 = v65;
        outlined release of RangesCollection<ZSearcher<Substring>>((uint64_t)v112);
        swift_bridgeObjectRelease();
        uint64_t v32 = v64;
      }
      goto LABEL_26;
    }
    unint64_t v21 = v111._countAndFlagsBits & 0xFFFFFFFFFFFFLL;
    if (((uint64_t)v111._object & 0x2000000000000000) != 0) {
      unint64_t v21 = ((unint64_t)v111._object >> 56) & 0xF;
    }
    if (!v21) {
      goto LABEL_27;
    }
LABEL_15:
    v19 += 24;
    _._unint64_t rawValue = (void *)1;
    ++v20;
    uint64_t v9 = v102;
  }
  while (v16 != v17);
  swift_bridgeObjectRelease();
  *(void *)&long long v104 = 34;
  *((void *)&v104 + 1) = 0xE100000000000000;
  String.append(_:)(v111);
  v81._uint64_t countAndFlagsBits = 34;
  v81._uint64_t object = (void *)0xE100000000000000;
  String.append(_:)(v81);
  swift_bridgeObjectRelease();
  unint64_t v8 = *((void *)&v104 + 1);
  _._unint64_t rawValue = (void *)v104;
  Swift::String v19 = v100;
  uint64_t v82 = swift_isUniquelyReferenced_nonNull_native();
  if ((v82 & 1) == 0) {
    goto LABEL_58;
  }
  while (2)
  {
    LOBYTE(v3) = v93;
    unint64_t v84 = *((void *)v100 + 2);
    unint64_t v83 = *((void *)v100 + 3);
    if (v84 >= v83 >> 1)
    {
      uint64_t v82 = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v83 > 1), v84 + 1, 1, v100, &demangling cache variable for type metadata for _ContiguousArrayStorage<PrettyPrinter.NodeToPrint>);
      int v100 = (char *)v82;
    }
    uint64_t v85 = v100;
    *((void *)v100 + 2) = v84 + 1;
    uint64_t v86 = &v85[24 * v84];
    *((Swift::OpaquePointer *)v86 + 4) = _;
    *((void *)v86 + 5) = v8;
    v86[48] = 1;
LABEL_44:
    uint64_t v87 = v85;
    unint64_t v88 = (char *)*((void *)v85 + 2);
    if (v3)
    {
      if (!v88)
      {
LABEL_46:
        swift_bridgeObjectRelease();
        return;
      }
      goto LABEL_48;
    }
    if (v88 == (char *)1)
    {
LABEL_48:
      Swift::String v19 = 0;
      char v89 = (unsigned __int8 *)(v85 + 48);
      while (v19 < v88)
      {
        _._unint64_t rawValue = (void *)*((void *)v89 - 2);
        unint64_t v8 = *((void *)v89 - 1);
        int v91 = *v89;
        if (v91 == 1)
        {
          swift_bridgeObjectRetain();
          v90._uint64_t countAndFlagsBits = (uint64_t)_._rawValue;
          v90._uint64_t object = (void *)v8;
          PrettyPrinter.print(_:)(v90);
        }
        else
        {
          swift_retain();
          PrettyPrinter.printAsPattern(convertedFromAST:isTopLevel:)(_._rawValue, 0);
        }
        ++v19;
        outlined consume of PrettyPrinter.NodeToPrint((uint64_t)_._rawValue, v8, v91);
        unint64_t v88 = (char *)*((void *)v87 + 2);
        v89 += 24;
        if (v19 == v88) {
          goto LABEL_46;
        }
      }
LABEL_57:
      __break(1u);
LABEL_58:
      uint64_t v82 = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *((void *)v19 + 2) + 1, 1, v19, &demangling cache variable for type metadata for _ContiguousArrayStorage<PrettyPrinter.NodeToPrint>);
      int v100 = (char *)v82;
      continue;
    }
    break;
  }
  MEMORY[0x270FA5388](v82);
  *(void *)&v92[-16] = v87;
  PrettyPrinter.printBlock(_:startDelimiter:endDelimiter:_:)();
  swift_bridgeObjectRelease();
}

uint64_t AST.Quantification.Amount._patternBase.getter()
{
  uint64_t v1 = v0;
  uint64_t v2 = type metadata accessor for AST.Atom.Number();
  uint64_t v3 = *(void *)(v2 - 8);
  uint64_t v4 = MEMORY[0x270FA5388](v2);
  uint64_t v48 = (char *)&v47 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = MEMORY[0x270FA5388](v4);
  unint64_t v8 = (char *)&v47 - v7;
  uint64_t v9 = MEMORY[0x270FA5388](v6);
  unint64_t v11 = (char *)&v47 - v10;
  uint64_t v12 = MEMORY[0x270FA5388](v9);
  unint64_t v14 = (char *)&v47 - v13;
  MEMORY[0x270FA5388](v12);
  unint64_t v16 = (char *)&v47 - v15;
  uint64_t v17 = type metadata accessor for AST.Quantification.Amount();
  uint64_t v18 = *(void *)(v17 - 8);
  MEMORY[0x270FA5388](v17);
  unint64_t v20 = (char *)&v47 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t))(v18 + 16))(v20, v1, v17);
  int v21 = (*(uint64_t (**)(char *, uint64_t))(v18 + 88))(v20, v17);
  if (v21 == *MEMORY[0x263F8F990])
  {
    (*(void (**)(char *, uint64_t))(v18 + 96))(v20, v17);
    (*(void (**)(char *, char *, uint64_t))(v3 + 32))(v16, v20, v2);
    v49[0] = 0;
    v49[1] = 0xE000000000000000;
    _StringGuts.grow(_:)(17);
    swift_bridgeObjectRelease();
    strcpy((char *)v49, "Repeat(count: ");
    HIBYTE(v49[1]) = -18;
    uint64_t v22 = AST.Atom.Number._patternBase.getter();
    int v24 = v23;
    (*(void (**)(char *, uint64_t))(v3 + 8))(v16, v2);
LABEL_3:
    v25._uint64_t countAndFlagsBits = v22;
    v25._uint64_t object = v24;
    String.append(_:)(v25);
LABEL_4:
    swift_bridgeObjectRelease();
    uint64_t v26 = 41;
    unint64_t v27 = 0xE100000000000000;
LABEL_7:
    String.append(_:)(*(Swift::String *)&v26);
    return v49[0];
  }
  if (v21 == *MEMORY[0x263F8F998])
  {
    (*(void (**)(char *, uint64_t))(v18 + 96))(v20, v17);
    (*(void (**)(char *, char *, uint64_t))(v3 + 32))(v14, v20, v2);
    strcpy((char *)v49, "Repeat(");
    v49[1] = 0xE700000000000000;
    uint64_t v28 = AST.Atom.Number._patternBase.getter();
    Swift::String v30 = v29;
    (*(void (**)(char *, uint64_t))(v3 + 8))(v14, v2);
    v31._uint64_t countAndFlagsBits = v28;
    v31._uint64_t object = v30;
    String.append(_:)(v31);
    swift_bridgeObjectRelease();
    uint64_t v26 = 690892334;
    unint64_t v27 = 0xE400000000000000;
    goto LABEL_7;
  }
  if (v21 == *MEMORY[0x263F8F988])
  {
    (*(void (**)(char *, uint64_t))(v18 + 96))(v20, v17);
    (*(void (**)(char *, char *, uint64_t))(v3 + 32))(v11, v20, v2);
    strcpy((char *)v49, "Repeat(...");
    BYTE3(v49[1]) = 0;
    HIDWORD(v49[1]) = -369098752;
    uint64_t v22 = AST.Atom.Number._patternBase.getter();
    int v24 = v33;
    (*(void (**)(char *, uint64_t))(v3 + 8))(v11, v2);
    goto LABEL_3;
  }
  if (v21 == *MEMORY[0x263F8F980])
  {
    (*(void (**)(char *, uint64_t))(v18 + 96))(v20, v17);
    uint64_t v34 = &v20[*(int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (AST.Atom.Number, AST.Atom.Number))
                      + 48)];
    unint64_t v35 = *(void (**)(char *, char *, uint64_t))(v3 + 32);
    v35(v8, v20, v2);
    unint64_t v36 = v48;
    v35(v48, v34, v2);
    strcpy((char *)v49, "Repeat(");
    v49[1] = 0xE700000000000000;
    uint64_t v37 = AST.Atom.Number._patternBase.getter();
    uint64_t v39 = v38;
    uint64_t v40 = *(void (**)(char *, uint64_t))(v3 + 8);
    v40(v8, v2);
    v41._uint64_t countAndFlagsBits = v37;
    v41._uint64_t object = v39;
    String.append(_:)(v41);
    swift_bridgeObjectRelease();
    v42._uint64_t countAndFlagsBits = 3026478;
    v42._uint64_t object = (void *)0xE300000000000000;
    String.append(_:)(v42);
    uint64_t v43 = AST.Atom.Number._patternBase.getter();
    uint64_t v45 = v44;
    v40(v36, v2);
    v46._uint64_t countAndFlagsBits = v43;
    v46._uint64_t object = v45;
    String.append(_:)(v46);
    goto LABEL_4;
  }
  if (v21 == *MEMORY[0x263F8F978]) {
    return 0x6F4D724F6F72655ALL;
  }
  if (v21 == *MEMORY[0x263F8F9A0]) {
    return 0x726F4D724F656E4FLL;
  }
  if (v21 == *MEMORY[0x263F8F9A8]) {
    return 0x6C616E6F6974704FLL;
  }
  uint64_t result = _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

void printAtom #1 (_:) in PrettyPrinter.printAsPattern(convertedFromAST:isTopLevel:)(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, Swift::String *a5)
{
  PrettyPrinter.indent()();
  BOOL v9 = *(void *)(a4 + 16) == 0x72656761652ELL && *(void *)(a4 + 24) == 0xE600000000000000;
  if (v9 || (uint64_t v10 = _stringCompareWithSmolCheck(_:_:expecting:)(), (v10 & 1) != 0))
  {
    Swift::String v15 = a5[1];
    swift_bridgeObjectRetain();
    uint64_t v11 = 40;
    unint64_t v12 = 0xE100000000000000;
  }
  else
  {
    specialized RangeReplaceableCollection<>.removeLast()(v10);
    swift_bridgeObjectRelease();
    Swift::String v15 = a5[1];
    swift_bridgeObjectRetain();
    uint64_t v11 = 8236;
    unint64_t v12 = 0xE200000000000000;
  }
  String.append(_:)(*(Swift::String *)&v11);
  PrettyPrinter.output(_:)(v15);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  v13._uint64_t countAndFlagsBits = 41;
  v13._uint64_t object = (void *)0xE100000000000000;
  String.append(_:)(v13);
  v14._uint64_t countAndFlagsBits = a1;
  v14._uint64_t object = a2;
  PrettyPrinter.output(_:)(v14);
  swift_bridgeObjectRelease();
  PrettyPrinter.terminateLine()();
}

void printSimpleCCC #1 (_:) in PrettyPrinter.printAsPattern(convertedFromAST:isTopLevel:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6 = *(void *)a1;
  char v7 = *(unsigned char *)(a1 + 8);
  PrettyPrinter.indent()();
  BOOL v8 = *(void *)(a3 + 16) == 0x72656761652ELL && *(void *)(a3 + 24) == 0xE600000000000000;
  if (v8 || (uint64_t v9 = _stringCompareWithSmolCheck(_:_:expecting:)(), (v9 & 1) != 0))
  {
    uint64_t v10 = *(void **)(a4 + 24);
    v16._uint64_t countAndFlagsBits = *(void *)(a4 + 16);
    v16._uint64_t object = v10;
    swift_bridgeObjectRetain();
    uint64_t v11 = 40;
    unint64_t v12 = 0xE100000000000000;
  }
  else
  {
    specialized RangeReplaceableCollection<>.removeLast()(v9);
    swift_bridgeObjectRelease();
    Swift::String v13 = *(void **)(a4 + 24);
    v16._uint64_t countAndFlagsBits = *(void *)(a4 + 16);
    v16._uint64_t object = v13;
    swift_bridgeObjectRetain();
    uint64_t v11 = 8236;
    unint64_t v12 = 0xE200000000000000;
  }
  String.append(_:)(*(Swift::String *)&v11);
  PrettyPrinter.output(_:)(v16);
  swift_bridgeObjectRelease();
  v16._uint64_t countAndFlagsBits = v6;
  LOBYTE(v16._object) = v7;
  v17.members._unint64_t rawValue = &v16;
  v17.isInverted = 0;
  PrettyPrinter.printAsPattern(_:wrap:terminateLine:)(v17, 0, v14);
  v15._uint64_t countAndFlagsBits = 41;
  v15._uint64_t object = (void *)0xE100000000000000;
  PrettyPrinter.output(_:)(v15);
  PrettyPrinter.terminateLine()();
}

Swift::Void __swiftcall PrettyPrinter.printAsPattern(_:wrap:terminateLine:)(_StringProcessing::DSLTree::CustomCharacterClass _, Swift::Bool wrap, Swift::Bool terminateLine)
{
  Swift::Bool isInverted = _.isInverted;
  unint64_t rawValue = (unsigned __int8 *)_.members._rawValue;
  uint64_t v6 = type metadata accessor for DSLTree.CustomCharacterClass.Member(0);
  uint64_t v7 = *(void *)(v6 - 8);
  MEMORY[0x270FA5388](v6 - 8);
  uint64_t v9 = (char *)&v32 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = *(void *)rawValue;
  int v11 = rawValue[8];
  uint64_t v36 = *(void *)rawValue;
  LOBYTE(v37) = v11;
  if (DSLTree.CustomCharacterClass.hasUnprintableProperty.getter())
  {
    uint64_t v36 = v10;
    LOBYTE(v37) = v11;
    v38.members._unint64_t rawValue = &v36;
    v38.Swift::Bool isInverted = 1;
    PrettyPrinter.printAsRegex(_:asFullRegex:terminateLine:)(v38, wrap, v12);
    return;
  }
  if (*(void *)(v10 + 16) == 1)
  {
    outlined init with copy of MEProgram(v10 + ((*(unsigned __int8 *)(v7 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80)), (uint64_t)v9, type metadata accessor for DSLTree.CustomCharacterClass.Member);
    PrettyPrinter.printAsPattern(_:wrap:)((uint64_t)v9, isInverted);
    uint64_t v13 = outlined destroy of MEProgram((uint64_t)v9, type metadata accessor for DSLTree.CustomCharacterClass.Member);
    if (wrap) {
      PrettyPrinter.terminateLine()();
    }
    if (v11)
    {
LABEL_22:
      MEMORY[0x270FA5388](v13);
      *((unsigned char *)&v32 - 16) = wrap;
      PrettyPrinter.printIndented(_:)();
    }
  }
  else
  {
    uint64_t v36 = 0;
    unint64_t v37 = 0xE000000000000000;
    uint64_t v14 = swift_bridgeObjectRetain();
    uint64_t v15 = specialized _ArrayProtocol.filter(_:)(v14, (uint64_t)&v36);
    uint64_t v16 = v15;
    uint64_t v18 = v36;
    _StringProcessing::DSLTree::CustomCharacterClass v17 = (void *)v37;
    uint64_t v19 = HIBYTE(v37) & 0xF;
    if ((v37 & 0x2000000000000000) == 0) {
      uint64_t v19 = v36 & 0xFFFFFFFFFFFFLL;
    }
    if (v19 && !*(void *)(v15 + 16))
    {
      swift_bridgeObjectRelease();
      unint64_t v34 = 0;
      unint64_t v35 = 0xE000000000000000;
      _StringGuts.grow(_:)(24);
      swift_bridgeObjectRelease();
      unint64_t v34 = 0xD000000000000015;
      unint64_t v35 = 0x8000000209FB6CD0;
      v33._uint64_t countAndFlagsBits = 34;
      v33._uint64_t object = (void *)0xE100000000000000;
      swift_bridgeObjectRetain();
      v23._uint64_t countAndFlagsBits = v18;
      v23._uint64_t object = v17;
      String.append(_:)(v23);
      v24._uint64_t countAndFlagsBits = 34;
      v24._uint64_t object = (void *)0xE100000000000000;
      String.append(_:)(v24);
      swift_bridgeObjectRelease();
      String.append(_:)(v33);
      swift_bridgeObjectRelease();
      v25._uint64_t countAndFlagsBits = 41;
      v25._uint64_t object = (void *)0xE100000000000000;
      String.append(_:)(v25);
      uint64_t v27 = v34;
      uint64_t v26 = (void *)v35;
      PrettyPrinter.indent()();
      if (isInverted)
      {
        unint64_t v34 = 677736015;
        unint64_t v35 = 0xE400000000000000;
        v28._uint64_t countAndFlagsBits = v27;
        v28._uint64_t object = v26;
        String.append(_:)(v28);
        swift_bridgeObjectRelease();
        v29._uint64_t countAndFlagsBits = 41;
        v29._uint64_t object = (void *)0xE100000000000000;
        String.append(_:)(v29);
        unint64_t v30 = v34;
        uint64_t v26 = (void *)v35;
      }
      else
      {
        unint64_t v30 = v27;
      }
      Swift::String v31 = v26;
      PrettyPrinter.output(_:)(*(Swift::String *)&v30);
      swift_bridgeObjectRelease();
      if (wrap) {
        PrettyPrinter.terminateLine()();
      }
      uint64_t v13 = swift_bridgeObjectRelease();
      if (v11) {
        goto LABEL_22;
      }
    }
    else
    {
      v20._uint64_t countAndFlagsBits = 0x6574636172616843;
      v20._uint64_t object = (void *)0xEF287373616C4372;
      PrettyPrinter.print(_:)(v20);
      MEMORY[0x270FA5388](v21);
      *(&v32 - 2) = (uint64_t)&v36;
      *(&v32 - 1) = v16;
      PrettyPrinter.printIndented(_:)();
      swift_bridgeObjectRelease();
      PrettyPrinter.indent()();
      v22._uint64_t countAndFlagsBits = 41;
      v22._uint64_t object = (void *)0xE100000000000000;
      PrettyPrinter.output(_:)(v22);
      if (wrap) {
        PrettyPrinter.terminateLine()();
      }
      uint64_t v13 = swift_bridgeObjectRelease();
      if (v11) {
        goto LABEL_22;
      }
    }
  }
}

uint64_t DSLTree.Atom._patternBase(_:)(uint64_t a1)
{
  uint64_t v61 = a1;
  uint64_t v60 = type metadata accessor for AST.Quantification.Kind();
  uint64_t v56 = *(void *)(v60 - 8);
  MEMORY[0x270FA5388](v60);
  unint64_t v59 = (char *)&v53 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v64 = type metadata accessor for AST.MatchingOption.Kind();
  uint64_t v55 = *(void (***)(char *, uint64_t))(v64 - 8);
  MEMORY[0x270FA5388](v64);
  uint64_t v3 = (char *)&v53 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v63 = type metadata accessor for AST.MatchingOption();
  uint64_t v4 = *(void *)(v63 - 8);
  MEMORY[0x270FA5388](v63);
  uint64_t v6 = (char *)&v53 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = type metadata accessor for DSLTree._AST.MatchingOptionSequence(0);
  MEMORY[0x270FA5388](v7 - 8);
  uint64_t v9 = (char *)&v53 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v57 = type metadata accessor for AST.Atom.CharacterProperty();
  uint64_t v54 = *(void *)(v57 - 8);
  MEMORY[0x270FA5388](v57);
  unint64_t v53 = (char *)&v53 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = type metadata accessor for AST.Atom.Kind();
  uint64_t v58 = *(void *)(v11 - 8);
  MEMORY[0x270FA5388](v11);
  uint64_t v13 = (char *)&v53 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = type metadata accessor for DSLTree._AST.Atom(0);
  MEMORY[0x270FA5388](v14 - 8);
  uint64_t v16 = (char *)&v53 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v17 = type metadata accessor for DSLTree.Atom(0);
  MEMORY[0x270FA5388](v17);
  uint64_t v19 = (char *)&v53 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of MEProgram(v62, (uint64_t)v19, type metadata accessor for DSLTree.Atom);
  uint64_t v20 = 0xD00000000000001FLL;
  switch(swift_getEnumCaseMultiPayload())
  {
    case 1u:
      LODWORD(v65) = *(_DWORD *)v19;
      lazy protocol witness table accessor for type UInt32 and conformance UInt32();
      v21._uint64_t countAndFlagsBits = String.init<A>(_:radix:uppercase:)();
      uint64_t v65 = 8090972;
      unint64_t v66 = 0xE300000000000000;
      String.append(_:)(v21);
      swift_bridgeObjectRelease();
      v22._uint64_t countAndFlagsBits = 125;
      v22._uint64_t object = (void *)0xE100000000000000;
      String.append(_:)(v22);
      v23._uint64_t countAndFlagsBits = v65;
      Swift::String v24 = (void *)v66;
      uint64_t v65 = 34;
      unint64_t v66 = 0xE100000000000000;
      v23._uint64_t object = v24;
      String.append(_:)(v23);
      swift_bridgeObjectRelease();
      uint64_t v25 = 34;
      unint64_t v26 = 0xE100000000000000;
      goto LABEL_37;
    case 2u:
      LOBYTE(v65) = *v19;
      return DSLTree.Atom.CharacterClass._patternBase.getter();
    case 3u:
      LOBYTE(v65) = *v19;
      return DSLTree.Atom.Assertion._patternBase.getter();
    case 4u:
      outlined destroy of MEProgram((uint64_t)v19, type metadata accessor for DSLTree.Atom);
      return 0xD00000000000001ALL;
    case 5u:
      return v20;
    case 6u:
      outlined init with take of DSLTree.QuantificationKind((uint64_t)v19, (uint64_t)v9, type metadata accessor for DSLTree._AST.MatchingOptionSequence);
      uint64_t v27 = *(char **)(AST.MatchingOptionSequence.removing.getter() + 16);
      swift_bridgeObjectRelease();
      unint64_t v53 = v27;
      if (v27) {
        uint64_t v28 = AST.MatchingOptionSequence.removing.getter();
      }
      else {
        uint64_t v28 = AST.MatchingOptionSequence.adding.getter();
      }
      v38._unint64_t rawValue = (void *)v28;
      outlined destroy of MEProgram((uint64_t)v9, type metadata accessor for DSLTree._AST.MatchingOptionSequence);
      uint64_t v39 = *((void *)v38._rawValue + 2);
      if (!v39) {
        goto LABEL_33;
      }
      unint64_t v40 = 0;
      uint64_t v62 = v4 + 16;
      uint64_t v58 = v4 + 8;
      Swift::String v41 = (uint64_t (**)(char *, uint64_t))(v55 + 11);
      LODWORD(v57) = *MEMORY[0x263F8F8F0];
      Swift::String v42 = (_DWORD *)MEMORY[0x263F8F950];
      if (!v53) {
        Swift::String v42 = (_DWORD *)MEMORY[0x263F8F958];
      }
      LODWORD(v54) = *MEMORY[0x263F8F938];
      ++v55;
      uint64_t v43 = (void (**)(char *, void, uint64_t))(v56 + 104);
      LODWORD(v56) = *v42;
      uint64_t v44 = v63;
      do
      {
        if (v40 >= *((void *)v38._rawValue + 2))
        {
          __break(1u);
          JUMPOUT(0x209F661BCLL);
        }
        (*(void (**)(char *, unint64_t, uint64_t))(v4 + 16))(v6, (unint64_t)v38._rawValue+ ((*(unsigned __int8 *)(v4 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80))+ *(void *)(v4 + 72) * v40, v44);
        AST.MatchingOption.kind.getter();
        (*(void (**)(char *, uint64_t))(v4 + 8))(v6, v44);
        int v45 = (*v41)(v3, v64);
        if (v45 == v57)
        {
          (*v43)(v59, v56, v60);
          PrettyPrinter.quantificationBehavior.setter();
        }
        else if (v45 != v54)
        {
          (*v55)(v3, v64);
          goto LABEL_26;
        }
        if (*((void *)v38._rawValue + 2) == 1) {
          goto LABEL_34;
        }
LABEL_26:
        ++v40;
      }
      while (v39 != v40);
LABEL_33:
      Swift::Bool v46 = v53 == 0;
      v47._uint64_t countAndFlagsBits = 0x7B207865676552;
      v47._uint64_t object = (void *)0xE700000000000000;
      PrettyPrinter.print(_:)(v47);
      PrettyPrinter.pushMatchingOptions(_:isAdded:)(v38, v46);
LABEL_34:
      swift_bridgeObjectRelease();
      return 0;
    case 7u:
      outlined init with take of DSLTree.QuantificationKind((uint64_t)v19, (uint64_t)v16, type metadata accessor for DSLTree._AST.Atom);
      AST.Atom.kind.getter();
      uint64_t v29 = v58;
      int v30 = (*(uint64_t (**)(char *, uint64_t))(v58 + 88))(v13, v11);
      if (v30 == *MEMORY[0x263F8FBE8])
      {
        (*(void (**)(char *, uint64_t))(v29 + 96))(v13, v11);
        Swift::String v31 = v53;
        uint64_t v32 = v54;
        Swift::String v33 = v13;
        uint64_t v34 = v57;
        (*(void (**)(char *, char *, uint64_t))(v54 + 32))(v53, v33, v57);
        char v35 = AST.Atom.CharacterProperty.isUnprintableProperty.getter();
        (*(void (**)(char *, uint64_t))(v32 + 8))(v31, v34);
        if (v35)
        {
LABEL_36:
          uint64_t v65 = 12067;
          unint64_t v66 = 0xE200000000000000;
          uint64_t v48 = AST.Atom._regexBase.getter();
          unint64_t v50 = v49;
          outlined destroy of MEProgram((uint64_t)v16, type metadata accessor for DSLTree._AST.Atom);
          v51._uint64_t countAndFlagsBits = v48;
          v51._uint64_t object = v50;
          String.append(_:)(v51);
          swift_bridgeObjectRelease();
          uint64_t v25 = 9007;
          unint64_t v26 = 0xE200000000000000;
LABEL_37:
          String.append(_:)(*(Swift::String *)&v25);
          return v65;
        }
      }
      else
      {
        int v36 = v30;
        if (v30 == *MEMORY[0x263F8FB98] || v30 == *MEMORY[0x263F8FB78] || v30 == *MEMORY[0x263F8FBA0])
        {
          (*(void (**)(char *, uint64_t))(v29 + 8))(v13, v11);
          goto LABEL_36;
        }
        int v37 = *MEMORY[0x263F8FB88];
        (*(void (**)(char *, uint64_t))(v29 + 8))(v13, v11);
        if (v36 == v37) {
          goto LABEL_36;
        }
      }
      uint64_t v20 = AST.Atom._dslBase.getter();
      outlined destroy of MEProgram((uint64_t)v16, type metadata accessor for DSLTree._AST.Atom);
      return v20;
    case 8u:
      return 2037276974;
    case 9u:
      return 0x4E6E6F4E796E612ELL;
    case 0xAu:
      return 3092015;
    default:
      uint64_t v20 = String._quoted.getter(*(void *)v19, *((void *)v19 + 1));
      swift_bridgeObjectRelease();
      return v20;
  }
}

uint64_t DSLTree.CustomCharacterClass.isSimplePrint.getter()
{
  uint64_t v1 = type metadata accessor for DSLTree.Atom(0);
  MEMORY[0x270FA5388](v1);
  uint64_t v3 = (char *)v34 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v4 = type metadata accessor for DSLTree.CustomCharacterClass.Member(0);
  uint64_t v5 = MEMORY[0x270FA5388](v4);
  uint64_t v6 = MEMORY[0x270FA5388](v5);
  uint64_t v8 = (char *)v34 - v7;
  uint64_t v9 = MEMORY[0x270FA5388](v6);
  uint64_t v11 = (char *)v34 - v10;
  MEMORY[0x270FA5388](v9);
  uint64_t v15 = (char *)v34 - v12;
  uint64_t v16 = *v0;
  uint64_t v17 = *(void *)(*v0 + 16);
  if (v17 != 1)
  {
    uint64_t v36 = v13;
    v34[1] = v4;
    uint64_t result = MEMORY[0x263F8EE78];
    uint64_t v38 = MEMORY[0x263F8EE78];
    if (!v17)
    {
LABEL_27:
      uint64_t v33 = *(void *)(result + 16);
      swift_release();
      return v33 == 0;
    }
    char v35 = v3;
    v34[0] = v1;
    unint64_t v20 = 0;
    uint64_t v21 = MEMORY[0x263F8EE78];
    uint64_t v37 = v14;
    while (1)
    {
      if (v20 >= *(void *)(v16 + 16))
      {
        __break(1u);
        return result;
      }
      unint64_t v24 = (*(unsigned __int8 *)(v14 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v14 + 80);
      uint64_t v25 = *(void *)(v14 + 72);
      uint64_t v26 = v16;
      outlined init with copy of MEProgram(v16 + v24 + v25 * v20, (uint64_t)v11, type metadata accessor for DSLTree.CustomCharacterClass.Member);
      outlined init with copy of MEProgram((uint64_t)v11, (uint64_t)v8, type metadata accessor for DSLTree.CustomCharacterClass.Member);
      int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
      if (EnumCaseMultiPayload == 4 || EnumCaseMultiPayload == 3) {
        break;
      }
      if (EnumCaseMultiPayload)
      {
        uint64_t v29 = type metadata accessor for DSLTree.CustomCharacterClass.Member;
        uint64_t v30 = (uint64_t)v8;
        goto LABEL_20;
      }
      outlined init with take of DSLTree.QuantificationKind((uint64_t)v8, (uint64_t)v35, type metadata accessor for DSLTree.Atom);
      int v28 = swift_getEnumCaseMultiPayload();
      if (!v28)
      {
        Swift::String v22 = type metadata accessor for DSLTree.Atom;
        uint64_t v23 = (uint64_t)v35;
        goto LABEL_9;
      }
      if (v28 != 1)
      {
        uint64_t v29 = type metadata accessor for DSLTree.Atom;
        uint64_t v30 = (uint64_t)v35;
LABEL_20:
        outlined destroy of MEProgram(v30, v29);
        outlined init with take of DSLTree.QuantificationKind((uint64_t)v11, v36, type metadata accessor for DSLTree.CustomCharacterClass.Member);
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
          specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(void *)(v21 + 16) + 1, 1);
        }
        uint64_t v21 = v38;
        unint64_t v32 = *(void *)(v38 + 16);
        unint64_t v31 = *(void *)(v38 + 24);
        if (v32 >= v31 >> 1)
        {
          specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v31 > 1, v32 + 1, 1);
          uint64_t v21 = v38;
        }
        *(void *)(v21 + 16) = v32 + 1;
        uint64_t result = outlined init with take of DSLTree.QuantificationKind(v36, v21 + v24 + v32 * v25, type metadata accessor for DSLTree.CustomCharacterClass.Member);
        goto LABEL_11;
      }
LABEL_10:
      uint64_t result = outlined destroy of MEProgram((uint64_t)v11, type metadata accessor for DSLTree.CustomCharacterClass.Member);
LABEL_11:
      ++v20;
      uint64_t v14 = v37;
      uint64_t v16 = v26;
      if (v17 == v20)
      {
        uint64_t result = v38;
        goto LABEL_27;
      }
    }
    Swift::String v22 = type metadata accessor for DSLTree.CustomCharacterClass.Member;
    uint64_t v23 = (uint64_t)v8;
LABEL_9:
    outlined destroy of MEProgram(v23, v22);
    goto LABEL_10;
  }
  outlined init with copy of MEProgram(v16 + ((*(unsigned __int8 *)(v14 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v14 + 80)), (uint64_t)v34 - v12, type metadata accessor for DSLTree.CustomCharacterClass.Member);
  int v18 = swift_getEnumCaseMultiPayload();
  if (v18 == 7 || v18 == 6 || v18 == 5)
  {
    outlined destroy of MEProgram((uint64_t)v15, type metadata accessor for DSLTree.CustomCharacterClass.Member);
    return 0;
  }
  else
  {
    outlined destroy of MEProgram((uint64_t)v15, type metadata accessor for DSLTree.CustomCharacterClass.Member);
    return 1;
  }
}

uint64_t AST.Atom._regexBase.getter()
{
  uint64_t v0 = type metadata accessor for AST.Atom.EscapedBuiltin();
  uint64_t v33 = *(void *)(v0 - 8);
  MEMORY[0x270FA5388](v0);
  uint64_t v2 = (char *)&v32 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v3 = type metadata accessor for AST.Atom.CharacterProperty();
  uint64_t v4 = *(void *)(v3 - 8);
  uint64_t v5 = MEMORY[0x270FA5388](v3);
  uint64_t v7 = (char *)&v32 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v5);
  uint64_t v9 = (char *)&v32 - v8;
  uint64_t v10 = type metadata accessor for AST.Atom.Kind();
  uint64_t v11 = *(void *)(v10 - 8);
  MEMORY[0x270FA5388](v10);
  uint64_t v13 = (uint64_t *)((char *)&v32 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0));
  AST.Atom.kind.getter();
  int v14 = (*(uint64_t (**)(uint64_t *, uint64_t))(v11 + 88))(v13, v10);
  if (v14 == *MEMORY[0x263F8FBC0] || v14 == *MEMORY[0x263F8FBC8] || v14 == *MEMORY[0x263F8FB90])
  {
    (*(void (**)(uint64_t *, uint64_t))(v11 + 8))(v13, v10);
    uint64_t v17 = AST.Atom.literalStringValue.getter();
    if (v18) {
      return v17;
    }
    __break(1u);
  }
  else
  {
    if (v14 == *MEMORY[0x263F8FBE8])
    {
      (*(void (**)(uint64_t *, uint64_t))(v11 + 96))(v13, v10);
      unint64_t v20 = *(void (**)(char *, uint64_t *, uint64_t))(v4 + 32);
      v20(v9, v13, v3);
      uint64_t v19 = AST.Atom.CharacterProperty._regexBase.getter();
      uint64_t v22 = v21;
      v20(v7, (uint64_t *)v9, v3);
      if (v22)
      {
        (*(void (**)(char *, uint64_t))(v4 + 8))(v7, v3);
        return v19;
      }
      uint64_t v34 = 0;
      unint64_t v35 = 0xE000000000000000;
      _StringGuts.grow(_:)(21);
      v27._uint64_t countAndFlagsBits = 0xD000000000000013;
      v27._uint64_t object = (void *)0x8000000209FB68B0;
      String.append(_:)(v27);
      _print_unlocked<A, B>(_:_:)();
      (*(void (**)(char *, uint64_t))(v4 + 8))(v7, v3);
      return v34;
    }
    if (v14 == *MEMORY[0x263F8FBD8])
    {
      (*(void (**)(uint64_t *, uint64_t))(v11 + 96))(v13, v10);
      uint64_t v23 = v33;
      (*(void (**)(char *, uint64_t *, uint64_t))(v33 + 32))(v2, v13, v0);
      uint64_t v34 = 0;
      unint64_t v35 = 0xE000000000000000;
      v24._uint64_t countAndFlagsBits = 92;
      v24._uint64_t object = (void *)0xE100000000000000;
      String.append(_:)(v24);
      AST.Atom.EscapedBuiltin.character.getter();
      (*(void (**)(char *, uint64_t))(v23 + 8))(v2, v0);
      Character.write<A>(to:)();
LABEL_24:
      swift_bridgeObjectRelease();
      return v34;
    }
    if (v14 == *MEMORY[0x263F8FB98])
    {
      (*(void (**)(uint64_t *, uint64_t))(v11 + 96))(v13, v10);
      uint64_t v34 = 0;
      unint64_t v35 = 0xE000000000000000;
      uint64_t v25 = 25436;
      unint64_t v26 = 0xE200000000000000;
LABEL_23:
      String.append(_:)(*(Swift::String *)&v25);
      Character.write<A>(to:)();
      goto LABEL_24;
    }
    if (v14 == *MEMORY[0x263F8FB78])
    {
      (*(void (**)(uint64_t *, uint64_t))(v11 + 96))(v13, v10);
      uint64_t v34 = 0;
      unint64_t v35 = 0xE000000000000000;
      uint64_t v25 = 2968924;
      unint64_t v26 = 0xE300000000000000;
      goto LABEL_23;
    }
    if (v14 == *MEMORY[0x263F8FBA0])
    {
      (*(void (**)(uint64_t *, uint64_t))(v11 + 96))(v13, v10);
      uint64_t v34 = 0;
      unint64_t v35 = 0xE000000000000000;
      uint64_t v25 = 0x2D435C2D4D5CLL;
      unint64_t v26 = 0xE600000000000000;
      goto LABEL_23;
    }
    if (v14 == *MEMORY[0x263F8FB88])
    {
      (*(void (**)(uint64_t *, uint64_t))(v11 + 96))(v13, v10);
      v29._uint64_t countAndFlagsBits = *v13;
      uint64_t v30 = (void *)v13[1];
      uint64_t v34 = 8080988;
      unint64_t v35 = 0xE300000000000000;
      v29._uint64_t object = v30;
      String.append(_:)(v29);
      swift_bridgeObjectRelease();
      v31._uint64_t countAndFlagsBits = 125;
      v31._uint64_t object = (void *)0xE100000000000000;
      String.append(_:)(v31);
      return v34;
    }
    if (v14 == *MEMORY[0x263F8FB80])
    {
      (*(void (**)(uint64_t *, uint64_t))(v11 + 8))(v13, v10);
      return 0xD00000000000001BLL;
    }
    if (v14 == *MEMORY[0x263F8FB60])
    {
      (*(void (**)(uint64_t *, uint64_t))(v11 + 8))(v13, v10);
      return 0xD000000000000017;
    }
    if (v14 == *MEMORY[0x263F8FBD0])
    {
      (*(void (**)(uint64_t *, uint64_t))(v11 + 8))(v13, v10);
      return 0xD000000000000014;
    }
    if (v14 == *MEMORY[0x263F8FBA8] || v14 == *MEMORY[0x263F8FBB0])
    {
      uint64_t v19 = 0xD000000000000023;
      (*(void (**)(uint64_t *, uint64_t))(v11 + 8))(v13, v10);
      return v19;
    }
    if (v14 == *MEMORY[0x263F8FBB8]) {
      return 46;
    }
    if (v14 != *MEMORY[0x263F8FB68] && v14 != *MEMORY[0x263F8FB70] && v14 == *MEMORY[0x263F8FBE0]) {
      return 0x2365756C6176233CLL;
    }
  }
  uint64_t result = _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t String._quoted.getter(uint64_t a1, unint64_t a2)
{
  uint64_t v2 = specialized RangeReplaceableCollection<>._replacing<A, B>(_:with:maxReplacements:)(92, 0xE100000000000000, 23644, 0xE200000000000000, 0x7FFFFFFFFFFFFFFFuLL, a1, a2);
  uint64_t v4 = specialized RangeReplaceableCollection<>._replacing<A, B>(_:with:maxReplacements:)(34, 0xE100000000000000, 8796, 0xE200000000000000, 0x7FFFFFFFFFFFFFFFuLL, v2, v3);
  uint64_t v6 = v5;
  swift_bridgeObjectRelease();
  v7._uint64_t countAndFlagsBits = v4;
  v7._uint64_t object = v6;
  String.append(_:)(v7);
  swift_bridgeObjectRelease();
  v8._uint64_t countAndFlagsBits = 34;
  v8._uint64_t object = (void *)0xE100000000000000;
  String.append(_:)(v8);
  return 34;
}

uint64_t DSLTree.CustomCharacterClass.hasUnprintableProperty.getter()
{
  uint64_t v1 = type metadata accessor for DSLTree.CustomCharacterClass.Member(0);
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t result = MEMORY[0x270FA5388](v1 - 8);
  uint64_t v5 = (char *)&v11 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  unint64_t v6 = 0;
  uint64_t v7 = *v0;
  uint64_t v8 = *(void *)(*v0 + 16);
  while (1)
  {
    unint64_t v9 = v6;
    if (v8 == v6) {
      return v8 != v9;
    }
    if (v6 >= *(void *)(v7 + 16)) {
      break;
    }
    ++v6;
    outlined init with copy of MEProgram(v7+ ((*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80))+ *(void *)(v2 + 72) * v9, (uint64_t)v5, type metadata accessor for DSLTree.CustomCharacterClass.Member);
    char v10 = DSLTree.CustomCharacterClass.Member.isUnprintableMember.getter();
    uint64_t result = outlined destroy of MEProgram((uint64_t)v5, type metadata accessor for DSLTree.CustomCharacterClass.Member);
    if (v10) {
      return v8 != v9;
    }
  }
  __break(1u);
  return result;
}

Swift::Void __swiftcall PrettyPrinter.printAsRegex(_:asFullRegex:terminateLine:)(_StringProcessing::DSLTree::CustomCharacterClass _, Swift::Bool asFullRegex, Swift::Bool terminateLine)
{
  Swift::Bool isInverted = _.isInverted;
  unint64_t rawValue = (unsigned __int8 *)_.members._rawValue;
  uint64_t v6 = type metadata accessor for DSLTree.CustomCharacterClass.Member(0);
  uint64_t v7 = *(void *)(v6 - 8);
  MEMORY[0x270FA5388](v6 - 8);
  unint64_t v9 = (char *)&v21 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = *(void *)rawValue;
  int v11 = rawValue[8];
  PrettyPrinter.indent()();
  if (isInverted)
  {
    v12._uint64_t countAndFlagsBits = 12067;
    v12._uint64_t object = (void *)0xE200000000000000;
    PrettyPrinter.output(_:)(v12);
  }
  v13._uint64_t countAndFlagsBits = 91;
  v13._uint64_t object = (void *)0xE100000000000000;
  PrettyPrinter.output(_:)(v13);
  if (v11)
  {
    v14._uint64_t countAndFlagsBits = 94;
    v14._uint64_t object = (void *)0xE100000000000000;
    PrettyPrinter.output(_:)(v14);
  }
  uint64_t v15 = *(void *)(v10 + 16);
  if (v15)
  {
    unint64_t v16 = 0;
    while (v16 < *(void *)(v10 + 16))
    {
      unint64_t v17 = v16 + 1;
      outlined init with copy of MEProgram(v10+ ((*(unsigned __int8 *)(v7 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80))+ *(void *)(v7 + 72) * v16, (uint64_t)v9, type metadata accessor for DSLTree.CustomCharacterClass.Member);
      PrettyPrinter.printAsRegex(_:)((uint64_t)v9);
      outlined destroy of MEProgram((uint64_t)v9, type metadata accessor for DSLTree.CustomCharacterClass.Member);
      unint64_t v16 = v17;
      if (v15 == v17) {
        goto LABEL_9;
      }
    }
    __break(1u);
  }
  else
  {
LABEL_9:
    v18._uint64_t countAndFlagsBits = 93;
    v18._uint64_t object = (void *)0xE100000000000000;
    PrettyPrinter.output(_:)(v18);
    if (isInverted)
    {
      uint64_t v19 = 9007;
      unint64_t v20 = 0xE200000000000000;
      if (asFullRegex) {
        PrettyPrinter.print(_:)(*(Swift::String *)&v19);
      }
      else {
        PrettyPrinter.output(_:)(*(Swift::String *)&v19);
      }
    }
  }
}

void PrettyPrinter.printAsPattern(_:wrap:)(uint64_t a1, char a2)
{
  uint64_t v4 = type metadata accessor for DSLTree._AST.Atom(0);
  MEMORY[0x270FA5388](v4 - 8);
  uint64_t v6 = (char *)&v93 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = type metadata accessor for DSLTree.Atom(0);
  uint64_t v8 = MEMORY[0x270FA5388](v7);
  uint64_t v10 = (uint64_t *)((char *)&v93 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v11 = MEMORY[0x270FA5388](v8);
  Swift::String v13 = (char *)&v93 - v12;
  uint64_t v14 = MEMORY[0x270FA5388](v11);
  unint64_t v16 = (char *)&v93 - v15;
  MEMORY[0x270FA5388](v14);
  Swift::String v18 = (char *)&v93 - v17;
  uint64_t v19 = type metadata accessor for DSLTree.CustomCharacterClass.Member(0);
  MEMORY[0x270FA5388](v19);
  uint64_t v21 = (char *)&v93 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of MEProgram(a1, (uint64_t)v21, type metadata accessor for DSLTree.CustomCharacterClass.Member);
  switch(swift_getEnumCaseMultiPayload())
  {
    case 1u:
      uint64_t v29 = (uint64_t)&v21[*(int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (DSLTree.Atom, DSLTree.Atom))
                                 + 48)];
      outlined init with take of DSLTree.QuantificationKind((uint64_t)v21, (uint64_t)v18, type metadata accessor for DSLTree.Atom);
      outlined init with take of DSLTree.QuantificationKind(v29, (uint64_t)v16, type metadata accessor for DSLTree.Atom);
      uint64_t v30 = v93;
      uint64_t v31 = DSLTree.Atom._patternBase(_:)(v93);
      uint64_t v33 = v32;
      outlined destroy of MEProgram((uint64_t)v18, type metadata accessor for DSLTree.Atom);
      if (v33)
      {
        uint64_t v34 = DSLTree.Atom._patternBase(_:)(v30);
        uint64_t v36 = v35;
        outlined destroy of MEProgram((uint64_t)v16, type metadata accessor for DSLTree.Atom);
        if (!v36) {
          goto LABEL_49;
        }
        PrettyPrinter.indent()();
        v37._unint64_t countAndFlagsBits = 40;
        v37._uint64_t object = (void *)0xE100000000000000;
        PrettyPrinter.output(_:)(v37);
        v38._unint64_t countAndFlagsBits = v31;
        v38._uint64_t object = v33;
        PrettyPrinter.output(_:)(v38);
        swift_bridgeObjectRelease();
        v39._unint64_t countAndFlagsBits = 3026478;
        v39._uint64_t object = (void *)0xE300000000000000;
        PrettyPrinter.output(_:)(v39);
        v40._unint64_t countAndFlagsBits = v34;
        v40._uint64_t object = v36;
        PrettyPrinter.output(_:)(v40);
        swift_bridgeObjectRelease();
        v41._unint64_t countAndFlagsBits = 41;
        v41._uint64_t object = (void *)0xE100000000000000;
        PrettyPrinter.output(_:)(v41);
      }
      else
      {
        outlined destroy of MEProgram((uint64_t)v16, type metadata accessor for DSLTree.Atom);
      }
      return;
    case 2u:
      char v42 = v21[8];
      v96._unint64_t countAndFlagsBits = *(void *)v21;
      LOBYTE(v96._object) = v42;
      v97.members._unint64_t rawValue = &v96;
      v97.Swift::Bool isInverted = 1;
      PrettyPrinter.printAsPattern(_:wrap:terminateLine:)(v97, 0, v22);
      goto LABEL_49;
    case 3u:
      uint64_t v44 = *(void *)v21;
      unint64_t v43 = *((void *)v21 + 1);
      if (a2)
      {
        v96._unint64_t countAndFlagsBits = 0x796E612E28656E4FLL;
        v96._uint64_t object = (void *)0xEB0000000028664FLL;
        uint64_t v45 = String._quoted.getter(v44, v43);
        Swift::String v47 = v46;
        swift_bridgeObjectRelease();
        v48._unint64_t countAndFlagsBits = v45;
        v48._uint64_t object = v47;
        String.append(_:)(v48);
        swift_bridgeObjectRelease();
        uint64_t v49 = 10537;
        unint64_t v50 = 0xE200000000000000;
      }
      else
      {
        v96._unint64_t countAndFlagsBits = 0;
        v96._uint64_t object = (void *)0xE000000000000000;
        _StringGuts.grow(_:)(24);
        swift_bridgeObjectRelease();
        v96._unint64_t countAndFlagsBits = 0xD000000000000015;
        v96._uint64_t object = (void *)0x8000000209FB6CD0;
        uint64_t v58 = String._quoted.getter(v44, v43);
        uint64_t v60 = v59;
        swift_bridgeObjectRelease();
        v61._unint64_t countAndFlagsBits = v58;
        v61._uint64_t object = v60;
        String.append(_:)(v61);
        swift_bridgeObjectRelease();
        uint64_t v49 = 41;
        unint64_t v50 = 0xE100000000000000;
      }
      goto LABEL_47;
    case 4u:
      outlined destroy of MEProgram((uint64_t)v21, type metadata accessor for DSLTree.CustomCharacterClass.Member);
      return;
    case 5u:
      uint64_t v51 = *(void *)(*(void *)v21 + 16);
      char v52 = *(unsigned char *)(*(void *)v21 + 24);
      uint64_t v53 = *(void *)(*(void *)v21 + 32);
      char v54 = *(unsigned char *)(*(void *)v21 + 40);
      char v55 = a2;
      if ((a2 & 1) == 0)
      {
        swift_bridgeObjectRetain();
        goto LABEL_27;
      }
      v96._unint64_t countAndFlagsBits = *(void *)(*(void *)v21 + 16);
      LOBYTE(v96._object) = v52;
      swift_bridgeObjectRetain();
      if ((DSLTree.CustomCharacterClass.isSimplePrint.getter() & 1) == 0) {
        goto LABEL_27;
      }
      goto LABEL_14;
    case 6u:
      uint64_t v51 = *(void *)(*(void *)v21 + 16);
      char v52 = *(unsigned char *)(*(void *)v21 + 24);
      uint64_t v53 = *(void *)(*(void *)v21 + 32);
      char v54 = *(unsigned char *)(*(void *)v21 + 40);
      char v55 = a2;
      if ((a2 & 1) == 0)
      {
        swift_bridgeObjectRetain();
        goto LABEL_27;
      }
      v96._unint64_t countAndFlagsBits = *(void *)(*(void *)v21 + 16);
      LOBYTE(v96._object) = v52;
      swift_bridgeObjectRetain();
      if ((DSLTree.CustomCharacterClass.isSimplePrint.getter() & 1) == 0) {
        goto LABEL_27;
      }
      goto LABEL_14;
    case 7u:
      uint64_t v51 = *(void *)(*(void *)v21 + 16);
      char v52 = *(unsigned char *)(*(void *)v21 + 24);
      uint64_t v53 = *(void *)(*(void *)v21 + 32);
      char v54 = *(unsigned char *)(*(void *)v21 + 40);
      char v55 = a2;
      if (a2)
      {
        v96._unint64_t countAndFlagsBits = *(void *)(*(void *)v21 + 16);
        LOBYTE(v96._object) = v52;
        swift_bridgeObjectRetain();
        if (DSLTree.CustomCharacterClass.isSimplePrint.getter())
        {
LABEL_14:
          PrettyPrinter.indent()();
          v57._unint64_t countAndFlagsBits = 677736015;
          v57._uint64_t object = (void *)0xE400000000000000;
          PrettyPrinter.output(_:)(v57);
        }
      }
      else
      {
        swift_bridgeObjectRetain();
      }
LABEL_27:
      v96._unint64_t countAndFlagsBits = v51;
      LOBYTE(v96._object) = v52;
      v98.members._unint64_t rawValue = &v96;
      v98.Swift::Bool isInverted = 0;
      PrettyPrinter.printAsPattern(_:wrap:terminateLine:)(v98, 1, v56);
      MEMORY[0x270FA5388](v62);
      *(&v93 - 2) = v53;
      *((unsigned char *)&v93 - 8) = v54;
      PrettyPrinter.printIndented(_:)();
      if (v55)
      {
        v96._unint64_t countAndFlagsBits = v51;
        LOBYTE(v96._object) = v52;
        char v63 = DSLTree.CustomCharacterClass.isSimplePrint.getter();
        swift_bridgeObjectRelease();
        if (v63)
        {
          v64._unint64_t countAndFlagsBits = 41;
          v64._uint64_t object = (void *)0xE100000000000000;
          PrettyPrinter.output(_:)(v64);
        }
        swift_release();
      }
      else
      {
        swift_release();
LABEL_49:
        swift_bridgeObjectRelease();
      }
      return;
    default:
      outlined init with take of DSLTree.QuantificationKind((uint64_t)v21, (uint64_t)v13, type metadata accessor for DSLTree.Atom);
      PrettyPrinter.indent()();
      outlined init with copy of MEProgram((uint64_t)v13, (uint64_t)v10, type metadata accessor for DSLTree.Atom);
      switch(swift_getEnumCaseMultiPayload())
      {
        case 0u:
          outlined destroy of MEProgram((uint64_t)v13, type metadata accessor for DSLTree.Atom);
          uint64_t v24 = *v10;
          unint64_t v23 = v10[1];
          if (a2)
          {
            v96._unint64_t countAndFlagsBits = 0x796E612E28656E4FLL;
            v96._uint64_t object = (void *)0xEB0000000028664FLL;
            uint64_t v25 = String._quoted.getter(v24, v23);
            Swift::String v27 = v26;
            swift_bridgeObjectRelease();
            v28._unint64_t countAndFlagsBits = v25;
            v28._uint64_t object = v27;
            String.append(_:)(v28);
            goto LABEL_36;
          }
          v96._unint64_t countAndFlagsBits = 0;
          v96._uint64_t object = (void *)0xE000000000000000;
          _StringGuts.grow(_:)(24);
          swift_bridgeObjectRelease();
          v96._unint64_t countAndFlagsBits = 0xD000000000000015;
          v96._uint64_t object = (void *)0x8000000209FB6CD0;
          uint64_t v81 = String._quoted.getter(v24, v23);
          unint64_t v83 = v82;
          swift_bridgeObjectRelease();
          v84._unint64_t countAndFlagsBits = v81;
          v84._uint64_t object = v83;
          String.append(_:)(v84);
          goto LABEL_46;
        case 1u:
          outlined destroy of MEProgram((uint64_t)v13, type metadata accessor for DSLTree.Atom);
          int v65 = *(_DWORD *)v10;
          if ((a2 & 1) == 0)
          {
            v96._unint64_t countAndFlagsBits = 0;
            v96._uint64_t object = (void *)0xE000000000000000;
            _StringGuts.grow(_:)(24);
            swift_bridgeObjectRelease();
            v96._unint64_t countAndFlagsBits = 0xD000000000000015;
            v96._uint64_t object = (void *)0x8000000209FB6CD0;
            v95._unint64_t countAndFlagsBits = 8090972;
            v95._uint64_t object = (void *)0xE300000000000000;
            int v94 = v65;
            lazy protocol witness table accessor for type UInt32 and conformance UInt32();
            v85._unint64_t countAndFlagsBits = String.init<A>(_:radix:uppercase:)();
            String.append(_:)(v85);
            swift_bridgeObjectRelease();
            v86._unint64_t countAndFlagsBits = 125;
            v86._uint64_t object = (void *)0xE100000000000000;
            String.append(_:)(v86);
            v87._unint64_t countAndFlagsBits = v95._countAndFlagsBits;
            uint64_t object = v95._object;
            v95._unint64_t countAndFlagsBits = 34;
            v95._uint64_t object = (void *)0xE100000000000000;
            v87._uint64_t object = object;
            String.append(_:)(v87);
            swift_bridgeObjectRelease();
            v89._unint64_t countAndFlagsBits = 34;
            v89._uint64_t object = (void *)0xE100000000000000;
            String.append(_:)(v89);
            unint64_t countAndFlagsBits = v95._countAndFlagsBits;
            unint64_t v73 = v95._object;
            goto LABEL_45;
          }
          v96._unint64_t countAndFlagsBits = 0x796E612E28656E4FLL;
          v96._uint64_t object = (void *)0xEB0000000028664FLL;
          v95._unint64_t countAndFlagsBits = 8090972;
          v95._uint64_t object = (void *)0xE300000000000000;
          int v94 = v65;
          lazy protocol witness table accessor for type UInt32 and conformance UInt32();
          v66._unint64_t countAndFlagsBits = String.init<A>(_:radix:uppercase:)();
          String.append(_:)(v66);
          swift_bridgeObjectRelease();
          v67._unint64_t countAndFlagsBits = 125;
          v67._uint64_t object = (void *)0xE100000000000000;
          String.append(_:)(v67);
          v68._unint64_t countAndFlagsBits = v95._countAndFlagsBits;
          Swift::String v69 = v95._object;
          v95._unint64_t countAndFlagsBits = 34;
          v95._uint64_t object = (void *)0xE100000000000000;
          v68._uint64_t object = v69;
          String.append(_:)(v68);
          swift_bridgeObjectRelease();
          v70._unint64_t countAndFlagsBits = 34;
          v70._uint64_t object = (void *)0xE100000000000000;
          String.append(_:)(v70);
          String.append(_:)(v95);
LABEL_36:
          swift_bridgeObjectRelease();
          uint64_t v49 = 10537;
          unint64_t v50 = 0xE200000000000000;
          break;
        case 2u:
          outlined destroy of MEProgram((uint64_t)v13, type metadata accessor for DSLTree.Atom);
          char v71 = *(unsigned char *)v10;
          if ((a2 & 1) == 0)
          {
            LOBYTE(v96._countAndFlagsBits) = *(unsigned char *)v10;
            unint64_t v90 = DSLTree.Atom.CharacterClass._patternBase.getter();
            goto LABEL_48;
          }
          v96._unint64_t countAndFlagsBits = 677736015;
          v96._uint64_t object = (void *)0xE400000000000000;
          LOBYTE(v95._countAndFlagsBits) = v71;
          unint64_t countAndFlagsBits = DSLTree.Atom.CharacterClass._patternBase.getter();
LABEL_45:
          String.append(_:)(*(Swift::String *)&countAndFlagsBits);
          goto LABEL_46;
        case 7u:
          outlined destroy of MEProgram((uint64_t)v13, type metadata accessor for DSLTree.Atom);
          outlined init with take of DSLTree.QuantificationKind((uint64_t)v10, (uint64_t)v6, type metadata accessor for DSLTree._AST.Atom);
          unint64_t v74 = AST.Atom._patternBase.getter();
          uint64_t v76 = v75;
          char v78 = v77;
          outlined destroy of MEProgram((uint64_t)v6, type metadata accessor for DSLTree._AST.Atom);
          if ((v78 & 1) == 0 || (a2 & 1) == 0)
          {
            v92._unint64_t countAndFlagsBits = v74;
            v92._uint64_t object = v76;
            PrettyPrinter.output(_:)(v92);
            goto LABEL_49;
          }
          v96._unint64_t countAndFlagsBits = 677736015;
          v96._uint64_t object = (void *)0xE400000000000000;
          v79._unint64_t countAndFlagsBits = v74;
          v79._uint64_t object = v76;
          String.append(_:)(v79);
LABEL_46:
          swift_bridgeObjectRelease();
          uint64_t v49 = 41;
          unint64_t v50 = 0xE100000000000000;
          break;
        default:
          v96._unint64_t countAndFlagsBits = 0;
          v96._uint64_t object = (void *)0xE000000000000000;
          _StringGuts.grow(_:)(17);
          v80._unint64_t countAndFlagsBits = 0x4F444F54202F2F20;
          v80._uint64_t object = (void *)0xEF206D6F7441203ALL;
          String.append(_:)(v80);
          _print_unlocked<A, B>(_:_:)();
          outlined destroy of MEProgram((uint64_t)v13, type metadata accessor for DSLTree.Atom);
          PrettyPrinter.print(_:)(v96);
          swift_bridgeObjectRelease();
          outlined destroy of MEProgram((uint64_t)v10, type metadata accessor for DSLTree.Atom);
          return;
      }
LABEL_47:
      String.append(_:)(*(Swift::String *)&v49);
      unint64_t v90 = v96._countAndFlagsBits;
      int v91 = v96._object;
LABEL_48:
      PrettyPrinter.output(_:)(*(Swift::String *)&v90);
      goto LABEL_49;
  }
}

uint64_t closure #1 in PrettyPrinter.printAsPattern(_:wrap:terminateLine:)(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for DSLTree.Atom(0);
  MEMORY[0x270FA5388](v2);
  uint64_t v4 = (char *)v30 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = type metadata accessor for DSLTree.CustomCharacterClass.Member(0);
  MEMORY[0x270FA5388](v5);
  uint64_t v7 = (char *)v30 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of MEProgram(a1, (uint64_t)v7, type metadata accessor for DSLTree.CustomCharacterClass.Member);
  int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  if (EnumCaseMultiPayload != 4)
  {
    if (EnumCaseMultiPayload == 3)
    {
      uint64_t v16 = specialized RangeReplaceableCollection<>._replacing<A, B>(_:with:maxReplacements:)(92, 0xE100000000000000, 23644, 0xE200000000000000, 0x7FFFFFFFFFFFFFFFuLL, *(void *)v7, *((void *)v7 + 1));
      unint64_t v18 = v17;
      swift_bridgeObjectRelease();
      uint64_t v19 = specialized RangeReplaceableCollection<>._replacing<A, B>(_:with:maxReplacements:)(34, 0xE100000000000000, 8796, 0xE200000000000000, 0x7FFFFFFFFFFFFFFFuLL, v16, v18);
      unint64_t v21 = v20;
      swift_bridgeObjectRelease();
      uint64_t v22 = v19;
    }
    else
    {
      if (EnumCaseMultiPayload)
      {
        unint64_t v23 = type metadata accessor for DSLTree.CustomCharacterClass.Member;
        uint64_t v24 = (uint64_t)v7;
LABEL_12:
        outlined destroy of MEProgram(v24, v23);
        return 1;
      }
      outlined init with take of DSLTree.QuantificationKind((uint64_t)v7, (uint64_t)v4, type metadata accessor for DSLTree.Atom);
      int v9 = swift_getEnumCaseMultiPayload();
      if (v9 == 7)
      {
LABEL_11:
        unint64_t v23 = type metadata accessor for DSLTree.Atom;
        uint64_t v24 = (uint64_t)v4;
        goto LABEL_12;
      }
      if (v9 != 1)
      {
        if (!v9)
        {
          uint64_t v10 = specialized RangeReplaceableCollection<>._replacing<A, B>(_:with:maxReplacements:)(92, 0xE100000000000000, 23644, 0xE200000000000000, 0x7FFFFFFFFFFFFFFFuLL, *(void *)v4, *((void *)v4 + 1));
          uint64_t v12 = specialized RangeReplaceableCollection<>._replacing<A, B>(_:with:maxReplacements:)(34, 0xE100000000000000, 8796, 0xE200000000000000, 0x7FFFFFFFFFFFFFFFuLL, v10, v11);
          uint64_t v14 = v13;
          swift_bridgeObjectRelease();
          v15._unint64_t countAndFlagsBits = v12;
          v15._uint64_t object = v14;
          String.append(_:)(v15);
          swift_bridgeObjectRelease();
LABEL_15:
          swift_bridgeObjectRelease();
          return 0;
        }
        goto LABEL_11;
      }
      int v26 = *(_DWORD *)v4;
      uint64_t v31 = 8090972;
      unint64_t v32 = 0xE300000000000000;
      v30[3] = v26;
      lazy protocol witness table accessor for type UInt32 and conformance UInt32();
      v27._unint64_t countAndFlagsBits = String.init<A>(_:radix:uppercase:)();
      String.append(_:)(v27);
      swift_bridgeObjectRelease();
      v28._unint64_t countAndFlagsBits = 125;
      v28._uint64_t object = (void *)0xE100000000000000;
      String.append(_:)(v28);
      uint64_t v22 = v31;
      unint64_t v21 = v32;
    }
    unint64_t v29 = v21;
    String.append(_:)(*(Swift::String *)&v22);
    goto LABEL_15;
  }
  outlined destroy of MEProgram((uint64_t)v7, type metadata accessor for DSLTree.CustomCharacterClass.Member);
  return 0;
}

void closure #2 in PrettyPrinter.printAsPattern(_:wrap:terminateLine:)(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v5 = type metadata accessor for DSLTree.CustomCharacterClass.Member(0);
  uint64_t v35 = *(void *)(v5 - 8);
  MEMORY[0x270FA5388](v5 - 8);
  uint64_t v38 = (uint64_t)&v34 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (offset: Int, element: DSLTree.CustomCharacterClass.Member));
  uint64_t v8 = *(void *)(v7 - 8);
  MEMORY[0x270FA5388](v7);
  uint64_t v34 = (char *)&v34 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (offset: Int, element: DSLTree.CustomCharacterClass.Member)?);
  uint64_t v11 = MEMORY[0x270FA5388](v10 - 8);
  Swift::String v13 = (unint64_t *)((char *)&v34 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0));
  MEMORY[0x270FA5388](v11);
  Swift::String v15 = (uint64_t *)((char *)&v34 - v14);
  PrettyPrinter.indent()();
  uint64_t v16 = *a2;
  unint64_t v17 = a2[1];
  uint64_t v18 = HIBYTE(v17) & 0xF;
  if ((v17 & 0x2000000000000000) == 0) {
    uint64_t v18 = v16 & 0xFFFFFFFFFFFFLL;
  }
  if (v18)
  {
    v41._unint64_t countAndFlagsBits = 0x28664F796E612ELL;
    v41._uint64_t object = (void *)0xE700000000000000;
    v40._unint64_t countAndFlagsBits = 34;
    v40._uint64_t object = (void *)0xE100000000000000;
    swift_bridgeObjectRetain();
    v19._unint64_t countAndFlagsBits = v16;
    v19._uint64_t object = (void *)v17;
    String.append(_:)(v19);
    v20._unint64_t countAndFlagsBits = 34;
    v20._uint64_t object = (void *)0xE100000000000000;
    String.append(_:)(v20);
    swift_bridgeObjectRelease();
    String.append(_:)(v40);
    swift_bridgeObjectRelease();
    v21._unint64_t countAndFlagsBits = 41;
    v21._uint64_t object = (void *)0xE100000000000000;
    String.append(_:)(v21);
    PrettyPrinter.output(_:)(v41);
    swift_bridgeObjectRelease();
    if (*(void *)(a3 + 16))
    {
      v22._unint64_t countAndFlagsBits = 44;
      v22._uint64_t object = (void *)0xE100000000000000;
      PrettyPrinter.output(_:)(v22);
    }
    PrettyPrinter.terminateLine()();
  }
  unint64_t v23 = 0;
  unint64_t v24 = *(void *)(a3 + 16);
  Swift::String v39 = (void (**)(unint64_t *, uint64_t, uint64_t, uint64_t))(v8 + 56);
  uint64_t v25 = (unsigned int (**)(uint64_t *, uint64_t, uint64_t))(v8 + 48);
  uint64_t v36 = a3;
  unint64_t v37 = v24 - 1;
  while (1)
  {
    if (v23 == v24)
    {
      uint64_t v26 = 1;
      unint64_t v23 = v24;
      goto LABEL_13;
    }
    if (v23 >= v24) {
      break;
    }
    uint64_t v27 = (uint64_t)&v34[*(int *)(v7 + 48)];
    outlined init with copy of MEProgram(v36+ ((*(unsigned __int8 *)(v35 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v35 + 80))+ *(void *)(v35 + 72) * v23, v27, type metadata accessor for DSLTree.CustomCharacterClass.Member);
    uint64_t v28 = (uint64_t)v13 + *(int *)(v7 + 48);
    *Swift::String v13 = v23;
    outlined init with take of DSLTree.QuantificationKind(v27, v28, type metadata accessor for DSLTree.CustomCharacterClass.Member);
    uint64_t v26 = 0;
    ++v23;
LABEL_13:
    (*v39)(v13, v26, 1, v7);
    outlined init with take of (offset: Int, element: (CaptureList.Capture, Processor._StoredCapture))?((uint64_t)v13, (uint64_t)v15, &demangling cache variable for type metadata for (offset: Int, element: DSLTree.CustomCharacterClass.Member)?);
    if ((*v25)(v15, 1, v7) == 1) {
      return;
    }
    unint64_t v29 = v13;
    unint64_t v30 = v24;
    uint64_t v31 = *v15;
    uint64_t v32 = v38;
    outlined init with take of DSLTree.QuantificationKind((uint64_t)v15 + *(int *)(v7 + 48), v38, type metadata accessor for DSLTree.CustomCharacterClass.Member);
    PrettyPrinter.printAsPattern(_:wrap:)(v32, 0);
    outlined destroy of MEProgram(v32, type metadata accessor for DSLTree.CustomCharacterClass.Member);
    if (v31 != v37)
    {
      v33._unint64_t countAndFlagsBits = 44;
      v33._uint64_t object = (void *)0xE100000000000000;
      PrettyPrinter.output(_:)(v33);
    }
    PrettyPrinter.terminateLine()();
    unint64_t v24 = v30;
    Swift::String v13 = v29;
  }
  __break(1u);
}

unint64_t DSLTree.Atom.CharacterClass._patternBase.getter()
{
  unint64_t result = 0xD000000000000013;
  switch(*v0)
  {
    case 1:
      unint64_t result = 0x692E74696769642ELL;
      break;
    case 2:
      unint64_t result = 0xD000000000000015;
      break;
    case 3:
      unint64_t result = 0xD00000000000001ELL;
      break;
    case 4:
      unint64_t result = 0xD000000000000010;
      break;
    case 5:
      unint64_t result = 0xD000000000000019;
      break;
    case 6:
      unint64_t result = 0x707365746968772ELL;
      break;
    case 7:
      unint64_t result = 0xD000000000000014;
      break;
    case 8:
    case 0xC:
      return result;
    case 9:
      unint64_t result = 0xD00000000000001CLL;
      break;
    case 0xA:
      unint64_t result = 0x64726F772ELL;
      break;
    case 0xB:
      unint64_t result = 0x6E692E64726F772ELL;
      break;
    case 0xD:
      _assertionFailure(_:_:file:line:flags:)();
      __break(1u);
      JUMPOUT(0x209F68698);
    default:
      unint64_t result = 0x74696769642ELL;
      break;
  }
  return result;
}

uint64_t PrettyPrinter.printAsRegex(_:)(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for DSLTree._AST.Atom(0);
  MEMORY[0x270FA5388](v2 - 8);
  uint64_t v4 = (char *)&v51 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = type metadata accessor for DSLTree.Atom(0);
  uint64_t v6 = MEMORY[0x270FA5388](v5);
  uint64_t v8 = (uint64_t *)((char *)&v51._countAndFlagsBits - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v9 = MEMORY[0x270FA5388](v6);
  uint64_t v11 = (char *)&v51 - v10;
  uint64_t v12 = MEMORY[0x270FA5388](v9);
  uint64_t v14 = (char *)&v51 - v13;
  MEMORY[0x270FA5388](v12);
  uint64_t v16 = (char *)&v51 - v15;
  uint64_t v17 = type metadata accessor for DSLTree.CustomCharacterClass.Member(0);
  MEMORY[0x270FA5388](v17);
  Swift::String v19 = (char *)&v51 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of MEProgram(a1, (uint64_t)v19, type metadata accessor for DSLTree.CustomCharacterClass.Member);
  switch(swift_getEnumCaseMultiPayload())
  {
    case 1u:
      uint64_t v24 = (uint64_t)&v19[*(int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (DSLTree.Atom, DSLTree.Atom))
                                 + 48)];
      outlined init with take of DSLTree.QuantificationKind((uint64_t)v19, (uint64_t)v16, type metadata accessor for DSLTree.Atom);
      outlined init with take of DSLTree.QuantificationKind(v24, (uint64_t)v14, type metadata accessor for DSLTree.Atom);
      uint64_t v25 = DSLTree.Atom._regexBase.getter();
      uint64_t v27 = v26;
      outlined destroy of MEProgram((uint64_t)v16, type metadata accessor for DSLTree.Atom);
      v28._uint64_t countAndFlagsBits = v25;
      v28._uint64_t object = v27;
      PrettyPrinter.output(_:)(v28);
      swift_bridgeObjectRelease();
      v29._uint64_t countAndFlagsBits = 45;
      v29._uint64_t object = (void *)0xE100000000000000;
      PrettyPrinter.output(_:)(v29);
      uint64_t v30 = DSLTree.Atom._regexBase.getter();
      uint64_t object = v31;
      outlined destroy of MEProgram((uint64_t)v14, type metadata accessor for DSLTree.Atom);
      uint64_t countAndFlagsBits = v30;
      goto LABEL_8;
    case 2u:
      char v32 = v19[8];
      v51._uint64_t countAndFlagsBits = *(void *)v19;
      LOBYTE(v51._object) = v32;
      v52.members._unint64_t rawValue = &v51;
      v52.Swift::Bool isInverted = 1;
      PrettyPrinter.printAsRegex(_:asFullRegex:terminateLine:)(v52, 0, v20);
      goto LABEL_9;
    case 3u:
      v33._uint64_t countAndFlagsBits = *(void *)v19;
      uint64_t v34 = (void *)*((void *)v19 + 1);
      v51._uint64_t countAndFlagsBits = 20828;
      v51._uint64_t object = (void *)0xE200000000000000;
      v33._uint64_t object = v34;
      String.append(_:)(v33);
      swift_bridgeObjectRelease();
      v35._uint64_t countAndFlagsBits = 17756;
      v35._uint64_t object = (void *)0xE200000000000000;
      String.append(_:)(v35);
      uint64_t countAndFlagsBits = v51._countAndFlagsBits;
      uint64_t object = v51._object;
      goto LABEL_8;
    case 4u:
      return outlined destroy of MEProgram((uint64_t)v19, type metadata accessor for DSLTree.CustomCharacterClass.Member);
    case 5u:
      char v38 = *(unsigned char *)(*(void *)v19 + 24);
      uint64_t v39 = *(void *)(*(void *)v19 + 32);
      char v40 = *(unsigned char *)(*(void *)v19 + 40);
      v51._uint64_t countAndFlagsBits = *(void *)(*(void *)v19 + 16);
      LOBYTE(v51._object) = v38;
      v53.members._unint64_t rawValue = &v51;
      v53.Swift::Bool isInverted = 0;
      PrettyPrinter.printAsRegex(_:asFullRegex:terminateLine:)(v53, 0, v20);
      uint64_t v41 = 9766;
      goto LABEL_14;
    case 6u:
      char v42 = *(unsigned char *)(*(void *)v19 + 24);
      uint64_t v39 = *(void *)(*(void *)v19 + 32);
      char v40 = *(unsigned char *)(*(void *)v19 + 40);
      v51._uint64_t countAndFlagsBits = *(void *)(*(void *)v19 + 16);
      LOBYTE(v51._object) = v42;
      v54.members._unint64_t rawValue = &v51;
      v54.Swift::Bool isInverted = 0;
      PrettyPrinter.printAsRegex(_:asFullRegex:terminateLine:)(v54, 0, v20);
      uint64_t v41 = 11565;
      goto LABEL_14;
    case 7u:
      char v43 = *(unsigned char *)(*(void *)v19 + 24);
      uint64_t v39 = *(void *)(*(void *)v19 + 32);
      char v40 = *(unsigned char *)(*(void *)v19 + 40);
      v51._uint64_t countAndFlagsBits = *(void *)(*(void *)v19 + 16);
      LOBYTE(v51._object) = v43;
      v55.members._unint64_t rawValue = &v51;
      v55.Swift::Bool isInverted = 0;
      PrettyPrinter.printAsRegex(_:asFullRegex:terminateLine:)(v55, 0, v20);
      uint64_t v41 = 32382;
LABEL_14:
      unint64_t v44 = 0xE200000000000000;
      PrettyPrinter.output(_:)(*(Swift::String *)&v41);
      v51._uint64_t countAndFlagsBits = v39;
      LOBYTE(v51._object) = v40;
      v56.members._unint64_t rawValue = &v51;
      v56.Swift::Bool isInverted = 0;
      PrettyPrinter.printAsRegex(_:asFullRegex:terminateLine:)(v56, 0, v45);
      uint64_t result = swift_release();
      break;
    default:
      outlined init with take of DSLTree.QuantificationKind((uint64_t)v19, (uint64_t)v11, type metadata accessor for DSLTree.Atom);
      outlined init with copy of MEProgram((uint64_t)v11, (uint64_t)v8, type metadata accessor for DSLTree.Atom);
      int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
      if (EnumCaseMultiPayload == 7)
      {
        outlined destroy of MEProgram((uint64_t)v11, type metadata accessor for DSLTree.Atom);
        outlined init with take of DSLTree.QuantificationKind((uint64_t)v8, (uint64_t)v4, type metadata accessor for DSLTree._AST.Atom);
        uint64_t v46 = AST.Atom._regexBase.getter();
        Swift::String v48 = v47;
        outlined destroy of MEProgram((uint64_t)v4, type metadata accessor for DSLTree._AST.Atom);
        v49._uint64_t countAndFlagsBits = v46;
        v49._uint64_t object = v48;
        PrettyPrinter.output(_:)(v49);
        uint64_t result = swift_bridgeObjectRelease();
      }
      else if (EnumCaseMultiPayload)
      {
        v51._uint64_t countAndFlagsBits = 0;
        v51._uint64_t object = (void *)0xE000000000000000;
        _StringGuts.grow(_:)(17);
        v50._uint64_t countAndFlagsBits = 0x4F444F54202F2F20;
        v50._uint64_t object = (void *)0xEF206D6F7441203ALL;
        String.append(_:)(v50);
        _print_unlocked<A, B>(_:_:)();
        outlined destroy of MEProgram((uint64_t)v11, type metadata accessor for DSLTree.Atom);
        PrettyPrinter.print(_:)(v51);
        swift_bridgeObjectRelease();
        uint64_t result = outlined destroy of MEProgram((uint64_t)v8, type metadata accessor for DSLTree.Atom);
      }
      else
      {
        outlined destroy of MEProgram((uint64_t)v11, type metadata accessor for DSLTree.Atom);
        uint64_t countAndFlagsBits = *v8;
        uint64_t object = (void *)v8[1];
LABEL_8:
        uint64_t v36 = object;
        PrettyPrinter.output(_:)(*(Swift::String *)&countAndFlagsBits);
LABEL_9:
        uint64_t result = swift_bridgeObjectRelease();
      }
      break;
  }
  return result;
}

uint64_t DSLTree.Atom._regexBase.getter()
{
  uint64_t v1 = type metadata accessor for AST.MatchingOption.Kind();
  uint64_t v32 = *(void *)(v1 - 8);
  MEMORY[0x270FA5388](v1);
  uint64_t v3 = (char *)&v31 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v4 = type metadata accessor for AST.MatchingOption();
  uint64_t v5 = *(void *)(v4 - 8);
  MEMORY[0x270FA5388](v4);
  uint64_t v7 = (char *)&v31 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = type metadata accessor for DSLTree._AST.MatchingOptionSequence(0);
  MEMORY[0x270FA5388](v8 - 8);
  uint64_t v10 = (char *)&v31 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = type metadata accessor for DSLTree._AST.Atom(0);
  MEMORY[0x270FA5388](v11 - 8);
  uint64_t v13 = (char *)&v31 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = type metadata accessor for DSLTree.Atom(0);
  MEMORY[0x270FA5388](v14);
  uint64_t v16 = (_DWORD *)((char *)&v31 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0));
  outlined init with copy of MEProgram(v0, (uint64_t)v16, type metadata accessor for DSLTree.Atom);
  uint64_t v17 = 0xD000000000000016;
  switch(swift_getEnumCaseMultiPayload())
  {
    case 1u:
      LODWORD(v37) = *v16;
      lazy protocol witness table accessor for type UInt32 and conformance UInt32();
      v18._uint64_t countAndFlagsBits = String.init<A>(_:radix:uppercase:)();
      uint64_t v37 = 8090972;
      unint64_t v38 = 0xE300000000000000;
      String.append(_:)(v18);
      swift_bridgeObjectRelease();
      v19._uint64_t countAndFlagsBits = 125;
      v19._uint64_t object = (void *)0xE100000000000000;
      String.append(_:)(v19);
      v20._uint64_t countAndFlagsBits = v37;
      Swift::String v21 = (void *)v38;
      uint64_t v37 = 34;
      unint64_t v38 = 0xE100000000000000;
      v20._uint64_t object = v21;
      String.append(_:)(v20);
      swift_bridgeObjectRelease();
      v22._uint64_t countAndFlagsBits = 34;
      v22._uint64_t object = (void *)0xE100000000000000;
      String.append(_:)(v22);
      uint64_t v17 = v37;
      break;
    case 2u:
      uint64_t v17 = 0xD00000000000001DLL;
      break;
    case 3u:
      return v17;
    case 4u:
      outlined destroy of MEProgram((uint64_t)v16, type metadata accessor for DSLTree.Atom);
      uint64_t v17 = 0xD00000000000001ALL;
      break;
    case 5u:
      uint64_t v17 = 0xD00000000000001FLL;
      break;
    case 6u:
      outlined init with take of DSLTree.QuantificationKind((uint64_t)v16, (uint64_t)v10, type metadata accessor for DSLTree._AST.MatchingOptionSequence);
      uint64_t v37 = 0;
      unint64_t v38 = 0xE000000000000000;
      uint64_t v23 = AST.MatchingOptionSequence.adding.getter();
      outlined destroy of MEProgram((uint64_t)v10, type metadata accessor for DSLTree._AST.MatchingOptionSequence);
      uint64_t v36 = *(void *)(v23 + 16);
      if (v36)
      {
        unint64_t v24 = 0;
        uint64_t v34 = v5 + 16;
        uint64_t v35 = v1;
        uint64_t v33 = v5 + 8;
        uint64_t v25 = (unsigned int (**)(char *, uint64_t))(v32 + 88);
        int v26 = *MEMORY[0x263F8F8F0];
        uint64_t v27 = (void (**)(char *, uint64_t))(v32 + 8);
        do
        {
          if (v24 >= *(void *)(v23 + 16))
          {
            __break(1u);
            JUMPOUT(0x209F691E8);
          }
          (*(void (**)(char *, unint64_t, uint64_t))(v5 + 16))(v7, v23+ ((*(unsigned __int8 *)(v5 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80))+ *(void *)(v5 + 72) * v24, v4);
          AST.MatchingOption.kind.getter();
          (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
          uint64_t v28 = v35;
          if ((*v25)(v3, v35) == v26)
          {
            v29._uint64_t countAndFlagsBits = 693452584;
            v29._uint64_t object = (void *)0xE400000000000000;
            String.append(_:)(v29);
          }
          else
          {
            (*v27)(v3, v28);
          }
          ++v24;
        }
        while (v36 != v24);
        uint64_t v17 = v37;
      }
      else
      {
        uint64_t v17 = 0;
      }
      swift_bridgeObjectRelease();
      break;
    case 7u:
      outlined init with take of DSLTree.QuantificationKind((uint64_t)v16, (uint64_t)v13, type metadata accessor for DSLTree._AST.Atom);
      uint64_t v17 = AST.Atom._regexBase.getter();
      outlined destroy of MEProgram((uint64_t)v13, type metadata accessor for DSLTree._AST.Atom);
      break;
    case 8u:
      uint64_t v17 = 0x292E3A733F28;
      break;
    case 9u:
      uint64_t v17 = 0x292E3A732D3F28;
      break;
    case 0xAu:
      uint64_t v17 = 46;
      break;
    default:
      uint64_t v17 = *(void *)v16;
      break;
  }
  return v17;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance StringLiteralBuilder()
{
  String.append(_:)(*v0);
  v1._uint64_t countAndFlagsBits = 34;
  v1._uint64_t object = (void *)0xE100000000000000;
  String.append(_:)(v1);
  return 34;
}

unint64_t DSLTree.Atom.Assertion._patternBase.getter()
{
  unint64_t result = 0xD000000000000012;
  switch(*v0)
  {
    case 1:
      unint64_t result = 0xD000000000000020;
      break;
    case 2:
    case 0xB:
      unint64_t result = 0xD000000000000013;
      break;
    case 3:
      unint64_t result = 0xD000000000000021;
      break;
    case 4:
      unint64_t result = 0xD000000000000025;
      break;
    case 5:
      unint64_t result = 0xD00000000000001ALL;
      break;
    case 6:
      unint64_t result = 0xD000000000000023;
      break;
    case 7:
      return result;
    case 8:
      unint64_t result = 0xD000000000000010;
      break;
    case 9:
      unint64_t result = 3104303;
      break;
    case 0xA:
      unint64_t result = 3089455;
      break;
    case 0xC:
      unint64_t result = 0xD00000000000001CLL;
      break;
    default:
      unint64_t result = 0xD000000000000015;
      break;
  }
  return result;
}

uint64_t AST.Atom.CharacterProperty.isUnprintableProperty.getter()
{
  uint64_t v0 = type metadata accessor for Unicode.POSIXProperty();
  uint64_t v24 = *(void *)(v0 - 8);
  uint64_t v25 = v0;
  MEMORY[0x270FA5388](v0);
  uint64_t v2 = (char *)&v22 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v3 = type metadata accessor for Unicode.ExtendedGeneralCategory();
  uint64_t v4 = *(void *)(v3 - 8);
  MEMORY[0x270FA5388](v3);
  uint64_t v6 = (char *)&v22 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = type metadata accessor for Unicode.BinaryProperty();
  uint64_t v23 = *(void *)(v7 - 8);
  MEMORY[0x270FA5388](v7);
  uint64_t v9 = (char *)&v22 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = type metadata accessor for AST.Atom.CharacterProperty.Kind();
  uint64_t v11 = *(void *)(v10 - 8);
  MEMORY[0x270FA5388](v10);
  uint64_t v13 = (char *)&v22 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  AST.Atom.CharacterProperty.kind.getter();
  int v14 = (*(uint64_t (**)(char *, uint64_t))(v11 + 88))(v13, v10);
  if (v14 == *MEMORY[0x263F8FAF0])
  {
    (*(void (**)(char *, uint64_t))(v11 + 96))(v13, v10);
    (*(void (**)(char *, char *, uint64_t))(v4 + 32))(v6, v13, v3);
    if ((*(unsigned int (**)(char *, uint64_t))(v4 + 88))(v6, v3) != *MEMORY[0x263F8FFA8])
    {
      (*(void (**)(char *, uint64_t))(v4 + 8))(v6, v3);
      return 1;
    }
    return 0;
  }
  uint64_t v17 = v23;
  uint64_t v16 = v24;
  Swift::String v18 = v2;
  uint64_t v19 = v25;
  if (v14 == *MEMORY[0x263F8FB38])
  {
    (*(void (**)(char *, uint64_t))(v11 + 96))(v13, v10);
    (*(void (**)(char *, char *, uint64_t))(v17 + 32))(v9, v13, v7);
    if ((*(unsigned int (**)(char *, uint64_t))(v17 + 88))(v9, v7) == *MEMORY[0x263F8FD68]) {
      return 0;
    }
    (*(void (**)(char *, uint64_t))(v17 + 8))(v9, v7);
    return 1;
  }
  if (v14 == *MEMORY[0x263F8FB40] || v14 == *MEMORY[0x263F8FAF8])
  {
    (*(void (**)(char *, uint64_t))(v11 + 8))(v13, v10);
    return 1;
  }
  if (v14 != *MEMORY[0x263F8FB30])
  {
    if (v14 == *MEMORY[0x263F8FB18]) {
      return 1;
    }
    (*(void (**)(char *, uint64_t))(v11 + 8))(v13, v10);
    return 0;
  }
  (*(void (**)(char *, uint64_t))(v11 + 96))(v13, v10);
  (*(void (**)(char *, char *, uint64_t))(v16 + 32))(v18, v13, v19);
  int v21 = (*(uint64_t (**)(char *, uint64_t))(v16 + 88))(v18, v19);
  uint64_t result = 0;
  if (v21 != *MEMORY[0x263F8FD10] && v21 != *MEMORY[0x263F8FD38])
  {
    (*(void (**)(char *, uint64_t))(v16 + 8))(v18, v19);
    return 1;
  }
  return result;
}

uint64_t AST.Atom.CharacterProperty._dslBase.getter()
{
  uint64_t v0 = type metadata accessor for Unicode.POSIXProperty();
  uint64_t v23 = *(void *)(v0 - 8);
  uint64_t v24 = v0;
  MEMORY[0x270FA5388](v0);
  uint64_t v2 = (char *)&v21 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v3 = type metadata accessor for Unicode.ExtendedGeneralCategory();
  uint64_t v4 = *(void *)(v3 - 8);
  MEMORY[0x270FA5388](v3);
  uint64_t v6 = (char *)&v21 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = type metadata accessor for Unicode.BinaryProperty();
  uint64_t v22 = *(void *)(v7 - 8);
  MEMORY[0x270FA5388](v7);
  uint64_t v9 = (char *)&v21 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = type metadata accessor for AST.Atom.CharacterProperty.Kind();
  uint64_t v11 = *(void *)(v10 - 8);
  MEMORY[0x270FA5388](v10);
  uint64_t v13 = (char *)&v21 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  AST.Atom.CharacterProperty.kind.getter();
  int v14 = (*(uint64_t (**)(char *, uint64_t))(v11 + 88))(v13, v10);
  if (v14 == *MEMORY[0x263F8FAF0])
  {
    (*(void (**)(char *, uint64_t))(v11 + 96))(v13, v10);
    (*(void (**)(char *, char *, uint64_t))(v4 + 32))(v6, v13, v3);
    if ((*(unsigned int (**)(char *, uint64_t))(v4 + 88))(v6, v3) == *MEMORY[0x263F8FFA8]) {
      return 0x74696769642ELL;
    }
    (*(void (**)(char *, uint64_t))(v4 + 8))(v6, v3);
  }
  else
  {
    uint64_t v17 = v22;
    uint64_t v16 = v23;
    Swift::String v18 = v2;
    uint64_t v19 = v24;
    if (v14 == *MEMORY[0x263F8FB38])
    {
      (*(void (**)(char *, uint64_t))(v11 + 96))(v13, v10);
      (*(void (**)(char *, char *, uint64_t))(v17 + 32))(v9, v13, v7);
      if ((*(unsigned int (**)(char *, uint64_t))(v17 + 88))(v9, v7) == *MEMORY[0x263F8FD68]) {
        return 0x707365746968772ELL;
      }
      (*(void (**)(char *, uint64_t))(v17 + 8))(v9, v7);
    }
    else if (v14 == *MEMORY[0x263F8FB30])
    {
      (*(void (**)(char *, uint64_t))(v11 + 96))(v13, v10);
      (*(void (**)(char *, char *, uint64_t))(v16 + 32))(v18, v13, v19);
      int v20 = (*(uint64_t (**)(char *, uint64_t))(v16 + 88))(v18, v19);
      if (v20 == *MEMORY[0x263F8FD10]) {
        return 0x64726F772ELL;
      }
      if (v20 == *MEMORY[0x263F8FD38]) {
        return 0x696769447865682ELL;
      }
      (*(void (**)(char *, uint64_t))(v16 + 8))(v18, v19);
    }
    else
    {
      (*(void (**)(char *, uint64_t))(v11 + 8))(v13, v10);
    }
  }
  return 0;
}

uint64_t AST.Atom._dslBase.getter()
{
  uint64_t v0 = type metadata accessor for AST.Atom.EscapedBuiltin();
  uint64_t v1 = *(void *)(v0 - 8);
  uint64_t v51 = v0;
  uint64_t v52 = v1;
  uint64_t v2 = MEMORY[0x270FA5388](v0);
  Swift::String v49 = (char *)&v48 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v2);
  Swift::String v50 = (char *)&v48 - v4;
  uint64_t v5 = type metadata accessor for AST.Atom.CharacterProperty();
  uint64_t v53 = *(void *)(v5 - 8);
  uint64_t v54 = v5;
  MEMORY[0x270FA5388](v5);
  uint64_t v7 = (char *)&v48 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = type metadata accessor for AST.Atom.ScalarSequence();
  uint64_t v55 = *(void *)(v8 - 8);
  MEMORY[0x270FA5388](v8);
  uint64_t v10 = (char *)&v48 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = type metadata accessor for AST.Atom.Scalar();
  uint64_t v12 = *(void *)(v11 - 8);
  MEMORY[0x270FA5388](v11);
  int v14 = (char *)&v48 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v15 = type metadata accessor for AST.Atom.Kind();
  uint64_t v16 = *(void *)(v15 - 8);
  MEMORY[0x270FA5388](v15);
  Swift::String v18 = (char *)&v48 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  AST.Atom.kind.getter();
  int v19 = (*(uint64_t (**)(char *, uint64_t))(v16 + 88))(v18, v15);
  if (v19 == *MEMORY[0x263F8FBC0])
  {
    (*(void (**)(char *, uint64_t))(v16 + 96))(v18, v15);
    return *(void *)v18;
  }
  if (v19 == *MEMORY[0x263F8FBC8])
  {
    (*(void (**)(char *, uint64_t))(v16 + 96))(v18, v15);
    (*(void (**)(char *, char *, uint64_t))(v12 + 32))(v14, v18, v11);
    int v21 = AST.Atom.Scalar.value.getter();
    (*(void (**)(char *, uint64_t))(v12 + 8))(v14, v11);
    uint64_t v58 = 8090972;
    unint64_t v59 = 0xE300000000000000;
    LODWORD(v57) = v21;
    lazy protocol witness table accessor for type UInt32 and conformance UInt32();
    v22._uint64_t countAndFlagsBits = String.init<A>(_:radix:uppercase:)();
    String.append(_:)(v22);
    swift_bridgeObjectRelease();
    v23._uint64_t countAndFlagsBits = 125;
    v23._uint64_t object = (void *)0xE100000000000000;
    String.append(_:)(v23);
    return v58;
  }
  if (v19 == *MEMORY[0x263F8FB90])
  {
    (*(void (**)(char *, uint64_t))(v16 + 96))(v18, v15);
    uint64_t v24 = v55;
    (*(void (**)(char *, char *, uint64_t))(v55 + 32))(v10, v18, v8);
    uint64_t v25 = AST.Atom.ScalarSequence.scalarValues.getter();
    (*(void (**)(char *, uint64_t))(v24 + 8))(v10, v8);
    int64_t v26 = *(void *)(v25 + 16);
    if (!v26)
    {
      swift_bridgeObjectRelease();
      uint64_t v30 = MEMORY[0x263F8EE78];
LABEL_19:
      uint64_t v58 = v30;
      swift_getCanonicalSpecializedMetadata();
      lazy protocol witness table accessor for type PartialRangeUpTo<String.Index> and conformance PartialRangeUpTo<A>(&lazy protocol witness table cache variable for type [String] and conformance [A]);
      uint64_t v20 = BidirectionalCollection<>.joined(separator:)();
      swift_bridgeObjectRelease();
      return v20;
    }
    uint64_t v57 = MEMORY[0x263F8EE78];
    uint64_t v27 = &v57;
    unsigned int v28 = specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v26, 0);
    unint64_t v29 = 0;
    uint64_t v30 = v57;
    while (v29 < *(void *)(v25 + 16))
    {
      int v31 = *(_DWORD *)(v25 + 4 * v29 + 32);
      uint64_t v58 = 8090972;
      unint64_t v59 = 0xE300000000000000;
      int v56 = v31;
      lazy protocol witness table accessor for type UInt32 and conformance UInt32();
      v32._uint64_t countAndFlagsBits = String.init<A>(_:radix:uppercase:)();
      uint64_t v27 = &v58;
      String.append(_:)(v32);
      swift_bridgeObjectRelease();
      v33._uint64_t countAndFlagsBits = 125;
      v33._uint64_t object = (void *)0xE100000000000000;
      String.append(_:)(v33);
      uint64_t v35 = v58;
      unint64_t v34 = v59;
      uint64_t v57 = v30;
      unint64_t v37 = *(void *)(v30 + 16);
      unint64_t v36 = *(void *)(v30 + 24);
      if (v37 >= v36 >> 1)
      {
        uint64_t v27 = &v57;
        unsigned int v28 = specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v36 > 1), v37 + 1, 1);
        uint64_t v30 = v57;
      }
      ++v29;
      *(void *)(v30 + 16) = v37 + 1;
      unint64_t v38 = v30 + 16 * v37;
      *(void *)(v38 + 32) = v35;
      *(void *)(v38 + 40) = v34;
      if (v26 == v29)
      {
        swift_bridgeObjectRelease();
        goto LABEL_19;
      }
    }
    __break(1u);
    goto LABEL_40;
  }
  if (v19 == *MEMORY[0x263F8FBE8])
  {
    (*(void (**)(char *, uint64_t))(v16 + 96))(v18, v15);
    uint64_t v40 = v53;
    uint64_t v39 = v54;
    (*(void (**)(char *, char *, uint64_t))(v53 + 32))(v7, v18, v54);
    uint64_t v20 = AST.Atom.CharacterProperty._dslBase.getter();
    (*(void (**)(char *, uint64_t))(v40 + 8))(v7, v39);
    return v20;
  }
  if (v19 == *MEMORY[0x263F8FBD8])
  {
    (*(void (**)(char *, uint64_t))(v16 + 96))(v18, v15);
    uint64_t v25 = v51;
    uint64_t v30 = v52;
    uint64_t v27 = (uint64_t *)v50;
    (*(void (**)(char *, char *, uint64_t))(v52 + 32))(v50, v18, v51);
    uint64_t v41 = v49;
    (*(void (**)(char *, uint64_t *, uint64_t))(v30 + 16))(v49, v27, v25);
    unsigned int v28 = (*(uint64_t (**)(char *, uint64_t))(v30 + 88))(v41, v25);
    if (v28 == *MEMORY[0x263F8FA28])
    {
      (*(void (**)(uint64_t *, uint64_t))(v30 + 8))(v27, v25);
      return 0x74696769642ELL;
    }
    if (v28 == *MEMORY[0x263F8FA78])
    {
      (*(void (**)(uint64_t *, uint64_t))(v30 + 8))(v27, v25);
      return 0x692E74696769642ELL;
    }
    if (v28 == *MEMORY[0x263F8FA98])
    {
      (*(void (**)(uint64_t *, uint64_t))(v30 + 8))(v27, v25);
      return 0xD000000000000015;
    }
    if (v28 == *MEMORY[0x263F8FAA0])
    {
      (*(void (**)(uint64_t *, uint64_t))(v30 + 8))(v27, v25);
      return 0xD00000000000001ELL;
    }
    if (v28 == *MEMORY[0x263F8FA08])
    {
      (*(void (**)(uint64_t *, uint64_t))(v30 + 8))(v27, v25);
      return 0xD000000000000019;
    }
LABEL_40:
    if (v28 == *MEMORY[0x263F8FA70])
    {
      (*(void (**)(uint64_t *, uint64_t))(v30 + 8))(v27, v25);
      return 0xD000000000000010;
    }
    if (v28 == *MEMORY[0x263F8FA10])
    {
      (*(void (**)(uint64_t *, uint64_t))(v30 + 8))(v27, v25);
      return 0x707365746968772ELL;
    }
    if (v28 == *MEMORY[0x263F8FA40])
    {
      (*(void (**)(uint64_t *, uint64_t))(v30 + 8))(v27, v25);
      return 0xD000000000000014;
    }
    if (v28 == *MEMORY[0x263F8FA20])
    {
      char v43 = v27;
      uint64_t v20 = 0xD000000000000013;
      (*(void (**)(uint64_t *, uint64_t))(v30 + 8))(v43, v25);
      return v20;
    }
    if (v28 == *MEMORY[0x263F8FA58])
    {
LABEL_56:
      (*(void (**)(char *, uint64_t))(v52 + 8))(v50, v51);
      return 0xD00000000000001CLL;
    }
    if (v28 == *MEMORY[0x263F8FA48])
    {
      (*(void (**)(char *, uint64_t))(v52 + 8))(v50, v51);
      return 0x64726F772ELL;
    }
    if (v28 == *MEMORY[0x263F8FA88])
    {
      (*(void (**)(char *, uint64_t))(v52 + 8))(v50, v51);
      return 0x6E692E64726F772ELL;
    }
    if (v28 != *MEMORY[0x263F8FA68] && v28 != *MEMORY[0x263F8FA38])
    {
      if (v28 == *MEMORY[0x263F8FA80]) {
        goto LABEL_56;
      }
      if (v28 == *MEMORY[0x263F8FA60])
      {
        (*(void (**)(char *, uint64_t))(v52 + 8))(v50, v51);
        return 0xD000000000000015;
      }
      if (v28 == *MEMORY[0x263F8FAA8])
      {
        (*(void (**)(char *, uint64_t))(v52 + 8))(v50, v51);
        return 0xD000000000000020;
      }
      if (v28 != *MEMORY[0x263F8FA30])
      {
        if (v28 == *MEMORY[0x263F8FAB0])
        {
          (*(void (**)(char *, uint64_t))(v52 + 8))(v50, v51);
          return 0xD000000000000025;
        }
        else if (v28 == *MEMORY[0x263F8FA18])
        {
          (*(void (**)(char *, uint64_t))(v52 + 8))(v50, v51);
          return 0xD00000000000001ALL;
        }
        else if (v28 == *MEMORY[0x263F8FA50])
        {
          (*(void (**)(char *, uint64_t))(v52 + 8))(v50, v51);
          return 0xD000000000000023;
        }
        else
        {
          uint64_t v58 = 0;
          unint64_t v59 = 0xE000000000000000;
          _StringGuts.grow(_:)(16);
          v44._uint64_t countAndFlagsBits = 0x7365203A4F444F54;
          v44._uint64_t object = (void *)0xEE00206465706163;
          String.append(_:)(v44);
          Swift::Bool v45 = v50;
          uint64_t v46 = v51;
          _print_unlocked<A, B>(_:_:)();
          Swift::String v47 = *(void (**)(char *, uint64_t))(v52 + 8);
          v47(v45, v46);
          uint64_t v20 = v58;
          v47(v49, v46);
        }
        return v20;
      }
    }
    uint64_t v20 = 0xD000000000000013;
    (*(void (**)(char *, uint64_t))(v52 + 8))(v50, v51);
    return v20;
  }
  if (v19 == *MEMORY[0x263F8FB88])
  {
    (*(void (**)(char *, uint64_t))(v16 + 8))(v18, v15);
    return 0xD00000000000001CLL;
  }
  if (v19 == *MEMORY[0x263F8FB80])
  {
    (*(void (**)(char *, uint64_t))(v16 + 8))(v18, v15);
    return 0xD00000000000001BLL;
  }
  if (v19 == *MEMORY[0x263F8FB60])
  {
    (*(void (**)(char *, uint64_t))(v16 + 8))(v18, v15);
    return 0xD000000000000017;
  }
  if (v19 == *MEMORY[0x263F8FBD0])
  {
    (*(void (**)(char *, uint64_t))(v16 + 8))(v18, v15);
    return 0xD000000000000014;
  }
  if (v19 == *MEMORY[0x263F8FBA8] || v19 == *MEMORY[0x263F8FBB0])
  {
    (*(void (**)(char *, uint64_t))(v16 + 8))(v18, v15);
    return 0xD000000000000023;
  }
  if (v19 == *MEMORY[0x263F8FBB8]) {
    return 3092015;
  }
  if (v19 != *MEMORY[0x263F8FB68] && v19 != *MEMORY[0x263F8FB70])
  {
    (*(void (**)(char *, uint64_t))(v16 + 8))(v18, v15);
    return 0;
  }
  uint64_t result = _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t AST.Atom.Number._patternBase.getter()
{
  AST.Atom.Number.value.getter();
  if (v0) {
    return 0x7265626D756E233CLL;
  }
  else {
    return dispatch thunk of CustomStringConvertible.description.getter();
  }
}

uint64_t DSLTree.CustomCharacterClass.Member.isUnprintableMember.getter()
{
  uint64_t v1 = type metadata accessor for AST.Atom.CharacterProperty();
  uint64_t v78 = *(void *)(v1 - 8);
  uint64_t v79 = v1;
  MEMORY[0x270FA5388](v1);
  char v77 = (char *)&v72 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v3 = type metadata accessor for AST.Atom.Kind();
  uint64_t v4 = *(void *)(v3 - 8);
  uint64_t v82 = v3;
  uint64_t v83 = v4;
  uint64_t v5 = MEMORY[0x270FA5388](v3);
  unint64_t v74 = (char *)&v72 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v5);
  uint64_t v81 = (char *)&v72 - v7;
  uint64_t v8 = type metadata accessor for DSLTree._AST.Atom(0);
  uint64_t v9 = MEMORY[0x270FA5388](v8 - 8);
  uint64_t v76 = (uint64_t)&v72 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = MEMORY[0x270FA5388](v9);
  uint64_t v75 = (uint64_t)&v72 - v12;
  uint64_t v13 = MEMORY[0x270FA5388](v11);
  uint64_t v73 = (uint64_t)&v72 - v14;
  MEMORY[0x270FA5388](v13);
  uint64_t v80 = (uint64_t)&v72 - v15;
  uint64_t v16 = type metadata accessor for DSLTree.CustomCharacterClass.Member(0);
  uint64_t v17 = MEMORY[0x270FA5388](v16);
  int v19 = (uint64_t *)((char *)&v72 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v20 = MEMORY[0x270FA5388](v17);
  Swift::String v22 = (uint64_t *)((char *)&v72 - v21);
  uint64_t v23 = MEMORY[0x270FA5388](v20);
  uint64_t v25 = (uint64_t *)((char *)&v72 - v24);
  uint64_t v26 = MEMORY[0x270FA5388](v23);
  unsigned int v28 = (char *)&v72 - v27;
  uint64_t v29 = MEMORY[0x270FA5388](v26);
  int v31 = (char *)&v72 - v30;
  uint64_t v32 = MEMORY[0x270FA5388](v29);
  unint64_t v34 = (char *)&v72 - v33;
  MEMORY[0x270FA5388](v32);
  unint64_t v36 = (char *)&v72 - v35;
  outlined init with copy of MEProgram(v0, (uint64_t)&v72 - v35, type metadata accessor for DSLTree.CustomCharacterClass.Member);
  uint64_t v37 = (uint64_t)v36;
  char v38 = 0;
  switch(swift_getEnumCaseMultiPayload())
  {
    case 0u:
      outlined init with copy of MEProgram((uint64_t)v36, (uint64_t)v34, type metadata accessor for DSLTree.CustomCharacterClass.Member);
      type metadata accessor for DSLTree.Atom(0);
      if (swift_getEnumCaseMultiPayload() != 7)
      {
        uint64_t v67 = (uint64_t)v34;
        goto LABEL_25;
      }
      uint64_t v39 = v80;
      outlined init with take of DSLTree.QuantificationKind((uint64_t)v34, v80, type metadata accessor for DSLTree._AST.Atom);
      uint64_t v40 = v81;
      AST.Atom.kind.getter();
      uint64_t v42 = v82;
      uint64_t v41 = v83;
      int v43 = (*(uint64_t (**)(char *, uint64_t))(v83 + 88))(v40, v82);
      if (v43 == *MEMORY[0x263F8FBE8])
      {
        (*(void (**)(char *, uint64_t))(v41 + 96))(v40, v42);
        Swift::Bool v45 = v77;
        uint64_t v44 = v78;
        uint64_t v46 = v79;
        (*(void (**)(char *, char *, uint64_t))(v78 + 32))(v77, v40, v79);
        char v38 = AST.Atom.CharacterProperty.isUnprintableProperty.getter();
        (*(void (**)(char *, uint64_t))(v44 + 8))(v45, v46);
      }
      else if (v43 == *MEMORY[0x263F8FB98] || v43 == *MEMORY[0x263F8FB78] || v43 == *MEMORY[0x263F8FBA0])
      {
        (*(void (**)(char *, uint64_t))(v41 + 8))(v40, v42);
        char v38 = 1;
      }
      else
      {
        char v38 = v43 == *MEMORY[0x263F8FB88];
        (*(void (**)(char *, uint64_t))(v41 + 8))(v40, v42);
      }
      uint64_t v70 = v39;
      goto LABEL_38;
    case 1u:
      outlined init with copy of MEProgram((uint64_t)v36, (uint64_t)v28, type metadata accessor for DSLTree.CustomCharacterClass.Member);
      uint64_t v47 = (uint64_t)&v28[*(int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (DSLTree.Atom, DSLTree.Atom))
                                 + 48)];
      type metadata accessor for DSLTree.Atom(0);
      if (swift_getEnumCaseMultiPayload() != 7)
      {
        outlined destroy of MEProgram(v47, type metadata accessor for DSLTree.Atom);
        uint64_t v67 = (uint64_t)v28;
LABEL_25:
        outlined destroy of MEProgram(v67, type metadata accessor for DSLTree.Atom);
        char v38 = 0;
        goto LABEL_39;
      }
      if (swift_getEnumCaseMultiPayload() != 7)
      {
        outlined destroy of MEProgram((uint64_t)v28, type metadata accessor for DSLTree._AST.Atom);
        uint64_t v67 = v47;
        goto LABEL_25;
      }
      uint64_t v48 = v73;
      outlined init with take of DSLTree.QuantificationKind((uint64_t)v28, v73, type metadata accessor for DSLTree._AST.Atom);
      uint64_t v49 = v75;
      outlined init with take of DSLTree.QuantificationKind(v47, v75, type metadata accessor for DSLTree._AST.Atom);
      Swift::String v50 = v74;
      AST.Atom.kind.getter();
      uint64_t v52 = v82;
      uint64_t v51 = v83;
      int v53 = (*(uint64_t (**)(char *, uint64_t))(v83 + 88))(v50, v82);
      if (v53 == *MEMORY[0x263F8FBE8])
      {
        (*(void (**)(char *, uint64_t))(v51 + 96))(v50, v52);
        uint64_t v54 = v77;
        uint64_t v55 = v78;
        uint64_t v56 = v79;
        (*(void (**)(char *, char *, uint64_t))(v78 + 32))(v77, v50, v79);
        char v57 = AST.Atom.CharacterProperty.isUnprintableProperty.getter();
        (*(void (**)(char *, uint64_t))(v55 + 8))(v54, v56);
        outlined destroy of MEProgram(v48, type metadata accessor for DSLTree._AST.Atom);
        uint64_t v58 = v76;
        outlined init with take of DSLTree.QuantificationKind(v49, v76, type metadata accessor for DSLTree._AST.Atom);
        if (v57) {
          goto LABEL_36;
        }
LABEL_31:
        char v38 = AST.Atom.isQuantifiable.getter();
        goto LABEL_37;
      }
      int v68 = v53;
      if (v53 == *MEMORY[0x263F8FB98] || v53 == *MEMORY[0x263F8FB78] || v53 == *MEMORY[0x263F8FBA0])
      {
        (*(void (**)(char *, uint64_t))(v51 + 8))(v50, v52);
      }
      else
      {
        int v69 = *MEMORY[0x263F8FB88];
        (*(void (**)(char *, uint64_t))(v51 + 8))(v50, v52);
        if (v68 != v69)
        {
          outlined destroy of MEProgram(v48, type metadata accessor for DSLTree._AST.Atom);
          uint64_t v58 = v76;
          outlined init with take of DSLTree.QuantificationKind(v49, v76, type metadata accessor for DSLTree._AST.Atom);
          goto LABEL_31;
        }
      }
      outlined destroy of MEProgram(v48, type metadata accessor for DSLTree._AST.Atom);
      uint64_t v58 = v76;
      outlined init with take of DSLTree.QuantificationKind(v49, v76, type metadata accessor for DSLTree._AST.Atom);
LABEL_36:
      char v38 = 1;
LABEL_37:
      uint64_t v70 = v58;
LABEL_38:
      outlined destroy of MEProgram(v70, type metadata accessor for DSLTree._AST.Atom);
LABEL_39:
      outlined destroy of MEProgram(v37, type metadata accessor for DSLTree.CustomCharacterClass.Member);
      return v38 & 1;
    case 2u:
      uint64_t v59 = outlined init with copy of MEProgram((uint64_t)v36, (uint64_t)v31, type metadata accessor for DSLTree.CustomCharacterClass.Member);
      char v60 = v31[8];
      uint64_t v84 = *(void *)v31;
      char v85 = v60;
      char v38 = DSLTree.CustomCharacterClass.hasUnprintableProperty.getter(v59);
      goto LABEL_17;
    case 5u:
      outlined init with copy of MEProgram((uint64_t)v36, (uint64_t)v25, type metadata accessor for DSLTree.CustomCharacterClass.Member);
      uint64_t v61 = *v25;
      goto LABEL_14;
    case 6u:
      outlined init with copy of MEProgram((uint64_t)v36, (uint64_t)v22, type metadata accessor for DSLTree.CustomCharacterClass.Member);
      uint64_t v61 = *v22;
      goto LABEL_14;
    case 7u:
      outlined init with copy of MEProgram((uint64_t)v36, (uint64_t)v19, type metadata accessor for DSLTree.CustomCharacterClass.Member);
      uint64_t v61 = *v19;
LABEL_14:
      char v62 = *(unsigned char *)(v61 + 24);
      uint64_t v63 = *(void *)(v61 + 32);
      char v64 = *(unsigned char *)(v61 + 40);
      uint64_t v84 = *(void *)(v61 + 16);
      char v85 = v62;
      uint64_t v65 = swift_bridgeObjectRetain();
      uint64_t v66 = DSLTree.CustomCharacterClass.hasUnprintableProperty.getter(v65);
      if (v66)
      {
        swift_release();
        swift_bridgeObjectRelease();
        char v38 = 1;
      }
      else
      {
        uint64_t v84 = v63;
        char v85 = v64;
        char v38 = DSLTree.CustomCharacterClass.hasUnprintableProperty.getter(v66);
        swift_release();
LABEL_17:
        swift_bridgeObjectRelease();
      }
      goto LABEL_39;
    default:
      goto LABEL_39;
  }
}

unint64_t convert #1 () in AST.Node.dslTreeNode.getter(uint64_t a1)
{
  uint64_t v283 = a1;
  uint64_t v219 = type metadata accessor for AST.CustomCharacterClass();
  uint64_t v218 = *(void *)(v219 - 8);
  MEMORY[0x270FA5388](v219);
  uint64_t v216 = (char *)&v215 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v221 = type metadata accessor for AST.Atom.ScalarSequence();
  uint64_t v220 = *(void *)(v221 - 8);
  MEMORY[0x270FA5388](v221);
  unsigned __int8 v217 = (char *)&v215 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v227 = type metadata accessor for AST.Atom.Kind();
  uint64_t v226 = *(void *)(v227 - 8);
  MEMORY[0x270FA5388](v227);
  char v225 = (char *)&v215 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v224 = type metadata accessor for AST.Atom();
  uint64_t v223 = *(void *)(v224 - 8);
  MEMORY[0x270FA5388](v224);
  uint64_t v222 = (char *)&v215 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v230 = type metadata accessor for AST.Trivia();
  uint64_t v229 = *(void *)(v230 - 8);
  MEMORY[0x270FA5388](v230);
  unint64_t v228 = (char *)&v215 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v235 = type metadata accessor for AST.Quote();
  uint64_t v234 = *(void *)(v235 - 8);
  MEMORY[0x270FA5388](v235);
  unint64_t v233 = (char *)&v215 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v248 = type metadata accessor for AST.Quantification.Kind();
  uint64_t v247 = *(void *)(v248 - 8);
  MEMORY[0x270FA5388](v248);
  unint64_t v246 = (char *)&v215 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v245 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Source.Located<AST.Quantification.Kind>);
  uint64_t v244 = *(void *)(v245 - 8);
  MEMORY[0x270FA5388](v245);
  unint64_t v243 = (char *)&v215 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v242 = type metadata accessor for AST.Quantification.Amount();
  uint64_t v241 = *(void *)(v242 - 8);
  MEMORY[0x270FA5388](v242);
  unint64_t v240 = (char *)&v215 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v239 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Source.Located<AST.Quantification.Amount>);
  uint64_t v238 = *(void *)(v239 - 8);
  MEMORY[0x270FA5388](v239);
  unsigned int v237 = (char *)&v215 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v259 = type metadata accessor for AST.Quantification();
  uint64_t v257 = *(void *)(v259 - 8);
  MEMORY[0x270FA5388](v259);
  char v255 = (char *)&v215 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v262 = type metadata accessor for AST.Conditional.Condition.Kind();
  uint64_t v261 = *(void *)(v262 - 8);
  MEMORY[0x270FA5388](v262);
  unint64_t v260 = (char *)&v215 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v258 = type metadata accessor for AST.Conditional.Condition();
  uint64_t v256 = *(void *)(v258 - 8);
  MEMORY[0x270FA5388](v258);
  unint64_t v254 = (char *)&v215 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v253 = type metadata accessor for AST.Conditional();
  uint64_t v267 = *(void *)(v253 - 8);
  MEMORY[0x270FA5388](v253);
  unint64_t v266 = (char *)&v215 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v252 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Source.Located<String>);
  uint64_t v251 = *(void *)(v252 - 8);
  MEMORY[0x270FA5388](v252);
  uint64_t v250 = (char *)&v215 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v16 = type metadata accessor for AST.Group.Kind();
  uint64_t v268 = *(void *)(v16 - 8);
  uint64_t v269 = v16;
  uint64_t v17 = MEMORY[0x270FA5388](v16);
  unint64_t v232 = (char *)&v215 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v17);
  unsigned int v271 = (char *)&v215 - v19;
  uint64_t v270 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Source.Located<AST.Group.Kind>);
  unint64_t v272 = *(char **)(v270 - 8);
  uint64_t v20 = MEMORY[0x270FA5388](v270);
  uint64_t v231 = (char *)&v215 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v20);
  uint64_t v265 = (char *)&v215 - v22;
  uint64_t v23 = type metadata accessor for AST.Group();
  uint64_t v277 = *(char **)(v23 - 8);
  unint64_t v278 = (void (**)(char *, void (**)(char *, uint64_t), uint64_t))v23;
  MEMORY[0x270FA5388](v23);
  uint64_t v273 = (char *)&v215 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  int v276 = (void (**)(char *, uint64_t))type metadata accessor for AST.Concatenation();
  unint64_t v274 = (char *)*(v276 - 1);
  MEMORY[0x270FA5388](v276);
  uint64_t v26 = (char *)&v215 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v27 = type metadata accessor for AST.Alternation();
  uint64_t v28 = *(void *)(v27 - 8);
  MEMORY[0x270FA5388](v27);
  uint64_t v30 = (char *)&v215 - ((v29 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v31 = type metadata accessor for AST.Node();
  uint64_t v32 = *(char **)(v31 - 8);
  uint64_t v33 = MEMORY[0x270FA5388](v31);
  int v236 = (char *)&v215 - ((v34 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v35 = MEMORY[0x270FA5388](v33);
  char v249 = (char *)&v215 - v36;
  uint64_t v37 = MEMORY[0x270FA5388](v35);
  unint64_t v264 = (char *)&v215 - v38;
  uint64_t v39 = MEMORY[0x270FA5388](v37);
  unint64_t v263 = (char *)&v215 - v40;
  uint64_t v41 = MEMORY[0x270FA5388](v39);
  int v43 = (void (**)(char *, uint64_t))((char *)&v215 - v42);
  uint64_t v44 = MEMORY[0x270FA5388](v41);
  uint64_t v46 = (char *)&v215 - v45;
  MEMORY[0x270FA5388](v44);
  uint64_t v48 = (char *)&v215 - v47;
  uint64_t v279 = (void (*)(char *, uint64_t, uint64_t))*((void *)v32 + 2);
  int v280 = v32 + 16;
  v279((char *)&v215 - v47, v283, v31);
  unsigned int isUniquelyReferenced_nonNull_native = (*((uint64_t (**)(char *, uint64_t))v32 + 11))(v48, v31);
  int v50 = *MEMORY[0x263F8FC00];
  uint64_t v281 = v32;
  uint64_t v283 = v31;
  if (isUniquelyReferenced_nonNull_native == v50)
  {
    (*((void (**)(char *, uint64_t))v32 + 12))(v48, v31);
    unint64_t v274 = *(char **)v48;
    uint64_t v51 = swift_projectBox();
    (*(void (**)(char *, uint64_t, uint64_t))(v28 + 16))(v30, v51, v27);
    uint64_t v52 = AST.Alternation.children.getter();
    (*(void (**)(char *, uint64_t))(v28 + 8))(v30, v27);
    int64_t v53 = *(void *)(v52 + 16);
    if (!v53)
    {
      swift_bridgeObjectRelease();
      uint64_t v63 = MEMORY[0x263F8EE78];
LABEL_34:
      uint64_t v30 = (char *)swift_allocObject();
      swift_release();
      *((void *)v30 + 2) = v63;
      return (unint64_t)v30;
    }
    uint64_t v48 = v32;
    uint64_t v54 = v275;
    v282[0] = MEMORY[0x263F8EE78];
    unsigned int isUniquelyReferenced_nonNull_native = specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v53, 0);
    unint64_t v55 = 0;
    int v276 = (void (**)(char *, uint64_t))(v48 + 8);
    uint64_t v277 = v48 + 32;
    uint64_t v56 = v283;
    unint64_t v278 = (void (**)(char *, void (**)(char *, uint64_t), uint64_t))v53;
    while (v55 < *(void *)(v52 + 16))
    {
      v279(v46, v52+ ((v48[80] + 32) & ~(unint64_t)v48[80])+ *((void *)v48 + 9) * v55, v56);
      unint64_t v57 = convert #1 () in AST.Node.dslTreeNode.getter(v46);
      if (v54) {
        goto LABEL_90;
      }
      uint64_t v58 = v57;
      if (((v57 >> 59) & 0x1E | (v57 >> 2) & 1) == 0xC)
      {
        (*v276)(v46, v56);
      }
      else
      {
        uint64_t v59 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (DSLTree.Node, DSLTree._AST.ASTNode));
        uint64_t v60 = swift_allocBox();
        uint64_t v61 = *(int *)(v59 + 48);
        uint64_t v56 = v283;
        *char v62 = v58;
        (*(void (**)(char *, char *, uint64_t))v277)((char *)v62 + v61, v46, v56);
        uint64_t v58 = v60 | 0x6000000000000000;
      }
      uint64_t v63 = v282[0];
      unsigned int isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
      if ((isUniquelyReferenced_nonNull_native & 1) == 0)
      {
        unsigned int isUniquelyReferenced_nonNull_native = specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(void *)(v63 + 16) + 1, 1);
        uint64_t v56 = v283;
        uint64_t v63 = v282[0];
      }
      unint64_t v65 = *(void *)(v63 + 16);
      unint64_t v64 = *(void *)(v63 + 24);
      int v43 = (void (**)(char *, uint64_t))(v65 + 1);
      if (v65 >= v64 >> 1)
      {
        unsigned int isUniquelyReferenced_nonNull_native = specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v64 > 1), v65 + 1, 1);
        uint64_t v56 = v283;
        uint64_t v63 = v282[0];
      }
      ++v55;
      *(void *)(v63 + 16) = v43;
      *(void *)(v63 + 8 * v65 + 32) = v58;
      uint64_t v48 = v281;
      if (v278 == (void (**)(char *, void (**)(char *, uint64_t), uint64_t))v55)
      {
        swift_bridgeObjectRelease();
        goto LABEL_34;
      }
    }
    __break(1u);
    goto LABEL_70;
  }
  if (isUniquelyReferenced_nonNull_native == *MEMORY[0x263F8FC10])
  {
    uint64_t v66 = v281;
    (*((void (**)(char *, uint64_t))v281 + 12))(v48, v283);
    uint64_t v67 = *(char **)v48;
    uint64_t v68 = swift_projectBox();
    int v69 = v274;
    uint64_t v70 = v276;
    (*((void (**)(char *, uint64_t, void (**)(char *, uint64_t)))v274 + 2))(v26, v68, v276);
    uint64_t v71 = AST.Concatenation.children.getter();
    (*((void (**)(char *, void))v69 + 1))(v26, v70);
    uint64_t v48 = *(char **)(v71 + 16);
    if (!v48)
    {
      swift_release();
      swift_bridgeObjectRelease();
      uint64_t v81 = MEMORY[0x263F8EE78];
LABEL_41:
      uint64_t v101 = swift_allocObject();
      *(void *)(v101 + 16) = v81;
      return v101 | 4;
    }
    int v276 = (void (**)(char *, uint64_t))v67;
    uint64_t v72 = v275;
    v282[0] = MEMORY[0x263F8EE78];
    unsigned int isUniquelyReferenced_nonNull_native = specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, (int64_t)v48, 0);
    uint64_t v73 = 0;
    uint64_t v277 = v66 + 8;
    unint64_t v278 = (void (**)(char *, void (**)(char *, uint64_t), uint64_t))(v66 + 32);
    while ((unint64_t)v73 < *(void *)(v71 + 16))
    {
      uint64_t v74 = v283;
      v279((char *)v43, v71+ ((v281[80] + 32) & ~(unint64_t)v281[80])+ *((void *)v281 + 9) * (void)v73, v283);
      unint64_t v75 = convert #1 () in AST.Node.dslTreeNode.getter(v43);
      if (v72) {
        goto LABEL_90;
      }
      uint64_t v76 = v75;
      if (((v75 >> 59) & 0x1E | (v75 >> 2) & 1) == 0xC)
      {
        (*(void (**)(char *, uint64_t))v277)((char *)v43, v74);
      }
      else
      {
        uint64_t v77 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (DSLTree.Node, DSLTree._AST.ASTNode));
        uint64_t v78 = swift_allocBox();
        uint64_t v80 = (char *)v79 + *(int *)(v77 + 48);
        *uint64_t v79 = v76;
        (*v278)(v80, v43, v74);
        uint64_t v76 = v78 | 0x6000000000000000;
      }
      uint64_t v81 = v282[0];
      unsigned int isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
      if ((isUniquelyReferenced_nonNull_native & 1) == 0)
      {
        unsigned int isUniquelyReferenced_nonNull_native = specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(void *)(v81 + 16) + 1, 1);
        uint64_t v81 = v282[0];
      }
      unint64_t v83 = *(void *)(v81 + 16);
      unint64_t v82 = *(void *)(v81 + 24);
      if (v83 >= v82 >> 1)
      {
        unsigned int isUniquelyReferenced_nonNull_native = specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v82 > 1), v83 + 1, 1);
        uint64_t v81 = v282[0];
      }
      ++v73;
      *(void *)(v81 + 16) = v83 + 1;
      *(void *)(v81 + 8 * v83 + 32) = v76;
      if (v48 == v73)
      {
        swift_release();
        swift_bridgeObjectRelease();
        goto LABEL_41;
      }
    }
    __break(1u);
    goto LABEL_80;
  }
  if (isUniquelyReferenced_nonNull_native == *MEMORY[0x263F8FC48])
  {
    (*((void (**)(char *, uint64_t))v281 + 12))(v48, v283);
    uint64_t v84 = *(char **)v48;
    uint64_t v85 = swift_projectBox();
    Swift::String v86 = v273;
    (*((void (**)(char *, uint64_t, void))v277 + 2))(v273, v85, v278);
    Swift::String v87 = v263;
    AST.Group.child.getter();
    uint64_t v88 = v275;
    unint64_t v89 = convert #1 () in AST.Node.dslTreeNode.getter(v87);
    if (!v88)
    {
      uint64_t v90 = v89;
      uint64_t v275 = 0;
      uint64_t v92 = v268;
      uint64_t v91 = v269;
      int v280 = v84;
      if (((v89 >> 59) & 0x1E | (v89 >> 2) & 1) == 0xC)
      {
        (*((void (**)(char *, uint64_t))v281 + 1))(v87, v283);
      }
      else
      {
        uint64_t v108 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (DSLTree.Node, DSLTree._AST.ASTNode));
        uint64_t v109 = swift_allocBox();
        Swift::String v111 = (char *)v110 + *(int *)(v108 + 48);
        *long long v110 = v90;
        (*((void (**)(char *, char *, uint64_t))v281 + 4))(v111, v87, v283);
        uint64_t v90 = v109 | 0x6000000000000000;
      }
      Swift::String v112 = v271;
      int v113 = v265;
      AST.Group.kind.getter();
      uint64_t v114 = v86;
      uint64_t v115 = v270;
      MEMORY[0x21050EDA0](v270);
      uint64_t v30 = v272 + 8;
      char v116 = (void (*)(char *, uint64_t))*((void *)v272 + 1);
      v116(v113, v115);
      int v117 = (*(uint64_t (**)(char *, uint64_t))(v92 + 88))(v112, v91);
      if (v117 == *MEMORY[0x263F8FC78])
      {
        (*((void (**)(char *, void (**)(char *, void (**)(char *, uint64_t), uint64_t)))v277
         + 1))(v114, v278);
        (*(void (**)(char *, uint64_t))(v92 + 96))(v112, v91);
        uint64_t v118 = v251;
        uint64_t v119 = v250;
        int v120 = v112;
        uint64_t v121 = v252;
        (*(void (**)(char *, char *, uint64_t))(v251 + 32))(v250, v120, v252);
        uint64_t v122 = swift_allocObject();
        MEMORY[0x21050EDA0](v282, v121);
        (*(void (**)(char *, uint64_t))(v118 + 8))(v119, v121);
        swift_release();
        uint64_t v123 = v282[1];
        *(void *)(v122 + 16) = v282[0];
        *(void *)(v122 + 24) = v123;
      }
      else
      {
        if (v117 == *MEMORY[0x263F8FC88])
        {
          (*((void (**)(char *, void (**)(char *, void (**)(char *, uint64_t), uint64_t)))v277
           + 1))(v273, v278);
          swift_release();
          type metadata accessor for Unsupported();
          lazy protocol witness table accessor for type AST.Quantification.Kind and conformance AST.Quantification.Kind(&lazy protocol witness table cache variable for type Unsupported and conformance Unsupported, MEMORY[0x263F8F860]);
          swift_allocError();
          MEMORY[0x21050E6B0](0xD000000000000017, 0x8000000209FB6190, "/Library/Caches/com.apple.xbs/Sources/swiftlang_overlay_Platform_Device/swift-experimental-string-processing/Sources/_StringProcessing/Regex/ASTConversion.swift", 160, 2, 56);
          swift_willThrow();
          (*(void (**)(char *, uint64_t))(v92 + 8))(v112, v91);
          swift_release();
          return (unint64_t)v30;
        }
        if (v117 != *MEMORY[0x263F8FCC8])
        {
          uint64_t v174 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (DSLTree._AST.GroupKind, DSLTree.Node));
          unint64_t v272 = v30;
          uint64_t v175 = v174;
          uint64_t v283 = swift_allocBox();
          uint64_t v177 = v176;
          uint64_t v281 = (char *)*(int *)(v175 + 48);
          uint64_t v178 = v91;
          uint64_t v179 = v231;
          uint64_t v180 = v273;
          AST.Group.kind.getter();
          (*((void (**)(char *, void (**)(char *, void (**)(char *, uint64_t), uint64_t)))v277
           + 1))(v180, v278);
          uint64_t v181 = v232;
          uint64_t v182 = v270;
          MEMORY[0x21050EDA0](v270);
          v116(v179, v182);
          (*(void (**)(uint64_t, char *, uint64_t))(v92 + 32))(v177, v181, v178);
          *(void *)&v281[v177] = v90;
          uint64_t v30 = (char *)(v283 | 0x1000000000000004);
          (*(void (**)(char *, uint64_t))(v92 + 8))(v271, v178);
          goto LABEL_65;
        }
        (*((void (**)(char *, void (**)(char *, void (**)(char *, uint64_t), uint64_t)))v277
         + 1))(v273, v278);
        uint64_t v122 = swift_allocObject();
        swift_release();
        *(void *)(v122 + 16) = 0;
        *(void *)(v122 + 24) = 0;
      }
      *(void *)(v122 + 32) = 0;
      *(unsigned char *)(v122 + 40) = 1;
      *(void *)(v122 + 48) = v90;
      uint64_t v30 = (char *)(v122 | 0x1000000000000000);
      *(_OWORD *)(v122 + 56) = 0u;
      *(_OWORD *)(v122 + 72) = 0u;
      *(unsigned char *)(v122 + 88) = 0;
      return (unint64_t)v30;
    }
LABEL_90:
    swift_unexpectedError();
    __break(1u);
    goto LABEL_91;
  }
  int v43 = (void (**)(char *, uint64_t))v281;
  if (isUniquelyReferenced_nonNull_native == *MEMORY[0x263F8FC08])
  {
    (*((void (**)(char *, uint64_t))v281 + 12))(v48, v283);
    uint64_t v93 = *(char **)v48;
    uint64_t v94 = swift_projectBox();
    uint64_t v95 = v253;
    (*(void (**)(char *, uint64_t, uint64_t))(v267 + 16))(v266, v94, v253);
    Swift::String v96 = v264;
    AST.Conditional.trueBranch.getter();
    uint64_t v97 = v275;
    unint64_t v98 = convert #1 () in AST.Node.dslTreeNode.getter(v96);
    if (!v97)
    {
      uint64_t v99 = v98;
      int v100 = v249;
      if (((v98 >> 59) & 0x1E | (v98 >> 2) & 1) == 0xC)
      {
        v43[1](v264, v283);
      }
      else
      {
        uint64_t v132 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (DSLTree.Node, DSLTree._AST.ASTNode));
        uint64_t v133 = swift_allocBox();
        uint64_t v135 = (char *)v134 + *(int *)(v132 + 48);
        *unint64_t v134 = v99;
        ((void (*)(char *, char *, uint64_t))v43[4])(v135, v264, v283);
        uint64_t v99 = v133 | 0x6000000000000000;
      }
      AST.Conditional.falseBranch.getter();
      unint64_t v136 = convert #1 () in AST.Node.dslTreeNode.getter(v100);
      uint64_t v275 = 0;
      int v280 = v93;
      if (((v136 >> 59) & 0x1E | (v136 >> 2) & 1) == 0xC)
      {
        v43[1](v100, v283);
      }
      else
      {
        uint64_t v137 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (DSLTree.Node, DSLTree._AST.ASTNode));
        uint64_t v138 = swift_allocBox();
        uint64_t v140 = (char *)v139 + *(int *)(v137 + 48);
        *uint64_t v139 = v136;
        ((void (*)(char *, char *, uint64_t))v43[4])(v140, v100, v283);
        unint64_t v136 = v138 | 0x6000000000000000;
      }
      uint64_t v141 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (DSLTree._AST.ConditionKind, DSLTree.Node, DSLTree.Node));
      uint64_t v142 = swift_allocBox();
      uint64_t v144 = v143;
      uint64_t v145 = *(int *)(v141 + 48);
      uint64_t v146 = *(int *)(v141 + 64);
      uint64_t v147 = v254;
      uint64_t v148 = v266;
      AST.Conditional.condition.getter();
      (*(void (**)(char *, uint64_t))(v267 + 8))(v148, v95);
      unint64_t v149 = v260;
      AST.Conditional.Condition.kind.getter();
      (*(void (**)(char *, uint64_t))(v256 + 8))(v147, v258);
      (*(void (**)(uint64_t, char *, uint64_t))(v261 + 32))(v144, v149, v262);
      swift_release();
      *(void *)(v144 + v145) = v99;
      *(void *)(v144 + v146) = v136;
      return v142 | 0x2000000000000004;
    }
    goto LABEL_90;
  }
  if (isUniquelyReferenced_nonNull_native == *MEMORY[0x263F8FC28])
  {
    (*((void (**)(char *, uint64_t))v281 + 12))(v48, v283);
    uint64_t v102 = *(char **)v48;
    uint64_t v103 = swift_projectBox();
    (*(void (**)(char *, uint64_t, uint64_t))(v257 + 16))(v255, v103, v259);
    long long v104 = v236;
    AST.Quantification.child.getter();
    uint64_t v105 = v275;
    unint64_t v106 = convert #1 () in AST.Node.dslTreeNode.getter(v104);
    if (!v105)
    {
      uint64_t v107 = v106;
      uint64_t v275 = 0;
      int v280 = v102;
      if (((v106 >> 59) & 0x1E | (v106 >> 2) & 1) == 0xC)
      {
        (*((void (**)(char *, uint64_t))v281 + 1))(v104, v283);
      }
      else
      {
        uint64_t v158 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (DSLTree.Node, DSLTree._AST.ASTNode));
        uint64_t v159 = swift_allocBox();
        uint64_t v161 = (char *)v160 + *(int *)(v158 + 48);
        *uint64_t v160 = v107;
        (*((void (**)(char *, char *, uint64_t))v281 + 4))(v161, v104, v283);
        uint64_t v107 = v159 | 0x6000000000000000;
      }
      uint64_t v162 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (DSLTree._AST.QuantificationAmount, DSLTree.QuantificationKind, DSLTree.Node));
      uint64_t v283 = swift_allocBox();
      uint64_t v164 = v163;
      uint64_t v165 = v163 + *(int *)(v162 + 48);
      uint64_t v166 = *(int *)(v162 + 64);
      unint64_t v167 = v237;
      uint64_t v168 = v255;
      AST.Quantification.amount.getter();
      uint64_t v169 = v240;
      uint64_t v170 = v239;
      MEMORY[0x21050EDA0](v239);
      (*(void (**)(char *, uint64_t))(v238 + 8))(v167, v170);
      (*(void (**)(uint64_t, char *, uint64_t))(v241 + 32))(v164, v169, v242);
      uint64_t v171 = v243;
      AST.Quantification.kind.getter();
      (*(void (**)(char *, uint64_t))(v257 + 8))(v168, v259);
      uint64_t v172 = v246;
      uint64_t v173 = v245;
      MEMORY[0x21050EDA0](v245);
      (*(void (**)(char *, uint64_t))(v244 + 8))(v171, v173);
      (*(void (**)(uint64_t, char *, uint64_t))(v247 + 32))(v165, v172, v248);
      type metadata accessor for DSLTree.QuantificationKind(0);
      swift_storeEnumTagMultiPayload();
      swift_release();
      *(void *)(v164 + v166) = v107;
      return v283 | 0x3000000000000000;
    }
    goto LABEL_90;
  }
  if (isUniquelyReferenced_nonNull_native == *MEMORY[0x263F8FC50])
  {
    (*((void (**)(char *, uint64_t))v281 + 12))(v48, v283);
    uint64_t v124 = swift_projectBox();
    uint64_t v125 = v234;
    unsigned __int8 v126 = v233;
    uint64_t v127 = v235;
    (*(void (**)(char *, uint64_t, uint64_t))(v234 + 16))(v233, v124, v235);
    uint64_t v128 = swift_allocObject();
    uint64_t v129 = MEMORY[0x21050ECF0]();
    uint64_t v131 = v130;
    (*(void (**)(char *, uint64_t))(v125 + 8))(v126, v127);
    swift_release();
    *(void *)(v128 + 16) = v129;
    *(void *)(v128 + 24) = v131;
    return v128 | 0x5000000000000000;
  }
  if (isUniquelyReferenced_nonNull_native == *MEMORY[0x263F8FC58])
  {
    (*((void (**)(char *, uint64_t))v281 + 12))(v48, v283);
    uint64_t v150 = swift_projectBox();
    uint64_t v151 = v229;
    uint64_t v152 = v228;
    uint64_t v153 = v230;
    (*(void (**)(char *, uint64_t, uint64_t))(v229 + 16))(v228, v150, v230);
    uint64_t v154 = swift_allocObject();
    uint64_t v155 = MEMORY[0x21050ED10]();
    uint64_t v157 = v156;
    (*(void (**)(char *, uint64_t))(v151 + 8))(v152, v153);
    swift_release();
    *(void *)(v154 + 16) = v155;
    *(void *)(v154 + 24) = v157;
    return v154 | 0x4000000000000004;
  }
  if (isUniquelyReferenced_nonNull_native == *MEMORY[0x263F8FC18])
  {
    (*((void (**)(char *, uint64_t))v281 + 1))(v48, v283);
    type metadata accessor for Unsupported();
    lazy protocol witness table accessor for type AST.Quantification.Kind and conformance AST.Quantification.Kind(&lazy protocol witness table cache variable for type Unsupported and conformance Unsupported, MEMORY[0x263F8F860]);
    swift_allocError();
    MEMORY[0x21050E6B0](0xD000000000000013, 0x8000000209FB60C0, "/Library/Caches/com.apple.xbs/Sources/swiftlang_overlay_Platform_Device/swift-experimental-string-processing/Sources/_StringProcessing/Regex/ASTConversion.swift", 160, 2, 79);
    swift_willThrow();
    return (unint64_t)v30;
  }
LABEL_70:
  if (isUniquelyReferenced_nonNull_native == *MEMORY[0x263F8FC38])
  {
    ((void (*)(char *))v43[12])(v48);
    uint64_t v184 = swift_projectBox();
    uint64_t v185 = v223;
    unint64_t v186 = v222;
    uint64_t v187 = v224;
    (*(void (**)(char *, uint64_t, uint64_t))(v223 + 16))(v222, v184, v224);
    unint64_t v188 = v225;
    AST.Atom.kind.getter();
    uint64_t v189 = v226;
    uint64_t v190 = v227;
    if ((*(unsigned int (**)(char *, uint64_t))(v226 + 88))(v188, v227) == *MEMORY[0x263F8FB90])
    {
      (*(void (**)(char *, uint64_t))(v185 + 8))(v186, v187);
      (*(void (**)(char *, uint64_t))(v189 + 96))(v188, v190);
      uint64_t v191 = v220;
      unint64_t v192 = v217;
      uint64_t v193 = v221;
      (*(void (**)(char *, char *, uint64_t))(v220 + 32))(v217, v188, v221);
      uint64_t v194 = AST.Atom.ScalarSequence.scalarValues.getter();
      (*(void (**)(char *, uint64_t))(v191 + 8))(v192, v193);
      int64_t v195 = *(void *)(v194 + 16);
      if (v195)
      {
        v282[0] = MEMORY[0x263F8EE78];
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v195, 0);
        unint64_t v196 = 0;
        uint64_t v197 = v282[0];
        while (v196 < *(void *)(v194 + 16))
        {
          int v198 = *(_DWORD *)(v194 + 4 * v196 + 32);
          type metadata accessor for DSLTree.Atom(0);
          uint64_t v199 = swift_allocBox();
          *unint64_t v200 = v198;
          swift_storeEnumTagMultiPayload();
          v282[0] = v197;
          unint64_t v202 = *(void *)(v197 + 16);
          unint64_t v201 = *(void *)(v197 + 24);
          if (v202 >= v201 >> 1)
          {
            specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v201 > 1), v202 + 1, 1);
            uint64_t v197 = v282[0];
          }
          ++v196;
          *(void *)(v197 + 16) = v202 + 1;
          *(void *)(v197 + 8 * v202 + 32) = v199 | 0x4000000000000000;
          if (v195 == v196)
          {
            swift_release();
            swift_bridgeObjectRelease();
            goto LABEL_88;
          }
        }
        __break(1u);
        goto LABEL_90;
      }
      swift_release();
      swift_bridgeObjectRelease();
      uint64_t v197 = MEMORY[0x263F8EE78];
LABEL_88:
      uint64_t v214 = swift_allocObject();
      *(void *)(v214 + 16) = v197;
      return v214 | 4;
    }
    type metadata accessor for DSLTree.Atom(0);
    uint64_t v208 = swift_allocBox();
    AST.Atom.dslTreeAtom.getter(v209);
    (*(void (**)(char *, uint64_t))(v185 + 8))(v186, v187);
    uint64_t v30 = (char *)(v208 | 0x4000000000000000);
    (*(void (**)(char *, uint64_t))(v189 + 8))(v188, v190);
LABEL_65:
    swift_release();
    return (unint64_t)v30;
  }
LABEL_80:
  if (isUniquelyReferenced_nonNull_native == *MEMORY[0x263F8FC30])
  {
    ((void (*)(char *))v43[12])(v48);
    uint64_t v203 = swift_projectBox();
    uint64_t v204 = v218;
    uint64_t v205 = v216;
    uint64_t v206 = v219;
    (*(void (**)(char *, uint64_t, uint64_t))(v218 + 16))(v216, v203, v219);
    uint64_t v207 = swift_allocObject();
    AST.CustomCharacterClass.dslTreeClass.getter(v207 + 16);
    (*(void (**)(char *, uint64_t))(v204 + 8))(v205, v206);
    swift_release();
    return v207 | 0x3000000000000004;
  }
  if (isUniquelyReferenced_nonNull_native == *MEMORY[0x263F8FC20])
  {
    ((void (*)(char *))v43[12])(v48);
    uint64_t v210 = type metadata accessor for AST.AbsentFunction();
    uint64_t v211 = swift_projectBox();
    type metadata accessor for DSLTree._AST.AbsentFunction(0);
    uint64_t v212 = swift_allocBox();
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v210 - 8) + 16))(v213, v211, v210);
    swift_release();
    return v212 | 0x5000000000000004;
  }
  if (isUniquelyReferenced_nonNull_native == *MEMORY[0x263F8FC40])
  {
    ((void (*)(char *))v43[1])(v48);
    return 0x8000000000000000;
  }
LABEL_91:
  unint64_t result = _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t AST.Atom.dslTreeAtom.getter@<X0>(char *a1@<X8>)
{
  int64_t v53 = a1;
  uint64_t v2 = type metadata accessor for AST.Atom.Scalar();
  uint64_t v47 = *(void *)(v2 - 8);
  uint64_t v48 = v2;
  MEMORY[0x270FA5388](v2);
  uint64_t v46 = (char *)&v44 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v4 = type metadata accessor for AST.Atom.EscapedBuiltin();
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v6 = MEMORY[0x270FA5388](v4);
  uint64_t v45 = (char *)&v44 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v6);
  uint64_t v9 = (char *)&v44 - v8;
  uint64_t v10 = type metadata accessor for AST.Atom.Kind();
  uint64_t v11 = *(void *)(v10 - 8);
  uint64_t v12 = MEMORY[0x270FA5388](v10);
  uint64_t v51 = (char *)&v44 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = MEMORY[0x270FA5388](v12);
  uint64_t v16 = (char *)&v44 - v15;
  MEMORY[0x270FA5388](v14);
  uint64_t v18 = (char *)&v44 - v17;
  uint64_t v52 = v1;
  AST.Atom.kind.getter();
  uint64_t v19 = *(uint64_t (**)(char *, uint64_t))(v11 + 88);
  int v20 = v19(v18, v10);
  int v21 = *MEMORY[0x263F8FBD8];
  uint64_t v50 = v5;
  if (v20 != v21)
  {
    if (v20 == *MEMORY[0x263F8FB68])
    {
      char v22 = 9;
    }
    else
    {
      if (v20 != *MEMORY[0x263F8FB70])
      {
        LOBYTE(v54[0]) = 13;
        uint64_t v49 = v11;
        (*(void (**)(char *, uint64_t))(v11 + 8))(v18, v10);
        goto LABEL_3;
      }
      char v22 = 10;
    }
LABEL_10:
    *int64_t v53 = v22;
    type metadata accessor for DSLTree.Atom(0);
    return swift_storeEnumTagMultiPayload();
  }
  uint64_t v49 = v11;
  (*(void (**)(char *, uint64_t))(v11 + 96))(v18, v10);
  (*(void (**)(char *, char *, uint64_t))(v5 + 32))(v9, v18, v4);
  AST.Atom.EscapedBuiltin.dslAssertionKind.getter(v54);
  (*(void (**)(char *, uint64_t))(v5 + 8))(v9, v4);
LABEL_3:
  char v22 = v54[0];
  if (LOBYTE(v54[0]) != 13) {
    goto LABEL_10;
  }
  AST.Atom.kind.getter();
  if (v19(v16, v10) == v21)
  {
    (*(void (**)(char *, uint64_t))(v49 + 96))(v16, v10);
    uint64_t v23 = v50;
    (*(void (**)(char *, char *, uint64_t))(v50 + 32))(v9, v16, v4);
    AST.Atom.EscapedBuiltin.dslCharacterClass.getter(v54);
    (*(void (**)(char *, uint64_t))(v23 + 8))(v9, v4);
  }
  else
  {
    LOBYTE(v54[0]) = 14;
    (*(void (**)(char *, uint64_t))(v49 + 8))(v16, v10);
  }
  uint64_t v25 = v51;
  char v22 = v54[0];
  if (LOBYTE(v54[0]) != 14) {
    goto LABEL_10;
  }
  AST.Atom.kind.getter();
  int v26 = v19(v25, v10);
  if (v26 == *MEMORY[0x263F8FBC0])
  {
    (*(void (**)(char *, uint64_t))(v49 + 96))(v25, v10);
    uint64_t v27 = *((void *)v25 + 1);
    uint64_t v28 = v53;
    *(void *)int64_t v53 = *(void *)v25;
    *((void *)v28 + 1) = v27;
    type metadata accessor for DSLTree.Atom(0);
    return swift_storeEnumTagMultiPayload();
  }
  uint64_t v29 = v49;
  if (v26 == *MEMORY[0x263F8FBC8])
  {
    (*(void (**)(char *, uint64_t))(v49 + 96))(v25, v10);
    uint64_t v30 = v46;
    uint64_t v31 = v47;
    uint64_t v32 = v25;
    uint64_t v33 = v48;
    (*(void (**)(char *, char *, uint64_t))(v47 + 32))(v46, v32, v48);
    int v34 = AST.Atom.Scalar.value.getter();
    (*(void (**)(char *, uint64_t))(v31 + 8))(v30, v33);
    *(_DWORD *)int64_t v53 = v34;
    goto LABEL_28;
  }
  if (v26 == v21)
  {
    (*(void (**)(char *, uint64_t))(v49 + 96))(v25, v10);
    uint64_t v35 = v50;
    uint64_t v36 = v45;
    (*(void (**)(char *, char *, uint64_t))(v50 + 32))(v45, v25, v4);
    uint64_t v37 = AST.Atom.EscapedBuiltin.scalarValue.getter();
    if ((v37 & 0x100000000) == 0)
    {
      int v38 = v37;
      (*(void (**)(char *, uint64_t))(v35 + 8))(v36, v4);
      *(_DWORD *)int64_t v53 = v38;
      goto LABEL_28;
    }
    v54[0] = 0;
    v54[1] = 0xE000000000000000;
    _StringGuts.grow(_:)(77);
    v42._uint64_t object = (void *)0x8000000209FB61B0;
    v42._uint64_t countAndFlagsBits = 0xD00000000000004BLL;
    String.append(_:)(v42);
    type metadata accessor for AST.Atom();
    lazy protocol witness table accessor for type AST.Quantification.Kind and conformance AST.Quantification.Kind(&lazy protocol witness table cache variable for type AST.Atom and conformance AST.Atom, MEMORY[0x263F8FBF0]);
    v43._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
    String.append(_:)(v43);
    swift_bridgeObjectRelease();
    uint64_t result = _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
  }
  else
  {
    if (v26 == *MEMORY[0x263F8FB80])
    {
      (*(void (**)(char *, uint64_t))(v49 + 96))(v25, v10);
      uint64_t v39 = type metadata accessor for AST.Reference();
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v39 - 8) + 32))(v53, v25, v39);
      type metadata accessor for DSLTree.Atom(0);
      return swift_storeEnumTagMultiPayload();
    }
    if (v26 == *MEMORY[0x263F8FBB0])
    {
      (*(void (**)(char *, uint64_t))(v49 + 96))(v25, v10);
      uint64_t v40 = type metadata accessor for AST.MatchingOptionSequence();
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v40 - 8) + 32))(v53, v25, v40);
      type metadata accessor for DSLTree.Atom(0);
      return swift_storeEnumTagMultiPayload();
    }
    if (v26 == *MEMORY[0x263F8FBB8])
    {
LABEL_28:
      type metadata accessor for DSLTree.Atom(0);
      return swift_storeEnumTagMultiPayload();
    }
    uint64_t v41 = type metadata accessor for AST.Atom();
    (*(void (**)(char *, uint64_t, uint64_t))(*(void *)(v41 - 8) + 16))(v53, v52, v41);
    type metadata accessor for DSLTree.Atom(0);
    swift_storeEnumTagMultiPayload();
    return (*(uint64_t (**)(char *, uint64_t))(v29 + 8))(v25, v10);
  }
  return result;
}

size_t AST.CustomCharacterClass.dslTreeClass.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v24 = type metadata accessor for AST.CustomCharacterClass.Member();
  uint64_t v3 = *(void *)(v24 - 8);
  MEMORY[0x270FA5388](v24);
  uint64_t v5 = (char *)v19 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = type metadata accessor for DSLTree.CustomCharacterClass.Member(0);
  uint64_t v7 = *(void *)(v6 - 8);
  MEMORY[0x270FA5388](v6 - 8);
  uint64_t v9 = (char *)v19 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = AST.CustomCharacterClass.members.getter();
  int64_t v11 = *(void *)(v10 + 16);
  if (v11)
  {
    v19[1] = v1;
    uint64_t v20 = a1;
    uint64_t v25 = MEMORY[0x263F8EE78];
    size_t result = specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v11, 0);
    unint64_t v13 = 0;
    uint64_t v22 = v3 + 8;
    uint64_t v23 = v3 + 16;
    int64_t v14 = v11;
    int64_t v21 = v11;
    while (v13 < *(void *)(v10 + 16))
    {
      uint64_t v15 = v24;
      (*(void (**)(char *, unint64_t, uint64_t))(v3 + 16))(v5, v10+ ((*(unsigned __int8 *)(v3 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80))+ *(void *)(v3 + 72) * v13, v24);
      convert #1 (_:) in AST.CustomCharacterClass.dslTreeClass.getter((uint64_t)v5, v9);
      (*(void (**)(char *, uint64_t))(v3 + 8))(v5, v15);
      uint64_t v16 = v25;
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(void *)(v16 + 16) + 1, 1);
        int64_t v14 = v21;
        uint64_t v16 = v25;
      }
      unint64_t v18 = *(void *)(v16 + 16);
      unint64_t v17 = *(void *)(v16 + 24);
      if (v18 >= v17 >> 1)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v17 > 1, v18 + 1, 1);
        int64_t v14 = v21;
        uint64_t v16 = v25;
      }
      ++v13;
      *(void *)(v16 + 16) = v18 + 1;
      size_t result = outlined init with take of DSLTree.QuantificationKind((uint64_t)v9, v16+ ((*(unsigned __int8 *)(v7 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80))+ *(void *)(v7 + 72) * v18, type metadata accessor for DSLTree.CustomCharacterClass.Member);
      if (v14 == v13)
      {
        swift_bridgeObjectRelease();
        a1 = v20;
        goto LABEL_11;
      }
    }
    __break(1u);
  }
  else
  {
    swift_bridgeObjectRelease();
    uint64_t v16 = MEMORY[0x263F8EE78];
LABEL_11:
    size_t result = AST.CustomCharacterClass.isInverted.getter();
    *(void *)a1 = v16;
    *(unsigned char *)(a1 + 8) = result & 1;
  }
  return result;
}

uint64_t convert #1 (_:) in AST.CustomCharacterClass.dslTreeClass.getter@<X0>(uint64_t a1@<X0>, char *a2@<X8>)
{
  uint64_t v104 = a1;
  uint64_t v102 = a2;
  uint64_t v87 = type metadata accessor for AST.Trivia();
  uint64_t v86 = *(void *)(v87 - 8);
  MEMORY[0x270FA5388](v87);
  uint64_t v88 = (char *)&v83 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v85 = type metadata accessor for AST.CustomCharacterClass.SetOp();
  uint64_t v84 = *(void *)(v85 - 8);
  MEMORY[0x270FA5388](v85);
  unint64_t v83 = (char *)&v83 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v101 = type metadata accessor for DSLTree.CustomCharacterClass.Member(0);
  uint64_t v105 = *(void *)(v101 - 8);
  uint64_t v4 = MEMORY[0x270FA5388](v101);
  uint64_t v97 = (char *)&v83 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v4);
  unint64_t v98 = (char *)&v83 - v6;
  uint64_t v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Source.Located<AST.CustomCharacterClass.SetOp>);
  uint64_t v90 = *(void *)(v7 - 8);
  uint64_t v91 = v7;
  MEMORY[0x270FA5388](v7);
  unint64_t v89 = (char *)&v83 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = type metadata accessor for AST.Quote();
  uint64_t v93 = *(void *)(v9 - 8);
  uint64_t v94 = v9;
  MEMORY[0x270FA5388](v9);
  uint64_t v92 = (char *)&v83 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = type metadata accessor for AST.Atom();
  uint64_t v99 = *(void *)(v11 - 8);
  uint64_t v100 = v11;
  uint64_t v12 = MEMORY[0x270FA5388](v11);
  Swift::String v96 = (char *)&v83 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v12);
  uint64_t v15 = (char *)&v83 - v14;
  uint64_t v16 = type metadata accessor for AST.CustomCharacterClass.Range();
  uint64_t v95 = *(void *)(v16 - 8);
  MEMORY[0x270FA5388](v16);
  unint64_t v18 = (char *)&v83 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v19 = type metadata accessor for AST.CustomCharacterClass();
  uint64_t v20 = *(void *)(v19 - 8);
  MEMORY[0x270FA5388](v19);
  uint64_t v22 = (char *)&v83 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v23 = type metadata accessor for AST.CustomCharacterClass.Member();
  uint64_t v24 = *(void *)(v23 - 8);
  uint64_t v25 = MEMORY[0x270FA5388](v23);
  uint64_t v27 = (char *)&v83 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v25);
  uint64_t v29 = (uint64_t *)((char *)&v83 - v28);
  uint64_t v30 = v104;
  uint64_t v103 = *(void (**)(char *, uint64_t, uint64_t))(v24 + 16);
  uint64_t v104 = v24 + 16;
  v103((char *)&v83 - v28, v30, v23);
  int v31 = (*(uint64_t (**)(uint64_t *, uint64_t))(v24 + 88))(v29, v23);
  if (v31 == *MEMORY[0x263F8F9F0])
  {
    (*(void (**)(uint64_t *, uint64_t))(v24 + 96))(v29, v23);
    uint64_t v32 = (*(uint64_t (**)(char *, uint64_t *, uint64_t))(v20 + 32))(v22, v29, v19);
    AST.CustomCharacterClass.dslTreeClass.getter(&v106, v32);
    (*(void (**)(char *, uint64_t))(v20 + 8))(v22, v19);
    char v33 = v107;
    int v34 = v102;
    *(void *)uint64_t v102 = v106;
    v34[8] = v33;
    return swift_storeEnumTagMultiPayload();
  }
  if (v31 == *MEMORY[0x263F8F9E8])
  {
    (*(void (**)(uint64_t *, uint64_t))(v24 + 96))(v29, v23);
    uint64_t v35 = v95;
    (*(void (**)(char *, uint64_t *, uint64_t))(v95 + 32))(v18, v29, v16);
    uint64_t v36 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (DSLTree.Atom, DSLTree.Atom));
    uint64_t v37 = v102;
    int v38 = &v102[*(int *)(v36 + 48)];
    AST.CustomCharacterClass.Range.lhs.getter();
    AST.Atom.dslTreeAtom.getter(v37);
    uint64_t v39 = v100;
    uint64_t v40 = *(void (**)(char *, uint64_t))(v99 + 8);
    v40(v15, v100);
    uint64_t v41 = v96;
    AST.CustomCharacterClass.Range.rhs.getter();
    (*(void (**)(char *, uint64_t))(v35 + 8))(v18, v16);
    AST.Atom.dslTreeAtom.getter(v38);
    v40(v41, v39);
    return swift_storeEnumTagMultiPayload();
  }
  if (v31 == *MEMORY[0x263F8F9D8])
  {
    (*(void (**)(uint64_t *, uint64_t))(v24 + 96))(v29, v23);
    uint64_t v43 = v99;
    uint64_t v42 = v100;
    (*(void (**)(char *, uint64_t *, uint64_t))(v99 + 32))(v15, v29, v100);
    AST.Atom.dslTreeAtom.getter(v102);
    (*(void (**)(char *, uint64_t))(v43 + 8))(v15, v42);
    return swift_storeEnumTagMultiPayload();
  }
  if (v31 == *MEMORY[0x263F8F9E0])
  {
    (*(void (**)(uint64_t *, uint64_t))(v24 + 96))(v29, v23);
    uint64_t v45 = v92;
    uint64_t v44 = v93;
    uint64_t v46 = v94;
    uint64_t v47 = (*(uint64_t (**)(char *, uint64_t *, uint64_t))(v93 + 32))(v92, v29, v94);
    uint64_t v48 = MEMORY[0x21050ECF0](v47);
    uint64_t v50 = v49;
    (*(void (**)(char *, uint64_t))(v44 + 8))(v45, v46);
    uint64_t v51 = v102;
    *(void *)uint64_t v102 = v48;
    *((void *)v51 + 1) = v50;
    return swift_storeEnumTagMultiPayload();
  }
  if (v31 == *MEMORY[0x263F8F9F8])
  {
    (*(void (**)(uint64_t *, uint64_t))(v24 + 96))(v29, v23);
    uint64_t v52 = v86;
    uint64_t v54 = v87;
    int64_t v53 = v88;
    uint64_t v55 = (*(uint64_t (**)(char *, uint64_t *, uint64_t))(v86 + 32))(v88, v29, v87);
    uint64_t v56 = MEMORY[0x21050ED10](v55);
    uint64_t v58 = v57;
    (*(void (**)(char *, uint64_t))(v52 + 8))(v53, v54);
    uint64_t v59 = v102;
    *(void *)uint64_t v102 = v56;
    *((void *)v59 + 1) = v58;
    return swift_storeEnumTagMultiPayload();
  }
  if (v31 == *MEMORY[0x263F8F9D0])
  {
    (*(void (**)(uint64_t *, uint64_t))(v24 + 96))(v29, v23);
    uint64_t v60 = *v29;
    uint64_t v61 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ([AST.CustomCharacterClass.Member], Source.Located<AST.CustomCharacterClass.SetOp>, [AST.CustomCharacterClass.Member]));
    char v62 = (char *)v29 + *(int *)(v61 + 48);
    uint64_t v100 = *(uint64_t *)((char *)v29 + *(int *)(v61 + 64));
    (*(void (**)(char *, char *, uint64_t))(v90 + 32))(v89, v62, v91);
    int64_t v63 = *(void *)(v60 + 16);
    uint64_t v64 = MEMORY[0x263F8EE78];
    if (v63)
    {
      uint64_t v106 = MEMORY[0x263F8EE78];
      specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v63, 0);
      unint64_t v65 = 0;
      uint64_t v99 = v24 + 8;
      uint64_t v66 = (uint64_t)v98;
      while (v65 < *(void *)(v60 + 16))
      {
        v103(v27, v60+ ((*(unsigned __int8 *)(v24 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v24 + 80))+ *(void *)(v24 + 72) * v65, v23);
        convert #1 (_:) in AST.CustomCharacterClass.dslTreeClass.getter(v27);
        (*(void (**)(char *, uint64_t))(v24 + 8))(v27, v23);
        uint64_t v67 = v106;
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        {
          specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(void *)(v67 + 16) + 1, 1);
          uint64_t v66 = (uint64_t)v98;
          uint64_t v67 = v106;
        }
        unint64_t v69 = *(void *)(v67 + 16);
        unint64_t v68 = *(void *)(v67 + 24);
        if (v69 >= v68 >> 1)
        {
          specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v68 > 1, v69 + 1, 1);
          uint64_t v66 = (uint64_t)v98;
          uint64_t v67 = v106;
        }
        ++v65;
        *(void *)(v67 + 16) = v69 + 1;
        outlined init with take of DSLTree.QuantificationKind(v66, v67+ ((*(unsigned __int8 *)(v105 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v105 + 80))+ *(void *)(v105 + 72) * v69, type metadata accessor for DSLTree.CustomCharacterClass.Member);
        if (v63 == v65)
        {
          swift_bridgeObjectRelease();
          uint64_t v64 = MEMORY[0x263F8EE78];
          goto LABEL_22;
        }
      }
      __break(1u);
      goto LABEL_39;
    }
    swift_bridgeObjectRelease();
    uint64_t v67 = MEMORY[0x263F8EE78];
LABEL_22:
    int64_t v70 = *(void *)(v100 + 16);
    if (v70)
    {
      uint64_t v106 = v64;
      specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v70, 0);
      unint64_t v71 = 0;
      uint64_t v99 = v24 + 8;
      uint64_t v72 = (uint64_t)v97;
      while (v71 < *(void *)(v100 + 16))
      {
        v103(v27, v100+ ((*(unsigned __int8 *)(v24 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v24 + 80))+ *(void *)(v24 + 72) * v71, v23);
        convert #1 (_:) in AST.CustomCharacterClass.dslTreeClass.getter(v27);
        (*(void (**)(char *, uint64_t))(v24 + 8))(v27, v23);
        uint64_t v73 = v106;
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        {
          specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(void *)(v73 + 16) + 1, 1);
          uint64_t v72 = (uint64_t)v97;
          uint64_t v73 = v106;
        }
        unint64_t v75 = *(void *)(v73 + 16);
        unint64_t v74 = *(void *)(v73 + 24);
        if (v75 >= v74 >> 1)
        {
          specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v74 > 1, v75 + 1, 1);
          uint64_t v72 = (uint64_t)v97;
          uint64_t v73 = v106;
        }
        ++v71;
        *(void *)(v73 + 16) = v75 + 1;
        outlined init with take of DSLTree.QuantificationKind(v72, v73+ ((*(unsigned __int8 *)(v105 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v105 + 80))+ *(void *)(v105 + 72) * v75, type metadata accessor for DSLTree.CustomCharacterClass.Member);
        if (v70 == v71)
        {
          swift_bridgeObjectRelease();
          goto LABEL_32;
        }
      }
LABEL_39:
      __break(1u);
      goto LABEL_40;
    }
    swift_bridgeObjectRelease();
    uint64_t v73 = MEMORY[0x263F8EE78];
LABEL_32:
    uint64_t v76 = v83;
    uint64_t v77 = v91;
    uint64_t v78 = v89;
    MEMORY[0x21050EDA0](v91);
    int v79 = (*(uint64_t (**)(char *, uint64_t))(v84 + 88))(v76, v85);
    uint64_t v80 = v102;
    if (v79 == *MEMORY[0x263F8F9B8] || v79 == *MEMORY[0x263F8F9C0] || v79 == *MEMORY[0x263F8F9C8])
    {
      (*(void (**)(char *, uint64_t))(v90 + 8))(v78, v77);
      uint64_t v81 = swift_allocObject();
      *(void *)(v81 + 16) = v67;
      *(unsigned char *)(v81 + 24) = 0;
      *(void *)(v81 + 32) = v73;
      *(unsigned char *)(v81 + 40) = 0;
      *(void *)uint64_t v80 = v81;
      return swift_storeEnumTagMultiPayload();
    }
  }
LABEL_40:
  uint64_t result = _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t AST.Atom.EscapedBuiltin.dslAssertionKind.getter@<X0>(unsigned char *a1@<X8>)
{
  uint64_t v2 = v1;
  uint64_t v4 = type metadata accessor for AST.Atom.EscapedBuiltin();
  uint64_t v5 = *(void *)(v4 - 8);
  MEMORY[0x270FA5388](v4);
  uint64_t v7 = (char *)&v9 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t))(v5 + 16))(v7, v2, v4);
  uint64_t result = (*(uint64_t (**)(char *, uint64_t))(v5 + 88))(v7, v4);
  if (result == *MEMORY[0x263F8FA38])
  {
    *a1 = 11;
  }
  else if (result == *MEMORY[0x263F8FA80])
  {
    *a1 = 12;
  }
  else if (result == *MEMORY[0x263F8FA60])
  {
    *a1 = 0;
  }
  else if (result == *MEMORY[0x263F8FAA8])
  {
    *a1 = 1;
  }
  else if (result == *MEMORY[0x263F8FA30])
  {
    *a1 = 2;
  }
  else if (result == *MEMORY[0x263F8FAB0])
  {
    *a1 = 4;
  }
  else if (result == *MEMORY[0x263F8FA90])
  {
    *a1 = 3;
  }
  else if (result == *MEMORY[0x263F8FA18])
  {
    *a1 = 5;
  }
  else if (result == *MEMORY[0x263F8FA50])
  {
    *a1 = 6;
  }
  else
  {
    *a1 = 13;
    return (*(uint64_t (**)(char *, uint64_t))(v5 + 8))(v7, v4);
  }
  return result;
}

uint64_t AST.Atom.EscapedBuiltin.dslCharacterClass.getter@<X0>(unsigned char *a1@<X8>)
{
  uint64_t v2 = v1;
  uint64_t v4 = type metadata accessor for AST.Atom.EscapedBuiltin();
  uint64_t v5 = *(void *)(v4 - 8);
  MEMORY[0x270FA5388](v4);
  uint64_t v7 = (char *)&v9 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t))(v5 + 16))(v7, v2, v4);
  uint64_t result = (*(uint64_t (**)(char *, uint64_t))(v5 + 88))(v7, v4);
  if (result == *MEMORY[0x263F8FA28])
  {
    *a1 = 0;
  }
  else if (result == *MEMORY[0x263F8FA78])
  {
    *a1 = 1;
  }
  else if (result == *MEMORY[0x263F8FA98])
  {
    *a1 = 2;
  }
  else if (result == *MEMORY[0x263F8FAA0])
  {
    *a1 = 3;
  }
  else if (result == *MEMORY[0x263F8FA08])
  {
    *a1 = 5;
  }
  else if (result == *MEMORY[0x263F8FA70])
  {
    *a1 = 4;
  }
  else if (result == *MEMORY[0x263F8FA10])
  {
    *a1 = 6;
  }
  else if (result == *MEMORY[0x263F8FA40])
  {
    *a1 = 7;
  }
  else if (result == *MEMORY[0x263F8FA20])
  {
    *a1 = 8;
  }
  else if (result == *MEMORY[0x263F8FA58])
  {
    *a1 = 9;
  }
  else if (result == *MEMORY[0x263F8FA48])
  {
    *a1 = 10;
  }
  else if (result == *MEMORY[0x263F8FA88])
  {
    *a1 = 11;
  }
  else if (result == *MEMORY[0x263F8FA68])
  {
    *a1 = 12;
  }
  else
  {
    *a1 = 14;
    return (*(uint64_t (**)(char *, uint64_t))(v5 + 8))(v7, v4);
  }
  return result;
}

__n128 AnyRegexOutput.init<A>(_:)@<Q0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  *(void *)a2 = *(void *)a1;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

void *AnyRegexOutput.extractValues<A>(as:)@<X0>(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  uint64_t v4 = a2;
  uint64_t v5 = v2[2];
  int64_t v6 = *(void *)(v5 + 16);
  uint64_t v7 = MEMORY[0x263F8EE78];
  if (v6)
  {
    uint64_t v19 = a1;
    uint64_t v8 = *v2;
    uint64_t v9 = v2[1];
    uint64_t v24 = MEMORY[0x263F8EE78];
    int64_t v20 = v6;
    __n128 result = specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v6, 0);
    unint64_t v11 = 0;
    uint64_t v12 = v5 + 32;
    uint64_t v13 = v5;
    while (v11 < *(void *)(v5 + 16))
    {
      outlined init with copy of AnyRegexOutput.ElementRepresentation(v12, (uint64_t)&v21);
      v22[10] = v8;
      v22[11] = v9;
      uint64_t v14 = v21;
      swift_bridgeObjectRetain();
      constructExistentialOutputComponent(from:component:optionalCount:)((uint64_t)v22, v14, (uint64_t *)v23);
      outlined destroy of AnyRegexOutput.Element((uint64_t)&v21);
      uint64_t v7 = v24;
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(void *)(v7 + 16) + 1, 1);
        uint64_t v7 = v24;
      }
      unint64_t v16 = *(void *)(v7 + 16);
      unint64_t v15 = *(void *)(v7 + 24);
      if (v16 >= v15 >> 1)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v15 > 1), v16 + 1, 1);
        uint64_t v7 = v24;
      }
      ++v11;
      *(void *)(v7 + 16) = v16 + 1;
      __n128 result = outlined init with take of Any(v23, (_OWORD *)(v7 + 32 * v16 + 32));
      v12 += 88;
      uint64_t v5 = v13;
      if (v20 == v11)
      {
        uint64_t v4 = a2;
        a1 = v19;
        goto LABEL_10;
      }
    }
    __break(1u);
  }
  else
  {
LABEL_10:
    *(void *)&v23[0] = v7;
    swift_getCanonicalSpecializedMetadata();
    lazy protocol witness table accessor for type PartialRangeUpTo<String.Index> and conformance PartialRangeUpTo<A>(&lazy protocol witness table cache variable for type [Any] and conformance [A]);
    static TypeConstruction.tuple<A>(of:)();
    int v17 = swift_dynamicCast();
    return (void *)(*(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(a1 - 8) + 56))(v4, v17 ^ 1u, 1, a1);
  }
  return result;
}

uint64_t AnyRegexOutput.Element.substring.getter()
{
  outlined init with copy of (range: Range<String.Index>, value: Any?)?(v0 + 8, (uint64_t)&v2, &demangling cache variable for type metadata for (range: Range<String.Index>, value: Any?)?);
  if (v3[3] == 1)
  {
    outlined destroy of (range: Range<String.Index>, value: Any?)?((uint64_t)&v2, &demangling cache variable for type metadata for (range: Range<String.Index>, value: Any?)?);
    return 0;
  }
  else
  {
    outlined destroy of Any?((uint64_t)v3);
    return String.subscript.getter();
  }
}

_OWORD *AnyRegexOutput.Element.value.getter@<X0>(uint64_t *a1@<X8>)
{
  return constructExistentialOutputComponent(from:component:optionalCount:)((uint64_t)(v1 + 1), *v1, a1);
}

uint64_t AnyRegexOutput.Element.type.getter()
{
  outlined init with copy of (range: Range<String.Index>, value: Any?)?(v0 + 8, (uint64_t)v7, &demangling cache variable for type metadata for (range: Range<String.Index>, value: Any?)?);
  if (v8[3] == 1)
  {
    outlined destroy of (range: Range<String.Index>, value: Any?)?((uint64_t)v7, &demangling cache variable for type metadata for (range: Range<String.Index>, value: Any?)?);
LABEL_7:
    outlined init with copy of AnyRegexOutput.ElementRepresentation(v0, (uint64_t)v7);
    goto LABEL_8;
  }
  outlined init with copy of Any?((uint64_t)v8, (uint64_t)&v5);
  if (!v6)
  {
    outlined destroy of Any?((uint64_t)v8);
    goto LABEL_7;
  }
  outlined init with take of Any(&v5, &v3);
  __swift_project_boxed_opaque_existential_0(&v3, v4);
  uint64_t DynamicType = swift_getDynamicType();
  __swift_destroy_boxed_opaque_existential_0((uint64_t)&v3);
  outlined destroy of Any?((uint64_t)v8);
  outlined init with copy of AnyRegexOutput.ElementRepresentation(v0, (uint64_t)v7);
  if (!DynamicType)
  {
LABEL_8:
    outlined destroy of AnyRegexOutput.ElementRepresentation((uint64_t)v7);
    return static TypeConstruction.optionalType<A>(of:depth:)();
  }
  outlined destroy of AnyRegexOutput.ElementRepresentation((uint64_t)v7);
  return DynamicType;
}

uint64_t AnyRegexOutput.Element.name.getter()
{
  uint64_t v1 = *(void *)(v0 + 56);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t AnyRegexOutput.startIndex.getter()
{
  return 0;
}

uint64_t AnyRegexOutput.count.getter()
{
  return *(void *)(*(void *)(v0 + 16) + 16);
}

Swift::Int __swiftcall AnyRegexOutput.index(after:)(Swift::Int after)
{
  BOOL v1 = __OFADD__(after, 1);
  Swift::Int result = after + 1;
  if (v1) {
    __break(1u);
  }
  return result;
}

Swift::Int __swiftcall AnyRegexOutput.index(before:)(Swift::Int before)
{
  BOOL v1 = __OFSUB__(before, 1);
  Swift::Int result = before - 1;
  if (v1) {
    __break(1u);
  }
  return result;
}

unint64_t AnyRegexOutput.subscript.getter@<X0>(unint64_t result@<X0>, uint64_t a2@<X8>)
{
  if ((result & 0x8000000000000000) != 0)
  {
    __break(1u);
    goto LABEL_7;
  }
  uint64_t v4 = v2[2];
  if (*(void *)(v4 + 16) <= result)
  {
LABEL_7:
    __break(1u);
    return result;
  }
  uint64_t v6 = *v2;
  uint64_t v5 = v2[1];
  outlined init with copy of AnyRegexOutput.ElementRepresentation(v4 + 88 * result + 32, a2);
  *(void *)(a2 + 88) = v6;
  *(void *)(a2 + 96) = v5;

  return swift_bridgeObjectRetain();
}

unint64_t specialized RandomAccessCollection.index(_:offsetBy:limitedBy:)(unint64_t result, uint64_t a2, unint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  unint64_t v6 = *(void *)(a6 + 16);
  if (v6 < result || v6 < a3)
  {
    __break(1u);
LABEL_16:
    __break(1u);
    goto LABEL_17;
  }
  uint64_t v8 = a3 - result;
  if (a2 >= 1)
  {
    if (v8 < 0 || v8 >= (unint64_t)a2) {
      goto LABEL_13;
    }
    return 0;
  }
  if (v8 <= 0 && v8 > a2) {
    return 0;
  }
LABEL_13:
  BOOL v9 = __OFADD__(result, a2);
  result += a2;
  if (v9) {
    goto LABEL_16;
  }
  if (result > v6) {
LABEL_17:
  }
    __break(1u);
  return result;
}

void *protocol witness for BidirectionalCollection.index(before:) in conformance AnyRegexOutput@<X0>(void *result@<X0>, void *a2@<X8>)
{
  if (__OFSUB__(*result, 1)) {
    __break(1u);
  }
  else {
    *a2 = *result - 1;
  }
  return result;
}

void *protocol witness for BidirectionalCollection.formIndex(before:) in conformance AnyRegexOutput(void *result)
{
  if (__OFSUB__(*result, 1)) {
    __break(1u);
  }
  else {
    --*result;
  }
  return result;
}

void protocol witness for Collection.endIndex.getter in conformance AnyRegexOutput(void *a1@<X8>)
{
  *a1 = *(void *)(*(void *)(v1 + 16) + 16);
}

void (*protocol witness for Collection.subscript.read in conformance AnyRegexOutput(void (**a1)(uint64_t *a1), unint64_t *a2))(uint64_t *a1)
{
  Swift::Int result = (void (*)(uint64_t *))malloc(0x68uLL);
  *a1 = result;
  unint64_t v6 = *a2;
  if ((*a2 & 0x8000000000000000) != 0)
  {
    __break(1u);
  }
  else
  {
    uint64_t v7 = v2[2];
    if (v6 < *(void *)(v7 + 16))
    {
      uint64_t v8 = result;
      uint64_t v10 = *v2;
      uint64_t v9 = v2[1];
      outlined init with copy of AnyRegexOutput.ElementRepresentation(v7 + 88 * v6 + 32, (uint64_t)result);
      *((void *)v8 + 11) = v10;
      *((void *)v8 + 12) = v9;
      swift_bridgeObjectRetain();
      return protocol witness for Collection.subscript.read in conformance AnyRegexOutput;
    }
  }
  __break(1u);
  return result;
}

void protocol witness for Collection.subscript.read in conformance AnyRegexOutput(uint64_t *a1)
{
  uint64_t v1 = (void *)*a1;
  outlined destroy of AnyRegexOutput.Element(*a1);

  free(v1);
}

uint64_t *protocol witness for Collection.subscript.getter in conformance AnyRegexOutput@<X0>(uint64_t *result@<X0>, void *a2@<X8>)
{
  uint64_t v3 = *result;
  if (*result < 0 || (uint64_t v4 = result[1], v5 = v2[2], *(void *)(v5 + 16) < v4))
  {
    __break(1u);
  }
  else
  {
    uint64_t v6 = v2[1];
    a2[2] = *v2;
    a2[3] = v6;
    a2[4] = v5;
    *a2 = v3;
    a2[1] = v4;
    swift_bridgeObjectRetain();
    return (uint64_t *)swift_bridgeObjectRetain();
  }
  return result;
}

void protocol witness for Collection.indices.getter in conformance AnyRegexOutput(void *a1@<X8>)
{
  uint64_t v2 = *(void *)(*(void *)(v1 + 16) + 16);
  *a1 = 0;
  a1[1] = v2;
}

BOOL protocol witness for Collection.isEmpty.getter in conformance AnyRegexOutput()
{
  return *(void *)(*(void *)(v0 + 16) + 16) == 0;
}

void *protocol witness for RandomAccessCollection.index(_:offsetBy:) in conformance AnyRegexOutput@<X0>(void *result@<X0>, uint64_t a2@<X1>, unint64_t *a3@<X8>)
{
  unint64_t v4 = *result + a2;
  if (__OFADD__(*result, a2))
  {
    __break(1u);
  }
  else if (v4 <= *(void *)(*(void *)(v3 + 16) + 16))
  {
    *a3 = v4;
    return result;
  }
  __break(1u);
  return result;
}

unint64_t protocol witness for RandomAccessCollection.index(_:offsetBy:limitedBy:) in conformance AnyRegexOutput@<X0>(unint64_t *a1@<X0>, uint64_t a2@<X1>, unint64_t *a3@<X2>, uint64_t a4@<X8>)
{
  unint64_t result = specialized RandomAccessCollection.index(_:offsetBy:limitedBy:)(*a1, a2, *a3, *v4, v4[1], v4[2]);
  *(void *)a4 = result;
  *(unsigned char *)(a4 + 8) = v7 & 1;
  return result;
}

unint64_t *protocol witness for RandomAccessCollection.distance(from:to:) in conformance AnyRegexOutput(unint64_t *result, unint64_t *a2)
{
  unint64_t v3 = *a2;
  unint64_t v4 = *(void *)(*(void *)(v2 + 16) + 16);
  if (*result <= v4 && v3 <= v4) {
    return (unint64_t *)(v3 - *result);
  }
  __break(1u);
  return result;
}

uint64_t *protocol witness for Collection._failEarlyRangeCheck(_:bounds:) in conformance AnyRegexOutput(uint64_t *result, uint64_t *a2)
{
  uint64_t v2 = *result;
  uint64_t v3 = a2[1];
  if (*result >= *a2)
  {
    BOOL v5 = __OFSUB__(v2, v3);
    BOOL v4 = v2 - v3 < 0;
  }
  else
  {
    BOOL v5 = 0;
    BOOL v4 = 0;
  }
  if (v4 == v5) {
    __break(1u);
  }
  return result;
}

void *protocol witness for Collection._failEarlyRangeCheck(_:bounds:) in conformance AnyRegexOutput(void *result, void *a2)
{
  if (*result < *a2 || a2[1] < *result) {
    __break(1u);
  }
  return result;
}

{
  if (*result < *a2 || a2[1] < result[1]) {
    __break(1u);
  }
  return result;
}

void *protocol witness for Collection.index(after:) in conformance AnyRegexOutput@<X0>(void *result@<X0>, void *a2@<X8>)
{
  if (__OFADD__(*result, 1)) {
    __break(1u);
  }
  else {
    *a2 = *result + 1;
  }
  return result;
}

void *protocol witness for Collection.formIndex(after:) in conformance AnyRegexOutput(void *result)
{
  if (__OFADD__(*result, 1)) {
    __break(1u);
  }
  else {
    ++*result;
  }
  return result;
}

__n128 protocol witness for Sequence.makeIterator() in conformance AnyRegexOutput@<Q0>(uint64_t a1@<X8>)
{
  *(void *)a1 = *(void *)v1;
  __n128 result = *(__n128 *)(v1 + 8);
  *(__n128 *)(a1 + 8) = result;
  *(void *)(a1 + 24) = 0;
  return result;
}

uint64_t protocol witness for Sequence.underestimatedCount.getter in conformance AnyRegexOutput()
{
  return *(void *)(*(void *)(v0 + 16) + 16);
}

void *protocol witness for Sequence._copyToContiguousArray() in conformance AnyRegexOutput()
{
  uint64_t v1 = specialized _copyCollectionToContiguousArray<A>(_:)(*v0, v0[1], v0[2]);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v1;
}

uint64_t protocol witness for Sequence._copyContents(initializing:) in conformance AnyRegexOutput(uint64_t a1, uint64_t a2, unint64_t a3)
{
  return specialized Sequence._copySequenceContents(initializing:)(a1, a2, a3, *v3, v3[1], v3[2]);
}

uint64_t AnyRegexOutput.subscript.getter@<X0>(unint64_t a1@<X0>, unint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v8 = *v3;
  uint64_t v7 = v3[1];
  uint64_t v9 = v3[2];
  unint64_t v10 = *(void *)(v9 + 16);
  swift_bridgeObjectRetain();
  uint64_t result = swift_bridgeObjectRetain();
  if (v10)
  {
    unint64_t v12 = 0;
    uint64_t v13 = v9 + 32;
    while (v12 < v10)
    {
      outlined init with copy of AnyRegexOutput.ElementRepresentation(v13, (uint64_t)v23);
      *((void *)&v25 + 1) = v8;
      uint64_t v26 = v7;
      *(_OWORD *)&v20[16] = v24;
      long long v21 = v25;
      uint64_t v22 = v7;
      long long v17 = v23[0];
      long long v18 = v23[1];
      long long v19 = v23[2];
      *(_OWORD *)int64_t v20 = v23[3];
      if ((void)v24
        && (*(_OWORD *)&v20[8] == __PAIR128__(a2, a1) || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0))
      {
        uint64_t result = swift_bridgeObjectRelease();
        long long v14 = v21;
        *(_OWORD *)(a3 + 64) = *(_OWORD *)&v20[16];
        *(_OWORD *)(a3 + 80) = v14;
        *(void *)(a3 + 96) = v22;
        long long v15 = v18;
        *(_OWORD *)a3 = v17;
        *(_OWORD *)(a3 + 16) = v15;
        long long v16 = *(_OWORD *)v20;
        *(_OWORD *)(a3 + 32) = v19;
        *(_OWORD *)(a3 + 48) = v16;
        return result;
      }
      ++v12;
      swift_bridgeObjectRetain();
      uint64_t result = outlined destroy of AnyRegexOutput.Element((uint64_t)&v17);
      unint64_t v10 = *(void *)(v9 + 16);
      v13 += 88;
      if (v12 == v10) {
        goto LABEL_9;
      }
    }
    __break(1u);
  }
  else
  {
LABEL_9:
    swift_bridgeObjectRelease();
    uint64_t result = swift_bridgeObjectRelease();
    *(void *)(a3 + 96) = 0;
    *(_OWORD *)(a3 + 64) = 0u;
    *(_OWORD *)(a3 + 80) = 0u;
    *(_OWORD *)(a3 + 32) = 0u;
    *(_OWORD *)(a3 + 48) = 0u;
    *(_OWORD *)a3 = 0u;
    *(_OWORD *)(a3 + 16) = 0u;
  }
  return result;
}

uint64_t Regex.Match<A>.subscript.getter()
{
  return String.subscript.getter();
}

uint64_t Regex.Match<A>.subscript.getter@<X0>(unint64_t a1@<X0>, unint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v8 = *v3;
  uint64_t v7 = v3[1];
  uint64_t v9 = v3[2];
  unint64_t v10 = *(void *)(v9 + 16);
  swift_bridgeObjectRetain();
  uint64_t result = swift_bridgeObjectRetain();
  if (v10)
  {
    unint64_t v12 = 0;
    uint64_t v13 = v9 + 32;
    while (v12 < v10)
    {
      outlined init with copy of AnyRegexOutput.ElementRepresentation(v13, (uint64_t)v23);
      *((void *)&v25 + 1) = v8;
      uint64_t v26 = v7;
      *(_OWORD *)&v20[16] = v24;
      long long v21 = v25;
      uint64_t v22 = v7;
      long long v17 = v23[0];
      long long v18 = v23[1];
      long long v19 = v23[2];
      *(_OWORD *)int64_t v20 = v23[3];
      if ((void)v24
        && (*(_OWORD *)&v20[8] == __PAIR128__(a2, a1) || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0))
      {
        uint64_t result = swift_bridgeObjectRelease();
        long long v14 = v21;
        *(_OWORD *)(a3 + 64) = *(_OWORD *)&v20[16];
        *(_OWORD *)(a3 + 80) = v14;
        *(void *)(a3 + 96) = v22;
        long long v15 = v18;
        *(_OWORD *)a3 = v17;
        *(_OWORD *)(a3 + 16) = v15;
        long long v16 = *(_OWORD *)v20;
        *(_OWORD *)(a3 + 32) = v19;
        *(_OWORD *)(a3 + 48) = v16;
        return result;
      }
      ++v12;
      swift_bridgeObjectRetain();
      uint64_t result = outlined destroy of AnyRegexOutput.Element((uint64_t)&v17);
      unint64_t v10 = *(void *)(v9 + 16);
      v13 += 88;
      if (v12 == v10) {
        goto LABEL_9;
      }
    }
    __break(1u);
  }
  else
  {
LABEL_9:
    swift_bridgeObjectRelease();
    uint64_t result = swift_bridgeObjectRelease();
    *(void *)(a3 + 96) = 0;
    *(_OWORD *)(a3 + 64) = 0u;
    *(_OWORD *)(a3 + 80) = 0u;
    *(_OWORD *)(a3 + 32) = 0u;
    *(_OWORD *)(a3 + 48) = 0u;
    *(_OWORD *)a3 = 0u;
    *(_OWORD *)(a3 + 16) = 0u;
  }
  return result;
}

void *Regex<A>.init(_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, void *a3@<X8>)
{
  uint64_t v7 = type metadata accessor for SyntaxOptions();
  uint64_t v8 = *(void *)(v7 - 8);
  MEMORY[0x270FA5388](v7);
  unint64_t v10 = (char *)v15 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = type metadata accessor for AST();
  MEMORY[0x270FA5388](v11 - 8);
  uint64_t v13 = (char *)v15 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15[0] = a1;
  v15[1] = a2;
  static SyntaxOptions.traditional.getter();
  lazy protocol witness table accessor for type String and conformance String();
  parse<A>(_:_:)();
  (*(void (**)(char *, uint64_t))(v8 + 8))(v10, v7);
  if (v3) {
    return (void *)swift_bridgeObjectRelease();
  }
  swift_bridgeObjectRelease();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Regex<AnyRegexOutput>.Program);
  swift_allocObject();
  uint64_t result = specialized Regex.Program.init(ast:)((uint64_t)v13);
  *a3 = result;
  return result;
}

void *Regex.init(ast:)@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  type metadata accessor for Regex.Program();
  uint64_t v4 = swift_allocObject();
  uint64_t result = specialized Regex.Program.init(ast:)(a1);
  *a2 = v4;
  return result;
}

uint64_t Regex.init(_:as:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X3>, uint64_t *a4@<X8>)
{
  uint64_t v9 = type metadata accessor for SyntaxOptions();
  uint64_t v10 = *(void *)(v9 - 8);
  MEMORY[0x270FA5388](v9);
  uint64_t v12 = (char *)v22 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = type metadata accessor for AST();
  MEMORY[0x270FA5388](v13 - 8);
  long long v15 = (char *)v22 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v22[0] = a1;
  v22[1] = a2;
  static SyntaxOptions.traditional.getter();
  lazy protocol witness table accessor for type String and conformance String();
  parse<A>(_:_:)();
  if (v4)
  {
    (*(void (**)(char *, uint64_t))(v10 + 8))(v12, v9);
    return swift_bridgeObjectRelease();
  }
  else
  {
    (*(void (**)(char *, uint64_t))(v10 + 8))(v12, v9);
    swift_bridgeObjectRelease();
    Regex.init(ast:)((uint64_t)v15, &v23);
    uint64_t v17 = v23;
    v22[0] = v23;
    uint64_t v18 = type metadata accessor for Regex();
    uint64_t result = Regex._verifyType()(v18);
    if (result)
    {
      *a4 = v17;
    }
    else
    {
      uint64_t v20 = v19;
      swift_release();
      lazy protocol witness table accessor for type RegexCompilationError and conformance RegexCompilationError();
      swift_allocError();
      *(void *)uint64_t v21 = a3;
      *(void *)(v21 + 8) = v20;
      *(unsigned char *)(v21 + 16) = 0;
      return swift_willThrow();
    }
  }
  return result;
}

uint64_t Regex._verifyType()(uint64_t a1)
{
  uint64_t v3 = type metadata accessor for CaptureList.Capture();
  uint64_t v4 = *(void *)(v3 - 8);
  MEMORY[0x270FA5388](v3);
  uint64_t v6 = (char *)&v37 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = type metadata accessor for CaptureList();
  uint64_t v8 = *(void *)(v7 - 8);
  MEMORY[0x270FA5388](v7);
  uint64_t v10 = (char *)&v37 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (*(ValueMetadata **)(a1 + 16) == &type metadata for AnyRegexOutput) {
    return 1;
  }
  uint64_t v39 = *(void *)(a1 + 16);
  uint64_t v11 = *v1;
  unint64_t v47 = 0;
  unint64_t v48 = 0xE000000000000000;
  uint64_t v38 = v11;
  unint64_t v42 = *(void *)(v11 + 24);
  static CaptureList.Builder.build(_:)(&v42, (uint64_t)v10);
  uint64_t v12 = CaptureList.captures.getter();
  uint64_t result = (*(uint64_t (**)(char *, uint64_t))(v8 + 8))(v10, v7);
  uint64_t v41 = *(void *)(v12 + 16);
  if (v41)
  {
    unint64_t v14 = 0;
    uint64_t v40 = v4 + 16;
    long long v15 = (char *)MEMORY[0x263F8EE78];
    while (1)
    {
      if (v14 >= *(void *)(v12 + 16))
      {
        __break(1u);
        return result;
      }
      (*(void (**)(char *, unint64_t, uint64_t))(v4 + 16))(v6, v12+ ((*(unsigned __int8 *)(v4 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80))+ *(void *)(v4 + 72) * v14, v3);
      uint64_t v16 = CaptureList.Capture.type.getter();
      uint64_t v17 = CaptureList.Capture.optionalDepth.getter();
      if (v17) {
        break;
      }
LABEL_10:
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
        long long v15 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *((void *)v15 + 2) + 1, 1, v15);
      }
      unint64_t v22 = *((void *)v15 + 2);
      unint64_t v21 = *((void *)v15 + 3);
      if (v22 >= v21 >> 1) {
        long long v15 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v21 > 1), v22 + 1, 1, v15);
      }
      *((void *)v15 + 2) = v22 + 1;
      *(void *)&v15[8 * v22 + 32] = v16;
      uint64_t v23 = CaptureList.Capture.name.getter();
      long long v25 = v24;
      (*(void (**)(char *, uint64_t))(v4 + 8))(v6, v3);
      if (v25)
      {
        v26._uint64_t countAndFlagsBits = v23;
        v26._uint64_t object = v25;
        String.append(_:)(v26);
        swift_bridgeObjectRelease();
      }
      ++v14;
      unint64_t v42 = v47;
      unint64_t v43 = v48;
      uint64_t result = String.UnicodeScalarView.append(_:)();
      unint64_t v47 = v42;
      unint64_t v48 = v43;
      if (v14 == v41) {
        goto LABEL_18;
      }
    }
    uint64_t v18 = v17;
    while (1)
    {
      uint64_t v19 = static TypeConstruction.optionalType(of:)();
      if (__OFSUB__(v18--, 1)) {
        break;
      }
      uint64_t v16 = v19;
      if (!v18) {
        goto LABEL_10;
      }
    }
    __break(1u);
LABEL_34:
    swift_bridgeObjectRelease();
  }
  else
  {
    long long v15 = (char *)MEMORY[0x263F8EE78];
LABEL_18:
    swift_bridgeObjectRelease();
    if (*((void *)v15 + 2) == 1)
    {
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      unint64_t v27 = DSLTree.Node.outputDefiningNode.getter(*(void *)(v38 + 24));
      int v28 = (v27 >> 59) & 0x1E | (v27 >> 2) & 1;
      uint64_t v29 = v27 & 0xFFFFFFFFFFFFFFBLL;
      if (v28 == 14) {
        uint64_t v30 = *(void *)(v29 + 16);
      }
      else {
        uint64_t v30 = MEMORY[0x263F8D980];
      }
      swift_release();
      return v39 == v30;
    }
    uint64_t v31 = HIBYTE(v48) & 0xF;
    if ((v48 & 0x2000000000000000) == 0) {
      uint64_t v31 = v47 & 0xFFFFFFFFFFFFLL;
    }
    unint64_t v42 = v47;
    unint64_t v43 = v48;
    uint64_t v44 = 0;
    uint64_t v45 = v31;
    uint64_t v46 = v15;
    swift_bridgeObjectRetain_n();
    Swift::String_optional v33 = String.Iterator.next()();
    uint64_t countAndFlagsBits = v33.value._countAndFlagsBits;
    if (v33.value._object)
    {
      uint64_t object = v33.value._object;
      do
      {
        if (countAndFlagsBits == 32 && object == (void *)0xE100000000000000)
        {
          swift_bridgeObjectRelease();
        }
        else
        {
          char v35 = _stringCompareWithSmolCheck(_:_:expecting:)();
          swift_bridgeObjectRelease();
          if ((v35 & 1) == 0) {
            goto LABEL_34;
          }
        }
        Swift::String_optional v36 = String.Iterator.next()();
        uint64_t countAndFlagsBits = v36.value._countAndFlagsBits;
        uint64_t object = v36.value._object;
      }
      while (v36.value._object);
    }
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  swift_bridgeObjectRelease();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [Any.Type]);
  lazy protocol witness table accessor for type [Any.Type] and conformance [A](&lazy protocol witness table cache variable for type [Any.Type] and conformance [A], &demangling cache variable for type metadata for [Any.Type]);
  uint64_t v30 = static TypeConstruction.tupleType<A>(of:labels:)();
  swift_bridgeObjectRelease();
  return v39 == v30;
}

Swift::Bool __swiftcall Regex.contains(captureNamed:)(Swift::String captureNamed)
{
  uint64_t object = captureNamed._object;
  uint64_t countAndFlagsBits = captureNamed._countAndFlagsBits;
  uint64_t v2 = type metadata accessor for CaptureList.Capture();
  uint64_t v3 = *(void *)(v2 - 8);
  MEMORY[0x270FA5388](v2);
  uint64_t v5 = (char *)&v19 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = type metadata accessor for CaptureList();
  uint64_t v7 = *(void *)(v6 - 8);
  MEMORY[0x270FA5388](v6);
  uint64_t v9 = (char *)&v19 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  unint64_t v22 = *(void *)(*(void *)v1 + 24);
  static CaptureList.Builder.build(_:)(&v22, (uint64_t)v9);
  uint64_t v10 = CaptureList.captures.getter();
  Swift::Bool result = (*(uint64_t (**)(char *, uint64_t))(v7 + 8))(v9, v6);
  uint64_t v12 = *(void *)(v10 + 16);
  if (v12)
  {
    unint64_t v13 = 0;
    while (v13 < *(void *)(v10 + 16))
    {
      (*(void (**)(char *, unint64_t, uint64_t))(v3 + 16))(v5, v10+ ((*(unsigned __int8 *)(v3 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80))+ *(void *)(v3 + 72) * v13, v2);
      uint64_t v15 = CaptureList.Capture.name.getter();
      uint64_t v17 = v16;
      Swift::Bool result = (*(uint64_t (**)(char *, uint64_t))(v3 + 8))(v5, v2);
      if (v17)
      {
        if (v15 == countAndFlagsBits && v17 == object)
        {
          swift_bridgeObjectRelease();
          Swift::Bool v18 = 1;
          goto LABEL_12;
        }
        char v14 = _stringCompareWithSmolCheck(_:_:expecting:)();
        Swift::Bool result = swift_bridgeObjectRelease();
        if (v14)
        {
          Swift::Bool v18 = 1;
          goto LABEL_12;
        }
      }
      if (v12 == ++v13) {
        goto LABEL_10;
      }
    }
    __break(1u);
  }
  else
  {
LABEL_10:
    Swift::Bool v18 = 0;
LABEL_12:
    swift_bridgeObjectRelease();
    return v18;
  }
  return result;
}

uint64_t Regex<A>.init<A>(_:)@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v3 = *(void *)(*(void *)a1 + 24);
  swift_retain();
  swift_release();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Regex<AnyRegexOutput>.Program);
  uint64_t result = swift_allocObject();
  uint64_t v5 = result;
  *(void *)(result + 16) = 0;
  if (one-time initialization token for default != -1) {
    uint64_t result = swift_once();
  }
  *(void *)(v5 + 24) = v3;
  *(void *)(v5 + 32) = 0;
  *a2 = v5;
  return result;
}

__n128 Regex.Match<A>.init<A>(_:)@<Q0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  *(void *)a2 = *(void *)a1;
  *(_OWORD *)(a2 + 8) = *(_OWORD *)(a1 + 8);
  __n128 result = *(__n128 *)(a1 + 24);
  *(__n128 *)(a2 + 24) = result;
  return result;
}

uint64_t Regex.init(_:as:)@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  uint64_t v3 = *(void *)(*(void *)a1 + 24);
  swift_retain();
  swift_release();
  type metadata accessor for Regex.Program();
  uint64_t v7 = (void *)v3;
  uint64_t v4 = Regex.Program.__allocating_init(tree:)((uint64_t *)&v7);
  uint64_t v7 = v4;
  uint64_t v5 = type metadata accessor for Regex();
  uint64_t result = Regex._verifyType()(v5);
  if ((result & 1) == 0)
  {
    uint64_t result = swift_release();
    uint64_t v4 = 0;
  }
  *a2 = v4;
  return result;
}

uint64_t Regex.Program.__allocating_init(ast:)(uint64_t a1)
{
  uint64_t v2 = swift_allocObject();
  specialized Regex.Program.init(ast:)(a1);
  return v2;
}

void *Regex.init(_regexString:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, void *a3@<X8>)
{
  uint64_t v6 = type metadata accessor for SyntaxOptions();
  uint64_t v7 = *(void *)(v6 - 8);
  MEMORY[0x270FA5388](v6);
  uint64_t v9 = &v14[-((v8 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v10 = type metadata accessor for AST();
  MEMORY[0x270FA5388](v10 - 8);
  uint64_t v12 = &v14[-((v11 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v15[0] = a1;
  v15[1] = a2;
  static SyntaxOptions.traditional.getter();
  lazy protocol witness table accessor for type String and conformance String();
  parse<A>(_:_:)();
  (*(void (**)(unsigned char *, uint64_t))(v7 + 8))(v9, v6);
  swift_bridgeObjectRelease();
  uint64_t result = Regex.init(ast:)((uint64_t)v12, v15);
  *a3 = v15[0];
  return result;
}

void *Regex.init(_regexString:version:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, void *a3@<X8>)
{
  uint64_t v6 = type metadata accessor for AST();
  MEMORY[0x270FA5388](v6 - 8);
  uint64_t v8 = (char *)v11 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11[0] = a1;
  v11[1] = a2;
  lazy protocol witness table accessor for type String and conformance String();
  parseWithDelimiters<A>(_:)();
  swift_bridgeObjectRelease();
  uint64_t result = Regex.init(ast:)((uint64_t)v8, v11);
  *a3 = v11[0];
  return result;
}

uint64_t Regex.regex.getter@<X0>(void *a1@<X8>)
{
  *a1 = *v1;
  return swift_retain();
}

void *Regex.init(verbatim:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, void *a3@<X8>)
{
  uint64_t v6 = swift_allocObject();
  *(void *)(v6 + 16) = a1;
  *(void *)(v6 + 24) = a2;
  uint64_t v7 = v6 | 0x5000000000000000;
  type metadata accessor for Regex.Program();
  uint64_t v9 = v7;
  uint64_t result = Regex.Program.__allocating_init(tree:)(&v9);
  *a3 = result;
  return result;
}

uint64_t Regex.Program.ProgramBox.__allocating_init(_:)(uint64_t a1)
{
  uint64_t v2 = swift_allocObject();
  outlined init with take of DSLTree.QuantificationKind(a1, v2 + direct field offset for Regex.Program.ProgramBox.value, type metadata accessor for MEProgram);
  return v2;
}

uint64_t Regex.Program.ProgramBox.__deallocating_deinit()
{
  outlined destroy of MEProgram(v0 + direct field offset for Regex.Program.ProgramBox.value, type metadata accessor for MEProgram);
  uint64_t v1 = *(unsigned int *)(*(void *)v0 + 48);
  uint64_t v2 = *(unsigned __int16 *)(*(void *)v0 + 52);

  return MEMORY[0x270FA0228](v0, v1, v2);
}

uint64_t Regex.Program.loweredProgram.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2 = v1;
  atomic_ullong v4 = *v1;
  uint64_t v5 = type metadata accessor for MEProgram(0);
  uint64_t v6 = *(void *)(v5 - 8);
  uint64_t v7 = MEMORY[0x270FA5388](v5);
  uint64_t v9 = (char *)&v27 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v7);
  uint64_t v11 = (char *)&v27 - v10;
  uint64_t v12 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for MEProgram?);
  uint64_t v13 = MEMORY[0x270FA5388](v12 - 8);
  uint64_t v15 = (char *)&v27 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v13);
  uint64_t v17 = (char *)&v27 - v16;
  loadProgram #1 <A>() in Regex.Program.loweredProgram.getter((uint64_t)v2, (uint64_t)&v27 - v16);
  Swift::Bool v18 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v6 + 48);
  if (v18(v17, 1, v5) != 1)
  {
    uint64_t v11 = v17;
    return outlined init with take of DSLTree.QuantificationKind((uint64_t)v11, a1, type metadata accessor for MEProgram);
  }
  atomic_ullong v29 = v4;
  uint64_t v30 = a1;
  outlined destroy of (range: Range<String.Index>, value: Any?)?((uint64_t)v17, &demangling cache variable for type metadata for MEProgram?);
  atomic_ullong v19 = v2[3];
  atomic_ullong v28 = v2[4];
  type metadata accessor for Compiler();
  unint64_t inited = (void *)swift_initStackObject();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<MatchingOptions.Representation>);
  uint64_t v21 = swift_allocObject();
  *(_OWORD *)(v21 + 16) = xmmword_209FAFD60;
  *(_DWORD *)(v21 + 32) = 81984;
  inited[3] = v21;
  uint64_t v22 = one-time initialization token for default;
  swift_retain();
  if (v22 != -1) {
    swift_once();
  }
  inited[2] = v19;
  inited[4] = v28;
  Compiler.emit()((uint64_t)v11);
  type metadata accessor for Regex.Program.ProgramBox();
  outlined init with copy of MEProgram((uint64_t)v11, (uint64_t)v9, type metadata accessor for MEProgram);
  unint64_t v23 = swift_allocObject();
  outlined init with take of DSLTree.QuantificationKind((uint64_t)v9, v23 + direct field offset for Regex.Program.ProgramBox.value, type metadata accessor for MEProgram);
  swift_retain();
  uint64_t v24 = 0;
  atomic_compare_exchange_strong(v2 + 2, (unint64_t *)&v24, v23);
  if (!v24)
  {
    swift_release();
    a1 = v30;
    return outlined init with take of DSLTree.QuantificationKind((uint64_t)v11, a1, type metadata accessor for MEProgram);
  }
  swift_release_n();
  loadProgram #1 <A>() in Regex.Program.loweredProgram.getter((uint64_t)v2, (uint64_t)v15);
  unsigned int v25 = v18(v15, 1, v5);
  a1 = v30;
  if (v25 != 1)
  {
    outlined destroy of MEProgram((uint64_t)v11, type metadata accessor for MEProgram);
    uint64_t v11 = v15;
    return outlined init with take of DSLTree.QuantificationKind((uint64_t)v11, a1, type metadata accessor for MEProgram);
  }
  __break(1u);
  uint64_t result = swift_unexpectedError();
  __break(1u);
  return result;
}

uint64_t loadProgram #1 <A>() in Regex.Program.loweredProgram.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  unint64_t v3 = atomic_load((unint64_t *)(a1 + 16));
  if (v3)
  {
    uint64_t v4 = v3 + direct field offset for Regex.Program.ProgramBox.value;
    swift_unknownObjectRetain();
    outlined init with copy of MEProgram(v4, a2, type metadata accessor for MEProgram);
    swift_unknownObjectRelease();
    uint64_t v5 = type metadata accessor for MEProgram(0);
    uint64_t v6 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 56);
    uint64_t v7 = v5;
    uint64_t v8 = a2;
    uint64_t v9 = 0;
  }
  else
  {
    uint64_t v10 = type metadata accessor for MEProgram(0);
    uint64_t v6 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v10 - 8) + 56);
    uint64_t v7 = v10;
    uint64_t v8 = a2;
    uint64_t v9 = 1;
  }

  return v6(v8, v9, 1, v7);
}

void *specialized Regex.Program.init(ast:)(uint64_t a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = type metadata accessor for AST.Node();
  uint64_t v5 = *(void *)(v4 - 8);
  MEMORY[0x270FA5388](v4);
  uint64_t v7 = (char *)&v15 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v2[2] = 0;
  if (one-time initialization token for default != -1) {
    swift_once();
  }
  v2[4] = 0;
  AST.root.getter();
  unint64_t v8 = convert #1 () in AST.Node.dslTreeNode.getter((uint64_t)v7);
  uint64_t v9 = type metadata accessor for AST();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v9 - 8) + 8))(a1, v9);
  if (((v8 >> 59) & 0x1E | (v8 >> 2) & 1) == 0xC)
  {
    (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
  }
  else
  {
    uint64_t v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (DSLTree.Node, DSLTree._AST.ASTNode));
    uint64_t v11 = swift_allocBox();
    uint64_t v13 = (char *)v12 + *(int *)(v10 + 48);
    *uint64_t v12 = v8;
    (*(void (**)(char *, char *, uint64_t))(v5 + 32))(v13, v7, v4);
    unint64_t v8 = v11 | 0x6000000000000000;
  }
  v2[3] = v8;
  return v2;
}

void *Regex.Program.__allocating_init(tree:)(uint64_t *a1)
{
  uint64_t v2 = (void *)swift_allocObject();
  uint64_t v3 = *a1;
  v2[2] = 0;
  if (one-time initialization token for default != -1) {
    swift_once();
  }
  v2[3] = v3;
  v2[4] = 0;
  return v2;
}

uint64_t Regex.Program.__deallocating_deinit()
{
  swift_unknownObjectRelease();
  swift_release();

  return MEMORY[0x270FA0228](v0, 40, 7);
}

uint64_t Regex._forceAction(_:)(uint64_t a1)
{
  uint64_t v3 = type metadata accessor for MEProgram(0);
  MEMORY[0x270FA5388](v3 - 8);
  uint64_t v5 = (char *)&v14 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = (void *)*v1;
  if (*(unsigned char *)(a1 + 8))
  {
    uint64_t v7 = v6[3];
    uint64_t v8 = v6[4];
    type metadata accessor for Compiler();
    unint64_t inited = (void *)swift_initStackObject();
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<MatchingOptions.Representation>);
    uint64_t v10 = swift_allocObject();
    *(_OWORD *)(v10 + 16) = xmmword_209FAFD60;
    *(_DWORD *)(v10 + 32) = 81984;
    inited[3] = v10;
    uint64_t v11 = one-time initialization token for default;
    swift_retain();
    if (v11 != -1) {
      swift_once();
    }
    inited[2] = v7;
    inited[4] = v8;
    Compiler.emit()((uint64_t)v5);
    outlined destroy of MEProgram((uint64_t)v5, type metadata accessor for MEProgram);
  }
  else
  {
    uint64_t v12 = v6[4];
    if ((*(void *)a1 & ~v12) != 0) {
      v6[4] = v12 | *(void *)a1;
    }
    void v6[2] = 0;
    swift_unknownObjectRelease();
  }
  return 1;
}

void *CustomConsumingRegexComponent.regex.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, void *a3@<X8>)
{
  uint64_t v4 = v3;
  uint64_t v8 = *(void *)(a1 - 8);
  uint64_t v9 = *(void *)(v8 + 64);
  MEMORY[0x270FA5388](a1);
  uint64_t v10 = swift_allocObject();
  *(void *)(v10 + 16) = swift_getAssociatedTypeWitness();
  (*(void (**)(char *, uint64_t, uint64_t))(v8 + 16))((char *)&v14 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0), v4, a1);
  unint64_t v11 = (*(unsigned __int8 *)(v8 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80);
  uint64_t v12 = swift_allocObject();
  *(void *)(v12 + 16) = a1;
  *(void *)(v12 + 24) = a2;
  (*(void (**)(unint64_t, char *, uint64_t))(v8 + 32))(v12 + v11, (char *)&v14 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0), a1);
  *(void *)(v10 + 24) = partial apply for closure #1 in CustomConsumingRegexComponent.regex.getter;
  *(void *)(v10 + 32) = v12;
  type metadata accessor for Regex.Program();
  uint64_t v15 = v10 | 0x7000000000000000;
  uint64_t result = Regex.Program.__allocating_init(tree:)(&v15);
  *a3 = result;
  return result;
}

uint64_t closure #1 in CustomConsumingRegexComponent.regex.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>)
{
  uint64_t v30 = a5;
  uint64_t v31 = a6;
  uint64_t v28 = a3;
  uint64_t v29 = a4;
  uint64_t v27 = a9;
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
  uint64_t v15 = type metadata accessor for Optional();
  uint64_t v16 = *(void *)(v15 - 8);
  MEMORY[0x270FA5388](v15);
  Swift::Bool v18 = (uint64_t *)((char *)&v26 - v17);
  uint64_t v19 = v32;
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(a8 + 16))(a1, a2, v28, v29, v30, a7, a8);
  if (!v19)
  {
    uint64_t v21 = v16;
    uint64_t v22 = AssociatedTypeWitness;
    uint64_t v23 = v27;
    if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(*(void *)(TupleTypeMetadata2 - 8) + 48))(v18, 1, TupleTypeMetadata2) == 1)
    {
      uint64_t result = (*(uint64_t (**)(void *, uint64_t))(v21 + 8))(v18, v15);
      *(void *)(v23 + 32) = 0;
      *(_OWORD *)uint64_t v23 = 0u;
      *(_OWORD *)(v23 + 16) = 0u;
    }
    else
    {
      uint64_t v24 = (char *)v18 + *(int *)(TupleTypeMetadata2 + 48);
      *(void *)uint64_t v23 = *v18;
      *(void *)(v23 + 32) = v22;
      boxed_opaque_existential_0 = __swift_allocate_boxed_opaque_existential_0((uint64_t *)(v23 + 8));
      return (*(uint64_t (**)(uint64_t *, char *, uint64_t))(*(void *)(v22 - 8) + 32))(boxed_opaque_existential_0, v24, v22);
    }
  }
  return result;
}

uint64_t static DSLTree.CustomCharacterClass.generalCategory(_:)@<X0>(uint64_t *a1@<X8>)
{
  int v34 = a1;
  uint64_t v1 = type metadata accessor for Source.Location();
  MEMORY[0x270FA5388](v1 - 8);
  uint64_t v30 = (char *)&v27 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v3 = type metadata accessor for AST.Atom.Kind();
  uint64_t v28 = *(void *)(v3 - 8);
  uint64_t v29 = v3;
  MEMORY[0x270FA5388](v3);
  uint64_t v5 = (char *)&v27 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = type metadata accessor for AST.Atom();
  uint64_t v32 = *(void *)(v6 - 8);
  uint64_t v33 = v6;
  MEMORY[0x270FA5388](v6);
  uint64_t v31 = (char *)&v27 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Unicode.ExtendedGeneralCategory?);
  MEMORY[0x270FA5388](v8 - 8);
  uint64_t v10 = (char *)&v27 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = type metadata accessor for AST.Atom.CharacterProperty.Kind();
  uint64_t v12 = *(void *)(v11 - 8);
  MEMORY[0x270FA5388](v11);
  uint64_t v14 = (char *)&v27 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v15 = type metadata accessor for AST.Atom.CharacterProperty();
  uint64_t v16 = *(void *)(v15 - 8);
  MEMORY[0x270FA5388](v15);
  Swift::Bool v18 = (char *)&v27 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  Unicode.GeneralCategory.extendedGeneralCategory.getter((uint64_t)v10);
  uint64_t v19 = type metadata accessor for Unicode.ExtendedGeneralCategory();
  uint64_t v20 = *(void *)(v19 - 8);
  uint64_t result = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v20 + 48))(v10, 1, v19);
  if (result == 1)
  {
    __break(1u);
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v20 + 32))(v14, v10, v19);
    (*(void (**)(char *, void, uint64_t))(v12 + 104))(v14, *MEMORY[0x263F8FAF0], v11);
    AST.Atom.CharacterProperty.init(_:isInverted:isPOSIX:)();
    (*(void (**)(char *, char *, uint64_t))(v16 + 32))(v5, v18, v15);
    (*(void (**)(char *, void, uint64_t))(v28 + 104))(v5, *MEMORY[0x263F8FBE8], v29);
    static Source.Location.fake.getter();
    uint64_t v22 = v31;
    AST.Atom.init(_:_:)();
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<DSLTree.CustomCharacterClass.Member>);
    uint64_t v23 = *(void *)(type metadata accessor for DSLTree.CustomCharacterClass.Member(0) - 8);
    unint64_t v24 = (*(unsigned __int8 *)(v23 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v23 + 80);
    uint64_t v25 = swift_allocObject();
    *(_OWORD *)(v25 + 16) = xmmword_209FAFD60;
    (*(void (**)(unint64_t, char *, uint64_t))(v32 + 32))(v25 + v24, v22, v33);
    type metadata accessor for DSLTree.Atom(0);
    swift_storeEnumTagMultiPayload();
    uint64_t result = swift_storeEnumTagMultiPayload();
    uint64_t v26 = v34;
    *int v34 = v25;
    *((unsigned char *)v26 + 8) = 0;
  }
  return result;
}

uint64_t Unicode.GeneralCategory.extendedGeneralCategory.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2 = v1;
  uint64_t v4 = type metadata accessor for Unicode.GeneralCategory();
  uint64_t v5 = *(void *)(v4 - 8);
  MEMORY[0x270FA5388](v4);
  uint64_t v7 = (char *)&v15 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t))(v5 + 16))(v7, v2, v4);
  int v8 = (*(uint64_t (**)(char *, uint64_t))(v5 + 88))(v7, v4);
  if (v8 == *MEMORY[0x263F8EB00])
  {
    uint64_t v9 = (unsigned int *)MEMORY[0x263F90008];
  }
  else if (v8 == *MEMORY[0x263F8EAE8])
  {
    uint64_t v9 = (unsigned int *)MEMORY[0x263F8FFF0];
  }
  else if (v8 == *MEMORY[0x263F8EAF8])
  {
    uint64_t v9 = (unsigned int *)MEMORY[0x263F90000];
  }
  else if (v8 == *MEMORY[0x263F8EAC0])
  {
    uint64_t v9 = (unsigned int *)MEMORY[0x263F8FFC8];
  }
  else if (v8 == *MEMORY[0x263F8EA78])
  {
    uint64_t v9 = (unsigned int *)MEMORY[0x263F8FF78];
  }
  else if (v8 == *MEMORY[0x263F8EAD0])
  {
    uint64_t v9 = (unsigned int *)MEMORY[0x263F8FFD8];
  }
  else if (v8 == *MEMORY[0x263F8EA90])
  {
    uint64_t v9 = (unsigned int *)MEMORY[0x263F8FF98];
  }
  else if (v8 == *MEMORY[0x263F8EAA8])
  {
    uint64_t v9 = (unsigned int *)MEMORY[0x263F8FFB0];
  }
  else if (v8 == *MEMORY[0x263F8EAA0])
  {
    uint64_t v9 = (unsigned int *)MEMORY[0x263F8FFA8];
  }
  else if (v8 == *MEMORY[0x263F8EA98])
  {
    uint64_t v9 = (unsigned int *)MEMORY[0x263F8FFA0];
  }
  else if (v8 == *MEMORY[0x263F8EA80])
  {
    uint64_t v9 = (unsigned int *)MEMORY[0x263F8FF80];
  }
  else if (v8 == *MEMORY[0x263F8EB30])
  {
    uint64_t v9 = (unsigned int *)MEMORY[0x263F90038];
  }
  else if (v8 == *MEMORY[0x263F8EAE0])
  {
    uint64_t v9 = (unsigned int *)MEMORY[0x263F8FFE8];
  }
  else if (v8 == *MEMORY[0x263F8EAF0])
  {
    uint64_t v9 = (unsigned int *)MEMORY[0x263F8FFF8];
  }
  else if (v8 == *MEMORY[0x263F8EB08])
  {
    uint64_t v9 = (unsigned int *)MEMORY[0x263F90010];
  }
  else if (v8 == *MEMORY[0x263F8EB20])
  {
    uint64_t v9 = (unsigned int *)MEMORY[0x263F90028];
  }
  else if (v8 == *MEMORY[0x263F8EB10])
  {
    uint64_t v9 = (unsigned int *)MEMORY[0x263F90018];
  }
  else if (v8 == *MEMORY[0x263F8EB18])
  {
    uint64_t v9 = (unsigned int *)MEMORY[0x263F90020];
  }
  else if (v8 == *MEMORY[0x263F8EA60])
  {
    uint64_t v9 = (unsigned int *)MEMORY[0x263F8FF58];
  }
  else if (v8 == *MEMORY[0x263F8EAB8])
  {
    uint64_t v9 = (unsigned int *)MEMORY[0x263F8FFC0];
  }
  else if (v8 == *MEMORY[0x263F8EAC8])
  {
    uint64_t v9 = (unsigned int *)MEMORY[0x263F8FFD0];
  }
  else if (v8 == *MEMORY[0x263F8EA88])
  {
    uint64_t v9 = (unsigned int *)MEMORY[0x263F8FF88];
  }
  else if (v8 == *MEMORY[0x263F8EAD8])
  {
    uint64_t v9 = (unsigned int *)MEMORY[0x263F8FFE0];
  }
  else if (v8 == *MEMORY[0x263F8EAB0])
  {
    uint64_t v9 = (unsigned int *)MEMORY[0x263F8FFB8];
  }
  else if (v8 == *MEMORY[0x263F8EB28])
  {
    uint64_t v9 = (unsigned int *)MEMORY[0x263F90030];
  }
  else if (v8 == *MEMORY[0x263F8EB40])
  {
    uint64_t v9 = (unsigned int *)MEMORY[0x263F90070];
  }
  else if (v8 == *MEMORY[0x263F8EB38])
  {
    uint64_t v9 = (unsigned int *)MEMORY[0x263F90050];
  }
  else if (v8 == *MEMORY[0x263F8EB48])
  {
    uint64_t v9 = (unsigned int *)MEMORY[0x263F90080];
  }
  else if (v8 == *MEMORY[0x263F8EA68])
  {
    uint64_t v9 = (unsigned int *)MEMORY[0x263F8FF60];
  }
  else
  {
    if (v8 != *MEMORY[0x263F8EA70])
    {
      uint64_t v14 = type metadata accessor for Unicode.ExtendedGeneralCategory();
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v14 - 8) + 56))(a1, 1, 1, v14);
      return (*(uint64_t (**)(char *, uint64_t))(v5 + 8))(v7, v4);
    }
    uint64_t v9 = (unsigned int *)MEMORY[0x263F8FF68];
  }
  uint64_t v10 = *v9;
  uint64_t v11 = type metadata accessor for Unicode.ExtendedGeneralCategory();
  uint64_t v12 = *(void *)(v11 - 8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v12 + 104))(a1, v10, v11);
  return (*(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(v12 + 56))(a1, 0, 1, v11);
}

uint64_t DSLTree.CustomCharacterClass.inverted.getter@<X0>(uint64_t a1@<X8>)
{
  char v2 = *(unsigned char *)(v1 + 8);
  *(void *)a1 = *(void *)v1;
  *(unsigned char *)(a1 + 8) = (v2 & 1) == 0;
  return swift_bridgeObjectRetain();
}

_StringProcessing::DSLTree::Atom::Assertion_optional protocol witness for RawRepresentable.init(rawValue:) in conformance DSLTree.Atom.Assertion(Swift::UInt64 *a1)
{
  return DSLTree.Atom.Assertion.init(rawValue:)(*a1);
}

BOOL static DSLTree.Atom.CharacterClass.== infix(_:_:)(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return *a1 == *a2;
}

void DSLTree.Atom.CharacterClass.hash(into:)()
{
  Hasher._combine(_:)(*v0);
}

Swift::Int DSLTree.Atom.CharacterClass.hashValue.getter()
{
  Swift::UInt v1 = *v0;
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v1);
  return Hasher._finalize()();
}

void DSLTree.Atom.CharacterClass.inverted.getter(char *a1@<X8>)
{
  char v2 = 14;
  switch(*v1)
  {
    case 1:
      char v2 = 0;
      break;
    case 2:
      char v2 = 3;
      break;
    case 3:
      char v2 = 2;
      break;
    case 4:
      char v2 = 5;
      break;
    case 5:
      char v2 = 4;
      break;
    case 6:
      char v2 = 7;
      break;
    case 7:
      char v2 = 6;
      break;
    case 8:
      char v2 = 9;
      break;
    case 9:
      char v2 = 8;
      break;
    case 0xA:
      char v2 = 11;
      break;
    case 0xB:
      char v2 = 10;
      break;
    case 0xC:
      break;
    case 0xD:
      _assertionFailure(_:_:file:line:flags:)();
      __break(1u);
      JUMPOUT(0x209F72B30);
    default:
      char v2 = 1;
      break;
  }
  *a1 = v2;
}

uint64_t DSLTree.Node.hasChildNodes.getter(unint64_t a1)
{
  uint64_t v2 = type metadata accessor for DSLTree._AST.AbsentFunction(0);
  MEMORY[0x270FA5388](v2 - 8);
  uint64_t v4 = (char *)&v11 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t result = 0;
  switch((a1 >> 59) & 0x1E | (a1 >> 2) & 1)
  {
    case 1uLL:
      uint64_t v6 = *(void *)((a1 & 0xFFFFFFFFFFFFFFBLL) + 0x10);
      goto LABEL_6;
    case 2uLL:
    case 3uLL:
    case 4uLL:
    case 5uLL:
    case 6uLL:
    case 0xCuLL:
      return 1;
    case 7uLL:
    case 8uLL:
    case 9uLL:
    case 0xAuLL:
    case 0xDuLL:
    case 0xEuLL:
    case 0xFuLL:
    case 0x10uLL:
      return result;
    case 0xBuLL:
      uint64_t v7 = swift_projectBox();
      outlined init with copy of MEProgram(v7, (uint64_t)v4, type metadata accessor for DSLTree._AST.AbsentFunction);
      uint64_t v8 = AST.AbsentFunction.children.getter();
      outlined destroy of MEProgram((uint64_t)v4, type metadata accessor for DSLTree._AST.AbsentFunction);
      uint64_t v9 = *(void *)(v8 + 16);
      swift_bridgeObjectRelease();
      BOOL v10 = v9 == 0;
      return !v10;
    default:
      uint64_t v6 = *(void *)(a1 + 16);
LABEL_6:
      BOOL v10 = *(void *)(v6 + 16) == 0;
      return !v10;
  }
}

uint64_t DSLTree.Node.children.getter(unint64_t a1)
{
  while (2)
  {
    unint64_t v1 = a1;
    uint64_t v2 = type metadata accessor for AST.Node();
    uint64_t v3 = *(void *)(v2 - 8);
    MEMORY[0x270FA5388](v2);
    uint64_t v5 = (char *)&v32 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
    uint64_t v6 = type metadata accessor for DSLTree._AST.AbsentFunction(0);
    MEMORY[0x270FA5388](v6 - 8);
    uint64_t v8 = (char *)&v32 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
    uint64_t v9 = MEMORY[0x263F8EE78];
    switch((v1 >> 59) & 0x1E | (v1 >> 2) & 1)
    {
      case 1uLL:
        uint64_t v9 = *(void *)((v1 & 0xFFFFFFFFFFFFFFBLL) + 0x10);
        goto LABEL_13;
      case 2uLL:
        uint64_t v10 = *(void *)((v1 & 0xFFFFFFFFFFFFFFBLL) + 0x30);
        goto LABEL_11;
      case 3uLL:
        uint64_t v14 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (DSLTree._AST.GroupKind, DSLTree.Node));
        uint64_t v12 = swift_projectBox();
        uint64_t v13 = *(int *)(v14 + 48);
        goto LABEL_9;
      case 4uLL:
        uint64_t v10 = *(void *)((v1 & 0xFFFFFFFFFFFFFFBLL) + 0x10);
LABEL_11:
        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<DSLTree.Node>);
        uint64_t v9 = swift_allocObject();
        *(_OWORD *)(v9 + 16) = xmmword_209FAFD60;
        *(void *)(v9 + 32) = v10;
        swift_retain();
        break;
      case 5uLL:
        uint64_t v27 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (DSLTree._AST.ConditionKind, DSLTree.Node, DSLTree.Node));
        uint64_t v28 = swift_projectBox();
        uint64_t v29 = *(void *)(v28 + *(int *)(v27 + 48));
        uint64_t v30 = *(void *)(v28 + *(int *)(v27 + 64));
        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<DSLTree.Node>);
        uint64_t v9 = swift_allocObject();
        *(_OWORD *)(v9 + 16) = xmmword_209FAFD80;
        *(void *)(v9 + 32) = v29;
        *(void *)(v9 + 40) = v30;
        swift_retain();
        swift_retain();
        break;
      case 6uLL:
        uint64_t v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (DSLTree._AST.QuantificationAmount, DSLTree.QuantificationKind, DSLTree.Node));
        uint64_t v12 = swift_projectBox();
        uint64_t v13 = *(int *)(v11 + 64);
LABEL_9:
        uint64_t v15 = *(void *)(v12 + v13);
        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<DSLTree.Node>);
        uint64_t v9 = swift_allocObject();
        *(_OWORD *)(v9 + 16) = xmmword_209FAFD60;
        *(void *)(v9 + 32) = v15;
        swift_retain();
        break;
      case 7uLL:
      case 8uLL:
      case 9uLL:
      case 0xAuLL:
      case 0xDuLL:
      case 0xEuLL:
      case 0xFuLL:
      case 0x10uLL:
        return v9;
      case 0xBuLL:
        uint64_t v16 = swift_projectBox();
        outlined init with copy of MEProgram(v16, (uint64_t)v8, type metadata accessor for DSLTree._AST.AbsentFunction);
        uint64_t v17 = AST.AbsentFunction.children.getter();
        outlined destroy of MEProgram((uint64_t)v8, type metadata accessor for DSLTree._AST.AbsentFunction);
        int64_t v18 = *(void *)(v17 + 16);
        if (v18)
        {
          uint64_t v38 = v9;
          specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v18, 0);
          unint64_t v19 = 0;
          int v34 = (void (**)(char *, char *, uint64_t))(v3 + 32);
          uint64_t v35 = v3 + 16;
          uint64_t v33 = (void (**)(char *, uint64_t))(v3 + 8);
          int64_t v36 = v18;
          uint64_t v37 = v17;
          do
          {
            if (v19 >= *(void *)(v17 + 16))
            {
              __break(1u);
              swift_unexpectedError();
              __break(1u);
              JUMPOUT(0x209F731CCLL);
            }
            (*(void (**)(char *, unint64_t, uint64_t))(v3 + 16))(v5, v17+ ((*(unsigned __int8 *)(v3 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80))+ *(void *)(v3 + 72) * v19, v2);
            unint64_t v20 = convert #1 () in AST.Node.dslTreeNode.getter((uint64_t)v5);
            if (((v20 >> 59) & 0x1E | (v20 >> 2) & 1) == 0xC)
            {
              (*v33)(v5, v2);
            }
            else
            {
              uint64_t v21 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (DSLTree.Node, DSLTree._AST.ASTNode));
              uint64_t v22 = swift_allocBox();
              unint64_t v24 = (char *)v23 + *(int *)(v21 + 48);
              *uint64_t v23 = v20;
              (*v34)(v24, v5, v2);
              unint64_t v20 = v22 | 0x6000000000000000;
            }
            uint64_t v9 = v38;
            if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
            {
              specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(void *)(v9 + 16) + 1, 1);
              uint64_t v9 = v38;
            }
            unint64_t v26 = *(void *)(v9 + 16);
            unint64_t v25 = *(void *)(v9 + 24);
            if (v26 >= v25 >> 1)
            {
              specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v25 > 1), v26 + 1, 1);
              uint64_t v9 = v38;
            }
            ++v19;
            *(void *)(v9 + 16) = v26 + 1;
            *(void *)(v9 + 8 * v26 + 32) = v20;
            uint64_t v17 = v37;
          }
          while (v36 != v19);
        }
        swift_bridgeObjectRelease();
        break;
      case 0xCuLL:
        a1 = *(void *)swift_projectBox();
        continue;
      default:
        uint64_t v9 = *(void *)(v1 + 16);
LABEL_13:
        swift_bridgeObjectRetain();
        break;
    }
    return v9;
  }
}

uint64_t DSLTree.Node.appending(_:)(uint64_t a1, unint64_t a2)
{
  if (((a2 >> 59) & 0x1E | (a2 >> 2) & 1) == 1)
  {
    uint64_t v4 = *(char **)((a2 & 0xFFFFFFFFFFFFFFBLL) + 0x10);
    swift_retain();
    swift_bridgeObjectRetain();
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
      uint64_t v4 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *((void *)v4 + 2) + 1, 1, v4);
    }
    unint64_t v6 = *((void *)v4 + 2);
    unint64_t v5 = *((void *)v4 + 3);
    if (v6 >= v5 >> 1) {
      uint64_t v4 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v5 > 1), v6 + 1, 1, v4);
    }
    uint64_t v7 = swift_allocObject();
    *((void *)v4 + 2) = v6 + 1;
    *(void *)&v4[8 * v6 + 32] = a1;
    *(void *)(v7 + 16) = v4;
  }
  else
  {
    uint64_t v7 = swift_allocObject();
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<DSLTree.Node>);
    uint64_t v8 = swift_allocObject();
    *(_OWORD *)(v8 + 16) = xmmword_209FAFD80;
    *(void *)(v8 + 32) = a2;
    *(void *)(v8 + 40) = a1;
    *(void *)(v7 + 16) = v8;
    swift_retain();
    swift_retain();
  }
  return v7 | 4;
}

uint64_t DSLTree.Node.appendingAlternationCase(_:)(uint64_t a1, unint64_t a2)
{
  if ((a2 >> 59) & 0x1E | (a2 >> 2) & 1)
  {
    uint64_t v4 = swift_allocObject();
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<DSLTree.Node>);
    uint64_t v5 = swift_allocObject();
    *(_OWORD *)(v5 + 16) = xmmword_209FAFD80;
    *(void *)(v5 + 32) = a2;
    *(void *)(v5 + 40) = a1;
    *(void *)(v4 + 16) = v5;
    swift_retain();
    swift_retain();
  }
  else
  {
    unint64_t v6 = *(char **)(a2 + 16);
    swift_retain();
    swift_bridgeObjectRetain();
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
      unint64_t v6 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *((void *)v6 + 2) + 1, 1, v6);
    }
    unint64_t v8 = *((void *)v6 + 2);
    unint64_t v7 = *((void *)v6 + 3);
    if (v8 >= v7 >> 1) {
      unint64_t v6 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v7 > 1), v8 + 1, 1, v6);
    }
    uint64_t v4 = swift_allocObject();
    *((void *)v6 + 2) = v8 + 1;
    *(void *)&v6[8 * v8 + 32] = a1;
    *(void *)(v4 + 16) = v6;
  }
  return v4;
}

uint64_t ReferenceID._raw.getter()
{
  return *(void *)v0;
}

_StringProcessing::ReferenceID __swiftcall ReferenceID.init()()
{
  uint64_t v1 = static ReferenceID.counter;
  if (__OFADD__(static ReferenceID.counter, 1))
  {
    __break(1u);
  }
  else
  {
    ++static ReferenceID.counter;
    *uint64_t v0 = v1;
  }
  return result;
}

void ReferenceID.hash(into:)()
{
  Hasher._combine(_:)(*v0);
}

BOOL static ReferenceID.== infix(_:_:)(void *a1, void *a2)
{
  return *a1 == *a2;
}

Swift::Int ReferenceID.hashValue.getter()
{
  Swift::UInt v1 = *v0;
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v1);
  return Hasher._finalize()();
}

void *CaptureTransform.init<A, B>(_:)@<X0>(uint64_t (*a1)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  swift_getFunctionTypeMetadata1();
  swift_getFunctionTypeMetadata1();
  swift_retain();
  if (swift_dynamicCast())
  {
    swift_release();
    a2 = swift_allocObject();
    *(void *)(a2 + 16) = a3;
    *(void *)(a2 + 24) = a4;
    *(_OWORD *)(a2 + 32) = v13;
    char v10 = 3;
    uint64_t v11 = partial apply for thunk for @escaping @callee_guaranteed (@guaranteed Substring) -> (@out B, @error @owned Error);
    a1 = partial apply for thunk for @escaping @callee_guaranteed (@in_guaranteed Substring) -> (@out B?, @error @owned Error);
  }
  else
  {
    char v10 = 2;
    uint64_t v11 = partial apply for closure #1 in CaptureTransform.init<A, B>(_:);
  }
  _StringProcessing::ReferenceID result = (void *)swift_allocObject();
  result[2] = a3;
  result[3] = a4;
  result[4] = a1;
  result[5] = a2;
  *(void *)a5 = a3;
  *(void *)(a5 + 8) = a4;
  *(void *)(a5 + 16) = v11;
  *(void *)(a5 + 24) = result;
  *(unsigned char *)(a5 + 32) = v10;
  return result;
}

{
  char v10;
  void *v11;
  void *result;
  long long v13;

  type metadata accessor for Optional();
  swift_getFunctionTypeMetadata1();
  swift_getFunctionTypeMetadata1();
  swift_retain();
  if (swift_dynamicCast())
  {
    swift_release();
    a2 = swift_allocObject();
    *(void *)(a2 + 16) = a3;
    *(void *)(a2 + 24) = a4;
    *(_OWORD *)(a2 + 32) = v13;
    char v10 = 1;
    uint64_t v11 = partial apply for thunk for @escaping @callee_guaranteed (@guaranteed Substring) -> (@out B?, @error @owned Error);
    a1 = partial apply for thunk for @escaping @callee_guaranteed (@in_guaranteed Substring) -> (@out B?, @error @owned Error);
  }
  else
  {
    char v10 = 0;
    uint64_t v11 = partial apply for closure #1 in CaptureTransform.init<A, B>(_:);
  }
  _StringProcessing::ReferenceID result = (void *)swift_allocObject();
  result[2] = a3;
  result[3] = a4;
  result[4] = a1;
  result[5] = a2;
  *(void *)a5 = a3;
  *(void *)(a5 + 8) = a4;
  *(void *)(a5 + 16) = v11;
  *(void *)(a5 + 24) = result;
  *(unsigned char *)(a5 + 32) = v10;
  return result;
}

uint64_t thunk for @escaping @callee_guaranteed (@guaranteed Substring) -> (@out B, @error @owned Error)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X7>, uint64_t *a3@<X8>)
{
  uint64_t v6 = *(void *)(a2 - 8);
  uint64_t v7 = MEMORY[0x270FA5388](a1);
  uint64_t v9 = (char *)&v13 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t result = v10(v7);
  if (!v3)
  {
    a3[3] = a2;
    boxed_opaque_existential_0 = __swift_allocate_boxed_opaque_existential_0(a3);
    return (*(uint64_t (**)(uint64_t *, char *, uint64_t))(v6 + 32))(boxed_opaque_existential_0, v9, a2);
  }
  return result;
}

uint64_t closure #1 in CaptureTransform.init<A, B>(_:)@<X0>(uint64_t a1@<X0>, void (*a2)(unsigned char *)@<X1>, uint64_t a3@<X3>, uint64_t a4@<X4>, uint64_t *a5@<X8>)
{
  uint64_t v10 = *(void *)(a3 - 8);
  uint64_t v11 = MEMORY[0x270FA5388](a1);
  uint64_t v13 = &v15[-((v12 + 15) & 0xFFFFFFFFFFFFFFF0)];
  outlined init with copy of Any(v11, (uint64_t)v15);
  swift_dynamicCast();
  a5[3] = a4;
  __swift_allocate_boxed_opaque_existential_0(a5);
  a2(v13);
  uint64_t result = (*(uint64_t (**)(unsigned char *, uint64_t))(v10 + 8))(v13, a3);
  if (v5) {
    return __swift_deallocate_boxed_opaque_existential_0((uint64_t)a5);
  }
  return result;
}

uint64_t thunk for @escaping @callee_guaranteed (@guaranteed Substring) -> (@out B?, @error @owned Error)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t (*a5)(uint64_t, uint64_t, uint64_t, uint64_t)@<X4>, uint64_t a6@<X7>, uint64_t a7@<X8>)
{
  uint64_t v22 = a7;
  uint64_t v14 = type metadata accessor for Optional();
  MEMORY[0x270FA5388](v14 - 8);
  uint64_t v16 = (char *)&v21 - v15;
  uint64_t result = a5(a1, a2, a3, a4);
  if (!v7)
  {
    uint64_t v18 = v22;
    uint64_t v19 = *(void *)(a6 - 8);
    uint64_t result = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v19 + 48))(v16, 1, a6);
    if (result == 1)
    {
      *(_OWORD *)uint64_t v18 = 0u;
      *(_OWORD *)(v18 + 16) = 0u;
    }
    else
    {
      *(void *)(v18 + 24) = a6;
      boxed_opaque_existential_0 = __swift_allocate_boxed_opaque_existential_0((uint64_t *)v18);
      return (*(uint64_t (**)(uint64_t *, char *, uint64_t))(v19 + 32))(boxed_opaque_existential_0, v16, a6);
    }
  }
  return result;
}

uint64_t closure #1 in CaptureTransform.init<A, B>(_:)@<X0>(uint64_t a1@<X0>, void (*a2)(char *)@<X1>, uint64_t a3@<X3>, uint64_t a4@<X4>, uint64_t a5@<X8>)
{
  uint64_t v22 = a5;
  uint64_t v9 = *(void *)(a3 - 8);
  MEMORY[0x270FA5388](a1);
  uint64_t v11 = (char *)&v21 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = type metadata accessor for Optional();
  uint64_t v21 = *(void *)(v12 - 8);
  MEMORY[0x270FA5388](v12);
  uint64_t v14 = (char *)&v21 - v13;
  outlined init with copy of Any(a1, (uint64_t)v23);
  swift_dynamicCast();
  uint64_t v15 = v24;
  a2(v11);
  uint64_t result = (*(uint64_t (**)(char *, uint64_t))(v9 + 8))(v11, a3);
  if (!v15)
  {
    uint64_t v18 = v21;
    uint64_t v17 = v22;
    uint64_t v19 = *(void *)(a4 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v19 + 48))(v14, 1, a4) == 1)
    {
      uint64_t result = (*(uint64_t (**)(char *, uint64_t))(v18 + 8))(v14, v12);
      *(_OWORD *)uint64_t v17 = 0u;
      *(_OWORD *)(v17 + 16) = 0u;
    }
    else
    {
      *(void *)(v17 + 24) = a4;
      boxed_opaque_existential_0 = __swift_allocate_boxed_opaque_existential_0((uint64_t *)v17);
      return (*(uint64_t (**)(uint64_t *, char *, uint64_t))(v19 + 32))(boxed_opaque_existential_0, v14, a4);
    }
  }
  return result;
}

void protocol witness for Hashable.hashValue.getter in conformance CaptureTransform()
{
}

void protocol witness for Hashable._rawHashValue(seed:) in conformance CaptureTransform()
{
}

unint64_t protocol witness for CustomStringConvertible.description.getter in conformance CaptureTransform()
{
  return specialized CaptureTransform.description.getter();
}

uint64_t CaptureList.Builder.addCaptures(of:optionalNesting:visibleInTypedOutput:)(unint64_t a1, uint64_t a2, int a3)
{
  while (2)
  {
    uint64_t v97 = a2;
    int v96 = a3;
    unint64_t v3 = a1;
    uint64_t v4 = type metadata accessor for AST.AbsentFunction.Kind();
    uint64_t v92 = *(void *)(v4 - 8);
    uint64_t v93 = v4;
    MEMORY[0x270FA5388](v4);
    uint64_t v94 = (char *)&v84 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
    uint64_t v6 = type metadata accessor for DSLTree._AST.AbsentFunction(0);
    MEMORY[0x270FA5388](v6 - 8);
    uint64_t v91 = (uint64_t)&v84 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
    uint64_t v8 = type metadata accessor for DSLTree._AST.QuantificationAmount(0);
    MEMORY[0x270FA5388](v8 - 8);
    uint64_t v10 = (char *)&v84 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
    uint64_t v11 = type metadata accessor for AST.Node();
    uint64_t v87 = *(void *)(v11 - 8);
    uint64_t v88 = v11;
    MEMORY[0x270FA5388](v11);
    uint64_t v86 = (uint64_t *)((char *)&v84 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0));
    uint64_t v13 = type metadata accessor for AST.Conditional.Condition.Kind();
    uint64_t v90 = *(void *)(v13 - 8);
    MEMORY[0x270FA5388](v13);
    uint64_t v15 = (char *)&v84 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
    uint64_t v16 = type metadata accessor for DSLTree._AST.ConditionKind(0);
    MEMORY[0x270FA5388](v16 - 8);
    uint64_t v18 = (char *)&v84 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
    uint64_t v19 = type metadata accessor for Source.Location();
    uint64_t v84 = *(void *)(v19 - 8);
    uint64_t v85 = v19;
    MEMORY[0x270FA5388](v19);
    uint64_t v20 = type metadata accessor for CaptureList.Capture();
    uint64_t v89 = *(void *)(v20 - 8);
    MEMORY[0x270FA5388](v20);
    uint64_t v22 = (char *)&v84 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
    uint64_t v95 = type metadata accessor for CaptureList.Builder.OptionalNesting();
    uint64_t v23 = MEMORY[0x270FA5388](v95);
    unint64_t v25 = (char *)&v84 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
    uint64_t result = MEMORY[0x270FA5388](v23);
    uint64_t v29 = (char *)&v84 - v28;
    switch((v3 >> 59) & 0x1E | (v3 >> 2) & 1)
    {
      case 1uLL:
        uint64_t v50 = *(void *)((v3 & 0xFFFFFFFFFFFFFFBLL) + 0x10);
        uint64_t v51 = *(void *)(v50 + 16);
        if (!v51) {
          return result;
        }
        unint64_t v52 = 0;
        while (v52 < *(void *)(v50 + 16))
        {
          unint64_t v53 = v52 + 1;
          uint64_t v54 = *(void *)(v50 + 32 + 8 * v52);
          swift_retain();
          CaptureList.Builder.addCaptures(of:optionalNesting:visibleInTypedOutput:)(v54, v97, v96 & 1);
          uint64_t result = swift_release();
          unint64_t v52 = v53;
          if (v51 == v53) {
            return result;
          }
        }
        goto LABEL_39;
      case 2uLL:
        uint64_t v32 = v3 & 0xFFFFFFFFFFFFFFBLL;
        unint64_t v33 = *(void *)((v3 & 0xFFFFFFFFFFFFFFBLL) + 0x30);
        if (*(void *)(v32 + 56))
        {
          swift_bridgeObjectRetain();
          char v34 = v96;
        }
        else
        {
          swift_bridgeObjectRetain();
          DSLTree.Node.outputDefiningNode.getter(v33);
          char v34 = v96;
          swift_release();
        }
        uint64_t v82 = v97;
        CaptureList.Builder.OptionalNesting.depth.getter();
        static Source.Location.fake.getter();
        CaptureList.Capture.init(name:type:optionalDepth:visibleInTypedOutput:_:)();
        unint64_t v83 = (void (*)(char *, void))CaptureList.Builder.captures.modify();
        CaptureList.append(_:)();
        (*(void (**)(char *, uint64_t))(v89 + 8))(v22, v20);
        v83(v98, 0);
        return CaptureList.Builder.addCaptures(of:optionalNesting:visibleInTypedOutput:)(v33, v82, v34 & 1);
      case 3uLL:
        uint64_t v49 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (DSLTree._AST.GroupKind, DSLTree.Node));
        a1 = *(void *)(swift_projectBox() + *(int *)(v49 + 48));
        a3 = v96 & 1;
        a2 = v97;
        goto LABEL_17;
      case 4uLL:
        a1 = *(void *)((v3 & 0xFFFFFFFFFFFFFFBLL) + 0x10);
        a2 = v97;
        a3 = 0;
LABEL_17:
        continue;
      case 5uLL:
        uint64_t v94 = v27;
        uint64_t v61 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (DSLTree._AST.ConditionKind, DSLTree.Node, DSLTree.Node));
        uint64_t v62 = swift_projectBox();
        uint64_t v63 = *(void *)(v62 + *(int *)(v61 + 48));
        uint64_t v64 = *(void *)(v62 + *(int *)(v61 + 64));
        outlined init with copy of MEProgram(v62, (uint64_t)v18, type metadata accessor for DSLTree._AST.ConditionKind);
        uint64_t v65 = v90;
        (*(void (**)(char *, char *, uint64_t))(v90 + 32))(v15, v18, v13);
        if ((*(unsigned int (**)(char *, uint64_t))(v65 + 88))(v15, v13) == *MEMORY[0x263F8F870])
        {
          (*(void (**)(char *, uint64_t))(v65 + 96))(v15, v13);
          uint64_t v66 = type metadata accessor for AST.Group();
          uint64_t v67 = swift_allocBox();
          (*(void (**)(uint64_t, char *, uint64_t))(*(void *)(v66 - 8) + 32))(v68, v15, v66);
          int64_t v70 = v86;
          uint64_t v69 = v87;
          *uint64_t v86 = v67;
          uint64_t v71 = v88;
          (*(void (**)(uint64_t *, void, uint64_t))(v69 + 104))(v70, *MEMORY[0x263F8FC48], v88);
          char v72 = v96;
          CaptureList.Builder.addCaptures(of:optionalNesting:visibleInTypedOutput:)();
          (*(void (**)(uint64_t *, uint64_t))(v69 + 8))(v70, v71);
        }
        else
        {
          (*(void (**)(char *, uint64_t))(v65 + 8))(v15, v13);
          char v72 = v96;
        }
        CaptureList.Builder.OptionalNesting.addingOptional.getter();
        uint64_t v79 = v72 & 1;
        CaptureList.Builder.addCaptures(of:optionalNesting:visibleInTypedOutput:)(v63, v29, v79);
        uint64_t v80 = v95;
        uint64_t v81 = (void (*)(char *, uint64_t))*((void *)v94 + 1);
        v81(v29, v95);
        CaptureList.Builder.OptionalNesting.addingOptional.getter();
        CaptureList.Builder.addCaptures(of:optionalNesting:visibleInTypedOutput:)(v64, v29, v79);
        return ((uint64_t (*)(char *, uint64_t))v81)(v29, v80);
      case 6uLL:
        uint64_t v35 = (void (**)(char *, uint64_t, uint64_t))v27;
        uint64_t v36 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (DSLTree._AST.QuantificationAmount, DSLTree.QuantificationKind, DSLTree.Node));
        uint64_t v37 = swift_projectBox();
        uint64_t v38 = *(void *)(v37 + *(int *)(v36 + 64));
        outlined init with copy of MEProgram(v37, (uint64_t)v10, type metadata accessor for DSLTree._AST.QuantificationAmount);
        uint64_t v39 = (void (**)(char *, uint64_t))v35;
        v35[2](v25, v97, v95);
        uint64_t v40 = AST.Quantification.Amount.bounds.getter();
        LOBYTE(v35) = v41;
        outlined destroy of MEProgram((uint64_t)v10, type metadata accessor for DSLTree._AST.QuantificationAmount);
        if ((v35 & 1) == 0 && !v40)
        {
          CaptureList.Builder.OptionalNesting.addingOptional.getter();
          uint64_t v42 = v95;
          v39[1](v25, v95);
          ((void (*)(char *, char *, uint64_t))v39[4])(v25, v29, v42);
        }
        CaptureList.Builder.addCaptures(of:optionalNesting:visibleInTypedOutput:)(v38, v25, v96 & 1);
        return ((uint64_t (*)(char *, uint64_t))v39[1])(v25, v95);
      case 7uLL:
      case 8uLL:
      case 9uLL:
      case 0xAuLL:
      case 0xDuLL:
      case 0xEuLL:
      case 0xFuLL:
      case 0x10uLL:
        return result;
      case 0xBuLL:
        uint64_t v55 = swift_projectBox();
        uint64_t v56 = v91;
        outlined init with copy of MEProgram(v55, v91, type metadata accessor for DSLTree._AST.AbsentFunction);
        uint64_t v57 = v94;
        AST.AbsentFunction.kind.getter();
        uint64_t v59 = v92;
        uint64_t v58 = v93;
        int v60 = (*(uint64_t (**)(char *, uint64_t))(v92 + 88))(v57, v93);
        if (v60 == *MEMORY[0x263F8F898]) {
          goto LABEL_26;
        }
        if (v60 == *MEMORY[0x263F8F880])
        {
          outlined destroy of MEProgram(v56, type metadata accessor for DSLTree._AST.AbsentFunction);
          (*(void (**)(char *, uint64_t))(v59 + 96))(v57, v58);
          uint64_t v73 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (absentee: AST.Node, pipe: Source.Location, expr: AST.Node));
          unint64_t v74 = &v57[*(int *)(v73 + 48)];
          uint64_t v76 = v86;
          uint64_t v75 = v87;
          uint64_t v77 = v88;
          (*(void (**)(uint64_t *, char *, uint64_t))(v87 + 32))(v86, &v57[*(int *)(v73 + 64)], v88);
          CaptureList.Builder.addCaptures(of:optionalNesting:visibleInTypedOutput:)();
          uint64_t v78 = *(void (**)(uint64_t *, uint64_t))(v75 + 8);
          v78(v76, v77);
          (*(void (**)(char *, uint64_t))(v84 + 8))(v74, v85);
          return ((uint64_t (*)(char *, uint64_t))v78)(v57, v77);
        }
        else if (v60 == *MEMORY[0x263F8F890])
        {
LABEL_26:
          outlined destroy of MEProgram(v56, type metadata accessor for DSLTree._AST.AbsentFunction);
          return (*(uint64_t (**)(char *, uint64_t))(v59 + 8))(v57, v58);
        }
        else
        {
          if (v60 != *MEMORY[0x263F8F888])
          {
LABEL_40:
            _assertionFailure(_:_:file:line:flags:)();
            __break(1u);
            JUMPOUT(0x209F74A94);
          }
          return outlined destroy of MEProgram(v56, type metadata accessor for DSLTree._AST.AbsentFunction);
        }
      case 0xCuLL:
        uint64_t v30 = (uint64_t (**)(char *, uint64_t))v27;
        uint64_t v31 = *(void *)swift_projectBox();
        CaptureList.Builder.OptionalNesting.disablingNesting.getter();
        CaptureList.Builder.addCaptures(of:optionalNesting:visibleInTypedOutput:)(v31, v29, v96 & 1);
        return v30[1](v29, v95);
      default:
        uint64_t v43 = *(void *)(v3 + 16);
        uint64_t v44 = *(void *)(v43 + 16);
        if (!v44) {
          return result;
        }
        unint64_t v45 = 0;
        uint64_t v46 = (uint64_t (**)(char *, uint64_t))(v27 + 8);
        while (v45 < *(void *)(v43 + 16))
        {
          unint64_t v47 = v45 + 1;
          uint64_t v48 = *(void *)(v43 + 32 + 8 * v45);
          swift_retain();
          CaptureList.Builder.OptionalNesting.addingOptional.getter();
          CaptureList.Builder.addCaptures(of:optionalNesting:visibleInTypedOutput:)(v48, v29, v96 & 1);
          swift_release();
          uint64_t result = (*v46)(v29, v95);
          unint64_t v45 = v47;
          if (v44 == v47) {
            return result;
          }
        }
        __break(1u);
LABEL_39:
        __break(1u);
        goto LABEL_40;
    }
  }
}

uint64_t static CaptureList.Builder.build(_:)@<X0>(unint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v20 = a2;
  uint64_t v3 = type metadata accessor for CaptureList.Builder.OptionalNesting();
  uint64_t v18 = *(void *)(v3 - 8);
  uint64_t v19 = v3;
  MEMORY[0x270FA5388](v3);
  uint64_t v5 = (char *)&v17 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = type metadata accessor for Source.Location();
  MEMORY[0x270FA5388](v6 - 8);
  uint64_t v7 = type metadata accessor for CaptureList.Capture();
  uint64_t v8 = *(void *)(v7 - 8);
  MEMORY[0x270FA5388](v7);
  uint64_t v10 = (char *)&v17 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v17 = type metadata accessor for CaptureList.Builder();
  uint64_t v11 = *(void *)(v17 - 8);
  MEMORY[0x270FA5388](v17);
  uint64_t v13 = (char *)&v17 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  unint64_t v14 = *a1;
  CaptureList.Builder.init()();
  DSLTree.Node.outputDefiningNode.getter(v14);
  swift_release();
  static Source.Location.fake.getter();
  CaptureList.Capture.init(name:type:optionalDepth:visibleInTypedOutput:_:)();
  uint64_t v15 = (void (*)(unsigned char *, void))CaptureList.Builder.captures.modify();
  CaptureList.append(_:)();
  (*(void (**)(char *, uint64_t))(v8 + 8))(v10, v7);
  v15(v21, 0);
  CaptureList.Builder.OptionalNesting.init(canNest:)();
  CaptureList.Builder.addCaptures(of:optionalNesting:visibleInTypedOutput:)(v14, (uint64_t)v5, 1);
  (*(void (**)(char *, uint64_t))(v18 + 8))(v5, v19);
  CaptureList.Builder.captures.getter();
  return (*(uint64_t (**)(char *, uint64_t))(v11 + 8))(v13, v17);
}

uint64_t DSLTree.Node.outputDefiningNode.getter(unint64_t a1)
{
  uint64_t v1 = a1;
  if (((a1 >> 59) & 0x1E | (a1 >> 2) & 1) - 3 > 1)
  {
    swift_retain();
    return v1;
  }
  uint64_t result = DSLTree.Node.children.getter(a1);
  if (*(void *)(result + 16))
  {
    uint64_t v3 = *(void *)(result + 32);
    swift_retain();
    swift_bridgeObjectRelease();
    uint64_t v1 = DSLTree.Node.outputDefiningNode.getter(v3);
    swift_release();
    return v1;
  }
  __break(1u);
  return result;
}

uint64_t DSLTree.Node._canOnlyMatchAtStartImpl(_:)(uint64_t a1, unint64_t a2)
{
  uint64_t v79 = (unint64_t *)a1;
  uint64_t v3 = type metadata accessor for AST.Quantification.Amount();
  uint64_t v72 = *(void *)(v3 - 8);
  uint64_t v73 = (char *)v3;
  MEMORY[0x270FA5388](v3);
  unint64_t v74 = (char *)&v69 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = type metadata accessor for AST.Atom.Number();
  uint64_t v76 = *(void (***)(char *, unint64_t, uint64_t))(v5 - 8);
  uint64_t v77 = v5;
  MEMORY[0x270FA5388](v5);
  uint64_t v75 = (char *)&v69 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = type metadata accessor for DSLTree._AST.QuantificationAmount(0);
  MEMORY[0x270FA5388](v7 - 8);
  uint64_t v78 = (uint64_t)&v69 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = type metadata accessor for AST.Group.Kind();
  uint64_t v71 = *(void *)(v9 - 8);
  MEMORY[0x270FA5388](v9);
  uint64_t v11 = (char *)&v69 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = type metadata accessor for AST.MatchingOptionSequence();
  unint64_t v69 = *(void *)(v12 - 8);
  uint64_t v70 = v12;
  MEMORY[0x270FA5388](v12);
  unint64_t v14 = (char *)&v69 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v15 = type metadata accessor for DSLTree._AST.GroupKind(0);
  MEMORY[0x270FA5388](v15 - 8);
  unint64_t v17 = (unint64_t)&v69 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v18 = type metadata accessor for DSLTree._AST.MatchingOptionSequence(0);
  MEMORY[0x270FA5388](v18 - 8);
  uint64_t v20 = (void (**)(char *, unint64_t, uint64_t))((char *)&v69 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v21 = type metadata accessor for DSLTree.Atom(0);
  LODWORD(v22) = v21;
  uint64_t v23 = MEMORY[0x270FA5388](v21);
  unint64_t v25 = (char *)&v69 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v23);
  uint64_t v27 = (char *)&v69 - v26;
  uint64_t v28 = 2;
  switch((a2 >> 59) & 0x1E | (a2 >> 2) & 1)
  {
    case 1uLL:
      uint64_t v51 = 0;
      unint64_t v17 = 0xFFFFFFFFFFFFFFBLL;
      uint64_t v22 = *(void *)((a2 & 0xFFFFFFFFFFFFFFBLL) + 0x10);
      unint64_t v52 = *(char **)(v22 + 16);
      uint64_t v20 = (void (**)(char *, unint64_t, uint64_t))(v22 + 32);
      uint64_t v9 = (uint64_t)v79;
      while (2)
      {
        if (v52 == v51) {
          return 0;
        }
        if ((unint64_t)v51 < *(void *)(v22 + 16))
        {
          unint64_t v14 = v51 + 1;
          unint64_t v53 = v20[(void)v51];
          unint64_t v25 = (char *)((unint64_t)v53 & 0xFFFFFFFFFFFFFFBLL);
          swift_retain();
          uint64_t v28 = DSLTree.Node._canOnlyMatchAtStartImpl(_:)(v9, v53);
          a2 = v28;
          swift_release();
          uint64_t v51 = v14;
          if (v28 != 2) {
            return v28;
          }
          continue;
        }
        break;
      }
      goto LABEL_68;
    case 2uLL:
      unint64_t v42 = (unint64_t)v79;
      unint64_t v25 = (char *)*v79;
      unint64_t v17 = *(void *)(*v79 + 16);
      if (!v17) {
        goto LABEL_70;
      }
      uint64_t v54 = *(void *)((a2 & 0xFFFFFFFFFFFFFFBLL) + 0x30);
      uint64_t v28 = *(unsigned int *)&v25[4 * v17 + 28];
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
        unint64_t v25 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v17 + 1, 1, v25);
      }
      unint64_t v43 = *((void *)v25 + 2);
      unint64_t v55 = *((void *)v25 + 3);
      unint64_t v17 = v43 + 1;
      if (v43 >= v55 >> 1) {
        unint64_t v25 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v55 > 1), v43 + 1, 1, v25);
      }
      *((void *)v25 + 2) = v17;
      *(_DWORD *)&v25[4 * v43 + 32] = v28;
      *(void *)unint64_t v42 = v25;
      uint64_t v56 = DSLTree.Node._canOnlyMatchAtStartImpl(_:)(v42, v54);
      a2 = *(void *)v42;
      if (!*(void *)(*(void *)v42 + 16))
      {
        __break(1u);
        goto LABEL_73;
      }
      uint64_t v28 = v56;
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
        goto LABEL_74;
      }
      uint64_t v57 = *(void *)(a2 + 16);
      if (!v57) {
        goto LABEL_75;
      }
      goto LABEL_35;
    case 3uLL:
      uint64_t v39 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (DSLTree._AST.GroupKind, DSLTree.Node));
      uint64_t v40 = swift_projectBox();
      a2 = *(void *)(v40 + *(int *)(v39 + 48));
      outlined init with copy of MEProgram(v40, v17, type metadata accessor for DSLTree._AST.GroupKind);
      unint64_t v25 = (char *)*v79;
      uint64_t v28 = *(void *)(*v79 + 16);
      if (!v28) {
        goto LABEL_69;
      }
      LODWORD(v22) = *(_DWORD *)&v25[4 * v28 + 28];
      if (swift_isUniquelyReferenced_nonNull_native()) {
        goto LABEL_13;
      }
      goto LABEL_71;
    case 4uLL:
      uint64_t v30 = (uint64_t *)((a2 & 0xFFFFFFFFFFFFFFBLL) + 16);
      goto LABEL_6;
    case 5uLL:
      uint64_t v33 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (DSLTree._AST.ConditionKind, DSLTree.Node, DSLTree.Node));
      uint64_t v34 = swift_projectBox();
      uint64_t v35 = *(void *)(v34 + *(int *)(v33 + 48));
      uint64_t v36 = *(void *)(v34 + *(int *)(v33 + 64));
      uint64_t v37 = (uint64_t)v79;
      if ((DSLTree.Node._canOnlyMatchAtStartImpl(_:)(v79, v35) & 1) == 0) {
        return 0;
      }
      char v38 = DSLTree.Node._canOnlyMatchAtStartImpl(_:)(v37, v36);
      return v38 & 1;
    case 6uLL:
      uint64_t v47 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (DSLTree._AST.QuantificationAmount, DSLTree.QuantificationKind, DSLTree.Node));
      uint64_t v48 = swift_projectBox();
      a2 = *(void *)(v48 + *(int *)(v47 + 64));
      uint64_t v22 = v78;
      outlined init with copy of MEProgram(v48, v78, type metadata accessor for DSLTree._AST.QuantificationAmount);
      uint64_t v9 = v72;
      unint64_t v25 = v73;
      unint64_t v17 = (unint64_t)v74;
      (*(void (**)(char *, uint64_t, char *))(v72 + 16))(v74, v22, v73);
      int v49 = (*(uint64_t (**)(unint64_t, char *))(v9 + 88))(v17, v25);
      if (v49 == *MEMORY[0x263F8F990])
      {
        (*(void (**)(unint64_t, char *))(v9 + 96))(v17, v25);
        unint64_t v14 = v75;
        uint64_t v20 = v76;
        uint64_t v50 = v77;
        v76[4](v75, v17, v77);
        uint64_t v28 = (uint64_t)v79;
        goto LABEL_44;
      }
      uint64_t v28 = (uint64_t)v79;
      uint64_t v20 = v76;
      uint64_t v50 = v77;
      unint64_t v14 = v75;
      if (v49 == *MEMORY[0x263F8F998])
      {
        (*(void (**)(unint64_t, char *))(v9 + 96))(v17, v25);
        v20[4](v14, v17, v50);
        goto LABEL_44;
      }
      if (v49 == *MEMORY[0x263F8F988])
      {
        (*(void (**)(unint64_t, char *))(v9 + 8))(v17, v25);
        goto LABEL_58;
      }
      if (v49 == *MEMORY[0x263F8F980])
      {
        (*(void (**)(unint64_t, char *))(v9 + 96))(v17, v25);
        unint64_t v68 = v17
            + *(int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (AST.Atom.Number, AST.Atom.Number))
                     + 48);
        v20[4](v14, v17, v50);
        ((void (*)(unint64_t, uint64_t))v20[1])(v68, v50);
LABEL_44:
        uint64_t v61 = AST.Atom.Number.value.getter();
        char v63 = v62;
        ((void (*)(char *, uint64_t))v20[1])(v14, v50);
        if ((v63 & 1) == 0)
        {
          outlined destroy of MEProgram(v22, type metadata accessor for DSLTree._AST.QuantificationAmount);
          if (v61 > 0) {
            return DSLTree.Node._canOnlyMatchAtStartImpl(_:)(v28, a2);
          }
          return 2;
        }
LABEL_58:
        outlined destroy of MEProgram(v22, type metadata accessor for DSLTree._AST.QuantificationAmount);
        return 2;
      }
      if (v49 == *MEMORY[0x263F8F978]) {
        goto LABEL_58;
      }
      if (v49 == *MEMORY[0x263F8F9A0])
      {
        outlined destroy of MEProgram(v22, type metadata accessor for DSLTree._AST.QuantificationAmount);
        return DSLTree.Node._canOnlyMatchAtStartImpl(_:)(v28, a2);
      }
      if (v49 == *MEMORY[0x263F8F9A8]) {
        goto LABEL_58;
      }
      _assertionFailure(_:_:file:line:flags:)();
      __break(1u);
LABEL_68:
      __break(1u);
LABEL_69:
      __break(1u);
LABEL_70:
      __break(1u);
LABEL_71:
      unint64_t v25 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v28 + 1, 1, v25);
LABEL_13:
      unint64_t v42 = *((void *)v25 + 2);
      unint64_t v41 = *((void *)v25 + 3);
      if (v42 >= v41 >> 1) {
        unint64_t v25 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v41 > 1), v42 + 1, 1, v25);
      }
      *((void *)v25 + 2) = v42 + 1;
      *(_DWORD *)&v25[4 * v42 + 32] = v22;
      unint64_t v43 = (unint64_t)v79;
      *uint64_t v79 = (unint64_t)v25;
      uint64_t v44 = v71;
      (*(void (**)(char *, unint64_t, uint64_t))(v71 + 32))(v11, v17, v9);
      if ((*(unsigned int (**)(char *, uint64_t))(v44 + 88))(v11, v9) != *MEMORY[0x263F8FCC0])
      {
        uint64_t v64 = *(void (**)(char *, uint64_t))(v44 + 8);
        uint64_t v28 = v44 + 8;
        v64(v11, v9);
        goto LABEL_48;
      }
      (*(void (**)(char *, uint64_t))(v44 + 96))(v11, v9);
      unint64_t v42 = v69;
      uint64_t v28 = v70;
      (*(void (**)(char *, char *, uint64_t))(v69 + 32))(v14, v11, v70);
      unint64_t v17 = *((void *)v25 + 2);
      char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
      *(void *)unint64_t v43 = v25;
      if ((isUniquelyReferenced_nonNull_native & 1) == 0) {
        goto LABEL_78;
      }
      for (; v17; *(void *)unint64_t v43 = v25)
      {
        if (v17 > *((void *)v25 + 2)) {
          goto LABEL_80;
        }
        v25 += 4 * v17 + 28;
        MatchingOptions.Representation.apply(_:)((uint64_t)v14);
        uint64_t v46 = *(void (**)(char *, uint64_t))(v42 + 8);
        v42 += 8;
        v46(v14, v28);
LABEL_48:
        uint64_t v65 = DSLTree.Node._canOnlyMatchAtStartImpl(_:)(v43, a2);
        a2 = *(void *)v43;
        if (*(void *)(*(void *)v43 + 16))
        {
          uint64_t v28 = v65;
          if (swift_isUniquelyReferenced_nonNull_native())
          {
            uint64_t v66 = *(void *)(a2 + 16);
            if (v66) {
              goto LABEL_51;
            }
            goto LABEL_77;
          }
        }
        else
        {
LABEL_73:
          __break(1u);
LABEL_74:
          a2 = (unint64_t)specialized _ArrayBuffer._consumeAndCreateNew()(a2);
          uint64_t v57 = *(void *)(a2 + 16);
          if (v57)
          {
LABEL_35:
            *(void *)(a2 + 16) = v57 - 1;
            *(void *)unint64_t v42 = a2;
            return v28;
          }
LABEL_75:
          __break(1u);
        }
        a2 = (unint64_t)specialized _ArrayBuffer._consumeAndCreateNew()(a2);
        uint64_t v66 = *(void *)(a2 + 16);
        if (v66)
        {
LABEL_51:
          *(void *)(a2 + 16) = v66 - 1;
          *(void *)unint64_t v43 = a2;
          return v28;
        }
LABEL_77:
        __break(1u);
LABEL_78:
        unint64_t v25 = specialized _ArrayBuffer._consumeAndCreateNew()((uint64_t)v25);
      }
      __break(1u);
LABEL_80:
      __break(1u);
      goto LABEL_81;
    case 7uLL:
    case 0xAuLL:
    case 0xBuLL:
    case 0xDuLL:
    case 0xEuLL:
    case 0xFuLL:
      return 0;
    case 8uLL:
      uint64_t v58 = swift_projectBox();
      int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
      if (EnumCaseMultiPayload == 3)
      {
        outlined init with copy of MEProgram(v58, (uint64_t)v27, type metadata accessor for DSLTree.Atom);
        if (!*v27) {
          return 1;
        }
        if (*v27 == 9)
        {
          uint64_t v67 = *(void *)(*v79 + 16);
          if (v67) {
            return (*(_DWORD *)(*v79 + 4 * v67 + 28) & 4) == 0;
          }
LABEL_84:
          __break(1u);
          JUMPOUT(0x209F75AC8);
        }
      }
      else if (EnumCaseMultiPayload == 6)
      {
        outlined init with copy of MEProgram(v58, (uint64_t)v25, type metadata accessor for DSLTree.Atom);
        outlined init with take of DSLTree.QuantificationKind((uint64_t)v25, (uint64_t)v20, type metadata accessor for DSLTree._AST.MatchingOptionSequence);
        unint64_t v17 = (unint64_t)v79;
        a2 = *v79;
        unint64_t v25 = *(char **)(*v79 + 16);
        char v60 = swift_isUniquelyReferenced_nonNull_native();
        *(void *)unint64_t v17 = a2;
        if (v60)
        {
          if (v25) {
            goto LABEL_40;
          }
        }
        else
        {
LABEL_81:
          a2 = (unint64_t)specialized _ArrayBuffer._consumeAndCreateNew()(a2);
          *(void *)unint64_t v17 = a2;
          if (v25)
          {
LABEL_40:
            if ((unint64_t)v25 <= *(void *)(a2 + 16))
            {
              MatchingOptions.Representation.apply(_:)((uint64_t)v20);
              outlined destroy of MEProgram((uint64_t)v20, type metadata accessor for DSLTree._AST.MatchingOptionSequence);
              return v28;
            }
            goto LABEL_83;
          }
        }
        __break(1u);
LABEL_83:
        __break(1u);
        goto LABEL_84;
      }
      return 0;
    case 9uLL:
    case 0x10uLL:
      return v28;
    case 0xCuLL:
      uint64_t v30 = (uint64_t *)swift_projectBox();
LABEL_6:
      uint64_t v31 = *v30;
      swift_retain();
      uint64_t v32 = DSLTree.Node._canOnlyMatchAtStartImpl(_:)(v79, v31);
      swift_release();
      return v32;
    default:
      char v38 = specialized Sequence.allSatisfy(_:)(*(void *)(a2 + 16), (uint64_t)v79);
      return v38 & 1;
  }
}

void *DSLTree._Tree.children.getter(unint64_t a1)
{
  while (2)
  {
    unint64_t v1 = a1;
    uint64_t v2 = type metadata accessor for AST.Node();
    uint64_t v54 = *(void *)(v2 - 8);
    MEMORY[0x270FA5388](v2);
    uint64_t v4 = (char *)&v49 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
    uint64_t v5 = type metadata accessor for DSLTree._AST.AbsentFunction(0);
    MEMORY[0x270FA5388](v5 - 8);
    uint64_t v7 = (char *)&v49 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
    uint64_t v8 = (void *)MEMORY[0x263F8EE78];
    switch((v1 >> 59) & 0x1E | (v1 >> 2) & 1)
    {
      case 1uLL:
        uint64_t v21 = *(void *)((v1 & 0xFFFFFFFFFFFFFFBLL) + 0x10);
        int64_t v22 = *(void *)(v21 + 16);
        if (!v22) {
          return v8;
        }
        unint64_t v55 = (void *)MEMORY[0x263F8EE78];
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v22, 0);
        unint64_t v23 = 0;
        uint64_t v8 = v55;
        while (v23 < *(void *)(v21 + 16))
        {
          uint64_t v24 = *(void *)(v21 + 32 + 8 * v23);
          unint64_t v55 = v8;
          unint64_t v26 = v8[2];
          unint64_t v25 = v8[3];
          swift_retain();
          if (v26 >= v25 >> 1)
          {
            specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v25 > 1), v26 + 1, 1);
            uint64_t v8 = v55;
          }
          ++v23;
          _OWORD v8[2] = v26 + 1;
          v8[v26 + 4] = v24;
          if (v22 == v23) {
            return v8;
          }
        }
        goto LABEL_50;
      case 2uLL:
        uint64_t v15 = *(void *)((v1 & 0xFFFFFFFFFFFFFFBLL) + 0x30);
        goto LABEL_17;
      case 3uLL:
        uint64_t v19 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (DSLTree._AST.GroupKind, DSLTree.Node));
        uint64_t v17 = swift_projectBox();
        uint64_t v18 = *(int *)(v19 + 48);
        goto LABEL_15;
      case 4uLL:
        uint64_t v15 = *(void *)((v1 & 0xFFFFFFFFFFFFFFBLL) + 0x10);
        goto LABEL_17;
      case 5uLL:
        uint64_t v40 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (DSLTree._AST.ConditionKind, DSLTree.Node, DSLTree.Node));
        uint64_t v41 = swift_projectBox();
        uint64_t v42 = *(void *)(v41 + *(int *)(v40 + 48));
        uint64_t v43 = *(void *)(v41 + *(int *)(v40 + 64));
        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<DSLTree._Tree>);
        uint64_t v8 = (void *)swift_allocObject();
        *((_OWORD *)v8 + 1) = xmmword_209FAFD80;
        void v8[4] = v42;
        v8[5] = v43;
        swift_retain();
        goto LABEL_18;
      case 6uLL:
        uint64_t v16 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (DSLTree._AST.QuantificationAmount, DSLTree.QuantificationKind, DSLTree.Node));
        uint64_t v17 = swift_projectBox();
        uint64_t v18 = *(int *)(v16 + 64);
LABEL_15:
        uint64_t v15 = *(void *)(v17 + v18);
LABEL_17:
        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<DSLTree._Tree>);
        uint64_t v8 = (void *)swift_allocObject();
        *((_OWORD *)v8 + 1) = xmmword_209FAFD60;
        void v8[4] = v15;
LABEL_18:
        swift_retain();
        return v8;
      case 7uLL:
      case 8uLL:
      case 9uLL:
      case 0xAuLL:
      case 0xDuLL:
      case 0xEuLL:
      case 0xFuLL:
      case 0x10uLL:
        return v8;
      case 0xBuLL:
        uint64_t v27 = swift_projectBox();
        outlined init with copy of MEProgram(v27, (uint64_t)v7, type metadata accessor for DSLTree._AST.AbsentFunction);
        uint64_t v28 = AST.AbsentFunction.children.getter();
        outlined destroy of MEProgram((uint64_t)v7, type metadata accessor for DSLTree._AST.AbsentFunction);
        int64_t v29 = *(void *)(v28 + 16);
        if (v29)
        {
          unint64_t v55 = v8;
          specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v29, 0);
          unint64_t v30 = 0;
          uint64_t v50 = (void (**)(char *, char *, uint64_t))(v54 + 32);
          uint64_t v51 = v54 + 16;
          int v49 = (void (**)(char *, uint64_t))(v54 + 8);
          int64_t v52 = v29;
          uint64_t v53 = v2;
          do
          {
            if (v30 >= *(void *)(v28 + 16)) {
              goto LABEL_51;
            }
            uint64_t v31 = v28;
            (*(void (**)(char *, unint64_t, uint64_t))(v54 + 16))(v4, v28+ ((*(unsigned __int8 *)(v54 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v54 + 80))+ *(void *)(v54 + 72) * v30, v2);
            unint64_t v32 = convert #1 () in AST.Node.dslTreeNode.getter((uint64_t)v4);
            if (((v32 >> 59) & 0x1E | (v32 >> 2) & 1) == 0xC)
            {
              (*v49)(v4, v2);
            }
            else
            {
              uint64_t v33 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (DSLTree.Node, DSLTree._AST.ASTNode));
              uint64_t v34 = swift_allocBox();
              uint64_t v36 = (char *)v35 + *(int *)(v33 + 48);
              *uint64_t v35 = v32;
              (*v50)(v36, v4, v2);
              unint64_t v32 = v34 | 0x6000000000000000;
            }
            uint64_t v37 = v55;
            if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
            {
              specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v37[2] + 1, 1);
              uint64_t v37 = v55;
            }
            unint64_t v39 = v37[2];
            unint64_t v38 = v37[3];
            if (v39 >= v38 >> 1)
            {
              specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v38 > 1), v39 + 1, 1);
              uint64_t v37 = v55;
            }
            ++v30;
            v37[2] = v39 + 1;
            v37[v39 + 4] = v32;
            uint64_t v2 = v53;
            uint64_t v28 = v31;
          }
          while (v52 != v30);
          swift_bridgeObjectRelease();
          int64_t v44 = v37[2];
          if (v44) {
            goto LABEL_41;
          }
LABEL_48:
          swift_bridgeObjectRelease();
          return (void *)MEMORY[0x263F8EE78];
        }
        swift_bridgeObjectRelease();
        uint64_t v37 = (void *)MEMORY[0x263F8EE78];
        int64_t v44 = *(void *)(MEMORY[0x263F8EE78] + 16);
        if (!v44) {
          goto LABEL_48;
        }
LABEL_41:
        unint64_t v55 = v8;
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v44, 0);
        unint64_t v45 = 0;
        uint64_t v8 = v55;
        do
        {
          if (v45 >= v37[2]) {
            goto LABEL_52;
          }
          uint64_t v46 = v37[v45 + 4];
          unint64_t v55 = v8;
          unint64_t v48 = v8[2];
          unint64_t v47 = v8[3];
          swift_retain();
          if (v48 >= v47 >> 1)
          {
            specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v47 > 1), v48 + 1, 1);
            uint64_t v8 = v55;
          }
          ++v45;
          _OWORD v8[2] = v48 + 1;
          v8[v48 + 4] = v46;
        }
        while (v44 != v45);
        swift_bridgeObjectRelease();
        return v8;
      case 0xCuLL:
        a1 = *(void *)swift_projectBox();
        continue;
      default:
        uint64_t v9 = *(void *)(v1 + 16);
        int64_t v10 = *(void *)(v9 + 16);
        if (!v10) {
          return v8;
        }
        unint64_t v55 = (void *)MEMORY[0x263F8EE78];
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v10, 0);
        unint64_t v11 = 0;
        uint64_t v8 = v55;
        do
        {
          if (v11 >= *(void *)(v9 + 16))
          {
            __break(1u);
LABEL_50:
            __break(1u);
LABEL_51:
            __break(1u);
LABEL_52:
            __break(1u);
            swift_unexpectedError();
            __break(1u);
            JUMPOUT(0x209F761E8);
          }
          uint64_t v12 = *(void *)(v9 + 32 + 8 * v11);
          unint64_t v55 = v8;
          unint64_t v14 = v8[2];
          unint64_t v13 = v8[3];
          swift_retain();
          if (v14 >= v13 >> 1)
          {
            specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v13 > 1), v14 + 1, 1);
            uint64_t v8 = v55;
          }
          ++v11;
          _OWORD v8[2] = v14 + 1;
          v8[v14 + 4] = v12;
        }
        while (v10 != v11);
        return v8;
    }
  }
}

void *protocol witness for _TreeNode.children.getter in conformance DSLTree._Tree()
{
  return DSLTree._Tree.children.getter(*v0);
}

uint64_t static DSLTree._AST.GroupKind.atomicNonCapturing.getter@<X0>(uint64_t a1@<X8>)
{
  return static DSLTree._AST.GroupKind.atomicNonCapturing.getter(MEMORY[0x263F8FCA0], MEMORY[0x263F8FCE0], a1);
}

uint64_t static DSLTree._AST.GroupKind.lookahead.getter@<X0>(uint64_t a1@<X8>)
{
  return static DSLTree._AST.GroupKind.atomicNonCapturing.getter(MEMORY[0x263F8FCD0], MEMORY[0x263F8FCE0], a1);
}

uint64_t static DSLTree._AST.GroupKind.negativeLookahead.getter@<X0>(uint64_t a1@<X8>)
{
  return static DSLTree._AST.GroupKind.atomicNonCapturing.getter(MEMORY[0x263F8FC98], MEMORY[0x263F8FCE0], a1);
}

uint64_t static DSLTree._AST.QuantificationKind.eager.getter@<X0>(uint64_t a1@<X8>)
{
  return static DSLTree._AST.GroupKind.atomicNonCapturing.getter(MEMORY[0x263F8F950], MEMORY[0x263F8F960], a1);
}

uint64_t static DSLTree._AST.QuantificationKind.reluctant.getter@<X0>(uint64_t a1@<X8>)
{
  return static DSLTree._AST.GroupKind.atomicNonCapturing.getter(MEMORY[0x263F8F958], MEMORY[0x263F8F960], a1);
}

uint64_t static DSLTree._AST.QuantificationKind.possessive.getter@<X0>(uint64_t a1@<X8>)
{
  return static DSLTree._AST.GroupKind.atomicNonCapturing.getter(MEMORY[0x263F8F948], MEMORY[0x263F8F960], a1);
}

uint64_t static DSLTree._AST.QuantificationAmount.zeroOrMore.getter@<X0>(uint64_t a1@<X8>)
{
  return static DSLTree._AST.GroupKind.atomicNonCapturing.getter(MEMORY[0x263F8F978], MEMORY[0x263F8F9B0], a1);
}

uint64_t static DSLTree._AST.QuantificationAmount.oneOrMore.getter@<X0>(uint64_t a1@<X8>)
{
  return static DSLTree._AST.GroupKind.atomicNonCapturing.getter(MEMORY[0x263F8F9A0], MEMORY[0x263F8F9B0], a1);
}

uint64_t static DSLTree._AST.QuantificationAmount.zeroOrOne.getter@<X0>(uint64_t a1@<X8>)
{
  return static DSLTree._AST.GroupKind.atomicNonCapturing.getter(MEMORY[0x263F8F9A8], MEMORY[0x263F8F9B0], a1);
}

uint64_t static DSLTree._AST.GroupKind.atomicNonCapturing.getter@<X0>(unsigned int *a1@<X0>, uint64_t (*a2)(void)@<X1>, uint64_t a3@<X8>)
{
  uint64_t v4 = *a1;
  uint64_t v5 = a2(0);
  uint64_t v6 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 104);

  return v6(a3, v4, v5);
}

uint64_t static DSLTree._AST.QuantificationAmount.exactly(_:)@<X0>(uint64_t a1@<X8>)
{
  return static DSLTree._AST.QuantificationAmount.exactly(_:)(MEMORY[0x263F8F990], a1);
}

uint64_t static DSLTree._AST.QuantificationAmount.nOrMore(_:)@<X0>(uint64_t a1@<X8>)
{
  return static DSLTree._AST.QuantificationAmount.exactly(_:)(MEMORY[0x263F8F998], a1);
}

uint64_t static DSLTree._AST.QuantificationAmount.upToN(_:)@<X0>(uint64_t a1@<X8>)
{
  return static DSLTree._AST.QuantificationAmount.exactly(_:)(MEMORY[0x263F8F988], a1);
}

uint64_t static DSLTree._AST.QuantificationAmount.exactly(_:)@<X0>(unsigned int *a1@<X1>, uint64_t a2@<X8>)
{
  uint64_t v4 = type metadata accessor for Source.Location();
  MEMORY[0x270FA5388](v4 - 8);
  static Source.Location.fake.getter();
  AST.Atom.Number.init(_:at:)();
  uint64_t v5 = *a1;
  uint64_t v6 = type metadata accessor for AST.Quantification.Amount();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 104))(a2, v5, v6);
}

uint64_t static DSLTree._AST.QuantificationAmount.range(_:_:)@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2 = type metadata accessor for Source.Location();
  MEMORY[0x270FA5388](v2 - 8);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (AST.Atom.Number, AST.Atom.Number));
  static Source.Location.fake.getter();
  AST.Atom.Number.init(_:at:)();
  static Source.Location.fake.getter();
  AST.Atom.Number.init(_:at:)();
  uint64_t v3 = *MEMORY[0x263F8F980];
  uint64_t v4 = type metadata accessor for AST.Quantification.Amount();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 104))(a1, v3, v4);
}

uint64_t RegexRepetitionBehavior.dslTreeKind.getter@<X0>(uint64_t a1@<X8>)
{
  if (*v1)
  {
    if (*v1 == 1) {
      uint64_t v3 = (unsigned int *)MEMORY[0x263F8F958];
    }
    else {
      uint64_t v3 = (unsigned int *)MEMORY[0x263F8F948];
    }
  }
  else
  {
    uint64_t v3 = (unsigned int *)MEMORY[0x263F8F950];
  }
  uint64_t v4 = *v3;
  uint64_t v5 = type metadata accessor for AST.Quantification.Kind();
  uint64_t v6 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 104);

  return v6(a1, v4, v5);
}

uint64_t Regex.Match.range.getter()
{
  return *(void *)(v0 + 24);
}

uint64_t Regex.Match.output.getter(uint64_t a1)
{
  uint64_t v2 = v1[1];
  uint64_t v3 = v1[2];
  if (*(ValueMetadata **)(a1 + 16) == &type metadata for AnyRegexOutput)
  {
    *(void *)&long long v6 = *v1;
    *((void *)&v6 + 1) = v2;
    uint64_t v7 = v3;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
  }
  else
  {
    specialized Sequence<>.existentialOutput(from:)(*v1, v2, *v1, v2, v3, (uint64_t)&v6);
    outlined init with take of Any(&v6, &v5);
  }
  return swift_dynamicCast();
}

uint64_t Regex.Match.subscript.getter@<X0>(void *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v4 = a2;
  uint64_t v32 = *a1;
  uint64_t v7 = *(void *)(a2 + 16);
  uint64_t v8 = *(void *)(v7 - 8);
  MEMORY[0x270FA5388](a1);
  uint64_t v35 = (char *)&v27 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = *v3;
  uint64_t v11 = v3[1];
  uint64_t v13 = v3[2];
  uint64_t v12 = v3[3];
  uint64_t v33 = v3[4];
  uint64_t v34 = v12;
  int64_t v14 = *(void *)(v13 + 16);
  uint64_t v37 = v10;
  uint64_t v38 = v13;
  if (v14)
  {
    uint64_t v27 = v4;
    uint64_t v28 = v8;
    int64_t v29 = a1;
    uint64_t v30 = v7;
    uint64_t v31 = a3;
    uint64_t v49 = MEMORY[0x263F8EE78];
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    int64_t v36 = v14;
    uint64_t result = (uint64_t)specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v14, 0);
    unint64_t v16 = 0;
    uint64_t v17 = v13 + 32;
    while (1)
    {
      if (v16 >= *(void *)(v38 + 16))
      {
        __break(1u);
LABEL_25:
        __break(1u);
        goto LABEL_26;
      }
      outlined init with copy of AnyRegexOutput.ElementRepresentation(v17, (uint64_t)&v45);
      uint64_t v47 = v37;
      uint64_t v48 = v11;
      outlined init with copy of (range: Range<String.Index>, value: Any?)?((uint64_t)v46, (uint64_t)v43, &demangling cache variable for type metadata for (range: Range<String.Index>, value: Any?)?);
      if (v44[3] == 1) {
        break;
      }
      outlined init with copy of Any?((uint64_t)v44, (uint64_t)&v41);
      if (!v42)
      {
        swift_bridgeObjectRetain();
        outlined destroy of Any?((uint64_t)v44);
        goto LABEL_9;
      }
      outlined init with take of Any(&v41, &v39);
      __swift_project_boxed_opaque_existential_0(&v39, v40);
      uint64_t DynamicType = swift_getDynamicType();
      swift_bridgeObjectRetain();
      __swift_destroy_boxed_opaque_existential_0((uint64_t)&v39);
      outlined destroy of Any?((uint64_t)v44);
LABEL_10:
      outlined init with copy of AnyRegexOutput.ElementRepresentation((uint64_t)&v45, (uint64_t)v43);
      outlined destroy of AnyRegexOutput.Element((uint64_t)&v45);
      outlined destroy of AnyRegexOutput.ElementRepresentation((uint64_t)v43);
      if (!DynamicType) {
        uint64_t DynamicType = static TypeConstruction.optionalType<A>(of:depth:)();
      }
      uint64_t v19 = v49;
      uint64_t result = swift_isUniquelyReferenced_nonNull_native();
      if ((result & 1) == 0)
      {
        uint64_t result = (uint64_t)specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(void *)(v19 + 16) + 1, 1);
        uint64_t v19 = v49;
      }
      unint64_t v21 = *(void *)(v19 + 16);
      unint64_t v20 = *(void *)(v19 + 24);
      if (v21 >= v20 >> 1)
      {
        uint64_t result = (uint64_t)specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v20 > 1), v21 + 1, 1);
        uint64_t v19 = v49;
      }
      ++v16;
      *(void *)(v19 + 16) = v21 + 1;
      *(void *)(v19 + 8 * v21 + 32) = DynamicType;
      v17 += 88;
      if (v36 == v16)
      {
        uint64_t v7 = v30;
        uint64_t v8 = v28;
        uint64_t v4 = v27;
        goto LABEL_19;
      }
    }
    swift_bridgeObjectRetain();
    outlined destroy of (range: Range<String.Index>, value: Any?)?((uint64_t)v43, &demangling cache variable for type metadata for (range: Range<String.Index>, value: Any?)?);
LABEL_9:
    uint64_t DynamicType = 0;
    goto LABEL_10;
  }
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  uint64_t v19 = MEMORY[0x263F8EE78];
LABEL_19:
  uint64_t v45 = v19;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [Any.Type]);
  lazy protocol witness table accessor for type [Any.Type] and conformance [A](&lazy protocol witness table cache variable for type [Any.Type] and conformance [A], &demangling cache variable for type metadata for [Any.Type]);
  unint64_t v22 = static MemoryLayout.tupleElementIndex<A>(of:elementTypes:)();
  char v24 = v23;
  uint64_t result = swift_bridgeObjectRelease();
  if (v24)
  {
    uint64_t v25 = v38;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    uint64_t v45 = v37;
    v46[0] = v11;
    unint64_t v26 = v35;
    v46[1] = v25;
    v46[2] = v34;
    v46[3] = v33;
    Regex.Match.output.getter(v4);
    swift_getAtKeyPath();
    return (*(uint64_t (**)(char *, uint64_t))(v8 + 8))(v26, v7);
  }
  else
  {
    if ((v22 & 0x8000000000000000) != 0) {
      goto LABEL_25;
    }
    if (v22 >= *(void *)(v38 + 16))
    {
LABEL_26:
      __break(1u);
    }
    else
    {
      outlined init with copy of AnyRegexOutput.ElementRepresentation(v38 + 88 * v22 + 32, (uint64_t)&v45);
      swift_bridgeObjectRelease();
      uint64_t v47 = v37;
      uint64_t v48 = v11;
      constructExistentialOutputComponent(from:component:optionalCount:)((uint64_t)v46, v45, v43);
      outlined destroy of AnyRegexOutput.Element((uint64_t)&v45);
      swift_getCanonicalSpecializedMetadata();
      return swift_dynamicCast();
    }
  }
  return result;
}

uint64_t Regex.Match.subscript.getter(uint64_t a1, uint64_t a2)
{
  return Regex.Match.output.getter(a2);
}

uint64_t Regex.Match.subscript.getter(uint64_t *a1)
{
  uint64_t v2 = *a1;
  uint64_t v4 = *v1;
  uint64_t v3 = v1[1];
  uint64_t v5 = v1[2];
  unint64_t v6 = *(void *)(v5 + 16);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  if (v6)
  {
    unint64_t v7 = 0;
    uint64_t v8 = v5 + 32;
    while (v7 < v6)
    {
      outlined init with copy of AnyRegexOutput.ElementRepresentation(v8, (uint64_t)v18);
      *((void *)&v19 + 1) = v4;
      uint64_t v20 = v3;
      long long v15 = v18[4];
      long long v16 = v19;
      uint64_t v17 = v3;
      long long v11 = v18[0];
      long long v12 = v18[1];
      long long v13 = v18[2];
      long long v14 = v18[3];
      if ((v19 & 1) == 0 && *((void *)&v15 + 1) == v2)
      {
        swift_bridgeObjectRelease();
        v21[4] = v15;
        v21[5] = v16;
        uint64_t v22 = v17;
        v21[0] = v11;
        v21[1] = v12;
        uint64_t v21[2] = v13;
        v21[3] = v14;
        uint64_t v9 = v11;
        swift_bridgeObjectRetain();
        constructExistentialOutputComponent(from:component:optionalCount:)((uint64_t)v21 + 8, v9, (uint64_t *)v18);
        swift_bridgeObjectRelease();
        outlined destroy of AnyRegexOutput.Element((uint64_t)v21);
        return swift_dynamicCast();
      }
      ++v7;
      swift_bridgeObjectRetain();
      outlined destroy of AnyRegexOutput.Element((uint64_t)&v11);
      unint64_t v6 = *(void *)(v5 + 16);
      v8 += 88;
      if (v7 == v6) {
        goto LABEL_9;
      }
    }
    __break(1u);
  }
LABEL_9:
  swift_bridgeObjectRelease();
  uint64_t result = swift_bridgeObjectRelease();
  __break(1u);
  return result;
}

uint64_t Regex.wholeMatch(in:)@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, uint64_t a3@<X8>)
{
  return Regex.wholeMatch(in:)(a1, a2, 0, a3);
}

uint64_t Regex._match(_:in:mode:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unint64_t a3@<X2>, uint64_t a4@<X3>, char a5@<W4>, uint64_t a6@<X8>)
{
  char v11 = a5 & 1;
  uint64_t v12 = type metadata accessor for Executor(0);
  MEMORY[0x270FA5388](v12 - 8);
  long long v14 = (char *)&v16 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  swift_retain();
  Regex.Program.loweredProgram.getter((uint64_t)v14);
  swift_release();
  Executor.match<A>(_:in:_:)(a1, a2, a3, a4, v11, a6);
  return outlined destroy of MEProgram((uint64_t)v14, type metadata accessor for Executor);
}

uint64_t Regex.prefixMatch(in:)@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, uint64_t a3@<X8>)
{
  return Regex.wholeMatch(in:)(a1, a2, 1, a3);
}

uint64_t Regex.wholeMatch(in:)@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, char a3@<W3>, uint64_t a4@<X8>)
{
  uint64_t v4 = HIBYTE(a2) & 0xF;
  if ((a2 & 0x2000000000000000) == 0) {
    uint64_t v4 = a1;
  }
  uint64_t v5 = 7;
  if (((a2 >> 60) & ((a1 & 0x800000000000000) == 0)) != 0) {
    uint64_t v5 = 11;
  }
  return Regex._match(_:in:mode:)(a1, a2, 0xFuLL, v5 | (v4 << 16), a3, a4);
}

uint64_t Regex.firstMatch(in:)@<X0>(unint64_t a1@<X0>, unint64_t a2@<X1>, _OWORD *a3@<X8>)
{
  uint64_t v3 = HIBYTE(a2) & 0xF;
  if ((a2 & 0x2000000000000000) == 0) {
    uint64_t v3 = a1;
  }
  uint64_t v4 = 7;
  if (((a2 >> 60) & ((a1 & 0x800000000000000) == 0)) != 0) {
    uint64_t v4 = 11;
  }
  return Regex._firstMatch(_:in:)(a1, a2, 0xFuLL, v4 | (v3 << 16), a3);
}

uint64_t Regex._firstMatch(_:in:)@<X0>(unint64_t a1@<X0>, uint64_t a2@<X1>, unint64_t a3@<X2>, uint64_t a4@<X3>, _OWORD *a5@<X8>)
{
  unint64_t v21 = a5;
  uint64_t v11 = type metadata accessor for MEProgram(0);
  uint64_t v12 = v11 - 8;
  MEMORY[0x270FA5388](v11);
  long long v14 = (char *)&v20 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v15 = *v5;
  swift_retain();
  Regex.Program.loweredProgram.getter((uint64_t)v14);
  swift_release();
  LODWORD(v12) = v14[*(int *)(v12 + 76)];
  outlined destroy of MEProgram((uint64_t)v14, type metadata accessor for MEProgram);
  if (v12 == 1)
  {
    uint64_t v24 = v15;
    uint64_t result = Regex._match(_:in:mode:)(a1, a2, a3, a4, 1, (uint64_t)v22);
    if (v6) {
      return result;
    }
    goto LABEL_3;
  }
  uint64_t v24 = v15;
  uint64_t result = Regex._firstMatch(_:subjectBounds:searchBounds:)(a1, a2, a3, a4, a3, a4, (uint64_t)v22);
  if (!v6)
  {
LABEL_3:
    long long v17 = v22[1];
    uint64_t v18 = v23;
    long long v19 = v21;
    *unint64_t v21 = v22[0];
    v19[1] = v17;
    *((void *)v19 + 4) = v18;
  }
  return result;
}

unint64_t Regex.wholeMatch(in:)@<X0>(unint64_t a1@<X0>, unint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  return Regex.prefixMatch(in:)(a1, a2, a3, a4, 0, a5);
}

unint64_t Regex.prefixMatch(in:)@<X0>(unint64_t result@<X0>, unint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, char a5@<W5>, uint64_t a6@<X8>)
{
  if (a2 >> 14 >= result >> 14) {
    return Regex._match(_:in:mode:)(a3, a4, result, a2, a5, a6);
  }
  __break(1u);
  return result;
}

uint64_t BidirectionalCollection<>.wholeMatch<A>(of:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return BidirectionalCollection<>.wholeMatch<A>(of:)(a1, a2, a3, a4, a5, (uint64_t)implicit closure #1 in BidirectionalCollection<>.contains<A>(_:), (void (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))Regex.wholeMatch(in:));
}

uint64_t BidirectionalCollection<>.prefixMatch<A>(of:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return BidirectionalCollection<>.wholeMatch<A>(of:)(a1, a2, a3, a4, a5, (uint64_t)implicit closure #1 in BidirectionalCollection<>.contains<A>(_:), (void (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))Regex.prefixMatch(in:));
}

uint64_t BidirectionalCollection<>.wholeMatch<A>(of:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, void (*a7)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))
{
  (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t))(a5 + 16))(&v14, a3, a5);
  Collection.subscript.getter();
  swift_getAssociatedTypeWitness();
  uint64_t v8 = type metadata accessor for Regex();
  a7(v10, v11, v12, v13, v8);
  swift_bridgeObjectRelease();
  return swift_release();
}

uint64_t Regex.ignoresCase(_:)@<X0>(int a1@<W0>, uint64_t a2@<X1>, void *a3@<X8>)
{
  return Regex.ignoresCase(_:)(a1, a2, MEMORY[0x263F8F8D8], a3);
}

void *RegexComponent.wrapInOption(_:addingIf:)@<X0>(uint64_t a1@<X0>, int a2@<W1>, uint64_t a3@<X2>, uint64_t a4@<X3>, void *a5@<X8>)
{
  uint64_t v28 = a3;
  int v27 = a2;
  uint64_t v26 = a1;
  int64_t v29 = a5;
  uint64_t v6 = type metadata accessor for Source.Location();
  MEMORY[0x270FA5388](v6 - 8);
  uint64_t v7 = type metadata accessor for AST.MatchingOption.Kind();
  uint64_t v8 = *(void *)(v7 - 8);
  MEMORY[0x270FA5388](v7);
  uint64_t v10 = (char *)&v25 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = type metadata accessor for AST.MatchingOptionSequence();
  uint64_t v12 = *(void *)(v11 - 8);
  MEMORY[0x270FA5388](v11);
  uint64_t v14 = (char *)&v25 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<AST.MatchingOption>);
  type metadata accessor for AST.MatchingOption();
  *(_OWORD *)(swift_allocObject() + 16) = xmmword_209FAFD60;
  (*(void (**)(char *, uint64_t, uint64_t))(v8 + 16))(v10, v26, v7);
  static Source.Location.fake.getter();
  AST.MatchingOption.init(_:location:)();
  if (v27) {
    AST.MatchingOptionSequence.init(adding:)();
  }
  else {
    AST.MatchingOptionSequence.init(removing:)();
  }
  uint64_t v15 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (DSLTree._AST.GroupKind, DSLTree.Node));
  uint64_t v16 = swift_allocBox();
  uint64_t v18 = v17;
  uint64_t v19 = *(int *)(v15 + 48);
  (*(void (**)(uint64_t, char *, uint64_t))(v12 + 32))(v17, v14, v11);
  uint64_t v20 = *MEMORY[0x263F8FCC0];
  uint64_t v21 = type metadata accessor for AST.Group.Kind();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v21 - 8) + 104))(v18, v20, v21);
  (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t))(a4 + 16))(&v30, v28, a4);
  uint64_t v22 = v30;
  swift_getAssociatedTypeWitness();
  uint64_t v23 = *(void *)(v22 + 24);
  swift_retain();
  swift_release();
  *(void *)(v18 + v19) = v23;
  type metadata accessor for Regex.Program();
  uint64_t v31 = v16 | 0x1000000000000004;
  uint64_t result = Regex.Program.__allocating_init(tree:)(&v31);
  *int64_t v29 = result;
  return result;
}

uint64_t Regex.asciiOnlyWordCharacters(_:)@<X0>(int a1@<W0>, uint64_t a2@<X1>, void *a3@<X8>)
{
  return Regex.ignoresCase(_:)(a1, a2, MEMORY[0x263F8F8B0], a3);
}

uint64_t Regex.asciiOnlyDigits(_:)@<X0>(int a1@<W0>, uint64_t a2@<X1>, void *a3@<X8>)
{
  return Regex.ignoresCase(_:)(a1, a2, MEMORY[0x263F8F8C8], a3);
}

uint64_t Regex.asciiOnlyWhitespace(_:)@<X0>(int a1@<W0>, uint64_t a2@<X1>, void *a3@<X8>)
{
  return Regex.ignoresCase(_:)(a1, a2, MEMORY[0x263F8F8D0], a3);
}

uint64_t Regex.asciiOnlyCharacterClasses(_:)@<X0>(int a1@<W0>, uint64_t a2@<X1>, void *a3@<X8>)
{
  return Regex.ignoresCase(_:)(a1, a2, MEMORY[0x263F8F8F8], a3);
}

uint64_t Regex.wordBoundaryKind(_:)@<X0>(unsigned __int8 *a1@<X0>, uint64_t a2@<X1>, void *a3@<X8>)
{
  uint64_t v7 = type metadata accessor for AST.MatchingOption.Kind();
  uint64_t v8 = *(void *)(v7 - 8);
  MEMORY[0x270FA5388](v7);
  uint64_t v10 = (char *)v13 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  LODWORD(a1) = *a1;
  v13[1] = *v3;
  (*(void (**)(char *, void, uint64_t))(v8 + 104))(v10, *MEMORY[0x263F8F910], v7);
  uint64_t WitnessTable = swift_getWitnessTable();
  RegexComponent.wrapInOption(_:addingIf:)((uint64_t)v10, (int)a1, a2, WitnessTable, a3);
  return (*(uint64_t (**)(char *, uint64_t))(v8 + 8))(v10, v7);
}

uint64_t Regex.dotMatchesNewlines(_:)@<X0>(int a1@<W0>, uint64_t a2@<X1>, void *a3@<X8>)
{
  return Regex.ignoresCase(_:)(a1, a2, MEMORY[0x263F8F8A8], a3);
}

uint64_t Regex.anchorsMatchLineEndings(_:)@<X0>(int a1@<W0>, uint64_t a2@<X1>, void *a3@<X8>)
{
  return Regex.ignoresCase(_:)(a1, a2, MEMORY[0x263F8F940], a3);
}

uint64_t Regex.ignoresCase(_:)@<X0>(int a1@<W0>, uint64_t a2@<X1>, unsigned int *a3@<X2>, void *a4@<X8>)
{
  uint64_t v9 = type metadata accessor for AST.MatchingOption.Kind();
  uint64_t v10 = *(void *)(v9 - 8);
  MEMORY[0x270FA5388](v9);
  uint64_t v12 = (char *)v15 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15[1] = *v4;
  (*(void (**)(char *, void, uint64_t))(v10 + 104))(v12, *a3, v9);
  uint64_t WitnessTable = swift_getWitnessTable();
  RegexComponent.wrapInOption(_:addingIf:)((uint64_t)v12, a1, a2, WitnessTable, a4);
  return (*(uint64_t (**)(char *, uint64_t))(v10 + 8))(v12, v9);
}

uint64_t Regex.repetitionBehavior(_:)@<X0>(unsigned __int8 *a1@<X0>, uint64_t a2@<X1>, void *a3@<X8>)
{
  uint64_t v7 = type metadata accessor for AST.MatchingOption.Kind();
  uint64_t v8 = *(void *)(v7 - 8);
  uint64_t v9 = MEMORY[0x270FA5388](v7);
  uint64_t v11 = (char *)v18 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v9);
  uint64_t v13 = (char *)v18 - v12;
  int v14 = *a1;
  v18[1] = *v3;
  if (v14 == 2)
  {
    (*(void (**)(char *, void, uint64_t))(v8 + 104))((char *)v18 - v12, *MEMORY[0x263F8F900], v7);
    uint64_t WitnessTable = swift_getWitnessTable();
    RegexComponent.wrapInOption(_:addingIf:)((uint64_t)v13, 1, a2, WitnessTable, a3);
    return (*(uint64_t (**)(char *, uint64_t))(v8 + 8))(v13, v7);
  }
  else
  {
    (*(void (**)(char *, void, uint64_t))(v8 + 104))(v11, *MEMORY[0x263F8F8F0], v7);
    uint64_t v17 = swift_getWitnessTable();
    RegexComponent.wrapInOption(_:addingIf:)((uint64_t)v11, v14 == 1, a2, v17, a3);
    return (*(uint64_t (**)(char *, uint64_t))(v8 + 8))(v11, v7);
  }
}

void static RegexRepetitionBehavior.possessive.getter(unsigned char *a1@<X8>)
{
  *a1 = 2;
}

BOOL static RegexRepetitionBehavior.== infix(_:_:)(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return *a1 == *a2;
}

void static RegexRepetitionBehavior.reluctant.getter(unsigned char *a1@<X8>)
{
  *a1 = 1;
}

uint64_t Regex.matchingSemantics(_:)@<X0>(char *a1@<X0>, uint64_t a2@<X1>, void *a3@<X8>)
{
  uint64_t v7 = type metadata accessor for AST.MatchingOption.Kind();
  MEMORY[0x270FA5388](v7);
  uint64_t v10 = (char *)v16 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  char v11 = *a1;
  uint64_t v12 = (uint64_t (**)(char *, uint64_t))(v8 + 8);
  v16[1] = *v3;
  if (v11) {
    uint64_t v13 = (unsigned int *)MEMORY[0x263F8F918];
  }
  else {
    uint64_t v13 = (unsigned int *)MEMORY[0x263F8F930];
  }
  (*(void (**)(char *, void, uint64_t))(v8 + 104))(v10, *v13, v7);
  uint64_t WitnessTable = swift_getWitnessTable();
  RegexComponent.wrapInOption(_:addingIf:)((uint64_t)v10, 1, a2, WitnessTable, a3);
  return (*v12)(v10, v7);
}

uint64_t Regex._nsreCompatibility.getter@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  uint64_t v5 = type metadata accessor for AST.MatchingOption.Kind();
  uint64_t v6 = *(void *)(v5 - 8);
  MEMORY[0x270FA5388](v5);
  uint64_t v8 = (char *)&v13 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = *v2;
  uint64_t v9 = *(void (**)(char *, void, uint64_t))(v6 + 104);
  v9(v8, *MEMORY[0x263F8F8E8], v5);
  uint64_t WitnessTable = swift_getWitnessTable();
  RegexComponent.wrapInOption(_:addingIf:)((uint64_t)v8, 1, a1, WitnessTable, &v14);
  char v11 = *(void (**)(char *, uint64_t))(v6 + 8);
  v11(v8, v5);
  uint64_t v13 = v14;
  v9(v8, *MEMORY[0x263F8F918], v5);
  RegexComponent.wrapInOption(_:addingIf:)((uint64_t)v8, 1, a1, WitnessTable, a2);
  v11(v8, v5);
  return swift_release();
}

void static RegexSemanticLevel.graphemeCluster.getter(unsigned char *a1@<X8>)
{
  *a1 = 0;
}

void static RegexSemanticLevel.unicodeScalar.getter(unsigned char *a1@<X8>)
{
  *a1 = 1;
}

void RegexSemanticLevel.hash(into:)()
{
  Hasher._combine(_:)(*v0);
}

BOOL static RegexSemanticLevel.== infix(_:_:)(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return ((*a1 ^ *a2) & 1) == 0;
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance MatchMode()
{
  Swift::UInt v1 = *v0;
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v1);
  return Hasher._finalize()();
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance MatchMode()
{
  Swift::UInt v1 = *v0;
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v1);
  return Hasher._finalize()();
}

void RegexRepetitionBehavior.hash(into:)()
{
  Hasher._combine(_:)(*v0);
}

Swift::Int RegexRepetitionBehavior.hashValue.getter()
{
  Swift::UInt v1 = *v0;
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v1);
  return Hasher._finalize()();
}

void static RegexRepetitionBehavior.eager.getter(unsigned char *a1@<X8>)
{
  *a1 = 0;
}

uint64_t matchesWord #1 (at:) in Processor.atSimpleBoundary(_:_:)(unint64_t a1, char a2, unint64_t *a3, char a4)
{
  uint64_t v8 = type metadata accessor for Unicode.Scalar.Properties();
  uint64_t v9 = *(void *)(v8 - 8);
  MEMORY[0x270FA5388](v8);
  char v11 = (char *)v21 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  unint64_t v12 = *a3;
  if (a2)
  {
    unint64_t v15 = a3[1];
    _StringGuts.validateScalarIndex(_:)(a1, v12, v15);
    if ((v15 & 0x1000000000000000) != 0)
    {
      unsigned int v17 = _StringGuts.foreignErrorCorrectedScalar(startingAt:)();
    }
    else
    {
      if ((v15 & 0x2000000000000000) != 0)
      {
        v21[0] = v12;
        v21[1] = v15 & 0xFFFFFFFFFFFFFFLL;
      }
      else if ((v12 & 0x1000000000000000) == 0)
      {
        _StringObject.sharedUTF8.getter();
      }
      unsigned int v17 = _decodeScalar(_:startingAt:)();
    }
    unsigned int v18 = v17;
    Unicode.Scalar.properties.getter();
    char v19 = Unicode.Scalar.Properties.isAlphabetic.getter();
    (*(void (**)(char *, uint64_t))(v9 + 8))(v11, v8);
    if ((v19 & 1) != 0 || v18 == 95)
    {
      BOOL v14 = v18 < 0x80;
      goto LABEL_15;
    }
    char v16 = 0;
  }
  else
  {
    String.subscript.getter();
    if (Character.isWordCharacter.getter())
    {
      __int16 v13 = Character.asciiValue.getter();
      swift_bridgeObjectRelease();
      BOOL v14 = (v13 & 0x100) == 0;
LABEL_15:
      char v16 = v14 | a4 ^ 1;
      return v16 & 1;
    }
    swift_bridgeObjectRelease();
    char v16 = 0;
  }
  return v16 & 1;
}

uint64_t _RegexFactory.ignoreCapturesInTypedOutput<A>(_:)@<X0>(uint64_t a1@<X1>, uint64_t a2@<X2>, uint64_t *a3@<X8>)
{
  void (*v6)(uint64_t *__return_ptr, uint64_t, uint64_t);
  unint64_t v7;
  char v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t result;
  uint64_t v13;
  uint64_t v14;

  uint64_t v6 = *(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t))(a2 + 16);
  v6(&v14, a1, a2);
  uint64_t v7 = *(void *)(v14 + 24);
  swift_retain();
  swift_release();
  uint64_t v8 = DSLTree.Node.hasChildNodes.getter(v7);
  swift_release();
  if (v8)
  {
    uint64_t v9 = swift_allocObject();
    v6(&v14, a1, a2);
    uint64_t v10 = *(void *)(v14 + 24);
    swift_retain();
    swift_release();
    *(void *)(v9 + 16) = v10;
    char v11 = v9 | 0x2000000000000000;
  }
  else
  {
    v6(&v14, a1, a2);
    char v11 = *(void *)(v14 + 24);
    swift_retain();
    swift_release();
  }
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Regex<Substring>.Program);
  uint64_t result = swift_allocObject();
  __int16 v13 = result;
  *(void *)(result + 16) = 0;
  if (one-time initialization token for default != -1) {
    uint64_t result = swift_once();
  }
  *(void *)(v13 + 24) = v11;
  *(void *)(v13 + 32) = 0;
  *a3 = v13;
  return result;
}

void *_RegexFactory.accumulate<A, B, C>(_:_:)@<X0>(uint64_t a1@<X3>, uint64_t a2@<X4>, uint64_t a3@<X5>, uint64_t a4@<X6>, void *a5@<X8>)
{
  (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t))(a3 + 16))(&v13, a1, a3);
  unint64_t v8 = *(void *)(v13 + 24);
  swift_retain();
  swift_release();
  (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t))(a4 + 16))(&v12, a2, a4);
  uint64_t v9 = *(void *)(v12 + 24);
  swift_retain();
  swift_release();
  uint64_t v10 = DSLTree.Node.appending(_:)(v9, v8);
  swift_release();
  swift_release();
  type metadata accessor for Regex.Program();
  uint64_t v13 = v10;
  uint64_t result = Regex.Program.__allocating_init(tree:)(&v13);
  *a5 = result;
  return result;
}

void *_RegexFactory.accumulateAlternation<A, B, C>(_:_:)@<X0>(uint64_t a1@<X3>, uint64_t a2@<X4>, uint64_t a3@<X5>, uint64_t a4@<X6>, void *a5@<X8>)
{
  (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t))(a3 + 16))(&v13, a1, a3);
  unint64_t v8 = *(void *)(v13 + 24);
  swift_retain();
  swift_release();
  (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t))(a4 + 16))(&v12, a2, a4);
  uint64_t v9 = *(void *)(v12 + 24);
  swift_retain();
  swift_release();
  uint64_t v10 = DSLTree.Node.appendingAlternationCase(_:)(v9, v8);
  swift_release();
  swift_release();
  type metadata accessor for Regex.Program();
  uint64_t v13 = v10;
  uint64_t result = Regex.Program.__allocating_init(tree:)(&v13);
  *a5 = result;
  return result;
}

void *_RegexFactory.assertion<A>(_:)@<X0>(char *a1@<X0>, void *a2@<X8>)
{
  return _RegexFactory.assertion<A>(_:)(a1, a2);
}

{
  char v3;
  uint64_t v4;
  unsigned char *v5;
  void *result;
  uint64_t v7;

  uint64_t v3 = *a1;
  type metadata accessor for DSLTree.Atom(0);
  uint64_t v4 = swift_allocBox();
  *uint64_t v5 = v3;
  swift_storeEnumTagMultiPayload();
  type metadata accessor for Regex.Program();
  uint64_t v7 = v4 | 0x4000000000000000;
  uint64_t result = Regex.Program.__allocating_init(tree:)(&v7);
  *a2 = result;
  return result;
}

void *_RegexFactory.empty<A>()@<X0>(void *a1@<X8>)
{
  type metadata accessor for Regex.Program();
  uint64_t v3 = 0x8000000000000000;
  uint64_t result = Regex.Program.__allocating_init(tree:)(&v3);
  *a1 = result;
  return result;
}

void *_RegexFactory.scalar<A>(_:)@<X0>(int a1@<W0>, void *a2@<X8>)
{
  type metadata accessor for DSLTree.Atom(0);
  uint64_t v4 = swift_allocBox();
  *uint64_t v5 = a1;
  swift_storeEnumTagMultiPayload();
  type metadata accessor for Regex.Program();
  uint64_t v7 = v4 | 0x4000000000000000;
  uint64_t result = Regex.Program.__allocating_init(tree:)(&v7);
  *a2 = result;
  return result;
}

void *_RegexFactory.characterClass<A>(_:)@<X0>(char *a1@<X0>, void *a2@<X8>)
{
  return _RegexFactory.assertion<A>(_:)(a1, a2);
}

void *_RegexFactory.char<A>(_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, void *a3@<X8>)
{
  type metadata accessor for DSLTree.Atom(0);
  uint64_t v6 = swift_allocBox();
  *uint64_t v7 = a1;
  v7[1] = a2;
  swift_storeEnumTagMultiPayload();
  swift_bridgeObjectRetain();
  type metadata accessor for Regex.Program();
  uint64_t v9 = v6 | 0x4000000000000000;
  uint64_t result = Regex.Program.__allocating_init(tree:)(&v9);
  *a3 = result;
  return result;
}

void *_RegexFactory.symbolicReference<A>(_:)@<X0>(uint64_t *a1@<X0>, void *a2@<X8>)
{
  uint64_t v3 = *a1;
  type metadata accessor for DSLTree.Atom(0);
  uint64_t v4 = swift_allocBox();
  *uint64_t v5 = v3;
  swift_storeEnumTagMultiPayload();
  type metadata accessor for Regex.Program();
  uint64_t v7 = v4 | 0x4000000000000000;
  uint64_t result = Regex.Program.__allocating_init(tree:)(&v7);
  *a2 = result;
  return result;
}

void *_RegexFactory.customCharacterClass<A>(_:)@<X0>(uint64_t *a1@<X0>, void *a2@<X8>)
{
  uint64_t v3 = *a1;
  char v4 = *((unsigned char *)a1 + 8);
  uint64_t v5 = swift_allocObject();
  *(void *)(v5 + 16) = v3;
  *(unsigned char *)(v5 + 24) = v4;
  uint64_t v6 = v5 | 0x3000000000000004;
  swift_bridgeObjectRetain();
  type metadata accessor for Regex.Program();
  uint64_t v8 = v6;
  uint64_t result = Regex.Program.__allocating_init(tree:)(&v8);
  *a2 = result;
  return result;
}

void *_RegexFactory.zeroOrOne<A, B>(_:_:)@<X0>(unsigned char *a1@<X1>, uint64_t a2@<X3>, uint64_t a3@<X4>, void *a4@<X8>)
{
  return _RegexFactory.zeroOrOne<A, B>(_:_:)(a1, a2, a3, MEMORY[0x263F8F9A8], a4);
}

void *_RegexFactory.zeroOrMore<A, B>(_:_:)@<X0>(unsigned char *a1@<X1>, uint64_t a2@<X3>, uint64_t a3@<X4>, void *a4@<X8>)
{
  return _RegexFactory.zeroOrOne<A, B>(_:_:)(a1, a2, a3, MEMORY[0x263F8F978], a4);
}

void *_RegexFactory.oneOrMore<A, B>(_:_:)@<X0>(unsigned char *a1@<X1>, uint64_t a2@<X3>, uint64_t a3@<X4>, void *a4@<X8>)
{
  return _RegexFactory.zeroOrOne<A, B>(_:_:)(a1, a2, a3, MEMORY[0x263F8F9A0], a4);
}

void *_RegexFactory.zeroOrOne<A, B>(_:_:)@<X0>(unsigned char *a1@<X1>, uint64_t a2@<X3>, uint64_t a3@<X4>, unsigned int *a4@<X5>, void *a5@<X8>)
{
  uint64_t v30 = a5;
  uint64_t v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for DSLTree.QuantificationKind?);
  MEMORY[0x270FA5388](v9 - 8);
  char v11 = (char *)&v29 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = type metadata accessor for DSLTree.QuantificationKind(0);
  uint64_t v13 = *(void *)(v12 - 8);
  MEMORY[0x270FA5388](v12);
  unint64_t v15 = (char *)&v29 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  switch(*a1)
  {
    case 1:
      char v16 = (unsigned int *)MEMORY[0x263F8F958];
      goto LABEL_6;
    case 2:
      char v16 = (unsigned int *)MEMORY[0x263F8F948];
      goto LABEL_6;
    case 3:
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v13 + 56))(v11, 1, 1, v12);
      swift_storeEnumTagMultiPayload();
      outlined destroy of (range: Range<String.Index>, value: Any?)?((uint64_t)v11, &demangling cache variable for type metadata for DSLTree.QuantificationKind?);
      goto LABEL_7;
    default:
      char v16 = (unsigned int *)MEMORY[0x263F8F950];
LABEL_6:
      uint64_t v17 = *v16;
      uint64_t v18 = type metadata accessor for AST.Quantification.Kind();
      (*(void (**)(char *, uint64_t, uint64_t))(*(void *)(v18 - 8) + 104))(v11, v17, v18);
      swift_storeEnumTagMultiPayload();
      (*(void (**)(char *, void, uint64_t, uint64_t))(v13 + 56))(v11, 0, 1, v12);
      outlined init with take of DSLTree.QuantificationKind((uint64_t)v11, (uint64_t)v15, type metadata accessor for DSLTree.QuantificationKind);
LABEL_7:
      uint64_t v19 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (DSLTree._AST.QuantificationAmount, DSLTree.QuantificationKind, DSLTree.Node));
      uint64_t v20 = swift_allocBox();
      uint64_t v22 = v21;
      uint64_t v23 = v21 + *(int *)(v19 + 48);
      uint64_t v24 = *(int *)(v19 + 64);
      uint64_t v25 = *a4;
      uint64_t v26 = type metadata accessor for AST.Quantification.Amount();
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v26 - 8) + 104))(v22, v25, v26);
      outlined init with take of DSLTree.QuantificationKind((uint64_t)v15, v23, type metadata accessor for DSLTree.QuantificationKind);
      (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t))(a3 + 16))(&v31, a2, a3);
      uint64_t v27 = *(void *)(v31 + 24);
      swift_retain();
      swift_release();
      *(void *)(v22 + v24) = v27;
      type metadata accessor for Regex.Program();
      uint64_t v32 = v20 | 0x3000000000000000;
      uint64_t result = Regex.Program.__allocating_init(tree:)(&v32);
      *uint64_t v30 = result;
      return result;
  }
}

void *_RegexFactory.exactly<A, B>(_:_:)@<X0>(uint64_t a1@<X3>, uint64_t a2@<X4>, void *a3@<X8>)
{
  uint64_t v5 = type metadata accessor for Source.Location();
  MEMORY[0x270FA5388](v5 - 8);
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (DSLTree._AST.QuantificationAmount, DSLTree.QuantificationKind, DSLTree.Node));
  uint64_t v7 = swift_allocBox();
  uint64_t v9 = v8;
  uint64_t v10 = *(int *)(v6 + 64);
  static Source.Location.fake.getter();
  AST.Atom.Number.init(_:at:)();
  uint64_t v11 = *MEMORY[0x263F8F990];
  uint64_t v12 = type metadata accessor for AST.Quantification.Amount();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v12 - 8) + 104))(v9, v11, v12);
  type metadata accessor for DSLTree.QuantificationKind(0);
  swift_storeEnumTagMultiPayload();
  (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t))(a2 + 16))(&v16, a1, a2);
  uint64_t v13 = *(void *)(v16 + 24);
  swift_retain();
  swift_release();
  *(void *)(v9 + v10) = v13;
  type metadata accessor for Regex.Program();
  uint64_t v17 = v7 | 0x3000000000000000;
  uint64_t result = Regex.Program.__allocating_init(tree:)(&v17);
  *a3 = result;
  return result;
}

void *_RegexFactory.repeating<A, B>(_:_:_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, char *a3@<X2>, uint64_t a4@<X5>, uint64_t a5@<X6>, void *a6@<X8>)
{
  char v12 = *a3;
  (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t))(a5 + 16))(&v13, a4, a5);
  uint64_t v9 = *(void *)(v13 + 24);
  swift_retain();
  swift_release();
  uint64_t v10 = specialized static DSLTree.Node.repeating(_:_:_:)(a1, a2, &v12, v9);
  swift_release();
  type metadata accessor for Regex.Program();
  uint64_t v13 = v10;
  uint64_t result = Regex.Program.__allocating_init(tree:)(&v13);
  *a6 = result;
  return result;
}

void *_RegexFactory.atomicNonCapturing<A, B>(_:)@<X0>(uint64_t a1@<X2>, uint64_t a2@<X3>, void *a3@<X8>)
{
  return _RegexFactory.atomicNonCapturing<A, B>(_:)(a1, a2, MEMORY[0x263F8FCA0], a3);
}

void *_RegexFactory.lookaheadNonCapturing<A, B>(_:)@<X0>(uint64_t a1@<X2>, uint64_t a2@<X3>, void *a3@<X8>)
{
  return _RegexFactory.atomicNonCapturing<A, B>(_:)(a1, a2, MEMORY[0x263F8FCD0], a3);
}

void *_RegexFactory.negativeLookaheadNonCapturing<A, B>(_:)@<X0>(uint64_t a1@<X2>, uint64_t a2@<X3>, void *a3@<X8>)
{
  return _RegexFactory.atomicNonCapturing<A, B>(_:)(a1, a2, MEMORY[0x263F8FC98], a3);
}

void *_RegexFactory.atomicNonCapturing<A, B>(_:)@<X0>(uint64_t a1@<X2>, uint64_t a2@<X3>, unsigned int *a3@<X4>, void *a4@<X8>)
{
  uint64_t v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (DSLTree._AST.GroupKind, DSLTree.Node));
  uint64_t v9 = swift_allocBox();
  uint64_t v11 = v10;
  uint64_t v12 = *(int *)(v8 + 48);
  uint64_t v13 = *a3;
  uint64_t v14 = type metadata accessor for AST.Group.Kind();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v14 - 8) + 104))(v11, v13, v14);
  (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t))(a2 + 16))(&v17, a1, a2);
  uint64_t v15 = *(void *)(v17 + 24);
  swift_retain();
  swift_release();
  *(void *)(v11 + v12) = v15;
  type metadata accessor for Regex.Program();
  uint64_t v18 = v9 | 0x1000000000000004;
  uint64_t result = Regex.Program.__allocating_init(tree:)(&v18);
  *a4 = result;
  return result;
}

void *_RegexFactory.orderedChoice<A, B>(_:)@<X0>(uint64_t a1@<X2>, uint64_t a2@<X3>, void *a3@<X8>)
{
  uint64_t v6 = swift_allocObject();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<DSLTree.Node>);
  uint64_t v7 = swift_allocObject();
  *(_OWORD *)(v7 + 16) = xmmword_209FAFD60;
  (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t))(a2 + 16))(&v10, a1, a2);
  uint64_t v8 = *(void *)(v10 + 24);
  swift_retain();
  swift_release();
  *(void *)(v7 + 32) = v8;
  *(void *)(v6 + 16) = v7;
  type metadata accessor for Regex.Program();
  uint64_t v10 = v6;
  uint64_t result = Regex.Program.__allocating_init(tree:)(&v10);
  *a3 = result;
  return result;
}

void *_RegexFactory.capture<A, B>(_:)@<X0>(uint64_t a1@<X2>, uint64_t a2@<X3>, void *a3@<X8>)
{
  uint64_t v6 = swift_allocObject();
  *(void *)(v6 + 24) = 0;
  *(void *)(v6 + 32) = 0;
  *(void *)(v6 + 16) = 0;
  *(unsigned char *)(v6 + 40) = 1;
  (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t))(a2 + 16))(&v9, a1, a2);
  uint64_t v7 = *(void *)(v9 + 24);
  swift_retain();
  swift_release();
  *(void *)(v6 + 48) = v7;
  type metadata accessor for Regex.Program();
  *(_OWORD *)(v6 + 56) = 0u;
  *(_OWORD *)(v6 + 72) = 0u;
  *(unsigned char *)(v6 + 88) = 0;
  uint64_t v10 = v6 | 0x1000000000000000;
  uint64_t result = Regex.Program.__allocating_init(tree:)(&v10);
  *a3 = result;
  return result;
}

void *_RegexFactory.capture<A, B>(_:_:)@<X0>(uint64_t a1@<X1>, uint64_t a2@<X3>, uint64_t a3@<X4>, void *a4@<X8>)
{
  uint64_t v8 = swift_allocObject();
  *(void *)(v8 + 16) = 0;
  *(void *)(v8 + 24) = 0;
  *(void *)(v8 + 32) = a1;
  *(unsigned char *)(v8 + 40) = 0;
  (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t))(a3 + 16))(&v11, a2, a3);
  uint64_t v9 = *(void *)(v11 + 24);
  swift_retain();
  swift_release();
  *(void *)(v8 + 48) = v9;
  type metadata accessor for Regex.Program();
  *(_OWORD *)(v8 + 56) = 0u;
  *(_OWORD *)(v8 + 72) = 0u;
  *(unsigned char *)(v8 + 88) = 0;
  uint64_t v12 = v8 | 0x1000000000000000;
  uint64_t result = Regex.Program.__allocating_init(tree:)(&v12);
  *a4 = result;
  return result;
}

void *_RegexFactory.capture<A, B, C, D>(_:_:_:)@<X0>(uint64_t a1@<X1>, char a2@<W2>, uint64_t a3@<X3>, uint64_t a4@<X4>, uint64_t a5@<X6>, uint64_t a6@<X7>, void *a7@<X8>, uint64_t a8, uint64_t a9)
{
  return _RegexFactory.capture<A, B, C, D>(_:_:_:)(a1, a2, a3, a4, a5, a6, a7, a8, a9, (void (*)(_OWORD *__return_ptr, uint64_t, uint64_t, uint64_t, uint64_t))CaptureTransform.init<A, B>(_:));
}

void *_RegexFactory.captureOptional<A, B, C, D>(_:_:_:)@<X0>(uint64_t a1@<X1>, char a2@<W2>, uint64_t a3@<X3>, uint64_t a4@<X4>, uint64_t a5@<X6>, uint64_t a6@<X7>, void *a7@<X8>, uint64_t a8, uint64_t a9)
{
  return _RegexFactory.capture<A, B, C, D>(_:_:_:)(a1, a2, a3, a4, a5, a6, a7, a8, a9, (void (*)(_OWORD *__return_ptr, uint64_t, uint64_t, uint64_t, uint64_t))CaptureTransform.init<A, B>(_:));
}

void *_RegexFactory.capture<A, B, C, D>(_:_:_:)@<X0>(uint64_t a1@<X1>, char a2@<W2>, uint64_t a3@<X3>, uint64_t a4@<X4>, uint64_t a5@<X6>, uint64_t a6@<X7>, void *a7@<X8>, uint64_t a8, uint64_t a9, void (*a10)(_OWORD *__return_ptr, uint64_t, uint64_t, uint64_t, uint64_t))
{
  uint64_t v15 = swift_allocObject();
  uint64_t v16 = v15;
  *(void *)(v15 + 16) = 0;
  *(void *)(v15 + 24) = 0;
  if (a2) {
    uint64_t v17 = 0;
  }
  else {
    uint64_t v17 = a1;
  }
  *(void *)(v15 + 32) = v17;
  *(unsigned char *)(v15 + 40) = a2 & 1;
  (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t))(a9 + 16))(&v24, a8, a9);
  uint64_t v18 = *(void *)(v24 + 24);
  swift_retain();
  swift_release();
  *(void *)(v16 + 48) = v18;
  swift_retain();
  a10(v25, a3, a4, a5, a6);
  char v19 = v26;
  long long v20 = v25[1];
  *(_OWORD *)(v16 + 56) = v25[0];
  *(_OWORD *)(v16 + 72) = v20;
  *(unsigned char *)(v16 + 88) = v19;
  type metadata accessor for Regex.Program();
  uint64_t v27 = v16 | 0x1000000000000000;
  uint64_t result = Regex.Program.__allocating_init(tree:)(&v27);
  *a7 = result;
  return result;
}

uint64_t TypedIndex.index(_:offsetBy:limitedBy:)()
{
  dispatch thunk of Collection.index(_:offsetBy:limitedBy:)();
  if (v2) {
    return 0;
  }
  else {
    return v1;
  }
}

uint64_t TypedIndex.startIndex.getter(uint64_t a1, void (*a2)(uint64_t *__return_ptr, void, void))
{
  a2(&v3, *(void *)(a1 + 16), *(void *)(a1 + 32));
  return v3;
}

uint64_t MutableCollection<>.subscript.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v55 = a1;
  uint64_t v52 = a4;
  uint64_t v6 = *(void *)(a3 + 8);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
  uint64_t v8 = MEMORY[0x270FA5388](TupleTypeMetadata2);
  uint64_t v10 = (char *)&v44 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = MEMORY[0x270FA5388](v8);
  uint64_t v47 = (char *)&v44 - v12;
  uint64_t v13 = *(void *)(AssociatedTypeWitness - 8);
  uint64_t v14 = MEMORY[0x270FA5388](v11);
  uint64_t v16 = (char *)&v44 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v14);
  uint64_t v18 = (char *)&v44 - v17;
  swift_getAssociatedConformanceWitness();
  uint64_t v19 = type metadata accessor for Range();
  uint64_t v48 = *(void *)(v19 - 8);
  uint64_t v49 = v19;
  uint64_t v20 = MEMORY[0x270FA5388](v19);
  uint64_t v46 = (char *)&v44 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v20);
  uint64_t v23 = (char *)&v44 - v22;
  dispatch thunk of Collection.startIndex.getter();
  uint64_t v53 = v4;
  uint64_t v50 = v6;
  uint64_t v51 = a2;
  dispatch thunk of Collection.endIndex.getter();
  uint64_t result = dispatch thunk of static Comparable.<= infix(_:_:)();
  if (result)
  {
    uint64_t v25 = v13;
    char v26 = v16;
    uint64_t v27 = TupleTypeMetadata2;
    uint64_t v28 = v47;
    uint64_t v29 = &v47[*(int *)(TupleTypeMetadata2 + 48)];
    uint64_t v45 = v23;
    uint64_t v30 = *(void (**)(char *, char *, uint64_t))(v13 + 32);
    v30(v47, v18, AssociatedTypeWitness);
    uint64_t v31 = v29;
    v30(v29, v26, AssociatedTypeWitness);
    uint64_t v32 = &v10[*(int *)(v27 + 48)];
    uint64_t v33 = *(void (**)(char *, char *, uint64_t))(v25 + 16);
    v33(v10, v28, AssociatedTypeWitness);
    v33(v32, v31, AssociatedTypeWitness);
    uint64_t v34 = v46;
    v30(v46, v10, AssociatedTypeWitness);
    int64_t v44 = *(void (**)(char *, uint64_t))(v25 + 8);
    v44(v32, AssociatedTypeWitness);
    uint64_t v35 = &v10[*(int *)(TupleTypeMetadata2 + 48)];
    v30(v10, v28, AssociatedTypeWitness);
    v30(v35, v31, AssociatedTypeWitness);
    int64_t v36 = (void (*)(uint64_t, char *, uint64_t))v30;
    uint64_t v37 = v49;
    v30(&v34[*(int *)(v49 + 36)], v35, AssociatedTypeWitness);
    v44(v10, AssociatedTypeWitness);
    uint64_t v38 = v48;
    long long v39 = v45;
    (*(void (**)(char *, char *, uint64_t))(v48 + 32))(v45, v34, v37);
    uint64_t v40 = v53;
    uint64_t v41 = v51;
    dispatch thunk of Collection._failEarlyRangeCheck(_:bounds:)();
    (*(void (**)(char *, uint64_t))(v38 + 8))(v39, v37);
    uint64_t v42 = type metadata accessor for Slice();
    uint64_t v43 = v52;
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v41 - 8) + 16))(v52 + *(int *)(v42 + 40), v40, v41);
    (*(void (**)(char *, uint64_t, uint64_t))(v38 + 16))(v39, v55, v37);
    v36(v43, v39, AssociatedTypeWitness);
    return ((uint64_t (*)(uint64_t, char *, uint64_t))v36)(v43 + *(int *)(v42 + 36), &v39[*(int *)(v37 + 36)], AssociatedTypeWitness);
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t TypedIndex.init(rawValue:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(a2 - 8) + 32))(a3, a1, a2);
}

uint64_t protocol witness for RawRepresentable.init(rawValue:) in conformance TypedIndex<A, B>@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  TypedIndex.init(rawValue:)(a1, *(void *)(a2 + 16), a3);
  uint64_t v5 = *(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(a2 - 8) + 56);

  return v5(a3, 0, 1, a2);
}

uint64_t protocol witness for RawRepresentable.rawValue.getter in conformance TypedIndex<A, B>@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(*(void *)(a1 + 16) - 8) + 16))(a2, v2);
}

uint64_t TypedIndex.count.getter(uint64_t a1)
{
  return MEMORY[0x270F9E0A0](*(void *)(a1 + 16), *(void *)(a1 + 32));
}

uint64_t TypedIndex.index(after:)()
{
  dispatch thunk of Collection.index(after:)();
  return v1;
}

uint64_t TypedIndex.subscript.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v9 = a1;
  uint64_t v3 = (uint64_t (*)(unsigned char *, void))dispatch thunk of Collection.subscript.read();
  uint64_t v5 = v4;
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(AssociatedTypeWitness - 8) + 16))(a2, v5, AssociatedTypeWitness);
  return v3(v8, 0);
}

uint64_t TypedIndex.distance(from:to:)()
{
  return dispatch thunk of Collection.distance(from:to:)();
}

uint64_t TypedIndex.index(_:offsetBy:)()
{
  dispatch thunk of Collection.index(_:offsetBy:)();
  return v1;
}

uint64_t protocol witness for Collection.startIndex.getter in conformance TypedIndex<A, B>@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result = TypedIndex.startIndex.getter(a1, MEMORY[0x263F8D7B0]);
  *a2 = result;
  return result;
}

uint64_t protocol witness for Collection.endIndex.getter in conformance TypedIndex<A, B>@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result = TypedIndex.startIndex.getter(a1, MEMORY[0x263F8D7E0]);
  *a2 = result;
  return result;
}

uint64_t (*protocol witness for Collection.subscript.read in conformance TypedIndex<A, B>(uint64_t **a1, uint64_t *a2))()
{
  uint64_t v4 = (uint64_t *)malloc(0x28uLL);
  *a1 = v4;
  void v4[4] = (uint64_t)TypedIndex.subscript.read(v4, *a2);
  return protocol witness for Collection.subscript.read in conformance RangesCollection<A>;
}

void protocol witness for Collection.subscript.read in conformance RangesCollection<A>(void *a1)
{
  uint64_t v1 = (void *)*a1;
  (*(void (**)(void))(*a1 + 32))(*a1);

  free(v1);
}

uint64_t (*TypedIndex.subscript.read(uint64_t *a1, uint64_t a2))()
{
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  *a1 = AssociatedTypeWitness;
  uint64_t v5 = *(void *)(AssociatedTypeWitness - 8);
  a1[1] = v5;
  uint64_t v6 = malloc(*(void *)(v5 + 64));
  a1[2] = (uint64_t)v6;
  TypedIndex.subscript.getter(a2, (uint64_t)v6);
  return RangesCollection.subscript.read;
}

void RangesCollection.subscript.read(void *a1)
{
  uint64_t v1 = (void *)a1[2];
  (*(void (**)(void *, void))(a1[1] + 8))(v1, *a1);

  free(v1);
}

void protocol witness for Collection._customLastIndexOfEquatableElement(_:) in conformance TypedIndex<A, B>(uint64_t a1@<X8>)
{
  *(void *)a1 = 0;
  *(_WORD *)(a1 + 8) = 256;
}

uint64_t protocol witness for Collection.index(after:) in conformance TypedIndex<A, B>@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = TypedIndex.index(after:)();
  *a1 = result;
  return result;
}

uint64_t protocol witness for Collection.formIndex(after:) in conformance TypedIndex<A, B>(uint64_t *a1)
{
  uint64_t result = TypedIndex.index(after:)();
  *a1 = result;
  return result;
}

uint64_t protocol witness for Sequence.makeIterator() in conformance TypedIndex<A, B>@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v5 = *(void *)(a1 - 8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v5 + 16))(a2, v2, a1);
  uint64_t v6 = TypedIndex.startIndex.getter(a1, MEMORY[0x263F8D7B0]);
  (*(void (**)(uint64_t, uint64_t))(v5 + 8))(v2, a1);
  swift_getWitnessTable();
  uint64_t result = type metadata accessor for IndexingIterator();
  *(void *)(a2 + *(int *)(result + 36)) = v6;
  return result;
}

uint64_t protocol witness for Sequence.underestimatedCount.getter in conformance TypedIndex<A, B>(uint64_t a1)
{
  uint64_t WitnessTable = swift_getWitnessTable();

  return MEMORY[0x270F9E108](a1, WitnessTable);
}

uint64_t protocol witness for Sequence._copyToContiguousArray() in conformance TypedIndex<A, B>(uint64_t a1)
{
  swift_getWitnessTable();
  uint64_t v3 = specialized Collection._copyToContiguousArray()();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(a1 - 8) + 8))(v1, a1);
  return v3;
}

void (*TypedIndex<>.subscript.modify(void *a1, uint64_t a2))(void *a1)
{
  uint64_t v4 = malloc(0x30uLL);
  *a1 = v4;
  void v4[4] = a2;
  v4[5] = dispatch thunk of MutableCollection.subscript.modify();
  return TypedIndex<>.subscript.modify;
}

void TypedIndex<>.subscript.modify(void *a1)
{
  uint64_t v1 = (void *)*a1;
  (*(void (**)(void, void))(*a1 + 40))(*a1, 0);

  free(v1);
}

uint64_t protocol witness for MutableCollection.subscript.setter in conformance <> TypedIndex<A, B>(uint64_t a1, uint64_t *a2)
{
  uint64_t v9 = *a2;
  uint64_t v3 = (uint64_t (*)(unsigned char *, void))dispatch thunk of MutableCollection.subscript.modify();
  uint64_t v5 = v4;
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(AssociatedTypeWitness - 8) + 40))(v5, a1, AssociatedTypeWitness);
  return v3(v8, 0);
}

uint64_t (*protocol witness for MutableCollection.subscript.modify in conformance <> TypedIndex<A, B>(void *a1, uint64_t *a2))()
{
  uint64_t v4 = malloc(0x28uLL);
  *a1 = v4;
  void v4[4] = TypedIndex<>.subscript.modify(v4, *a2);
  return protocol witness for MutableCollection.subscript.modify in conformance <> TypedIndex<A, B>;
}

uint64_t protocol witness for MutableCollection.subscript.setter in conformance <> TypedIndex<A, B>(uint64_t a1)
{
  specialized MutableCollection<>.subscript.setter();
  swift_getWitnessTable();
  uint64_t v2 = type metadata accessor for Slice();
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
}

uint64_t (*protocol witness for MutableCollection.subscript.modify in conformance <> TypedIndex<A, B>(void *a1, uint64_t a2, uint64_t a3, uint64_t a4))()
{
  uint64_t v8 = malloc(0x28uLL);
  *a1 = v8;
  void v8[4] = MutableCollection<>.subscript.modify(v8, a2, a3, a4);
  return protocol witness for MutableCollection.subscript.modify in conformance <> TypedIndex<A, B>;
}

void protocol witness for MutableCollection.subscript.modify in conformance <> TypedIndex<A, B>(void *a1)
{
  uint64_t v1 = (void *)*a1;
  (*(void (**)(void))(*a1 + 32))(*a1);

  free(v1);
}

void (*MutableCollection<>.subscript.modify(void *a1, uint64_t a2, uint64_t a3, uint64_t a4))(uint64_t a1, char a2)
{
  uint64_t v9 = malloc(0x50uLL);
  *a1 = v9;
  v9[1] = a4;
  v9[2] = v4;
  *uint64_t v9 = a3;
  uint64_t v10 = type metadata accessor for Slice();
  v9[3] = v10;
  uint64_t v11 = *(void *)(v10 - 8);
  v9[4] = v11;
  size_t v12 = *(void *)(v11 + 64);
  v9[5] = malloc(v12);
  uint64_t v13 = malloc(v12);
  v9[6] = v13;
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  uint64_t v14 = type metadata accessor for Range();
  v9[7] = v14;
  uint64_t v15 = *(void *)(v14 - 8);
  uint64_t v16 = v15;
  v9[8] = v15;
  v9[9] = malloc(*(void *)(v15 + 64));
  (*(void (**)(void))(v16 + 16))();
  MutableCollection<>.subscript.getter(a2, a3, a4, (uint64_t)v13);
  return MutableCollection<>.subscript.modify;
}

void MutableCollection<>.subscript.modify(uint64_t a1, char a2)
{
  uint64_t v2 = *(void **)a1;
  uint64_t v4 = *(void *)(*(void *)a1 + 32);
  uint64_t v3 = *(void **)(*(void *)a1 + 40);
  uint64_t v6 = *(void *)(*(void *)a1 + 64);
  uint64_t v5 = *(void **)(*(void *)a1 + 72);
  uint64_t v7 = *(void **)(*(void *)a1 + 48);
  uint64_t v10 = *(void *)(*(void *)a1 + 56);
  uint64_t v8 = *(void *)(*(void *)a1 + 24);
  if (a2)
  {
    (*(void (**)(void *, void *, void))(v4 + 16))(v3, v7, v2[3]);
    swift_getWitnessTable();
    _writeBackMutableSlice<A, B>(_:bounds:slice:)();
    uint64_t v9 = *(void (**)(void *, uint64_t))(v4 + 8);
    v9(v3, v8);
    (*(void (**)(void *, uint64_t))(v6 + 8))(v5, v10);
    v9(v7, v8);
  }
  else
  {
    swift_getWitnessTable();
    _writeBackMutableSlice<A, B>(_:bounds:slice:)();
    (*(void (**)(void *, uint64_t))(v6 + 8))(v5, v10);
    (*(void (**)(void *, uint64_t))(v4 + 8))(v7, v8);
  }
  free(v5);
  free(v7);
  free(v3);

  free(v2);
}

uint64_t protocol witness for MutableCollection.partition(by:) in conformance <> TypedIndex<A, B>()
{
  return MutableCollection.partition(by:)();
}

uint64_t protocol witness for MutableCollection.swapAt(_:_:) in conformance <> TypedIndex<A, B>()
{
  return MEMORY[0x270F9D4D8]();
}

uint64_t protocol witness for MutableCollection._withUnsafeMutableBufferPointerIfSupported<A>(_:) in conformance <> TypedIndex<A, B>()
{
  return MutableCollection._withUnsafeMutableBufferPointerIfSupported<A>(_:)();
}

uint64_t protocol witness for MutableCollection.withContiguousMutableStorageIfAvailable<A>(_:) in conformance <> TypedIndex<A, B>()
{
  return MutableCollection.withContiguousMutableStorageIfAvailable<A>(_:)();
}

uint64_t TypedIndex<>.index(before:)()
{
  dispatch thunk of BidirectionalCollection.index(before:)();
  return v1;
}

uint64_t protocol witness for BidirectionalCollection.index(before:) in conformance <> TypedIndex<A, B>@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = TypedIndex<>.index(before:)();
  *a1 = result;
  return result;
}

uint64_t protocol witness for BidirectionalCollection.formIndex(before:) in conformance <> TypedIndex<A, B>(uint64_t *a1)
{
  uint64_t result = TypedIndex<>.index(before:)();
  *a1 = result;
  return result;
}

uint64_t protocol witness for BidirectionalCollection.index(_:offsetBy:) in conformance <> TypedIndex<A, B>@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = TypedIndex.index(_:offsetBy:)();
  *a1 = result;
  return result;
}

uint64_t protocol witness for Collection.index(_:offsetBy:limitedBy:) in conformance TypedIndex<A, B>@<X0>(uint64_t a1@<X8>)
{
  uint64_t result = TypedIndex.index(_:offsetBy:limitedBy:)();
  *(void *)a1 = result;
  *(unsigned char *)(a1 + 8) = v3 & 1;
  return result;
}

uint64_t protocol witness for BidirectionalCollection.distance(from:to:) in conformance <> TypedIndex<A, B>()
{
  return TypedIndex.distance(from:to:)();
}

uint64_t TypedIndex<>.init(arrayLiteral:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5 = *(void *)(a2 - 8);
  uint64_t v6 = MEMORY[0x270FA5388](a1);
  uint64_t v8 = (char *)v10 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10[1] = v6;
  swift_getAssociatedTypeWitness();
  type metadata accessor for Array();
  swift_getWitnessTable();
  dispatch thunk of RangeReplaceableCollection.init<A>(_:)();
  return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v5 + 32))(a3, v8, a2);
}

uint64_t protocol witness for ExpressibleByArrayLiteral.init(arrayLiteral:) in conformance <> TypedIndex<A, B>@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  return TypedIndex<>.init(arrayLiteral:)(a1, *(void *)(a2 + 16), a3);
}

uint64_t protocol witness for Hashable.hashValue.getter in conformance TypedInt<A>(uint64_t a1, uint64_t a2)
{
  uint64_t WitnessTable = swift_getWitnessTable();
  uint64_t v5 = MEMORY[0x263F8D6D8];

  return MEMORY[0x270F9DAE8](a1, a2, WitnessTable, v5);
}

uint64_t protocol witness for Hashable.hash(into:) in conformance TypedInt<A>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t WitnessTable = swift_getWitnessTable();
  uint64_t v7 = MEMORY[0x263F8D6D8];

  return MEMORY[0x270F9DAF8](a1, a2, a3, WitnessTable, v7);
}

uint64_t protocol witness for Hashable._rawHashValue(seed:) in conformance TypedInt<A>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t WitnessTable = swift_getWitnessTable();
  uint64_t v7 = MEMORY[0x263F8D6D8];

  return MEMORY[0x270F9DAF0](a1, a2, a3, WitnessTable, v7);
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance TypedInt<A>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t WitnessTable = swift_getWitnessTable();
  uint64_t v7 = MEMORY[0x263F8D6E8];

  return MEMORY[0x270F9F940](a1, a2, a3, WitnessTable, v7);
}

BOOL static TypedInt.< infix(_:_:)(uint64_t a1, uint64_t a2)
{
  return a1 < a2;
}

BOOL protocol witness for static Comparable.< infix(_:_:) in conformance TypedInt<A>(uint64_t *a1, uint64_t *a2)
{
  return static TypedInt.< infix(_:_:)(*a1, *a2);
}

uint64_t TypedInt.description.getter()
{
  v0._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
  String.append(_:)(v0);
  swift_bridgeObjectRelease();
  return 35;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance TypedInt<A>()
{
  return TypedInt.description.getter();
}

unint64_t protocol witness for RawRepresentable.init(rawValue:) in conformance _CharacterClassModel.Representation@<X0>(unint64_t *a1@<X0>, unsigned char *a2@<X8>)
{
  unint64_t result = specialized _CharacterClassModel.Representation.init(rawValue:)(*a1);
  *a2 = result;
  return result;
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance Instruction.OpCode()
{
  Swift::UInt64 v1 = *v0;
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v1);
  return Hasher._finalize()();
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance Instruction.OpCode()
{
  Swift::UInt64 v1 = *v0;
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v1);
  return Hasher._finalize()();
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance _CharacterClassModel()
{
  Swift::UInt64 v1 = *v0;
  Swift::UInt v2 = v0[1];
  Swift::UInt8 v3 = v0[2];
  Swift::UInt8 v4 = v0[3];
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v1);
  Hasher._combine(_:)(v2);
  Hasher._combine(_:)(v3);
  Hasher._combine(_:)(v4);
  return Hasher._finalize()();
}

void protocol witness for Hashable.hash(into:) in conformance _CharacterClassModel()
{
  Swift::UInt v1 = v0[1];
  Swift::UInt8 v2 = v0[2];
  Swift::UInt8 v3 = v0[3];
  Hasher._combine(_:)(*v0);
  Hasher._combine(_:)(v1);
  Hasher._combine(_:)(v2);
  Hasher._combine(_:)(v3);
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance _CharacterClassModel()
{
  Swift::UInt64 v1 = *v0;
  Swift::UInt v2 = v0[1];
  Swift::UInt8 v3 = v0[2];
  Swift::UInt8 v4 = v0[3];
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v1);
  Hasher._combine(_:)(v2);
  Hasher._combine(_:)(v3);
  Hasher._combine(_:)(v4);
  return Hasher._finalize()();
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance _CharacterClassModel(unsigned __int8 *a1, unsigned __int8 *a2)
{
  int v2 = *a1;
  if (a1[3]) {
    int v3 = 0x1000000;
  }
  else {
    int v3 = 0;
  }
  if (a1[2]) {
    int v4 = 0x10000;
  }
  else {
    int v4 = 0;
  }
  if (a1[1]) {
    int v5 = 256;
  }
  else {
    int v5 = 0;
  }
  int v6 = v5 | v2 | v4 | v3;
  if (a2[3]) {
    int v7 = 0x1000000;
  }
  else {
    int v7 = 0;
  }
  if (a2[2]) {
    int v8 = 0x10000;
  }
  else {
    int v8 = 0;
  }
  if (a2[1]) {
    int v9 = 256;
  }
  else {
    int v9 = 0;
  }
  return specialized static _CharacterClassModel.== infix(_:_:)(v6, v9 | *a2 | v8 | v7);
}

unint64_t protocol witness for CustomStringConvertible.description.getter in conformance _CharacterClassModel.Representation()
{
  unint64_t result = 0xD000000000000017;
  switch(*v0)
  {
    case 1:
      unint64_t result = 0x61726720796E613CLL;
      break;
    case 2:
      unint64_t result = 0x3E74696769643CLL;
      break;
    case 3:
      return result;
    case 4:
      unint64_t result = 0xD000000000000012;
      break;
    case 5:
      unint64_t result = 0xD000000000000013;
      break;
    case 6:
      unint64_t result = 0x707365746968773CLL;
      break;
    case 7:
      unint64_t result = 0x3E64726F773CLL;
      break;
    default:
      unint64_t result = 0x3E796E613CLL;
      break;
  }
  return result;
}

uint64_t _CharacterClassModel.description.getter(int a1)
{
  char v1 = a1;
  BOOL v2 = (a1 & 0x1000000) == 0;
  if ((a1 & 0x1000000) != 0) {
    uint64_t v3 = 544501614;
  }
  else {
    uint64_t v3 = 0;
  }
  if (v2) {
    unint64_t v4 = 0xE000000000000000;
  }
  else {
    unint64_t v4 = 0xE400000000000000;
  }
  unint64_t v5 = v4;
  String.append(_:)(*(Swift::String *)&v3);
  swift_bridgeObjectRelease();
  unint64_t v6 = 0xD000000000000017;
  unint64_t v7 = 0x8000000209FB5F60;
  switch(v1)
  {
    case 1:
      unint64_t v7 = 0xEE003E656D656870;
      unint64_t v6 = 0x61726720796E613CLL;
      break;
    case 2:
      unint64_t v7 = 0xE700000000000000;
      unint64_t v6 = 0x3E74696769643CLL;
      break;
    case 3:
      break;
    case 4:
      unint64_t v7 = 0x8000000209FB5F40;
      unint64_t v6 = 0xD000000000000012;
      break;
    case 5:
      unint64_t v6 = 0xD000000000000013;
      unint64_t v7 = 0x8000000209FB5F20;
      break;
    case 6:
      unint64_t v7 = 0xEC0000003E656361;
      unint64_t v6 = 0x707365746968773CLL;
      break;
    case 7:
      unint64_t v7 = 0xE600000000000000;
      unint64_t v6 = 0x3E64726F773CLL;
      break;
    default:
      unint64_t v7 = 0xE500000000000000;
      unint64_t v6 = 0x3E796E613CLL;
      break;
  }
  unint64_t v8 = v7;
  String.append(_:)(*(Swift::String *)&v6);
  swift_bridgeObjectRelease();
  return 0;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance _CharacterClassModel()
{
  if (v0[3]) {
    int v1 = 0x1000000;
  }
  else {
    int v1 = 0;
  }
  if (v0[2]) {
    int v2 = 0x10000;
  }
  else {
    int v2 = 0;
  }
  if (v0[1]) {
    int v3 = 256;
  }
  else {
    int v3 = 0;
  }
  return _CharacterClassModel.description.getter(v3 | *v0 | v2 | v1);
}

void closure #1 in $defer #1 () in PrettyPrinter.printAsPattern(_:wrap:terminateLine:)(uint64_t a1, char a2)
{
  PrettyPrinter.indent()();
  v3._uint64_t countAndFlagsBits = 0x65747265766E692ELL;
  v3._uint64_t object = (void *)0xE900000000000064;
  PrettyPrinter.output(_:)(v3);
  if (a2) {
    PrettyPrinter.terminateLine()();
  }
}

uint64_t _StringGuts._slowEnsureMatchingEncoding(_:)(unint64_t a1, uint64_t a2, uint64_t a3)
{
  char v3 = a1;
  uint64_t v4 = (unsigned __int16)a1 >> 14;
  if ((a3 & 0x1000000000000000) == 0 || (a2 & 0x800000000000000) != 0)
  {
    uint64_t v10 = String.UTF16View.index(_:offsetBy:)();
    uint64_t v11 = v10 + (v4 << 16);
    unint64_t v12 = v10 & 0xFFFFFFFFFFFFFFFCLL | v3 & 3;
    unint64_t v13 = v11 & 0xFFFFFFFFFFFF0000;
    if (!v4) {
      unint64_t v13 = v12;
    }
    return v13 | 4;
  }
  else
  {
    uint64_t v5 = MEMORY[0x21050F0F0](15, a1 >> 16);
    uint64_t v6 = v5 + (v4 << 16);
    unint64_t v7 = v5 & 0xFFFFFFFFFFFFFFFCLL | v3 & 3;
    unint64_t v8 = v6 & 0xFFFFFFFFFFFF0000;
    if (!v4) {
      unint64_t v8 = v7;
    }
    return v8 | 8;
  }
}

unint64_t _StringGuts.validateInclusiveScalarIndex(_:)(unint64_t result, unint64_t a2, unint64_t a3)
{
  uint64_t v5 = (a2 >> 59) & 1;
  if ((a3 & 0x1000000000000000) == 0) {
    LOBYTE(v5) = 1;
  }
  if ((result & 1) == 0 || (result & 0xC) == 4 << v5) {
    goto LABEL_9;
  }
  unint64_t v6 = HIBYTE(a3) & 0xF;
  if ((a3 & 0x2000000000000000) == 0) {
    unint64_t v6 = a2 & 0xFFFFFFFFFFFFLL;
  }
  if (v6 < result >> 16)
  {
    __break(1u);
LABEL_9:
    unint64_t result = _StringGuts.validateInclusiveSubscalarIndex(_:)(result, a2, a3);
    if ((result & 1) == 0) {
      return result & 0xC | _StringGuts.scalarAlignSlow(_:)(result, a2, a3) & 0xFFFFFFFFFFFFFFF3 | 1;
    }
  }
  return result;
}

unint64_t _StringGuts.validateInclusiveSubscalarIndex(_:)(unint64_t result, unint64_t a2, unint64_t a3)
{
  uint64_t v5 = (a2 >> 59) & 1;
  if ((a3 & 0x1000000000000000) == 0) {
    LOBYTE(v5) = 1;
  }
  if ((result & 0xC) == 4 << v5) {
    unint64_t result = _StringGuts._slowEnsureMatchingEncoding(_:)(result, a2, a3);
  }
  unint64_t v6 = HIBYTE(a3) & 0xF;
  if ((a3 & 0x2000000000000000) == 0) {
    unint64_t v6 = a2 & 0xFFFFFFFFFFFFLL;
  }
  if (v6 < result >> 16) {
    __break(1u);
  }
  return result;
}

unint64_t _StringGuts.scalarAlignSlow(_:)(unint64_t result, uint64_t a2, unint64_t a3)
{
  if ((result & 0xC000) != 0 || result < 0x10000)
  {
    result &= 0xFFFFFFFFFFFF0000;
  }
  else
  {
    unint64_t v5 = result >> 16;
    if ((a3 & 0x1000000000000000) == 0)
    {
      void v13[2] = v3;
      v13[3] = v4;
      if ((a3 & 0x2000000000000000) != 0)
      {
        v13[0] = a2;
        v13[1] = a3 & 0xFFFFFFFFFFFFFFLL;
        if (v5 != (HIBYTE(a3) & 0xF) && (*((unsigned char *)v13 + v5) & 0xC0) == 0x80)
        {
          do
          {
            unint64_t v7 = v5 - 1;
            int v11 = *((unsigned char *)&v12 + v5-- + 7) & 0xC0;
          }
          while (v11 == 128);
          return v7 << 16;
        }
        goto LABEL_14;
      }
      if ((a2 & 0x1000000000000000) != 0)
      {
        uint64_t v6 = (a3 & 0xFFFFFFFFFFFFFFFLL) + 32;
        if (v5 == (a2 & 0xFFFFFFFFFFFFLL)) {
          goto LABEL_14;
        }
      }
      else
      {
        unint64_t v12 = result >> 16;
        uint64_t v6 = _StringObject.sharedUTF8.getter();
        unint64_t v5 = v12;
        if (v12 == v10) {
          goto LABEL_14;
        }
      }
      if ((*(unsigned char *)(v6 + v5) & 0xC0) == 0x80)
      {
        do
        {
          unint64_t v7 = v5 - 1;
          int v8 = *(unsigned char *)(v6 - 1 + v5--) & 0xC0;
        }
        while (v8 == 128);
        return v7 << 16;
      }
LABEL_14:
      unint64_t v7 = v5;
      return v7 << 16;
    }
    uint64_t v9 = HIBYTE(a3) & 0xF;
    if ((a3 & 0x2000000000000000) == 0) {
      uint64_t v9 = a2 & 0xFFFFFFFFFFFFLL;
    }
    if (v5 != v9)
    {
      return MEMORY[0x270F9E998]();
    }
  }
  return result;
}

void *specialized _copyCollectionToContiguousArray<A>(_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v3 = *(void *)(a3 + 16);
  if (!v3) {
    return (void *)MEMORY[0x263F8EE78];
  }
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<AnyRegexOutput.Element>);
  unint64_t v7 = (void *)swift_allocObject();
  size_t v8 = _swift_stdlib_malloc_size(v7);
  void v7[2] = v3;
  v7[3] = 2 * ((uint64_t)(v8 - 32) / 104);
  uint64_t v9 = specialized Sequence._copySequenceContents(initializing:)((uint64_t)&v11, (uint64_t)(v7 + 4), v3, a1, a2, a3);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if (v9 != v3)
  {
    __break(1u);
    return (void *)MEMORY[0x263F8EE78];
  }
  return v7;
}

_OWORD *specialized Sequence._copySequenceContents(initializing:)(_OWORD *result, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = result;
  if (!a2)
  {
    uint64_t v5 = 0;
    long long v15 = *(_OWORD *)(v3 + 48);
    result[2] = *(_OWORD *)(v3 + 32);
    result[3] = v15;
    result[4] = *(_OWORD *)(v3 + 64);
    *(_OWORD *)((char *)result + 73) = *(_OWORD *)(v3 + 73);
    long long v16 = *(_OWORD *)(v3 + 16);
    *unint64_t result = *(_OWORD *)v3;
    result[1] = v16;
    return (_OWORD *)v5;
  }
  uint64_t v5 = a3;
  unint64_t v6 = *(void *)(v3 + 80);
  uint64_t v20 = *(void *)(v3 + 64);
  uint64_t v21 = *(void *)(v3 + 72);
  char v7 = *(unsigned char *)(v3 + 88) & 1;
  uint64_t v8 = *(void *)(v3 + 32);
  uint64_t v17 = *(void *)(v3 + 40);
  uint64_t v18 = *(void *)(v3 + 48);
  uint64_t v19 = *(void *)(v3 + 56);
  unint64_t v10 = *(void *)v3;
  unint64_t v9 = *(void *)(v3 + 8);
  uint64_t v12 = *(void *)(v3 + 16);
  uint64_t v11 = *(void *)(v3 + 24);
  if (!a3)
  {
LABEL_8:
    *(void *)uint64_t v4 = v10;
    *((void *)v4 + 1) = v9;
    *((void *)v4 + 2) = v12;
    *((void *)v4 + 3) = v11;
    *((void *)v4 + 4) = v8;
    *((void *)v4 + 5) = v17;
    *((void *)v4 + 6) = v18;
    *((void *)v4 + 7) = v19;
    *((void *)v4 + 8) = v20;
    *((void *)v4 + 9) = v21;
    *((void *)v4 + 10) = v6;
LABEL_12:
    *((unsigned char *)v4 + 88) = v7;
    return (_OWORD *)v5;
  }
  if ((a3 & 0x8000000000000000) == 0)
  {
    uint64_t v14 = 0;
    while ((v7 & 1) == 0)
    {
      unint64_t v26 = v10;
      unint64_t v27 = v9;
      uint64_t v28 = v12;
      uint64_t v29 = v11;
      uint64_t v30 = v8;
      uint64_t v31 = v17;
      uint64_t v32 = v18;
      uint64_t v33 = v19;
      uint64_t v34 = v20;
      uint64_t v35 = v21;
      unint64_t v36 = v6;
      char v37 = 0;
      SubstringSearcher.nextRange(in:searchFromEnd:)(v10, v9, v6, (uint64_t)&v22);
      unint64_t v6 = v24;
      char v7 = v25;
      if (v23) {
        goto LABEL_11;
      }
      *(_OWORD *)(a2 + 16 * v14++) = v22;
      if (v5 == v14) {
        goto LABEL_8;
      }
    }
    char v7 = 1;
LABEL_11:
    *(void *)uint64_t v4 = v10;
    *((void *)v4 + 1) = v9;
    *((void *)v4 + 2) = v12;
    *((void *)v4 + 3) = v11;
    *((void *)v4 + 4) = v8;
    *((void *)v4 + 5) = v17;
    *((void *)v4 + 6) = v18;
    *((void *)v4 + 7) = v19;
    *((void *)v4 + 8) = v20;
    *((void *)v4 + 9) = v21;
    *((void *)v4 + 10) = v6;
    uint64_t v5 = v14;
    goto LABEL_12;
  }
  __break(1u);
  return result;
}

uint64_t specialized Sequence._copySequenceContents(initializing:)(uint64_t result, uint64_t a2, unint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  unint64_t v9 = (void *)result;
  if (!a2)
  {
    unint64_t v12 = 0;
    goto LABEL_10;
  }
  if (!a3)
  {
LABEL_8:
    unint64_t v12 = a3;
LABEL_10:
    *unint64_t v9 = a4;
    v9[1] = a5;
    v9[2] = a6;
    v9[3] = v12;
    return v12;
  }
  if ((a3 & 0x8000000000000000) == 0)
  {
    uint64_t v11 = a2;
    unint64_t v12 = 0;
    uint64_t v13 = a6 + 32;
    while (1)
    {
      unint64_t v14 = *(void *)(a6 + 16);
      if (v12 == v14) {
        goto LABEL_10;
      }
      if (v12 >= v14)
      {
        __break(1u);
        break;
      }
      ++v12;
      outlined init with copy of AnyRegexOutput.ElementRepresentation(v13, (uint64_t)&v21);
      *((void *)&v26 + 1) = a4;
      uint64_t v33 = a5;
      long long v15 = v21;
      long long v16 = v22;
      long long v27 = v21;
      long long v28 = v22;
      long long v17 = v24;
      long long v18 = v23;
      long long v29 = v23;
      long long v30 = v24;
      long long v19 = v25;
      long long v20 = v26;
      *(_OWORD *)(v11 + 64) = v25;
      *(_OWORD *)(v11 + 80) = v20;
      *(void *)(v11 + 96) = a5;
      *(_OWORD *)uint64_t v11 = v15;
      *(_OWORD *)(v11 + 16) = v16;
      *(_OWORD *)(v11 + 32) = v18;
      *(_OWORD *)(v11 + 48) = v17;
      v11 += 104;
      long long v31 = v19;
      long long v32 = v20;
      unint64_t result = swift_bridgeObjectRetain();
      v13 += 88;
      if (a3 == v12) {
        goto LABEL_8;
      }
    }
  }
  __break(1u);
  return result;
}

char *specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(char *a1, int64_t a2, char a3)
{
  unint64_t result = specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, *v3);
  *uint64_t v3 = result;
  return result;
}

{
  char **v3;
  char *result;

  unint64_t result = specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, *v3);
  *uint64_t v3 = result;
  return result;
}

{
  char **v3;
  char *result;

  unint64_t result = specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, *v3);
  *uint64_t v3 = result;
  return result;
}

{
  char **v3;
  char *result;

  unint64_t result = specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, *v3);
  *uint64_t v3 = result;
  return result;
}

{
  char **v3;
  char *result;

  unint64_t result = specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, *v3);
  *uint64_t v3 = result;
  return result;
}

{
  char **v3;
  char *result;

  unint64_t result = specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, *v3);
  *uint64_t v3 = result;
  return result;
}

{
  char **v3;
  char *result;

  unint64_t result = specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, *v3);
  *uint64_t v3 = result;
  return result;
}

size_t specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(size_t a1, int64_t a2, char a3)
{
  size_t result = specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, (void *)*v3);
  *uint64_t v3 = result;
  return result;
}

char *specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(char *result, int64_t a2, char a3, char *a4)
{
  char v5 = (char)result;
  if (a3)
  {
    unint64_t v6 = *((void *)a4 + 3);
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v7 = a2;
      }
    }
  }
  else
  {
    int64_t v7 = a2;
  }
  uint64_t v8 = *((void *)a4 + 2);
  if (v7 <= v8) {
    uint64_t v9 = *((void *)a4 + 2);
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<String>);
    unint64_t v10 = (char *)swift_allocObject();
    int64_t v11 = _swift_stdlib_malloc_size(v10);
    uint64_t v12 = v11 - 32;
    if (v11 < 32) {
      uint64_t v12 = v11 - 17;
    }
    *((void *)v10 + 2) = v8;
    *((void *)v10 + 3) = 2 * (v12 >> 4);
  }
  else
  {
    unint64_t v10 = (char *)MEMORY[0x263F8EE78];
  }
  uint64_t v13 = v10 + 32;
  unint64_t v14 = a4 + 32;
  if (v5)
  {
    if (v10 != a4 || v13 >= &v14[16 * v8]) {
      memmove(v13, v14, 16 * v8);
    }
    *((void *)a4 + 2) = 0;
  }
  else
  {
    swift_arrayInitWithCopy();
  }
  swift_release();
  return v10;
}

{
  char v5;
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  int64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;

  char v5 = (char)result;
  if (a3)
  {
    unint64_t v6 = *((void *)a4 + 3);
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v7 = a2;
      }
    }
  }
  else
  {
    int64_t v7 = a2;
  }
  uint64_t v8 = *((void *)a4 + 2);
  if (v7 <= v8) {
    uint64_t v9 = *((void *)a4 + 2);
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<DSLTree.Node>);
    unint64_t v10 = (char *)swift_allocObject();
    int64_t v11 = _swift_stdlib_malloc_size(v10);
    uint64_t v12 = v11 - 32;
    if (v11 < 32) {
      uint64_t v12 = v11 - 25;
    }
    *((void *)v10 + 2) = v8;
    *((void *)v10 + 3) = 2 * (v12 >> 3);
  }
  else
  {
    unint64_t v10 = (char *)MEMORY[0x263F8EE78];
  }
  uint64_t v13 = v10 + 32;
  unint64_t v14 = a4 + 32;
  if (v5)
  {
    if (v10 != a4 || v13 >= &v14[8 * v8]) {
      memmove(v13, v14, 8 * v8);
    }
    *((void *)a4 + 2) = 0;
  }
  else
  {
    swift_arrayInitWithCopy();
  }
  swift_release();
  return v10;
}

{
  char v5;
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  int64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;

  char v5 = (char)result;
  if (a3)
  {
    unint64_t v6 = *((void *)a4 + 3);
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v7 = a2;
      }
    }
  }
  else
  {
    int64_t v7 = a2;
  }
  uint64_t v8 = *((void *)a4 + 2);
  if (v7 <= v8) {
    uint64_t v9 = *((void *)a4 + 2);
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Any>);
    unint64_t v10 = (char *)swift_allocObject();
    int64_t v11 = _swift_stdlib_malloc_size(v10);
    uint64_t v12 = v11 - 32;
    if (v11 < 32) {
      uint64_t v12 = v11 - 1;
    }
    *((void *)v10 + 2) = v8;
    *((void *)v10 + 3) = 2 * (v12 >> 5);
  }
  else
  {
    unint64_t v10 = (char *)MEMORY[0x263F8EE78];
  }
  uint64_t v13 = v10 + 32;
  unint64_t v14 = a4 + 32;
  if (v5)
  {
    if (v10 != a4 || v13 >= &v14[32 * v8]) {
      memmove(v13, v14, 32 * v8);
    }
    *((void *)a4 + 2) = 0;
  }
  else
  {
    swift_arrayInitWithCopy();
  }
  swift_release();
  return v10;
}

{
  char v5;
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  size_t v11;
  char *v12;
  char *v13;

  char v5 = (char)result;
  if (a3)
  {
    unint64_t v6 = *((void *)a4 + 3);
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v7 = a2;
      }
    }
  }
  else
  {
    int64_t v7 = a2;
  }
  uint64_t v8 = *((void *)a4 + 2);
  if (v7 <= v8) {
    uint64_t v9 = *((void *)a4 + 2);
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<PrettyPrinter.NodeToPrint>);
    unint64_t v10 = (char *)swift_allocObject();
    int64_t v11 = _swift_stdlib_malloc_size(v10);
    *((void *)v10 + 2) = v8;
    *((void *)v10 + 3) = 2 * ((uint64_t)(v11 - 32) / 24);
  }
  else
  {
    unint64_t v10 = (char *)MEMORY[0x263F8EE78];
  }
  uint64_t v12 = v10 + 32;
  uint64_t v13 = a4 + 32;
  if (v5)
  {
    if (v10 != a4 || v12 >= &v13[24 * v8]) {
      memmove(v12, v13, 24 * v8);
    }
    *((void *)a4 + 2) = 0;
  }
  else
  {
    swift_arrayInitWithCopy();
  }
  swift_release();
  return v10;
}

{
  char v5;
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  int64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;

  char v5 = (char)result;
  if (a3)
  {
    unint64_t v6 = *((void *)a4 + 3);
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v7 = a2;
      }
    }
  }
  else
  {
    int64_t v7 = a2;
  }
  uint64_t v8 = *((void *)a4 + 2);
  if (v7 <= v8) {
    uint64_t v9 = *((void *)a4 + 2);
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<DSLTree._Tree>);
    unint64_t v10 = (char *)swift_allocObject();
    int64_t v11 = _swift_stdlib_malloc_size(v10);
    uint64_t v12 = v11 - 32;
    if (v11 < 32) {
      uint64_t v12 = v11 - 25;
    }
    *((void *)v10 + 2) = v8;
    *((void *)v10 + 3) = 2 * (v12 >> 3);
  }
  else
  {
    unint64_t v10 = (char *)MEMORY[0x263F8EE78];
  }
  uint64_t v13 = v10 + 32;
  unint64_t v14 = a4 + 32;
  if (v5)
  {
    if (v10 != a4 || v13 >= &v14[8 * v8]) {
      memmove(v13, v14, 8 * v8);
    }
    *((void *)a4 + 2) = 0;
  }
  else
  {
    swift_arrayInitWithCopy();
  }
  swift_release();
  return v10;
}

{
  char v5;
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  size_t v11;
  char *v12;
  char *v13;

  char v5 = (char)result;
  if (a3)
  {
    unint64_t v6 = *((void *)a4 + 3);
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v7 = a2;
      }
    }
  }
  else
  {
    int64_t v7 = a2;
  }
  uint64_t v8 = *((void *)a4 + 2);
  if (v7 <= v8) {
    uint64_t v9 = *((void *)a4 + 2);
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<AnyRegexOutput.Element>);
    unint64_t v10 = (char *)swift_allocObject();
    int64_t v11 = _swift_stdlib_malloc_size(v10);
    *((void *)v10 + 2) = v8;
    *((void *)v10 + 3) = 2 * ((uint64_t)(v11 - 32) / 104);
  }
  else
  {
    unint64_t v10 = (char *)MEMORY[0x263F8EE78];
  }
  uint64_t v12 = v10 + 32;
  uint64_t v13 = a4 + 32;
  if (v5)
  {
    if (v10 != a4 || v12 >= &v13[104 * v8]) {
      memmove(v12, v13, 104 * v8);
    }
    *((void *)a4 + 2) = 0;
  }
  else
  {
    swift_arrayInitWithCopy();
  }
  swift_release();
  return v10;
}

{
  char v5;
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  int64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;

  char v5 = (char)result;
  if (a3)
  {
    unint64_t v6 = *((void *)a4 + 3);
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v7 = a2;
      }
    }
  }
  else
  {
    int64_t v7 = a2;
  }
  uint64_t v8 = *((void *)a4 + 2);
  if (v7 <= v8) {
    uint64_t v9 = *((void *)a4 + 2);
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Any.Type>);
    unint64_t v10 = (char *)swift_allocObject();
    int64_t v11 = _swift_stdlib_malloc_size(v10);
    uint64_t v12 = v11 - 32;
    if (v11 < 32) {
      uint64_t v12 = v11 - 25;
    }
    *((void *)v10 + 2) = v8;
    *((void *)v10 + 3) = 2 * (v12 >> 3);
  }
  else
  {
    unint64_t v10 = (char *)MEMORY[0x263F8EE78];
  }
  uint64_t v13 = v10 + 32;
  unint64_t v14 = a4 + 32;
  if (v5)
  {
    if (v10 != a4 || v13 >= &v14[8 * v8]) {
      memmove(v13, v14, 8 * v8);
    }
    *((void *)a4 + 2) = 0;
  }
  else
  {
    memcpy(v13, v14, 8 * v8);
  }
  swift_release();
  return v10;
}

size_t specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(size_t result, int64_t a2, char a3, void *a4)
{
  char v5 = result;
  if (a3)
  {
    unint64_t v6 = a4[3];
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
LABEL_30:
        __break(1u);
        return result;
      }
      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v7 = a2;
      }
    }
  }
  else
  {
    int64_t v7 = a2;
  }
  uint64_t v8 = a4[2];
  if (v7 <= v8) {
    uint64_t v9 = a4[2];
  }
  else {
    uint64_t v9 = v7;
  }
  if (!v9)
  {
    uint64_t v13 = (void *)MEMORY[0x263F8EE78];
    goto LABEL_19;
  }
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<DSLTree.CustomCharacterClass.Member>);
  uint64_t v10 = *(void *)(type metadata accessor for DSLTree.CustomCharacterClass.Member(0) - 8);
  uint64_t v11 = *(void *)(v10 + 72);
  unint64_t v12 = (*(unsigned __int8 *)(v10 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v10 + 80);
  uint64_t v13 = (void *)swift_allocObject();
  size_t result = _swift_stdlib_malloc_size(v13);
  if (!v11)
  {
    __break(1u);
LABEL_29:
    __break(1u);
    goto LABEL_30;
  }
  if (result - v12 == 0x8000000000000000 && v11 == -1) {
    goto LABEL_29;
  }
  void v13[2] = v8;
  v13[3] = 2 * ((uint64_t)(result - v12) / v11);
LABEL_19:
  uint64_t v15 = *(void *)(type metadata accessor for DSLTree.CustomCharacterClass.Member(0) - 8);
  if (v5)
  {
    if (v13 < a4
      || (unint64_t v16 = (*(unsigned __int8 *)(v15 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v15 + 80),
          (char *)v13 + v16 >= (char *)a4 + v16 + *(void *)(v15 + 72) * v8))
    {
      swift_arrayInitWithTakeFrontToBack();
    }
    else if (v13 != a4)
    {
      swift_arrayInitWithTakeBackToFront();
    }
    a4[2] = 0;
  }
  else
  {
    swift_arrayInitWithCopy();
  }
  swift_release();
  return (size_t)v13;
}

unint64_t specialized _copySequenceToContiguousArray<A>(_:)(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 64);
  unint64_t v2 = *(void *)(a1 + 80);
  char v3 = *(unsigned char *)(a1 + 88);
  uint64_t v33 = *(void *)(a1 + 32);
  uint64_t v34 = *(void *)(a1 + 72);
  uint64_t v4 = *(void *)(a1 + 56);
  uint64_t v31 = *(void *)(a1 + 48);
  uint64_t v32 = *(void *)(a1 + 40);
  unint64_t v5 = *(void *)(a1 + 8);
  unint64_t v30 = *(void *)a1;
  uint64_t v6 = *(void *)(a1 + 16);
  uint64_t v35 = *(void *)(a1 + 24);
  outlined retain of SubstringSearcher(a1);
  int64_t v7 = (void *)MEMORY[0x263F8EE78];
  uint64_t v8 = 0;
  if ((v3 & 1) == 0)
  {
    uint64_t v9 = (_OWORD *)(MEMORY[0x263F8EE78] + 32);
    uint64_t v27 = v4;
    uint64_t v28 = v1;
    do
    {
      unint64_t v40 = v30;
      unint64_t v41 = v5;
      uint64_t v42 = v6;
      uint64_t v43 = v35;
      uint64_t v44 = v33;
      uint64_t v45 = v32;
      uint64_t v46 = v31;
      uint64_t v47 = v4;
      uint64_t v48 = v1;
      uint64_t v49 = v34;
      unint64_t v50 = v2;
      char v51 = 0;
      unint64_t result = SubstringSearcher.nextRange(in:searchFromEnd:)(v30, v5, v2, (uint64_t)&v36);
      if (v37) {
        break;
      }
      long long v11 = v36;
      unint64_t v2 = v38;
      char v12 = v39;
      if (!v8)
      {
        unint64_t v13 = v7[3];
        if ((uint64_t)((v13 >> 1) + 0x4000000000000000) < 0) {
          goto LABEL_24;
        }
        long long v29 = v36;
        int64_t v14 = v13 & 0xFFFFFFFFFFFFFFFELL;
        if (v14 <= 1) {
          uint64_t v15 = 1;
        }
        else {
          uint64_t v15 = v14;
        }
        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Range<String.Index>>);
        unint64_t v16 = (void *)swift_allocObject();
        int64_t v17 = _swift_stdlib_malloc_size(v16);
        uint64_t v18 = v17 - 32;
        if (v17 < 32) {
          uint64_t v18 = v17 - 17;
        }
        uint64_t v19 = v18 >> 4;
        void v16[2] = v15;
        v16[3] = 2 * (v18 >> 4);
        unint64_t v20 = (unint64_t)(v16 + 4);
        uint64_t v21 = v7[3] >> 1;
        if (v7[2])
        {
          long long v22 = v7 + 4;
          if (v16 != v7 || v20 >= (unint64_t)v22 + 16 * v21) {
            memmove(v16 + 4, v22, 16 * v21);
          }
          void v7[2] = 0;
        }
        uint64_t v9 = (_OWORD *)(v20 + 16 * v21);
        uint64_t v8 = (v19 & 0x7FFFFFFFFFFFFFFFLL) - v21;
        unint64_t result = swift_release();
        int64_t v7 = v16;
        uint64_t v4 = v27;
        uint64_t v1 = v28;
        long long v11 = v29;
      }
      BOOL v23 = __OFSUB__(v8--, 1);
      if (v23)
      {
        __break(1u);
LABEL_24:
        __break(1u);
        goto LABEL_25;
      }
      *v9++ = v11;
    }
    while ((v12 & 1) == 0);
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  unint64_t result = swift_bridgeObjectRelease();
  unint64_t v24 = v7[3];
  if (v24 < 2) {
    return (unint64_t)v7;
  }
  unint64_t v25 = v24 >> 1;
  BOOL v23 = __OFSUB__(v25, v8);
  uint64_t v26 = v25 - v8;
  if (!v23)
  {
    void v7[2] = v26;
    return (unint64_t)v7;
  }
LABEL_25:
  __break(1u);
  return result;
}

unint64_t specialized _copySequenceToContiguousArray<A>(_:)(unint64_t result)
{
  unint64_t v1 = *(void *)result;
  unint64_t v2 = *(void *)(result + 8);
  uint64_t v4 = *(void *)(result + 16);
  unint64_t v3 = *(void *)(result + 24);
  uint64_t v5 = *(void *)(result + 48);
  uint64_t v6 = *(void *)(result + 56);
  unint64_t v8 = *(void *)(result + 64);
  unint64_t v7 = *(void *)(result + 72);
  uint64_t v9 = *(void *)(result + 80);
  char v10 = *(unsigned char *)(result + 120);
  uint64_t v118 = *(void *)(result + 184);
  char v11 = *(unsigned char *)(result + 192);
  long long v180 = *(_OWORD *)(result + 32);
  uint64_t v181 = v5;
  uint64_t v182 = v6;
  unint64_t v183 = v8;
  unint64_t v184 = v7;
  uint64_t v185 = v9;
  long long v12 = *(_OWORD *)(result + 88);
  long long v186 = v12;
  long long v187 = *(_OWORD *)(result + 104);
  unint64_t v150 = v1;
  char v188 = v10;
  unint64_t v123 = v2 >> 14;
  unint64_t v137 = v1 >> 14;
  if (v2 >> 14 < v1 >> 14)
  {
LABEL_115:
    __break(1u);
LABEL_116:
    __break(1u);
    goto LABEL_117;
  }
  uint64_t v13 = result;
  uint64_t v148 = v12;
  swift_bridgeObjectRetain_n();
  outlined retain of SubstringSearcher((uint64_t)&v180);
  swift_bridgeObjectRetain();
  outlined retain of SubstringSearcher((uint64_t)&v180);
  outlined retain of SplitCollection<SubstringSearcher>(v13);
  uint64_t v143 = v9;
  uint64_t v14 = Substring.subscript.getter();
  char v119 = v11;
  unint64_t v15 = v7;
  uint64_t v17 = v16;
  uint64_t v140 = v4;
  uint64_t v19 = v18;
  uint64_t v21 = v20;
  swift_bridgeObjectRelease();
  unint64_t v139 = v2;
  uint64_t v22 = v148;
  swift_bridgeObjectRetain();
  uint64_t v23 = v14;
  uint64_t v24 = v143;
  uint64_t v25 = v21;
  uint64_t v26 = v148;
  unint64_t v142 = v15;
  uint64_t v27 = specialized SubstringSearcher.State.init(text:pattern:)(v23, v17, v19, v25, v8, v15);
  uint64_t v109 = v28;
  uint64_t v110 = v27;
  unint64_t v141 = v29;
  char v31 = v30 & 1;
  outlined release of RangesCollection<SubstringSearcher>(v13);
  unint64_t result = outlined release of SubstringSearcher((uint64_t)&v180);
  uint64_t v120 = 0;
  char v126 = 0;
  char v113 = v188;
  uint64_t v115 = v180;
  uint64_t v116 = *((void *)&v187 + 1);
  uint64_t v114 = *((void *)&v180 + 1);
  uint64_t v130 = v187;
  uint64_t v131 = 0;
  BOOL v32 = __OFSUB__((void)v187, 1);
  BOOL v117 = v32;
  unint64_t v144 = v8;
  unint64_t v149 = v8 >> 14;
  uint64_t v134 = v187 - 1;
  uint64_t v135 = *((void *)&v186 + 1);
  BOOL v33 = __OFSUB__(v187 - 1, 1);
  BOOL v129 = v33;
  uint64_t v127 = v187 - 2;
  uint64_t v121 = v187 - 3;
  BOOL v34 = __OFSUB__(v187 - 2, 1);
  BOOL v122 = v34;
  uint64_t v125 = (void *)MEMORY[0x263F8EE78];
  uint64_t v35 = MEMORY[0x263F8EE78] + 32;
  uint64_t v111 = v181;
  uint64_t v112 = v182;
  unint64_t v36 = v150;
  LOBYTE(v132) = v119;
  BYTE4(v132) = v119;
  unint64_t v128 = v150;
  uint64_t v37 = v140;
  unint64_t v38 = v123;
  uint64_t v138 = v22;
  unint64_t v136 = v3;
  do
  {
    uint64_t v133 = (void *)v35;
    if (v36 >> 14 == v38)
    {
      if (v119)
      {
LABEL_98:
        char v126 = 1;
        break;
      }
      swift_bridgeObjectRetain();
      uint64_t v39 = Substring.subscript.getter();
      uint64_t v41 = v40;
      uint64_t v145 = v43;
      uint64_t v146 = v42;
      unint64_t result = swift_bridgeObjectRelease();
      char v126 = 1;
      uint64_t v132 = 0;
      char v44 = 1;
      uint64_t v45 = v131;
      if (v131)
      {
        LOBYTE(v132) = 0;
        goto LABEL_95;
      }
      goto LABEL_83;
    }
    if (v120 >= v118)
    {
      if (v38 < v36 >> 14)
      {
LABEL_113:
        __break(1u);
LABEL_114:
        __break(1u);
        goto LABEL_115;
      }
      swift_bridgeObjectRetain();
      uint64_t v39 = Substring.subscript.getter();
      uint64_t v41 = v46;
      uint64_t v145 = v48;
      uint64_t v146 = v47;
      unint64_t result = swift_bridgeObjectRelease();
      char v126 = 1;
      char v44 = 1;
      uint64_t v45 = v131;
      if (v131) {
        goto LABEL_95;
      }
LABEL_83:
      unint64_t v95 = v125[3];
      if ((uint64_t)((v95 >> 1) + 0x4000000000000000) >= 0)
      {
        int64_t v96 = v95 & 0xFFFFFFFFFFFFFFFELL;
        if (v96 <= 1) {
          uint64_t v97 = 1;
        }
        else {
          uint64_t v97 = v96;
        }
        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Substring>);
        unint64_t v98 = (void *)swift_allocObject();
        int64_t v99 = _swift_stdlib_malloc_size(v98);
        uint64_t v100 = v99 - 32;
        if (v99 < 32) {
          uint64_t v100 = v99 - 1;
        }
        uint64_t v101 = v100 >> 5;
        v98[2] = v97;
        v98[3] = 2 * (v100 >> 5);
        unint64_t v102 = (unint64_t)(v98 + 4);
        uint64_t v103 = v125[3] >> 1;
        if (v125[2])
        {
          uint64_t v104 = v125 + 4;
          if (v98 != v125 || v102 >= (unint64_t)v104 + 32 * v103) {
            memmove(v98 + 4, v104, 32 * v103);
          }
          v125[2] = 0;
        }
        uint64_t v133 = (void *)(v102 + 32 * v103);
        unint64_t result = swift_release();
        uint64_t v45 = (v101 & 0x7FFFFFFFFFFFFFFFLL) - v103;
        uint64_t v125 = v98;
        uint64_t v24 = v143;
        uint64_t v37 = v140;
        unint64_t v38 = v123;
        uint64_t v26 = v138;
        goto LABEL_95;
      }
LABEL_111:
      __break(1u);
LABEL_112:
      __break(1u);
      goto LABEL_113;
    }
    uint64_t v189 = v115;
    uint64_t v190 = v114;
    uint64_t v191 = v111;
    uint64_t v192 = v112;
    unint64_t v193 = v144;
    unint64_t v194 = v142;
    uint64_t v195 = v24;
    uint64_t v196 = v26;
    uint64_t v197 = v135;
    uint64_t v198 = v130;
    uint64_t v199 = v116;
    char v200 = v113;
LABEL_23:
    unint64_t v50 = v36;
    if (v31)
    {
      char v31 = 1;
      unint64_t v36 = v141;
      goto LABEL_76;
    }
    unint64_t v36 = v141;
    if (!v130)
    {
      if ((v141 ^ v139) >= 0x4000)
      {
        unint64_t result = Substring.index(after:)();
        char v31 = 0;
        unint64_t v49 = v141;
        unint64_t v141 = result;
      }
      else
      {
        char v31 = 1;
        unint64_t v49 = v141;
        unint64_t v141 = 0;
      }
      goto LABEL_22;
    }
    if (*(void *)(v135 + 16))
    {
      if (v117) {
        goto LABEL_110;
      }
      unint64_t v124 = v50;
      unint64_t v51 = v139;
      while (1)
      {
        unint64_t v52 = Substring.index(before:)();
        unint64_t v53 = (unint64_t)Substring.index(before:)() >> 14;
        if (v53 < v149)
        {
          uint64_t v54 = v134;
          goto LABEL_59;
        }
        uint64_t v55 = Substring.subscript.getter();
        uint64_t v57 = v56;
        if (v55 == Substring.subscript.getter() && v57 == v58)
        {
          unint64_t result = swift_bridgeObjectRelease_n();
        }
        else
        {
          char v59 = _stringCompareWithSmolCheck(_:_:expecting:)();
          swift_bridgeObjectRelease();
          unint64_t result = swift_bridgeObjectRelease();
          if ((v59 & 1) == 0)
          {
            uint64_t v54 = v134;
            uint64_t v26 = v138;
            goto LABEL_59;
          }
        }
        if (v129) {
          goto LABEL_106;
        }
        unint64_t v60 = v52;
        if (v53 == v149)
        {
          uint64_t v24 = v143;
          uint64_t v26 = v138;
          goto LABEL_73;
        }
        if (v137 >= v52 >> 14) {
          goto LABEL_107;
        }
        uint64_t v61 = Substring.index(before:)();
        unint64_t v62 = (unint64_t)Substring.index(before:)() >> 14;
        if (v62 >= v149)
        {
          uint64_t v63 = Substring.subscript.getter();
          uint64_t v65 = v64;
          uint64_t v147 = v61;
          if (v63 == Substring.subscript.getter() && v65 == v66)
          {
            unint64_t result = swift_bridgeObjectRelease_n();
            uint64_t v26 = v138;
LABEL_44:
            unint64_t v60 = v147;
            if (v122) {
              goto LABEL_109;
            }
            uint64_t v54 = v121;
            uint64_t v24 = v143;
            uint64_t v37 = v140;
            unint64_t v3 = v136;
            if (v62 != v149)
            {
              while (v137 < v60 >> 14)
              {
                unint64_t v51 = v139;
                uint64_t v68 = Substring.index(before:)();
                unint64_t v69 = Substring.index(before:)();
                uint64_t v70 = v26;
                unint64_t v71 = v69 >> 14;
                if (v69 >> 14 < v149)
                {
                  uint64_t v26 = v70;
                  goto LABEL_59;
                }
                uint64_t v72 = Substring.subscript.getter();
                uint64_t v74 = v73;
                if (v72 == Substring.subscript.getter() && v74 == v75)
                {
                  unint64_t result = swift_bridgeObjectRelease_n();
                }
                else
                {
                  char v76 = _stringCompareWithSmolCheck(_:_:expecting:)();
                  swift_bridgeObjectRelease();
                  unint64_t result = swift_bridgeObjectRelease();
                  if ((v76 & 1) == 0)
                  {
                    unint64_t v51 = v139;
                    uint64_t v37 = v140;
                    unint64_t v3 = v136;
                    uint64_t v26 = v138;
                    goto LABEL_59;
                  }
                }
                BOOL v77 = __OFSUB__(v54--, 1);
                unint64_t v60 = v68;
                if (v77) {
                  goto LABEL_104;
                }
                BOOL v78 = v71 == v149;
                uint64_t v24 = v143;
                uint64_t v37 = v140;
                unint64_t v3 = v136;
                uint64_t v26 = v138;
                if (v78) {
                  goto LABEL_73;
                }
              }
              __break(1u);
LABEL_104:
              __break(1u);
LABEL_105:
              __break(1u);
LABEL_106:
              __break(1u);
LABEL_107:
              __break(1u);
              goto LABEL_108;
            }
LABEL_73:
            if (v36 >> 14 < v60 >> 14) {
              goto LABEL_112;
            }
            unint64_t v87 = v60;
            unint64_t result = Substring.index(_:offsetBy:limitedBy:)();
            char v31 = v88 & 1;
            unint64_t v49 = v87;
            unint64_t v141 = result;
            unint64_t v38 = v123;
            unint64_t v50 = v124;
LABEL_22:
            BYTE4(v132) = 1;
            unint64_t v128 = v36;
            if ((v132 & ((v49 ^ v50) < 0x4000)) == 0)
            {
              if (v49 >> 14 < v50 >> 14) {
                goto LABEL_116;
              }
              ++v120;
              unint64_t result = Substring.subscript.getter();
              uint64_t v39 = result;
              uint64_t v41 = v92;
              uint64_t v145 = v94;
              uint64_t v146 = v93;
              char v44 = 0;
              unint64_t v128 = v36;
              BYTE4(v132) = v132;
              uint64_t v45 = v131;
              if (v131)
              {
                unint64_t v128 = v36;
                BYTE4(v132) = v132;
                goto LABEL_95;
              }
              goto LABEL_83;
            }
            goto LABEL_23;
          }
          char v67 = _stringCompareWithSmolCheck(_:_:expecting:)();
          swift_bridgeObjectRelease();
          unint64_t result = swift_bridgeObjectRelease();
          uint64_t v26 = v138;
          if (v67) {
            goto LABEL_44;
          }
          uint64_t v54 = v127;
          unint64_t v51 = v139;
          uint64_t v37 = v140;
          unint64_t v3 = v136;
        }
        else
        {
          uint64_t v54 = v127;
          uint64_t v26 = v138;
        }
LABEL_59:
        uint64_t v79 = Substring.subscript.getter();
        if (*(void *)(v135 + 16))
        {
          unint64_t v81 = v51;
          unint64_t v82 = specialized __RawDictionaryStorage.find<A>(_:)(v79, v80);
          char v84 = v83;
          swift_bridgeObjectRelease();
          if (v84) {
            uint64_t v85 = *(void *)(*(void *)(v135 + 56) + 8 * v82);
          }
          else {
            uint64_t v85 = 0;
          }
          uint64_t v24 = v143;
          unint64_t v51 = v81;
          uint64_t v37 = v140;
        }
        else
        {
          swift_bridgeObjectRelease();
          uint64_t v85 = 0;
          uint64_t v24 = v143;
        }
        unint64_t result = v36;
        if (__OFSUB__(v54, v85)) {
          goto LABEL_105;
        }
        unint64_t result = Substring.index(_:offsetBy:limitedBy:)();
        unint64_t v36 = result;
        if (v86)
        {
          char v31 = 1;
          unint64_t v38 = v123;
          unint64_t v50 = v124;
          goto LABEL_76;
        }
      }
    }
    unint64_t result = SubstringSearcher.nextRangeNaive(in:searchFromEnd:)(v150, v139, (uint64_t)&v151);
    unint64_t v36 = v154;
    char v31 = v155;
    if ((v153 & 1) == 0)
    {
      unint64_t v141 = v154;
      unint64_t v49 = v151;
      unint64_t v36 = v152;
      goto LABEL_22;
    }
LABEL_76:
    unint64_t v141 = v36;
    if (((v50 >> 14 == v38) & BYTE4(v132)) != 0) {
      goto LABEL_98;
    }
    if (v38 < v50 >> 14) {
      goto LABEL_114;
    }
    unint64_t v36 = v50;
    swift_bridgeObjectRetain();
    uint64_t v39 = Substring.subscript.getter();
    uint64_t v41 = v89;
    uint64_t v145 = v91;
    uint64_t v146 = v90;
    unint64_t result = swift_bridgeObjectRelease();
    char v126 = 1;
    char v44 = 1;
    uint64_t v45 = v131;
    if (!v131) {
      goto LABEL_83;
    }
LABEL_95:
    BOOL v77 = __OFSUB__(v45, 1);
    uint64_t v105 = v45 - 1;
    if (v77)
    {
LABEL_108:
      __break(1u);
LABEL_109:
      __break(1u);
LABEL_110:
      __break(1u);
      goto LABEL_111;
    }
    uint64_t v131 = v105;
    *uint64_t v133 = v39;
    v133[1] = v41;
    v133[2] = v146;
    v133[3] = v145;
    uint64_t v35 = (uint64_t)(v133 + 4);
  }
  while ((v44 & 1) == 0);
  unint64_t v151 = v150;
  unint64_t v152 = v139;
  uint64_t v153 = v37;
  unint64_t v154 = v3;
  unint64_t v155 = v128;
  unint64_t v156 = v150;
  unint64_t v157 = v139;
  uint64_t v158 = v37;
  unint64_t v159 = v3;
  uint64_t v160 = v115;
  uint64_t v161 = v114;
  uint64_t v162 = v111;
  uint64_t v163 = v112;
  unint64_t v164 = v144;
  unint64_t v165 = v142;
  uint64_t v166 = v24;
  uint64_t v167 = v26;
  uint64_t v168 = v135;
  uint64_t v169 = v130;
  uint64_t v170 = v116;
  char v171 = v113;
  uint64_t v172 = v110;
  uint64_t v173 = v109;
  unint64_t v174 = v141;
  char v175 = v31 & 1;
  uint64_t v176 = v118;
  char v177 = v119;
  uint64_t v178 = v120;
  char v179 = v126 & 1;
  outlined release of SplitCollection<SubstringSearcher>.Iterator((uint64_t)&v151);
  unint64_t result = (unint64_t)v125;
  unint64_t v106 = v125[3];
  if (v106 < 2) {
    return result;
  }
  unint64_t v107 = v106 >> 1;
  BOOL v77 = __OFSUB__(v107, v131);
  uint64_t v108 = v107 - v131;
  if (v77)
  {
LABEL_117:
    __break(1u);
    return result;
  }
  v125[2] = v108;
  return result;
}

char *specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(char *result, int64_t a2, char a3, char *a4)
{
  char v5 = (char)result;
  if (a3)
  {
    unint64_t v6 = *((void *)a4 + 3);
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v7 = a2;
      }
    }
  }
  else
  {
    int64_t v7 = a2;
  }
  uint64_t v8 = *((void *)a4 + 2);
  if (v7 <= v8) {
    uint64_t v9 = *((void *)a4 + 2);
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Int>);
    char v10 = (char *)swift_allocObject();
    int64_t v11 = _swift_stdlib_malloc_size(v10);
    uint64_t v12 = v11 - 32;
    if (v11 < 32) {
      uint64_t v12 = v11 - 25;
    }
    *((void *)v10 + 2) = v8;
    *((void *)v10 + 3) = 2 * (v12 >> 3);
  }
  else
  {
    char v10 = (char *)MEMORY[0x263F8EE78];
  }
  uint64_t v13 = v10 + 32;
  uint64_t v14 = a4 + 32;
  if (v5)
  {
    if (v10 != a4 || v13 >= &v14[8 * v8]) {
      memmove(v13, v14, 8 * v8);
    }
    *((void *)a4 + 2) = 0;
  }
  else
  {
    memcpy(v13, v14, 8 * v8);
  }
  swift_bridgeObjectRelease();
  return v10;
}

{
  char v5;
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  int64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;

  char v5 = (char)result;
  if (a3)
  {
    unint64_t v6 = *((void *)a4 + 3);
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v7 = a2;
      }
    }
  }
  else
  {
    int64_t v7 = a2;
  }
  uint64_t v8 = *((void *)a4 + 2);
  if (v7 <= v8) {
    uint64_t v9 = *((void *)a4 + 2);
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Any>);
    char v10 = (char *)swift_allocObject();
    int64_t v11 = _swift_stdlib_malloc_size(v10);
    uint64_t v12 = v11 - 32;
    if (v11 < 32) {
      uint64_t v12 = v11 - 1;
    }
    *((void *)v10 + 2) = v8;
    *((void *)v10 + 3) = 2 * (v12 >> 5);
  }
  else
  {
    char v10 = (char *)MEMORY[0x263F8EE78];
  }
  uint64_t v13 = v10 + 32;
  uint64_t v14 = a4 + 32;
  if (v5)
  {
    if (v10 != a4 || v13 >= &v14[32 * v8]) {
      memmove(v13, v14, 32 * v8);
    }
    *((void *)a4 + 2) = 0;
  }
  else
  {
    swift_arrayInitWithCopy();
  }
  swift_bridgeObjectRelease();
  return v10;
}

{
  char v5;
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  int64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;
  size_t v15;

  char v5 = (char)result;
  if (a3)
  {
    unint64_t v6 = *((void *)a4 + 3);
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v7 = a2;
      }
    }
  }
  else
  {
    int64_t v7 = a2;
  }
  uint64_t v8 = *((void *)a4 + 2);
  if (v7 <= v8) {
    uint64_t v9 = *((void *)a4 + 2);
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<TypedInt<_InstructionAddress>?>);
    char v10 = (char *)swift_allocObject();
    int64_t v11 = _swift_stdlib_malloc_size(v10);
    uint64_t v12 = v11 - 32;
    if (v11 < 32) {
      uint64_t v12 = v11 - 17;
    }
    *((void *)v10 + 2) = v8;
    *((void *)v10 + 3) = 2 * (v12 >> 4);
  }
  else
  {
    char v10 = (char *)MEMORY[0x263F8EE78];
  }
  uint64_t v13 = v10 + 32;
  uint64_t v14 = a4 + 32;
  unint64_t v15 = 16 * v8;
  if (v5)
  {
    if (v10 != a4 || v13 >= &v14[v15]) {
      memmove(v13, v14, v15);
    }
    *((void *)a4 + 2) = 0;
  }
  else
  {
    memcpy(v13, v14, v15);
  }
  swift_bridgeObjectRelease();
  return v10;
}

{
  char v5;
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  int64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;
  size_t v15;

  char v5 = (char)result;
  if (a3)
  {
    unint64_t v6 = *((void *)a4 + 3);
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v7 = a2;
      }
    }
  }
  else
  {
    int64_t v7 = a2;
  }
  uint64_t v8 = *((void *)a4 + 2);
  if (v7 <= v8) {
    uint64_t v9 = *((void *)a4 + 2);
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(TypedInt<_InstructionAddress>, MEProgram.Builder.AddressFixup)>);
    char v10 = (char *)swift_allocObject();
    int64_t v11 = _swift_stdlib_malloc_size(v10);
    uint64_t v12 = v11 - 32;
    if (v11 < 32) {
      uint64_t v12 = v11 - 1;
    }
    *((void *)v10 + 2) = v8;
    *((void *)v10 + 3) = 2 * (v12 >> 5);
  }
  else
  {
    char v10 = (char *)MEMORY[0x263F8EE78];
  }
  uint64_t v13 = v10 + 32;
  uint64_t v14 = a4 + 32;
  unint64_t v15 = 32 * v8;
  if (v5)
  {
    if (v10 != a4 || v13 >= &v14[v15]) {
      memmove(v13, v14, v15);
    }
    *((void *)a4 + 2) = 0;
  }
  else
  {
    memcpy(v13, v14, v15);
  }
  swift_bridgeObjectRelease();
  return v10;
}

{
  char v5;
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  size_t v11;
  char *v12;
  char *v13;

  char v5 = (char)result;
  if (a3)
  {
    unint64_t v6 = *((void *)a4 + 3);
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v7 = a2;
      }
    }
  }
  else
  {
    int64_t v7 = a2;
  }
  uint64_t v8 = *((void *)a4 + 2);
  if (v7 <= v8) {
    uint64_t v9 = *((void *)a4 + 2);
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<DSLTree.CustomCharacterClass.AsciiBitset>);
    char v10 = (char *)swift_allocObject();
    int64_t v11 = _swift_stdlib_malloc_size(v10);
    *((void *)v10 + 2) = v8;
    *((void *)v10 + 3) = 2 * ((uint64_t)(v11 - 32) / 24);
  }
  else
  {
    char v10 = (char *)MEMORY[0x263F8EE78];
  }
  uint64_t v12 = v10 + 32;
  uint64_t v13 = a4 + 32;
  if (v5)
  {
    if (v10 != a4 || v12 >= &v13[24 * v8]) {
      memmove(v12, v13, 24 * v8);
    }
    *((void *)a4 + 2) = 0;
  }
  else
  {
    memcpy(v12, v13, 24 * v8);
  }
  swift_bridgeObjectRelease();
  return v10;
}

{
  char v5;
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  int64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;

  char v5 = (char)result;
  if (a3)
  {
    unint64_t v6 = *((void *)a4 + 3);
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v7 = a2;
      }
    }
  }
  else
  {
    int64_t v7 = a2;
  }
  uint64_t v8 = *((void *)a4 + 2);
  if (v7 <= v8) {
    uint64_t v9 = *((void *)a4 + 2);
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Character>);
    char v10 = (char *)swift_allocObject();
    int64_t v11 = _swift_stdlib_malloc_size(v10);
    uint64_t v12 = v11 - 32;
    if (v11 < 32) {
      uint64_t v12 = v11 - 17;
    }
    *((void *)v10 + 2) = v8;
    *((void *)v10 + 3) = 2 * (v12 >> 4);
  }
  else
  {
    char v10 = (char *)MEMORY[0x263F8EE78];
  }
  uint64_t v13 = v10 + 32;
  uint64_t v14 = a4 + 32;
  if (v5)
  {
    if (v10 != a4 || v13 >= &v14[16 * v8]) {
      memmove(v13, v14, 16 * v8);
    }
    *((void *)a4 + 2) = 0;
  }
  else
  {
    swift_arrayInitWithCopy();
  }
  swift_bridgeObjectRelease();
  return v10;
}

{
  char v5;
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  int64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;

  char v5 = (char)result;
  if (a3)
  {
    unint64_t v6 = *((void *)a4 + 3);
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v7 = a2;
      }
    }
  }
  else
  {
    int64_t v7 = a2;
  }
  uint64_t v8 = *((void *)a4 + 2);
  if (v7 <= v8) {
    uint64_t v9 = *((void *)a4 + 2);
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<MatchingOptions.Representation>);
    char v10 = (char *)swift_allocObject();
    int64_t v11 = _swift_stdlib_malloc_size(v10);
    uint64_t v12 = v11 - 32;
    if (v11 < 32) {
      uint64_t v12 = v11 - 29;
    }
    *((void *)v10 + 2) = v8;
    *((void *)v10 + 3) = 2 * (v12 >> 2);
  }
  else
  {
    char v10 = (char *)MEMORY[0x263F8EE78];
  }
  uint64_t v13 = v10 + 32;
  uint64_t v14 = a4 + 32;
  if (v5)
  {
    if (v10 != a4 || v13 >= &v14[4 * v8]) {
      memmove(v13, v14, 4 * v8);
    }
    *((void *)a4 + 2) = 0;
  }
  else
  {
    memcpy(v13, v14, 4 * v8);
  }
  swift_bridgeObjectRelease();
  return v10;
}

{
  char v5;
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  int64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;

  char v5 = (char)result;
  if (a3)
  {
    unint64_t v6 = *((void *)a4 + 3);
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v7 = a2;
      }
    }
  }
  else
  {
    int64_t v7 = a2;
  }
  uint64_t v8 = *((void *)a4 + 2);
  if (v7 <= v8) {
    uint64_t v9 = *((void *)a4 + 2);
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<String>);
    char v10 = (char *)swift_allocObject();
    int64_t v11 = _swift_stdlib_malloc_size(v10);
    uint64_t v12 = v11 - 32;
    if (v11 < 32) {
      uint64_t v12 = v11 - 17;
    }
    *((void *)v10 + 2) = v8;
    *((void *)v10 + 3) = 2 * (v12 >> 4);
  }
  else
  {
    char v10 = (char *)MEMORY[0x263F8EE78];
  }
  uint64_t v13 = v10 + 32;
  uint64_t v14 = a4 + 32;
  if (v5)
  {
    if (v10 != a4 || v13 >= &v14[16 * v8]) {
      memmove(v13, v14, 16 * v8);
    }
    *((void *)a4 + 2) = 0;
  }
  else
  {
    swift_arrayInitWithCopy();
  }
  swift_bridgeObjectRelease();
  return v10;
}

{
  char v5;
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  int64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;

  char v5 = (char)result;
  if (a3)
  {
    unint64_t v6 = *((void *)a4 + 3);
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v7 = a2;
      }
    }
  }
  else
  {
    int64_t v7 = a2;
  }
  uint64_t v8 = *((void *)a4 + 2);
  if (v7 <= v8) {
    uint64_t v9 = *((void *)a4 + 2);
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<DSLTree.Node>);
    char v10 = (char *)swift_allocObject();
    int64_t v11 = _swift_stdlib_malloc_size(v10);
    uint64_t v12 = v11 - 32;
    if (v11 < 32) {
      uint64_t v12 = v11 - 25;
    }
    *((void *)v10 + 2) = v8;
    *((void *)v10 + 3) = 2 * (v12 >> 3);
  }
  else
  {
    char v10 = (char *)MEMORY[0x263F8EE78];
  }
  uint64_t v13 = v10 + 32;
  uint64_t v14 = a4 + 32;
  if (v5)
  {
    if (v10 != a4 || v13 >= &v14[8 * v8]) {
      memmove(v13, v14, 8 * v8);
    }
    *((void *)a4 + 2) = 0;
  }
  else
  {
    swift_arrayInitWithCopy();
  }
  swift_bridgeObjectRelease();
  return v10;
}

{
  char v5;
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  size_t v11;
  char *v12;
  char *v13;

  char v5 = (char)result;
  if (a3)
  {
    unint64_t v6 = *((void *)a4 + 3);
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v7 = a2;
      }
    }
  }
  else
  {
    int64_t v7 = a2;
  }
  uint64_t v8 = *((void *)a4 + 2);
  if (v7 <= v8) {
    uint64_t v9 = *((void *)a4 + 2);
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Processor._StoredCapture>);
    char v10 = (char *)swift_allocObject();
    int64_t v11 = _swift_stdlib_malloc_size(v10);
    *((void *)v10 + 2) = v8;
    *((void *)v10 + 3) = 2 * ((uint64_t)(v11 - 32) / 72);
  }
  else
  {
    char v10 = (char *)MEMORY[0x263F8EE78];
  }
  uint64_t v12 = v10 + 32;
  uint64_t v13 = a4 + 32;
  if (v5)
  {
    if (v10 != a4 || v12 >= &v13[72 * v8]) {
      memmove(v12, v13, 72 * v8);
    }
    *((void *)a4 + 2) = 0;
  }
  else
  {
    swift_arrayInitWithCopy();
  }
  swift_bridgeObjectRelease();
  return v10;
}

{
  char v5;
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  size_t v11;
  char *v12;
  char *v13;

  char v5 = (char)result;
  if (a3)
  {
    unint64_t v6 = *((void *)a4 + 3);
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v7 = a2;
      }
    }
  }
  else
  {
    int64_t v7 = a2;
  }
  uint64_t v8 = *((void *)a4 + 2);
  if (v7 <= v8) {
    uint64_t v9 = *((void *)a4 + 2);
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Processor.SavePoint>);
    char v10 = (char *)swift_allocObject();
    int64_t v11 = _swift_stdlib_malloc_size(v10);
    *((void *)v10 + 2) = v8;
    *((void *)v10 + 3) = 2 * ((uint64_t)(v11 - 32) / 80);
  }
  else
  {
    char v10 = (char *)MEMORY[0x263F8EE78];
  }
  uint64_t v12 = v10 + 32;
  uint64_t v13 = a4 + 32;
  if (v5)
  {
    if (v10 != a4 || v12 >= &v13[80 * v8]) {
      memmove(v12, v13, 80 * v8);
    }
    *((void *)a4 + 2) = 0;
  }
  else
  {
    swift_arrayInitWithCopy();
  }
  swift_bridgeObjectRelease();
  return v10;
}

{
  char v5;
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  size_t v11;
  char *v12;
  char *v13;

  char v5 = (char)result;
  if (a3)
  {
    unint64_t v6 = *((void *)a4 + 3);
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v7 = a2;
      }
    }
  }
  else
  {
    int64_t v7 = a2;
  }
  uint64_t v8 = *((void *)a4 + 2);
  if (v7 <= v8) {
    uint64_t v9 = *((void *)a4 + 2);
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<AnyRegexOutput.ElementRepresentation>);
    char v10 = (char *)swift_allocObject();
    int64_t v11 = _swift_stdlib_malloc_size(v10);
    *((void *)v10 + 2) = v8;
    *((void *)v10 + 3) = 2 * ((uint64_t)(v11 - 32) / 88);
  }
  else
  {
    char v10 = (char *)MEMORY[0x263F8EE78];
  }
  uint64_t v12 = v10 + 32;
  uint64_t v13 = a4 + 32;
  if (v5)
  {
    if (v10 != a4 || v12 >= &v13[88 * v8]) {
      memmove(v12, v13, 88 * v8);
    }
    *((void *)a4 + 2) = 0;
  }
  else
  {
    swift_arrayInitWithCopy();
  }
  swift_bridgeObjectRelease();
  return v10;
}

{
  char v5;
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  int64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;

  char v5 = (char)result;
  if (a3)
  {
    unint64_t v6 = *((void *)a4 + 3);
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v7 = a2;
      }
    }
  }
  else
  {
    int64_t v7 = a2;
  }
  uint64_t v8 = *((void *)a4 + 2);
  if (v7 <= v8) {
    uint64_t v9 = *((void *)a4 + 2);
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Substring>);
    char v10 = (char *)swift_allocObject();
    int64_t v11 = _swift_stdlib_malloc_size(v10);
    uint64_t v12 = v11 - 32;
    if (v11 < 32) {
      uint64_t v12 = v11 - 1;
    }
    *((void *)v10 + 2) = v8;
    *((void *)v10 + 3) = 2 * (v12 >> 5);
  }
  else
  {
    char v10 = (char *)MEMORY[0x263F8EE78];
  }
  uint64_t v13 = v10 + 32;
  uint64_t v14 = a4 + 32;
  if (v5)
  {
    if (v10 != a4 || v13 >= &v14[32 * v8]) {
      memmove(v13, v14, 32 * v8);
    }
    *((void *)a4 + 2) = 0;
  }
  else
  {
    swift_arrayInitWithCopy();
  }
  swift_bridgeObjectRelease();
  return v10;
}

{
  char v5;
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  int64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;

  char v5 = (char)result;
  if (a3)
  {
    unint64_t v6 = *((void *)a4 + 3);
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v7 = a2;
      }
    }
  }
  else
  {
    int64_t v7 = a2;
  }
  uint64_t v8 = *((void *)a4 + 2);
  if (v7 <= v8) {
    uint64_t v9 = *((void *)a4 + 2);
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Any.Type>);
    char v10 = (char *)swift_allocObject();
    int64_t v11 = _swift_stdlib_malloc_size(v10);
    uint64_t v12 = v11 - 32;
    if (v11 < 32) {
      uint64_t v12 = v11 - 25;
    }
    *((void *)v10 + 2) = v8;
    *((void *)v10 + 3) = 2 * (v12 >> 3);
  }
  else
  {
    char v10 = (char *)MEMORY[0x263F8EE78];
  }
  uint64_t v13 = v10 + 32;
  uint64_t v14 = a4 + 32;
  if (v5)
  {
    if (v10 != a4 || v13 >= &v14[8 * v8]) {
      memmove(v13, v14, 8 * v8);
    }
    *((void *)a4 + 2) = 0;
  }
  else
  {
    memcpy(v13, v14, 8 * v8);
  }
  swift_bridgeObjectRelease();
  return v10;
}

char *specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(char *result, int64_t a2, char a3, char *a4, uint64_t *a5)
{
  char v6 = (char)result;
  if (a3)
  {
    unint64_t v7 = *((void *)a4 + 3);
    int64_t v8 = v7 >> 1;
    if ((uint64_t)(v7 >> 1) < a2)
    {
      if (v8 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      int64_t v8 = v7 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v7 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v8 = a2;
      }
    }
  }
  else
  {
    int64_t v8 = a2;
  }
  uint64_t v9 = *((void *)a4 + 2);
  if (v8 <= v9) {
    uint64_t v10 = *((void *)a4 + 2);
  }
  else {
    uint64_t v10 = v8;
  }
  if (v10)
  {
    __swift_instantiateConcreteTypeFromMangledName(a5);
    int64_t v11 = (char *)swift_allocObject();
    int64_t v12 = _swift_stdlib_malloc_size(v11);
    uint64_t v13 = v12 - 32;
    if (v12 < 32) {
      uint64_t v13 = v12 - 25;
    }
    *((void *)v11 + 2) = v9;
    *((void *)v11 + 3) = 2 * (v13 >> 3);
  }
  else
  {
    int64_t v11 = (char *)MEMORY[0x263F8EE78];
  }
  uint64_t v14 = v11 + 32;
  unint64_t v15 = a4 + 32;
  if (v6)
  {
    if (v11 != a4 || v14 >= &v15[8 * v9]) {
      memmove(v14, v15, 8 * v9);
    }
    *((void *)a4 + 2) = 0;
  }
  else
  {
    memcpy(v14, v15, 8 * v9);
  }
  swift_bridgeObjectRelease();
  return v11;
}

{
  char v6;
  unint64_t v7;
  int64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  size_t v12;
  char *v13;
  char *v14;

  char v6 = (char)result;
  if (a3)
  {
    unint64_t v7 = *((void *)a4 + 3);
    int64_t v8 = v7 >> 1;
    if ((uint64_t)(v7 >> 1) < a2)
    {
      if (v8 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      int64_t v8 = v7 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v7 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v8 = a2;
      }
    }
  }
  else
  {
    int64_t v8 = a2;
  }
  uint64_t v9 = *((void *)a4 + 2);
  if (v8 <= v9) {
    uint64_t v10 = *((void *)a4 + 2);
  }
  else {
    uint64_t v10 = v8;
  }
  if (v10)
  {
    __swift_instantiateConcreteTypeFromMangledName(a5);
    int64_t v11 = (char *)swift_allocObject();
    int64_t v12 = _swift_stdlib_malloc_size(v11);
    *((void *)v11 + 2) = v9;
    *((void *)v11 + 3) = 2 * ((uint64_t)(v12 - 32) / 24);
  }
  else
  {
    int64_t v11 = (char *)MEMORY[0x263F8EE78];
  }
  uint64_t v13 = v11 + 32;
  uint64_t v14 = a4 + 32;
  if (v6)
  {
    if (v11 != a4 || v13 >= &v14[24 * v9]) {
      memmove(v13, v14, 24 * v9);
    }
    *((void *)a4 + 2) = 0;
  }
  else
  {
    swift_arrayInitWithCopy();
  }
  swift_bridgeObjectRelease();
  return v11;
}

void *specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(void *result, int64_t a2, char a3, void *a4, uint64_t *a5)
{
  char v6 = (char)result;
  if (a3)
  {
    unint64_t v7 = a4[3];
    int64_t v8 = v7 >> 1;
    if ((uint64_t)(v7 >> 1) < a2)
    {
      if (v8 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      int64_t v8 = v7 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v7 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v8 = a2;
      }
    }
  }
  else
  {
    int64_t v8 = a2;
  }
  uint64_t v9 = a4[2];
  if (v8 <= v9) {
    uint64_t v10 = a4[2];
  }
  else {
    uint64_t v10 = v8;
  }
  if (v10)
  {
    __swift_instantiateConcreteTypeFromMangledName(a5);
    int64_t v11 = (void *)swift_allocObject();
    int64_t v12 = _swift_stdlib_malloc_size(v11);
    uint64_t v13 = v12 - 32;
    if (v12 < 32) {
      uint64_t v13 = v12 - 17;
    }
    uint64_t v11[2] = v9;
    v11[3] = 2 * (v13 >> 4);
  }
  else
  {
    int64_t v11 = (void *)MEMORY[0x263F8EE78];
  }
  if (v6)
  {
    if (v11 != a4 || v11 + 4 >= &a4[2 * v9 + 4]) {
      memmove(v11 + 4, a4 + 4, 16 * v9);
    }
    a4[2] = 0;
  }
  else
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ());
    swift_arrayInitWithCopy();
  }
  swift_bridgeObjectRelease();
  return v11;
}

size_t specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(size_t result, int64_t a2, char a3, void *a4, uint64_t *a5, uint64_t (*a6)(void))
{
  char v8 = result;
  if (a3)
  {
    unint64_t v9 = a4[3];
    int64_t v10 = v9 >> 1;
    if ((uint64_t)(v9 >> 1) < a2)
    {
      if (v10 + 0x4000000000000000 < 0)
      {
LABEL_30:
        __break(1u);
        return result;
      }
      int64_t v10 = v9 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v9 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v10 = a2;
      }
    }
  }
  else
  {
    int64_t v10 = a2;
  }
  uint64_t v11 = a4[2];
  if (v10 <= v11) {
    uint64_t v12 = a4[2];
  }
  else {
    uint64_t v12 = v10;
  }
  if (!v12)
  {
    uint64_t v16 = (void *)MEMORY[0x263F8EE78];
    goto LABEL_19;
  }
  __swift_instantiateConcreteTypeFromMangledName(a5);
  uint64_t v13 = *(void *)(a6(0) - 8);
  uint64_t v14 = *(void *)(v13 + 72);
  unint64_t v15 = (*(unsigned __int8 *)(v13 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v13 + 80);
  uint64_t v16 = (void *)swift_allocObject();
  unint64_t result = _swift_stdlib_malloc_size(v16);
  if (!v14)
  {
    __break(1u);
LABEL_29:
    __break(1u);
    goto LABEL_30;
  }
  if (result - v15 == 0x8000000000000000 && v14 == -1) {
    goto LABEL_29;
  }
  void v16[2] = v11;
  v16[3] = 2 * ((uint64_t)(result - v15) / v14);
LABEL_19:
  uint64_t v18 = *(void *)(a6(0) - 8);
  if (v8)
  {
    if (v16 < a4
      || (unint64_t v19 = (*(unsigned __int8 *)(v18 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v18 + 80),
          (char *)v16 + v19 >= (char *)a4 + v19 + *(void *)(v18 + 72) * v11))
    {
      swift_arrayInitWithTakeFrontToBack();
    }
    else if (v16 != a4)
    {
      swift_arrayInitWithTakeBackToFront();
    }
    a4[2] = 0;
  }
  else
  {
    swift_arrayInitWithCopy();
  }
  swift_bridgeObjectRelease();
  return (size_t)v16;
}

unint64_t specialized __RawDictionaryStorage.find<A>(_:)(Swift::UInt a1)
{
  Hasher.init(_seed:)();
  Hasher._combine(_:)(a1);
  Swift::Int v2 = Hasher._finalize()();

  return specialized __RawDictionaryStorage.find<A>(_:hashValue:)(a1, v2);
}

unint64_t specialized __RawDictionaryStorage.find<A>(_:)(uint64_t a1, uint64_t a2)
{
  Hasher.init(_seed:)();
  MEMORY[0x21050EE80](v6, a1, a2);
  Swift::Int v4 = Hasher._finalize()();

  return specialized __RawDictionaryStorage.find<A>(_:hashValue:)(a1, a2, v4);
}

unint64_t specialized __RawDictionaryStorage.find<A>(_:)(uint64_t a1)
{
  Hasher.init(_seed:)();
  Swift::UInt v2 = *(void *)(a1 + 16);
  Hasher._combine(_:)(v2);
  if (v2)
  {
    unint64_t v3 = (void *)(a1 + 40);
    do
    {
      MEMORY[0x21050EE80](v6, *(v3 - 1), *v3);
      v3 += 2;
      --v2;
    }
    while (v2);
  }
  Swift::Int v4 = Hasher._finalize()();

  return specialized __RawDictionaryStorage.find<A>(_:hashValue:)(a1, v4);
}

uint64_t specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(uint64_t a1, char a2)
{
  unint64_t v3 = v2;
  uint64_t v5 = *v2;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<ReferenceID, Int>);
  uint64_t result = static _DictionaryStorage.resize(original:capacity:move:)();
  uint64_t v7 = result;
  if (!*(void *)(v5 + 16))
  {
LABEL_43:
    uint64_t result = swift_release();
LABEL_44:
    *unint64_t v3 = v7;
    return result;
  }
  char v39 = a2;
  int64_t v8 = 0;
  uint64_t v40 = (void *)(v5 + 64);
  uint64_t v9 = 1 << *(unsigned char *)(v5 + 32);
  if (v9 < 64) {
    uint64_t v10 = ~(-1 << v9);
  }
  else {
    uint64_t v10 = -1;
  }
  unint64_t v11 = v10 & *(void *)(v5 + 64);
  int64_t v12 = (unint64_t)(v9 + 63) >> 6;
  uint64_t v13 = result + 64;
  while (1)
  {
    if (v11)
    {
      unint64_t v16 = __clz(__rbit64(v11));
      v11 &= v11 - 1;
      unint64_t v17 = v16 | (v8 << 6);
      goto LABEL_22;
    }
    int64_t v18 = v8 + 1;
    if (__OFADD__(v8, 1))
    {
LABEL_45:
      __break(1u);
      goto LABEL_46;
    }
    if (v18 >= v12) {
      goto LABEL_31;
    }
    unint64_t v19 = v40[v18];
    ++v8;
    if (!v19)
    {
      int64_t v8 = v18 + 1;
      if (v18 + 1 >= v12) {
        goto LABEL_31;
      }
      unint64_t v19 = v40[v8];
      if (!v19) {
        break;
      }
    }
LABEL_21:
    unint64_t v11 = (v19 - 1) & v19;
    unint64_t v17 = __clz(__rbit64(v19)) + (v8 << 6);
LABEL_22:
    uint64_t v21 = 8 * v17;
    Swift::UInt v22 = *(void *)(*(void *)(v5 + 48) + v21);
    uint64_t v23 = *(void *)(*(void *)(v5 + 56) + v21);
    Hasher.init(_seed:)();
    Hasher._combine(_:)(v22);
    uint64_t result = Hasher._finalize()();
    uint64_t v24 = -1 << *(unsigned char *)(v7 + 32);
    unint64_t v25 = result & ~v24;
    unint64_t v26 = v25 >> 6;
    if (((-1 << v25) & ~*(void *)(v13 + 8 * (v25 >> 6))) != 0)
    {
      unint64_t v14 = __clz(__rbit64((-1 << v25) & ~*(void *)(v13 + 8 * (v25 >> 6)))) | v25 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      char v27 = 0;
      unint64_t v28 = (unint64_t)(63 - v24) >> 6;
      do
      {
        if (++v26 == v28 && (v27 & 1) != 0)
        {
          __break(1u);
          goto LABEL_45;
        }
        BOOL v29 = v26 == v28;
        if (v26 == v28) {
          unint64_t v26 = 0;
        }
        v27 |= v29;
        uint64_t v30 = *(void *)(v13 + 8 * v26);
      }
      while (v30 == -1);
      unint64_t v14 = __clz(__rbit64(~v30)) + (v26 << 6);
    }
    *(void *)(v13 + ((v14 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v14;
    uint64_t v15 = 8 * v14;
    *(void *)(*(void *)(v7 + 48) + v15) = v22;
    *(void *)(*(void *)(v7 + 56) + v15) = v23;
    ++*(void *)(v7 + 16);
  }
  int64_t v20 = v18 + 2;
  if (v20 >= v12)
  {
LABEL_31:
    if ((v39 & 1) == 0)
    {
      uint64_t result = swift_release();
      unint64_t v3 = v2;
      goto LABEL_44;
    }
    char v31 = *(unsigned char *)(v5 + 32);
    uint64_t v32 = 1 << v31;
    if (1 << v31 >= 64)
    {
      unint64_t v33 = (unint64_t)(v32 + 63) >> 6;
      if ((v31 & 0x3Fu) >= 8)
      {
        uint64_t v34 = v33 & 0x3FFFFFFFFFFFFFCLL;
        uint64_t v35 = (_OWORD *)(v5 + 80);
        uint64_t v36 = v33 & 0x3FFFFFFFFFFFFFCLL;
        unint64_t v3 = v2;
        do
        {
          *(v35 - 1) = 0uLL;
          *uint64_t v35 = 0uLL;
          v35 += 2;
          v36 -= 4;
        }
        while (v36);
        if (v33 == v34) {
          goto LABEL_42;
        }
      }
      else
      {
        uint64_t v34 = 0;
        unint64_t v3 = v2;
      }
      unint64_t v37 = v33 - v34;
      unint64_t v38 = (void *)(v5 + 8 * v34 + 64);
      do
      {
        *v38++ = 0;
        --v37;
      }
      while (v37);
    }
    else
    {
      *uint64_t v40 = -1 << v32;
      unint64_t v3 = v2;
    }
LABEL_42:
    *(void *)(v5 + 16) = 0;
    goto LABEL_43;
  }
  unint64_t v19 = v40[v20];
  if (v19)
  {
    int64_t v8 = v20;
    goto LABEL_21;
  }
  while (1)
  {
    int64_t v8 = v20 + 1;
    if (__OFADD__(v20, 1)) {
      break;
    }
    if (v8 >= v12) {
      goto LABEL_31;
    }
    unint64_t v19 = v40[v8];
    ++v20;
    if (v19) {
      goto LABEL_21;
    }
  }
LABEL_46:
  __break(1u);
  return result;
}

{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t result;
  uint64_t v7;
  int64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  void *v17;
  unint64_t v18;
  unint64_t v19;
  int64_t v20;
  unint64_t v21;
  int64_t v22;
  char v23;
  unint64_t v24;
  BOOL v25;
  uint64_t v26;
  uint64_t *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  char v31;
  uint64_t v32;
  unint64_t v33;
  uint64_t v34;
  _OWORD *v35;
  uint64_t v36;
  unint64_t v37;
  void *v38;
  int64_t v39;
  void *v40;
  char v41;
  char v42[72];

  unint64_t v3 = v2;
  uint64_t v5 = *v2;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<Character, TypedInt<_ElementRegister>>);
  uint64_t v41 = a2;
  uint64_t result = static _DictionaryStorage.resize(original:capacity:move:)();
  uint64_t v7 = result;
  if (!*(void *)(v5 + 16))
  {
LABEL_45:
    uint64_t result = swift_release();
LABEL_46:
    *unint64_t v3 = v7;
    return result;
  }
  int64_t v8 = 0;
  uint64_t v40 = (void *)(v5 + 64);
  uint64_t v9 = 1 << *(unsigned char *)(v5 + 32);
  if (v9 < 64) {
    uint64_t v10 = ~(-1 << v9);
  }
  else {
    uint64_t v10 = -1;
  }
  unint64_t v11 = v10 & *(void *)(v5 + 64);
  char v39 = (unint64_t)(v9 + 63) >> 6;
  int64_t v12 = result + 64;
  while (1)
  {
    if (v11)
    {
      int64_t v18 = __clz(__rbit64(v11));
      v11 &= v11 - 1;
      unint64_t v19 = v18 | (v8 << 6);
      goto LABEL_31;
    }
    int64_t v20 = v8 + 1;
    if (__OFADD__(v8, 1))
    {
LABEL_47:
      __break(1u);
      goto LABEL_48;
    }
    if (v20 >= v39) {
      goto LABEL_33;
    }
    uint64_t v21 = v40[v20];
    ++v8;
    if (!v21)
    {
      int64_t v8 = v20 + 1;
      if (v20 + 1 >= v39) {
        goto LABEL_33;
      }
      uint64_t v21 = v40[v8];
      if (!v21) {
        break;
      }
    }
LABEL_30:
    unint64_t v11 = (v21 - 1) & v21;
    unint64_t v19 = __clz(__rbit64(v21)) + (v8 << 6);
LABEL_31:
    char v27 = (uint64_t *)(*(void *)(v5 + 48) + 16 * v19);
    BOOL v29 = *v27;
    unint64_t v28 = v27[1];
    uint64_t v30 = *(void *)(*(void *)(v5 + 56) + 8 * v19);
    if ((v41 & 1) == 0) {
      swift_bridgeObjectRetain();
    }
    Hasher.init(_seed:)();
    MEMORY[0x21050EE80](v42, v29, v28);
    uint64_t result = Hasher._finalize()();
    uint64_t v13 = -1 << *(unsigned char *)(v7 + 32);
    unint64_t v14 = result & ~v13;
    uint64_t v15 = v14 >> 6;
    if (((-1 << v14) & ~*(void *)(v12 + 8 * (v14 >> 6))) != 0)
    {
      unint64_t v16 = __clz(__rbit64((-1 << v14) & ~*(void *)(v12 + 8 * (v14 >> 6)))) | v14 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      uint64_t v23 = 0;
      uint64_t v24 = (unint64_t)(63 - v13) >> 6;
      do
      {
        if (++v15 == v24 && (v23 & 1) != 0)
        {
          __break(1u);
          goto LABEL_47;
        }
        unint64_t v25 = v15 == v24;
        if (v15 == v24) {
          uint64_t v15 = 0;
        }
        v23 |= v25;
        unint64_t v26 = *(void *)(v12 + 8 * v15);
      }
      while (v26 == -1);
      unint64_t v16 = __clz(__rbit64(~v26)) + (v15 << 6);
    }
    *(void *)(v12 + ((v16 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v16;
    unint64_t v17 = (void *)(*(void *)(v7 + 48) + 16 * v16);
    char *v17 = v29;
    v17[1] = v28;
    *(void *)(*(void *)(v7 + 56) + 8 * v16) = v30;
    ++*(void *)(v7 + 16);
  }
  Swift::UInt v22 = v20 + 2;
  if (v22 >= v39)
  {
LABEL_33:
    if ((v41 & 1) == 0)
    {
      uint64_t result = swift_release();
      unint64_t v3 = v2;
      goto LABEL_46;
    }
    char v31 = *(unsigned char *)(v5 + 32);
    uint64_t v32 = 1 << v31;
    if (1 << v31 >= 64)
    {
      unint64_t v33 = (unint64_t)(v32 + 63) >> 6;
      if ((v31 & 0x3Fu) >= 8)
      {
        uint64_t v34 = v33 & 0x3FFFFFFFFFFFFFCLL;
        uint64_t v35 = (_OWORD *)(v5 + 80);
        uint64_t v36 = v33 & 0x3FFFFFFFFFFFFFCLL;
        unint64_t v3 = v2;
        do
        {
          *(v35 - 1) = 0uLL;
          *uint64_t v35 = 0uLL;
          v35 += 2;
          v36 -= 4;
        }
        while (v36);
        if (v33 == v34) {
          goto LABEL_44;
        }
      }
      else
      {
        uint64_t v34 = 0;
        unint64_t v3 = v2;
      }
      unint64_t v37 = v33 - v34;
      unint64_t v38 = (void *)(v5 + 8 * v34 + 64);
      do
      {
        *v38++ = 0;
        --v37;
      }
      while (v37);
    }
    else
    {
      *uint64_t v40 = -1 << v32;
      unint64_t v3 = v2;
    }
LABEL_44:
    *(void *)(v5 + 16) = 0;
    goto LABEL_45;
  }
  uint64_t v21 = v40[v22];
  if (v21)
  {
    int64_t v8 = v22;
    goto LABEL_30;
  }
  while (1)
  {
    int64_t v8 = v22 + 1;
    if (__OFADD__(v22, 1)) {
      break;
    }
    if (v8 >= v39) {
      goto LABEL_33;
    }
    uint64_t v21 = v40[v8];
    ++v22;
    if (v21) {
      goto LABEL_30;
    }
  }
LABEL_48:
  __break(1u);
  return result;
}

{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t result;
  uint64_t v7;
  int64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  int64_t v20;
  unint64_t v21;
  int64_t v22;
  char v23;
  unint64_t v24;
  BOOL v25;
  uint64_t v26;
  uint64_t v27;
  Swift::UInt v28;
  uint64_t v29;
  char v30;
  uint64_t v31;
  unint64_t v32;
  uint64_t v33;
  _OWORD *v34;
  uint64_t v35;
  unint64_t v36;
  void *v37;
  int64_t v38;
  void *v39;

  unint64_t v3 = v2;
  uint64_t v5 = *v2;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<ReferenceID, [TypedInt<_InstructionAddress>]>);
  uint64_t result = static _DictionaryStorage.resize(original:capacity:move:)();
  uint64_t v7 = result;
  if (!*(void *)(v5 + 16))
  {
LABEL_45:
    uint64_t result = swift_release();
LABEL_46:
    *unint64_t v3 = v7;
    return result;
  }
  int64_t v8 = 0;
  char v39 = (void *)(v5 + 64);
  uint64_t v9 = 1 << *(unsigned char *)(v5 + 32);
  if (v9 < 64) {
    uint64_t v10 = ~(-1 << v9);
  }
  else {
    uint64_t v10 = -1;
  }
  unint64_t v11 = v10 & *(void *)(v5 + 64);
  unint64_t v38 = (unint64_t)(v9 + 63) >> 6;
  int64_t v12 = result + 64;
  while (1)
  {
    if (v11)
    {
      int64_t v18 = __clz(__rbit64(v11));
      v11 &= v11 - 1;
      unint64_t v19 = v18 | (v8 << 6);
      goto LABEL_31;
    }
    int64_t v20 = v8 + 1;
    if (__OFADD__(v8, 1))
    {
LABEL_47:
      __break(1u);
      goto LABEL_48;
    }
    if (v20 >= v38) {
      goto LABEL_33;
    }
    uint64_t v21 = v39[v20];
    ++v8;
    if (!v21)
    {
      int64_t v8 = v20 + 1;
      if (v20 + 1 >= v38) {
        goto LABEL_33;
      }
      uint64_t v21 = v39[v8];
      if (!v21) {
        break;
      }
    }
LABEL_30:
    unint64_t v11 = (v21 - 1) & v21;
    unint64_t v19 = __clz(__rbit64(v21)) + (v8 << 6);
LABEL_31:
    char v27 = 8 * v19;
    unint64_t v28 = *(void *)(*(void *)(v5 + 48) + v27);
    BOOL v29 = *(void *)(*(void *)(v5 + 56) + v27);
    if ((a2 & 1) == 0) {
      swift_bridgeObjectRetain();
    }
    Hasher.init(_seed:)();
    Hasher._combine(_:)(v28);
    uint64_t result = Hasher._finalize()();
    uint64_t v13 = -1 << *(unsigned char *)(v7 + 32);
    unint64_t v14 = result & ~v13;
    uint64_t v15 = v14 >> 6;
    if (((-1 << v14) & ~*(void *)(v12 + 8 * (v14 >> 6))) != 0)
    {
      unint64_t v16 = __clz(__rbit64((-1 << v14) & ~*(void *)(v12 + 8 * (v14 >> 6)))) | v14 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      uint64_t v23 = 0;
      uint64_t v24 = (unint64_t)(63 - v13) >> 6;
      do
      {
        if (++v15 == v24 && (v23 & 1) != 0)
        {
          __break(1u);
          goto LABEL_47;
        }
        unint64_t v25 = v15 == v24;
        if (v15 == v24) {
          uint64_t v15 = 0;
        }
        v23 |= v25;
        unint64_t v26 = *(void *)(v12 + 8 * v15);
      }
      while (v26 == -1);
      unint64_t v16 = __clz(__rbit64(~v26)) + (v15 << 6);
    }
    *(void *)(v12 + ((v16 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v16;
    unint64_t v17 = 8 * v16;
    *(void *)(*(void *)(v7 + 48) + v17) = v28;
    *(void *)(*(void *)(v7 + 56) + v17) = v29;
    ++*(void *)(v7 + 16);
  }
  Swift::UInt v22 = v20 + 2;
  if (v22 >= v38)
  {
LABEL_33:
    if ((a2 & 1) == 0)
    {
      uint64_t result = swift_release();
      unint64_t v3 = v2;
      goto LABEL_46;
    }
    uint64_t v30 = *(unsigned char *)(v5 + 32);
    char v31 = 1 << v30;
    if (1 << v30 >= 64)
    {
      uint64_t v32 = (unint64_t)(v31 + 63) >> 6;
      if ((v30 & 0x3Fu) >= 8)
      {
        unint64_t v33 = v32 & 0x3FFFFFFFFFFFFFCLL;
        uint64_t v34 = (_OWORD *)(v5 + 80);
        uint64_t v35 = v32 & 0x3FFFFFFFFFFFFFCLL;
        unint64_t v3 = v2;
        do
        {
          *(v34 - 1) = 0uLL;
          *uint64_t v34 = 0uLL;
          v34 += 2;
          v35 -= 4;
        }
        while (v35);
        if (v32 == v33) {
          goto LABEL_44;
        }
      }
      else
      {
        unint64_t v33 = 0;
        unint64_t v3 = v2;
      }
      uint64_t v36 = v32 - v33;
      unint64_t v37 = (void *)(v5 + 8 * v33 + 64);
      do
      {
        *v37++ = 0;
        --v36;
      }
      while (v36);
    }
    else
    {
      *char v39 = -1 << v31;
      unint64_t v3 = v2;
    }
LABEL_44:
    *(void *)(v5 + 16) = 0;
    goto LABEL_45;
  }
  uint64_t v21 = v39[v22];
  if (v21)
  {
    int64_t v8 = v22;
    goto LABEL_30;
  }
  while (1)
  {
    int64_t v8 = v22 + 1;
    if (__OFADD__(v22, 1)) {
      break;
    }
    if (v8 >= v38) {
      goto LABEL_33;
    }
    uint64_t v21 = v39[v8];
    ++v22;
    if (v21) {
      goto LABEL_30;
    }
  }
LABEL_48:
  __break(1u);
  return result;
}

{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t result;
  uint64_t v7;
  int64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  void *v17;
  unint64_t v18;
  unint64_t v19;
  int64_t v20;
  unint64_t v21;
  int64_t v22;
  char v23;
  unint64_t v24;
  BOOL v25;
  uint64_t v26;
  uint64_t *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  char v31;
  uint64_t v32;
  unint64_t v33;
  uint64_t v34;
  _OWORD *v35;
  uint64_t v36;
  unint64_t v37;
  void *v38;
  int64_t v39;
  void *v40;
  char v41;
  char v42[72];

  unint64_t v3 = v2;
  uint64_t v5 = *v2;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<Character, Int>);
  uint64_t v41 = a2;
  uint64_t result = static _DictionaryStorage.resize(original:capacity:move:)();
  uint64_t v7 = result;
  if (!*(void *)(v5 + 16))
  {
LABEL_45:
    uint64_t result = swift_release();
LABEL_46:
    *unint64_t v3 = v7;
    return result;
  }
  int64_t v8 = 0;
  uint64_t v40 = (void *)(v5 + 64);
  uint64_t v9 = 1 << *(unsigned char *)(v5 + 32);
  if (v9 < 64) {
    uint64_t v10 = ~(-1 << v9);
  }
  else {
    uint64_t v10 = -1;
  }
  unint64_t v11 = v10 & *(void *)(v5 + 64);
  char v39 = (unint64_t)(v9 + 63) >> 6;
  int64_t v12 = result + 64;
  while (1)
  {
    if (v11)
    {
      int64_t v18 = __clz(__rbit64(v11));
      v11 &= v11 - 1;
      unint64_t v19 = v18 | (v8 << 6);
      goto LABEL_31;
    }
    int64_t v20 = v8 + 1;
    if (__OFADD__(v8, 1))
    {
LABEL_47:
      __break(1u);
      goto LABEL_48;
    }
    if (v20 >= v39) {
      goto LABEL_33;
    }
    uint64_t v21 = v40[v20];
    ++v8;
    if (!v21)
    {
      int64_t v8 = v20 + 1;
      if (v20 + 1 >= v39) {
        goto LABEL_33;
      }
      uint64_t v21 = v40[v8];
      if (!v21) {
        break;
      }
    }
LABEL_30:
    unint64_t v11 = (v21 - 1) & v21;
    unint64_t v19 = __clz(__rbit64(v21)) + (v8 << 6);
LABEL_31:
    char v27 = (uint64_t *)(*(void *)(v5 + 48) + 16 * v19);
    BOOL v29 = *v27;
    unint64_t v28 = v27[1];
    uint64_t v30 = *(void *)(*(void *)(v5 + 56) + 8 * v19);
    if ((v41 & 1) == 0) {
      swift_bridgeObjectRetain();
    }
    Hasher.init(_seed:)();
    MEMORY[0x21050EE80](v42, v29, v28);
    uint64_t result = Hasher._finalize()();
    uint64_t v13 = -1 << *(unsigned char *)(v7 + 32);
    unint64_t v14 = result & ~v13;
    uint64_t v15 = v14 >> 6;
    if (((-1 << v14) & ~*(void *)(v12 + 8 * (v14 >> 6))) != 0)
    {
      unint64_t v16 = __clz(__rbit64((-1 << v14) & ~*(void *)(v12 + 8 * (v14 >> 6)))) | v14 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      uint64_t v23 = 0;
      uint64_t v24 = (unint64_t)(63 - v13) >> 6;
      do
      {
        if (++v15 == v24 && (v23 & 1) != 0)
        {
          __break(1u);
          goto LABEL_47;
        }
        unint64_t v25 = v15 == v24;
        if (v15 == v24) {
          uint64_t v15 = 0;
        }
        v23 |= v25;
        unint64_t v26 = *(void *)(v12 + 8 * v15);
      }
      while (v26 == -1);
      unint64_t v16 = __clz(__rbit64(~v26)) + (v15 << 6);
    }
    *(void *)(v12 + ((v16 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v16;
    unint64_t v17 = (void *)(*(void *)(v7 + 48) + 16 * v16);
    char *v17 = v29;
    v17[1] = v28;
    *(void *)(*(void *)(v7 + 56) + 8 * v16) = v30;
    ++*(void *)(v7 + 16);
  }
  Swift::UInt v22 = v20 + 2;
  if (v22 >= v39)
  {
LABEL_33:
    if ((v41 & 1) == 0)
    {
      uint64_t result = swift_release();
      unint64_t v3 = v2;
      goto LABEL_46;
    }
    char v31 = *(unsigned char *)(v5 + 32);
    uint64_t v32 = 1 << v31;
    if (1 << v31 >= 64)
    {
      unint64_t v33 = (unint64_t)(v32 + 63) >> 6;
      if ((v31 & 0x3Fu) >= 8)
      {
        uint64_t v34 = v33 & 0x3FFFFFFFFFFFFFCLL;
        uint64_t v35 = (_OWORD *)(v5 + 80);
        uint64_t v36 = v33 & 0x3FFFFFFFFFFFFFCLL;
        unint64_t v3 = v2;
        do
        {
          *(v35 - 1) = 0uLL;
          *uint64_t v35 = 0uLL;
          v35 += 2;
          v36 -= 4;
        }
        while (v36);
        if (v33 == v34) {
          goto LABEL_44;
        }
      }
      else
      {
        uint64_t v34 = 0;
        unint64_t v3 = v2;
      }
      unint64_t v37 = v33 - v34;
      unint64_t v38 = (void *)(v5 + 8 * v34 + 64);
      do
      {
        *v38++ = 0;
        --v37;
      }
      while (v37);
    }
    else
    {
      *uint64_t v40 = -1 << v32;
      unint64_t v3 = v2;
    }
LABEL_44:
    *(void *)(v5 + 16) = 0;
    goto LABEL_45;
  }
  uint64_t v21 = v40[v22];
  if (v21)
  {
    int64_t v8 = v22;
    goto LABEL_30;
  }
  while (1)
  {
    int64_t v8 = v22 + 1;
    if (__OFADD__(v22, 1)) {
      break;
    }
    if (v8 >= v39) {
      goto LABEL_33;
    }
    uint64_t v21 = v40[v8];
    ++v22;
    if (v21) {
      goto LABEL_30;
    }
  }
LABEL_48:
  __break(1u);
  return result;
}

uint64_t specialized _NativeDictionary.setValue(_:forKey:isUnique:)(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  uint64_t v5 = v4;
  uint64_t v10 = *v4;
  unint64_t v12 = specialized __RawDictionaryStorage.find<A>(_:)(a2, a3);
  uint64_t v13 = *(void *)(v10 + 16);
  BOOL v14 = (v11 & 1) == 0;
  uint64_t result = v13 + v14;
  if (__OFADD__(v13, v14))
  {
    __break(1u);
    goto LABEL_16;
  }
  char v16 = v11;
  uint64_t v17 = *(void *)(v10 + 24);
  if (v17 >= result && (a4 & 1) != 0) {
    goto LABEL_7;
  }
  if (v17 >= result && (a4 & 1) == 0)
  {
    uint64_t result = (uint64_t)specialized _NativeDictionary.copy()();
LABEL_7:
    int64_t v18 = (void *)*v5;
    if (v16)
    {
LABEL_8:
      *(void *)(v18[7] + 8 * v12) = a1;
      return result;
    }
    goto LABEL_11;
  }
  specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(result, a4 & 1);
  uint64_t result = specialized __RawDictionaryStorage.find<A>(_:)(a2, a3);
  if ((v16 & 1) != (v19 & 1))
  {
LABEL_17:
    uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
    __break(1u);
    return result;
  }
  unint64_t v12 = result;
  int64_t v18 = (void *)*v5;
  if (v16) {
    goto LABEL_8;
  }
LABEL_11:
  v18[(v12 >> 6) + 8] |= 1 << v12;
  int64_t v20 = (uint64_t *)(v18[6] + 16 * v12);
  *int64_t v20 = a2;
  v20[1] = a3;
  *(void *)(v18[7] + 8 * v12) = a1;
  uint64_t v21 = v18[2];
  BOOL v22 = __OFADD__(v21, 1);
  uint64_t v23 = v21 + 1;
  if (v22)
  {
LABEL_16:
    __break(1u);
    goto LABEL_17;
  }
  void v18[2] = v23;

  return swift_bridgeObjectRetain();
}

unint64_t specialized __RawDictionaryStorage.find<A>(_:hashValue:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = -1 << *(unsigned char *)(v2 + 32);
  unint64_t result = a2 & ~v4;
  if ((*(void *)(v2 + 64 + ((result >> 3) & 0xFFFFFFFFFFFFFF8)) >> result))
  {
    uint64_t v6 = ~v4;
    do
    {
      if (*(void *)(*(void *)(v2 + 48) + 8 * result) == a1) {
        break;
      }
      unint64_t result = (result + 1) & v6;
    }
    while (((*(void *)(v2 + 64 + ((result >> 3) & 0xFFFFFFFFFFFFFF8)) >> result) & 1) != 0);
  }
  return result;
}

{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  uint64_t v11;
  void *v12;
  void *v13;
  uint64_t v14;
  BOOL v15;

  unint64_t v3 = v2 + 64;
  uint64_t v4 = -1 << *(unsigned char *)(v2 + 32);
  uint64_t v5 = a2 & ~v4;
  if ((*(void *)(v2 + 64 + ((v5 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v5))
  {
    uint64_t v7 = ~v4;
    int64_t v8 = *(void *)(a1 + 16);
    uint64_t v9 = *(void *)(v2 + 48);
    uint64_t v10 = (void *)(a1 + 40);
    do
    {
      char v11 = *(void *)(v9 + 8 * v5);
      if (*(void *)(v11 + 16) == v8)
      {
        if (!v8 || v11 == a1) {
          return v5;
        }
        unint64_t v12 = (void *)(v11 + 40);
        uint64_t v13 = v10;
        BOOL v14 = v8;
        while (1)
        {
          uint64_t v15 = *(v12 - 1) == *(v13 - 1) && *v12 == *v13;
          if (!v15 && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0) {
            break;
          }
          v12 += 2;
          v13 += 2;
          if (!--v14) {
            return v5;
          }
        }
      }
      uint64_t v5 = (v5 + 1) & v7;
    }
    while (((*(void *)(v3 + ((v5 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v5) & 1) != 0);
  }
  return v5;
}

unint64_t specialized __RawDictionaryStorage.find<A>(_:hashValue:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = v3 + 64;
  uint64_t v5 = -1 << *(unsigned char *)(v3 + 32);
  unint64_t v6 = a3 & ~v5;
  if ((*(void *)(v3 + 64 + ((v6 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v6))
  {
    uint64_t v9 = ~v5;
    uint64_t v10 = *(void *)(v3 + 48);
    do
    {
      char v11 = (void *)(v10 + 16 * v6);
      if (*v11 == a1 && v11[1] == a2) {
        break;
      }
      if (_stringCompareWithSmolCheck(_:_:expecting:)()) {
        break;
      }
      unint64_t v6 = (v6 + 1) & v9;
    }
    while (((*(void *)(v4 + ((v6 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v6) & 1) != 0);
  }
  return v6;
}

void *specialized _NativeDictionary.copy()()
{
  unint64_t v1 = v0;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<ReferenceID, Int>);
  uint64_t v2 = *v0;
  uint64_t v3 = static _DictionaryStorage.copy(original:)();
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
LABEL_26:
    unint64_t result = (void *)swift_release();
    *unint64_t v1 = v4;
    return result;
  }
  unint64_t result = (void *)(v3 + 64);
  uint64_t v6 = v2 + 64;
  unint64_t v7 = (unint64_t)((1 << *(unsigned char *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7) {
    unint64_t result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  }
  int64_t v9 = 0;
  *(void *)(v4 + 16) = *(void *)(v2 + 16);
  uint64_t v10 = 1 << *(unsigned char *)(v2 + 32);
  uint64_t v11 = -1;
  if (v10 < 64) {
    uint64_t v11 = ~(-1 << v10);
  }
  unint64_t v12 = v11 & *(void *)(v2 + 64);
  int64_t v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      unint64_t v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      unint64_t v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    int64_t v18 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v18 >= v13) {
      goto LABEL_26;
    }
    unint64_t v19 = *(void *)(v6 + 8 * v18);
    ++v9;
    if (!v19)
    {
      int64_t v9 = v18 + 1;
      if (v18 + 1 >= v13) {
        goto LABEL_26;
      }
      unint64_t v19 = *(void *)(v6 + 8 * v9);
      if (!v19) {
        break;
      }
    }
LABEL_25:
    unint64_t v21 = __clz(__rbit64(v19));
    unint64_t v12 = (v19 - 1) & v19;
    unint64_t v15 = v21 + (v9 << 6);
LABEL_12:
    uint64_t v16 = 8 * v15;
    uint64_t v17 = *(void *)(*(void *)(v2 + 56) + v16);
    *(void *)(*(void *)(v4 + 48) + v16) = *(void *)(*(void *)(v2 + 48) + v16);
    *(void *)(*(void *)(v4 + 56) + v16) = v17;
  }
  int64_t v20 = v18 + 2;
  if (v20 >= v13) {
    goto LABEL_26;
  }
  unint64_t v19 = *(void *)(v6 + 8 * v20);
  if (v19)
  {
    int64_t v9 = v20;
    goto LABEL_25;
  }
  while (1)
  {
    int64_t v9 = v20 + 1;
    if (__OFADD__(v20, 1)) {
      break;
    }
    if (v9 >= v13) {
      goto LABEL_26;
    }
    unint64_t v19 = *(void *)(v6 + 8 * v9);
    ++v20;
    if (v19) {
      goto LABEL_25;
    }
  }
LABEL_28:
  __break(1u);
  return result;
}

{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *result;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  void *v22;
  int64_t v23;
  unint64_t v24;
  int64_t v25;

  unint64_t v1 = v0;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<Character, TypedInt<_ElementRegister>>);
  uint64_t v2 = *v0;
  uint64_t v3 = static _DictionaryStorage.copy(original:)();
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
LABEL_26:
    unint64_t result = (void *)swift_release();
    *unint64_t v1 = v4;
    return result;
  }
  unint64_t result = (void *)(v3 + 64);
  uint64_t v6 = v2 + 64;
  unint64_t v7 = (unint64_t)((1 << *(unsigned char *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7) {
    unint64_t result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  }
  int64_t v9 = 0;
  *(void *)(v4 + 16) = *(void *)(v2 + 16);
  uint64_t v10 = 1 << *(unsigned char *)(v2 + 32);
  uint64_t v11 = -1;
  if (v10 < 64) {
    uint64_t v11 = ~(-1 << v10);
  }
  unint64_t v12 = v11 & *(void *)(v2 + 64);
  int64_t v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      unint64_t v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      unint64_t v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    uint64_t v23 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v23 >= v13) {
      goto LABEL_26;
    }
    uint64_t v24 = *(void *)(v6 + 8 * v23);
    ++v9;
    if (!v24)
    {
      int64_t v9 = v23 + 1;
      if (v23 + 1 >= v13) {
        goto LABEL_26;
      }
      uint64_t v24 = *(void *)(v6 + 8 * v9);
      if (!v24) {
        break;
      }
    }
LABEL_25:
    unint64_t v12 = (v24 - 1) & v24;
    unint64_t v15 = __clz(__rbit64(v24)) + (v9 << 6);
LABEL_12:
    uint64_t v16 = 16 * v15;
    uint64_t v17 = (uint64_t *)(*(void *)(v2 + 48) + 16 * v15);
    unint64_t v19 = *v17;
    int64_t v18 = v17[1];
    int64_t v20 = 8 * v15;
    unint64_t v21 = *(void *)(*(void *)(v2 + 56) + v20);
    BOOL v22 = (void *)(*(void *)(v4 + 48) + v16);
    *BOOL v22 = v19;
    v22[1] = v18;
    *(void *)(*(void *)(v4 + 56) + v20) = v21;
    unint64_t result = (void *)swift_bridgeObjectRetain();
  }
  unint64_t v25 = v23 + 2;
  if (v25 >= v13) {
    goto LABEL_26;
  }
  uint64_t v24 = *(void *)(v6 + 8 * v25);
  if (v24)
  {
    int64_t v9 = v25;
    goto LABEL_25;
  }
  while (1)
  {
    int64_t v9 = v25 + 1;
    if (__OFADD__(v25, 1)) {
      break;
    }
    if (v9 >= v13) {
      goto LABEL_26;
    }
    uint64_t v24 = *(void *)(v6 + 8 * v9);
    ++v25;
    if (v24) {
      goto LABEL_25;
    }
  }
LABEL_28:
  __break(1u);
  return result;
}

{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *result;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  int64_t v18;
  unint64_t v19;
  int64_t v20;

  unint64_t v1 = v0;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<ReferenceID, [TypedInt<_InstructionAddress>]>);
  uint64_t v2 = *v0;
  uint64_t v3 = static _DictionaryStorage.copy(original:)();
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
LABEL_26:
    unint64_t result = (void *)swift_release();
    *unint64_t v1 = v4;
    return result;
  }
  unint64_t result = (void *)(v3 + 64);
  uint64_t v6 = v2 + 64;
  unint64_t v7 = (unint64_t)((1 << *(unsigned char *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7) {
    unint64_t result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  }
  int64_t v9 = 0;
  *(void *)(v4 + 16) = *(void *)(v2 + 16);
  uint64_t v10 = 1 << *(unsigned char *)(v2 + 32);
  uint64_t v11 = -1;
  if (v10 < 64) {
    uint64_t v11 = ~(-1 << v10);
  }
  unint64_t v12 = v11 & *(void *)(v2 + 64);
  int64_t v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      unint64_t v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      unint64_t v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    int64_t v18 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v18 >= v13) {
      goto LABEL_26;
    }
    unint64_t v19 = *(void *)(v6 + 8 * v18);
    ++v9;
    if (!v19)
    {
      int64_t v9 = v18 + 1;
      if (v18 + 1 >= v13) {
        goto LABEL_26;
      }
      unint64_t v19 = *(void *)(v6 + 8 * v9);
      if (!v19) {
        break;
      }
    }
LABEL_25:
    unint64_t v12 = (v19 - 1) & v19;
    unint64_t v15 = __clz(__rbit64(v19)) + (v9 << 6);
LABEL_12:
    uint64_t v16 = 8 * v15;
    uint64_t v17 = *(void *)(*(void *)(v2 + 56) + v16);
    *(void *)(*(void *)(v4 + 48) + v16) = *(void *)(*(void *)(v2 + 48) + v16);
    *(void *)(*(void *)(v4 + 56) + v16) = v17;
    unint64_t result = (void *)swift_bridgeObjectRetain();
  }
  int64_t v20 = v18 + 2;
  if (v20 >= v13) {
    goto LABEL_26;
  }
  unint64_t v19 = *(void *)(v6 + 8 * v20);
  if (v19)
  {
    int64_t v9 = v20;
    goto LABEL_25;
  }
  while (1)
  {
    int64_t v9 = v20 + 1;
    if (__OFADD__(v20, 1)) {
      break;
    }
    if (v9 >= v13) {
      goto LABEL_26;
    }
    unint64_t v19 = *(void *)(v6 + 8 * v9);
    ++v20;
    if (v19) {
      goto LABEL_25;
    }
  }
LABEL_28:
  __break(1u);
  return result;
}

{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *result;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  void *v22;
  int64_t v23;
  unint64_t v24;
  int64_t v25;

  unint64_t v1 = v0;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<Character, Int>);
  uint64_t v2 = *v0;
  uint64_t v3 = static _DictionaryStorage.copy(original:)();
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
LABEL_26:
    unint64_t result = (void *)swift_release();
    *unint64_t v1 = v4;
    return result;
  }
  unint64_t result = (void *)(v3 + 64);
  uint64_t v6 = v2 + 64;
  unint64_t v7 = (unint64_t)((1 << *(unsigned char *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7) {
    unint64_t result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  }
  int64_t v9 = 0;
  *(void *)(v4 + 16) = *(void *)(v2 + 16);
  uint64_t v10 = 1 << *(unsigned char *)(v2 + 32);
  uint64_t v11 = -1;
  if (v10 < 64) {
    uint64_t v11 = ~(-1 << v10);
  }
  unint64_t v12 = v11 & *(void *)(v2 + 64);
  int64_t v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      unint64_t v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      unint64_t v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    uint64_t v23 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v23 >= v13) {
      goto LABEL_26;
    }
    uint64_t v24 = *(void *)(v6 + 8 * v23);
    ++v9;
    if (!v24)
    {
      int64_t v9 = v23 + 1;
      if (v23 + 1 >= v13) {
        goto LABEL_26;
      }
      uint64_t v24 = *(void *)(v6 + 8 * v9);
      if (!v24) {
        break;
      }
    }
LABEL_25:
    unint64_t v12 = (v24 - 1) & v24;
    unint64_t v15 = __clz(__rbit64(v24)) + (v9 << 6);
LABEL_12:
    uint64_t v16 = 16 * v15;
    uint64_t v17 = (uint64_t *)(*(void *)(v2 + 48) + 16 * v15);
    unint64_t v19 = *v17;
    int64_t v18 = v17[1];
    int64_t v20 = 8 * v15;
    unint64_t v21 = *(void *)(*(void *)(v2 + 56) + v20);
    BOOL v22 = (void *)(*(void *)(v4 + 48) + v16);
    *BOOL v22 = v19;
    v22[1] = v18;
    *(void *)(*(void *)(v4 + 56) + v20) = v21;
    unint64_t result = (void *)swift_bridgeObjectRetain();
  }
  unint64_t v25 = v23 + 2;
  if (v25 >= v13) {
    goto LABEL_26;
  }
  uint64_t v24 = *(void *)(v6 + 8 * v25);
  if (v24)
  {
    int64_t v9 = v25;
    goto LABEL_25;
  }
  while (1)
  {
    int64_t v9 = v25 + 1;
    if (__OFADD__(v25, 1)) {
      break;
    }
    if (v9 >= v13) {
      goto LABEL_26;
    }
    uint64_t v24 = *(void *)(v6 + 8 * v9);
    ++v25;
    if (v24) {
      goto LABEL_25;
    }
  }
LABEL_28:
  __break(1u);
  return result;
}

unint64_t _StringGuts.validateScalarIndex(_:)(unint64_t result, unint64_t a2, unint64_t a3)
{
  uint64_t v5 = (a2 >> 59) & 1;
  if ((a3 & 0x1000000000000000) == 0) {
    LOBYTE(v5) = 1;
  }
  if ((result & 1) == 0 || (result & 0xC) == 4 << v5) {
    goto LABEL_9;
  }
  unint64_t v6 = HIBYTE(a3) & 0xF;
  if ((a3 & 0x2000000000000000) == 0) {
    unint64_t v6 = a2 & 0xFFFFFFFFFFFFLL;
  }
  if (v6 <= result >> 16)
  {
    __break(1u);
LABEL_9:
    unint64_t result = _StringGuts.validateSubscalarIndex(_:)(result, a2, a3);
    if ((result & 1) == 0) {
      return result & 0xC | _StringGuts.scalarAlignSlow(_:)(result, a2, a3) & 0xFFFFFFFFFFFFFFF3 | 1;
    }
  }
  return result;
}

unint64_t _StringGuts.validateSubscalarIndex(_:)(unint64_t result, unint64_t a2, unint64_t a3)
{
  uint64_t v5 = (a2 >> 59) & 1;
  if ((a3 & 0x1000000000000000) == 0) {
    LOBYTE(v5) = 1;
  }
  if ((result & 0xC) == 4 << v5) {
    unint64_t result = _StringGuts._slowEnsureMatchingEncoding(_:)(result, a2, a3);
  }
  unint64_t v6 = HIBYTE(a3) & 0xF;
  if ((a3 & 0x2000000000000000) == 0) {
    unint64_t v6 = a2 & 0xFFFFFFFFFFFFLL;
  }
  if (v6 <= result >> 16) {
    __break(1u);
  }
  return result;
}

char *specialized _ArrayBuffer._consumeAndCreateNew()(uint64_t a1)
{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(void *)(a1 + 16), 0, (char *)a1);
}

{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(void *)(a1 + 16), 0, (char *)a1, &demangling cache variable for type metadata for _ContiguousArrayStorage<String.Index>);
}

{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(void *)(a1 + 16), 0, (char *)a1);
}

{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(void *)(a1 + 16), 0, (char *)a1);
}

{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(void *)(a1 + 16), 0, (char *)a1, &demangling cache variable for type metadata for _ContiguousArrayStorage<Instruction>);
}

{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(void *)(a1 + 16), 0, (char *)a1);
}

{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(void *)(a1 + 16), 0, (char *)a1);
}

{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(void *)(a1 + 16), 0, (char *)a1);
}

{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(void *)(a1 + 16), 0, (char *)a1);
}

uint64_t specialized Set._Variant.insert(_:)(unint64_t *a1, unint64_t a2)
{
  uint64_t v5 = *v2;
  Hasher.init(_seed:)();
  Hasher._combine(_:)(a2 >> 14);
  Swift::Int v6 = Hasher._finalize()();
  uint64_t v7 = -1 << *(unsigned char *)(v5 + 32);
  unint64_t v8 = v6 & ~v7;
  if ((*(void *)(v5 + 56 + ((v8 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v8))
  {
    uint64_t v9 = ~v7;
    while (a2 >> 14 != *(void *)(*(void *)(v5 + 48) + 8 * v8) >> 14)
    {
      unint64_t v8 = (v8 + 1) & v9;
      if (((*(void *)(v5 + 56 + ((v8 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v8) & 1) == 0) {
        goto LABEL_5;
      }
    }
    uint64_t result = 0;
    a2 = *(void *)(*(void *)(*v2 + 48) + 8 * v8);
  }
  else
  {
LABEL_5:
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v12 = *v2;
    *uint64_t v2 = 0x8000000000000000;
    specialized _NativeSet.insertNew(_:at:isUnique:)(a2, v8, isUniquelyReferenced_nonNull_native);
    *uint64_t v2 = v12;
    swift_bridgeObjectRelease();
    uint64_t result = 1;
  }
  *a1 = a2;
  return result;
}

uint64_t specialized Set._Variant.insert(_:)(Swift::Int *a1, Swift::Int a2, Swift::Int a3)
{
  uint64_t v4 = v3;
  uint64_t v8 = *v3;
  Hasher.init(_seed:)();
  MEMORY[0x21050EE80](v21, a2, a3);
  Swift::Int v9 = Hasher._finalize()();
  uint64_t v10 = -1 << *(unsigned char *)(v8 + 32);
  unint64_t v11 = v9 & ~v10;
  uint64_t v12 = v8 + 56;
  if ((*(void *)(v8 + 56 + ((v11 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v11))
  {
    uint64_t v13 = ~v10;
    uint64_t v14 = *(void *)(v8 + 48);
    while (1)
    {
      unint64_t v15 = (void *)(v14 + 16 * v11);
      BOOL v16 = *v15 == a2 && v15[1] == a3;
      if (v16 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0) {
        break;
      }
      unint64_t v11 = (v11 + 1) & v13;
      if (((*(void *)(v12 + ((v11 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v11) & 1) == 0) {
        goto LABEL_9;
      }
    }
    swift_bridgeObjectRelease();
    unint64_t v19 = (Swift::Int *)(*(void *)(*v4 + 48) + 16 * v11);
    Swift::Int v20 = v19[1];
    *a1 = *v19;
    a1[1] = v20;
    swift_bridgeObjectRetain();
    return 0;
  }
  else
  {
LABEL_9:
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    v21[0] = *v4;
    *uint64_t v4 = 0x8000000000000000;
    swift_bridgeObjectRetain();
    specialized _NativeSet.insertNew(_:at:isUnique:)(a2, a3, v11, isUniquelyReferenced_nonNull_native);
    *uint64_t v4 = v21[0];
    swift_bridgeObjectRelease();
    *a1 = a2;
    a1[1] = a3;
    return 1;
  }
}

uint64_t specialized Set._Variant.insert(_:)(_DWORD *a1, Swift::Int a2)
{
  uint64_t v5 = *v2;
  Hasher.init(_seed:)();
  Hasher._combine(_:)(a2);
  Swift::Int v6 = Hasher._finalize()();
  uint64_t v7 = -1 << *(unsigned char *)(v5 + 32);
  unint64_t v8 = v6 & ~v7;
  if ((*(void *)(v5 + 56 + ((v8 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v8))
  {
    uint64_t v9 = ~v7;
    while (*(_DWORD *)(*(void *)(v5 + 48) + 4 * v8) != a2)
    {
      unint64_t v8 = (v8 + 1) & v9;
      if (((*(void *)(v5 + 56 + ((v8 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v8) & 1) == 0) {
        goto LABEL_5;
      }
    }
    uint64_t result = 0;
    LODWORD(a2) = *(_DWORD *)(*(void *)(*v2 + 48) + 4 * v8);
  }
  else
  {
LABEL_5:
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v12 = *v2;
    *uint64_t v2 = 0x8000000000000000;
    specialized _NativeSet.insertNew(_:at:isUnique:)(a2, v8, isUniquelyReferenced_nonNull_native);
    *uint64_t v2 = v12;
    swift_bridgeObjectRelease();
    uint64_t result = 1;
  }
  *a1 = a2;
  return result;
}

uint64_t specialized _NativeSet.resize(capacity:)()
{
  unint64_t v1 = v0;
  uint64_t v2 = *v0;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _SetStorage<String.Index>);
  uint64_t result = static _SetStorage.resize(original:capacity:move:)();
  uint64_t v4 = result;
  if (!*(void *)(v2 + 16))
  {
LABEL_43:
    uint64_t result = swift_release();
    *unint64_t v1 = v4;
    return result;
  }
  int64_t v5 = 0;
  Swift::Int v6 = (void *)(v2 + 56);
  uint64_t v7 = 1 << *(unsigned char *)(v2 + 32);
  if (v7 < 64) {
    uint64_t v8 = ~(-1 << v7);
  }
  else {
    uint64_t v8 = -1;
  }
  unint64_t v9 = v8 & *(void *)(v2 + 56);
  int64_t v10 = (unint64_t)(v7 + 63) >> 6;
  uint64_t v11 = result + 56;
  while (1)
  {
    if (v9)
    {
      unint64_t v13 = __clz(__rbit64(v9));
      v9 &= v9 - 1;
      unint64_t v14 = v13 | (v5 << 6);
      goto LABEL_24;
    }
    int64_t v15 = v5 + 1;
    if (__OFADD__(v5, 1))
    {
LABEL_44:
      __break(1u);
      goto LABEL_45;
    }
    if (v15 >= v10) {
      goto LABEL_33;
    }
    unint64_t v16 = v6[v15];
    ++v5;
    if (!v16)
    {
      int64_t v5 = v15 + 1;
      if (v15 + 1 >= v10) {
        goto LABEL_33;
      }
      unint64_t v16 = v6[v5];
      if (!v16)
      {
        int64_t v5 = v15 + 2;
        if (v15 + 2 >= v10) {
          goto LABEL_33;
        }
        unint64_t v16 = v6[v5];
        if (!v16) {
          break;
        }
      }
    }
LABEL_23:
    unint64_t v9 = (v16 - 1) & v16;
    unint64_t v14 = __clz(__rbit64(v16)) + (v5 << 6);
LABEL_24:
    unint64_t v18 = *(void *)(*(void *)(v2 + 48) + 8 * v14);
    Hasher.init(_seed:)();
    Hasher._combine(_:)(v18 >> 14);
    uint64_t result = Hasher._finalize()();
    uint64_t v19 = -1 << *(unsigned char *)(v4 + 32);
    unint64_t v20 = result & ~v19;
    unint64_t v21 = v20 >> 6;
    if (((-1 << v20) & ~*(void *)(v11 + 8 * (v20 >> 6))) != 0)
    {
      unint64_t v12 = __clz(__rbit64((-1 << v20) & ~*(void *)(v11 + 8 * (v20 >> 6)))) | v20 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      char v22 = 0;
      unint64_t v23 = (unint64_t)(63 - v19) >> 6;
      do
      {
        if (++v21 == v23 && (v22 & 1) != 0)
        {
          __break(1u);
          goto LABEL_44;
        }
        BOOL v24 = v21 == v23;
        if (v21 == v23) {
          unint64_t v21 = 0;
        }
        v22 |= v24;
        uint64_t v25 = *(void *)(v11 + 8 * v21);
      }
      while (v25 == -1);
      unint64_t v12 = __clz(__rbit64(~v25)) + (v21 << 6);
    }
    *(void *)(v11 + ((v12 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v12;
    *(void *)(*(void *)(v4 + 48) + 8 * v12) = v18;
    ++*(void *)(v4 + 16);
  }
  int64_t v17 = v15 + 3;
  if (v17 >= v10)
  {
LABEL_33:
    char v26 = *(unsigned char *)(v2 + 32);
    uint64_t v27 = 1 << v26;
    if (1 << v26 > 63)
    {
      unint64_t v28 = (unint64_t)(v27 + 63) >> 6;
      if ((v26 & 0x3Fu) >= 8)
      {
        uint64_t v29 = v28 & 0x3FFFFFFFFFFFFFCLL;
        uint64_t v30 = (_OWORD *)(v2 + 72);
        uint64_t v31 = v28 & 0x3FFFFFFFFFFFFFCLL;
        do
        {
          *(v30 - 1) = 0uLL;
          *uint64_t v30 = 0uLL;
          v30 += 2;
          v31 -= 4;
        }
        while (v31);
        unint64_t v1 = v0;
        if (v28 == v29) {
          goto LABEL_42;
        }
      }
      else
      {
        uint64_t v29 = 0;
        unint64_t v1 = v0;
      }
      unint64_t v32 = v28 - v29;
      unint64_t v33 = (void *)(v2 + 8 * v29 + 56);
      do
      {
        *v33++ = 0;
        --v32;
      }
      while (v32);
    }
    else
    {
      *Swift::Int v6 = -1 << v27;
      unint64_t v1 = v0;
    }
LABEL_42:
    *(void *)(v2 + 16) = 0;
    goto LABEL_43;
  }
  unint64_t v16 = v6[v17];
  if (v16)
  {
    int64_t v5 = v17;
    goto LABEL_23;
  }
  while (1)
  {
    int64_t v5 = v17 + 1;
    if (__OFADD__(v17, 1)) {
      break;
    }
    if (v5 >= v10) {
      goto LABEL_33;
    }
    unint64_t v16 = v6[v5];
    ++v17;
    if (v16) {
      goto LABEL_23;
    }
  }
LABEL_45:
  __break(1u);
  return result;
}

{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t result;
  uint64_t v4;
  int64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  int64_t v9;
  uint64_t v10;
  unint64_t v11;
  void *v12;
  unint64_t v13;
  unint64_t v14;
  int64_t v15;
  unint64_t v16;
  int64_t v17;
  uint64_t *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  char v24;
  unint64_t v25;
  BOOL v26;
  uint64_t v27;
  char v28;
  uint64_t v29;
  unint64_t v30;
  uint64_t v31;
  _OWORD *v32;
  uint64_t v33;
  unint64_t v34;
  void *v35;
  void *v36;
  char v37[72];

  unint64_t v1 = v0;
  uint64_t v2 = *v0;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _SetStorage<Character>);
  uint64_t result = static _SetStorage.resize(original:capacity:move:)();
  uint64_t v4 = result;
  if (!*(void *)(v2 + 16))
  {
LABEL_43:
    uint64_t result = swift_release();
    *unint64_t v1 = v4;
    return result;
  }
  int64_t v5 = 0;
  uint64_t v36 = (void *)(v2 + 56);
  Swift::Int v6 = 1 << *(unsigned char *)(v2 + 32);
  if (v6 < 64) {
    uint64_t v7 = ~(-1 << v6);
  }
  else {
    uint64_t v7 = -1;
  }
  uint64_t v8 = v7 & *(void *)(v2 + 56);
  unint64_t v9 = (unint64_t)(v6 + 63) >> 6;
  int64_t v10 = result + 56;
  while (1)
  {
    if (v8)
    {
      unint64_t v13 = __clz(__rbit64(v8));
      v8 &= v8 - 1;
      unint64_t v14 = v13 | (v5 << 6);
      goto LABEL_24;
    }
    int64_t v15 = v5 + 1;
    if (__OFADD__(v5, 1))
    {
LABEL_44:
      __break(1u);
      goto LABEL_45;
    }
    if (v15 >= v9) {
      goto LABEL_33;
    }
    unint64_t v16 = v36[v15];
    ++v5;
    if (!v16)
    {
      int64_t v5 = v15 + 1;
      if (v15 + 1 >= v9) {
        goto LABEL_33;
      }
      unint64_t v16 = v36[v5];
      if (!v16)
      {
        int64_t v5 = v15 + 2;
        if (v15 + 2 >= v9) {
          goto LABEL_33;
        }
        unint64_t v16 = v36[v5];
        if (!v16) {
          break;
        }
      }
    }
LABEL_23:
    uint64_t v8 = (v16 - 1) & v16;
    unint64_t v14 = __clz(__rbit64(v16)) + (v5 << 6);
LABEL_24:
    unint64_t v18 = (uint64_t *)(*(void *)(v2 + 48) + 16 * v14);
    uint64_t v19 = *v18;
    unint64_t v20 = v18[1];
    Hasher.init(_seed:)();
    MEMORY[0x21050EE80](v37, v19, v20);
    uint64_t result = Hasher._finalize()();
    unint64_t v21 = -1 << *(unsigned char *)(v4 + 32);
    char v22 = result & ~v21;
    unint64_t v23 = v22 >> 6;
    if (((-1 << v22) & ~*(void *)(v10 + 8 * (v22 >> 6))) != 0)
    {
      uint64_t v11 = __clz(__rbit64((-1 << v22) & ~*(void *)(v10 + 8 * (v22 >> 6)))) | v22 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      BOOL v24 = 0;
      uint64_t v25 = (unint64_t)(63 - v21) >> 6;
      do
      {
        if (++v23 == v25 && (v24 & 1) != 0)
        {
          __break(1u);
          goto LABEL_44;
        }
        char v26 = v23 == v25;
        if (v23 == v25) {
          unint64_t v23 = 0;
        }
        v24 |= v26;
        uint64_t v27 = *(void *)(v10 + 8 * v23);
      }
      while (v27 == -1);
      uint64_t v11 = __clz(__rbit64(~v27)) + (v23 << 6);
    }
    *(void *)(v10 + ((v11 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v11;
    unint64_t v12 = (void *)(*(void *)(v4 + 48) + 16 * v11);
    *unint64_t v12 = v19;
    v12[1] = v20;
    ++*(void *)(v4 + 16);
  }
  int64_t v17 = v15 + 3;
  if (v17 >= v9)
  {
LABEL_33:
    unint64_t v28 = *(unsigned char *)(v2 + 32);
    uint64_t v29 = 1 << v28;
    if (1 << v28 > 63)
    {
      uint64_t v30 = (unint64_t)(v29 + 63) >> 6;
      if ((v28 & 0x3Fu) >= 8)
      {
        uint64_t v31 = v30 & 0x3FFFFFFFFFFFFFCLL;
        unint64_t v32 = (_OWORD *)(v2 + 72);
        unint64_t v33 = v30 & 0x3FFFFFFFFFFFFFCLL;
        do
        {
          *(v32 - 1) = 0uLL;
          *unint64_t v32 = 0uLL;
          v32 += 2;
          v33 -= 4;
        }
        while (v33);
        unint64_t v1 = v0;
        if (v30 == v31) {
          goto LABEL_42;
        }
      }
      else
      {
        uint64_t v31 = 0;
        unint64_t v1 = v0;
      }
      uint64_t v34 = v30 - v31;
      uint64_t v35 = (void *)(v2 + 8 * v31 + 56);
      do
      {
        *v35++ = 0;
        --v34;
      }
      while (v34);
    }
    else
    {
      unint64_t v1 = v0;
      *uint64_t v36 = -1 << v29;
    }
LABEL_42:
    *(void *)(v2 + 16) = 0;
    goto LABEL_43;
  }
  unint64_t v16 = v36[v17];
  if (v16)
  {
    int64_t v5 = v17;
    goto LABEL_23;
  }
  while (1)
  {
    int64_t v5 = v17 + 1;
    if (__OFADD__(v17, 1)) {
      break;
    }
    if (v5 >= v9) {
      goto LABEL_33;
    }
    unint64_t v16 = v36[v5];
    ++v17;
    if (v16) {
      goto LABEL_23;
    }
  }
LABEL_45:
  __break(1u);
  return result;
}

{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t result;
  uint64_t v4;
  int64_t v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  int64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  int64_t v15;
  unint64_t v16;
  int64_t v17;
  Swift::UInt32 v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  char v22;
  unint64_t v23;
  BOOL v24;
  uint64_t v25;
  char v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  _OWORD *v30;
  uint64_t v31;
  unint64_t v32;
  void *v33;

  unint64_t v1 = v0;
  uint64_t v2 = *v0;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _SetStorage<Unicode.Scalar>);
  uint64_t result = static _SetStorage.resize(original:capacity:move:)();
  uint64_t v4 = result;
  if (!*(void *)(v2 + 16))
  {
LABEL_43:
    uint64_t result = swift_release();
    *unint64_t v1 = v4;
    return result;
  }
  int64_t v5 = 0;
  Swift::Int v6 = (void *)(v2 + 56);
  uint64_t v7 = 1 << *(unsigned char *)(v2 + 32);
  if (v7 < 64) {
    uint64_t v8 = ~(-1 << v7);
  }
  else {
    uint64_t v8 = -1;
  }
  unint64_t v9 = v8 & *(void *)(v2 + 56);
  int64_t v10 = (unint64_t)(v7 + 63) >> 6;
  uint64_t v11 = result + 56;
  while (1)
  {
    if (v9)
    {
      unint64_t v13 = __clz(__rbit64(v9));
      v9 &= v9 - 1;
      unint64_t v14 = v13 | (v5 << 6);
      goto LABEL_24;
    }
    int64_t v15 = v5 + 1;
    if (__OFADD__(v5, 1))
    {
LABEL_44:
      __break(1u);
      goto LABEL_45;
    }
    if (v15 >= v10) {
      goto LABEL_33;
    }
    unint64_t v16 = v6[v15];
    ++v5;
    if (!v16)
    {
      int64_t v5 = v15 + 1;
      if (v15 + 1 >= v10) {
        goto LABEL_33;
      }
      unint64_t v16 = v6[v5];
      if (!v16)
      {
        int64_t v5 = v15 + 2;
        if (v15 + 2 >= v10) {
          goto LABEL_33;
        }
        unint64_t v16 = v6[v5];
        if (!v16) {
          break;
        }
      }
    }
LABEL_23:
    unint64_t v9 = (v16 - 1) & v16;
    unint64_t v14 = __clz(__rbit64(v16)) + (v5 << 6);
LABEL_24:
    unint64_t v18 = *(_DWORD *)(*(void *)(v2 + 48) + 4 * v14);
    Hasher.init(_seed:)();
    Hasher._combine(_:)(v18);
    uint64_t result = Hasher._finalize()();
    uint64_t v19 = -1 << *(unsigned char *)(v4 + 32);
    unint64_t v20 = result & ~v19;
    unint64_t v21 = v20 >> 6;
    if (((-1 << v20) & ~*(void *)(v11 + 8 * (v20 >> 6))) != 0)
    {
      unint64_t v12 = __clz(__rbit64((-1 << v20) & ~*(void *)(v11 + 8 * (v20 >> 6)))) | v20 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      char v22 = 0;
      unint64_t v23 = (unint64_t)(63 - v19) >> 6;
      do
      {
        if (++v21 == v23 && (v22 & 1) != 0)
        {
          __break(1u);
          goto LABEL_44;
        }
        BOOL v24 = v21 == v23;
        if (v21 == v23) {
          unint64_t v21 = 0;
        }
        v22 |= v24;
        uint64_t v25 = *(void *)(v11 + 8 * v21);
      }
      while (v25 == -1);
      unint64_t v12 = __clz(__rbit64(~v25)) + (v21 << 6);
    }
    *(void *)(v11 + ((v12 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v12;
    *(_DWORD *)(*(void *)(v4 + 48) + 4 * v12) = v18;
    ++*(void *)(v4 + 16);
  }
  int64_t v17 = v15 + 3;
  if (v17 >= v10)
  {
LABEL_33:
    char v26 = *(unsigned char *)(v2 + 32);
    uint64_t v27 = 1 << v26;
    if (1 << v26 > 63)
    {
      unint64_t v28 = (unint64_t)(v27 + 63) >> 6;
      if ((v26 & 0x3Fu) >= 8)
      {
        uint64_t v29 = v28 & 0x3FFFFFFFFFFFFFCLL;
        uint64_t v30 = (_OWORD *)(v2 + 72);
        uint64_t v31 = v28 & 0x3FFFFFFFFFFFFFCLL;
        do
        {
          *(v30 - 1) = 0uLL;
          *uint64_t v30 = 0uLL;
          v30 += 2;
          v31 -= 4;
        }
        while (v31);
        unint64_t v1 = v0;
        if (v28 == v29) {
          goto LABEL_42;
        }
      }
      else
      {
        uint64_t v29 = 0;
        unint64_t v1 = v0;
      }
      unint64_t v32 = v28 - v29;
      unint64_t v33 = (void *)(v2 + 8 * v29 + 56);
      do
      {
        *v33++ = 0;
        --v32;
      }
      while (v32);
    }
    else
    {
      *Swift::Int v6 = -1 << v27;
      unint64_t v1 = v0;
    }
LABEL_42:
    *(void *)(v2 + 16) = 0;
    goto LABEL_43;
  }
  unint64_t v16 = v6[v17];
  if (v16)
  {
    int64_t v5 = v17;
    goto LABEL_23;
  }
  while (1)
  {
    int64_t v5 = v17 + 1;
    if (__OFADD__(v17, 1)) {
      break;
    }
    if (v5 >= v10) {
      goto LABEL_33;
    }
    unint64_t v16 = v6[v5];
    ++v17;
    if (v16) {
      goto LABEL_23;
    }
  }
LABEL_45:
  __break(1u);
  return result;
}

Swift::Int specialized _NativeSet.insertNew(_:at:isUnique:)(Swift::Int result, unint64_t a2, char a3)
{
  unint64_t v5 = result;
  unint64_t v6 = *(void *)(*v3 + 16);
  unint64_t v7 = *(void *)(*v3 + 24);
  if (v7 > v6 && (a3 & 1) != 0) {
    goto LABEL_12;
  }
  if (a3)
  {
    specialized _NativeSet.resize(capacity:)();
  }
  else
  {
    if (v7 > v6)
    {
      uint64_t result = (Swift::Int)specialized _NativeSet.copy()();
      goto LABEL_12;
    }
    specialized _NativeSet.copyAndResize(capacity:)();
  }
  uint64_t v8 = *v3;
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v5 >> 14);
  uint64_t result = Hasher._finalize()();
  uint64_t v9 = -1 << *(unsigned char *)(v8 + 32);
  a2 = result & ~v9;
  if ((*(void *)(v8 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFFF8)) >> a2))
  {
    uint64_t v10 = ~v9;
    while (v5 >> 14 != *(void *)(*(void *)(v8 + 48) + 8 * a2) >> 14)
    {
      a2 = (a2 + 1) & v10;
      if (((*(void *)(v8 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFFF8)) >> a2) & 1) == 0) {
        goto LABEL_12;
      }
    }
    goto LABEL_15;
  }
LABEL_12:
  uint64_t v11 = *v3;
  *(void *)(*v3 + 8 * (a2 >> 6) + 56) |= 1 << a2;
  *(void *)(*(void *)(v11 + 48) + 8 * a2) = v5;
  uint64_t v12 = *(void *)(v11 + 16);
  BOOL v13 = __OFADD__(v12, 1);
  uint64_t v14 = v12 + 1;
  if (!v13)
  {
    *(void *)(v11 + 16) = v14;
    return result;
  }
  __break(1u);
LABEL_15:
  uint64_t result = ELEMENT_TYPE_OF_SET_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
  return result;
}

{
  uint64_t *v3;
  Swift::UInt32 v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  BOOL v13;
  uint64_t v14;

  unint64_t v5 = result;
  unint64_t v6 = *(void *)(*v3 + 16);
  unint64_t v7 = *(void *)(*v3 + 24);
  if (v7 > v6 && (a3 & 1) != 0) {
    goto LABEL_12;
  }
  if (a3)
  {
    specialized _NativeSet.resize(capacity:)();
  }
  else
  {
    if (v7 > v6)
    {
      uint64_t result = (Swift::Int)specialized _NativeSet.copy()();
      goto LABEL_12;
    }
    specialized _NativeSet.copyAndResize(capacity:)();
  }
  uint64_t v8 = *v3;
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v5);
  uint64_t result = Hasher._finalize()();
  uint64_t v9 = -1 << *(unsigned char *)(v8 + 32);
  a2 = result & ~v9;
  if ((*(void *)(v8 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFFF8)) >> a2))
  {
    uint64_t v10 = ~v9;
    while (*(_DWORD *)(*(void *)(v8 + 48) + 4 * a2) != v5)
    {
      a2 = (a2 + 1) & v10;
      if (((*(void *)(v8 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFFF8)) >> a2) & 1) == 0) {
        goto LABEL_12;
      }
    }
    goto LABEL_15;
  }
LABEL_12:
  uint64_t v11 = *v3;
  *(void *)(*v3 + 8 * (a2 >> 6) + 56) |= 1 << a2;
  *(_DWORD *)(*(void *)(v11 + 48) + 4 * a2) = v5;
  uint64_t v12 = *(void *)(v11 + 16);
  BOOL v13 = __OFADD__(v12, 1);
  uint64_t v14 = v12 + 1;
  if (!v13)
  {
    *(void *)(v11 + 16) = v14;
    return result;
  }
  __break(1u);
LABEL_15:
  uint64_t result = ELEMENT_TYPE_OF_SET_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
  return result;
}

Swift::Int specialized _NativeSet.insertNew(_:at:isUnique:)(Swift::Int result, Swift::Int a2, unint64_t a3, char a4)
{
  unint64_t v5 = v4;
  Swift::Int v8 = result;
  unint64_t v9 = *(void *)(*v4 + 16);
  unint64_t v10 = *(void *)(*v4 + 24);
  if (v10 > v9 && (a4 & 1) != 0) {
    goto LABEL_16;
  }
  if (a4)
  {
    specialized _NativeSet.resize(capacity:)();
  }
  else
  {
    if (v10 > v9)
    {
      uint64_t result = (Swift::Int)specialized _NativeSet.copy()();
      goto LABEL_16;
    }
    specialized _NativeSet.copyAndResize(capacity:)();
  }
  uint64_t v11 = *v4;
  Hasher.init(_seed:)();
  MEMORY[0x21050EE80](v23, v8, a2);
  uint64_t result = Hasher._finalize()();
  uint64_t v12 = -1 << *(unsigned char *)(v11 + 32);
  a3 = result & ~v12;
  uint64_t v13 = v11 + 56;
  if ((*(void *)(v11 + 56 + ((a3 >> 3) & 0xFFFFFFFFFFFFFF8)) >> a3))
  {
    uint64_t v14 = ~v12;
    uint64_t v15 = *(void *)(v11 + 48);
    do
    {
      unint64_t v16 = (void *)(v15 + 16 * a3);
      if (*v16 == v8 && v16[1] == a2) {
        goto LABEL_19;
      }
      uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)();
      if (result) {
        goto LABEL_19;
      }
      a3 = (a3 + 1) & v14;
    }
    while (((*(void *)(v13 + ((a3 >> 3) & 0xFFFFFFFFFFFFFF8)) >> a3) & 1) != 0);
  }
LABEL_16:
  uint64_t v18 = *v5;
  *(void *)(*v5 + 8 * (a3 >> 6) + 56) |= 1 << a3;
  uint64_t v19 = (Swift::Int *)(*(void *)(v18 + 48) + 16 * a3);
  *uint64_t v19 = v8;
  v19[1] = a2;
  uint64_t v20 = *(void *)(v18 + 16);
  BOOL v21 = __OFADD__(v20, 1);
  uint64_t v22 = v20 + 1;
  if (!v21)
  {
    *(void *)(v18 + 16) = v22;
    return result;
  }
  __break(1u);
LABEL_19:
  uint64_t result = ELEMENT_TYPE_OF_SET_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
  return result;
}

void *specialized _NativeSet.copy()()
{
  unint64_t v1 = v0;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _SetStorage<String.Index>);
  uint64_t v2 = *v0;
  uint64_t v3 = static _SetStorage.copy(original:)();
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
LABEL_28:
    uint64_t result = (void *)swift_release();
    *unint64_t v1 = v4;
    return result;
  }
  uint64_t result = (void *)(v3 + 56);
  uint64_t v6 = v2 + 56;
  unint64_t v7 = (unint64_t)((1 << *(unsigned char *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 56 + 8 * v7) {
    uint64_t result = memmove(result, (const void *)(v2 + 56), 8 * v7);
  }
  int64_t v9 = 0;
  *(void *)(v4 + 16) = *(void *)(v2 + 16);
  uint64_t v10 = 1 << *(unsigned char *)(v2 + 32);
  uint64_t v11 = -1;
  if (v10 < 64) {
    uint64_t v11 = ~(-1 << v10);
  }
  unint64_t v12 = v11 & *(void *)(v2 + 56);
  int64_t v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      unint64_t v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      unint64_t v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    int64_t v16 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_30;
    }
    if (v16 >= v13) {
      goto LABEL_28;
    }
    unint64_t v17 = *(void *)(v6 + 8 * v16);
    ++v9;
    if (!v17)
    {
      int64_t v9 = v16 + 1;
      if (v16 + 1 >= v13) {
        goto LABEL_28;
      }
      unint64_t v17 = *(void *)(v6 + 8 * v9);
      if (!v17)
      {
        int64_t v9 = v16 + 2;
        if (v16 + 2 >= v13) {
          goto LABEL_28;
        }
        unint64_t v17 = *(void *)(v6 + 8 * v9);
        if (!v17) {
          break;
        }
      }
    }
LABEL_27:
    unint64_t v12 = (v17 - 1) & v17;
    unint64_t v15 = __clz(__rbit64(v17)) + (v9 << 6);
LABEL_12:
    *(void *)(*(void *)(v4 + 48) + 8 * v15) = *(void *)(*(void *)(v2 + 48) + 8 * v15);
  }
  int64_t v18 = v16 + 3;
  if (v18 >= v13) {
    goto LABEL_28;
  }
  unint64_t v17 = *(void *)(v6 + 8 * v18);
  if (v17)
  {
    int64_t v9 = v18;
    goto LABEL_27;
  }
  while (1)
  {
    int64_t v9 = v18 + 1;
    if (__OFADD__(v18, 1)) {
      break;
    }
    if (v9 >= v13) {
      goto LABEL_28;
    }
    unint64_t v17 = *(void *)(v6 + 8 * v9);
    ++v18;
    if (v17) {
      goto LABEL_27;
    }
  }
LABEL_30:
  __break(1u);
  return result;
}

{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *result;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  void *v17;
  uint64_t v18;
  void *v19;
  int64_t v20;
  unint64_t v21;
  int64_t v22;

  unint64_t v1 = v0;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _SetStorage<Character>);
  uint64_t v2 = *v0;
  uint64_t v3 = static _SetStorage.copy(original:)();
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
LABEL_28:
    uint64_t result = (void *)swift_release();
    *unint64_t v1 = v4;
    return result;
  }
  uint64_t result = (void *)(v3 + 56);
  uint64_t v6 = v2 + 56;
  unint64_t v7 = (unint64_t)((1 << *(unsigned char *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 56 + 8 * v7) {
    uint64_t result = memmove(result, (const void *)(v2 + 56), 8 * v7);
  }
  int64_t v9 = 0;
  *(void *)(v4 + 16) = *(void *)(v2 + 16);
  uint64_t v10 = 1 << *(unsigned char *)(v2 + 32);
  uint64_t v11 = -1;
  if (v10 < 64) {
    uint64_t v11 = ~(-1 << v10);
  }
  unint64_t v12 = v11 & *(void *)(v2 + 56);
  int64_t v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      unint64_t v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      unint64_t v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    uint64_t v20 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_30;
    }
    if (v20 >= v13) {
      goto LABEL_28;
    }
    BOOL v21 = *(void *)(v6 + 8 * v20);
    ++v9;
    if (!v21)
    {
      int64_t v9 = v20 + 1;
      if (v20 + 1 >= v13) {
        goto LABEL_28;
      }
      BOOL v21 = *(void *)(v6 + 8 * v9);
      if (!v21)
      {
        int64_t v9 = v20 + 2;
        if (v20 + 2 >= v13) {
          goto LABEL_28;
        }
        BOOL v21 = *(void *)(v6 + 8 * v9);
        if (!v21) {
          break;
        }
      }
    }
LABEL_27:
    unint64_t v12 = (v21 - 1) & v21;
    unint64_t v15 = __clz(__rbit64(v21)) + (v9 << 6);
LABEL_12:
    int64_t v16 = 16 * v15;
    unint64_t v17 = (void *)(*(void *)(v2 + 48) + v16);
    int64_t v18 = v17[1];
    uint64_t v19 = (void *)(*(void *)(v4 + 48) + v16);
    *uint64_t v19 = *v17;
    v19[1] = v18;
    uint64_t result = (void *)swift_bridgeObjectRetain();
  }
  uint64_t v22 = v20 + 3;
  if (v22 >= v13) {
    goto LABEL_28;
  }
  BOOL v21 = *(void *)(v6 + 8 * v22);
  if (v21)
  {
    int64_t v9 = v22;
    goto LABEL_27;
  }
  while (1)
  {
    int64_t v9 = v22 + 1;
    if (__OFADD__(v22, 1)) {
      break;
    }
    if (v9 >= v13) {
      goto LABEL_28;
    }
    BOOL v21 = *(void *)(v6 + 8 * v9);
    ++v22;
    if (v21) {
      goto LABEL_27;
    }
  }
LABEL_30:
  __break(1u);
  return result;
}

{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *result;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  int64_t v16;
  unint64_t v17;
  int64_t v18;

  unint64_t v1 = v0;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _SetStorage<Unicode.Scalar>);
  uint64_t v2 = *v0;
  uint64_t v3 = static _SetStorage.copy(original:)();
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
LABEL_28:
    uint64_t result = (void *)swift_release();
    *unint64_t v1 = v4;
    return result;
  }
  uint64_t result = (void *)(v3 + 56);
  uint64_t v6 = v2 + 56;
  unint64_t v7 = (unint64_t)((1 << *(unsigned char *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 56 + 8 * v7) {
    uint64_t result = memmove(result, (const void *)(v2 + 56), 8 * v7);
  }
  int64_t v9 = 0;
  *(void *)(v4 + 16) = *(void *)(v2 + 16);
  uint64_t v10 = 1 << *(unsigned char *)(v2 + 32);
  uint64_t v11 = -1;
  if (v10 < 64) {
    uint64_t v11 = ~(-1 << v10);
  }
  unint64_t v12 = v11 & *(void *)(v2 + 56);
  int64_t v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      unint64_t v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      unint64_t v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    int64_t v16 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_30;
    }
    if (v16 >= v13) {
      goto LABEL_28;
    }
    unint64_t v17 = *(void *)(v6 + 8 * v16);
    ++v9;
    if (!v17)
    {
      int64_t v9 = v16 + 1;
      if (v16 + 1 >= v13) {
        goto LABEL_28;
      }
      unint64_t v17 = *(void *)(v6 + 8 * v9);
      if (!v17)
      {
        int64_t v9 = v16 + 2;
        if (v16 + 2 >= v13) {
          goto LABEL_28;
        }
        unint64_t v17 = *(void *)(v6 + 8 * v9);
        if (!v17) {
          break;
        }
      }
    }
LABEL_27:
    unint64_t v12 = (v17 - 1) & v17;
    unint64_t v15 = __clz(__rbit64(v17)) + (v9 << 6);
LABEL_12:
    *(_DWORD *)(*(void *)(v4 + 48) + 4 * v15) = *(_DWORD *)(*(void *)(v2 + 48) + 4 * v15);
  }
  int64_t v18 = v16 + 3;
  if (v18 >= v13) {
    goto LABEL_28;
  }
  unint64_t v17 = *(void *)(v6 + 8 * v18);
  if (v17)
  {
    int64_t v9 = v18;
    goto LABEL_27;
  }
  while (1)
  {
    int64_t v9 = v18 + 1;
    if (__OFADD__(v18, 1)) {
      break;
    }
    if (v9 >= v13) {
      goto LABEL_28;
    }
    unint64_t v17 = *(void *)(v6 + 8 * v9);
    ++v18;
    if (v17) {
      goto LABEL_27;
    }
  }
LABEL_30:
  __break(1u);
  return result;
}

uint64_t specialized _NativeSet.copyAndResize(capacity:)()
{
  unint64_t v1 = v0;
  uint64_t v2 = *v0;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _SetStorage<String.Index>);
  uint64_t result = static _SetStorage.resize(original:capacity:move:)();
  uint64_t v4 = result;
  if (!*(void *)(v2 + 16))
  {
    uint64_t result = swift_release();
LABEL_35:
    *unint64_t v1 = v4;
    return result;
  }
  int64_t v5 = 0;
  uint64_t v6 = v2 + 56;
  uint64_t v7 = 1 << *(unsigned char *)(v2 + 32);
  if (v7 < 64) {
    uint64_t v8 = ~(-1 << v7);
  }
  else {
    uint64_t v8 = -1;
  }
  unint64_t v9 = v8 & *(void *)(v2 + 56);
  int64_t v10 = (unint64_t)(v7 + 63) >> 6;
  uint64_t v11 = result + 56;
  while (1)
  {
    if (v9)
    {
      unint64_t v13 = __clz(__rbit64(v9));
      v9 &= v9 - 1;
      unint64_t v14 = v13 | (v5 << 6);
      goto LABEL_24;
    }
    int64_t v15 = v5 + 1;
    if (__OFADD__(v5, 1))
    {
LABEL_36:
      __break(1u);
      goto LABEL_37;
    }
    if (v15 >= v10) {
      goto LABEL_33;
    }
    unint64_t v16 = *(void *)(v6 + 8 * v15);
    ++v5;
    if (!v16)
    {
      int64_t v5 = v15 + 1;
      if (v15 + 1 >= v10) {
        goto LABEL_33;
      }
      unint64_t v16 = *(void *)(v6 + 8 * v5);
      if (!v16)
      {
        int64_t v5 = v15 + 2;
        if (v15 + 2 >= v10) {
          goto LABEL_33;
        }
        unint64_t v16 = *(void *)(v6 + 8 * v5);
        if (!v16) {
          break;
        }
      }
    }
LABEL_23:
    unint64_t v9 = (v16 - 1) & v16;
    unint64_t v14 = __clz(__rbit64(v16)) + (v5 << 6);
LABEL_24:
    unint64_t v18 = *(void *)(*(void *)(v2 + 48) + 8 * v14);
    Hasher.init(_seed:)();
    Hasher._combine(_:)(v18 >> 14);
    uint64_t result = Hasher._finalize()();
    uint64_t v19 = -1 << *(unsigned char *)(v4 + 32);
    unint64_t v20 = result & ~v19;
    unint64_t v21 = v20 >> 6;
    if (((-1 << v20) & ~*(void *)(v11 + 8 * (v20 >> 6))) != 0)
    {
      unint64_t v12 = __clz(__rbit64((-1 << v20) & ~*(void *)(v11 + 8 * (v20 >> 6)))) | v20 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      char v22 = 0;
      unint64_t v23 = (unint64_t)(63 - v19) >> 6;
      do
      {
        if (++v21 == v23 && (v22 & 1) != 0)
        {
          __break(1u);
          goto LABEL_36;
        }
        BOOL v24 = v21 == v23;
        if (v21 == v23) {
          unint64_t v21 = 0;
        }
        v22 |= v24;
        uint64_t v25 = *(void *)(v11 + 8 * v21);
      }
      while (v25 == -1);
      unint64_t v12 = __clz(__rbit64(~v25)) + (v21 << 6);
    }
    *(void *)(v11 + ((v12 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v12;
    *(void *)(*(void *)(v4 + 48) + 8 * v12) = v18;
    ++*(void *)(v4 + 16);
  }
  int64_t v17 = v15 + 3;
  if (v17 >= v10)
  {
LABEL_33:
    uint64_t result = swift_release();
    unint64_t v1 = v0;
    goto LABEL_35;
  }
  unint64_t v16 = *(void *)(v6 + 8 * v17);
  if (v16)
  {
    int64_t v5 = v17;
    goto LABEL_23;
  }
  while (1)
  {
    int64_t v5 = v17 + 1;
    if (__OFADD__(v17, 1)) {
      break;
    }
    if (v5 >= v10) {
      goto LABEL_33;
    }
    unint64_t v16 = *(void *)(v6 + 8 * v5);
    ++v17;
    if (v16) {
      goto LABEL_23;
    }
  }
LABEL_37:
  __break(1u);
  return result;
}

{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t result;
  uint64_t v4;
  int64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  void *v12;
  unint64_t v13;
  unint64_t v14;
  int64_t v15;
  unint64_t v16;
  int64_t v17;
  uint64_t *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  char v24;
  unint64_t v25;
  BOOL v26;
  uint64_t v27;
  int64_t v28;
  char v29[72];

  unint64_t v1 = v0;
  uint64_t v2 = *v0;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _SetStorage<Character>);
  uint64_t result = static _SetStorage.resize(original:capacity:move:)();
  uint64_t v4 = result;
  if (!*(void *)(v2 + 16))
  {
    uint64_t result = swift_release();
LABEL_35:
    *unint64_t v1 = v4;
    return result;
  }
  int64_t v5 = 0;
  uint64_t v6 = v2 + 56;
  uint64_t v7 = 1 << *(unsigned char *)(v2 + 32);
  if (v7 < 64) {
    uint64_t v8 = ~(-1 << v7);
  }
  else {
    uint64_t v8 = -1;
  }
  unint64_t v9 = v8 & *(void *)(v2 + 56);
  unint64_t v28 = (unint64_t)(v7 + 63) >> 6;
  int64_t v10 = result + 56;
  while (1)
  {
    if (v9)
    {
      unint64_t v13 = __clz(__rbit64(v9));
      v9 &= v9 - 1;
      unint64_t v14 = v13 | (v5 << 6);
      goto LABEL_24;
    }
    int64_t v15 = v5 + 1;
    if (__OFADD__(v5, 1))
    {
LABEL_36:
      __break(1u);
      goto LABEL_37;
    }
    if (v15 >= v28) {
      goto LABEL_33;
    }
    unint64_t v16 = *(void *)(v6 + 8 * v15);
    ++v5;
    if (!v16)
    {
      int64_t v5 = v15 + 1;
      if (v15 + 1 >= v28) {
        goto LABEL_33;
      }
      unint64_t v16 = *(void *)(v6 + 8 * v5);
      if (!v16)
      {
        int64_t v5 = v15 + 2;
        if (v15 + 2 >= v28) {
          goto LABEL_33;
        }
        unint64_t v16 = *(void *)(v6 + 8 * v5);
        if (!v16) {
          break;
        }
      }
    }
LABEL_23:
    unint64_t v9 = (v16 - 1) & v16;
    unint64_t v14 = __clz(__rbit64(v16)) + (v5 << 6);
LABEL_24:
    unint64_t v18 = (uint64_t *)(*(void *)(v2 + 48) + 16 * v14);
    unint64_t v20 = *v18;
    uint64_t v19 = v18[1];
    Hasher.init(_seed:)();
    MEMORY[0x21050EE80](v29, v20, v19);
    uint64_t result = Hasher._finalize()();
    unint64_t v21 = -1 << *(unsigned char *)(v4 + 32);
    char v22 = result & ~v21;
    unint64_t v23 = v22 >> 6;
    if (((-1 << v22) & ~*(void *)(v10 + 8 * (v22 >> 6))) != 0)
    {
      uint64_t v11 = __clz(__rbit64((-1 << v22) & ~*(void *)(v10 + 8 * (v22 >> 6)))) | v22 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      BOOL v24 = 0;
      uint64_t v25 = (unint64_t)(63 - v21) >> 6;
      do
      {
        if (++v23 == v25 && (v24 & 1) != 0)
        {
          __break(1u);
          goto LABEL_36;
        }
        char v26 = v23 == v25;
        if (v23 == v25) {
          unint64_t v23 = 0;
        }
        v24 |= v26;
        uint64_t v27 = *(void *)(v10 + 8 * v23);
      }
      while (v27 == -1);
      uint64_t v11 = __clz(__rbit64(~v27)) + (v23 << 6);
    }
    *(void *)(v10 + ((v11 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v11;
    unint64_t v12 = (void *)(*(void *)(v4 + 48) + 16 * v11);
    *unint64_t v12 = v20;
    v12[1] = v19;
    ++*(void *)(v4 + 16);
    uint64_t result = swift_bridgeObjectRetain();
  }
  int64_t v17 = v15 + 3;
  if (v17 >= v28)
  {
LABEL_33:
    uint64_t result = swift_release();
    unint64_t v1 = v0;
    goto LABEL_35;
  }
  unint64_t v16 = *(void *)(v6 + 8 * v17);
  if (v16)
  {
    int64_t v5 = v17;
    goto LABEL_23;
  }
  while (1)
  {
    int64_t v5 = v17 + 1;
    if (__OFADD__(v17, 1)) {
      break;
    }
    if (v5 >= v28) {
      goto LABEL_33;
    }
    unint64_t v16 = *(void *)(v6 + 8 * v5);
    ++v17;
    if (v16) {
      goto LABEL_23;
    }
  }
LABEL_37:
  __break(1u);
  return result;
}

{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t result;
  uint64_t v4;
  int64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  int64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  int64_t v15;
  unint64_t v16;
  int64_t v17;
  Swift::UInt32 v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  char v22;
  unint64_t v23;
  BOOL v24;
  uint64_t v25;

  unint64_t v1 = v0;
  uint64_t v2 = *v0;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _SetStorage<Unicode.Scalar>);
  uint64_t result = static _SetStorage.resize(original:capacity:move:)();
  uint64_t v4 = result;
  if (!*(void *)(v2 + 16))
  {
    uint64_t result = swift_release();
LABEL_35:
    *unint64_t v1 = v4;
    return result;
  }
  int64_t v5 = 0;
  uint64_t v6 = v2 + 56;
  uint64_t v7 = 1 << *(unsigned char *)(v2 + 32);
  if (v7 < 64) {
    uint64_t v8 = ~(-1 << v7);
  }
  else {
    uint64_t v8 = -1;
  }
  unint64_t v9 = v8 & *(void *)(v2 + 56);
  int64_t v10 = (unint64_t)(v7 + 63) >> 6;
  uint64_t v11 = result + 56;
  while (1)
  {
    if (v9)
    {
      unint64_t v13 = __clz(__rbit64(v9));
      v9 &= v9 - 1;
      unint64_t v14 = v13 | (v5 << 6);
      goto LABEL_24;
    }
    int64_t v15 = v5 + 1;
    if (__OFADD__(v5, 1))
    {
LABEL_36:
      __break(1u);
      goto LABEL_37;
    }
    if (v15 >= v10) {
      goto LABEL_33;
    }
    unint64_t v16 = *(void *)(v6 + 8 * v15);
    ++v5;
    if (!v16)
    {
      int64_t v5 = v15 + 1;
      if (v15 + 1 >= v10) {
        goto LABEL_33;
      }
      unint64_t v16 = *(void *)(v6 + 8 * v5);
      if (!v16)
      {
        int64_t v5 = v15 + 2;
        if (v15 + 2 >= v10) {
          goto LABEL_33;
        }
        unint64_t v16 = *(void *)(v6 + 8 * v5);
        if (!v16) {
          break;
        }
      }
    }
LABEL_23:
    unint64_t v9 = (v16 - 1) & v16;
    unint64_t v14 = __clz(__rbit64(v16)) + (v5 << 6);
LABEL_24:
    unint64_t v18 = *(_DWORD *)(*(void *)(v2 + 48) + 4 * v14);
    Hasher.init(_seed:)();
    Hasher._combine(_:)(v18);
    uint64_t result = Hasher._finalize()();
    uint64_t v19 = -1 << *(unsigned char *)(v4 + 32);
    unint64_t v20 = result & ~v19;
    unint64_t v21 = v20 >> 6;
    if (((-1 << v20) & ~*(void *)(v11 + 8 * (v20 >> 6))) != 0)
    {
      unint64_t v12 = __clz(__rbit64((-1 << v20) & ~*(void *)(v11 + 8 * (v20 >> 6)))) | v20 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      char v22 = 0;
      unint64_t v23 = (unint64_t)(63 - v19) >> 6;
      do
      {
        if (++v21 == v23 && (v22 & 1) != 0)
        {
          __break(1u);
          goto LABEL_36;
        }
        BOOL v24 = v21 == v23;
        if (v21 == v23) {
          unint64_t v21 = 0;
        }
        v22 |= v24;
        uint64_t v25 = *(void *)(v11 + 8 * v21);
      }
      while (v25 == -1);
      unint64_t v12 = __clz(__rbit64(~v25)) + (v21 << 6);
    }
    *(void *)(v11 + ((v12 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v12;
    *(_DWORD *)(*(void *)(v4 + 48) + 4 * v12) = v18;
    ++*(void *)(v4 + 16);
  }
  int64_t v17 = v15 + 3;
  if (v17 >= v10)
  {
LABEL_33:
    uint64_t result = swift_release();
    unint64_t v1 = v0;
    goto LABEL_35;
  }
  unint64_t v16 = *(void *)(v6 + 8 * v17);
  if (v16)
  {
    int64_t v5 = v17;
    goto LABEL_23;
  }
  while (1)
  {
    int64_t v5 = v17 + 1;
    if (__OFADD__(v17, 1)) {
      break;
    }
    if (v5 >= v10) {
      goto LABEL_33;
    }
    unint64_t v16 = *(void *)(v6 + 8 * v5);
    ++v17;
    if (v16) {
      goto LABEL_23;
    }
  }
LABEL_37:
  __break(1u);
  return result;
}

uint64_t specialized _NativeDictionary.updateValue(_:forKey:isUnique:)(uint64_t a1, Swift::UInt a2, char a3)
{
  uint64_t v4 = v3;
  uint64_t v8 = *v3;
  unint64_t v10 = specialized __RawDictionaryStorage.find<A>(_:)(a2);
  uint64_t v11 = *(void *)(v8 + 16);
  uint64_t v12 = v11 + ((v9 ^ 1) & 1);
  if (__OFADD__(v11, (v9 ^ 1) & 1))
  {
    __break(1u);
LABEL_14:
    __break(1u);
    goto LABEL_15;
  }
  unsigned __int8 v13 = v9;
  uint64_t v14 = *(void *)(v8 + 24);
  if (v14 >= v12 && (a3 & 1) != 0) {
    goto LABEL_7;
  }
  if (v14 >= v12 && (a3 & 1) == 0)
  {
    specialized _NativeDictionary.copy()();
LABEL_7:
    int64_t v15 = (void *)*v4;
    if (v13)
    {
LABEL_8:
      uint64_t v16 = v15[7];
      uint64_t result = *(void *)(v16 + 8 * v10);
      *(void *)(v16 + 8 * v10) = a1;
      return result;
    }
LABEL_11:
    v15[(v10 >> 6) + 8] |= 1 << v10;
    uint64_t v20 = 8 * v10;
    *(void *)(v15[6] + v20) = a2;
    *(void *)(v15[7] + v20) = a1;
    uint64_t v21 = v15[2];
    BOOL v22 = __OFADD__(v21, 1);
    uint64_t v23 = v21 + 1;
    if (!v22)
    {
      uint64_t result = 0;
      void v15[2] = v23;
      return result;
    }
    goto LABEL_14;
  }
  specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v12, a3 & 1);
  unint64_t v18 = specialized __RawDictionaryStorage.find<A>(_:)(a2);
  if ((v13 & 1) == (v19 & 1))
  {
    unint64_t v10 = v18;
    int64_t v15 = (void *)*v4;
    if (v13) {
      goto LABEL_8;
    }
    goto LABEL_11;
  }
LABEL_15:
  uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
  return result;
}

void *specialized _ContiguousArrayBuffer.init(_uninitializedCount:minimumCapacity:)(uint64_t a1, uint64_t a2)
{
  if (a2 <= a1) {
    uint64_t v2 = a1;
  }
  else {
    uint64_t v2 = a2;
  }
  if (!v2) {
    return (void *)MEMORY[0x263F8EE78];
  }
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<TypedInt<_InstructionAddress>>);
  uint64_t v4 = (void *)swift_allocObject();
  int64_t v5 = _swift_stdlib_malloc_size(v4);
  uint64_t v6 = v5 - 32;
  if (v5 < 32) {
    uint64_t v6 = v5 - 25;
  }
  v4[2] = a1;
  v4[3] = 2 * (v6 >> 3);
  return v4;
}

{
  uint64_t v2;
  void *v4;
  size_t v5;

  if (a2 <= a1) {
    uint64_t v2 = a1;
  }
  else {
    uint64_t v2 = a2;
  }
  if (!v2) {
    return (void *)MEMORY[0x263F8EE78];
  }
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Processor.SavePoint>);
  uint64_t v4 = (void *)swift_allocObject();
  int64_t v5 = _swift_stdlib_malloc_size(v4);
  v4[2] = a1;
  v4[3] = 2 * ((uint64_t)(v5 - 32) / 80);
  return v4;
}

{
  uint64_t v2;
  void *v4;
  int64_t v5;
  uint64_t v6;

  if (a2 <= a1) {
    uint64_t v2 = a1;
  }
  else {
    uint64_t v2 = a2;
  }
  if (!v2) {
    return (void *)MEMORY[0x263F8EE78];
  }
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Character>);
  uint64_t v4 = (void *)swift_allocObject();
  int64_t v5 = _swift_stdlib_malloc_size(v4);
  uint64_t v6 = v5 - 32;
  if (v5 < 32) {
    uint64_t v6 = v5 - 17;
  }
  v4[2] = a1;
  v4[3] = 2 * (v6 >> 4);
  return v4;
}

uint64_t specialized Array.remove(at:)@<X0>(unint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v5 = *v2;
  uint64_t result = swift_isUniquelyReferenced_nonNull_native();
  if ((result & 1) == 0)
  {
    uint64_t result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew()(v5);
    uint64_t v5 = result;
  }
  unint64_t v7 = *(void *)(v5 + 16);
  if (v7 <= a1)
  {
    __break(1u);
  }
  else
  {
    uint64_t v8 = v5 + 80 * a1;
    long long v9 = *(_OWORD *)(v8 + 32);
    v8 += 32;
    char v10 = *(unsigned char *)(v8 + 16);
    unint64_t v11 = v7 - 1;
    char v12 = *(unsigned char *)(v8 + 40);
    char v13 = *(unsigned char *)(v8 + 41);
    uint64_t v14 = *(void *)(v8 + 48);
    uint64_t v15 = *(void *)(v8 + 72);
    *(_OWORD *)a2 = v9;
    *(unsigned char *)(a2 + 16) = v10;
    *(_OWORD *)(a2 + 24) = *(_OWORD *)(v8 + 24);
    *(unsigned char *)(a2 + 40) = v12;
    *(unsigned char *)(a2 + 41) = v13;
    *(void *)(a2 + 48) = v14;
    *(_OWORD *)(a2 + 56) = *(_OWORD *)(v8 + 56);
    *(void *)(a2 + 72) = v15;
    uint64_t result = (uint64_t)memmove((void *)v8, (const void *)(v8 + 80), 80 * (v11 - a1));
    *(void *)(v5 + 16) = v11;
    *uint64_t v2 = v5;
  }
  return result;
}

uint64_t specialized Array._customRemoveLast()@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = *v1;
  uint64_t result = swift_isUniquelyReferenced_nonNull_native();
  if (result)
  {
    uint64_t v5 = *(void *)(v3 + 16);
    if (v5)
    {
LABEL_3:
      uint64_t v6 = v5 - 1;
      uint64_t v7 = v3 + 80 * v6;
      char v8 = *(unsigned char *)(v7 + 48);
      char v9 = *(unsigned char *)(v7 + 72);
      char v10 = *(unsigned char *)(v7 + 73);
      uint64_t v11 = *(void *)(v7 + 80);
      uint64_t v12 = *(void *)(v7 + 104);
      *(_OWORD *)a1 = *(_OWORD *)(v7 + 32);
      *(unsigned char *)(a1 + 16) = v8;
      *(_OWORD *)(a1 + 24) = *(_OWORD *)(v7 + 56);
      *(unsigned char *)(a1 + 40) = v9;
      *(unsigned char *)(a1 + 41) = v10;
      *(void *)(a1 + 48) = v11;
      *(_OWORD *)(a1 + 56) = *(_OWORD *)(v7 + 88);
      *(void *)(a1 + 72) = v12;
      *(void *)(v3 + 16) = v6;
      *unint64_t v1 = v3;
      return result;
    }
  }
  else
  {
    uint64_t result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew()(v3);
    uint64_t v3 = result;
    uint64_t v5 = *(void *)(result + 16);
    if (v5) {
      goto LABEL_3;
    }
  }
  __break(1u);
  return result;
}

uint64_t specialized DefaultIndices.formIndex(after:)(unint64_t *a1, unint64_t a2, unint64_t a3)
{
  unint64_t v6 = _StringGuts.validateScalarIndex(_:)(*a1, a2, a3);
  if ((a3 & 0x1000000000000000) != 0)
  {
    uint64_t result = String.UnicodeScalarView._foreignIndex(after:)();
  }
  else
  {
    unint64_t v7 = v6 >> 16;
    if ((a3 & 0x2000000000000000) != 0)
    {
      v13[0] = a2;
      v13[1] = a3 & 0xFFFFFFFFFFFFFFLL;
      int v9 = *((unsigned __int8 *)v13 + v7);
    }
    else
    {
      if ((a2 & 0x1000000000000000) != 0) {
        uint64_t v8 = (a3 & 0xFFFFFFFFFFFFFFFLL) + 32;
      }
      else {
        uint64_t v8 = _StringObject.sharedUTF8.getter();
      }
      int v9 = *(unsigned __int8 *)(v8 + v7);
    }
    int v10 = (char)v9;
    unsigned int v11 = __clz(v9 ^ 0xFF) - 24;
    if (v10 >= 0) {
      LOBYTE(v11) = 1;
    }
    uint64_t result = ((v7 + v11) << 16) | 5;
  }
  *a1 = result;
  return result;
}

unint64_t specialized Collection.count.getter(unint64_t a1, unint64_t a2)
{
  uint64_t v4 = HIBYTE(a2) & 0xF;
  if ((a2 & 0x2000000000000000) == 0) {
    uint64_t v4 = a1;
  }
  uint64_t v5 = 7;
  if (((a2 >> 60) & ((a1 & 0x800000000000000) == 0)) != 0) {
    uint64_t v5 = 11;
  }
  unint64_t v6 = v5 | (v4 << 16);
  unint64_t v7 = _StringGuts.validateInclusiveScalarIndex(_:)(0xFuLL, a1, a2);
  unint64_t result = _StringGuts.validateInclusiveScalarIndex(_:)(v6, a1, a2);
  unint64_t v9 = result >> 14;
  if (v7 >> 14 < result >> 14)
  {
    for (uint64_t i = 0; ; ++i)
    {
      uint64_t v11 = i + 1;
      if (__OFADD__(i, 1)) {
        break;
      }
      if ((a2 & 0x1000000000000000) != 0)
      {
        unint64_t result = String.UnicodeScalarView._foreignIndex(after:)();
        unint64_t v7 = result;
      }
      else
      {
        unint64_t v12 = v7 >> 16;
        if ((a2 & 0x2000000000000000) != 0)
        {
          unint64_t v22 = a1;
          uint64_t v23 = a2 & 0xFFFFFFFFFFFFFFLL;
          int v13 = *((unsigned __int8 *)&v22 + v12);
        }
        else
        {
          unint64_t result = (a2 & 0xFFFFFFFFFFFFFFFLL) + 32;
          if ((a1 & 0x1000000000000000) == 0) {
            unint64_t result = _StringObject.sharedUTF8.getter();
          }
          int v13 = *(unsigned __int8 *)(result + v12);
        }
        int v14 = (char)v13;
        unsigned int v15 = __clz(v13 ^ 0xFF) - 24;
        if (v14 >= 0) {
          LOBYTE(v15) = 1;
        }
        unint64_t v7 = ((v12 + v15) << 16) | 5;
      }
      if (v9 <= v7 >> 14) {
        return v11;
      }
    }
    __break(1u);
LABEL_40:
    __break(1u);
    return result;
  }
  if (v9 < v7 >> 14)
  {
    uint64_t v11 = 0;
    while (!__OFSUB__(v11--, 1))
    {
      if ((a2 & 0x1000000000000000) != 0)
      {
        unint64_t result = String.UnicodeScalarView._foreignIndex(before:)();
        unint64_t v7 = result;
      }
      else
      {
        if ((a2 & 0x2000000000000000) != 0)
        {
          unint64_t v22 = a1;
          uint64_t v23 = a2 & 0xFFFFFFFFFFFFFFLL;
          if ((*((unsigned char *)&v22 + (v7 >> 16) - 1) & 0xC0) == 0x80)
          {
            uint64_t v20 = 0;
            do
              int v21 = *((unsigned char *)&v22 + (v7 >> 16) + v20-- - 2) & 0xC0;
            while (v21 == 128);
            uint64_t v19 = 1 - v20;
          }
          else
          {
            uint64_t v19 = 1;
          }
        }
        else
        {
          unint64_t result = (a2 & 0xFFFFFFFFFFFFFFFLL) + 32;
          if ((a1 & 0x1000000000000000) == 0) {
            unint64_t result = _StringObject.sharedUTF8.getter();
          }
          uint64_t v17 = 0;
          do
            int v18 = *(unsigned char *)(result + (v7 >> 16) - 1 + v17--) & 0xC0;
          while (v18 == 128);
          uint64_t v19 = -v17;
        }
        unint64_t v7 = (v7 - (v19 << 16)) & 0xFFFFFFFFFFFF0000 | 5;
      }
      if (v9 >= v7 >> 14) {
        return v11;
      }
    }
    goto LABEL_40;
  }
  return 0;
}

uint64_t specialized DefaultIndices<>.index(before:)(unint64_t a1, unint64_t a2, unint64_t a3)
{
  unint64_t v5 = _StringGuts.validateInclusiveScalarIndex(_:)(a1, a2, a3);
  if (v5 < 0x4000)
  {
    __break(1u);
  }
  else
  {
    unint64_t v6 = v5;
    if ((a3 & 0x1000000000000000) == 0)
    {
      if ((a3 & 0x2000000000000000) != 0)
      {
        v17[0] = a2;
        v17[1] = a3 & 0xFFFFFFFFFFFFFFLL;
        unint64_t v12 = (char *)v17 + (v5 >> 16);
        if ((*(v12 - 1) & 0xC0) == 0x80)
        {
          uint64_t v9 = 0;
          int v13 = v12 - 2;
          do
            int v14 = v13[v9--] & 0xC0;
          while (v14 == 128);
          goto LABEL_13;
        }
      }
      else
      {
        if ((a2 & 0x1000000000000000) != 0) {
          uint64_t v7 = (a3 & 0xFFFFFFFFFFFFFFFLL) + 32;
        }
        else {
          uint64_t v7 = _StringObject.sharedUTF8.getter();
        }
        uint64_t v8 = (v6 >> 16) + v7;
        if ((*(unsigned char *)(v8 - 1) & 0xC0) == 0x80)
        {
          uint64_t v9 = 0;
          uint64_t v10 = v8 - 2;
          do
            int v11 = *(unsigned char *)(v10 + v9--) & 0xC0;
          while (v11 == 128);
LABEL_13:
          uint64_t v15 = 1 - v9;
          return (v6 - (v15 << 16)) & 0xFFFFFFFFFFFF0000 | 5;
        }
      }
      uint64_t v15 = 1;
      return (v6 - (v15 << 16)) & 0xFFFFFFFFFFFF0000 | 5;
    }
  }

  return String.UnicodeScalarView._foreignIndex(before:)();
}

void *specialized Sequence._copySequenceContents(initializing:)(void *result, Swift::String_optional *a2, uint64_t a3, uint64_t a4, unint64_t a5)
{
  unint64_t v5 = result;
  uint64_t v6 = HIBYTE(a5) & 0xF;
  uint64_t v11 = a4;
  unint64_t v12 = a5;
  if ((a5 & 0x2000000000000000) == 0) {
    uint64_t v6 = a4 & 0xFFFFFFFFFFFFLL;
  }
  uint64_t v13 = v6;
  if (!a2)
  {
    uint64_t v7 = 0;
LABEL_14:
    *unint64_t v5 = a4;
    v5[1] = a5;
    _OWORD v5[2] = 0;
    v5[3] = v6;
    return (void *)v7;
  }
  uint64_t v7 = a3;
  if (!a3) {
    goto LABEL_14;
  }
  if ((a3 & 0x8000000000000000) == 0)
  {
    uint64_t v8 = a2;
    uint64_t v9 = 0;
    while (1)
    {
      Swift::String_optional v10 = String.Iterator.next()();
      if (!v10.value._object) {
        break;
      }
      ++v9;
      *v8++ = v10;
      if (v7 == v9)
      {
        a4 = v11;
        a5 = v12;
        goto LABEL_13;
      }
    }
    a4 = v11;
    a5 = v12;
    uint64_t v7 = v9;
LABEL_13:
    uint64_t v6 = v13;
    goto LABEL_14;
  }
  __break(1u);
  return result;
}

unint64_t _StringGuts.validateScalarIndex(_:in:)(unint64_t result, unint64_t a2, unint64_t a3, uint64_t a4, unint64_t a5)
{
  char v9 = (a5 & 0x1000000000000000) == 0 || (a4 & 0x800000000000000) != 0;
  unint64_t v10 = result & 0xC;
  uint64_t v11 = 4 << v9;
  if ((result & 1) == 0 || v10 == v11)
  {
LABEL_9:
    if (v10 == v11) {
      unint64_t result = _StringGuts._slowEnsureMatchingEncoding(_:)(result, a4, a5);
    }
    if (result >> 14 < a2 >> 14 || result >> 14 >= a3 >> 14)
    {
      __break(1u);
    }
    else if (result)
    {
      return result;
    }
    return result & 0xC | _StringGuts.scalarAlignSlow(_:)(result, a4, a5) & 0xFFFFFFFFFFFFFFF3 | 1;
  }
  unint64_t v10 = result >> 14;
  if (result >> 14 < a2 >> 14 || (uint64_t v11 = a3 >> 14, v10 >= a3 >> 14))
  {
    __break(1u);
    goto LABEL_9;
  }
  return result;
}

int64_t specialized _NativeSet.index(after:)(int64_t result, int a2, char a3, uint64_t a4)
{
  if (a3) {
    goto LABEL_20;
  }
  unint64_t v4 = result;
  if (result < 0 || (unint64_t result = 1 << *(unsigned char *)(a4 + 32), result <= (uint64_t)v4))
  {
    __break(1u);
    goto LABEL_18;
  }
  unint64_t v5 = v4 >> 6;
  uint64_t v6 = a4 + 56;
  unint64_t v7 = *(void *)(a4 + 56 + 8 * (v4 >> 6));
  if (((v7 >> v4) & 1) == 0)
  {
LABEL_18:
    __break(1u);
    goto LABEL_19;
  }
  if (*(_DWORD *)(a4 + 36) != a2)
  {
LABEL_19:
    __break(1u);
LABEL_20:
    __break(1u);
    return result;
  }
  unint64_t v8 = v7 & (-2 << (v4 & 0x3F));
  if (v8) {
    return __clz(__rbit64(v8)) | v4 & 0xFFFFFFFFFFFFFFC0;
  }
  unint64_t v9 = v5 + 1;
  unint64_t v10 = (unint64_t)(result + 63) >> 6;
  if (v5 + 1 < v10)
  {
    unint64_t v11 = *(void *)(v6 + 8 * v9);
    if (v11) {
      return __clz(__rbit64(v11)) + (v9 << 6);
    }
    unint64_t v9 = v5 + 2;
    if (v5 + 2 < v10)
    {
      unint64_t v11 = *(void *)(v6 + 8 * v9);
      if (v11) {
        return __clz(__rbit64(v11)) + (v9 << 6);
      }
      while (v10 - 3 != v5)
      {
        unint64_t v11 = *(void *)(a4 + 80 + 8 * v5++);
        if (v11)
        {
          unint64_t v9 = v5 + 2;
          return __clz(__rbit64(v11)) + (v9 << 6);
        }
      }
    }
  }
  return result;
}

uint64_t specialized _NativeSet.startIndex.getter(uint64_t a1)
{
  unint64_t v1 = *(void *)(a1 + 56);
  if (v1)
  {
    uint64_t v2 = 0;
    return __clz(__rbit64(v1)) + v2;
  }
  char v5 = *(unsigned char *)(a1 + 32);
  unsigned int v6 = v5 & 0x3F;
  uint64_t v3 = 1 << v5;
  if (v6 < 7) {
    return v3;
  }
  unint64_t v1 = *(void *)(a1 + 64);
  if (v1)
  {
    uint64_t v2 = 64;
    return __clz(__rbit64(v1)) + v2;
  }
  unint64_t v7 = (unint64_t)(v3 + 63) >> 6;
  if (v7 <= 2) {
    unint64_t v7 = 2;
  }
  unint64_t v8 = v7 - 2;
  unint64_t v9 = (unint64_t *)(a1 + 72);
  uint64_t v2 = 64;
  while (v8)
  {
    unint64_t v10 = *v9++;
    unint64_t v1 = v10;
    --v8;
    v2 += 64;
    if (v10) {
      return __clz(__rbit64(v1)) + v2;
    }
  }
  return v3;
}

uint64_t specialized Zip2Sequence.Iterator.next()@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = type metadata accessor for CaptureList.Capture();
  uint64_t v4 = *(void *)(v3 - 8);
  uint64_t result = MEMORY[0x270FA5388](v3);
  unint64_t v7 = (char *)&v21 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (*(unsigned char *)(v1 + 32) != 1)
  {
    unint64_t v10 = *(void *)(v1 + 8);
    unint64_t v11 = *(void *)(*(void *)v1 + 16);
    if (v10 != v11)
    {
      if (v10 >= v11)
      {
        __break(1u);
      }
      else
      {
        unint64_t v12 = *(uint64_t (**)(char *, unint64_t, uint64_t))(v4 + 16);
        unint64_t v13 = *(void *)v1
            + ((*(unsigned __int8 *)(v4 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80))
            + *(void *)(v4 + 72) * v10;
        *(void *)(v1 + 8) = v10 + 1;
        uint64_t result = v12(v7, v13, v3);
        uint64_t v15 = *(void *)(v1 + 16);
        unint64_t v14 = *(void *)(v1 + 24);
        unint64_t v16 = *(void *)(v15 + 16);
        if (v14 == v16)
        {
          (*(void (**)(char *, uint64_t))(v4 + 8))(v7, v3);
          goto LABEL_9;
        }
        if (v14 < v16)
        {
          int v18 = (long long *)(v15 + 72 * v14 + 32);
          *(void *)(v1 + 24) = v14 + 1;
          uint64_t v19 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (CaptureList.Capture, Processor._StoredCapture));
          uint64_t v20 = a1 + *(int *)(v19 + 48);
          (*(void (**)(uint64_t, char *, uint64_t))(v4 + 32))(a1, v7, v3);
          outlined init with copy of Processor._StoredCapture(v18, v20);
          return (*(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v19 - 8) + 56))(a1, 0, 1, v19);
        }
      }
      __break(1u);
      return result;
    }
LABEL_9:
    *(unsigned char *)(v1 + 32) = 1;
    uint64_t v17 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (CaptureList.Capture, Processor._StoredCapture));
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v17 - 8) + 56))(a1, 1, 1, v17);
  }
  uint64_t v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (CaptureList.Capture, Processor._StoredCapture));
  unint64_t v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v8 - 8) + 56);

  return v9(a1, 1, 1, v8);
}

uint64_t specialized implicit closure #1 in Collection<>._ranges<A>(of:)(void *a1, void *a2)
{
  if (*a1 == *a2 && a1[1] == a2[1]) {
    return 1;
  }
  else {
    return _stringCompareWithSmolCheck(_:_:expecting:)();
  }
}

unint64_t specialized Dictionary.init(dictionaryLiteral:)(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 16);
  if (!v1) {
    return MEMORY[0x263F8EE80];
  }
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<Character, Int>);
  uint64_t v3 = (void *)static _DictionaryStorage.allocate(capacity:)();
  uint64_t v4 = (uint64_t *)(a1 + 48);
  do
  {
    uint64_t v5 = *(v4 - 1);
    if (!v5) {
      break;
    }
    uint64_t v6 = *(v4 - 2);
    uint64_t v7 = *v4;
    unint64_t result = specialized __RawDictionaryStorage.find<A>(_:)(v6, *(v4 - 1));
    if (v9)
    {
      __break(1u);
LABEL_11:
      __break(1u);
      return result;
    }
    *(void *)((char *)v3 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
    unint64_t v10 = (uint64_t *)(v3[6] + 16 * result);
    *unint64_t v10 = v6;
    v10[1] = v5;
    *(void *)(v3[7] + 8 * result) = v7;
    uint64_t v11 = v3[2];
    BOOL v12 = __OFADD__(v11, 1);
    uint64_t v13 = v11 + 1;
    if (v12) {
      goto LABEL_11;
    }
    v4 += 3;
    v3[2] = v13;
    swift_bridgeObjectRetain();
    --v1;
  }
  while (v1);
  return (unint64_t)v3;
}

{
  uint64_t v1;
  void *v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t result;
  char v9;
  uint64_t *v10;
  uint64_t v11;
  BOOL v12;
  uint64_t v13;

  uint64_t v1 = *(void *)(a1 + 16);
  if (!v1) {
    return MEMORY[0x263F8EE80];
  }
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<Character, TypedInt<_ElementRegister>>);
  uint64_t v3 = (void *)static _DictionaryStorage.allocate(capacity:)();
  uint64_t v4 = (uint64_t *)(a1 + 48);
  do
  {
    uint64_t v5 = *(v4 - 1);
    if (!v5) {
      break;
    }
    uint64_t v6 = *(v4 - 2);
    uint64_t v7 = *v4;
    unint64_t result = specialized __RawDictionaryStorage.find<A>(_:)(v6, *(v4 - 1));
    if (v9)
    {
      __break(1u);
LABEL_11:
      __break(1u);
      return result;
    }
    *(void *)((char *)v3 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
    unint64_t v10 = (uint64_t *)(v3[6] + 16 * result);
    *unint64_t v10 = v6;
    v10[1] = v5;
    *(void *)(v3[7] + 8 * result) = v7;
    uint64_t v11 = v3[2];
    BOOL v12 = __OFADD__(v11, 1);
    uint64_t v13 = v11 + 1;
    if (v12) {
      goto LABEL_11;
    }
    v4 += 3;
    v3[2] = v13;
    swift_bridgeObjectRetain();
    --v1;
  }
  while (v1);
  return (unint64_t)v3;
}

{
  uint64_t v1;
  void *v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t result;
  char v8;
  uint64_t v9;
  uint64_t v10;
  BOOL v11;
  uint64_t v12;

  uint64_t v1 = *(void *)(a1 + 16);
  if (!v1) {
    return MEMORY[0x263F8EE80];
  }
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<[Character], TypedInt<_SequenceRegister>>);
  uint64_t v3 = (void *)static _DictionaryStorage.allocate(capacity:)();
  uint64_t v4 = (uint64_t *)(a1 + 40);
  do
  {
    uint64_t v5 = *(v4 - 1);
    if (!v5) {
      break;
    }
    uint64_t v6 = *v4;
    unint64_t result = specialized __RawDictionaryStorage.find<A>(_:)(*(v4 - 1));
    if (v8)
    {
      __break(1u);
LABEL_11:
      __break(1u);
      return result;
    }
    *(void *)((char *)v3 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
    char v9 = 8 * result;
    *(void *)(v3[6] + v9) = v5;
    *(void *)(v3[7] + v9) = v6;
    unint64_t v10 = v3[2];
    uint64_t v11 = __OFADD__(v10, 1);
    BOOL v12 = v10 + 1;
    if (v11) {
      goto LABEL_11;
    }
    v3[2] = v12;
    swift_bridgeObjectRetain();
    v4 += 2;
    --v1;
  }
  while (v1);
  return (unint64_t)v3;
}

{
  uint64_t v1;
  void *v3;
  uint64_t *v4;
  uint64_t v5;
  Swift::UInt v6;
  unint64_t result;
  char v8;
  uint64_t v9;
  uint64_t v10;
  BOOL v11;
  uint64_t v12;

  uint64_t v1 = *(void *)(a1 + 16);
  if (!v1) {
    return MEMORY[0x263F8EE80];
  }
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<ReferenceID, [TypedInt<_InstructionAddress>]>);
  uint64_t v3 = (void *)static _DictionaryStorage.allocate(capacity:)();
  uint64_t v4 = (uint64_t *)(a1 + 40);
  do
  {
    uint64_t v5 = *v4;
    if (!*v4) {
      break;
    }
    uint64_t v6 = *(v4 - 1);
    unint64_t result = specialized __RawDictionaryStorage.find<A>(_:)(v6);
    if (v8)
    {
      __break(1u);
LABEL_11:
      __break(1u);
      return result;
    }
    *(void *)((char *)v3 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
    char v9 = 8 * result;
    *(void *)(v3[6] + v9) = v6;
    *(void *)(v3[7] + v9) = v5;
    unint64_t v10 = v3[2];
    uint64_t v11 = __OFADD__(v10, 1);
    BOOL v12 = v10 + 1;
    if (v11) {
      goto LABEL_11;
    }
    v4 += 2;
    v3[2] = v12;
    swift_bridgeObjectRetain();
    --v1;
  }
  while (v1);
  return (unint64_t)v3;
}

{
  uint64_t v1;
  void *v3;
  uint64_t *i;
  Swift::UInt v5;
  uint64_t v6;
  unint64_t result;
  char v8;
  uint64_t v9;
  uint64_t v10;
  BOOL v11;
  uint64_t v12;

  uint64_t v1 = *(void *)(a1 + 16);
  if (v1)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<ReferenceID, Int>);
    uint64_t v3 = (void *)static _DictionaryStorage.allocate(capacity:)();
    for (uint64_t i = (uint64_t *)(a1 + 40); ; i += 2)
    {
      uint64_t v5 = *(i - 1);
      uint64_t v6 = *i;
      unint64_t result = specialized __RawDictionaryStorage.find<A>(_:)(v5);
      if (v8) {
        break;
      }
      *(void *)((char *)v3 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
      char v9 = 8 * result;
      *(void *)(v3[6] + v9) = v5;
      *(void *)(v3[7] + v9) = v6;
      unint64_t v10 = v3[2];
      uint64_t v11 = __OFADD__(v10, 1);
      BOOL v12 = v10 + 1;
      if (v11) {
        goto LABEL_10;
      }
      v3[2] = v12;
      if (!--v1) {
        return (unint64_t)v3;
      }
    }
    __break(1u);
LABEL_10:
    __break(1u);
  }
  else
  {
    return MEMORY[0x263F8EE80];
  }
  return result;
}

uint64_t specialized SubstringSearcher.State.init(text:pattern:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unint64_t a5, unint64_t a6)
{
  uint64_t v9 = Substring.index(_:offsetBy:limitedBy:)();
  if (v10) {
    unint64_t v11 = a6;
  }
  else {
    unint64_t v11 = v9;
  }
  if (v11 >> 14 < a5 >> 14) {
    goto LABEL_31;
  }
  Substring.subscript.getter();
  uint64_t v12 = Substring.distance(from:to:)();
  swift_bridgeObjectRelease();
  unint64_t v13 = specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x263F8EE78]);
  unint64_t v14 = a5;
  uint64_t v15 = (void *)v13;
  if (v12 != 4)
  {
    Substring.distance(from:to:)();
LABEL_25:
    swift_bridgeObjectRelease();
    if (a4)
    {
      Substring.index(_:offsetBy:limitedBy:)();
      swift_bridgeObjectRelease();
    }
    return (uint64_t)v15;
  }
  if ((v14 ^ a6) < 0x4000) {
    goto LABEL_25;
  }
  uint64_t v36 = a4;
  uint64_t v16 = 0;
  while (1)
  {
    uint64_t v17 = Substring.subscript.getter();
    uint64_t v19 = v18;
    uint64_t v20 = Substring.index(after:)();
    if (__OFADD__(v16, 1)) {
      break;
    }
    uint64_t v21 = v20;
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    unint64_t v24 = specialized __RawDictionaryStorage.find<A>(_:)(v17, v19);
    uint64_t v25 = v15[2];
    BOOL v26 = (v23 & 1) == 0;
    uint64_t v27 = v25 + v26;
    if (__OFADD__(v25, v26)) {
      goto LABEL_29;
    }
    char v28 = v23;
    if (v15[3] >= v27)
    {
      if (isUniquelyReferenced_nonNull_native)
      {
        if (v23) {
          goto LABEL_10;
        }
      }
      else
      {
        specialized _NativeDictionary.copy()();
        if (v28) {
          goto LABEL_10;
        }
      }
    }
    else
    {
      specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v27, isUniquelyReferenced_nonNull_native);
      unint64_t v29 = specialized __RawDictionaryStorage.find<A>(_:)(v17, v19);
      if ((v28 & 1) != (v30 & 1)) {
        goto LABEL_32;
      }
      unint64_t v24 = v29;
      if (v28)
      {
LABEL_10:
        swift_bridgeObjectRelease();
        *(void *)(v15[7] + 8 * v24) = v16;
        goto LABEL_11;
      }
    }
    v15[(v24 >> 6) + 8] |= 1 << v24;
    uint64_t v31 = (uint64_t *)(v15[6] + 16 * v24);
    *uint64_t v31 = v17;
    v31[1] = v19;
    *(void *)(v15[7] + 8 * v24) = v16;
    uint64_t v32 = v15[2];
    BOOL v33 = __OFADD__(v32, 1);
    uint64_t v34 = v32 + 1;
    if (v33) {
      goto LABEL_30;
    }
    void v15[2] = v34;
LABEL_11:
    swift_bridgeObjectRelease();
    ++v16;
    if ((v21 ^ a6) < 0x4000)
    {
      a4 = v36;
      goto LABEL_25;
    }
  }
  __break(1u);
LABEL_29:
  __break(1u);
LABEL_30:
  __break(1u);
LABEL_31:
  __break(1u);
LABEL_32:
  uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
  return result;
}

unint64_t lazy protocol witness table accessor for type String and conformance String()
{
  unint64_t result = lazy protocol witness table cache variable for type String and conformance String;
  if (!lazy protocol witness table cache variable for type String and conformance String)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type String and conformance String);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type String and conformance String;
  if (!lazy protocol witness table cache variable for type String and conformance String)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type String and conformance String);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type String and conformance String;
  if (!lazy protocol witness table cache variable for type String and conformance String)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type String and conformance String);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type Substring and conformance Substring()
{
  unint64_t result = lazy protocol witness table cache variable for type Substring and conformance Substring;
  if (!lazy protocol witness table cache variable for type Substring and conformance Substring)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Substring and conformance Substring);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type Substring and conformance Substring;
  if (!lazy protocol witness table cache variable for type Substring and conformance Substring)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Substring and conformance Substring);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type Substring and conformance Substring;
  if (!lazy protocol witness table cache variable for type Substring and conformance Substring)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Substring and conformance Substring);
  }
  return result;
}

uint64_t type metadata accessor for Regex()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t type metadata accessor for ZSearcher()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t type metadata accessor for RangesCollection()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t type metadata accessor for RegexRangesCollection()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t type metadata accessor for SplitCollection()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t sub_209F82F44()
{
  return MEMORY[0x270FA0238](v0, 64, 7);
}

uint64_t sub_209F82F58()
{
  swift_bridgeObjectRelease();

  return MEMORY[0x270FA0238](v0, 24, 7);
}

uint64_t sub_209F82F90()
{
  return MEMORY[0x270FA0238](v0, 24, 7);
}

uint64_t type metadata accessor for RegexMatchesCollection()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t type metadata accessor for RegexMatchesCollection.Iterator()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t type metadata accessor for FixedPatternConsumer()
{
  return swift_getGenericMetadata();
}

uint64_t type metadata accessor for Regex.Match()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t specialized static _CharacterClassModel.== infix(_:_:)(int a1, unsigned int a2)
{
  int v2 = a1;
  switch((char)a2)
  {
    case 1:
      uint64_t result = 0;
      if (v2 == 1) {
        goto LABEL_17;
      }
      break;
    case 2:
      uint64_t result = 0;
      if (v2 == 2) {
        goto LABEL_17;
      }
      break;
    case 3:
      uint64_t result = 0;
      if (v2 == 3) {
        goto LABEL_17;
      }
      break;
    case 4:
      uint64_t result = 0;
      if (v2 == 4) {
        goto LABEL_17;
      }
      break;
    case 5:
      uint64_t result = 0;
      if (v2 == 5) {
        goto LABEL_17;
      }
      break;
    case 6:
      uint64_t result = 0;
      if (v2 == 6) {
        goto LABEL_17;
      }
      break;
    case 7:
      uint64_t result = 0;
      if (v2 == 7) {
        goto LABEL_17;
      }
      break;
    default:
      uint64_t result = 0;
      if (!v2)
      {
LABEL_17:
        if ((((a1 ^ a2) >> 8) & 1) == 0 && ((a1 ^ a2) & 0x10000) == 0) {
          uint64_t result = ((a1 & 0x1000000) == 0) ^ ((a2 & 0x1000000) >> 24);
        }
      }
      break;
  }
  return result;
}

uint64_t specialized Collection._failEarlyRangeCheck(_:bounds:)(uint64_t a1, uint64_t a2)
{
  swift_getAssociatedTypeWitness();
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  uint64_t v5 = type metadata accessor for Range();
  uint64_t v6 = *(void *)(v5 - 8);
  uint64_t v7 = MEMORY[0x270FA5388](v5);
  uint64_t v9 = (char *)v17 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v7);
  unint64_t v11 = (char *)v17 - v10;
  v17[1] = AssociatedConformanceWitness;
  LOBYTE(AssociatedConformanceWitness) = dispatch thunk of static Comparable.<= infix(_:_:)();
  uint64_t v12 = *(void (**)(char *, uint64_t, uint64_t))(v6 + 16);
  v12(v11, a1, v5);
  v12(v9, a2, v5);
  if ((AssociatedConformanceWitness & 1) == 0)
  {
    uint64_t v16 = *(void (**)(char *, uint64_t))(v6 + 8);
    v16(v9, v5);
    uint64_t result = ((uint64_t (*)(char *, uint64_t))v16)(v11, v5);
    goto LABEL_5;
  }
  char v13 = dispatch thunk of static Comparable.<= infix(_:_:)();
  unint64_t v14 = *(void (**)(char *, uint64_t))(v6 + 8);
  v14(v9, v5);
  uint64_t result = ((uint64_t (*)(char *, uint64_t))v14)(v11, v5);
  if ((v13 & 1) == 0) {
LABEL_5:
  }
    __break(1u);
  return result;
}

uint64_t specialized RegexRangesCollection.subscript.getter(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  long long v2 = *(_OWORD *)(a1 + 16);
  v5[0] = *(_OWORD *)a1;
  v5[1] = v2;
  uint64_t v6 = v1;
  RegexMatchesCollection.subscript.getter((uint64_t *)v5, v7);
  uint64_t v3 = v7[3];
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v3;
}

uint64_t __swift_instantiateConcreteTypeFromMangledName(uint64_t *a1)
{
  uint64_t result = *a1;
  if (result < 0)
  {
    uint64_t result = swift_getTypeByMangledNameInContext2();
    *a1 = result;
  }
  return result;
}

uint64_t outlined destroy of Any?(uint64_t a1)
{
  uint64_t CanonicalSpecializedMetadata = swift_getCanonicalSpecializedMetadata();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(CanonicalSpecializedMetadata - 8) + 8))(a1, CanonicalSpecializedMetadata);
  return a1;
}

unint64_t specialized Instruction.OpCode.init(rawValue:)(unint64_t result)
{
  if (result >= 0x1D) {
    return 29;
  }
  return result;
}

unint64_t specialized _CharacterClassModel.Representation.init(rawValue:)(unint64_t result)
{
  if (result >= 8) {
    return 8;
  }
  return result;
}

unint64_t specialized CaptureTransform.description.getter()
{
  _StringGuts.grow(_:)(43);
  swift_bridgeObjectRelease();
  v0._uint64_t countAndFlagsBits = _typeName(_:qualified:)();
  String.append(_:)(v0);
  swift_bridgeObjectRelease();
  v1._uint64_t countAndFlagsBits = 0x5F746C7573657220;
  v1._uint64_t object = (void *)0xED00003D65707974;
  String.append(_:)(v1);
  v2._uint64_t countAndFlagsBits = _typeName(_:qualified:)();
  String.append(_:)(v2);
  swift_bridgeObjectRelease();
  v3._uint64_t countAndFlagsBits = 62;
  v3._uint64_t object = (void *)0xE100000000000000;
  String.append(_:)(v3);
  return 0xD000000000000019;
}

uint64_t specialized DSLTree.CustomCharacterClass.AsciiBitset.init(_:_:_:)(uint64_t a1, char a2)
{
  return a2 & 1;
}

uint64_t specialized DSLTree.CustomCharacterClass.AsciiBitset.init(low:high:isInverted:isCaseInsensitive:)(uint64_t result, unsigned __int8 a2, char a3, char a4)
{
  if (a2 >= result)
  {
    uint64_t v5 = 0;
    uint64_t v6 = 0;
    unint64_t v7 = result;
    while (1)
    {
      int v8 = v7;
      if (v7 >= 0x40)
      {
        if ((char)v7 <= 63) {
          uint64_t v10 = 0;
        }
        else {
          uint64_t v10 = 1 << v7;
        }
        v5 |= v10;
        if ((a4 & 1) == 0) {
          goto LABEL_9;
        }
      }
      else
      {
        v6 |= 1 << v7;
        if ((a4 & 1) == 0) {
          goto LABEL_9;
        }
      }
      uint64_t v9 = v5 | (1 << (v7 + 32));
      if (v7 - 123 >= 0xFFFFFFE6) {
        v5 |= 1 << (v7 + 32);
      }
      if (v7 - 91 > 0xFFFFFFE4) {
        uint64_t v5 = v9;
      }
LABEL_9:
      if (a2 == v7) {
        return a3 & 1;
      }
      ++v7;
      if (v8 == 255)
      {
        __break(1u);
        break;
      }
    }
  }
  __break(1u);
  return result;
}

uint64_t specialized static QuantifyPayload.packInfoValues(_:_:_:_:isScalarSemantics:)(uint64_t a1, uint64_t a2, uint64_t a3, char a4, char a5, char a6)
{
  uint64_t v12 = type metadata accessor for AST.Quantification.Kind();
  uint64_t v13 = *(void *)(v12 - 8);
  MEMORY[0x270FA5388](v12);
  uint64_t v15 = (char *)&v21 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t))(v13 + 16))(v15, a1, v12);
  int v16 = (*(uint64_t (**)(char *, uint64_t))(v13 + 88))(v15, v12);
  uint64_t v17 = 0;
  if (v16 == *MEMORY[0x263F8F950])
  {
LABEL_4:
    if ((a4 & 1) == 0) {
      goto LABEL_5;
    }
    goto LABEL_10;
  }
  if (v16 == *MEMORY[0x263F8F958])
  {
    uint64_t v17 = 0x10000;
    goto LABEL_4;
  }
  if (v16 == *MEMORY[0x263F8F948])
  {
    uint64_t v17 = 0x20000;
    if ((a4 & 1) == 0)
    {
LABEL_5:
      if (a3 < 0)
      {
LABEL_15:
        __break(1u);
        goto LABEL_16;
      }
      uint64_t v18 = 2 * a3;
      if ((a6 & 1) == 0) {
        goto LABEL_7;
      }
      goto LABEL_11;
    }
LABEL_10:
    uint64_t v18 = 1;
    if ((a6 & 1) == 0)
    {
LABEL_7:
      uint64_t v19 = 0;
LABEL_12:
      if ((a2 & 0x8000000000000000) == 0) {
        return v19 | (a2 << 27) | v17 | (v18 << 18) | qword_209FB3408[a5];
      }
      __break(1u);
      goto LABEL_15;
    }
LABEL_11:
    uint64_t v19 = 0x4000000000;
    goto LABEL_12;
  }
LABEL_16:
  uint64_t result = _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t specialized _CharacterClassModel.init(cc:options:isInverted:)(unsigned __int8 a1, uint64_t a2, char a3)
{
  uint64_t v3 = *(void *)(a2 + 16);
  if (!v3)
  {
    __break(1u);
    JUMPOUT(0x209F83D24);
  }
  unsigned int v4 = *(_DWORD *)(a2 + 4 * v3 + 28);
  switch(a1)
  {
    case 2u:
      if (a3) {
        int v5 = 0x1000000;
      }
      else {
        int v5 = 0;
      }
      int v6 = v4 & 0xC00;
      if ((v4 & 0xC00) != 0) {
        goto LABEL_7;
      }
      break;
    case 3u:
    case 4u:
    case 5u:
    case 6u:
      if (a3) {
        int v5 = 0x1000000;
      }
      else {
        int v5 = 0;
      }
      int v6 = v4 & 0x1800;
      if ((v4 & 0x1800) != 0) {
        goto LABEL_7;
      }
      break;
    case 7u:
      if (a3) {
        int v5 = 0x1000000;
      }
      else {
        int v5 = 0;
      }
      int v6 = v4 & 0x2800;
      if ((v4 & 0x2800) != 0) {
LABEL_7:
      }
        int v6 = 0x10000;
      break;
    default:
      int v6 = 0;
      if (a3) {
        int v5 = 0x1000000;
      }
      else {
        int v5 = 0;
      }
      break;
  }
  return (a1 | ((HIWORD(v4) & 1) << 8)) ^ 0x100 | v5 | v6;
}

uint64_t specialized Collection.dropLast(_:)(uint64_t result, uint64_t a2, unint64_t a3, uint64_t (*a4)(uint64_t, unint64_t), uint64_t (*a5)(uint64_t, uint64_t, uint64_t, uint64_t, unint64_t), uint64_t (*a6)(uint64_t, uint64_t, uint64_t, unint64_t))
{
  if (result < 0)
  {
    __break(1u);
    goto LABEL_20;
  }
  uint64_t v9 = result;
  uint64_t result = a4(a2, a3);
  if (__OFSUB__(result, v9))
  {
LABEL_20:
    __break(1u);
    return result;
  }
  if ((a3 & 0x2000000000000000) != 0) {
    uint64_t v10 = HIBYTE(a3) & 0xF;
  }
  else {
    uint64_t v10 = a2;
  }
  uint64_t v11 = 7;
  if (((a3 >> 60) & ((a2 & 0x800000000000000) == 0)) != 0) {
    uint64_t v11 = 11;
  }
  uint64_t v12 = a5(15, (result - v9) & ~((result - v9) >> 63), v11 | (v10 << 16), a2, a3);
  if ((a3 & 0x2000000000000000) != 0) {
    uint64_t v14 = HIBYTE(a3) & 0xF;
  }
  else {
    uint64_t v14 = a2;
  }
  uint64_t v15 = v14 << 16;
  uint64_t v16 = v15 | 0xB;
  uint64_t v17 = v15 | 7;
  if (((a3 >> 60) & ((a2 & 0x800000000000000) == 0)) != 0) {
    uint64_t v17 = v16;
  }
  if (v13) {
    uint64_t v18 = v17;
  }
  else {
    uint64_t v18 = v12;
  }

  return a6(15, v18, a2, a3);
}

uint64_t specialized Processor.Registers.init(_:_:)@<X0>(void *a1@<X0>, void *a2@<X8>)
{
  unint64_t v4 = a1[15];
  uint64_t v5 = a1[18];
  unint64_t v16 = a1[17];
  uint64_t v6 = a1[1];
  uint64_t v7 = a1[2];
  uint64_t v8 = a1[3];
  uint64_t v9 = a1[4];
  uint64_t v10 = a1[5];
  uint64_t v11 = a1[6];
  swift_bridgeObjectRetain_n();
  swift_bridgeObjectRetain_n();
  swift_bridgeObjectRetain_n();
  swift_bridgeObjectRetain_n();
  swift_bridgeObjectRetain_n();
  swift_bridgeObjectRetain();
  outlined destroy of MEProgram((uint64_t)a1, type metadata accessor for MEProgram);
  swift_bridgeObjectRetain();
  uint64_t v12 = specialized Array.init(repeating:count:)(0, v4);
  uint64_t v18 = &type metadata for SentinelValue;
  swift_bridgeObjectRetain();
  uint64_t v13 = specialized Array.init(repeating:count:)((uint64_t)v17, v5);
  swift_bridgeObjectRetain();
  uint64_t v14 = specialized Array.init(repeating:count:)(15, v16);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease_n();
  swift_bridgeObjectRelease_n();
  swift_bridgeObjectRelease_n();
  swift_bridgeObjectRelease_n();
  swift_bridgeObjectRelease_n();
  swift_bridgeObjectRelease_n();
  uint64_t result = swift_bridgeObjectRelease_n();
  *a2 = v6;
  a2[1] = v7;
  a2[2] = v8;
  a2[3] = v9;
  a2[4] = v10;
  a2[5] = v11;
  a2[6] = v12;
  a2[7] = v13;
  a2[8] = v14;
  return result;
}

__n128 specialized Processor.init(program:input:subjectBounds:searchBounds:matchMode:isTracingEnabled:shouldMeasureMetrics:)@<Q0>(uint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, char a8@<W7>, uint64_t a9@<X8>)
{
  uint64_t v28 = a5;
  uint64_t v29 = a7;
  char v15 = a8 & 1;
  uint64_t v16 = type metadata accessor for MEProgram(0);
  MEMORY[0x270FA5388](v16 - 8);
  uint64_t v18 = (uint64_t *)((char *)&v28 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0));
  char v36 = 1;
  uint64_t v19 = *a1;
  outlined init with copy of MEProgram((uint64_t)a1, (uint64_t)v18, type metadata accessor for MEProgram);
  swift_bridgeObjectRetain();
  specialized Processor.Registers.init(_:_:)(v18, v37);
  long long v30 = 0uLL;
  char v31 = 1;
  long long v32 = 0u;
  long long v33 = 0u;
  uint64_t v34 = 0;
  char v35 = 1;
  uint64_t v20 = specialized Array.init(repeating:count:)(&v30, a1[23]);
  outlined destroy of MEProgram((uint64_t)a1, type metadata accessor for MEProgram);
  unsigned __int8 v21 = v36;
  *(void *)a9 = a2;
  *(void *)(a9 + 8) = a3;
  uint64_t v22 = v28;
  *(void *)(a9 + 16) = a4;
  *(void *)(a9 + 24) = v22;
  uint64_t v23 = v29;
  *(void *)(a9 + 32) = a6;
  *(void *)(a9 + 40) = v23;
  *(unsigned char *)(a9 + 48) = v15;
  *(void *)(a9 + 56) = v19;
  *(void *)(a9 + 64) = a6;
  *(void *)(a9 + 72) = 0;
  long long v24 = v37[3];
  *(_OWORD *)(a9 + 112) = v37[2];
  *(_OWORD *)(a9 + 128) = v24;
  uint64_t v25 = v38;
  __n128 result = (__n128)v37[1];
  *(_OWORD *)(a9 + 80) = v37[0];
  *(__n128 *)(a9 + 96) = result;
  uint64_t v27 = MEMORY[0x263F8EE78];
  *(void *)(a9 + 144) = v25;
  *(void *)(a9 + 152) = v27;
  *(void *)(a9 + 160) = v27;
  *(void *)(a9 + 168) = v20;
  *(void *)(a9 + 176) = 0;
  *(void *)(a9 + 184) = 0;
  *(_WORD *)(a9 + 192) = v21;
  *(void *)(a9 + 200) = 0;
  return result;
}

unint64_t specialized Array.replaceSubrange<A>(_:with:)(unint64_t result, int64_t a2)
{
  if ((result & 0x8000000000000000) != 0)
  {
    __break(1u);
    goto LABEL_22;
  }
  unint64_t v4 = *v2;
  int64_t v5 = *(void *)(*v2 + 16);
  if (v5 < a2)
  {
LABEL_22:
    __break(1u);
    goto LABEL_23;
  }
  unint64_t v6 = result;
  unint64_t v7 = a2 - result;
  if (__OFSUB__(a2, result))
  {
LABEL_23:
    __break(1u);
    goto LABEL_24;
  }
  unint64_t v8 = result - a2;
  if (__OFSUB__(0, v7))
  {
LABEL_24:
    __break(1u);
    goto LABEL_25;
  }
  int64_t v9 = v5 - v7;
  if (__OFADD__(v5, v8))
  {
LABEL_25:
    __break(1u);
LABEL_26:
    __break(1u);
    goto LABEL_27;
  }
  __n128 result = swift_isUniquelyReferenced_nonNull_native();
  if (result && v9 <= *(void *)(v4 + 24) >> 1)
  {
    if (!v8) {
      goto LABEL_20;
    }
  }
  else
  {
    if (v5 <= v9) {
      int64_t v10 = v5 + v8;
    }
    else {
      int64_t v10 = v5;
    }
    __n128 result = (unint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)result, v10, 1, (char *)v4, &demangling cache variable for type metadata for _ContiguousArrayStorage<TypedInt<_InstructionAddress>>);
    unint64_t v4 = result;
    if (!v8) {
      goto LABEL_20;
    }
  }
  uint64_t v11 = *(void *)(v4 + 16);
  BOOL v12 = __OFSUB__(v11, a2);
  uint64_t v13 = v11 - a2;
  if (v12) {
    goto LABEL_26;
  }
  __n128 result = v4 + 32 + 8 * v6;
  uint64_t v14 = (const void *)(v4 + 32 + 8 * a2);
  if (v6 != a2 || result >= (unint64_t)v14 + 8 * v13) {
    __n128 result = (unint64_t)memmove((void *)result, v14, 8 * v13);
  }
  uint64_t v15 = *(void *)(v4 + 16);
  BOOL v12 = __OFADD__(v15, v8);
  uint64_t v16 = v15 + v8;
  if (!v12)
  {
    *(void *)(v4 + 16) = v16;
LABEL_20:
    *Swift::String v2 = v4;
    return result;
  }
LABEL_27:
  __break(1u);
  return result;
}

uint64_t specialized Array.replaceSubrange<A>(_:with:)(uint64_t result, int64_t a2)
{
  if (result < 0)
  {
    __break(1u);
    goto LABEL_21;
  }
  unint64_t v4 = *v2;
  int64_t v5 = *((void *)*v2 + 2);
  if (v5 < a2)
  {
LABEL_21:
    __break(1u);
    goto LABEL_22;
  }
  uint64_t v6 = result;
  int64_t v7 = a2 - result;
  if (__OFSUB__(a2, result))
  {
LABEL_22:
    __break(1u);
    goto LABEL_23;
  }
  uint64_t v8 = result - a2;
  if (__OFSUB__(0, v7))
  {
LABEL_23:
    __break(1u);
    goto LABEL_24;
  }
  int64_t v9 = v5 - v7;
  if (__OFADD__(v5, v8))
  {
LABEL_24:
    __break(1u);
LABEL_25:
    __break(1u);
    goto LABEL_26;
  }
  char isUniquelyReferenced_nonNull_native = (char *)swift_isUniquelyReferenced_nonNull_native();
  if (!isUniquelyReferenced_nonNull_native || v9 > *((void *)v4 + 3) >> 1)
  {
    if (v5 <= v9) {
      int64_t v11 = v5 + v8;
    }
    else {
      int64_t v11 = v5;
    }
    unint64_t v4 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(isUniquelyReferenced_nonNull_native, v11, 1, v4);
  }
  __n128 result = swift_arrayDestroy();
  if (!v7) {
    goto LABEL_19;
  }
  uint64_t v12 = *((void *)v4 + 2);
  BOOL v13 = __OFSUB__(v12, a2);
  uint64_t v14 = v12 - a2;
  if (v13) {
    goto LABEL_25;
  }
  uint64_t v15 = &v4[80 * a2 + 32];
  if (v6 != a2 || &v4[80 * v6 + 32] >= &v15[80 * v14]) {
    __n128 result = (uint64_t)memmove(&v4[80 * v6 + 32], v15, 80 * v14);
  }
  uint64_t v16 = *((void *)v4 + 2);
  BOOL v13 = __OFADD__(v16, v8);
  uint64_t v17 = v16 - v7;
  if (!v13)
  {
    *((void *)v4 + 2) = v17;
LABEL_19:
    *Swift::String v2 = v4;
    return result;
  }
LABEL_26:
  __break(1u);
  return result;
}

uint64_t specialized Sequence._copyToContiguousArray()()
{
  return MEMORY[0x270F9FA28]();
}

uint64_t specialized Collection._copyToContiguousArray()()
{
  return MEMORY[0x270F9FA60]();
}

uint64_t specialized Collection._failEarlyRangeCheck(_:bounds:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(void, uint64_t, uint64_t), uint64_t (*a6)(char *, char *, uint64_t, uint64_t))
{
  uint64_t v23 = a6;
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  uint64_t v11 = a5(0, AssociatedTypeWitness, AssociatedConformanceWitness);
  uint64_t v12 = *(void *)(v11 - 8);
  uint64_t v13 = MEMORY[0x270FA5388](v11);
  uint64_t v15 = (char *)&v22 - v14;
  uint64_t v16 = *(void *)(AssociatedTypeWitness - 8);
  MEMORY[0x270FA5388](v13);
  uint64_t v18 = (char *)&v22 - v17;
  char v19 = dispatch thunk of static Comparable.<= infix(_:_:)();
  (*(void (**)(char *, uint64_t, uint64_t))(v16 + 16))(v18, a1, AssociatedTypeWitness);
  (*(void (**)(char *, uint64_t, uint64_t))(v12 + 16))(v15, a2, v11);
  if ((v19 & 1) == 0)
  {
    (*(void (**)(char *, uint64_t))(v12 + 8))(v15, v11);
    uint64_t result = (*(uint64_t (**)(char *, uint64_t))(v16 + 8))(v18, AssociatedTypeWitness);
    goto LABEL_5;
  }
  char v20 = v23(v18, &v15[*(int *)(v11 + 36)], AssociatedTypeWitness, AssociatedConformanceWitness);
  (*(void (**)(char *, uint64_t))(v12 + 8))(v15, v11);
  uint64_t result = (*(uint64_t (**)(char *, uint64_t))(v16 + 8))(v18, AssociatedTypeWitness);
  if ((v20 & 1) == 0) {
LABEL_5:
  }
    __break(1u);
  return result;
}

unint64_t specialized Collection.dropFirst(_:)(unint64_t result, uint64_t a2, unint64_t a3, uint64_t (*a4)(uint64_t, unint64_t, unint64_t, uint64_t, unint64_t), uint64_t (*a5)(void))
{
  if ((result & 0x8000000000000000) != 0)
  {
    __break(1u);
LABEL_14:
    __break(1u);
    return result;
  }
  if ((a3 & 0x2000000000000000) != 0) {
    uint64_t v5 = HIBYTE(a3) & 0xF;
  }
  else {
    uint64_t v5 = a2 & 0xFFFFFFFFFFFFLL;
  }
  uint64_t v6 = 7;
  if (((a3 >> 60) & ((a2 & 0x800000000000000) == 0)) != 0) {
    uint64_t v6 = 11;
  }
  unint64_t v7 = v6 | (v5 << 16);
  uint64_t result = a4(15, result, v7, a2, a3);
  if (v8) {
    uint64_t result = v7;
  }
  if (4 * v5 < result >> 14) {
    goto LABEL_14;
  }

  return a5();
}

uint64_t specialized SetAlgebra<>.init(arrayLiteral:)(uint64_t result)
{
  uint64_t v1 = *(void *)(result + 16);
  if (!v1) {
    return 0;
  }
  uint64_t v2 = result;
  LODWORD(result) = 0;
  uint64_t v3 = (int *)(v2 + 32);
  do
  {
    int v5 = *v3++;
    int v4 = v5;
    if ((v5 & ~result) == 0) {
      int v4 = 0;
    }
    uint64_t result = v4 | result;
    --v1;
  }
  while (v1);
  return result;
}

uint64_t specialized QuantifyPayload.PayloadType.init(rawValue:)(unint64_t a1)
{
  if (a1 >= 5) {
    return 4;
  }
  else {
    return (0x304020100uLL >> (8 * a1));
  }
}

uint64_t specialized LiteralPrinter.prepareQuotedLiteral(_:)(Swift::String a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 16);
  if (v2)
  {
    uint64_t object = a1._object;
    uint64_t countAndFlagsBits = a1._countAndFlagsBits;
    if ((*(_DWORD *)(a2 + 4 * v2 + 28) & 0x300000) != 0
      || (String.containsRegexMetaCharacters.getter(a1._countAndFlagsBits, (unint64_t)a1._object) & 1) != 0)
    {
      v5._uint64_t countAndFlagsBits = countAndFlagsBits;
      v5._uint64_t object = object;
      String.append(_:)(v5);
      v6._uint64_t countAndFlagsBits = 17756;
      v6._uint64_t object = (void *)0xE200000000000000;
      String.append(_:)(v6);
      uint64_t v7 = 20828;
    }
    else
    {
      swift_getCanonicalSpecializedMetadata();
      swift_getCanonicalSpecializedMetadata();
      lazy protocol witness table accessor for type LazyMapSequence<String, String> and conformance <> LazyMapSequence<A, B>();
      swift_bridgeObjectRetain();
      uint64_t v7 = BidirectionalCollection<>.joined(separator:)();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
    }
    a1._uint64_t countAndFlagsBits = v7;
  }
  else
  {
    __break(1u);
  }
  return a1._countAndFlagsBits;
}

uint64_t outlined init with copy of Any(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a1 + 24);
  *(void *)(a2 + 24) = v3;
  (**(void (***)(uint64_t, uint64_t))(v3 - 8))(a2, a1);
  return a2;
}

uint64_t outlined init with copy of AnyRegexOutput.ElementRepresentation(uint64_t a1, uint64_t a2)
{
  return initializeWithCopy for AnyRegexOutput.ElementRepresentation(a2, a1);
}

uint64_t outlined destroy of AnyRegexOutput.Element(uint64_t a1)
{
  return a1;
}

_OWORD *outlined init with take of Any(_OWORD *a1, _OWORD *a2)
{
  long long v2 = a1[1];
  *a2 = *a1;
  a2[1] = v2;
  return a2;
}

uint64_t outlined destroy of AnyRegexOutput.ElementRepresentation(uint64_t a1)
{
  return a1;
}

uint64_t outlined init with copy of Any?(uint64_t a1, uint64_t a2)
{
  uint64_t CanonicalSpecializedMetadata = swift_getCanonicalSpecializedMetadata();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(CanonicalSpecializedMetadata - 8) + 16))(a2, a1, CanonicalSpecializedMetadata);
  return a2;
}

void *__swift_project_boxed_opaque_existential_0(void *result, uint64_t a2)
{
  if ((*(_DWORD *)(*(void *)(a2 - 8) + 80) & 0x20000) != 0) {
    return (void *)(*result
  }
                    + ((*(_DWORD *)(*(void *)(a2 - 8) + 80) + 16) & ~(unint64_t)*(_DWORD *)(*(void *)(a2 - 8) + 80)));
  return result;
}

uint64_t __swift_destroy_boxed_opaque_existential_0(uint64_t a1)
{
  uint64_t v1 = *(void *)(*(void *)(a1 + 24) - 8);
  if ((*(unsigned char *)(v1 + 82) & 2) != 0) {
    return swift_release();
  }
  else {
    return (*(uint64_t (**)(void))(v1 + 8))();
  }
}

unint64_t lazy protocol witness table accessor for type RegexCompilationError and conformance RegexCompilationError()
{
  unint64_t result = lazy protocol witness table cache variable for type RegexCompilationError and conformance RegexCompilationError;
  if (!lazy protocol witness table cache variable for type RegexCompilationError and conformance RegexCompilationError)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type RegexCompilationError and conformance RegexCompilationError);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type RegexCompilationError and conformance RegexCompilationError;
  if (!lazy protocol witness table cache variable for type RegexCompilationError and conformance RegexCompilationError)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type RegexCompilationError and conformance RegexCompilationError);
  }
  return result;
}

uint64_t sub_209F84B04()
{
  swift_bridgeObjectRelease();

  return MEMORY[0x270FA0238](v0, 32, 7);
}

uint64_t type metadata accessor for MEProgram(uint64_t a1)
{
  return type metadata accessor for MEProgram(a1, (uint64_t *)&type metadata singleton initialization cache for MEProgram);
}

uint64_t type metadata accessor for Compiler()
{
  return self;
}

uint64_t sub_209F84B80()
{
  swift_release();

  return MEMORY[0x270FA0238](v0, 40, 7);
}

uint64_t sub_209F84BB8()
{
  uint64_t v1 = *(void *)(*(void *)(v0 + 16) - 8);
  uint64_t v2 = *(unsigned __int8 *)(v1 + 80);
  uint64_t v3 = (v2 + 32) & ~v2;
  uint64_t v4 = v3 + *(void *)(v1 + 64);
  uint64_t v5 = v2 | 7;
  (*(void (**)(uint64_t))(v1 + 8))(v0 + v3);

  return MEMORY[0x270FA0238](v0, v4, v5);
}

uint64_t partial apply for closure #1 in CustomConsumingRegexComponent.regex.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  return closure #1 in CustomConsumingRegexComponent.regex.getter(a1, a2, a3, a4, a5, v6+ ((*(unsigned __int8 *)(*(void *)(*(void *)(v6 + 16) - 8) + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)(*(void *)(v6 + 16) - 8) + 80)), *(void *)(v6 + 16), *(void *)(v6 + 24), a6);
}

uint64_t type metadata accessor for DSLTree.CustomCharacterClass.Member(uint64_t a1)
{
  return type metadata accessor for MEProgram(a1, (uint64_t *)&type metadata singleton initialization cache for DSLTree.CustomCharacterClass.Member);
}

uint64_t type metadata accessor for DSLTree.Atom(uint64_t a1)
{
  return type metadata accessor for MEProgram(a1, (uint64_t *)&type metadata singleton initialization cache for DSLTree.Atom);
}

uint64_t __swift_instantiateConcreteTypeFromMangledNameAbstract(uint64_t *a1)
{
  uint64_t result = *a1;
  if (result < 0)
  {
    uint64_t result = swift_getTypeByMangledNameInContextInMetadataState2();
    *a1 = result;
  }
  return result;
}

uint64_t specialized static DSLTree.Node.repeating(_:_:_:)(uint64_t a1, uint64_t a2, unsigned char *a3, uint64_t a4)
{
  uint64_t v8 = type metadata accessor for Source.Location();
  MEMORY[0x270FA5388](v8 - 8);
  uint64_t v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for DSLTree.QuantificationKind?);
  MEMORY[0x270FA5388](v9 - 8);
  uint64_t v11 = (char *)&v50 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = type metadata accessor for DSLTree.QuantificationKind(0);
  uint64_t v13 = *(void *)(v12 - 8);
  MEMORY[0x270FA5388](v12);
  uint64_t v15 = (char *)&v50 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (a1 < 0 || a1 == a2)
  {
    __break(1u);
LABEL_29:
    __break(1u);
    JUMPOUT(0x209F852F8);
  }
  switch(*a3)
  {
    case 1:
      uint64_t v16 = (unsigned int *)MEMORY[0x263F8F958];
      goto LABEL_7;
    case 2:
      uint64_t v16 = (unsigned int *)MEMORY[0x263F8F948];
      goto LABEL_7;
    case 3:
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v13 + 56))(v11, 1, 1, v12);
      swift_storeEnumTagMultiPayload();
      outlined destroy of (range: Range<String.Index>, value: Any?)?((uint64_t)v11, &demangling cache variable for type metadata for DSLTree.QuantificationKind?);
      if (!__OFSUB__(a2, 1)) {
        goto LABEL_8;
      }
      goto LABEL_17;
    default:
      uint64_t v16 = (unsigned int *)MEMORY[0x263F8F950];
LABEL_7:
      uint64_t v17 = *v16;
      uint64_t v18 = type metadata accessor for AST.Quantification.Kind();
      (*(void (**)(char *, uint64_t, uint64_t))(*(void *)(v18 - 8) + 104))(v11, v17, v18);
      swift_storeEnumTagMultiPayload();
      (*(void (**)(char *, void, uint64_t, uint64_t))(v13 + 56))(v11, 0, 1, v12);
      outlined init with take of DSLTree.QuantificationKind((uint64_t)v11, (uint64_t)v15, type metadata accessor for DSLTree.QuantificationKind);
      if (__OFSUB__(a2, 1))
      {
LABEL_17:
        __break(1u);
        goto LABEL_18;
      }
LABEL_8:
      if (a2 == 0x7FFFFFFFFFFFFFFFLL)
      {
        if (a1 == 1)
        {
          uint64_t v35 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (DSLTree._AST.QuantificationAmount, DSLTree.QuantificationKind, DSLTree.Node));
          uint64_t v20 = swift_allocBox();
          uint64_t v22 = v36;
          uint64_t v23 = v36 + *(int *)(v35 + 48);
          long long v24 = (void *)(v36 + *(int *)(v35 + 64));
          uint64_t v25 = (unsigned int *)MEMORY[0x263F8F9A0];
        }
        else
        {
          if (a1)
          {
            uint64_t v39 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (DSLTree._AST.QuantificationAmount, DSLTree.QuantificationKind, DSLTree.Node));
            uint64_t v20 = swift_allocBox();
            uint64_t v41 = v40;
            uint64_t v42 = v40 + *(int *)(v39 + 48);
            long long v24 = (void *)(v40 + *(int *)(v39 + 64));
            static Source.Location.fake.getter();
            AST.Atom.Number.init(_:at:)();
            uint64_t v43 = *MEMORY[0x263F8F998];
            uint64_t v44 = type metadata accessor for AST.Quantification.Amount();
            (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v44 - 8) + 104))(v41, v43, v44);
            uint64_t v45 = (uint64_t)v15;
            uint64_t v46 = v42;
LABEL_26:
            outlined init with take of DSLTree.QuantificationKind(v45, v46, type metadata accessor for DSLTree.QuantificationKind);
            goto LABEL_27;
          }
          uint64_t v19 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (DSLTree._AST.QuantificationAmount, DSLTree.QuantificationKind, DSLTree.Node));
          uint64_t v20 = swift_allocBox();
          uint64_t v22 = v21;
          uint64_t v23 = v21 + *(int *)(v19 + 48);
          long long v24 = (void *)(v21 + *(int *)(v19 + 64));
          uint64_t v25 = (unsigned int *)MEMORY[0x263F8F978];
        }
        uint64_t v37 = *v25;
        uint64_t v38 = type metadata accessor for AST.Quantification.Amount();
        (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v38 - 8) + 104))(v22, v37, v38);
LABEL_25:
        uint64_t v45 = (uint64_t)v15;
        uint64_t v46 = v23;
        goto LABEL_26;
      }
      if (__OFSUB__(a2, a1)) {
        goto LABEL_29;
      }
      if (a2 - a1 != 1)
      {
LABEL_18:
        uint64_t v31 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (DSLTree._AST.QuantificationAmount, DSLTree.QuantificationKind, DSLTree.Node));
        uint64_t v20 = swift_allocBox();
        uint64_t v33 = v32;
        uint64_t v23 = v32 + *(int *)(v31 + 48);
        long long v24 = (void *)(v32 + *(int *)(v31 + 64));
        if (a1)
        {
          __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (AST.Atom.Number, AST.Atom.Number));
          static Source.Location.fake.getter();
          AST.Atom.Number.init(_:at:)();
          static Source.Location.fake.getter();
          AST.Atom.Number.init(_:at:)();
          uint64_t v34 = (unsigned int *)MEMORY[0x263F8F980];
        }
        else
        {
          static Source.Location.fake.getter();
          AST.Atom.Number.init(_:at:)();
          uint64_t v34 = (unsigned int *)MEMORY[0x263F8F988];
        }
        uint64_t v47 = *v34;
        uint64_t v48 = type metadata accessor for AST.Quantification.Amount();
        (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v48 - 8) + 104))(v33, v47, v48);
        goto LABEL_25;
      }
      outlined destroy of MEProgram((uint64_t)v15, type metadata accessor for DSLTree.QuantificationKind);
      uint64_t v26 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (DSLTree._AST.QuantificationAmount, DSLTree.QuantificationKind, DSLTree.Node));
      uint64_t v20 = swift_allocBox();
      uint64_t v28 = v27;
      long long v24 = (void *)(v27 + *(int *)(v26 + 64));
      static Source.Location.fake.getter();
      AST.Atom.Number.init(_:at:)();
      uint64_t v29 = *MEMORY[0x263F8F990];
      uint64_t v30 = type metadata accessor for AST.Quantification.Amount();
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v30 - 8) + 104))(v28, v29, v30);
      swift_storeEnumTagMultiPayload();
LABEL_27:
      *long long v24 = a4;
      swift_retain();
      return v20 | 0x3000000000000000;
  }
}

uint64_t sub_209F85308()
{
  swift_release();

  return MEMORY[0x270FA0238](v0, 24, 7);
}

uint64_t sub_209F85348()
{
  swift_bridgeObjectRelease();

  return MEMORY[0x270FA0238](v0, 25, 7);
}

uint64_t type metadata accessor for DSLTree.QuantificationKind(uint64_t a1)
{
  return type metadata accessor for MEProgram(a1, (uint64_t *)&type metadata singleton initialization cache for DSLTree.QuantificationKind);
}

uint64_t sub_209F853A0()
{
  swift_bridgeObjectRelease();
  swift_release();
  if (*(void *)(v0 + 56)) {
    outlined consume of CaptureTransform.Closure(*(void *)(v0 + 72), *(void *)(v0 + 80), *(unsigned char *)(v0 + 88));
  }

  return MEMORY[0x270FA0238](v0, 89, 7);
}

uint64_t outlined consume of CaptureTransform.Closure(uint64_t a1, uint64_t a2, unsigned __int8 a3)
{
  if (a3 <= 3u) {
    return swift_release();
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type _CompileOptions and conformance _CompileOptions()
{
  unint64_t result = lazy protocol witness table cache variable for type _CompileOptions and conformance _CompileOptions;
  if (!lazy protocol witness table cache variable for type _CompileOptions and conformance _CompileOptions)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type _CompileOptions and conformance _CompileOptions);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type _CompileOptions and conformance _CompileOptions;
  if (!lazy protocol witness table cache variable for type _CompileOptions and conformance _CompileOptions)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type _CompileOptions and conformance _CompileOptions);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type _CompileOptions and conformance _CompileOptions;
  if (!lazy protocol witness table cache variable for type _CompileOptions and conformance _CompileOptions)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type _CompileOptions and conformance _CompileOptions);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type _CompileOptions and conformance _CompileOptions;
  if (!lazy protocol witness table cache variable for type _CompileOptions and conformance _CompileOptions)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type _CompileOptions and conformance _CompileOptions);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type AnyRegexOutput and conformance AnyRegexOutput()
{
  unint64_t result = lazy protocol witness table cache variable for type AnyRegexOutput and conformance AnyRegexOutput;
  if (!lazy protocol witness table cache variable for type AnyRegexOutput and conformance AnyRegexOutput)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AnyRegexOutput and conformance AnyRegexOutput);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type AnyRegexOutput and conformance AnyRegexOutput;
  if (!lazy protocol witness table cache variable for type AnyRegexOutput and conformance AnyRegexOutput)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AnyRegexOutput and conformance AnyRegexOutput);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type AnyRegexOutput and conformance AnyRegexOutput;
  if (!lazy protocol witness table cache variable for type AnyRegexOutput and conformance AnyRegexOutput)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AnyRegexOutput and conformance AnyRegexOutput);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type AnyRegexOutput and conformance AnyRegexOutput;
  if (!lazy protocol witness table cache variable for type AnyRegexOutput and conformance AnyRegexOutput)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AnyRegexOutput and conformance AnyRegexOutput);
  }
  return result;
}

uint64_t associated type witness table accessor for Collection.Indices : RandomAccessCollection in AnyRegexOutput()
{
  return lazy protocol witness table accessor for type Range<Int> and conformance <> Range<A>(&lazy protocol witness table cache variable for type Range<Int> and conformance <> Range<A>);
}

unint64_t lazy protocol witness table accessor for type Int and conformance Int()
{
  unint64_t result = lazy protocol witness table cache variable for type Int and conformance Int;
  if (!lazy protocol witness table cache variable for type Int and conformance Int)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Int and conformance Int);
  }
  return result;
}

uint64_t associated type witness table accessor for Collection.SubSequence : RandomAccessCollection in AnyRegexOutput()
{
  return lazy protocol witness table accessor for type Slice<AnyRegexOutput> and conformance <> Slice<A>(&lazy protocol witness table cache variable for type Slice<AnyRegexOutput> and conformance <> Slice<A>, (void (*)(void))lazy protocol witness table accessor for type AnyRegexOutput and conformance AnyRegexOutput);
}

uint64_t associated type witness table accessor for Collection.Indices : BidirectionalCollection in AnyRegexOutput()
{
  return lazy protocol witness table accessor for type Range<Int> and conformance <> Range<A>(&lazy protocol witness table cache variable for type Range<Int> and conformance <> Range<A>);
}

uint64_t associated type witness table accessor for Collection.SubSequence : BidirectionalCollection in AnyRegexOutput()
{
  return lazy protocol witness table accessor for type Slice<AnyRegexOutput> and conformance <> Slice<A>(&lazy protocol witness table cache variable for type Slice<AnyRegexOutput> and conformance <> Slice<A>, (void (*)(void))lazy protocol witness table accessor for type AnyRegexOutput and conformance AnyRegexOutput);
}

uint64_t lazy protocol witness table accessor for type Slice<AnyRegexOutput> and conformance <> Slice<A>(unint64_t *a1, void (*a2)(void))
{
  uint64_t result = *a1;
  if (!result)
  {
    __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for Slice<AnyRegexOutput>);
    a2();
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t associated type witness table accessor for Collection.Index : Comparable in AnyRegexOutput()
{
  return MEMORY[0x263F8D6E0];
}

uint64_t associated type witness table accessor for Collection.Indices : Collection in AnyRegexOutput()
{
  return lazy protocol witness table accessor for type Range<Int> and conformance <> Range<A>(&lazy protocol witness table cache variable for type Range<Int> and conformance <> Range<A>);
}

uint64_t lazy protocol witness table accessor for type Range<Int> and conformance <> Range<A>(unint64_t *a1)
{
  uint64_t result = *a1;
  if (!result)
  {
    swift_getCanonicalSpecializedMetadata();
    lazy protocol witness table accessor for type Int and conformance Int();
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t associated type witness table accessor for Collection.SubSequence : Collection in AnyRegexOutput()
{
  return lazy protocol witness table accessor for type [Any.Type] and conformance [A](&lazy protocol witness table cache variable for type Slice<AnyRegexOutput> and conformance Slice<A>, &demangling cache variable for type metadata for Slice<AnyRegexOutput>);
}

uint64_t associated type witness table accessor for Sequence.Iterator : IteratorProtocol in AnyRegexOutput()
{
  return lazy protocol witness table accessor for type [Any.Type] and conformance [A](&lazy protocol witness table cache variable for type IndexingIterator<AnyRegexOutput> and conformance IndexingIterator<A>, &demangling cache variable for type metadata for IndexingIterator<AnyRegexOutput>);
}

unint64_t lazy protocol witness table accessor for type DSLTree.Atom.Assertion and conformance DSLTree.Atom.Assertion()
{
  unint64_t result = lazy protocol witness table cache variable for type DSLTree.Atom.Assertion and conformance DSLTree.Atom.Assertion;
  if (!lazy protocol witness table cache variable for type DSLTree.Atom.Assertion and conformance DSLTree.Atom.Assertion)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type DSLTree.Atom.Assertion and conformance DSLTree.Atom.Assertion);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type DSLTree.Atom.CharacterClass and conformance DSLTree.Atom.CharacterClass()
{
  unint64_t result = lazy protocol witness table cache variable for type DSLTree.Atom.CharacterClass and conformance DSLTree.Atom.CharacterClass;
  if (!lazy protocol witness table cache variable for type DSLTree.Atom.CharacterClass and conformance DSLTree.Atom.CharacterClass)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type DSLTree.Atom.CharacterClass and conformance DSLTree.Atom.CharacterClass);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type ReferenceID and conformance ReferenceID()
{
  unint64_t result = lazy protocol witness table cache variable for type ReferenceID and conformance ReferenceID;
  if (!lazy protocol witness table cache variable for type ReferenceID and conformance ReferenceID)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ReferenceID and conformance ReferenceID);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type RegexSemanticLevel and conformance RegexSemanticLevel()
{
  unint64_t result = lazy protocol witness table cache variable for type RegexSemanticLevel and conformance RegexSemanticLevel;
  if (!lazy protocol witness table cache variable for type RegexSemanticLevel and conformance RegexSemanticLevel)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type RegexSemanticLevel and conformance RegexSemanticLevel);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type RegexWordBoundaryKind and conformance RegexWordBoundaryKind()
{
  unint64_t result = lazy protocol witness table cache variable for type RegexWordBoundaryKind and conformance RegexWordBoundaryKind;
  if (!lazy protocol witness table cache variable for type RegexWordBoundaryKind and conformance RegexWordBoundaryKind)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type RegexWordBoundaryKind and conformance RegexWordBoundaryKind);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type RegexRepetitionBehavior and conformance RegexRepetitionBehavior()
{
  unint64_t result = lazy protocol witness table cache variable for type RegexRepetitionBehavior and conformance RegexRepetitionBehavior;
  if (!lazy protocol witness table cache variable for type RegexRepetitionBehavior and conformance RegexRepetitionBehavior)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type RegexRepetitionBehavior and conformance RegexRepetitionBehavior);
  }
  return result;
}

ValueMetadata *type metadata accessor for _CompileOptions()
{
  return &type metadata for _CompileOptions;
}

void *initializeBufferWithCopyOfBuffer for AnyRegexOutput(void *a1, void *a2)
{
  uint64_t v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  a1[2] = a2[2];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

void *assignWithCopy for AnyRegexOutput(void *a1, void *a2)
{
  *a1 = *a2;
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[2] = a2[2];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

__n128 __swift_memcpy24_8(__n128 *a1, __n128 *a2)
{
  __n128 result = *a2;
  a1[1].n128_u64[0] = a2[1].n128_u64[0];
  *a1 = result;
  return result;
}

uint64_t assignWithTake for AnyRegexOutput(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for AnyRegexOutput(uint64_t a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *(unsigned char *)(a1 + 24)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  unint64_t v2 = *(void *)(a1 + 8);
  if (v2 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for AnyRegexOutput(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)(result + 8) = 0;
    *(void *)(result + 16) = 0;
    *(void *)__n128 result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 24) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 8) = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 24) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for AnyRegexOutput()
{
  return &type metadata for AnyRegexOutput;
}

uint64_t destroy for AnyRegexOutput.Element(uint64_t a1)
{
  if (*(void *)(a1 + 48) >= 2uLL) {
    __swift_destroy_boxed_opaque_existential_0(a1 + 24);
  }
  swift_bridgeObjectRelease();

  return swift_bridgeObjectRelease();
}

uint64_t initializeWithCopy for AnyRegexOutput.Element(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  uint64_t v4 = (_OWORD *)(a1 + 8);
  uint64_t v5 = (_OWORD *)(a2 + 8);
  uint64_t v6 = *(void *)(a2 + 48);
  if (v6 == 1)
  {
    long long v7 = *(_OWORD *)(a2 + 24);
    *uint64_t v4 = *v5;
    *(_OWORD *)(a1 + 24) = v7;
    *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
  }
  else
  {
    *uint64_t v4 = *v5;
    uint64_t v8 = (_OWORD *)(a1 + 24);
    uint64_t v9 = (_OWORD *)(a2 + 24);
    if (v6)
    {
      *(void *)(a1 + 48) = v6;
      (**(void (***)(_OWORD *, _OWORD *))(v6 - 8))(v8, v9);
    }
    else
    {
      long long v10 = *(_OWORD *)(a2 + 40);
      *uint64_t v8 = *v9;
      *(_OWORD *)(a1 + 40) = v10;
    }
  }
  uint64_t v11 = *(void *)(a2 + 64);
  *(void *)(a1 + 56) = *(void *)(a2 + 56);
  *(void *)(a1 + 64) = v11;
  *(void *)(a1 + 72) = *(void *)(a2 + 72);
  *(_WORD *)(a1 + 80) = *(_WORD *)(a2 + 80);
  uint64_t v12 = *(void *)(a2 + 88);
  uint64_t v13 = *(void *)(a2 + 96);
  *(void *)(a1 + 88) = v12;
  *(void *)(a1 + 96) = v13;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for AnyRegexOutput.Element(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  uint64_t v4 = (long long *)(a1 + 8);
  uint64_t v5 = (long long *)(a2 + 8);
  uint64_t v6 = *(void *)(a1 + 48);
  uint64_t v7 = *(void *)(a2 + 48);
  if (v6 == 1)
  {
    if (v7 == 1)
    {
      long long v8 = *v5;
      long long v9 = *(_OWORD *)(a2 + 24);
      *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
LABEL_16:
      *uint64_t v4 = v8;
      v4[1] = v9;
      goto LABEL_17;
    }
    *uint64_t v4 = *v5;
    uint64_t v12 = (_OWORD *)(a1 + 24);
    uint64_t v13 = (_OWORD *)(a2 + 24);
    uint64_t v14 = *(void *)(a2 + 48);
    if (v14)
    {
      *(void *)(a1 + 48) = v14;
      (**(void (***)(_OWORD *, _OWORD *))(v14 - 8))(v12, v13);
    }
    else
    {
      long long v17 = *(_OWORD *)(a2 + 40);
      *uint64_t v12 = *v13;
      *(_OWORD *)(a1 + 40) = v17;
    }
  }
  else
  {
    if (v7 != 1)
    {
      *(void *)(a1 + 8) = *(void *)(a2 + 8);
      *(void *)(a1 + 16) = *(void *)(a2 + 16);
      uint64_t v4 = (long long *)(a1 + 24);
      uint64_t v15 = (long long *)(a2 + 24);
      uint64_t v16 = *(void *)(a2 + 48);
      if (v6)
      {
        if (v16)
        {
          __swift_assign_boxed_opaque_existential_0((uint64_t *)(a1 + 24), (uint64_t *)(a2 + 24));
          goto LABEL_17;
        }
        __swift_destroy_boxed_opaque_existential_0(a1 + 24);
      }
      else if (v16)
      {
        *(void *)(a1 + 48) = v16;
        (**(void (***)(uint64_t, uint64_t))(v16 - 8))(a1 + 24, a2 + 24);
        goto LABEL_17;
      }
      long long v8 = *v15;
      long long v9 = *(_OWORD *)(a2 + 40);
      goto LABEL_16;
    }
    outlined destroy of (range: Range<String.Index>, value: Any?)?(a1 + 8, &demangling cache variable for type metadata for (range: Range<String.Index>, value: Any?));
    long long v11 = v5[1];
    long long v10 = v5[2];
    *uint64_t v4 = *v5;
    v4[1] = v11;
    v4[2] = v10;
  }
LABEL_17:
  *(void *)(a1 + 56) = *(void *)(a2 + 56);
  *(void *)(a1 + 64) = *(void *)(a2 + 64);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v18 = *(void *)(a2 + 72);
  *(unsigned char *)(a1 + 80) = *(unsigned char *)(a2 + 80);
  *(void *)(a1 + 72) = v18;
  *(unsigned char *)(a1 + 81) = *(unsigned char *)(a2 + 81);
  *(void *)(a1 + 88) = *(void *)(a2 + 88);
  *(void *)(a1 + 96) = *(void *)(a2 + 96);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t *__swift_assign_boxed_opaque_existential_0(uint64_t *result, uint64_t *a2)
{
  if (result != a2)
  {
    uint64_t v3 = result;
    uint64_t v4 = result[3];
    uint64_t v5 = a2[3];
    if (v4 == v5)
    {
      uint64_t v10 = *(void *)(v4 - 8);
      if ((*(unsigned char *)(v10 + 82) & 2) != 0)
      {
        uint64_t v12 = *a2;
        swift_retain();
        __n128 result = (uint64_t *)swift_release();
        *uint64_t v3 = v12;
      }
      else
      {
        long long v11 = *(uint64_t (**)(void))(v10 + 24);
        return (uint64_t *)v11();
      }
    }
    else
    {
      result[3] = v5;
      uint64_t v6 = *(void *)(v4 - 8);
      uint64_t v7 = *(void *)(v5 - 8);
      uint64_t v8 = v7;
      int v9 = *(_DWORD *)(v7 + 80);
      if ((*(unsigned char *)(v6 + 82) & 2) != 0)
      {
        if ((v9 & 0x20000) != 0)
        {
          *__n128 result = *a2;
          swift_retain();
        }
        else
        {
          (*(void (**)(uint64_t *, uint64_t *, uint64_t))(v7 + 16))(result, a2, v5);
        }
        return (uint64_t *)swift_release();
      }
      else
      {
        (*(void (**)(unsigned char *, uint64_t *, uint64_t))(v6 + 32))(v13, result, v4);
        if ((v9 & 0x20000) != 0)
        {
          *uint64_t v3 = *a2;
          swift_retain();
        }
        else
        {
          (*(void (**)(uint64_t *, uint64_t *, uint64_t))(v8 + 16))(v3, a2, v5);
        }
        return (uint64_t *)(*(uint64_t (**)(unsigned char *, uint64_t))(v6 + 8))(v13, v4);
      }
    }
  }
  return result;
}

__n128 __swift_memcpy104_8(uint64_t a1, long long *a2)
{
  long long v2 = *a2;
  long long v3 = a2[2];
  *(_OWORD *)(a1 + 16) = a2[1];
  *(_OWORD *)(a1 + 32) = v3;
  *(_OWORD *)a1 = v2;
  __n128 result = (__n128)a2[3];
  long long v5 = a2[4];
  long long v6 = a2[5];
  *(void *)(a1 + 96) = *((void *)a2 + 12);
  *(_OWORD *)(a1 + 64) = v5;
  *(_OWORD *)(a1 + 80) = v6;
  *(__n128 *)(a1 + 48) = result;
  return result;
}

uint64_t assignWithTake for AnyRegexOutput.Element(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = (_OWORD *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  long long v5 = (_OWORD *)(a1 + 8);
  uint64_t v6 = *(void *)(a1 + 48);
  if (v6 == 1) {
    goto LABEL_4;
  }
  if (*(void *)(a2 + 48) == 1)
  {
    outlined destroy of (range: Range<String.Index>, value: Any?)?(a1 + 8, &demangling cache variable for type metadata for (range: Range<String.Index>, value: Any?));
LABEL_4:
    long long v7 = v4[1];
    *long long v5 = *v4;
    v5[1] = v7;
    _OWORD v5[2] = v4[2];
    goto LABEL_8;
  }
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  uint64_t v8 = (_OWORD *)(a1 + 24);
  int v9 = (_OWORD *)(a2 + 24);
  if (v6) {
    __swift_destroy_boxed_opaque_existential_0(a1 + 24);
  }
  long long v10 = *(_OWORD *)(a2 + 40);
  *uint64_t v8 = *v9;
  *(_OWORD *)(a1 + 40) = v10;
LABEL_8:
  uint64_t v11 = *(void *)(a2 + 64);
  *(void *)(a1 + 56) = *(void *)(a2 + 56);
  *(void *)(a1 + 64) = v11;
  swift_bridgeObjectRelease();
  *(void *)(a1 + 72) = *(void *)(a2 + 72);
  *(unsigned char *)(a1 + 80) = *(unsigned char *)(a2 + 80);
  *(unsigned char *)(a1 + 81) = *(unsigned char *)(a2 + 81);
  uint64_t v12 = *(void *)(a2 + 96);
  *(void *)(a1 + 88) = *(void *)(a2 + 88);
  *(void *)(a1 + 96) = v12;
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for AnyRegexOutput.Element(uint64_t a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *(unsigned char *)(a1 + 104)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  unint64_t v2 = *(void *)(a1 + 96);
  if (v2 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for AnyRegexOutput.Element(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(void *)__n128 result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 104) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 96) = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 104) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for AnyRegexOutput.Element()
{
  return &type metadata for AnyRegexOutput.Element;
}

uint64_t dispatch thunk of RegexComponent.regex.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 16))();
}

uint64_t type metadata instantiation function for Regex(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x270FA01A8](a1, a2, a3, 24);
}

uint64_t type metadata instantiation function for Regex.Program()
{
  return MEMORY[0x270FA01A0]();
}

uint64_t type metadata completion function for Regex.Program()
{
  return swift_initClassMetadata2();
}

uint64_t type metadata accessor for Regex.Program()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t type metadata completion function for Regex.Program.ProgramBox()
{
  uint64_t result = type metadata accessor for MEProgram(319);
  if (v1 <= 0x3F)
  {
    uint64_t result = swift_initClassMetadata2();
    if (!result) {
      return 0;
    }
  }
  return result;
}

uint64_t type metadata accessor for Regex.Program.ProgramBox()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t type metadata instantiation function for Regex._RegexInternalAction(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x270FA01A8](a1, a2, a3, 16);
}

uint64_t __swift_memcpy9_8(uint64_t result, uint64_t *a2)
{
  uint64_t v2 = *a2;
  *(unsigned char *)(result + 8) = *((unsigned char *)a2 + 8);
  *(void *)uint64_t result = v2;
  return result;
}

uint64_t getEnumTagSinglePayload for Regex._RegexInternalAction(uint64_t a1, int a2)
{
  if (a2 && *(unsigned char *)(a1 + 9)) {
    return (*(_DWORD *)a1 + 1);
  }
  else {
    return 0;
  }
}

uint64_t storeEnumTagSinglePayload for Regex._RegexInternalAction(uint64_t result, int a2, int a3)
{
  if (a2)
  {
    *(void *)uint64_t result = 0;
    *(unsigned char *)(result + 8) = 0;
    *(_DWORD *)uint64_t result = a2 - 1;
    if (!a3) {
      return result;
    }
    char v3 = 1;
  }
  else
  {
    if (!a3) {
      return result;
    }
    char v3 = 0;
  }
  *(unsigned char *)(result + 9) = v3;
  return result;
}

uint64_t getEnumTag for Regex._RegexInternalAction(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 8)) {
    return (*(_DWORD *)a1 + 1);
  }
  else {
    return 0;
  }
}

uint64_t destructiveInjectEnumTag for Regex._RegexInternalAction(uint64_t result, int a2)
{
  if (a2)
  {
    *(void *)uint64_t result = (a2 - 1);
    *(unsigned char *)(result + 8) = 1;
  }
  else
  {
    *(unsigned char *)(result + 8) = 0;
  }
  return result;
}

uint64_t type metadata accessor for Regex._RegexInternalAction()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t dispatch thunk of CustomConsumingRegexComponent.consuming(_:startingAt:in:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  return (*(uint64_t (**)(void))(a7 + 16))();
}

void *__swift_memcpy8_8(void *result, void *a2)
{
  *uint64_t result = *a2;
  return result;
}

ValueMetadata *type metadata accessor for DSLTree()
{
  return &type metadata for DSLTree;
}

uint64_t initializeBufferWithCopyOfBuffer for DSLTree.CustomCharacterClass(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  *(unsigned char *)(a1 + 8) = *(unsigned char *)(a2 + 8);
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for DSLTree.CustomCharacterClass(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(unsigned char *)(a1 + 8) = *(unsigned char *)(a2 + 8);
  return a1;
}

uint64_t assignWithTake for DSLTree.CustomCharacterClass(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  swift_bridgeObjectRelease();
  *(unsigned char *)(a1 + 8) = *(unsigned char *)(a2 + 8);
  return a1;
}

uint64_t getEnumTagSinglePayload for DSLTree.CustomCharacterClass(uint64_t *a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *((unsigned char *)a1 + 9)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  uint64_t v2 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for DSLTree.CustomCharacterClass(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(unsigned char *)(result + 8) = 0;
    *(void *)uint64_t result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 9) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)uint64_t result = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 9) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for DSLTree.CustomCharacterClass()
{
  return &type metadata for DSLTree.CustomCharacterClass;
}

unsigned char *initializeBufferWithCopyOfBuffer for DSLTree.CustomCharacterClass.Member(unsigned char *a1, unsigned char *a2, uint64_t a3)
{
  int v5 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v8 = *(void *)a2;
    *(void *)a1 = *(void *)a2;
    a1 = (unsigned char *)(v8 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    switch(swift_getEnumCaseMultiPayload())
    {
      case 1u:
        uint64_t v9 = type metadata accessor for DSLTree.Atom(0);
        switch(swift_getEnumCaseMultiPayload())
        {
          case 0u:
            uint64_t v10 = *((void *)a2 + 1);
            *(void *)a1 = *(void *)a2;
            *((void *)a1 + 1) = v10;
            swift_bridgeObjectRetain();
            goto LABEL_21;
          case 4u:
            uint64_t v15 = type metadata accessor for AST.Reference();
            (*(void (**)(unsigned char *, unsigned char *, uint64_t))(*(void *)(v15 - 8) + 16))(a1, a2, v15);
            goto LABEL_21;
          case 6u:
            uint64_t v16 = type metadata accessor for AST.MatchingOptionSequence();
            (*(void (**)(unsigned char *, unsigned char *, uint64_t))(*(void *)(v16 - 8) + 16))(a1, a2, v16);
            goto LABEL_21;
          case 7u:
            uint64_t v17 = type metadata accessor for AST.Atom();
            (*(void (**)(unsigned char *, unsigned char *, uint64_t))(*(void *)(v17 - 8) + 16))(a1, a2, v17);
LABEL_21:
            swift_storeEnumTagMultiPayload();
            break;
          default:
            memcpy(a1, a2, *(void *)(*(void *)(v9 - 8) + 64));
            break;
        }
        uint64_t v18 = *(int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (DSLTree.Atom, DSLTree.Atom))
                     + 48);
        uint64_t v19 = &a1[v18];
        uint64_t v20 = &a2[v18];
        switch(swift_getEnumCaseMultiPayload())
        {
          case 0u:
            uint64_t v21 = v20[1];
            *uint64_t v19 = *v20;
            v19[1] = v21;
            swift_bridgeObjectRetain();
            goto LABEL_28;
          case 4u:
            uint64_t v22 = type metadata accessor for AST.Reference();
            (*(void (**)(void *, void *, uint64_t))(*(void *)(v22 - 8) + 16))(v19, v20, v22);
            goto LABEL_28;
          case 6u:
            uint64_t v23 = type metadata accessor for AST.MatchingOptionSequence();
            (*(void (**)(void *, void *, uint64_t))(*(void *)(v23 - 8) + 16))(v19, v20, v23);
            goto LABEL_28;
          case 7u:
            uint64_t v24 = type metadata accessor for AST.Atom();
            (*(void (**)(void *, void *, uint64_t))(*(void *)(v24 - 8) + 16))(v19, v20, v24);
LABEL_28:
            swift_storeEnumTagMultiPayload();
            break;
          default:
            memcpy(v19, v20, *(void *)(*(void *)(v9 - 8) + 64));
            break;
        }
        break;
      case 2u:
        *(void *)a1 = *(void *)a2;
        a1[8] = a2[8];
        swift_bridgeObjectRetain();
        break;
      case 3u:
      case 4u:
        uint64_t v11 = *((void *)a2 + 1);
        *(void *)a1 = *(void *)a2;
        *((void *)a1 + 1) = v11;
        swift_bridgeObjectRetain();
        break;
      case 5u:
      case 6u:
      case 7u:
        *(void *)a1 = *(void *)a2;
        swift_retain();
        break;
      default:
        uint64_t v6 = type metadata accessor for DSLTree.Atom(0);
        switch(swift_getEnumCaseMultiPayload())
        {
          case 0u:
            uint64_t v7 = *((void *)a2 + 1);
            *(void *)a1 = *(void *)a2;
            *((void *)a1 + 1) = v7;
            swift_bridgeObjectRetain();
            goto LABEL_15;
          case 4u:
            uint64_t v12 = type metadata accessor for AST.Reference();
            (*(void (**)(unsigned char *, unsigned char *, uint64_t))(*(void *)(v12 - 8) + 16))(a1, a2, v12);
            goto LABEL_15;
          case 6u:
            uint64_t v13 = type metadata accessor for AST.MatchingOptionSequence();
            (*(void (**)(unsigned char *, unsigned char *, uint64_t))(*(void *)(v13 - 8) + 16))(a1, a2, v13);
            goto LABEL_15;
          case 7u:
            uint64_t v14 = type metadata accessor for AST.Atom();
            (*(void (**)(unsigned char *, unsigned char *, uint64_t))(*(void *)(v14 - 8) + 16))(a1, a2, v14);
LABEL_15:
            swift_storeEnumTagMultiPayload();
            break;
          default:
            memcpy(a1, a2, *(void *)(*(void *)(v6 - 8) + 64));
            break;
        }
        break;
    }
    swift_storeEnumTagMultiPayload();
  }
  return a1;
}

uint64_t destroy for DSLTree.CustomCharacterClass.Member(uint64_t a1)
{
  uint64_t result = swift_getEnumCaseMultiPayload();
  switch((int)result)
  {
    case 0:
      type metadata accessor for DSLTree.Atom(0);
      uint64_t result = swift_getEnumCaseMultiPayload();
      switch((int)result)
      {
        case 0:
          goto LABEL_13;
        case 4:
          goto LABEL_16;
        case 6:
          goto LABEL_17;
        case 7:
          goto LABEL_18;
        default:
          return result;
      }
    case 1:
      type metadata accessor for DSLTree.Atom(0);
      switch(swift_getEnumCaseMultiPayload())
      {
        case 0u:
          swift_bridgeObjectRelease();
          break;
        case 4u:
          uint64_t v3 = type metadata accessor for AST.Reference();
          goto LABEL_11;
        case 6u:
          uint64_t v3 = type metadata accessor for AST.MatchingOptionSequence();
          goto LABEL_11;
        case 7u:
          uint64_t v3 = type metadata accessor for AST.Atom();
LABEL_11:
          (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(a1, v3);
          break;
        default:
          break;
      }
      a1 += *(int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (DSLTree.Atom, DSLTree.Atom))
                   + 48);
      uint64_t result = swift_getEnumCaseMultiPayload();
      switch((int)result)
      {
        case 0:
          goto LABEL_13;
        case 4:
LABEL_16:
          uint64_t v4 = type metadata accessor for AST.Reference();
          goto LABEL_19;
        case 6:
LABEL_17:
          uint64_t v4 = type metadata accessor for AST.MatchingOptionSequence();
          goto LABEL_19;
        case 7:
LABEL_18:
          uint64_t v4 = type metadata accessor for AST.Atom();
LABEL_19:
          int v5 = *(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v4 - 8) + 8);
          uint64_t result = v5(a1, v4);
          break;
        default:
          return result;
      }
      break;
    case 2:
    case 3:
    case 4:
LABEL_13:
      uint64_t result = swift_bridgeObjectRelease();
      break;
    case 5:
    case 6:
    case 7:
      uint64_t result = swift_release();
      break;
    default:
      return result;
  }
  return result;
}

unsigned char *initializeWithCopy for DSLTree.CustomCharacterClass.Member(unsigned char *a1, unsigned char *a2)
{
  switch(swift_getEnumCaseMultiPayload())
  {
    case 1u:
      uint64_t v6 = type metadata accessor for DSLTree.Atom(0);
      switch(swift_getEnumCaseMultiPayload())
      {
        case 0u:
          uint64_t v7 = *((void *)a2 + 1);
          *(void *)a1 = *(void *)a2;
          *((void *)a1 + 1) = v7;
          swift_bridgeObjectRetain();
          goto LABEL_19;
        case 4u:
          uint64_t v12 = type metadata accessor for AST.Reference();
          (*(void (**)(unsigned char *, unsigned char *, uint64_t))(*(void *)(v12 - 8) + 16))(a1, a2, v12);
          goto LABEL_19;
        case 6u:
          uint64_t v13 = type metadata accessor for AST.MatchingOptionSequence();
          (*(void (**)(unsigned char *, unsigned char *, uint64_t))(*(void *)(v13 - 8) + 16))(a1, a2, v13);
          goto LABEL_19;
        case 7u:
          uint64_t v14 = type metadata accessor for AST.Atom();
          (*(void (**)(unsigned char *, unsigned char *, uint64_t))(*(void *)(v14 - 8) + 16))(a1, a2, v14);
LABEL_19:
          swift_storeEnumTagMultiPayload();
          break;
        default:
          memcpy(a1, a2, *(void *)(*(void *)(v6 - 8) + 64));
          break;
      }
      uint64_t v15 = *(int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (DSLTree.Atom, DSLTree.Atom))
                   + 48);
      uint64_t v16 = &a1[v15];
      uint64_t v17 = &a2[v15];
      switch(swift_getEnumCaseMultiPayload())
      {
        case 0u:
          uint64_t v18 = v17[1];
          void *v16 = *v17;
          v16[1] = v18;
          swift_bridgeObjectRetain();
          goto LABEL_26;
        case 4u:
          uint64_t v19 = type metadata accessor for AST.Reference();
          (*(void (**)(void *, void *, uint64_t))(*(void *)(v19 - 8) + 16))(v16, v17, v19);
          goto LABEL_26;
        case 6u:
          uint64_t v20 = type metadata accessor for AST.MatchingOptionSequence();
          (*(void (**)(void *, void *, uint64_t))(*(void *)(v20 - 8) + 16))(v16, v17, v20);
          goto LABEL_26;
        case 7u:
          uint64_t v21 = type metadata accessor for AST.Atom();
          (*(void (**)(void *, void *, uint64_t))(*(void *)(v21 - 8) + 16))(v16, v17, v21);
LABEL_26:
          swift_storeEnumTagMultiPayload();
          break;
        default:
          memcpy(v16, v17, *(void *)(*(void *)(v6 - 8) + 64));
          break;
      }
      break;
    case 2u:
      *(void *)a1 = *(void *)a2;
      a1[8] = a2[8];
      swift_bridgeObjectRetain();
      break;
    case 3u:
    case 4u:
      uint64_t v8 = *((void *)a2 + 1);
      *(void *)a1 = *(void *)a2;
      *((void *)a1 + 1) = v8;
      swift_bridgeObjectRetain();
      break;
    case 5u:
    case 6u:
    case 7u:
      *(void *)a1 = *(void *)a2;
      swift_retain();
      break;
    default:
      uint64_t v4 = type metadata accessor for DSLTree.Atom(0);
      switch(swift_getEnumCaseMultiPayload())
      {
        case 0u:
          uint64_t v5 = *((void *)a2 + 1);
          *(void *)a1 = *(void *)a2;
          *((void *)a1 + 1) = v5;
          swift_bridgeObjectRetain();
          goto LABEL_13;
        case 4u:
          uint64_t v9 = type metadata accessor for AST.Reference();
          (*(void (**)(unsigned char *, unsigned char *, uint64_t))(*(void *)(v9 - 8) + 16))(a1, a2, v9);
          goto LABEL_13;
        case 6u:
          uint64_t v10 = type metadata accessor for AST.MatchingOptionSequence();
          (*(void (**)(unsigned char *, unsigned char *, uint64_t))(*(void *)(v10 - 8) + 16))(a1, a2, v10);
          goto LABEL_13;
        case 7u:
          uint64_t v11 = type metadata accessor for AST.Atom();
          (*(void (**)(unsigned char *, unsigned char *, uint64_t))(*(void *)(v11 - 8) + 16))(a1, a2, v11);
LABEL_13:
          swift_storeEnumTagMultiPayload();
          break;
        default:
          memcpy(a1, a2, *(void *)(*(void *)(v4 - 8) + 64));
          break;
      }
      break;
  }
  swift_storeEnumTagMultiPayload();
  return a1;
}

unsigned char *assignWithCopy for DSLTree.CustomCharacterClass.Member(unsigned char *a1, unsigned char *a2)
{
  if (a1 != a2)
  {
    outlined destroy of MEProgram((uint64_t)a1, type metadata accessor for DSLTree.CustomCharacterClass.Member);
    switch(swift_getEnumCaseMultiPayload())
    {
      case 1u:
        uint64_t v5 = type metadata accessor for DSLTree.Atom(0);
        switch(swift_getEnumCaseMultiPayload())
        {
          case 0u:
            *(void *)a1 = *(void *)a2;
            *((void *)a1 + 1) = *((void *)a2 + 1);
            swift_bridgeObjectRetain();
            goto LABEL_20;
          case 4u:
            uint64_t v9 = type metadata accessor for AST.Reference();
            (*(void (**)(unsigned char *, unsigned char *, uint64_t))(*(void *)(v9 - 8) + 16))(a1, a2, v9);
            goto LABEL_20;
          case 6u:
            uint64_t v10 = type metadata accessor for AST.MatchingOptionSequence();
            (*(void (**)(unsigned char *, unsigned char *, uint64_t))(*(void *)(v10 - 8) + 16))(a1, a2, v10);
            goto LABEL_20;
          case 7u:
            uint64_t v11 = type metadata accessor for AST.Atom();
            (*(void (**)(unsigned char *, unsigned char *, uint64_t))(*(void *)(v11 - 8) + 16))(a1, a2, v11);
LABEL_20:
            swift_storeEnumTagMultiPayload();
            break;
          default:
            memcpy(a1, a2, *(void *)(*(void *)(v5 - 8) + 64));
            break;
        }
        uint64_t v12 = *(int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (DSLTree.Atom, DSLTree.Atom))
                     + 48);
        uint64_t v13 = &a1[v12];
        uint64_t v14 = &a2[v12];
        switch(swift_getEnumCaseMultiPayload())
        {
          case 0u:
            *uint64_t v13 = *v14;
            v13[1] = v14[1];
            swift_bridgeObjectRetain();
            goto LABEL_27;
          case 4u:
            uint64_t v15 = type metadata accessor for AST.Reference();
            (*(void (**)(void *, void *, uint64_t))(*(void *)(v15 - 8) + 16))(v13, v14, v15);
            goto LABEL_27;
          case 6u:
            uint64_t v16 = type metadata accessor for AST.MatchingOptionSequence();
            (*(void (**)(void *, void *, uint64_t))(*(void *)(v16 - 8) + 16))(v13, v14, v16);
            goto LABEL_27;
          case 7u:
            uint64_t v17 = type metadata accessor for AST.Atom();
            (*(void (**)(void *, void *, uint64_t))(*(void *)(v17 - 8) + 16))(v13, v14, v17);
LABEL_27:
            swift_storeEnumTagMultiPayload();
            break;
          default:
            memcpy(v13, v14, *(void *)(*(void *)(v5 - 8) + 64));
            break;
        }
        break;
      case 2u:
        *(void *)a1 = *(void *)a2;
        a1[8] = a2[8];
        swift_bridgeObjectRetain();
        break;
      case 3u:
      case 4u:
        *(void *)a1 = *(void *)a2;
        *((void *)a1 + 1) = *((void *)a2 + 1);
        swift_bridgeObjectRetain();
        break;
      case 5u:
      case 6u:
      case 7u:
        *(void *)a1 = *(void *)a2;
        swift_retain();
        break;
      default:
        uint64_t v4 = type metadata accessor for DSLTree.Atom(0);
        switch(swift_getEnumCaseMultiPayload())
        {
          case 0u:
            *(void *)a1 = *(void *)a2;
            *((void *)a1 + 1) = *((void *)a2 + 1);
            swift_bridgeObjectRetain();
            goto LABEL_14;
          case 4u:
            uint64_t v6 = type metadata accessor for AST.Reference();
            (*(void (**)(unsigned char *, unsigned char *, uint64_t))(*(void *)(v6 - 8) + 16))(a1, a2, v6);
            goto LABEL_14;
          case 6u:
            uint64_t v7 = type metadata accessor for AST.MatchingOptionSequence();
            (*(void (**)(unsigned char *, unsigned char *, uint64_t))(*(void *)(v7 - 8) + 16))(a1, a2, v7);
            goto LABEL_14;
          case 7u:
            uint64_t v8 = type metadata accessor for AST.Atom();
            (*(void (**)(unsigned char *, unsigned char *, uint64_t))(*(void *)(v8 - 8) + 16))(a1, a2, v8);
LABEL_14:
            swift_storeEnumTagMultiPayload();
            break;
          default:
            memcpy(a1, a2, *(void *)(*(void *)(v4 - 8) + 64));
            break;
        }
        break;
    }
    swift_storeEnumTagMultiPayload();
  }
  return a1;
}

uint64_t outlined destroy of MEProgram(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t v3 = a2(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

char *initializeWithTake for DSLTree.CustomCharacterClass.Member(char *a1, char *a2, uint64_t a3)
{
  int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  if (EnumCaseMultiPayload == 1)
  {
    uint64_t v10 = type metadata accessor for DSLTree.Atom(0);
    int v11 = swift_getEnumCaseMultiPayload();
    switch(v11)
    {
      case 7:
        uint64_t v15 = type metadata accessor for AST.Atom();
        (*(void (**)(char *, char *, uint64_t))(*(void *)(v15 - 8) + 32))(a1, a2, v15);
        swift_storeEnumTagMultiPayload();
        break;
      case 6:
        uint64_t v16 = type metadata accessor for AST.MatchingOptionSequence();
        (*(void (**)(char *, char *, uint64_t))(*(void *)(v16 - 8) + 32))(a1, a2, v16);
        swift_storeEnumTagMultiPayload();
        break;
      case 4:
        uint64_t v12 = type metadata accessor for AST.Reference();
        (*(void (**)(char *, char *, uint64_t))(*(void *)(v12 - 8) + 32))(a1, a2, v12);
        swift_storeEnumTagMultiPayload();
        break;
      default:
        memcpy(a1, a2, *(void *)(*(void *)(v10 - 8) + 64));
        break;
    }
    uint64_t v17 = *(int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (DSLTree.Atom, DSLTree.Atom))
                 + 48);
    uint64_t v18 = &a1[v17];
    uint64_t v19 = &a2[v17];
    int v20 = swift_getEnumCaseMultiPayload();
    switch(v20)
    {
      case 7:
        uint64_t v22 = type metadata accessor for AST.Atom();
        (*(void (**)(char *, char *, uint64_t))(*(void *)(v22 - 8) + 32))(v18, v19, v22);
        swift_storeEnumTagMultiPayload();
        break;
      case 6:
        uint64_t v23 = type metadata accessor for AST.MatchingOptionSequence();
        (*(void (**)(char *, char *, uint64_t))(*(void *)(v23 - 8) + 32))(v18, v19, v23);
        swift_storeEnumTagMultiPayload();
        break;
      case 4:
        uint64_t v21 = type metadata accessor for AST.Reference();
        (*(void (**)(char *, char *, uint64_t))(*(void *)(v21 - 8) + 32))(v18, v19, v21);
        swift_storeEnumTagMultiPayload();
        break;
      default:
        memcpy(v18, v19, *(void *)(*(void *)(v10 - 8) + 64));
        break;
    }
    goto LABEL_26;
  }
  if (!EnumCaseMultiPayload)
  {
    uint64_t v7 = type metadata accessor for DSLTree.Atom(0);
    int v8 = swift_getEnumCaseMultiPayload();
    switch(v8)
    {
      case 7:
        uint64_t v13 = type metadata accessor for AST.Atom();
        (*(void (**)(char *, char *, uint64_t))(*(void *)(v13 - 8) + 32))(a1, a2, v13);
        swift_storeEnumTagMultiPayload();
        break;
      case 6:
        uint64_t v14 = type metadata accessor for AST.MatchingOptionSequence();
        (*(void (**)(char *, char *, uint64_t))(*(void *)(v14 - 8) + 32))(a1, a2, v14);
        swift_storeEnumTagMultiPayload();
        break;
      case 4:
        uint64_t v9 = type metadata accessor for AST.Reference();
        (*(void (**)(char *, char *, uint64_t))(*(void *)(v9 - 8) + 32))(a1, a2, v9);
        swift_storeEnumTagMultiPayload();
        break;
      default:
        memcpy(a1, a2, *(void *)(*(void *)(v7 - 8) + 64));
        break;
    }
LABEL_26:
    swift_storeEnumTagMultiPayload();
    return a1;
  }
  memcpy(a1, a2, *(void *)(*(void *)(a3 - 8) + 64));
  return a1;
}

char *assignWithTake for DSLTree.CustomCharacterClass.Member(char *a1, char *a2, uint64_t a3)
{
  if (a1 != a2)
  {
    outlined destroy of MEProgram((uint64_t)a1, type metadata accessor for DSLTree.CustomCharacterClass.Member);
    int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
    if (EnumCaseMultiPayload == 1)
    {
      uint64_t v10 = type metadata accessor for DSLTree.Atom(0);
      int v11 = swift_getEnumCaseMultiPayload();
      switch(v11)
      {
        case 7:
          uint64_t v15 = type metadata accessor for AST.Atom();
          (*(void (**)(char *, char *, uint64_t))(*(void *)(v15 - 8) + 32))(a1, a2, v15);
          swift_storeEnumTagMultiPayload();
          break;
        case 6:
          uint64_t v16 = type metadata accessor for AST.MatchingOptionSequence();
          (*(void (**)(char *, char *, uint64_t))(*(void *)(v16 - 8) + 32))(a1, a2, v16);
          swift_storeEnumTagMultiPayload();
          break;
        case 4:
          uint64_t v12 = type metadata accessor for AST.Reference();
          (*(void (**)(char *, char *, uint64_t))(*(void *)(v12 - 8) + 32))(a1, a2, v12);
          swift_storeEnumTagMultiPayload();
          break;
        default:
          memcpy(a1, a2, *(void *)(*(void *)(v10 - 8) + 64));
          break;
      }
      uint64_t v17 = *(int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (DSLTree.Atom, DSLTree.Atom))
                   + 48);
      uint64_t v18 = &a1[v17];
      uint64_t v19 = &a2[v17];
      int v20 = swift_getEnumCaseMultiPayload();
      switch(v20)
      {
        case 7:
          uint64_t v22 = type metadata accessor for AST.Atom();
          (*(void (**)(char *, char *, uint64_t))(*(void *)(v22 - 8) + 32))(v18, v19, v22);
          swift_storeEnumTagMultiPayload();
          break;
        case 6:
          uint64_t v23 = type metadata accessor for AST.MatchingOptionSequence();
          (*(void (**)(char *, char *, uint64_t))(*(void *)(v23 - 8) + 32))(v18, v19, v23);
          swift_storeEnumTagMultiPayload();
          break;
        case 4:
          uint64_t v21 = type metadata accessor for AST.Reference();
          (*(void (**)(char *, char *, uint64_t))(*(void *)(v21 - 8) + 32))(v18, v19, v21);
          swift_storeEnumTagMultiPayload();
          break;
        default:
          memcpy(v18, v19, *(void *)(*(void *)(v10 - 8) + 64));
          break;
      }
      goto LABEL_27;
    }
    if (!EnumCaseMultiPayload)
    {
      uint64_t v7 = type metadata accessor for DSLTree.Atom(0);
      int v8 = swift_getEnumCaseMultiPayload();
      switch(v8)
      {
        case 7:
          uint64_t v13 = type metadata accessor for AST.Atom();
          (*(void (**)(char *, char *, uint64_t))(*(void *)(v13 - 8) + 32))(a1, a2, v13);
          swift_storeEnumTagMultiPayload();
          break;
        case 6:
          uint64_t v14 = type metadata accessor for AST.MatchingOptionSequence();
          (*(void (**)(char *, char *, uint64_t))(*(void *)(v14 - 8) + 32))(a1, a2, v14);
          swift_storeEnumTagMultiPayload();
          break;
        case 4:
          uint64_t v9 = type metadata accessor for AST.Reference();
          (*(void (**)(char *, char *, uint64_t))(*(void *)(v9 - 8) + 32))(a1, a2, v9);
          swift_storeEnumTagMultiPayload();
          break;
        default:
          memcpy(a1, a2, *(void *)(*(void *)(v7 - 8) + 64));
          break;
      }
LABEL_27:
      swift_storeEnumTagMultiPayload();
      return a1;
    }
    memcpy(a1, a2, *(void *)(*(void *)(a3 - 8) + 64));
  }
  return a1;
}

uint64_t destructiveInjectEnumTag for DSLTree.CustomCharacterClass.Member()
{
  return swift_storeEnumTagMultiPayload();
}

uint64_t type metadata completion function for DSLTree.CustomCharacterClass.Member()
{
  uint64_t result = type metadata accessor for DSLTree.Atom(319);
  if (v1 <= 0x3F)
  {
    v2[4] = *(void *)(result - 8) + 64;
    swift_getTupleTypeLayout2();
    v2[5] = v2;
    v2[6] = "\t";
    v2[7] = &unk_209FB0A28;
    v2[8] = &unk_209FB0A28;
    v2[9] = &unk_209FB0A40;
    v2[10] = &unk_209FB0A40;
    v2[11] = &unk_209FB0A40;
    swift_initEnumMetadataMultiPayload();
    return 0;
  }
  return result;
}

uint64_t *initializeBufferWithCopyOfBuffer for DSLTree.Atom(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v5 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v8 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v8 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    uint64_t v6 = *(void *)(a3 - 8);
    switch(swift_getEnumCaseMultiPayload())
    {
      case 0u:
        uint64_t v7 = a2[1];
        *a1 = *a2;
        a1[1] = v7;
        swift_bridgeObjectRetain();
        swift_storeEnumTagMultiPayload();
        break;
      case 4u:
        uint64_t v10 = type metadata accessor for AST.Reference();
        (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(void *)(v10 - 8) + 16))(a1, a2, v10);
        swift_storeEnumTagMultiPayload();
        break;
      case 6u:
        uint64_t v11 = type metadata accessor for AST.MatchingOptionSequence();
        (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(void *)(v11 - 8) + 16))(a1, a2, v11);
        swift_storeEnumTagMultiPayload();
        break;
      case 7u:
        uint64_t v12 = type metadata accessor for AST.Atom();
        (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(void *)(v12 - 8) + 16))(a1, a2, v12);
        swift_storeEnumTagMultiPayload();
        break;
      default:
        memcpy(a1, a2, *(void *)(v6 + 64));
        break;
    }
  }
  return a1;
}

uint64_t destroy for DSLTree.Atom(uint64_t a1)
{
  uint64_t result = swift_getEnumCaseMultiPayload();
  switch((int)result)
  {
    case 0:
      return swift_bridgeObjectRelease();
    case 4:
      uint64_t v3 = type metadata accessor for AST.Reference();
      goto LABEL_8;
    case 6:
      uint64_t v3 = type metadata accessor for AST.MatchingOptionSequence();
      goto LABEL_8;
    case 7:
      uint64_t v3 = type metadata accessor for AST.Atom();
LABEL_8:
      uint64_t v4 = *(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8);
      uint64_t result = v4(a1, v3);
      break;
    default:
      return result;
  }
  return result;
}

void *initializeWithCopy for DSLTree.Atom(void *a1, void *a2, uint64_t a3)
{
  switch(swift_getEnumCaseMultiPayload())
  {
    case 0u:
      uint64_t v6 = a2[1];
      *a1 = *a2;
      a1[1] = v6;
      swift_bridgeObjectRetain();
      goto LABEL_7;
    case 4u:
      uint64_t v7 = type metadata accessor for AST.Reference();
      (*(void (**)(void *, void *, uint64_t))(*(void *)(v7 - 8) + 16))(a1, a2, v7);
      goto LABEL_7;
    case 6u:
      uint64_t v8 = type metadata accessor for AST.MatchingOptionSequence();
      (*(void (**)(void *, void *, uint64_t))(*(void *)(v8 - 8) + 16))(a1, a2, v8);
      goto LABEL_7;
    case 7u:
      uint64_t v9 = type metadata accessor for AST.Atom();
      (*(void (**)(void *, void *, uint64_t))(*(void *)(v9 - 8) + 16))(a1, a2, v9);
LABEL_7:
      swift_storeEnumTagMultiPayload();
      break;
    default:
      memcpy(a1, a2, *(void *)(*(void *)(a3 - 8) + 64));
      break;
  }
  return a1;
}

void *assignWithCopy for DSLTree.Atom(void *a1, void *a2, uint64_t a3)
{
  if (a1 != a2)
  {
    outlined destroy of MEProgram((uint64_t)a1, type metadata accessor for DSLTree.Atom);
    switch(swift_getEnumCaseMultiPayload())
    {
      case 0u:
        *a1 = *a2;
        a1[1] = a2[1];
        swift_bridgeObjectRetain();
        goto LABEL_8;
      case 4u:
        uint64_t v6 = type metadata accessor for AST.Reference();
        (*(void (**)(void *, void *, uint64_t))(*(void *)(v6 - 8) + 16))(a1, a2, v6);
        goto LABEL_8;
      case 6u:
        uint64_t v7 = type metadata accessor for AST.MatchingOptionSequence();
        (*(void (**)(void *, void *, uint64_t))(*(void *)(v7 - 8) + 16))(a1, a2, v7);
        goto LABEL_8;
      case 7u:
        uint64_t v8 = type metadata accessor for AST.Atom();
        (*(void (**)(void *, void *, uint64_t))(*(void *)(v8 - 8) + 16))(a1, a2, v8);
LABEL_8:
        swift_storeEnumTagMultiPayload();
        break;
      default:
        memcpy(a1, a2, *(void *)(*(void *)(a3 - 8) + 64));
        break;
    }
  }
  return a1;
}

void *initializeWithTake for DSLTree.Atom(void *a1, const void *a2, uint64_t a3)
{
  int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  switch(EnumCaseMultiPayload)
  {
    case 7:
      uint64_t v8 = type metadata accessor for AST.Atom();
      (*(void (**)(void *, const void *, uint64_t))(*(void *)(v8 - 8) + 32))(a1, a2, v8);
      swift_storeEnumTagMultiPayload();
      break;
    case 6:
      uint64_t v9 = type metadata accessor for AST.MatchingOptionSequence();
      (*(void (**)(void *, const void *, uint64_t))(*(void *)(v9 - 8) + 32))(a1, a2, v9);
      swift_storeEnumTagMultiPayload();
      break;
    case 4:
      uint64_t v7 = type metadata accessor for AST.Reference();
      (*(void (**)(void *, const void *, uint64_t))(*(void *)(v7 - 8) + 32))(a1, a2, v7);
      swift_storeEnumTagMultiPayload();
      break;
    default:
      memcpy(a1, a2, *(void *)(*(void *)(a3 - 8) + 64));
      break;
  }
  return a1;
}

void *assignWithTake for DSLTree.Atom(void *a1, const void *a2, uint64_t a3)
{
  if (a1 != a2)
  {
    outlined destroy of MEProgram((uint64_t)a1, type metadata accessor for DSLTree.Atom);
    int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
    switch(EnumCaseMultiPayload)
    {
      case 7:
        uint64_t v8 = type metadata accessor for AST.Atom();
        (*(void (**)(void *, const void *, uint64_t))(*(void *)(v8 - 8) + 32))(a1, a2, v8);
        swift_storeEnumTagMultiPayload();
        break;
      case 6:
        uint64_t v9 = type metadata accessor for AST.MatchingOptionSequence();
        (*(void (**)(void *, const void *, uint64_t))(*(void *)(v9 - 8) + 32))(a1, a2, v9);
        swift_storeEnumTagMultiPayload();
        break;
      case 4:
        uint64_t v7 = type metadata accessor for AST.Reference();
        (*(void (**)(void *, const void *, uint64_t))(*(void *)(v7 - 8) + 32))(a1, a2, v7);
        swift_storeEnumTagMultiPayload();
        break;
      default:
        memcpy(a1, a2, *(void *)(*(void *)(a3 - 8) + 64));
        break;
    }
  }
  return a1;
}

uint64_t type metadata completion function for DSLTree.Atom()
{
  uint64_t result = type metadata accessor for AST.Reference();
  if (v1 <= 0x3F)
  {
    uint64_t result = type metadata accessor for AST.MatchingOptionSequence();
    if (v2 <= 0x3F)
    {
      uint64_t result = type metadata accessor for AST.Atom();
      if (v3 <= 0x3F)
      {
        swift_initEnumMetadataMultiPayload();
        return 0;
      }
    }
  }
  return result;
}

unsigned char *__swift_memcpy1_1(unsigned char *result, unsigned char *a2)
{
  *uint64_t result = *a2;
  return result;
}

uint64_t getEnumTagSinglePayload for DSLTree.Atom.Assertion(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0xF4) {
    goto LABEL_17;
  }
  if (a2 + 12 >= 0xFFFF00) {
    int v2 = 4;
  }
  else {
    int v2 = 2;
  }
  if ((a2 + 12) >> 8 < 0xFF) {
    int v3 = 1;
  }
  else {
    int v3 = v2;
  }
  if (v3 == 4)
  {
    int v4 = *(_DWORD *)(a1 + 1);
    if (v4) {
      return (*a1 | (v4 << 8)) - 12;
    }
  }
  else
  {
    if (v3 == 2)
    {
      int v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1)) {
        goto LABEL_17;
      }
      return (*a1 | (v4 << 8)) - 12;
    }
    int v4 = a1[1];
    if (a1[1]) {
      return (*a1 | (v4 << 8)) - 12;
    }
  }
LABEL_17:
  unsigned int v6 = *a1;
  BOOL v7 = v6 >= 0xD;
  int v8 = v6 - 13;
  if (!v7) {
    int v8 = -1;
  }
  return (v8 + 1);
}

unsigned char *storeEnumTagSinglePayload for DSLTree.Atom.Assertion(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 12 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 12) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xF4) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xF3)
  {
    unsigned int v6 = ((a2 - 244) >> 8) + 1;
    *uint64_t result = a2 + 12;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x209F8938CLL);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *uint64_t result = a2 + 12;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for DSLTree.Atom.Assertion()
{
  return &type metadata for DSLTree.Atom.Assertion;
}

uint64_t getEnumTagSinglePayload for DSLTree.Atom.CharacterClass(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0xF3) {
    goto LABEL_17;
  }
  if (a2 + 13 >= 0xFFFF00) {
    int v2 = 4;
  }
  else {
    int v2 = 2;
  }
  if ((a2 + 13) >> 8 < 0xFF) {
    int v3 = 1;
  }
  else {
    int v3 = v2;
  }
  if (v3 == 4)
  {
    int v4 = *(_DWORD *)(a1 + 1);
    if (v4) {
      return (*a1 | (v4 << 8)) - 13;
    }
  }
  else
  {
    if (v3 == 2)
    {
      int v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1)) {
        goto LABEL_17;
      }
      return (*a1 | (v4 << 8)) - 13;
    }
    int v4 = a1[1];
    if (a1[1]) {
      return (*a1 | (v4 << 8)) - 13;
    }
  }
LABEL_17:
  unsigned int v6 = *a1;
  BOOL v7 = v6 >= 0xE;
  int v8 = v6 - 14;
  if (!v7) {
    int v8 = -1;
  }
  return (v8 + 1);
}

unsigned char *storeEnumTagSinglePayload for DSLTree.Atom.CharacterClass(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 13 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 13) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xF3) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xF2)
  {
    unsigned int v6 = ((a2 - 243) >> 8) + 1;
    *uint64_t result = a2 + 13;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x209F89520);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *uint64_t result = a2 + 13;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for DSLTree.Atom.CharacterClass()
{
  return &type metadata for DSLTree.Atom.CharacterClass;
}

ValueMetadata *type metadata accessor for ReferenceID()
{
  return &type metadata for ReferenceID;
}

ValueMetadata *type metadata accessor for DSLTree._AST()
{
  return &type metadata for DSLTree._AST;
}

uint64_t initializeBufferWithCopyOfBuffer for DSLTree._AST.GroupKind(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return initializeBufferWithCopyOfBuffer for DSLTree._AST.GroupKind(a1, a2, a3, MEMORY[0x263F8FCE0]);
}

uint64_t destroy for DSLTree._AST.GroupKind(uint64_t a1, uint64_t a2)
{
  return destroy for DSLTree._AST.GroupKind(a1, a2, MEMORY[0x263F8FCE0]);
}

uint64_t initializeWithCopy for DSLTree._AST.GroupKind(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return initializeWithCopy for DSLTree._AST.GroupKind(a1, a2, a3, MEMORY[0x263F8FCE0]);
}

uint64_t assignWithCopy for DSLTree._AST.GroupKind(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return assignWithCopy for DSLTree._AST.GroupKind(a1, a2, a3, MEMORY[0x263F8FCE0]);
}

uint64_t initializeWithTake for DSLTree._AST.GroupKind(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return initializeWithTake for DSLTree._AST.GroupKind(a1, a2, a3, MEMORY[0x263F8FCE0]);
}

uint64_t assignWithTake for DSLTree._AST.GroupKind(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return assignWithTake for DSLTree._AST.GroupKind(a1, a2, a3, MEMORY[0x263F8FCE0]);
}

uint64_t getEnumTagSinglePayload for DSLTree._AST.GroupKind(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x270FA0340](a1, a2, a3, sub_209F8961C);
}

uint64_t sub_209F8961C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return __swift_get_extra_inhabitant_indexTm(a1, a2, a3, MEMORY[0x263F8FCE0]);
}

uint64_t storeEnumTagSinglePayload for DSLTree._AST.GroupKind(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x270FA0580](a1, a2, a3, a4, sub_209F89648);
}

uint64_t sub_209F89648(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_store_extra_inhabitant_indexTm(a1, a2, a3, a4, MEMORY[0x263F8FCE0]);
}

uint64_t type metadata accessor for DSLTree._AST.GroupKind(uint64_t a1)
{
  return type metadata accessor for MEProgram(a1, (uint64_t *)&type metadata singleton initialization cache for DSLTree._AST.GroupKind);
}

uint64_t type metadata completion function for DSLTree._AST.GroupKind(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return type metadata completion function for DSLTree._AST.GroupKind(a1, a2, a3, MEMORY[0x263F8FCE0]);
}

uint64_t initializeBufferWithCopyOfBuffer for DSLTree._AST.ConditionKind(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return initializeBufferWithCopyOfBuffer for DSLTree._AST.GroupKind(a1, a2, a3, MEMORY[0x263F8F878]);
}

uint64_t destroy for DSLTree._AST.ConditionKind(uint64_t a1, uint64_t a2)
{
  return destroy for DSLTree._AST.GroupKind(a1, a2, MEMORY[0x263F8F878]);
}

uint64_t initializeWithCopy for DSLTree._AST.ConditionKind(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return initializeWithCopy for DSLTree._AST.GroupKind(a1, a2, a3, MEMORY[0x263F8F878]);
}

uint64_t assignWithCopy for DSLTree._AST.ConditionKind(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return assignWithCopy for DSLTree._AST.GroupKind(a1, a2, a3, MEMORY[0x263F8F878]);
}

uint64_t initializeWithTake for DSLTree._AST.ConditionKind(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return initializeWithTake for DSLTree._AST.GroupKind(a1, a2, a3, MEMORY[0x263F8F878]);
}

uint64_t assignWithTake for DSLTree._AST.ConditionKind(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return assignWithTake for DSLTree._AST.GroupKind(a1, a2, a3, MEMORY[0x263F8F878]);
}

uint64_t getEnumTagSinglePayload for DSLTree._AST.ConditionKind(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x270FA0340](a1, a2, a3, sub_209F8973C);
}

uint64_t sub_209F8973C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return __swift_get_extra_inhabitant_indexTm(a1, a2, a3, MEMORY[0x263F8F878]);
}

uint64_t __swift_get_extra_inhabitant_indexTm(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(void))
{
  uint64_t v6 = a4(0);
  BOOL v7 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 48);

  return v7(a1, a2, v6);
}

uint64_t storeEnumTagSinglePayload for DSLTree._AST.ConditionKind(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x270FA0580](a1, a2, a3, a4, sub_209F897D8);
}

uint64_t sub_209F897D8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_store_extra_inhabitant_indexTm(a1, a2, a3, a4, MEMORY[0x263F8F878]);
}

uint64_t __swift_store_extra_inhabitant_indexTm(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(void))
{
  uint64_t v7 = a5(0);
  int v8 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 56);

  return v8(a1, a2, a2, v7);
}

uint64_t type metadata accessor for DSLTree._AST.ConditionKind(uint64_t a1)
{
  return type metadata accessor for MEProgram(a1, (uint64_t *)&type metadata singleton initialization cache for DSLTree._AST.ConditionKind);
}

uint64_t type metadata completion function for DSLTree._AST.ConditionKind(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return type metadata completion function for DSLTree._AST.GroupKind(a1, a2, a3, MEMORY[0x263F8F878]);
}

uint64_t type metadata completion function for DSLTree._AST.GroupKind(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(uint64_t))
{
  uint64_t result = a4(319);
  if (v5 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t initializeBufferWithCopyOfBuffer for DSLTree._AST.QuantificationKind(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return initializeBufferWithCopyOfBuffer for DSLTree._AST.GroupKind(a1, a2, a3, MEMORY[0x263F8F960]);
}

uint64_t destroy for DSLTree._AST.QuantificationKind(uint64_t a1, uint64_t a2)
{
  return destroy for DSLTree._AST.GroupKind(a1, a2, MEMORY[0x263F8F960]);
}

uint64_t initializeWithCopy for DSLTree._AST.QuantificationKind(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return initializeWithCopy for DSLTree._AST.GroupKind(a1, a2, a3, MEMORY[0x263F8F960]);
}

uint64_t assignWithCopy for DSLTree._AST.QuantificationKind(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return assignWithCopy for DSLTree._AST.GroupKind(a1, a2, a3, MEMORY[0x263F8F960]);
}

uint64_t initializeWithTake for DSLTree._AST.QuantificationKind(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return initializeWithTake for DSLTree._AST.GroupKind(a1, a2, a3, MEMORY[0x263F8F960]);
}

uint64_t assignWithTake for DSLTree._AST.QuantificationKind(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return assignWithTake for DSLTree._AST.GroupKind(a1, a2, a3, MEMORY[0x263F8F960]);
}

uint64_t getEnumTagSinglePayload for DSLTree._AST.QuantificationKind(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x270FA0340](a1, a2, a3, sub_209F899D0);
}

uint64_t sub_209F899D0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return __swift_get_extra_inhabitant_indexTm(a1, a2, a3, MEMORY[0x263F8F960]);
}

uint64_t storeEnumTagSinglePayload for DSLTree._AST.QuantificationKind(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x270FA0580](a1, a2, a3, a4, sub_209F899FC);
}

uint64_t sub_209F899FC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_store_extra_inhabitant_indexTm(a1, a2, a3, a4, MEMORY[0x263F8F960]);
}

uint64_t type metadata accessor for DSLTree._AST.QuantificationKind(uint64_t a1)
{
  return type metadata accessor for MEProgram(a1, (uint64_t *)&type metadata singleton initialization cache for DSLTree._AST.QuantificationKind);
}

uint64_t type metadata completion function for DSLTree._AST.QuantificationKind(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return type metadata completion function for DSLTree._AST.GroupKind(a1, a2, a3, MEMORY[0x263F8F960]);
}

uint64_t initializeBufferWithCopyOfBuffer for DSLTree._AST.QuantificationAmount(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return initializeBufferWithCopyOfBuffer for DSLTree._AST.GroupKind(a1, a2, a3, MEMORY[0x263F8F9B0]);
}

uint64_t destroy for DSLTree._AST.QuantificationAmount(uint64_t a1, uint64_t a2)
{
  return destroy for DSLTree._AST.GroupKind(a1, a2, MEMORY[0x263F8F9B0]);
}

uint64_t initializeWithCopy for DSLTree._AST.QuantificationAmount(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return initializeWithCopy for DSLTree._AST.GroupKind(a1, a2, a3, MEMORY[0x263F8F9B0]);
}

uint64_t assignWithCopy for DSLTree._AST.QuantificationAmount(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return assignWithCopy for DSLTree._AST.GroupKind(a1, a2, a3, MEMORY[0x263F8F9B0]);
}

uint64_t initializeWithTake for DSLTree._AST.QuantificationAmount(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return initializeWithTake for DSLTree._AST.GroupKind(a1, a2, a3, MEMORY[0x263F8F9B0]);
}

uint64_t assignWithTake for DSLTree._AST.QuantificationAmount(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return assignWithTake for DSLTree._AST.GroupKind(a1, a2, a3, MEMORY[0x263F8F9B0]);
}

uint64_t getEnumTagSinglePayload for DSLTree._AST.QuantificationAmount(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x270FA0340](a1, a2, a3, sub_209F89AF0);
}

uint64_t sub_209F89AF0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return __swift_get_extra_inhabitant_indexTm(a1, a2, a3, MEMORY[0x263F8F9B0]);
}

uint64_t storeEnumTagSinglePayload for DSLTree._AST.QuantificationAmount(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x270FA0580](a1, a2, a3, a4, sub_209F89B1C);
}

uint64_t sub_209F89B1C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_store_extra_inhabitant_indexTm(a1, a2, a3, a4, MEMORY[0x263F8F9B0]);
}

uint64_t type metadata accessor for DSLTree._AST.QuantificationAmount(uint64_t a1)
{
  return type metadata accessor for MEProgram(a1, (uint64_t *)&type metadata singleton initialization cache for DSLTree._AST.QuantificationAmount);
}

uint64_t type metadata completion function for DSLTree._AST.QuantificationAmount(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return type metadata completion function for DSLTree._AST.GroupKind(a1, a2, a3, MEMORY[0x263F8F9B0]);
}

uint64_t initializeBufferWithCopyOfBuffer for DSLTree._AST.ASTNode(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return initializeBufferWithCopyOfBuffer for DSLTree._AST.GroupKind(a1, a2, a3, MEMORY[0x263F8FC60]);
}

uint64_t destroy for DSLTree._AST.ASTNode(uint64_t a1, uint64_t a2)
{
  return destroy for DSLTree._AST.GroupKind(a1, a2, MEMORY[0x263F8FC60]);
}

uint64_t initializeWithCopy for DSLTree._AST.ASTNode(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return initializeWithCopy for DSLTree._AST.GroupKind(a1, a2, a3, MEMORY[0x263F8FC60]);
}

uint64_t assignWithCopy for DSLTree._AST.ASTNode(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return assignWithCopy for DSLTree._AST.GroupKind(a1, a2, a3, MEMORY[0x263F8FC60]);
}

uint64_t initializeWithTake for DSLTree._AST.ASTNode(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return initializeWithTake for DSLTree._AST.GroupKind(a1, a2, a3, MEMORY[0x263F8FC60]);
}

uint64_t assignWithTake for DSLTree._AST.ASTNode(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return assignWithTake for DSLTree._AST.GroupKind(a1, a2, a3, MEMORY[0x263F8FC60]);
}

uint64_t getEnumTagSinglePayload for DSLTree._AST.ASTNode(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x270FA0340](a1, a2, a3, sub_209F89C10);
}

uint64_t sub_209F89C10(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return __swift_get_extra_inhabitant_indexTm(a1, a2, a3, MEMORY[0x263F8FC60]);
}

uint64_t storeEnumTagSinglePayload for DSLTree._AST.ASTNode(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x270FA0580](a1, a2, a3, a4, sub_209F89C3C);
}

uint64_t sub_209F89C3C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_store_extra_inhabitant_indexTm(a1, a2, a3, a4, MEMORY[0x263F8FC60]);
}

uint64_t type metadata accessor for DSLTree._AST.ASTNode(uint64_t a1)
{
  return type metadata accessor for MEProgram(a1, (uint64_t *)&type metadata singleton initialization cache for DSLTree._AST.ASTNode);
}

uint64_t type metadata completion function for DSLTree._AST.ASTNode(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return type metadata completion function for DSLTree._AST.GroupKind(a1, a2, a3, MEMORY[0x263F8FC60]);
}

uint64_t initializeBufferWithCopyOfBuffer for DSLTree._AST.AbsentFunction(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return initializeBufferWithCopyOfBuffer for DSLTree._AST.GroupKind(a1, a2, a3, MEMORY[0x263F8F8A0]);
}

uint64_t destroy for DSLTree._AST.AbsentFunction(uint64_t a1, uint64_t a2)
{
  return destroy for DSLTree._AST.GroupKind(a1, a2, MEMORY[0x263F8F8A0]);
}

uint64_t initializeWithCopy for DSLTree._AST.AbsentFunction(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return initializeWithCopy for DSLTree._AST.GroupKind(a1, a2, a3, MEMORY[0x263F8F8A0]);
}

uint64_t assignWithCopy for DSLTree._AST.AbsentFunction(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return assignWithCopy for DSLTree._AST.GroupKind(a1, a2, a3, MEMORY[0x263F8F8A0]);
}

uint64_t initializeWithTake for DSLTree._AST.AbsentFunction(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return initializeWithTake for DSLTree._AST.GroupKind(a1, a2, a3, MEMORY[0x263F8F8A0]);
}

uint64_t assignWithTake for DSLTree._AST.AbsentFunction(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return assignWithTake for DSLTree._AST.GroupKind(a1, a2, a3, MEMORY[0x263F8F8A0]);
}

uint64_t getEnumTagSinglePayload for DSLTree._AST.AbsentFunction(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x270FA0340](a1, a2, a3, sub_209F89D30);
}

uint64_t sub_209F89D30(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return __swift_get_extra_inhabitant_indexTm(a1, a2, a3, MEMORY[0x263F8F8A0]);
}

uint64_t storeEnumTagSinglePayload for DSLTree._AST.AbsentFunction(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x270FA0580](a1, a2, a3, a4, sub_209F89D5C);
}

uint64_t sub_209F89D5C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_store_extra_inhabitant_indexTm(a1, a2, a3, a4, MEMORY[0x263F8F8A0]);
}

uint64_t type metadata accessor for DSLTree._AST.AbsentFunction(uint64_t a1)
{
  return type metadata accessor for MEProgram(a1, (uint64_t *)&type metadata singleton initialization cache for DSLTree._AST.AbsentFunction);
}

uint64_t type metadata completion function for DSLTree._AST.AbsentFunction(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return type metadata completion function for DSLTree._AST.GroupKind(a1, a2, a3, MEMORY[0x263F8F8A0]);
}

uint64_t initializeBufferWithCopyOfBuffer for DSLTree._AST.Reference(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return initializeBufferWithCopyOfBuffer for DSLTree._AST.GroupKind(a1, a2, a3, MEMORY[0x263F8FD00]);
}

uint64_t destroy for DSLTree._AST.Reference(uint64_t a1, uint64_t a2)
{
  return destroy for DSLTree._AST.GroupKind(a1, a2, MEMORY[0x263F8FD00]);
}

uint64_t initializeWithCopy for DSLTree._AST.Reference(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return initializeWithCopy for DSLTree._AST.GroupKind(a1, a2, a3, MEMORY[0x263F8FD00]);
}

uint64_t assignWithCopy for DSLTree._AST.Reference(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return assignWithCopy for DSLTree._AST.GroupKind(a1, a2, a3, MEMORY[0x263F8FD00]);
}

uint64_t initializeWithTake for DSLTree._AST.Reference(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return initializeWithTake for DSLTree._AST.GroupKind(a1, a2, a3, MEMORY[0x263F8FD00]);
}

uint64_t assignWithTake for DSLTree._AST.Reference(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return assignWithTake for DSLTree._AST.GroupKind(a1, a2, a3, MEMORY[0x263F8FD00]);
}

uint64_t getEnumTagSinglePayload for DSLTree._AST.Reference(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x270FA0340](a1, a2, a3, sub_209F89E50);
}

uint64_t sub_209F89E50(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return __swift_get_extra_inhabitant_indexTm(a1, a2, a3, MEMORY[0x263F8FD00]);
}

uint64_t storeEnumTagSinglePayload for DSLTree._AST.Reference(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x270FA0580](a1, a2, a3, a4, sub_209F89E7C);
}

uint64_t sub_209F89E7C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_store_extra_inhabitant_indexTm(a1, a2, a3, a4, MEMORY[0x263F8FD00]);
}

uint64_t type metadata accessor for DSLTree._AST.Reference(uint64_t a1)
{
  return type metadata accessor for MEProgram(a1, (uint64_t *)&type metadata singleton initialization cache for DSLTree._AST.Reference);
}

uint64_t type metadata completion function for DSLTree._AST.Reference(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return type metadata completion function for DSLTree._AST.GroupKind(a1, a2, a3, MEMORY[0x263F8FD00]);
}

uint64_t initializeBufferWithCopyOfBuffer for DSLTree._AST.MatchingOptionSequence(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return initializeBufferWithCopyOfBuffer for DSLTree._AST.GroupKind(a1, a2, a3, MEMORY[0x263F8FA00]);
}

uint64_t destroy for DSLTree._AST.MatchingOptionSequence(uint64_t a1, uint64_t a2)
{
  return destroy for DSLTree._AST.GroupKind(a1, a2, MEMORY[0x263F8FA00]);
}

uint64_t initializeWithCopy for DSLTree._AST.MatchingOptionSequence(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return initializeWithCopy for DSLTree._AST.GroupKind(a1, a2, a3, MEMORY[0x263F8FA00]);
}

uint64_t assignWithCopy for DSLTree._AST.MatchingOptionSequence(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return assignWithCopy for DSLTree._AST.GroupKind(a1, a2, a3, MEMORY[0x263F8FA00]);
}

uint64_t initializeWithTake for DSLTree._AST.MatchingOptionSequence(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return initializeWithTake for DSLTree._AST.GroupKind(a1, a2, a3, MEMORY[0x263F8FA00]);
}

uint64_t assignWithTake for DSLTree._AST.MatchingOptionSequence(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return assignWithTake for DSLTree._AST.GroupKind(a1, a2, a3, MEMORY[0x263F8FA00]);
}

uint64_t getEnumTagSinglePayload for DSLTree._AST.MatchingOptionSequence(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x270FA0340](a1, a2, a3, sub_209F89F70);
}

uint64_t sub_209F89F70(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return __swift_get_extra_inhabitant_indexTm(a1, a2, a3, MEMORY[0x263F8FA00]);
}

uint64_t storeEnumTagSinglePayload for DSLTree._AST.MatchingOptionSequence(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x270FA0580](a1, a2, a3, a4, sub_209F89F9C);
}

uint64_t sub_209F89F9C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_store_extra_inhabitant_indexTm(a1, a2, a3, a4, MEMORY[0x263F8FA00]);
}

uint64_t type metadata accessor for DSLTree._AST.MatchingOptionSequence(uint64_t a1)
{
  return type metadata accessor for MEProgram(a1, (uint64_t *)&type metadata singleton initialization cache for DSLTree._AST.MatchingOptionSequence);
}

uint64_t type metadata completion function for DSLTree._AST.MatchingOptionSequence(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return type metadata completion function for DSLTree._AST.GroupKind(a1, a2, a3, MEMORY[0x263F8FA00]);
}

uint64_t initializeBufferWithCopyOfBuffer for DSLTree._AST.Atom(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return initializeBufferWithCopyOfBuffer for DSLTree._AST.GroupKind(a1, a2, a3, MEMORY[0x263F8FBF0]);
}

uint64_t initializeBufferWithCopyOfBuffer for DSLTree._AST.GroupKind(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(void))
{
  uint64_t v6 = a4(0);
  uint64_t v7 = **(uint64_t (***)(uint64_t, uint64_t, uint64_t))(v6 - 8);

  return v7(a1, a2, v6);
}

uint64_t destroy for DSLTree._AST.Atom(uint64_t a1, uint64_t a2)
{
  return destroy for DSLTree._AST.GroupKind(a1, a2, MEMORY[0x263F8FBF0]);
}

uint64_t destroy for DSLTree._AST.GroupKind(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v4 = a3(0);
  unint64_t v5 = *(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v4 - 8) + 8);

  return v5(a1, v4);
}

uint64_t initializeWithCopy for DSLTree._AST.Atom(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return initializeWithCopy for DSLTree._AST.GroupKind(a1, a2, a3, MEMORY[0x263F8FBF0]);
}

uint64_t initializeWithCopy for DSLTree._AST.GroupKind(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(void))
{
  uint64_t v6 = a4(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 16))(a1, a2, v6);
  return a1;
}

uint64_t assignWithCopy for DSLTree._AST.Atom(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return assignWithCopy for DSLTree._AST.GroupKind(a1, a2, a3, MEMORY[0x263F8FBF0]);
}

uint64_t assignWithCopy for DSLTree._AST.GroupKind(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(void))
{
  uint64_t v6 = a4(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 24))(a1, a2, v6);
  return a1;
}

uint64_t initializeWithTake for DSLTree._AST.Atom(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return initializeWithTake for DSLTree._AST.GroupKind(a1, a2, a3, MEMORY[0x263F8FBF0]);
}

uint64_t initializeWithTake for DSLTree._AST.GroupKind(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(void))
{
  uint64_t v6 = a4(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 32))(a1, a2, v6);
  return a1;
}

uint64_t assignWithTake for DSLTree._AST.Atom(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return assignWithTake for DSLTree._AST.GroupKind(a1, a2, a3, MEMORY[0x263F8FBF0]);
}

uint64_t assignWithTake for DSLTree._AST.GroupKind(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(void))
{
  uint64_t v6 = a4(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 40))(a1, a2, v6);
  return a1;
}

uint64_t getEnumTagSinglePayload for DSLTree._AST.Atom(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x270FA0340](a1, a2, a3, sub_209F8A308);
}

uint64_t sub_209F8A308(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return __swift_get_extra_inhabitant_indexTm(a1, a2, a3, MEMORY[0x263F8FBF0]);
}

uint64_t storeEnumTagSinglePayload for DSLTree._AST.Atom(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x270FA0580](a1, a2, a3, a4, sub_209F8A334);
}

uint64_t sub_209F8A334(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_store_extra_inhabitant_indexTm(a1, a2, a3, a4, MEMORY[0x263F8FBF0]);
}

uint64_t type metadata accessor for DSLTree._AST.Atom(uint64_t a1)
{
  return type metadata accessor for MEProgram(a1, (uint64_t *)&type metadata singleton initialization cache for DSLTree._AST.Atom);
}

uint64_t type metadata completion function for DSLTree._AST.Atom(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return type metadata completion function for DSLTree._AST.GroupKind(a1, a2, a3, MEMORY[0x263F8FBF0]);
}

uint64_t destroy for AnyRegexOutput()
{
  swift_bridgeObjectRelease();

  return swift_bridgeObjectRelease();
}

uint64_t initializeWithCopy for Regex.Match(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v3;
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

void *assignWithCopy for Regex.Match(void *a1, void *a2)
{
  *a1 = *a2;
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[2] = a2[2];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[3] = a2[3];
  a1[4] = a2[4];
  return a1;
}

__n128 __swift_memcpy40_8(uint64_t a1, uint64_t a2)
{
  __n128 result = *(__n128 *)a2;
  long long v3 = *(_OWORD *)(a2 + 16);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(__n128 *)a1 = result;
  *(_OWORD *)(a1 + 16) = v3;
  return result;
}

uint64_t assignWithTake for Regex.Match(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  return a1;
}

uint64_t getEnumTagSinglePayload for Regex.Match(uint64_t a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *(unsigned char *)(a1 + 40)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  unint64_t v2 = *(void *)(a1 + 8);
  if (v2 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for Regex.Match(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 8) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(void *)__n128 result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 40) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 8) = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 40) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for RegexSemanticLevel()
{
  return &type metadata for RegexSemanticLevel;
}

ValueMetadata *type metadata accessor for RegexWordBoundaryKind()
{
  return &type metadata for RegexWordBoundaryKind;
}

ValueMetadata *type metadata accessor for RegexRepetitionBehavior()
{
  return &type metadata for RegexRepetitionBehavior;
}

ValueMetadata *type metadata accessor for _RegexFactory()
{
  return &type metadata for _RegexFactory;
}

ValueMetadata *type metadata accessor for RegexRepetitionBehavior.Kind()
{
  return &type metadata for RegexRepetitionBehavior.Kind;
}

ValueMetadata *type metadata accessor for RegexWordBoundaryKind.Representation()
{
  return &type metadata for RegexWordBoundaryKind.Representation;
}

ValueMetadata *type metadata accessor for RegexSemanticLevel.Representation()
{
  return &type metadata for RegexSemanticLevel.Representation;
}

uint64_t type metadata instantiation function for DefaultSearcherState(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x270FA01A8](a1, a2, a3, 32);
}

uint64_t type metadata completion function for DefaultSearcherState()
{
  uint64_t result = type metadata accessor for DefaultSearcherState.Position();
  if (v1 <= 0x3F)
  {
    uint64_t result = swift_getAssociatedTypeWitness();
    if (v2 <= 0x3F)
    {
      swift_initStructMetadata();
      return 0;
    }
  }
  return result;
}

uint64_t *initializeBufferWithCopyOfBuffer for DefaultSearcherState(uint64_t *a1, uint64_t *a2)
{
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v5 = *(void *)(AssociatedTypeWitness - 8);
  uint64_t v6 = *(void *)(v5 + 64);
  if (*(_DWORD *)(v5 + 84)) {
    size_t v7 = *(void *)(v5 + 64);
  }
  else {
    size_t v7 = v6 + 1;
  }
  uint64_t v8 = *(_DWORD *)(v5 + 80);
  uint64_t v9 = ~v8;
  size_t v10 = v7 + v8;
  unint64_t v11 = ((v7 + v8) & v9) + v6;
  if (v8 > 7 || (*(_DWORD *)(v5 + 80) & 0x100000) != 0 || v11 > 0x18)
  {
    uint64_t v14 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v14 + ((v8 + 16) & v9));
    swift_retain();
  }
  else
  {
    uint64_t v15 = AssociatedTypeWitness;
    if ((*(unsigned int (**)(uint64_t *, uint64_t, uint64_t))(v5 + 48))(a2, 1, AssociatedTypeWitness))
    {
      memcpy(a1, a2, v7);
      (*(void (**)(unint64_t, unint64_t, uint64_t))(v5 + 16))(((unint64_t)a1 + v10) & v9, ((unint64_t)a2 + v10) & v9, v15);
    }
    else
    {
      uint64_t v16 = *(void (**)(uint64_t *, uint64_t *, uint64_t))(v5 + 16);
      v16(a1, a2, v15);
      (*(void (**)(uint64_t *, void, uint64_t, uint64_t))(v5 + 56))(a1, 0, 1, v15);
      v16((uint64_t *)(((unint64_t)a1 + v10) & v9), (uint64_t *)(((unint64_t)a2 + v10) & v9), v15);
    }
  }
  return a1;
}

uint64_t destroy for DefaultSearcherState(uint64_t a1)
{
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v3 = *(void *)(AssociatedTypeWitness - 8);
  int v4 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v3 + 48))(a1, 1, AssociatedTypeWitness);
  uint64_t v5 = *(void (**)(uint64_t, uint64_t))(v3 + 8);
  if (!v4)
  {
    uint64_t v9 = *(void (**)(uint64_t, uint64_t))(v3 + 8);
    v5(a1, AssociatedTypeWitness);
    uint64_t v5 = v9;
  }
  uint64_t v6 = *(unsigned __int8 *)(v3 + 80);
  uint64_t v7 = *(void *)(v3 + 64) + a1;
  if (!*(_DWORD *)(v3 + 84)) {
    ++v7;
  }

  return ((uint64_t (*)(uint64_t, uint64_t))v5)((v7 + v6) & ~v6, AssociatedTypeWitness);
}

void *initializeWithCopy for DefaultSearcherState(void *a1, const void *a2)
{
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v5 = *(void *)(AssociatedTypeWitness - 8);
  if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v5 + 48))(a2, 1, AssociatedTypeWitness))
  {
    int v6 = *(_DWORD *)(v5 + 84);
    uint64_t v7 = *(void *)(v5 + 64);
    if (v6) {
      size_t v8 = *(void *)(v5 + 64);
    }
    else {
      size_t v8 = v7 + 1;
    }
    memcpy(a1, a2, v8);
    uint64_t v9 = *(void (**)(void *, const void *, uint64_t))(v5 + 16);
  }
  else
  {
    uint64_t v9 = *(void (**)(void *, const void *, uint64_t))(v5 + 16);
    v9(a1, a2, AssociatedTypeWitness);
    (*(void (**)(void *, void, uint64_t, uint64_t))(v5 + 56))(a1, 0, 1, AssociatedTypeWitness);
    int v6 = *(_DWORD *)(v5 + 84);
    uint64_t v7 = *(void *)(v5 + 64);
  }
  if (v6) {
    uint64_t v10 = v7;
  }
  else {
    uint64_t v10 = v7 + 1;
  }
  v9((void *)(((unint64_t)a1 + v10 + *(unsigned __int8 *)(v5 + 80)) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80)), (const void *)(((unint64_t)a2 + v10 + *(unsigned __int8 *)(v5 + 80)) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80)), AssociatedTypeWitness);
  return a1;
}

void *assignWithCopy for DefaultSearcherState(void *a1, void *a2)
{
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v5 = *(void *)(AssociatedTypeWitness - 8);
  int v6 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v5 + 48);
  int v7 = v6(a1, 1, AssociatedTypeWitness);
  int v8 = v6(a2, 1, AssociatedTypeWitness);
  if (v7)
  {
    if (!v8)
    {
      (*(void (**)(void *, void *, uint64_t))(v5 + 16))(a1, a2, AssociatedTypeWitness);
      (*(void (**)(void *, void, uint64_t, uint64_t))(v5 + 56))(a1, 0, 1, AssociatedTypeWitness);
      goto LABEL_12;
    }
    int v9 = *(_DWORD *)(v5 + 84);
    size_t v10 = *(void *)(v5 + 64);
  }
  else
  {
    if (!v8)
    {
      (*(void (**)(void *, void *, uint64_t))(v5 + 24))(a1, a2, AssociatedTypeWitness);
      goto LABEL_12;
    }
    (*(void (**)(void *, uint64_t))(v5 + 8))(a1, AssociatedTypeWitness);
    int v9 = *(_DWORD *)(v5 + 84);
    size_t v10 = *(void *)(v5 + 64);
  }
  if (v9) {
    size_t v11 = v10;
  }
  else {
    size_t v11 = v10 + 1;
  }
  memcpy(a1, a2, v11);
LABEL_12:
  uint64_t v14 = *(void (**)(unint64_t, unint64_t, uint64_t))(v5 + 24);
  uint64_t v13 = v5 + 24;
  uint64_t v12 = v14;
  if (*(_DWORD *)(v13 + 60)) {
    uint64_t v15 = *(void *)(v13 + 40);
  }
  else {
    uint64_t v15 = *(void *)(v13 + 40) + 1;
  }
  v12(((unint64_t)a1 + v15 + *(unsigned __int8 *)(v13 + 56)) & ~(unint64_t)*(unsigned __int8 *)(v13 + 56), ((unint64_t)a2 + v15 + *(unsigned __int8 *)(v13 + 56)) & ~(unint64_t)*(unsigned __int8 *)(v13 + 56), AssociatedTypeWitness);
  return a1;
}

void *initializeWithTake for DefaultSearcherState(void *a1, const void *a2)
{
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v5 = *(void *)(AssociatedTypeWitness - 8);
  if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v5 + 48))(a2, 1, AssociatedTypeWitness))
  {
    int v6 = *(_DWORD *)(v5 + 84);
    uint64_t v7 = *(void *)(v5 + 64);
    if (v6) {
      size_t v8 = *(void *)(v5 + 64);
    }
    else {
      size_t v8 = v7 + 1;
    }
    memcpy(a1, a2, v8);
    int v9 = *(void (**)(void *, const void *, uint64_t))(v5 + 32);
  }
  else
  {
    int v9 = *(void (**)(void *, const void *, uint64_t))(v5 + 32);
    v9(a1, a2, AssociatedTypeWitness);
    (*(void (**)(void *, void, uint64_t, uint64_t))(v5 + 56))(a1, 0, 1, AssociatedTypeWitness);
    int v6 = *(_DWORD *)(v5 + 84);
    uint64_t v7 = *(void *)(v5 + 64);
  }
  if (v6) {
    uint64_t v10 = v7;
  }
  else {
    uint64_t v10 = v7 + 1;
  }
  v9((void *)(((unint64_t)a1 + v10 + *(unsigned __int8 *)(v5 + 80)) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80)), (const void *)(((unint64_t)a2 + v10 + *(unsigned __int8 *)(v5 + 80)) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80)), AssociatedTypeWitness);
  return a1;
}

void *assignWithTake for DefaultSearcherState(void *a1, void *a2)
{
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v5 = *(void *)(AssociatedTypeWitness - 8);
  int v6 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v5 + 48);
  int v7 = v6(a1, 1, AssociatedTypeWitness);
  int v8 = v6(a2, 1, AssociatedTypeWitness);
  if (v7)
  {
    if (!v8)
    {
      (*(void (**)(void *, void *, uint64_t))(v5 + 32))(a1, a2, AssociatedTypeWitness);
      (*(void (**)(void *, void, uint64_t, uint64_t))(v5 + 56))(a1, 0, 1, AssociatedTypeWitness);
      goto LABEL_12;
    }
    int v9 = *(_DWORD *)(v5 + 84);
    size_t v10 = *(void *)(v5 + 64);
  }
  else
  {
    if (!v8)
    {
      (*(void (**)(void *, void *, uint64_t))(v5 + 40))(a1, a2, AssociatedTypeWitness);
      goto LABEL_12;
    }
    (*(void (**)(void *, uint64_t))(v5 + 8))(a1, AssociatedTypeWitness);
    int v9 = *(_DWORD *)(v5 + 84);
    size_t v10 = *(void *)(v5 + 64);
  }
  if (v9) {
    size_t v11 = v10;
  }
  else {
    size_t v11 = v10 + 1;
  }
  memcpy(a1, a2, v11);
LABEL_12:
  uint64_t v14 = *(void (**)(unint64_t, unint64_t, uint64_t))(v5 + 40);
  uint64_t v13 = v5 + 40;
  uint64_t v12 = v14;
  if (*(_DWORD *)(v13 + 44)) {
    uint64_t v15 = *(void *)(v13 + 24);
  }
  else {
    uint64_t v15 = *(void *)(v13 + 24) + 1;
  }
  v12(((unint64_t)a1 + v15 + *(unsigned __int8 *)(v13 + 40)) & ~(unint64_t)*(unsigned __int8 *)(v13 + 40), ((unint64_t)a2 + v15 + *(unsigned __int8 *)(v13 + 40)) & ~(unint64_t)*(unsigned __int8 *)(v13 + 40), AssociatedTypeWitness);
  return a1;
}

uint64_t getEnumTagSinglePayload for DefaultSearcherState(unsigned __int16 *a1, unsigned int a2)
{
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v5 = *(void *)(AssociatedTypeWitness - 8);
  unsigned int v6 = *(_DWORD *)(v5 + 84);
  unsigned int v7 = v6 - 1;
  if (!v6) {
    unsigned int v7 = 0;
  }
  uint64_t v8 = *(void *)(*(void *)(AssociatedTypeWitness - 8) + 64);
  uint64_t v9 = *(unsigned __int8 *)(v5 + 80);
  uint64_t v10 = v8 + v9;
  if (v6) {
    uint64_t v11 = v8 + v9;
  }
  else {
    uint64_t v11 = v10 + 1;
  }
  if (!a2) {
    return 0;
  }
  if (a2 <= v6) {
    goto LABEL_26;
  }
  uint64_t v12 = (v11 & ~v9) + v8;
  char v13 = 8 * v12;
  if (v12 <= 3)
  {
    unsigned int v15 = ((a2 - v6 + ~(-1 << v13)) >> v13) + 1;
    if (HIWORD(v15))
    {
      int v14 = *(_DWORD *)((char *)a1 + v12);
      if (!v14) {
        goto LABEL_26;
      }
      goto LABEL_16;
    }
    if (v15 > 0xFF)
    {
      int v14 = *(unsigned __int16 *)((char *)a1 + v12);
      if (!*(unsigned __int16 *)((char *)a1 + v12)) {
        goto LABEL_26;
      }
      goto LABEL_16;
    }
    if (v15 < 2)
    {
LABEL_26:
      if (v6)
      {
        if (v7 == v6)
        {
          unsigned int v19 = (*(uint64_t (**)(unsigned __int16 *))(v5 + 48))(a1);
          if (v19 >= 2) {
            return v19 - 1;
          }
          else {
            return 0;
          }
        }
        else
        {
          uint64_t v21 = *(uint64_t (**)(unint64_t))(v5 + 48);
          return v21(((unint64_t)a1 + v10) & ~v9);
        }
      }
      return 0;
    }
  }
  int v14 = *((unsigned __int8 *)a1 + v12);
  if (!*((unsigned char *)a1 + v12)) {
    goto LABEL_26;
  }
LABEL_16:
  int v16 = (v14 - 1) << v13;
  if (v12 > 3) {
    int v16 = 0;
  }
  if (v12)
  {
    if (v12 <= 3) {
      int v17 = v12;
    }
    else {
      int v17 = 4;
    }
    switch(v17)
    {
      case 2:
        int v18 = *a1;
        break;
      case 3:
        int v18 = *a1 | (*((unsigned __int8 *)a1 + 2) << 16);
        break;
      case 4:
        int v18 = *(_DWORD *)a1;
        break;
      default:
        int v18 = *(unsigned __int8 *)a1;
        break;
    }
  }
  else
  {
    int v18 = 0;
  }
  return v6 + (v18 | v16) + 1;
}

void storeEnumTagSinglePayload for DefaultSearcherState(unsigned char *a1, uint64_t a2, unsigned int a3)
{
  int v6 = 0;
  uint64_t v7 = *(void *)(swift_getAssociatedTypeWitness() - 8);
  unsigned int v8 = *(_DWORD *)(v7 + 84);
  unsigned int v9 = v8 - 1;
  if (!v8) {
    unsigned int v9 = 0;
  }
  uint64_t v10 = *(void *)(v7 + 64);
  if (v8) {
    uint64_t v11 = *(void *)(v7 + 64);
  }
  else {
    uint64_t v11 = v10 + 1;
  }
  uint64_t v12 = *(unsigned __int8 *)(v7 + 80);
  uint64_t v13 = v11 + v12;
  size_t v14 = (v13 & ~v12) + v10;
  if (a3 <= v8) {
    goto LABEL_14;
  }
  if (v14 <= 3)
  {
    unsigned int v15 = ((a3 - v8 + ~(-1 << (8 * v14))) >> (8 * v14)) + 1;
    if (HIWORD(v15))
    {
      int v6 = 4;
      if (v8 >= a2) {
        goto LABEL_22;
      }
      goto LABEL_15;
    }
    if (v15 >= 0x100) {
      int v6 = 2;
    }
    else {
      int v6 = v15 > 1;
    }
LABEL_14:
    if (v8 >= a2) {
      goto LABEL_22;
    }
    goto LABEL_15;
  }
  int v6 = 1;
  if (v8 >= a2)
  {
LABEL_22:
    uint64_t v19 = ~v12;
    switch(v6)
    {
      case 1:
        a1[v14] = 0;
        if (!a2) {
          return;
        }
        goto LABEL_27;
      case 2:
        *(_WORD *)&a1[v14] = 0;
        if (!a2) {
          return;
        }
        goto LABEL_27;
      case 3:
        goto LABEL_42;
      case 4:
        *(_DWORD *)&a1[v14] = 0;
        goto LABEL_26;
      default:
LABEL_26:
        if (a2)
        {
LABEL_27:
          if (v9 == v8)
          {
            uint64_t v20 = (a2 + 1);
            uint64_t v21 = *(void (**)(unsigned char *, uint64_t))(v7 + 56);
            uint64_t v22 = a1;
          }
          else
          {
            uint64_t v22 = (unsigned char *)((unint64_t)&a1[v13] & v19);
            uint64_t v21 = *(void (**)(unsigned char *, uint64_t))(v7 + 56);
            uint64_t v20 = a2;
          }
          v21(v22, v20);
        }
        break;
    }
    return;
  }
LABEL_15:
  unsigned int v16 = ~v8 + a2;
  if (v14 < 4)
  {
    int v17 = (v16 >> (8 * v14)) + 1;
    if (v14)
    {
      int v18 = v16 & ~(-1 << (8 * v14));
      bzero(a1, v14);
      if (v14 == 3)
      {
        *(_WORD *)a1 = v18;
        a1[2] = BYTE2(v18);
      }
      else if (v14 == 2)
      {
        *(_WORD *)a1 = v18;
      }
      else
      {
        *a1 = v18;
      }
    }
  }
  else
  {
    bzero(a1, v14);
    *(_DWORD *)a1 = v16;
    int v17 = 1;
  }
  switch(v6)
  {
    case 1:
      a1[v14] = v17;
      break;
    case 2:
      *(_WORD *)&a1[v14] = v17;
      break;
    case 3:
LABEL_42:
      __break(1u);
      JUMPOUT(0x209F8B44CLL);
    case 4:
      *(_DWORD *)&a1[v14] = v17;
      break;
    default:
      return;
  }
}

uint64_t type metadata accessor for DefaultSearcherState()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t type metadata accessor for DefaultSearcherState.Position()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t type metadata completion function for DefaultSearcherState.Position()
{
  uint64_t result = swift_getAssociatedTypeWitness();
  if (v1 <= 0x3F)
  {
    swift_initEnumMetadataSinglePayload();
    return 0;
  }
  return result;
}

uint64_t *initializeBufferWithCopyOfBuffer for DefaultSearcherState.Position(uint64_t *a1, uint64_t *a2)
{
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v5 = *(void *)(AssociatedTypeWitness - 8);
  if (*(_DWORD *)(v5 + 84)) {
    size_t v6 = *(void *)(v5 + 64);
  }
  else {
    size_t v6 = *(void *)(v5 + 64) + 1;
  }
  uint64_t v7 = *(_DWORD *)(v5 + 80);
  if (v7 > 7 || (*(_DWORD *)(v5 + 80) & 0x100000) != 0 || v6 > 0x18)
  {
    uint64_t v10 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v10 + ((v7 + 16) & ~v7));
    swift_retain();
  }
  else
  {
    uint64_t v11 = AssociatedTypeWitness;
    if ((*(unsigned int (**)(uint64_t *, uint64_t, uint64_t))(v5 + 48))(a2, 1, AssociatedTypeWitness))
    {
      memcpy(a1, a2, v6);
    }
    else
    {
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(v5 + 16))(a1, a2, v11);
      (*(void (**)(uint64_t *, void, uint64_t, uint64_t))(v5 + 56))(a1, 0, 1, v11);
    }
  }
  return a1;
}

uint64_t destroy for DefaultSearcherState.Position(uint64_t a1)
{
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v5 = *(void *)(AssociatedTypeWitness - 8);
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v5 + 48))(a1, 1, AssociatedTypeWitness);
  if (!result)
  {
    int v4 = *(uint64_t (**)(uint64_t, uint64_t))(v5 + 8);
    return v4(a1, AssociatedTypeWitness);
  }
  return result;
}

void *initializeWithCopy for DefaultSearcherState.Position(void *a1, const void *a2)
{
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v5 = *(void *)(AssociatedTypeWitness - 8);
  if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v5 + 48))(a2, 1, AssociatedTypeWitness))
  {
    if (*(_DWORD *)(v5 + 84)) {
      size_t v6 = *(void *)(v5 + 64);
    }
    else {
      size_t v6 = *(void *)(v5 + 64) + 1;
    }
    memcpy(a1, a2, v6);
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v5 + 16))(a1, a2, AssociatedTypeWitness);
    (*(void (**)(void *, void, uint64_t, uint64_t))(v5 + 56))(a1, 0, 1, AssociatedTypeWitness);
  }
  return a1;
}

void *assignWithCopy for DefaultSearcherState.Position(void *a1, void *a2)
{
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v5 = *(void *)(AssociatedTypeWitness - 8);
  size_t v6 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v5 + 48);
  int v7 = v6(a1, 1, AssociatedTypeWitness);
  int v8 = v6(a2, 1, AssociatedTypeWitness);
  if (v7)
  {
    if (!v8)
    {
      (*(void (**)(void *, void *, uint64_t))(v5 + 16))(a1, a2, AssociatedTypeWitness);
      (*(void (**)(void *, void, uint64_t, uint64_t))(v5 + 56))(a1, 0, 1, AssociatedTypeWitness);
      return a1;
    }
    int v9 = *(_DWORD *)(v5 + 84);
    size_t v10 = *(void *)(v5 + 64);
  }
  else
  {
    if (!v8)
    {
      (*(void (**)(void *, void *, uint64_t))(v5 + 24))(a1, a2, AssociatedTypeWitness);
      return a1;
    }
    uint64_t v12 = *(void (**)(void *, uint64_t))(v5 + 8);
    uint64_t v11 = v5 + 8;
    v12(a1, AssociatedTypeWitness);
    int v9 = *(_DWORD *)(v11 + 76);
    size_t v10 = *(void *)(v11 + 56);
  }
  if (v9) {
    size_t v13 = v10;
  }
  else {
    size_t v13 = v10 + 1;
  }
  memcpy(a1, a2, v13);
  return a1;
}

void *initializeWithTake for DefaultSearcherState.Position(void *a1, const void *a2)
{
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v5 = *(void *)(AssociatedTypeWitness - 8);
  if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v5 + 48))(a2, 1, AssociatedTypeWitness))
  {
    if (*(_DWORD *)(v5 + 84)) {
      size_t v6 = *(void *)(v5 + 64);
    }
    else {
      size_t v6 = *(void *)(v5 + 64) + 1;
    }
    memcpy(a1, a2, v6);
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v5 + 32))(a1, a2, AssociatedTypeWitness);
    (*(void (**)(void *, void, uint64_t, uint64_t))(v5 + 56))(a1, 0, 1, AssociatedTypeWitness);
  }
  return a1;
}

void *assignWithTake for DefaultSearcherState.Position(void *a1, void *a2)
{
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v5 = *(void *)(AssociatedTypeWitness - 8);
  size_t v6 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v5 + 48);
  int v7 = v6(a1, 1, AssociatedTypeWitness);
  int v8 = v6(a2, 1, AssociatedTypeWitness);
  if (v7)
  {
    if (!v8)
    {
      (*(void (**)(void *, void *, uint64_t))(v5 + 32))(a1, a2, AssociatedTypeWitness);
      (*(void (**)(void *, void, uint64_t, uint64_t))(v5 + 56))(a1, 0, 1, AssociatedTypeWitness);
      return a1;
    }
    int v9 = *(_DWORD *)(v5 + 84);
    size_t v10 = *(void *)(v5 + 64);
  }
  else
  {
    if (!v8)
    {
      (*(void (**)(void *, void *, uint64_t))(v5 + 40))(a1, a2, AssociatedTypeWitness);
      return a1;
    }
    uint64_t v12 = *(void (**)(void *, uint64_t))(v5 + 8);
    uint64_t v11 = v5 + 8;
    v12(a1, AssociatedTypeWitness);
    int v9 = *(_DWORD *)(v11 + 76);
    size_t v10 = *(void *)(v11 + 56);
  }
  if (v9) {
    size_t v13 = v10;
  }
  else {
    size_t v13 = v10 + 1;
  }
  memcpy(a1, a2, v13);
  return a1;
}

uint64_t getEnumTagSinglePayload for DefaultSearcherState.Position(unsigned __int16 *a1, unsigned int a2)
{
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v5 = *(void *)(AssociatedTypeWitness - 8);
  unsigned int v6 = *(_DWORD *)(v5 + 84);
  unsigned int v7 = v6 - 1;
  if (!v6) {
    unsigned int v7 = 0;
  }
  uint64_t v8 = *(void *)(*(void *)(AssociatedTypeWitness - 8) + 64);
  if (!v6) {
    ++v8;
  }
  if (!a2) {
    return 0;
  }
  if (a2 > v7)
  {
    char v9 = 8 * v8;
    if (v8 > 3) {
      goto LABEL_8;
    }
    unsigned int v11 = ((a2 - v7 + ~(-1 << v9)) >> v9) + 1;
    if (HIWORD(v11))
    {
      int v10 = *(_DWORD *)((char *)a1 + v8);
      if (v10) {
        goto LABEL_15;
      }
    }
    else
    {
      if (v11 <= 0xFF)
      {
        if (v11 < 2) {
          goto LABEL_23;
        }
LABEL_8:
        int v10 = *((unsigned __int8 *)a1 + v8);
        if (!*((unsigned char *)a1 + v8)) {
          goto LABEL_23;
        }
LABEL_15:
        int v12 = (v10 - 1) << v9;
        if (v8 > 3) {
          int v12 = 0;
        }
        if (v8)
        {
          if (v8 > 3) {
            LODWORD(v8) = 4;
          }
          switch((int)v8)
          {
            case 2:
              LODWORD(v8) = *a1;
              break;
            case 3:
              LODWORD(v8) = *a1 | (*((unsigned __int8 *)a1 + 2) << 16);
              break;
            case 4:
              LODWORD(v8) = *(_DWORD *)a1;
              break;
            default:
              LODWORD(v8) = *(unsigned __int8 *)a1;
              break;
          }
        }
        return v7 + (v8 | v12) + 1;
      }
      int v10 = *(unsigned __int16 *)((char *)a1 + v8);
      if (*(unsigned __int16 *)((char *)a1 + v8)) {
        goto LABEL_15;
      }
    }
  }
LABEL_23:
  if (v6 < 2) {
    return 0;
  }
  unsigned int v14 = (*(uint64_t (**)(unsigned __int16 *))(v5 + 48))(a1);
  if (v14 >= 2) {
    return v14 - 1;
  }
  else {
    return 0;
  }
}

void storeEnumTagSinglePayload for DefaultSearcherState.Position(unsigned char *a1, unsigned int a2, unsigned int a3)
{
  int v6 = 0;
  uint64_t v7 = *(void *)(swift_getAssociatedTypeWitness() - 8);
  unsigned int v8 = *(_DWORD *)(v7 + 84);
  unsigned int v9 = v8 - 1;
  if (v8)
  {
    size_t v10 = *(void *)(v7 + 64);
  }
  else
  {
    unsigned int v9 = 0;
    size_t v10 = *(void *)(v7 + 64) + 1;
  }
  if (a3 <= v9) {
    goto LABEL_12;
  }
  if (v10 <= 3)
  {
    unsigned int v11 = ((a3 - v9 + ~(-1 << (8 * v10))) >> (8 * v10)) + 1;
    if (HIWORD(v11))
    {
      int v6 = 4;
      if (v9 >= a2) {
        goto LABEL_20;
      }
      goto LABEL_13;
    }
    if (v11 >= 0x100) {
      int v6 = 2;
    }
    else {
      int v6 = v11 > 1;
    }
LABEL_12:
    if (v9 >= a2) {
      goto LABEL_20;
    }
    goto LABEL_13;
  }
  int v6 = 1;
  if (v9 >= a2)
  {
LABEL_20:
    switch(v6)
    {
      case 1:
        a1[v10] = 0;
        if (!a2) {
          return;
        }
        goto LABEL_25;
      case 2:
        *(_WORD *)&a1[v10] = 0;
        if (!a2) {
          return;
        }
        goto LABEL_25;
      case 3:
        goto LABEL_38;
      case 4:
        *(_DWORD *)&a1[v10] = 0;
        goto LABEL_24;
      default:
LABEL_24:
        if (a2)
        {
LABEL_25:
          if (v8 >= 2)
          {
            unsigned int v15 = *(void (**)(unsigned char *, void))(v7 + 56);
            v15(a1, a2 + 1);
          }
        }
        break;
    }
    return;
  }
LABEL_13:
  unsigned int v12 = ~v9 + a2;
  if (v10 < 4)
  {
    int v13 = (v12 >> (8 * v10)) + 1;
    if (v10)
    {
      int v14 = v12 & ~(-1 << (8 * v10));
      bzero(a1, v10);
      if (v10 == 3)
      {
        *(_WORD *)a1 = v14;
        a1[2] = BYTE2(v14);
      }
      else if (v10 == 2)
      {
        *(_WORD *)a1 = v14;
      }
      else
      {
        *a1 = v14;
      }
    }
  }
  else
  {
    bzero(a1, v10);
    *(_DWORD *)a1 = v12;
    int v13 = 1;
  }
  switch(v6)
  {
    case 1:
      a1[v10] = v13;
      break;
    case 2:
      *(_WORD *)&a1[v10] = v13;
      break;
    case 3:
LABEL_38:
      __break(1u);
      JUMPOUT(0x209F8C064);
    case 4:
      *(_DWORD *)&a1[v10] = v13;
      break;
    default:
      return;
  }
}

uint64_t getEnumTag for DefaultSearcherState.Position(uint64_t a1)
{
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v3 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(AssociatedTypeWitness - 8) + 48);

  return v3(a1, 1, AssociatedTypeWitness);
}

uint64_t destructiveInjectEnumTag for DefaultSearcherState.Position(uint64_t a1, uint64_t a2)
{
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v5 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(AssociatedTypeWitness - 8) + 56);

  return v5(a1, a2, 1, AssociatedTypeWitness);
}

void *initializeBufferWithCopyOfBuffer for DSLTree.Node(void *a1, void *a2)
{
  *a1 = *a2;
  swift_retain();
  return a1;
}

uint64_t destroy for DSLTree.Node()
{
  return swift_release();
}

void *assignWithTake for DSLTree.Node(void *a1, void *a2)
{
  *a1 = *a2;
  swift_release();
  return a1;
}

uint64_t getEnumTag for DSLTree.Node(void *a1)
{
  unsigned int v1 = (*a1 >> 59) & 0x1E | (*a1 >> 2) & 1;
  if (v1 <= 0xF) {
    return v1;
  }
  else {
    return (*a1 >> 3) + 16;
  }
}

void *destructiveProjectEnumData for DSLTree.Node(void *result)
{
  *result &= 0xFFFFFFFFFFFFFFBuLL;
  return result;
}

void *destructiveInjectEnumTag for DSLTree.Node(void *result, uint64_t a2)
{
  if (a2 < 0x10) {
    *uint64_t result = (a2 << 59) & 0x7000000000000000 | (4 * (a2 & 1)) | *result & 0xFFFFFFFFFFFFFF8;
  }
  else {
    *uint64_t result = (8 * (a2 - 16)) | 0x8000000000000000;
  }
  return result;
}

ValueMetadata *type metadata accessor for DSLTree.Node()
{
  return &type metadata for DSLTree.Node;
}

uint64_t *initializeBufferWithCopyOfBuffer for DSLTree.QuantificationKind(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v5 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v8 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v8 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    uint64_t v6 = *(void *)(a3 - 8);
    if (swift_getEnumCaseMultiPayload() > 1)
    {
      memcpy(a1, a2, *(void *)(v6 + 64));
    }
    else
    {
      uint64_t v7 = type metadata accessor for AST.Quantification.Kind();
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(void *)(v7 - 8) + 16))(a1, a2, v7);
      swift_storeEnumTagMultiPayload();
    }
  }
  return a1;
}

uint64_t destroy for DSLTree.QuantificationKind(uint64_t a1)
{
  uint64_t result = swift_getEnumCaseMultiPayload();
  if (result <= 1)
  {
    uint64_t v3 = type metadata accessor for AST.Quantification.Kind();
    int v4 = *(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8);
    return v4(a1, v3);
  }
  return result;
}

void *initializeWithCopy for DSLTree.QuantificationKind(void *a1, const void *a2, uint64_t a3)
{
  if (swift_getEnumCaseMultiPayload() > 1)
  {
    memcpy(a1, a2, *(void *)(*(void *)(a3 - 8) + 64));
  }
  else
  {
    uint64_t v6 = type metadata accessor for AST.Quantification.Kind();
    (*(void (**)(void *, const void *, uint64_t))(*(void *)(v6 - 8) + 16))(a1, a2, v6);
    swift_storeEnumTagMultiPayload();
  }
  return a1;
}

void *assignWithCopy for DSLTree.QuantificationKind(void *a1, const void *a2, uint64_t a3)
{
  if (a1 != a2)
  {
    outlined destroy of MEProgram((uint64_t)a1, type metadata accessor for DSLTree.QuantificationKind);
    if (swift_getEnumCaseMultiPayload() > 1)
    {
      memcpy(a1, a2, *(void *)(*(void *)(a3 - 8) + 64));
    }
    else
    {
      uint64_t v6 = type metadata accessor for AST.Quantification.Kind();
      (*(void (**)(void *, const void *, uint64_t))(*(void *)(v6 - 8) + 16))(a1, a2, v6);
      swift_storeEnumTagMultiPayload();
    }
  }
  return a1;
}

void *initializeWithTake for DSLTree.QuantificationKind(void *a1, const void *a2, uint64_t a3)
{
  if (swift_getEnumCaseMultiPayload() > 1)
  {
    memcpy(a1, a2, *(void *)(*(void *)(a3 - 8) + 64));
  }
  else
  {
    uint64_t v6 = type metadata accessor for AST.Quantification.Kind();
    (*(void (**)(void *, const void *, uint64_t))(*(void *)(v6 - 8) + 32))(a1, a2, v6);
    swift_storeEnumTagMultiPayload();
  }
  return a1;
}

void *assignWithTake for DSLTree.QuantificationKind(void *a1, const void *a2, uint64_t a3)
{
  if (a1 != a2)
  {
    outlined destroy of MEProgram((uint64_t)a1, type metadata accessor for DSLTree.QuantificationKind);
    if (swift_getEnumCaseMultiPayload() > 1)
    {
      memcpy(a1, a2, *(void *)(*(void *)(a3 - 8) + 64));
    }
    else
    {
      uint64_t v6 = type metadata accessor for AST.Quantification.Kind();
      (*(void (**)(void *, const void *, uint64_t))(*(void *)(v6 - 8) + 32))(a1, a2, v6);
      swift_storeEnumTagMultiPayload();
    }
  }
  return a1;
}

uint64_t getEnumTagSinglePayload for DSLTree.CustomCharacterClass.Member(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(*(void *)(a3 - 8) + 48))();
}

uint64_t storeEnumTagSinglePayload for DSLTree.CustomCharacterClass.Member(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(void))(*(void *)(a4 - 8) + 56))();
}

uint64_t type metadata completion function for DSLTree.QuantificationKind()
{
  uint64_t result = type metadata accessor for AST.Quantification.Kind();
  if (v1 <= 0x3F)
  {
    swift_initEnumMetadataMultiPayload();
    return 0;
  }
  return result;
}

uint64_t initializeBufferWithCopyOfBuffer for MEProgram(uint64_t a1, uint64_t *a2, int *a3)
{
  int v3 = *(_DWORD *)(*((void *)a3 - 1) + 80);
  uint64_t v4 = *a2;
  *(void *)a1 = *a2;
  if ((v3 & 0x20000) != 0)
  {
    uint64_t v7 = v4 + ((v3 + 16) & ~(unint64_t)v3);
    swift_retain();
  }
  else
  {
    uint64_t v7 = a1;
    uint64_t v8 = a2[2];
    *(void *)(a1 + 8) = a2[1];
    *(void *)(a1 + 16) = v8;
    uint64_t v9 = a2[4];
    *(void *)(a1 + 24) = a2[3];
    *(void *)(a1 + 32) = v9;
    uint64_t v10 = a2[6];
    *(void *)(a1 + 40) = a2[5];
    *(void *)(a1 + 48) = v10;
    *(_OWORD *)(a1 + 136) = *(_OWORD *)(a2 + 17);
    *(_OWORD *)(a1 + 152) = *(_OWORD *)(a2 + 19);
    *(_OWORD *)(a1 + 168) = *(_OWORD *)(a2 + 21);
    *(void *)(a1 + 184) = a2[23];
    *(_OWORD *)(a1 + 72) = *(_OWORD *)(a2 + 9);
    *(_OWORD *)(a1 + 88) = *(_OWORD *)(a2 + 11);
    *(_OWORD *)(a1 + 104) = *(_OWORD *)(a2 + 13);
    *(_OWORD *)(a1 + 120) = *(_OWORD *)(a2 + 15);
    long long v11 = *(_OWORD *)(a2 + 7);
    *(_WORD *)(a1 + 192) = *((_WORD *)a2 + 96);
    uint64_t v12 = a3[14];
    uint64_t v17 = (uint64_t)a2 + v12;
    uint64_t v18 = a1 + v12;
    *(_OWORD *)(a1 + 56) = v11;
    uint64_t v13 = type metadata accessor for CaptureList();
    unsigned int v16 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v13 - 8) + 16);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v16(v18, v17, v13);
    uint64_t v14 = a3[16];
    *(void *)(v7 + a3[15]) = *(uint64_t *)((char *)a2 + a3[15]);
    *(void *)(v7 + v14) = *(uint64_t *)((char *)a2 + v14);
    *(unsigned char *)(v7 + a3[17]) = *((unsigned char *)a2 + a3[17]);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
  }
  return v7;
}

uint64_t destroy for MEProgram(uint64_t a1, uint64_t a2)
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v4 = a1 + *(int *)(a2 + 56);
  uint64_t v5 = type metadata accessor for CaptureList();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v5 - 8) + 8))(v4, v5);
  swift_bridgeObjectRelease();

  return swift_bridgeObjectRelease();
}

uint64_t initializeWithCopy for MEProgram(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v6;
  uint64_t v7 = *(void *)(a2 + 24);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = v7;
  uint64_t v8 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v8;
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
  long long v9 = *(_OWORD *)(a2 + 72);
  long long v10 = *(_OWORD *)(a2 + 88);
  long long v11 = *(_OWORD *)(a2 + 104);
  *(_OWORD *)(a1 + 120) = *(_OWORD *)(a2 + 120);
  *(_OWORD *)(a1 + 104) = v11;
  *(_OWORD *)(a1 + 88) = v10;
  *(_OWORD *)(a1 + 72) = v9;
  long long v12 = *(_OWORD *)(a2 + 136);
  long long v13 = *(_OWORD *)(a2 + 152);
  long long v14 = *(_OWORD *)(a2 + 168);
  *(void *)(a1 + 184) = *(void *)(a2 + 184);
  *(_OWORD *)(a1 + 168) = v14;
  *(_OWORD *)(a1 + 152) = v13;
  *(_WORD *)(a1 + 192) = *(_WORD *)(a2 + 192);
  uint64_t v15 = a3[14];
  uint64_t v20 = a2 + v15;
  uint64_t v21 = a1 + v15;
  *(_OWORD *)(a1 + 136) = v12;
  uint64_t v16 = type metadata accessor for CaptureList();
  uint64_t v19 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v16 - 8) + 16);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v19(v21, v20, v16);
  uint64_t v17 = a3[16];
  *(void *)(a1 + a3[15]) = *(void *)(a2 + a3[15]);
  *(void *)(a1 + v17) = *(void *)(a2 + v17);
  *(unsigned char *)(a1 + a3[17]) = *(unsigned char *)(a2 + a3[17]);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for MEProgram(uint64_t a1, uint64_t a2, int *a3)
{
  *(void *)a1 = *(void *)a2;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 56) = *(void *)(a2 + 56);
  *(void *)(a1 + 64) = *(void *)(a2 + 64);
  *(void *)(a1 + 72) = *(void *)(a2 + 72);
  *(void *)(a1 + 80) = *(void *)(a2 + 80);
  *(void *)(a1 + 88) = *(void *)(a2 + 88);
  *(void *)(a1 + 96) = *(void *)(a2 + 96);
  *(void *)(a1 + 104) = *(void *)(a2 + 104);
  *(void *)(a1 + 112) = *(void *)(a2 + 112);
  *(void *)(a1 + 120) = *(void *)(a2 + 120);
  *(void *)(a1 + 128) = *(void *)(a2 + 128);
  *(void *)(a1 + 136) = *(void *)(a2 + 136);
  *(void *)(a1 + 144) = *(void *)(a2 + 144);
  *(void *)(a1 + 152) = *(void *)(a2 + 152);
  *(void *)(a1 + 160) = *(void *)(a2 + 160);
  *(void *)(a1 + 168) = *(void *)(a2 + 168);
  *(void *)(a1 + 176) = *(void *)(a2 + 176);
  *(void *)(a1 + 184) = *(void *)(a2 + 184);
  *(unsigned char *)(a1 + 192) = *(unsigned char *)(a2 + 192);
  *(unsigned char *)(a1 + 193) = *(unsigned char *)(a2 + 193);
  uint64_t v6 = a3[14];
  uint64_t v7 = a1 + v6;
  uint64_t v8 = a2 + v6;
  uint64_t v9 = type metadata accessor for CaptureList();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v9 - 8) + 24))(v7, v8, v9);
  *(void *)(a1 + a3[15]) = *(void *)(a2 + a3[15]);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + a3[16]) = *(void *)(a2 + a3[16]);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(unsigned char *)(a1 + a3[17]) = *(unsigned char *)(a2 + a3[17]);
  return a1;
}

uint64_t initializeWithTake for MEProgram(uint64_t a1, uint64_t a2, int *a3)
{
  long long v6 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v6;
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  *(_OWORD *)(a1 + 136) = *(_OWORD *)(a2 + 136);
  *(_OWORD *)(a1 + 152) = *(_OWORD *)(a2 + 152);
  *(_OWORD *)(a1 + 168) = *(_OWORD *)(a2 + 168);
  *(void *)(a1 + 184) = *(void *)(a2 + 184);
  *(_OWORD *)(a1 + 72) = *(_OWORD *)(a2 + 72);
  *(_OWORD *)(a1 + 88) = *(_OWORD *)(a2 + 88);
  *(_OWORD *)(a1 + 104) = *(_OWORD *)(a2 + 104);
  *(_OWORD *)(a1 + 120) = *(_OWORD *)(a2 + 120);
  long long v7 = *(_OWORD *)(a2 + 56);
  *(_WORD *)(a1 + 192) = *(_WORD *)(a2 + 192);
  uint64_t v8 = a3[14];
  uint64_t v9 = a1 + v8;
  uint64_t v10 = a2 + v8;
  *(_OWORD *)(a1 + 56) = v7;
  uint64_t v11 = type metadata accessor for CaptureList();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v11 - 8) + 32))(v9, v10, v11);
  uint64_t v12 = a3[16];
  *(void *)(a1 + a3[15]) = *(void *)(a2 + a3[15]);
  *(void *)(a1 + v12) = *(void *)(a2 + v12);
  *(unsigned char *)(a1 + a3[17]) = *(unsigned char *)(a2 + a3[17]);
  return a1;
}

uint64_t assignWithTake for MEProgram(uint64_t a1, uint64_t a2, int *a3)
{
  *(void *)a1 = *(void *)a2;
  swift_bridgeObjectRelease();
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  swift_bridgeObjectRelease();
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  swift_bridgeObjectRelease();
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  swift_bridgeObjectRelease();
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  swift_bridgeObjectRelease();
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  swift_bridgeObjectRelease();
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
  *(_OWORD *)(a1 + 72) = *(_OWORD *)(a2 + 72);
  *(_OWORD *)(a1 + 88) = *(_OWORD *)(a2 + 88);
  *(_OWORD *)(a1 + 104) = *(_OWORD *)(a2 + 104);
  *(_OWORD *)(a1 + 120) = *(_OWORD *)(a2 + 120);
  *(_OWORD *)(a1 + 136) = *(_OWORD *)(a2 + 136);
  *(_OWORD *)(a1 + 152) = *(_OWORD *)(a2 + 152);
  long long v6 = *(_OWORD *)(a2 + 168);
  *(void *)(a1 + 184) = *(void *)(a2 + 184);
  *(unsigned char *)(a1 + 192) = *(unsigned char *)(a2 + 192);
  *(unsigned char *)(a1 + 193) = *(unsigned char *)(a2 + 193);
  uint64_t v7 = a3[14];
  uint64_t v8 = a1 + v7;
  uint64_t v9 = a2 + v7;
  *(_OWORD *)(a1 + 168) = v6;
  uint64_t v10 = type metadata accessor for CaptureList();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v10 - 8) + 40))(v8, v9, v10);
  *(void *)(a1 + a3[15]) = *(void *)(a2 + a3[15]);
  swift_bridgeObjectRelease();
  *(void *)(a1 + a3[16]) = *(void *)(a2 + a3[16]);
  swift_bridgeObjectRelease();
  *(unsigned char *)(a1 + a3[17]) = *(unsigned char *)(a2 + a3[17]);
  return a1;
}

uint64_t getEnumTagSinglePayload for MEProgram(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x270FA0340](a1, a2, a3, sub_209F8D264);
}

uint64_t sub_209F8D264(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  if (a2 == 0x7FFFFFFF)
  {
    uint64_t v4 = *a1;
    if ((unint64_t)*a1 >= 0xFFFFFFFF) {
      LODWORD(v4) = -1;
    }
    return (v4 + 1);
  }
  else
  {
    uint64_t v8 = type metadata accessor for CaptureList();
    uint64_t v9 = *(uint64_t (**)(char *, uint64_t, uint64_t))(*(void *)(v8 - 8) + 48);
    uint64_t v10 = v8;
    uint64_t v11 = (char *)a1 + *(int *)(a3 + 56);
    return v9(v11, a2, v10);
  }
}

uint64_t storeEnumTagSinglePayload for MEProgram(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x270FA0580](a1, a2, a3, a4, sub_209F8D328);
}

void *sub_209F8D328(void *result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *uint64_t result = (a2 - 1);
  }
  else
  {
    uint64_t v7 = type metadata accessor for CaptureList();
    uint64_t v8 = *(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 56);
    uint64_t v9 = v7;
    uint64_t v10 = (char *)v5 + *(int *)(a4 + 56);
    return (void *)v8(v10, a2, a2, v9);
  }
  return result;
}

uint64_t type metadata completion function for MEProgram()
{
  uint64_t result = type metadata accessor for CaptureList();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t initializeBufferWithCopyOfBuffer for RegexCompilationError(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  return initializeBufferWithCopyOfBuffer for RegexCompilationError(a1, a2, a3, (void (*)(void, uint64_t, uint64_t))outlined copy of RegexCompilationError);
}

uint64_t outlined copy of RegexCompilationError(uint64_t a1, uint64_t a2, char a3)
{
  if (a3 == 1) {
    return swift_bridgeObjectRetain();
  }
  return result;
}

uint64_t destroy for RegexCompilationError(uint64_t a1)
{
  return outlined consume of RegexCompilationError(*(void *)a1, *(void *)(a1 + 8), *(unsigned char *)(a1 + 16));
}

uint64_t outlined consume of RegexCompilationError(uint64_t a1, uint64_t a2, char a3)
{
  if (a3 == 1) {
    return swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t *assignWithCopy for RegexCompilationError(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  return assignWithCopy for RegexCompilationError(a1, a2, a3, (void (*)(void, uint64_t, uint64_t))outlined copy of RegexCompilationError, (void (*)(uint64_t, uint64_t, uint64_t))outlined consume of RegexCompilationError);
}

__n128 __swift_memcpy17_8(__n128 *a1, __n128 *a2)
{
  __n128 result = *a2;
  a1[1].n128_u8[0] = a2[1].n128_u8[0];
  *a1 = result;
  return result;
}

uint64_t *assignWithTake for RegexCompilationError(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  return assignWithTake for RegexCompilationError(a1, a2, a3, (void (*)(uint64_t, uint64_t, uint64_t))outlined consume of RegexCompilationError);
}

uint64_t getEnumTagSinglePayload for RegexCompilationError(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0xFE && *(unsigned char *)(a1 + 17)) {
    return (*(_DWORD *)a1 + 254);
  }
  unsigned int v3 = *(unsigned __int8 *)(a1 + 16);
  if (v3 <= 2) {
    int v4 = -1;
  }
  else {
    int v4 = v3 ^ 0xFF;
  }
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for RegexCompilationError(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFD)
  {
    *(unsigned char *)(result + 16) = 0;
    *(void *)__n128 result = a2 - 254;
    *(void *)(result + 8) = 0;
    if (a3 >= 0xFE) {
      *(unsigned char *)(result + 17) = 1;
    }
  }
  else
  {
    if (a3 >= 0xFE) {
      *(unsigned char *)(result + 17) = 0;
    }
    if (a2) {
      *(unsigned char *)(result + 16) = -(char)a2;
    }
  }
  return result;
}

uint64_t getEnumTag for RegexCompilationError(uint64_t a1)
{
  if (*(unsigned __int8 *)(a1 + 16) <= 1u) {
    return *(unsigned __int8 *)(a1 + 16);
  }
  else {
    return (*(_DWORD *)a1 + 2);
  }
}

uint64_t destructiveInjectEnumTag for RegexCompilationError(uint64_t result, unsigned int a2)
{
  if (a2 >= 2)
  {
    *(void *)__n128 result = a2 - 2;
    *(void *)(result + 8) = 0;
    LOBYTE(a2) = 2;
  }
  *(unsigned char *)(result + 16) = a2;
  return result;
}

ValueMetadata *type metadata accessor for RegexCompilationError()
{
  return &type metadata for RegexCompilationError;
}

uint64_t initializeBufferWithCopyOfBuffer for AnyRegexOutput.ElementRepresentation(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2 = *a2;
  *a1 = *a2;
  uint64_t v3 = v2 + 16;
  swift_retain();
  return v3;
}

uint64_t destroy for AnyRegexOutput.ElementRepresentation(uint64_t a1)
{
  if (*(void *)(a1 + 48) >= 2uLL) {
    __swift_destroy_boxed_opaque_existential_0(a1 + 24);
  }

  return swift_bridgeObjectRelease();
}

uint64_t initializeWithCopy for AnyRegexOutput.ElementRepresentation(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  int v4 = (_OWORD *)(a1 + 8);
  uint64_t v5 = (_OWORD *)(a2 + 8);
  uint64_t v6 = *(void *)(a2 + 48);
  if (v6 == 1)
  {
    long long v7 = *(_OWORD *)(a2 + 24);
    *int v4 = *v5;
    *(_OWORD *)(a1 + 24) = v7;
    *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
  }
  else
  {
    *int v4 = *v5;
    uint64_t v8 = (_OWORD *)(a1 + 24);
    uint64_t v9 = (_OWORD *)(a2 + 24);
    if (v6)
    {
      *(void *)(a1 + 48) = v6;
      (**(void (***)(_OWORD *, _OWORD *))(v6 - 8))(v8, v9);
    }
    else
    {
      long long v10 = *(_OWORD *)(a2 + 40);
      *uint64_t v8 = *v9;
      *(_OWORD *)(a1 + 40) = v10;
    }
  }
  uint64_t v11 = *(void *)(a2 + 64);
  *(void *)(a1 + 56) = *(void *)(a2 + 56);
  *(void *)(a1 + 64) = v11;
  *(void *)(a1 + 72) = *(void *)(a2 + 72);
  *(_WORD *)(a1 + 80) = *(_WORD *)(a2 + 80);
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for AnyRegexOutput.ElementRepresentation(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  int v4 = (long long *)(a1 + 8);
  uint64_t v5 = (long long *)(a2 + 8);
  uint64_t v6 = *(void *)(a1 + 48);
  uint64_t v7 = *(void *)(a2 + 48);
  if (v6 == 1)
  {
    if (v7 == 1)
    {
      long long v8 = *v5;
      long long v9 = *(_OWORD *)(a2 + 24);
      *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
LABEL_16:
      *int v4 = v8;
      v4[1] = v9;
      goto LABEL_17;
    }
    *int v4 = *v5;
    uint64_t v12 = (_OWORD *)(a1 + 24);
    long long v13 = (_OWORD *)(a2 + 24);
    uint64_t v14 = *(void *)(a2 + 48);
    if (v14)
    {
      *(void *)(a1 + 48) = v14;
      (**(void (***)(_OWORD *, _OWORD *))(v14 - 8))(v12, v13);
    }
    else
    {
      long long v17 = *(_OWORD *)(a2 + 40);
      *uint64_t v12 = *v13;
      *(_OWORD *)(a1 + 40) = v17;
    }
  }
  else
  {
    if (v7 != 1)
    {
      *(void *)(a1 + 8) = *(void *)(a2 + 8);
      *(void *)(a1 + 16) = *(void *)(a2 + 16);
      int v4 = (long long *)(a1 + 24);
      uint64_t v15 = (long long *)(a2 + 24);
      uint64_t v16 = *(void *)(a2 + 48);
      if (v6)
      {
        if (v16)
        {
          __swift_assign_boxed_opaque_existential_0((uint64_t *)(a1 + 24), (uint64_t *)(a2 + 24));
          goto LABEL_17;
        }
        __swift_destroy_boxed_opaque_existential_0(a1 + 24);
      }
      else if (v16)
      {
        *(void *)(a1 + 48) = v16;
        (**(void (***)(uint64_t, uint64_t))(v16 - 8))(a1 + 24, a2 + 24);
        goto LABEL_17;
      }
      long long v8 = *v15;
      long long v9 = *(_OWORD *)(a2 + 40);
      goto LABEL_16;
    }
    outlined destroy of (range: Range<String.Index>, value: Any?)?(a1 + 8, &demangling cache variable for type metadata for (range: Range<String.Index>, value: Any?));
    long long v11 = v5[1];
    long long v10 = v5[2];
    *int v4 = *v5;
    v4[1] = v11;
    v4[2] = v10;
  }
LABEL_17:
  *(void *)(a1 + 56) = *(void *)(a2 + 56);
  *(void *)(a1 + 64) = *(void *)(a2 + 64);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v18 = *(void *)(a2 + 72);
  *(unsigned char *)(a1 + 80) = *(unsigned char *)(a2 + 80);
  *(void *)(a1 + 72) = v18;
  *(unsigned char *)(a1 + 81) = *(unsigned char *)(a2 + 81);
  return a1;
}

__n128 __swift_memcpy82_8(uint64_t a1, uint64_t a2)
{
  long long v2 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v2;
  __n128 result = *(__n128 *)(a2 + 32);
  long long v4 = *(_OWORD *)(a2 + 48);
  long long v5 = *(_OWORD *)(a2 + 64);
  *(_WORD *)(a1 + 80) = *(_WORD *)(a2 + 80);
  *(_OWORD *)(a1 + 48) = v4;
  *(_OWORD *)(a1 + 64) = v5;
  *(__n128 *)(a1 + 32) = result;
  return result;
}

uint64_t assignWithTake for AnyRegexOutput.ElementRepresentation(uint64_t a1, uint64_t a2)
{
  long long v4 = (_OWORD *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  long long v5 = (_OWORD *)(a1 + 8);
  uint64_t v6 = *(void *)(a1 + 48);
  if (v6 == 1) {
    goto LABEL_4;
  }
  if (*(void *)(a2 + 48) == 1)
  {
    outlined destroy of (range: Range<String.Index>, value: Any?)?(a1 + 8, &demangling cache variable for type metadata for (range: Range<String.Index>, value: Any?));
LABEL_4:
    long long v7 = v4[1];
    *long long v5 = *v4;
    v5[1] = v7;
    _OWORD v5[2] = v4[2];
    goto LABEL_8;
  }
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  long long v8 = (_OWORD *)(a1 + 24);
  long long v9 = (_OWORD *)(a2 + 24);
  if (v6) {
    __swift_destroy_boxed_opaque_existential_0(a1 + 24);
  }
  long long v10 = *(_OWORD *)(a2 + 40);
  *long long v8 = *v9;
  *(_OWORD *)(a1 + 40) = v10;
LABEL_8:
  uint64_t v11 = *(void *)(a2 + 64);
  *(void *)(a1 + 56) = *(void *)(a2 + 56);
  *(void *)(a1 + 64) = v11;
  swift_bridgeObjectRelease();
  *(void *)(a1 + 72) = *(void *)(a2 + 72);
  *(unsigned char *)(a1 + 80) = *(unsigned char *)(a2 + 80);
  *(unsigned char *)(a1 + 81) = *(unsigned char *)(a2 + 81);
  return a1;
}

uint64_t getEnumTagSinglePayload for AnyRegexOutput.ElementRepresentation(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0x7FFFFFFF && *(unsigned char *)(a1 + 82)) {
    return (*(_DWORD *)a1 + 0x7FFFFFFF);
  }
  unint64_t v3 = *(void *)(a1 + 64);
  if (v3 >= 0xFFFFFFFF) {
    LODWORD(v3) = -1;
  }
  int v4 = v3 - 1;
  if (v4 < 0) {
    int v4 = -1;
  }
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for AnyRegexOutput.ElementRepresentation(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFE)
  {
    *(void *)(result + 72) = 0;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_WORD *)(result + 80) = 0;
    *(void *)__n128 result = a2 - 0x7FFFFFFF;
    if (a3 >= 0x7FFFFFFF) {
      *(unsigned char *)(result + 82) = 1;
    }
  }
  else
  {
    if (a3 >= 0x7FFFFFFF) {
      *(unsigned char *)(result + 82) = 0;
    }
    if (a2) {
      *(void *)(result + 64) = a2;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for AnyRegexOutput.ElementRepresentation()
{
  return &type metadata for AnyRegexOutput.ElementRepresentation;
}

ValueMetadata *type metadata accessor for MatchingOptions()
{
  return &type metadata for MatchingOptions;
}

void *type metadata accessor for MatchingOptions.Representation()
{
  return &unk_26BE078B0;
}

uint64_t type metadata instantiation function for FixedPatternConsumer(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x270FA01A8](a1, a2, a3, 56);
}

__n128 __swift_memcpy113_8(uint64_t a1, long long *a2)
{
  long long v2 = *a2;
  long long v3 = a2[1];
  long long v4 = a2[3];
  *(_OWORD *)(a1 + 32) = a2[2];
  *(_OWORD *)(a1 + 48) = v4;
  *(_OWORD *)a1 = v2;
  *(_OWORD *)(a1 + 16) = v3;
  __n128 result = (__n128)a2[4];
  long long v6 = a2[5];
  long long v7 = a2[6];
  *(unsigned char *)(a1 + 112) = *((unsigned char *)a2 + 112);
  *(_OWORD *)(a1 + 80) = v6;
  *(_OWORD *)(a1 + 96) = v7;
  *(__n128 *)(a1 + 64) = result;
  return result;
}

uint64_t type metadata instantiation function for RegexMatchesCollection(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x270FA01A8](a1, a2, a3, 40);
}

__n128 __swift_memcpy96_8(uint64_t a1, uint64_t a2)
{
  long long v2 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v2;
  __n128 result = *(__n128 *)(a2 + 32);
  long long v4 = *(_OWORD *)(a2 + 48);
  long long v5 = *(_OWORD *)(a2 + 80);
  *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 80) = v5;
  *(__n128 *)(a1 + 32) = result;
  *(_OWORD *)(a1 + 48) = v4;
  return result;
}

uint64_t type metadata completion function for SplitCollection()
{
  uint64_t result = type metadata accessor for RangesCollection();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t *initializeBufferWithCopyOfBuffer for SplitCollection(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v3 = *(void *)(a3 + 16);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v5 = *(void *)(AssociatedTypeWitness - 8);
  uint64_t v6 = *(void *)(v3 - 8);
  int v50 = *(_DWORD *)(v6 + 80);
  uint64_t v47 = v50;
  uint64_t v48 = *(void *)(v5 + 64) + v50;
  uint64_t v49 = v6;
  uint64_t v7 = *(void *)(v6 + 64);
  swift_getAssociatedConformanceWitness();
  uint64_t v46 = swift_getAssociatedTypeWitness();
  uint64_t v8 = *(void *)(v46 - 8);
  int v9 = *(_DWORD *)(v8 + 80);
  uint64_t v10 = swift_getAssociatedTypeWitness();
  uint64_t v11 = v5;
  int v12 = *(_DWORD *)(*(void *)(v10 - 8) + 80);
  uint64_t v13 = v12;
  unint64_t v14 = v12 | (unint64_t)v9;
  uint64_t v15 = *(void *)(v8 + 64);
  uint64_t v16 = v15 + v9;
  unint64_t v17 = v16 & ~(unint64_t)v9;
  uint64_t v18 = v17 + v15;
  if (*(_DWORD *)(v8 + 84)) {
    size_t v19 = v17 + v15;
  }
  else {
    size_t v19 = v18 + 1;
  }
  unint64_t v20 = (((v12 | (unint64_t)v9)
        + v7
        + (v48 & ~(unint64_t)v50)) & ~(v12 | (unint64_t)v9))
      + *(void *)(*(void *)(v10 - 8) + 64)
      + ((v19 + v12) & ~(unint64_t)v12);
  int v21 = *(_DWORD *)(v11 + 80) | v50;
  int v22 = (v21 | v12 | v9) & 0x100000;
  if ((v14 | v21 & 0xF8) <= 7 && v22 == 0 && ((v20 + 7) & 0xFFFFFFFFFFFFFFF8) + 9 <= 0x18)
  {
    uint64_t v41 = v16;
    uint64_t v42 = v18;
    size_t __n = v19;
    uint64_t v44 = *(void *)(v10 - 8);
    unint64_t v45 = v20;
    uint64_t v51 = v10;
    uint64_t v27 = *(unsigned int *)(v8 + 84);
    unint64_t v28 = ~v14;
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(v11 + 16))(a1, a2, AssociatedTypeWitness);
    (*(void (**)(unint64_t, unint64_t, uint64_t))(v49 + 16))(((unint64_t)a1 + v48) & ~v47, ((unint64_t)a2 + v48) & ~v47, v3);
    uint64_t v29 = (unsigned char *)(((((unint64_t)a1 + v48) & ~v47) + v7 + v14) & v28);
    uint64_t v30 = (unsigned __int16 *)(((((unint64_t)a2 + v48) & ~v47) + v7 + v14) & v28);
    uint64_t v31 = v27;
    uint64_t v26 = a1;
    if (v31)
    {
      uint64_t v32 = v46;
      if (!(*(unsigned int (**)(unsigned __int16 *, uint64_t, uint64_t))(v8 + 48))(v30, v31, v46))
      {
LABEL_31:
        uint64_t v37 = *(void (**)(unsigned char *, unsigned __int16 *, uint64_t))(v8 + 16);
        v37(v29, v30, v32);
        v37((unsigned char *)((unint64_t)&v29[v41] & ~(unint64_t)v9), (unsigned __int16 *)(((unint64_t)v30 + v41) & ~(unint64_t)v9), v32);
        size_t v36 = __n;
        if (!v31) {
          v29[v42] = 0;
        }
        goto LABEL_33;
      }
    }
    else
    {
      uint64_t v32 = v46;
      if (!*((unsigned char *)v30 + v42)) {
        goto LABEL_31;
      }
      int v33 = (*((unsigned __int8 *)v30 + v42) - 1) << (8 * v42);
      if (v42 > 3) {
        int v33 = 0;
      }
      if (v42)
      {
        int v34 = v42 <= 3 ? v42 : 4;
        switch(v34)
        {
          case 2:
            int v35 = *v30;
            break;
          case 3:
            int v35 = *v30 | (*((unsigned __int8 *)v30 + 2) << 16);
            break;
          case 4:
            int v35 = *(_DWORD *)v30;
            break;
          default:
            int v35 = *(unsigned __int8 *)v30;
            break;
        }
      }
      else
      {
        int v35 = 0;
      }
      if ((v35 | v33) == 0xFFFFFFFF) {
        goto LABEL_31;
      }
    }
    size_t v36 = __n;
    memcpy(v29, v30, __n);
LABEL_33:
    (*(void (**)(unint64_t, unint64_t, uint64_t))(v44 + 16))((unint64_t)&v29[v13 + v36] & ~v13, ((unint64_t)v30 + v13 + v36) & ~v13, v51);
    unint64_t v38 = ((unint64_t)a1 + v45 + 7) & 0xFFFFFFFFFFFFFFF8;
    unint64_t v39 = ((unint64_t)a2 + v45 + 7) & 0xFFFFFFFFFFFFFFF8;
    *(void *)unint64_t v38 = *(void *)v39;
    *(unsigned char *)(v38 + 8) = *(unsigned char *)(v39 + 8);
    return v26;
  }
  uint64_t v25 = *a2;
  *a1 = *a2;
  uint64_t v26 = (uint64_t *)(v25
                  + (((v14 & 0xF8 | v21 & 0xF8) ^ 0x1F8) & ((v14 | v21 & 0xF8) + 16)));
  swift_retain();
  return v26;
}

uint64_t destroy for SplitCollection(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 16);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v5 = *(void *)(AssociatedTypeWitness - 8) + 8;
  (*(void (**)(uint64_t, uint64_t))v5)(a1, AssociatedTypeWitness);
  uint64_t v6 = *(void *)(v3 - 8);
  uint64_t v7 = v6 + 8;
  unint64_t v8 = (*(void *)(v5 + 56) + a1 + *(unsigned __int8 *)(v6 + 80)) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80);
  (*(void (**)(unint64_t, uint64_t))(v6 + 8))(v8, v3);
  uint64_t v9 = *(void *)(v7 + 56);
  swift_getAssociatedConformanceWitness();
  uint64_t v10 = swift_getAssociatedTypeWitness();
  uint64_t v11 = *(void *)(v10 - 8);
  uint64_t v12 = v11;
  uint64_t v13 = *(unsigned __int8 *)(v11 + 80);
  uint64_t v14 = swift_getAssociatedTypeWitness();
  uint64_t v15 = v11;
  uint64_t v16 = *(unsigned __int8 *)(*(void *)(v14 - 8) + 80);
  unint64_t v17 = (unsigned __int16 *)((v8 + v9 + (v16 | v13)) & ~(v16 | v13));
  uint64_t v18 = *(unsigned int *)(v12 + 84);
  uint64_t v19 = *(void *)(v15 + 64);
  uint64_t v20 = v19 + v13;
  uint64_t v21 = ((v19 + v13) & ~v13) + v19;
  uint64_t v29 = *(void *)(v14 - 8);
  if (v18)
  {
    if ((*(unsigned int (**)(unsigned __int16 *, uint64_t, uint64_t))(v12 + 48))(v17, v18, v10)) {
      goto LABEL_19;
    }
    goto LABEL_18;
  }
  if (!*((unsigned char *)v17 + v21)) {
    goto LABEL_18;
  }
  int v22 = (*((unsigned __int8 *)v17 + v21) - 1) << (8 * v21);
  if (v21 > 3) {
    int v22 = 0;
  }
  if (v21)
  {
    int v23 = v21 <= 3 ? v21 : 4;
    switch(v23)
    {
      case 2:
        int v24 = *v17;
        break;
      case 3:
        int v24 = *v17 | (*((unsigned __int8 *)v17 + 2) << 16);
        break;
      case 4:
        int v24 = *(_DWORD *)v17;
        break;
      default:
        int v24 = *(unsigned __int8 *)v17;
        break;
    }
  }
  else
  {
    int v24 = 0;
  }
  if ((v24 | v22) == 0xFFFFFFFF)
  {
LABEL_18:
    uint64_t v25 = *(void (**)(unsigned __int16 *, uint64_t))(v12 + 8);
    v25(v17, v10);
    v25((unsigned __int16 *)(((unint64_t)v17 + v20) & ~v13), v10);
  }
LABEL_19:
  uint64_t v26 = v21 + v16;
  if (!v18) {
    ++v26;
  }
  uint64_t v27 = *(uint64_t (**)(unint64_t, uint64_t))(v29 + 8);

  return v27(((unint64_t)v17 + v26) & ~v16, v14);
}

uint64_t initializeWithCopy for SplitCollection(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(a3 + 16);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v7 = *(void *)(AssociatedTypeWitness - 8) + 16;
  (*(void (**)(uint64_t, uint64_t, uint64_t))v7)(a1, a2, AssociatedTypeWitness);
  uint64_t v8 = *(void *)(v7 + 48);
  uint64_t v9 = *(void *)(v5 - 8);
  uint64_t v10 = v9 + 16;
  uint64_t v11 = *(unsigned __int8 *)(v9 + 80);
  uint64_t v48 = a2;
  uint64_t v49 = a1;
  uint64_t v46 = ~v11;
  uint64_t v47 = v8 + v11;
  uint64_t v12 = (v8 + v11 + a1) & ~v11;
  uint64_t v13 = (v8 + v11 + a2) & ~v11;
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v9 + 16))(v12, v13, v5);
  uint64_t v14 = *(void *)(v10 + 48);
  swift_getAssociatedConformanceWitness();
  uint64_t v15 = swift_getAssociatedTypeWitness();
  uint64_t v16 = *(void *)(v15 - 8);
  uint64_t v17 = v16;
  uint64_t v18 = *(unsigned __int8 *)(v16 + 80);
  uint64_t v19 = v14;
  uint64_t v20 = swift_getAssociatedTypeWitness();
  uint64_t v21 = *(void *)(v20 - 8);
  uint64_t v22 = v16;
  uint64_t v23 = *(unsigned __int8 *)(v21 + 80);
  uint64_t v24 = v23 | v18;
  uint64_t v25 = (v23 | v18) + v19;
  __dst = (void *)((v25 + v12) & ~(v23 | v18));
  uint64_t v44 = ~(v23 | v18);
  uint64_t v26 = (unsigned __int16 *)((v25 + v13) & v44);
  uint64_t v27 = *(unsigned int *)(v17 + 84);
  uint64_t v28 = *(void *)(v22 + 64);
  size_t v29 = ((v28 + v18) & ~v18) + v28;
  uint64_t v45 = v20;
  uint64_t v41 = v28 + v18;
  uint64_t v42 = v15;
  if (!v27)
  {
    if (!*((unsigned char *)v26 + v29)) {
      goto LABEL_22;
    }
    int v30 = (*((unsigned __int8 *)v26 + v29) - 1) << (8 * v29);
    if (v29 > 3) {
      int v30 = 0;
    }
    if (v29)
    {
      int v31 = v29 <= 3 ? v29 : 4;
      switch(v31)
      {
        case 2:
          int v32 = *v26;
          break;
        case 3:
          int v32 = *v26 | (*((unsigned __int8 *)v26 + 2) << 16);
          break;
        case 4:
          int v32 = *(_DWORD *)v26;
          break;
        default:
          int v32 = *(unsigned __int8 *)v26;
          break;
      }
    }
    else
    {
      int v32 = 0;
    }
    if ((v32 | v30) == 0xFFFFFFFF) {
      goto LABEL_22;
    }
LABEL_18:
    if (v27) {
      size_t v33 = v29;
    }
    else {
      size_t v33 = v29 + 1;
    }
    int v34 = __dst;
    memcpy(__dst, v26, v33);
    goto LABEL_24;
  }
  if ((*(unsigned int (**)(unsigned __int16 *, uint64_t, uint64_t))(v17 + 48))(v26, v27, v15)) {
    goto LABEL_18;
  }
LABEL_22:
  int v35 = *(void (**)(void *, unsigned __int16 *, uint64_t))(v17 + 16);
  int v34 = __dst;
  v35(__dst, v26, v42);
  v35((void *)(((unint64_t)__dst + v41) & ~v18), (unsigned __int16 *)(((unint64_t)v26 + v41) & ~v18), v42);
  if (!v27) {
    *((unsigned char *)__dst + v29) = 0;
  }
LABEL_24:
  if (v27) {
    size_t v36 = v29;
  }
  else {
    size_t v36 = v29 + 1;
  }
  (*(void (**)(unint64_t, unint64_t, uint64_t))(v21 + 16))(((unint64_t)v34 + v23 + v36) & ~v23, ((unint64_t)v26 + v23 + v36) & ~v23, v45);
  size_t v37 = ((v36 + v23) & ~v23) + (((v47 & v46) + v19 + v24) & v44) + *(void *)(v21 + 64);
  uint64_t result = v49;
  unint64_t v39 = (v49 + v37 + 7) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v40 = (v48 + v37 + 7) & 0xFFFFFFFFFFFFFFF8;
  *(void *)unint64_t v39 = *(void *)v40;
  *(unsigned char *)(v39 + 8) = *(unsigned char *)(v40 + 8);
  return result;
}

uint64_t assignWithCopy for SplitCollection(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(a3 + 16);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v7 = *(void *)(AssociatedTypeWitness - 8) + 24;
  (*(void (**)(uint64_t, uint64_t, uint64_t))v7)(a1, a2, AssociatedTypeWitness);
  uint64_t v8 = *(void *)(v7 + 40);
  uint64_t v9 = *(void *)(v5 - 8);
  uint64_t v10 = v9 + 24;
  uint64_t v11 = *(unsigned __int8 *)(v9 + 80);
  uint64_t v69 = a2;
  uint64_t v70 = a1;
  uint64_t v67 = ~v11;
  uint64_t v68 = v8 + v11;
  uint64_t v12 = (v8 + v11 + a1) & ~v11;
  uint64_t v13 = (v8 + v11 + a2) & ~v11;
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v9 + 24))(v12, v13, v5);
  uint64_t v14 = *(void *)(v10 + 40);
  swift_getAssociatedConformanceWitness();
  uint64_t v15 = swift_getAssociatedTypeWitness();
  uint64_t v16 = *(void *)(v15 - 8);
  uint64_t v17 = v16;
  uint64_t v18 = *(unsigned __int8 *)(v16 + 80);
  uint64_t v19 = swift_getAssociatedTypeWitness();
  uint64_t v20 = v16;
  uint64_t v21 = *(void *)(v19 - 8);
  uint64_t v22 = v16;
  uint64_t v23 = *(unsigned __int8 *)(v21 + 80);
  uint64_t v24 = v23 | v18;
  uint64_t v72 = v14;
  uint64_t v25 = (v23 | v18) + v14;
  uint64_t v26 = (unsigned __int16 *)((v25 + v12) & ~(v23 | v18));
  uint64_t v27 = (unsigned __int16 *)((v25 + v13) & ~(v23 | v18));
  uint64_t v28 = (unsigned __int16 *)*(unsigned int *)(v20 + 84);
  uint64_t v29 = *(void *)(v22 + 64);
  size_t v30 = ((v29 + v18) & ~v18) + v29;
  uint64_t v66 = v19;
  uint64_t v71 = ~(v23 | v18);
  uint64_t v62 = v20;
  uint64_t v63 = v29 + v18;
  uint64_t v64 = ~v18;
  if (v28)
  {
    int v31 = *(uint64_t (**)(unsigned __int16 *, unsigned __int16 *, uint64_t))(v17 + 48);
    int v32 = v31(v26, v28, v15);
    size_t v33 = v27;
    int v34 = v32;
    int v35 = (int)v28;
    uint64_t v28 = v33;
    int v65 = v35;
    int v36 = ((uint64_t (*)(unsigned __int16 *))v31)(v33);
    if (v34) {
      goto LABEL_3;
    }
    goto LABEL_45;
  }
  char v37 = 8 * v30;
  uint64_t v38 = v15;
  if (!*((unsigned char *)v26 + v30)) {
    goto LABEL_30;
  }
  int v39 = (*((unsigned __int8 *)v26 + v30) - 1) << v37;
  if (v30 > 3) {
    int v39 = 0;
  }
  if (v30)
  {
    int v40 = v30 <= 3 ? v30 : 4;
    switch(v40)
    {
      case 2:
        int v41 = *v26;
        break;
      case 3:
        int v41 = *v26 | (*((unsigned __int8 *)v26 + 2) << 16);
        break;
      case 4:
        int v41 = *(_DWORD *)v26;
        break;
      default:
        int v41 = *(unsigned __int8 *)v26;
        break;
    }
  }
  else
  {
    int v41 = 0;
  }
  if ((v41 | v39) == 0xFFFFFFFF)
  {
LABEL_30:
    if (!*((unsigned char *)v27 + v30)) {
      goto LABEL_51;
    }
    int v52 = (*((unsigned __int8 *)v27 + v30) - 1) << v37;
    if (v30 > 3) {
      int v52 = 0;
    }
    int v65 = 0;
    if (v30)
    {
      if (v30 <= 3) {
        int v53 = v30;
      }
      else {
        int v53 = 4;
      }
      switch(v53)
      {
        case 2:
          uint64_t v28 = v27;
          int v54 = *v27;
          break;
        case 3:
          uint64_t v28 = v27;
          int v54 = *v27 | (*((unsigned __int8 *)v27 + 2) << 16);
          break;
        case 4:
          uint64_t v28 = v27;
          int v54 = *(_DWORD *)v27;
          break;
        default:
          uint64_t v28 = v27;
          int v54 = *(unsigned __int8 *)v27;
          break;
      }
    }
    else
    {
      uint64_t v28 = v27;
      int v54 = 0;
    }
    int v36 = (v54 | v52) + 1;
LABEL_45:
    uint64_t v27 = v28;
    uint64_t v20 = v62;
    uint64_t v38 = v15;
    LODWORD(v28) = v65;
    if (v36)
    {
      uint64_t v55 = *(void (**)(unsigned __int16 *, uint64_t))(v62 + 8);
      v55(v26, v15);
      v55((unsigned __int16 *)(((unint64_t)v26 + v63) & v64), v15);
      goto LABEL_47;
    }
LABEL_51:
    uint64_t v57 = *(void (**)(unsigned __int16 *, unsigned __int16 *, uint64_t))(v20 + 24);
    v57(v26, v27, v38);
    v57((unsigned __int16 *)(((unint64_t)v26 + v63) & v64), (unsigned __int16 *)(((unint64_t)v27 + v63) & v64), v38);
LABEL_52:
    uint64_t v47 = v69;
    uint64_t v46 = v70;
    uint64_t v48 = v27;
    uint64_t v50 = v67;
    uint64_t v49 = v68;
    uint64_t v51 = v66;
    goto LABEL_53;
  }
  if (!*((unsigned char *)v27 + v30)) {
    goto LABEL_28;
  }
  int v42 = (*((unsigned __int8 *)v27 + v30) - 1) << v37;
  if (v30 > 3) {
    int v42 = 0;
  }
  int v65 = 0;
  if (v30)
  {
    if (v30 <= 3) {
      int v43 = v30;
    }
    else {
      int v43 = 4;
    }
    switch(v43)
    {
      case 2:
        uint64_t v28 = v27;
        int v44 = *v27;
        break;
      case 3:
        uint64_t v28 = v27;
        int v44 = *v27 | (*((unsigned __int8 *)v27 + 2) << 16);
        break;
      case 4:
        uint64_t v28 = v27;
        int v44 = *(_DWORD *)v27;
        break;
      default:
        uint64_t v28 = v27;
        int v44 = *(unsigned __int8 *)v27;
        break;
    }
  }
  else
  {
    uint64_t v28 = v27;
    int v44 = 0;
  }
  int v36 = (v44 | v42) + 1;
LABEL_3:
  uint64_t v27 = v28;
  LODWORD(v28) = v65;
  if (v36)
  {
LABEL_47:
    if (v28) {
      size_t v56 = v30;
    }
    else {
      size_t v56 = v30 + 1;
    }
    memcpy(v26, v27, v56);
    goto LABEL_52;
  }
LABEL_28:
  uint64_t v45 = *(void (**)(unsigned __int16 *, unsigned __int16 *, uint64_t))(v62 + 16);
  v45(v26, v27, v15);
  v45((unsigned __int16 *)(((unint64_t)v26 + v63) & v64), (unsigned __int16 *)(((unint64_t)v27 + v63) & v64), v15);
  uint64_t v47 = v69;
  uint64_t v46 = v70;
  uint64_t v48 = v27;
  uint64_t v50 = v67;
  uint64_t v49 = v68;
  uint64_t v51 = v66;
  if (!v28) {
    *((unsigned char *)v26 + v30) = 0;
  }
LABEL_53:
  if (!v28) {
    ++v30;
  }
  (*(void (**)(unint64_t, unint64_t, uint64_t))(v21 + 24))(((unint64_t)v26 + v23 + v30) & ~v23, ((unint64_t)v48 + v23 + v30) & ~v23, v51);
  size_t v58 = ((v30 + v23) & ~v23) + (((v49 & v50) + v72 + v24) & v71) + *(void *)(v21 + 64);
  unint64_t v59 = (v46 + v58 + 7) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v60 = (v47 + v58 + 7) & 0xFFFFFFFFFFFFFFF8;
  *(void *)unint64_t v59 = *(void *)v60;
  *(unsigned char *)(v59 + 8) = *(unsigned char *)(v60 + 8);
  return v46;
}

uint64_t initializeWithTake for SplitCollection(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(a3 + 16);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v7 = *(void *)(AssociatedTypeWitness - 8) + 32;
  (*(void (**)(uint64_t, uint64_t, uint64_t))v7)(a1, a2, AssociatedTypeWitness);
  uint64_t v8 = *(void *)(v7 + 32);
  uint64_t v9 = *(void *)(v5 - 8);
  uint64_t v10 = v9 + 32;
  uint64_t v11 = *(unsigned __int8 *)(v9 + 80);
  uint64_t v48 = a2;
  uint64_t v49 = a1;
  uint64_t v46 = ~v11;
  uint64_t v47 = v8 + v11;
  uint64_t v12 = (v8 + v11 + a1) & ~v11;
  uint64_t v13 = (v8 + v11 + a2) & ~v11;
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v9 + 32))(v12, v13, v5);
  uint64_t v14 = *(void *)(v10 + 32);
  swift_getAssociatedConformanceWitness();
  uint64_t v15 = swift_getAssociatedTypeWitness();
  uint64_t v16 = *(void *)(v15 - 8);
  uint64_t v17 = v16;
  uint64_t v18 = *(unsigned __int8 *)(v16 + 80);
  uint64_t v19 = v14;
  uint64_t v20 = swift_getAssociatedTypeWitness();
  uint64_t v21 = *(void *)(v20 - 8);
  uint64_t v22 = v16;
  uint64_t v23 = *(unsigned __int8 *)(v21 + 80);
  uint64_t v24 = v23 | v18;
  uint64_t v25 = (v23 | v18) + v19;
  __dst = (void *)((v25 + v12) & ~(v23 | v18));
  uint64_t v44 = ~(v23 | v18);
  uint64_t v26 = (unsigned __int16 *)((v25 + v13) & v44);
  uint64_t v27 = *(unsigned int *)(v17 + 84);
  uint64_t v28 = *(void *)(v22 + 64);
  size_t v29 = ((v28 + v18) & ~v18) + v28;
  uint64_t v45 = v20;
  uint64_t v41 = v28 + v18;
  uint64_t v42 = v15;
  if (!v27)
  {
    if (!*((unsigned char *)v26 + v29)) {
      goto LABEL_22;
    }
    int v30 = (*((unsigned __int8 *)v26 + v29) - 1) << (8 * v29);
    if (v29 > 3) {
      int v30 = 0;
    }
    if (v29)
    {
      int v31 = v29 <= 3 ? v29 : 4;
      switch(v31)
      {
        case 2:
          int v32 = *v26;
          break;
        case 3:
          int v32 = *v26 | (*((unsigned __int8 *)v26 + 2) << 16);
          break;
        case 4:
          int v32 = *(_DWORD *)v26;
          break;
        default:
          int v32 = *(unsigned __int8 *)v26;
          break;
      }
    }
    else
    {
      int v32 = 0;
    }
    if ((v32 | v30) == 0xFFFFFFFF) {
      goto LABEL_22;
    }
LABEL_18:
    if (v27) {
      size_t v33 = v29;
    }
    else {
      size_t v33 = v29 + 1;
    }
    int v34 = __dst;
    memcpy(__dst, v26, v33);
    goto LABEL_24;
  }
  if ((*(unsigned int (**)(unsigned __int16 *, uint64_t, uint64_t))(v17 + 48))(v26, v27, v15)) {
    goto LABEL_18;
  }
LABEL_22:
  int v35 = *(void (**)(void *, unsigned __int16 *, uint64_t))(v17 + 32);
  int v34 = __dst;
  v35(__dst, v26, v42);
  v35((void *)(((unint64_t)__dst + v41) & ~v18), (unsigned __int16 *)(((unint64_t)v26 + v41) & ~v18), v42);
  if (!v27) {
    *((unsigned char *)__dst + v29) = 0;
  }
LABEL_24:
  if (v27) {
    size_t v36 = v29;
  }
  else {
    size_t v36 = v29 + 1;
  }
  (*(void (**)(unint64_t, unint64_t, uint64_t))(v21 + 32))(((unint64_t)v34 + v23 + v36) & ~v23, ((unint64_t)v26 + v23 + v36) & ~v23, v45);
  size_t v37 = ((v36 + v23) & ~v23) + (((v47 & v46) + v19 + v24) & v44) + *(void *)(v21 + 64);
  uint64_t result = v49;
  unint64_t v39 = (v49 + v37 + 7) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v40 = (v48 + v37 + 7) & 0xFFFFFFFFFFFFFFF8;
  *(void *)unint64_t v39 = *(void *)v40;
  *(unsigned char *)(v39 + 8) = *(unsigned char *)(v40 + 8);
  return result;
}

uint64_t assignWithTake for SplitCollection(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(a3 + 16);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v7 = *(void *)(AssociatedTypeWitness - 8) + 40;
  (*(void (**)(uint64_t, uint64_t, uint64_t))v7)(a1, a2, AssociatedTypeWitness);
  uint64_t v8 = *(void *)(v7 + 24);
  uint64_t v9 = *(void *)(v5 - 8);
  uint64_t v10 = v9 + 40;
  uint64_t v11 = *(unsigned __int8 *)(v9 + 80);
  uint64_t v69 = a2;
  uint64_t v70 = a1;
  uint64_t v67 = ~v11;
  uint64_t v68 = v8 + v11;
  uint64_t v12 = (v8 + v11 + a1) & ~v11;
  uint64_t v13 = (v8 + v11 + a2) & ~v11;
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v9 + 40))(v12, v13, v5);
  uint64_t v14 = *(void *)(v10 + 24);
  swift_getAssociatedConformanceWitness();
  uint64_t v15 = swift_getAssociatedTypeWitness();
  uint64_t v16 = *(void *)(v15 - 8);
  uint64_t v17 = v16;
  uint64_t v18 = *(unsigned __int8 *)(v16 + 80);
  uint64_t v19 = swift_getAssociatedTypeWitness();
  uint64_t v20 = v16;
  uint64_t v21 = *(void *)(v19 - 8);
  uint64_t v22 = v16;
  uint64_t v23 = *(unsigned __int8 *)(v21 + 80);
  uint64_t v24 = v23 | v18;
  uint64_t v72 = v14;
  uint64_t v25 = (v23 | v18) + v14;
  uint64_t v26 = (unsigned __int16 *)((v25 + v12) & ~(v23 | v18));
  uint64_t v27 = (unsigned __int16 *)((v25 + v13) & ~(v23 | v18));
  uint64_t v28 = (unsigned __int16 *)*(unsigned int *)(v20 + 84);
  uint64_t v29 = *(void *)(v22 + 64);
  size_t v30 = ((v29 + v18) & ~v18) + v29;
  uint64_t v66 = v19;
  uint64_t v71 = ~(v23 | v18);
  uint64_t v62 = v20;
  uint64_t v63 = v29 + v18;
  uint64_t v64 = ~v18;
  if (v28)
  {
    int v31 = *(uint64_t (**)(unsigned __int16 *, unsigned __int16 *, uint64_t))(v17 + 48);
    int v32 = v31(v26, v28, v15);
    size_t v33 = v27;
    int v34 = v32;
    int v35 = (int)v28;
    uint64_t v28 = v33;
    int v65 = v35;
    int v36 = ((uint64_t (*)(unsigned __int16 *))v31)(v33);
    if (v34) {
      goto LABEL_3;
    }
    goto LABEL_45;
  }
  char v37 = 8 * v30;
  uint64_t v38 = v15;
  if (!*((unsigned char *)v26 + v30)) {
    goto LABEL_30;
  }
  int v39 = (*((unsigned __int8 *)v26 + v30) - 1) << v37;
  if (v30 > 3) {
    int v39 = 0;
  }
  if (v30)
  {
    int v40 = v30 <= 3 ? v30 : 4;
    switch(v40)
    {
      case 2:
        int v41 = *v26;
        break;
      case 3:
        int v41 = *v26 | (*((unsigned __int8 *)v26 + 2) << 16);
        break;
      case 4:
        int v41 = *(_DWORD *)v26;
        break;
      default:
        int v41 = *(unsigned __int8 *)v26;
        break;
    }
  }
  else
  {
    int v41 = 0;
  }
  if ((v41 | v39) == 0xFFFFFFFF)
  {
LABEL_30:
    if (!*((unsigned char *)v27 + v30)) {
      goto LABEL_51;
    }
    int v52 = (*((unsigned __int8 *)v27 + v30) - 1) << v37;
    if (v30 > 3) {
      int v52 = 0;
    }
    int v65 = 0;
    if (v30)
    {
      if (v30 <= 3) {
        int v53 = v30;
      }
      else {
        int v53 = 4;
      }
      switch(v53)
      {
        case 2:
          uint64_t v28 = v27;
          int v54 = *v27;
          break;
        case 3:
          uint64_t v28 = v27;
          int v54 = *v27 | (*((unsigned __int8 *)v27 + 2) << 16);
          break;
        case 4:
          uint64_t v28 = v27;
          int v54 = *(_DWORD *)v27;
          break;
        default:
          uint64_t v28 = v27;
          int v54 = *(unsigned __int8 *)v27;
          break;
      }
    }
    else
    {
      uint64_t v28 = v27;
      int v54 = 0;
    }
    int v36 = (v54 | v52) + 1;
LABEL_45:
    uint64_t v27 = v28;
    uint64_t v20 = v62;
    uint64_t v38 = v15;
    LODWORD(v28) = v65;
    if (v36)
    {
      uint64_t v55 = *(void (**)(unsigned __int16 *, uint64_t))(v62 + 8);
      v55(v26, v15);
      v55((unsigned __int16 *)(((unint64_t)v26 + v63) & v64), v15);
      goto LABEL_47;
    }
LABEL_51:
    uint64_t v57 = *(void (**)(unsigned __int16 *, unsigned __int16 *, uint64_t))(v20 + 40);
    v57(v26, v27, v38);
    v57((unsigned __int16 *)(((unint64_t)v26 + v63) & v64), (unsigned __int16 *)(((unint64_t)v27 + v63) & v64), v38);
LABEL_52:
    uint64_t v47 = v69;
    uint64_t v46 = v70;
    uint64_t v48 = v27;
    uint64_t v50 = v67;
    uint64_t v49 = v68;
    uint64_t v51 = v66;
    goto LABEL_53;
  }
  if (!*((unsigned char *)v27 + v30)) {
    goto LABEL_28;
  }
  int v42 = (*((unsigned __int8 *)v27 + v30) - 1) << v37;
  if (v30 > 3) {
    int v42 = 0;
  }
  int v65 = 0;
  if (v30)
  {
    if (v30 <= 3) {
      int v43 = v30;
    }
    else {
      int v43 = 4;
    }
    switch(v43)
    {
      case 2:
        uint64_t v28 = v27;
        int v44 = *v27;
        break;
      case 3:
        uint64_t v28 = v27;
        int v44 = *v27 | (*((unsigned __int8 *)v27 + 2) << 16);
        break;
      case 4:
        uint64_t v28 = v27;
        int v44 = *(_DWORD *)v27;
        break;
      default:
        uint64_t v28 = v27;
        int v44 = *(unsigned __int8 *)v27;
        break;
    }
  }
  else
  {
    uint64_t v28 = v27;
    int v44 = 0;
  }
  int v36 = (v44 | v42) + 1;
LABEL_3:
  uint64_t v27 = v28;
  LODWORD(v28) = v65;
  if (v36)
  {
LABEL_47:
    if (v28) {
      size_t v56 = v30;
    }
    else {
      size_t v56 = v30 + 1;
    }
    memcpy(v26, v27, v56);
    goto LABEL_52;
  }
LABEL_28:
  uint64_t v45 = *(void (**)(unsigned __int16 *, unsigned __int16 *, uint64_t))(v62 + 32);
  v45(v26, v27, v15);
  v45((unsigned __int16 *)(((unint64_t)v26 + v63) & v64), (unsigned __int16 *)(((unint64_t)v27 + v63) & v64), v15);
  uint64_t v47 = v69;
  uint64_t v46 = v70;
  uint64_t v48 = v27;
  uint64_t v50 = v67;
  uint64_t v49 = v68;
  uint64_t v51 = v66;
  if (!v28) {
    *((unsigned char *)v26 + v30) = 0;
  }
LABEL_53:
  if (!v28) {
    ++v30;
  }
  (*(void (**)(unint64_t, unint64_t, uint64_t))(v21 + 40))(((unint64_t)v26 + v23 + v30) & ~v23, ((unint64_t)v48 + v23 + v30) & ~v23, v51);
  size_t v58 = ((v30 + v23) & ~v23) + (((v49 & v50) + v72 + v24) & v71) + *(void *)(v21 + 64);
  unint64_t v59 = (v46 + v58 + 7) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v60 = (v47 + v58 + 7) & 0xFFFFFFFFFFFFFFF8;
  *(void *)unint64_t v59 = *(void *)v60;
  *(unsigned char *)(v59 + 8) = *(unsigned char *)(v60 + 8);
  return v46;
}

uint64_t getEnumTagSinglePayload for SplitCollection(unsigned __int8 *a1, unsigned int a2, uint64_t a3)
{
  uint64_t v3 = *(void *)(a3 + 16);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v5 = *(void *)(AssociatedTypeWitness - 8);
  uint64_t v55 = *(void *)(v3 - 8);
  unsigned int v51 = *(_DWORD *)(v55 + 84);
  unsigned int v53 = *(_DWORD *)(v5 + 84);
  if (v51 <= v53) {
    unsigned int v6 = *(_DWORD *)(v5 + 84);
  }
  else {
    unsigned int v6 = *(_DWORD *)(v55 + 84);
  }
  swift_getAssociatedConformanceWitness();
  uint64_t v52 = AssociatedTypeWitness;
  uint64_t v50 = swift_getAssociatedTypeWitness();
  uint64_t v7 = *(void *)(v50 - 8);
  uint64_t v8 = *(unsigned int *)(v7 + 84);
  if (v8) {
    unsigned int v9 = v8 - 1;
  }
  else {
    unsigned int v9 = 0;
  }
  uint64_t v10 = *(void *)(v50 - 8);
  uint64_t v11 = swift_getAssociatedTypeWitness();
  uint64_t v12 = *(void *)(v11 - 8);
  unsigned int v13 = *(_DWORD *)(v12 + 84);
  if (v13 <= v9) {
    unsigned int v14 = v9;
  }
  else {
    unsigned int v14 = *(_DWORD *)(v12 + 84);
  }
  if (v14 <= v6) {
    unsigned int v15 = v6;
  }
  else {
    unsigned int v15 = v14;
  }
  uint64_t v16 = *(void *)(v5 + 64);
  uint64_t v17 = *(unsigned __int8 *)(v55 + 80);
  uint64_t v18 = *(void *)(v55 + 64);
  uint64_t v19 = *(unsigned __int8 *)(v10 + 80);
  uint64_t v20 = *(unsigned __int8 *)(v12 + 80);
  uint64_t v21 = *(void *)(v7 + 64);
  uint64_t v22 = *(void *)(*(void *)(v11 - 8) + 64);
  if (v15 <= 0xFE) {
    unsigned int v23 = 254;
  }
  else {
    unsigned int v23 = v15;
  }
  if (v8) {
    uint64_t v24 = *(void *)(v7 + 64);
  }
  else {
    uint64_t v24 = v21 + 1;
  }
  if (!a2) {
    return 0;
  }
  uint64_t v25 = v16 + v17;
  uint64_t v26 = (v16 + v17) & ~v17;
  uint64_t v27 = v20 | v19;
  uint64_t v28 = ((v20 | v19) + v18 + v26) & ~(v20 | v19);
  uint64_t v29 = v24 + ((v21 + v19) & ~v19) + v20;
  uint64_t v30 = v28 + v22 + (v29 & ~v20);
  int v31 = a1;
  if (v23 < a2)
  {
    unint64_t v32 = ((v30 + 7) & 0xFFFFFFFFFFFFFFF8) + 9;
    if (v32 < 4) {
      unsigned int v33 = ((a2 - v23 + 255) >> (8 * v32)) + 1;
    }
    else {
      unsigned int v33 = 2;
    }
    if (v33 >= 0x10000) {
      unsigned int v34 = 4;
    }
    else {
      unsigned int v34 = 2;
    }
    if (v33 < 0x100) {
      unsigned int v34 = 1;
    }
    if (v33 >= 2) {
      uint64_t v35 = v34;
    }
    else {
      uint64_t v35 = 0;
    }
    switch(v35)
    {
      case 1:
        int v36 = a1[v32];
        if (!a1[v32]) {
          break;
        }
        goto LABEL_36;
      case 2:
        int v36 = *(unsigned __int16 *)&a1[v32];
        if (*(_WORD *)&a1[v32]) {
          goto LABEL_36;
        }
        break;
      case 3:
        __break(1u);
        JUMPOUT(0x209F8FCD4);
      case 4:
        int v36 = *(_DWORD *)&a1[v32];
        if (!v36) {
          break;
        }
LABEL_36:
        int v37 = (v36 - 1) << (8 * v32);
        if (v32 >= 4) {
          int v37 = 0;
        }
        if (((v30 + 7) & 0xFFFFFFF8) == 0xFFFFFFF8) {
          int v38 = *a1;
        }
        else {
          int v38 = *(_DWORD *)a1;
        }
        int v44 = v23 + (v38 | v37);
        return (v44 + 1);
      default:
        break;
    }
  }
  if (v15 >= 0xFE)
  {
    if (v53 == v15)
    {
      uint64_t v39 = v52;
      int v40 = *(uint64_t (**)(unsigned __int8 *, uint64_t, uint64_t))(v5 + 48);
      uint64_t v41 = v53;
LABEL_48:
      return v40(v31, v41, v39);
    }
    int v31 = (unsigned __int8 *)((unint64_t)&a1[v25] & ~v17);
    if (v51 == v15)
    {
      int v40 = *(uint64_t (**)(unsigned __int8 *, uint64_t, uint64_t))(v55 + 48);
      uint64_t v41 = v51;
      uint64_t v39 = v3;
      goto LABEL_48;
    }
    unint64_t v45 = (unint64_t)&v31[v18 + v27] & ~v27;
    if (v9 < v13)
    {
      unint64_t v46 = (v29 + v45) & ~v20;
      uint64_t v47 = *(uint64_t (**)(unint64_t))(v12 + 48);
      return v47(v46);
    }
    if (v8)
    {
      int v48 = (*(uint64_t (**)(unint64_t, uint64_t, uint64_t))(v10 + 48))(v45, v8, v50);
      BOOL v49 = v48 != 0;
      uint64_t result = (v48 - 1);
      if (result != 0 && v49) {
        return result;
      }
    }
    return 0;
  }
  unsigned int v42 = *(unsigned __int8 *)(((unint64_t)&a1[v30 + 7] & 0xFFFFFFFFFFFFFFF8) + 8);
  if (v42 < 2) {
    return 0;
  }
  int v44 = (v42 + 2147483646) & 0x7FFFFFFF;
  return (v44 + 1);
}

void storeEnumTagSinglePayload for SplitCollection(unsigned char *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v4 = *(void *)(a4 + 16);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v6 = *(void *)(AssociatedTypeWitness - 8);
  uint64_t v58 = v6;
  uint64_t v61 = *(void *)(v4 - 8);
  unsigned int v57 = *(_DWORD *)(v61 + 84);
  unsigned int v60 = *(_DWORD *)(v6 + 84);
  if (v57 <= v60) {
    unsigned int v7 = *(_DWORD *)(v6 + 84);
  }
  else {
    unsigned int v7 = *(_DWORD *)(v61 + 84);
  }
  swift_getAssociatedConformanceWitness();
  uint64_t v59 = AssociatedTypeWitness;
  uint64_t v56 = swift_getAssociatedTypeWitness();
  uint64_t v8 = *(void *)(v56 - 8);
  uint64_t v9 = *(unsigned int *)(v8 + 84);
  if (v9) {
    unsigned int v10 = v9 - 1;
  }
  else {
    unsigned int v10 = 0;
  }
  unsigned int v11 = v10;
  int v12 = 0;
  uint64_t v13 = *(void *)(swift_getAssociatedTypeWitness() - 8);
  uint64_t v14 = v13;
  unsigned int v15 = *(_DWORD *)(v13 + 84);
  if (v15 <= v10) {
    unsigned int v16 = v10;
  }
  else {
    unsigned int v16 = *(_DWORD *)(v13 + 84);
  }
  if (v16 <= v7) {
    unsigned int v17 = v7;
  }
  else {
    unsigned int v17 = v16;
  }
  uint64_t v18 = *(void *)(v6 + 64);
  uint64_t v19 = *(unsigned __int8 *)(v61 + 80);
  uint64_t v20 = *(void *)(v61 + 64);
  uint64_t v21 = *(unsigned __int8 *)(v8 + 80);
  uint64_t v22 = *(unsigned __int8 *)(v13 + 80);
  uint64_t v23 = *(void *)(v13 + 64);
  if (v17 <= 0xFE) {
    unsigned int v24 = 254;
  }
  else {
    unsigned int v24 = v17;
  }
  uint64_t v25 = v18 + v19;
  uint64_t v26 = v22 | v21;
  uint64_t v27 = ((v22 | v21) + v20 + ((v18 + v19) & ~v19)) & ~(v22 | v21);
  size_t v28 = ((*(void *)(v8 + 64) + v21) & ~v21) + *(void *)(v8 + 64);
  if (v9) {
    size_t v29 = ((*(void *)(v8 + 64) + v21) & ~v21) + *(void *)(v8 + 64);
  }
  else {
    size_t v29 = v28 + 1;
  }
  size_t v30 = ((v29 + v22) & ~v22) + v23;
  size_t v31 = v30 + v27;
  size_t v32 = ((v31 + 7) & 0xFFFFFFFFFFFFFFF8) + 9;
  char v33 = 8 * v32;
  if (v24 < a3)
  {
    if (v32 <= 3) {
      unsigned int v34 = ((a3 - v24 + 255) >> v33) + 1;
    }
    else {
      unsigned int v34 = 2;
    }
    if (v34 >= 0x10000) {
      int v35 = 4;
    }
    else {
      int v35 = 2;
    }
    if (v34 < 0x100) {
      int v35 = 1;
    }
    if (v34 >= 2) {
      int v12 = v35;
    }
    else {
      int v12 = 0;
    }
  }
  if (v24 < a2)
  {
    if (v32 < 4) {
      unsigned int v36 = ((~v24 + a2) >> v33) + 1;
    }
    else {
      unsigned int v36 = 1;
    }
    if (v32 >= 4) {
      unsigned int v37 = ~v24 + a2;
    }
    else {
      unsigned int v37 = (~(_BYTE)v24 + a2);
    }
    bzero(a1, v32);
    if (v32 == 1) {
      *a1 = v37;
    }
    else {
      *(_DWORD *)a1 = v37;
    }
    switch(v12)
    {
      case 1:
        a1[v32] = v36;
        return;
      case 2:
        *(_WORD *)&a1[v32] = v36;
        return;
      case 3:
        goto LABEL_112;
      case 4:
        *(_DWORD *)&a1[v32] = v36;
        return;
      default:
        return;
    }
  }
  uint64_t v38 = ~v26;
  switch(v12)
  {
    case 1:
      a1[v32] = 0;
      if (!a2) {
        return;
      }
      goto LABEL_48;
    case 2:
      *(_WORD *)&a1[v32] = 0;
      if (!a2) {
        return;
      }
      goto LABEL_48;
    case 3:
LABEL_112:
      __break(1u);
      JUMPOUT(0x209F903B8);
    case 4:
      *(_DWORD *)&a1[v32] = 0;
      goto LABEL_47;
    default:
LABEL_47:
      if (!a2) {
        return;
      }
LABEL_48:
      if (v17 < 0xFE)
      {
        *(unsigned char *)(((unint64_t)&a1[v31 + 7] & 0xFFFFFFFFFFFFFFF8) + 8) = a2 + 1;
        return;
      }
      if (v17 < a2)
      {
        if (v31 <= 3) {
          int v39 = ~(-1 << (8 * v31));
        }
        else {
          int v39 = -1;
        }
        if (v31)
        {
          int v40 = v39 & (~v17 + a2);
          if (v31 <= 3) {
            int v41 = v31;
          }
          else {
            int v41 = 4;
          }
          bzero(a1, v31);
          switch(v41)
          {
            case 2:
              *(_WORD *)a1 = v40;
              break;
            case 3:
              *(_WORD *)a1 = v40;
              a1[2] = BYTE2(v40);
              break;
            case 4:
              *(_DWORD *)a1 = v40;
              break;
            default:
              *a1 = v40;
              break;
          }
        }
        return;
      }
      if (v60 == v17)
      {
        uint64_t v42 = v59;
        int v43 = *(void (**)(unsigned char *, uint64_t, uint64_t, uint64_t))(v58 + 56);
        int v44 = a1;
        uint64_t v45 = a2;
        uint64_t v46 = v60;
LABEL_68:
        v43(v44, v45, v46, v42);
        return;
      }
      int v44 = (unsigned char *)((unint64_t)&a1[v25] & ~v19);
      if (v57 == v17)
      {
        int v43 = *(void (**)(unsigned char *, uint64_t, uint64_t, uint64_t))(v61 + 56);
        uint64_t v45 = a2;
        uint64_t v46 = v57;
        uint64_t v42 = v4;
        goto LABEL_68;
      }
      unint64_t v47 = (unint64_t)&v44[v20 + v26] & v38;
      if (v16 >= a2)
      {
        if (v11 >= v15)
        {
          if (v11 >= a2)
          {
            if (a2 + 1 <= v9)
            {
              if (a2 == -1) {
                return;
              }
              int v43 = *(void (**)(unsigned char *, uint64_t, uint64_t, uint64_t))(v8 + 56);
              int v44 = (unsigned char *)((unint64_t)&v44[v20 + v26] & v38);
              uint64_t v45 = a2 + 1;
              uint64_t v46 = v9;
              uint64_t v42 = v56;
              goto LABEL_68;
            }
            if (v28 <= 3) {
              int v54 = ~(-1 << (8 * v28));
            }
            else {
              int v54 = -1;
            }
            if (v28)
            {
              int v49 = v54 & (a2 - v9);
              if (v28 <= 3) {
                int v55 = v28;
              }
              else {
                int v55 = 4;
              }
              bzero((void *)((unint64_t)&v44[v20 + v26] & v38), v28);
              switch(v55)
              {
                case 2:
LABEL_108:
                  *(_WORD *)unint64_t v47 = v49;
                  break;
                case 3:
LABEL_107:
                  *(_WORD *)unint64_t v47 = v49;
                  *(unsigned char *)(v47 + 2) = BYTE2(v49);
                  break;
                case 4:
LABEL_109:
                  *(_DWORD *)unint64_t v47 = v49;
                  break;
                default:
LABEL_106:
                  *(unsigned char *)unint64_t v47 = v49;
                  break;
              }
            }
          }
          else
          {
            if (v29 <= 3) {
              int v52 = ~(-1 << (8 * v29));
            }
            else {
              int v52 = -1;
            }
            if (v29)
            {
              int v49 = v52 & (~v11 + a2);
              if (v29 <= 3) {
                int v53 = v29;
              }
              else {
                int v53 = 4;
              }
              bzero((void *)((unint64_t)&v44[v20 + v26] & v38), v29);
              switch(v53)
              {
                case 2:
                  goto LABEL_108;
                case 3:
                  goto LABEL_107;
                case 4:
                  goto LABEL_109;
                default:
                  goto LABEL_106;
              }
            }
          }
        }
        else
        {
          unsigned int v51 = *(void (**)(size_t, void))(v14 + 56);
          v51((v29 + v22 + v47) & ~v22, a2);
        }
      }
      else
      {
        if (v30 <= 3) {
          int v48 = ~(-1 << (8 * v30));
        }
        else {
          int v48 = -1;
        }
        if (v30)
        {
          int v49 = v48 & (~v16 + a2);
          if (v30 <= 3) {
            int v50 = v30;
          }
          else {
            int v50 = 4;
          }
          bzero((void *)((unint64_t)&v44[v20 + v26] & v38), v30);
          switch(v50)
          {
            case 2:
              goto LABEL_108;
            case 3:
              goto LABEL_107;
            case 4:
              goto LABEL_109;
            default:
              goto LABEL_106;
          }
        }
      }
      return;
  }
}

uint64_t initializeWithCopy for RegexMatchesCollection(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v4;
  long long v5 = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  *(_OWORD *)(a1 + 32) = v5;
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  uint64_t v6 = *(void *)(a2 + 64);
  swift_bridgeObjectRetain();
  swift_retain();
  if (v6)
  {
    *(void *)(a1 + 56) = *(void *)(a2 + 56);
    *(void *)(a1 + 64) = v6;
    *(void *)(a1 + 72) = *(void *)(a2 + 72);
    *(_OWORD *)(a1 + 80) = *(_OWORD *)(a2 + 80);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
  }
  else
  {
    long long v7 = *(_OWORD *)(a2 + 72);
    *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
    *(_OWORD *)(a1 + 72) = v7;
    *(void *)(a1 + 88) = *(void *)(a2 + 88);
  }
  return a1;
}

uint64_t assignWithCopy for RegexMatchesCollection(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  swift_retain();
  swift_release();
  uint64_t v4 = *(void *)(a2 + 64);
  if (!*(void *)(a1 + 64))
  {
    if (v4)
    {
      *(void *)(a1 + 56) = *(void *)(a2 + 56);
      *(void *)(a1 + 64) = *(void *)(a2 + 64);
      *(void *)(a1 + 72) = *(void *)(a2 + 72);
      *(_OWORD *)(a1 + 80) = *(_OWORD *)(a2 + 80);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      return a1;
    }
LABEL_7:
    long long v6 = *(_OWORD *)(a2 + 56);
    long long v7 = *(_OWORD *)(a2 + 72);
    *(void *)(a1 + 88) = *(void *)(a2 + 88);
    *(_OWORD *)(a1 + 56) = v6;
    *(_OWORD *)(a1 + 72) = v7;
    return a1;
  }
  if (!v4)
  {
    uint64_t v5 = type metadata accessor for Regex.Match();
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v5 - 8) + 8))(a1 + 56, v5);
    goto LABEL_7;
  }
  *(void *)(a1 + 56) = *(void *)(a2 + 56);
  *(void *)(a1 + 64) = *(void *)(a2 + 64);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 72) = *(void *)(a2 + 72);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 80) = *(void *)(a2 + 80);
  *(void *)(a1 + 88) = *(void *)(a2 + 88);
  return a1;
}

uint64_t assignWithTake for RegexMatchesCollection(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v4;
  swift_bridgeObjectRelease();
  long long v5 = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  *(_OWORD *)(a1 + 32) = v5;
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  swift_release();
  if (!*(void *)(a1 + 64)) {
    goto LABEL_5;
  }
  uint64_t v6 = *(void *)(a2 + 64);
  if (!v6)
  {
    uint64_t v7 = type metadata accessor for Regex.Match();
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v7 - 8) + 8))(a1 + 56, v7);
LABEL_5:
    long long v8 = *(_OWORD *)(a2 + 72);
    *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
    *(_OWORD *)(a1 + 72) = v8;
    *(void *)(a1 + 88) = *(void *)(a2 + 88);
    return a1;
  }
  *(void *)(a1 + 56) = *(void *)(a2 + 56);
  *(void *)(a1 + 64) = v6;
  swift_bridgeObjectRelease();
  *(void *)(a1 + 72) = *(void *)(a2 + 72);
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 80) = *(_OWORD *)(a2 + 80);
  return a1;
}

uint64_t getEnumTagSinglePayload for RegexMatchesCollection(uint64_t a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *(unsigned char *)(a1 + 96)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  unint64_t v2 = *(void *)(a1 + 8);
  if (v2 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for RegexMatchesCollection(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)(result + 88) = 0;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(void *)uint64_t result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 96) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 8) = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 96) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

uint64_t type metadata completion function for RangesCollection()
{
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  if (v1 <= 0x3F)
  {
    uint64_t AssociatedTypeWitness = swift_checkMetadataState();
    if (v2 <= 0x3F)
    {
      uint64_t AssociatedTypeWitness = type metadata accessor for RangesCollection.Index();
      if (v3 <= 0x3F)
      {
        swift_initStructMetadata();
        return 0;
      }
    }
  }
  return AssociatedTypeWitness;
}

uint64_t *initializeBufferWithCopyOfBuffer for RangesCollection(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v3 = *(void *)(a3 + 16);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v45 = *(void *)(AssociatedTypeWitness - 8);
  uint64_t v5 = *(void *)(v3 - 8);
  int v43 = *(_DWORD *)(v5 + 80);
  uint64_t v40 = v43;
  uint64_t v41 = *(void *)(v45 + 64) + v43;
  uint64_t v42 = v5;
  uint64_t v6 = *(void *)(v5 + 64);
  swift_getAssociatedConformanceWitness();
  uint64_t v39 = swift_getAssociatedTypeWitness();
  uint64_t v7 = *(void *)(v39 - 8);
  uint64_t v8 = v7;
  int v9 = *(_DWORD *)(v7 + 80);
  uint64_t v10 = swift_getAssociatedTypeWitness();
  int v11 = *(_DWORD *)(*(void *)(v10 - 8) + 80);
  uint64_t v12 = v11;
  unint64_t v13 = v11 | (unint64_t)v9;
  uint64_t v14 = *(void *)(v7 + 64);
  uint64_t v38 = v9;
  if (*(_DWORD *)(v7 + 84)) {
    size_t v15 = ((v14 + v9) & ~(unint64_t)v9) + v14;
  }
  else {
    size_t v15 = ((v14 + v9) & ~(unint64_t)v9) + v14 + 1;
  }
  unint64_t v16 = v13 | (*(unsigned char *)(v45 + 80) | v43);
  int v17 = (*(_DWORD *)(v45 + 80) | v43 | v11 | v9) & 0x100000;
  if (v16 <= 7
    && v17 == 0
    && (((v12 | v9) + v6 + (v41 & ~(unint64_t)v43)) & ~(v12 | v9))
     + *(void *)(*(void *)(v10 - 8) + 64)
     + ((v15 + v12) & ~v12) <= 0x18)
  {
    uint64_t v22 = *(unsigned int *)(v8 + 84);
    uint64_t v35 = v14 + v9;
    uint64_t v36 = (v35 & ~(unint64_t)v9) + v14;
    uint64_t v37 = *(void *)(v10 - 8);
    uint64_t v44 = v10;
    unint64_t v23 = ~v13;
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(v45 + 16))(a1, a2, AssociatedTypeWitness);
    unint64_t v24 = ((unint64_t)a1 + v41) & ~v40;
    unint64_t v25 = ((unint64_t)a2 + v41) & ~v40;
    (*(void (**)(unint64_t, unint64_t, uint64_t))(v42 + 16))(v24, v25, v3);
    uint64_t v26 = (unsigned char *)((v24 + v6 + v13) & v23);
    uint64_t v27 = (unsigned __int16 *)((v25 + v6 + v13) & v23);
    uint64_t v21 = a1;
    if (v22)
    {
      uint64_t v28 = v8;
      uint64_t v29 = v39;
      if (!(*(unsigned int (**)(unsigned __int16 *, uint64_t, uint64_t))(v8 + 48))(v27, v22, v39))
      {
LABEL_31:
        char v33 = *(void (**)(unsigned char *, unsigned __int16 *, uint64_t))(v28 + 16);
        v33(v26, v27, v29);
        v33((unsigned char *)((unint64_t)&v26[v35] & ~v38), (unsigned __int16 *)(((unint64_t)v27 + v35) & ~v38), v29);
        if (!v22) {
          v26[v36] = 0;
        }
        goto LABEL_33;
      }
    }
    else
    {
      uint64_t v29 = v39;
      uint64_t v28 = v8;
      if (!*((unsigned char *)v27 + v36)) {
        goto LABEL_31;
      }
      int v30 = (*((unsigned __int8 *)v27 + v36) - 1) << (8 * v36);
      if (v36 > 3) {
        int v30 = 0;
      }
      if (v36)
      {
        int v31 = v36 <= 3 ? v36 : 4;
        switch(v31)
        {
          case 2:
            int v32 = *v27;
            break;
          case 3:
            int v32 = *v27 | (*((unsigned __int8 *)v27 + 2) << 16);
            break;
          case 4:
            int v32 = *(_DWORD *)v27;
            break;
          default:
            int v32 = *(unsigned __int8 *)v27;
            break;
        }
      }
      else
      {
        int v32 = 0;
      }
      if ((v32 | v30) == 0xFFFFFFFF) {
        goto LABEL_31;
      }
    }
    memcpy(v26, v27, v15);
LABEL_33:
    (*(void (**)(unint64_t, unint64_t, uint64_t))(v37 + 16))((unint64_t)&v26[v12 + v15] & ~v12, ((unint64_t)v27 + v12 + v15) & ~v12, v44);
    return v21;
  }
  uint64_t v20 = *a2;
  *a1 = *a2;
  uint64_t v21 = (uint64_t *)(v20 + ((v16 + 16) & ~v16));
  swift_retain();
  return v21;
}

uint64_t destroy for RangesCollection(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 16);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v5 = *(void *)(AssociatedTypeWitness - 8) + 8;
  (*(void (**)(uint64_t, uint64_t))v5)(a1, AssociatedTypeWitness);
  uint64_t v6 = *(void *)(v3 - 8);
  uint64_t v7 = v6 + 8;
  unint64_t v8 = (*(void *)(v5 + 56) + a1 + *(unsigned __int8 *)(v6 + 80)) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80);
  (*(void (**)(unint64_t, uint64_t))(v6 + 8))(v8, v3);
  uint64_t v9 = *(void *)(v7 + 56);
  swift_getAssociatedConformanceWitness();
  uint64_t v10 = swift_getAssociatedTypeWitness();
  uint64_t v11 = *(void *)(v10 - 8);
  uint64_t v12 = v11;
  uint64_t v13 = *(unsigned __int8 *)(v11 + 80);
  uint64_t v14 = swift_getAssociatedTypeWitness();
  uint64_t v15 = v11;
  uint64_t v16 = *(unsigned __int8 *)(*(void *)(v14 - 8) + 80);
  int v17 = (unsigned __int16 *)((v8 + v9 + (v16 | v13)) & ~(v16 | v13));
  uint64_t v18 = *(unsigned int *)(v12 + 84);
  uint64_t v19 = *(void *)(v15 + 64);
  uint64_t v20 = v19 + v13;
  uint64_t v21 = ((v19 + v13) & ~v13) + v19;
  uint64_t v29 = *(void *)(v14 - 8);
  if (v18)
  {
    if ((*(unsigned int (**)(unsigned __int16 *, uint64_t, uint64_t))(v12 + 48))(v17, v18, v10)) {
      goto LABEL_19;
    }
    goto LABEL_18;
  }
  if (!*((unsigned char *)v17 + v21)) {
    goto LABEL_18;
  }
  int v22 = (*((unsigned __int8 *)v17 + v21) - 1) << (8 * v21);
  if (v21 > 3) {
    int v22 = 0;
  }
  if (v21)
  {
    int v23 = v21 <= 3 ? v21 : 4;
    switch(v23)
    {
      case 2:
        int v24 = *v17;
        break;
      case 3:
        int v24 = *v17 | (*((unsigned __int8 *)v17 + 2) << 16);
        break;
      case 4:
        int v24 = *(_DWORD *)v17;
        break;
      default:
        int v24 = *(unsigned __int8 *)v17;
        break;
    }
  }
  else
  {
    int v24 = 0;
  }
  if ((v24 | v22) == 0xFFFFFFFF)
  {
LABEL_18:
    unint64_t v25 = *(void (**)(unsigned __int16 *, uint64_t))(v12 + 8);
    v25(v17, v10);
    v25((unsigned __int16 *)(((unint64_t)v17 + v20) & ~v13), v10);
  }
LABEL_19:
  if (v18) {
    uint64_t v26 = v16;
  }
  else {
    uint64_t v26 = v16 + 1;
  }
  uint64_t v27 = *(uint64_t (**)(unint64_t, uint64_t))(v29 + 8);

  return v27(((unint64_t)v17 + v26 + v21) & ~v16, v14);
}

uint64_t initializeWithCopy for RangesCollection(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(a3 + 16);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v7 = *(void *)(AssociatedTypeWitness - 8) + 16;
  (*(void (**)(uint64_t, uint64_t, uint64_t))v7)(a1, a2, AssociatedTypeWitness);
  uint64_t v8 = *(void *)(v7 + 48);
  uint64_t v9 = *(void *)(v5 - 8);
  uint64_t v10 = v9 + 16;
  uint64_t v11 = *(unsigned __int8 *)(v9 + 80);
  uint64_t v12 = v8 + v11;
  uint64_t v41 = a1;
  uint64_t v13 = (v12 + a1) & ~v11;
  uint64_t v14 = (v12 + a2) & ~v11;
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v9 + 16))(v13, v14, v5);
  uint64_t v15 = *(void *)(v10 + 48);
  swift_getAssociatedConformanceWitness();
  uint64_t v16 = swift_getAssociatedTypeWitness();
  uint64_t v17 = *(void *)(v16 - 8);
  uint64_t v18 = v17;
  uint64_t v19 = *(unsigned __int8 *)(v17 + 80);
  uint64_t v20 = swift_getAssociatedTypeWitness();
  uint64_t v21 = *(void *)(v20 - 8);
  uint64_t v22 = v17;
  uint64_t v23 = *(unsigned __int8 *)(v21 + 80);
  uint64_t v24 = (v23 | v19) + v15;
  __dst = (void *)((v24 + v13) & ~(v23 | v19));
  unint64_t v25 = (unsigned __int16 *)((v24 + v14) & ~(v23 | v19));
  uint64_t v26 = *(unsigned int *)(v18 + 84);
  uint64_t v27 = *(void *)(v22 + 64);
  uint64_t v28 = v27 + v19;
  size_t v29 = ((v27 + v19) & ~v19) + v27;
  uint64_t v40 = v20;
  if (!v26)
  {
    if (!*((unsigned char *)v25 + v29)) {
      goto LABEL_22;
    }
    int v30 = (*((unsigned __int8 *)v25 + v29) - 1) << (8 * v29);
    if (v29 > 3) {
      int v30 = 0;
    }
    if (v29)
    {
      int v31 = v29 <= 3 ? v29 : 4;
      switch(v31)
      {
        case 2:
          int v32 = *v25;
          break;
        case 3:
          int v32 = *v25 | (*((unsigned __int8 *)v25 + 2) << 16);
          break;
        case 4:
          int v32 = *(_DWORD *)v25;
          break;
        default:
          int v32 = *(unsigned __int8 *)v25;
          break;
      }
    }
    else
    {
      int v32 = 0;
    }
    if ((v32 | v30) == 0xFFFFFFFF) {
      goto LABEL_22;
    }
LABEL_18:
    if (v26) {
      size_t v33 = v29;
    }
    else {
      size_t v33 = v29 + 1;
    }
    unsigned int v34 = __dst;
    memcpy(__dst, v25, v33);
    goto LABEL_24;
  }
  if ((*(unsigned int (**)(unsigned __int16 *, uint64_t, uint64_t))(v18 + 48))(v25, v26, v16)) {
    goto LABEL_18;
  }
LABEL_22:
  uint64_t v35 = ~v19;
  uint64_t v36 = *(void (**)(void *, unsigned __int16 *, uint64_t))(v18 + 16);
  unsigned int v34 = __dst;
  v36(__dst, v25, v16);
  v36((void *)(((unint64_t)__dst + v28) & v35), (unsigned __int16 *)(((unint64_t)v25 + v28) & v35), v16);
  if (!v26) {
    *((unsigned char *)__dst + v29) = 0;
  }
LABEL_24:
  if (v26) {
    size_t v37 = v29;
  }
  else {
    size_t v37 = v29 + 1;
  }
  (*(void (**)(unint64_t, unint64_t, uint64_t))(v21 + 16))(((unint64_t)v34 + v23 + v37) & ~v23, ((unint64_t)v25 + v23 + v37) & ~v23, v40);
  return v41;
}

uint64_t assignWithCopy for RangesCollection(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(a3 + 16);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v7 = *(void *)(AssociatedTypeWitness - 8) + 24;
  (*(void (**)(uint64_t, uint64_t, uint64_t))v7)(a1, a2, AssociatedTypeWitness);
  uint64_t v8 = *(void *)(v7 + 40);
  uint64_t v9 = *(void *)(v5 - 8);
  uint64_t v10 = v9 + 24;
  uint64_t v11 = *(unsigned __int8 *)(v9 + 80);
  uint64_t v12 = v8 + v11;
  uint64_t v56 = a1;
  uint64_t v13 = (v12 + a1) & ~v11;
  uint64_t v14 = (v12 + a2) & ~v11;
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v9 + 24))(v13, v14, v5);
  uint64_t v15 = *(void *)(v10 + 40);
  swift_getAssociatedConformanceWitness();
  uint64_t v16 = swift_getAssociatedTypeWitness();
  uint64_t v17 = *(void *)(v16 - 8);
  uint64_t v18 = v17;
  uint64_t v19 = *(unsigned __int8 *)(v17 + 80);
  uint64_t v20 = swift_getAssociatedTypeWitness();
  uint64_t v21 = v17;
  uint64_t v22 = *(unsigned __int8 *)(*(void *)(v20 - 8) + 80);
  uint64_t v23 = (v22 | v19) + v15;
  uint64_t v24 = (unsigned __int16 *)((v23 + v13) & ~(v22 | v19));
  unint64_t v25 = (unsigned __int16 *)((v23 + v14) & ~(v22 | v19));
  uint64_t v26 = *(unsigned int *)(v18 + 84);
  uint64_t v27 = *(void *)(v21 + 64);
  uint64_t v28 = ~v19;
  size_t v29 = ((v27 + v19) & ~v19) + v27;
  uint64_t v54 = *(void *)(v20 - 8);
  uint64_t v55 = v20;
  uint64_t v52 = ~v19;
  uint64_t v53 = v27 + v19;
  if (!v26)
  {
    char v33 = 8 * v29;
    if (*((unsigned char *)v24 + v29))
    {
      int v34 = (*((unsigned __int8 *)v24 + v29) - 1) << v33;
      if (v29 > 3) {
        int v34 = 0;
      }
      if (v29)
      {
        int v35 = v29 <= 3 ? v29 : 4;
        switch(v35)
        {
          case 2:
            int v36 = *v24;
            break;
          case 3:
            int v36 = *v24 | (*((unsigned __int8 *)v24 + 2) << 16);
            break;
          case 4:
            int v36 = *(_DWORD *)v24;
            break;
          default:
            int v36 = *(unsigned __int8 *)v24;
            break;
        }
      }
      else
      {
        int v36 = 0;
      }
      if ((v36 | v34) != 0xFFFFFFFF)
      {
        if (!*((unsigned char *)v25 + v29)) {
          goto LABEL_59;
        }
        int v37 = (*((unsigned __int8 *)v25 + v29) - 1) << v33;
        if (v29 > 3) {
          int v37 = 0;
        }
        if (v29)
        {
          int v38 = v29 <= 3 ? v29 : 4;
          switch(v38)
          {
            case 2:
              int v39 = *v25;
              break;
            case 3:
              int v39 = *v25 | (*((unsigned __int8 *)v25 + 2) << 16);
              break;
            case 4:
              int v39 = *(_DWORD *)v25;
              break;
            default:
              int v39 = *(unsigned __int8 *)v25;
              break;
          }
        }
        else
        {
          int v39 = 0;
        }
        if ((v39 | v37) == 0xFFFFFFFF) {
          goto LABEL_59;
        }
        goto LABEL_45;
      }
    }
    if (!*((unsigned char *)v25 + v29)) {
      goto LABEL_49;
    }
    int v40 = (*((unsigned __int8 *)v25 + v29) - 1) << v33;
    if (v29 > 3) {
      int v40 = 0;
    }
    if (v29)
    {
      if (v29 <= 3) {
        int v41 = v29;
      }
      else {
        int v41 = 4;
      }
      switch(v41)
      {
        case 2:
          int v42 = *v25;
          break;
        case 3:
          int v42 = *v25 | (*((unsigned __int8 *)v25 + 2) << 16);
          break;
        case 4:
          int v42 = *(_DWORD *)v25;
          break;
        default:
          int v42 = *(unsigned __int8 *)v25;
          break;
      }
    }
    else
    {
      int v42 = 0;
    }
    int v32 = (v42 | v40) + 1;
LABEL_43:
    uint64_t v28 = ~v19;
    if (v32)
    {
      int v43 = *(void (**)(unsigned __int16 *, uint64_t))(v18 + 8);
      v43(v24, v16);
      v43((unsigned __int16 *)(((unint64_t)v24 + v53) & v52), v16);
      goto LABEL_45;
    }
LABEL_49:
    uint64_t v45 = *(void (**)(unsigned __int16 *, unsigned __int16 *, uint64_t))(v18 + 24);
    v45(v24, v25, v16);
    v45((unsigned __int16 *)(((unint64_t)v24 + v53) & v28), (unsigned __int16 *)(((unint64_t)v25 + v53) & v28), v16);
LABEL_50:
    uint64_t v46 = v55;
    uint64_t v47 = v56;
    uint64_t v48 = v54;
    goto LABEL_51;
  }
  int v30 = *(uint64_t (**)(unsigned __int16 *, uint64_t, uint64_t))(v18 + 48);
  int v31 = v30(v24, v26, v16);
  int v32 = v30(v25, v26, v16);
  if (!v31) {
    goto LABEL_43;
  }
  if (v32)
  {
LABEL_45:
    if (v26) {
      size_t v44 = v29;
    }
    else {
      size_t v44 = v29 + 1;
    }
    memcpy(v24, v25, v44);
    goto LABEL_50;
  }
LABEL_59:
  unsigned int v51 = *(void (**)(unsigned __int16 *, unsigned __int16 *, uint64_t))(v18 + 16);
  v51(v24, v25, v16);
  v51((unsigned __int16 *)(((unint64_t)v24 + v53) & v52), (unsigned __int16 *)(((unint64_t)v25 + v53) & v52), v16);
  uint64_t v46 = v55;
  uint64_t v47 = v56;
  uint64_t v48 = v54;
  if (!v26) {
    *((unsigned char *)v24 + v29) = 0;
  }
LABEL_51:
  if (v26) {
    size_t v49 = v29;
  }
  else {
    size_t v49 = v29 + 1;
  }
  (*(void (**)(unint64_t, unint64_t, uint64_t))(v48 + 24))(((unint64_t)v24 + v22 + v49) & ~v22, ((unint64_t)v25 + v22 + v49) & ~v22, v46);
  return v47;
}

uint64_t initializeWithTake for RangesCollection(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(a3 + 16);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v7 = *(void *)(AssociatedTypeWitness - 8) + 32;
  (*(void (**)(uint64_t, uint64_t, uint64_t))v7)(a1, a2, AssociatedTypeWitness);
  uint64_t v8 = *(void *)(v7 + 32);
  uint64_t v9 = *(void *)(v5 - 8);
  uint64_t v10 = v9 + 32;
  uint64_t v11 = *(unsigned __int8 *)(v9 + 80);
  uint64_t v12 = v8 + v11;
  uint64_t v41 = a1;
  uint64_t v13 = (v12 + a1) & ~v11;
  uint64_t v14 = (v12 + a2) & ~v11;
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v9 + 32))(v13, v14, v5);
  uint64_t v15 = *(void *)(v10 + 32);
  swift_getAssociatedConformanceWitness();
  uint64_t v16 = swift_getAssociatedTypeWitness();
  uint64_t v17 = *(void *)(v16 - 8);
  uint64_t v18 = v17;
  uint64_t v19 = *(unsigned __int8 *)(v17 + 80);
  uint64_t v20 = swift_getAssociatedTypeWitness();
  uint64_t v21 = *(void *)(v20 - 8);
  uint64_t v22 = v17;
  uint64_t v23 = *(unsigned __int8 *)(v21 + 80);
  uint64_t v24 = (v23 | v19) + v15;
  __dst = (void *)((v24 + v13) & ~(v23 | v19));
  unint64_t v25 = (unsigned __int16 *)((v24 + v14) & ~(v23 | v19));
  uint64_t v26 = *(unsigned int *)(v18 + 84);
  uint64_t v27 = *(void *)(v22 + 64);
  uint64_t v28 = v27 + v19;
  size_t v29 = ((v27 + v19) & ~v19) + v27;
  uint64_t v40 = v20;
  if (!v26)
  {
    if (!*((unsigned char *)v25 + v29)) {
      goto LABEL_22;
    }
    int v30 = (*((unsigned __int8 *)v25 + v29) - 1) << (8 * v29);
    if (v29 > 3) {
      int v30 = 0;
    }
    if (v29)
    {
      int v31 = v29 <= 3 ? v29 : 4;
      switch(v31)
      {
        case 2:
          int v32 = *v25;
          break;
        case 3:
          int v32 = *v25 | (*((unsigned __int8 *)v25 + 2) << 16);
          break;
        case 4:
          int v32 = *(_DWORD *)v25;
          break;
        default:
          int v32 = *(unsigned __int8 *)v25;
          break;
      }
    }
    else
    {
      int v32 = 0;
    }
    if ((v32 | v30) == 0xFFFFFFFF) {
      goto LABEL_22;
    }
LABEL_18:
    if (v26) {
      size_t v33 = v29;
    }
    else {
      size_t v33 = v29 + 1;
    }
    int v34 = __dst;
    memcpy(__dst, v25, v33);
    goto LABEL_24;
  }
  if ((*(unsigned int (**)(unsigned __int16 *, uint64_t, uint64_t))(v18 + 48))(v25, v26, v16)) {
    goto LABEL_18;
  }
LABEL_22:
  uint64_t v35 = ~v19;
  int v36 = *(void (**)(void *, unsigned __int16 *, uint64_t))(v18 + 32);
  int v34 = __dst;
  v36(__dst, v25, v16);
  v36((void *)(((unint64_t)__dst + v28) & v35), (unsigned __int16 *)(((unint64_t)v25 + v28) & v35), v16);
  if (!v26) {
    *((unsigned char *)__dst + v29) = 0;
  }
LABEL_24:
  if (v26) {
    size_t v37 = v29;
  }
  else {
    size_t v37 = v29 + 1;
  }
  (*(void (**)(unint64_t, unint64_t, uint64_t))(v21 + 32))(((unint64_t)v34 + v23 + v37) & ~v23, ((unint64_t)v25 + v23 + v37) & ~v23, v40);
  return v41;
}

uint64_t assignWithTake for RangesCollection(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(a3 + 16);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v7 = *(void *)(AssociatedTypeWitness - 8) + 40;
  (*(void (**)(uint64_t, uint64_t, uint64_t))v7)(a1, a2, AssociatedTypeWitness);
  uint64_t v8 = *(void *)(v7 + 24);
  uint64_t v9 = *(void *)(v5 - 8);
  uint64_t v10 = v9 + 40;
  uint64_t v11 = *(unsigned __int8 *)(v9 + 80);
  uint64_t v12 = v8 + v11;
  uint64_t v56 = a1;
  uint64_t v13 = (v12 + a1) & ~v11;
  uint64_t v14 = (v12 + a2) & ~v11;
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v9 + 40))(v13, v14, v5);
  uint64_t v15 = *(void *)(v10 + 24);
  swift_getAssociatedConformanceWitness();
  uint64_t v16 = swift_getAssociatedTypeWitness();
  uint64_t v17 = *(void *)(v16 - 8);
  uint64_t v18 = v17;
  uint64_t v19 = *(unsigned __int8 *)(v17 + 80);
  uint64_t v20 = swift_getAssociatedTypeWitness();
  uint64_t v21 = v17;
  uint64_t v22 = *(unsigned __int8 *)(*(void *)(v20 - 8) + 80);
  uint64_t v23 = (v22 | v19) + v15;
  uint64_t v24 = (unsigned __int16 *)((v23 + v13) & ~(v22 | v19));
  unint64_t v25 = (unsigned __int16 *)((v23 + v14) & ~(v22 | v19));
  uint64_t v26 = *(unsigned int *)(v18 + 84);
  uint64_t v27 = *(void *)(v21 + 64);
  uint64_t v28 = ~v19;
  size_t v29 = ((v27 + v19) & ~v19) + v27;
  uint64_t v54 = *(void *)(v20 - 8);
  uint64_t v55 = v20;
  uint64_t v52 = ~v19;
  uint64_t v53 = v27 + v19;
  if (!v26)
  {
    char v33 = 8 * v29;
    if (*((unsigned char *)v24 + v29))
    {
      int v34 = (*((unsigned __int8 *)v24 + v29) - 1) << v33;
      if (v29 > 3) {
        int v34 = 0;
      }
      if (v29)
      {
        int v35 = v29 <= 3 ? v29 : 4;
        switch(v35)
        {
          case 2:
            int v36 = *v24;
            break;
          case 3:
            int v36 = *v24 | (*((unsigned __int8 *)v24 + 2) << 16);
            break;
          case 4:
            int v36 = *(_DWORD *)v24;
            break;
          default:
            int v36 = *(unsigned __int8 *)v24;
            break;
        }
      }
      else
      {
        int v36 = 0;
      }
      if ((v36 | v34) != 0xFFFFFFFF)
      {
        if (!*((unsigned char *)v25 + v29)) {
          goto LABEL_59;
        }
        int v37 = (*((unsigned __int8 *)v25 + v29) - 1) << v33;
        if (v29 > 3) {
          int v37 = 0;
        }
        if (v29)
        {
          int v38 = v29 <= 3 ? v29 : 4;
          switch(v38)
          {
            case 2:
              int v39 = *v25;
              break;
            case 3:
              int v39 = *v25 | (*((unsigned __int8 *)v25 + 2) << 16);
              break;
            case 4:
              int v39 = *(_DWORD *)v25;
              break;
            default:
              int v39 = *(unsigned __int8 *)v25;
              break;
          }
        }
        else
        {
          int v39 = 0;
        }
        if ((v39 | v37) == 0xFFFFFFFF) {
          goto LABEL_59;
        }
        goto LABEL_45;
      }
    }
    if (!*((unsigned char *)v25 + v29)) {
      goto LABEL_49;
    }
    int v40 = (*((unsigned __int8 *)v25 + v29) - 1) << v33;
    if (v29 > 3) {
      int v40 = 0;
    }
    if (v29)
    {
      if (v29 <= 3) {
        int v41 = v29;
      }
      else {
        int v41 = 4;
      }
      switch(v41)
      {
        case 2:
          int v42 = *v25;
          break;
        case 3:
          int v42 = *v25 | (*((unsigned __int8 *)v25 + 2) << 16);
          break;
        case 4:
          int v42 = *(_DWORD *)v25;
          break;
        default:
          int v42 = *(unsigned __int8 *)v25;
          break;
      }
    }
    else
    {
      int v42 = 0;
    }
    int v32 = (v42 | v40) + 1;
LABEL_43:
    uint64_t v28 = ~v19;
    if (v32)
    {
      int v43 = *(void (**)(unsigned __int16 *, uint64_t))(v18 + 8);
      v43(v24, v16);
      v43((unsigned __int16 *)(((unint64_t)v24 + v53) & v52), v16);
      goto LABEL_45;
    }
LABEL_49:
    uint64_t v45 = *(void (**)(unsigned __int16 *, unsigned __int16 *, uint64_t))(v18 + 40);
    v45(v24, v25, v16);
    v45((unsigned __int16 *)(((unint64_t)v24 + v53) & v28), (unsigned __int16 *)(((unint64_t)v25 + v53) & v28), v16);
LABEL_50:
    uint64_t v46 = v55;
    uint64_t v47 = v56;
    uint64_t v48 = v54;
    goto LABEL_51;
  }
  int v30 = *(uint64_t (**)(unsigned __int16 *, uint64_t, uint64_t))(v18 + 48);
  int v31 = v30(v24, v26, v16);
  int v32 = v30(v25, v26, v16);
  if (!v31) {
    goto LABEL_43;
  }
  if (v32)
  {
LABEL_45:
    if (v26) {
      size_t v44 = v29;
    }
    else {
      size_t v44 = v29 + 1;
    }
    memcpy(v24, v25, v44);
    goto LABEL_50;
  }
LABEL_59:
  unsigned int v51 = *(void (**)(unsigned __int16 *, unsigned __int16 *, uint64_t))(v18 + 32);
  v51(v24, v25, v16);
  v51((unsigned __int16 *)(((unint64_t)v24 + v53) & v52), (unsigned __int16 *)(((unint64_t)v25 + v53) & v52), v16);
  uint64_t v46 = v55;
  uint64_t v47 = v56;
  uint64_t v48 = v54;
  if (!v26) {
    *((unsigned char *)v24 + v29) = 0;
  }
LABEL_51:
  if (v26) {
    size_t v49 = v29;
  }
  else {
    size_t v49 = v29 + 1;
  }
  (*(void (**)(unint64_t, unint64_t, uint64_t))(v48 + 40))(((unint64_t)v24 + v22 + v49) & ~v22, ((unint64_t)v25 + v22 + v49) & ~v22, v46);
  return v47;
}

uint64_t getEnumTagSinglePayload for RangesCollection(unsigned __int16 *a1, unsigned int a2, uint64_t a3)
{
  uint64_t v3 = *(void *)(a3 + 16);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v45 = *(void *)(AssociatedTypeWitness - 8);
  uint64_t v46 = *(void *)(v3 - 8);
  unsigned int v41 = *(_DWORD *)(v46 + 84);
  unsigned int v43 = *(_DWORD *)(v45 + 84);
  if (v41 <= v43) {
    unsigned int v5 = *(_DWORD *)(v45 + 84);
  }
  else {
    unsigned int v5 = *(_DWORD *)(v46 + 84);
  }
  swift_getAssociatedConformanceWitness();
  uint64_t v42 = AssociatedTypeWitness;
  uint64_t v40 = swift_getAssociatedTypeWitness();
  uint64_t v6 = *(void *)(v40 - 8);
  uint64_t v7 = *(unsigned int *)(v6 + 84);
  if (v7) {
    unsigned int v8 = v7 - 1;
  }
  else {
    unsigned int v8 = 0;
  }
  uint64_t v9 = *(void *)(swift_getAssociatedTypeWitness() - 8);
  uint64_t v10 = v9;
  unsigned int v11 = *(_DWORD *)(v9 + 84);
  if (v11 <= v8) {
    unsigned int v12 = v8;
  }
  else {
    unsigned int v12 = *(_DWORD *)(v9 + 84);
  }
  if (v12 <= v5) {
    unsigned int v12 = v5;
  }
  uint64_t v13 = *(unsigned __int8 *)(v46 + 80);
  uint64_t v14 = *(void *)(v46 + 64);
  uint64_t v15 = *(unsigned __int8 *)(v6 + 80);
  uint64_t v16 = *(unsigned __int8 *)(v9 + 80);
  uint64_t v17 = *(void *)(v6 + 64);
  uint64_t v18 = *(void *)(v9 + 64);
  if (v7) {
    uint64_t v19 = *(void *)(v6 + 64);
  }
  else {
    uint64_t v19 = v17 + 1;
  }
  if (!a2) {
    return 0;
  }
  uint64_t v20 = *(void *)(v45 + 64) + v13;
  uint64_t v21 = v16 | v15;
  uint64_t v22 = v19 + ((v17 + v15) & ~v15) + v16;
  uint64_t v23 = a1;
  if (a2 <= v12) {
    goto LABEL_35;
  }
  uint64_t v24 = ((v21 + v14 + (v20 & ~v13)) & ~v21) + v18 + (v22 & ~v16);
  char v25 = 8 * v24;
  if (v24 <= 3)
  {
    unsigned int v27 = ((a2 - v12 + ~(-1 << v25)) >> v25) + 1;
    if (HIWORD(v27))
    {
      int v26 = *(_DWORD *)((char *)a1 + v24);
      if (!v26) {
        goto LABEL_35;
      }
      goto LABEL_25;
    }
    if (v27 > 0xFF)
    {
      int v26 = *(unsigned __int16 *)((char *)a1 + v24);
      if (!*(unsigned __int16 *)((char *)a1 + v24)) {
        goto LABEL_35;
      }
      goto LABEL_25;
    }
    if (v27 < 2)
    {
LABEL_35:
      if (v12)
      {
        if (v43 == v12)
        {
          uint64_t v31 = v42;
          int v32 = *(uint64_t (**)(unsigned __int16 *, uint64_t, uint64_t))(v45 + 48);
          uint64_t v33 = v43;
          return v32(v23, v33, v31);
        }
        uint64_t v23 = (unsigned __int16 *)(((unint64_t)a1 + v20) & ~v13);
        if (v41 == v12)
        {
          int v32 = *(uint64_t (**)(unsigned __int16 *, uint64_t, uint64_t))(v46 + 48);
          uint64_t v33 = v41;
          uint64_t v31 = v3;
          return v32(v23, v33, v31);
        }
        unint64_t v35 = ((unint64_t)v23 + v14 + v21) & ~v21;
        if (v8 < v11)
        {
          unint64_t v36 = (v22 + v35) & ~v16;
          int v37 = *(uint64_t (**)(unint64_t))(v10 + 48);
          return v37(v36);
        }
        if (v7)
        {
          int v38 = (*(uint64_t (**)(unint64_t, uint64_t, uint64_t))(v6 + 48))(v35, v7, v40);
          BOOL v39 = v38 != 0;
          uint64_t result = (v38 - 1);
          if (result != 0 && v39) {
            return result;
          }
        }
      }
      return 0;
    }
  }
  int v26 = *((unsigned __int8 *)a1 + v24);
  if (!*((unsigned char *)a1 + v24)) {
    goto LABEL_35;
  }
LABEL_25:
  int v28 = (v26 - 1) << v25;
  if (v24 > 3) {
    int v28 = 0;
  }
  if (v24)
  {
    if (v24 <= 3) {
      int v29 = v24;
    }
    else {
      int v29 = 4;
    }
    switch(v29)
    {
      case 2:
        int v30 = *a1;
        break;
      case 3:
        int v30 = *a1 | (*((unsigned __int8 *)a1 + 2) << 16);
        break;
      case 4:
        int v30 = *(_DWORD *)a1;
        break;
      default:
        int v30 = *(unsigned __int8 *)a1;
        break;
    }
  }
  else
  {
    int v30 = 0;
  }
  return v12 + (v30 | v28) + 1;
}

void storeEnumTagSinglePayload for RangesCollection(unsigned char *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v4 = *(void *)(a4 + 16);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v6 = *(void *)(AssociatedTypeWitness - 8);
  uint64_t v58 = v6;
  uint64_t v7 = *(void *)(v4 - 8);
  uint64_t v64 = v7;
  unsigned int v57 = *(_DWORD *)(v7 + 84);
  unsigned int v60 = *(_DWORD *)(v6 + 84);
  if (v57 <= v60) {
    unsigned int v8 = *(_DWORD *)(v6 + 84);
  }
  else {
    unsigned int v8 = *(_DWORD *)(v7 + 84);
  }
  swift_getAssociatedConformanceWitness();
  uint64_t v59 = AssociatedTypeWitness;
  uint64_t v56 = swift_getAssociatedTypeWitness();
  uint64_t v9 = *(void *)(v56 - 8);
  int v10 = *(_DWORD *)(v9 + 84);
  if (v10) {
    unsigned int v11 = v10 - 1;
  }
  else {
    unsigned int v11 = 0;
  }
  uint64_t v12 = *(unsigned int *)(v9 + 84);
  unsigned int v13 = v11;
  int v14 = 0;
  uint64_t v15 = *(void *)(swift_getAssociatedTypeWitness() - 8);
  uint64_t v16 = v15;
  unsigned int v17 = *(_DWORD *)(v15 + 84);
  if (v17 <= v13) {
    unsigned int v18 = v13;
  }
  else {
    unsigned int v18 = *(_DWORD *)(v15 + 84);
  }
  if (v18 <= v8) {
    unsigned int v19 = v8;
  }
  else {
    unsigned int v19 = v18;
  }
  uint64_t v20 = *(unsigned __int8 *)(v7 + 80);
  uint64_t v21 = *(void *)(v6 + 64) + v20;
  uint64_t v22 = *(void *)(v7 + 64);
  uint64_t v23 = *(unsigned __int8 *)(v9 + 80);
  uint64_t v24 = *(unsigned __int8 *)(v15 + 80);
  uint64_t v25 = v24 | v23;
  uint64_t v26 = ((v24 | v23) + v22 + (v21 & ~v20)) & ~(v24 | v23);
  uint64_t v27 = *(void *)(v9 + 64);
  uint64_t v28 = (v27 + v23) & ~v23;
  size_t v29 = v28 + v27;
  if (v12) {
    size_t v30 = v28 + v27;
  }
  else {
    size_t v30 = v29 + 1;
  }
  size_t v31 = v30 + v24;
  size_t v32 = ((v30 + v24) & ~v24) + *(void *)(v15 + 64);
  size_t v33 = v32 + v26;
  if (a3 > v19)
  {
    if (v33 <= 3)
    {
      unsigned int v34 = ((a3 - v19 + ~(-1 << (8 * v33))) >> (8 * v33)) + 1;
      if (HIWORD(v34))
      {
        int v14 = 4;
      }
      else if (v34 >= 0x100)
      {
        int v14 = 2;
      }
      else
      {
        int v14 = v34 > 1;
      }
    }
    else
    {
      int v14 = 1;
    }
  }
  if (v19 < a2)
  {
    unsigned int v35 = ~v19 + a2;
    if (v33 < 4)
    {
      int v36 = (v35 >> (8 * v33)) + 1;
      if (v33)
      {
        int v41 = v35 & ~(-1 << (8 * v33));
        bzero(a1, v33);
        if (v33 == 3)
        {
          *(_WORD *)a1 = v41;
          a1[2] = BYTE2(v41);
        }
        else if (v33 == 2)
        {
          *(_WORD *)a1 = v41;
        }
        else
        {
          *a1 = v41;
        }
      }
    }
    else
    {
      bzero(a1, v33);
      *(_DWORD *)a1 = v35;
      int v36 = 1;
    }
    switch(v14)
    {
      case 1:
        a1[v33] = v36;
        return;
      case 2:
        *(_WORD *)&a1[v33] = v36;
        return;
      case 3:
        goto LABEL_89;
      case 4:
        *(_DWORD *)&a1[v33] = v36;
        return;
      default:
        return;
    }
  }
  uint64_t v37 = ~v20;
  uint64_t v38 = ~v25;
  uint64_t v39 = ~v24;
  uint64_t v40 = a1;
  switch(v14)
  {
    case 1:
      a1[v33] = 0;
      if (!a2) {
        return;
      }
      goto LABEL_36;
    case 2:
      *(_WORD *)&a1[v33] = 0;
      if (!a2) {
        return;
      }
      goto LABEL_36;
    case 3:
LABEL_89:
      __break(1u);
      JUMPOUT(0x209F92D64);
    case 4:
      *(_DWORD *)&a1[v33] = 0;
      goto LABEL_35;
    default:
LABEL_35:
      if (!a2) {
        return;
      }
LABEL_36:
      if (v60 == v19)
      {
        uint64_t v42 = v59;
        unsigned int v43 = *(void (**)(unsigned char *, uint64_t, uint64_t, uint64_t))(v58 + 56);
        uint64_t v44 = a2;
        uint64_t v45 = v60;
LABEL_40:
        v43(v40, v44, v45, v42);
        return;
      }
      uint64_t v40 = (unsigned char *)((unint64_t)&a1[v21] & v37);
      if (v57 == v19)
      {
        unsigned int v43 = *(void (**)(unsigned char *, uint64_t, uint64_t, uint64_t))(v64 + 56);
        uint64_t v44 = a2;
        uint64_t v45 = v57;
        uint64_t v42 = v4;
        goto LABEL_40;
      }
      unint64_t v46 = (unint64_t)&v40[v22 + v25] & v38;
      if (v18 >= a2)
      {
        if (v13 >= v17)
        {
          if (v13 >= a2)
          {
            if (a2 + 1 <= v12)
            {
              if (a2 == -1) {
                return;
              }
              unsigned int v43 = *(void (**)(unsigned char *, uint64_t, uint64_t, uint64_t))(v9 + 56);
              uint64_t v40 = (unsigned char *)((unint64_t)&v40[v22 + v25] & v38);
              uint64_t v44 = a2 + 1;
              uint64_t v45 = v12;
              uint64_t v42 = v56;
              goto LABEL_40;
            }
            if (v29 <= 3) {
              int v54 = ~(-1 << (8 * v29));
            }
            else {
              int v54 = -1;
            }
            if (v29)
            {
              int v48 = v54 & (a2 - v12);
              if (v29 <= 3) {
                int v55 = v29;
              }
              else {
                int v55 = 4;
              }
              bzero((void *)((unint64_t)&v40[v22 + v25] & v38), v29);
              switch(v55)
              {
                case 2:
LABEL_85:
                  *(_WORD *)unint64_t v46 = v48;
                  break;
                case 3:
LABEL_84:
                  *(_WORD *)unint64_t v46 = v48;
                  *(unsigned char *)(v46 + 2) = BYTE2(v48);
                  break;
                case 4:
LABEL_86:
                  *(_DWORD *)unint64_t v46 = v48;
                  break;
                default:
LABEL_83:
                  *(unsigned char *)unint64_t v46 = v48;
                  break;
              }
            }
          }
          else
          {
            if (v30 <= 3) {
              int v52 = ~(-1 << (8 * v30));
            }
            else {
              int v52 = -1;
            }
            if (v30)
            {
              int v48 = v52 & (~v13 + a2);
              if (v30 <= 3) {
                int v53 = v30;
              }
              else {
                int v53 = 4;
              }
              bzero((void *)((unint64_t)&v40[v22 + v25] & v38), v30);
              switch(v53)
              {
                case 2:
                  goto LABEL_85;
                case 3:
                  goto LABEL_84;
                case 4:
                  goto LABEL_86;
                default:
                  goto LABEL_83;
              }
            }
          }
        }
        else
        {
          size_t v50 = (v31 + v46) & v39;
          unsigned int v51 = *(void (**)(size_t, void))(v16 + 56);
          v51(v50, a2);
        }
      }
      else
      {
        if (v32 <= 3) {
          int v47 = ~(-1 << (8 * v32));
        }
        else {
          int v47 = -1;
        }
        if (v32)
        {
          int v48 = v47 & (~v18 + a2);
          if (v32 <= 3) {
            int v49 = v32;
          }
          else {
            int v49 = 4;
          }
          bzero((void *)((unint64_t)&v40[v22 + v25] & v38), v32);
          switch(v49)
          {
            case 2:
              goto LABEL_85;
            case 3:
              goto LABEL_84;
            case 4:
              goto LABEL_86;
            default:
              goto LABEL_83;
          }
        }
      }
      return;
  }
}

uint64_t type metadata accessor for RangesCollection.Index()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t type metadata completion function for RangesCollection.Index()
{
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  type metadata accessor for Range();
  uint64_t result = type metadata accessor for Optional();
  if (v1 <= 0x3F)
  {
    uint64_t result = swift_getAssociatedTypeWitness();
    if (v2 <= 0x3F)
    {
      swift_initStructMetadata();
      return 0;
    }
  }
  return result;
}

unsigned char *initializeBufferWithCopyOfBuffer for RangesCollection.Index(void *a1, unsigned __int16 *a2)
{
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v3 = *(void *)(AssociatedTypeWitness - 8);
  int v5 = *(_DWORD *)(v3 + 80);
  uint64_t v4 = *(unsigned int *)(v3 + 84);
  uint64_t v6 = *(void *)(v3 + 64);
  uint64_t v7 = v5;
  uint64_t v32 = v6 + v5;
  size_t v8 = ((v6 + v7) & ~v7) + v6;
  size_t v9 = v8;
  if (v4) {
    size_t v10 = v8;
  }
  else {
    size_t v10 = v8 + 1;
  }
  uint64_t v11 = swift_getAssociatedTypeWitness();
  uint64_t v12 = *(void *)(v11 - 8);
  uint64_t v13 = *(_DWORD *)(v12 + 80);
  size_t __n = v10;
  size_t v14 = v10 + v13;
  if ((v13 | (unint64_t)v5) <= 7
    && ((*(_DWORD *)(v12 + 80) | v5) & 0x100000) == 0
    && ((v10 + v13) & ~v13) + *(void *)(*(void *)(v11 - 8) + 64) <= 0x18)
  {
    uint64_t v19 = v11;
    uint64_t v31 = ~v13;
    if (v4)
    {
      uint64_t v20 = AssociatedTypeWitness;
      uint64_t v21 = a2;
      int v22 = (*(uint64_t (**)(unsigned __int16 *, uint64_t, uint64_t))(v3 + 48))(a2, v4, AssociatedTypeWitness);
      size_t v23 = v9;
      unsigned int v18 = a1;
      if (!v22)
      {
LABEL_31:
        size_t v28 = v23;
        size_t v29 = *(void (**)(unsigned char *, unsigned __int16 *, uint64_t))(v3 + 16);
        v29(v18, a2, v20);
        v29((unsigned char *)((unint64_t)&v18[v32] & ~v7), (unsigned __int16 *)(((unint64_t)a2 + v32) & ~v7), v20);
        uint64_t v21 = a2;
        if (!v4) {
          v18[v28] = 0;
        }
        goto LABEL_33;
      }
    }
    else
    {
      uint64_t v20 = AssociatedTypeWitness;
      uint64_t v21 = a2;
      size_t v23 = v9;
      int v24 = *((unsigned __int8 *)a2 + v9);
      unsigned int v18 = a1;
      if (!v24) {
        goto LABEL_31;
      }
      int v25 = (v24 - 1) << (8 * v23);
      if (v23 > 3) {
        int v25 = 0;
      }
      if (v23)
      {
        int v26 = v23 <= 3 ? v23 : 4;
        switch(v26)
        {
          case 2:
            int v27 = *a2;
            break;
          case 3:
            int v27 = *a2 | (*((unsigned __int8 *)a2 + 2) << 16);
            break;
          case 4:
            int v27 = *(_DWORD *)a2;
            break;
          default:
            int v27 = *(unsigned __int8 *)a2;
            break;
        }
      }
      else
      {
        int v27 = 0;
      }
      if ((v27 | v25) == 0xFFFFFFFF) {
        goto LABEL_31;
      }
    }
    memcpy(v18, v21, __n);
LABEL_33:
    (*(void (**)(unint64_t, unint64_t, uint64_t))(v12 + 16))((unint64_t)&v18[v14] & v31, ((unint64_t)v21 + v14) & v31, v19);
    return v18;
  }
  uint64_t v17 = *(void *)a2;
  *a1 = *(void *)a2;
  unsigned int v18 = (unsigned char *)(v17 + (((v13 | v5) + 16) & ~(v13 | v5)));
  swift_retain();
  return v18;
}

uint64_t destroy for RangesCollection.Index(unsigned __int16 *a1)
{
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v3 = *(void *)(AssociatedTypeWitness - 8);
  uint64_t v4 = *(unsigned int *)(v3 + 84);
  uint64_t v5 = *(void *)(v3 + 64);
  uint64_t v6 = *(unsigned __int8 *)(v3 + 80);
  uint64_t v7 = v5 + v6;
  uint64_t v8 = ((v5 + v6) & ~v6) + v5;
  if (v4)
  {
    if ((*(unsigned int (**)(unsigned __int16 *, uint64_t, uint64_t))(v3 + 48))(a1, v4, AssociatedTypeWitness)) {
      goto LABEL_19;
    }
    goto LABEL_18;
  }
  if (!*((unsigned char *)a1 + v8)) {
    goto LABEL_18;
  }
  int v9 = (*((unsigned __int8 *)a1 + v8) - 1) << (8 * v8);
  if (v8 > 3) {
    int v9 = 0;
  }
  if (v8)
  {
    int v10 = v8 <= 3 ? v8 : 4;
    switch(v10)
    {
      case 2:
        int v11 = *a1;
        break;
      case 3:
        int v11 = *a1 | (*((unsigned __int8 *)a1 + 2) << 16);
        break;
      case 4:
        int v11 = *(_DWORD *)a1;
        break;
      default:
        int v11 = *(unsigned __int8 *)a1;
        break;
    }
  }
  else
  {
    int v11 = 0;
  }
  if ((v11 | v9) == 0xFFFFFFFF)
  {
LABEL_18:
    uint64_t v12 = *(void (**)(unsigned __int16 *, uint64_t))(v3 + 8);
    v12(a1, AssociatedTypeWitness);
    v12((unsigned __int16 *)(((unint64_t)a1 + v7) & ~v6), AssociatedTypeWitness);
  }
LABEL_19:
  uint64_t v13 = swift_getAssociatedTypeWitness();
  uint64_t v14 = *(void *)(v13 - 8);
  uint64_t v15 = *(uint64_t (**)(unint64_t, uint64_t))(v14 + 8);
  if (v4) {
    uint64_t v16 = a1;
  }
  else {
    uint64_t v16 = (unsigned __int16 *)((char *)a1 + 1);
  }
  uint64_t v17 = v13;
  unint64_t v18 = ((unint64_t)v16 + *(unsigned __int8 *)(v14 + 80) + v8) & ~(unint64_t)*(unsigned __int8 *)(v14 + 80);

  return v15(v18, v17);
}

void *initializeWithCopy for RangesCollection.Index(void *a1, unsigned __int16 *a2)
{
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v5 = *(void *)(AssociatedTypeWitness - 8);
  uint64_t v6 = *(unsigned int *)(v5 + 84);
  uint64_t v7 = *(void *)(v5 + 64);
  uint64_t v8 = *(unsigned __int8 *)(v5 + 80);
  uint64_t v9 = v7 + v8;
  size_t v10 = ((v7 + v8) & ~v8) + v7;
  if (!v6)
  {
    if (!*((unsigned char *)a2 + v10)) {
      goto LABEL_22;
    }
    int v11 = (*((unsigned __int8 *)a2 + v10) - 1) << (8 * v10);
    if (v10 > 3) {
      int v11 = 0;
    }
    if (v10)
    {
      int v12 = v10 <= 3 ? v10 : 4;
      switch(v12)
      {
        case 2:
          int v13 = *a2;
          break;
        case 3:
          int v13 = *a2 | (*((unsigned __int8 *)a2 + 2) << 16);
          break;
        case 4:
          int v13 = *(_DWORD *)a2;
          break;
        default:
          int v13 = *(unsigned __int8 *)a2;
          break;
      }
    }
    else
    {
      int v13 = 0;
    }
    if ((v13 | v11) == 0xFFFFFFFF) {
      goto LABEL_22;
    }
LABEL_18:
    if (v6) {
      size_t v14 = v10;
    }
    else {
      size_t v14 = v10 + 1;
    }
    memcpy(a1, a2, v14);
    goto LABEL_24;
  }
  if ((*(unsigned int (**)(unsigned __int16 *, uint64_t, uint64_t))(v5 + 48))(a2, v6, AssociatedTypeWitness)) {
    goto LABEL_18;
  }
LABEL_22:
  uint64_t v15 = *(void (**)(void *, unsigned __int16 *, uint64_t))(v5 + 16);
  v15(a1, a2, AssociatedTypeWitness);
  v15((void *)(((unint64_t)a1 + v9) & ~v8), (unsigned __int16 *)(((unint64_t)a2 + v9) & ~v8), AssociatedTypeWitness);
  if (!v6) {
    *((unsigned char *)a1 + v10) = 0;
  }
LABEL_24:
  if (v6) {
    size_t v16 = v10;
  }
  else {
    size_t v16 = v10 + 1;
  }
  uint64_t v17 = swift_getAssociatedTypeWitness();
  uint64_t v18 = *(void *)(v17 - 8);
  (*(void (**)(unint64_t, unint64_t, uint64_t))(v18 + 16))(((unint64_t)a1 + v16 + *(unsigned __int8 *)(v18 + 80)) & ~(unint64_t)*(unsigned __int8 *)(v18 + 80), ((unint64_t)a2 + v16 + *(unsigned __int8 *)(v18 + 80)) & ~(unint64_t)*(unsigned __int8 *)(v18 + 80), v17);
  return a1;
}

unsigned __int16 *assignWithCopy for RangesCollection.Index(unsigned __int16 *a1, unsigned __int8 *a2)
{
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v5 = *(void *)(AssociatedTypeWitness - 8);
  uint64_t v6 = *(unsigned int *)(v5 + 84);
  uint64_t v7 = *(void *)(v5 + 64);
  uint64_t v8 = *(unsigned __int8 *)(v5 + 80);
  uint64_t v9 = ~v8;
  size_t v10 = ((v7 + v8) & ~v8) + v7;
  uint64_t v32 = v5;
  uint64_t v33 = v7 + v8;
  if (!v6)
  {
    char v14 = 8 * v10;
    if (*((unsigned char *)a1 + v10))
    {
      int v15 = (*((unsigned __int8 *)a1 + v10) - 1) << v14;
      if (v10 > 3) {
        int v15 = 0;
      }
      if (v10)
      {
        int v16 = v10 <= 3 ? v10 : 4;
        switch(v16)
        {
          case 2:
            int v17 = *a1;
            break;
          case 3:
            int v17 = *a1 | (*((unsigned __int8 *)a1 + 2) << 16);
            break;
          case 4:
            int v17 = *(_DWORD *)a1;
            break;
          default:
            int v17 = *(unsigned __int8 *)a1;
            break;
        }
      }
      else
      {
        int v17 = 0;
      }
      if ((v17 | v15) != 0xFFFFFFFF)
      {
        if (!a2[v10]) {
          goto LABEL_54;
        }
        int v18 = (a2[v10] - 1) << v14;
        if (v10 > 3) {
          int v18 = 0;
        }
        if (v10)
        {
          int v19 = v10 <= 3 ? v10 : 4;
          switch(v19)
          {
            case 2:
              int v20 = *(unsigned __int16 *)a2;
              break;
            case 3:
              int v20 = *(unsigned __int16 *)a2 | (a2[2] << 16);
              break;
            case 4:
              int v20 = *(_DWORD *)a2;
              break;
            default:
              int v20 = *a2;
              break;
          }
        }
        else
        {
          int v20 = 0;
        }
        if ((v20 | v18) == 0xFFFFFFFF) {
          goto LABEL_54;
        }
LABEL_45:
        if (v6) {
          size_t v25 = v10;
        }
        else {
          size_t v25 = v10 + 1;
        }
        memcpy(a1, a2, v25);
        goto LABEL_56;
      }
    }
    if (!a2[v10])
    {
LABEL_49:
      int v26 = *(void (**)(unsigned __int16 *, unsigned __int8 *, uint64_t))(v5 + 24);
      v26(a1, a2, AssociatedTypeWitness);
      v26((unsigned __int16 *)(((unint64_t)a1 + v33) & v9), (unsigned __int8 *)((unint64_t)&a2[v33] & v9), AssociatedTypeWitness);
      goto LABEL_56;
    }
    int v21 = (a2[v10] - 1) << v14;
    if (v10 > 3) {
      int v21 = 0;
    }
    __dst = a1;
    if (v10)
    {
      if (v10 <= 3) {
        int v22 = v10;
      }
      else {
        int v22 = 4;
      }
      switch(v22)
      {
        case 2:
          int v23 = *(unsigned __int16 *)a2;
          break;
        case 3:
          int v23 = *(unsigned __int16 *)a2 | (a2[2] << 16);
          break;
        case 4:
          int v23 = *(_DWORD *)a2;
          break;
        default:
          int v23 = *a2;
          break;
      }
    }
    else
    {
      int v23 = 0;
    }
    int v13 = (v23 | v21) + 1;
LABEL_43:
    a1 = __dst;
    uint64_t v5 = v32;
    if (v13)
    {
      int v24 = *(void (**)(unsigned __int16 *, uint64_t))(v32 + 8);
      v24(__dst, AssociatedTypeWitness);
      v24((unsigned __int16 *)(((unint64_t)__dst + v33) & v9), AssociatedTypeWitness);
      goto LABEL_45;
    }
    goto LABEL_49;
  }
  int v11 = *(uint64_t (**)(unsigned __int16 *, uint64_t, uint64_t))(v5 + 48);
  __dst = a1;
  int v12 = v11(a1, v6, AssociatedTypeWitness);
  int v13 = v11((unsigned __int16 *)a2, v6, AssociatedTypeWitness);
  if (!v12) {
    goto LABEL_43;
  }
  a1 = __dst;
  if (v13) {
    goto LABEL_45;
  }
LABEL_54:
  int v27 = *(void (**)(unsigned __int16 *, unsigned __int8 *, uint64_t))(v32 + 16);
  v27(a1, a2, AssociatedTypeWitness);
  v27((unsigned __int16 *)(((unint64_t)a1 + v33) & v9), (unsigned __int8 *)((unint64_t)&a2[v33] & v9), AssociatedTypeWitness);
  if (!v6) {
    *((unsigned char *)a1 + v10) = 0;
  }
LABEL_56:
  if (v6) {
    size_t v28 = v10;
  }
  else {
    size_t v28 = v10 + 1;
  }
  uint64_t v29 = swift_getAssociatedTypeWitness();
  uint64_t v30 = *(void *)(v29 - 8);
  (*(void (**)(unint64_t, unint64_t, uint64_t))(v30 + 24))(((unint64_t)a1 + v28 + *(unsigned __int8 *)(v30 + 80)) & ~(unint64_t)*(unsigned __int8 *)(v30 + 80), (unint64_t)&a2[v28 + *(unsigned __int8 *)(v30 + 80)] & ~(unint64_t)*(unsigned __int8 *)(v30 + 80), v29);
  return a1;
}

void *initializeWithTake for RangesCollection.Index(void *a1, unsigned __int16 *a2)
{
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v5 = *(void *)(AssociatedTypeWitness - 8);
  uint64_t v6 = *(unsigned int *)(v5 + 84);
  uint64_t v7 = *(void *)(v5 + 64);
  uint64_t v8 = *(unsigned __int8 *)(v5 + 80);
  uint64_t v9 = v7 + v8;
  size_t v10 = ((v7 + v8) & ~v8) + v7;
  if (!v6)
  {
    if (!*((unsigned char *)a2 + v10)) {
      goto LABEL_22;
    }
    int v11 = (*((unsigned __int8 *)a2 + v10) - 1) << (8 * v10);
    if (v10 > 3) {
      int v11 = 0;
    }
    if (v10)
    {
      int v12 = v10 <= 3 ? v10 : 4;
      switch(v12)
      {
        case 2:
          int v13 = *a2;
          break;
        case 3:
          int v13 = *a2 | (*((unsigned __int8 *)a2 + 2) << 16);
          break;
        case 4:
          int v13 = *(_DWORD *)a2;
          break;
        default:
          int v13 = *(unsigned __int8 *)a2;
          break;
      }
    }
    else
    {
      int v13 = 0;
    }
    if ((v13 | v11) == 0xFFFFFFFF) {
      goto LABEL_22;
    }
LABEL_18:
    if (v6) {
      size_t v14 = v10;
    }
    else {
      size_t v14 = v10 + 1;
    }
    memcpy(a1, a2, v14);
    goto LABEL_24;
  }
  if ((*(unsigned int (**)(unsigned __int16 *, uint64_t, uint64_t))(v5 + 48))(a2, v6, AssociatedTypeWitness)) {
    goto LABEL_18;
  }
LABEL_22:
  int v15 = *(void (**)(void *, unsigned __int16 *, uint64_t))(v5 + 32);
  v15(a1, a2, AssociatedTypeWitness);
  v15((void *)(((unint64_t)a1 + v9) & ~v8), (unsigned __int16 *)(((unint64_t)a2 + v9) & ~v8), AssociatedTypeWitness);
  if (!v6) {
    *((unsigned char *)a1 + v10) = 0;
  }
LABEL_24:
  if (v6) {
    size_t v16 = v10;
  }
  else {
    size_t v16 = v10 + 1;
  }
  uint64_t v17 = swift_getAssociatedTypeWitness();
  uint64_t v18 = *(void *)(v17 - 8);
  (*(void (**)(unint64_t, unint64_t, uint64_t))(v18 + 32))(((unint64_t)a1 + v16 + *(unsigned __int8 *)(v18 + 80)) & ~(unint64_t)*(unsigned __int8 *)(v18 + 80), ((unint64_t)a2 + v16 + *(unsigned __int8 *)(v18 + 80)) & ~(unint64_t)*(unsigned __int8 *)(v18 + 80), v17);
  return a1;
}

unsigned __int16 *assignWithTake for RangesCollection.Index(unsigned __int16 *a1, unsigned __int8 *a2)
{
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v5 = *(void *)(AssociatedTypeWitness - 8);
  uint64_t v6 = *(unsigned int *)(v5 + 84);
  uint64_t v7 = *(void *)(v5 + 64);
  uint64_t v8 = *(unsigned __int8 *)(v5 + 80);
  uint64_t v9 = ~v8;
  size_t v10 = ((v7 + v8) & ~v8) + v7;
  uint64_t v32 = v5;
  uint64_t v33 = v7 + v8;
  if (!v6)
  {
    char v14 = 8 * v10;
    if (*((unsigned char *)a1 + v10))
    {
      int v15 = (*((unsigned __int8 *)a1 + v10) - 1) << v14;
      if (v10 > 3) {
        int v15 = 0;
      }
      if (v10)
      {
        int v16 = v10 <= 3 ? v10 : 4;
        switch(v16)
        {
          case 2:
            int v17 = *a1;
            break;
          case 3:
            int v17 = *a1 | (*((unsigned __int8 *)a1 + 2) << 16);
            break;
          case 4:
            int v17 = *(_DWORD *)a1;
            break;
          default:
            int v17 = *(unsigned __int8 *)a1;
            break;
        }
      }
      else
      {
        int v17 = 0;
      }
      if ((v17 | v15) != 0xFFFFFFFF)
      {
        if (!a2[v10]) {
          goto LABEL_54;
        }
        int v18 = (a2[v10] - 1) << v14;
        if (v10 > 3) {
          int v18 = 0;
        }
        if (v10)
        {
          int v19 = v10 <= 3 ? v10 : 4;
          switch(v19)
          {
            case 2:
              int v20 = *(unsigned __int16 *)a2;
              break;
            case 3:
              int v20 = *(unsigned __int16 *)a2 | (a2[2] << 16);
              break;
            case 4:
              int v20 = *(_DWORD *)a2;
              break;
            default:
              int v20 = *a2;
              break;
          }
        }
        else
        {
          int v20 = 0;
        }
        if ((v20 | v18) == 0xFFFFFFFF) {
          goto LABEL_54;
        }
LABEL_45:
        if (v6) {
          size_t v25 = v10;
        }
        else {
          size_t v25 = v10 + 1;
        }
        memcpy(a1, a2, v25);
        goto LABEL_56;
      }
    }
    if (!a2[v10])
    {
LABEL_49:
      int v26 = *(void (**)(unsigned __int16 *, unsigned __int8 *, uint64_t))(v5 + 40);
      v26(a1, a2, AssociatedTypeWitness);
      v26((unsigned __int16 *)(((unint64_t)a1 + v33) & v9), (unsigned __int8 *)((unint64_t)&a2[v33] & v9), AssociatedTypeWitness);
      goto LABEL_56;
    }
    int v21 = (a2[v10] - 1) << v14;
    if (v10 > 3) {
      int v21 = 0;
    }
    __dst = a1;
    if (v10)
    {
      if (v10 <= 3) {
        int v22 = v10;
      }
      else {
        int v22 = 4;
      }
      switch(v22)
      {
        case 2:
          int v23 = *(unsigned __int16 *)a2;
          break;
        case 3:
          int v23 = *(unsigned __int16 *)a2 | (a2[2] << 16);
          break;
        case 4:
          int v23 = *(_DWORD *)a2;
          break;
        default:
          int v23 = *a2;
          break;
      }
    }
    else
    {
      int v23 = 0;
    }
    int v13 = (v23 | v21) + 1;
LABEL_43:
    a1 = __dst;
    uint64_t v5 = v32;
    if (v13)
    {
      int v24 = *(void (**)(unsigned __int16 *, uint64_t))(v32 + 8);
      v24(__dst, AssociatedTypeWitness);
      v24((unsigned __int16 *)(((unint64_t)__dst + v33) & v9), AssociatedTypeWitness);
      goto LABEL_45;
    }
    goto LABEL_49;
  }
  int v11 = *(uint64_t (**)(unsigned __int16 *, uint64_t, uint64_t))(v5 + 48);
  __dst = a1;
  int v12 = v11(a1, v6, AssociatedTypeWitness);
  int v13 = v11((unsigned __int16 *)a2, v6, AssociatedTypeWitness);
  if (!v12) {
    goto LABEL_43;
  }
  a1 = __dst;
  if (v13) {
    goto LABEL_45;
  }
LABEL_54:
  int v27 = *(void (**)(unsigned __int16 *, unsigned __int8 *, uint64_t))(v32 + 32);
  v27(a1, a2, AssociatedTypeWitness);
  v27((unsigned __int16 *)(((unint64_t)a1 + v33) & v9), (unsigned __int8 *)((unint64_t)&a2[v33] & v9), AssociatedTypeWitness);
  if (!v6) {
    *((unsigned char *)a1 + v10) = 0;
  }
LABEL_56:
  if (v6) {
    size_t v28 = v10;
  }
  else {
    size_t v28 = v10 + 1;
  }
  uint64_t v29 = swift_getAssociatedTypeWitness();
  uint64_t v30 = *(void *)(v29 - 8);
  (*(void (**)(unint64_t, unint64_t, uint64_t))(v30 + 40))(((unint64_t)a1 + v28 + *(unsigned __int8 *)(v30 + 80)) & ~(unint64_t)*(unsigned __int8 *)(v30 + 80), (unint64_t)&a2[v28 + *(unsigned __int8 *)(v30 + 80)] & ~(unint64_t)*(unsigned __int8 *)(v30 + 80), v29);
  return a1;
}

uint64_t getEnumTagSinglePayload for RangesCollection.Index(unsigned __int16 *a1, unsigned int a2)
{
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v4 = *(void *)(AssociatedTypeWitness - 8);
  uint64_t v5 = *(unsigned int *)(v4 + 84);
  if (v5) {
    unsigned int v6 = v5 - 1;
  }
  else {
    unsigned int v6 = 0;
  }
  uint64_t v7 = swift_getAssociatedTypeWitness();
  uint64_t v8 = *(void *)(v7 - 8);
  unsigned int v9 = *(_DWORD *)(v8 + 84);
  if (v9 <= v6) {
    unsigned int v10 = v6;
  }
  else {
    unsigned int v10 = *(_DWORD *)(v8 + 84);
  }
  uint64_t v11 = *(void *)(v4 + 64);
  uint64_t v12 = *(unsigned __int8 *)(v8 + 80);
  if (v5) {
    uint64_t v13 = *(void *)(v4 + 64);
  }
  else {
    uint64_t v13 = v11 + 1;
  }
  if (!a2) {
    return 0;
  }
  uint64_t v14 = v13 + ((v11 + *(unsigned __int8 *)(v4 + 80)) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80)) + v12;
  if (a2 <= v10) {
    goto LABEL_30;
  }
  uint64_t v15 = (v14 & ~v12) + *(void *)(*(void *)(v7 - 8) + 64);
  char v16 = 8 * v15;
  if (v15 <= 3)
  {
    unsigned int v18 = ((a2 - v10 + ~(-1 << v16)) >> v16) + 1;
    if (HIWORD(v18))
    {
      int v17 = *(_DWORD *)((char *)a1 + v15);
      if (!v17) {
        goto LABEL_30;
      }
      goto LABEL_20;
    }
    if (v18 > 0xFF)
    {
      int v17 = *(unsigned __int16 *)((char *)a1 + v15);
      if (!*(unsigned __int16 *)((char *)a1 + v15)) {
        goto LABEL_30;
      }
      goto LABEL_20;
    }
    if (v18 < 2)
    {
LABEL_30:
      if (v10)
      {
        if (v6 < v9)
        {
          int v22 = *(uint64_t (**)(unint64_t))(v8 + 48);
          return v22(((unint64_t)a1 + v14) & ~v12);
        }
        if (v5)
        {
          int v24 = (*(uint64_t (**)(unsigned __int16 *, uint64_t, uint64_t))(v4 + 48))(a1, v5, AssociatedTypeWitness);
          BOOL v25 = v24 != 0;
          uint64_t result = (v24 - 1);
          if (result != 0 && v25) {
            return result;
          }
        }
      }
      return 0;
    }
  }
  int v17 = *((unsigned __int8 *)a1 + v15);
  if (!*((unsigned char *)a1 + v15)) {
    goto LABEL_30;
  }
LABEL_20:
  int v19 = (v17 - 1) << v16;
  if (v15 > 3) {
    int v19 = 0;
  }
  if (v15)
  {
    if (v15 <= 3) {
      int v20 = v15;
    }
    else {
      int v20 = 4;
    }
    switch(v20)
    {
      case 2:
        int v21 = *a1;
        break;
      case 3:
        int v21 = *a1 | (*((unsigned __int8 *)a1 + 2) << 16);
        break;
      case 4:
        int v21 = *(_DWORD *)a1;
        break;
      default:
        int v21 = *(unsigned __int8 *)a1;
        break;
    }
  }
  else
  {
    int v21 = 0;
  }
  return v10 + (v21 | v19) + 1;
}

void storeEnumTagSinglePayload for RangesCollection.Index(unsigned char *a1, uint64_t a2, unsigned int a3)
{
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v6 = *(void *)(AssociatedTypeWitness - 8);
  uint64_t v7 = *(unsigned int *)(v6 + 84);
  if (v7) {
    unsigned int v8 = v7 - 1;
  }
  else {
    unsigned int v8 = 0;
  }
  int v9 = 0;
  uint64_t v10 = *(void *)(swift_getAssociatedTypeWitness() - 8);
  uint64_t v11 = v10;
  unsigned int v12 = *(_DWORD *)(v10 + 84);
  if (v12 <= v8) {
    unsigned int v13 = v8;
  }
  else {
    unsigned int v13 = *(_DWORD *)(v10 + 84);
  }
  uint64_t v14 = *(void *)(v6 + 64);
  unint64_t v15 = (v14 + *(unsigned __int8 *)(v6 + 80)) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80);
  size_t v16 = v15 + v14;
  if (v7) {
    size_t v17 = v15 + v14;
  }
  else {
    size_t v17 = v16 + 1;
  }
  uint64_t v18 = *(unsigned __int8 *)(v10 + 80);
  size_t v19 = ((v17 + v18) & ~v18) + *(void *)(v10 + 64);
  if (a3 <= v13) {
    goto LABEL_20;
  }
  if (v19 <= 3)
  {
    unsigned int v20 = ((a3 - v13 + ~(-1 << (8 * v19))) >> (8 * v19)) + 1;
    if (HIWORD(v20))
    {
      int v9 = 4;
      if (v13 < a2) {
        goto LABEL_21;
      }
      goto LABEL_13;
    }
    if (v20 >= 0x100) {
      int v9 = 2;
    }
    else {
      int v9 = v20 > 1;
    }
LABEL_20:
    if (v13 < a2) {
      goto LABEL_21;
    }
LABEL_13:
    switch(v9)
    {
      case 1:
        a1[v19] = 0;
        if (!a2) {
          return;
        }
        goto LABEL_29;
      case 2:
        *(_WORD *)&a1[v19] = 0;
        if (!a2) {
          return;
        }
        goto LABEL_29;
      case 3:
        goto LABEL_70;
      case 4:
        *(_DWORD *)&a1[v19] = 0;
        goto LABEL_28;
      default:
LABEL_28:
        if (a2)
        {
LABEL_29:
          if (v8 >= v12)
          {
            if (v8 >= a2)
            {
              if ((int)a2 + 1 <= v7)
              {
                if (a2 != -1)
                {
                  uint64_t v30 = *(void (**)(unsigned char *, void, uint64_t, uint64_t))(v6 + 56);
                  v30(a1, (a2 + 1), v7, AssociatedTypeWitness);
                }
              }
              else
              {
                if (v16 <= 3) {
                  int v28 = ~(-1 << (8 * v16));
                }
                else {
                  int v28 = -1;
                }
                if (v16)
                {
                  int v26 = v28 & (a2 - v7);
                  if (v16 <= 3) {
                    int v29 = v16;
                  }
                  else {
                    int v29 = 4;
                  }
                  bzero(a1, v16);
                  switch(v29)
                  {
                    case 2:
LABEL_67:
                      *(_WORD *)a1 = v26;
                      break;
                    case 3:
LABEL_68:
                      *(_WORD *)a1 = v26;
                      a1[2] = BYTE2(v26);
                      break;
                    case 4:
LABEL_69:
                      *(_DWORD *)a1 = v26;
                      break;
                    default:
LABEL_55:
                      *a1 = v26;
                      break;
                  }
                }
              }
            }
            else
            {
              if (v17 <= 3) {
                int v25 = ~(-1 << (8 * v17));
              }
              else {
                int v25 = -1;
              }
              if (v17)
              {
                int v26 = v25 & (~v8 + a2);
                if (v17 <= 3) {
                  int v27 = v17;
                }
                else {
                  int v27 = 4;
                }
                bzero(a1, v17);
                switch(v27)
                {
                  case 2:
                    goto LABEL_67;
                  case 3:
                    goto LABEL_68;
                  case 4:
                    goto LABEL_69;
                  default:
                    goto LABEL_55;
                }
              }
            }
          }
          else
          {
            int v24 = *(void (**)(unint64_t, uint64_t))(v11 + 56);
            v24((unint64_t)&a1[v17 + v18] & ~v18, a2);
          }
        }
        break;
    }
    return;
  }
  int v9 = 1;
  if (v13 >= a2) {
    goto LABEL_13;
  }
LABEL_21:
  unsigned int v21 = ~v13 + a2;
  if (v19 < 4)
  {
    int v22 = (v21 >> (8 * v19)) + 1;
    if (v19)
    {
      int v23 = v21 & ~(-1 << (8 * v19));
      bzero(a1, v19);
      if (v19 == 3)
      {
        *(_WORD *)a1 = v23;
        a1[2] = BYTE2(v23);
      }
      else if (v19 == 2)
      {
        *(_WORD *)a1 = v23;
      }
      else
      {
        *a1 = v23;
      }
    }
  }
  else
  {
    bzero(a1, v19);
    *(_DWORD *)a1 = v21;
    int v22 = 1;
  }
  switch(v9)
  {
    case 1:
      a1[v19] = v22;
      break;
    case 2:
      *(_WORD *)&a1[v19] = v22;
      break;
    case 3:
LABEL_70:
      __break(1u);
      JUMPOUT(0x209F94BD0);
    case 4:
      *(_DWORD *)&a1[v19] = v22;
      break;
    default:
      return;
  }
}

uint64_t destroy for ZSearcher()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  return swift_release();
}

uint64_t initializeWithCopy for ZSearcher(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  uint64_t v3 = *(void *)(a2 + 24);
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  *(void *)(a1 + 24) = v3;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_retain();
  return a1;
}

void *assignWithCopy for ZSearcher(void *a1, void *a2)
{
  *a1 = *a2;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v4 = a2[3];
  a1[2] = a2[2];
  a1[3] = v4;
  swift_retain();
  swift_release();
  return a1;
}

__n128 __swift_memcpy32_8(_OWORD *a1, uint64_t a2)
{
  __n128 result = *(__n128 *)a2;
  long long v3 = *(_OWORD *)(a2 + 16);
  *a1 = *(_OWORD *)a2;
  a1[1] = v3;
  return result;
}

_OWORD *assignWithTake for ZSearcher(_OWORD *a1, _OWORD *a2)
{
  *a1 = *a2;
  swift_bridgeObjectRelease();
  a1[1] = a2[1];
  swift_release();
  return a1;
}

uint64_t getEnumTagSinglePayload for ZSearcher(uint64_t *a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *((unsigned char *)a1 + 32)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  uint64_t v2 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for ZSearcher(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)(result + 16) = 0;
    *(void *)(result + 24) = 0;
    *(void *)__n128 result = a2 ^ 0x80000000;
    *(void *)(result + 8) = 0;
    if (a3 < 0) {
      *(unsigned char *)(result + 32) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)__n128 result = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 32) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

uint64_t *initializeBufferWithCopyOfBuffer for Range(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v4 = a1;
  uint64_t v5 = *(void *)(a3 + 16);
  uint64_t v6 = *(void *)(v5 - 8);
  uint64_t v7 = *(void *)(v6 + 64);
  uint64_t v8 = *(_DWORD *)(v6 + 80);
  uint64_t v9 = ~v8;
  uint64_t v10 = v7 + v8;
  unint64_t v11 = ((v7 + v8) & ~v8) + v7;
  if (v8 > 7 || (*(_DWORD *)(v6 + 80) & 0x100000) != 0 || v11 > 0x18)
  {
    uint64_t v14 = *a2;
    *uint64_t v4 = *a2;
    uint64_t v4 = (uint64_t *)(v14 + ((v8 + 16) & v9));
    swift_retain();
  }
  else
  {
    unint64_t v15 = *(void (**)(uint64_t *, uint64_t *, uint64_t))(v6 + 16);
    v15(a1, a2, v5);
    v15((uint64_t *)(((unint64_t)v4 + v10) & v9), (uint64_t *)(((unint64_t)a2 + v10) & v9), v5);
  }
  return v4;
}

uint64_t destroy for Range(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 16);
  uint64_t v6 = *(void *)(v3 - 8) + 8;
  uint64_t v7 = *(uint64_t (**)(unint64_t, uint64_t))v6;
  (*(void (**)(uint64_t, uint64_t))v6)(a1, v3);
  unint64_t v4 = (*(void *)(v6 + 56) + a1 + *(unsigned __int8 *)(v6 + 72)) & ~(unint64_t)*(unsigned __int8 *)(v6 + 72);

  return v7(v4, v3);
}

unint64_t initializeWithCopy for Range(unint64_t a1, unint64_t a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(a3 + 16);
  uint64_t v6 = *(void *)(v5 - 8);
  uint64_t v7 = *(void (**)(unint64_t, unint64_t, uint64_t))(v6 + 16);
  uint64_t v8 = v6 + 16;
  v7(a1, a2, v5);
  v7((*(void *)(v8 + 48) + *(unsigned __int8 *)(v8 + 64) + a1) & ~(unint64_t)*(unsigned __int8 *)(v8 + 64), (*(void *)(v8 + 48) + *(unsigned __int8 *)(v8 + 64) + a2) & ~(unint64_t)*(unsigned __int8 *)(v8 + 64), v5);
  return a1;
}

unint64_t assignWithCopy for Range(unint64_t a1, unint64_t a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(a3 + 16);
  uint64_t v6 = *(void *)(v5 - 8);
  uint64_t v7 = *(void (**)(unint64_t, unint64_t, uint64_t))(v6 + 24);
  uint64_t v8 = v6 + 24;
  v7(a1, a2, v5);
  v7((*(void *)(v8 + 40) + *(unsigned __int8 *)(v8 + 56) + a1) & ~(unint64_t)*(unsigned __int8 *)(v8 + 56), (*(void *)(v8 + 40) + *(unsigned __int8 *)(v8 + 56) + a2) & ~(unint64_t)*(unsigned __int8 *)(v8 + 56), v5);
  return a1;
}

unint64_t initializeWithTake for Range(unint64_t a1, unint64_t a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(a3 + 16);
  uint64_t v6 = *(void *)(v5 - 8);
  uint64_t v7 = *(void (**)(unint64_t, unint64_t, uint64_t))(v6 + 32);
  uint64_t v8 = v6 + 32;
  v7(a1, a2, v5);
  v7((*(void *)(v8 + 32) + *(unsigned __int8 *)(v8 + 48) + a1) & ~(unint64_t)*(unsigned __int8 *)(v8 + 48), (*(void *)(v8 + 32) + *(unsigned __int8 *)(v8 + 48) + a2) & ~(unint64_t)*(unsigned __int8 *)(v8 + 48), v5);
  return a1;
}

unint64_t assignWithTake for Range(unint64_t a1, unint64_t a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(a3 + 16);
  uint64_t v6 = *(void *)(v5 - 8);
  uint64_t v7 = *(void (**)(unint64_t, unint64_t, uint64_t))(v6 + 40);
  uint64_t v8 = v6 + 40;
  v7(a1, a2, v5);
  v7((*(void *)(v8 + 24) + *(unsigned __int8 *)(v8 + 40) + a1) & ~(unint64_t)*(unsigned __int8 *)(v8 + 40), (*(void *)(v8 + 24) + *(unsigned __int8 *)(v8 + 40) + a2) & ~(unint64_t)*(unsigned __int8 *)(v8 + 40), v5);
  return a1;
}

uint64_t getEnumTagSinglePayload for Range(unsigned __int16 *a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(*(void *)(a3 + 16) - 8);
  unsigned int v5 = *(_DWORD *)(v4 + 84);
  if (!a2) {
    return 0;
  }
  unsigned int v7 = a2 - v5;
  if (a2 <= v5) {
    goto LABEL_19;
  }
  uint64_t v6 = *(void *)(*(void *)(*(void *)(a3 + 16) - 8) + 64);
  uint64_t v8 = ((v6 + *(unsigned __int8 *)(v4 + 80)) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80)) + v6;
  char v9 = 8 * v8;
  if (v8 <= 3)
  {
    unsigned int v11 = ((v7 + ~(-1 << v9)) >> v9) + 1;
    if (HIWORD(v11))
    {
      int v10 = *(_DWORD *)((char *)a1 + v8);
      if (!v10) {
        goto LABEL_19;
      }
      goto LABEL_11;
    }
    if (v11 > 0xFF)
    {
      int v10 = *(unsigned __int16 *)((char *)a1 + v8);
      if (!*(unsigned __int16 *)((char *)a1 + v8)) {
        goto LABEL_19;
      }
      goto LABEL_11;
    }
    if (v11 < 2)
    {
LABEL_19:
      if (v5) {
        return (*(uint64_t (**)(void))(v4 + 48))();
      }
      return 0;
    }
  }
  int v10 = *((unsigned __int8 *)a1 + v8);
  if (!*((unsigned char *)a1 + v8)) {
    goto LABEL_19;
  }
LABEL_11:
  int v12 = (v10 - 1) << v9;
  if (v8 > 3) {
    int v12 = 0;
  }
  if (v8)
  {
    if (v8 > 3) {
      LODWORD(v8) = 4;
    }
    switch((int)v8)
    {
      case 2:
        LODWORD(v8) = *a1;
        break;
      case 3:
        LODWORD(v8) = *a1 | (*((unsigned __int8 *)a1 + 2) << 16);
        break;
      case 4:
        LODWORD(v8) = *(_DWORD *)a1;
        break;
      default:
        LODWORD(v8) = *(unsigned __int8 *)a1;
        break;
    }
  }
  return v5 + (v8 | v12) + 1;
}

void storeEnumTagSinglePayload for Range(char *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v6 = *(void *)(*(void *)(a4 + 16) - 8);
  unsigned int v7 = *(_DWORD *)(v6 + 84);
  size_t v8 = ((*(void *)(v6 + 64) + *(unsigned __int8 *)(v6 + 80)) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80))
     + *(void *)(v6 + 64);
  BOOL v9 = a3 >= v7;
  unsigned int v10 = a3 - v7;
  if (v10 != 0 && v9)
  {
    if (v8 <= 3)
    {
      unsigned int v14 = ((v10 + ~(-1 << (8 * v8))) >> (8 * v8)) + 1;
      if (HIWORD(v14))
      {
        int v11 = 4;
      }
      else if (v14 >= 0x100)
      {
        int v11 = 2;
      }
      else
      {
        int v11 = v14 > 1;
      }
    }
    else
    {
      int v11 = 1;
    }
  }
  else
  {
    int v11 = 0;
  }
  if (v7 < a2)
  {
    unsigned int v12 = ~v7 + a2;
    if (v8 < 4)
    {
      int v13 = (v12 >> (8 * v8)) + 1;
      if (v8)
      {
        int v15 = v12 & ~(-1 << (8 * v8));
        bzero(a1, v8);
        if (v8 == 3)
        {
          *(_WORD *)a1 = v15;
          a1[2] = BYTE2(v15);
        }
        else if (v8 == 2)
        {
          *(_WORD *)a1 = v15;
        }
        else
        {
          *a1 = v15;
        }
      }
    }
    else
    {
      bzero(a1, v8);
      *(_DWORD *)a1 = v12;
      int v13 = 1;
    }
    switch(v11)
    {
      case 1:
        a1[v8] = v13;
        return;
      case 2:
        *(_WORD *)&a1[v8] = v13;
        return;
      case 3:
        goto LABEL_34;
      case 4:
        *(_DWORD *)&a1[v8] = v13;
        return;
      default:
        return;
    }
  }
  switch(v11)
  {
    case 1:
      a1[v8] = 0;
      if (!a2) {
        return;
      }
      goto LABEL_21;
    case 2:
      *(_WORD *)&a1[v8] = 0;
      if (!a2) {
        return;
      }
      goto LABEL_21;
    case 3:
LABEL_34:
      __break(1u);
      JUMPOUT(0x209F955A4);
    case 4:
      *(_DWORD *)&a1[v8] = 0;
      goto LABEL_20;
    default:
LABEL_20:
      if (a2)
      {
LABEL_21:
        size_t v16 = *(void (**)(void))(v6 + 56);
        v16();
      }
      return;
  }
}

uint64_t getEnumTag for Optional(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(*(void *)(a2 + 16) - 8) + 48))(a1, 1);
}

uint64_t destructiveInjectEnumTag for Optional(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(*(void *)(a3 + 16) - 8) + 56))(a1, a2, 1);
}

unint64_t lazy protocol witness table accessor for type MatchingOptions.Representation and conformance MatchingOptions.Representation()
{
  unint64_t result = lazy protocol witness table cache variable for type MatchingOptions.Representation and conformance MatchingOptions.Representation;
  if (!lazy protocol witness table cache variable for type MatchingOptions.Representation and conformance MatchingOptions.Representation)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type MatchingOptions.Representation and conformance MatchingOptions.Representation);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type MatchingOptions.Representation and conformance MatchingOptions.Representation;
  if (!lazy protocol witness table cache variable for type MatchingOptions.Representation and conformance MatchingOptions.Representation)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type MatchingOptions.Representation and conformance MatchingOptions.Representation);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type MatchingOptions.Representation and conformance MatchingOptions.Representation;
  if (!lazy protocol witness table cache variable for type MatchingOptions.Representation and conformance MatchingOptions.Representation)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type MatchingOptions.Representation and conformance MatchingOptions.Representation);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type MatchingOptions.Representation and conformance MatchingOptions.Representation;
  if (!lazy protocol witness table cache variable for type MatchingOptions.Representation and conformance MatchingOptions.Representation)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type MatchingOptions.Representation and conformance MatchingOptions.Representation);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type RegexSemanticLevel.Representation and conformance RegexSemanticLevel.Representation()
{
  unint64_t result = lazy protocol witness table cache variable for type RegexSemanticLevel.Representation and conformance RegexSemanticLevel.Representation;
  if (!lazy protocol witness table cache variable for type RegexSemanticLevel.Representation and conformance RegexSemanticLevel.Representation)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type RegexSemanticLevel.Representation and conformance RegexSemanticLevel.Representation);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type RegexWordBoundaryKind.Representation and conformance RegexWordBoundaryKind.Representation()
{
  unint64_t result = lazy protocol witness table cache variable for type RegexWordBoundaryKind.Representation and conformance RegexWordBoundaryKind.Representation;
  if (!lazy protocol witness table cache variable for type RegexWordBoundaryKind.Representation and conformance RegexWordBoundaryKind.Representation)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type RegexWordBoundaryKind.Representation and conformance RegexWordBoundaryKind.Representation);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type RegexRepetitionBehavior.Kind and conformance RegexRepetitionBehavior.Kind()
{
  unint64_t result = lazy protocol witness table cache variable for type RegexRepetitionBehavior.Kind and conformance RegexRepetitionBehavior.Kind;
  if (!lazy protocol witness table cache variable for type RegexRepetitionBehavior.Kind and conformance RegexRepetitionBehavior.Kind)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type RegexRepetitionBehavior.Kind and conformance RegexRepetitionBehavior.Kind);
  }
  return result;
}

uint64_t associated type witness table accessor for ExpressibleByIntegerLiteral.IntegerLiteralType : _ExpressibleByBuiltinIntegerLiteral in TypedInt<A>()
{
  return MEMORY[0x263F8D748];
}

uint64_t base witness table accessor for Equatable in TypedInt<A>()
{
  return swift_getWitnessTable();
}

uint64_t base witness table accessor for Collection in <> TypedIndex<A, B>()
{
  return swift_getWitnessTable();
}

uint64_t associated type witness table accessor for Collection.Indices : BidirectionalCollection in <> TypedIndex<A, B>()
{
  return associated type witness table accessor for Collection.Indices : BidirectionalCollection in <> TypedIndex<A, B>();
}

{
  swift_getWitnessTable();
  return swift_getWitnessTable();
}

uint64_t associated type witness table accessor for Collection.SubSequence : BidirectionalCollection in <> TypedIndex<A, B>()
{
  return associated type witness table accessor for Collection.Indices : BidirectionalCollection in <> TypedIndex<A, B>();
}

uint64_t associated type witness table accessor for Collection.SubSequence : MutableCollection in <> TypedIndex<A, B>()
{
  return associated type witness table accessor for Collection.Indices : BidirectionalCollection in <> TypedIndex<A, B>();
}

uint64_t base witness table accessor for BidirectionalCollection in <> TypedIndex<A, B>()
{
  return swift_getWitnessTable();
}

uint64_t associated type witness table accessor for Collection.Indices : RandomAccessCollection in <> TypedIndex<A, B>()
{
  return associated type witness table accessor for Collection.Indices : BidirectionalCollection in <> TypedIndex<A, B>();
}

uint64_t associated type witness table accessor for Collection.SubSequence : RandomAccessCollection in <> TypedIndex<A, B>()
{
  return associated type witness table accessor for Collection.Indices : BidirectionalCollection in <> TypedIndex<A, B>();
}

uint64_t associated type witness table accessor for Sequence.Iterator : IteratorProtocol in TypedIndex<A, B>()
{
  return swift_getWitnessTable();
}

uint64_t base witness table accessor for Sequence in TypedIndex<A, B>()
{
  return swift_getWitnessTable();
}

uint64_t associated type witness table accessor for Collection.Index : Comparable in TypedIndex<A, B>()
{
  return swift_getWitnessTable();
}

uint64_t associated type witness table accessor for Collection.Indices : Collection in TypedIndex<A, B>()
{
  return swift_getWitnessTable();
}

uint64_t associated type witness table accessor for Collection.SubSequence : Collection in TypedIndex<A, B>()
{
  return swift_getWitnessTable();
}

_UNKNOWN **associated type witness table accessor for ProcessorProtocol.Instruction : InstructionProtocol in Processor()
{
  return &protocol witness table for Instruction;
}

unint64_t instantiation function for generic protocol witness table for Processor(uint64_t a1)
{
  unint64_t result = lazy protocol witness table accessor for type Processor and conformance Processor();
  *(void *)(a1 + 8) = result;
  return result;
}

unint64_t lazy protocol witness table accessor for type Processor and conformance Processor()
{
  unint64_t result = lazy protocol witness table cache variable for type Processor and conformance Processor;
  if (!lazy protocol witness table cache variable for type Processor and conformance Processor)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Processor and conformance Processor);
  }
  return result;
}

uint64_t instantiation function for generic protocol witness table for ZSearcher<A>(uint64_t a1)
{
  uint64_t result = swift_getWitnessTable();
  *(void *)(a1 + 8) = result;
  return result;
}

uint64_t instantiation function for generic protocol witness table for <> PredicateSearcher<A>(uint64_t a1)
{
  uint64_t result = swift_getWitnessTable();
  *(void *)(a1 + 8) = result;
  return result;
}

uint64_t instantiation function for generic protocol witness table for PredicateSearcher<A>(uint64_t a1)
{
  uint64_t result = swift_getWitnessTable();
  *(void *)(a1 + 8) = result;
  return result;
}

uint64_t associated type witness table accessor for CollectionSearcher.Searched : Collection in PatternOrEmpty<A>()
{
  return swift_getAssociatedConformanceWitness();
}

uint64_t instantiation function for generic protocol witness table for <> NaivePatternSearcher<A, B>(uint64_t a1)
{
  uint64_t result = swift_getWitnessTable();
  *(void *)(a1 + 8) = result;
  return result;
}

uint64_t instantiation function for generic protocol witness table for NaivePatternSearcher<A, B>(uint64_t a1)
{
  uint64_t result = swift_getWitnessTable();
  *(void *)(a1 + 8) = result;
  return result;
}

uint64_t instantiation function for generic protocol witness table for <> ConsumerSearcher<A>(uint64_t a1)
{
  *(void *)(a1 + 8) = swift_getWitnessTable();
  uint64_t result = swift_getWitnessTable();
  *(void *)(a1 + 16) = result;
  return result;
}

{
  uint64_t result;

  uint64_t result = swift_getWitnessTable();
  *(void *)(a1 + 8) = result;
  return result;
}

{
  uint64_t result;

  *(void *)(a1 + 8) = swift_getWitnessTable();
  uint64_t result = swift_getWitnessTable();
  *(void *)(a1 + 16) = result;
  return result;
}

{
  uint64_t result;

  uint64_t result = swift_getWitnessTable();
  *(void *)(a1 + 8) = result;
  return result;
}

{
  uint64_t result;

  uint64_t result = swift_getWitnessTable();
  *(void *)(a1 + 8) = result;
  return result;
}

uint64_t base witness table accessor for Sequence in RegexMatchesCollection<A>()
{
  return swift_getWitnessTable();
}

uint64_t associated type witness table accessor for Collection.Index : Comparable in RegexMatchesCollection<A>()
{
  return swift_getWitnessTable();
}

uint64_t base witness table accessor for Equatable in RegexMatchesCollection<A>.Index()
{
  return swift_getWitnessTable();
}

uint64_t associated type witness table accessor for Sequence.Iterator : IteratorProtocol in RegexMatchesCollection<A>()
{
  return swift_getWitnessTable();
}

uint64_t associated type witness table accessor for Sequence.Iterator : IteratorProtocol in ReversedMatchesCollection<A>()
{
  return swift_getWitnessTable();
}

uint64_t base witness table accessor for Equatable in MatchesCollection<A>.Index()
{
  return swift_getWitnessTable();
}

uint64_t base witness table accessor for Sequence in MatchesCollection<A>()
{
  return swift_getWitnessTable();
}

uint64_t associated type witness table accessor for Collection.Index : Comparable in MatchesCollection<A>()
{
  return swift_getWitnessTable();
}

uint64_t associated type witness table accessor for Sequence.Iterator : IteratorProtocol in MatchesCollection<A>()
{
  return swift_getWitnessTable();
}

uint64_t instantiation function for generic protocol witness table for <> PredicateConsumer<A>(uint64_t a1)
{
  uint64_t result = swift_getWitnessTable();
  *(void *)(a1 + 8) = result;
  return result;
}

{
  uint64_t result;

  uint64_t result = swift_getWitnessTable();
  *(void *)(a1 + 8) = result;
  return result;
}

uint64_t instantiation function for generic protocol witness table for PredicateConsumer<A>(uint64_t a1)
{
  uint64_t result = swift_getWitnessTable();
  *(void *)(a1 + 8) = result;
  return result;
}

uint64_t associated type witness table accessor for CollectionConsumer.Consumed : BidirectionalCollection in <> PredicateConsumer<A>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return *(void *)(a3 - 8);
}

uint64_t associated type witness table accessor for CollectionConsumer.Consumed : Collection in PredicateConsumer<A>(uint64_t a1, uint64_t a2)
{
  return *(void *)(a2 + 24);
}

uint64_t associated type witness table accessor for CollectionConsumer.Consumed : BidirectionalCollection in <> ManyConsumer<A>()
{
  return swift_getAssociatedConformanceWitness();
}

uint64_t instantiation function for generic protocol witness table for <> ManyConsumer<A>(uint64_t a1)
{
  uint64_t result = swift_getWitnessTable();
  *(void *)(a1 + 8) = result;
  return result;
}

uint64_t associated type witness table accessor for CollectionConsumer.Consumed : Collection in ManyConsumer<A>()
{
  return swift_getAssociatedConformanceWitness();
}

uint64_t instantiation function for generic protocol witness table for <> FixedPatternConsumer<A, B>(uint64_t a1)
{
  uint64_t result = swift_getWitnessTable();
  *(void *)(a1 + 8) = result;
  return result;
}

uint64_t base witness table accessor for Equatable in RangesCollection<A>.Index()
{
  return swift_getWitnessTable();
}

uint64_t associated type witness table accessor for CollectionConsumer.Consumed : Collection in FixedPatternConsumer<A, B>(uint64_t a1, uint64_t a2)
{
  return *(void *)(a2 + 32);
}

uint64_t associated type witness table accessor for Sequence.Iterator : IteratorProtocol in SplitCollection<A>()
{
  return swift_getWitnessTable();
}

uint64_t base witness table accessor for Sequence in RegexRangesCollection<A>()
{
  return swift_getWitnessTable();
}

uint64_t base witness table accessor for Sequence in RangesCollection<A>()
{
  return swift_getWitnessTable();
}

uint64_t associated type witness table accessor for Collection.Index : Comparable in RangesCollection<A>()
{
  return swift_getWitnessTable();
}

uint64_t associated type witness table accessor for Sequence.Iterator : IteratorProtocol in RegexRangesCollection<A>()
{
  return swift_getWitnessTable();
}

uint64_t associated type witness table accessor for Sequence.Iterator : IteratorProtocol in RangesCollection<A>()
{
  return swift_getWitnessTable();
}

uint64_t type metadata accessor for RangesIterator()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t partial apply for implicit closure #1 in RegexRangesCollection.Iterator.next()()
{
  return swift_bridgeObjectRelease();
}

uint64_t outlined consume of Regex<A1.RegexOutput>.Match?<A><A1>(uint64_t a1, uint64_t a2)
{
  if (a2)
  {
    swift_bridgeObjectRelease();
    return swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t type metadata accessor for RegexMatchesCollection.Index()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t type metadata accessor for Executor(uint64_t a1)
{
  return type metadata accessor for MEProgram(a1, (uint64_t *)&type metadata singleton initialization cache for Executor);
}

uint64_t outlined release of Processor(uint64_t a1)
{
  uint64_t v3 = *(void *)(a1 + 200);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  MEMORY[0x21050FBD0](v3);
  return a1;
}

uint64_t outlined assign with take of Processor._StoredCapture(long long *a1, uint64_t a2)
{
  long long v4 = *a1;
  *(unsigned char *)(a2 + 16) = *((unsigned char *)a1 + 16);
  *(_OWORD *)a2 = v4;
  unsigned int v5 = (_OWORD *)(a2 + 24);
  if (*(void *)(a2 + 48)) {
    __swift_destroy_boxed_opaque_existential_0(a2 + 24);
  }
  long long v6 = *(long long *)((char *)a1 + 40);
  *unsigned int v5 = *(long long *)((char *)a1 + 24);
  v5[1] = v6;
  uint64_t v7 = *((void *)a1 + 7);
  *(unsigned char *)(a2 + 64) = *((unsigned char *)a1 + 64);
  *(void *)(a2 + 56) = v7;
  return a2;
}

uint64_t type metadata accessor for Engine(uint64_t a1)
{
  return type metadata accessor for MEProgram(a1, (uint64_t *)&type metadata singleton initialization cache for Engine);
}

uint64_t outlined init with copy of MEProgram(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16))(a2, a1, v5);
  return a2;
}

uint64_t outlined destroy of Processor._StoredCapture(uint64_t a1)
{
  if (*(void *)(a1 + 48)) {
    __swift_destroy_boxed_opaque_existential_0(a1 + 24);
  }
  return a1;
}

uint64_t outlined init with copy of Processor._StoredCapture(long long *a1, uint64_t a2)
{
  long long v4 = *a1;
  *(unsigned char *)(a2 + 16) = *((unsigned char *)a1 + 16);
  *(_OWORD *)a2 = v4;
  uint64_t v5 = (_OWORD *)(a2 + 24);
  long long v6 = (long long *)((char *)a1 + 24);
  uint64_t v7 = *((void *)a1 + 6);
  if (v7)
  {
    *(void *)(a2 + 48) = v7;
    (**(void (***)(_OWORD *, _OWORD *))(v7 - 8))(v5, v6);
  }
  else
  {
    long long v8 = *(long long *)((char *)a1 + 40);
    *uint64_t v5 = *v6;
    v5[1] = v8;
  }
  uint64_t v9 = *((void *)a1 + 7);
  *(unsigned char *)(a2 + 64) = *((unsigned char *)a1 + 64);
  *(void *)(a2 + 56) = v9;
  return a2;
}

uint64_t outlined consume of Processor.SavePoint?(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (a8)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    return swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t outlined init with take of DSLTree.QuantificationKind(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 32))(a2, a1, v5);
  return a2;
}

uint64_t outlined copy of RegexMatchesCollection<A>.Index<A>(uint64_t a1, uint64_t a2)
{
  if (a2)
  {
    swift_bridgeObjectRetain();
    return swift_bridgeObjectRetain();
  }
  return result;
}

uint64_t type metadata accessor for SplitCollection.Iterator()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t partial apply for closure #1 in MatchesIterator.next()@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  return closure #1 in MatchesIterator.next()(a1, a2, *(void *)(v3 + 32), a3);
}

uint64_t partial apply for thunk for @callee_guaranteed (@in_guaranteed Range<A.CollectionSearcher.Searched.Collection.Index>, @in_guaranteed A.MatchingCollectionSearcher.Match) -> (@out _MatchResult<A>)(uint64_t a1)
{
  return thunk for @callee_guaranteed (@in_guaranteed Range<A.CollectionSearcher.Searched.Collection.Index>, @in_guaranteed A.MatchingCollectionSearcher.Match) -> (@out _MatchResult<A>)(a1, *(uint64_t (**)(uint64_t, uint64_t))(v1 + 32));
}

uint64_t type metadata accessor for _MatchResult()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t type metadata accessor for MatchesIterator()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t type metadata accessor for MatchesCollection.Index()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t partial apply for closure #1 in ReversedMatchesCollection.Iterator.next()@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  return closure #1 in ReversedMatchesCollection.Iterator.next()(a1, a2, *(void *)(v3 + 32), a3);
}

uint64_t partial apply for thunk for @callee_guaranteed (@in_guaranteed Range<A.BackwardCollectionSearcher.BackwardSearched.Collection.Index>, @in_guaranteed A.BackwardMatchingCollectionSearcher.Match) -> (@out _BackwardMatchResult<A>)(uint64_t a1)
{
  return thunk for @callee_guaranteed (@in_guaranteed Range<A.BackwardCollectionSearcher.BackwardSearched.Collection.Index>, @in_guaranteed A.BackwardMatchingCollectionSearcher.Match) -> (@out _BackwardMatchResult<A>)(a1, *(uint64_t (**)(uint64_t, uint64_t))(v1 + 32));
}

uint64_t type metadata accessor for _BackwardMatchResult()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t type metadata accessor for ReversedMatchesCollection.Iterator()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t type metadata accessor for PatternOrEmpty.State.Representation()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t type metadata accessor for PatternOrEmpty.State()
{
  return __swift_instantiateGenericMetadata();
}

unint64_t lazy protocol witness table accessor for type UInt64 and conformance UInt64()
{
  unint64_t result = lazy protocol witness table cache variable for type UInt64 and conformance UInt64;
  if (!lazy protocol witness table cache variable for type UInt64 and conformance UInt64)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type UInt64 and conformance UInt64);
  }
  return result;
}

uint64_t specialized MutableCollection<>.subscript.setter()
{
  type metadata accessor for Slice();
  swift_getWitnessTable();

  return _writeBackMutableSlice<A, B>(_:bounds:slice:)();
}

uint64_t sub_209F96964()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  return MEMORY[0x270FA0238](v0, 41, 7);
}

uint64_t sub_209F969A4()
{
  swift_release();

  return MEMORY[0x270FA0238](v0, 48, 7);
}

uint64_t partial apply for closure #1 in CaptureTransform.init<A, B>(_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return closure #1 in CaptureTransform.init<A, B>(_:)(a1, *(void (**)(char *))(v2 + 32), *(void *)(v2 + 16), *(void *)(v2 + 24), a2);
}

uint64_t partial apply for thunk for @escaping @callee_guaranteed (@in_guaranteed Substring) -> (@out B?, @error @owned Error)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return partial apply for thunk for @escaping @callee_guaranteed (@in_guaranteed Substring) -> (@out B?, @error @owned Error)(a1, a2, a3, a4);
}

{
  uint64_t v4;
  uint64_t (*v5)(void *);
  void v7[4];

  v7[3] = a4;
  uint64_t v5 = *(uint64_t (**)(void *))(v4 + 32);
  v7[0] = a1;
  v7[1] = a2;
  void v7[2] = a3;
  return v5(v7);
}

uint64_t partial apply for thunk for @escaping @callee_guaranteed (@guaranteed Substring) -> (@out B?, @error @owned Error)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  return thunk for @escaping @callee_guaranteed (@guaranteed Substring) -> (@out B?, @error @owned Error)(a1, a2, a3, a4, *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v5 + 32), *(void *)(v5 + 24), a5);
}

uint64_t *__swift_allocate_boxed_opaque_existential_0(uint64_t *a1)
{
  uint64_t v1 = a1;
  if ((*(unsigned char *)(*(void *)(a1[3] - 8) + 82) & 2) != 0)
  {
    *a1 = swift_allocBox();
    return (uint64_t *)v2;
  }
  return v1;
}

uint64_t partial apply for closure #1 in CaptureTransform.init<A, B>(_:)@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  return closure #1 in CaptureTransform.init<A, B>(_:)(a1, *(void (**)(unsigned char *))(v2 + 32), *(void *)(v2 + 16), *(void *)(v2 + 24), a2);
}

uint64_t partial apply for thunk for @escaping @callee_guaranteed (@guaranteed Substring) -> (@out B, @error @owned Error)@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  return thunk for @escaping @callee_guaranteed (@guaranteed Substring) -> (@out B, @error @owned Error)(a1, *(void *)(v2 + 24), a2);
}

uint64_t __swift_deallocate_boxed_opaque_existential_0(uint64_t result)
{
  if ((*(_DWORD *)(*(void *)(*(void *)(result + 24) - 8) + 80) & 0x20000) != 0) {
    JUMPOUT(0x21050FDC0);
  }
  return result;
}

uint64_t outlined init with copy of AnyRegexOutput.Element(uint64_t a1, uint64_t a2)
{
  return initializeWithCopy for AnyRegexOutput.Element(a2, a1);
}

uint64_t type metadata accessor for Compiler.ByteCodeGen(uint64_t a1)
{
  return type metadata accessor for MEProgram(a1, (uint64_t *)&type metadata singleton initialization cache for Compiler.ByteCodeGen);
}

uint64_t type metadata accessor for MEProgram.Builder(uint64_t a1)
{
  return type metadata accessor for MEProgram(a1, (uint64_t *)&type metadata singleton initialization cache for MEProgram.Builder);
}

uint64_t type metadata accessor for MEProgram(uint64_t a1, uint64_t *a2)
{
  uint64_t result = *a2;
  if (!*a2) {
    return swift_getSingletonMetadata();
  }
  return result;
}

uint64_t outlined copy of CaptureTransform?(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, unsigned __int8 a5)
{
  if (result) {
    return outlined copy of CaptureTransform.Closure(a3, a4, a5);
  }
  return result;
}

uint64_t outlined copy of CaptureTransform.Closure(uint64_t a1, uint64_t a2, unsigned __int8 a3)
{
  if (a3 <= 3u) {
    return swift_retain();
  }
  return result;
}

uint64_t outlined consume of CaptureTransform?(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, unsigned __int8 a5)
{
  if (result) {
    return outlined consume of CaptureTransform.Closure(a3, a4, a5);
  }
  return result;
}

uint64_t sub_209F96C38()
{
  outlined consume of CaptureTransform.Closure(*(void *)(v0 + 32), *(void *)(v0 + 40), *(unsigned char *)(v0 + 48));

  return MEMORY[0x270FA0238](v0, 49, 7);
}

uint64_t partial apply for closure #1 in Compiler.ByteCodeGen.emitNode(_:)@<X0>(long long *a1@<X2>, _OWORD *a2@<X8>)
{
  if (*((unsigned char *)a1 + 16) == 1) {
    goto LABEL_4;
  }
  v15[5] = *(void *)a1;
  uint64_t v4 = (uint64_t)a1 + 24;
  outlined init with copy of Any?((uint64_t)a1 + 24, (uint64_t)&v11);
  uint64_t v5 = *((void *)&v12 + 1);
  outlined destroy of Any?((uint64_t)&v11);
  if (!v5)
  {
    uint64_t v6 = String.subscript.getter();
    CaptureTransform.callAsFunction(_:)(v6, v7, v8, v9);
    return swift_bridgeObjectRelease();
  }
  if (a1[1])
  {
LABEL_4:
    long long v11 = 0u;
    long long v12 = 0u;
    uint64_t v13 = 0;
    uint64_t v14 = 1;
  }
  else
  {
    long long v11 = *a1;
    outlined init with copy of Any?(v4, (uint64_t)&v12);
  }
  constructExistentialOutputComponent(from:component:optionalCount:)((uint64_t)&v11, 0, v15);
  outlined destroy of (range: Range<String.Index>, value: Any?)?((uint64_t)&v11, &demangling cache variable for type metadata for (range: Range<String.Index>, value: Any?)?);
  CaptureTransform.callAsFunction(_:)((uint64_t)v15, a2);
  return __swift_destroy_boxed_opaque_existential_0((uint64_t)v15);
}

uint64_t sub_209F96DB4()
{
  swift_release();

  return MEMORY[0x270FA0238](v0, 32, 7);
}

uint64_t partial apply for thunk for @escaping @callee_guaranteed (@guaranteed String, @in_guaranteed Processor._StoredCapture) -> (@out Any?, @error @owned Error)(void *a1, uint64_t a2)
{
  return (*(uint64_t (**)(void, void, uint64_t))(v2 + 16))(*a1, a1[1], a2);
}

uint64_t outlined init with take of CaptureTransform.Closure(long long *a1, uint64_t a2)
{
  long long v2 = *a1;
  *(unsigned char *)(a2 + 16) = *((unsigned char *)a1 + 16);
  *(_OWORD *)a2 = v2;
  return a2;
}

uint64_t sub_209F96E38()
{
  swift_bridgeObjectRelease();

  return MEMORY[0x270FA0238](v0, 48, 7);
}

uint64_t outlined init with take of Any?(uint64_t a1, uint64_t a2)
{
  uint64_t CanonicalSpecializedMetadata = swift_getCanonicalSpecializedMetadata();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(CanonicalSpecializedMetadata - 8) + 32))(a2, a1, CanonicalSpecializedMetadata);
  return a2;
}

uint64_t partial apply for closure #1 in Compiler.ByteCodeGen.coalescingCustomCharacterClassMembers(_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return closure #1 in Compiler.ByteCodeGen.coalescingCustomCharacterClassMembers(_:)(a1, *(void *)(v2 + 16), a2);
}

uint64_t partial apply for thunk for @escaping @callee_guaranteed (@guaranteed String, @unowned Range<String.Index>) -> (@unowned String.Index?)@<X0>(void *a1@<X0>, void *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t result = (*(uint64_t (**)(void, void, void, void))(v3 + 16))(*a1, a1[1], *a2, a2[1]);
  *(void *)a3 = result;
  *(unsigned char *)(a3 + 8) = v6 & 1;
  return result;
}

uint64_t sub_209F96F58()
{
  return MEMORY[0x270FA0238](v0, 29, 7);
}

uint64_t partial apply for closure #1 in DSLTree.CustomCharacterClass.Member.generateConsumer(_:)(unint64_t a1, unint64_t a2, unint64_t a3)
{
  return closure #1 in DSLTree.CustomCharacterClass.Member.generateConsumer(_:)(a1, a2, a3, *(unsigned __int8 *)(v3 + 16), *(_DWORD *)(v3 + 20), *(_DWORD *)(v3 + 24), *(unsigned __int8 *)(v3 + 28));
}

uint64_t sub_209F96F78()
{
  return MEMORY[0x270FA0238](v0, 29, 7);
}

uint64_t outlined consume of Set<Character>.Index._Variant(uint64_t a1, uint64_t a2, char a3)
{
  if (a3) {
    return swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t outlined consume of (@escaping @callee_guaranteed (@guaranteed String, @unowned Range<String.Index>) -> (@unowned String.Index?))?(uint64_t result)
{
  if (result) {
    return swift_release();
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type UInt32 and conformance UInt32()
{
  unint64_t result = lazy protocol witness table cache variable for type UInt32 and conformance UInt32;
  if (!lazy protocol witness table cache variable for type UInt32 and conformance UInt32)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type UInt32 and conformance UInt32);
  }
  return result;
}

uint64_t lazy protocol witness table accessor for type PartialRangeUpTo<String.Index> and conformance PartialRangeUpTo<A>(unint64_t *a1)
{
  uint64_t result = *a1;
  if (!result)
  {
    swift_getCanonicalSpecializedMetadata();
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t partial apply for closure #1 in invert #1 (_:) in AST.Atom.CharacterProperty.generateConsumer(_:)(unint64_t a1, unint64_t a2, unint64_t a3, uint64_t a4)
{
  return closure #1 in invert #1 (_:) in AST.Atom.CharacterProperty.generateConsumer(_:)(a1, a2, a3, a4, *(uint64_t (**)(void))(v4 + 16), *(void *)(v4 + 24), *(void *)(v4 + 32));
}

uint64_t partial apply for closure #9 in closure #1 in AST.Atom.CharacterProperty.generateConsumer(_:)(uint64_t a1)
{
  return closure #7 in closure #1 in AST.Atom.CharacterProperty.generateConsumer(_:)(a1, *(void *)(v1 + 16), *(void *)(v1 + 24), MEMORY[0x263F8EC58]) & 1;
}

uint64_t partial apply for closure #8 in closure #1 in AST.Atom.CharacterProperty.generateConsumer(_:)(uint64_t a1)
{
  return closure #7 in closure #1 in AST.Atom.CharacterProperty.generateConsumer(_:)(a1, *(void *)(v1 + 16), *(void *)(v1 + 24), MEMORY[0x263F8EC60]) & 1;
}

uint64_t partial apply for closure #7 in closure #1 in AST.Atom.CharacterProperty.generateConsumer(_:)(uint64_t a1)
{
  return closure #7 in closure #1 in AST.Atom.CharacterProperty.generateConsumer(_:)(a1, *(void *)(v1 + 16), *(void *)(v1 + 24), MEMORY[0x263F8EC50]) & 1;
}

uint64_t sub_209F970E8()
{
  return objectdestroy_311Tm(MEMORY[0x263F8EB60]);
}

uint64_t partial apply for closure #6 in closure #1 in AST.Atom.CharacterProperty.generateConsumer(_:)(uint64_t a1)
{
  return partial apply for closure #6 in closure #1 in AST.Atom.CharacterProperty.generateConsumer(_:)(a1, MEMORY[0x263F8EB60], (uint64_t (*)(uint64_t, uint64_t))closure #6 in closure #1 in AST.Atom.CharacterProperty.generateConsumer(_:));
}

uint64_t sub_209F9712C()
{
  return objectdestroy_311Tm(MEMORY[0x263F8EA48]);
}

uint64_t partial apply for closure #5 in closure #1 in AST.Atom.CharacterProperty.generateConsumer(_:)(uint64_t a1)
{
  return partial apply for closure #6 in closure #1 in AST.Atom.CharacterProperty.generateConsumer(_:)(a1, MEMORY[0x263F8EA48], (uint64_t (*)(uint64_t, uint64_t))closure #5 in closure #1 in AST.Atom.CharacterProperty.generateConsumer(_:));
}

uint64_t sub_209F97170()
{
  return MEMORY[0x270FA0238](v0, 24, 7);
}

BOOL partial apply for closure #4 in closure #1 in AST.Atom.CharacterProperty.generateConsumer(_:)()
{
  return closure #4 in closure #1 in AST.Atom.CharacterProperty.generateConsumer(_:)(*(double *)(v0 + 16));
}

uint64_t sub_209F97188()
{
  return MEMORY[0x270FA0238](v0, 32, 7);
}

BOOL partial apply for closure #3 in closure #1 in AST.Atom.CharacterProperty.generateConsumer(_:)(uint64_t a1)
{
  return closure #3 in closure #1 in AST.Atom.CharacterProperty.generateConsumer(_:)(a1, *(void *)(v1 + 16), *(void *)(v1 + 24));
}

uint64_t sub_209F971A0()
{
  return objectdestroy_311Tm(MEMORY[0x263F90088]);
}

BOOL partial apply for closure #1 in scriptExtensionScalarPredicate(_:)(unsigned int a1)
{
  type metadata accessor for Unicode.Script();
  uint64_t v2 = 0;
  uint64_t v3 = static Unicode.Script.extensions(for:)(a1)[2];
  do
  {
    uint64_t v4 = v2;
    if (v3 == v2) {
      break;
    }
    ++v2;
    lazy protocol witness table accessor for type AST.Quantification.Kind and conformance AST.Quantification.Kind(&lazy protocol witness table cache variable for type Unicode.Script and conformance Unicode.Script, MEMORY[0x263F90088]);
  }
  while ((dispatch thunk of static Equatable.== infix(_:_:)() & 1) == 0);
  swift_bridgeObjectRelease();
  return v3 != v4;
}

uint64_t sub_209F972E0()
{
  return objectdestroy_311Tm(MEMORY[0x263F90088]);
}

uint64_t partial apply for closure #1 in scriptScalarPredicate(_:)(uint64_t a1)
{
  return partial apply for closure #6 in closure #1 in AST.Atom.CharacterProperty.generateConsumer(_:)(a1, MEMORY[0x263F90088], (uint64_t (*)(uint64_t, uint64_t))closure #1 in scriptScalarPredicate(_:));
}

uint64_t objectdestroy_299Tm()
{
  swift_release();
  swift_bridgeObjectRelease();

  return MEMORY[0x270FA0238](v0, 40, 7);
}

uint64_t sub_209F97368()
{
  return objectdestroy_311Tm(MEMORY[0x263F8EB50]);
}

uint64_t partial apply for closure #1 in categoryScalarPredicate(_:)(uint64_t a1)
{
  return partial apply for closure #6 in closure #1 in AST.Atom.CharacterProperty.generateConsumer(_:)(a1, MEMORY[0x263F8EB50], closure #1 in categoryScalarPredicate(_:));
}

uint64_t sub_209F973AC()
{
  return objectdestroy_311Tm(MEMORY[0x263F8EB50]);
}

uint64_t sub_209F973C4()
{
  return objectdestroy_311Tm(MEMORY[0x263F8EB50]);
}

uint64_t sub_209F973DC()
{
  return objectdestroy_311Tm(MEMORY[0x263F8EB50]);
}

uint64_t sub_209F973F4()
{
  return objectdestroy_311Tm(MEMORY[0x263F8EB50]);
}

uint64_t sub_209F9740C()
{
  return objectdestroy_311Tm(MEMORY[0x263F8EB50]);
}

uint64_t sub_209F97424()
{
  return objectdestroy_311Tm(MEMORY[0x263F8EB50]);
}

uint64_t sub_209F9743C()
{
  return objectdestroy_311Tm(MEMORY[0x263F8EB50]);
}

uint64_t sub_209F97454()
{
  return objectdestroy_311Tm(MEMORY[0x263F8EB50]);
}

uint64_t sub_209F9746C()
{
  return objectdestroy_311Tm(MEMORY[0x263F8EB50]);
}

uint64_t sub_209F97484()
{
  return objectdestroy_311Tm(MEMORY[0x263F8EB50]);
}

uint64_t sub_209F9749C()
{
  return objectdestroy_311Tm(MEMORY[0x263F8EB50]);
}

uint64_t sub_209F974B4()
{
  return objectdestroy_311Tm(MEMORY[0x263F8EB50]);
}

uint64_t sub_209F974CC()
{
  return objectdestroy_311Tm(MEMORY[0x263F8EB50]);
}

uint64_t sub_209F974E4()
{
  return objectdestroy_311Tm(MEMORY[0x263F8EB50]);
}

uint64_t sub_209F974FC()
{
  return objectdestroy_311Tm(MEMORY[0x263F8EB50]);
}

uint64_t sub_209F97514()
{
  return objectdestroy_311Tm(MEMORY[0x263F8EB50]);
}

uint64_t sub_209F9752C()
{
  return objectdestroy_311Tm(MEMORY[0x263F8EB50]);
}

uint64_t sub_209F97544()
{
  return objectdestroy_311Tm(MEMORY[0x263F8EB50]);
}

uint64_t sub_209F9755C()
{
  return objectdestroy_311Tm(MEMORY[0x263F8EB50]);
}

uint64_t sub_209F97574()
{
  return objectdestroy_311Tm(MEMORY[0x263F8EB50]);
}

uint64_t sub_209F9758C()
{
  return objectdestroy_311Tm(MEMORY[0x263F8EB50]);
}

uint64_t sub_209F975A4()
{
  return objectdestroy_311Tm(MEMORY[0x263F8EB50]);
}

uint64_t sub_209F975BC()
{
  return objectdestroy_311Tm(MEMORY[0x263F8EB50]);
}

uint64_t sub_209F975D4()
{
  return objectdestroy_311Tm(MEMORY[0x263F8EB50]);
}

uint64_t sub_209F975EC()
{
  return objectdestroy_311Tm(MEMORY[0x263F8EB50]);
}

uint64_t sub_209F97604()
{
  return objectdestroy_311Tm(MEMORY[0x263F8EB50]);
}

uint64_t sub_209F9761C()
{
  return objectdestroy_311Tm(MEMORY[0x263F8EB50]);
}

uint64_t sub_209F97634()
{
  return objectdestroy_311Tm(MEMORY[0x263F8EB50]);
}

uint64_t sub_209F9764C()
{
  return objectdestroy_311Tm(MEMORY[0x263F8EB50]);
}

uint64_t objectdestroy_311Tm(uint64_t (*a1)(void))
{
  uint64_t v2 = a1(0);
  uint64_t v3 = *(void *)(v2 - 8);
  uint64_t v4 = *(unsigned __int8 *)(v3 + 80);
  uint64_t v5 = (v4 + 16) & ~v4;
  uint64_t v6 = v5 + *(void *)(v3 + 64);
  uint64_t v7 = v4 | 7;
  (*(void (**)(uint64_t, uint64_t))(v3 + 8))(v1 + v5, v2);

  return MEMORY[0x270FA0238](v1, v6, v7);
}

uint64_t partial apply for closure #6 in closure #1 in AST.Atom.CharacterProperty.generateConsumer(_:)(uint64_t a1, uint64_t (*a2)(void), uint64_t (*a3)(uint64_t, uint64_t))
{
  uint64_t v5 = *(void *)(a2(0) - 8);
  uint64_t v6 = v3 + ((*(unsigned __int8 *)(v5 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80));

  return a3(a1, v6);
}

BOOL partial apply for closure #1 in categoriesScalarPredicate(_:)(uint64_t a1)
{
  return closure #1 in categoriesScalarPredicate(_:)(a1, *(void *)(v1 + 16));
}

uint64_t partial apply for closure #1 in consumeCharacterWithLeadingScalar(_:)()
{
  uint64_t v1 = *(uint64_t (**)(unint64_t))(v0 + 16);
  unint64_t v2 = String.subscript.getter();
  unint64_t v4 = specialized Collection.first.getter(v2, v3);
  uint64_t result = swift_bridgeObjectRelease();
  if ((v4 & 0x100000000) != 0)
  {
    __break(1u);
  }
  else if (v1(v4))
  {
    return String.index(after:)();
  }
  else
  {
    return 0;
  }
  return result;
}

uint64_t lazy protocol witness table accessor for type AST.Quantification.Kind and conformance AST.Quantification.Kind(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t outlined init with copy of (range: Range<String.Index>, value: Any?)?(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(a3);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16))(a2, a1, v5);
  return a2;
}

uint64_t partial apply for closure #1 in consumeScalar(_:)(unint64_t a1, unint64_t a2, unint64_t a3)
{
  uint64_t v7 = *(uint64_t (**)(uint64_t))(v3 + 16);
  _StringGuts.validateScalarIndex(_:)(a3, a1, a2);
  if ((a2 & 0x1000000000000000) != 0)
  {
    uint64_t v8 = _StringGuts.foreignErrorCorrectedScalar(startingAt:)();
  }
  else
  {
    if ((a2 & 0x2000000000000000) != 0)
    {
      unint64_t v16 = a1;
      uint64_t v17 = a2 & 0xFFFFFFFFFFFFFFLL;
    }
    else if ((a1 & 0x1000000000000000) == 0)
    {
      _StringObject.sharedUTF8.getter();
    }
    uint64_t v8 = _decodeScalar(_:startingAt:)();
  }
  if ((v7(v8) & 1) == 0) {
    return 0;
  }
  unint64_t v9 = _StringGuts.validateScalarIndex(_:)(a3, a1, a2);
  if ((a2 & 0x1000000000000000) != 0) {
    return String.UnicodeScalarView._foreignIndex(after:)();
  }
  unint64_t v10 = v9 >> 16;
  if ((a2 & 0x2000000000000000) != 0)
  {
    unint64_t v16 = a1;
    uint64_t v17 = a2 & 0xFFFFFFFFFFFFFFLL;
    int v12 = *((unsigned __int8 *)&v16 + v10);
  }
  else
  {
    if ((a1 & 0x1000000000000000) != 0) {
      uint64_t v11 = (a2 & 0xFFFFFFFFFFFFFFFLL) + 32;
    }
    else {
      uint64_t v11 = _StringObject.sharedUTF8.getter();
    }
    int v12 = *(unsigned __int8 *)(v11 + v10);
  }
  int v14 = (char)v12;
  unsigned int v15 = __clz(v12 ^ 0xFF) - 24;
  if (v14 >= 0) {
    LOBYTE(v15) = 1;
  }
  return ((v10 + v15) << 16) | 5;
}

BOOL partial apply for closure #1 in consumeName(_:opts:)(uint64_t a1)
{
  return closure #1 in consumeName(_:opts:)(a1, *(void *)(v1 + 16), *(void *)(v1 + 24));
}

uint64_t partial apply for closure #1 in propertyScalarPredicate(_:)(uint64_t a1)
{
  return closure #1 in propertyScalarPredicate(_:)(a1, *(uint64_t (**)(char *))(v1 + 16));
}

uint64_t partial apply for closure #1 in Compiler.ByteCodeGen.emitMatcher(_:)()
{
  return (*(uint64_t (**)(void))(v0 + 16))();
}

uint64_t partial apply for thunk for @escaping @callee_guaranteed (@guaranteed String, @unowned String.Index, @unowned Range<String.Index>) -> (@out (String.Index, Any)?, @error @owned Error)(void *a1, void *a2, void *a3)
{
  return (*(uint64_t (**)(void, void, void, void, void))(v3 + 16))(*a1, a1[1], *a2, *a3, a3[1]);
}

void partial apply for closure #1 in PrettyPrinter.printAsPattern(_:)()
{
  PrettyPrinter.printAsPattern(convertedFromAST:isTopLevel:)(*(void *)(v0 + 16), 1);
}

uint64_t partial apply for closure #1 in PrettyPrinter.printInlineMatchingOptions()(uint64_t a1)
{
  return closure #1 in PrettyPrinter.printInlineMatchingOptions()(a1, *(void *)(v1 + 16), *(unsigned char *)(v1 + 24));
}

uint64_t partial apply for closure #2 in PrettyPrinter.printAsPattern(convertedFromAST:isTopLevel:)()
{
  return PrettyPrinter.printAsPattern(convertedFromAST:isTopLevel:)(*(void *)(v0 + 16), 0);
}

uint64_t partial apply for closure #1 in PrettyPrinter.printAsPattern(convertedFromAST:isTopLevel:)()
{
  return specialized Sequence.forEach(_:)(*(void *)(v0 + 16));
}

unint64_t lazy protocol witness table accessor for type DSLTree._Tree and conformance DSLTree._Tree()
{
  unint64_t result = lazy protocol witness table cache variable for type DSLTree._Tree and conformance DSLTree._Tree;
  if (!lazy protocol witness table cache variable for type DSLTree._Tree and conformance DSLTree._Tree)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type DSLTree._Tree and conformance DSLTree._Tree);
  }
  return result;
}

uint64_t outlined destroy of (range: Range<String.Index>, value: Any?)?(uint64_t a1, uint64_t *a2)
{
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(a2);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

uint64_t outlined copy of PrettyPrinter.NodeToPrint(uint64_t a1, uint64_t a2, char a3)
{
  if (a3) {
    return swift_bridgeObjectRetain();
  }
  else {
    return swift_retain();
  }
}

uint64_t outlined release of RangesCollection<ZSearcher<Substring>>(uint64_t a1)
{
  return a1;
}

uint64_t outlined consume of PrettyPrinter.NodeToPrint(uint64_t a1, uint64_t a2, char a3)
{
  if (a3) {
    return swift_bridgeObjectRelease();
  }
  else {
    return swift_release();
  }
}

uint64_t partial apply for closure #4 in PrettyPrinter.printConcatenationAsPattern(_:isTopLevel:)()
{
  uint64_t v1 = *(void *)(v0 + 16);
  uint64_t v2 = *(void *)(v1 + 16);
  if (v2)
  {
    uint64_t v3 = (unsigned __int8 *)(v1 + 48);
    do
    {
      uint64_t v6 = *((void *)v3 - 2);
      uint64_t v7 = (void *)*((void *)v3 - 1);
      int v8 = *v3;
      if (v8 == 1)
      {
        swift_bridgeObjectRetain();
        v4._uint64_t countAndFlagsBits = v6;
        v4._uint64_t object = v7;
        PrettyPrinter.print(_:)(v4);
      }
      else
      {
        swift_retain();
        PrettyPrinter.printAsPattern(convertedFromAST:isTopLevel:)(v6, 0);
      }
      uint64_t result = outlined consume of PrettyPrinter.NodeToPrint(v6, (uint64_t)v7, v8);
      v3 += 24;
      --v2;
    }
    while (v2);
  }
  return result;
}

uint64_t outlined retain of RangesCollection<ZSearcher<Substring>>(uint64_t a1)
{
  return a1;
}

uint64_t outlined retain of Slice<RangesCollection<ZSearcher<Substring>>>(uint64_t a1)
{
  return a1;
}

uint64_t outlined release of Slice<RangesCollection<ZSearcher<Substring>>>(uint64_t a1)
{
  return a1;
}

void partial apply for closure #2 in PrettyPrinter.printAsPattern(_:wrap:terminateLine:)(uint64_t a1)
{
  closure #2 in PrettyPrinter.printAsPattern(_:wrap:terminateLine:)(a1, *(uint64_t **)(v1 + 16), *(void *)(v1 + 24));
}

void partial apply for closure #1 in $defer #1 () in PrettyPrinter.printAsPattern(_:wrap:terminateLine:)(uint64_t a1)
{
  closure #1 in $defer #1 () in PrettyPrinter.printAsPattern(_:wrap:terminateLine:)(a1, *(unsigned char *)(v1 + 16));
}

void partial apply for closure #3 in PrettyPrinter.printAsPattern(_:wrap:)(uint64_t a1)
{
}

void partial apply for closure #2 in PrettyPrinter.printAsPattern(_:wrap:)(uint64_t a1)
{
}

void partial apply for closure #1 in PrettyPrinter.printAsPattern(_:wrap:)(uint64_t a1)
{
}

void partial apply for closure #3 in PrettyPrinter.printAsPattern(_:wrap:)(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v6 = *(void *)(v3 + 16);
  char v7 = *(unsigned char *)(v3 + 24);
  PrettyPrinter.indent()();
  v8._uint64_t countAndFlagsBits = a2;
  v8._uint64_t object = a3;
  PrettyPrinter.output(_:)(v8);
  uint64_t v11 = v6;
  char v12 = v7;
  v13.members._unint64_t rawValue = &v11;
  v13.Swift::Bool isInverted = 0;
  PrettyPrinter.printAsPattern(_:wrap:terminateLine:)(v13, 0, v9);
  v10._uint64_t countAndFlagsBits = 41;
  v10._uint64_t object = (void *)0xE100000000000000;
  PrettyPrinter.output(_:)(v10);
}

uint64_t outlined init with take of (offset: Int, element: (CaptureList.Capture, Processor._StoredCapture))?(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(a3);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 32))(a2, a1, v5);
  return a2;
}

uint64_t outlined consume of PatternSegment(uint64_t a1, uint64_t a2, char a3)
{
  if (a3) {
    return swift_release();
  }
  else {
    return swift_bridgeObjectRelease();
  }
}

uint64_t lazy protocol witness table accessor for type [Any.Type] and conformance [A](unint64_t *a1, uint64_t *a2)
{
  uint64_t result = *a1;
  if (!result)
  {
    __swift_instantiateConcreteTypeFromMangledNameAbstract(a2);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type LazyMapSequence<String, String> and conformance <> LazyMapSequence<A, B>()
{
  unint64_t result = lazy protocol witness table cache variable for type LazyMapSequence<String, String> and conformance <> LazyMapSequence<A, B>;
  if (!lazy protocol witness table cache variable for type LazyMapSequence<String, String> and conformance <> LazyMapSequence<A, B>)
  {
    swift_getCanonicalSpecializedMetadata();
    lazy protocol witness table accessor for type String and conformance String();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type LazyMapSequence<String, String> and conformance <> LazyMapSequence<A, B>);
  }
  return result;
}

BOOL partial apply for closure #1 in Collection.endOfPrefix(while:)()
{
  return ((*(uint64_t (**)(void))(v0 + 32))() & 1) == 0;
}

uint64_t partial apply for thunk for @callee_guaranteed (@in_guaranteed Regex<A>.Match) -> (@unowned String.Index?)@<X0>(uint64_t a1@<X8>)
{
  return partial apply for thunk for @callee_guaranteed (@in_guaranteed Regex<A>.Match) -> (@unowned String.Index?)(a1);
}

{
  uint64_t v1;
  uint64_t result;
  char v4;

  unint64_t result = (*(uint64_t (**)(void))(v1 + 24))();
  *(void *)a1 = result;
  *(unsigned char *)(a1 + 8) = v4 & 1;
  return result;
}

uint64_t outlined retain of RegexMatchesCollection<A>(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 56);
  uint64_t v3 = *(void *)(a1 + 64);
  swift_bridgeObjectRetain();
  swift_retain();
  outlined copy of RegexMatchesCollection<A>.Index<A>(v2, v3);
  return a1;
}

uint64_t objectdestroy_511Tm()
{
  swift_bridgeObjectRelease();
  swift_release();
  if (*(void *)(v0 + 88))
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }

  return MEMORY[0x270FA0238](v0, 120, 7);
}

uint64_t partial apply for implicit closure #2 in implicit closure #1 in RegexMatchesCollection.Iterator.next()(uint64_t *a1)
{
  uint64_t v3 = *a1;
  long long v1 = *(_OWORD *)(a1 + 3);
  long long v4 = *(_OWORD *)(a1 + 1);
  long long v5 = v1;
  type metadata accessor for RegexMatchesCollection();
  return RegexMatchesCollection.searchIndex(after:)((uint64_t)&v3);
}

uint64_t partial apply for thunk for @callee_guaranteed (@in_guaranteed Regex<A>.Match) -> (@out RegexMatchesCollection<A>.Index)()
{
  return (*(uint64_t (**)(void))(v0 + 24))();
}

uint64_t sub_209F9829C()
{
  return MEMORY[0x270FA0238](v0, 24, 7);
}

uint64_t partial apply for implicit closure #2 in implicit closure #1 in RegexMatchesCollection.init(input:subjectBounds:searchBounds:regex:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2 = *(void *)(a1 + 8);
  uint64_t v3 = *(void *)(a1 + 16);
  *(void *)a2 = *(void *)a1;
  *(void *)(a2 + 8) = v2;
  *(void *)(a2 + 16) = v3;
  *(_OWORD *)(a2 + 24) = *(_OWORD *)(a1 + 24);
  swift_bridgeObjectRetain();

  return swift_bridgeObjectRetain();
}

uint64_t outlined retain of SubstringSearcher(uint64_t a1)
{
  return a1;
}

uint64_t outlined retain of SplitCollection<SubstringSearcher>(uint64_t a1)
{
  return a1;
}

uint64_t outlined release of RangesCollection<SubstringSearcher>(uint64_t a1)
{
  return a1;
}

uint64_t outlined release of SubstringSearcher(uint64_t a1)
{
  return a1;
}

uint64_t outlined release of SplitCollection<SubstringSearcher>.Iterator(uint64_t a1)
{
  return a1;
}

uint64_t sub_209F984D0()
{
  return MEMORY[0x270FA0238](v0, 64, 7);
}

uint64_t sub_209F984E0()
{
  return MEMORY[0x270FA0238](v0, 64, 7);
}

uint64_t partial apply for implicit closure #3 in Collection<>.split<A>(separator:maxSplits:omittingEmptySubsequences:)()
{
  return dispatch thunk of static Equatable.== infix(_:_:)() & 1;
}

uint64_t __swift_instantiateGenericMetadata()
{
  return swift_getGenericMetadata();
}

uint64_t initializeBufferWithCopyOfBuffer for PatternSegment(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  return initializeBufferWithCopyOfBuffer for PatternSegment(a1, a2, a3, (void (*)(void, uint64_t, uint64_t))outlined copy of PatternSegment);
}

uint64_t outlined copy of PatternSegment(uint64_t a1, uint64_t a2, char a3)
{
  if (a3) {
    return swift_retain();
  }
  else {
    return swift_bridgeObjectRetain();
  }
}

uint64_t destroy for PatternSegment(uint64_t a1)
{
  return outlined consume of PatternSegment(*(void *)a1, *(void *)(a1 + 8), *(unsigned char *)(a1 + 16));
}

uint64_t *assignWithCopy for PatternSegment(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  return assignWithCopy for PatternSegment(a1, a2, a3, (void (*)(void, uint64_t, uint64_t))outlined copy of PatternSegment, (void (*)(uint64_t, uint64_t, uint64_t))outlined consume of PatternSegment);
}

uint64_t *assignWithTake for PatternSegment(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  return assignWithTake for PatternSegment(a1, a2, a3, (void (*)(uint64_t, uint64_t, uint64_t))outlined consume of PatternSegment);
}

ValueMetadata *type metadata accessor for PatternSegment()
{
  return &type metadata for PatternSegment;
}

uint64_t initializeBufferWithCopyOfBuffer for PrettyPrinter.NodeToPrint(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  return initializeBufferWithCopyOfBuffer for PatternSegment(a1, a2, a3, (void (*)(void, uint64_t, uint64_t))outlined copy of PrettyPrinter.NodeToPrint);
}

uint64_t destroy for PrettyPrinter.NodeToPrint(uint64_t a1)
{
  return outlined consume of PrettyPrinter.NodeToPrint(*(void *)a1, *(void *)(a1 + 8), *(unsigned char *)(a1 + 16));
}

uint64_t initializeBufferWithCopyOfBuffer for PatternSegment(uint64_t a1, uint64_t *a2, uint64_t a3, void (*a4)(void, uint64_t, uint64_t))
{
  uint64_t v5 = *a2;
  uint64_t v6 = a2[1];
  uint64_t v7 = *((unsigned __int8 *)a2 + 16);
  a4(*a2, v6, v7);
  *(void *)a1 = v5;
  *(void *)(a1 + 8) = v6;
  *(unsigned char *)(a1 + 16) = v7;
  return a1;
}

uint64_t *assignWithCopy for PrettyPrinter.NodeToPrint(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  return assignWithCopy for PatternSegment(a1, a2, a3, (void (*)(void, uint64_t, uint64_t))outlined copy of PrettyPrinter.NodeToPrint, (void (*)(uint64_t, uint64_t, uint64_t))outlined consume of PrettyPrinter.NodeToPrint);
}

uint64_t *assignWithCopy for PatternSegment(uint64_t *a1, uint64_t *a2, uint64_t a3, void (*a4)(void, uint64_t, uint64_t), void (*a5)(uint64_t, uint64_t, uint64_t))
{
  uint64_t v7 = *a2;
  uint64_t v8 = a2[1];
  uint64_t v9 = *((unsigned __int8 *)a2 + 16);
  a4(*a2, v8, v9);
  uint64_t v10 = *a1;
  uint64_t v11 = a1[1];
  uint64_t v12 = *((unsigned __int8 *)a1 + 16);
  *a1 = v7;
  a1[1] = v8;
  *((unsigned char *)a1 + 16) = v9;
  a5(v10, v11, v12);
  return a1;
}

uint64_t *assignWithTake for PrettyPrinter.NodeToPrint(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  return assignWithTake for PatternSegment(a1, a2, a3, (void (*)(uint64_t, uint64_t, uint64_t))outlined consume of PrettyPrinter.NodeToPrint);
}

uint64_t *assignWithTake for PatternSegment(uint64_t *a1, uint64_t a2, uint64_t a3, void (*a4)(uint64_t, uint64_t, uint64_t))
{
  char v5 = *(unsigned char *)(a2 + 16);
  uint64_t v6 = *a1;
  uint64_t v7 = a1[1];
  uint64_t v8 = *((unsigned __int8 *)a1 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *((unsigned char *)a1 + 16) = v5;
  a4(v6, v7, v8);
  return a1;
}

uint64_t getEnumTagSinglePayload for PatternSegment(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0xFF && *(unsigned char *)(a1 + 17)) {
    return (*(_DWORD *)a1 + 255);
  }
  unsigned int v3 = *(unsigned __int8 *)(a1 + 16);
  if (v3 <= 1) {
    int v4 = -1;
  }
  else {
    int v4 = v3 ^ 0xFF;
  }
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for PatternSegment(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFE)
  {
    *(unsigned char *)(result + 16) = 0;
    *(void *)unint64_t result = a2 - 255;
    *(void *)(result + 8) = 0;
    if (a3 >= 0xFF) {
      *(unsigned char *)(result + 17) = 1;
    }
  }
  else
  {
    if (a3 >= 0xFF) {
      *(unsigned char *)(result + 17) = 0;
    }
    if (a2) {
      *(unsigned char *)(result + 16) = -(char)a2;
    }
  }
  return result;
}

uint64_t getEnumTag for PrettyPrinter.NodeToPrint(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 16);
}

uint64_t destructiveInjectEnumTag for PrettyPrinter.NodeToPrint(uint64_t result, char a2)
{
  *(unsigned char *)(result + 16) = a2 & 1;
  return result;
}

ValueMetadata *type metadata accessor for PrettyPrinter.NodeToPrint()
{
  return &type metadata for PrettyPrinter.NodeToPrint;
}

void *assignWithCopy for DSLTree(void *a1, void *a2)
{
  *a1 = *a2;
  swift_retain();
  swift_release();
  return a1;
}

uint64_t getEnumTagSinglePayload for DSLTree(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0x70 && *(unsigned char *)(a1 + 8)) {
    return (*(_DWORD *)a1 + 112);
  }
  unsigned int v3 = ((((*(void *)a1 >> 57) & 0x78 | *(void *)a1 & 7) >> 2) & 0xFFFFFF9F | (32 * (*(void *)a1 & 3))) ^ 0x7F;
  if (v3 >= 0x6F) {
    unsigned int v3 = -1;
  }
  return v3 + 1;
}

uint64_t storeEnumTagSinglePayload for DSLTree(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x6F)
  {
    *(void *)unint64_t result = a2 - 112;
    if (a3 >= 0x70) {
      *(unsigned char *)(result + 8) = 1;
    }
  }
  else
  {
    if (a3 >= 0x70) {
      *(unsigned char *)(result + 8) = 0;
    }
    if (a2)
    {
      uint64_t v3 = (-a2 >> 5) & 3 | (4 * (-a2 & 0x7F));
      *(void *)unint64_t result = (v3 | (v3 << 57)) & 0xF000000000000007;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for DSLTree._Tree()
{
  return &type metadata for DSLTree._Tree;
}

ValueMetadata *type metadata accessor for _SequenceRegister()
{
  return &type metadata for _SequenceRegister;
}

ValueMetadata *type metadata accessor for _ElementRegister()
{
  return &type metadata for _ElementRegister;
}

uint64_t getEnumTagSinglePayload for MEProgram.Builder.AddressFixup(uint64_t a1, int a2)
{
  if (a2 && *(unsigned char *)(a1 + 17)) {
    return (*(_DWORD *)a1 + 1);
  }
  else {
    return 0;
  }
}

uint64_t storeEnumTagSinglePayload for MEProgram.Builder.AddressFixup(uint64_t result, int a2, int a3)
{
  if (a2)
  {
    *(unsigned char *)(result + 16) = 0;
    *(void *)unint64_t result = (a2 - 1);
    *(void *)(result + 8) = 0;
    if (!a3) {
      return result;
    }
    char v3 = 1;
  }
  else
  {
    if (!a3) {
      return result;
    }
    char v3 = 0;
  }
  *(unsigned char *)(result + 17) = v3;
  return result;
}

ValueMetadata *type metadata accessor for MEProgram.Builder.AddressFixup()
{
  return &type metadata for MEProgram.Builder.AddressFixup;
}

uint64_t initializeBufferWithCopyOfBuffer for MEProgram.Builder(uint64_t a1, uint64_t *a2, int *a3)
{
  int v3 = *(_DWORD *)(*((void *)a3 - 1) + 80);
  uint64_t v4 = *a2;
  *(void *)a1 = *a2;
  if ((v3 & 0x20000) != 0)
  {
    uint64_t v7 = v4 + ((v3 + 16) & ~(unint64_t)v3);
    swift_retain();
  }
  else
  {
    uint64_t v7 = a1;
    *(_WORD *)(a1 + 8) = *((_WORD *)a2 + 4);
    uint64_t v8 = a2[3];
    *(void *)(a1 + 16) = a2[2];
    *(void *)(a1 + 24) = v8;
    uint64_t v9 = a2[5];
    *(void *)(a1 + 32) = a2[4];
    *(void *)(a1 + 40) = v9;
    uint64_t v10 = a2[7];
    *(void *)(a1 + 48) = a2[6];
    *(void *)(a1 + 56) = v10;
    uint64_t v11 = a2[9];
    *(void *)(a1 + 64) = a2[8];
    *(void *)(a1 + 72) = v11;
    uint64_t v12 = a2[11];
    *(void *)(a1 + 80) = a2[10];
    *(void *)(a1 + 88) = v12;
    long long v13 = *((_OWORD *)a2 + 6);
    long long v14 = *((_OWORD *)a2 + 7);
    *(void *)(a1 + 128) = a2[16];
    *(unsigned char *)(a1 + 136) = *((unsigned char *)a2 + 136);
    uint64_t v15 = a3[20];
    uint64_t v21 = (uint64_t)a2 + v15;
    uint64_t v22 = a1 + v15;
    *(_OWORD *)(a1 + 96) = v13;
    *(_OWORD *)(a1 + 112) = v14;
    uint64_t v16 = type metadata accessor for CaptureList();
    unsigned int v20 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v16 - 8) + 16);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v20(v22, v21, v16);
    uint64_t v17 = a3[22];
    *(void *)(v7 + a3[21]) = *(uint64_t *)((char *)a2 + a3[21]);
    *(unsigned char *)(v7 + v17) = *((unsigned char *)a2 + v17);
    uint64_t v18 = a3[24];
    *(void *)(v7 + a3[23]) = *(uint64_t *)((char *)a2 + a3[23]);
    *(void *)(v7 + v18) = *(uint64_t *)((char *)a2 + v18);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
  }
  return v7;
}

uint64_t destroy for MEProgram.Builder(uint64_t a1, uint64_t a2)
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v4 = a1 + *(int *)(a2 + 80);
  uint64_t v5 = type metadata accessor for CaptureList();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v5 - 8) + 8))(v4, v5);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  return swift_bridgeObjectRelease();
}

uint64_t initializeWithCopy for MEProgram.Builder(uint64_t a1, uint64_t a2, int *a3)
{
  *(void *)a1 = *(void *)a2;
  *(_WORD *)(a1 + 8) = *(_WORD *)(a2 + 8);
  uint64_t v6 = *(void *)(a2 + 24);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = v6;
  uint64_t v7 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v7;
  uint64_t v8 = *(void *)(a2 + 56);
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  *(void *)(a1 + 56) = v8;
  uint64_t v9 = *(void *)(a2 + 72);
  *(void *)(a1 + 64) = *(void *)(a2 + 64);
  *(void *)(a1 + 72) = v9;
  uint64_t v10 = *(void *)(a2 + 88);
  *(void *)(a1 + 80) = *(void *)(a2 + 80);
  *(void *)(a1 + 88) = v10;
  long long v11 = *(_OWORD *)(a2 + 96);
  long long v12 = *(_OWORD *)(a2 + 112);
  *(void *)(a1 + 128) = *(void *)(a2 + 128);
  *(unsigned char *)(a1 + 136) = *(unsigned char *)(a2 + 136);
  uint64_t v13 = a3[20];
  uint64_t v19 = a2 + v13;
  uint64_t v20 = a1 + v13;
  *(_OWORD *)(a1 + 96) = v11;
  *(_OWORD *)(a1 + 112) = v12;
  uint64_t v14 = type metadata accessor for CaptureList();
  uint64_t v18 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v14 - 8) + 16);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v18(v20, v19, v14);
  uint64_t v15 = a3[22];
  *(void *)(a1 + a3[21]) = *(void *)(a2 + a3[21]);
  *(unsigned char *)(a1 + v15) = *(unsigned char *)(a2 + v15);
  uint64_t v16 = a3[24];
  *(void *)(a1 + a3[23]) = *(void *)(a2 + a3[23]);
  *(void *)(a1 + v16) = *(void *)(a2 + v16);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for MEProgram.Builder(uint64_t a1, uint64_t a2, int *a3)
{
  *(void *)a1 = *(void *)a2;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(unsigned char *)(a1 + 8) = *(unsigned char *)(a2 + 8);
  *(unsigned char *)(a1 + 9) = *(unsigned char *)(a2 + 9);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 56) = *(void *)(a2 + 56);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 64) = *(void *)(a2 + 64);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 72) = *(void *)(a2 + 72);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 80) = *(void *)(a2 + 80);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 88) = *(void *)(a2 + 88);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 96) = *(void *)(a2 + 96);
  *(void *)(a1 + 104) = *(void *)(a2 + 104);
  *(void *)(a1 + 112) = *(void *)(a2 + 112);
  *(void *)(a1 + 120) = *(void *)(a2 + 120);
  uint64_t v6 = *(void *)(a2 + 128);
  *(unsigned char *)(a1 + 136) = *(unsigned char *)(a2 + 136);
  *(void *)(a1 + 128) = v6;
  uint64_t v7 = a3[20];
  uint64_t v8 = a1 + v7;
  uint64_t v9 = a2 + v7;
  uint64_t v10 = type metadata accessor for CaptureList();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v10 - 8) + 24))(v8, v9, v10);
  *(void *)(a1 + a3[21]) = *(void *)(a2 + a3[21]);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(unsigned char *)(a1 + a3[22]) = *(unsigned char *)(a2 + a3[22]);
  *(void *)(a1 + a3[23]) = *(void *)(a2 + a3[23]);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + a3[24]) = *(void *)(a2 + a3[24]);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t initializeWithTake for MEProgram.Builder(uint64_t a1, uint64_t a2, int *a3)
{
  *(void *)a1 = *(void *)a2;
  *(_WORD *)(a1 + 8) = *(_WORD *)(a2 + 8);
  long long v6 = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  *(_OWORD *)(a1 + 32) = v6;
  long long v7 = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 64) = v7;
  long long v8 = *(_OWORD *)(a2 + 96);
  *(_OWORD *)(a1 + 80) = *(_OWORD *)(a2 + 80);
  *(_OWORD *)(a1 + 96) = v8;
  long long v9 = *(_OWORD *)(a2 + 112);
  *(void *)(a1 + 128) = *(void *)(a2 + 128);
  *(unsigned char *)(a1 + 136) = *(unsigned char *)(a2 + 136);
  uint64_t v10 = a3[20];
  uint64_t v11 = a1 + v10;
  uint64_t v12 = a2 + v10;
  *(_OWORD *)(a1 + 112) = v9;
  uint64_t v13 = type metadata accessor for CaptureList();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v13 - 8) + 32))(v11, v12, v13);
  uint64_t v14 = a3[22];
  *(void *)(a1 + a3[21]) = *(void *)(a2 + a3[21]);
  *(unsigned char *)(a1 + v14) = *(unsigned char *)(a2 + v14);
  uint64_t v15 = a3[24];
  *(void *)(a1 + a3[23]) = *(void *)(a2 + a3[23]);
  *(void *)(a1 + v15) = *(void *)(a2 + v15);
  return a1;
}

uint64_t assignWithTake for MEProgram.Builder(uint64_t a1, uint64_t a2, int *a3)
{
  *(void *)a1 = *(void *)a2;
  swift_bridgeObjectRelease();
  *(unsigned char *)(a1 + 8) = *(unsigned char *)(a2 + 8);
  *(unsigned char *)(a1 + 9) = *(unsigned char *)(a2 + 9);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  swift_bridgeObjectRelease();
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  swift_bridgeObjectRelease();
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  swift_bridgeObjectRelease();
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  swift_bridgeObjectRelease();
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  swift_bridgeObjectRelease();
  *(void *)(a1 + 56) = *(void *)(a2 + 56);
  swift_bridgeObjectRelease();
  *(void *)(a1 + 64) = *(void *)(a2 + 64);
  swift_bridgeObjectRelease();
  *(void *)(a1 + 72) = *(void *)(a2 + 72);
  swift_bridgeObjectRelease();
  *(void *)(a1 + 80) = *(void *)(a2 + 80);
  swift_bridgeObjectRelease();
  *(void *)(a1 + 88) = *(void *)(a2 + 88);
  swift_bridgeObjectRelease();
  long long v6 = *(_OWORD *)(a2 + 112);
  *(_OWORD *)(a1 + 96) = *(_OWORD *)(a2 + 96);
  *(_OWORD *)(a1 + 112) = v6;
  *(void *)(a1 + 128) = *(void *)(a2 + 128);
  *(unsigned char *)(a1 + 136) = *(unsigned char *)(a2 + 136);
  uint64_t v7 = a3[20];
  uint64_t v8 = a1 + v7;
  uint64_t v9 = a2 + v7;
  uint64_t v10 = type metadata accessor for CaptureList();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v10 - 8) + 40))(v8, v9, v10);
  *(void *)(a1 + a3[21]) = *(void *)(a2 + a3[21]);
  swift_bridgeObjectRelease();
  uint64_t v11 = a3[23];
  *(unsigned char *)(a1 + a3[22]) = *(unsigned char *)(a2 + a3[22]);
  *(void *)(a1 + v11) = *(void *)(a2 + v11);
  swift_bridgeObjectRelease();
  *(void *)(a1 + a3[24]) = *(void *)(a2 + a3[24]);
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for MEProgram.Builder(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x270FA0340](a1, a2, a3, sub_209F99314);
}

uint64_t sub_209F99314(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  if (a2 == 0x7FFFFFFF)
  {
    uint64_t v4 = *a1;
    if ((unint64_t)*a1 >= 0xFFFFFFFF) {
      LODWORD(v4) = -1;
    }
    return (v4 + 1);
  }
  else
  {
    uint64_t v8 = type metadata accessor for CaptureList();
    uint64_t v9 = *(uint64_t (**)(char *, uint64_t, uint64_t))(*(void *)(v8 - 8) + 48);
    uint64_t v10 = v8;
    uint64_t v11 = (char *)a1 + *(int *)(a3 + 80);
    return v9(v11, a2, v10);
  }
}

uint64_t storeEnumTagSinglePayload for MEProgram.Builder(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x270FA0580](a1, a2, a3, a4, sub_209F993D8);
}

void *sub_209F993D8(void *result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *unint64_t result = (a2 - 1);
  }
  else
  {
    uint64_t v7 = type metadata accessor for CaptureList();
    uint64_t v8 = *(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 56);
    uint64_t v9 = v7;
    uint64_t v10 = (char *)v5 + *(int *)(a4 + 80);
    return (void *)v8(v10, a2, a2, v9);
  }
  return result;
}

uint64_t type metadata completion function for MEProgram.Builder()
{
  uint64_t result = type metadata accessor for CaptureList();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

void *initializeBufferWithCopyOfBuffer for Compiler.ByteCodeGen(void *a1, void *a2, int *a3)
{
  int v3 = *(_DWORD *)(*((void *)a3 - 1) + 80);
  uint64_t v4 = *a2;
  *a1 = *a2;
  if ((v3 & 0x20000) != 0)
  {
    uint64_t v7 = (void *)(v4 + ((v3 + 16) & ~(unint64_t)v3));
    swift_retain();
  }
  else
  {
    uint64_t v7 = a1;
    uint64_t v8 = a3[5];
    uint64_t v9 = (char *)a1 + v8;
    uint64_t v10 = (char *)a2 + v8;
    *(void *)uint64_t v9 = *(void *)((char *)a2 + v8);
    *((_WORD *)v9 + 4) = *(_WORD *)((char *)a2 + v8 + 8);
    uint64_t v12 = *(void *)((char *)a2 + v8 + 16);
    uint64_t v11 = *(void *)((char *)a2 + v8 + 24);
    *((void *)v9 + 2) = v12;
    *((void *)v9 + 3) = v11;
    uint64_t v13 = *((void *)v10 + 5);
    *((void *)v9 + 4) = *((void *)v10 + 4);
    *((void *)v9 + 5) = v13;
    uint64_t v23 = *((void *)v10 + 7);
    *((void *)v9 + 6) = *((void *)v10 + 6);
    *((void *)v9 + 7) = v23;
    uint64_t v24 = *((void *)v10 + 9);
    *((void *)v9 + 8) = *((void *)v10 + 8);
    *((void *)v9 + 9) = v24;
    uint64_t v25 = *((void *)v10 + 11);
    *((void *)v9 + 10) = *((void *)v10 + 10);
    *((void *)v9 + 11) = v25;
    long long v14 = *((_OWORD *)v10 + 7);
    *((_OWORD *)v9 + 6) = *((_OWORD *)v10 + 6);
    *((_OWORD *)v9 + 7) = v14;
    *((void *)v9 + 16) = *((void *)v10 + 16);
    v9[136] = v10[136];
    uint64_t v15 = (int *)type metadata accessor for MEProgram.Builder(0);
    uint64_t v16 = v15[20];
    uint64_t v21 = &v10[v16];
    uint64_t v22 = &v9[v16];
    uint64_t v17 = type metadata accessor for CaptureList();
    uint64_t v20 = *(void (**)(char *, char *, uint64_t))(*(void *)(v17 - 8) + 16);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v20(v22, v21, v17);
    *(void *)&v9[v15[21]] = *(void *)&v10[v15[21]];
    v9[v15[22]] = v10[v15[22]];
    *(void *)&v9[v15[23]] = *(void *)&v10[v15[23]];
    *(void *)&v9[v15[24]] = *(void *)&v10[v15[24]];
    uint64_t v18 = a3[7];
    *((unsigned char *)v7 + a3[6]) = *((unsigned char *)a2 + a3[6]);
    *(void *)((char *)v7 + v18) = *(void *)((char *)a2 + v18);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
  }
  return v7;
}

uint64_t destroy for Compiler.ByteCodeGen(uint64_t a1, uint64_t a2)
{
  swift_bridgeObjectRelease();
  uint64_t v4 = a1 + *(int *)(a2 + 20);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v5 = v4 + *(int *)(type metadata accessor for MEProgram.Builder(0) + 80);
  uint64_t v6 = type metadata accessor for CaptureList();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v6 - 8) + 8))(v5, v6);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  return swift_bridgeObjectRelease();
}

void *initializeWithCopy for Compiler.ByteCodeGen(void *a1, void *a2, int *a3)
{
  *a1 = *a2;
  uint64_t v4 = a3[5];
  uint64_t v5 = (char *)a1 + v4;
  uint64_t v6 = (char *)a2 + v4;
  *(void *)uint64_t v5 = *(void *)((char *)a2 + v4);
  *((_WORD *)v5 + 4) = *(_WORD *)((char *)a2 + v4 + 8);
  uint64_t v7 = *(void *)((char *)a2 + v4 + 24);
  *((void *)v5 + 2) = *(void *)((char *)a2 + v4 + 16);
  *((void *)v5 + 3) = v7;
  uint64_t v15 = *(void *)((char *)a2 + v4 + 40);
  *((void *)v5 + 4) = *(void *)((char *)a2 + v4 + 32);
  *((void *)v5 + 5) = v15;
  uint64_t v18 = *(void *)((char *)a2 + v4 + 56);
  *((void *)v5 + 6) = *(void *)((char *)a2 + v4 + 48);
  *((void *)v5 + 7) = v18;
  uint64_t v19 = *(void *)((char *)a2 + v4 + 72);
  *((void *)v5 + 8) = *(void *)((char *)a2 + v4 + 64);
  *((void *)v5 + 9) = v19;
  uint64_t v20 = *(void *)((char *)a2 + v4 + 88);
  *((void *)v5 + 10) = *(void *)((char *)a2 + v4 + 80);
  *((void *)v5 + 11) = v20;
  long long v8 = *(_OWORD *)((char *)a2 + v4 + 112);
  *((_OWORD *)v5 + 6) = *(_OWORD *)((char *)a2 + v4 + 96);
  *((_OWORD *)v5 + 7) = v8;
  *((void *)v5 + 16) = *(void *)((char *)a2 + v4 + 128);
  v5[136] = *((unsigned char *)a2 + v4 + 136);
  uint64_t v9 = (int *)type metadata accessor for MEProgram.Builder(0);
  uint64_t v10 = v9[20];
  uint64_t v16 = &v6[v10];
  uint64_t v17 = &v5[v10];
  uint64_t v11 = type metadata accessor for CaptureList();
  long long v14 = *(void (**)(char *, char *, uint64_t))(*(void *)(v11 - 8) + 16);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v14(v17, v16, v11);
  *(void *)&v5[v9[21]] = *(void *)&v6[v9[21]];
  v5[v9[22]] = v6[v9[22]];
  *(void *)&v5[v9[23]] = *(void *)&v6[v9[23]];
  *(void *)&v5[v9[24]] = *(void *)&v6[v9[24]];
  uint64_t v12 = a3[7];
  *((unsigned char *)a1 + a3[6]) = *((unsigned char *)a2 + a3[6]);
  *(void *)((char *)a1 + v12) = *(void *)((char *)a2 + v12);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

void *assignWithCopy for Compiler.ByteCodeGen(void *a1, void *a2, int *a3)
{
  *a1 = *a2;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v6 = a3[5];
  uint64_t v7 = (char *)a1 + v6;
  long long v8 = (char *)a2 + v6;
  *(void *)((char *)a1 + v6) = *(void *)((char *)a2 + v6);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v7[8] = v8[8];
  v7[9] = v8[9];
  *((void *)v7 + 2) = *((void *)v8 + 2);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *((void *)v7 + 3) = *((void *)v8 + 3);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *((void *)v7 + 4) = *((void *)v8 + 4);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *((void *)v7 + 5) = *((void *)v8 + 5);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *((void *)v7 + 6) = *((void *)v8 + 6);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *((void *)v7 + 7) = *((void *)v8 + 7);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *((void *)v7 + 8) = *((void *)v8 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *((void *)v7 + 9) = *((void *)v8 + 9);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *((void *)v7 + 10) = *((void *)v8 + 10);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *((void *)v7 + 11) = *((void *)v8 + 11);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *((void *)v7 + 12) = *((void *)v8 + 12);
  *((void *)v7 + 13) = *((void *)v8 + 13);
  *((void *)v7 + 14) = *((void *)v8 + 14);
  *((void *)v7 + 15) = *((void *)v8 + 15);
  uint64_t v9 = *((void *)v8 + 16);
  v7[136] = v8[136];
  *((void *)v7 + 16) = v9;
  uint64_t v10 = (int *)type metadata accessor for MEProgram.Builder(0);
  uint64_t v11 = v10[20];
  uint64_t v12 = &v7[v11];
  uint64_t v13 = &v8[v11];
  uint64_t v14 = type metadata accessor for CaptureList();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v14 - 8) + 24))(v12, v13, v14);
  *(void *)&v7[v10[21]] = *(void *)&v8[v10[21]];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v7[v10[22]] = v8[v10[22]];
  *(void *)&v7[v10[23]] = *(void *)&v8[v10[23]];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)&v7[v10[24]] = *(void *)&v8[v10[24]];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *((unsigned char *)a1 + a3[6]) = *((unsigned char *)a2 + a3[6]);
  *(void *)((char *)a1 + a3[7]) = *(void *)((char *)a2 + a3[7]);
  return a1;
}

void *initializeWithTake for Compiler.ByteCodeGen(void *a1, void *a2, int *a3)
{
  *a1 = *a2;
  uint64_t v6 = a3[5];
  uint64_t v7 = (char *)a1 + v6;
  long long v8 = (char *)a2 + v6;
  *(void *)uint64_t v7 = *(void *)((char *)a2 + v6);
  *((_WORD *)v7 + 4) = *(_WORD *)((char *)a2 + v6 + 8);
  long long v9 = *(_OWORD *)((char *)a2 + v6 + 32);
  *((_OWORD *)v7 + 1) = *(_OWORD *)((char *)a2 + v6 + 16);
  *((_OWORD *)v7 + 2) = v9;
  long long v10 = *(_OWORD *)((char *)a2 + v6 + 64);
  *((_OWORD *)v7 + 3) = *(_OWORD *)((char *)a2 + v6 + 48);
  *((_OWORD *)v7 + 4) = v10;
  long long v11 = *(_OWORD *)((char *)a2 + v6 + 96);
  *((_OWORD *)v7 + 5) = *(_OWORD *)((char *)a2 + v6 + 80);
  *((_OWORD *)v7 + 6) = v11;
  *((_OWORD *)v7 + 7) = *(_OWORD *)((char *)a2 + v6 + 112);
  *((void *)v7 + 16) = *(void *)((char *)a2 + v6 + 128);
  v7[136] = *((unsigned char *)a2 + v6 + 136);
  uint64_t v12 = (int *)type metadata accessor for MEProgram.Builder(0);
  uint64_t v13 = v12[20];
  uint64_t v14 = &v7[v13];
  uint64_t v15 = &v8[v13];
  uint64_t v16 = type metadata accessor for CaptureList();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v16 - 8) + 32))(v14, v15, v16);
  *(void *)&v7[v12[21]] = *(void *)&v8[v12[21]];
  v7[v12[22]] = v8[v12[22]];
  *(void *)&v7[v12[23]] = *(void *)&v8[v12[23]];
  *(void *)&v7[v12[24]] = *(void *)&v8[v12[24]];
  uint64_t v17 = a3[7];
  *((unsigned char *)a1 + a3[6]) = *((unsigned char *)a2 + a3[6]);
  *(void *)((char *)a1 + v17) = *(void *)((char *)a2 + v17);
  return a1;
}

void *assignWithTake for Compiler.ByteCodeGen(void *a1, void *a2, int *a3)
{
  *a1 = *a2;
  swift_bridgeObjectRelease();
  uint64_t v6 = a3[5];
  uint64_t v7 = (char *)a1 + v6;
  long long v8 = (char *)a2 + v6;
  *(void *)((char *)a1 + v6) = *(void *)((char *)a2 + v6);
  swift_bridgeObjectRelease();
  v7[8] = v8[8];
  v7[9] = v8[9];
  *((void *)v7 + 2) = *((void *)v8 + 2);
  swift_bridgeObjectRelease();
  *((void *)v7 + 3) = *((void *)v8 + 3);
  swift_bridgeObjectRelease();
  *((void *)v7 + 4) = *((void *)v8 + 4);
  swift_bridgeObjectRelease();
  *((void *)v7 + 5) = *((void *)v8 + 5);
  swift_bridgeObjectRelease();
  *((void *)v7 + 6) = *((void *)v8 + 6);
  swift_bridgeObjectRelease();
  *((void *)v7 + 7) = *((void *)v8 + 7);
  swift_bridgeObjectRelease();
  *((void *)v7 + 8) = *((void *)v8 + 8);
  swift_bridgeObjectRelease();
  *((void *)v7 + 9) = *((void *)v8 + 9);
  swift_bridgeObjectRelease();
  *((void *)v7 + 10) = *((void *)v8 + 10);
  swift_bridgeObjectRelease();
  *((void *)v7 + 11) = *((void *)v8 + 11);
  swift_bridgeObjectRelease();
  long long v9 = *((_OWORD *)v8 + 7);
  *((_OWORD *)v7 + 6) = *((_OWORD *)v8 + 6);
  *((_OWORD *)v7 + 7) = v9;
  *((void *)v7 + 16) = *((void *)v8 + 16);
  v7[136] = v8[136];
  long long v10 = (int *)type metadata accessor for MEProgram.Builder(0);
  uint64_t v11 = v10[20];
  uint64_t v12 = &v7[v11];
  uint64_t v13 = &v8[v11];
  uint64_t v14 = type metadata accessor for CaptureList();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v14 - 8) + 40))(v12, v13, v14);
  *(void *)&v7[v10[21]] = *(void *)&v8[v10[21]];
  swift_bridgeObjectRelease();
  v7[v10[22]] = v8[v10[22]];
  *(void *)&v7[v10[23]] = *(void *)&v8[v10[23]];
  swift_bridgeObjectRelease();
  *(void *)&v7[v10[24]] = *(void *)&v8[v10[24]];
  swift_bridgeObjectRelease();
  uint64_t v15 = a3[7];
  *((unsigned char *)a1 + a3[6]) = *((unsigned char *)a2 + a3[6]);
  *(void *)((char *)a1 + v15) = *(void *)((char *)a2 + v15);
  return a1;
}

uint64_t getEnumTagSinglePayload for Compiler.ByteCodeGen(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x270FA0340](a1, a2, a3, sub_209F9A03C);
}

uint64_t sub_209F9A03C(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  if (a2 == 0x7FFFFFFF)
  {
    uint64_t v4 = *a1;
    if ((unint64_t)*a1 >= 0xFFFFFFFF) {
      LODWORD(v4) = -1;
    }
    return (v4 + 1);
  }
  else
  {
    uint64_t v8 = type metadata accessor for MEProgram.Builder(0);
    long long v9 = *(uint64_t (**)(char *, uint64_t, uint64_t))(*(void *)(v8 - 8) + 48);
    uint64_t v10 = v8;
    uint64_t v11 = (char *)a1 + *(int *)(a3 + 20);
    return v9(v11, a2, v10);
  }
}

uint64_t storeEnumTagSinglePayload for Compiler.ByteCodeGen(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x270FA0580](a1, a2, a3, a4, sub_209F9A100);
}

void *sub_209F9A100(void *result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *uint64_t result = (a2 - 1);
  }
  else
  {
    uint64_t v7 = type metadata accessor for MEProgram.Builder(0);
    uint64_t v8 = *(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 56);
    uint64_t v9 = v7;
    uint64_t v10 = (char *)v5 + *(int *)(a4 + 20);
    return (void *)v8(v10, a2, a2, v9);
  }
  return result;
}

uint64_t type metadata completion function for Compiler.ByteCodeGen()
{
  uint64_t result = type metadata accessor for MEProgram.Builder(319);
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

ValueMetadata *type metadata accessor for _Distance()
{
  return &type metadata for _Distance;
}

ValueMetadata *type metadata accessor for AssertionPayload()
{
  return &type metadata for AssertionPayload;
}

uint64_t getEnumTagSinglePayload for QuantifyPayload.PayloadType(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0xFD) {
    goto LABEL_17;
  }
  if (a2 + 3 >= 0xFFFF00) {
    int v2 = 4;
  }
  else {
    int v2 = 2;
  }
  if ((a2 + 3) >> 8 < 0xFF) {
    int v3 = 1;
  }
  else {
    int v3 = v2;
  }
  if (v3 == 4)
  {
    int v4 = *(_DWORD *)(a1 + 1);
    if (v4) {
      return (*a1 | (v4 << 8)) - 3;
    }
  }
  else
  {
    if (v3 == 2)
    {
      int v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1)) {
        goto LABEL_17;
      }
      return (*a1 | (v4 << 8)) - 3;
    }
    int v4 = a1[1];
    if (a1[1]) {
      return (*a1 | (v4 << 8)) - 3;
    }
  }
LABEL_17:
  unsigned int v6 = *a1;
  BOOL v7 = v6 >= 4;
  int v8 = v6 - 4;
  if (!v7) {
    int v8 = -1;
  }
  return (v8 + 1);
}

unsigned char *storeEnumTagSinglePayload for QuantifyPayload.PayloadType(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 3 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 3) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFD) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFC)
  {
    unsigned int v6 = ((a2 - 253) >> 8) + 1;
    *uint64_t result = a2 + 3;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x209F9A3D8);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *uint64_t result = a2 + 3;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for QuantifyPayload.PayloadType()
{
  return &type metadata for QuantifyPayload.PayloadType;
}

uint64_t getEnumTagSinglePayload for Instruction.OpCode(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0xE4) {
    goto LABEL_17;
  }
  if (a2 + 28 >= 0xFFFF00) {
    int v2 = 4;
  }
  else {
    int v2 = 2;
  }
  if ((a2 + 28) >> 8 < 0xFF) {
    int v3 = 1;
  }
  else {
    int v3 = v2;
  }
  if (v3 == 4)
  {
    int v4 = *(_DWORD *)(a1 + 1);
    if (v4) {
      return (*a1 | (v4 << 8)) - 28;
    }
  }
  else
  {
    if (v3 == 2)
    {
      int v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1)) {
        goto LABEL_17;
      }
      return (*a1 | (v4 << 8)) - 28;
    }
    int v4 = a1[1];
    if (a1[1]) {
      return (*a1 | (v4 << 8)) - 28;
    }
  }
LABEL_17:
  unsigned int v6 = *a1;
  BOOL v7 = v6 >= 0x1D;
  int v8 = v6 - 29;
  if (!v7) {
    int v8 = -1;
  }
  return (v8 + 1);
}

unsigned char *storeEnumTagSinglePayload for Instruction.OpCode(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 28 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 28) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xE4) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xE3)
  {
    unsigned int v6 = ((a2 - 228) >> 8) + 1;
    *uint64_t result = a2 + 28;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x209F9A56CLL);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *uint64_t result = a2 + 28;
        break;
    }
  }
  return result;
}

uint64_t getEnumTag for Instruction.OpCode(unsigned __int8 *a1)
{
  return *a1;
}

unsigned char *destructiveInjectEnumTag for Instruction.OpCode(unsigned char *result, char a2)
{
  *uint64_t result = a2;
  return result;
}

ValueMetadata *type metadata accessor for Instruction.OpCode()
{
  return &type metadata for Instruction.OpCode;
}

uint64_t type metadata completion function for PatternOrEmpty.State.Representation()
{
  uint64_t result = swift_getAssociatedTypeWitness();
  if (v1 <= 0x3F)
  {
    void v3[4] = *(void *)(result - 8) + 64;
    swift_getAssociatedTypeWitness();
    swift_getAssociatedConformanceWitness();
    uint64_t result = swift_getAssociatedTypeWitness();
    if (v2 <= 0x3F)
    {
      swift_getTupleTypeLayout2();
      v3[5] = v3;
      swift_initEnumMetadataMultiPayload();
      return 0;
    }
  }
  return result;
}

uint64_t getEnumTag for PatternOrEmpty.State.Representation(unsigned __int8 *a1)
{
  unint64_t v2 = *(void *)(*(void *)(swift_getAssociatedTypeWitness() - 8) + 64);
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  uint64_t v3 = *(void *)(swift_getAssociatedTypeWitness() - 8);
  unint64_t v4 = ((*(void *)(v3 + 64) + *(unsigned __int8 *)(v3 + 80)) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80))
     + *(void *)(v3 + 64);
  if (v4 <= v2) {
    unint64_t v4 = v2;
  }
  uint64_t result = a1[v4];
  if (result >= 2)
  {
    if (v4 <= 3) {
      uint64_t v6 = v4;
    }
    else {
      uint64_t v6 = 4;
    }
    switch(v6)
    {
      case 1:
        int v7 = *a1;
        goto LABEL_12;
      case 2:
        int v7 = *(unsigned __int16 *)a1;
        goto LABEL_12;
      case 3:
        int v7 = *(unsigned __int16 *)a1 | (a1[2] << 16);
        goto LABEL_12;
      case 4:
        int v7 = *(_DWORD *)a1;
LABEL_12:
        unsigned int v8 = (v7 | ((result - 2) << (8 * v4))) + 2;
        unsigned int v9 = v7 + 2;
        if (v4 >= 4) {
          uint64_t result = v9;
        }
        else {
          uint64_t result = v8;
        }
        break;
      default:
        return result;
    }
  }
  return result;
}

void destructiveInjectEnumTag for PatternOrEmpty.State.Representation(unsigned char *a1, unsigned int a2)
{
  size_t v4 = *(void *)(*(void *)(swift_getAssociatedTypeWitness() - 8) + 64);
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  uint64_t v5 = *(void *)(swift_getAssociatedTypeWitness() - 8);
  unint64_t v6 = ((*(void *)(v5 + 64) + *(unsigned __int8 *)(v5 + 80)) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80))
     + *(void *)(v5 + 64);
  if (v6 <= v4) {
    size_t v7 = v4;
  }
  else {
    size_t v7 = v6;
  }
  if (a2 > 1)
  {
    unsigned int v8 = a2 - 2;
    if (v7 < 4)
    {
      unsigned int v9 = v8 >> (8 * v7);
      int v10 = v8 & ~(-1 << (8 * v7));
      a1[v7] = v9 + 2;
      bzero(a1, v7);
      if (v7 == 3)
      {
        *(_WORD *)a1 = v10;
        a1[2] = BYTE2(v10);
      }
      else if (v7 == 2)
      {
        *(_WORD *)a1 = v10;
      }
      else
      {
        *a1 = v10;
      }
    }
    else
    {
      a1[v7] = 2;
      bzero(a1, v7);
      *(_DWORD *)a1 = v8;
    }
  }
  else
  {
    a1[v7] = a2;
  }
}

ValueMetadata *type metadata accessor for SentinelValue()
{
  return &type metadata for SentinelValue;
}

uint64_t getEnumTagSinglePayload for Executor(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x270FA0340](a1, a2, a3, sub_209F9AAD0);
}

uint64_t sub_209F9AAD0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return __swift_get_extra_inhabitant_indexTm(a1, a2, a3, type metadata accessor for Engine);
}

uint64_t storeEnumTagSinglePayload for Executor(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x270FA0580](a1, a2, a3, a4, sub_209F9AAFC);
}

uint64_t sub_209F9AAFC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_store_extra_inhabitant_indexTm(a1, a2, a3, a4, type metadata accessor for Engine);
}

uint64_t type metadata completion function for Executor(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return type metadata completion function for DSLTree._AST.GroupKind(a1, a2, a3, type metadata accessor for MEProgram);
}

uint64_t type metadata completion function for RangesIterator()
{
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  if (v1 <= 0x3F)
  {
    uint64_t AssociatedTypeWitness = swift_checkMetadataState();
    if (v2 <= 0x3F)
    {
      uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
      if (v3 <= 0x3F)
      {
        swift_initStructMetadata();
        return 0;
      }
    }
  }
  return AssociatedTypeWitness;
}

uint64_t *initializeBufferWithCopyOfBuffer for RangesIterator(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v3 = *(void *)(a3 + 16);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v4 = *(void *)(AssociatedTypeWitness - 8);
  uint64_t v5 = *(void *)(v3 - 8);
  int v6 = *(_DWORD *)(v5 + 80);
  uint64_t v7 = *(void *)(v4 + 64) + v6;
  uint64_t v8 = *(void *)(v5 + 64);
  uint64_t v9 = swift_getAssociatedTypeWitness();
  uint64_t v10 = *(void *)(v9 - 8);
  uint64_t v11 = *(_DWORD *)(v10 + 80);
  uint64_t v12 = v8 + v11;
  uint64_t v13 = (v6 | *(unsigned char *)(v4 + 80) | *(unsigned char *)(v10 + 80));
  if (v13 <= 7
    && ((v12 + (v7 & ~(unint64_t)v6)) & ~v11) + *(void *)(*(void *)(v9 - 8) + 64) <= 0x18
    && ((v6 | *(_DWORD *)(v4 + 80) | *(_DWORD *)(v10 + 80)) & 0x100000) == 0)
  {
    unint64_t v18 = ~(unint64_t)v6;
    uint64_t v20 = ~v11;
    uint64_t v21 = v9;
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(v4 + 16))(a1, a2, AssociatedTypeWitness);
    uint64_t v17 = a1;
    (*(void (**)(unint64_t, unint64_t, uint64_t))(v5 + 16))(((unint64_t)a1 + v7) & v18, ((unint64_t)a2 + v7) & v18, v3);
    (*(void (**)(unint64_t, unint64_t, uint64_t))(v10 + 16))(((((unint64_t)a1 + v7) & v18) + v12) & v20, ((((unint64_t)a2 + v7) & v18) + v12) & v20, v21);
  }
  else
  {
    uint64_t v16 = *a2;
    *a1 = *a2;
    uint64_t v17 = (uint64_t *)(v16 + ((v13 + 16) & ~v13));
    swift_retain();
  }
  return v17;
}

uint64_t destroy for RangesIterator(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 16);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v5 = *(void *)(AssociatedTypeWitness - 8) + 8;
  (*(void (**)(uint64_t, uint64_t))v5)(a1, AssociatedTypeWitness);
  uint64_t v6 = *(void *)(v5 + 56);
  uint64_t v7 = *(void *)(v3 - 8);
  uint64_t v8 = v7 + 8;
  unint64_t v9 = (v6 + a1 + *(unsigned __int8 *)(v7 + 80)) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80);
  (*(void (**)(unint64_t, uint64_t))(v7 + 8))(v9, v3);
  uint64_t v10 = *(void *)(v8 + 56);
  uint64_t v11 = swift_getAssociatedTypeWitness();
  uint64_t v12 = *(void *)(v11 - 8);
  uint64_t v13 = *(uint64_t (**)(unint64_t, uint64_t))(v12 + 8);
  uint64_t v14 = v11;
  unint64_t v15 = (v9 + v10 + *(unsigned __int8 *)(v12 + 80)) & ~(unint64_t)*(unsigned __int8 *)(v12 + 80);

  return v13(v15, v14);
}

uint64_t initializeWithCopy for RangesIterator(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(a3 + 16);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v7 = *(void *)(AssociatedTypeWitness - 8) + 16;
  (*(void (**)(uint64_t, uint64_t, uint64_t))v7)(a1, a2, AssociatedTypeWitness);
  uint64_t v8 = *(void *)(v5 - 8);
  uint64_t v9 = v8 + 16;
  uint64_t v10 = *(unsigned __int8 *)(v8 + 80);
  uint64_t v11 = *(void *)(v7 + 48) + v10;
  uint64_t v12 = (v11 + a1) & ~v10;
  uint64_t v13 = (v11 + a2) & ~v10;
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v8 + 16))(v12, v13, v5);
  uint64_t v14 = *(void *)(v9 + 48);
  uint64_t v15 = swift_getAssociatedTypeWitness();
  uint64_t v16 = *(void *)(v15 - 8);
  (*(void (**)(unint64_t, unint64_t, uint64_t))(v16 + 16))((v14 + *(unsigned __int8 *)(v16 + 80) + v12) & ~(unint64_t)*(unsigned __int8 *)(v16 + 80), (v14 + *(unsigned __int8 *)(v16 + 80) + v13) & ~(unint64_t)*(unsigned __int8 *)(v16 + 80), v15);
  return a1;
}

uint64_t assignWithCopy for RangesIterator(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(a3 + 16);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v7 = *(void *)(AssociatedTypeWitness - 8) + 24;
  (*(void (**)(uint64_t, uint64_t, uint64_t))v7)(a1, a2, AssociatedTypeWitness);
  uint64_t v8 = *(void *)(v5 - 8);
  uint64_t v9 = v8 + 24;
  uint64_t v10 = *(unsigned __int8 *)(v8 + 80);
  uint64_t v11 = *(void *)(v7 + 40) + v10;
  uint64_t v12 = (v11 + a1) & ~v10;
  uint64_t v13 = (v11 + a2) & ~v10;
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v8 + 24))(v12, v13, v5);
  uint64_t v14 = *(void *)(v9 + 40);
  uint64_t v15 = swift_getAssociatedTypeWitness();
  uint64_t v16 = *(void *)(v15 - 8);
  (*(void (**)(unint64_t, unint64_t, uint64_t))(v16 + 24))((v14 + *(unsigned __int8 *)(v16 + 80) + v12) & ~(unint64_t)*(unsigned __int8 *)(v16 + 80), (v14 + *(unsigned __int8 *)(v16 + 80) + v13) & ~(unint64_t)*(unsigned __int8 *)(v16 + 80), v15);
  return a1;
}

uint64_t initializeWithTake for RangesIterator(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(a3 + 16);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v7 = *(void *)(AssociatedTypeWitness - 8) + 32;
  (*(void (**)(uint64_t, uint64_t, uint64_t))v7)(a1, a2, AssociatedTypeWitness);
  uint64_t v8 = *(void *)(v5 - 8);
  uint64_t v9 = v8 + 32;
  uint64_t v10 = *(unsigned __int8 *)(v8 + 80);
  uint64_t v11 = *(void *)(v7 + 32) + v10;
  uint64_t v12 = (v11 + a1) & ~v10;
  uint64_t v13 = (v11 + a2) & ~v10;
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v8 + 32))(v12, v13, v5);
  uint64_t v14 = *(void *)(v9 + 32);
  uint64_t v15 = swift_getAssociatedTypeWitness();
  uint64_t v16 = *(void *)(v15 - 8);
  (*(void (**)(unint64_t, unint64_t, uint64_t))(v16 + 32))((v14 + *(unsigned __int8 *)(v16 + 80) + v12) & ~(unint64_t)*(unsigned __int8 *)(v16 + 80), (v14 + *(unsigned __int8 *)(v16 + 80) + v13) & ~(unint64_t)*(unsigned __int8 *)(v16 + 80), v15);
  return a1;
}

uint64_t assignWithTake for RangesIterator(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(a3 + 16);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v7 = *(void *)(AssociatedTypeWitness - 8) + 40;
  (*(void (**)(uint64_t, uint64_t, uint64_t))v7)(a1, a2, AssociatedTypeWitness);
  uint64_t v8 = *(void *)(v5 - 8);
  uint64_t v9 = v8 + 40;
  uint64_t v10 = *(unsigned __int8 *)(v8 + 80);
  uint64_t v11 = *(void *)(v7 + 24) + v10;
  uint64_t v12 = (v11 + a1) & ~v10;
  uint64_t v13 = (v11 + a2) & ~v10;
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v8 + 40))(v12, v13, v5);
  uint64_t v14 = *(void *)(v9 + 24);
  uint64_t v15 = swift_getAssociatedTypeWitness();
  uint64_t v16 = *(void *)(v15 - 8);
  (*(void (**)(unint64_t, unint64_t, uint64_t))(v16 + 40))((v14 + *(unsigned __int8 *)(v16 + 80) + v12) & ~(unint64_t)*(unsigned __int8 *)(v16 + 80), (v14 + *(unsigned __int8 *)(v16 + 80) + v13) & ~(unint64_t)*(unsigned __int8 *)(v16 + 80), v15);
  return a1;
}

uint64_t getEnumTagSinglePayload for RangesIterator(unsigned __int16 *a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(a3 + 16);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v6 = *(void *)(AssociatedTypeWitness - 8);
  uint64_t v31 = AssociatedTypeWitness;
  uint64_t v7 = *(unsigned int *)(v6 + 84);
  uint64_t v8 = *(void *)(v4 - 8);
  unsigned int v30 = *(_DWORD *)(v8 + 84);
  if (v30 <= v7) {
    unsigned int v9 = *(_DWORD *)(v6 + 84);
  }
  else {
    unsigned int v9 = *(_DWORD *)(v8 + 84);
  }
  uint64_t v10 = *(void *)(swift_getAssociatedTypeWitness() - 8);
  uint64_t v11 = *(unsigned __int8 *)(v8 + 80);
  uint64_t v12 = *(void *)(v8 + 64);
  uint64_t v13 = *(unsigned __int8 *)(v10 + 80);
  if (*(_DWORD *)(v10 + 84) <= v9) {
    unsigned int v14 = v9;
  }
  else {
    unsigned int v14 = *(_DWORD *)(v10 + 84);
  }
  if (!a2) {
    return 0;
  }
  uint64_t v15 = *(void *)(v6 + 64) + v11;
  uint64_t v16 = a1;
  if (a2 <= v14) {
    goto LABEL_27;
  }
  uint64_t v17 = ((v12 + v13 + (v15 & ~v11)) & ~v13) + *(void *)(v10 + 64);
  char v18 = 8 * v17;
  if (v17 > 3) {
    goto LABEL_10;
  }
  unsigned int v20 = ((a2 - v14 + ~(-1 << v18)) >> v18) + 1;
  if (HIWORD(v20))
  {
    int v19 = *(_DWORD *)((char *)a1 + v17);
    if (!v19) {
      goto LABEL_27;
    }
    goto LABEL_17;
  }
  if (v20 > 0xFF)
  {
    int v19 = *(unsigned __int16 *)((char *)a1 + v17);
    if (!*(unsigned __int16 *)((char *)a1 + v17)) {
      goto LABEL_27;
    }
    goto LABEL_17;
  }
  if (v20 >= 2)
  {
LABEL_10:
    int v19 = *((unsigned __int8 *)a1 + v17);
    if (!*((unsigned char *)a1 + v17)) {
      goto LABEL_27;
    }
LABEL_17:
    int v21 = (v19 - 1) << v18;
    if (v17 > 3) {
      int v21 = 0;
    }
    if (v17)
    {
      if (v17 <= 3) {
        int v22 = v17;
      }
      else {
        int v22 = 4;
      }
      switch(v22)
      {
        case 2:
          int v23 = *a1;
          break;
        case 3:
          int v23 = *a1 | (*((unsigned __int8 *)a1 + 2) << 16);
          break;
        case 4:
          int v23 = *(_DWORD *)a1;
          break;
        default:
          int v23 = *(unsigned __int8 *)a1;
          break;
      }
    }
    else
    {
      int v23 = 0;
    }
    return v14 + (v23 | v21) + 1;
  }
LABEL_27:
  if (!v14) {
    return 0;
  }
  if (v7 == v14)
  {
    uint64_t v24 = v31;
    uint64_t v25 = *(uint64_t (**)(unsigned __int16 *, uint64_t, uint64_t))(v6 + 48);
    uint64_t v26 = v7;
LABEL_33:
    return v25(v16, v26, v24);
  }
  uint64_t v16 = (unsigned __int16 *)(((unint64_t)a1 + v15) & ~v11);
  if (v30 == v14)
  {
    uint64_t v25 = *(uint64_t (**)(unsigned __int16 *, uint64_t, uint64_t))(v8 + 48);
    uint64_t v26 = v30;
    uint64_t v24 = v4;
    goto LABEL_33;
  }
  unint64_t v28 = ((unint64_t)v16 + v12 + v13) & ~v13;
  int v29 = *(uint64_t (**)(unint64_t))(v10 + 48);

  return v29(v28);
}

void storeEnumTagSinglePayload for RangesIterator(unsigned char *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v5 = *(void *)(a4 + 16);
  uint64_t v6 = *(void *)(swift_getAssociatedTypeWitness() - 8);
  unsigned int v7 = *(_DWORD *)(v6 + 84);
  uint64_t v8 = *(void *)(v5 - 8);
  uint64_t v30 = v8;
  unsigned int v29 = *(_DWORD *)(v8 + 84);
  if (v29 <= v7) {
    unsigned int v9 = *(_DWORD *)(v6 + 84);
  }
  else {
    unsigned int v9 = *(_DWORD *)(v8 + 84);
  }
  uint64_t v10 = *(void *)(swift_getAssociatedTypeWitness() - 8);
  uint64_t v11 = v10;
  if (*(_DWORD *)(v10 + 84) <= v9) {
    unsigned int v12 = v9;
  }
  else {
    unsigned int v12 = *(_DWORD *)(v10 + 84);
  }
  uint64_t v13 = *(unsigned __int8 *)(v8 + 80);
  uint64_t v14 = *(void *)(v6 + 64) + v13;
  uint64_t v15 = *(void *)(v8 + 64);
  uint64_t v16 = *(unsigned __int8 *)(v10 + 80);
  size_t v17 = ((v15 + v16 + (v14 & ~v13)) & ~v16) + *(void *)(v10 + 64);
  if (a3 <= v12)
  {
    int v19 = 0;
    char v18 = a1;
  }
  else
  {
    char v18 = a1;
    if (v17 <= 3)
    {
      unsigned int v23 = ((a3 - v12 + ~(-1 << (8 * v17))) >> (8 * v17)) + 1;
      if (HIWORD(v23))
      {
        int v19 = 4;
      }
      else if (v23 >= 0x100)
      {
        int v19 = 2;
      }
      else
      {
        int v19 = v23 > 1;
      }
    }
    else
    {
      int v19 = 1;
    }
  }
  if (v12 < a2)
  {
    unsigned int v20 = ~v12 + a2;
    if (v17 < 4)
    {
      int v21 = (v20 >> (8 * v17)) + 1;
      if (v17)
      {
        int v24 = v20 & ~(-1 << (8 * v17));
        bzero(v18, v17);
        if (v17 == 3)
        {
          *(_WORD *)char v18 = v24;
          void v18[2] = BYTE2(v24);
        }
        else if (v17 == 2)
        {
          *(_WORD *)char v18 = v24;
        }
        else
        {
          *char v18 = v24;
        }
      }
    }
    else
    {
      bzero(v18, v17);
      *(_DWORD *)char v18 = v20;
      int v21 = 1;
    }
    switch(v19)
    {
      case 1:
        v18[v17] = v21;
        return;
      case 2:
        *(_WORD *)&v18[v17] = v21;
        return;
      case 3:
        goto LABEL_47;
      case 4:
        *(_DWORD *)&v18[v17] = v21;
        return;
      default:
        return;
    }
  }
  uint64_t v22 = ~v13;
  switch(v19)
  {
    case 1:
      v18[v17] = 0;
      if (!a2) {
        return;
      }
      goto LABEL_27;
    case 2:
      *(_WORD *)&v18[v17] = 0;
      if (!a2) {
        return;
      }
      goto LABEL_27;
    case 3:
LABEL_47:
      __break(1u);
      JUMPOUT(0x209F9BC94);
    case 4:
      *(_DWORD *)&v18[v17] = 0;
      goto LABEL_26;
    default:
LABEL_26:
      if (!a2) {
        return;
      }
LABEL_27:
      if (v7 == v12)
      {
        uint64_t v25 = *(void (**)(unsigned char *))(v6 + 56);
        uint64_t v26 = v18;
LABEL_31:
        v25(v26);
        return;
      }
      uint64_t v26 = (unsigned char *)((unint64_t)&v18[v14] & v22);
      if (v29 == v12)
      {
        uint64_t v25 = *(void (**)(unsigned char *))(v30 + 56);
        goto LABEL_31;
      }
      unint64_t v27 = (unint64_t)&v26[v15 + v16] & ~v16;
      unint64_t v28 = *(void (**)(unint64_t))(v11 + 56);
      v28(v27);
      return;
  }
}

uint64_t destroy for RegexMatchesCollection.Iterator(uint64_t a1)
{
  swift_bridgeObjectRelease();
  swift_release();
  uint64_t result = *(void *)(a1 + 64);
  if (result)
  {
    swift_bridgeObjectRelease();
    return swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t initializeWithCopy for RegexMatchesCollection.Iterator(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v4;
  long long v5 = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  *(_OWORD *)(a1 + 32) = v5;
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  uint64_t v6 = *(void *)(a2 + 64);
  swift_bridgeObjectRetain();
  swift_retain();
  if (v6)
  {
    *(void *)(a1 + 56) = *(void *)(a2 + 56);
    *(void *)(a1 + 64) = v6;
    *(void *)(a1 + 72) = *(void *)(a2 + 72);
    *(_OWORD *)(a1 + 80) = *(_OWORD *)(a2 + 80);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
  }
  else
  {
    long long v7 = *(_OWORD *)(a2 + 72);
    *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
    *(_OWORD *)(a1 + 72) = v7;
    *(void *)(a1 + 88) = *(void *)(a2 + 88);
  }
  *(unsigned char *)(a1 + 96) = *(unsigned char *)(a2 + 96);
  *(void *)(a1 + 104) = *(void *)(a2 + 104);
  *(unsigned char *)(a1 + 112) = *(unsigned char *)(a2 + 112);
  return a1;
}

uint64_t assignWithCopy for RegexMatchesCollection.Iterator(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  swift_retain();
  swift_release();
  uint64_t v4 = *(void *)(a2 + 64);
  if (!*(void *)(a1 + 64))
  {
    if (v4)
    {
      *(void *)(a1 + 56) = *(void *)(a2 + 56);
      *(void *)(a1 + 64) = *(void *)(a2 + 64);
      *(void *)(a1 + 72) = *(void *)(a2 + 72);
      *(_OWORD *)(a1 + 80) = *(_OWORD *)(a2 + 80);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      goto LABEL_8;
    }
LABEL_7:
    long long v6 = *(_OWORD *)(a2 + 56);
    long long v7 = *(_OWORD *)(a2 + 72);
    *(void *)(a1 + 88) = *(void *)(a2 + 88);
    *(_OWORD *)(a1 + 56) = v6;
    *(_OWORD *)(a1 + 72) = v7;
    goto LABEL_8;
  }
  if (!v4)
  {
    uint64_t v5 = type metadata accessor for Regex.Match();
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v5 - 8) + 8))(a1 + 56, v5);
    goto LABEL_7;
  }
  *(void *)(a1 + 56) = *(void *)(a2 + 56);
  *(void *)(a1 + 64) = *(void *)(a2 + 64);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 72) = *(void *)(a2 + 72);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 80) = *(void *)(a2 + 80);
  *(void *)(a1 + 88) = *(void *)(a2 + 88);
LABEL_8:
  *(unsigned char *)(a1 + 96) = *(unsigned char *)(a2 + 96);
  uint64_t v8 = *(void *)(a2 + 104);
  *(unsigned char *)(a1 + 112) = *(unsigned char *)(a2 + 112);
  *(void *)(a1 + 104) = v8;
  return a1;
}

uint64_t assignWithTake for RegexMatchesCollection.Iterator(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v4;
  swift_bridgeObjectRelease();
  long long v5 = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  *(_OWORD *)(a1 + 32) = v5;
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  swift_release();
  if (!*(void *)(a1 + 64)) {
    goto LABEL_5;
  }
  uint64_t v6 = *(void *)(a2 + 64);
  if (!v6)
  {
    uint64_t v7 = type metadata accessor for Regex.Match();
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v7 - 8) + 8))(a1 + 56, v7);
LABEL_5:
    long long v8 = *(_OWORD *)(a2 + 72);
    *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
    *(_OWORD *)(a1 + 72) = v8;
    *(void *)(a1 + 88) = *(void *)(a2 + 88);
    goto LABEL_6;
  }
  *(void *)(a1 + 56) = *(void *)(a2 + 56);
  *(void *)(a1 + 64) = v6;
  swift_bridgeObjectRelease();
  *(void *)(a1 + 72) = *(void *)(a2 + 72);
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 80) = *(_OWORD *)(a2 + 80);
LABEL_6:
  *(unsigned char *)(a1 + 96) = *(unsigned char *)(a2 + 96);
  *(void *)(a1 + 104) = *(void *)(a2 + 104);
  *(unsigned char *)(a1 + 112) = *(unsigned char *)(a2 + 112);
  return a1;
}

uint64_t getEnumTagSinglePayload for RegexMatchesCollection.Iterator(uint64_t a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *(unsigned char *)(a1 + 113)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  unint64_t v2 = *(void *)(a1 + 8);
  if (v2 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for RegexMatchesCollection.Iterator(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)(result + 104) = 0;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(unsigned char *)(result + 112) = 0;
    *(void *)uint64_t result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 113) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 8) = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 113) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

uint64_t type metadata accessor for RegexRangesCollection.Iterator()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t type metadata completion function for SplitCollection.Iterator()
{
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  if (v1 <= 0x3F)
  {
    swift_getAssociatedConformanceWitness();
    uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
    if (v2 <= 0x3F)
    {
      uint64_t AssociatedTypeWitness = type metadata accessor for RangesIterator();
      if (v3 <= 0x3F)
      {
        swift_initStructMetadata();
        return 0;
      }
    }
  }
  return AssociatedTypeWitness;
}

uint64_t *initializeBufferWithCopyOfBuffer for SplitCollection.Iterator(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v3 = *(void *)(a3 + 16);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v5 = *(void *)(AssociatedTypeWitness - 8);
  uint64_t v45 = *(void *)(v5 + 64);
  swift_getAssociatedConformanceWitness();
  uint64_t v40 = AssociatedTypeWitness;
  uint64_t v6 = swift_getAssociatedTypeWitness();
  uint64_t v36 = *(void *)(v6 - 8);
  uint64_t v37 = v6;
  int v7 = *(_DWORD *)(v36 + 80);
  uint64_t v35 = v45 + v7;
  uint64_t v41 = v3;
  uint64_t v42 = *(void *)(v36 + 64);
  LODWORD(AssociatedTypeWitness) = *(_DWORD *)(v5 + 80);
  uint64_t v8 = *(void *)(v3 - 8);
  uint64_t v38 = v8;
  int v9 = *(_DWORD *)(v8 + 80);
  uint64_t v10 = swift_getAssociatedTypeWitness();
  int v11 = *(_DWORD *)(*(void *)(v10 - 8) + 80);
  uint64_t v12 = v11;
  uint64_t v13 = (v9 | AssociatedTypeWitness | v11);
  uint64_t v14 = v42 + v13;
  uint64_t v15 = v45 + v9;
  uint64_t v16 = *(void *)(v8 + 64);
  uint64_t v17 = v16 + v11;
  int v18 = (AssociatedTypeWitness | v9 | v11 | v7) & 0x100000;
  if ((v13 | (unint64_t)v7) > 7
    || v18 != 0
    || ((((v42 + v13 + ((v45 + v7) & ~(unint64_t)v7)) & ~v13)
       + ((v16 + v12 + (v15 & ~(unint64_t)v9)) & ~v12)
       + *(void *)(*(void *)(v10 - 8) + 64)
       + 23) & 0xFFFFFFFFFFFFFFF8)
     + 9 > 0x18)
  {
    uint64_t v21 = *a2;
    *a1 = *a2;
    uint64_t v22 = (uint64_t *)(v21
                    + (((v13 | v7) + 16) & ((v13 | v7) & 0xF8 ^ 0xFFFFFFFFFFFFFFF8)));
    swift_retain();
  }
  else
  {
    uint64_t v33 = ~v13;
    unint64_t v34 = ~(unint64_t)v9;
    uint64_t v43 = ~v12;
    uint64_t v32 = *(void (**)(uint64_t *, uint64_t *, uint64_t))(v5 + 16);
    uint64_t v22 = a1;
    uint64_t v46 = v10;
    uint64_t v39 = *(void *)(v10 - 8);
    unint64_t v44 = ((v16 + v12 + (v15 & v34)) & ~v12) + *(void *)(v39 + 64);
    v32(a1, a2, v40);
    unint64_t v23 = ((unint64_t)a1 + v35) & ~(unint64_t)v7;
    unint64_t v24 = ((unint64_t)a2 + v35) & ~(unint64_t)v7;
    (*(void (**)(unint64_t, unint64_t, uint64_t))(v36 + 16))(v23, v24, v37);
    unint64_t v25 = (v23 + v14) & v33;
    unint64_t v26 = (v24 + v14) & v33;
    v32((uint64_t *)v25, (uint64_t *)v26, v40);
    (*(void (**)(unint64_t, unint64_t, uint64_t))(v38 + 16))((v15 + v25) & v34, (v15 + v26) & v34, v41);
    (*(void (**)(unint64_t, unint64_t, uint64_t))(v39 + 16))((v17 + ((v15 + v25) & v34)) & v43, (v17 + ((v15 + v26) & v34)) & v43, v46);
    unint64_t v27 = (v25 + v44 + 7) & 0xFFFFFFFFFFFFFFF8;
    unint64_t v28 = (v26 + v44 + 7) & 0xFFFFFFFFFFFFFFF8;
    *(void *)unint64_t v27 = *(void *)v28;
    *(unsigned char *)(v27 + 8) = *(unsigned char *)(v28 + 8);
    unint64_t v29 = (v25 + v44 + 23) & 0xFFFFFFFFFFFFFFF8;
    unint64_t v30 = (v26 + v44 + 23) & 0xFFFFFFFFFFFFFFF8;
    *(void *)unint64_t v29 = *(void *)v30;
    *(unsigned char *)(v29 + 8) = *(unsigned char *)(v30 + 8);
  }
  return v22;
}

uint64_t destroy for SplitCollection.Iterator(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 16);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v5 = *(void *)(AssociatedTypeWitness - 8);
  unint64_t v24 = *(void (**)(uint64_t, uint64_t))(v5 + 8);
  uint64_t v6 = v5 + 8;
  v24(a1, AssociatedTypeWitness);
  uint64_t v23 = *(void *)(v6 + 56);
  swift_getAssociatedConformanceWitness();
  uint64_t v7 = swift_getAssociatedTypeWitness();
  uint64_t v8 = *(void *)(v7 - 8);
  uint64_t v9 = v8 + 8;
  unint64_t v10 = (v23 + a1 + *(unsigned __int8 *)(v8 + 80)) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80);
  (*(void (**)(unint64_t, uint64_t))(v8 + 8))(v10, v7);
  unint64_t v11 = v10 + *(void *)(v9 + 56);
  LODWORD(v9) = *(_DWORD *)(v6 + 72);
  uint64_t v12 = *(void *)(v3 - 8);
  int v13 = *(_DWORD *)(v12 + 80);
  uint64_t v14 = v13;
  uint64_t v15 = swift_getAssociatedTypeWitness();
  uint64_t v22 = *(void *)(v15 - 8);
  uint64_t v16 = *(_DWORD *)(v22 + 80);
  uint64_t v17 = (v13 | *(_DWORD *)(v22 + 80) | v9);
  unint64_t v18 = (v11 + v17) & ~v17;
  v24(v18, AssociatedTypeWitness);
  (*(void (**)(unint64_t, uint64_t))(v12 + 8))((v23 + v14 + v18) & ~v14, v3);
  unint64_t v19 = (*(void *)(v12 + 64) + v16 + ((v23 + v14 + v18) & ~v14)) & ~v16;
  unsigned int v20 = *(uint64_t (**)(unint64_t, uint64_t))(v22 + 8);

  return v20(v19, v15);
}

uint64_t initializeWithCopy for SplitCollection.Iterator(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(a3 + 16);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v7 = *(void *)(AssociatedTypeWitness - 8);
  uint64_t v38 = *(void (**)(uint64_t, uint64_t, uint64_t))(v7 + 16);
  uint64_t v39 = a1;
  uint64_t v8 = v7 + 16;
  uint64_t v9 = a1;
  v38(a1, a2, AssociatedTypeWitness);
  uint64_t v10 = *(void *)(v8 + 48);
  uint64_t v37 = v10;
  swift_getAssociatedConformanceWitness();
  uint64_t v11 = swift_getAssociatedTypeWitness();
  uint64_t v12 = *(void *)(v11 - 8);
  uint64_t v13 = v12 + 16;
  uint64_t v14 = *(unsigned __int8 *)(v12 + 80);
  uint64_t v15 = v10 + v14;
  uint64_t v16 = (v10 + v14 + v9) & ~v14;
  uint64_t v17 = (v15 + a2) & ~v14;
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v12 + 16))(v16, v17, v11);
  uint64_t v35 = *(void *)(v13 + 48);
  int v34 = *(_DWORD *)(v8 + 64);
  uint64_t v18 = *(void *)(v5 - 8);
  LODWORD(v9) = *(_DWORD *)(v18 + 80);
  uint64_t v19 = v9;
  uint64_t v36 = swift_getAssociatedTypeWitness();
  uint64_t v20 = *(void *)(v36 - 8);
  uint64_t v21 = *(_DWORD *)(v20 + 80);
  uint64_t v22 = (v9 | *(_DWORD *)(v20 + 80) | v34);
  uint64_t v23 = (v35 + v22 + v16) & ~v22;
  uint64_t v24 = (v35 + v22 + v17) & ~v22;
  v38(v23, v24, AssociatedTypeWitness);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v18 + 16))((v37 + v19 + v23) & ~v19, (v37 + v19 + v24) & ~v19, v5);
  uint64_t v25 = *(void *)(v18 + 64) + v21;
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v20 + 16))((v25 + ((v37 + v19 + v23) & ~v19)) & ~v21, (v25 + ((v37 + v19 + v24) & ~v19)) & ~v21, v36);
  uint64_t v26 = *(void *)(v20 + 64) + ((v25 + ((v37 + v19) & ~v19)) & ~v21);
  uint64_t v27 = v26 + v23;
  uint64_t v28 = v26 + v24;
  unint64_t v29 = (v27 + 7) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v30 = (v28 + 7) & 0xFFFFFFFFFFFFFFF8;
  *(void *)unint64_t v29 = *(void *)v30;
  *(unsigned char *)(v29 + 8) = *(unsigned char *)(v30 + 8);
  unint64_t v31 = (v27 + 23) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v32 = (v28 + 23) & 0xFFFFFFFFFFFFFFF8;
  *(void *)unint64_t v31 = *(void *)v32;
  *(unsigned char *)(v31 + 8) = *(unsigned char *)(v32 + 8);
  return v39;
}

uint64_t assignWithCopy for SplitCollection.Iterator(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(a3 + 16);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v7 = *(void *)(AssociatedTypeWitness - 8);
  uint64_t v38 = *(void (**)(uint64_t, uint64_t, uint64_t))(v7 + 24);
  uint64_t v39 = a1;
  uint64_t v8 = v7 + 24;
  uint64_t v9 = a1;
  v38(a1, a2, AssociatedTypeWitness);
  uint64_t v10 = *(void *)(v8 + 40);
  uint64_t v37 = v10;
  swift_getAssociatedConformanceWitness();
  uint64_t v11 = swift_getAssociatedTypeWitness();
  uint64_t v12 = *(void *)(v11 - 8);
  uint64_t v13 = v12 + 24;
  uint64_t v14 = *(unsigned __int8 *)(v12 + 80);
  uint64_t v15 = v10 + v14;
  uint64_t v16 = (v10 + v14 + v9) & ~v14;
  uint64_t v17 = (v15 + a2) & ~v14;
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v12 + 24))(v16, v17, v11);
  uint64_t v35 = *(void *)(v13 + 40);
  int v34 = *(_DWORD *)(v8 + 56);
  uint64_t v18 = *(void *)(v5 - 8);
  LODWORD(v9) = *(_DWORD *)(v18 + 80);
  uint64_t v19 = v9;
  uint64_t v36 = swift_getAssociatedTypeWitness();
  uint64_t v20 = *(void *)(v36 - 8);
  uint64_t v21 = *(_DWORD *)(v20 + 80);
  uint64_t v22 = (v9 | *(_DWORD *)(v20 + 80) | v34);
  uint64_t v23 = (v35 + v22 + v16) & ~v22;
  uint64_t v24 = (v35 + v22 + v17) & ~v22;
  v38(v23, v24, AssociatedTypeWitness);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v18 + 24))((v37 + v19 + v23) & ~v19, (v37 + v19 + v24) & ~v19, v5);
  uint64_t v25 = *(void *)(v18 + 64) + v21;
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v20 + 24))((v25 + ((v37 + v19 + v23) & ~v19)) & ~v21, (v25 + ((v37 + v19 + v24) & ~v19)) & ~v21, v36);
  uint64_t v26 = *(void *)(v20 + 64) + ((v25 + ((v37 + v19) & ~v19)) & ~v21);
  uint64_t v27 = v26 + v23;
  uint64_t v28 = v26 + v24;
  unint64_t v29 = (v27 + 7) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v30 = (v28 + 7) & 0xFFFFFFFFFFFFFFF8;
  *(void *)unint64_t v29 = *(void *)v30;
  *(unsigned char *)(v29 + 8) = *(unsigned char *)(v30 + 8);
  unint64_t v31 = (v27 + 23) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v32 = (v28 + 23) & 0xFFFFFFFFFFFFFFF8;
  *(void *)unint64_t v31 = *(void *)v32;
  *(unsigned char *)(v31 + 8) = *(unsigned char *)(v32 + 8);
  return v39;
}

uint64_t initializeWithTake for SplitCollection.Iterator(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(a3 + 16);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v7 = *(void *)(AssociatedTypeWitness - 8);
  uint64_t v38 = *(void (**)(uint64_t, uint64_t, uint64_t))(v7 + 32);
  uint64_t v39 = a1;
  uint64_t v8 = v7 + 32;
  uint64_t v9 = a1;
  v38(a1, a2, AssociatedTypeWitness);
  uint64_t v10 = *(void *)(v8 + 32);
  uint64_t v37 = v10;
  swift_getAssociatedConformanceWitness();
  uint64_t v11 = swift_getAssociatedTypeWitness();
  uint64_t v12 = *(void *)(v11 - 8);
  uint64_t v13 = v12 + 32;
  uint64_t v14 = *(unsigned __int8 *)(v12 + 80);
  uint64_t v15 = v10 + v14;
  uint64_t v16 = (v10 + v14 + v9) & ~v14;
  uint64_t v17 = (v15 + a2) & ~v14;
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v12 + 32))(v16, v17, v11);
  uint64_t v35 = *(void *)(v13 + 32);
  int v34 = *(_DWORD *)(v8 + 48);
  uint64_t v18 = *(void *)(v5 - 8);
  LODWORD(v9) = *(_DWORD *)(v18 + 80);
  uint64_t v19 = v9;
  uint64_t v36 = swift_getAssociatedTypeWitness();
  uint64_t v20 = *(void *)(v36 - 8);
  uint64_t v21 = *(_DWORD *)(v20 + 80);
  uint64_t v22 = (v9 | *(_DWORD *)(v20 + 80) | v34);
  uint64_t v23 = (v35 + v22 + v16) & ~v22;
  uint64_t v24 = (v35 + v22 + v17) & ~v22;
  v38(v23, v24, AssociatedTypeWitness);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v18 + 32))((v37 + v19 + v23) & ~v19, (v37 + v19 + v24) & ~v19, v5);
  uint64_t v25 = *(void *)(v18 + 64) + v21;
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v20 + 32))((v25 + ((v37 + v19 + v23) & ~v19)) & ~v21, (v25 + ((v37 + v19 + v24) & ~v19)) & ~v21, v36);
  uint64_t v26 = *(void *)(v20 + 64) + ((v25 + ((v37 + v19) & ~v19)) & ~v21);
  uint64_t v27 = v26 + v23;
  uint64_t v28 = v26 + v24;
  unint64_t v29 = (v27 + 7) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v30 = (v28 + 7) & 0xFFFFFFFFFFFFFFF8;
  *(void *)unint64_t v29 = *(void *)v30;
  *(unsigned char *)(v29 + 8) = *(unsigned char *)(v30 + 8);
  unint64_t v31 = (v27 + 23) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v32 = (v28 + 23) & 0xFFFFFFFFFFFFFFF8;
  *(void *)unint64_t v31 = *(void *)v32;
  *(unsigned char *)(v31 + 8) = *(unsigned char *)(v32 + 8);
  return v39;
}

uint64_t assignWithTake for SplitCollection.Iterator(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(a3 + 16);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v7 = *(void *)(AssociatedTypeWitness - 8);
  uint64_t v38 = *(void (**)(uint64_t, uint64_t, uint64_t))(v7 + 40);
  uint64_t v39 = a1;
  uint64_t v8 = v7 + 40;
  uint64_t v9 = a1;
  v38(a1, a2, AssociatedTypeWitness);
  uint64_t v10 = *(void *)(v8 + 24);
  uint64_t v37 = v10;
  swift_getAssociatedConformanceWitness();
  uint64_t v11 = swift_getAssociatedTypeWitness();
  uint64_t v12 = *(void *)(v11 - 8);
  uint64_t v13 = v12 + 40;
  uint64_t v14 = *(unsigned __int8 *)(v12 + 80);
  uint64_t v15 = v10 + v14;
  uint64_t v16 = (v10 + v14 + v9) & ~v14;
  uint64_t v17 = (v15 + a2) & ~v14;
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v12 + 40))(v16, v17, v11);
  uint64_t v35 = *(void *)(v13 + 24);
  int v34 = *(_DWORD *)(v8 + 40);
  uint64_t v18 = *(void *)(v5 - 8);
  LODWORD(v9) = *(_DWORD *)(v18 + 80);
  uint64_t v19 = v9;
  uint64_t v36 = swift_getAssociatedTypeWitness();
  uint64_t v20 = *(void *)(v36 - 8);
  uint64_t v21 = *(_DWORD *)(v20 + 80);
  uint64_t v22 = (v9 | *(_DWORD *)(v20 + 80) | v34);
  uint64_t v23 = (v35 + v22 + v16) & ~v22;
  uint64_t v24 = (v35 + v22 + v17) & ~v22;
  v38(v23, v24, AssociatedTypeWitness);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v18 + 40))((v37 + v19 + v23) & ~v19, (v37 + v19 + v24) & ~v19, v5);
  uint64_t v25 = *(void *)(v18 + 64) + v21;
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v20 + 40))((v25 + ((v37 + v19 + v23) & ~v19)) & ~v21, (v25 + ((v37 + v19 + v24) & ~v19)) & ~v21, v36);
  uint64_t v26 = *(void *)(v20 + 64) + ((v25 + ((v37 + v19) & ~v19)) & ~v21);
  uint64_t v27 = v26 + v23;
  uint64_t v28 = v26 + v24;
  unint64_t v29 = (v27 + 7) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v30 = (v28 + 7) & 0xFFFFFFFFFFFFFFF8;
  *(void *)unint64_t v29 = *(void *)v30;
  *(unsigned char *)(v29 + 8) = *(unsigned char *)(v30 + 8);
  unint64_t v31 = (v27 + 23) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v32 = (v28 + 23) & 0xFFFFFFFFFFFFFFF8;
  *(void *)unint64_t v31 = *(void *)v32;
  *(unsigned char *)(v31 + 8) = *(unsigned char *)(v32 + 8);
  return v39;
}

uint64_t getEnumTagSinglePayload for SplitCollection.Iterator(unsigned __int8 *a1, unsigned int a2, uint64_t a3)
{
  uint64_t v3 = *(void *)(a3 + 16);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v5 = *(void *)(AssociatedTypeWitness - 8);
  uint64_t v53 = v5;
  unsigned int v6 = *(_DWORD *)(v5 + 84);
  swift_getAssociatedConformanceWitness();
  uint64_t v48 = swift_getAssociatedTypeWitness();
  uint64_t v7 = *(void *)(v48 - 8);
  unsigned int v49 = *(_DWORD *)(v7 + 84);
  if (v49 <= v6) {
    unsigned int v8 = v6;
  }
  else {
    unsigned int v8 = *(_DWORD *)(v7 + 84);
  }
  uint64_t v9 = *(void *)(v3 - 8);
  unsigned int v50 = v6;
  unsigned int v47 = *(_DWORD *)(v9 + 84);
  if (v47 > v6) {
    unsigned int v6 = *(_DWORD *)(v9 + 84);
  }
  uint64_t v10 = *(void *)(swift_getAssociatedTypeWitness() - 8);
  uint64_t v11 = v10;
  int v12 = *(_DWORD *)(v10 + 80);
  if (*(_DWORD *)(v10 + 84) <= v6) {
    unsigned int v13 = v6;
  }
  else {
    unsigned int v13 = *(_DWORD *)(v10 + 84);
  }
  if (v13 <= v8) {
    unsigned int v14 = v8;
  }
  else {
    unsigned int v14 = v13;
  }
  uint64_t v15 = *(void *)(v5 + 64);
  uint64_t v16 = *(unsigned __int8 *)(v7 + 80);
  uint64_t v17 = *(void *)(v7 + 64);
  int v18 = *(_DWORD *)(v5 + 80);
  uint64_t v19 = *(void *)(v9 + 64);
  uint64_t v20 = *(void *)(v10 + 64);
  if (v14 <= 0xFE) {
    unsigned int v21 = 254;
  }
  else {
    unsigned int v21 = v14;
  }
  if (!a2) {
    return 0;
  }
  uint64_t v22 = v15 + v16;
  uint64_t v23 = *(_DWORD *)(v9 + 80);
  char v24 = *(_DWORD *)(v9 + 80) | v18;
  uint64_t v25 = v12;
  uint64_t v26 = (v24 | v12);
  uint64_t v27 = v15 + v23;
  uint64_t v28 = (v15 + v23) & ~v23;
  uint64_t v29 = v19 + v25;
  uint64_t v30 = ((v19 + v25 + v28) & ~v25) + v20;
  unint64_t v31 = a1;
  if (v21 < a2)
  {
    unint64_t v32 = ((((v17 + (v22 & ~v16) + v26) & ~v26) + v30 + 23) & 0xFFFFFFFFFFFFFFF8) + 9;
    if (v32 < 4) {
      unsigned int v33 = ((a2 - v21 + 255) >> (8 * v32)) + 1;
    }
    else {
      unsigned int v33 = 2;
    }
    if (v33 >= 0x10000) {
      unsigned int v34 = 4;
    }
    else {
      unsigned int v34 = 2;
    }
    if (v33 < 0x100) {
      unsigned int v34 = 1;
    }
    if (v33 >= 2) {
      uint64_t v35 = v34;
    }
    else {
      uint64_t v35 = 0;
    }
    switch(v35)
    {
      case 1:
        int v36 = a1[v32];
        if (!a1[v32]) {
          break;
        }
        goto LABEL_32;
      case 2:
        int v36 = *(unsigned __int16 *)&a1[v32];
        if (*(_WORD *)&a1[v32]) {
          goto LABEL_32;
        }
        break;
      case 3:
        __break(1u);
        JUMPOUT(0x209F9D940);
      case 4:
        int v36 = *(_DWORD *)&a1[v32];
        if (!v36) {
          break;
        }
LABEL_32:
        int v37 = (v36 - 1) << (8 * v32);
        if (v32 >= 4) {
          int v37 = 0;
        }
        if (((((v17 + (v22 & ~v16) + v26) & ~v26) + v30 + 23) & 0xFFFFFFF8) == 0xFFFFFFF8) {
          int v38 = *a1;
        }
        else {
          int v38 = *(_DWORD *)a1;
        }
        int v43 = v21 + (v38 | v37);
        return (v43 + 1);
      default:
        break;
    }
  }
  if (v50 == v21) {
    goto LABEL_38;
  }
  unint64_t v31 = (unsigned __int8 *)((unint64_t)&a1[v22] & ~v16);
  if (v49 == v21)
  {
    uint64_t v39 = *(uint64_t (**)(unsigned __int8 *, uint64_t, uint64_t))(v7 + 48);
    uint64_t v40 = v49;
    uint64_t v41 = v48;
    goto LABEL_41;
  }
  unint64_t v31 = (unsigned __int8 *)((unint64_t)&v31[v17 + v26] & ~v26);
  if (v13 != v21)
  {
    unsigned int v44 = *(unsigned __int8 *)(((unint64_t)&v31[v30 + 7] & 0xFFFFFFFFFFFFFFF8) + 8);
    if (v44 >= 2)
    {
      int v43 = (v44 + 2147483646) & 0x7FFFFFFF;
      return (v43 + 1);
    }
    return 0;
  }
  if (v50 == v13)
  {
LABEL_38:
    uint64_t v39 = *(uint64_t (**)(unsigned __int8 *, uint64_t, uint64_t))(v53 + 48);
    uint64_t v40 = v50;
    uint64_t v41 = AssociatedTypeWitness;
LABEL_41:
    return v39(v31, v40, v41);
  }
  unint64_t v31 = (unsigned __int8 *)((unint64_t)&v31[v27] & ~v23);
  if (v47 == v13)
  {
    uint64_t v39 = *(uint64_t (**)(unsigned __int8 *, uint64_t, uint64_t))(v9 + 48);
    uint64_t v40 = v47;
    uint64_t v41 = v3;
    goto LABEL_41;
  }
  unint64_t v45 = (unint64_t)&v31[v29] & ~v25;
  uint64_t v46 = *(uint64_t (**)(unint64_t))(v11 + 48);

  return v46(v45);
}

void storeEnumTagSinglePayload for SplitCollection.Iterator(unsigned char *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v4 = *(void *)(a4 + 16);
  uint64_t v5 = *(void *)(swift_getAssociatedTypeWitness() - 8);
  uint64_t v45 = v5;
  unsigned int v6 = *(_DWORD *)(v5 + 84);
  swift_getAssociatedConformanceWitness();
  uint64_t v7 = *(void *)(swift_getAssociatedTypeWitness() - 8);
  uint64_t v44 = v7;
  unsigned int v39 = *(_DWORD *)(v7 + 84);
  if (v39 <= v6) {
    unsigned int v8 = v6;
  }
  else {
    unsigned int v8 = *(_DWORD *)(v7 + 84);
  }
  uint64_t v9 = *(void *)(v4 - 8);
  unsigned int v40 = v6;
  unsigned int v38 = *(_DWORD *)(v9 + 84);
  if (v38 > v6) {
    unsigned int v6 = *(_DWORD *)(v9 + 84);
  }
  uint64_t v10 = *(void *)(swift_getAssociatedTypeWitness() - 8);
  uint64_t v11 = v10;
  int v12 = *(_DWORD *)(v10 + 80);
  if (*(_DWORD *)(v10 + 84) <= v6) {
    unsigned int v13 = v6;
  }
  else {
    unsigned int v13 = *(_DWORD *)(v10 + 84);
  }
  if (v13 <= v8) {
    unsigned int v14 = v8;
  }
  else {
    unsigned int v14 = v13;
  }
  uint64_t v15 = *(void *)(v5 + 64);
  uint64_t v16 = *(unsigned __int8 *)(v7 + 80);
  uint64_t v17 = *(void *)(v7 + 64);
  uint64_t v18 = *(void *)(v10 + 64);
  if (v14 <= 0xFE) {
    unsigned int v14 = 254;
  }
  uint64_t v19 = v15 + v16;
  uint64_t v20 = *(_DWORD *)(v9 + 80);
  uint64_t v21 = *(_DWORD *)(v10 + 80);
  uint64_t v22 = (*(_DWORD *)(v9 + 80) | *(_DWORD *)(v5 + 80) | v12);
  uint64_t v23 = (v17 + ((v15 + v16) & ~v16) + v22) & ~v22;
  uint64_t v24 = v15 + v20;
  uint64_t v25 = *(void *)(v9 + 64) + v21;
  uint64_t v26 = ((v25 + ((v15 + v20) & ~v20)) & ~(unint64_t)v12) + v18;
  size_t v27 = ((v23 + v26 + 23) & 0xFFFFFFFFFFFFFFF8) + 9;
  char v28 = 8 * v27;
  if (v14 >= a3)
  {
    int v31 = 0;
  }
  else
  {
    if (v27 <= 3) {
      unsigned int v29 = ((a3 - v14 + 255) >> v28) + 1;
    }
    else {
      unsigned int v29 = 2;
    }
    if (v29 >= 0x10000) {
      int v30 = 4;
    }
    else {
      int v30 = 2;
    }
    if (v29 < 0x100) {
      int v30 = 1;
    }
    if (v29 >= 2) {
      int v31 = v30;
    }
    else {
      int v31 = 0;
    }
  }
  if (v14 < a2)
  {
    if (v27 < 4) {
      unsigned int v32 = ((~v14 + a2) >> v28) + 1;
    }
    else {
      unsigned int v32 = 1;
    }
    if (v27 >= 4) {
      int v33 = ~v14 + a2;
    }
    else {
      int v33 = (~(_BYTE)v14 + a2);
    }
    bzero(a1, v27);
    if (v27 == 1) {
      *a1 = v33;
    }
    else {
      *(_DWORD *)a1 = v33;
    }
    switch(v31)
    {
      case 1:
        a1[v27] = v32;
        return;
      case 2:
        *(_WORD *)&a1[v27] = v32;
        return;
      case 3:
        goto LABEL_65;
      case 4:
        *(_DWORD *)&a1[v27] = v32;
        return;
      default:
        return;
    }
  }
  switch(v31)
  {
    case 1:
      a1[v27] = 0;
      if (!a2) {
        return;
      }
      goto LABEL_44;
    case 2:
      *(_WORD *)&a1[v27] = 0;
      if (!a2) {
        return;
      }
      goto LABEL_44;
    case 3:
LABEL_65:
      __break(1u);
      JUMPOUT(0x209F9DE5CLL);
    case 4:
      *(_DWORD *)&a1[v27] = 0;
      goto LABEL_43;
    default:
LABEL_43:
      if (!a2) {
        return;
      }
LABEL_44:
      if (v40 == v14)
      {
        unsigned int v34 = *(void (**)(unsigned char *))(v45 + 56);
        uint64_t v35 = a1;
LABEL_48:
        v34(v35);
        return;
      }
      uint64_t v35 = (unsigned char *)((unint64_t)&a1[v19] & ~v16);
      if (v39 == v14)
      {
        unsigned int v34 = *(void (**)(unsigned char *))(v44 + 56);
        goto LABEL_48;
      }
      uint64_t v35 = (unsigned char *)((unint64_t)&v35[v17 + v22] & ~v22);
      if (v13 != v14)
      {
        *(unsigned char *)(((unint64_t)&v35[v26 + 7] & 0xFFFFFFFFFFFFFFF8) + 8) = a2 + 1;
        return;
      }
      if (v40 == v13)
      {
        unsigned int v34 = *(void (**)(unsigned char *))(v45 + 56);
        goto LABEL_48;
      }
      uint64_t v35 = (unsigned char *)((unint64_t)&v35[v24] & ~v20);
      if (v38 == v13)
      {
        unsigned int v34 = *(void (**)(unsigned char *))(v9 + 56);
        goto LABEL_48;
      }
      unint64_t v36 = (unint64_t)&v35[v25] & ~v21;
      int v37 = *(void (**)(unint64_t))(v11 + 56);
      v37(v36);
      return;
  }
}

uint64_t destroy for SubstringSearcher()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  return swift_bridgeObjectRelease();
}

uint64_t initializeWithCopy for SubstringSearcher(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  uint64_t v3 = *(void *)(a2 + 24);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = v3;
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  uint64_t v4 = *(void *)(a2 + 56);
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  *(void *)(a1 + 56) = v4;
  uint64_t v5 = *(void *)(a2 + 72);
  *(void *)(a1 + 64) = *(void *)(a2 + 64);
  *(void *)(a1 + 72) = v5;
  uint64_t v6 = *(void *)(a2 + 80);
  *(unsigned char *)(a1 + 88) = *(unsigned char *)(a2 + 88);
  *(void *)(a1 + 80) = v6;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for SubstringSearcher(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  *(void *)(a1 + 56) = *(void *)(a2 + 56);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 64) = *(void *)(a2 + 64);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 72) = *(void *)(a2 + 72);
  uint64_t v4 = *(void *)(a2 + 80);
  *(unsigned char *)(a1 + 88) = *(unsigned char *)(a2 + 88);
  *(void *)(a1 + 80) = v4;
  return a1;
}

__n128 __swift_memcpy89_8(uint64_t a1, uint64_t a2)
{
  long long v2 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v2;
  __n128 result = *(__n128 *)(a2 + 32);
  long long v4 = *(_OWORD *)(a2 + 48);
  long long v5 = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 73) = *(_OWORD *)(a2 + 73);
  *(_OWORD *)(a1 + 48) = v4;
  *(_OWORD *)(a1 + 64) = v5;
  *(__n128 *)(a1 + 32) = result;
  return result;
}

uint64_t assignWithTake for SubstringSearcher(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  uint64_t v4 = *(void *)(a2 + 24);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = v4;
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
  swift_bridgeObjectRelease();
  uint64_t v5 = *(void *)(a2 + 80);
  *(void *)(a1 + 72) = *(void *)(a2 + 72);
  *(void *)(a1 + 80) = v5;
  *(unsigned char *)(a1 + 88) = *(unsigned char *)(a2 + 88);
  return a1;
}

uint64_t getEnumTagSinglePayload for SubstringSearcher(uint64_t a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *(unsigned char *)(a1 + 89)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  unint64_t v2 = *(void *)(a1 + 24);
  if (v2 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for SubstringSearcher(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(unsigned char *)(result + 88) = 0;
    *(void *)__n128 result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 89) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 24) = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 89) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for SubstringSearcher()
{
  return &type metadata for SubstringSearcher;
}

uint64_t destroy for SubstringSearcher.State()
{
  return swift_bridgeObjectRelease();
}

uint64_t initializeWithCopy for SubstringSearcher.State(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v3;
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(unsigned char *)(a1 + 24) = *(unsigned char *)(a2 + 24);
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for SubstringSearcher.State(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  uint64_t v4 = *(void *)(a2 + 16);
  *(unsigned char *)(a1 + 24) = *(unsigned char *)(a2 + 24);
  *(void *)(a1 + 16) = v4;
  return a1;
}

__n128 __swift_memcpy25_8(uint64_t a1, uint64_t a2)
{
  __n128 result = *(__n128 *)a2;
  *(_OWORD *)(a1 + 9) = *(_OWORD *)(a2 + 9);
  *(__n128 *)a1 = result;
  return result;
}

uint64_t assignWithTake for SubstringSearcher.State(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  swift_bridgeObjectRelease();
  uint64_t v4 = *(void *)(a2 + 16);
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  *(void *)(a1 + 16) = v4;
  *(unsigned char *)(a1 + 24) = *(unsigned char *)(a2 + 24);
  return a1;
}

uint64_t getEnumTagSinglePayload for SubstringSearcher.State(uint64_t *a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *((unsigned char *)a1 + 25)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  uint64_t v2 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for SubstringSearcher.State(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)(result + 8) = 0;
    *(void *)(result + 16) = 0;
    *(unsigned char *)(result + 24) = 0;
    *(void *)__n128 result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 25) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)__n128 result = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 25) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for SubstringSearcher.State()
{
  return &type metadata for SubstringSearcher.State;
}

uint64_t type metadata accessor for ManyConsumer()
{
  return __swift_instantiateGenericMetadata();
}

void *initializeBufferWithCopyOfBuffer for PredicateConsumer(void *a1, void *a2)
{
  uint64_t v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  swift_retain();
  return a1;
}

uint64_t destroy for PredicateConsumer()
{
  return swift_release();
}

__n128 __swift_memcpy16_8(__n128 *a1, __n128 *a2)
{
  __n128 result = *a2;
  *a1 = *a2;
  return result;
}

_OWORD *assignWithTake for PredicateConsumer(_OWORD *a1, _OWORD *a2)
{
  *a1 = *a2;
  swift_release();
  return a1;
}

uint64_t type metadata accessor for PredicateConsumer()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t type metadata completion function for MatchesIterator()
{
  return type metadata completion function for MatchesIterator();
}

{
  uint64_t AssociatedTypeWitness;
  unint64_t v1;
  unint64_t v2;
  unint64_t v3;

  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  if (v1 <= 0x3F)
  {
    uint64_t AssociatedTypeWitness = swift_checkMetadataState();
    if (v2 <= 0x3F)
    {
      uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
      if (v3 <= 0x3F)
      {
        swift_initStructMetadata();
        return 0;
      }
    }
  }
  return AssociatedTypeWitness;
}

uint64_t *initializeBufferWithCopyOfBuffer for MatchesIterator(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  return initializeBufferWithCopyOfBuffer for MatchesIterator(a1, a2, a3);
}

{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v16;
  uint64_t *v17;
  unint64_t v18;
  uint64_t v20;
  uint64_t AssociatedTypeWitness;
  uint64_t v22;

  uint64_t v3 = *(void *)(a3 + 16);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v4 = *(void *)(AssociatedTypeWitness - 8);
  uint64_t v5 = *(void *)(v3 - 8);
  uint64_t v6 = *(_DWORD *)(v5 + 80);
  uint64_t v7 = *(void *)(v4 + 64) + v6;
  unsigned int v8 = *(void *)(v5 + 64);
  uint64_t v9 = swift_getAssociatedTypeWitness();
  uint64_t v10 = *(void *)(v9 - 8);
  uint64_t v11 = *(_DWORD *)(v10 + 80);
  int v12 = v8 + v11;
  unsigned int v13 = (v6 | *(unsigned char *)(v4 + 80) | *(unsigned char *)(v10 + 80));
  if (v13 <= 7
    && ((v8 + v11 + (v7 & ~(unint64_t)v6)) & ~v11) + *(void *)(*(void *)(v9 - 8) + 64) <= 0x18
    && ((v6 | *(_DWORD *)(v4 + 80) | *(_DWORD *)(v10 + 80)) & 0x100000) == 0)
  {
    uint64_t v18 = ~(unint64_t)v6;
    uint64_t v20 = ~v11;
    uint64_t v22 = v9;
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(v4 + 16))(a1, a2, AssociatedTypeWitness);
    uint64_t v17 = a1;
    (*(void (**)(unint64_t, unint64_t, uint64_t))(v5 + 16))(((unint64_t)a1 + v7) & v18, ((unint64_t)a2 + v7) & v18, v3);
    (*(void (**)(unint64_t, unint64_t, uint64_t))(v10 + 16))(((((unint64_t)a1 + v7) & v18) + v12) & v20, ((((unint64_t)a2 + v7) & v18) + v12) & v20, v22);
  }
  else
  {
    uint64_t v16 = *a2;
    *a1 = *a2;
    uint64_t v17 = (uint64_t *)(v16 + ((v13 + 16) & ~v13));
    swift_retain();
  }
  return v17;
}

uint64_t destroy for MatchesIterator(uint64_t a1, uint64_t a2)
{
  return destroy for MatchesIterator(a1, a2);
}

{
  uint64_t v3;
  uint64_t AssociatedTypeWitness;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t (*v13)(unint64_t, uint64_t);
  uint64_t v14;
  unint64_t v15;
  uint64_t vars8;

  uint64_t v3 = *(void *)(a2 + 16);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v5 = *(void *)(AssociatedTypeWitness - 8) + 8;
  (*(void (**)(uint64_t, uint64_t))v5)(a1, AssociatedTypeWitness);
  uint64_t v6 = *(void *)(v5 + 56);
  uint64_t v7 = *(void *)(v3 - 8);
  unsigned int v8 = v7 + 8;
  uint64_t v9 = (v6 + a1 + *(unsigned __int8 *)(v7 + 80)) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80);
  (*(void (**)(unint64_t, uint64_t))(v7 + 8))(v9, v3);
  uint64_t v10 = *(void *)(v8 + 56);
  uint64_t v11 = swift_getAssociatedTypeWitness();
  int v12 = *(void *)(v11 - 8);
  unsigned int v13 = *(uint64_t (**)(unint64_t, uint64_t))(v12 + 8);
  unsigned int v14 = v11;
  uint64_t v15 = (v9 + v10 + *(unsigned __int8 *)(v12 + 80)) & ~(unint64_t)*(unsigned __int8 *)(v12 + 80);

  return v13(v15, v14);
}

uint64_t initializeWithCopy for MatchesIterator(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return initializeWithCopy for MatchesIterator(a1, a2, a3);
}

{
  uint64_t v5;
  uint64_t AssociatedTypeWitness;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  uint64_t v5 = *(void *)(a3 + 16);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v7 = *(void *)(AssociatedTypeWitness - 8) + 16;
  (*(void (**)(uint64_t, uint64_t, uint64_t))v7)(a1, a2, AssociatedTypeWitness);
  unsigned int v8 = *(void *)(v5 - 8);
  uint64_t v9 = v8 + 16;
  uint64_t v10 = *(unsigned __int8 *)(v8 + 80);
  uint64_t v11 = *(void *)(v7 + 48) + v10;
  int v12 = (v11 + a1) & ~v10;
  unsigned int v13 = (v11 + a2) & ~v10;
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v8 + 16))(v12, v13, v5);
  unsigned int v14 = *(void *)(v9 + 48);
  uint64_t v15 = swift_getAssociatedTypeWitness();
  uint64_t v16 = *(void *)(v15 - 8);
  (*(void (**)(unint64_t, unint64_t, uint64_t))(v16 + 16))((v14 + *(unsigned __int8 *)(v16 + 80) + v12) & ~(unint64_t)*(unsigned __int8 *)(v16 + 80), (v14 + *(unsigned __int8 *)(v16 + 80) + v13) & ~(unint64_t)*(unsigned __int8 *)(v16 + 80), v15);
  return a1;
}

uint64_t assignWithCopy for MatchesIterator(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return assignWithCopy for MatchesIterator(a1, a2, a3);
}

{
  uint64_t v5;
  uint64_t AssociatedTypeWitness;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  uint64_t v5 = *(void *)(a3 + 16);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v7 = *(void *)(AssociatedTypeWitness - 8) + 24;
  (*(void (**)(uint64_t, uint64_t, uint64_t))v7)(a1, a2, AssociatedTypeWitness);
  unsigned int v8 = *(void *)(v5 - 8);
  uint64_t v9 = v8 + 24;
  uint64_t v10 = *(unsigned __int8 *)(v8 + 80);
  uint64_t v11 = *(void *)(v7 + 40) + v10;
  int v12 = (v11 + a1) & ~v10;
  unsigned int v13 = (v11 + a2) & ~v10;
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v8 + 24))(v12, v13, v5);
  unsigned int v14 = *(void *)(v9 + 40);
  uint64_t v15 = swift_getAssociatedTypeWitness();
  uint64_t v16 = *(void *)(v15 - 8);
  (*(void (**)(unint64_t, unint64_t, uint64_t))(v16 + 24))((v14 + *(unsigned __int8 *)(v16 + 80) + v12) & ~(unint64_t)*(unsigned __int8 *)(v16 + 80), (v14 + *(unsigned __int8 *)(v16 + 80) + v13) & ~(unint64_t)*(unsigned __int8 *)(v16 + 80), v15);
  return a1;
}

uint64_t initializeWithTake for MatchesIterator(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return initializeWithTake for MatchesIterator(a1, a2, a3);
}

{
  uint64_t v5;
  uint64_t AssociatedTypeWitness;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  uint64_t v5 = *(void *)(a3 + 16);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v7 = *(void *)(AssociatedTypeWitness - 8) + 32;
  (*(void (**)(uint64_t, uint64_t, uint64_t))v7)(a1, a2, AssociatedTypeWitness);
  unsigned int v8 = *(void *)(v5 - 8);
  uint64_t v9 = v8 + 32;
  uint64_t v10 = *(unsigned __int8 *)(v8 + 80);
  uint64_t v11 = *(void *)(v7 + 32) + v10;
  int v12 = (v11 + a1) & ~v10;
  unsigned int v13 = (v11 + a2) & ~v10;
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v8 + 32))(v12, v13, v5);
  unsigned int v14 = *(void *)(v9 + 32);
  uint64_t v15 = swift_getAssociatedTypeWitness();
  uint64_t v16 = *(void *)(v15 - 8);
  (*(void (**)(unint64_t, unint64_t, uint64_t))(v16 + 32))((v14 + *(unsigned __int8 *)(v16 + 80) + v12) & ~(unint64_t)*(unsigned __int8 *)(v16 + 80), (v14 + *(unsigned __int8 *)(v16 + 80) + v13) & ~(unint64_t)*(unsigned __int8 *)(v16 + 80), v15);
  return a1;
}

uint64_t assignWithTake for MatchesIterator(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return assignWithTake for MatchesIterator(a1, a2, a3);
}

{
  uint64_t v5;
  uint64_t AssociatedTypeWitness;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  uint64_t v5 = *(void *)(a3 + 16);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v7 = *(void *)(AssociatedTypeWitness - 8) + 40;
  (*(void (**)(uint64_t, uint64_t, uint64_t))v7)(a1, a2, AssociatedTypeWitness);
  unsigned int v8 = *(void *)(v5 - 8);
  uint64_t v9 = v8 + 40;
  uint64_t v10 = *(unsigned __int8 *)(v8 + 80);
  uint64_t v11 = *(void *)(v7 + 24) + v10;
  int v12 = (v11 + a1) & ~v10;
  unsigned int v13 = (v11 + a2) & ~v10;
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v8 + 40))(v12, v13, v5);
  unsigned int v14 = *(void *)(v9 + 24);
  uint64_t v15 = swift_getAssociatedTypeWitness();
  uint64_t v16 = *(void *)(v15 - 8);
  (*(void (**)(unint64_t, unint64_t, uint64_t))(v16 + 40))((v14 + *(unsigned __int8 *)(v16 + 80) + v12) & ~(unint64_t)*(unsigned __int8 *)(v16 + 80), (v14 + *(unsigned __int8 *)(v16 + 80) + v13) & ~(unint64_t)*(unsigned __int8 *)(v16 + 80), v15);
  return a1;
}

uint64_t getEnumTagSinglePayload for MatchesIterator(unsigned __int16 *a1, unsigned int a2, uint64_t a3)
{
  return getEnumTagSinglePayload for MatchesIterator(a1, a2, a3);
}

{
  uint64_t v4;
  uint64_t AssociatedTypeWitness;
  uint64_t v6;
  uint64_t v7;
  unsigned int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unsigned int v13;
  uint64_t v14;
  unsigned __int16 *v15;
  uint64_t v16;
  char v17;
  int v18;
  unsigned int v19;
  int v20;
  int v21;
  int v22;
  uint64_t v23;
  uint64_t (*v24)(unsigned __int16 *, uint64_t, uint64_t);
  uint64_t v25;
  unint64_t v27;
  uint64_t (*v28)(unint64_t);
  unsigned int v29;
  uint64_t v30;
  unsigned int v31;
  uint64_t vars8;

  uint64_t v4 = *(void *)(a3 + 16);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v6 = *(void *)(AssociatedTypeWitness - 8);
  int v30 = AssociatedTypeWitness;
  uint64_t v7 = *(void *)(v4 - 8);
  unsigned int v29 = *(_DWORD *)(v7 + 84);
  int v31 = *(_DWORD *)(v6 + 84);
  if (v29 <= v31) {
    unsigned int v8 = *(_DWORD *)(v6 + 84);
  }
  else {
    unsigned int v8 = *(_DWORD *)(v7 + 84);
  }
  uint64_t v9 = *(void *)(swift_getAssociatedTypeWitness() - 8);
  uint64_t v10 = *(unsigned __int8 *)(v7 + 80);
  uint64_t v11 = *(void *)(v7 + 64);
  int v12 = *(unsigned __int8 *)(v9 + 80);
  if (*(_DWORD *)(v9 + 84) <= v8) {
    unsigned int v13 = v8;
  }
  else {
    unsigned int v13 = *(_DWORD *)(v9 + 84);
  }
  if (!a2) {
    return 0;
  }
  unsigned int v14 = *(void *)(v6 + 64) + v10;
  uint64_t v15 = a1;
  if (a2 <= v13) {
    goto LABEL_27;
  }
  uint64_t v16 = ((v11 + v12 + (v14 & ~v10)) & ~v12) + *(void *)(v9 + 64);
  uint64_t v17 = 8 * v16;
  if (v16 > 3) {
    goto LABEL_10;
  }
  uint64_t v19 = ((a2 - v13 + ~(-1 << v17)) >> v17) + 1;
  if (HIWORD(v19))
  {
    uint64_t v18 = *(_DWORD *)((char *)a1 + v16);
    if (!v18) {
      goto LABEL_27;
    }
    goto LABEL_17;
  }
  if (v19 > 0xFF)
  {
    uint64_t v18 = *(unsigned __int16 *)((char *)a1 + v16);
    if (!*(unsigned __int16 *)((char *)a1 + v16)) {
      goto LABEL_27;
    }
    goto LABEL_17;
  }
  if (v19 >= 2)
  {
LABEL_10:
    uint64_t v18 = *((unsigned __int8 *)a1 + v16);
    if (!*((unsigned char *)a1 + v16)) {
      goto LABEL_27;
    }
LABEL_17:
    uint64_t v20 = (v18 - 1) << v17;
    if (v16 > 3) {
      uint64_t v20 = 0;
    }
    if (v16)
    {
      if (v16 <= 3) {
        uint64_t v21 = v16;
      }
      else {
        uint64_t v21 = 4;
      }
      switch(v21)
      {
        case 2:
          uint64_t v22 = *a1;
          break;
        case 3:
          uint64_t v22 = *a1 | (*((unsigned __int8 *)a1 + 2) << 16);
          break;
        case 4:
          uint64_t v22 = *(_DWORD *)a1;
          break;
        default:
          uint64_t v22 = *(unsigned __int8 *)a1;
          break;
      }
    }
    else
    {
      uint64_t v22 = 0;
    }
    return v13 + (v22 | v20) + 1;
  }
LABEL_27:
  if (!v13) {
    return 0;
  }
  if (v31 == v13)
  {
    uint64_t v23 = v30;
    uint64_t v24 = *(uint64_t (**)(unsigned __int16 *, uint64_t, uint64_t))(v6 + 48);
    uint64_t v25 = v31;
LABEL_33:
    return v24(v15, v25, v23);
  }
  uint64_t v15 = (unsigned __int16 *)(((unint64_t)a1 + v14) & ~v10);
  if (v29 == v13)
  {
    uint64_t v24 = *(uint64_t (**)(unsigned __int16 *, uint64_t, uint64_t))(v7 + 48);
    uint64_t v25 = v29;
    uint64_t v23 = v4;
    goto LABEL_33;
  }
  size_t v27 = ((unint64_t)v15 + v11 + v12) & ~v12;
  char v28 = *(uint64_t (**)(unint64_t))(v9 + 48);

  return v28(v27);
}

void storeEnumTagSinglePayload for MatchesIterator(unsigned char *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
}

{
  uint64_t v4;
  uint64_t v5;
  unsigned int v6;
  uint64_t v7;
  unsigned int v8;
  uint64_t v9;
  uint64_t v10;
  unsigned int v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  size_t v16;
  unsigned char *v17;
  int v18;
  unsigned int v19;
  int v20;
  uint64_t v21;
  unsigned int v22;
  int v23;
  void (*v24)(unsigned char *);
  unsigned char *v25;
  unint64_t v26;
  void (*v27)(unint64_t);
  unsigned int v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t vars8;

  uint64_t v4 = *(void *)(a4 + 16);
  uint64_t v5 = *(void *)(swift_getAssociatedTypeWitness() - 8);
  unsigned int v29 = v5;
  uint64_t v6 = *(_DWORD *)(v5 + 84);
  uint64_t v7 = *(void *)(v4 - 8);
  int v30 = v7;
  char v28 = *(_DWORD *)(v7 + 84);
  if (v28 <= v6) {
    unsigned int v8 = *(_DWORD *)(v5 + 84);
  }
  else {
    unsigned int v8 = *(_DWORD *)(v7 + 84);
  }
  uint64_t v9 = *(void *)(swift_getAssociatedTypeWitness() - 8);
  uint64_t v10 = v9;
  if (*(_DWORD *)(v9 + 84) <= v8) {
    uint64_t v11 = v8;
  }
  else {
    uint64_t v11 = *(_DWORD *)(v9 + 84);
  }
  int v12 = *(unsigned __int8 *)(v7 + 80);
  unsigned int v13 = *(void *)(v5 + 64) + v12;
  unsigned int v14 = *(void *)(v7 + 64);
  uint64_t v15 = *(unsigned __int8 *)(v9 + 80);
  uint64_t v16 = ((v14 + v15 + (v13 & ~v12)) & ~v15) + *(void *)(v9 + 64);
  if (a3 <= v11)
  {
    uint64_t v18 = 0;
    uint64_t v17 = a1;
  }
  else
  {
    uint64_t v17 = a1;
    if (v16 <= 3)
    {
      uint64_t v22 = ((a3 - v11 + ~(-1 << (8 * v16))) >> (8 * v16)) + 1;
      if (HIWORD(v22))
      {
        uint64_t v18 = 4;
      }
      else if (v22 >= 0x100)
      {
        uint64_t v18 = 2;
      }
      else
      {
        uint64_t v18 = v22 > 1;
      }
    }
    else
    {
      uint64_t v18 = 1;
    }
  }
  if (v11 < a2)
  {
    uint64_t v19 = ~v11 + a2;
    if (v16 < 4)
    {
      uint64_t v20 = (v19 >> (8 * v16)) + 1;
      if (v16)
      {
        uint64_t v23 = v19 & ~(-1 << (8 * v16));
        bzero(v17, v16);
        if (v16 == 3)
        {
          *(_WORD *)uint64_t v17 = v23;
          void v17[2] = BYTE2(v23);
        }
        else if (v16 == 2)
        {
          *(_WORD *)uint64_t v17 = v23;
        }
        else
        {
          uint64_t *v17 = v23;
        }
      }
    }
    else
    {
      bzero(v17, v16);
      *(_DWORD *)uint64_t v17 = v19;
      uint64_t v20 = 1;
    }
    switch(v18)
    {
      case 1:
        v17[v16] = v20;
        return;
      case 2:
        *(_WORD *)&v17[v16] = v20;
        return;
      case 3:
        goto LABEL_47;
      case 4:
        *(_DWORD *)&v17[v16] = v20;
        return;
      default:
        return;
    }
  }
  uint64_t v21 = ~v12;
  switch(v18)
  {
    case 1:
      v17[v16] = 0;
      if (!a2) {
        return;
      }
      goto LABEL_27;
    case 2:
      *(_WORD *)&v17[v16] = 0;
      if (!a2) {
        return;
      }
      goto LABEL_27;
    case 3:
LABEL_47:
      __break(1u);
      JUMPOUT(0x209FA6A3CLL);
    case 4:
      *(_DWORD *)&v17[v16] = 0;
      goto LABEL_26;
    default:
LABEL_26:
      if (!a2) {
        return;
      }
LABEL_27:
      if (v6 == v11)
      {
        uint64_t v24 = *(void (**)(unsigned char *))(v29 + 56);
        uint64_t v25 = v17;
LABEL_31:
        v24(v25);
        return;
      }
      uint64_t v25 = (unsigned char *)((unint64_t)&v17[v13] & v21);
      if (v28 == v11)
      {
        uint64_t v24 = *(void (**)(unsigned char *))(v30 + 56);
        goto LABEL_31;
      }
      uint64_t v26 = (unint64_t)&v25[v14 + v15] & ~v15;
      size_t v27 = *(void (**)(unint64_t))(v10 + 56);
      v27(v26);
      return;
  }
}

uint64_t type metadata completion function for _MatchResult()
{
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  uint64_t result = swift_getAssociatedTypeWitness();
  if (v1 <= 0x3F)
  {
    uint64_t result = swift_getAssociatedTypeWitness();
    if (v2 <= 0x3F)
    {
      swift_initStructMetadata();
      return 0;
    }
  }
  return result;
}

uint64_t *initializeBufferWithCopyOfBuffer for _MatchResult(uint64_t *a1, uint64_t *a2)
{
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v5 = *(void *)(AssociatedTypeWitness - 8);
  uint64_t v6 = *(void *)(v5 + 64);
  uint64_t v7 = swift_getAssociatedTypeWitness();
  uint64_t v8 = *(void *)(v7 - 8);
  uint64_t v9 = *(_DWORD *)(v8 + 80);
  uint64_t v10 = v6 + v9;
  uint64_t v11 = (*(unsigned char *)(v5 + 80) | *(unsigned char *)(v8 + 80));
  if (v11 > 7
    || ((*(_DWORD *)(v5 + 80) | *(_DWORD *)(v8 + 80)) & 0x100000) != 0
    || (v10 & (unint64_t)~v9) + *(void *)(*(void *)(v7 - 8) + 64) > 0x18)
  {
    uint64_t v14 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v14 + ((v11 + 16) & ~v11));
    swift_retain();
  }
  else
  {
    uint64_t v15 = v7;
    uint64_t v16 = ~v9;
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(v5 + 16))(a1, a2, AssociatedTypeWitness);
    (*(void (**)(unint64_t, unint64_t, uint64_t))(v8 + 16))(((unint64_t)a1 + v10) & v16, ((unint64_t)a2 + v10) & v16, v15);
  }
  return a1;
}

uint64_t destroy for _MatchResult(uint64_t a1)
{
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v3 = *(void *)(AssociatedTypeWitness - 8) + 8;
  (*(void (**)(uint64_t, uint64_t))v3)(a1, AssociatedTypeWitness);
  uint64_t v4 = *(void *)(v3 + 56);
  uint64_t v5 = swift_getAssociatedTypeWitness();
  uint64_t v6 = *(void *)(v5 - 8);
  uint64_t v7 = *(uint64_t (**)(unint64_t, uint64_t))(v6 + 8);
  uint64_t v8 = v5;
  unint64_t v9 = (v4 + a1 + *(unsigned __int8 *)(v6 + 80)) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80);

  return v7(v9, v8);
}

uint64_t initializeWithCopy for _MatchResult(uint64_t a1, uint64_t a2)
{
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v5 = *(void *)(AssociatedTypeWitness - 8) + 16;
  (*(void (**)(uint64_t, uint64_t, uint64_t))v5)(a1, a2, AssociatedTypeWitness);
  uint64_t v6 = *(void *)(v5 + 48);
  uint64_t v7 = swift_getAssociatedTypeWitness();
  uint64_t v8 = *(void *)(v7 - 8);
  (*(void (**)(unint64_t, unint64_t, uint64_t))(v8 + 16))((v6 + *(unsigned __int8 *)(v8 + 80) + a1) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80), (v6 + *(unsigned __int8 *)(v8 + 80) + a2) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80), v7);
  return a1;
}

uint64_t assignWithCopy for _MatchResult(uint64_t a1, uint64_t a2)
{
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v5 = *(void *)(AssociatedTypeWitness - 8) + 24;
  (*(void (**)(uint64_t, uint64_t, uint64_t))v5)(a1, a2, AssociatedTypeWitness);
  uint64_t v6 = *(void *)(v5 + 40);
  uint64_t v7 = swift_getAssociatedTypeWitness();
  uint64_t v8 = *(void *)(v7 - 8);
  (*(void (**)(unint64_t, unint64_t, uint64_t))(v8 + 24))((v6 + *(unsigned __int8 *)(v8 + 80) + a1) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80), (v6 + *(unsigned __int8 *)(v8 + 80) + a2) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80), v7);
  return a1;
}

uint64_t initializeWithTake for _MatchResult(uint64_t a1, uint64_t a2)
{
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v5 = *(void *)(AssociatedTypeWitness - 8) + 32;
  (*(void (**)(uint64_t, uint64_t, uint64_t))v5)(a1, a2, AssociatedTypeWitness);
  uint64_t v6 = *(void *)(v5 + 32);
  uint64_t v7 = swift_getAssociatedTypeWitness();
  uint64_t v8 = *(void *)(v7 - 8);
  (*(void (**)(unint64_t, unint64_t, uint64_t))(v8 + 32))((v6 + *(unsigned __int8 *)(v8 + 80) + a1) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80), (v6 + *(unsigned __int8 *)(v8 + 80) + a2) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80), v7);
  return a1;
}

uint64_t assignWithTake for _MatchResult(uint64_t a1, uint64_t a2)
{
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v5 = *(void *)(AssociatedTypeWitness - 8) + 40;
  (*(void (**)(uint64_t, uint64_t, uint64_t))v5)(a1, a2, AssociatedTypeWitness);
  uint64_t v6 = *(void *)(v5 + 24);
  uint64_t v7 = swift_getAssociatedTypeWitness();
  uint64_t v8 = *(void *)(v7 - 8);
  (*(void (**)(unint64_t, unint64_t, uint64_t))(v8 + 40))((v6 + *(unsigned __int8 *)(v8 + 80) + a1) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80), (v6 + *(unsigned __int8 *)(v8 + 80) + a2) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80), v7);
  return a1;
}

uint64_t getEnumTagSinglePayload for _MatchResult(unsigned __int16 *a1, unsigned int a2)
{
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v5 = *(void *)(AssociatedTypeWitness - 8);
  uint64_t v6 = *(unsigned int *)(v5 + 84);
  uint64_t v7 = swift_getAssociatedTypeWitness();
  uint64_t v8 = *(void *)(v7 - 8);
  unsigned int v9 = *(_DWORD *)(v8 + 84);
  if (v9 <= v6) {
    unsigned int v10 = v6;
  }
  else {
    unsigned int v10 = *(_DWORD *)(v8 + 84);
  }
  uint64_t v11 = *(unsigned __int8 *)(v8 + 80);
  if (!a2) {
    return 0;
  }
  uint64_t v12 = *(void *)(v5 + 64) + v11;
  if (a2 <= v10) {
    goto LABEL_24;
  }
  uint64_t v13 = (v12 & ~v11) + *(void *)(*(void *)(v7 - 8) + 64);
  char v14 = 8 * v13;
  if (v13 <= 3)
  {
    unsigned int v16 = ((a2 - v10 + ~(-1 << v14)) >> v14) + 1;
    if (HIWORD(v16))
    {
      int v15 = *(_DWORD *)((char *)a1 + v13);
      if (!v15) {
        goto LABEL_24;
      }
      goto LABEL_14;
    }
    if (v16 > 0xFF)
    {
      int v15 = *(unsigned __int16 *)((char *)a1 + v13);
      if (!*(unsigned __int16 *)((char *)a1 + v13)) {
        goto LABEL_24;
      }
      goto LABEL_14;
    }
    if (v16 < 2)
    {
LABEL_24:
      if (v10)
      {
        if (v6 >= v9)
        {
          uint64_t v22 = *(uint64_t (**)(unsigned __int16 *, uint64_t, uint64_t))(v5 + 48);
          return v22(a1, v6, AssociatedTypeWitness);
        }
        else
        {
          uint64_t v20 = *(uint64_t (**)(unint64_t))(v8 + 48);
          return v20(((unint64_t)a1 + v12) & ~v11);
        }
      }
      return 0;
    }
  }
  int v15 = *((unsigned __int8 *)a1 + v13);
  if (!*((unsigned char *)a1 + v13)) {
    goto LABEL_24;
  }
LABEL_14:
  int v17 = (v15 - 1) << v14;
  if (v13 > 3) {
    int v17 = 0;
  }
  if (v13)
  {
    if (v13 <= 3) {
      int v18 = v13;
    }
    else {
      int v18 = 4;
    }
    switch(v18)
    {
      case 2:
        int v19 = *a1;
        break;
      case 3:
        int v19 = *a1 | (*((unsigned __int8 *)a1 + 2) << 16);
        break;
      case 4:
        int v19 = *(_DWORD *)a1;
        break;
      default:
        int v19 = *(unsigned __int8 *)a1;
        break;
    }
  }
  else
  {
    int v19 = 0;
  }
  return v10 + (v19 | v17) + 1;
}

void storeEnumTagSinglePayload for _MatchResult(unsigned char *a1, uint64_t a2, unsigned int a3)
{
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v7 = *(void *)(AssociatedTypeWitness - 8);
  uint64_t v8 = *(unsigned int *)(v7 + 84);
  uint64_t v9 = *(void *)(swift_getAssociatedTypeWitness() - 8);
  uint64_t v10 = v9;
  unsigned int v11 = *(_DWORD *)(v9 + 84);
  if (v11 <= v8) {
    unsigned int v12 = v8;
  }
  else {
    unsigned int v12 = *(_DWORD *)(v9 + 84);
  }
  uint64_t v13 = *(unsigned __int8 *)(v9 + 80);
  uint64_t v14 = *(void *)(v7 + 64) + v13;
  size_t v15 = (v14 & ~v13) + *(void *)(v9 + 64);
  if (a3 <= v12)
  {
    int v16 = 0;
  }
  else if (v15 <= 3)
  {
    unsigned int v19 = ((a3 - v12 + ~(-1 << (8 * v15))) >> (8 * v15)) + 1;
    if (HIWORD(v19))
    {
      int v16 = 4;
    }
    else if (v19 >= 0x100)
    {
      int v16 = 2;
    }
    else
    {
      int v16 = v19 > 1;
    }
  }
  else
  {
    int v16 = 1;
  }
  if (v12 < a2)
  {
    unsigned int v17 = ~v12 + a2;
    if (v15 < 4)
    {
      int v18 = (v17 >> (8 * v15)) + 1;
      if (v15)
      {
        int v20 = v17 & ~(-1 << (8 * v15));
        bzero(a1, v15);
        if (v15 == 3)
        {
          *(_WORD *)a1 = v20;
          a1[2] = BYTE2(v20);
        }
        else if (v15 == 2)
        {
          *(_WORD *)a1 = v20;
        }
        else
        {
          *a1 = v20;
        }
      }
    }
    else
    {
      bzero(a1, v15);
      *(_DWORD *)a1 = v17;
      int v18 = 1;
    }
    switch(v16)
    {
      case 1:
        a1[v15] = v18;
        return;
      case 2:
        *(_WORD *)&a1[v15] = v18;
        return;
      case 3:
        goto LABEL_41;
      case 4:
        *(_DWORD *)&a1[v15] = v18;
        return;
      default:
        return;
    }
  }
  switch(v16)
  {
    case 1:
      a1[v15] = 0;
      if (!a2) {
        return;
      }
      goto LABEL_24;
    case 2:
      *(_WORD *)&a1[v15] = 0;
      if (!a2) {
        return;
      }
      goto LABEL_24;
    case 3:
LABEL_41:
      __break(1u);
      JUMPOUT(0x209F9F508);
    case 4:
      *(_DWORD *)&a1[v15] = 0;
      goto LABEL_23;
    default:
LABEL_23:
      if (a2)
      {
LABEL_24:
        if (v8 >= v11)
        {
          uint64_t v22 = *(void (**)(unsigned char *, uint64_t, uint64_t, uint64_t))(v7 + 56);
          v22(a1, a2, v8, AssociatedTypeWitness);
        }
        else
        {
          uint64_t v21 = *(void (**)(unint64_t, uint64_t))(v10 + 56);
          v21((unint64_t)&a1[v14] & ~v13, a2);
        }
      }
      return;
  }
}

uint64_t type metadata completion function for MatchesCollection()
{
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  if (v1 <= 0x3F)
  {
    uint64_t AssociatedTypeWitness = swift_checkMetadataState();
    if (v2 <= 0x3F)
    {
      uint64_t AssociatedTypeWitness = type metadata accessor for MatchesCollection.Index();
      if (v3 <= 0x3F)
      {
        swift_initStructMetadata();
        return 0;
      }
    }
  }
  return AssociatedTypeWitness;
}

uint64_t *initializeBufferWithCopyOfBuffer for MatchesCollection(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v3 = *(void *)(a3 + 16);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v65 = *(void *)(AssociatedTypeWitness - 8);
  uint64_t v5 = *(void *)(v65 + 64);
  uint64_t v57 = *(void *)(v3 - 8);
  int v63 = *(_DWORD *)(v57 + 80);
  uint64_t v53 = v63;
  uint64_t v55 = v5 + v63;
  uint64_t v61 = (v5 + v53) & ~v53;
  uint64_t v68 = *(void *)(v57 + 64);
  swift_getAssociatedConformanceWitness();
  uint64_t v56 = AssociatedTypeWitness;
  uint64_t v52 = swift_getAssociatedTypeWitness();
  uint64_t v6 = *(void *)(v52 - 8);
  int v59 = *(_DWORD *)(v6 + 80);
  uint64_t v51 = swift_getAssociatedTypeWitness();
  uint64_t v7 = *(void *)(v51 - 8);
  int v8 = *(_DWORD *)(v7 + 80);
  uint64_t v9 = v8;
  uint64_t v58 = v3;
  uint64_t v10 = swift_getAssociatedTypeWitness();
  uint64_t v11 = *(void *)(v10 - 8);
  unint64_t v12 = *(_DWORD *)(v11 + 80);
  unint64_t v13 = v8 | v12 | v59;
  uint64_t v14 = (v13 + v68 + v61) & ~v13;
  uint64_t v62 = v6;
  int v15 = *(_DWORD *)(v6 + 84);
  uint64_t v50 = v7;
  int v16 = *(_DWORD *)(v7 + 84);
  uint64_t v17 = *(void *)(v6 + 64);
  uint64_t v18 = v17 + v59;
  uint64_t v49 = v59;
  uint64_t v19 = ((v17 + v49) & ~v49) + v17;
  uint64_t v20 = (v19 + v9) & ~v9;
  if (v16 | v15) {
    uint64_t v21 = v20 + *(void *)(v7 + 64);
  }
  else {
    uint64_t v21 = v20 + *(void *)(v7 + 64) + 1;
  }
  unint64_t v22 = v13 | (*(unsigned char *)(v65 + 80) | v63);
  if (v22 <= 7
    && ((*(_DWORD *)(v65 + 80) | v63 | v8 | v59 | *(_DWORD *)(v11 + 80)) & 0x100000) == 0
    && *(void *)(*(void *)(v10 - 8) + 64) + v14 + ((v21 + v12) & ~v12) <= 0x18)
  {
    uint64_t v27 = v8;
    unsigned int v44 = *(_DWORD *)(v6 + 84);
    unsigned int v45 = *(_DWORD *)(v7 + 84);
    uint64_t v42 = v18;
    uint64_t v43 = v20 + *(void *)(v7 + 64);
    uint64_t v47 = v19;
    uint64_t v60 = *(void *)(v10 - 8);
    uint64_t v64 = v10;
    uint64_t v28 = ~v53;
    int v29 = v16 | v15;
    uint64_t v30 = ~v13;
    uint64_t v46 = ~v9;
    uint64_t v54 = *(_DWORD *)(v11 + 80);
    uint64_t v48 = ~v12;
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(v65 + 16))(a1, a2, v56);
    unint64_t v31 = ((unint64_t)a1 + v55) & v28;
    unint64_t v32 = ((unint64_t)a2 + v55) & v28;
    (*(void (**)(unint64_t, unint64_t, uint64_t))(v57 + 16))(v31, v32, v58);
    int v33 = (void *)((v31 + v68 + v13) & v30);
    unsigned int v34 = (unsigned __int8 *)((v32 + v68 + v13) & v30);
    uint64_t v26 = a1;
    if (v29)
    {
      if (v44 >= v45) {
        int v35 = (*(uint64_t (**)(unsigned __int8 *))(v62 + 48))(v34);
      }
      else {
        int v35 = (*(uint64_t (**)(unint64_t))(v50 + 48))((unint64_t)&v34[v27 + v47] & v46);
      }
      size_t v36 = v21;
      if (v35)
      {
LABEL_27:
        memcpy(v33, v34, v36);
LABEL_35:
        (*(void (**)(unint64_t, unint64_t, uint64_t))(v60 + 16))(((unint64_t)v33 + v54 + v36) & v48, (unint64_t)&v34[v54 + v36] & v48, v64);
        return v26;
      }
    }
    else if (v34[v43])
    {
      size_t v36 = v21;
      int v37 = (v34[v43] - 1) << (8 * v43);
      if (v43 > 3) {
        int v37 = 0;
      }
      if (v43)
      {
        int v38 = v43 <= 3 ? v43 : 4;
        switch(v38)
        {
          case 2:
            int v39 = *(unsigned __int16 *)v34;
            break;
          case 3:
            int v39 = *(unsigned __int16 *)v34 | (v34[2] << 16);
            break;
          case 4:
            int v39 = *(_DWORD *)v34;
            break;
          default:
            int v39 = *v34;
            break;
        }
      }
      else
      {
        int v39 = 0;
      }
      if ((v39 | v37) != 0xFFFFFFFF) {
        goto LABEL_27;
      }
    }
    unsigned int v40 = *(void (**)(void *, unsigned __int8 *, uint64_t))(v62 + 16);
    v40(v33, v34, v52);
    size_t v36 = v21;
    v40((void *)(((unint64_t)v33 + v42) & ~v49), (unsigned __int8 *)((unint64_t)&v34[v42] & ~v49), v52);
    (*(void (**)(unint64_t, unint64_t, uint64_t))(v50 + 16))(((unint64_t)v33 + v27 + v47) & v46, (unint64_t)&v34[v27 + v47] & v46, v51);
    if (!v29) {
      *((unsigned char *)v33 + v43) = 0;
    }
    goto LABEL_35;
  }
  uint64_t v25 = *a2;
  *a1 = *a2;
  uint64_t v26 = (uint64_t *)(v25 + ((v22 + 16) & ~v22));
  swift_retain();
  return v26;
}

uint64_t destroy for MatchesCollection(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 16);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v5 = *(void *)(AssociatedTypeWitness - 8) + 8;
  (*(void (**)(uint64_t, uint64_t))v5)(a1, AssociatedTypeWitness);
  uint64_t v6 = *(void *)(v5 + 56);
  uint64_t v7 = *(void *)(v3 - 8);
  uint64_t v8 = v7 + 8;
  unint64_t v39 = (v6 + a1 + *(unsigned __int8 *)(v7 + 80)) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80);
  (*(void (**)(void))(v7 + 8))();
  uint64_t v37 = *(void *)(v8 + 56);
  swift_getAssociatedConformanceWitness();
  uint64_t v36 = swift_getAssociatedTypeWitness();
  uint64_t v9 = *(void *)(v36 - 8);
  uint64_t v10 = *(unsigned __int8 *)(v9 + 80);
  uint64_t v35 = swift_getAssociatedTypeWitness();
  uint64_t v11 = *(void *)(v35 - 8);
  uint64_t v12 = *(unsigned __int8 *)(v11 + 80);
  uint64_t v13 = v9;
  uint64_t v14 = swift_getAssociatedTypeWitness();
  uint64_t v15 = *(unsigned __int8 *)(*(void *)(v14 - 8) + 80);
  int v16 = (unsigned __int16 *)((v39 + v37 + (v12 | v15 | v10)) & ~(v12 | v15 | v10));
  uint64_t v17 = *(unsigned int *)(v9 + 84);
  uint64_t v40 = v11;
  uint64_t v41 = *(void *)(v14 - 8);
  unsigned int v18 = *(_DWORD *)(v11 + 84);
  uint64_t v19 = v10;
  uint64_t v20 = *(void *)(v9 + 64);
  uint64_t v21 = v20 + v10;
  uint64_t v22 = *(void *)(v11 + 64);
  uint64_t v23 = ((v20 + v10) & ~v10) + v20 + v12;
  uint64_t v24 = (v23 & ~v12) + v22;
  int v25 = v18 | v17;
  uint64_t v42 = v14;
  if (v18 | v17)
  {
    if (v17 >= v18)
    {
      if ((*(unsigned int (**)(unsigned __int16 *, uint64_t, uint64_t))(v13 + 48))(v16, v17, v36)) {
        goto LABEL_16;
      }
    }
    else if ((*(unsigned int (**)(unint64_t))(v40 + 48))(((unint64_t)v16 + v23) & ~v12))
    {
      goto LABEL_16;
    }
    goto LABEL_15;
  }
  if (!*((unsigned char *)v16 + v24)) {
    goto LABEL_15;
  }
  int v26 = (*((unsigned __int8 *)v16 + v24) - 1) << (8 * v24);
  if (v24 > 3) {
    int v26 = 0;
  }
  if (v24)
  {
    int v27 = v24 <= 3 ? (v23 & ~v12) + v22 : 4;
    switch(v27)
    {
      case 2:
        int v28 = *v16;
        break;
      case 3:
        int v28 = *v16 | (*((unsigned __int8 *)v16 + 2) << 16);
        break;
      case 4:
        int v28 = *(_DWORD *)v16;
        break;
      default:
        int v28 = *(unsigned __int8 *)v16;
        break;
    }
  }
  else
  {
    int v28 = 0;
  }
  if ((v28 | v26) == 0xFFFFFFFF)
  {
LABEL_15:
    int v38 = v25;
    uint64_t v29 = ~v12;
    uint64_t v30 = *(void (**)(unsigned __int16 *, uint64_t))(v13 + 8);
    v30(v16, v36);
    v30((unsigned __int16 *)(((unint64_t)v16 + v21) & ~v19), v36);
    unint64_t v31 = ((unint64_t)v16 + v23) & v29;
    int v25 = v38;
    (*(void (**)(unint64_t, uint64_t))(v40 + 8))(v31, v35);
  }
LABEL_16:
  if (v25) {
    uint64_t v32 = v15;
  }
  else {
    uint64_t v32 = v15 + 1;
  }
  int v33 = *(uint64_t (**)(unint64_t, uint64_t))(v41 + 8);

  return v33(((unint64_t)v16 + v32 + v24) & ~v15, v42);
}

uint64_t initializeWithCopy for MatchesCollection(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(a3 + 16);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v7 = *(void *)(AssociatedTypeWitness - 8) + 16;
  (*(void (**)(uint64_t, uint64_t, uint64_t))v7)(a1, a2, AssociatedTypeWitness);
  uint64_t v8 = *(void *)(v7 + 48);
  uint64_t v9 = *(void *)(v5 - 8);
  uint64_t v10 = v9 + 16;
  uint64_t v11 = *(unsigned __int8 *)(v9 + 80);
  uint64_t v12 = v8 + v11;
  uint64_t v52 = a1;
  uint64_t v47 = (v12 + a1) & ~v11;
  uint64_t v49 = (v12 + a2) & ~v11;
  (*(void (**)(void))(v9 + 16))();
  uint64_t v45 = *(void *)(v10 + 48);
  swift_getAssociatedConformanceWitness();
  uint64_t v44 = swift_getAssociatedTypeWitness();
  uint64_t v13 = *(void *)(v44 - 8);
  uint64_t v14 = v13;
  uint64_t v15 = *(unsigned __int8 *)(v13 + 80);
  uint64_t v43 = swift_getAssociatedTypeWitness();
  uint64_t v16 = *(void *)(v43 - 8);
  uint64_t v17 = v16;
  uint64_t v18 = *(unsigned __int8 *)(v16 + 80);
  uint64_t v19 = swift_getAssociatedTypeWitness();
  uint64_t v20 = v13;
  uint64_t v21 = *(unsigned __int8 *)(*(void *)(v19 - 8) + 80);
  uint64_t v22 = v18 | v21 | v15;
  uint64_t v23 = (void *)((v22 + v45 + v47) & ~v22);
  uint64_t v24 = (unsigned __int8 *)((v22 + v45 + v49) & ~v22);
  uint64_t v48 = v14;
  uint64_t v25 = *(unsigned int *)(v14 + 84);
  unsigned int v26 = *(_DWORD *)(v16 + 84);
  uint64_t v27 = *(void *)(v20 + 64);
  uint64_t v28 = v15;
  uint64_t v29 = ((v27 + v15) & ~v15) + v27 + v18;
  size_t v30 = (v29 & ~v18) + *(void *)(v16 + 64);
  int v31 = v26 | v25;
  uint64_t v50 = *(void *)(v19 - 8);
  uint64_t v51 = v19;
  uint64_t v46 = v29;
  uint64_t v42 = v27 + v15;
  if (v26 | v25)
  {
    if (v25 >= v26) {
      int v32 = (*(uint64_t (**)(unsigned __int8 *, uint64_t, uint64_t))(v48 + 48))(v24, v25, v44);
    }
    else {
      int v32 = (*(uint64_t (**)(unint64_t))(v17 + 48))((unint64_t)&v24[v29] & ~v18);
    }
    int v33 = v23;
    if (v32)
    {
LABEL_15:
      if (v31) {
        size_t v37 = v30;
      }
      else {
        size_t v37 = v30 + 1;
      }
      memcpy(v33, v24, v37);
      goto LABEL_26;
    }
  }
  else
  {
    int v33 = v23;
    if (v24[v30])
    {
      int v34 = (v24[v30] - 1) << (8 * v30);
      if (v30 > 3) {
        int v34 = 0;
      }
      if (v30)
      {
        int v35 = v30 <= 3 ? v30 : 4;
        switch(v35)
        {
          case 2:
            int v36 = *(unsigned __int16 *)v24;
            break;
          case 3:
            int v36 = *(unsigned __int16 *)v24 | (v24[2] << 16);
            break;
          case 4:
            int v36 = *(_DWORD *)v24;
            break;
          default:
            int v36 = *v24;
            break;
        }
      }
      else
      {
        int v36 = 0;
      }
      if ((v36 | v34) != 0xFFFFFFFF) {
        goto LABEL_15;
      }
    }
  }
  uint64_t v38 = ~v18;
  unint64_t v39 = *(void (**)(void *, unsigned __int8 *, uint64_t))(v48 + 16);
  v39(v33, v24, v44);
  v39((void *)(((unint64_t)v33 + v42) & ~v28), (unsigned __int8 *)((unint64_t)&v24[v42] & ~v28), v44);
  (*(void (**)(unint64_t, unint64_t, uint64_t))(v17 + 16))(((unint64_t)v33 + v46) & v38, (unint64_t)&v24[v46] & v38, v43);
  if (!v31) {
    *((unsigned char *)v33 + v30) = 0;
  }
LABEL_26:
  if (v31) {
    size_t v40 = v30;
  }
  else {
    size_t v40 = v30 + 1;
  }
  (*(void (**)(unint64_t, unint64_t, uint64_t))(v50 + 16))(((unint64_t)v33 + v21 + v40) & ~v21, (unint64_t)&v24[v21 + v40] & ~v21, v51);
  return v52;
}