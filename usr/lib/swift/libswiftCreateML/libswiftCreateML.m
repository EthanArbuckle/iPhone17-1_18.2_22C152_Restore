uint64_t initializeBufferWithCopyOfBuffer for CGRect(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;

  v2 = *a2;
  *a1 = *a2;
  v3 = v2 + 16;
  swift_retain(v2);
  return v3;
}

_OWORD *__swift_memcpy32_8(_OWORD *a1, long long *a2)
{
  result = a1;
  long long v3 = *a2;
  a1[1] = a2[1];
  *a1 = v3;
  return result;
}

uint64_t getEnumTagSinglePayload for CGRect(uint64_t a1, int a2)
{
  uint64_t result = 0;
  if (a2)
  {
    if (*(unsigned char *)(a1 + 32)) {
      return (*(_DWORD *)a1 + 1);
    }
  }
  return result;
}

void storeEnumTagSinglePayload for CGRect(uint64_t a1, int a2, int a3)
{
  if (!a2)
  {
    if (!a3) {
      return;
    }
    char v3 = 0;
    goto LABEL_6;
  }
  *(void *)(a1 + 24) = 0;
  *(_OWORD *)(a1 + 8) = 0;
  *(void *)a1 = (a2 - 1);
  char v3 = 1;
  if (a3) {
LABEL_6:
  }
    *(unsigned char *)(a1 + 32) = v3;
}

uint64_t type metadata accessor for CGRect(uint64_t a1)
{
  return type metadata accessor for CGRect(a1, &lazy cache variable for type metadata for CGRect, (uint64_t)&unk_396950);
}

uint64_t *initializeBufferWithCopyOfBuffer for MLImageClassifier.Classifier(uint64_t *a1, uint64_t *a2)
{
  v2 = a1;
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Either<LogisticRegressionClassifier<Float, String>, FullyConnectedNetworkClassifier<Float, String>>);
  int v4 = *(_DWORD *)(*(void *)(v3 - 8) + 80);
  if ((v4 & 0x20000) != 0)
  {
    uint64_t v8 = *a2;
    uint64_t *v2 = *a2;
    v2 = (uint64_t *)(v8 + ((v4 + 16) & ~v4));
    swift_retain(v8);
  }
  else
  {
    if (swift_getEnumCaseMultiPayload(a2, v3) == 1)
    {
      uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for FullyConnectedNetworkClassifier<Float, String>);
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(void *)(v5 - 8) + 16))(a1, a2, v5);
      uint64_t v6 = 1;
      uint64_t v7 = v3;
    }
    else
    {
      uint64_t v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for LogisticRegressionClassifier<Float, String>);
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(void *)(v9 - 8) + 16))(a1, a2, v9);
      uint64_t v7 = v3;
      uint64_t v6 = 0;
    }
    swift_storeEnumTagMultiPayload(a1, v7, v6);
  }
  return v2;
}

uint64_t destroy for MLImageClassifier.Classifier(uint64_t a1)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Either<LogisticRegressionClassifier<Float, String>, FullyConnectedNetworkClassifier<Float, String>>);
  int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload(a1, v2);
  int v4 = &demangling cache variable for type metadata for LogisticRegressionClassifier<Float, String>;
  if (EnumCaseMultiPayload == 1) {
    int v4 = &demangling cache variable for type metadata for FullyConnectedNetworkClassifier<Float, String>;
  }
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(v4);
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v5 - 8) + 8))(a1, v5);
}

uint64_t initializeWithCopy for MLImageClassifier.Classifier(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Either<LogisticRegressionClassifier<Float, String>, FullyConnectedNetworkClassifier<Float, String>>);
  int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload(a2, v3);
  BOOL v5 = EnumCaseMultiPayload == 1;
  uint64_t v6 = &demangling cache variable for type metadata for LogisticRegressionClassifier<Float, String>;
  if (EnumCaseMultiPayload == 1) {
    uint64_t v6 = &demangling cache variable for type metadata for FullyConnectedNetworkClassifier<Float, String>;
  }
  uint64_t v7 = __swift_instantiateConcreteTypeFromMangledName(v6);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 16))(a1, a2, v7);
  swift_storeEnumTagMultiPayload(a1, v3, v5);
  return a1;
}

uint64_t assignWithCopy for MLImageClassifier.Classifier(uint64_t a1, uint64_t a2)
{
  if (a1 != a2)
  {
    outlined destroy of Either<LogisticRegressionClassifier<Float, String>, FullyConnectedNetworkClassifier<Float, String>>(a1, &demangling cache variable for type metadata for Either<LogisticRegressionClassifier<Float, String>, FullyConnectedNetworkClassifier<Float, String>>);
    uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Either<LogisticRegressionClassifier<Float, String>, FullyConnectedNetworkClassifier<Float, String>>);
    int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload(a2, v3);
    BOOL v5 = EnumCaseMultiPayload == 1;
    uint64_t v6 = &demangling cache variable for type metadata for LogisticRegressionClassifier<Float, String>;
    if (EnumCaseMultiPayload == 1) {
      uint64_t v6 = &demangling cache variable for type metadata for FullyConnectedNetworkClassifier<Float, String>;
    }
    uint64_t v7 = __swift_instantiateConcreteTypeFromMangledName(v6);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 16))(a1, a2, v7);
    swift_storeEnumTagMultiPayload(a1, v3, v5);
  }
  return a1;
}

uint64_t initializeWithTake for MLImageClassifier.Classifier(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Either<LogisticRegressionClassifier<Float, String>, FullyConnectedNetworkClassifier<Float, String>>);
  int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload(a2, v3);
  BOOL v5 = EnumCaseMultiPayload == 1;
  uint64_t v6 = &demangling cache variable for type metadata for LogisticRegressionClassifier<Float, String>;
  if (EnumCaseMultiPayload == 1) {
    uint64_t v6 = &demangling cache variable for type metadata for FullyConnectedNetworkClassifier<Float, String>;
  }
  uint64_t v7 = __swift_instantiateConcreteTypeFromMangledName(v6);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 32))(a1, a2, v7);
  swift_storeEnumTagMultiPayload(a1, v3, v5);
  return a1;
}

uint64_t assignWithTake for MLImageClassifier.Classifier(uint64_t a1, uint64_t a2)
{
  if (a1 != a2)
  {
    outlined destroy of Either<LogisticRegressionClassifier<Float, String>, FullyConnectedNetworkClassifier<Float, String>>(a1, &demangling cache variable for type metadata for Either<LogisticRegressionClassifier<Float, String>, FullyConnectedNetworkClassifier<Float, String>>);
    uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Either<LogisticRegressionClassifier<Float, String>, FullyConnectedNetworkClassifier<Float, String>>);
    int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload(a2, v3);
    BOOL v5 = EnumCaseMultiPayload == 1;
    uint64_t v6 = &demangling cache variable for type metadata for LogisticRegressionClassifier<Float, String>;
    if (EnumCaseMultiPayload == 1) {
      uint64_t v6 = &demangling cache variable for type metadata for FullyConnectedNetworkClassifier<Float, String>;
    }
    uint64_t v7 = __swift_instantiateConcreteTypeFromMangledName(v6);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 32))(a1, a2, v7);
    swift_storeEnumTagMultiPayload(a1, v3, v5);
  }
  return a1;
}

uint64_t getEnumTagSinglePayload for MLImageClassifier.Classifier(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_30ED);
}

uint64_t sub_30ED(uint64_t a1, unsigned int a2)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Either<LogisticRegressionClassifier<Float, String>, FullyConnectedNetworkClassifier<Float, String>>);
  return __swift_getEnumTagSinglePayload(a1, a2, v2);
}

uint64_t storeEnumTagSinglePayload for MLImageClassifier.Classifier(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_3136);
}

uint64_t sub_3136(uint64_t a1, unsigned int a2)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Either<LogisticRegressionClassifier<Float, String>, FullyConnectedNetworkClassifier<Float, String>>);
  return __swift_storeEnumTagSinglePayload(a1, a2, a2, v2);
}

uint64_t type metadata accessor for MLImageClassifier.Classifier(uint64_t a1)
{
  uint64_t result = type metadata singleton initialization cache for MLImageClassifier.Classifier;
  if (!type metadata singleton initialization cache for MLImageClassifier.Classifier) {
    return swift_getSingletonMetadata(a1, &nominal type descriptor for MLImageClassifier.Classifier);
  }
  return result;
}

uint64_t type metadata completion function for MLImageClassifier.Classifier(uint64_t a1)
{
  uint64_t v4 = v1;
  uint64_t result = type metadata accessor for Either<LogisticRegressionClassifier<Float, String>, FullyConnectedNetworkClassifier<Float, String>>(319);
  if (v3 <= 0x3F)
  {
    uint64_t v4 = *(void *)(result - 8) + 64;
    swift_initStructMetadata(a1, 256, 1, &v4, a1 + 16);
    return 0;
  }
  return result;
}

uint64_t type metadata accessor for Either<LogisticRegressionClassifier<Float, String>, FullyConnectedNetworkClassifier<Float, String>>(uint64_t a1)
{
  uint64_t result = lazy cache variable for type metadata for Either<LogisticRegressionClassifier<Float, String>, FullyConnectedNetworkClassifier<Float, String>>;
  if (!lazy cache variable for type metadata for Either<LogisticRegressionClassifier<Float, String>, FullyConnectedNetworkClassifier<Float, String>>)
  {
    uint64_t v2 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for LogisticRegressionClassifier<Float, String>);
    uint64_t v3 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for FullyConnectedNetworkClassifier<Float, String>);
    uint64_t result = type metadata accessor for Either(a1, v2, v3, v4);
    if (!v5) {
      lazy cache variable for type metadata for Either<LogisticRegressionClassifier<Float, String>, FullyConnectedNetworkClassifier<Float, String>> = result;
    }
  }
  return result;
}

uint64_t type metadata accessor for NSProgressUserInfoKey(uint64_t a1)
{
  return type metadata accessor for CGRect(a1, &lazy cache variable for type metadata for NSProgressUserInfoKey, (uint64_t)&unk_396978);
}

uint64_t type metadata accessor for NLLanguage(uint64_t a1)
{
  return type metadata accessor for CGRect(a1, &lazy cache variable for type metadata for NLLanguage, (uint64_t)&unk_3969A0);
}

uint64_t type metadata accessor for VNImageCropAndScaleOption(uint64_t a1)
{
  return type metadata accessor for CGRect(a1, &lazy cache variable for type metadata for VNImageCropAndScaleOption, (uint64_t)&unk_3969C8);
}

uint64_t type metadata accessor for VNImageOption(uint64_t a1)
{
  return type metadata accessor for CGRect(a1, &lazy cache variable for type metadata for VNImageOption, (uint64_t)&unk_3969E8);
}

uint64_t MLImageClassifier.Classifier.init(labels:parameters:)(uint64_t a1, void *a2)
{
  uint64_t v51 = a1;
  uint64_t v50 = v2;
  uint64_t v39 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for FullyConnectedNetworkClassifier<Float, String>);
  uint64_t v40 = *(void *)(v39 - 8);
  int64_t v3 = *(void *)(v40 + 64);
  uint64_t v4 = alloca(v3);
  uint64_t v5 = alloca(v3);
  v41 = v37;
  uint64_t v53 = type metadata accessor for FullyConnectedNetworkConfiguration(0);
  uint64_t v42 = *(void *)(v53 - 8);
  int64_t v6 = *(void *)(v42 + 64);
  uint64_t v7 = alloca(v6);
  uint64_t v8 = alloca(v6);
  v43 = v37;
  uint64_t v9 = alloca(v6);
  v10 = alloca(v6);
  v44 = v37;
  uint64_t v46 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for LogisticRegressionClassifier<Float, String>);
  uint64_t v45 = *(void *)(v46 - 8);
  int64_t v11 = *(void *)(v45 + 64);
  v12 = alloca(v11);
  v13 = alloca(v11);
  v47 = v37;
  uint64_t v14 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for LogisticRegressionClassifier<Float, String>.Configuration);
  uint64_t v48 = *(void *)(v14 - 8);
  int64_t v15 = *(void *)(v48 + 64);
  v16 = alloca(v15);
  v17 = alloca(v15);
  v49 = v37;
  v18 = alloca(v15);
  v19 = alloca(v15);
  int64_t v20 = *(void *)(*(void *)(type metadata accessor for MLImageClassifier.ModelParameters.ModelAlgorithmType(0) - 8)
                  + 64);
  v21 = alloca(v20);
  v22 = alloca(v20);
  MLImageClassifier.ModelParameters.algorithm.getter(0);
  uint64_t v23 = *(int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (featureExtractor: MLImageClassifier.FeatureExtractorType, classifier: MLImageClassifier.ModelParameters.ClassifierType))
               + 48);
  v38 = v37;
  uint64_t v24 = *(void *)&v37[v23];
  v52 = a2;
  if (v24)
  {
    swift_bridgeObjectRetain(v24);
    v25 = v44;
    FullyConnectedNetworkConfiguration.init()();
    FullyConnectedNetworkConfiguration.maximumIterations.setter(*a2);
    FullyConnectedNetworkConfiguration.hiddenUnitCounts.setter(v24);
    FullyConnectedNetworkConfiguration.batchSize.setter(32);
    v26 = v43;
    uint64_t v27 = v42;
    (*(void (**)(unsigned char *, unsigned char *, uint64_t))(v42 + 16))(v43, v25, v53);
    uint64_t v28 = lazy protocol witness table accessor for type Float and conformance Float();
    v29 = v41;
    FullyConnectedNetworkClassifier.init(labels:configuration:)(v51, v26, &type metadata for Float, &type metadata for String, &protocol witness table for Float, v28, &protocol witness table for String, &protocol witness table for String, &protocol witness table for String, &protocol witness table for String);
    swift_bridgeObjectRelease(v24);
    outlined destroy of MLImageClassifier.ModelParameters((uint64_t)v52);
    (*(void (**)(unsigned char *, uint64_t))(v27 + 8))(v25, v53);
    uint64_t v30 = v50;
    (*(void (**)(uint64_t, unsigned char *, uint64_t))(v40 + 32))(v50, v29, v39);
    unsigned int v31 = 1;
  }
  else
  {
    uint64_t v53 = lazy protocol witness table accessor for type Float and conformance Float();
    LogisticRegressionClassifier.Configuration.init()(&type metadata for Float, &type metadata for String, &protocol witness table for Float, v53, &protocol witness table for String, &protocol witness table for String, &protocol witness table for String, &protocol witness table for String);
    LogisticRegressionClassifier.Configuration.maximumIterations.setter(*a2, v14);
    v32 = v49;
    uint64_t v33 = v48;
    (*(void (**)(unsigned char *, unsigned char *, uint64_t))(v48 + 16))(v49, v37, v14);
    v34 = v47;
    LogisticRegressionClassifier.init(labels:configuration:)(v51, v32, &type metadata for Float, &type metadata for String, &protocol witness table for Float, v53, &protocol witness table for String, &protocol witness table for String, &protocol witness table for String, &protocol witness table for String);
    outlined destroy of MLImageClassifier.ModelParameters((uint64_t)v52);
    (*(void (**)(unsigned char *, uint64_t))(v33 + 8))(v37, v14);
    uint64_t v30 = v50;
    (*(void (**)(uint64_t, unsigned char *, uint64_t))(v45 + 32))(v50, v34, v46);
    unsigned int v31 = 0;
  }
  uint64_t v35 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Either<LogisticRegressionClassifier<Float, String>, FullyConnectedNetworkClassifier<Float, String>>);
  swift_storeEnumTagMultiPayload(v30, v35, v31);
  return outlined destroy of MLImageClassifier.FeatureExtractorType((uint64_t)v38);
}

uint64_t MLImageClassifier.Classifier.fitted<A>(to:eventHandler:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  v7[8] = v6;
  v7[7] = a6;
  v7[6] = a5;
  v7[5] = a4;
  v7[4] = a3;
  v7[3] = a2;
  v7[2] = a1;
  uint64_t v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for FullyConnectedNetworkClassifierModel<Float, String>);
  v7[9] = v8;
  uint64_t v9 = *(void *)(v8 - 8);
  v7[10] = v9;
  v7[11] = swift_task_alloc((*(void *)(v9 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for FullyConnectedNetworkClassifier<Float, String>);
  v7[12] = v10;
  uint64_t v11 = *(void *)(v10 - 8);
  v7[13] = v11;
  v7[14] = swift_task_alloc((*(void *)(v11 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for LogisticRegressionClassifierModel<Float, String>);
  v7[15] = v12;
  uint64_t v13 = *(void *)(v12 - 8);
  v7[16] = v13;
  v7[17] = swift_task_alloc((*(void *)(v13 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for LogisticRegressionClassifier<Float, String>);
  v7[18] = v14;
  uint64_t v15 = *(void *)(v14 - 8);
  v7[19] = v15;
  v7[20] = swift_task_alloc((*(void *)(v15 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v16 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Either<LogisticRegressionClassifier<Float, String>, FullyConnectedNetworkClassifier<Float, String>>);
  v7[21] = v16;
  v7[22] = swift_task_alloc((*(void *)(*(void *)(v16 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  return swift_task_switch(MLImageClassifier.Classifier.fitted<A>(to:eventHandler:), 0, 0);
}

uint64_t MLImageClassifier.Classifier.fitted<A>(to:eventHandler:)()
{
  uint64_t v1 = v0[22];
  uint64_t v2 = v0[21];
  outlined init with copy of Either<LogisticRegressionClassifier<Float, String>, FullyConnectedNetworkClassifier<Float, String>>(v0[8], v1, &demangling cache variable for type metadata for Either<LogisticRegressionClassifier<Float, String>, FullyConnectedNetworkClassifier<Float, String>>);
  int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload(v1, v2);
  uint64_t v4 = v0[22];
  if (EnumCaseMultiPayload == 1)
  {
    (*(void (**)(void, uint64_t, void))(v0[13] + 32))(v0[14], v4, v0[12]);
    uint64_t v5 = (void *)swift_task_alloc(async function pointer to FullyConnectedNetworkClassifier.fitted<A>(to:eventHandler:)[1]);
    v0[25] = v5;
    *uint64_t v5 = v0;
    v5[1] = MLImageClassifier.Classifier.fitted<A>(to:eventHandler:);
    return FullyConnectedNetworkClassifier.fitted<A>(to:eventHandler:)(v0[11], v0[3], v0[4], v0[5], v0[12], v0[6], v0[7]);
  }
  else
  {
    (*(void (**)(void, uint64_t, void))(v0[19] + 32))(v0[20], v4, v0[18]);
    uint64_t v7 = (void *)swift_task_alloc(async function pointer to LogisticRegressionClassifier.fitted<A>(to:eventHandler:)[1]);
    v0[23] = v7;
    *uint64_t v7 = v0;
    v7[1] = MLImageClassifier.Classifier.fitted<A>(to:eventHandler:);
    return LogisticRegressionClassifier.fitted<A>(to:eventHandler:)(v0[17], v0[3], v0[4], v0[5], v0[18], v0[6], v0[7]);
  }
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t (*v3)();

  uint64_t v2 = *(void *)(*(void *)v1 + 184);
  *(void *)(*(void *)v1 + 192) = v0;
  swift_task_dealloc(v2);
  if (v0) {
    int64_t v3 = MLImageClassifier.Classifier.fitted<A>(to:eventHandler:);
  }
  else {
    int64_t v3 = MLImageClassifier.Classifier.fitted<A>(to:eventHandler:);
  }
  return swift_task_switch(v3, 0, 0);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  uint64_t v10 = *(void *)(v0 + 160);
  uint64_t v1 = *(void *)(v0 + 136);
  uint64_t v2 = *(void *)(v0 + 128);
  int64_t v3 = *(void *)(v0 + 120);
  uint64_t v9 = *(void *)(v0 + 176);
  uint64_t v8 = *(void *)(v0 + 112);
  uint64_t v4 = *(void *)(v0 + 16);
  uint64_t v7 = *(void *)(v0 + 88);
  (*(void (**)(uint64_t, void))(*(void *)(v0 + 152) + 8))(v10, *(void *)(v0 + 144));
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v2 + 32))(v4, v1, v3);
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Either<LogisticRegressionClassifierModel<Float, String>, FullyConnectedNetworkClassifierModel<Float, String>>);
  swift_storeEnumTagMultiPayload(v4, v5, 0);
  swift_task_dealloc(v9);
  swift_task_dealloc(v10);
  swift_task_dealloc(v1);
  swift_task_dealloc(v8);
  swift_task_dealloc(v7);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t (*v3)();

  uint64_t v2 = *(void *)(*(void *)v1 + 200);
  *(void *)(*(void *)v1 + 208) = v0;
  swift_task_dealloc(v2);
  if (v0) {
    int64_t v3 = MLImageClassifier.Classifier.fitted<A>(to:eventHandler:);
  }
  else {
    int64_t v3 = MLImageClassifier.Classifier.fitted<A>(to:eventHandler:);
  }
  return swift_task_switch(v3, 0, 0);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  uint64_t v7 = *(void *)(v0 + 112);
  uint64_t v1 = *(void *)(v0 + 88);
  uint64_t v2 = *(void *)(v0 + 80);
  int64_t v3 = *(void *)(v0 + 16);
  uint64_t v4 = *(void *)(v0 + 72);
  uint64_t v10 = *(void *)(v0 + 176);
  uint64_t v9 = *(void *)(v0 + 160);
  uint64_t v8 = *(void *)(v0 + 136);
  (*(void (**)(uint64_t, void))(*(void *)(v0 + 104) + 8))(v7, *(void *)(v0 + 96));
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v2 + 32))(v3, v1, v4);
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Either<LogisticRegressionClassifierModel<Float, String>, FullyConnectedNetworkClassifierModel<Float, String>>);
  swift_storeEnumTagMultiPayload(v3, v5, 1);
  swift_task_dealloc(v10);
  swift_task_dealloc(v9);
  swift_task_dealloc(v8);
  swift_task_dealloc(v7);
  swift_task_dealloc(v1);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;

  uint64_t v1 = *(void *)(v0 + 160);
  uint64_t v2 = *(void *)(v0 + 176);
  int64_t v3 = *(void *)(v0 + 136);
  uint64_t v6 = *(void *)(v0 + 88);
  uint64_t v4 = *(void *)(v0 + 112);
  (*(void (**)(uint64_t, void))(*(void *)(v0 + 152) + 8))(v1, *(void *)(v0 + 144));
  swift_task_dealloc(v2);
  swift_task_dealloc(v1);
  swift_task_dealloc(v3);
  swift_task_dealloc(v4);
  swift_task_dealloc(v6);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;

  uint64_t v1 = *(void *)(v0 + 112);
  uint64_t v6 = *(void *)(v0 + 88);
  uint64_t v2 = *(void *)(v0 + 176);
  int64_t v3 = *(void *)(v0 + 160);
  uint64_t v4 = *(void *)(v0 + 136);
  (*(void (**)(uint64_t, void))(*(void *)(v0 + 104) + 8))(v1, *(void *)(v0 + 96));
  swift_task_dealloc(v2);
  swift_task_dealloc(v3);
  swift_task_dealloc(v4);
  swift_task_dealloc(v1);
  swift_task_dealloc(v6);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t MLImageClassifier.Classifier.fitted<A, B>(to:validateOn:eventHandler:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  *(void *)(v8 + 88) = v7;
  *(void *)(v8 + 80) = a7;
  *(_OWORD *)(v8 + 64) = *(_OWORD *)&v20;
  *(void *)(v8 + 56) = a6;
  *(void *)(v8 + 48) = a5;
  *(void *)(v8 + 40) = a4;
  *(void *)(v8 + 32) = a3;
  *(void *)(v8 + 24) = a2;
  *(void *)(v8 + 16) = a1;
  uint64_t v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for FullyConnectedNetworkClassifierModel<Float, String>);
  *(void *)(v8 + 96) = v9;
  uint64_t v10 = *(void *)(v9 - 8);
  *(void *)(v8 + 104) = v10;
  *(void *)(v8 + 112) = swift_task_alloc((*(void *)(v10 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for FullyConnectedNetworkClassifier<Float, String>);
  *(void *)(v8 + 120) = v11;
  uint64_t v12 = *(void *)(v11 - 8);
  *(void *)(v8 + 128) = v12;
  *(void *)(v8 + 136) = swift_task_alloc((*(void *)(v12 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for LogisticRegressionClassifierModel<Float, String>);
  *(void *)(v8 + 144) = v13;
  uint64_t v14 = *(void *)(v13 - 8);
  *(void *)(v8 + 152) = v14;
  *(void *)(v8 + 160) = swift_task_alloc((*(void *)(v14 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v15 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for LogisticRegressionClassifier<Float, String>);
  *(void *)(v8 + 168) = v15;
  uint64_t v16 = *(void *)(v15 - 8);
  *(void *)(v8 + 176) = v16;
  *(void *)(v8 + 184) = swift_task_alloc((*(void *)(v16 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v17 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Either<LogisticRegressionClassifier<Float, String>, FullyConnectedNetworkClassifier<Float, String>>);
  *(void *)(v8 + 192) = v17;
  *(void *)(v8 + 200) = swift_task_alloc((*(void *)(*(void *)(v17 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  retaddr = v19;
  return swift_task_switch(MLImageClassifier.Classifier.fitted<A, B>(to:validateOn:eventHandler:), 0, 0);
}

uint64_t MLImageClassifier.Classifier.fitted<A, B>(to:validateOn:eventHandler:)()
{
  uint64_t v1 = *(void *)(v0 + 200);
  uint64_t v2 = *(void *)(v0 + 192);
  outlined init with copy of Either<LogisticRegressionClassifier<Float, String>, FullyConnectedNetworkClassifier<Float, String>>(*(void *)(v0 + 88), v1, &demangling cache variable for type metadata for Either<LogisticRegressionClassifier<Float, String>, FullyConnectedNetworkClassifier<Float, String>>);
  int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload(v1, v2);
  uint64_t v4 = *(void *)(v0 + 200);
  if (EnumCaseMultiPayload == 1)
  {
    (*(void (**)(void, uint64_t, void))(*(void *)(v0 + 128) + 32))(*(void *)(v0 + 136), v4, *(void *)(v0 + 120));
    uint64_t v5 = (void *)swift_task_alloc(async function pointer to FullyConnectedNetworkClassifier.fitted<A, B>(to:validateOn:eventHandler:)[1]);
    *(void *)(v0 + 224) = v5;
    *uint64_t v5 = v0;
    v5[1] = MLImageClassifier.Classifier.fitted<A, B>(to:validateOn:eventHandler:);
    *(_OWORD *)&uint64_t v8 = *(_OWORD *)(v0 + 72);
    return FullyConnectedNetworkClassifier.fitted<A, B>(to:validateOn:eventHandler:)(*(void *)(v0 + 112), *(void *)(v0 + 24), *(void *)(v0 + 32), *(void *)(v0 + 40), *(void *)(v0 + 48), *(void *)(v0 + 120));
  }
  else
  {
    (*(void (**)(void, uint64_t, void))(*(void *)(v0 + 176) + 32))(*(void *)(v0 + 184), v4, *(void *)(v0 + 168));
    uint64_t v7 = (void *)swift_task_alloc(async function pointer to LogisticRegressionClassifier.fitted<A, B>(to:validateOn:eventHandler:)[1]);
    *(void *)(v0 + 208) = v7;
    *uint64_t v7 = v0;
    v7[1] = MLImageClassifier.Classifier.fitted<A, B>(to:validateOn:eventHandler:);
    *(_OWORD *)&uint64_t v8 = *(_OWORD *)(v0 + 72);
    return LogisticRegressionClassifier.fitted<A, B>(to:validateOn:eventHandler:)(*(void *)(v0 + 160), *(void *)(v0 + 24), *(void *)(v0 + 32), *(void *)(v0 + 40), *(void *)(v0 + 48), *(void *)(v0 + 168));
  }
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t (*v3)();

  uint64_t v2 = *(void *)(*(void *)v1 + 208);
  *(void *)(*(void *)v1 + 216) = v0;
  swift_task_dealloc(v2);
  if (v0) {
    int64_t v3 = MLImageClassifier.Classifier.fitted<A, B>(to:validateOn:eventHandler:);
  }
  else {
    int64_t v3 = MLImageClassifier.Classifier.fitted<A, B>(to:validateOn:eventHandler:);
  }
  return swift_task_switch(v3, 0, 0);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  uint64_t v10 = *(void *)(v0 + 184);
  uint64_t v1 = *(void *)(v0 + 160);
  uint64_t v2 = *(void *)(v0 + 152);
  int64_t v3 = *(void *)(v0 + 144);
  uint64_t v9 = *(void *)(v0 + 200);
  uint64_t v8 = *(void *)(v0 + 136);
  uint64_t v4 = *(void *)(v0 + 16);
  uint64_t v7 = *(void *)(v0 + 112);
  (*(void (**)(uint64_t, void))(*(void *)(v0 + 176) + 8))(v10, *(void *)(v0 + 168));
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v2 + 32))(v4, v1, v3);
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Either<LogisticRegressionClassifierModel<Float, String>, FullyConnectedNetworkClassifierModel<Float, String>>);
  swift_storeEnumTagMultiPayload(v4, v5, 0);
  swift_task_dealloc(v9);
  swift_task_dealloc(v10);
  swift_task_dealloc(v1);
  swift_task_dealloc(v8);
  swift_task_dealloc(v7);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t (*v3)();

  uint64_t v2 = *(void *)(*(void *)v1 + 224);
  *(void *)(*(void *)v1 + 232) = v0;
  swift_task_dealloc(v2);
  if (v0) {
    int64_t v3 = MLImageClassifier.Classifier.fitted<A, B>(to:validateOn:eventHandler:);
  }
  else {
    int64_t v3 = MLImageClassifier.Classifier.fitted<A, B>(to:validateOn:eventHandler:);
  }
  return swift_task_switch(v3, 0, 0);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  uint64_t v7 = *(void *)(v0 + 136);
  uint64_t v1 = *(void *)(v0 + 112);
  uint64_t v2 = *(void *)(v0 + 104);
  int64_t v3 = *(void *)(v0 + 16);
  uint64_t v4 = *(void *)(v0 + 96);
  uint64_t v10 = *(void *)(v0 + 200);
  uint64_t v9 = *(void *)(v0 + 184);
  uint64_t v8 = *(void *)(v0 + 160);
  (*(void (**)(uint64_t, void))(*(void *)(v0 + 128) + 8))(v7, *(void *)(v0 + 120));
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v2 + 32))(v3, v1, v4);
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Either<LogisticRegressionClassifierModel<Float, String>, FullyConnectedNetworkClassifierModel<Float, String>>);
  swift_storeEnumTagMultiPayload(v3, v5, 1);
  swift_task_dealloc(v10);
  swift_task_dealloc(v9);
  swift_task_dealloc(v8);
  swift_task_dealloc(v7);
  swift_task_dealloc(v1);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;

  uint64_t v1 = *(void *)(v0 + 184);
  uint64_t v2 = *(void *)(v0 + 200);
  int64_t v3 = *(void *)(v0 + 160);
  uint64_t v6 = *(void *)(v0 + 112);
  uint64_t v4 = *(void *)(v0 + 136);
  (*(void (**)(uint64_t, void))(*(void *)(v0 + 176) + 8))(v1, *(void *)(v0 + 168));
  swift_task_dealloc(v2);
  swift_task_dealloc(v1);
  swift_task_dealloc(v3);
  swift_task_dealloc(v4);
  swift_task_dealloc(v6);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;

  uint64_t v1 = *(void *)(v0 + 136);
  uint64_t v6 = *(void *)(v0 + 112);
  uint64_t v2 = *(void *)(v0 + 200);
  int64_t v3 = *(void *)(v0 + 184);
  uint64_t v4 = *(void *)(v0 + 160);
  (*(void (**)(uint64_t, void))(*(void *)(v0 + 128) + 8))(v1, *(void *)(v0 + 120));
  swift_task_dealloc(v2);
  swift_task_dealloc(v3);
  swift_task_dealloc(v4);
  swift_task_dealloc(v1);
  swift_task_dealloc(v6);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t MLImageClassifier.Classifier.encode(_:to:)(uint64_t a1, uint64_t a2)
{
  uint64_t v48 = v2;
  uint64_t v44 = v3;
  uint64_t v49 = a2;
  uint64_t v43 = a1;
  uint64_t v50 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for FullyConnectedNetworkClassifierModel<Float, String>);
  v58 = *(unsigned char **)(v50 - 8);
  int64_t v4 = *((void *)v58 + 8);
  uint64_t v5 = alloca(v4);
  uint64_t v6 = alloca(v4);
  uint64_t v51 = v42;
  uint64_t v55 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for FullyConnectedNetworkClassifier<Float, String>);
  uint64_t v56 = *(void *)(v55 - 8);
  int64_t v7 = *(void *)(v56 + 64);
  uint64_t v8 = alloca(v7);
  uint64_t v9 = alloca(v7);
  v52 = v42;
  uint64_t v54 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for LogisticRegressionClassifierModel<Float, String>);
  uint64_t v53 = *(void *)(v54 - 8);
  int64_t v10 = *(void *)(v53 + 64);
  uint64_t v11 = alloca(v10);
  uint64_t v12 = alloca(v10);
  uint64_t v45 = v42;
  uint64_t v57 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for LogisticRegressionClassifier<Float, String>);
  uint64_t v59 = *(void *)(v57 - 8);
  int64_t v13 = *(void *)(v59 + 64);
  uint64_t v14 = alloca(v13);
  uint64_t v15 = alloca(v13);
  uint64_t v46 = v42;
  uint64_t v16 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Either<LogisticRegressionClassifier<Float, String>, FullyConnectedNetworkClassifier<Float, String>>);
  int64_t v17 = *(void *)(*(void *)(v16 - 8) + 64);
  v18 = alloca(v17);
  v19 = alloca(v17);
  v47 = v42;
  uint64_t v20 = alloca(v17);
  v21 = alloca(v17);
  v22 = v42;
  uint64_t v23 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Either<LogisticRegressionClassifier<Float, String>, FullyConnectedNetworkClassifier<Float, String>>, Either<LogisticRegressionClassifierModel<Float, String>, FullyConnectedNetworkClassifierModel<Float, String>>));
  int64_t v24 = *(void *)(*(void *)(v23 - 8) + 64);
  v25 = alloca(v24);
  v26 = alloca(v24);
  uint64_t v27 = v42;
  uint64_t v28 = &v42[*(int *)(v23 + 48)];
  outlined init with copy of Either<LogisticRegressionClassifier<Float, String>, FullyConnectedNetworkClassifier<Float, String>>(v44, (uint64_t)v42, &demangling cache variable for type metadata for Either<LogisticRegressionClassifier<Float, String>, FullyConnectedNetworkClassifier<Float, String>>);
  outlined init with copy of Either<LogisticRegressionClassifier<Float, String>, FullyConnectedNetworkClassifier<Float, String>>(v43, (uint64_t)v28, &demangling cache variable for type metadata for Either<LogisticRegressionClassifierModel<Float, String>, FullyConnectedNetworkClassifierModel<Float, String>>);
  if (swift_getEnumCaseMultiPayload(v42, v16) != 1)
  {
    v58 = v42;
    outlined init with copy of Either<LogisticRegressionClassifier<Float, String>, FullyConnectedNetworkClassifier<Float, String>>((uint64_t)v42, (uint64_t)v42, &demangling cache variable for type metadata for Either<LogisticRegressionClassifier<Float, String>, FullyConnectedNetworkClassifier<Float, String>>);
    uint64_t v37 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Either<LogisticRegressionClassifierModel<Float, String>, FullyConnectedNetworkClassifierModel<Float, String>>);
    if (swift_getEnumCaseMultiPayload(v28, v37) != 1)
    {
      v38 = v46;
      uint64_t v39 = v57;
      (*(void (**)(unsigned char *, unsigned char *, uint64_t))(v59 + 32))(v46, v42, v57);
      uint64_t v40 = v45;
      (*(void (**)(unsigned char *, unsigned char *, uint64_t))(v53 + 32))(v45, v28, v54);
      LogisticRegressionClassifier.encode(_:to:)(v40, v49, v39);
      (*(void (**)(unsigned char *, uint64_t))(v53 + 8))(v40, v54);
      (*(void (**)(unsigned char *, uint64_t))(v59 + 8))(v38, v39);
      uint64_t v27 = v58;
      return outlined destroy of Either<LogisticRegressionClassifier<Float, String>, FullyConnectedNetworkClassifier<Float, String>>((uint64_t)v27, &demangling cache variable for type metadata for Either<LogisticRegressionClassifier<Float, String>, FullyConnectedNetworkClassifier<Float, String>>);
    }
LABEL_8:
    (*(void (**)(unsigned char *, uint64_t))(v59 + 8))(v22, v57);
    _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, 0xD00000000000002FLL, "Classifier.Classifier.swift" + 0x8000000000000000, "CreateML/MLImageClassifier.Classifier.swift", 43, 2, 88, 0);
    BUG();
  }
  v22 = v47;
  outlined init with copy of Either<LogisticRegressionClassifier<Float, String>, FullyConnectedNetworkClassifier<Float, String>>((uint64_t)v42, (uint64_t)v47, &demangling cache variable for type metadata for Either<LogisticRegressionClassifier<Float, String>, FullyConnectedNetworkClassifier<Float, String>>);
  uint64_t v29 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Either<LogisticRegressionClassifierModel<Float, String>, FullyConnectedNetworkClassifierModel<Float, String>>);
  if (swift_getEnumCaseMultiPayload(v28, v29) != 1)
  {
    uint64_t v59 = v56;
    uint64_t v57 = v55;
    goto LABEL_8;
  }
  uint64_t v30 = v22;
  uint64_t v31 = v55;
  (*(void (**)(unsigned char *, unsigned char *, uint64_t))(v56 + 32))(v52, v30, v55);
  v32 = v51;
  (*((void (**)(unsigned char *, unsigned char *, uint64_t))v58 + 4))(v51, v28, v50);
  uint64_t v33 = lazy protocol witness table accessor for type FullyConnectedNetworkClassifier<Float, String> and conformance FullyConnectedNetworkClassifier<A, B>(&lazy protocol witness table cache variable for type FullyConnectedNetworkClassifier<Float, String> and conformance FullyConnectedNetworkClassifier<A, B>, &demangling cache variable for type metadata for FullyConnectedNetworkClassifier<Float, String>, (uint64_t)&protocol conformance descriptor for FullyConnectedNetworkClassifier<A, B>);
  uint64_t v34 = lazy protocol witness table accessor for type FullyConnectedNetworkClassifier<Float, String> and conformance FullyConnectedNetworkClassifier<A, B>(&lazy protocol witness table cache variable for type FullyConnectedNetworkClassifierModel<Float, String> and conformance FullyConnectedNetworkClassifierModel<A, B>, &demangling cache variable for type metadata for FullyConnectedNetworkClassifierModel<Float, String>, (uint64_t)&protocol conformance descriptor for FullyConnectedNetworkClassifierModel<A, B>);
  uint64_t v35 = v32;
  v36 = v52;
  SupervisedEstimator<>.encode(_:to:)(v35, v49, v31, v33, v34);
  (*((void (**)(unsigned char *, uint64_t))v58 + 1))(v51, v50);
  (*(void (**)(unsigned char *, uint64_t))(v56 + 8))(v36, v31);
  return outlined destroy of Either<LogisticRegressionClassifier<Float, String>, FullyConnectedNetworkClassifier<Float, String>>((uint64_t)v27, &demangling cache variable for type metadata for Either<LogisticRegressionClassifier<Float, String>, FullyConnectedNetworkClassifier<Float, String>>);
}

uint64_t protocol witness for SupervisedEstimator.fitted<A>(to:eventHandler:) in conformance MLImageClassifier.Classifier(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v9 = (void *)swift_task_alloc(dword_3A3844);
  *(void *)(v6 + 16) = v9;
  *uint64_t v9 = v6;
  v9[1] = protocol witness for SupervisedEstimator.fitted<A>(to:eventHandler:) in conformance MLImageClassifier.Classifier;
  retaddr = v13;
  return MLImageClassifier.Classifier.fitted<A>(to:eventHandler:)(a1, a2, a3, a4, a5, a6);
}

uint64_t protocol witness for SupervisedEstimator.fitted<A, B>(to:validateOn:eventHandler:) in conformance MLImageClassifier.Classifier(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v8 = (void *)swift_task_alloc(dword_3A383C);
  *(void *)(v6 + 16) = v8;
  *uint64_t v8 = v6;
  v8[1] = protocol witness for SupervisedEstimator.fitted<A, B>(to:validateOn:eventHandler:) in conformance MLImageClassifier.Classifier;
  retaddr = v13;
  return MLImageClassifier.Classifier.fitted<A, B>(to:validateOn:eventHandler:)(a1, a2, a3, a4, a5, a6, v14);
}

uint64_t protocol witness for SupervisedEstimator.fitted<A, B>(to:validateOn:eventHandler:) in conformance MLImageClassifier.Classifier()
{
  uint64_t v1 = *(void *)(*v0 + 16);
  uint64_t v2 = *v0;
  swift_task_dealloc(v1);
  return (*(uint64_t (**)(void))(v2 + 8))();
}

uint64_t protocol witness for SupervisedEstimator.encode(_:to:) in conformance MLImageClassifier.Classifier(uint64_t a1, uint64_t a2)
{
  return MLImageClassifier.Classifier.encode(_:to:)(a1, a2);
}

uint64_t protocol witness for SupervisedEstimator.decode(from:) in conformance MLImageClassifier.Classifier(uint64_t a1)
{
  return MLImageClassifier.Classifier.decode(from:)(a1, (void (*)(uint64_t, uint64_t))&LogisticRegressionClassifier.decode(from:), (void (*)(uint64_t, uint64_t))&FullyConnectedNetworkClassifier.decode(from:));
}

uint64_t MLImageClassifier.Classifier.makeTransformer()()
{
  uint64_t v31 = v1;
  uint64_t v42 = v0;
  uint64_t v33 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for FullyConnectedNetworkClassifierModel<Float, String>);
  uint64_t v32 = *(void *)(v33 - 8);
  int64_t v2 = *(void *)(v32 + 64);
  uint64_t v3 = alloca(v2);
  int64_t v4 = alloca(v2);
  uint64_t v34 = &v30;
  uint64_t v36 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for FullyConnectedNetworkClassifier<Float, String>);
  uint64_t v35 = *(void *)(v36 - 8);
  int64_t v5 = *(void *)(v35 + 64);
  uint64_t v6 = alloca(v5);
  int64_t v7 = alloca(v5);
  uint64_t v39 = &v30;
  uint64_t v37 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for LogisticRegressionClassifierModel<Float, String>);
  uint64_t v38 = *(void *)(v37 - 8);
  int64_t v8 = *(void *)(v38 + 64);
  uint64_t v9 = alloca(v8);
  int64_t v10 = alloca(v8);
  uint64_t v40 = &v30;
  uint64_t v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for LogisticRegressionClassifier<Float, String>);
  uint64_t v12 = *(void *)(v11 - 8);
  int64_t v13 = *(void *)(v12 + 64);
  uint64_t v14 = alloca(v13);
  uint64_t v15 = alloca(v13);
  v41 = &v30;
  uint64_t v16 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Either<LogisticRegressionClassifier<Float, String>, FullyConnectedNetworkClassifier<Float, String>>);
  int64_t v17 = *(void *)(*(void *)(v16 - 8) + 64);
  v18 = alloca(v17);
  v19 = alloca(v17);
  outlined init with copy of Either<LogisticRegressionClassifier<Float, String>, FullyConnectedNetworkClassifier<Float, String>>(v31, (uint64_t)&v30, &demangling cache variable for type metadata for Either<LogisticRegressionClassifier<Float, String>, FullyConnectedNetworkClassifier<Float, String>>);
  if (swift_getEnumCaseMultiPayload(&v30, v16) == 1)
  {
    uint64_t v20 = v39;
    uint64_t v21 = v36;
    uint64_t v22 = v35;
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(v35 + 32))(v39, &v30, v36);
    uint64_t v23 = v34;
    FullyConnectedNetworkClassifier.makeTransformer()(v21);
    (*(void (**)(uint64_t *, uint64_t))(v22 + 8))(v20, v21);
    uint64_t v24 = v42;
    (*(void (**)(uint64_t, uint64_t *, uint64_t))(v32 + 32))(v42, v23, v33);
    unsigned int v25 = 1;
  }
  else
  {
    v26 = v41;
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(v12 + 32))(v41, &v30, v11);
    uint64_t v27 = v40;
    LogisticRegressionClassifier.makeTransformer()(v11);
    (*(void (**)(uint64_t *, uint64_t))(v12 + 8))(v26, v11);
    uint64_t v24 = v42;
    (*(void (**)(uint64_t, uint64_t *, uint64_t))(v38 + 32))(v42, v27, v37);
    unsigned int v25 = 0;
  }
  uint64_t v28 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Either<LogisticRegressionClassifierModel<Float, String>, FullyConnectedNetworkClassifierModel<Float, String>>);
  return swift_storeEnumTagMultiPayload(v24, v28, v25);
}

uint64_t MLImageClassifier.Classifier.update<A>(_:with:eventHandler:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  v7[8] = v6;
  v7[7] = a6;
  v7[6] = a5;
  v7[5] = a4;
  v7[4] = a3;
  v7[3] = a2;
  v7[2] = a1;
  uint64_t v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for FullyConnectedNetworkClassifierModel<Float, String>);
  v7[9] = v8;
  uint64_t v9 = *(void *)(v8 - 8);
  v7[10] = v9;
  unint64_t v10 = (*(void *)(v9 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v7[11] = swift_task_alloc(v10);
  v7[12] = swift_task_alloc(v10);
  uint64_t v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for FullyConnectedNetworkClassifier<Float, String>);
  v7[13] = v11;
  uint64_t v12 = *(void *)(v11 - 8);
  v7[14] = v12;
  v7[15] = swift_task_alloc((*(void *)(v12 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for LogisticRegressionClassifierModel<Float, String>);
  v7[16] = v13;
  uint64_t v14 = *(void *)(v13 - 8);
  v7[17] = v14;
  unint64_t v15 = (*(void *)(v14 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v7[18] = swift_task_alloc(v15);
  v7[19] = swift_task_alloc(v15);
  uint64_t v16 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for LogisticRegressionClassifier<Float, String>);
  v7[20] = v16;
  uint64_t v17 = *(void *)(v16 - 8);
  v7[21] = v17;
  v7[22] = swift_task_alloc((*(void *)(v17 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v18 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Either<LogisticRegressionClassifier<Float, String>, FullyConnectedNetworkClassifier<Float, String>>);
  v7[23] = v18;
  unint64_t v19 = (*(void *)(*(void *)(v18 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v7[24] = swift_task_alloc(v19);
  v7[25] = swift_task_alloc(v19);
  uint64_t v20 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Either<LogisticRegressionClassifier<Float, String>, FullyConnectedNetworkClassifier<Float, String>>, Either<LogisticRegressionClassifierModel<Float, String>, FullyConnectedNetworkClassifierModel<Float, String>>));
  v7[26] = v20;
  v7[27] = swift_task_alloc((*(void *)(*(void *)(v20 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  return swift_task_switch(MLImageClassifier.Classifier.update<A>(_:with:eventHandler:), 0, 0);
}

uint64_t MLImageClassifier.Classifier.update<A>(_:with:eventHandler:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v8 = v7[27];
  uint64_t v9 = v7[23];
  uint64_t v10 = v7[2];
  uint64_t v11 = v8 + *(int *)(v7[26] + 48);
  outlined init with copy of Either<LogisticRegressionClassifier<Float, String>, FullyConnectedNetworkClassifier<Float, String>>(v7[8], v8, &demangling cache variable for type metadata for Either<LogisticRegressionClassifier<Float, String>, FullyConnectedNetworkClassifier<Float, String>>);
  outlined init with copy of Either<LogisticRegressionClassifier<Float, String>, FullyConnectedNetworkClassifier<Float, String>>(v10, v11, &demangling cache variable for type metadata for Either<LogisticRegressionClassifierModel<Float, String>, FullyConnectedNetworkClassifierModel<Float, String>>);
  int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload(v8, v9);
  uint64_t v13 = v7[27];
  if (EnumCaseMultiPayload == 1)
  {
    outlined init with copy of Either<LogisticRegressionClassifier<Float, String>, FullyConnectedNetworkClassifier<Float, String>>(v13, v7[24], &demangling cache variable for type metadata for Either<LogisticRegressionClassifier<Float, String>, FullyConnectedNetworkClassifier<Float, String>>);
    uint64_t v14 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Either<LogisticRegressionClassifierModel<Float, String>, FullyConnectedNetworkClassifierModel<Float, String>>);
    v7[32] = v14;
    if (swift_getEnumCaseMultiPayload(v11, v14) == 1)
    {
      uint64_t v15 = v7[12];
      uint64_t v16 = v7[9];
      uint64_t v17 = v7[10];
      (*(void (**)(void, void, void))(v7[14] + 32))(v7[15], v7[24], v7[13]);
      uint64_t v18 = *(void (**)(uint64_t, uint64_t, uint64_t))(v17 + 32);
      v7[33] = v18;
      v18(v15, v11, v16);
      unint64_t v19 = (void *)swift_task_alloc(async function pointer to FullyConnectedNetworkClassifier.update<A>(_:with:eventHandler:)[1]);
      v7[34] = v19;
      void *v19 = v7;
      v19[1] = MLImageClassifier.Classifier.update<A>(_:with:eventHandler:);
      return FullyConnectedNetworkClassifier.update<A>(_:with:eventHandler:)(v7[12], v7[3], v7[4], v7[5], v7[13], v7[6], v7[7]);
    }
    uint64_t v22 = v7 + 24;
    uint64_t v23 = 13;
    uint64_t v24 = 14;
    goto LABEL_7;
  }
  outlined init with copy of Either<LogisticRegressionClassifier<Float, String>, FullyConnectedNetworkClassifier<Float, String>>(v13, v7[25], &demangling cache variable for type metadata for Either<LogisticRegressionClassifier<Float, String>, FullyConnectedNetworkClassifier<Float, String>>);
  uint64_t v21 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Either<LogisticRegressionClassifierModel<Float, String>, FullyConnectedNetworkClassifierModel<Float, String>>);
  v7[28] = v21;
  if (swift_getEnumCaseMultiPayload(v11, v21) == 1)
  {
    uint64_t v22 = v7 + 25;
    uint64_t v23 = 20;
    uint64_t v24 = 21;
LABEL_7:
    (*(void (**)(void, void))(v7[v24] + 8))(*v22, v7[v23]);
    return _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, 0xD00000000000002FLL, "Classifier.Classifier.swift" + 0x8000000000000000, "CreateML/MLImageClassifier.Classifier.swift", 43, 2, 132, 0);
  }
  uint64_t v25 = v7[19];
  uint64_t v26 = v7[16];
  uint64_t v27 = v7[17];
  (*(void (**)(void, void, void))(v7[21] + 32))(v7[22], v7[25], v7[20]);
  uint64_t v28 = *(void (**)(uint64_t, uint64_t, uint64_t))(v27 + 32);
  v7[29] = v28;
  v28(v25, v11, v26);
  uint64_t v29 = (void *)swift_task_alloc(async function pointer to LogisticRegressionClassifier.update<A>(_:with:eventHandler:)[1]);
  v7[30] = v29;
  void *v29 = v7;
  v29[1] = MLImageClassifier.Classifier.update<A>(_:with:eventHandler:);
  return LogisticRegressionClassifier.update<A>(_:with:eventHandler:)(v7[19], v7[3], v7[4], v7[5], v7[20], v7[6], v7[7]);
}

uint64_t MLImageClassifier.Classifier.update<A>(_:with:eventHandler:)()
{
  uint64_t v2 = *(void *)(*(void *)v1 + 240);
  *(void *)(*(void *)v1 + 248) = v0;
  swift_task_dealloc(v2);
  if (v0) {
    uint64_t v3 = MLImageClassifier.Classifier.update<A>(_:with:eventHandler:);
  }
  else {
    uint64_t v3 = MLImageClassifier.Classifier.update<A>(_:with:eventHandler:);
  }
  return swift_task_switch(v3, 0, 0);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  void (*v14)(uint64_t, uint64_t, uint64_t);

  uint64_t v14 = *(void (**)(uint64_t, uint64_t, uint64_t))(v0 + 232);
  uint64_t v12 = *(void *)(v0 + 224);
  uint64_t v10 = *(void *)(v0 + 176);
  uint64_t v1 = *(void *)(v0 + 152);
  uint64_t v2 = *(void *)(v0 + 144);
  uint64_t v3 = *(void *)(v0 + 128);
  uint64_t v13 = *(void *)(v0 + 216);
  uint64_t v11 = *(void *)(v0 + 200);
  uint64_t v9 = *(void *)(v0 + 192);
  uint64_t v8 = *(void *)(v0 + 120);
  int64_t v7 = *(void *)(v0 + 96);
  int64_t v4 = *(void *)(v0 + 16);
  uint64_t v6 = *(void *)(v0 + 88);
  (*(void (**)(uint64_t, void))(*(void *)(v0 + 168) + 8))(v10, *(void *)(v0 + 160));
  v14(v2, v1, v3);
  outlined destroy of Either<LogisticRegressionClassifier<Float, String>, FullyConnectedNetworkClassifier<Float, String>>(v4, &demangling cache variable for type metadata for Either<LogisticRegressionClassifierModel<Float, String>, FullyConnectedNetworkClassifierModel<Float, String>>);
  v14(v4, v2, v3);
  swift_storeEnumTagMultiPayload(v4, v12, 0);
  outlined destroy of Either<LogisticRegressionClassifier<Float, String>, FullyConnectedNetworkClassifier<Float, String>>(v13, &demangling cache variable for type metadata for Either<LogisticRegressionClassifier<Float, String>, FullyConnectedNetworkClassifier<Float, String>>);
  swift_task_dealloc(v13);
  swift_task_dealloc(v11);
  swift_task_dealloc(v9);
  swift_task_dealloc(v10);
  swift_task_dealloc(v1);
  swift_task_dealloc(v2);
  swift_task_dealloc(v8);
  swift_task_dealloc(v7);
  swift_task_dealloc(v6);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t (*v3)();

  uint64_t v2 = *(void *)(*(void *)v1 + 272);
  *(void *)(*(void *)v1 + 280) = v0;
  swift_task_dealloc(v2);
  if (v0) {
    uint64_t v3 = MLImageClassifier.Classifier.update<A>(_:with:eventHandler:);
  }
  else {
    uint64_t v3 = MLImageClassifier.Classifier.update<A>(_:with:eventHandler:);
  }
  return swift_task_switch(v3, 0, 0);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  void (*v14)(uint64_t, uint64_t, uint64_t);

  uint64_t v14 = *(void (**)(uint64_t, uint64_t, uint64_t))(v0 + 264);
  uint64_t v12 = *(void *)(v0 + 256);
  uint64_t v6 = *(void *)(v0 + 120);
  uint64_t v1 = *(void *)(v0 + 96);
  uint64_t v2 = *(void *)(v0 + 88);
  uint64_t v3 = *(void *)(v0 + 16);
  int64_t v4 = *(void *)(v0 + 72);
  uint64_t v13 = *(void *)(v0 + 216);
  uint64_t v11 = *(void *)(v0 + 200);
  uint64_t v10 = *(void *)(v0 + 192);
  uint64_t v9 = *(void *)(v0 + 176);
  uint64_t v8 = *(void *)(v0 + 152);
  int64_t v7 = *(void *)(v0 + 144);
  (*(void (**)(uint64_t, void))(*(void *)(v0 + 112) + 8))(v6, *(void *)(v0 + 104));
  v14(v2, v1, v4);
  outlined destroy of Either<LogisticRegressionClassifier<Float, String>, FullyConnectedNetworkClassifier<Float, String>>(v3, &demangling cache variable for type metadata for Either<LogisticRegressionClassifierModel<Float, String>, FullyConnectedNetworkClassifierModel<Float, String>>);
  v14(v3, v2, v4);
  swift_storeEnumTagMultiPayload(v3, v12, 1);
  outlined destroy of Either<LogisticRegressionClassifier<Float, String>, FullyConnectedNetworkClassifier<Float, String>>(v13, &demangling cache variable for type metadata for Either<LogisticRegressionClassifier<Float, String>, FullyConnectedNetworkClassifier<Float, String>>);
  swift_task_dealloc(v13);
  swift_task_dealloc(v11);
  swift_task_dealloc(v10);
  swift_task_dealloc(v9);
  swift_task_dealloc(v8);
  swift_task_dealloc(v7);
  swift_task_dealloc(v6);
  swift_task_dealloc(v1);
  swift_task_dealloc(v2);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  uint64_t v1 = *(void *)(v0 + 176);
  uint64_t v12 = *(void *)(v0 + 168);
  uint64_t v2 = *(void *)(v0 + 160);
  uint64_t v3 = *(void *)(v0 + 152);
  int64_t v4 = *(void *)(v0 + 216);
  uint64_t v11 = *(void *)(v0 + 200);
  uint64_t v10 = *(void *)(v0 + 192);
  uint64_t v9 = *(void *)(v0 + 144);
  uint64_t v8 = *(void *)(v0 + 120);
  uint64_t v6 = *(void *)(v0 + 88);
  int64_t v7 = *(void *)(v0 + 96);
  (*(void (**)(uint64_t, void))(*(void *)(v0 + 136) + 8))(v3, *(void *)(v0 + 128));
  (*(void (**)(uint64_t, uint64_t))(v12 + 8))(v1, v2);
  outlined destroy of Either<LogisticRegressionClassifier<Float, String>, FullyConnectedNetworkClassifier<Float, String>>(v4, &demangling cache variable for type metadata for Either<LogisticRegressionClassifier<Float, String>, FullyConnectedNetworkClassifier<Float, String>>);
  swift_task_dealloc(v4);
  swift_task_dealloc(v11);
  swift_task_dealloc(v10);
  swift_task_dealloc(v1);
  swift_task_dealloc(v3);
  swift_task_dealloc(v9);
  swift_task_dealloc(v8);
  swift_task_dealloc(v7);
  swift_task_dealloc(v6);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  uint64_t v1 = *(void *)(v0 + 120);
  uint64_t v2 = *(void *)(v0 + 112);
  uint64_t v3 = *(void *)(v0 + 104);
  int64_t v7 = *(void *)(v0 + 96);
  int64_t v4 = *(void *)(v0 + 216);
  uint64_t v12 = *(void *)(v0 + 200);
  uint64_t v11 = *(void *)(v0 + 192);
  uint64_t v10 = *(void *)(v0 + 176);
  uint64_t v9 = *(void *)(v0 + 152);
  uint64_t v8 = *(void *)(v0 + 144);
  uint64_t v6 = *(void *)(v0 + 88);
  (*(void (**)(uint64_t, void))(*(void *)(v0 + 80) + 8))(v7, *(void *)(v0 + 72));
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v1, v3);
  outlined destroy of Either<LogisticRegressionClassifier<Float, String>, FullyConnectedNetworkClassifier<Float, String>>(v4, &demangling cache variable for type metadata for Either<LogisticRegressionClassifier<Float, String>, FullyConnectedNetworkClassifier<Float, String>>);
  swift_task_dealloc(v4);
  swift_task_dealloc(v12);
  swift_task_dealloc(v11);
  swift_task_dealloc(v10);
  swift_task_dealloc(v9);
  swift_task_dealloc(v8);
  swift_task_dealloc(v1);
  swift_task_dealloc(v7);
  swift_task_dealloc(v6);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t MLImageClassifier.Classifier.encodeWithOptimizer(_:to:)(uint64_t a1, uint64_t a2)
{
  uint64_t v45 = v2;
  uint64_t v40 = v3;
  uint64_t v46 = a2;
  uint64_t v39 = a1;
  uint64_t v48 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for FullyConnectedNetworkClassifierModel<Float, String>);
  uint64_t v47 = *(void *)(v48 - 8);
  int64_t v4 = *(void *)(v47 + 64);
  int64_t v5 = alloca(v4);
  uint64_t v6 = alloca(v4);
  v41 = v38;
  uint64_t v51 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for FullyConnectedNetworkClassifier<Float, String>);
  uint64_t v52 = *(void *)(v51 - 8);
  int64_t v7 = *(void *)(v52 + 64);
  uint64_t v8 = alloca(v7);
  uint64_t v9 = alloca(v7);
  uint64_t v42 = v38;
  uint64_t v50 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for LogisticRegressionClassifierModel<Float, String>);
  uint64_t v49 = *(void *)(v50 - 8);
  int64_t v10 = *(void *)(v49 + 64);
  uint64_t v11 = alloca(v10);
  uint64_t v12 = alloca(v10);
  uint64_t v43 = v38;
  uint64_t v53 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for LogisticRegressionClassifier<Float, String>);
  uint64_t v54 = *(void *)(v53 - 8);
  int64_t v13 = *(void *)(v54 + 64);
  uint64_t v14 = alloca(v13);
  uint64_t v15 = alloca(v13);
  uint64_t v55 = v38;
  uint64_t v16 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Either<LogisticRegressionClassifier<Float, String>, FullyConnectedNetworkClassifier<Float, String>>);
  int64_t v17 = *(void *)(*(void *)(v16 - 8) + 64);
  uint64_t v18 = alloca(v17);
  unint64_t v19 = alloca(v17);
  uint64_t v44 = v38;
  uint64_t v20 = alloca(v17);
  uint64_t v21 = alloca(v17);
  uint64_t v22 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Either<LogisticRegressionClassifier<Float, String>, FullyConnectedNetworkClassifier<Float, String>>, Either<LogisticRegressionClassifierModel<Float, String>, FullyConnectedNetworkClassifierModel<Float, String>>));
  int64_t v23 = *(void *)(*(void *)(v22 - 8) + 64);
  uint64_t v24 = alloca(v23);
  uint64_t v25 = alloca(v23);
  uint64_t v26 = &v38[*(int *)(v22 + 48)];
  uint64_t v27 = v38;
  outlined init with copy of Either<LogisticRegressionClassifier<Float, String>, FullyConnectedNetworkClassifier<Float, String>>(v40, (uint64_t)v38, &demangling cache variable for type metadata for Either<LogisticRegressionClassifier<Float, String>, FullyConnectedNetworkClassifier<Float, String>>);
  outlined init with copy of Either<LogisticRegressionClassifier<Float, String>, FullyConnectedNetworkClassifier<Float, String>>(v39, (uint64_t)v26, &demangling cache variable for type metadata for Either<LogisticRegressionClassifierModel<Float, String>, FullyConnectedNetworkClassifierModel<Float, String>>);
  if (swift_getEnumCaseMultiPayload(v38, v16) != 1)
  {
    outlined init with copy of Either<LogisticRegressionClassifier<Float, String>, FullyConnectedNetworkClassifier<Float, String>>((uint64_t)v38, (uint64_t)v38, &demangling cache variable for type metadata for Either<LogisticRegressionClassifier<Float, String>, FullyConnectedNetworkClassifier<Float, String>>);
    uint64_t v33 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Either<LogisticRegressionClassifierModel<Float, String>, FullyConnectedNetworkClassifierModel<Float, String>>);
    if (swift_getEnumCaseMultiPayload(v26, v33) != 1)
    {
      uint64_t v34 = v53;
      (*(void (**)(unsigned char *, unsigned char *, uint64_t))(v54 + 32))(v55, v38, v53);
      uint64_t v35 = v43;
      (*(void (**)(unsigned char *, unsigned char *, uint64_t))(v49 + 32))(v43, v26, v50);
      LogisticRegressionClassifier.encodeWithOptimizer(_:to:)(v35, v46, v34);
      (*(void (**)(unsigned char *, uint64_t))(v49 + 8))(v35, v50);
      (*(void (**)(unsigned char *, uint64_t))(v54 + 8))(v55, v34);
      return outlined destroy of Either<LogisticRegressionClassifier<Float, String>, FullyConnectedNetworkClassifier<Float, String>>((uint64_t)v27, &demangling cache variable for type metadata for Either<LogisticRegressionClassifier<Float, String>, FullyConnectedNetworkClassifier<Float, String>>);
    }
    uint64_t v37 = v38;
LABEL_9:
    (*(void (**)(unsigned char *, uint64_t))(v54 + 8))(v37, v53);
    _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, 0xD00000000000002FLL, "Classifier.Classifier.swift" + 0x8000000000000000, "CreateML/MLImageClassifier.Classifier.swift", 43, 2, 143, 0);
    BUG();
  }
  uint64_t v55 = v38;
  uint64_t v28 = (uint64_t)v44;
  outlined init with copy of Either<LogisticRegressionClassifier<Float, String>, FullyConnectedNetworkClassifier<Float, String>>((uint64_t)v38, (uint64_t)v44, &demangling cache variable for type metadata for Either<LogisticRegressionClassifier<Float, String>, FullyConnectedNetworkClassifier<Float, String>>);
  uint64_t v29 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Either<LogisticRegressionClassifierModel<Float, String>, FullyConnectedNetworkClassifierModel<Float, String>>);
  if (swift_getEnumCaseMultiPayload(v26, v29) != 1)
  {
    uint64_t v54 = v52;
    uint64_t v53 = v51;
    uint64_t v37 = (unsigned char *)v28;
    goto LABEL_9;
  }
  uint64_t v30 = v42;
  uint64_t v31 = v51;
  (*(void (**)(unsigned char *, uint64_t, uint64_t))(v52 + 32))(v42, v28, v51);
  uint64_t v32 = v41;
  (*(void (**)(unsigned char *, unsigned char *, uint64_t))(v47 + 32))(v41, v26, v48);
  FullyConnectedNetworkClassifier.encodeWithOptimizer(_:to:)(v32, v46, v31);
  (*(void (**)(unsigned char *, uint64_t))(v47 + 8))(v32, v48);
  (*(void (**)(unsigned char *, uint64_t))(v52 + 8))(v30, v31);
  uint64_t v27 = v55;
  return outlined destroy of Either<LogisticRegressionClassifier<Float, String>, FullyConnectedNetworkClassifier<Float, String>>((uint64_t)v27, &demangling cache variable for type metadata for Either<LogisticRegressionClassifier<Float, String>, FullyConnectedNetworkClassifier<Float, String>>);
}

uint64_t MLImageClassifier.Classifier.decode(from:)(uint64_t a1, void (*a2)(uint64_t, uint64_t), void (*a3)(uint64_t, uint64_t))
{
  v41 = a3;
  uint64_t v42 = a2;
  uint64_t v55 = v4;
  uint64_t v40 = v5;
  uint64_t v56 = a1;
  uint64_t v48 = v3;
  uint64_t v50 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for FullyConnectedNetworkClassifierModel<Float, String>);
  uint64_t v49 = *(void *)(v50 - 8);
  int64_t v6 = *(void *)(v49 + 64);
  int64_t v7 = alloca(v6);
  uint64_t v8 = alloca(v6);
  uint64_t v57 = &v40;
  uint64_t v44 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for FullyConnectedNetworkClassifier<Float, String>);
  uint64_t v43 = *(void *)(v44 - 8);
  int64_t v9 = *(void *)(v43 + 64);
  int64_t v10 = alloca(v9);
  uint64_t v11 = alloca(v9);
  uint64_t v45 = &v40;
  uint64_t v51 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for LogisticRegressionClassifierModel<Float, String>);
  uint64_t v52 = *(void *)(v51 - 8);
  int64_t v12 = *(void *)(v52 + 64);
  int64_t v13 = alloca(v12);
  uint64_t v14 = alloca(v12);
  v58 = &v40;
  uint64_t v59 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Either<LogisticRegressionClassifierModel<Float, String>, FullyConnectedNetworkClassifierModel<Float, String>>);
  int64_t v15 = *(void *)(*(void *)(v59 - 8) + 64);
  uint64_t v16 = alloca(v15);
  int64_t v17 = alloca(v15);
  uint64_t v54 = &v40;
  uint64_t v18 = alloca(v15);
  unint64_t v19 = alloca(v15);
  uint64_t v53 = &v40;
  uint64_t v20 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for LogisticRegressionClassifier<Float, String>);
  uint64_t v46 = *(void *)(v20 - 8);
  int64_t v21 = *(void *)(v46 + 64);
  uint64_t v22 = alloca(v21);
  int64_t v23 = alloca(v21);
  uint64_t v47 = &v40;
  uint64_t v24 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Either<LogisticRegressionClassifier<Float, String>, FullyConnectedNetworkClassifier<Float, String>>);
  int64_t v25 = *(void *)(*(void *)(v24 - 8) + 64);
  uint64_t v26 = alloca(v25);
  uint64_t v27 = alloca(v25);
  outlined init with copy of Either<LogisticRegressionClassifier<Float, String>, FullyConnectedNetworkClassifier<Float, String>>(v40, (uint64_t)&v40, &demangling cache variable for type metadata for Either<LogisticRegressionClassifier<Float, String>, FullyConnectedNetworkClassifier<Float, String>>);
  if (swift_getEnumCaseMultiPayload(&v40, v24) == 1)
  {
    uint64_t v28 = v45;
    uint64_t v29 = v44;
    uint64_t v30 = v43;
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(v43 + 32))(v45, &v40, v44);
    uint64_t v31 = v55;
    v41(v56, v29);
    uint64_t result = (*(uint64_t (**)(uint64_t *, uint64_t))(v30 + 8))(v28, v29);
    if (v31) {
      return result;
    }
    uint64_t v33 = (uint64_t)v54;
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(v49 + 32))(v54, v57, v50);
    uint64_t v34 = 1;
    uint64_t v35 = v33;
    uint64_t v36 = v59;
  }
  else
  {
    uint64_t v37 = v47;
    uint64_t v38 = v46;
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(v46 + 32))(v47, &v40, v20);
    uint64_t v39 = v55;
    v42(v56, v20);
    uint64_t result = (*(uint64_t (**)(uint64_t *, uint64_t))(v38 + 8))(v37, v20);
    if (v39) {
      return result;
    }
    uint64_t v33 = (uint64_t)v53;
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(v52 + 32))(v53, v58, v51);
    uint64_t v35 = v33;
    uint64_t v36 = v59;
    uint64_t v34 = 0;
  }
  swift_storeEnumTagMultiPayload(v35, v36, v34);
  return outlined init with take of Either<LogisticRegressionClassifierModel<Float, String>, FullyConnectedNetworkClassifierModel<Float, String>>(v33, v48);
}

uint64_t protocol witness for UpdatableSupervisedEstimator.makeTransformer() in conformance MLImageClassifier.Classifier()
{
  return MLImageClassifier.Classifier.makeTransformer()();
}

uint64_t protocol witness for UpdatableSupervisedEstimator.update<A>(_:with:eventHandler:) in conformance MLImageClassifier.Classifier(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  int64_t v9 = (void *)swift_task_alloc(dword_3A3824);
  *(void *)(v6 + 16) = v9;
  *int64_t v9 = v6;
  v9[1] = protocol witness for SupervisedEstimator.fitted<A>(to:eventHandler:) in conformance MLImageClassifier.Classifier;
  retaddr = v13;
  return MLImageClassifier.Classifier.update<A>(_:with:eventHandler:)(a1, a2, a3, a4, a5, a6);
}

uint64_t protocol witness for UpdatableSupervisedEstimator.encodeWithOptimizer(_:to:) in conformance MLImageClassifier.Classifier(uint64_t a1, uint64_t a2)
{
  return MLImageClassifier.Classifier.encodeWithOptimizer(_:to:)(a1, a2);
}

uint64_t protocol witness for UpdatableSupervisedEstimator.decodeWithOptimizer(from:) in conformance MLImageClassifier.Classifier(uint64_t a1)
{
  return MLImageClassifier.Classifier.decode(from:)(a1, (void (*)(uint64_t, uint64_t))&LogisticRegressionClassifier.decodeWithOptimizer(from:), (void (*)(uint64_t, uint64_t))&FullyConnectedNetworkClassifier.decodeWithOptimizer(from:));
}

uint64_t NLLanguage.rawValue.getter()
{
  return static String._unconditionallyBridgeFromObjectiveC(_:)();
}

uint64_t protocol witness for RawRepresentable.init(rawValue:) in conformance MLMultiArrayDataType(uint64_t *a1)
{
  uint64_t v2 = v1;
  uint64_t result = MLMultiArrayDataType.init(rawValue:)(*a1);
  *(void *)uint64_t v2 = result;
  *(unsigned char *)(v2 + 8) = v4 & 1;
  return result;
}

uint64_t MLMultiArrayDataType.init(rawValue:)(uint64_t a1)
{
  return a1;
}

uint64_t protocol witness for RawRepresentable.rawValue.getter in conformance MLMultiArrayDataType()
{
  uint64_t v2 = v0;
  uint64_t result = specialized _finalizeUninitializedArray<A>(_:)(*v1);
  uint64_t *v2 = result;
  return result;
}

uint64_t protocol witness for static _ObjectiveCBridgeable._forceBridgeFromObjectiveC(_:result:) in conformance NSFileAttributeKey(uint64_t a1, id *a2)
{
  return specialized static _SwiftNewtypeWrapper<>._forceBridgeFromObjectiveC(_:result:)(a1, a2);
}

uint64_t protocol witness for static _ObjectiveCBridgeable._conditionallyBridgeFromObjectiveC(_:result:) in conformance NSFileAttributeKey(uint64_t a1, id *a2)
{
  return specialized static _SwiftNewtypeWrapper<>._conditionallyBridgeFromObjectiveC(_:result:)(a1, a2);
}

uint64_t specialized _SwiftNewtypeWrapper<>._bridgeToObjectiveC()(uint64_t a1, uint64_t (*a2)(uint64_t, uint64_t))
{
  uint64_t v2 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v4 = v3;
  uint64_t v5 = a2(v2, v3);
  swift_bridgeObjectRelease(v4);
  return v5;
}

uint64_t specialized _SwiftNewtypeWrapper<>.hash(into:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = static String._unconditionallyBridgeFromObjectiveC(_:)(a2);
  uint64_t v4 = v3;
  String.hash(into:)(a1, v2);
  return swift_bridgeObjectRelease(v4);
}

Swift::Int specialized _SwiftNewtypeWrapper<>._rawHashValue(seed:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = static String._unconditionallyBridgeFromObjectiveC(_:)(a2);
  uint64_t v4 = v3;
  Hasher.init(_seed:)(a1);
  String.hash(into:)(v7, v2);
  Swift::Int v5 = Hasher._finalize()();
  swift_bridgeObjectRelease(v4);
  return v5;
}

uint64_t protocol witness for _ObjectiveCBridgeable._bridgeToObjectiveC() in conformance VNImageOption()
{
  return specialized _SwiftNewtypeWrapper<>._bridgeToObjectiveC()(*v0, (uint64_t (*)(uint64_t, uint64_t))&String._bridgeToObjectiveC());
}

uint64_t protocol witness for Hashable.hashValue.getter in conformance VNImageOption()
{
  return specialized _SwiftNewtypeWrapper<>._bridgeToObjectiveC()(*v0, (uint64_t (*)(uint64_t, uint64_t))&String.hashValue.getter);
}

uint64_t protocol witness for Hashable.hash(into:) in conformance VNImageOption(uint64_t a1)
{
  return specialized _SwiftNewtypeWrapper<>.hash(into:)(a1, *v1);
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance VNImageOption(uint64_t a1)
{
  return specialized _SwiftNewtypeWrapper<>._rawHashValue(seed:)(a1, *v1);
}

NSString protocol witness for static _ObjectiveCBridgeable._unconditionallyBridgeFromObjectiveC(_:) in conformance NLLanguage(uint64_t a1)
{
  uint64_t v2 = v1;
  NSString result = specialized static _SwiftNewtypeWrapper<>._unconditionallyBridgeFromObjectiveC(_:)(a1);
  void *v2 = result;
  return result;
}

uint64_t protocol witness for Hashable.hash(into:) in conformance NLLanguage(uint64_t a1)
{
  return specialized _SwiftNewtypeWrapper<>.hash(into:)(a1, *v1);
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance NLLanguage(uint64_t a1)
{
  return specialized _SwiftNewtypeWrapper<>._rawHashValue(seed:)(a1, *v1);
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance NLLanguage(uint64_t *a1, uint64_t *a2)
{
  return specialized == infix<A>(_:_:)(*a1, *a2);
}

uint64_t protocol witness for Hashable.hashValue.getter in conformance CFStringRef(uint64_t a1)
{
  uint64_t WitnessTable = swift_getWitnessTable(&protocol conformance descriptor for CFStringRef, a1);
  return _CFObject.hashValue.getter(a1, WitnessTable);
}

uint64_t protocol witness for Hashable.hash(into:) in conformance CFStringRef(uint64_t a1, uint64_t a2)
{
  uint64_t WitnessTable = swift_getWitnessTable(&protocol conformance descriptor for CFStringRef, a2);
  return _CFObject.hash(into:)(a1, a2, WitnessTable);
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance CFStringRef(uint64_t a1, uint64_t a2)
{
  Hasher.init(_seed:)(a1);
  uint64_t WitnessTable = swift_getWitnessTable(&protocol conformance descriptor for CFStringRef, a2);
  _CFObject.hash(into:)(v4, a2, WitnessTable);
  return Hasher._finalize()();
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance NSFileAttributeKey(uint64_t *a1, uint64_t *a2)
{
  return specialized == infix<A>(_:_:)(*a1, *a2);
}

uint64_t protocol witness for RawRepresentable.init(rawValue:) in conformance NLLanguage(uint64_t a1)
{
  return protocol witness for RawRepresentable.init(rawValue:) in conformance NLLanguage(a1);
}

{
  void *v1;
  void *v2;
  uint64_t v3;
  NSString v4;
  uint64_t result;

  uint64_t v2 = v1;
  uint64_t v3 = *(void *)(a1 + 8);
  uint64_t v4 = String._bridgeToObjectiveC()();
  NSString result = swift_bridgeObjectRelease(v3);
  void *v2 = v4;
  return result;
}

uint64_t protocol witness for RawRepresentable.rawValue.getter in conformance NLLanguage()
{
  uint64_t v1 = v0;
  uint64_t result = NLLanguage.rawValue.getter();
  *uint64_t v1 = result;
  v1[1] = v3;
  return result;
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance CFStringRef(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v4 = *a1;
  uint64_t v5 = *a2;
  uint64_t WitnessTable = swift_getWitnessTable(&protocol conformance descriptor for CFStringRef, a3);
  return static _CFObject.== infix(_:_:)(v4, v5, a3, WitnessTable);
}

uint64_t protocol witness for _HasCustomAnyHashableRepresentation._toCustomAnyHashable() in conformance NSFileAttributeKey(uint64_t a1)
{
  uint64_t v1 = lazy protocol witness table accessor for type VNImageOption and conformance VNImageOption(&lazy protocol witness table cache variable for type NSFileAttributeKey and conformance NSFileAttributeKey, type metadata accessor for NSFileAttributeKey, (uint64_t)&protocol conformance descriptor for NSFileAttributeKey);
  uint64_t v2 = lazy protocol witness table accessor for type VNImageOption and conformance VNImageOption(&lazy protocol witness table cache variable for type NSFileAttributeKey and conformance NSFileAttributeKey, type metadata accessor for NSFileAttributeKey, (uint64_t)&protocol conformance descriptor for NSFileAttributeKey);
  return _SwiftNewtypeWrapper<>._toCustomAnyHashable()(a1, v1, v2, &protocol witness table for String);
}

uint64_t protocol witness for _HasCustomAnyHashableRepresentation._toCustomAnyHashable() in conformance VNImageOption(uint64_t a1)
{
  uint64_t v1 = lazy protocol witness table accessor for type VNImageOption and conformance VNImageOption(&lazy protocol witness table cache variable for type VNImageOption and conformance VNImageOption, type metadata accessor for VNImageOption, (uint64_t)&protocol conformance descriptor for VNImageOption);
  uint64_t v2 = lazy protocol witness table accessor for type VNImageOption and conformance VNImageOption(&lazy protocol witness table cache variable for type VNImageOption and conformance VNImageOption, type metadata accessor for VNImageOption, (uint64_t)&protocol conformance descriptor for VNImageOption);
  return _SwiftNewtypeWrapper<>._toCustomAnyHashable()(a1, v1, v2, &protocol witness table for String);
}

uint64_t base witness table accessor for RawRepresentable in VNImageOption()
{
  return lazy protocol witness table accessor for type VNImageOption and conformance VNImageOption(&lazy protocol witness table cache variable for type VNImageOption and conformance VNImageOption, type metadata accessor for VNImageOption, (uint64_t)&protocol conformance descriptor for VNImageOption);
}

uint64_t base witness table accessor for _HasCustomAnyHashableRepresentation in VNImageOption()
{
  return lazy protocol witness table accessor for type VNImageOption and conformance VNImageOption(&lazy protocol witness table cache variable for type VNImageOption and conformance VNImageOption, type metadata accessor for VNImageOption, (uint64_t)&protocol conformance descriptor for VNImageOption);
}

uint64_t lazy protocol witness table accessor for type VNImageOption and conformance VNImageOption(uint64_t *a1, uint64_t (*a2)(uint64_t), uint64_t a3)
{
  uint64_t result = *a1;
  if (!*a1)
  {
    uint64_t v5 = a2(255);
    uint64_t result = swift_getWitnessTable(a3, v5);
    *a1 = result;
  }
  return result;
}

uint64_t protocol witness for _HasCustomAnyHashableRepresentation._toCustomAnyHashable() in conformance MLFeatureValueImageOption(uint64_t a1)
{
  uint64_t v1 = lazy protocol witness table accessor for type VNImageOption and conformance VNImageOption(&lazy protocol witness table cache variable for type MLFeatureValueImageOption and conformance MLFeatureValueImageOption, type metadata accessor for MLFeatureValueImageOption, (uint64_t)&protocol conformance descriptor for MLFeatureValueImageOption);
  uint64_t v2 = lazy protocol witness table accessor for type VNImageOption and conformance VNImageOption(&lazy protocol witness table cache variable for type MLFeatureValueImageOption and conformance MLFeatureValueImageOption, type metadata accessor for MLFeatureValueImageOption, (uint64_t)&protocol conformance descriptor for MLFeatureValueImageOption);
  return _SwiftNewtypeWrapper<>._toCustomAnyHashable()(a1, v1, v2, &protocol witness table for String);
}

uint64_t protocol witness for _HasCustomAnyHashableRepresentation._toCustomAnyHashable() in conformance CIImageRepresentationOption(uint64_t a1)
{
  uint64_t v1 = lazy protocol witness table accessor for type VNImageOption and conformance VNImageOption(&lazy protocol witness table cache variable for type CIImageRepresentationOption and conformance CIImageRepresentationOption, type metadata accessor for CIImageRepresentationOption, (uint64_t)&protocol conformance descriptor for CIImageRepresentationOption);
  uint64_t v2 = lazy protocol witness table accessor for type VNImageOption and conformance VNImageOption(&lazy protocol witness table cache variable for type CIImageRepresentationOption and conformance CIImageRepresentationOption, type metadata accessor for CIImageRepresentationOption, (uint64_t)&protocol conformance descriptor for CIImageRepresentationOption);
  return _SwiftNewtypeWrapper<>._toCustomAnyHashable()(a1, v1, v2, &protocol witness table for String);
}

uint64_t protocol witness for _HasCustomAnyHashableRepresentation._toCustomAnyHashable() in conformance NLLanguage(uint64_t a1)
{
  uint64_t v1 = lazy protocol witness table accessor for type VNImageOption and conformance VNImageOption(&lazy protocol witness table cache variable for type NLLanguage and conformance NLLanguage, type metadata accessor for NLLanguage, (uint64_t)&protocol conformance descriptor for NLLanguage);
  uint64_t v2 = lazy protocol witness table accessor for type VNImageOption and conformance VNImageOption(&lazy protocol witness table cache variable for type NLLanguage and conformance NLLanguage, type metadata accessor for NLLanguage, (uint64_t)&protocol conformance descriptor for NLLanguage);
  return _SwiftNewtypeWrapper<>._toCustomAnyHashable()(a1, v1, v2, &protocol witness table for String);
}

uint64_t base witness table accessor for RawRepresentable in NLLanguage()
{
  return lazy protocol witness table accessor for type VNImageOption and conformance VNImageOption(&lazy protocol witness table cache variable for type NLLanguage and conformance NLLanguage, type metadata accessor for NLLanguage, (uint64_t)&protocol conformance descriptor for NLLanguage);
}

uint64_t base witness table accessor for _HasCustomAnyHashableRepresentation in NLLanguage()
{
  return lazy protocol witness table accessor for type VNImageOption and conformance VNImageOption(&lazy protocol witness table cache variable for type NLLanguage and conformance NLLanguage, type metadata accessor for NLLanguage, (uint64_t)&protocol conformance descriptor for NLLanguage);
}

uint64_t base witness table accessor for Equatable in NLLanguage()
{
  return lazy protocol witness table accessor for type VNImageOption and conformance VNImageOption(&lazy protocol witness table cache variable for type NLLanguage and conformance NLLanguage, type metadata accessor for NLLanguage, (uint64_t)&protocol conformance descriptor for NLLanguage);
}

uint64_t protocol witness for _HasCustomAnyHashableRepresentation._toCustomAnyHashable() in conformance NLModelEmbeddingType(uint64_t a1)
{
  uint64_t v1 = lazy protocol witness table accessor for type VNImageOption and conformance VNImageOption(&lazy protocol witness table cache variable for type NLModelEmbeddingType and conformance NLModelEmbeddingType, type metadata accessor for NLModelEmbeddingType, (uint64_t)&protocol conformance descriptor for NLModelEmbeddingType);
  uint64_t v2 = lazy protocol witness table accessor for type VNImageOption and conformance VNImageOption(&lazy protocol witness table cache variable for type NLModelEmbeddingType and conformance NLModelEmbeddingType, type metadata accessor for NLModelEmbeddingType, (uint64_t)&protocol conformance descriptor for NLModelEmbeddingType);
  return _SwiftNewtypeWrapper<>._toCustomAnyHashable()(a1, v1, v2, &protocol witness table for String);
}

uint64_t protocol witness for _HasCustomAnyHashableRepresentation._toCustomAnyHashable() in conformance NSAttributedStringKey(uint64_t a1)
{
  uint64_t v1 = lazy protocol witness table accessor for type VNImageOption and conformance VNImageOption(&lazy protocol witness table cache variable for type NSAttributedStringKey and conformance NSAttributedStringKey, type metadata accessor for NSAttributedStringKey, (uint64_t)&protocol conformance descriptor for NSAttributedStringKey);
  uint64_t v2 = lazy protocol witness table accessor for type VNImageOption and conformance VNImageOption(&lazy protocol witness table cache variable for type NSAttributedStringKey and conformance NSAttributedStringKey, type metadata accessor for NSAttributedStringKey, (uint64_t)&protocol conformance descriptor for NSAttributedStringKey);
  return _SwiftNewtypeWrapper<>._toCustomAnyHashable()(a1, v1, v2, &protocol witness table for String);
}

uint64_t protocol witness for _HasCustomAnyHashableRepresentation._toCustomAnyHashable() in conformance NLModelConfigurationOptionsKey(uint64_t a1)
{
  uint64_t v1 = lazy protocol witness table accessor for type VNImageOption and conformance VNImageOption(&lazy protocol witness table cache variable for type NLModelConfigurationOptionsKey and conformance NLModelConfigurationOptionsKey, type metadata accessor for NLModelConfigurationOptionsKey, (uint64_t)&protocol conformance descriptor for NLModelConfigurationOptionsKey);
  uint64_t v2 = lazy protocol witness table accessor for type VNImageOption and conformance VNImageOption(&lazy protocol witness table cache variable for type NLModelConfigurationOptionsKey and conformance NLModelConfigurationOptionsKey, type metadata accessor for NLModelConfigurationOptionsKey, (uint64_t)&protocol conformance descriptor for NLModelConfigurationOptionsKey);
  return _SwiftNewtypeWrapper<>._toCustomAnyHashable()(a1, v1, v2, &protocol witness table for String);
}

uint64_t protocol witness for _HasCustomAnyHashableRepresentation._toCustomAnyHashable() in conformance NSURLResourceKey(uint64_t a1)
{
  uint64_t v1 = lazy protocol witness table accessor for type VNImageOption and conformance VNImageOption(&lazy protocol witness table cache variable for type NSURLResourceKey and conformance NSURLResourceKey, type metadata accessor for NSURLResourceKey, (uint64_t)&protocol conformance descriptor for NSURLResourceKey);
  uint64_t v2 = lazy protocol witness table accessor for type VNImageOption and conformance VNImageOption(&lazy protocol witness table cache variable for type NSURLResourceKey and conformance NSURLResourceKey, type metadata accessor for NSURLResourceKey, (uint64_t)&protocol conformance descriptor for NSURLResourceKey);
  return _SwiftNewtypeWrapper<>._toCustomAnyHashable()(a1, v1, v2, &protocol witness table for String);
}

uint64_t protocol witness for _HasCustomAnyHashableRepresentation._toCustomAnyHashable() in conformance NSProgressUserInfoKey(uint64_t a1)
{
  uint64_t v1 = lazy protocol witness table accessor for type VNImageOption and conformance VNImageOption(&lazy protocol witness table cache variable for type NSProgressUserInfoKey and conformance NSProgressUserInfoKey, type metadata accessor for NSProgressUserInfoKey, (uint64_t)&protocol conformance descriptor for NSProgressUserInfoKey);
  uint64_t v2 = lazy protocol witness table accessor for type VNImageOption and conformance VNImageOption(&lazy protocol witness table cache variable for type NSProgressUserInfoKey and conformance NSProgressUserInfoKey, type metadata accessor for NSProgressUserInfoKey, (uint64_t)&protocol conformance descriptor for NSProgressUserInfoKey);
  return _SwiftNewtypeWrapper<>._toCustomAnyHashable()(a1, v1, v2, &protocol witness table for String);
}

uint64_t base witness table accessor for RawRepresentable in NSProgressUserInfoKey()
{
  return lazy protocol witness table accessor for type VNImageOption and conformance VNImageOption(&lazy protocol witness table cache variable for type NSProgressUserInfoKey and conformance NSProgressUserInfoKey, type metadata accessor for NSProgressUserInfoKey, (uint64_t)&protocol conformance descriptor for NSProgressUserInfoKey);
}

uint64_t base witness table accessor for _HasCustomAnyHashableRepresentation in NSProgressUserInfoKey()
{
  return lazy protocol witness table accessor for type VNImageOption and conformance VNImageOption(&lazy protocol witness table cache variable for type NSProgressUserInfoKey and conformance NSProgressUserInfoKey, type metadata accessor for NSProgressUserInfoKey, (uint64_t)&protocol conformance descriptor for NSProgressUserInfoKey);
}

void *associated type witness table accessor for SupervisedEstimator.Annotation : Equatable in MLImageClassifier.Classifier()
{
  return &protocol witness table for String;
}

uint64_t associated type witness table accessor for SupervisedEstimator.Transformer : Transformer in MLImageClassifier.Classifier()
{
  return lazy protocol witness table accessor for type VNImageOption and conformance VNImageOption(&lazy protocol witness table cache variable for type MLImageClassifier.Model and conformance MLImageClassifier.Model, type metadata accessor for MLImageClassifier.Model, (uint64_t)&protocol conformance descriptor for MLImageClassifier.Model);
}

uint64_t base witness table accessor for SupervisedEstimator in MLImageClassifier.Classifier()
{
  return lazy protocol witness table accessor for type VNImageOption and conformance VNImageOption(&lazy protocol witness table cache variable for type MLImageClassifier.Classifier and conformance MLImageClassifier.Classifier, type metadata accessor for MLImageClassifier.Classifier, (uint64_t)&protocol conformance descriptor for MLImageClassifier.Classifier);
}

uint64_t base witness table accessor for Equatable in NSProgressUserInfoKey()
{
  return lazy protocol witness table accessor for type VNImageOption and conformance VNImageOption(&lazy protocol witness table cache variable for type NSProgressUserInfoKey and conformance NSProgressUserInfoKey, type metadata accessor for NSProgressUserInfoKey, (uint64_t)&protocol conformance descriptor for NSProgressUserInfoKey);
}

uint64_t base witness table accessor for Equatable in VNImageOption()
{
  return lazy protocol witness table accessor for type VNImageOption and conformance VNImageOption(&lazy protocol witness table cache variable for type VNImageOption and conformance VNImageOption, type metadata accessor for VNImageOption, (uint64_t)&protocol conformance descriptor for VNImageOption);
}

uint64_t protocol witness for _HasCustomAnyHashableRepresentation._toCustomAnyHashable() in conformance VNRecognizedPointKey(uint64_t a1)
{
  uint64_t v1 = lazy protocol witness table accessor for type VNImageOption and conformance VNImageOption(&lazy protocol witness table cache variable for type VNRecognizedPointKey and conformance VNRecognizedPointKey, type metadata accessor for VNRecognizedPointKey, (uint64_t)&protocol conformance descriptor for VNRecognizedPointKey);
  uint64_t v2 = lazy protocol witness table accessor for type VNImageOption and conformance VNImageOption(&lazy protocol witness table cache variable for type VNRecognizedPointKey and conformance VNRecognizedPointKey, type metadata accessor for VNRecognizedPointKey, (uint64_t)&protocol conformance descriptor for VNRecognizedPointKey);
  return _SwiftNewtypeWrapper<>._toCustomAnyHashable()(a1, v1, v2, &protocol witness table for String);
}

uint64_t outlined init with copy of Either<LogisticRegressionClassifier<Float, String>, FullyConnectedNetworkClassifier<Float, String>>(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(a3);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v3 - 8) + 16))(a2, a1, v3);
  return a2;
}

uint64_t outlined destroy of Either<LogisticRegressionClassifier<Float, String>, FullyConnectedNetworkClassifier<Float, String>>(uint64_t a1, uint64_t *a2)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(a2);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t lazy protocol witness table accessor for type FullyConnectedNetworkClassifier<Float, String> and conformance FullyConnectedNetworkClassifier<A, B>(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t result = *a1;
  if (!*a1)
  {
    uint64_t v5 = __swift_instantiateConcreteTypeFromMangledNameAbstract(a2);
    uint64_t result = swift_getWitnessTable(a3, v5);
    *a1 = result;
  }
  return result;
}

uint64_t specialized == infix<A>(_:_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = static String._unconditionallyBridgeFromObjectiveC(_:)(a1);
  uint64_t v5 = v4;
  uint64_t v6 = static String._unconditionallyBridgeFromObjectiveC(_:)(a2);
  uint64_t v8 = v7;
  if (v3 != v6 || (LOBYTE(v2) = 1, uint64_t v9 = v5, v5 != v7))
  {
    unsigned int v2 = _stringCompareWithSmolCheck(_:_:expecting:)(v3, v5, v6, v7, 0);
    uint64_t v9 = v8;
  }
  swift_bridgeObjectRelease(v5);
  swift_bridgeObjectRelease(v9);
  return v2;
}

{
  return specialized == infix<A>(_:_:)(a1, a2);
}

uint64_t specialized static _SwiftNewtypeWrapper<>._conditionallyBridgeFromObjectiveC(_:result:)(uint64_t a1, id *a2)
{
  long long v6 = 0;
  unsigned int v2 = static String._conditionallyBridgeFromObjectiveC(_:result:)(a1, &v6);
  uint64_t v3 = *((void *)&v6 + 1);
  if (*((void *)&v6 + 1))
  {
    NSString v4 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease(v3);
  }
  else
  {
    NSString v4 = 0;
  }
  *a2 = v4;
  return v2;
}

uint64_t specialized static _SwiftNewtypeWrapper<>._forceBridgeFromObjectiveC(_:result:)(uint64_t a1, id *a2)
{
  long long v5 = 0;
  uint64_t result = static String._forceBridgeFromObjectiveC(_:result:)(a1, &v5);
  uint64_t v3 = *((void *)&v5 + 1);
  if (*((void *)&v5 + 1))
  {
    NSString v4 = String._bridgeToObjectiveC()();
    uint64_t result = swift_bridgeObjectRelease(v3);
  }
  else
  {
    NSString v4 = 0;
  }
  *a2 = v4;
  return result;
}

NSString specialized static _SwiftNewtypeWrapper<>._unconditionallyBridgeFromObjectiveC(_:)(uint64_t a1)
{
  static String._unconditionallyBridgeFromObjectiveC(_:)(a1);
  uint64_t v2 = v1;
  NSString v3 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(v2);
  return v3;
}

uint64_t outlined destroy of MLImageClassifier.FeatureExtractorType(uint64_t a1)
{
  uint64_t v1 = type metadata accessor for MLImageClassifier.FeatureExtractorType(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v1 - 8) + 8))(a1, v1);
  return a1;
}

uint64_t type metadata accessor for NSFileAttributeKey(uint64_t a1)
{
  return type metadata accessor for CGRect(a1, &lazy cache variable for type metadata for NSFileAttributeKey, (uint64_t)&unk_396A10);
}

uint64_t type metadata accessor for VNRecognizedPointKey(uint64_t a1)
{
  return type metadata accessor for CGRect(a1, &lazy cache variable for type metadata for VNRecognizedPointKey, (uint64_t)&unk_396A38);
}

uint64_t type metadata accessor for NSURLResourceKey(uint64_t a1)
{
  return type metadata accessor for CGRect(a1, &lazy cache variable for type metadata for NSURLResourceKey, (uint64_t)&unk_396A60);
}

uint64_t type metadata accessor for CFStringRef(uint64_t a1)
{
  return type metadata accessor for CGRect(a1, &lazy cache variable for type metadata for CFStringRef, (uint64_t)&unk_396A88);
}

uint64_t type metadata accessor for NLModelEmbeddingType(uint64_t a1)
{
  return type metadata accessor for CGRect(a1, &lazy cache variable for type metadata for NLModelEmbeddingType, (uint64_t)&unk_396AB8);
}

uint64_t type metadata accessor for NLModelConfigurationOptionsKey(uint64_t a1)
{
  return type metadata accessor for CGRect(a1, &lazy cache variable for type metadata for NLModelConfigurationOptionsKey, (uint64_t)&unk_396AE0);
}

uint64_t type metadata accessor for CFErrorRef(uint64_t a1)
{
  return type metadata accessor for CGRect(a1, &lazy cache variable for type metadata for CFErrorRef, (uint64_t)&unk_396B08);
}

uint64_t type metadata accessor for NSAttributedStringKey(uint64_t a1)
{
  return type metadata accessor for CGRect(a1, &lazy cache variable for type metadata for NSAttributedStringKey, (uint64_t)&unk_396B38);
}

uint64_t type metadata accessor for MLFeatureValueImageOption(uint64_t a1)
{
  return type metadata accessor for CGRect(a1, &lazy cache variable for type metadata for MLFeatureValueImageOption, (uint64_t)&unk_396B60);
}

uint64_t type metadata accessor for CIImageRepresentationOption(uint64_t a1)
{
  return type metadata accessor for CGRect(a1, &lazy cache variable for type metadata for CIImageRepresentationOption, (uint64_t)&unk_396B88);
}

uint64_t type metadata accessor for CGImageRef(uint64_t a1)
{
  return type metadata accessor for CGRect(a1, &lazy cache variable for type metadata for CGImageRef, (uint64_t)&unk_396BB0);
}

uint64_t type metadata accessor for MLMultiArrayDataType(uint64_t a1)
{
  return type metadata accessor for CGRect(a1, &lazy cache variable for type metadata for MLMultiArrayDataType, (uint64_t)&unk_396BE0);
}

uint64_t getEnumTagSinglePayload for CGSize(uint64_t a1, int a2)
{
  uint64_t result = 0;
  if (a2)
  {
    if (*(unsigned char *)(a1 + 16)) {
      return (*(_DWORD *)a1 + 1);
    }
  }
  return result;
}

void storeEnumTagSinglePayload for CGSize(uint64_t a1, int a2, int a3)
{
  if (!a2)
  {
    if (!a3) {
      return;
    }
    char v3 = 0;
    goto LABEL_6;
  }
  *(void *)(a1 + 8) = 0;
  *(void *)a1 = (a2 - 1);
  char v3 = 1;
  if (a3) {
LABEL_6:
  }
    *(unsigned char *)(a1 + 16) = v3;
}

uint64_t type metadata accessor for CGSize(uint64_t a1)
{
  return type metadata accessor for CGRect(a1, &lazy cache variable for type metadata for CGSize, (uint64_t)&unk_396C58);
}

uint64_t type metadata accessor for CGPoint(uint64_t a1)
{
  return type metadata accessor for CGRect(a1, &lazy cache variable for type metadata for CGPoint, (uint64_t)&unk_396CD8);
}

uint64_t type metadata accessor for CGRect(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  uint64_t result = *a2;
  if (!*a2)
  {
    uint64_t result = swift_getForeignTypeMetadata(a1, a3);
    if (!v4) {
      *a2 = result;
    }
  }
  return result;
}

uint64_t base witness table accessor for RawRepresentable in CIImageRepresentationOption()
{
  return lazy protocol witness table accessor for type VNImageOption and conformance VNImageOption(&lazy protocol witness table cache variable for type CIImageRepresentationOption and conformance CIImageRepresentationOption, type metadata accessor for CIImageRepresentationOption, (uint64_t)&protocol conformance descriptor for CIImageRepresentationOption);
}

uint64_t base witness table accessor for _HasCustomAnyHashableRepresentation in CIImageRepresentationOption()
{
  return lazy protocol witness table accessor for type VNImageOption and conformance VNImageOption(&lazy protocol witness table cache variable for type CIImageRepresentationOption and conformance CIImageRepresentationOption, type metadata accessor for CIImageRepresentationOption, (uint64_t)&protocol conformance descriptor for CIImageRepresentationOption);
}

uint64_t base witness table accessor for RawRepresentable in MLFeatureValueImageOption()
{
  return lazy protocol witness table accessor for type VNImageOption and conformance VNImageOption(&lazy protocol witness table cache variable for type MLFeatureValueImageOption and conformance MLFeatureValueImageOption, type metadata accessor for MLFeatureValueImageOption, (uint64_t)&protocol conformance descriptor for MLFeatureValueImageOption);
}

uint64_t base witness table accessor for _HasCustomAnyHashableRepresentation in MLFeatureValueImageOption()
{
  return lazy protocol witness table accessor for type VNImageOption and conformance VNImageOption(&lazy protocol witness table cache variable for type MLFeatureValueImageOption and conformance MLFeatureValueImageOption, type metadata accessor for MLFeatureValueImageOption, (uint64_t)&protocol conformance descriptor for MLFeatureValueImageOption);
}

uint64_t base witness table accessor for RawRepresentable in NSAttributedStringKey()
{
  return lazy protocol witness table accessor for type VNImageOption and conformance VNImageOption(&lazy protocol witness table cache variable for type NSAttributedStringKey and conformance NSAttributedStringKey, type metadata accessor for NSAttributedStringKey, (uint64_t)&protocol conformance descriptor for NSAttributedStringKey);
}

uint64_t base witness table accessor for _HasCustomAnyHashableRepresentation in NSAttributedStringKey()
{
  return lazy protocol witness table accessor for type VNImageOption and conformance VNImageOption(&lazy protocol witness table cache variable for type NSAttributedStringKey and conformance NSAttributedStringKey, type metadata accessor for NSAttributedStringKey, (uint64_t)&protocol conformance descriptor for NSAttributedStringKey);
}

uint64_t base witness table accessor for RawRepresentable in NLModelConfigurationOptionsKey()
{
  return lazy protocol witness table accessor for type VNImageOption and conformance VNImageOption(&lazy protocol witness table cache variable for type NLModelConfigurationOptionsKey and conformance NLModelConfigurationOptionsKey, type metadata accessor for NLModelConfigurationOptionsKey, (uint64_t)&protocol conformance descriptor for NLModelConfigurationOptionsKey);
}

uint64_t base witness table accessor for _HasCustomAnyHashableRepresentation in NLModelConfigurationOptionsKey()
{
  return lazy protocol witness table accessor for type VNImageOption and conformance VNImageOption(&lazy protocol witness table cache variable for type NLModelConfigurationOptionsKey and conformance NLModelConfigurationOptionsKey, type metadata accessor for NLModelConfigurationOptionsKey, (uint64_t)&protocol conformance descriptor for NLModelConfigurationOptionsKey);
}

uint64_t base witness table accessor for RawRepresentable in NLModelEmbeddingType()
{
  return lazy protocol witness table accessor for type VNImageOption and conformance VNImageOption(&lazy protocol witness table cache variable for type NLModelEmbeddingType and conformance NLModelEmbeddingType, type metadata accessor for NLModelEmbeddingType, (uint64_t)&protocol conformance descriptor for NLModelEmbeddingType);
}

uint64_t base witness table accessor for _HasCustomAnyHashableRepresentation in NLModelEmbeddingType()
{
  return lazy protocol witness table accessor for type VNImageOption and conformance VNImageOption(&lazy protocol witness table cache variable for type NLModelEmbeddingType and conformance NLModelEmbeddingType, type metadata accessor for NLModelEmbeddingType, (uint64_t)&protocol conformance descriptor for NLModelEmbeddingType);
}

uint64_t base witness table accessor for Equatable in NLModelEmbeddingType()
{
  return lazy protocol witness table accessor for type VNImageOption and conformance VNImageOption(&lazy protocol witness table cache variable for type NLModelEmbeddingType and conformance NLModelEmbeddingType, type metadata accessor for NLModelEmbeddingType, (uint64_t)&protocol conformance descriptor for NLModelEmbeddingType);
}

uint64_t base witness table accessor for Hashable in CFStringRef()
{
  return lazy protocol witness table accessor for type VNImageOption and conformance VNImageOption(&lazy protocol witness table cache variable for type CFStringRef and conformance CFStringRef, type metadata accessor for CFStringRef, (uint64_t)&protocol conformance descriptor for CFStringRef);
}

uint64_t base witness table accessor for RawRepresentable in NSURLResourceKey()
{
  return lazy protocol witness table accessor for type VNImageOption and conformance VNImageOption(&lazy protocol witness table cache variable for type NSURLResourceKey and conformance NSURLResourceKey, type metadata accessor for NSURLResourceKey, (uint64_t)&protocol conformance descriptor for NSURLResourceKey);
}

uint64_t base witness table accessor for _HasCustomAnyHashableRepresentation in NSURLResourceKey()
{
  return lazy protocol witness table accessor for type VNImageOption and conformance VNImageOption(&lazy protocol witness table cache variable for type NSURLResourceKey and conformance NSURLResourceKey, type metadata accessor for NSURLResourceKey, (uint64_t)&protocol conformance descriptor for NSURLResourceKey);
}

uint64_t base witness table accessor for RawRepresentable in VNRecognizedPointKey()
{
  return lazy protocol witness table accessor for type VNImageOption and conformance VNImageOption(&lazy protocol witness table cache variable for type VNRecognizedPointKey and conformance VNRecognizedPointKey, type metadata accessor for VNRecognizedPointKey, (uint64_t)&protocol conformance descriptor for VNRecognizedPointKey);
}

uint64_t base witness table accessor for _HasCustomAnyHashableRepresentation in VNRecognizedPointKey()
{
  return lazy protocol witness table accessor for type VNImageOption and conformance VNImageOption(&lazy protocol witness table cache variable for type VNRecognizedPointKey and conformance VNRecognizedPointKey, type metadata accessor for VNRecognizedPointKey, (uint64_t)&protocol conformance descriptor for VNRecognizedPointKey);
}

uint64_t base witness table accessor for RawRepresentable in NSFileAttributeKey()
{
  return lazy protocol witness table accessor for type VNImageOption and conformance VNImageOption(&lazy protocol witness table cache variable for type NSFileAttributeKey and conformance NSFileAttributeKey, type metadata accessor for NSFileAttributeKey, (uint64_t)&protocol conformance descriptor for NSFileAttributeKey);
}

uint64_t base witness table accessor for _HasCustomAnyHashableRepresentation in NSFileAttributeKey()
{
  return lazy protocol witness table accessor for type VNImageOption and conformance VNImageOption(&lazy protocol witness table cache variable for type NSFileAttributeKey and conformance NSFileAttributeKey, type metadata accessor for NSFileAttributeKey, (uint64_t)&protocol conformance descriptor for NSFileAttributeKey);
}

uint64_t base witness table accessor for Equatable in NSFileAttributeKey()
{
  return lazy protocol witness table accessor for type VNImageOption and conformance VNImageOption(&lazy protocol witness table cache variable for type NSFileAttributeKey and conformance NSFileAttributeKey, type metadata accessor for NSFileAttributeKey, (uint64_t)&protocol conformance descriptor for NSFileAttributeKey);
}

uint64_t base witness table accessor for Equatable in VNRecognizedPointKey()
{
  return lazy protocol witness table accessor for type VNImageOption and conformance VNImageOption(&lazy protocol witness table cache variable for type VNRecognizedPointKey and conformance VNRecognizedPointKey, type metadata accessor for VNRecognizedPointKey, (uint64_t)&protocol conformance descriptor for VNRecognizedPointKey);
}

uint64_t base witness table accessor for Equatable in NSURLResourceKey()
{
  return lazy protocol witness table accessor for type VNImageOption and conformance VNImageOption(&lazy protocol witness table cache variable for type NSURLResourceKey and conformance NSURLResourceKey, type metadata accessor for NSURLResourceKey, (uint64_t)&protocol conformance descriptor for NSURLResourceKey);
}

uint64_t base witness table accessor for Equatable in CFStringRef()
{
  return lazy protocol witness table accessor for type VNImageOption and conformance VNImageOption(&lazy protocol witness table cache variable for type CFStringRef and conformance CFStringRef, type metadata accessor for CFStringRef, (uint64_t)&protocol conformance descriptor for CFStringRef);
}

uint64_t base witness table accessor for Equatable in NLModelConfigurationOptionsKey()
{
  return lazy protocol witness table accessor for type VNImageOption and conformance VNImageOption(&lazy protocol witness table cache variable for type NLModelConfigurationOptionsKey and conformance NLModelConfigurationOptionsKey, type metadata accessor for NLModelConfigurationOptionsKey, (uint64_t)&protocol conformance descriptor for NLModelConfigurationOptionsKey);
}

uint64_t base witness table accessor for Equatable in NSAttributedStringKey()
{
  return lazy protocol witness table accessor for type VNImageOption and conformance VNImageOption(&lazy protocol witness table cache variable for type NSAttributedStringKey and conformance NSAttributedStringKey, type metadata accessor for NSAttributedStringKey, (uint64_t)&protocol conformance descriptor for NSAttributedStringKey);
}

uint64_t base witness table accessor for Equatable in MLFeatureValueImageOption()
{
  return lazy protocol witness table accessor for type VNImageOption and conformance VNImageOption(&lazy protocol witness table cache variable for type MLFeatureValueImageOption and conformance MLFeatureValueImageOption, type metadata accessor for MLFeatureValueImageOption, (uint64_t)&protocol conformance descriptor for MLFeatureValueImageOption);
}

uint64_t base witness table accessor for Equatable in CIImageRepresentationOption()
{
  return lazy protocol witness table accessor for type VNImageOption and conformance VNImageOption(&lazy protocol witness table cache variable for type CIImageRepresentationOption and conformance CIImageRepresentationOption, type metadata accessor for CIImageRepresentationOption, (uint64_t)&protocol conformance descriptor for CIImageRepresentationOption);
}

void storeEnumTagSinglePayload for CGPoint(uint64_t a1, int a2, int a3)
{
}

uint64_t protocol witness for _ObjectiveCBridgeable._bridgeToObjectiveC() in conformance NSFileAttributeKey()
{
  return protocol witness for _ObjectiveCBridgeable._bridgeToObjectiveC() in conformance VNImageOption();
}

uint64_t protocol witness for Hashable.hashValue.getter in conformance NSFileAttributeKey()
{
  return protocol witness for Hashable.hashValue.getter in conformance VNImageOption();
}

uint64_t getEnumTagSinglePayload for CGPoint(uint64_t a1, int a2)
{
  return getEnumTagSinglePayload for CGSize(a1, a2);
}

uint64_t protocol witness for SupervisedEstimator.fitted<A>(to:eventHandler:) in conformance MLImageClassifier.Classifier()
{
  return protocol witness for SupervisedEstimator.fitted<A, B>(to:validateOn:eventHandler:) in conformance MLImageClassifier.Classifier();
}

uint64_t protocol witness for RawRepresentable.rawValue.getter in conformance NSFileAttributeKey()
{
  return protocol witness for RawRepresentable.rawValue.getter in conformance NLLanguage();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance NSFileAttributeKey(uint64_t a1)
{
  return protocol witness for Hashable.hash(into:) in conformance VNImageOption(a1);
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance NSFileAttributeKey(uint64_t a1)
{
  return protocol witness for Hashable._rawHashValue(seed:) in conformance VNImageOption(a1);
}

NSString protocol witness for static _ObjectiveCBridgeable._unconditionallyBridgeFromObjectiveC(_:) in conformance NSFileAttributeKey(uint64_t a1)
{
  return protocol witness for static _ObjectiveCBridgeable._unconditionallyBridgeFromObjectiveC(_:) in conformance NLLanguage(a1);
}

unint64_t __chkstk_darwin_llvm_probe(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, int a7, int a8, char a9)
{
  int64_t v10 = &a9;
  if (result >= 0x1000)
  {
    do
    {
      v10 -= 4096;
      result -= 4096;
    }
    while (result > 0x1000);
  }
  return result;
}

uint64_t *closure #1 in Tensor.doubleArray()(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v51 = v3;
  uint64_t v42 = a2;
  uint64_t v52 = a1;
  uint64_t v43 = type metadata accessor for TensorShape(0);
  uint64_t v44 = *(void *)(v43 - 8);
  int64_t v5 = *(void *)(v44 + 64);
  long long v6 = alloca(v5);
  uint64_t v7 = alloca(v5);
  uint64_t v45 = &v42;
  uint64_t v50 = type metadata accessor for FloatingPointRoundingRule(0);
  uint64_t v49 = *(void *)(v50 - 8);
  int64_t v8 = *(void *)(v49 + 64);
  uint64_t v9 = alloca(v8);
  int64_t v10 = alloca(v8);
  uint64_t v54 = &v42;
  uint64_t v47 = type metadata accessor for Tensor(0);
  uint64_t v46 = *(void *)(v47 - 8);
  int64_t v11 = *(void *)(v46 + 64);
  int64_t v12 = alloca(v11);
  int64_t v13 = alloca(v11);
  uint64_t v53 = &v42;
  uint64_t v14 = type metadata accessor for ScalarType(0);
  uint64_t v15 = *(void *)(v14 - 8);
  int64_t v16 = *(void *)(v15 + 64);
  int64_t v17 = alloca(v16);
  uint64_t v18 = alloca(v16);
  uint64_t v55 = &v42;
  unint64_t v19 = alloca(v16);
  uint64_t v20 = alloca(v16);
  Tensor.elementType.getter(0, a2);
  int v21 = (*(uint64_t (**)(uint64_t **, uint64_t))(v15 + 88))(&v42, v14);
  uint64_t v24 = &enum case for ScalarType.int16(_:);
  if (v21 == enum case for ScalarType.int16(_:))
  {
    int64_t v25 = alloca(24);
    uint64_t v26 = alloca(32);
    uint64_t v44 = v52;
    uint64_t v27 = (char *)&type metadata for () + 8;
    uint64_t v28 = partial apply for closure #2 in closure #1 in Tensor.doubleArray();
  }
  else
  {
    uint64_t v24 = &enum case for ScalarType.int32(_:);
    if (v21 == enum case for ScalarType.int32(_:))
    {
      uint64_t v29 = alloca(24);
      uint64_t v30 = alloca(32);
      uint64_t v44 = v52;
      uint64_t v27 = (char *)&type metadata for () + 8;
      uint64_t v28 = partial apply for closure #3 in closure #1 in Tensor.doubleArray();
    }
    else
    {
      uint64_t v24 = &enum case for ScalarType.uint16(_:);
      if (v21 == enum case for ScalarType.uint16(_:))
      {
        uint64_t v31 = alloca(24);
        uint64_t v32 = alloca(32);
        uint64_t v44 = v52;
        uint64_t v27 = (char *)&type metadata for () + 8;
        uint64_t v28 = partial apply for closure #4 in closure #1 in Tensor.doubleArray();
      }
      else
      {
        uint64_t v24 = &enum case for ScalarType.uint32(_:);
        if (v21 == enum case for ScalarType.uint32(_:))
        {
          uint64_t v33 = alloca(24);
          uint64_t v34 = alloca(32);
          uint64_t v44 = v52;
          uint64_t v27 = (char *)&type metadata for () + 8;
          uint64_t v28 = partial apply for closure #5 in closure #1 in Tensor.doubleArray();
        }
        else
        {
          uint64_t v24 = &enum case for ScalarType.float32(_:);
          if (v21 != enum case for ScalarType.float32(_:))
          {
            (*(void (**)(uint64_t **, void, uint64_t))(v15 + 104))(v55, enum case for ScalarType.float32(_:), v14);
            (*(void (**)(uint64_t **, void, uint64_t))(v49 + 104))(v54, enum case for FloatingPointRoundingRule.towardZero(_:), v50);
            uint64_t v48 = a3;
            Tensor.cast(to:roundingRule:)(v55, v54);
            (*(void (**)(uint64_t **, uint64_t))(v49 + 8))(v54, v50);
            uint64_t v54 = *(uint64_t ***)(v15 + 8);
            ((void (*)(uint64_t **, uint64_t))v54)(v55, v14);
            uint64_t v55 = &v42;
            uint64_t v40 = alloca(24);
            v41 = alloca(32);
            uint64_t v44 = v52;
            ((void (*)(uint64_t (*)(uint64_t, uint64_t), uint64_t **, char *))Tensor.withUnsafeBytes<A>(_:))(partial apply for closure #6 in closure #1 in Tensor.doubleArray(), &v42, (char *)&type metadata for () + 8);
            (*(void (**)(uint64_t **, uint64_t))(v46 + 8))(v53, v47);
            ((void (*)(uint64_t **, uint64_t))v54)(&v42, v14);
            goto LABEL_12;
          }
          uint64_t v35 = alloca(24);
          uint64_t v36 = alloca(32);
          uint64_t v44 = v52;
          uint64_t v27 = (char *)&type metadata for () + 8;
          uint64_t v28 = partial apply for closure #1 in closure #1 in Tensor.doubleArray();
        }
      }
    }
  }
  Tensor.withUnsafeBytes<A>(_:)(v28, &v42, v27, v24, v22, v23, v42, v43, v44);
LABEL_12:
  uint64_t v37 = v45;
  Tensor.shape.getter();
  uint64_t v38 = TensorShape.contiguousSize.getter();
  (*(void (**)(uint64_t **, uint64_t))(v44 + 8))(v37, v43);
  unint64_t result = v42;
  *uint64_t v42 = v38;
  return result;
}

uint64_t specialized static vDSP.convertElements<A, B>(of:to:)(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v3 = a3[1];
  if (v3 >= a2) {
    uint64_t v3 = a2;
  }
  if (v3 < 0) {
    BUG();
  }
  return specialized closure #1 in static vDSP.convertElements<A, B>(of:to:)(a3, a1, a2, v3, (uint64_t (*)(uint64_t, uint64_t, void, uint64_t, uint64_t))&_vDSP_vspdp);
}

uint64_t specialized static vDSP.convertElements<A, B>(of:to:)(uint64_t a1, uint64_t a2, void *a3, uint64_t (*a4)(uint64_t, uint64_t, void, uint64_t, uint64_t))
{
  if (a3[1] != a2) {
    BUG();
  }
  if (a2 < 0) {
    BUG();
  }
  return specialized closure #1 in static vDSP.convertElements<A, B>(of:to:)(a3, a1, a2, a2, a4);
}

uint64_t closure #2 in closure #1 in Tensor.doubleArray()(uint64_t a1, uint64_t a2, void *a3, uint64_t (*a4)(uint64_t, uint64_t, void, uint64_t, uint64_t))
{
  if (a1) {
    uint64_t v4 = (a2 - a1) / 2;
  }
  else {
    uint64_t v4 = 0;
  }
  return specialized static vDSP.convertElements<A, B>(of:to:)(a1, v4, a3, a4);
}

uint64_t closure #3 in closure #1 in Tensor.doubleArray()(uint64_t a1, uint64_t a2, void *a3, uint64_t (*a4)(uint64_t, uint64_t, void, uint64_t, uint64_t))
{
  if (a1) {
    uint64_t v4 = (a2 - a1) / 4;
  }
  else {
    uint64_t v4 = 0;
  }
  return specialized static vDSP.convertElements<A, B>(of:to:)(a1, v4, a3, a4);
}

uint64_t closure #1 in closure #1 in Tensor.doubleArray()(uint64_t a1, uint64_t a2, void *a3)
{
  if (a1) {
    uint64_t v3 = (a2 - a1) / 4;
  }
  else {
    uint64_t v3 = 0;
  }
  return specialized static vDSP.convertElements<A, B>(of:to:)(a1, v3, a3);
}

uint64_t partial apply for closure #6 in closure #1 in Tensor.doubleArray()(uint64_t a1, uint64_t a2)
{
  return closure #1 in closure #1 in Tensor.doubleArray()(a1, a2, *(void **)(v2 + 16));
}

uint64_t partial apply for closure #5 in closure #1 in Tensor.doubleArray()(uint64_t a1, uint64_t a2)
{
  return closure #3 in closure #1 in Tensor.doubleArray()(a1, a2, *(void **)(v2 + 16), (uint64_t (*)(uint64_t, uint64_t, void, uint64_t, uint64_t))&vDSP_vfltu32D);
}

uint64_t partial apply for closure #4 in closure #1 in Tensor.doubleArray()(uint64_t a1, uint64_t a2)
{
  return closure #2 in closure #1 in Tensor.doubleArray()(a1, a2, *(void **)(v2 + 16), (uint64_t (*)(uint64_t, uint64_t, void, uint64_t, uint64_t))&vDSP_vfltu16D);
}

uint64_t partial apply for closure #3 in closure #1 in Tensor.doubleArray()(uint64_t a1, uint64_t a2)
{
  return closure #3 in closure #1 in Tensor.doubleArray()(a1, a2, *(void **)(v2 + 16), (uint64_t (*)(uint64_t, uint64_t, void, uint64_t, uint64_t))&vDSP_vflt32D);
}

uint64_t partial apply for closure #2 in closure #1 in Tensor.doubleArray()(uint64_t a1, uint64_t a2)
{
  return closure #2 in closure #1 in Tensor.doubleArray()(a1, a2, *(void **)(v2 + 16), (uint64_t (*)(uint64_t, uint64_t, void, uint64_t, uint64_t))&vDSP_vflt16D);
}

uint64_t specialized closure #1 in static vDSP.convertElements<A, B>(of:to:)(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(uint64_t, uint64_t, void, uint64_t, uint64_t))
{
  if (!a2) {
    BUG();
  }
  if (!*a1) {
    BUG();
  }
  return a5(a2, 1, *a1, 1, a4);
}

uint64_t partial apply for closure #1 in closure #1 in Tensor.doubleArray()(uint64_t a1, uint64_t a2)
{
  return partial apply for closure #6 in closure #1 in Tensor.doubleArray()(a1, a2);
}

void *initializeBufferWithCopyOfBuffer for InteractionLookupTable(void *a1, void *a2)
{
  return initializeBufferWithCopyOfBuffer for InteractionLookupTable(a1, a2);
}

{
  uint64_t v2;

  *a1 = *a2;
  a1[1] = a2[1];
  uint64_t v2 = a2[2];
  a1[2] = v2;
  ((void (*)(void))swift_bridgeObjectRetain)();
  swift_bridgeObjectRetain(v2);
  return a1;
}

uint64_t destroy for InteractionLookupTable(uint64_t a1)
{
  return swift_bridgeObjectRelease(*(void *)(a1 + 16));
}

void *assignWithCopy for InteractionLookupTable(void *a1, void *a2)
{
  *a1 = *a2;
  uint64_t v3 = a2[1];
  uint64_t v4 = a1[1];
  a1[1] = v3;
  swift_bridgeObjectRetain(v3);
  swift_bridgeObjectRelease(v4);
  uint64_t v5 = a2[2];
  uint64_t v6 = a1[2];
  a1[2] = v5;
  swift_bridgeObjectRetain(v5);
  swift_bridgeObjectRelease(v6);
  return a1;
}

void *assignWithTake for InteractionLookupTable(void *a1, uint64_t a2)
{
  *a1 = *(void *)a2;
  swift_bridgeObjectRelease(a1[1]);
  uint64_t v3 = a1[2];
  *(_OWORD *)(a1 + 1) = *(_OWORD *)(a2 + 8);
  swift_bridgeObjectRelease(v3);
  return a1;
}

uint64_t getEnumTagSinglePayload for InteractionLookupTable(uint64_t a1, int a2)
{
  if (a2)
  {
    if (a2 < 0 && *(unsigned char *)(a1 + 24)) {
      int v2 = *(_DWORD *)a1 + 0x7FFFFFFF;
    }
    else {
      int v2 = (*(void *)(a1 + 8) & 0xFFFFFFFF00000001) != 0 ? -1 : *(void *)(a1 + 8) >> 1;
    }
  }
  else
  {
    int v2 = -1;
  }
  return (v2 + 1);
}

void storeEnumTagSinglePayload for InteractionLookupTable(uint64_t a1, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(a1 + 8) = 0;
    *(void *)a1 = a2 + 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(a1 + 24) = 1;
    }
  }
  else
  {
    if (a3 < 0) {
      *(unsigned char *)(a1 + 24) = 0;
    }
    if (a2) {
      *(void *)(a1 + 8) = 2 * (a2 - 1);
    }
  }
}

ValueMetadata *type metadata accessor for InteractionLookupTable()
{
  return &type metadata for InteractionLookupTable;
}

ValueMetadata *type metadata accessor for Interaction()
{
  return &type metadata for Interaction;
}

uint64_t InteractionLookupTable.interactionsFor(_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (a1 < 0) {
    BUG();
  }
  unint64_t v4 = *(void *)(a4 + 16);
  if (v4 <= a1) {
    BUG();
  }
  if (a1 + 1 >= v4) {
    BUG();
  }
  uint64_t v6 = *(void *)(a4 + 8 * a1 + 32);
  uint64_t v7 = *(void *)(a4 + 8 * a1 + 40);
  if (v7 < v6) {
    BUG();
  }
  if (v6 < 0) {
    BUG();
  }
  unint64_t v8 = *(void *)(a3 + 16);
  if (v8 < v6 || (uint64_t)v8 < v7) {
    BUG();
  }
  swift_bridgeObjectRetain(a3);
  return a3;
}

BOOL static Interaction.< infix(_:_:)(double a1, double a2)
{
  return a2 > a1;
}

BOOL static Interaction.== infix(_:_:)(uint64_t a1, uint64_t a2, double a3, double a4)
{
  return a1 == a2 && a3 == a4;
}

BOOL protocol witness for static Comparable.< infix(_:_:) in conformance Interaction(uint64_t a1, uint64_t a2)
{
  return static Interaction.< infix(_:_:)(*(double *)(a1 + 8), *(double *)(a2 + 8));
}

BOOL protocol witness for static Comparable.<= infix(_:_:) in conformance Interaction(uint64_t a1, uint64_t a2)
{
  return specialized static Comparable.<= infix(_:_:)(*(double *)(a1 + 8), *(double *)(a2 + 8));
}

BOOL specialized static Comparable.<= infix(_:_:)(double a1, double a2)
{
  return a1 <= a2;
}

BOOL specialized static Comparable.<= infix(_:_:)(uint64_t a1, int a2, unsigned __int8 a3, uint64_t a4, int a5, unsigned __int8 a6)
{
  if ((a6 | a3)) {
    BUG();
  }
  if (a5 != a2) {
    BUG();
  }
  return a4 >= a1;
}

uint64_t specialized static Comparable.<= infix(_:_:)(uint64_t a1, uint64_t a2, char a3, uint64_t a4, uint64_t a5, char a6)
{
  unsigned __int8 v8 = a3 & 1;
  unsigned __int8 v9 = a6 & 1;
  if (v9)
  {
    if (v8)
    {
      LOBYTE(v6) = a4 < a1;
      goto LABEL_11;
    }
    goto LABEL_7;
  }
  if (v8)
  {
LABEL_7:
    LOBYTE(v6) = v9 < v8;
    goto LABEL_11;
  }
  if (a4 == a1 && a5 == a2)
  {
    unsigned int v6 = 0;
  }
  else
  {
    unsigned int v6 = 0;
    if ((_stringCompareWithSmolCheck(_:_:expecting:)(a4, a5, a1, a2, 0) & 1) == 0) {
      unsigned int v6 = _stringCompareWithSmolCheck(_:_:expecting:)(a4, a5, a1, a2, 1);
    }
  }
LABEL_11:
  LOBYTE(v6) = v6 ^ 1;
  return v6;
}

BOOL protocol witness for static Comparable.>= infix(_:_:) in conformance Interaction(uint64_t a1, uint64_t a2)
{
  return specialized static Comparable.>= infix(_:_:)(*(double *)(a1 + 8), *(double *)(a2 + 8));
}

BOOL specialized static Comparable.>= infix(_:_:)(double a1, double a2)
{
  return a2 <= a1;
}

BOOL specialized static Comparable.>= infix(_:_:)(uint64_t a1, int a2, unsigned __int8 a3, uint64_t a4, int a5, unsigned __int8 a6)
{
  if ((a6 | a3)) {
    BUG();
  }
  if (a2 != a5) {
    BUG();
  }
  return a1 >= a4;
}

uint64_t specialized static Comparable.>= infix(_:_:)(uint64_t a1, uint64_t a2, char a3, uint64_t a4, uint64_t a5, char a6)
{
  unsigned __int8 v8 = a3 & 1;
  unsigned __int8 v9 = a6 & 1;
  if (v8)
  {
    if (v9)
    {
      LOBYTE(v6) = a1 < a4;
      goto LABEL_11;
    }
    goto LABEL_7;
  }
  if (v9)
  {
LABEL_7:
    LOBYTE(v6) = v8 < v9;
    goto LABEL_11;
  }
  if (a1 == a4 && a2 == a5)
  {
    unsigned int v6 = 0;
  }
  else
  {
    unsigned int v6 = 0;
    if ((_stringCompareWithSmolCheck(_:_:expecting:)(a1, a2, a4, a5, 0) & 1) == 0) {
      unsigned int v6 = _stringCompareWithSmolCheck(_:_:expecting:)(a1, a2, a4, a5, 1);
    }
  }
LABEL_11:
  LOBYTE(v6) = v6 ^ 1;
  return v6;
}

BOOL protocol witness for static Comparable.> infix(_:_:) in conformance Interaction(uint64_t a1, uint64_t a2)
{
  return specialized static Comparable.> infix(_:_:)(*(double *)(a1 + 8), *(double *)(a2 + 8));
}

BOOL specialized static Comparable.> infix(_:_:)(double a1, double a2)
{
  return a1 > a2;
}

BOOL specialized static Comparable.> infix(_:_:)(uint64_t a1, int a2, unsigned __int8 a3, uint64_t a4, int a5, unsigned __int8 a6)
{
  if ((a6 | a3)) {
    BUG();
  }
  if (a5 != a2) {
    BUG();
  }
  return a4 < a1;
}

uint64_t specialized static Comparable.> infix(_:_:)(uint64_t a1, uint64_t a2, char a3, uint64_t a4, uint64_t a5, char a6)
{
  unsigned __int8 v8 = a3 & 1;
  unsigned __int8 v9 = a6 & 1;
  if (v9)
  {
    if (v8)
    {
      LOBYTE(v6) = a4 < a1;
      return v6;
    }
    goto LABEL_7;
  }
  if (v8)
  {
LABEL_7:
    LOBYTE(v6) = v9 < v8;
    return v6;
  }
  if (a4 == a1 && a5 == a2) {
    return 0;
  }
  unsigned int v6 = 0;
  if (_stringCompareWithSmolCheck(_:_:expecting:)(a4, a5, a1, a2, 0)) {
    return v6;
  }
  return _stringCompareWithSmolCheck(_:_:expecting:)(a4, a5, a1, a2, 1);
}

BOOL protocol witness for static Equatable.== infix(_:_:) in conformance Interaction(uint64_t a1, uint64_t a2)
{
  return static Interaction.== infix(_:_:)(*(void *)a1, *(void *)a2, *(double *)(a1 + 8), *(double *)(a2 + 8));
}

uint64_t base witness table accessor for Equatable in Interaction()
{
  return lazy protocol witness table accessor for type Interaction and conformance Interaction();
}

uint64_t lazy protocol witness table accessor for type Interaction and conformance Interaction()
{
  uint64_t result = lazy protocol witness table cache variable for type Interaction and conformance Interaction;
  if (!lazy protocol witness table cache variable for type Interaction and conformance Interaction)
  {
    uint64_t result = swift_getWitnessTable(&protocol conformance descriptor for Interaction, &type metadata for Interaction);
    lazy protocol witness table cache variable for type Interaction and conformance Interaction = result;
  }
  return result;
}

uint64_t MLBoostedTreeRegressor.ModelParameters.validationData.getter(__m128 a1)
{
  uint64_t v2 = type metadata accessor for MLBoostedTreeRegressor.ModelParameters.ValidationData(0);
  int64_t v3 = *(void *)(*(void *)(v2 - 8) + 64);
  unint64_t v4 = alloca(v3);
  uint64_t v5 = alloca(v3);
  outlined init with copy of Either<LogisticRegressionClassifier<Float, String>, FullyConnectedNetworkClassifier<Float, String>>(v1, (uint64_t)&v9, &demangling cache variable for type metadata for Any?);
  if (!v10) {
    BUG();
  }
  outlined init with take of Any(&v9, v8);
  swift_dynamicCast(&v7, v8, (char *)&type metadata for Any + 8, v2, 7);
  MLBoostedTreeRegressor.ModelParameters.ValidationData.table.getter(a1);
  return outlined destroy of MLBoostedTreeRegressor.ModelParameters.ValidationData((uint64_t)&v7);
}

uint64_t key path getter for MLBoostedTreeRegressor.ModelParameters.validationData : MLBoostedTreeRegressor.ModelParameters(__m128 a1)
{
  uint64_t v2 = v1;
  MLBoostedTreeRegressor.ModelParameters.validationData.getter(a1);
  uint64_t result = v4;
  *(void *)uint64_t v2 = v4;
  *(unsigned char *)(v2 + 8) = v5;
  return result;
}

uint64_t key path setter for MLBoostedTreeRegressor.ModelParameters.validationData : MLBoostedTreeRegressor.ModelParameters(uint64_t a1)
{
  int v1 = *(_DWORD *)(a1 + 8);
  uint64_t v3 = *(void *)a1;
  char v4 = v1;
  outlined copy of MLDataTable?(v3, v1);
  return MLBoostedTreeRegressor.ModelParameters.validationData.setter((uint64_t)&v3);
}

uint64_t MLBoostedTreeRegressor.ModelParameters.validationData.setter(uint64_t a1)
{
  uint64_t v20 = v1;
  unsigned int v2 = 0;
  uint64_t v3 = type metadata accessor for MLBoostedTreeRegressor.ModelParameters.ValidationData(0);
  int64_t v4 = *(void *)(*(void *)(v3 - 8) + 64);
  char v5 = alloca(v4);
  unsigned int v6 = alloca(v4);
  uint64_t v19 = *(void *)a1;
  char v7 = *(unsigned char *)(a1 + 8);
  uint64_t v15 = v3;
  unsigned __int8 v8 = __swift_allocate_boxed_opaque_existential_1(&v13);
  uint64_t v9 = (uint64_t)v8;
  if (v7 == -1)
  {
    long long v13 = 0;
    __int16 v14 = 256;
    uint64_t v10 = v20;
  }
  else
  {
    uint64_t v18 = v8;
    uint64_t v16 = v19;
    char v17 = v7 & 1;
    if (MLDataTable.size.getter())
    {
      *(void *)&long long v13 = v19;
      BYTE8(v13) = v7 & 1;
      int v12 = 1;
    }
    else
    {
      outlined consume of MLDataTable?(v19, v7);
      int v12 = 3;
    }
    unsigned int v2 = v12;
    uint64_t v10 = v20;
    uint64_t v9 = (uint64_t)v18;
  }
  swift_storeEnumTagMultiPayload(&v13, v3, v2);
  outlined init with take of MLBoostedTreeRegressor.ModelParameters.ValidationData((uint64_t)&v13, v9);
  return outlined assign with take of Any?((uint64_t)&v13, v10);
}

uint64_t MLBoostedTreeRegressor.ModelParameters.validation.getter()
{
  uint64_t v2 = v0;
  outlined init with copy of Either<LogisticRegressionClassifier<Float, String>, FullyConnectedNetworkClassifier<Float, String>>(v1, (uint64_t)&v6, &demangling cache variable for type metadata for Any?);
  if (!v7) {
    BUG();
  }
  outlined init with take of Any(&v6, v5);
  uint64_t v3 = type metadata accessor for MLBoostedTreeRegressor.ModelParameters.ValidationData(0);
  return swift_dynamicCast(v2, v5, (char *)&type metadata for Any + 8, v3, 7);
}

uint64_t outlined destroy of MLBoostedTreeRegressor.ModelParameters.ValidationData(uint64_t a1)
{
  uint64_t v1 = type metadata accessor for MLBoostedTreeRegressor.ModelParameters.ValidationData(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v1 - 8) + 8))(a1, v1);
  return a1;
}

uint64_t outlined init with take of MLBoostedTreeRegressor.ModelParameters.ValidationData(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = type metadata accessor for MLBoostedTreeRegressor.ModelParameters.ValidationData(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v2 - 8) + 32))(a2, a1, v2);
  return a2;
}

uint64_t (*MLBoostedTreeRegressor.ModelParameters.validationData.modify(uint64_t a1, __m128 a2))(uint64_t a1, char a2)
{
  *(void *)(a1 + 16) = v2;
  MLBoostedTreeRegressor.ModelParameters.validationData.getter(a2);
  return MLBoostedTreeRegressor.ModelParameters.validationData.modify;
}

uint64_t MLBoostedTreeRegressor.ModelParameters.validationData.modify(uint64_t a1, char a2)
{
  uint64_t v2 = *(void *)a1;
  char v3 = *(unsigned char *)(a1 + 8);
  uint64_t v6 = *(void *)a1;
  char v7 = v3;
  if ((a2 & 1) == 0) {
    return MLBoostedTreeRegressor.ModelParameters.validationData.setter((uint64_t)&v6);
  }
  char v4 = v3;
  outlined copy of MLDataTable?(v2, v3);
  MLBoostedTreeRegressor.ModelParameters.validationData.setter((uint64_t)&v6);
  return outlined consume of MLDataTable?(v2, v4);
}

uint64_t key path setter for MLBoostedTreeRegressor.ModelParameters.validation : MLBoostedTreeRegressor.ModelParameters(uint64_t a1)
{
  v6[0] = v1;
  int64_t v2 = *(void *)(*(void *)(type metadata accessor for MLBoostedTreeRegressor.ModelParameters.ValidationData(0) - 8)
                 + 64);
  char v3 = alloca(v2);
  char v4 = alloca(v2);
  outlined init with copy of MLBoostedTreeRegressor.ModelParameters.ValidationData(a1, (uint64_t)v6);
  return MLBoostedTreeRegressor.ModelParameters.validation.setter((uint64_t)v6);
}

uint64_t MLBoostedTreeRegressor.ModelParameters.validation.setter(uint64_t a1)
{
  v4[3] = type metadata accessor for MLBoostedTreeRegressor.ModelParameters.ValidationData(0);
  boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1(v4);
  outlined init with take of MLBoostedTreeRegressor.ModelParameters.ValidationData(a1, (uint64_t)boxed_opaque_existential_1);
  return outlined assign with take of Any?((uint64_t)v4, v1);
}

void (*MLBoostedTreeRegressor.ModelParameters.validation.modify(void *a1))(uint64_t a1, char a2)
{
  int64_t v2 = malloc(0xA0uLL);
  *a1 = v2;
  *((void *)v2 + 16) = v1;
  uint64_t v3 = type metadata accessor for MLBoostedTreeRegressor.ModelParameters.ValidationData(0);
  *((void *)v2 + 17) = v3;
  size_t v4 = *(void *)(*(void *)(v3 - 8) + 64);
  *((void *)v2 + 18) = malloc(v4);
  char v5 = malloc(v4);
  *((void *)v2 + 19) = v5;
  outlined init with copy of Either<LogisticRegressionClassifier<Float, String>, FullyConnectedNetworkClassifier<Float, String>>(v1, (uint64_t)(v2 + 2), &demangling cache variable for type metadata for Any?);
  if (!*((void *)v2 + 7)) {
    BUG();
  }
  outlined init with take of Any(v2 + 2, v2);
  swift_dynamicCast(v5, v2, (char *)&type metadata for Any + 8, v3, 7);
  return MLBoostedTreeRegressor.ModelParameters.validation.modify;
}

void MLBoostedTreeRegressor.ModelParameters.validation.modify(uint64_t a1, char a2)
{
  int64_t v2 = *(void **)a1;
  uint64_t v3 = *(void **)(*(void *)a1 + 152);
  size_t v4 = *(void **)(*(void *)a1 + 144);
  uint64_t v8 = *(void *)(*(void *)a1 + 128);
  uint64_t v5 = *(void *)(*(void *)a1 + 136);
  if (a2)
  {
    outlined init with copy of MLBoostedTreeRegressor.ModelParameters.ValidationData((uint64_t)v3, (uint64_t)v4);
    v2[11] = v5;
    boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1(v2 + 8);
    outlined init with take of MLBoostedTreeRegressor.ModelParameters.ValidationData((uint64_t)v4, (uint64_t)boxed_opaque_existential_1);
    outlined assign with take of Any?((uint64_t)(v2 + 8), v8);
    outlined destroy of MLBoostedTreeRegressor.ModelParameters.ValidationData((uint64_t)v3);
  }
  else
  {
    v2[15] = v5;
    char v7 = __swift_allocate_boxed_opaque_existential_1(v2 + 12);
    outlined init with take of MLBoostedTreeRegressor.ModelParameters.ValidationData((uint64_t)v3, (uint64_t)v7);
    outlined assign with take of Any?((uint64_t)(v2 + 12), v8);
  }
  free(v3);
  free(v4);
  free(v2);
}

uint64_t MLBoostedTreeRegressor.ModelParameters.maxDepth.getter()
{
  return *(void *)(v0 + 32);
}

void MLBoostedTreeRegressor.ModelParameters.maxDepth.setter(uint64_t a1)
{
  *(void *)(v1 + 32) = a1;
}

void (*MLBoostedTreeRegressor.ModelParameters.maxDepth.modify())()
{
  return MLBoostedTreeRegressor.ModelParameters.maxDepth.modify;
}

uint64_t MLBoostedTreeRegressor.ModelParameters.maxIterations.getter()
{
  return *(void *)(v0 + 40);
}

void MLBoostedTreeRegressor.ModelParameters.maxIterations.setter(uint64_t a1)
{
  *(void *)(v1 + 40) = a1;
}

void (*MLBoostedTreeRegressor.ModelParameters.maxIterations.modify())()
{
  return MLBoostedTreeRegressor.ModelParameters.maxDepth.modify;
}

double MLBoostedTreeRegressor.ModelParameters.minLossReduction.getter()
{
  return *(double *)(v0 + 48);
}

void MLBoostedTreeRegressor.ModelParameters.minLossReduction.setter(double a1)
{
  *(double *)(v1 + 48) = a1;
}

void (*MLBoostedTreeRegressor.ModelParameters.minLossReduction.modify())()
{
  return MLBoostedTreeRegressor.ModelParameters.maxDepth.modify;
}

double MLBoostedTreeRegressor.ModelParameters.minChildWeight.getter()
{
  return *(double *)(v0 + 56);
}

void MLBoostedTreeRegressor.ModelParameters.minChildWeight.setter(double a1)
{
  *(double *)(v1 + 56) = a1;
}

void (*MLBoostedTreeRegressor.ModelParameters.minChildWeight.modify())()
{
  return MLBoostedTreeRegressor.ModelParameters.maxDepth.modify;
}

uint64_t MLBoostedTreeRegressor.ModelParameters.randomSeed.getter()
{
  return *(void *)(v0 + 64);
}

void MLBoostedTreeRegressor.ModelParameters.randomSeed.setter(uint64_t a1)
{
  *(void *)(v1 + 64) = a1;
}

void (*MLBoostedTreeRegressor.ModelParameters.randomSeed.modify())()
{
  return MLBoostedTreeRegressor.ModelParameters.maxDepth.modify;
}

double MLBoostedTreeRegressor.ModelParameters.stepSize.getter()
{
  return *(double *)(v0 + 72);
}

void MLBoostedTreeRegressor.ModelParameters.stepSize.setter(double a1)
{
  *(double *)(v1 + 72) = a1;
}

void (*MLBoostedTreeRegressor.ModelParameters.stepSize.modify())()
{
  return MLBoostedTreeRegressor.ModelParameters.maxDepth.modify;
}

uint64_t MLBoostedTreeRegressor.ModelParameters.earlyStoppingRounds.getter()
{
  return *(void *)(v0 + 80);
}

void MLBoostedTreeRegressor.ModelParameters.earlyStoppingRounds.setter(uint64_t a1, char a2)
{
  *(void *)(v2 + 80) = a1;
  *(unsigned char *)(v2 + 88) = a2 & 1;
}

void (*MLBoostedTreeRegressor.ModelParameters.earlyStoppingRounds.modify())()
{
  return MLBoostedTreeRegressor.ModelParameters.maxDepth.modify;
}

double MLBoostedTreeRegressor.ModelParameters.rowSubsample.getter()
{
  return *(double *)(v0 + 96);
}

void MLBoostedTreeRegressor.ModelParameters.rowSubsample.setter(double a1)
{
  *(double *)(v1 + 96) = a1;
}

void (*MLBoostedTreeRegressor.ModelParameters.rowSubsample.modify())()
{
  return MLBoostedTreeRegressor.ModelParameters.maxDepth.modify;
}

double MLBoostedTreeRegressor.ModelParameters.columnSubsample.getter()
{
  return *(double *)(v0 + 104);
}

void MLBoostedTreeRegressor.ModelParameters.columnSubsample.setter(double a1)
{
  *(double *)(v1 + 104) = a1;
}

void (*MLBoostedTreeRegressor.ModelParameters.columnSubsample.modify())()
{
  return MLBoostedTreeRegressor.ModelParameters.maxDepth.modify;
}

uint64_t MLBoostedTreeRegressor.ModelParameters.init(validation:maxDepth:maxIterations:minLossReduction:minChildWeight:randomSeed:stepSize:earlyStoppingRounds:rowSubsample:columnSubsample:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, char a6, double a7, double a8, double a9, double a10, double a11)
{
  uint64_t v23 = a4;
  uint64_t v26 = a3;
  uint64_t v12 = v11;
  double v22 = a11;
  double v24 = a10;
  uint64_t v27 = a5;
  double v28 = a9;
  double v29 = a8;
  double v30 = a7;
  uint64_t v25 = a1;
  uint64_t v14 = type metadata accessor for MLBoostedTreeRegressor.ModelParameters.ValidationData(0);
  int64_t v15 = *(void *)(*(void *)(v14 - 8) + 64);
  uint64_t v16 = alloca(v15);
  char v17 = alloca(v15);
  *(_OWORD *)(v12 + 16) = 0;
  *(_OWORD *)uint64_t v12 = 0;
  *(void *)(v12 + 32) = a2;
  *(void *)(v12 + 40) = v26;
  *(double *)(v12 + 48) = v30;
  *(double *)(v12 + 56) = v29;
  *(void *)(v12 + 64) = v23;
  *(double *)(v12 + 72) = v28;
  *(void *)(v12 + 80) = v27;
  *(unsigned char *)(v12 + 88) = a6 & 1;
  *(double *)(v12 + 96) = v24;
  *(double *)(v12 + 104) = v22;
  uint64_t v18 = v25;
  outlined init with copy of MLBoostedTreeRegressor.ModelParameters.ValidationData(v25, (uint64_t)v21);
  v21[3] = v14;
  boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1(v21);
  outlined init with take of MLBoostedTreeRegressor.ModelParameters.ValidationData((uint64_t)v21, (uint64_t)boxed_opaque_existential_1);
  outlined assign with take of Any?((uint64_t)v21, v12);
  return outlined destroy of MLBoostedTreeRegressor.ModelParameters.ValidationData(v18);
}

uint64_t MLBoostedTreeRegressor.ModelParameters.init(validationData:maxDepth:maxIterations:minLossReduction:minChildWeight:randomSeed:stepSize:earlyStoppingRounds:rowSubsample:columnSubsample:)(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, char a6, double a7, double a8, double a9, double a10, double a11)
{
  uint64_t v12 = *a1;
  char v13 = *((unsigned char *)a1 + 8);
  *(_OWORD *)(v11 + 16) = 0;
  *(_OWORD *)uint64_t v11 = 0;
  *(void *)(v11 + 32) = a2;
  *(void *)(v11 + 40) = a3;
  *(double *)(v11 + 48) = a7;
  *(double *)(v11 + 56) = a8;
  *(void *)(v11 + 64) = a4;
  *(double *)(v11 + 72) = a9;
  *(void *)(v11 + 80) = a5;
  *(unsigned char *)(v11 + 88) = a6 & 1;
  *(double *)(v11 + 96) = a10;
  *(double *)(v11 + 104) = a11;
  uint64_t v15 = v12;
  char v16 = v13;
  return MLBoostedTreeRegressor.ModelParameters.validationData.setter((uint64_t)&v15);
}

uint64_t MLBoostedTreeRegressor.ModelParameters.init(configuration:validation:)(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = v2;
  int64_t v4 = *(void *)(*(void *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for MLBoostedTreeRegressor.ModelParameters.ValidationData?)
                             - 8)
                 + 64);
  uint64_t v5 = alloca(v4);
  uint64_t v6 = alloca(v4);
  uint64_t v7 = type metadata accessor for MLBoostedTreeRegressor.ModelParameters.ValidationData(0);
  int64_t v8 = *(void *)(*(void *)(v7 - 8) + 64);
  uint64_t v9 = alloca(v8);
  uint64_t v10 = alloca(v8);
  uint64_t v19 = v16;
  *(_OWORD *)(v3 + 16) = 0;
  *(_OWORD *)uint64_t v3 = 0;
  *(void *)(v3 + 32) = BoostedTreeConfiguration.maximumDepth.getter();
  *(void *)(v3 + 40) = BoostedTreeConfiguration.maximumIterations.getter();
  *(double *)(v3 + 48) = BoostedTreeConfiguration.minimumLossReduction.getter();
  *(double *)(v3 + 56) = BoostedTreeConfiguration.minimumChildWeight.getter();
  *(void *)(v3 + 64) = BoostedTreeConfiguration.randomSeed.getter();
  *(double *)(v3 + 72) = BoostedTreeConfiguration.learningRate.getter();
  *(void *)(v3 + 80) = BoostedTreeConfiguration.earlyStoppingIterationCount.getter();
  *(unsigned char *)(v3 + 88) = v11 & 1;
  *(double *)(v3 + 96) = BoostedTreeConfiguration.rowSubsample.getter();
  *(double *)(v3 + 104) = BoostedTreeConfiguration.columnSubsample.getter();
  uint64_t v18 = a2;
  _sSq3mapyqd_0_Sgqd_0_xqd__YKXEqd__YKs5ErrorRd__Ri_d_0_r0_lF11TabularData0D5FrameV_s5NeverO8CreateML22MLBoostedTreeRegressorV15ModelParametersV010ValidationD0OTg503_s8g4ML22ijk3V15lm75V13configuration10validationAE0A12MLComponents07BoostedD13ConfigurationV_11c7Data0N5e12VSgtcfcAE010N21N0OAMcAPmcfu_ApMcfu0_AOXMtTf1ncn_n(a2);
  if (__swift_getEnumTagSinglePayload((uint64_t)v16, 1, v7) == 1)
  {
    uint64_t v12 = (uint64_t)v19;
    swift_storeEnumTagMultiPayload(v19, v7, 3);
    outlined destroy of Either<LogisticRegressionClassifier<Float, String>, FullyConnectedNetworkClassifier<Float, String>>((uint64_t)v16, &demangling cache variable for type metadata for MLBoostedTreeRegressor.ModelParameters.ValidationData?);
  }
  else
  {
    uint64_t v12 = (uint64_t)v19;
    outlined init with take of MLBoostedTreeRegressor.ModelParameters.ValidationData((uint64_t)v16, (uint64_t)v19);
  }
  v17[3] = v7;
  boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1(v17);
  outlined init with take of MLBoostedTreeRegressor.ModelParameters.ValidationData(v12, (uint64_t)boxed_opaque_existential_1);
  outlined assign with take of Any?((uint64_t)v17, v3);
  outlined destroy of Either<LogisticRegressionClassifier<Float, String>, FullyConnectedNetworkClassifier<Float, String>>(v18, &demangling cache variable for type metadata for DataFrame?);
  uint64_t v14 = type metadata accessor for BoostedTreeConfiguration(0);
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v14 - 8) + 8))(a1, v14);
}

uint64_t _sSq3mapyqd_0_Sgqd_0_xqd__YKXEqd__YKs5ErrorRd__Ri_d_0_r0_lF11TabularData0D5FrameV_s5NeverO8CreateML22MLBoostedTreeRegressorV15ModelParametersV010ValidationD0OTg503_s8g4ML22ijk3V15lm75V13configuration10validationAE0A12MLComponents07BoostedD13ConfigurationV_11c7Data0N5e12VSgtcfcAE010N21N0OAMcAPmcfu_ApMcfu0_AOXMtTf1ncn_n(uint64_t a1)
{
  uint64_t v21 = v1;
  uint64_t v2 = type metadata accessor for DataFrame(0);
  uint64_t v18 = *(void *)(v2 - 8);
  int64_t v3 = *(void *)(v18 + 64);
  int64_t v4 = alloca(v3);
  uint64_t v5 = alloca(v3);
  uint64_t v19 = &v17;
  int64_t v6 = *(void *)(*(void *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for DataFrame?)
                             - 8)
                 + 64);
  uint64_t v7 = alloca(v6);
  int64_t v8 = alloca(v6);
  outlined init with copy of Either<LogisticRegressionClassifier<Float, String>, FullyConnectedNetworkClassifier<Float, String>>(a1, (uint64_t)&v17, &demangling cache variable for type metadata for DataFrame?);
  if (__swift_getEnumTagSinglePayload((uint64_t)&v17, 1, v2) == 1)
  {
    uint64_t v9 = type metadata accessor for MLBoostedTreeRegressor.ModelParameters.ValidationData(0);
    uint64_t v10 = v21;
    uint64_t v11 = 1;
    uint64_t v12 = v9;
  }
  else
  {
    char v13 = v19;
    uint64_t v14 = v18;
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(v18 + 32))(v19, &v17, v2);
    uint64_t v15 = v21;
    (*(void (**)(uint64_t, uint64_t *, uint64_t))(v14 + 16))(v21, v13, v2);
    uint64_t v20 = type metadata accessor for MLBoostedTreeRegressor.ModelParameters.ValidationData(0);
    swift_storeEnumTagMultiPayload(v15, v20, 2);
    (*(void (**)(uint64_t *, uint64_t))(v14 + 8))(v13, v2);
    uint64_t v10 = v15;
    uint64_t v11 = 0;
    uint64_t v12 = v20;
  }
  return __swift_storeEnumTagSinglePayload(v10, v11, 1, v12);
}

uint64_t MLBoostedTreeRegressor.ModelParameters.description.getter()
{
  v16._countAndFlagsBits = *(void *)(v0 + 32);
  v1._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter(&type metadata for Int, &protocol witness table for Int);
  object = v1._object;
  String.append(_:)(v1);
  swift_bridgeObjectRelease(object);
  v3._object = (void *)0xE100000000000000;
  v3._countAndFlagsBits = 10;
  String.append(_:)(v3);
  v16._countAndFlagsBits = 0;
  v16._object = (void *)0xE000000000000000;
  _StringGuts.grow(_:)(19);
  swift_bridgeObjectRelease(v16._object);
  v16._countAndFlagsBits = 0xD000000000000010;
  v16._object = "ansformer have different types." + 0x8000000000000000;
  v4._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter(&type metadata for Int, &protocol witness table for Int);
  uint64_t v5 = v4._object;
  String.append(_:)(v4);
  swift_bridgeObjectRelease(v5);
  v3._countAndFlagsBits = 10;
  v3._object = (void *)0xE100000000000000;
  String.append(_:)(v3);
  int64_t v6 = v16._object;
  String.append(_:)(v16);
  swift_bridgeObjectRelease(v6);
  v16._countAndFlagsBits = 0;
  v16._object = (void *)0xE000000000000000;
  _StringGuts.grow(_:)(23);
  v3._countAndFlagsBits = 0xD000000000000014;
  v3._object = "Max Iterations: " + 0x8000000000000000;
  String.append(_:)(v3);
  Double.write<A>(to:)(&v16, &type metadata for DefaultStringInterpolation, &protocol witness table for DefaultStringInterpolation);
  v3._countAndFlagsBits = 10;
  v3._object = (void *)0xE100000000000000;
  String.append(_:)(v3);
  uint64_t v7 = v16._object;
  String.append(_:)(v16);
  swift_bridgeObjectRelease(v7);
  v16._countAndFlagsBits = 0;
  v16._object = (void *)0xE000000000000000;
  _StringGuts.grow(_:)(21);
  v3._object = "Min Loss Reduction: " + 0x8000000000000000;
  v3._countAndFlagsBits = 0xD000000000000012;
  String.append(_:)(v3);
  Double.write<A>(to:)(&v16, &type metadata for DefaultStringInterpolation, &protocol witness table for DefaultStringInterpolation);
  v3._countAndFlagsBits = 10;
  v3._object = (void *)0xE100000000000000;
  String.append(_:)(v3);
  int64_t v8 = v16._object;
  String.append(_:)(v16);
  swift_bridgeObjectRelease(v8);
  v16._countAndFlagsBits = 0;
  v16._object = (void *)0xE000000000000000;
  _StringGuts.grow(_:)(16);
  swift_bridgeObjectRelease(v16._object);
  strcpy((char *)&v16, "Random Seed: ");
  HIWORD(v16._object) = -4864;
  v9._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter(&type metadata for Int, &protocol witness table for Int);
  uint64_t v10 = v9._object;
  String.append(_:)(v9);
  swift_bridgeObjectRelease(v10);
  v3._countAndFlagsBits = 10;
  v3._object = (void *)0xE100000000000000;
  String.append(_:)(v3);
  uint64_t v11 = v16._object;
  String.append(_:)(v16);
  swift_bridgeObjectRelease(v11);
  v16._countAndFlagsBits = 0;
  v16._object = (void *)0xE000000000000000;
  v3._countAndFlagsBits = 0x7A69532070657453;
  v3._object = (void *)0xEB00000000203A65;
  String.append(_:)(v3);
  Double.write<A>(to:)(&v16, &type metadata for DefaultStringInterpolation, &protocol witness table for DefaultStringInterpolation);
  v3._countAndFlagsBits = 10;
  v3._object = (void *)0xE100000000000000;
  String.append(_:)(v3);
  uint64_t v12 = v16._object;
  String.append(_:)(v16);
  swift_bridgeObjectRelease(v12);
  v16._countAndFlagsBits = 0;
  v16._object = (void *)0xE000000000000000;
  _StringGuts.grow(_:)(18);
  v3._countAndFlagsBits = 0x7362755320776F52;
  v3._object = (void *)0xEF203A656C706D61;
  String.append(_:)(v3);
  Double.write<A>(to:)(&v16, &type metadata for DefaultStringInterpolation, &protocol witness table for DefaultStringInterpolation);
  v3._countAndFlagsBits = 10;
  v3._object = (void *)0xE100000000000000;
  String.append(_:)(v3);
  char v13 = v16._object;
  String.append(_:)(v16);
  swift_bridgeObjectRelease(v13);
  v16._countAndFlagsBits = 0;
  v16._object = (void *)0xE000000000000000;
  _StringGuts.grow(_:)(21);
  v3._object = "Min Child Weight: " + 0x8000000000000000;
  v3._countAndFlagsBits = 0xD000000000000012;
  String.append(_:)(v3);
  Double.write<A>(to:)(&v16, &type metadata for DefaultStringInterpolation, &protocol witness table for DefaultStringInterpolation);
  v3._countAndFlagsBits = 10;
  v3._object = (void *)0xE100000000000000;
  String.append(_:)(v3);
  uint64_t v14 = v16._object;
  String.append(_:)(v16);
  swift_bridgeObjectRelease(v14);
  return 0x747065442078614DLL;
}

uint64_t MLBoostedTreeRegressor.ModelParameters.debugDescription.getter()
{
  return MLBoostedTreeRegressor.ModelParameters.description.getter();
}

uint64_t MLBoostedTreeRegressor.ModelParameters.playgroundDescription.getter(uint64_t a1)
{
  uint64_t v2 = v1;
  uint64_t result = MLBoostedTreeRegressor.ModelParameters.description.getter(a1);
  v2[3] = (uint64_t)&type metadata for String;
  uint64_t *v2 = result;
  v2[1] = v4;
  return result;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance MLBoostedTreeRegressor.ModelParameters()
{
  return MLBoostedTreeRegressor.ModelParameters.description.getter();
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance MLBoostedTreeRegressor.ModelParameters()
{
  return MLBoostedTreeRegressor.ModelParameters.debugDescription.getter();
}

uint64_t protocol witness for CustomPlaygroundDisplayConvertible.playgroundDescription.getter in conformance MLBoostedTreeRegressor.ModelParameters(uint64_t a1)
{
  return MLBoostedTreeRegressor.ModelParameters.playgroundDescription.getter(a1);
}

uint64_t static String._createEmpty(withInitialCapacity:)(Swift::Int a1)
{
  if (a1 >= 16) {
    _StringGuts.grow(_:)(a1);
  }
  return 0;
}

uint64_t sub_86FB(__m128 a1)
{
  return key path getter for MLBoostedTreeRegressor.ModelParameters.validationData : MLBoostedTreeRegressor.ModelParameters(a1);
}

uint64_t sub_8705(uint64_t a1)
{
  return key path setter for MLBoostedTreeRegressor.ModelParameters.validationData : MLBoostedTreeRegressor.ModelParameters(a1);
}

uint64_t sub_870F(uint64_t a1)
{
  return MLBoostedTreeRegressor.ModelParameters.validation.getter(a1);
}

uint64_t sub_8726(uint64_t a1)
{
  return key path setter for MLBoostedTreeRegressor.ModelParameters.validation : MLBoostedTreeRegressor.ModelParameters(a1);
}

uint64_t destroy for MLBoostedTreeRegressor.ModelParameters(void *a1)
{
  if (a1[3]) {
    return __swift_destroy_boxed_opaque_existential_1Tm(a1);
  }
  return result;
}

uint64_t initializeWithCopy for MLBoostedTreeRegressor.ModelParameters(uint64_t a1, long long *a2)
{
  uint64_t v2 = *((void *)a2 + 3);
  if (v2)
  {
    *(void *)(a1 + 24) = v2;
    (**(void (***)(uint64_t, long long *))(v2 - 8))(a1, a2);
  }
  else
  {
    long long v3 = *a2;
    *(_OWORD *)(a1 + 16) = a2[1];
    *(_OWORD *)a1 = v3;
  }
  *(_OWORD *)(a1 + 32) = a2[2];
  *(_OWORD *)(a1 + 48) = a2[3];
  *(_OWORD *)(a1 + 64) = a2[4];
  *(void *)(a1 + 80) = *((void *)a2 + 10);
  *(unsigned char *)(a1 + 88) = *((unsigned char *)a2 + 88);
  *(_OWORD *)(a1 + 96) = a2[6];
  return a1;
}

uint64_t assignWithCopy for MLBoostedTreeRegressor.ModelParameters(uint64_t a1, long long *a2)
{
  uint64_t v2 = *((void *)a2 + 3);
  if (!*(void *)(a1 + 24))
  {
    if (v2)
    {
      *(void *)(a1 + 24) = v2;
      (**(void (***)(uint64_t, long long *))(v2 - 8))(a1, a2);
      goto LABEL_8;
    }
LABEL_7:
    long long v3 = *a2;
    *(_OWORD *)(a1 + 16) = a2[1];
    *(_OWORD *)a1 = v3;
    goto LABEL_8;
  }
  if (!v2)
  {
    __swift_destroy_boxed_opaque_existential_1Tm((void *)a1);
    goto LABEL_7;
  }
  __swift_assign_boxed_opaque_existential_0((uint64_t *)a1, (uint64_t *)a2);
LABEL_8:
  *(void *)(a1 + 32) = *((void *)a2 + 4);
  *(void *)(a1 + 40) = *((void *)a2 + 5);
  *(void *)(a1 + 48) = *((void *)a2 + 6);
  *(void *)(a1 + 56) = *((void *)a2 + 7);
  *(void *)(a1 + 64) = *((void *)a2 + 8);
  *(void *)(a1 + 72) = *((void *)a2 + 9);
  *(void *)(a1 + 80) = *((void *)a2 + 10);
  *(unsigned char *)(a1 + 88) = *((unsigned char *)a2 + 88);
  *(void *)(a1 + 96) = *((void *)a2 + 12);
  *(void *)(a1 + 104) = *((void *)a2 + 13);
  return a1;
}

void *__swift_memcpy112_8(void *a1, const void *a2)
{
  uint64_t result = a1;
  qmemcpy(a1, a2, 0x70uLL);
  return result;
}

uint64_t assignWithTake for MLBoostedTreeRegressor.ModelParameters(uint64_t a1, long long *a2)
{
  if (*(void *)(a1 + 24)) {
    __swift_destroy_boxed_opaque_existential_1Tm((void *)a1);
  }
  long long v2 = *a2;
  *(_OWORD *)(a1 + 16) = a2[1];
  *(_OWORD *)a1 = v2;
  *(_OWORD *)(a1 + 32) = a2[2];
  *(_OWORD *)(a1 + 48) = a2[3];
  *(void *)(a1 + 64) = *((void *)a2 + 8);
  *(void *)(a1 + 72) = *((void *)a2 + 9);
  *(void *)(a1 + 80) = *((void *)a2 + 10);
  *(unsigned char *)(a1 + 88) = *((unsigned char *)a2 + 88);
  *(_OWORD *)(a1 + 96) = a2[6];
  return a1;
}

uint64_t getEnumTagSinglePayload for MLBoostedTreeRegressor.ModelParameters(uint64_t a1, unsigned int a2)
{
  if (a2)
  {
    if (a2 >= 0x7FFFFFFF && *(unsigned char *)(a1 + 112))
    {
      int v2 = *(_DWORD *)a1 + 2147483646;
    }
    else
    {
      unint64_t v3 = *(void *)(a1 + 24);
      unint64_t v4 = v3 & 0xFFFFFFFF00000001;
      int v5 = (v3 >> 1) - 1;
      int v6 = -1;
      if (v5 >= 0) {
        int v6 = v5;
      }
      int v2 = v4 != 0 ? -1 : v6;
    }
  }
  else
  {
    int v2 = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for MLBoostedTreeRegressor.ModelParameters(uint64_t a1, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFE)
  {
    *(void *)(a1 + 104) = 0;
    *(_OWORD *)(a1 + 88) = 0;
    *(_OWORD *)(a1 + 72) = 0;
    *(_OWORD *)(a1 + 56) = 0;
    *(_OWORD *)(a1 + 40) = 0;
    *(_OWORD *)(a1 + 24) = 0;
    *(_OWORD *)(a1 + 8) = 0;
    *(void *)a1 = a2 - 0x7FFFFFFF;
    if (a3 >= 0x7FFFFFFF) {
      *(unsigned char *)(a1 + 112) = 1;
    }
  }
  else
  {
    if (a3 >= 0x7FFFFFFF) {
      *(unsigned char *)(a1 + 112) = 0;
    }
    if (a2)
    {
      uint64_t result = 2 * a2;
      *(void *)(a1 + 24) = result;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for MLBoostedTreeRegressor.ModelParameters()
{
  return &type metadata for MLBoostedTreeRegressor.ModelParameters;
}

char MLRecommenderMetrics.excludingObserved.getter()
{
  return *(unsigned char *)(v0 + 16);
}

uint64_t MLRecommenderMetrics.error.getter()
{
  uint64_t v1 = *(void *)(v0 + 24);
  swift_errorRetain(v1);
  return v1;
}

BOOL MLRecommenderMetrics.isValid.getter()
{
  return *(void *)(v0 + 24) == 0;
}

uint64_t MLRecommenderMetrics.precisionRecallDataFrame.getter()
{
  uint64_t v56 = v0;
  uint64_t v58 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Column<Double>);
  uint64_t v55 = *(void *)(v58 - 8);
  int64_t v2 = *(void *)(v55 + 64);
  unint64_t v3 = alloca(v2);
  unint64_t v4 = alloca(v2);
  v64 = v54;
  int v5 = alloca(v2);
  int v6 = alloca(v2);
  v65 = v54;
  uint64_t v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Column<String>);
  uint64_t v57 = *(void *)(v7 - 8);
  int64_t v8 = *(void *)(v57 + 64);
  Swift::String v9 = alloca(v8);
  uint64_t v10 = alloca(v8);
  uint64_t v66 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Column<Int>);
  uint64_t v62 = *(void *)(v66 - 8);
  int64_t v11 = *(void *)(v62 + 64);
  uint64_t v12 = alloca(v11);
  char v13 = alloca(v11);
  v61 = v54;
  uint64_t v14 = alloca(v11);
  uint64_t v15 = alloca(v11);
  v67 = v54;
  uint64_t v59 = type metadata accessor for AnyColumn(0);
  uint64_t v60 = *(void *)(v59 - 8);
  int64_t v16 = *(void *)(v60 + 64);
  uint64_t v17 = alloca(v16);
  uint64_t v18 = alloca(v16);
  v68 = v54;
  char v19 = *v1;
  uint64_t v20 = *((void *)v1 + 1);
  swift_bridgeObjectRetain(v20);
  if (v19 == 1)
  {
    ML21RecommendationMetricsVyAF13MLRecommenderV10IdentifierOGG_Sis5NeverOTg503_s8d4ML20hg52V24precisionRecallDataFrame07TabularG00gH0VvgSiAA014f12D0VyAA0C0V10I54OGcfu_32db210c028f2d2ec8bba8c4eeac380409ANSiTf3nnnpk_nTf1cn_n = _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSay8CreateML21RecommendationMetricsVyAF13MLRecommenderV10IdentifierOGG_Sis5NeverOTg503_s8d4ML20hg52V24precisionRecallDataFrame07TabularG00gH0VvgSiAA014f12D0VyAA0C0V10I54OGcfu_32db210c028f2d2ec8bba8c4eeac380409ANSiTf3nnnpk_nTf1cn_n(v20);
    uint64_t v63 = 0;
    swift_bridgeObjectRelease(v20);
    v69[0] = ML21RecommendationMetricsVyAF13MLRecommenderV10IdentifierOGG_Sis5NeverOTg503_s8d4ML20hg52V24precisionRecallDataFrame07TabularG00gH0VvgSiAA014f12D0VyAA0C0V10I54OGcfu_32db210c028f2d2ec8bba8c4eeac380409ANSiTf3nnnpk_nTf1cn_n;
    uint64_t v22 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [Int]);
    uint64_t v23 = lazy protocol witness table accessor for type [String] and conformance [A](&lazy protocol witness table cache variable for type [Int] and conformance [A], &demangling cache variable for type metadata for [Int]);
    double v24 = v67;
    Column.init<A>(name:contents:)(0x64695F72657375, 0xE700000000000000, v69, &type metadata for Int, v22, v23);
    uint64_t v25 = v66;
    Column.eraseToAnyColumn()(v66);
    uint64_t v26 = v24;
    uint64_t v27 = v25;
    uint64_t v28 = v62;
  }
  else
  {
    ML21RecommendationMetricsVyAF13MLRecommenderV10IdentifierOGG_SSs5NeverOTg503_s8d4ML20hg52V24precisionRecallDataFrame07TabularG00gH0VvgSSAA014f12D0VyAA0C0V10I56OGcfu0_33_235e29e00f157aa478c2653b1dced7b5ANSSTf3nnnpk_nTf1cn_n = _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSay8CreateML21RecommendationMetricsVyAF13MLRecommenderV10IdentifierOGG_SSs5NeverOTg503_s8d4ML20hg52V24precisionRecallDataFrame07TabularG00gH0VvgSSAA014f12D0VyAA0C0V10I56OGcfu0_33_235e29e00f157aa478c2653b1dced7b5ANSSTf3nnnpk_nTf1cn_n(v20);
    uint64_t v63 = 0;
    swift_bridgeObjectRelease(v20);
    v69[0] = ML21RecommendationMetricsVyAF13MLRecommenderV10IdentifierOGG_SSs5NeverOTg503_s8d4ML20hg52V24precisionRecallDataFrame07TabularG00gH0VvgSSAA014f12D0VyAA0C0V10I56OGcfu0_33_235e29e00f157aa478c2653b1dced7b5ANSSTf3nnnpk_nTf1cn_n;
    uint64_t v30 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [String]);
    uint64_t v31 = lazy protocol witness table accessor for type [String] and conformance [A](&lazy protocol witness table cache variable for type [String] and conformance [A], &demangling cache variable for type metadata for [String]);
    Column.init<A>(name:contents:)(0x64695F72657375, 0xE700000000000000, v69, &type metadata for String, v30, v31);
    Column.eraseToAnyColumn()(v7);
    uint64_t v26 = v54;
    uint64_t v27 = v7;
    uint64_t v28 = v57;
  }
  (*(void (**)(unsigned char *, uint64_t))(v28 + 8))(v26, v27);
  swift_bridgeObjectRetain(v20);
  ML21RecommendationMetricsVyAF13MLRecommenderV10IdentifierOGG_Sds5NeverOTg503_s8d4ML20hg52V24precisionRecallDataFrame07TabularG00gH0VvgSdAA014f12D0VyAA0C0V10I56OGcfu1_33_4b456801547331c5420659ef3fb1acd8ANSdTf3nnnpk_nTf1cn_n = _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSay8CreateML21RecommendationMetricsVyAF13MLRecommenderV10IdentifierOGG_Sds5NeverOTg503_s8d4ML20hg52V24precisionRecallDataFrame07TabularG00gH0VvgSdAA014f12D0VyAA0C0V10I56OGcfu1_33_4b456801547331c5420659ef3fb1acd8ANSdTf3nnnpk_nTf1cn_n(v20);
  swift_bridgeObjectRelease(v20);
  v69[0] = ML21RecommendationMetricsVyAF13MLRecommenderV10IdentifierOGG_Sds5NeverOTg503_s8d4ML20hg52V24precisionRecallDataFrame07TabularG00gH0VvgSdAA014f12D0VyAA0C0V10I56OGcfu1_33_4b456801547331c5420659ef3fb1acd8ANSdTf3nnnpk_nTf1cn_n;
  uint64_t v33 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [Double]);
  uint64_t v34 = lazy protocol witness table accessor for type [String] and conformance [A](&lazy protocol witness table cache variable for type [Double] and conformance [A], &demangling cache variable for type metadata for [Double]);
  Column.init<A>(name:contents:)(0x6F69736963657270, 0xE90000000000006ELL, v69, &type metadata for Double, v33, v34);
  swift_bridgeObjectRetain(v20);
  ML21RecommendationMetricsVyAF13MLRecommenderV10IdentifierOGG_Sds5NeverOTg503_s8d4ML20hg52V24precisionRecallDataFrame07TabularG00gH0VvgSdAA014f12D0VyAA0C0V10I55OGcfu2_32decee44cba596fcf8548b73bd8347e89ANSdTf3nnnpk_nTf1cn_n = _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSay8CreateML21RecommendationMetricsVyAF13MLRecommenderV10IdentifierOGG_Sds5NeverOTg503_s8d4ML20hg52V24precisionRecallDataFrame07TabularG00gH0VvgSdAA014f12D0VyAA0C0V10I55OGcfu2_32decee44cba596fcf8548b73bd8347e89ANSdTf3nnnpk_nTf1cn_n(v20);
  swift_bridgeObjectRelease(v20);
  v69[0] = ML21RecommendationMetricsVyAF13MLRecommenderV10IdentifierOGG_Sds5NeverOTg503_s8d4ML20hg52V24precisionRecallDataFrame07TabularG00gH0VvgSdAA014f12D0VyAA0C0V10I55OGcfu2_32decee44cba596fcf8548b73bd8347e89ANSdTf3nnnpk_nTf1cn_n;
  Column.init<A>(name:contents:)(0x6C6C61636572, 0xE600000000000000, v69, &type metadata for Double, v33, v34);
  swift_bridgeObjectRetain(v20);
  ML21RecommendationMetricsVyAF13MLRecommenderV10IdentifierOGG_Sis5NeverOTg503_s8d4ML20hg52V24precisionRecallDataFrame07TabularG00gH0VvgSiAA014f12D0VyAA0C0V10I55OGcfu3_32fc1d4ae8e5336075be87b6acecd3eb22ANSiTf3nnnpk_nTf1cn_n = _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSay8CreateML21RecommendationMetricsVyAF13MLRecommenderV10IdentifierOGG_Sis5NeverOTg503_s8d4ML20hg52V24precisionRecallDataFrame07TabularG00gH0VvgSiAA014f12D0VyAA0C0V10I55OGcfu3_32fc1d4ae8e5336075be87b6acecd3eb22ANSiTf3nnnpk_nTf1cn_n(v20);
  swift_bridgeObjectRelease(v20);
  v69[0] = ML21RecommendationMetricsVyAF13MLRecommenderV10IdentifierOGG_Sis5NeverOTg503_s8d4ML20hg52V24precisionRecallDataFrame07TabularG00gH0VvgSiAA014f12D0VyAA0C0V10I55OGcfu3_32fc1d4ae8e5336075be87b6acecd3eb22ANSiTf3nnnpk_nTf1cn_n;
  uint64_t v37 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [Int]);
  uint64_t v38 = lazy protocol witness table accessor for type [String] and conformance [A](&lazy protocol witness table cache variable for type [Int] and conformance [A], &demangling cache variable for type metadata for [Int]);
  Column.init<A>(name:contents:)(0x66666F747563, 0xE600000000000000, v69, &type metadata for Int, v37, v38);
  swift_bridgeObjectRetain(v20);
  ML21RecommendationMetricsVyAF13MLRecommenderV10IdentifierOGG_Sis5NeverOTg503_s8d4ML20hg52V24precisionRecallDataFrame07TabularG00gH0VvgSiAA014f12D0VyAA0C0V10I56OGcfu4_33_54cce98f4845f605e4b42ed7c2562f76ANSiTf3nnnpk_nTf1cn_n = _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSay8CreateML21RecommendationMetricsVyAF13MLRecommenderV10IdentifierOGG_Sis5NeverOTg503_s8d4ML20hg52V24precisionRecallDataFrame07TabularG00gH0VvgSiAA014f12D0VyAA0C0V10I56OGcfu4_33_54cce98f4845f605e4b42ed7c2562f76ANSiTf3nnnpk_nTf1cn_n(v20);
  swift_bridgeObjectRelease(v20);
  v69[0] = ML21RecommendationMetricsVyAF13MLRecommenderV10IdentifierOGG_Sis5NeverOTg503_s8d4ML20hg52V24precisionRecallDataFrame07TabularG00gH0VvgSiAA014f12D0VyAA0C0V10I56OGcfu4_33_54cce98f4845f605e4b42ed7c2562f76ANSiTf3nnnpk_nTf1cn_n;
  Column.init<A>(name:contents:)(0x746E756F63, 0xE500000000000000, v69, &type metadata for Int, v37, v38);
  uint64_t v40 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<AnyColumn>);
  uint64_t v41 = *(unsigned __int8 *)(v60 + 80);
  uint64_t v42 = v60;
  uint64_t v43 = ((int)v41 + 32) & ~*(unsigned __int8 *)(v60 + 80);
  uint64_t v44 = swift_allocObject(v40, v43 + 5 * *(void *)(v60 + 72), v41 | 7);
  *(void *)(v44 + 16) = 5;
  *(void *)(v44 + 24) = 10;
  (*(void (**)(uint64_t, unsigned char *, uint64_t))(v42 + 16))(v44 + v43, v68, v59);
  Column.eraseToAnyColumn()(v66);
  uint64_t v45 = v58;
  Column.eraseToAnyColumn()(v58);
  Column.eraseToAnyColumn()(v45);
  uint64_t v46 = v66;
  uint64_t v47 = v61;
  Column.eraseToAnyColumn()(v66);
  v69[0] = v44;
  uint64_t v48 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [AnyColumn]);
  uint64_t v49 = lazy protocol witness table accessor for type [String] and conformance [A](&lazy protocol witness table cache variable for type [AnyColumn] and conformance [A], &demangling cache variable for type metadata for [AnyColumn]);
  DataFrame.init<A>(columns:)(v69, v48, v49);
  uint64_t v50 = *(void (**)(unsigned char *, uint64_t))(v62 + 8);
  v50(v47, v46);
  v50(v67, v46);
  uint64_t v51 = *(void (**)(unsigned char *, uint64_t))(v55 + 8);
  uint64_t v52 = v58;
  v51(v64, v58);
  v51(v65, v52);
  return (*(uint64_t (**)(unsigned char *, uint64_t))(v60 + 8))(v68, v59);
}

void *_sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSay8CreateML21RecommendationMetricsVyAF13MLRecommenderV10IdentifierOGG_Sis5NeverOTg503_s8d4ML20hg52V24precisionRecallDataFrame07TabularG00gH0VvgSiAA014f12D0VyAA0C0V10I54OGcfu_32db210c028f2d2ec8bba8c4eeac380409ANSiTf3nnnpk_nTf1cn_n(uint64_t a1)
{
  int64_t v1 = *(void *)(a1 + 16);
  if (!v1) {
    return _swiftEmptyArrayStorage;
  }
  specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v1, 0);
  uint64_t result = _swiftEmptyArrayStorage;
  unint64_t v3 = (unsigned char *)(a1 + 48);
  do
  {
    if (*v3 != 1) {
      BUG();
    }
    uint64_t v4 = *((void *)v3 - 2);
    uint64_t v7 = result;
    unint64_t v5 = result[2];
    int64_t v6 = v5 + 1;
    if (result[3] >> 1 <= v5)
    {
      specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(result[3] >= 2uLL, v6, 1);
      int64_t v6 = v5 + 1;
      uint64_t result = v7;
    }
    result[2] = v6;
    result[v5 + 4] = v4;
    v3 += 56;
    --v1;
  }
  while (v1);
  return result;
}

void *_sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSay8CreateML21RecommendationMetricsVyAF13MLRecommenderV10IdentifierOGG_Sis5NeverOTg503_s8d4ML20hg52V24precisionRecallDataFrame07TabularG00gH0VvgSiAA014f12D0VyAA0C0V10I55OGcfu3_32fc1d4ae8e5336075be87b6acecd3eb22ANSiTf3nnnpk_nTf1cn_n(uint64_t a1)
{
  int64_t v1 = *(void *)(a1 + 16);
  if (!v1) {
    return _swiftEmptyArrayStorage;
  }
  specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v1, 0);
  uint64_t result = _swiftEmptyArrayStorage;
  unint64_t v3 = (uint64_t *)(a1 + 56);
  do
  {
    uint64_t v4 = *v3;
    uint64_t v7 = result;
    unint64_t v5 = result[2];
    int64_t v6 = v5 + 1;
    if (result[3] >> 1 <= v5)
    {
      specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(result[3] >= 2uLL, v6, 1);
      int64_t v6 = v5 + 1;
      uint64_t result = v7;
    }
    result[2] = v6;
    result[v5 + 4] = v4;
    v3 += 7;
    --v1;
  }
  while (v1);
  return result;
}

void *_sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSay8CreateML21RecommendationMetricsVyAF13MLRecommenderV10IdentifierOGG_Sis5NeverOTg503_s8d4ML20hg52V24precisionRecallDataFrame07TabularG00gH0VvgSiAA014f12D0VyAA0C0V10I56OGcfu4_33_54cce98f4845f605e4b42ed7c2562f76ANSiTf3nnnpk_nTf1cn_n(uint64_t a1)
{
  int64_t v1 = *(void *)(a1 + 16);
  if (!v1) {
    return _swiftEmptyArrayStorage;
  }
  specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v1, 0);
  uint64_t result = _swiftEmptyArrayStorage;
  unint64_t v3 = (uint64_t *)(a1 + 80);
  do
  {
    uint64_t v4 = *v3;
    uint64_t v7 = result;
    unint64_t v5 = result[2];
    int64_t v6 = v5 + 1;
    if (result[3] >> 1 <= v5)
    {
      specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(result[3] >= 2uLL, v6, 1);
      int64_t v6 = v5 + 1;
      uint64_t result = v7;
    }
    result[2] = v6;
    result[v5 + 4] = v4;
    v3 += 7;
    --v1;
  }
  while (v1);
  return result;
}

void *_sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSay8CreateML21RecommendationMetricsVyAF13MLRecommenderV10IdentifierOGG_SSs5NeverOTg503_s8d4ML20hg52V24precisionRecallDataFrame07TabularG00gH0VvgSSAA014f12D0VyAA0C0V10I56OGcfu0_33_235e29e00f157aa478c2653b1dced7b5ANSSTf3nnnpk_nTf1cn_n(uint64_t a1)
{
  int64_t v1 = *(void *)(a1 + 16);
  if (!v1) {
    return _swiftEmptyArrayStorage;
  }
  specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v1, 0);
  uint64_t result = _swiftEmptyArrayStorage;
  unint64_t v3 = (char *)(a1 + 48);
  do
  {
    char v13 = result;
    int64_t v11 = v1;
    uint64_t v4 = *((void *)v3 - 2);
    uint64_t v5 = *((void *)v3 - 1);
    char v6 = *v3;
    if (*v3)
    {
      uint64_t v12 = 0;
      uint64_t v7 = 0;
    }
    else
    {
      uint64_t v8 = *((void *)v3 - 2);
      outlined copy of MLRecommender.Identifier(v4, *((void *)v3 - 1), 0);
      swift_bridgeObjectRetain(v5);
      uint64_t v4 = v8;
      uint64_t v12 = v8;
      uint64_t v7 = v5;
    }
    outlined consume of MLRecommender.Identifier(v4, v5, v6);
    if (!v7) {
      BUG();
    }
    uint64_t result = v13;
    unint64_t v9 = v13[2];
    if (v13[3] >> 1 <= v9)
    {
      specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v13[3] >= 2uLL, v9 + 1, 1);
      uint64_t result = v13;
    }
    result[2] = v9 + 1;
    uint64_t v10 = 2 * v9;
    result[v10 + 4] = v12;
    result[v10 + 5] = v7;
    v3 += 56;
    int64_t v1 = v11 - 1;
  }
  while (v11 != 1);
  return result;
}

void *_sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSay8CreateML21RecommendationMetricsVyAF13MLRecommenderV10IdentifierOGG_Sds5NeverOTg503_s8d4ML20hg52V24precisionRecallDataFrame07TabularG00gH0VvgSdAA014f12D0VyAA0C0V10I56OGcfu1_33_4b456801547331c5420659ef3fb1acd8ANSdTf3nnnpk_nTf1cn_n(uint64_t a1)
{
  int64_t v1 = *(void *)(a1 + 16);
  if (!v1) {
    return _swiftEmptyArrayStorage;
  }
  specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v1, 0);
  uint64_t result = _swiftEmptyArrayStorage;
  unint64_t v3 = (uint64_t *)(a1 + 64);
  do
  {
    uint64_t v4 = *v3;
    uint64_t v7 = result;
    unint64_t v5 = result[2];
    int64_t v6 = v5 + 1;
    if (result[3] >> 1 <= v5)
    {
      specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(result[3] >= 2uLL, v6, 1);
      int64_t v6 = v5 + 1;
      uint64_t result = v7;
    }
    result[2] = v6;
    result[v5 + 4] = v4;
    v3 += 7;
    --v1;
  }
  while (v1);
  return result;
}

void *_sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSay8CreateML21RecommendationMetricsVyAF13MLRecommenderV10IdentifierOGG_Sds5NeverOTg503_s8d4ML20hg52V24precisionRecallDataFrame07TabularG00gH0VvgSdAA014f12D0VyAA0C0V10I55OGcfu2_32decee44cba596fcf8548b73bd8347e89ANSdTf3nnnpk_nTf1cn_n(uint64_t a1)
{
  int64_t v1 = *(void *)(a1 + 16);
  if (!v1) {
    return _swiftEmptyArrayStorage;
  }
  specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v1, 0);
  uint64_t result = _swiftEmptyArrayStorage;
  unint64_t v3 = (uint64_t *)(a1 + 72);
  do
  {
    uint64_t v4 = *v3;
    uint64_t v7 = result;
    unint64_t v5 = result[2];
    int64_t v6 = v5 + 1;
    if (result[3] >> 1 <= v5)
    {
      specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(result[3] >= 2uLL, v6, 1);
      int64_t v6 = v5 + 1;
      uint64_t result = v7;
    }
    result[2] = v6;
    result[v5 + 4] = v4;
    v3 += 7;
    --v1;
  }
  while (v1);
  return result;
}

uint64_t lazy protocol witness table accessor for type [String] and conformance [A](uint64_t *a1, uint64_t *a2)
{
  uint64_t result = *a1;
  if (!*a1)
  {
    uint64_t v3 = __swift_instantiateConcreteTypeFromMangledNameAbstract(a2);
    uint64_t result = swift_getWitnessTable(&protocol conformance descriptor for [A], v3);
    *a1 = result;
  }
  return result;
}

void *_sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSnySiG_8CreateML21RecommendationMetricsVyAG13MLRecommenderV10IdentifierOGs5NeverOTg503_s8d4ML20hg66V15precisionRecall17excludingObservedAcA11MLDataTableV_SbtcfcAA014f12D0VyAA0C0V10I9OGSiXEfU_AG15MLUntypedColumnVA3STf1cn_nTm(uint64_t a1, uint64_t a2, uint64_t a3, int a4, uint64_t a5, int a6, uint64_t a7, char a8, uint64_t a9, char a10, int a11, void (*a12)(uint64_t *, uint64_t, void, uint64_t, void, uint64_t, uint64_t, uint64_t, uint64_t))
{
  uint64_t v47 = a5;
  uint64_t v49 = a3;
  uint64_t v50 = a1;
  uint64_t v13 = a2 - a1;
  if (__OFSUB__(a2, a1)) {
    BUG();
  }
  uint64_t v51 = v12;
  LOBYTE(a4) = a4 & 1;
  LOBYTE(a6) = a6 & 1;
  int v52 = a6;
  unsigned __int8 v54 = a8 & 1;
  unsigned __int8 v55 = a10 & 1;
  if (v13)
  {
    uint64_t v14 = a2;
    int v53 = a4;
    uint64_t v48 = _swiftEmptyArrayStorage;
    int64_t v15 = 0;
    if (v13 > 0) {
      int64_t v15 = v13;
    }
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v15, 0);
    if (v13 < 0) {
      BUG();
    }
    int64_t v16 = v48;
    uint64_t v39 = v55;
    uint64_t v40 = v54;
    unsigned int v45 = v53;
    unsigned int v46 = v52;
    uint64_t v17 = v50;
    uint64_t v18 = v51;
    uint64_t v41 = v14;
    while (1)
    {
      if (v14 == v17) {
        BUG();
      }
      uint64_t v38 = v17;
      a12(&v38, v49, v45, v47, v46, a7, v40, a9, v39);
      if (v18) {
        break;
      }
      long long v19 = v33;
      uint64_t v20 = v35;
      long long v21 = v36;
      uint64_t v22 = v37;
      uint64_t v48 = v16;
      unint64_t v23 = v16[2];
      unint64_t v24 = v16[3];
      int64_t v25 = v23 + 1;
      if (v24 >> 1 <= v23)
      {
        uint64_t v43 = v37;
        uint64_t v42 = v35;
        uint64_t v51 = 0;
        int64_t v44 = v23 + 1;
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v24 >= 2, v25, 1);
        int64_t v25 = v44;
        uint64_t v22 = v43;
        long long v21 = v36;
        uint64_t v20 = v42;
        long long v19 = v33;
        uint64_t v18 = v51;
        int64_t v16 = v48;
      }
      uint64_t v26 = 7 * v23;
      v16[2] = v25;
      *(_OWORD *)&v16[v26 + 4] = v19;
      LOBYTE(v16[v26 + 6]) = v34 & 1;
      v16[v26 + 7] = v20;
      *(_OWORD *)&v16[v26 + 8] = v21;
      v16[v26 + 10] = v22;
      uint64_t v14 = v41;
      if (v41 < v50) {
        BUG();
      }
      if (v17 >= v41) {
        BUG();
      }
      if (v41 == ++v17)
      {
        uint64_t v51 = v18;
        outlined consume of Result<_DataTable, Error>(v49, (_BYTE)v53 != 0);
        goto LABEL_17;
      }
    }
    LODWORD(v50) = v55 != 0;
    char v27 = v54 != 0;
    char v28 = (_BYTE)v52 != 0;
    char v29 = (_BYTE)v53 != 0;
    swift_release(v16);
    outlined consume of Result<_DataTable, Error>(v49, v29);
    outlined consume of Result<_DataTable, Error>(v47, v28);
    outlined consume of Result<_DataTable, Error>(a7, v27);
    outlined consume of Result<_DataTable, Error>(a9, v50);
  }
  else
  {
    outlined consume of Result<_DataTable, Error>(v49, (_BYTE)a4 != 0);
    int64_t v16 = _swiftEmptyArrayStorage;
LABEL_17:
    char v30 = v55 != 0;
    char v31 = v54 != 0;
    outlined consume of Result<_DataTable, Error>(v47, (_BYTE)v52 != 0);
    outlined consume of Result<_DataTable, Error>(a7, v31);
    outlined consume of Result<_DataTable, Error>(a9, v30);
  }
  return v16;
}

uint64_t MLRecommenderMetrics.precisionRecall.getter(__m128 a1)
{
  int64_t v2 = *(void *)(*(void *)(type metadata accessor for DataFrame(0) - 8) + 64);
  uint64_t v3 = alloca(v2);
  uint64_t v4 = alloca(v2);
  uint64_t v5 = *(void *)(v1 + 8);
  char v6 = *(unsigned char *)(v1 + 16);
  uint64_t v7 = *(void *)(v1 + 24);
  v9[16] = *(unsigned char *)v1;
  uint64_t v10 = v5;
  char v11 = v6;
  uint64_t v12 = v7;
  *(double *)a1.i64 = MLRecommenderMetrics.precisionRecallDataFrame.getter();
  return MLDataTable.init(_:convertArraysToShapedArrays:)((uint64_t)v9, 0, a1);
}

char MLRecommenderMetrics.init(precisionRecall:excludingObserved:)(uint64_t a1, int a2, double a3)
{
  int v24 = a2;
  int64_t v16 = v3;
  int v5 = *(_DWORD *)(a1 + 8);
  uint64_t v4 = *(void *)a1;
  outlined copy of Result<_DataTable, Error>(*(void *)a1, v5);
  v6._countAndFlagsBits = 0x64695F72657375;
  v6._object = (void *)0xE700000000000000;
  MLDataTable.subscript.getter(v6);
  outlined consume of Result<_DataTable, Error>(v4, v5);
  uint64_t v15 = (uint64_t)v17;
  char v25 = (char)v18;
  outlined copy of Result<_DataTable, Error>(v4, v5);
  v6._countAndFlagsBits = 0x6F69736963657270;
  v6._object = (void *)0xE90000000000006ELL;
  MLDataTable.subscript.getter(v6);
  outlined consume of Result<_DataTable, Error>(v4, v5);
  uint64_t v20 = (uint64_t)v17;
  char v26 = (char)v18;
  outlined copy of Result<_DataTable, Error>(v4, v5);
  v6._countAndFlagsBits = 0x6C6C61636572;
  v6._object = (void *)0xE600000000000000;
  MLDataTable.subscript.getter(v6);
  outlined consume of Result<_DataTable, Error>(v4, v5);
  uint64_t v21 = (uint64_t)v17;
  char v27 = (char)v18;
  uint64_t v22 = v4;
  char v23 = v5 & 1;
  v6._countAndFlagsBits = 0x66666F747563;
  v6._object = (void *)0xE600000000000000;
  MLDataTable.subscript.getter(v6);
  outlined consume of Result<_DataTable, Error>(v4, v5);
  if (!(_BYTE)v18)
  {
    outlined copy of Result<_DataTable, Error>(v15, 0);
    _UntypedColumn.valueAtIndex(index:)(0, a3);
    outlined consume of Result<_DataTable, Error>(v15, 0);
    switch(v19)
    {
      case 0:
        outlined copy of Result<_DataTable, Error>(v15, 0);
        uint64_t v7 = CMLColumn.size.getter();
        outlined consume of Result<_DataTable, Error>(v15, 0);
        if (v7 < 0) {
          BUG();
        }
        ML21RecommendationMetricsVyAG13MLRecommenderV10IdentifierOGs5NeverOTg503_s8d4ML20hg66V15precisionRecall17excludingObservedAcA11MLDataTableV_SbtcfcAA014f12D0VyAA0C0V10I9OGSiXEfU_AG15MLUntypedColumnVA3STf1cn_nTm = _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSnySiG_8CreateML21RecommendationMetricsVyAG13MLRecommenderV10IdentifierOGs5NeverOTg503_s8d4ML20hg66V15precisionRecall17excludingObservedAcA11MLDataTableV_SbtcfcAA014f12D0VyAA0C0V10I9OGSiXEfU_AG15MLUntypedColumnVA3STf1cn_nTm(0, v7, v15, 0, (uint64_t)v17, 0, v20, v26, v21, v27, (int)&v14, (void (*)(uint64_t *, uint64_t, void, uint64_t, void, uint64_t, uint64_t, uint64_t, uint64_t))closure #2 in MLRecommenderMetrics.init(precisionRecall:excludingObserved:));
        char v9 = 1;
        goto LABEL_7;
      case 1:
      case 6:
        break;
      case 2:
        outlined consume of MLDataValue(v17, v18, 2);
        outlined copy of Result<_DataTable, Error>(v15, 0);
        uint64_t v10 = CMLColumn.size.getter();
        outlined consume of Result<_DataTable, Error>(v15, 0);
        if (v10 < 0) {
          BUG();
        }
        char v9 = 0;
        ML21RecommendationMetricsVyAG13MLRecommenderV10IdentifierOGs5NeverOTg503_s8d4ML20hg66V15precisionRecall17excludingObservedAcA11MLDataTableV_SbtcfcAA014f12D0VyAA0C0V10I9OGSiXEfU_AG15MLUntypedColumnVA3STf1cn_nTm = _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSnySiG_8CreateML21RecommendationMetricsVyAG13MLRecommenderV10IdentifierOGs5NeverOTg503_s8d4ML20hg66V15precisionRecall17excludingObservedAcA11MLDataTableV_SbtcfcAA014f12D0VyAA0C0V10I9OGSiXEfU_AG15MLUntypedColumnVA3STf1cn_nTm(0, v10, v15, 0, (uint64_t)v17, 0, v20, v26, v21, v27, (int)&v13, (void (*)(uint64_t *, uint64_t, void, uint64_t, void, uint64_t, uint64_t, uint64_t, uint64_t))closure #1 in MLRecommenderMetrics.init(precisionRecall:excludingObserved:));
LABEL_7:
        char v11 = v16;
        char *v16 = v9;
        *((void *)v11 + 1) = ML21RecommendationMetricsVyAG13MLRecommenderV10IdentifierOGs5NeverOTg503_s8d4ML20hg66V15precisionRecall17excludingObservedAcA11MLDataTableV_SbtcfcAA014f12D0VyAA0C0V10I9OGSiXEfU_AG15MLUntypedColumnVA3STf1cn_nTm;
        char result = v24 & 1;
        v11[16] = v24 & 1;
        *((void *)v11 + 3) = 0;
        return result;
      case 3:
        outlined consume of MLDataValue(v17, v18, 3);
        break;
      case 4:
        outlined consume of MLDataValue(v17, v18, 4);
        break;
      case 5:
        outlined consume of MLDataValue(v17, v18, 5);
        break;
    }
  }
  _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, 0xD000000000000027, "menderMetrics.swift" + 0x8000000000000000, "CreateML/MLRecommenderMetrics.swift", 35, 2, 100, 0);
  BUG();
}

void closure #1 in MLRecommenderMetrics.init(precisionRecall:excludingObserved:)(uint64_t *a1, uint64_t a2, char a3, uint64_t a4, char a5, double a6)
{
  if ((a3 & 1) == 0)
  {
    uint64_t v6 = *a1;
    outlined copy of Result<_DataTable, Error>(a2, 0);
    _UntypedColumn.valueAtIndex(index:)(v6, a6);
    outlined consume of Result<_DataTable, Error>(a2, 0);
    if (v10 == 2)
    {
      if ((a5 & 1) == 0)
      {
        outlined copy of Result<_DataTable, Error>(a4, 0);
        _UntypedColumn.valueAtIndex(index:)(v6, a6);
        outlined consume of Result<_DataTable, Error>(a4, 0);
        outlined consume of MLDataValue(v8, v9, v10);
      }
      BUG();
    }
    outlined consume of MLDataValue(v8, v9, v10);
  }
  BUG();
}

void closure #2 in MLRecommenderMetrics.init(precisionRecall:excludingObserved:)(uint64_t *a1, uint64_t a2, char a3, uint64_t a4, char a5, uint64_t a6, double a7, char a8)
{
  if ((a3 & 1) == 0)
  {
    uint64_t v8 = *a1;
    outlined copy of Result<_DataTable, Error>(a2, 0);
    _UntypedColumn.valueAtIndex(index:)(v8, a7);
    outlined consume of Result<_DataTable, Error>(a2, 0);
    if (!v13)
    {
      if ((a5 & 1) == 0)
      {
        outlined copy of Result<_DataTable, Error>(a4, 0);
        _UntypedColumn.valueAtIndex(index:)(v8, a7);
        outlined consume of Result<_DataTable, Error>(a4, 0);
        if ((a8 & 1) == 0)
        {
          outlined copy of Result<_DataTable, Error>(a6, 0);
          _UntypedColumn.valueAtIndex(index:)(v8, a7);
          outlined consume of Result<_DataTable, Error>(a6, 0);
          outlined consume of MLDataValue(v11, v12, v13);
        }
        BUG();
      }
      BUG();
    }
    outlined consume of MLDataValue(v11, v12, v13);
  }
  BUG();
}

uint64_t outlined copy of Result<_DataTable, Error>(uint64_t a1, char a2)
{
  if (a2) {
    return swift_errorRetain(a1);
  }
  else {
    return swift_retain(a1);
  }
}

uint64_t outlined consume of Result<_DataTable, Error>(uint64_t a1, char a2)
{
  if (a2) {
    return swift_errorRelease();
  }
  else {
    return swift_release();
  }
}

uint64_t destroy for MLRecommenderMetrics(uint64_t a1)
{
  return swift_errorRelease(*(void *)(a1 + 24));
}

uint64_t initializeWithCopy for MLRecommenderMetrics(uint64_t a1, uint64_t a2)
{
  *(unsigned char *)a1 = *(unsigned char *)a2;
  uint64_t v3 = *(void *)(a2 + 8);
  *(void *)(a1 + 8) = v3;
  *(unsigned char *)(a1 + 16) = *(unsigned char *)(a2 + 16);
  uint64_t v4 = *(void *)(a2 + 24);
  swift_bridgeObjectRetain(v3);
  swift_errorRetain(v4);
  *(void *)(a1 + 24) = v4;
  return a1;
}

uint64_t assignWithCopy for MLRecommenderMetrics(uint64_t a1, uint64_t a2)
{
  *(unsigned char *)a1 = *(unsigned char *)a2;
  uint64_t v3 = *(void *)(a2 + 8);
  uint64_t v4 = *(void *)(a1 + 8);
  *(void *)(a1 + 8) = v3;
  swift_bridgeObjectRetain(v3);
  swift_bridgeObjectRelease(v4);
  *(unsigned char *)(a1 + 16) = *(unsigned char *)(a2 + 16);
  uint64_t v5 = *(void *)(a1 + 24);
  uint64_t v6 = *(void *)(a2 + 24);
  swift_errorRetain(v6);
  *(void *)(a1 + 24) = v6;
  swift_errorRelease(v5);
  return a1;
}

uint64_t assignWithTake for MLRecommenderMetrics(uint64_t a1, uint64_t a2)
{
  *(unsigned char *)a1 = *(unsigned char *)a2;
  uint64_t v3 = *(void *)(a1 + 8);
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  swift_bridgeObjectRelease(v3);
  *(unsigned char *)(a1 + 16) = *(unsigned char *)(a2 + 16);
  uint64_t v4 = *(void *)(a1 + 24);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  swift_errorRelease(v4);
  return a1;
}

uint64_t getEnumTagSinglePayload for MLRecommenderMetrics(uint64_t a1, int a2)
{
  if (a2)
  {
    if (a2 < 0 && *(unsigned char *)(a1 + 32)) {
      int v2 = *(_DWORD *)a1 + 0x7FFFFFFF;
    }
    else {
      int v2 = (*(void *)(a1 + 8) & 0xFFFFFFFF00000001) != 0 ? -1 : *(void *)(a1 + 8) >> 1;
    }
  }
  else
  {
    int v2 = -1;
  }
  return (v2 + 1);
}

void storeEnumTagSinglePayload for MLRecommenderMetrics(uint64_t a1, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)(a1 + 24) = 0;
    *(_OWORD *)(a1 + 8) = 0;
    *(void *)a1 = a2 + 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(a1 + 32) = 1;
    }
  }
  else
  {
    if (a3 < 0) {
      *(unsigned char *)(a1 + 32) = 0;
    }
    if (a2) {
      *(void *)(a1 + 8) = 2 * (a2 - 1);
    }
  }
}

ValueMetadata *type metadata accessor for MLRecommenderMetrics()
{
  return &type metadata for MLRecommenderMetrics;
}

uint64_t outlined consume of MLRecommender.Identifier(uint64_t a1, uint64_t a2, char a3)
{
  if ((a3 & 1) == 0) {
    return swift_bridgeObjectRelease(a2);
  }
  return result;
}

void *_sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSay11TabularData6ColumnVySaySdGGG_SSs5NeverOTg50114_s8CreateML20MLActivityClassifierV12trainingData10parametersA2C0F6SourceO7ColumnsV_AC15ModelParametersVtYaKcfcSS07d3F06F62VySaySdGGcfu_33_58e95aa1613cac7a093349ae610302fdAPSSTf3nnnpk_nTf1cn_nTm(uint64_t a1)
{
  int64_t v1 = *(void *)(a1 + 16);
  if (v1)
  {
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v1, 0);
    uint64_t v2 = *(void *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Column<[Double]>)
                   - 8);
    uint64_t v3 = ((*(unsigned __int8 *)(v2 + 80) + 32) & ~*(unsigned __int8 *)(v2 + 80)) + a1;
    uint64_t v12 = *(void *)(v2 + 72);
    do
    {
      uint64_t KeyPath = swift_getKeyPath(&unk_346BD0);
      swift_getAtKeyPath(v3, KeyPath);
      swift_release();
      int64_t v11 = v1;
      if (!swift_isUniquelyReferenced_nonNull_native(_swiftEmptyArrayStorage)) {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, _swiftEmptyArrayStorage[2] + 1, 1);
      }
      unint64_t v5 = _swiftEmptyArrayStorage[2];
      unint64_t v6 = v5 + 1;
      if (_swiftEmptyArrayStorage[3] >> 1 <= v5)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(_swiftEmptyArrayStorage[3] >= 2uLL, v5 + 1, 1);
        unint64_t v6 = v5 + 1;
      }
      _swiftEmptyArrayStorage[2] = v6;
      uint64_t v7 = 2 * v5;
      _swiftEmptyArrayStorage[v7 + 4] = v9;
      _swiftEmptyArrayStorage[v7 + 5] = v10;
      v3 += v12;
      int64_t v1 = v11 - 1;
    }
    while (v11 != 1);
  }
  return _swiftEmptyArrayStorage;
}

uint64_t one-time initialization function for _defaultSessionParameters()
{
  uint64_t v0 = (int *)type metadata accessor for MLTrainingSessionParameters(0);
  __swift_allocate_value_buffer((uint64_t)v0, static MLActivityClassifier._defaultSessionParameters);
  uint64_t v1 = __swift_project_value_buffer((uint64_t)v0, (uint64_t)static MLActivityClassifier._defaultSessionParameters);
  uint64_t v2 = type metadata accessor for URL(0);
  __swift_storeEnumTagSinglePayload(v1, 1, 1, v2);
  uint64_t result = v0[5];
  uint64_t v4 = v0[6];
  uint64_t v5 = v0[7];
  *(void *)(v1 + result) = 5;
  *(void *)(v1 + v4) = 10;
  *(void *)(v1 + v5) = 1000;
  return result;
}

{
  int *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t result;
  uint64_t v4;
  uint64_t v5;

  uint64_t v0 = (int *)type metadata accessor for MLTrainingSessionParameters(0);
  __swift_allocate_value_buffer((uint64_t)v0, static MLHandPoseClassifier._defaultSessionParameters);
  uint64_t v1 = __swift_project_value_buffer((uint64_t)v0, (uint64_t)static MLHandPoseClassifier._defaultSessionParameters);
  uint64_t v2 = type metadata accessor for URL(0);
  __swift_storeEnumTagSinglePayload(v1, 1, 1, v2);
  uint64_t result = v0[5];
  uint64_t v4 = v0[6];
  uint64_t v5 = v0[7];
  *(void *)(v1 + result) = 10;
  *(void *)(v1 + v4) = 20;
  *(void *)(v1 + v5) = 1000;
  return result;
}

{
  int *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t result;
  uint64_t v4;
  uint64_t v5;

  uint64_t v0 = (int *)type metadata accessor for MLTrainingSessionParameters(0);
  __swift_allocate_value_buffer((uint64_t)v0, static MLRandomForestRegressor._defaultSessionParameters);
  uint64_t v1 = __swift_project_value_buffer((uint64_t)v0, (uint64_t)static MLRandomForestRegressor._defaultSessionParameters);
  uint64_t v2 = type metadata accessor for URL(0);
  __swift_storeEnumTagSinglePayload(v1, 1, 1, v2);
  uint64_t result = v0[5];
  uint64_t v4 = v0[6];
  uint64_t v5 = v0[7];
  *(void *)(v1 + result) = 10;
  *(void *)(v1 + v4) = 50;
  *(void *)(v1 + v5) = 1000;
  return result;
}

{
  int *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t result;
  uint64_t v4;
  uint64_t v5;

  uint64_t v0 = (int *)type metadata accessor for MLTrainingSessionParameters(0);
  __swift_allocate_value_buffer((uint64_t)v0, static MLLogisticRegressionClassifier._defaultSessionParameters);
  uint64_t v1 = __swift_project_value_buffer((uint64_t)v0, (uint64_t)static MLLogisticRegressionClassifier._defaultSessionParameters);
  uint64_t v2 = type metadata accessor for URL(0);
  __swift_storeEnumTagSinglePayload(v1, 1, 1, v2);
  uint64_t result = v0[5];
  uint64_t v4 = v0[6];
  uint64_t v5 = v0[7];
  *(void *)(v1 + result) = 10;
  *(void *)(v1 + v4) = 50;
  *(void *)(v1 + v5) = 1000;
  return result;
}

{
  int *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t result;
  uint64_t v4;
  uint64_t v5;

  uint64_t v0 = (int *)type metadata accessor for MLTrainingSessionParameters(0);
  __swift_allocate_value_buffer((uint64_t)v0, static MLDecisionTreeRegressor._defaultSessionParameters);
  uint64_t v1 = __swift_project_value_buffer((uint64_t)v0, (uint64_t)static MLDecisionTreeRegressor._defaultSessionParameters);
  uint64_t v2 = type metadata accessor for URL(0);
  __swift_storeEnumTagSinglePayload(v1, 1, 1, v2);
  uint64_t result = v0[5];
  uint64_t v4 = v0[6];
  uint64_t v5 = v0[7];
  *(void *)(v1 + result) = 10;
  *(void *)(v1 + v4) = 50;
  *(void *)(v1 + v5) = 1000;
  return result;
}

{
  int *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t result;
  uint64_t v4;
  uint64_t v5;

  uint64_t v0 = (int *)type metadata accessor for MLTrainingSessionParameters(0);
  __swift_allocate_value_buffer((uint64_t)v0, static MLImageClassifier._defaultSessionParameters);
  uint64_t v1 = __swift_project_value_buffer((uint64_t)v0, (uint64_t)static MLImageClassifier._defaultSessionParameters);
  uint64_t v2 = type metadata accessor for URL(0);
  __swift_storeEnumTagSinglePayload(v1, 1, 1, v2);
  uint64_t result = v0[5];
  uint64_t v4 = v0[6];
  uint64_t v5 = v0[7];
  *(void *)(v1 + result) = 10;
  *(void *)(v1 + v4) = 50;
  *(void *)(v1 + v5) = 1000;
  return result;
}

{
  int *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t result;
  uint64_t v4;
  uint64_t v5;

  uint64_t v0 = (int *)type metadata accessor for MLTrainingSessionParameters(0);
  __swift_allocate_value_buffer((uint64_t)v0, static MLActionClassifier._defaultSessionParameters);
  uint64_t v1 = __swift_project_value_buffer((uint64_t)v0, (uint64_t)static MLActionClassifier._defaultSessionParameters);
  uint64_t v2 = type metadata accessor for URL(0);
  __swift_storeEnumTagSinglePayload(v1, 1, 1, v2);
  uint64_t result = v0[5];
  uint64_t v4 = v0[6];
  uint64_t v5 = v0[7];
  *(void *)(v1 + result) = 10;
  *(void *)(v1 + v4) = 20;
  *(void *)(v1 + v5) = 1000;
  return result;
}

{
  int *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t result;
  uint64_t v4;
  uint64_t v5;

  uint64_t v0 = (int *)type metadata accessor for MLTrainingSessionParameters(0);
  __swift_allocate_value_buffer((uint64_t)v0, static MLHandActionClassifier._defaultSessionParameters);
  uint64_t v1 = __swift_project_value_buffer((uint64_t)v0, (uint64_t)static MLHandActionClassifier._defaultSessionParameters);
  uint64_t v2 = type metadata accessor for URL(0);
  __swift_storeEnumTagSinglePayload(v1, 1, 1, v2);
  uint64_t result = v0[5];
  uint64_t v4 = v0[6];
  uint64_t v5 = v0[7];
  *(void *)(v1 + result) = 10;
  *(void *)(v1 + v4) = 20;
  *(void *)(v1 + v5) = 1000;
  return result;
}

{
  int *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t result;
  uint64_t v4;
  uint64_t v5;

  uint64_t v0 = (int *)type metadata accessor for MLTrainingSessionParameters(0);
  __swift_allocate_value_buffer((uint64_t)v0, static MLRandomForestClassifier._defaultSessionParameters);
  uint64_t v1 = __swift_project_value_buffer((uint64_t)v0, (uint64_t)static MLRandomForestClassifier._defaultSessionParameters);
  uint64_t v2 = type metadata accessor for URL(0);
  __swift_storeEnumTagSinglePayload(v1, 1, 1, v2);
  uint64_t result = v0[5];
  uint64_t v4 = v0[6];
  uint64_t v5 = v0[7];
  *(void *)(v1 + result) = 10;
  *(void *)(v1 + v4) = 50;
  *(void *)(v1 + v5) = 1000;
  return result;
}

{
  int *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t result;
  uint64_t v4;
  uint64_t v5;

  uint64_t v0 = (int *)type metadata accessor for MLTrainingSessionParameters(0);
  __swift_allocate_value_buffer((uint64_t)v0, static MLBoostedTreeRegressor._defaultSessionParameters);
  uint64_t v1 = __swift_project_value_buffer((uint64_t)v0, (uint64_t)static MLBoostedTreeRegressor._defaultSessionParameters);
  uint64_t v2 = type metadata accessor for URL(0);
  __swift_storeEnumTagSinglePayload(v1, 1, 1, v2);
  uint64_t result = v0[5];
  uint64_t v4 = v0[6];
  uint64_t v5 = v0[7];
  *(void *)(v1 + result) = 10;
  *(void *)(v1 + v4) = 50;
  *(void *)(v1 + v5) = 1000;
  return result;
}

{
  int *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t result;
  uint64_t v4;
  uint64_t v5;

  uint64_t v0 = (int *)type metadata accessor for MLTrainingSessionParameters(0);
  __swift_allocate_value_buffer((uint64_t)v0, static MLDecisionTreeClassifier._defaultSessionParameters);
  uint64_t v1 = __swift_project_value_buffer((uint64_t)v0, (uint64_t)static MLDecisionTreeClassifier._defaultSessionParameters);
  uint64_t v2 = type metadata accessor for URL(0);
  __swift_storeEnumTagSinglePayload(v1, 1, 1, v2);
  uint64_t result = v0[5];
  uint64_t v4 = v0[6];
  uint64_t v5 = v0[7];
  *(void *)(v1 + result) = 10;
  *(void *)(v1 + v4) = 50;
  *(void *)(v1 + v5) = 1000;
  return result;
}

{
  int *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t result;
  uint64_t v4;
  uint64_t v5;

  uint64_t v0 = (int *)type metadata accessor for MLTrainingSessionParameters(0);
  __swift_allocate_value_buffer((uint64_t)v0, static MLSoundClassifier._defaultSessionParameters);
  uint64_t v1 = __swift_project_value_buffer((uint64_t)v0, (uint64_t)static MLSoundClassifier._defaultSessionParameters);
  uint64_t v2 = type metadata accessor for URL(0);
  __swift_storeEnumTagSinglePayload(v1, 1, 1, v2);
  uint64_t result = v0[5];
  uint64_t v4 = v0[6];
  uint64_t v5 = v0[7];
  *(void *)(v1 + result) = 50;
  *(void *)(v1 + v4) = 100;
  *(void *)(v1 + v5) = 1000;
  return result;
}

{
  int *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t result;
  uint64_t v4;
  uint64_t v5;

  uint64_t v0 = (int *)type metadata accessor for MLTrainingSessionParameters(0);
  __swift_allocate_value_buffer((uint64_t)v0, static MLBoostedTreeClassifier._defaultSessionParameters);
  uint64_t v1 = __swift_project_value_buffer((uint64_t)v0, (uint64_t)static MLBoostedTreeClassifier._defaultSessionParameters);
  uint64_t v2 = type metadata accessor for URL(0);
  __swift_storeEnumTagSinglePayload(v1, 1, 1, v2);
  uint64_t result = v0[5];
  uint64_t v4 = v0[6];
  uint64_t v5 = v0[7];
  *(void *)(v1 + result) = 10;
  *(void *)(v1 + v4) = 50;
  *(void *)(v1 + v5) = 1000;
  return result;
}

{
  int *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t result;
  uint64_t v4;
  uint64_t v5;

  uint64_t v0 = (int *)type metadata accessor for MLTrainingSessionParameters(0);
  __swift_allocate_value_buffer((uint64_t)v0, static MLLinearRegressor._defaultSessionParameters);
  uint64_t v1 = __swift_project_value_buffer((uint64_t)v0, (uint64_t)static MLLinearRegressor._defaultSessionParameters);
  uint64_t v2 = type metadata accessor for URL(0);
  __swift_storeEnumTagSinglePayload(v1, 1, 1, v2);
  uint64_t result = v0[5];
  uint64_t v4 = v0[6];
  uint64_t v5 = v0[7];
  *(void *)(v1 + result) = 10;
  *(void *)(v1 + v4) = 50;
  *(void *)(v1 + v5) = 1000;
  return result;
}

uint64_t static MLActivityClassifier._defaultSessionParameters.getter()
{
  uint64_t v1 = v0;
  if (one-time initialization token for _defaultSessionParameters != -1) {
    swift_once(&one-time initialization token for _defaultSessionParameters, one-time initialization function for _defaultSessionParameters);
  }
  uint64_t v2 = type metadata accessor for MLTrainingSessionParameters(0);
  uint64_t v3 = __swift_project_value_buffer(v2, (uint64_t)static MLActivityClassifier._defaultSessionParameters);
  return outlined init with copy of MLTrainingSessionParameters(v3, v1, type metadata accessor for MLTrainingSessionParameters);
}

id MLActivityClassifier.model.getter()
{
  uint64_t v1 = type metadata accessor for MLActivityClassifier(0);
  return *(id *)(v0 + *(int *)(v1 + 20));
}

uint64_t type metadata accessor for MLActivityClassifier(uint64_t a1)
{
  uint64_t result = type metadata singleton initialization cache for MLActivityClassifier;
  if (!type metadata singleton initialization cache for MLActivityClassifier) {
    return swift_getSingletonMetadata(a1, &nominal type descriptor for MLActivityClassifier);
  }
  return result;
}

void key path setter for MLActivityClassifier.model : MLActivityClassifier(id *a1)
{
  id v1 = *a1;
  MLActivityClassifier.model.setter((uint64_t)v1);
}

void MLActivityClassifier.model.setter(uint64_t a1)
{
  uint64_t v2 = *(int *)(type metadata accessor for MLActivityClassifier(0) + 20);

  *(void *)(v1 + v2) = a1;
}

void (*MLActivityClassifier.model.modify(uint64_t a1))(uint64_t a1, char a2)
{
  *(void *)(a1 + 8) = v1;
  uint64_t v3 = *(int *)(type metadata accessor for MLActivityClassifier(0) + 20);
  *(_DWORD *)(a1 + 16) = v3;
  uint64_t v4 = *(void **)(v1 + v3);
  *(void *)a1 = v4;
  v4;
  return MLActivityClassifier.model.modify;
}

void MLActivityClassifier.model.modify(uint64_t a1, char a2)
{
  uint64_t v2 = *(int *)(a1 + 16);
  id v3 = *(id *)a1;
  uint64_t v4 = *(void *)(a1 + 8);
  uint64_t v5 = *(void **)(v4 + v2);
  if (a2)
  {
    id v6 = *(id *)a1;

    *(void *)(v4 + v2) = v6;
  }
  else
  {

    *(void *)(v4 + v2) = v3;
  }
}

uint64_t MLActivityClassifier.modelParameters.getter()
{
  uint64_t v2 = v0;
  uint64_t v3 = type metadata accessor for MLActivityClassifier(0);
  return outlined init with copy of MLTrainingSessionParameters(v1 + *(int *)(v3 + 24), v2, type metadata accessor for MLActivityClassifier.ModelParameters);
}

uint64_t MLActivityClassifier.trainingMetrics.getter(double a1, double a2)
{
  uint64_t v4 = v2;
  int64_t v5 = *(void *)(*(void *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for MLClassifierMetrics?)
                             - 8)
                 + 64);
  id v6 = alloca(v5);
  uint64_t v7 = alloca(v5);
  uint64_t v8 = *(int *)(type metadata accessor for MLActivityClassifier.Model(0) + 72);
  uint64_t v9 = *(void *)(v3 + v8);
  if (!v9)
  {
    uint64_t v14 = type metadata accessor for MLClassifierMetrics(0);
    __swift_storeEnumTagSinglePayload((uint64_t)v18, 1, 1, v14);
LABEL_5:
    MLClassifierMetrics.init()();
    return outlined destroy of Either<LogisticRegressionClassifier<Float, String>, FullyConnectedNetworkClassifier<Float, String>>((uint64_t)v18, &demangling cache variable for type metadata for MLClassifierMetrics?);
  }
  uint64_t v20 = v4;
  uint64_t v10 = *(void *)(v3 + v8 + 8);
  uint64_t v11 = *(void *)(v3 + v8 + 16);
  v19[3] = &type metadata for ClassificationMetricsContainer;
  v19[4] = &protocol witness table for ClassificationMetricsContainer;
  v19[0] = v9;
  v19[1] = v10;
  v19[2] = v11;
  uint64_t v12 = __swift_project_boxed_opaque_existential_0Tm(v19, (uint64_t)&type metadata for ClassificationMetricsContainer);
  uint64_t v13 = *v12;
  uint64_t v21 = v12[2];
  outlined copy of ClassificationMetricsContainer?(v9, v10, v11);
  swift_retain();
  static _MetricUtilities.makeClassifierMetrics(confusionMeter:classLabels:)(a1, a2, v13, v21);
  swift_release();
  uint64_t v15 = type metadata accessor for MLClassifierMetrics(0);
  __swift_storeEnumTagSinglePayload((uint64_t)v18, 0, 1, v15);
  __swift_destroy_boxed_opaque_existential_1Tm(v19);
  int EnumTagSinglePayload = __swift_getEnumTagSinglePayload((uint64_t)v18, 1, v15);
  if (EnumTagSinglePayload == 1) {
    goto LABEL_5;
  }
  return outlined init with take of MLClassifierMetrics((uint64_t)v18, v20, type metadata accessor for MLClassifierMetrics);
}

uint64_t MLActivityClassifier.validationMetrics.getter(double a1, double a2)
{
  uint64_t v4 = v2;
  int64_t v5 = *(void *)(*(void *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for MLClassifierMetrics?)
                             - 8)
                 + 64);
  id v6 = alloca(v5);
  uint64_t v7 = alloca(v5);
  uint64_t v8 = *(int *)(type metadata accessor for MLActivityClassifier.Model(0) + 72);
  uint64_t v9 = *(void *)(v3 + v8);
  if (!v9)
  {
    uint64_t v14 = type metadata accessor for MLClassifierMetrics(0);
    __swift_storeEnumTagSinglePayload((uint64_t)v18, 1, 1, v14);
LABEL_5:
    MLClassifierMetrics.init()();
    return outlined destroy of Either<LogisticRegressionClassifier<Float, String>, FullyConnectedNetworkClassifier<Float, String>>((uint64_t)v18, &demangling cache variable for type metadata for MLClassifierMetrics?);
  }
  uint64_t v20 = v4;
  uint64_t v10 = *(void *)(v3 + v8 + 8);
  uint64_t v11 = *(void *)(v3 + v8 + 16);
  v19[3] = &type metadata for ClassificationMetricsContainer;
  v19[4] = &protocol witness table for ClassificationMetricsContainer;
  v19[0] = v9;
  v19[1] = v10;
  v19[2] = v11;
  uint64_t v12 = __swift_project_boxed_opaque_existential_0Tm(v19, (uint64_t)&type metadata for ClassificationMetricsContainer);
  uint64_t v13 = v12[1];
  uint64_t v21 = v12[2];
  outlined copy of ClassificationMetricsContainer?(v9, v10, v11);
  swift_retain();
  static _MetricUtilities.makeClassifierMetrics(confusionMeter:classLabels:)(a1, a2, v13, v21);
  swift_release();
  uint64_t v15 = type metadata accessor for MLClassifierMetrics(0);
  __swift_storeEnumTagSinglePayload((uint64_t)v18, 0, 1, v15);
  __swift_destroy_boxed_opaque_existential_1Tm(v19);
  int EnumTagSinglePayload = __swift_getEnumTagSinglePayload((uint64_t)v18, 1, v15);
  if (EnumTagSinglePayload == 1) {
    goto LABEL_5;
  }
  return outlined init with take of MLClassifierMetrics((uint64_t)v18, v20, type metadata accessor for MLClassifierMetrics);
}

uint64_t MLActivityClassifier.labelColumn.getter()
{
  uint64_t v1 = *(int *)(type metadata accessor for MLActivityClassifier(0) + 32);
  uint64_t v2 = *(void *)(v0 + v1);
  swift_bridgeObjectRetain(*(void *)(v0 + v1 + 8));
  return v2;
}

uint64_t MLActivityClassifier.labelColumn.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(int *)(type metadata accessor for MLActivityClassifier(0) + 32);
  uint64_t result = swift_bridgeObjectRelease(*(void *)(v2 + v3 + 8));
  *(void *)(v2 + v3) = a1;
  *(void *)(v2 + v3 + 8) = a2;
  return result;
}

void (*MLActivityClassifier.labelColumn.modify())()
{
  return MLBoostedTreeRegressor.ModelParameters.maxDepth.modify;
}

uint64_t MLActivityClassifier.featureColumns.getter()
{
  uint64_t v1 = type metadata accessor for MLActivityClassifier(0);
  return swift_bridgeObjectRetain(*(void *)(v0 + *(int *)(v1 + 36)));
}

uint64_t MLActivityClassifier.featureColumns.setter(uint64_t a1)
{
  uint64_t v2 = *(int *)(type metadata accessor for MLActivityClassifier(0) + 36);
  uint64_t result = swift_bridgeObjectRelease(*(void *)(v1 + v2));
  *(void *)(v1 + v2) = a1;
  return result;
}

void (*MLActivityClassifier.featureColumns.modify())()
{
  return MLBoostedTreeRegressor.ModelParameters.maxDepth.modify;
}

uint64_t MLActivityClassifier.recordingFileColumn.getter()
{
  uint64_t v1 = *(int *)(type metadata accessor for MLActivityClassifier(0) + 40);
  uint64_t v2 = *(void *)(v0 + v1);
  swift_bridgeObjectRetain(*(void *)(v0 + v1 + 8));
  return v2;
}

uint64_t MLActivityClassifier.recordingFileColumn.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(int *)(type metadata accessor for MLActivityClassifier(0) + 40);
  uint64_t result = swift_bridgeObjectRelease(*(void *)(v2 + v3 + 8));
  *(void *)(v2 + v3) = a1;
  *(void *)(v2 + v3 + 8) = a2;
  return result;
}

void (*MLActivityClassifier.recordingFileColumn.modify())()
{
  return MLBoostedTreeRegressor.ModelParameters.maxDepth.modify;
}

uint64_t MLActivityClassifier.init(trainingData:featureColumns:labelColumn:recordingFileColumn:parameters:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4, void *a5, void *a6, uint64_t a7)
{
  uint64_t v11 = v7;
  uint64_t v47 = a2;
  uint64_t v61 = v8;
  unsigned int v46 = a6;
  unsigned int v45 = a5;
  uint64_t v60 = a1;
  uint64_t v50 = *(void *)(type metadata accessor for MLActivityClassifier.ModelParameters(0) - 8);
  int64_t v49 = *(void *)(v50 + 64);
  uint64_t v12 = alloca(v49);
  uint64_t v13 = alloca(v49);
  uint64_t v58 = &v44;
  uint64_t v14 = (int *)type metadata accessor for MLActivityClassifier(0);
  int64_t v15 = *(void *)(*((void *)v14 - 1) + 64);
  int64_t v16 = alloca(v15);
  uint64_t v17 = alloca(v15);
  uint64_t v48 = &v44;
  uint64_t v53 = *(void *)(type metadata accessor for MLActivityClassifier.DataSource.Columns(0) - 8);
  int64_t v18 = *(void *)(v53 + 64);
  char v19 = alloca(v18);
  uint64_t v20 = alloca(v18);
  uint64_t v51 = &v44;
  int64_t v52 = v18;
  uint64_t v21 = alloca(v18);
  uint64_t v22 = alloca(v18);
  uint64_t v23 = v14[7];
  *(void *)(v11 + v23) = 0x5F6E6F6973736573;
  uint64_t v56 = v23;
  *(void *)(v11 + v23 + 8) = 0xEA00000000006469;
  uint64_t v24 = v14[8];
  *(void *)(v11 + v24) = 0x6C6562616CLL;
  uint64_t v55 = v24;
  *(void *)(v11 + v24 + 8) = 0xE500000000000000;
  uint64_t v54 = v14[9];
  *(void *)(v11 + v54) = _swiftEmptyArrayStorage;
  uint64_t v25 = v14[10];
  strcpy((char *)(v11 + v25), "recordingFile");
  uint64_t v57 = v11;
  *(_WORD *)(v11 + v25 + 14) = -4864;
  uint64_t v26 = a3;
  if (!a4)
  {
    uint64_t v26 = 0x6C6562616CLL;
    a4 = (uint64_t *)0xE500000000000000;
  }
  uint64_t v59 = &v44;
  uint64_t v27 = v47;
  char v28 = v46;
  uint64_t v29 = v61;
  MLActivityClassifier.DataSource.gatherData(featureColumns:labelColumn:recordingFileColumn:)(v47, v26, a4, v45, v46);
  swift_bridgeObjectRelease(a4);
  swift_bridgeObjectRelease(v27);
  swift_bridgeObjectRelease(v28);
  if (v29)
  {
    outlined destroy of MLActivityClassifier.ModelParameters(a7, type metadata accessor for MLActivityClassifier.ModelParameters);
    outlined destroy of MLActivityClassifier.ModelParameters(v60, type metadata accessor for MLActivityClassifier.DataSource);
LABEL_6:
    uint64_t v39 = v57;
    swift_bridgeObjectRelease(*(void *)(v57 + v56 + 8));
    swift_bridgeObjectRelease(*(void *)(v39 + v55 + 8));
    uint64_t v40 = *(void *)(v39 + v54);
    swift_bridgeObjectRelease(0xED0000656C694667);
    return swift_bridgeObjectRelease(v40);
  }
  uint64_t v30 = (uint64_t)v51;
  outlined init with copy of MLTrainingSessionParameters((uint64_t)v59, (uint64_t)v51, type metadata accessor for MLActivityClassifier.DataSource.Columns);
  outlined init with copy of MLTrainingSessionParameters(a7, (uint64_t)v58, type metadata accessor for MLActivityClassifier.ModelParameters);
  uint64_t v31 = *(unsigned __int8 *)(v53 + 80);
  int v32 = ~*(unsigned __int8 *)(v53 + 80);
  uint64_t v61 = 0;
  uint64_t v33 = v32 & (v31 + 16);
  uint64_t v34 = *(unsigned __int8 *)(v50 + 80);
  int64_t v35 = ~v34 & (v33 + v34 + v52);
  uint64_t v36 = swift_allocObject(&unk_396F50, v35 + v49, v34 | v31 | 7);
  outlined init with take of MLClassifierMetrics(v30, v36 + v33, type metadata accessor for MLActivityClassifier.DataSource.Columns);
  outlined init with take of MLClassifierMetrics((uint64_t)v58, v36 + v35, type metadata accessor for MLActivityClassifier.ModelParameters);
  uint64_t v37 = (uint64_t)v48;
  uint64_t v38 = v61;
  specialized blockAwait<A>(_:)((uint64_t)&async function pointer to partial apply for closure #1 in MLActivityClassifier.init(trainingData:featureColumns:labelColumn:recordingFileColumn:parameters:), v36, (uint64_t)&unk_3972A8, (uint64_t)&async function pointer to partial apply for specialized closure #1 in blockAwait<A>(_:), type metadata accessor for MLActivityClassifier);
  swift_release(v36);
  outlined destroy of MLActivityClassifier.ModelParameters(a7, type metadata accessor for MLActivityClassifier.ModelParameters);
  outlined destroy of MLActivityClassifier.ModelParameters(v60, type metadata accessor for MLActivityClassifier.DataSource);
  outlined destroy of MLActivityClassifier.ModelParameters((uint64_t)v59, type metadata accessor for MLActivityClassifier.DataSource.Columns);
  if (v38) {
    goto LABEL_6;
  }
  uint64_t v42 = v57;
  swift_bridgeObjectRelease(*(void *)(v57 + v56 + 8));
  swift_bridgeObjectRelease(*(void *)(v42 + v55 + 8));
  uint64_t v43 = *(void *)(v42 + v54);
  swift_bridgeObjectRelease(0xED0000656C694667);
  swift_bridgeObjectRelease(v43);
  return outlined init with take of MLClassifierMetrics(v37, v42, type metadata accessor for MLActivityClassifier);
}

uint64_t closure #1 in MLActivityClassifier.init(trainingData:featureColumns:labelColumn:recordingFileColumn:parameters:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  v3[4] = a3;
  v3[3] = a2;
  v3[2] = a1;
  uint64_t v4 = type metadata accessor for MLActivityClassifier.ModelParameters(0);
  v3[5] = swift_task_alloc((*(void *)(*(void *)(v4 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = type metadata accessor for MLActivityClassifier.DataSource.Columns(0);
  v3[6] = swift_task_alloc((*(void *)(*(void *)(v5 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  return swift_task_switch(closure #1 in MLActivityClassifier.init(trainingData:featureColumns:labelColumn:recordingFileColumn:parameters:), 0, 0);
}

uint64_t closure #1 in MLActivityClassifier.init(trainingData:featureColumns:labelColumn:recordingFileColumn:parameters:)()
{
  uint64_t v1 = v0[5];
  uint64_t v2 = v0[4];
  outlined init with copy of MLTrainingSessionParameters(v0[3], v0[6], type metadata accessor for MLActivityClassifier.DataSource.Columns);
  outlined init with copy of MLTrainingSessionParameters(v2, v1, type metadata accessor for MLActivityClassifier.ModelParameters);
  uint64_t v3 = (uint64_t **)swift_task_alloc(dword_3A3FAC);
  v0[7] = (uint64_t)v3;
  *uint64_t v3 = v0;
  v3[1] = (uint64_t *)closure #1 in MLActivityClassifier.init(trainingData:featureColumns:labelColumn:recordingFileColumn:parameters:);
  return MLActivityClassifier.init(trainingData:parameters:)(v0[2], v0[6], v0[5]);
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;

  uint64_t v2 = *(void *)(*v1 + 56);
  uint64_t v3 = *v1;
  *(void *)(v3 + 64) = v0;
  swift_task_dealloc(v2);
  if (v0) {
    return swift_task_switch(closure #1 in MLActivityClassifier.init(trainingData:featureColumns:labelColumn:recordingFileColumn:parameters:), 0, 0);
  }
  uint64_t v5 = *(void *)(v3 + 40);
  swift_task_dealloc(*(void *)(v3 + 48));
  swift_task_dealloc(v5);
  return (*(uint64_t (**)(void))(v3 + 8))();
}

{
  uint64_t v0;
  uint64_t v1;

  uint64_t v1 = *(void *)(v0 + 40);
  swift_task_dealloc(*(void *)(v0 + 48));
  swift_task_dealloc(v1);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t MLActivityClassifier.init(trainingData:parameters:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  v3[5] = a3;
  v3[4] = a2;
  v3[3] = a1;
  uint64_t v4 = type metadata accessor for MLActivityClassifier.Model(0);
  v3[6] = v4;
  v3[7] = swift_task_alloc((*(void *)(*(void *)(v4 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = type metadata accessor for MLActivityClassifier.Configuration(0);
  v3[8] = swift_task_alloc((*(void *)(*(void *)(v5 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Column<String>?);
  v3[9] = swift_task_alloc((*(void *)(*(void *)(v6 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  return swift_task_switch(MLActivityClassifier.init(trainingData:parameters:), 0, 0);
}

uint64_t MLActivityClassifier.init(trainingData:parameters:)(__m128 a1)
{
  uint64_t v47 = v1 | 0x1000000000000000;
  uint64_t v46 = v2;
  uint64_t v42 = (void *)v2;
  uint64_t v41 = (void *)(v2 + 16);
  uint64_t v43 = *(void *)(v2 + 72);
  uint64_t v3 = *(void *)(v2 + 24);
  unsigned int v45 = *(uint64_t **)(v2 + 32);
  uint64_t v4 = v45;
  uint64_t v5 = (int *)type metadata accessor for MLActivityClassifier(0);
  *(void *)(v2 + 80) = v5;
  uint64_t v6 = v5[7];
  *(_DWORD *)(v2 + 112) = v6;
  *(void *)(v3 + v6) = 0x5F6E6F6973736573;
  *(void *)(v3 + v6 + 8) = 0xEA00000000006469;
  uint64_t v35 = v5[8];
  *(_DWORD *)(v2 + 116) = v35;
  *(void *)(v3 + v35) = 0x6C6562616CLL;
  *(void *)(v3 + v35 + 8) = 0xE500000000000000;
  uint64_t v7 = (uint64_t *)v5[9];
  uint64_t v44 = v7;
  *(_DWORD *)(v2 + 120) = v7;
  *(uint64_t *)((char *)v7 + v3) = (uint64_t)_swiftEmptyArrayStorage;
  uint64_t v40 = v5;
  uint64_t v8 = v5[10];
  *(_DWORD *)(v2 + 124) = v8;
  strcpy((char *)(v3 + v8), "recordingFile");
  uint64_t v34 = v8;
  *(_WORD *)(v3 + v8 + 14) = -4864;
  uint64_t v9 = *v4;
  swift_bridgeObjectRetain(*v4);
  ML20MLActivityClassifierV12trainingData10parametersA2C0F6SourceO7ColumnsV_AC15ModelParametersVtYaKcfcSS07d3F06F62VySaySdGGcfu_33_58e95aa1613cac7a093349ae610302fdAPSSTf3nnnpk_nTf1cn_nTm = _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSay11TabularData6ColumnVySaySdGGG_SSs5NeverOTg50114_s8CreateML20MLActivityClassifierV12trainingData10parametersA2C0F6SourceO7ColumnsV_AC15ModelParametersVtYaKcfcSS07d3F06F62VySaySdGGcfu_33_58e95aa1613cac7a093349ae610302fdAPSSTf3nnnpk_nTf1cn_nTm(v9);
  swift_bridgeObjectRelease(v9);
  uint64_t v11 = *(uint64_t *)((char *)v44 + v3);
  swift_bridgeObjectRetain((_BYTE)ML20MLActivityClassifierV12trainingData10parametersA2C0F6SourceO7ColumnsV_AC15ModelParametersVtYaKcfcSS07d3F06F62VySaySdGGcfu_33_58e95aa1613cac7a093349ae610302fdAPSSTf3nnnpk_nTf1cn_nTm);
  swift_bridgeObjectRelease(v11);
  uint64_t v41 = ML20MLActivityClassifierV12trainingData10parametersA2C0F6SourceO7ColumnsV_AC15ModelParametersVtYaKcfcSS07d3F06F62VySaySdGGcfu_33_58e95aa1613cac7a093349ae610302fdAPSSTf3nnnpk_nTf1cn_nTm;
  *(uint64_t *)((char *)v44 + v3) = (uint64_t)ML20MLActivityClassifierV12trainingData10parametersA2C0F6SourceO7ColumnsV_AC15ModelParametersVtYaKcfcSS07d3F06F62VySaySdGGcfu_33_58e95aa1613cac7a093349ae610302fdAPSSTf3nnnpk_nTf1cn_nTm;
  uint64_t v36 = type metadata accessor for MLActivityClassifier.DataSource.Columns(0);
  uint64_t v12 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Column<String>);
  uint64_t v13 = Column.name.getter(v12);
  int64_t v15 = v14;
  uint64_t v44 = *(uint64_t **)(v3 + v35 + 8);
  swift_bridgeObjectRetain((_BYTE)v14);
  swift_bridgeObjectRelease((_BYTE)v44);
  uint64_t v33 = v13;
  *(void *)(v3 + v35) = v13;
  uint64_t v44 = v15;
  *(void *)(v3 + v35 + 8) = v15;
  outlined init with copy of Either<LogisticRegressionClassifier<Float, String>, FullyConnectedNetworkClassifier<Float, String>>((uint64_t)v45 + *(int *)(v36 + 24), v43, &demangling cache variable for type metadata for Column<String>?);
  int EnumTagSinglePayload = __swift_getEnumTagSinglePayload(v43, 1, v12);
  uint64_t v17 = v42[9];
  if (EnumTagSinglePayload == 1)
  {
    outlined destroy of Either<LogisticRegressionClassifier<Float, String>, FullyConnectedNetworkClassifier<Float, String>>(v42[9], &demangling cache variable for type metadata for Column<String>?);
    unsigned int v45 = (uint64_t *)0xED0000656C694667;
    uint64_t v43 = 0x6E6964726F636572;
  }
  else
  {
    uint64_t v43 = Column.name.getter(v12);
    unsigned int v45 = v18;
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v12 - 8) + 8))(v17, v12);
  }
  char v19 = v42;
  uint64_t v37 = v42[5];
  uint64_t v20 = v42[3];
  uint64_t v32 = *(void *)(v3 + v34 + 8);
  uint64_t v21 = v45;
  swift_bridgeObjectRetain((_BYTE)v45);
  swift_bridgeObjectRelease(v32);
  *(void *)(v3 + v34) = v43;
  *(void *)(v3 + v34 + 8) = v21;
  uint64_t v22 = v40[6];
  *((_DWORD *)v19 + 32) = v22;
  outlined init with copy of MLTrainingSessionParameters(v37, v22 + v20, type metadata accessor for MLActivityClassifier.ModelParameters);
  MLActivityClassifier.DataSource.Columns.convertToTuriCore()();
  uint64_t v23 = v42;
  uint64_t v24 = v42[5];
  uint64_t v25 = v38;
  v42[11] = v38;
  char v26 = v39;
  *((unsigned char *)v23 + 132) = v39;
  uint64_t v38 = v25;
  LOBYTE(v40) = v26;
  char v39 = v26;
  char v27 = (char)v41;
  LOBYTE(v20) = (_BYTE)v45;
  char v28 = (char)v44;
  static MLActivityClassifier.validateAndConvertParameters(_:featureColumns:labelColumn:recordingFileColumn:table:)(v24, (uint64_t)v41, v33, v44, (void *)v43, v45, a1, &v38);
  swift_bridgeObjectRelease(v27);
  swift_bridgeObjectRelease(v28);
  swift_bridgeObjectRelease(v20);
  uint64_t v29 = (void *)swift_task_alloc(dword_3A3F54);
  uint64_t v30 = v42;
  v42[12] = v29;
  void *v29 = v30;
  v29[1] = MLActivityClassifier.init(trainingData:parameters:);
  return static MLActivityClassifier.train(with:)(v30[7], v30[8]);
}

uint64_t MLActivityClassifier.init(trainingData:parameters:)()
{
  uint64_t v2 = *(void *)(*(void *)v1 + 96);
  *(void *)(*(void *)v1 + 104) = v0;
  swift_task_dealloc(v2);
  if (v0) {
    uint64_t v3 = MLActivityClassifier.init(trainingData:parameters:);
  }
  else {
    uint64_t v3 = MLActivityClassifier.init(trainingData:parameters:);
  }
  return swift_task_switch(v3, 0, 0);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  void *v3;
  uint64_t v4;
  uint64_t v5;
  char v6;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  uint64_t v1 = *(void *)(v0 + 24);
  uint64_t v2 = *(void *)(v0 + 48);
  outlined init with take of MLClassifierMetrics(*(void *)(v0 + 56), v1, type metadata accessor for MLActivityClassifier.Model);
  uint64_t v3 = *(void **)(v1 + *(int *)(v2 + 68));
  if (!v3) {
    BUG();
  }
  uint64_t v11 = *(void *)(v0 + 88);
  uint64_t v9 = *(void *)(v0 + 72);
  uint64_t v10 = *(void *)(v0 + 64);
  uint64_t v8 = *(void *)(v0 + 56);
  uint64_t v4 = *(void *)(v0 + 40);
  uint64_t v5 = *(void *)(v0 + 32);
  uint64_t v6 = *(unsigned char *)(v0 + 132);
  *(void *)(*(void *)(v0 + 24) + *(int *)(*(void *)(v0 + 80) + 20)) = v3;
  v3;
  MLActivityClassifier.reportAnalytics(columns:parameters:)(v5, v4);
  outlined consume of Result<_DataTable, Error>(v11, v6);
  outlined destroy of MLActivityClassifier.ModelParameters(v4, type metadata accessor for MLActivityClassifier.ModelParameters);
  outlined destroy of MLActivityClassifier.ModelParameters(v5, type metadata accessor for MLActivityClassifier.DataSource.Columns);
  outlined destroy of MLActivityClassifier.ModelParameters(v10, type metadata accessor for MLActivityClassifier.Configuration);
  swift_task_dealloc(v9);
  swift_task_dealloc(v10);
  swift_task_dealloc(v8);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  uint64_t v1 = *(void *)(v0 + 64);
  uint64_t v2 = *(void *)(v0 + 32);
  uint64_t v3 = *(void *)(v0 + 40);
  outlined consume of Result<_DataTable, Error>(*(void *)(v0 + 88), *(unsigned char *)(v0 + 132));
  outlined destroy of MLActivityClassifier.ModelParameters(v3, type metadata accessor for MLActivityClassifier.ModelParameters);
  outlined destroy of MLActivityClassifier.ModelParameters(v2, type metadata accessor for MLActivityClassifier.DataSource.Columns);
  outlined destroy of MLActivityClassifier.ModelParameters(v1, type metadata accessor for MLActivityClassifier.Configuration);
  uint64_t v12 = *(int *)(v0 + 124);
  uint64_t v4 = *(int *)(v0 + 120);
  uint64_t v5 = *(int *)(v0 + 116);
  uint64_t v6 = *(int *)(v0 + 112);
  uint64_t v11 = *(void *)(v0 + 72);
  uint64_t v10 = *(void *)(v0 + 64);
  uint64_t v7 = *(void *)(v0 + 24);
  uint64_t v9 = *(void *)(v0 + 56);
  outlined destroy of MLActivityClassifier.ModelParameters(v7 + *(int *)(v0 + 128), type metadata accessor for MLActivityClassifier.ModelParameters);
  swift_bridgeObjectRelease(*(void *)(v7 + v6 + 8));
  swift_bridgeObjectRelease(*(void *)(v7 + v5 + 8));
  swift_bridgeObjectRelease(*(void *)(v7 + v4));
  swift_bridgeObjectRelease(*(void *)(v7 + v12 + 8));
  swift_task_dealloc(v11);
  swift_task_dealloc(v10);
  swift_task_dealloc(v9);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

void specialized blockAwait<A>(_:)(uint64_t a1, uint64_t a2)
{
}

{
  specialized blockAwait<A>(_:)(a1, a2, (uint64_t)&unk_397208, (uint64_t)&async function pointer to partial apply for specialized closure #1 in blockAwait<A>(_:), type metadata accessor for MLHandPoseClassifier);
}

{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  int64_t v5;
  void *v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  id v10;
  id v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _OWORD v16[2];
  unsigned char v17[24];
  long long v18[2];
  char v19;
  unsigned char v20[8];
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  id v24;
  uint64_t *v25;
  uint64_t v26;

  char v26 = v2;
  uint64_t v23 = a1;
  uint64_t v3 = type metadata accessor for ResultBox();
  uint64_t v4 = swift_allocObject(v3, 49, 7);
  uint64_t v22 = v4 + 16;
  *(_OWORD *)(v4 + 16) = 0;
  *(_OWORD *)(v4 + 32) = 0;
  *(unsigned char *)(v4 + 48) = -1;
  uint64_t v24 = dispatch_semaphore_create(0);
  uint64_t v5 = *(void *)(*(void *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TaskPriority?)
                             - 8)
                 + 64);
  uint64_t v6 = alloca(v5);
  uint64_t v7 = alloca(v5);
  uint64_t v25 = &v15;
  uint64_t v8 = type metadata accessor for TaskPriority(0);
  __swift_storeEnumTagSinglePayload((uint64_t)&v15, 1, 1, v8);
  uint64_t v9 = swift_allocObject(&unk_3971E0, 64, 7);
  *(_OWORD *)(v9 + 16) = 0;
  *(void *)(v9 + 32) = v4;
  *(void *)(v9 + 40) = v23;
  *(void *)(v9 + 48) = a2;
  uint64_t v10 = v24;
  *(void *)(v9 + 56) = v24;
  swift_retain();
  swift_retain();
  uint64_t v11 = v10;
  _sScTss5NeverORs_rlE8priority9operationScTyxABGScPSg_xyYaYAcntcfCyt_Tgm5((uint64_t)v25, (uint64_t)&async function pointer to partial apply for specialized closure #1 in blockAwait<A>(_:), v9);
  swift_release();
  OS_dispatch_semaphore.wait()();
  uint64_t v12 = v22;
  swift_beginAccess(v22, v17, 0, 0);
  outlined init with copy of Either<LogisticRegressionClassifier<Float, String>, FullyConnectedNetworkClassifier<Float, String>>(v12, (uint64_t)v18, &demangling cache variable for type metadata for Result<Any, Error>?);
  if (v19 == -1) {
    BUG();
  }
  if (v19)
  {
    uint64_t v21 = *(void *)&v18[0];
    if (_stdlib_isOSVersionAtLeastOrVariantVersionAtLeast(_:_:_:_:_:_:)(0xFuLL, 0, 0, 0x12uLL, 0, 0))
    {
      uint64_t v14 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Error);
      swift_willThrowTypedImpl(&v21, v14, &protocol self-conformance witness table for Error);
    }
    swift_release();
  }
  else
  {
    outlined init with take of Any(v18, v16);
    swift_release();

    uint64_t v13 = type metadata accessor for OS_os_log(0, &lazy cache variable for type metadata for MLModel, MLModel_ptr);
    swift_dynamicCast(v20, v16, (char *)&type metadata for Any + 8, v13, 7);
  }
}

{
  specialized blockAwait<A>(_:)(a1, a2, (uint64_t)&unk_397118, (uint64_t)&async function pointer to partial apply for specialized closure #1 in blockAwait<A>(_:), type metadata accessor for MLClassifierMetrics);
}

{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  int64_t v6;
  void *v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  id v11;
  id v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _OWORD v16[2];
  unsigned char v17[24];
  long long v18[2];
  char v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  id v23;
  uint64_t *v24;
  uint64_t v25;
  uint64_t v26;

  uint64_t v25 = v3;
  uint64_t v22 = a1;
  char v26 = v2;
  uint64_t v4 = type metadata accessor for ResultBox();
  uint64_t v5 = swift_allocObject(v4, 49, 7);
  uint64_t v21 = v5 + 16;
  *(_OWORD *)(v5 + 16) = 0;
  *(_OWORD *)(v5 + 32) = 0;
  *(unsigned char *)(v5 + 48) = -1;
  uint64_t v23 = dispatch_semaphore_create(0);
  uint64_t v6 = *(void *)(*(void *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TaskPriority?)
                             - 8)
                 + 64);
  uint64_t v7 = alloca(v6);
  uint64_t v8 = alloca(v6);
  uint64_t v24 = &v15;
  uint64_t v9 = type metadata accessor for TaskPriority(0);
  __swift_storeEnumTagSinglePayload((uint64_t)&v15, 1, 1, v9);
  uint64_t v10 = swift_allocObject(&unk_3971B8, 64, 7);
  *(_OWORD *)(v10 + 16) = 0;
  *(void *)(v10 + 32) = v5;
  *(void *)(v10 + 40) = v22;
  *(void *)(v10 + 48) = a2;
  uint64_t v11 = v23;
  *(void *)(v10 + 56) = v23;
  swift_retain();
  swift_retain();
  uint64_t v12 = v11;
  _sScTss5NeverORs_rlE8priority9operationScTyxABGScPSg_xyYaYAcntcfCyt_Tgm5((uint64_t)v24, (uint64_t)&async function pointer to partial apply for specialized closure #1 in blockAwait<A>(_:), v10);
  swift_release();
  OS_dispatch_semaphore.wait()();
  uint64_t v13 = v21;
  swift_beginAccess(v21, v17, 0, 0);
  outlined init with copy of Either<LogisticRegressionClassifier<Float, String>, FullyConnectedNetworkClassifier<Float, String>>(v13, (uint64_t)v18, &demangling cache variable for type metadata for Result<Any, Error>?);
  if (v19 == -1) {
    BUG();
  }
  if (v19)
  {
    uint64_t v20 = *(void *)&v18[0];
    if (_stdlib_isOSVersionAtLeastOrVariantVersionAtLeast(_:_:_:_:_:_:)(0xFuLL, 0, 0, 0x12uLL, 0, 0))
    {
      uint64_t v14 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Error);
      swift_willThrowTypedImpl(&v20, v14, &protocol self-conformance witness table for Error);
    }
    swift_release();
  }
  else
  {
    outlined init with take of Any(v18, v16);
    swift_release();

    swift_dynamicCast(v26, v16, (char *)&type metadata for Any + 8, &type metadata for MLRegressorMetrics, 7);
  }
}

{
  specialized blockAwait<A>(_:)(a1, a2, (uint64_t)&unk_397190, (uint64_t)&async function pointer to partial apply for specialized closure #1 in blockAwait<A>(_:), type metadata accessor for MLStyleTransfer);
}

{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  int64_t v5;
  void *v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  id v10;
  id v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _OWORD v16[2];
  unsigned char v17[24];
  long long v18[2];
  char v19;
  unsigned char v20[8];
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  id v24;
  uint64_t *v25;
  uint64_t v26;

  char v26 = v2;
  uint64_t v23 = a1;
  uint64_t v3 = type metadata accessor for ResultBox();
  uint64_t v4 = swift_allocObject(v3, 49, 7);
  uint64_t v22 = v4 + 16;
  *(_OWORD *)(v4 + 16) = 0;
  *(_OWORD *)(v4 + 32) = 0;
  *(unsigned char *)(v4 + 48) = -1;
  uint64_t v24 = dispatch_semaphore_create(0);
  uint64_t v5 = *(void *)(*(void *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TaskPriority?)
                             - 8)
                 + 64);
  uint64_t v6 = alloca(v5);
  uint64_t v7 = alloca(v5);
  uint64_t v25 = &v15;
  uint64_t v8 = type metadata accessor for TaskPriority(0);
  __swift_storeEnumTagSinglePayload((uint64_t)&v15, 1, 1, v8);
  uint64_t v9 = swift_allocObject(&unk_397168, 64, 7);
  *(_OWORD *)(v9 + 16) = 0;
  *(void *)(v9 + 32) = v4;
  *(void *)(v9 + 40) = v23;
  *(void *)(v9 + 48) = a2;
  uint64_t v10 = v24;
  *(void *)(v9 + 56) = v24;
  swift_retain();
  swift_retain();
  uint64_t v11 = v10;
  _sScTss5NeverORs_rlE8priority9operationScTyxABGScPSg_xyYaYAcntcfCyt_Tgm5((uint64_t)v25, (uint64_t)&async function pointer to partial apply for specialized closure #1 in blockAwait<A>(_:), v9);
  swift_release();
  OS_dispatch_semaphore.wait()();
  uint64_t v12 = v22;
  swift_beginAccess(v22, v17, 0, 0);
  outlined init with copy of Either<LogisticRegressionClassifier<Float, String>, FullyConnectedNetworkClassifier<Float, String>>(v12, (uint64_t)v18, &demangling cache variable for type metadata for Result<Any, Error>?);
  if (v19 == -1) {
    BUG();
  }
  if (v19)
  {
    uint64_t v21 = *(void *)&v18[0];
    if (_stdlib_isOSVersionAtLeastOrVariantVersionAtLeast(_:_:_:_:_:_:)(0xFuLL, 0, 0, 0x12uLL, 0, 0))
    {
      uint64_t v14 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Error);
      swift_willThrowTypedImpl(&v21, v14, &protocol self-conformance witness table for Error);
    }
    swift_release();
  }
  else
  {
    outlined init with take of Any(v18, v16);
    swift_release();

    uint64_t v13 = type metadata accessor for _Model();
    swift_dynamicCast(v20, v16, (char *)&type metadata for Any + 8, v13, 7);
  }
}

{
  specialized blockAwait<A>(_:)(a1, a2, (uint64_t)&unk_397140, (uint64_t)&async function pointer to partial apply for specialized closure #1 in blockAwait<A>(_:), (uint64_t (*)(void))&type metadata accessor for AnyColumn);
}

{
  specialized blockAwait<A>(_:)(a1, a2, (uint64_t)&unk_3970F0, (uint64_t)&async function pointer to partial apply for specialized closure #1 in blockAwait<A>(_:), type metadata accessor for MLImageClassifier);
}

{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  int64_t v5;
  void *v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  id v10;
  id v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _OWORD v15[2];
  unsigned char v16[24];
  unsigned char v17[16];
  long long v18[2];
  char v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  id v23;
  _OWORD *v24;
  uint64_t v25;

  uint64_t v25 = v2;
  uint64_t v22 = a1;
  uint64_t v3 = type metadata accessor for ResultBox();
  uint64_t v4 = swift_allocObject(v3, 49, 7);
  uint64_t v21 = v4 + 16;
  *(_OWORD *)(v4 + 16) = 0;
  *(_OWORD *)(v4 + 32) = 0;
  *(unsigned char *)(v4 + 48) = -1;
  uint64_t v23 = dispatch_semaphore_create(0);
  uint64_t v5 = *(void *)(*(void *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TaskPriority?)
                             - 8)
                 + 64);
  uint64_t v6 = alloca(v5);
  uint64_t v7 = alloca(v5);
  uint64_t v24 = v15;
  uint64_t v8 = type metadata accessor for TaskPriority(0);
  __swift_storeEnumTagSinglePayload((uint64_t)v15, 1, 1, v8);
  uint64_t v9 = swift_allocObject(&unk_3970C8, 64, 7);
  *(_OWORD *)(v9 + 16) = 0;
  *(void *)(v9 + 32) = v4;
  *(void *)(v9 + 40) = v22;
  *(void *)(v9 + 48) = a2;
  uint64_t v10 = v23;
  *(void *)(v9 + 56) = v23;
  swift_retain();
  swift_retain();
  uint64_t v11 = v10;
  _sScTss5NeverORs_rlE8priority9operationScTyxABGScPSg_xyYaYAcntcfCyt_Tgm5((uint64_t)v24, (uint64_t)&async function pointer to partial apply for specialized closure #1 in blockAwait<A>(_:), v9);
  swift_release();
  OS_dispatch_semaphore.wait()();
  uint64_t v12 = v21;
  swift_beginAccess(v21, v16, 0, 0);
  outlined init with copy of Either<LogisticRegressionClassifier<Float, String>, FullyConnectedNetworkClassifier<Float, String>>(v12, (uint64_t)v18, &demangling cache variable for type metadata for Result<Any, Error>?);
  if (v19 == -1) {
    BUG();
  }
  if (v19)
  {
    uint64_t v20 = *(void *)&v18[0];
    if (_stdlib_isOSVersionAtLeastOrVariantVersionAtLeast(_:_:_:_:_:_:)(0xFuLL, 0, 0, 0x12uLL, 0, 0))
    {
      uint64_t v14 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Error);
      swift_willThrowTypedImpl(&v20, v14, &protocol self-conformance witness table for Error);
    }
    swift_release();
  }
  else
  {
    outlined init with take of Any(v18, v15);
    swift_release();

    uint64_t v13 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ([AnnotatedFeature<CIImage, String>], [AnnotatedFeature<CIImage, String>]));
    swift_dynamicCast(v17, v15, (char *)&type metadata for Any + 8, v13, 7);
  }
}

{
  specialized blockAwait<A>(_:)(a1, a2, (uint64_t)&unk_3970A0, (uint64_t)&async function pointer to partial apply for specialized closure #1 in blockAwait<A>(_:), &demangling cache variable for type metadata for [(predicted: String, label: String)]);
}

{
  specialized blockAwait<A>(_:)(a1, a2, (uint64_t)&unk_397078, (uint64_t)&async function pointer to partial apply for specialized closure #1 in blockAwait<A>(_:), type metadata accessor for MLActionClassifier);
}

{
  specialized blockAwait<A>(_:)(a1, a2, (uint64_t)&unk_397050, (uint64_t)&async function pointer to partial apply for specialized closure #1 in blockAwait<A>(_:), type metadata accessor for MLHandActionClassifier);
}

{
  specialized blockAwait<A>(_:)(a1, a2, (uint64_t)&unk_397028, (uint64_t)&async function pointer to partial apply for specialized closure #1 in blockAwait<A>(_:), type metadata accessor for MLSoundClassifier);
}

{
  specialized blockAwait<A>(_:)(a1, a2, (uint64_t)&unk_396FD8, (uint64_t)&async function pointer to partial apply for specialized closure #1 in blockAwait<A>(_:), &demangling cache variable for type metadata for [AnnotatedPrediction<ClassificationDistribution<String>, String>]);
}

{
  specialized blockAwait<A>(_:)(a1, a2, (uint64_t)&unk_397000, (uint64_t)&async function pointer to partial apply for specialized closure #1 in blockAwait<A>(_:), type metadata accessor for MLSoundClassifier.Model);
}

{
  specialized blockAwait<A>(_:)(a1, a2, (uint64_t)&unk_396FB0, (uint64_t)&async function pointer to partial apply for specialized closure #1 in blockAwait<A>(_:), &demangling cache variable for type metadata for [ClassificationDistribution<String>]);
}

void specialized blockAwait<A>(_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(void))
{
  uint64_t v34 = a5;
  uint64_t v27 = a4;
  uint64_t v32 = v6;
  uint64_t v29 = a1;
  uint64_t v33 = v5;
  uint64_t v8 = type metadata accessor for ResultBox();
  uint64_t v9 = swift_allocObject(v8, 49, 7);
  uint64_t v28 = v9 + 16;
  *(_OWORD *)(v9 + 16) = 0;
  *(_OWORD *)(v9 + 32) = 0;
  *(unsigned char *)(v9 + 48) = -1;
  id v30 = dispatch_semaphore_create(0);
  int64_t v10 = *(void *)(*(void *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TaskPriority?)
                              - 8)
                  + 64);
  uint64_t v11 = alloca(v10);
  uint64_t v12 = alloca(v10);
  uint64_t v31 = &v21;
  uint64_t v13 = type metadata accessor for TaskPriority(0);
  __swift_storeEnumTagSinglePayload((uint64_t)&v21, 1, 1, v13);
  uint64_t v14 = swift_allocObject(a3, 64, 7);
  *(_OWORD *)(v14 + 16) = 0;
  *(void *)(v14 + 32) = v9;
  *(void *)(v14 + 40) = v29;
  *(void *)(v14 + 48) = a2;
  id v15 = v30;
  *(void *)(v14 + 56) = v30;
  swift_retain(v9);
  swift_retain(a2);
  id v16 = v15;
  uint64_t v17 = _sScTss5NeverORs_rlE8priority9operationScTyxABGScPSg_xyYaYAcntcfCyt_Tgm5((uint64_t)v31, v27, v14);
  swift_release(v17);
  OS_dispatch_semaphore.wait()();
  uint64_t v18 = v28;
  swift_beginAccess(v28, v23, 0, 0);
  outlined init with copy of Either<LogisticRegressionClassifier<Float, String>, FullyConnectedNetworkClassifier<Float, String>>(v18, (uint64_t)v24, &demangling cache variable for type metadata for Result<Any, Error>?);
  if (v25 == -1) {
    BUG();
  }
  if (v25)
  {
    uint64_t v26 = *(void *)&v24[0];
    if (_stdlib_isOSVersionAtLeastOrVariantVersionAtLeast(_:_:_:_:_:_:)(0xFuLL, 0, 0, 0x12uLL, 0, 0))
    {
      uint64_t v20 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Error);
      swift_willThrowTypedImpl(&v26, v20, &protocol self-conformance witness table for Error);
    }
    swift_release(v9);
  }
  else
  {
    outlined init with take of Any(v24, v22);
    swift_release(v9);

    uint64_t v19 = v34(0);
    swift_dynamicCast(v33, v22, (char *)&type metadata for Any + 8, v19, 7);
  }
}

void specialized blockAwait<A>(_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t *a5)
{
  uint64_t v32 = a5;
  uint64_t v26 = a4;
  uint64_t v31 = v5;
  uint64_t v28 = a1;
  uint64_t v7 = type metadata accessor for ResultBox();
  uint64_t v8 = swift_allocObject(v7, 49, 7);
  uint64_t v27 = v8 + 16;
  *(_OWORD *)(v8 + 16) = 0;
  *(_OWORD *)(v8 + 32) = 0;
  *(unsigned char *)(v8 + 48) = -1;
  id v29 = dispatch_semaphore_create(0);
  int64_t v9 = *(void *)(*(void *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TaskPriority?)
                             - 8)
                 + 64);
  int64_t v10 = alloca(v9);
  uint64_t v11 = alloca(v9);
  id v30 = &v19;
  uint64_t v12 = type metadata accessor for TaskPriority(0);
  __swift_storeEnumTagSinglePayload((uint64_t)&v19, 1, 1, v12);
  uint64_t v13 = swift_allocObject(a3, 64, 7);
  *(_OWORD *)(v13 + 16) = 0;
  *(void *)(v13 + 32) = v8;
  *(void *)(v13 + 40) = v28;
  *(void *)(v13 + 48) = a2;
  id v14 = v29;
  *(void *)(v13 + 56) = v29;
  swift_retain();
  swift_retain();
  id v15 = v14;
  _sScTss5NeverORs_rlE8priority9operationScTyxABGScPSg_xyYaYAcntcfCyt_Tgm5((uint64_t)v30, v26, v13);
  swift_release();
  OS_dispatch_semaphore.wait()();
  uint64_t v16 = v27;
  swift_beginAccess(v27, v21, 0, 0);
  outlined init with copy of Either<LogisticRegressionClassifier<Float, String>, FullyConnectedNetworkClassifier<Float, String>>(v16, (uint64_t)v22, &demangling cache variable for type metadata for Result<Any, Error>?);
  if (v23 == -1) {
    BUG();
  }
  if (v23)
  {
    uint64_t v25 = *(void *)&v22[0];
    if (_stdlib_isOSVersionAtLeastOrVariantVersionAtLeast(_:_:_:_:_:_:)(0xFuLL, 0, 0, 0x12uLL, 0, 0))
    {
      uint64_t v18 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Error);
      swift_willThrowTypedImpl(&v25, v18, &protocol self-conformance witness table for Error);
    }
    swift_release();
  }
  else
  {
    outlined init with take of Any(v22, v20);
    swift_release();

    uint64_t v17 = __swift_instantiateConcreteTypeFromMangledName(v32);
    swift_dynamicCast(v24, v20, (char *)&type metadata for Any + 8, v17, 7);
  }
}

uint64_t MLActivityClassifier.init(trainingData:featureColumns:labelColumn:recordingFileColumn:parameters:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4, void *a5, void *a6, __m128 a7, uint64_t a8)
{
  v79 = a4;
  v71._uint64_t countAndFlagsBits = a3;
  uint64_t v10 = v8;
  uint64_t v74 = v9;
  v73 = a6;
  v70 = a5;
  uint64_t v64 = type metadata accessor for MLActivityClassifier.Model(0);
  int64_t v11 = *(void *)(*(void *)(v64 - 8) + 64);
  uint64_t v12 = alloca(v11);
  uint64_t v13 = alloca(v11);
  v69 = v57;
  uint64_t v63 = *(void *)(type metadata accessor for MLActivityClassifier.Configuration(0) - 8);
  int64_t v14 = *(void *)(v63 + 64);
  id v15 = alloca(v14);
  uint64_t v16 = alloca(v14);
  v68 = v57;
  int64_t v62 = v14;
  uint64_t v17 = alloca(v14);
  uint64_t v18 = alloca(v14);
  uint64_t v77 = *(void *)a1;
  char v82 = *(unsigned char *)(a1 + 8);
  uint64_t v19 = (int *)type metadata accessor for MLActivityClassifier(0);
  uint64_t v20 = v19[7];
  *(void *)(v10 + v20) = 0x5F6E6F6973736573;
  uint64_t v61 = v20;
  *(void *)(v10 + v20 + 8) = 0xEA00000000006469;
  uint64_t v21 = v19[8];
  *(void *)(v10 + v21) = 0x6C6562616CLL;
  uint64_t v66 = v21;
  *(void *)(v10 + v21 + 8) = 0xE500000000000000;
  uint64_t v67 = v19[9];
  *(void *)(v10 + v67) = _swiftEmptyArrayStorage;
  uint64_t v22 = v19[10];
  strcpy((char *)(v10 + v22), "recordingFile");
  uint64_t v65 = v22;
  *(_WORD *)(v10 + v22 + 14) = -4864;
  uint64_t v78 = a2;
  if (!*(void *)(a2 + 16))
  {
    swift_bridgeObjectRelease(v73);
    swift_bridgeObjectRelease(v79);
    swift_bridgeObjectRelease(v78);
    outlined consume of Result<_DataTable, Error>(v77, v82);
    uint64_t v25 = lazy protocol witness table accessor for type MLCreateError and conformance MLCreateError();
    swift_allocError(&type metadata for MLCreateError, v25, 0, 0);
    *(void *)uint64_t v26 = 0xD000000000000035;
    *(void *)(v26 + 8) = "Prediction Window Size" + 0x8000000000000000;
    *(_OWORD *)(v26 + 16) = 0;
    *(_OWORD *)(v26 + 32) = 0;
    *(unsigned char *)(v26 + 48) = 0;
    swift_willThrow();
    uint64_t v27 = a8;
LABEL_5:
    outlined destroy of MLActivityClassifier.ModelParameters(v27, type metadata accessor for MLActivityClassifier.ModelParameters);
    goto LABEL_7;
  }
  v71._object = v57;
  uint64_t v59 = v77;
  char v23 = v82 & 1;
  char v60 = v82 & 1;
  uint64_t v24 = v74;
  validateAndConvertRawDataToInternalData(_:featureColumns:labelColumn:recordingFileColumn:)((uint64_t)&v59, v78, v71._countAndFlagsBits, (uint64_t)v79, (uint64_t)v70, v73, a7);
  if (v24)
  {
    outlined destroy of MLActivityClassifier.ModelParameters(a8, type metadata accessor for MLActivityClassifier.ModelParameters);
    swift_bridgeObjectRelease(v73);
    swift_bridgeObjectRelease(v79);
    swift_bridgeObjectRelease(v78);
    outlined consume of Result<_DataTable, Error>(v77, v82);
LABEL_7:
    swift_bridgeObjectRelease(*(void *)(v10 + v61 + 8));
    swift_bridgeObjectRelease(*(void *)(v10 + v66 + 8));
    swift_bridgeObjectRelease(*(void *)(v10 + v67));
    return swift_bridgeObjectRelease(*(void *)(v10 + v65 + 8));
  }
  char v80 = v23;
  uint64_t v72 = v75;
  char v81 = v76;
  uint64_t countAndFlagsBits = v71._countAndFlagsBits;
  id v29 = v79;
  static MLActivityClassifier.validateAndConvertParameters(_:featureColumns:labelColumn:recordingFileColumn:table:)(a8, v78, v71._countAndFlagsBits, v79, v70, v73, a7, &v75);
  uint64_t v74 = 0;
  *(void *)(v10 + v67) = v78;
  uint64_t v31 = v66;
  *(void *)(v10 + v66) = countAndFlagsBits;
  *(void *)(v10 + v31 + 8) = v29;
  uint64_t v32 = v65;
  *(void *)(v10 + v65) = v70;
  *(void *)(v10 + v32 + 8) = v73;
  uint64_t v78 = v10 + v19[6];
  outlined init with copy of MLTrainingSessionParameters(a8, v78, type metadata accessor for MLActivityClassifier.ModelParameters);
  outlined init with copy of MLTrainingSessionParameters((uint64_t)v71._object, (uint64_t)v68, type metadata accessor for MLActivityClassifier.Configuration);
  uint64_t v33 = *(unsigned __int8 *)(v63 + 80);
  uint64_t v34 = ~*(unsigned __int8 *)(v63 + 80) & (v33 + 16);
  uint64_t v35 = swift_allocObject(&unk_396F78, v34 + v62, v33 | 7);
  outlined init with take of MLClassifierMetrics((uint64_t)v68, v35 + v34, type metadata accessor for MLActivityClassifier.Configuration);
  swift_bridgeObjectRetain(v79);
  uint64_t v36 = v74;
  specialized blockAwait<A>(_:)((uint64_t)&async function pointer to partial apply for closure #1 in MLActivityClassifier.init(trainingData:featureColumns:labelColumn:recordingFileColumn:parameters:), v35, (uint64_t)&unk_397258, (uint64_t)&async function pointer to partial apply for specialized closure #1 in blockAwait<A>(_:), type metadata accessor for MLActivityClassifier.Model);
  swift_release();
  if (v36)
  {
    outlined consume of Result<_DataTable, Error>(v72, v81);
    outlined consume of Result<_DataTable, Error>(v77, v82);
    swift_bridgeObjectRelease(v79);
    outlined destroy of MLActivityClassifier.ModelParameters(a8, type metadata accessor for MLActivityClassifier.ModelParameters);
    outlined destroy of MLActivityClassifier.ModelParameters((uint64_t)v71._object, type metadata accessor for MLActivityClassifier.Configuration);
    uint64_t v27 = v78;
    goto LABEL_5;
  }
  outlined init with take of MLClassifierMetrics((uint64_t)v69, v10, type metadata accessor for MLActivityClassifier.Model);
  uint64_t v37 = *(void **)(v10 + *(int *)(v64 + 68));
  uint64_t v38 = v72;
  if (!v37) {
    BUG();
  }
  *(void *)(v10 + v19[5]) = v37;
  v37;
  if (AnalyticsReporter.init()())
  {
    outlined consume of Result<_DataTable, Error>(v38, v81);
    outlined consume of Result<_DataTable, Error>(v77, v82);
    swift_bridgeObjectRelease(v79);
    uint64_t v48 = a8;
  }
  else
  {
    uint64_t v74 = 0;
    uint64_t v39 = v77;
    uint64_t v75 = v77;
    char v40 = v80;
    char v76 = v80;
    Swift::Float v41 = (float)(int)MLDataTable.size.getter();
    AnalyticsReporter.reportDataMetrics(model:metricName:quantity:)(CreateML_ModelType_activityClassifier, (Swift::String)__PAIR128__((unint64_t)(" must be Int or String." + 0x8000000000000000), 0xD000000000000015), v41);
    uint64_t v75 = v39;
    char v76 = v40;
    v42._uint64_t countAndFlagsBits = v71._countAndFlagsBits;
    uint64_t v43 = v79;
    v42._object = v79;
    MLDataTable.subscript.getter(v42);
    swift_bridgeObjectRelease(v43);
    outlined consume of Result<_DataTable, Error>(v39, v82);
    uint64_t v44 = v59;
    char v45 = v60;
    v57[1] = v59;
    char v58 = v60;
    MLUntypedColumn.dropDuplicates()();
    outlined consume of Result<_DataTable, Error>(v44, v45);
    uint64_t v46 = v75;
    if (v76)
    {
      outlined consume of Result<_DataTable, Error>(v75, 1);
      float v47 = -1.0;
    }
    else
    {
      swift_retain();
      int v49 = CMLColumn.size.getter();
      outlined consume of Result<_DataTable, Error>(v46, 0);
      outlined consume of Result<_DataTable, Error>(v46, 0);
      float v47 = (float)v49;
    }
    uint64_t v48 = a8;
    AnalyticsReporter.reportDataMetrics(model:metricName:quantity:)(CreateML_ModelType_activityClassifier, (Swift::String)__PAIR128__((unint64_t)("Number of Annotations" + 0x8000000000000000), 0xD000000000000010), v47);
    uint64_t v50 = (int *)type metadata accessor for MLActivityClassifier.ModelParameters(0);
    uint64_t v51 = v50[6];
    float v52 = 0.0;
    if (!*(unsigned char *)(a8 + v51 + 8)) {
      float v52 = (float)(int)*(void *)(a8 + v51);
    }
    AnalyticsReporter.reportDataMetrics(model:metricName:quantity:)(CreateML_ModelType_activityClassifier, (Swift::String)__PAIR128__(0xEE00736E6F697461, 0x726574492078614DLL), v52);
    uint64_t v53 = v50[7];
    float v54 = 0.0;
    if (!*(unsigned char *)(a8 + v53 + 8)) {
      float v54 = (float)(int)*(void *)(a8 + v53);
    }
    AnalyticsReporter.reportDataMetrics(model:metricName:quantity:)(CreateML_ModelType_activityClassifier, (Swift::String)__PAIR128__(0xEA0000000000657ALL, 0x6953206863746142), v54);
    uint64_t v55 = v50[8];
    float v56 = 0.0;
    if (!*(unsigned char *)(a8 + v55 + 8)) {
      float v56 = (float)(int)*(void *)(a8 + v55);
    }
    AnalyticsReporter.reportDataMetrics(model:metricName:quantity:)(CreateML_ModelType_activityClassifier, (Swift::String)__PAIR128__((unint64_t)("Number of Labels" + 0x8000000000000000), 0xD000000000000016), v56);
    outlined consume of Result<_DataTable, Error>(v72, v81);
  }
  outlined destroy of MLActivityClassifier.ModelParameters(v48, type metadata accessor for MLActivityClassifier.ModelParameters);
  return outlined destroy of MLActivityClassifier.ModelParameters((uint64_t)v71._object, type metadata accessor for MLActivityClassifier.Configuration);
}

uint64_t validateAndConvertRawDataToInternalData(_:featureColumns:labelColumn:recordingFileColumn:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, void *a6, __m128 a7)
{
  v250.i64[0] = a4;
  v251._uint64_t countAndFlagsBits = a3;
  v227 = v7;
  uint64_t v256 = v8;
  v239 = a6;
  v240._uint64_t countAndFlagsBits = a5;
  v248.i64[0] = type metadata accessor for Date(0);
  uint64_t v235 = *(void *)(v248.i64[0] - 8);
  int64_t v9 = *(void *)(v235 + 64);
  uint64_t v10 = alloca(v9);
  int64_t v11 = alloca(v9);
  v253._uint64_t countAndFlagsBits = (uint64_t)v224;
  uint64_t v236 = type metadata accessor for _TablePrinter(0);
  int64_t v12 = *(void *)(*(void *)(v236 - 8) + 64);
  uint64_t v13 = alloca(v12);
  int64_t v14 = alloca(v12);
  v249 = (uint64_t *)v224;
  id v15 = *(void **)a1;
  unsigned __int8 v16 = *(unsigned char *)(a1 + 8);
  uint64_t v17 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [Double]);
  uint64_t v18 = Dictionary.init(dictionaryLiteral:)(_swiftEmptyArrayStorage, &type metadata for String, v17, &protocol witness table for String);
  v243 = _swiftEmptyArrayStorage;
  v244 = _swiftEmptyArrayStorage;
  v257 = v15;
  v258.i64[0] = (uint64_t)v15;
  unsigned __int8 v262 = v16;
  v258.i8[8] = v16;
  v234._object = *(void **)(a2 + 16);
  object = (char *)v234._object + 2;
  if (__OFADD__(2, v234._object)) {
    BUG();
  }
  v254 = (void *)v18;
  swift_bridgeObjectRetain(v250.i64[0]);
  swift_bridgeObjectRetain(v239);
  swift_bridgeObjectRetain(a2);
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(a2);
  if (!isUniquelyReferenced_nonNull_native || (uint64_t v21 = (void *)a2, *(void *)(a2 + 24) >> 1 < (uint64_t)object))
  {
    if ((uint64_t)v234._object > (uint64_t)object) {
      object = (char *)v234._object;
    }
    uint64_t v21 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(isUniquelyReferenced_nonNull_native, (int64_t)object, 1, a2);
  }
  unint64_t v245 = a2;
  unint64_t v22 = v21[2];
  unint64_t v252 = v21[3];
  unint64_t v23 = v252 >> 1;
  unint64_t v24 = v22 + 1;
  swift_bridgeObjectRetain(v250.i64[0]);
  if (v23 <= v22) {
    uint64_t v21 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(v252 >= 2, v22 + 1, 1, (uint64_t)v21);
  }
  uint64_t countAndFlagsBits = v251._countAndFlagsBits;
  v21[2] = v24;
  uint64_t v26 = 2 * v22;
  v21[v26 + 4] = countAndFlagsBits;
  v21[v26 + 5] = v250.i64[0];
  unint64_t v252 = v21[3];
  unint64_t v27 = v252 >> 1;
  int64_t v28 = v22 + 2;
  swift_bridgeObjectRetain(v239);
  if (v27 <= v24) {
    uint64_t v21 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(v252 >= 2, v28, 1, (uint64_t)v21);
  }
  v21[2] = v28;
  uint64_t v29 = 2 * v24;
  v21[v29 + 4] = v240._countAndFlagsBits;
  id v30 = v239;
  v21[v29 + 5] = v239;
  uint64_t v31 = v250.i64[0];
  swift_bridgeObjectRelease(v250.i64[0]);
  swift_bridgeObjectRelease(v30);
  uint64_t v32 = v256;
  static _ValidationUtilities.validateTableFormat(table:context:columns:)((uint64_t)&v258, 0x6420726F736E6553, (void *)0xEB00000000617461, (uint64_t)v21);
  uint64_t v33 = v21;
  if (v32) {
    goto LABEL_12;
  }
  swift_bridgeObjectRelease(v21);
  uint64_t v34 = v257;
  v258.i64[0] = (uint64_t)v257;
  v258.i8[8] = v262;
  LOBYTE(v260) = 3;
  static _ValidationUtilities.validateTableTypes(table:columns:type:)((uint64_t)&v258, v245, (char *)&v260, *(double *)a7.i64);
  v258.i64[0] = (uint64_t)v34;
  v258.i8[8] = v262;
  uint64_t v35 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<String>);
  inited = (void *)swift_initStackObject(v35, v224);
  inited[2] = 2;
  inited[3] = 4;
  inited[4] = v251._countAndFlagsBits;
  inited[5] = v31;
  inited[6] = v240._countAndFlagsBits;
  inited[7] = v30;
  LOBYTE(v260) = 2;
  swift_bridgeObjectRetain(v31);
  swift_bridgeObjectRetain(v30);
  static _ValidationUtilities.validateTableTypes(table:columns:type:)((uint64_t)&v258, (unint64_t)inited, (char *)&v260, *(double *)a7.i64);
  swift_setDeallocating(inited);
  specialized _ContiguousArrayStorage.__deallocating_deinit();
  uint64_t v37 = v30;
  uint64_t v38 = v257;
  v258.i64[0] = (uint64_t)v257;
  v258.i8[8] = v262;
  int v39 = v262;
  outlined copy of Result<_DataTable, Error>((uint64_t)v257, v262);
  v40._uint64_t countAndFlagsBits = v240._countAndFlagsBits;
  v40._object = v37;
  MLDataTable.subscript.getter(v40);
  LODWORD(v252) = v39;
  outlined consume of Result<_DataTable, Error>((uint64_t)v38, v39);
  Swift::Float v41 = v260;
  unsigned __int8 v42 = v262;
  uint64_t v256 = 0;
  if (v261)
  {
    outlined consume of Result<_DataTable, Error>((uint64_t)v260, 1);
LABEL_18:
    v240._object = 0;
    uint64_t v255 = 0;
    goto LABEL_19;
  }
  swift_retain();
  _UntypedColumn.valueAtIndex(index:)(0, *(double *)a7.i64);
  outlined consume of Result<_DataTable, Error>((uint64_t)v41, 0);
  outlined consume of Result<_DataTable, Error>((uint64_t)v41, 0);
  if (v259 != 2)
  {
    outlined consume of MLDataValue((void *)v258.i64[0], (void *)v258.i64[1], v259);
    goto LABEL_18;
  }
  uint64_t v255 = v258.i64[1];
  v240._object = (void *)v258.i64[0];
LABEL_19:
  v258.i64[0] = (uint64_t)v257;
  v258.i8[8] = v42;
  char v43 = v252;
  outlined copy of Result<_DataTable, Error>((uint64_t)v257, v252);
  Swift::Int v44 = MLDataTable.size.getter();
  uint64_t v45 = specialized RandomAccessCollection<>.distance(from:to:)(0, v44);
  uint64_t v46 = v257;
  outlined consume of Result<_DataTable, Error>((uint64_t)v257, v43);
  uint64_t v47 = v236;
  uint64_t v48 = v249;
  int v49 = (char *)v249 + *(int *)(v236 + 20);
  Date.init()(v46);
  *uint64_t v48 = v45;
  type metadata accessor for OS_os_log(0, &lazy cache variable for type metadata for OS_os_log, OS_os_log_ptr);
  uint64_t v50 = OS_os_log.init(subsystem:category:)(0xD000000000000025, "MLActivityClassifierTrainer" + 0x8000000000000000, 0x72705F656C626174, 0xED00007265746E69);
  uint64_t v229 = *(int *)(v47 + 24);
  *(uint64_t *)((char *)v48 + v229) = v50;
  uint64_t v51 = *(int *)(v47 + 28);
  *(uint64_t *)((char *)v48 + v51) = 0x73656C6946;
  *(uint64_t *)((char *)v48 + v51 + 8) = 0xE500000000000000;
  uint64_t v52 = v253._countAndFlagsBits;
  Date.init()(0xD000000000000025);
  (*(void (**)(unsigned char *, uint64_t, uint64_t))(v235 + 40))(v49, v52, v248.i64[0]);
  _TablePrinter.beginTable()();
  v258.i64[0] = (uint64_t)v257;
  v258.i8[8] = v262;
  LOBYTE(v48) = v252;
  outlined copy of Result<_DataTable, Error>((uint64_t)v257, v252);
  Swift::Int v53 = MLDataTable.size.getter();
  float v54 = v257;
  uint64_t v55 = specialized RandomAccessCollection<>.distance(from:to:)(0, v53);
  outlined consume of Result<_DataTable, Error>((uint64_t)v54, (char)v48);
  if (v55 < 0) {
    BUG();
  }
  if (!v55)
  {
LABEL_101:
    swift_bridgeObjectRelease(v255);
    v260 = (void *)Dictionary.init(dictionaryLiteral:)(_swiftEmptyArrayStorage, &type metadata for String, &type metadata for MLUntypedColumn, &protocol witness table for String);
    v165 = alloca(24);
    v166 = alloca(24);
    v225 = (__m128 *)&v260;
    uint64_t v167 = (uint64_t)v254;
    swift_bridgeObjectRetain(v254);
    uint64_t v168 = v256;
    specialized Sequence.forEach(_:)(v167, (void (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #2 in validateAndConvertRawDataToInternalData(_:featureColumns:labelColumn:recordingFileColumn:));
    v250.i64[0] = v168;
    v254 = (void *)v167;
    swift_bridgeObjectRelease(v167);
    v258.i64[0] = (uint64_t)v243;
    v169 = alloca(24);
    v170 = alloca(32);
    v225 = &v258;
    uint64_t ML14_UntypedColumnC_s5Error_pTgm5 = _ss6ResultOsRi_zrlE8catchingAByxq_Gxyq_YKXE_tcfC8CreateML14_UntypedColumnC_s5Error_pTgm5((void (*)(void *))partial apply for specialized closure #1 in MLUntypedColumn.init<A>(_:));
    char v173 = v172 & 1;
    swift_bridgeObjectRelease(v258.i64[0]);
    char v174 = swift_isUniquelyReferenced_nonNull_native(v260);
    v258.i64[0] = (uint64_t)v260;
    v260 = (void *)0x8000000000000000;
    specialized _NativeDictionary.setValue(_:forKey:isUnique:)(ML14_UntypedColumnC_s5Error_pTgm5, v173, 0x6C6562616CLL, 0xE500000000000000, v174);
    v175 = v260;
    v260 = (void *)v258.i64[0];
    swift_bridgeObjectRelease(v175);
    v258.i64[0] = (uint64_t)v244;
    v176 = alloca(24);
    v177 = alloca(32);
    v225 = &v258;
    uint64_t v178 = _ss6ResultOsRi_zrlE8catchingAByxq_Gxyq_YKXE_tcfC8CreateML14_UntypedColumnC_s5Error_pTgm5((void (*)(void *))partial apply for specialized closure #1 in MLUntypedColumn.init<A>(_:));
    LOBYTE(v167) = v179 & 1;
    swift_bridgeObjectRelease(v258.i64[0]);
    char v180 = swift_isUniquelyReferenced_nonNull_native(v260);
    v258.i64[0] = (uint64_t)v260;
    v260 = (void *)0x8000000000000000;
    specialized _NativeDictionary.setValue(_:forKey:isUnique:)(v178, v167, 0x5F6E6F6973736573, 0xEA00000000006469, v180);
    v181 = v260;
    v260 = (void *)v258.i64[0];
    swift_bridgeObjectRelease(v181);
    uint64_t v182 = (uint64_t)v249;
    static os_log_type_t.info.getter();
    uint64_t v183 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<CVarArg>);
    v184 = (void *)swift_allocObject(v183, 72, 7);
    v184[2] = 1;
    v184[3] = 2;
    v184[7] = &type metadata for Int;
    v184[8] = &protocol witness table for Int;
    v184[4] = 3;
    os_log(_:dso:log:type:_:)("event: %lu", 10);
    swift_bridgeObjectRelease(v184);
    v185 = v260;
    swift_bridgeObjectRetain(v260);
    uint64_t v186 = v250.i64[0];
    specialized MLDataTable.init<A>(uniqueKeysWithValues:)((uint64_t)v185);
    if (!v186)
    {
      __int8 v187 = v258.i8[8];
      v188 = v227;
      void *v227 = v258.i64[0];
      *((unsigned char *)v188 + 8) = v187;
    }
    outlined destroy of MLActivityClassifier.ModelParameters(v182, type metadata accessor for _TablePrinter);
    uint64_t v33 = v260;
LABEL_12:
    swift_bridgeObjectRelease(v33);
    return swift_bridgeObjectRelease(v254);
  }
  if (!v234._object) {
    BUG();
  }
  uint64_t v236 = v245 + 32;
  uint64_t v241 = 0;
  v228 = "ml.activityclassifier" + 0x8000000000000000;
  v232 = "ot exist on row " + 0x8000000000000000;
  float v56 = 0;
  v231 = (char *)v55;
  while (1)
  {
    v251._object = v56;
    if (v56 == (char *)v55) {
      BUG();
    }
    uint64_t v57 = *(void *)(v245 + 32);
    char v58 = *(void **)(v245 + 40);
    v258.i64[0] = (uint64_t)v54;
    v258.i8[8] = v262;
    char v59 = v252;
    outlined copy of Result<_DataTable, Error>((uint64_t)v54, v252);
    swift_bridgeObjectRetain(v58);
    v234._uint64_t countAndFlagsBits = v57;
    v60._uint64_t countAndFlagsBits = v57;
    v60._object = v58;
    MLDataTable.subscript.getter(v60);
    v233 = v58;
    swift_bridgeObjectRelease(v58);
    outlined consume of Result<_DataTable, Error>((uint64_t)v257, v59);
    uint64_t v61 = v260;
    if (v261)
    {
      outlined consume of Result<_DataTable, Error>((uint64_t)v260, 1);
LABEL_145:
      swift_bridgeObjectRelease(v255);
      BUG();
    }
    swift_retain();
    _UntypedColumn.valueAtIndex(index:)((uint64_t)v251._object, *(double *)a7.i64);
    outlined consume of Result<_DataTable, Error>((uint64_t)v61, 0);
    outlined consume of Result<_DataTable, Error>((uint64_t)v61, 0);
    __m128 v62 = v258;
    if (v259 != 3)
    {
      outlined consume of MLDataValue((void *)v258.i64[0], (void *)v258.i64[1], v259);
      goto LABEL_145;
    }
    uint64_t v63 = CMLSequence.size.getter();
    uint64_t v64 = specialized RandomAccessCollection<>.distance(from:to:)(0, v63);
    outlined consume of MLDataValue((void *)v62.i64[0], (void *)v62.i64[1], 3);
    uint64_t v238 = v64;
    if (v64 <= 0)
    {
      swift_bridgeObjectRelease(v255);
      swift_bridgeObjectRelease(v244);
      swift_bridgeObjectRelease(v243);
      v258.i64[0] = 0;
      v258.i64[1] = 0xE000000000000000;
      _StringGuts.grow(_:)(57);
      v212._uint64_t countAndFlagsBits = 0x2065727574616546;
      v212._object = (void *)0xEF206E6D756C6F63;
      String.append(_:)(v212);
      v213 = v233;
      swift_bridgeObjectRetain(v233);
      v212._uint64_t countAndFlagsBits = v234._countAndFlagsBits;
      v212._object = v213;
      String.append(_:)(v212);
      swift_bridgeObjectRelease(v213);
      v214._uint64_t countAndFlagsBits = 0xD000000000000011;
      v214._object = "Swift/Dictionary.swift" + 0x8000000000000000;
      goto LABEL_126;
    }
    v230 = (char *)v251._object + 1;
    swift_bridgeObjectRetain(v245);
    uint64_t v65 = 0;
    uint64_t v66 = v257;
    do
    {
      uint64_t v67 = *(void *)(v236 + 16 * v65);
      unint64_t v68 = *(void *)(v236 + 16 * v65 + 8);
      v253._uint64_t countAndFlagsBits = v67;
      uint64_t v235 = v65;
      if (v262)
      {
        outlined copy of Result<_DataTable, Error>((uint64_t)v66, 1);
        swift_bridgeObjectRetain(v68);
        swift_willThrow();
        uint64_t v256 = 0;
LABEL_37:
        v258.i64[0] = 0;
        v258.i64[1] = 0xE000000000000000;
        _StringGuts.grow(_:)(34);
        swift_bridgeObjectRelease(v258.i64[1]);
        v258.i64[0] = 0xD00000000000001FLL;
        v258.i64[1] = (uint64_t)v228;
        v77._uint64_t countAndFlagsBits = v253._countAndFlagsBits;
        v77._object = (void *)v68;
        String.append(_:)(v77);
        v77._uint64_t countAndFlagsBits = 34;
        v77._object = (void *)0xE100000000000000;
        String.append(_:)(v77);
        __m128 v248 = v258;
        uint64_t v78 = lazy protocol witness table accessor for type MLCreateError and conformance MLCreateError();
        uint64_t v79 = swift_allocError(&type metadata for MLCreateError, v78, 0, 0);
        *(__m128 *)uint64_t v80 = v248;
        a7.i64[0] = 0;
        *(_OWORD *)(v80 + 16) = 0;
        *(_OWORD *)(v80 + 32) = 0;
        *(unsigned char *)(v80 + 48) = 1;
        uint64_t v66 = v257;
        outlined consume of Result<_DataTable, Error>((uint64_t)v257, v252);
        outlined consume of Result<_DataTable, Error>(v79, 1);
        swift_bridgeObjectRelease(v68);
        uint64_t v81 = v251._countAndFlagsBits;
        goto LABEL_38;
      }
      uint64_t v69 = v66[2];
      if ((v68 & 0x1000000000000000) == 0)
      {
        if ((v68 & 0x2000000000000000) != 0)
        {
          v258.i64[0] = v67;
          v258.i64[1] = v68 & 0xFFFFFFFFFFFFFFLL;
          uint64_t v74 = *(void *)(v69 + 16);
          outlined copy of Result<_DataTable, Error>((uint64_t)v66, 0);
          swift_bridgeObjectRetain(v68);
          swift_retain();
          uint64_t v75 = v256;
          uint64_t v76 = specialized handling<A, B, C>(_:_:_:)(v74, (uint64_t)&v258);
          if (v75)
          {
            swift_errorRelease(v75);
            swift_release();
            uint64_t v256 = 0;
            goto LABEL_37;
          }
          uint64_t v82 = v76;
          v253._object = (void *)v68;
          uint64_t v256 = 0;
          if (!v76) {
            BUG();
          }
          goto LABEL_43;
        }
        if ((v67 & 0x1000000000000000) != 0)
        {
          uint64_t v70 = (uint64_t)v66;
          uint64_t v71 = *(void *)(v69 + 16);
          outlined copy of Result<_DataTable, Error>(v70, 0);
          v253._object = (void *)v68;
          swift_bridgeObjectRetain(v68);
          swift_retain();
          uint64_t v72 = v256;
          uint64_t v73 = specialized handling<A, B, C>(_:_:_:)(v71, (v68 & 0xFFFFFFFFFFFFFFFLL) + 32);
          if (v72) {
            goto LABEL_34;
          }
          uint64_t v82 = v73;
          uint64_t v66 = v257;
          uint64_t v256 = 0;
          if (!v73) {
            BUG();
          }
LABEL_43:
          uint64_t v83 = type metadata accessor for CMLColumn();
          v84 = (void *)swift_allocObject(v83, 24, 7);
          v84[2] = v82;
          v260 = v84;
          swift_release();
          outlined consume of Result<_DataTable, Error>((uint64_t)v66, 0);
          goto LABEL_44;
        }
      }
      outlined copy of Result<_DataTable, Error>((uint64_t)v66, 0);
      uint64_t v138 = type metadata accessor for CMLColumn();
      swift_bridgeObjectRetain(v68);
      swift_retain();
      v253._object = (void *)v68;
      uint64_t v72 = v256;
      _StringGuts._slowWithCString<A>(_:)(partial apply for closure #1 in CMLTable.column(name:), v69, v253._countAndFlagsBits, v68, v138);
      if (v72)
      {
LABEL_34:
        swift_errorRelease(v72);
        swift_release();
        uint64_t v256 = 0;
        unint64_t v68 = (unint64_t)v253._object;
        goto LABEL_37;
      }
      uint64_t v256 = 0;
      swift_release();
      outlined consume of Result<_DataTable, Error>((uint64_t)v66, 0);
LABEL_44:
      v85 = v260;
      uint64_t v86 = type metadata accessor for _UntypedColumn();
      uint64_t v87 = swift_allocObject(v86, 24, 7);
      *(void *)(v87 + 16) = v85;
      swift_retain();
      _UntypedColumn.valueAtIndex(index:)((uint64_t)v251._object, *(double *)a7.i64);
      outlined consume of Result<_DataTable, Error>(v87, 0);
      outlined consume of Result<_DataTable, Error>(v87, 0);
      v88 = (void *)v258.i64[0];
      if (v259 != 3)
      {
        outlined consume of MLDataValue((void *)v258.i64[0], (void *)v258.i64[1], v259);
        swift_bridgeObjectRelease(v253._object);
        uint64_t v81 = v251._countAndFlagsBits;
        uint64_t v66 = v257;
        goto LABEL_38;
      }
      v246 = (void *)v258.i64[1];
      swift_retain();
      uint64_t v89 = CMLSequence.size.getter();
      if (CMLSequence.size.getter() < 0) {
        BUG();
      }
      uint64_t v90 = CMLSequence.size.getter();
      outlined consume of MLDataValue(v88, v246, 3);
      if (v89 < 0 || v90 < v89) {
        BUG();
      }
      v242 = v88;
      if (v89 != v238)
      {
        swift_bridgeObjectRelease(v245);
        swift_bridgeObjectRelease(v255);
        swift_bridgeObjectRelease(v244);
        swift_bridgeObjectRelease(v243);
        v258.i64[0] = 0;
        v258.i64[1] = 0xE000000000000000;
        _StringGuts.grow(_:)(84);
        v205._uint64_t countAndFlagsBits = 0xD00000000000002CLL;
        v205._object = "Extracting features for File " + 0x8000000000000000;
        String.append(_:)(v205);
        v206 = v253._object;
        String.append(_:)(v253);
        swift_bridgeObjectRelease(v206);
        v205._uint64_t countAndFlagsBits = 0x20646E6120;
        v205._object = (void *)0xE500000000000000;
        String.append(_:)(v205);
        v207 = v233;
        swift_bridgeObjectRetain(v233);
        v205._uint64_t countAndFlagsBits = v234._countAndFlagsBits;
        v205._object = v207;
        String.append(_:)(v205);
        swift_bridgeObjectRelease(v207);
        v205._uint64_t countAndFlagsBits = 0x20776F72206E6F20;
        v205._object = (void *)0xE800000000000000;
        String.append(_:)(v205);
        v260 = v251._object;
        uint64_t v208 = dispatch thunk of CustomStringConvertible.description.getter(&type metadata for Int, &protocol witness table for Int);
        v210 = v209;
        v205._uint64_t countAndFlagsBits = v208;
        v205._object = v209;
        String.append(_:)(v205);
        swift_bridgeObjectRelease(v210);
        v205._object = "Label does not exist on row " + 0x8000000000000000;
        v205._uint64_t countAndFlagsBits = 0xD000000000000015;
        String.append(_:)(v205);
        __m128 v250 = v258;
        v205._object = (void *)lazy protocol witness table accessor for type MLCreateError and conformance MLCreateError();
        swift_allocError(&type metadata for MLCreateError, v205._object, 0, 0);
        *(__m128 *)uint64_t v211 = v250;
        *(_OWORD *)(v211 + 16) = 0;
        *(_OWORD *)(v211 + 32) = 0;
        *(unsigned char *)(v211 + 48) = 1;
        swift_willThrow();
        outlined consume of MLDataValue(v242, v246, 3);
        goto LABEL_127;
      }
      int64_t v91 = CMLSequence.size.getter();
      if (CMLSequence.size.getter() < 0) {
        BUG();
      }
      uint64_t v92 = CMLSequence.size.getter();
      uint64_t v93 = v256;
      if (v91 < 0 || v92 < v91) {
        BUG();
      }
      if (v91)
      {
        v258.i64[0] = (uint64_t)_swiftEmptyArrayStorage;
        unint64_t v247 = v91;
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v91, 0);
        unint64_t v94 = v247;
        uint64_t v95 = v258.i64[0];
        uint64_t v96 = 0;
        while (2)
        {
          if (v94 == v96) {
            BUG();
          }
          v248.i64[0] = v95;
          swift_retain();
          uint64_t v97 = CMLSequence.value(at:)(v96);
          if (v93)
          {
            outlined consume of MLDataValue(v88, v246, 3);
            v220 = "CreateML/SequenceType.swift";
            uint64_t v221 = 27;
            uint64_t v222 = 36;
            uint64_t v223 = v93;
          }
          else
          {
            uint64_t v98 = v97;
            outlined consume of MLDataValue(v88, v246, 3);
            switch(CMLFeatureValue.type.getter())
            {
              case 0u:
                uint64_t v99 = *(void *)(v98 + 16);
                swift_retain();
                int v100 = specialized handling<A, B>(_:_:)(v99);
                uint64_t v256 = 0;
                swift_release_n(v98, 2);
                *(double *)a7.i64 = (double)v100;
                goto LABEL_59;
              case 1u:
                uint64_t v101 = *(void *)(v98 + 16);
                swift_retain();
                specialized handling<A, B>(_:_:)(v101);
                uint64_t v237 = a7.i64[0];
                uint64_t v256 = 0;
                swift_release_n(v98, 2);
                a7.i64[0] = v237;
LABEL_59:
                uint64_t v102 = v248.i64[0];
                v258.i64[0] = v248.i64[0];
                unint64_t v103 = *(void *)(v248.i64[0] + 16);
                unint64_t v104 = *(void *)(v248.i64[0] + 24);
                if (v104 >> 1 <= v103)
                {
                  uint64_t v237 = a7.i64[0];
                  specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v104 >= 2, v103 + 1, 1);
                  a7.i64[0] = v237;
                  uint64_t v102 = v258.i64[0];
                }
                *(void *)(v102 + 16) = v103 + 1;
                v248.i64[0] = v102;
                *(void *)(v102 + 8 * v103 + 32) = a7.i64[0];
                v88 = v242;
                if (v96 >= CMLSequence.size.getter()) {
                  BUG();
                }
                ++v96;
                unint64_t v94 = v247;
                uint64_t v93 = v256;
                uint64_t v95 = v248.i64[0];
                if (v247 == v96) {
                  goto LABEL_66;
                }
                continue;
              case 2u:
                swift_retain();
                Swift::String v191 = CMLFeatureValue.stringValue()();
                if (v192)
                {
                  swift_release();
                  swift_errorRelease(v192);
                  BUG();
                }
                v189 = (void *)v191._countAndFlagsBits;
                v193 = v191._object;
                swift_release_n(v98, 2);
                char v190 = 2;
                goto LABEL_115;
              case 3u:
                uint64_t v199 = *(void *)(v98 + 16);
                swift_retain();
                uint64_t v200 = specialized handling<A, B>(_:_:)(v199);
                if (!v200) {
                  BUG();
                }
                swift_release_n(v98, 2);
                v193 = 0;
                uint64_t v201 = type metadata accessor for CMLSequence();
                v189 = (void *)swift_allocObject(v201, 25, 7);
                v189[2] = v200;
                *((unsigned char *)v189 + 24) = 1;
                char v190 = 3;
                goto LABEL_115;
              case 4u:
                uint64_t v194 = *(void *)(v98 + 16);
                swift_retain();
                uint64_t v195 = specialized handling<A, B>(_:_:)(v194);
                v250.i64[0] = 0;
                if (!v195) {
                  BUG();
                }
                uint64_t v196 = type metadata accessor for CMLDictionary();
                uint64_t v197 = swift_allocObject(v196, 24, 7);
                v226[0] = v197;
                v226[1] = (uint64_t)closure #1 in MLDataValue.DictionaryType.init(from:);
                v226[2] = 0;
                v226[3] = (uint64_t)specialized closure #1 in LazySequenceProtocol.compactMap<A>(_:);
                v226[4] = 0;
                v226[5] = (uint64_t)specialized closure #2 in LazySequenceProtocol.compactMap<A>(_:);
                v226[6] = 0;
                *(void *)(v197 + 16) = v195;
                v260 = _swiftEmptyDictionarySingleton;
                swift_retain_n(v197, 2);
                uint64_t v198 = v250.i64[0];
                specialized _NativeDictionary.merge<A>(_:isUnique:uniquingKeysWith:)(v226, 1, &v260);
                if (!v198)
                {
                  swift_release_n(v98, 2);
                  swift_release_n(v197, 2);
                  v189 = v260;
                  char v190 = 4;
LABEL_114:
                  v193 = 0;
LABEL_115:
                  uint64_t v202 = lazy protocol witness table accessor for type MLCreateError and conformance MLCreateError();
                  swift_allocError(&type metadata for MLCreateError, v202, 0, 0);
                  *(void *)uint64_t v203 = 0xD00000000000002BLL;
                  *(void *)(v203 + 8) = "CreateML/SequenceType.swift" + 0x8000000000000000;
                  *(_OWORD *)(v203 + 16) = 0;
                  *(_OWORD *)(v203 + 32) = 0;
                  *(unsigned char *)(v203 + 48) = 1;
                  swift_willThrow();
                  outlined consume of MLDataValue(v189, v193, v190);
                  swift_bridgeObjectRelease(v245);
                  swift_bridgeObjectRelease(v253._object);
                  swift_release();
                  swift_bridgeObjectRelease(v255);
                  outlined destroy of MLActivityClassifier.ModelParameters((uint64_t)v249, type metadata accessor for _TablePrinter);
                  swift_bridgeObjectRelease(v244);
                  swift_bridgeObjectRelease(v243);
                  outlined consume of MLDataValue(v242, v246, 3);
                  return swift_bridgeObjectRelease(v254);
                }
                v220 = "Swift/Dictionary.swift";
                uint64_t v221 = 22;
                uint64_t v222 = 489;
                uint64_t v223 = v198;
                break;
              case 5u:
                swift_release();
                char v190 = 6;
                v189 = 0;
                goto LABEL_114;
              case 6u:
                swift_retain();
                MLDataValue.MultiArrayType.init(from:)(v98);
                v189 = v260;
                if (!v260) {
                  BUG();
                }
                swift_release();
                char v190 = 5;
                goto LABEL_114;
            }
          }
          break;
        }
        swift_unexpectedError(v223, v220, v221, 1, v222);
        BUG();
      }
      v248.i64[0] = (uint64_t)_swiftEmptyArrayStorage;
LABEL_66:
      v105 = v254;
      if (v254[2])
      {
        v106 = v253._object;
        swift_bridgeObjectRetain(v253._object);
        unint64_t v107 = specialized __RawDictionaryStorage.find<A>(_:)(v253._countAndFlagsBits, (uint64_t)v106);
        if (v108)
        {
          uint64_t v109 = *(void *)(v105[7] + 8 * v107);
          swift_bridgeObjectRetain(v109);
          swift_bridgeObjectRelease(v106);
          v258.i64[0] = v109;
          specialized Array.append<A>(contentsOf:)(v248.i64[0]);
          v248.i64[0] = v258.i64[0];
          char v110 = swift_isUniquelyReferenced_nonNull_native(v105);
          v260 = v105;
          v253._object = v106;
          unint64_t v247 = specialized __RawDictionaryStorage.find<A>(_:)(v253._countAndFlagsBits, (uint64_t)v106);
          BOOL v112 = (v111 & 1) == 0;
          BOOL v113 = __OFADD__(v105[2], v112);
          Swift::Int v114 = v105[2] + v112;
          if (v113) {
            BUG();
          }
          char v115 = v111;
          __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _NativeDictionary<String, [Double]>);
          Swift::Bool v116 = _NativeDictionary.ensureUnique(isUnique:capacity:)(v110, v114);
          v117 = v253._object;
          uint64_t v118 = v253._countAndFlagsBits;
          unint64_t v119 = v247;
          if (v116)
          {
            unint64_t v119 = specialized __RawDictionaryStorage.find<A>(_:)(v253._countAndFlagsBits, (uint64_t)v253._object);
            if ((v115 & 1) != (v120 & 1)) {
              goto LABEL_152;
            }
            uint64_t v118 = v253._countAndFlagsBits;
          }
          v254 = v260;
          if (v115)
          {
            uint64_t v121 = v260[7];
            swift_bridgeObjectRelease(*(void *)(v121 + 8 * v119));
            *(void *)(v121 + 8 * v119) = v248.i64[0];
          }
          else
          {
            specialized _NativeDictionary._insert(at:key:value:)(v119, v118, (uint64_t)v117, v248.i64[0], v260);
            swift_bridgeObjectRetain(v117);
          }
          uint64_t v81 = v251._countAndFlagsBits;
          uint64_t v66 = v257;
          swift_bridgeObjectRelease(v117);
          swift_bridgeObjectRelease(0x8000000000000000);
          outlined consume of MLDataValue(v242, v246, 3);
          goto LABEL_38;
        }
        swift_bridgeObjectRelease(v106);
      }
      v122 = v105;
      char v123 = swift_isUniquelyReferenced_nonNull_native(v105);
      v258.i64[0] = (uint64_t)v122;
      unint64_t v124 = specialized __RawDictionaryStorage.find<A>(_:)(v253._countAndFlagsBits, (uint64_t)v253._object);
      LOBYTE(v247) = v125;
      BOOL v126 = (v125 & 1) == 0;
      BOOL v113 = __OFADD__(v122[2], v126);
      Swift::Int v127 = v122[2] + v126;
      if (v113) {
        BUG();
      }
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _NativeDictionary<String, [Double]>);
      Swift::Bool v128 = _NativeDictionary.ensureUnique(isUnique:capacity:)(v123, v127);
      v129 = v253._object;
      char v130 = v247;
      if (v128)
      {
        unint64_t v124 = specialized __RawDictionaryStorage.find<A>(_:)(v253._countAndFlagsBits, (uint64_t)v253._object);
        if ((v130 & 1) != (v131 & 1))
        {
LABEL_152:
          KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(&type metadata for String);
          BUG();
        }
      }
      v132 = (void *)v258.i64[0];
      v254 = (void *)v258.i64[0];
      if (v130)
      {
        uint64_t v133 = *(void *)(v258.i64[0] + 56);
        swift_bridgeObjectRelease(*(void *)(v133 + 8 * v124));
        *(void *)(v133 + 8 * v124) = v248.i64[0];
        uint64_t v81 = v251._countAndFlagsBits;
        uint64_t v66 = v257;
      }
      else
      {
        *(void *)(v258.i64[0] + 8 * (v124 >> 6) + 64) |= 1 << v124;
        uint64_t v134 = v132[6];
        uint64_t v135 = 16 * v124;
        *(void *)(v134 + v135) = v253._countAndFlagsBits;
        *(void *)(v134 + v135 + 8) = v129;
        *(void *)(v132[7] + 8 * v124) = v248.i64[0];
        uint64_t v136 = v132[2];
        BOOL v113 = __OFADD__(1, v136);
        uint64_t v137 = v136 + 1;
        uint64_t v66 = v257;
        if (v113) {
          BUG();
        }
        v132[2] = v137;
        swift_bridgeObjectRetain(v129);
        uint64_t v81 = v251._countAndFlagsBits;
      }
      swift_bridgeObjectRelease(v129);
      swift_bridgeObjectRelease(0x8000000000000000);
      outlined consume of MLDataValue(v242, v246, 3);
LABEL_38:
      uint64_t v65 = v235 + 1;
    }
    while ((void *)(v235 + 1) != v234._object);
    swift_bridgeObjectRelease(v245);
    v258.i64[0] = (uint64_t)v66;
    v258.i8[8] = v262;
    char v139 = v252;
    outlined copy of Result<_DataTable, Error>((uint64_t)v66, v252);
    v140._uint64_t countAndFlagsBits = v81;
    v140._object = (void *)v250.i64[0];
    MLDataTable.subscript.getter(v140);
    outlined consume of Result<_DataTable, Error>((uint64_t)v66, v139);
    v141 = v260;
    if (v261)
    {
      outlined consume of Result<_DataTable, Error>((uint64_t)v260, 1);
      uint64_t v215 = v255;
      goto LABEL_121;
    }
    swift_retain();
    _UntypedColumn.valueAtIndex(index:)((uint64_t)v251._object, *(double *)a7.i64);
    outlined consume of Result<_DataTable, Error>((uint64_t)v141, 0);
    outlined consume of Result<_DataTable, Error>((uint64_t)v141, 0);
    uint64_t v142 = v255;
    if (v259 != 2) {
      break;
    }
    v143 = specialized Array.init(repeating:count:)(v258.i64[0], v258.i64[1], v238);
    specialized Array.append<A>(contentsOf:)((uint64_t)v143);
    v144 = v257;
    v258.i64[0] = (uint64_t)v257;
    v258.i8[8] = v262;
    char v145 = v252;
    outlined copy of Result<_DataTable, Error>((uint64_t)v257, v252);
    v146._uint64_t countAndFlagsBits = v240._countAndFlagsBits;
    v146._object = v239;
    MLDataTable.subscript.getter(v146);
    outlined consume of Result<_DataTable, Error>((uint64_t)v144, v145);
    v147 = v260;
    if (v261)
    {
      outlined consume of Result<_DataTable, Error>((uint64_t)v260, 1);
LABEL_124:
      swift_bridgeObjectRelease(v255);
      swift_bridgeObjectRelease(v244);
      swift_bridgeObjectRelease(v243);
      v258.i64[0] = 0;
      v258.i64[1] = 0xE000000000000000;
      _StringGuts.grow(_:)(55);
      v214._uint64_t countAndFlagsBits = 0xD000000000000020;
      v214._object = " of input data table.";
      goto LABEL_125;
    }
    swift_retain();
    _UntypedColumn.valueAtIndex(index:)((uint64_t)v251._object, *(double *)a7.i64);
    outlined consume of Result<_DataTable, Error>((uint64_t)v147, 0);
    outlined consume of Result<_DataTable, Error>((uint64_t)v147, 0);
    __m128 v148 = v258;
    if (v259 != 2)
    {
      outlined consume of MLDataValue((void *)v258.i64[0], (void *)v258.i64[1], v259);
      goto LABEL_124;
    }
    if (!v255) {
      goto LABEL_98;
    }
    uint64_t v149 = v255;
    if (*(_OWORD *)&v258 == __PAIR128__(v255, (unint64_t)v240._object))
    {
      v150.i64[0] = (uint64_t)v240._object;
      v150.i64[1] = v255;
    }
    else
    {
      if ((_stringCompareWithSmolCheck(_:_:expecting:)(v258.i64[0], v258.i64[1], v240._object, v255, 0) & 1) == 0)
      {
        swift_bridgeObjectRelease(v149);
LABEL_98:
        uint64_t v151 = v241 + 1;
        if (__OFADD__(1, v241)) {
          BUG();
        }
        uint64_t v255 = *(_OWORD *)&v148 >> 64;
        v240._object = (void *)v148;
        goto LABEL_100;
      }
      __m128 v150 = v148;
    }
    outlined consume of MLDataValue((void *)v150.i64[0], (void *)v150.i64[1], 2);
    uint64_t v151 = v241;
LABEL_100:
    uint64_t v241 = v151;
    v152 = specialized Array.init(repeating:count:)(v151, v238);
    specialized Array.append<A>(contentsOf:)((uint64_t)v152);
    v153 = v251._object;
    _TablePrinter.printRow(currentFileIndex:)((Swift::Int)v251._object);
    uint64_t v154 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Any>);
    uint64_t v155 = swift_allocObject(v154, 64, 7);
    v248.i64[0] = v155;
    *(void *)(v155 + 16) = 1;
    *(void *)(v155 + 24) = 2;
    v258.i64[0] = 0;
    v258.i64[1] = 0xE000000000000000;
    _StringGuts.grow(_:)(37);
    swift_bridgeObjectRelease(v258.i64[1]);
    v258.i64[0] = 0xD00000000000001DLL;
    v258.i64[1] = (uint64_t)v232;
    v260 = v153;
    v156._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter(&type metadata for Int, &protocol witness table for Int);
    v157 = v156._object;
    String.append(_:)(v156);
    swift_bridgeObjectRelease(v157);
    v158._uint64_t countAndFlagsBits = 543584032;
    v158._object = (void *)0xE400000000000000;
    String.append(_:)(v158);
    v159 = v257;
    v260 = v257;
    unsigned __int8 v261 = v262;
    LOBYTE(v153) = v252;
    outlined copy of Result<_DataTable, Error>((uint64_t)v257, v252);
    Swift::Int v160 = MLDataTable.size.getter();
    v161 = (void *)specialized RandomAccessCollection<>.distance(from:to:)(0, v160);
    outlined consume of Result<_DataTable, Error>((uint64_t)v159, (char)v153);
    v260 = v161;
    v162._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter(&type metadata for Int, &protocol witness table for Int);
    v163 = v162._object;
    String.append(_:)(v162);
    float v54 = v159;
    swift_bridgeObjectRelease(v163);
    a7 = v258;
    v164 = (__m128 *)v248.i64[0];
    *(void *)(v248.i64[0] + 56) = &type metadata for String;
    v164[2] = a7;
    print(_:separator:terminator:)(v164, 32, 0xE100000000000000, 10, 0xE100000000000000);
    swift_bridgeObjectRelease(v164);
    uint64_t v55 = (uint64_t)v231;
    float v56 = v230;
    if (v230 == v231) {
      goto LABEL_101;
    }
  }
  outlined consume of MLDataValue((void *)v258.i64[0], (void *)v258.i64[1], v259);
  uint64_t v215 = v142;
LABEL_121:
  swift_bridgeObjectRelease(v215);
  swift_bridgeObjectRelease(v244);
  swift_bridgeObjectRelease(v243);
  v258.i64[0] = 0;
  v258.i64[1] = 0xE000000000000000;
  _StringGuts.grow(_:)(51);
  v214._uint64_t countAndFlagsBits = 0xD00000000000001CLL;
  v214._object = "DataTable has no column named \"";
LABEL_125:
  v214._object = (void *)((unint64_t)v214._object | 0x8000000000000000);
LABEL_126:
  String.append(_:)(v214);
  v260 = v251._object;
  v216._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter(&type metadata for Int, &protocol witness table for Int);
  v217 = v216._object;
  String.append(_:)(v216);
  swift_bridgeObjectRelease(v217);
  v218._object = "Label does not exist on row " + 0x8000000000000000;
  v218._uint64_t countAndFlagsBits = 0xD000000000000015;
  String.append(_:)(v218);
  __m128 v250 = v258;
  v218._object = (void *)lazy protocol witness table accessor for type MLCreateError and conformance MLCreateError();
  swift_allocError(&type metadata for MLCreateError, v218._object, 0, 0);
  *(__m128 *)uint64_t v219 = v250;
  *(_OWORD *)(v219 + 16) = 0;
  *(_OWORD *)(v219 + 32) = 0;
  *(unsigned char *)(v219 + 48) = 1;
  swift_willThrow();
LABEL_127:
  outlined destroy of MLActivityClassifier.ModelParameters((uint64_t)v249, type metadata accessor for _TablePrinter);
  return swift_bridgeObjectRelease(v254);
}

uint64_t closure #1 in MLActivityClassifier.init(trainingData:featureColumns:labelColumn:recordingFileColumn:parameters:)(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = (void *)swift_task_alloc(dword_3A3F54);
  *(void *)(v2 + 16) = v3;
  *uint64_t v3 = v2;
  v3[1] = protocol witness for SupervisedEstimator.fitted<A, B>(to:validateOn:eventHandler:) in conformance MLImageClassifier.Classifier;
  return static MLActivityClassifier.train(with:)(a1, a2);
}

uint64_t static MLActivityClassifier.train(with:)(uint64_t a1, uint64_t a2)
{
  v2[3] = a2;
  v2[2] = a1;
  uint64_t v3 = type metadata accessor for MLActivityClassifier.Configuration(0);
  v2[4] = v3;
  uint64_t v4 = *(void *)(v3 - 8);
  v2[5] = v4;
  uint64_t v5 = *(void *)(v4 + 64);
  v2[6] = v5;
  v2[7] = swift_task_alloc((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = type metadata accessor for MLActivityClassifier.Trainer(0);
  v2[8] = v6;
  v2[9] = swift_task_alloc((*(void *)(*(void *)(v6 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  unint64_t v7 = (*(void *)(*(void *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for DataFrame?)
                              - 8)
                  + 64)
      + 15) & 0xFFFFFFFFFFFFFFF0;
  v2[10] = swift_task_alloc(v7);
  v2[11] = swift_task_alloc(v7);
  v2[12] = swift_task_alloc(v7);
  uint64_t v8 = type metadata accessor for TrainingTablePrinter(0);
  v2[13] = v8;
  uint64_t v9 = *(void *)(v8 - 8);
  v2[14] = v9;
  uint64_t v10 = *(void *)(v9 + 64);
  v2[15] = v10;
  unint64_t v11 = (v10 + 15) & 0xFFFFFFFFFFFFFFF0;
  v2[16] = swift_task_alloc(v11);
  v2[17] = swift_task_alloc(v11);
  return swift_task_switch(static MLActivityClassifier.train(with:), 0, 0);
}

uint64_t static MLActivityClassifier.train(with:)()
{
  uint64_t v1 = *(void *)(v0 + 96);
  uint64_t v26 = *(void *)(v0 + 88);
  uint64_t v2 = *(void **)(v0 + 72);
  uint64_t v32 = *(void *)(v0 + 64);
  uint64_t v34 = *(void *)(v0 + 24);
  uint64_t v29 = *(void *)(v0 + 32);
  uint64_t v22 = v34 + *(int *)(v29 + 48);
  outlined init with copy of Either<LogisticRegressionClassifier<Float, String>, FullyConnectedNetworkClassifier<Float, String>>(v22, v1, &demangling cache variable for type metadata for DataFrame?);
  uint64_t v21 = type metadata accessor for DataFrame(0);
  BOOL v3 = __swift_getEnumTagSinglePayload(v1, 1, v21) != 1;
  outlined destroy of Either<LogisticRegressionClassifier<Float, String>, FullyConnectedNetworkClassifier<Float, String>>(v1, &demangling cache variable for type metadata for DataFrame?);
  static MLActivityClassifier.makeTablePrinter(hasValidation:)(v3);
  TrainingTablePrinter.beginTable()();
  outlined init with copy of MLTrainingSessionParameters(v34, (uint64_t)v2 + *(int *)(v32 + 20), type metadata accessor for MLActivityClassifier.Configuration);
  void *v2 = 0xD00000000000001BLL;
  v2[1] = "Starting a new session in '" + 0x8000000000000000;
  *(void *)((char *)v2 + *(int *)(v32 + 24)) = 0;
  outlined init with copy of Either<LogisticRegressionClassifier<Float, String>, FullyConnectedNetworkClassifier<Float, String>>(v34 + *(int *)(v29 + 44), v26, &demangling cache variable for type metadata for DataFrame?);
  if (__swift_getEnumTagSinglePayload(v26, 1, v21) == 1) {
    BUG();
  }
  uint64_t v18 = *(void *)(v0 + 136);
  uint64_t v19 = *(void *)(v0 + 128);
  uint64_t v4 = *(void *)(v0 + 120);
  uint64_t v17 = *(void *)(v0 + 112);
  uint64_t v30 = *(void *)(v0 + 88);
  uint64_t v35 = *(void **)(v0 + 80);
  uint64_t v27 = *(void *)(v0 + 72);
  uint64_t v5 = *(void *)(v0 + 56);
  uint64_t v24 = v5;
  uint64_t v6 = *(void *)(v0 + 48);
  uint64_t v20 = *(void *)(v0 + 40);
  uint64_t v7 = *(void *)(v0 + 24);
  outlined init with copy of Either<LogisticRegressionClassifier<Float, String>, FullyConnectedNetworkClassifier<Float, String>>(v22, (uint64_t)v35, &demangling cache variable for type metadata for DataFrame?);
  outlined init with copy of MLTrainingSessionParameters(v7, v5, type metadata accessor for MLActivityClassifier.Configuration);
  outlined init with copy of MLTrainingSessionParameters(v18, v19, type metadata accessor for TrainingTablePrinter);
  uint64_t v8 = *(unsigned __int8 *)(v20 + 80);
  uint64_t v9 = ~*(unsigned __int8 *)(v20 + 80) & (v8 + 16);
  uint64_t v10 = *(unsigned __int8 *)(v17 + 80);
  uint64_t v11 = ~v10 & (v9 + v10 + v6);
  uint64_t v12 = swift_allocObject(&unk_397280, v11 + v4, v10 | v8 | 7);
  outlined init with take of MLClassifierMetrics(v24, v12 + v9, type metadata accessor for MLActivityClassifier.Configuration);
  outlined init with take of MLClassifierMetrics(v19, v12 + v11, type metadata accessor for TrainingTablePrinter);
  MLActivityClassifier.Trainer.train(on:validationData:eventHandler:)(v30, v35, (void (*)(void))partial apply for closure #1 in static MLActivityClassifier.train(with:), v12);
  swift_release();
  outlined destroy of Either<LogisticRegressionClassifier<Float, String>, FullyConnectedNetworkClassifier<Float, String>>((uint64_t)v35, &demangling cache variable for type metadata for DataFrame?);
  outlined destroy of MLActivityClassifier.ModelParameters(v27, type metadata accessor for MLActivityClassifier.Trainer);
  uint64_t v28 = *(void *)(v0 + 128);
  uint64_t v13 = *(void *)(v0 + 136);
  uint64_t v23 = *(void *)(v0 + 96);
  uint64_t v25 = *(void *)(v0 + 88);
  uint64_t v36 = *(void *)(v0 + 80);
  uint64_t v31 = *(void *)(v0 + 56);
  uint64_t v33 = *(void *)(v0 + 72);
  (*(void (**)(void))(*(void *)(v21 - 8) + 8))();
  static os_log_type_t.info.getter();
  uint64_t v14 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<CVarArg>);
  id v15 = (void *)swift_allocObject(v14, 72, 7);
  v15[2] = 1;
  v15[3] = 2;
  v15[7] = &type metadata for Int;
  v15[8] = &protocol witness table for Int;
  v15[4] = 3;
  os_log(_:dso:log:type:_:)("event: %lu", 10);
  swift_bridgeObjectRelease((_BYTE)v15);
  outlined destroy of MLActivityClassifier.ModelParameters(v13, type metadata accessor for TrainingTablePrinter);
  swift_task_dealloc(v13);
  swift_task_dealloc(v28);
  swift_task_dealloc(v23);
  swift_task_dealloc(v25);
  swift_task_dealloc(v36);
  swift_task_dealloc(v33);
  swift_task_dealloc(v31);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t key path getter for Column.name : Column<[Double]>()
{
  uint64_t v1 = v0;
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Column<[Double]>);
  uint64_t result = Column.name.getter(v2);
  *uint64_t v1 = result;
  v1[1] = v4;
  return result;
}

uint64_t key path setter for Column.name : Column<[Double]>(uint64_t *a1)
{
  uint64_t v1 = *a1;
  uint64_t v2 = a1[1];
  swift_bridgeObjectRetain(v2);
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Column<[Double]>);
  return Column.name.setter(v1, v2, v3);
}

Swift::Bool MLActivityClassifier.reportAnalytics(columns:parameters:)(uint64_t a1, uint64_t a2)
{
  v20[0] = a2;
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Column<String>);
  uint64_t v3 = *(void *)(v2 - 8);
  int64_t v4 = *(void *)(v3 + 64);
  uint64_t v5 = alloca(v4);
  uint64_t v6 = alloca(v4);
  Swift::Bool result = AnalyticsReporter.init()();
  if (!result)
  {
    uint64_t v8 = *(int *)(type metadata accessor for MLActivityClassifier.DataSource.Columns(0) + 20) + a1;
    Swift::Int v9 = Column.count.getter(v2);
    AnalyticsReporter.reportDataMetrics(model:metricName:quantity:)(CreateML_ModelType_activityClassifier, (Swift::String)__PAIR128__((unint64_t)(" must be Int or String." + 0x8000000000000000), 0xD000000000000015), v9);
    (*(void (**)(void *, uint64_t, uint64_t))(v3 + 16))(v20, v8, v2);
    uint64_t v10 = specialized Set.init<A>(_:)((uint64_t)v20);
    Swift::Int v11 = *(void *)(v10 + 16);
    swift_bridgeObjectRelease(v10);
    AnalyticsReporter.reportDataMetrics(model:metricName:quantity:)(CreateML_ModelType_activityClassifier, (Swift::String)__PAIR128__((unint64_t)("Number of Annotations" + 0x8000000000000000), 0xD000000000000010), v11);
    uint64_t v12 = (int *)type metadata accessor for MLActivityClassifier.ModelParameters(0);
    uint64_t v13 = v12[6];
    uint64_t v14 = v20[0];
    Swift::Int v15 = 0;
    if (!*(unsigned char *)(v20[0] + v13 + 8)) {
      Swift::Int v15 = *(void *)(v20[0] + v13);
    }
    AnalyticsReporter.reportDataMetrics(model:metricName:quantity:)(CreateML_ModelType_activityClassifier, (Swift::String)__PAIR128__(0xEE00736E6F697461, 0x726574492078614DLL), v15);
    uint64_t v16 = v12[7];
    Swift::Int v17 = 0;
    if (!*(unsigned char *)(v14 + v16 + 8)) {
      Swift::Int v17 = *(void *)(v14 + v16);
    }
    AnalyticsReporter.reportDataMetrics(model:metricName:quantity:)(CreateML_ModelType_activityClassifier, (Swift::String)__PAIR128__(0xEA0000000000657ALL, 0x6953206863746142), v17);
    uint64_t v18 = v12[8];
    Swift::Int v19 = 0;
    if (!*(unsigned char *)(v14 + v18 + 8)) {
      Swift::Int v19 = *(void *)(v14 + v18);
    }
    return AnalyticsReporter.reportDataMetrics(model:metricName:quantity:)(CreateML_ModelType_activityClassifier, (Swift::String)__PAIR128__((unint64_t)("Number of Labels" + 0x8000000000000000), 0xD000000000000016), v19);
  }
  return result;
}

uint64_t static MLActivityClassifier.makeTablePrinter(hasValidation:)(int a1)
{
  int v22 = a1;
  uint64_t v20 = v1;
  int64_t v2 = *(void *)(*(void *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for MetricsKey?)
                             - 8)
                 + 64);
  uint64_t v3 = alloca(v2);
  int64_t v4 = alloca(v2);
  uint64_t v21 = &v18;
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, MetricsKey)>);
  uint64_t v6 = *(void *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (String, MetricsKey))
                 - 8);
  uint64_t v7 = *(void *)(v6 + 72);
  uint64_t v8 = *(unsigned __int8 *)(v6 + 80);
  uint64_t v9 = (v8 + 32) & ~v8;
  uint64_t v10 = swift_allocObject(v5, v9 + 2 * v7, v8 | 7);
  *(void *)(v10 + 16) = 2;
  *(void *)(v10 + 24) = 4;
  uint64_t v11 = v10 + v9;
  strcpy((char *)(v10 + v9), "Train Accuracy");
  *(unsigned char *)(v10 + v9 + 15) = -18;
  static MetricsKey.trainingAccuracy.getter();
  *(void *)(v7 + v11) = 0x6F4C206E69617254;
  *(void *)(v7 + v11 + 8) = 0xEA00000000007373;
  static MetricsKey.trainingLoss.getter();
  uint64_t v12 = type metadata accessor for MetricsKey(0);
  uint64_t v13 = Dictionary.init(dictionaryLiteral:)(v10, &type metadata for String, v12, &protocol witness table for String);
  uint64_t v19 = v13;
  if (v22)
  {
    uint64_t v14 = (uint64_t)v21;
    static MetricsKey.validationAccuracy.getter();
    __swift_storeEnumTagSinglePayload(v14, 0, 1, v12);
    specialized Dictionary.subscript.setter(v14, 0xD000000000000013, (uint64_t)("Swift/Array.swift" + 0x8000000000000000));
    static MetricsKey.validationLoss.getter();
    __swift_storeEnumTagSinglePayload(v14, 0, 1, v12);
    specialized Dictionary.subscript.setter(v14, 0x69746164696C6156, 0xEF73736F4C206E6FLL);
    uint64_t v13 = v19;
  }
  uint64_t v15 = type metadata accessor for TrainingTablePrinter(0);
  uint64_t v16 = v20;
  *(void *)(v20 + *(int *)(v15 + 24)) = v13;
  type metadata accessor for OS_os_log(0, &lazy cache variable for type metadata for OS_os_log, OS_os_log_ptr);
  *(void *)(v16 + *(int *)(v15 + 20)) = OS_os_log.init(subsystem:category:)(0x6C7070612E6D6F63, 0xEE00697275742E65, 0x72705F656C626174, 0xED00007265746E69);
  return Date.init()(0x6C7070612E6D6F63);
}

uint64_t closure #1 in static MLActivityClassifier.train(with:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v52 = a3;
  uint64_t v48 = a2;
  int64_t v4 = *(void *)(*(void *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for DataFrame?)
                             - 8)
                 + 64);
  uint64_t v5 = alloca(v4);
  uint64_t v6 = alloca(v4);
  uint64_t v57 = &v46;
  *(double *)&uint64_t v7 = COERCE_DOUBLE(type metadata accessor for MetricsKey(0));
  double v59 = *(double *)(v7 - 8);
  int64_t v8 = *(void *)(*(void *)&v59 + 64);
  uint64_t v9 = alloca(v8);
  uint64_t v10 = alloca(v8);
  uint64_t v50 = &v46;
  uint64_t v11 = alloca(v8);
  uint64_t v12 = alloca(v8);
  uint64_t v51 = &v46;
  uint64_t v13 = alloca(v8);
  uint64_t v14 = alloca(v8);
  int v49 = &v46;
  uint64_t v15 = alloca(v8);
  uint64_t v16 = alloca(v8);
  uint64_t v17 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(MLProgress.Metric, Double)>);
  uint64_t inited = swift_initStackObject(v17, v47);
  *(void *)(inited + 16) = 2;
  *(void *)(inited + 24) = 4;
  *(unsigned char *)(inited + 32) = 3;
  uint64_t v56 = a1;
  uint64_t v19 = Event.metrics.getter();
  static MetricsKey.trainingAccuracy.getter();
  specialized Dictionary.subscript.getter((uint64_t)&v46, v19);
  swift_bridgeObjectRelease(v19);
  uint64_t v20 = *(void (**)(uint64_t, void))(*(void *)&v59 + 8);
  double v59 = *(double *)&v7;
  uint64_t v55 = v20;
  v20((uint64_t)&v46, v7);
  if (v54)
  {
    uint64_t v21 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Sendable);
    if (swift_dynamicCast(&v58, v53, v21, &type metadata for Double, 6))
    {
      uint64_t v22 = v58;
      goto LABEL_6;
    }
  }
  else
  {
    outlined destroy of Either<LogisticRegressionClassifier<Float, String>, FullyConnectedNetworkClassifier<Float, String>>((uint64_t)v53, &demangling cache variable for type metadata for Sendable?);
  }
  uint64_t v22 = 0;
LABEL_6:
  *(void *)(inited + 40) = v22;
  *(unsigned char *)(inited + 48) = 0;
  uint64_t v23 = Event.metrics.getter();
  uint64_t v24 = (uint64_t)v49;
  static MetricsKey.trainingLoss.getter();
  specialized Dictionary.subscript.getter(v24, v23);
  swift_bridgeObjectRelease(v23);
  v55(v24, *(void *)&v59);
  if (v54)
  {
    uint64_t v25 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Sendable);
    if (swift_dynamicCast(&v58, v53, v25, &type metadata for Double, 6))
    {
      uint64_t v26 = v58;
      goto LABEL_11;
    }
  }
  else
  {
    outlined destroy of Either<LogisticRegressionClassifier<Float, String>, FullyConnectedNetworkClassifier<Float, String>>((uint64_t)v53, &demangling cache variable for type metadata for Sendable?);
  }
  uint64_t v26 = 0;
LABEL_11:
  *(void *)(inited + 56) = v26;
  uint64_t v27 = lazy protocol witness table accessor for type MLProgress.Metric and conformance MLProgress.Metric();
  v28._rawValue = (void *)Dictionary.init(dictionaryLiteral:)(inited, &type metadata for MLProgress.Metric, &type metadata for Double, v27);
  uint64_t v29 = type metadata accessor for MLActivityClassifier.Configuration(0);
  uint64_t v30 = (uint64_t)v57;
  outlined init with copy of Either<LogisticRegressionClassifier<Float, String>, FullyConnectedNetworkClassifier<Float, String>>(*(int *)(v29 + 48) + v48, (uint64_t)v57, &demangling cache variable for type metadata for DataFrame?);
  uint64_t v31 = type metadata accessor for DataFrame(0);
  int EnumTagSinglePayload = __swift_getEnumTagSinglePayload(v30, 1, v31);
  outlined destroy of Either<LogisticRegressionClassifier<Float, String>, FullyConnectedNetworkClassifier<Float, String>>(v30, &demangling cache variable for type metadata for DataFrame?);
  if (EnumTagSinglePayload != 1)
  {
    uint64_t v33 = Event.metrics.getter();
    uint64_t v34 = (uint64_t)v51;
    static MetricsKey.validationLoss.getter();
    specialized Dictionary.subscript.getter(v34, v33);
    swift_bridgeObjectRelease(v33);
    v55(v34, *(void *)&v59);
    if (v54)
    {
      uint64_t v35 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Sendable);
      if (swift_dynamicCast(&v58, v53, v35, &type metadata for Double, 6))
      {
        uint64_t v36 = v58;
        goto LABEL_17;
      }
    }
    else
    {
      outlined destroy of Either<LogisticRegressionClassifier<Float, String>, FullyConnectedNetworkClassifier<Float, String>>((uint64_t)v53, &demangling cache variable for type metadata for Sendable?);
    }
    uint64_t v36 = 0;
LABEL_17:
    uint64_t v57 = (uint64_t *)v36;
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v28._rawValue);
    v53[0] = v28._rawValue;
    specialized _NativeDictionary.setValue(_:forKey:isUnique:)(4, isUniquelyReferenced_nonNull_native, *(double *)&v57);
    uint64_t v38 = v53[0];
    swift_bridgeObjectRelease(0);
    uint64_t v39 = Event.metrics.getter();
    uint64_t v40 = (uint64_t)v50;
    static MetricsKey.validationAccuracy.getter();
    specialized Dictionary.subscript.getter(v40, v39);
    swift_bridgeObjectRelease(v39);
    v55(v40, *(void *)&v59);
    if (v54)
    {
      uint64_t v41 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Sendable);
      if (swift_dynamicCast(&v58, v53, v41, &type metadata for Double, 6))
      {
        double v42 = *(double *)&v58;
LABEL_22:
        double v59 = v42;
        char v43 = swift_isUniquelyReferenced_nonNull_native(v38);
        v53[0] = v38;
        specialized _NativeDictionary.setValue(_:forKey:isUnique:)(5, v43, v59);
        v28._rawValue = (void *)v53[0];
        swift_bridgeObjectRelease(0);
        goto LABEL_23;
      }
    }
    else
    {
      outlined destroy of Either<LogisticRegressionClassifier<Float, String>, FullyConnectedNetworkClassifier<Float, String>>((uint64_t)v53, &demangling cache variable for type metadata for Sendable?);
    }
    double v42 = 0.0;
    goto LABEL_22;
  }
LABEL_23:
  Swift::Int v44 = Event.itemCount.getter();
  TrainingTablePrinter.print(iteration:metrics:)(v44, v28);
  return swift_bridgeObjectRelease(v28._rawValue);
}

uint64_t MLActivityClassifier.init(checkpoint:)(uint64_t a1)
{
  uint64_t v107 = v2;
  uint64_t v3 = v1;
  uint64_t v92 = type metadata accessor for MLActivityClassifier.Model(0);
  int64_t v4 = *(void *)(*(void *)(v92 - 8) + 64);
  uint64_t v5 = alloca(v4);
  uint64_t v6 = alloca(v4);
  uint64_t v93 = &v72;
  uint64_t v7 = alloca(v4);
  int64_t v8 = alloca(v4);
  int64_t v91 = &v72;
  uint64_t v90 = type metadata accessor for MLActivityClassifier.Trainer(0);
  int64_t v9 = *(void *)(*(void *)(v90 - 8) + 64);
  uint64_t v10 = alloca(v9);
  uint64_t v11 = alloca(v9);
  int v100 = &v72;
  uint64_t v86 = type metadata accessor for MLActivityClassifier.Configuration(0);
  int64_t v12 = *(void *)(*(void *)(v86 - 8) + 64);
  uint64_t v13 = alloca(v12);
  uint64_t v14 = alloca(v12);
  v85 = &v72;
  uint64_t v15 = alloca(v12);
  uint64_t v16 = alloca(v12);
  uint64_t v99 = &v72;
  int64_t v17 = *(void *)(*(void *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for DataFrame?)
                              - 8)
                  + 64);
  uint64_t v18 = alloca(v17);
  uint64_t v19 = alloca(v17);
  v106 = &v72;
  uint64_t v20 = alloca(v17);
  uint64_t v21 = alloca(v17);
  uint64_t v110 = (uint64_t)&v72;
  uint64_t v111 = type metadata accessor for DataFrame(0);
  uint64_t v103 = *(void *)(v111 - 8);
  int64_t v22 = *(void *)(v103 + 64);
  uint64_t v23 = alloca(v22);
  uint64_t v24 = alloca(v22);
  uint64_t v109 = &v72;
  uint64_t v88 = type metadata accessor for URL(0);
  uint64_t v89 = *(void *)(v88 - 8);
  int64_t v25 = *(void *)(v89 + 64);
  uint64_t v26 = alloca(v25);
  uint64_t v27 = alloca(v25);
  uint64_t v87 = &v72;
  Swift::OpaquePointer v28 = alloca(v25);
  uint64_t v29 = alloca(v25);
  uint64_t v30 = (int *)type metadata accessor for MLActivityClassifier(0);
  uint64_t v31 = v30[7];
  *(void *)(v3 + v31) = 0x5F6E6F6973736573;
  uint64_t v84 = v31;
  *(void *)(v3 + v31 + 8) = 0xEA00000000006469;
  uint64_t v32 = v30[8];
  *(void *)(v3 + v32) = 0x6C6562616CLL;
  uint64_t v83 = v32;
  *(void *)(v3 + v32 + 8) = 0xE500000000000000;
  uint64_t v82 = v30[9];
  *(void *)(v3 + v82) = _swiftEmptyArrayStorage;
  uint64_t v33 = v30[10];
  strcpy((char *)(v3 + v33), "recordingFile");
  uint64_t v81 = v33;
  uint64_t v95 = v3;
  *(_WORD *)(v3 + v33 + 14) = -4864;
  URL.deletingLastPathComponent()();
  uint64_t v34 = v107;
  MLActivityClassifier.PersistentParameters.init(sessionDirectory:)((uint64_t)&v72);
  if (v34)
  {
    outlined destroy of MLActivityClassifier.ModelParameters(a1, type metadata accessor for MLCheckpoint);
LABEL_11:
    uint64_t v52 = v95;
    swift_bridgeObjectRelease(*(void *)(v95 + v84 + 8));
    swift_bridgeObjectRelease(*(void *)(v52 + v83 + 8));
    swift_bridgeObjectRelease(*(void *)(v52 + v82));
    return swift_bridgeObjectRelease(*(void *)(v52 + v81 + 8));
  }
  unint64_t v94 = v30;
  uint64_t v107 = a1;
  uint64_t v101 = 0;
  int v35 = v74;
  uint64_t v105 = v75;
  unsigned __int8 v36 = v76;
  uint64_t v104 = v77;
  uint64_t v96 = v78;
  uint64_t v98 = v79;
  uint64_t v97 = v80;
  LOBYTE(v74) = v74 & 1;
  uint64_t v102 = v73;
  int v108 = v35;
  outlined copy of Result<_DataTable, Error>(v73, v35);
  DataFrame.init(_:)((uint64_t)&v73);
  uint64_t v37 = v110;
  __swift_storeEnumTagSinglePayload(v110, 1, 1, v111);
  int v38 = v36;
  if (v36 != 0xFF)
  {
    uint64_t v73 = v105;
    LOBYTE(v74) = v36 & 1;
    outlined copy of Result<_DataTable, Error>(v105, v36);
    uint64_t v39 = (uint64_t)v106;
    DataFrame.init(_:)((uint64_t)&v73);
    outlined destroy of Either<LogisticRegressionClassifier<Float, String>, FullyConnectedNetworkClassifier<Float, String>>(v37, &demangling cache variable for type metadata for DataFrame?);
    __swift_storeEnumTagSinglePayload(v39, 0, 1, v111);
    outlined init with take of DataFrame?(v39, v37, &demangling cache variable for type metadata for DataFrame?);
  }
  LODWORD(v106) = v38;
  uint64_t v40 = v86;
  uint64_t v41 = (uint64_t)v99;
  uint64_t v42 = (uint64_t)v99 + *(int *)(v86 + 44);
  uint64_t v43 = v111;
  (*(void (**)(uint64_t, uint64_t *, uint64_t))(v103 + 16))(v42, v109, v111);
  __swift_storeEnumTagSinglePayload(v42, 0, 1, v43);
  outlined init with copy of Either<LogisticRegressionClassifier<Float, String>, FullyConnectedNetworkClassifier<Float, String>>(v110, v41 + *(int *)(v40 + 48), &demangling cache variable for type metadata for DataFrame?);
  *(void *)uint64_t v41 = v96;
  *(void *)(v41 + 8) = 0;
  *(unsigned char *)(v41 + 16) = 0;
  *(void *)(v41 + 24) = v98;
  *(void *)(v41 + 32) = v97;
  LOBYTE(v43) = v104;
  *(void *)(v41 + 40) = v104;
  *(void *)(v41 + 48) = 0x6C6562616CLL;
  *(void *)(v41 + 56) = 0xE500000000000000;
  *(void *)(v41 + 64) = 0x5F6E6F6973736573;
  *(void *)(v41 + 72) = 0xEA00000000006469;
  uint64_t v44 = (uint64_t)v87;
  (*(void (**)(uint64_t *, uint64_t, uint64_t))(v89 + 16))(v87, v107, v88);
  uint64_t v45 = (uint64_t)v85;
  outlined init with copy of MLTrainingSessionParameters(v41, (uint64_t)v85, type metadata accessor for MLActivityClassifier.Configuration);
  swift_bridgeObjectRetain(v43);
  uint64_t v46 = (uint64_t)v100;
  uint64_t v47 = v101;
  MLActivityClassifier.Trainer.init(checkpoint:configuration:)(v44, v45);
  if (v47)
  {
    outlined consume of Result<_DataTable, Error>(v102, v108);
    outlined consume of MLDataTable?(v105, (char)v106);
    swift_bridgeObjectRelease(v104);
    outlined destroy of MLActivityClassifier.ModelParameters(v107, type metadata accessor for MLCheckpoint);
    outlined destroy of MLActivityClassifier.ModelParameters(v41, type metadata accessor for MLActivityClassifier.Configuration);
    outlined destroy of Either<LogisticRegressionClassifier<Float, String>, FullyConnectedNetworkClassifier<Float, String>>(v110, &demangling cache variable for type metadata for DataFrame?);
    uint64_t v48 = v109;
LABEL_10:
    (*(void (**)(uint64_t *, uint64_t))(v103 + 8))(v48, v111);
    goto LABEL_11;
  }
  uint64_t v49 = *(void *)(v46 + *(int *)(v90 + 24));
  if (!v49)
  {
    _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, 0xD000000000000024, "ityClassifier.swift" + 0x8000000000000000, "CreateML/MLActivityClassifier.swift", 35, 2, 385, 0);
    goto LABEL_16;
  }
  swift_retain();
  MLActivityClassifier.Trainer.ModelContainer.compileModel()();
  uint64_t v50 = v109;
  if (v51)
  {
    swift_release();
    outlined consume of Result<_DataTable, Error>(v102, v108);
    outlined consume of MLDataTable?(v105, (char)v106);
    swift_bridgeObjectRelease(v104);
    outlined destroy of MLActivityClassifier.ModelParameters(v107, type metadata accessor for MLCheckpoint);
    outlined destroy of MLActivityClassifier.ModelParameters((uint64_t)v100, type metadata accessor for MLActivityClassifier.Trainer);
    outlined destroy of MLActivityClassifier.ModelParameters((uint64_t)v99, type metadata accessor for MLActivityClassifier.Configuration);
    outlined destroy of Either<LogisticRegressionClassifier<Float, String>, FullyConnectedNetworkClassifier<Float, String>>(v110, &demangling cache variable for type metadata for DataFrame?);
    uint64_t v48 = v50;
    goto LABEL_10;
  }
  uint64_t v101 = 0;
  swift_release();
  uint64_t v54 = OBJC_IVAR____TtCVV8CreateML20MLActivityClassifier7Trainer14ModelContainer_model + v49;
  swift_beginAccess(v54, &v73, 0, 0);
  uint64_t v55 = (uint64_t)v93;
  outlined init with copy of MLTrainingSessionParameters(v54, (uint64_t)v93, type metadata accessor for MLActivityClassifier.Model);
  uint64_t v56 = v55;
  uint64_t v57 = (uint64_t)v91;
  outlined init with take of MLClassifierMetrics(v56, (uint64_t)v91, type metadata accessor for MLActivityClassifier.Model);
  uint64_t v58 = *(void **)(v57 + *(int *)(v92 + 68));
  if (!v58)
  {
    _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, 0xD000000000000027, "odel from checkpoint" + 0x8000000000000000, "CreateML/MLActivityClassifier.swift", 35, 2, 388, 0);
LABEL_16:
    BUG();
  }
  id v59 = v58;
  outlined destroy of MLActivityClassifier.ModelParameters(v107, type metadata accessor for MLCheckpoint);
  outlined destroy of MLActivityClassifier.ModelParameters((uint64_t)v100, type metadata accessor for MLActivityClassifier.Trainer);
  outlined destroy of MLActivityClassifier.ModelParameters((uint64_t)v99, type metadata accessor for MLActivityClassifier.Configuration);
  outlined destroy of Either<LogisticRegressionClassifier<Float, String>, FullyConnectedNetworkClassifier<Float, String>>(v110, &demangling cache variable for type metadata for DataFrame?);
  (*(void (**)(uint64_t *, uint64_t))(v103 + 8))(v109, v111);
  uint64_t v60 = v95;
  outlined init with take of MLClassifierMetrics(v57, v95, type metadata accessor for MLActivityClassifier.Model);
  uint64_t v61 = v94;
  *(void *)(v60 + v94[5]) = v59;
  uint64_t v62 = v61[6] + v60;
  uint64_t v63 = v61[6];
  uint64_t v64 = (int *)type metadata accessor for MLActivityClassifier.ModelParameters(0);
  uint64_t v111 = v64[6];
  uint64_t v110 = v64[7];
  uint64_t v109 = (uint64_t *)v64[8];
  uint64_t v65 = v62 + v64[5];
  uint64_t v66 = type metadata accessor for MLActivityClassifier.ModelParameters.Validation(0);
  swift_storeEnumTagMultiPayload(v65, v66, 2);
  uint64_t v67 = v105;
  uint64_t v68 = v63;
  *(void *)(v60 + v63) = v105;
  LOBYTE(v63) = (_BYTE)v106;
  *(unsigned char *)(v60 + v68 + 8) = (_BYTE)v106;
  uint64_t v69 = v110;
  *(void *)(v110 + v62) = v98;
  *(unsigned char *)(v69 + v62 + 8) = 0;
  uint64_t v70 = v111;
  *(void *)(v111 + v62) = v96;
  *(unsigned char *)(v70 + v62 + 8) = 0;
  uint64_t v71 = v109;
  *(uint64_t *)((char *)v109 + v62) = v97;
  *((unsigned char *)v71 + v62 + 8) = 0;
  outlined copy of MLDataTable?(v67, v63);
  outlined consume of Result<_DataTable, Error>(v102, v108);
  outlined consume of MLDataTable?(v67, v63);
  return swift_bridgeObjectRelease(v104);
}

void *static MLActivityClassifier.train(trainingData:featureColumns:labelColumn:recordingFileColumn:parameters:sessionParameters:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4, void *a5, void *a6, long long a7)
{
  Swift::Bool result = (void *)static MLActivityClassifier.makeTrainingSession(trainingData:featureColumns:labelColumn:recordingFileColumn:parameters:sessionParameters:)(a1, a2, a3, a4, a5, a6, a7, *((uint64_t *)&a7 + 1));
  if (!v7)
  {
    uint64_t v9 = (uint64_t)result;
    uint64_t v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for MLJob<MLActivityClassifier>);
    uint64_t v11 = (void *)swift_allocObject(v10, *(unsigned int *)(v10 + 48), *(unsigned __int16 *)(v10 + 52));
    return specialized MLJob.init(_:)(v11, v9);
  }
  return result;
}

uint64_t static MLActivityClassifier.makeTrainingSession(trainingData:featureColumns:labelColumn:recordingFileColumn:parameters:sessionParameters:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4, void *a5, void *a6, uint64_t a7, uint64_t a8)
{
  id v59 = (uint64_t *)v8;
  uint64_t v58 = a6;
  uint64_t v57 = a5;
  ML20MLActivityClassifierV12trainingData10parametersA2C0F6SourceO7ColumnsV_AC15ModelParametersVtYaKcfcSS07d3F06F62VySaySdGGcfu_33_58e95aa1613cac7a093349ae610302fdAPSSTf3nnnpk_nTf1cn_nTm = a4;
  uint64_t v55 = a1;
  int64_t v10 = *(void *)(*(void *)(type metadata accessor for MLTrainingSessionParameters(0) - 8) + 64);
  uint64_t v11 = alloca(v10);
  int64_t v12 = alloca(v10);
  uint64_t v50 = &v43;
  uint64_t v13 = alloca(v10);
  uint64_t v14 = alloca(v10);
  Swift::Int v53 = &v43;
  int64_t v15 = *(void *)(*(void *)(type metadata accessor for MLActivityClassifier.ModelParameters(0) - 8) + 64);
  uint64_t v16 = alloca(v15);
  int64_t v17 = alloca(v15);
  uint64_t v48 = &v43;
  int64_t v18 = *(void *)(*(void *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Column<String>?)
                              - 8)
                  + 64);
  uint64_t v19 = alloca(v18);
  uint64_t v20 = alloca(v18);
  uint64_t v49 = &v43;
  uint64_t v21 = type metadata accessor for MLActivityClassifier.DataSource.Columns(0);
  int64_t v22 = *(void *)(*(void *)(v21 - 8) + 64);
  uint64_t v23 = alloca(v22);
  uint64_t v24 = alloca(v22);
  uint64_t v25 = (uint64_t)v59;
  MLActivityClassifier.DataSource.gatherData(featureColumns:labelColumn:recordingFileColumn:)(a2, a3, ML20MLActivityClassifierV12trainingData10parametersA2C0F6SourceO7ColumnsV_AC15ModelParametersVtYaKcfcSS07d3F06F62VySaySdGGcfu_33_58e95aa1613cac7a093349ae610302fdAPSSTf3nnnpk_nTf1cn_nTm, v57, v58);
  if (!v25)
  {
    id v59 = (uint64_t *)v21;
    MLActivityClassifier.DataSource.Columns.convertToTuriCore()();
    int v26 = v45;
    LOBYTE(v45) = v45 & 1;
    uint64_t v27 = v43;
    uint64_t v57 = v44;
    LODWORD(v58) = v26;
    outlined copy of Result<_DataTable, Error>((uint64_t)v44, v26);
    swift_bridgeObjectRetain(v27);
    ML20MLActivityClassifierV12trainingData10parametersA2C0F6SourceO7ColumnsV_AC15ModelParametersVtYaKcfcSS07d3F06F62VySaySdGGcfu_33_58e95aa1613cac7a093349ae610302fdAPSSTf3nnnpk_nTf1cn_nTm = _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSay11TabularData6ColumnVySaySdGGG_SSs5NeverOTg50114_s8CreateML20MLActivityClassifierV12trainingData10parametersA2C0F6SourceO7ColumnsV_AC15ModelParametersVtYaKcfcSS07d3F06F62VySaySdGGcfu_33_58e95aa1613cac7a093349ae610302fdAPSSTf3nnnpk_nTf1cn_nTm(v27);
    uint64_t v55 = 0;
    swift_bridgeObjectRelease(v27);
    uint64_t v28 = (uint64_t)v59;
    uint64_t v29 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Column<String>);
    uint64_t v51 = Column.name.getter(v29);
    uint64_t v52 = v30;
    uint64_t v31 = *(int *)(v28 + 24);
    id v59 = &v43;
    uint64_t v32 = (uint64_t)v49;
    outlined init with copy of Either<LogisticRegressionClassifier<Float, String>, FullyConnectedNetworkClassifier<Float, String>>((uint64_t)&v43 + v31, (uint64_t)v49, &demangling cache variable for type metadata for Column<String>?);
    if (__swift_getEnumTagSinglePayload(v32, 1, v29) == 1)
    {
      outlined destroy of Either<LogisticRegressionClassifier<Float, String>, FullyConnectedNetworkClassifier<Float, String>>(v32, &demangling cache variable for type metadata for Column<String>?);
      uint64_t v54 = (void *)0xED0000656C694667;
      uint64_t v33 = 0x6E6964726F636572;
    }
    else
    {
      uint64_t v33 = Column.name.getter(v29);
      uint64_t v54 = v34;
      (*(void (**)(uint64_t, uint64_t))(*(void *)(v29 - 8) + 8))(v32, v29);
    }
    uint64_t v35 = (uint64_t)v53;
    uint64_t v36 = (uint64_t)v48;
    outlined init with copy of MLTrainingSessionParameters(a7, (uint64_t)v48, type metadata accessor for MLActivityClassifier.ModelParameters);
    outlined init with copy of MLTrainingSessionParameters(a8, v35, type metadata accessor for MLTrainingSessionParameters);
    uint64_t v37 = v35;
    uint64_t v21 = type metadata accessor for ActivityClassifierTrainingSessionDelegate(0);
    swift_allocObject(v21, *(unsigned int *)(v21 + 48), *(unsigned __int16 *)(v21 + 52));
    uint64_t v38 = v55;
    uint64_t v39 = ActivityClassifierTrainingSessionDelegate.init(trainingData:featureColumnNames:labelColumnName:recordingFileColumn:modelParameters:sessionParameters:)((uint64_t)&v44, (uint64_t)ML20MLActivityClassifierV12trainingData10parametersA2C0F6SourceO7ColumnsV_AC15ModelParametersVtYaKcfcSS07d3F06F62VySaySdGGcfu_33_58e95aa1613cac7a093349ae610302fdAPSSTf3nnnpk_nTf1cn_nTm, v51, v52, (void *)v33, v54, v36, v37);
    if (v38)
    {
      outlined destroy of MLActivityClassifier.ModelParameters((uint64_t)v59, type metadata accessor for MLActivityClassifier.DataSource.Columns);
      outlined consume of Result<_DataTable, Error>((uint64_t)v57, (char)v58);
    }
    else
    {
      uint64_t v46 = v21;
      uint64_t v47 = &protocol witness table for ActivityClassifierTrainingSessionDelegate;
      uint64_t v44 = v39;
      uint64_t v40 = (uint64_t)v50;
      outlined init with copy of MLTrainingSessionParameters(a8, (uint64_t)v50, type metadata accessor for MLTrainingSessionParameters);
      uint64_t v41 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for MLTrainingSession<MLActivityClassifier>);
      swift_allocObject(v41, *(unsigned int *)(v41 + 48), *(unsigned __int16 *)(v41 + 52));
      swift_retain();
      uint64_t v21 = specialized MLTrainingSession.init(delegate:parameters:modelType:)((uint64_t)&v44, v40, 18, &demangling cache variable for type metadata for MLTrainingSession<MLActivityClassifier>.Metadata, &lazy protocol witness table cache variable for type MLTrainingSession<MLActivityClassifier>.Metadata and conformance MLTrainingSession<A>.Metadata, &lazy protocol witness table cache variable for type MLTrainingSession<MLActivityClassifier>.Metadata and conformance MLTrainingSession<A>.Metadata);
      outlined destroy of MLActivityClassifier.ModelParameters((uint64_t)v59, type metadata accessor for MLActivityClassifier.DataSource.Columns);
      outlined consume of Result<_DataTable, Error>((uint64_t)v57, (char)v58);
      swift_release();
    }
  }
  return v21;
}

void *static MLActivityClassifier.resume(_:)(uint64_t a1)
{
  uint64_t v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for MLJob<MLActivityClassifier>);
  uint64_t v2 = (void *)swift_allocObject(v1, *(unsigned int *)(v1 + 48), *(unsigned __int16 *)(v1 + 52));
  swift_retain();
  return specialized MLJob.init(_:)(v2, a1);
}

void *static MLActivityClassifier.train(trainingData:featureColumns:labelColumn:recordingFileColumn:parameters:sessionParameters:)(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, void *a5, void *a6, __m128 a7)
{
  char v8 = *((unsigned char *)a1 + 8);
  uint64_t v13 = *a1;
  char v14 = v8;
  Swift::Bool result = (void *)static MLActivityClassifier.makeTrainingSession(trainingData:featureColumns:labelColumn:recordingFileColumn:parameters:sessionParameters:)((uint64_t)&v13, a2, a3, a4, a5, a6, a7, a7.i64[0], a7.i64[1]);
  if (!v7)
  {
    uint64_t v10 = (uint64_t)result;
    uint64_t v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for MLJob<MLActivityClassifier>);
    int64_t v12 = (void *)swift_allocObject(v11, *(unsigned int *)(v11 + 48), *(unsigned __int16 *)(v11 + 52));
    return specialized MLJob.init(_:)(v12, v10);
  }
  return result;
}

uint64_t static MLActivityClassifier.makeTrainingSession(trainingData:featureColumns:labelColumn:recordingFileColumn:parameters:sessionParameters:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void *a5, void *a6, __m128 a7, uint64_t a8, uint64_t a9)
{
  uint64_t v46 = a6;
  uint64_t v47 = a5;
  uint64_t v49 = (uint64_t *)a4;
  uint64_t v48 = a3;
  uint64_t v11 = a1;
  int64_t v12 = *(void *)(*(void *)(type metadata accessor for MLTrainingSessionParameters(0) - 8) + 64);
  uint64_t v13 = alloca(v12);
  char v14 = alloca(v12);
  uint64_t v42 = &v36;
  int64_t v15 = alloca(v12);
  uint64_t v16 = alloca(v12);
  int64_t v17 = *(void *)(*(void *)(type metadata accessor for MLActivityClassifier.ModelParameters(0) - 8) + 64);
  int64_t v18 = alloca(v17);
  uint64_t v19 = alloca(v17);
  if (*(void *)(a2 + 16))
  {
    uint64_t v50 = &v36;
    char v20 = *(unsigned char *)(a1 + 8);
    uint64_t v36 = *(void *)a1;
    char v37 = v20;
    validateAndConvertRawDataToInternalData(_:featureColumns:labelColumn:recordingFileColumn:)((uint64_t)&v36, a2, v48, (uint64_t)v49, (uint64_t)v47, v46, a7);
    if (!v9)
    {
      uint64_t v21 = (uint64_t)v38;
      uint64_t v43 = &v36;
      int v52 = v39;
      LOBYTE(v39) = v39 & 1;
      outlined init with copy of MLTrainingSessionParameters(a8, (uint64_t)v50, type metadata accessor for MLActivityClassifier.ModelParameters);
      outlined init with copy of MLTrainingSessionParameters(a9, (uint64_t)&v36, type metadata accessor for MLTrainingSessionParameters);
      uint64_t v22 = type metadata accessor for ActivityClassifierTrainingSessionDelegate(0);
      uint64_t v23 = *(unsigned int *)(v22 + 48);
      uint64_t v24 = *(unsigned __int16 *)(v22 + 52);
      uint64_t v45 = v22;
      uint64_t v44 = swift_allocObject(v22, v23, v24);
      uint64_t v51 = v21;
      outlined copy of Result<_DataTable, Error>(v21, v52);
      swift_bridgeObjectRetain(a2);
      uint64_t v25 = v49;
      swift_bridgeObjectRetain((_BYTE)v49);
      int v26 = v46;
      swift_bridgeObjectRetain((_BYTE)v46);
      uint64_t v27 = ActivityClassifierTrainingSessionDelegate.init(trainingData:featureColumnNames:labelColumnName:recordingFileColumn:modelParameters:sessionParameters:)((uint64_t)&v38, a2, v48, v25, v47, v26, (uint64_t)v50, (uint64_t)v43);
      uint64_t v40 = v45;
      uint64_t v41 = &protocol witness table for ActivityClassifierTrainingSessionDelegate;
      uint64_t v38 = v27;
      uint64_t v34 = (uint64_t)v42;
      outlined init with copy of MLTrainingSessionParameters(a9, (uint64_t)v42, type metadata accessor for MLTrainingSessionParameters);
      uint64_t v35 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for MLTrainingSession<MLActivityClassifier>);
      swift_allocObject(v35, *(unsigned int *)(v35 + 48), *(unsigned __int16 *)(v35 + 52));
      swift_retain();
      uint64_t v11 = specialized MLTrainingSession.init(delegate:parameters:modelType:)((uint64_t)&v38, v34, 18, &demangling cache variable for type metadata for MLTrainingSession<MLActivityClassifier>.Metadata, &lazy protocol witness table cache variable for type MLTrainingSession<MLActivityClassifier>.Metadata and conformance MLTrainingSession<A>.Metadata, &lazy protocol witness table cache variable for type MLTrainingSession<MLActivityClassifier>.Metadata and conformance MLTrainingSession<A>.Metadata);
      outlined consume of Result<_DataTable, Error>(v51, v52);
      swift_release();
    }
  }
  else
  {
    uint64_t v28 = lazy protocol witness table accessor for type MLCreateError and conformance MLCreateError();
    swift_allocError(&type metadata for MLCreateError, v28, 0, 0);
    *(void *)uint64_t v29 = 0xD000000000000035;
    *(void *)(v29 + 8) = "Prediction Window Size" + 0x8000000000000000;
    *(_OWORD *)(v29 + 16) = 0;
    *(_OWORD *)(v29 + 32) = 0;
    *(unsigned char *)(v29 + 48) = 0;
    swift_willThrow(&type metadata for MLCreateError, v28, v29, v30, v31, v32);
  }
  return v11;
}

uint64_t static MLActivityClassifier.restoreTrainingSession(sessionParameters:)(uint64_t a1)
{
  int64_t v2 = *(void *)(*(void *)(type metadata accessor for MLTrainingSessionParameters(0) - 8) + 64);
  uint64_t v3 = alloca(v2);
  int64_t v4 = alloca(v2);
  int64_t v12 = v11;
  uint64_t v5 = alloca(v2);
  uint64_t v6 = alloca(v2);
  outlined init with copy of MLTrainingSessionParameters(a1, (uint64_t)v11, type metadata accessor for MLTrainingSessionParameters);
  uint64_t v7 = type metadata accessor for ActivityClassifierTrainingSessionDelegate(0);
  swift_allocObject(v7, *(unsigned int *)(v7 + 48), *(unsigned __int16 *)(v7 + 52));
  uint64_t result = ActivityClassifierTrainingSessionDelegate.init(sessionParameters:)((uint64_t)v11);
  if (!v1)
  {
    v11[3] = v7;
    v11[4] = &protocol witness table for ActivityClassifierTrainingSessionDelegate;
    v11[0] = result;
    uint64_t v9 = (uint64_t)v12;
    outlined init with copy of MLTrainingSessionParameters(a1, (uint64_t)v12, type metadata accessor for MLTrainingSessionParameters);
    uint64_t v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for MLTrainingSession<MLActivityClassifier>);
    swift_allocObject(v10, *(unsigned int *)(v10 + 48), *(unsigned __int16 *)(v10 + 52));
    return specialized MLTrainingSession.init(delegate:parameters:modelType:)((uint64_t)v11, v9, 18, &demangling cache variable for type metadata for MLTrainingSession<MLActivityClassifier>.Metadata, &lazy protocol witness table cache variable for type MLTrainingSession<MLActivityClassifier>.Metadata and conformance MLTrainingSession<A>.Metadata, &lazy protocol witness table cache variable for type MLTrainingSession<MLActivityClassifier>.Metadata and conformance MLTrainingSession<A>.Metadata);
  }
  return result;
}

uint64_t closure #1 in closure #1 in static MLActivityClassifier.resume(_:)(uint64_t a1, char a2, uint64_t a3)
{
  v7[0] = a3;
  int64_t v3 = *(void *)(*(void *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Result<MLActivityClassifier, Error>)
                             - 8)
                 + 64);
  int64_t v4 = alloca(v3);
  uint64_t v5 = alloca(v3);
  _ss6ResultO3mapyAByqd__q_Gqd__xXERi_d__lFyt_s5Error_p8CreateML20MLActivityClassifierVTg503_s8d4ML20fG17VIgr_ytACIegnr_TRAHIgr_Tf1ncn_n(a1, a2 & 1, (void (*)(uint64_t))partial apply for closure #1 in closure #1 in closure #1 in static MLActivityClassifier.resume(_:));
  ((void (*)(void *))v7[0])(v7);
  return outlined destroy of Either<LogisticRegressionClassifier<Float, String>, FullyConnectedNetworkClassifier<Float, String>>((uint64_t)v7, &demangling cache variable for type metadata for Result<MLActivityClassifier, Error>);
}

uint64_t closure #1 in closure #1 in closure #1 in static MLActivityClassifier.resume(_:)(uint64_t a1)
{
  uint64_t v44 = v1;
  uint64_t v43 = type metadata accessor for MLActivityClassifier(0);
  int64_t v2 = *(void *)(*(void *)(v43 - 8) + 64);
  int64_t v3 = alloca(v2);
  int64_t v4 = alloca(v2);
  uint64_t v42 = &v34;
  int64_t v5 = *(void *)(*(void *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for MLActivityClassifier.Model?)
                             - 8)
                 + 64);
  uint64_t v6 = alloca(v5);
  uint64_t v7 = alloca(v5);
  char v37 = &v34;
  char v8 = (int *)type metadata accessor for MLActivityClassifier.ModelParameters(0);
  int64_t v9 = *(void *)(*((void *)v8 - 1) + 64);
  uint64_t v10 = alloca(v9);
  uint64_t v11 = alloca(v9);
  uint64_t v46 = &v34;
  int64_t v12 = alloca(v9);
  uint64_t v13 = alloca(v9);
  outlined init with copy of TabularRegressionTask(direct field offset for MLTrainingSession.delegate + a1, (uint64_t)&v34);
  uint64_t v14 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TrainingSessionDelegate);
  uint64_t v15 = type metadata accessor for ActivityClassifierTrainingSessionDelegate(0);
  swift_dynamicCast(&v36, &v34, v14, v15, 7);
  if (!*(void *)(v36 + OBJC_IVAR____TtC8CreateML41ActivityClassifierTrainingSessionDelegate_trainingParameters + 32)) {
    BUG();
  }
  uint64_t v38 = *(void *)(v36 + OBJC_IVAR____TtC8CreateML41ActivityClassifierTrainingSessionDelegate_trainingParameters + 56);
  uint64_t v40 = *(void *)(v36 + OBJC_IVAR____TtC8CreateML41ActivityClassifierTrainingSessionDelegate_trainingParameters + 48);
  uint64_t v39 = *(void *)(v36 + OBJC_IVAR____TtC8CreateML41ActivityClassifierTrainingSessionDelegate_trainingParameters + 40);
  int v47 = *(_DWORD *)(v36 + OBJC_IVAR____TtC8CreateML41ActivityClassifierTrainingSessionDelegate_trainingParameters + 24);
  uint64_t v41 = *(void *)(v36 + OBJC_IVAR____TtC8CreateML41ActivityClassifierTrainingSessionDelegate_trainingParameters + 16);
  uint64_t v16 = v8[6];
  uint64_t v17 = v8[7];
  uint64_t v45 = v36;
  uint64_t v18 = v8[8];
  uint64_t v19 = (char *)&v34 + v8[5];
  uint64_t v20 = type metadata accessor for MLActivityClassifier.ModelParameters.Validation(0);
  swift_storeEnumTagMultiPayload(v19, v20, 2);
  uint64_t v21 = v41;
  uint64_t v34 = v41;
  char v22 = v47;
  char v35 = v47;
  *(uint64_t *)((char *)&v34 + v17) = v40;
  *((unsigned char *)&v34 + v17 + 8) = 0;
  *(uint64_t *)((char *)&v34 + v16) = v39;
  *((unsigned char *)&v34 + v16 + 8) = 0;
  *(uint64_t *)((char *)&v34 + v18) = v38;
  *((unsigned char *)&v34 + v18 + 8) = 0;
  outlined copy of MLDataTable?(v21, v22);
  uint64_t v23 = v37;
  ActivityClassifierTrainingSessionDelegate.model.getter();
  uint64_t v24 = (uint64_t)v23;
  uint64_t v25 = type metadata accessor for MLActivityClassifier.Model(0);
  if (__swift_getEnumTagSinglePayload(v24, 1, v25) == 1) {
    BUG();
  }
  outlined init with copy of MLTrainingSessionParameters((uint64_t)&v34, (uint64_t)v46, type metadata accessor for MLActivityClassifier.ModelParameters);
  int v26 = (int *)v43;
  uint64_t v27 = *(int *)(v43 + 28);
  uint64_t v28 = (uint64_t)v42;
  *(uint64_t *)((char *)v42 + v27) = 0x5F6E6F6973736573;
  *(void *)(v28 + v27 + 8) = 0xEA00000000006469;
  uint64_t v29 = v26[8];
  *(void *)(v28 + v29) = 0x6C6562616CLL;
  *(void *)(v28 + v29 + 8) = 0xE500000000000000;
  *(void *)(v28 + v26[9]) = _swiftEmptyArrayStorage;
  uint64_t v30 = v26[10];
  strcpy((char *)(v28 + v30), "recordingFile");
  *(_WORD *)(v28 + v30 + 14) = -4864;
  outlined init with copy of MLTrainingSessionParameters(v24, v28, type metadata accessor for MLActivityClassifier.Model);
  uint64_t v31 = *(void **)(v24 + *(int *)(v25 + 68));
  if (!v31) {
    BUG();
  }
  id v32 = v31;
  outlined destroy of MLActivityClassifier.ModelParameters(v24, type metadata accessor for MLActivityClassifier.Model);
  *(void *)(v28 + v26[5]) = v32;
  outlined init with take of MLClassifierMetrics((uint64_t)v46, v26[6] + v28, type metadata accessor for MLActivityClassifier.ModelParameters);
  outlined init with take of MLClassifierMetrics(v28, v44, type metadata accessor for MLActivityClassifier);
  swift_release();
  return outlined destroy of MLActivityClassifier.ModelParameters((uint64_t)&v34, type metadata accessor for MLActivityClassifier.ModelParameters);
}

uint64_t _ss6ResultO3mapyAByqd__q_Gqd__xXERi_d__lFyt_s5Error_p8CreateML20MLActivityClassifierVTg503_s8d4ML20fG17VIgr_ytACIegnr_TRAHIgr_Tf1ncn_n(uint64_t a1, char a2, void (*a3)(uint64_t))
{
  int64_t v4 = v3;
  if (a2)
  {
    *int64_t v3 = a1;
    uint64_t v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Result<MLActivityClassifier, Error>);
    swift_storeEnumTagMultiPayload(v4, v7, 1);
    return swift_errorRetain(a1);
  }
  else
  {
    a3(a1);
    uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Result<MLActivityClassifier, Error>);
    return swift_storeEnumTagMultiPayload(v4, v5, 0);
  }
}

uint64_t closure #2 in validateAndConvertRawDataToInternalData(_:featureColumns:labelColumn:recordingFileColumn:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  swift_bridgeObjectRetain(a2);
  swift_bridgeObjectRetain(a3);
  uint64_t ML14_UntypedColumnC_s5Error_pTgm5 = _ss6ResultOsRi_zrlE8catchingAByxq_Gxyq_YKXE_tcfC8CreateML14_UntypedColumnC_s5Error_pTgm5((void (*)(void *))partial apply for specialized closure #1 in MLUntypedColumn.init<A>(_:));
  char v6 = v5 & 1;
  swift_bridgeObjectRelease(a3);
  specialized Dictionary._Variant.setValue(_:forKey:)(ML14_UntypedColumnC_s5Error_pTgm5, v6, a1, a2);
  return swift_bridgeObjectRelease(a2);
}

uint64_t specialized Sequence.forEach(_:)(uint64_t a1, void (*a2)(uint64_t, uint64_t, uint64_t))
{
  specialized _NativeDictionary.makeIterator()(a1);
  uint64_t v2 = v19;
  unint64_t v3 = v20;
  int64_t v23 = (unint64_t)(v18 + 64) >> 6;
  swift_bridgeObjectRetain(a1);
  while (1)
  {
    if (v3)
    {
      _BitScanForward64(&v4, v3);
      uint64_t v22 = (v3 - 1) & v3;
      int64_t v21 = v2;
      unint64_t v5 = v4 | (v2 << 6);
      goto LABEL_21;
    }
    int64_t v6 = v2 + 1;
    if (__OFADD__(1, v2)) {
      BUG();
    }
    if (v6 >= v23) {
      return swift_release();
    }
    unint64_t v7 = *(void *)(v17 + 8 * v6);
    if (!v7) {
      break;
    }
    int64_t v8 = v2 + 1;
LABEL_20:
    _BitScanForward64(&v10, v7);
    uint64_t v22 = v7 & (v7 - 1);
    unint64_t v5 = v10 + (v8 << 6);
    int64_t v21 = v8;
LABEL_21:
    uint64_t v11 = *(void *)(v16 + 48);
    uint64_t v12 = *(void *)(v11 + 16 * v5);
    uint64_t v13 = *(void *)(v11 + 16 * v5 + 8);
    uint64_t v14 = *(void *)(*(void *)(v16 + 56) + 8 * v5);
    swift_bridgeObjectRetain(v13);
    swift_bridgeObjectRetain(v14);
    a2(v12, v13, v14);
    swift_bridgeObjectRelease(v14);
    swift_bridgeObjectRelease(v13);
    uint64_t v2 = v21;
    unint64_t v3 = v22;
  }
  int64_t v8 = v2 + 2;
  if (v2 + 2 >= v23) {
    return swift_release();
  }
  unint64_t v7 = *(void *)(v17 + 8 * v6 + 8);
  if (v7) {
    goto LABEL_20;
  }
  int64_t v8 = v2 + 3;
  if (v2 + 3 >= v23) {
    return swift_release();
  }
  unint64_t v7 = *(void *)(v17 + 8 * v6 + 16);
  if (v7) {
    goto LABEL_20;
  }
  int64_t v8 = v2 + 4;
  if (v2 + 4 >= v23) {
    return swift_release();
  }
  unint64_t v7 = *(void *)(v17 + 8 * v6 + 24);
  if (v7) {
    goto LABEL_20;
  }
  int64_t v8 = v2 + 5;
  if (v2 + 5 >= v23) {
    return swift_release();
  }
  unint64_t v7 = *(void *)(v17 + 8 * v6 + 32);
  if (v7) {
    goto LABEL_20;
  }
  int64_t v9 = v2 + 6;
  while (v9 < v23)
  {
    unint64_t v7 = *(void *)(v17 + 8 * v9++);
    if (v7)
    {
      int64_t v8 = v9 - 1;
      goto LABEL_20;
    }
  }
  return swift_release();
}

unint64_t MLActivityClassifier.description.getter(double a1, double a2)
{
  uint64_t v32 = type metadata accessor for MLClassifierMetrics.Contents(0);
  int64_t v2 = *(void *)(*(void *)(v32 - 8) + 64);
  unint64_t v3 = alloca(v2);
  unint64_t v4 = alloca(v2);
  int64_t v5 = *(void *)(*(void *)(type metadata accessor for MLClassifierMetrics(0) - 8) + 64);
  int64_t v6 = alloca(v5);
  unint64_t v7 = alloca(v5);
  int v26 = &v25;
  int64_t v8 = alloca(v5);
  int64_t v9 = alloca(v5);
  unint64_t v10 = alloca(v5);
  uint64_t v11 = alloca(v5);
  type metadata accessor for MLActivityClassifier(0);
  v28._uint64_t countAndFlagsBits = MLActivityClassifier.ModelParameters.description.getter();
  uint64_t v31 = v12;
  MLActivityClassifier.trainingMetrics.getter(a1, a2);
  v27._uint64_t countAndFlagsBits = MLClassifierMetrics.description.getter();
  v27._char object = v13;
  outlined destroy of MLActivityClassifier.ModelParameters((uint64_t)&v25, type metadata accessor for MLClassifierMetrics);
  MLActivityClassifier.validationMetrics.getter(a1, a2);
  outlined init with copy of MLTrainingSessionParameters((uint64_t)&v25, (uint64_t)&v25, type metadata accessor for MLClassifierMetrics.Contents);
  LODWORD(v32) = swift_getEnumCaseMultiPayload(&v25, v32);
  outlined destroy of MLActivityClassifier.ModelParameters((uint64_t)&v25, type metadata accessor for MLClassifierMetrics.Contents);
  outlined destroy of MLActivityClassifier.ModelParameters((uint64_t)&v25, type metadata accessor for MLClassifierMetrics);
  uint64_t v14 = v26;
  MLActivityClassifier.validationMetrics.getter(a1, a2);
  uint64_t v15 = (uint64_t)v14;
  v28._char object = (void *)MLClassifierMetrics.description.getter();
  uint64_t v17 = v16;
  outlined destroy of MLActivityClassifier.ModelParameters(v15, type metadata accessor for MLClassifierMetrics);
  unint64_t v29 = 0xD00000000000001FLL;
  uint64_t v30 = "e model from checkpoint" + 0x8000000000000000;
  v18._uint64_t countAndFlagsBits = v28._countAndFlagsBits;
  v18._char object = v31;
  String.append(_:)(v18);
  v25._uint64_t countAndFlagsBits = 0xD00000000000001ELL;
  v25._char object = "ActivityClassifier\n\nParameters\n" + 0x8000000000000000;
  char object = (char)v27._object;
  String.append(_:)(v27);
  char v20 = (char)v25._object;
  String.append(_:)(v25);
  swift_bridgeObjectRelease(v20);
  if (v32 > 1)
  {
    char v23 = (char)v31;
  }
  else
  {
    v25._uint64_t countAndFlagsBits = 0xD000000000000020;
    v25._char object = "\nPerformance on Training Data\n" + 0x8000000000000000;
    v21._uint64_t countAndFlagsBits = (uint64_t)v28._object;
    v21._char object = v17;
    String.append(_:)(v21);
    char v22 = (char)v25._object;
    String.append(_:)(v25);
    swift_bridgeObjectRelease((_BYTE)v31);
    char v23 = object;
    char object = v22;
  }
  swift_bridgeObjectRelease(v23);
  swift_bridgeObjectRelease(object);
  swift_bridgeObjectRelease((_BYTE)v17);
  return v29;
}

unint64_t protocol witness for CustomStringConvertible.description.getter in conformance MLActivityClassifier(double a1, double a2)
{
  return MLActivityClassifier.description.getter(a1, a2);
}

unint64_t MLActivityClassifier.debugDescription.getter(double a1, double a2)
{
  return MLActivityClassifier.description.getter(a1, a2);
}

unint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance MLActivityClassifier(double a1, double a2)
{
  return MLActivityClassifier.debugDescription.getter(a1, a2);
}

unint64_t MLActivityClassifier.playgroundDescription.getter(double a1, double a2)
{
  unint64_t v3 = v2;
  unint64_t result = MLActivityClassifier.description.getter(a1, a2);
  v3[3] = (unint64_t)&type metadata for String;
  *unint64_t v3 = result;
  v3[1] = v5;
  return result;
}

unint64_t protocol witness for CustomPlaygroundDisplayConvertible.playgroundDescription.getter in conformance MLActivityClassifier(double a1, double a2)
{
  return MLActivityClassifier.playgroundDescription.getter(a1, a2);
}

uint64_t outlined copy of ClassificationMetricsContainer?(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a1)
  {
    swift_retain(a1);
    swift_retain(a2);
    return swift_bridgeObjectRetain(a3);
  }
  return result;
}

uint64_t specialized MLTrainingSession.init(delegate:parameters:modelType:)(uint64_t a1, uint64_t a2, int a3)
{
  return specialized MLTrainingSession.init(delegate:parameters:modelType:)(a1, a2, a3, &demangling cache variable for type metadata for MLTrainingSession<MLHandPoseClassifier>.Metadata, &lazy protocol witness table cache variable for type MLTrainingSession<MLHandPoseClassifier>.Metadata and conformance MLTrainingSession<A>.Metadata, &lazy protocol witness table cache variable for type MLTrainingSession<MLHandPoseClassifier>.Metadata and conformance MLTrainingSession<A>.Metadata);
}

{
  return specialized MLTrainingSession.init(delegate:parameters:modelType:)(a1, a2, a3, &demangling cache variable for type metadata for MLTrainingSession<MLRandomForestRegressor>.Metadata, &lazy protocol witness table cache variable for type MLTrainingSession<MLRandomForestRegressor>.Metadata and conformance MLTrainingSession<A>.Metadata, &lazy protocol witness table cache variable for type MLTrainingSession<MLRandomForestRegressor>.Metadata and conformance MLTrainingSession<A>.Metadata);
}

{
  return specialized MLTrainingSession.init(delegate:parameters:modelType:)(a1, a2, a3, &demangling cache variable for type metadata for MLTrainingSession<MLStyleTransfer>.Metadata, &lazy protocol witness table cache variable for type MLTrainingSession<MLStyleTransfer>.Metadata and conformance MLTrainingSession<A>.Metadata, &lazy protocol witness table cache variable for type MLTrainingSession<MLStyleTransfer>.Metadata and conformance MLTrainingSession<A>.Metadata);
}

{
  return specialized MLTrainingSession.init(delegate:parameters:modelType:)(a1, a2, a3, &demangling cache variable for type metadata for MLTrainingSession<MLLogisticRegressionClassifier>.Metadata, &lazy protocol witness table cache variable for type MLTrainingSession<MLLogisticRegressionClassifier>.Metadata and conformance MLTrainingSession<A>.Metadata, &lazy protocol witness table cache variable for type MLTrainingSession<MLLogisticRegressionClassifier>.Metadata and conformance MLTrainingSession<A>.Metadata);
}

{
  return specialized MLTrainingSession.init(delegate:parameters:modelType:)(a1, a2, a3, &demangling cache variable for type metadata for MLTrainingSession<MLDecisionTreeRegressor>.Metadata, &lazy protocol witness table cache variable for type MLTrainingSession<MLDecisionTreeRegressor>.Metadata and conformance MLTrainingSession<A>.Metadata, &lazy protocol witness table cache variable for type MLTrainingSession<MLDecisionTreeRegressor>.Metadata and conformance MLTrainingSession<A>.Metadata);
}

{
  return specialized MLTrainingSession.init(delegate:parameters:modelType:)(a1, a2, a3, &demangling cache variable for type metadata for MLTrainingSession<MLActionClassifier>.Metadata, &lazy protocol witness table cache variable for type MLTrainingSession<MLActionClassifier>.Metadata and conformance MLTrainingSession<A>.Metadata, &lazy protocol witness table cache variable for type MLTrainingSession<MLActionClassifier>.Metadata and conformance MLTrainingSession<A>.Metadata);
}

{
  return specialized MLTrainingSession.init(delegate:parameters:modelType:)(a1, a2, a3, &demangling cache variable for type metadata for MLTrainingSession<MLHandActionClassifier>.Metadata, &lazy protocol witness table cache variable for type MLTrainingSession<MLHandActionClassifier>.Metadata and conformance MLTrainingSession<A>.Metadata, &lazy protocol witness table cache variable for type MLTrainingSession<MLHandActionClassifier>.Metadata and conformance MLTrainingSession<A>.Metadata);
}

{
  return specialized MLTrainingSession.init(delegate:parameters:modelType:)(a1, a2, a3, &demangling cache variable for type metadata for MLTrainingSession<MLRandomForestClassifier>.Metadata, &lazy protocol witness table cache variable for type MLTrainingSession<MLRandomForestClassifier>.Metadata and conformance MLTrainingSession<A>.Metadata, &lazy protocol witness table cache variable for type MLTrainingSession<MLRandomForestClassifier>.Metadata and conformance MLTrainingSession<A>.Metadata);
}

{
  return specialized MLTrainingSession.init(delegate:parameters:modelType:)(a1, a2, a3, &demangling cache variable for type metadata for MLTrainingSession<MLBoostedTreeRegressor>.Metadata, &lazy protocol witness table cache variable for type MLTrainingSession<MLBoostedTreeRegressor>.Metadata and conformance MLTrainingSession<A>.Metadata, &lazy protocol witness table cache variable for type MLTrainingSession<MLBoostedTreeRegressor>.Metadata and conformance MLTrainingSession<A>.Metadata);
}

{
  return specialized MLTrainingSession.init(delegate:parameters:modelType:)(a1, a2, a3, &demangling cache variable for type metadata for MLTrainingSession<MLObjectDetector>.Metadata, &lazy protocol witness table cache variable for type MLTrainingSession<MLObjectDetector>.Metadata and conformance MLTrainingSession<A>.Metadata, &lazy protocol witness table cache variable for type MLTrainingSession<MLObjectDetector>.Metadata and conformance MLTrainingSession<A>.Metadata);
}

{
  return specialized MLTrainingSession.init(delegate:parameters:modelType:)(a1, a2, a3, &demangling cache variable for type metadata for MLTrainingSession<MLDecisionTreeClassifier>.Metadata, &lazy protocol witness table cache variable for type MLTrainingSession<MLDecisionTreeClassifier>.Metadata and conformance MLTrainingSession<A>.Metadata, &lazy protocol witness table cache variable for type MLTrainingSession<MLDecisionTreeClassifier>.Metadata and conformance MLTrainingSession<A>.Metadata);
}

{
  return specialized MLTrainingSession.init(delegate:parameters:modelType:)(a1, a2, a3, &demangling cache variable for type metadata for MLTrainingSession<MLSoundClassifier>.Metadata, &lazy protocol witness table cache variable for type MLTrainingSession<MLSoundClassifier>.Metadata and conformance MLTrainingSession<A>.Metadata, &lazy protocol witness table cache variable for type MLTrainingSession<MLSoundClassifier>.Metadata and conformance MLTrainingSession<A>.Metadata);
}

{
  return specialized MLTrainingSession.init(delegate:parameters:modelType:)(a1, a2, a3, &demangling cache variable for type metadata for MLTrainingSession<MLSoundClassifier.DataSource>.Metadata, &lazy protocol witness table cache variable for type MLTrainingSession<MLSoundClassifier.DataSource>.Metadata and conformance MLTrainingSession<A>.Metadata, &lazy protocol witness table cache variable for type MLTrainingSession<MLSoundClassifier.DataSource>.Metadata and conformance MLTrainingSession<A>.Metadata);
}

{
  return specialized MLTrainingSession.init(delegate:parameters:modelType:)(a1, a2, a3, &demangling cache variable for type metadata for MLTrainingSession<MLBoostedTreeClassifier>.Metadata, &lazy protocol witness table cache variable for type MLTrainingSession<MLBoostedTreeClassifier>.Metadata and conformance MLTrainingSession<A>.Metadata, &lazy protocol witness table cache variable for type MLTrainingSession<MLBoostedTreeClassifier>.Metadata and conformance MLTrainingSession<A>.Metadata);
}

{
  return specialized MLTrainingSession.init(delegate:parameters:modelType:)(a1, a2, a3, &demangling cache variable for type metadata for MLTrainingSession<MLLinearRegressor>.Metadata, &lazy protocol witness table cache variable for type MLTrainingSession<MLLinearRegressor>.Metadata and conformance MLTrainingSession<A>.Metadata, &lazy protocol witness table cache variable for type MLTrainingSession<MLLinearRegressor>.Metadata and conformance MLTrainingSession<A>.Metadata);
}

{
  return specialized MLTrainingSession.init(delegate:parameters:modelType:)(a1, a2, a3, &demangling cache variable for type metadata for MLTrainingSession<MLImageClassifier>.Metadata, &lazy protocol witness table cache variable for type MLTrainingSession<MLImageClassifier>.Metadata and conformance MLTrainingSession<A>.Metadata, &lazy protocol witness table cache variable for type MLTrainingSession<MLImageClassifier>.Metadata and conformance MLTrainingSession<A>.Metadata);
}

uint64_t specialized MLTrainingSession.init(delegate:parameters:modelType:)(uint64_t a1, uint64_t a2, int a3, uint64_t *a4, void *a5, uint64_t *a6)
{
  uint64_t v31 = a6;
  uint64_t v32 = a5;
  uint64_t v34 = v6;
  LODWORD(v38) = a3;
  uint64_t v30 = a2;
  unint64_t v29 = (void *)a1;
  int64_t v9 = *(void *)(*(void *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for URL?)
                             - 8)
                 + 64);
  unint64_t v10 = alloca(v9);
  uint64_t v11 = alloca(v9);
  Swift::String v28 = &v27;
  uint64_t v12 = type metadata accessor for URL(0);
  uint64_t v35 = *(void *)(v12 - 8);
  int64_t v13 = *(void *)(v35 + 64);
  uint64_t v14 = alloca(v13);
  uint64_t v15 = alloca(v13);
  uint64_t v36 = &v27;
  *(unsigned char *)(v7 + direct field offset for MLTrainingSession.modelType) = 28;
  uint64_t v16 = v7 + *(void *)(*(void *)v7 + 112);
  Date.init()(0);
  uint64_t v33 = a4;
  uint64_t v17 = (int *)__swift_instantiateConcreteTypeFromMangledName(a4);
  *(unsigned char *)(v17[7] + v16) = 0;
  *(void *)(v17[8] + v16) = 0;
  __swift_storeEnumTagSinglePayload(v16 + v17[9], 1, 1, v12);
  __swift_storeEnumTagSinglePayload(v16 + v17[10], 1, 1, v12);
  uint64_t v18 = v17[11];
  uint64_t v19 = v30;
  *(void *)(v18 + v16) = _swiftEmptyArrayStorage;
  char v20 = v29;
  outlined init with copy of TabularRegressionTask((uint64_t)v29, v7 + direct field offset for MLTrainingSession.delegate);
  outlined init with copy of MLTrainingSessionParameters(v19, v7 + direct field offset for MLTrainingSession.parameters, type metadata accessor for MLTrainingSessionParameters);
  uint64_t v37 = v7;
  *(unsigned char *)(v7 + direct field offset for MLTrainingSession.modelType) = v38;
  uint64_t v21 = (uint64_t)v28;
  outlined init with copy of Either<LogisticRegressionClassifier<Float, String>, FullyConnectedNetworkClassifier<Float, String>>(v19, (uint64_t)v28, &demangling cache variable for type metadata for URL?);
  uint64_t v38 = v12;
  if (__swift_getEnumTagSinglePayload(v21, 1, v12) == 1)
  {
    outlined destroy of MLActivityClassifier.ModelParameters(v19, type metadata accessor for MLTrainingSessionParameters);
    __swift_destroy_boxed_opaque_existential_1Tm(v20);
    outlined destroy of Either<LogisticRegressionClassifier<Float, String>, FullyConnectedNetworkClassifier<Float, String>>(v21, &demangling cache variable for type metadata for URL?);
  }
  else
  {
    uint64_t v22 = v19;
    uint64_t v23 = (uint64_t)v36;
    (*(void (**)(uint64_t *, uint64_t, uint64_t))(v35 + 32))(v36, v21, v38);
    uint64_t v24 = v34;
    specialized MLTrainingSession.restore(from:)(v23, v33, v32, v31);
    if (v24)
    {
      uint64_t v25 = v37;
      swift_release();
      outlined destroy of MLActivityClassifier.ModelParameters(v22, type metadata accessor for MLTrainingSessionParameters);
      __swift_destroy_boxed_opaque_existential_1Tm(v20);
      (*(void (**)(uint64_t *, uint64_t))(v35 + 8))(v36, v38);
      return v25;
    }
    outlined destroy of MLActivityClassifier.ModelParameters(v22, type metadata accessor for MLTrainingSessionParameters);
    __swift_destroy_boxed_opaque_existential_1Tm(v20);
    (*(void (**)(uint64_t *, uint64_t))(v35 + 8))(v36, v38);
  }
  return v37;
}

NSURL *specialized MLTrainingSession.restore(from:)(uint64_t a1, uint64_t *a2, void *a3, uint64_t *a4)
{
  uint64_t v68 = a4;
  id v80 = a3;
  uint64_t v82 = v4;
  uint64_t v73 = v5;
  unsigned __int8 v76 = a2;
  uint64_t v74 = __swift_instantiateConcreteTypeFromMangledName(a2);
  int64_t v6 = *(void *)(*(void *)(v74 - 8) + 64);
  uint64_t v7 = alloca(v6);
  int64_t v8 = alloca(v6);
  uint64_t v75 = &v68;
  uint64_t v71 = type metadata accessor for CodingUserInfoKey(0);
  uint64_t v70 = *(void *)(v71 - 8);
  int64_t v9 = *(void *)(v70 + 64);
  unint64_t v10 = alloca(v9);
  uint64_t v11 = alloca(v9);
  uint64_t v69 = &v68;
  uint64_t v84 = type metadata accessor for URL(0);
  uint64_t v81 = *(void *)(v84 - 8);
  int64_t v12 = *(void *)(v81 + 64);
  int64_t v13 = alloca(v12);
  uint64_t v14 = alloca(v12);
  uint64_t v15 = objc_opt_self(NSFileManager);
  id v16 = [v15 defaultManager];
  id v17 = v16;
  uint64_t v79 = a1;
  URL.appendingPathComponent(_:)(0x696C702E6174656DLL, 0xEA00000000007473);
  URL.path.getter(0x696C702E6174656DLL);
  char v19 = v18;
  NSString v20 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(v19);
  unsigned __int8 v21 = [v17 fileExistsAtPath:v20];

  if (!v21)
  {
    uint64_t v83 = &v68;
    id v86 = 0;
    uint64_t v87 = (char *)0xE000000000000000;
    _StringGuts.grow(_:)(30);
    uint64_t v33 = v87;
    swift_bridgeObjectRelease((_BYTE)v87);
    id v86 = (id)0xD00000000000001BLL;
    uint64_t v87 = "Resuming existing session in '" + 0x8000000000000000;
    v34._uint64_t countAndFlagsBits = URL.path.getter(v33);
    char object = (char)v34._object;
    String.append(_:)(v34);
    swift_bridgeObjectRelease(object);
    v36._uint64_t countAndFlagsBits = 39;
    v36._char object = (void *)0xE100000000000000;
    String.append(_:)(v36);
    uint64_t v37 = (uint64_t)v86;
    uint64_t v38 = v87;
    os_log_type_t v39 = static os_log_type_t.default.getter(39);
    v36._uint64_t countAndFlagsBits = v37;
    v36._char object = v38;
    log(_:type:)(v36, v39);
    uint64_t v40 = (NSURL *)swift_bridgeObjectRelease((_BYTE)v38);
    URL._bridgeToObjectiveC()(v40);
    uint64_t v42 = v41;
    id v86 = 0;
    LOBYTE(v38) = [v17 createDirectoryAtURL:v41 withIntermediateDirectories:1 attributes:0 error:&v86];

    id v43 = v86;
    if (!(_BYTE)v38)
    {
      id v57 = v86;
      _convertNSErrorToError(_:)(v43);

      swift_willThrow(v57, "createDirectoryAtURL:withIntermediateDirectories:attributes:error:", v58, v59, v60, v61);
      (*(void (**)(uint64_t **, uint64_t))(v81 + 8))(v83, v84);
      return __stack_chk_guard;
    }
    v86;
    specialized MLTrainingSession.save()(v76, (uint64_t *)v80);
    (*(void (**)(uint64_t **, uint64_t))(v81 + 8))(v83, v84);
    id v32 = v17;
    goto LABEL_6;
  }
  id v80 = v17;
  id v86 = 0;
  uint64_t v87 = (char *)0xE000000000000000;
  _StringGuts.grow(_:)(33);
  uint64_t v22 = v87;
  swift_bridgeObjectRelease((_BYTE)v87);
  id v86 = (id)0xD00000000000001ELL;
  uint64_t v87 = "Validation Accuracy" + 0x8000000000000000;
  v23._uint64_t countAndFlagsBits = URL.path.getter(v22);
  char v24 = (char)v23._object;
  String.append(_:)(v23);
  swift_bridgeObjectRelease(v24);
  v25._uint64_t countAndFlagsBits = 39;
  v25._char object = (void *)0xE100000000000000;
  String.append(_:)(v25);
  uint64_t v26 = (uint64_t)v86;
  uint64_t v27 = v87;
  os_log_type_t v28 = static os_log_type_t.default.getter(39);
  v25._uint64_t countAndFlagsBits = v26;
  v25._char object = v27;
  log(_:type:)(v25, v28);
  swift_bridgeObjectRelease((_BYTE)v27);
  uint64_t v29 = v82;
  uint64_t v30 = Data.init(contentsOf:options:)(&v68, 0);
  if (v29)
  {
    (*(void (**)(uint64_t **, uint64_t))(v81 + 8))(&v68, v84);
    id v32 = v80;
LABEL_6:

    return __stack_chk_guard;
  }
  uint64_t v72 = 0;
  uint64_t v82 = v30;
  unint64_t v77 = v31;
  uint64_t v83 = &v68;
  uint64_t v44 = type metadata accessor for PropertyListDecoder(0);
  swift_allocObject(v44, *(unsigned int *)(v44 + 48), *(unsigned __int16 *)(v44 + 52));
  uint64_t v78 = PropertyListDecoder.init()();
  uint64_t v45 = v81;
  if (one-time initialization token for sessionDirectory != -1) {
    swift_once(&one-time initialization token for sessionDirectory, one-time initialization function for sessionDirectory);
  }
  uint64_t v46 = v71;
  uint64_t v47 = __swift_project_value_buffer(v71, (uint64_t)static CodingUserInfoKey.sessionDirectory);
  uint64_t v48 = (uint64_t)v69;
  (*(void (**)(uint64_t **, uint64_t, uint64_t))(v70 + 16))(v69, v47, v46);
  uint64_t v49 = v84;
  uint64_t v88 = v84;
  uint64_t v50 = __swift_allocate_boxed_opaque_existential_1(&v86);
  (*(void (**)(void *, uint64_t, uint64_t))(v45 + 16))(v50, v79, v49);
  uint64_t v51 = (void (*)(unsigned char *, void))dispatch thunk of PropertyListDecoder.userInfo.modify(v85);
  specialized Dictionary.subscript.setter((uint64_t)&v86, v48);
  v51(v85, 0);
  uint64_t v52 = lazy protocol witness table accessor for type FullyConnectedNetworkClassifier<Float, String> and conformance FullyConnectedNetworkClassifier<A, B>(v68, v76, (uint64_t)&protocol conformance descriptor for MLTrainingSession<A>.Metadata);
  unint64_t v53 = v77;
  uint64_t v54 = v72;
  dispatch thunk of PropertyListDecoder.decode<A>(_:from:)(v74, v82, v77, v74, v52);
  if (v54)
  {
    (*(void (**)(uint64_t **, uint64_t))(v81 + 8))(v83, v84);
    swift_release();

    uint64_t v55 = v82;
    unint64_t v56 = v53;
  }
  else
  {
    uint64_t v62 = v73;
    uint64_t v63 = v73 + *(void *)(*(void *)v73 + 112);
    swift_beginAccess(v63, &v86, 33, 0);
    outlined assign with take of MLTrainingSession<MLImageClassifier>.Metadata((uint64_t)v75, v63, v76);
    swift_endAccess(&v86);
    uint64_t v64 = (void *)(direct field offset for MLTrainingSession.delegate + v62);
    uint64_t v65 = *(void *)(direct field offset for MLTrainingSession.delegate + v62 + 24);
    uint64_t v66 = *(void *)(direct field offset for MLTrainingSession.delegate + v62 + 32);
    __swift_project_boxed_opaque_existential_0Tm(v64, v65);
    LOBYTE(v86) = *(unsigned char *)(*(int *)(v74 + 28) + v63);
    (*(void (**)(uint64_t, id *, uint64_t))(*(void *)(v66 + 8) + 16))(v79, &v86, v65);
    (*(void (**)(uint64_t **, uint64_t))(v81 + 8))(v83, v84);
    swift_release();

    uint64_t v55 = v82;
    unint64_t v56 = v77;
  }
  outlined consume of Data._Representation(v55, v56);
  return __stack_chk_guard;
}

uint64_t specialized MLTrainingSession.save()()
{
  return specialized MLTrainingSession.save()(&demangling cache variable for type metadata for MLTrainingSession<MLActivityClassifier>.Metadata, &lazy protocol witness table cache variable for type MLTrainingSession<MLActivityClassifier>.Metadata and conformance MLTrainingSession<A>.Metadata);
}

{
  return specialized MLTrainingSession.save()(&demangling cache variable for type metadata for MLTrainingSession<MLHandPoseClassifier>.Metadata, &lazy protocol witness table cache variable for type MLTrainingSession<MLHandPoseClassifier>.Metadata and conformance MLTrainingSession<A>.Metadata);
}

{
  return specialized MLTrainingSession.save()(&demangling cache variable for type metadata for MLTrainingSession<MLRandomForestRegressor>.Metadata, &lazy protocol witness table cache variable for type MLTrainingSession<MLRandomForestRegressor>.Metadata and conformance MLTrainingSession<A>.Metadata);
}

{
  return specialized MLTrainingSession.save()(&demangling cache variable for type metadata for MLTrainingSession<MLStyleTransfer>.Metadata, &lazy protocol witness table cache variable for type MLTrainingSession<MLStyleTransfer>.Metadata and conformance MLTrainingSession<A>.Metadata);
}

{
  return specialized MLTrainingSession.save()(&demangling cache variable for type metadata for MLTrainingSession<MLLogisticRegressionClassifier>.Metadata, &lazy protocol witness table cache variable for type MLTrainingSession<MLLogisticRegressionClassifier>.Metadata and conformance MLTrainingSession<A>.Metadata);
}

{
  return specialized MLTrainingSession.save()(&demangling cache variable for type metadata for MLTrainingSession<MLDecisionTreeRegressor>.Metadata, &lazy protocol witness table cache variable for type MLTrainingSession<MLDecisionTreeRegressor>.Metadata and conformance MLTrainingSession<A>.Metadata);
}

{
  return specialized MLTrainingSession.save()(&demangling cache variable for type metadata for MLTrainingSession<MLActionClassifier>.Metadata, &lazy protocol witness table cache variable for type MLTrainingSession<MLActionClassifier>.Metadata and conformance MLTrainingSession<A>.Metadata);
}

{
  return specialized MLTrainingSession.save()(&demangling cache variable for type metadata for MLTrainingSession<MLHandActionClassifier>.Metadata, &lazy protocol witness table cache variable for type MLTrainingSession<MLHandActionClassifier>.Metadata and conformance MLTrainingSession<A>.Metadata);
}

{
  return specialized MLTrainingSession.save()(&demangling cache variable for type metadata for MLTrainingSession<MLRandomForestClassifier>.Metadata, &lazy protocol witness table cache variable for type MLTrainingSession<MLRandomForestClassifier>.Metadata and conformance MLTrainingSession<A>.Metadata);
}

{
  return specialized MLTrainingSession.save()(&demangling cache variable for type metadata for MLTrainingSession<MLBoostedTreeRegressor>.Metadata, &lazy protocol witness table cache variable for type MLTrainingSession<MLBoostedTreeRegressor>.Metadata and conformance MLTrainingSession<A>.Metadata);
}

{
  return specialized MLTrainingSession.save()(&demangling cache variable for type metadata for MLTrainingSession<MLObjectDetector>.Metadata, &lazy protocol witness table cache variable for type MLTrainingSession<MLObjectDetector>.Metadata and conformance MLTrainingSession<A>.Metadata);
}

{
  return specialized MLTrainingSession.save()(&demangling cache variable for type metadata for MLTrainingSession<MLDecisionTreeClassifier>.Metadata, &lazy protocol witness table cache variable for type MLTrainingSession<MLDecisionTreeClassifier>.Metadata and conformance MLTrainingSession<A>.Metadata);
}

{
  return specialized MLTrainingSession.save()(&demangling cache variable for type metadata for MLTrainingSession<MLSoundClassifier>.Metadata, &lazy protocol witness table cache variable for type MLTrainingSession<MLSoundClassifier>.Metadata and conformance MLTrainingSession<A>.Metadata);
}

{
  return specialized MLTrainingSession.save()(&demangling cache variable for type metadata for MLTrainingSession<MLSoundClassifier.DataSource>.Metadata, &lazy protocol witness table cache variable for type MLTrainingSession<MLSoundClassifier.DataSource>.Metadata and conformance MLTrainingSession<A>.Metadata);
}

{
  return specialized MLTrainingSession.save()(&demangling cache variable for type metadata for MLTrainingSession<MLBoostedTreeClassifier>.Metadata, &lazy protocol witness table cache variable for type MLTrainingSession<MLBoostedTreeClassifier>.Metadata and conformance MLTrainingSession<A>.Metadata);
}

{
  return specialized MLTrainingSession.save()(&demangling cache variable for type metadata for MLTrainingSession<MLLinearRegressor>.Metadata, &lazy protocol witness table cache variable for type MLTrainingSession<MLLinearRegressor>.Metadata and conformance MLTrainingSession<A>.Metadata);
}

{
  return specialized MLTrainingSession.save()(&demangling cache variable for type metadata for MLTrainingSession<MLImageClassifier>.Metadata, &lazy protocol witness table cache variable for type MLTrainingSession<MLImageClassifier>.Metadata and conformance MLTrainingSession<A>.Metadata);
}

uint64_t specialized MLTrainingSession.save()(uint64_t *a1, uint64_t *a2)
{
  uint64_t v54 = a2;
  uint64_t v59 = v2;
  uint64_t v51 = a1;
  uint64_t v53 = __swift_instantiateConcreteTypeFromMangledName(a1);
  int64_t v4 = *(void *)(*(void *)(v53 - 8) + 64);
  uint64_t v5 = alloca(v4);
  int64_t v6 = alloca(v4);
  uint64_t v52 = &v48;
  uint64_t v60 = type metadata accessor for CodingUserInfoKey(0);
  uint64_t v56 = *(void *)(v60 - 8);
  int64_t v7 = *(void *)(v56 + 64);
  int64_t v8 = alloca(v7);
  int64_t v9 = alloca(v7);
  uint64_t v55 = &v48;
  int64_t v10 = *(void *)(*(void *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for URL?)
                              - 8)
                  + 64);
  uint64_t v11 = alloca(v10);
  int64_t v12 = alloca(v10);
  int64_t v13 = *(void *)(*(void *)(type metadata accessor for MLTrainingSessionParameters(0) - 8) + 64);
  uint64_t v14 = alloca(v13);
  uint64_t v15 = alloca(v13);
  uint64_t v16 = type metadata accessor for URL(0);
  uint64_t v58 = *(void *)(v16 - 8);
  int64_t v17 = *(void *)(v58 + 64);
  char v18 = alloca(v17);
  char v19 = alloca(v17);
  uint64_t v62 = &v48;
  NSString v20 = alloca(v17);
  unsigned __int8 v21 = alloca(v17);
  uint64_t v61 = &v48;
  uint64_t v57 = v3;
  outlined init with copy of MLTrainingSessionParameters(v3 + direct field offset for MLTrainingSession.parameters, (uint64_t)&v48, type metadata accessor for MLTrainingSessionParameters);
  outlined init with take of DataFrame?((uint64_t)&v48, (uint64_t)&v48, &demangling cache variable for type metadata for URL?);
  if (__swift_getEnumTagSinglePayload((uint64_t)&v48, 1, v16) == 1) {
    return outlined destroy of Either<LogisticRegressionClassifier<Float, String>, FullyConnectedNetworkClassifier<Float, String>>((uint64_t)&v48, &demangling cache variable for type metadata for URL?);
  }
  uint64_t v23 = v58;
  (*(void (**)(uint64_t *, uint64_t *, uint64_t))(v58 + 32))(v61, &v48, v16);
  URL.appendingPathComponent(_:)(0x696C702E6174656DLL, 0xEA00000000007473);
  uint64_t v24 = type metadata accessor for PropertyListEncoder(0);
  swift_allocObject(v24, *(unsigned int *)(v24 + 48), *(unsigned __int16 *)(v24 + 52));
  uint64_t v63 = PropertyListEncoder.init()();
  if (one-time initialization token for sessionDirectory != -1) {
    swift_once(&one-time initialization token for sessionDirectory, one-time initialization function for sessionDirectory);
  }
  uint64_t v25 = v60;
  uint64_t v26 = __swift_project_value_buffer(v60, (uint64_t)static CodingUserInfoKey.sessionDirectory);
  uint64_t v27 = (uint64_t)v55;
  (*(void (**)(uint64_t *, uint64_t, uint64_t))(v56 + 16))(v55, v26, v25);
  v50[3] = v16;
  boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1(v50);
  uint64_t v60 = v16;
  (*(void (**)(void *, uint64_t *, uint64_t))(v23 + 16))(boxed_opaque_existential_1, v61, v16);
  uint64_t v29 = (void (*)(unsigned char *, void))dispatch thunk of PropertyListEncoder.userInfo.modify(v49);
  specialized Dictionary.subscript.setter((uint64_t)v50, v27);
  v29(v49, 0);
  uint64_t v30 = v57 + *(void *)(*(void *)v57 + 112);
  swift_beginAccess(v30, v50, 0, 0);
  uint64_t v31 = v30;
  uint64_t v32 = (uint64_t)v52;
  uint64_t v33 = v51;
  outlined init with copy of Either<LogisticRegressionClassifier<Float, String>, FullyConnectedNetworkClassifier<Float, String>>(v31, (uint64_t)v52, v51);
  uint64_t v34 = lazy protocol witness table accessor for type FullyConnectedNetworkClassifier<Float, String> and conformance FullyConnectedNetworkClassifier<A, B>(v54, v33, (uint64_t)&protocol conformance descriptor for MLTrainingSession<A>.Metadata);
  uint64_t v35 = v59;
  uint64_t v36 = dispatch thunk of PropertyListEncoder.encode<A>(_:)(v32, v53, v34);
  if (v35)
  {
    swift_release();
    outlined destroy of Either<LogisticRegressionClassifier<Float, String>, FullyConnectedNetworkClassifier<Float, String>>(v32, v33);
  }
  else
  {
    uint64_t v38 = v32;
    os_log_type_t v39 = v33;
    uint64_t v40 = v36;
    unint64_t v41 = v37;
    outlined destroy of Either<LogisticRegressionClassifier<Float, String>, FullyConnectedNetworkClassifier<Float, String>>(v38, v39);
    Data.write(to:options:)(v62, 0, v40, v41);
    uint64_t v59 = 0;
    uint64_t v45 = *(void *)(v57 + direct field offset for MLTrainingSession.delegate + 24);
    uint64_t v46 = *(void *)(v57 + direct field offset for MLTrainingSession.delegate + 32);
    __swift_project_boxed_opaque_existential_0Tm((void *)(v57 + direct field offset for MLTrainingSession.delegate), v45);
    uint64_t v47 = v59;
    (*(void (**)(uint64_t *, uint64_t))(*(void *)(v46 + 8) + 8))(v61, v45);
    if (!v47)
    {
      outlined consume of Data._Representation(v40, v41);
      swift_release();
      uint64_t v42 = *(void (**)(uint64_t *, uint64_t))(v58 + 8);
      id v43 = v62;
      goto LABEL_9;
    }
    outlined consume of Data._Representation(v40, v41);
    swift_release();
  }
  uint64_t v42 = *(void (**)(uint64_t *, uint64_t))(v58 + 8);
  id v43 = v62;
LABEL_9:
  uint64_t v44 = v60;
  v42(v43, v60);
  return ((uint64_t (*)(uint64_t *, uint64_t))v42)(v61, v44);
}

uint64_t specialized closure #1 in blockAwait<A>(_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  v7[21] = a7;
  v7[20] = a6;
  v7[19] = a5;
  v7[18] = a4;
  return swift_task_switch(specialized closure #1 in blockAwait<A>(_:), 0, 0);
}

{
  void *v7;

  v7[21] = a7;
  v7[20] = a6;
  v7[19] = a5;
  v7[18] = a4;
  return swift_task_switch(specialized closure #1 in blockAwait<A>(_:), 0, 0);
}

{
  void *v7;

  v7[21] = a7;
  v7[20] = a6;
  v7[19] = a5;
  v7[18] = a4;
  return swift_task_switch(specialized closure #1 in blockAwait<A>(_:), 0, 0);
}

{
  void *v7;

  v7[21] = a7;
  v7[20] = a6;
  v7[19] = a5;
  v7[18] = a4;
  return swift_task_switch(specialized closure #1 in blockAwait<A>(_:), 0, 0);
}

{
  void *v7;

  v7[21] = a7;
  v7[20] = a6;
  v7[19] = a5;
  v7[18] = a4;
  return swift_task_switch(specialized closure #1 in blockAwait<A>(_:), 0, 0);
}

{
  void *v7;

  v7[21] = a7;
  v7[20] = a6;
  v7[19] = a5;
  v7[18] = a4;
  return swift_task_switch(specialized closure #1 in blockAwait<A>(_:), 0, 0);
}

{
  void *v7;

  v7[21] = a7;
  v7[20] = a6;
  v7[19] = a5;
  v7[18] = a4;
  return swift_task_switch(specialized closure #1 in blockAwait<A>(_:), 0, 0);
}

{
  void *v7;

  v7[21] = a7;
  v7[20] = a6;
  v7[19] = a5;
  v7[18] = a4;
  return swift_task_switch(specialized closure #1 in blockAwait<A>(_:), 0, 0);
}

{
  void *v7;

  v7[21] = a7;
  v7[20] = a6;
  v7[19] = a5;
  v7[18] = a4;
  return swift_task_switch(specialized closure #1 in blockAwait<A>(_:), 0, 0);
}

{
  void *v7;

  v7[21] = a7;
  v7[20] = a6;
  v7[19] = a5;
  v7[18] = a4;
  return swift_task_switch(specialized closure #1 in blockAwait<A>(_:), 0, 0);
}

{
  void *v7;

  v7[21] = a7;
  v7[20] = a6;
  v7[19] = a5;
  v7[18] = a4;
  return swift_task_switch(specialized closure #1 in blockAwait<A>(_:), 0, 0);
}

{
  void *v7;

  v7[21] = a7;
  v7[20] = a6;
  v7[19] = a5;
  v7[18] = a4;
  return swift_task_switch(specialized closure #1 in blockAwait<A>(_:), 0, 0);
}

{
  void *v7;

  v7[21] = a7;
  v7[20] = a6;
  v7[19] = a5;
  v7[18] = a4;
  return swift_task_switch(specialized closure #1 in blockAwait<A>(_:), 0, 0);
}

{
  void *v7;

  v7[21] = a7;
  v7[20] = a6;
  v7[19] = a5;
  v7[18] = a4;
  return swift_task_switch(specialized closure #1 in blockAwait<A>(_:), 0, 0);
}

{
  void *v7;

  v7[21] = a7;
  v7[20] = a6;
  v7[19] = a5;
  v7[18] = a4;
  return swift_task_switch(specialized closure #1 in blockAwait<A>(_:), 0, 0);
}

{
  void *v7;

  v7[21] = a7;
  v7[20] = a6;
  v7[19] = a5;
  v7[18] = a4;
  return swift_task_switch(specialized closure #1 in blockAwait<A>(_:), 0, 0);
}

{
  void *v7;

  v7[21] = a7;
  v7[20] = a6;
  v7[19] = a5;
  v7[18] = a4;
  return swift_task_switch(specialized closure #1 in blockAwait<A>(_:), 0, 0);
}

{
  void *v7;

  v7[21] = a7;
  v7[20] = a6;
  v7[19] = a5;
  v7[18] = a4;
  return swift_task_switch(specialized closure #1 in blockAwait<A>(_:), 0, 0);
}

{
  void *v7;

  v7[21] = a7;
  v7[20] = a6;
  v7[19] = a5;
  v7[18] = a4;
  return swift_task_switch(specialized closure #1 in blockAwait<A>(_:), 0, 0);
}

uint64_t specialized closure #1 in blockAwait<A>(_:)()
{
  uint64_t v1 = (int *)v0[19];
  v0[5] = type metadata accessor for MLActivityClassifier(0);
  boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1(v0 + 2);
  uint64_t v3 = (uint64_t (*)(void *))((char *)v1 + *v1);
  int64_t v4 = (void *)swift_task_alloc(v1[1]);
  v0[22] = v4;
  *int64_t v4 = v0;
  v4[1] = specialized closure #1 in blockAwait<A>(_:);
  return v3(boxed_opaque_existential_1);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t (*v3)();

  uint64_t v2 = *(void *)(*(void *)v1 + 176);
  *(void *)(*(void *)v1 + 184) = v0;
  swift_task_dealloc(v2);
  if (v0) {
    uint64_t v3 = specialized closure #1 in blockAwait<A>(_:);
  }
  else {
    uint64_t v3 = specialized closure #1 in blockAwait<A>(_:);
  }
  return swift_task_switch(v3, 0, 0);
}

{
  void *v0;
  int *v1;
  void *boxed_opaque_existential_1;
  uint64_t (*v3)(void *);
  void *v4;

  uint64_t v1 = (int *)v0[19];
  v0[5] = type metadata accessor for URL(0);
  boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1(v0 + 2);
  uint64_t v3 = (uint64_t (*)(void *))((char *)v1 + *v1);
  int64_t v4 = (void *)swift_task_alloc(v1[1]);
  v0[22] = v4;
  *int64_t v4 = v0;
  v4[1] = specialized closure #1 in blockAwait<A>(_:);
  return v3(boxed_opaque_existential_1);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t (*v3)(void);

  uint64_t v2 = *(void *)(*(void *)v1 + 176);
  *(void *)(*(void *)v1 + 184) = v0;
  swift_task_dealloc(v2);
  if (v0) {
    uint64_t v3 = specialized closure #1 in blockAwait<A>(_:);
  }
  else {
    uint64_t v3 = specialized closure #1 in blockAwait<A>(_:);
  }
  return swift_task_switch(v3, 0, 0);
}

{
  uint64_t v0;
  uint64_t v1;

  uint64_t v1 = *(void *)(v0 + 144);
  *(unsigned char *)(v0 + 48) = 0;
  v1 += 16;
  swift_beginAccess(v1, v0 + 120, 33, 0);
  outlined assign with take of MLTrainingSession<MLImageClassifier>.Metadata(v0 + 16, v1, &demangling cache variable for type metadata for Result<Any, Error>?);
  swift_endAccess(v0 + 120);
  OS_dispatch_semaphore.signal()();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  uint64_t v1 = *(void *)(v0 + 144);
  uint64_t v2 = *(void *)(v0 + 184);
  __swift_deallocate_boxed_opaque_existential_0((void *)(v0 + 16));
  *(void *)(v0 + 56) = v2;
  *(unsigned char *)(v0 + 88) = 1;
  v1 += 16;
  swift_beginAccess(v1, v0 + 96, 33, 0);
  outlined assign with take of MLTrainingSession<MLImageClassifier>.Metadata(v0 + 56, v1, &demangling cache variable for type metadata for Result<Any, Error>?);
  swift_endAccess(v0 + 96);
  OS_dispatch_semaphore.signal()();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

{
  void *v0;
  int *v1;
  void *boxed_opaque_existential_1;
  uint64_t (*v3)(void *);
  void *v4;

  uint64_t v1 = (int *)v0[19];
  v0[5] = type metadata accessor for MLActivityClassifier.Model(0);
  boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1(v0 + 2);
  uint64_t v3 = (uint64_t (*)(void *))((char *)v1 + *v1);
  int64_t v4 = (void *)swift_task_alloc(v1[1]);
  v0[22] = v4;
  *int64_t v4 = v0;
  v4[1] = specialized closure #1 in blockAwait<A>(_:);
  return v3(boxed_opaque_existential_1);
}

{
  void *v0;
  int *v1;
  void *boxed_opaque_existential_1;
  uint64_t (*v3)(void *);
  void *v4;

  uint64_t v1 = (int *)v0[19];
  v0[5] = type metadata accessor for MLHandPoseClassifier(0);
  boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1(v0 + 2);
  uint64_t v3 = (uint64_t (*)(void *))((char *)v1 + *v1);
  int64_t v4 = (void *)swift_task_alloc(v1[1]);
  v0[22] = v4;
  *int64_t v4 = v0;
  v4[1] = specialized closure #1 in blockAwait<A>(_:);
  return v3(boxed_opaque_existential_1);
}

{
  void *v0;
  int *v1;
  uint64_t (*v2)(void *);
  void *v3;

  uint64_t v1 = (int *)v0[19];
  v0[5] = type metadata accessor for OS_os_log(0, &lazy cache variable for type metadata for MLModel, MLModel_ptr);
  uint64_t v2 = (uint64_t (*)(void *))((char *)v1 + *v1);
  uint64_t v3 = (void *)swift_task_alloc(v1[1]);
  v0[22] = v3;
  *uint64_t v3 = v0;
  v3[1] = specialized closure #1 in blockAwait<A>(_:);
  return v2(v0 + 2);
}

{
  void *v0;
  int *v1;
  void *boxed_opaque_existential_1;
  uint64_t (*v3)(void *);
  void *v4;

  uint64_t v1 = (int *)v0[19];
  v0[5] = type metadata accessor for MLClassifierMetrics(0);
  boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1(v0 + 2);
  uint64_t v3 = (uint64_t (*)(void *))((char *)v1 + *v1);
  int64_t v4 = (void *)swift_task_alloc(v1[1]);
  v0[22] = v4;
  *int64_t v4 = v0;
  v4[1] = specialized closure #1 in blockAwait<A>(_:);
  return v3(boxed_opaque_existential_1);
}

{
  void *v0;
  int *v1;
  uint64_t (*v2)(void *);
  void *v3;

  uint64_t v1 = (int *)v0[19];
  v0[5] = &type metadata for MLRegressorMetrics;
  uint64_t v2 = (uint64_t (*)(void *))((char *)v1 + *v1);
  uint64_t v3 = (void *)swift_task_alloc(v1[1]);
  v0[22] = v3;
  *uint64_t v3 = v0;
  v3[1] = specialized closure #1 in blockAwait<A>(_:);
  return v2(v0 + 2);
}

{
  void *v0;
  int *v1;
  void *boxed_opaque_existential_1;
  uint64_t (*v3)(void *);
  void *v4;

  uint64_t v1 = (int *)v0[19];
  v0[5] = type metadata accessor for MLStyleTransfer(0);
  boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1(v0 + 2);
  uint64_t v3 = (uint64_t (*)(void *))((char *)v1 + *v1);
  int64_t v4 = (void *)swift_task_alloc(v1[1]);
  v0[22] = v4;
  *int64_t v4 = v0;
  v4[1] = specialized closure #1 in blockAwait<A>(_:);
  return v3(boxed_opaque_existential_1);
}

{
  void *v0;
  int *v1;
  uint64_t (*v2)(void *);
  void *v3;

  uint64_t v1 = (int *)v0[19];
  v0[5] = type metadata accessor for _Model();
  uint64_t v2 = (uint64_t (*)(void *))((char *)v1 + *v1);
  uint64_t v3 = (void *)swift_task_alloc(v1[1]);
  v0[22] = v3;
  *uint64_t v3 = v0;
  v3[1] = specialized closure #1 in blockAwait<A>(_:);
  return v2(v0 + 2);
}

{
  void *v0;
  int *v1;
  void *boxed_opaque_existential_1;
  uint64_t (*v3)(void *);
  void *v4;

  uint64_t v1 = (int *)v0[19];
  v0[5] = type metadata accessor for AnyColumn(0);
  boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1(v0 + 2);
  uint64_t v3 = (uint64_t (*)(void *))((char *)v1 + *v1);
  int64_t v4 = (void *)swift_task_alloc(v1[1]);
  v0[22] = v4;
  *int64_t v4 = v0;
  v4[1] = specialized closure #1 in blockAwait<A>(_:);
  return v3(boxed_opaque_existential_1);
}

{
  void *v0;
  int *v1;
  void *boxed_opaque_existential_1;
  uint64_t (*v3)(void *);
  void *v4;

  uint64_t v1 = (int *)v0[19];
  v0[5] = type metadata accessor for MLImageClassifier(0);
  boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1(v0 + 2);
  uint64_t v3 = (uint64_t (*)(void *))((char *)v1 + *v1);
  int64_t v4 = (void *)swift_task_alloc(v1[1]);
  v0[22] = v4;
  *int64_t v4 = v0;
  v4[1] = specialized closure #1 in blockAwait<A>(_:);
  return v3(boxed_opaque_existential_1);
}

{
  void *v0;
  int *v1;
  uint64_t (*v2)(void *);
  void *v3;

  uint64_t v1 = (int *)v0[19];
  v0[5] = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ([AnnotatedFeature<CIImage, String>], [AnnotatedFeature<CIImage, String>]));
  uint64_t v2 = (uint64_t (*)(void *))((char *)v1 + *v1);
  uint64_t v3 = (void *)swift_task_alloc(v1[1]);
  v0[22] = v3;
  *uint64_t v3 = v0;
  v3[1] = specialized closure #1 in blockAwait<A>(_:);
  return v2(v0 + 2);
}

{
  void *v0;
  int *v1;
  uint64_t (*v2)(void *);
  void *v3;

  uint64_t v1 = (int *)v0[19];
  v0[5] = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [(predicted: String, label: String)]);
  uint64_t v2 = (uint64_t (*)(void *))((char *)v1 + *v1);
  uint64_t v3 = (void *)swift_task_alloc(v1[1]);
  v0[22] = v3;
  *uint64_t v3 = v0;
  v3[1] = specialized closure #1 in blockAwait<A>(_:);
  return v2(v0 + 2);
}

{
  void *v0;
  int *v1;
  void *boxed_opaque_existential_1;
  uint64_t (*v3)(void *);
  void *v4;

  uint64_t v1 = (int *)v0[19];
  v0[5] = type metadata accessor for MLActionClassifier(0);
  boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1(v0 + 2);
  uint64_t v3 = (uint64_t (*)(void *))((char *)v1 + *v1);
  int64_t v4 = (void *)swift_task_alloc(v1[1]);
  v0[22] = v4;
  *int64_t v4 = v0;
  v4[1] = specialized closure #1 in blockAwait<A>(_:);
  return v3(boxed_opaque_existential_1);
}

{
  void *v0;
  int *v1;
  void *boxed_opaque_existential_1;
  uint64_t (*v3)(void *);
  void *v4;

  uint64_t v1 = (int *)v0[19];
  v0[5] = type metadata accessor for MLHandActionClassifier(0);
  boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1(v0 + 2);
  uint64_t v3 = (uint64_t (*)(void *))((char *)v1 + *v1);
  int64_t v4 = (void *)swift_task_alloc(v1[1]);
  v0[22] = v4;
  *int64_t v4 = v0;
  v4[1] = specialized closure #1 in blockAwait<A>(_:);
  return v3(boxed_opaque_existential_1);
}

{
  void *v0;
  int *v1;
  void *boxed_opaque_existential_1;
  uint64_t (*v3)(void *);
  void *v4;

  uint64_t v1 = (int *)v0[19];
  v0[5] = type metadata accessor for MLSoundClassifier(0);
  boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1(v0 + 2);
  uint64_t v3 = (uint64_t (*)(void *))((char *)v1 + *v1);
  int64_t v4 = (void *)swift_task_alloc(v1[1]);
  v0[22] = v4;
  *int64_t v4 = v0;
  v4[1] = specialized closure #1 in blockAwait<A>(_:);
  return v3(boxed_opaque_existential_1);
}

{
  void *v0;
  int *v1;
  uint64_t (*v2)(void *);
  void *v3;

  uint64_t v1 = (int *)v0[19];
  v0[5] = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [AnnotatedPrediction<ClassificationDistribution<String>, String>]);
  uint64_t v2 = (uint64_t (*)(void *))((char *)v1 + *v1);
  uint64_t v3 = (void *)swift_task_alloc(v1[1]);
  v0[22] = v3;
  *uint64_t v3 = v0;
  v3[1] = specialized closure #1 in blockAwait<A>(_:);
  return v2(v0 + 2);
}

{
  void *v0;
  int *v1;
  void *boxed_opaque_existential_1;
  uint64_t (*v3)(void *);
  void *v4;

  uint64_t v1 = (int *)v0[19];
  v0[5] = type metadata accessor for MLSoundClassifier.Model(0);
  boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1(v0 + 2);
  uint64_t v3 = (uint64_t (*)(void *))((char *)v1 + *v1);
  int64_t v4 = (void *)swift_task_alloc(v1[1]);
  v0[22] = v4;
  *int64_t v4 = v0;
  v4[1] = specialized closure #1 in blockAwait<A>(_:);
  return v3(boxed_opaque_existential_1);
}

{
  void *v0;
  int *v1;
  uint64_t (*v2)(void *);
  void *v3;

  uint64_t v1 = (int *)v0[19];
  v0[5] = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [ClassificationDistribution<String>]);
  uint64_t v2 = (uint64_t (*)(void *))((char *)v1 + *v1);
  uint64_t v3 = (void *)swift_task_alloc(v1[1]);
  v0[22] = v3;
  *uint64_t v3 = v0;
  v3[1] = specialized closure #1 in blockAwait<A>(_:);
  return v2(v0 + 2);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t (*v3)();

  uint64_t v2 = *(void *)(*(void *)v1 + 176);
  *(void *)(*(void *)v1 + 184) = v0;
  swift_task_dealloc(v2);
  if (v0) {
    uint64_t v3 = specialized closure #1 in blockAwait<A>(_:);
  }
  else {
    uint64_t v3 = specialized closure #1 in blockAwait<A>(_:);
  }
  return swift_task_switch(v3, 0, 0);
}

{
  return specialized closure #1 in blockAwait<A>(_:)();
}

{
  return specialized closure #1 in blockAwait<A>(_:)();
}

{
  return specialized closure #1 in blockAwait<A>(_:)();
}

void *specialized static Array._allocateUninitialized(_:)(uint64_t a1)
{
  return specialized static Array._allocateUninitialized(_:)(a1);
}

{
  return specialized static Array._allocateUninitialized(_:)(a1);
}

{
  return specialized static Array._allocateUninitialized(_:)(a1);
}

{
  return specialized static Array._allocateUninitialized(_:)(a1);
}

{
  return specialized static Array._allocateUninitialized(_:)(a1, &demangling cache variable for type metadata for Int?);
}

{
  return specialized static Array._allocateUninitialized(_:)(a1);
}

{
  void *v1;

  if (a1 < 0)
  {
    _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, "Can't construct Array with count < 0", 36, 2, "Swift/Array.swift", 17, 2, 936, 1);
    BUG();
  }
  if (a1)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AnnotatedFeature<URL, String>);
    uint64_t v1 = (void *)static Array._allocateBufferUninitialized(minimumCapacity:)(a1);
    v1[2] = a1;
  }
  else
  {
    uint64_t v1 = _swiftEmptyArrayStorage;
  }
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AnnotatedFeature<URL, String>);
  return v1;
}

{
  return specialized static Array._allocateUninitialized(_:)(a1, &demangling cache variable for type metadata for Heap<Interaction>);
}

{
  return specialized static Array._allocateUninitialized(_:)(a1);
}

{
  return specialized static Array._allocateUninitialized(_:)(a1, &demangling cache variable for type metadata for (Int, Double));
}

{
  return specialized static Array._allocateUninitialized(_:)(a1);
}

{
  void *result;

  if (a1 < 0)
  {
    _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, "Can't construct Array with count < 0", 36, 2, "Swift/Array.swift", 17, 2, 936, 1);
    BUG();
  }
  if (!a1) {
    return &_swiftEmptyArrayStorage;
  }
  uint64_t result = (void *)static Array._allocateBufferUninitialized(minimumCapacity:)(a1);
  result[2] = a1;
  return result;
}

{
  return specialized static Array._allocateUninitialized(_:)(a1, &demangling cache variable for type metadata for (Int, Int));
}

uint64_t sub_13222()
{
  uint64_t v1 = (int *)type metadata accessor for MLActivityClassifier.DataSource.Columns(0);
  uint64_t v2 = *((void *)v1 - 1);
  uint64_t v29 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v3 = ~*(unsigned __int8 *)(v2 + 80) & (v29 + 16);
  uint64_t v4 = v3 + *(void *)(v2 + 64);
  uint64_t v31 = type metadata accessor for MLActivityClassifier.ModelParameters(0);
  uint64_t v5 = *(void *)(v31 - 8);
  uint64_t v33 = *(unsigned __int8 *)(v5 + 80);
  uint64_t v30 = *(void *)(v5 + 64);
  uint64_t v6 = v3 + v0;
  uint64_t v28 = v0;
  swift_bridgeObjectRelease(*(void *)(v0 + v3));
  uint64_t v7 = v3 + v0 + v1[5];
  uint64_t v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Column<String>);
  uint64_t v34 = *(void (**)(uint64_t, uint64_t))(*(void *)(v8 - 8) + 8);
  v34(v7, v8);
  uint64_t v32 = v1;
  uint64_t v9 = v6 + v1[6];
  if (!__swift_getEnumTagSinglePayload(v9, 1, v8)) {
    v34(v9, v8);
  }
  uint64_t v10 = v33 + v4;
  uint64_t v11 = v6 + v1[7];
  uint64_t v12 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Column<Double>);
  if (!__swift_getEnumTagSinglePayload(v11, 1, v12)) {
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v12 - 8) + 8))(v11, v12);
  }
  uint64_t v13 = ~v33 & v10;
  uint64_t v14 = v32[8] + v6;
  uint64_t v15 = v13;
  if (!__swift_getEnumTagSinglePayload(v14, 1, v12)) {
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v12 - 8) + 8))(v14, v12);
  }
  uint64_t v16 = (uint64_t *)(v28 + v13);
  char v17 = *(unsigned char *)(v28 + v15 + 8);
  if (v17 != -1) {
    outlined consume of Result<_DataTable, Error>(*v16, v17 & 1);
  }
  char v18 = (char *)v16 + *(int *)(v31 + 20);
  uint64_t v19 = type metadata accessor for MLActivityClassifier.ModelParameters.Validation(0);
  if (swift_getEnumCaseMultiPayload(v18, v19) == 1)
  {
    uint64_t v20 = type metadata accessor for MLActivityClassifier.DataSource(0);
    int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload(v18, v20);
    switch(EnumCaseMultiPayload)
    {
      case 2:
        uint64_t v22 = type metadata accessor for DataFrame(0);
        goto LABEL_15;
      case 1:
        uint64_t v23 = type metadata accessor for URL(0);
        (*(void (**)(char *, uint64_t))(*(void *)(v23 - 8) + 8))(v18, v23);
        uint64_t v24 = v15;
        uint64_t v25 = (int *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (at: URL, annotationFileName: String, timeStampColumn: String, labelStartTimeColumn: String, labelEndTimeColumn: String));
        swift_bridgeObjectRelease(*(void *)&v18[v25[12] + 8]);
        swift_bridgeObjectRelease(*(void *)&v18[v25[16] + 8]);
        swift_bridgeObjectRelease(*(void *)&v18[v25[20] + 8]);
        uint64_t v26 = v25[24];
        uint64_t v15 = v24;
        swift_bridgeObjectRelease(*(void *)&v18[v26 + 8]);
        return swift_deallocObject(v28, v30 + v15, v33 | v29 | 7);
      case 0:
        uint64_t v22 = type metadata accessor for URL(0);
LABEL_15:
        (*(void (**)(char *, uint64_t))(*(void *)(v22 - 8) + 8))(v18, v22);
        break;
    }
  }
  return swift_deallocObject(v28, v30 + v15, v33 | v29 | 7);
}

uint64_t partial apply for closure #1 in MLActivityClassifier.init(trainingData:featureColumns:labelColumn:recordingFileColumn:parameters:)(uint64_t a1)
{
  uint64_t v3 = *(void *)(type metadata accessor for MLActivityClassifier.DataSource.Columns(0) - 8);
  uint64_t v4 = ~*(unsigned __int8 *)(v3 + 80) & (*(unsigned __int8 *)(v3 + 80) + 16);
  uint64_t v5 = v4 + *(void *)(v3 + 64);
  uint64_t v6 = *(unsigned __int8 *)(*(void *)(type metadata accessor for MLActivityClassifier.ModelParameters(0) - 8) + 80);
  uint64_t v7 = (void *)swift_task_alloc(dword_3A3AF4);
  *(void *)(v2 + 16) = v7;
  *uint64_t v7 = v2;
  v7[1] = partial apply for closure #1 in MLActivityClassifier.init(trainingData:featureColumns:labelColumn:recordingFileColumn:parameters:);
  return closure #1 in MLActivityClassifier.init(trainingData:featureColumns:labelColumn:recordingFileColumn:parameters:)(a1, v1 + v4, v1 + ((v6 + v5) & ~v6));
}

{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;

  uint64_t v3 = type metadata accessor for MLActivityClassifier.Configuration(0);
  uint64_t v4 = v1
     + (~*(unsigned __int8 *)(*(void *)(v3 - 8) + 80) & (*(unsigned __int8 *)(*(void *)(v3 - 8)
                                                                                              + 80)
                                                           + 16));
  uint64_t v5 = (void *)swift_task_alloc(dword_3A3B0C);
  *(void *)(v2 + 16) = v5;
  *uint64_t v5 = v2;
  v5[1] = partial apply for closure #1 in MLActivityClassifier.init(trainingData:featureColumns:labelColumn:recordingFileColumn:parameters:);
  return closure #1 in MLActivityClassifier.init(trainingData:featureColumns:labelColumn:recordingFileColumn:parameters:)(a1, v4);
}

uint64_t partial apply for closure #1 in MLActivityClassifier.init(trainingData:featureColumns:labelColumn:recordingFileColumn:parameters:)()
{
  uint64_t v2 = *v0;
  swift_task_dealloc(*(void *)(*v0 + 16));
  return (*(uint64_t (**)(void))(v2 + 8))();
}

{
  return partial apply for closure #1 in MLActivityClassifier.init(trainingData:featureColumns:labelColumn:recordingFileColumn:parameters:)();
}

uint64_t sub_13551()
{
  uint64_t v1 = type metadata accessor for MLActivityClassifier.Configuration(0);
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = ~*(unsigned __int8 *)(v2 + 80) & (v3 + 16);
  uint64_t v11 = *(void *)(v2 + 64);
  uint64_t v5 = v4 + v0;
  swift_bridgeObjectRelease(*(void *)(v0 + v4 + 40));
  swift_bridgeObjectRelease(*(void *)(v0 + v4 + 56));
  uint64_t v10 = v0;
  swift_bridgeObjectRelease(*(void *)(v0 + v4 + 72));
  uint64_t v12 = v1;
  uint64_t v6 = v4 + v0 + *(int *)(v1 + 44);
  uint64_t v7 = type metadata accessor for DataFrame(0);
  if (!__swift_getEnumTagSinglePayload(v6, 1, v7)) {
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v7 - 8) + 8))(v6, v7);
  }
  uint64_t v8 = *(int *)(v12 + 48) + v5;
  if (!__swift_getEnumTagSinglePayload(v8, 1, v7)) {
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v7 - 8) + 8))(v8, v7);
  }
  return swift_deallocObject(v10, v11 + v4, v3 | 7);
}

id sub_136B4()
{
  uint64_t v1 = v0;
  id result = MLActivityClassifier.model.getter();
  *uint64_t v1 = result;
  return result;
}

void sub_136CE(id *a1)
{
}

void *initializeBufferWithCopyOfBuffer for MLActivityClassifier(_OWORD *a1, char *a2, int *a3)
{
  uint64_t v3 = a1;
  int v4 = *(_DWORD *)(*((void *)a3 - 1) + 80);
  if ((v4 & 0x20000) != 0)
  {
    uint64_t v28 = *(void *)a2;
    *uint64_t v3 = *(void *)a2;
    uint64_t v3 = (void *)(v28 + ((v4 + 16) & ~v4));
    swift_retain();
  }
  else
  {
    *a1 = *(_OWORD *)a2;
    uint64_t v5 = *(int *)(type metadata accessor for MLActivityClassifier.InputBlock(0) + 24);
    uint64_t v6 = type metadata accessor for LearningPhase(0);
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v6 - 8) + 16))((char *)a1 + v5, &a2[v5], v6);
    uint64_t v7 = (int *)type metadata accessor for MLActivityClassifier.Model(0);
    uint64_t v8 = v7[5];
    uint64_t v95 = type metadata accessor for Conv2D(0);
    uint64_t v87 = *(void (**)(char *, char *, uint64_t))(*(void *)(v95 - 8) + 16);
    v87((char *)a1 + v8, &a2[v8], v95);
    uint64_t v9 = v7[6];
    uint64_t v90 = type metadata accessor for ReLU(0);
    uint64_t v81 = *(void (**)(char *, char *, uint64_t))(*(void *)(v90 - 8) + 16);
    v81((char *)a1 + v9, &a2[v9], v90);
    uint64_t v10 = v7[7];
    __dstb = (void *)type metadata accessor for Dropout(0);
    uint64_t v84 = *(void (**)(char *, char *, void *))(*(__dstb - 1) + 16);
    v84((char *)a1 + v10, &a2[v10], __dstb);
    uint64_t v11 = v7[8];
    uint64_t v12 = (char *)a1 + v11;
    uint64_t v13 = &a2[v11];
    *(_OWORD *)((char *)a1 + v11) = *(_OWORD *)&a2[v11];
    *((unsigned char *)a1 + v11 + 16) = a2[v11 + 16];
    *((unsigned char *)a1 + v11 + 17) = a2[v11 + 17];
    uint64_t v14 = *(int *)(type metadata accessor for MLActivityClassifier.LSTMBlock(0) + 32);
    uint64_t v15 = &v12[v14];
    uint64_t v16 = &v13[v14];
    uint64_t v17 = type metadata accessor for LSTM(0);
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v17 - 8) + 16))(v15, v16, v17);
    v87((char *)a1 + v7[9], &a2[v7[9]], v95);
    uint64_t v18 = v7[10];
    uint64_t v19 = type metadata accessor for BatchNorm(0);
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v19 - 8) + 16))((char *)a1 + v18, &a2[v18], v19);
    v81((char *)a1 + v7[11], &a2[v7[11]], v90);
    v84((char *)a1 + v7[12], &a2[v7[12]], __dstb);
    v87((char *)a1 + v7[13], &a2[v7[13]], v95);
    *(void *)((char *)a1 + v7[14]) = *(void *)&a2[v7[14]];
    uint64_t v20 = v7[15];
    uint64_t v85 = *(void *)&a2[v20];
    *(void *)((char *)a1 + v20) = v85;
    uint64_t v96 = v7;
    uint64_t v21 = v7[16];
    uint64_t v22 = (char *)a1 + v21;
    uint64_t v23 = &a2[v21];
    *(void *)((char *)a1 + v21) = *(void *)&a2[v21];
    *(void *)((char *)a1 + v21 + 8) = *(void *)&a2[v21 + 8];
    *((unsigned char *)a1 + v21 + 16) = a2[v21 + 16];
    *(_OWORD *)((char *)a1 + v21 + 24) = *(_OWORD *)&a2[v21 + 24];
    uint64_t v77 = *(void *)&a2[v21 + 40];
    *(void *)((char *)a1 + v21 + 40) = v77;
    *(void *)((char *)a1 + v21 + 48) = *(void *)&a2[v21 + 48];
    uint64_t v79 = *(void *)&a2[v21 + 56];
    *(void *)((char *)a1 + v21 + 56) = v79;
    *(void *)((char *)a1 + v21 + 64) = *(void *)&a2[v21 + 64];
    uint64_t v74 = *(void *)&a2[v21 + 72];
    *(void *)((char *)a1 + v21 + 72) = v74;
    uint64_t v82 = type metadata accessor for MLActivityClassifier.Configuration(0);
    uint64_t v24 = *(int *)(v82 + 44);
    uint64_t v88 = v22;
    __dst = &v22[v24];
    int64_t v91 = v23;
    uint64_t v25 = &v23[v24];
    uint64_t v26 = type metadata accessor for DataFrame(0);
    swift_bridgeObjectRetain(v85);
    swift_bridgeObjectRetain(v77);
    swift_bridgeObjectRetain(v79);
    swift_bridgeObjectRetain(v74);
    if (__swift_getEnumTagSinglePayload((uint64_t)v25, 1, v26))
    {
      uint64_t v27 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for DataFrame?);
      memcpy(__dst, v25, *(void *)(*(void *)(v27 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v26 - 8) + 16))(__dst, v25, v26);
      __swift_storeEnumTagSinglePayload((uint64_t)__dst, 0, 1, v26);
    }
    uint64_t v29 = *(int *)(v82 + 48);
    uint64_t v30 = &v88[v29];
    uint64_t v31 = &v23[v29];
    uint64_t v75 = v26;
    if (__swift_getEnumTagSinglePayload((uint64_t)&v91[v29], 1, v26))
    {
      uint64_t v32 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for DataFrame?);
      memcpy(v30, v31, *(void *)(*(void *)(v32 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v26 - 8) + 16))(v30, v31, v26);
      __swift_storeEnumTagSinglePayload((uint64_t)v30, 0, 1, v26);
    }
    uint64_t v33 = v96[17];
    uint64_t v34 = *(void **)&a2[v33];
    *(void *)((char *)v3 + v33) = v34;
    uint64_t v35 = v96[18];
    uint64_t v36 = (void *)((char *)v3 + v35);
    unint64_t v37 = &a2[v35];
    uint64_t v38 = *(void *)&a2[v35];
    v34;
    if (v38)
    {
      void *v36 = v38;
      v36[1] = *((void *)v37 + 1);
      uint64_t v39 = *((void *)v37 + 2);
      v36[2] = v39;
      swift_retain();
      swift_retain();
      swift_bridgeObjectRetain(v39);
    }
    else
    {
      v36[2] = *((void *)v37 + 2);
      *(_OWORD *)uint64_t v36 = *(_OWORD *)v37;
    }
    uint64_t v40 = a3[5];
    unint64_t v41 = *(void **)&a2[v40];
    *(void *)((char *)v3 + v40) = v41;
    uint64_t v42 = a3[6];
    id v43 = (char *)v3 + v42;
    uint64_t v44 = &a2[v42];
    char v45 = a2[v42 + 8];
    v41;
    if (v45 == -1)
    {
      v43[8] = v44[8];
      *(void *)id v43 = *(void *)v44;
    }
    else
    {
      uint64_t v46 = *(void *)v44;
      outlined copy of Result<_DataTable, Error>(*(void *)v44, v45);
      *(void *)id v43 = v46;
      v43[8] = v45 & 1;
    }
    uint64_t v83 = (int *)type metadata accessor for MLActivityClassifier.ModelParameters(0);
    uint64_t v47 = v83[5];
    uint64_t v89 = v43;
    uint64_t v48 = &v43[v47];
    uint64_t v97 = v44;
    uint64_t v49 = &v44[v47];
    uint64_t v50 = type metadata accessor for MLActivityClassifier.ModelParameters.Validation(0);
    if (swift_getEnumCaseMultiPayload(v49, v50) == 1)
    {
      __dsta = (void *)type metadata accessor for MLActivityClassifier.DataSource(0);
      unsigned int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload(v49, __dsta);
      uint64_t v52 = a2;
      unsigned int v86 = EnumCaseMultiPayload;
      if (EnumCaseMultiPayload == 2)
      {
        (*(void (**)(char *, char *))(*(void *)(v75 - 8) + 16))(v48, v49);
      }
      else if (EnumCaseMultiPayload == 1)
      {
        uint64_t v53 = type metadata accessor for URL(0);
        (*(void (**)(char *, char *, uint64_t))(*(void *)(v53 - 8) + 16))(v48, v49, v53);
        uint64_t v54 = (int *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (at: URL, annotationFileName: String, timeStampColumn: String, labelStartTimeColumn: String, labelEndTimeColumn: String));
        uint64_t v55 = v54[12];
        *(void *)&v48[v55] = *(void *)&v49[v55];
        uint64_t v56 = *(void *)&v49[v55 + 8];
        *(void *)&v48[v55 + 8] = v56;
        uint64_t v57 = v54[16];
        *(void *)&v48[v57] = *(void *)&v49[v57];
        uint64_t v78 = *(void *)&v49[v57 + 8];
        *(void *)&v48[v57 + 8] = v78;
        uint64_t v58 = v54[20];
        *(void *)&v48[v58] = *(void *)&v49[v58];
        uint64_t v80 = *(void *)&v49[v58 + 8];
        *(void *)&v48[v58 + 8] = v80;
        uint64_t v59 = v54[24];
        *(void *)&v48[v59] = *(void *)&v49[v59];
        uint64_t v60 = *(void *)&v49[v59 + 8];
        *(void *)&v48[v59 + 8] = v60;
        swift_bridgeObjectRetain(v56);
        swift_bridgeObjectRetain(v78);
        swift_bridgeObjectRetain(v80);
        swift_bridgeObjectRetain(v60);
      }
      else
      {
        uint64_t v61 = type metadata accessor for URL(0);
        (*(void (**)(char *, char *, uint64_t))(*(void *)(v61 - 8) + 16))(v48, v49, v61);
      }
      swift_storeEnumTagMultiPayload(v48, __dsta, v86);
      swift_storeEnumTagMultiPayload(v48, v50, 1);
    }
    else
    {
      memcpy(v48, v49, *(void *)(*(void *)(v50 - 8) + 64));
      uint64_t v52 = a2;
    }
    uint64_t v62 = v83[6];
    v89[v62 + 8] = v97[v62 + 8];
    *(void *)&v89[v62] = *(void *)&v97[v62];
    uint64_t v63 = v83[7];
    *(void *)&v89[v63] = *(void *)&v97[v63];
    v89[v63 + 8] = v97[v63 + 8];
    uint64_t v64 = v83[8];
    *(void *)&v89[v64] = *(void *)&v97[v64];
    v89[v64 + 8] = v97[v64 + 8];
    uint64_t v65 = a3[7];
    *(void *)((char *)v3 + v65) = *(void *)((char *)v52 + v65);
    uint64_t v66 = *(void *)((char *)v52 + v65 + 8);
    *(void *)((char *)v3 + v65 + 8) = v66;
    uint64_t v67 = a3[8];
    *(void *)((char *)v3 + v67) = *(void *)((char *)v52 + v67);
    uint64_t v68 = *(void *)((char *)v52 + v67 + 8);
    *(void *)((char *)v3 + v67 + 8) = v68;
    uint64_t v69 = a3[9];
    uint64_t v70 = *(void *)((char *)v52 + v69);
    *(void *)((char *)v3 + v69) = v70;
    uint64_t v71 = a3[10];
    *(void *)((char *)v3 + v71) = *(void *)((char *)v52 + v71);
    uint64_t v72 = *(void *)((char *)v52 + v71 + 8);
    *(void *)((char *)v3 + v71 + 8) = v72;
    swift_bridgeObjectRetain(v66);
    swift_bridgeObjectRetain(v68);
    swift_bridgeObjectRetain(v70);
    swift_bridgeObjectRetain(v72);
  }
  return v3;
}

uint64_t destroy for MLActivityClassifier(uint64_t a1, int *a2)
{
  uint64_t v2 = a1 + *(int *)(type metadata accessor for MLActivityClassifier.InputBlock(0) + 24);
  uint64_t v3 = type metadata accessor for LearningPhase(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(v2, v3);
  int v4 = (int *)type metadata accessor for MLActivityClassifier.Model(0);
  uint64_t v5 = a1 + v4[5];
  uint64_t v32 = type metadata accessor for Conv2D(0);
  uint64_t v33 = *(void (**)(uint64_t, uint64_t))(*(void *)(v32 - 8) + 8);
  v33(v5, v32);
  uint64_t v6 = a1 + v4[6];
  uint64_t v34 = type metadata accessor for ReLU(0);
  uint64_t v29 = *(void (**)(uint64_t, uint64_t))(*(void *)(v34 - 8) + 8);
  v29(v6, v34);
  uint64_t v7 = a1 + v4[7];
  uint64_t v30 = type metadata accessor for Dropout(0);
  uint64_t v31 = *(void (**)(uint64_t, uint64_t))(*(void *)(v30 - 8) + 8);
  v31(v7, v30);
  uint64_t v8 = a1 + v4[8];
  uint64_t v9 = v8 + *(int *)(type metadata accessor for MLActivityClassifier.LSTMBlock(0) + 32);
  uint64_t v10 = type metadata accessor for LSTM(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v10 - 8) + 8))(v9, v10);
  v33(a1 + v4[9], v32);
  uint64_t v11 = a1 + v4[10];
  uint64_t v12 = type metadata accessor for BatchNorm(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v12 - 8) + 8))(v11, v12);
  v29(a1 + v4[11], v34);
  v31(a1 + v4[12], v30);
  v33(a1 + v4[13], v32);
  swift_bridgeObjectRelease(*(void *)(a1 + v4[15]));
  uint64_t v13 = (void *)(a1 + v4[16]);
  swift_bridgeObjectRelease(v13[5]);
  swift_bridgeObjectRelease(v13[7]);
  swift_bridgeObjectRelease(v13[9]);
  uint64_t v35 = type metadata accessor for MLActivityClassifier.Configuration(0);
  uint64_t v14 = (uint64_t)v13 + *(int *)(v35 + 44);
  uint64_t v15 = type metadata accessor for DataFrame(0);
  if (!__swift_getEnumTagSinglePayload(v14, 1, v15)) {
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v15 - 8) + 8))(v14, v15);
  }
  uint64_t v16 = (uint64_t)v13 + *(int *)(v35 + 48);
  if (!__swift_getEnumTagSinglePayload(v16, 1, v15)) {
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v15 - 8) + 8))(v16, v15);
  }
  uint64_t v17 = v15;

  uint64_t v18 = v4[18];
  if (*(void *)(a1 + v18))
  {
    swift_release();
    swift_release();
    swift_bridgeObjectRelease(*(void *)(a1 + v18 + 16));
  }

  uint64_t v19 = a1 + a2[6];
  char v20 = *(unsigned char *)(v19 + 8);
  if (v20 != -1) {
    outlined consume of Result<_DataTable, Error>(*(void *)v19, v20 & 1);
  }
  uint64_t v21 = *(int *)(type metadata accessor for MLActivityClassifier.ModelParameters(0) + 20) + v19;
  uint64_t v22 = type metadata accessor for MLActivityClassifier.ModelParameters.Validation(0);
  if (swift_getEnumCaseMultiPayload(v21, v22) == 1)
  {
    uint64_t v23 = type metadata accessor for MLActivityClassifier.DataSource(0);
    int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload(v21, v23);
    switch(EnumCaseMultiPayload)
    {
      case 2:
        (*(void (**)(uint64_t, uint64_t))(*(void *)(v17 - 8) + 8))(v21, v17);
        break;
      case 1:
        uint64_t v26 = type metadata accessor for URL(0);
        (*(void (**)(uint64_t, uint64_t))(*(void *)(v26 - 8) + 8))(v21, v26);
        uint64_t v27 = (int *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (at: URL, annotationFileName: String, timeStampColumn: String, labelStartTimeColumn: String, labelEndTimeColumn: String));
        swift_bridgeObjectRelease(*(void *)(v21 + v27[12] + 8));
        swift_bridgeObjectRelease(*(void *)(v21 + v27[16] + 8));
        swift_bridgeObjectRelease(*(void *)(v21 + v27[20] + 8));
        swift_bridgeObjectRelease(*(void *)(v21 + v27[24] + 8));
        break;
      case 0:
        uint64_t v25 = type metadata accessor for URL(0);
        (*(void (**)(uint64_t, uint64_t))(*(void *)(v25 - 8) + 8))(v21, v25);
        break;
    }
  }
  swift_bridgeObjectRelease(*(void *)(a1 + a2[7] + 8));
  swift_bridgeObjectRelease(*(void *)(a1 + a2[8] + 8));
  swift_bridgeObjectRelease(*(void *)(a1 + a2[9]));
  return swift_bridgeObjectRelease(*(void *)(a1 + a2[10] + 8));
}

char *initializeWithCopy for MLActivityClassifier(char *a1, char *a2, int *a3)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  uint64_t v3 = *(int *)(type metadata accessor for MLActivityClassifier.InputBlock(0) + 24);
  uint64_t v4 = type metadata accessor for LearningPhase(0);
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v4 - 8) + 16))(&a1[v3], &a2[v3], v4);
  uint64_t v5 = (int *)type metadata accessor for MLActivityClassifier.Model(0);
  uint64_t v6 = v5[5];
  uint64_t v88 = type metadata accessor for Conv2D(0);
  uint64_t v93 = *(void (**)(char *, char *, uint64_t))(*(void *)(v88 - 8) + 16);
  v93(&a1[v6], &a2[v6], v88);
  uint64_t v7 = v5[6];
  uint64_t v79 = type metadata accessor for ReLU(0);
  uint64_t v82 = *(void (**)(char *, char *, uint64_t))(*(void *)(v79 - 8) + 16);
  v82(&a1[v7], &a2[v7], v79);
  uint64_t v8 = v5[7];
  uint64_t v85 = type metadata accessor for Dropout(0);
  __dsta = *(void (**)(char *, char *, uint64_t))(*(void *)(v85 - 8) + 16);
  __dsta(&a1[v8], &a2[v8], v85);
  uint64_t v9 = v5[8];
  uint64_t v10 = &a1[v9];
  uint64_t v11 = &a2[v9];
  *(_OWORD *)&a1[v9] = *(_OWORD *)&a2[v9];
  a1[v9 + 16] = a2[v9 + 16];
  a1[v9 + 17] = a2[v9 + 17];
  uint64_t v12 = *(int *)(type metadata accessor for MLActivityClassifier.LSTMBlock(0) + 32);
  uint64_t v13 = &v10[v12];
  uint64_t v14 = &v11[v12];
  uint64_t v15 = type metadata accessor for LSTM(0);
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v15 - 8) + 16))(v13, v14, v15);
  v93(&a1[v5[9]], &a2[v5[9]], v88);
  uint64_t v16 = v5[10];
  uint64_t v17 = type metadata accessor for BatchNorm(0);
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v17 - 8) + 16))(&a1[v16], &a2[v16], v17);
  v82(&a1[v5[11]], &a2[v5[11]], v79);
  __dsta(&a1[v5[12]], &a2[v5[12]], v85);
  v93(&a1[v5[13]], &a2[v5[13]], v88);
  *(void *)&a1[v5[14]] = *(void *)&a2[v5[14]];
  uint64_t v18 = v5[15];
  uint64_t v77 = *(void *)&a2[v18];
  *(void *)&a1[v18] = v77;
  uint64_t v19 = v5[16];
  char v20 = &a1[v19];
  uint64_t v21 = &a2[v19];
  *(void *)&a1[v19] = *(void *)&a2[v19];
  *(void *)&a1[v19 + 8] = *(void *)&a2[v19 + 8];
  a1[v19 + 16] = a2[v19 + 16];
  *(_OWORD *)&a1[v19 + 24] = *(_OWORD *)&a2[v19 + 24];
  uint64_t v22 = *(void *)&a2[v19 + 40];
  *(void *)&a1[v19 + 40] = v22;
  *(void *)&a1[v19 + 48] = *(void *)&a2[v19 + 48];
  uint64_t v73 = *(void *)&a2[v19 + 56];
  *(void *)&a1[v19 + 56] = v73;
  *(void *)&a1[v19 + 64] = *(void *)&a2[v19 + 64];
  uint64_t v74 = *(void *)&a2[v19 + 72];
  *(void *)&a1[v19 + 72] = v74;
  uint64_t v86 = type metadata accessor for MLActivityClassifier.Configuration(0);
  uint64_t v23 = *(int *)(v86 + 44);
  uint64_t v80 = v20;
  __dst = &v20[v23];
  uint64_t v83 = v21;
  uint64_t v24 = &v21[v23];
  uint64_t v25 = type metadata accessor for DataFrame(0);
  swift_bridgeObjectRetain(v77);
  swift_bridgeObjectRetain(v22);
  swift_bridgeObjectRetain(v73);
  swift_bridgeObjectRetain(v74);
  if (__swift_getEnumTagSinglePayload((uint64_t)v24, 1, v25))
  {
    uint64_t v26 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for DataFrame?);
    memcpy(__dst, v24, *(void *)(*(void *)(v26 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v25 - 8) + 16))(__dst, v24, v25);
    __swift_storeEnumTagSinglePayload((uint64_t)__dst, 0, 1, v25);
  }
  uint64_t v27 = *(int *)(v86 + 48);
  uint64_t v28 = &v80[v27];
  uint64_t v29 = &v83[v27];
  uint64_t v75 = v25;
  if (__swift_getEnumTagSinglePayload((uint64_t)&v83[v27], 1, v25))
  {
    uint64_t v30 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for DataFrame?);
    memcpy(v28, v29, *(void *)(*(void *)(v30 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v25 - 8) + 16))(v28, v29, v25);
    __swift_storeEnumTagSinglePayload((uint64_t)v28, 0, 1, v25);
  }
  uint64_t v31 = v5[17];
  uint64_t v32 = *(void **)&a2[v31];
  *(void *)&a1[v31] = v32;
  uint64_t v33 = v5[18];
  uint64_t v34 = &a1[v33];
  uint64_t v35 = &a2[v33];
  uint64_t v36 = *(void *)&a2[v33];
  v32;
  if (v36)
  {
    *(void *)uint64_t v34 = v36;
    *((void *)v34 + 1) = *((void *)v35 + 1);
    uint64_t v37 = *((void *)v35 + 2);
    *((void *)v34 + 2) = v37;
    swift_retain();
    swift_retain();
    swift_bridgeObjectRetain(v37);
  }
  else
  {
    *((void *)v34 + 2) = *((void *)v35 + 2);
    *(_OWORD *)uint64_t v34 = *(_OWORD *)v35;
  }
  uint64_t v38 = a3[5];
  uint64_t v39 = *(void **)&a2[v38];
  *(void *)&a1[v38] = v39;
  uint64_t v40 = a3[6];
  unint64_t v41 = &a1[v40];
  uint64_t v42 = &a2[v40];
  char v43 = a2[v40 + 8];
  v39;
  if (v43 == -1)
  {
    v41[8] = v42[8];
    *(void *)unint64_t v41 = *(void *)v42;
  }
  else
  {
    uint64_t v44 = *(void *)v42;
    outlined copy of Result<_DataTable, Error>(*(void *)v42, v43);
    *(void *)unint64_t v41 = v44;
    v41[8] = v43 & 1;
  }
  uint64_t v81 = (int *)type metadata accessor for MLActivityClassifier.ModelParameters(0);
  uint64_t v45 = v81[5];
  uint64_t v46 = &v41[v45];
  unint64_t v94 = v42;
  uint64_t v47 = &v42[v45];
  uint64_t v48 = type metadata accessor for MLActivityClassifier.ModelParameters.Validation(0);
  if (swift_getEnumCaseMultiPayload(v47, v48) == 1)
  {
    uint64_t v84 = v48;
    uint64_t v49 = v46;
    uint64_t v50 = type metadata accessor for MLActivityClassifier.DataSource(0);
    unsigned int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload(v47, v50);
    unsigned int v87 = EnumCaseMultiPayload;
    if (EnumCaseMultiPayload == 2)
    {
      (*(void (**)(char *, char *))(*(void *)(v75 - 8) + 16))(v49, v47);
    }
    else if (EnumCaseMultiPayload == 1)
    {
      uint64_t v52 = type metadata accessor for URL(0);
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v52 - 8) + 16))(v49, v47, v52);
      uint64_t v53 = (int *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (at: URL, annotationFileName: String, timeStampColumn: String, labelStartTimeColumn: String, labelEndTimeColumn: String));
      uint64_t v54 = v53[12];
      *(void *)&v49[v54] = *(void *)&v47[v54];
      uint64_t v55 = *(void *)&v47[v54 + 8];
      *(void *)&v49[v54 + 8] = v55;
      uint64_t v56 = v53[16];
      *(void *)&v49[v56] = *(void *)&v47[v56];
      __dstb = *(void **)&v47[v56 + 8];
      *(void *)&v49[v56 + 8] = __dstb;
      uint64_t v57 = v53[20];
      *(void *)&v49[v57] = *(void *)&v47[v57];
      uint64_t v78 = *(void *)&v47[v57 + 8];
      *(void *)&v49[v57 + 8] = v78;
      uint64_t v58 = v53[24];
      *(void *)&v49[v58] = *(void *)&v47[v58];
      uint64_t v59 = *(void *)&v47[v58 + 8];
      *(void *)&v49[v58 + 8] = v59;
      swift_bridgeObjectRetain(v55);
      swift_bridgeObjectRetain((_BYTE)__dstb);
      swift_bridgeObjectRetain(v78);
      swift_bridgeObjectRetain(v59);
    }
    else
    {
      uint64_t v60 = type metadata accessor for URL(0);
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v60 - 8) + 16))(v49, v47, v60);
    }
    swift_storeEnumTagMultiPayload(v49, v50, v87);
    swift_storeEnumTagMultiPayload(v49, v84, 1);
  }
  else
  {
    memcpy(v46, v47, *(void *)(*(void *)(v48 - 8) + 64));
  }
  uint64_t v61 = v81[6];
  v41[v61 + 8] = v94[v61 + 8];
  *(void *)&v41[v61] = *(void *)&v94[v61];
  uint64_t v62 = v81[7];
  *(void *)&v41[v62] = *(void *)&v94[v62];
  v41[v62 + 8] = v94[v62 + 8];
  uint64_t v63 = v81[8];
  *(void *)&v41[v63] = *(void *)&v94[v63];
  v41[v63 + 8] = v94[v63 + 8];
  uint64_t v64 = a3[7];
  *(void *)&a1[v64] = *(void *)&a2[v64];
  uint64_t v65 = *(void *)&a2[v64 + 8];
  *(void *)&a1[v64 + 8] = v65;
  uint64_t v66 = a3[8];
  *(void *)&a1[v66] = *(void *)&a2[v66];
  uint64_t v67 = *(void *)&a2[v66 + 8];
  *(void *)&a1[v66 + 8] = v67;
  uint64_t v68 = a3[9];
  uint64_t v69 = *(void *)&a2[v68];
  *(void *)&a1[v68] = v69;
  uint64_t v70 = a3[10];
  *(void *)&a1[v70] = *(void *)&a2[v70];
  uint64_t v71 = *(void *)&a2[v70 + 8];
  *(void *)&a1[v70 + 8] = v71;
  swift_bridgeObjectRetain(v65);
  swift_bridgeObjectRetain(v67);
  swift_bridgeObjectRetain(v69);
  swift_bridgeObjectRetain(v71);
  return a1;
}

void *assignWithCopy for MLActivityClassifier(char *a1, void *a2, int *a3)
{
  uint64_t v3 = a2;
  *(void *)a1 = *a2;
  *((void *)a1 + 1) = a2[1];
  uint64_t v5 = *(int *)(type metadata accessor for MLActivityClassifier.InputBlock(0) + 24);
  uint64_t v6 = type metadata accessor for LearningPhase(0);
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v6 - 8) + 24))(&a1[v5], (char *)a2 + v5, v6);
  uint64_t v7 = type metadata accessor for MLActivityClassifier.Model(0);
  uint64_t v8 = *(int *)(v7 + 20);
  uint64_t v9 = (int *)v7;
  uint64_t v112 = type metadata accessor for Conv2D(0);
  __srcb = *(void (**)(char *, char *, uint64_t))(*(void *)(v112 - 8) + 24);
  __srcb(&a1[v8], (char *)a2 + v8, v112);
  uint64_t v10 = v9[6];
  v117 = (void *)type metadata accessor for ReLU(0);
  v106 = *(void (**)(char *, char *, void *))(*(v117 - 1) + 24);
  v106(&a1[v10], (char *)a2 + v10, v117);
  uint64_t v11 = v9;
  uint64_t v12 = v9[7];
  uint64_t v109 = type metadata accessor for Dropout(0);
  __dstb = *(void (**)(char *, char *, uint64_t))(*(void *)(v109 - 8) + 24);
  __dstb(&a1[v12], (char *)a2 + v12, v109);
  uint64_t v13 = v11[8];
  uint64_t v14 = &a1[v13];
  uint64_t v15 = (char *)a2 + v13;
  *(void *)&a1[v13] = *(void *)((char *)a2 + v13);
  *(void *)&a1[v13 + 8] = *(void *)((char *)a2 + v13 + 8);
  a1[v13 + 16] = *((unsigned char *)a2 + v13 + 16);
  a1[v13 + 17] = *((unsigned char *)a2 + v13 + 17);
  uint64_t v16 = *(int *)(type metadata accessor for MLActivityClassifier.LSTMBlock(0) + 32);
  uint64_t v17 = &v14[v16];
  uint64_t v18 = &v15[v16];
  uint64_t v19 = type metadata accessor for LSTM(0);
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v19 - 8) + 24))(v17, v18, v19);
  __srcb(&a1[v11[9]], (char *)a2 + v11[9], v112);
  uint64_t v20 = v11[10];
  uint64_t v21 = type metadata accessor for BatchNorm(0);
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v21 - 8) + 24))(&a1[v20], (char *)a2 + v20, v21);
  v106(&a1[v11[11]], (char *)a2 + v11[11], v117);
  __dstb(&a1[v11[12]], (char *)a2 + v11[12], v109);
  __srcb(&a1[v11[13]], (char *)a2 + v11[13], v112);
  *(void *)&a1[v11[14]] = *(void *)((char *)a2 + v11[14]);
  uint64_t v22 = v11[15];
  uint64_t v23 = v11;
  uint64_t v24 = *(void *)((char *)a2 + v22);
  uint64_t v25 = *(void *)&a1[v22];
  *(void *)&a1[v22] = v24;
  swift_bridgeObjectRetain(v24);
  swift_bridgeObjectRelease(v25);
  uint64_t v107 = v23;
  uint64_t v26 = v23[16];
  __src = (char *)a2 + v26;
  *(void *)&a1[v26] = *(void *)((char *)a2 + v26);
  *(void *)&a1[v26 + 8] = *(void *)((char *)a2 + v26 + 8);
  a1[v26 + 16] = *((unsigned char *)a2 + v26 + 16);
  *(void *)&a1[v26 + 24] = *(void *)((char *)a2 + v26 + 24);
  *(void *)&a1[v26 + 32] = *(void *)((char *)a2 + v26 + 32);
  uint64_t v27 = *(void *)((char *)a2 + v26 + 40);
  uint64_t v28 = *(void *)&a1[v26 + 40];
  *(void *)&a1[v26 + 40] = v27;
  swift_bridgeObjectRetain(v27);
  swift_bridgeObjectRelease(v28);
  *(void *)&a1[v26 + 48] = *(void *)((char *)a2 + v26 + 48);
  uint64_t v29 = *(void *)((char *)a2 + v26 + 56);
  uint64_t v30 = *(void *)&a1[v26 + 56];
  *(void *)&a1[v26 + 56] = v29;
  swift_bridgeObjectRetain(v29);
  swift_bridgeObjectRelease(v30);
  *(void *)&a1[v26 + 64] = *(void *)((char *)a2 + v26 + 64);
  uint64_t v31 = *(void *)((char *)a2 + v26 + 72);
  uint64_t v32 = *(void *)&a1[v26 + 72];
  BOOL v113 = a1;
  *(void *)&a1[v26 + 72] = v31;
  swift_bridgeObjectRetain(v31);
  swift_bridgeObjectRelease(v32);
  uint64_t v110 = type metadata accessor for MLActivityClassifier.Configuration(0);
  uint64_t v33 = *(int *)(v110 + 44);
  uint64_t v118 = &a1[v26];
  uint64_t v34 = (uint64_t)&a1[v26 + v33];
  uint64_t v35 = &__src[v33];
  uint64_t v36 = type metadata accessor for DataFrame(0);
  __dst = (void *)v34;
  LODWORD(v34) = __swift_getEnumTagSinglePayload(v34, 1, v36);
  int EnumTagSinglePayload = __swift_getEnumTagSinglePayload((uint64_t)v35, 1, v36);
  if (v34)
  {
    if (EnumTagSinglePayload)
    {
      size_t v38 = *(void *)(*(void *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for DataFrame?)
                                  - 8)
                      + 64);
      uint64_t v39 = __dst;
LABEL_6:
      memcpy(v39, v35, v38);
      goto LABEL_9;
    }
    (*(void (**)(void *, char *, uint64_t))(*(void *)(v36 - 8) + 16))(__dst, v35, v36);
    __swift_storeEnumTagSinglePayload((uint64_t)__dst, 0, 1, v36);
  }
  else
  {
    uint64_t v40 = *(void *)(v36 - 8);
    if (EnumTagSinglePayload)
    {
      (*(void (**)(void *, uint64_t))(v40 + 8))(__dst, v36);
      size_t v38 = *(void *)(*(void *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for DataFrame?)
                                  - 8)
                      + 64);
      uint64_t v39 = __dst;
      goto LABEL_6;
    }
    (*(void (**)(void *, char *, uint64_t))(v40 + 24))(__dst, v35, v36);
  }
LABEL_9:
  uint64_t v41 = *(int *)(v110 + 48);
  uint64_t v42 = &__src[v41];
  unint64_t v119 = &v118[v41];
  int v43 = __swift_getEnumTagSinglePayload((uint64_t)v119, 1, v36);
  int v44 = __swift_getEnumTagSinglePayload((uint64_t)v42, 1, v36);
  uint64_t v104 = v36;
  if (v43)
  {
    if (v44)
    {
      size_t v45 = *(void *)(*(void *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for DataFrame?)
                                  - 8)
                      + 64);
      uint64_t v46 = v119;
LABEL_14:
      memcpy(v46, v42, v45);
      goto LABEL_17;
    }
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v36 - 8) + 16))(v119, v42, v36);
    __swift_storeEnumTagSinglePayload((uint64_t)v119, 0, 1, v36);
  }
  else
  {
    uint64_t v47 = *(void *)(v36 - 8);
    if (v44)
    {
      (*(void (**)(char *, uint64_t))(v47 + 8))(v119, v36);
      size_t v45 = *(void *)(*(void *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for DataFrame?)
                                  - 8)
                      + 64);
      uint64_t v46 = v119;
      goto LABEL_14;
    }
    (*(void (**)(char *, char *, uint64_t))(v47 + 24))(v119, v42, v36);
  }
LABEL_17:
  uint64_t v48 = v107[17];
  uint64_t v49 = *(void **)((char *)v113 + v48);
  uint64_t v50 = *(void **)((char *)a2 + v48);
  *(void *)((char *)v113 + v48) = v50;
  v50;

  uint64_t v51 = v107[18];
  uint64_t v52 = (void *)((char *)v113 + v51);
  uint64_t v53 = (char *)a2 + v51;
  uint64_t v54 = *(void *)((char *)a2 + v51);
  if (*(void *)((char *)v113 + v51))
  {
    if (v54)
    {
      void *v52 = v54;
      swift_retain();
      swift_release();
      v52[1] = *((void *)v53 + 1);
      swift_retain();
      swift_release();
      uint64_t v55 = *((void *)v53 + 2);
      uint64_t v56 = v52[2];
      v52[2] = v55;
      swift_bridgeObjectRetain(v55);
      swift_bridgeObjectRelease(v56);
    }
    else
    {
      outlined destroy of ClassificationMetricsContainer((uint64_t)v52);
      *(_OWORD *)uint64_t v52 = *(_OWORD *)v53;
      v52[2] = *((void *)v53 + 2);
    }
  }
  else if (v54)
  {
    void *v52 = v54;
    v52[1] = *((void *)v53 + 1);
    uint64_t v57 = *((void *)v53 + 2);
    v52[2] = v57;
    swift_retain();
    swift_retain();
    swift_bridgeObjectRetain(v57);
  }
  else
  {
    v52[2] = *((void *)v53 + 2);
    *(_OWORD *)uint64_t v52 = *(_OWORD *)v53;
  }
  uint64_t v58 = a3[5];
  uint64_t v59 = *(void **)((char *)a2 + v58);
  uint64_t v60 = *(void **)((char *)v113 + v58);
  *(void *)((char *)v113 + v58) = v59;
  v59;

  uint64_t v61 = a3[6];
  uint64_t v62 = (char *)v113 + v61;
  uint64_t v63 = (char *)a2 + v61;
  char v64 = *((unsigned char *)a2 + v61 + 8);
  if (*((unsigned char *)v113 + v61 + 8) == 0xFF)
  {
    uint64_t v65 = (char *)a2 + v61;
    if (v64 == -1)
    {
      v62[8] = v63[8];
      *(void *)uint64_t v62 = *(void *)v63;
    }
    else
    {
      uint64_t v69 = *(void *)v63;
      outlined copy of Result<_DataTable, Error>(v69, v64);
      *(void *)uint64_t v62 = v69;
      v62[8] = v64 & 1;
    }
  }
  else if (v64 == -1)
  {
    outlined destroy of MLDataTable((uint64_t)v113 + v61);
    uint64_t v65 = v63;
    *(void *)uint64_t v62 = *(void *)v63;
    v62[8] = v63[8];
  }
  else
  {
    uint64_t v65 = (char *)a2 + v61;
    uint64_t v66 = *(void *)v63;
    outlined copy of Result<_DataTable, Error>(v66, v64);
    uint64_t v67 = *(void *)v62;
    *(void *)uint64_t v62 = v66;
    int v68 = *((_DWORD *)v62 + 2);
    v62[8] = v64 & 1;
    outlined consume of Result<_DataTable, Error>(v67, v68);
  }
  uint64_t v70 = (int *)type metadata accessor for MLActivityClassifier.ModelParameters(0);
  if (v113 != v3)
  {
    char v120 = v3;
    __srca = v70;
    uint64_t v71 = v70[5];
    uint64_t v72 = &v62[v71];
    uint64_t v73 = &v65[v71];
    outlined destroy of MLActivityClassifier.ModelParameters((uint64_t)v72, type metadata accessor for MLActivityClassifier.ModelParameters.Validation);
    uint64_t v74 = type metadata accessor for MLActivityClassifier.ModelParameters.Validation(0);
    if (swift_getEnumCaseMultiPayload(v73, v74) == 1)
    {
      uint64_t v108 = v74;
      uint64_t v75 = v72;
      uint64_t v111 = type metadata accessor for MLActivityClassifier.DataSource(0);
      unsigned int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload(v73, v111);
      unsigned int __dsta = EnumCaseMultiPayload;
      if (EnumCaseMultiPayload == 2)
      {
        (*(void (**)(char *, char *))(*(void *)(v104 - 8) + 16))(v72, v73);
        uint64_t v3 = v120;
      }
      else
      {
        uint64_t v3 = v120;
        if (EnumCaseMultiPayload == 1)
        {
          uint64_t v77 = type metadata accessor for URL(0);
          (*(void (**)(char *, char *, uint64_t))(*(void *)(v77 - 8) + 16))(v75, v73, v77);
          uint64_t v78 = (int *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (at: URL, annotationFileName: String, timeStampColumn: String, labelStartTimeColumn: String, labelEndTimeColumn: String));
          uint64_t v79 = v78[12];
          *(void *)&v75[v79] = *(void *)&v73[v79];
          uint64_t v80 = *(void *)&v73[v79 + 8];
          *(void *)&v75[v79 + 8] = v80;
          uint64_t v81 = v78[16];
          *(void *)&v75[v81] = *(void *)&v73[v81];
          uint64_t v105 = *(void *)&v73[v81 + 8];
          *(void *)&v75[v81 + 8] = v105;
          uint64_t v82 = v78[20];
          *(void *)&v75[v82] = *(void *)&v73[v82];
          uint64_t v102 = *(void *)&v73[v82 + 8];
          *(void *)&v75[v82 + 8] = v102;
          uint64_t v83 = v78[24];
          *(void *)&v75[v83] = *(void *)&v73[v83];
          uint64_t v84 = *(void *)&v73[v83 + 8];
          *(void *)&v75[v83 + 8] = v84;
          swift_bridgeObjectRetain(v80);
          swift_bridgeObjectRetain(v105);
          swift_bridgeObjectRetain(v102);
          swift_bridgeObjectRetain(v84);
        }
        else
        {
          uint64_t v85 = type metadata accessor for URL(0);
          (*(void (**)(char *, char *, uint64_t))(*(void *)(v85 - 8) + 16))(v75, v73, v85);
        }
      }
      swift_storeEnumTagMultiPayload(v75, v111, __dsta);
      swift_storeEnumTagMultiPayload(v75, v108, 1);
      uint64_t v70 = __srca;
    }
    else
    {
      memcpy(v72, v73, *(void *)(*(void *)(v74 - 8) + 64));
      uint64_t v70 = __srca;
      uint64_t v3 = v120;
    }
  }
  uint64_t v86 = v70[6];
  v62[v86 + 8] = v65[v86 + 8];
  *(void *)&v62[v86] = *(void *)&v65[v86];
  uint64_t v87 = v70[7];
  *(void *)&v62[v87] = *(void *)&v65[v87];
  v62[v87 + 8] = v65[v87 + 8];
  uint64_t v88 = v70[8];
  *(void *)&v62[v88] = *(void *)&v65[v88];
  v62[v88 + 8] = v65[v88 + 8];
  uint64_t v89 = a3[7];
  *(void *)((char *)v113 + v89) = *(void *)((char *)v3 + v89);
  uint64_t v90 = *(void *)((char *)v3 + v89 + 8);
  uint64_t v91 = *(void *)((char *)v113 + v89 + 8);
  *(void *)((char *)v113 + v89 + 8) = v90;
  swift_bridgeObjectRetain(v90);
  swift_bridgeObjectRelease(v91);
  uint64_t v92 = a3[8];
  *(void *)((char *)v113 + v92) = *(void *)((char *)v3 + v92);
  uint64_t v93 = *(void *)((char *)v3 + v92 + 8);
  uint64_t v94 = *(void *)((char *)v113 + v92 + 8);
  *(void *)((char *)v113 + v92 + 8) = v93;
  swift_bridgeObjectRetain(v93);
  swift_bridgeObjectRelease(v94);
  uint64_t v95 = a3[9];
  uint64_t v96 = *(void *)((char *)v3 + v95);
  uint64_t v97 = *(void *)((char *)v113 + v95);
  *(void *)((char *)v113 + v95) = v96;
  swift_bridgeObjectRetain(v96);
  swift_bridgeObjectRelease(v97);
  uint64_t v98 = a3[10];
  *(void *)((char *)v113 + v98) = *(void *)((char *)v3 + v98);
  uint64_t v99 = *(void *)((char *)v3 + v98 + 8);
  uint64_t v100 = *(void *)((char *)v113 + v98 + 8);
  *(void *)((char *)v113 + v98 + 8) = v99;
  swift_bridgeObjectRetain(v99);
  swift_bridgeObjectRelease(v100);
  return v113;
}

uint64_t outlined destroy of ClassificationMetricsContainer(uint64_t a1)
{
  return a1;
}

char *initializeWithTake for MLActivityClassifier(char *a1, char *a2, int *a3)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  uint64_t v4 = *(int *)(type metadata accessor for MLActivityClassifier.InputBlock(0) + 24);
  uint64_t v5 = type metadata accessor for LearningPhase(0);
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v5 - 8) + 32))(&a1[v4], &a2[v4], v5);
  uint64_t v6 = type metadata accessor for MLActivityClassifier.Model(0);
  uint64_t v7 = *(int *)(v6 + 20);
  uint64_t v67 = (void *)type metadata accessor for Conv2D(0);
  uint64_t v61 = *(void (**)(char *, char *, void *))(*(v67 - 1) + 32);
  v61(&a1[v7], &a2[v7], v67);
  uint64_t v8 = (int *)v6;
  uint64_t v9 = *(int *)(v6 + 24);
  uint64_t v55 = type metadata accessor for ReLU(0);
  uint64_t v58 = *(void (**)(char *, char *, uint64_t))(*(void *)(v55 - 8) + 32);
  v58(&a1[v9], &a2[v9], v55);
  uint64_t v10 = v8[7];
  __dstb = (void *)type metadata accessor for Dropout(0);
  uint64_t v53 = *(void (**)(char *, char *, void *))(*(__dstb - 1) + 32);
  v53(&a1[v10], &a2[v10], __dstb);
  uint64_t v11 = v8[8];
  uint64_t v12 = &a1[v11];
  uint64_t v13 = &a2[v11];
  *(_OWORD *)&a1[v11] = *(_OWORD *)&a2[v11];
  a1[v11 + 16] = a2[v11 + 16];
  a1[v11 + 17] = a2[v11 + 17];
  uint64_t v14 = *(int *)(type metadata accessor for MLActivityClassifier.LSTMBlock(0) + 32);
  uint64_t v15 = &v12[v14];
  uint64_t v16 = &v13[v14];
  uint64_t v17 = type metadata accessor for LSTM(0);
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v17 - 8) + 32))(v15, v16, v17);
  v61(&a1[v8[9]], &a2[v8[9]], v67);
  uint64_t v18 = v8[10];
  uint64_t v19 = type metadata accessor for BatchNorm(0);
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v19 - 8) + 32))(&a1[v18], &a2[v18], v19);
  v58(&a1[v8[11]], &a2[v8[11]], v55);
  v53(&a1[v8[12]], &a2[v8[12]], __dstb);
  v61(&a1[v8[13]], &a2[v8[13]], v67);
  *(void *)&a1[v8[14]] = *(void *)&a2[v8[14]];
  *(void *)&a1[v8[15]] = *(void *)&a2[v8[15]];
  uint64_t v62 = v8;
  uint64_t v20 = v8[16];
  uint64_t v21 = &a1[v20];
  uint64_t v22 = &a2[v20];
  *(void *)&a1[v20] = *(void *)&a2[v20];
  *(void *)&a1[v20 + 8] = *(void *)&a2[v20 + 8];
  a1[v20 + 16] = a2[v20 + 16];
  *(_OWORD *)&a1[v20 + 24] = *(_OWORD *)&a2[v20 + 24];
  *(void *)&a1[v20 + 40] = *(void *)&a2[v20 + 40];
  *(_OWORD *)&a1[v20 + 48] = *(_OWORD *)&a2[v20 + 48];
  *(_OWORD *)&a1[v20 + 64] = *(_OWORD *)&a2[v20 + 64];
  uint64_t v59 = type metadata accessor for MLActivityClassifier.Configuration(0);
  uint64_t v23 = *(int *)(v59 + 44);
  int v68 = v21;
  __dst = &v21[v23];
  uint64_t v56 = v22;
  uint64_t v24 = &v22[v23];
  uint64_t v25 = type metadata accessor for DataFrame(0);
  if (__swift_getEnumTagSinglePayload((uint64_t)v24, 1, v25))
  {
    uint64_t v26 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for DataFrame?);
    memcpy(__dst, v24, *(void *)(*(void *)(v26 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v25 - 8) + 32))(__dst, v24, v25);
    __swift_storeEnumTagSinglePayload((uint64_t)__dst, 0, 1, v25);
  }
  uint64_t v27 = *(int *)(v59 + 48);
  uint64_t v28 = &v68[v27];
  uint64_t v29 = &v22[v27];
  uint64_t v54 = v25;
  if (__swift_getEnumTagSinglePayload((uint64_t)&v56[v27], 1, v25))
  {
    uint64_t v30 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for DataFrame?);
    memcpy(v28, v29, *(void *)(*(void *)(v30 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v25 - 8) + 32))(v28, v29, v25);
    __swift_storeEnumTagSinglePayload((uint64_t)v28, 0, 1, v25);
  }
  *(void *)&a1[v62[17]] = *(void *)&a2[v62[17]];
  uint64_t v31 = v62[18];
  *(void *)&a1[v31 + 16] = *(void *)&a2[v31 + 16];
  *(_OWORD *)&a1[v31] = *(_OWORD *)&a2[v31];
  *(void *)&a1[a3[5]] = *(void *)&a2[a3[5]];
  uint64_t v32 = a3[6];
  uint64_t v33 = &a1[v32];
  uint64_t v34 = &a2[v32];
  a1[v32 + 8] = a2[v32 + 8];
  *(void *)&a1[v32] = *(void *)&a2[v32];
  uint64_t v63 = (int *)type metadata accessor for MLActivityClassifier.ModelParameters(0);
  uint64_t v35 = v63[5];
  uint64_t v57 = v33;
  uint64_t v69 = &v33[v35];
  uint64_t v36 = &v34[v35];
  uint64_t v37 = type metadata accessor for MLActivityClassifier.ModelParameters.Validation(0);
  if (swift_getEnumCaseMultiPayload(v36, v37) == 1)
  {
    uint64_t v60 = v37;
    uint64_t v38 = type metadata accessor for MLActivityClassifier.DataSource(0);
    unsigned int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload(v36, v38);
    unsigned int __dsta = EnumCaseMultiPayload;
    if (EnumCaseMultiPayload == 2)
    {
      size_t v45 = v36;
      int v44 = v69;
      (*(void (**)(char *, char *))(*(void *)(v54 - 8) + 32))(v69, v45);
    }
    else if (EnumCaseMultiPayload == 1)
    {
      uint64_t v40 = type metadata accessor for URL(0);
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v40 - 8) + 32))(v69, v36, v40);
      uint64_t v41 = (int *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (at: URL, annotationFileName: String, timeStampColumn: String, labelStartTimeColumn: String, labelEndTimeColumn: String));
      *(_OWORD *)&v69[v41[12]] = *(_OWORD *)&v36[v41[12]];
      *(_OWORD *)&v69[v41[16]] = *(_OWORD *)&v36[v41[16]];
      *(_OWORD *)&v69[v41[20]] = *(_OWORD *)&v36[v41[20]];
      uint64_t v42 = v41[24];
      long long v43 = *(_OWORD *)&v36[v42];
      int v44 = v69;
      *(_OWORD *)&v69[v42] = v43;
    }
    else
    {
      uint64_t v46 = type metadata accessor for URL(0);
      uint64_t v47 = v36;
      int v44 = v69;
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v46 - 8) + 32))(v69, v47, v46);
    }
    swift_storeEnumTagMultiPayload(v44, v38, __dsta);
    swift_storeEnumTagMultiPayload(v44, v60, 1);
  }
  else
  {
    memcpy(v69, v36, *(void *)(*(void *)(v37 - 8) + 64));
  }
  uint64_t v48 = v63[6];
  v57[v48 + 8] = v34[v48 + 8];
  *(void *)&v57[v48] = *(void *)&v34[v48];
  uint64_t v49 = v63[7];
  *(void *)&v57[v49] = *(void *)&v34[v49];
  v57[v49 + 8] = v34[v49 + 8];
  uint64_t v50 = v63[8];
  *(void *)&v57[v50] = *(void *)&v34[v50];
  v57[v50 + 8] = v34[v50 + 8];
  *(_OWORD *)&a1[a3[7]] = *(_OWORD *)&a2[a3[7]];
  *(_OWORD *)&a1[a3[8]] = *(_OWORD *)&a2[a3[8]];
  *(void *)&a1[a3[9]] = *(void *)&a2[a3[9]];
  *(_OWORD *)&a1[a3[10]] = *(_OWORD *)&a2[a3[10]];
  return a1;
}

char *assignWithTake for MLActivityClassifier(char *a1, char *a2, int *a3)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  uint64_t v4 = *(int *)(type metadata accessor for MLActivityClassifier.InputBlock(0) + 24);
  uint64_t v5 = type metadata accessor for LearningPhase(0);
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v5 - 8) + 40))(&a1[v4], &a2[v4], v5);
  uint64_t v6 = type metadata accessor for MLActivityClassifier.Model(0);
  uint64_t v7 = *(int *)(v6 + 20);
  uint64_t v8 = (int *)v6;
  __dstb = (void *)type metadata accessor for Conv2D(0);
  __srcb = *(void (**)(char *, char *, void *))(*(__dstb - 1) + 40);
  __srcb(&a1[v7], &a2[v7], __dstb);
  uint64_t v9 = v8[6];
  uint64_t v88 = type metadata accessor for ReLU(0);
  uint64_t v89 = *(void (**)(char *, char *, uint64_t))(*(void *)(v88 - 8) + 40);
  v89(&a1[v9], &a2[v9], v88);
  uint64_t v10 = v8;
  uint64_t v11 = v8[7];
  uint64_t v85 = type metadata accessor for Dropout(0);
  uint64_t v83 = *(void (**)(char *, char *, uint64_t))(*(void *)(v85 - 8) + 40);
  v83(&a1[v11], &a2[v11], v85);
  uint64_t v12 = v8[8];
  uint64_t v13 = &a1[v12];
  uint64_t v14 = &a2[v12];
  *(_OWORD *)&a1[v12] = *(_OWORD *)&a2[v12];
  a1[v12 + 16] = a2[v12 + 16];
  a1[v12 + 17] = a2[v12 + 17];
  uint64_t v15 = *(int *)(type metadata accessor for MLActivityClassifier.LSTMBlock(0) + 32);
  uint64_t v16 = &v13[v15];
  uint64_t v17 = &v14[v15];
  uint64_t v18 = type metadata accessor for LSTM(0);
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v18 - 8) + 40))(v16, v17, v18);
  __srcb(&a1[v10[9]], &a2[v10[9]], __dstb);
  uint64_t v19 = v10[10];
  uint64_t v20 = type metadata accessor for BatchNorm(0);
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v20 - 8) + 40))(&a1[v19], &a2[v19], v20);
  v89(&a1[v10[11]], &a2[v10[11]], v88);
  v83(&a1[v10[12]], &a2[v10[12]], v85);
  __srcb(&a1[v10[13]], &a2[v10[13]], __dstb);
  *(void *)&a1[v10[14]] = *(void *)&a2[v10[14]];
  uint64_t v21 = v10[15];
  uint64_t v22 = *(void *)&a1[v21];
  *(void *)&a1[v21] = *(void *)&a2[v21];
  swift_bridgeObjectRelease(v22);
  uint64_t v86 = v10;
  uint64_t v23 = v10[16];
  uint64_t v24 = &a1[v23];
  uint64_t v25 = &a2[v23];
  *(void *)&a1[v23] = *(void *)&a2[v23];
  *(void *)&a1[v23 + 8] = *(void *)&a2[v23 + 8];
  a1[v23 + 16] = a2[v23 + 16];
  *(_OWORD *)&a1[v23 + 24] = *(_OWORD *)&a2[v23 + 24];
  uint64_t v26 = *(void *)&a1[v23 + 40];
  *(void *)&a1[v23 + 40] = *(void *)&a2[v23 + 40];
  swift_bridgeObjectRelease(v26);
  *(void *)&a1[v23 + 48] = *(void *)&a2[v23 + 48];
  uint64_t v27 = *(void *)&a1[v23 + 56];
  *(void *)&a1[v23 + 56] = *(void *)&a2[v23 + 56];
  swift_bridgeObjectRelease(v27);
  *(void *)&a1[v23 + 64] = *(void *)&a2[v23 + 64];
  uint64_t v28 = *(void *)&a1[v23 + 72];
  uint64_t v90 = a1;
  *(void *)&a1[v23 + 72] = *(void *)&a2[v23 + 72];
  swift_bridgeObjectRelease(v28);
  uint64_t v84 = type metadata accessor for MLActivityClassifier.Configuration(0);
  uint64_t v29 = *(int *)(v84 + 44);
  uint64_t v30 = &v24[v29];
  __src = v25;
  uint64_t v31 = &v25[v29];
  uint64_t v32 = type metadata accessor for DataFrame(0);
  LODWORD(v25) = __swift_getEnumTagSinglePayload((uint64_t)v30, 1, v32);
  int EnumTagSinglePayload = __swift_getEnumTagSinglePayload((uint64_t)v31, 1, v32);
  if (v25)
  {
    if (!EnumTagSinglePayload)
    {
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v32 - 8) + 32))(v30, v31, v32);
      __swift_storeEnumTagSinglePayload((uint64_t)v30, 0, 1, v32);
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  uint64_t v34 = *(void *)(v32 - 8);
  if (EnumTagSinglePayload)
  {
    (*(void (**)(char *, uint64_t))(v34 + 8))(v30, v32);
LABEL_6:
    uint64_t v35 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for DataFrame?);
    memcpy(v30, v31, *(void *)(*(void *)(v35 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(char *, char *, uint64_t))(v34 + 40))(v30, v31, v32);
LABEL_7:
  uint64_t v36 = a2;
  uint64_t v37 = v90;
  uint64_t v38 = *(int *)(v84 + 48);
  uint64_t v39 = &__src[v38];
  __dst = &v24[v38];
  int v40 = __swift_getEnumTagSinglePayload((uint64_t)&v24[v38], 1, v32);
  int v41 = __swift_getEnumTagSinglePayload((uint64_t)v39, 1, v32);
  uint64_t v81 = v32;
  if (v40)
  {
    if (v41)
    {
      size_t v42 = *(void *)(*(void *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for DataFrame?)
                                  - 8)
                      + 64);
      long long v43 = __dst;
LABEL_12:
      memcpy(v43, v39, v42);
      goto LABEL_16;
    }
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v32 - 8) + 32))(__dst, v39, v32);
    __swift_storeEnumTagSinglePayload((uint64_t)__dst, 0, 1, v32);
  }
  else
  {
    uint64_t v44 = *(void *)(v32 - 8);
    if (v41)
    {
      (*(void (**)(char *, uint64_t))(v44 + 8))(__dst, v32);
      size_t v42 = *(void *)(*(void *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for DataFrame?)
                                  - 8)
                      + 64);
      long long v43 = __dst;
      goto LABEL_12;
    }
    (*(void (**)(char *, char *, uint64_t))(v44 + 40))(__dst, v39, v32);
  }
LABEL_16:
  uint64_t v45 = v86[17];
  uint64_t v46 = *(void **)&v90[v45];
  *(void *)&v90[v45] = *(void *)&a2[v45];

  uint64_t v47 = v86[18];
  uint64_t v48 = &v90[v47];
  uint64_t v49 = &a2[v47];
  if (*(void *)&v90[v47])
  {
    uint64_t v50 = *(void *)&a2[v47];
    if (v50)
    {
      *(void *)uint64_t v48 = v50;
      swift_release();
      *((void *)v48 + 1) = *((void *)v49 + 1);
      swift_release();
      uint64_t v51 = *((void *)v48 + 2);
      *((void *)v48 + 2) = *((void *)v49 + 2);
      swift_bridgeObjectRelease(v51);
    }
    else
    {
      outlined destroy of ClassificationMetricsContainer((uint64_t)v48);
      *(_OWORD *)uint64_t v48 = *(_OWORD *)v49;
      *((void *)v48 + 2) = *((void *)v49 + 2);
    }
  }
  else
  {
    *((void *)v48 + 2) = *((void *)v49 + 2);
    *(_OWORD *)uint64_t v48 = *(_OWORD *)v49;
  }
  uint64_t v52 = a3[5];
  uint64_t v53 = *(void **)&v90[v52];
  *(void *)&v90[v52] = *(void *)&a2[v52];

  uint64_t v54 = a3[6];
  uint64_t v55 = (uint64_t)&v90[v54];
  uint64_t v56 = &a2[v54];
  char v57 = v90[v54 + 8];
  if (v57 == -1)
  {
    *(unsigned char *)(v55 + 8) = v56[8];
    *(void *)uint64_t v55 = *(void *)v56;
  }
  else
  {
    char v58 = a2[v54 + 8];
    if (v58 == -1)
    {
      outlined destroy of MLDataTable(v55);
      *(void *)uint64_t v55 = *(void *)v56;
      *(unsigned char *)(v55 + 8) = v56[8];
    }
    else
    {
      uint64_t v59 = *(void *)v55;
      *(void *)uint64_t v55 = *(void *)v56;
      *(unsigned char *)(v55 + 8) = v58 & 1;
      outlined consume of Result<_DataTable, Error>(v59, v57 & 1);
    }
  }
  uint64_t v60 = (int *)type metadata accessor for MLActivityClassifier.ModelParameters(0);
  if (v90 != a2)
  {
    unsigned int __dsta = v60;
    uint64_t v61 = v60[5];
    uint64_t v62 = (char *)(v55 + v61);
    uint64_t v63 = &v56[v61];
    outlined destroy of MLActivityClassifier.ModelParameters((uint64_t)v62, type metadata accessor for MLActivityClassifier.ModelParameters.Validation);
    uint64_t v64 = type metadata accessor for MLActivityClassifier.ModelParameters.Validation(0);
    if (swift_getEnumCaseMultiPayload(v63, v64) == 1)
    {
      __srca = (void *)type metadata accessor for MLActivityClassifier.DataSource(0);
      unsigned int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload(v63, __srca);
      unsigned int v87 = EnumCaseMultiPayload;
      if (EnumCaseMultiPayload == 2)
      {
        (*(void (**)(char *, char *))(*(void *)(v81 - 8) + 32))(v62, v63);
      }
      else if (EnumCaseMultiPayload == 1)
      {
        uint64_t v66 = type metadata accessor for URL(0);
        (*(void (**)(char *, char *, uint64_t))(*(void *)(v66 - 8) + 32))(v62, v63, v66);
        uint64_t v67 = (int *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (at: URL, annotationFileName: String, timeStampColumn: String, labelStartTimeColumn: String, labelEndTimeColumn: String));
        *(_OWORD *)&v62[v67[12]] = *(_OWORD *)&v63[v67[12]];
        *(_OWORD *)&v62[v67[16]] = *(_OWORD *)&v63[v67[16]];
        *(_OWORD *)&v62[v67[20]] = *(_OWORD *)&v63[v67[20]];
        *(_OWORD *)&v62[v67[24]] = *(_OWORD *)&v63[v67[24]];
      }
      else
      {
        uint64_t v68 = type metadata accessor for URL(0);
        (*(void (**)(char *, char *, uint64_t))(*(void *)(v68 - 8) + 32))(v62, v63, v68);
      }
      swift_storeEnumTagMultiPayload(v62, __srca, v87);
      swift_storeEnumTagMultiPayload(v62, v64, 1);
    }
    else
    {
      memcpy(v62, v63, *(void *)(*(void *)(v64 - 8) + 64));
    }
    uint64_t v36 = a2;
    uint64_t v37 = v90;
    uint64_t v60 = __dsta;
  }
  uint64_t v69 = v60[6];
  *(unsigned char *)(v55 + v69 + 8) = v56[v69 + 8];
  *(void *)(v55 + v69) = *(void *)&v56[v69];
  uint64_t v70 = v60[7];
  *(void *)(v55 + v70) = *(void *)&v56[v70];
  *(unsigned char *)(v55 + v70 + 8) = v56[v70 + 8];
  uint64_t v71 = v60[8];
  *(void *)(v55 + v71) = *(void *)&v56[v71];
  *(unsigned char *)(v55 + v71 + 8) = v56[v71 + 8];
  uint64_t v72 = a3[7];
  *(void *)&v37[v72] = *(void *)((char *)v36 + v72);
  uint64_t v73 = *(void *)&v37[v72 + 8];
  *(void *)&v37[v72 + 8] = *(void *)((char *)v36 + v72 + 8);
  swift_bridgeObjectRelease(v73);
  uint64_t v74 = a3[8];
  *(void *)&v37[v74] = *(void *)((char *)v36 + v74);
  uint64_t v75 = *(void *)&v37[v74 + 8];
  *(void *)&v37[v74 + 8] = *(void *)((char *)v36 + v74 + 8);
  swift_bridgeObjectRelease(v75);
  uint64_t v76 = a3[9];
  uint64_t v77 = *(void *)&v37[v76];
  *(void *)&v37[v76] = *(void *)((char *)v36 + v76);
  swift_bridgeObjectRelease(v77);
  uint64_t v78 = a3[10];
  *(void *)&v37[v78] = *(void *)((char *)v36 + v78);
  uint64_t v79 = *(void *)&v37[v78 + 8];
  *(void *)&v37[v78 + 8] = *(void *)((char *)v36 + v78 + 8);
  swift_bridgeObjectRelease(v79);
  return v37;
}

uint64_t getEnumTagSinglePayload for MLActivityClassifier(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_15BA3);
}

uint64_t sub_15BA3(uint64_t a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4 = a1;
  uint64_t v5 = type metadata accessor for MLActivityClassifier.Model(0);
  if (*(_DWORD *)(*(void *)(v5 - 8) + 84) == a2) {
    return __swift_getEnumTagSinglePayload(v4, a2, v5);
  }
  if (a2 != 0x7FFFFFFF)
  {
    uint64_t v5 = type metadata accessor for MLActivityClassifier.ModelParameters(0);
    uint64_t v4 = *(int *)(a3 + 24) + a1;
    return __swift_getEnumTagSinglePayload(v4, a2, v5);
  }
  uint64_t result = 0;
  if ((*(void *)(a1 + *(int *)(a3 + 20)) & 0xFFFFFFFF00000001) == 0) {
    return (*(void *)(a1 + *(int *)(a3 + 20)) >> 1) + 1;
  }
  return result;
}

uint64_t storeEnumTagSinglePayload for MLActivityClassifier(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_15C30);
}

uint64_t sub_15C30(uint64_t a1, unsigned int a2, int a3, uint64_t a4)
{
  uint64_t v6 = a1;
  uint64_t v7 = type metadata accessor for MLActivityClassifier.Model(0);
  if (*(_DWORD *)(*(void *)(v7 - 8) + 84) != a3)
  {
    if (a3 == 0x7FFFFFFF)
    {
      uint64_t result = *(int *)(a4 + 20);
      *(void *)(a1 + result) = 2 * (a2 - 1);
      return result;
    }
    uint64_t v7 = type metadata accessor for MLActivityClassifier.ModelParameters(0);
    uint64_t v6 = *(int *)(a4 + 24) + a1;
  }
  return __swift_storeEnumTagSinglePayload(v6, a2, a2, v7);
}

uint64_t type metadata completion function for MLActivityClassifier(uint64_t a1)
{
  uint64_t result = type metadata accessor for MLActivityClassifier.Model(319);
  if (v2 <= 0x3F)
  {
    v4[0] = *(void *)(result - 8) + 64;
    v4[1] = (char *)&value witness table for Builtin.UnknownObject + 64;
    uint64_t result = type metadata accessor for MLActivityClassifier.ModelParameters(319);
    if (v3 <= 0x3F)
    {
      v4[2] = *(void *)(result - 8) + 64;
      v4[3] = &unk_346BB8;
      v4[4] = &unk_346BB8;
      v4[5] = (char *)&value witness table for Builtin.BridgeObject + 64;
      void v4[6] = &unk_346BB8;
      swift_initStructMetadata(a1, 256, 7, v4, a1 + 16);
      return 0;
    }
  }
  return result;
}

uint64_t specialized static Array._allocateUninitialized(_:)(uint64_t a1)
{
  if (a1 < 0)
  {
    _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, "Can't construct Array with count < 0", 36, 2, "Swift/Array.swift", 17, 2, 936, 1);
    BUG();
  }
  if (!a1) {
    return (uint64_t)_swiftEmptyArrayStorage;
  }
  type metadata accessor for OS_os_log(0, &lazy cache variable for type metadata for NSNumber, NSNumber_ptr);
  uint64_t result = static Array._allocateBufferUninitialized(minimumCapacity:)(a1);
  *(void *)((char *)&dword_10 + (result & 0xFFFFFFFFFFFFF8)) = a1;
  return result;
}

uint64_t outlined init with take of DataFrame?(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(a3);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v3 - 8) + 32))(a2, a1, v3);
  return a2;
}

uint64_t sub_15ECC()
{
  return objectdestroy_7Tm();
}

uint64_t partial apply for specialized closure #1 in blockAwait<A>(_:)(uint64_t a1)
{
  uint64_t v3 = v1[2];
  uint64_t v4 = v1[3];
  uint64_t v8 = v1[4];
  uint64_t v9 = v1[5];
  uint64_t v10 = v1[6];
  uint64_t v5 = v1[7];
  uint64_t v6 = (void *)swift_task_alloc(dword_3A3C6C);
  *(void *)(v2 + 16) = v6;
  *uint64_t v6 = v2;
  v6[1] = partial apply for specialized closure #1 in blockAwait<A>(_:);
  return specialized closure #1 in blockAwait<A>(_:)(a1, v3, v4, v8, v9, v10, v5);
}

{
  void *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  void *v6;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  uint64_t v3 = v1[2];
  uint64_t v4 = v1[3];
  uint64_t v8 = v1[4];
  uint64_t v9 = v1[5];
  uint64_t v10 = v1[6];
  uint64_t v5 = v1[7];
  uint64_t v6 = (void *)swift_task_alloc(dword_3A3C94);
  *(void *)(v2 + 16) = v6;
  *uint64_t v6 = v2;
  v6[1] = partial apply for specialized closure #1 in blockAwait<A>(_:);
  return specialized closure #1 in blockAwait<A>(_:)(a1, v3, v4, v8, v9, v10, v5);
}

{
  void *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  void *v6;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  uint64_t v3 = v1[2];
  uint64_t v4 = v1[3];
  uint64_t v8 = v1[4];
  uint64_t v9 = v1[5];
  uint64_t v10 = v1[6];
  uint64_t v5 = v1[7];
  uint64_t v6 = (void *)swift_task_alloc(dword_3A3CDC);
  *(void *)(v2 + 16) = v6;
  *uint64_t v6 = v2;
  v6[1] = partial apply for specialized closure #1 in blockAwait<A>(_:);
  return specialized closure #1 in blockAwait<A>(_:)(a1, v3, v4, v8, v9, v10, v5);
}

{
  void *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  void *v6;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  uint64_t v3 = v1[2];
  uint64_t v4 = v1[3];
  uint64_t v8 = v1[4];
  uint64_t v9 = v1[5];
  uint64_t v10 = v1[6];
  uint64_t v5 = v1[7];
  uint64_t v6 = (void *)swift_task_alloc(dword_3A3CEC);
  *(void *)(v2 + 16) = v6;
  *uint64_t v6 = v2;
  v6[1] = partial apply for specialized closure #1 in blockAwait<A>(_:);
  return specialized closure #1 in blockAwait<A>(_:)(a1, v3, v4, v8, v9, v10, v5);
}

{
  void *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  void *v6;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  uint64_t v3 = v1[2];
  uint64_t v4 = v1[3];
  uint64_t v8 = v1[4];
  uint64_t v9 = v1[5];
  uint64_t v10 = v1[6];
  uint64_t v5 = v1[7];
  uint64_t v6 = (void *)swift_task_alloc(dword_3A3D74);
  *(void *)(v2 + 16) = v6;
  *uint64_t v6 = v2;
  v6[1] = partial apply for specialized closure #1 in blockAwait<A>(_:);
  return specialized closure #1 in blockAwait<A>(_:)(a1, v3, v4, v8, v9, v10, v5);
}

{
  void *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  void *v6;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  uint64_t v3 = v1[2];
  uint64_t v4 = v1[3];
  uint64_t v8 = v1[4];
  uint64_t v9 = v1[5];
  uint64_t v10 = v1[6];
  uint64_t v5 = v1[7];
  uint64_t v6 = (void *)swift_task_alloc(dword_3A3DA4);
  *(void *)(v2 + 16) = v6;
  *uint64_t v6 = v2;
  v6[1] = partial apply for specialized closure #1 in blockAwait<A>(_:);
  return specialized closure #1 in blockAwait<A>(_:)(a1, v3, v4, v8, v9, v10, v5);
}

{
  void *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  void *v6;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  uint64_t v3 = v1[2];
  uint64_t v4 = v1[3];
  uint64_t v8 = v1[4];
  uint64_t v9 = v1[5];
  uint64_t v10 = v1[6];
  uint64_t v5 = v1[7];
  uint64_t v6 = (void *)swift_task_alloc(dword_3A3DB4);
  *(void *)(v2 + 16) = v6;
  *uint64_t v6 = v2;
  v6[1] = partial apply for specialized closure #1 in blockAwait<A>(_:);
  return specialized closure #1 in blockAwait<A>(_:)(a1, v3, v4, v8, v9, v10, v5);
}

{
  void *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  void *v6;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  uint64_t v3 = v1[2];
  uint64_t v4 = v1[3];
  uint64_t v8 = v1[4];
  uint64_t v9 = v1[5];
  uint64_t v10 = v1[6];
  uint64_t v5 = v1[7];
  uint64_t v6 = (void *)swift_task_alloc(dword_3A3DCC);
  *(void *)(v2 + 16) = v6;
  *uint64_t v6 = v2;
  v6[1] = partial apply for specialized closure #1 in blockAwait<A>(_:);
  return specialized closure #1 in blockAwait<A>(_:)(a1, v3, v4, v8, v9, v10, v5);
}

{
  void *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  void *v6;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  uint64_t v3 = v1[2];
  uint64_t v4 = v1[3];
  uint64_t v8 = v1[4];
  uint64_t v9 = v1[5];
  uint64_t v10 = v1[6];
  uint64_t v5 = v1[7];
  uint64_t v6 = (void *)swift_task_alloc(dword_3A3DE4);
  *(void *)(v2 + 16) = v6;
  *uint64_t v6 = v2;
  v6[1] = partial apply for specialized closure #1 in blockAwait<A>(_:);
  return specialized closure #1 in blockAwait<A>(_:)(a1, v3, v4, v8, v9, v10, v5);
}

{
  void *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  void *v6;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  uint64_t v3 = v1[2];
  uint64_t v4 = v1[3];
  uint64_t v8 = v1[4];
  uint64_t v9 = v1[5];
  uint64_t v10 = v1[6];
  uint64_t v5 = v1[7];
  uint64_t v6 = (void *)swift_task_alloc(dword_3A3E3C);
  *(void *)(v2 + 16) = v6;
  *uint64_t v6 = v2;
  v6[1] = partial apply for specialized closure #1 in blockAwait<A>(_:);
  return specialized closure #1 in blockAwait<A>(_:)(a1, v3, v4, v8, v9, v10, v5);
}

{
  void *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  void *v6;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  uint64_t v3 = v1[2];
  uint64_t v4 = v1[3];
  uint64_t v8 = v1[4];
  uint64_t v9 = v1[5];
  uint64_t v10 = v1[6];
  uint64_t v5 = v1[7];
  uint64_t v6 = (void *)swift_task_alloc(dword_3A3E4C);
  *(void *)(v2 + 16) = v6;
  *uint64_t v6 = v2;
  v6[1] = partial apply for specialized closure #1 in blockAwait<A>(_:);
  return specialized closure #1 in blockAwait<A>(_:)(a1, v3, v4, v8, v9, v10, v5);
}

{
  void *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  void *v6;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  uint64_t v3 = v1[2];
  uint64_t v4 = v1[3];
  uint64_t v8 = v1[4];
  uint64_t v9 = v1[5];
  uint64_t v10 = v1[6];
  uint64_t v5 = v1[7];
  uint64_t v6 = (void *)swift_task_alloc(dword_3A3E74);
  *(void *)(v2 + 16) = v6;
  *uint64_t v6 = v2;
  v6[1] = partial apply for specialized closure #1 in blockAwait<A>(_:);
  return specialized closure #1 in blockAwait<A>(_:)(a1, v3, v4, v8, v9, v10, v5);
}

{
  void *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  void *v6;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  uint64_t v3 = v1[2];
  uint64_t v4 = v1[3];
  uint64_t v8 = v1[4];
  uint64_t v9 = v1[5];
  uint64_t v10 = v1[6];
  uint64_t v5 = v1[7];
  uint64_t v6 = (void *)swift_task_alloc(dword_3A3E84);
  *(void *)(v2 + 16) = v6;
  *uint64_t v6 = v2;
  v6[1] = partial apply for specialized closure #1 in blockAwait<A>(_:);
  return specialized closure #1 in blockAwait<A>(_:)(a1, v3, v4, v8, v9, v10, v5);
}

{
  void *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  void *v6;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  uint64_t v3 = v1[2];
  uint64_t v4 = v1[3];
  uint64_t v8 = v1[4];
  uint64_t v9 = v1[5];
  uint64_t v10 = v1[6];
  uint64_t v5 = v1[7];
  uint64_t v6 = (void *)swift_task_alloc(dword_3A3EAC);
  *(void *)(v2 + 16) = v6;
  *uint64_t v6 = v2;
  v6[1] = partial apply for specialized closure #1 in blockAwait<A>(_:);
  return specialized closure #1 in blockAwait<A>(_:)(a1, v3, v4, v8, v9, v10, v5);
}

{
  void *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  void *v6;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  uint64_t v3 = v1[2];
  uint64_t v4 = v1[3];
  uint64_t v8 = v1[4];
  uint64_t v9 = v1[5];
  uint64_t v10 = v1[6];
  uint64_t v5 = v1[7];
  uint64_t v6 = (void *)swift_task_alloc(dword_3A3ED4);
  *(void *)(v2 + 16) = v6;
  *uint64_t v6 = v2;
  v6[1] = partial apply for specialized closure #1 in blockAwait<A>(_:);
  return specialized closure #1 in blockAwait<A>(_:)(a1, v3, v4, v8, v9, v10, v5);
}

{
  void *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  void *v6;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  uint64_t v3 = v1[2];
  uint64_t v4 = v1[3];
  uint64_t v8 = v1[4];
  uint64_t v9 = v1[5];
  uint64_t v10 = v1[6];
  uint64_t v5 = v1[7];
  uint64_t v6 = (void *)swift_task_alloc(dword_3A3EEC);
  *(void *)(v2 + 16) = v6;
  *uint64_t v6 = v2;
  v6[1] = partial apply for specialized closure #1 in blockAwait<A>(_:);
  return specialized closure #1 in blockAwait<A>(_:)(a1, v3, v4, v8, v9, v10, v5);
}

{
  void *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  void *v6;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  uint64_t v3 = v1[2];
  uint64_t v4 = v1[3];
  uint64_t v8 = v1[4];
  uint64_t v9 = v1[5];
  uint64_t v10 = v1[6];
  uint64_t v5 = v1[7];
  uint64_t v6 = (void *)swift_task_alloc(dword_3A3F34);
  *(void *)(v2 + 16) = v6;
  *uint64_t v6 = v2;
  v6[1] = partial apply for specialized closure #1 in blockAwait<A>(_:);
  return specialized closure #1 in blockAwait<A>(_:)(a1, v3, v4, v8, v9, v10, v5);
}

{
  void *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  void *v6;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  uint64_t v3 = v1[2];
  uint64_t v4 = v1[3];
  uint64_t v8 = v1[4];
  uint64_t v9 = v1[5];
  uint64_t v10 = v1[6];
  uint64_t v5 = v1[7];
  uint64_t v6 = (void *)swift_task_alloc(dword_3A3F44);
  *(void *)(v2 + 16) = v6;
  *uint64_t v6 = v2;
  v6[1] = partial apply for specialized closure #1 in blockAwait<A>(_:);
  return specialized closure #1 in blockAwait<A>(_:)(a1, v3, v4, v8, v9, v10, v5);
}

{
  void *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  void *v6;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  uint64_t v3 = v1[2];
  uint64_t v4 = v1[3];
  uint64_t v8 = v1[4];
  uint64_t v9 = v1[5];
  uint64_t v10 = v1[6];
  uint64_t v5 = v1[7];
  uint64_t v6 = (void *)swift_task_alloc(dword_3A3F9C);
  *(void *)(v2 + 16) = v6;
  *uint64_t v6 = v2;
  v6[1] = partial apply for specialized closure #1 in blockAwait<A>(_:);
  return specialized closure #1 in blockAwait<A>(_:)(a1, v3, v4, v8, v9, v10, v5);
}

uint64_t __swift_deallocate_boxed_opaque_existential_0(void *a1)
{
  uint64_t result = *(void *)(a1[3] - 8);
  int v2 = *(_DWORD *)(result + 80);
  if ((v2 & 0x20000) != 0) {
    return swift_slowDealloc(*a1, *(void *)(result + 64) + ((v2 + 16) & ~v2), v2 | 7);
  }
  return result;
}

uint64_t sub_15FA3()
{
  return objectdestroy_7Tm();
}

uint64_t sub_1603F()
{
  return objectdestroy_7Tm();
}

uint64_t sub_160DB()
{
  return objectdestroy_7Tm();
}

uint64_t sub_16177()
{
  return objectdestroy_7Tm();
}

uint64_t sub_16235()
{
  return objectdestroy_7Tm();
}

uint64_t sub_162D1()
{
  return objectdestroy_7Tm();
}

uint64_t sub_1636D()
{
  return objectdestroy_7Tm();
}

uint64_t sub_16409()
{
  return objectdestroy_7Tm();
}

void *specialized static Array._allocateUninitialized(_:)(uint64_t a1, uint64_t *a2)
{
  if (a1 < 0)
  {
    _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, "Can't construct Array with count < 0", 36, 2, "Swift/Array.swift", 17, 2, 936, 1);
    BUG();
  }
  if (!a1) {
    return _swiftEmptyArrayStorage;
  }
  __swift_instantiateConcreteTypeFromMangledName(a2);
  uint64_t result = (void *)static Array._allocateBufferUninitialized(minimumCapacity:)(a1);
  result[2] = a1;
  return result;
}

uint64_t sub_165BA()
{
  return objectdestroy_7Tm();
}

uint64_t sub_16656()
{
  return objectdestroy_7Tm();
}

uint64_t sub_166F2()
{
  return objectdestroy_7Tm();
}

uint64_t sub_1678E()
{
  return objectdestroy_7Tm();
}

uint64_t sub_1682A()
{
  return objectdestroy_7Tm();
}

uint64_t sub_168C6()
{
  return objectdestroy_7Tm();
}

uint64_t type metadata accessor for OS_os_log(uint64_t a1, uint64_t *a2, void *a3)
{
  uint64_t result = *a2;
  if (!*a2)
  {
    uint64_t v4 = objc_opt_self(*a3);
    uint64_t result = swift_getObjCClassMetadata(v4);
    *a2 = result;
  }
  return result;
}

uint64_t sub_1698F()
{
  return objectdestroy_7Tm();
}

uint64_t outlined assign with take of MLTrainingSession<MLImageClassifier>.Metadata(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(a3);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v3 - 8) + 40))(a2, a1, v3);
  return a2;
}

uint64_t sub_16A65()
{
  return key path getter for Column.name : Column<[Double]>();
}

uint64_t sub_16A6F(uint64_t *a1)
{
  return key path setter for Column.name : Column<[Double]>(a1);
}

uint64_t partial apply for closure #1 in closure #1 in closure #1 in static MLActivityClassifier.resume(_:)()
{
  return closure #1 in closure #1 in closure #1 in static MLActivityClassifier.resume(_:)(v0);
}

uint64_t sub_16A86()
{
  return objectdestroy_7Tm();
}

uint64_t partial apply for specialized closure #1 in blockAwait<A>(_:)()
{
  uint64_t v2 = *v0;
  swift_task_dealloc(*(void *)(*v0 + 16));
  return (*(uint64_t (**)(void))(v2 + 8))();
}

{
  return partial apply for specialized closure #1 in blockAwait<A>(_:)();
}

uint64_t sub_16B67()
{
  return objectdestroy_7Tm();
}

uint64_t outlined init with copy of MLTrainingSessionParameters(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v3 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v3 - 8) + 16))(a2, a1, v3);
  return a2;
}

uint64_t sub_16C2C()
{
  uint64_t v1 = type metadata accessor for MLActivityClassifier.Configuration(0);
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v17 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v3 = ~*(unsigned __int8 *)(v2 + 80) & (v17 + 16);
  uint64_t v20 = *(void *)(v2 + 64);
  uint64_t v19 = type metadata accessor for TrainingTablePrinter(0);
  uint64_t v4 = *(void *)(v19 - 8);
  uint64_t v5 = *(unsigned __int8 *)(v4 + 80);
  uint64_t v18 = *(void *)(v4 + 64);
  uint64_t v6 = v3 + v0;
  swift_bridgeObjectRelease(*(void *)(v0 + v3 + 40));
  swift_bridgeObjectRelease(*(void *)(v0 + v3 + 56));
  uint64_t v16 = v0;
  swift_bridgeObjectRelease(*(void *)(v0 + v3 + 72));
  uint64_t v21 = v1;
  uint64_t v7 = v3 + v0 + *(int *)(v1 + 44);
  uint64_t v8 = type metadata accessor for DataFrame(0);
  if (!__swift_getEnumTagSinglePayload(v7, 1, v8)) {
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v8 - 8) + 8))(v7, v8);
  }
  uint64_t v9 = *(int *)(v21 + 48) + v6;
  if (!__swift_getEnumTagSinglePayload(v9, 1, v8)) {
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v8 - 8) + 8))(v9, v8);
  }
  uint64_t v10 = v5 | v17 | 7;
  uint64_t v11 = (v5 + v20 + v3) & ~v5;
  uint64_t v12 = v11 + v18;
  uint64_t v13 = v16 + v11;
  uint64_t v14 = type metadata accessor for Date(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v14 - 8) + 8))(v13, v14);

  swift_bridgeObjectRelease(*(void *)(*(int *)(v19 + 24) + v13));
  return swift_deallocObject(v16, v12, v10);
}

uint64_t outlined init with take of MLClassifierMetrics(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v3 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v3 - 8) + 32))(a2, a1, v3);
  return a2;
}

uint64_t partial apply for closure #1 in static MLActivityClassifier.train(with:)(uint64_t a1)
{
  uint64_t v2 = *(void *)(type metadata accessor for MLActivityClassifier.Configuration(0) - 8);
  uint64_t v3 = ~*(unsigned __int8 *)(v2 + 80) & (*(unsigned __int8 *)(v2 + 80) + 16);
  uint64_t v4 = v3 + *(void *)(v2 + 64);
  uint64_t v5 = *(unsigned __int8 *)(*(void *)(type metadata accessor for TrainingTablePrinter(0) - 8) + 80);
  return closure #1 in static MLActivityClassifier.train(with:)(a1, v1 + v3, v1 + ((v5 + v4) & ~v5));
}

uint64_t specialized closure #1 in _StringGuts.withCString<A>(_:)(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = v3;
  uint64_t result = a3();
  if (!v4)
  {
    uint64_t result = v7;
    *uint64_t v5 = v7;
  }
  return result;
}

uint64_t outlined destroy of MLActivityClassifier.ModelParameters(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t v2 = a2(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t partial apply for closure #2 in validateAndConvertRawDataToInternalData(_:featureColumns:labelColumn:recordingFileColumn:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return closure #2 in validateAndConvertRawDataToInternalData(_:featureColumns:labelColumn:recordingFileColumn:)(a1, a2, a3);
}

uint64_t partial apply for specialized closure #1 in MLUntypedColumn.init<A>(_:)(void *a1)
{
  return specialized closure #1 in MLUntypedColumn.init<A>(_:)(*(uint64_t **)(v1 + 16), a1);
}

{
  uint64_t v1;

  return specialized closure #1 in MLUntypedColumn.init<A>(_:)(*(uint64_t **)(v1 + 16), a1);
}

{
  uint64_t v1;

  return specialized closure #1 in MLUntypedColumn.init<A>(_:)(*(uint64_t **)(v1 + 16), a1);
}

{
  uint64_t v1;

  return specialized closure #1 in MLUntypedColumn.init<A>(_:)(*(uint64_t **)(v1 + 16), a1);
}

{
  uint64_t v1;

  return specialized closure #1 in MLUntypedColumn.init<A>(_:)(*(void **)(v1 + 16), a1);
}

{
  uint64_t v1;

  return specialized closure #1 in MLUntypedColumn.init<A>(_:)(*(void **)(v1 + 16), a1, specialized closure #1 in MLUntypedColumn.init<A>(_:));
}

{
  uint64_t v1;

  return specialized closure #1 in MLUntypedColumn.init<A>(_:)(*(void **)(v1 + 16), a1, specialized closure #1 in MLUntypedColumn.init<A>(_:));
}

{
  uint64_t v1;

  return specialized closure #1 in MLUntypedColumn.init<A>(_:)(*(uint64_t **)(v1 + 16), a1);
}

uint64_t partial apply for closure #1 in CMLTable.column(name:)(uint64_t a1)
{
  return closure #1 in CMLTable.column(name:)(a1, v1);
}

uint64_t sub_16EB2()
{
  return objectdestroy_7Tm();
}

uint64_t objectdestroy_7Tm()
{
  swift_unknownObjectRelease(*(void *)(v0 + 16));
  swift_release(*(void *)(v0 + 32));
  swift_release(*(void *)(v0 + 48));

  return swift_deallocObject(v0, 64, 7);
}

void *_sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSaySo8NSNumberCG_Sis5NeverOTg50125_s8CreateML20MLHandPoseClassifierV15modelPrediction2on5usingSaySS5label_Sd10confidencetGSo12MLMultiArrayC_So7MLModelCtKFSiSo8D54Ccfu_33_5bdac5b40c7411f20a64c1277f8fd44fAOSiTf3nnnpk_nTf1cn_n(uint64_t a1)
{
  if ((a1 & 0x4000000000000001) != 0)
  {
    uint64_t v10 = a1 & 0xFFFFFFFFFFFFF8;
    if (a1) {
      uint64_t v10 = a1;
    }
    swift_bridgeObjectRetain(a1);
    uint64_t v1 = _CocoaArrayWrapper.endIndex.getter(v10);
    swift_bridgeObjectRelease(a1);
  }
  else
  {
    uint64_t v1 = *(void *)((char *)&dword_10 + (a1 & 0xFFFFFFFFFFFFF8));
  }
  if (v1)
  {
    int64_t v2 = 0;
    if (v1 > 0) {
      int64_t v2 = v1;
    }
    uint64_t v12 = v1;
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v2, 0);
    uint64_t v3 = v1;
    if (v1 < 0) {
      BUG();
    }
    uint64_t v4 = 0;
    do
    {
      if (v3 == v4) {
        BUG();
      }
      if ((a1 & 0xC000000000000003) != 0) {
        id v5 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v4, a1);
      }
      else {
        id v5 = *(id *)(a1 + 8 * v4 + 32);
      }
      uint64_t v6 = v5;
      id v11 = [v5 integerValue];

      unint64_t v7 = _swiftEmptyArrayStorage[2];
      unint64_t v8 = v7 + 1;
      if (_swiftEmptyArrayStorage[3] >> 1 <= v7)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(_swiftEmptyArrayStorage[3] >= 2uLL, v7 + 1, 1);
        unint64_t v8 = v7 + 1;
      }
      ++v4;
      _swiftEmptyArrayStorage[2] = v8;
      _swiftEmptyArrayStorage[v7 + 4] = v11;
      uint64_t v3 = v12;
    }
    while (v12 != v4);
  }
  return _swiftEmptyArrayStorage;
}

unint64_t *_sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSaySSG_SaySfGs5NeverOTg5Tm(void (*a1)(void *), uint64_t a2, uint64_t a3, uint64_t a4, void (*a5)(BOOL, unint64_t, uint64_t))
{
  uint64_t v20 = a2;
  uint64_t v21 = a1;
  unint64_t v6 = *(void *)(a3 + 16);
  if (!v6) {
    return (unint64_t *)&_swiftEmptyArrayStorage;
  }
  uint64_t v25 = v5;
  uint64_t v24 = (unint64_t *)&_swiftEmptyArrayStorage;
  uint64_t v22 = a5;
  a5(0, v6, 0);
  unint64_t v8 = (unint64_t *)&_swiftEmptyArrayStorage;
  for (i = (uint64_t *)(a3 + 40); ; i += 2)
  {
    unint64_t v19 = v6;
    uint64_t v10 = *i;
    v17[0] = *(i - 1);
    v17[1] = v10;
    swift_bridgeObjectRetain(v10);
    uint64_t v11 = v25;
    v21(v17);
    if (v11) {
      break;
    }
    uint64_t v25 = 0;
    swift_bridgeObjectRelease(v10);
    unint64_t v12 = v18;
    uint64_t v24 = v8;
    unint64_t v13 = v8[2];
    unint64_t v14 = v8[3];
    unint64_t v15 = v13 + 1;
    if (v14 >> 1 <= v13)
    {
      unint64_t v23 = v18;
      v22(v14 >= 2, v15, 1);
      unint64_t v12 = v23;
      unint64_t v8 = v24;
    }
    _OWORD v8[2] = v15;
    v8[v13 + 4] = v12;
    unint64_t v6 = v19 - 1;
    if (v19 == 1) {
      return v8;
    }
  }
  swift_release(v8);
  swift_bridgeObjectRelease(v10);
  return v8;
}

void *_sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSnySiG_SSs5NeverOTg5(void (*a1)(void *), uint64_t a2, uint64_t a3, uint64_t a4)
{
  v19[1] = a2;
  uint64_t v20 = a1;
  uint64_t v24 = a3;
  uint64_t v5 = a4 - a3;
  if (__OFSUB__(a4, a3)) {
    BUG();
  }
  if (a4 == a3) {
    return _swiftEmptyArrayStorage;
  }
  uint64_t v25 = a4;
  uint64_t v26 = _swiftEmptyArrayStorage;
  int64_t v6 = 0;
  if (v5 > 0) {
    int64_t v6 = a4 - a3;
  }
  specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v6, 0);
  if (v5 < 0) {
    BUG();
  }
  unint64_t v7 = v26;
  uint64_t v8 = v24;
  uint64_t v9 = v25;
  while (1)
  {
    if (v9 == v8) {
      BUG();
    }
    v19[0] = v8;
    v20(v19);
    if (v4) {
      break;
    }
    uint64_t v10 = v17;
    uint64_t v11 = v18;
    uint64_t v26 = v7;
    unint64_t v12 = v7[2];
    unint64_t v13 = v7[3];
    int64_t v14 = v12 + 1;
    if (v13 >> 1 <= v12)
    {
      uint64_t v22 = v18;
      uint64_t v21 = v17;
      uint64_t v23 = 0;
      specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v13 >= 2, v14, 1);
      uint64_t v11 = v22;
      uint64_t v10 = v21;
      uint64_t v4 = v23;
      unint64_t v7 = v26;
    }
    uint64_t v15 = 2 * v12;
    v7[2] = v14;
    v7[v15 + 4] = v10;
    v7[v15 + 5] = v11;
    uint64_t v9 = v25;
    if (v25 < v24) {
      BUG();
    }
    if (v8 >= v25) {
      BUG();
    }
    if (v25 == ++v8) {
      return v7;
    }
  }
  swift_release();
  return v7;
}

void *_sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lF11TabularData0E5FrameV4RowsV_8CreateML08WeightedE6SampleVsAE_pTg5(void (*a1)(void *, void *), uint64_t a2)
{
  uint64_t v35 = v2;
  v25[4] = a2;
  uint64_t v26 = a1;
  uint64_t v27 = type metadata accessor for DataFrame.Row(0);
  uint64_t v36 = *(void *)(v27 - 8);
  int64_t v4 = *(void *)(v36 + 64);
  uint64_t v5 = alloca(v4);
  int64_t v6 = alloca(v4);
  uint64_t v28 = v25;
  uint64_t v29 = *(void *)(type metadata accessor for WeightedDataSample(0) - 8);
  int64_t v7 = *(void *)(v29 + 64);
  uint64_t v8 = alloca(v7);
  uint64_t v9 = alloca(v7);
  uint64_t v33 = v25;
  uint64_t v10 = type metadata accessor for DataFrame.Rows(0);
  uint64_t v11 = lazy protocol witness table accessor for type VNImageOption and conformance VNImageOption(&lazy protocol witness table cache variable for type DataFrame.Rows and conformance DataFrame.Rows, (uint64_t (*)(uint64_t))&type metadata accessor for DataFrame.Rows, (uint64_t)&protocol conformance descriptor for DataFrame.Rows);
  uint64_t v12 = dispatch thunk of Collection.count.getter(v10, v11);
  if (!v12) {
    return _swiftEmptyArrayStorage;
  }
  uint64_t v38 = _swiftEmptyArrayStorage;
  int64_t v13 = 0;
  if (v12 > 0) {
    int64_t v13 = v12;
  }
  uint64_t v37 = v12;
  specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v13, 0);
  uint64_t v34 = v11;
  dispatch thunk of Collection.startIndex.getter(v10, v11);
  uint64_t v14 = v37;
  if (v37 < 0) {
    BUG();
  }
  uint64_t v30 = v3;
  uint64_t v31 = v10;
  while (1)
  {
    BOOL v15 = v14 == 0;
    uint64_t v16 = v14 - 1;
    if (v15) {
      BUG();
    }
    uint64_t v37 = v16;
    uint64_t v17 = (void (*)(void *, void))dispatch thunk of Collection.subscript.read(v25, v32, v10, v34);
    uint64_t v18 = v28;
    unint64_t v19 = (void *)v27;
    (*(void (**)(void *, uint64_t, uint64_t))(v36 + 16))(v28, v20, v27);
    v17(v25, 0);
    uint64_t v21 = v35;
    v26(v18, v25);
    if (v21) {
      break;
    }
    (*(void (**)(void *, void *))(v36 + 8))(v18, v19);
    unint64_t v19 = v38;
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v38);
    uint64_t v35 = 0;
    if (!isUniquelyReferenced_nonNull_native)
    {
      specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v19[2] + 1, 1);
      unint64_t v19 = v38;
    }
    unint64_t v23 = v19[2];
    if (v19[3] >> 1 <= v23)
    {
      specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v19[3] >= 2uLL, v23 + 1, 1);
      unint64_t v19 = v38;
    }
    void v19[2] = v23 + 1;
    outlined init with take of MLClassifierMetrics((uint64_t)v33, (uint64_t)v19+ ((*(unsigned __int8 *)(v29 + 80) + 32) & ~*(unsigned __int8 *)(v29 + 80))+ *(void *)(v29 + 72) * v23, type metadata accessor for WeightedDataSample);
    uint64_t v10 = v31;
    dispatch thunk of Collection.formIndex(after:)(v32, v31, v34);
    uint64_t v14 = v37;
    if (!v37) {
      return v19;
    }
  }
  (*(void (**)(void *, void *))(v36 + 8))(v18, v19);
  swift_release();
  return v19;
}

void *_sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lF11TabularData12FilledColumnVyAF0G0VySSGG_SSSgs5NeverOTg5(void (*a1)(void *), uint64_t a2)
{
  uint64_t v4 = v2;
  _OWORD v20[2] = a2;
  uint64_t v21 = a1;
  uint64_t v27 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for FilledColumn<Column<String>>);
  uint64_t v28 = lazy protocol witness table accessor for type FullyConnectedNetworkClassifier<Float, String> and conformance FullyConnectedNetworkClassifier<A, B>(&lazy protocol witness table cache variable for type FilledColumn<Column<String>> and conformance FilledColumn<A>, &demangling cache variable for type metadata for FilledColumn<Column<String>>, (uint64_t)&protocol conformance descriptor for FilledColumn<A>);
  uint64_t v5 = dispatch thunk of Collection.count.getter(v27, v28);
  if (!v5) {
    return _swiftEmptyArrayStorage;
  }
  uint64_t v6 = v5;
  uint64_t v25 = _swiftEmptyArrayStorage;
  int64_t v7 = 0;
  if (v5 > 0) {
    int64_t v7 = v5;
  }
  specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v7, 0);
  *(void *)&long long v24 = v25;
  dispatch thunk of Collection.startIndex.getter(v27, v28);
  if (v6 < 0) {
    BUG();
  }
  uint64_t v22 = v3;
  while (1)
  {
    if (v6-- == 0) {
      BUG();
    }
    uint64_t v26 = v4;
    uint64_t v9 = (void (*)(unsigned char *, void))dispatch thunk of Collection.subscript.read(v18, v23, v27, v28);
    uint64_t v11 = v10[1];
    v20[0] = *v10;
    v20[1] = v11;
    swift_bridgeObjectRetain(v11);
    v9(v18, 0);
    uint64_t v12 = v26;
    v21(v20);
    if (v12) {
      break;
    }
    uint64_t v26 = 0;
    swift_bridgeObjectRelease(v11);
    long long v13 = v19;
    uint64_t v14 = (void *)v24;
    uint64_t v25 = (void *)v24;
    unint64_t v15 = *(void *)(v24 + 16);
    unint64_t v16 = *(void *)(v24 + 24);
    if (v16 >> 1 <= v15)
    {
      long long v24 = v19;
      specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v16 >= 2, v15 + 1, 1);
      long long v13 = v24;
      uint64_t v14 = v25;
    }
    v14[2] = v15 + 1;
    *(void *)&long long v24 = v14;
    *(_OWORD *)&v14[2 * v15 + 4] = v13;
    dispatch thunk of Collection.formIndex(after:)(v23, v27, v28);
    uint64_t v4 = v26;
    if (!v6) {
      return (void *)v24;
    }
  }
  swift_release();
  return (void *)swift_bridgeObjectRelease(v11);
}

void *_sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSaySSG_SSs5NeverOTg5(void (*a1)(void *), uint64_t a2, uint64_t a3)
{
  uint64_t v21 = a2;
  uint64_t v22 = a1;
  int64_t v4 = *(void *)(a3 + 16);
  if (!v4) {
    return _swiftEmptyArrayStorage;
  }
  uint64_t v26 = v3;
  uint64_t v25 = _swiftEmptyArrayStorage;
  specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v4, 0);
  uint64_t v6 = _swiftEmptyArrayStorage;
  for (i = (uint64_t *)(a3 + 40); ; i += 2)
  {
    int64_t v20 = v4;
    uint64_t v8 = *i;
    v19[0] = *(i - 1);
    v19[1] = v8;
    swift_bridgeObjectRetain(v8);
    uint64_t v9 = v26;
    v22(v19);
    if (v9) {
      break;
    }
    uint64_t v26 = 0;
    swift_bridgeObjectRelease(v8);
    uint64_t v10 = v17;
    uint64_t v11 = v18;
    uint64_t v25 = v6;
    unint64_t v12 = v6[2];
    unint64_t v13 = v6[3];
    int64_t v14 = v12 + 1;
    if (v13 >> 1 <= v12)
    {
      uint64_t v23 = v18;
      uint64_t v24 = v17;
      specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v13 >= 2, v14, 1);
      uint64_t v11 = v23;
      uint64_t v10 = v24;
      uint64_t v6 = v25;
    }
    v6[2] = v14;
    uint64_t v15 = 2 * v12;
    v6[v15 + 4] = v10;
    v6[v15 + 5] = v11;
    int64_t v4 = v20 - 1;
    if (v20 == 1) {
      return v6;
    }
  }
  swift_release();
  swift_bridgeObjectRelease(v8);
  return v6;
}

void *_sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSnySiG_Sfs5NeverOTg5(void (*a1)(void *), uint64_t a2, uint64_t a3, uint64_t a4)
{
  v15[1] = a2;
  unint64_t v16 = a1;
  uint64_t v18 = a3;
  uint64_t v5 = a4 - a3;
  if (__OFSUB__(a4, a3)) {
    BUG();
  }
  if (a4 == a3) {
    return _swiftEmptyArrayStorage;
  }
  uint64_t v19 = a4;
  uint64_t v22 = _swiftEmptyArrayStorage;
  int64_t v6 = 0;
  if (v5 > 0) {
    int64_t v6 = a4 - a3;
  }
  specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v6, 0);
  if (v5 < 0) {
    BUG();
  }
  int64_t v7 = v22;
  uint64_t v8 = v18;
  uint64_t v9 = v19;
  while (1)
  {
    if (v9 == v8) {
      BUG();
    }
    v15[0] = v8;
    v16(v15);
    if (v4) {
      break;
    }
    int v10 = v20;
    uint64_t v22 = v7;
    unint64_t v11 = v7[2];
    unint64_t v12 = v7[3];
    unint64_t v13 = v11 + 1;
    if (v12 >> 1 <= v11)
    {
      uint64_t v17 = 0;
      int v21 = v20;
      specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v12 >= 2, v11 + 1, 1);
      unint64_t v13 = v11 + 1;
      int v10 = v21;
      uint64_t v4 = v17;
      int64_t v7 = v22;
    }
    v7[2] = v13;
    *((_DWORD *)v7 + v11 + 8) = v10;
    uint64_t v9 = v19;
    if (v19 < v18) {
      BUG();
    }
    if (v8 >= v19) {
      BUG();
    }
    if (v19 == ++v8) {
      return v7;
    }
  }
  swift_release();
  return v7;
}

void *_sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSay8CreateML17MLLinearRegressorV15ModelParametersVG_AHsAE_pTg5(void (*a1)(uint64_t, uint64_t *), uint64_t a2, uint64_t a3)
{
  return _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSay8CreateML17MLLinearRegressorV15ModelParametersVG_AHsAE_pTg5Tm(a1, a2, a3, type metadata accessor for MLLinearRegressor, (void (*)(BOOL, uint64_t, uint64_t))specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:));
}

void *_sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSaySSG_8CreateML16ColumnDescriptorVsAE_pTg5(void (*a1)(void *, uint64_t *), uint64_t a2, uint64_t a3)
{
  uint64_t v27 = a2;
  uint64_t v28 = a1;
  int64_t v4 = *(void *)(a3 + 16);
  if (!v4) {
    return _swiftEmptyArrayStorage;
  }
  uint64_t v34 = v3;
  uint64_t v33 = _swiftEmptyArrayStorage;
  specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v4, 0);
  int64_t v6 = _swiftEmptyArrayStorage;
  for (i = (uint64_t *)(a3 + 40); ; i += 2)
  {
    int64_t v26 = v4;
    uint64_t v8 = *i;
    v20[0] = *(i - 1);
    v20[1] = v8;
    swift_bridgeObjectRetain(v8);
    uint64_t v9 = v34;
    v28(v20, &v25);
    if (v9) {
      break;
    }
    uint64_t v34 = 0;
    swift_bridgeObjectRelease(v8);
    uint64_t v10 = v21;
    uint64_t v11 = v22;
    uint64_t v12 = v23;
    char v13 = v24;
    uint64_t v33 = v6;
    unint64_t v14 = v6[2];
    unint64_t v15 = v6[3];
    int64_t v16 = v14 + 1;
    if (v15 >> 1 <= v14)
    {
      uint64_t v30 = v23;
      uint64_t v29 = v22;
      uint64_t v31 = v21;
      char v18 = v24;
      int64_t v32 = v14 + 1;
      specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v15 >= 2, v16, 1);
      int64_t v16 = v32;
      char v13 = v18;
      uint64_t v12 = v30;
      uint64_t v11 = v29;
      uint64_t v10 = v31;
      int64_t v6 = v33;
    }
    v6[2] = v16;
    uint64_t v17 = 4 * v14;
    v6[v17 + 4] = v10;
    v6[v17 + 5] = v11;
    v6[v17 + 6] = v12;
    LOBYTE(v6[v17 + 7]) = v13;
    int64_t v4 = v26 - 1;
    if (v26 == 1) {
      return v6;
    }
  }
  swift_release();
  swift_bridgeObjectRelease(v8);
  return v6;
}

void *_sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSay18CreateMLComponents26ClassificationDistributionVySiGG_AIs5NeverOTg5(void (*a1)(uint64_t), uint64_t a2, uint64_t a3)
{
  uint64_t v4 = v3;
  uint64_t v19 = a2;
  int v20 = a1;
  uint64_t v21 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ClassificationDistribution<Int>);
  uint64_t v6 = *(void *)(v21 - 8);
  int64_t v7 = *(void *)(v6 + 64);
  uint64_t v8 = alloca(v7);
  uint64_t v9 = alloca(v7);
  int64_t v10 = *(void *)(a3 + 16);
  uint64_t result = _swiftEmptyArrayStorage;
  if (v10)
  {
    int64_t v26 = _swiftEmptyArrayStorage;
    uint64_t v24 = v6;
    uint64_t v25 = &v16;
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v10, 0);
    uint64_t v27 = v26;
    uint64_t v22 = (*(unsigned __int8 *)(v24 + 80) + 32) & ~*(unsigned __int8 *)(v24 + 80);
    uint64_t v12 = v22 + a3;
    uint64_t v23 = *(void *)(v24 + 72);
    while (1)
    {
      v20(v12);
      if (v4) {
        break;
      }
      int64_t v18 = v10;
      uint64_t v17 = 0;
      char v13 = v27;
      int64_t v26 = v27;
      unint64_t v14 = v27[2];
      if (v27[3] >> 1 <= v14)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v27[3] >= 2uLL, v14 + 1, 1);
        char v13 = v26;
      }
      v13[2] = v14 + 1;
      uint64_t v27 = v13;
      uint64_t v15 = v23;
      (*(void (**)(char *, uint64_t *, uint64_t))(v24 + 32))((char *)v13 + v22 + v23 * v14, v25, v21);
      v12 += v15;
      int64_t v10 = v18 - 1;
      uint64_t v4 = v17;
      if (v18 == 1) {
        return v27;
      }
    }
    return (void *)swift_release();
  }
  return result;
}

void *_sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSay18CreateMLComponents26ClassificationDistributionVySiGG_AHySSGs5NeverOTg5(void (*a1)(uint64_t), void *a2, uint64_t a3, uint64_t a4)
{
  return _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSay18CreateMLComponents26ClassificationDistributionVySiGG_AHySSGs5NeverOTg5Tm(a1, a2, a3, a4, &demangling cache variable for type metadata for ClassificationDistribution<String>, (void (*)(BOOL, unint64_t, uint64_t))specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:), &demangling cache variable for type metadata for ClassificationDistribution<Int>);
}

void *_sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSay8CreateML30MLLogisticRegressionClassifierV15ModelParametersVG_AHsAE_pTg5(void (*a1)(uint64_t, uint64_t *), uint64_t a2, uint64_t a3)
{
  return _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSay8CreateML17MLLinearRegressorV15ModelParametersVG_AHsAE_pTg5Tm(a1, a2, a3, type metadata accessor for MLLogisticRegressionClassifier, (void (*)(BOOL, uint64_t, uint64_t))specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:));
}

void *_sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSay8CreateML17MLLinearRegressorV15ModelParametersVG_AHsAE_pTg5Tm(void (*a1)(uint64_t, uint64_t *), uint64_t a2, uint64_t a3, uint64_t (*a4)(void), void (*a5)(BOOL, uint64_t, uint64_t))
{
  uint64_t v7 = v5;
  uint64_t v21 = a2;
  uint64_t v22 = a1;
  uint64_t v23 = a4;
  uint64_t v24 = *(void *)(a4(0) - 8);
  int64_t v9 = *(void *)(v24 + 64);
  int64_t v10 = alloca(v9);
  uint64_t v11 = alloca(v9);
  int64_t v26 = &v19;
  uint64_t v12 = *(void *)(a3 + 16);
  uint64_t result = _swiftEmptyArrayStorage;
  if (v12)
  {
    uint64_t v27 = _swiftEmptyArrayStorage;
    uint64_t v28 = a3;
    uint64_t v14 = v12;
    uint64_t v25 = a5;
    a5(0, v12, 0);
    uint64_t v15 = v27;
    uint64_t v16 = v28 + 32;
    while (1)
    {
      uint64_t v28 = v16;
      v22(v16, &v19);
      if (v7) {
        break;
      }
      uint64_t v20 = 0;
      uint64_t v17 = v15;
      uint64_t v27 = v15;
      unint64_t v18 = v15[2];
      if (v15[3] >> 1 <= v18)
      {
        v25(v15[3] >= 2uLL, v18 + 1, 1);
        uint64_t v17 = v27;
      }
      void v17[2] = v18 + 1;
      uint64_t v15 = v17;
      outlined init with take of MLClassifierMetrics((uint64_t)v26, (uint64_t)v17+ ((*(unsigned __int8 *)(v24 + 80) + 32) & ~*(unsigned __int8 *)(v24 + 80))+ *(void *)(v24 + 72) * v18, v23);
      uint64_t v16 = v28 + 80;
      --v14;
      uint64_t v7 = v20;
      if (!v14) {
        return v17;
      }
    }
    return (void *)swift_release();
  }
  return result;
}

void *_sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lF11TabularData12FilledColumnVyAF0G0VySSGG_SSs5NeverOTg5(void (*a1)(void *), uint64_t a2)
{
  uint64_t v34 = v2;
  v25[2] = a2;
  int64_t v26 = a1;
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for FilledColumn<Column<String>>);
  uint64_t v33 = lazy protocol witness table accessor for type FullyConnectedNetworkClassifier<Float, String> and conformance FullyConnectedNetworkClassifier<A, B>(&lazy protocol witness table cache variable for type FilledColumn<Column<String>> and conformance FilledColumn<A>, &demangling cache variable for type metadata for FilledColumn<Column<String>>, (uint64_t)&protocol conformance descriptor for FilledColumn<A>);
  uint64_t v5 = dispatch thunk of Collection.count.getter(v4, v33);
  if (!v5) {
    return _swiftEmptyArrayStorage;
  }
  uint64_t v6 = v5;
  int64_t v32 = _swiftEmptyArrayStorage;
  int64_t v7 = 0;
  if (v5 > 0) {
    int64_t v7 = v5;
  }
  specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v7, 0);
  uint64_t v8 = v4;
  int64_t v9 = v32;
  uint64_t v31 = v8;
  dispatch thunk of Collection.startIndex.getter(v8, v33);
  if (v6 < 0) {
    BUG();
  }
  uint64_t v27 = v3;
  while (1)
  {
    if (v6-- == 0) {
      BUG();
    }
    uint64_t v11 = (void (*)(unsigned char *, void))dispatch thunk of Collection.subscript.read(v22, v30, v31, v33);
    uint64_t v13 = v12[1];
    v25[0] = *v12;
    v25[1] = v13;
    swift_bridgeObjectRetain(v13);
    v11(v22, 0);
    uint64_t v14 = v34;
    v26(v25);
    if (v14) {
      break;
    }
    uint64_t v34 = 0;
    swift_bridgeObjectRelease(v13);
    uint64_t v15 = v23;
    uint64_t v16 = v24;
    int64_t v32 = v9;
    unint64_t v17 = v9[2];
    unint64_t v18 = v9[3];
    int64_t v19 = v17 + 1;
    if (v18 >> 1 <= v17)
    {
      uint64_t v28 = v24;
      uint64_t v29 = v23;
      specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v18 >= 2, v19, 1);
      uint64_t v16 = v28;
      uint64_t v15 = v29;
      int64_t v9 = v32;
    }
    v9[2] = v19;
    uint64_t v20 = 2 * v17;
    v9[v20 + 4] = v15;
    v9[v20 + 5] = v16;
    dispatch thunk of Collection.formIndex(after:)(v30, v31, v33);
    if (!v6) {
      return v9;
    }
  }
  swift_release();
  swift_bridgeObjectRelease(v13);
  return v9;
}

void *_sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSay18CreateMLComponents16AnnotatedFeatureVySSSay0D2ML16MLObjectDetectorV20NormalizedAnnotationVGGG_SayAK06ObjectL0VGsAE_pTg5(void (*a1)(uint64_t, uint64_t *), void *a2, uint64_t a3)
{
  unint64_t v17 = a2;
  unint64_t v18 = a1;
  int64_t v4 = *(void *)(a3 + 16);
  if (!v4) {
    return _swiftEmptyArrayStorage;
  }
  uint64_t v23 = _swiftEmptyArrayStorage;
  specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v4, 0);
  uint64_t v6 = _swiftEmptyArrayStorage;
  uint64_t v7 = *(void *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AnnotatedFeature<String, [MLObjectDetector.NormalizedAnnotation]>)
                 - 8);
  uint64_t v8 = ((*(unsigned __int8 *)(v7 + 80) + 32) & ~*(unsigned __int8 *)(v7 + 80)) + a3;
  uint64_t v19 = *(void *)(v7 + 72);
  while (1)
  {
    int64_t v9 = v6;
    uint64_t v6 = v17;
    v18(v8, &v16);
    if (v3) {
      break;
    }
    uint64_t v10 = v15;
    uint64_t v6 = v9;
    uint64_t v23 = v9;
    unint64_t v11 = v9[2];
    unint64_t v12 = v6[3];
    int64_t v13 = v11 + 1;
    if (v12 >> 1 <= v11)
    {
      int64_t v22 = v11 + 1;
      uint64_t v21 = v15;
      uint64_t v20 = 0;
      specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v12 >= 2, v13, 1);
      int64_t v13 = v22;
      uint64_t v10 = v21;
      uint64_t v3 = v20;
      uint64_t v6 = v23;
    }
    v6[2] = v13;
    v6[v11 + 4] = v10;
    v8 += v19;
    if (!--v4) {
      return v6;
    }
  }
  swift_release();
  return v6;
}

void *_sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSay10Foundation3URLVG_Say8CreateML16MLObjectDetectorV16ObjectAnnotationVGsAE_pTg5(void (*a1)(uint64_t, uint64_t *), void *a2, uint64_t a3)
{
  return _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSay10Foundation3URLVG_SaySS5label_Sd10confidencetGsAE_pTg5Tm(a1, a2, a3, (void (*)(BOOL, unint64_t, uint64_t))specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:));
}

void *_sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSaySo8NSNumberCG_14NeuralNetworks6TensorVs5NeverOTg5(void (*a1)(id *), void *a2, uint64_t a3)
{
  return _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSaySo8NSNumberCG_14NeuralNetworks6TensorVs5NeverOTg5Tm(a1, a2, a3);
}

void *_sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSaySo8NSNumberCG_14NeuralNetworks6TensorVs5NeverOTg5Tm(void (*a1)(id *), void *a2, uint64_t a3)
{
  uint64_t v4 = v3;
  uint64_t v21 = a2;
  int64_t v22 = a1;
  uint64_t v23 = type metadata accessor for Tensor(0);
  uint64_t v24 = *(void *)(v23 - 8);
  int64_t v6 = *(void *)(v24 + 64);
  uint64_t v7 = alloca(v6);
  uint64_t v8 = alloca(v6);
  uint64_t v27 = &v18;
  uint64_t v9 = a3 & 0xFFFFFFFFFFFFF8;
  if ((a3 & 0x4000000000000001) != 0)
  {
    if (a3) {
      uint64_t v9 = a3;
    }
    swift_bridgeObjectRetain(a3);
    uint64_t v10 = _CocoaArrayWrapper.endIndex.getter(v9);
    swift_bridgeObjectRelease(a3);
  }
  else
  {
    uint64_t v10 = *(void *)((char *)&dword_10 + (a3 & 0xFFFFFFFFFFFFF8));
  }
  if (!v10) {
    return _swiftEmptyArrayStorage;
  }
  uint64_t v25 = a3;
  uint64_t v29 = _swiftEmptyArrayStorage;
  int64_t v11 = 0;
  if (v10 > 0) {
    int64_t v11 = v10;
  }
  specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v11, 0);
  if (v10 < 0) {
    BUG();
  }
  unint64_t v12 = v29;
  uint64_t v13 = 0;
  uint64_t v26 = v10;
  while (1)
  {
    if (v10 == v13) {
      BUG();
    }
    uint64_t v28 = v12;
    id v14 = (v25 & 0xC000000000000003) != 0
        ? (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v13, v25)
        : *(id *)(v25 + 8 * v13 + 32);
    uint64_t v15 = v14;
    id v19 = v14;
    unint64_t v12 = v21;
    v22(&v19);
    if (v4) {
      break;
    }
    uint64_t v20 = 0;

    unint64_t v12 = v28;
    uint64_t v29 = v28;
    unint64_t v16 = v28[2];
    if (v28[3] >> 1 <= v16)
    {
      specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v28[3] >= 2uLL, v16 + 1, 1);
      unint64_t v12 = v29;
    }
    ++v13;
    v12[2] = v16 + 1;
    (*(void (**)(char *, uint64_t *, uint64_t))(v24 + 32))((char *)v12+ ((*(unsigned __int8 *)(v24 + 80) + 32) & ~*(unsigned __int8 *)(v24 + 80))+ *(void *)(v24 + 72) * v16, v27, v23);
    uint64_t v10 = v26;
    uint64_t v4 = v20;
    if (v26 == v13) {
      return v12;
    }
  }
  swift_release();

  return v12;
}

char *_sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSnySiG_20MLModelSpecification38ItemSimilarityRecommenderConfigurationV12SimilarItemsVs5NeverOTg5(void (*a1)(uint64_t *), uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5 = v4;
  uint64_t v21 = a2;
  int64_t v22 = a1;
  uint64_t v23 = type metadata accessor for ItemSimilarityRecommenderConfiguration.SimilarItems(0);
  uint64_t v24 = *(void *)(v23 - 8);
  int64_t v8 = *(void *)(v24 + 64);
  uint64_t v9 = alloca(v8);
  uint64_t v10 = alloca(v8);
  uint64_t v25 = &v19;
  uint64_t v26 = a3;
  uint64_t v11 = a4 - a3;
  if (__OFSUB__(a4, a3)) {
    BUG();
  }
  if (a4 == a3) {
    return (char *)_swiftEmptyArrayStorage;
  }
  uint64_t v27 = a4;
  uint64_t v28 = (char *)_swiftEmptyArrayStorage;
  int64_t v12 = 0;
  if (v11 > 0) {
    int64_t v12 = a4 - a3;
  }
  specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v12, 0);
  if (v11 < 0) {
    BUG();
  }
  uint64_t v13 = v28;
  uint64_t v14 = v26;
  uint64_t v15 = v27;
  while (1)
  {
    if (v15 == v14) {
      BUG();
    }
    uint64_t v19 = v14;
    v22(&v19);
    if (v5) {
      break;
    }
    uint64_t v20 = 0;
    uint64_t v28 = v13;
    unint64_t v16 = *((void *)v13 + 2);
    unint64_t v17 = v13;
    if (*((void *)v13 + 3) >> 1 <= v16)
    {
      specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(*((void *)v13 + 3) >= 2uLL, v16 + 1, 1);
      unint64_t v17 = v28;
    }
    *((void *)v17 + 2) = v16 + 1;
    (*(void (**)(char *, uint64_t *, uint64_t))(v24 + 32))(&v17[((*(unsigned __int8 *)(v24 + 80) + 32) & ~*(unsigned __int8 *)(v24 + 80)) + *(void *)(v24 + 72) * v16], v25, v23);
    uint64_t v15 = v27;
    if (v27 < v26) {
      BUG();
    }
    if (v14 >= v27) {
      BUG();
    }
    uint64_t v13 = v17;
    ++v14;
    uint64_t v5 = v20;
    if (v27 == v14) {
      return v13;
    }
  }
  swift_release();
  return v13;
}

void *_sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSnySiG_8CreateML14RecommendationVyAG13MLRecommenderV10IdentifierOAMGs5NeverOTg5(void (*a1)(void *), uint64_t a2, uint64_t a3, uint64_t a4)
{
  v27[1] = a2;
  uint64_t v28 = a1;
  uint64_t v32 = a3;
  uint64_t v5 = a4 - a3;
  if (__OFSUB__(a4, a3)) {
    BUG();
  }
  if (a4 == a3) {
    return _swiftEmptyArrayStorage;
  }
  uint64_t v33 = a4;
  uint64_t v34 = _swiftEmptyArrayStorage;
  int64_t v6 = 0;
  if (v5 > 0) {
    int64_t v6 = a4 - a3;
  }
  specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v6, 0);
  if (v5 < 0) {
    BUG();
  }
  uint64_t v7 = v34;
  uint64_t v8 = v32;
  uint64_t v9 = v33;
  while (1)
  {
    if (v9 == v8) {
      BUG();
    }
    v27[0] = v8;
    v28(v27);
    if (v4) {
      break;
    }
    long long v10 = v21;
    char v11 = v22;
    long long v12 = v23;
    char v13 = v24;
    uint64_t v14 = v25;
    uint64_t v15 = v26;
    uint64_t v34 = v7;
    unint64_t v16 = v7[2];
    unint64_t v17 = v7[3];
    int64_t v18 = v16 + 1;
    if (v17 >> 1 <= v16)
    {
      char v36 = v24;
      char v35 = v22;
      uint64_t v30 = v26;
      uint64_t v29 = v25;
      int64_t v31 = v16 + 1;
      specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v17 >= 2, v18, 1);
      int64_t v18 = v31;
      char v13 = v36;
      char v11 = v35;
      uint64_t v15 = v30;
      uint64_t v14 = v29;
      long long v12 = v23;
      long long v10 = v21;
      uint64_t v7 = v34;
    }
    unint64_t v19 = v16 << 6;
    v7[2] = v18;
    *(_OWORD *)((char *)v7 + v19 + 32) = v10;
    *((unsigned char *)v7 + v19 + 48) = v11 & 1;
    *(_OWORD *)((char *)v7 + v19 + 56) = v12;
    *((unsigned char *)v7 + v19 + 72) = v13 & 1;
    *(void *)((char *)v7 + v19 + 80) = v14;
    *(void *)((char *)v7 + v19 + 88) = v15;
    uint64_t v9 = v33;
    if (v33 < v32) {
      BUG();
    }
    if (v8 >= v33) {
      BUG();
    }
    if (v33 == ++v8) {
      return v7;
    }
  }
  swift_release();
  return v7;
}

void *_sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSnySiG_8CreateML12MLIdentifier_ps5NeverOTg5(void (*a1)(uint64_t *), uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v26 = a2;
  uint64_t v27 = a1;
  uint64_t v29 = a3;
  uint64_t v5 = a4 - a3;
  if (__OFSUB__(a4, a3)) {
    BUG();
  }
  if (a4 == a3) {
    return _swiftEmptyArrayStorage;
  }
  uint64_t v30 = a4;
  uint64_t v31 = v4;
  v32[0] = (uint64_t)_swiftEmptyArrayStorage;
  int64_t v6 = 0;
  if (v5 > 0) {
    int64_t v6 = a4 - a3;
  }
  specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v6, 0);
  if (v5 < 0) {
    BUG();
  }
  uint64_t v7 = (void *)v32[0];
  uint64_t v8 = v29;
  uint64_t v9 = v30;
  while (1)
  {
    if (v9 == v8) {
      BUG();
    }
    uint64_t v23 = v8;
    uint64_t v10 = v31;
    v27(&v23);
    if (v10) {
      break;
    }
    uint64_t v31 = 0;
    v32[0] = (uint64_t)v7;
    unint64_t v11 = v7[3];
    unint64_t v28 = v7[2];
    if (v11 >> 1 <= v28) {
      specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v11 >= 2, v28 + 1, 1);
    }
    uint64_t v12 = v21;
    uint64_t v24 = v22;
    uint64_t v13 = __swift_mutable_project_boxed_opaque_existential_1((uint64_t)v20, v21);
    uint64_t v25 = &v19;
    uint64_t v14 = *(void *)(v12 - 8);
    int64_t v15 = *(void *)(v14 + 64);
    unint64_t v16 = alloca(v15);
    unint64_t v17 = alloca(v15);
    (*(void (**)(uint64_t *, uint64_t, uint64_t))(v14 + 16))(&v19, v13, v12);
    specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)(v28, (uint64_t)&v19, v32, v12, v24);
    __swift_destroy_boxed_opaque_existential_1Tm(v20);
    uint64_t v9 = v30;
    if (v30 < v29) {
      BUG();
    }
    if (v8 >= v30) {
      BUG();
    }
    uint64_t v7 = (void *)v32[0];
    if (v30 == ++v8) {
      return v7;
    }
  }
  swift_release();
  return v7;
}

void *_sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSnySiG_Sis5NeverOTg5(void (*a1)(void *), uint64_t a2, uint64_t a3, uint64_t a4)
{
  v16[1] = a2;
  unint64_t v17 = a1;
  uint64_t v20 = a3;
  uint64_t v5 = a4 - a3;
  if (__OFSUB__(a4, a3)) {
    BUG();
  }
  if (a4 == a3) {
    return _swiftEmptyArrayStorage;
  }
  uint64_t v21 = a4;
  uint64_t v22 = _swiftEmptyArrayStorage;
  int64_t v6 = 0;
  if (v5 > 0) {
    int64_t v6 = a4 - a3;
  }
  specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v6, 0);
  if (v5 < 0) {
    BUG();
  }
  uint64_t v7 = v22;
  uint64_t v8 = v20;
  uint64_t v9 = v21;
  while (1)
  {
    if (v9 == v8) {
      BUG();
    }
    v16[0] = v8;
    v17(v16);
    if (v4) {
      break;
    }
    uint64_t v10 = v15;
    uint64_t v22 = v7;
    unint64_t v11 = v7[2];
    unint64_t v12 = v7[3];
    int64_t v13 = v11 + 1;
    if (v12 >> 1 <= v11)
    {
      uint64_t v18 = v15;
      uint64_t v19 = 0;
      specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v12 >= 2, v13, 1);
      uint64_t v10 = v18;
      uint64_t v4 = v19;
      uint64_t v7 = v22;
    }
    v7[2] = v13;
    v7[v11 + 4] = v10;
    uint64_t v9 = v21;
    if (v21 < v20) {
      BUG();
    }
    if (v8 >= v21) {
      BUG();
    }
    if (v21 == ++v8) {
      return v7;
    }
  }
  swift_release();
  return v7;
}

void *_sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSaySSG_14NeuralNetworks6TensorVs5NeverOTg5(void (*a1)(void *), uint64_t a2, uint64_t a3, uint64_t a4)
{
  return _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSaySSG_14NeuralNetworks6TensorVs5NeverOTg5Tm(a1, a2, a3, a4, (uint64_t (*)(void))&type metadata accessor for Tensor, (void (*)(BOOL, void *, uint64_t))specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:));
}

void *_sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSay6CoreML13MLShapedArrayVySfGG_18CreateMLComponents16AnnotatedFeatureVyAISSGs5NeverOTg5(void (*a1)(uint64_t), void *a2, uint64_t a3, uint64_t a4)
{
  return _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSay18CreateMLComponents26ClassificationDistributionVySiGG_AHySSGs5NeverOTg5Tm(a1, a2, a3, a4, &demangling cache variable for type metadata for AnnotatedFeature<MLShapedArray<Float>, String>, (void (*)(BOOL, unint64_t, uint64_t))specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:), &demangling cache variable for type metadata for MLShapedArray<Float>);
}

void *_sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSay18CreateMLComponents26ClassificationDistributionVySiGG_AHySSGs5NeverOTg5Tm(void (*a1)(uint64_t), void *a2, uint64_t a3, uint64_t a4, uint64_t *a5, void (*a6)(BOOL, unint64_t, uint64_t), uint64_t *a7)
{
  uint64_t v22 = a2;
  uint64_t v23 = a1;
  uint64_t v24 = __swift_instantiateConcreteTypeFromMangledName(a5);
  uint64_t v25 = *(void *)(v24 - 8);
  int64_t v10 = *(void *)(v25 + 64);
  unint64_t v11 = alloca(v10);
  unint64_t v12 = alloca(v10);
  unint64_t v28 = (uint64_t *)&v21;
  unint64_t v13 = *(void *)(a3 + 16);
  if (!v13) {
    return _swiftEmptyArrayStorage;
  }
  uint64_t v30 = v7;
  uint64_t v29 = _swiftEmptyArrayStorage;
  uint64_t v27 = a6;
  a6(0, v13, 0);
  uint64_t v14 = v29;
  uint64_t v15 = *(void *)(__swift_instantiateConcreteTypeFromMangledName(a7) - 8);
  uint64_t v16 = ((*(unsigned __int8 *)(v15 + 80) + 32) & ~*(unsigned __int8 *)(v15 + 80)) + a3;
  uint64_t v26 = *(void *)(v15 + 72);
  while (1)
  {
    unint64_t v21 = v13;
    unint64_t v17 = v14;
    uint64_t v14 = v22;
    uint64_t v18 = v30;
    v23(v16);
    if (v18) {
      break;
    }
    uint64_t v30 = 0;
    uint64_t v14 = v17;
    uint64_t v29 = v17;
    unint64_t v19 = v17[2];
    if (v17[3] >> 1 <= v19)
    {
      v27(v17[3] >= 2uLL, v19 + 1, 1);
      uint64_t v14 = v29;
    }
    v14[2] = v19 + 1;
    (*(void (**)(char *, uint64_t *, uint64_t))(v25 + 32))((char *)v14+ ((*(unsigned __int8 *)(v25 + 80) + 32) & ~*(unsigned __int8 *)(v25 + 80))+ *(void *)(v25 + 72) * v19, v28, v24);
    v16 += v26;
    unint64_t v13 = v21 - 1;
    if (v21 == 1) {
      return v14;
    }
  }
  swift_release();
  return v14;
}

void *_sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSay10Foundation3URLVG_Say8CreateML18MLActionClassifierV10PredictionVGsAE_pTg5(void (*a1)(uint64_t, uint64_t *), void *a2, uint64_t a3)
{
  return _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSay10Foundation3URLVG_SaySS5label_Sd10confidencetGsAE_pTg5Tm(a1, a2, a3, (void (*)(BOOL, unint64_t, uint64_t))specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:));
}

void *_sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSay10Foundation3URLVG_Say8CreateML22MLHandActionClassifierV10PredictionVGsAE_pTg5(void (*a1)(uint64_t, uint64_t *), void *a2, uint64_t a3)
{
  return _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSay10Foundation3URLVG_SaySS5label_Sd10confidencetGsAE_pTg5Tm(a1, a2, a3, (void (*)(BOOL, unint64_t, uint64_t))specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:));
}

void *_sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSay10Foundation3URLVG_SaySS5label_Sd10confidencetGsAE_pTg5Tm(void (*a1)(uint64_t, uint64_t *), void *a2, uint64_t a3, void (*a4)(BOOL, unint64_t, uint64_t))
{
  uint64_t v18 = a2;
  unint64_t v19 = a1;
  unint64_t v5 = *(void *)(a3 + 16);
  if (!v5) {
    return &_swiftEmptyArrayStorage;
  }
  uint64_t v25 = &_swiftEmptyArrayStorage;
  unint64_t v21 = a4;
  a4(0, v5, 0);
  uint64_t v7 = &_swiftEmptyArrayStorage;
  uint64_t v8 = *(void *)(type metadata accessor for URL(0) - 8);
  uint64_t v9 = ((*(unsigned __int8 *)(v8 + 80) + 32) & ~*(unsigned __int8 *)(v8 + 80)) + a3;
  uint64_t v20 = *(void *)(v8 + 72);
  while (1)
  {
    int64_t v10 = v7;
    uint64_t v7 = v18;
    v19(v9, &v17);
    if (v4) {
      break;
    }
    uint64_t v11 = v16;
    uint64_t v7 = v10;
    uint64_t v25 = v10;
    unint64_t v12 = v10[2];
    unint64_t v13 = v7[3];
    unint64_t v14 = v12 + 1;
    if (v13 >> 1 <= v12)
    {
      unint64_t v24 = v12 + 1;
      uint64_t v23 = v16;
      uint64_t v22 = 0;
      v21(v13 >= 2, v14, 1);
      unint64_t v14 = v24;
      uint64_t v11 = v23;
      uint64_t v4 = v22;
      uint64_t v7 = v25;
    }
    v7[2] = v14;
    v7[v12 + 4] = v11;
    v9 += v20;
    if (!--v5) {
      return v7;
    }
  }
  swift_release(v10);
  return v7;
}

void *_sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSaySSG_20MLModelSpecification18FeatureDescriptionVs5NeverOTg5(void (*a1)(void *), uint64_t a2, uint64_t a3, uint64_t a4)
{
  return _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSaySSG_14NeuralNetworks6TensorVs5NeverOTg5Tm(a1, a2, a3, a4, (uint64_t (*)(void))&type metadata accessor for FeatureDescription, (void (*)(BOOL, void *, uint64_t))specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:));
}

void *_sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSaySSG_14NeuralNetworks6TensorVs5NeverOTg5Tm(void (*a1)(void *), uint64_t a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(void), void (*a6)(BOOL, void *, uint64_t))
{
  v25[2] = a2;
  uint64_t v26 = a1;
  uint64_t v27 = a5(0);
  uint64_t v28 = *(void *)(v27 - 8);
  int64_t v9 = *(void *)(v28 + 64);
  int64_t v10 = alloca(v9);
  uint64_t v11 = alloca(v9);
  uint64_t v30 = &v24;
  unint64_t v12 = *(void **)(a3 + 16);
  if (!v12) {
    return &_swiftEmptyArrayStorage;
  }
  uint64_t v32 = v6;
  uint64_t v31 = &_swiftEmptyArrayStorage;
  unint64_t v13 = a6;
  unint64_t v14 = v12;
  uint64_t v29 = v13;
  v13(0, v12, 0);
  uint64_t v33 = v31;
  for (i = (uint64_t *)(a3 + 40); ; i += 2)
  {
    uint64_t v16 = *i;
    v25[0] = *(i - 1);
    v25[1] = v16;
    swift_bridgeObjectRetain(v16);
    uint64_t v17 = v32;
    v26(v25);
    if (v17) {
      break;
    }
    uint64_t v32 = 0;
    swift_bridgeObjectRelease(v16);
    uint64_t v18 = v33;
    uint64_t v31 = v33;
    unint64_t v19 = v33[2];
    unint64_t v20 = v33[3];
    unint64_t v21 = (void *)(v19 + 1);
    if (v20 >> 1 <= v19)
    {
      uint64_t v33 = (void *)(v19 + 1);
      v29(v20 >= 2, v21, 1);
      unint64_t v21 = v33;
      uint64_t v18 = v31;
    }
    v18[2] = v21;
    int v22 = *(unsigned __int8 *)(v28 + 80);
    uint64_t v33 = v18;
    (*(void (**)(char *, uint64_t *, uint64_t))(v28 + 32))((char *)v18 + ((v22 + 32) & ~v22) + *(void *)(v28 + 72) * v19, v30, v27);
    unint64_t v14 = (void *)((char *)v14 - 1);
    if (!v14) {
      return v33;
    }
  }
  swift_release(v33);
  return (void *)swift_bridgeObjectRelease(v16);
}

uint64_t static MLHandPoseClassifier._defaultSessionParameters.getter()
{
  uint64_t v1 = v0;
  if (one-time initialization token for _defaultSessionParameters != -1) {
    swift_once(&one-time initialization token for _defaultSessionParameters, one-time initialization function for _defaultSessionParameters);
  }
  uint64_t v2 = type metadata accessor for MLTrainingSessionParameters(0);
  uint64_t v3 = __swift_project_value_buffer(v2, (uint64_t)static MLHandPoseClassifier._defaultSessionParameters);
  return outlined init with copy of MLTrainingSessionParameters(v3, v1, type metadata accessor for MLTrainingSessionParameters);
}

id MLHandPoseClassifier.model.getter()
{
  uint64_t v1 = type metadata accessor for MLHandPoseClassifier(0);
  return *(id *)(v0 + *(int *)(v1 + 20));
}

uint64_t type metadata accessor for MLHandPoseClassifier(uint64_t a1)
{
  uint64_t result = type metadata singleton initialization cache for MLHandPoseClassifier;
  if (!type metadata singleton initialization cache for MLHandPoseClassifier) {
    return swift_getSingletonMetadata(a1, &nominal type descriptor for MLHandPoseClassifier);
  }
  return result;
}

void MLHandPoseClassifier.model.setter(uint64_t a1)
{
  uint64_t v2 = *(int *)(type metadata accessor for MLHandPoseClassifier(0) + 20);

  *(void *)(v1 + v2) = a1;
}

void (*MLHandPoseClassifier.model.modify())()
{
  return MLBoostedTreeRegressor.ModelParameters.maxDepth.modify;
}

uint64_t MLHandPoseClassifier.modelParameters.getter()
{
  uint64_t v2 = v0;
  uint64_t v3 = type metadata accessor for MLHandPoseClassifier(0);
  return outlined init with copy of MLTrainingSessionParameters(v1 + *(int *)(v3 + 24), v2, type metadata accessor for MLHandPoseClassifier.ModelParameters);
}

uint64_t MLHandPoseClassifier.trainingMetrics.getter()
{
  uint64_t v2 = v0;
  uint64_t v3 = type metadata accessor for MLHandPoseClassifier(0);
  return outlined init with copy of MLTrainingSessionParameters(v1 + *(int *)(v3 + 28), v2, type metadata accessor for MLClassifierMetrics);
}

uint64_t MLHandPoseClassifier.trainingMetrics.setter(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for MLHandPoseClassifier(0);
  return outlined assign with take of MLClassifierMetrics(a1, v1 + *(int *)(v2 + 28));
}

uint64_t outlined assign with take of MLClassifierMetrics(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = type metadata accessor for MLClassifierMetrics(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v2 - 8) + 40))(a2, a1, v2);
  return a2;
}

void (*MLHandPoseClassifier.trainingMetrics.modify())()
{
  return MLBoostedTreeRegressor.ModelParameters.maxDepth.modify;
}

uint64_t MLHandPoseClassifier.validationMetrics.getter()
{
  uint64_t v2 = v0;
  uint64_t v3 = type metadata accessor for MLHandPoseClassifier(0);
  return outlined init with copy of MLTrainingSessionParameters(v1 + *(int *)(v3 + 32), v2, type metadata accessor for MLClassifierMetrics);
}

uint64_t MLHandPoseClassifier.validationMetrics.setter(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for MLHandPoseClassifier(0);
  return outlined assign with take of MLClassifierMetrics(a1, v1 + *(int *)(v2 + 32));
}

void (*MLHandPoseClassifier.validationMetrics.modify())()
{
  return MLBoostedTreeRegressor.ModelParameters.maxDepth.modify;
}

uint64_t MLHandPoseClassifier.init(trainingData:parameters:)(uint64_t a1, uint64_t a2, __m128 a3)
{
  uint64_t v78 = v4;
  uint64_t v75 = a2;
  uint64_t v5 = v3;
  uint64_t v59 = *(void *)(type metadata accessor for MLHandPoseClassifier.ModelParameters(0) - 8);
  int64_t v58 = *(void *)(v59 + 64);
  uint64_t v6 = alloca(v58);
  uint64_t v7 = alloca(v58);
  uint64_t v61 = &v56;
  uint64_t v8 = (int *)type metadata accessor for MLHandPoseClassifier(0);
  int64_t v9 = *(void *)(*((void *)v8 - 1) + 64);
  int64_t v10 = alloca(v9);
  uint64_t v11 = alloca(v9);
  char v57 = &v56;
  uint64_t v67 = type metadata accessor for MLHandPoseClassifier.ModelParameters.ValidationData(0);
  int64_t v12 = *(void *)(*(void *)(v67 - 8) + 64);
  unint64_t v13 = alloca(v12);
  unint64_t v14 = alloca(v12);
  uint64_t v73 = &v56;
  int64_t v15 = *(void *)(*(void *)(type metadata accessor for MLHandPoseClassifier.DataSource(0) - 8) + 64);
  uint64_t v16 = alloca(v15);
  uint64_t v17 = alloca(v15);
  uint64_t v60 = &v56;
  uint64_t v18 = v8[5];
  id v19 = objc_allocWithZone((Class)MLModel);
  id v20 = [v19 init];
  uint64_t v70 = v18;
  *(void *)(v5 + v18) = v20;
  uint64_t v21 = v5 + v8[7];
  MLClassifierMetrics.init()();
  uint64_t v22 = v8[8];
  uint64_t v68 = v5;
  uint64_t v23 = v75;
  uint64_t v69 = v5 + v22;
  *(double *)a3.i64 = MLClassifierMetrics.init()();
  uint64_t v72 = a1;
  uint64_t v24 = v78;
  MLHandPoseClassifier.ModelParameters.ValidationData.extractAnnotations(trainingData:)((uint64_t *)&v76, &v62, a3);
  uint64_t v78 = v24;
  if (v24)
  {
    outlined destroy of MLActivityClassifier.ModelParameters(v23, type metadata accessor for MLHandPoseClassifier.ModelParameters);
    uint64_t v25 = v72;
LABEL_3:
    outlined destroy of MLActivityClassifier.ModelParameters(v25, type metadata accessor for MLHandPoseClassifier.DataSource);
LABEL_4:
    uint64_t v26 = v68;
    uint64_t v27 = v69;
    uint64_t v28 = v70;
LABEL_5:

    outlined destroy of MLActivityClassifier.ModelParameters(v21, type metadata accessor for MLClassifierMetrics);
    return outlined destroy of MLActivityClassifier.ModelParameters(v27, type metadata accessor for MLClassifierMetrics);
  }
  uint64_t v30 = (uint64_t)v76;
  uint64_t v65 = v62;
  char v80 = v63;
  int v31 = v77;
  if (v77 == 0xFF)
  {
    int v74 = v77;
    uint64_t v33 = v78;
    MLHandPoseClassifier.DataSource.keypointsWithAnnotations()(a3);
    uint64_t v78 = v33;
    uint64_t v34 = (uint64_t)v76;
    char v79 = v77;
  }
  else
  {
    uint64_t v71 = v21;
    type metadata accessor for MLHandPoseClassifier.FeatureExtractor();
    uint64_t v62 = v30;
    char v63 = v31 & 1;
    outlined copy of Result<_DataTable, Error>(v30, v31);
    uint64_t v32 = v78;
    static MLHandPoseClassifier.FeatureExtractor.extractFeatures(from:startingSessionId:)((uint64_t)&v62, 0);
    uint64_t v78 = v32;
    if (v32)
    {
      outlined consume of MLDataTable?(v65, v80);
      outlined consume of MLDataTable?(v30, v31);
      outlined destroy of MLActivityClassifier.ModelParameters(v75, type metadata accessor for MLHandPoseClassifier.ModelParameters);
      outlined destroy of MLActivityClassifier.ModelParameters(v72, type metadata accessor for MLHandPoseClassifier.DataSource);
      outlined consume of MLDataTable?(v30, v31);
LABEL_24:
      uint64_t v26 = v68;
      uint64_t v27 = v69;
      uint64_t v28 = v70;
      uint64_t v21 = v71;
      goto LABEL_5;
    }
    int v74 = v31;
    outlined consume of MLDataTable?(v30, v31);
    uint64_t v34 = (uint64_t)v76;
    char v79 = v77;
    uint64_t v21 = v71;
  }
  char v35 = v80;
  uint64_t v64 = v30;
  uint64_t v66 = v34;
  if (v80 != -1)
  {
    type metadata accessor for MLHandPoseClassifier.FeatureExtractor();
    uint64_t v36 = v65;
    uint64_t v62 = v65;
    char v63 = v35 & 1;
    uint64_t v37 = v78;
    static MLHandPoseClassifier.FeatureExtractor.extractFeatures(from:startingSessionId:)((uint64_t)&v62, 0);
    uint64_t v78 = v37;
    if (v37)
    {
      outlined consume of MLDataTable?(v64, v74);
      outlined consume of Result<_DataTable, Error>(v66, v79);
      outlined destroy of MLActivityClassifier.ModelParameters(v75, type metadata accessor for MLHandPoseClassifier.ModelParameters);
      outlined destroy of MLActivityClassifier.ModelParameters(v72, type metadata accessor for MLHandPoseClassifier.DataSource);
      outlined consume of MLDataTable?(v36, v35);
      goto LABEL_4;
    }
    uint64_t v71 = v21;
LABEL_21:
    uint64_t v46 = (uint64_t)v76;
    uint64_t v73 = v76;
    LOBYTE(v46) = v77;
    uint64_t v67 = v46;
    goto LABEL_22;
  }
  uint64_t v38 = (uint64_t)v73;
  outlined init with copy of MLTrainingSessionParameters(v75, (uint64_t)v73, type metadata accessor for MLHandPoseClassifier.ModelParameters.ValidationData);
  if (swift_getEnumCaseMultiPayload(v38, v67) == 1)
  {
    uint64_t v39 = (uint64_t)v60;
    outlined init with take of MLClassifierMetrics(v38, (uint64_t)v60, type metadata accessor for MLHandPoseClassifier.DataSource);
    uint64_t v40 = v78;
    MLHandPoseClassifier.DataSource.keypointsWithAnnotations()(a3);
    uint64_t v78 = v40;
    if (v40)
    {
      outlined consume of MLDataTable?(v64, v74);
      outlined consume of Result<_DataTable, Error>(v66, v79);
      outlined destroy of MLActivityClassifier.ModelParameters(v75, type metadata accessor for MLHandPoseClassifier.ModelParameters);
      outlined destroy of MLActivityClassifier.ModelParameters(v72, type metadata accessor for MLHandPoseClassifier.DataSource);
      uint64_t v25 = v39;
      goto LABEL_3;
    }
    uint64_t v71 = v21;
    outlined destroy of MLActivityClassifier.ModelParameters(v39, type metadata accessor for MLHandPoseClassifier.DataSource);
    goto LABEL_21;
  }
  uint64_t v71 = v21;
  outlined destroy of MLActivityClassifier.ModelParameters(v38, type metadata accessor for MLHandPoseClassifier.ModelParameters.ValidationData);
  uint64_t empty = tc_v1_sframe_create_empty(0);
  if (!empty) {
    BUG();
  }
  uint64_t v42 = empty;
  uint64_t v67 = 0;
  uint64_t v43 = type metadata accessor for CMLTable();
  uint64_t v44 = swift_allocObject(v43, 24, 7);
  *(void *)(v44 + 16) = v42;
  uint64_t v45 = type metadata accessor for _DataTable();
  swift_allocObject(v45, 40, 7);
  uint64_t v73 = (uint64_t *)_DataTable.init(impl:)(v44);
LABEL_22:
  outlined init with copy of MLTrainingSessionParameters(v75, (uint64_t)v61, type metadata accessor for MLHandPoseClassifier.ModelParameters);
  uint64_t v47 = *(unsigned __int8 *)(v59 + 80);
  uint64_t v48 = ~*(unsigned __int8 *)(v59 + 80) & (v47 + 41);
  uint64_t v49 = swift_allocObject(&unk_3972D0, v48 + v58, v47 | 7);
  uint64_t v50 = v66;
  *(void *)(v49 + 16) = v66;
  char v51 = v79;
  *(unsigned char *)(v49 + 24) = v79 & 1;
  *(void *)(v49 + 32) = v73;
  *(unsigned char *)(v49 + 40) = v67 & 1;
  outlined init with take of MLClassifierMetrics((uint64_t)v61, v49 + v48, type metadata accessor for MLHandPoseClassifier.ModelParameters);
  outlined copy of Result<_DataTable, Error>(v50, v51);
  char v52 = v67;
  outlined copy of Result<_DataTable, Error>((uint64_t)v73, v67);
  uint64_t v53 = (uint64_t)v57;
  uint64_t v54 = v78;
  specialized blockAwait<A>(_:)((uint64_t)&async function pointer to partial apply for closure #1 in MLHandPoseClassifier.init(trainingData:parameters:), v49);
  uint64_t v78 = v54;
  if (v54)
  {
    swift_release();
    outlined consume of MLDataTable?(v65, v80);
    outlined consume of MLDataTable?(v64, v74);
    outlined consume of Result<_DataTable, Error>((uint64_t)v73, v52);
    outlined consume of Result<_DataTable, Error>(v66, v51);
    outlined destroy of MLActivityClassifier.ModelParameters(v75, type metadata accessor for MLHandPoseClassifier.ModelParameters);
    outlined destroy of MLActivityClassifier.ModelParameters(v72, type metadata accessor for MLHandPoseClassifier.DataSource);
    goto LABEL_24;
  }
  swift_release();
  outlined consume of MLDataTable?(v65, v80);
  outlined consume of MLDataTable?(v64, v74);
  outlined consume of Result<_DataTable, Error>((uint64_t)v73, v52);
  outlined consume of Result<_DataTable, Error>(v66, v51);
  outlined destroy of MLActivityClassifier.ModelParameters(v75, type metadata accessor for MLHandPoseClassifier.ModelParameters);
  outlined destroy of MLActivityClassifier.ModelParameters(v72, type metadata accessor for MLHandPoseClassifier.DataSource);
  uint64_t v55 = v68;

  outlined destroy of MLActivityClassifier.ModelParameters(v71, type metadata accessor for MLClassifierMetrics);
  outlined destroy of MLActivityClassifier.ModelParameters(v69, type metadata accessor for MLClassifierMetrics);
  return outlined init with take of MLClassifierMetrics(v53, v55, type metadata accessor for MLHandPoseClassifier);
}

uint64_t closure #1 in MLHandPoseClassifier.init(trainingData:parameters:)(uint64_t a1, uint64_t a2, char a3, uint64_t a4, char a5, uint64_t a6)
{
  *(void *)(v6 + 72) = a6;
  *(unsigned char *)(v6 + 26) = a5;
  *(void *)(v6 + 64) = a4;
  *(unsigned char *)(v6 + 25) = a3;
  *(void *)(v6 + 56) = a2;
  *(void *)(v6 + 48) = a1;
  char v8 = a3 & 1;
  char v9 = a5 & 1;
  uint64_t v10 = type metadata accessor for MLHandPoseClassifier.ModelParameters(0);
  *(void *)(v6 + 80) = swift_task_alloc((*(void *)(*(void *)(v10 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined copy of Result<_DataTable, Error>(a2, v8);
  outlined copy of Result<_DataTable, Error>(a4, v9);
  return swift_task_switch(closure #1 in MLHandPoseClassifier.init(trainingData:parameters:), 0, 0);
}

uint64_t closure #1 in MLHandPoseClassifier.init(trainingData:parameters:)()
{
  uint64_t v1 = *(void *)(v0 + 80);
  uint64_t v2 = *(void *)(v0 + 72);
  char v3 = *(unsigned char *)(v0 + 25);
  char v4 = *(unsigned char *)(v0 + 26);
  uint64_t v5 = *(void *)(v0 + 64);
  *(void *)(v0 + 16) = *(void *)(v0 + 56);
  *(unsigned char *)(v0 + 24) = v3 & 1;
  *(void *)(v0 + 32) = v5;
  *(unsigned char *)(v0 + 40) = v4 & 1;
  outlined init with copy of MLTrainingSessionParameters(v2, v1, type metadata accessor for MLHandPoseClassifier.ModelParameters);
  uint64_t v6 = (void *)swift_task_alloc(dword_3A41EC);
  *(void *)(v0 + 88) = v6;
  *uint64_t v6 = v0;
  v6[1] = closure #1 in MLHandPoseClassifier.init(trainingData:parameters:);
  return MLHandPoseClassifier.init(trainingFeatures:validationFeatures:parameters:)(*(void *)(v0 + 48), v0 + 16, v0 + 32, *(void *)(v0 + 80));
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;

  uint64_t v2 = *(void *)(*v1 + 88);
  char v3 = *v1;
  *(void *)(v3 + 96) = v0;
  swift_task_dealloc(v2);
  if (v0) {
    return swift_task_switch(closure #1 in MLHandPoseClassifier.init(trainingData:parameters:), 0, 0);
  }
  swift_task_dealloc(*(void *)(v3 + 80));
  return (*(uint64_t (**)(void))(v3 + 8))();
}

{
  uint64_t v0;

  swift_task_dealloc(*(void *)(v0 + 80));
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t MLHandPoseClassifier.init(trainingFeatures:validationFeatures:parameters:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  *(void *)(v4 + 56) = a4;
  *(void *)(v4 + 48) = a1;
  uint64_t v6 = type metadata accessor for MLHandActionClassifier(0);
  *(void *)(v4 + 64) = v6;
  *(void *)(v4 + 72) = swift_task_alloc((*(void *)(*(void *)(v6 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = type metadata accessor for MLHandActionClassifier.ModelParameters(0);
  *(void *)(v4 + 80) = v7;
  unint64_t v8 = (*(void *)(*(void *)(v7 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  *(void *)(v4 + 88) = swift_task_alloc(v8);
  *(void *)(v4 + 96) = swift_task_alloc(v8);
  *(void *)(v4 + 104) = *(void *)a2;
  *(unsigned char *)(v4 + 25) = *(unsigned char *)(a2 + 8);
  *(void *)(v4 + 112) = *(void *)a3;
  *(unsigned char *)(v4 + 26) = *(unsigned char *)(a3 + 8);
  return swift_task_switch(MLHandPoseClassifier.init(trainingFeatures:validationFeatures:parameters:), 0, 0);
}

uint64_t MLHandPoseClassifier.init(trainingFeatures:validationFeatures:parameters:)()
{
  char v20 = *(unsigned char *)(v0 + 25);
  char v19 = *(unsigned char *)(v0 + 26);
  uint64_t v15 = *(void *)(v0 + 112);
  uint64_t v16 = *(void *)(v0 + 104);
  uint64_t v1 = *(void *)(v0 + 96);
  uint64_t v14 = *(void *)(v0 + 88);
  uint64_t v17 = *(int **)(v0 + 80);
  uint64_t v18 = *(void *)(v0 + 56);
  uint64_t v2 = *(void *)(v0 + 48);
  char v3 = (int *)type metadata accessor for MLHandPoseClassifier(0);
  uint64_t v4 = v3[5];
  *(_DWORD *)(v0 + 28) = v4;
  id v5 = objc_allocWithZone((Class)MLModel);
  *(void *)(v2 + v4) = [v5 init];
  *(_DWORD *)(v0 + 44) = v3[7];
  MLClassifierMetrics.init()();
  *(_DWORD *)(v0 + 136) = v3[8];
  MLClassifierMetrics.init()();
  uint64_t v6 = v3[6];
  *(_DWORD *)(v0 + 140) = v6;
  outlined init with copy of MLTrainingSessionParameters(v18, v6 + v2, type metadata accessor for MLHandPoseClassifier.ModelParameters);
  uint64_t v7 = (int *)type metadata accessor for MLHandPoseClassifier.ModelParameters(0);
  uint64_t v8 = *(void *)(v18 + v7[7]);
  uint64_t v9 = *(void *)(v18 + v7[5]);
  uint64_t v10 = *(void *)(v18 + v7[6]);
  *(_OWORD *)uint64_t v1 = 0;
  *(_WORD *)(v1 + 16) = 256;
  uint64_t v11 = type metadata accessor for MLHandActionClassifier.ModelParameters.ValidationData(0);
  swift_storeEnumTagMultiPayload(v1, v11, 0);
  *(void *)(v1 + v17[5]) = v9;
  *(void *)(v1 + v17[6]) = v10;
  *(void *)(v1 + v17[7]) = 1;
  *(void *)(v1 + v17[8]) = v8;
  *(void *)(v1 + v17[10]) = 0x403E000000000000;
  *(void *)(v0 + 16) = v16;
  *(unsigned char *)(v0 + 24) = v20;
  *(void *)(v0 + 32) = v15;
  *(unsigned char *)(v0 + 40) = v19;
  outlined init with copy of MLTrainingSessionParameters(v1, v14, type metadata accessor for MLHandActionClassifier.ModelParameters);
  int64_t v12 = (void *)swift_task_alloc(dword_3AA6F4);
  *(void *)(v0 + 120) = v12;
  void *v12 = v0;
  v12[1] = MLHandPoseClassifier.init(trainingFeatures:validationFeatures:parameters:);
  return MLHandActionClassifier.init(trainingFeatures:validationFeatures:parameters:)(*(void *)(v0 + 72), v0 + 16, v0 + 32, *(void *)(v0 + 88));
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t (*v3)();

  uint64_t v2 = *(void *)(*(void *)v1 + 120);
  *(void *)(*(void *)v1 + 128) = v0;
  swift_task_dealloc(v2);
  if (v0) {
    char v3 = MLHandPoseClassifier.init(trainingFeatures:validationFeatures:parameters:);
  }
  else {
    char v3 = MLHandPoseClassifier.init(trainingFeatures:validationFeatures:parameters:);
  }
  return swift_task_switch(v3, 0, 0);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;
  id *v7;
  uint64_t v8;
  uint64_t v9;

  uint64_t v1 = *(void *)(v0 + 96);
  uint64_t v6 = *(void *)(v0 + 88);
  uint64_t v2 = *(void *)(v0 + 72);
  uint64_t v9 = *(void *)(v0 + 64);
  char v3 = *(void *)(v0 + 48);
  uint64_t v8 = v3 + *(int *)(v0 + 136);
  uint64_t v4 = v3 + *(int *)(v0 + 44);
  uint64_t v7 = (id *)(v3 + *(int *)(v0 + 28));
  outlined destroy of MLActivityClassifier.ModelParameters(*(void *)(v0 + 56), type metadata accessor for MLHandPoseClassifier.ModelParameters);
  outlined destroy of MLActivityClassifier.ModelParameters(v1, type metadata accessor for MLHandActionClassifier.ModelParameters);
  outlined init with take of MLClassifierMetrics(v2, v3, type metadata accessor for MLHandActionClassifier);
  outlined assign with copy of MLClassifierMetrics(v3 + *(int *)(v9 + 32), v4);
  outlined assign with copy of MLClassifierMetrics(v3 + *(int *)(v9 + 36), v8);
  objc_storeStrong(v7, *(id *)(v3 + 16));
  swift_task_dealloc(v1);
  swift_task_dealloc(v6);
  swift_task_dealloc(v2);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  uint64_t v9 = *(int *)(v0 + 28);
  uint64_t v1 = *(void *)(v0 + 96);
  uint64_t v7 = *(void *)(v0 + 88);
  uint64_t v6 = *(void *)(v0 + 72);
  uint64_t v2 = *(void *)(v0 + 48);
  char v3 = v2 + *(int *)(v0 + 140);
  uint64_t v8 = v2 + *(int *)(v0 + 136);
  uint64_t v4 = v2 + *(int *)(v0 + 44);
  outlined destroy of MLActivityClassifier.ModelParameters(*(void *)(v0 + 56), type metadata accessor for MLHandPoseClassifier.ModelParameters);
  outlined destroy of MLActivityClassifier.ModelParameters(v1, type metadata accessor for MLHandActionClassifier.ModelParameters);

  outlined destroy of MLActivityClassifier.ModelParameters(v3, type metadata accessor for MLHandPoseClassifier.ModelParameters);
  outlined destroy of MLActivityClassifier.ModelParameters(v4, type metadata accessor for MLClassifierMetrics);
  outlined destroy of MLActivityClassifier.ModelParameters(v8, type metadata accessor for MLClassifierMetrics);
  swift_task_dealloc(v1);
  swift_task_dealloc(v7);
  swift_task_dealloc(v6);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t MLHandPoseClassifier.init(model:parameters:metricsAttributes:classLabels:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, double a5, double a6)
{
  uint64_t v71 = v7;
  uint64_t v84 = a4;
  uint64_t v78 = a3;
  uint64_t v82 = a2;
  uint64_t v83 = a1;
  uint64_t v8 = v6;
  int64_t v9 = *(void *)(*(void *)(type metadata accessor for MLClassifierMetrics(0) - 8) + 64);
  uint64_t v10 = alloca(v9);
  uint64_t v11 = alloca(v9);
  int v74 = &v66;
  int64_t v12 = alloca(v9);
  unint64_t v13 = alloca(v9);
  uint64_t v72 = &v66;
  uint64_t v69 = type metadata accessor for MLHandActionClassifier(0);
  int64_t v14 = *(void *)(*(void *)(v69 - 8) + 64);
  uint64_t v15 = alloca(v14);
  uint64_t v16 = alloca(v14);
  uint64_t v70 = (uint64_t *)&v66;
  uint64_t v79 = type metadata accessor for MLHandActionClassifier.ModelParameters(0);
  int64_t v17 = *(void *)(*(void *)(v79 - 8) + 64);
  uint64_t v18 = alloca(v17);
  char v19 = alloca(v17);
  uint64_t v85 = &v66;
  char v20 = alloca(v17);
  uint64_t v21 = alloca(v17);
  uint64_t v22 = (int *)type metadata accessor for MLHandPoseClassifier(0);
  uint64_t v23 = v22[5];
  uint64_t v80 = (uint64_t)v22;
  id v24 = objc_allocWithZone((Class)MLModel);
  *(void *)(v8 + v23) = [v24 init];
  uint64_t v25 = v8 + v22[7];
  uint64_t v76 = v8;
  uint64_t v73 = v25;
  MLClassifierMetrics.init()();
  uint64_t v75 = v8 + v22[8];
  MLClassifierMetrics.init()();
  uint64_t v26 = (int *)type metadata accessor for MLHandPoseClassifier.ModelParameters(0);
  uint64_t v27 = *(void *)(v82 + v26[7]);
  uint64_t v28 = *(void *)(v82 + v26[5]);
  uint64_t v29 = *(void *)(v82 + v26[6]);
  long long v66 = 0;
  __int16 v67 = 256;
  uint64_t v30 = type metadata accessor for MLHandActionClassifier.ModelParameters.ValidationData(0);
  swift_storeEnumTagMultiPayload(&v66, v30, 0);
  int v31 = (int *)v79;
  *(void *)((char *)&v66 + *(int *)(v79 + 20)) = v28;
  *(void *)((char *)&v66 + v31[6]) = v29;
  *(void *)((char *)&v66 + v31[7]) = 1;
  *(void *)((char *)&v66 + v31[8]) = v27;
  *(void *)((char *)&v66 + v31[10]) = 0x403E000000000000;
  uint64_t v81 = &v66;
  uint64_t v32 = (uint64_t)v85;
  outlined init with copy of MLTrainingSessionParameters((uint64_t)&v66, (uint64_t)v85, type metadata accessor for MLHandActionClassifier.ModelParameters);
  id v33 = objc_allocWithZone((Class)MLModel);
  uint64_t v34 = v84;
  swift_bridgeObjectRetain(v84);
  char v35 = v33;
  uint64_t v36 = v34;
  id v37 = [v35 init];
  uint64_t v38 = v70;
  v70[2] = (uint64_t)v37;
  uint64_t v39 = v69;
  MLClassifierMetrics.init()();
  MLClassifierMetrics.init()();
  uint64_t *v38 = v36;
  outlined init with copy of MLTrainingSessionParameters(v32, (uint64_t)v38 + *(int *)(v39 + 28), type metadata accessor for MLHandActionClassifier.ModelParameters);
  uint64_t v40 = *(void *)(v32 + *(int *)(v79 + 28));
  uint64_t v41 = type metadata accessor for MLHandActionClassifier.GraphCNN(0);
  swift_allocObject(v41, *(unsigned int *)(v41 + 48), *(unsigned __int16 *)(v41 + 52));
  swift_bridgeObjectRetain(v36);
  uint64_t v42 = MLHandActionClassifier.GraphCNN.init(classLabels:export:numOfKeypoints:numOfKeypointsChannels:windowSize:)(v36, 0, 21, 3, v40);
  uint64_t v43 = v78;
  uint64_t v44 = v42;
  outlined destroy of MLActivityClassifier.ModelParameters((uint64_t)v85, type metadata accessor for MLHandActionClassifier.ModelParameters);
  v38[1] = (uint64_t)v44;
  uint64_t v45 = v76;
  outlined init with take of MLClassifierMetrics((uint64_t)v38, v76, type metadata accessor for MLHandActionClassifier);
  uint64_t v46 = v83;
  swift_retain();
  swift_release();
  *(void *)(v45 + 8) = v46;
  outlined init with copy of MLTrainingSessionParameters(v82, v45 + *(int *)(v80 + 24), type metadata accessor for MLHandPoseClassifier.ModelParameters);
  specialized Dictionary.subscript.getter(0xD000000000000012, (uint64_t)("oseClassifier.swift" + 0x8000000000000000), v43);
  if (!v68)
  {
    swift_bridgeObjectRelease(v84);
    swift_bridgeObjectRelease(v43);
    outlined destroy of Either<LogisticRegressionClassifier<Float, String>, FullyConnectedNetworkClassifier<Float, String>>((uint64_t)&v66 + 8, &demangling cache variable for type metadata for Any?);
LABEL_7:
    uint64_t v53 = (uint64_t)v81;
    uint64_t v54 = lazy protocol witness table accessor for type MLCreateError and conformance MLCreateError();
    swift_allocError(&type metadata for MLCreateError, v54, 0, 0);
    *(void *)uint64_t v55 = 0xD00000000000002CLL;
    *(void *)(v55 + 8) = "training_confusion" + 0x8000000000000000;
    *(_OWORD *)(v55 + 16) = 0;
    *(_OWORD *)(v55 + 32) = 0;
    *(unsigned char *)(v55 + 48) = 0;
    swift_willThrow(&type metadata for MLCreateError, v54, v55, v56, v57, v58);
    swift_release();
    uint64_t v52 = v82;
    goto LABEL_8;
  }
  uint64_t v47 = type metadata accessor for _MetricUtilities.ConfusionMatrixMeter(0);
  if (!swift_dynamicCast(&v77, (char *)&v66 + 8, (char *)&type metadata for Any + 8, v47, 6))
  {
    swift_bridgeObjectRelease(v84);
    swift_bridgeObjectRelease(v43);
    goto LABEL_7;
  }
  uint64_t v79 = v47;
  uint64_t v48 = v77;
  uint64_t v49 = (uint64_t)v72;
  char v50 = v84;
  uint64_t v51 = v71;
  static _MetricUtilities.makeClassifierMetrics(confusionMeter:classLabels:)(0.0, a6, v77, v84);
  uint64_t v85 = (long long *)v51;
  if (v51)
  {
    swift_bridgeObjectRelease(v50);
    swift_release();
    swift_release();
    swift_bridgeObjectRelease(v78);
    uint64_t v52 = v82;
    uint64_t v53 = (uint64_t)v81;
LABEL_8:
    outlined destroy of MLActivityClassifier.ModelParameters(v52, type metadata accessor for MLHandPoseClassifier.ModelParameters);
    outlined destroy of MLActivityClassifier.ModelParameters(v53, type metadata accessor for MLHandActionClassifier.ModelParameters);
LABEL_9:
    uint64_t v59 = type metadata accessor for MLHandPoseClassifier;
    uint64_t v60 = v76;
    return outlined destroy of MLActivityClassifier.ModelParameters(v60, v59);
  }
  uint64_t v80 = v48;
  outlined assign with take of MLClassifierMetrics(v49, v73);
  char v62 = v78;
  specialized Dictionary.subscript.getter(0xD000000000000014, (uint64_t)("ve training confusion matrix" + 0x8000000000000000), v78);
  swift_bridgeObjectRelease(v62);
  if (!v68)
  {
    swift_bridgeObjectRelease(v84);
    swift_release();
    swift_release();
    outlined destroy of Either<LogisticRegressionClassifier<Float, String>, FullyConnectedNetworkClassifier<Float, String>>((uint64_t)&v66 + 8, &demangling cache variable for type metadata for Any?);
LABEL_17:
    outlined destroy of MLActivityClassifier.ModelParameters(v82, type metadata accessor for MLHandPoseClassifier.ModelParameters);
    uint64_t v59 = type metadata accessor for MLHandActionClassifier.ModelParameters;
    uint64_t v60 = (uint64_t)v81;
    return outlined destroy of MLActivityClassifier.ModelParameters(v60, v59);
  }
  if (!swift_dynamicCast(&v77, (char *)&v66 + 8, (char *)&type metadata for Any + 8, v79, 6))
  {
    swift_bridgeObjectRelease(v84);
    swift_release();
    swift_release();
    goto LABEL_17;
  }
  uint64_t v63 = (uint64_t)v74;
  char v64 = v84;
  uint64_t v65 = (uint64_t)v85;
  static _MetricUtilities.makeClassifierMetrics(confusionMeter:classLabels:)(0.0, a6, v77, v84);
  swift_bridgeObjectRelease(v64);
  swift_release();
  swift_release();
  swift_release();
  outlined destroy of MLActivityClassifier.ModelParameters(v82, type metadata accessor for MLHandPoseClassifier.ModelParameters);
  outlined destroy of MLActivityClassifier.ModelParameters((uint64_t)v81, type metadata accessor for MLHandActionClassifier.ModelParameters);
  if (v65) {
    goto LABEL_9;
  }
  return outlined assign with take of MLClassifierMetrics(v63, v75);
}

uint64_t MLHandPoseClassifier.init(checkpoint:)(uint64_t a1, __m128 a2, double a3)
{
  v118._char object = v4;
  uint64_t v117 = a1;
  uint64_t v5 = v3;
  uint64_t v98 = type metadata accessor for MLHandActionClassifier(0);
  uint64_t v102 = *(void *)(v98 - 8);
  int64_t v6 = *(void *)(v102 + 64);
  uint64_t v7 = alloca(v6);
  uint64_t v8 = alloca(v6);
  uint64_t v97 = &v92;
  int64_t v101 = v6;
  int64_t v9 = alloca(v6);
  uint64_t v10 = alloca(v6);
  Swift::Bool v116 = &v92;
  uint64_t v99 = type metadata accessor for MLHandActionClassifier.ModelParameters(0);
  int64_t v11 = *(void *)(*(void *)(v99 - 8) + 64);
  int64_t v12 = alloca(v11);
  unint64_t v13 = alloca(v11);
  v106 = &v92;
  int64_t v14 = alloca(v11);
  uint64_t v15 = alloca(v11);
  uint64_t v107 = &v92;
  uint64_t v108 = type metadata accessor for MLHandPoseClassifier.DataSource(0);
  int64_t v16 = *(void *)(*(void *)(v108 - 8) + 64);
  int64_t v17 = alloca(v16);
  uint64_t v18 = alloca(v16);
  uint64_t v109 = &v92;
  uint64_t v100 = type metadata accessor for MLHandPoseClassifier.PersistentParameters(0);
  int64_t v19 = *(void *)(*(void *)(v100 - 8) + 64);
  char v20 = alloca(v19);
  uint64_t v21 = alloca(v19);
  Swift::Int v114 = (long long *)&v92;
  uint64_t v115 = type metadata accessor for URL(0);
  uint64_t v110 = *(void *)(v115 - 8);
  int64_t v22 = *(void *)(v110 + 64);
  uint64_t v23 = alloca(v22);
  id v24 = alloca(v22);
  v118._uint64_t countAndFlagsBits = (uint64_t)&v92;
  uint64_t v25 = alloca(v22);
  uint64_t v26 = alloca(v22);
  uint64_t v27 = (int *)type metadata accessor for MLHandPoseClassifier(0);
  uint64_t v28 = v27[5];
  id v29 = objc_allocWithZone((Class)MLModel);
  id v30 = [v29 init];
  uint64_t v112 = v28;
  *(void *)(v5 + v28) = v30;
  uint64_t v104 = v5 + v27[7];
  MLClassifierMetrics.init()();
  uint64_t v103 = v27;
  uint64_t v31 = v27[8];
  uint64_t v111 = v5;
  uint64_t v105 = v5 + v31;
  MLClassifierMetrics.init()();
  URL.deletingLastPathComponent()();
  uint64_t v32 = v110;
  uint64_t v33 = v115;
  uint64_t countAndFlagsBits = (uint64_t *)v118._countAndFlagsBits;
  BOOL v113 = &v92;
  (*(void (**)(uint64_t, uint64_t *, uint64_t))(v110 + 16))(v118._countAndFlagsBits, &v92, v115);
  char object = v118._object;
  MLHandPoseClassifier.PersistentParameters.init(sessionDirectory:)(countAndFlagsBits);
  v118._char object = object;
  if (object)
  {
    outlined destroy of MLActivityClassifier.ModelParameters(v117, type metadata accessor for MLCheckpoint);
    (*(void (**)(uint64_t *, uint64_t))(v32 + 8))(v113, v33);
    uint64_t v36 = v112;
    uint64_t v37 = v104;
    uint64_t v38 = v105;
LABEL_3:

    goto LABEL_12;
  }
  uint64_t v39 = v114;
  uint64_t v40 = (uint64_t)v109;
  outlined init with copy of MLTrainingSessionParameters((uint64_t)v114, (uint64_t)v109, type metadata accessor for MLHandPoseClassifier.DataSource);
  if (swift_getEnumCaseMultiPayload(v40, v108) == 3)
  {
    unsigned int v41 = *(unsigned __int8 *)(v40 + 8);
    uint64_t v42 = *(void *)v40;
    uint64_t v43 = *(void *)(v40 + 24);
    v118._uint64_t countAndFlagsBits = *(void *)(v40 + 32);
    uint64_t v44 = *(void **)(v40 + 40);
    uint64_t v45 = *(void *)(v40 + 56);
    swift_bridgeObjectRelease(v43);
    swift_bridgeObjectRelease(v45);
    outlined copy of Result<_DataTable, Error>(v42, v41);
    v46._uint64_t countAndFlagsBits = v118._countAndFlagsBits;
    v46._char object = v44;
    specialized MLDataTable.subscript.getter(v46, v42, v41, v47, v48);
    swift_bridgeObjectRelease((_BYTE)v44);
    outlined consume of Result<_DataTable, Error>(v42, v41);
    uint64_t v49 = v93;
    LOBYTE(v45) = v94;
    specialized MLDataColumn.dropDuplicates()(v93, v94);
    outlined consume of Result<_DataTable, Error>(v49, v45);
    v118._uint64_t countAndFlagsBits = (uint64_t)specialized Array<A>.init(_:)(v95, v96, *(double *)a2.i64);
    outlined consume of Result<_DataTable, Error>(v42, v41);
  }
  else
  {
    char v50 = v118._object;
    unsigned __int8 v51 = static _ImageUtilities.getDataSourceSynopsisForHandPoseClassifier(from:)(v39, a2);
    v118._char object = v50;
    uint64_t v54 = v110;
    if (v50)
    {
      outlined destroy of MLActivityClassifier.ModelParameters(v117, type metadata accessor for MLCheckpoint);
      outlined destroy of MLActivityClassifier.ModelParameters((uint64_t)v39, type metadata accessor for MLHandPoseClassifier.PersistentParameters);
      (*(void (**)(uint64_t *, uint64_t))(v54 + 8))(v113, v115);
      outlined destroy of MLActivityClassifier.ModelParameters(v40, type metadata accessor for MLHandPoseClassifier.DataSource);
      uint64_t v36 = v112;
      uint64_t v37 = v104;
      uint64_t v38 = v105;
      goto LABEL_3;
    }
    uint64_t v55 = v52;
    unsigned __int8 v56 = v51;
    swift_bridgeObjectRelease(v53);
    swift_bridgeObjectRelease(v56);
    v118._uint64_t countAndFlagsBits = (uint64_t)specialized _copyCollectionToContiguousArray<A>(_:)(v55);
    swift_bridgeObjectRelease(v55);
    outlined destroy of MLActivityClassifier.ModelParameters(v40, type metadata accessor for MLHandPoseClassifier.DataSource);
  }
  uint64_t v57 = v111 + v103[6];
  uint64_t v58 = (int *)v100;
  uint64_t v59 = (uint64_t)v114;
  outlined init with copy of MLTrainingSessionParameters((uint64_t)v114 + *(int *)(v100 + 20), v57, type metadata accessor for MLHandPoseClassifier.ModelParameters.ValidationData);
  uint64_t v60 = *(void *)(v59 + v58[6]);
  uint64_t v109 = *(uint64_t **)(v59 + v58[7]);
  uint64_t v61 = *(void *)(v59 + v58[8]);
  uint64_t v108 = v61;
  char v62 = (int *)type metadata accessor for MLHandPoseClassifier.ModelParameters(0);
  *(void *)(v62[5] + v57) = v60;
  uint64_t v63 = (uint64_t)v109;
  *(void *)(v62[6] + v57) = v109;
  *(void *)(v62[7] + v57) = v61;
  uint64_t v64 = (uint64_t)v107;
  *(_OWORD *)uint64_t v107 = 0;
  *(_WORD *)(v64 + 16) = 256;
  uint64_t v65 = type metadata accessor for MLHandActionClassifier.ModelParameters.ValidationData(0);
  swift_storeEnumTagMultiPayload(v64, v65, 0);
  long long v66 = (int *)v99;
  *(void *)(v64 + *(int *)(v99 + 20)) = v60;
  *(void *)(v64 + v66[6]) = v63;
  *(void *)(v64 + v66[7]) = 1;
  *(void *)(v64 + v66[8]) = v108;
  *(void *)(v64 + v66[10]) = 0x403E000000000000;
  outlined init with copy of MLTrainingSessionParameters(v64, (uint64_t)v106, type metadata accessor for MLHandActionClassifier.ModelParameters);
  id v67 = objc_allocWithZone((Class)MLModel);
  id v68 = [v67 init];
  uint64_t v69 = v97;
  v97[2] = (uint64_t)v68;
  uint64_t v70 = v98;
  MLClassifierMetrics.init()();
  MLClassifierMetrics.init()();
  uint64_t v71 = v118._countAndFlagsBits;
  uint64_t *v69 = v118._countAndFlagsBits;
  uint64_t v72 = (uint64_t)v69 + *(int *)(v70 + 28);
  uint64_t v73 = (uint64_t)v106;
  outlined init with copy of MLTrainingSessionParameters((uint64_t)v106, v72, type metadata accessor for MLHandActionClassifier.ModelParameters);
  uint64_t v74 = *(void *)(v73 + v66[7]);
  uint64_t v75 = type metadata accessor for MLHandActionClassifier.GraphCNN(0);
  swift_allocObject(v75, *(unsigned int *)(v75 + 48), *(unsigned __int16 *)(v75 + 52));
  swift_bridgeObjectRetain(v71);
  uint64_t v76 = MLHandActionClassifier.GraphCNN.init(classLabels:export:numOfKeypoints:numOfKeypointsChannels:windowSize:)(v71, 0, 21, 3, v74);
  outlined destroy of MLActivityClassifier.ModelParameters((uint64_t)v106, type metadata accessor for MLHandActionClassifier.ModelParameters);
  v69[1] = (uint64_t)v76;
  uint64_t v77 = (uint64_t)v69;
  outlined init with take of MLClassifierMetrics((uint64_t)v69, (uint64_t)v116, type metadata accessor for MLHandActionClassifier);
  swift_retain();
  uint64_t v78 = v117;
  uint64_t v79 = v118._object;
  MLHandActionClassifier.GraphCNN.updateGraphCNN(from:)(v117, 0.0, a3);
  if (!v79)
  {
    swift_release();
    outlined init with copy of MLTrainingSessionParameters((uint64_t)v116, v77, type metadata accessor for MLHandActionClassifier);
    uint64_t v81 = *(unsigned __int8 *)(v102 + 80);
    uint64_t v82 = v77;
    uint64_t v83 = ~*(unsigned __int8 *)(v102 + 80) & (v81 + 16);
    uint64_t v84 = swift_allocObject(&unk_3972F8, v83 + v101, v81 | 7);
    outlined init with take of MLClassifierMetrics(v82, v84 + v83, type metadata accessor for MLHandActionClassifier);
    specialized blockAwait<A>(_:)((uint64_t)&async function pointer to partial apply for closure #1 in MLHandPoseClassifier.init(checkpoint:), v84);
    v118._char object = 0;
    uint64_t v88 = v87;
    swift_release();
    outlined destroy of MLActivityClassifier.ModelParameters(v117, type metadata accessor for MLCheckpoint);
    outlined destroy of MLActivityClassifier.ModelParameters((uint64_t)v107, type metadata accessor for MLHandActionClassifier.ModelParameters);
    outlined destroy of MLActivityClassifier.ModelParameters((uint64_t)v114, type metadata accessor for MLHandPoseClassifier.PersistentParameters);
    (*(void (**)(uint64_t *, uint64_t))(v110 + 8))(v113, v115);
    uint64_t v89 = v111;
    uint64_t v90 = v112;

    *(void *)(v89 + v90) = v88;
    return outlined init with take of MLClassifierMetrics((uint64_t)v116, v89, type metadata accessor for MLHandActionClassifier);
  }
  uint64_t v80 = (uint64_t)v116;
  v118._char object = v79;
  uint64_t v85 = v115;
  swift_release();
  outlined destroy of MLActivityClassifier.ModelParameters(v78, type metadata accessor for MLCheckpoint);
  outlined destroy of MLActivityClassifier.ModelParameters(v80, type metadata accessor for MLHandActionClassifier);
  outlined destroy of MLActivityClassifier.ModelParameters((uint64_t)v107, type metadata accessor for MLHandActionClassifier.ModelParameters);
  outlined destroy of MLActivityClassifier.ModelParameters((uint64_t)v114, type metadata accessor for MLHandPoseClassifier.PersistentParameters);
  (*(void (**)(uint64_t *, uint64_t))(v110 + 8))(v113, v85);
  uint64_t v86 = v111;

  outlined destroy of MLActivityClassifier.ModelParameters(v86 + v103[6], type metadata accessor for MLHandPoseClassifier.ModelParameters);
  uint64_t v37 = v104;
  uint64_t v38 = v105;
LABEL_12:
  outlined destroy of MLActivityClassifier.ModelParameters(v37, type metadata accessor for MLClassifierMetrics);
  return outlined destroy of MLActivityClassifier.ModelParameters(v38, type metadata accessor for MLClassifierMetrics);
}

char specialized MLDataTable.subscript.getter(Swift::String a1, uint64_t a2, char a3)
{
  uint64_t v4 = v3;
  if (a3)
  {
    swift_willThrow();
    _StringGuts.grow(_:)(34);
    swift_bridgeObjectRelease(0xE000000000000000);
    *(void *)&long long v16 = 0xD00000000000001FLL;
    *((void *)&v16 + 1) = " element at index " + 0x8000000000000000;
    String.append(_:)(a1);
    v6._uint64_t countAndFlagsBits = 39;
    v6._char object = (void *)0xE100000000000000;
    String.append(_:)(v6);
    uint64_t v7 = lazy protocol witness table accessor for type MLCreateError and conformance MLCreateError();
    uint64_t v12 = swift_allocError(&type metadata for MLCreateError, v7, 0, 0);
    *(_OWORD *)uint64_t v8 = v16;
    *(_OWORD *)(v8 + 16) = 0;
    *(_OWORD *)(v8 + 32) = 0;
    *(unsigned char *)(v8 + 48) = 1;
  }
  else
  {
    uint64_t v5 = *(void *)(a2 + 16);
    swift_retain();
    uint64_t v10 = specialized String.withCString<A>(_:)((uint64_t (*)(void))partial apply for closure #1 in CMLTable.column(name:), v5, a1._countAndFlagsBits, (uint64_t)a1._object);
    swift_release();
    uint64_t v11 = type metadata accessor for _UntypedColumn();
    uint64_t v12 = swift_allocObject(v11, 24, 7);
    *(void *)(v12 + 16) = v10;
    *(void *)&long long v17 = v10;
    swift_retain();
    swift_retain();
    _UntypedColumn.type.getter();
    swift_release();
    if (!(_BYTE)v16)
    {
      swift_release();
      char result = 0;
      goto LABEL_5;
    }
    swift_release();
    _StringGuts.grow(_:)(49);
    swift_bridgeObjectRelease(0xE000000000000000);
    strcpy((char *)&v16, "Column named '");
    HIBYTE(v16) = -18;
    String.append(_:)(a1);
    v13._uint64_t countAndFlagsBits = 0xD000000000000021;
    v13._char object = "DataTable has no column named '" + 0x8000000000000000;
    String.append(_:)(v13);
    uint64_t v14 = lazy protocol witness table accessor for type MLCreateError and conformance MLCreateError();
    uint64_t v12 = swift_allocError(&type metadata for MLCreateError, v14, 0, 0);
    *(_OWORD *)uint64_t v15 = v16;
    *(_OWORD *)(v15 + 16) = 0;
    *(_OWORD *)(v15 + 32) = 0;
    *(unsigned char *)(v15 + 48) = 1;
    swift_release();
  }
  char result = 1;
LABEL_5:
  *(void *)uint64_t v4 = v12;
  *(unsigned char *)(v4 + 8) = result;
  return result;
}

char specialized MLDataTable.subscript.getter(Swift::String a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v6 = v5;
  if (a3)
  {
    swift_willThrow(a1._countAndFlagsBits, a1._object, a2, a3, a4, a5);
    _StringGuts.grow(_:)(34);
    swift_bridgeObjectRelease(0);
    *(void *)&long long v18 = 0xD00000000000001FLL;
    *((void *)&v18 + 1) = " element at index " + 0x8000000000000000;
    String.append(_:)(a1);
    v8._uint64_t countAndFlagsBits = 39;
    v8._char object = (void *)0xE100000000000000;
    String.append(_:)(v8);
    uint64_t v9 = lazy protocol witness table accessor for type MLCreateError and conformance MLCreateError();
    uint64_t v14 = swift_allocError(&type metadata for MLCreateError, v9, 0, 0);
    *(_OWORD *)uint64_t v10 = v18;
    *(_OWORD *)(v10 + 16) = 0;
    *(_OWORD *)(v10 + 32) = 0;
    *(unsigned char *)(v10 + 48) = 1;
  }
  else
  {
    uint64_t v7 = *(void *)(a2 + 16);
    swift_retain();
    uint64_t v12 = specialized String.withCString<A>(_:)((uint64_t (*)(void))partial apply for closure #1 in CMLTable.column(name:), v7, a1._countAndFlagsBits, (uint64_t)a1._object);
    swift_release();
    uint64_t v13 = type metadata accessor for _UntypedColumn();
    uint64_t v14 = swift_allocObject(v13, 24, 7);
    *(void *)(v14 + 16) = v12;
    *(void *)&long long v19 = v12;
    swift_retain();
    swift_retain();
    _UntypedColumn.type.getter();
    swift_release();
    if ((_BYTE)v18 == 2)
    {
      swift_release();
      char result = 0;
      goto LABEL_5;
    }
    swift_release();
    _StringGuts.grow(_:)(49);
    swift_bridgeObjectRelease(0);
    strcpy((char *)&v18, "Column named '");
    HIBYTE(v18) = -18;
    String.append(_:)(a1);
    v15._uint64_t countAndFlagsBits = 0xD000000000000021;
    v15._char object = "DataTable has no column named '" + 0x8000000000000000;
    String.append(_:)(v15);
    uint64_t v16 = lazy protocol witness table accessor for type MLCreateError and conformance MLCreateError();
    uint64_t v14 = swift_allocError(&type metadata for MLCreateError, v16, 0, 0);
    *(_OWORD *)uint64_t v17 = v18;
    *(_OWORD *)(v17 + 16) = 0;
    *(_OWORD *)(v17 + 32) = 0;
    *(unsigned char *)(v17 + 48) = 1;
    swift_release();
  }
  char result = 1;
LABEL_5:
  *(void *)uint64_t v6 = v14;
  *(unsigned char *)(v6 + 8) = result;
  return result;
}

uint64_t specialized MLDataColumn.dropDuplicates()(uint64_t a1, char a2)
{
  uint64_t v3 = v2;
  if (a2)
  {
    v17[0] = a1;
    swift_errorRetain(a1);
    outlined copy of Result<_DataTable, Error>(a1, 1);
    uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Error);
    uint64_t v7 = _getErrorEmbeddedNSError<A>(_:)(v17, v6, &protocol self-conformance witness table for Error);
    if (v7)
    {
      uint64_t v8 = v7;
      outlined consume of Result<_DataTable, Error>(a1, 1);
    }
    else
    {
      uint64_t v8 = swift_allocError(v6, &protocol self-conformance witness table for Error, 0, 0);
      uint64_t *v16 = v17[0];
    }
    uint64_t result = outlined consume of Result<_DataTable, Error>(a1, 1);
    char v10 = 1;
  }
  else
  {
    uint64_t v4 = *(void *)(*(void *)(a1 + 16) + 16);
    outlined copy of Result<_DataTable, Error>(a1, 0);
    uint64_t v5 = specialized handling<A, B>(_:_:)(v4);
    uint64_t v9 = v5;
    if (!v5) {
      BUG();
    }
    char v10 = 0;
    uint64_t v11 = type metadata accessor for CMLColumn();
    uint64_t v12 = swift_allocObject(v11, 24, 7);
    *(void *)(v12 + 16) = v9;
    uint64_t v13 = v12;
    uint64_t v14 = type metadata accessor for _UntypedColumn();
    uint64_t v8 = swift_allocObject(v14, 24, 7);
    *(void *)(v8 + 16) = v13;
    uint64_t result = outlined consume of Result<_DataTable, Error>(a1, 0);
  }
  *(void *)uint64_t v3 = v8;
  *(unsigned char *)(v3 + 8) = v10;
  return result;
}

void *specialized Array<A>.init(_:)(uint64_t a1, char a2, double a3)
{
  uint64_t v3 = a1;
  uint64_t v4 = _swiftEmptyArrayStorage;
  if ((a2 & 1) == 0)
  {
    uint64_t v5 = CMLColumn.size.getter();
    uint64_t v15 = v5;
    if (v5 < 0) {
      BUG();
    }
    if (v5)
    {
      uint64_t v4 = _swiftEmptyArrayStorage;
      uint64_t v6 = 0;
      do
      {
        outlined copy of Result<_DataTable, Error>(v3, 0);
        _UntypedColumn.valueAtIndex(index:)(v6, a3);
        outlined consume of Result<_DataTable, Error>(v3, 0);
        uint64_t v7 = v12;
        unint64_t v8 = (unint64_t)v13;
        if (v14 != 2)
        {
          outlined consume of MLDataValue(v12, v13, v14);
          uint64_t v7 = 0;
          unint64_t v8 = 0xE000000000000000;
        }
        if (!swift_isUniquelyReferenced_nonNull_native(v4)) {
          uint64_t v4 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v4[2] + 1, 1, (uint64_t)v4);
        }
        unint64_t v9 = v4[2];
        if (v4[3] >> 1 <= v9) {
          uint64_t v4 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(v4[3] >= 2uLL, v9 + 1, 1, (uint64_t)v4);
        }
        ++v6;
        v4[2] = v9 + 1;
        uint64_t v10 = 2 * v9;
        v4[v10 + 4] = v7;
        v4[v10 + 5] = v8;
        uint64_t v3 = a1;
      }
      while (v15 != v6);
    }
  }
  outlined consume of Result<_DataTable, Error>(v3, a2 & 1);
  return v4;
}

{
  void *v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  void *v8;
  void *v9;
  char v10;
  uint64_t v11;
  double v12;

  uint64_t v3 = _swiftEmptyArrayStorage;
  if ((a2 & 1) == 0)
  {
    uint64_t v4 = CMLColumn.size.getter();
    uint64_t v11 = v4;
    if (v4 < 0) {
      BUG();
    }
    if (v4)
    {
      uint64_t v3 = _swiftEmptyArrayStorage;
      uint64_t v5 = 0;
      do
      {
        outlined copy of Result<_DataTable, Error>(a1, 0);
        _UntypedColumn.valueAtIndex(index:)(v5, a3);
        outlined consume of Result<_DataTable, Error>(a1, 0);
        if (v10 == 1)
        {
          uint64_t v12 = *(double *)&v8;
        }
        else
        {
          outlined consume of MLDataValue(v8, v9, v10);
          uint64_t v12 = 0.0;
        }
        if (!swift_isUniquelyReferenced_nonNull_native(v3)) {
          uint64_t v3 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v3[2] + 1, 1, (uint64_t)v3);
        }
        uint64_t v6 = v3[2];
        if (v3[3] >> 1 <= v6) {
          uint64_t v3 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(v3[3] >= 2uLL, v6 + 1, 1, (uint64_t)v3);
        }
        ++v5;
        v3[2] = v6 + 1;
        a3 = v12;
        *(double *)&v3[v6 + 4] = v12;
      }
      while (v11 != v5);
    }
  }
  outlined consume of Result<_DataTable, Error>(a1, a2 & 1);
  return v3;
}

char *specialized Array<A>.init(_:)(uint64_t a1, char a2, double a3)
{
  uint64_t v3 = a1;
  uint64_t v4 = (char *)_swiftEmptyArrayStorage;
  if ((a2 & 1) == 0)
  {
    uint64_t v5 = CMLColumn.size.getter();
    uint64_t v13 = v5;
    if (v5 < 0) {
      BUG();
    }
    if (v5)
    {
      uint64_t v4 = (char *)_swiftEmptyArrayStorage;
      uint64_t v6 = 0;
      do
      {
        outlined copy of Result<_DataTable, Error>(v3, 0);
        _UntypedColumn.valueAtIndex(index:)(v6, a3);
        outlined consume of Result<_DataTable, Error>(v3, 0);
        uint64_t v7 = v10;
        if (v12)
        {
          outlined consume of MLDataValue(v10, v11, v12);
          uint64_t v7 = 0;
          if (!swift_isUniquelyReferenced_nonNull_native(v4)) {
            goto LABEL_13;
          }
          uint64_t v7 = 0;
        }
        else if (!swift_isUniquelyReferenced_nonNull_native(v4))
        {
LABEL_13:
          uint64_t v4 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *((void *)v4 + 2) + 1, 1, (uint64_t)v4);
        }
        unint64_t v8 = *((void *)v4 + 2);
        if (*((void *)v4 + 3) >> 1 <= v8) {
          uint64_t v4 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(*((void *)v4 + 3) >= 2uLL, v8 + 1, 1, (uint64_t)v4);
        }
        ++v6;
        *((void *)v4 + 2) = v8 + 1;
        *(void *)&v4[8 * v8 + 32] = v7;
        uint64_t v3 = a1;
      }
      while (v13 != v6);
    }
  }
  outlined consume of Result<_DataTable, Error>(v3, a2 & 1);
  return v4;
}

uint64_t closure #1 in MLHandPoseClassifier.init(checkpoint:)(uint64_t a1, uint64_t a2)
{
  *(void *)(v2 + 24) = a2;
  *(void *)(v2 + 16) = a1;
  return swift_task_switch(closure #1 in MLHandPoseClassifier.init(checkpoint:), 0, 0);
}

uint64_t closure #1 in MLHandPoseClassifier.init(checkpoint:)()
{
  uint64_t v1 = (void *)swift_task_alloc(dword_3AEB4C);
  *(void *)(v0 + 32) = v1;
  *uint64_t v1 = v0;
  v1[1] = closure #1 in MLHandPoseClassifier.init(checkpoint:);
  return MLHandActionClassifier.GraphCNN.compile()();
}

{
  uint64_t v0;

  **(void **)(v0 + 16) = *(void *)(v0 + 40);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t closure #1 in MLHandPoseClassifier.init(checkpoint:)(uint64_t a1)
{
  uint64_t v4 = *v2;
  uint64_t v5 = *(void *)(*v2 + 32);
  uint64_t v6 = *v2;
  swift_task_dealloc(v5);
  if (v1) {
    return (*(uint64_t (**)(void))(v6 + 8))();
  }
  *(void *)(v4 + 40) = a1;
  return swift_task_switch(closure #1 in MLHandPoseClassifier.init(checkpoint:), 0, 0);
}

void *static MLHandPoseClassifier.train(trainingData:parameters:sessionParameters:)(uint64_t a1, uint64_t a2, uint64_t a3, __m128 a4)
{
  uint64_t result = (void *)static MLHandPoseClassifier.makeTrainingSession(trainingData:parameters:sessionParameters:)(a1, a2, a3, a4);
  if (!v4)
  {
    uint64_t v6 = (uint64_t)result;
    uint64_t v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for MLJob<MLHandPoseClassifier>);
    unint64_t v8 = (void *)swift_allocObject(v7, *(unsigned int *)(v7 + 48), *(unsigned __int16 *)(v7 + 52));
    return specialized MLJob.init(_:)(v8, v6);
  }
  return result;
}

uint64_t static MLHandPoseClassifier.makeTrainingSession(trainingData:parameters:sessionParameters:)(uint64_t a1, uint64_t a2, uint64_t a3, __m128 a4)
{
  uint64_t v24 = v4;
  uint64_t v27 = a2;
  uint64_t v25 = a1;
  int64_t v6 = *(void *)(*(void *)(type metadata accessor for MLTrainingSessionParameters(0) - 8) + 64);
  uint64_t v7 = alloca(v6);
  unint64_t v8 = alloca(v6);
  uint64_t v26 = &v22;
  unint64_t v9 = alloca(v6);
  uint64_t v10 = alloca(v6);
  int64_t v11 = *(void *)(*(void *)(type metadata accessor for MLHandPoseClassifier.ModelParameters(0) - 8) + 64);
  char v12 = alloca(v11);
  uint64_t v13 = alloca(v11);
  int64_t v14 = *(void *)(*(void *)(type metadata accessor for MLHandPoseClassifier.DataSource(0) - 8) + 64);
  uint64_t v15 = alloca(v14);
  uint64_t v16 = alloca(v14);
  outlined init with copy of MLTrainingSessionParameters(v25, (uint64_t)&v22, type metadata accessor for MLHandPoseClassifier.DataSource);
  outlined init with copy of MLTrainingSessionParameters(v27, (uint64_t)&v22, type metadata accessor for MLHandPoseClassifier.ModelParameters);
  uint64_t v27 = a3;
  outlined init with copy of MLTrainingSessionParameters(a3, (uint64_t)&v22, type metadata accessor for MLTrainingSessionParameters);
  uint64_t v17 = type metadata accessor for HandPoseClassifierTrainingSessionDelegate(0);
  swift_allocObject(v17, *(unsigned int *)(v17 + 48), *(unsigned __int16 *)(v17 + 52));
  uint64_t v18 = v24;
  uint64_t result = HandPoseClassifierTrainingSessionDelegate.init(trainingData:modelParameters:sessionParameters:)((uint64_t)&v22, (uint64_t)&v22, (uint64_t)&v22, a4);
  if (!v18)
  {
    v23[3] = v17;
    v23[4] = &protocol witness table for HandPoseClassifierTrainingSessionDelegate;
    v23[0] = result;
    uint64_t v20 = (uint64_t)v26;
    outlined init with copy of MLTrainingSessionParameters(v27, (uint64_t)v26, type metadata accessor for MLTrainingSessionParameters);
    uint64_t v21 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for MLTrainingSession<MLHandPoseClassifier>);
    swift_allocObject(v21, *(unsigned int *)(v21 + 48), *(unsigned __int16 *)(v21 + 52));
    return specialized MLTrainingSession.init(delegate:parameters:modelType:)((uint64_t)v23, v20, 23);
  }
  return result;
}

void *static MLHandPoseClassifier.resume(_:)(uint64_t a1)
{
  uint64_t v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for MLJob<MLHandPoseClassifier>);
  uint64_t v2 = (void *)swift_allocObject(v1, *(unsigned int *)(v1 + 48), *(unsigned __int16 *)(v1 + 52));
  swift_retain();
  return specialized MLJob.init(_:)(v2, a1);
}

uint64_t static MLHandPoseClassifier.restoreTrainingSession(sessionParameters:)(uint64_t a1)
{
  int64_t v2 = *(void *)(*(void *)(type metadata accessor for MLTrainingSessionParameters(0) - 8) + 64);
  uint64_t v3 = alloca(v2);
  uint64_t v4 = alloca(v2);
  char v12 = v11;
  uint64_t v5 = alloca(v2);
  int64_t v6 = alloca(v2);
  outlined init with copy of MLTrainingSessionParameters(a1, (uint64_t)v11, type metadata accessor for MLTrainingSessionParameters);
  uint64_t v7 = type metadata accessor for HandPoseClassifierTrainingSessionDelegate(0);
  swift_allocObject(v7, *(unsigned int *)(v7 + 48), *(unsigned __int16 *)(v7 + 52));
  uint64_t result = HandPoseClassifierTrainingSessionDelegate.init(sessionParameters:)((uint64_t)v11);
  if (!v1)
  {
    v11[3] = v7;
    v11[4] = &protocol witness table for HandPoseClassifierTrainingSessionDelegate;
    v11[0] = result;
    uint64_t v9 = (uint64_t)v12;
    outlined init with copy of MLTrainingSessionParameters(a1, (uint64_t)v12, type metadata accessor for MLTrainingSessionParameters);
    uint64_t v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for MLTrainingSession<MLHandPoseClassifier>);
    swift_allocObject(v10, *(unsigned int *)(v10 + 48), *(unsigned __int16 *)(v10 + 52));
    return specialized MLTrainingSession.init(delegate:parameters:modelType:)((uint64_t)v11, v9, 23);
  }
  return result;
}

uint64_t closure #1 in closure #1 in static MLHandPoseClassifier.resume(_:)(uint64_t a1, char a2, uint64_t a3, void (*a4)(uint64_t *), uint64_t a5)
{
  uint64_t v53 = a5;
  uint64_t v52 = a4;
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Result<MLHandPoseClassifier, Error>);
  int64_t v7 = *(void *)(*(void *)(v6 - 8) + 64);
  unint64_t v8 = alloca(v7);
  uint64_t v9 = alloca(v7);
  uint64_t v47 = (int *)type metadata accessor for MLHandPoseClassifier.PersistentParameters(0);
  int64_t v10 = *(void *)(*((void *)v47 - 1) + 64);
  int64_t v11 = alloca(v10);
  char v12 = alloca(v10);
  uint64_t v49 = &v40;
  int64_t v13 = *(void *)(*(void *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for MLHandPoseClassifier.PersistentParameters?)
                              - 8)
                  + 64);
  int64_t v14 = alloca(v13);
  uint64_t v15 = alloca(v13);
  uint64_t v48 = &v40;
  uint64_t v16 = type metadata accessor for MLHandPoseClassifier.ModelParameters(0);
  int64_t v17 = *(void *)(*(void *)(v16 - 8) + 64);
  uint64_t v18 = alloca(v17);
  long long v19 = alloca(v17);
  uint64_t v20 = alloca(v17);
  uint64_t v21 = alloca(v17);
  if (a2)
  {
    uint64_t v40 = a1;
    swift_storeEnumTagMultiPayload(&v40, v6, 1);
    swift_errorRetain(a1);
    v52(&v40);
    return outlined destroy of Either<LogisticRegressionClassifier<Float, String>, FullyConnectedNetworkClassifier<Float, String>>((uint64_t)&v40, &demangling cache variable for type metadata for Result<MLHandPoseClassifier, Error>);
  }
  else
  {
    uint64_t v50 = v16;
    uint64_t v54 = &v40;
    unsigned __int8 v51 = &v40;
    outlined init with copy of TabularRegressionTask(direct field offset for MLTrainingSession.delegate + a3, (uint64_t)v41);
    uint64_t v22 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TrainingSessionDelegate);
    uint64_t v23 = type metadata accessor for HandPoseClassifierTrainingSessionDelegate(0);
    uint64_t result = swift_dynamicCast(&v46, v41, v22, v23, 6);
    if ((_BYTE)result)
    {
      uint64_t v25 = *(void *)(v46 + OBJC_IVAR____TtC8CreateML41HandPoseClassifierTrainingSessionDelegate_model);
      if (!v25) {
        return swift_release();
      }
      uint64_t v56 = v46;
      uint64_t v26 = v46 + OBJC_IVAR____TtC8CreateML41HandPoseClassifierTrainingSessionDelegate_trainingParameters;
      swift_beginAccess(v46 + OBJC_IVAR____TtC8CreateML41HandPoseClassifierTrainingSessionDelegate_trainingParameters, v41, 0, 0);
      uint64_t v27 = v26;
      uint64_t v28 = (uint64_t)v48;
      outlined init with copy of MLHandPoseClassifier.PersistentParameters?(v27, (uint64_t)v48);
      id v29 = v47;
      if (__swift_getEnumTagSinglePayload(v28, 1, (uint64_t)v47))
      {
        swift_retain();
        outlined destroy of Either<LogisticRegressionClassifier<Float, String>, FullyConnectedNetworkClassifier<Float, String>>(v28, &demangling cache variable for type metadata for MLHandPoseClassifier.PersistentParameters?);
        swift_release();
        return swift_release();
      }
      uint64_t v30 = (uint64_t)v49;
      outlined init with copy of MLTrainingSessionParameters(v28, (uint64_t)v49, type metadata accessor for MLHandPoseClassifier.PersistentParameters);
      uint64_t v55 = v25;
      swift_retain();
      outlined destroy of Either<LogisticRegressionClassifier<Float, String>, FullyConnectedNetworkClassifier<Float, String>>(v28, &demangling cache variable for type metadata for MLHandPoseClassifier.PersistentParameters?);
      outlined init with copy of MLTrainingSessionParameters(v30 + v29[5], (uint64_t)&v40, type metadata accessor for MLHandPoseClassifier.ModelParameters.ValidationData);
      uint64_t v31 = *(void *)(v30 + v29[7]);
      uint64_t v32 = *(void *)(v30 + v29[8]);
      uint64_t v33 = v50;
      *(void *)&v41[*(int *)(v50 + 20) - 8] = *(void *)(v30 + v29[6]);
      *(void *)&v41[*(int *)(v33 + 24) - 8] = v31;
      *(void *)&v41[*(int *)(v33 + 28) - 8] = v32;
      outlined destroy of MLActivityClassifier.ModelParameters(v30, type metadata accessor for MLHandPoseClassifier.PersistentParameters);
      uint64_t v34 = (uint64_t)v54;
      outlined init with take of MLClassifierMetrics((uint64_t)&v40, (uint64_t)v54, type metadata accessor for MLHandPoseClassifier.ModelParameters);
      uint64_t v35 = *(void *)(v56 + OBJC_IVAR____TtC8CreateML41HandPoseClassifierTrainingSessionDelegate_classLabels);
      if (v35)
      {
        uint64_t v36 = alloca(48);
        uint64_t v37 = alloca(48);
        uint64_t v42 = v55;
        uint64_t v43 = v34;
        uint64_t v44 = v56;
        uint64_t v45 = v35;
        swift_bridgeObjectRetain(v35);
        uint64_t v38 = (uint64_t)v51;
        _ss6ResultOsRi_zrlE8catchingAByxq_Gxyq_YKXE_tcfC8CreateML20MLHandPoseClassifierV_s5Error_pTgm5((void (*)(uint64_t *))partial apply for closure #1 in closure #1 in closure #1 in static MLHandPoseClassifier.resume(_:), (uint64_t)&v40);
        swift_bridgeObjectRelease(v35);
        v52((uint64_t *)v38);
        swift_release();
        swift_release();
        outlined destroy of Either<LogisticRegressionClassifier<Float, String>, FullyConnectedNetworkClassifier<Float, String>>(v38, &demangling cache variable for type metadata for Result<MLHandPoseClassifier, Error>);
        uint64_t v39 = (uint64_t)v54;
      }
      else
      {
        swift_release();
        swift_release();
        uint64_t v39 = v34;
      }
      return outlined destroy of MLActivityClassifier.ModelParameters(v39, type metadata accessor for MLHandPoseClassifier.ModelParameters);
    }
  }
  return result;
}

uint64_t closure #1 in closure #1 in closure #1 in static MLHandPoseClassifier.resume(_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void *a5, double a6, double a7)
{
  uint64_t v18 = a5;
  v16[0] = v8;
  uint64_t v17 = a3;
  v16[1] = v7;
  int64_t v10 = *(void *)(*(void *)(type metadata accessor for MLHandPoseClassifier.ModelParameters(0) - 8) + 64);
  int64_t v11 = alloca(v10);
  char v12 = alloca(v10);
  outlined init with copy of MLTrainingSessionParameters(a2, (uint64_t)v16, type metadata accessor for MLHandPoseClassifier.ModelParameters);
  uint64_t v13 = *(void *)(v17
                  + OBJC_IVAR____TtC8CreateML41HandPoseClassifierTrainingSessionDelegate_metricsAttributesDictionary);
  swift_retain();
  swift_bridgeObjectRetain(v13);
  swift_bridgeObjectRetain(a4);
  uint64_t v14 = v16[0];
  uint64_t result = MLHandPoseClassifier.init(model:parameters:metricsAttributes:classLabels:)(a1, (uint64_t)v16, v13, a4, a6, a7);
  if (v14)
  {
    uint64_t result = (uint64_t)v18;
    void *v18 = v14;
  }
  return result;
}

uint64_t static MLHandPoseClassifier.buildFeatureTable(features:labels:sessionIds:imageFiles:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v29 = a4;
  uint64_t v30 = a3;
  uint64_t v28 = v4;
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, MLUntypedColumn)>);
  uint64_t inited = swift_initStackObject(v5, v23);
  *(void *)(inited + 16) = 4;
  *(void *)(inited + 24) = 8;
  *(void *)(inited + 32) = 0x746E696F7079656BLL;
  *(void *)(inited + 40) = 0xE900000000000073;
  uint64_t v31 = a1;
  uint64_t v24 = &v31;
  swift_bridgeObjectRetain(a1);
  uint64_t ML14_UntypedColumnC_s5Error_pTgm5 = _ss6ResultOsRi_zrlE8catchingAByxq_Gxyq_YKXE_tcfC8CreateML14_UntypedColumnC_s5Error_pTgm5((void (*)(void *))partial apply for specialized closure #1 in MLUntypedColumn.init<A>(_:));
  char v9 = v8;
  swift_bridgeObjectRelease(v31);
  *(void *)(inited + 48) = ML14_UntypedColumnC_s5Error_pTgm5;
  *(unsigned char *)(inited + 56) = v9 & 1;
  *(void *)(inited + 64) = 0x6C6562616CLL;
  *(void *)(inited + 72) = 0xE500000000000000;
  uint64_t v31 = a2;
  uint64_t v25 = &v31;
  swift_bridgeObjectRetain(a2);
  uint64_t v10 = _ss6ResultOsRi_zrlE8catchingAByxq_Gxyq_YKXE_tcfC8CreateML14_UntypedColumnC_s5Error_pTgm5((void (*)(void *))partial apply for specialized closure #1 in MLUntypedColumn.init<A>(_:));
  char v12 = v11;
  swift_bridgeObjectRelease(v31);
  *(void *)(inited + 80) = v10;
  *(unsigned char *)(inited + 88) = v12 & 1;
  *(void *)(inited + 96) = 0x5F6E6F6973736573;
  *(void *)(inited + 104) = 0xEA00000000006469;
  uint64_t v31 = v30;
  uint64_t v26 = &v31;
  swift_bridgeObjectRetain(v30);
  uint64_t v13 = _ss6ResultOsRi_zrlE8catchingAByxq_Gxyq_YKXE_tcfC8CreateML14_UntypedColumnC_s5Error_pTgm5((void (*)(void *))partial apply for specialized closure #1 in MLUntypedColumn.init<A>(_:));
  char v15 = v14;
  swift_bridgeObjectRelease(v31);
  *(void *)(inited + 112) = v13;
  *(unsigned char *)(inited + 120) = v15 & 1;
  *(void *)(inited + 128) = 0x7461506567616D69;
  *(void *)(inited + 136) = 0xE900000000000068;
  uint64_t v31 = v29;
  uint64_t v27 = &v31;
  swift_bridgeObjectRetain(v29);
  uint64_t v16 = _ss6ResultOsRi_zrlE8catchingAByxq_Gxyq_YKXE_tcfC8CreateML14_UntypedColumnC_s5Error_pTgm5((void (*)(void *))closure #1 in MLUntypedColumn.init<A>(_:)specialized partial apply);
  char v18 = v17;
  swift_bridgeObjectRelease(v31);
  *(void *)(inited + 144) = v16;
  *(unsigned char *)(inited + 152) = v18 & 1;
  uint64_t v19 = Dictionary.init(dictionaryLiteral:)(inited, &type metadata for String, &type metadata for MLUntypedColumn, &protocol witness table for String);
  specialized MLDataTable.init<A>(uniqueKeysWithValues:)(v19);
  uint64_t result = v31;
  char v21 = v32;
  uint64_t v22 = v28;
  *uint64_t v28 = v31;
  *((unsigned char *)v22 + 8) = v21;
  return result;
}

uint64_t static MLHandPoseClassifier.reformatKeypointsDataTable(table:featureColumn:)(unsigned char *a1, uint64_t a2, void *a3, double a4)
{
  uint64_t v35 = v4;
  uint64_t v5 = *(void *)a1;
  v38._char object = a1;
  char v6 = a1[8];
  uint64_t v40 = v5;
  char v41 = v6;
  v38._uint64_t countAndFlagsBits = a2;
  v7._uint64_t countAndFlagsBits = a2;
  *(void *)&long long v36 = a3;
  v7._char object = a3;
  MLDataTable.subscript.getter(v7);
  if (BYTE8(v37) == 1)
  {
    outlined consume of Result<_DataTable, Error>(v37, 1);
  }
  else
  {
    swift_retain();
    _UntypedColumn.type.getter();
    outlined consume of Result<_DataTable, Error>(v37, 0);
    outlined consume of Result<_DataTable, Error>(v37, 0);
    if ((_BYTE)v40 == 3)
    {
      *(void *)&long long v37 = v5;
      BYTE8(v37) = v6;
      v8._uint64_t countAndFlagsBits = v38._countAndFlagsBits;
      v8._char object = (void *)v36;
      MLDataTable.subscript.getter(v8);
      specialized MLUntypedColumn.map<A>(skipUndefined:_:)(1, (uint64_t)partial apply for closure #1 in static MLHandPoseClassifier.reformatKeypointsDataTable(table:featureColumn:), 0, v40, v41);
      outlined consume of Result<_DataTable, Error>(v40, v41);
      uint64_t v39 = v5;
      LOBYTE(v42) = v6;
      char v9 = *((unsigned char *)v38._object + 8);
      uint64_t v40 = *(void *)v38._object;
      char v41 = v9;
      v8._uint64_t countAndFlagsBits = v38._countAndFlagsBits;
      v8._char object = (void *)v36;
      MLDataTable.subscript.getter(v8);
      uint64_t v10 = v5;
      uint64_t v11 = -1;
      if (!v6)
      {
        swift_retain();
        uint64_t v11 = CMLColumn.size.getter();
        outlined consume of Result<_DataTable, Error>(v10, 0);
      }
      outlined consume of Result<_DataTable, Error>(v10, v6);
      int v42 = v42;
      specialized MLDataColumn.dropMissing()(v39, v42);
      uint64_t v12 = -1;
      if (!v41)
      {
        outlined copy of Result<_DataTable, Error>(v40, 0);
        uint64_t v12 = CMLColumn.size.getter();
        outlined consume of Result<_DataTable, Error>(v40, 0);
      }
      outlined consume of Result<_DataTable, Error>(v40, v41);
      BOOL v13 = __OFSUB__(v11, v12);
      uint64_t v14 = v11 - v12;
      if (v13) {
        BUG();
      }
      if (v14)
      {
        *(void *)&long long v37 = 0;
        *((void *)&v37 + 1) = 0xE000000000000000;
        _StringGuts.grow(_:)(236);
        v15._uint64_t countAndFlagsBits = 0xD00000000000003DLL;
        v15._char object = "validation_confusion" + 0x8000000000000000;
        String.append(_:)(v15);
        uint64_t v16 = dispatch thunk of CustomStringConvertible.description.getter(&type metadata for Int, &protocol witness table for Int);
        char v18 = (char)v17;
        v15._uint64_t countAndFlagsBits = v16;
        v15._char object = v17;
        String.append(_:)(v15);
        swift_bridgeObjectRelease(v18);
        v15._uint64_t countAndFlagsBits = 0xD00000000000006BLL;
        v15._char object = "mn into MLMultiArray format. " + 0x8000000000000000;
        String.append(_:)(v15);
        uint64_t v19 = dispatch thunk of CustomStringConvertible.description.getter(&type metadata for Int, &protocol witness table for Int);
        char v21 = (char)v20;
        v15._uint64_t countAndFlagsBits = v19;
        v15._char object = v20;
        String.append(_:)(v15);
        swift_bridgeObjectRelease(v21);
        v15._char object = (void *)0xE200000000000000;
        v15._uint64_t countAndFlagsBits = 8236;
        String.append(_:)(v15);
        uint64_t v40 = 21;
        uint64_t v22 = dispatch thunk of CustomStringConvertible.description.getter(&type metadata for Int, &protocol witness table for Int);
        char v24 = (char)v23;
        v15._uint64_t countAndFlagsBits = v22;
        v15._char object = v23;
        String.append(_:)(v15);
        swift_bridgeObjectRelease(v24);
        v15._char object = "ld have a dimension of [1, " + 0x8000000000000000;
        v15._uint64_t countAndFlagsBits = 0xD00000000000003CLL;
        String.append(_:)(v15);
        v15._char object = (void *)lazy protocol witness table accessor for type MLCreateError and conformance MLCreateError();
        swift_allocError(&type metadata for MLCreateError, v15._object, 0, 0);
        *(_OWORD *)uint64_t v25 = v37;
        *(_OWORD *)(v25 + 16) = 0;
        *(_OWORD *)(v25 + 32) = 0;
        *(unsigned char *)(v25 + 48) = 0;
        swift_willThrow(&type metadata for MLCreateError, v15._object, v25, v26, v27, v28);
        return outlined consume of Result<_DataTable, Error>(v39, v42);
      }
      swift_bridgeObjectRetain(v36);
      specialized MLDataTable.subscript.setter(v39, v42, v38._countAndFlagsBits, v36);
    }
  }
  char v30 = *((unsigned char *)v38._object + 8);
  *(void *)&long long v37 = *(void *)v38._object;
  BYTE8(v37) = v30;
  uint64_t v31 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<String>);
  uint64_t inited = (void *)swift_initStackObject(v31, v34);
  inited[2] = 1;
  inited[3] = 2;
  inited[4] = v38._countAndFlagsBits;
  char v33 = v36;
  inited[5] = v36;
  LOBYTE(v40) = 5;
  swift_bridgeObjectRetain(v33);
  static _ValidationUtilities.validateTableTypes(table:columns:type:)((uint64_t)&v37, (unint64_t)inited, (char *)&v40, a4);
  swift_setDeallocating(inited);
  return specialized _ContiguousArrayStorage.__deallocating_deinit();
}

void *closure #1 in static MLHandPoseClassifier.reformatKeypointsDataTable(table:featureColumn:)(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 16) == 3)
  {
    uint64_t v2 = *(void *)a1;
    return static MLHandPoseClassifier.convertSequenceToMultiArray(value:)(&v2);
  }
  else
  {
    void *result = 0;
  }
  return result;
}

void *static MLHandPoseClassifier.convertSequenceToMultiArray(value:)(uint64_t *a1)
{
  uint64_t v111 = v1;
  uint64_t v2 = *a1;
  v102[0] = (uint64_t)_swiftEmptyArrayStorage;
  specialized ContiguousArray.reserveCapacity(_:)(3);
  id v3 = objc_allocWithZone((Class)NSNumber);
  id v4 = [v3 initWithInteger:1];
  specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
  uint64_t v5 = _swiftEmptyArrayStorage[2];
  specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)(v5);
  specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)(v5, v4);
  specialized ContiguousArray._endMutation()();
  id v6 = objc_allocWithZone((Class)NSNumber);
  id v7 = [v6 initWithInteger:3];
  specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
  uint64_t v8 = _swiftEmptyArrayStorage[2];
  specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)(v8);
  specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)(v8, v7);
  specialized ContiguousArray._endMutation()();
  id v9 = objc_allocWithZone((Class)NSNumber);
  id v10 = [v9 initWithInteger:21];
  specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
  uint64_t v11 = _swiftEmptyArrayStorage[2];
  specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)(v11);
  specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)(v11, v10);
  specialized ContiguousArray._endMutation()();
  objc_allocWithZone((Class)MLMultiArray);
  uint64_t v12 = 0;
  id v13 = @nonobjc MLMultiArray.init(shape:dataType:)((uint64_t)_swiftEmptyArrayStorage, 65600);
  if (v13)
  {
    id v14 = v13;
    uint64_t v104 = UnsafeMutableBufferPointer.init(_:)(v14, &type metadata for Double);
    swift_retain();
    uint64_t v15 = CMLSequence.size.getter();
    uint64_t v16 = specialized RandomAccessCollection<>.distance(from:to:)(0, v15);
    swift_release();
    if (v16 == 1)
    {
      v102[7] = v2;
      double v17 = 0.0;
      long long v103 = 0;
      swift_retain();
      id v119 = v14;
      while (1)
      {
        specialized EnumeratedSequence.Iterator.next()(v17);
        uint64_t v18 = (uint64_t)v106;
        uint64_t v19 = v107;
        uint64_t v20 = v108;
        char v21 = v109;
        uint64_t v112 = v107;
        unint64_t v117 = (unint64_t)v106;
        if (v109 != 3) {
          break;
        }
        outlined copy of MLDataValue(v107, v108, 3u);
        outlined copy of MLDataValue(v19, v20, 3u);
        uint64_t v110 = v20;
        uint64_t v22 = CMLSequence.size.getter();
        uint64_t v20 = v110;
        uint64_t v23 = specialized RandomAccessCollection<>.distance(from:to:)(0, v22);
        outlined consume of (offset: Int, element: MLDataValue)?(v18, v19, v20, 3);
        if (v23 != 3)
        {

          swift_release();
          uint64_t v101 = v117;
          outlined consume of (offset: Int, element: MLDataValue)?(v117, v19, v20, 3);
          char v21 = 3;
          uint64_t v100 = v19;
LABEL_72:
          outlined consume of (offset: Int, element: MLDataValue)?(v101, v100, v20, v21);
          goto LABEL_63;
        }
        outlined copy of MLDataValue(v19, v20, 3u);
        if (CMLSequence.size.getter())
        {
          uint64_t v24 = 0;
          uint64_t v25 = v112;
          while (1)
          {
            int64_t v105 = v24;
            swift_retain();
            uint64_t v26 = CMLSequence.value(at:)(v24);
            uint64_t v27 = v117;
            uint64_t v28 = v110;
            outlined consume of (offset: Int, element: MLDataValue)?(v117, v25, v110, 3);
            if (v12)
            {
LABEL_89:
              swift_unexpectedError(v12, "CreateML/SequenceType.swift", 27, 1, 36);
              BUG();
            }
            MLDataValue.init(_:)(v26, v17);
            Swift::Bool v116 = v106;
            BOOL v113 = v107;
            char v29 = (char)v108;
            swift_retain();
            double v120 = COERCE_DOUBLE(CMLSequence.size.getter());
            outlined consume of (offset: Int, element: MLDataValue)?(v27, v25, v28, 3);
            if (v105 >= *(uint64_t *)&v120) {
              BUG();
            }
            char v30 = v116;
            uint64_t v31 = v113;
            if (v29 != 3) {
              break;
            }
            outlined copy of MLDataValue(v116, v113, 3u);
            outlined copy of MLDataValue(v30, v31, 3u);
            uint64_t v32 = CMLSequence.size.getter();
            if (CMLSequence.size.getter() < 0) {
              BUG();
            }
            char v33 = v30;
            uint64_t v34 = CMLSequence.size.getter();
            outlined consume of MLDataValue(v33, v31, 3);
            if (v32 < 0 || v34 < v32) {
              BUG();
            }
            if (v32 != 21)
            {
              char v30 = v116;
              uint64_t v31 = v113;
              outlined consume of MLDataValue(v116, v113, 3);
              char v29 = 3;
              uint64_t v28 = v110;
              break;
            }
            uint64_t v35 = v116;
            swift_retain();
            if (CMLSequence.size.getter())
            {
              uint64_t v36 = 0;
              while (1)
              {
                swift_retain();
                uint64_t v37 = CMLSequence.value(at:)(v36);
                outlined consume of MLDataValue(v35, v113, 3);
                if (v12) {
                  goto LABEL_89;
                }
                switch(CMLFeatureValue.type.getter())
                {
                  case 0u:
                    int64_t v38 = v36;
                    uint64_t v39 = *(void *)(v37 + 16);
                    swift_retain();
                    double v120 = COERCE_DOUBLE(specialized handling<A, B>(_:_:)(v39));
                    swift_release();
                    uint64_t v115 = 0;
                    swift_release();
                    Swift::String v118 = 0;
                    uint64_t v40 = 0;
                    goto LABEL_24;
                  case 1u:
                    int64_t v38 = v36;
                    uint64_t v49 = *(void *)(v37 + 16);
                    swift_retain();
                    specialized handling<A, B>(_:_:)(v49);
                    double v120 = v17;
                    swift_release();
                    uint64_t v115 = 0;
                    uint64_t v50 = swift_release();
                    LOBYTE(v50) = 1;
                    goto LABEL_31;
                  case 2u:
                    int64_t v38 = v36;
                    swift_retain();
                    Swift::String v46 = CMLFeatureValue.stringValue()();
                    double v120 = *(double *)&v46._countAndFlagsBits;
                    char object = v46._object;
                    swift_release();
                    if (v47)
                    {
                      swift_errorRelease(v47);
                      BUG();
                    }
                    Swift::String v118 = object;
                    uint64_t v115 = 0;
                    uint64_t v40 = swift_release();
                    LOBYTE(v40) = 2;
LABEL_24:
                    uint64_t v114 = v40;
                    goto LABEL_33;
                  case 3u:
                    int64_t v38 = v36;
                    uint64_t v51 = *(void *)(v37 + 16);
                    swift_retain();
                    uint64_t v52 = specialized handling<A, B>(_:_:)(v51);
                    if (!v52) {
                      BUG();
                    }
                    uint64_t v115 = 0;
                    swift_release_n(v37);
                    uint64_t v53 = type metadata accessor for CMLSequence();
                    uint64_t v50 = swift_allocObject(v53, 25, 7);
                    *(void *)(v50 + 16) = v52;
                    double v120 = *(double *)&v50;
                    *(unsigned char *)(v50 + 24) = 1;
                    LOBYTE(v50) = 3;
                    goto LABEL_31;
                  case 4u:
                    int64_t v38 = v36;
                    uint64_t v41 = *(void *)(v37 + 16);
                    swift_retain();
                    uint64_t v42 = specialized handling<A, B>(_:_:)(v41);
                    if (!v42) {
                      BUG();
                    }
                    uint64_t v115 = 0;
                    uint64_t v43 = type metadata accessor for CMLDictionary();
                    uint64_t v44 = swift_allocObject(v43, 24, 7);
                    *(void *)(v44 + 16) = v42;
                    v102[0] = v44;
                    v102[1] = (uint64_t)closure #1 in MLDataValue.DictionaryType.init(from:);
                    v102[2] = 0;
                    v102[3] = (uint64_t)specialized closure #1 in LazySequenceProtocol.compactMap<A>(_:);
                    v102[4] = 0;
                    v102[5] = (uint64_t)specialized closure #2 in LazySequenceProtocol.compactMap<A>(_:);
                    v102[6] = 0;
                    swift_retain();
                    double v120 = COERCE_DOUBLE(specialized Dictionary.init<A>(uniqueKeysWithValues:)(v102));
                    swift_release();
                    uint64_t v45 = swift_release_n(v37);
                    LOBYTE(v45) = 4;
                    uint64_t v114 = v45;
                    Swift::String v118 = 0;
                    uint64_t v35 = v116;
                    goto LABEL_33;
                  case 5u:
                    uint64_t v115 = 0;
                    int64_t v38 = v36;
                    uint64_t v54 = swift_release();
                    LOBYTE(v54) = 6;
                    uint64_t v114 = v54;
                    double v120 = 0.0;
                    goto LABEL_32;
                  case 6u:
                    int64_t v38 = v36;
                    swift_retain();
                    MLDataValue.MultiArrayType.init(from:)(v37);
                    double v120 = *(double *)&v106;
                    if (!v106) {
                      BUG();
                    }
                    uint64_t v115 = 0;
                    uint64_t v50 = swift_release();
                    LOBYTE(v50) = 5;
LABEL_31:
                    uint64_t v114 = v50;
LABEL_32:
                    Swift::String v118 = 0;
LABEL_33:
                    swift_retain();
                    uint64_t v55 = CMLSequence.size.getter();
                    outlined consume of MLDataValue(v35, v113, 3);
                    if (v38 >= v55) {
                      BUG();
                    }
                    unint64_t v56 = v38;
                    id v57 = [v119 strides];
                    id v58 = v57;
                    uint64_t v59 = type metadata accessor for OS_os_log(0, &lazy cache variable for type metadata for NSNumber, NSNumber_ptr);
                    uint64_t v60 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v58, v59);

                    if ((v60 & 0xC000000000000003) != 0)
                    {
                      id v61 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(0, v60);
                    }
                    else
                    {
                      if (!*(void *)((char *)&dword_10 + (v60 & 0xFFFFFFFFFFFFF8))) {
                        BUG();
                      }
                      id v61 = *(id *)(v60 + 32);
                    }
                    char v62 = v61;
                    swift_bridgeObjectRelease(v60);
                    unint64_t v63 = (unint64_t)[v62 integerValue];

                    unint64_t v65 = v63;
                    uint64_t v64 = v117 * v63;
                    if (!is_mul_ok(v117, v65)) {
                      BUG();
                    }
                    id v66 = [v119 strides];
                    id v67 = v66;
                    uint64_t v68 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v67, v59);

                    if ((v68 & 0xC000000000000003) != 0)
                    {
                      id v69 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(1, v68);
                    }
                    else
                    {
                      if (*(void *)((char *)&dword_10 + (v68 & 0xFFFFFFFFFFFFF8)) < 2uLL) {
                        BUG();
                      }
                      id v69 = *(id *)(v68 + 40);
                    }
                    uint64_t v70 = v69;
                    swift_bridgeObjectRelease(v68);
                    unint64_t v71 = (unint64_t)[v70 integerValue];

                    unint64_t v73 = v71;
                    unint64_t v72 = v105 * v71;
                    if (!is_mul_ok(v105, v73)) {
                      BUG();
                    }
                    BOOL v74 = __OFADD__(v72, v64);
                    unint64_t v75 = v72 + v64;
                    if (v74) {
                      BUG();
                    }
                    id v76 = [v119 strides];
                    id v77 = v76;
                    uint64_t v78 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v77, v59);

                    if ((v78 & 0xC000000000000003) != 0)
                    {
                      id v79 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(2, v78);
                    }
                    else
                    {
                      if (*(void *)((char *)&dword_10 + (v78 & 0xFFFFFFFFFFFFF8)) < 3uLL) {
                        BUG();
                      }
                      id v79 = *(id *)(v78 + 48);
                    }
                    swift_bridgeObjectRelease(v78);
                    unint64_t v80 = (unint64_t)[v79 integerValue];

                    unint64_t v82 = v80;
                    unint64_t v81 = v56 * v80;
                    if (!is_mul_ok(v56, v82)) {
                      BUG();
                    }
                    BOOL v74 = __OFADD__(v81, v75);
                    unint64_t v83 = v81 + v75;
                    if (v74) {
                      BUG();
                    }
                    if ((_BYTE)v114)
                    {
                      uint64_t v35 = v116;
                      if (v114 != 1)
                      {
                        outlined consume of MLDataValue(*(void **)&v120, v118, v114);
                        uint64_t v91 = v113;
                        outlined consume of MLDataValue(v35, v113, 3);
                        outlined consume of MLDataValue(v35, v91, 3);
                        uint64_t v92 = v117;
                        uint64_t v93 = v112;
                        char v94 = v110;
                        outlined consume of (offset: Int, element: MLDataValue)?(v117, v112, v110, 3);
                        outlined consume of (offset: Int, element: MLDataValue)?(v92, v93, v94, 3);

                        outlined consume of MLDataValue(v116, v91, 3);
                        uint64_t v95 = v92;
                        char v96 = v93;
                        uint64_t v97 = v94;
                        goto LABEL_69;
                      }
                      unint64_t v84 = v56;
                      *(double *)(v104 + 8 * v83) = v120;
                    }
                    else
                    {
                      double v17 = (double)SLODWORD(v120);
                      *(double *)(v104 + 8 * v83) = (double)SLODWORD(v120);
                      uint64_t v35 = v116;
                      unint64_t v84 = v56;
                    }
                    uint64_t v36 = v84 + 1;
                    uint64_t v85 = CMLSequence.size.getter();
                    uint64_t v12 = v115;
                    if (v36 == v85)
                    {
                      uint64_t v86 = v113;
                      outlined consume of MLDataValue(v35, v113, 3);
                      outlined consume of MLDataValue(v35, v86, 3);
                      outlined consume of MLDataValue(v35, v86, 3);
                      goto LABEL_58;
                    }
                    break;
                }
              }
            }
            uint64_t v87 = v113;
            outlined consume of MLDataValue(v35, v113, 3);
            outlined consume of MLDataValue(v35, v87, 3);
            swift_release();
LABEL_58:
            uint64_t v24 = v105 + 1;
            uint64_t v25 = v112;
            if (v24 == CMLSequence.size.getter()) {
              goto LABEL_61;
            }
          }
          outlined consume of MLDataValue(v30, v31, v29);
          uint64_t v98 = v117;
          uint64_t v99 = v112;
          outlined consume of (offset: Int, element: MLDataValue)?(v117, v112, v28, 3);
          outlined consume of (offset: Int, element: MLDataValue)?(v98, v99, v28, 3);

          uint64_t v95 = v98;
          char v96 = v99;
          uint64_t v97 = v28;
LABEL_69:
          outlined consume of (offset: Int, element: MLDataValue)?(v95, v96, v97, 3);
          swift_release();
          goto LABEL_63;
        }
        uint64_t v25 = v112;
LABEL_61:
        uint64_t v88 = v117;
        uint64_t v89 = v110;
        outlined consume of (offset: Int, element: MLDataValue)?(v117, v25, v110, 3);
        outlined consume of (offset: Int, element: MLDataValue)?(v88, v25, v89, 3);
        outlined consume of (offset: Int, element: MLDataValue)?(v88, v25, v89, 3);
      }
      if (v109 == 255)
      {
        swift_release();
        MLDataValue.MultiArrayType.init(_:)((MLMultiArray)v119);
        uint64_t result = v106;
        *uint64_t v111 = v106;
        return result;
      }

      swift_release();
      uint64_t v100 = v112;
      uint64_t v101 = v117;
      goto LABEL_72;
    }
  }
LABEL_63:
  uint64_t result = v111;
  *uint64_t v111 = 0;
  return result;
}

void *MLHandPoseClassifier.prediction(from:)(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for MLHandPoseClassifier(0);
  return MLHandPoseClassifier.modelPrediction(on:using:)(a1, *(void **)(v1 + *(int *)(v2 + 20)));
}

void *MLHandPoseClassifier.modelPrediction(on:using:)(uint64_t a1, void *a2)
{
  id v4 = static _VideoUtilities.getHandKeyPointsFromImageUrl(url:)(a1);
  if (!v2)
  {
    uint64_t v12 = v4[2];
    if (v12)
    {
      id v13 = v4;
      specialized ContiguousArray.reserveCapacity(_:)(v12);
      uint64_t v5 = 0;
      do
      {
        id v6 = v13[(void)v5 + 4];
        uint64_t v5 = (void (__cdecl *)(id))((char *)v5 + 1);
        id v7 = v6;
        specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
        uint64_t v8 = _swiftEmptyArrayStorage[2];
        specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)(v8);
        specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)(v8, v7);
        specialized ContiguousArray._endMutation()();
      }
      while (v12 != v5);
      swift_bridgeObjectRelease((_BYTE)v13);
    }
    else
    {
      swift_bridgeObjectRelease((_BYTE)v4);
    }
    uint64_t v9 = static _VideoUtilities.generatePredictionWindows(frameKeypoints:windowSize:numOfKeypoints:)((uint64_t)_swiftEmptyArrayStorage, 1, 21);
    swift_bridgeObjectRelease(_swiftEmptyArrayStorage);
    if (!*(void *)(v9 + 16)) {
      BUG();
    }
    id v10 = *(id *)(v9 + 32);
    swift_bridgeObjectRelease(v9);
    id v3 = MLHandPoseClassifier.modelPrediction(on:using:)(v10, a2);
  }
  return v3;
}

void *MLHandPoseClassifier.predictions(from:)(uint64_t a1)
{
  v3[2] = v1;
  return _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSay10Foundation3URLVG_SaySS5label_Sd10confidencetGsAE_pTg5Tm((void (*)(uint64_t, uint64_t *))partial apply for closure #1 in MLHandPoseClassifier.predictions(from:), v3, a1, (void (*)(BOOL, unint64_t, uint64_t))specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:));
}

void *closure #1 in MLHandPoseClassifier.predictions(from:)(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v8 = v3;
  uint64_t v6 = type metadata accessor for MLHandPoseClassifier(0);
  uint64_t result = MLHandPoseClassifier.modelPrediction(on:using:)(a1, *(void **)(a2 + *(int *)(v6 + 20)));
  if (v4) {
    *a3 = v4;
  }
  else {
    *uint64_t v8 = result;
  }
  return result;
}

void *MLHandPoseClassifier.modelPrediction(on:using:)(void *a1, void *a2)
{
  id v3 = a1;
  id v4 = [a1 shape];
  id v5 = v4;
  uint64_t v69 = type metadata accessor for OS_os_log(0, &lazy cache variable for type metadata for NSNumber, NSNumber_ptr);
  uint64_t v6 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v5, v69);

  if ((v6 & 0x4000000000000001) != 0)
  {
    uint64_t v60 = v6 & 0xFFFFFFFFFFFFF8;
    if (v6) {
      uint64_t v60 = v6;
    }
    swift_bridgeObjectRetain(v6);
    uint64_t v7 = _CocoaArrayWrapper.endIndex.getter(v60);
    swift_bridgeObjectRelease(v6);
  }
  else
  {
    uint64_t v7 = *(void *)((char *)&dword_10 + (v6 & 0xFFFFFFFFFFFFF8));
  }
  swift_bridgeObjectRelease(v6);
  if (v7 != 3) {
    goto LABEL_25;
  }
  id v8 = [a1 shape];
  id v9 = v8;
  uint64_t v10 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v9, v69);

  ML20MLHandPoseClassifierV15modelPrediction2on5usingSaySS5label_Sd10confidencetGSo12MLMultiArrayC_So7MLModelCtKFSiSo8D54Ccfu_33_5bdac5b40c7411f20a64c1277f8fd44fAOSiTf3nnnpk_nTf1cn_n = _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSaySo8NSNumberCG_Sis5NeverOTg50125_s8CreateML20MLHandPoseClassifierV15modelPrediction2on5usingSaySS5label_Sd10confidencetGSo12MLMultiArrayC_So7MLModelCtKFSiSo8D54Ccfu_33_5bdac5b40c7411f20a64c1277f8fd44fAOSiTf3nnnpk_nTf1cn_n(v10);
  swift_bridgeObjectRelease(v10);
  LOBYTE(v10) = specialized static Array<A>.== infix(_:_:)((uint64_t)ML20MLHandPoseClassifierV15modelPrediction2on5usingSaySS5label_Sd10confidencetGSo12MLMultiArrayC_So7MLModelCtKFSiSo8D54Ccfu_33_5bdac5b40c7411f20a64c1277f8fd44fAOSiTf3nnnpk_nTf1cn_n, (uint64_t)&outlined read-only object #0 of MLHandPoseClassifier.modelPrediction(on:using:));
  swift_bridgeObjectRelease((_BYTE)ML20MLHandPoseClassifierV15modelPrediction2on5usingSaySS5label_Sd10confidencetGSo12MLMultiArrayC_So7MLModelCtKFSiSo8D54Ccfu_33_5bdac5b40c7411f20a64c1277f8fd44fAOSiTf3nnnpk_nTf1cn_n);
  if (v10)
  {
    uint64_t v12 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, Any)>);
    uint64_t inited = (void *)swift_initStackObject(v12, v87);
    inited[2] = 1;
    inited[3] = 2;
    inited[4] = 0x7365736F70;
    inited[5] = 0xE500000000000000;
    id v14 = objc_opt_self(MLFeatureValue);
    id v15 = [v14 featureValueWithMultiArray:a1];
    id v16 = v15;
    inited[9] = type metadata accessor for OS_os_log(0, &lazy cache variable for type metadata for MLFeatureValue, MLFeatureValue_ptr);
    inited[6] = v16;
    id v3 = (void *)Dictionary.init(dictionaryLiteral:)(inited, &type metadata for String, (char *)&type metadata for Any + 8, &protocol witness table for String);
    objc_allocWithZone((Class)MLDictionaryFeatureProvider);
    id v17 = @nonobjc MLDictionaryFeatureProvider.init(dictionary:)((uint64_t)v3);
    if (!v2)
    {
      v86[0] = 0;
      uint64_t v18 = v17;
      id v19 = [a2 predictionFromFeatures:v17 error:v86];
      id v20 = v19;
      id v21 = v86[0];
      if (v20)
      {
        id v66 = v18;
        uint64_t v22 = v20;
        v86[0];
        NSString v23 = String._bridgeToObjectiveC()();
        id v67 = v22;
        id v24 = [v22 featureValueForName:v23];
        id v3 = v24;

        if (v3)
        {
          id v25 = [v3 dictionaryValue];
          id v26 = v25;

          uint64_t v27 = static Dictionary._unconditionallyBridgeFromObjectiveC(_:)(v26, &type metadata for AnyHashable, v69, &protocol witness table for AnyHashable);
          uint64_t v28 = v27;
          int64_t v29 = *(void *)(v27 + 16);
          if (v29)
          {
            unint64_t v72 = _swiftEmptyArrayStorage;
            specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v29, 0);
            int64_t v30 = specialized Dictionary.startIndex.getter(v27);
            if (v30 < 0 || v30 >= 1 << *(unsigned char *)(v27 + 32)) {
LABEL_34:
            }
              BUG();
            uint64_t v70 = v27 + 64;
            uint64_t v65 = v27;
            while (1)
            {
              int64_t v62 = v29;
              unint64_t v32 = (unint64_t)v30 >> 6;
              uint64_t v33 = *(void *)(v70 + 8 * ((unint64_t)v30 >> 6));
              if (!_bittest64(&v33, v30)) {
                BUG();
              }
              if (v31 != *(_DWORD *)(v28 + 36)) {
                BUG();
              }
              uint64_t v63 = 1 << v30;
              int v64 = v31;
              int64_t v34 = v30;
              outlined init with copy of AnyHashable(*(void *)(v28 + 48) + 40 * v30, (uint64_t)v86);
              int64_t v68 = v34;
              uint64_t v35 = *(void **)(*(void *)(v28 + 56) + 8 * v34);
              v86[5] = v35;
              outlined init with copy of AnyHashable((uint64_t)v86, (uint64_t)v83);
              uint64_t v85 = v35;
              uint64_t v81 = v84;
              id v82 = v35;
              v80[1] = v83[1];
              v80[0] = v83[0];
              id v36 = v35;
              v36;
              outlined destroy of Either<LogisticRegressionClassifier<Float, String>, FullyConnectedNetworkClassifier<Float, String>>((uint64_t)v86, &demangling cache variable for type metadata for (key: AnyHashable, value: NSNumber));
              outlined init with copy of AnyHashable((uint64_t)v80, (uint64_t)v75);
              id v77 = v82;
              uint64_t v37 = *(void *)&v75[0];
              v78[0] = v75[0];
              v78[1] = v75[1];
              uint64_t v79 = v76;
              swift_dynamicCast(v71, v78, &type metadata for AnyHashable, &type metadata for String, 7);
              outlined init with copy of AnyHashable((uint64_t)v80, (uint64_t)v73);
              id v74 = v82;
              [v82 doubleValue];
              outlined destroy of AnyHashable((uint64_t)v73);
              outlined destroy of Either<LogisticRegressionClassifier<Float, String>, FullyConnectedNetworkClassifier<Float, String>>((uint64_t)v80, &demangling cache variable for type metadata for (key: AnyHashable, value: NSNumber));
              uint64_t v38 = v71[0];
              id v3 = v72;
              uint64_t v61 = v71[1];
              if (!swift_isUniquelyReferenced_nonNull_native(v72))
              {
                specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v3[2] + 1, 1);
                id v3 = v72;
              }
              unint64_t v39 = v3[2];
              unint64_t v40 = v39 + 1;
              uint64_t v41 = v68;
              if (v3[3] >> 1 <= v39)
              {
                specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v3[3] >= 2uLL, v39 + 1, 1);
                unint64_t v40 = v39 + 1;
                uint64_t v41 = v68;
                id v3 = v72;
              }
              v3[2] = v40;
              uint64_t v42 = 3 * v39;
              v3[v42 + 4] = v38;
              v3[v42 + 5] = v61;
              v3[v42 + 6] = v37;
              uint64_t v28 = v65;
              uint64_t v43 = -1 << *(unsigned char *)(v65 + 32);
              if (v41 >= -v43) {
                BUG();
              }
              if ((v63 & *(void *)(v70 + 8 * v32)) == 0) {
                BUG();
              }
              if (v64 != *(_DWORD *)(v65 + 36)) {
                BUG();
              }
              int64_t v30 = _HashTable.occupiedBucket(after:)(v41, v70, ~v43);
              int64_t v29 = v62 - 1;
              if (v62 == 1) {
                break;
              }
              if (v30 >= 0)
              {
                int v31 = *(_DWORD *)(v65 + 36);
                if (v30 < 1 << *(unsigned char *)(v65 + 32)) {
                  continue;
                }
              }
              goto LABEL_34;
            }
            swift_bridgeObjectRelease(v65);
            swift_unknownObjectRelease(v67);
          }
          else
          {
            swift_bridgeObjectRelease(v27);
            swift_unknownObjectRelease(v67);

            return _swiftEmptyArrayStorage;
          }
        }
        else
        {
          uint64_t v55 = lazy protocol witness table accessor for type MLCreateError and conformance MLCreateError();
          swift_allocError(&type metadata for MLCreateError, v55, 0, 0);
          *(void *)uint64_t v56 = 0xD000000000000028;
          *(void *)(v56 + 8) = "labelProbabilities" + 0x8000000000000000;
          *(_OWORD *)(v56 + 16) = 0;
          *(_OWORD *)(v56 + 32) = 0;
          *(unsigned char *)(v56 + 48) = 0;
          swift_willThrow(&type metadata for MLCreateError, v55, v56, v57, v58, v59);

          swift_unknownObjectRelease(v22);
        }
      }
      else
      {
        id v50 = v86[0];
        _convertNSErrorToError(_:)(v21);
        id v3 = &objc_release;

        swift_willThrow(v50, "predictionFromFeatures:error:", v51, v52, v53, v54);
      }
    }
  }
  else
  {
LABEL_25:
    uint64_t v44 = lazy protocol witness table accessor for type MLCreateError and conformance MLCreateError();
    swift_allocError(&type metadata for MLCreateError, v44, 0, 0);
    *(void *)uint64_t v45 = 0xD000000000000025;
    *(void *)(v45 + 8) = "rt requested type" + 0x8000000000000000;
    *(_OWORD *)(v45 + 16) = 0;
    *(_OWORD *)(v45 + 32) = 0;
    *(unsigned char *)(v45 + 48) = 0;
    swift_willThrow(&type metadata for MLCreateError, v44, v45, v46, v47, v48);
  }
  return v3;
}

uint64_t MLHandPoseClassifier.evaluation(on:)(uint64_t a1, double a2, double a3)
{
  uint64_t v20 = v4;
  uint64_t v17 = a1;
  uint64_t v19 = v3;
  uint64_t v6 = (int *)type metadata accessor for MLHandActionClassifier.ModelParameters(0);
  int64_t v7 = *(void *)(*((void *)v6 - 1) + 64);
  id v8 = alloca(v7);
  id v9 = alloca(v7);
  uint64_t v10 = *(int *)(type metadata accessor for MLHandPoseClassifier(0) + 24);
  uint64_t v18 = v5;
  uint64_t v11 = *(void *)(*(int *)(type metadata accessor for MLHandPoseClassifier.ModelParameters(0) + 20) + v5 + v10);
  long long v16 = 0;
  LOWORD(v17) = 256;
  uint64_t v12 = type metadata accessor for MLHandActionClassifier.ModelParameters.ValidationData(0);
  swift_storeEnumTagMultiPayload(&v16, v12, 0);
  *(void *)((char *)&v16 + v6[5]) = v11;
  *(void *)((char *)&v16 + v6[6]) = 80;
  *(void *)((char *)&v16 + v6[7]) = 1;
  *(void *)((char *)&v16 + v6[8]) = 0;
  *(void *)((char *)&v16 + v6[10]) = 0x403E000000000000;
  uint64_t v13 = v20;
  MLHandPoseClassifier.DataSource.keypointsWithAnnotations()((__m128)0);
  if (v13) {
    return outlined destroy of MLActivityClassifier.ModelParameters((uint64_t)&v16, type metadata accessor for MLHandActionClassifier.ModelParameters);
  }
  uint64_t v15 = v16;
  LODWORD(v20) = BYTE8(v16);
  MLHandActionClassifier.evaluation(on:parameters:)((uint64_t *)&v16, (uint64_t)&v16, 0.0, a3);
  outlined destroy of MLActivityClassifier.ModelParameters((uint64_t)&v16, type metadata accessor for MLHandActionClassifier.ModelParameters);
  return outlined consume of Result<_DataTable, Error>(v15, v20);
}

uint64_t MLHandPoseClassifier.write(to:metadata:)(uint64_t a1, uint64_t *a2, double a3, double a4)
{
  uint64_t v35 = v4;
  uint64_t v37 = v5;
  uint64_t v6 = type metadata accessor for URL(0);
  uint64_t v47 = *(void *)(v6 - 8);
  int64_t v7 = *(void *)(v47 + 64);
  id v8 = alloca(v7);
  id v9 = alloca(v7);
  uint64_t v33 = &v23;
  uint64_t v10 = alloca(v7);
  uint64_t v11 = alloca(v7);
  unint64_t v32 = &v23;
  uint64_t v46 = *a2;
  uint64_t v45 = a2[1];
  uint64_t v44 = a2[2];
  uint64_t v43 = a2[3];
  uint64_t v42 = a2[4];
  uint64_t v41 = a2[5];
  uint64_t v40 = a2[6];
  uint64_t v39 = a2[7];
  uint64_t v38 = a2[8];
  uint64_t v36 = a1;
  uint64_t v12 = URL.pathExtension.getter();
  char v14 = v13;
  if (v12 == 0x67616B6361706C6DLL && v13 == 0xE900000000000065)
  {
    swift_bridgeObjectRelease(101);
LABEL_5:
    uint64_t v18 = (uint64_t)v32;
    uint64_t v19 = v35;
    uint64_t result = static _ValidationUtilities.validateWriteLocation(atURL:defaultName:fileExtension:)(v36, 0xD000000000000014, (unint64_t)("HandPoseClassifier" + 0x8000000000000000), 0x67616B6361706C6DLL, (void *)0xE900000000000065);
    if (v19) {
      return result;
    }
    uint64_t v21 = v18;
    *(void *)&long long v24 = v46;
    *((void *)&v24 + 1) = v45;
    uint64_t v25 = v44;
    uint64_t v26 = v43;
    uint64_t v27 = v42;
    uint64_t v28 = v41;
    uint64_t v29 = v40;
    uint64_t v30 = v39;
    uint64_t v31 = v38;
    MLHandActionClassifier.GraphCNN.writeMLPackage(to:metadata:)(v18, &v24, a3, a4);
    return (*(uint64_t (**)(uint64_t, uint64_t))(v47 + 8))(v21, v6);
  }
  char v15 = _stringCompareWithSmolCheck(_:_:expecting:)(v12, v13, 0x67616B6361706C6DLL, 0xE900000000000065, 0);
  uint64_t v34 = v6;
  char v16 = v15;
  swift_bridgeObjectRelease(v14);
  BOOL v17 = (v16 & 1) == 0;
  uint64_t v6 = v34;
  if (!v17) {
    goto LABEL_5;
  }
  uint64_t v21 = (uint64_t)v33;
  uint64_t v22 = v35;
  uint64_t result = static _ValidationUtilities.validateWriteLocation(atURL:defaultName:fileExtension:)(v36, 0xD000000000000012, (unint64_t)(" is empty on row " + 0x8000000000000000), 0x6C65646F6D6C6DLL, (void *)0xE700000000000000);
  if (v22) {
    return result;
  }
  *(void *)&long long v24 = v46;
  *((void *)&v24 + 1) = v45;
  uint64_t v25 = v44;
  uint64_t v26 = v43;
  uint64_t v27 = v42;
  uint64_t v28 = v41;
  uint64_t v29 = v40;
  uint64_t v30 = v39;
  uint64_t v31 = v38;
  MLHandActionClassifier.write(to:metadata:)(v21, (uint64_t)&v24, a3, a4);
  return (*(uint64_t (**)(uint64_t, uint64_t))(v47 + 8))(v21, v6);
}

uint64_t MLHandPoseClassifier.write(toFile:metadata:)(uint64_t a1, uint64_t a2, long long *a3, double a4, double a5)
{
  uint64_t v25 = v5;
  uint64_t v27 = a2;
  uint64_t v26 = a1;
  uint64_t v28 = type metadata accessor for URL.DirectoryHint(0);
  uint64_t v29 = *(void *)(v28 - 8);
  int64_t v7 = *(void *)(v29 + 64);
  id v8 = alloca(v7);
  id v9 = alloca(v7);
  int64_t v10 = *(void *)(*(void *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for URL?)
                              - 8)
                  + 64);
  uint64_t v11 = alloca(v10);
  uint64_t v12 = alloca(v10);
  uint64_t v13 = type metadata accessor for URL(0);
  uint64_t v31 = *(void *)(v13 - 8);
  int64_t v14 = *(void *)(v31 + 64);
  char v15 = alloca(v14);
  char v16 = alloca(v14);
  uint64_t v30 = *((void *)a3 + 8);
  long long v21 = *a3;
  long long v22 = a3[1];
  long long v23 = a3[2];
  *(_OWORD *)long long v24 = a3[3];
  uint64_t v32 = v13;
  __swift_storeEnumTagSinglePayload((uint64_t)v19, 1, 1, v13);
  (*(void (**)(_OWORD *, void, uint64_t))(v29 + 104))(v19, enum case for URL.DirectoryHint.inferFromPath(_:), v28);
  uint64_t v17 = v27;
  swift_bridgeObjectRetain(v27);
  URL.init(filePath:directoryHint:relativeTo:)(v26, v17, v19, v19);
  v19[0] = v21;
  v19[1] = v22;
  void v19[2] = v23;
  v19[3] = *(_OWORD *)v24;
  uint64_t v20 = v30;
  MLHandPoseClassifier.write(to:metadata:)((uint64_t)v19, (uint64_t *)v19, v24[0], a5);
  return (*(uint64_t (**)(_OWORD *, uint64_t))(v31 + 8))(v19, v32);
}

unint64_t MLHandPoseClassifier.description.getter()
{
  return MLHandPoseClassifier.debugDescription.getter();
}

unint64_t MLHandPoseClassifier.debugDescription.getter()
{
  uint64_t v1 = v0;
  v25._char object = (void *)type metadata accessor for MLClassifierMetrics.Contents(0);
  int64_t v2 = *(void *)(*((void *)v25._object - 1) + 64);
  uint64_t v3 = alloca(v2);
  uint64_t v4 = alloca(v2);
  uint64_t v5 = type metadata accessor for MLHandPoseClassifier(0);
  v25._uint64_t countAndFlagsBits = MLHandPoseClassifier.ModelParameters.description.getter();
  int64_t v7 = v6;
  v22._uint64_t countAndFlagsBits = MLClassifierMetrics.accuracyDescription.getter();
  v22._char object = v8;
  uint64_t v9 = *(int *)(v5 + 32);
  int64_t v10 = v7;
  outlined init with copy of MLTrainingSessionParameters(v1 + v9, (uint64_t)&v20, type metadata accessor for MLClassifierMetrics.Contents);
  LODWORD(v7) = swift_getEnumCaseMultiPayload(&v20, v25._object);
  outlined destroy of MLActivityClassifier.ModelParameters((uint64_t)&v20, type metadata accessor for MLClassifierMetrics.Contents);
  v25._char object = (void *)MLClassifierMetrics.accuracyDescription.getter();
  uint64_t v12 = v11;
  unint64_t v23 = 0xD00000000000001FLL;
  long long v24 = "HandActionClassifier" + 0x8000000000000000;
  v13._uint64_t countAndFlagsBits = v25._countAndFlagsBits;
  v25._uint64_t countAndFlagsBits = (uint64_t)v10;
  v13._char object = v10;
  String.append(_:)(v13);
  v21._uint64_t countAndFlagsBits = 0xD00000000000001ELL;
  v21._char object = "ActivityClassifier\n\nParameters\n" + 0x8000000000000000;
  char object = (char)v22._object;
  String.append(_:)(v22);
  char v15 = (char)v21._object;
  String.append(_:)(v21);
  swift_bridgeObjectRelease(v15);
  if (v7 > 1)
  {
    char v18 = object;
  }
  else
  {
    v21._uint64_t countAndFlagsBits = 0xD000000000000020;
    v21._char object = "\nPerformance on Training Data\n" + 0x8000000000000000;
    v16._uint64_t countAndFlagsBits = (uint64_t)v25._object;
    v16._char object = v12;
    String.append(_:)(v16);
    char v17 = (char)v21._object;
    String.append(_:)(v21);
    swift_bridgeObjectRelease(object);
    char v18 = (char)v12;
    LOBYTE(v12) = v17;
  }
  swift_bridgeObjectRelease(v18);
  swift_bridgeObjectRelease((_BYTE)v12);
  swift_bridgeObjectRelease(v25._countAndFlagsBits);
  return v23;
}

NSAttributedString MLHandPoseClassifier.playgroundDescription.getter()
{
  uint64_t v1 = v0;
  uint64_t v2 = type metadata accessor for OS_os_log(0, &lazy cache variable for type metadata for NSAttributedString, NSAttributedString_ptr);
  v3._uint64_t countAndFlagsBits = MLHandPoseClassifier.debugDescription.getter();
  v3._char object = v4;
  result.super.isa = NSAttributedString.__allocating_init(string:)(v3).super.isa;
  v1[3].super.isa = (Class)v2;
  v1->super.isa = result.super.isa;
  return result;
}

NSAttributedString __swiftcall NSAttributedString.__allocating_init(string:)(Swift::String string)
{
  uint64_t v1 = (objc_class *)((uint64_t (*)())swift_getObjCClassFromMetadata)();
  id v2 = objc_allocWithZone(v1);
  NSString v3 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(string._object);
  id v4 = [v2 initWithString:v3];

  return (NSAttributedString)v4;
}

unint64_t protocol witness for CustomStringConvertible.description.getter in conformance MLHandPoseClassifier()
{
  return MLHandPoseClassifier.description.getter();
}

unint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance MLHandPoseClassifier()
{
  return MLHandPoseClassifier.debugDescription.getter();
}

NSAttributedString protocol witness for CustomPlaygroundDisplayConvertible.playgroundDescription.getter in conformance MLHandPoseClassifier()
{
  return MLHandPoseClassifier.playgroundDescription.getter();
}

uint64_t specialized Collection<>.mostFrequent()(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4)
{
  uint64_t v6 = (void *)Dictionary.init(dictionaryLiteral:)(_swiftEmptyArrayStorage, &type metadata for String, &type metadata for Int, &protocol witness table for String);
  int64_t v7 = a4 >> 1;
  if (v7 != a3)
  {
    swift_unknownObjectRetain(a1);
    id v8 = (uint64_t *)(a2 + 16 * a3 + 8);
    uint64_t v34 = v7;
    do
    {
      if (a3 >= v7) {
        BUG();
      }
      uint64_t v32 = a3;
      uint64_t v9 = *(v8 - 1);
      uint64_t v33 = v8;
      uint64_t v10 = *v8;
      swift_bridgeObjectRetain_n(*v8, 2);
      char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v6);
      uint64_t v35 = v9;
      uint64_t v36 = v10;
      unint64_t v13 = specialized __RawDictionaryStorage.find<A>(_:)(v9, v10);
      BOOL v14 = (v12 & 1) == 0;
      BOOL v15 = __OFADD__(v6[2], v14);
      Swift::Int v16 = v6[2] + v14;
      if (v15) {
        BUG();
      }
      char v17 = v12;
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _NativeDictionary<String, Int>);
      if (_NativeDictionary.ensureUnique(isUnique:capacity:)(isUniquelyReferenced_nonNull_native, v16))
      {
        unint64_t v13 = specialized __RawDictionaryStorage.find<A>(_:)(v35, v36);
        if ((v17 & 1) != (v18 & 1))
        {
          KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(&type metadata for String);
          BUG();
        }
      }
      swift_bridgeObjectRelease(0);
      int64_t v7 = v34;
      if ((v17 & 1) == 0)
      {
        v6[(v13 >> 6) + 8] |= 1 << v13;
        uint64_t v21 = v6[6];
        uint64_t v22 = 16 * v13;
        *(void *)(v21 + v22) = v35;
        *(void *)(v21 + v22 + 8) = v36;
        *(void *)(v6[7] + 8 * v13) = 0;
        uint64_t v23 = v6[2];
        BOOL v15 = __OFADD__(1, v23);
        uint64_t v24 = v23 + 1;
        if (v15) {
          BUG();
        }
        v6[2] = v24;
        swift_bridgeObjectRetain(v36);
      }
      uint64_t v25 = v6[7];
      uint64_t v26 = *(void *)(v25 + 8 * v13);
      BOOL v15 = __OFADD__(1, v26);
      uint64_t v27 = v26 + 1;
      if (v15) {
        BUG();
      }
      a3 = v32 + 1;
      *(void *)(v25 + 8 * v13) = v27;
      swift_bridgeObjectRelease_n(v36, 2, v19, v27, v20);
      id v8 = v33 + 2;
    }
    while (v34 != v32 + 1);
    swift_unknownObjectRelease(a1);
  }
  uint64_t v28 = specialized Sequence.max(by:)((uint64_t)v6);
  uint64_t v30 = v29;
  swift_bridgeObjectRelease((_BYTE)v6);
  if (!v30) {
    return 0;
  }
  return v28;
}

uint64_t specialized Collection<>.mostFrequent()()
{
  int v64 = v0;
  uint64_t v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ColumnSlice<String>);
  uint64_t v2 = *(void *)(v1 - 8);
  int64_t v3 = *(void *)(v2 + 64);
  id v4 = alloca(v3);
  uint64_t v5 = alloca(v3);
  uint64_t v62 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for IndexingIterator<ColumnSlice<String>>);
  int64_t v6 = *(void *)(*(void *)(v62 - 8) + 64);
  int64_t v7 = alloca(v6);
  id v8 = alloca(v6);
  uint64_t v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for String?);
  uint64_t v10 = lazy protocol witness table accessor for type String? and conformance <A> A?();
  uint64_t v58 = v9;
  uint64_t v63 = (void *)Dictionary.init(dictionaryLiteral:)(_swiftEmptyArrayStorage, v9, &type metadata for Int, v10);
  uint64_t v54 = v2;
  uint64_t v56 = *(void (**)(unsigned char *, uint64_t *, uint64_t))(v2 + 16);
  v56(v52, v64, v1);
  uint64_t v11 = lazy protocol witness table accessor for type FullyConnectedNetworkClassifier<Float, String> and conformance FullyConnectedNetworkClassifier<A, B>(&lazy protocol witness table cache variable for type ColumnSlice<String> and conformance ColumnSlice<A>, &demangling cache variable for type metadata for ColumnSlice<String>, (uint64_t)&protocol conformance descriptor for ColumnSlice<A>);
  uint64_t v55 = v52;
  dispatch thunk of Sequence.makeIterator()(v1, v11);
  char v12 = (uint64_t *)*(int *)(v62 + 36);
  uint64_t v13 = lazy protocol witness table accessor for type FullyConnectedNetworkClassifier<Float, String> and conformance FullyConnectedNetworkClassifier<A, B>(&lazy protocol witness table cache variable for type ColumnSlice<String> and conformance ColumnSlice<A>, &demangling cache variable for type metadata for ColumnSlice<String>, (uint64_t)&protocol conformance descriptor for ColumnSlice<A>);
  int v64 = v12;
  uint64_t v14 = *(void *)&v52[(void)v12];
  uint64_t v60 = v1;
  uint64_t v15 = v13;
  dispatch thunk of Collection.endIndex.getter(v1, v13);
  if (v14 == v53[0])
  {
    Swift::Int v16 = (uint64_t *)v52;
  }
  else
  {
    int v64 = (uint64_t *)&v52[(void)v64];
    uint64_t v17 = v60;
    Swift::Int v16 = (uint64_t *)v52;
    uint64_t v57 = v52;
    uint64_t v59 = v15;
    do
    {
      char v18 = (void (*)(void *, void))dispatch thunk of Collection.subscript.read(v53, v64, v17, v15);
      uint64_t v62 = *v19;
      uint64_t v20 = v19[1];
      swift_bridgeObjectRetain(v20);
      v18(v53, 0);
      uint64_t v21 = v55;
      v56(v55, v16, v17);
      dispatch thunk of Collection.formIndex(after:)(v64, v17, v59);
      (*(void (**)(unsigned char *, uint64_t))(v54 + 8))(v21, v17);
      swift_bridgeObjectRetain(v20);
      uint64_t v22 = (uint64_t)v63;
      char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v63);
      v53[0] = v22;
      uint64_t v61 = v20;
      unint64_t v25 = specialized __RawDictionaryStorage.find<A>(_:)(v62, v20);
      uint64_t v26 = v22;
      BOOL v27 = (v24 & 1) == 0;
      BOOL v28 = __OFADD__(*(void *)(v26 + 16), v27);
      Swift::Int v29 = *(void *)(v26 + 16) + v27;
      if (v28) {
        BUG();
      }
      char v30 = v24;
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _NativeDictionary<String?, Int>);
      Swift::Bool v31 = _NativeDictionary.ensureUnique(isUnique:capacity:)(isUniquelyReferenced_nonNull_native, v29);
      uint64_t v63 = (void *)v53[0];
      uint64_t v32 = v64;
      if (v31)
      {
        unint64_t v25 = specialized __RawDictionaryStorage.find<A>(_:)(v62, v61);
        if ((v30 & 1) != (v33 & 1))
        {
          KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(v58);
          BUG();
        }
      }
      swift_bridgeObjectRelease(0);
      uint64_t v17 = v60;
      uint64_t v36 = v57;
      if ((v30 & 1) == 0)
      {
        uint64_t v37 = v63;
        v63[(v25 >> 6) + 8] |= 1 << v25;
        uint64_t v38 = v37[6];
        uint64_t v39 = 16 * v25;
        *(void *)(v38 + v39) = v62;
        char v40 = v61;
        *(void *)(v38 + v39 + 8) = v61;
        *(void *)(v37[7] + 8 * v25) = 0;
        uint64_t v41 = v37[2];
        BOOL v28 = __OFADD__(1, v41);
        uint64_t v42 = v41 + 1;
        if (v28) {
          BUG();
        }
        v63[2] = v42;
        swift_bridgeObjectRetain(v40);
      }
      uint64_t v43 = v63[7];
      uint64_t v44 = *(void *)(v43 + 8 * v25);
      BOOL v28 = __OFADD__(1, v44);
      uint64_t v45 = v44 + 1;
      if (v28) {
        BUG();
      }
      *(void *)(v43 + 8 * v25) = v45;
      swift_bridgeObjectRelease_n(v61, 2, v34, v45, v35);
      uint64_t v46 = *v32;
      Swift::Int v16 = (uint64_t *)v36;
      uint64_t v15 = v59;
      dispatch thunk of Collection.endIndex.getter(v17, v59);
    }
    while (v46 != v53[0]);
  }
  outlined destroy of Either<LogisticRegressionClassifier<Float, String>, FullyConnectedNetworkClassifier<Float, String>>((uint64_t)v16, &demangling cache variable for type metadata for IndexingIterator<ColumnSlice<String>>);
  char v47 = (char)v63;
  uint64_t v48 = specialized Sequence.max(by:)((uint64_t)v63);
  uint64_t v50 = v49;
  swift_bridgeObjectRelease(v47);
  uint64_t result = 0;
  if (v50 != 2) {
    return v48;
  }
  return result;
}

id specialized Collection<>.mostFrequent()(uint64_t a1)
{
  uint64_t v1 = a1;
  uint64_t v2 = type metadata accessor for NLLanguage(0);
  uint64_t v3 = lazy protocol witness table accessor for type VNImageOption and conformance VNImageOption(&lazy protocol witness table cache variable for type NLLanguage and conformance NLLanguage, type metadata accessor for NLLanguage, (uint64_t)&protocol conformance descriptor for NLLanguage);
  id v4 = (void *)Dictionary.init(dictionaryLiteral:)(_swiftEmptyArrayStorage, v2, &type metadata for Int, v3);
  uint64_t v25 = *(void *)(a1 + 16);
  if (v25)
  {
    uint64_t v26 = v2;
    swift_bridgeObjectRetain(a1);
    uint64_t v5 = 0;
    do
    {
      uint64_t v23 = v5;
      id v6 = *(id *)(v1 + 8 * v5 + 32);
      id v7 = v6;
      char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v4);
      id v24 = v7;
      unint64_t v10 = specialized __RawDictionaryStorage.find<A>(_:)((uint64_t)v7);
      BOOL v11 = (v9 & 1) == 0;
      BOOL v12 = __OFADD__(v4[2], v11);
      Swift::Int v13 = v4[2] + v11;
      if (v12) {
        BUG();
      }
      char v14 = v9;
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _NativeDictionary<NLLanguage, Int>);
      if (_NativeDictionary.ensureUnique(isUnique:capacity:)(isUniquelyReferenced_nonNull_native, v13))
      {
        unint64_t v10 = specialized __RawDictionaryStorage.find<A>(_:)((uint64_t)v24);
        if ((v14 & 1) != (v15 & 1))
        {
          KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(v26);
          BUG();
        }
      }
      swift_bridgeObjectRelease(0);
      if ((v14 & 1) == 0)
      {
        v4[(v10 >> 6) + 8] |= 1 << v10;
        *(void *)(v4[6] + 8 * v10) = v24;
        *(void *)(v4[7] + 8 * v10) = 0;
        uint64_t v16 = v4[2];
        BOOL v12 = __OFADD__(1, v16);
        uint64_t v17 = v16 + 1;
        if (v12) {
          BUG();
        }
        v4[2] = v17;
        v24;
      }
      uint64_t v18 = v4[7];
      uint64_t v19 = *(void *)(v18 + 8 * v10);
      BOOL v12 = __OFADD__(1, v19);
      uint64_t v20 = v19 + 1;
      if (v12) {
        BUG();
      }
      uint64_t v5 = v23 + 1;
      *(void *)(v18 + 8 * v10) = v20;

      uint64_t v1 = a1;
    }
    while (v25 != v23 + 1);
    swift_bridgeObjectRelease(a1);
  }
  id v21 = specialized Sequence.max(by:)((uint64_t)v4);
  swift_bridgeObjectRelease((_BYTE)v4);
  return v21;
}

uint64_t specialized Sequence.max(by:)(uint64_t a1)
{
  char v1 = a1;
  specialized _NativeDictionary.makeIterator()(a1);
  uint64_t v32 = v28;
  if (!v31)
  {
    int64_t v22 = v30 + 1;
    if (__OFADD__(1, v30)) {
      BUG();
    }
    int64_t v23 = (unint64_t)(v29 + 64) >> 6;
    if (v22 < v23)
    {
      unint64_t v24 = *(void *)(v28 + 8 * v22);
      if (v24)
      {
        int64_t v6 = v30 + 1;
LABEL_30:
        _BitScanForward64(&v25, v24);
        char v2 = v1;
        int64_t v33 = (unint64_t)(v29 + 64) >> 6;
        unint64_t v4 = v24 & (v24 - 1);
        unint64_t v5 = v25 + (v6 << 6);
        goto LABEL_3;
      }
      int64_t v6 = v30 + 2;
      if (v30 + 2 < v23)
      {
        unint64_t v24 = *(void *)(v28 + 8 * v22 + 8);
        if (v24) {
          goto LABEL_30;
        }
        int64_t v6 = v30 + 3;
        if (v30 + 3 < v23)
        {
          unint64_t v24 = *(void *)(v28 + 8 * v22 + 16);
          if (v24) {
            goto LABEL_30;
          }
          int64_t v6 = v30 + 4;
          if (v30 + 4 < v23)
          {
            unint64_t v24 = *(void *)(v28 + 8 * v22 + 24);
            if (v24) {
              goto LABEL_30;
            }
            int64_t v6 = v30 + 5;
            if (v30 + 5 < v23)
            {
              unint64_t v24 = *(void *)(v28 + 8 * v22 + 32);
              if (!v24)
              {
                int64_t v26 = v30 + 6;
                do
                {
                  if (v26 >= v23) {
                    goto LABEL_43;
                  }
                  unint64_t v24 = *(void *)(v28 + 8 * v26++);
                }
                while (!v24);
                int64_t v6 = v26 - 1;
              }
              goto LABEL_30;
            }
          }
        }
      }
    }
LABEL_43:
    swift_bridgeObjectRetain(v1);
    outlined release of _NativeDictionary<String?, Int>.Iterator(&v27);
    return 0;
  }
  char v2 = a1;
  _BitScanForward64(&v3, v31);
  unint64_t v4 = v31 & (v31 - 1);
  unint64_t v5 = v3 | (v30 << 6);
  int64_t v33 = (unint64_t)(v29 + 64) >> 6;
  int64_t v6 = v30;
LABEL_3:
  uint64_t v7 = *(void *)(v27 + 48);
  uint64_t v8 = *(void *)(v27 + 56);
  uint64_t v34 = *(void *)(v7 + 16 * v5);
  uint64_t v9 = *(void *)(v7 + 16 * v5 + 8);
  uint64_t v36 = *(void *)(v8 + 8 * v5);
  swift_bridgeObjectRetain(v2);
  uint64_t v35 = v9;
  swift_bridgeObjectRetain(v9);
  uint64_t v10 = v36;
  while (v4)
  {
    _BitScanForward64(&v11, v4);
    v4 &= v4 - 1;
    unint64_t v12 = v11 | (v6 << 6);
LABEL_23:
    uint64_t v18 = *(void *)(*(void *)(v27 + 56) + 8 * v12);
    if (v10 < v18)
    {
      uint64_t v19 = *(void *)(v27 + 48);
      uint64_t v20 = 16 * v12;
      uint64_t v34 = *(void *)(v19 + v20);
      uint64_t v36 = *(void *)(v19 + v20 + 8);
      swift_bridgeObjectRetain(v36);
      swift_bridgeObjectRelease(v35);
      uint64_t v35 = v36;
      uint64_t v10 = v18;
    }
  }
  int64_t v13 = v6 + 1;
  if (__OFADD__(1, v6)) {
    BUG();
  }
  if (v13 >= v33) {
    goto LABEL_25;
  }
  unint64_t v14 = *(void *)(v32 + 8 * v13);
  if (v14)
  {
    int64_t v15 = v6 + 1;
LABEL_22:
    _BitScanForward64(&v17, v14);
    unint64_t v4 = v14 & (v14 - 1);
    unint64_t v12 = v17 + (v15 << 6);
    int64_t v6 = v15;
    goto LABEL_23;
  }
  int64_t v15 = v6 + 2;
  if (v6 + 2 >= v33) {
    goto LABEL_25;
  }
  unint64_t v14 = *(void *)(v32 + 8 * v13 + 8);
  if (v14) {
    goto LABEL_22;
  }
  int64_t v15 = v6 + 3;
  if (v6 + 3 >= v33) {
    goto LABEL_25;
  }
  unint64_t v14 = *(void *)(v32 + 8 * v13 + 16);
  if (v14) {
    goto LABEL_22;
  }
  int64_t v15 = v6 + 4;
  if (v6 + 4 >= v33) {
    goto LABEL_25;
  }
  unint64_t v14 = *(void *)(v32 + 8 * v13 + 24);
  if (v14) {
    goto LABEL_22;
  }
  int64_t v15 = v6 + 5;
  if (v6 + 5 >= v33) {
    goto LABEL_25;
  }
  unint64_t v14 = *(void *)(v32 + 8 * v13 + 32);
  if (v14) {
    goto LABEL_22;
  }
  int64_t v16 = v6 + 6;
  while (v16 < v33)
  {
    unint64_t v14 = *(void *)(v32 + 8 * v16++);
    if (v14)
    {
      int64_t v15 = v16 - 1;
      goto LABEL_22;
    }
  }
LABEL_25:
  swift_release();
  return v34;
}

{
  unint64_t v2;
  unint64_t v3;
  unint64_t v4;
  int64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  int64_t v12;
  unint64_t v13;
  int64_t v14;
  int64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  int64_t v20;
  int64_t v21;
  unint64_t v22;
  unint64_t v23;
  int64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  int64_t v28;
  unint64_t v29;
  uint64_t v30;
  int64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;

  specialized _NativeDictionary.makeIterator()(a1);
  int64_t v30 = v26;
  if (v29)
  {
    uint64_t v32 = a1;
    _BitScanForward64(&v2, v29);
    unint64_t v3 = v29 & (v29 - 1);
    unint64_t v4 = v2 | (v28 << 6);
    unint64_t v31 = (unint64_t)(v27 + 64) >> 6;
    unint64_t v5 = v28;
    goto LABEL_3;
  }
  uint64_t v20 = v28 + 1;
  if (__OFADD__(1, v28)) {
    BUG();
  }
  id v21 = (unint64_t)(v27 + 64) >> 6;
  if (v20 >= v21) {
    goto LABEL_44;
  }
  int64_t v22 = *(void *)(v26 + 8 * v20);
  if (!v22)
  {
    unint64_t v5 = v28 + 2;
    if (v28 + 2 < v21)
    {
      int64_t v22 = *(void *)(v26 + 8 * v20 + 8);
      if (v22) {
        goto LABEL_31;
      }
      unint64_t v5 = v28 + 3;
      if (v28 + 3 < v21)
      {
        int64_t v22 = *(void *)(v26 + 8 * v20 + 16);
        if (v22) {
          goto LABEL_31;
        }
        unint64_t v5 = v28 + 4;
        if (v28 + 4 < v21)
        {
          int64_t v22 = *(void *)(v26 + 8 * v20 + 24);
          if (v22) {
            goto LABEL_31;
          }
          unint64_t v5 = v28 + 5;
          if (v28 + 5 < v21)
          {
            int64_t v22 = *(void *)(v26 + 8 * v20 + 32);
            if (!v22)
            {
              unint64_t v24 = v28 + 6;
              do
              {
                if (v24 >= v21) {
                  goto LABEL_44;
                }
                int64_t v22 = *(void *)(v26 + 8 * v24++);
              }
              while (!v22);
              unint64_t v5 = v24 - 1;
            }
            goto LABEL_31;
          }
        }
      }
    }
LABEL_44:
    swift_bridgeObjectRetain(a1);
    outlined release of _NativeDictionary<String?, Int>.Iterator(&v25);
    return 0;
  }
  unint64_t v5 = v28 + 1;
LABEL_31:
  uint64_t v32 = a1;
  _BitScanForward64(&v23, v22);
  unint64_t v31 = (unint64_t)(v27 + 64) >> 6;
  unint64_t v3 = v22 & (v22 - 1);
  unint64_t v4 = v23 + (v5 << 6);
LABEL_3:
  int64_t v6 = *(void *)(v25 + 48);
  uint64_t v7 = *(void *)(v25 + 56);
  int64_t v33 = *(void *)(v6 + 16 * v4);
  uint64_t v8 = *(void *)(v7 + 8 * v4);
  uint64_t v34 = *(void *)(v6 + 16 * v4 + 8);
  swift_bridgeObjectRetain(v34);
  swift_bridgeObjectRetain(v32);
LABEL_4:
  uint64_t v9 = v8;
  while (v3)
  {
    _BitScanForward64(&v10, v3);
    v3 &= v3 - 1;
    unint64_t v11 = v10 | (v5 << 6);
LABEL_24:
    uint64_t v8 = *(void *)(*(void *)(v25 + 56) + 8 * v11);
    if (v9 < v8)
    {
      unint64_t v17 = *(void *)(v25 + 48);
      uint64_t v18 = 16 * v11;
      int64_t v33 = *(void *)(v17 + v18);
      uint64_t v32 = *(void *)(v17 + v18 + 8);
      swift_bridgeObjectRetain(v32);
      swift_bridgeObjectRelease(v34);
      uint64_t v34 = v32;
      goto LABEL_4;
    }
  }
  unint64_t v12 = v5 + 1;
  if (__OFADD__(1, v5)) {
    BUG();
  }
  if (v12 >= v31) {
    goto LABEL_26;
  }
  int64_t v13 = *(void *)(v30 + 8 * v12);
  if (v13)
  {
    unint64_t v14 = v5 + 1;
LABEL_23:
    _BitScanForward64(&v16, v13);
    unint64_t v3 = v13 & (v13 - 1);
    unint64_t v11 = v16 + (v14 << 6);
    unint64_t v5 = v14;
    goto LABEL_24;
  }
  unint64_t v14 = v5 + 2;
  if (v5 + 2 >= v31) {
    goto LABEL_26;
  }
  int64_t v13 = *(void *)(v30 + 8 * v12 + 8);
  if (v13) {
    goto LABEL_23;
  }
  unint64_t v14 = v5 + 3;
  if (v5 + 3 >= v31) {
    goto LABEL_26;
  }
  int64_t v13 = *(void *)(v30 + 8 * v12 + 16);
  if (v13) {
    goto LABEL_23;
  }
  unint64_t v14 = v5 + 4;
  if (v5 + 4 >= v31) {
    goto LABEL_26;
  }
  int64_t v13 = *(void *)(v30 + 8 * v12 + 24);
  if (v13) {
    goto LABEL_23;
  }
  unint64_t v14 = v5 + 5;
  if (v5 + 5 >= v31) {
    goto LABEL_26;
  }
  int64_t v13 = *(void *)(v30 + 8 * v12 + 32);
  if (v13) {
    goto LABEL_23;
  }
  int64_t v15 = v5 + 6;
  while (v15 < v31)
  {
    int64_t v13 = *(void *)(v30 + 8 * v15++);
    if (v13)
    {
      unint64_t v14 = v15 - 1;
      goto LABEL_23;
    }
  }
LABEL_26:
  swift_release();
  return v33;
}

id specialized Sequence.max(by:)(uint64_t a1)
{
  specialized _NativeDictionary.makeIterator()(a1);
  uint64_t v30 = v26;
  if (v29)
  {
    uint64_t v33 = v1;
    _BitScanForward64(&v2, v29);
    unint64_t v3 = v29 & (v29 - 1);
    unint64_t v4 = v2 | (v28 << 6);
    int64_t v32 = (unint64_t)(v27 + 64) >> 6;
    int64_t v5 = v28;
    goto LABEL_3;
  }
  int64_t v20 = v28 + 1;
  if (__OFADD__(1, v28)) {
    BUG();
  }
  int64_t v21 = (unint64_t)(v27 + 64) >> 6;
  if (v20 >= v21) {
    goto LABEL_44;
  }
  unint64_t v22 = *(void *)(v26 + 8 * v20);
  if (!v22)
  {
    int64_t v5 = v28 + 2;
    if (v28 + 2 < v21)
    {
      unint64_t v22 = *(void *)(v26 + 8 * v20 + 8);
      if (v22) {
        goto LABEL_31;
      }
      int64_t v5 = v28 + 3;
      if (v28 + 3 < v21)
      {
        unint64_t v22 = *(void *)(v26 + 8 * v20 + 16);
        if (v22) {
          goto LABEL_31;
        }
        int64_t v5 = v28 + 4;
        if (v28 + 4 < v21)
        {
          unint64_t v22 = *(void *)(v26 + 8 * v20 + 24);
          if (v22) {
            goto LABEL_31;
          }
          int64_t v5 = v28 + 5;
          if (v28 + 5 < v21)
          {
            unint64_t v22 = *(void *)(v26 + 8 * v20 + 32);
            if (!v22)
            {
              int64_t v24 = v28 + 6;
              do
              {
                if (v24 >= v21) {
                  goto LABEL_44;
                }
                unint64_t v22 = *(void *)(v26 + 8 * v24++);
              }
              while (!v22);
              int64_t v5 = v24 - 1;
            }
            goto LABEL_31;
          }
        }
      }
    }
LABEL_44:
    swift_bridgeObjectRetain(a1);
    outlined release of _NativeDictionary<String?, Int>.Iterator(&v25);
    return 0;
  }
  int64_t v5 = v28 + 1;
LABEL_31:
  _BitScanForward64(&v23, v22);
  int64_t v32 = (unint64_t)(v27 + 64) >> 6;
  uint64_t v33 = v1;
  unint64_t v3 = v22 & (v22 - 1);
  unint64_t v4 = v23 + (v5 << 6);
LABEL_3:
  uint64_t v6 = *(void *)(v25 + 56);
  id v34 = *(id *)(*(void *)(v25 + 48) + 8 * v4);
  uint64_t v7 = *(void *)(v6 + 8 * v4);
  swift_bridgeObjectRetain(a1);
  id v8 = v34;
LABEL_4:
  uint64_t v9 = v7;
  while (v3)
  {
    _BitScanForward64(&v10, v3);
    v3 &= v3 - 1;
    unint64_t v11 = v10 | (v5 << 6);
LABEL_24:
    uint64_t v7 = *(void *)(*(void *)(v25 + 56) + 8 * v11);
    if (v9 < v7)
    {
      unint64_t v17 = *(void **)(*(void *)(v25 + 48) + 8 * v11);
      id v31 = v8;
      id v34 = v17;

      id v8 = v34;
      goto LABEL_4;
    }
  }
  int64_t v12 = v5 + 1;
  if (__OFADD__(1, v5)) {
    BUG();
  }
  if (v12 >= v32) {
    goto LABEL_26;
  }
  unint64_t v13 = *(void *)(v30 + 8 * v12);
  if (v13)
  {
    int64_t v14 = v5 + 1;
LABEL_23:
    _BitScanForward64(&v16, v13);
    unint64_t v3 = v13 & (v13 - 1);
    unint64_t v11 = v16 + (v14 << 6);
    int64_t v5 = v14;
    goto LABEL_24;
  }
  int64_t v14 = v5 + 2;
  if (v5 + 2 >= v32) {
    goto LABEL_26;
  }
  unint64_t v13 = *(void *)(v30 + 8 * v12 + 8);
  if (v13) {
    goto LABEL_23;
  }
  int64_t v14 = v5 + 3;
  if (v5 + 3 >= v32) {
    goto LABEL_26;
  }
  unint64_t v13 = *(void *)(v30 + 8 * v12 + 16);
  if (v13) {
    goto LABEL_23;
  }
  int64_t v14 = v5 + 4;
  if (v5 + 4 >= v32) {
    goto LABEL_26;
  }
  unint64_t v13 = *(void *)(v30 + 8 * v12 + 24);
  if (v13) {
    goto LABEL_23;
  }
  int64_t v14 = v5 + 5;
  if (v5 + 5 >= v32) {
    goto LABEL_26;
  }
  unint64_t v13 = *(void *)(v30 + 8 * v12 + 32);
  if (v13) {
    goto LABEL_23;
  }
  int64_t v15 = v5 + 6;
  while (v15 < v32)
  {
    unint64_t v13 = *(void *)(v30 + 8 * v15++);
    if (v13)
    {
      int64_t v14 = v15 - 1;
      goto LABEL_23;
    }
  }
LABEL_26:
  id v18 = v8;
  swift_release();
  return v18;
}

void *specialized OptionSet<>.init()()
{
  void *result = 0;
  return result;
}

{
  return specialized OptionSet<>.init()();
}

uint64_t specialized MLActivityClassifier.DataBatcher.generateBatch<A>(startingAt:rowCount:seed:_:)(int64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v195 = v4;
  uint64_t v216 = a3;
  uint64_t v206 = a2;
  int64_t v202 = a1;
  uint64_t v201 = v3;
  uint64_t v6 = type metadata accessor for MLActivityClassifier.DataBatcher(0);
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = v6;
  v193 = (int *)v6;
  int64_t v9 = *(void *)(v7 + 64);
  unint64_t v10 = alloca(v9);
  unint64_t v11 = alloca(v9);
  v177 = &v166;
  uint64_t v187 = type metadata accessor for DataFrame.Row(0);
  uint64_t v188 = *(void *)(v187 - 8);
  int64_t v12 = *(void *)(v188 + 64);
  unint64_t v13 = alloca(v12);
  int64_t v14 = alloca(v12);
  v207 = &v166;
  uint64_t v183 = type metadata accessor for DataFrame.Rows(0);
  uint64_t v175 = *(void *)(v183 - 8);
  int64_t v15 = *(void *)(v175 + 64);
  unint64_t v16 = alloca(v15);
  unint64_t v17 = alloca(v15);
  uint64_t v186 = &v166;
  uint64_t v210 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Column<[Float]>);
  uint64_t v211 = *(void *)(v210 - 8);
  int64_t v18 = *(void *)(v211 + 64);
  uint64_t v19 = alloca(v18);
  int64_t v20 = alloca(v18);
  char v180 = &v166;
  int64_t v21 = alloca(v18);
  unint64_t v22 = alloca(v18);
  uint64_t v217 = (uint64_t)&v166;
  unint64_t v23 = alloca(v18);
  int64_t v24 = alloca(v18);
  uint64_t v208 = &v166;
  uint64_t v196 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Column<[String]>);
  uint64_t v189 = *(void *)(v196 - 8);
  int64_t v25 = *(void *)(v189 + 64);
  uint64_t v26 = alloca(v25);
  uint64_t v27 = alloca(v25);
  uint64_t v28 = *(int *)(v8 + 24);
  uint64_t v213 = v5;
  unint64_t v29 = *(void **)(v5 + v28);
  uint64_t v176 = v28;
  uint64_t v30 = *(void *)(v5 + v28 + 8);
  swift_bridgeObjectRetain(v30);
  uint64_t v31 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [String]);
  uint64_t v203 = &v166;
  uint64_t v184 = v31;
  Column.init(name:capacity:)(v29, v30, v206, v31);
  uint64_t v197 = v29;
  uint64_t v198 = v30;
  swift_bridgeObjectRetain(v30);
  v32._uint64_t countAndFlagsBits = 0x7468676965775FLL;
  v32._char object = (void *)0xE700000000000000;
  String.append(_:)(v32);
  uint64_t v33 = v197;
  uint64_t v34 = v198;
  uint64_t v35 = v213;
  uint64_t v36 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [Float]);
  uint64_t v37 = v193;
  uint64_t v205 = v36;
  Column.init(name:capacity:)(v33, v34, v206, v36);
  uint64_t v179 = v37[7];
  uint64_t v38 = *(void *)(v35 + v179);
  int64_t v39 = *(void *)(v38 + 16);
  char v40 = _swiftEmptyArrayStorage;
  if (v39)
  {
    uint64_t v197 = _swiftEmptyArrayStorage;
    swift_bridgeObjectRetain(v38);
    Swift::String v214 = (void *)v39;
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v39, 0);
    uint64_t v41 = v197;
    uint64_t v212 = v38;
    uint64_t v42 = (uint64_t *)(v38 + 40);
    do
    {
      unint64_t v218 = *(v42 - 1);
      uint64_t v43 = *v42;
      swift_bridgeObjectRetain(*v42);
      Column.init(name:capacity:)(v218, v43, v206, v205);
      uint64_t v197 = v41;
      unint64_t v44 = v41[2];
      unint64_t v45 = v44 + 1;
      if (v41[3] >> 1 <= v44)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v41[3] >= 2uLL, v44 + 1, 1);
        unint64_t v45 = v44 + 1;
        uint64_t v41 = v197;
      }
      v41[2] = v45;
      (*(void (**)(char *, uint64_t, uint64_t))(v211 + 32))((char *)v41+ ((*(unsigned __int8 *)(v211 + 80) + 32) & ~*(unsigned __int8 *)(v211 + 80))+ *(void *)(v211 + 72) * v44, v217, v210);
      v42 += 2;
      Swift::String v214 = (void *)((char *)v214 - 1);
    }
    while (v214);
    swift_bridgeObjectRelease(v212);
    uint64_t v35 = v213;
    uint64_t v37 = v193;
    char v40 = v41;
  }
  uint64_t v185 = v37[9];
  unint64_t v46 = *(void *)(v35 + v185);
  uint64_t v194 = v37[10];
  unint64_t v47 = *(void *)(v35 + v194);
  int64_t v181 = v47 * v46;
  uint64_t v48 = v211;
  if (!is_mul_ok(v47, v46)) {
    BUG();
  }
  Swift::String v214 = v40;
  uint64_t v49 = v216;
  if (v216 < 0)
  {
LABEL_159:
    _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, "Negative value is not representable", 35, 2, "Swift/Integers.swift", 20, 2, 3451, 1);
LABEL_158:
    BUG();
  }
  uint64_t v50 = type metadata accessor for MersenneTwisterGenerator();
  swift_allocObject(v50, 136, 7);
  uint64_t v197 = MersenneTwisterGenerator.init(seed:)(v49);
  uint64_t v51 = v206;
  uint64_t v52 = v205;
  if (v206 < 0) {
    BUG();
  }
  if (v206)
  {
    if (swift_isUniquelyReferenced_nonNull_native(v214))
    {
      uint64_t v53 = v213;
      uint64_t v54 = v214;
    }
    else
    {
      uint64_t v54 = specialized _ArrayBuffer._consumeAndCreateNew()((uint64_t)v214);
      uint64_t v53 = v213;
    }
    uint64_t v55 = 0;
    uint64_t v56 = v186;
    Swift::String v214 = v54;
    while (1)
    {
      if (v55 == v51) {
        BUG();
      }
      uint64_t v178 = v55;
      uint64_t v57 = v56;
      DataFrame.rows.getter();
      unint64_t v218 = DataFrame.Rows.count.getter();
      uint64_t v58 = *(void (**)(uint64_t *, uint64_t))(v175 + 8);
      v58(v57, v183);
      if (v202 >= (uint64_t)v218) {
        break;
      }
      v204 = _swiftEmptyArrayStorage;
      uint64_t v199 = _swiftEmptyArrayStorage;
      uint64_t v217 = (uint64_t)specialized Array.init(repeating:count:)((uint64_t)_swiftEmptyArrayStorage, v214[2]);
      DataFrame.rows.getter();
      DataFrame.Rows.subscript.getter(v202);
      v58(v57, v183);
      DataFrame.Row.subscript.getter(*(void *)(v53 + v176), *(void *)(v53 + v176 + 8), v184);
      unint64_t v218 = (unint64_t)v215;
      if (!v215) {
        BUG();
      }
      uint64_t v59 = v193;
      char v60 = *(unsigned char *)(v53 + v193[11]);
      uint64_t v61 = (uint64_t)v177;
      outlined init with copy of MLTrainingSessionParameters(v53, (uint64_t)v177, type metadata accessor for MLActivityClassifier.DataBatcher);
      if (v60)
      {
        outlined destroy of MLActivityClassifier.ModelParameters(v61, type metadata accessor for MLActivityClassifier.DataBatcher);
        uint64_t v62 = 0;
      }
      else
      {
        uint64_t v63 = *(void *)(v218 + 16);
        uint64_t v216 = *(void *)(v61 + v59[10]);
        unint64_t v64 = *(void *)(v61 + v59[9]);
        outlined destroy of MLActivityClassifier.ModelParameters(v61, type metadata accessor for MLActivityClassifier.DataBatcher);
        unint64_t v66 = v64;
        uint64_t v65 = v216 * v64;
        if (!is_mul_ok(v216, v66)) {
          BUG();
        }
        if (v65 >= v63)
        {
          uint64_t v62 = 0;
          uint64_t v53 = v213;
        }
        else
        {
          uint64_t v67 = *(void *)(v213 + v185) * *(void *)(v213 + v194);
          if (!is_mul_ok(*(void *)(v213 + v185), *(void *)(v213 + v194))) {
            BUG();
          }
          BOOL v68 = __OFSUB__(v63, v67);
          int64_t v69 = v63 - v67;
          if (v68) {
            BUG();
          }
          if (v69 < 0) {
            goto LABEL_159;
          }
          uint64_t v62 = specialized RandomNumberGenerator.next<A>(upperBound:)(v69);
          uint64_t v53 = v213;
          if (v62 < 0) {
            BUG();
          }
        }
      }
      uint64_t v70 = *(void *)(v53 + v185);
      uint64_t v71 = v70 * *(void *)(v53 + v194);
      if (!is_mul_ok(v70, *(void *)(v53 + v194))) {
        BUG();
      }
      BOOL v68 = __OFADD__(v62, v71);
      uint64_t v72 = v62 + v71;
      if (v68) {
        BUG();
      }
      unint64_t v73 = *(void *)(v218 + 16);
      if ((uint64_t)v73 < v72) {
        uint64_t v72 = *(void *)(v218 + 16);
      }
      if (v72 < v62) {
        BUG();
      }
      if (v73 < v62) {
        BUG();
      }
      if (v70 <= 0) {
        BUG();
      }
      int64_t v190 = v72;
      uint64_t v200 = v62;
      specialized ChunksOfCountCollection.init(_base:_chunkCount:)(v218, v218 + 32, v62, 2 * v72 + 1, v70);
      int64_t v74 = specialized ChunksOfCountCollection.count.getter();
      if (v74)
      {
        uint64_t v75 = v74;
        uint64_t v215 = _swiftEmptyArrayStorage;
        int64_t v76 = 0;
        if (v74 > 0) {
          int64_t v76 = v74;
        }
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v76, 0);
        if (v75 < 0 || (uint64_t v77 = v169, v78 = v172, v172 < v169)) {
          BUG();
        }
        uint64_t v191 = v168[0];
        uint64_t v192 = v168[1];
        uint64_t v79 = v215;
        uint64_t v80 = v170 >> 1;
        uint64_t v173 = v170 & 1;
        uint64_t v81 = v169;
        uint64_t v174 = v169;
        uint64_t v182 = v170 >> 1;
        while (1)
        {
          BOOL v82 = v75 == 0;
          uint64_t v83 = v75 - 1;
          if (v82) {
            BUG();
          }
          if (v81 == v80) {
            BUG();
          }
          if (v81 > v80) {
            BUG();
          }
          if (v81 < v77) {
            BUG();
          }
          uint64_t v84 = v80 - v78;
          if (v80 < v78) {
            BUG();
          }
          if (v78 < v77) {
            BUG();
          }
          if (v78 < 0) {
            BUG();
          }
          uint64_t v85 = v79;
          uint64_t v212 = v83;
          unint64_t v209 = v78;
          unint64_t v218 = v173 + 2 * v78;
          uint64_t v86 = v191;
          uint64_t v216 = v81;
          swift_unknownObjectRetain(v191);
          uint64_t v87 = specialized Collection<>.mostFrequent()(v86, v192, v216, v218);
          if (!v88)
          {
            uint64_t v153 = lazy protocol witness table accessor for type MLCreateError and conformance MLCreateError();
            swift_allocError(&type metadata for MLCreateError, v153, 0, 0);
            *(void *)uint64_t v154 = 0xD000000000000038;
            *(void *)(v154 + 8) = "Swift/Integers.swift" + 0x8000000000000000;
            *(_OWORD *)(v154 + 16) = 0;
            *(_OWORD *)(v154 + 32) = 0;
            *(unsigned char *)(v154 + 48) = 0;
            swift_willThrow(&type metadata for MLCreateError, v153, v154, v155, v156, v157);
            outlined release of ChunksOfCountCollection<ArraySlice<String>>(v168);
            swift_release();
            outlined release of ChunksOfCountCollection<ArraySlice<String>>(v168);
            swift_bridgeObjectRelease((_BYTE)v199);
            swift_bridgeObjectRelease((_BYTE)v204);
            swift_bridgeObjectRelease((_BYTE)v214);
            swift_release();
            (*(void (**)(uint64_t *, uint64_t))(v211 + 8))(v208, v210);
            (*(void (**)(uint64_t *, uint64_t))(v189 + 8))(v203, v196);
            (*(void (**)(uint64_t *, uint64_t))(v188 + 8))(v207, v187);
            return swift_bridgeObjectRelease(v217);
          }
          uint64_t v89 = v88;
          unint64_t v218 = v87;
          outlined release of ChunksOfCountCollection<ArraySlice<String>>(v168);
          uint64_t v79 = v85;
          uint64_t v215 = v85;
          unint64_t v90 = v85[2];
          unint64_t v91 = v85[3];
          int64_t v92 = v90 + 1;
          if (v91 >> 1 <= v90)
          {
            uint64_t v216 = v90 + 1;
            specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v91 >= 2, v92, 1);
            int64_t v92 = v216;
            uint64_t v79 = v215;
          }
          v79[2] = v92;
          uint64_t v93 = 2 * v90;
          v79[v93 + 4] = v218;
          v79[v93 + 5] = v89;
          if (v171 <= 0)
          {
            uint64_t v75 = v212;
            int64_t v94 = v209;
            uint64_t v80 = v182;
            if (v84 > 0 || (uint64_t v78 = v182, v171 >= v84))
            {
LABEL_56:
              uint64_t v78 = v94 + v171;
              if (__OFADD__(v94, v171)) {
                BUG();
              }
            }
          }
          else
          {
            uint64_t v75 = v212;
            int64_t v94 = v209;
            uint64_t v80 = v182;
            if (v84 < 0) {
              goto LABEL_56;
            }
            uint64_t v78 = v182;
            if (v84 >= (unint64_t)v171) {
              goto LABEL_56;
            }
          }
          if (v78 < v94) {
            BUG();
          }
          uint64_t v81 = v94;
          uint64_t v77 = v174;
          if (!v75)
          {
            uint64_t v95 = v79;
            outlined release of ChunksOfCountCollection<ArraySlice<String>>(v168);
            goto LABEL_61;
          }
        }
      }
      outlined release of ChunksOfCountCollection<ArraySlice<String>>(v168);
      uint64_t v95 = _swiftEmptyArrayStorage;
LABEL_61:
      swift_bridgeObjectRetain((_BYTE)v95);
      specialized Array.append<A>(contentsOf:)((uint64_t)v95);
      uint64_t v96 = v95[2];
      swift_bridgeObjectRelease((_BYTE)v95);
      uint64_t v97 = specialized Array.init(repeating:count:)(v96, 1.0);
      specialized Array.append<A>(contentsOf:)((uint64_t)v97);
      uint64_t v98 = v213;
      uint64_t v99 = *(void *)(v213 + v179);
      uint64_t v100 = alloca(24);
      uint64_t v101 = alloca(32);
      v168[0] = v207;
      swift_bridgeObjectRetain(v99);
      uint64_t v102 = v195;
      long long v103 = _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSaySSG_SaySfGs5NeverOTg5Tm((void (*)(void *))partial apply for specialized closure #3 in MLActivityClassifier.DataBatcher.generateBatch<A>(startingAt:rowCount:seed:_:), (uint64_t)&v166, v99, (uint64_t)v167, (void (*)(BOOL, unint64_t, uint64_t))specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:));
      uint64_t v195 = v102;
      swift_bridgeObjectRelease(v99);
      uint64_t v216 = (uint64_t)v103;
      uint64_t v212 = v103[2];
      if (v212)
      {
        uint64_t v104 = (void *)v217;
        if (!swift_isUniquelyReferenced_nonNull_native(v217)) {
          uint64_t v104 = specialized _ArrayBuffer._consumeAndCreateNew()((uint64_t)v104);
        }
        uint64_t v217 = (uint64_t)v104;
        int64_t v105 = v104 + 4;
        unint64_t v106 = 0;
        uint64_t v107 = v200;
        do
        {
          uint64_t v108 = *(void *)(v216 + 8 * v106 + 32);
          unint64_t v109 = *(void *)(v108 + 16);
          uint64_t v110 = v190;
          if ((uint64_t)v109 < v190) {
            uint64_t v110 = *(void *)(v108 + 16);
          }
          if (v110 < v107) {
            BUG();
          }
          if (v109 < v107) {
            BUG();
          }
          unint64_t v218 = *(void *)(v217 + 16);
          swift_bridgeObjectRetain_n(v108, 2);
          if (v106 >= v218) {
            BUG();
          }
          ++v106;
          unint64_t v111 = 2 * v110 + 1;
          uint64_t v112 = v200;
          specialized Array.append<A>(contentsOf:)(v108, v108 + 32, v200, v111);
          swift_bridgeObjectRelease(v108);
          uint64_t v107 = v112;
          ++v105;
        }
        while (v212 != v106);
        uint64_t v98 = v213;
      }
      uint64_t v113 = v217;
      swift_bridgeObjectRelease(v216);
      uint64_t v114 = *(void *)(v113 + 16);
      if (!v114) {
        BUG();
      }
      uint64_t v115 = (void *)v113;
      int64_t v190 = *(void *)(*(void *)(v113 + 32) + 16);
      uint64_t v191 = v181 - v190;
      if (v181 > v190)
      {
        unint64_t v209 = specialized Float.init<A>(exactly:)(0, (__m128i)0x3F800000u);
        if (swift_isUniquelyReferenced_nonNull_native(v113)) {
          uint64_t v115 = (void *)v113;
        }
        else {
          uint64_t v115 = specialized _ArrayBuffer._consumeAndCreateNew()(v113);
        }
        uint64_t v116 = 0;
        unint64_t v117 = v209;
        uint64_t v217 = (uint64_t)v115;
        uint64_t v192 = v114;
        do
        {
          if (v116 == v114) {
            BUG();
          }
          if ((v117 & 0x100000000) != 0) {
            BUG();
          }
          uint64_t v118 = v191;
          if (v191 < 0)
          {
            _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, "Can't construct Array with count < 0", 36, 2, "Swift/Array.swift", 17, 2, 936, 1);
            goto LABEL_158;
          }
          unint64_t v119 = v116;
          double v120 = _swiftEmptyArrayStorage;
          if (v181 != v190)
          {
            uint64_t v121 = static Array._allocateBufferUninitialized(minimumCapacity:)(v191);
            int v122 = v209;
            double v120 = (void *)v121;
            *(void *)(v121 + 16) = v118;
            uint64_t v123 = 0;
            do
              *((_DWORD *)v120 + v123++ + 8) = v122;
            while (v118 != v123);
            uint64_t v115 = (void *)v217;
          }
          if (v119 >= v115[2]) {
            BUG();
          }
          unint64_t v124 = v115[v119 + 4];
          uint64_t v125 = *(void *)(v124 + 16);
          uint64_t v126 = v119;
          uint64_t v216 = v120[2];
          int64_t v127 = v216 + v125;
          if (__OFADD__(v216, v125)) {
            BUG();
          }
          Swift::Bool v128 = v115;
          uint64_t v200 = v125;
          unint64_t v218 = v124;
          char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v124);
          char v130 = (void *)v218;
          v128[v126 + 4] = v218;
          uint64_t v131 = v126;
          if (isUniquelyReferenced_nonNull_native && v130[3] >> 1 >= v127)
          {
            v132 = (void *)v217;
          }
          else
          {
            if (v200 > v127) {
              int64_t v127 = v200;
            }
            char v130 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(isUniquelyReferenced_nonNull_native, v127, 1, (uint64_t)v130);
            v132 = (void *)v217;
            *(void *)(v217 + 8 * v126 + 32) = v130;
          }
          uint64_t v133 = v216;
          BOOL v134 = v120[2] == 0;
          uint64_t v212 = v131;
          unint64_t v218 = (unint64_t)v130;
          if (v134)
          {
            if (v216) {
              BUG();
            }
          }
          else
          {
            uint64_t v135 = v130[2];
            if ((v130[3] >> 1) - v135 < v216) {
              BUG();
            }
            uint64_t v136 = (char *)v130 + 4 * v135 + 32;
            if (v120 + 4 < (void *)&v136[4 * v216] && v136 < (char *)v120 + 4 * v216 + 32)
            {
              _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize overlapping range", 49, 2, "Swift/UnsafePointer.swift", 25, 2, 1092, 1);
              goto LABEL_158;
            }
            memcpy(v136, v120 + 4, 4 * v216);
            if (v133)
            {
              BOOL v68 = __OFADD__(*(void *)(v218 + 16), v133);
              uint64_t v137 = *(void *)(v218 + 16) + v133;
              if (v68) {
                BUG();
              }
              *(void *)(v218 + 16) = v137;
            }
          }
          uint64_t v138 = v212;
          uint64_t v139 = v212 + 1;
          swift_bridgeObjectRelease((_BYTE)v120);
          uint64_t v115 = v132;
          v132[v138 + 4] = v218;
          uint64_t v116 = v139;
          BOOL v134 = v139 == v192;
          uint64_t v114 = v192;
          uint64_t v98 = v213;
          unint64_t v117 = v209;
        }
        while (!v134);
      }
      uint64_t v217 = (uint64_t)v115;
      uint64_t v140 = (uint64_t)v204;
      uint64_t v141 = *(void *)(v98 + v194);
      BOOL v142 = v141 <= v204[2];
      uint64_t v143 = v141 - v204[2];
      if (!v142)
      {
        v144 = specialized Array.init(repeating:count:)(0, 0xE000000000000000, v143);
        specialized Array.append<A>(contentsOf:)((uint64_t)v144);
        char v145 = specialized Array.init(repeating:count:)(v143, 0.0);
        specialized Array.append<A>(contentsOf:)((uint64_t)v145);
        uint64_t v140 = (uint64_t)v204;
      }
      uint64_t v216 = v140;
      uint64_t v215 = (void *)v140;
      Column.append(_:)(&v215, v196);
      Swift::String v146 = v199;
      uint64_t v215 = v199;
      Column.append(_:)(&v215, v210);
      LOBYTE(v147) = v217;
      unint64_t v218 = *(void *)(v217 + 16);
      if (v218)
      {
        uint64_t v212 = (uint64_t)v146;
        swift_bridgeObjectRetain(v217);
        Swift::String v146 = (void *)v217;
        unint64_t v148 = 0;
        do
        {
          v147 = v146;
          uint64_t v149 = (void *)v146[v148 + 4];
          uint64_t v215 = v149;
          unint64_t v150 = v214[2];
          swift_bridgeObjectRetain((_BYTE)v149);
          if (v148 >= v150) {
            BUG();
          }
          Column.append(_:)(&v215, v210);
          swift_bridgeObjectRelease((_BYTE)v149);
          ++v148;
          Swift::String v146 = v147;
        }
        while (v218 != v148);
        swift_bridgeObjectRelease(v216);
        char v151 = v212;
      }
      else
      {
        char v151 = v216;
      }
      swift_bridgeObjectRelease(v151);
      swift_bridgeObjectRelease((_BYTE)v146);
      uint64_t v152 = v178 + 1;
      ++v202;
      (*(void (**)(uint64_t *, uint64_t))(v188 + 8))(v207, v187);
      swift_bridgeObjectRelease((_BYTE)v147);
      uint64_t v55 = v152;
      uint64_t v51 = v206;
      BOOL v134 = v152 == v206;
      uint64_t v48 = v211;
      uint64_t v53 = v213;
      uint64_t v56 = v186;
      if (v134) {
        goto LABEL_114;
      }
    }
    uint64_t v48 = v211;
LABEL_114:
    uint64_t v52 = v205;
  }
  DataFrame.init()();
  DataFrame.append<A>(column:)(v203, v184);
  DataFrame.append<A>(column:)(v208, v52);
  char v159 = (char)v214;
  uint64_t v160 = v214[2];
  if (v160)
  {
    uint64_t v161 = v48;
    Swift::String v162 = (char *)v214 + ((*(unsigned __int8 *)(v48 + 80) + 32) & ~*(unsigned __int8 *)(v48 + 80));
    unint64_t v218 = *(void *)(v161 + 16);
    uint64_t v217 = *(void *)(v161 + 72);
    swift_bridgeObjectRetain((_BYTE)v214);
    uint64_t v163 = v210;
    v164 = v180;
    do
    {
      ((void (*)(uint64_t *, char *, uint64_t))v218)(v164, v162, v163);
      DataFrame.append<A>(column:)(v164, v205);
      uint64_t v163 = v210;
      (*(void (**)(uint64_t *, uint64_t))(v211 + 8))(v164, v210);
      v162 += v217;
      --v160;
    }
    while (v160);
    char v165 = (char)v214;
    swift_bridgeObjectRelease((_BYTE)v214);
    char v159 = v165;
  }
  else
  {
    uint64_t v163 = v210;
  }
  swift_bridgeObjectRelease(v159);
  swift_release();
  (*(void (**)(uint64_t *, uint64_t))(v211 + 8))(v208, v163);
  return (*(uint64_t (**)(uint64_t *, uint64_t))(v189 + 8))(v203, v196);
}

uint64_t specialized MLActivityClassifier.DataBatcher.generateBatch<A>(startingAt:rowCount:seed:_:)(int64_t a1, uint64_t a2, int64_t a3)
{
  uint64_t v218 = v4;
  int64_t v223 = a3;
  uint64_t v209 = a2;
  int64_t v212 = a1;
  uint64_t v214 = v3;
  uint64_t v6 = type metadata accessor for MLActivityClassifier.DataBatcher(0);
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = v6;
  uint64_t v201 = (int *)v6;
  int64_t v9 = *(void *)(v7 + 64);
  unint64_t v10 = alloca(v9);
  unint64_t v11 = alloca(v9);
  uint64_t v182 = &v171;
  uint64_t v192 = type metadata accessor for DataFrame.Row(0);
  uint64_t v193 = *(void *)(v192 - 8);
  int64_t v12 = *(void *)(v193 + 64);
  unint64_t v13 = alloca(v12);
  int64_t v14 = alloca(v12);
  uint64_t v216 = &v171;
  uint64_t v188 = type metadata accessor for DataFrame.Rows(0);
  uint64_t v180 = *(void *)(v188 - 8);
  int64_t v15 = *(void *)(v180 + 64);
  unint64_t v16 = alloca(v15);
  unint64_t v17 = alloca(v15);
  uint64_t v191 = &v171;
  uint64_t v196 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Column<[Double]>);
  uint64_t v208 = *(void *)(v196 - 8);
  int64_t v18 = *(void *)(v208 + 64);
  uint64_t v19 = alloca(v18);
  int64_t v20 = alloca(v18);
  uint64_t v179 = &v171;
  int64_t v21 = alloca(v18);
  unint64_t v22 = alloca(v18);
  v224 = &v171;
  uint64_t v203 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Column<[Float]>);
  uint64_t v194 = *(void *)(v203 - 8);
  int64_t v23 = *(void *)(v194 + 64);
  int64_t v24 = alloca(v23);
  int64_t v25 = alloca(v23);
  uint64_t v217 = &v171;
  uint64_t v204 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Column<[String]>);
  uint64_t v195 = *(void *)(v204 - 8);
  int64_t v26 = *(void *)(v195 + 64);
  uint64_t v27 = alloca(v26);
  uint64_t v28 = alloca(v26);
  uint64_t v29 = *(int *)(v8 + 24);
  uint64_t v220 = v5;
  uint64_t v30 = *(void **)(v5 + v29);
  uint64_t v181 = v29;
  uint64_t v31 = *(void *)(v5 + v29 + 8);
  swift_bridgeObjectRetain(v31);
  uint64_t v32 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [String]);
  uint64_t v213 = &v171;
  uint64_t v33 = v209;
  uint64_t v189 = v32;
  Column.init(name:capacity:)(v30, v31, v209, v32);
  uint64_t v205 = v30;
  uint64_t v206 = v31;
  swift_bridgeObjectRetain(v31);
  v34._uint64_t countAndFlagsBits = 0x7468676965775FLL;
  v34._char object = (void *)0xE700000000000000;
  String.append(_:)(v34);
  uint64_t v35 = (uint64_t)v205;
  uint64_t v36 = v206;
  uint64_t v37 = v220;
  uint64_t v38 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [Float]);
  v34._uint64_t countAndFlagsBits = v35;
  int64_t v39 = v201;
  uint64_t v185 = v38;
  Column.init(name:capacity:)(v34._countAndFlagsBits, v36, v33, v38);
  uint64_t v184 = v39[7];
  unint64_t v40 = *(void *)(v37 + v184);
  int64_t v41 = *(void *)(v40 + 16);
  uint64_t v42 = _swiftEmptyArrayStorage;
  if (v41)
  {
    uint64_t v205 = _swiftEmptyArrayStorage;
    swift_bridgeObjectRetain(v40);
    uint64_t v221 = (void *)v41;
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v41, 0);
    uint64_t v43 = v205;
    unint64_t v219 = v40;
    unint64_t v44 = (uint64_t *)(v40 + 40);
    do
    {
      unint64_t v225 = *(v44 - 1);
      uint64_t v45 = *v44;
      swift_bridgeObjectRetain(*v44);
      uint64_t v46 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [Double]);
      Column.init(name:capacity:)(v225, v45, v209, v46);
      uint64_t v205 = v43;
      unint64_t v47 = v43[2];
      unint64_t v48 = v47 + 1;
      if (v43[3] >> 1 <= v47)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v43[3] >= 2uLL, v47 + 1, 1);
        unint64_t v48 = v47 + 1;
        uint64_t v43 = v205;
      }
      v43[2] = v48;
      (*(void (**)(char *, uint64_t *, uint64_t))(v208 + 32))((char *)v43+ ((*(unsigned __int8 *)(v208 + 80) + 32) & ~*(unsigned __int8 *)(v208 + 80))+ *(void *)(v208 + 72) * v47, v224, v196);
      v44 += 2;
      uint64_t v221 = (void *)((char *)v221 - 1);
    }
    while (v221);
    swift_bridgeObjectRelease(v219);
    uint64_t v37 = v220;
    int64_t v39 = v201;
    uint64_t v42 = v43;
  }
  uint64_t v190 = v39[9];
  unint64_t v49 = *(void *)(v37 + v190);
  uint64_t v202 = v39[10];
  unint64_t v50 = *(void *)(v37 + v202);
  int64_t v187 = v50 * v49;
  uint64_t v51 = v218;
  if (!is_mul_ok(v50, v49)) {
    BUG();
  }
  uint64_t v221 = v42;
  uint64_t v52 = v223;
  if (v223 < 0)
  {
LABEL_157:
    _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, "Negative value is not representable", 35, 2, "Swift/Integers.swift", 20, 2, 3451, 1);
LABEL_156:
    BUG();
  }
  uint64_t v53 = type metadata accessor for MersenneTwisterGenerator();
  uint64_t v54 = 136;
  swift_allocObject(v53, 136, 7);
  uint64_t v55 = v52;
  uint64_t v205 = MersenneTwisterGenerator.init(seed:)(v52);
  uint64_t v58 = v209;
  if (v209 < 0) {
    BUG();
  }
  if (v209)
  {
    if (swift_isUniquelyReferenced_nonNull_native(v221))
    {
      uint64_t v59 = v220;
      char v60 = v221;
    }
    else
    {
      char v60 = specialized _ArrayBuffer._consumeAndCreateNew()((uint64_t)v221);
      uint64_t v59 = v220;
    }
    uint64_t v56 = 0;
    uint64_t v57 = v191;
    uint64_t v221 = v60;
    while (1)
    {
      if (v56 == v58) {
        BUG();
      }
      uint64_t v183 = v56;
      uint64_t v218 = v51;
      uint64_t v61 = v57;
      DataFrame.rows.getter();
      unint64_t v225 = DataFrame.Rows.count.getter();
      uint64_t v62 = *(void (**)(uint64_t *, uint64_t))(v180 + 8);
      uint64_t v55 = (uint64_t)v61;
      uint64_t v54 = v188;
      v62(v61, v188);
      if (v212 >= (uint64_t)v225) {
        break;
      }
      uint64_t v215 = _swiftEmptyArrayStorage;
      v207 = _swiftEmptyArrayStorage;
      v224 = specialized Array.init(repeating:count:)((uint64_t)_swiftEmptyArrayStorage, v221[2]);
      DataFrame.rows.getter();
      DataFrame.Rows.subscript.getter(v212);
      v62(v61, v188);
      DataFrame.Row.subscript.getter(*(void *)(v59 + v181), *(void *)(v59 + v181 + 8), v189);
      unint64_t v225 = (unint64_t)v222;
      if (!v222) {
        BUG();
      }
      uint64_t v63 = v201;
      char v64 = *(unsigned char *)(v59 + v201[11]);
      uint64_t v65 = (uint64_t)v182;
      outlined init with copy of MLTrainingSessionParameters(v59, (uint64_t)v182, type metadata accessor for MLActivityClassifier.DataBatcher);
      if (v64)
      {
        outlined destroy of MLActivityClassifier.ModelParameters(v65, type metadata accessor for MLActivityClassifier.DataBatcher);
        uint64_t v66 = 0;
      }
      else
      {
        int64_t v67 = *(void *)(v225 + 16);
        int64_t v223 = *(void *)(v65 + v63[10]);
        unint64_t v68 = *(void *)(v65 + v63[9]);
        outlined destroy of MLActivityClassifier.ModelParameters(v65, type metadata accessor for MLActivityClassifier.DataBatcher);
        unint64_t v70 = v68;
        int64_t v69 = v223 * v68;
        if (!is_mul_ok(v223, v70)) {
          BUG();
        }
        if (v69 >= v67)
        {
          uint64_t v66 = 0;
          uint64_t v59 = v220;
        }
        else
        {
          uint64_t v71 = *(void *)(v220 + v190) * *(void *)(v220 + v202);
          if (!is_mul_ok(*(void *)(v220 + v190), *(void *)(v220 + v202))) {
            BUG();
          }
          BOOL v72 = __OFSUB__(v67, v71);
          int64_t v73 = v67 - v71;
          if (v72) {
            BUG();
          }
          if (v73 < 0) {
            goto LABEL_157;
          }
          uint64_t v66 = specialized RandomNumberGenerator.next<A>(upperBound:)(v73);
          uint64_t v59 = v220;
          if (v66 < 0) {
            BUG();
          }
        }
      }
      uint64_t v74 = *(void *)(v59 + v190);
      uint64_t v75 = v74 * *(void *)(v59 + v202);
      if (!is_mul_ok(v74, *(void *)(v59 + v202))) {
        BUG();
      }
      BOOL v72 = __OFADD__(v66, v75);
      uint64_t v76 = v66 + v75;
      if (v72) {
        BUG();
      }
      unint64_t v77 = *(void *)(v225 + 16);
      if ((uint64_t)v77 < v76) {
        uint64_t v76 = *(void *)(v225 + 16);
      }
      if (v76 < v66) {
        BUG();
      }
      if (v77 < v66) {
        BUG();
      }
      if (v74 <= 0) {
        BUG();
      }
      int64_t v197 = v76;
      uint64_t v210 = v66;
      specialized ChunksOfCountCollection.init(_base:_chunkCount:)(v225, v225 + 32, v66, 2 * v76 + 1, v74);
      int64_t v78 = specialized ChunksOfCountCollection.count.getter();
      if (v78)
      {
        uint64_t v79 = v78;
        uint64_t v222 = _swiftEmptyArrayStorage;
        int64_t v80 = 0;
        if (v78 > 0) {
          int64_t v80 = v78;
        }
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v80, 0);
        if (v79 < 0 || (uint64_t v81 = v174, v82 = v177, v177 < v174)) {
          BUG();
        }
        uint64_t v198 = v173[0];
        uint64_t v199 = v173[1];
        uint64_t v83 = v222;
        uint64_t v84 = v175 >> 1;
        uint64_t v200 = v175 & 1;
        uint64_t v85 = v174;
        uint64_t v178 = v174;
        uint64_t v211 = v175 >> 1;
        while (1)
        {
          BOOL v86 = v79 == 0;
          int64_t v87 = v79 - 1;
          if (v86) {
            BUG();
          }
          if (v85 == v84) {
            BUG();
          }
          if (v85 > v84) {
            BUG();
          }
          if (v85 < v81) {
            BUG();
          }
          uint64_t v88 = v84 - v82;
          if (v84 < v82) {
            BUG();
          }
          if (v82 < v81) {
            BUG();
          }
          if (v82 < 0) {
            BUG();
          }
          uint64_t v89 = v83;
          int64_t v223 = v87;
          unint64_t v219 = v82;
          unint64_t v225 = v200 + 2 * v82;
          uint64_t v90 = v198;
          swift_unknownObjectRetain(v198);
          uint64_t v91 = specialized Collection<>.mostFrequent()(v90, v199, v85, v225);
          if (!v92)
          {
            uint64_t v156 = lazy protocol witness table accessor for type MLCreateError and conformance MLCreateError();
            swift_allocError(&type metadata for MLCreateError, v156, 0, 0);
            *(void *)uint64_t v157 = 0xD000000000000038;
            *(void *)(v157 + 8) = "Swift/Integers.swift" + 0x8000000000000000;
            *(_OWORD *)(v157 + 16) = 0;
            *(_OWORD *)(v157 + 32) = 0;
            *(unsigned char *)(v157 + 48) = 0;
            swift_willThrow(&type metadata for MLCreateError, v156, v157, v158, v159, v160);
            outlined release of ChunksOfCountCollection<ArraySlice<String>>(v173);
            swift_release();
            outlined release of ChunksOfCountCollection<ArraySlice<String>>(v173);
            swift_bridgeObjectRelease((_BYTE)v207);
            swift_bridgeObjectRelease((_BYTE)v215);
            swift_bridgeObjectRelease((_BYTE)v221);
            swift_release();
            (*(void (**)(uint64_t *, uint64_t))(v194 + 8))(v217, v203);
            (*(void (**)(uint64_t *, uint64_t))(v195 + 8))(v213, v204);
            (*(void (**)(uint64_t *, uint64_t))(v193 + 8))(v216, v192);
            return swift_bridgeObjectRelease((_BYTE)v224);
          }
          uint64_t v93 = v91;
          uint64_t v94 = v92;
          outlined release of ChunksOfCountCollection<ArraySlice<String>>(v173);
          uint64_t v83 = v89;
          uint64_t v222 = v89;
          unint64_t v95 = v89[2];
          unint64_t v96 = v83[3];
          int64_t v97 = v95 + 1;
          if (v96 >> 1 <= v95)
          {
            unint64_t v225 = v95 + 1;
            uint64_t v186 = v93;
            specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v96 >= 2, v97, 1);
            int64_t v97 = v225;
            uint64_t v93 = v186;
            uint64_t v83 = v222;
          }
          _OWORD v83[2] = v97;
          uint64_t v98 = 2 * v95;
          v83[v98 + 4] = v93;
          v83[v98 + 5] = v94;
          if (v176 <= 0)
          {
            uint64_t v79 = v223;
            uint64_t v85 = v219;
            uint64_t v84 = v211;
            if (v88 > 0 || (uint64_t v82 = v211, v176 >= v88))
            {
LABEL_56:
              uint64_t v82 = v85 + v176;
              if (__OFADD__(v85, v176)) {
                BUG();
              }
            }
          }
          else
          {
            uint64_t v79 = v223;
            uint64_t v85 = v219;
            uint64_t v84 = v211;
            if (v88 < 0) {
              goto LABEL_56;
            }
            uint64_t v82 = v211;
            if (v88 >= (unint64_t)v176) {
              goto LABEL_56;
            }
          }
          if (v82 < v85) {
            BUG();
          }
          uint64_t v81 = v178;
          if (!v79)
          {
            uint64_t v99 = v83;
            outlined release of ChunksOfCountCollection<ArraySlice<String>>(v173);
            goto LABEL_61;
          }
        }
      }
      outlined release of ChunksOfCountCollection<ArraySlice<String>>(v173);
      uint64_t v99 = _swiftEmptyArrayStorage;
LABEL_61:
      swift_bridgeObjectRetain((_BYTE)v99);
      specialized Array.append<A>(contentsOf:)((uint64_t)v99);
      uint64_t v100 = v99[2];
      swift_bridgeObjectRelease((_BYTE)v99);
      uint64_t v101 = specialized Array.init(repeating:count:)(v100, 1.0);
      specialized Array.append<A>(contentsOf:)((uint64_t)v101);
      uint64_t v102 = v220;
      uint64_t v103 = *(void *)(v220 + v184);
      uint64_t v104 = alloca(24);
      int64_t v105 = alloca(32);
      v173[0] = v216;
      swift_bridgeObjectRetain(v103);
      uint64_t v106 = v218;
      uint64_t v107 = _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSaySSG_SaySfGs5NeverOTg5Tm((void (*)(void *))partial apply for specialized closure #3 in MLActivityClassifier.DataBatcher.generateBatch<A>(startingAt:rowCount:seed:_:), (uint64_t)&v171, v103, (uint64_t)v172, (void (*)(BOOL, unint64_t, uint64_t))specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:));
      uint64_t v218 = v106;
      swift_bridgeObjectRelease(v103);
      int64_t v223 = (int64_t)v107;
      unint64_t v219 = v107[2];
      if (v219)
      {
        uint64_t v108 = v224;
        if (!swift_isUniquelyReferenced_nonNull_native(v224)) {
          uint64_t v108 = specialized _ArrayBuffer._consumeAndCreateNew()((uint64_t)v108);
        }
        v224 = v108;
        unint64_t v109 = v108 + 4;
        unint64_t v110 = 0;
        uint64_t v111 = v210;
        do
        {
          uint64_t v112 = *(void *)(v223 + 8 * v110 + 32);
          unint64_t v113 = *(void *)(v112 + 16);
          uint64_t v114 = v197;
          if ((uint64_t)v113 < v197) {
            uint64_t v114 = *(void *)(v112 + 16);
          }
          if (v114 < v111) {
            BUG();
          }
          if (v113 < v111) {
            BUG();
          }
          unint64_t v225 = v224[2];
          swift_bridgeObjectRetain_n(v112, 2);
          if (v110 >= v225) {
            BUG();
          }
          ++v110;
          unint64_t v115 = 2 * v114 + 1;
          uint64_t v116 = v210;
          specialized Array.append<A>(contentsOf:)(v112, v112 + 32, v210, v115);
          swift_bridgeObjectRelease(v112);
          uint64_t v111 = v116;
          ++v109;
        }
        while (v219 != v110);
        uint64_t v102 = v220;
      }
      uint64_t v117 = (uint64_t)v224;
      swift_bridgeObjectRelease(v223);
      uint64_t v118 = *(void *)(v117 + 16);
      if (!v118) {
        BUG();
      }
      unint64_t v119 = (uint64_t *)v117;
      int64_t v197 = *(void *)(*(void *)(v117 + 32) + 16);
      uint64_t v198 = v187 - v197;
      if (v187 > v197)
      {
        uint64_t v211 = specialized Double.init<A>(exactly:)(0);
        LOBYTE(v199) = v120;
        if (swift_isUniquelyReferenced_nonNull_native(v117)) {
          unint64_t v119 = (uint64_t *)v117;
        }
        else {
          unint64_t v119 = specialized _ArrayBuffer._consumeAndCreateNew()(v117);
        }
        unint64_t v121 = 0;
        v224 = v119;
        uint64_t v200 = v118;
        do
        {
          if (v121 == v118) {
            BUG();
          }
          if (v199) {
            BUG();
          }
          uint64_t v122 = v198;
          if (v198 < 0)
          {
            _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, "Can't construct Array with count < 0", 36, 2, "Swift/Array.swift", 17, 2, 936, 1);
            goto LABEL_156;
          }
          unint64_t v123 = v121;
          unint64_t v124 = _swiftEmptyArrayStorage;
          if (v187 != v197)
          {
            unint64_t v124 = (void *)static Array._allocateBufferUninitialized(minimumCapacity:)(v198);
            v124[2] = v122;
            uint64_t v125 = 0;
            uint64_t v126 = v211;
            do
              v124[v125++ + 4] = v126;
            while (v122 != v125);
            unint64_t v119 = v224;
          }
          if (v123 >= v119[2]) {
            BUG();
          }
          unint64_t v127 = v119[v123 + 4];
          uint64_t v128 = *(void *)(v127 + 16);
          unint64_t v129 = v123;
          int64_t v223 = v124[2];
          int64_t v130 = v223 + v128;
          if (__OFADD__(v223, v128)) {
            BUG();
          }
          uint64_t v131 = v119;
          uint64_t v210 = v128;
          unint64_t v225 = v127;
          char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v127);
          uint64_t v133 = (void *)v225;
          v131[v129 + 4] = v225;
          unint64_t v134 = v129;
          if (isUniquelyReferenced_nonNull_native && v133[3] >> 1 >= v130)
          {
            uint64_t v135 = v224;
          }
          else
          {
            if (v210 > v130) {
              int64_t v130 = v210;
            }
            uint64_t v133 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(isUniquelyReferenced_nonNull_native, v130, 1, (uint64_t)v133);
            uint64_t v135 = v224;
            v224[v129 + 4] = (uint64_t)v133;
          }
          int64_t v136 = v223;
          BOOL v137 = v124[2] == 0;
          unint64_t v219 = v134;
          unint64_t v225 = (unint64_t)v133;
          if (v137)
          {
            if (v223) {
              BUG();
            }
          }
          else
          {
            uint64_t v138 = v133[2];
            if ((v133[3] >> 1) - v138 < v223) {
              BUG();
            }
            uint64_t v139 = &v133[v138 + 4];
            if (v124 + 4 < &v139[v223] && v139 < &v124[v223 + 4])
            {
              _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize overlapping range", 49, 2, "Swift/UnsafePointer.swift", 25, 2, 1092, 1);
              goto LABEL_156;
            }
            memcpy(v139, v124 + 4, 8 * v223);
            if (v136)
            {
              BOOL v72 = __OFADD__(*(void *)(v225 + 16), v136);
              int64_t v140 = *(void *)(v225 + 16) + v136;
              if (v72) {
                BUG();
              }
              *(void *)(v225 + 16) = v140;
            }
          }
          unint64_t v141 = v219;
          unint64_t v142 = v219 + 1;
          swift_bridgeObjectRelease((_BYTE)v124);
          unint64_t v119 = v135;
          v135[v141 + 4] = v225;
          unint64_t v121 = v142;
          BOOL v137 = v142 == v200;
          uint64_t v118 = v200;
          uint64_t v102 = v220;
        }
        while (!v137);
      }
      v224 = v119;
      int64_t v143 = (int64_t)v215;
      uint64_t v144 = *(void *)(v102 + v202);
      BOOL v145 = v144 <= v215[2];
      uint64_t v146 = v144 - v215[2];
      if (!v145)
      {
        v147 = specialized Array.init(repeating:count:)(0, 0xE000000000000000, v146);
        specialized Array.append<A>(contentsOf:)((uint64_t)v147);
        unint64_t v148 = specialized Array.init(repeating:count:)(v146, 0.0);
        specialized Array.append<A>(contentsOf:)((uint64_t)v148);
        int64_t v143 = (int64_t)v215;
      }
      int64_t v223 = v143;
      uint64_t v222 = (void *)v143;
      Column.append(_:)(&v222, v204);
      uint64_t v149 = v207;
      uint64_t v222 = v207;
      Column.append(_:)(&v222, v203);
      unint64_t v150 = v224;
      unint64_t v225 = v224[2];
      if (v225)
      {
        unint64_t v219 = (unint64_t)v149;
        swift_bridgeObjectRetain((_BYTE)v224);
        uint64_t v149 = v224;
        unint64_t v151 = 0;
        do
        {
          unint64_t v150 = v149;
          uint64_t v152 = (void *)v149[v151 + 4];
          uint64_t v222 = v152;
          unint64_t v153 = v221[2];
          swift_bridgeObjectRetain((_BYTE)v152);
          if (v151 >= v153) {
            BUG();
          }
          Column.append(_:)(&v222, v196);
          swift_bridgeObjectRelease((_BYTE)v152);
          ++v151;
          uint64_t v149 = v150;
        }
        while (v225 != v151);
        swift_bridgeObjectRelease(v223);
        char v154 = v219;
      }
      else
      {
        char v154 = v223;
      }
      swift_bridgeObjectRelease(v154);
      swift_bridgeObjectRelease((_BYTE)v149);
      uint64_t v155 = v183 + 1;
      ++v212;
      uint64_t v54 = v192;
      (*(void (**)(uint64_t *, uint64_t))(v193 + 8))(v216, v192);
      uint64_t v55 = (uint64_t)v150;
      swift_bridgeObjectRelease((_BYTE)v150);
      uint64_t v56 = v155;
      uint64_t v58 = v209;
      uint64_t v51 = v218;
      uint64_t v59 = v220;
      uint64_t v57 = v191;
      if (v155 == v209) {
        goto LABEL_114;
      }
    }
    uint64_t v51 = v218;
  }
LABEL_114:
  DataFrame.init()(v55, v54, v56, v57);
  DataFrame.append<A>(column:)(v213, v189);
  DataFrame.append<A>(column:)(v217, v185);
  char v162 = (char)v221;
  unint64_t v163 = v221[2];
  if (v163)
  {
    uint64_t v218 = v51;
    v164 = (char *)v221 + ((*(unsigned __int8 *)(v208 + 80) + 32) & ~*(unsigned __int8 *)(v208 + 80));
    v224 = *(uint64_t **)(v208 + 16);
    int64_t v223 = *(void *)(v208 + 72);
    swift_bridgeObjectRetain((_BYTE)v221);
    uint64_t v165 = v196;
    do
    {
      unint64_t v225 = v163;
      uint64_t v166 = v179;
      ((void (*)(uint64_t *, char *, uint64_t))v224)(v179, v164, v165);
      uint64_t v167 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [Double]);
      DataFrame.append<A>(column:)(v166, v167);
      uint64_t v168 = v166;
      unint64_t v169 = v225;
      (*(void (**)(uint64_t *, uint64_t))(v208 + 8))(v168, v165);
      v164 += v223;
      unint64_t v163 = v169 - 1;
    }
    while (v163);
    char v170 = (char)v221;
    swift_bridgeObjectRelease((_BYTE)v221);
    char v162 = v170;
  }
  swift_bridgeObjectRelease(v162);
  swift_release();
  (*(void (**)(uint64_t *, uint64_t))(v194 + 8))(v217, v203);
  return (*(uint64_t (**)(uint64_t *, uint64_t))(v195 + 8))(v213, v204);
}

uint64_t specialized closure #3 in MLActivityClassifier.DataBatcher.generateBatch<A>(startingAt:rowCount:seed:_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t *a5)
{
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(a5);
  DataFrame.Row.subscript.getter(a1, a2, v5);
  uint64_t result = v7;
  if (!v7) {
    BUG();
  }
  return result;
}

uint64_t specialized MLActivityClassifier.DataBatcher.generateNextBatch<A>(rowCount:seed:_:)(uint64_t a1, uint64_t a2)
{
  return specialized MLActivityClassifier.DataBatcher.generateNextBatch<A>(rowCount:seed:_:)(a1, a2, (uint64_t)specialized MLActivityClassifier.DataBatcher.generateBatch<A>(startingAt:rowCount:seed:_:));
}

{
  return specialized MLActivityClassifier.DataBatcher.generateNextBatch<A>(rowCount:seed:_:)(a1, a2, (uint64_t)specialized MLActivityClassifier.DataBatcher.generateBatch<A>(startingAt:rowCount:seed:_:));
}

uint64_t specialized MLActivityClassifier.DataBatcher.generateNextBatch<A>(rowCount:seed:_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  v15[0] = a3;
  uint64_t v5 = v4;
  void v15[2] = v3;
  uint64_t v16 = type metadata accessor for DataFrame.Rows(0);
  uint64_t v17 = *(void *)(v16 - 8);
  int64_t v6 = *(void *)(v17 + 64);
  uint64_t v7 = alloca(v6);
  uint64_t v8 = alloca(v6);
  uint64_t v9 = *(int *)(type metadata accessor for MLActivityClassifier.DataBatcher(0) + 48);
  uint64_t v10 = *(void *)(v4 + v9);
  uint64_t v11 = a1 + v10;
  if (__OFADD__(a1, v10)) {
    BUG();
  }
  uint64_t v20 = v9;
  uint64_t v18 = a1;
  uint64_t v19 = v10;
  DataFrame.rows.getter();
  uint64_t v12 = DataFrame.Rows.count.getter();
  (*(void (**)(void *, uint64_t))(v17 + 8))(v15, v16);
  if (v12 < v11) {
    uint64_t v11 = v12;
  }
  *(void *)(v5 + v20) = v11;
  Swift::Int v13 = timestampSeed()();
  return ((uint64_t (*)(uint64_t, uint64_t, Swift::Int))v15[0])(v19, v18, v13);
}

uint64_t specialized Sequence<>.makeIterator()()
{
  return outlined init with take of MLClassifierMetrics(v1, v0, type metadata accessor for MLActivityClassifier.DataBatcher);
}

uint64_t sub_21755()
{
  uint64_t v1 = *(void *)(type metadata accessor for MLHandPoseClassifier.ModelParameters(0) - 8);
  uint64_t v2 = *(unsigned __int8 *)(v1 + 80);
  uint64_t v3 = ~*(unsigned __int8 *)(v1 + 80) & (v2 + 41);
  uint64_t v4 = *(void *)(v1 + 64);
  outlined consume of Result<_DataTable, Error>(*(void *)(v0 + 16), *(_DWORD *)(v0 + 24));
  outlined consume of Result<_DataTable, Error>(*(void *)(v0 + 32), *(_DWORD *)(v0 + 40));
  uint64_t v5 = v3 + v0;
  uint64_t v6 = type metadata accessor for MLHandPoseClassifier.ModelParameters.ValidationData(0);
  if (swift_getEnumCaseMultiPayload(v3 + v0, v6) == 1)
  {
    uint64_t v7 = type metadata accessor for MLHandPoseClassifier.DataSource(0);
    switch(swift_getEnumCaseMultiPayload(v3 + v0, v7))
    {
      case 0u:
        uint64_t v15 = type metadata accessor for URL(0);
        uint64_t v17 = *(void (**)(uint64_t, uint64_t))(*(void *)(v15 - 8) + 8);
        v17(v3 + v0, v15);
        uint64_t v16 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (at: URL, annotationFile: URL, imageColumn: String, labelColumn: String));
        v17(v5 + *(int *)(v16 + 48), v15);
        swift_bridgeObjectRelease(*(void *)(v5 + *(int *)(v16 + 64) + 8));
        uint64_t v9 = v16;
        goto LABEL_8;
      case 1u:
      case 2u:
        uint64_t v8 = type metadata accessor for URL(0);
        (*(void (**)(uint64_t, uint64_t))(*(void *)(v8 - 8) + 8))(v3 + v0, v8);
        return swift_deallocObject(v0, v4 + v3, v2 | 7);
      case 3u:
        outlined consume of Result<_DataTable, Error>(*(void *)v5, *(_DWORD *)(v5 + 8));
        swift_bridgeObjectRelease(*(void *)(v5 + 24));
        swift_bridgeObjectRelease(*(void *)(v5 + 40));
        uint64_t v10 = *(void *)(v5 + 56);
        goto LABEL_11;
      case 4u:
        outlined consume of Result<_DataTable, Error>(*(void *)v5, *(_DWORD *)(v5 + 8));
        swift_bridgeObjectRelease(*(void *)(v5 + 24));
        uint64_t v10 = *(void *)(v5 + 40);
        goto LABEL_11;
      case 5u:
        uint64_t v11 = type metadata accessor for DataFrame(0);
        (*(void (**)(uint64_t, uint64_t))(*(void *)(v11 - 8) + 8))(v3 + v0, v11);
        uint64_t v18 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (DataFrame, sessionIdColumn: String, labelColumn: String, featureColumn: String));
        swift_bridgeObjectRelease(*(void *)(v5 + *(int *)(v18 + 48) + 8));
        swift_bridgeObjectRelease(*(void *)(v5 + *(int *)(v18 + 64) + 8));
        uint64_t v9 = v18;
LABEL_8:
        uint64_t v12 = *(int *)(v9 + 80);
        goto LABEL_10;
      case 6u:
        uint64_t v13 = type metadata accessor for DataFrame(0);
        (*(void (**)(uint64_t, uint64_t))(*(void *)(v13 - 8) + 8))(v3 + v0, v13);
        uint64_t v19 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (DataFrame, imageColumn: String, labelColumn: String));
        swift_bridgeObjectRelease(*(void *)(v5 + *(int *)(v19 + 48) + 8));
        uint64_t v12 = *(int *)(v19 + 64);
LABEL_10:
        uint64_t v10 = *(void *)(v5 + v12 + 8);
LABEL_11:
        swift_bridgeObjectRelease(v10);
        break;
      default:
        return swift_deallocObject(v0, v4 + v3, v2 | 7);
    }
  }
  return swift_deallocObject(v0, v4 + v3, v2 | 7);
}

uint64_t __swift_instantiateConcreteTypeFromMangledName(uint64_t *a1)
{
  uint64_t result = *a1;
  if (*a1 < 0)
  {
    uint64_t result = swift_getTypeByMangledNameInContext2((char *)a1 + (int)result, -(result >> 32), 0, 0);
    *a1 = result;
  }
  return result;
}

uint64_t partial apply for closure #1 in MLHandPoseClassifier.init(trainingData:parameters:)(uint64_t a1)
{
  uint64_t v3 = type metadata accessor for MLHandPoseClassifier.ModelParameters(0);
  char v9 = *(unsigned char *)(v1 + 24);
  uint64_t v4 = *(void *)(v1 + 16);
  uint64_t v5 = *(void *)(v1 + 32);
  char v10 = *(unsigned char *)(v1 + 40);
  uint64_t v6 = v1
     + (~*(unsigned __int8 *)(*(void *)(v3 - 8) + 80) & (*(unsigned __int8 *)(*(void *)(v3 - 8)
                                                                                              + 80)
                                                           + 41));
  uint64_t v7 = (void *)swift_task_alloc(dword_3A3FCC);
  *(void *)(v2 + 16) = v7;
  *uint64_t v7 = v2;
  v7[1] = partial apply for closure #1 in MLActivityClassifier.init(trainingData:featureColumns:labelColumn:recordingFileColumn:parameters:);
  return closure #1 in MLHandPoseClassifier.init(trainingData:parameters:)(a1, v4, v9, v5, v10, v6);
}

uint64_t specialized Double.init<A>(exactly:)(uint64_t a1)
{
  double v1 = (double)(int)a1;
  if ((double)(int)a1 >= 9.223372036854776e18)
  {
    *(double *)&uint64_t result = 0.0;
  }
  else
  {
    *(double *)&uint64_t result = (double)(int)a1;
    if ((~*(void *)&v1 & 0x7FF0000000000000) == 0) {
      BUG();
    }
    if (v1 <= -9.223372036854778e18) {
      BUG();
    }
    if ((int)v1 != a1) {
      *(double *)&uint64_t result = 0.0;
    }
  }
  return result;
}

unint64_t specialized Float.init<A>(exactly:)(uint64_t a1, __m128i a2)
{
  *(float *)a2.i32 = (float)(int)a1;
  if ((float)(int)a1 >= 9.223372e18)
  {
    BOOL v4 = 1;
    uint64_t v3 = 0;
  }
  else
  {
    unsigned int v2 = _mm_cvtsi128_si32(a2);
    if ((~v2 & 0x7F800000) == 0) {
      BUG();
    }
    if (*(float *)a2.i32 <= -9.2233731e18) {
      BUG();
    }
    uint64_t v3 = 0;
    BOOL v4 = (int)*(float *)a2.i32 != a1;
    if ((int)*(float *)a2.i32 == a1) {
      uint64_t v3 = v2;
    }
  }
  return v3 | ((unint64_t)v4 << 32);
}

void *specialized _copyCollectionToContiguousArray<A>(_:)(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 16);
  if (!v1) {
    return _swiftEmptyArrayStorage;
  }
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Int>);
  uint64_t v3 = (void *)swift_allocObject(v2, 8 * v1 + 32, 7);
  long long v4 = (uint64_t)(_swift_stdlib_malloc_size(v3) - 32);
  v3[2] = v1;
  v3[3] = 2 * (v4 / 8);
  uint64_t v8 = specialized Sequence._copySequenceContents(initializing:)(v7, v3 + 4, v1, a1);
  uint64_t v5 = v7[0];
  uint64_t v9 = v7[1];
  uint64_t v10 = v7[2];
  uint64_t v11 = v7[3];
  swift_bridgeObjectRetain(a1);
  outlined consume of [String : [Int]].Iterator._Variant(v5);
  if (v8 != v1) {
    BUG();
  }
  return v3;
}

{
  uint64_t v1;
  uint64_t v2;
  void *v3;
  long long v4;
  uint64_t v5;
  void v7[5];
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  uint64_t v1 = *(void *)(a1 + 16);
  if (!v1) {
    return _swiftEmptyArrayStorage;
  }
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<String>);
  uint64_t v3 = (void *)swift_allocObject(v2, 16 * v1 + 32, 7);
  long long v4 = (uint64_t)(_swift_stdlib_malloc_size(v3) - 32);
  v3[2] = v1;
  v3[3] = 2 * (v4 / 16);
  uint64_t v8 = specialized Sequence._copySequenceContents(initializing:)(v7, v3 + 4, v1, a1);
  uint64_t v5 = v7[0];
  uint64_t v9 = v7[1];
  uint64_t v10 = v7[2];
  uint64_t v11 = v7[3];
  swift_bridgeObjectRetain(a1);
  outlined consume of [String : [Int]].Iterator._Variant(v5);
  if (v8 != v1) {
    BUG();
  }
  return v3;
}

{
  uint64_t v1;
  uint64_t v2;
  void *v3;
  long long v4;
  uint64_t v5;
  uint64_t v6;
  char v7;
  unsigned char v9[8];
  uint64_t v10;
  uint64_t v11;
  char v12;
  uint64_t v13;

  uint64_t v1 = *(void *)(a1 + 16);
  if (!v1) {
    return _swiftEmptyArrayStorage;
  }
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(key: MLDataValue, value: MLDataValue)>);
  uint64_t v3 = (void *)swift_allocObject(v2, 48 * v1 + 32, 7);
  long long v4 = (uint64_t)(_swift_stdlib_malloc_size(v3) - 32);
  v3[2] = v1;
  v3[3] = 2 * (v4 / 48);
  swift_bridgeObjectRetain(a1);
  uint64_t v13 = specialized Sequence._copySequenceContents(initializing:)((uint64_t)v9, (uint64_t)(v3 + 4), v1, a1);
  uint64_t v5 = v10;
  uint64_t v6 = v11;
  uint64_t v7 = v12;
  swift_bridgeObjectRelease(v9[0]);
  outlined consume of [MLDataValue : MLDataValue].Index._Variant(v5, v6, v7);
  if (v13 != v1) {
    BUG();
  }
  return v3;
}

{
  return specialized _copyCollectionToContiguousArray<A>(_:)(a1);
}

{
  uint64_t v1;
  uint64_t v2;
  void *v3;
  long long v4;
  uint64_t v5;
  void v7[5];
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  uint64_t v1 = *(void *)(a1 + 16);
  if (!v1) {
    return _swiftEmptyArrayStorage;
  }
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<String>);
  uint64_t v3 = (void *)swift_allocObject(v2, 16 * v1 + 32, 7);
  long long v4 = (uint64_t)(_swift_stdlib_malloc_size(v3) - 32);
  v3[2] = v1;
  v3[3] = 2 * (v4 / 16);
  uint64_t v8 = specialized Sequence._copySequenceContents(initializing:)(v7, v3 + 4, v1, a1);
  uint64_t v5 = v7[0];
  uint64_t v9 = v7[1];
  uint64_t v10 = v7[2];
  uint64_t v11 = v7[3];
  swift_bridgeObjectRetain(a1);
  outlined consume of [String : [Int]].Iterator._Variant(v5);
  if (v8 != v1) {
    BUG();
  }
  return v3;
}

{
  uint64_t v1;
  uint64_t v2;
  void *v3;
  long long v4;
  uint64_t v5;
  void v7[5];
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  uint64_t v1 = *(void *)(a1 + 16);
  if (!v1) {
    return _swiftEmptyArrayStorage;
  }
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<MLRecommender.Identifier>);
  uint64_t v3 = (void *)swift_allocObject(v2, 24 * v1 + 32, 7);
  long long v4 = (uint64_t)(_swift_stdlib_malloc_size(v3) - 32);
  v3[2] = v1;
  v3[3] = 2 * (v4 / 24);
  uint64_t v8 = specialized Sequence._copySequenceContents(initializing:)(v7, (uint64_t)(v3 + 4), v1, a1);
  uint64_t v5 = v7[0];
  uint64_t v9 = v7[1];
  uint64_t v10 = v7[2];
  uint64_t v11 = v7[3];
  swift_bridgeObjectRetain(a1);
  outlined consume of [String : [Int]].Iterator._Variant(v5);
  if (v8 != v1) {
    BUG();
  }
  return v3;
}

{
  uint64_t v1;
  uint64_t v2;
  void *v3;
  long long v4;
  uint64_t v5;
  void v7[5];
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  uint64_t v1 = *(void *)(a1 + 16);
  if (!v1) {
    return _swiftEmptyArrayStorage;
  }
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<[String]>);
  uint64_t v3 = (void *)swift_allocObject(v2, 8 * v1 + 32, 7);
  long long v4 = (uint64_t)(_swift_stdlib_malloc_size(v3) - 32);
  v3[2] = v1;
  v3[3] = 2 * (v4 / 8);
  uint64_t v8 = specialized Sequence._copySequenceContents(initializing:)(v7, v3 + 4, v1, a1);
  uint64_t v5 = v7[0];
  uint64_t v9 = v7[1];
  uint64_t v10 = v7[2];
  uint64_t v11 = v7[3];
  swift_bridgeObjectRetain(a1);
  outlined consume of [String : [Int]].Iterator._Variant(v5);
  if (v8 != v1) {
    BUG();
  }
  return v3;
}

uint64_t *specialized _copyCollectionToContiguousArray<A>(_:)()
{
  uint64_t v0 = CMLDictionary.size.getter();
  uint64_t v1 = specialized RandomAccessCollection<>.distance(from:to:)(0, v0);
  if (!v1) {
    return _swiftEmptyArrayStorage;
  }
  uint64_t v2 = v1;
  if (v1 <= 0)
  {
    long long v4 = _swiftEmptyArrayStorage;
  }
  else
  {
    uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(CMLFeatureValue, CMLFeatureValue)>);
    long long v4 = (uint64_t *)swift_allocObject(v3, 16 * v2 + 32, 7);
    long long v5 = (uint64_t)(_swift_stdlib_malloc_size(v4) - 32);
    v4[2] = v2;
    v4[3] = 2 * (v5 / 16);
  }
  swift_retain();
  uint64_t v6 = specialized Sequence._copySequenceContents(initializing:)(v8, v4 + 4, v2);
  swift_release();
  if (v6 != v2) {
    BUG();
  }
  return v4;
}

void *specialized _copyCollectionToContiguousArray<A>(_:)(uint64_t a1, double a2)
{
  uint64_t v2 = CMLSequence.size.getter();
  uint64_t v3 = specialized RandomAccessCollection<>.distance(from:to:)(0, v2);
  if (!v3) {
    return _swiftEmptyArrayStorage;
  }
  uint64_t v4 = v3;
  if (v3 <= 0)
  {
    uint64_t v6 = _swiftEmptyArrayStorage;
  }
  else
  {
    uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<MLDataValue>);
    uint64_t v6 = (void *)swift_allocObject(v5, 24 * v4 + 32, 7);
    long long v7 = (uint64_t)(_swift_stdlib_malloc_size(v6) - 32);
    v6[2] = v4;
    v6[3] = 2 * (v7 / 24);
  }
  swift_retain();
  uint64_t v8 = specialized Sequence._copySequenceContents(initializing:)(v10, (uint64_t)(v6 + 4), v4, a1, a2);
  swift_release();
  if (v8 != v4) {
    BUG();
  }
  return v6;
}

{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  long long v10;
  uint64_t v11;
  void v13[7];

  swift_retain();
  uint64_t v2 = CMLSequence.size.getter();
  uint64_t v3 = specialized RandomAccessCollection<>.distance(from:to:)(0, v2);
  swift_release();
  swift_retain();
  uint64_t v4 = CMLSequence.size.getter();
  uint64_t v5 = specialized RandomAccessCollection<>.distance(from:to:)(0, v4);
  swift_release();
  if (v5 < 0) {
    BUG();
  }
  swift_retain();
  uint64_t v6 = CMLSequence.size.getter();
  long long v7 = specialized RandomAccessCollection<>.distance(from:to:)(0, v6);
  swift_release();
  if (v3 < 0 || v7 < v3) {
    BUG();
  }
  if (!v3) {
    return _swiftEmptyArrayStorage;
  }
  uint64_t v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<MLDataValue>);
  uint64_t v9 = (void *)swift_allocObject(v8, 24 * v3 + 32, 7);
  uint64_t v10 = (uint64_t)(_swift_stdlib_malloc_size(v9) - 32);
  v9[2] = v3;
  v9[3] = 2 * (v10 / 24);
  swift_retain();
  uint64_t v11 = specialized Sequence._copySequenceContents(initializing:)(v13, (uint64_t)(v9 + 4), v3, a1, a2);
  swift_release();
  if (v11 != v3) {
    BUG();
  }
  return v9;
}

void *specialized _copyCollectionToContiguousArray<A>(_:)(uint64_t a1, char a2)
{
  uint64_t v11 = a1;
  char v12 = a2 & 1;
  Swift::Int v2 = MLDataTable.size.getter();
  char v3 = a2 & 1;
  uint64_t v4 = specialized RandomAccessCollection<>.distance(from:to:)(0, v2);
  if (!v4) {
    return _swiftEmptyArrayStorage;
  }
  uint64_t v5 = v4;
  if (v4 <= 0)
  {
    long long v7 = _swiftEmptyArrayStorage;
  }
  else
  {
    uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<MLDataTable.Row>);
    long long v7 = (void *)swift_allocObject(v6, 24 * v5 + 32, 7);
    long long v8 = (uint64_t)(_swift_stdlib_malloc_size(v7) - 32);
    v7[2] = v5;
    v7[3] = 2 * (v8 / 24);
  }
  outlined copy of Result<_DataTable, Error>(a1, v3 != 0);
  Swift::Int v9 = specialized Sequence._copySequenceContents(initializing:)((uint64_t)&v11, (uint64_t)(v7 + 4), v5, a1, v3);
  outlined consume of Result<_DataTable, Error>(v11, v12);
  if (v9 != v5) {
    BUG();
  }
  return v7;
}

void *specialized _copyCollectionToContiguousArray<A>(_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  swift_retain();
  uint64_t v4 = CMLSequence.size.getter();
  uint64_t v5 = specialized RandomAccessCollection<>.distance(from:to:)(0, v4);
  swift_retain();
  uint64_t v6 = CMLSequence.size.getter();
  uint64_t v7 = specialized RandomAccessCollection<>.distance(from:to:)(0, v6);
  swift_release();
  if (v7 < 0) {
    BUG();
  }
  swift_retain();
  uint64_t v8 = CMLSequence.size.getter();
  uint64_t v9 = specialized RandomAccessCollection<>.distance(from:to:)(0, v8);
  swift_release_n(a3);
  if (v5 < 0 || v9 < v5) {
    BUG();
  }
  if (!v5) {
    return _swiftEmptyArrayStorage;
  }
  uint64_t v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, MLDataValue)>);
  uint64_t v11 = (void *)swift_allocObject(v10, 40 * v5 + 32, 7);
  long long v12 = (uint64_t)(_swift_stdlib_malloc_size(v11) - 32);
  v11[2] = v5;
  v11[3] = 2 * (v12 / 40);
  uint64_t v17 = (uint64_t)(v11 + 4);
  swift_retain();
  swift_bridgeObjectRetain(a2);
  swift_retain();
  uint64_t v17 = specialized Sequence._copySequenceContents(initializing:)(&v15, (uint64_t)(v11 + 4), v5, a1, a2, a3);
  char v13 = v16;
  swift_release();
  swift_bridgeObjectRelease(v13);
  swift_release();
  if (v17 != v5) {
    BUG();
  }
  return v11;
}

uint64_t *specialized _copyCollectionToContiguousArray<A>(_:)(uint64_t a1)
{
  swift_retain();
  uint64_t v1 = CMLSequence.size.getter();
  uint64_t v2 = specialized RandomAccessCollection<>.distance(from:to:)(0, v1);
  swift_release();
  swift_retain();
  uint64_t v3 = CMLSequence.size.getter();
  uint64_t v4 = specialized RandomAccessCollection<>.distance(from:to:)(0, v3);
  swift_release();
  if (v4 < 0) {
    BUG();
  }
  swift_retain();
  uint64_t v5 = CMLSequence.size.getter();
  uint64_t v6 = specialized RandomAccessCollection<>.distance(from:to:)(0, v5);
  swift_release();
  if (v2 < 0 || v6 < v2) {
    BUG();
  }
  if (!v2) {
    return _swiftEmptyArrayStorage;
  }
  uint64_t v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<String>);
  uint64_t v8 = (uint64_t *)swift_allocObject(v7, 16 * v2 + 32, 7);
  long long v9 = (uint64_t)(_swift_stdlib_malloc_size(v8) - 32);
  _OWORD v8[2] = v2;
  v8[3] = 2 * (v9 / 16);
  swift_retain();
  uint64_t v10 = specialized Sequence._copySequenceContents(initializing:)(v12, v8 + 4, v2, a1);
  swift_release();
  if (v10 != v2) {
    BUG();
  }
  return v8;
}

void *specialized _copyCollectionToContiguousArray<A>(_:)()
{
  uint64_t v0 = CMLSequence.size.getter();
  uint64_t v1 = specialized RandomAccessCollection<>.distance(from:to:)(0, v0);
  if (!v1) {
    return _swiftEmptyArrayStorage;
  }
  uint64_t v2 = v1;
  if (v1 <= 0)
  {
    uint64_t v4 = _swiftEmptyArrayStorage;
  }
  else
  {
    uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>);
    uint64_t v4 = (void *)swift_allocObject(v3, 8 * v2 + 32, 7);
    long long v5 = (uint64_t)(_swift_stdlib_malloc_size(v4) - 32);
    v4[2] = v2;
    v4[3] = 2 * (v5 / 8) + 1;
  }
  swift_retain();
  uint64_t v6 = specialized Sequence._copySequenceContents(initializing:)(v8, (uint64_t)(v4 + 4), v2);
  swift_release();
  if (v6 != v2) {
    BUG();
  }
  return v4;
}

void *specialized _copyCollectionToContiguousArray<A>(_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = a2 - a1;
  if (__OFSUB__(a2, a1)) {
    BUG();
  }
  if (!v2) {
    return _swiftEmptyArrayStorage;
  }
  if (v2 <= 0)
  {
    uint64_t v4 = _swiftEmptyArrayStorage;
  }
  else
  {
    uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Int>);
    uint64_t v4 = (void *)swift_allocObject(v3, 8 * v2 + 32, 7);
    long long v5 = (uint64_t)(_swift_stdlib_malloc_size(v4) - 32);
    v4[2] = v2;
    v4[3] = 2 * (v5 / 8);
  }
  if (specialized Sequence._copySequenceContents(initializing:)(v7, v4 + 4, v2, a1, a2) != v2) {
    BUG();
  }
  return v4;
}

{
  return specialized _copyCollectionToContiguousArray<A>(_:)(a1, a2, &demangling cache variable for type metadata for _ContiguousArrayStorage<Double>, (void (*)(uint64_t, uint64_t, void *))specialized UnsafeMutablePointer.initialize(from:count:));
}

{
  return specialized _copyCollectionToContiguousArray<A>(_:)(a1, a2, &demangling cache variable for type metadata for _ContiguousArrayStorage<UInt64>, (void (*)(uint64_t, uint64_t, void *))specialized UnsafeMutablePointer.initialize(from:count:));
}

uint64_t sub_22630()
{
  uint64_t v1 = v0;
  uint64_t v2 = type metadata accessor for MLHandActionClassifier(0);
  uint64_t v3 = *(void *)(v2 - 8);
  uint64_t v4 = *(unsigned __int8 *)(v3 + 80);
  uint64_t v5 = ~*(unsigned __int8 *)(v3 + 80) & (v4 + 16);
  uint64_t v42 = *(void *)(v3 + 64);
  swift_bridgeObjectRelease(*(void *)(v1 + v5));
  swift_release();

  uint64_t v45 = v2;
  uint64_t v44 = v1 + v5;
  uint64_t v6 = v1 + v5 + *(int *)(v2 + 28);
  uint64_t v7 = type metadata accessor for MLHandActionClassifier.ModelParameters.ValidationData(0);
  if (swift_getEnumCaseMultiPayload(v6, v7) == 1)
  {
    uint64_t v8 = type metadata accessor for MLHandActionClassifier.DataSource(0);
    switch(swift_getEnumCaseMultiPayload(v6, v8))
    {
      case 0u:
        uint64_t v51 = type metadata accessor for URL(0);
        uint64_t v48 = v5;
        uint64_t v10 = *(void (**)(uint64_t, uint64_t))(*(void *)(v51 - 8) + 8);
        v10(v6, v51);
        uint64_t v11 = (int *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (at: URL, annotationFile: URL, videoColumn: String, labelColumn: String, startTimeColumn: String?, endTimeColumn: String?));
        v10(v6 + v11[12], v51);
        uint64_t v5 = v48;
        swift_bridgeObjectRelease(*(void *)(v6 + v11[16] + 8));
        swift_bridgeObjectRelease(*(void *)(v6 + v11[20] + 8));
        swift_bridgeObjectRelease(*(void *)(v6 + v11[24] + 8));
        uint64_t v12 = v11[28];
        goto LABEL_9;
      case 1u:
      case 2u:
        uint64_t v9 = type metadata accessor for URL(0);
        (*(void (**)(uint64_t, uint64_t))(*(void *)(v9 - 8) + 8))(v6, v9);
        break;
      case 3u:
        outlined consume of Result<_DataTable, Error>(*(void *)v6, *(_DWORD *)(v6 + 8));
        swift_bridgeObjectRelease(*(void *)(v6 + 24));
        swift_bridgeObjectRelease(*(void *)(v6 + 40));
        uint64_t v13 = *(void *)(v6 + 56);
        goto LABEL_10;
      case 4u:
        outlined consume of Result<_DataTable, Error>(*(void *)v6, *(_DWORD *)(v6 + 8));
        swift_bridgeObjectRelease(*(void *)(v6 + 24));
        swift_bridgeObjectRelease(*(void *)(v6 + 40));
        swift_bridgeObjectRelease(*(void *)(v6 + 56));
        uint64_t v13 = *(void *)(v6 + 72);
        goto LABEL_10;
      case 5u:
        uint64_t v14 = type metadata accessor for DataFrame(0);
        (*(void (**)(uint64_t, uint64_t))(*(void *)(v14 - 8) + 8))(v6, v14);
        uint64_t v15 = (int *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (DataFrame, sessionIdColumn: String, labelColumn: String, featureColumn: String));
        swift_bridgeObjectRelease(*(void *)(v6 + v15[12] + 8));
        swift_bridgeObjectRelease(*(void *)(v6 + v15[16] + 8));
        uint64_t v12 = v15[20];
        goto LABEL_9;
      case 6u:
        uint64_t v16 = type metadata accessor for DataFrame(0);
        (*(void (**)(uint64_t, uint64_t))(*(void *)(v16 - 8) + 8))(v6, v16);
        uint64_t v17 = (int *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (DataFrame, videoColumn: String, labelColumn: String, startTimeColumn: String?, endTimeColumn: String?));
        swift_bridgeObjectRelease(*(void *)(v6 + v17[12] + 8));
        swift_bridgeObjectRelease(*(void *)(v6 + v17[16] + 8));
        swift_bridgeObjectRelease(*(void *)(v6 + v17[20] + 8));
        uint64_t v12 = v17[24];
LABEL_9:
        uint64_t v13 = *(void *)(v6 + v12 + 8);
LABEL_10:
        swift_bridgeObjectRelease(v13);
        break;
      default:
        break;
    }
  }
  uint64_t v18 = (char *)(v44 + *(int *)(v45 + 32));
  uint64_t v19 = type metadata accessor for MLClassifierMetrics.Contents(0);
  int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload(v18, v19);
  switch(EnumCaseMultiPayload)
  {
    case 2:
      swift_errorRelease(*(void *)v18);
      break;
    case 1:
      uint64_t v43 = type metadata accessor for MLClassifierMetrics.Precomputed(0);
      uint64_t v49 = v5;
      int64_t v23 = &v18[*(int *)(v43 + 20)];
      uint64_t v46 = v4;
      uint64_t v24 = type metadata accessor for DataFrame(0);
      uint64_t v52 = v1;
      int64_t v25 = *(void (**)(char *, uint64_t))(*(void *)(v24 - 8) + 8);
      int64_t v26 = v23;
      uint64_t v5 = v49;
      v25(v26, v24);
      uint64_t v27 = v24;
      uint64_t v4 = v46;
      v25(&v18[*(int *)(v43 + 24)], v27);
      uint64_t v1 = v52;
      break;
    case 0:
      uint64_t v21 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Either<ClassificationMetrics<String>, ClassificationMetrics<Int>>);
      if (swift_getEnumCaseMultiPayload(v18, v21) == 1) {
        unint64_t v22 = &demangling cache variable for type metadata for ClassificationMetrics<Int>;
      }
      else {
        unint64_t v22 = &demangling cache variable for type metadata for ClassificationMetrics<String>;
      }
      uint64_t v28 = __swift_instantiateConcreteTypeFromMangledName(v22);
      (*(void (**)(char *, uint64_t))(*(void *)(v28 - 8) + 8))(v18, v28);
      break;
  }
  uint64_t v29 = (char *)(*(int *)(v45 + 36) + v44);
  int v30 = swift_getEnumCaseMultiPayload(v29, v19);
  switch(v30)
  {
    case 2:
      swift_errorRelease(*(void *)v29);
      break;
    case 1:
      uint64_t v33 = v29;
      uint64_t v34 = type metadata accessor for MLClassifierMetrics.Precomputed(0);
      uint64_t v50 = v5;
      uint64_t v35 = &v33[*(int *)(v34 + 20)];
      uint64_t v47 = v4;
      uint64_t v36 = type metadata accessor for DataFrame(0);
      uint64_t v53 = v1;
      uint64_t v37 = *(void (**)(char *, uint64_t))(*(void *)(v36 - 8) + 8);
      uint64_t v38 = v35;
      uint64_t v5 = v50;
      v37(v38, v36);
      uint64_t v39 = v36;
      uint64_t v4 = v47;
      v37(&v33[*(int *)(v34 + 24)], v39);
      uint64_t v1 = v53;
      break;
    case 0:
      uint64_t v31 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Either<ClassificationMetrics<String>, ClassificationMetrics<Int>>);
      if (swift_getEnumCaseMultiPayload(v29, v31) == 1) {
        uint64_t v32 = &demangling cache variable for type metadata for ClassificationMetrics<Int>;
      }
      else {
        uint64_t v32 = &demangling cache variable for type metadata for ClassificationMetrics<String>;
      }
      uint64_t v40 = __swift_instantiateConcreteTypeFromMangledName(v32);
      (*(void (**)(char *, uint64_t))(*(void *)(v40 - 8) + 8))(v29, v40);
      break;
  }
  return swift_deallocObject(v1, v42 + v5, v4 | 7);
}

uint64_t partial apply for closure #1 in MLHandPoseClassifier.init(checkpoint:)(uint64_t a1)
{
  uint64_t v3 = type metadata accessor for MLHandActionClassifier(0);
  uint64_t v4 = v1
     + (~*(unsigned __int8 *)(*(void *)(v3 - 8) + 80) & (*(unsigned __int8 *)(*(void *)(v3 - 8)
                                                                                              + 80)
                                                           + 16));
  uint64_t v5 = (void *)swift_task_alloc(dword_3A3FF4);
  *(void *)(v2 + 16) = v5;
  *uint64_t v5 = v2;
  v5[1] = partial apply for closure #1 in MLActivityClassifier.init(trainingData:featureColumns:labelColumn:recordingFileColumn:parameters:);
  return closure #1 in MLHandPoseClassifier.init(checkpoint:)(a1, v4);
}

void *partial apply for closure #1 in MLHandPoseClassifier.predictions(from:)(uint64_t a1, void *a2)
{
  return closure #1 in MLHandPoseClassifier.predictions(from:)(a1, *(void *)(v2 + 16), a2);
}

uint64_t *initializeBufferWithCopyOfBuffer for MLHandPoseClassifier(uint64_t *a1, uint64_t *a2, int *a3)
{
  int v3 = *(_DWORD *)(*((void *)a3 - 1) + 80);
  uint64_t v4 = *a2;
  *a1 = *a2;
  if ((v3 & 0x20000) != 0)
  {
    uint64_t v16 = (uint64_t *)(v4 + ((v3 + 16) & ~v3));
    swift_retain();
  }
  else
  {
    a1[1] = a2[1];
    uint64_t v5 = (void *)a2[2];
    a1[2] = (uint64_t)v5;
    uint64_t v157 = (int *)type metadata accessor for MLHandActionClassifier(0);
    uint64_t v6 = v157[7];
    uint64_t v7 = (char *)a1 + v6;
    uint64_t v8 = (char *)a2 + v6;
    char v9 = v4;
    uint64_t v10 = type metadata accessor for MLHandActionClassifier.ModelParameters.ValidationData(0);
    swift_bridgeObjectRetain(v9);
    swift_retain();
    v5;
    if (swift_getEnumCaseMultiPayload(v8, v10) == 1)
    {
      uint64_t v11 = type metadata accessor for MLHandActionClassifier.DataSource(0);
      unsigned int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload(v8, v11);
      switch(EnumCaseMultiPayload)
      {
        case 0u:
          unsigned int v166 = EnumCaseMultiPayload;
          uint64_t v161 = v11;
          uint64_t v17 = type metadata accessor for URL(0);
          uint64_t v151 = v10;
          uint64_t v18 = *(void (**)(char *, char *, uint64_t))(*(void *)(v17 - 8) + 16);
          v18(v7, v8, v17);
          uint64_t v19 = (int *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (at: URL, annotationFile: URL, videoColumn: String, labelColumn: String, startTimeColumn: String?, endTimeColumn: String?));
          v18(&v7[v19[12]], &v8[v19[12]], v17);
          uint64_t v20 = v19[16];
          *(void *)&v7[v20] = *(void *)&v8[v20];
          uint64_t v21 = *(void *)&v8[v20 + 8];
          *(void *)&v7[v20 + 8] = v21;
          uint64_t v22 = v19[20];
          *(void *)&v7[v22] = *(void *)&v8[v22];
          uint64_t v23 = *(void *)&v8[v22 + 8];
          *(void *)&v7[v22 + 8] = v23;
          uint64_t v24 = v19[24];
          *(void *)&v7[v24] = *(void *)&v8[v24];
          uint64_t v25 = *(void *)&v8[v24 + 8];
          *(void *)&v7[v24 + 8] = v25;
          uint64_t v26 = v19[28];
          *(void *)&v7[v26] = *(void *)&v8[v26];
          uint64_t v27 = *(void *)&v8[v26 + 8];
          *(void *)&v7[v26 + 8] = v27;
          swift_bridgeObjectRetain(v21);
          LOBYTE(v21) = v23;
          uint64_t v11 = v161;
          swift_bridgeObjectRetain(v21);
          char v28 = v25;
          uint64_t v10 = v151;
          goto LABEL_12;
        case 1u:
        case 2u:
          unsigned int v13 = EnumCaseMultiPayload;
          uint64_t v14 = type metadata accessor for URL(0);
          (*(void (**)(char *, char *, uint64_t))(*(void *)(v14 - 8) + 16))(v7, v8, v14);
          uint64_t v15 = v13;
          goto LABEL_16;
        case 3u:
          uint64_t v162 = v11;
          uint64_t v29 = *(void *)v8;
          char v30 = v8[8];
          unsigned int v166 = EnumCaseMultiPayload;
          outlined copy of Result<_DataTable, Error>(*(void *)v8, v30);
          *(void *)uint64_t v7 = v29;
          v7[8] = v30;
          *((void *)v7 + 2) = *((void *)v8 + 2);
          uint64_t v31 = *((void *)v8 + 3);
          *((void *)v7 + 3) = v31;
          *((void *)v7 + 4) = *((void *)v8 + 4);
          uint64_t v32 = *((void *)v8 + 5);
          *((void *)v7 + 5) = v32;
          *((void *)v7 + 6) = *((void *)v8 + 6);
          uint64_t v27 = *((void *)v8 + 7);
          *((void *)v7 + 7) = v27;
          goto LABEL_11;
        case 4u:
          uint64_t v163 = v11;
          uint64_t v33 = *(void *)v8;
          char v34 = v8[8];
          unsigned int v166 = EnumCaseMultiPayload;
          outlined copy of Result<_DataTable, Error>(*(void *)v8, v34);
          *(void *)uint64_t v7 = v33;
          v7[8] = v34;
          *((void *)v7 + 2) = *((void *)v8 + 2);
          uint64_t v35 = *((void *)v8 + 3);
          *((void *)v7 + 3) = v35;
          *((void *)v7 + 4) = *((void *)v8 + 4);
          uint64_t v36 = *((void *)v8 + 5);
          *((void *)v7 + 5) = v36;
          *((void *)v7 + 6) = *((void *)v8 + 6);
          uint64_t v37 = *((void *)v8 + 7);
          *((void *)v7 + 7) = v37;
          *((void *)v7 + 8) = *((void *)v8 + 8);
          uint64_t v152 = v10;
          uint64_t v38 = *((void *)v8 + 9);
          *((void *)v7 + 9) = v38;
          goto LABEL_14;
        case 5u:
          unsigned int v166 = EnumCaseMultiPayload;
          uint64_t v39 = type metadata accessor for DataFrame(0);
          (*(void (**)(char *, char *, uint64_t))(*(void *)(v39 - 8) + 16))(v7, v8, v39);
          uint64_t v40 = (int *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (DataFrame, sessionIdColumn: String, labelColumn: String, featureColumn: String));
          uint64_t v41 = v40[12];
          *(void *)&v7[v41] = *(void *)&v8[v41];
          uint64_t v31 = *(void *)&v8[v41 + 8];
          *(void *)&v7[v41 + 8] = v31;
          uint64_t v42 = v40[16];
          *(void *)&v7[v42] = *(void *)&v8[v42];
          uint64_t v162 = v11;
          uint64_t v32 = *(void *)&v8[v42 + 8];
          *(void *)&v7[v42 + 8] = v32;
          uint64_t v43 = v40[20];
          *(void *)&v7[v43] = *(void *)&v8[v43];
          uint64_t v27 = *(void *)&v8[v43 + 8];
          *(void *)&v7[v43 + 8] = v27;
LABEL_11:
          swift_bridgeObjectRetain(v31);
          char v28 = v32;
          uint64_t v11 = v162;
LABEL_12:
          swift_bridgeObjectRetain(v28);
          char v44 = v27;
          break;
        case 6u:
          unsigned int v166 = EnumCaseMultiPayload;
          uint64_t v45 = type metadata accessor for DataFrame(0);
          (*(void (**)(char *, char *, uint64_t))(*(void *)(v45 - 8) + 16))(v7, v8, v45);
          uint64_t v46 = (int *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (DataFrame, videoColumn: String, labelColumn: String, startTimeColumn: String?, endTimeColumn: String?));
          uint64_t v47 = v46[12];
          *(void *)&v7[v47] = *(void *)&v8[v47];
          uint64_t v35 = *(void *)&v8[v47 + 8];
          *(void *)&v7[v47 + 8] = v35;
          uint64_t v48 = v46[16];
          *(void *)&v7[v48] = *(void *)&v8[v48];
          uint64_t v163 = v11;
          uint64_t v36 = *(void *)&v8[v48 + 8];
          *(void *)&v7[v48 + 8] = v36;
          uint64_t v49 = v46[20];
          *(void *)&v7[v49] = *(void *)&v8[v49];
          uint64_t v37 = *(void *)&v8[v49 + 8];
          *(void *)&v7[v49 + 8] = v37;
          uint64_t v50 = v46[24];
          *(void *)&v7[v50] = *(void *)&v8[v50];
          uint64_t v152 = v10;
          uint64_t v38 = *(void *)&v8[v50 + 8];
          *(void *)&v7[v50 + 8] = v38;
LABEL_14:
          swift_bridgeObjectRetain(v35);
          char v51 = v36;
          uint64_t v11 = v163;
          swift_bridgeObjectRetain(v51);
          swift_bridgeObjectRetain(v37);
          char v44 = v38;
          uint64_t v10 = v152;
          break;
      }
      swift_bridgeObjectRetain(v44);
      uint64_t v15 = v166;
LABEL_16:
      uint64_t v16 = a1;
      swift_storeEnumTagMultiPayload(v7, v11, v15);
      swift_storeEnumTagMultiPayload(v7, v10, 1);
    }
    else
    {
      memcpy(v7, v8, *(void *)(*(void *)(v10 - 8) + 64));
      uint64_t v16 = a1;
    }
    uint64_t v52 = (int *)type metadata accessor for MLHandActionClassifier.ModelParameters(0);
    *(void *)&v7[v52[5]] = *(void *)&v8[v52[5]];
    *(void *)&v7[v52[6]] = *(void *)&v8[v52[6]];
    *(void *)&v7[v52[7]] = *(void *)&v8[v52[7]];
    *(void *)&v7[v52[8]] = *(void *)&v8[v52[8]];
    *(void *)&v7[v52[10]] = *(void *)&v8[v52[10]];
    uint64_t v53 = v157[8];
    uint64_t v54 = (uint64_t *)((char *)v16 + v53);
    uint64_t v55 = (char *)a2 + v53;
    uint64_t v164 = type metadata accessor for MLClassifierMetrics.Contents(0);
    unsigned int v56 = swift_getEnumCaseMultiPayload(v55, v164);
    if (v56 == 2)
    {
      uint64_t v61 = *(void *)v55;
      swift_errorRetain(*(void *)v55);
      *uint64_t v54 = v61;
    }
    else if (v56 == 1)
    {
      *uint64_t v54 = *(void *)v55;
      uint64_t v153 = type metadata accessor for MLClassifierMetrics.Precomputed(0);
      uint64_t v57 = *(int *)(v153 + 20);
      uint64_t v146 = (char *)v54 + v57;
      uint64_t v58 = type metadata accessor for DataFrame(0);
      uint64_t v167 = (char *)v54;
      uint64_t v59 = *(void (**)(char *, char *, uint64_t))(*(void *)(v58 - 8) + 16);
      char v60 = &v55[v57];
      uint64_t v16 = a1;
      v59(v146, v60, v58);
      v59(&v167[*(int *)(v153 + 24)], &v55[*(int *)(v153 + 24)], v58);
      uint64_t v54 = v167;
    }
    else
    {
      uint64_t v62 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Either<ClassificationMetrics<String>, ClassificationMetrics<Int>>);
      int v63 = swift_getEnumCaseMultiPayload(v55, v62);
      BOOL v64 = v63 == 1;
      uint64_t v65 = &demangling cache variable for type metadata for ClassificationMetrics<String>;
      if (v63 == 1) {
        uint64_t v65 = &demangling cache variable for type metadata for ClassificationMetrics<Int>;
      }
      uint64_t v66 = __swift_instantiateConcreteTypeFromMangledName(v65);
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v66 - 8) + 16))((char *)v54, v55, v66);
      swift_storeEnumTagMultiPayload((char *)v54, v62, v64);
      uint64_t v16 = a1;
    }
    swift_storeEnumTagMultiPayload((char *)v54, v164, v56);
    uint64_t v67 = v157[9];
    unint64_t v68 = (char *)v16 + v67;
    int64_t v69 = (char *)a2 + v67;
    unsigned int v70 = swift_getEnumCaseMultiPayload(v69, v164);
    if (v70 == 2)
    {
      uint64_t v75 = *(void *)v69;
      swift_errorRetain(*(void *)v69);
      *(void *)unint64_t v68 = v75;
    }
    else if (v70 == 1)
    {
      *(void *)unint64_t v68 = *(void *)v69;
      uint64_t v158 = type metadata accessor for MLClassifierMetrics.Precomputed(0);
      uint64_t v71 = *(int *)(v158 + 20);
      char v154 = &v68[v71];
      uint64_t v72 = type metadata accessor for DataFrame(0);
      int64_t v73 = *(void (**)(char *, char *, uint64_t))(*(void *)(v72 - 8) + 16);
      uint64_t v74 = &v69[v71];
      uint64_t v16 = a1;
      v73(v154, v74, v72);
      v73(&v68[*(int *)(v158 + 24)], &v69[*(int *)(v158 + 24)], v72);
      unsigned int v70 = 1;
    }
    else
    {
      uint64_t v76 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Either<ClassificationMetrics<String>, ClassificationMetrics<Int>>);
      int v77 = swift_getEnumCaseMultiPayload(v69, v76);
      BOOL v78 = v77 == 1;
      uint64_t v79 = &demangling cache variable for type metadata for ClassificationMetrics<String>;
      if (v77 == 1) {
        uint64_t v79 = &demangling cache variable for type metadata for ClassificationMetrics<Int>;
      }
      uint64_t v80 = __swift_instantiateConcreteTypeFromMangledName(v79);
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v80 - 8) + 16))(v68, v69, v80);
      swift_storeEnumTagMultiPayload(v68, v76, v78);
      uint64_t v16 = a1;
    }
    swift_storeEnumTagMultiPayload(v68, v164, v70);
    uint64_t v81 = a3[5];
    uint64_t v82 = *(void **)((char *)a2 + v81);
    *(uint64_t *)((char *)v16 + v81) = (uint64_t)v82;
    uint64_t v83 = a3[6];
    uint64_t v84 = (char *)v16 + v83;
    uint64_t v85 = (char *)a2 + v83;
    uint64_t v86 = type metadata accessor for MLHandPoseClassifier.ModelParameters.ValidationData(0);
    v82;
    if (swift_getEnumCaseMultiPayload(v85, v86) == 1)
    {
      uint64_t v87 = type metadata accessor for MLHandPoseClassifier.DataSource(0);
      unsigned int v159 = swift_getEnumCaseMultiPayload(v85, v87);
      switch(v159)
      {
        case 0u:
          uint64_t v168 = v87;
          uint64_t v89 = type metadata accessor for URL(0);
          uint64_t v155 = v86;
          uint64_t v90 = *(void (**)(char *, char *, uint64_t))(*(void *)(v89 - 8) + 16);
          v90(v84, v85, v89);
          uint64_t v91 = (int *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (at: URL, annotationFile: URL, imageColumn: String, labelColumn: String));
          v90(&v84[v91[12]], &v85[v91[12]], v89);
          uint64_t v86 = v155;
          uint64_t v92 = v91[16];
          *(void *)&v84[v92] = *(void *)&v85[v92];
          uint64_t v93 = *(void *)&v85[v92 + 8];
          *(void *)&v84[v92 + 8] = v93;
          uint64_t v94 = v91[20];
          uint64_t v16 = a1;
          *(void *)&v84[v94] = *(void *)&v85[v94];
          goto LABEL_41;
        case 1u:
        case 2u:
          uint64_t v88 = type metadata accessor for URL(0);
          (*(void (**)(char *, char *, uint64_t))(*(void *)(v88 - 8) + 16))(v84, v85, v88);
          goto LABEL_44;
        case 3u:
          uint64_t v169 = v87;
          uint64_t v95 = *(void *)v85;
          char v96 = v85[8];
          outlined copy of Result<_DataTable, Error>(*(void *)v85, v96);
          *(void *)uint64_t v84 = v95;
          v84[8] = v96;
          *((void *)v84 + 2) = *((void *)v85 + 2);
          uint64_t v97 = *((void *)v85 + 3);
          *((void *)v84 + 3) = v97;
          *((void *)v84 + 4) = *((void *)v85 + 4);
          uint64_t v98 = *((void *)v85 + 5);
          *((void *)v84 + 5) = v98;
          *((void *)v84 + 6) = *((void *)v85 + 6);
          uint64_t v99 = *((void *)v85 + 7);
          *((void *)v84 + 7) = v99;
          goto LABEL_39;
        case 4u:
          uint64_t v168 = v87;
          uint64_t v100 = *(void *)v85;
          char v101 = v85[8];
          outlined copy of Result<_DataTable, Error>(*(void *)v85, v101);
          *(void *)uint64_t v84 = v100;
          v84[8] = v101;
          uint64_t v16 = a1;
          *((void *)v84 + 2) = *((void *)v85 + 2);
          uint64_t v93 = *((void *)v85 + 3);
          *((void *)v84 + 3) = v93;
          *((void *)v84 + 4) = *((void *)v85 + 4);
          uint64_t v102 = *((void *)v85 + 5);
          *((void *)v84 + 5) = v102;
          goto LABEL_42;
        case 5u:
          uint64_t v103 = type metadata accessor for DataFrame(0);
          (*(void (**)(char *, char *, uint64_t))(*(void *)(v103 - 8) + 16))(v84, v85, v103);
          uint64_t v104 = (int *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (DataFrame, sessionIdColumn: String, labelColumn: String, featureColumn: String));
          uint64_t v105 = v104[12];
          *(void *)&v84[v105] = *(void *)&v85[v105];
          uint64_t v97 = *(void *)&v85[v105 + 8];
          *(void *)&v84[v105 + 8] = v97;
          uint64_t v106 = v104[16];
          *(void *)&v84[v106] = *(void *)&v85[v106];
          uint64_t v169 = v87;
          uint64_t v98 = *(void *)&v85[v106 + 8];
          *(void *)&v84[v106 + 8] = v98;
          uint64_t v107 = v104[20];
          *(void *)&v84[v107] = *(void *)&v85[v107];
          uint64_t v99 = *(void *)&v85[v107 + 8];
          *(void *)&v84[v107 + 8] = v99;
LABEL_39:
          swift_bridgeObjectRetain(v97);
          char v108 = v98;
          uint64_t v87 = v169;
          swift_bridgeObjectRetain(v108);
          char v109 = v99;
          uint64_t v16 = a1;
          break;
        case 6u:
          uint64_t v110 = type metadata accessor for DataFrame(0);
          (*(void (**)(char *, char *, uint64_t))(*(void *)(v110 - 8) + 16))(v84, v85, v110);
          uint64_t v111 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (DataFrame, imageColumn: String, labelColumn: String));
          uint64_t v112 = *(int *)(v111 + 48);
          *(void *)&v84[v112] = *(void *)&v85[v112];
          uint64_t v93 = *(void *)&v85[v112 + 8];
          *(void *)&v84[v112 + 8] = v93;
          uint64_t v94 = *(int *)(v111 + 64);
          *(void *)&v84[v94] = *(void *)&v85[v94];
          uint64_t v168 = v87;
LABEL_41:
          uint64_t v102 = *(void *)&v85[v94 + 8];
          *(void *)&v84[v94 + 8] = v102;
LABEL_42:
          swift_bridgeObjectRetain(v93);
          char v109 = v102;
          uint64_t v87 = v168;
          break;
      }
      swift_bridgeObjectRetain(v109);
LABEL_44:
      swift_storeEnumTagMultiPayload(v84, v87, v159);
      swift_storeEnumTagMultiPayload(v84, v86, 1);
    }
    else
    {
      memcpy(v84, v85, *(void *)(*(void *)(v86 - 8) + 64));
    }
    unint64_t v113 = (int *)type metadata accessor for MLHandPoseClassifier.ModelParameters(0);
    *(void *)&v84[v113[5]] = *(void *)&v85[v113[5]];
    *(void *)&v84[v113[6]] = *(void *)&v85[v113[6]];
    *(void *)&v84[v113[7]] = *(void *)&v85[v113[7]];
    uint64_t v114 = a3[7];
    unint64_t v115 = (char *)v16 + v114;
    uint64_t v116 = (char *)a2 + v114;
    unsigned int v117 = swift_getEnumCaseMultiPayload(v116, v164);
    if (v117 == 2)
    {
      uint64_t v122 = *(void *)v116;
      swift_errorRetain(*(void *)v116);
      *(void *)unint64_t v115 = v122;
    }
    else if (v117 == 1)
    {
      *(void *)unint64_t v115 = *(void *)v116;
      uint64_t v160 = type metadata accessor for MLClassifierMetrics.Precomputed(0);
      uint64_t v118 = *(int *)(v160 + 20);
      uint64_t v156 = &v115[v118];
      uint64_t v119 = type metadata accessor for DataFrame(0);
      char v120 = *(void (**)(char *, char *, uint64_t))(*(void *)(v119 - 8) + 16);
      unint64_t v121 = &v116[v118];
      uint64_t v16 = a1;
      v120(v156, v121, v119);
      v120(&v115[*(int *)(v160 + 24)], &v116[*(int *)(v160 + 24)], v119);
      unsigned int v117 = 1;
    }
    else
    {
      uint64_t v123 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Either<ClassificationMetrics<String>, ClassificationMetrics<Int>>);
      int v124 = swift_getEnumCaseMultiPayload(v116, v123);
      BOOL v125 = v124 == 1;
      uint64_t v126 = &demangling cache variable for type metadata for ClassificationMetrics<String>;
      if (v124 == 1) {
        uint64_t v126 = &demangling cache variable for type metadata for ClassificationMetrics<Int>;
      }
      uint64_t v127 = __swift_instantiateConcreteTypeFromMangledName(v126);
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v127 - 8) + 16))(v115, v116, v127);
      swift_storeEnumTagMultiPayload(v115, v123, v125);
      uint64_t v16 = a1;
    }
    swift_storeEnumTagMultiPayload(v115, v164, v117);
    uint64_t v128 = a3[8];
    unint64_t v129 = (uint64_t *)((char *)v16 + v128);
    int64_t v130 = (char *)a2 + v128;
    int v131 = swift_getEnumCaseMultiPayload((char *)a2 + v128, v164);
    if (v131 == 2)
    {
      uint64_t v139 = *(void *)v130;
      swift_errorRetain(*(void *)v130);
      void *v129 = v139;
      uint64_t v136 = 2;
      BOOL v137 = v129;
      uint64_t v138 = v164;
      goto LABEL_56;
    }
    if (v131 == 1)
    {
      void *v129 = *(void *)v130;
      uint64_t v150 = type metadata accessor for MLClassifierMetrics.Precomputed(0);
      uint64_t v132 = *(int *)(v150 + 20);
      unint64_t v148 = (char *)v129 + v132;
      uint64_t v133 = type metadata accessor for DataFrame(0);
      unint64_t v134 = *(void (**)(char *, char *, uint64_t))(*(void *)(v133 - 8) + 16);
      uint64_t v135 = &v130[v132];
      uint64_t v16 = a1;
      v134(v148, v135, v133);
      v134((char *)v129 + *(int *)(v150 + 24), &v130[*(int *)(v150 + 24)], v133);
      uint64_t v136 = 1;
      BOOL v137 = v129;
      uint64_t v138 = v164;
LABEL_56:
      swift_storeEnumTagMultiPayload(v137, v138, v136);
      return v16;
    }
    uint64_t v140 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Either<ClassificationMetrics<String>, ClassificationMetrics<Int>>);
    int v141 = swift_getEnumCaseMultiPayload(v130, v140);
    BOOL v142 = v141 == 1;
    int64_t v143 = &demangling cache variable for type metadata for ClassificationMetrics<String>;
    if (v141 == 1) {
      int64_t v143 = &demangling cache variable for type metadata for ClassificationMetrics<Int>;
    }
    uint64_t v144 = __swift_instantiateConcreteTypeFromMangledName(v143);
    (*(void (**)(void *, char *, uint64_t))(*(void *)(v144 - 8) + 16))(v129, v130, v144);
    swift_storeEnumTagMultiPayload(v129, v140, v142);
    swift_storeEnumTagMultiPayload(v129, v164, 0);
    return a1;
  }
  return v16;
}

uint64_t destroy for MLHandPoseClassifier(uint64_t a1, int *a2)
{
  uint64_t v3 = a1;
  swift_bridgeObjectRelease(*(void *)a1);
  swift_release();

  uint64_t v4 = (int *)type metadata accessor for MLHandActionClassifier(0);
  uint64_t v5 = a1 + v4[7];
  uint64_t v6 = type metadata accessor for MLHandActionClassifier.ModelParameters.ValidationData(0);
  if (swift_getEnumCaseMultiPayload(v5, v6) == 1)
  {
    uint64_t v7 = type metadata accessor for MLHandActionClassifier.DataSource(0);
    switch(swift_getEnumCaseMultiPayload(v5, v7))
    {
      case 0u:
        uint64_t v9 = type metadata accessor for URL(0);
        uint64_t v86 = a2;
        uint64_t v10 = *(void (**)(uint64_t))(*(void *)(v9 - 8) + 8);
        v10(v5);
        uint64_t v11 = (int *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (at: URL, annotationFile: URL, videoColumn: String, labelColumn: String, startTimeColumn: String?, endTimeColumn: String?));
        ((void (*)(uint64_t, uint64_t))v10)(v5 + v11[12], v9);
        a2 = v86;
        swift_bridgeObjectRelease(*(void *)(v5 + v11[16] + 8));
        swift_bridgeObjectRelease(*(void *)(v5 + v11[20] + 8));
        swift_bridgeObjectRelease(*(void *)(v5 + v11[24] + 8));
        uint64_t v12 = v11[28];
        goto LABEL_9;
      case 1u:
      case 2u:
        uint64_t v8 = type metadata accessor for URL(0);
        (*(void (**)(uint64_t, uint64_t))(*(void *)(v8 - 8) + 8))(v5, v8);
        break;
      case 3u:
        outlined consume of Result<_DataTable, Error>(*(void *)v5, *(_DWORD *)(v5 + 8));
        swift_bridgeObjectRelease(*(void *)(v5 + 24));
        swift_bridgeObjectRelease(*(void *)(v5 + 40));
        uint64_t v13 = *(void *)(v5 + 56);
        goto LABEL_10;
      case 4u:
        outlined consume of Result<_DataTable, Error>(*(void *)v5, *(_DWORD *)(v5 + 8));
        swift_bridgeObjectRelease(*(void *)(v5 + 24));
        swift_bridgeObjectRelease(*(void *)(v5 + 40));
        swift_bridgeObjectRelease(*(void *)(v5 + 56));
        uint64_t v13 = *(void *)(v5 + 72);
        goto LABEL_10;
      case 5u:
        uint64_t v14 = type metadata accessor for DataFrame(0);
        (*(void (**)(uint64_t, uint64_t))(*(void *)(v14 - 8) + 8))(v5, v14);
        uint64_t v15 = (int *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (DataFrame, sessionIdColumn: String, labelColumn: String, featureColumn: String));
        swift_bridgeObjectRelease(*(void *)(v5 + v15[12] + 8));
        swift_bridgeObjectRelease(*(void *)(v5 + v15[16] + 8));
        uint64_t v12 = v15[20];
        goto LABEL_9;
      case 6u:
        uint64_t v16 = type metadata accessor for DataFrame(0);
        (*(void (**)(uint64_t, uint64_t))(*(void *)(v16 - 8) + 8))(v5, v16);
        uint64_t v17 = (int *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (DataFrame, videoColumn: String, labelColumn: String, startTimeColumn: String?, endTimeColumn: String?));
        swift_bridgeObjectRelease(*(void *)(v5 + v17[12] + 8));
        swift_bridgeObjectRelease(*(void *)(v5 + v17[16] + 8));
        swift_bridgeObjectRelease(*(void *)(v5 + v17[20] + 8));
        uint64_t v12 = v17[24];
LABEL_9:
        uint64_t v13 = *(void *)(v5 + v12 + 8);
LABEL_10:
        swift_bridgeObjectRelease(v13);
        break;
      default:
        break;
    }
  }
  uint64_t v18 = (char *)(v3 + v4[8]);
  uint64_t v19 = type metadata accessor for MLClassifierMetrics.Contents(0);
  int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload(v18, v19);
  switch(EnumCaseMultiPayload)
  {
    case 2:
      swift_errorRelease(*(void *)v18);
      break;
    case 1:
      uint64_t v87 = a2;
      uint64_t v23 = type metadata accessor for MLClassifierMetrics.Precomputed(0);
      uint64_t v79 = v19;
      uint64_t v24 = &v18[*(int *)(v23 + 20)];
      BOOL v78 = v4;
      uint64_t v25 = type metadata accessor for DataFrame(0);
      uint64_t v82 = v3;
      uint64_t v26 = *(void (**)(char *, uint64_t))(*(void *)(v25 - 8) + 8);
      uint64_t v27 = v24;
      uint64_t v19 = v79;
      v26(v27, v25);
      uint64_t v28 = *(int *)(v23 + 24);
      a2 = v87;
      uint64_t v29 = v25;
      uint64_t v4 = v78;
      v26(&v18[v28], v29);
      uint64_t v3 = v82;
      break;
    case 0:
      uint64_t v21 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Either<ClassificationMetrics<String>, ClassificationMetrics<Int>>);
      if (swift_getEnumCaseMultiPayload(v18, v21) == 1) {
        uint64_t v22 = &demangling cache variable for type metadata for ClassificationMetrics<Int>;
      }
      else {
        uint64_t v22 = &demangling cache variable for type metadata for ClassificationMetrics<String>;
      }
      uint64_t v30 = __swift_instantiateConcreteTypeFromMangledName(v22);
      (*(void (**)(char *, uint64_t))(*(void *)(v30 - 8) + 8))(v18, v30);
      break;
  }
  uint64_t v31 = (char *)(v3 + v4[9]);
  int v32 = swift_getEnumCaseMultiPayload(v31, v19);
  switch(v32)
  {
    case 2:
      swift_errorRelease(*(void *)v31);
      break;
    case 1:
      uint64_t v88 = a2;
      uint64_t v35 = type metadata accessor for MLClassifierMetrics.Precomputed(0);
      uint64_t v80 = v19;
      uint64_t v36 = &v31[*(int *)(v35 + 20)];
      uint64_t v37 = type metadata accessor for DataFrame(0);
      uint64_t v83 = v3;
      uint64_t v38 = *(void (**)(char *, uint64_t))(*(void *)(v37 - 8) + 8);
      uint64_t v39 = v36;
      uint64_t v19 = v80;
      v38(v39, v37);
      uint64_t v40 = *(int *)(v35 + 24);
      a2 = v88;
      v38(&v31[v40], v37);
      uint64_t v3 = v83;
      break;
    case 0:
      uint64_t v33 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Either<ClassificationMetrics<String>, ClassificationMetrics<Int>>);
      if (swift_getEnumCaseMultiPayload(v31, v33) == 1) {
        char v34 = &demangling cache variable for type metadata for ClassificationMetrics<Int>;
      }
      else {
        char v34 = &demangling cache variable for type metadata for ClassificationMetrics<String>;
      }
      uint64_t v41 = __swift_instantiateConcreteTypeFromMangledName(v34);
      (*(void (**)(char *, uint64_t))(*(void *)(v41 - 8) + 8))(v31, v41);
      break;
  }

  uint64_t v42 = v3 + a2[6];
  uint64_t v43 = type metadata accessor for MLHandPoseClassifier.ModelParameters.ValidationData(0);
  if (swift_getEnumCaseMultiPayload(v42, v43) == 1)
  {
    uint64_t v44 = type metadata accessor for MLHandPoseClassifier.DataSource(0);
    switch(swift_getEnumCaseMultiPayload(v42, v44))
    {
      case 0u:
        uint64_t v89 = a2;
        uint64_t v46 = type metadata accessor for URL(0);
        uint64_t v84 = v3;
        uint64_t v47 = *(void (**)(uint64_t, uint64_t))(*(void *)(v46 - 8) + 8);
        v47(v42, v46);
        uint64_t v48 = v19;
        uint64_t v49 = (int *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (at: URL, annotationFile: URL, imageColumn: String, labelColumn: String));
        uint64_t v50 = v46;
        a2 = v89;
        v47(v42 + v49[12], v50);
        uint64_t v3 = v84;
        swift_bridgeObjectRelease(*(void *)(v42 + v49[16] + 8));
        uint64_t v51 = v49[20];
        goto LABEL_38;
      case 1u:
      case 2u:
        uint64_t v45 = type metadata accessor for URL(0);
        (*(void (**)(uint64_t, uint64_t))(*(void *)(v45 - 8) + 8))(v42, v45);
        break;
      case 3u:
        outlined consume of Result<_DataTable, Error>(*(void *)v42, *(_DWORD *)(v42 + 8));
        swift_bridgeObjectRelease(*(void *)(v42 + 24));
        swift_bridgeObjectRelease(*(void *)(v42 + 40));
        uint64_t v52 = *(void *)(v42 + 56);
        goto LABEL_39;
      case 4u:
        outlined consume of Result<_DataTable, Error>(*(void *)v42, *(_DWORD *)(v42 + 8));
        swift_bridgeObjectRelease(*(void *)(v42 + 24));
        uint64_t v52 = *(void *)(v42 + 40);
        goto LABEL_39;
      case 5u:
        uint64_t v53 = type metadata accessor for DataFrame(0);
        (*(void (**)(uint64_t, uint64_t))(*(void *)(v53 - 8) + 8))(v42, v53);
        uint64_t v48 = v19;
        uint64_t v54 = a2;
        uint64_t v55 = (int *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (DataFrame, sessionIdColumn: String, labelColumn: String, featureColumn: String));
        swift_bridgeObjectRelease(*(void *)(v42 + v55[12] + 8));
        swift_bridgeObjectRelease(*(void *)(v42 + v55[16] + 8));
        uint64_t v51 = v55[20];
        goto LABEL_37;
      case 6u:
        uint64_t v56 = type metadata accessor for DataFrame(0);
        (*(void (**)(uint64_t, uint64_t))(*(void *)(v56 - 8) + 8))(v42, v56);
        uint64_t v48 = v19;
        uint64_t v54 = a2;
        uint64_t v57 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (DataFrame, imageColumn: String, labelColumn: String));
        swift_bridgeObjectRelease(*(void *)(v42 + *(int *)(v57 + 48) + 8));
        uint64_t v51 = *(int *)(v57 + 64);
LABEL_37:
        a2 = v54;
LABEL_38:
        uint64_t v19 = v48;
        uint64_t v52 = *(void *)(v42 + v51 + 8);
LABEL_39:
        swift_bridgeObjectRelease(v52);
        break;
      default:
        break;
    }
  }
  uint64_t v58 = (char *)(v3 + a2[7]);
  int v59 = swift_getEnumCaseMultiPayload(v58, v19);
  switch(v59)
  {
    case 2:
      swift_errorRelease(*(void *)v58);
      break;
    case 1:
      uint64_t v90 = a2;
      uint64_t v62 = type metadata accessor for MLClassifierMetrics.Precomputed(0);
      uint64_t v81 = v19;
      int v63 = &v58[*(int *)(v62 + 20)];
      uint64_t v64 = type metadata accessor for DataFrame(0);
      uint64_t v85 = v3;
      uint64_t v65 = *(void (**)(char *, uint64_t))(*(void *)(v64 - 8) + 8);
      uint64_t v66 = v63;
      uint64_t v19 = v81;
      v65(v66, v64);
      uint64_t v67 = *(int *)(v62 + 24);
      a2 = v90;
      v65(&v58[v67], v64);
      uint64_t v3 = v85;
      break;
    case 0:
      uint64_t v60 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Either<ClassificationMetrics<String>, ClassificationMetrics<Int>>);
      if (swift_getEnumCaseMultiPayload(v58, v60) == 1) {
        uint64_t v61 = &demangling cache variable for type metadata for ClassificationMetrics<Int>;
      }
      else {
        uint64_t v61 = &demangling cache variable for type metadata for ClassificationMetrics<String>;
      }
      uint64_t v68 = __swift_instantiateConcreteTypeFromMangledName(v61);
      (*(void (**)(char *, uint64_t))(*(void *)(v68 - 8) + 8))(v58, v68);
      break;
  }
  int64_t v69 = (void *)(a2[8] + v3);
  uint64_t result = swift_getEnumCaseMultiPayload(v69, v19);
  switch(result)
  {
    case 2:
      return swift_errorRelease(*v69);
    case 1:
      uint64_t v73 = type metadata accessor for MLClassifierMetrics.Precomputed(0);
      uint64_t v74 = (char *)v69 + *(int *)(v73 + 20);
      uint64_t v75 = type metadata accessor for DataFrame(0);
      uint64_t v76 = *(void (**)(char *, uint64_t))(*(void *)(v75 - 8) + 8);
      v76(v74, v75);
      return ((uint64_t (*)(char *, uint64_t))v76)((char *)v69 + *(int *)(v73 + 24), v75);
    case 0:
      uint64_t v71 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Either<ClassificationMetrics<String>, ClassificationMetrics<Int>>);
      if (swift_getEnumCaseMultiPayload(v69, v71) == 1) {
        uint64_t v72 = &demangling cache variable for type metadata for ClassificationMetrics<Int>;
      }
      else {
        uint64_t v72 = &demangling cache variable for type metadata for ClassificationMetrics<String>;
      }
      uint64_t v77 = __swift_instantiateConcreteTypeFromMangledName(v72);
      return (*(uint64_t (**)(void *, uint64_t))(*(void *)(v77 - 8) + 8))(v69, v77);
  }
  return result;
}

void *initializeWithCopy for MLHandPoseClassifier(void *a1, void *a2, int *a3)
{
  uint64_t v3 = *a2;
  *a1 = *a2;
  a1[1] = a2[1];
  uint64_t v4 = (void *)a2[2];
  a1[2] = v4;
  uint64_t v156 = (int *)type metadata accessor for MLHandActionClassifier(0);
  uint64_t v5 = v156[7];
  uint64_t v6 = (char *)a1 + v5;
  uint64_t v7 = (char *)a2 + v5;
  char v8 = v3;
  uint64_t v9 = type metadata accessor for MLHandActionClassifier.ModelParameters.ValidationData(0);
  swift_bridgeObjectRetain(v8);
  swift_retain();
  v4;
  if (swift_getEnumCaseMultiPayload(v7, v9) == 1)
  {
    uint64_t v10 = type metadata accessor for MLHandActionClassifier.DataSource(0);
    unsigned int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload(v7, v10);
    switch(EnumCaseMultiPayload)
    {
      case 0u:
        uint64_t v160 = v10;
        uint64_t v13 = type metadata accessor for URL(0);
        uint64_t v167 = v9;
        uint64_t v14 = *(void (**)(char *, char *, uint64_t))(*(void *)(v13 - 8) + 16);
        v14(v6, v7, v13);
        uint64_t v15 = (int *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (at: URL, annotationFile: URL, videoColumn: String, labelColumn: String, startTimeColumn: String?, endTimeColumn: String?));
        v14(&v6[v15[12]], &v7[v15[12]], v13);
        uint64_t v16 = v15[16];
        *(void *)&v6[v16] = *(void *)&v7[v16];
        uint64_t v17 = *(void *)&v7[v16 + 8];
        *(void *)&v6[v16 + 8] = v17;
        uint64_t v18 = v15[20];
        *(void *)&v6[v18] = *(void *)&v7[v18];
        uint64_t v19 = *(void *)&v7[v18 + 8];
        *(void *)&v6[v18 + 8] = v19;
        uint64_t v20 = v15[24];
        *(void *)&v6[v20] = *(void *)&v7[v20];
        uint64_t v21 = *(void *)&v7[v20 + 8];
        *(void *)&v6[v20 + 8] = v21;
        uint64_t v22 = v15[28];
        *(void *)&v6[v22] = *(void *)&v7[v22];
        uint64_t v23 = *(void *)&v7[v22 + 8];
        *(void *)&v6[v22 + 8] = v23;
        swift_bridgeObjectRetain(v17);
        LOBYTE(v17) = v19;
        uint64_t v10 = v160;
        swift_bridgeObjectRetain(v17);
        char v24 = v21;
        uint64_t v9 = v167;
        goto LABEL_10;
      case 1u:
      case 2u:
        uint64_t v11 = type metadata accessor for URL(0);
        (*(void (**)(char *, char *, uint64_t))(*(void *)(v11 - 8) + 16))(v6, v7, v11);
        goto LABEL_14;
      case 3u:
        uint64_t v161 = v10;
        uint64_t v25 = *(void *)v7;
        char v26 = v7[8];
        outlined copy of Result<_DataTable, Error>(*(void *)v7, v26);
        *(void *)uint64_t v6 = v25;
        v6[8] = v26;
        *((void *)v6 + 2) = *((void *)v7 + 2);
        uint64_t v27 = *((void *)v7 + 3);
        *((void *)v6 + 3) = v27;
        *((void *)v6 + 4) = *((void *)v7 + 4);
        uint64_t v28 = *((void *)v7 + 5);
        *((void *)v6 + 5) = v28;
        *((void *)v6 + 6) = *((void *)v7 + 6);
        uint64_t v23 = *((void *)v7 + 7);
        *((void *)v6 + 7) = v23;
        goto LABEL_9;
      case 4u:
        uint64_t v162 = v10;
        uint64_t v29 = *(void *)v7;
        char v30 = v7[8];
        outlined copy of Result<_DataTable, Error>(*(void *)v7, v30);
        *(void *)uint64_t v6 = v29;
        v6[8] = v30;
        *((void *)v6 + 2) = *((void *)v7 + 2);
        uint64_t v31 = *((void *)v7 + 3);
        *((void *)v6 + 3) = v31;
        *((void *)v6 + 4) = *((void *)v7 + 4);
        uint64_t v32 = *((void *)v7 + 5);
        *((void *)v6 + 5) = v32;
        *((void *)v6 + 6) = *((void *)v7 + 6);
        uint64_t v33 = *((void *)v7 + 7);
        *((void *)v6 + 7) = v33;
        *((void *)v6 + 8) = *((void *)v7 + 8);
        uint64_t v168 = v9;
        uint64_t v34 = *((void *)v7 + 9);
        *((void *)v6 + 9) = v34;
        goto LABEL_12;
      case 5u:
        uint64_t v35 = type metadata accessor for DataFrame(0);
        (*(void (**)(char *, char *, uint64_t))(*(void *)(v35 - 8) + 16))(v6, v7, v35);
        uint64_t v36 = (int *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (DataFrame, sessionIdColumn: String, labelColumn: String, featureColumn: String));
        uint64_t v37 = v36[12];
        *(void *)&v6[v37] = *(void *)&v7[v37];
        uint64_t v27 = *(void *)&v7[v37 + 8];
        *(void *)&v6[v37 + 8] = v27;
        uint64_t v38 = v36[16];
        *(void *)&v6[v38] = *(void *)&v7[v38];
        uint64_t v161 = v10;
        uint64_t v28 = *(void *)&v7[v38 + 8];
        *(void *)&v6[v38 + 8] = v28;
        uint64_t v39 = v36[20];
        *(void *)&v6[v39] = *(void *)&v7[v39];
        uint64_t v23 = *(void *)&v7[v39 + 8];
        *(void *)&v6[v39 + 8] = v23;
LABEL_9:
        swift_bridgeObjectRetain(v27);
        char v24 = v28;
        uint64_t v10 = v161;
LABEL_10:
        swift_bridgeObjectRetain(v24);
        char v40 = v23;
        break;
      case 6u:
        uint64_t v41 = type metadata accessor for DataFrame(0);
        (*(void (**)(char *, char *, uint64_t))(*(void *)(v41 - 8) + 16))(v6, v7, v41);
        uint64_t v42 = (int *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (DataFrame, videoColumn: String, labelColumn: String, startTimeColumn: String?, endTimeColumn: String?));
        uint64_t v43 = v42[12];
        *(void *)&v6[v43] = *(void *)&v7[v43];
        uint64_t v31 = *(void *)&v7[v43 + 8];
        *(void *)&v6[v43 + 8] = v31;
        uint64_t v44 = v42[16];
        *(void *)&v6[v44] = *(void *)&v7[v44];
        uint64_t v162 = v10;
        uint64_t v32 = *(void *)&v7[v44 + 8];
        *(void *)&v6[v44 + 8] = v32;
        uint64_t v45 = v42[20];
        *(void *)&v6[v45] = *(void *)&v7[v45];
        uint64_t v33 = *(void *)&v7[v45 + 8];
        *(void *)&v6[v45 + 8] = v33;
        uint64_t v46 = v42[24];
        *(void *)&v6[v46] = *(void *)&v7[v46];
        uint64_t v168 = v9;
        uint64_t v34 = *(void *)&v7[v46 + 8];
        *(void *)&v6[v46 + 8] = v34;
LABEL_12:
        swift_bridgeObjectRetain(v31);
        char v47 = v32;
        uint64_t v10 = v162;
        swift_bridgeObjectRetain(v47);
        swift_bridgeObjectRetain(v33);
        char v40 = v34;
        uint64_t v9 = v168;
        break;
    }
    swift_bridgeObjectRetain(v40);
LABEL_14:
    uint64_t v12 = a2;
    swift_storeEnumTagMultiPayload(v6, v10, EnumCaseMultiPayload);
    swift_storeEnumTagMultiPayload(v6, v9, 1);
  }
  else
  {
    memcpy(v6, v7, *(void *)(*(void *)(v9 - 8) + 64));
    uint64_t v12 = a2;
  }
  uint64_t v48 = (int *)type metadata accessor for MLHandActionClassifier.ModelParameters(0);
  *(void *)&v6[v48[5]] = *(void *)&v7[v48[5]];
  *(void *)&v6[v48[6]] = *(void *)&v7[v48[6]];
  *(void *)&v6[v48[7]] = *(void *)&v7[v48[7]];
  *(void *)&v6[v48[8]] = *(void *)&v7[v48[8]];
  *(void *)&v6[v48[10]] = *(void *)&v7[v48[10]];
  uint64_t v49 = v156[8];
  uint64_t v50 = a1;
  uint64_t v51 = (void *)((char *)a1 + v49);
  uint64_t v52 = (void *)((char *)v12 + v49);
  uint64_t v155 = type metadata accessor for MLClassifierMetrics.Contents(0);
  unsigned int v53 = swift_getEnumCaseMultiPayload(v52, v155);
  if (v53 == 2)
  {
    uint64_t v60 = *v52;
    swift_errorRetain(v60);
    *uint64_t v51 = v60;
  }
  else if (v53 == 1)
  {
    *uint64_t v51 = *v52;
    uint64_t v163 = type metadata accessor for MLClassifierMetrics.Precomputed(0);
    uint64_t v54 = v51;
    uint64_t v55 = *(int *)(v163 + 20);
    uint64_t v151 = (char *)v54 + v55;
    uint64_t v56 = type metadata accessor for DataFrame(0);
    uint64_t v57 = *(void (**)(char *, char *, uint64_t))(*(void *)(v56 - 8) + 16);
    uint64_t v58 = (char *)v52 + v55;
    uint64_t v51 = v54;
    uint64_t v50 = a1;
    v57(v151, v58, v56);
    uint64_t v59 = v56;
    uint64_t v12 = a2;
    v57((char *)v51 + *(int *)(v163 + 24), (char *)v52 + *(int *)(v163 + 24), v59);
    unsigned int v53 = 1;
  }
  else
  {
    uint64_t v61 = v51;
    uint64_t v62 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Either<ClassificationMetrics<String>, ClassificationMetrics<Int>>);
    int v63 = swift_getEnumCaseMultiPayload(v52, v62);
    BOOL v64 = v63 == 1;
    uint64_t v65 = &demangling cache variable for type metadata for ClassificationMetrics<String>;
    if (v63 == 1) {
      uint64_t v65 = &demangling cache variable for type metadata for ClassificationMetrics<Int>;
    }
    uint64_t v66 = __swift_instantiateConcreteTypeFromMangledName(v65);
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(void *)(v66 - 8) + 16))(v61, v52, v66);
    uint64_t v67 = v62;
    uint64_t v51 = v61;
    swift_storeEnumTagMultiPayload(v61, v67, v64);
    uint64_t v50 = a1;
    uint64_t v12 = a2;
  }
  swift_storeEnumTagMultiPayload(v51, v155, v53);
  uint64_t v68 = v156[9];
  int64_t v69 = (void *)((char *)v50 + v68);
  unsigned int v70 = (void *)((char *)v12 + v68);
  unsigned int v71 = swift_getEnumCaseMultiPayload(v70, v155);
  if (v71 == 2)
  {
    uint64_t v79 = *v70;
    swift_errorRetain(v79);
    uint64_t v78 = 2;
    uint64_t *v69 = v79;
    uint64_t v76 = v50;
  }
  else if (v71 == 1)
  {
    uint64_t *v69 = *v70;
    uint64_t v164 = type metadata accessor for MLClassifierMetrics.Precomputed(0);
    uint64_t v72 = *(int *)(v164 + 20);
    uint64_t v169 = (char *)v69 + v72;
    uint64_t v73 = type metadata accessor for DataFrame(0);
    uint64_t v74 = *(void (**)(char *, char *, uint64_t))(*(void *)(v73 - 8) + 16);
    uint64_t v75 = (char *)v70 + v72;
    uint64_t v76 = a1;
    v74(v169, v75, v73);
    uint64_t v77 = v73;
    uint64_t v12 = a2;
    v74((char *)v69 + *(int *)(v164 + 24), (char *)v70 + *(int *)(v164 + 24), v77);
    uint64_t v78 = 1;
  }
  else
  {
    unsigned int v80 = v71;
    uint64_t v81 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Either<ClassificationMetrics<String>, ClassificationMetrics<Int>>);
    int v82 = swift_getEnumCaseMultiPayload(v70, v81);
    BOOL v83 = v82 == 1;
    uint64_t v84 = &demangling cache variable for type metadata for ClassificationMetrics<String>;
    if (v82 == 1) {
      uint64_t v84 = &demangling cache variable for type metadata for ClassificationMetrics<Int>;
    }
    uint64_t v85 = __swift_instantiateConcreteTypeFromMangledName(v84);
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(void *)(v85 - 8) + 16))(v69, v70, v85);
    swift_storeEnumTagMultiPayload(v69, v81, v83);
    uint64_t v76 = a1;
    uint64_t v12 = a2;
    uint64_t v78 = v80;
  }
  swift_storeEnumTagMultiPayload(v69, v155, v78);
  uint64_t v86 = a3[5];
  uint64_t v87 = *(void **)((char *)v12 + v86);
  *(void *)((char *)v76 + v86) = v87;
  uint64_t v88 = a3[6];
  uint64_t v89 = (char *)v76 + v88;
  uint64_t v90 = (char *)v12 + v88;
  uint64_t v91 = v87;
  uint64_t v92 = type metadata accessor for MLHandPoseClassifier.ModelParameters.ValidationData(0);
  v91;
  if (swift_getEnumCaseMultiPayload(v90, v92) == 1)
  {
    uint64_t v157 = type metadata accessor for MLHandPoseClassifier.DataSource(0);
    unsigned int v165 = swift_getEnumCaseMultiPayload(v90, v157);
    switch(v165)
    {
      case 0u:
        uint64_t v170 = v92;
        uint64_t v94 = type metadata accessor for URL(0);
        uint64_t v95 = *(void (**)(char *, char *, uint64_t))(*(void *)(v94 - 8) + 16);
        v95(v89, v90, v94);
        char v96 = (int *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (at: URL, annotationFile: URL, imageColumn: String, labelColumn: String));
        v95(&v89[v96[12]], &v90[v96[12]], v94);
        uint64_t v76 = a1;
        uint64_t v97 = v96[16];
        *(void *)&v89[v97] = *(void *)&v90[v97];
        uint64_t v98 = *(void *)&v90[v97 + 8];
        *(void *)&v89[v97 + 8] = v98;
        uint64_t v99 = v96[20];
        uint64_t v12 = a2;
        *(void *)&v89[v99] = *(void *)&v90[v99];
        goto LABEL_39;
      case 1u:
      case 2u:
        uint64_t v93 = type metadata accessor for URL(0);
        (*(void (**)(char *, char *, uint64_t))(*(void *)(v93 - 8) + 16))(v89, v90, v93);
        goto LABEL_42;
      case 3u:
        uint64_t v171 = v92;
        uint64_t v100 = *(void *)v90;
        char v101 = v90[8];
        outlined copy of Result<_DataTable, Error>(*(void *)v90, v101);
        *(void *)uint64_t v89 = v100;
        v89[8] = v101;
        *((void *)v89 + 2) = *((void *)v90 + 2);
        uint64_t v102 = *((void *)v90 + 3);
        *((void *)v89 + 3) = v102;
        *((void *)v89 + 4) = *((void *)v90 + 4);
        uint64_t v103 = *((void *)v90 + 5);
        *((void *)v89 + 5) = v103;
        *((void *)v89 + 6) = *((void *)v90 + 6);
        uint64_t v104 = *((void *)v90 + 7);
        *((void *)v89 + 7) = v104;
        goto LABEL_37;
      case 4u:
        uint64_t v170 = v92;
        uint64_t v105 = *(void *)v90;
        char v106 = v90[8];
        outlined copy of Result<_DataTable, Error>(*(void *)v90, v106);
        *(void *)uint64_t v89 = v105;
        v89[8] = v106;
        uint64_t v12 = a2;
        *((void *)v89 + 2) = *((void *)v90 + 2);
        uint64_t v98 = *((void *)v90 + 3);
        *((void *)v89 + 3) = v98;
        *((void *)v89 + 4) = *((void *)v90 + 4);
        uint64_t v107 = *((void *)v90 + 5);
        *((void *)v89 + 5) = v107;
        goto LABEL_40;
      case 5u:
        uint64_t v108 = type metadata accessor for DataFrame(0);
        (*(void (**)(char *, char *, uint64_t))(*(void *)(v108 - 8) + 16))(v89, v90, v108);
        char v109 = (int *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (DataFrame, sessionIdColumn: String, labelColumn: String, featureColumn: String));
        uint64_t v110 = v109[12];
        *(void *)&v89[v110] = *(void *)&v90[v110];
        uint64_t v102 = *(void *)&v90[v110 + 8];
        *(void *)&v89[v110 + 8] = v102;
        uint64_t v111 = v109[16];
        *(void *)&v89[v111] = *(void *)&v90[v111];
        uint64_t v171 = v92;
        uint64_t v103 = *(void *)&v90[v111 + 8];
        *(void *)&v89[v111 + 8] = v103;
        uint64_t v112 = v109[20];
        *(void *)&v89[v112] = *(void *)&v90[v112];
        uint64_t v104 = *(void *)&v90[v112 + 8];
        *(void *)&v89[v112 + 8] = v104;
LABEL_37:
        swift_bridgeObjectRetain(v102);
        char v113 = v103;
        uint64_t v92 = v171;
        swift_bridgeObjectRetain(v113);
        char v114 = v104;
        uint64_t v12 = a2;
        break;
      case 6u:
        uint64_t v115 = type metadata accessor for DataFrame(0);
        (*(void (**)(char *, char *, uint64_t))(*(void *)(v115 - 8) + 16))(v89, v90, v115);
        uint64_t v116 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (DataFrame, imageColumn: String, labelColumn: String));
        uint64_t v117 = *(int *)(v116 + 48);
        *(void *)&v89[v117] = *(void *)&v90[v117];
        uint64_t v98 = *(void *)&v90[v117 + 8];
        *(void *)&v89[v117 + 8] = v98;
        uint64_t v99 = *(int *)(v116 + 64);
        *(void *)&v89[v99] = *(void *)&v90[v99];
        uint64_t v170 = v92;
LABEL_39:
        uint64_t v107 = *(void *)&v90[v99 + 8];
        *(void *)&v89[v99 + 8] = v107;
LABEL_40:
        swift_bridgeObjectRetain(v98);
        char v114 = v107;
        uint64_t v92 = v170;
        break;
    }
    swift_bridgeObjectRetain(v114);
LABEL_42:
    swift_storeEnumTagMultiPayload(v89, v157, v165);
    swift_storeEnumTagMultiPayload(v89, v92, 1);
  }
  else
  {
    memcpy(v89, v90, *(void *)(*(void *)(v92 - 8) + 64));
  }
  uint64_t v118 = (int *)type metadata accessor for MLHandPoseClassifier.ModelParameters(0);
  *(void *)&v89[v118[5]] = *(void *)&v90[v118[5]];
  *(void *)&v89[v118[6]] = *(void *)&v90[v118[6]];
  *(void *)&v89[v118[7]] = *(void *)&v90[v118[7]];
  uint64_t v119 = a3[7];
  char v120 = (void *)((char *)v76 + v119);
  unint64_t v121 = (void *)((char *)v12 + v119);
  unsigned int v122 = swift_getEnumCaseMultiPayload(v121, v155);
  if (v122 == 2)
  {
    uint64_t v128 = *v121;
    swift_errorRetain(v128);
    *char v120 = v128;
  }
  else if (v122 == 1)
  {
    *char v120 = *v121;
    uint64_t v158 = type metadata accessor for MLClassifierMetrics.Precomputed(0);
    uint64_t v123 = *(int *)(v158 + 20);
    unsigned int v166 = (char *)v120 + v123;
    uint64_t v124 = type metadata accessor for DataFrame(0);
    BOOL v125 = (char *)v121 + v123;
    uint64_t v126 = *(void (**)(char *, char *, uint64_t))(*(void *)(v124 - 8) + 16);
    v126(v166, v125, v124);
    uint64_t v127 = v124;
    uint64_t v12 = a2;
    v126((char *)v120 + *(int *)(v158 + 24), (char *)v121 + *(int *)(v158 + 24), v127);
    uint64_t v76 = a1;
  }
  else
  {
    uint64_t v129 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Either<ClassificationMetrics<String>, ClassificationMetrics<Int>>);
    int v130 = swift_getEnumCaseMultiPayload(v121, v129);
    BOOL v131 = v130 == 1;
    uint64_t v132 = &demangling cache variable for type metadata for ClassificationMetrics<String>;
    if (v130 == 1) {
      uint64_t v132 = &demangling cache variable for type metadata for ClassificationMetrics<Int>;
    }
    uint64_t v133 = __swift_instantiateConcreteTypeFromMangledName(v132);
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(void *)(v133 - 8) + 16))(v120, v121, v133);
    swift_storeEnumTagMultiPayload(v120, v129, v131);
    uint64_t v76 = a1;
    uint64_t v12 = a2;
  }
  swift_storeEnumTagMultiPayload(v120, v155, v122);
  uint64_t v134 = a3[8];
  uint64_t v135 = (char *)v76 + v134;
  uint64_t v136 = (void *)((char *)v12 + v134);
  unsigned int v137 = swift_getEnumCaseMultiPayload((char *)v136, v155);
  if (v137 == 2)
  {
    uint64_t v144 = *v136;
    swift_errorRetain(*v136);
    *(void *)uint64_t v135 = v144;
  }
  else if (v137 == 1)
  {
    *(void *)uint64_t v135 = *v136;
    uint64_t v173 = type metadata accessor for MLClassifierMetrics.Precomputed(0);
    uint64_t v138 = (char *)v136;
    uint64_t v139 = *(int *)(v173 + 20);
    uint64_t v153 = &v135[v139];
    uint64_t v140 = type metadata accessor for DataFrame(0);
    int v141 = &v138[v139];
    BOOL v142 = *(void (**)(char *, char *, uint64_t))(*(void *)(v140 - 8) + 16);
    v142(v153, v141, v140);
    uint64_t v143 = v140;
    uint64_t v76 = a1;
    v142(&v135[*(int *)(v173 + 24)], &v138[*(int *)(v173 + 24)], v143);
  }
  else
  {
    uint64_t v145 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Either<ClassificationMetrics<String>, ClassificationMetrics<Int>>);
    int v146 = swift_getEnumCaseMultiPayload((char *)v136, v145);
    uint64_t v174 = v136;
    BOOL v147 = v146 == 1;
    unint64_t v148 = &demangling cache variable for type metadata for ClassificationMetrics<String>;
    if (v146 == 1) {
      unint64_t v148 = &demangling cache variable for type metadata for ClassificationMetrics<Int>;
    }
    uint64_t v149 = __swift_instantiateConcreteTypeFromMangledName(v148);
    (*(void (**)(char *, void *, uint64_t))(*(void *)(v149 - 8) + 16))(v135, v174, v149);
    swift_storeEnumTagMultiPayload(v135, v145, v147);
  }
  swift_storeEnumTagMultiPayload(v135, v155, v137);
  return v76;
}

void *assignWithCopy for MLHandPoseClassifier(void *a1, void *a2, int *a3)
{
  uint64_t v3 = a2;
  uint64_t v5 = *a2;
  uint64_t v6 = *a1;
  *a1 = *a2;
  swift_bridgeObjectRetain(v5);
  swift_bridgeObjectRelease(v6);
  a1[1] = a2[1];
  swift_retain();
  swift_release();
  uint64_t v7 = (void *)a2[2];
  char v8 = (void *)a1[2];
  a1[2] = v7;
  v7;

  uint64_t v9 = type metadata accessor for MLHandActionClassifier(0);
  uint64_t v10 = *(int *)(v9 + 28);
  uint64_t v11 = (char *)a1 + v10;
  uint64_t v12 = (char *)a2 + v10;
  uint64_t v142 = v9;
  if (a1 != a2)
  {
    outlined destroy of MLActivityClassifier.ModelParameters((uint64_t)v11, type metadata accessor for MLHandActionClassifier.ModelParameters.ValidationData);
    uint64_t v13 = type metadata accessor for MLHandActionClassifier.ModelParameters.ValidationData(0);
    if (swift_getEnumCaseMultiPayload(v12, v13) == 1)
    {
      uint64_t v140 = v13;
      uint64_t v14 = type metadata accessor for MLHandActionClassifier.DataSource(0);
      unsigned int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload(v12, v14);
      switch(EnumCaseMultiPayload)
      {
        case 0u:
          uint64_t v162 = type metadata accessor for URL(0);
          uint64_t v16 = *(void (**)(char *, char *, uint64_t))(*(void *)(v162 - 8) + 16);
          v16(v11, v12, v162);
          uint64_t v156 = v14;
          uint64_t v17 = (int *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (at: URL, annotationFile: URL, videoColumn: String, labelColumn: String, startTimeColumn: String?, endTimeColumn: String?));
          v16(&v11[v17[12]], &v12[v17[12]], v162);
          uint64_t v3 = a2;
          uint64_t v18 = v17[16];
          *(void *)&v11[v18] = *(void *)&v12[v18];
          uint64_t v19 = *(void *)&v12[v18 + 8];
          *(void *)&v11[v18 + 8] = v19;
          uint64_t v20 = v17[20];
          *(void *)&v11[v20] = *(void *)&v12[v20];
          uint64_t v163 = *(void *)&v12[v20 + 8];
          *(void *)&v11[v20 + 8] = v163;
          uint64_t v21 = v17[24];
          *(void *)&v11[v21] = *(void *)&v12[v21];
          uint64_t v137 = *(void *)&v12[v21 + 8];
          *(void *)&v11[v21 + 8] = v137;
          uint64_t v22 = v17[28];
          *(void *)&v11[v22] = *(void *)&v12[v22];
          goto LABEL_11;
        case 1u:
        case 2u:
          uint64_t v15 = type metadata accessor for URL(0);
          (*(void (**)(char *, char *, uint64_t))(*(void *)(v15 - 8) + 16))(v11, v12, v15);
          goto LABEL_14;
        case 3u:
          uint64_t v157 = v14;
          uint64_t v23 = *(void *)v12;
          char v164 = v12[8];
          outlined copy of Result<_DataTable, Error>(*(void *)v12, v164);
          *(void *)uint64_t v11 = v23;
          v11[8] = v164;
          *((void *)v11 + 2) = *((void *)v12 + 2);
          uint64_t v24 = *((void *)v12 + 3);
          *((void *)v11 + 3) = v24;
          *((void *)v11 + 4) = *((void *)v12 + 4);
          uint64_t v25 = *((void *)v12 + 5);
          *((void *)v11 + 5) = v25;
          *((void *)v11 + 6) = *((void *)v12 + 6);
          uint64_t v165 = *((void *)v12 + 7);
          *((void *)v11 + 7) = v165;
          swift_bridgeObjectRetain(v24);
          LOBYTE(v24) = v25;
          uint64_t v14 = v157;
          swift_bridgeObjectRetain(v24);
          char v26 = v165;
          goto LABEL_13;
        case 4u:
          uint64_t v158 = v14;
          uint64_t v27 = *(void *)v12;
          char v166 = v12[8];
          outlined copy of Result<_DataTable, Error>(*(void *)v12, v166);
          *(void *)uint64_t v11 = v27;
          v11[8] = v166;
          *((void *)v11 + 2) = *((void *)v12 + 2);
          uint64_t v28 = *((void *)v12 + 3);
          *((void *)v11 + 3) = v28;
          *((void *)v11 + 4) = *((void *)v12 + 4);
          uint64_t v29 = *((void *)v12 + 5);
          *((void *)v11 + 5) = v29;
          *((void *)v11 + 6) = *((void *)v12 + 6);
          uint64_t v167 = *((void *)v12 + 7);
          *((void *)v11 + 7) = v167;
          *((void *)v11 + 8) = *((void *)v12 + 8);
          uint64_t v138 = *((void *)v12 + 9);
          *((void *)v11 + 9) = v138;
          swift_bridgeObjectRetain(v28);
          LOBYTE(v28) = v29;
          uint64_t v14 = v158;
          swift_bridgeObjectRetain(v28);
          swift_bridgeObjectRetain(v167);
          char v26 = v138;
          goto LABEL_13;
        case 5u:
          uint64_t v30 = type metadata accessor for DataFrame(0);
          (*(void (**)(char *, char *, uint64_t))(*(void *)(v30 - 8) + 16))(v11, v12, v30);
          uint64_t v31 = (int *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (DataFrame, sessionIdColumn: String, labelColumn: String, featureColumn: String));
          uint64_t v32 = v31[12];
          *(void *)&v11[v32] = *(void *)&v12[v32];
          uint64_t v33 = *(void *)&v12[v32 + 8];
          *(void *)&v11[v32 + 8] = v33;
          uint64_t v34 = v31[16];
          *(void *)&v11[v34] = *(void *)&v12[v34];
          uint64_t v168 = *(void *)&v12[v34 + 8];
          *(void *)&v11[v34 + 8] = v168;
          uint64_t v35 = v31[20];
          *(void *)&v11[v35] = *(void *)&v12[v35];
          uint64_t v156 = v14;
          uint64_t v36 = *(void *)&v12[v35 + 8];
          *(void *)&v11[v35 + 8] = v36;
          swift_bridgeObjectRetain(v33);
          char v37 = v168;
          goto LABEL_12;
        case 6u:
          uint64_t v38 = type metadata accessor for DataFrame(0);
          (*(void (**)(char *, char *, uint64_t))(*(void *)(v38 - 8) + 16))(v11, v12, v38);
          uint64_t v39 = (int *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (DataFrame, videoColumn: String, labelColumn: String, startTimeColumn: String?, endTimeColumn: String?));
          uint64_t v40 = v39[12];
          *(void *)&v11[v40] = *(void *)&v12[v40];
          uint64_t v19 = *(void *)&v12[v40 + 8];
          *(void *)&v11[v40 + 8] = v19;
          uint64_t v41 = v39[16];
          *(void *)&v11[v41] = *(void *)&v12[v41];
          uint64_t v163 = *(void *)&v12[v41 + 8];
          *(void *)&v11[v41 + 8] = v163;
          uint64_t v42 = v39[20];
          *(void *)&v11[v42] = *(void *)&v12[v42];
          uint64_t v137 = *(void *)&v12[v42 + 8];
          *(void *)&v11[v42 + 8] = v137;
          uint64_t v22 = v39[24];
          *(void *)&v11[v22] = *(void *)&v12[v22];
          uint64_t v156 = v14;
LABEL_11:
          uint64_t v36 = *(void *)&v12[v22 + 8];
          *(void *)&v11[v22 + 8] = v36;
          swift_bridgeObjectRetain(v19);
          swift_bridgeObjectRetain(v163);
          char v37 = v137;
LABEL_12:
          swift_bridgeObjectRetain(v37);
          char v26 = v36;
          uint64_t v14 = v156;
LABEL_13:
          swift_bridgeObjectRetain(v26);
LABEL_14:
          swift_storeEnumTagMultiPayload(v11, v14, EnumCaseMultiPayload);
          swift_storeEnumTagMultiPayload(v11, v140, 1);
          break;
      }
    }
    else
    {
      memcpy(v11, v12, *(void *)(*(void *)(v13 - 8) + 64));
    }
    uint64_t v9 = v142;
  }
  uint64_t v43 = (int *)type metadata accessor for MLHandActionClassifier.ModelParameters(0);
  *(void *)&v11[v43[5]] = *(void *)&v12[v43[5]];
  *(void *)&v11[v43[6]] = *(void *)&v12[v43[6]];
  *(void *)&v11[v43[7]] = *(void *)&v12[v43[7]];
  *(void *)&v11[v43[8]] = *(void *)&v12[v43[8]];
  *(void *)&v11[v43[10]] = *(void *)&v12[v43[10]];
  int v141 = a1;
  if (a1 != v3)
  {
    uint64_t v44 = *(int *)(v9 + 32);
    uint64_t v45 = (char *)a1 + v44;
    uint64_t v46 = (char *)v3 + v44;
    outlined destroy of MLActivityClassifier.ModelParameters((uint64_t)v45, type metadata accessor for MLClassifierMetrics.Contents);
    uint64_t v148 = type metadata accessor for MLClassifierMetrics.Contents(0);
    unsigned int v47 = swift_getEnumCaseMultiPayload(v46, v148);
    if (v47 == 2)
    {
      uint64_t v53 = *(void *)v46;
      swift_errorRetain(*(void *)v46);
      *(void *)uint64_t v45 = v53;
      uint64_t v3 = a2;
    }
    else if (v47 == 1)
    {
      *(void *)uint64_t v45 = *(void *)v46;
      uint64_t v159 = type metadata accessor for MLClassifierMetrics.Precomputed(0);
      uint64_t v48 = *(int *)(v159 + 20);
      uint64_t v139 = &v45[v48];
      uint64_t v49 = type metadata accessor for DataFrame(0);
      uint64_t v50 = *(void (**)(char *, char *, uint64_t))(*(void *)(v49 - 8) + 16);
      uint64_t v51 = &v46[v48];
      uint64_t v3 = a2;
      v50(v139, v51, v49);
      uint64_t v52 = v49;
      a1 = v141;
      v50(&v45[*(int *)(v159 + 24)], &v46[*(int *)(v159 + 24)], v52);
      unsigned int v47 = 1;
    }
    else
    {
      uint64_t v160 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Either<ClassificationMetrics<String>, ClassificationMetrics<Int>>);
      int v54 = swift_getEnumCaseMultiPayload(v46, v160);
      BOOL v55 = v54 == 1;
      uint64_t v56 = &demangling cache variable for type metadata for ClassificationMetrics<String>;
      if (v54 == 1) {
        uint64_t v56 = &demangling cache variable for type metadata for ClassificationMetrics<Int>;
      }
      uint64_t v57 = __swift_instantiateConcreteTypeFromMangledName(v56);
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v57 - 8) + 16))(v45, v46, v57);
      swift_storeEnumTagMultiPayload(v45, v160, v55);
      a1 = v141;
    }
    swift_storeEnumTagMultiPayload(v45, v148, v47);
    uint64_t v58 = *(int *)(v142 + 36);
    uint64_t v59 = (char *)a1 + v58;
    uint64_t v60 = (char *)v3 + v58;
    outlined destroy of MLActivityClassifier.ModelParameters((uint64_t)v59, type metadata accessor for MLClassifierMetrics.Contents);
    unsigned int v61 = swift_getEnumCaseMultiPayload(v60, v148);
    if (v61 == 2)
    {
      uint64_t v67 = *(void *)v60;
      swift_errorRetain(*(void *)v60);
      *(void *)uint64_t v59 = v67;
    }
    else
    {
      if (v61 == 1)
      {
        *(void *)uint64_t v59 = *(void *)v60;
        uint64_t v143 = type metadata accessor for MLClassifierMetrics.Precomputed(0);
        uint64_t v62 = *(int *)(v143 + 20);
        uint64_t v169 = &v59[v62];
        uint64_t v63 = type metadata accessor for DataFrame(0);
        BOOL v64 = *(void (**)(char *, char *, uint64_t))(*(void *)(v63 - 8) + 16);
        uint64_t v65 = &v60[v62];
        a1 = v141;
        v64(v169, v65, v63);
        uint64_t v66 = v63;
        uint64_t v3 = a2;
        v64(&v59[*(int *)(v143 + 24)], &v60[*(int *)(v143 + 24)], v66);
        unsigned int v61 = 1;
LABEL_32:
        swift_storeEnumTagMultiPayload(v59, v148, v61);
        goto LABEL_33;
      }
      uint64_t v144 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Either<ClassificationMetrics<String>, ClassificationMetrics<Int>>);
      int v68 = swift_getEnumCaseMultiPayload(v60, v144);
      BOOL v69 = v68 == 1;
      unsigned int v70 = &demangling cache variable for type metadata for ClassificationMetrics<String>;
      if (v68 == 1) {
        unsigned int v70 = &demangling cache variable for type metadata for ClassificationMetrics<Int>;
      }
      uint64_t v71 = __swift_instantiateConcreteTypeFromMangledName(v70);
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v71 - 8) + 16))(v59, v60, v71);
      swift_storeEnumTagMultiPayload(v59, v144, v69);
    }
    uint64_t v3 = a2;
    goto LABEL_32;
  }
LABEL_33:
  uint64_t v72 = a3[5];
  uint64_t v73 = *(void **)((char *)v3 + v72);
  uint64_t v74 = *(void **)((char *)a1 + v72);
  *(void *)((char *)a1 + v72) = v73;
  v73;
  uint64_t v75 = v74;
  uint64_t v76 = a2;

  uint64_t v77 = a3[6];
  uint64_t v78 = (char *)a1 + v77;
  uint64_t v79 = (char *)a2 + v77;
  if (a1 != a2)
  {
    outlined destroy of MLActivityClassifier.ModelParameters((uint64_t)v78, type metadata accessor for MLHandPoseClassifier.ModelParameters.ValidationData);
    uint64_t v80 = type metadata accessor for MLHandPoseClassifier.ModelParameters.ValidationData(0);
    if (swift_getEnumCaseMultiPayload(v79, v80) == 1)
    {
      uint64_t v145 = type metadata accessor for MLHandPoseClassifier.DataSource(0);
      unsigned int v149 = swift_getEnumCaseMultiPayload(v79, v145);
      switch(v149)
      {
        case 0u:
          uint64_t v82 = type metadata accessor for URL(0);
          uint64_t v161 = *(void (**)(char *, char *, uint64_t))(*(void *)(v82 - 8) + 16);
          v161(v78, v79, v82);
          BOOL v83 = (int *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (at: URL, annotationFile: URL, imageColumn: String, labelColumn: String));
          v161(&v78[v83[12]], &v79[v83[12]], v82);
          uint64_t v84 = v83[16];
          *(void *)&v78[v84] = *(void *)&v79[v84];
          uint64_t v85 = *(void *)&v79[v84 + 8];
          *(void *)&v78[v84 + 8] = v85;
          uint64_t v86 = v83[20];
          a1 = v141;
          goto LABEL_44;
        case 1u:
        case 2u:
          uint64_t v81 = type metadata accessor for URL(0);
          (*(void (**)(char *, char *, uint64_t))(*(void *)(v81 - 8) + 16))(v78, v79, v81);
          goto LABEL_47;
        case 3u:
          uint64_t v87 = *(void *)v79;
          char v88 = v79[8];
          outlined copy of Result<_DataTable, Error>(*(void *)v79, v88);
          *(void *)uint64_t v78 = v87;
          v78[8] = v88;
          *((void *)v78 + 2) = *((void *)v79 + 2);
          uint64_t v89 = *((void *)v79 + 3);
          *((void *)v78 + 3) = v89;
          *((void *)v78 + 4) = *((void *)v79 + 4);
          uint64_t v90 = *((void *)v79 + 5);
          *((void *)v78 + 5) = v90;
          *((void *)v78 + 6) = *((void *)v79 + 6);
          uint64_t v91 = *((void *)v79 + 7);
          *((void *)v78 + 7) = v91;
          goto LABEL_42;
        case 4u:
          uint64_t v92 = *(void *)v79;
          char v93 = v79[8];
          outlined copy of Result<_DataTable, Error>(*(void *)v79, v93);
          *(void *)uint64_t v78 = v92;
          v78[8] = v93;
          a1 = v141;
          *((void *)v78 + 2) = *((void *)v79 + 2);
          uint64_t v85 = *((void *)v79 + 3);
          *((void *)v78 + 3) = v85;
          *((void *)v78 + 4) = *((void *)v79 + 4);
          uint64_t v94 = *((void *)v79 + 5);
          *((void *)v78 + 5) = v94;
          goto LABEL_45;
        case 5u:
          uint64_t v95 = type metadata accessor for DataFrame(0);
          (*(void (**)(char *, char *, uint64_t))(*(void *)(v95 - 8) + 16))(v78, v79, v95);
          char v96 = (int *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (DataFrame, sessionIdColumn: String, labelColumn: String, featureColumn: String));
          uint64_t v97 = v96[12];
          *(void *)&v78[v97] = *(void *)&v79[v97];
          uint64_t v89 = *(void *)&v79[v97 + 8];
          *(void *)&v78[v97 + 8] = v89;
          uint64_t v98 = v96[16];
          *(void *)&v78[v98] = *(void *)&v79[v98];
          uint64_t v90 = *(void *)&v79[v98 + 8];
          *(void *)&v78[v98 + 8] = v90;
          uint64_t v99 = v96[20];
          *(void *)&v78[v99] = *(void *)&v79[v99];
          uint64_t v91 = *(void *)&v79[v99 + 8];
          *(void *)&v78[v99 + 8] = v91;
LABEL_42:
          swift_bridgeObjectRetain(v89);
          char v100 = v90;
          uint64_t v76 = a2;
          swift_bridgeObjectRetain(v100);
          char v101 = v91;
          a1 = v141;
          break;
        case 6u:
          uint64_t v102 = type metadata accessor for DataFrame(0);
          (*(void (**)(char *, char *, uint64_t))(*(void *)(v102 - 8) + 16))(v78, v79, v102);
          uint64_t v103 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (DataFrame, imageColumn: String, labelColumn: String));
          uint64_t v104 = *(int *)(v103 + 48);
          *(void *)&v78[v104] = *(void *)&v79[v104];
          uint64_t v85 = *(void *)&v79[v104 + 8];
          *(void *)&v78[v104 + 8] = v85;
          uint64_t v86 = *(int *)(v103 + 64);
LABEL_44:
          *(void *)&v78[v86] = *(void *)&v79[v86];
          uint64_t v94 = *(void *)&v79[v86 + 8];
          *(void *)&v78[v86 + 8] = v94;
LABEL_45:
          swift_bridgeObjectRetain(v85);
          char v101 = v94;
          uint64_t v76 = a2;
          break;
      }
      swift_bridgeObjectRetain(v101);
LABEL_47:
      swift_storeEnumTagMultiPayload(v78, v145, v149);
      swift_storeEnumTagMultiPayload(v78, v80, 1);
    }
    else
    {
      memcpy(v78, v79, *(void *)(*(void *)(v80 - 8) + 64));
    }
  }
  uint64_t v105 = (int *)type metadata accessor for MLHandPoseClassifier.ModelParameters(0);
  *(void *)&v78[v105[5]] = *(void *)&v79[v105[5]];
  *(void *)&v78[v105[6]] = *(void *)&v79[v105[6]];
  *(void *)&v78[v105[7]] = *(void *)&v79[v105[7]];
  if (a1 != v76)
  {
    uint64_t v106 = a3[7];
    uint64_t v107 = (char *)a1 + v106;
    uint64_t v108 = (char *)v76 + v106;
    outlined destroy of MLActivityClassifier.ModelParameters((uint64_t)v107, type metadata accessor for MLClassifierMetrics.Contents);
    uint64_t v146 = type metadata accessor for MLClassifierMetrics.Contents(0);
    unsigned int v109 = swift_getEnumCaseMultiPayload(v108, v146);
    if (v109 == 2)
    {
      uint64_t v116 = *(void *)v108;
      swift_errorRetain(*(void *)v108);
      *(void *)uint64_t v107 = v116;
    }
    else
    {
      if (v109 == 1)
      {
        *(void *)uint64_t v107 = *(void *)v108;
        uint64_t v150 = type metadata accessor for MLClassifierMetrics.Precomputed(0);
        uint64_t v110 = *(int *)(v150 + 20);
        uint64_t v170 = &v107[v110];
        uint64_t v111 = type metadata accessor for DataFrame(0);
        uint64_t v112 = *(void (**)(char *, char *, uint64_t))(*(void *)(v111 - 8) + 16);
        char v113 = &v108[v110];
        a1 = v141;
        v112(v170, v113, v111);
        uint64_t v114 = v111;
        uint64_t v115 = a2;
        v112(&v107[*(int *)(v150 + 24)], &v108[*(int *)(v150 + 24)], v114);
        unsigned int v109 = 1;
LABEL_57:
        swift_storeEnumTagMultiPayload(v107, v146, v109);
        uint64_t v121 = a3[8];
        unsigned int v122 = (char *)a1 + v121;
        uint64_t v123 = (char *)v115 + v121;
        outlined destroy of MLActivityClassifier.ModelParameters((uint64_t)a1 + v121, type metadata accessor for MLClassifierMetrics.Contents);
        unsigned int v124 = swift_getEnumCaseMultiPayload(v123, v146);
        if (v124 == 2)
        {
          uint64_t v129 = *(void *)v123;
          swift_errorRetain(v129);
          *(void *)unsigned int v122 = v129;
        }
        else if (v124 == 1)
        {
          *(void *)unsigned int v122 = *(void *)v123;
          uint64_t v154 = type metadata accessor for MLClassifierMetrics.Precomputed(0);
          uint64_t v125 = *(int *)(v154 + 20);
          uint64_t v152 = &v122[v125];
          uint64_t v126 = type metadata accessor for DataFrame(0);
          uint64_t v127 = *(void (**)(char *, char *, uint64_t))(*(void *)(v126 - 8) + 16);
          uint64_t v128 = &v123[v125];
          a1 = v141;
          v127(v152, v128, v126);
          v127(&v122[*(int *)(v154 + 24)], &v123[*(int *)(v154 + 24)], v126);
          unsigned int v124 = 1;
        }
        else
        {
          uint64_t v130 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Either<ClassificationMetrics<String>, ClassificationMetrics<Int>>);
          int v131 = swift_getEnumCaseMultiPayload(v123, v130);
          uint64_t v155 = v123;
          BOOL v132 = v131 == 1;
          uint64_t v133 = &demangling cache variable for type metadata for ClassificationMetrics<String>;
          if (v131 == 1) {
            uint64_t v133 = &demangling cache variable for type metadata for ClassificationMetrics<Int>;
          }
          uint64_t v134 = __swift_instantiateConcreteTypeFromMangledName(v133);
          (*(void (**)(char *, char *, uint64_t))(*(void *)(v134 - 8) + 16))(v122, v155, v134);
          swift_storeEnumTagMultiPayload(v122, v130, v132);
        }
        swift_storeEnumTagMultiPayload(v122, v146, v124);
        return a1;
      }
      uint64_t v151 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Either<ClassificationMetrics<String>, ClassificationMetrics<Int>>);
      int v117 = swift_getEnumCaseMultiPayload(v108, v151);
      BOOL v118 = v117 == 1;
      uint64_t v119 = &demangling cache variable for type metadata for ClassificationMetrics<String>;
      if (v117 == 1) {
        uint64_t v119 = &demangling cache variable for type metadata for ClassificationMetrics<Int>;
      }
      uint64_t v120 = __swift_instantiateConcreteTypeFromMangledName(v119);
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v120 - 8) + 16))(v107, v108, v120);
      swift_storeEnumTagMultiPayload(v107, v151, v118);
    }
    uint64_t v115 = a2;
    goto LABEL_57;
  }
  return a1;
}

uint64_t initializeWithTake for MLHandPoseClassifier(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(void *)a1 = *(void *)a2;
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  uint64_t v127 = type metadata accessor for MLHandActionClassifier(0);
  uint64_t v3 = *(int *)(v127 + 28);
  uint64_t v4 = (char *)(a1 + v3);
  uint64_t v5 = (char *)(a2 + v3);
  uint64_t v6 = type metadata accessor for MLHandActionClassifier.ModelParameters.ValidationData(0);
  if (swift_getEnumCaseMultiPayload(v5, v6) == 1)
  {
    uint64_t v7 = type metadata accessor for MLHandActionClassifier.DataSource(0);
    switch(swift_getEnumCaseMultiPayload(v5, v7))
    {
      case 0u:
        uint64_t v120 = type metadata accessor for URL(0);
        char v8 = *(void (**)(char *, char *, uint64_t))(*(void *)(v120 - 8) + 32);
        v8(v4, v5, v120);
        uint64_t v125 = v7;
        uint64_t v9 = (int *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (at: URL, annotationFile: URL, videoColumn: String, labelColumn: String, startTimeColumn: String?, endTimeColumn: String?));
        v8(&v4[v9[12]], &v5[v9[12]], v120);
        *(_OWORD *)&v4[v9[16]] = *(_OWORD *)&v5[v9[16]];
        *(_OWORD *)&v4[v9[20]] = *(_OWORD *)&v5[v9[20]];
        *(_OWORD *)&v4[v9[24]] = *(_OWORD *)&v5[v9[24]];
        *(_OWORD *)&v4[v9[28]] = *(_OWORD *)&v5[v9[28]];
        uint64_t v10 = v4;
        uint64_t v11 = v125;
        uint64_t v12 = 0;
        goto LABEL_11;
      case 1u:
        uint64_t v13 = type metadata accessor for URL(0);
        (*(void (**)(char *, char *, uint64_t))(*(void *)(v13 - 8) + 32))(v4, v5, v13);
        uint64_t v113 = 1;
        goto LABEL_10;
      case 2u:
        uint64_t v14 = type metadata accessor for URL(0);
        (*(void (**)(char *, char *, uint64_t))(*(void *)(v14 - 8) + 32))(v4, v5, v14);
        uint64_t v113 = 2;
        goto LABEL_10;
      case 5u:
        uint64_t v15 = type metadata accessor for DataFrame(0);
        (*(void (**)(char *, char *, uint64_t))(*(void *)(v15 - 8) + 32))(v4, v5, v15);
        uint64_t v16 = (int *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (DataFrame, sessionIdColumn: String, labelColumn: String, featureColumn: String));
        *(_OWORD *)&v4[v16[12]] = *(_OWORD *)&v5[v16[12]];
        *(_OWORD *)&v4[v16[16]] = *(_OWORD *)&v5[v16[16]];
        *(_OWORD *)&v4[v16[20]] = *(_OWORD *)&v5[v16[20]];
        uint64_t v113 = 5;
        goto LABEL_10;
      case 6u:
        uint64_t v17 = type metadata accessor for DataFrame(0);
        (*(void (**)(char *, char *, uint64_t))(*(void *)(v17 - 8) + 32))(v4, v5, v17);
        uint64_t v18 = (int *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (DataFrame, videoColumn: String, labelColumn: String, startTimeColumn: String?, endTimeColumn: String?));
        *(_OWORD *)&v4[v18[12]] = *(_OWORD *)&v5[v18[12]];
        *(_OWORD *)&v4[v18[16]] = *(_OWORD *)&v5[v18[16]];
        *(_OWORD *)&v4[v18[20]] = *(_OWORD *)&v5[v18[20]];
        *(_OWORD *)&v4[v18[24]] = *(_OWORD *)&v5[v18[24]];
        uint64_t v113 = 6;
LABEL_10:
        uint64_t v12 = v113;
        uint64_t v10 = v4;
        uint64_t v11 = v7;
LABEL_11:
        swift_storeEnumTagMultiPayload(v10, v11, v12);
        break;
      default:
        memcpy(v4, v5, *(void *)(*(void *)(v7 - 8) + 64));
        break;
    }
    swift_storeEnumTagMultiPayload(v4, v6, 1);
  }
  else
  {
    memcpy(v4, v5, *(void *)(*(void *)(v6 - 8) + 64));
  }
  uint64_t v19 = v127;
  uint64_t v20 = (int *)type metadata accessor for MLHandActionClassifier.ModelParameters(0);
  *(void *)&v4[v20[5]] = *(void *)&v5[v20[5]];
  *(void *)&v4[v20[6]] = *(void *)&v5[v20[6]];
  *(void *)&v4[v20[7]] = *(void *)&v5[v20[7]];
  *(void *)&v4[v20[8]] = *(void *)&v5[v20[8]];
  *(void *)&v4[v20[10]] = *(void *)&v5[v20[10]];
  uint64_t v21 = *(int *)(v127 + 32);
  uint64_t v22 = (char *)(a1 + v21);
  uint64_t v23 = a2;
  uint64_t v24 = (char *)(a2 + v21);
  uint64_t v25 = type metadata accessor for MLClassifierMetrics.Contents(0);
  int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload(v24, v25);
  uint64_t v126 = v25;
  if (EnumCaseMultiPayload == 1)
  {
    *(void *)uint64_t v22 = *(void *)v24;
    uint64_t v121 = type metadata accessor for MLClassifierMetrics.Precomputed(0);
    uint64_t v37 = *(int *)(v121 + 20);
    uint64_t v115 = &v22[v37];
    uint64_t v38 = type metadata accessor for DataFrame(0);
    uint64_t v39 = *(void (**)(char *, char *, uint64_t))(*(void *)(v38 - 8) + 32);
    uint64_t v40 = &v24[v37];
    uint64_t v25 = v126;
    v39(v115, v40, v38);
    uint64_t v41 = v38;
    uint64_t v19 = v127;
    v39(&v22[*(int *)(v121 + 24)], &v24[*(int *)(v121 + 24)], v41);
    uint64_t v23 = a2;
    uint64_t v36 = 1;
    uint64_t v34 = v22;
    uint64_t v35 = v126;
LABEL_19:
    swift_storeEnumTagMultiPayload(v34, v35, v36);
    goto LABEL_21;
  }
  if (!EnumCaseMultiPayload)
  {
    uint64_t v27 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Either<ClassificationMetrics<String>, ClassificationMetrics<Int>>);
    int v28 = swift_getEnumCaseMultiPayload(v24, v27);
    BOOL v29 = v28 == 1;
    uint64_t v30 = &demangling cache variable for type metadata for ClassificationMetrics<String>;
    if (v28 == 1) {
      uint64_t v30 = &demangling cache variable for type metadata for ClassificationMetrics<Int>;
    }
    uint64_t v31 = __swift_instantiateConcreteTypeFromMangledName(v30);
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v31 - 8) + 32))(v22, v24, v31);
    uint64_t v32 = v27;
    uint64_t v25 = v126;
    BOOL v33 = v29;
    uint64_t v23 = a2;
    swift_storeEnumTagMultiPayload(v22, v32, v33);
    uint64_t v34 = v22;
    uint64_t v35 = v126;
    uint64_t v36 = 0;
    goto LABEL_19;
  }
  memcpy(v22, v24, *(void *)(*(void *)(v25 - 8) + 64));
LABEL_21:
  uint64_t v42 = *(int *)(v19 + 36);
  uint64_t v43 = (char *)(a1 + v42);
  uint64_t v44 = (char *)(v23 + v42);
  int v45 = swift_getEnumCaseMultiPayload(v44, v25);
  if (v45 == 1)
  {
    *(void *)uint64_t v43 = *(void *)v44;
    uint64_t v128 = type metadata accessor for MLClassifierMetrics.Precomputed(0);
    uint64_t v54 = *(int *)(v128 + 20);
    unsigned int v122 = &v43[v54];
    uint64_t v55 = type metadata accessor for DataFrame(0);
    uint64_t v56 = *(void (**)(char *, char *, uint64_t))(*(void *)(v55 - 8) + 32);
    uint64_t v57 = &v44[v54];
    uint64_t v23 = a2;
    v56(v122, v57, v55);
    v56(&v43[*(int *)(v128 + 24)], &v44[*(int *)(v128 + 24)], v55);
    uint64_t v53 = 1;
    uint64_t v51 = v43;
    uint64_t v52 = v126;
LABEL_27:
    swift_storeEnumTagMultiPayload(v51, v52, v53);
    goto LABEL_29;
  }
  if (!v45)
  {
    uint64_t v46 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Either<ClassificationMetrics<String>, ClassificationMetrics<Int>>);
    int v47 = swift_getEnumCaseMultiPayload(v44, v46);
    BOOL v48 = v47 == 1;
    uint64_t v49 = &demangling cache variable for type metadata for ClassificationMetrics<String>;
    if (v47 == 1) {
      uint64_t v49 = &demangling cache variable for type metadata for ClassificationMetrics<Int>;
    }
    uint64_t v50 = __swift_instantiateConcreteTypeFromMangledName(v49);
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v50 - 8) + 32))(v43, v44, v50);
    swift_storeEnumTagMultiPayload(v43, v46, v48);
    uint64_t v51 = v43;
    uint64_t v52 = v126;
    uint64_t v53 = 0;
    goto LABEL_27;
  }
  memcpy(v43, v44, *(void *)(*(void *)(v25 - 8) + 64));
LABEL_29:
  uint64_t v58 = a3;
  *(void *)(a1 + *(int *)(a3 + 20)) = *(void *)(v23 + *(int *)(a3 + 20));
  uint64_t v59 = *(int *)(a3 + 24);
  uint64_t v60 = (char *)(a1 + v59);
  unsigned int v61 = (char *)(v23 + v59);
  uint64_t v62 = type metadata accessor for MLHandPoseClassifier.ModelParameters.ValidationData(0);
  if (swift_getEnumCaseMultiPayload(v61, v62) == 1)
  {
    uint64_t v129 = type metadata accessor for MLHandPoseClassifier.DataSource(0);
    switch(swift_getEnumCaseMultiPayload(v61, v129))
    {
      case 0u:
        uint64_t v63 = type metadata accessor for URL(0);
        uint64_t v123 = *(void (**)(char *, char *, uint64_t))(*(void *)(v63 - 8) + 32);
        v123(v60, v61, v63);
        BOOL v64 = (int *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (at: URL, annotationFile: URL, imageColumn: String, labelColumn: String));
        uint64_t v65 = v63;
        uint64_t v58 = a3;
        v123(&v60[v64[12]], &v61[v64[12]], v65);
        *(_OWORD *)&v60[v64[16]] = *(_OWORD *)&v61[v64[16]];
        uint64_t v66 = v64[20];
        uint64_t v23 = a2;
        *(_OWORD *)&v60[v66] = *(_OWORD *)&v61[v66];
        uint64_t v67 = v60;
        uint64_t v68 = v129;
        uint64_t v69 = 0;
        goto LABEL_39;
      case 1u:
        uint64_t v70 = type metadata accessor for URL(0);
        (*(void (**)(char *, char *, uint64_t))(*(void *)(v70 - 8) + 32))(v60, v61, v70);
        uint64_t v114 = 1;
        goto LABEL_38;
      case 2u:
        uint64_t v71 = type metadata accessor for URL(0);
        (*(void (**)(char *, char *, uint64_t))(*(void *)(v71 - 8) + 32))(v60, v61, v71);
        uint64_t v114 = 2;
        goto LABEL_38;
      case 5u:
        uint64_t v72 = type metadata accessor for DataFrame(0);
        (*(void (**)(char *, char *, uint64_t))(*(void *)(v72 - 8) + 32))(v60, v61, v72);
        uint64_t v73 = (int *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (DataFrame, sessionIdColumn: String, labelColumn: String, featureColumn: String));
        *(_OWORD *)&v60[v73[12]] = *(_OWORD *)&v61[v73[12]];
        *(_OWORD *)&v60[v73[16]] = *(_OWORD *)&v61[v73[16]];
        *(_OWORD *)&v60[v73[20]] = *(_OWORD *)&v61[v73[20]];
        uint64_t v114 = 5;
        goto LABEL_38;
      case 6u:
        uint64_t v74 = type metadata accessor for DataFrame(0);
        (*(void (**)(char *, char *, uint64_t))(*(void *)(v74 - 8) + 32))(v60, v61, v74);
        uint64_t v75 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (DataFrame, imageColumn: String, labelColumn: String));
        *(_OWORD *)&v60[*(int *)(v75 + 48)] = *(_OWORD *)&v61[*(int *)(v75 + 48)];
        *(_OWORD *)&v60[*(int *)(v75 + 64)] = *(_OWORD *)&v61[*(int *)(v75 + 64)];
        uint64_t v114 = 6;
LABEL_38:
        uint64_t v69 = v114;
        uint64_t v67 = v60;
        uint64_t v68 = v129;
LABEL_39:
        swift_storeEnumTagMultiPayload(v67, v68, v69);
        break;
      default:
        memcpy(v60, v61, *(void *)(*(void *)(v129 - 8) + 64));
        break;
    }
    swift_storeEnumTagMultiPayload(v60, v62, 1);
  }
  else
  {
    memcpy(v60, v61, *(void *)(*(void *)(v62 - 8) + 64));
  }
  uint64_t v76 = (int *)type metadata accessor for MLHandPoseClassifier.ModelParameters(0);
  *(void *)&v60[v76[5]] = *(void *)&v61[v76[5]];
  *(void *)&v60[v76[6]] = *(void *)&v61[v76[6]];
  *(void *)&v60[v76[7]] = *(void *)&v61[v76[7]];
  uint64_t v77 = *(int *)(v58 + 28);
  uint64_t v78 = (char *)(a1 + v77);
  uint64_t v79 = (char *)(v23 + v77);
  uint64_t v80 = v126;
  int v81 = swift_getEnumCaseMultiPayload(v79, v126);
  if (v81 == 1)
  {
    *(void *)uint64_t v78 = *(void *)v79;
    uint64_t v130 = type metadata accessor for MLClassifierMetrics.Precomputed(0);
    uint64_t v92 = *(int *)(v130 + 20);
    unsigned int v124 = &v78[v92];
    uint64_t v93 = type metadata accessor for DataFrame(0);
    uint64_t v94 = *(void (**)(char *, char *, uint64_t))(*(void *)(v93 - 8) + 32);
    uint64_t v95 = &v79[v92];
    uint64_t v23 = a2;
    v94(v124, v95, v93);
    uint64_t v96 = v93;
    uint64_t v80 = v126;
    v94(&v78[*(int *)(v130 + 24)], &v79[*(int *)(v130 + 24)], v96);
    uint64_t v58 = a3;
    uint64_t v91 = 1;
    uint64_t v89 = v78;
    uint64_t v90 = v126;
LABEL_47:
    swift_storeEnumTagMultiPayload(v89, v90, v91);
    goto LABEL_49;
  }
  if (!v81)
  {
    uint64_t v82 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Either<ClassificationMetrics<String>, ClassificationMetrics<Int>>);
    int v83 = swift_getEnumCaseMultiPayload(v79, v82);
    BOOL v84 = v83 == 1;
    uint64_t v85 = &demangling cache variable for type metadata for ClassificationMetrics<String>;
    if (v83 == 1) {
      uint64_t v85 = &demangling cache variable for type metadata for ClassificationMetrics<Int>;
    }
    uint64_t v86 = __swift_instantiateConcreteTypeFromMangledName(v85);
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v86 - 8) + 32))(v78, v79, v86);
    uint64_t v87 = v82;
    uint64_t v80 = v126;
    BOOL v88 = v84;
    uint64_t v58 = a3;
    swift_storeEnumTagMultiPayload(v78, v87, v88);
    uint64_t v89 = v78;
    uint64_t v90 = v126;
    uint64_t v91 = 0;
    goto LABEL_47;
  }
  memcpy(v78, v79, *(void *)(*(void *)(v126 - 8) + 64));
LABEL_49:
  uint64_t v97 = *(int *)(v58 + 32);
  uint64_t v98 = (char *)(a1 + v97);
  uint64_t v99 = (char *)(v97 + v23);
  int v100 = swift_getEnumCaseMultiPayload(v99, v80);
  if (v100 == 1)
  {
    *(void *)uint64_t v98 = *(void *)v99;
    uint64_t v118 = type metadata accessor for MLClassifierMetrics.Precomputed(0);
    uint64_t v109 = *(int *)(v118 + 20);
    uint64_t v110 = type metadata accessor for DataFrame(0);
    uint64_t v111 = *(void (**)(char *, char *, uint64_t))(*(void *)(v110 - 8) + 32);
    v111(&v98[v109], &v99[v109], v110);
    v111(&v98[*(int *)(v118 + 24)], &v99[*(int *)(v118 + 24)], v110);
    uint64_t v108 = 1;
    uint64_t v106 = v98;
    uint64_t v107 = v126;
  }
  else
  {
    if (v100)
    {
      memcpy(v98, v99, *(void *)(*(void *)(v80 - 8) + 64));
      return a1;
    }
    uint64_t v101 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Either<ClassificationMetrics<String>, ClassificationMetrics<Int>>);
    int v102 = swift_getEnumCaseMultiPayload(v99, v101);
    BOOL v103 = v102 == 1;
    uint64_t v104 = &demangling cache variable for type metadata for ClassificationMetrics<String>;
    if (v102 == 1) {
      uint64_t v104 = &demangling cache variable for type metadata for ClassificationMetrics<Int>;
    }
    uint64_t v105 = __swift_instantiateConcreteTypeFromMangledName(v104);
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v105 - 8) + 32))(v98, v99, v105);
    swift_storeEnumTagMultiPayload(v98, v101, v103);
    uint64_t v106 = v98;
    uint64_t v107 = v80;
    uint64_t v108 = 0;
  }
  swift_storeEnumTagMultiPayload(v106, v107, v108);
  return a1;
}

void *assignWithTake for MLHandPoseClassifier(void *a1, void *a2, int *a3)
{
  uint64_t v3 = a2;
  uint64_t v5 = *a1;
  *a1 = *a2;
  swift_bridgeObjectRelease(v5);
  a1[1] = a2[1];
  swift_release();
  uint64_t v6 = (void *)a1[2];
  a1[2] = a2[2];

  uint64_t v134 = (int *)type metadata accessor for MLHandActionClassifier(0);
  uint64_t v7 = v134[7];
  char v8 = (char *)a1 + v7;
  uint64_t v9 = (char *)a2 + v7;
  uint64_t v123 = a1;
  if (a1 != a2)
  {
    outlined destroy of MLActivityClassifier.ModelParameters((uint64_t)v8, type metadata accessor for MLHandActionClassifier.ModelParameters.ValidationData);
    uint64_t v10 = type metadata accessor for MLHandActionClassifier.ModelParameters.ValidationData(0);
    if (swift_getEnumCaseMultiPayload(v9, v10) == 1)
    {
      uint64_t v130 = type metadata accessor for MLHandActionClassifier.DataSource(0);
      switch(swift_getEnumCaseMultiPayload(v9, v130))
      {
        case 0u:
          uint64_t v119 = type metadata accessor for URL(0);
          uint64_t v11 = *(void (**)(char *, char *, uint64_t))(*(void *)(v119 - 8) + 32);
          v11(v8, v9, v119);
          uint64_t v12 = (int *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (at: URL, annotationFile: URL, videoColumn: String, labelColumn: String, startTimeColumn: String?, endTimeColumn: String?));
          v11(&v8[v12[12]], &v9[v12[12]], v119);
          uint64_t v3 = a2;
          *(_OWORD *)&v8[v12[16]] = *(_OWORD *)&v9[v12[16]];
          *(_OWORD *)&v8[v12[20]] = *(_OWORD *)&v9[v12[20]];
          *(_OWORD *)&v8[v12[24]] = *(_OWORD *)&v9[v12[24]];
          *(_OWORD *)&v8[v12[28]] = *(_OWORD *)&v9[v12[28]];
          uint64_t v13 = v8;
          uint64_t v14 = v130;
          uint64_t v15 = 0;
          goto LABEL_12;
        case 1u:
          uint64_t v16 = type metadata accessor for URL(0);
          (*(void (**)(char *, char *, uint64_t))(*(void *)(v16 - 8) + 32))(v8, v9, v16);
          uint64_t v114 = 1;
          goto LABEL_11;
        case 2u:
          uint64_t v17 = type metadata accessor for URL(0);
          (*(void (**)(char *, char *, uint64_t))(*(void *)(v17 - 8) + 32))(v8, v9, v17);
          uint64_t v114 = 2;
          goto LABEL_11;
        case 5u:
          uint64_t v18 = type metadata accessor for DataFrame(0);
          (*(void (**)(char *, char *, uint64_t))(*(void *)(v18 - 8) + 32))(v8, v9, v18);
          uint64_t v19 = (int *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (DataFrame, sessionIdColumn: String, labelColumn: String, featureColumn: String));
          *(_OWORD *)&v8[v19[12]] = *(_OWORD *)&v9[v19[12]];
          *(_OWORD *)&v8[v19[16]] = *(_OWORD *)&v9[v19[16]];
          *(_OWORD *)&v8[v19[20]] = *(_OWORD *)&v9[v19[20]];
          uint64_t v114 = 5;
          goto LABEL_11;
        case 6u:
          uint64_t v20 = type metadata accessor for DataFrame(0);
          (*(void (**)(char *, char *, uint64_t))(*(void *)(v20 - 8) + 32))(v8, v9, v20);
          uint64_t v21 = (int *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (DataFrame, videoColumn: String, labelColumn: String, startTimeColumn: String?, endTimeColumn: String?));
          *(_OWORD *)&v8[v21[12]] = *(_OWORD *)&v9[v21[12]];
          *(_OWORD *)&v8[v21[16]] = *(_OWORD *)&v9[v21[16]];
          *(_OWORD *)&v8[v21[20]] = *(_OWORD *)&v9[v21[20]];
          *(_OWORD *)&v8[v21[24]] = *(_OWORD *)&v9[v21[24]];
          uint64_t v114 = 6;
LABEL_11:
          uint64_t v15 = v114;
          uint64_t v13 = v8;
          uint64_t v14 = v130;
LABEL_12:
          swift_storeEnumTagMultiPayload(v13, v14, v15);
          break;
        default:
          memcpy(v8, v9, *(void *)(*(void *)(v130 - 8) + 64));
          break;
      }
      swift_storeEnumTagMultiPayload(v8, v10, 1);
    }
    else
    {
      memcpy(v8, v9, *(void *)(*(void *)(v10 - 8) + 64));
    }
  }
  uint64_t v22 = (int *)type metadata accessor for MLHandActionClassifier.ModelParameters(0);
  *(void *)&v8[v22[5]] = *(void *)&v9[v22[5]];
  *(void *)&v8[v22[6]] = *(void *)&v9[v22[6]];
  *(void *)&v8[v22[7]] = *(void *)&v9[v22[7]];
  *(void *)&v8[v22[8]] = *(void *)&v9[v22[8]];
  *(void *)&v8[v22[10]] = *(void *)&v9[v22[10]];
  if (v123 == v3) {
    goto LABEL_31;
  }
  uint64_t v23 = v134[8];
  uint64_t v24 = (char *)v123 + v23;
  uint64_t v25 = (char *)v3 + v23;
  outlined destroy of MLActivityClassifier.ModelParameters((uint64_t)v24, type metadata accessor for MLClassifierMetrics.Contents);
  uint64_t v26 = type metadata accessor for MLClassifierMetrics.Contents(0);
  int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload(v25, v26);
  uint64_t v131 = v26;
  if (EnumCaseMultiPayload == 1)
  {
    *(void *)uint64_t v24 = *(void *)v25;
    uint64_t v120 = type metadata accessor for MLClassifierMetrics.Precomputed(0);
    uint64_t v36 = *(int *)(v120 + 20);
    uint64_t v116 = &v24[v36];
    uint64_t v125 = v3;
    uint64_t v37 = type metadata accessor for DataFrame(0);
    uint64_t v38 = *(void (**)(char *, char *, uint64_t))(*(void *)(v37 - 8) + 32);
    uint64_t v39 = &v25[v36];
    uint64_t v26 = v131;
    v38(v116, v39, v37);
    uint64_t v40 = v37;
    uint64_t v3 = v125;
    v38(&v24[*(int *)(v120 + 24)], &v25[*(int *)(v120 + 24)], v40);
    uint64_t v35 = 1;
    BOOL v33 = v24;
    uint64_t v34 = v131;
  }
  else
  {
    if (EnumCaseMultiPayload)
    {
      memcpy(v24, v25, *(void *)(*(void *)(v26 - 8) + 64));
      goto LABEL_23;
    }
    uint64_t v124 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Either<ClassificationMetrics<String>, ClassificationMetrics<Int>>);
    int v28 = swift_getEnumCaseMultiPayload(v25, v124);
    BOOL v29 = v28 == 1;
    uint64_t v30 = &demangling cache variable for type metadata for ClassificationMetrics<String>;
    if (v28 == 1) {
      uint64_t v30 = &demangling cache variable for type metadata for ClassificationMetrics<Int>;
    }
    uint64_t v31 = __swift_instantiateConcreteTypeFromMangledName(v30);
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v31 - 8) + 32))(v24, v25, v31);
    BOOL v32 = v29;
    uint64_t v26 = v131;
    swift_storeEnumTagMultiPayload(v24, v124, v32);
    BOOL v33 = v24;
    uint64_t v34 = v131;
    uint64_t v35 = 0;
  }
  swift_storeEnumTagMultiPayload(v33, v34, v35);
LABEL_23:
  uint64_t v41 = v134[9];
  uint64_t v42 = (char *)v123 + v41;
  uint64_t v43 = (char *)v3 + v41;
  outlined destroy of MLActivityClassifier.ModelParameters((uint64_t)v42, type metadata accessor for MLClassifierMetrics.Contents);
  int v44 = swift_getEnumCaseMultiPayload(v43, v26);
  if (v44 == 1)
  {
    *(void *)uint64_t v42 = *(void *)v43;
    uint64_t v136 = type metadata accessor for MLClassifierMetrics.Precomputed(0);
    uint64_t v54 = *(int *)(v136 + 20);
    uint64_t v55 = &v42[v54];
    uint64_t v126 = v3;
    uint64_t v56 = type metadata accessor for DataFrame(0);
    uint64_t v57 = &v43[v54];
    uint64_t v58 = *(void (**)(char *, char *, uint64_t))(*(void *)(v56 - 8) + 32);
    v58(v55, v57, v56);
    uint64_t v59 = v56;
    uint64_t v3 = v126;
    v58(&v42[*(int *)(v136 + 24)], &v43[*(int *)(v136 + 24)], v59);
    uint64_t v53 = 1;
    uint64_t v51 = v42;
    uint64_t v52 = v131;
LABEL_29:
    swift_storeEnumTagMultiPayload(v51, v52, v53);
    goto LABEL_31;
  }
  if (!v44)
  {
    uint64_t v135 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Either<ClassificationMetrics<String>, ClassificationMetrics<Int>>);
    int v45 = swift_getEnumCaseMultiPayload(v43, v135);
    uint64_t v46 = v3;
    BOOL v47 = v45 == 1;
    BOOL v48 = &demangling cache variable for type metadata for ClassificationMetrics<String>;
    if (v45 == 1) {
      BOOL v48 = &demangling cache variable for type metadata for ClassificationMetrics<Int>;
    }
    uint64_t v49 = __swift_instantiateConcreteTypeFromMangledName(v48);
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v49 - 8) + 32))(v42, v43, v49);
    BOOL v50 = v47;
    uint64_t v3 = v46;
    swift_storeEnumTagMultiPayload(v42, v135, v50);
    uint64_t v51 = v42;
    uint64_t v52 = v131;
    uint64_t v53 = 0;
    goto LABEL_29;
  }
  memcpy(v42, v43, *(void *)(*(void *)(v26 - 8) + 64));
LABEL_31:
  uint64_t v60 = a3[5];
  unsigned int v61 = *(void **)((char *)v123 + v60);
  *(void *)((char *)v123 + v60) = *(void *)((char *)v3 + v60);

  uint64_t v62 = a3[6];
  uint64_t v63 = (char *)v123 + v62;
  BOOL v64 = (char *)v3 + v62;
  if (v123 != v3)
  {
    outlined destroy of MLActivityClassifier.ModelParameters((uint64_t)v63, type metadata accessor for MLHandPoseClassifier.ModelParameters.ValidationData);
    uint64_t v65 = type metadata accessor for MLHandPoseClassifier.ModelParameters.ValidationData(0);
    if (swift_getEnumCaseMultiPayload(v64, v65) == 1)
    {
      uint64_t v137 = type metadata accessor for MLHandPoseClassifier.DataSource(0);
      switch(swift_getEnumCaseMultiPayload(v64, v137))
      {
        case 0u:
          uint64_t v121 = type metadata accessor for URL(0);
          BOOL v132 = *(void (**)(char *, char *, uint64_t))(*(void *)(v121 - 8) + 32);
          v132(v63, v64, v121);
          uint64_t v127 = v3;
          uint64_t v66 = (int *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (at: URL, annotationFile: URL, imageColumn: String, labelColumn: String));
          v132(&v63[v66[12]], &v64[v66[12]], v121);
          *(_OWORD *)&v63[v66[16]] = *(_OWORD *)&v64[v66[16]];
          uint64_t v67 = v66[20];
          uint64_t v3 = v127;
          *(_OWORD *)&v63[v67] = *(_OWORD *)&v64[v67];
          uint64_t v68 = v63;
          uint64_t v69 = v137;
          uint64_t v70 = 0;
          goto LABEL_42;
        case 1u:
          uint64_t v71 = type metadata accessor for URL(0);
          (*(void (**)(char *, char *, uint64_t))(*(void *)(v71 - 8) + 32))(v63, v64, v71);
          uint64_t v115 = 1;
          goto LABEL_41;
        case 2u:
          uint64_t v72 = type metadata accessor for URL(0);
          (*(void (**)(char *, char *, uint64_t))(*(void *)(v72 - 8) + 32))(v63, v64, v72);
          uint64_t v115 = 2;
          goto LABEL_41;
        case 5u:
          uint64_t v73 = type metadata accessor for DataFrame(0);
          (*(void (**)(char *, char *, uint64_t))(*(void *)(v73 - 8) + 32))(v63, v64, v73);
          uint64_t v74 = (int *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (DataFrame, sessionIdColumn: String, labelColumn: String, featureColumn: String));
          *(_OWORD *)&v63[v74[12]] = *(_OWORD *)&v64[v74[12]];
          *(_OWORD *)&v63[v74[16]] = *(_OWORD *)&v64[v74[16]];
          *(_OWORD *)&v63[v74[20]] = *(_OWORD *)&v64[v74[20]];
          uint64_t v115 = 5;
          goto LABEL_41;
        case 6u:
          uint64_t v75 = type metadata accessor for DataFrame(0);
          (*(void (**)(char *, char *, uint64_t))(*(void *)(v75 - 8) + 32))(v63, v64, v75);
          uint64_t v76 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (DataFrame, imageColumn: String, labelColumn: String));
          *(_OWORD *)&v63[*(int *)(v76 + 48)] = *(_OWORD *)&v64[*(int *)(v76 + 48)];
          *(_OWORD *)&v63[*(int *)(v76 + 64)] = *(_OWORD *)&v64[*(int *)(v76 + 64)];
          uint64_t v115 = 6;
LABEL_41:
          uint64_t v70 = v115;
          uint64_t v68 = v63;
          uint64_t v69 = v137;
LABEL_42:
          swift_storeEnumTagMultiPayload(v68, v69, v70);
          break;
        default:
          memcpy(v63, v64, *(void *)(*(void *)(v137 - 8) + 64));
          break;
      }
      swift_storeEnumTagMultiPayload(v63, v65, 1);
    }
    else
    {
      memcpy(v63, v64, *(void *)(*(void *)(v65 - 8) + 64));
    }
  }
  uint64_t v77 = (int *)type metadata accessor for MLHandPoseClassifier.ModelParameters(0);
  *(void *)&v63[v77[5]] = *(void *)&v64[v77[5]];
  *(void *)&v63[v77[6]] = *(void *)&v64[v77[6]];
  *(void *)&v63[v77[7]] = *(void *)&v64[v77[7]];
  if (v123 == v3) {
    return v123;
  }
  uint64_t v78 = a3[7];
  uint64_t v79 = (char *)v123 + v78;
  uint64_t v80 = (char *)v3 + v78;
  outlined destroy of MLActivityClassifier.ModelParameters((uint64_t)v79, type metadata accessor for MLClassifierMetrics.Contents);
  uint64_t v81 = type metadata accessor for MLClassifierMetrics.Contents(0);
  int v82 = swift_getEnumCaseMultiPayload(v80, v81);
  uint64_t v138 = v81;
  if (v82 == 1)
  {
    *(void *)uint64_t v79 = *(void *)v80;
    uint64_t v133 = type metadata accessor for MLClassifierMetrics.Precomputed(0);
    uint64_t v92 = *(int *)(v133 + 20);
    unsigned int v122 = &v79[v92];
    uint64_t v129 = v3;
    uint64_t v93 = type metadata accessor for DataFrame(0);
    uint64_t v94 = *(void (**)(char *, char *, uint64_t))(*(void *)(v93 - 8) + 32);
    uint64_t v95 = &v80[v92];
    uint64_t v81 = v138;
    v94(v122, v95, v93);
    uint64_t v96 = v93;
    uint64_t v3 = v129;
    v94(&v79[*(int *)(v133 + 24)], &v80[*(int *)(v133 + 24)], v96);
    uint64_t v91 = 1;
    uint64_t v89 = v79;
    uint64_t v90 = v138;
  }
  else
  {
    if (v82)
    {
      memcpy(v79, v80, *(void *)(*(void *)(v81 - 8) + 64));
      goto LABEL_53;
    }
    uint64_t v128 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Either<ClassificationMetrics<String>, ClassificationMetrics<Int>>);
    int v83 = swift_getEnumCaseMultiPayload(v80, v128);
    BOOL v84 = v3;
    BOOL v85 = v83 == 1;
    uint64_t v86 = &demangling cache variable for type metadata for ClassificationMetrics<String>;
    if (v83 == 1) {
      uint64_t v86 = &demangling cache variable for type metadata for ClassificationMetrics<Int>;
    }
    uint64_t v87 = __swift_instantiateConcreteTypeFromMangledName(v86);
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v87 - 8) + 32))(v79, v80, v87);
    BOOL v88 = v85;
    uint64_t v3 = v84;
    uint64_t v81 = v138;
    swift_storeEnumTagMultiPayload(v79, v128, v88);
    uint64_t v89 = v79;
    uint64_t v90 = v138;
    uint64_t v91 = 0;
  }
  swift_storeEnumTagMultiPayload(v89, v90, v91);
LABEL_53:
  uint64_t v97 = a3[8];
  uint64_t v98 = (char *)v123 + v97;
  uint64_t v99 = (char *)v3 + v97;
  outlined destroy of MLActivityClassifier.ModelParameters((uint64_t)v123 + v97, type metadata accessor for MLClassifierMetrics.Contents);
  int v100 = swift_getEnumCaseMultiPayload(v99, v81);
  if (v100 == 1)
  {
    *(void *)uint64_t v98 = *(void *)v99;
    uint64_t v118 = type metadata accessor for MLClassifierMetrics.Precomputed(0);
    uint64_t v110 = *(int *)(v118 + 20);
    uint64_t v111 = type metadata accessor for DataFrame(0);
    uint64_t v112 = *(void (**)(char *, char *, uint64_t))(*(void *)(v111 - 8) + 32);
    v112(&v98[v110], &v99[v110], v111);
    v112(&v98[*(int *)(v118 + 24)], &v99[*(int *)(v118 + 24)], v111);
    uint64_t v109 = 1;
    uint64_t v107 = v98;
    uint64_t v108 = v138;
  }
  else
  {
    if (v100)
    {
      memcpy(v98, v99, *(void *)(*(void *)(v81 - 8) + 64));
      return v123;
    }
    uint64_t v101 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Either<ClassificationMetrics<String>, ClassificationMetrics<Int>>);
    int v102 = swift_getEnumCaseMultiPayload(v99, v101);
    BOOL v103 = v99;
    BOOL v104 = v102 == 1;
    uint64_t v105 = &demangling cache variable for type metadata for ClassificationMetrics<String>;
    if (v102 == 1) {
      uint64_t v105 = &demangling cache variable for type metadata for ClassificationMetrics<Int>;
    }
    uint64_t v106 = __swift_instantiateConcreteTypeFromMangledName(v105);
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v106 - 8) + 32))(v98, v103, v106);
    swift_storeEnumTagMultiPayload(v98, v101, v104);
    uint64_t v107 = v98;
    uint64_t v108 = v138;
    uint64_t v109 = 0;
  }
  swift_storeEnumTagMultiPayload(v107, v108, v109);
  return v123;
}

uint64_t getEnumTagSinglePayload for MLHandPoseClassifier(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_26971);
}

uint64_t sub_26971(uint64_t a1, unsigned int a2, int *a3)
{
  uint64_t v4 = a1;
  uint64_t v5 = type metadata accessor for MLHandActionClassifier(0);
  if (*(_DWORD *)(*(void *)(v5 - 8) + 84) == a2) {
    return __swift_getEnumTagSinglePayload(v4, a2, v5);
  }
  if (a2 != 0x7FFFFFFF)
  {
    uint64_t v5 = type metadata accessor for MLHandPoseClassifier.ModelParameters(0);
    if (*(_DWORD *)(*(void *)(v5 - 8) + 84) == a2)
    {
      uint64_t v7 = a3[6];
    }
    else
    {
      uint64_t v5 = type metadata accessor for MLClassifierMetrics(0);
      uint64_t v7 = a3[7];
    }
    uint64_t v4 = v7 + a1;
    return __swift_getEnumTagSinglePayload(v4, a2, v5);
  }
  uint64_t result = 0;
  if ((*(void *)(a1 + a3[5]) & 0xFFFFFFFF00000001) == 0) {
    return (*(void *)(a1 + a3[5]) >> 1) + 1;
  }
  return result;
}

uint64_t storeEnumTagSinglePayload for MLHandPoseClassifier(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_26A23);
}

uint64_t sub_26A23(uint64_t a1, unsigned int a2, int a3, int *a4)
{
  uint64_t v6 = a1;
  uint64_t v7 = type metadata accessor for MLHandActionClassifier(0);
  if (*(_DWORD *)(*(void *)(v7 - 8) + 84) != a3)
  {
    if (a3 == 0x7FFFFFFF)
    {
      uint64_t result = a4[5];
      *(void *)(a1 + result) = 2 * (a2 - 1);
      return result;
    }
    uint64_t v7 = type metadata accessor for MLHandPoseClassifier.ModelParameters(0);
    if (*(_DWORD *)(*(void *)(v7 - 8) + 84) == a3)
    {
      uint64_t v9 = a4[6];
    }
    else
    {
      uint64_t v7 = type metadata accessor for MLClassifierMetrics(0);
      uint64_t v9 = a4[7];
    }
    uint64_t v6 = v9 + a1;
  }
  return __swift_storeEnumTagSinglePayload(v6, a2, a2, v7);
}

uint64_t type metadata completion function for MLHandPoseClassifier(uint64_t a1)
{
  uint64_t result = type metadata accessor for MLHandActionClassifier(319);
  if (v2 <= 0x3F)
  {
    v5[0] = *(void *)(result - 8) + 64;
    v5[1] = (char *)&value witness table for Builtin.UnknownObject + 64;
    uint64_t result = type metadata accessor for MLHandPoseClassifier.ModelParameters(319);
    if (v3 <= 0x3F)
    {
      _OWORD v5[2] = *(void *)(result - 8) + 64;
      uint64_t result = type metadata accessor for MLClassifierMetrics.Contents(319);
      if (v4 <= 0x3F)
      {
        uint64_t v6 = *(void *)(result - 8) + 64;
        uint64_t v7 = v6;
        swift_initStructMetadata(a1, 256, 5, v5, a1 + 16);
        return 0;
      }
    }
  }
  return result;
}

void *specialized _copyCollectionToContiguousArray<A>(_:)(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4)
{
  unint64_t v4 = a4 >> 1;
  uint64_t v5 = (a4 >> 1) - a3;
  if (__OFSUB__(a4 >> 1, a3)) {
    BUG();
  }
  if (!v5) {
    return _swiftEmptyArrayStorage;
  }
  if (v5 <= 0)
  {
    char v8 = _swiftEmptyArrayStorage;
  }
  else
  {
    uint64_t v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>);
    char v8 = (void *)swift_allocObject(v7, 8 * v5 + 32, 7);
    long long v9 = (uint64_t)(_swift_stdlib_malloc_size(v8) - 32);
    _OWORD v8[2] = v5;
    v8[3] = 2 * (v9 / 8) + 1;
  }
  if (v4 == a3) {
    BUG();
  }
  specialized UnsafeMutablePointer.initialize(from:count:)(a2 + 8 * a3, v5, (unint64_t)(v8 + 4));
  return v8;
}

{
  unint64_t v4;
  uint64_t v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void *v12;
  size_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v17;

  unint64_t v4 = a4 >> 1;
  uint64_t v5 = (a4 >> 1) - a3;
  if (__OFSUB__(a4 >> 1, a3)) {
    BUG();
  }
  if (!v5) {
    return _swiftEmptyArrayStorage;
  }
  uint64_t v7 = a2;
  if (v5 <= 0)
  {
    uint64_t v12 = _swiftEmptyArrayStorage;
  }
  else
  {
    char v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<NeuralNetwork.Layer>);
    long long v9 = *(void *)(type metadata accessor for NeuralNetwork.Layer(0) - 8);
    uint64_t v17 = *(void *)(v9 + 72);
    uint64_t v10 = *(unsigned __int8 *)(v9 + 80);
    uint64_t v11 = (v10 + 32) & ~v10;
    uint64_t v12 = (void *)swift_allocObject(v8, v11 + v5 * v17, v10 | 7);
    uint64_t v13 = _swift_stdlib_malloc_size(v12);
    if (!v17) {
      BUG();
    }
    uint64_t v14 = v13 - v11;
    if (v14 == 0x8000000000000000 && v17 == -1) {
      BUG();
    }
    v12[2] = v5;
    v12[3] = 2 * (v14 / v17);
    uint64_t v7 = a2;
  }
  if (v4 == a3) {
    BUG();
  }
  uint64_t v15 = type metadata accessor for NeuralNetwork.Layer(0);
  specialized UnsafeMutablePointer.initialize(from:count:)(*(void *)(*(void *)(v15 - 8) + 72) * a3 + v7, v5, (unint64_t)v12+ ((*(unsigned __int8 *)(*(void *)(v15 - 8) + 80) + 32) & ~*(unsigned __int8 *)(*(void *)(v15 - 8) + 80)));
  return v12;
}

{
  unint64_t v4;
  uint64_t v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void *v12;
  size_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v17;

  unint64_t v4 = a4 >> 1;
  uint64_t v5 = (a4 >> 1) - a3;
  if (__OFSUB__(a4 >> 1, a3)) {
    BUG();
  }
  if (!v5) {
    return _swiftEmptyArrayStorage;
  }
  uint64_t v7 = a2;
  if (v5 <= 0)
  {
    uint64_t v12 = _swiftEmptyArrayStorage;
  }
  else
  {
    char v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<AnnotatedFeature<URL, String>>);
    long long v9 = *(void *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AnnotatedFeature<URL, String>)
                   - 8);
    uint64_t v17 = *(void *)(v9 + 72);
    uint64_t v10 = *(unsigned __int8 *)(v9 + 80);
    uint64_t v11 = (v10 + 32) & ~v10;
    uint64_t v12 = (void *)swift_allocObject(v8, v11 + v5 * v17, v10 | 7);
    uint64_t v13 = _swift_stdlib_malloc_size(v12);
    if (!v17) {
      BUG();
    }
    uint64_t v14 = v13 - v11;
    if (v14 == 0x8000000000000000 && v17 == -1) {
      BUG();
    }
    v12[2] = v5;
    v12[3] = 2 * (v14 / v17);
    uint64_t v7 = a2;
  }
  if (v4 == a3) {
    BUG();
  }
  uint64_t v15 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AnnotatedFeature<URL, String>);
  specialized UnsafeMutablePointer.initialize(from:count:)(*(void *)(*(void *)(v15 - 8) + 72) * a3 + v7, v5, (unint64_t)v12+ ((*(unsigned __int8 *)(*(void *)(v15 - 8) + 80) + 32) & ~*(unsigned __int8 *)(*(void *)(v15 - 8) + 80)));
  return v12;
}

char *specialized _copyCollectionToContiguousArray<A>(_:)(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4)
{
  unint64_t v4 = a4 >> 1;
  uint64_t v5 = (a4 >> 1) - a3;
  if (__OFSUB__(a4 >> 1, a3)) {
    BUG();
  }
  if (!v5) {
    return (char *)_swiftEmptyArrayStorage;
  }
  if (v5 <= 0)
  {
    char v8 = (char *)_swiftEmptyArrayStorage;
  }
  else
  {
    uint64_t v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Double>);
    char v8 = (char *)swift_allocObject(v7, 8 * v5 + 32, 7);
    long long v9 = (uint64_t)(_swift_stdlib_malloc_size(v8) - 32);
    *((void *)v8 + 2) = v5;
    *((void *)v8 + 3) = 2 * (v9 / 8);
  }
  if (v4 == a3) {
    BUG();
  }
  specialized UnsafeMutablePointer.initialize(from:count:)((char *)(a2 + 8 * a3), v5, v8 + 32);
  return v8;
}

{
  unint64_t v4;
  uint64_t v5;
  uint64_t v7;
  char *v8;
  long long v9;

  unint64_t v4 = a4 >> 1;
  uint64_t v5 = (a4 >> 1) - a3;
  if (__OFSUB__(a4 >> 1, a3)) {
    BUG();
  }
  if (!v5) {
    return (char *)_swiftEmptyArrayStorage;
  }
  if (v5 <= 0)
  {
    char v8 = (char *)_swiftEmptyArrayStorage;
  }
  else
  {
    uint64_t v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Interaction>);
    char v8 = (char *)swift_allocObject(v7, 16 * v5 + 32, 7);
    long long v9 = (uint64_t)(_swift_stdlib_malloc_size(v8) - 32);
    *((void *)v8 + 2) = v5;
    *((void *)v8 + 3) = 2 * (v9 / 16);
  }
  if (v4 == a3) {
    BUG();
  }
  specialized UnsafeMutablePointer.initialize(from:count:)((char *)(16 * a3 + a2), v5, v8 + 32);
  return v8;
}

{
  unint64_t v4;
  uint64_t v5;
  uint64_t v7;
  char *v8;
  long long v9;

  unint64_t v4 = a4 >> 1;
  uint64_t v5 = (a4 >> 1) - a3;
  if (__OFSUB__(a4 >> 1, a3)) {
    BUG();
  }
  if (!v5) {
    return (char *)_swiftEmptyArrayStorage;
  }
  if (v5 <= 0)
  {
    char v8 = (char *)_swiftEmptyArrayStorage;
  }
  else
  {
    uint64_t v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Int>);
    char v8 = (char *)swift_allocObject(v7, 8 * v5 + 32, 7);
    long long v9 = (uint64_t)(_swift_stdlib_malloc_size(v8) - 32);
    *((void *)v8 + 2) = v5;
    *((void *)v8 + 3) = 2 * (v9 / 8);
  }
  if (v4 == a3) {
    BUG();
  }
  specialized UnsafeMutablePointer.initialize(from:count:)((char *)(a2 + 8 * a3), v5, v8 + 32);
  return v8;
}

void *specialized _copyCollectionToContiguousArray<A>(_:)(uint64_t a1, uint64_t a2, uint64_t *a3, void (*a4)(uint64_t, uint64_t, void *))
{
  if (!a2) {
    return _swiftEmptyArrayStorage;
  }
  if (a2 <= 0)
  {
    uint64_t v6 = _swiftEmptyArrayStorage;
  }
  else
  {
    uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(a3);
    uint64_t v6 = (void *)swift_allocObject(v5, 8 * a2 + 32, 7);
    long long v7 = (uint64_t)(_swift_stdlib_malloc_size(v6) - 32);
    v6[2] = a2;
    v6[3] = 2 * (v7 / 8);
  }
  a4(a1, a2, v6 + 4);
  return v6;
}

char *specialized _copyCollectionToContiguousArray<A>(_:)(char *__src, uint64_t a2)
{
  if (!a2) {
    return (char *)_swiftEmptyArrayStorage;
  }
  if (a2 <= 0)
  {
    unint64_t v3 = (char *)_swiftEmptyArrayStorage;
  }
  else
  {
    uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Float>);
    unint64_t v3 = (char *)swift_allocObject(v2, 4 * a2 + 32, 7);
    long long v4 = (uint64_t)(_swift_stdlib_malloc_size(v3) - 32);
    *((void *)v3 + 2) = a2;
    *((void *)v3 + 3) = 2 * (v4 / 4);
  }
  specialized UnsafeMutablePointer.initialize(from:count:)(__src, a2, v3 + 32);
  return v3;
}

void *specialized ChunksOfCountCollection.init(_base:_chunkCount:)(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4, uint64_t a5)
{
  unint64_t v6 = a4 >> 1;
  uint64_t v7 = (a4 >> 1) - a3;
  if (__OFSUB__(a4 >> 1, a3)) {
    BUG();
  }
  if (a5 <= 0)
  {
    if (v7 <= 0 && v7 > a5) {
      goto LABEL_9;
    }
  }
  else if (v7 >= 0 && v7 < (unint64_t)a5)
  {
    goto LABEL_9;
  }
  unint64_t v6 = a5 + a3;
  if (__OFADD__(a5, a3)) {
    BUG();
  }
LABEL_9:
  void *result = a1;
  result[1] = a2;
  result[2] = a3;
  result[3] = a4;
  result[4] = a5;
  result[5] = v6;
  return result;
}

uint64_t specialized Sequence._copySequenceContents(initializing:)(void *a1, void *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5 = -1 << *(unsigned char *)(a4 + 32);
  uint64_t v6 = ~(-1 << -(char)v5);
  if (-v5 >= 64) {
    uint64_t v6 = -1;
  }
  uint64_t v7 = a4 + 56;
  unint64_t v8 = *(void *)(a4 + 56) & v6;
  if (!a2)
  {
    int64_t v10 = 0;
    a3 = 0;
    goto LABEL_37;
  }
  if (!a3)
  {
    int64_t v10 = 0;
    goto LABEL_37;
  }
  if (a3 < 0) {
    BUG();
  }
  int64_t v9 = (unint64_t)(63 - v5) >> 6;
  int64_t v10 = 0;
  uint64_t v11 = 0;
  while (v8)
  {
    _BitScanForward64(&v12, v8);
    v8 &= v8 - 1;
    unint64_t v13 = v12 | (v10 << 6);
LABEL_22:
    ++v11;
    *a2++ = *(void *)(*(void *)(a4 + 48) + 8 * v13);
    if (v11 == a3) {
      goto LABEL_37;
    }
  }
  int64_t v14 = v10 + 1;
  if (__OFADD__(1, v10)) {
    BUG();
  }
  if (v14 >= v9) {
    goto LABEL_36;
  }
  unint64_t i = *(void *)(v7 + 8 * v14);
  if (i)
  {
    ++v10;
LABEL_21:
    _BitScanForward64(&v16, i);
    unint64_t v8 = i & (i - 1);
    unint64_t v13 = v16 + (v10 << 6);
    goto LABEL_22;
  }
  v10 += 2;
  if (v14 + 1 >= v9)
  {
    int64_t v10 = v14;
    goto LABEL_36;
  }
  unint64_t i = *(void *)(v7 + 8 * v14 + 8);
  if (i) {
    goto LABEL_21;
  }
  if (v14 + 2 >= v9) {
    goto LABEL_36;
  }
  unint64_t i = *(void *)(v7 + 8 * v14 + 16);
  if (i)
  {
    int64_t v10 = v14 + 2;
    goto LABEL_21;
  }
  if (v14 + 3 >= v9)
  {
    int64_t v10 = v14 + 2;
    goto LABEL_36;
  }
  unint64_t i = *(void *)(v7 + 8 * v14 + 24);
  if (i)
  {
    int64_t v10 = v14 + 3;
    goto LABEL_21;
  }
  int64_t v10 = v14 + 4;
  if (v14 + 4 < v9)
  {
    for (unint64_t i = *(void *)(v7 + 8 * v14 + 32); !i; unint64_t i = *(void *)(v7 + 8 * v10))
    {
      if (__OFADD__(1, v10++)) {
        BUG();
      }
      if (v10 >= v9)
      {
        int64_t v10 = v9 - 1;
        goto LABEL_36;
      }
    }
    goto LABEL_21;
  }
  int64_t v10 = v14 + 3;
LABEL_36:
  unint64_t v8 = 0;
  a3 = v11;
LABEL_37:
  *a1 = a4;
  a1[1] = v7;
  a1[2] = ~v5;
  a1[3] = v10;
  a1[4] = v8;
  return a3;
}

{
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  int64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  int64_t v12;
  unint64_t i;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  int64_t v22;
  uint64_t v23;
  void *v24;

  uint64_t v5 = -1 << *(unsigned char *)(a4 + 32);
  uint64_t v6 = ~(-1 << -(char)v5);
  if (-v5 >= 64) {
    uint64_t v6 = -1;
  }
  uint64_t v23 = a4 + 56;
  uint64_t v7 = *(void *)(a4 + 56) & v6;
  if (!a2)
  {
    unint64_t v8 = 0;
    a3 = 0;
    goto LABEL_38;
  }
  if (!a3)
  {
    unint64_t v8 = 0;
    goto LABEL_38;
  }
  if (a3 < 0) {
    BUG();
  }
  uint64_t v24 = a1;
  uint64_t v22 = (unint64_t)(63 - v5) >> 6;
  unint64_t v8 = 0;
  int64_t v9 = 0;
  while (1)
  {
    if (v7)
    {
      _BitScanForward64(&v10, v7);
      v7 &= v7 - 1;
      uint64_t v11 = v10 | (v8 << 6);
      goto LABEL_22;
    }
    unint64_t v12 = v8 + 1;
    if (__OFADD__(1, v8)) {
      BUG();
    }
    if (v12 >= v22) {
      goto LABEL_37;
    }
    unint64_t i = *(void *)(v23 + 8 * v12);
    if (!i) {
      break;
    }
    ++v8;
LABEL_21:
    _BitScanForward64(&v14, i);
    uint64_t v7 = i & (i - 1);
    uint64_t v11 = v14 + (v8 << 6);
LABEL_22:
    ++v9;
    uint64_t v15 = *(void *)(a4 + 48);
    unint64_t v16 = 16 * v11;
    uint64_t v17 = *(void *)(v15 + v16 + 8);
    *a2 = *(void *)(v15 + v16);
    a2[1] = v17;
    uint64_t v18 = a3;
    if (v9 == a3)
    {
      swift_bridgeObjectRetain(v17);
      a1 = v24;
      a3 = v18;
      goto LABEL_38;
    }
    a2 += 2;
    swift_bridgeObjectRetain(v17);
    a3 = v18;
  }
  v8 += 2;
  if (v12 + 1 >= v22)
  {
    unint64_t v8 = v12;
    goto LABEL_37;
  }
  unint64_t i = *(void *)(v23 + 8 * v12 + 8);
  if (i) {
    goto LABEL_21;
  }
  if (v12 + 2 >= v22) {
    goto LABEL_37;
  }
  unint64_t i = *(void *)(v23 + 8 * v12 + 16);
  if (i)
  {
    unint64_t v8 = v12 + 2;
    goto LABEL_21;
  }
  if (v12 + 3 >= v22)
  {
    unint64_t v8 = v12 + 2;
    goto LABEL_37;
  }
  unint64_t i = *(void *)(v23 + 8 * v12 + 24);
  if (i)
  {
    unint64_t v8 = v12 + 3;
    goto LABEL_21;
  }
  unint64_t v8 = v12 + 4;
  if (v12 + 4 < v22)
  {
    for (unint64_t i = *(void *)(v23 + 8 * v12 + 32); !i; unint64_t i = *(void *)(v23 + 8 * v8))
    {
      if (__OFADD__(1, v8++)) {
        BUG();
      }
      if (v8 >= v22)
      {
        unint64_t v8 = v22 - 1;
        goto LABEL_37;
      }
    }
    goto LABEL_21;
  }
  unint64_t v8 = v12 + 3;
LABEL_37:
  uint64_t v7 = 0;
  a3 = v9;
  a1 = v24;
LABEL_38:
  *a1 = a4;
  a1[1] = v23;
  a1[2] = ~v5;
  a1[3] = v8;
  a1[4] = v7;
  return a3;
}

{
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  void *v9;
  int64_t v10;
  unint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t i;
  unint64_t v15;
  uint64_t v16;
  uint64_t v19;
  int64_t v20;
  uint64_t v21;
  void *v22;
  uint64_t v23;

  uint64_t v6 = -1 << *(unsigned char *)(a4 + 32);
  uint64_t v7 = ~(-1 << -(char)v6);
  if (-v6 >= 64) {
    uint64_t v7 = -1;
  }
  uint64_t v21 = a4 + 64;
  unint64_t v8 = *(void *)(a4 + 64) & v7;
  if (!a2)
  {
    int64_t v10 = 0;
    a3 = 0;
    goto LABEL_38;
  }
  if (!a3)
  {
    int64_t v10 = 0;
    goto LABEL_38;
  }
  if (a3 < 0) {
    BUG();
  }
  int64_t v9 = a2;
  uint64_t v19 = a3;
  uint64_t v22 = a1;
  uint64_t v23 = v6;
  uint64_t v20 = (unint64_t)(63 - v6) >> 6;
  int64_t v10 = 0;
  a3 = 0;
  while (1)
  {
    if (v8)
    {
      _BitScanForward64(&v11, v8);
      v8 &= v8 - 1;
      unint64_t v12 = v11 | (v10 << 6);
      goto LABEL_22;
    }
    unint64_t v13 = v10 + 1;
    if (__OFADD__(1, v10)) {
      BUG();
    }
    if (v13 >= v20) {
      goto LABEL_37;
    }
    unint64_t i = *(void *)(v21 + 8 * v13);
    if (!i) {
      break;
    }
    ++v10;
LABEL_21:
    _BitScanForward64(&v15, i);
    unint64_t v8 = i & (i - 1);
    unint64_t v12 = v15 + (v10 << 6);
LABEL_22:
    ++a3;
    unint64_t v16 = *(void *)(*(void *)(a4 + 56) + 8 * v12);
    *int64_t v9 = v16;
    if (a3 == v19)
    {
      swift_bridgeObjectRetain(v16);
      a1 = v22;
      uint64_t v6 = v23;
      a3 = v19;
      goto LABEL_38;
    }
    ++v9;
    swift_bridgeObjectRetain(v16);
  }
  v10 += 2;
  if (v13 + 1 >= v20)
  {
    int64_t v10 = v13;
    goto LABEL_37;
  }
  unint64_t i = *(void *)(v21 + 8 * v13 + 8);
  if (i) {
    goto LABEL_21;
  }
  if (v13 + 2 >= v20) {
    goto LABEL_37;
  }
  unint64_t i = *(void *)(v21 + 8 * v13 + 16);
  if (i)
  {
    int64_t v10 = v13 + 2;
    goto LABEL_21;
  }
  if (v13 + 3 >= v20)
  {
    int64_t v10 = v13 + 2;
    goto LABEL_37;
  }
  unint64_t i = *(void *)(v21 + 8 * v13 + 24);
  if (i)
  {
    int64_t v10 = v13 + 3;
    goto LABEL_21;
  }
  int64_t v10 = v13 + 4;
  if (v13 + 4 < v20)
  {
    for (unint64_t i = *(void *)(v21 + 8 * v13 + 32); !i; unint64_t i = *(void *)(v21 + 8 * v10))
    {
      if (__OFADD__(1, v10++)) {
        BUG();
      }
      if (v10 >= v20)
      {
        int64_t v10 = v20 - 1;
        goto LABEL_37;
      }
    }
    goto LABEL_21;
  }
  int64_t v10 = v13 + 3;
LABEL_37:
  unint64_t v8 = 0;
  a1 = v22;
  uint64_t v6 = v23;
LABEL_38:
  *a1 = a4;
  a1[1] = v21;
  a1[2] = ~v6;
  a1[3] = v10;
  a1[4] = v8;
  return a3;
}

{
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  void *v9;
  int64_t v10;
  unint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t i;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v21;
  int64_t v22;
  uint64_t v23;
  void *v24;
  uint64_t v25;

  uint64_t v6 = -1 << *(unsigned char *)(a4 + 32);
  uint64_t v7 = ~(-1 << -(char)v6);
  if (-v6 >= 64) {
    uint64_t v7 = -1;
  }
  uint64_t v23 = a4 + 64;
  unint64_t v8 = *(void *)(a4 + 64) & v7;
  if (!a2)
  {
    int64_t v10 = 0;
    a3 = 0;
    goto LABEL_38;
  }
  if (!a3)
  {
    int64_t v10 = 0;
    goto LABEL_38;
  }
  if (a3 < 0) {
    BUG();
  }
  int64_t v9 = a2;
  uint64_t v21 = a3;
  uint64_t v24 = a1;
  uint64_t v25 = v6;
  uint64_t v22 = (unint64_t)(63 - v6) >> 6;
  int64_t v10 = 0;
  a3 = 0;
  while (1)
  {
    if (v8)
    {
      _BitScanForward64(&v11, v8);
      v8 &= v8 - 1;
      unint64_t v12 = v11 | (v10 << 6);
      goto LABEL_22;
    }
    unint64_t v13 = v10 + 1;
    if (__OFADD__(1, v10)) {
      BUG();
    }
    if (v13 >= v22) {
      goto LABEL_37;
    }
    unint64_t i = *(void *)(v23 + 8 * v13);
    if (!i) {
      break;
    }
    ++v10;
LABEL_21:
    _BitScanForward64(&v15, i);
    unint64_t v8 = i & (i - 1);
    unint64_t v12 = v15 + (v10 << 6);
LABEL_22:
    ++a3;
    unint64_t v16 = *(void *)(a4 + 48);
    uint64_t v17 = 16 * v12;
    uint64_t v18 = *(void *)(v16 + v17 + 8);
    *int64_t v9 = *(void *)(v16 + v17);
    v9[1] = v18;
    if (a3 == v21)
    {
      swift_bridgeObjectRetain(v18);
      a1 = v24;
      uint64_t v6 = v25;
      a3 = v21;
      goto LABEL_38;
    }
    v9 += 2;
    swift_bridgeObjectRetain(v18);
  }
  v10 += 2;
  if (v13 + 1 >= v22)
  {
    int64_t v10 = v13;
    goto LABEL_37;
  }
  unint64_t i = *(void *)(v23 + 8 * v13 + 8);
  if (i) {
    goto LABEL_21;
  }
  if (v13 + 2 >= v22) {
    goto LABEL_37;
  }
  unint64_t i = *(void *)(v23 + 8 * v13 + 16);
  if (i)
  {
    int64_t v10 = v13 + 2;
    goto LABEL_21;
  }
  if (v13 + 3 >= v22)
  {
    int64_t v10 = v13 + 2;
    goto LABEL_37;
  }
  unint64_t i = *(void *)(v23 + 8 * v13 + 24);
  if (i)
  {
    int64_t v10 = v13 + 3;
    goto LABEL_21;
  }
  int64_t v10 = v13 + 4;
  if (v13 + 4 < v22)
  {
    for (unint64_t i = *(void *)(v23 + 8 * v13 + 32); !i; unint64_t i = *(void *)(v23 + 8 * v10))
    {
      if (__OFADD__(1, v10++)) {
        BUG();
      }
      if (v10 >= v22)
      {
        int64_t v10 = v22 - 1;
        goto LABEL_37;
      }
    }
    goto LABEL_21;
  }
  int64_t v10 = v13 + 3;
LABEL_37:
  unint64_t v8 = 0;
  a1 = v24;
  uint64_t v6 = v25;
LABEL_38:
  *a1 = a4;
  a1[1] = v23;
  a1[2] = ~v6;
  a1[3] = v10;
  a1[4] = v8;
  return a3;
}

size_t _swift_stdlib_malloc_size(const void *ptr)
{
  return malloc_size(ptr);
}

uint64_t specialized Sequence._copySequenceContents(initializing:)(void *a1, uint64_t *a2, uint64_t a3)
{
  long long v4 = a1;
  uint64_t v5 = 0;
  if (!a2) {
    goto LABEL_11;
  }
  if (!a3)
  {
    uint64_t v5 = 0;
    goto LABEL_14;
  }
  if (a3 < 0) {
    BUG();
  }
  uint64_t v6 = a2;
  uint64_t v13 = a3;
  if (!CMLDictionary.size.getter())
  {
    uint64_t v5 = 0;
LABEL_11:
    a3 = 0;
    goto LABEL_14;
  }
  uint64_t v7 = 1;
  uint64_t v5 = 0;
  uint64_t v8 = CMLDictionary.keyAndValue(at:)(0);
  uint64_t v14 = v9;
  while (1)
  {
    swift_retain();
    uint64_t v5 = specialized RandomAccessCollection<>.index(after:)(v5);
    swift_release();
    *uint64_t v6 = v8;
    v6[1] = v14;
    a3 = v13;
    if (v13 == v7) {
      break;
    }
    if (v5 == CMLDictionary.size.getter())
    {
      a3 = v7;
      break;
    }
    uint64_t v10 = CMLDictionary.keyAndValue(at:)(v5);
    uint64_t v14 = v11;
    uint64_t v8 = v10;
    v6 += 2;
    ++v7;
  }
  long long v4 = a1;
LABEL_14:
  *long long v4 = v3;
  v4[1] = v5;
  return a3;
}

uint64_t specialized Sequence._copySequenceContents(initializing:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  int64_t v7 = specialized Dictionary.startIndex.getter(a4);
  uint64_t v9 = v8;
  char v10 = v6 & 1;
  if (a2)
  {
    if (a3)
    {
      if (a3 < 0) {
        BUG();
      }
      if (v6) {
        BUG();
      }
      uint64_t v11 = a4 + 64;
      uint64_t v24 = a3 - 1;
      uint64_t result = 0;
      uint64_t v25 = a3;
      uint64_t v23 = a4 + 64;
      while (1)
      {
        uint64_t v13 = 1 << *(unsigned char *)(a4 + 32);
        if (*(_DWORD *)(a4 + 36) != v9) {
          BUG();
        }
        if (v7 == v13)
        {
          char v10 = 0;
          goto LABEL_20;
        }
        if (v7 < 0 || v7 >= v13) {
          BUG();
        }
        uint64_t v14 = *(void *)(v11 + 8 * ((unint64_t)v7 >> 6));
        if (!_bittest64(&v14, v7)) {
          BUG();
        }
        int v26 = *(_DWORD *)(a4 + 36);
        uint64_t v22 = result;
        uint64_t v15 = *(void *)(a4 + 48);
        uint64_t v16 = *(void *)(a4 + 56);
        uint64_t v17 = *(void **)(v15 + 24 * v7);
        uint64_t v21 = *(void **)(v15 + 24 * v7 + 8);
        char v18 = *(unsigned char *)(v15 + 24 * v7 + 16);
        int64_t v20 = v7;
        uint64_t v27 = *(void **)(v16 + 24 * v7);
        int v28 = *(void **)(v16 + 24 * v7 + 8);
        char v31 = *(unsigned char *)(v16 + 24 * v7 + 16);
        outlined copy of MLDataValue(v27, v28, v31);
        char v30 = v18;
        outlined copy of MLDataValue(v17, v21, v18);
        outlined copy of MLDataValue(v27, v28, v31);
        outlined copy of MLDataValue(v17, v21, v18);
        outlined consume of MLDataValue(v17, v21, v18);
        outlined consume of MLDataValue(v27, v28, v31);
        if (v7 >= -(-1 << *(unsigned char *)(a4 + 32))) {
          BUG();
        }
        if (((1 << v7) & *(void *)(v23 + 8 * ((unint64_t)v7 >> 6))) == 0) {
          BUG();
        }
        uint64_t v11 = a4 + 64;
        if (*(_DWORD *)(a4 + 36) != v26) {
          BUG();
        }
        uint64_t v19 = ~(-1 << *(unsigned char *)(a4 + 32));
        swift_bridgeObjectRetain(a4);
        int64_t v7 = _HashTable.occupiedBucket(after:)(v20, v23, v19);
        uint64_t v9 = *(unsigned int *)(a4 + 36);
        swift_bridgeObjectRelease(a4);
        *(void *)a2 = v17;
        *(void *)(a2 + 8) = v21;
        *(unsigned char *)(a2 + 16) = v30;
        *(void *)(a2 + 24) = v27;
        *(void *)(a2 + 32) = v28;
        *(unsigned char *)(a2 + 40) = v31;
        if (v24 == v22) {
          break;
        }
        a2 += 48;
        uint64_t result = v22 + 1;
      }
      char v10 = 0;
      uint64_t result = v25;
    }
    else
    {
      uint64_t result = 0;
    }
  }
  else
  {
    uint64_t result = 0;
  }
LABEL_20:
  *(void *)a1 = a4;
  *(void *)(a1 + 8) = v7;
  *(void *)(a1 + 16) = v9;
  *(unsigned char *)(a1 + 24) = v10;
  return result;
}

uint64_t specialized Sequence._copySequenceContents(initializing:)(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, double a5)
{
  char v6 = a1;
  uint64_t i = 0;
  if (a2)
  {
    if (a3)
    {
      if (a3 < 0) {
        BUG();
      }
      if (CMLSequence.size.getter())
      {
        uint64_t v14 = a2;
        swift_retain();
        uint64_t v9 = CMLSequence.value(at:)(0);
        for (uint64_t i = 1; ; ++i)
        {
          swift_release();
          MLDataValue.init(_:)(v9, a5);
          swift_retain();
          uint64_t v10 = CMLSequence.size.getter();
          swift_release();
          if (i - 1 >= v10) {
            BUG();
          }
          a5 = *(double *)&v12;
          *(_OWORD *)uint64_t v14 = v12;
          *(unsigned char *)(v14 + 16) = v13;
          if (a3 == i) {
            break;
          }
          if (i == CMLSequence.size.getter()) {
            goto LABEL_13;
          }
          v14 += 24;
          swift_retain();
          uint64_t v9 = CMLSequence.value(at:)(i);
        }
        uint64_t i = a3;
LABEL_13:
        char v6 = a1;
      }
      else
      {
        uint64_t i = 0;
      }
    }
    else
    {
      uint64_t i = 0;
    }
  }
  *char v6 = a4;
  v6[1] = i;
  return i;
}

{
  void *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t i;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  long long v17;
  char v18;

  char v6 = a1;
  if (a2)
  {
    if (a3)
    {
      if (a3 < 0) {
        BUG();
      }
      int64_t v7 = a2;
      swift_retain();
      uint64_t v8 = CMLSequence.size.getter();
      uint64_t i = 0;
      uint64_t v10 = specialized RandomAccessCollection<>.distance(from:to:)(0, v8);
      swift_release();
      if (v10)
      {
        swift_retain();
        uint64_t v11 = CMLSequence.value(at:)(0);
        for (uint64_t i = 1; ; ++i)
        {
          swift_release();
          MLDataValue.init(_:)(v11, a5);
          swift_retain();
          long long v12 = CMLSequence.size.getter();
          char v13 = specialized RandomAccessCollection<>.distance(from:to:)(0, v12);
          swift_release();
          if (i - 1 >= v13) {
            BUG();
          }
          a5 = *(double *)&v17;
          *(_OWORD *)int64_t v7 = v17;
          *(unsigned char *)(v7 + 16) = v18;
          if (a3 == i) {
            break;
          }
          swift_retain();
          uint64_t v14 = CMLSequence.size.getter();
          uint64_t v15 = specialized RandomAccessCollection<>.distance(from:to:)(0, v14);
          swift_release();
          if (i == v15) {
            goto LABEL_13;
          }
          v7 += 24;
          swift_retain();
          uint64_t v11 = CMLSequence.value(at:)(i);
        }
        uint64_t i = a3;
LABEL_13:
        char v6 = a1;
      }
    }
    else
    {
      uint64_t i = 0;
    }
  }
  else
  {
    uint64_t i = 0;
  }
  *char v6 = a4;
  v6[1] = i;
  return i;
}

Swift::Int specialized Sequence._copySequenceContents(initializing:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, char a5)
{
  uint64_t v5 = a4;
  if (!a2) {
    goto LABEL_10;
  }
  Swift::Int v6 = a3;
  if (!a3) {
    goto LABEL_11;
  }
  if (a3 < 0) {
    BUG();
  }
  uint64_t v7 = a2;
  *(void *)&long long v12 = a4;
  char v8 = a5 & 1;
  BYTE8(v12) = a5 & 1;
  if (!MLDataTable.size.getter())
  {
LABEL_10:
    Swift::Int v6 = 0;
    goto LABEL_11;
  }
  Swift::Int v11 = v6;
  Swift::Int v10 = v6 - 1;
  Swift::Int v6 = 0;
  uint64_t v14 = v5;
  while (1)
  {
    MLDataTable.Rows.subscript.getter(v6);
    if (v6 >= MLDataTable.size.getter()) {
      BUG();
    }
    *(_OWORD *)uint64_t v7 = v12;
    *(void *)(v7 + 16) = v13;
    if (v10 == v6) {
      break;
    }
    uint64_t v5 = v14;
    *(void *)&long long v12 = v14;
    BYTE8(v12) = v8;
    ++v6;
    v7 += 24;
    if (v6 == MLDataTable.size.getter()) {
      goto LABEL_11;
    }
  }
  Swift::Int v6 = v11;
  uint64_t v5 = v14;
LABEL_11:
  *(void *)a1 = v5;
  *(unsigned char *)(a1 + 8) = a5 & 1;
  *(void *)(a1 + 16) = v6;
  return v6;
}

uint64_t specialized Sequence._copySequenceContents(initializing:)(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v7 = a5;
  uint64_t v32 = 0;
  if (a2)
  {
    if (a3)
    {
      if (a3 < 0) {
        BUG();
      }
      char v30 = a1;
      uint64_t v32 = 0;
      uint64_t v31 = a4;
      while (1)
      {
        uint64_t v26 = a2;
        swift_retain();
        swift_bridgeObjectRetain(v7);
        swift_retain_n(a6);
        uint64_t v8 = CMLSequence.size.getter();
        uint64_t v9 = specialized RandomAccessCollection<>.distance(from:to:)(0, v8);
        swift_retain();
        uint64_t v10 = CMLSequence.size.getter();
        uint64_t v11 = specialized RandomAccessCollection<>.distance(from:to:)(0, v10);
        swift_release();
        if (v11 < 0) {
          BUG();
        }
        swift_retain();
        uint64_t v12 = CMLSequence.size.getter();
        uint64_t v13 = specialized RandomAccessCollection<>.distance(from:to:)(0, v12);
        swift_bridgeObjectRelease(v7);
        swift_release();
        swift_release_n(a6);
        if (v9 < 0 || v13 < v9) {
          BUG();
        }
        if (v32 == v9) {
          break;
        }
        CMLSequence.value(at:)(v32);
        Swift::String v14 = CMLFeatureValue.stringValue()();
        if (v15)
        {
          swift_errorRelease(v15);
          swift_release();
          _StringGuts.grow(_:)(37);
          swift_bridgeObjectRelease(0);
          v20._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter(&type metadata for Int, &protocol witness table for Int);
          char object = (char)v20._object;
          String.append(_:)(v20);
          swift_bridgeObjectRelease(object);
          v22._uint64_t countAndFlagsBits = 46;
          v22._char object = (void *)0xE100000000000000;
          String.append(_:)(v22);
          _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, 0xD000000000000022, "able.ColumnNames.swift" + 0x8000000000000000, "CreateML/MLDataTable.ColumnNames.swift", 38, 2, 17, 0);
          BUG();
        }
        uint64_t v17 = v14._object;
        uint64_t countAndFlagsBits = v14._countAndFlagsBits;
        swift_release();
        swift_retain();
        uint64_t v18 = CMLSequence.value(at:)(v32++);
        MLDataValue.init(_:)(v18, v16);
        swift_release();
        swift_bridgeObjectRetain((_BYTE)v17);
        outlined copy of MLDataValue(v23, v24, v25);
        swift_bridgeObjectRelease((_BYTE)v17);
        outlined consume of MLDataValue(v23, v24, v25);
        *(void *)uint64_t v26 = countAndFlagsBits;
        *(void *)(v26 + 8) = v17;
        *(void *)(v26 + 16) = v23;
        *(void *)(v26 + 24) = v24;
        *(unsigned char *)(v26 + 32) = v25;
        a2 = v26 + 40;
        uint64_t v7 = a5;
        a4 = v31;
        if (a3 == v32)
        {
          uint64_t v32 = a3;
          a1 = v30;
          goto LABEL_14;
        }
      }
      a1 = v30;
      a4 = v31;
    }
    else
    {
      uint64_t v32 = 0;
    }
  }
LABEL_14:
  *a1 = a4;
  a1[1] = v7;
  a1[2] = a6;
  uint64_t result = v32;
  a1[3] = v32;
  return result;
}

uint64_t specialized Sequence._copySequenceContents(initializing:)(void *a1, uint64_t *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v24 = a2;
  if (a2)
  {
    if (a3)
    {
      if (a3 < 0) {
        BUG();
      }
      swift_retain();
      uint64_t v7 = CMLSequence.size.getter();
      uint64_t v8 = specialized RandomAccessCollection<>.distance(from:to:)(0, v7);
      swift_release();
      uint64_t v9 = 0;
      if (v8)
      {
        uint64_t v26 = a1;
        CMLSequence.value(at:)(0);
        uint64_t v27 = a4;
        uint64_t v10 = 1;
        while (1)
        {
          uint64_t v23 = v10;
          uint64_t v25 = v10 - 1;
          Swift::String v11 = CMLFeatureValue.stringValue()();
          if (v12)
          {
            swift_release();
            swift_errorRelease(v12);
            _StringGuts.grow(_:)(37);
            swift_bridgeObjectRelease(0);
            v20._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter(&type metadata for Int, &protocol witness table for Int);
            char object = (char)v20._object;
            String.append(_:)(v20);
            swift_bridgeObjectRelease(object);
            v22._uint64_t countAndFlagsBits = 46;
            v22._char object = (void *)0xE100000000000000;
            String.append(_:)(v22);
            _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, 0xD000000000000022, "able.ColumnNames.swift" + 0x8000000000000000, "CreateML/MLDataTable.ColumnNames.swift", 38, 2, 17, 0);
            BUG();
          }
          uint64_t countAndFlagsBits = v11._countAndFlagsBits;
          Swift::String v14 = v11._object;
          swift_release();
          swift_retain();
          uint64_t v15 = CMLSequence.size.getter();
          uint64_t v16 = specialized RandomAccessCollection<>.distance(from:to:)(0, v15);
          swift_release();
          if (v25 >= v16) {
            BUG();
          }
          *uint64_t v24 = countAndFlagsBits;
          v24[1] = (uint64_t)v14;
          if (a3 == v23) {
            break;
          }
          a4 = v27;
          swift_retain();
          uint64_t v17 = CMLSequence.size.getter();
          uint64_t v18 = specialized RandomAccessCollection<>.distance(from:to:)(0, v17);
          swift_release();
          uint64_t v9 = v23;
          if (v23 == v18) {
            goto LABEL_14;
          }
          uint64_t v10 = v23 + 1;
          CMLSequence.value(at:)(v23);
          v24 += 2;
        }
        uint64_t v9 = a3;
        a4 = v27;
LABEL_14:
        a1 = v26;
      }
    }
    else
    {
      uint64_t v9 = 0;
    }
  }
  else
  {
    uint64_t v9 = 0;
  }
  *a1 = a4;
  a1[1] = v9;
  return v9;
}

uint64_t specialized Sequence._copySequenceContents(initializing:)(uint64_t a1, unsigned char *a2, uint64_t a3)
{
  uint64_t v101 = (unsigned char *)v3;
  uint64_t v6 = 0;
  int64_t v7 = *(void *)(*(void *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for DataFrame?)
                             - 8)
                 + 64);
  uint64_t v8 = alloca(v7);
  uint64_t v9 = alloca(v7);
  uint64_t v93 = v74;
  uint64_t v95 = type metadata accessor for DataFrame.Rows(0);
  uint64_t v86 = *(void *)(v95 - 8);
  int64_t v10 = *(void *)(v86 + 64);
  Swift::String v11 = alloca(v10);
  uint64_t v12 = alloca(v10);
  uint64_t v87 = v74;
  uint64_t v13 = alloca(v10);
  Swift::String v14 = alloca(v10);
  uint64_t v15 = alloca(v10);
  uint64_t v16 = alloca(v10);
  uint64_t v79 = v74;
  uint64_t v88 = type metadata accessor for DataFrame(0);
  int v83 = *(void **)(v88 - 8);
  int64_t v17 = v83[8];
  uint64_t v18 = alloca(v17);
  uint64_t v19 = alloca(v17);
  uint64_t v78 = v74;
  Swift::String v20 = alloca(v17);
  uint64_t v21 = alloca(v17);
  uint64_t v89 = v74;
  uint64_t v91 = type metadata accessor for Date(0);
  uint64_t v77 = *(void *)(v91 - 8);
  int64_t v22 = *(void *)(v77 + 64);
  uint64_t v23 = alloca(v22);
  uint64_t v24 = alloca(v22);
  uint64_t v92 = v74;
  uint64_t v85 = type metadata accessor for MLActivityClassifier.DataBatcher(0);
  int64_t v25 = *(void *)(*(void *)(v85 - 8) + 64);
  uint64_t v26 = alloca(v25);
  uint64_t v27 = alloca(v25);
  uint64_t v28 = (uint64_t)v101;
  uint64_t v101 = v74;
  outlined init with take of MLClassifierMetrics(v28, (uint64_t)v74, type metadata accessor for MLActivityClassifier.DataBatcher);
  int v82 = a2;
  if (a2)
  {
    if (a3)
    {
      if (a3 < 0) {
        BUG();
      }
      uint64_t v81 = v74;
      uint64_t v90 = a3;
      uint64_t v94 = a1;
      uint64_t v29 = *(int *)(v85 + 48);
      uint64_t v30 = *(void *)&v101[v29];
      uint64_t v31 = v87;
      DataFrame.rows.getter();
      uint64_t v32 = DataFrame.Rows.count.getter();
      BOOL v33 = *(void (**)(unsigned char *, uint64_t))(v86 + 8);
      uint64_t v34 = v31;
      v33(v31, v95);
      if (v30 >= v32)
      {
        uint64_t v97 = 0;
LABEL_33:
        uint64_t v70 = (uint64_t)v93;
        __swift_storeEnumTagSinglePayload((uint64_t)v93, 1, 1, v88);
        a1 = v94;
        uint64_t v6 = v97;
LABEL_34:
        outlined destroy of Either<LogisticRegressionClassifier<Float, String>, FullyConnectedNetworkClassifier<Float, String>>(v70, &demangling cache variable for type metadata for DataFrame?);
      }
      else
      {
        double v100 = *(double *)&v33;
        uint64_t v98 = 0;
        uint64_t v80 = v90 - 1;
        uint64_t v97 = 0;
        uint64_t v96 = v29;
        while (1)
        {
          uint64_t v35 = v92;
          Date.init()(v34);
          double v99 = Date.timeIntervalSince1970.getter(v34);
          uint64_t v36 = *(void (**)(unsigned char *, uint64_t))(v77 + 8);
          v36(v35, v91);
          double v37 = v99 * 1000.0;
          if ((~COERCE__INT64(v99 * 1000.0) & 0x7FF0000000000000) == 0) {
            BUG();
          }
          if (v37 <= -9.223372036854778e18) {
            BUG();
          }
          if (v37 >= 9.223372036854776e18) {
            BUG();
          }
          uint64_t v38 = (uint64_t)v101;
          uint64_t v39 = *(void *)&v101[*(int *)(v85 + 32)];
          uint64_t v40 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [Double]);
          uint64_t v41 = swift_dynamicCastMetatype(v39, v40);
          BOOL v84 = v36;
          if (v41)
          {
            uint64_t v42 = v96;
            uint64_t v43 = *(void *)(v38 + v96);
            BOOL v44 = __OFADD__(1, v43);
            uint64_t v45 = v43 + 1;
            if (v44) {
              BUG();
            }
            double v99 = *(double *)(v38 + v96);
            uint64_t v46 = v79;
            DataFrame.rows.getter();
            uint64_t v47 = DataFrame.Rows.count.getter();
            (*(void (**)(unsigned char *, uint64_t))&v100)(v46, v95);
            if (v47 < v45) {
              uint64_t v45 = v47;
            }
            *(void *)(v38 + v42) = v45;
            BOOL v48 = v92;
            Date.init()(v46);
            double v100 = Date.timeIntervalSince1970.getter(v46);
            v84(v48, v91);
            double v49 = v100 * 1000.0;
            if ((~COERCE__INT64(v100 * 1000.0) & 0x7FF0000000000000) == 0) {
              BUG();
            }
            if (v49 <= -9.223372036854778e18) {
              BUG();
            }
            if (v49 >= 9.223372036854776e18) {
              BUG();
            }
            BOOL v50 = v89;
            uint64_t v51 = v98;
            specialized MLActivityClassifier.DataBatcher.generateBatch<A>(startingAt:rowCount:seed:_:)(*(int64_t *)&v99, 1, (int)v49);
          }
          else
          {
            uint64_t v52 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [Float]);
            if (!swift_dynamicCastMetatype(v39, v52))
            {
              unint64_t v75 = 0;
              uint64_t v76 = (char *)0xE000000000000000;
              _StringGuts.grow(_:)(24);
              swift_bridgeObjectRelease((_BYTE)v76);
              unint64_t v75 = 0xD000000000000016;
              uint64_t v76 = "ityClassifier+Batching.swift" + 0x8000000000000000;
              v72._uint64_t countAndFlagsBits = _typeName(_:qualified:)(v39, 0);
              char object = (char)v72._object;
              String.append(_:)(v72);
              swift_bridgeObjectRelease(object);
              _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, v75, v76, "CreateML/MLActivityClassifier+Batching.swift", 44, 2, 348, 0);
              BUG();
            }
            uint64_t v53 = *(void *)(v38 + v96);
            BOOL v44 = __OFADD__(1, v53);
            uint64_t v54 = v53 + 1;
            BOOL v50 = v89;
            if (v44) {
              BUG();
            }
            double v99 = *(double *)(v38 + v96);
            uint64_t v55 = v81;
            DataFrame.rows.getter();
            uint64_t v56 = DataFrame.Rows.count.getter();
            (*(void (**)(unsigned char *, uint64_t))&v100)(v55, v95);
            if (v56 < v54) {
              uint64_t v54 = v56;
            }
            *(void *)(v38 + v96) = v54;
            uint64_t v57 = v92;
            Date.init()(v55);
            double v100 = Date.timeIntervalSince1970.getter(v55);
            v84(v57, v91);
            double v58 = v100 * 1000.0;
            if ((~COERCE__INT64(v100 * 1000.0) & 0x7FF0000000000000) == 0) {
              BUG();
            }
            if (v58 <= -9.223372036854778e18) {
              BUG();
            }
            if (v58 >= 9.223372036854776e18) {
              BUG();
            }
            uint64_t v51 = v98;
            specialized MLActivityClassifier.DataBatcher.generateBatch<A>(startingAt:rowCount:seed:_:)(*(int64_t *)&v99, 1, (int)v58);
          }
          if (v51)
          {
            swift_errorRelease(v51);
            goto LABEL_33;
          }
          uint64_t v98 = 0;
          uint64_t v59 = (uint64_t)v93;
          uint64_t v60 = (void (*)(unsigned char *, unsigned char *, uint64_t))v83[4];
          uint64_t v61 = v88;
          v60(v93, v50, v88);
          __swift_storeEnumTagSinglePayload(v59, 0, 1, v61);
          int EnumTagSinglePayload = __swift_getEnumTagSinglePayload(v59, 1, v61);
          uint64_t v6 = v97;
          uint64_t v63 = v59;
          BOOL v64 = v82;
          if (EnumTagSinglePayload == 1)
          {
            a1 = v94;
            uint64_t v70 = v63;
            goto LABEL_34;
          }
          uint64_t v65 = v78;
          v60(v78, (unsigned char *)v63, v61);
          v60(v64, v65, v61);
          if (v80 == v6) {
            break;
          }
          int v82 = &v64[v83[9]];
          uint64_t v66 = *(void *)&v101[v96];
          uint64_t v67 = v87;
          DataFrame.rows.getter();
          uint64_t v68 = v6;
          uint64_t v69 = DataFrame.Rows.count.getter();
          uint64_t v34 = v67;
          double v100 = *(double *)(v86 + 8);
          (*(void (**)(unsigned char *, uint64_t))&v100)(v67, v95);
          uint64_t v97 = v68 + 1;
          if (v66 >= v69) {
            goto LABEL_33;
          }
        }
        uint64_t v6 = v90;
        a1 = v94;
      }
    }
    else
    {
      uint64_t v6 = 0;
    }
  }
  outlined init with take of MLClassifierMetrics((uint64_t)v101, a1, type metadata accessor for MLActivityClassifier.DataBatcher);
  return v6;
}

uint64_t specialized Sequence._copySequenceContents(initializing:)(void *a1, uint64_t a2, uint64_t a3)
{
  long long v4 = a1;
  uint64_t i = 0;
  if (!a2) {
    goto LABEL_11;
  }
  uint64_t v6 = a3;
  if (!a3)
  {
    uint64_t i = 0;
    goto LABEL_14;
  }
  if (a3 < 0) {
    BUG();
  }
  if (!CMLSequence.size.getter())
  {
    uint64_t i = 0;
LABEL_11:
    uint64_t v6 = 0;
    goto LABEL_14;
  }
  uint64_t v10 = v6;
  uint64_t v7 = CMLSequence.value(at:)(0);
  uint64_t v8 = 1;
  for (i = 0; ; uint64_t v7 = CMLSequence.value(at:)(i))
  {
    swift_retain();
    uint64_t i = specialized RandomAccessCollection<>.index(after:)(i);
    swift_release();
    *(void *)(a2 + 8 * v8 - 8) = v7;
    uint64_t v6 = v10;
    if (v10 == v8) {
      break;
    }
    if (i == CMLSequence.size.getter())
    {
      uint64_t v6 = v8;
      break;
    }
    ++v8;
  }
  long long v4 = a1;
LABEL_14:
  *long long v4 = v3;
  v4[1] = i;
  return v6;
}

uint64_t specialized Sequence._copySequenceContents(initializing:)(void *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  if (!a2) {
    goto LABEL_5;
  }
  if (!a3)
  {
LABEL_6:
    uint64_t v5 = a4;
    goto LABEL_7;
  }
  if (a3 < 0) {
    BUG();
  }
  if (a5 == a4)
  {
LABEL_5:
    a3 = 0;
    goto LABEL_6;
  }
  if (a5 < a4) {
    BUG();
  }
  if (a5 <= a4) {
    BUG();
  }
  *a2 = a4;
  if (a3 == 1)
  {
    uint64_t v5 = a4 + 1;
  }
  else
  {
    uint64_t v7 = 1;
    while (1)
    {
      if (a3 == v7) {
        BUG();
      }
      if (!(v7 + a4 - a5)) {
        break;
      }
      if (a4 + v7 >= a5) {
        BUG();
      }
      a2[v7] = a4 + v7;
      if (a3 == ++v7)
      {
        uint64_t v5 = a4 + v7;
        goto LABEL_7;
      }
    }
    uint64_t v5 = a5;
    a3 = a5 - a4;
  }
LABEL_7:
  *a1 = a4;
  a1[1] = a5;
  a1[2] = v5;
  return a3;
}

uint64_t specialized Sequence._copySequenceContents(initializing:)(uint64_t a1, unsigned char *a2, uint64_t a3, uint64_t a4, char a5)
{
  if (!a2)
  {
    uint64_t result = 0;
    goto LABEL_13;
  }
  if (!a3) {
    goto LABEL_11;
  }
  if (a3 < 0) {
    BUG();
  }
  uint64_t result = a4;
  if (!a4) {
    goto LABEL_13;
  }
  if (a4 <= 0) {
    BUG();
  }
  *a2 = a5;
  if (a3 == 1)
  {
LABEL_11:
    uint64_t result = a3;
    goto LABEL_13;
  }
  uint64_t v6 = 1;
  while (1)
  {
    if (a3 == v6) {
      BUG();
    }
    if (a4 == v6) {
      break;
    }
    a2[v6++] = a5;
    if (a3 == v6) {
      goto LABEL_11;
    }
  }
  uint64_t result = a4;
LABEL_13:
  *(void *)a1 = a4;
  *(unsigned char *)(a1 + 8) = a5;
  *(void *)(a1 + 16) = result;
  return result;
}

uint64_t specialized Sequence._copySequenceContents(initializing:)(void *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6 = -1 << *(unsigned char *)(a4 + 32);
  uint64_t v7 = ~(-1 << -(char)v6);
  if (-v6 >= 64) {
    uint64_t v7 = -1;
  }
  uint64_t v25 = a4 + 56;
  unint64_t v8 = *(void *)(a4 + 56) & v7;
  if (!a2)
  {
    int64_t v10 = 0;
    a3 = 0;
    goto LABEL_38;
  }
  if (!a3)
  {
    int64_t v10 = 0;
    goto LABEL_38;
  }
  if (a3 < 0) {
    BUG();
  }
  uint64_t v9 = a2;
  uint64_t v23 = a3;
  uint64_t v26 = a1;
  uint64_t v27 = v6;
  int64_t v24 = (unint64_t)(63 - v6) >> 6;
  int64_t v10 = 0;
  a3 = 0;
  while (1)
  {
    if (v8)
    {
      _BitScanForward64(&v11, v8);
      v8 &= v8 - 1;
      unint64_t v12 = v11 | (v10 << 6);
      goto LABEL_22;
    }
    int64_t v13 = v10 + 1;
    if (__OFADD__(1, v10)) {
      BUG();
    }
    if (v13 >= v24) {
      goto LABEL_37;
    }
    unint64_t i = *(void *)(v25 + 8 * v13);
    if (!i) {
      break;
    }
    ++v10;
LABEL_21:
    _BitScanForward64(&v15, i);
    unint64_t v8 = i & (i - 1);
    unint64_t v12 = v15 + (v10 << 6);
LABEL_22:
    ++a3;
    uint64_t v16 = *(void *)(a4 + 48);
    uint64_t v17 = 24 * v12;
    uint64_t v18 = *(void *)(v16 + v17);
    uint64_t v19 = *(void *)(v16 + v17 + 8);
    char v20 = *(unsigned char *)(v16 + v17 + 16);
    *(void *)uint64_t v9 = v18;
    *(void *)(v9 + 8) = v19;
    *(unsigned char *)(v9 + 16) = v20;
    if (a3 == v23)
    {
      outlined copy of MLRecommender.Identifier(v18, v19, v20);
      a1 = v26;
      uint64_t v6 = v27;
      a3 = v23;
      goto LABEL_38;
    }
    v9 += 24;
    outlined copy of MLRecommender.Identifier(v18, v19, v20);
  }
  v10 += 2;
  if (v13 + 1 >= v24)
  {
    int64_t v10 = v13;
    goto LABEL_37;
  }
  unint64_t i = *(void *)(v25 + 8 * v13 + 8);
  if (i) {
    goto LABEL_21;
  }
  if (v13 + 2 >= v24) {
    goto LABEL_37;
  }
  unint64_t i = *(void *)(v25 + 8 * v13 + 16);
  if (i)
  {
    int64_t v10 = v13 + 2;
    goto LABEL_21;
  }
  if (v13 + 3 >= v24)
  {
    int64_t v10 = v13 + 2;
    goto LABEL_37;
  }
  unint64_t i = *(void *)(v25 + 8 * v13 + 24);
  if (i)
  {
    int64_t v10 = v13 + 3;
    goto LABEL_21;
  }
  int64_t v10 = v13 + 4;
  if (v13 + 4 < v24)
  {
    for (unint64_t i = *(void *)(v25 + 8 * v13 + 32); !i; unint64_t i = *(void *)(v25 + 8 * v10))
    {
      if (__OFADD__(1, v10++)) {
        BUG();
      }
      if (v10 >= v24)
      {
        int64_t v10 = v24 - 1;
        goto LABEL_37;
      }
    }
    goto LABEL_21;
  }
  int64_t v10 = v13 + 3;
LABEL_37:
  unint64_t v8 = 0;
  a1 = v26;
  uint64_t v6 = v27;
LABEL_38:
  *a1 = a4;
  a1[1] = v25;
  a1[2] = ~v6;
  a1[3] = v10;
  a1[4] = v8;
  return a3;
}

unint64_t specialized ChunksOfCountCollection.count.getter()
{
  uint64_t v1 = v0[3] >> 1;
  BOOL v2 = __OFSUB__(v1, v0[2]);
  uint64_t v3 = v1 - v0[2];
  if (v2) {
    BUG();
  }
  uint64_t v4 = v0[4];
  if (!v4) {
    BUG();
  }
  if (v3 == 0x8000000000000000 && v4 == -1) {
    BUG();
  }
  uint64_t v6 = v3 % v4;
  uint64_t v5 = v3 / v4;
  unint64_t v7 = (v6 > 0) | (unint64_t)(v6 >> 63);
  BOOL v2 = __OFADD__(v5, v7);
  unint64_t v8 = v5 + v7;
  if (v2) {
    BUG();
  }
  return v8;
}

void *outlined release of ChunksOfCountCollection<ArraySlice<String>>(void *a1)
{
  return a1;
}

uint64_t specialized closure #3 in MLActivityClassifier.DataBatcher.generateBatch<A>(startingAt:rowCount:seed:_:)(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  unint64_t v8 = v4;
  uint64_t v6 = v4;
  uint64_t result = specialized closure #3 in MLActivityClassifier.DataBatcher.generateBatch<A>(startingAt:rowCount:seed:_:)(*a1, a1[1], a2, (uint64_t)&v8, a4);
  if (!v5) {
    *uint64_t v6 = result;
  }
  return result;
}

uint64_t partial apply for specialized closure #3 in MLActivityClassifier.DataBatcher.generateBatch<A>(startingAt:rowCount:seed:_:)(uint64_t *a1, uint64_t a2)
{
  return specialized closure #3 in MLActivityClassifier.DataBatcher.generateBatch<A>(startingAt:rowCount:seed:_:)(a1, *(void *)(v2 + 16), a2, &demangling cache variable for type metadata for [Double]);
}

{
  uint64_t v2;

  return specialized closure #3 in MLActivityClassifier.DataBatcher.generateBatch<A>(startingAt:rowCount:seed:_:)(a1, *(void *)(v2 + 16), a2, &demangling cache variable for type metadata for [Float]);
}

uint64_t specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4, uint64_t a5)
{
  uint64_t v11 = a4;
  uint64_t v12 = a5;
  unint64_t v7 = __swift_allocate_boxed_opaque_existential_1(&v10);
  (*(void (**)(void *, uint64_t, uint64_t))(*(void *)(a4 - 8) + 32))(v7, a2, a4);
  uint64_t v8 = *a3;
  *(void *)(v8 + 16) = a1 + 1;
  return outlined init with take of MLIdentifier(&v10, v8 + 40 * a1 + 32);
}

uint64_t outlined init with take of MLIdentifier(long long *a1, uint64_t a2)
{
  uint64_t result = a2;
  *(void *)(a2 + 32) = *((void *)a1 + 4);
  long long v3 = *a1;
  *(_OWORD *)(a2 + 16) = a1[1];
  *(_OWORD *)a2 = v3;
  return result;
}

uint64_t outlined init with copy of MLHandPoseClassifier.PersistentParameters?(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for MLHandPoseClassifier.PersistentParameters?);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v2 - 8) + 16))(a2, a1, v2);
  return a2;
}

uint64_t partial apply for closure #1 in closure #1 in closure #1 in static MLHandPoseClassifier.resume(_:)(void *a1, double a2, double a3)
{
  return closure #1 in closure #1 in closure #1 in static MLHandPoseClassifier.resume(_:)(v3[2], v3[3], v3[4], v3[5], a1, a2, a3);
}

void *partial apply for closure #1 in static MLHandPoseClassifier.reformatKeypointsDataTable(table:featureColumn:)(uint64_t a1)
{
  return closure #1 in static MLHandPoseClassifier.reformatKeypointsDataTable(table:featureColumn:)(a1);
}

uint64_t outlined assign with copy of MLClassifierMetrics(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = type metadata accessor for MLClassifierMetrics(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v2 - 8) + 24))(a2, a1, v2);
  return a2;
}

uint64_t lazy protocol witness table accessor for type String? and conformance <A> A?()
{
  uint64_t result = lazy protocol witness table cache variable for type String? and conformance <A> A?;
  if (!lazy protocol witness table cache variable for type String? and conformance <A> A?)
  {
    uint64_t v1 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for String?);
    uint64_t result = swift_getWitnessTable(&protocol conformance descriptor for <A> A?, v1);
    lazy protocol witness table cache variable for type String? and conformance <A> A? = result;
  }
  return result;
}

void *outlined release of _NativeDictionary<String?, Int>.Iterator(void *a1)
{
  return a1;
}

uint64_t closure #1 in MLUntypedColumn.init<A>(_:)specialized partial apply(void *a1)
{
  return partial apply for specialized closure #1 in MLUntypedColumn.init<A>(_:)(a1);
}

{
  return partial apply for specialized closure #1 in MLUntypedColumn.init<A>(_:)(a1);
}

{
  return partial apply for specialized closure #1 in MLUntypedColumn.init<A>(_:)(a1);
}

{
  return partial apply for specialized closure #1 in MLUntypedColumn.init<A>(_:)(a1);
}

{
  return partial apply for specialized closure #1 in MLUntypedColumn.init<A>(_:)(a1);
}

{
  return partial apply for specialized closure #1 in MLUntypedColumn.init<A>(_:)(a1);
}

{
  return _s8CreateML15MLUntypedColumnVyACxcSTRzAA11MLDataValueO7ElementRtzlufcAA08_UntypedD0CyKXEfU_SayAEG_TG5TA_0(a1);
}

{
  return partial apply for specialized closure #1 in MLUntypedColumn.init<A>(_:)(a1);
}

{
  return partial apply for specialized closure #1 in MLUntypedColumn.init<A>(_:)(a1);
}

{
  return partial apply for specialized closure #1 in MLUntypedColumn.init<A>(_:)(a1);
}

{
  return partial apply for specialized closure #1 in MLUntypedColumn.init<A>(_:)(a1);
}

{
  return _s8CreateML15MLUntypedColumnVyACxcSTRzAA11MLDataValueO7ElementRtzlufcAA08_UntypedD0CyKXEfU_SayAEG_TG5TA_0(a1);
}

{
  return partial apply for specialized closure #1 in MLUntypedColumn.init<A>(_:)(a1);
}

{
  return partial apply for specialized closure #1 in MLUntypedColumn.init<A>(_:)(a1);
}

void *initializeBufferWithCopyOfBuffer for MLBoostedTreeClassifier.ModelParameters.ValidationData(unsigned char *__dst, unsigned char *__src, uint64_t a3)
{
  long long v3 = __dst;
  uint64_t v4 = *(void *)(a3 - 8);
  int v5 = *(_DWORD *)(v4 + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v10 = *(void *)__src;
    *long long v3 = *(void *)__src;
    long long v3 = (void *)(v10 + ((v5 + 16) & ~v5));
    swift_retain();
  }
  else
  {
    int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload(__src, a3);
    if (EnumCaseMultiPayload == 2)
    {
      uint64_t v11 = type metadata accessor for DataFrame(0);
      (*(void (**)(unsigned char *, unsigned char *, uint64_t))(*(void *)(v11 - 8) + 16))(__dst, __src, v11);
      swift_storeEnumTagMultiPayload(__dst, a3, 2);
    }
    else if (EnumCaseMultiPayload == 1)
    {
      uint64_t v8 = *(void *)__src;
      char v9 = __src[8];
      outlined copy of Result<_DataTable, Error>(*(void *)__src, v9);
      *(void *)__dst = v8;
      __dst[8] = v9;
      swift_storeEnumTagMultiPayload(__dst, a3, 1);
    }
    else
    {
      memcpy(__dst, __src, *(void *)(v4 + 64));
    }
  }
  return v3;
}

uint64_t destroy for MLBoostedTreeClassifier.ModelParameters.ValidationData(uint64_t a1, uint64_t a2)
{
  uint64_t result = swift_getEnumCaseMultiPayload(a1, a2);
  if (result == 2)
  {
    uint64_t v3 = type metadata accessor for DataFrame(0);
    return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(a1, v3);
  }
  else if (result == 1)
  {
    return outlined consume of Result<_DataTable, Error>(*(void *)a1, *(_DWORD *)(a1 + 8));
  }
  return result;
}

unsigned char *initializeWithCopy for MLBoostedTreeClassifier.ModelParameters.ValidationData(unsigned char *__dst, unsigned char *__src, uint64_t a3)
{
  int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload(__src, a3);
  if (EnumCaseMultiPayload == 2)
  {
    uint64_t v7 = type metadata accessor for DataFrame(0);
    (*(void (**)(unsigned char *, unsigned char *, uint64_t))(*(void *)(v7 - 8) + 16))(__dst, __src, v7);
    swift_storeEnumTagMultiPayload(__dst, a3, 2);
  }
  else if (EnumCaseMultiPayload == 1)
  {
    uint64_t v5 = *(void *)__src;
    char v6 = __src[8];
    outlined copy of Result<_DataTable, Error>(*(void *)__src, v6);
    *(void *)__dst = v5;
    __dst[8] = v6;
    swift_storeEnumTagMultiPayload(__dst, a3, 1);
  }
  else
  {
    memcpy(__dst, __src, *(void *)(*(void *)(a3 - 8) + 64));
  }
  return __dst;
}

unsigned char *assignWithCopy for MLBoostedTreeClassifier.ModelParameters.ValidationData(unsigned char *__dst, unsigned char *__src, uint64_t a3)
{
  if (__dst != __src)
  {
    outlined destroy of MLBoostedTreeClassifier.ModelParameters.ValidationData((uint64_t)__dst);
    int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload(__src, a3);
    if (EnumCaseMultiPayload == 2)
    {
      uint64_t v7 = type metadata accessor for DataFrame(0);
      (*(void (**)(unsigned char *, unsigned char *, uint64_t))(*(void *)(v7 - 8) + 16))(__dst, __src, v7);
      swift_storeEnumTagMultiPayload(__dst, a3, 2);
    }
    else if (EnumCaseMultiPayload == 1)
    {
      uint64_t v5 = *(void *)__src;
      char v6 = __src[8];
      outlined copy of Result<_DataTable, Error>(*(void *)__src, v6);
      *(void *)__dst = v5;
      __dst[8] = v6;
      swift_storeEnumTagMultiPayload(__dst, a3, 1);
    }
    else
    {
      memcpy(__dst, __src, *(void *)(*(void *)(a3 - 8) + 64));
    }
  }
  return __dst;
}

uint64_t outlined destroy of MLBoostedTreeClassifier.ModelParameters.ValidationData(uint64_t a1)
{
  uint64_t v1 = type metadata accessor for MLBoostedTreeClassifier.ModelParameters.ValidationData(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v1 - 8) + 8))(a1, v1);
  return a1;
}

uint64_t type metadata accessor for MLBoostedTreeClassifier.ModelParameters.ValidationData(uint64_t a1)
{
  uint64_t result = type metadata singleton initialization cache for MLBoostedTreeClassifier.ModelParameters.ValidationData;
  if (!type metadata singleton initialization cache for MLBoostedTreeClassifier.ModelParameters.ValidationData) {
    return swift_getSingletonMetadata(a1, &nominal type descriptor for MLBoostedTreeClassifier.ModelParameters.ValidationData);
  }
  return result;
}

void *initializeWithTake for MLBoostedTreeClassifier.ModelParameters.ValidationData(void *__dst, void *__src, uint64_t a3)
{
  if (swift_getEnumCaseMultiPayload(__src, a3) == 2)
  {
    uint64_t v4 = type metadata accessor for DataFrame(0);
    (*(void (**)(void *, void *, uint64_t))(*(void *)(v4 - 8) + 32))(__dst, __src, v4);
    swift_storeEnumTagMultiPayload(__dst, a3, 2);
  }
  else
  {
    memcpy(__dst, __src, *(void *)(*(void *)(a3 - 8) + 64));
  }
  return __dst;
}

void *assignWithTake for MLBoostedTreeClassifier.ModelParameters.ValidationData(void *__dst, void *__src, uint64_t a3)
{
  if (__dst != __src)
  {
    outlined destroy of MLBoostedTreeClassifier.ModelParameters.ValidationData((uint64_t)__dst);
    if (swift_getEnumCaseMultiPayload(__src, a3) == 2)
    {
      uint64_t v4 = type metadata accessor for DataFrame(0);
      (*(void (**)(void *, void *, uint64_t))(*(void *)(v4 - 8) + 32))(__dst, __src, v4);
      swift_storeEnumTagMultiPayload(__dst, a3, 2);
    }
    else
    {
      memcpy(__dst, __src, *(void *)(*(void *)(a3 - 8) + 64));
    }
  }
  return __dst;
}

uint64_t getEnumTagSinglePayload for MLBoostedTreeClassifier.ModelParameters.ValidationData(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return __swift_getEnumTagSinglePayload(a1, a2, a3);
}

uint64_t storeEnumTagSinglePayload for MLBoostedTreeClassifier.ModelParameters.ValidationData(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_storeEnumTagSinglePayload(a1, a2, a3, a4);
}

uint64_t getEnumTag for MLBoostedTreeClassifier.ModelParameters.ValidationData(uint64_t a1, uint64_t a2)
{
  return swift_getEnumCaseMultiPayload(a1, a2);
}

uint64_t destructiveInjectEnumTag for MLBoostedTreeClassifier.ModelParameters.ValidationData(uint64_t a1, unsigned int a2, uint64_t a3)
{
  return swift_storeEnumTagMultiPayload(a1, a3, a2);
}

uint64_t type metadata completion function for MLBoostedTreeClassifier.ModelParameters.ValidationData(uint64_t a1)
{
  uint64_t result = type metadata accessor for DataFrame(319);
  if (v2 <= 0x3F)
  {
    ((void (*)(uint64_t, uint64_t, uint64_t))swift_initEnumMetadataMultiPayload)(a1, 256, 3);
    return 0;
  }
  return result;
}

uint64_t MLBoostedTreeClassifier.ModelParameters.ValidationData.asTable()(__m128 a1)
{
  uint64_t v3 = v1;
  uint64_t v4 = type metadata accessor for DataFrame(0);
  uint64_t v27 = *(void *)(v4 - 8);
  int64_t v5 = *(void *)(v27 + 64);
  char v6 = alloca(v5);
  uint64_t v7 = alloca(v5);
  uint64_t v29 = &v25;
  uint64_t v8 = alloca(v5);
  char v9 = alloca(v5);
  uint64_t v28 = &v25;
  uint64_t v10 = type metadata accessor for MLBoostedTreeClassifier.ModelParameters.ValidationData(0);
  int64_t v11 = *(void *)(*(void *)(v10 - 8) + 64);
  uint64_t v12 = alloca(v11);
  int64_t v13 = alloca(v11);
  outlined init with copy of MLBoostedTreeClassifier.ModelParameters.ValidationData(v2, (uint64_t)&v25);
  uint64_t result = swift_getEnumCaseMultiPayload(&v25, v10);
  switch((int)result)
  {
    case 0:
      *(void *)uint64_t v3 = 0;
      *(unsigned char *)(v3 + 8) = -1;
      break;
    case 1:
      uint64_t result = v25;
      char v15 = v26;
      goto LABEL_7;
    case 2:
      uint64_t v16 = v28;
      uint64_t v17 = v27;
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(v27 + 32))(v28, &v25, v4);
      uint64_t v18 = (uint64_t)v29;
      *(double *)a1.i64 = (*(double (**)(uint64_t *, uint64_t *, uint64_t))(v17 + 16))(v29, v16, v4);
      MLDataTable.init(_:convertArraysToShapedArrays:)(v18, 1, a1);
      (*(void (**)(uint64_t *, uint64_t))(v17 + 8))(v16, v4);
      uint64_t result = v30;
      char v15 = v31;
LABEL_7:
      *(void *)uint64_t v3 = result;
      *(unsigned char *)(v3 + 8) = v15;
      break;
    case 3:
      uint64_t v19 = v3;
      uint64_t empty = tc_v1_sframe_create_empty(0);
      if (!empty) {
        BUG();
      }
      uint64_t v21 = empty;
      uint64_t v22 = type metadata accessor for CMLTable();
      uint64_t v23 = swift_allocObject(v22, 24, 7);
      *(void *)(v23 + 16) = v21;
      uint64_t v24 = type metadata accessor for _DataTable();
      swift_allocObject(v24, 40, 7);
      uint64_t result = _DataTable.init(impl:)(v23);
      *(void *)uint64_t v19 = result;
      *(unsigned char *)(v19 + 8) = 0;
      break;
  }
  return result;
}

uint64_t MLBoostedTreeClassifier.ModelParameters.ValidationData.generateDataFrames(trainingData:)(uint64_t a1, uint64_t a2, void (*a3)(uint64_t *, uint64_t, uint64_t))
{
  uint64_t v55 = v3;
  uint64_t v57 = a3;
  uint64_t v56 = (uint64_t *)a2;
  uint64_t v54 = a1;
  uint64_t v5 = type metadata accessor for DataFrame(0);
  uint64_t v58 = *(void *)(v5 - 8);
  int64_t v6 = *(void *)(v58 + 64);
  uint64_t v7 = alloca(v6);
  uint64_t v8 = alloca(v6);
  BOOL v50 = &v44;
  uint64_t v46 = type metadata accessor for DataFrame.Slice(0);
  uint64_t v51 = *(void *)(v46 - 8);
  int64_t v9 = *(void *)(v51 + 64);
  uint64_t v10 = alloca(v9);
  int64_t v11 = alloca(v9);
  BOOL v48 = &v44;
  uint64_t v12 = alloca(v9);
  int64_t v13 = alloca(v9);
  uint64_t v53 = &v44;
  Swift::String v14 = alloca(v9);
  char v15 = alloca(v9);
  uint64_t v52 = &v44;
  int64_t v16 = *(void *)(*(void *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for DataFrame.Slice?)
                              - 8)
                  + 64);
  uint64_t v17 = alloca(v16);
  uint64_t v18 = alloca(v16);
  uint64_t v47 = &v44;
  uint64_t v19 = alloca(v16);
  char v20 = alloca(v16);
  double v49 = &v44;
  uint64_t v21 = type metadata accessor for MLBoostedTreeClassifier.ModelParameters.ValidationData(0);
  int64_t v22 = *(void *)(*(void *)(v21 - 8) + 64);
  uint64_t v23 = alloca(v22);
  uint64_t v24 = alloca(v22);
  outlined init with copy of MLBoostedTreeClassifier.ModelParameters.ValidationData(v4, (uint64_t)&v44);
  switch(swift_getEnumCaseMultiPayload(&v44, v21))
  {
    case 0u:
      uint64_t v58 = v5;
      uint64_t v25 = (uint64_t)v49;
      uint64_t v26 = (uint64_t)v52;
      DataFrame.randomSplit(strategy:)((uint64_t)v49, (uint64_t)v52, (uint64_t)&v44);
      uint64_t v27 = v53;
      uint64_t v28 = v46;
      uint64_t v57 = *(void (**)(uint64_t *, uint64_t, uint64_t))(v51 + 16);
      v57(v53, v26, v46);
      DataFrame.init(_:)(v27);
      uint64_t v29 = (uint64_t)v47;
      outlined init with copy of DataFrame.Slice?(v25, (uint64_t)v47);
      if (__swift_getEnumTagSinglePayload(v29, 1, v28) == 1)
      {
        __swift_storeEnumTagSinglePayload((uint64_t)v56, 1, 1, v58);
        uint64_t v30 = *(void (**)(uint64_t *, uint64_t))(v51 + 8);
      }
      else
      {
        uint64_t v40 = v53;
        uint64_t v41 = v51;
        (*(void (**)(uint64_t *, uint64_t, uint64_t))(v51 + 32))(v53, v29, v28);
        uint64_t v42 = v48;
        v57(v48, (uint64_t)v40, v28);
        uint64_t v43 = (uint64_t)v56;
        DataFrame.init(_:)(v42);
        uint64_t v30 = *(void (**)(uint64_t *, uint64_t))(v41 + 8);
        v30(v53, v28);
        __swift_storeEnumTagSinglePayload(v43, 0, 1, v58);
      }
      v30(v52, v28);
      return outlined destroy of DataFrame.Slice?((uint64_t)v49);
    case 1u:
      uint64_t v35 = v44;
      char v36 = v45;
      (*(void (**)(uint64_t, void, uint64_t))(v58 + 16))(v54, v57, v5);
      uint64_t v44 = v35;
      char v45 = v36;
      uint64_t v37 = (uint64_t)v56;
      DataFrame.init(_:)((uint64_t)&v44);
      uint64_t v33 = v37;
      goto LABEL_10;
    case 2u:
      char v31 = *(void (**)(uint64_t *, uint64_t *, uint64_t))(v58 + 32);
      v31(v50, &v44, v5);
      if (DataFrameProtocol.isEmpty.getter(v5, &protocol witness table for DataFrame))
      {
        uint64_t v32 = v58;
        (*(void (**)(uint64_t *, uint64_t))(v58 + 8))(v50, v5);
        (*(void (**)(uint64_t, void, uint64_t))(v32 + 16))(v54, v57, v5);
LABEL_7:
        uint64_t v33 = (uint64_t)v56;
        uint64_t v34 = 1;
      }
      else
      {
        (*(void (**)(uint64_t, void, uint64_t))(v58 + 16))(v54, v57, v5);
        uint64_t v38 = (uint64_t)v56;
        v31(v56, v50, v5);
        uint64_t v33 = v38;
LABEL_10:
        uint64_t v34 = 0;
      }
      return __swift_storeEnumTagSinglePayload(v33, v34, 1, v5);
    case 3u:
      (*(void (**)(uint64_t, void, uint64_t))(v58 + 16))(v54, v57, v5);
      goto LABEL_7;
  }
}

uint64_t outlined init with copy of MLBoostedTreeClassifier.ModelParameters.ValidationData(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = type metadata accessor for MLBoostedTreeClassifier.ModelParameters.ValidationData(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v2 - 8) + 16))(a2, a1, v2);
  return a2;
}

uint64_t outlined destroy of DataFrame.Slice?(uint64_t a1)
{
  uint64_t v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for DataFrame.Slice?);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v1 - 8) + 8))(a1, v1);
  return a1;
}

uint64_t BlobsFile.init(data:)(uint64_t a1, unint64_t a2, __m128 a3, __m128 a4, __m128 a5)
{
  uint64_t v7 = v6;
  unint64_t v8 = a2;
  uint64_t v9 = a1;
  unint64_t v75 = v5;
  unint64_t v10 = a2 >> 62;
  outlined copy of Data._Representation(a1, a2);
  char v11 = static BlobsFile.isShort(_:)(a1, a2);
  unint64_t v12 = a2 >> 62;
  if (v11)
  {
    uint64_t v83 = v6;
    switch((char)v10)
    {
      case 0:
        unint64_t v13 = HIDWORD(a1);
        unint64_t v14 = a1;
        break;
      case 1:
        unint64_t v80 = v10;
        uint64_t v82 = a1;
        if (a1 >> 32 < (int)a1) {
          BUG();
        }
        unint64_t v81 = a2;
        swift_retain();
        specialized __DataStorage.withUnsafeBytes<A>(in:apply:)((int)a1);
        if (v83)
        {
          outlined consume of Data._Representation(v82, v81);
          BUG();
        }
        unint64_t v14 = v63;
        LODWORD(v13) = v64;
        uint64_t v9 = v82;
        unint64_t v8 = v81;
        outlined consume of Data._Representation(v82, v81);
        goto LABEL_17;
      case 2:
        unint64_t v80 = v10;
        unint64_t v81 = a2;
        uint64_t v18 = *(void *)(a1 + 16);
        swift_retain();
        swift_retain();
        specialized __DataStorage.withUnsafeBytes<A>(in:apply:)(v18);
        if (v83)
        {
          swift_release();
          swift_release();
          BUG();
        }
        unint64_t v14 = v61;
        LODWORD(v13) = v62;
        swift_release();
        swift_release();
        uint64_t v9 = a1;
        unint64_t v8 = v81;
LABEL_17:
        unint64_t v12 = v80;
        break;
      case 3:
        unint64_t v14 = 0;
        LODWORD(v13) = 0;
        break;
    }
    v70[0] = v14;
    v70[1] = v13;
    uint64_t v74 = 0;
    long long v71 = 0;
    long long v72 = 0;
    long long v73 = 0;
    if (v13 == 2)
    {
      unint64_t v80 = v14;
      switch(v12)
      {
        case 0uLL:
          unint64_t v26 = v8;
          uint64_t v27 = BYTE6(v8);
          uint64_t v28 = v8 & 0xFFFFFFFFFFFFLL;
          uint64_t v29 = v9;
          goto LABEL_30;
        case 1uLL:
          if (v9 >> 32 < (int)v9) {
            BUG();
          }
          uint64_t v82 = v8 & 0x3FFFFFFFFFFFFFFFLL;
          outlined copy of Data._Representation(v9, v8);
          uint64_t v43 = v83;
          uint64_t v44 = specialized __DataStorage.withUnsafeBytes<A>(in:apply:)((int)v9, v9 >> 32, v82, (uint64_t)v70, v9, v8, (void (*)(uint64_t, uint64_t, uint64_t, uint64_t, unint64_t))closure #1 in static BlobsFile.readShortMetadata(from:header:));
          if (v43) {
            goto LABEL_22;
          }
          uint64_t v83 = v44;
          unint64_t v26 = v8;
          goto LABEL_39;
        case 2uLL:
          v78.i64[0] = *(void *)(v9 + 16);
          uint64_t v36 = v9;
          uint64_t v37 = *(void *)(v9 + 24);
          outlined copy of Data._Representation(v36, v8);
          swift_retain();
          swift_retain();
          uint64_t v38 = v37;
          uint64_t v9 = v36;
          uint64_t v39 = v83;
          uint64_t v83 = specialized __DataStorage.withUnsafeBytes<A>(in:apply:)(v78.i64[0], v38, v8 & 0x3FFFFFFFFFFFFFFFLL, (uint64_t)v70, v36, v8, (void (*)(uint64_t, uint64_t, uint64_t, uint64_t, unint64_t))closure #1 in static BlobsFile.readShortMetadata(from:header:));
          swift_release();
          swift_release();
          if (v39) {
            goto LABEL_22;
          }
          unint64_t v26 = v8;
          uint64_t v79 = 0;
          __m128 v40 = 0;
          __m128 v78 = 0;
          goto LABEL_40;
        case 3uLL:
          unint64_t v26 = v8;
          uint64_t v29 = 0;
          uint64_t v28 = 0;
          uint64_t v27 = 0;
LABEL_30:
          uint64_t v41 = v83;
          ML12BlobMetadataVGTg5037_s10Foundation4DataV06InlineB0V15withb29BytesyxxSWKXEKlFxSWKXEfU_Say8g4ML12iJ6VG_TG5SWxsAC_pRi_zRi0_zlyAIIsgyrzo_SiTf1nc_n03_s8g83ML9BlobsFileV12readMetadata33_51650C64338C8A92DE2EF0956A9CC3554from6headerSayAA04i6F0VG10lM26V_AA6HeaderVtKFZAJSWKXEfU_AF6HeaderV10Foundation0M0VAF9BlobsFileVXMtTf1ncn_nTm = _ss15withUnsafeBytes2of_q0_x_q0_SWq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lFs5UInt8V_A13Et_sAC_pSay8CreateML12BlobMetadataVGTg5037_s10Foundation4DataV06InlineB0V15withb29BytesyxxSWKXEKlFxSWKXEfU_Say8g4ML12iJ6VG_TG5SWxsAC_pRi_zRi0_zlyAIIsgyrzo_SiTf1nc_n03_s8g83ML9BlobsFileV12readMetadata33_51650C64338C8A92DE2EF0956A9CC3554from6headerSayAA04i6F0VG10lM26V_AA6HeaderVtKFZAJSWKXEfU_AF6HeaderV10Foundation0M0VAF9BlobsFileVXMtTf1ncn_nTm(v29, v28, v27, (uint64_t)v70, v9, v26, (void (*)(uint64_t *, char *, uint64_t, uint64_t, unint64_t))closure #1 in static BlobsFile.readShortMetadata(from:header:));
          if (v41)
          {
            outlined consume of Data._Representation(v9, v26);
            unint64_t v8 = v26;
            goto LABEL_47;
          }
          uint64_t v83 = ML12BlobMetadataVGTg5037_s10Foundation4DataV06InlineB0V15withb29BytesyxxSWKXEKlFxSWKXEfU_Say8g4ML12iJ6VG_TG5SWxsAC_pRi_zRi0_zlyAIIsgyrzo_SiTf1nc_n03_s8g83ML9BlobsFileV12readMetadata33_51650C64338C8A92DE2EF0956A9CC3554from6headerSayAA04i6F0VG10lM26V_AA6HeaderVtKFZAJSWKXEfU_AF6HeaderV10Foundation0M0VAF9BlobsFileVXMtTf1ncn_nTm;
LABEL_39:
          __m128 v40 = 0;
          __m128 v78 = 0;
          uint64_t v79 = 0;
LABEL_40:
          __m128 v76 = v40;
          __m128 v77 = v40;
          break;
      }
LABEL_58:
      swift_bridgeObjectRelease(_swiftEmptyArrayStorage);
      outlined copy of Data._Representation(v9, v26);
      uint64_t v60 = v83;
      swift_bridgeObjectRetain(v83);
      outlined consume of Data._Representation(v9, v26);
      outlined consume of Data._Representation(v9, v26);
      swift_bridgeObjectRelease(v60);
      uint64_t result = (uint64_t)v75;
      *unint64_t v75 = v9;
      *(void *)(result + 8) = v26;
      *(_DWORD *)(result + 16) = v80;
      *(_DWORD *)(result + 20) = 2;
      *(void *)(result + 24) = v79;
      *(__m128 *)(result + 32) = v78;
      *(__m128 *)(result + 48) = v76;
      *(__m128 *)(result + 64) = v77;
      *(void *)(result + 80) = v60;
      return result;
    }
    uint64_t v30 = lazy protocol witness table accessor for type BlobsFileError and conformance BlobsFileError();
    swift_allocError(&type metadata for BlobsFileError, v30, 0, 0);
    *char v31 = 0;
    swift_willThrow(&type metadata for BlobsFileError, v30, v31, v32, v33, v34);
LABEL_22:
    uint64_t v35 = v9;
  }
  else
  {
    unint64_t v81 = a2;
    switch((char)v10)
    {
      case 0:
        unint64_t v15 = HIDWORD(a1);
        uint64_t v16 = a2 & 0xFFFFFFFFFFFFLL;
        unint64_t v17 = v9;
        break;
      case 1:
        unint64_t v80 = v10;
        uint64_t v83 = v6;
        if (a1 >> 32 >= (int)a1)
        {
          uint64_t v82 = a1;
          outlined copy of Data._Representation(a1, a2);
          if (__DataStorage._bytes.getter())
          {
            __DataStorage._offset.getter();
            JUMPOUT(0x2A35ELL);
          }
          __DataStorage._length.getter();
          BUG();
        }
        BUG();
      case 2:
        unint64_t v80 = v10;
        uint64_t v83 = v6;
        uint64_t v19 = *(void *)(a1 + 16);
        uint64_t v82 = a1;
        swift_retain();
        swift_retain();
        uint64_t v20 = ((uint64_t (*)(unint64_t, uint64_t))__DataStorage._bytes.getter)(a2 & 0x3FFFFFFFFFFFFFFFLL, 0xFFFFFFFFFFFFLL);
        if (v20)
        {
          uint64_t v21 = v20;
          uint64_t v22 = __DataStorage._offset.getter();
          BOOL v23 = __OFSUB__(v19, v22);
          uint64_t v24 = v19 - v22;
          if (v23) {
            BUG();
          }
          uint64_t v25 = (__m128 *)(v24 + v21);
        }
        else
        {
          uint64_t v25 = 0;
        }
        __DataStorage._length.getter();
        if (!v25) {
          BUG();
        }
        unint64_t v17 = v25->u32[0];
        LODWORD(v15) = v25->i32[1];
        uint64_t v79 = v25->i64[1];
        __m128 v78 = v25[1];
        __m128 v76 = v25[2];
        __m128 v77 = v25[3];
        swift_release();
        uint64_t v9 = v82;
        swift_release();
        a5 = v77;
        a4 = v76;
        a3 = v78;
        uint64_t v16 = v79;
        uint64_t v7 = v83;
        unint64_t v12 = v80;
        break;
      case 3:
        unint64_t v17 = 0;
        LODWORD(v15) = 0;
        uint64_t v16 = 0;
        break;
    }
    v65[0] = v17;
    v65[1] = v15;
    uint64_t v66 = v16;
    __m128 v67 = a3;
    __m128 v68 = a4;
    __m128 v69 = a5;
    if (v15 == 2)
    {
      unint64_t v80 = v17;
      uint64_t v79 = v16;
      __m128 v78 = a3;
      __m128 v76 = a4;
      __m128 v77 = a5;
      switch(v12)
      {
        case 0uLL:
          unint64_t v8 = v81;
          uint64_t v45 = _ss15withUnsafeBytes2of_q0_x_q0_SWq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lFs5UInt8V_A13Et_sAC_pSay8CreateML12BlobMetadataVGTg5037_s10Foundation4DataV06InlineB0V15withb29BytesyxxSWKXEKlFxSWKXEfU_Say8g4ML12iJ6VG_TG5SWxsAC_pRi_zRi0_zlyAIIsgyrzo_SiTf1nc_n03_s8g83ML9BlobsFileV12readMetadata33_51650C64338C8A92DE2EF0956A9CC3554from6headerSayAA04i6F0VG10lM26V_AA6HeaderVtKFZAJSWKXEfU_AF6HeaderV10Foundation0M0VAF9BlobsFileVXMtTf1ncn_nTm(v9, v81 & 0xFFFFFFFFFFFFLL, BYTE6(v81), (uint64_t)v65, v9, v81, (void (*)(uint64_t *, char *, uint64_t, uint64_t, unint64_t))closure #1 in static BlobsFile.readMetadata(from:header:));
          goto LABEL_51;
        case 1uLL:
          uint64_t v83 = v7;
          if (v9 >> 32 < (int)v9) {
            BUG();
          }
          unint64_t v8 = v81;
          uint64_t v82 = v81 & 0x3FFFFFFFFFFFFFFFLL;
          outlined copy of Data._Representation(v9, v81);
          uint64_t v58 = v83;
          uint64_t v59 = specialized __DataStorage.withUnsafeBytes<A>(in:apply:)((int)v9, v9 >> 32, v82, (uint64_t)v65, v9, v8, (void (*)(uint64_t, uint64_t, uint64_t, uint64_t, unint64_t))closure #1 in static BlobsFile.readMetadata(from:header:));
          if (v58) {
            goto LABEL_22;
          }
          uint64_t v83 = v59;
          unint64_t v26 = v8;
          goto LABEL_58;
        case 2uLL:
          unint64_t v8 = v81;
          uint64_t v83 = v7;
          uint64_t v82 = *(void *)(v9 + 16);
          uint64_t v52 = v9;
          uint64_t v53 = *(void *)(v9 + 24);
          unint64_t v54 = v81 & 0x3FFFFFFFFFFFFFFFLL;
          outlined copy of Data._Representation(v52, v81);
          swift_retain();
          swift_retain();
          uint64_t v55 = v53;
          uint64_t v9 = v52;
          uint64_t v56 = v83;
          uint64_t v57 = specialized __DataStorage.withUnsafeBytes<A>(in:apply:)(v82, v55, v54, (uint64_t)v65, v52, v8, (void (*)(uint64_t, uint64_t, uint64_t, uint64_t, unint64_t))closure #1 in static BlobsFile.readMetadata(from:header:));
          if (v56)
          {
            swift_release();
            swift_release();
            goto LABEL_22;
          }
          uint64_t v83 = v57;
          unint64_t v26 = v8;
          swift_release();
          swift_release();
          goto LABEL_58;
        case 3uLL:
          unint64_t v8 = v81;
          uint64_t v45 = _ss15withUnsafeBytes2of_q0_x_q0_SWq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lFs5UInt8V_A13Et_sAC_pSay8CreateML12BlobMetadataVGTg5037_s10Foundation4DataV06InlineB0V15withb29BytesyxxSWKXEKlFxSWKXEfU_Say8g4ML12iJ6VG_TG5SWxsAC_pRi_zRi0_zlyAIIsgyrzo_SiTf1nc_n03_s8g83ML9BlobsFileV12readMetadata33_51650C64338C8A92DE2EF0956A9CC3554from6headerSayAA04i6F0VG10lM26V_AA6HeaderVtKFZAJSWKXEfU_AF6HeaderV10Foundation0M0VAF9BlobsFileVXMtTf1ncn_nTm(0, 0, 0, (uint64_t)v65, v9, v81, (void (*)(uint64_t *, char *, uint64_t, uint64_t, unint64_t))closure #1 in static BlobsFile.readMetadata(from:header:));
LABEL_51:
          if (v7)
          {
            outlined consume of Data._Representation(v9, v8);
            goto LABEL_47;
          }
          uint64_t v83 = v45;
          unint64_t v26 = v8;
          break;
      }
      goto LABEL_58;
    }
    uint64_t v46 = lazy protocol witness table accessor for type BlobsFileError and conformance BlobsFileError();
    swift_allocError(&type metadata for BlobsFileError, v46, 0, 0);
    unsigned char *v47 = 0;
    swift_willThrow(&type metadata for BlobsFileError, v46, v47, v48, v49, v50);
    uint64_t v35 = v9;
    unint64_t v8 = v81;
  }
  outlined consume of Data._Representation(v35, v8);
LABEL_47:
  outlined consume of Data._Representation(v9, v8);
  return swift_bridgeObjectRelease(_swiftEmptyArrayStorage);
}

uint64_t static BlobsFile.isShort(_:)(uint64_t a1, unint64_t a2)
{
  unint64_t v3 = a2 >> 62;
  switch(a2 >> 62)
  {
    case 0uLL:
      uint64_t v4 = BYTE6(a2);
      goto LABEL_6;
    case 1uLL:
      LODWORD(v4) = HIDWORD(a1) - a1;
      if (__OFSUB__(HIDWORD(a1), a1)) {
        BUG();
      }
      uint64_t v4 = (int)v4;
      goto LABEL_6;
    case 2uLL:
      uint64_t v5 = *(void *)(a1 + 24);
      BOOL v6 = __OFSUB__(v5, *(void *)(a1 + 16));
      uint64_t v4 = v5 - *(void *)(a1 + 16);
      if (v6) {
        BUG();
      }
LABEL_6:
      LOBYTE(v2) = 1;
      if (v4 == 40) {
        return v2;
      }
      if ((_BYTE)v3)
      {
        if (v3 == 1)
        {
          LODWORD(v7) = HIDWORD(a1) - a1;
          if (__OFSUB__(HIDWORD(a1), a1)) {
            BUG();
          }
          uint64_t v7 = (int)v7;
        }
        else
        {
          uint64_t v8 = *(void *)(a1 + 24);
          BOOL v6 = __OFSUB__(v8, *(void *)(a1 + 16));
          uint64_t v7 = v8 - *(void *)(a1 + 16);
          if (v6) {
            BUG();
          }
        }
      }
      else
      {
        uint64_t v7 = BYTE6(a2);
      }
      if (v7 == 64) {
        return 0;
      }
      if ((_BYTE)v3)
      {
        if (v3 != 1)
        {
          uint64_t v11 = *(void *)(a1 + 24);
          BOOL v6 = __OFSUB__(v11, *(void *)(a1 + 16));
          uint64_t v12 = v11 - *(void *)(a1 + 16);
          if (v6) {
            BUG();
          }
          if (v12 >= 68) {
            goto LABEL_27;
          }
          return 0;
        }
        LODWORD(v9) = HIDWORD(a1) - a1;
        if (__OFSUB__(HIDWORD(a1), a1)) {
          BUG();
        }
        uint64_t v9 = (int)v9;
      }
      else
      {
        uint64_t v9 = BYTE6(a2);
      }
      if (v9 < 68) {
        return 0;
      }
      if ((_BYTE)v3 == 2)
      {
LABEL_27:
        uint64_t v14 = *(void *)(a1 + 16);
        swift_retain();
        swift_retain();
        LOBYTE(v15) = specialized __DataStorage.withUnsafeBytes<A>(in:apply:)(v14);
        unsigned int v2 = v15;
        swift_release();
        swift_release();
        return v2;
      }
      if (a1 >> 32 < (int)a1) {
        BUG();
      }
      swift_retain();
      LOBYTE(v10) = specialized __DataStorage.withUnsafeBytes<A>(in:apply:)((int)a1);
      unsigned int v2 = v10;
      outlined consume of Data._Representation(a1, a2);
      return v2;
    case 3uLL:
      return 0;
  }
}

uint64_t outlined copy of Data._Representation(uint64_t a1, unint64_t a2)
{
  uint64_t result = a2 >> 62;
  if (a2 >> 62 != 1)
  {
    if (result != 2) {
      return result;
    }
    swift_retain(a1);
  }
  return swift_retain(a2 & 0x3FFFFFFFFFFFFFFFLL);
}

uint64_t lazy protocol witness table accessor for type BlobsFileError and conformance BlobsFileError()
{
  uint64_t result = lazy protocol witness table cache variable for type BlobsFileError and conformance BlobsFileError;
  if (!lazy protocol witness table cache variable for type BlobsFileError and conformance BlobsFileError)
  {
    uint64_t result = swift_getWitnessTable(&protocol conformance descriptor for BlobsFileError, &type metadata for BlobsFileError);
    lazy protocol witness table cache variable for type BlobsFileError and conformance BlobsFileError = result;
  }
  return result;
}

{
  uint64_t result;

  uint64_t result = lazy protocol witness table cache variable for type BlobsFileError and conformance BlobsFileError;
  if (!lazy protocol witness table cache variable for type BlobsFileError and conformance BlobsFileError)
  {
    uint64_t result = swift_getWitnessTable(&protocol conformance descriptor for BlobsFileError, &type metadata for BlobsFileError);
    lazy protocol witness table cache variable for type BlobsFileError and conformance BlobsFileError = result;
  }
  return result;
}

uint64_t closure #1 in static BlobsFile.readMetadata(from:header:)(uint64_t a1, uint64_t a2, unsigned int *a3, uint64_t a4, unint64_t a5)
{
  uint64_t v44 = v6;
  uint64_t v45 = v5;
  int64_t v10 = *a3;
  uint64_t v11 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v10, 0, (uint64_t)_swiftEmptyArrayStorage);
  if (!v10)
  {
LABEL_20:
    uint64_t result = (uint64_t)v45;
    *uint64_t v45 = v11;
    return result;
  }
  int64_t v12 = v10;
  unint64_t v13 = a5 >> 62;
  BOOL v14 = __OFSUB__(HIDWORD(a4), a4);
  uint64_t v15 = HIDWORD(a4) - (int)a4;
  uint64_t v16 = BYTE6(a5);
  uint64_t v17 = 64;
  uint64_t v18 = a4;
  while (2)
  {
    uint64_t v19 = v17 + 64;
    if (__OFADD__(64, v17)) {
      BUG();
    }
    uint64_t v20 = v16;
    switch(v16)
    {
      case 0:
        goto LABEL_8;
      case 1:
        uint64_t v20 = v15;
        if (v14) {
          BUG();
        }
        goto LABEL_8;
      case 2:
        uint64_t v21 = *(void *)(v18 + 24);
        BOOL v22 = __OFSUB__(v21, *(void *)(v18 + 16));
        uint64_t v20 = v21 - *(void *)(v18 + 16);
        if (v22) {
          BUG();
        }
LABEL_8:
        if (v19 >= v20) {
          goto LABEL_21;
        }
        goto LABEL_11;
      case 3:
        if (v19 >= 0) {
          goto LABEL_21;
        }
LABEL_11:
        if (!a1) {
          BUG();
        }
        if (*(_DWORD *)(a1 + v17) == -559038737)
        {
          int v23 = *(_DWORD *)(a1 + v17 + 4);
          __m128i v24 = _mm_loadu_si128((const __m128i *)(a1 + v17 + 8));
          long long v25 = *(_OWORD *)(a1 + v17 + 24);
          long long v26 = *(_OWORD *)(a1 + v17 + 40);
          uint64_t v43 = *(void *)(a1 + v17 + 56);
          unint64_t v27 = v11[2];
          unint64_t v28 = v11[3];
          if (v28 >> 1 <= v27)
          {
            uint64_t v46 = v18;
            int v51 = v23;
            int64_t v47 = v12;
            unint64_t v48 = v13;
            BOOL v52 = v14;
            uint64_t v49 = v15;
            uint64_t v50 = v16;
            __m128i v40 = v24;
            long long v41 = v25;
            long long v42 = v26;
            uint64_t v33 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(v28 >= 2, v27 + 1, 1, (uint64_t)v11);
            long long v26 = v42;
            long long v25 = v41;
            int v23 = v51;
            __m128i v24 = _mm_load_si128(&v40);
            uint64_t v16 = v50;
            uint64_t v15 = v49;
            BOOL v14 = v52;
            unint64_t v13 = v48;
            LODWORD(v12) = v47;
            uint64_t v18 = v46;
            uint64_t v11 = v33;
          }
          v11[2] = v27 + 1;
          unint64_t v29 = v27 << 6;
          *(_DWORD *)((char *)v11 + v29 + 32) = -559038737;
          *(_DWORD *)((char *)v11 + v29 + 36) = v23;
          *(__m128i *)((char *)v11 + v29 + 40) = v24;
          *(_OWORD *)((char *)v11 + v29 + 56) = v25;
          *(_OWORD *)((char *)v11 + v29 + 72) = v26;
          *(void *)((char *)v11 + v29 + 88) = v43;
          if (v24.i64[0] < 0) {
            BUG();
          }
          uint64_t v30 = (v24.i64[0] - 1) / 64;
          if (((unint64_t)(v30 - 0x1FFFFFFFFFFFFFFLL) >> 58) < 0x3F) {
            BUG();
          }
          uint64_t v31 = v30 << 6;
          BOOL v22 = __OFSUB__(v31, -128);
          uint64_t v32 = v31 + 128;
          if (v22) {
            BUG();
          }
          BOOL v22 = __OFADD__(v32, v17);
          v17 += v32;
          if (v22) {
            BUG();
          }
          int64_t v12 = (v12 - 1);
          if (!v12) {
            goto LABEL_20;
          }
          continue;
        }
LABEL_21:
        swift_bridgeObjectRelease((_BYTE)v11);
        uint64_t v35 = lazy protocol witness table accessor for type BlobsFileError and conformance BlobsFileError();
        swift_allocError(&type metadata for BlobsFileError, v35, 0, 0);
        unsigned char *v36 = 1;
        return swift_willThrow(&type metadata for BlobsFileError, v35, v36, v37, v38, v39);
    }
  }
}

uint64_t closure #1 in static BlobsFile.readShortMetadata(from:header:)(uint64_t a1, uint64_t a2, unsigned int *a3, uint64_t a4, unint64_t a5)
{
  uint64_t v39 = v6;
  uint64_t v45 = a1;
  __m128i v40 = v5;
  int64_t v9 = *a3;
  int64_t v10 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v9, 0, (uint64_t)_swiftEmptyArrayStorage);
  if (!v9)
  {
LABEL_20:
    uint64_t result = (uint64_t)v40;
    *__m128i v40 = v10;
    return result;
  }
  unint64_t v11 = a5 >> 62;
  BOOL v12 = __OFSUB__(HIDWORD(a4), a4);
  uint64_t v13 = HIDWORD(a4) - (int)a4;
  uint64_t v14 = BYTE6(a5);
  uint64_t v15 = 40;
  long long v16 = 0;
  uint64_t v17 = a4;
  uint64_t v18 = v45;
  while (2)
  {
    uint64_t v19 = v15 + 56;
    if (__OFADD__(56, v15)) {
      BUG();
    }
    uint64_t v20 = v14;
    switch(v14)
    {
      case 0:
        goto LABEL_8;
      case 1:
        uint64_t v20 = v13;
        if (v12) {
          BUG();
        }
        goto LABEL_8;
      case 2:
        uint64_t v21 = *(void *)(v17 + 24);
        BOOL v22 = __OFSUB__(v21, *(void *)(v17 + 16));
        uint64_t v20 = v21 - *(void *)(v17 + 16);
        if (v22) {
          BUG();
        }
LABEL_8:
        if (v19 >= v20) {
          goto LABEL_21;
        }
        goto LABEL_11;
      case 3:
        if (v19 >= 0) {
          goto LABEL_21;
        }
LABEL_11:
        if (!v18) {
          BUG();
        }
        if (*(_DWORD *)(v18 + v15) == -559038737)
        {
          int v23 = *(_DWORD *)(v18 + v15 + 4);
          __m128i v24 = _mm_loadu_si128((const __m128i *)(v18 + v15 + 8));
          unint64_t v25 = v10[2];
          unint64_t v26 = v10[3];
          if (v26 >> 1 <= v25)
          {
            uint64_t v41 = v17;
            int v46 = v23;
            unint64_t v42 = v11;
            BOOL v47 = v12;
            uint64_t v43 = v13;
            uint64_t v44 = v14;
            __m128i v38 = v24;
            uint64_t v31 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(v26 >= 2, v25 + 1, 1, (uint64_t)v10);
            int v23 = v46;
            __m128i v24 = _mm_load_si128(&v38);
            long long v16 = 0;
            uint64_t v14 = v44;
            uint64_t v13 = v43;
            BOOL v12 = v47;
            unint64_t v11 = v42;
            uint64_t v18 = v45;
            uint64_t v17 = v41;
            int64_t v10 = v31;
          }
          v10[2] = v25 + 1;
          unint64_t v27 = v25 << 6;
          *(_DWORD *)((char *)v10 + v27 + 32) = -559038737;
          *(_DWORD *)((char *)v10 + v27 + 36) = v23;
          *(__m128i *)((char *)v10 + v27 + 40) = v24;
          *(void *)((char *)v10 + v27 + 88) = 0;
          *(_OWORD *)((char *)v10 + v27 + 56) = v16;
          *(_OWORD *)((char *)v10 + v27 + 72) = v16;
          if (v24.i64[0] < 0) {
            BUG();
          }
          uint64_t v28 = (v24.i64[0] - 1) / 8;
          if (((unint64_t)(v28 - 0xFFFFFFFFFFFFFFFLL) >> 61) < 7) {
            BUG();
          }
          uint64_t v29 = 8 * v28;
          BOOL v22 = __OFADD__(64, v29);
          uint64_t v30 = v29 + 64;
          if (v22) {
            BUG();
          }
          BOOL v22 = __OFADD__(v30, v15);
          v15 += v30;
          if (v22) {
            BUG();
          }
          LODWORD(v9) = v9 - 1;
          if (!v9) {
            goto LABEL_20;
          }
          continue;
        }
LABEL_21:
        swift_bridgeObjectRelease((_BYTE)v10);
        uint64_t v33 = lazy protocol witness table accessor for type BlobsFileError and conformance BlobsFileError();
        swift_allocError(&type metadata for BlobsFileError, v33, 0, 0);
        unsigned char *v34 = 1;
        return swift_willThrow(&type metadata for BlobsFileError, v33, v34, v35, v36, v37);
    }
  }
}

uint64_t _ss15withUnsafeBytes2of_q0_x_q0_SWq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lFs5UInt8V_A13Et_sAC_pSay8CreateML12BlobMetadataVGTg5037_s10Foundation4DataV06InlineB0V15withb29BytesyxxSWKXEKlFxSWKXEfU_Say8g4ML12iJ6VG_TG5SWxsAC_pRi_zRi0_zlyAIIsgyrzo_SiTf1nc_n03_s8g83ML9BlobsFileV12readMetadata33_51650C64338C8A92DE2EF0956A9CC355LL4from6headerSayAA04i6F0VG10lM26V_AA6HeaderVtKFZAJSWKXEfU_AF6HeaderV10Foundation0M0VAF9BlobsFileVXMtTf1ncn_nTm(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, unint64_t a6, void (*a7)(uint64_t *, char *, uint64_t, uint64_t, unint64_t))
{
  uint64_t v12 = a1;
  __int16 v13 = a2;
  char v14 = BYTE2(a2);
  char v15 = BYTE3(a2);
  char v16 = BYTE4(a2);
  char v17 = BYTE5(a2);
  a7(&v12, (char *)&v12 + a3, a4, a5, a6);
  uint64_t result = outlined consume of Data._Representation(a5, a6);
  if (!v7) {
    return v11;
  }
  return result;
}

BOOL specialized __DataStorage.withUnsafeBytes<A>(in:apply:)(uint64_t a1)
{
  uint64_t v1 = __DataStorage._bytes.getter();
  if (v1)
  {
    uint64_t v2 = v1;
    uint64_t v3 = __DataStorage._offset.getter();
    if (__OFSUB__(a1, v3)) {
      BUG();
    }
    uint64_t v4 = a1 - v3 + v2;
  }
  else
  {
    uint64_t v4 = 0;
  }
  __DataStorage._length.getter();
  if (!v4) {
    BUG();
  }
  return *(_DWORD *)(v4 + 64) != -559038737 && *(_DWORD *)(v4 + 40) == -559038737;
}

uint64_t specialized __DataStorage.withUnsafeBytes<A>(in:apply:)(uint64_t a1)
{
  uint64_t v2 = v1;
  uint64_t v3 = __DataStorage._bytes.getter();
  if (v3)
  {
    uint64_t v4 = v3;
    uint64_t v5 = __DataStorage._offset.getter();
    if (__OFSUB__(a1, v5)) {
      BUG();
    }
    uint64_t v6 = a1 - v5 + v4;
  }
  else
  {
    uint64_t v6 = 0;
  }
  __DataStorage._length.getter();
  if (!v6) {
    BUG();
  }
  uint64_t result = *(void *)v6;
  *(void *)uint64_t v2 = *(void *)v6;
  *(_OWORD *)(v2 + 8) = *(_OWORD *)(v6 + 8);
  *(_OWORD *)(v2 + 24) = *(_OWORD *)(v6 + 24);
  return result;
}

uint64_t specialized __DataStorage.withUnsafeBytes<A>(in:apply:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, unint64_t a6, void (*a7)(uint64_t, uint64_t, uint64_t, uint64_t, unint64_t))
{
  uint64_t v8 = __DataStorage._bytes.getter();
  if (v8)
  {
    uint64_t v9 = v8;
    uint64_t v10 = __DataStorage._offset.getter();
    if (__OFSUB__(a1, v10)) {
      BUG();
    }
    uint64_t v11 = a1 - v10 + v9;
  }
  else
  {
    uint64_t v11 = 0;
  }
  uint64_t v12 = a2 - a1;
  if (__OFSUB__(a2, a1)) {
    BUG();
  }
  uint64_t v13 = __DataStorage._length.getter();
  if (v13 < v12) {
    uint64_t v12 = v13;
  }
  uint64_t v14 = v11 + v12;
  if (!v11) {
    uint64_t v14 = 0;
  }
  a7(v11, v14, a4, a5, a6);
  uint64_t result = outlined consume of Data._Representation(a5, a6);
  if (!v7) {
    return v16;
  }
  return result;
}

void *_sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSaySiG_Si5label_So12MLMultiArrayC9keypointstsAE_pTg50108_s8CreateML22MLHandActionClassifierV36makeLabeledKeypointsSequenceFeatures4from11classLabelsSaySi5label_So12ef30C9keypointstGAA11MLDataTableV_T24SSGtKFZSiAG_AiJtSiKXEfU_0I2ML0yZ0VSaySSGTf1cn_n(uint64_t a1, uint64_t a2, int a3, void *a4)
{
  uint64_t v28 = a4;
  LOBYTE(a3) = a3 & 1;
  uint64_t v21 = a1;
  int64_t v6 = *(void *)(a1 + 16);
  if (v6)
  {
    int v7 = a3;
    unint64_t v27 = _swiftEmptyArrayStorage;
    uint64_t v8 = 0;
    int64_t v23 = v6;
    uint64_t v29 = v4;
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v6, 0);
    uint64_t v9 = _swiftEmptyArrayStorage;
    int v30 = v7;
    int v26 = v7;
    uint64_t v22 = a2;
    while (1)
    {
      uint64_t v19 = *(void *)(v21 + 8 * v8 + 32);
      closure #1 in static MLHandActionClassifier.makeLabeledKeypointsSequenceFeatures(from:classLabels:)(&v19, a2, v26, v28, &v20);
      if (v4) {
        break;
      }
      uint64_t v10 = v17;
      uint64_t v11 = v18;
      unint64_t v27 = v9;
      unint64_t v12 = v9[2];
      unint64_t v13 = v9[3];
      if (v13 >> 1 <= v12)
      {
        uint64_t v25 = v18;
        uint64_t v24 = v17;
        uint64_t v29 = 0;
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v13 >= 2, v12 + 1, 1);
        uint64_t v11 = v25;
        uint64_t v10 = v24;
        uint64_t v4 = v29;
        uint64_t v9 = v27;
      }
      ++v8;
      v9[2] = v12 + 1;
      uint64_t v14 = 2 * v12;
      v9[v14 + 4] = v10;
      v9[v14 + 5] = v11;
      a2 = v22;
      if (v23 == v8)
      {
        outlined consume of Result<_DataTable, Error>(v22, (_BYTE)v30 != 0);
        goto LABEL_10;
      }
    }
    char v15 = (_BYTE)v30 != 0;
    swift_release();
    outlined consume of Result<_DataTable, Error>(a2, v15);
    swift_bridgeObjectRelease((_BYTE)v28);
  }
  else
  {
    outlined consume of Result<_DataTable, Error>(a2, (_BYTE)a3 != 0);
    uint64_t v9 = _swiftEmptyArrayStorage;
LABEL_10:
    swift_bridgeObjectRelease((_BYTE)v28);
  }
  return v9;
}

void *static MLHandActionClassifier.makeLabeledKeypointsSequenceFeatures(from:classLabels:)(uint64_t a1, void *a2, double a3)
{
  unsigned int v3 = *(_DWORD *)(a1 + 8);
  uint64_t v8 = *(void *)a1;
  unsigned __int8 v12 = v3 & 1;
  outlined copy of Result<_DataTable, Error>(*(void *)a1, v3);
  v4._uint64_t countAndFlagsBits = 0x5F6E6F6973736573;
  v4._char object = (void *)0xEA00000000006469;
  MLDataTable.subscript.getter(v4);
  outlined consume of Result<_DataTable, Error>(v8, v3);
  MLUntypedColumn.dropDuplicates()(v8, v3);
  outlined consume of Result<_DataTable, Error>(v9, v10);
  if ((v3 & 1) != 0
    || (outlined copy of Result<_DataTable, Error>(v8, 0),
        _UntypedColumn.type.getter(),
        outlined consume of Result<_DataTable, Error>(v8, 0),
        (_BYTE)v9))
  {
    outlined consume of Result<_DataTable, Error>(v8, v3 & 1);
    BUG();
  }
  uint64_t v5 = specialized Array<A>.init(_:)(v8, 0, a3);
  outlined copy of Result<_DataTable, Error>(v8, v12);
  swift_bridgeObjectRetain((_BYTE)a2);
  ML22MLHandActionClassifierV36makeLabeledKeypointsSequenceFeatures4from11classLabelsSaySi5label_So12ef30C9keypointstGAA11MLDataTableV_T24SSGtKFZSiAG_AiJtSiKXEfU_0I2ML0yZ0VSaySSGTf1cn_n = _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSaySiG_Si5label_So12MLMultiArrayC9keypointstsAE_pTg50108_s8CreateML22MLHandActionClassifierV36makeLabeledKeypointsSequenceFeatures4from11classLabelsSaySi5label_So12ef30C9keypointstGAA11MLDataTableV_T24SSGtKFZSiAG_AiJtSiKXEfU_0I2ML0yZ0VSaySSGTf1cn_n((uint64_t)v5, v8, v12, a2);
  swift_bridgeObjectRelease((_BYTE)v5);
  return ML22MLHandActionClassifierV36makeLabeledKeypointsSequenceFeatures4from11classLabelsSaySi5label_So12ef30C9keypointstGAA11MLDataTableV_T24SSGtKFZSiAG_AiJtSiKXEfU_0I2ML0yZ0VSaySSGTf1cn_n;
}

uint64_t closure #1 in static MLHandActionClassifier.makeLabeledKeypointsSequenceFeatures(from:classLabels:)(uint64_t *a1, uint64_t a2, int a3, void *a4, uint64_t *a5)
{
  __m128 v69 = a4;
  char v7 = a3;
  uint64_t v57 = v5;
  __m128 v68 = a5;
  *(void *)&long long v62 = v6;
  uint64_t v67 = *a1;
  LOBYTE(v70) = a3 & 1;
  BYTE8(v58) = a3 & 1;
  int v73 = a3;
  outlined copy of Result<_DataTable, Error>(a2, a3);
  v9._uint64_t countAndFlagsBits = 0x5F6E6F6973736573;
  v9._char object = (void *)0xEA00000000006469;
  MLDataTable.subscript.getter(v9);
  outlined consume of Result<_DataTable, Error>(a2, v7);
  uint64_t v10 = v63;
  char v11 = v64;
  uint64_t v65 = (void *)v63;
  char v66 = v64;
  uint64_t v60 = &type metadata for Int;
  unsigned int v61 = &protocol witness table for Int;
  *(void *)&long long v58 = v67;
  static MLUntypedColumn.== infix(_:_:)((uint64_t)&v65, &v58);
  outlined consume of Result<_DataTable, Error>(v10, v11);
  __swift_destroy_boxed_opaque_existential_1Tm(&v58);
  LODWORD(v67) = BYTE8(v55);
  *(void *)&long long v58 = a2;
  BYTE8(v58) = v70;
  uint64_t v63 = v55;
  char v64 = BYTE8(v55);
  LOBYTE(v10) = v73;
  outlined copy of Result<_DataTable, Error>(a2, v73);
  MLDataTable.subscript.getter((uint64_t)&v63);
  outlined consume of Result<_DataTable, Error>(v55, v67);
  outlined consume of Result<_DataTable, Error>(a2, v10);
  uint64_t v12 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>);
  unint64_t v13 = (NSNumber *)swift_allocObject(v12, 56, 7);
  v13[2].super.super.isa = (Class)(&dword_0 + 3);
  v13[3].super.super.isa = (Class)(&dword_4 + 3);
  type metadata accessor for NSNumber(0, &lazy cache variable for type metadata for NSNumber, NSNumber_ptr);
  v13[4].super.super.isa = NSNumber.init(integerLiteral:)(1).super.super.isa;
  v13[5].super.super.isa = NSNumber.init(integerLiteral:)(3).super.super.isa;
  v13[6].super.super.isa = NSNumber.init(integerLiteral:)(21).super.super.isa;
  *(void *)&long long v58 = v13;
  double v14 = specialized Array._endMutation()();
  char v15 = v58;
  uint64_t v16 = v62;
  static _VideoUtilities.reformatKeypointsDataTable(table:featureColumn:keypointsShape:)(&v71, 0x746E696F7079656BLL, (void *)0xE900000000000073, v58, v14);
  if (v16)
  {
    swift_bridgeObjectRelease(v15);
    outlined consume of Result<_DataTable, Error>(v71, v72);
    uint64_t result = (uint64_t)v68;
    uint64_t *v68 = v16;
    return result;
  }
  swift_bridgeObjectRelease(v15);
  uint64_t v70 = v71;
  *(void *)&long long v58 = v71;
  LOBYTE(v73) = v72;
  BYTE8(v58) = v72;
  v18._uint64_t countAndFlagsBits = 0x6C6562616CLL;
  v18._char object = (void *)0xE500000000000000;
  MLDataTable.subscript.getter(v18);
  if (BYTE8(v55))
  {
    outlined consume of Result<_DataTable, Error>(v55, 1);
    uint64_t v19 = v68;
LABEL_16:
    *(void *)&long long v58 = 0;
    *((void *)&v58 + 1) = 0xE000000000000000;
    _StringGuts.grow(_:)(32);
    swift_bridgeObjectRelease(BYTE8(v58));
    uint64_t v36 = lazy protocol witness table accessor for type MLCreateError and conformance MLCreateError();
    uint64_t v37 = swift_allocError(&type metadata for MLCreateError, v36, 0, 0);
    *(void *)uint64_t v38 = 0xD000000000000023;
    *(void *)(v38 + 8) = "ize with negative count" + 0x8000000000000000;
    *(_OWORD *)(v38 + 16) = 0;
    *(_OWORD *)(v38 + 32) = 0;
    *(unsigned char *)(v38 + 48) = 0;
    swift_willThrow(&type metadata for MLCreateError, v36, v38, v39, v40, v41);
    uint64_t result = outlined consume of Result<_DataTable, Error>(v71, v72);
    uint64_t *v19 = v37;
    return result;
  }
  *(void *)&long long v62 = 0;
  swift_retain();
  _UntypedColumn.valueAtIndex(index:)(0, v14);
  outlined consume of Result<_DataTable, Error>(v55, 0);
  outlined consume of Result<_DataTable, Error>(v55, 0);
  Swift::String v20 = (Swift::String)v58;
  if ((_BYTE)v59 != 2)
  {
    outlined consume of MLDataValue((void *)v58, *((void **)&v58 + 1), v59);
    uint64_t v19 = v68;
    goto LABEL_16;
  }
  uint64_t v21 = v69;
  uint64_t v22 = specialized Collection<>.firstIndex(of:)(v58, *((uint64_t *)&v58 + 1), v69);
  if (v23)
  {
    *(void *)&long long v58 = 0;
    *((void *)&v58 + 1) = 0xE000000000000000;
    _StringGuts.grow(_:)(31);
    swift_bridgeObjectRelease(BYTE8(v58));
    *(void *)&long long v58 = 0xD000000000000017;
    *((void *)&v58 + 1) = "l column name label" + 0x8000000000000000;
    String.append(_:)(v20);
    outlined consume of MLDataValue((void *)v20._countAndFlagsBits, v20._object, 2);
    v42._char object = (void *)0xE400000000000000;
    v42._uint64_t countAndFlagsBits = 544106784;
    String.append(_:)(v42);
    v43._uint64_t countAndFlagsBits = Array.description.getter(v21, &type metadata for String);
    char object = (char)v43._object;
    String.append(_:)(v43);
    swift_bridgeObjectRelease(object);
    long long v62 = v58;
    v42._char object = (void *)lazy protocol witness table accessor for type MLCreateError and conformance MLCreateError();
    uint64_t v45 = swift_allocError(&type metadata for MLCreateError, v42._object, 0, 0);
    *(_OWORD *)uint64_t v46 = v62;
    *(_OWORD *)(v46 + 16) = 0;
    *(_OWORD *)(v46 + 32) = 0;
    *(unsigned char *)(v46 + 48) = 0;
    swift_willThrow(&type metadata for MLCreateError, v42._object, v46, v47, v48, v49);
    outlined consume of Result<_DataTable, Error>(v71, v72);
    uint64_t result = (uint64_t)v68;
    uint64_t *v68 = v45;
  }
  else
  {
    uint64_t v54 = v22;
    outlined consume of MLDataValue((void *)v20._countAndFlagsBits, v20._object, 2);
    uint64_t v24 = v70;
    uint64_t v63 = v70;
    char v64 = v73;
    *(void *)&long long v58 = v70;
    BYTE8(v58) = v73;
    int v25 = v73;
    outlined copy of Result<_DataTable, Error>(v70, v73);
    Swift::Int v26 = MLDataTable.size.getter();
    uint64_t v27 = specialized RandomAccessCollection<>.distance(from:to:)(0, v26);
    LODWORD(v69) = v25;
    if (v27)
    {
      uint64_t v28 = v27;
      uint64_t v65 = _swiftEmptyArrayStorage;
      specialized ContiguousArray.reserveCapacity(_:)(v27);
      if (v28 < 0) {
        BUG();
      }
      Swift::Int v29 = 0;
      uint64_t v67 = v28;
      while (1)
      {
        if (v28 == v29) {
          BUG();
        }
        MLDataTable.Rows.subscript.getter(v29);
        uint64_t v30 = v58;
        char v31 = BYTE8(v58);
        long long v55 = v58;
        uint64_t v56 = v59;
        uint64_t v32 = v62;
        closure #1 in closure #1 in static MLHandActionClassifier.makeLabeledKeypointsSequenceFeatures(from:classLabels:)((uint64_t)&v55, &v53, v14);
        *(void *)&long long v62 = v32;
        if (v32) {
          break;
        }
        swift_release();
        swift_bridgeObjectRelease(v31);
        swift_release();
        specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()(v30);
        uint64_t v33 = v65[2];
        specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)(v33);
        specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)(v33);
        ((void (*)(uint64_t))specialized ContiguousArray._endMutation())(v33);
        *(void *)&long long v58 = v70;
        BYTE8(v58) = v73;
        if (v29 >= MLDataTable.size.getter()) {
          BUG();
        }
        ++v29;
        uint64_t v28 = v67;
        if (v67 == v29)
        {
          LOBYTE(v34) = (_BYTE)v65;
          uint64_t v24 = v70;
          uint64_t v35 = v57;
          outlined consume of Result<_DataTable, Error>(v70, (char)v69);
          goto LABEL_19;
        }
      }
      swift_release();
      swift_bridgeObjectRelease(v31);
      swift_release();
      swift_release();
      uint64_t v51 = v70;
      char v52 = (char)v69;
      outlined consume of Result<_DataTable, Error>(v70, (char)v69);
      outlined consume of Result<_DataTable, Error>(v51, v52);
      uint64_t result = v53;
      uint64_t *v68 = v53;
    }
    else
    {
      outlined consume of Result<_DataTable, Error>(v24, v25);
      uint64_t v34 = _swiftEmptyArrayStorage;
      uint64_t v35 = v57;
LABEL_19:
      type metadata accessor for NSNumber(0, &lazy cache variable for type metadata for MLMultiArray, MLMultiArray_ptr);
      id v50 = @nonobjc MLMultiArray.__allocating_init(concatenating:axis:dataType:)((char)v34, 0, 65600);
      outlined consume of Result<_DataTable, Error>(v24, (char)v69);
      uint64_t result = v54;
      *uint64_t v35 = v54;
      v35[1] = (uint64_t)v50;
    }
  }
  return result;
}

uint64_t specialized Collection<>.firstIndex(of:)(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v16 = a3[2];
  if (!v16) {
    return 0;
  }
  uint64_t v6 = a3[4];
  uint64_t v7 = a3[5];
  if (v6 == a1 && v7 == a2) {
    return 0;
  }
  uint64_t v8 = 0;
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(v6, v7, a1, a2, 0) & 1) == 0)
  {
    Swift::String v9 = a3 + 7;
    uint64_t v10 = 1;
    uint64_t v8 = 0;
    while (v16 != v10)
    {
      uint64_t v11 = v10;
      ++v8;
      uint64_t v12 = *(v9 - 1);
      uint64_t v13 = *v9;
      if (v12 == a1 && v13 == a2) {
        return v8;
      }
      char v14 = _stringCompareWithSmolCheck(_:_:expecting:)(v12, v13, a1, a2, 0);
      uint64_t v10 = v11 + 1;
      v9 += 2;
      if (v14) {
        return v11;
      }
    }
    return 0;
  }
  return v8;
}

uint64_t specialized Collection<>.firstIndex(of:)(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4)
{
  uint64_t v5 = HIBYTE(a4) & 0xF;
  if ((a4 & 0x2000000000000000) == 0) {
    uint64_t v5 = a3 & 0xFFFFFFFFFFFFLL;
  }
  if (!v5) {
    return 0;
  }
  uint64_t v6 = 15;
  uint64_t v15 = 4 * v5;
  while (1)
  {
    uint64_t v7 = a3;
    unint64_t v8 = a4;
    uint64_t v9 = String.subscript.getter(v6, a3, a4);
    uint64_t v11 = v10;
    if (v9 == a1 && v10 == a2) {
      break;
    }
    char v12 = _stringCompareWithSmolCheck(_:_:expecting:)(v9, v10, a1, a2, 0);
    swift_bridgeObjectRelease(v11);
    if (v12) {
      return v6;
    }
    a3 = v7;
    unint64_t v13 = String.index(after:)(v6, v7, v8);
    a4 = v8;
    uint64_t v6 = v13;
    if (v13 >> 14 == v15) {
      return 0;
    }
  }
  swift_bridgeObjectRelease(a2);
  return v6;
}

uint64_t closure #1 in closure #1 in static MLHandActionClassifier.makeLabeledKeypointsSequenceFeatures(from:classLabels:)(uint64_t a1, uint64_t *a2, double a3)
{
  uint64_t v5 = a2;
  uint64_t v6 = *(void *)(a1 + 8);
  if (*(void *)(v6 + 16))
  {
    uint64_t v21 = v3;
    uint64_t v7 = *(void *)(a1 + 16);
    swift_retain();
    swift_bridgeObjectRetain(v6);
    swift_retain();
    unint64_t v8 = specialized __RawDictionaryStorage.find<A>(_:)(0x746E696F7079656BLL, 0xE900000000000073);
    if (v9)
    {
      uint64_t v10 = *(void *)(*(void *)(v6 + 56) + 8 * v8);
      swift_retain_n(v7);
      uint64_t v22 = CMLSequence.value(at:)(v10);
      if (v4)
      {
        swift_release();
        swift_unexpectedError(v4, "CreateML/MLDataTable.Row.swift", 30, 1, 85);
        BUG();
      }
      swift_release();
      MLDataValue.init(_:)(v22, a3);
      swift_bridgeObjectRelease(v6);
      swift_release();
      swift_release_n(v7);
      if (v20 == 5)
      {
        uint64_t result = (uint64_t)v21;
        void *v21 = v18;
        return result;
      }
      outlined consume of MLDataValue(v18, v19, v20);
    }
    else
    {
      swift_release();
      swift_bridgeObjectRelease(v6);
      swift_release();
    }
    uint64_t v5 = a2;
  }
  _StringGuts.grow(_:)(36);
  swift_bridgeObjectRelease(0);
  uint64_t v12 = lazy protocol witness table accessor for type MLCreateError and conformance MLCreateError();
  uint64_t v13 = swift_allocError(&type metadata for MLCreateError, v12, 0, 0);
  *(void *)uint64_t v14 = 0xD00000000000002BLL;
  *(void *)(v14 + 8) = "No matching label name " + 0x8000000000000000;
  *(_OWORD *)(v14 + 16) = 0;
  *(_OWORD *)(v14 + 32) = 0;
  *(unsigned char *)(v14 + 48) = 0;
  uint64_t result = swift_willThrow(&type metadata for MLCreateError, v12, v14, v15, v16, v17);
  *uint64_t v5 = v13;
  return result;
}

id @nonobjc MLMultiArray.__allocating_init(concatenating:axis:dataType:)(char a1, uint64_t a2, uint64_t a3)
{
  type metadata accessor for NSNumber(0, &lazy cache variable for type metadata for MLMultiArray, MLMultiArray_ptr);
  Class isa = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease(a1);
  ObjCClassFromMetadata = (void *)swift_getObjCClassFromMetadata();
  id v6 = [ObjCClassFromMetadata multiArrayByConcatenatingMultiArrays:isa alongAxis:a2 dataType:a3];
  id v7 = v6;

  return v7;
}

void *static MLHandActionClassifier.prepareDataset(classLabels:trainingFeatures:validationFeatures:parameters:)(uint64_t a1, uint64_t a2, void *a3, uint64_t a4, uint64_t a5, uint64_t a6, double a7)
{
  uint64_t v57 = v7;
  uint64_t v48 = a6;
  uint64_t v50 = a2;
  uint64_t v51 = a1;
  uint64_t v46 = type metadata accessor for LearningPhase(0);
  uint64_t v52 = *(void *)(v46 - 8);
  int64_t v11 = *(void *)(v52 + 64);
  uint64_t v12 = alloca(v11);
  uint64_t v13 = alloca(v11);
  uint64_t v47 = &v41;
  uint64_t v53 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Dataset<[(label: Int, keypoints: MLMultiArray)], DataSample<Tensor, Tensor>>);
  uint64_t v14 = *(void *)(v53 - 8);
  int64_t v15 = *(void *)(v14 + 64);
  uint64_t v16 = alloca(v15);
  uint64_t v17 = alloca(v15);
  uint64_t v56 = &v41;
  uint64_t v18 = *(void *)a4;
  unsigned __int8 v19 = *(unsigned char *)(a4 + 8);
  uint64_t v20 = *(void *)a5;
  unsigned __int8 v58 = *(unsigned char *)(a5 + 8);
  uint64_t v44 = v18;
  unsigned __int8 v45 = v19;
  uint64_t v21 = v57;
  uint64_t result = static MLHandActionClassifier.makeLabeledKeypointsSequenceFeatures(from:classLabels:)((uint64_t)&v44, a3, a7);
  if (!v21)
  {
    uint64_t v49 = v20;
    uint64_t v57 = 0;
    uint64_t v54 = v14;
    uint64_t v41 = a3;
    uint64_t v23 = a3[2];
    uint64_t v24 = (uint64_t)result;
    uint64_t v25 = (uint64_t)v47;
    uint64_t v26 = v46;
    Swift::String v43 = *(void (**)(void *, void, uint64_t))(v52 + 104);
    v43(v47, enum case for LearningPhase.training(_:), v46);
    uint64_t v42 = v23;
    specialized static MLHandActionClassifier.makeDataset<A>(from:classLabelsCount:parameters:learningPhase:)(v24, v23, v48, v25);
    uint64_t v52 = *(void *)(v52 + 8);
    ((void (*)(uint64_t, uint64_t))v52)(v25, v26);
    swift_bridgeObjectRelease(v24);
    unsigned int v27 = 1;
    uint64_t v28 = v56;
    Swift::Int v29 = v41;
    if (v58 == 0xFF)
    {
      uint64_t v34 = v50;
      uint64_t v35 = v51;
      uint64_t v36 = v53;
      uint64_t v37 = v54;
    }
    else
    {
      uint64_t v30 = v49;
      uint64_t v44 = v49;
      int v31 = v58;
      v58 &= 1u;
      unsigned __int8 v45 = v58;
      outlined copy of Result<_DataTable, Error>(v49, v31);
      if (MLDataTable.size.getter())
      {
        int v55 = v31;
        uint64_t v44 = v30;
        unsigned __int8 v45 = v58;
        uint64_t v32 = v57;
        uint64_t v33 = static MLHandActionClassifier.makeLabeledKeypointsSequenceFeatures(from:classLabels:)((uint64_t)&v44, v29, a7);
        uint64_t v57 = v32;
        if (v32)
        {
          (*(void (**)(void *, uint64_t))(v54 + 8))(v56, v53);
          return (void *)outlined consume of MLDataTable?(v30, v55);
        }
        uint64_t v38 = (uint64_t)v33;
        uint64_t v39 = (uint64_t)v47;
        uint64_t v40 = v46;
        v43(v47, enum case for LearningPhase.inference(_:), v46);
        uint64_t v34 = v50;
        specialized static MLHandActionClassifier.makeDataset<A>(from:classLabelsCount:parameters:learningPhase:)(v38, v42, v48, v39);
        outlined consume of MLDataTable?(v49, v55);
        ((void (*)(uint64_t, uint64_t))v52)(v39, v40);
        swift_bridgeObjectRelease(v38);
        unsigned int v27 = 0;
        uint64_t v35 = v51;
        uint64_t v36 = v53;
        uint64_t v37 = v54;
        uint64_t v28 = v56;
      }
      else
      {
        outlined consume of MLDataTable?(v30, v31);
        uint64_t v34 = v50;
        uint64_t v35 = v51;
        uint64_t v36 = v53;
        uint64_t v37 = v54;
        uint64_t v28 = v56;
        unsigned int v27 = 1;
      }
    }
    (*(void (**)(uint64_t, void *, uint64_t))(v37 + 32))(v35, v28, v36);
    return (void *)__swift_storeEnumTagSinglePayload(v34, v27, 1, v36);
  }
  return result;
}

uint64_t specialized static MLHandActionClassifier.makeDataset<A>(from:classLabelsCount:parameters:learningPhase:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v38 = a4;
  uint64_t v39 = a3;
  uint64_t v33 = a2;
  uint64_t v45 = a1;
  v32[1] = v4;
  uint64_t v34 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Dataset<[(label: Int, keypoints: MLMultiArray)], DataSample<Tensor, Tensor>>.PrefetchMode);
  uint64_t v35 = *(void *)(v34 - 8);
  int64_t v5 = *(void *)(v35 + 64);
  id v6 = alloca(v5);
  uint64_t v7 = alloca(v5);
  uint64_t v37 = v30;
  uint64_t v44 = type metadata accessor for LearningPhase(0);
  uint64_t v43 = *(void *)(v44 - 8);
  int64_t v8 = *(void *)(v43 + 64);
  char v9 = alloca(v8);
  uint64_t v10 = alloca(v8);
  uint64_t v41 = v30;
  uint64_t v11 = type metadata accessor for MLHandActionClassifier.ModelParameters(0);
  uint64_t v40 = *(void *)(v11 - 8);
  int64_t v12 = *(void *)(v40 + 64);
  uint64_t v13 = alloca(v12);
  uint64_t v14 = alloca(v12);
  uint64_t v42 = v30;
  int64_t v15 = alloca(v12);
  uint64_t v16 = alloca(v12);
  v32[0] = v45;
  uint64_t v36 = *(void *)(v39 + *(int *)(v11 + 20));
  memset(v30, 0, sizeof(v30));
  uint64_t v31 = 0;
  outlined init with copy of MLHandActionClassifier.ModelParameters(v39, (uint64_t)v30);
  uint64_t v17 = v43;
  (*(void (**)(unsigned char *, uint64_t, uint64_t))(v43 + 16))(v30, v38, v44);
  outlined init with take of MLHandActionClassifier.ModelParameters((uint64_t)v30, (uint64_t)v30);
  uint64_t v18 = *(unsigned __int8 *)(v17 + 80);
  uint64_t v19 = ~*(unsigned __int8 *)(v17 + 80) & (v18 + 16);
  uint64_t v20 = *(unsigned __int8 *)(v40 + 80);
  int64_t v21 = ~v20 & (v19 + v20 + v8);
  unint64_t v22 = (v21 + v12 + 7) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v23 = swift_allocObject(&unk_397320, v22 + 8, v20 | v18 | 7);
  (*(void (**)(uint64_t, unsigned char *, uint64_t))(v17 + 32))(v23 + v19, v41, v44);
  outlined init with take of MLHandActionClassifier.ModelParameters((uint64_t)v42, v23 + v21);
  *(void *)(v23 + v22) = v33;
  uint64_t v24 = v37;
  (*(void (**)(unsigned char *, void, uint64_t))(v35 + 104))(v37, enum case for Dataset.PrefetchMode.serial<A, B>(_:), v34);
  swift_bridgeObjectRetain(v45);
  uint64_t v45 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [(label: Int, keypoints: MLMultiArray)]);
  uint64_t v25 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for DataSample<Tensor, Tensor>);
  uint64_t v26 = lazy protocol witness table accessor for type FullyConnectedNetworkClassifier<Float, String> and conformance FullyConnectedNetworkClassifier<A, B>(&lazy protocol witness table cache variable for type [(label: Int, keypoints: MLMultiArray)] and conformance [A], &demangling cache variable for type metadata for [(label: Int, keypoints: MLMultiArray)], (uint64_t)&protocol conformance descriptor for [A]);
  uint64_t v27 = lazy protocol witness table accessor for type DataSample<Tensor, Tensor> and conformance <> DataSample<A, B>();
  uint64_t v28 = lazy protocol witness table accessor for type FullyConnectedNetworkClassifier<Float, String> and conformance FullyConnectedNetworkClassifier<A, B>(&lazy protocol witness table cache variable for type DataSample<Tensor, Tensor> and conformance DataSample<A, B>, &demangling cache variable for type metadata for DataSample<Tensor, Tensor>, (uint64_t)&protocol conformance descriptor for DataSample<A, B>);
  return Dataset.init(samples:batchSize:batchSampler:dropsLastPartialBatch:prefetchMode:transform:)(v32, v36, v30, 0, v24, partial apply for closure #1 in static MLHandActionClassifier.makeDataset<A>(from:classLabelsCount:parameters:learningPhase:), v23, v45, v25, v26, v27, v28);
}

uint64_t closure #1 in static MLHandActionClassifier.makeDataset<A>(from:classLabelsCount:parameters:learningPhase:)(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, double a5, double a6)
{
  uint64_t v77 = a4;
  uint64_t v94 = a3;
  uint64_t v90 = a2;
  uint64_t v79 = v6;
  uint64_t v81 = type metadata accessor for ScalarType(0);
  uint64_t v82 = *(void *)(v81 - 8);
  int64_t v7 = *(void *)(v82 + 64);
  int64_t v8 = alloca(v7);
  char v9 = alloca(v7);
  unint64_t v80 = v76;
  int64_t v10 = *(void *)(*(void *)(type metadata accessor for TensorShape(0) - 8) + 64);
  uint64_t v11 = alloca(v10);
  int64_t v12 = alloca(v10);
  uint64_t v83 = v76;
  int64_t v13 = *(void *)(*(void *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ComputeDevice?)
                              - 8)
                  + 64);
  uint64_t v14 = alloca(v13);
  int64_t v15 = alloca(v13);
  uint64_t v87 = v76;
  uint64_t v89 = type metadata accessor for Tensor(0);
  uint64_t v91 = *(void *)(v89 - 8);
  int64_t v16 = *(void *)(v91 + 64);
  uint64_t v17 = alloca(v16);
  uint64_t v18 = alloca(v16);
  uint64_t v88 = v76;
  uint64_t v19 = alloca(v16);
  uint64_t v20 = alloca(v16);
  uint64_t v92 = v76;
  int64_t v21 = alloca(v16);
  unint64_t v22 = alloca(v16);
  uint64_t v85 = v76;
  uint64_t v23 = alloca(v16);
  uint64_t v24 = alloca(v16);
  uint64_t v86 = v76;
  uint64_t v25 = type metadata accessor for LearningPhase(0);
  uint64_t v26 = *(void *)(v25 - 8);
  int64_t v27 = *(void *)(v26 + 64);
  uint64_t v28 = alloca(v27);
  Swift::Int v29 = alloca(v27);
  uint64_t v78 = *a1;
  uint64_t v30 = (void *)a1[1];
  (*(void (**)(void *, void, uint64_t))(v26 + 104))(v76, enum case for LearningPhase.training(_:), v25);
  uint64_t v31 = lazy protocol witness table accessor for type LearningPhase and conformance LearningPhase();
  id v93 = v30;
  dispatch thunk of RawRepresentable.rawValue.getter(v25, v31);
  dispatch thunk of RawRepresentable.rawValue.getter(v25, v31);
  uint64_t v32 = v84;
  uint64_t v33 = v76[2];
  (*(void (**)(void *, uint64_t))(v26 + 8))(v76, v25);
  if (v32 == v33)
  {
    uint64_t v34 = type metadata accessor for MLHandActionClassifier.ModelParameters(0);
    uint64_t v35 = v94;
    uint64_t v84 = *(void *)(v94 + *(int *)(v34 + 32));
    id v36 = v93;
    id v37 = static MLHandActionClassifier.dataAugmentation(_:options:)(v93, &v84);

    id v38 = v37;
    uint64_t v39 = v35;
  }
  else
  {
    id v38 = v93;
    uint64_t v39 = v94;
  }
  uint64_t v94 = *(void *)(v39 + *(int *)(type metadata accessor for MLHandActionClassifier.ModelParameters(0) + 28));
  id v40 = [v38 shape];
  id v41 = v40;
  uint64_t v42 = type metadata accessor for NSNumber(0, &lazy cache variable for type metadata for NSNumber, NSNumber_ptr);
  uint64_t v43 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v41, v42);

  specialized Array._checkSubscript(_:wasNativeTypeChecked:)(0, (v43 & 0xC000000000000003) == 0, v43);
  if ((v43 & 0xC000000000000003) != 0) {
    id v44 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(0, v43);
  }
  else {
    id v44 = *(id *)(v43 + 32);
  }
  uint64_t v45 = v44;
  swift_bridgeObjectRelease(v43);
  uint64_t v90 = Int.init(truncating:)(v45);

  id v93 = v38;
  id v46 = MLMultiArray.cast(to:)((unsigned char *)&loc_1001D + 3);
  uint64_t v47 = type metadata accessor for ComputeDevice(0);
  uint64_t v48 = v87;
  __swift_storeEnumTagSinglePayload((uint64_t)v87, 1, 1, v47);
  uint64_t v49 = v86;
  Tensor.init(_:device:)(v46, v48, a5, a6);
  __swift_storeEnumTagSinglePayload((uint64_t)v48, 1, 1, v47);
  Tensor.init(oneHotAtIndex:depth:onValue:offValue:on:)(v78, v77, v48, 1.0, 0.0);
  uint64_t v50 = v94;
  uint64_t v51 = v90;
  if (v90 < v94)
  {
    uint64_t v52 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Int>);
    uint64_t v53 = (void *)swift_allocObject(v52, 56, 7);
    v53[2] = 3;
    void v53[3] = 6;
    BOOL v54 = __OFSUB__(v50, v51);
    uint64_t v55 = v50 - v51;
    if (v54) {
      BUG();
    }
    void v53[4] = v55;
    v53[5] = 3;
    v53[6] = 21;
    uint64_t v56 = v83;
    TensorShape.init(_:)(v53, COERCE_DOUBLE(1065353216), 0.0);
    uint64_t v57 = v80;
    (*(void (**)(void *, void, uint64_t))(v82 + 104))(v80, enum case for ScalarType.float32(_:), v81);
    uint64_t v58 = (uint64_t)v87;
    __swift_storeEnumTagSinglePayload((uint64_t)v87, 1, 1, v47);
    uint64_t v59 = v92;
    Tensor.init(zeros:scalarType:on:)(v56, v57, v58);
    uint64_t v60 = v88;
    Tensor.concatenated(with:alongAxis:)(v59, 0);
    uint64_t v61 = v91;
    long long v62 = *(void (**)(void *, uint64_t))(v91 + 8);
    uint64_t v63 = v59;
    uint64_t v64 = v89;
    v62(v63, v89);
LABEL_14:
    v62(v49, v64);
    (*(void (**)(void *, void *, uint64_t))(v61 + 32))(v49, v60, v64);
    goto LABEL_15;
  }
  uint64_t v64 = v89;
  uint64_t v61 = v91;
  if (v90 > v94)
  {
    int64_t v65 = v90 - v94;
    if (__OFSUB__(v90, v94)) {
      BUG();
    }
    if (v65 < 0) {
      BUG();
    }
    if (!v65) {
      BUG();
    }
    uint64_t v66 = specialized RandomNumberGenerator.next<A>(upperBound:)(v65);
    uint64_t v67 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Int>);
    uint64_t v68 = swift_allocObject(v67, 56, 7);
    *(void *)(v68 + 16) = 3;
    *(void *)(v68 + 24) = 6;
    *(void *)(v68 + 32) = v66;
    *(_OWORD *)(v68 + 40) = 0;
    __m128 v69 = (void *)swift_allocObject(v67, 56, 7);
    LOBYTE(v66) = (_BYTE)v69;
    v69[2] = 3;
    v69[3] = 6;
    v69[4] = v94;
    v69[5] = 3;
    uint64_t v64 = v89;
    void v69[6] = 21;
    Tensor.slice(lowerBounds:sizes:)(v68, v69);
    swift_bridgeObjectRelease(v68);
    swift_bridgeObjectRelease(v66);
    uint64_t v61 = v91;
    long long v62 = *(void (**)(void *, uint64_t))(v91 + 8);
    uint64_t v60 = v92;
    goto LABEL_14;
  }
LABEL_15:
  uint64_t v70 = *(void (**)(void *, void *, uint64_t))(v61 + 16);
  uint64_t v71 = v92;
  v70(v92, v49, v64);
  int v72 = v88;
  int v73 = v85;
  v70(v88, v85, v64);
  DataSample.init(features:labels:)(v71, v72, v64, v64);

  uint64_t v74 = *(void (**)(void *, uint64_t))(v91 + 8);
  v74(v73, v64);
  return ((uint64_t (*)(void *, uint64_t))v74)(v86, v64);
}

id static MLHandActionClassifier.dataAugmentation(_:options:)(id a1, uint64_t *a2)
{
  uint64_t v5 = v2;
  uint64_t v5 = *a2;
  switch(static MLHandActionClassifier.chooseAugmentationOption(_:)(&v5))
  {
    case 1:
      uint64_t v3 = specialized RandomNumberGenerator.next<A>(upperBound:)(4uLL);
      id result = static MLHandActionClassifier.horizontalFlip(_:caseSelected:)(a1, v3);
      break;
    case 2:
      id result = static MLHandActionClassifier.randomMove(_:)(a1);
      break;
    case 3:
      id result = static MLHandActionClassifier.randomShift(_:)(a1);
      break;
    case 4:
      id result = static MLHandActionClassifier.randomScale(_:)(a1);
      break;
    case 5:
      id result = static MLHandActionClassifier.timeInterpolate(_:)(a1);
      break;
    case 6:
      id result = static MLHandActionClassifier.frameDrop(_:)(a1);
      break;
    default:
      id result = a1;
      break;
  }
  return result;
}

uint64_t static MLHandActionClassifier.chooseAugmentationOption(_:)(uint64_t *a1)
{
  uint64_t v1 = *a1;
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Int>);
  uint64_t inited = (char *)swift_initStackObject(v2, v14);
  uint64_t v4 = inited;
  *((void *)inited + 2) = 1;
  *((void *)inited + 3) = 2;
  *((void *)inited + 4) = 0;
  if (v1)
  {
    unint64_t v5 = 2;
    uint64_t v2 = 1;
    uint64_t v4 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(1, 2, 1, (uint64_t)inited);
    *((void *)v4 + 2) = 2;
    *((void *)v4 + 5) = 1;
  }
  else
  {
    unint64_t v5 = 1;
  }
  if ((v1 & 2) != 0)
  {
    if (*((void *)v4 + 3) >> 1 <= v5)
    {
      uint64_t v2 = *((void *)v4 + 3) >= 2uLL;
      uint64_t v4 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(v2, v5 + 1, 1, (uint64_t)v4);
    }
    *((void *)v4 + 2) = v5 + 1;
    *(void *)&v4[8 * v5 + 32] = 2;
  }
  if ((v1 & 4) != 0)
  {
    unint64_t v6 = *((void *)v4 + 2);
    if (*((void *)v4 + 3) >> 1 <= v6)
    {
      uint64_t v2 = *((void *)v4 + 3) >= 2uLL;
      uint64_t v4 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(v2, v6 + 1, 1, (uint64_t)v4);
    }
    *((void *)v4 + 2) = v6 + 1;
    *(void *)&v4[8 * v6 + 32] = 3;
  }
  if ((v1 & 8) != 0)
  {
    unint64_t v7 = *((void *)v4 + 2);
    if (*((void *)v4 + 3) >> 1 <= v7)
    {
      uint64_t v2 = *((void *)v4 + 3) >= 2uLL;
      uint64_t v4 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(v2, v7 + 1, 1, (uint64_t)v4);
    }
    *((void *)v4 + 2) = v7 + 1;
    *(void *)&v4[8 * v7 + 32] = 4;
  }
  if ((v1 & 0x10) != 0)
  {
    unint64_t v8 = *((void *)v4 + 2);
    if (*((void *)v4 + 3) >> 1 <= v8)
    {
      uint64_t v2 = *((void *)v4 + 3) >= 2uLL;
      uint64_t v4 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(v2, v8 + 1, 1, (uint64_t)v4);
    }
    *((void *)v4 + 2) = v8 + 1;
    *(void *)&v4[8 * v8 + 32] = 5;
  }
  if ((v1 & 0x20) != 0)
  {
    unint64_t v9 = *((void *)v4 + 2);
    if (*((void *)v4 + 3) >> 1 <= v9)
    {
      uint64_t v2 = *((void *)v4 + 3) >= 2uLL;
      uint64_t v4 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(v2, v9 + 1, 1, (uint64_t)v4);
    }
    *((void *)v4 + 2) = v9 + 1;
    *(void *)&v4[8 * v9 + 32] = 6;
  }
  uint64_t v10 = specialized Collection.randomElement<A>(using:)(v2, (uint64_t)v4);
  char v12 = v11;
  swift_bridgeObjectRelease((_BYTE)v4);
  uint64_t result = 0;
  if ((v12 & 1) == 0) {
    return v10;
  }
  return result;
}

id static MLHandActionClassifier.horizontalFlip(_:caseSelected:)(id a1, uint64_t a2)
{
  uint64_t v92 = a2;
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<[Int]>);
  uint64_t inited = (void *)swift_initStackObject(v2, v85);
  inited[2] = 8;
  inited[3] = 16;
  inited[4] = &outlined read-only object #0 of static MLHandActionClassifier.horizontalFlip(_:caseSelected:);
  inited[5] = &outlined read-only object #1 of static MLHandActionClassifier.horizontalFlip(_:caseSelected:);
  inited[6] = &outlined read-only object #2 of static MLHandActionClassifier.horizontalFlip(_:caseSelected:);
  inited[7] = &outlined read-only object #3 of static MLHandActionClassifier.horizontalFlip(_:caseSelected:);
  inited[8] = &outlined read-only object #4 of static MLHandActionClassifier.horizontalFlip(_:caseSelected:);
  inited[9] = &outlined read-only object #5 of static MLHandActionClassifier.horizontalFlip(_:caseSelected:);
  inited[10] = &outlined read-only object #6 of static MLHandActionClassifier.horizontalFlip(_:caseSelected:);
  inited[11] = &outlined read-only object #7 of static MLHandActionClassifier.horizontalFlip(_:caseSelected:);
  id v4 = [a1 shape];
  id v5 = v4;
  uint64_t v96 = type metadata accessor for NSNumber(0, &lazy cache variable for type metadata for NSNumber, NSNumber_ptr);
  uint64_t v6 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v5, v96);

  specialized Array._checkSubscript(_:wasNativeTypeChecked:)(0, (v6 & 0xC000000000000003) == 0, v6);
  if ((v6 & 0xC000000000000003) != 0) {
    id v7 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(0, v6);
  }
  else {
    id v7 = *(id *)(v6 + 32);
  }
  unint64_t v8 = v7;
  swift_bridgeObjectRelease(v6);
  id v93 = [v8 integerValue];

  id v9 = [a1 shape];
  id v10 = v9;
  uint64_t v11 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v10, v96);

  specialized Array._checkSubscript(_:wasNativeTypeChecked:)(2, (v11 & 0xC000000000000003) == 0, v11);
  uint64_t v91 = inited;
  if ((v11 & 0xC000000000000003) != 0) {
    id v12 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(2, v11);
  }
  else {
    id v12 = *(id *)(v11 + 48);
  }
  int64_t v13 = v12;
  swift_bridgeObjectRelease(v11);
  id v89 = [v13 integerValue];

  id v14 = [a1 shape];
  id v15 = v14;
  uint64_t v16 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v15, v96);

  objc_allocWithZone((Class)MLMultiArray);
  id v17 = @nonobjc MLMultiArray.init(shape:dataType:)(v16, 65600);
  id v87 = v17;
  uint64_t v90 = (char *)UnsafeMutableBufferPointer.init(_:)(v87, &type metadata for Double);
  uint64_t v18 = v91;
  uint64_t v20 = v19;
  id v95 = a1;
  int64_t v21 = (char *)UnsafeMutableBufferPointer.init(_:)(v95, &type metadata for Double);
  if (v22 && v20)
  {
    if (v22 < v20) {
      uint64_t v20 = v22;
    }
    specialized UnsafeMutablePointer.initialize(from:count:)(v21, v20, v90);
  }
  if (v92 != 3)
  {
    id v23 = v93;
    if ((uint64_t)v93 < 0) {
      BUG();
    }
    if (v93)
    {
      unint64_t v24 = 0;
      do
      {
        if ((id)v24 == v23) {
          BUG();
        }
        unint64_t v94 = v24;
        if (v92 == 1) {
          goto LABEL_33;
        }
        if ((uint64_t)v89 < 0) {
          BUG();
        }
        if (v89)
        {
          for (unint64_t i = 0; (id)i != v89; ++i)
          {
            id v26 = [v95 strides];
            id v27 = v26;
            uint64_t v28 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v27, v96);

            if ((v28 & 0xC000000000000003) != 0)
            {
              id v29 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(0, v28);
            }
            else
            {
              if (!*(void *)((char *)&dword_10 + (v28 & 0xFFFFFFFFFFFFF8))) {
                BUG();
              }
              id v29 = *(id *)(v28 + 32);
            }
            uint64_t v30 = v29;
            swift_bridgeObjectRelease(v28);
            unint64_t v31 = (unint64_t)[v30 integerValue];

            unint64_t v33 = v31;
            unint64_t v32 = v94 * v31;
            if (!is_mul_ok(v94, v33)) {
              BUG();
            }
            id v34 = [v95 strides];
            id v35 = v34;
            uint64_t v36 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v35, v96);

            if ((v36 & 0xC000000000000003) != 0)
            {
              id v37 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(2, v36);
            }
            else
            {
              if (*(void *)((char *)&dword_10 + (v36 & 0xFFFFFFFFFFFFF8)) < 3uLL) {
                BUG();
              }
              id v37 = *(id *)(v36 + 48);
            }
            id v38 = v37;
            swift_bridgeObjectRelease(v36);
            unint64_t v39 = (unint64_t)[v38 integerValue];

            unint64_t v41 = v39;
            unint64_t v40 = i * v39;
            if (!is_mul_ok(i, v41)) {
              BUG();
            }
            BOOL v42 = __OFADD__(v40, v32);
            unint64_t v43 = v40 + v32;
            if (v42) {
              BUG();
            }
            *(double *)&v90[8 * v43] = 1.0 - *(double *)&v90[8 * v43];
          }
        }
        id v23 = v93;
        unint64_t v24 = v94;
        uint64_t v18 = v91;
        if (v92)
        {
LABEL_33:
          if (v18[2] < 8uLL) {
            BUG();
          }
          swift_bridgeObjectRetain((_BYTE)v18);
          uint64_t v44 = 4;
          do
          {
            uint64_t v88 = (void *)v18[v44];
            swift_bridgeObjectRetain((_BYTE)v88);
            id v45 = [v95 strides];
            id v46 = v45;
            uint64_t v47 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v46, v96);

            uint64_t v86 = v44;
            if ((v47 & 0xC000000000000003) != 0)
            {
              id v48 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(0, v47);
            }
            else
            {
              if (!*(void *)((char *)&dword_10 + (v47 & 0xFFFFFFFFFFFFF8))) {
                BUG();
              }
              id v48 = *(id *)(v47 + 32);
            }
            uint64_t v49 = v48;
            swift_bridgeObjectRelease(v47);
            unint64_t v50 = (unint64_t)[v49 integerValue];

            unint64_t v52 = v50;
            unint64_t v51 = v24 * v50;
            if (!is_mul_ok(v24, v52)) {
              BUG();
            }
            if (!v88[2]) {
              BUG();
            }
            unint64_t v53 = v88[4];
            id v54 = [v95 strides];
            id v55 = v54;
            uint64_t v56 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v55, v96);
            ((void (*)(id))objc_release)(v55);
            if ((v56 & 0xC000000000000003) != 0)
            {
              id v57 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(2, v56);
            }
            else
            {
              if (*(void *)((char *)&dword_10 + (v56 & 0xFFFFFFFFFFFFF8)) < 3uLL) {
                BUG();
              }
              id v57 = *(id *)(v56 + 48);
            }
            uint64_t v58 = v57;
            swift_bridgeObjectRelease(v56);
            unint64_t v59 = (unint64_t)[v58 integerValue];

            unint64_t v61 = v53;
            unint64_t v60 = v59 * v53;
            unint64_t v62 = v94;
            if (!is_mul_ok(v59, v61)) {
              BUG();
            }
            BOOL v42 = __OFADD__(v60, v51);
            unint64_t v63 = v60 + v51;
            if (v42) {
              BUG();
            }
            id v64 = [v95 strides];
            id v65 = v64;
            uint64_t v66 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v65, v96);

            if ((v66 & 0xC000000000000003) != 0)
            {
              id v67 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(0, v66);
            }
            else
            {
              if (!*(void *)((char *)&dword_10 + (v66 & 0xFFFFFFFFFFFFF8))) {
                BUG();
              }
              id v67 = *(id *)(v66 + 32);
            }
            uint64_t v68 = v67;
            swift_bridgeObjectRelease(v66);
            unint64_t v69 = (unint64_t)[v68 integerValue];

            unint64_t v71 = v69;
            unint64_t v70 = v62 * v69;
            if (!is_mul_ok(v62, v71)) {
              BUG();
            }
            if (v88[2] < 2uLL) {
              BUG();
            }
            unint64_t v72 = v88[5];
            swift_bridgeObjectRelease((_BYTE)v88);
            id v73 = [v95 strides];
            id v74 = v73;
            uint64_t v75 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v74, v96);

            if ((v75 & 0xC000000000000003) != 0)
            {
              id v76 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(2, v75);
            }
            else
            {
              if (*(void *)((char *)&dword_10 + (v75 & 0xFFFFFFFFFFFFF8)) < 3uLL) {
                BUG();
              }
              id v76 = *(id *)(v75 + 48);
            }
            uint64_t v77 = v76;
            swift_bridgeObjectRelease(v75);
            unint64_t v78 = (unint64_t)[v77 integerValue];

            unint64_t v80 = v72;
            unint64_t v79 = v78 * v72;
            if (!is_mul_ok(v78, v80)) {
              BUG();
            }
            BOOL v42 = __OFADD__(v79, v70);
            unint64_t v81 = v79 + v70;
            if (v42) {
              BUG();
            }
            uint64_t v82 = v90;
            uint64_t v83 = *(void *)&v90[8 * v63];
            *(void *)&v90[8 * v63] = *(void *)&v90[8 * v81];
            *(void *)&v82[8 * v81] = v83;
            uint64_t v44 = v86 + 1;
            uint64_t v18 = v91;
            unint64_t v24 = v94;
          }
          while (v86 != 11);
          swift_bridgeObjectRelease((_BYTE)v91);
          id v23 = v93;
        }
        ++v24;
      }
      while ((id)v24 != v23);
    }
  }
  swift_bridgeObjectRelease((_BYTE)v18);
  return v87;
}

id static MLHandActionClassifier.randomMove(_:)(id a1)
{
  id v1 = [a1 shape];
  id v2 = v1;
  uint64_t v101 = type metadata accessor for NSNumber(0, &lazy cache variable for type metadata for NSNumber, NSNumber_ptr);
  uint64_t v3 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v2, v101);

  specialized Array._checkSubscript(_:wasNativeTypeChecked:)(0, (v3 & 0xC000000000000003) == 0, v3);
  if ((v3 & 0xC000000000000003) != 0) {
    id v4 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(0, v3);
  }
  else {
    id v4 = *(id *)(v3 + 32);
  }
  id v5 = v4;
  swift_bridgeObjectRelease(v3);
  uint64_t v106 = (char *)[v5 integerValue];

  id v6 = [a1 shape];
  id v7 = v6;
  uint64_t v8 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v7, v101);

  specialized Array._checkSubscript(_:wasNativeTypeChecked:)(2, (v8 & 0xC000000000000003) == 0, v8);
  id v94 = a1;
  if ((v8 & 0xC000000000000003) != 0) {
    id v9 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(2, v8);
  }
  else {
    id v9 = *(id *)(v8 + 48);
  }
  id v10 = v9;
  swift_bridgeObjectRelease(v8);
  id v95 = [v10 integerValue];

  specialized MutableCollection<>.shuffle<A>(using:)();
  uint64_t v96 = specialized MutableCollection.subscript.getter(0, 1, (uint64_t)&outlined read-only object #0 of static MLHandActionClassifier.randomMove(_:));
  uint64_t v112 = v11;
  uint64_t v114 = (float *)v12;
  unint64_t v14 = v13;
  swift_release();
  specialized MutableCollection<>.shuffle<A>(using:)();
  uint64_t v97 = specialized MutableCollection.subscript.getter(0, 1, (uint64_t)&outlined read-only object #1 of static MLHandActionClassifier.randomMove(_:));
  uint64_t v107 = v15;
  uint64_t v110 = v16;
  unint64_t v111 = v17;
  swift_release();
  specialized MutableCollection<>.shuffle<A>(using:)();
  uint64_t v98 = specialized MutableCollection.subscript.getter(0, 1, (uint64_t)&outlined read-only object #2 of static MLHandActionClassifier.randomMove(_:));
  *(void *)&long long v100 = v18;
  uint64_t v109 = v19;
  unint64_t v108 = v20;
  swift_release();
  uint64_t v113 = &outlined read-only object #2 of static MLHandActionClassifier.randomMove(_:);
  specialized MutableCollection<>.shuffle<A>(using:)();
  uint64_t v21 = specialized MutableCollection.subscript.getter(0, 1, (uint64_t)&outlined read-only object #2 of static MLHandActionClassifier.randomMove(_:));
  id v23 = v22;
  uint64_t v102 = v24;
  unint64_t v103 = v25;
  swift_release();
  uint64_t v26 = (uint64_t)v106;
  uint64_t v99 = v21;
  if (v106 == (unsigned char *)&dword_0 + 1)
  {
    id v27 = v23;
    uint64_t v28 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Float>);
    uint64_t v29 = swift_allocObject(v28, 36, 7);
    *(void *)(v29 + 16) = 1;
    *(void *)(v29 + 24) = 2;
    if ((uint64_t)v114 > 0 || v14 < 2) {
      BUG();
    }
    float v30 = (float)(*v112 * 3.1415925) / 180.0;
    uint64_t v114 = (float *)v29;
    *(float *)(v29 + 32) = v30;
    uint64_t v31 = swift_allocObject(v28, 36, 7);
    *(void *)(v31 + 16) = 1;
    uint64_t v112 = (float *)v31;
    *(void *)(v31 + 24) = 2;
    if ((uint64_t)v110 > 0 || v111 < 2) {
      BUG();
    }
    v112[8] = *v107;
    uint64_t v32 = swift_allocObject(v28, 36, 7);
    *(void *)(v32 + 16) = 1;
    *(void *)(v32 + 24) = 2;
    if (v109 > 0 || v108 < 2) {
      BUG();
    }
    *(_DWORD *)(v32 + 32) = *(_DWORD *)v100;
    uint64_t v113 = (void *)v32;
    unint64_t v33 = (float *)swift_allocObject(v28, 36, 7);
    *((void *)v33 + 2) = 1;
    *((void *)v33 + 3) = 2;
    if (v102 > 0 || v103 < 2) {
      BUG();
    }
    v33[8] = *v27;
  }
  else
  {
    if ((uint64_t)v114 > 0 || v14 < 2) {
      BUG();
    }
    if (v14 < 4) {
      BUG();
    }
    id v34 = (float *)specialized linearSpace #1 <A>(from:through:count:) in static MLHandActionClassifier.randomMove(_:)((uint64_t)v106, *v112, v112[1]);
    int64_t v35 = *((void *)v34 + 2);
    if (v35)
    {
      uint64_t v112 = v23;
      uint64_t v113 = _swiftEmptyArrayStorage;
      uint64_t v36 = 0;
      uint64_t v114 = v34;
      specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v35, 0);
      id v37 = _swiftEmptyArrayStorage;
      unint64_t v38 = _swiftEmptyArrayStorage[2];
      do
      {
        float v39 = v34[v36 + 8];
        uint64_t v113 = v37;
        unint64_t v40 = v37[3];
        if (v40 >> 1 <= v38)
        {
          float v104 = v39;
          specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v40 >= 2, v38 + 1, 1);
          id v34 = v114;
          id v37 = v113;
        }
        ++v36;
        v37[2] = v38 + 1;
        *((float *)v37 + v38++ + 8) = (float)(v39 * 3.1415925) / 180.0;
      }
      while (v35 != v36);
      swift_bridgeObjectRelease((_BYTE)v34);
      unint64_t v41 = (float *)v37;
      uint64_t v26 = (uint64_t)v106;
      id v23 = v112;
    }
    else
    {
      swift_bridgeObjectRelease((_BYTE)v34);
      unint64_t v41 = (float *)_swiftEmptyArrayStorage;
    }
    if ((uint64_t)v110 > 0 || v111 < 2) {
      BUG();
    }
    if (v111 < 4) {
      BUG();
    }
    uint64_t v114 = v41;
    uint64_t v112 = (float *)specialized linearSpace #1 <A>(from:through:count:) in static MLHandActionClassifier.randomMove(_:)(v26, *v107, v107[1]);
    if (v109 > 0 || v108 < 2) {
      BUG();
    }
    if (v108 < 4) {
      BUG();
    }
    uint64_t v113 = specialized linearSpace #1 <A>(from:through:count:) in static MLHandActionClassifier.randomMove(_:)(v26, *(float *)v100, *(float *)(v100 + 4));
    if (v102 > 0 || v103 < 2) {
      BUG();
    }
    if (v103 < 4) {
      BUG();
    }
    unint64_t v33 = (float *)specialized linearSpace #1 <A>(from:through:count:) in static MLHandActionClassifier.randomMove(_:)(v26, *v23, v23[1]);
  }
  id v93 = v33;
  uint64_t v42 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<[[Float]]>);
  uint64_t inited = (void *)swift_initStackObject(v42, v92);
  inited[2] = 2;
  uint64_t v110 = inited;
  inited[3] = 4;
  unint64_t v111 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<[Float]>);
  uint64_t v44 = (float *)swift_allocObject(v111, 48, 7);
  *((void *)v44 + 2) = 2;
  *((void *)v44 + 3) = 4;
  id v45 = cos #1 (_:) in static MLHandActionClassifier.randomMove(_:)((uint64_t)v114, (float (*)(double))&cosf);
  uint64_t v46 = (uint64_t)v112;
  swift_bridgeObjectRetain((_BYTE)v112);
  uint64_t v47 = 0;
  MLSFRzlE1moi33_5442BF52D76DA1BBD780DB5A1A47CDFALLySayxGAD_ADtFZxx_xt_tXEfU_Sf_TG5Tf1cn_n = _sSTsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFs12Zip2SequenceVySaySfGAHG_Sfs5NeverOTg592_sSa8CreateMLSFRzlE1moi33_5442BF52D76DA1BBD780DB5A1A47CDFALLySayxGAD_ADtFZxx_xt_tXEfU_Sf_TG5Tf1cn_n((uint64_t)v45, v46);
  swift_bridgeObjectRelease((_BYTE)v45);
  swift_bridgeObjectRelease(v46);
  uint64_t v107 = v44;
  *((void *)v44 + 4) = MLSFRzlE1moi33_5442BF52D76DA1BBD780DB5A1A47CDFALLySayxGAD_ADtFZxx_xt_tXEfU_Sf_TG5Tf1cn_n;
  uint64_t v49 = cos #1 (_:) in static MLHandActionClassifier.randomMove(_:)((uint64_t)v114, (float (*)(double))&sinf);
  int64_t v50 = v49[2];
  if (v50)
  {
    unint64_t v108 = 0;
    uint64_t v105 = _swiftEmptyArrayStorage;
    uint64_t v51 = 0;
    uint64_t v109 = (uint64_t)v49;
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v50, 0);
    uint64_t v52 = v109;
    unint64_t v53 = v105;
    unint64_t v54 = v105[2];
    do
    {
      long long v55 = *(unsigned int *)(v52 + 4 * v51 + 32);
      uint64_t v105 = v53;
      unint64_t v56 = v53[3];
      if (v56 >> 1 <= v54)
      {
        long long v100 = v55;
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v56 >= 2, v54 + 1, 1);
        LODWORD(v55) = v100;
        uint64_t v52 = v109;
        unint64_t v53 = v105;
      }
      ++v51;
      v53[2] = v54 + 1;
      *((float *)v53 + v54++ + 8) = -*(float *)&v55;
    }
    while (v50 != v51);
    swift_bridgeObjectRelease(v52);
    uint64_t v47 = v108;
  }
  else
  {
    swift_bridgeObjectRelease((_BYTE)v49);
    unint64_t v53 = _swiftEmptyArrayStorage;
  }
  uint64_t v57 = (uint64_t)v112;
  swift_bridgeObjectRetain((_BYTE)v112);
  swift_bridgeObjectRetain((_BYTE)v53);
  uint64_t v58 = _sSTsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFs12Zip2SequenceVySaySfGAHG_Sfs5NeverOTg592_sSa8CreateMLSFRzlE1moi33_5442BF52D76DA1BBD780DB5A1A47CDFALLySayxGAD_ADtFZxx_xt_tXEfU_Sf_TG5Tf1cn_n((uint64_t)v53, v57);
  swift_bridgeObjectRelease(v57);
  swift_bridgeObjectRelease_n(v53, 2, v59, v60, v61);
  unint64_t v62 = v107;
  *((void *)v107 + 5) = v58;
  v110[4] = v62;
  unint64_t v63 = (void *)swift_allocObject(v111, 48, 7);
  v63[2] = 2;
  v63[3] = 4;
  uint64_t v64 = (uint64_t)v114;
  id v65 = cos #1 (_:) in static MLHandActionClassifier.randomMove(_:)((uint64_t)v114, (float (*)(double))&sinf);
  swift_bridgeObjectRetain(v57);
  unint64_t v111 = (unint64_t)_sSTsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFs12Zip2SequenceVySaySfGAHG_Sfs5NeverOTg592_sSa8CreateMLSFRzlE1moi33_5442BF52D76DA1BBD780DB5A1A47CDFALLySayxGAD_ADtFZxx_xt_tXEfU_Sf_TG5Tf1cn_n((uint64_t)v65, v57);
  swift_bridgeObjectRelease((_BYTE)v65);
  swift_bridgeObjectRelease(v57);
  v63[4] = v111;
  uint64_t v66 = cos #1 (_:) in static MLHandActionClassifier.randomMove(_:)(v64, (float (*)(double))&cosf);
  swift_bridgeObjectRelease(v64);
  swift_bridgeObjectRetain(v57);
  swift_bridgeObjectRetain((_BYTE)v66);
  id v67 = _sSTsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFs12Zip2SequenceVySaySfGAHG_Sfs5NeverOTg592_sSa8CreateMLSFRzlE1moi33_5442BF52D76DA1BBD780DB5A1A47CDFALLySayxGAD_ADtFZxx_xt_tXEfU_Sf_TG5Tf1cn_n((uint64_t)v66, v57);
  swift_bridgeObjectRelease_n(v57, 2, v68, v69, v70);
  swift_bridgeObjectRelease_n(v66, 2, v71, v72, v73);
  v63[5] = v67;
  v110[5] = v63;
  id v74 = v94;
  id v75 = [v94 shape];
  id v76 = v75;
  uint64_t v77 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v76, v101);

  objc_allocWithZone((Class)MLMultiArray);
  id v78 = @nonobjc MLMultiArray.init(shape:dataType:)(v77, 65600);
  uint64_t v114 = (float *)v47;
  if (v47)
  {
    uint64_t v90 = 260;
    uint64_t v91 = (uint64_t)v114;
    goto LABEL_63;
  }
  id v79 = v78;
  id v80 = [v79 dataPointer];
  id v81 = v74;
  id v82 = [v81 dataPointer];
  unint64_t v83 = (unint64_t)[v81 count];
  if (((v83 - 0x1000000000000000) >> 61) < 7) {
    BUG();
  }
  memcpy(v80, v82, 8 * v83);
  id v84 = v79;
  uint64_t v85 = (uint64_t)v114;
  uint64_t v86 = UnsafeMutableBufferPointer.init(_:)(v84, &type metadata for Double);
  if (v85)
  {
    uint64_t v90 = 221;
    uint64_t v91 = v85;
LABEL_63:
    swift_unexpectedError(v91, "CreateML/_MLHandActionClassifier+DataHandling.swift", 51, 1, v90);
    BUG();
  }
  uint64_t v88 = v110;
  closure #3 in static MLHandActionClassifier.randomMove(_:)(v86, v87, (uint64_t)v106, (uint64_t)v95, v81, v110, (uint64_t)&v113, (uint64_t)&v93);
  swift_unknownObjectRelease(v96);
  swift_unknownObjectRelease(v97);
  swift_unknownObjectRelease(v98);
  swift_unknownObjectRelease(v99);
  swift_setDeallocating(v88);
  specialized _ContiguousArrayStorage.__deallocating_deinit();
  swift_bridgeObjectRelease((_BYTE)v93);
  swift_bridgeObjectRelease((_BYTE)v113);
  return v84;
}

id static MLHandActionClassifier.randomShift(_:)(id a1)
{
  *(void *)&double v65 = specialized static BinaryFloatingPoint<>.random<A>(in:using:)(-0.1, 0.1);
  *(void *)&double v66 = specialized static BinaryFloatingPoint<>.random<A>(in:using:)(-0.1, 0.1);
  id v1 = [a1 shape];
  id v2 = v1;
  uint64_t v73 = type metadata accessor for NSNumber(0, &lazy cache variable for type metadata for NSNumber, NSNumber_ptr);
  uint64_t v3 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v2, v73);

  specialized Array._checkSubscript(_:wasNativeTypeChecked:)(0, (v3 & 0xC000000000000003) == 0, v3);
  if ((v3 & 0xC000000000000003) != 0) {
    id v4 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(0, v3);
  }
  else {
    id v4 = *(id *)(v3 + 32);
  }
  id v5 = v4;
  swift_bridgeObjectRelease(v3);
  id v69 = [v5 integerValue];

  id v6 = [a1 shape];
  id v7 = v6;
  uint64_t v8 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v7, v73);

  specialized Array._checkSubscript(_:wasNativeTypeChecked:)(2, (v8 & 0xC000000000000003) == 0, v8);
  if ((v8 & 0xC000000000000003) != 0) {
    id v9 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(2, v8);
  }
  else {
    id v9 = *(id *)(v8 + 48);
  }
  id v10 = v9;
  swift_bridgeObjectRelease(v8);
  id v71 = [v10 integerValue];

  id v11 = [a1 shape];
  id v12 = v11;
  uint64_t v13 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v12, v73);

  objc_allocWithZone((Class)MLMultiArray);
  id v14 = @nonobjc MLMultiArray.init(shape:dataType:)(v13, 65600);
  id v67 = v14;
  uint64_t v68 = (char *)UnsafeMutableBufferPointer.init(_:)(v67, &type metadata for Double);
  uint64_t v16 = v15;
  id v72 = a1;
  unint64_t v17 = (char *)UnsafeMutableBufferPointer.init(_:)(v72, &type metadata for Double);
  if (v18 && v16)
  {
    if (v18 < v16) {
      uint64_t v16 = v18;
    }
    specialized UnsafeMutablePointer.initialize(from:count:)(v17, v16, v68);
  }
  id v19 = v69;
  if ((uint64_t)v69 < 0) {
    BUG();
  }
  if (v69)
  {
    if ((uint64_t)v71 < 0) {
      BUG();
    }
    unint64_t v20 = 0;
    do
    {
      if ((id)v20 == v19) {
        BUG();
      }
      unint64_t v70 = v20;
      if (v71)
      {
        for (unint64_t i = 0; (id)i != v71; ++i)
        {
          id v22 = [v72 strides];
          id v23 = v22;
          uint64_t v24 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v23, v73);

          if ((v24 & 0xC000000000000003) != 0)
          {
            id v25 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(0, v24);
          }
          else
          {
            if (!*(void *)((char *)&dword_10 + (v24 & 0xFFFFFFFFFFFFF8))) {
              BUG();
            }
            id v25 = *(id *)(v24 + 32);
          }
          uint64_t v26 = v25;
          swift_bridgeObjectRelease(v24);
          unint64_t v27 = (unint64_t)[v26 integerValue];

          unint64_t v29 = v27;
          unint64_t v28 = v70 * v27;
          if (!is_mul_ok(v70, v29)) {
            BUG();
          }
          id v30 = [v72 strides];
          id v31 = v30;
          uint64_t v32 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v31, v73);

          if ((v32 & 0xC000000000000003) != 0)
          {
            id v33 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(2, v32);
          }
          else
          {
            if (*(void *)((char *)&dword_10 + (v32 & 0xFFFFFFFFFFFFF8)) < 3uLL) {
              BUG();
            }
            id v33 = *(id *)(v32 + 48);
          }
          id v34 = v33;
          swift_bridgeObjectRelease(v32);
          unint64_t v35 = (unint64_t)[v34 integerValue];

          unint64_t v37 = v35;
          unint64_t v36 = i * v35;
          if (!is_mul_ok(i, v37)) {
            BUG();
          }
          BOOL v38 = __OFADD__(v36, v28);
          unint64_t v39 = v36 + v28;
          if (v38) {
            BUG();
          }
          id v40 = [v72 strides];
          id v41 = v40;
          uint64_t v42 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v41, v73);

          if ((v42 & 0xC000000000000003) != 0)
          {
            id v43 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(0, v42);
          }
          else
          {
            if (!*(void *)((char *)&dword_10 + (v42 & 0xFFFFFFFFFFFFF8))) {
              BUG();
            }
            id v43 = *(id *)(v42 + 32);
          }
          uint64_t v44 = v43;
          swift_bridgeObjectRelease(v42);
          unint64_t v45 = (unint64_t)[v44 integerValue];

          unint64_t v47 = v45;
          unint64_t v46 = v70 * v45;
          if (!is_mul_ok(v70, v47)) {
            BUG();
          }
          id v48 = [v72 strides];
          id v49 = v48;
          uint64_t v50 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v49, v73);

          if ((v50 & 0xC000000000000003) != 0)
          {
            id v51 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(1, v50);
          }
          else
          {
            if (*(void *)((char *)&dword_10 + (v50 & 0xFFFFFFFFFFFFF8)) < 2uLL) {
              BUG();
            }
            id v51 = *(id *)(v50 + 40);
          }
          uint64_t v52 = v51;
          swift_bridgeObjectRelease(v50);
          unint64_t v53 = (char *)[v52 integerValue];

          BOOL v38 = __OFADD__(v53, v46);
          unint64_t v54 = &v53[v46];
          if (v38) {
            BUG();
          }
          id v55 = [v72 strides];
          id v56 = v55;
          uint64_t v57 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v56, v73);

          if ((v57 & 0xC000000000000003) != 0)
          {
            id v58 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(2, v57);
          }
          else
          {
            if (*(void *)((char *)&dword_10 + (v57 & 0xFFFFFFFFFFFFF8)) < 3uLL) {
              BUG();
            }
            id v58 = *(id *)(v57 + 48);
          }
          uint64_t v59 = v58;
          swift_bridgeObjectRelease(v57);
          unint64_t v60 = (unint64_t)[v59 integerValue];

          unint64_t v62 = v60;
          unint64_t v61 = i * v60;
          if (!is_mul_ok(i, v62)) {
            BUG();
          }
          BOOL v38 = __OFADD__(v61, v54);
          unint64_t v63 = &v54[v61];
          if (v38) {
            BUG();
          }
          *(double *)&v68[8 * v39] = *(double *)&v68[8 * v39] + v65;
          *(double *)&v68[8 * (void)v63] = *(double *)&v68[8 * (void)v63] + v66;
        }
      }
      unint64_t v20 = v70 + 1;
      id v19 = v69;
    }
    while ((id)(v70 + 1) != v69);
  }
  return v67;
}

id static MLHandActionClassifier.randomScale(_:)(id a1)
{
  *(void *)&double v65 = specialized static BinaryFloatingPoint<>.random<A>(in:using:)(0.8, 1.2);
  id v1 = [a1 shape];
  id v2 = v1;
  uint64_t v72 = type metadata accessor for NSNumber(0, &lazy cache variable for type metadata for NSNumber, NSNumber_ptr);
  uint64_t v3 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v2, v72);

  specialized Array._checkSubscript(_:wasNativeTypeChecked:)(0, (v3 & 0xC000000000000003) == 0, v3);
  if ((v3 & 0xC000000000000003) != 0) {
    id v4 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(0, v3);
  }
  else {
    id v4 = *(id *)(v3 + 32);
  }
  id v5 = v4;
  swift_bridgeObjectRelease(v3);
  id v68 = [v5 integerValue];

  id v6 = [a1 shape];
  id v7 = v6;
  uint64_t v8 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v7, v72);

  specialized Array._checkSubscript(_:wasNativeTypeChecked:)(2, (v8 & 0xC000000000000003) == 0, v8);
  if ((v8 & 0xC000000000000003) != 0) {
    id v9 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(2, v8);
  }
  else {
    id v9 = *(id *)(v8 + 48);
  }
  id v10 = v9;
  swift_bridgeObjectRelease(v8);
  id v70 = [v10 integerValue];

  id v11 = [a1 shape];
  id v12 = v11;
  uint64_t v13 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v12, v72);

  objc_allocWithZone((Class)MLMultiArray);
  id v14 = @nonobjc MLMultiArray.init(shape:dataType:)(v13, 65600);
  id v66 = v14;
  id v67 = (char *)UnsafeMutableBufferPointer.init(_:)(v66, &type metadata for Double);
  uint64_t v16 = v15;
  id v71 = a1;
  unint64_t v17 = (char *)UnsafeMutableBufferPointer.init(_:)(v71, &type metadata for Double);
  if (v18 && v16)
  {
    if (v18 < v16) {
      uint64_t v16 = v18;
    }
    specialized UnsafeMutablePointer.initialize(from:count:)(v17, v16, v67);
  }
  id v19 = v68;
  if ((uint64_t)v68 < 0) {
    BUG();
  }
  if (v68)
  {
    if ((uint64_t)v70 < 0) {
      BUG();
    }
    unint64_t v20 = 0;
    do
    {
      if ((id)v20 == v19) {
        BUG();
      }
      unint64_t v69 = v20;
      if (v70)
      {
        for (unint64_t i = 0; (id)i != v70; ++i)
        {
          id v22 = [v71 strides];
          id v23 = v22;
          uint64_t v24 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v23, v72);

          if ((v24 & 0xC000000000000003) != 0)
          {
            id v25 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(0, v24);
          }
          else
          {
            if (!*(void *)((char *)&dword_10 + (v24 & 0xFFFFFFFFFFFFF8))) {
              BUG();
            }
            id v25 = *(id *)(v24 + 32);
          }
          uint64_t v26 = v25;
          swift_bridgeObjectRelease(v24);
          unint64_t v27 = (unint64_t)[v26 integerValue];

          unint64_t v29 = v27;
          unint64_t v28 = v69 * v27;
          if (!is_mul_ok(v69, v29)) {
            BUG();
          }
          id v30 = [v71 strides];
          id v31 = v30;
          uint64_t v32 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v31, v72);

          if ((v32 & 0xC000000000000003) != 0)
          {
            id v33 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(2, v32);
          }
          else
          {
            if (*(void *)((char *)&dword_10 + (v32 & 0xFFFFFFFFFFFFF8)) < 3uLL) {
              BUG();
            }
            id v33 = *(id *)(v32 + 48);
          }
          id v34 = v33;
          swift_bridgeObjectRelease(v32);
          unint64_t v35 = (unint64_t)[v34 integerValue];

          unint64_t v37 = v35;
          unint64_t v36 = i * v35;
          if (!is_mul_ok(i, v37)) {
            BUG();
          }
          BOOL v38 = __OFADD__(v36, v28);
          unint64_t v39 = v36 + v28;
          if (v38) {
            BUG();
          }
          id v40 = [v71 strides];
          id v41 = v40;
          uint64_t v42 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v41, v72);

          if ((v42 & 0xC000000000000003) != 0)
          {
            id v43 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(0, v42);
          }
          else
          {
            if (!*(void *)((char *)&dword_10 + (v42 & 0xFFFFFFFFFFFFF8))) {
              BUG();
            }
            id v43 = *(id *)(v42 + 32);
          }
          uint64_t v44 = v43;
          swift_bridgeObjectRelease(v42);
          unint64_t v45 = (unint64_t)[v44 integerValue];

          unint64_t v47 = v45;
          unint64_t v46 = v69 * v45;
          if (!is_mul_ok(v69, v47)) {
            BUG();
          }
          id v48 = [v71 strides];
          id v49 = v48;
          uint64_t v50 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v49, v72);

          if ((v50 & 0xC000000000000003) != 0)
          {
            id v51 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(1, v50);
          }
          else
          {
            if (*(void *)((char *)&dword_10 + (v50 & 0xFFFFFFFFFFFFF8)) < 2uLL) {
              BUG();
            }
            id v51 = *(id *)(v50 + 40);
          }
          uint64_t v52 = v51;
          swift_bridgeObjectRelease(v50);
          unint64_t v53 = (char *)[v52 integerValue];

          BOOL v38 = __OFADD__(v53, v46);
          unint64_t v54 = &v53[v46];
          if (v38) {
            BUG();
          }
          id v55 = [v71 strides];
          id v56 = v55;
          uint64_t v57 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v56, v72);

          if ((v57 & 0xC000000000000003) != 0)
          {
            id v58 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(2, v57);
          }
          else
          {
            if (*(void *)((char *)&dword_10 + (v57 & 0xFFFFFFFFFFFFF8)) < 3uLL) {
              BUG();
            }
            id v58 = *(id *)(v57 + 48);
          }
          uint64_t v59 = v58;
          swift_bridgeObjectRelease(v57);
          unint64_t v60 = (unint64_t)[v59 integerValue];

          unint64_t v62 = v60;
          unint64_t v61 = i * v60;
          if (!is_mul_ok(i, v62)) {
            BUG();
          }
          BOOL v38 = __OFADD__(v61, v54);
          unint64_t v63 = &v54[v61];
          if (v38) {
            BUG();
          }
          *(double *)&v67[8 * v39] = *(double *)&v67[8 * v39] * v65;
          *(double *)&v67[8 * (void)v63] = *(double *)&v67[8 * (void)v63] * v65;
        }
      }
      unint64_t v20 = v69 + 1;
      id v19 = v68;
    }
    while ((id)(v69 + 1) != v68);
  }
  return v66;
}

id static MLHandActionClassifier.timeInterpolate(_:)(id a1)
{
  *(void *)&double v69 = specialized static BinaryFloatingPoint<>.random<A>(in:using:)(0.0, 0.2);
  *(void *)&double v62 = specialized static BinaryFloatingPoint<>.random<A>(in:using:)(0.0, 1.0);
  id v1 = [a1 shape];
  id v2 = v1;
  uint64_t v65 = type metadata accessor for NSNumber(0, &lazy cache variable for type metadata for NSNumber, NSNumber_ptr);
  uint64_t v3 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v2, v65);

  specialized Array._checkSubscript(_:wasNativeTypeChecked:)(0, (v3 & 0xC000000000000003) == 0, v3);
  if ((v3 & 0xC000000000000003) != 0) {
    id v4 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(0, v3);
  }
  else {
    id v4 = *(id *)(v3 + 32);
  }
  id v5 = v4;
  swift_bridgeObjectRelease(v3);
  unsigned int v6 = [v5 integerValue];

  id v7 = [a1 shape];
  id v8 = v7;
  uint64_t v9 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v8, v65);

  specialized Array._checkSubscript(_:wasNativeTypeChecked:)(1, (v9 & 0xC000000000000003) == 0, v9);
  int v67 = v6;
  if ((v9 & 0xC000000000000003) != 0) {
    id v10 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(1, v9);
  }
  else {
    id v10 = *(id *)(v9 + 40);
  }
  id v11 = v10;
  swift_bridgeObjectRelease(v9);
  unint64_t v12 = (unint64_t)[v11 integerValue];

  id v13 = [a1 shape];
  id v14 = v13;
  uint64_t v15 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v14, v65);

  specialized Array._checkSubscript(_:wasNativeTypeChecked:)(2, (v15 & 0xC000000000000003) == 0, v15);
  if ((v15 & 0xC000000000000003) != 0) {
    id v16 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(2, v15);
  }
  else {
    id v16 = *(id *)(v15 + 48);
  }
  unint64_t v17 = v16;
  swift_bridgeObjectRelease(v15);
  unint64_t v18 = (unint64_t)[v17 integerValue];

  uint64_t v19 = v18 * v12;
  if (!is_mul_ok(v18, v12)) {
    BUG();
  }
  double v20 = v69 * (double)v67;
  if ((~*(void *)&v20 & 0x7FF0000000000000) == 0) {
    BUG();
  }
  if (v20 <= -9.223372036854778e18) {
    BUG();
  }
  if (v20 >= 9.223372036854776e18) {
    BUG();
  }
  uint64_t v21 = (int)v20;
  uint64_t v22 = MLMultiArray.doubleArray()();
  uint64_t v64 = v22;
  if ((int)v20)
  {
    if (!v19) {
      BUG();
    }
    unint64_t v66 = v19;
    do
    {
      uint64_t v23 = *(void *)(v64 + 16) / v19;
      if (v23 <= 0) {
        BUG();
      }
      uint64_t v24 = *(void *)(v64 + 16) / v19;
      if (v23 == 1) {
        BUG();
      }
      uint64_t v59 = v21;
      unint64_t v25 = v23 - 1;
      uint64_t v68 = 0;
      swift_stdlib_random(&v68, 8);
      unint64_t v26 = ((unint64_t)v68 * (unsigned __int128)v25) >> 64;
      if (v25 > v68 * v25 && (1 - v24) % v25 > v68 * v25)
      {
        unint64_t v27 = (1 - v24) % v25;
        do
        {
          uint64_t v68 = 0;
          swift_stdlib_random(&v68, 8);
        }
        while (v27 > v68 * v25);
        unint64_t v26 = ((unint64_t)v68 * (unsigned __int128)v25) >> 64;
      }
      uint64_t v28 = v26 + 1;
      uint64_t v29 = v66 * (v26 + 1);
      if (!is_mul_ok(v66, v26 + 1)) {
        BUG();
      }
      unint64_t v31 = v26;
      uint64_t v30 = v66 * v26;
      if (!is_mul_ok(v66, v31)) {
        BUG();
      }
      uint64_t v32 = v66 + v29;
      if (__OFADD__(v66, v29)) {
        BUG();
      }
      if (v32 < v29) {
        BUG();
      }
      if (v29 < 0) {
        BUG();
      }
      unint64_t v33 = *(void *)(v64 + 16);
      if (v33 < v29 || (uint64_t)v33 < v32) {
        BUG();
      }
      uint64_t v60 = v28;
      double v69 = COERCE_DOUBLE(type metadata accessor for __ContiguousArrayStorageBase(0));
      swift_bridgeObjectRetain(v64);
      swift_unknownObjectRetain_n(v64, 2);
      id v34 = (void *)swift_dynamicCastClass(v64, *(void *)&v69);
      if (!v34)
      {
        swift_bridgeObjectRelease(v64);
        id v34 = _swiftEmptyArrayStorage;
      }
      uint64_t v63 = v64 + 32;
      uint64_t v35 = v34[2];
      swift_release();
      if (v35 == v66)
      {
        uint64_t v36 = v64;
        unint64_t v37 = (char *)swift_dynamicCastClass(v64, *(void *)&v69);
        unint64_t v38 = v66;
        if (!v37)
        {
          swift_bridgeObjectRelease(v64);
          unint64_t v37 = (char *)_swiftEmptyArrayStorage;
        }
      }
      else
      {
        uint64_t v36 = v64;
        swift_bridgeObjectRelease(v64);
        unint64_t v37 = specialized _copyCollectionToContiguousArray<A>(_:)(v64, v63, v29, 2 * v32 + 1);
        unint64_t v38 = v66;
      }
      swift_bridgeObjectRelease(v36);
      uint64_t v39 = v38 + v30;
      if (__OFADD__(v38, v30)) {
        BUG();
      }
      if (v39 < v30) {
        BUG();
      }
      if (v30 < 0) {
        BUG();
      }
      unint64_t v40 = *(void *)(v36 + 16);
      if (v40 < v30 || (uint64_t)v40 < v39) {
        BUG();
      }
      uint64_t v61 = (uint64_t)v37;
      swift_bridgeObjectRetain(v36);
      swift_unknownObjectRetain_n(v36, 2);
      id v41 = (void *)swift_dynamicCastClass(v36, *(void *)&v69);
      if (!v41)
      {
        swift_bridgeObjectRelease(v36);
        id v41 = _swiftEmptyArrayStorage;
      }
      uint64_t v42 = v36;
      uint64_t v43 = v41[2];
      swift_release();
      if (v43 == v38)
      {
        char v44 = v42;
        unint64_t v45 = (char *)swift_dynamicCastClass(v42, *(void *)&v69);
        uint64_t v19 = v66;
        if (!v45)
        {
          swift_bridgeObjectRelease(v44);
          unint64_t v45 = (char *)_swiftEmptyArrayStorage;
        }
      }
      else
      {
        char v44 = v42;
        swift_bridgeObjectRelease(v42);
        unint64_t v45 = specialized _copyCollectionToContiguousArray<A>(_:)(v42, v63, v30, 2 * v39 + 1);
        uint64_t v19 = v66;
      }
      swift_bridgeObjectRelease(v44);
      unint64_t v46 = static MLHandActionClassifier.generatePaddedFrame(lastFrame:currentFrame:frameLen:displaceScaleFactor:)((uint64_t)v45, v61, v19, v62);
      swift_release();
      swift_release();
      specialized Array.replaceSubrange<A>(_:with:)(v60, v60, (uint64_t)v46);
      uint64_t v21 = v59 - 1;
    }
    while (v59 > 1);
    unint64_t v47 = (void *)v64;
  }
  else
  {
    unint64_t v47 = (void *)v22;
  }
  uint64_t v48 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>);
  uint64_t v49 = swift_allocObject(v48, 56, 7);
  *(void *)(v49 + 16) = 3;
  *(void *)(v49 + 24) = 7;
  if (!v19) {
    BUG();
  }
  uint64_t v50 = (NSNumber *)v49;
  uint64_t v51 = v47[2] / v19;
  id v52 = objc_allocWithZone((Class)NSNumber);
  v50[4].super.super.Class isa = (Class)[v52 initWithInteger:v51];
  v50[5].super.super.Class isa = NSNumber.init(integerLiteral:)(3).super.super.isa;
  v50[6].super.super.Class isa = NSNumber.init(integerLiteral:)(21).super.super.isa;
  uint64_t v68 = (uint64_t)v50;
  specialized Array._endMutation()();
  uint64_t v53 = v68;
  id v54 = [a1 strides];
  id v55 = v54;
  uint64_t v56 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v55, v65);

  if (!swift_isUniquelyReferenced_nonNull_native(v47)) {
    unint64_t v47 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v47[2], 0, (uint64_t)v47);
  }
  objc_allocWithZone((Class)MLMultiArray);
  id v57 = @nonobjc MLMultiArray.init(dataPointer:shape:dataType:strides:deallocator:)((uint64_t)(v47 + 4), v53, 65600, v56, 0, 0);
  swift_bridgeObjectRelease((_BYTE)v47);
  return v57;
}

id static MLHandActionClassifier.frameDrop(_:)(id a1)
{
  uint64_t v51 = (void *)specialized static BinaryFloatingPoint<>.random<A>(in:using:)(0.0, 0.2);
  id v1 = [a1 shape];
  id v2 = v1;
  uint64_t v49 = type metadata accessor for NSNumber(0, &lazy cache variable for type metadata for NSNumber, NSNumber_ptr);
  uint64_t v3 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v2, v49);

  specialized Array._checkSubscript(_:wasNativeTypeChecked:)(0, (v3 & 0xC000000000000003) == 0, v3);
  if ((v3 & 0xC000000000000003) != 0) {
    id v4 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(0, v3);
  }
  else {
    id v4 = *(id *)(v3 + 32);
  }
  id v5 = v4;
  swift_bridgeObjectRelease(v3);
  unsigned int v6 = [v5 integerValue];

  id v7 = [a1 shape];
  id v8 = v7;
  uint64_t v9 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v8, v49);

  specialized Array._checkSubscript(_:wasNativeTypeChecked:)(1, (v9 & 0xC000000000000003) == 0, v9);
  int v47 = v6;
  if ((v9 & 0xC000000000000003) != 0) {
    id v10 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(1, v9);
  }
  else {
    id v10 = *(id *)(v9 + 40);
  }
  id v11 = v10;
  swift_bridgeObjectRelease(v9);
  unint64_t v12 = (unint64_t)[v11 integerValue];

  id v13 = [a1 shape];
  id v14 = v13;
  uint64_t v15 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v14, v49);

  specialized Array._checkSubscript(_:wasNativeTypeChecked:)(2, (v15 & 0xC000000000000003) == 0, v15);
  if ((v15 & 0xC000000000000003) != 0) {
    id v16 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(2, v15);
  }
  else {
    id v16 = *(id *)(v15 + 48);
  }
  unint64_t v17 = v16;
  swift_bridgeObjectRelease(v15);
  unint64_t v18 = (unint64_t)[v17 integerValue];

  uint64_t v19 = v18 * v12;
  if (!is_mul_ok(v18, v12)) {
    BUG();
  }
  double v20 = *(double *)&v51 * (double)v47;
  if ((~*(void *)&v20 & 0x7FF0000000000000) == 0) {
    BUG();
  }
  if (v20 <= -9.223372036854778e18) {
    BUG();
  }
  if (v20 >= 9.223372036854776e18) {
    BUG();
  }
  uint64_t v21 = (int)v20;
  uint64_t v22 = (void *)MLMultiArray.doubleArray()();
  if ((int)v20)
  {
    if (!v19) {
      BUG();
    }
    uint64_t v46 = v19;
    do
    {
      uint64_t v23 = v22[2] / v19;
      if (v23 < 0) {
        BUG();
      }
      if (!v23) {
        BUG();
      }
      unint64_t v24 = v22[2] / v19;
      uint64_t v48 = v21;
      uint64_t v50 = 0;
      swift_stdlib_random(&v50, 8);
      int64_t v25 = ((unint64_t)v50 * (unsigned __int128)v24) >> 64;
      uint64_t v51 = v22;
      if (v24 > v50 * v24 && -(uint64_t)v24 % v24 > v50 * v24)
      {
        do
        {
          uint64_t v50 = 0;
          swift_stdlib_random(&v50, 8);
        }
        while (-(uint64_t)v24 % v24 > v50 * v24);
        int64_t v25 = ((unint64_t)v50 * (unsigned __int128)v24) >> 64;
        uint64_t v22 = v51;
      }
      int64_t v26 = v46 + v25;
      if (__OFADD__(v46, v25)) {
        BUG();
      }
      uint64_t v27 = -v46;
      if (v25 > v26) {
        BUG();
      }
      uint64_t v28 = v22;
      int64_t v29 = v22[2];
      if (v29 < v26) {
        BUG();
      }
      int64_t v30 = v29 - v46;
      if (__OFADD__(v27, v29)) {
        BUG();
      }
      char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v28);
      if (isUniquelyReferenced_nonNull_native && v51[3] >> 1 >= v30)
      {
        uint64_t v22 = v51;
      }
      else
      {
        if (v29 > v30) {
          int64_t v30 = v29;
        }
        uint64_t v22 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(isUniquelyReferenced_nonNull_native, v30, 1, (uint64_t)v51);
      }
      uint64_t v19 = v46;
      if (v25 != v26)
      {
        uint64_t v32 = v22[2] - v26;
        if (v32 < 0)
        {
          _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.moveInitialize with negative count", 55, 2, "Swift/UnsafePointer.swift", 25, 2, 1046, 1);
          BUG();
        }
        memmove(&v22[v25 + 4], &v22[v26 + 4], 8 * v32);
        if (__OFADD__(v22[2], v27)) {
          BUG();
        }
        v22[2] -= v46;
      }
      uint64_t v21 = v48 - 1;
    }
    while (v48 > 1);
  }
  uint64_t v33 = (uint64_t)v22;
  uint64_t v34 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>);
  uint64_t v35 = swift_allocObject(v34, 56, 7);
  *(void *)(v35 + 16) = 3;
  *(void *)(v35 + 24) = 7;
  if (!v19) {
    BUG();
  }
  uint64_t v36 = (NSNumber *)v35;
  uint64_t v51 = (void *)v33;
  uint64_t v37 = *(void *)(v33 + 16) / v19;
  id v38 = objc_allocWithZone((Class)NSNumber);
  v36[4].super.super.Class isa = (Class)[v38 initWithInteger:v37];
  v36[5].super.super.Class isa = NSNumber.init(integerLiteral:)(3).super.super.isa;
  v36[6].super.super.Class isa = NSNumber.init(integerLiteral:)(21).super.super.isa;
  uint64_t v50 = (uint64_t)v36;
  specialized Array._endMutation()();
  uint64_t v39 = v50;
  id v40 = [a1 strides];
  id v41 = v40;
  uint64_t v42 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v41, v49);
  uint64_t v43 = v51;

  if (!swift_isUniquelyReferenced_nonNull_native(v43)) {
    uint64_t v43 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v43[2], 0, (uint64_t)v43);
  }
  objc_allocWithZone((Class)MLMultiArray);
  id v44 = @nonobjc MLMultiArray.init(dataPointer:shape:dataType:strides:deallocator:)((uint64_t)(v43 + 4), v39, 65600, v42, 0, 0);
  swift_bridgeObjectRelease((_BYTE)v43);
  return v44;
}

void *specialized linearSpace #1 <A>(from:through:count:) in static MLHandActionClassifier.randomMove(_:)(uint64_t a1, float a2, float a3)
{
  *(float *)id v7 = a2;
  if (__OFSUB__(a1, 1)) {
    BUG();
  }
  *((float *)v7 + 1) = (float)(a3 - a2) / (float)(a1 - 1);
  if (a1 < 0) {
    BUG();
  }
  uint64_t v3 = alloca(32);
  id v4 = alloca(32);
  v6[2] = v7;
  v7[0] = (char *)v7 + 4;
  return _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSnySiG_Sfs5NeverOTg5(partial apply for specialized closure #1 in linearSpace #1 <A>(from:through:count:) in static MLHandActionClassifier.randomMove(_:), (uint64_t)v6, 0, a1);
}

float specialized closure #1 in linearSpace #1 <A>(from:through:count:) in static MLHandActionClassifier.randomMove(_:)(int a1, float a2, float a3)
{
  return a2 + (float)((float)a1 * a3);
}

void *cos #1 (_:) in static MLHandActionClassifier.randomMove(_:)(uint64_t a1, float (*a2)(double))
{
  int64_t v2 = *(void *)(a1 + 16);
  if (v2)
  {
    uint64_t v3 = 0;
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v2, 0);
    unint64_t v4 = _swiftEmptyArrayStorage[2];
    do
    {
      *(void *)&double v5 = *(unsigned int *)(a1 + 4 * v3 + 32);
      if (_swiftEmptyArrayStorage[3] >> 1 <= v4)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(_swiftEmptyArrayStorage[3] >= 2uLL, v4 + 1, 1);
        *(void *)&double v5 = LODWORD(v5);
      }
      ++v3;
      float v6 = a2(v5);
      _swiftEmptyArrayStorage[2] = v4 + 1;
      *((float *)&_swiftEmptyArrayStorage[4] + v4++) = v6;
    }
    while (v2 != v3);
  }
  return _swiftEmptyArrayStorage;
}

uint64_t specialized MutableCollection.subscript.getter(uint64_t a1, uint64_t a2, uint64_t a3)
{
  BOOL v3 = __OFADD__(1, a2);
  uint64_t v4 = a2 + 1;
  if (v3) {
    BUG();
  }
  if (a1 < 0) {
    BUG();
  }
  uint64_t v6 = *(void *)(a3 + 16);
  if (v6 < (unint64_t)a1 || v6 < v4) {
    BUG();
  }
  if (v4 < 0) {
    BUG();
  }
  swift_bridgeObjectRetain(a3);
  return a3;
}

uint64_t specialized MutableCollection.subscript.getter(uint64_t a1, uint64_t a2)
{
  if (*(void *)(a2 + 16) < a1) {
    BUG();
  }
  if (a1 < 0) {
    BUG();
  }
  swift_bridgeObjectRetain(a2);
  return a2;
}

void closure #3 in static MLHandActionClassifier.randomMove(_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void *a5, void *a6, uint64_t a7, uint64_t a8)
{
  if (a3 < 0) {
    BUG();
  }
  if (a3)
  {
    if (a4 < 0) {
      BUG();
    }
    unint64_t v8 = 0;
    id v71 = a5;
    for (uint64_t i = a3; i != v8; a3 = i)
    {
      if (v8 == a3) {
        BUG();
      }
      if (a4)
      {
        if (a6[2] < 2uLL) {
          BUG();
        }
        unint64_t v9 = 0;
        unint64_t v68 = v8;
        double v62 = (void *)a6[4];
        uint64_t v63 = (void *)a6[5];
        do
        {
          unint64_t v67 = v9;
          id v10 = [a5 strides];
          id v11 = v10;
          uint64_t v70 = type metadata accessor for NSNumber(0, &lazy cache variable for type metadata for NSNumber, NSNumber_ptr);
          uint64_t v12 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v11, v70);

          specialized Array._checkSubscript(_:wasNativeTypeChecked:)(0, (v12 & 0xC000000000000003) == 0, v12);
          if ((v12 & 0xC000000000000003) != 0) {
            id v13 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(0, v12);
          }
          else {
            id v13 = *(id *)(v12 + 32);
          }
          id v14 = v13;
          swift_bridgeObjectRelease(v12);
          unint64_t v15 = (unint64_t)[v14 integerValue];

          unint64_t v17 = v15;
          unint64_t v16 = v8 * v15;
          if (!is_mul_ok(v8, v17)) {
            BUG();
          }
          id v18 = [v71 strides];
          id v19 = v18;
          uint64_t v20 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v19, v70);

          specialized Array._checkSubscript(_:wasNativeTypeChecked:)(2, (v20 & 0xC000000000000003) == 0, v20);
          if ((v20 & 0xC000000000000003) != 0) {
            id v21 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(2, v20);
          }
          else {
            id v21 = *(id *)(v20 + 48);
          }
          uint64_t v22 = v21;
          swift_bridgeObjectRelease(v20);
          unint64_t v23 = (unint64_t)[v22 integerValue];

          unint64_t v25 = v23;
          unint64_t v24 = v67 * v23;
          if (!is_mul_ok(v67, v25)) {
            BUG();
          }
          BOOL v26 = __OFADD__(v24, v16);
          unint64_t v27 = v24 + v16;
          if (v26) {
            BUG();
          }
          id v28 = [v71 strides];
          id v29 = v28;
          uint64_t v30 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v29, v70);

          specialized Array._checkSubscript(_:wasNativeTypeChecked:)(0, (v30 & 0xC000000000000003) == 0, v30);
          if ((v30 & 0xC000000000000003) != 0) {
            id v31 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(0, v30);
          }
          else {
            id v31 = *(id *)(v30 + 32);
          }
          uint64_t v32 = v31;
          swift_bridgeObjectRelease(v30);
          unint64_t v33 = (unint64_t)[v32 integerValue];

          unint64_t v35 = v33;
          unint64_t v34 = v68 * v33;
          if (!is_mul_ok(v68, v35)) {
            BUG();
          }
          id v36 = [v71 strides];
          id v37 = v36;
          uint64_t v38 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v37, v70);

          specialized Array._checkSubscript(_:wasNativeTypeChecked:)(1, (v38 & 0xC000000000000003) == 0, v38);
          if ((v38 & 0xC000000000000003) != 0) {
            id v39 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(1, v38);
          }
          else {
            id v39 = *(id *)(v38 + 40);
          }
          id v40 = v39;
          swift_bridgeObjectRelease(v38);
          id v41 = (char *)[v40 integerValue];

          BOOL v26 = __OFADD__(v41, v34);
          uint64_t v42 = &v41[v34];
          if (v26) {
            BUG();
          }
          id v43 = [v71 strides];
          id v44 = v43;
          uint64_t v45 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v44, v70);

          specialized Array._checkSubscript(_:wasNativeTypeChecked:)(2, (v45 & 0xC000000000000003) == 0, v45);
          if ((v45 & 0xC000000000000003) != 0) {
            id v46 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(2, v45);
          }
          else {
            id v46 = *(id *)(v45 + 48);
          }
          int v47 = v46;
          swift_bridgeObjectRelease(v45);
          unint64_t v48 = (unint64_t)[v47 integerValue];

          unint64_t v50 = v48;
          unint64_t v49 = v67 * v48;
          if (!is_mul_ok(v67, v50)) {
            BUG();
          }
          BOOL v26 = __OFADD__(v49, v42);
          uint64_t v51 = &v42[v49];
          if (v26) {
            BUG();
          }
          unint64_t v52 = v62[2];
          if (!v52) {
            BUG();
          }
          uint64_t v53 = v62[4];
          unint64_t v8 = v68;
          if (v68 >= *(void *)(v53 + 16)) {
            BUG();
          }
          if (v52 < 2) {
            BUG();
          }
          uint64_t v54 = v62[5];
          if (v68 >= *(void *)(v54 + 16)) {
            BUG();
          }
          if (v68 >= *(void *)(*(void *)a7 + 16)) {
            BUG();
          }
          unint64_t v55 = v63[2];
          if (!v55) {
            BUG();
          }
          uint64_t v56 = v63[4];
          if (v68 >= *(void *)(v56 + 16)) {
            BUG();
          }
          if (v55 < 2) {
            BUG();
          }
          uint64_t v57 = v63[5];
          if (v68 >= *(void *)(v57 + 16)) {
            BUG();
          }
          if (v68 >= *(void *)(*(void *)a8 + 16)) {
            BUG();
          }
          float v58 = *(double *)(a1 + 8 * v27);
          float v59 = *(double *)(a1 + 8 * (void)v51);
          unint64_t v9 = v67 + 1;
          float v60 = (float)((float)(*(float *)(v54 + 4 * v68 + 32) * v59) + (float)(*(float *)(v53 + 4 * v68 + 32) * v58))
              + *(float *)(*(void *)a7 + 4 * v68 + 32);
          float v61 = (float)((float)(v59 * *(float *)(v57 + 4 * v68 + 32)) + (float)(v58 * *(float *)(v56 + 4 * v68 + 32)))
              + *(float *)(*(void *)a8 + 4 * v68 + 32);
          *(double *)(a1 + 8 * v27) = v60;
          *(double *)(a1 + 8 * (void)v51) = v61;
          a5 = v71;
        }
        while (a4 != v67 + 1);
      }
      ++v8;
    }
  }
}

uint64_t MLMultiArray.doubleArray()()
{
  uint64_t v4 = v0;
  uint64_t v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [Double]);
  MLMultiArray.withUnsafeBytes<A>(_:)(partial apply for closure #1 in MLMultiArray.doubleArray(), v3, v1);
  return v5;
}

void *static MLHandActionClassifier.generatePaddedFrame(lastFrame:currentFrame:frameLen:displaceScaleFactor:)(uint64_t a1, uint64_t a2, uint64_t a3, double a4)
{
  if (a3 < 0) {
    BUG();
  }
  if (!a3) {
    return _swiftEmptyArrayStorage;
  }
  if ((unint64_t)(a3 - 1) >= *(void *)(a1 + 16)) {
    BUG();
  }
  if ((unint64_t)(a3 - 1) >= *(void *)(a2 + 16)) {
    BUG();
  }
  uint64_t v5 = 0;
  uint64_t v11 = a2;
  double v10 = a4;
  uint64_t result = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, 1, 1, (uint64_t)_swiftEmptyArrayStorage);
  unint64_t v7 = result[2];
  do
  {
    double v8 = *(double *)(a1 + 8 * v5 + 32);
    double v9 = *(double *)(a2 + 8 * v5 + 32);
    if (result[3] >> 1 <= v7)
    {
      uint64_t result = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(result[3] >= 2uLL, v7 + 1, 1, (uint64_t)result);
      a2 = v11;
      a4 = v10;
    }
    ++v5;
    result[2] = v7 + 1;
    *(double *)&result[v7++ + 4] = (v9 - v8) * a4 + v8;
  }
  while (a3 != v5);
  return result;
}

float *_sSTsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFs12Zip2SequenceVySaySfGAHG_Sfs5NeverOTg592_sSa8CreateMLSFRzlE1moi33_5442BF52D76DA1BBD780DB5A1A47CDFALLySayxGAD_ADtFZxx_xt_tXEfU_Sf_TG5Tf1cn_n(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = a1;
  unint64_t v3 = *(void *)(a1 + 16);
  unint64_t v22 = v3;
  unint64_t v23 = *(void *)(a2 + 16);
  if (v23 < v3) {
    unint64_t v3 = *(void *)(a2 + 16);
  }
  specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v3, 0);
  uint64_t v4 = (float *)_swiftEmptyArrayStorage;
  if (v3)
  {
    unint64_t v24 = v3;
    swift_bridgeObjectRetain(a1);
    swift_bridgeObjectRetain(a2);
    unint64_t v5 = v3;
    uint64_t v6 = 0;
    int v7 = 1;
    unint64_t v8 = v22;
    unint64_t v9 = v23;
    do
    {
      if (v8 == v6) {
        BUG();
      }
      if (v9 == v6) {
        BUG();
      }
      float v10 = *(float *)(v2 + 4 * v6 + 32);
      float v11 = *(float *)(a2 + 4 * v6 + 32);
      unint64_t v27 = v4;
      unint64_t v12 = *((void *)v4 + 2);
      unint64_t v13 = *((void *)v4 + 3);
      int64_t v14 = v12 + 1;
      if (v13 >> 1 <= v12)
      {
        int v15 = v7;
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v13 >= 2, v14, v7);
        int64_t v14 = v12 + 1;
        int v7 = v15;
        unint64_t v5 = v24;
        unint64_t v9 = v23;
        unint64_t v8 = v22;
        uint64_t v4 = v27;
      }
      ++v6;
      *((void *)v4 + 2) = v14;
      v4[v12 + 8] = v10 * v11;
      uint64_t v2 = a1;
    }
    while (v5 != v6);
  }
  else
  {
    swift_bridgeObjectRetain(a1);
    swift_bridgeObjectRetain(a2);
    unint64_t v5 = 0;
    unint64_t v8 = v22;
    unint64_t v9 = v23;
  }
  if (v8 <= v9)
  {
    LOBYTE(v16) = a2;
  }
  else
  {
    uint64_t v16 = a2;
    do
    {
      if (v5 >= v8) {
        BUG();
      }
      if (v9 == v5) {
        break;
      }
      if (v9 <= v5) {
        BUG();
      }
      float v17 = *(float *)(v2 + 4 * v5 + 32);
      float v18 = *(float *)(v16 + 4 * v5 + 32);
      unint64_t v19 = *((void *)v4 + 2);
      int64_t v20 = v19 + 1;
      if (*((void *)v4 + 3) >> 1 <= v19)
      {
        unint64_t v25 = v5;
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(*((void *)v4 + 3) >= 2uLL, v20, 1);
        unint64_t v5 = v25;
        unint64_t v9 = v23;
        unint64_t v8 = v22;
        uint64_t v16 = a2;
      }
      ++v5;
      *((void *)v4 + 2) = v20;
      v4[v19 + 8] = v17 * v18;
    }
    while (v8 != v5);
  }
  swift_bridgeObjectRelease(v16);
  swift_bridgeObjectRelease(v2);
  return v4;
}

void *closure #1 in MLMultiArray.doubleArray()(uint64_t a1, uint64_t a2, void *a3)
{
  if (!a1) {
    BUG();
  }
  uint64_t v4 = v3;
  id v5 = [a3 count];
  uint64_t result = specialized _copyCollectionToContiguousArray<A>(_:)(a1, (uint64_t)v5);
  *uint64_t v4 = result;
  return result;
}

uint64_t outlined init with copy of MLHandActionClassifier.ModelParameters(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = type metadata accessor for MLHandActionClassifier.ModelParameters(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v2 - 8) + 16))(a2, a1, v2);
  return a2;
}

uint64_t outlined init with take of MLHandActionClassifier.ModelParameters(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = type metadata accessor for MLHandActionClassifier.ModelParameters(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v2 - 8) + 32))(a2, a1, v2);
  return a2;
}

uint64_t sub_305A4()
{
  uint64_t v1 = v0;
  uint64_t v2 = type metadata accessor for LearningPhase(0);
  uint64_t v3 = *(void *)(v2 - 8);
  uint64_t v22 = *(unsigned __int8 *)(v3 + 80);
  uint64_t v4 = ~*(unsigned __int8 *)(v3 + 80) & (v22 + 16);
  uint64_t v5 = v4 + *(void *)(v3 + 64);
  uint64_t v6 = *(void *)(type metadata accessor for MLHandActionClassifier.ModelParameters(0) - 8);
  uint64_t v23 = *(unsigned __int8 *)(v6 + 80);
  uint64_t v7 = ~v23 & (v23 + v5);
  uint64_t v24 = *(void *)(v6 + 64);
  (*(void (**)(uint64_t, uint64_t))(v3 + 8))(v1 + v4, v2);
  uint64_t v8 = v1 + v7;
  uint64_t v9 = type metadata accessor for MLHandActionClassifier.ModelParameters.ValidationData(0);
  if (swift_getEnumCaseMultiPayload(v1 + v7, v9) == 1)
  {
    uint64_t v10 = type metadata accessor for MLHandActionClassifier.DataSource(0);
    switch(swift_getEnumCaseMultiPayload(v1 + v7, v10))
    {
      case 0u:
        uint64_t v12 = type metadata accessor for URL(0);
        unint64_t v13 = *(void (**)(uint64_t))(*(void *)(v12 - 8) + 8);
        v13(v1 + v7);
        int64_t v14 = (int *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (at: URL, annotationFile: URL, videoColumn: String, labelColumn: String, startTimeColumn: String?, endTimeColumn: String?));
        ((void (*)(uint64_t, uint64_t))v13)(v8 + v14[12], v12);
        swift_bridgeObjectRelease(*(void *)(v8 + v14[16] + 8));
        swift_bridgeObjectRelease(*(void *)(v8 + v14[20] + 8));
        swift_bridgeObjectRelease(*(void *)(v8 + v14[24] + 8));
        uint64_t v15 = v14[28];
        goto LABEL_9;
      case 1u:
      case 2u:
        uint64_t v11 = type metadata accessor for URL(0);
        (*(void (**)(uint64_t, uint64_t))(*(void *)(v11 - 8) + 8))(v1 + v7, v11);
        return swift_deallocObject(v1, ((v24 + v7 + 7) & 0xFFFFFFFFFFFFFFF8) + 8, v23 | v22 | 7);
      case 3u:
        outlined consume of Result<_DataTable, Error>(*(void *)v8, *(_DWORD *)(v8 + 8));
        swift_bridgeObjectRelease(*(void *)(v8 + 24));
        swift_bridgeObjectRelease(*(void *)(v8 + 40));
        uint64_t v16 = *(void *)(v8 + 56);
        goto LABEL_10;
      case 4u:
        outlined consume of Result<_DataTable, Error>(*(void *)v8, *(_DWORD *)(v8 + 8));
        swift_bridgeObjectRelease(*(void *)(v8 + 24));
        swift_bridgeObjectRelease(*(void *)(v8 + 40));
        swift_bridgeObjectRelease(*(void *)(v8 + 56));
        uint64_t v16 = *(void *)(v8 + 72);
        goto LABEL_10;
      case 5u:
        uint64_t v17 = type metadata accessor for DataFrame(0);
        (*(void (**)(uint64_t, uint64_t))(*(void *)(v17 - 8) + 8))(v1 + v7, v17);
        float v18 = (int *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (DataFrame, sessionIdColumn: String, labelColumn: String, featureColumn: String));
        swift_bridgeObjectRelease(*(void *)(v8 + v18[12] + 8));
        swift_bridgeObjectRelease(*(void *)(v8 + v18[16] + 8));
        uint64_t v15 = v18[20];
        goto LABEL_9;
      case 6u:
        uint64_t v19 = type metadata accessor for DataFrame(0);
        (*(void (**)(uint64_t, uint64_t))(*(void *)(v19 - 8) + 8))(v1 + v7, v19);
        int64_t v20 = (int *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (DataFrame, videoColumn: String, labelColumn: String, startTimeColumn: String?, endTimeColumn: String?));
        swift_bridgeObjectRelease(*(void *)(v8 + v20[12] + 8));
        swift_bridgeObjectRelease(*(void *)(v8 + v20[16] + 8));
        swift_bridgeObjectRelease(*(void *)(v8 + v20[20] + 8));
        uint64_t v15 = v20[24];
LABEL_9:
        uint64_t v16 = *(void *)(v8 + v15 + 8);
LABEL_10:
        swift_bridgeObjectRelease(v16);
        break;
      default:
        return swift_deallocObject(v1, ((v24 + v7 + 7) & 0xFFFFFFFFFFFFFFF8) + 8, v23 | v22 | 7);
    }
  }
  return swift_deallocObject(v1, ((v24 + v7 + 7) & 0xFFFFFFFFFFFFFFF8) + 8, v23 | v22 | 7);
}

uint64_t partial apply for closure #1 in static MLHandActionClassifier.makeDataset<A>(from:classLabelsCount:parameters:learningPhase:)(uint64_t *a1, double a2, double a3)
{
  uint64_t v4 = *(void *)(type metadata accessor for LearningPhase(0) - 8);
  uint64_t v5 = ~*(unsigned __int8 *)(v4 + 80) & (*(unsigned __int8 *)(v4 + 80) + 16);
  uint64_t v6 = v5 + *(void *)(v4 + 64);
  uint64_t v7 = *(void *)(type metadata accessor for MLHandActionClassifier.ModelParameters(0) - 8);
  unint64_t v8 = (*(unsigned __int8 *)(v7 + 80) + v6) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80);
  return closure #1 in static MLHandActionClassifier.makeDataset<A>(from:classLabelsCount:parameters:learningPhase:)(a1, v3 + v5, v3 + v8, *(void *)(v3 + ((v8 + *(void *)(v7 + 64) + 7) & 0xFFFFFFFFFFFFFFF8)), a2, a3);
}

uint64_t lazy protocol witness table accessor for type DataSample<Tensor, Tensor> and conformance <> DataSample<A, B>()
{
  uint64_t result = lazy protocol witness table cache variable for type DataSample<Tensor, Tensor> and conformance <> DataSample<A, B>;
  if (!lazy protocol witness table cache variable for type DataSample<Tensor, Tensor> and conformance <> DataSample<A, B>)
  {
    uint64_t v1 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for DataSample<Tensor, Tensor>);
    uint64_t result = swift_getWitnessTable(&protocol conformance descriptor for <> DataSample<A, B>, v1);
    lazy protocol witness table cache variable for type DataSample<Tensor, Tensor> and conformance <> DataSample<A, B> = result;
  }
  return result;
}

uint64_t lazy protocol witness table accessor for type LearningPhase and conformance LearningPhase()
{
  uint64_t result = lazy protocol witness table cache variable for type LearningPhase and conformance LearningPhase;
  if (!lazy protocol witness table cache variable for type LearningPhase and conformance LearningPhase)
  {
    uint64_t v1 = type metadata accessor for LearningPhase(255);
    uint64_t result = swift_getWitnessTable(&protocol conformance descriptor for LearningPhase, v1);
    lazy protocol witness table cache variable for type LearningPhase and conformance LearningPhase = result;
  }
  return result;
}

uint64_t thunk for @escaping @callee_guaranteed (@unowned UnsafeMutableRawPointer) -> ()(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void (**)(uint64_t))(a1 + 32);
  uint64_t v3 = *(void *)(a1 + 40);
  swift_retain(v3);
  v2(a2);
  return swift_release(v3);
}

id @nonobjc MLMultiArray.init(dataPointer:shape:dataType:strides:deallocator:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void *a5, uint64_t a6)
{
  id v17 = v6;
  unint64_t v8 = 0;
  type metadata accessor for NSNumber(0, &lazy cache variable for type metadata for NSNumber, NSNumber_ptr);
  Class isa = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease(a2);
  v9.super.Class isa = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease(a4);
  if (a5)
  {
    aBlock[4] = a5;
    uint64_t v22 = a6;
    aBlock[0] = _NSConcreteStackBlock;
    aBlock[1] = (id)1107296256;
    aBlock[2] = thunk for @escaping @callee_guaranteed (@unowned UnsafeMutableRawPointer) -> ();
    aBlock[3] = &block_descriptor;
    unint64_t v8 = _Block_copy(aBlock);
    swift_release(v22);
  }
  aBlock[0] = 0;
  id v10 = [v17 initWithDataPointer:a1 shape:isa dataType:a3 strides:v9.super.isa deallocator:v8];
  _Block_release(v8);

  Class v11 = v9.super.isa;
  id v12 = v10;

  id v13 = aBlock[0];
  if (v12)
  {
    aBlock[0];
  }
  else
  {
    id v14 = aBlock[0];
    _convertNSErrorToError(_:)(v13);

    swift_willThrow();
  }
  return v12;
}

uint64_t specialized Collection.randomElement<A>(using:)(uint64_t a1, uint64_t a2)
{
  unint64_t v2 = *(void *)(a2 + 16);
  if (!v2) {
    return 0;
  }
  unint64_t v3 = specialized RandomNumberGenerator.next<A>(upperBound:)(*(void *)(a2 + 16));
  if (v3 >= v2) {
    BUG();
  }
  return *(void *)(a2 + 8 * v3 + 32);
}

uint64_t specialized RandomNumberGenerator.next<A>(upperBound:)(unint64_t a1)
{
  if (!a1) {
    BUG();
  }
  v3[0] = 0;
  swift_stdlib_random(v3, 8);
  uint64_t v1 = (v3[0] * (unsigned __int128)a1) >> 64;
  if (v3[0] * a1 < a1 && -(uint64_t)a1 % a1 > v3[0] * a1)
  {
    do
    {
      v3[0] = 0;
      swift_stdlib_random(v3, 8);
    }
    while (-(uint64_t)a1 % a1 > v3[0] * a1);
    return (v3[0] * (unsigned __int128)a1) >> 64;
  }
  return v1;
}

{
  unsigned long long v1;
  uint64_t v2;
  unsigned long long v3;

  if (!a1) {
    BUG();
  }
  uint64_t v1 = a1 * (unsigned __int128)MersenneTwisterGenerator.next()();
  unint64_t v2 = *((void *)&v1 + 1);
  if ((unint64_t)v1 < a1 && -(uint64_t)a1 % a1 > (unint64_t)v1)
  {
    do
      unint64_t v3 = a1 * (unsigned __int128)MersenneTwisterGenerator.next()();
    while (-(uint64_t)a1 % a1 > (unint64_t)v3);
    return *((void *)&v3 + 1);
  }
  return v2;
}

void specialized MutableCollection<>.shuffle<A>(using:)()
{
  Class v11 = v0;
  uint64_t v1 = *v0;
  unint64_t v2 = v1[2];
  if (v2 >= 2)
  {
    unint64_t v10 = v2 - 2;
    unint64_t v3 = 0;
    do
    {
      v14[0] = 0;
      swift_stdlib_random(v14, 8);
      uint64_t v4 = (v14[0] * (unsigned __int128)v2) >> 64;
      if (v2 > v14[0] * v2 && -(uint64_t)v2 % v2 > v14[0] * v2)
      {
        do
        {
          v14[0] = 0;
          swift_stdlib_random(v14, 8);
        }
        while (-(uint64_t)v2 % v2 > v14[0] * v2);
        uint64_t v4 = (v14[0] * (unsigned __int128)v2) >> 64;
      }
      BOOL v5 = __OFADD__(v3, v4);
      unint64_t v6 = v3 + v4;
      if (v5) {
        BUG();
      }
      if (v3 != v6)
      {
        unint64_t v7 = v1[2];
        if (v3 >= v7) {
          BUG();
        }
        if (v6 >= v7) {
          BUG();
        }
        int v12 = *((_DWORD *)v1 + v3 + 8);
        int v13 = *((_DWORD *)v1 + v6 + 8);
        if (!swift_isUniquelyReferenced_nonNull_native(v1)) {
          uint64_t v1 = specialized _ContiguousArrayBuffer._consumeAndCreateNew()((uint64_t)v1);
        }
        unint64_t v8 = v1[2];
        if (v3 >= v8) {
          BUG();
        }
        *((_DWORD *)v1 + v3 + 8) = v13;
        if (v6 >= v8) {
          BUG();
        }
        *((_DWORD *)v1 + v6 + 8) = v12;
        *Class v11 = v1;
      }
      --v2;
    }
    while (v3++ != v10);
  }
}

{
  uint64_t v0;
  void *v1;
  unint64_t v2;
  unint64_t v3;
  unsigned long long v4;
  uint64_t v5;
  unsigned long long v6;
  BOOL v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;

  uint64_t v1 = *(void **)v0;
  unint64_t v2 = *(void *)(*(void *)v0 + 16);
  if (v2 >= 2)
  {
    int v12 = v2 - 2;
    unint64_t v3 = 0;
    do
    {
      uint64_t v4 = v2 * (unsigned __int128)MersenneTwisterGenerator.next()();
      BOOL v5 = *((void *)&v4 + 1);
      if (v2 > (unint64_t)v4 && -(uint64_t)v2 % v2 > (unint64_t)v4)
      {
        do
          unint64_t v6 = v2 * (unsigned __int128)MersenneTwisterGenerator.next()();
        while (-(uint64_t)v2 % v2 > (unint64_t)v6);
        BOOL v5 = *((void *)&v6 + 1);
      }
      unint64_t v7 = __OFADD__(v3, v5);
      unint64_t v8 = v3 + v5;
      if (v7) {
        BUG();
      }
      if (v3 != v8)
      {
        NSArray v9 = v1[2];
        if (v3 >= v9) {
          BUG();
        }
        if (v8 >= v9) {
          BUG();
        }
        id v14 = v1[v3 + 4];
        int v13 = v1[v8 + 4];
        if (!swift_isUniquelyReferenced_nonNull_native(v1)) {
          uint64_t v1 = specialized _ContiguousArrayBuffer._consumeAndCreateNew()((uint64_t)v1);
        }
        unint64_t v10 = v1[2];
        if (v3 >= v10) {
          BUG();
        }
        v1[v3 + 4] = v13;
        if (v8 >= v10) {
          BUG();
        }
        v1[v8 + 4] = v14;
        *(void *)uint64_t v0 = v1;
      }
      --v2;
    }
    while (v3++ != v12);
  }
}

{
  void *v0;
  void *v1;
  unint64_t v2;
  unint64_t v3;
  uint64_t v4;
  BOOL v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  void *v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  unint64_t v26;
  uint64_t v27;
  void v28[6];

  uint64_t v22 = v0;
  uint64_t v1 = (void *)*v0;
  unint64_t v2 = *(void *)(*v0 + 16);
  if (v2 >= 2)
  {
    unint64_t v3 = 0;
    unint64_t v25 = v2 - 2;
    do
    {
      v28[0] = 0;
      swift_stdlib_random(v28, 8);
      uint64_t v4 = (v28[0] * (unsigned __int128)v2) >> 64;
      if (v2 > v28[0] * v2 && -(uint64_t)v2 % v2 > v28[0] * v2)
      {
        do
        {
          v28[0] = 0;
          swift_stdlib_random(v28, 8);
        }
        while (-(uint64_t)v2 % v2 > v28[0] * v2);
        uint64_t v4 = (v28[0] * (unsigned __int128)v2) >> 64;
      }
      BOOL v5 = __OFADD__(v3, v4);
      unint64_t v6 = v3 + v4;
      if (v5) {
        BUG();
      }
      if (v3 == v6)
      {
        unint64_t v7 = v25;
      }
      else
      {
        unint64_t v8 = v1[2];
        if (v3 >= v8) {
          BUG();
        }
        if (v6 >= v8) {
          BUG();
        }
        BOOL v26 = v3;
        NSArray v9 = 4 * v3;
        float v18 = v1[v9 + 4];
        int64_t v20 = v1[v9 + 6];
        uint64_t v24 = v1[v9 + 7];
        unint64_t v10 = 4 * v6;
        uint64_t v16 = v1[4 * v6 + 4];
        unint64_t v27 = v1[4 * v6 + 5];
        id v17 = v1[4 * v6 + 6];
        uint64_t v23 = v1[4 * v6 + 7];
        uint64_t v19 = v1[v9 + 5];
        swift_bridgeObjectRetain(v19);
        swift_bridgeObjectRetain(v24);
        swift_bridgeObjectRetain(v27);
        swift_bridgeObjectRetain(v23);
        if (!swift_isUniquelyReferenced_nonNull_native(v1)) {
          uint64_t v1 = specialized _ContiguousArrayBuffer._consumeAndCreateNew()((uint64_t)v1);
        }
        if (v26 >= v1[2]) {
          BUG();
        }
        id v21 = v1[v9 + 5];
        Class v11 = v1[v9 + 7];
        v1[v9 + 4] = v16;
        v1[v9 + 5] = v27;
        v1[v9 + 6] = v17;
        v1[v9 + 7] = v23;
        swift_bridgeObjectRelease(v11);
        swift_bridgeObjectRelease(v21);
        if (v6 >= v1[2]) {
          BUG();
        }
        int v12 = v1 + 4;
        int v13 = v1[v10 + 5];
        id v14 = v1[v10 + 7];
        v12[v10] = v18;
        v12[v10 + 1] = v19;
        v12[v10 + 2] = v20;
        v12[v10 + 3] = v24;
        swift_bridgeObjectRelease(v14);
        swift_bridgeObjectRelease(v13);
        void *v22 = v1;
        unint64_t v7 = v25;
        unint64_t v3 = v26;
      }
      --v2;
    }
    while (v3++ != v7);
  }
}

long long specialized static BinaryFloatingPoint<>.random<A>(in:using:)@<xmm0>(double a1@<xmm0>, double a2@<xmm1>)
{
  if ((~COERCE__INT64(a2 - a1) & 0x7FF0000000000000) == 0) {
    BUG();
  }
  double v7 = a2 - a1;
  uint64_t v2 = specialized RandomNumberGenerator.next<A>(upperBound:)(0x20000000000001uLL);
  long long result = *(unint64_t *)&a2;
  if (v2 != 0x20000000000000)
  {
    __m128d v4 = _mm_sub_pd((__m128d)_mm_unpacklo_epi32((__m128i)(unint64_t)v2, (__m128i)xmmword_346D90), (__m128d)xmmword_346DA0);
    long long v5 = *(unint64_t *)&v7;
    *(double *)&long long v5 = v7 * (_mm_hadd_pd(v4, v4).f64[0] * 1.110223024625157e-16) + a1;
    return v5;
  }
  return result;
}

char *specialized Array.replaceSubrange<A>(_:with:)(uint64_t a1, uint64_t a2)
{
  if (a1 < 0) {
    BUG();
  }
  unint64_t v3 = *(void **)v2;
  uint64_t v4 = *(void *)(*(void *)v2 + 16);
  if (v4 < a2) {
    BUG();
  }
  if (__OFSUB__(a2, a1)) {
    BUG();
  }
  uint64_t v5 = a1 - a2;
  if (__OFSUB__(a1 - a2, 1)) {
    BUG();
  }
  int64_t v6 = v4 - (a2 - a1);
  if (__OFADD__(v5, v4)) {
    BUG();
  }
  int64_t v14 = *(void *)(*(void *)v2 + 16);
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v3);
  if (!isUniquelyReferenced_nonNull_native || v3[3] >> 1 < v6)
  {
    if (v14 > v6) {
      int64_t v6 = v14;
    }
    unint64_t v3 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(isUniquelyReferenced_nonNull_native, v6, 1, (uint64_t)v3);
  }
  long long result = (char *)swift_arrayDestroy(&v3[2 * a1 + 4], a2 - a1, &type metadata for String);
  if (v5)
  {
    uint64_t v9 = v3[2];
    BOOL v10 = __OFSUB__(v9, a2);
    uint64_t v11 = v9 - a2;
    if (v10) {
      BUG();
    }
    long long result = specialized UnsafeMutablePointer.moveInitialize(from:count:)((char *)&v3[2 * a2 + 4], v11, (char *)&v3[2 * a1 + 4]);
    BOOL v10 = __OFADD__(v3[2], v5);
    uint64_t v12 = v3[2] + v5;
    if (v10) {
      BUG();
    }
    v3[2] = v12;
  }
  *(void *)uint64_t v2 = v3;
  return result;
}

void *specialized Array.replaceSubrange<A>(_:with:)(uint64_t a1, int64_t a2)
{
  if (a1 < 0) {
    BUG();
  }
  unint64_t v3 = (void *)*v2;
  int64_t v4 = *(void *)(*v2 + 16);
  if (v4 < a2) {
    BUG();
  }
  if (__OFSUB__(a2, a1)) {
    BUG();
  }
  if (__OFSUB__(a1 - a2, 1)) {
    BUG();
  }
  int64_t v5 = v4 - (a2 - a1);
  if (__OFADD__(a1 - a2, v4)) {
    BUG();
  }
  uint64_t v18 = a1 - a2;
  uint64_t v16 = v2;
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v3);
  if (!isUniquelyReferenced_nonNull_native || v3[3] >> 1 < v5)
  {
    if (v4 > v5) {
      int64_t v5 = v4;
    }
    unint64_t v3 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(isUniquelyReferenced_nonNull_native, v5, 1, (uint64_t)v3);
  }
  uint64_t v7 = type metadata accessor for FeatureDescription(0);
  uint64_t v8 = *(void *)(v7 - 8);
  uint64_t v9 = (char *)v3 + ((*(unsigned __int8 *)(v8 + 80) + 32) & ~*(unsigned __int8 *)(v8 + 80));
  uint64_t v10 = *(void *)(v8 + 72);
  unint64_t v11 = (unint64_t)&v9[v10 * a1];
  swift_arrayDestroy(v11, a2 - a1, v7);
  if (v18)
  {
    uint64_t v12 = v3[2];
    BOOL v13 = __OFSUB__(v12, a2);
    uint64_t v14 = v12 - a2;
    if (v13) {
      BUG();
    }
    specialized UnsafeMutablePointer.moveInitialize(from:count:)((unint64_t)&v9[a2 * v10], v14, v11);
    if (__OFADD__(v3[2], v18)) {
      BUG();
    }
    v3[2] += v18;
  }
  long long result = v16;
  void *v16 = v3;
  return result;
}

uint64_t specialized Array.replaceSubrange<A>(_:with:)(uint64_t a1, int64_t a2, uint64_t a3)
{
  if (a1 < 0) {
    BUG();
  }
  int64_t v4 = *(void **)v3;
  int64_t v5 = *(void *)(*(void *)v3 + 16);
  if (v5 < a2) {
    BUG();
  }
  int64_t v6 = a2 - a1;
  if (__OFSUB__(a2, a1)) {
    BUG();
  }
  uint64_t v17 = *(void *)(a3 + 16);
  uint64_t v7 = v17 - v6;
  if (__OFSUB__(v17, v6)) {
    BUG();
  }
  int64_t v8 = v7 + v5;
  if (__OFADD__(v7, v5)) {
    BUG();
  }
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v4);
  if (!isUniquelyReferenced_nonNull_native || v4[3] >> 1 < v8)
  {
    if (v5 > v8) {
      int64_t v8 = v5;
    }
    int64_t v4 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(isUniquelyReferenced_nonNull_native, v8, 1, (uint64_t)v4);
  }
  uint64_t v10 = (char *)&v4[a1 + 4];
  if (v7)
  {
    uint64_t v11 = v4[2];
    BOOL v12 = __OFSUB__(v11, a2);
    uint64_t v13 = v11 - a2;
    if (v12) {
      BUG();
    }
    specialized UnsafeMutablePointer.moveInitialize(from:count:)((char *)&v4[a2 + 4], v13, &v10[8 * v17]);
    BOOL v12 = __OFADD__(v4[2], v7);
    uint64_t v14 = v4[2] + v7;
    if (v12) {
      BUG();
    }
    v4[2] = v14;
  }
  if (v17)
  {
    if (*(void *)(a3 + 16) != v17) {
      BUG();
    }
    memcpy(v10, (const void *)(a3 + 32), 8 * v17);
  }
  uint64_t result = swift_bridgeObjectRelease(a3);
  *(void *)uint64_t v3 = v4;
  return result;
}

void specialized closure #1 in linearSpace #1 <A>(from:through:count:) in static MLHandActionClassifier.randomMove(_:)(void *a1, float *a2, float *a3)
{
  int64_t v5 = v3;
  float v6 = specialized closure #1 in linearSpace #1 <A>(from:through:count:) in static MLHandActionClassifier.randomMove(_:)(*a1, *a2, *a3);
  if (!v4) {
    *int64_t v5 = v6;
  }
}

void partial apply for specialized closure #1 in linearSpace #1 <A>(from:through:count:) in static MLHandActionClassifier.randomMove(_:)(void *a1)
{
  specialized closure #1 in linearSpace #1 <A>(from:through:count:) in static MLHandActionClassifier.randomMove(_:)(a1, *(float **)(v1 + 16), *(float **)(v1 + 24));
}

uint64_t block_copy_helper(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  return swift_retain(v2);
}

uint64_t block_destroy_helper(uint64_t a1)
{
  return swift_release(*(void *)(a1 + 40));
}

void *partial apply for closure #1 in MLMultiArray.doubleArray()(uint64_t a1, uint64_t a2)
{
  return closure #1 in MLMultiArray.doubleArray()(a1, a2, *(void **)(v2 + 16));
}

void outlined consume of MLDataValue(void *a1, void *a2, char a3)
{
  switch(a3)
  {
    case 2:
      a1 = a2;
      goto LABEL_3;
    case 3:
      swift_release(a1);
      break;
    case 4:
LABEL_3:
      swift_bridgeObjectRelease(a1);
      break;
    case 5:

      break;
    default:
      return;
  }
}

uint64_t type metadata accessor for NSNumber(uint64_t a1, uint64_t *a2, void *a3)
{
  uint64_t result = *a2;
  if (!*a2)
  {
    uint64_t v4 = objc_opt_self(*a3);
    uint64_t result = swift_getObjCClassMetadata(v4);
    *a2 = result;
  }
  return result;
}

uint64_t InteractionTableBuilder.init(itemCount:maximumInteractionsPerItem:minimumInteractionScore:)(uint64_t a1, int64_t a2, double a3)
{
  *(void *)(v3 + 32) = a1;
  int64_t v18 = a2;
  *(void *)(v3 + 16) = a2;
  *(double *)(v3 + 24) = a3;
  uint64_t v4 = specialized Heap.init(arrayLiteral:)((uint64_t)_swiftEmptyArrayStorage);
  int64_t v5 = specialized Array.init(repeating:count:)((uint64_t)v4, a1);
  *(void *)(v3 + 40) = v5;
  uint64_t v16 = v5[2];
  if (v16)
  {
    uint64_t v17 = v3;
    float v6 = (uint64_t *)(v3 + 40);
    unint64_t v7 = 0;
    swift_beginAccess(v3 + 40, v15, 33, 0);
    uint64_t v8 = 32;
    do
    {
      uint64_t v9 = *v6;
      char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v6);
      *float v6 = v9;
      if (!isUniquelyReferenced_nonNull_native)
      {
        uint64_t v9 = specialized _ArrayBuffer._consumeAndCreateNew()(v9);
        *float v6 = v9;
      }
      if (v7 >= *(void *)(v9 + 16)) {
        BUG();
      }
      uint64_t v11 = *(void *)(v9 + 8 * v7 + 32);
      char v12 = swift_isUniquelyReferenced_nonNull_native(v11);
      *(void *)(v9 + 8 * v7 + 32) = v11;
      if (!v12 || *(void *)(v11 + 24) >> 1 < v18)
      {
        int64_t v13 = *(void *)(v11 + 16);
        if (v13 <= v18) {
          int64_t v13 = v18;
        }
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v12, v13, 0);
      }
      ++v7;
      specialized Array._endMutation()();
      v8 += 8;
    }
    while (v16 != v7);
    swift_endAccess(v15);
    return v17;
  }
  return v3;
}

void *specialized Heap.init(arrayLiteral:)(uint64_t a1)
{
  uint64_t v1 = a1;
  if (*(void *)(a1 + 16) >= 2uLL)
  {
    swift_bridgeObjectRetain(a1);
    uint64_t v2 = (void *)a1;
    if (!swift_isUniquelyReferenced_nonNull_native(a1)) {
      uint64_t v2 = specialized _ContiguousArrayBuffer._consumeAndCreateNew()(a1);
    }
    specialized Heap._UnsafeHandle.heapify()((uint64_t)(v2 + 4), v2[2]);
    swift_bridgeObjectRelease(a1);
    return v2;
  }
  return (void *)v1;
}

Swift::Void __swiftcall InteractionTableBuilder.insert(_:_:score:)(Swift::Int _, Swift::Int a2, Swift::Double score)
{
  if (score > *(double *)(v3 + 24))
  {
    double v19 = score;
    int64_t v5 = (uint64_t *)(v3 + 40);
    swift_beginAccess(v3 + 40, v17, 0, 0);
    if (_ < 0) {
      BUG();
    }
    uint64_t v6 = *(void *)(v3 + 40);
    if (*(void *)(v6 + 16) <= (unint64_t)_) {
      BUG();
    }
    uint64_t v7 = *(void *)(v6 + 8 * _ + 32);
    if (*(void *)(v7 + 16) < *(void *)(v3 + 16))
    {
      swift_beginAccess(v3 + 40, v18, 33, 0);
      uint64_t v8 = *v5;
      char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v5);
      *int64_t v5 = v8;
      if (!isUniquelyReferenced_nonNull_native)
      {
        uint64_t v8 = specialized _ArrayBuffer._consumeAndCreateNew()(v8);
        *int64_t v5 = v8;
      }
      double v10 = v19;
      if (*(void *)(v8 + 16) <= (unint64_t)_) {
        BUG();
      }
LABEL_17:
      specialized Heap.insert(_:)(a2, v10);
      specialized Array._endMutation()();
      swift_endAccess(v18);
      return;
    }
    specialized Collection.first.getter(v7);
    if ((v12 & 1) == 0 && v19 > v11)
    {
      swift_beginAccess(v3 + 40, v18, 33, 0);
      uint64_t v13 = *v5;
      char v14 = swift_isUniquelyReferenced_nonNull_native(*v5);
      *int64_t v5 = v13;
      if (!v14)
      {
        uint64_t v13 = specialized _ArrayBuffer._consumeAndCreateNew()(v13);
        *int64_t v5 = v13;
      }
      if (*(void *)(v13 + 16) <= (unint64_t)_) {
        BUG();
      }
      specialized Heap.popMin()();
      specialized Array._endMutation()();
      uint64_t v15 = *v5;
      char v16 = swift_isUniquelyReferenced_nonNull_native(*v5);
      *int64_t v5 = v15;
      if (!v16)
      {
        uint64_t v15 = specialized _ArrayBuffer._consumeAndCreateNew()(v15);
        *int64_t v5 = v15;
      }
      double v10 = v19;
      if (*(void *)(v15 + 16) <= (unint64_t)_) {
        BUG();
      }
      goto LABEL_17;
    }
  }
}

void specialized Heap.insert(_:)(uint64_t a1, double a2)
{
  uint64_t v3 = *v2;
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v2);
  void *v2 = v3;
  if (!isUniquelyReferenced_nonNull_native)
  {
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(void *)(v3 + 16) + 1, 1);
    uint64_t v3 = *v2;
  }
  unint64_t v5 = *(void *)(v3 + 16);
  unint64_t v6 = v5 + 1;
  if (*(void *)(v3 + 24) >> 1 <= v5)
  {
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(*(void *)(v3 + 24) >= 2uLL, v5 + 1, 1);
    uint64_t v3 = *v2;
  }
  *(void *)(v3 + 16) = v6;
  uint64_t v7 = 16 * v5;
  *(void *)(v3 + v7 + 32) = a1;
  *(double *)(v3 + v7 + 40) = a2;
  _BitScanReverse64(&v8, v6);
  specialized Heap._UnsafeHandle.bubbleUp(_:)(v5, v8, v3 + 32, (__m128)*(unint64_t *)&a2);
  void *v2 = v3;
}

uint64_t specialized Heap.popMin()()
{
  if (!*((void *)*v0 + 2)) {
    return 0;
  }
  double v1 = specialized RangeReplaceableCollection<>.removeLast()();
  uint64_t v3 = v2;
  uint64_t v4 = *v0;
  if (*((void *)*v0 + 2))
  {
    if (!swift_isUniquelyReferenced_nonNull_native(v4)) {
      uint64_t v4 = (double *)specialized _ContiguousArrayBuffer._consumeAndCreateNew()((uint64_t)v4);
    }
    uint64_t v5 = *((void *)v4 + 2);
    uint64_t v6 = *((void *)v4 + 4);
    *((void *)v4 + 4) = v3;
    v4[5] = v1;
    specialized Heap._UnsafeHandle.trickleDownMin(_:)(0, 0, (uint64_t)(v4 + 4), v5);
    void *v0 = v4;
    return v6;
  }
  return v3;
}

CreateML::InteractionLookupTable __swiftcall InteractionTableBuilder.finalize()()
{
  int64_t v1 = *(void *)(v0 + 32);
  int64_t v2 = v1 + 1;
  if (__OFADD__(1, v1)) {
    BUG();
  }
  if (v2 <= 0) {
    int64_t v2 = 0;
  }
  uint64_t v3 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v2, 0, (uint64_t)_swiftEmptyArrayStorage);
  int64_t v4 = v1 * *(void *)(v0 + 16);
  if (!is_mul_ok(v1, *(void *)(v0 + 16))) {
    BUG();
  }
  id v40 = v3;
  if (v4 <= 0) {
    int64_t v4 = 0;
  }
  uint64_t v5 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v4, 0, (uint64_t)_swiftEmptyArrayStorage);
  if (v1 < 0) {
    BUG();
  }
  id v41 = v5;
  if (v1)
  {
    uint64_t v6 = 0;
    uint64_t v7 = (uint64_t *)(v0 + 40);
    uint64_t v8 = 0;
    swift_beginAccess(v7, v33, 0, 0);
    unint64_t v9 = 0;
    int64_t v37 = v1;
    uint64_t v38 = v7;
    do
    {
      if (v1 == v9) {
        BUG();
      }
      uint64_t v10 = *v7;
      if (v9 >= *(void *)(*v7 + 16)) {
        BUG();
      }
      uint64_t v34 = v8;
      unint64_t v36 = v9;
      uint64_t v39 = *(void *)(v10 + 8 * v9 + 32);
      swift_retain_n(v39);
      specialized MutableCollection<>.sort(by:)(&v39);
      uint64_t v35 = v6;
      if (v6)
      {
        swift_release();
        BUG();
      }
      swift_release();
      uint64_t v11 = v39;
      uint64_t v12 = *(void *)(v39 + 16);
      int64_t v13 = *((void *)v41 + 2);
      int64_t v14 = v12 + v13;
      if (__OFADD__(v12, v13)) {
        BUG();
      }
      int64_t v15 = *((void *)v41 + 3) >> 1;
      swift_retain();
      if (v15 < v14)
      {
        if (v13 > v14) {
          int64_t v14 = v13;
        }
        uint64_t v17 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(1, v14, 1, (uint64_t)v41);
        uint64_t v16 = *(void *)(v11 + 16);
      }
      else
      {
        uint64_t v16 = v12;
        uint64_t v17 = v41;
      }
      id v41 = v17;
      if (v16)
      {
        uint64_t v18 = *((void *)v17 + 2);
        if ((*((void *)v17 + 3) >> 1) - v18 < v12) {
          BUG();
        }
        double v19 = &v17[16 * v18 + 32];
        size_t v20 = 16 * v12;
        if (v11 + 32 < (unint64_t)&v19[16 * v12] && (unint64_t)v19 < v11 + v20 + 32)
        {
          _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize overlapping range", 49, 2, "Swift/UnsafePointer.swift", 25, 2, 1092, 1);
          BUG();
        }
        memcpy(v19, (const void *)(v11 + 32), v20);
        if (v12)
        {
          BOOL v21 = __OFADD__(*((void *)v41 + 2), v12);
          uint64_t v22 = *((void *)v41 + 2) + v12;
          if (v21) {
            BUG();
          }
          *((void *)v41 + 2) = v22;
        }
      }
      else if (v12)
      {
        BUG();
      }
      swift_release();
      uint64_t v23 = v40;
      unint64_t v24 = *((void *)v40 + 2);
      if (*((void *)v40 + 3) >> 1 <= v24) {
        uint64_t v23 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(*((void *)v40 + 3) >= 2uLL, v24 + 1, 1, (uint64_t)v40);
      }
      *((void *)v23 + 2) = v24 + 1;
      id v40 = v23;
      uint64_t v25 = v34;
      *(void *)&v23[8 * v24 + 32] = v34;
      uint64_t v26 = v25;
      uint64_t v27 = *(void *)(v11 + 16);
      swift_release();
      BOOL v21 = __OFADD__(v27, v26);
      uint64_t v8 = v27 + v26;
      if (v21) {
        BUG();
      }
      unint64_t v9 = v36 + 1;
      int64_t v1 = v37;
      uint64_t v7 = v38;
      uint64_t v6 = v35;
    }
    while (v37 != v36 + 1);
  }
  else
  {
    uint64_t v8 = 0;
  }
  uint64_t v28 = v8;
  id v29 = v40;
  unint64_t v30 = *((void *)v40 + 2);
  if (*((void *)v40 + 3) >> 1 <= v30) {
    id v29 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(*((void *)v40 + 3) >= 2uLL, v30 + 1, 1, (uint64_t)v40);
  }
  *((void *)v29 + 2) = v30 + 1;
  *(void *)&v29[8 * v30 + 32] = v28;
  Swift::Int v31 = v1;
  uint64_t v32 = v41;
  result.boundaries._rawValue = v29;
  result.interactions._rawValue = v32;
  result.itemCount = v31;
  return result;
}

unint64_t static InteractionTableBuilder.createFromItemInteractions(interactions:maximumInteractionsPerItem:minimumInteractionScore:)(uint64_t a1, int64_t a2, double a3)
{
  double v12 = a3;
  char v4 = a1;
  uint64_t v5 = *(void *)(a1 + 16);
  swift_initStackObject(v3, v11);
  InteractionTableBuilder.init(itemCount:maximumInteractionsPerItem:minimumInteractionScore:)(v5, a2, v12);
  if (v5)
  {
    swift_bridgeObjectRetain(a1);
    uint64_t v6 = (Swift::Double *)(a1 + 48);
    do
    {
      Swift::Int v7 = *((void *)v6 - 2);
      Swift::Int v8 = *((void *)v6 - 1);
      if (v7 != v8) {
        InteractionTableBuilder.insert(_:_:score:)(v7, v8, *v6);
      }
      v6 += 3;
      --v5;
    }
    while (v5);
    swift_bridgeObjectRelease(v4);
  }
  unint64_t v9 = (unint64_t)InteractionTableBuilder.finalize()();
  swift_release();
  return v9;
}

uint64_t InteractionTableBuilder.__deallocating_deinit()
{
  swift_bridgeObjectRelease(*(void *)(v0 + 40));
  return swift_deallocClassInstance(v0, 48, 7);
}

uint64_t type metadata accessor for InteractionTableBuilder()
{
  return objc_opt_self(_TtC8CreateML23InteractionTableBuilder);
}

void specialized MutableCollection<>.sort(by:)(void *a1)
{
  int64_t v1 = (void *)*a1;
  if (!swift_isUniquelyReferenced_nonNull_native(*a1)) {
    int64_t v1 = specialized _ContiguousArrayBuffer._consumeAndCreateNew()((uint64_t)v1);
  }
  uint64_t v2 = v1[2];
  v3[0] = (uint64_t)(v1 + 4);
  v3[1] = v2;
  specialized UnsafeMutableBufferPointer._stableSortImpl(by:)(v3);
  *a1 = v1;
}

{
  void *v1;
  uint64_t v2;
  uint64_t v3[5];

  int64_t v1 = (void *)*a1;
  if (!swift_isUniquelyReferenced_nonNull_native(*a1)) {
    int64_t v1 = specialized _ContiguousArrayBuffer._consumeAndCreateNew()((uint64_t)v1);
  }
  uint64_t v2 = v1[2];
  v3[0] = (uint64_t)(v1 + 4);
  v3[1] = v2;
  specialized UnsafeMutableBufferPointer._stableSortImpl(by:)(v3);
  *a1 = v1;
}

{
  void *v1;
  uint64_t v2;
  uint64_t v3[5];

  int64_t v1 = (void *)*a1;
  if (!swift_isUniquelyReferenced_nonNull_native(*a1)) {
    int64_t v1 = specialized _ContiguousArrayBuffer._consumeAndCreateNew()((uint64_t)v1);
  }
  uint64_t v2 = v1[2];
  v3[0] = (uint64_t)(v1 + 4);
  v3[1] = v2;
  specialized UnsafeMutableBufferPointer._stableSortImpl(by:)(v3);
  *a1 = v1;
}

{
  void *v1;
  uint64_t v2;
  uint64_t v3[5];

  int64_t v1 = (void *)*a1;
  if (!swift_isUniquelyReferenced_nonNull_native(*a1)) {
    int64_t v1 = specialized _ContiguousArrayBuffer._consumeAndCreateNew()((uint64_t)v1);
  }
  uint64_t v2 = v1[2];
  v3[0] = (uint64_t)(v1 + 4);
  v3[1] = v2;
  specialized UnsafeMutableBufferPointer._stableSortImpl(by:)(v3);
  *a1 = v1;
}

{
  void *v1;
  uint64_t v2;
  uint64_t v3[5];

  int64_t v1 = (void *)*a1;
  if (!swift_isUniquelyReferenced_nonNull_native(*a1)) {
    int64_t v1 = specialized _ContiguousArrayBuffer._consumeAndCreateNew()((uint64_t)v1);
  }
  uint64_t v2 = v1[2];
  v3[0] = (uint64_t)(v1 + 4);
  v3[1] = v2;
  specialized UnsafeMutableBufferPointer._stableSortImpl(by:)(v3);
  *a1 = v1;
}

{
  specialized MutableCollection<>.sort(by:)(a1);
}

int64_t specialized Heap._UnsafeHandle.heapify()(uint64_t a1, uint64_t a2)
{
  int64_t result = a2 / 2;
  if (a2 < 2) {
    BUG();
  }
  if (result)
  {
    _BitScanReverse64(&v3, result);
    unint64_t v4 = v3 ^ 0x3F;
  }
  else
  {
    unint64_t v4 = 64;
  }
  uint64_t v53 = result - 1;
  int64_t v5 = 63 - v4;
  do
  {
    uint64_t v6 = ~(-1 << v5);
    if (result > v6)
    {
      uint64_t v8 = (1 << (v5 + 1)) - 2;
      if (v8 >= result) {
        uint64_t v8 = v53;
      }
      uint64_t v7 = ~(-1 << v5);
    }
    else
    {
      uint64_t v7 = 0;
      uint64_t v8 = 0;
    }
    BOOL v9 = result <= v6 || v8 < v7;
    if (v5)
    {
      if (v9) {
        goto LABEL_89;
      }
      if (!a1) {
        BUG();
      }
      while (1)
      {
        uint64_t v30 = *(void *)(a1 + 16 * v7);
        double v31 = *(double *)(a1 + 16 * v7 + 8);
        uint64_t v32 = 4 * v7 + 3;
        uint64_t v33 = 4 * v7 + 6;
        if (v33 < a2)
        {
          uint64_t v34 = v7;
          while (1)
          {
            uint64_t v35 = v32 + 1;
            if (*(double *)(a1 + 16 * (v32 + 1) + 8) <= *(double *)(a1 + 16 * v32 + 8)) {
              uint64_t v35 = v32;
            }
            uint64_t v36 = v32 + 2;
            if (*(double *)(a1 + 16 * v33 + 8) <= *(double *)(a1 + 16 * v36 + 8)) {
              uint64_t v33 = v36;
            }
            uint64_t v37 = v33;
            if (*(double *)(a1 + 16 * v33 + 8) <= *(double *)(a1 + 16 * v35 + 8)) {
              uint64_t v37 = v35;
            }
            double v38 = *(double *)(a1 + 16 * v37 + 8);
            if (v38 <= v31) {
              break;
            }
            uint64_t v39 = 16 * v34;
            *(void *)(a1 + v39) = *(void *)(a1 + 16 * v37);
            *(double *)(a1 + v39 + 8) = v38;
            uint64_t v40 = 16 * ((v37 - 1) / 2);
            double v41 = *(double *)(a1 + v40 + 8);
            if (v41 <= v31)
            {
              double v41 = v31;
            }
            else
            {
              uint64_t v42 = (double *)(a1 + v40 + 8);
              uint64_t v43 = *((void *)v42 - 1);
              *((void *)v42 - 1) = v30;
              *uint64_t v42 = v31;
              uint64_t v30 = v43;
              double v31 = v41;
            }
            uint64_t v32 = 4 * v37 + 3;
            uint64_t v33 = 4 * v37 + 6;
            uint64_t v34 = v37;
            if (v33 >= a2) {
              goto LABEL_68;
            }
          }
          double v41 = v31;
          goto LABEL_88;
        }
        uint64_t v37 = v7;
        double v41 = *(double *)(a1 + 16 * v7 + 8);
LABEL_68:
        uint64_t v34 = 2 * v37 + 1;
        if (v34 >= a2) {
          goto LABEL_87;
        }
        uint64_t v44 = 2 * v37;
        if (v32 >= a2)
        {
          uint64_t v46 = v44 + 2;
        }
        else
        {
          uint64_t v34 = v32 + 2;
          if (v32 + 2 < a2)
          {
            uint64_t v45 = v32 + 1;
            if (*(double *)(a1 + 16 * (v32 + 1) + 8) <= *(double *)(a1 + 16 * v32 + 8)) {
              uint64_t v45 = v32;
            }
            if (*(double *)(a1 + 16 * v34 + 8) <= *(double *)(a1 + 16 * v45 + 8)) {
              uint64_t v34 = v45;
            }
            goto LABEL_83;
          }
          uint64_t v34 = v44 + 2;
          if (*(double *)(a1 + 16 * v32 + 8) > *(double *)(a1 + 16 * (v44 + 2) + 8)) {
            uint64_t v34 = v32;
          }
          uint64_t v46 = v32 + 1;
        }
        if (v46 < a2 && *(double *)(a1 + 16 * v46 + 8) > *(double *)(a1 + 16 * v34 + 8)) {
          uint64_t v34 = v46;
        }
LABEL_83:
        double v47 = *(double *)(a1 + 16 * v34 + 8);
        if (v47 > v41)
        {
          uint64_t v48 = 16 * v37;
          *(void *)(a1 + v48) = *(void *)(a1 + 16 * v34);
          *(double *)(a1 + v48 + 8) = v47;
          if (v34 >= v32)
          {
            uint64_t v49 = 16 * ((v34 - 1) / 2);
            double v50 = *(double *)(a1 + v49 + 8);
            if (v50 > v41)
            {
              *(void *)(a1 + 16 * v34) = *(void *)(a1 + v49);
              *(double *)(a1 + 16 * v34 + 8) = v50;
              uint64_t v34 = (v34 - 1) / 2;
            }
          }
          goto LABEL_88;
        }
LABEL_87:
        uint64_t v34 = v37;
LABEL_88:
        uint64_t v51 = 16 * v34;
        *(void *)(a1 + v51) = v30;
        *(double *)(a1 + v51 + 8) = v41;
        if (v8 < ++v7) {
          goto LABEL_89;
        }
      }
    }
    if (!v9)
    {
      if (!a1) {
        BUG();
      }
      do
      {
        uint64_t v10 = *(void *)(a1 + 16 * v7);
        double v11 = *(double *)(a1 + 16 * v7 + 8);
        uint64_t v12 = 4 * v7 + 3;
        uint64_t v13 = 4 * v7 + 6;
        if (v13 < a2)
        {
          uint64_t v14 = v7;
          while (1)
          {
            uint64_t v15 = v12;
            if (*(double *)(a1 + 16 * (v12 + 1) + 8) <= *(double *)(a1 + 16 * v12 + 8)) {
              uint64_t v15 = v12 + 1;
            }
            uint64_t v16 = v12 + 2;
            if (*(double *)(a1 + 16 * v13 + 8) <= *(double *)(a1 + 16 * v16 + 8)) {
              uint64_t v16 = v13;
            }
            if (*(double *)(a1 + 16 * v16 + 8) <= *(double *)(a1 + 16 * v15 + 8)) {
              uint64_t v15 = v16;
            }
            double v17 = *(double *)(a1 + 16 * v15 + 8);
            if (v11 <= v17) {
              break;
            }
            uint64_t v18 = 16 * v14;
            *(void *)(a1 + v18) = *(void *)(a1 + 16 * v15);
            *(double *)(a1 + v18 + 8) = v17;
            uint64_t v19 = 16 * ((v15 - 1) / 2);
            double v20 = *(double *)(a1 + v19 + 8);
            if (v11 <= v20)
            {
              double v20 = v11;
            }
            else
            {
              BOOL v21 = (double *)(a1 + v19 + 8);
              uint64_t v22 = *((void *)v21 - 1);
              *((void *)v21 - 1) = v10;
              double *v21 = v11;
              uint64_t v10 = v22;
              double v11 = v20;
            }
            uint64_t v12 = 4 * v15 + 3;
            uint64_t v13 = 4 * v15 + 6;
            uint64_t v14 = v15;
            if (v13 >= a2) {
              goto LABEL_29;
            }
          }
          double v20 = v11;
          goto LABEL_49;
        }
        uint64_t v15 = v7;
        double v20 = *(double *)(a1 + 16 * v7 + 8);
LABEL_29:
        uint64_t v14 = 2 * v15 + 1;
        if (v14 >= a2) {
          goto LABEL_48;
        }
        uint64_t v23 = 2 * v15;
        if (v12 >= a2)
        {
          uint64_t v24 = v23 + 2;
        }
        else
        {
          if (v12 + 2 < a2)
          {
            uint64_t v14 = v12 + 1;
            if (*(double *)(a1 + 16 * (v12 + 1) + 8) > *(double *)(a1 + 16 * v12 + 8)) {
              uint64_t v14 = v12;
            }
            if (*(double *)(a1 + 16 * (v12 + 2) + 8) <= *(double *)(a1 + 16 * v14 + 8)) {
              uint64_t v14 = v12 + 2;
            }
            goto LABEL_44;
          }
          uint64_t v14 = v23 + 2;
          if (*(double *)(a1 + 16 * v12 + 8) <= *(double *)(a1 + 16 * (v23 + 2) + 8)) {
            uint64_t v14 = v12;
          }
          uint64_t v24 = v12 + 1;
        }
        if (v24 < a2 && *(double *)(a1 + 16 * v24 + 8) <= *(double *)(a1 + 16 * v14 + 8)) {
          uint64_t v14 = v24;
        }
LABEL_44:
        double v25 = *(double *)(a1 + 16 * v14 + 8);
        if (v20 > v25)
        {
          uint64_t v26 = 16 * v15;
          *(void *)(a1 + v26) = *(void *)(a1 + 16 * v14);
          *(double *)(a1 + v26 + 8) = v25;
          if (v14 >= v12)
          {
            uint64_t v27 = 16 * ((v14 - 1) / 2);
            double v28 = *(double *)(a1 + v27 + 8);
            if (v20 > v28)
            {
              *(void *)(a1 + 16 * v14) = *(void *)(a1 + v27);
              *(double *)(a1 + 16 * v14 + 8) = v28;
              uint64_t v14 = (v14 - 1) / 2;
            }
          }
          goto LABEL_49;
        }
LABEL_48:
        uint64_t v14 = v15;
LABEL_49:
        uint64_t v29 = 16 * v14;
        *(void *)(a1 + v29) = v10;
        *(double *)(a1 + v29 + 8) = v20;
        ++v7;
      }
      while (v8 >= v7);
    }
LABEL_89:
    BOOL v52 = v5-- <= 0;
    int64_t result = a2 / 2;
  }
  while (!v52);
  return result;
}

uint64_t specialized Heap._UnsafeHandle.trickleDownMin(_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (!a3) {
    BUG();
  }
  uint64_t v6 = a1;
  uint64_t v7 = *(void *)(a3 + 16 * a1);
  double v8 = *(double *)(a3 + 16 * a1 + 8);
  uint64_t v9 = 4 * a1 + 3;
  uint64_t result = 4 * a1 + 6;
  if (result >= a4)
  {
    uint64_t v19 = a2 + 2;
LABEL_15:
    uint64_t v20 = 2 * v6 + 1;
    if (v20 < a4)
    {
      uint64_t result = specialized Heap._UnsafeHandle._minDescendant(c0:gc0:)(v20, a2 + 1, v9, v19, a3, a4);
      uint64_t v21 = 16 * result;
      double v22 = *(double *)(a3 + 16 * result + 8);
      if (v8 > v22)
      {
        uint64_t v23 = result;
        uint64_t result = *(void *)(a3 + 16 * result);
        uint64_t v24 = 16 * v6;
        *(void *)(a3 + v24) = result;
        *(double *)(a3 + v24 + 8) = v22;
        if (v23 < v9 || (v6 = (v23 - 1) / 2, uint64_t result = 16 * v6, v25 = *(double *)(a3 + 16 * v6 + 8), v8 <= v25))
        {
          uint64_t v6 = v23;
        }
        else
        {
          uint64_t result = *(void *)(a3 + 16 * v6);
          *(void *)(a3 + v21) = result;
          *(double *)(a3 + v21 + 8) = v25;
        }
      }
    }
  }
  else
  {
    while (1)
    {
      uint64_t v11 = v9;
      if (*(double *)(a3 + 16 * (v9 + 1) + 8) <= *(double *)(a3 + 16 * v9 + 8)) {
        uint64_t v11 = v9 + 1;
      }
      uint64_t v12 = v9 + 2;
      if (*(double *)(a3 + 16 * result + 8) <= *(double *)(a3 + 16 * v12 + 8)) {
        uint64_t v12 = result;
      }
      if (*(double *)(a3 + 16 * v12 + 8) <= *(double *)(a3 + 16 * v11 + 8)) {
        uint64_t v11 = v12;
      }
      uint64_t result = 16 * v11;
      double v13 = *(double *)(a3 + 16 * v11 + 8);
      if (v8 <= v13) {
        break;
      }
      uint64_t v14 = 16 * v6;
      *(void *)(a3 + v14) = *(void *)(a3 + 16 * v11);
      *(double *)(a3 + v14 + 8) = v13;
      uint64_t v15 = 16 * ((v11 - 1) / 2);
      double v16 = *(double *)(a3 + v15 + 8);
      if (v8 > v16)
      {
        double v17 = (double *)(a3 + v15 + 8);
        uint64_t v18 = *((void *)v17 - 1);
        *((void *)v17 - 1) = v7;
        double *v17 = v8;
        uint64_t v7 = v18;
        double v8 = v16;
      }
      uint64_t v9 = 4 * v11 + 3;
      uint64_t result = 4 * v11 + 6;
      a2 += 2;
      uint64_t v6 = v11;
      if (result >= a4)
      {
        uint64_t v19 = a2 + 2;
        uint64_t v6 = v11;
        goto LABEL_15;
      }
    }
  }
  uint64_t v26 = 16 * v6;
  *(void *)(a3 + v26) = v7;
  *(double *)(a3 + v26 + 8) = v8;
  return result;
}

uint64_t specialized Heap._UnsafeHandle._minDescendant(c0:gc0:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  if (a3 >= a6)
  {
    uint64_t result = a1 + 1;
    if (a1 + 1 >= a6)
    {
      return a1;
    }
    else if (*(double *)(a5 + 16 * result + 8) > *(double *)(a5 + 16 * a1 + 8))
    {
      return a1;
    }
  }
  else
  {
    uint64_t result = a3 + 2;
    if (a3 + 2 >= a6)
    {
      uint64_t result = a1 + 1;
      if (*(double *)(a5 + 16 * a3 + 8) <= *(double *)(a5 + 16 * (a1 + 1) + 8)) {
        uint64_t result = a3;
      }
      uint64_t v8 = a3 + 1;
      if (v8 < a6 && *(double *)(a5 + 16 * v8 + 8) <= *(double *)(a5 + 16 * result + 8)) {
        return v8;
      }
    }
    else
    {
      uint64_t v7 = a3 + 1;
      if (*(double *)(a5 + 16 * (a3 + 1) + 8) > *(double *)(a5 + 16 * a3 + 8)) {
        uint64_t v7 = a3;
      }
      if (*(double *)(a5 + 16 * result + 8) > *(double *)(a5 + 16 * v7 + 8)) {
        return v7;
      }
    }
  }
  return result;
}

double specialized RangeReplaceableCollection<>.removeLast()()
{
  if (!*(void *)(*(void *)v0 + 16)) {
    BUG();
  }
  specialized ContiguousArray._customRemoveLast()();
  if (v2) {
    return specialized ContiguousArray.remove(at:)(*(void *)(*(void *)v0 + 16) - 1);
  }
  else {
    return v1;
  }
}

__m128 specialized Heap._UnsafeHandle.bubbleUp(_:)(uint64_t a1, char a2, uint64_t a3, __m128 result)
{
  if (!a1) {
    return result;
  }
  char v5 = a2;
  uint64_t result = (__m128)*(unint64_t *)(a3 + 16 * a1 + 8);
  double v6 = *(double *)(a3 + 16 * ((a1 - 1) / 2) + 8);
  if (a2)
  {
    if (v6 <= *(double *)result.i64) {
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  if (*(double *)result.i64 > v6)
  {
LABEL_6:
    char v5 = a2 - 1;
    specialized UnsafeMutableBufferPointer.swapAt(_:_:)(a1, (a1 - 1) / 2, a3);
    a1 = (a1 - 1) / 2;
  }
LABEL_7:
  if (v5)
  {
    if (a1 > 2)
    {
      unint64_t v13 = (unint64_t)(a1 - 3) >> 2;
      uint64_t result = (__m128)*(unint64_t *)(a3 + 16 * a1 + 8);
      __m128 v14 = (__m128)*(unint64_t *)(a3 + 16 * v13 + 8);
      if (*(double *)result.i64 > *(double *)v14.i64)
      {
        do
        {
          __m128 v15 = v14;
          if (a1 != v13)
          {
            if (!a3) {
              BUG();
            }
            uint64_t v16 = 16 * a1;
            uint64_t v17 = 16 * v13;
            uint64_t v18 = *(void *)(a3 + v16);
            *(_OWORD *)(a3 + v16) = *(_OWORD *)(a3 + 16 * v13);
            *(void *)(a3 + v17) = v18;
            *(void *)(a3 + v17 + 8) = result.i64[0];
            __m128 v15 = result;
          }
          if (v13 < 3) {
            break;
          }
          a1 = v13;
          unint64_t v13 = (v13 - 3) >> 2;
          __m128 v14 = (__m128)*(unint64_t *)(a3 + 16 * v13 + 8);
          uint64_t result = v15;
        }
        while (*(double *)v15.i64 > *(double *)v14.i64);
      }
    }
  }
  else if (a1 > 2)
  {
    unint64_t v7 = (unint64_t)(a1 - 3) >> 2;
    uint64_t result = (__m128)*(unint64_t *)(a3 + 16 * a1 + 8);
    __m128 v8 = (__m128)*(unint64_t *)(a3 + 16 * v7 + 8);
    if (*(double *)v8.i64 > *(double *)result.i64)
    {
      do
      {
        __m128 v9 = v8;
        if (a1 != v7)
        {
          if (!a3) {
            BUG();
          }
          uint64_t v10 = 16 * a1;
          uint64_t v11 = 16 * v7;
          uint64_t v12 = *(void *)(a3 + v10);
          *(_OWORD *)(a3 + v10) = *(_OWORD *)(a3 + 16 * v7);
          *(void *)(a3 + v11) = v12;
          *(void *)(a3 + v11 + 8) = result.i64[0];
          __m128 v9 = result;
        }
        if (v7 < 3) {
          break;
        }
        a1 = v7;
        unint64_t v7 = (v7 - 3) >> 2;
        __m128 v8 = (__m128)*(unint64_t *)(a3 + 16 * v7 + 8);
        uint64_t result = v9;
      }
      while (*(double *)v8.i64 > *(double *)v9.i64);
    }
  }
  return result;
}

void specialized UnsafeMutableBufferPointer._stableSortImpl(by:)(uint64_t *a1)
{
  Swift::Int v2 = a1[1];
  Swift::Int v3 = _minimumMergeRunLength(_:)(v2);
  if (v3 >= v2)
  {
    if (v2 < 0) {
      BUG();
    }
    if (v2) {
      specialized MutableCollection<>._insertionSort(within:sortedEnd:by:)(0, v2, 1, a1);
    }
  }
  else
  {
    Swift::Int v4 = v3;
    id v75 = specialized static Array._allocateUninitialized(_:)(v2 / 2);
    id v74 = v5;
    uint64_t v81 = v2;
    if (v2 > 0)
    {
      Swift::Int v71 = v4;
      uint64_t v6 = *a1;
      uint64_t v73 = *a1 + 32;
      uint64_t v76 = *a1 - 16;
      unint64_t v7 = (char *)_swiftEmptyArrayStorage;
      uint64_t v8 = 0;
      uint64_t v9 = v81;
      uint64_t v84 = *a1;
      while (1)
      {
        uint64_t v10 = v8 + 1;
        if (v8 + 1 < v9)
        {
          uint64_t v11 = *(void *)(v6 + 16 * v10);
          uint64_t v12 = 16 * v8;
          uint64_t v13 = *(void *)(v6 + 16 * v8);
          uint64_t v10 = v8 + 2;
          if (v8 + 2 < v9)
          {
            __m128 v14 = (uint64_t *)(v12 + v73);
            uint64_t v15 = v11;
            while (1)
            {
              uint64_t v16 = v15;
              uint64_t v15 = *v14;
              if (v11 < v13 == *v14 >= v16) {
                break;
              }
              ++v10;
              v14 += 2;
              if (v10 >= v9)
              {
                uint64_t v10 = v9;
                break;
              }
            }
          }
          if (v11 < v13)
          {
            if (v10 < v8) {
              BUG();
            }
            if (v10 > v8)
            {
              uint64_t v17 = v76 + 16 * v10;
              uint64_t v18 = (uint64_t *)(v6 + v12);
              uint64_t v19 = v10;
              uint64_t v20 = v8;
              do
              {
                if (v20 != --v19)
                {
                  if (!v6) {
                    BUG();
                  }
                  uint64_t v21 = *v18;
                  uint64_t v22 = v18[1];
                  *(_OWORD *)uint64_t v18 = *(_OWORD *)v17;
                  *(void *)uint64_t v17 = v21;
                  *(void *)(v17 + 8) = v22;
                }
                ++v20;
                v17 -= 16;
                v18 += 2;
              }
              while (v20 < v19);
            }
          }
        }
        if (v10 < v9)
        {
          if (__OFSUB__(v10, v8)) {
            BUG();
          }
          if (v10 - v8 < v71)
          {
            uint64_t v23 = v71 + v8;
            if (__OFADD__(v71, v8)) {
              BUG();
            }
            if (v23 >= v9) {
              uint64_t v23 = v9;
            }
            if (v23 < v8) {
              BUG();
            }
            if (v10 != v23)
            {
              uint64_t v24 = v76 + 16 * v10;
              do
              {
                uint64_t v25 = *(void *)(v6 + 16 * v10);
                uint64_t v26 = v8;
                uint64_t v27 = v24;
                do
                {
                  if (v25 >= *(void *)v27) {
                    break;
                  }
                  if (!v6) {
                    BUG();
                  }
                  uint64_t v28 = *(void *)(v27 + 24);
                  *(_OWORD *)(v27 + 16) = *(_OWORD *)v27;
                  *(void *)uint64_t v27 = v25;
                  *(void *)(v27 + 8) = v28;
                  v27 -= 16;
                  ++v26;
                }
                while (v10 != v26);
                ++v10;
                v24 += 16;
              }
              while (v10 != v23);
              uint64_t v10 = v23;
            }
          }
        }
        if (v10 < v8) {
          BUG();
        }
        uint64_t v79 = v10;
        if (!swift_isUniquelyReferenced_nonNull_native(v7)) {
          unint64_t v7 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *((void *)v7 + 2) + 1, 1, v7);
        }
        unint64_t v29 = *((void *)v7 + 2);
        unint64_t v30 = v29 + 1;
        uint64_t v6 = v84;
        if (*((void *)v7 + 3) >> 1 <= v29)
        {
          uint64_t v65 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(*((void *)v7 + 3) >= 2uLL, v29 + 1, 1, v7);
          uint64_t v6 = v84;
          unint64_t v7 = v65;
        }
        *((void *)v7 + 2) = v30;
        uint64_t v31 = 16 * v29;
        *(void *)&v7[v31 + 32] = v8;
        *(void *)&v7[v31 + 40] = v79;
        if (v29) {
          break;
        }
        unint64_t v30 = 1;
LABEL_74:
        uint64_t v9 = v81;
        uint64_t v8 = v79;
        if (v79 >= v81) {
          goto LABEL_80;
        }
      }
      uint64_t v32 = v7 + 32;
      uint64_t v85 = v7;
      id v82 = v7 + 32;
      while (1)
      {
        unint64_t v33 = v30 - 1;
        if (v30 >= 4) {
          break;
        }
        if (v30 == 3)
        {
          uint64_t v34 = *((void *)v7 + 5);
          BOOL v35 = __OFSUB__(v34, *((void *)v7 + 4));
          uint64_t v36 = v34 - *((void *)v7 + 4);
          BOOL v37 = v35;
LABEL_48:
          if (v37) {
            BUG();
          }
          unint64_t v47 = v30 - 2;
          uint64_t v48 = 16 * (v30 - 2);
          uint64_t v49 = *(void *)&v32[v48 + 8];
          BOOL v35 = __OFSUB__(v49, *(void *)&v32[v48]);
          uint64_t v50 = v49 - *(void *)&v32[v48];
          BOOL v51 = v35;
          if (v35) {
            BUG();
          }
          uint64_t v52 = *(void *)&v32[16 * v33 + 8];
          BOOL v35 = __OFSUB__(v52, *(void *)&v32[16 * v33]);
          uint64_t v53 = v52 - *(void *)&v32[16 * v33];
          if (v35) {
            BUG();
          }
          if (__OFADD__(v53, v50)) {
            BUG();
          }
          if (v53 + v50 >= v36)
          {
            if (v36 >= v53) {
              unint64_t v47 = v30 - 1;
            }
            unint64_t v33 = v47;
            goto LABEL_65;
          }
          goto LABEL_57;
        }
        uint64_t v54 = *((void *)v7 + 5);
        BOOL v35 = __OFSUB__(v54, *((void *)v7 + 4));
        uint64_t v50 = v54 - *((void *)v7 + 4);
        BOOL v51 = v35;
LABEL_57:
        if (v51) {
          BUG();
        }
        uint64_t v55 = *(void *)&v32[16 * v33 + 8];
        BOOL v35 = __OFSUB__(v55, *(void *)&v32[16 * v33]);
        uint64_t v56 = v55 - *(void *)&v32[16 * v33];
        if (v35) {
          BUG();
        }
        if (v56 < v50) {
          goto LABEL_74;
        }
LABEL_65:
        if (v33 - 1 >= v30) {
          BUG();
        }
        if (!v6) {
          BUG();
        }
        uint64_t v59 = 16 * (v33 - 1);
        unint64_t v77 = v33;
        float v60 = &v32[16 * v33];
        uint64_t v61 = *(void *)&v32[v59];
        uint64_t v62 = *((void *)v60 + 1);
        specialized _merge<A>(low:mid:high:buffer:by:)((char *)(v6 + 16 * v61), (char *)(v6 + 16 * *(void *)v60), v6 + 16 * v62, v74);
        if (v1) {
          goto LABEL_92;
        }
        if (v62 < v61) {
          BUG();
        }
        if (v77 > *((void *)v85 + 2)) {
          BUG();
        }
        uint64_t v63 = &v82[v59];
        *(void *)uint64_t v63 = v61;
        *((void *)v63 + 1) = v62;
        unint64_t v64 = *((void *)v85 + 2);
        if (v77 >= v64) {
          BUG();
        }
        unint64_t v7 = v85;
        unint64_t v30 = v64 - 1;
        memmove(v60, v60 + 16, 16 * (v64 - 1 - v77));
        uint64_t v32 = v82;
        *((void *)v85 + 2) = v64 - 1;
        uint64_t v6 = v84;
        if (v64 <= 2) {
          goto LABEL_74;
        }
      }
      uint64_t v38 = 16 * v30;
      uint64_t v39 = *(void *)&v32[16 * v30 - 56];
      BOOL v35 = __OFSUB__(v39, *(void *)&v32[16 * v30 - 64]);
      uint64_t v40 = v39 - *(void *)&v32[16 * v30 - 64];
      if (v35) {
        BUG();
      }
      uint64_t v41 = *(void *)&v32[v38 - 40];
      BOOL v35 = __OFSUB__(v41, *(void *)&v32[v38 - 48]);
      uint64_t v36 = v41 - *(void *)&v32[v38 - 48];
      BOOL v37 = v35;
      if (v35) {
        BUG();
      }
      unint64_t v42 = v30 - 2;
      uint64_t v43 = 16 * (v30 - 2);
      uint64_t v44 = *(void *)&v32[v43 + 8];
      BOOL v35 = __OFSUB__(v44, *(void *)&v32[v43]);
      uint64_t v45 = v44 - *(void *)&v32[v43];
      if (v35) {
        BUG();
      }
      BOOL v35 = __OFADD__(v36, v45);
      uint64_t v46 = v36 + v45;
      if (v35) {
        BUG();
      }
      if (v46 >= v40)
      {
        uint64_t v57 = *(void *)&v32[16 * v33 + 8];
        BOOL v35 = __OFSUB__(v57, *(void *)&v32[16 * v33]);
        uint64_t v58 = v57 - *(void *)&v32[16 * v33];
        if (v35) {
          BUG();
        }
        if (v36 >= v58) {
          unint64_t v42 = v30 - 1;
        }
        unint64_t v33 = v42;
        goto LABEL_65;
      }
      goto LABEL_48;
    }
    unint64_t v7 = (char *)_swiftEmptyArrayStorage;
    unint64_t v30 = _swiftEmptyArrayStorage[2];
LABEL_80:
    uint64_t v85 = v7;
    if (v30 < 2)
    {
LABEL_95:
      swift_bridgeObjectRelease((_BYTE)v85);
      if (v81 < -1) {
        BUG();
      }
      _OWORD v75[2] = 0;
      swift_bridgeObjectRelease((_BYTE)v75);
    }
    else
    {
      uint64_t v66 = *a1;
      uint64_t v80 = *a1;
      while (1)
      {
        unint64_t v67 = v30 - 2;
        if (v30 < 2) {
          BUG();
        }
        if (!v66) {
          BUG();
        }
        uint64_t v68 = 16 * v67;
        uint64_t v69 = 16 * (v30 - 1);
        uint64_t v83 = *(void *)&v85[16 * v67 + 32];
        uint64_t v78 = *(void *)&v85[v69 + 40];
        specialized _merge<A>(low:mid:high:buffer:by:)((char *)(v66 + 16 * v83), (char *)(v66 + 16 * *(void *)&v85[v69 + 32]), v66 + 16 * v78, v74);
        if (v1) {
          break;
        }
        if (v78 < v83) {
          BUG();
        }
        if (!swift_isUniquelyReferenced_nonNull_native(v85)) {
          uint64_t v85 = specialized _ArrayBuffer._consumeAndCreateNew()((uint64_t)v85);
        }
        if (v67 >= *((void *)v85 + 2)) {
          BUG();
        }
        *(void *)&v85[v68 + 32] = v83;
        *(void *)&v85[v68 + 40] = v78;
        unint64_t v70 = *((void *)v85 + 2);
        if (v30 > v70) {
          BUG();
        }
        memmove(&v85[v69 + 32], &v85[16 * v30 + 32], 16 * (v70 - v30));
        *((void *)v85 + 2) = v70 - 1;
        unint64_t v30 = v70 - 1;
        uint64_t v66 = v80;
        if (v70 <= 2) {
          goto LABEL_95;
        }
      }
LABEL_92:
      swift_bridgeObjectRelease((_BYTE)v85);
      if (v81 < -1) {
        BUG();
      }
      _OWORD v75[2] = 0;
      swift_bridgeObjectRelease((_BYTE)v75);
    }
  }
}

{
  uint64_t v1;
  Swift::Int v2;
  Swift::Int v3;
  Swift::Int v4;
  char *v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  double v11;
  uint64_t v12;
  double v13;
  double *v14;
  double v15;
  double v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  long long v21;
  uint64_t v22;
  long long v23;
  long long v24;
  uint64_t v25;
  long long v26;
  long long v27;
  uint64_t v28;
  uint64_t v29;
  double v30;
  uint64_t v31;
  uint64_t v32;
  long long v33;
  long long v34;
  long long v35;
  long long v36;
  long long v37;
  unint64_t v38;
  unint64_t v39;
  uint64_t v40;
  char *v41;
  unint64_t v42;
  uint64_t v43;
  BOOL v44;
  uint64_t v45;
  BOOL v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  unint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  unint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  BOOL v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  char *v69;
  uint64_t v70;
  uint64_t v71;
  char *v72;
  unint64_t v73;
  char *v74;
  uint64_t v75;
  unint64_t v76;
  uint64_t v77;
  uint64_t v78;
  unint64_t v79;
  Swift::Int v80;
  uint64_t v82;
  uint64_t v83;
  char *v84;
  void *v85;
  unint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  char *v91;
  uint64_t v92;
  uint64_t v93;
  char *v94;

  Swift::Int v2 = a1[1];
  Swift::Int v3 = _minimumMergeRunLength(_:)(v2);
  if (v3 >= v2)
  {
    if (v2 < 0) {
      BUG();
    }
    if (v2) {
      specialized MutableCollection<>._insertionSort(within:sortedEnd:by:)(0, v2, 1, a1);
    }
  }
  else
  {
    Swift::Int v4 = v3;
    uint64_t v85 = specialized static Array._allocateUninitialized(_:)(v2 / 2);
    uint64_t v84 = v5;
    uint64_t v90 = v2;
    if (v2 > 0)
    {
      uint64_t v80 = v4;
      uint64_t v6 = *a1;
      id v82 = *a1 + 160;
      uint64_t v83 = *a1 - 56;
      unint64_t v7 = (char *)_swiftEmptyArrayStorage;
      uint64_t v8 = 0;
      uint64_t v9 = v90;
      id v93 = *a1;
      while (1)
      {
        uint64_t v10 = v8 + 1;
        if (v8 + 1 < v9)
        {
          uint64_t v11 = *(double *)(v6 + 56 * v10 + 48);
          uint64_t v12 = 56 * v8;
          uint64_t v13 = *(double *)(v6 + 56 * v8 + 48);
          uint64_t v10 = v8 + 2;
          if (v8 + 2 < v9)
          {
            __m128 v14 = (double *)(v12 + v82);
            uint64_t v15 = v11;
            while (1)
            {
              uint64_t v16 = v15;
              uint64_t v15 = *v14;
              if (v11 > v13 == *v14 <= v16) {
                break;
              }
              ++v10;
              v14 += 7;
              if (v10 >= v9)
              {
                uint64_t v10 = v9;
                break;
              }
            }
          }
          if (v11 > v13)
          {
            if (v10 < v8) {
              BUG();
            }
            if (v10 > v8)
            {
              uint64_t v17 = v83 + 56 * v10;
              uint64_t v18 = v6 + v12;
              uint64_t v19 = v10;
              uint64_t v20 = v8;
              do
              {
                if (v20 != --v19)
                {
                  if (!v6) {
                    BUG();
                  }
                  uint64_t v21 = *(_OWORD *)v18;
                  uint64_t v22 = *(void *)(v18 + 48);
                  uint64_t v23 = *(_OWORD *)(v18 + 16);
                  uint64_t v24 = *(_OWORD *)(v18 + 32);
                  uint64_t v25 = *(void *)(v17 + 48);
                  uint64_t v26 = *(_OWORD *)(v17 + 16);
                  uint64_t v27 = *(_OWORD *)(v17 + 32);
                  *(_OWORD *)uint64_t v18 = *(_OWORD *)v17;
                  *(void *)(v18 + 48) = v25;
                  *(_OWORD *)(v18 + 32) = v27;
                  *(_OWORD *)(v18 + 16) = v26;
                  *(_OWORD *)uint64_t v17 = v21;
                  *(_OWORD *)(v17 + 16) = v23;
                  *(_OWORD *)(v17 + 32) = v24;
                  *(void *)(v17 + 48) = v22;
                }
                ++v20;
                v17 -= 56;
                v18 += 56;
              }
              while (v20 < v19);
            }
          }
        }
        if (v10 < v9)
        {
          if (__OFSUB__(v10, v8)) {
            BUG();
          }
          if (v10 - v8 < v80)
          {
            uint64_t v28 = v80 + v8;
            if (__OFADD__(v80, v8)) {
              BUG();
            }
            if (v28 >= v9) {
              uint64_t v28 = v9;
            }
            if (v28 < v8) {
              BUG();
            }
            if (v10 != v28)
            {
              unint64_t v29 = v6 + 56 * v10;
              do
              {
                unint64_t v30 = *(double *)(v6 + 56 * v10 + 48);
                uint64_t v31 = v8;
                uint64_t v32 = v29;
                do
                {
                  if (v30 <= *(double *)(v32 - 8)) {
                    break;
                  }
                  if (!v6) {
                    BUG();
                  }
                  unint64_t v33 = *(_OWORD *)v32;
                  uint64_t v34 = *(_OWORD *)(v32 + 16);
                  BOOL v35 = *(_OWORD *)(v32 + 32);
                  uint64_t v36 = *(_OWORD *)(v32 - 56 + 16);
                  BOOL v37 = *(_OWORD *)(v32 - 56 + 32);
                  *(_OWORD *)uint64_t v32 = *(_OWORD *)(v32 - 56);
                  *(_OWORD *)(v32 + 16) = v36;
                  *(_OWORD *)(v32 + 32) = v37;
                  *(void *)(v32 + 48) = *(void *)(v32 - 56 + 48);
                  *(_OWORD *)(v32 - 56) = v33;
                  *(_OWORD *)(v32 - 40) = v34;
                  *(_OWORD *)(v32 - 24) = v35;
                  *(double *)(v32 - 8) = v30;
                  ++v31;
                  v32 -= 56;
                }
                while (v10 != v31);
                ++v10;
                v29 += 56;
              }
              while (v10 != v28);
              uint64_t v10 = v28;
            }
          }
        }
        if (v10 < v8) {
          BUG();
        }
        uint64_t v88 = v10;
        if (!swift_isUniquelyReferenced_nonNull_native(v7)) {
          unint64_t v7 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *((void *)v7 + 2) + 1, 1, v7);
        }
        uint64_t v38 = *((void *)v7 + 2);
        uint64_t v39 = v38 + 1;
        uint64_t v6 = v93;
        if (*((void *)v7 + 3) >> 1 <= v38)
        {
          id v74 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(*((void *)v7 + 3) >= 2uLL, v38 + 1, 1, v7);
          uint64_t v6 = v93;
          unint64_t v7 = v74;
        }
        *((void *)v7 + 2) = v39;
        uint64_t v40 = 16 * v38;
        *(void *)&v7[v40 + 32] = v8;
        *(void *)&v7[v40 + 40] = v88;
        if (v38) {
          break;
        }
        uint64_t v39 = 1;
LABEL_74:
        uint64_t v9 = v90;
        uint64_t v8 = v88;
        if (v88 >= v90) {
          goto LABEL_80;
        }
      }
      uint64_t v41 = v7 + 32;
      id v94 = v7;
      uint64_t v91 = v7 + 32;
      while (1)
      {
        unint64_t v42 = v39 - 1;
        if (v39 >= 4) {
          break;
        }
        if (v39 == 3)
        {
          uint64_t v43 = *((void *)v7 + 5);
          uint64_t v44 = __OFSUB__(v43, *((void *)v7 + 4));
          uint64_t v45 = v43 - *((void *)v7 + 4);
          uint64_t v46 = v44;
LABEL_48:
          if (v46) {
            BUG();
          }
          uint64_t v56 = v39 - 2;
          uint64_t v57 = 16 * (v39 - 2);
          uint64_t v58 = *(void *)&v41[v57 + 8];
          uint64_t v44 = __OFSUB__(v58, *(void *)&v41[v57]);
          uint64_t v59 = v58 - *(void *)&v41[v57];
          float v60 = v44;
          if (v44) {
            BUG();
          }
          uint64_t v61 = *(void *)&v41[16 * v42 + 8];
          uint64_t v44 = __OFSUB__(v61, *(void *)&v41[16 * v42]);
          uint64_t v62 = v61 - *(void *)&v41[16 * v42];
          if (v44) {
            BUG();
          }
          if (__OFADD__(v62, v59)) {
            BUG();
          }
          if (v62 + v59 >= v45)
          {
            if (v45 >= v62) {
              uint64_t v56 = v39 - 1;
            }
            unint64_t v42 = v56;
            goto LABEL_65;
          }
          goto LABEL_57;
        }
        uint64_t v63 = *((void *)v7 + 5);
        uint64_t v44 = __OFSUB__(v63, *((void *)v7 + 4));
        uint64_t v59 = v63 - *((void *)v7 + 4);
        float v60 = v44;
LABEL_57:
        if (v60) {
          BUG();
        }
        unint64_t v64 = *(void *)&v41[16 * v42 + 8];
        uint64_t v44 = __OFSUB__(v64, *(void *)&v41[16 * v42]);
        uint64_t v65 = v64 - *(void *)&v41[16 * v42];
        if (v44) {
          BUG();
        }
        if (v65 < v59) {
          goto LABEL_74;
        }
LABEL_65:
        if (v42 - 1 >= v39) {
          BUG();
        }
        if (!v6) {
          BUG();
        }
        uint64_t v68 = 16 * (v42 - 1);
        uint64_t v86 = v42;
        uint64_t v69 = &v41[16 * v42];
        unint64_t v70 = *(void *)&v41[v68];
        Swift::Int v71 = *((void *)v69 + 1);
        specialized _merge<A>(low:mid:high:buffer:by:)((char *)(v6 + 56 * v70), (char *)(v6 + 56 * *(void *)v69), v6 + 56 * v71, v84);
        if (v1) {
          goto LABEL_92;
        }
        if (v71 < v70) {
          BUG();
        }
        if (v86 > *((void *)v94 + 2)) {
          BUG();
        }
        uint64_t v72 = &v91[v68];
        *(void *)uint64_t v72 = v70;
        *((void *)v72 + 1) = v71;
        uint64_t v73 = *((void *)v94 + 2);
        if (v86 >= v73) {
          BUG();
        }
        unint64_t v7 = v94;
        uint64_t v39 = v73 - 1;
        memmove(v69, v69 + 16, 16 * (v73 - 1 - v86));
        uint64_t v41 = v91;
        *((void *)v94 + 2) = v73 - 1;
        uint64_t v6 = v93;
        if (v73 <= 2) {
          goto LABEL_74;
        }
      }
      unint64_t v47 = 16 * v39;
      uint64_t v48 = *(void *)&v41[16 * v39 - 56];
      uint64_t v44 = __OFSUB__(v48, *(void *)&v41[16 * v39 - 64]);
      uint64_t v49 = v48 - *(void *)&v41[16 * v39 - 64];
      if (v44) {
        BUG();
      }
      uint64_t v50 = *(void *)&v41[v47 - 40];
      uint64_t v44 = __OFSUB__(v50, *(void *)&v41[v47 - 48]);
      uint64_t v45 = v50 - *(void *)&v41[v47 - 48];
      uint64_t v46 = v44;
      if (v44) {
        BUG();
      }
      BOOL v51 = v39 - 2;
      uint64_t v52 = 16 * (v39 - 2);
      uint64_t v53 = *(void *)&v41[v52 + 8];
      uint64_t v44 = __OFSUB__(v53, *(void *)&v41[v52]);
      uint64_t v54 = v53 - *(void *)&v41[v52];
      if (v44) {
        BUG();
      }
      uint64_t v44 = __OFADD__(v45, v54);
      uint64_t v55 = v45 + v54;
      if (v44) {
        BUG();
      }
      if (v55 >= v49)
      {
        uint64_t v66 = *(void *)&v41[16 * v42 + 8];
        uint64_t v44 = __OFSUB__(v66, *(void *)&v41[16 * v42]);
        unint64_t v67 = v66 - *(void *)&v41[16 * v42];
        if (v44) {
          BUG();
        }
        if (v45 >= v67) {
          BOOL v51 = v39 - 1;
        }
        unint64_t v42 = v51;
        goto LABEL_65;
      }
      goto LABEL_48;
    }
    unint64_t v7 = (char *)_swiftEmptyArrayStorage;
    uint64_t v39 = _swiftEmptyArrayStorage[2];
LABEL_80:
    id v94 = v7;
    if (v39 < 2)
    {
LABEL_95:
      swift_bridgeObjectRelease((_BYTE)v94);
      if (v90 < -1) {
        BUG();
      }
      v85[2] = 0;
      swift_bridgeObjectRelease((_BYTE)v85);
    }
    else
    {
      id v75 = *a1;
      id v89 = *a1;
      while (1)
      {
        uint64_t v76 = v39 - 2;
        if (v39 < 2) {
          BUG();
        }
        if (!v75) {
          BUG();
        }
        unint64_t v77 = 16 * v76;
        uint64_t v78 = 16 * (v39 - 1);
        uint64_t v92 = *(void *)&v94[16 * v76 + 32];
        uint64_t v87 = *(void *)&v94[v78 + 40];
        specialized _merge<A>(low:mid:high:buffer:by:)((char *)(v75 + 56 * v92), (char *)(v75 + 56 * *(void *)&v94[v78 + 32]), v75 + 56 * v87, v84);
        if (v1) {
          break;
        }
        if (v87 < v92) {
          BUG();
        }
        if (!swift_isUniquelyReferenced_nonNull_native(v94)) {
          id v94 = specialized _ArrayBuffer._consumeAndCreateNew()((uint64_t)v94);
        }
        if (v76 >= *((void *)v94 + 2)) {
          BUG();
        }
        *(void *)&v94[v77 + 32] = v92;
        *(void *)&v94[v77 + 40] = v87;
        uint64_t v79 = *((void *)v94 + 2);
        if (v39 > v79) {
          BUG();
        }
        memmove(&v94[v78 + 32], &v94[16 * v39 + 32], 16 * (v79 - v39));
        *((void *)v94 + 2) = v79 - 1;
        uint64_t v39 = v79 - 1;
        id v75 = v89;
        if (v79 <= 2) {
          goto LABEL_95;
        }
      }
LABEL_92:
      swift_bridgeObjectRelease((_BYTE)v94);
      if (v90 < -1) {
        BUG();
      }
      v85[2] = 0;
      swift_bridgeObjectRelease((_BYTE)v85);
    }
  }
}

{
  uint64_t v1;
  Swift::Int v2;
  Swift::Int v3;
  Swift::Int v4;
  char *v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  double v11;
  uint64_t v12;
  double v13;
  double *v14;
  double v15;
  double v16;
  uint64_t v17;
  uint64_t *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  double *v24;
  double v25;
  uint64_t v26;
  double *v27;
  double v28;
  unint64_t v29;
  unint64_t v30;
  uint64_t v31;
  char *v32;
  unint64_t v33;
  uint64_t v34;
  BOOL v35;
  uint64_t v36;
  BOOL v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  unint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  unint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  BOOL v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  char *v60;
  uint64_t v61;
  uint64_t v62;
  char *v63;
  unint64_t v64;
  char *v65;
  uint64_t v66;
  unint64_t v67;
  uint64_t v68;
  uint64_t v69;
  unint64_t v70;
  Swift::Int v71;
  uint64_t v73;
  uint64_t v74;
  char *v75;
  void *v76;
  unint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  char *v82;
  uint64_t v83;
  uint64_t v84;
  char *v85;

  Swift::Int v2 = a1[1];
  Swift::Int v3 = _minimumMergeRunLength(_:)(v2);
  if (v3 >= v2)
  {
    if (v2 < 0) {
      BUG();
    }
    if (v2) {
      specialized MutableCollection<>._insertionSort(within:sortedEnd:by:)(0, v2, 1, a1);
    }
  }
  else
  {
    Swift::Int v4 = v3;
    uint64_t v76 = specialized static Array._allocateUninitialized(_:)(v2 / 2);
    id v75 = v5;
    uint64_t v81 = v2;
    if (v2 > 0)
    {
      Swift::Int v71 = v4;
      uint64_t v6 = *a1;
      uint64_t v73 = *a1 + 40;
      id v74 = *a1 - 16;
      unint64_t v7 = (char *)_swiftEmptyArrayStorage;
      uint64_t v8 = 0;
      uint64_t v9 = v81;
      uint64_t v84 = *a1;
      while (1)
      {
        uint64_t v10 = v8 + 1;
        if (v8 + 1 < v9)
        {
          uint64_t v11 = *(double *)(v6 + 16 * v10 + 8);
          uint64_t v12 = 16 * v8;
          uint64_t v13 = *(double *)(v6 + 16 * v8 + 8);
          uint64_t v10 = v8 + 2;
          if (v8 + 2 < v9)
          {
            __m128 v14 = (double *)(v12 + v73);
            uint64_t v15 = v11;
            while (1)
            {
              uint64_t v16 = v15;
              uint64_t v15 = *v14;
              if (v13 > v11 == v16 <= *v14) {
                break;
              }
              ++v10;
              v14 += 2;
              if (v10 >= v9)
              {
                uint64_t v10 = v9;
                break;
              }
            }
          }
          if (v13 > v11)
          {
            if (v10 < v8) {
              BUG();
            }
            if (v10 > v8)
            {
              uint64_t v17 = v74 + 16 * v10;
              uint64_t v18 = (uint64_t *)(v6 + v12);
              uint64_t v19 = v10;
              uint64_t v20 = v8;
              do
              {
                if (v20 != --v19)
                {
                  if (!v6) {
                    BUG();
                  }
                  uint64_t v21 = *v18;
                  uint64_t v22 = v18[1];
                  *(_OWORD *)uint64_t v18 = *(_OWORD *)v17;
                  *(void *)uint64_t v17 = v21;
                  *(void *)(v17 + 8) = v22;
                }
                ++v20;
                v17 -= 16;
                v18 += 2;
              }
              while (v20 < v19);
            }
          }
        }
        if (v10 < v9)
        {
          if (__OFSUB__(v10, v8)) {
            BUG();
          }
          if (v10 - v8 < v71)
          {
            uint64_t v23 = v71 + v8;
            if (__OFADD__(v71, v8)) {
              BUG();
            }
            if (v23 >= v9) {
              uint64_t v23 = v9;
            }
            if (v23 < v8) {
              BUG();
            }
            if (v10 != v23)
            {
              uint64_t v24 = (double *)(v6 + 16 * v10);
              do
              {
                uint64_t v25 = *(double *)(v6 + 16 * v10 + 8);
                uint64_t v26 = v8;
                uint64_t v27 = v24;
                do
                {
                  if (*(v27 - 1) <= v25) {
                    break;
                  }
                  if (!v6) {
                    BUG();
                  }
                  uint64_t v28 = *v27;
                  *(_OWORD *)uint64_t v27 = *((_OWORD *)v27 - 1);
                  *(v27 - 2) = v28;
                  *(v27 - 1) = v25;
                  ++v26;
                  v27 -= 2;
                }
                while (v10 != v26);
                ++v10;
                v24 += 2;
              }
              while (v10 != v23);
              uint64_t v10 = v23;
            }
          }
        }
        if (v10 < v8) {
          BUG();
        }
        uint64_t v79 = v10;
        if (!swift_isUniquelyReferenced_nonNull_native(v7)) {
          unint64_t v7 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *((void *)v7 + 2) + 1, 1, v7);
        }
        unint64_t v29 = *((void *)v7 + 2);
        unint64_t v30 = v29 + 1;
        uint64_t v6 = v84;
        if (*((void *)v7 + 3) >> 1 <= v29)
        {
          uint64_t v65 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(*((void *)v7 + 3) >= 2uLL, v29 + 1, 1, v7);
          uint64_t v6 = v84;
          unint64_t v7 = v65;
        }
        *((void *)v7 + 2) = v30;
        uint64_t v31 = 16 * v29;
        *(void *)&v7[v31 + 32] = v8;
        *(void *)&v7[v31 + 40] = v79;
        if (v29) {
          break;
        }
        unint64_t v30 = 1;
LABEL_74:
        uint64_t v9 = v81;
        uint64_t v8 = v79;
        if (v79 >= v81) {
          goto LABEL_80;
        }
      }
      uint64_t v32 = v7 + 32;
      uint64_t v85 = v7;
      id v82 = v7 + 32;
      while (1)
      {
        unint64_t v33 = v30 - 1;
        if (v30 >= 4) {
          break;
        }
        if (v30 == 3)
        {
          uint64_t v34 = *((void *)v7 + 5);
          BOOL v35 = __OFSUB__(v34, *((void *)v7 + 4));
          uint64_t v36 = v34 - *((void *)v7 + 4);
          BOOL v37 = v35;
LABEL_48:
          if (v37) {
            BUG();
          }
          unint64_t v47 = v30 - 2;
          uint64_t v48 = 16 * (v30 - 2);
          uint64_t v49 = *(void *)&v32[v48 + 8];
          BOOL v35 = __OFSUB__(v49, *(void *)&v32[v48]);
          uint64_t v50 = v49 - *(void *)&v32[v48];
          BOOL v51 = v35;
          if (v35) {
            BUG();
          }
          uint64_t v52 = *(void *)&v32[16 * v33 + 8];
          BOOL v35 = __OFSUB__(v52, *(void *)&v32[16 * v33]);
          uint64_t v53 = v52 - *(void *)&v32[16 * v33];
          if (v35) {
            BUG();
          }
          if (__OFADD__(v53, v50)) {
            BUG();
          }
          if (v53 + v50 >= v36)
          {
            if (v36 >= v53) {
              unint64_t v47 = v30 - 1;
            }
            unint64_t v33 = v47;
            goto LABEL_65;
          }
          goto LABEL_57;
        }
        uint64_t v54 = *((void *)v7 + 5);
        BOOL v35 = __OFSUB__(v54, *((void *)v7 + 4));
        uint64_t v50 = v54 - *((void *)v7 + 4);
        BOOL v51 = v35;
LABEL_57:
        if (v51) {
          BUG();
        }
        uint64_t v55 = *(void *)&v32[16 * v33 + 8];
        BOOL v35 = __OFSUB__(v55, *(void *)&v32[16 * v33]);
        uint64_t v56 = v55 - *(void *)&v32[16 * v33];
        if (v35) {
          BUG();
        }
        if (v56 < v50) {
          goto LABEL_74;
        }
LABEL_65:
        if (v33 - 1 >= v30) {
          BUG();
        }
        if (!v6) {
          BUG();
        }
        uint64_t v59 = 16 * (v33 - 1);
        unint64_t v77 = v33;
        float v60 = &v32[16 * v33];
        uint64_t v61 = *(void *)&v32[v59];
        uint64_t v62 = *((void *)v60 + 1);
        specialized _merge<A>(low:mid:high:buffer:by:)((char *)(v6 + 16 * v61), (char *)(v6 + 16 * *(void *)v60), v6 + 16 * v62, v75);
        if (v1) {
          goto LABEL_92;
        }
        if (v62 < v61) {
          BUG();
        }
        if (v77 > *((void *)v85 + 2)) {
          BUG();
        }
        uint64_t v63 = &v82[v59];
        *(void *)uint64_t v63 = v61;
        *((void *)v63 + 1) = v62;
        unint64_t v64 = *((void *)v85 + 2);
        if (v77 >= v64) {
          BUG();
        }
        unint64_t v7 = v85;
        unint64_t v30 = v64 - 1;
        memmove(v60, v60 + 16, 16 * (v64 - 1 - v77));
        uint64_t v32 = v82;
        *((void *)v85 + 2) = v64 - 1;
        uint64_t v6 = v84;
        if (v64 <= 2) {
          goto LABEL_74;
        }
      }
      uint64_t v38 = 16 * v30;
      uint64_t v39 = *(void *)&v32[16 * v30 - 56];
      BOOL v35 = __OFSUB__(v39, *(void *)&v32[16 * v30 - 64]);
      uint64_t v40 = v39 - *(void *)&v32[16 * v30 - 64];
      if (v35) {
        BUG();
      }
      uint64_t v41 = *(void *)&v32[v38 - 40];
      BOOL v35 = __OFSUB__(v41, *(void *)&v32[v38 - 48]);
      uint64_t v36 = v41 - *(void *)&v32[v38 - 48];
      BOOL v37 = v35;
      if (v35) {
        BUG();
      }
      unint64_t v42 = v30 - 2;
      uint64_t v43 = 16 * (v30 - 2);
      uint64_t v44 = *(void *)&v32[v43 + 8];
      BOOL v35 = __OFSUB__(v44, *(void *)&v32[v43]);
      uint64_t v45 = v44 - *(void *)&v32[v43];
      if (v35) {
        BUG();
      }
      BOOL v35 = __OFADD__(v36, v45);
      uint64_t v46 = v36 + v45;
      if (v35) {
        BUG();
      }
      if (v46 >= v40)
      {
        uint64_t v57 = *(void *)&v32[16 * v33 + 8];
        BOOL v35 = __OFSUB__(v57, *(void *)&v32[16 * v33]);
        uint64_t v58 = v57 - *(void *)&v32[16 * v33];
        if (v35) {
          BUG();
        }
        if (v36 >= v58) {
          unint64_t v42 = v30 - 1;
        }
        unint64_t v33 = v42;
        goto LABEL_65;
      }
      goto LABEL_48;
    }
    unint64_t v7 = (char *)_swiftEmptyArrayStorage;
    unint64_t v30 = _swiftEmptyArrayStorage[2];
LABEL_80:
    uint64_t v85 = v7;
    if (v30 < 2)
    {
LABEL_95:
      swift_bridgeObjectRelease((_BYTE)v85);
      if (v81 < -1) {
        BUG();
      }
      v76[2] = 0;
      swift_bridgeObjectRelease((_BYTE)v76);
    }
    else
    {
      uint64_t v66 = *a1;
      uint64_t v80 = *a1;
      while (1)
      {
        unint64_t v67 = v30 - 2;
        if (v30 < 2) {
          BUG();
        }
        if (!v66) {
          BUG();
        }
        uint64_t v68 = 16 * v67;
        uint64_t v69 = 16 * (v30 - 1);
        uint64_t v83 = *(void *)&v85[16 * v67 + 32];
        uint64_t v78 = *(void *)&v85[v69 + 40];
        specialized _merge<A>(low:mid:high:buffer:by:)((char *)(v66 + 16 * v83), (char *)(v66 + 16 * *(void *)&v85[v69 + 32]), v66 + 16 * v78, v75);
        if (v1) {
          break;
        }
        if (v78 < v83) {
          BUG();
        }
        if (!swift_isUniquelyReferenced_nonNull_native(v85)) {
          uint64_t v85 = specialized _ArrayBuffer._consumeAndCreateNew()((uint64_t)v85);
        }
        if (v67 >= *((void *)v85 + 2)) {
          BUG();
        }
        *(void *)&v85[v68 + 32] = v83;
        *(void *)&v85[v68 + 40] = v78;
        unint64_t v70 = *((void *)v85 + 2);
        if (v30 > v70) {
          BUG();
        }
        memmove(&v85[v69 + 32], &v85[16 * v30 + 32], 16 * (v70 - v30));
        *((void *)v85 + 2) = v70 - 1;
        unint64_t v30 = v70 - 1;
        uint64_t v66 = v80;
        if (v70 <= 2) {
          goto LABEL_95;
        }
      }
LABEL_92:
      swift_bridgeObjectRelease((_BYTE)v85);
      if (v81 < -1) {
        BUG();
      }
      v76[2] = 0;
      swift_bridgeObjectRelease((_BYTE)v76);
    }
  }
}

{
  uint64_t v1;
  Swift::Int v2;
  Swift::Int v3;
  Swift::Int v4;
  char *v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  unint64_t v30;
  uint64_t v31;
  char *v32;
  unint64_t v33;
  uint64_t v34;
  BOOL v35;
  uint64_t v36;
  BOOL v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  unint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  unint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  BOOL v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  char *v60;
  uint64_t v61;
  uint64_t v62;
  char *v63;
  unint64_t v64;
  char *v65;
  uint64_t v66;
  unint64_t v67;
  uint64_t v68;
  uint64_t v69;
  unint64_t v70;
  Swift::Int v71;
  uint64_t v73;
  char *v74;
  void *v75;
  uint64_t v76;
  unint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  char *v82;
  uint64_t v83;
  uint64_t v84;
  char *v85;

  Swift::Int v2 = a1[1];
  Swift::Int v3 = _minimumMergeRunLength(_:)(v2);
  if (v3 >= v2)
  {
    if (v2 < 0) {
      BUG();
    }
    if (v2) {
      specialized MutableCollection<>._insertionSort(within:sortedEnd:by:)(0, v2, 1, a1);
    }
  }
  else
  {
    Swift::Int v4 = v3;
    id v75 = specialized static Array._allocateUninitialized(_:)(v2 / 2);
    id v74 = v5;
    uint64_t v81 = v2;
    if (v2 > 0)
    {
      Swift::Int v71 = v4;
      uint64_t v6 = *a1;
      uint64_t v73 = *a1 + 32;
      uint64_t v76 = *a1 - 16;
      unint64_t v7 = (char *)_swiftEmptyArrayStorage;
      uint64_t v8 = 0;
      uint64_t v9 = v81;
      uint64_t v84 = *a1;
      while (1)
      {
        uint64_t v10 = v8 + 1;
        if (v8 + 1 < v9)
        {
          uint64_t v11 = *(void *)(v6 + 16 * v10);
          uint64_t v12 = 16 * v8;
          uint64_t v13 = *(void *)(v6 + 16 * v8);
          uint64_t v10 = v8 + 2;
          if (v8 + 2 < v9)
          {
            __m128 v14 = (uint64_t *)(v12 + v73);
            uint64_t v15 = v11;
            while (1)
            {
              uint64_t v16 = v15;
              uint64_t v15 = *v14;
              if (v11 < v13 == *v14 >= v16) {
                break;
              }
              ++v10;
              v14 += 2;
              if (v10 >= v9)
              {
                uint64_t v10 = v9;
                break;
              }
            }
          }
          if (v11 < v13)
          {
            if (v10 < v8) {
              BUG();
            }
            if (v10 > v8)
            {
              uint64_t v17 = v76 + 16 * v10;
              uint64_t v18 = (uint64_t *)(v6 + v12);
              uint64_t v19 = v10;
              uint64_t v20 = v8;
              do
              {
                if (v20 != --v19)
                {
                  if (!v6) {
                    BUG();
                  }
                  uint64_t v21 = *v18;
                  uint64_t v22 = v18[1];
                  *(_OWORD *)uint64_t v18 = *(_OWORD *)v17;
                  *(void *)uint64_t v17 = v21;
                  *(void *)(v17 + 8) = v22;
                }
                ++v20;
                v17 -= 16;
                v18 += 2;
              }
              while (v20 < v19);
            }
          }
        }
        if (v10 < v9)
        {
          if (__OFSUB__(v10, v8)) {
            BUG();
          }
          if (v10 - v8 < v71)
          {
            uint64_t v23 = v71 + v8;
            if (__OFADD__(v71, v8)) {
              BUG();
            }
            if (v23 >= v9) {
              uint64_t v23 = v9;
            }
            if (v23 < v8) {
              BUG();
            }
            if (v10 != v23)
            {
              uint64_t v24 = v76 + 16 * v10;
              do
              {
                uint64_t v25 = *(void *)(v6 + 16 * v10);
                uint64_t v26 = v8;
                uint64_t v27 = v24;
                do
                {
                  if (v25 >= *(void *)v27) {
                    break;
                  }
                  if (!v6) {
                    BUG();
                  }
                  uint64_t v28 = *(void *)(v27 + 24);
                  *(_OWORD *)(v27 + 16) = *(_OWORD *)v27;
                  *(void *)uint64_t v27 = v25;
                  *(void *)(v27 + 8) = v28;
                  v27 -= 16;
                  ++v26;
                }
                while (v10 != v26);
                ++v10;
                v24 += 16;
              }
              while (v10 != v23);
              uint64_t v10 = v23;
            }
          }
        }
        if (v10 < v8) {
          BUG();
        }
        uint64_t v79 = v10;
        if (!swift_isUniquelyReferenced_nonNull_native(v7)) {
          unint64_t v7 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *((void *)v7 + 2) + 1, 1, v7);
        }
        unint64_t v29 = *((void *)v7 + 2);
        unint64_t v30 = v29 + 1;
        uint64_t v6 = v84;
        if (*((void *)v7 + 3) >> 1 <= v29)
        {
          uint64_t v65 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(*((void *)v7 + 3) >= 2uLL, v29 + 1, 1, v7);
          uint64_t v6 = v84;
          unint64_t v7 = v65;
        }
        *((void *)v7 + 2) = v30;
        uint64_t v31 = 16 * v29;
        *(void *)&v7[v31 + 32] = v8;
        *(void *)&v7[v31 + 40] = v79;
        if (v29) {
          break;
        }
        unint64_t v30 = 1;
LABEL_74:
        uint64_t v9 = v81;
        uint64_t v8 = v79;
        if (v79 >= v81) {
          goto LABEL_80;
        }
      }
      uint64_t v32 = v7 + 32;
      uint64_t v85 = v7;
      id v82 = v7 + 32;
      while (1)
      {
        unint64_t v33 = v30 - 1;
        if (v30 >= 4) {
          break;
        }
        if (v30 == 3)
        {
          uint64_t v34 = *((void *)v7 + 5);
          BOOL v35 = __OFSUB__(v34, *((void *)v7 + 4));
          uint64_t v36 = v34 - *((void *)v7 + 4);
          BOOL v37 = v35;
LABEL_48:
          if (v37) {
            BUG();
          }
          unint64_t v47 = v30 - 2;
          uint64_t v48 = 16 * (v30 - 2);
          uint64_t v49 = *(void *)&v32[v48 + 8];
          BOOL v35 = __OFSUB__(v49, *(void *)&v32[v48]);
          uint64_t v50 = v49 - *(void *)&v32[v48];
          BOOL v51 = v35;
          if (v35) {
            BUG();
          }
          uint64_t v52 = *(void *)&v32[16 * v33 + 8];
          BOOL v35 = __OFSUB__(v52, *(void *)&v32[16 * v33]);
          uint64_t v53 = v52 - *(void *)&v32[16 * v33];
          if (v35) {
            BUG();
          }
          if (__OFADD__(v53, v50)) {
            BUG();
          }
          if (v53 + v50 >= v36)
          {
            if (v36 >= v53) {
              unint64_t v47 = v30 - 1;
            }
            unint64_t v33 = v47;
            goto LABEL_65;
          }
          goto LABEL_57;
        }
        uint64_t v54 = *((void *)v7 + 5);
        BOOL v35 = __OFSUB__(v54, *((void *)v7 + 4));
        uint64_t v50 = v54 - *((void *)v7 + 4);
        BOOL v51 = v35;
LABEL_57:
        if (v51) {
          BUG();
        }
        uint64_t v55 = *(void *)&v32[16 * v33 + 8];
        BOOL v35 = __OFSUB__(v55, *(void *)&v32[16 * v33]);
        uint64_t v56 = v55 - *(void *)&v32[16 * v33];
        if (v35) {
          BUG();
        }
        if (v56 < v50) {
          goto LABEL_74;
        }
LABEL_65:
        if (v33 - 1 >= v30) {
          BUG();
        }
        if (!v6) {
          BUG();
        }
        uint64_t v59 = 16 * (v33 - 1);
        unint64_t v77 = v33;
        float v60 = &v32[16 * v33];
        uint64_t v61 = *(void *)&v32[v59];
        uint64_t v62 = *((void *)v60 + 1);
        specialized _merge<A>(low:mid:high:buffer:by:)((char *)(v6 + 16 * v61), (char *)(v6 + 16 * *(void *)v60), v6 + 16 * v62, v74);
        if (v1) {
          goto LABEL_92;
        }
        if (v62 < v61) {
          BUG();
        }
        if (v77 > *((void *)v85 + 2)) {
          BUG();
        }
        uint64_t v63 = &v82[v59];
        *(void *)uint64_t v63 = v61;
        *((void *)v63 + 1) = v62;
        unint64_t v64 = *((void *)v85 + 2);
        if (v77 >= v64) {
          BUG();
        }
        unint64_t v7 = v85;
        unint64_t v30 = v64 - 1;
        memmove(v60, v60 + 16, 16 * (v64 - 1 - v77));
        uint64_t v32 = v82;
        *((void *)v85 + 2) = v64 - 1;
        uint64_t v6 = v84;
        if (v64 <= 2) {
          goto LABEL_74;
        }
      }
      uint64_t v38 = 16 * v30;
      uint64_t v39 = *(void *)&v32[16 * v30 - 56];
      BOOL v35 = __OFSUB__(v39, *(void *)&v32[16 * v30 - 64]);
      uint64_t v40 = v39 - *(void *)&v32[16 * v30 - 64];
      if (v35) {
        BUG();
      }
      uint64_t v41 = *(void *)&v32[v38 - 40];
      BOOL v35 = __OFSUB__(v41, *(void *)&v32[v38 - 48]);
      uint64_t v36 = v41 - *(void *)&v32[v38 - 48];
      BOOL v37 = v35;
      if (v35) {
        BUG();
      }
      unint64_t v42 = v30 - 2;
      uint64_t v43 = 16 * (v30 - 2);
      uint64_t v44 = *(void *)&v32[v43 + 8];
      BOOL v35 = __OFSUB__(v44, *(void *)&v32[v43]);
      uint64_t v45 = v44 - *(void *)&v32[v43];
      if (v35) {
        BUG();
      }
      BOOL v35 = __OFADD__(v36, v45);
      uint64_t v46 = v36 + v45;
      if (v35) {
        BUG();
      }
      if (v46 >= v40)
      {
        uint64_t v57 = *(void *)&v32[16 * v33 + 8];
        BOOL v35 = __OFSUB__(v57, *(void *)&v32[16 * v33]);
        uint64_t v58 = v57 - *(void *)&v32[16 * v33];
        if (v35) {
          BUG();
        }
        if (v36 >= v58) {
          unint64_t v42 = v30 - 1;
        }
        unint64_t v33 = v42;
        goto LABEL_65;
      }
      goto LABEL_48;
    }
    unint64_t v7 = (char *)_swiftEmptyArrayStorage;
    unint64_t v30 = _swiftEmptyArrayStorage[2];
LABEL_80:
    uint64_t v85 = v7;
    if (v30 < 2)
    {
LABEL_95:
      swift_bridgeObjectRelease((_BYTE)v85);
      if (v81 < -1) {
        BUG();
      }
      _OWORD v75[2] = 0;
      swift_bridgeObjectRelease((_BYTE)v75);
    }
    else
    {
      uint64_t v66 = *a1;
      uint64_t v80 = *a1;
      while (1)
      {
        unint64_t v67 = v30 - 2;
        if (v30 < 2) {
          BUG();
        }
        if (!v66) {
          BUG();
        }
        uint64_t v68 = 16 * v67;
        uint64_t v69 = 16 * (v30 - 1);
        uint64_t v83 = *(void *)&v85[16 * v67 + 32];
        uint64_t v78 = *(void *)&v85[v69 + 40];
        specialized _merge<A>(low:mid:high:buffer:by:)((char *)(v66 + 16 * v83), (char *)(v66 + 16 * *(void *)&v85[v69 + 32]), v66 + 16 * v78, v74);
        if (v1) {
          break;
        }
        if (v78 < v83) {
          BUG();
        }
        if (!swift_isUniquelyReferenced_nonNull_native(v85)) {
          uint64_t v85 = specialized _ArrayBuffer._consumeAndCreateNew()((uint64_t)v85);
        }
        if (v67 >= *((void *)v85 + 2)) {
          BUG();
        }
        *(void *)&v85[v68 + 32] = v83;
        *(void *)&v85[v68 + 40] = v78;
        unint64_t v70 = *((void *)v85 + 2);
        if (v30 > v70) {
          BUG();
        }
        memmove(&v85[v69 + 32], &v85[16 * v30 + 32], 16 * (v70 - v30));
        *((void *)v85 + 2) = v70 - 1;
        unint64_t v30 = v70 - 1;
        uint64_t v66 = v80;
        if (v70 <= 2) {
          goto LABEL_95;
        }
      }
LABEL_92:
      swift_bridgeObjectRelease((_BYTE)v85);
      if (v81 < -1) {
        BUG();
      }
      _OWORD v75[2] = 0;
      swift_bridgeObjectRelease((_BYTE)v75);
    }
  }
}

{
  uint64_t v1;
  Swift::Int v2;
  Swift::Int v3;
  Swift::Int v4;
  char *v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  double v11;
  uint64_t v12;
  double v13;
  double *v14;
  double v15;
  double v16;
  uint64_t v17;
  uint64_t *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  double *v24;
  double v25;
  uint64_t v26;
  double *v27;
  double v28;
  unint64_t v29;
  unint64_t v30;
  uint64_t v31;
  char *v32;
  unint64_t v33;
  uint64_t v34;
  BOOL v35;
  uint64_t v36;
  BOOL v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  unint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  unint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  BOOL v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  char *v60;
  uint64_t v61;
  uint64_t v62;
  char *v63;
  unint64_t v64;
  char *v65;
  uint64_t v66;
  unint64_t v67;
  uint64_t v68;
  uint64_t v69;
  unint64_t v70;
  Swift::Int v71;
  uint64_t v73;
  uint64_t v74;
  char *v75;
  void *v76;
  unint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  char *v82;
  uint64_t v83;
  uint64_t v84;
  char *v85;

  Swift::Int v2 = a1[1];
  Swift::Int v3 = _minimumMergeRunLength(_:)(v2);
  if (v3 >= v2)
  {
    if (v2 < 0) {
      BUG();
    }
    if (v2) {
      specialized MutableCollection<>._insertionSort(within:sortedEnd:by:)(0, v2, 1, a1);
    }
  }
  else
  {
    Swift::Int v4 = v3;
    uint64_t v76 = specialized static Array._allocateUninitialized(_:)(v2 / 2);
    id v75 = v5;
    uint64_t v81 = v2;
    if (v2 > 0)
    {
      Swift::Int v71 = v4;
      uint64_t v6 = *a1;
      uint64_t v73 = *a1 + 40;
      id v74 = *a1 - 16;
      unint64_t v7 = (char *)_swiftEmptyArrayStorage;
      uint64_t v8 = 0;
      uint64_t v9 = v81;
      uint64_t v84 = *a1;
      while (1)
      {
        uint64_t v10 = v8 + 1;
        if (v8 + 1 < v9)
        {
          uint64_t v11 = *(double *)(v6 + 16 * v10 + 8);
          uint64_t v12 = 16 * v8;
          uint64_t v13 = *(double *)(v6 + 16 * v8 + 8);
          uint64_t v10 = v8 + 2;
          if (v8 + 2 < v9)
          {
            __m128 v14 = (double *)(v12 + v73);
            uint64_t v15 = v11;
            while (1)
            {
              uint64_t v16 = v15;
              uint64_t v15 = *v14;
              if (v11 > v13 == *v14 <= v16) {
                break;
              }
              ++v10;
              v14 += 2;
              if (v10 >= v9)
              {
                uint64_t v10 = v9;
                break;
              }
            }
          }
          if (v11 > v13)
          {
            if (v10 < v8) {
              BUG();
            }
            if (v10 > v8)
            {
              uint64_t v17 = v74 + 16 * v10;
              uint64_t v18 = (uint64_t *)(v6 + v12);
              uint64_t v19 = v10;
              uint64_t v20 = v8;
              do
              {
                if (v20 != --v19)
                {
                  if (!v6) {
                    BUG();
                  }
                  uint64_t v21 = *v18;
                  uint64_t v22 = v18[1];
                  *(_OWORD *)uint64_t v18 = *(_OWORD *)v17;
                  *(void *)uint64_t v17 = v21;
                  *(void *)(v17 + 8) = v22;
                }
                ++v20;
                v17 -= 16;
                v18 += 2;
              }
              while (v20 < v19);
            }
          }
        }
        if (v10 < v9)
        {
          if (__OFSUB__(v10, v8)) {
            BUG();
          }
          if (v10 - v8 < v71)
          {
            uint64_t v23 = v71 + v8;
            if (__OFADD__(v71, v8)) {
              BUG();
            }
            if (v23 >= v9) {
              uint64_t v23 = v9;
            }
            if (v23 < v8) {
              BUG();
            }
            if (v10 != v23)
            {
              uint64_t v24 = (double *)(v6 + 16 * v10);
              do
              {
                uint64_t v25 = *(double *)(v6 + 16 * v10 + 8);
                uint64_t v26 = v8;
                uint64_t v27 = v24;
                do
                {
                  if (v25 <= *(v27 - 1)) {
                    break;
                  }
                  if (!v6) {
                    BUG();
                  }
                  uint64_t v28 = *v27;
                  *(_OWORD *)uint64_t v27 = *((_OWORD *)v27 - 1);
                  *(v27 - 2) = v28;
                  *(v27 - 1) = v25;
                  ++v26;
                  v27 -= 2;
                }
                while (v10 != v26);
                ++v10;
                v24 += 2;
              }
              while (v10 != v23);
              uint64_t v10 = v23;
            }
          }
        }
        if (v10 < v8) {
          BUG();
        }
        uint64_t v79 = v10;
        if (!swift_isUniquelyReferenced_nonNull_native(v7)) {
          unint64_t v7 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *((void *)v7 + 2) + 1, 1, v7);
        }
        unint64_t v29 = *((void *)v7 + 2);
        unint64_t v30 = v29 + 1;
        uint64_t v6 = v84;
        if (*((void *)v7 + 3) >> 1 <= v29)
        {
          uint64_t v65 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(*((void *)v7 + 3) >= 2uLL, v29 + 1, 1, v7);
          uint64_t v6 = v84;
          unint64_t v7 = v65;
        }
        *((void *)v7 + 2) = v30;
        uint64_t v31 = 16 * v29;
        *(void *)&v7[v31 + 32] = v8;
        *(void *)&v7[v31 + 40] = v79;
        if (v29) {
          break;
        }
        unint64_t v30 = 1;
LABEL_74:
        uint64_t v9 = v81;
        uint64_t v8 = v79;
        if (v79 >= v81) {
          goto LABEL_80;
        }
      }
      uint64_t v32 = v7 + 32;
      uint64_t v85 = v7;
      id v82 = v7 + 32;
      while (1)
      {
        unint64_t v33 = v30 - 1;
        if (v30 >= 4) {
          break;
        }
        if (v30 == 3)
        {
          uint64_t v34 = *((void *)v7 + 5);
          BOOL v35 = __OFSUB__(v34, *((void *)v7 + 4));
          uint64_t v36 = v34 - *((void *)v7 + 4);
          BOOL v37 = v35;
LABEL_48:
          if (v37) {
            BUG();
          }
          unint64_t v47 = v30 - 2;
          uint64_t v48 = 16 * (v30 - 2);
          uint64_t v49 = *(void *)&v32[v48 + 8];
          BOOL v35 = __OFSUB__(v49, *(void *)&v32[v48]);
          uint64_t v50 = v49 - *(void *)&v32[v48];
          BOOL v51 = v35;
          if (v35) {
            BUG();
          }
          uint64_t v52 = *(void *)&v32[16 * v33 + 8];
          BOOL v35 = __OFSUB__(v52, *(void *)&v32[16 * v33]);
          uint64_t v53 = v52 - *(void *)&v32[16 * v33];
          if (v35) {
            BUG();
          }
          if (__OFADD__(v53, v50)) {
            BUG();
          }
          if (v53 + v50 >= v36)
          {
            if (v36 >= v53) {
              unint64_t v47 = v30 - 1;
            }
            unint64_t v33 = v47;
            goto LABEL_65;
          }
          goto LABEL_57;
        }
        uint64_t v54 = *((void *)v7 + 5);
        BOOL v35 = __OFSUB__(v54, *((void *)v7 + 4));
        uint64_t v50 = v54 - *((void *)v7 + 4);
        BOOL v51 = v35;
LABEL_57:
        if (v51) {
          BUG();
        }
        uint64_t v55 = *(void *)&v32[16 * v33 + 8];
        BOOL v35 = __OFSUB__(v55, *(void *)&v32[16 * v33]);
        uint64_t v56 = v55 - *(void *)&v32[16 * v33];
        if (v35) {
          BUG();
        }
        if (v56 < v50) {
          goto LABEL_74;
        }
LABEL_65:
        if (v33 - 1 >= v30) {
          BUG();
        }
        if (!v6) {
          BUG();
        }
        uint64_t v59 = 16 * (v33 - 1);
        unint64_t v77 = v33;
        float v60 = &v32[16 * v33];
        uint64_t v61 = *(void *)&v32[v59];
        uint64_t v62 = *((void *)v60 + 1);
        specialized _merge<A>(low:mid:high:buffer:by:)((char *)(v6 + 16 * v61), (char *)(v6 + 16 * *(void *)v60), v6 + 16 * v62, v75);
        if (v1) {
          goto LABEL_92;
        }
        if (v62 < v61) {
          BUG();
        }
        if (v77 > *((void *)v85 + 2)) {
          BUG();
        }
        uint64_t v63 = &v82[v59];
        *(void *)uint64_t v63 = v61;
        *((void *)v63 + 1) = v62;
        unint64_t v64 = *((void *)v85 + 2);
        if (v77 >= v64) {
          BUG();
        }
        unint64_t v7 = v85;
        unint64_t v30 = v64 - 1;
        memmove(v60, v60 + 16, 16 * (v64 - 1 - v77));
        uint64_t v32 = v82;
        *((void *)v85 + 2) = v64 - 1;
        uint64_t v6 = v84;
        if (v64 <= 2) {
          goto LABEL_74;
        }
      }
      uint64_t v38 = 16 * v30;
      uint64_t v39 = *(void *)&v32[16 * v30 - 56];
      BOOL v35 = __OFSUB__(v39, *(void *)&v32[16 * v30 - 64]);
      uint64_t v40 = v39 - *(void *)&v32[16 * v30 - 64];
      if (v35) {
        BUG();
      }
      uint64_t v41 = *(void *)&v32[v38 - 40];
      BOOL v35 = __OFSUB__(v41, *(void *)&v32[v38 - 48]);
      uint64_t v36 = v41 - *(void *)&v32[v38 - 48];
      BOOL v37 = v35;
      if (v35) {
        BUG();
      }
      unint64_t v42 = v30 - 2;
      uint64_t v43 = 16 * (v30 - 2);
      uint64_t v44 = *(void *)&v32[v43 + 8];
      BOOL v35 = __OFSUB__(v44, *(void *)&v32[v43]);
      uint64_t v45 = v44 - *(void *)&v32[v43];
      if (v35) {
        BUG();
      }
      BOOL v35 = __OFADD__(v36, v45);
      uint64_t v46 = v36 + v45;
      if (v35) {
        BUG();
      }
      if (v46 >= v40)
      {
        uint64_t v57 = *(void *)&v32[16 * v33 + 8];
        BOOL v35 = __OFSUB__(v57, *(void *)&v32[16 * v33]);
        uint64_t v58 = v57 - *(void *)&v32[16 * v33];
        if (v35) {
          BUG();
        }
        if (v36 >= v58) {
          unint64_t v42 = v30 - 1;
        }
        unint64_t v33 = v42;
        goto LABEL_65;
      }
      goto LABEL_48;
    }
    unint64_t v7 = (char *)_swiftEmptyArrayStorage;
    unint64_t v30 = _swiftEmptyArrayStorage[2];
LABEL_80:
    uint64_t v85 = v7;
    if (v30 < 2)
    {
LABEL_95:
      swift_bridgeObjectRelease((_BYTE)v85);
      if (v81 < -1) {
        BUG();
      }
      v76[2] = 0;
      swift_bridgeObjectRelease((_BYTE)v76);
    }
    else
    {
      uint64_t v66 = *a1;
      uint64_t v80 = *a1;
      while (1)
      {
        unint64_t v67 = v30 - 2;
        if (v30 < 2) {
          BUG();
        }
        if (!v66) {
          BUG();
        }
        uint64_t v68 = 16 * v67;
        uint64_t v69 = 16 * (v30 - 1);
        uint64_t v83 = *(void *)&v85[16 * v67 + 32];
        uint64_t v78 = *(void *)&v85[v69 + 40];
        specialized _merge<A>(low:mid:high:buffer:by:)((char *)(v66 + 16 * v83), (char *)(v66 + 16 * *(void *)&v85[v69 + 32]), v66 + 16 * v78, v75);
        if (v1) {
          break;
        }
        if (v78 < v83) {
          BUG();
        }
        if (!swift_isUniquelyReferenced_nonNull_native(v85)) {
          uint64_t v85 = specialized _ArrayBuffer._consumeAndCreateNew()((uint64_t)v85);
        }
        if (v67 >= *((void *)v85 + 2)) {
          BUG();
        }
        *(void *)&v85[v68 + 32] = v83;
        *(void *)&v85[v68 + 40] = v78;
        unint64_t v70 = *((void *)v85 + 2);
        if (v30 > v70) {
          BUG();
        }
        memmove(&v85[v69 + 32], &v85[16 * v30 + 32], 16 * (v70 - v30));
        *((void *)v85 + 2) = v70 - 1;
        unint64_t v30 = v70 - 1;
        uint64_t v66 = v80;
        if (v70 <= 2) {
          goto LABEL_95;
        }
      }
LABEL_92:
      swift_bridgeObjectRelease((_BYTE)v85);
      if (v81 < -1) {
        BUG();
      }
      v76[2] = 0;
      swift_bridgeObjectRelease((_BYTE)v76);
    }
  }
}

{
  uint64_t v1;
  Swift::Int v2;
  Swift::Int v3;
  Swift::Int v4;
  char *v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t v16;
  long long *v17;
  long long *v18;
  uint64_t v19;
  uint64_t v20;
  long long v21;
  uint64_t v22;
  void *v23;
  uint64_t v24;
  uint64_t v25;
  void *v26;
  uint64_t v27;
  unint64_t v28;
  unint64_t v29;
  uint64_t v30;
  char *v31;
  unint64_t v32;
  uint64_t v33;
  BOOL v34;
  uint64_t v35;
  BOOL v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  unint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  unint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  BOOL v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  char *v59;
  uint64_t v60;
  uint64_t v61;
  char *v62;
  unint64_t v63;
  char *v64;
  uint64_t v65;
  unint64_t v66;
  uint64_t v67;
  uint64_t v68;
  unint64_t v69;
  Swift::Int v70;
  uint64_t v72;
  uint64_t v73;
  char *v74;
  void *v75;
  unint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  char *v81;
  uint64_t v82;
  uint64_t v83;
  char *v84;

  Swift::Int v2 = a1[1];
  Swift::Int v3 = _minimumMergeRunLength(_:)(v2);
  if (v3 >= v2)
  {
    if (v2 < 0) {
      BUG();
    }
    if (v2) {
      specialized MutableCollection<>._insertionSort(within:sortedEnd:by:)(0, v2, 1, a1);
    }
  }
  else
  {
    Swift::Int v4 = v3;
    id v75 = specialized static Array._allocateUninitialized(_:)(v2 / 2);
    id v74 = v5;
    uint64_t v80 = v2;
    if (v2 > 0)
    {
      unint64_t v70 = v4;
      uint64_t v6 = *a1;
      uint64_t v72 = *a1 + 40;
      uint64_t v73 = *a1 - 16;
      unint64_t v7 = (char *)_swiftEmptyArrayStorage;
      uint64_t v8 = 0;
      uint64_t v9 = v80;
      uint64_t v83 = *a1;
      while (1)
      {
        uint64_t v10 = v8 + 1;
        if (v8 + 1 < v9)
        {
          uint64_t v11 = *(void *)(v6 + 16 * v10 + 8);
          uint64_t v12 = 16 * v8;
          uint64_t v13 = *(void *)(v6 + 16 * v8 + 8);
          uint64_t v10 = v8 + 2;
          if (v8 + 2 < v9)
          {
            __m128 v14 = (uint64_t *)(v12 + v72);
            uint64_t v15 = v11;
            while (1)
            {
              uint64_t v16 = v15;
              uint64_t v15 = *v14;
              if (v11 < v13 == *v14 >= v16) {
                break;
              }
              ++v10;
              v14 += 2;
              if (v10 >= v9)
              {
                uint64_t v10 = v9;
                break;
              }
            }
          }
          if (v11 < v13)
          {
            if (v10 < v8) {
              BUG();
            }
            if (v10 > v8)
            {
              uint64_t v17 = (long long *)(v73 + 16 * v10);
              uint64_t v18 = (long long *)(v6 + v12);
              uint64_t v19 = v10;
              uint64_t v20 = v8;
              do
              {
                if (v20 != --v19)
                {
                  if (!v6) {
                    BUG();
                  }
                  uint64_t v21 = *v18;
                  uint64_t *v18 = *v17;
                  double *v17 = v21;
                }
                ++v20;
                --v17;
                ++v18;
              }
              while (v20 < v19);
            }
          }
        }
        if (v10 < v9)
        {
          if (__OFSUB__(v10, v8)) {
            BUG();
          }
          if (v10 - v8 < v70)
          {
            uint64_t v22 = v70 + v8;
            if (__OFADD__(v70, v8)) {
              BUG();
            }
            if (v22 >= v9) {
              uint64_t v22 = v9;
            }
            if (v22 < v8) {
              BUG();
            }
            if (v10 != v22)
            {
              uint64_t v23 = (void *)(v6 + 16 * v10);
              do
              {
                uint64_t v24 = *(void *)(v6 + 16 * v10 + 8);
                uint64_t v25 = v8;
                uint64_t v26 = v23;
                do
                {
                  if (v24 >= *(v26 - 1)) {
                    break;
                  }
                  if (!v6) {
                    BUG();
                  }
                  uint64_t v27 = *v26;
                  *(_OWORD *)uint64_t v26 = *((_OWORD *)v26 - 1);
                  *(v26 - 2) = v27;
                  *(v26 - 1) = v24;
                  ++v25;
                  v26 -= 2;
                }
                while (v10 != v25);
                ++v10;
                v23 += 2;
              }
              while (v10 != v22);
              uint64_t v10 = v22;
            }
          }
        }
        if (v10 < v8) {
          BUG();
        }
        uint64_t v78 = v10;
        if (!swift_isUniquelyReferenced_nonNull_native(v7)) {
          unint64_t v7 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *((void *)v7 + 2) + 1, 1, v7);
        }
        uint64_t v28 = *((void *)v7 + 2);
        unint64_t v29 = v28 + 1;
        uint64_t v6 = v83;
        if (*((void *)v7 + 3) >> 1 <= v28)
        {
          unint64_t v64 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(*((void *)v7 + 3) >= 2uLL, v28 + 1, 1, v7);
          uint64_t v6 = v83;
          unint64_t v7 = v64;
        }
        *((void *)v7 + 2) = v29;
        unint64_t v30 = 16 * v28;
        *(void *)&v7[v30 + 32] = v8;
        *(void *)&v7[v30 + 40] = v78;
        if (v28) {
          break;
        }
        unint64_t v29 = 1;
LABEL_74:
        uint64_t v9 = v80;
        uint64_t v8 = v78;
        if (v78 >= v80) {
          goto LABEL_80;
        }
      }
      uint64_t v31 = v7 + 32;
      uint64_t v84 = v7;
      uint64_t v81 = v7 + 32;
      while (1)
      {
        uint64_t v32 = v29 - 1;
        if (v29 >= 4) {
          break;
        }
        if (v29 == 3)
        {
          unint64_t v33 = *((void *)v7 + 5);
          uint64_t v34 = __OFSUB__(v33, *((void *)v7 + 4));
          BOOL v35 = v33 - *((void *)v7 + 4);
          uint64_t v36 = v34;
LABEL_48:
          if (v36) {
            BUG();
          }
          uint64_t v46 = v29 - 2;
          unint64_t v47 = 16 * (v29 - 2);
          uint64_t v48 = *(void *)&v31[v47 + 8];
          uint64_t v34 = __OFSUB__(v48, *(void *)&v31[v47]);
          uint64_t v49 = v48 - *(void *)&v31[v47];
          uint64_t v50 = v34;
          if (v34) {
            BUG();
          }
          BOOL v51 = *(void *)&v31[16 * v32 + 8];
          uint64_t v34 = __OFSUB__(v51, *(void *)&v31[16 * v32]);
          uint64_t v52 = v51 - *(void *)&v31[16 * v32];
          if (v34) {
            BUG();
          }
          if (__OFADD__(v52, v49)) {
            BUG();
          }
          if (v52 + v49 >= v35)
          {
            if (v35 >= v52) {
              uint64_t v46 = v29 - 1;
            }
            uint64_t v32 = v46;
            goto LABEL_65;
          }
          goto LABEL_57;
        }
        uint64_t v53 = *((void *)v7 + 5);
        uint64_t v34 = __OFSUB__(v53, *((void *)v7 + 4));
        uint64_t v49 = v53 - *((void *)v7 + 4);
        uint64_t v50 = v34;
LABEL_57:
        if (v50) {
          BUG();
        }
        uint64_t v54 = *(void *)&v31[16 * v32 + 8];
        uint64_t v34 = __OFSUB__(v54, *(void *)&v31[16 * v32]);
        uint64_t v55 = v54 - *(void *)&v31[16 * v32];
        if (v34) {
          BUG();
        }
        if (v55 < v49) {
          goto LABEL_74;
        }
LABEL_65:
        if (v32 - 1 >= v29) {
          BUG();
        }
        if (!v6) {
          BUG();
        }
        uint64_t v58 = 16 * (v32 - 1);
        uint64_t v76 = v32;
        uint64_t v59 = &v31[16 * v32];
        float v60 = *(void *)&v31[v58];
        uint64_t v61 = *((void *)v59 + 1);
        specialized _merge<A>(low:mid:high:buffer:by:)((char *)(v6 + 16 * v60), (char *)(v6 + 16 * *(void *)v59), v6 + 16 * v61, v74);
        if (v1) {
          goto LABEL_92;
        }
        if (v61 < v60) {
          BUG();
        }
        if (v76 > *((void *)v84 + 2)) {
          BUG();
        }
        uint64_t v62 = &v81[v58];
        *(void *)uint64_t v62 = v60;
        *((void *)v62 + 1) = v61;
        uint64_t v63 = *((void *)v84 + 2);
        if (v76 >= v63) {
          BUG();
        }
        unint64_t v7 = v84;
        unint64_t v29 = v63 - 1;
        memmove(v59, v59 + 16, 16 * (v63 - 1 - v76));
        uint64_t v31 = v81;
        *((void *)v84 + 2) = v63 - 1;
        uint64_t v6 = v83;
        if (v63 <= 2) {
          goto LABEL_74;
        }
      }
      BOOL v37 = 16 * v29;
      uint64_t v38 = *(void *)&v31[16 * v29 - 56];
      uint64_t v34 = __OFSUB__(v38, *(void *)&v31[16 * v29 - 64]);
      uint64_t v39 = v38 - *(void *)&v31[16 * v29 - 64];
      if (v34) {
        BUG();
      }
      uint64_t v40 = *(void *)&v31[v37 - 40];
      uint64_t v34 = __OFSUB__(v40, *(void *)&v31[v37 - 48]);
      BOOL v35 = v40 - *(void *)&v31[v37 - 48];
      uint64_t v36 = v34;
      if (v34) {
        BUG();
      }
      uint64_t v41 = v29 - 2;
      unint64_t v42 = 16 * (v29 - 2);
      uint64_t v43 = *(void *)&v31[v42 + 8];
      uint64_t v34 = __OFSUB__(v43, *(void *)&v31[v42]);
      uint64_t v44 = v43 - *(void *)&v31[v42];
      if (v34) {
        BUG();
      }
      uint64_t v34 = __OFADD__(v35, v44);
      uint64_t v45 = v35 + v44;
      if (v34) {
        BUG();
      }
      if (v45 >= v39)
      {
        uint64_t v56 = *(void *)&v31[16 * v32 + 8];
        uint64_t v34 = __OFSUB__(v56, *(void *)&v31[16 * v32]);
        uint64_t v57 = v56 - *(void *)&v31[16 * v32];
        if (v34) {
          BUG();
        }
        if (v35 >= v57) {
          uint64_t v41 = v29 - 1;
        }
        uint64_t v32 = v41;
        goto LABEL_65;
      }
      goto LABEL_48;
    }
    unint64_t v7 = (char *)_swiftEmptyArrayStorage;
    unint64_t v29 = _swiftEmptyArrayStorage[2];
LABEL_80:
    uint64_t v84 = v7;
    if (v29 < 2)
    {
LABEL_95:
      swift_bridgeObjectRelease((_BYTE)v84);
      if (v80 < -1) {
        BUG();
      }
      _OWORD v75[2] = 0;
      swift_bridgeObjectRelease((_BYTE)v75);
    }
    else
    {
      uint64_t v65 = *a1;
      uint64_t v79 = *a1;
      while (1)
      {
        uint64_t v66 = v29 - 2;
        if (v29 < 2) {
          BUG();
        }
        if (!v65) {
          BUG();
        }
        unint64_t v67 = 16 * v66;
        uint64_t v68 = 16 * (v29 - 1);
        id v82 = *(void *)&v84[16 * v66 + 32];
        unint64_t v77 = *(void *)&v84[v68 + 40];
        specialized _merge<A>(low:mid:high:buffer:by:)((char *)(v65 + 16 * v82), (char *)(v65 + 16 * *(void *)&v84[v68 + 32]), v65 + 16 * v77, v74);
        if (v1) {
          break;
        }
        if (v77 < v82) {
          BUG();
        }
        if (!swift_isUniquelyReferenced_nonNull_native(v84)) {
          uint64_t v84 = specialized _ArrayBuffer._consumeAndCreateNew()((uint64_t)v84);
        }
        if (v66 >= *((void *)v84 + 2)) {
          BUG();
        }
        *(void *)&v84[v67 + 32] = v82;
        *(void *)&v84[v67 + 40] = v77;
        uint64_t v69 = *((void *)v84 + 2);
        if (v29 > v69) {
          BUG();
        }
        memmove(&v84[v68 + 32], &v84[16 * v29 + 32], 16 * (v69 - v29));
        *((void *)v84 + 2) = v69 - 1;
        unint64_t v29 = v69 - 1;
        uint64_t v65 = v79;
        if (v69 <= 2) {
          goto LABEL_95;
        }
      }
LABEL_92:
      swift_bridgeObjectRelease((_BYTE)v84);
      if (v80 < -1) {
        BUG();
      }
      _OWORD v75[2] = 0;
      swift_bridgeObjectRelease((_BYTE)v75);
    }
  }
}

{
  uint64_t v1;
  Swift::Int v2;
  Swift::Int v3;
  Swift::Int v4;
  char *v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t v16;
  long long *v17;
  long long *v18;
  uint64_t v19;
  uint64_t v20;
  long long v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  unint64_t v29;
  uint64_t v30;
  char *v31;
  unint64_t v32;
  uint64_t v33;
  BOOL v34;
  uint64_t v35;
  BOOL v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  unint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  unint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  BOOL v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  char *v59;
  uint64_t v60;
  uint64_t v61;
  char *v62;
  unint64_t v63;
  char *v64;
  uint64_t v65;
  unint64_t v66;
  uint64_t v67;
  uint64_t v68;
  unint64_t v69;
  Swift::Int v70;
  uint64_t v72;
  char *v73;
  void *v74;
  uint64_t v75;
  unint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  char *v81;
  uint64_t v82;
  uint64_t v83;
  char *v84;

  Swift::Int v2 = a1[1];
  Swift::Int v3 = _minimumMergeRunLength(_:)(v2);
  if (v3 >= v2)
  {
    if (v2 < 0) {
      BUG();
    }
    if (v2) {
      specialized MutableCollection<>._insertionSort(within:sortedEnd:by:)(0, v2, 1, a1);
    }
  }
  else
  {
    Swift::Int v4 = v3;
    id v74 = specialized static Array._allocateUninitialized(_:)(v2 / 2);
    uint64_t v73 = v5;
    uint64_t v80 = v2;
    if (v2 > 0)
    {
      unint64_t v70 = v4;
      uint64_t v6 = *a1;
      uint64_t v72 = *a1 + 32;
      id v75 = *a1 - 16;
      unint64_t v7 = (char *)_swiftEmptyArrayStorage;
      uint64_t v8 = 0;
      uint64_t v9 = v80;
      uint64_t v83 = *a1;
      while (1)
      {
        uint64_t v10 = v8 + 1;
        if (v8 + 1 < v9)
        {
          uint64_t v11 = *(void *)(v6 + 16 * v10);
          uint64_t v12 = 16 * v8;
          uint64_t v13 = *(void *)(v6 + 16 * v8);
          uint64_t v10 = v8 + 2;
          if (v8 + 2 < v9)
          {
            __m128 v14 = (uint64_t *)(v12 + v72);
            uint64_t v15 = v11;
            while (1)
            {
              uint64_t v16 = v15;
              uint64_t v15 = *v14;
              if (v11 < v13 == *v14 >= v16) {
                break;
              }
              ++v10;
              v14 += 2;
              if (v10 >= v9)
              {
                uint64_t v10 = v9;
                break;
              }
            }
          }
          if (v11 < v13)
          {
            if (v10 < v8) {
              BUG();
            }
            if (v10 > v8)
            {
              uint64_t v17 = (long long *)(v75 + 16 * v10);
              uint64_t v18 = (long long *)(v6 + v12);
              uint64_t v19 = v10;
              uint64_t v20 = v8;
              do
              {
                if (v20 != --v19)
                {
                  if (!v6) {
                    BUG();
                  }
                  uint64_t v21 = *v18;
                  uint64_t *v18 = *v17;
                  double *v17 = v21;
                }
                ++v20;
                --v17;
                ++v18;
              }
              while (v20 < v19);
            }
          }
        }
        if (v10 < v9)
        {
          if (__OFSUB__(v10, v8)) {
            BUG();
          }
          if (v10 - v8 < v70)
          {
            uint64_t v22 = v70 + v8;
            if (__OFADD__(v70, v8)) {
              BUG();
            }
            if (v22 >= v9) {
              uint64_t v22 = v9;
            }
            if (v22 < v8) {
              BUG();
            }
            if (v10 != v22)
            {
              uint64_t v23 = v75 + 16 * v10;
              do
              {
                uint64_t v24 = *(void *)(v6 + 16 * v10);
                uint64_t v25 = v8;
                uint64_t v26 = v23;
                do
                {
                  if (v24 >= *(void *)v26) {
                    break;
                  }
                  if (!v6) {
                    BUG();
                  }
                  uint64_t v27 = *(void *)(v26 + 24);
                  *(_OWORD *)(v26 + 16) = *(_OWORD *)v26;
                  *(void *)uint64_t v26 = v24;
                  *(void *)(v26 + 8) = v27;
                  v26 -= 16;
                  ++v25;
                }
                while (v10 != v25);
                ++v10;
                v23 += 16;
              }
              while (v10 != v22);
              uint64_t v10 = v22;
            }
          }
        }
        if (v10 < v8) {
          BUG();
        }
        uint64_t v78 = v10;
        if (!swift_isUniquelyReferenced_nonNull_native(v7)) {
          unint64_t v7 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *((void *)v7 + 2) + 1, 1, v7);
        }
        uint64_t v28 = *((void *)v7 + 2);
        unint64_t v29 = v28 + 1;
        uint64_t v6 = v83;
        if (*((void *)v7 + 3) >> 1 <= v28)
        {
          unint64_t v64 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(*((void *)v7 + 3) >= 2uLL, v28 + 1, 1, v7);
          uint64_t v6 = v83;
          unint64_t v7 = v64;
        }
        *((void *)v7 + 2) = v29;
        unint64_t v30 = 16 * v28;
        *(void *)&v7[v30 + 32] = v8;
        *(void *)&v7[v30 + 40] = v78;
        if (v28) {
          break;
        }
        unint64_t v29 = 1;
LABEL_74:
        uint64_t v9 = v80;
        uint64_t v8 = v78;
        if (v78 >= v80) {
          goto LABEL_80;
        }
      }
      uint64_t v31 = v7 + 32;
      uint64_t v84 = v7;
      uint64_t v81 = v7 + 32;
      while (1)
      {
        uint64_t v32 = v29 - 1;
        if (v29 >= 4) {
          break;
        }
        if (v29 == 3)
        {
          unint64_t v33 = *((void *)v7 + 5);
          uint64_t v34 = __OFSUB__(v33, *((void *)v7 + 4));
          BOOL v35 = v33 - *((void *)v7 + 4);
          uint64_t v36 = v34;
LABEL_48:
          if (v36) {
            BUG();
          }
          uint64_t v46 = v29 - 2;
          unint64_t v47 = 16 * (v29 - 2);
          uint64_t v48 = *(void *)&v31[v47 + 8];
          uint64_t v34 = __OFSUB__(v48, *(void *)&v31[v47]);
          uint64_t v49 = v48 - *(void *)&v31[v47];
          uint64_t v50 = v34;
          if (v34) {
            BUG();
          }
          BOOL v51 = *(void *)&v31[16 * v32 + 8];
          uint64_t v34 = __OFSUB__(v51, *(void *)&v31[16 * v32]);
          uint64_t v52 = v51 - *(void *)&v31[16 * v32];
          if (v34) {
            BUG();
          }
          if (__OFADD__(v52, v49)) {
            BUG();
          }
          if (v52 + v49 >= v35)
          {
            if (v35 >= v52) {
              uint64_t v46 = v29 - 1;
            }
            uint64_t v32 = v46;
            goto LABEL_65;
          }
          goto LABEL_57;
        }
        uint64_t v53 = *((void *)v7 + 5);
        uint64_t v34 = __OFSUB__(v53, *((void *)v7 + 4));
        uint64_t v49 = v53 - *((void *)v7 + 4);
        uint64_t v50 = v34;
LABEL_57:
        if (v50) {
          BUG();
        }
        uint64_t v54 = *(void *)&v31[16 * v32 + 8];
        uint64_t v34 = __OFSUB__(v54, *(void *)&v31[16 * v32]);
        uint64_t v55 = v54 - *(void *)&v31[16 * v32];
        if (v34) {
          BUG();
        }
        if (v55 < v49) {
          goto LABEL_74;
        }
LABEL_65:
        if (v32 - 1 >= v29) {
          BUG();
        }
        if (!v6) {
          BUG();
        }
        uint64_t v58 = 16 * (v32 - 1);
        uint64_t v76 = v32;
        uint64_t v59 = &v31[16 * v32];
        float v60 = *(void *)&v31[v58];
        uint64_t v61 = *((void *)v59 + 1);
        specialized _merge<A>(low:mid:high:buffer:by:)((char *)(v6 + 16 * v60), (char *)(v6 + 16 * *(void *)v59), v6 + 16 * v61, v73);
        if (v1) {
          goto LABEL_92;
        }
        if (v61 < v60) {
          BUG();
        }
        if (v76 > *((void *)v84 + 2)) {
          BUG();
        }
        uint64_t v62 = &v81[v58];
        *(void *)uint64_t v62 = v60;
        *((void *)v62 + 1) = v61;
        uint64_t v63 = *((void *)v84 + 2);
        if (v76 >= v63) {
          BUG();
        }
        unint64_t v7 = v84;
        unint64_t v29 = v63 - 1;
        memmove(v59, v59 + 16, 16 * (v63 - 1 - v76));
        uint64_t v31 = v81;
        *((void *)v84 + 2) = v63 - 1;
        uint64_t v6 = v83;
        if (v63 <= 2) {
          goto LABEL_74;
        }
      }
      BOOL v37 = 16 * v29;
      uint64_t v38 = *(void *)&v31[16 * v29 - 56];
      uint64_t v34 = __OFSUB__(v38, *(void *)&v31[16 * v29 - 64]);
      uint64_t v39 = v38 - *(void *)&v31[16 * v29 - 64];
      if (v34) {
        BUG();
      }
      uint64_t v40 = *(void *)&v31[v37 - 40];
      uint64_t v34 = __OFSUB__(v40, *(void *)&v31[v37 - 48]);
      BOOL v35 = v40 - *(void *)&v31[v37 - 48];
      uint64_t v36 = v34;
      if (v34) {
        BUG();
      }
      uint64_t v41 = v29 - 2;
      unint64_t v42 = 16 * (v29 - 2);
      uint64_t v43 = *(void *)&v31[v42 + 8];
      uint64_t v34 = __OFSUB__(v43, *(void *)&v31[v42]);
      uint64_t v44 = v43 - *(void *)&v31[v42];
      if (v34) {
        BUG();
      }
      uint64_t v34 = __OFADD__(v35, v44);
      uint64_t v45 = v35 + v44;
      if (v34) {
        BUG();
      }
      if (v45 >= v39)
      {
        uint64_t v56 = *(void *)&v31[16 * v32 + 8];
        uint64_t v34 = __OFSUB__(v56, *(void *)&v31[16 * v32]);
        uint64_t v57 = v56 - *(void *)&v31[16 * v32];
        if (v34) {
          BUG();
        }
        if (v35 >= v57) {
          uint64_t v41 = v29 - 1;
        }
        uint64_t v32 = v41;
        goto LABEL_65;
      }
      goto LABEL_48;
    }
    unint64_t v7 = (char *)_swiftEmptyArrayStorage;
    unint64_t v29 = _swiftEmptyArrayStorage[2];
LABEL_80:
    uint64_t v84 = v7;
    if (v29 < 2)
    {
LABEL_95:
      swift_bridgeObjectRelease((_BYTE)v84);
      if (v80 < -1) {
        BUG();
      }
      v74[2] = 0;
      swift_bridgeObjectRelease((_BYTE)v74);
    }
    else
    {
      uint64_t v65 = *a1;
      uint64_t v79 = *a1;
      while (1)
      {
        uint64_t v66 = v29 - 2;
        if (v29 < 2) {
          BUG();
        }
        if (!v65) {
          BUG();
        }
        unint64_t v67 = 16 * v66;
        uint64_t v68 = 16 * (v29 - 1);
        id v82 = *(void *)&v84[16 * v66 + 32];
        unint64_t v77 = *(void *)&v84[v68 + 40];
        specialized _merge<A>(low:mid:high:buffer:by:)((char *)(v65 + 16 * v82), (char *)(v65 + 16 * *(void *)&v84[v68 + 32]), v65 + 16 * v77, v73);
        if (v1) {
          break;
        }
        if (v77 < v82) {
          BUG();
        }
        if (!swift_isUniquelyReferenced_nonNull_native(v84)) {
          uint64_t v84 = specialized _ArrayBuffer._consumeAndCreateNew()((uint64_t)v84);
        }
        if (v66 >= *((void *)v84 + 2)) {
          BUG();
        }
        *(void *)&v84[v67 + 32] = v82;
        *(void *)&v84[v67 + 40] = v77;
        uint64_t v69 = *((void *)v84 + 2);
        if (v29 > v69) {
          BUG();
        }
        memmove(&v84[v68 + 32], &v84[16 * v29 + 32], 16 * (v69 - v29));
        *((void *)v84 + 2) = v69 - 1;
        unint64_t v29 = v69 - 1;
        uint64_t v65 = v79;
        if (v69 <= 2) {
          goto LABEL_95;
        }
      }
LABEL_92:
      swift_bridgeObjectRelease((_BYTE)v84);
      if (v80 < -1) {
        BUG();
      }
      v74[2] = 0;
      swift_bridgeObjectRelease((_BYTE)v74);
    }
  }
}

{
  uint64_t v1;
  Swift::Int v2;
  Swift::Int v3;
  Swift::Int v4;
  char *v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  Swift::Int v9;
  uint64_t v10;
  Swift::Int v11;
  uint64_t v12;
  char v13;
  uint64_t v14;
  uint64_t v15;
  char v16;
  Swift::Int v17;
  unsigned __int8 v18;
  uint64_t v19;
  uint64_t v20;
  unsigned char *v21;
  Swift::Int v22;
  uint64_t v23;
  uint64_t v24;
  char v25;
  unsigned __int8 v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  Swift::Int v31;
  uint64_t v32;
  char v33;
  long long v34;
  uint64_t v35;
  Swift::Int v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  unsigned __int8 v40;
  uint64_t v41;
  uint64_t v42;
  char v43;
  char v44;
  long long v45;
  unint64_t v46;
  unint64_t v47;
  uint64_t v48;
  char *v49;
  unint64_t v50;
  uint64_t v51;
  BOOL v52;
  uint64_t v53;
  BOOL v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  unint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  unint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  BOOL v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  char *v77;
  uint64_t v78;
  uint64_t v79;
  char *v80;
  unint64_t v81;
  char *v82;
  uint64_t v83;
  unint64_t v84;
  uint64_t v85;
  uint64_t v86;
  unint64_t v87;
  Swift::Int v88;
  Swift::Int v89;
  uint64_t v91;
  uint64_t v92;
  char *v93;
  void *v94;
  unsigned __int8 v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  Swift::Int v102;
  uint64_t v103;
  char *v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  Swift::Int v109;
  uint64_t v110;
  uint64_t v111;
  char *v112;
  char *v113;

  Swift::Int v2 = a1[1];
  Swift::Int v3 = _minimumMergeRunLength(_:)(v2);
  if (v3 >= v2)
  {
    if (v2 < 0) {
      BUG();
    }
    if (v2) {
      specialized MutableCollection<>._insertionSort(within:sortedEnd:by:)(0, v2, 1, a1);
    }
  }
  else
  {
    Swift::Int v4 = v3;
    uint64_t v97 = v1;
    id v94 = specialized static Array._allocateUninitialized(_:)(v2 / 2);
    id v93 = v5;
    unint64_t v111 = v2;
    if (v2 > 0)
    {
      id v89 = v4;
      uint64_t v6 = *a1;
      uint64_t v91 = *a1 + 16;
      uint64_t v92 = *a1 - 24;
      unint64_t v7 = (char *)_swiftEmptyArrayStorage;
      uint64_t v8 = 0;
      uint64_t v9 = v2;
      uint64_t v106 = *a1;
      while (1)
      {
        uint64_t v112 = v7;
        uint64_t v10 = v8;
        uint64_t v11 = v8 + 1;
        uint64_t v101 = v8;
        if (v8 + 1 >= v9) {
          goto LABEL_51;
        }
        uint64_t v12 = *(void *)(v6 + 24 * v11);
        uint64_t v13 = *(unsigned char *)(v6 + 24 * v11 + 16);
        __m128 v14 = 24 * v8;
        uint64_t v15 = *(void *)(v6 + 24 * v8);
        uint64_t v16 = *(unsigned char *)(v6 + 24 * v8 + 16);
        if (v13) {
          break;
        }
        if (v16)
        {
LABEL_10:
          uint64_t v18 = (v13 ^ 1) & v16;
          goto LABEL_21;
        }
        uint64_t v19 = *(void *)(v6 + 24 * v11 + 8);
        uint64_t v20 = *(void *)(v6 + v14 + 8);
        if (v12 == v15 && v19 == v20)
        {
          uint64_t v10 = v8;
          uint64_t v17 = v8 + 2;
          uint64_t v9 = v111;
LABEL_14:
          if (v17 >= v9) {
            goto LABEL_50;
          }
          uint64_t v18 = 0;
          goto LABEL_22;
        }
        unint64_t v108 = v8 + 1;
        if ((_stringCompareWithSmolCheck(_:_:expecting:)(v12, v19, v15, v20, 0) & 1) == 0)
        {
          uint64_t v18 = _stringCompareWithSmolCheck(_:_:expecting:)(v12, v19, v15, v20, 1);
          uint64_t v9 = v111;
          uint64_t v6 = v106;
          uint64_t v11 = v108;
          uint64_t v10 = v101;
LABEL_21:
          uint64_t v17 = v10 + 2;
          if (v10 + 2 >= v9)
          {
LABEL_42:
            uint64_t v11 = v17;
            if (v18) {
              goto LABEL_43;
            }
            goto LABEL_51;
          }
          goto LABEL_22;
        }
        uint64_t v10 = v101;
        uint64_t v17 = v101 + 2;
        uint64_t v9 = v111;
        uint64_t v11 = v108;
        if (v101 + 2 >= v111)
        {
          uint64_t v11 = v101 + 2;
          uint64_t v6 = v106;
          goto LABEL_51;
        }
        uint64_t v18 = 0;
        uint64_t v6 = v106;
LABEL_22:
        uint64_t v21 = (unsigned char *)(v91 + 24 * v17);
        uint64_t v22 = v17;
        id v95 = v18;
        while (1)
        {
          uint64_t v17 = v22;
          uint64_t v23 = *((void *)v21 - 2);
          uint64_t v24 = *(void *)(v6 + 24 * v11);
          uint64_t v25 = *(unsigned char *)(v6 + 24 * v11 + 16);
          if (*v21)
          {
            if ((v25 & 1) == 0) {
              goto LABEL_28;
            }
            if (v23 != v24)
            {
              uint64_t v26 = v23 < v24;
              goto LABEL_29;
            }
            goto LABEL_34;
          }
          if (v25)
          {
LABEL_28:
            uint64_t v26 = (*v21 ^ 1) & v25;
LABEL_29:
            uint64_t v9 = v111;
LABEL_30:
            if ((v18 ^ v26)) {
              goto LABEL_41;
            }
            goto LABEL_35;
          }
          uint64_t v27 = *((void *)v21 - 1);
          uint64_t v28 = *(void *)(v6 + 24 * v11 + 8);
          if (v23 != v24 || v27 != v28) {
            break;
          }
LABEL_34:
          uint64_t v9 = v111;
          if (v18) {
            goto LABEL_120;
          }
LABEL_35:
          uint64_t v22 = v17 + 1;
          v21 += 24;
          uint64_t v11 = v17;
          if (v17 + 1 >= v9)
          {
            ++v17;
LABEL_41:
            uint64_t v10 = v101;
            goto LABEL_42;
          }
        }
        uint64_t v102 = v17;
        uint64_t v98 = *(void *)(v6 + 24 * v11 + 8);
        if ((_stringCompareWithSmolCheck(_:_:expecting:)(v23, v27, v24, v28, 0) & 1) == 0)
        {
          uint64_t v26 = _stringCompareWithSmolCheck(_:_:expecting:)(v23, v27, v24, v98, 1);
          uint64_t v9 = v111;
          uint64_t v6 = v106;
          uint64_t v17 = v102;
          uint64_t v18 = v95;
          goto LABEL_30;
        }
        uint64_t v18 = v95;
        uint64_t v9 = v111;
        uint64_t v6 = v106;
        uint64_t v17 = v102;
        if ((v95 & 1) == 0) {
          goto LABEL_35;
        }
LABEL_120:
        uint64_t v10 = v101;
LABEL_43:
        if (v17 < v10) {
          BUG();
        }
        if (v17 > v10)
        {
          unint64_t v29 = v92 + 24 * v17;
          unint64_t v30 = v6 + v14;
          uint64_t v31 = v17;
          uint64_t v32 = v10;
          do
          {
            if (v32 != --v31)
            {
              if (!v6) {
                BUG();
              }
              unint64_t v33 = *(unsigned char *)(v30 + 16);
              uint64_t v34 = *(_OWORD *)v30;
              BOOL v35 = *(void *)(v29 + 16);
              *(_OWORD *)unint64_t v30 = *(_OWORD *)v29;
              *(void *)(v30 + 16) = v35;
              *(_OWORD *)unint64_t v29 = v34;
              *(unsigned char *)(v29 + 16) = v33;
            }
            ++v32;
            v29 -= 24;
            v30 += 24;
          }
          while (v32 < v31);
        }
LABEL_50:
        uint64_t v11 = v17;
LABEL_51:
        if (v11 >= v9) {
          goto LABEL_76;
        }
        unint64_t v7 = v112;
        if (__OFSUB__(v11, v10)) {
          BUG();
        }
        if (v11 - v10 < v89)
        {
          uint64_t v36 = v89 + v10;
          if (__OFADD__(v89, v10)) {
            BUG();
          }
          if (v36 >= v9) {
            uint64_t v36 = v9;
          }
          if (v36 < v10) {
            BUG();
          }
          if (v11 != v36)
          {
            BOOL v37 = v6 + 24 * v11;
            uint64_t v88 = v36;
            while (1)
            {
              uint64_t v96 = v37;
              uint64_t v109 = v11;
              while (1)
              {
                uint64_t v38 = *(void *)v37;
                uint64_t v39 = *(void *)(v37 - 24);
                uint64_t v40 = *(unsigned char *)(v37 - 8);
                if (*(unsigned char *)(v37 + 16))
                {
                  if (((v38 != v39) & v40) != 1 || v38 >= v39) {
                    goto LABEL_74;
                  }
                  goto LABEL_70;
                }
                if ((v40 & 1) == 0) {
                  break;
                }
LABEL_70:
                if (!v6) {
                  BUG();
                }
                uint64_t v44 = *(unsigned char *)(v37 + 16);
                uint64_t v45 = *(_OWORD *)v37;
                *(_OWORD *)BOOL v37 = *(_OWORD *)(v37 - 24);
                *(void *)(v37 + 16) = *(void *)(v37 - 24 + 16);
                *(_OWORD *)(v37 - 24) = v45;
                *(unsigned char *)(v37 - 8) = v44;
                ++v10;
                v37 -= 24;
                if (v11 == v10) {
                  goto LABEL_74;
                }
              }
              uint64_t v41 = *(void *)(v37 + 8);
              unint64_t v42 = *(void *)(v37 - 16);
              if (v38 == v39 && v41 == v42) {
                goto LABEL_74;
              }
              uint64_t v99 = *(void *)(v37 + 8);
              unint64_t v103 = *(void *)(v37 - 16);
              if ((_stringCompareWithSmolCheck(_:_:expecting:)(*(void *)v37, v41, v39, v42, 0) & 1) == 0) {
                break;
              }
              uint64_t v6 = v106;
              uint64_t v11 = v109;
LABEL_74:
              ++v11;
              BOOL v37 = v96 + 24;
              uint64_t v10 = v101;
              if (v11 == v88)
              {
                uint64_t v11 = v88;
LABEL_76:
                unint64_t v7 = v112;
                goto LABEL_77;
              }
            }
            uint64_t v43 = _stringCompareWithSmolCheck(_:_:expecting:)(v38, v99, v39, v103, 1);
            uint64_t v6 = v106;
            uint64_t v11 = v109;
            if ((v43 & 1) == 0) {
              goto LABEL_74;
            }
            goto LABEL_70;
          }
        }
LABEL_77:
        if (v11 < v10) {
          BUG();
        }
        uint64_t v110 = v11;
        if (!swift_isUniquelyReferenced_nonNull_native(v7)) {
          unint64_t v7 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *((void *)v7 + 2) + 1, 1, v7);
        }
        uint64_t v46 = *((void *)v7 + 2);
        unint64_t v47 = v46 + 1;
        uint64_t v6 = v106;
        uint64_t v8 = v11;
        if (*((void *)v7 + 3) >> 1 <= v46)
        {
          id v82 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(*((void *)v7 + 3) >= 2uLL, v46 + 1, 1, v7);
          uint64_t v8 = v11;
          uint64_t v6 = v106;
          unint64_t v7 = v82;
        }
        *((void *)v7 + 2) = v47;
        uint64_t v48 = 16 * v46;
        *(void *)&v7[v48 + 32] = v101;
        *(void *)&v7[v48 + 40] = v8;
        if (v46)
        {
          uint64_t v49 = v7 + 32;
          uint64_t v113 = v7;
          float v104 = v7 + 32;
          while (1)
          {
            uint64_t v50 = v47 - 1;
            if (v47 >= 4) {
              break;
            }
            if (v47 == 3)
            {
              BOOL v51 = *((void *)v7 + 5);
              uint64_t v52 = __OFSUB__(v51, *((void *)v7 + 4));
              uint64_t v53 = v51 - *((void *)v7 + 4);
              uint64_t v54 = v52;
LABEL_92:
              if (v54) {
                BUG();
              }
              unint64_t v64 = v47 - 2;
              uint64_t v65 = 16 * (v47 - 2);
              uint64_t v66 = *(void *)&v49[v65 + 8];
              uint64_t v52 = __OFSUB__(v66, *(void *)&v49[v65]);
              unint64_t v67 = v66 - *(void *)&v49[v65];
              uint64_t v68 = v52;
              if (v52) {
                BUG();
              }
              uint64_t v69 = *(void *)&v49[16 * v50 + 8];
              uint64_t v52 = __OFSUB__(v69, *(void *)&v49[16 * v50]);
              unint64_t v70 = v69 - *(void *)&v49[16 * v50];
              if (v52) {
                BUG();
              }
              if (__OFADD__(v70, v67)) {
                BUG();
              }
              if (v70 + v67 >= v53)
              {
                if (v53 >= v70) {
                  unint64_t v64 = v47 - 1;
                }
                uint64_t v50 = v64;
                goto LABEL_109;
              }
              goto LABEL_101;
            }
            Swift::Int v71 = *((void *)v7 + 5);
            uint64_t v52 = __OFSUB__(v71, *((void *)v7 + 4));
            unint64_t v67 = v71 - *((void *)v7 + 4);
            uint64_t v68 = v52;
LABEL_101:
            if (v68) {
              BUG();
            }
            uint64_t v72 = *(void *)&v49[16 * v50 + 8];
            uint64_t v52 = __OFSUB__(v72, *(void *)&v49[16 * v50]);
            uint64_t v73 = v72 - *(void *)&v49[16 * v50];
            if (v52) {
              BUG();
            }
            if (v73 < v67) {
              goto LABEL_118;
            }
LABEL_109:
            if (v50 - 1 >= v47) {
              BUG();
            }
            if (!v6) {
              BUG();
            }
            uint64_t v76 = 16 * (v50 - 1);
            unint64_t v77 = &v49[16 * v50];
            uint64_t v78 = *(void *)&v49[v76];
            uint64_t v79 = *((void *)v77 + 1);
            specialized _merge<A>(low:mid:high:buffer:by:)((char *)(v6 + 24 * v78), (char *)(v6 + 24 * *(void *)v77), v6 + 24 * v79, v93);
            if (v97) {
              goto LABEL_138;
            }
            if (v79 < v78) {
              BUG();
            }
            if (v50 > *((void *)v113 + 2)) {
              BUG();
            }
            uint64_t v80 = &v104[v76];
            *(void *)uint64_t v80 = v78;
            *((void *)v80 + 1) = v79;
            uint64_t v81 = *((void *)v113 + 2);
            if (v50 >= v81) {
              BUG();
            }
            unint64_t v7 = v113;
            unint64_t v47 = v81 - 1;
            memmove(v77, v77 + 16, 16 * (v81 - 1 - v50));
            uint64_t v49 = v104;
            *((void *)v113 + 2) = v81 - 1;
            uint64_t v6 = v106;
            uint64_t v8 = v110;
            if (v81 <= 2) {
              goto LABEL_118;
            }
          }
          uint64_t v55 = 16 * v47;
          uint64_t v56 = *(void *)&v49[16 * v47 - 56];
          uint64_t v52 = __OFSUB__(v56, *(void *)&v49[16 * v47 - 64]);
          uint64_t v57 = v56 - *(void *)&v49[16 * v47 - 64];
          if (v52) {
            BUG();
          }
          uint64_t v58 = *(void *)&v49[v55 - 40];
          uint64_t v52 = __OFSUB__(v58, *(void *)&v49[v55 - 48]);
          uint64_t v53 = v58 - *(void *)&v49[v55 - 48];
          uint64_t v54 = v52;
          if (v52) {
            BUG();
          }
          uint64_t v59 = v47 - 2;
          float v60 = 16 * (v47 - 2);
          uint64_t v61 = *(void *)&v49[v60 + 8];
          uint64_t v52 = __OFSUB__(v61, *(void *)&v49[v60]);
          uint64_t v62 = v61 - *(void *)&v49[v60];
          if (v52) {
            BUG();
          }
          uint64_t v52 = __OFADD__(v53, v62);
          uint64_t v63 = v53 + v62;
          if (v52) {
            BUG();
          }
          if (v63 >= v57)
          {
            id v74 = *(void *)&v49[16 * v50 + 8];
            uint64_t v52 = __OFSUB__(v74, *(void *)&v49[16 * v50]);
            id v75 = v74 - *(void *)&v49[16 * v50];
            if (v52) {
              BUG();
            }
            if (v53 >= v75) {
              uint64_t v59 = v47 - 1;
            }
            uint64_t v50 = v59;
            goto LABEL_109;
          }
          goto LABEL_92;
        }
        unint64_t v47 = 1;
LABEL_118:
        uint64_t v9 = v111;
        if (v8 >= v111) {
          goto LABEL_126;
        }
      }
      if ((v16 & 1) == 0) {
        goto LABEL_10;
      }
      if (v12 != v15)
      {
        uint64_t v18 = v12 < v15;
        goto LABEL_21;
      }
      uint64_t v17 = v8 + 2;
      goto LABEL_14;
    }
    unint64_t v7 = (char *)_swiftEmptyArrayStorage;
    unint64_t v47 = _swiftEmptyArrayStorage[2];
LABEL_126:
    uint64_t v113 = v7;
    if (v47 < 2)
    {
LABEL_141:
      swift_bridgeObjectRelease((_BYTE)v113);
      if (v111 < -1) {
        BUG();
      }
      v94[2] = 0;
      swift_bridgeObjectRelease((_BYTE)v94);
    }
    else
    {
      uint64_t v83 = *a1;
      uint64_t v107 = *a1;
      while (1)
      {
        uint64_t v84 = v47 - 2;
        if (v47 < 2) {
          BUG();
        }
        if (!v83) {
          BUG();
        }
        uint64_t v85 = 16 * v84;
        uint64_t v86 = 16 * (v47 - 1);
        uint64_t v105 = *(void *)&v113[16 * v84 + 32];
        long long v100 = *(void *)&v113[v86 + 40];
        specialized _merge<A>(low:mid:high:buffer:by:)((char *)(v83 + 24 * v105), (char *)(v83 + 24 * *(void *)&v113[v86 + 32]), v83 + 24 * v100, v93);
        if (v97) {
          break;
        }
        if (v100 < v105) {
          BUG();
        }
        if (!swift_isUniquelyReferenced_nonNull_native(v113)) {
          uint64_t v113 = specialized _ArrayBuffer._consumeAndCreateNew()((uint64_t)v113);
        }
        if (v84 >= *((void *)v113 + 2)) {
          BUG();
        }
        *(void *)&v113[v85 + 32] = v105;
        *(void *)&v113[v85 + 40] = v100;
        uint64_t v87 = *((void *)v113 + 2);
        if (v47 > v87) {
          BUG();
        }
        memmove(&v113[v86 + 32], &v113[16 * v47 + 32], 16 * (v87 - v47));
        *((void *)v113 + 2) = v87 - 1;
        unint64_t v47 = v87 - 1;
        uint64_t v83 = v107;
        if (v87 <= 2) {
          goto LABEL_141;
        }
      }
LABEL_138:
      swift_bridgeObjectRelease((_BYTE)v113);
      if (v111 < -1) {
        BUG();
      }
      v94[2] = 0;
      swift_bridgeObjectRelease((_BYTE)v94);
    }
  }
}

{
  uint64_t v1;
  Swift::Int v2;
  Swift::Int v3;
  Swift::Int v4;
  char *v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  unint64_t v27;
  uint64_t v28;
  char *v29;
  unint64_t v30;
  uint64_t v31;
  BOOL v32;
  uint64_t v33;
  BOOL v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  unint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  unint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  BOOL v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  char *v57;
  uint64_t v58;
  uint64_t v59;
  char *v60;
  unint64_t v61;
  char *v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  unint64_t v67;
  uint64_t v69;
  char *v70;
  void *v71;
  unint64_t v72;
  Swift::Int v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  char *v77;
  uint64_t v78;
  uint64_t v79;
  char *v80;

  Swift::Int v2 = a1[1];
  Swift::Int v3 = _minimumMergeRunLength(_:)(v2);
  if (v3 >= v2)
  {
    if (v2 < 0) {
      BUG();
    }
    if (v2) {
      specialized MutableCollection<>._insertionSort(within:sortedEnd:by:)(0, v2, 1, a1);
    }
  }
  else
  {
    Swift::Int v4 = v3;
    Swift::Int v71 = specialized static Array._allocateUninitialized(_:)(v2 / 2);
    unint64_t v70 = v5;
    uint64_t v76 = v2;
    if (v2 > 0)
    {
      uint64_t v73 = v4;
      uint64_t v6 = *a1;
      uint64_t v69 = *a1 - 8;
      unint64_t v7 = (char *)_swiftEmptyArrayStorage;
      uint64_t v8 = 0;
      uint64_t v9 = v76;
      uint64_t v79 = *a1;
      while (1)
      {
        uint64_t v10 = v8 + 1;
        if (v8 + 1 < v9)
        {
          uint64_t v11 = *(void *)(v6 + 8 * v8);
          uint64_t v12 = *(void *)(v6 + 8 * v8 + 8);
          uint64_t v10 = v8 + 2;
          if (v8 + 2 < v9)
          {
            uint64_t v13 = *(void *)(v6 + 8 * v8 + 8);
            while (1)
            {
              __m128 v14 = v13;
              uint64_t v13 = *(void *)(v6 + 8 * v10);
              if (v12 < v11 == v13 >= v14) {
                break;
              }
              if (++v10 >= v9)
              {
                uint64_t v10 = v9;
                break;
              }
            }
          }
          if (v12 < v11)
          {
            if (v10 < v8) {
              BUG();
            }
            if (v10 > v8)
            {
              uint64_t v15 = v10 - 1;
              uint64_t v16 = v8;
              do
              {
                if (v16 != v15)
                {
                  if (!v6) {
                    BUG();
                  }
                  uint64_t v17 = *(void *)(v6 + 8 * v16);
                  *(void *)(v6 + 8 * v16) = *(void *)(v6 + 8 * v15);
                  *(void *)(v6 + 8 * v15) = v17;
                }
              }
              while (++v16 < v15--);
            }
          }
        }
        if (v10 < v9)
        {
          if (__OFSUB__(v10, v8)) {
            BUG();
          }
          if (v10 - v8 < v73)
          {
            uint64_t v19 = v73 + v8;
            if (__OFADD__(v73, v8)) {
              BUG();
            }
            if (v19 >= v9) {
              uint64_t v19 = v9;
            }
            if (v19 < v8) {
              BUG();
            }
            if (v10 != v19)
            {
              uint64_t v20 = v8;
              uint64_t v21 = v69;
              uint64_t v22 = v10;
              do
              {
                uint64_t v23 = *(void *)(v6 + 8 * v22);
                uint64_t v24 = v10;
                do
                {
                  uint64_t v25 = *(void *)(v21 + 8 * v24);
                  if (v23 >= v25) {
                    break;
                  }
                  if (!v6) {
                    BUG();
                  }
                  *(void *)(v21 + 8 * v24 + 8) = v25;
                  *(void *)(v21 + 8 * v24--) = v23;
                }
                while (v20 != v24);
                ++v22;
                v21 += 8;
                --v20;
              }
              while (v22 != v19);
              uint64_t v10 = v19;
            }
          }
        }
        if (v10 < v8) {
          BUG();
        }
        id v75 = v10;
        if (!swift_isUniquelyReferenced_nonNull_native(v7)) {
          unint64_t v7 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *((void *)v7 + 2) + 1, 1, v7);
        }
        uint64_t v26 = *((void *)v7 + 2);
        uint64_t v27 = v26 + 1;
        uint64_t v6 = v79;
        if (*((void *)v7 + 3) >> 1 <= v26)
        {
          uint64_t v62 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(*((void *)v7 + 3) >= 2uLL, v26 + 1, 1, v7);
          uint64_t v6 = v79;
          unint64_t v7 = v62;
        }
        *((void *)v7 + 2) = v27;
        uint64_t v28 = 16 * v26;
        *(void *)&v7[v28 + 32] = v8;
        *(void *)&v7[v28 + 40] = v75;
        if (v26) {
          break;
        }
        uint64_t v27 = 1;
LABEL_74:
        uint64_t v9 = v76;
        uint64_t v8 = v75;
        if (v75 >= v76) {
          goto LABEL_80;
        }
      }
      unint64_t v29 = v7 + 32;
      uint64_t v80 = v7;
      unint64_t v77 = v7 + 32;
      while (1)
      {
        unint64_t v30 = v27 - 1;
        if (v27 >= 4) {
          break;
        }
        if (v27 == 3)
        {
          uint64_t v31 = *((void *)v7 + 5);
          uint64_t v32 = __OFSUB__(v31, *((void *)v7 + 4));
          unint64_t v33 = v31 - *((void *)v7 + 4);
          uint64_t v34 = v32;
LABEL_48:
          if (v34) {
            BUG();
          }
          uint64_t v44 = v27 - 2;
          uint64_t v45 = 16 * (v27 - 2);
          uint64_t v46 = *(void *)&v29[v45 + 8];
          uint64_t v32 = __OFSUB__(v46, *(void *)&v29[v45]);
          unint64_t v47 = v46 - *(void *)&v29[v45];
          uint64_t v48 = v32;
          if (v32) {
            BUG();
          }
          uint64_t v49 = *(void *)&v29[16 * v30 + 8];
          uint64_t v32 = __OFSUB__(v49, *(void *)&v29[16 * v30]);
          uint64_t v50 = v49 - *(void *)&v29[16 * v30];
          if (v32) {
            BUG();
          }
          if (__OFADD__(v50, v47)) {
            BUG();
          }
          if (v50 + v47 >= v33)
          {
            if (v33 >= v50) {
              uint64_t v44 = v27 - 1;
            }
            unint64_t v30 = v44;
            goto LABEL_65;
          }
          goto LABEL_57;
        }
        BOOL v51 = *((void *)v7 + 5);
        uint64_t v32 = __OFSUB__(v51, *((void *)v7 + 4));
        unint64_t v47 = v51 - *((void *)v7 + 4);
        uint64_t v48 = v32;
LABEL_57:
        if (v48) {
          BUG();
        }
        uint64_t v52 = *(void *)&v29[16 * v30 + 8];
        uint64_t v32 = __OFSUB__(v52, *(void *)&v29[16 * v30]);
        uint64_t v53 = v52 - *(void *)&v29[16 * v30];
        if (v32) {
          BUG();
        }
        if (v53 < v47) {
          goto LABEL_74;
        }
LABEL_65:
        if (v30 - 1 >= v27) {
          BUG();
        }
        if (!v6) {
          BUG();
        }
        uint64_t v56 = 16 * (v30 - 1);
        uint64_t v72 = v30;
        uint64_t v57 = &v29[16 * v30];
        uint64_t v58 = *(void *)&v29[v56];
        uint64_t v59 = *((void *)v57 + 1);
        specialized _merge<A>(low:mid:high:buffer:by:)((char *)(v6 + 8 * v58), (char *)(v6 + 8 * *(void *)v57), v6 + 8 * v59, v70);
        if (v1) {
          goto LABEL_92;
        }
        if (v59 < v58) {
          BUG();
        }
        if (v72 > *((void *)v80 + 2)) {
          BUG();
        }
        float v60 = &v77[v56];
        *(void *)float v60 = v58;
        *((void *)v60 + 1) = v59;
        uint64_t v61 = *((void *)v80 + 2);
        if (v72 >= v61) {
          BUG();
        }
        unint64_t v7 = v80;
        uint64_t v27 = v61 - 1;
        memmove(v57, v57 + 16, 16 * (v61 - 1 - v72));
        unint64_t v29 = v77;
        *((void *)v80 + 2) = v61 - 1;
        uint64_t v6 = v79;
        if (v61 <= 2) {
          goto LABEL_74;
        }
      }
      BOOL v35 = 16 * v27;
      uint64_t v36 = *(void *)&v29[16 * v27 - 56];
      uint64_t v32 = __OFSUB__(v36, *(void *)&v29[16 * v27 - 64]);
      BOOL v37 = v36 - *(void *)&v29[16 * v27 - 64];
      if (v32) {
        BUG();
      }
      uint64_t v38 = *(void *)&v29[v35 - 40];
      uint64_t v32 = __OFSUB__(v38, *(void *)&v29[v35 - 48]);
      unint64_t v33 = v38 - *(void *)&v29[v35 - 48];
      uint64_t v34 = v32;
      if (v32) {
        BUG();
      }
      uint64_t v39 = v27 - 2;
      uint64_t v40 = 16 * (v27 - 2);
      uint64_t v41 = *(void *)&v29[v40 + 8];
      uint64_t v32 = __OFSUB__(v41, *(void *)&v29[v40]);
      unint64_t v42 = v41 - *(void *)&v29[v40];
      if (v32) {
        BUG();
      }
      uint64_t v32 = __OFADD__(v33, v42);
      uint64_t v43 = v33 + v42;
      if (v32) {
        BUG();
      }
      if (v43 >= v37)
      {
        uint64_t v54 = *(void *)&v29[16 * v30 + 8];
        uint64_t v32 = __OFSUB__(v54, *(void *)&v29[16 * v30]);
        uint64_t v55 = v54 - *(void *)&v29[16 * v30];
        if (v32) {
          BUG();
        }
        if (v33 >= v55) {
          uint64_t v39 = v27 - 1;
        }
        unint64_t v30 = v39;
        goto LABEL_65;
      }
      goto LABEL_48;
    }
    unint64_t v7 = (char *)_swiftEmptyArrayStorage;
    uint64_t v27 = _swiftEmptyArrayStorage[2];
LABEL_80:
    uint64_t v80 = v7;
    if (v27 < 2)
    {
LABEL_95:
      swift_bridgeObjectRelease((_BYTE)v80);
      if (v76 < -1) {
        BUG();
      }
      void v71[2] = 0;
      swift_bridgeObjectRelease((_BYTE)v71);
    }
    else
    {
      uint64_t v63 = *a1;
      id v74 = *a1;
      while (1)
      {
        if (v27 < 2) {
          BUG();
        }
        if (!v63) {
          BUG();
        }
        unint64_t v64 = 16 * (v27 - 2);
        uint64_t v65 = 16 * (v27 - 1);
        uint64_t v66 = *(void *)&v80[v64 + 32];
        uint64_t v78 = *(void *)&v80[v65 + 40];
        specialized _merge<A>(low:mid:high:buffer:by:)((char *)(v63 + 8 * v66), (char *)(v63 + 8 * *(void *)&v80[v65 + 32]), v63 + 8 * v78, v70);
        if (v1) {
          break;
        }
        if (v78 < v66) {
          BUG();
        }
        if (!swift_isUniquelyReferenced_nonNull_native(v80)) {
          uint64_t v80 = specialized _ArrayBuffer._consumeAndCreateNew()((uint64_t)v80);
        }
        if (v27 - 2 >= *((void *)v80 + 2)) {
          BUG();
        }
        *(void *)&v80[v64 + 32] = v66;
        *(void *)&v80[v64 + 40] = v78;
        unint64_t v67 = *((void *)v80 + 2);
        if (v27 > v67) {
          BUG();
        }
        memmove(&v80[v65 + 32], &v80[16 * v27 + 32], 16 * (v67 - v27));
        *((void *)v80 + 2) = v67 - 1;
        uint64_t v27 = v67 - 1;
        uint64_t v63 = v74;
        if (v67 <= 2) {
          goto LABEL_95;
        }
      }
LABEL_92:
      swift_bridgeObjectRelease((_BYTE)v80);
      if (v76 < -1) {
        BUG();
      }
      void v71[2] = 0;
      swift_bridgeObjectRelease((_BYTE)v71);
    }
  }
}

{
  uint64_t v1;
  Swift::Int v2;
  Swift::Int v3;
  Swift::Int v4;
  char *v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  Swift::Int v9;
  uint64_t v10;
  Swift::Int v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unsigned __int8 v19;
  Swift::Int v20;
  unsigned __int8 v21;
  uint64_t v22;
  uint64_t *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unsigned __int8 v29;
  uint64_t v30;
  BOOL v31;
  long long *v32;
  long long *v33;
  uint64_t v34;
  uint64_t v35;
  long long v36;
  Swift::Int v37;
  uint64_t v38;
  void *v39;
  uint64_t v40;
  uint64_t v41;
  Swift::Int v42;
  void *v43;
  uint64_t v44;
  uint64_t v45;
  Swift::Int v46;
  unint64_t v47;
  unint64_t v48;
  uint64_t v49;
  char *v50;
  unint64_t v51;
  uint64_t v52;
  BOOL v53;
  uint64_t v54;
  BOOL v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  unint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  unint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  BOOL v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  char *v78;
  uint64_t v79;
  uint64_t v80;
  char *v81;
  unint64_t v82;
  char *v83;
  uint64_t v84;
  unint64_t v85;
  uint64_t v86;
  uint64_t v87;
  unint64_t v88;
  Swift::Int v89;
  uint64_t v91;
  uint64_t v92;
  char *v93;
  void *v94;
  Swift::Int v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  char *v103;
  uint64_t v104;
  char *v105;
  char *v106;
  char *v107;

  Swift::Int v2 = a1[1];
  Swift::Int v3 = _minimumMergeRunLength(_:)(v2);
  if (v3 >= v2)
  {
    if (v2 < 0) {
      BUG();
    }
    if (v2) {
      specialized MutableCollection<>._insertionSort(within:sortedEnd:by:)(0, v2, 1, a1);
    }
  }
  else
  {
    Swift::Int v4 = v3;
    uint64_t v98 = v1;
    id v94 = specialized static Array._allocateUninitialized(_:)(v2 / 2);
    id v93 = v5;
    uint64_t v99 = v2;
    if (v2 > 0)
    {
      id v89 = v4;
      uint64_t v6 = *a1;
      uint64_t v91 = *a1 + 8;
      uint64_t v92 = *a1 - 16;
      unint64_t v7 = (char *)_swiftEmptyArrayStorage;
      uint64_t v8 = 0;
      uint64_t v9 = v2;
      long long v100 = *a1;
      while (1)
      {
        uint64_t v10 = v8;
        uint64_t v11 = v8 + 1;
        uint64_t v12 = v9;
        uint64_t v102 = v10;
        if (v11 >= v9) {
          goto LABEL_28;
        }
        uint64_t v13 = *(void *)(v6 + 16 * v11);
        __m128 v14 = *(void *)(v6 + 16 * v11 + 8);
        uint64_t v15 = 16 * v10;
        uint64_t v16 = *(void *)(v6 + 16 * v10);
        uint64_t v17 = *(void *)(v6 + 16 * v10 + 8);
        if (v13 == v16 && v14 == v17) {
          break;
        }
        uint64_t v20 = v11;
        uint64_t v21 = _stringCompareWithSmolCheck(_:_:expecting:)(v13, v14, v16, v17, 1);
        uint64_t v11 = v20;
        uint64_t v6 = v100;
        uint64_t v22 = v12;
        uint64_t v19 = v21;
        uint64_t v18 = v102 + 2;
        if (v102 + 2 < v22) {
          goto LABEL_10;
        }
LABEL_19:
        uint64_t v11 = v18;
        uint64_t v31 = (v19 & 1) == 0;
        uint64_t v12 = v99;
        if (v31) {
          goto LABEL_28;
        }
LABEL_20:
        if (v18 < v102) {
          BUG();
        }
        if (v18 > v102)
        {
          uint64_t v32 = (long long *)(v92 + 16 * v18);
          unint64_t v33 = (long long *)(v6 + v15);
          uint64_t v34 = v18;
          BOOL v35 = v102;
          do
          {
            if (v35 != --v34)
            {
              if (!v6) {
                BUG();
              }
              uint64_t v36 = *v33;
              *unint64_t v33 = *v32;
              char *v32 = v36;
            }
            ++v35;
            --v32;
            ++v33;
          }
          while (v35 < v34);
        }
LABEL_27:
        uint64_t v11 = v18;
LABEL_28:
        if (v11 >= v12)
        {
          BOOL v37 = v102;
        }
        else
        {
          BOOL v37 = v102;
          if (__OFSUB__(v11, v102)) {
            BUG();
          }
          if (v11 - v102 < v89)
          {
            uint64_t v38 = v89 + v102;
            if (__OFADD__(v89, v102)) {
              BUG();
            }
            if (v38 >= v12) {
              uint64_t v38 = v12;
            }
            if (v38 < v102) {
              BUG();
            }
            if (v11 != v38)
            {
              uint64_t v106 = v7;
              uint64_t v39 = (void *)(v6 + 16 * v11);
              id v95 = v38;
              do
              {
                uint64_t v40 = *(void *)(v6 + 16 * v11);
                uint64_t v41 = *(void *)(v6 + 16 * v11 + 8);
                unint64_t v42 = v37;
                uint64_t v43 = v39;
                do
                {
                  uint64_t v44 = *(v43 - 2);
                  uint64_t v45 = *(v43 - 1);
                  if (v40 == v44 && v41 == v45) {
                    break;
                  }
                  uint64_t v46 = v11;
                  if ((_stringCompareWithSmolCheck(_:_:expecting:)(v40, v41, v44, v45, 1) & 1) == 0)
                  {
                    uint64_t v6 = v100;
                    uint64_t v11 = v46;
                    break;
                  }
                  uint64_t v6 = v100;
                  if (!v100) {
                    BUG();
                  }
                  uint64_t v11 = v46;
                  uint64_t v40 = *v43;
                  uint64_t v41 = v43[1];
                  *(_OWORD *)uint64_t v43 = *((_OWORD *)v43 - 1);
                  *(v43 - 2) = v40;
                  *(v43 - 1) = v41;
                  ++v42;
                  v43 -= 2;
                }
                while (v46 != v42);
                ++v11;
                v39 += 2;
                BOOL v37 = v102;
              }
              while (v11 != v95);
              uint64_t v11 = v95;
              unint64_t v7 = v106;
            }
          }
        }
        if (v11 < v37) {
          BUG();
        }
        uint64_t v96 = v11;
        if (!swift_isUniquelyReferenced_nonNull_native(v7)) {
          unint64_t v7 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *((void *)v7 + 2) + 1, 1, v7);
        }
        unint64_t v47 = *((void *)v7 + 2);
        uint64_t v48 = v47 + 1;
        uint64_t v6 = v100;
        uint64_t v8 = v96;
        if (*((void *)v7 + 3) >> 1 <= v47)
        {
          uint64_t v83 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(*((void *)v7 + 3) >= 2uLL, v47 + 1, 1, v7);
          uint64_t v8 = v96;
          uint64_t v6 = v100;
          unint64_t v7 = v83;
        }
        *((void *)v7 + 2) = v48;
        uint64_t v49 = 16 * v47;
        *(void *)&v7[v49 + 32] = v37;
        *(void *)&v7[v49 + 40] = v8;
        if (v47)
        {
          uint64_t v50 = v7 + 32;
          uint64_t v107 = v7;
          unint64_t v103 = v7 + 32;
          while (1)
          {
            BOOL v51 = v48 - 1;
            if (v48 >= 4) {
              break;
            }
            if (v48 == 3)
            {
              uint64_t v52 = *((void *)v7 + 5);
              uint64_t v53 = __OFSUB__(v52, *((void *)v7 + 4));
              uint64_t v54 = v52 - *((void *)v7 + 4);
              uint64_t v55 = v53;
LABEL_63:
              if (v55) {
                BUG();
              }
              uint64_t v65 = v48 - 2;
              uint64_t v66 = 16 * (v48 - 2);
              unint64_t v67 = *(void *)&v50[v66 + 8];
              uint64_t v53 = __OFSUB__(v67, *(void *)&v50[v66]);
              uint64_t v68 = v67 - *(void *)&v50[v66];
              uint64_t v69 = v53;
              if (v53) {
                BUG();
              }
              unint64_t v70 = *(void *)&v50[16 * v51 + 8];
              uint64_t v53 = __OFSUB__(v70, *(void *)&v50[16 * v51]);
              Swift::Int v71 = v70 - *(void *)&v50[16 * v51];
              if (v53) {
                BUG();
              }
              if (__OFADD__(v71, v68)) {
                BUG();
              }
              if (v71 + v68 >= v54)
              {
                if (v54 >= v71) {
                  uint64_t v65 = v48 - 1;
                }
                BOOL v51 = v65;
                goto LABEL_80;
              }
              goto LABEL_72;
            }
            uint64_t v72 = *((void *)v7 + 5);
            uint64_t v53 = __OFSUB__(v72, *((void *)v7 + 4));
            uint64_t v68 = v72 - *((void *)v7 + 4);
            uint64_t v69 = v53;
LABEL_72:
            if (v69) {
              BUG();
            }
            uint64_t v73 = *(void *)&v50[16 * v51 + 8];
            uint64_t v53 = __OFSUB__(v73, *(void *)&v50[16 * v51]);
            id v74 = v73 - *(void *)&v50[16 * v51];
            if (v53) {
              BUG();
            }
            if (v74 < v68) {
              goto LABEL_89;
            }
LABEL_80:
            if (v51 - 1 >= v48) {
              BUG();
            }
            if (!v6) {
              BUG();
            }
            unint64_t v77 = 16 * (v51 - 1);
            uint64_t v78 = &v50[16 * v51];
            uint64_t v79 = *(void *)&v50[v77];
            uint64_t v80 = *((void *)v78 + 1);
            specialized _merge<A>(low:mid:high:buffer:by:)((char *)(v6 + 16 * v79), (char *)(v6 + 16 * *(void *)v78), v6 + 16 * v80, v93);
            if (v98) {
              goto LABEL_107;
            }
            if (v80 < v79) {
              BUG();
            }
            if (v51 > *((void *)v107 + 2)) {
              BUG();
            }
            uint64_t v81 = &v103[v77];
            *(void *)uint64_t v81 = v79;
            *((void *)v81 + 1) = v80;
            id v82 = *((void *)v107 + 2);
            if (v51 >= v82) {
              BUG();
            }
            unint64_t v7 = v107;
            uint64_t v48 = v82 - 1;
            memmove(v78, v78 + 16, 16 * (v82 - 1 - v51));
            uint64_t v50 = v103;
            *((void *)v107 + 2) = v82 - 1;
            uint64_t v6 = v100;
            uint64_t v8 = v96;
            if (v82 <= 2) {
              goto LABEL_89;
            }
          }
          uint64_t v56 = 16 * v48;
          uint64_t v57 = *(void *)&v50[16 * v48 - 56];
          uint64_t v53 = __OFSUB__(v57, *(void *)&v50[16 * v48 - 64]);
          uint64_t v58 = v57 - *(void *)&v50[16 * v48 - 64];
          if (v53) {
            BUG();
          }
          uint64_t v59 = *(void *)&v50[v56 - 40];
          uint64_t v53 = __OFSUB__(v59, *(void *)&v50[v56 - 48]);
          uint64_t v54 = v59 - *(void *)&v50[v56 - 48];
          uint64_t v55 = v53;
          if (v53) {
            BUG();
          }
          float v60 = v48 - 2;
          uint64_t v61 = 16 * (v48 - 2);
          uint64_t v62 = *(void *)&v50[v61 + 8];
          uint64_t v53 = __OFSUB__(v62, *(void *)&v50[v61]);
          uint64_t v63 = v62 - *(void *)&v50[v61];
          if (v53) {
            BUG();
          }
          uint64_t v53 = __OFADD__(v54, v63);
          unint64_t v64 = v54 + v63;
          if (v53) {
            BUG();
          }
          if (v64 >= v58)
          {
            id v75 = *(void *)&v50[16 * v51 + 8];
            uint64_t v53 = __OFSUB__(v75, *(void *)&v50[16 * v51]);
            uint64_t v76 = v75 - *(void *)&v50[16 * v51];
            if (v53) {
              BUG();
            }
            if (v54 >= v76) {
              float v60 = v48 - 1;
            }
            BOOL v51 = v60;
            goto LABEL_80;
          }
          goto LABEL_63;
        }
        uint64_t v48 = 1;
LABEL_89:
        uint64_t v9 = v99;
        if (v8 >= v99) {
          goto LABEL_95;
        }
      }
      uint64_t v18 = v10 + 2;
      if (v10 + 2 >= v9) {
        goto LABEL_27;
      }
      uint64_t v19 = 0;
LABEL_10:
      uint64_t v105 = v7;
      uint64_t v23 = (uint64_t *)(v91 + 16 * v18);
      do
      {
        uint64_t v24 = *(v23 - 1);
        uint64_t v25 = *v23;
        uint64_t v26 = 16 * v11;
        uint64_t v27 = *(void *)(v6 + v26);
        uint64_t v28 = *(void *)(v6 + v26 + 8);
        if (v24 == v27 && v25 == v28)
        {
          if (v19)
          {
            uint64_t v12 = v99;
            unint64_t v7 = v105;
            goto LABEL_20;
          }
        }
        else
        {
          unint64_t v29 = _stringCompareWithSmolCheck(_:_:expecting:)(v24, v25, v27, v28, 1);
          uint64_t v6 = v100;
          if ((v19 ^ v29)) {
            goto LABEL_18;
          }
        }
        unint64_t v30 = v18 + 1;
        v23 += 2;
        uint64_t v11 = v18;
        uint64_t v18 = v30;
      }
      while (v30 < v99);
      uint64_t v18 = v30;
LABEL_18:
      unint64_t v7 = v105;
      goto LABEL_19;
    }
    unint64_t v7 = (char *)_swiftEmptyArrayStorage;
    uint64_t v48 = _swiftEmptyArrayStorage[2];
LABEL_95:
    uint64_t v107 = v7;
    if (v48 < 2)
    {
LABEL_110:
      swift_bridgeObjectRelease((_BYTE)v107);
      if (v99 < -1) {
        BUG();
      }
      v94[2] = 0;
      swift_bridgeObjectRelease((_BYTE)v94);
    }
    else
    {
      uint64_t v84 = *a1;
      uint64_t v97 = *a1;
      while (1)
      {
        uint64_t v85 = v48 - 2;
        if (v48 < 2) {
          BUG();
        }
        if (!v84) {
          BUG();
        }
        uint64_t v86 = 16 * v85;
        uint64_t v87 = 16 * (v48 - 1);
        uint64_t v101 = *(void *)&v107[16 * v85 + 32];
        float v104 = *(void *)&v107[v87 + 40];
        specialized _merge<A>(low:mid:high:buffer:by:)((char *)(v84 + 16 * v101), (char *)(v84 + 16 * *(void *)&v107[v87 + 32]), v84 + 16 * v104, v93);
        if (v98) {
          break;
        }
        if (v104 < v101) {
          BUG();
        }
        if (!swift_isUniquelyReferenced_nonNull_native(v107)) {
          uint64_t v107 = specialized _ArrayBuffer._consumeAndCreateNew()((uint64_t)v107);
        }
        if (v85 >= *((void *)v107 + 2)) {
          BUG();
        }
        *(void *)&v107[v86 + 32] = v101;
        *(void *)&v107[v86 + 40] = v104;
        uint64_t v88 = *((void *)v107 + 2);
        if (v48 > v88) {
          BUG();
        }
        memmove(&v107[v87 + 32], &v107[16 * v48 + 32], 16 * (v88 - v48));
        *((void *)v107 + 2) = v88 - 1;
        uint64_t v48 = v88 - 1;
        uint64_t v84 = v97;
        if (v88 <= 2) {
          goto LABEL_110;
        }
      }
LABEL_107:
      swift_bridgeObjectRelease((_BYTE)v107);
      if (v99 < -1) {
        BUG();
      }
      v94[2] = 0;
      swift_bridgeObjectRelease((_BYTE)v94);
    }
  }
}

{
  uint64_t v1;
  Swift::Int v2;
  Swift::Int v3;
  Swift::Int v4;
  char *v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unsigned char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _OWORD *v19;
  uint64_t v20;
  char v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  unint64_t v28;
  uint64_t v29;
  char *v30;
  unint64_t v31;
  uint64_t v32;
  BOOL v33;
  uint64_t v34;
  BOOL v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  unint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  unint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  BOOL v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  char *v58;
  uint64_t v59;
  uint64_t v60;
  char *v61;
  unint64_t v62;
  uint64_t v63;
  unint64_t v64;
  uint64_t v65;
  uint64_t v66;
  unint64_t v67;
  Swift::Int v68;
  uint64_t v70;
  char *v71;
  void *v72;
  unint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  char *v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  char *v82;

  Swift::Int v2 = a1[1];
  Swift::Int v3 = _minimumMergeRunLength(_:)(v2);
  if (v3 >= v2)
  {
    if (v2 < 0) {
      BUG();
    }
    if (v2) {
      specialized MutableCollection<>._insertionSort(within:sortedEnd:by:)(0, v2, 1, a1);
    }
  }
  else
  {
    Swift::Int v4 = v3;
    uint64_t v81 = v1;
    uint64_t v72 = specialized static Array._allocateUninitialized(_:)(v2 / 2);
    Swift::Int v71 = v5;
    unint64_t v77 = v2;
    if (v2 > 0)
    {
      uint64_t v68 = v4;
      uint64_t v6 = *a1;
      unint64_t v70 = *a1 + 40;
      unint64_t v7 = (char *)_swiftEmptyArrayStorage;
      uint64_t v8 = 0;
      uint64_t v9 = v77;
      uint64_t v80 = *a1;
      while (1)
      {
        uint64_t v10 = v8 + 1;
        if (v8 + 1 < v9)
        {
          uint64_t v11 = 16 * v10;
          if (*(unsigned char *)(v6 + v11 + 8)) {
            BUG();
          }
          uint64_t v12 = 16 * v8;
          if (*(unsigned char *)(v6 + 16 * v8 + 8)) {
            BUG();
          }
          uint64_t v13 = *(void *)(v6 + v11);
          __m128 v14 = *(void *)(v6 + 16 * v8);
          uint64_t v10 = v8 + 2;
          if (v8 + 2 < v9)
          {
            uint64_t v15 = (unsigned char *)(v70 + 16 * v8);
            while (1)
            {
              if (*v15) {
                BUG();
              }
              if (*(v15 - 16)) {
                BUG();
              }
              if (v13 < v14 == *((void *)v15 - 1) >= *((void *)v15 - 3)) {
                break;
              }
              ++v10;
              v15 += 16;
              if (v10 >= v9)
              {
                uint64_t v10 = v9;
                break;
              }
            }
          }
          if (v13 < v14)
          {
            if (v10 < v8) {
              BUG();
            }
            if (v10 > v8)
            {
              uint64_t v16 = 16 * v10 - 16;
              uint64_t v17 = v10;
              uint64_t v18 = v8;
              do
              {
                if (v18 != --v17)
                {
                  if (!v6) {
                    BUG();
                  }
                  uint64_t v19 = (_OWORD *)(v6 + v12);
                  uint64_t v20 = *(void *)(v6 + v12);
                  uint64_t v21 = *(unsigned char *)(v6 + v12 + 8);
                  if (v12 != v16 || (unint64_t)v19 >= v6 + v16 + 16) {
                    char *v19 = *(_OWORD *)(v6 + v16);
                  }
                  *(void *)(v6 + v16) = v20;
                  *(unsigned char *)(v6 + v16 + 8) = v21 & 1;
                }
                ++v18;
                v16 -= 16;
                v12 += 16;
              }
              while (v18 < v17);
            }
          }
        }
        if (v10 < v9)
        {
          if (__OFSUB__(v10, v8)) {
            BUG();
          }
          if (v10 - v8 < v68)
          {
            uint64_t v22 = v68 + v8;
            if (__OFADD__(v68, v8)) {
              BUG();
            }
            if (v22 >= v9) {
              uint64_t v22 = v9;
            }
            if (v22 < v8) {
              BUG();
            }
            if (v10 != v22)
            {
              uint64_t v23 = v6 + 16 * v10;
              do
              {
                uint64_t v24 = v8;
                uint64_t v25 = v23;
                do
                {
                  if (*(unsigned char *)(v25 + 8)) {
                    BUG();
                  }
                  if (*(unsigned char *)(v25 - 8)) {
                    BUG();
                  }
                  uint64_t v26 = *(void *)v25;
                  if (*(void *)v25 >= *(void *)(v25 - 16)) {
                    break;
                  }
                  if (!v6) {
                    BUG();
                  }
                  *(_OWORD *)uint64_t v25 = *(_OWORD *)(v25 - 16);
                  *(void *)(v25 - 16) = v26;
                  *(unsigned char *)(v25 - 8) = 0;
                  ++v24;
                  v25 -= 16;
                }
                while (v10 != v24);
                ++v10;
                v23 += 16;
              }
              while (v10 != v22);
              uint64_t v10 = v22;
            }
          }
        }
        if (v10 < v8) {
          BUG();
        }
        id v75 = v10;
        if (!swift_isUniquelyReferenced_nonNull_native(v7)) {
          unint64_t v7 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *((void *)v7 + 2) + 1, 1, v7);
        }
        uint64_t v27 = *((void *)v7 + 2);
        uint64_t v28 = v27 + 1;
        uint64_t v6 = v80;
        if (*((void *)v7 + 3) >> 1 <= v27)
        {
          uint64_t v6 = v80;
          unint64_t v7 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(*((void *)v7 + 3) >= 2uLL, v27 + 1, 1, v7);
        }
        *((void *)v7 + 2) = v28;
        unint64_t v29 = 16 * v27;
        *(void *)&v7[v29 + 32] = v8;
        *(void *)&v7[v29 + 40] = v75;
        if (v27) {
          break;
        }
        uint64_t v28 = 1;
LABEL_83:
        uint64_t v9 = v77;
        uint64_t v8 = v75;
        if (v75 >= v77) {
          goto LABEL_89;
        }
      }
      unint64_t v30 = v7 + 32;
      id v82 = v7;
      uint64_t v78 = v7 + 32;
      while (1)
      {
        uint64_t v31 = v28 - 1;
        if (v28 >= 4) {
          break;
        }
        if (v28 == 3)
        {
          uint64_t v32 = *((void *)v7 + 5);
          unint64_t v33 = __OFSUB__(v32, *((void *)v7 + 4));
          uint64_t v34 = v32 - *((void *)v7 + 4);
          BOOL v35 = v33;
LABEL_57:
          if (v35) {
            BUG();
          }
          uint64_t v45 = v28 - 2;
          uint64_t v46 = 16 * (v28 - 2);
          unint64_t v47 = *(void *)&v30[v46 + 8];
          unint64_t v33 = __OFSUB__(v47, *(void *)&v30[v46]);
          uint64_t v48 = v47 - *(void *)&v30[v46];
          uint64_t v49 = v33;
          if (v33) {
            BUG();
          }
          uint64_t v50 = *(void *)&v30[16 * v31 + 8];
          unint64_t v33 = __OFSUB__(v50, *(void *)&v30[16 * v31]);
          BOOL v51 = v50 - *(void *)&v30[16 * v31];
          if (v33) {
            BUG();
          }
          if (__OFADD__(v51, v48)) {
            BUG();
          }
          if (v51 + v48 >= v34)
          {
            if (v34 >= v51) {
              uint64_t v45 = v28 - 1;
            }
            uint64_t v31 = v45;
            goto LABEL_74;
          }
          goto LABEL_66;
        }
        uint64_t v52 = *((void *)v7 + 5);
        unint64_t v33 = __OFSUB__(v52, *((void *)v7 + 4));
        uint64_t v48 = v52 - *((void *)v7 + 4);
        uint64_t v49 = v33;
LABEL_66:
        if (v49) {
          BUG();
        }
        uint64_t v53 = *(void *)&v30[16 * v31 + 8];
        unint64_t v33 = __OFSUB__(v53, *(void *)&v30[16 * v31]);
        uint64_t v54 = v53 - *(void *)&v30[16 * v31];
        if (v33) {
          BUG();
        }
        if (v54 < v48) {
          goto LABEL_83;
        }
LABEL_74:
        if (v31 - 1 >= v28) {
          BUG();
        }
        if (!v6) {
          BUG();
        }
        uint64_t v57 = 16 * (v31 - 1);
        uint64_t v73 = v31;
        uint64_t v58 = &v30[16 * v31];
        uint64_t v59 = *(void *)&v30[v57];
        float v60 = *((void *)v58 + 1);
        specialized _merge<A>(low:mid:high:buffer:by:)((char *)(v6 + 16 * v59), (char *)(v6 + 16 * *(void *)v58), v6 + 16 * v60, v71);
        if (v81) {
          goto LABEL_101;
        }
        if (v60 < v59) {
          BUG();
        }
        if (v73 > *((void *)v82 + 2)) {
          BUG();
        }
        uint64_t v61 = &v78[v57];
        *(void *)uint64_t v61 = v59;
        *((void *)v61 + 1) = v60;
        uint64_t v62 = *((void *)v82 + 2);
        if (v73 >= v62) {
          BUG();
        }
        unint64_t v7 = v82;
        uint64_t v28 = v62 - 1;
        memmove(v58, v58 + 16, 16 * (v62 - 1 - v73));
        unint64_t v30 = v78;
        *((void *)v82 + 2) = v62 - 1;
        uint64_t v6 = v80;
        if (v62 <= 2) {
          goto LABEL_83;
        }
      }
      uint64_t v36 = 16 * v28;
      BOOL v37 = *(void *)&v30[16 * v28 - 56];
      unint64_t v33 = __OFSUB__(v37, *(void *)&v30[16 * v28 - 64]);
      uint64_t v38 = v37 - *(void *)&v30[16 * v28 - 64];
      if (v33) {
        BUG();
      }
      uint64_t v39 = *(void *)&v30[v36 - 40];
      unint64_t v33 = __OFSUB__(v39, *(void *)&v30[v36 - 48]);
      uint64_t v34 = v39 - *(void *)&v30[v36 - 48];
      BOOL v35 = v33;
      if (v33) {
        BUG();
      }
      uint64_t v40 = v28 - 2;
      uint64_t v41 = 16 * (v28 - 2);
      unint64_t v42 = *(void *)&v30[v41 + 8];
      unint64_t v33 = __OFSUB__(v42, *(void *)&v30[v41]);
      uint64_t v43 = v42 - *(void *)&v30[v41];
      if (v33) {
        BUG();
      }
      unint64_t v33 = __OFADD__(v34, v43);
      uint64_t v44 = v34 + v43;
      if (v33) {
        BUG();
      }
      if (v44 >= v38)
      {
        uint64_t v55 = *(void *)&v30[16 * v31 + 8];
        unint64_t v33 = __OFSUB__(v55, *(void *)&v30[16 * v31]);
        uint64_t v56 = v55 - *(void *)&v30[16 * v31];
        if (v33) {
          BUG();
        }
        if (v34 >= v56) {
          uint64_t v40 = v28 - 1;
        }
        uint64_t v31 = v40;
        goto LABEL_74;
      }
      goto LABEL_57;
    }
    unint64_t v7 = (char *)_swiftEmptyArrayStorage;
    uint64_t v28 = _swiftEmptyArrayStorage[2];
LABEL_89:
    id v82 = v7;
    if (v28 < 2)
    {
LABEL_104:
      swift_bridgeObjectRelease((_BYTE)v82);
      if (v77 < -1) {
        BUG();
      }
      v72[2] = 0;
      swift_bridgeObjectRelease((_BYTE)v72);
    }
    else
    {
      uint64_t v63 = *a1;
      uint64_t v76 = *a1;
      while (1)
      {
        unint64_t v64 = v28 - 2;
        if (v28 < 2) {
          BUG();
        }
        if (!v63) {
          BUG();
        }
        uint64_t v65 = 16 * v64;
        uint64_t v66 = 16 * (v28 - 1);
        uint64_t v79 = *(void *)&v82[16 * v64 + 32];
        id v74 = *(void *)&v82[v66 + 40];
        specialized _merge<A>(low:mid:high:buffer:by:)((char *)(v63 + 16 * v79), (char *)(v63 + 16 * *(void *)&v82[v66 + 32]), v63 + 16 * v74, v71);
        if (v81) {
          break;
        }
        if (v74 < v79) {
          BUG();
        }
        if (!swift_isUniquelyReferenced_nonNull_native(v82)) {
          id v82 = specialized _ArrayBuffer._consumeAndCreateNew()((uint64_t)v82);
        }
        if (v64 >= *((void *)v82 + 2)) {
          BUG();
        }
        *(void *)&v82[v65 + 32] = v79;
        *(void *)&v82[v65 + 40] = v74;
        unint64_t v67 = *((void *)v82 + 2);
        if (v28 > v67) {
          BUG();
        }
        memmove(&v82[v66 + 32], &v82[16 * v28 + 32], 16 * (v67 - v28));
        *((void *)v82 + 2) = v67 - 1;
        uint64_t v28 = v67 - 1;
        uint64_t v63 = v76;
        if (v67 <= 2) {
          goto LABEL_104;
        }
      }
LABEL_101:
      swift_bridgeObjectRelease((_BYTE)v82);
      if (v77 < -1) {
        BUG();
      }
      v72[2] = 0;
      swift_bridgeObjectRelease((_BYTE)v72);
    }
  }
}

void specialized MutableCollection<>._insertionSort(within:sortedEnd:by:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  if (a3 != a2)
  {
    uint64_t v4 = *a4;
    uint64_t v5 = *a4 + 16 * a3 - 16;
    do
    {
      uint64_t v6 = *(void *)(v4 + 16 * a3);
      uint64_t v7 = a1;
      uint64_t v8 = v5;
      do
      {
        if (v6 >= *(void *)v8) {
          break;
        }
        if (!v4) {
          BUG();
        }
        uint64_t v9 = *(void *)(v8 + 24);
        *(_OWORD *)(v8 + 16) = *(_OWORD *)v8;
        *(void *)uint64_t v8 = v6;
        *(void *)(v8 + 8) = v9;
        v8 -= 16;
        ++v7;
      }
      while (a3 != v7);
      ++a3;
      v5 += 16;
    }
    while (a3 != a2);
  }
}

{
  uint64_t v4;
  uint64_t v5;
  double v6;
  uint64_t v7;
  uint64_t v8;
  long long v9;
  long long v10;
  long long v11;
  long long v12;
  long long v13;

  if (a3 != a2)
  {
    uint64_t v4 = *a4;
    uint64_t v5 = *a4 + 56 * a3;
    do
    {
      uint64_t v6 = *(double *)(v4 + 56 * a3 + 48);
      uint64_t v7 = a1;
      uint64_t v8 = v5;
      do
      {
        if (v6 <= *(double *)(v8 - 8)) {
          break;
        }
        if (!v4) {
          BUG();
        }
        uint64_t v9 = *(_OWORD *)v8;
        uint64_t v10 = *(_OWORD *)(v8 + 16);
        uint64_t v11 = *(_OWORD *)(v8 + 32);
        uint64_t v12 = *(_OWORD *)(v8 - 56 + 16);
        uint64_t v13 = *(_OWORD *)(v8 - 56 + 32);
        *(_OWORD *)uint64_t v8 = *(_OWORD *)(v8 - 56);
        *(_OWORD *)(v8 + 16) = v12;
        *(_OWORD *)(v8 + 32) = v13;
        *(void *)(v8 + 48) = *(void *)(v8 - 56 + 48);
        *(_OWORD *)(v8 - 56) = v9;
        *(_OWORD *)(v8 - 40) = v10;
        *(_OWORD *)(v8 - 24) = v11;
        *(double *)(v8 - 8) = v6;
        ++v7;
        v8 -= 56;
      }
      while (a3 != v7);
      ++a3;
      v5 += 56;
    }
    while (a3 != a2);
  }
}

{
  uint64_t v4;
  uint64_t v5;
  double v6;
  uint64_t v7;
  double *v8;
  double v9;

  if (a3 != a2)
  {
    uint64_t v4 = *a4;
    uint64_t v5 = *a4 + 16 * a3;
    do
    {
      uint64_t v6 = *(double *)(v4 + 16 * a3 + 8);
      uint64_t v7 = a1;
      uint64_t v8 = (double *)v5;
      do
      {
        if (*(v8 - 1) <= v6) {
          break;
        }
        if (!v4) {
          BUG();
        }
        uint64_t v9 = *v8;
        *(_OWORD *)uint64_t v8 = *((_OWORD *)v8 - 1);
        *(v8 - 2) = v9;
        *(v8 - 1) = v6;
        ++v7;
        v8 -= 2;
      }
      while (a3 != v7);
      ++a3;
      v5 += 16;
    }
    while (a3 != a2);
  }
}

{
  uint64_t v4;
  uint64_t v5;
  double v6;
  uint64_t v7;
  double *v8;
  double v9;

  if (a3 != a2)
  {
    uint64_t v4 = *a4;
    uint64_t v5 = *a4 + 16 * a3;
    do
    {
      uint64_t v6 = *(double *)(v4 + 16 * a3 + 8);
      uint64_t v7 = a1;
      uint64_t v8 = (double *)v5;
      do
      {
        if (v6 <= *(v8 - 1)) {
          break;
        }
        if (!v4) {
          BUG();
        }
        uint64_t v9 = *v8;
        *(_OWORD *)uint64_t v8 = *((_OWORD *)v8 - 1);
        *(v8 - 2) = v9;
        *(v8 - 1) = v6;
        ++v7;
        v8 -= 2;
      }
      while (a3 != v7);
      ++a3;
      v5 += 16;
    }
    while (a3 != a2);
  }
}

{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  uint64_t v9;

  if (a3 != a2)
  {
    uint64_t v4 = *a4;
    uint64_t v5 = *a4 + 16 * a3;
    do
    {
      uint64_t v6 = *(void *)(v4 + 16 * a3 + 8);
      uint64_t v7 = a1;
      uint64_t v8 = (void *)v5;
      do
      {
        if (v6 >= *(v8 - 1)) {
          break;
        }
        if (!v4) {
          BUG();
        }
        uint64_t v9 = *v8;
        *(_OWORD *)uint64_t v8 = *((_OWORD *)v8 - 1);
        *(v8 - 2) = v9;
        *(v8 - 1) = v6;
        ++v7;
        v8 -= 2;
      }
      while (a3 != v7);
      ++a3;
      v5 += 16;
    }
    while (a3 != a2);
  }
}

{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  if (a3 != a2)
  {
    uint64_t v4 = *a4;
    uint64_t v5 = *a4 + 16 * a3 - 16;
    do
    {
      uint64_t v6 = *(void *)(v4 + 16 * a3);
      uint64_t v7 = a1;
      uint64_t v8 = v5;
      do
      {
        if (v6 >= *(void *)v8) {
          break;
        }
        if (!v4) {
          BUG();
        }
        uint64_t v9 = *(void *)(v8 + 24);
        *(_OWORD *)(v8 + 16) = *(_OWORD *)v8;
        *(void *)uint64_t v8 = v6;
        *(void *)(v8 + 8) = v9;
        v8 -= 16;
        ++v7;
      }
      while (a3 != v7);
      ++a3;
      v5 += 16;
    }
    while (a3 != a2);
  }
}

{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unsigned __int8 v10;
  uint64_t v11;
  uint64_t v12;
  char v13;
  char v14;
  char v15;
  long long v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;

  if (a3 != a2)
  {
    uint64_t v4 = a3;
    uint64_t v5 = *a4;
    uint64_t v6 = *a4 + 24 * a3;
    uint64_t v22 = *a4;
    do
    {
      uint64_t v7 = a1;
      uint64_t v18 = v6;
      uint64_t v21 = v4;
      do
      {
        uint64_t v8 = *(void *)v6;
        uint64_t v9 = *(void *)(v6 - 24);
        uint64_t v10 = *(unsigned char *)(v6 - 8);
        if (*(unsigned char *)(v6 + 16))
        {
          if (((v8 != v9) & v10) != 1 || v8 >= v9) {
            break;
          }
          goto LABEL_13;
        }
        if ((v10 & 1) == 0)
        {
          uint64_t v11 = *(void *)(v6 + 8);
          uint64_t v12 = *(void *)(v6 - 16);
          if (v8 == v9 && v11 == v12) {
            break;
          }
          uint64_t v17 = *(void *)(v6 + 8);
          uint64_t v20 = *(void *)(v6 - 16);
          uint64_t v13 = _stringCompareWithSmolCheck(_:_:expecting:)(*(void *)v6, v11, v9, v12, 0);
          uint64_t v5 = v22;
          uint64_t v4 = v21;
          if (v13) {
            break;
          }
          __m128 v14 = _stringCompareWithSmolCheck(_:_:expecting:)(v8, v17, v9, v20, 1);
          uint64_t v5 = v22;
          uint64_t v4 = v21;
          if ((v14 & 1) == 0) {
            break;
          }
        }
LABEL_13:
        if (!v5) {
          BUG();
        }
        uint64_t v15 = *(unsigned char *)(v6 + 16);
        uint64_t v16 = *(_OWORD *)v6;
        *(_OWORD *)uint64_t v6 = *(_OWORD *)(v6 - 24);
        *(void *)(v6 + 16) = *(void *)(v6 - 24 + 16);
        *(_OWORD *)(v6 - 24) = v16;
        *(unsigned char *)(v6 - 8) = v15;
        ++v7;
        v6 -= 24;
      }
      while (v4 != v7);
      ++v4;
      uint64_t v6 = v18 + 24;
    }
    while (v4 != a2);
  }
}

{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  if (a3 != a2)
  {
    uint64_t v4 = *a4;
    uint64_t v5 = *a4 - 8;
    uint64_t v6 = a3;
    do
    {
      uint64_t v7 = *(void *)(v4 + 8 * v6);
      uint64_t v8 = a3;
      do
      {
        uint64_t v9 = *(void *)(v5 + 8 * v8);
        if (v7 >= v9) {
          break;
        }
        if (!v4) {
          BUG();
        }
        *(void *)(v5 + 8 * v8 + 8) = v9;
        *(void *)(v5 + 8 * v8--) = v7;
      }
      while (a1 != v8);
      ++v6;
      v5 += 8;
      --a1;
    }
    while (v6 != a2);
  }
}

{
  uint64_t v4;
  uint64_t v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void *v12;

  if (a3 != a2)
  {
    uint64_t v4 = a3;
    uint64_t v5 = *a4;
    uint64_t v6 = (void *)(*a4 + 16 * a3);
    do
    {
      uint64_t v7 = *(void *)(v5 + 16 * v4);
      uint64_t v8 = *(void *)(v5 + 16 * v4 + 8);
      uint64_t v9 = a1;
      uint64_t v12 = v6;
      do
      {
        uint64_t v10 = *(v6 - 2);
        uint64_t v11 = *(v6 - 1);
        if (v7 == v10 && v8 == v11) {
          break;
        }
        if ((_stringCompareWithSmolCheck(_:_:expecting:)(v7, v8, v10, v11, 1) & 1) == 0) {
          break;
        }
        if (!v5) {
          BUG();
        }
        uint64_t v7 = *v6;
        uint64_t v8 = v6[1];
        *(_OWORD *)uint64_t v6 = *((_OWORD *)v6 - 1);
        *(v6 - 2) = v7;
        *(v6 - 1) = v8;
        ++v9;
        v6 -= 2;
      }
      while (v4 != v9);
      ++v4;
      uint64_t v6 = v12 + 2;
    }
    while (v4 != a2);
  }
}

{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  if (a3 != a2)
  {
    uint64_t v4 = *a4;
    uint64_t v5 = *a4 + 16 * a3;
    do
    {
      uint64_t v6 = a1;
      uint64_t v7 = v5;
      do
      {
        if (*(unsigned char *)(v7 + 8)) {
          BUG();
        }
        if (*(unsigned char *)(v7 - 8)) {
          BUG();
        }
        uint64_t v8 = *(void *)v7;
        if (*(void *)v7 >= *(void *)(v7 - 16)) {
          break;
        }
        if (!v4) {
          BUG();
        }
        *(_OWORD *)uint64_t v7 = *(_OWORD *)(v7 - 16);
        *(void *)(v7 - 16) = v8;
        *(unsigned char *)(v7 - 8) = 0;
        ++v6;
        v7 -= 16;
      }
      while (a3 != v6);
      ++a3;
      v5 += 16;
    }
    while (a3 != a2);
  }
}

char specialized _merge<A>(low:mid:high:buffer:by:)(char *a1, char *a2, unint64_t a3, char *a4)
{
  uint64_t v5 = a2;
  uint64_t v6 = a1;
  uint64_t v7 = a2 - a1;
  uint64_t v8 = v7 / 16;
  uint64_t v9 = (uint64_t)(a3 - (void)a2) / 16;
  if (v7 / 16 >= v9)
  {
    uint64_t v22 = a3 - (void)a2;
    uint64_t v14 = (uint64_t)(a3 - (void)a2) / 16;
    specialized UnsafeMutablePointer.moveInitialize(from:count:)(a2, v9, a4);
    uint64_t v10 = a4;
    uint64_t v11 = &a4[16 * v14];
    if (v6 >= a2 || v22 < 16) {
      goto LABEL_27;
    }
    uint64_t v15 = (char *)(a3 - 16);
    while (1)
    {
      uint64_t v16 = v15 + 16;
      if (*((void *)v11 - 2) >= *((void *)v5 - 2))
      {
        uint64_t v17 = v11 - 16;
        if (v16 == v11)
        {
          BOOL v18 = v15 < v11;
          v11 -= 16;
          if (v18) {
            goto LABEL_25;
          }
        }
        else
        {
          v11 -= 16;
        }
      }
      else
      {
        uint64_t v17 = v5 - 16;
        if (v16 == v5)
        {
          BOOL v18 = v15 < v5;
          v5 -= 16;
          if (v18) {
            goto LABEL_25;
          }
        }
        else
        {
          v5 -= 16;
        }
      }
      *(_OWORD *)uint64_t v15 = *(_OWORD *)v17;
LABEL_25:
      if (v5 > v6)
      {
        v15 -= 16;
        if (v11 > a4) {
          continue;
        }
      }
      goto LABEL_27;
    }
  }
  uint64_t v21 = v7;
  specialized UnsafeMutablePointer.moveInitialize(from:count:)(v6, v8, a4);
  uint64_t v10 = a4;
  uint64_t v11 = &a4[16 * v8];
  if ((unint64_t)a2 < a3 && v21 >= 16)
  {
    while (*(void *)v5 < *(void *)v10)
    {
      uint64_t v12 = v5;
      BOOL v13 = v6 == v5;
      v5 += 16;
      if (!v13) {
        goto LABEL_8;
      }
LABEL_9:
      v6 += 16;
      if (v10 >= v11 || (unint64_t)v5 >= a3) {
        goto LABEL_11;
      }
    }
    uint64_t v12 = v10;
    BOOL v13 = v6 == v10;
    v10 += 16;
    if (v13) {
      goto LABEL_9;
    }
LABEL_8:
    *(_OWORD *)uint64_t v6 = *(_OWORD *)v12;
    goto LABEL_9;
  }
LABEL_11:
  uint64_t v5 = v6;
LABEL_27:
  specialized UnsafeMutablePointer.moveInitialize(from:count:)(v10, (v11 - v10) / 16, v5);
  return 1;
}

{
  char *v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  char *v11;
  unint64_t v12;
  char *v13;
  unint64_t v14;
  uint64_t v15;
  char *v16;
  char *v17;
  char *v18;
  BOOL v19;
  uint64_t v22;
  uint64_t v23;

  uint64_t v5 = a2;
  uint64_t v6 = a1;
  uint64_t v7 = a2 - a1;
  uint64_t v8 = v7 / 16;
  uint64_t v9 = (uint64_t)(a3 - (void)a2) / 16;
  if (v7 / 16 >= v9)
  {
    uint64_t v23 = a3 - (void)a2;
    uint64_t v15 = (uint64_t)(a3 - (void)a2) / 16;
    specialized UnsafeMutablePointer.moveInitialize(from:count:)(a2, v9, a4);
    uint64_t v10 = a4;
    uint64_t v11 = &a4[16 * v15];
    if (v6 >= a2 || v23 < 16) {
      goto LABEL_31;
    }
    uint64_t v16 = (char *)(a3 - 16);
    while (1)
    {
      uint64_t v17 = v16 + 16;
      if (*((double *)v5 - 1) <= *((double *)v11 - 1))
      {
        BOOL v18 = v11 - 16;
        if (v17 == v11)
        {
          uint64_t v19 = v16 < v11;
          v11 -= 16;
          if (v19) {
            goto LABEL_29;
          }
        }
        else
        {
          v11 -= 16;
        }
      }
      else
      {
        BOOL v18 = v5 - 16;
        if (v17 == v5)
        {
          uint64_t v19 = v16 < v5;
          v5 -= 16;
          if (v19) {
            goto LABEL_29;
          }
        }
        else
        {
          v5 -= 16;
        }
      }
      *(_OWORD *)uint64_t v16 = *(_OWORD *)v18;
LABEL_29:
      if (v5 > v6)
      {
        v16 -= 16;
        if (v11 > a4) {
          continue;
        }
      }
      goto LABEL_31;
    }
  }
  uint64_t v22 = v7;
  specialized UnsafeMutablePointer.moveInitialize(from:count:)(v6, v8, a4);
  uint64_t v10 = a4;
  uint64_t v11 = &a4[16 * v8];
  if ((unint64_t)a2 < a3 && v22 >= 16)
  {
    while (1)
    {
      if (*((double *)v10 + 1) <= *((double *)v5 + 1))
      {
        uint64_t v14 = (unint64_t)(v10 + 16);
        BOOL v13 = v10;
        uint64_t v12 = (unint64_t)v5;
        if (v6 == v10)
        {
          v10 += 16;
          if ((unint64_t)v6 < v14) {
            goto LABEL_13;
          }
        }
        else
        {
          v10 += 16;
        }
      }
      else
      {
        uint64_t v12 = (unint64_t)(v5 + 16);
        BOOL v13 = v5;
        if (v6 == v5 && (unint64_t)v6 < v12) {
          goto LABEL_13;
        }
      }
      *(_OWORD *)uint64_t v6 = *(_OWORD *)v13;
LABEL_13:
      v6 += 16;
      if (v10 < v11)
      {
        uint64_t v5 = (char *)v12;
        if (v12 < a3) {
          continue;
        }
      }
      break;
    }
  }
  uint64_t v5 = v6;
LABEL_31:
  specialized UnsafeMutablePointer.moveInitialize(from:count:)(v10, (v11 - v10) / 16, v5);
  return 1;
}

{
  char *v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  char *v11;
  unint64_t v12;
  char *v13;
  unint64_t v14;
  uint64_t v15;
  char *v16;
  char *v17;
  char *v18;
  BOOL v19;
  uint64_t v22;
  uint64_t v23;

  uint64_t v5 = a2;
  uint64_t v6 = a1;
  uint64_t v7 = a2 - a1;
  uint64_t v8 = v7 / 16;
  uint64_t v9 = (uint64_t)(a3 - (void)a2) / 16;
  if (v7 / 16 >= v9)
  {
    uint64_t v23 = a3 - (void)a2;
    uint64_t v15 = (uint64_t)(a3 - (void)a2) / 16;
    specialized UnsafeMutablePointer.moveInitialize(from:count:)(a2, v9, a4);
    uint64_t v10 = a4;
    uint64_t v11 = &a4[16 * v15];
    if (v6 >= a2 || v23 < 16) {
      goto LABEL_31;
    }
    uint64_t v16 = (char *)(a3 - 16);
    while (1)
    {
      uint64_t v17 = v16 + 16;
      if (*((double *)v11 - 1) <= *((double *)v5 - 1))
      {
        BOOL v18 = v11 - 16;
        if (v17 == v11)
        {
          uint64_t v19 = v16 < v11;
          v11 -= 16;
          if (v19) {
            goto LABEL_29;
          }
        }
        else
        {
          v11 -= 16;
        }
      }
      else
      {
        BOOL v18 = v5 - 16;
        if (v17 == v5)
        {
          uint64_t v19 = v16 < v5;
          v5 -= 16;
          if (v19) {
            goto LABEL_29;
          }
        }
        else
        {
          v5 -= 16;
        }
      }
      *(_OWORD *)uint64_t v16 = *(_OWORD *)v18;
LABEL_29:
      if (v5 > v6)
      {
        v16 -= 16;
        if (v11 > a4) {
          continue;
        }
      }
      goto LABEL_31;
    }
  }
  uint64_t v22 = v7;
  specialized UnsafeMutablePointer.moveInitialize(from:count:)(v6, v8, a4);
  uint64_t v10 = a4;
  uint64_t v11 = &a4[16 * v8];
  if ((unint64_t)a2 < a3 && v22 >= 16)
  {
    while (1)
    {
      if (*((double *)v5 + 1) <= *((double *)v10 + 1))
      {
        uint64_t v14 = (unint64_t)(v10 + 16);
        BOOL v13 = v10;
        uint64_t v12 = (unint64_t)v5;
        if (v6 == v10)
        {
          v10 += 16;
          if ((unint64_t)v6 < v14) {
            goto LABEL_13;
          }
        }
        else
        {
          v10 += 16;
        }
      }
      else
      {
        uint64_t v12 = (unint64_t)(v5 + 16);
        BOOL v13 = v5;
        if (v6 == v5 && (unint64_t)v6 < v12) {
          goto LABEL_13;
        }
      }
      *(_OWORD *)uint64_t v6 = *(_OWORD *)v13;
LABEL_13:
      v6 += 16;
      if (v10 < v11)
      {
        uint64_t v5 = (char *)v12;
        if (v12 < a3) {
          continue;
        }
      }
      break;
    }
  }
  uint64_t v5 = v6;
LABEL_31:
  specialized UnsafeMutablePointer.moveInitialize(from:count:)(v10, (v11 - v10) / 16, v5);
  return 1;
}

{
  char *v5;
  int64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  char *v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  char v15;
  char *v16;
  BOOL v17;
  long long v18;
  uint64_t v19;
  uint64_t v20;
  char v21;
  char v22;
  uint64_t v23;
  char *v24;
  unint64_t v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  unsigned __int8 v29;
  char *v30;
  BOOL v31;
  uint64_t v32;
  uint64_t v33;
  char v34;
  char v35;
  long long v36;
  uint64_t v38;
  char *v39;
  char *v40;
  uint64_t v41;
  uint64_t v42;
  char *v44;
  char *v46;

  uint64_t v5 = a2;
  uint64_t v6 = a2 - a1;
  uint64_t v7 = a3 - (void)a2;
  uint64_t v8 = (uint64_t)(a3 - (void)a2) / 24;
  if ((a2 - a1) / 24 >= v8)
  {
    uint64_t v23 = (uint64_t)(a3 - (void)a2) / 24;
    specialized UnsafeMutablePointer.moveInitialize(from:count:)(a2, v8, a4);
    uint64_t v24 = a1;
    uint64_t v10 = a4;
    uint64_t v11 = &a4[24 * v23];
    if (a1 >= a2 || v7 < 24) {
      goto LABEL_47;
    }
    uint64_t v25 = a3 - 24;
    while (1)
    {
      uint64_t v26 = (char *)(v25 + 24);
      uint64_t v27 = *((void *)v11 - 3);
      uint64_t v28 = *((void *)v5 - 3);
      unint64_t v29 = *(v5 - 8);
      if (*(v11 - 8))
      {
        if (((v27 != v28) & v29) == 1 && v27 < v28) {
          goto LABEL_29;
        }
      }
      else
      {
        if (v29) {
          goto LABEL_29;
        }
        uint64_t v32 = *((void *)v11 - 2);
        unint64_t v33 = *((void *)v5 - 2);
        if (v27 != v28 || v32 != v33)
        {
          uint64_t v40 = v11;
          uint64_t v38 = *((void *)v11 - 2);
          unint64_t v42 = *((void *)v5 - 2);
          uint64_t v34 = _stringCompareWithSmolCheck(_:_:expecting:)(v27, v32, v28, v33, 0);
          uint64_t v26 = (char *)(v25 + 24);
          uint64_t v11 = v40;
          uint64_t v24 = a1;
          uint64_t v10 = a4;
          if ((v34 & 1) == 0)
          {
            BOOL v35 = _stringCompareWithSmolCheck(_:_:expecting:)(v27, v38, v28, v42, 1);
            uint64_t v26 = (char *)(v25 + 24);
            uint64_t v11 = v40;
            uint64_t v24 = a1;
            uint64_t v10 = a4;
            if (v35)
            {
LABEL_29:
              unint64_t v30 = v5 - 24;
              if (v26 == v5)
              {
                uint64_t v31 = v25 < (unint64_t)v5;
                v5 -= 24;
                if (v31) {
                  goto LABEL_42;
                }
              }
              else
              {
                v5 -= 24;
              }
              goto LABEL_41;
            }
          }
        }
      }
      unint64_t v30 = v11 - 24;
      if (v26 == v11)
      {
        uint64_t v31 = v25 < (unint64_t)v11;
        v11 -= 24;
        if (v31) {
          goto LABEL_42;
        }
      }
      else
      {
        v11 -= 24;
      }
LABEL_41:
      uint64_t v36 = *(_OWORD *)v30;
      *(void *)(v25 + 16) = *((void *)v30 + 2);
      *(_OWORD *)uint64_t v25 = v36;
LABEL_42:
      if (v5 > v24)
      {
        v25 -= 24;
        if (v11 > v10) {
          continue;
        }
      }
      goto LABEL_47;
    }
  }
  uint64_t v9 = v6 / 24;
  specialized UnsafeMutablePointer.moveInitialize(from:count:)(a1, v6 / 24, a4);
  uint64_t v10 = a4;
  uint64_t v11 = &a4[24 * v9];
  if ((unint64_t)a2 < a3 && a2 - a1 >= 24)
  {
    uint64_t v12 = a1;
    uint64_t v39 = &a4[24 * v9];
    while (1)
    {
      BOOL v13 = *(void *)v5;
      uint64_t v14 = *(void *)v10;
      uint64_t v15 = v10[16];
      if (v5[16])
      {
        if (((v13 != v14) & v15) == 1 && v13 < v14) {
          goto LABEL_10;
        }
      }
      else
      {
        if (v15) {
          goto LABEL_10;
        }
        uint64_t v19 = *((void *)v5 + 1);
        uint64_t v20 = *((void *)v10 + 1);
        if (v13 != v14 || v19 != v20)
        {
          uint64_t v46 = v12;
          uint64_t v41 = *((void *)v10 + 1);
          uint64_t v44 = v10;
          uint64_t v21 = _stringCompareWithSmolCheck(_:_:expecting:)(v13, v19, v14, v20, 0);
          uint64_t v11 = v39;
          uint64_t v12 = v46;
          uint64_t v10 = v44;
          if ((v21 & 1) == 0)
          {
            uint64_t v22 = _stringCompareWithSmolCheck(_:_:expecting:)(v13, v19, v14, v41, 1);
            uint64_t v11 = v39;
            uint64_t v12 = v46;
            uint64_t v10 = v44;
            if (v22)
            {
LABEL_10:
              uint64_t v16 = v5;
              uint64_t v17 = v12 == v5;
              v5 += 24;
              if (v17) {
                goto LABEL_12;
              }
LABEL_11:
              BOOL v18 = *(_OWORD *)v16;
              *((void *)v12 + 2) = *((void *)v16 + 2);
              *(_OWORD *)uint64_t v12 = v18;
              goto LABEL_12;
            }
          }
        }
      }
      uint64_t v16 = v10;
      uint64_t v17 = v12 == v10;
      v10 += 24;
      if (!v17) {
        goto LABEL_11;
      }
LABEL_12:
      v12 += 24;
      if (v10 >= v11 || (unint64_t)v5 >= a3)
      {
        uint64_t v5 = v12;
        goto LABEL_47;
      }
    }
  }
  uint64_t v5 = a1;
LABEL_47:
  specialized UnsafeMutablePointer.moveInitialize(from:count:)(v10, (v11 - v10) / 24, v5);
  return 1;
}

{
  char *v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  char *v11;
  char *v12;
  BOOL v13;
  uint64_t v14;
  char *v15;
  char *v16;
  char *v17;
  BOOL v18;
  uint64_t v21;
  uint64_t v22;

  uint64_t v5 = a2;
  uint64_t v6 = a1;
  uint64_t v7 = a2 - a1;
  uint64_t v8 = v7 / 16;
  uint64_t v9 = (uint64_t)(a3 - (void)a2) / 16;
  if (v7 / 16 >= v9)
  {
    uint64_t v22 = a3 - (void)a2;
    uint64_t v14 = (uint64_t)(a3 - (void)a2) / 16;
    specialized UnsafeMutablePointer.moveInitialize(from:count:)(a2, v9, a4);
    uint64_t v10 = a4;
    uint64_t v11 = &a4[16 * v14];
    if (v6 >= a2 || v22 < 16) {
      goto LABEL_31;
    }
    uint64_t v15 = (char *)(a3 - 16);
    while (1)
    {
      if (*(v11 - 8)) {
        BUG();
      }
      if (*(v5 - 8)) {
        BUG();
      }
      uint64_t v16 = v15 + 16;
      if (*((void *)v11 - 2) >= *((void *)v5 - 2))
      {
        uint64_t v17 = v11 - 16;
        if (v16 == v11)
        {
          BOOL v18 = v15 < v11;
          v11 -= 16;
          if (v18) {
            goto LABEL_29;
          }
        }
        else
        {
          v11 -= 16;
        }
      }
      else
      {
        uint64_t v17 = v5 - 16;
        if (v16 == v5)
        {
          BOOL v18 = v15 < v5;
          v5 -= 16;
          if (v18) {
            goto LABEL_29;
          }
        }
        else
        {
          v5 -= 16;
        }
      }
      *(_OWORD *)uint64_t v15 = *(_OWORD *)v17;
LABEL_29:
      if (v5 > v6)
      {
        v15 -= 16;
        if (v11 > a4) {
          continue;
        }
      }
      goto LABEL_31;
    }
  }
  uint64_t v21 = v7;
  specialized UnsafeMutablePointer.moveInitialize(from:count:)(v6, v8, a4);
  uint64_t v10 = a4;
  uint64_t v11 = &a4[16 * v8];
  if ((unint64_t)a2 < a3 && v21 >= 16)
  {
    while (1)
    {
      if (v5[8]) {
        BUG();
      }
      if (v10[8]) {
        BUG();
      }
      if (*(void *)v5 >= *(void *)v10) {
        break;
      }
      uint64_t v12 = v5;
      BOOL v13 = v6 == v5;
      v5 += 16;
      if (!v13) {
        goto LABEL_10;
      }
LABEL_11:
      v6 += 16;
      if (v10 >= v11 || (unint64_t)v5 >= a3) {
        goto LABEL_13;
      }
    }
    uint64_t v12 = v10;
    BOOL v13 = v6 == v10;
    v10 += 16;
    if (v13) {
      goto LABEL_11;
    }
LABEL_10:
    *(_OWORD *)uint64_t v6 = *(_OWORD *)v12;
    goto LABEL_11;
  }
LABEL_13:
  uint64_t v5 = v6;
LABEL_31:
  specialized UnsafeMutablePointer.moveInitialize(from:count:)(v10, (v11 - v10) / 16, v5);
  return 1;
}

double specialized ContiguousArray.remove(at:)(unint64_t a1)
{
  Swift::Int v2 = (void *)*v1;
  if (!swift_isUniquelyReferenced_nonNull_native(*v1)) {
    Swift::Int v2 = specialized _ContiguousArrayBuffer._consumeAndCreateNew()((uint64_t)v2);
  }
  unint64_t v3 = v2[2];
  if (v3 <= a1) {
    BUG();
  }
  unint64_t v4 = v3 - 1;
  double v6 = *(double *)&v2[2 * a1 + 5];
  specialized UnsafeMutablePointer.moveInitialize(from:count:)((char *)&v2[2 * a1 + 6], v4 - a1, (char *)&v2[2 * a1 + 4]);
  v2[2] = v4;
  *uint64_t v1 = v2;
  return v6;
}

uint64_t specialized ContiguousArray._customRemoveLast()()
{
  uint64_t v1 = (void *)*v0;
  if (!swift_isUniquelyReferenced_nonNull_native(*v0)) {
    uint64_t v1 = specialized _ContiguousArrayBuffer._consumeAndCreateNew()((uint64_t)v1);
  }
  uint64_t v2 = v1[2];
  if (!v2) {
    BUG();
  }
  uint64_t v3 = v2 - 1;
  uint64_t result = v1[2 * v3 + 4];
  v1[2] = v3;
  void *v0 = v1;
  return result;
}

uint64_t specialized _finalizeUninitializedArray<A>(_:)(uint64_t a1)
{
  return a1;
}

uint64_t static MLWordTagger.evaluate(on:using:)(uint64_t a1, void *a2)
{
  uint64_t v3 = *(void *)(a1 + 16);
  uint64_t v28 = v2;
  if (v3)
  {
    uint64_t v5 = a1 + 40;
    int64_t v6 = 0;
    uint64_t v7 = v3;
    do
    {
      BOOL v8 = __OFADD__(*(void *)(*(void *)v5 + 16), v6);
      v6 += *(void *)(*(void *)v5 + 16);
      if (v8) {
        BUG();
      }
      v5 += 16;
      --v7;
    }
    while (v7);
    int64_t v9 = _swiftEmptyArrayStorage[2];
    if (v9 <= v6) {
      int64_t v9 = v6;
    }
    id v27 = a2;
    unint64_t v30 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v9, 0, (uint64_t)_swiftEmptyArrayStorage);
    if (v6 <= 0) {
      int64_t v6 = 0;
    }
    uint64_t v31 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v6, 0, (uint64_t)_swiftEmptyArrayStorage);
    swift_bridgeObjectRetain(a1);
    uint64_t v29 = a1;
    uint64_t v10 = (uint64_t *)(a1 + 40);
    do
    {
      uint64_t v11 = *(v10 - 1);
      uint64_t v12 = *v10;
      swift_bridgeObjectRetain(v11);
      swift_bridgeObjectRetain(v12);
      specialized Array.append<A>(contentsOf:)(v12);
      Class isa = Array._bridgeToObjectiveC()().super.isa;
      swift_bridgeObjectRelease(v11);
      id v14 = [v27 predictedLabelsForTokens:isa];
      id v15 = v14;

      uint64_t v16 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v15, &type metadata for String);
      specialized Array.append<A>(contentsOf:)(v16);
      v10 += 2;
      --v3;
    }
    while (v3);
    swift_bridgeObjectRelease(v29);
    uint64_t v17 = v31;
    BOOL v18 = v30;
  }
  else
  {
    BOOL v18 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, _swiftEmptyArrayStorage[2], 0, (uint64_t)_swiftEmptyArrayStorage);
    unint64_t v30 = v18;
    uint64_t v17 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, 0, 0, (uint64_t)_swiftEmptyArrayStorage);
    uint64_t v31 = v17;
  }
  uint64_t v25 = v17;
  uint64_t v26 = v18;
  uint64_t v19 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [String]);
  uint64_t v20 = lazy protocol witness table accessor for type [String] and conformance [A]();
  uint64_t v21 = v28;
  ClassificationMetrics.init<A, B>(_:_:)(&v25, &v26, &type metadata for String, v19, v19, &protocol witness table for String, v20, v20);
  uint64_t v22 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Either<ClassificationMetrics<String>, ClassificationMetrics<Int>>);
  swift_storeEnumTagMultiPayload(v21, v22, 0);
  uint64_t v23 = type metadata accessor for MLClassifierMetrics.Contents(0);
  return swift_storeEnumTagMultiPayload(v21, v23, 0);
}

uint64_t MLWordTagger.evaluation(on:)(uint64_t a1)
{
  return static MLWordTagger.evaluate(on:using:)(a1, *v1);
}

uint64_t MLWordTagger.evaluation(on:tokenColumn:labelColumn:)(uint64_t a1, uint64_t a2, void *a3, uint64_t a4, char *a5)
{
  unint64_t v33 = v6;
  uint64_t v36 = a5;
  uint64_t v35 = a4;
  uint64_t v45 = v5;
  uint64_t v40 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Column<[String]>);
  uint64_t v32 = *(void *)(v40 - 8);
  int64_t v8 = *(void *)(v32 + 64);
  int64_t v9 = alloca(v8);
  uint64_t v10 = alloca(v8);
  uint64_t v31 = v30;
  uint64_t v11 = alloca(v8);
  uint64_t v12 = alloca(v8);
  uint64_t v44 = v30;
  uint64_t v13 = type metadata accessor for DataFrame(0);
  uint64_t v14 = *(void *)(v13 - 8);
  int64_t v15 = *(void *)(v14 + 64);
  uint64_t v16 = alloca(v15);
  uint64_t v17 = alloca(v15);
  uint64_t v41 = v30;
  uint64_t v37 = a1;
  uint64_t v39 = a2;
  uint64_t v38 = a3;
  static MLWordTagger.validateDataFrame(_:tokenColumnName:labelColumnName:)(a1, a2, (uint64_t *)a3, v35, v36);
  uint64_t v43 = v13;
  uint64_t v42 = v14;
  DataFrame.init()(a1, a2, v18, v19);
  static MLWordTagger.createTextColumn(_:name:context:)(v37, v39, v38, 0x6E656B6F54, (void *)0xE500000000000000);
  uint64_t v20 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [String]);
  uint64_t v21 = v44;
  uint64_t v34 = v20;
  DataFrame.append<A>(column:)(v44, v20);
  uint64_t v44 = *(unsigned char **)(v32 + 8);
  ((void (*)(unsigned char *, uint64_t))v44)(v21, v40);
  uint64_t v22 = v31;
  uint64_t v23 = v35;
  uint64_t v24 = v36;
  static MLWordTagger.createTextColumn(_:name:context:)(v37, v35, v36, 0x6C6562614CLL, (void *)0xE500000000000000);
  uint64_t v25 = (uint64_t)v41;
  DataFrame.append<A>(column:)(v22, v34);
  ((void (*)(unsigned char *, uint64_t))v44)(v22, v40);
  uint64_t v26 = static MLWordTagger.createLabeledTokenPairs(_:tokenColumnName:labelColumnName:)(v25, v39, (uint64_t)v38, v23, (uint64_t)v24);
  uint64_t v27 = v42;
  uint64_t v28 = v43;
  LOBYTE(v23) = (_BYTE)v26;
  static MLWordTagger.evaluate(on:using:)((uint64_t)v26, *v33);
  (*(void (**)(uint64_t, uint64_t))(v27 + 8))(v25, v28);
  return swift_bridgeObjectRelease(v23);
}

{
  uint64_t v5;
  uint64_t v6;
  int64_t v8;
  void *v9;
  void *v10;
  uint64_t v11;
  unsigned __int8 v12;
  void *inited;
  void *v14;
  char *v15;
  void *v16;
  char v17;
  uint64_t empty;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  void *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  char v35;
  Swift::String v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  void *v42;
  char *v43;
  BOOL v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v51;
  char v52[64];
  char v53[48];
  char v54[48];
  void *v55;
  char *v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t *v59;
  void *v60;
  Swift::String v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  char *v66;
  void *v67;
  uint64_t v68;
  char v69;
  int v70;
  uint64_t v71;
  uint64_t v72;
  Swift::String v73;
  unsigned __int8 v74;

  uint64_t v65 = a4;
  uint64_t v62 = v5;
  unint64_t v64 = v6;
  uint64_t v66 = a5;
  uint64_t v57 = type metadata accessor for DataFrame(0);
  uint64_t v58 = *(void *)(v57 - 8);
  int64_t v8 = *(void *)(v58 + 64);
  int64_t v9 = alloca(v8);
  uint64_t v10 = alloca(v8);
  uint64_t v59 = &v51;
  uint64_t v11 = *(void *)a1;
  uint64_t v12 = *(unsigned char *)(a1 + 8);
  Swift::Int v71 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<String>);
  uint64_t inited = (void *)swift_initStackObject(v71, v53);
  inited[2] = 1;
  inited[3] = 2;
  uint64_t v63 = a2;
  inited[4] = a2;
  inited[5] = a3;
  uint64_t v72 = v11;
  v73._uint64_t countAndFlagsBits = v11;
  id v74 = v12;
  LOBYTE(v73._object) = v12;
  swift_bridgeObjectRetain((_BYTE)a3);
  static _ValidationUtilities.validateTableFormat(table:context:columns:)((uint64_t)&v73, 0x6E656B6F54, (void *)0xE500000000000000, (uint64_t)inited);
  unint64_t v67 = a3;
  v73._uint64_t countAndFlagsBits = v72;
  LOBYTE(v73._object) = v74;
  uint64_t v14 = (void *)swift_initStackObject(v71, v54);
  v14[2] = 1;
  v14[3] = 2;
  v14[4] = v65;
  int64_t v15 = v66;
  v14[5] = v66;
  swift_bridgeObjectRetain((_BYTE)v15);
  static _ValidationUtilities.validateTableFormat(table:context:columns:)((uint64_t)&v73, 0x6C6562614CLL, (void *)0xE500000000000000, (uint64_t)v14);
  swift_setDeallocating(v14);
  specialized _ContiguousArrayStorage.__deallocating_deinit();
  swift_setDeallocating(inited);
  specialized _ContiguousArrayStorage.__deallocating_deinit();
  uint64_t v16 = (void *)swift_initStackObject(v71, v52);
  void v16[2] = 2;
  v16[3] = 4;
  v16[4] = v63;
  uint64_t v17 = (char)v67;
  v16[5] = v67;
  v16[6] = v65;
  v16[7] = v15;
  swift_bridgeObjectRetain(v17);
  swift_bridgeObjectRetain((_BYTE)v15);
  unint64_t v70 = v74;
  outlined copy of Result<_DataTable, Error>(v72, v74);
  uint64_t empty = tc_v1_sframe_create_empty(0);
  if (!empty) {
    BUG();
  }
  uint64_t v19 = empty;
  uint64_t v55 = v16 + 4;
  Swift::Int v71 = 0;
  uint64_t v20 = type metadata accessor for CMLTable();
  uint64_t v21 = swift_allocObject(v20, 24, 7);
  *(void *)(v21 + 16) = v19;
  uint64_t v22 = type metadata accessor for _DataTable();
  swift_allocObject(v22, 40, 7);
  uint64_t v68 = _DataTable.init(impl:)(v21);
  uint64_t v69 = 0;
  float v60 = v16;
  swift_bridgeObjectRetain((_BYTE)v16);
  uint64_t v56 = "ml.activityclassifier" + 0x8000000000000000;
  uint64_t v23 = 0;
  LOBYTE(v24) = v74;
  do
  {
    uint64_t v25 = 2 * v23;
    uint64_t v26 = v55[v25];
    uint64_t v27 = (void *)v55[v25 + 1];
    v61._uint64_t countAndFlagsBits = v26;
    if ((_BYTE)v24)
    {
      uint64_t v28 = v72;
      outlined copy of Result<_DataTable, Error>(v72, 1);
      swift_bridgeObjectRetain((_BYTE)v27);
      swift_willThrow(v27, 1, v29, v30, v31, v32);
      uint64_t v35 = (char)v27;
      v73._uint64_t countAndFlagsBits = 0;
      v73._char object = (void *)0xE000000000000000;
      _StringGuts.grow(_:)(34);
      swift_bridgeObjectRelease(v73._object);
      v73._uint64_t countAndFlagsBits = 0xD00000000000001FLL;
      v73._char object = v56;
      v36._uint64_t countAndFlagsBits = v61._countAndFlagsBits;
      v36._char object = v27;
      String.append(_:)(v36);
      v36._uint64_t countAndFlagsBits = 34;
      v36._char object = (void *)0xE100000000000000;
      String.append(_:)(v36);
      uint64_t v61 = v73;
      uint64_t v37 = lazy protocol witness table accessor for type MLCreateError and conformance MLCreateError();
      uint64_t v38 = swift_allocError(&type metadata for MLCreateError, v37, 0, 0);
      *(Swift::String *)uint64_t v39 = v61;
      *(_OWORD *)(v39 + 16) = 0;
      *(_OWORD *)(v39 + 32) = 0;
      *(unsigned char *)(v39 + 48) = 1;
      outlined consume of Result<_DataTable, Error>(v28, v70);
      outlined consume of Result<_DataTable, Error>(v38, 1);
      swift_bridgeObjectRelease(v35);
    }
    else
    {
      unint64_t v33 = v72;
      uint64_t v34 = *(void *)(v72 + 16);
      outlined copy of Result<_DataTable, Error>(v72, 0);
      swift_bridgeObjectRetain((_BYTE)v27);
      swift_retain();
      uint64_t v45 = specialized String.withCString<A>(_:)((uint64_t (*)(void))partial apply for closure #1 in CMLTable.column(name:), v34, v26, (uint64_t)v27);
      swift_release();
      outlined consume of Result<_DataTable, Error>(v33, 0);
      uint64_t v46 = type metadata accessor for _UntypedColumn();
      unint64_t v47 = swift_allocObject(v46, 24, 7);
      *(void *)(v47 + 16) = v45;
      outlined copy of Result<_DataTable, Error>(v47, 0);
      MLDataTable.willMutate()();
      v73._uint64_t countAndFlagsBits = v47;
      LOBYTE(v73._object) = 0;
      MLDataTable.setColumnImpl(newColumn:named:)((uint64_t)&v73, v61._countAndFlagsBits, (uint64_t)v27);
      swift_bridgeObjectRelease((_BYTE)v27);
      outlined consume of Result<_DataTable, Error>(v47, 0);
      if (!v69)
      {
        uint64_t v48 = v68;
        outlined copy of Result<_DataTable, Error>(v68, 0);
        _DataTable.columnNamesDidChange()();
        outlined consume of Result<_DataTable, Error>(v48, 0);
      }
      outlined consume of Result<_DataTable, Error>(v47, 0);
    }
    uint64_t v42 = v67;
    uint64_t v43 = v66;
    uint64_t v23 = 1;
    uint64_t v44 = (v71 & 1) == 0;
    LOBYTE(v24) = 1;
    Swift::Int v71 = v24;
    LOBYTE(v24) = v74;
  }
  while (v44);
  swift_bridgeObjectRelease_n(v60, 2, v40, v24, v41);
  outlined consume of Result<_DataTable, Error>(v72, v70);
  v73._uint64_t countAndFlagsBits = v68;
  LOBYTE(v73._object) = v69;
  uint64_t v49 = (uint64_t)v59;
  DataFrame.init(_:)((uint64_t)&v73);
  MLWordTagger.evaluation(on:tokenColumn:labelColumn:)(v49, v63, v42, v65, v43);
  return (*(uint64_t (**)(uint64_t, uint64_t))(v58 + 8))(v49, v57);
}

uint64_t specialized static Array._adoptStorage(_:count:)(uint64_t a1, uint64_t a2)
{
  uint64_t result = a1;
  *(void *)(a1 + 16) = a2;
  *(void *)(a1 + 24) = 2 * a2;
  return result;
}

{
  return specialized static Array._adoptStorage(_:count:)(a1, a2);
}

uint64_t specialized _ContiguousArrayStorage.__deallocating_deinit()
{
  swift_arrayDestroy(v0 + 32, *(void *)(v0 + 16), &type metadata for String);
  return swift_deallocClassInstance(v0, 32, 7);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  uint64_t v1 = *(void *)(v0 + 16);
  uint64_t v2 = type metadata accessor for NSURLResourceKey(0);
  swift_arrayDestroy(v0 + 32, v1, v2);
  return swift_deallocClassInstance(v0, 32, 7);
}

{
  return specialized _ContiguousArrayStorage.__deallocating_deinit(&demangling cache variable for type metadata for String?);
}

{
  return specialized _ContiguousArrayStorage.__deallocating_deinit(&demangling cache variable for type metadata for [[Float]]);
}

{
  uint64_t v0;

  swift_arrayDestroy(v0 + 32, *(void *)(v0 + 16), &type metadata for MLLinearRegressor.ModelParameters);
  return swift_deallocClassInstance(v0, 32, 7);
}

{
  uint64_t v0;

  swift_arrayDestroy(v0 + 32, *(void *)(v0 + 16), &type metadata for MLLogisticRegressionClassifier.ModelParameters);
  return swift_deallocClassInstance(v0, 32, 7);
}

{
  return specialized _ContiguousArrayStorage.__deallocating_deinit(&demangling cache variable for type metadata for (name: String, parameter: Parameter));
}

{
  return specialized _ContiguousArrayStorage.__deallocating_deinit(&demangling cache variable for type metadata for (name: String, state: LayerState));
}

{
  return specialized _ContiguousArrayStorage.__deallocating_deinit(type metadata accessor for MLCheckpoint);
}

{
  return specialized _ContiguousArrayStorage.__deallocating_deinit((uint64_t (*)(void))&type metadata accessor for URL);
}

uint64_t specialized _ContiguousArrayStorage.__deallocating_deinit(uint64_t *a1)
{
  uint64_t v2 = *(void *)(v1 + 16);
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(a1);
  swift_arrayDestroy(v1 + 32, v2, v3);
  return swift_deallocClassInstance(v1, 32, 7);
}

{
  uint64_t v1;
  uint64_t v2;
  int v3;

  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(a1);
  uint64_t v3 = *(unsigned __int8 *)(*(void *)(v2 - 8) + 80);
  swift_arrayDestroy(v1 + ((v3 + 32) & ~v3), *(void *)(v1 + 16), v2);
  return swift_deallocClassInstance(v1, 32, 7);
}

uint64_t specialized _ContiguousArrayStorage.__deallocating_deinit(uint64_t (*a1)(void))
{
  uint64_t v2 = a1(0);
  int v3 = *(unsigned __int8 *)(*(void *)(v2 - 8) + 80);
  swift_arrayDestroy(v1 + ((v3 + 32) & ~v3), *(void *)(v1 + 16), v2);
  return swift_deallocClassInstance(v1, 32, 7);
}

uint64_t lazy protocol witness table accessor for type [String] and conformance [A]()
{
  uint64_t result = lazy protocol witness table cache variable for type [String] and conformance [A];
  if (!lazy protocol witness table cache variable for type [String] and conformance [A])
  {
    uint64_t v1 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for [String]);
    uint64_t result = swift_getWitnessTable(&protocol conformance descriptor for [A], v1);
    lazy protocol witness table cache variable for type [String] and conformance [A] = result;
  }
  return result;
}

{
  uint64_t result;
  uint64_t v1;

  uint64_t result = lazy protocol witness table cache variable for type [String] and conformance [A];
  if (!lazy protocol witness table cache variable for type [String] and conformance [A])
  {
    uint64_t v1 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for [String]);
    uint64_t result = swift_getWitnessTable(&protocol conformance descriptor for [A], v1);
    lazy protocol witness table cache variable for type [String] and conformance [A] = result;
  }
  return result;
}

{
  uint64_t result;
  uint64_t v1;

  uint64_t result = lazy protocol witness table cache variable for type [String] and conformance [A];
  if (!lazy protocol witness table cache variable for type [String] and conformance [A])
  {
    uint64_t v1 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for [String]);
    uint64_t result = swift_getWitnessTable(&protocol conformance descriptor for [A], v1);
    lazy protocol witness table cache variable for type [String] and conformance [A] = result;
  }
  return result;
}

uint64_t static Rectangle.== infix(_:_:)(__m128 a1, __m128 a2, __m128 a3, __m128 a4, __m128 a5, __m128 a6, __m128 a7, __m128 a8)
{
  __m128 inserted = _mm_insert_ps(a1, a2, 16);
  __m128 v9 = _mm_insert_ps(a5, a6, 16);
  LOBYTE(result) = 1;
  uint64_t v11 = 0;
  do
  {
    while (1)
    {
      uint64_t v12 = v11 + 1;
      if (result) {
        break;
      }
      uint64_t result = 0;
      uint64_t v11 = 1;
      if (v12 == 2) {
        return result;
      }
    }
    __m128 v16 = inserted;
    uint64_t v13 = v11 & 3;
    __m128 v14 = (__m128)v16.u32[v13];
    __m128 v17 = v9;
    v15.i32[0] = v17.i32[v13];
    LOBYTE(result) = _mm_cvtsi128_si32((__m128i)_mm_cmpeq_ss(v14, v15)) & 1;
    uint64_t v11 = 1;
  }
  while (v12 != 2);
  if (v14.f32[0] == v15.f32[0]) {
    return _mm_cvtsi128_si32((__m128i)_mm_and_ps(_mm_cmpeq_ps(a3, a7), _mm_cmpeq_ps(a4, a8)));
  }
  else {
    return 0;
  }
}

void Rectangle.hash(into:)(__m128i a1, float a2, float a3, float a4)
{
  Rectangle.Size.hash(into:)(a1, a2);
  int v4 = _mm_cvtsi128_si32(_mm_cvtsi32_si128(LODWORD(a3)));
  Swift::UInt32 v5 = v4 & 0x7FFFFFFF;
  if ((v4 & 0x7FFFFFFF) != 0) {
    Swift::UInt32 v5 = v4;
  }
  Hasher._combine(_:)(v5);
  int v6 = _mm_cvtsi128_si32(_mm_cvtsi32_si128(LODWORD(a4)));
  Swift::UInt32 v7 = v6 & 0x7FFFFFFF;
  if ((v6 & 0x7FFFFFFF) != 0) {
    Swift::UInt32 v7 = v6;
  }
  Hasher._combine(_:)(v7);
}

BOOL static Rectangle.CodingKeys.== infix(_:_:)(unsigned __int8 a1, unsigned __int8 a2)
{
  return ((a2 ^ a1) & 1) == 0;
}

void Rectangle.CodingKeys.hash(into:)(uint64_t a1, char a2)
{
}

char Rectangle.CodingKeys.init(stringValue:)(uint64_t a1, unint64_t a2)
{
  if (a1 == 0x7265746E6563 && a2 == 0xE600000000000000)
  {
    unint64_t v2 = 0xE600000000000000;
LABEL_6:
    swift_bridgeObjectRelease(v2);
    return 0;
  }
  if (_stringCompareWithSmolCheck(_:_:expecting:)(0x7265746E6563, 0xE600000000000000, a1, a2, 0))
  {
    unint64_t v2 = a2;
    goto LABEL_6;
  }
  if (a1 == 1702521203 && a2 == 0xE400000000000000)
  {
    swift_bridgeObjectRelease(0xE400000000000000);
    return 1;
  }
  else
  {
    char v4 = _stringCompareWithSmolCheck(_:_:expecting:)(1702521203, 0xE400000000000000, a1, a2, 0);
    swift_bridgeObjectRelease(a2);
    return 2 - (v4 & 1);
  }
}

char Rectangle.CodingKeys.init(intValue:)()
{
  return 2;
}

uint64_t Rectangle.CodingKeys.intValue.getter()
{
  return 0;
}

uint64_t Rectangle.CodingKeys.stringValue.getter(char a1)
{
  uint64_t result = 1702521203;
  if ((a1 & 1) == 0) {
    return 0x7265746E6563;
  }
  return result;
}

BOOL protocol witness for static Equatable.== infix(_:_:) in conformance Rectangle.CodingKeys(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return static Rectangle.CodingKeys.== infix(_:_:)(*a1, *a2);
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance Rectangle.CodingKeys()
{
  return Rectangle.CodingKeys.hashValue.getter(*v0);
}

void protocol witness for Hashable.hash(into:) in conformance Rectangle.CodingKeys(uint64_t a1)
{
  Rectangle.CodingKeys.hash(into:)(a1, *v1);
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance Rectangle.CodingKeys(uint64_t a1)
{
  return protocol witness for Hashable._rawHashValue(seed:) in conformance Rectangle.CodingKeys(a1);
}

{
  unsigned __int8 *v1;
  Swift::UInt v2;

  unint64_t v2 = *v1;
  Hasher.init(_seed:)(a1);
  Hasher._combine(_:)(v2);
  return Hasher._finalize()();
}

uint64_t protocol witness for CodingKey.stringValue.getter in conformance Rectangle.CodingKeys()
{
  return Rectangle.CodingKeys.stringValue.getter(*v0);
}

char protocol witness for CodingKey.init(stringValue:) in conformance Rectangle.CodingKeys(uint64_t a1, unint64_t a2)
{
  int v3 = v2;
  char result = Rectangle.CodingKeys.init(stringValue:)(a1, a2);
  *int v3 = result;
  return result;
}

uint64_t protocol witness for CodingKey.intValue.getter in conformance Rectangle.CodingKeys()
{
  return Rectangle.CodingKeys.intValue.getter();
}

char protocol witness for CodingKey.init(intValue:) in conformance Rectangle.CodingKeys()
{
  uint64_t v1 = v0;
  char result = Rectangle.CodingKeys.init(intValue:)();
  *uint64_t v1 = result;
  return result;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance Rectangle.CodingKeys(uint64_t a1)
{
  uint64_t v1 = lazy protocol witness table accessor for type Rectangle.CodingKeys and conformance Rectangle.CodingKeys();
  return CodingKey.description.getter(a1, v1);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance Rectangle.CodingKeys(uint64_t a1)
{
  uint64_t v1 = lazy protocol witness table accessor for type Rectangle.CodingKeys and conformance Rectangle.CodingKeys();
  return CodingKey.debugDescription.getter(a1, v1);
}

uint64_t Rectangle.encode(to:)(void *a1, __m128 a2, __m128 a3, float a4, float a5)
{
  uint64_t v20 = v5;
  float v23 = a5;
  float v24 = a4;
  __m128 inserted = _mm_insert_ps(a2, a3, 16);
  uint64_t v21 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<Rectangle.CodingKeys>);
  uint64_t v22 = *(void *)(v21 - 8);
  int64_t v6 = *(void *)(v22 + 64);
  Swift::UInt32 v7 = alloca(v6);
  int64_t v8 = alloca(v6);
  uint64_t v9 = a1[3];
  uint64_t v10 = a1[4];
  __swift_project_boxed_opaque_existential_0Tm(a1, v9);
  uint64_t v11 = lazy protocol witness table accessor for type Rectangle.CodingKeys and conformance Rectangle.CodingKeys();
  dispatch thunk of Encoder.container<A>(keyedBy:)(&unk_397460, &unk_397460, v11, v9, v10);
  _mm_storel_ps((double *)&v19, inserted);
  v25[0] = 0;
  uint64_t v12 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SIMD2<Float>);
  uint64_t v13 = lazy protocol witness table accessor for type SIMD2<Float> and conformance SIMD2<A>(&lazy protocol witness table cache variable for type SIMD2<Float> and conformance SIMD2<A>, (uint64_t)&protocol conformance descriptor for SIMD2<A>);
  uint64_t v14 = v21;
  uint64_t v15 = v20;
  KeyedEncodingContainer.encode<A>(_:forKey:)(&v19, v25, v21, v12, v13);
  if (!v15)
  {
    unint64_t v19 = __PAIR64__(LODWORD(v23), LODWORD(v24));
    v25[0] = 1;
    uint64_t v17 = lazy protocol witness table accessor for type Rectangle.Size and conformance Rectangle.Size();
    KeyedEncodingContainer.encode<A>(_:forKey:)(&v19, v25, v14, &type metadata for Rectangle.Size, v17);
  }
  return (*(uint64_t (**)(__m128 *, uint64_t))(v22 + 8))(&inserted, v14);
}

Swift::Int Rectangle.hashValue.getter(float a1, float a2, float a3, float a4)
{
  return Hasher._finalize()();
}

uint64_t Rectangle.init(from:)(void *a1)
{
  unint64_t v19 = v1;
  uint64_t v15 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<Rectangle.CodingKeys>);
  uint64_t v18 = *(void *)(v15 - 8);
  int64_t v2 = *(void *)(v18 + 64);
  int v3 = alloca(v2);
  char v4 = alloca(v2);
  uint64_t v5 = a1[3];
  *(void *)&long long v16 = a1[4];
  __swift_project_boxed_opaque_existential_0Tm(a1, v5);
  uint64_t v6 = lazy protocol witness table accessor for type Rectangle.CodingKeys and conformance Rectangle.CodingKeys();
  uint64_t v20 = &v14;
  Swift::UInt32 v7 = v19;
  dispatch thunk of Decoder.container<A>(keyedBy:)(&unk_397460, &unk_397460, v6, v5, v16);
  if (v7) {
    return __swift_destroy_boxed_opaque_existential_1Tm(a1);
  }
  unint64_t v19 = a1;
  uint64_t v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SIMD2<Float>);
  v21[0] = 0;
  uint64_t v9 = lazy protocol witness table accessor for type SIMD2<Float> and conformance SIMD2<A>(&lazy protocol witness table cache variable for type SIMD2<Float> and conformance SIMD2<A>, (uint64_t)&protocol conformance descriptor for SIMD2<A>);
  uint64_t v10 = v15;
  KeyedDecodingContainer.decode<A>(_:forKey:)(v8, v21, v15, v8, v9);
  long long v16 = v17;
  v21[0] = 1;
  uint64_t v11 = lazy protocol witness table accessor for type Rectangle.Size and conformance Rectangle.Size();
  uint64_t v12 = v20;
  KeyedDecodingContainer.decode<A>(_:forKey:)(&type metadata for Rectangle.Size, v21, v10, &type metadata for Rectangle.Size, v11);
  (*(void (**)(uint64_t *, uint64_t))(v18 + 8))(v12, v10);
  LODWORD(v18) = HIDWORD(v17);
  LODWORD(v20) = v17;
  return __swift_destroy_boxed_opaque_existential_1Tm(v19);
}

uint64_t static Rectangle.Size.== infix(_:_:)(__m128 a1, __m128 a2, __m128 a3, __m128 a4)
{
  return _mm_cvtsi128_si32((__m128i)_mm_and_ps(_mm_cmpeq_ps(a1, a3), _mm_cmpeq_ps(a2, a4)));
}

void Rectangle.Size.hash(into:)(__m128i a1, float a2)
{
  int v2 = _mm_cvtsi128_si32(a1);
  Swift::UInt32 v3 = v2 & 0x7FFFFFFF;
  if ((v2 & 0x7FFFFFFF) != 0) {
    Swift::UInt32 v3 = v2;
  }
  Hasher._combine(_:)(v3);
  int v4 = _mm_cvtsi128_si32(_mm_cvtsi32_si128(LODWORD(a2)));
  Swift::UInt32 v5 = v4 & 0x7FFFFFFF;
  if ((v4 & 0x7FFFFFFF) != 0) {
    Swift::UInt32 v5 = v4;
  }
  Hasher._combine(_:)(v5);
}

char Rectangle.Size.CodingKeys.init(stringValue:)(uint64_t a1, unint64_t a2)
{
  if (a1 == 0x6874646977 && a2 == 0xE500000000000000)
  {
    unint64_t v2 = 0xE500000000000000;
LABEL_6:
    swift_bridgeObjectRelease(v2);
    return 0;
  }
  if (_stringCompareWithSmolCheck(_:_:expecting:)(0x6874646977, 0xE500000000000000, a1, a2, 0))
  {
    unint64_t v2 = a2;
    goto LABEL_6;
  }
  if (a1 == 0x746867696568 && a2 == 0xE600000000000000)
  {
    swift_bridgeObjectRelease(0xE600000000000000);
    return 1;
  }
  else
  {
    char v4 = _stringCompareWithSmolCheck(_:_:expecting:)(0x746867696568, 0xE600000000000000, a1, a2, 0);
    swift_bridgeObjectRelease(a2);
    return 2 - (v4 & 1);
  }
}

Swift::Int Rectangle.CodingKeys.hashValue.getter(char a1)
{
  return Hasher._finalize()();
}

uint64_t Rectangle.Size.CodingKeys.stringValue.getter(char a1)
{
  uint64_t result = 0x746867696568;
  if ((a1 & 1) == 0) {
    return 0x6874646977;
  }
  return result;
}

uint64_t Rectangle.Size.encode(to:)(void *a1, float a2, float a3)
{
  v11[1] = v3;
  float v15 = a3;
  float v14 = a2;
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<Rectangle.Size.CodingKeys>);
  uint64_t v13 = *(void *)(v4 - 8);
  int64_t v5 = *(void *)(v13 + 64);
  uint64_t v6 = alloca(v5);
  Swift::UInt32 v7 = alloca(v5);
  uint64_t v8 = a1[3];
  uint64_t v12 = a1[4];
  __swift_project_boxed_opaque_existential_0Tm(a1, v8);
  uint64_t v9 = lazy protocol witness table accessor for type Rectangle.Size.CodingKeys and conformance Rectangle.Size.CodingKeys();
  dispatch thunk of Encoder.container<A>(keyedBy:)(&unk_397570, &unk_397570, v9, v8, v12);
  char v16 = 0;
  KeyedEncodingContainer.encode(_:forKey:)(&v16, v4, a2);
  if (!v3)
  {
    v17[0] = 1;
    KeyedEncodingContainer.encode(_:forKey:)(v17, v4, v15);
  }
  return (*(uint64_t (**)(void *, uint64_t))(v13 + 8))(v11, v4);
}

Swift::Int Rectangle.Size.hashValue.getter(float a1, float a2)
{
  return Hasher._finalize()();
}

uint64_t Rectangle.Size.init(from:)(void *a1, float a2)
{
  uint64_t v13 = v2;
  uint64_t v15 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<Rectangle.Size.CodingKeys>);
  uint64_t v12 = *(void *)(v15 - 8);
  int64_t v3 = *(void *)(v12 + 64);
  uint64_t v4 = alloca(v3);
  int64_t v5 = alloca(v3);
  uint64_t v6 = a1[3];
  uint64_t v14 = a1[4];
  __swift_project_boxed_opaque_existential_0Tm(a1, v6);
  uint64_t v7 = lazy protocol witness table accessor for type Rectangle.Size.CodingKeys and conformance Rectangle.Size.CodingKeys();
  uint64_t v11 = (uint64_t)&v11;
  dispatch thunk of Decoder.container<A>(keyedBy:)(&unk_397570, &unk_397570, v7, v6, v14);
  char v16 = 0;
  uint64_t v8 = v11;
  KeyedDecodingContainer.decode(_:forKey:)(&v16, v15);
  *(float *)&uint64_t v13 = a2;
  v17[0] = 1;
  uint64_t v9 = v15;
  KeyedDecodingContainer.decode(_:forKey:)(v17, v15);
  *(float *)&uint64_t v14 = a2;
  (*(void (**)(uint64_t, uint64_t))(v12 + 8))(v8, v9);
  return __swift_destroy_boxed_opaque_existential_1Tm(a1);
}

uint64_t protocol witness for Decodable.init(from:) in conformance Rectangle(void *a1, __m128 a2, __m128 a3, float a4, float a5)
{
  uint64_t v7 = v5;
  uint64_t result = Rectangle.init(from:)(a1);
  if (!v6)
  {
    _mm_storel_ps((double *)v7, _mm_insert_ps(a2, a3, 16));
    *(float *)(v7 + 8) = a4;
    *(float *)(v7 + 12) = a5;
  }
  return result;
}

uint64_t protocol witness for Encodable.encode(to:) in conformance Rectangle(void *a1)
{
  return Rectangle.encode(to:)(a1, (__m128)*(unint64_t *)v1, _mm_movehdup_ps((__m128)*(unint64_t *)v1), v1[2], v1[3]);
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance Rectangle(unint64_t *a1, unint64_t *a2)
{
  return static Rectangle.== infix(_:_:)((__m128)*a1, _mm_movehdup_ps((__m128)*a1), (__m128)*((unsigned int *)a1 + 2), (__m128)*((unsigned int *)a1 + 3), (__m128)*a2, _mm_movehdup_ps((__m128)*a2), (__m128)*((unsigned int *)a2 + 2), (__m128)*((unsigned int *)a2 + 3));
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance Rectangle()
{
  return Rectangle.hashValue.getter(COERCE_FLOAT(*v0), _mm_movehdup_ps((__m128)*v0).f32[0], *((float *)v0 + 2), *((float *)v0 + 3));
}

void protocol witness for Hashable.hash(into:) in conformance Rectangle()
{
  Rectangle.hash(into:)((__m128i)*(unint64_t *)v0, _mm_movehdup_ps((__m128)*(unint64_t *)v0).f32[0], v0[2], v0[3]);
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance Rectangle(uint64_t a1)
{
  __m128 v3 = (__m128)*(unint64_t *)v1;
  float v4 = v1[2];
  float v5 = v1[3];
  Hasher.init(_seed:)(a1);
  Rectangle.hash(into:)((__m128i)v3, _mm_movehdup_ps(v3).f32[0], v4, v5);
  return Hasher._finalize()();
}

uint64_t protocol witness for CodingKey.stringValue.getter in conformance Rectangle.Size.CodingKeys()
{
  return Rectangle.Size.CodingKeys.stringValue.getter(*v0);
}

char protocol witness for CodingKey.init(stringValue:) in conformance Rectangle.Size.CodingKeys(uint64_t a1, unint64_t a2)
{
  __m128 v3 = v2;
  char result = Rectangle.Size.CodingKeys.init(stringValue:)(a1, a2);
  *__m128 v3 = result;
  return result;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance Rectangle.Size.CodingKeys(uint64_t a1)
{
  uint64_t v1 = lazy protocol witness table accessor for type Rectangle.Size.CodingKeys and conformance Rectangle.Size.CodingKeys();
  return CodingKey.description.getter(a1, v1);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance Rectangle.Size.CodingKeys(uint64_t a1)
{
  uint64_t v1 = lazy protocol witness table accessor for type Rectangle.Size.CodingKeys and conformance Rectangle.Size.CodingKeys();
  return CodingKey.debugDescription.getter(a1, v1);
}

uint64_t protocol witness for Decodable.init(from:) in conformance Rectangle.Size(void *a1, float a2, float a3)
{
  float v5 = v3;
  uint64_t result = Rectangle.Size.init(from:)(a1, a2);
  if (!v4)
  {
    *float v5 = a2;
    v5[1] = a3;
  }
  return result;
}

uint64_t protocol witness for Encodable.encode(to:) in conformance Rectangle.Size(void *a1)
{
  return Rectangle.Size.encode(to:)(a1, *v1, v1[1]);
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance Rectangle.Size(unsigned int *a1, unsigned int *a2)
{
  return static Rectangle.Size.== infix(_:_:)((__m128)*a1, (__m128)a1[1], (__m128)*a2, (__m128)a2[1]);
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance Rectangle.Size()
{
  return Rectangle.Size.hashValue.getter(*v0, v0[1]);
}

void protocol witness for Hashable.hash(into:) in conformance Rectangle.Size()
{
  Rectangle.Size.hash(into:)((__m128i)*(unsigned int *)v0, v0[1]);
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance Rectangle.Size(uint64_t a1)
{
  float v3 = *v1;
  float v4 = v1[1];
  Hasher.init(_seed:)(a1);
  Rectangle.Size.hash(into:)((__m128i)LODWORD(v3), v4);
  return Hasher._finalize()();
}

_OWORD *__swift_memcpy16_8(_OWORD *a1, _OWORD *a2)
{
  uint64_t result = a1;
  *a1 = *a2;
  return result;
}

ValueMetadata *type metadata accessor for Rectangle()
{
  return &type metadata for Rectangle;
}

uint64_t base witness table accessor for Equatable in Rectangle()
{
  return lazy protocol witness table accessor for type Rectangle and conformance Rectangle();
}

uint64_t lazy protocol witness table accessor for type Rectangle and conformance Rectangle()
{
  uint64_t result = lazy protocol witness table cache variable for type Rectangle and conformance Rectangle;
  if (!lazy protocol witness table cache variable for type Rectangle and conformance Rectangle)
  {
    uint64_t result = swift_getWitnessTable(&protocol conformance descriptor for Rectangle, &type metadata for Rectangle);
    lazy protocol witness table cache variable for type Rectangle and conformance Rectangle = result;
  }
  return result;
}

uint64_t lazy protocol witness table accessor for type Rectangle.CodingKeys and conformance Rectangle.CodingKeys()
{
  uint64_t result = lazy protocol witness table cache variable for type Rectangle.CodingKeys and conformance Rectangle.CodingKeys;
  if (!lazy protocol witness table cache variable for type Rectangle.CodingKeys and conformance Rectangle.CodingKeys)
  {
    uint64_t result = swift_getWitnessTable(&protocol conformance descriptor for Rectangle.CodingKeys, &unk_397460);
    lazy protocol witness table cache variable for type Rectangle.CodingKeys and conformance Rectangle.CodingKeys = result;
  }
  return result;
}

{
  uint64_t result;

  uint64_t result = lazy protocol witness table cache variable for type Rectangle.CodingKeys and conformance Rectangle.CodingKeys;
  if (!lazy protocol witness table cache variable for type Rectangle.CodingKeys and conformance Rectangle.CodingKeys)
  {
    uint64_t result = swift_getWitnessTable(&protocol conformance descriptor for Rectangle.CodingKeys, &unk_397460);
    lazy protocol witness table cache variable for type Rectangle.CodingKeys and conformance Rectangle.CodingKeys = result;
  }
  return result;
}

{
  uint64_t result;

  uint64_t result = lazy protocol witness table cache variable for type Rectangle.CodingKeys and conformance Rectangle.CodingKeys;
  if (!lazy protocol witness table cache variable for type Rectangle.CodingKeys and conformance Rectangle.CodingKeys)
  {
    uint64_t result = swift_getWitnessTable(&protocol conformance descriptor for Rectangle.CodingKeys, &unk_397460);
    lazy protocol witness table cache variable for type Rectangle.CodingKeys and conformance Rectangle.CodingKeys = result;
  }
  return result;
}

{
  uint64_t result;

  uint64_t result = lazy protocol witness table cache variable for type Rectangle.CodingKeys and conformance Rectangle.CodingKeys;
  if (!lazy protocol witness table cache variable for type Rectangle.CodingKeys and conformance Rectangle.CodingKeys)
  {
    uint64_t result = swift_getWitnessTable(&protocol conformance descriptor for Rectangle.CodingKeys, &unk_397460);
    lazy protocol witness table cache variable for type Rectangle.CodingKeys and conformance Rectangle.CodingKeys = result;
  }
  return result;
}

uint64_t lazy protocol witness table accessor for type Rectangle.Size and conformance Rectangle.Size()
{
  uint64_t result = lazy protocol witness table cache variable for type Rectangle.Size and conformance Rectangle.Size;
  if (!lazy protocol witness table cache variable for type Rectangle.Size and conformance Rectangle.Size)
  {
    uint64_t result = swift_getWitnessTable(&protocol conformance descriptor for Rectangle.Size, &type metadata for Rectangle.Size);
    lazy protocol witness table cache variable for type Rectangle.Size and conformance Rectangle.Size = result;
  }
  return result;
}

{
  uint64_t result;

  uint64_t result = lazy protocol witness table cache variable for type Rectangle.Size and conformance Rectangle.Size;
  if (!lazy protocol witness table cache variable for type Rectangle.Size and conformance Rectangle.Size)
  {
    uint64_t result = swift_getWitnessTable(&protocol conformance descriptor for Rectangle.Size, &type metadata for Rectangle.Size);
    lazy protocol witness table cache variable for type Rectangle.Size and conformance Rectangle.Size = result;
  }
  return result;
}

{
  uint64_t result;

  uint64_t result = lazy protocol witness table cache variable for type Rectangle.Size and conformance Rectangle.Size;
  if (!lazy protocol witness table cache variable for type Rectangle.Size and conformance Rectangle.Size)
  {
    uint64_t result = swift_getWitnessTable(&protocol conformance descriptor for Rectangle.Size, &type metadata for Rectangle.Size);
    lazy protocol witness table cache variable for type Rectangle.Size and conformance Rectangle.Size = result;
  }
  return result;
}

uint64_t lazy protocol witness table accessor for type SIMD2<Float> and conformance SIMD2<A>(uint64_t *a1, uint64_t a2)
{
  uint64_t result = *a1;
  if (!*a1)
  {
    uint64_t v3 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for SIMD2<Float>);
    uint64_t result = swift_getWitnessTable(a2, v3);
    *a1 = result;
  }
  return result;
}

uint64_t getEnumTagSinglePayload for Rectangle.CodingKeys(unsigned __int8 *a1, unsigned int a2)
{
  return getEnumTagSinglePayload for Rectangle.CodingKeys(a1, a2);
}

{
  unsigned int v2;
  int v3;
  int v4;
  int v5;
  unsigned int v6;
  int v7;
  BOOL v8;

  if (a2)
  {
    if (a2 < 0xFF) {
      goto LABEL_13;
    }
    uint64_t v2 = a2 + 1;
    uint64_t v3 = 1;
    if (v2 >= 0xFF00) {
      uint64_t v3 = 2 * (v2 >= 0xFFFF00) + 2;
    }
    if (v3 == 4) {
      float v4 = *(_DWORD *)(a1 + 1);
    }
    else {
      float v4 = v3 == 2 ? *(unsigned __int16 *)(a1 + 1) : a1[1];
    }
    if (v4)
    {
      float v5 = *a1 + (v4 << 8) - 2;
    }
    else
    {
LABEL_13:
      uint64_t v6 = *a1;
      uint64_t v7 = v6 - 2;
      uint64_t v8 = v6 < 2;
      float v5 = -1;
      if (!v8) {
        float v5 = v7;
      }
    }
  }
  else
  {
    float v5 = -1;
  }
  return (v5 + 1);
}

uint64_t storeEnumTagSinglePayload for Rectangle.CodingKeys(unsigned char *a1, unsigned int a2, unsigned int a3)
{
  return storeEnumTagSinglePayload for Rectangle.CodingKeys(a1, a2, a3);
}

{
  uint64_t result;
  unsigned int v4;
  unsigned int v5;
  int v6;

  LODWORD(result) = 0;
  if (a3 >= 0xFF)
  {
    float v4 = a3 + 1;
    LODWORD(result) = 1;
    if (v4 >= 0xFF00) {
      LODWORD(result) = 2 * (v4 >= 0xFFFF00) + 2;
    }
  }
  if (a2 > 0xFE)
  {
    float v5 = a2 - 255;
    uint64_t v6 = (v5 >> 8) + 1;
    *a1 = v5;
    uint64_t result = result;
    switch((int)result)
    {
      case 0:
        return result;
      case 1:
        a1[1] = v6;
        break;
      case 2:
        *(_WORD *)(a1 + 1) = v6;
        break;
      case 3:
LABEL_16:
        BUG();
      case 4:
        *(_DWORD *)(a1 + 1) = v6;
        break;
    }
  }
  else
  {
    uint64_t result = result;
    switch((int)result)
    {
      case 0:
        goto LABEL_11;
      case 1:
        a1[1] = 0;
        goto LABEL_11;
      case 2:
        *(_WORD *)(a1 + 1) = 0;
        goto LABEL_11;
      case 3:
        goto LABEL_16;
      case 4:
        *(_DWORD *)(a1 + 1) = 0;
LABEL_11:
        if (a2) {
          *a1 = a2 + 1;
        }
        break;
      case 5:
        JUMPOUT(0x34A90);
    }
  }
  return result;
}

uint64_t getEnumTag for Rectangle.CodingKeys(unsigned __int8 *a1)
{
  return *a1;
}

void destructiveInjectEnumTag for Rectangle.CodingKeys(unsigned char *a1, char a2)
{
  *a1 = a2 & 1;
}

void *type metadata accessor for Rectangle.CodingKeys()
{
  return &unk_397460;
}

void *__swift_memcpy8_4(void *a1, void *a2)
{
  uint64_t result = a1;
  *a1 = *a2;
  return result;
}

uint64_t getEnumTagSinglePayload for Rectangle.Size(uint64_t a1, int a2)
{
  uint64_t result = 0;
  if (a2)
  {
    if (*(unsigned char *)(a1 + 8)) {
      return (*(_DWORD *)a1 + 1);
    }
  }
  return result;
}

void storeEnumTagSinglePayload for Rectangle.Size(uint64_t a1, int a2, int a3)
{
  if (!a2)
  {
    if (!a3) {
      return;
    }
    char v3 = 0;
    goto LABEL_6;
  }
  *(void *)a1 = (a2 - 1);
  char v3 = 1;
  if (a3) {
LABEL_6:
  }
    *(unsigned char *)(a1 + 8) = v3;
}

ValueMetadata *type metadata accessor for Rectangle.Size()
{
  return &type metadata for Rectangle.Size;
}

uint64_t base witness table accessor for Equatable in Rectangle.Size()
{
  return lazy protocol witness table accessor for type Rectangle.Size and conformance Rectangle.Size();
}

uint64_t base witness table accessor for Equatable in Rectangle.CodingKeys()
{
  return lazy protocol witness table accessor for type Rectangle.CodingKeys and conformance Rectangle.CodingKeys();
}

uint64_t base witness table accessor for CustomDebugStringConvertible in Rectangle.CodingKeys()
{
  return lazy protocol witness table accessor for type Rectangle.CodingKeys and conformance Rectangle.CodingKeys();
}

uint64_t base witness table accessor for CustomStringConvertible in Rectangle.CodingKeys()
{
  return lazy protocol witness table accessor for type Rectangle.CodingKeys and conformance Rectangle.CodingKeys();
}

uint64_t lazy protocol witness table accessor for type Rectangle.Size.CodingKeys and conformance Rectangle.Size.CodingKeys()
{
  uint64_t result = lazy protocol witness table cache variable for type Rectangle.Size.CodingKeys and conformance Rectangle.Size.CodingKeys;
  if (!lazy protocol witness table cache variable for type Rectangle.Size.CodingKeys and conformance Rectangle.Size.CodingKeys)
  {
    uint64_t result = swift_getWitnessTable(&protocol conformance descriptor for Rectangle.Size.CodingKeys, &unk_397570);
    lazy protocol witness table cache variable for type Rectangle.Size.CodingKeys and conformance Rectangle.Size.CodingKeys = result;
  }
  return result;
}

{
  uint64_t result;

  uint64_t result = lazy protocol witness table cache variable for type Rectangle.Size.CodingKeys and conformance Rectangle.Size.CodingKeys;
  if (!lazy protocol witness table cache variable for type Rectangle.Size.CodingKeys and conformance Rectangle.Size.CodingKeys)
  {
    uint64_t result = swift_getWitnessTable(&protocol conformance descriptor for Rectangle.Size.CodingKeys, &unk_397570);
    lazy protocol witness table cache variable for type Rectangle.Size.CodingKeys and conformance Rectangle.Size.CodingKeys = result;
  }
  return result;
}

{
  uint64_t result;

  uint64_t result = lazy protocol witness table cache variable for type Rectangle.Size.CodingKeys and conformance Rectangle.Size.CodingKeys;
  if (!lazy protocol witness table cache variable for type Rectangle.Size.CodingKeys and conformance Rectangle.Size.CodingKeys)
  {
    uint64_t result = swift_getWitnessTable(&protocol conformance descriptor for Rectangle.Size.CodingKeys, &unk_397570);
    lazy protocol witness table cache variable for type Rectangle.Size.CodingKeys and conformance Rectangle.Size.CodingKeys = result;
  }
  return result;
}

{
  uint64_t result;

  uint64_t result = lazy protocol witness table cache variable for type Rectangle.Size.CodingKeys and conformance Rectangle.Size.CodingKeys;
  if (!lazy protocol witness table cache variable for type Rectangle.Size.CodingKeys and conformance Rectangle.Size.CodingKeys)
  {
    uint64_t result = swift_getWitnessTable(&protocol conformance descriptor for Rectangle.Size.CodingKeys, &unk_397570);
    lazy protocol witness table cache variable for type Rectangle.Size.CodingKeys and conformance Rectangle.Size.CodingKeys = result;
  }
  return result;
}

void *type metadata accessor for Rectangle.Size.CodingKeys()
{
  return &unk_397570;
}

uint64_t base witness table accessor for Equatable in Rectangle.Size.CodingKeys()
{
  return lazy protocol witness table accessor for type Rectangle.Size.CodingKeys and conformance Rectangle.Size.CodingKeys();
}

uint64_t base witness table accessor for CustomDebugStringConvertible in Rectangle.Size.CodingKeys()
{
  return lazy protocol witness table accessor for type Rectangle.Size.CodingKeys and conformance Rectangle.Size.CodingKeys();
}

uint64_t base witness table accessor for CustomStringConvertible in Rectangle.Size.CodingKeys()
{
  return lazy protocol witness table accessor for type Rectangle.Size.CodingKeys and conformance Rectangle.Size.CodingKeys();
}

void destructiveInjectEnumTag for Rectangle.Size.CodingKeys(unsigned char *a1, char a2)
{
}

char protocol witness for CodingKey.init(intValue:) in conformance Rectangle.Size.CodingKeys()
{
  return protocol witness for CodingKey.init(intValue:) in conformance Rectangle.CodingKeys();
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance Rectangle.Size.CodingKeys()
{
  return protocol witness for Hashable.hashValue.getter in conformance Rectangle.CodingKeys();
}

uint64_t protocol witness for CodingKey.intValue.getter in conformance Rectangle.Size.CodingKeys()
{
  return protocol witness for CodingKey.intValue.getter in conformance Rectangle.CodingKeys();
}

void protocol witness for Hashable.hash(into:) in conformance Rectangle.Size.CodingKeys(uint64_t a1)
{
}

uint64_t getEnumTag for Rectangle.Size.CodingKeys(unsigned __int8 *a1)
{
  return getEnumTag for Rectangle.CodingKeys(a1);
}

BOOL protocol witness for static Equatable.== infix(_:_:) in conformance Rectangle.Size.CodingKeys(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return protocol witness for static Equatable.== infix(_:_:) in conformance Rectangle.CodingKeys(a1, a2);
}

uint64_t initializeBufferWithCopyOfBuffer for MLRecommender.Identifier(uint64_t a1, uint64_t a2)
{
  return initializeBufferWithCopyOfBuffer for MLRecommender.Identifier(a1, a2);
}

{
  uint64_t v2;
  uint64_t v3;
  char v4;

  uint64_t v2 = *(void *)a2;
  char v3 = *(void *)(a2 + 8);
  float v4 = *(unsigned char *)(a2 + 16);
  outlined copy of MLRecommender.Identifier(*(void *)a2, v3, v4);
  *(void *)a1 = v2;
  *(void *)(a1 + 8) = v3;
  *(unsigned char *)(a1 + 16) = v4;
  return a1;
}

uint64_t destroy for MLRecommender.Identifier(uint64_t a1)
{
  return outlined consume of MLRecommender.Identifier(*(void *)a1, *(void *)(a1 + 8), *(_DWORD *)(a1 + 16));
}

uint64_t assignWithCopy for MLRecommender.Identifier(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)a2;
  uint64_t v4 = *(void *)(a2 + 8);
  char v5 = *(unsigned char *)(a2 + 16);
  outlined copy of MLRecommender.Identifier(*(void *)a2, v4, v5);
  uint64_t v6 = *(void *)a1;
  uint64_t v7 = *(void *)(a1 + 8);
  *(void *)a1 = v3;
  *(void *)(a1 + 8) = v4;
  int v8 = *(_DWORD *)(a1 + 16);
  *(unsigned char *)(a1 + 16) = v5;
  outlined consume of MLRecommender.Identifier(v6, v7, v8);
  return a1;
}

uint64_t __swift_memcpy17_8(uint64_t a1, uint64_t a2)
{
  uint64_t result = a1;
  *(unsigned char *)(a1 + 16) = *(unsigned char *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  return result;
}

uint64_t assignWithTake for MLRecommender.Identifier(uint64_t a1, uint64_t a2)
{
  char v3 = *(unsigned char *)(a2 + 16);
  uint64_t v4 = *(void *)a1;
  uint64_t v5 = *(void *)(a1 + 8);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  int v6 = *(_DWORD *)(a1 + 16);
  *(unsigned char *)(a1 + 16) = v3;
  outlined consume of MLRecommender.Identifier(v4, v5, v6);
  return a1;
}

uint64_t getEnumTagSinglePayload for MLRecommender.Identifier(uint64_t a1, unsigned int a2)
{
  if (a2)
  {
    if (a2 >= 0xFF && *(unsigned char *)(a1 + 17))
    {
      int v2 = *(_DWORD *)a1 + 254;
    }
    else
    {
      int v2 = -1;
      if (*(unsigned __int8 *)(a1 + 16) >= 2u) {
        int v2 = *(unsigned __int8 *)(a1 + 16) ^ 0xFF;
      }
    }
  }
  else
  {
    int v2 = -1;
  }
  return (v2 + 1);
}

void storeEnumTagSinglePayload for MLRecommender.Identifier(uint64_t a1, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFE)
  {
    *(void *)(a1 + 8) = 0;
    *(void *)a1 = a2 - 255;
    *(unsigned char *)(a1 + 16) = 0;
    if (a3 >= 0xFF) {
      *(unsigned char *)(a1 + 17) = 1;
    }
  }
  else
  {
    if (a3 >= 0xFF) {
      *(unsigned char *)(a1 + 17) = 0;
    }
    if (a2) {
      *(unsigned char *)(a1 + 16) = -(char)a2;
    }
  }
}

uint64_t getEnumTag for MLRecommender.Identifier(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 16);
}

void destructiveInjectEnumTag for MLRecommender.Identifier(uint64_t a1, char a2)
{
  *(unsigned char *)(a1 + 16) = a2 & 1;
}

ValueMetadata *type metadata accessor for MLRecommender.Identifier()
{
  return &type metadata for MLRecommender.Identifier;
}

uint64_t storeEnumTagSinglePayload for MLRecommender.IdentifierType(unsigned char *a1, unsigned int a2, unsigned int a3)
{
  LODWORD(result) = 0;
  if (a3 >= 0xFF)
  {
    unsigned int v4 = a3 + 1;
    LODWORD(result) = 1;
    if (v4 >= 0xFF00) {
      LODWORD(result) = 2 * (v4 >= 0xFFFF00) + 2;
    }
  }
  if (a2 > 0xFE)
  {
    unsigned int v5 = a2 - 255;
    int v6 = (v5 >> 8) + 1;
    *a1 = v5;
    uint64_t result = result;
    switch((int)result)
    {
      case 0:
        return result;
      case 1:
        a1[1] = v6;
        break;
      case 2:
        *(_WORD *)(a1 + 1) = v6;
        break;
      case 3:
LABEL_16:
        BUG();
      case 4:
        *(_DWORD *)(a1 + 1) = v6;
        break;
    }
  }
  else
  {
    uint64_t result = result;
    switch((int)result)
    {
      case 0:
        goto LABEL_11;
      case 1:
        a1[1] = 0;
        goto LABEL_11;
      case 2:
        *(_WORD *)(a1 + 1) = 0;
        goto LABEL_11;
      case 3:
        goto LABEL_16;
      case 4:
        *(_DWORD *)(a1 + 1) = 0;
LABEL_11:
        if (a2) {
          *a1 = a2 + 1;
        }
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for MLRecommender.IdentifierType()
{
  return &type metadata for MLRecommender.IdentifierType;
}

uint64_t MLRecommender.Identifier.description.getter(uint64_t a1, char a2, char a3)
{
  if (a3)
  {
    uint64_t v4 = lazy protocol witness table accessor for type Int and conformance Int();
    return BinaryInteger.description.getter(&type metadata for Int, v4);
  }
  else
  {
    swift_bridgeObjectRetain(a2);
  }
  return a1;
}

void MLRecommender.Identifier.hash(into:)(uint64_t a1, Swift::UInt a2, uint64_t a3, char a4)
{
  if (a4)
  {
    Hasher._combine(_:)(1uLL);
    Hasher._combine(_:)(a2);
  }
  else
  {
    Hasher._combine(_:)(0);
    String.hash(into:)(a1, a2);
  }
}

uint64_t static MLRecommender.Identifier.< infix(_:_:)(uint64_t a1, uint64_t a2, char a3, uint64_t a4, uint64_t a5, char a6)
{
  unsigned __int8 v8 = a3 & 1;
  unsigned __int8 v9 = a6 & 1;
  if (v8)
  {
    if (v9)
    {
      LOBYTE(v6) = a1 < a4;
      return v6;
    }
    goto LABEL_7;
  }
  if (v9)
  {
LABEL_7:
    LOBYTE(v6) = v8 < v9;
    return v6;
  }
  if (a1 == a4 && a2 == a5) {
    return 0;
  }
  unsigned int v6 = 0;
  if (_stringCompareWithSmolCheck(_:_:expecting:)(a1, a2, a4, a5, 0)) {
    return v6;
  }
  return _stringCompareWithSmolCheck(_:_:expecting:)(a1, a2, a4, a5, 1);
}

uint64_t static MLRecommender.Identifier.== infix(_:_:)(uint64_t a1, uint64_t a2, char a3, uint64_t a4, uint64_t a5, unsigned int a6)
{
  if (a3)
  {
    LOBYTE(a6) = (a1 == a4) & a6;
    return a6;
  }
  if (a6) {
    return 0;
  }
  if (a1 == a4)
  {
    LOBYTE(a6) = 1;
    if (a2 == a5) {
      return a6;
    }
  }
  return _stringCompareWithSmolCheck(_:_:expecting:)(a1, a2, a4, a5, 0);
}

Swift::Int MLRecommender.Identifier.hashValue.getter(Swift::UInt a1, uint64_t a2, char a3)
{
  Hasher.init(_seed:)(0);
  if (a3)
  {
    Hasher._combine(_:)(1uLL);
    Hasher._combine(_:)(a1);
  }
  else
  {
    Hasher._combine(_:)(0);
    String.hash(into:)(v5, a1);
  }
  return Hasher._finalize()();
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance MLRecommender.Identifier()
{
  return MLRecommender.Identifier.hashValue.getter(*(void *)v0, *(void *)(v0 + 8), *(unsigned char *)(v0 + 16));
}

void protocol witness for Hashable.hash(into:) in conformance MLRecommender.Identifier(uint64_t a1)
{
  MLRecommender.Identifier.hash(into:)(a1, *(void *)v1, *(void *)(v1 + 8), *(unsigned char *)(v1 + 16));
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance MLRecommender.Identifier(uint64_t a1)
{
  Swift::UInt v2 = *(void *)v1;
  char v3 = *(unsigned char *)(v1 + 16);
  Hasher.init(_seed:)(a1);
  if (v3)
  {
    Hasher._combine(_:)(1uLL);
    Hasher._combine(_:)(v2);
  }
  else
  {
    Hasher._combine(_:)(0);
    String.hash(into:)(v5, v2);
  }
  return Hasher._finalize()();
}

uint64_t protocol witness for static Comparable.< infix(_:_:) in conformance MLRecommender.Identifier(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return protocol witness for static Comparable.< infix(_:_:) in conformance MLRecommender.Identifier(a1, a2, a3, a4, (uint64_t (*)(void, void, void, void, void, void))static MLRecommender.Identifier.< infix(_:_:));
}

uint64_t protocol witness for static Comparable.<= infix(_:_:) in conformance MLRecommender.Identifier(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return protocol witness for static Comparable.< infix(_:_:) in conformance MLRecommender.Identifier(a1, a2, a3, a4, (uint64_t (*)(void, void, void, void, void, void))specialized static Comparable.<= infix(_:_:));
}

uint64_t protocol witness for static Comparable.>= infix(_:_:) in conformance MLRecommender.Identifier(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return protocol witness for static Comparable.< infix(_:_:) in conformance MLRecommender.Identifier(a1, a2, a3, a4, (uint64_t (*)(void, void, void, void, void, void))specialized static Comparable.>= infix(_:_:));
}

uint64_t protocol witness for static Comparable.> infix(_:_:) in conformance MLRecommender.Identifier(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return protocol witness for static Comparable.< infix(_:_:) in conformance MLRecommender.Identifier(a1, a2, a3, a4, (uint64_t (*)(void, void, void, void, void, void))specialized static Comparable.> infix(_:_:));
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance MLRecommender.Identifier()
{
  return MLRecommender.Identifier.description.getter(*(void *)v0, *(void *)(v0 + 8), *(unsigned char *)(v0 + 16));
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance MLRecommender.Identifier(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return protocol witness for static Comparable.< infix(_:_:) in conformance MLRecommender.Identifier(a1, a2, a3, a4, (uint64_t (*)(void, void, void, void, void, void))static MLRecommender.Identifier.== infix(_:_:));
}

uint64_t protocol witness for static Comparable.< infix(_:_:) in conformance MLRecommender.Identifier(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(void, void, void, void, void, void))
{
  return a5(*(void *)a1, *(void *)(a1 + 8), *(unsigned __int8 *)(a1 + 16), *(void *)a2, *(void *)(a2 + 8), *(unsigned __int8 *)(a2 + 16));
}

uint64_t MLRecommender.IdentifierType.description.getter(char a1)
{
  unsigned int v5 = v1;
  if (a1)
  {
    unsigned int v5 = &type metadata for Int;
    Swift::UInt v2 = (uint64_t *)&demangling cache variable for type metadata for Int.Type;
  }
  else
  {
    unsigned int v5 = &type metadata for String;
    Swift::UInt v2 = (uint64_t *)&demangling cache variable for type metadata for String.Type;
  }
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(v2);
  return String.init<A>(describing:)(&v5, v3);
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance MLRecommender.IdentifierType()
{
  return Rectangle.CodingKeys.hashValue.getter(*v0);
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance MLRecommender.IdentifierType()
{
  return MLRecommender.IdentifierType.description.getter(*v0);
}

uint64_t base witness table accessor for Equatable in MLRecommender.IdentifierType()
{
  return lazy protocol witness table accessor for type MLRecommender.IdentifierType and conformance MLRecommender.IdentifierType();
}

uint64_t lazy protocol witness table accessor for type MLRecommender.IdentifierType and conformance MLRecommender.IdentifierType()
{
  uint64_t result = lazy protocol witness table cache variable for type MLRecommender.IdentifierType and conformance MLRecommender.IdentifierType;
  if (!lazy protocol witness table cache variable for type MLRecommender.IdentifierType and conformance MLRecommender.IdentifierType)
  {
    uint64_t result = swift_getWitnessTable(&protocol conformance descriptor for MLRecommender.IdentifierType, &type metadata for MLRecommender.IdentifierType);
    lazy protocol witness table cache variable for type MLRecommender.IdentifierType and conformance MLRecommender.IdentifierType = result;
  }
  return result;
}

uint64_t base witness table accessor for Equatable in MLRecommender.Identifier()
{
  return lazy protocol witness table accessor for type MLRecommender.Identifier and conformance MLRecommender.Identifier();
}

uint64_t lazy protocol witness table accessor for type MLRecommender.Identifier and conformance MLRecommender.Identifier()
{
  uint64_t result = lazy protocol witness table cache variable for type MLRecommender.Identifier and conformance MLRecommender.Identifier;
  if (!lazy protocol witness table cache variable for type MLRecommender.Identifier and conformance MLRecommender.Identifier)
  {
    uint64_t result = swift_getWitnessTable(&protocol conformance descriptor for MLRecommender.Identifier, &type metadata for MLRecommender.Identifier);
    lazy protocol witness table cache variable for type MLRecommender.Identifier and conformance MLRecommender.Identifier = result;
  }
  return result;
}

{
  uint64_t result;

  uint64_t result = lazy protocol witness table cache variable for type MLRecommender.Identifier and conformance MLRecommender.Identifier;
  if (!lazy protocol witness table cache variable for type MLRecommender.Identifier and conformance MLRecommender.Identifier)
  {
    uint64_t result = swift_getWitnessTable(&protocol conformance descriptor for MLRecommender.Identifier, &type metadata for MLRecommender.Identifier);
    lazy protocol witness table cache variable for type MLRecommender.Identifier and conformance MLRecommender.Identifier = result;
  }
  return result;
}

{
  uint64_t result;

  uint64_t result = lazy protocol witness table cache variable for type MLRecommender.Identifier and conformance MLRecommender.Identifier;
  if (!lazy protocol witness table cache variable for type MLRecommender.Identifier and conformance MLRecommender.Identifier)
  {
    uint64_t result = swift_getWitnessTable(&protocol conformance descriptor for MLRecommender.Identifier, &type metadata for MLRecommender.Identifier);
    lazy protocol witness table cache variable for type MLRecommender.Identifier and conformance MLRecommender.Identifier = result;
  }
  return result;
}

uint64_t MLImageClassifier.CustomFeatureExtractor.modelPath.getter()
{
  uint64_t v2 = v0;
  uint64_t v3 = type metadata accessor for URL(0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v3 - 8) + 16))(v2, v1, v3);
}

uint64_t MLImageClassifier.CustomFeatureExtractor.modelPath.setter(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for URL(0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v2 - 8) + 40))(v1, a1, v2);
}

void (*MLImageClassifier.CustomFeatureExtractor.modelPath.modify())()
{
  return MLBoostedTreeRegressor.ModelParameters.maxDepth.modify;
}

uint64_t MLImageClassifier.CustomFeatureExtractor.outputName.getter()
{
  uint64_t v1 = *(int *)(type metadata accessor for MLImageClassifier.CustomFeatureExtractor(0) + 20);
  uint64_t v2 = *(void *)(v0 + v1);
  swift_bridgeObjectRetain(*(void *)(v0 + v1 + 8));
  return v2;
}

uint64_t type metadata accessor for MLImageClassifier.CustomFeatureExtractor(uint64_t a1)
{
  return type metadata accessor for MLImageClassifier.CustomFeatureExtractor(a1, (uint64_t *)&type metadata singleton initialization cache for MLImageClassifier.CustomFeatureExtractor, (uint64_t)&nominal type descriptor for MLImageClassifier.CustomFeatureExtractor);
}

uint64_t MLImageClassifier.CustomFeatureExtractor.outputName.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(int *)(type metadata accessor for MLImageClassifier.CustomFeatureExtractor(0) + 20);
  uint64_t result = swift_bridgeObjectRelease(*(void *)(v2 + v3 + 8));
  *(void *)(v2 + v3) = a1;
  *(void *)(v2 + v3 + 8) = a2;
  return result;
}

void (*MLImageClassifier.CustomFeatureExtractor.outputName.modify())()
{
  return MLBoostedTreeRegressor.ModelParameters.maxDepth.modify;
}

uint64_t MLImageClassifier.CustomFeatureExtractor.init(modelPath:outputName:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = v3;
  uint64_t v6 = *(int *)(type metadata accessor for MLImageClassifier.CustomFeatureExtractor(0) + 20);
  uint64_t v7 = type metadata accessor for URL(0);
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 32))(v5, a1, v7);
  *(void *)(v5 + v6) = a2;
  *(void *)(v5 + v6 + 8) = a3;
  return result;
}

Swift::Void __swiftcall __spoils<cf,zf,sf,of,pf,rax,rdx,rcx,rdi,rsi,r8,r9,r10,r11,r12,xmm0,xmm1,xmm2,xmm3,xmm4,xmm5,xmm6,xmm7> MLImageClassifier.CustomFeatureExtractor.validate()()
{
  uint64_t v1 = *(int *)(type metadata accessor for MLImageClassifier.CustomFeatureExtractor(0) + 20);
  unint64_t v2 = *(void *)(v0 + v1 + 8);
  if (!v2) {
    goto LABEL_5;
  }
  uint64_t v3 = HIBYTE(v2) & 0xF;
  if ((v2 & 0x2000000000000000) == 0) {
    uint64_t v3 = *(void *)(v0 + v1) & 0xFFFFFFFFFFFFLL;
  }
  if (!v3)
  {
    uint64_t v15 = lazy protocol witness table accessor for type MLCreateError and conformance MLCreateError();
    swift_allocError(&type metadata for MLCreateError, v15, 0, 0);
    *(void *)uint64_t v16 = 0xD000000000000034;
    uint64_t v14 = " is not readable." + 0x8000000000000000;
  }
  else
  {
LABEL_5:
    uint64_t v4 = objc_opt_self(NSFileManager);
    id v5 = [v4 defaultManager];
    id v6 = v5;
    void v20[3] = v0;
    URL.path.getter(v5);
    char v8 = v7;
    NSString v9 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease(v8);
    unsigned __int8 v10 = [v6 isReadableFileAtPath:v9];

    if (v10) {
      return;
    }
    _StringGuts.grow(_:)(32);
    swift_bridgeObjectRelease(0);
    strcpy((char *)v20, "The model at ");
    HIWORD(v20[1]) = -4864;
    v11._uint64_t countAndFlagsBits = URL.path.getter(0xE000000000000000);
    char object = (char)v11._object;
    String.append(_:)(v11);
    swift_bridgeObjectRelease(object);
    v13._char object = " is not supported." + 0x8000000000000000;
    v13._uint64_t countAndFlagsBits = 0xD000000000000011;
    String.append(_:)(v13);
    uint64_t v14 = (char *)v20[1];
    uint64_t v15 = lazy protocol witness table accessor for type MLCreateError and conformance MLCreateError();
    swift_allocError(&type metadata for MLCreateError, v15, 0, 0);
    *(void *)uint64_t v16 = v20[0];
  }
  *(void *)(v16 + 8) = v14;
  *(_OWORD *)(v16 + 16) = 0;
  *(_OWORD *)(v16 + 32) = 0;
  *(unsigned char *)(v16 + 48) = 0;
  swift_willThrow(&type metadata for MLCreateError, v15, v16, v17, v18, v19);
}

uint64_t MLImageClassifier.CustomFeatureExtractor.buildTransformer()(uint64_t a1)
{
  v2[5] = v1;
  v2[4] = a1;
  uint64_t v3 = type metadata accessor for MLModelImageFeatureExtractor(0);
  v2[6] = v3;
  uint64_t v4 = *(void *)(v3 - 8);
  v2[7] = v4;
  v2[8] = swift_task_alloc((*(void *)(v4 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = type metadata accessor for ImageScaler(0);
  v2[9] = v5;
  uint64_t v6 = *(void *)(v5 - 8);
  v2[10] = v6;
  v2[11] = swift_task_alloc((*(void *)(v6 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = type metadata accessor for FeatureType(0);
  v2[12] = v7;
  uint64_t v8 = *(void *)(v7 - 8);
  v2[13] = v8;
  unint64_t v9 = (*(void *)(v8 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v2[14] = swift_task_alloc(v9);
  v2[15] = swift_task_alloc(v9);
  unint64_t v10 = (*(void *)(*(void *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for FeatureDescription?)
                               - 8)
                   + 64)
       + 15) & 0xFFFFFFFFFFFFFFF0;
  v2[16] = swift_task_alloc(v10);
  v2[17] = swift_task_alloc(v10);
  v2[18] = swift_task_alloc(v10);
  v2[19] = swift_task_alloc(v10);
  uint64_t v11 = type metadata accessor for FeatureType.ImageParameters(0);
  v2[20] = v11;
  uint64_t v12 = *(void *)(v11 - 8);
  v2[21] = v12;
  v2[22] = swift_task_alloc((*(void *)(v12 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = type metadata accessor for Model(0);
  v2[23] = v13;
  uint64_t v14 = *(void *)(v13 - 8);
  v2[24] = v14;
  v2[25] = swift_task_alloc((*(void *)(v14 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  return swift_task_switch(MLImageClassifier.CustomFeatureExtractor.buildTransformer(), 0, 0);
}

{
  uint64_t v1;
  uint64_t *v2;
  uint64_t v3;
  uint64_t (*v4)();
  uint64_t v6;

  uint64_t v3 = *(void *)(*v2 + 208);
  uint64_t v6 = *v2;
  *(void *)(v6 + 216) = a1;
  *(void *)(v6 + 224) = v1;
  swift_task_dealloc(v3);
  if (v1) {
    uint64_t v4 = MLImageClassifier.CustomFeatureExtractor.buildTransformer();
  }
  else {
    uint64_t v4 = MLImageClassifier.CustomFeatureExtractor.buildTransformer();
  }
  return swift_task_switch(v4, 0, 0);
}

uint64_t MLImageClassifier.CustomFeatureExtractor.buildTransformer()()
{
  MLImageClassifier.CustomFeatureExtractor.buildModel()();
  type metadata accessor for MLModel();
  uint64_t v1 = (void *)swift_task_alloc(dword_3A701C);
  *(void *)(v0 + 208) = v1;
  *uint64_t v1 = v0;
  v1[1] = MLImageClassifier.CustomFeatureExtractor.buildTransformer();
  return static MLModel.compile(_:)(*(void *)(v0 + 200));
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  void *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  id v22;
  id v23;
  id v24;
  uint64_t v25;
  uint64_t v26;
  void *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  Swift::String v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  Swift::String v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t (*v50)(void);
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  long long v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  void *v63;
  uint64_t v64;
  uint64_t v65;
  long long v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  void (*v73)(uint64_t, uint64_t);
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  void (*v77)(uint64_t, uint64_t);
  uint64_t v78;
  double v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  void (*v89)(uint64_t, uint64_t);
  uint64_t v90;
  uint64_t v91;

  uint64_t v1 = *(void *)(v0 + 152);
  unint64_t v2 = Model.inputs.getter();
  uint64_t v3 = v2;
  specialized Collection.first.getter(v2);
  swift_bridgeObjectRelease(v3);
  uint64_t v65 = type metadata accessor for FeatureDescription(0);
  if (__swift_getEnumTagSinglePayload(v1, 1, v65) == 1) {
    BUG();
  }
  uint64_t v4 = *(void *)(v0 + 120);
  uint64_t v5 = *(void *)(v0 + 96);
  uint64_t v6 = *(void *)(v0 + 104);
  FeatureDescription.type.getter();
  if ((*(unsigned int (**)(uint64_t, uint64_t))(v6 + 88))(v4, v5) == enum case for FeatureType.image(_:))
  {
    uint64_t v7 = *(void *)(v0 + 176);
    uint64_t v8 = *(void *)(v0 + 168);
    unint64_t v9 = *(void *)(v0 + 160);
    uint64_t v88 = *(void *)(v0 + 152);
    unint64_t v70 = *(void *)(v0 + 144);
    unint64_t v10 = *(void *)(v0 + 120);
    (*(void (**)(uint64_t, void))(*(void *)(v0 + 104) + 96))(v10, *(void *)(v0 + 96));
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v8 + 32))(v7, v10, v9);
    uint64_t v11 = v88;
    id v89 = *(void (**)(uint64_t, uint64_t))(*(void *)(v65 - 8) + 8);
    v89(v11, v65);
    uint64_t v79 = (double)(int)FeatureType.ImageParameters.width.getter();
    uint64_t v12 = FeatureType.ImageParameters.height.getter();
    ImageScaler.init(targetSize:)(v79, (double)v12);
    uint64_t v13 = Model.inputs.getter();
    LOBYTE(v7) = v13;
    specialized Collection.first.getter(v13);
    swift_bridgeObjectRelease(v7);
    if (__swift_getEnumTagSinglePayload(v70, 1, v65) == 1) {
      BUG();
    }
    uint64_t v14 = *(void *)(v0 + 136);
    uint64_t v15 = *(void *)(v0 + 144);
    uint64_t v84 = FeatureDescription.name.getter();
    Swift::Int v71 = v16;
    v89(v15, v65);
    uint64_t v17 = Model.outputs.getter(v15, v65);
    LOBYTE(v15) = v17;
    specialized Collection.first.getter(v17);
    swift_bridgeObjectRelease(v15);
    if (__swift_getEnumTagSinglePayload(v14, 1, v65) == 1) {
      BUG();
    }
    id v75 = *(void *)(v0 + 224);
    uint64_t v18 = *(void **)(v0 + 216);
    uint64_t v19 = *(void *)(v0 + 136);
    uint64_t v80 = FeatureDescription.name.getter();
    uint64_t v21 = v20;
    v89(v19, v65);
    uint64_t v22 = objc_allocWithZone((Class)CIContext);
    float v23 = [v22 init];
    float v24 = v18;
    uint64_t v25 = v21;
    uint64_t v26 = v75;
    MLModelImageFeatureExtractor.init(model:inputName:outputName:context:)(v24, v84, v71, v80, v25, v23);
    uint64_t v27 = *(void **)(v0 + 216);
    uint64_t v85 = *(void *)(v0 + 200);
    uint64_t v90 = *(void *)(v0 + 192);
    uint64_t v76 = *(void *)(v0 + 184);
    uint64_t v72 = *(void *)(v0 + 176);
    uint64_t v68 = *(void *)(v0 + 160);
    uint64_t v81 = *(void *)(v0 + 168);
    if (!v26)
    {
      uint64_t v59 = *(void *)(v0 + 152);
      uint64_t v58 = *(void *)(v0 + 144);
      uint64_t v57 = *(void *)(v0 + 136);
      uint64_t v56 = *(void *)(v0 + 128);
      unint64_t v64 = *(void *)(v0 + 120);
      unint64_t v67 = *(void *)(v0 + 112);
      uint64_t v52 = *(void *)(v0 + 88);
      float v60 = *(void *)(v0 + 80);
      uint64_t v62 = *(void *)(v0 + 72);
      uint64_t v53 = *(void *)(v0 + 64);
      uint64_t v61 = *(void *)(v0 + 56);
      uint64_t v54 = *(void *)(v0 + 48);
      Transformer.appending<A>(_:)(v53, v62, v54, &protocol witness table for ImageScaler, &protocol witness table for MLModelImageFeatureExtractor);

      (*(void (**)(uint64_t, uint64_t))(v61 + 8))(v53, v54);
      (*(void (**)(uint64_t, uint64_t))(v60 + 8))(v52, v62);
      (*(void (**)(uint64_t, uint64_t))(v81 + 8))(v72, v68);
      (*(void (**)(uint64_t, uint64_t))(v90 + 8))(v85, v76);
      swift_task_dealloc(v85);
      swift_task_dealloc(v72);
      swift_task_dealloc(v59);
      swift_task_dealloc(v58);
      swift_task_dealloc(v57);
      swift_task_dealloc(v56);
      swift_task_dealloc(v64);
      swift_task_dealloc(v67);
      swift_task_dealloc(v52);
      swift_task_dealloc(v53);
      uint64_t v50 = *(uint64_t (**)(void))(v0 + 8);
      return v50();
    }
    uint64_t v28 = *(void *)(v0 + 88);
    uint64_t v29 = *(void *)(v0 + 72);
    unint64_t v30 = *(void *)(v0 + 80);

    (*(void (**)(uint64_t, uint64_t))(v30 + 8))(v28, v29);
    (*(void (**)(uint64_t, uint64_t))(v81 + 8))(v72, v68);
    uint64_t v31 = v85;
    uint64_t v32 = v76;
    unint64_t v33 = v90;
  }
  else
  {
    uint64_t v34 = *(void *)(v0 + 152);
    uint64_t v35 = *(void *)(v0 + 128);
    uint64_t v73 = *(void (**)(uint64_t, uint64_t))(*(void *)(v0 + 104) + 8);
    v73(*(void *)(v0 + 120), *(void *)(v0 + 96));
    unint64_t v77 = *(void (**)(uint64_t, uint64_t))(*(void *)(v65 - 8) + 8);
    v77(v34, v65);
    *(void *)&uint64_t v55 = 0;
    *((void *)&v55 + 1) = 0xE000000000000000;
    _StringGuts.grow(_:)(50);
    *(_OWORD *)(v0 + 16) = v55;
    v36._char object = "(no outputName found)" + 0x8000000000000000;
    v36._uint64_t countAndFlagsBits = 0xD000000000000027;
    String.append(_:)(v36);
    uint64_t v37 = Model.inputs.getter();
    LOBYTE(v34) = v37;
    specialized Collection.first.getter(v37);
    swift_bridgeObjectRelease(v34);
    if (__swift_getEnumTagSinglePayload(v35, 1, v65) == 1) {
      BUG();
    }
    uint64_t v63 = *(void **)(v0 + 216);
    id v82 = *(void *)(v0 + 200);
    uint64_t v86 = *(void *)(v0 + 192);
    uint64_t v69 = *(void *)(v0 + 184);
    uint64_t v38 = *(void *)(v0 + 128);
    uint64_t v39 = *(void *)(v0 + 96);
    uint64_t v40 = *(void *)(v0 + 112);
    FeatureDescription.type.getter();
    v77(v38, v65);
    _print_unlocked<A, B>(_:_:)(v40, v0 + 16, v39, &type metadata for DefaultStringInterpolation, &protocol witness table for DefaultStringInterpolation);
    v73(v40, v39);
    v41._uint64_t countAndFlagsBits = 0x64616574736E6920;
    v41._char object = (void *)0xE90000000000002ELL;
    String.append(_:)(v41);
    uint64_t v66 = *(_OWORD *)(v0 + 16);
    v41._char object = (void *)lazy protocol witness table accessor for type MLCreateError and conformance MLCreateError();
    swift_allocError(&type metadata for MLCreateError, v41._object, 0, 0);
    *(_OWORD *)uint64_t v42 = v66;
    *(_OWORD *)(v42 + 16) = 0;
    *(_OWORD *)(v42 + 32) = 0;
    *(unsigned char *)(v42 + 48) = 2;
    swift_willThrow(&type metadata for MLCreateError, v41._object, v42, v43, v44, v45);

    uint64_t v31 = v82;
    uint64_t v32 = v69;
    unint64_t v33 = v86;
  }
  (*(void (**)(uint64_t, uint64_t))(v33 + 8))(v31, v32);
  uint64_t v46 = *(void *)(v0 + 176);
  unint64_t v47 = *(void *)(v0 + 152);
  uint64_t v48 = *(void *)(v0 + 144);
  uint64_t v49 = *(void *)(v0 + 136);
  uint64_t v83 = *(void *)(v0 + 128);
  uint64_t v78 = *(void *)(v0 + 120);
  id v74 = *(void *)(v0 + 112);
  uint64_t v87 = *(void *)(v0 + 64);
  uint64_t v91 = *(void *)(v0 + 88);
  swift_task_dealloc(*(void *)(v0 + 200));
  swift_task_dealloc(v46);
  swift_task_dealloc(v47);
  swift_task_dealloc(v48);
  swift_task_dealloc(v49);
  swift_task_dealloc(v83);
  swift_task_dealloc(v78);
  swift_task_dealloc(v74);
  swift_task_dealloc(v91);
  swift_task_dealloc(v87);
  uint64_t v50 = *(uint64_t (**)(void))(v0 + 8);
  return v50();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  (*(void (**)(void, void))(*(void *)(v0 + 192) + 8))(*(void *)(v0 + 200), *(void *)(v0 + 184));
  uint64_t v1 = *(void *)(v0 + 176);
  unint64_t v2 = *(void *)(v0 + 152);
  uint64_t v3 = *(void *)(v0 + 144);
  uint64_t v4 = *(void *)(v0 + 136);
  unint64_t v10 = *(void *)(v0 + 128);
  unint64_t v9 = *(void *)(v0 + 120);
  uint64_t v8 = *(void *)(v0 + 112);
  uint64_t v6 = *(void *)(v0 + 64);
  uint64_t v7 = *(void *)(v0 + 88);
  swift_task_dealloc(*(void *)(v0 + 200));
  swift_task_dealloc(v1);
  swift_task_dealloc(v2);
  swift_task_dealloc(v3);
  swift_task_dealloc(v4);
  swift_task_dealloc(v10);
  swift_task_dealloc(v9);
  swift_task_dealloc(v8);
  swift_task_dealloc(v7);
  swift_task_dealloc(v6);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t MLImageClassifier.CustomFeatureExtractor.buildModel()()
{
  v207 = v1;
  *(void *)&long long v201 = v2;
  uint64_t v190 = v0;
  uint64_t v176 = type metadata accessor for FeatureType.ShapedArrayParameters.DataType(0);
  uint64_t v175 = *(void *)(v176 - 8);
  int64_t v3 = *(void *)(v175 + 64);
  uint64_t v4 = alloca(v3);
  uint64_t v5 = alloca(v3);
  uint64_t v177 = &v164;
  uint64_t v191 = type metadata accessor for FeatureType.ShapedArrayParameters(0);
  uint64_t v174 = *(void *)(v191 - 8);
  int64_t v6 = *(void *)(v174 + 64);
  uint64_t v7 = alloca(v6);
  uint64_t v8 = alloca(v6);
  int64_t v197 = &v164;
  uint64_t v180 = type metadata accessor for NeuralNetwork.Layer.FlattenParameters.ChannelLayout(0);
  uint64_t v192 = *(void *)(v180 - 8);
  int64_t v9 = *(void *)(v192 + 64);
  unint64_t v10 = alloca(v9);
  uint64_t v11 = alloca(v9);
  uint64_t v181 = &v164;
  uint64_t v189 = type metadata accessor for NeuralNetwork.Layer(0);
  uint64_t v200 = *(void *)(v189 - 8);
  int64_t v12 = *(void *)(v200 + 64);
  uint64_t v13 = alloca(v12);
  uint64_t v14 = alloca(v12);
  uint64_t v196 = &v164;
  int64_t v15 = *(void *)(*(void *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NeuralNetwork.Layer?)
                              - 8)
                  + 64);
  uint64_t v16 = alloca(v15);
  uint64_t v17 = alloca(v15);
  uint64_t v183 = &v164;
  uint64_t v18 = alloca(v15);
  uint64_t v19 = alloca(v15);
  uint64_t v182 = &v164;
  uint64_t v20 = alloca(v15);
  uint64_t v21 = alloca(v15);
  uint64_t v184 = &v164;
  uint64_t v22 = alloca(v15);
  float v23 = alloca(v15);
  uint64_t v173 = &v164;
  uint64_t v188 = type metadata accessor for FeatureType(0);
  uint64_t v187 = *(void *)(v188 - 8);
  int64_t v24 = *(void *)(v187 + 64);
  uint64_t v25 = alloca(v24);
  uint64_t v26 = alloca(v24);
  uint64_t v178 = &v164;
  uint64_t v27 = alloca(v24);
  uint64_t v28 = alloca(v24);
  char v166 = &v164;
  int64_t v29 = *(void *)(*(void *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for FeatureDescription?)
                              - 8)
                  + 64);
  unint64_t v30 = alloca(v29);
  uint64_t v31 = alloca(v29);
  uint64_t v199 = &v164;
  uint64_t v171 = type metadata accessor for NeuralNetworkRegressor(0);
  uint64_t v170 = *(void *)(v171 - 8);
  int64_t v32 = *(void *)(v170 + 64);
  unint64_t v33 = alloca(v32);
  uint64_t v34 = alloca(v32);
  uint64_t v172 = &v164;
  uint64_t v168 = type metadata accessor for NeuralNetworkClassifier(0);
  uint64_t v167 = *(void *)(v168 - 8);
  int64_t v35 = *(void *)(v167 + 64);
  uint64_t v36 = alloca(v35);
  uint64_t v37 = alloca(v35);
  uint64_t v169 = &v164;
  uint64_t v194 = type metadata accessor for NeuralNetwork(0);
  uint64_t v165 = *(void *)(v194 - 8);
  int64_t v38 = *(void *)(v165 + 64);
  uint64_t v39 = alloca(v38);
  uint64_t v40 = alloca(v38);
  uint64_t v195 = &v164;
  uint64_t v186 = type metadata accessor for ModelKind(0);
  uint64_t v185 = *(void *)(v186 - 8);
  int64_t v41 = *(void *)(v185 + 64);
  uint64_t v42 = alloca(v41);
  uint64_t v43 = alloca(v41);
  uint64_t v179 = &v164;
  uint64_t v44 = alloca(v41);
  uint64_t v45 = alloca(v41);
  uint64_t v206 = &v164;
  uint64_t v46 = type metadata accessor for URL(0);
  uint64_t v47 = *(void *)(v46 - 8);
  int64_t v48 = *(void *)(v47 + 64);
  uint64_t v49 = alloca(v48);
  uint64_t v50 = alloca(v48);
  uint64_t v204 = type metadata accessor for Model(0);
  uint64_t v203 = *(void *)(v204 - 8);
  int64_t v51 = *(void *)(v203 + 64);
  uint64_t v52 = alloca(v51);
  uint64_t v53 = alloca(v51);
  (*(void (**)(uint64_t *, void, uint64_t))(v47 + 16))(&v164, v201, v46);
  uint64_t v54 = v207;
  uint64_t result = Model.init(contentsOf:)(&v164);
  if (v54) {
    return result;
  }
  uint64_t v198 = 0;
  uint64_t v56 = v206;
  uint64_t v205 = &v164;
  Model.kind.getter();
  uint64_t v57 = v186;
  uint64_t v58 = v185;
  int v59 = (*(uint64_t (**)(uint64_t *, uint64_t))(v185 + 88))(v56, v186);
  if (v59 == enum case for ModelKind.neuralNetwork(_:))
  {
    unsigned int v202 = enum case for ModelKind.neuralNetwork(_:);
    (*(void (**)(uint64_t *, uint64_t))(v58 + 96))(v56, v57);
    float v60 = v195;
    uint64_t v61 = v56;
    uint64_t v62 = v194;
    uint64_t v63 = v165;
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(v165 + 32))(v195, v61, v194);
    v207 = (void *)NeuralNetwork.layers.getter();
    uint64_t v206 = (uint64_t *)NeuralNetwork.preprocessors.getter();
    unint64_t v64 = v60;
    uint64_t v65 = v62;
LABEL_6:
    (*(void (**)(uint64_t *, uint64_t))(v63 + 8))(v64, v65);
    goto LABEL_7;
  }
  if (v59 == enum case for ModelKind.neuralNetworkClassifier(_:))
  {
    unsigned int v202 = enum case for ModelKind.neuralNetwork(_:);
    (*(void (**)(uint64_t *, uint64_t))(v58 + 96))(v56, v57);
    uint64_t v66 = v169;
    unint64_t v67 = v56;
    uint64_t v68 = v168;
    uint64_t v63 = v167;
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(v167 + 32))(v169, v67, v168);
    v207 = (void *)NeuralNetworkClassifier.layers.getter();
    uint64_t v206 = (uint64_t *)NeuralNetworkClassifier.preprocessors.getter();
    unint64_t v64 = v66;
    uint64_t v65 = v68;
    goto LABEL_6;
  }
  if (v59 != enum case for ModelKind.neuralNetworkRegressor(_:))
  {
    uint64_t v111 = lazy protocol witness table accessor for type MLCreateError and conformance MLCreateError();
    swift_allocError(&type metadata for MLCreateError, v111, 0, 0);
    *(void *)uint64_t v112 = 0xD00000000000006ALL;
    *(void *)(v112 + 8) = " must be an image, got " + 0x8000000000000000;
    *(_OWORD *)(v112 + 16) = 0;
    *(_OWORD *)(v112 + 32) = 0;
    *(unsigned char *)(v112 + 48) = 2;
    swift_willThrow(&type metadata for MLCreateError, v111, v112, v113, v114, v115);
    (*(void (**)(uint64_t *, uint64_t))(v203 + 8))(v205, v204);
    return (*(uint64_t (**)(uint64_t *, uint64_t))(v58 + 8))(v56, v57);
  }
  unsigned int v202 = enum case for ModelKind.neuralNetwork(_:);
  (*(void (**)(uint64_t *, uint64_t))(v58 + 96))(v56, v57);
  uint64_t v102 = v172;
  uint64_t v103 = v171;
  uint64_t v104 = v170;
  (*(void (**)(uint64_t *, uint64_t *, uint64_t))(v170 + 32))(v172, v56, v171);
  v207 = (void *)NeuralNetworkRegressor.layers.getter();
  uint64_t v206 = (uint64_t *)NeuralNetworkRegressor.preprocessors.getter();
  (*(void (**)(uint64_t *, uint64_t))(v104 + 8))(v102, v103);
LABEL_7:
  uint64_t v69 = v205;
  uint64_t v70 = Model.inputs.getter();
  uint64_t v71 = *(void *)(v70 + 16);
  swift_bridgeObjectRelease(v70);
  if (v71 != 1)
  {
    swift_bridgeObjectRelease((_BYTE)v207);
    swift_bridgeObjectRelease((_BYTE)v206);
    *(void *)&long long v193 = 0;
    *((void *)&v193 + 1) = 0xE000000000000000;
    _StringGuts.grow(_:)(55);
    v92._uint64_t countAndFlagsBits = 0xD00000000000002CLL;
    v92._char object = " neural network regressor." + 0x8000000000000000;
    String.append(_:)(v92);
    uint64_t v93 = Model.inputs.getter();
    uint64_t v94 = *(void *)(v93 + 16);
    swift_bridgeObjectRelease(v93);
    uint64_t v164 = v94;
    uint64_t v95 = dispatch thunk of CustomStringConvertible.description.getter(&type metadata for Int, &protocol witness table for Int);
    LOBYTE(v94) = (_BYTE)v96;
    v92._uint64_t countAndFlagsBits = v95;
    v92._char object = v96;
    String.append(_:)(v92);
    swift_bridgeObjectRelease(v94);
    v92._uint64_t countAndFlagsBits = 0x64616574736E6920;
    v92._char object = (void *)0xE90000000000002ELL;
    String.append(_:)(v92);
    long long v201 = v193;
    v92._char object = (void *)lazy protocol witness table accessor for type MLCreateError and conformance MLCreateError();
    swift_allocError(&type metadata for MLCreateError, v92._object, 0, 0);
    *(_OWORD *)uint64_t v97 = v201;
    *(_OWORD *)(v97 + 16) = 0;
    *(_OWORD *)(v97 + 32) = 0;
    *(unsigned char *)(v97 + 48) = 2;
    swift_willThrow(&type metadata for MLCreateError, v92._object, v97, v98, v99, v100);
    uint64_t v101 = v69;
    return (*(uint64_t (**)(uint64_t *, uint64_t))(v203 + 8))(v101, v204);
  }
  uint64_t v72 = Model.inputs.getter();
  char v73 = v72;
  uint64_t v74 = (uint64_t)v199;
  specialized Collection.first.getter(v72);
  swift_bridgeObjectRelease(v73);
  uint64_t v75 = type metadata accessor for FeatureDescription(0);
  if (__swift_getEnumTagSinglePayload(v74, 1, v75) == 1) {
    BUG();
  }
  uint64_t v76 = v166;
  FeatureDescription.type.getter();
  uint64_t v77 = v188;
  uint64_t v78 = v187;
  if ((*(unsigned int (**)(uint64_t *, uint64_t))(v187 + 88))(v76, v188) != enum case for FeatureType.image(_:))
  {
    swift_bridgeObjectRelease((_BYTE)v207);
    swift_bridgeObjectRelease((_BYTE)v206);
    (*(void (**)(uint64_t *, uint64_t))(v78 + 8))(v76, v77);
    (*(void (**)(uint64_t *, uint64_t))(*(void *)(v75 - 8) + 8))(v199, v75);
    uint64_t v105 = lazy protocol witness table accessor for type MLCreateError and conformance MLCreateError();
    swift_allocError(&type metadata for MLCreateError, v105, 0, 0);
    *(void *)uint64_t v106 = 0xD000000000000022;
    uint64_t v110 = "ith only one input, but got ";
LABEL_34:
    *(void *)(v106 + 8) = (unint64_t)v110 | 0x8000000000000000;
    *(_OWORD *)(v106 + 16) = 0;
    *(_OWORD *)(v106 + 32) = 0;
    *(unsigned char *)(v106 + 48) = 2;
LABEL_35:
    swift_willThrow(&type metadata for MLCreateError, v105, v106, v107, v108, v109);
    uint64_t v101 = v205;
    return (*(uint64_t (**)(uint64_t *, uint64_t))(v203 + 8))(v101, v204);
  }
  (*(void (**)(uint64_t *, uint64_t))(v78 + 8))(v76, v77);
  uint64_t v79 = v199;
  uint64_t v199 = *(uint64_t **)(v75 - 8);
  ((void (*)(uint64_t *, uint64_t))v199[1])(v79, v75);
  uint64_t v80 = *(int *)(type metadata accessor for MLImageClassifier.CustomFeatureExtractor(0) + 20);
  uint64_t v81 = *(void *)(v201 + v80 + 8);
  uint64_t v82 = v204;
  if (!v81)
  {
    uint64_t v91 = v207;
    uint64_t v88 = v198;
    goto LABEL_22;
  }
  uint64_t v83 = *(void *)(v201 + v80);
  swift_bridgeObjectRetain(*(void *)(v201 + v80 + 8));
  uint64_t v84 = v207;
  swift_bridgeObjectRetain((_BYTE)v207);
  uint64_t v85 = v198;
  uint64_t v86 = specialized Collection.firstIndex(where:)((uint64_t)v84, v83, v81);
  LOBYTE(v83) = v87;
  uint64_t v88 = v85;
  swift_bridgeObjectRelease((_BYTE)v84);
  if (v83)
  {
    swift_bridgeObjectRelease((_BYTE)v84);
    swift_bridgeObjectRelease((_BYTE)v206);
    uint64_t v105 = lazy protocol witness table accessor for type MLCreateError and conformance MLCreateError();
    swift_allocError(&type metadata for MLCreateError, v105, 0, 0);
    *(void *)uint64_t v106 = 0xD000000000000031;
    uint64_t v110 = "least one layer.";
    goto LABEL_34;
  }
  BOOL v89 = __OFADD__(1, v86);
  uint64_t v90 = v86 + 1;
  if (v89) {
    BUG();
  }
  if (v90 < 0) {
    BUG();
  }
  uint64_t v82 = v204;
  if (v207[2] < (unint64_t)v90) {
    BUG();
  }
  uint64_t v91 = specialized Array.init<A>(_:)((uint64_t)v207, (uint64_t)v207 + ((*(unsigned __int8 *)(v200 + 80) + 32) & ~*(unsigned __int8 *)(v200 + 80)), 0, 2 * v90 + 1);
LABEL_22:
  uint64_t v116 = v203;
  if (!v91[2])
  {
    swift_bridgeObjectRelease((_BYTE)v91);
    swift_bridgeObjectRelease((_BYTE)v206);
    uint64_t v150 = lazy protocol witness table accessor for type MLCreateError and conformance MLCreateError();
    swift_allocError(&type metadata for MLCreateError, v150, 0, 0);
    *(void *)uint64_t v151 = 0xD000000000000030;
    *(void *)(v151 + 8) = "ve 1 output, got " + 0x8000000000000000;
    *(_OWORD *)(v151 + 16) = 0;
    *(_OWORD *)(v151 + 32) = 0;
    *(unsigned char *)(v151 + 48) = 2;
    swift_willThrow(&type metadata for MLCreateError, v150, v151, v152, v153, v154);
    return (*(uint64_t (**)(uint64_t *, uint64_t))(v116 + 8))(v205, v82);
  }
  uint64_t v198 = v88;
  uint64_t v117 = (uint64_t)v173;
  v207 = v91;
  specialized BidirectionalCollection.last.getter((uint64_t)v91);
  uint64_t v118 = v189;
  if (__swift_getEnumTagSinglePayload(v117, 1, v189) == 1) {
    BUG();
  }
  uint64_t v119 = NeuralNetwork.Layer.outputNames.getter();
  uint64_t v120 = v117;
  uint64_t v121 = *(void (**)(void, void))(v200 + 8);
  v121(v120, v118);
  uint64_t v122 = *(void *)(v119 + 16);
  swift_bridgeObjectRelease(v119);
  if (v122 != 1)
  {
    uint64_t v155 = v121;
    swift_bridgeObjectRelease((_BYTE)v206);
    *(void *)&long long v193 = 0;
    *((void *)&v193 + 1) = 0xE000000000000000;
    _StringGuts.grow(_:)(60);
    v156._char object = " must be an image." + 0x8000000000000000;
    v156._uint64_t countAndFlagsBits = 0xD000000000000031;
    String.append(_:)(v156);
    uint64_t v157 = (uint64_t)v183;
    char v158 = (char)v207;
    specialized BidirectionalCollection.last.getter((uint64_t)v207);
    if (__swift_getEnumTagSinglePayload(v157, 1, v118) == 1) {
      BUG();
    }
    swift_bridgeObjectRelease(v158);
    uint64_t v159 = NeuralNetwork.Layer.outputNames.getter();
    v155(v157, v118);
    uint64_t v160 = *(void *)(v159 + 16);
    swift_bridgeObjectRelease(v159);
    uint64_t v164 = v160;
    v161._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter(&type metadata for Int, &protocol witness table for Int);
    LOBYTE(v159) = v161._object;
    String.append(_:)(v161);
    swift_bridgeObjectRelease(v159);
    v162._uint64_t countAndFlagsBits = 0x64616574736E6920;
    v162._char object = (void *)0xE90000000000002ELL;
    String.append(_:)(v162);
    long long v201 = v193;
    uint64_t v105 = lazy protocol witness table accessor for type MLCreateError and conformance MLCreateError();
    swift_allocError(&type metadata for MLCreateError, v105, 0, 0);
    *(_OWORD *)uint64_t v106 = v201;
    *(_OWORD *)(v106 + 16) = 0;
    *(_OWORD *)(v106 + 32) = 0;
    *(unsigned char *)(v106 + 48) = 2;
    goto LABEL_35;
  }
  *(void *)&long long v201 = v121;
  *(void *)&long long v193 = 0;
  *((void *)&v193 + 1) = 0xE000000000000000;
  uint64_t v123 = (uint64_t)v184;
  specialized BidirectionalCollection.last.getter((uint64_t)v207);
  if (__swift_getEnumTagSinglePayload(v123, 1, v118) == 1) {
    BUG();
  }
  uint64_t v124 = v123;
  uint64_t v125 = NeuralNetwork.Layer.name.getter();
  uint64_t v127 = v126;
  ((void (*)(uint64_t, uint64_t))v201)(v124, v118);
  v128._uint64_t countAndFlagsBits = v125;
  v128._char object = v127;
  String.append(_:)(v128);
  swift_bridgeObjectRelease((_BYTE)v127);
  v128._uint64_t countAndFlagsBits = 0x6E657474616C46;
  v128._char object = (void *)0xE700000000000000;
  String.append(_:)(v128);
  uint64_t v194 = *((void *)&v193 + 1);
  uint64_t v195 = (uint64_t *)v193;
  uint64_t v129 = (uint64_t)v182;
  specialized BidirectionalCollection.last.getter((uint64_t)v207);
  if (__swift_getEnumTagSinglePayload(v129, 1, v118) == 1) {
    BUG();
  }
  uint64_t v130 = (void *)NeuralNetwork.Layer.outputNames.getter();
  ((void (*)(uint64_t, uint64_t))v201)(v129, v118);
  uint64_t v131 = v181;
  if (!v130[2])
  {
    swift_bridgeObjectRelease((_BYTE)v130);
    BUG();
  }
  *(void *)&long long v201 = v130[4];
  uint64_t v132 = v130[5];
  swift_bridgeObjectRetain(v132);
  swift_bridgeObjectRelease((_BYTE)v130);
  uint64_t v133 = v180;
  (*(void (**)(uint64_t *, void, uint64_t))(v192 + 104))(v131, enum case for NeuralNetwork.Layer.FlattenParameters.ChannelLayout.channelFirst(_:), v180);
  char v134 = v194;
  static NeuralNetwork.Layer.flatten(name:inputName:outputName:targetChannelLayout:)(v195, v194, v201, v132, 0x7365727574616566, 0xE800000000000000, v131);
  swift_bridgeObjectRelease(v134);
  swift_bridgeObjectRelease(v132);
  (*(void (**)(uint64_t *, uint64_t))(v192 + 8))(v131, v133);
  if (!swift_isUniquelyReferenced_nonNull_native(v207)) {
    v207 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v207[2] + 1, 1, (uint64_t)v207);
  }
  uint64_t v135 = v197;
  uint64_t v136 = v200;
  unint64_t v137 = v207[2];
  uint64_t v138 = v196;
  if (v207[3] >> 1 <= v137)
  {
    uint64_t v163 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(v207[3] >= 2uLL, v137 + 1, 1, (uint64_t)v207);
    uint64_t v138 = v196;
    uint64_t v136 = v200;
    v207 = v163;
  }
  uint64_t v139 = v207;
  v207[2] = v137 + 1;
  v207 = v139;
  (*(void (**)(char *, uint64_t *, uint64_t))(v136 + 32))((char *)v139+ ((*(unsigned __int8 *)(v136 + 80) + 32) & ~*(unsigned __int8 *)(v136 + 80))+ *(void *)(v136 + 72) * v137, v138, v189);
  FeatureType.ShapedArrayParameters.init()();
  uint64_t v140 = v177;
  (*(void (**)(uint64_t *, void, uint64_t))(v175 + 104))(v177, enum case for FeatureType.ShapedArrayParameters.DataType.float32(_:), v176);
  int v141 = v135;
  FeatureType.ShapedArrayParameters.dataType.setter(v140);
  Model.init()();
  uint64_t v142 = Model.specificationVersion.getter();
  Model.specificationVersion.setter(v142);
  uint64_t v143 = Model.inputs.getter();
  Model.inputs.setter(v143);
  uint64_t v144 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<FeatureDescription>);
  uint64_t v145 = swift_allocObject(v144, ((*((unsigned __int8 *)v199 + 80) + 32) & ~*((unsigned __int8 *)v199 + 80)) + v199[9], *((unsigned __int8 *)v199 + 80) | 7);
  *(void *)(v145 + 16) = 1;
  *(void *)(v145 + 24) = 2;
  uint64_t v146 = v178;
  BOOL v147 = v141;
  uint64_t v148 = v174;
  (*(void (**)(uint64_t *, uint64_t *, uint64_t))(v174 + 16))(v178, v147, v191);
  (*(void (**)(uint64_t *, void, uint64_t))(v187 + 104))(v146, enum case for FeatureType.shapedArray(_:), v188);
  FeatureDescription.init(name:type:description:)(0x7365727574616566, 0xE800000000000000, v146, 0, 0xE000000000000000);
  Model.outputs.setter(v145);
  unsigned int v149 = v179;
  NeuralNetwork.init(layers:preprocessors:)(v207, v206);
  (*(void (**)(uint64_t *, void, uint64_t))(v185 + 104))(v149, v202, v186);
  Model.kind.setter(v149);
  (*(void (**)(uint64_t *, uint64_t))(v148 + 8))(v197, v191);
  return (*(uint64_t (**)(uint64_t *, uint64_t))(v203 + 8))(v205, v204);
}

uint64_t specialized Collection.firstIndex(where:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v11 = *(void *)(a1 + 16);
  if (v11)
  {
    uint64_t v4 = *(void *)(type metadata accessor for NeuralNetwork.Layer(0) - 8);
    uint64_t v5 = ((*(unsigned __int8 *)(v4 + 80) + 32) & ~*(unsigned __int8 *)(v4 + 80)) + a1;
    uint64_t v12 = *(void *)(v4 + 72);
    uint64_t v6 = 0;
    while (1)
    {
      uint64_t v7 = NeuralNetwork.Layer.name.getter();
      uint64_t v9 = v8;
      if (v7 == a2 && v8 == a3) {
        break;
      }
      char v13 = _stringCompareWithSmolCheck(_:_:expecting:)(v7, v8, a2, a3, 0);
      swift_bridgeObjectRelease(v9);
      if (v13) {
        goto LABEL_10;
      }
      ++v6;
      v5 += v12;
      if (v11 == v6)
      {
        uint64_t v6 = 0;
        goto LABEL_10;
      }
    }
    swift_bridgeObjectRelease(a3);
  }
  else
  {
    uint64_t v6 = 0;
  }
LABEL_10:
  swift_bridgeObjectRelease(a3);
  return v6;
}

Swift::Void __swiftcall __spoils<cf,zf,sf,of,pf,rax,rdx,rcx,rdi,rsi,r8,r9,r10,r11,r12,xmm0,xmm1,xmm2,xmm3,xmm4,xmm5,xmm6,xmm7> MLImageClassifier.FeatureExtractorType.validate()()
{
  *(void *)&long long v20 = v0;
  int64_t v2 = *(void *)(*(void *)(type metadata accessor for MLImageClassifier.CustomFeatureExtractor(0) - 8) + 64);
  int64_t v3 = alloca(v2);
  uint64_t v4 = alloca(v2);
  uint64_t v5 = type metadata accessor for MLImageClassifier.FeatureExtractorType(0);
  int64_t v6 = *(void *)(*(void *)(v5 - 8) + 64);
  uint64_t v7 = alloca(v6);
  uint64_t v8 = alloca(v6);
  outlined init with copy of MLImageClassifier.FeatureExtractorType(v1, (uint64_t)&v17);
  if (swift_getEnumCaseMultiPayload(&v17, v5) == 1)
  {
    outlined init with take of MLImageClassifier.CustomFeatureExtractor((uint64_t)&v17, (uint64_t)&v17);
    MLImageClassifier.CustomFeatureExtractor.validate()();
    outlined destroy of MLActivityClassifier.ModelParameters((uint64_t)&v17, type metadata accessor for MLImageClassifier.CustomFeatureExtractor);
  }
  else if (!(_BYTE)v18)
  {
    uint64_t v9 = v17;
    if (!specialized Sequence<>.contains(_:)(v17, (uint64_t)&outlined read-only object #0 of MLImageClassifier.FeatureExtractorType.validate()))
    {
      *(void *)&long long v18 = 0;
      *((void *)&v18 + 1) = 0xE000000000000000;
      _StringGuts.grow(_:)(29);
      swift_bridgeObjectRelease(BYTE8(v18));
      *(void *)&long long v18 = 0x6E6F697369766552;
      *((void *)&v18 + 1) = 0xE900000000000020;
      uint64_t v19 = v9;
      v10._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter(&type metadata for Int, &protocol witness table for Int);
      char object = (char)v10._object;
      String.append(_:)(v10);
      swift_bridgeObjectRelease(object);
      v12._char object = "und in the model." + 0x8000000000000000;
      v12._uint64_t countAndFlagsBits = 0xD000000000000012;
      String.append(_:)(v12);
      long long v20 = v18;
      v12._char object = (void *)lazy protocol witness table accessor for type MLCreateError and conformance MLCreateError();
      swift_allocError(&type metadata for MLCreateError, v12._object, 0, 0);
      *(_OWORD *)uint64_t v13 = v20;
      *(_OWORD *)(v13 + 16) = 0;
      *(_OWORD *)(v13 + 32) = 0;
      *(unsigned char *)(v13 + 48) = 0;
      swift_willThrow(&type metadata for MLCreateError, v12._object, v13, v14, v15, v16);
    }
  }
}

uint64_t MLImageClassifier.FeatureExtractorType.description.getter()
{
  uint64_t v1 = type metadata accessor for MLImageClassifier.CustomFeatureExtractor(0);
  int64_t v2 = *(void *)(*(void *)(v1 - 8) + 64);
  int64_t v3 = alloca(v2);
  uint64_t v4 = alloca(v2);
  uint64_t v5 = type metadata accessor for MLImageClassifier.FeatureExtractorType(0);
  int64_t v6 = *(void *)(*(void *)(v5 - 8) + 64);
  uint64_t v7 = alloca(v6);
  uint64_t v8 = alloca(v6);
  outlined init with copy of MLImageClassifier.FeatureExtractorType(v0, (uint64_t)v15);
  if (swift_getEnumCaseMultiPayload(v15, v5) != 1) {
    return 0x697250656E656353;
  }
  outlined init with take of MLImageClassifier.CustomFeatureExtractor((uint64_t)v15, (uint64_t)v15);
  uint64_t v9 = *(int *)(v1 + 20);
  Swift::String v10 = *(char **)((char *)&v15[1] + v9);
  uint64_t v16 = v15;
  if (v10)
  {
    v11._uint64_t countAndFlagsBits = *(void *)((char *)v15 + v9);
    Swift::String v12 = v10;
  }
  else
  {
    Swift::String v12 = "interactionHeaps" + 0x8000000000000000;
    v11._uint64_t countAndFlagsBits = 0xD000000000000015;
  }
  strcpy((char *)v15, "Custom model: ");
  HIBYTE(v15[1]) = -18;
  v11._char object = v12;
  String.append(_:)(v11);
  uint64_t v13 = v15[0];
  swift_bridgeObjectRetain((_BYTE)v10);
  swift_bridgeObjectRelease((_BYTE)v12);
  outlined destroy of MLActivityClassifier.ModelParameters((uint64_t)v16, type metadata accessor for MLImageClassifier.CustomFeatureExtractor);
  return v13;
}

uint64_t type metadata accessor for MLImageClassifier.FeatureExtractorType(uint64_t a1)
{
  return type metadata accessor for MLImageClassifier.CustomFeatureExtractor(a1, (uint64_t *)&type metadata singleton initialization cache for MLImageClassifier.FeatureExtractorType, (uint64_t)&nominal type descriptor for MLImageClassifier.FeatureExtractorType);
}

uint64_t type metadata accessor for MLImageClassifier.CustomFeatureExtractor(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  uint64_t result = *a2;
  if (!*a2) {
    return swift_getSingletonMetadata(a1, a3);
  }
  return result;
}

uint64_t outlined init with copy of MLImageClassifier.FeatureExtractorType(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = type metadata accessor for MLImageClassifier.FeatureExtractorType(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v2 - 8) + 16))(a2, a1, v2);
  return a2;
}

uint64_t outlined init with take of MLImageClassifier.CustomFeatureExtractor(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = type metadata accessor for MLImageClassifier.CustomFeatureExtractor(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v2 - 8) + 32))(a2, a1, v2);
  return a2;
}

uint64_t MLImageClassifier.FeatureExtractorType.debugDescription.getter()
{
  uint64_t v1 = type metadata accessor for MLImageClassifier.CustomFeatureExtractor(0);
  int64_t v2 = *(void *)(*(void *)(v1 - 8) + 64);
  int64_t v3 = alloca(v2);
  uint64_t v4 = alloca(v2);
  uint64_t v5 = type metadata accessor for MLImageClassifier.FeatureExtractorType(0);
  int64_t v6 = *(void *)(*(void *)(v5 - 8) + 64);
  uint64_t v7 = alloca(v6);
  uint64_t v8 = alloca(v6);
  outlined init with copy of MLImageClassifier.FeatureExtractorType(v0, (uint64_t)v15);
  if (swift_getEnumCaseMultiPayload(v15, v5) != 1) {
    return 0x697250656E656353;
  }
  outlined init with take of MLImageClassifier.CustomFeatureExtractor((uint64_t)v15, (uint64_t)v15);
  uint64_t v9 = *(int *)(v1 + 20);
  Swift::String v10 = *(char **)((char *)&v15[1] + v9);
  uint64_t v16 = v15;
  if (v10)
  {
    v11._uint64_t countAndFlagsBits = *(void *)((char *)v15 + v9);
    Swift::String v12 = v10;
  }
  else
  {
    Swift::String v12 = "interactionHeaps" + 0x8000000000000000;
    v11._uint64_t countAndFlagsBits = 0xD000000000000015;
  }
  strcpy((char *)v15, "Custom model: ");
  HIBYTE(v15[1]) = -18;
  v11._char object = v12;
  String.append(_:)(v11);
  uint64_t v13 = v15[0];
  swift_bridgeObjectRetain((_BYTE)v10);
  swift_bridgeObjectRelease((_BYTE)v12);
  outlined destroy of MLActivityClassifier.ModelParameters((uint64_t)v16, type metadata accessor for MLImageClassifier.CustomFeatureExtractor);
  return v13;
}

void *MLImageClassifier.FeatureExtractorType.playgroundDescription.getter()
{
  long long v20 = v0;
  uint64_t v2 = type metadata accessor for MLImageClassifier.CustomFeatureExtractor(0);
  int64_t v3 = *(void *)(*(void *)(v2 - 8) + 64);
  uint64_t v4 = alloca(v3);
  uint64_t v5 = alloca(v3);
  uint64_t v6 = type metadata accessor for MLImageClassifier.FeatureExtractorType(0);
  int64_t v7 = *(void *)(*(void *)(v6 - 8) + 64);
  uint64_t v8 = alloca(v7);
  uint64_t v9 = alloca(v7);
  outlined init with copy of MLImageClassifier.FeatureExtractorType(v1, (uint64_t)v18);
  if (swift_getEnumCaseMultiPayload(v18, v6) == 1)
  {
    outlined init with take of MLImageClassifier.CustomFeatureExtractor((uint64_t)v18, (uint64_t)v18);
    uint64_t v10 = *(int *)(v2 + 20);
    Swift::String v11 = *(char **)&v18[v10 + 8];
    uint64_t v21 = v18;
    if (v11)
    {
      v12._uint64_t countAndFlagsBits = *(void *)&v18[v10];
      uint64_t v13 = v11;
    }
    else
    {
      uint64_t v13 = "interactionHeaps" + 0x8000000000000000;
      v12._uint64_t countAndFlagsBits = 0xD000000000000015;
    }
    strcpy((char *)v19, "Custom model: ");
    HIBYTE(v19[1]) = -18;
    v12._char object = v13;
    String.append(_:)(v12);
    uint64_t v15 = v19[0];
    unint64_t v14 = v19[1];
    swift_bridgeObjectRetain((_BYTE)v11);
    swift_bridgeObjectRelease((_BYTE)v13);
    outlined destroy of MLActivityClassifier.ModelParameters((uint64_t)v21, type metadata accessor for MLImageClassifier.CustomFeatureExtractor);
  }
  else
  {
    unint64_t v14 = 0xEA0000000000746ELL;
    uint64_t v15 = 0x697250656E656353;
  }
  uint64_t result = &type metadata for String;
  uint64_t v17 = v20;
  void v20[3] = (uint64_t)&type metadata for String;
  uint64_t *v17 = v15;
  v17[1] = v14;
  return result;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance MLImageClassifier.FeatureExtractorType()
{
  return MLImageClassifier.FeatureExtractorType.description.getter();
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance MLImageClassifier.FeatureExtractorType()
{
  return MLImageClassifier.FeatureExtractorType.debugDescription.getter();
}

void *protocol witness for CustomPlaygroundDisplayConvertible.playgroundDescription.getter in conformance MLImageClassifier.FeatureExtractorType()
{
  return MLImageClassifier.FeatureExtractorType.playgroundDescription.getter();
}

void *initializeBufferWithCopyOfBuffer for MLImageClassifier.FeatureExtractorType(char *__dst, char *__src, uint64_t a3)
{
  int64_t v3 = __dst;
  uint64_t v4 = *(void *)(a3 - 8);
  int v5 = *(_DWORD *)(v4 + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v10 = *(void *)__src;
    *int64_t v3 = *(void *)__src;
    int64_t v3 = (void *)(v10 + ((v5 + 16) & ~v5));
    swift_retain();
  }
  else if (swift_getEnumCaseMultiPayload(__src, a3) == 1)
  {
    uint64_t v7 = type metadata accessor for URL(0);
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v7 - 8) + 16))(__dst, __src, v7);
    uint64_t v8 = *(int *)(type metadata accessor for MLImageClassifier.CustomFeatureExtractor(0) + 20);
    *(void *)&__dst[v8] = *(void *)&__src[v8];
    uint64_t v9 = *(void *)&__src[v8 + 8];
    *(void *)((char *)v3 + v8 + 8) = v9;
    swift_bridgeObjectRetain(v9);
    swift_storeEnumTagMultiPayload(v3, a3, 1);
  }
  else
  {
    memcpy(__dst, __src, *(void *)(v4 + 64));
  }
  return v3;
}

uint64_t destroy for MLImageClassifier.FeatureExtractorType(uint64_t a1, uint64_t a2)
{
  uint64_t result = swift_getEnumCaseMultiPayload(a1, a2);
  if (result == 1)
  {
    uint64_t v3 = type metadata accessor for URL(0);
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(a1, v3);
    uint64_t v4 = type metadata accessor for MLImageClassifier.CustomFeatureExtractor(0);
    return swift_bridgeObjectRelease(*(void *)(a1 + *(int *)(v4 + 20) + 8));
  }
  return result;
}

char *initializeWithCopy for MLImageClassifier.FeatureExtractorType(char *__dst, char *__src, uint64_t a3)
{
  if (swift_getEnumCaseMultiPayload(__src, a3) == 1)
  {
    uint64_t v5 = type metadata accessor for URL(0);
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v5 - 8) + 16))(__dst, __src, v5);
    uint64_t v6 = *(int *)(type metadata accessor for MLImageClassifier.CustomFeatureExtractor(0) + 20);
    *(void *)&__dst[v6] = *(void *)&__src[v6];
    uint64_t v7 = *(void *)&__src[v6 + 8];
    *(void *)&__dst[v6 + 8] = v7;
    swift_bridgeObjectRetain(v7);
    swift_storeEnumTagMultiPayload(__dst, a3, 1);
  }
  else
  {
    memcpy(__dst, __src, *(void *)(*(void *)(a3 - 8) + 64));
  }
  return __dst;
}

char *assignWithCopy for MLImageClassifier.FeatureExtractorType(char *__dst, char *__src, uint64_t a3)
{
  if (__dst != __src)
  {
    outlined destroy of MLActivityClassifier.ModelParameters((uint64_t)__dst, type metadata accessor for MLImageClassifier.FeatureExtractorType);
    if (swift_getEnumCaseMultiPayload(__src, a3) == 1)
    {
      uint64_t v5 = type metadata accessor for URL(0);
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v5 - 8) + 16))(__dst, __src, v5);
      uint64_t v6 = *(int *)(type metadata accessor for MLImageClassifier.CustomFeatureExtractor(0) + 20);
      *(void *)&__dst[v6] = *(void *)&__src[v6];
      uint64_t v7 = *(void *)&__src[v6 + 8];
      *(void *)&__dst[v6 + 8] = v7;
      swift_bridgeObjectRetain(v7);
      swift_storeEnumTagMultiPayload(__dst, a3, 1);
    }
    else
    {
      memcpy(__dst, __src, *(void *)(*(void *)(a3 - 8) + 64));
    }
  }
  return __dst;
}

char *initializeWithTake for MLImageClassifier.FeatureExtractorType(char *__dst, char *__src, uint64_t a3)
{
  if (swift_getEnumCaseMultiPayload(__src, a3) == 1)
  {
    uint64_t v4 = type metadata accessor for URL(0);
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v4 - 8) + 32))(__dst, __src, v4);
    uint64_t v5 = type metadata accessor for MLImageClassifier.CustomFeatureExtractor(0);
    *(_OWORD *)&__dst[*(int *)(v5 + 20)] = *(_OWORD *)&__src[*(int *)(v5 + 20)];
    swift_storeEnumTagMultiPayload(__dst, a3, 1);
  }
  else
  {
    memcpy(__dst, __src, *(void *)(*(void *)(a3 - 8) + 64));
  }
  return __dst;
}

char *assignWithTake for MLImageClassifier.FeatureExtractorType(char *__dst, char *__src, uint64_t a3)
{
  if (__dst != __src)
  {
    outlined destroy of MLActivityClassifier.ModelParameters((uint64_t)__dst, type metadata accessor for MLImageClassifier.FeatureExtractorType);
    if (swift_getEnumCaseMultiPayload(__src, a3) == 1)
    {
      uint64_t v4 = type metadata accessor for URL(0);
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v4 - 8) + 32))(__dst, __src, v4);
      uint64_t v5 = type metadata accessor for MLImageClassifier.CustomFeatureExtractor(0);
      *(_OWORD *)&__dst[*(int *)(v5 + 20)] = *(_OWORD *)&__src[*(int *)(v5 + 20)];
      swift_storeEnumTagMultiPayload(__dst, a3, 1);
    }
    else
    {
      memcpy(__dst, __src, *(void *)(*(void *)(a3 - 8) + 64));
    }
  }
  return __dst;
}

uint64_t type metadata completion function for MLImageClassifier.FeatureExtractorType(uint64_t a1)
{
  v5[0] = "\t";
  uint64_t result = type metadata accessor for MLImageClassifier.CustomFeatureExtractor(319);
  if (v4 <= 0x3F)
  {
    v5[1] = *(void *)(result - 8) + 64;
    swift_initEnumMetadataMultiPayload(a1, 256, 2, v5, v2, v3);
    return 0;
  }
  return result;
}

uint64_t *initializeBufferWithCopyOfBuffer for MLImageClassifier.CustomFeatureExtractor(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v3 = a1;
  int v4 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  if ((v4 & 0x20000) != 0)
  {
    uint64_t v9 = *a2;
    *uint64_t v3 = *a2;
    uint64_t v3 = (uint64_t *)(v9 + ((v4 + 16) & ~v4));
    swift_retain(v9);
  }
  else
  {
    uint64_t v6 = type metadata accessor for URL(0);
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(void *)(v6 - 8) + 16))(a1, a2, v6);
    uint64_t v7 = *(int *)(a3 + 20);
    *(uint64_t *)((char *)a1 + v7) = *(uint64_t *)((char *)a2 + v7);
    uint64_t v8 = *(uint64_t *)((char *)a2 + v7 + 8);
    *(uint64_t *)((char *)v3 + v7 + 8) = v8;
    swift_bridgeObjectRetain(v8);
  }
  return v3;
}

uint64_t destroy for MLImageClassifier.CustomFeatureExtractor(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = type metadata accessor for URL(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return swift_bridgeObjectRelease(*(void *)(a1 + *(int *)(a2 + 20) + 8));
}

uint64_t initializeWithCopy for MLImageClassifier.CustomFeatureExtractor(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = type metadata accessor for URL(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16))(a1, a2, v5);
  uint64_t v6 = *(int *)(a3 + 20);
  *(void *)(a1 + v6) = *(void *)(a2 + v6);
  uint64_t v7 = *(void *)(a2 + v6 + 8);
  *(void *)(a1 + v6 + 8) = v7;
  swift_bridgeObjectRetain(v7);
  return a1;
}

uint64_t assignWithCopy for MLImageClassifier.CustomFeatureExtractor(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = type metadata accessor for URL(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 24))(a1, a2, v5);
  uint64_t v6 = *(int *)(a3 + 20);
  *(void *)(a1 + v6) = *(void *)(a2 + v6);
  uint64_t v7 = *(void *)(a2 + v6 + 8);
  uint64_t v8 = *(void *)(a1 + v6 + 8);
  *(void *)(a1 + v6 + 8) = v7;
  swift_bridgeObjectRetain(v7);
  swift_bridgeObjectRelease(v8);
  return a1;
}

uint64_t initializeWithTake for MLImageClassifier.CustomFeatureExtractor(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = type metadata accessor for URL(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a1, a2, v4);
  *(_OWORD *)(a1 + *(int *)(a3 + 20)) = *(_OWORD *)(a2 + *(int *)(a3 + 20));
  return a1;
}

uint64_t assignWithTake for MLImageClassifier.CustomFeatureExtractor(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = type metadata accessor for URL(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 40))(a1, a2, v5);
  uint64_t v6 = *(int *)(a3 + 20);
  *(void *)(a1 + v6) = *(void *)(a2 + v6);
  uint64_t v7 = *(void *)(a1 + v6 + 8);
  *(void *)(a1 + v6 + 8) = *(void *)(a2 + v6 + 8);
  swift_bridgeObjectRelease(v7);
  return a1;
}

uint64_t getEnumTagSinglePayload for MLImageClassifier.CustomFeatureExtractor(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_37ADD);
}

uint64_t sub_37ADD(uint64_t a1, unsigned int a2, uint64_t a3)
{
  unsigned int v4 = 0;
  uint64_t v5 = type metadata accessor for URL(0);
  if (*(_DWORD *)(*(void *)(v5 - 8) + 84) == a2) {
    return __swift_getEnumTagSinglePayload(a1, a2, v5);
  }
  int v7 = -1;
  if ((int)((*(void *)(a1 + *(int *)(a3 + 20) + 8) >> 1) - 1) >= 0) {
    int v7 = (*(void *)(a1 + *(int *)(a3 + 20) + 8) >> 1) - 1;
  }
  unsigned int v8 = v7 + 1;
  if ((*(void *)(a1 + *(int *)(a3 + 20) + 8) & 0xFFFFFFFF00000001) == 0) {
    return v8;
  }
  return v4;
}

uint64_t storeEnumTagSinglePayload for MLImageClassifier.CustomFeatureExtractor(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_37B60);
}

uint64_t sub_37B60(uint64_t a1, unsigned int a2, int a3, uint64_t a4)
{
  uint64_t v6 = type metadata accessor for URL(0);
  if (*(_DWORD *)(*(void *)(v6 - 8) + 84) == a3) {
    return __swift_storeEnumTagSinglePayload(a1, a2, a2, v6);
  }
  uint64_t result = *(int *)(a4 + 20);
  *(void *)(a1 + result + 8) = 2 * a2;
  return result;
}

uint64_t type metadata completion function for MLImageClassifier.CustomFeatureExtractor(uint64_t a1)
{
  uint64_t result = type metadata accessor for URL(319);
  if (v2 <= 0x3F)
  {
    v3[0] = *(void *)(result - 8) + 64;
    v3[1] = &unk_3473F8;
    swift_initStructMetadata(a1, 256, 2, v3, a1 + 16);
    return 0;
  }
  return result;
}

uint64_t specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *v2;
  *(void *)(*v2 + 16) = a1 + 1;
  uint64_t v4 = type metadata accessor for NeuralNetwork.Layer(0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(v3+ ((*(unsigned __int8 *)(*(void *)(v4 - 8) + 80) + 32) & ~*(unsigned __int8 *)(*(void *)(v4 - 8) + 80))+ *(void *)(*(void *)(v4 - 8) + 72) * a1, a2, v4);
}

void *_sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSay11TabularData9AnyColumnVG_SSs5NeverOTg504_s11d75Data0B5FrameV8CreateMLE23validateContainsColumns_7contextySaySSG_SStKFSSAA9fG54Vcfu_33_06ca46402338970f1b3e0a01942d815dAISSTf3nnnpk_nTf1cn_n(uint64_t a1)
{
  int64_t v1 = *(void *)(a1 + 16);
  if (v1)
  {
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v1, 0);
    uint64_t v2 = *(void *)(type metadata accessor for AnyColumn(0) - 8);
    uint64_t v3 = ((*(unsigned __int8 *)(v2 + 80) + 32) & ~*(unsigned __int8 *)(v2 + 80)) + a1;
    uint64_t v11 = *(void *)(v2 + 72);
    do
    {
      int64_t v10 = v1;
      uint64_t v4 = AnyColumn.name.getter();
      unint64_t v6 = _swiftEmptyArrayStorage[2];
      int64_t v7 = v6 + 1;
      if (_swiftEmptyArrayStorage[3] >> 1 <= v6)
      {
        uint64_t v12 = v4;
        uint64_t v13 = v5;
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(_swiftEmptyArrayStorage[3] >= 2uLL, v7, 1);
        uint64_t v5 = v13;
        uint64_t v4 = v12;
      }
      _swiftEmptyArrayStorage[2] = v7;
      uint64_t v8 = 2 * v6;
      _swiftEmptyArrayStorage[v8 + 4] = v4;
      _swiftEmptyArrayStorage[v8 + 5] = v5;
      v3 += v11;
      int64_t v1 = v10 - 1;
    }
    while (v10 != 1);
  }
  return _swiftEmptyArrayStorage;
}

uint64_t static _ValidationUtilities.validateTableFormat(table:context:columns:)(uint64_t a1, uint64_t a2, void *a3, uint64_t a4)
{
  uint64_t v44 = v4;
  uint64_t v5 = *(void *)a1;
  if (*(unsigned char *)(a1 + 8))
  {
    outlined copy of Result<_DataTable, Error>(*(void *)a1, 1);
    uint64_t v6 = tc_v1_flex_list_create(0);
    if (!v6) {
      BUG();
    }
    uint64_t v7 = v6;
    outlined consume of Result<_DataTable, Error>(v5, 1);
    uint64_t v8 = type metadata accessor for CMLSequence();
    uint64_t v9 = swift_allocObject(v8, 25, 7);
    *(void *)(v9 + 16) = v7;
    *(unsigned char *)(v9 + 24) = 1;
  }
  else
  {
    outlined copy of Result<_DataTable, Error>(*(void *)a1, 0);
    _DataTable.columnNames.getter();
    outlined consume of Result<_DataTable, Error>(v5, 0);
    uint64_t v9 = v35;
  }
  uint64_t v38 = *(void *)(a4 + 16);
  uint64_t v45 = v9;
  if (v38)
  {
    uint64_t v10 = a4 + 32;
    swift_bridgeObjectRetain(a4);
    uint64_t v11 = 0;
    while (1)
    {
      uint64_t v12 = v11;
      uint64_t v13 = 16 * v11;
      uint64_t v42 = *(void *)(v10 + v13);
      unint64_t v14 = *(void **)(v10 + v13 + 8);
      swift_retain_n(v9, 2);
      swift_bridgeObjectRetain(v14);
      uint64_t v15 = CMLSequence.size.getter();
      uint64_t v16 = specialized RandomAccessCollection<>.distance(from:to:)(0, v15);
      swift_release();
      if (!v16) {
        break;
      }
      uint64_t v37 = v12 + 1;
      uint64_t v17 = 0;
      uint64_t v18 = v44;
      uint64_t v36 = v14;
      while (1)
      {
        uint64_t v41 = v17;
        CMLSequence.value(at:)(v17);
        if (v18)
        {
          swift_unexpectedError(v18, "CreateML/SequenceType.swift", 27, 1, 76);
          BUG();
        }
        Swift::String v19 = CMLFeatureValue.stringValue()();
        uint64_t v44 = v18;
        if (v18)
        {
          swift_errorRelease(v18);
          swift_release();
          _StringGuts.grow(_:)(37);
          swift_bridgeObjectRelease(0xE000000000000000);
          v32._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter(&type metadata for Int, &protocol witness table for Int);
          char object = v32._object;
          String.append(_:)(v32);
          swift_bridgeObjectRelease(object);
          v34._uint64_t countAndFlagsBits = 46;
          v34._char object = (void *)0xE100000000000000;
          String.append(_:)(v34);
          _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, 0xD000000000000022, "able.ColumnNames.swift" + 0x8000000000000000, "CreateML/MLDataTable.ColumnNames.swift", 38, 2, 17, 0);
          BUG();
        }
        uint64_t countAndFlagsBits = v19._countAndFlagsBits;
        uint64_t v21 = v19._object;
        swift_release();
        swift_retain(v45);
        uint64_t v22 = CMLSequence.size.getter();
        uint64_t v23 = specialized RandomAccessCollection<>.distance(from:to:)(0, v22);
        swift_release();
        if (v41 >= v23) {
          BUG();
        }
        unint64_t v14 = v36;
        if (countAndFlagsBits == v42 && v21 == v36)
        {
          uint64_t v9 = v45;
          swift_release();
          swift_bridgeObjectRelease_n(v36, 2, v27, v28, v29);
          goto LABEL_19;
        }
        char v24 = _stringCompareWithSmolCheck(_:_:expecting:)(countAndFlagsBits, v21, v42, v36, 0);
        swift_bridgeObjectRelease(v21);
        if (v24) {
          break;
        }
        uint64_t v17 = v41 + 1;
        swift_retain(v45);
        uint64_t v25 = CMLSequence.size.getter();
        uint64_t v26 = specialized RandomAccessCollection<>.distance(from:to:)(0, v25);
        swift_release();
        if (v41 + 1 == v26) {
          goto LABEL_21;
        }
      }
      swift_bridgeObjectRelease(v36);
      uint64_t v9 = v45;
      swift_release();
LABEL_19:
      uint64_t v11 = v37;
      uint64_t v10 = a4 + 32;
      if (v37 == v38)
      {
        swift_bridgeObjectRelease(a4);
        goto LABEL_22;
      }
    }
LABEL_21:
    swift_bridgeObjectRelease(a4);
    swift_release();
    _StringGuts.grow(_:)(54);
    v30._uint64_t countAndFlagsBits = a2;
    v30._char object = a3;
    String.append(_:)(v30);
    v30._uint64_t countAndFlagsBits = 0x206E6D756C6F6320;
    v30._char object = (void *)0xEE002720656D616ELL;
    String.append(_:)(v30);
    v30._uint64_t countAndFlagsBits = v42;
    v30._char object = v14;
    String.append(_:)(v30);
    swift_bridgeObjectRelease(v14);
    v30._uint64_t countAndFlagsBits = 0xD000000000000024;
    v30._char object = "in elements with a type among: " + 0x8000000000000000;
    String.append(_:)(v30);
    v30._uint64_t countAndFlagsBits = 0;
    v30._char object = (void *)0xE000000000000000;
    String.append(_:)(v30);
    swift_bridgeObjectRelease(0xE000000000000000);
  }
LABEL_22:
  swift_release();
  return swift_bridgeObjectRelease(0xE000000000000000);
}

uint64_t static _ValidationUtilities.validateTableTypes(table:columns:type:)(uint64_t a1, unint64_t a2, char *a3, double a4)
{
  uint64_t v37 = v4;
  char v40 = *a3;
  uint64_t v36 = *(void *)a1;
  unint64_t v33 = *(void **)a1;
  char v39 = *(unsigned char *)(a1 + 8);
  LOBYTE(v34) = v39;
  if (MLDataTable.size.getter() <= 0)
  {
    v26._char object = "ng default name '" + 0x8000000000000000;
    v26._uint64_t countAndFlagsBits = 0xD000000000000017;
    String.append(_:)(v26);
  }
  else if (*(void *)(a2 + 16))
  {
    uint64_t v31 = *(void *)(a2 + 16);
    swift_bridgeObjectRetain(a2);
    uint64_t v5 = (uint64_t *)(a2 + 40);
    while (1)
    {
      uint64_t v32 = *(v5 - 1);
      Swift::String v30 = v5;
      uint64_t v6 = *v5;
      uint64_t v38 = *v5;
      if (v39)
      {
        outlined copy of Result<_DataTable, Error>(v36, 1);
        swift_bridgeObjectRetain(v6);
        uint64_t v7 = tc_v1_flex_list_create(0);
        if (!v7) {
          BUG();
        }
        uint64_t v8 = v7;
        uint64_t v9 = type metadata accessor for CMLSequence();
        uint64_t v10 = swift_allocObject(v9, 25, 7);
        *(void *)(v10 + 16) = v8;
        *(unsigned char *)(v10 + 24) = 1;
        uint64_t v11 = tc_v1_flex_list_create(0);
        if (!v11) {
          BUG();
        }
        uint64_t v12 = v11;
        outlined consume of Result<_DataTable, Error>(v36, 1);
        uint64_t v13 = swift_allocObject(v9, 25, 7);
        *(void *)(v13 + 16) = v12;
        *(unsigned char *)(v13 + 24) = 1;
        unint64_t v14 = _swiftEmptyDictionarySingleton;
      }
      else
      {
        outlined copy of Result<_DataTable, Error>(v36, 0);
        outlined copy of Result<_DataTable, Error>(v36, 0);
        swift_bridgeObjectRetain(v6);
        swift_retain();
        uint64_t v15 = CMLTable.row(at:)(0);
        if (v37)
        {
          swift_errorRelease(v37);
          swift_release();
          uint64_t v16 = tc_v1_flex_list_create(0);
          if (!v16) {
            BUG();
          }
          uint64_t v17 = v16;
          uint64_t v18 = type metadata accessor for CMLSequence();
          uint64_t v13 = swift_allocObject(v18, 25, 7);
          *(void *)(v13 + 16) = v17;
          *(unsigned char *)(v13 + 24) = 1;
          uint64_t v37 = 0;
        }
        else
        {
          uint64_t v13 = v15;
          uint64_t v37 = 0;
          swift_release();
        }
        outlined copy of Result<_DataTable, Error>(v36, 0);
        _DataTable.columnNames.getter();
        outlined consume of Result<_DataTable, Error>(v36, 0);
        outlined copy of Result<_DataTable, Error>(v36, 0);
        unint64_t v14 = (void *)_DataTable.columnIndexes.getter();
        outlined consume of Result<_DataTable, Error>(v36, 0);
        outlined consume of Result<_DataTable, Error>(v36, 0);
        outlined consume of Result<_DataTable, Error>(v36, 0);
      }
      if (!v14[2])
      {
        swift_bridgeObjectRelease(a2);
        swift_release();
        swift_bridgeObjectRelease(v14);
        swift_release();
        Swift::String v19 = (void *)v38;
        goto LABEL_32;
      }
      Swift::String v19 = (void *)v38;
      swift_bridgeObjectRetain(v38);
      unint64_t v20 = specialized __RawDictionaryStorage.find<A>(_:)(v32, v38);
      if ((v21 & 1) == 0)
      {
        swift_bridgeObjectRelease(a2);
        swift_release();
        swift_bridgeObjectRelease(v14);
        swift_release();
        uint64_t v27 = v38;
        goto LABEL_31;
      }
      uint64_t v22 = *(void *)(v14[7] + 8 * v20);
      swift_bridgeObjectRelease(v38);
      swift_retain_n(v13, 2);
      uint64_t v23 = CMLSequence.value(at:)(v22);
      if (v37)
      {
        swift_release();
        swift_unexpectedError(v37, "CreateML/MLDataTable.Row.swift", 30, 1, 85);
        BUG();
      }
      swift_release();
      MLDataValue.init(_:)(v23, a4);
      swift_bridgeObjectRelease(v14);
      swift_release();
      swift_release_n(v13, 2);
      switch(v35)
      {
        case 0:
          BOOL v24 = v40 == 0;
          break;
        case 1:
          BOOL v24 = v40 == 1;
          break;
        case 2:
          outlined consume of MLDataValue(v33, v34, 2);
          BOOL v24 = v40 == 2;
          break;
        case 3:
          outlined consume of MLDataValue(v33, v34, 3);
          BOOL v24 = v40 == 3;
          break;
        case 4:
          outlined consume of MLDataValue(v33, v34, 4);
          BOOL v24 = v40 == 4;
          break;
        case 5:
          outlined consume of MLDataValue(v33, v34, 5);
          BOOL v24 = v40 == 5;
          break;
        case 6:
          BOOL v24 = v40 == 6;
          break;
      }
      Swift::String v19 = (void *)v38;
      if (!v24) {
        break;
      }
      swift_bridgeObjectRelease(v38);
      uint64_t v5 = v30 + 2;
      if (!--v31)
      {
        unint64_t v25 = a2;
        goto LABEL_33;
      }
    }
    uint64_t v27 = a2;
LABEL_31:
    swift_bridgeObjectRelease(v27);
LABEL_32:
    _StringGuts.grow(_:)(21);
    v28._uint64_t countAndFlagsBits = v32;
    v28._char object = v19;
    String.append(_:)(v28);
    swift_bridgeObjectRelease(v19);
    v28._uint64_t countAndFlagsBits = 0x7369206570797420;
    v28._char object = (void *)0xEF206120746F6E20;
    String.append(_:)(v28);
    specialized DefaultStringInterpolation.appendInterpolation<A>(_:)(v40);
    v28._char object = (void *)0xE200000000000000;
    v28._uint64_t countAndFlagsBits = 2606;
    String.append(_:)(v28);
    v28._uint64_t countAndFlagsBits = 0;
    v28._char object = (void *)0xE000000000000000;
    String.append(_:)(v28);
    unint64_t v25 = 0xE000000000000000;
LABEL_33:
    swift_bridgeObjectRelease(v25);
  }
  return swift_bridgeObjectRelease(0xE000000000000000);
}

uint64_t static _ValidationUtilities.validateWriteLocation(atURL:defaultName:fileExtension:)(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4, void *a5)
{
  uint64_t v53 = v6;
  uint64_t v63 = a5;
  v67._uint64_t countAndFlagsBits = a4;
  unint64_t v57 = a3;
  uint64_t v58 = a2;
  uint64_t v66 = v5;
  uint64_t v60 = type metadata accessor for URL.DirectoryHint(0);
  uint64_t v54 = *(void *)(v60 - 8);
  int64_t v7 = *(void *)(v54 + 64);
  uint64_t v8 = alloca(v7);
  uint64_t v9 = alloca(v7);
  uint64_t v55 = &v52;
  uint64_t v10 = type metadata accessor for URL(0);
  uint64_t v11 = *(void *)(v10 - 8);
  int64_t v12 = *(void *)(v11 + 64);
  uint64_t v13 = alloca(v12);
  unint64_t v14 = alloca(v12);
  uint64_t v56 = &v52;
  uint64_t v15 = alloca(v12);
  uint64_t v16 = alloca(v12);
  if (URL.isFileURL.getter())
  {
    int v59 = &v52;
    uint64_t v17 = v54;
    uint64_t v65 = v11;
    uint64_t v64 = v10;
    if (URL.hasDirectoryPath.getter())
    {
      uint64_t v61 = v58;
      unint64_t v62 = v57;
      uint64_t v18 = v55;
      (*(void (**)(uint64_t *, void, uint64_t))(v17 + 104))(v55, enum case for URL.DirectoryHint.inferFromPath(_:), v60);
      uint64_t v19 = lazy protocol witness table accessor for type String and conformance String();
      unint64_t v20 = v56;
      URL.appending<A>(component:directoryHint:)(&v61, v18, &type metadata for String, v19);
      (*(void (**)(uint64_t *, uint64_t))(v17 + 8))(v18, v60);
      char v21 = v59;
      uint64_t countAndFlagsBits = v67._countAndFlagsBits;
      URL.appendingPathExtension(_:)(v67._countAndFlagsBits, v63);
      uint64_t v23 = v20;
      uint64_t v24 = v64;
      uint64_t v25 = v65;
      (*(void (**)(uint64_t *, uint64_t))(v65 + 8))(v23, v64);
      (*(void (**)(uint64_t, uint64_t *, uint64_t))(v25 + 32))(v66, v21, v24);
      uint64_t v61 = 0;
      unint64_t v62 = 0xE000000000000000;
      _StringGuts.grow(_:)(69);
      v26._uint64_t countAndFlagsBits = 0xD000000000000041;
      v26._char object = " be an empty string." + 0x8000000000000000;
      String.append(_:)(v26);
      uint64_t v27 = URL.lastPathComponent.getter();
      LOBYTE(v21) = (_BYTE)v28;
      v26._uint64_t countAndFlagsBits = v27;
      v26._char object = v28;
      String.append(_:)(v26);
      swift_bridgeObjectRelease((_BYTE)v21);
      v26._char object = (void *)0xE200000000000000;
      v26._uint64_t countAndFlagsBits = 11815;
      String.append(_:)(v26);
      uint64_t v29 = v61;
      Swift::String v30 = (void *)v62;
      os_log_type_t v31 = static os_log_type_t.info.getter();
      v26._uint64_t countAndFlagsBits = v29;
      uint64_t v32 = v66;
      v26._char object = v30;
      log(_:type:)(v26, v31);
      swift_bridgeObjectRelease((_BYTE)v30);
    }
    else
    {
      uint64_t v32 = v66;
      (*(void (**)(uint64_t, uint64_t, uint64_t))(v65 + 16))(v66, a1, v64);
      uint64_t countAndFlagsBits = v67._countAndFlagsBits;
    }
    uint64_t v39 = URL.pathExtension.getter();
    char v41 = (char)v40;
    uint64_t v42 = v63;
    if (v39 == countAndFlagsBits && v40 == v63)
    {
      swift_bridgeObjectRelease((_BYTE)v63);
    }
    else
    {
      char v43 = _stringCompareWithSmolCheck(_:_:expecting:)(v39, v40, countAndFlagsBits, v63, 0);
      uint64_t v44 = v32;
      char v45 = v43;
      swift_bridgeObjectRelease(v41);
      BOOL v46 = (v45 & 1) == 0;
      uint64_t v32 = v44;
      if (v46)
      {
        uint64_t v61 = 0;
        unint64_t v62 = 0xE000000000000000;
        _StringGuts.grow(_:)(72);
        v47._char object = "L has to be a file URL." + 0x8000000000000000;
        v47._uint64_t countAndFlagsBits = 0xD000000000000013;
        String.append(_:)(v47);
        v47._uint64_t countAndFlagsBits = v67._countAndFlagsBits;
        v47._char object = v42;
        String.append(_:)(v47);
        v47._char object = "Expected filetype ." + 0x8000000000000000;
        v47._uint64_t countAndFlagsBits = 0xD000000000000033;
        String.append(_:)(v47);
        uint64_t v48 = v61;
        uint64_t v49 = (void *)v62;
        os_log_type_t v50 = static os_log_type_t.info.getter();
        v47._uint64_t countAndFlagsBits = v48;
        v47._char object = v49;
        log(_:type:)(v47, v50);
        LOBYTE(v47._countAndFlagsBits) = (_BYTE)v49;
        uint64_t v32 = v44;
        swift_bridgeObjectRelease(v47._countAndFlagsBits);
        v47._uint64_t countAndFlagsBits = v67._countAndFlagsBits;
        v47._char object = v63;
        URL.appendPathExtension(_:)(v47);
      }
    }
    uint64_t v51 = v53;
    static _FileUtilities.prepareForWriting(to:isDirectory:)(v32, 0);
    uint64_t result = v65;
    if (v51) {
      return (*(uint64_t (**)(uint64_t, uint64_t))(v65 + 8))(v32, v64);
    }
  }
  else
  {
    uint64_t v33 = lazy protocol witness table accessor for type MLCreateError and conformance MLCreateError();
    swift_allocError(&type metadata for MLCreateError, v33, 0, 0);
    *(void *)uint64_t v34 = 0xD000000000000027;
    *(void *)(v34 + 8) = " in the data table. " + 0x8000000000000000;
    *(_OWORD *)(v34 + 16) = 0;
    *(_OWORD *)(v34 + 32) = 0;
    *(unsigned char *)(v34 + 48) = 0;
    return swift_willThrow(&type metadata for MLCreateError, v33, v34, v35, v36, v37);
  }
  return result;
}

uint64_t static _ValidationUtilities.validateWriteLocation(atPath:defaultName:)(Swift::String string, uint64_t a2, void *a3)
{
  char object = string._object;
  uint64_t countAndFlagsBits = string._countAndFlagsBits;
  swift_bridgeObjectRetain(string._object);
  uint64_t v6 = specialized BidirectionalCollection.last.getter(string._countAndFlagsBits, (unint64_t)string._object);
  if (v7)
  {
    char v8 = v7;
    if (v6 == 47 && v7 == 0xE100000000000000)
    {
      swift_bridgeObjectRelease(0);
LABEL_6:
      swift_bridgeObjectRetain((_BYTE)a3);
      v11._uint64_t countAndFlagsBits = 0x6C65646F6D6C6D2ELL;
      v11._char object = (void *)0xE800000000000000;
      String.append(_:)(v11);
      v11._uint64_t countAndFlagsBits = a2;
      v11._char object = a3;
      String.append(_:)(v11);
      swift_bridgeObjectRelease((_BYTE)a3);
      _StringGuts.grow(_:)(69);
      v11._char object = " be an empty string." + 0x8000000000000000;
      v11._uint64_t countAndFlagsBits = 0xD000000000000041;
      String.append(_:)(v11);
      v11._uint64_t countAndFlagsBits = a2;
      v11._char object = a3;
      String.append(_:)(v11);
      v11._char object = (void *)0xE200000000000000;
      v11._uint64_t countAndFlagsBits = 11815;
      String.append(_:)(v11);
      os_log_type_t v12 = static os_log_type_t.info.getter();
      v11._uint64_t countAndFlagsBits = 0;
      v11._char object = (void *)0xE000000000000000;
      log(_:type:)(v11, v12);
      swift_bridgeObjectRelease(0);
      uint64_t countAndFlagsBits = string._countAndFlagsBits;
      char object = string._object;
      goto LABEL_7;
    }
    uint64_t v22 = a3;
    char v9 = _stringCompareWithSmolCheck(_:_:expecting:)(v6, v7, 47, 0xE100000000000000, 0);
    swift_bridgeObjectRelease(v8);
    BOOL v10 = (v9 & 1) == 0;
    a3 = v22;
    if (!v10) {
      goto LABEL_6;
    }
  }
LABEL_7:
  v13._uint64_t countAndFlagsBits = countAndFlagsBits;
  v13._char object = object;
  type metadata accessor for NSString();
  NSString v14 = NSString.__allocating_init(string:)(v13);
  id v15 = [v14 stringByExpandingTildeInPath];
  id v16 = v15;

  uint64_t v17 = static String._unconditionallyBridgeFromObjectiveC(_:)(v16);
  uint64_t v19 = v18;

  URL.init(fileURLWithPath:)(v17, v19);
  return swift_bridgeObjectRelease(v19);
}

uint64_t static _ValidationUtilities.validateTableTypes(table:featureColumns:featureType:labelColumn:labelType:)(uint64_t *a1, unint64_t a2, char *a3, uint64_t a4, uint64_t a5, char *a6, double a7)
{
  uint64_t v16 = a4;
  uint64_t v9 = *a1;
  char v10 = *((unsigned char *)a1 + 8);
  char v11 = *a3;
  char v20 = *a6;
  uint64_t v17 = v9;
  char v18 = v10;
  char v19 = v11;
  uint64_t result = static _ValidationUtilities.validateTableTypes(table:columns:type:)((uint64_t)&v17, a2, &v19, a7);
  if (!v7)
  {
    uint64_t v17 = v9;
    char v18 = v10;
    uint64_t v13 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<String>);
    uint64_t inited = (void *)swift_initStackObject(v13, v15);
    inited[2] = 1;
    inited[3] = 2;
    inited[4] = v16;
    inited[5] = a5;
    char v19 = v20;
    swift_bridgeObjectRetain(a5);
    static _ValidationUtilities.validateTableTypes(table:columns:type:)((uint64_t)&v17, (unint64_t)inited, &v19, a7);
    swift_setDeallocating(inited);
    return specialized _ContiguousArrayStorage.__deallocating_deinit();
  }
  return result;
}

Swift::Void __swiftcall __spoils<cf,zf,sf,of,pf,rax,rdx,rcx,rdi,rsi,r8,r9,r10,r11,r12,xmm0,xmm1,xmm2,xmm3,xmm4,xmm5,xmm6,xmm7> DataFrame.validateContainsColumns(_:context:)(Swift::OpaquePointer _, Swift::String context)
{
  char object = context._object;
  v36._uint64_t countAndFlagsBits = context._countAndFlagsBits;
  uint64_t v3 = DataFrame.columns.getter(_._rawValue, context._countAndFlagsBits);
  char v4 = v3;
  MLE23validateContainsColumns_7contextySaySSG_SStKFSSAA9fG54Vcfu_33_06ca46402338970f1b3e0a01942d815dAISSTf3nnnpk_nTf1cn_n = _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSay11TabularData9AnyColumnVG_SSs5NeverOTg504_s11d75Data0B5FrameV8CreateMLE23validateContainsColumns_7contextySaySSG_SStKFSSAA9fG54Vcfu_33_06ca46402338970f1b3e0a01942d815dAISSTf3nnnpk_nTf1cn_n(v3);
  v36._char object = v2;
  swift_bridgeObjectRelease(v4);
  uint64_t v6 = specialized Set.init<A>(_:)((uint64_t)MLE23validateContainsColumns_7contextySaySSG_SStKFSSAA9fG54Vcfu_33_06ca46402338970f1b3e0a01942d815dAISSTf3nnnpk_nTf1cn_n);
  uint64_t v34 = *((void *)_._rawValue + 2);
  if (v34)
  {
    uint64_t v33 = (char *)_._rawValue + 32;
    v38._char object = _._rawValue;
    uint64_t v39 = v6;
    swift_bridgeObjectRetain(_._rawValue);
    uint64_t v7 = v39;
    uint64_t v8 = 0;
    while (1)
    {
      uint64_t v9 = *(void *)&v33[16 * v8];
      char v10 = *(void **)&v33[16 * v8 + 8];
      BOOL v11 = *(void *)(v7 + 16) == 0;
      v38._uint64_t countAndFlagsBits = v9;
      if (v11)
      {
        swift_bridgeObjectRetain((_BYTE)v10);
        swift_bridgeObjectRelease(v7);
        swift_bridgeObjectRelease(v38._object);
        char v19 = v10;
        goto LABEL_18;
      }
      uint64_t v32 = v8;
      Hasher.init(_seed:)(*(void *)(v39 + 40));
      swift_bridgeObjectRetain((_BYTE)v10);
      uint64_t v37 = v10;
      String.hash(into:)(&v30, v9);
      Swift::Int v12 = Hasher._finalize()();
      uint64_t v13 = ~(-1 << *(unsigned char *)(v39 + 32));
      unint64_t v14 = v13 & v12;
      uint64_t v15 = *(void *)(v39 + 8 * ((v13 & (unint64_t)v12) >> 6) + 56);
      if (!_bittest64(&v15, v14)) {
        break;
      }
      uint64_t v16 = *(void *)(v39 + 48);
      uint64_t v17 = *(void *)(v16 + 16 * v14);
      char v18 = *(void **)(v16 + 16 * v14 + 8);
      BOOL v11 = v17 == v9;
      char v19 = v37;
      if (!v11) {
        goto LABEL_7;
      }
LABEL_6:
      if (v18 != v19)
      {
LABEL_7:
        while ((_stringCompareWithSmolCheck(_:_:expecting:)(v17, v18, v38._countAndFlagsBits, v19, 0) & 1) == 0)
        {
          unint64_t v14 = v13 & (v14 + 1);
          uint64_t v20 = *(void *)(v39 + 8 * (v14 >> 6) + 56);
          if (!_bittest64(&v20, v14))
          {
            swift_bridgeObjectRelease(v39);
            swift_bridgeObjectRelease(v38._object);
            goto LABEL_18;
          }
          uint64_t v17 = *(void *)(v16 + 16 * v14);
          char v18 = *(void **)(v16 + 16 * v14 + 8);
          if (v17 == v38._countAndFlagsBits) {
            goto LABEL_6;
          }
        }
      }
      uint64_t v8 = v32 + 1;
      swift_bridgeObjectRelease((_BYTE)v19);
      uint64_t v7 = v39;
      if (v8 == v34)
      {
        swift_bridgeObjectRelease(v39);
        char v21 = (char)v38._object;
        goto LABEL_14;
      }
    }
    swift_bridgeObjectRelease(v39);
    swift_bridgeObjectRelease(v38._object);
    char v19 = v37;
LABEL_18:
    uint64_t v30 = 0;
    unint64_t v31 = 0xE000000000000000;
    _StringGuts.grow(_:)(53);
    v22._uint64_t countAndFlagsBits = v36._countAndFlagsBits;
    v22._char object = object;
    String.append(_:)(v22);
    v22._uint64_t countAndFlagsBits = 0x206E6D756C6F6320;
    v22._char object = (void *)0xEE002720656D616ELL;
    String.append(_:)(v22);
    v22._uint64_t countAndFlagsBits = v38._countAndFlagsBits;
    v22._char object = v19;
    String.append(_:)(v22);
    swift_bridgeObjectRelease((_BYTE)v19);
    v22._char object = "The DataTable is empty." + 0x8000000000000000;
    v22._uint64_t countAndFlagsBits = 0xD000000000000023;
    String.append(_:)(v22);
    uint64_t v23 = v30;
    uint64_t v24 = (void *)v31;
    os_log_type_t v25 = static os_log_type_t.error.getter(0xD000000000000023, "The DataTable is empty." + 0x8000000000000000);
    v22._uint64_t countAndFlagsBits = v23;
    v22._char object = v24;
    log(_:type:)(v22, v25);
    v22._char object = (void *)lazy protocol witness table accessor for type MLCreateError and conformance MLCreateError();
    swift_allocError(&type metadata for MLCreateError, v22._object, 0, 0);
    *(void *)uint64_t v26 = v23;
    *(void *)(v26 + 8) = v24;
    *(_OWORD *)(v26 + 16) = 0;
    *(_OWORD *)(v26 + 32) = 0;
    *(unsigned char *)(v26 + 48) = 1;
    swift_willThrow(&type metadata for MLCreateError, v22._object, v26, v27, v28, v29);
  }
  else
  {
    char v21 = v6;
LABEL_14:
    swift_bridgeObjectRelease(v21);
  }
}

Swift::Void __swiftcall __spoils<cf,zf,sf,of,pf,rax,rdx,rcx,rdi,rsi,r8,r9,r10,r11,r12,xmm0,xmm1,xmm2,xmm3,xmm4,xmm5,xmm6,xmm7> DataFrame.validateColumnTypes(_:_:context:)(Swift::String _, Swift::OpaquePointer a2, Swift::String context)
{
  uint64_t v35 = v3;
  v37._char object = context._object;
  v38._uint64_t countAndFlagsBits = context._countAndFlagsBits;
  rawValue = a2._rawValue;
  uint64_t v33 = type metadata accessor for AnyColumn(0);
  uint64_t v34 = *(void *)(v33 - 8);
  int64_t v4 = *(void *)(v34 + 64);
  uint64_t v5 = alloca(v4);
  uint64_t v6 = alloca(v4);
  v37._uint64_t countAndFlagsBits = _._countAndFlagsBits;
  char object = _._object;
  Swift::Int_optional v7 = DataFrame.indexOfColumn(_:)(_);
  if (v7.is_nil)
  {
    uint64_t v30 = 0;
    unint64_t v31 = 0xE000000000000000;
    _StringGuts.grow(_:)(53);
    v21._uint64_t countAndFlagsBits = v38._countAndFlagsBits;
    v21._char object = v37._object;
    String.append(_:)(v21);
    v21._uint64_t countAndFlagsBits = 0x206E6D756C6F6320;
    v21._char object = (void *)0xEE002720656D616ELL;
    String.append(_:)(v21);
    v21._uint64_t countAndFlagsBits = v37._countAndFlagsBits;
    v21._char object = object;
    String.append(_:)(v21);
    v20._char object = "The DataTable is empty." + 0x8000000000000000;
    v20._uint64_t countAndFlagsBits = 0xD000000000000023;
    goto LABEL_11;
  }
  DataFrame.subscript.getter(v7.value);
  uint64_t v8 = AnyColumn.wrappedElementType.getter();
  (*(void (**)(uint64_t *, uint64_t))(v34 + 8))(&v30, v33);
  uint64_t v9 = rawValue;
  uint64_t v10 = rawValue[2];
  BOOL v11 = object;
  uint64_t countAndFlagsBits = v37._countAndFlagsBits;
  if (!v10) {
    goto LABEL_9;
  }
  if (rawValue[4] == v8) {
    return;
  }
  if (v10 == 1)
  {
LABEL_9:
    uint64_t v30 = 0;
    unint64_t v31 = 0xE000000000000000;
    _StringGuts.grow(_:)(68);
    v15._uint64_t countAndFlagsBits = v38._countAndFlagsBits;
    v15._char object = v37._object;
    String.append(_:)(v15);
    v15._uint64_t countAndFlagsBits = 0x206E6D756C6F6320;
    v15._char object = (void *)0xEE002720656D616ELL;
    String.append(_:)(v15);
    v15._uint64_t countAndFlagsBits = countAndFlagsBits;
    v15._char object = v11;
    String.append(_:)(v15);
    v15._uint64_t countAndFlagsBits = 0xD00000000000002FLL;
    v15._char object = " in the data table." + 0x8000000000000000;
    String.append(_:)(v15);
    uint64_t v16 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Any.Type);
    uint64_t v17 = Array.description.getter(v9, v16);
    char v19 = (char)v18;
    v15._uint64_t countAndFlagsBits = v17;
    v15._char object = v18;
    String.append(_:)(v15);
    swift_bridgeObjectRelease(v19);
    v20._uint64_t countAndFlagsBits = 46;
    v20._char object = (void *)0xE100000000000000;
LABEL_11:
    String.append(_:)(v20);
    uint64_t v22 = v30;
    uint64_t v23 = (void *)v31;
    os_log_type_t v24 = static os_log_type_t.error.getter(v20._countAndFlagsBits, v20._object);
    v25._uint64_t countAndFlagsBits = v22;
    v25._char object = v23;
    log(_:type:)(v25, v24);
    v25._char object = (void *)lazy protocol witness table accessor for type MLCreateError and conformance MLCreateError();
    swift_allocError(&type metadata for MLCreateError, v25._object, 0, 0);
    *(void *)uint64_t v26 = v22;
    *(void *)(v26 + 8) = v23;
    *(_OWORD *)(v26 + 16) = 0;
    *(_OWORD *)(v26 + 32) = 0;
    *(unsigned char *)(v26 + 48) = 1;
    swift_willThrow(&type metadata for MLCreateError, v25._object, v26, v27, v28, v29);
    return;
  }
  uint64_t v13 = 5;
  while (1)
  {
    uint64_t v14 = v13 - 4 + 1;
    if (__OFADD__(1, v13 - 4)) {
      BUG();
    }
    if (rawValue[v13] == v8) {
      break;
    }
    ++v13;
    if (v14 == v10) {
      goto LABEL_9;
    }
  }
}

Swift::Void __swiftcall __spoils<cf,zf,sf,of,pf,rax,rdx,rcx,rdi,rsi,r8,r9,r10,r11,r12,xmm0,xmm1,xmm2,xmm3,xmm4,xmm5,xmm6,xmm7> DataFrame.validateColumnIsNumeric(_:context:)(Swift::String _, Swift::String context)
{
  contexta = context._object;
  uint64_t countAndFlagsBits = context._countAndFlagsBits;
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Any.Type>);
  int64_t v4 = (void *)swift_allocObject(v3, 56, 7);
  char v5 = (char)v4;
  v4[2] = 3;
  v4[3] = 6;
  v4[4] = &type metadata for Float;
  v4[5] = &type metadata for Double;
  void v4[6] = &type metadata for Int;
  DataFrame.validateColumnTypes(_:_:context:)(_, (Swift::OpaquePointer)v4, (Swift::String)__PAIR128__((unint64_t)contexta, countAndFlagsBits));
  swift_bridgeObjectRelease(v5);
}

uint64_t lazy protocol witness table accessor for type String and conformance String()
{
  uint64_t result = lazy protocol witness table cache variable for type String and conformance String;
  if (!lazy protocol witness table cache variable for type String and conformance String)
  {
    uint64_t result = swift_getWitnessTable(&protocol conformance descriptor for String, &type metadata for String);
    lazy protocol witness table cache variable for type String and conformance String = result;
  }
  return result;
}

{
  uint64_t result;

  uint64_t result = lazy protocol witness table cache variable for type String and conformance String;
  if (!lazy protocol witness table cache variable for type String and conformance String)
  {
    uint64_t result = swift_getWitnessTable(&protocol conformance descriptor for String, &type metadata for String);
    lazy protocol witness table cache variable for type String and conformance String = result;
  }
  return result;
}

{
  uint64_t result;

  uint64_t result = lazy protocol witness table cache variable for type String and conformance String;
  if (!lazy protocol witness table cache variable for type String and conformance String)
  {
    uint64_t result = swift_getWitnessTable(&protocol conformance descriptor for String, &type metadata for String);
    lazy protocol witness table cache variable for type String and conformance String = result;
  }
  return result;
}

{
  uint64_t result;

  uint64_t result = lazy protocol witness table cache variable for type String and conformance String;
  if (!lazy protocol witness table cache variable for type String and conformance String)
  {
    uint64_t result = swift_getWitnessTable(&protocol conformance descriptor for String, &type metadata for String);
    lazy protocol witness table cache variable for type String and conformance String = result;
  }
  return result;
}

uint64_t specialized Array.count.getter(uint64_t a1)
{
  return *(void *)(a1 + 16);
}

uint64_t MLRegressor.init<A>(model:)(void *a1, uint64_t a2)
{
  uint64_t v53 = v2;
  uint64_t v50 = type metadata accessor for MLRandomForestRegressor(0);
  int64_t v3 = *(void *)(*(void *)(v50 - 8) + 64);
  int64_t v4 = alloca(v3);
  char v5 = alloca(v3);
  uint64_t v49 = &v41;
  uint64_t v48 = type metadata accessor for MLDecisionTreeRegressor(0);
  int64_t v6 = *(void *)(*(void *)(v48 - 8) + 64);
  Swift::Int_optional v7 = alloca(v6);
  uint64_t v8 = alloca(v6);
  Swift::String v47 = &v41;
  uint64_t v46 = type metadata accessor for MLBoostedTreeRegressor(0);
  int64_t v9 = *(void *)(*(void *)(v46 - 8) + 64);
  uint64_t v10 = alloca(v9);
  BOOL v11 = alloca(v9);
  char v45 = &v41;
  uint64_t v12 = type metadata accessor for MLLinearRegressor(0);
  int64_t v13 = *(void *)(*(void *)(v12 - 8) + 64);
  uint64_t v14 = alloca(v13);
  Swift::String v15 = alloca(v13);
  uint64_t v16 = *(uint64_t **)(a2 - 8);
  int64_t v17 = v16[8];
  char v18 = alloca(v17);
  char v19 = alloca(v17);
  uint64_t v51 = &v41;
  Swift::String v20 = alloca(v17);
  Swift::String v21 = alloca(v17);
  uint64_t v22 = (void (*)(uint64_t *, void *, uint64_t))v16[2];
  uint64_t v54 = a1;
  uint64_t v52 = v22;
  ((void (*)(uint64_t *, void *))v22)(&v41, a1);
  uint64_t v55 = &v41;
  char v23 = swift_dynamicCast(&v41, &v41, a2, v12, 0);
  uint64_t v44 = &v41;
  if (v23)
  {
    os_log_type_t v24 = (uint64_t (*)(uint64_t *, uint64_t))v16[1];
    uint64_t v25 = a2;
    v24(v54, a2);
    uint64_t v26 = v53;
    outlined init with take of MLClassifierMetrics((uint64_t)v55, v53, type metadata accessor for MLLinearRegressor);
    int v40 = 3;
  }
  else
  {
    uint64_t v55 = v16;
    unsigned int v27 = 0;
    uint64_t v28 = v45;
    uint64_t v25 = a2;
    if (swift_dynamicCast(v45, &v41, a2, v46, 0))
    {
      os_log_type_t v24 = (uint64_t (*)(uint64_t *, uint64_t))v55[1];
      v24(v54, a2);
      uint64_t v29 = (uint64_t)v28;
      uint64_t v26 = v53;
      outlined init with take of MLClassifierMetrics(v29, v53, type metadata accessor for MLBoostedTreeRegressor);
      goto LABEL_6;
    }
    uint64_t v32 = (uint64_t)v47;
    char v33 = swift_dynamicCast(v47, &v41, a2, v48, 0);
    uint64_t v26 = v53;
    uint64_t v34 = (uint64_t)v55;
    if (v33)
    {
      os_log_type_t v24 = (uint64_t (*)(uint64_t *, uint64_t))v55[1];
      v24(v54, a2);
      outlined init with take of MLClassifierMetrics(v32, v26, type metadata accessor for MLDecisionTreeRegressor);
      int v40 = 1;
    }
    else
    {
      uint64_t v35 = (uint64_t)v49;
      if (!swift_dynamicCast(v49, &v41, a2, v50, 0))
      {
        Swift::String v36 = v51;
        v52(v51, v54, a2);
        unint64_t v42 = 0;
        char v43 = (char *)0xE000000000000000;
        _StringGuts.grow(_:)(22);
        swift_bridgeObjectRelease((_BYTE)v43);
        unint64_t v42 = 0xD000000000000013;
        char v43 = "CreateML/MLRegressor.swift" + 0x8000000000000000;
        uint64_t DynamicType = swift_getDynamicType(v36, a2, 0);
        v38._uint64_t countAndFlagsBits = _typeName(_:qualified:)(DynamicType, 0);
        LOBYTE(v36) = v38._object;
        String.append(_:)(v38);
        swift_bridgeObjectRelease((_BYTE)v36);
        v39._uint64_t countAndFlagsBits = 46;
        v39._char object = (void *)0xE100000000000000;
        String.append(_:)(v39);
        _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, v42, v43, "CreateML/MLRegressor.swift", 26, 2, 64, 0);
        BUG();
      }
      os_log_type_t v24 = *(uint64_t (**)(uint64_t *, uint64_t))(v34 + 8);
      v24(v54, a2);
      outlined init with take of MLClassifierMetrics(v35, v26, type metadata accessor for MLRandomForestRegressor);
      int v40 = 2;
    }
  }
  unsigned int v27 = v40;
LABEL_6:
  uint64_t v30 = type metadata accessor for MLRegressor(0);
  swift_storeEnumTagMultiPayload(v26, v30, v27);
  return v24(v44, v25);
}

uint64_t MLRegressor.init(trainingData:targetColumn:featureColumns:)(uint64_t a1, uint64_t a2, char *a3, uint64_t a4)
{
  uint64_t v125 = v5;
  uint64_t v123 = a3;
  uint64_t v106 = v4;
  int64_t v7 = *(void *)(*(void *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for DataFrame?)
                             - 8)
                 + 64);
  uint64_t v8 = alloca(v7);
  int64_t v9 = alloca(v7);
  uint64_t v103 = &v93;
  uint64_t v118 = type metadata accessor for DataFrame(0);
  uint64_t v119 = *(void *)(v118 - 8);
  int64_t v10 = *(void *)(v119 + 64);
  BOOL v11 = alloca(v10);
  uint64_t v12 = alloca(v10);
  uint64_t v112 = &v93;
  int64_t v13 = alloca(v10);
  uint64_t v14 = alloca(v10);
  uint64_t v113 = &v93;
  uint64_t v120 = type metadata accessor for DataFrame.Slice(0);
  uint64_t v15 = *(void *)(v120 - 8);
  int64_t v16 = *(void *)(v15 + 64);
  int64_t v17 = alloca(v16);
  char v18 = alloca(v16);
  double v124 = COERCE_DOUBLE(&v93);
  char v19 = alloca(v16);
  Swift::String v20 = alloca(v16);
  uint64_t v122 = &v93;
  Swift::String v21 = alloca(v16);
  uint64_t v22 = alloca(v16);
  uint64_t v121 = &v93;
  uint64_t v115 = a1;
  char v23 = (char)v123;
  os_log_type_t v24 = v125;
  uint64_t v25 = static _FeatureUtilities.selectFeaturesFromTrainingData(trainingData:targetColumn:featureColumns:)(a1, a2, v123, a4);
  uint64_t v117 = v24;
  if (v24)
  {
    (*(void (**)(uint64_t, uint64_t))(v119 + 8))(v115, v118);
    swift_bridgeObjectRelease(v23);
    return swift_bridgeObjectRelease(a4);
  }
  uint64_t v114 = v25;
  uint64_t v104 = a2;
  uint64_t v116 = v15;
  swift_bridgeObjectRelease(a4);
  uint64_t v27 = v118;
  uint64_t v28 = v115;
  DataFrameProtocol.randomSplit(by:seed:)(v121, v122, 0, 0, v118, &protocol witness table for DataFrame, 0.1);
  if (DataFrameProtocol.isEmpty.getter(v120, &protocol witness table for DataFrame.Slice))
  {
    swift_bridgeObjectRelease((_BYTE)v114);
    swift_bridgeObjectRelease((_BYTE)v123);
    uint64_t v29 = lazy protocol witness table accessor for type MLCreateError and conformance MLCreateError();
    swift_allocError(&type metadata for MLCreateError, v29, 0, 0);
    *(void *)uint64_t v30 = 0xD000000000000044;
    *(void *)(v30 + 8) = " that to file name." + 0x8000000000000000;
    *(_OWORD *)(v30 + 16) = 0;
    *(_OWORD *)(v30 + 32) = 0;
    *(unsigned char *)(v30 + 48) = 0;
    swift_willThrow(&type metadata for MLCreateError, v29, v30, v31, v32, v33);
    (*(void (**)(uint64_t, uint64_t))(v119 + 8))(v28, v27);
    uint64_t v34 = *(void (**)(long long *, uint64_t))(v116 + 8);
    uint64_t v35 = v120;
    v34(v122, v120);
    return ((uint64_t (*)(long long *, uint64_t))v34)(v121, v35);
  }
  uint64_t v125 = *(void **)(v116 + 16);
  double v36 = v124;
  uint64_t v37 = v120;
  ((void (*)(void, long long *, uint64_t))v125)(*(void *)&v124, v121, v120);
  Swift::String v38 = v113;
  DataFrame.init(_:)(*(void *)&v36);
  ((void (*)(void, long long *, uint64_t))v125)(*(void *)&v36, v122, v37);
  DataFrame.init(_:)(*(void *)&v36);
  Swift::String v39 = static MLRegressor.selectRegressors(featureCount:)(*((void *)v114 + 2));
  uint64_t v40 = v39[2];
  uint64_t v110 = v39;
  if (!v40)
  {
    uint64_t v125 = _swiftEmptyArrayStorage;
LABEL_25:
    swift_bridgeObjectRelease((_BYTE)v123);
    swift_bridgeObjectRelease((_BYTE)v110);
    swift_bridgeObjectRelease((_BYTE)v114);
    uint64_t v66 = v125;
    uint64_t v67 = v125[2];
    if (v67)
    {
      outlined init with copy of TabularRegressionTask((uint64_t)(v125 + 4), (uint64_t)&v93);
      swift_bridgeObjectRetain_n(v66, 2);
      if (v67 != 1)
      {
        uint64_t v68 = (char *)(v66 + 9);
        unint64_t v69 = 1;
        uint64_t v111 = v67;
        do
        {
          if (v69 >= v66[2]) {
            BUG();
          }
          uint64_t v123 = v68;
          outlined init with copy of TabularRegressionTask((uint64_t)v68, (uint64_t)&v107);
          uint64_t v70 = *((void *)&v108 + 1);
          uint64_t v71 = v109;
          __swift_project_boxed_opaque_existential_0Tm(&v107, *((uint64_t *)&v108 + 1));
          (*(void (**)(uint64_t, uint64_t))(v71 + 24))(v70, v71);
          uint64_t v72 = v97;
          if (v98)
          {
            outlined consume of Result<(Int, Int), Error>(v96, v97, 1);
            double v124 = -1.0;
          }
          else
          {
            outlined consume of Result<(Int, Int), Error>(v96, v97, 0);
            double v124 = *(double *)&v72;
          }
          uint64_t v73 = v94;
          uint64_t v74 = v95;
          __swift_project_boxed_opaque_existential_0Tm(&v93, v94);
          (*(void (**)(uint64_t, uint64_t))(v74 + 24))(v73, v74);
          uint64_t v75 = v100;
          if (v101)
          {
            outlined consume of Result<(Int, Int), Error>(v99, v100, 1);
            double v76 = -1.0;
          }
          else
          {
            outlined consume of Result<(Int, Int), Error>(v99, v100, 0);
            double v76 = *(double *)&v75;
          }
          uint64_t v77 = v111;
          uint64_t v78 = v123;
          if (v76 <= v124)
          {
            __swift_destroy_boxed_opaque_existential_1Tm(&v107);
          }
          else
          {
            __swift_destroy_boxed_opaque_existential_1Tm(&v93);
            outlined init with take of MLIdentifier(&v107, (uint64_t)&v93);
          }
          ++v69;
          uint64_t v68 = v78 + 40;
          uint64_t v66 = v125;
        }
        while (v77 != v69);
      }
      swift_bridgeObjectRelease((_BYTE)v66);
      outlined init with take of MLIdentifier(&v93, (uint64_t)&v107);
      swift_bridgeObjectRelease((_BYTE)v66);
      if (*((void *)&v108 + 1))
      {
        swift_bridgeObjectRelease((_BYTE)v66);
        outlined init with take of MLIdentifier(&v107, (uint64_t)&v93);
        uint64_t v79 = v94;
        uint64_t v80 = __swift_project_boxed_opaque_existential_0Tm(&v93, v94);
        uint64_t v81 = *(void *)(v79 - 8);
        int64_t v82 = *(void *)(v81 + 64);
        uint64_t v83 = alloca(v82);
        uint64_t v84 = alloca(v82);
        (*(void (**)(long long *, void *, uint64_t))(v81 + 16))(&v93, v80, v79);
        MLRegressor.init<A>(model:)(&v93, v79);
        uint64_t v85 = *(void (**)(uint64_t, uint64_t))(v119 + 8);
        uint64_t v86 = v118;
        v85(v115, v118);
        v85((uint64_t)v112, v86);
        v85((uint64_t)v113, v86);
        char v87 = *(void (**)(long long *, uint64_t))(v116 + 8);
        uint64_t v88 = v120;
        v87(v122, v120);
        v87(v121, v88);
        return __swift_destroy_boxed_opaque_existential_1Tm(&v93);
      }
    }
    else
    {
      long long v107 = 0;
      long long v108 = 0;
      uint64_t v109 = 0;
    }
    BUG();
  }
  uint64_t v105 = *(void (**)(long long *, long long *, uint64_t))(v119 + 16);
  uint64_t v41 = v39 + 5;
  uint64_t v125 = _swiftEmptyArrayStorage;
  while (1)
  {
    uint64_t v111 = v40;
    uint64_t v42 = *(v41 - 1);
    uint64_t v102 = v41;
    uint64_t v43 = *v41;
    uint64_t v44 = (uint64_t)v103;
    char v45 = v38;
    uint64_t v46 = v118;
    v105(v103, v45, v118);
    __swift_storeEnumTagSinglePayload(v44, 0, 1, v46);
    uint64_t v47 = *(void *)(v43 + 8);
    double v124 = *(double *)(v47 + 24);
    uint64_t v48 = v114;
    swift_bridgeObjectRetain((_BYTE)v114);
    uint64_t v49 = v117;
    uint64_t v50 = (*(uint64_t (**)(long long *, uint64_t, uint64_t, char *, char *, uint64_t, uint64_t))&v124)(v112, v44, v104, v123, v48, v42, v47);
    uint64_t v117 = v49;
    if (v49) {
      break;
    }
    uint64_t v54 = v50;
    outlined destroy of DataFrame?(v44);
    swift_bridgeObjectRelease((_BYTE)v48);
    double v124 = COERCE_DOUBLE(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TabularRegressionTask));
    uint64_t v55 = _arrayForceCast<A, B>(_:)(v54, v42, *(void *)&v124);
    swift_bridgeObjectRelease(v54);
    uint64_t v56 = *(void *)(v55 + 16);
    int64_t v57 = v125[2];
    int64_t v58 = v56 + v57;
    if (__OFADD__(v56, v57)) {
      BUG();
    }
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v125);
    uint64_t v60 = v125;
    if (!isUniquelyReferenced_nonNull_native || v125[3] >> 1 < v58)
    {
      if (v57 > v58) {
        int64_t v58 = v57;
      }
      uint64_t v60 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(isUniquelyReferenced_nonNull_native, v58, 1, (uint64_t)v125, &demangling cache variable for type metadata for _ContiguousArrayStorage<TabularRegressionTask>, &demangling cache variable for type metadata for TabularRegressionTask, (void (*)(uint64_t, uint64_t, unint64_t))specialized UnsafeMutablePointer.moveInitialize(from:count:));
    }
    BOOL v61 = *(void *)(v55 + 16) == 0;
    uint64_t v125 = v60;
    if (v61)
    {
      if (v56) {
        BUG();
      }
    }
    else
    {
      uint64_t v62 = v60[2];
      if ((v60[3] >> 1) - v62 < v56) {
        BUG();
      }
      unint64_t v63 = (unint64_t)&v60[5 * v62 + 4];
      if (v55 + 32 < v63 + 40 * v56 && v63 < v55 + 40 * v56 + 32)
      {
        _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize overlapping range", 49, 2, "Swift/UnsafePointer.swift", 25, 2, 1092, 1);
        BUG();
      }
      swift_arrayInitWithCopy(v63, v55 + 32, v56, *(void *)&v124);
      if (v56)
      {
        BOOL v64 = __OFADD__(v125[2], v56);
        uint64_t v65 = v125[2] + v56;
        if (v64) {
          BUG();
        }
        v125[2] = v65;
      }
    }
    swift_bridgeObjectRelease(v55);
    uint64_t v41 = v102 + 2;
    uint64_t v40 = v111 - 1;
    Swift::String v38 = v113;
    if (v111 == 1) {
      goto LABEL_25;
    }
  }
  swift_bridgeObjectRelease_n(v48, 2, v51, v52, v53);
  swift_bridgeObjectRelease((_BYTE)v123);
  BOOL v89 = *(void (**)(uint64_t, uint64_t))(v119 + 8);
  uint64_t v90 = v118;
  v89(v115, v118);
  outlined destroy of DataFrame?(v44);
  swift_bridgeObjectRelease((_BYTE)v125);
  swift_bridgeObjectRelease((_BYTE)v110);
  v89((uint64_t)v112, v90);
  v89((uint64_t)v113, v90);
  uint64_t v91 = *(void (**)(long long *, uint64_t))(v116 + 8);
  uint64_t v92 = v120;
  v91(v122, v120);
  return ((uint64_t (*)(long long *, uint64_t))v91)(v121, v92);
}

void *static MLRegressor.selectRegressors(featureCount:)(uint64_t a1)
{
  uint64_t v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<TabularRegressionTask.Type>);
  if (a1 > 199)
  {
    uint64_t v2 = (void *)swift_allocObject(v1, 48, 7);
    v2[2] = 1;
    v2[3] = 2;
    v2[4] = type metadata accessor for MLLinearRegressor(0);
    v2[5] = &protocol witness table for MLLinearRegressor;
  }
  else
  {
    uint64_t v2 = (void *)swift_allocObject(v1, 96, 7);
    v2[2] = 4;
    v2[3] = 8;
    v2[4] = type metadata accessor for MLLinearRegressor(0);
    v2[5] = &protocol witness table for MLLinearRegressor;
    v2[6] = type metadata accessor for MLBoostedTreeRegressor(0);
    v2[7] = &protocol witness table for MLBoostedTreeRegressor;
    v2[8] = type metadata accessor for MLDecisionTreeRegressor(0);
    v2[9] = &protocol witness table for MLDecisionTreeRegressor;
    v2[10] = type metadata accessor for MLRandomForestRegressor(0);
    v2[11] = &protocol witness table for MLRandomForestRegressor;
  }
  return v2;
}

uint64_t outlined destroy of DataFrame?(uint64_t a1)
{
  uint64_t v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for DataFrame?);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v1 - 8) + 8))(a1, v1);
  return a1;
}

uint64_t MLRegressor.init(trainingData:targetColumn:featureColumns:)(uint64_t *a1, uint64_t a2, char *a3, uint64_t a4)
{
  uint64_t v12 = a4;
  int64_t v13 = a3;
  int64_t v4 = *(void *)(*(void *)(type metadata accessor for DataFrame(0) - 8) + 64);
  char v5 = alloca(v4);
  int64_t v6 = alloca(v4);
  char v7 = *((unsigned char *)a1 + 8);
  uint64_t v10 = *a1;
  char v11 = v7;
  DataFrame.init(_:)((uint64_t)&v10);
  return MLRegressor.init(trainingData:targetColumn:featureColumns:)((uint64_t)&v9, a2, v13, v12);
}

uint64_t MLRegressor.predictions(from:)(uint64_t a1)
{
  uint64_t v60 = v2;
  uint64_t v48 = v3;
  uint64_t v59 = a1;
  uint64_t v61 = v1;
  uint64_t v52 = type metadata accessor for MLLinearRegressor(0);
  int64_t v4 = *(void *)(*(void *)(v52 - 8) + 64);
  char v5 = alloca(v4);
  int64_t v6 = alloca(v4);
  uint64_t v49 = &v48;
  uint64_t v53 = type metadata accessor for MLRandomForestRegressor(0);
  int64_t v7 = *(void *)(*(void *)(v53 - 8) + 64);
  uint64_t v8 = alloca(v7);
  uint64_t v9 = alloca(v7);
  uint64_t v50 = &v48;
  uint64_t v54 = type metadata accessor for MLDecisionTreeRegressor(0);
  int64_t v10 = *(void *)(*(void *)(v54 - 8) + 64);
  char v11 = alloca(v10);
  uint64_t v12 = alloca(v10);
  uint64_t v51 = &v48;
  uint64_t v63 = type metadata accessor for DataFrame(0);
  uint64_t v62 = *(void *)(v63 - 8);
  int64_t v13 = *(void *)(v62 + 64);
  uint64_t v14 = alloca(v13);
  uint64_t v15 = alloca(v13);
  uint64_t v55 = &v48;
  int64_t v16 = alloca(v13);
  int64_t v17 = alloca(v13);
  uint64_t v56 = &v48;
  char v18 = alloca(v13);
  char v19 = alloca(v13);
  int64_t v57 = &v48;
  Swift::String v20 = alloca(v13);
  Swift::String v21 = alloca(v13);
  int64_t v58 = &v48;
  uint64_t v22 = type metadata accessor for MLBoostedTreeRegressor(0);
  int64_t v23 = *(void *)(*(void *)(v22 - 8) + 64);
  os_log_type_t v24 = alloca(v23);
  uint64_t v25 = alloca(v23);
  uint64_t v26 = &v48;
  uint64_t v27 = type metadata accessor for MLRegressor(0);
  int64_t v28 = *(void *)(*(void *)(v27 - 8) + 64);
  uint64_t v29 = alloca(v28);
  uint64_t v30 = alloca(v28);
  outlined init with copy of MLRegressor(v48, (uint64_t)&v48);
  switch(swift_getEnumCaseMultiPayload(&v48, v27))
  {
    case 0u:
      outlined init with take of MLClassifierMetrics((uint64_t)&v48, (uint64_t)&v48, type metadata accessor for MLBoostedTreeRegressor);
      uint64_t v31 = v59;
      DataFrame.validateContainsColumns(_:context:)(*(Swift::OpaquePointer *)((char *)&v48 + *(int *)(v22 + 28)), (Swift::String)__PAIR128__(0xE700000000000000, 0x65727574616546));
      if (!v32)
      {
        TreeRegressorModel.applied(to:eventHandler:)(v31, 0, 0);
        uint64_t v33 = v58;
        DataFrame.subscript.getter(v48, v49);
        (*(void (**)(uint64_t *, uint64_t))(v62 + 8))(v33, v63);
      }
      uint64_t v34 = type metadata accessor for MLBoostedTreeRegressor;
      goto LABEL_14;
    case 1u:
      uint64_t v35 = v51;
      outlined init with take of MLClassifierMetrics((uint64_t)&v48, (uint64_t)v51, type metadata accessor for MLDecisionTreeRegressor);
      uint64_t v36 = v59;
      DataFrame.validateContainsColumns(_:context:)(*(Swift::OpaquePointer *)((char *)v35 + *(int *)(v54 + 28)), (Swift::String)__PAIR128__(0xE700000000000000, 0x65727574616546));
      if (!v37)
      {
        TreeRegressorModel.applied(to:eventHandler:)(v36, 0, 0);
        Swift::String v38 = v57;
        DataFrame.subscript.getter(*v35, v35[1]);
        (*(void (**)(uint64_t *, uint64_t))(v62 + 8))(v38, v63);
      }
      uint64_t v34 = type metadata accessor for MLDecisionTreeRegressor;
      uint64_t v39 = (uint64_t)v35;
      return outlined destroy of MLActivityClassifier.ModelParameters(v39, v34);
    case 2u:
      uint64_t v26 = v50;
      outlined init with take of MLClassifierMetrics((uint64_t)&v48, (uint64_t)v50, type metadata accessor for MLRandomForestRegressor);
      uint64_t v40 = v59;
      DataFrame.validateContainsColumns(_:context:)(*(Swift::OpaquePointer *)((char *)v26 + *(int *)(v53 + 28)), (Swift::String)__PAIR128__(0xE700000000000000, 0x65727574616546));
      if (!v41)
      {
        TreeRegressorModel.applied(to:eventHandler:)(v40, 0, 0);
        uint64_t v42 = v56;
        DataFrame.subscript.getter(*v26, v26[1]);
        (*(void (**)(uint64_t *, uint64_t))(v62 + 8))(v42, v63);
      }
      uint64_t v34 = type metadata accessor for MLRandomForestRegressor;
      goto LABEL_14;
    case 3u:
      uint64_t v26 = v49;
      outlined init with take of MLClassifierMetrics((uint64_t)&v48, (uint64_t)v49, type metadata accessor for MLLinearRegressor);
      uint64_t v43 = v52;
      uint64_t v44 = v59;
      DataFrame.validateContainsColumns(_:context:)(*(Swift::OpaquePointer *)((char *)v26 + *(int *)(v52 + 28)), (Swift::String)__PAIR128__(0xE700000000000000, 0x65727574616546));
      if (!v45)
      {
        MLLinearRegressor.Model.applied(to:eventHandler:)(v44, 0, 0);
        uint64_t v46 = v55;
        DataFrame.subscript.getter(*(uint64_t *)((char *)v26 + *(int *)(v43 + 24)), *(uint64_t *)((char *)v26 + *(int *)(v43 + 24) + 8));
        (*(void (**)(uint64_t *, uint64_t))(v62 + 8))(v46, v63);
      }
      uint64_t v34 = type metadata accessor for MLLinearRegressor;
LABEL_14:
      uint64_t v39 = (uint64_t)v26;
      return outlined destroy of MLActivityClassifier.ModelParameters(v39, v34);
  }
}

{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  int64_t v4;
  void *v5;
  void *v6;
  int64_t v7;
  void *v8;
  void *v9;
  int64_t v10;
  void *v11;
  void *v12;
  int64_t v13;
  void *v14;
  void *v15;
  void *v16;
  void *v17;
  void *v18;
  void *v19;
  void *v20;
  void *v21;
  void *v22;
  void *v23;
  void *v24;
  void *v25;
  void *v26;
  void *v27;
  void *v28;
  void *v29;
  int64_t v30;
  void *v31;
  void *v32;
  void *v33;
  void *v34;
  void *v35;
  void *v36;
  void *v37;
  void *v38;
  int64_t v39;
  void *v40;
  void *v41;
  uint64_t v42;
  int64_t v43;
  void *v44;
  void *v45;
  uint64_t v46;
  char v47;
  uint64_t *v48;
  uint64_t v49;
  __m128 v50;
  uint64_t v51;
  uint64_t (*v52)(uint64_t);
  uint64_t v53;
  uint64_t *v54;
  uint64_t v55;
  __m128 v56;
  uint64_t v57;
  uint64_t v58;
  __m128 v59;
  uint64_t v60;
  uint64_t v61;
  __m128 v62;
  uint64_t v63;
  uint64_t *v65;
  double (*v66)(uint64_t *, uint64_t);
  uint64_t *v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t *v70;
  double (*v71)(uint64_t *, uint64_t);
  uint64_t *v72;
  uint64_t *v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t *v76;
  double (*v77)(uint64_t *, uint64_t);
  uint64_t *v78;
  uint64_t *v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t *v82;
  double (*v83)(uint64_t *, uint64_t);
  uint64_t *v84;
  uint64_t *v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t *v90;
  uint64_t *v91;
  uint64_t v92;
  uint64_t *v93;
  uint64_t v94;
  uint64_t *v95;
  uint64_t v96;
  uint64_t *v97;
  uint64_t *v98;
  uint64_t *v99;
  uint64_t *v100;
  uint64_t *v101;
  uint64_t *v102;
  uint64_t *v103;
  uint64_t *v104;
  uint64_t *v105;
  uint64_t *v106;
  uint64_t *v107;
  uint64_t v108;
  char v109;
  uint64_t v110;
  uint64_t *v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;

  uint64_t v110 = v2;
  uint64_t v88 = v3;
  uint64_t v112 = v1;
  BOOL v89 = type metadata accessor for MLLinearRegressor(0);
  int64_t v4 = *(void *)(*(void *)(v89 - 8) + 64);
  char v5 = alloca(v4);
  int64_t v6 = alloca(v4);
  uint64_t v90 = &v87;
  uint64_t v92 = type metadata accessor for MLRandomForestRegressor(0);
  int64_t v7 = *(void *)(*(void *)(v92 - 8) + 64);
  uint64_t v8 = alloca(v7);
  uint64_t v9 = alloca(v7);
  uint64_t v91 = &v87;
  uint64_t v94 = type metadata accessor for MLDecisionTreeRegressor(0);
  int64_t v10 = *(void *)(*(void *)(v94 - 8) + 64);
  char v11 = alloca(v10);
  uint64_t v12 = alloca(v10);
  long long v93 = &v87;
  uint64_t v113 = type metadata accessor for DataFrame(0);
  uint64_t v114 = *(void *)(v113 - 8);
  int64_t v13 = *(void *)(v114 + 64);
  uint64_t v14 = alloca(v13);
  uint64_t v15 = alloca(v13);
  uint64_t v100 = &v87;
  int64_t v16 = alloca(v13);
  int64_t v17 = alloca(v13);
  uint64_t v111 = &v87;
  char v18 = alloca(v13);
  char v19 = alloca(v13);
  char v101 = &v87;
  Swift::String v20 = alloca(v13);
  Swift::String v21 = alloca(v13);
  uint64_t v97 = &v87;
  uint64_t v22 = alloca(v13);
  int64_t v23 = alloca(v13);
  uint64_t v102 = &v87;
  os_log_type_t v24 = alloca(v13);
  uint64_t v25 = alloca(v13);
  char v98 = &v87;
  uint64_t v26 = alloca(v13);
  uint64_t v27 = alloca(v13);
  uint64_t v103 = &v87;
  int64_t v28 = alloca(v13);
  uint64_t v29 = alloca(v13);
  uint64_t v95 = &v87;
  uint64_t v30 = *(void *)(*(void *)(type metadata accessor for AnyColumn(0) - 8) + 64);
  uint64_t v31 = alloca(v30);
  uint64_t v32 = alloca(v30);
  uint64_t v104 = &v87;
  uint64_t v33 = alloca(v30);
  uint64_t v34 = alloca(v30);
  uint64_t v105 = &v87;
  uint64_t v35 = alloca(v30);
  uint64_t v36 = alloca(v30);
  uint64_t v106 = &v87;
  uint64_t v37 = alloca(v30);
  Swift::String v38 = alloca(v30);
  long long v107 = &v87;
  uint64_t v96 = type metadata accessor for MLBoostedTreeRegressor(0);
  uint64_t v39 = *(void *)(*(void *)(v96 - 8) + 64);
  uint64_t v40 = alloca(v39);
  uint64_t v41 = alloca(v39);
  uint64_t v99 = &v87;
  uint64_t v42 = type metadata accessor for MLRegressor(0);
  uint64_t v43 = *(void *)(*(void *)(v42 - 8) + 64);
  uint64_t v44 = alloca(v43);
  uint64_t v45 = alloca(v43);
  uint64_t v46 = *(void *)a1;
  uint64_t v47 = *(unsigned char *)(a1 + 8);
  outlined init with copy of MLRegressor(v88, (uint64_t)&v87);
  switch(swift_getEnumCaseMultiPayload(&v87, v42))
  {
    case 0u:
      uint64_t v48 = v99;
      outlined init with take of MLClassifierMetrics((uint64_t)&v87, (uint64_t)v99, type metadata accessor for MLBoostedTreeRegressor);
      long long v108 = v46;
      uint64_t v109 = v47 & 1;
      outlined copy of Result<_DataTable, Error>(v46, v47);
      uint64_t v49 = (uint64_t)v95;
      DataFrame.init(_:)((uint64_t)&v108);
      DataFrame.validateContainsColumns(_:context:)(*(Swift::OpaquePointer *)((char *)v48 + *(int *)(v96 + 28)), (Swift::String)__PAIR128__(0xE700000000000000, 0x65727574616546));
      if (v51)
      {
        (*(void (**)(uint64_t, uint64_t))(v114 + 8))(v49, v113);
      }
      else
      {
        TreeRegressorModel.applied(to:eventHandler:)(v49, 0, 0);
        uint64_t v65 = v103;
        DataFrame.subscript.getter(*v48, v48[1]);
        uint64_t v66 = *(double (**)(uint64_t *, uint64_t))(v114 + 8);
        uint64_t v67 = v65;
        uint64_t v68 = v49;
        unint64_t v69 = v113;
        v66(v67, v113);
        *(double *)v50.i64 = v66((uint64_t *)v68, v69);
        uint64_t v48 = v99;
        MLUntypedColumn.init(_:convertArraysToShapedArrays:)((uint64_t)v107, 1, v50);
      }
      uint64_t v52 = type metadata accessor for MLBoostedTreeRegressor;
      uint64_t v53 = (uint64_t)v48;
      return outlined destroy of MLActivityClassifier.ModelParameters(v53, v52);
    case 1u:
      uint64_t v54 = v93;
      outlined init with take of MLClassifierMetrics((uint64_t)&v87, (uint64_t)v93, type metadata accessor for MLDecisionTreeRegressor);
      long long v108 = v46;
      uint64_t v109 = v47 & 1;
      outlined copy of Result<_DataTable, Error>(v46, v47);
      uint64_t v55 = (uint64_t)v98;
      DataFrame.init(_:)((uint64_t)&v108);
      DataFrame.validateContainsColumns(_:context:)(*(Swift::OpaquePointer *)((char *)v54 + *(int *)(v94 + 28)), (Swift::String)__PAIR128__(0xE700000000000000, 0x65727574616546));
      if (v57)
      {
        (*(void (**)(uint64_t, uint64_t))(v114 + 8))(v55, v113);
      }
      else
      {
        TreeRegressorModel.applied(to:eventHandler:)(v55, 0, 0);
        uint64_t v70 = v102;
        DataFrame.subscript.getter(*v54, v54[1]);
        uint64_t v71 = *(double (**)(uint64_t *, uint64_t))(v114 + 8);
        uint64_t v72 = v70;
        uint64_t v73 = v54;
        uint64_t v74 = v113;
        v71(v72, v113);
        uint64_t v75 = v74;
        uint64_t v54 = v73;
        *(double *)v56.i64 = v71(v98, v75);
        MLUntypedColumn.init(_:convertArraysToShapedArrays:)((uint64_t)v106, 1, v56);
      }
      uint64_t v52 = type metadata accessor for MLDecisionTreeRegressor;
      goto LABEL_17;
    case 2u:
      uint64_t v54 = v91;
      outlined init with take of MLClassifierMetrics((uint64_t)&v87, (uint64_t)v91, type metadata accessor for MLRandomForestRegressor);
      long long v108 = v46;
      uint64_t v109 = v47 & 1;
      outlined copy of Result<_DataTable, Error>(v46, v47);
      int64_t v58 = (uint64_t)v97;
      DataFrame.init(_:)((uint64_t)&v108);
      DataFrame.validateContainsColumns(_:context:)(*(Swift::OpaquePointer *)((char *)v54 + *(int *)(v92 + 28)), (Swift::String)__PAIR128__(0xE700000000000000, 0x65727574616546));
      if (v60)
      {
        (*(void (**)(uint64_t, uint64_t))(v114 + 8))(v58, v113);
      }
      else
      {
        TreeRegressorModel.applied(to:eventHandler:)(v58, 0, 0);
        double v76 = v101;
        DataFrame.subscript.getter(*v54, v54[1]);
        uint64_t v77 = *(double (**)(uint64_t *, uint64_t))(v114 + 8);
        uint64_t v78 = v76;
        uint64_t v79 = v54;
        uint64_t v80 = v113;
        v77(v78, v113);
        uint64_t v81 = v80;
        uint64_t v54 = v79;
        *(double *)v59.i64 = v77(v97, v81);
        MLUntypedColumn.init(_:convertArraysToShapedArrays:)((uint64_t)v105, 1, v59);
      }
      uint64_t v52 = type metadata accessor for MLRandomForestRegressor;
      goto LABEL_17;
    case 3u:
      uint64_t v54 = v90;
      outlined init with take of MLClassifierMetrics((uint64_t)&v87, (uint64_t)v90, type metadata accessor for MLLinearRegressor);
      long long v108 = v46;
      uint64_t v109 = v47 & 1;
      outlined copy of Result<_DataTable, Error>(v46, v47);
      DataFrame.init(_:)((uint64_t)&v108);
      uint64_t v61 = v89;
      DataFrame.validateContainsColumns(_:context:)(*(Swift::OpaquePointer *)((char *)v54 + *(int *)(v89 + 28)), (Swift::String)__PAIR128__(0xE700000000000000, 0x65727574616546));
      if (v63)
      {
        (*(void (**)(uint64_t *, uint64_t))(v114 + 8))(v111, v113);
        uint64_t v52 = type metadata accessor for MLLinearRegressor;
LABEL_17:
        uint64_t v53 = (uint64_t)v54;
      }
      else
      {
        MLLinearRegressor.Model.applied(to:eventHandler:)((uint64_t)v111, 0, 0);
        int64_t v82 = v100;
        DataFrame.subscript.getter(*(uint64_t *)((char *)v54 + *(int *)(v61 + 24)), *(uint64_t *)((char *)v54 + *(int *)(v61 + 24) + 8));
        uint64_t v83 = *(double (**)(uint64_t *, uint64_t))(v114 + 8);
        uint64_t v84 = v82;
        uint64_t v85 = v54;
        uint64_t v86 = v113;
        v83(v84, v113);
        *(double *)v62.i64 = v83(v111, v86);
        MLUntypedColumn.init(_:convertArraysToShapedArrays:)((uint64_t)v104, 1, v62);
        uint64_t v52 = type metadata accessor for MLLinearRegressor;
        uint64_t v53 = (uint64_t)v85;
      }
      return outlined destroy of MLActivityClassifier.ModelParameters(v53, v52);
  }
}

uint64_t MLRegressor.evaluation(on:)(uint64_t a1)
{
  uint64_t v57 = a1;
  uint64_t v55 = v1;
  int64_t v3 = *(void *)(*(void *)(type metadata accessor for MLLinearRegressor(0) - 8) + 64);
  int64_t v4 = alloca(v3);
  char v5 = alloca(v3);
  uint64_t v52 = v47;
  uint64_t v54 = type metadata accessor for MLRandomForestRegressor(0);
  int64_t v6 = *(void *)(*(void *)(v54 - 8) + 64);
  int64_t v7 = alloca(v6);
  uint64_t v8 = alloca(v6);
  uint64_t v53 = v47;
  uint64_t v51 = type metadata accessor for MLDecisionTreeRegressor(0);
  int64_t v9 = *(void *)(*(void *)(v51 - 8) + 64);
  int64_t v10 = alloca(v9);
  char v11 = alloca(v9);
  uint64_t v56 = v47;
  uint64_t v12 = type metadata accessor for MLBoostedTreeRegressor(0);
  int64_t v13 = *(void *)(*(void *)(v12 - 8) + 64);
  uint64_t v14 = alloca(v13);
  uint64_t v15 = alloca(v13);
  int64_t v16 = v47;
  uint64_t v17 = type metadata accessor for MLRegressor(0);
  int64_t v18 = *(void *)(*(void *)(v17 - 8) + 64);
  char v19 = alloca(v18);
  Swift::String v20 = alloca(v18);
  outlined init with copy of MLRegressor(v2, (uint64_t)v47);
  switch(swift_getEnumCaseMultiPayload(v47, v17))
  {
    case 0u:
      outlined init with take of MLClassifierMetrics((uint64_t)v47, (uint64_t)v47, type metadata accessor for MLBoostedTreeRegressor);
      DataFrame.validateContainsColumns(_:context:)(*(Swift::OpaquePointer *)&v47[*(int *)(v12 + 28)], (Swift::String)__PAIR128__(0xE700000000000000, 0x65727574616546));
      uint64_t v22 = v55;
      if (v21) {
        goto LABEL_5;
      }
      uint64_t v23 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<String>);
      uint64_t inited = swift_initStackObject(v23, v50);
      uint64_t v56 = v47;
      v25._rawValue = (void *)inited;
      *(void *)(inited + 16) = 1;
      *(void *)(inited + 24) = 2;
      uint64_t v26 = *(int *)(v12 + 24);
      uint64_t v27 = *(void *)&v56[v26 + 8];
      *((void *)v25._rawValue + 4) = *(void *)&v56[v26];
      *((void *)v25._rawValue + 5) = v27;
      swift_bridgeObjectRetain(v27);
      DataFrame.validateContainsColumns(_:context:)(v25, (Swift::String)__PAIR128__(0xE500000000000000, 0x6C6562614CLL));
      swift_setDeallocating(v25._rawValue);
      int64_t v16 = v56;
      specialized _ContiguousArrayStorage.__deallocating_deinit();
      if (v21)
      {
LABEL_5:
        *(void *)uint64_t v22 = v21;
        *(void *)(v22 + 8) = 0;
        *(unsigned char *)(v22 + 16) = 1;
      }
      else
      {
        TreeRegressorModel.computeMetrics(on:)(v57);
      }
      int64_t v28 = type metadata accessor for MLBoostedTreeRegressor;
      uint64_t v29 = (uint64_t)v16;
      break;
    case 1u:
      uint64_t v30 = (uint64_t)v56;
      outlined init with take of MLClassifierMetrics((uint64_t)v47, (uint64_t)v56, type metadata accessor for MLDecisionTreeRegressor);
      uint64_t v31 = v51;
      DataFrame.validateContainsColumns(_:context:)(*(Swift::OpaquePointer *)(v30 + *(int *)(v51 + 28)), (Swift::String)__PAIR128__(0xE700000000000000, 0x65727574616546));
      uint64_t v33 = v55;
      if (v32) {
        goto LABEL_10;
      }
      uint64_t v34 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<String>);
      uint64_t v35 = (void *)swift_initStackObject(v34, v49);
      v35[2] = 1;
      v35[3] = 2;
      uint64_t v36 = *(int *)(v31 + 24);
      uint64_t v37 = *(void *)&v56[v36 + 8];
      v35[4] = *(void *)&v56[v36];
      v35[5] = v37;
      swift_bridgeObjectRetain(v37);
      DataFrame.validateContainsColumns(_:context:)((Swift::OpaquePointer)v35, (Swift::String)__PAIR128__(0xE500000000000000, 0x6C6562614CLL));
      swift_setDeallocating(v35);
      uint64_t v30 = (uint64_t)v56;
      specialized _ContiguousArrayStorage.__deallocating_deinit();
      if (v32)
      {
LABEL_10:
        *(void *)uint64_t v33 = v32;
        *(void *)(v33 + 8) = 0;
        *(unsigned char *)(v33 + 16) = 1;
      }
      else
      {
        TreeRegressorModel.computeMetrics(on:)(v57);
      }
      int64_t v28 = type metadata accessor for MLDecisionTreeRegressor;
      uint64_t v29 = v30;
      break;
    case 2u:
      uint64_t v38 = (uint64_t)v53;
      outlined init with take of MLClassifierMetrics((uint64_t)v47, (uint64_t)v53, type metadata accessor for MLRandomForestRegressor);
      DataFrame.validateContainsColumns(_:context:)(*(Swift::OpaquePointer *)(v38 + *(int *)(v54 + 28)), (Swift::String)__PAIR128__(0xE700000000000000, 0x65727574616546));
      uint64_t v40 = v55;
      if (v39) {
        goto LABEL_15;
      }
      uint64_t v41 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<String>);
      uint64_t v42 = (void *)swift_initStackObject(v41, v48);
      v42[2] = 1;
      v42[3] = 2;
      uint64_t v43 = *(int *)(v54 + 24);
      uint64_t v44 = *(void *)(v38 + v43 + 8);
      v42[4] = *(void *)(v38 + v43);
      v42[5] = v44;
      swift_bridgeObjectRetain(v44);
      DataFrame.validateContainsColumns(_:context:)((Swift::OpaquePointer)v42, (Swift::String)__PAIR128__(0xE500000000000000, 0x6C6562614CLL));
      swift_setDeallocating(v42);
      specialized _ContiguousArrayStorage.__deallocating_deinit();
      if (v39)
      {
LABEL_15:
        *(void *)uint64_t v40 = v39;
        *(void *)(v40 + 8) = 0;
        *(unsigned char *)(v40 + 16) = 1;
      }
      else
      {
        TreeRegressorModel.computeMetrics(on:)(v57);
      }
      int64_t v28 = type metadata accessor for MLRandomForestRegressor;
      uint64_t v29 = v38;
      break;
    case 3u:
      uint64_t v45 = (uint64_t)v52;
      outlined init with take of MLClassifierMetrics((uint64_t)v47, (uint64_t)v52, type metadata accessor for MLLinearRegressor);
      MLLinearRegressor.evaluation(on:)(v57);
      uint64_t v29 = v45;
      int64_t v28 = type metadata accessor for MLLinearRegressor;
      break;
  }
  return outlined destroy of MLActivityClassifier.ModelParameters(v29, v28);
}

{
  void *v1;
  uint64_t v2;
  int64_t v3;
  void *v4;
  void *v5;
  int64_t v6;
  void *v7;
  void *v8;
  int64_t v9;
  void *v10;
  void *v11;
  int64_t v12;
  void *v13;
  void *v14;
  void *v15;
  void *v16;
  void *v17;
  void *v18;
  void *v19;
  void *v20;
  int64_t v21;
  void *v22;
  void *v23;
  uint64_t v24;
  int64_t v25;
  void *v26;
  void *v27;
  uint64_t v28;
  char v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  unsigned char *v33;
  void *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  void *v41;
  uint64_t v42;
  uint64_t v43;
  void *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t (*v47)(uint64_t);
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  void *v52;
  uint64_t v53;
  uint64_t v54;
  void *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  void *inited;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  unsigned char v67[8];
  unsigned char v68[48];
  unsigned char v69[48];
  unsigned char v70[48];
  unsigned char *v71;
  unsigned char *v72;
  unsigned char *v73;
  unsigned char *v74;
  unsigned char *v75;
  unsigned char *v76;
  unsigned char *v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  char v82;
  unsigned char *v83;
  void *v84;
  uint64_t v85;
  uint64_t v86;

  uint64_t v83 = (unsigned char *)v2;
  uint64_t v84 = v1;
  int64_t v3 = *(void *)(*(void *)(type metadata accessor for MLLinearRegressor(0) - 8) + 64);
  int64_t v4 = alloca(v3);
  char v5 = alloca(v3);
  uint64_t v71 = v67;
  uint64_t v79 = type metadata accessor for MLRandomForestRegressor(0);
  int64_t v6 = *(void *)(*(void *)(v79 - 8) + 64);
  int64_t v7 = alloca(v6);
  uint64_t v8 = alloca(v6);
  uint64_t v72 = v67;
  uint64_t v80 = type metadata accessor for MLDecisionTreeRegressor(0);
  int64_t v9 = *(void *)(*(void *)(v80 - 8) + 64);
  int64_t v10 = alloca(v9);
  char v11 = alloca(v9);
  uint64_t v73 = v67;
  uint64_t v86 = type metadata accessor for DataFrame(0);
  uint64_t v85 = *(void *)(v86 - 8);
  uint64_t v12 = *(void *)(v85 + 64);
  int64_t v13 = alloca(v12);
  uint64_t v14 = alloca(v12);
  uint64_t v75 = v67;
  uint64_t v15 = alloca(v12);
  int64_t v16 = alloca(v12);
  uint64_t v74 = v67;
  uint64_t v17 = alloca(v12);
  int64_t v18 = alloca(v12);
  double v76 = v67;
  char v19 = alloca(v12);
  Swift::String v20 = alloca(v12);
  uint64_t v77 = v67;
  uint64_t v78 = type metadata accessor for MLBoostedTreeRegressor(0);
  uint64_t v21 = *(void *)(*(void *)(v78 - 8) + 64);
  uint64_t v22 = alloca(v21);
  uint64_t v23 = alloca(v21);
  os_log_type_t v24 = type metadata accessor for MLRegressor(0);
  Swift::OpaquePointer v25 = *(void *)(*(void *)(v24 - 8) + 64);
  uint64_t v26 = alloca(v25);
  uint64_t v27 = alloca(v25);
  int64_t v28 = *(void *)a1;
  uint64_t v29 = *(unsigned char *)(a1 + 8);
  outlined init with copy of MLRegressor((uint64_t)v83, (uint64_t)v67);
  switch(swift_getEnumCaseMultiPayload(v67, v24))
  {
    case 0u:
      outlined init with take of MLClassifierMetrics((uint64_t)v67, (uint64_t)v67, type metadata accessor for MLBoostedTreeRegressor);
      uint64_t v81 = v28;
      int64_t v82 = v29 & 1;
      outlined copy of Result<_DataTable, Error>(v28, v29);
      uint64_t v30 = (uint64_t)v77;
      DataFrame.init(_:)((uint64_t)&v81);
      uint64_t v31 = v78;
      DataFrame.validateContainsColumns(_:context:)(*(Swift::OpaquePointer *)&v67[*(int *)(v78 + 28)], (Swift::String)__PAIR128__(0xE700000000000000, 0x65727574616546));
      uint64_t v33 = v67;
      if (v32)
      {
        uint64_t v34 = v84;
        uint64_t v35 = v85;
        uint64_t v36 = v86;
      }
      else
      {
        uint64_t v61 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<String>);
        uint64_t inited = (void *)swift_initStackObject(v61, v70);
        inited[2] = 1;
        inited[3] = 2;
        uint64_t v63 = *(int *)(v31 + 24);
        BOOL v64 = *(void *)&v67[v63];
        uint64_t v83 = v67;
        uint64_t v65 = *(void *)&v67[v63 + 8];
        inited[4] = v64;
        inited[5] = v65;
        swift_bridgeObjectRetain(v65);
        DataFrame.validateContainsColumns(_:context:)((Swift::OpaquePointer)inited, (Swift::String)__PAIR128__(0xE500000000000000, 0x6C6562614CLL));
        if (!v32)
        {
          swift_setDeallocating(inited);
          specialized _ContiguousArrayStorage.__deallocating_deinit();
          uint64_t v33 = v83;
          TreeRegressorModel.computeMetrics(on:)(v30);
          uint64_t v35 = v85;
          uint64_t v36 = v86;
LABEL_21:
          (*(void (**)(uint64_t, uint64_t))(v35 + 8))(v30, v36);
          uint64_t v47 = type metadata accessor for MLBoostedTreeRegressor;
          goto LABEL_22;
        }
        swift_setDeallocating(inited);
        specialized _ContiguousArrayStorage.__deallocating_deinit();
        uint64_t v34 = v84;
        uint64_t v35 = v85;
        uint64_t v36 = v86;
        uint64_t v33 = v83;
      }
      void *v34 = v32;
      v34[1] = 0;
      *((unsigned char *)v34 + 16) = 1;
      goto LABEL_21;
    case 1u:
      uint64_t v37 = (uint64_t)v73;
      outlined init with take of MLClassifierMetrics((uint64_t)v67, (uint64_t)v73, type metadata accessor for MLDecisionTreeRegressor);
      uint64_t v81 = v28;
      int64_t v82 = v29 & 1;
      outlined copy of Result<_DataTable, Error>(v28, v29);
      uint64_t v38 = (uint64_t)v76;
      DataFrame.init(_:)((uint64_t)&v81);
      DataFrame.validateContainsColumns(_:context:)(*(Swift::OpaquePointer *)(v37 + *(int *)(v80 + 28)), (Swift::String)__PAIR128__(0xE700000000000000, 0x65727574616546));
      uint64_t v33 = (unsigned char *)v37;
      if (v39) {
        goto LABEL_7;
      }
      uint64_t v40 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<String>);
      uint64_t v41 = (void *)swift_initStackObject(v40, v69);
      v41[2] = 1;
      v41[3] = 2;
      uint64_t v42 = *(int *)(v80 + 24);
      uint64_t v43 = *(void *)(v37 + v42 + 8);
      v41[4] = *(void *)(v37 + v42);
      v41[5] = v43;
      swift_bridgeObjectRetain(v43);
      DataFrame.validateContainsColumns(_:context:)((Swift::OpaquePointer)v41, (Swift::String)__PAIR128__(0xE500000000000000, 0x6C6562614CLL));
      if (v39)
      {
        swift_setDeallocating(v41);
        specialized _ContiguousArrayStorage.__deallocating_deinit();
LABEL_7:
        uint64_t v44 = v84;
        uint64_t v45 = v85;
        uint64_t v46 = v86;
        void *v84 = v39;
        v44[1] = 0;
        *((unsigned char *)v44 + 16) = 1;
      }
      else
      {
        swift_setDeallocating(v41);
        specialized _ContiguousArrayStorage.__deallocating_deinit();
        TreeRegressorModel.computeMetrics(on:)(v38);
        uint64_t v45 = v85;
        uint64_t v46 = v86;
      }
      (*(void (**)(uint64_t, uint64_t))(v45 + 8))(v38, v46);
      uint64_t v47 = type metadata accessor for MLDecisionTreeRegressor;
      goto LABEL_22;
    case 2u:
      uint64_t v48 = (uint64_t)v72;
      outlined init with take of MLClassifierMetrics((uint64_t)v67, (uint64_t)v72, type metadata accessor for MLRandomForestRegressor);
      uint64_t v81 = v28;
      int64_t v82 = v29 & 1;
      outlined copy of Result<_DataTable, Error>(v28, v29);
      uint64_t v49 = (uint64_t)v74;
      DataFrame.init(_:)((uint64_t)&v81);
      DataFrame.validateContainsColumns(_:context:)(*(Swift::OpaquePointer *)(v48 + *(int *)(v79 + 28)), (Swift::String)__PAIR128__(0xE700000000000000, 0x65727574616546));
      uint64_t v33 = (unsigned char *)v48;
      if (v50) {
        goto LABEL_12;
      }
      uint64_t v51 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<String>);
      uint64_t v52 = (void *)swift_initStackObject(v51, v68);
      v52[2] = 1;
      v52[3] = 2;
      uint64_t v53 = *(int *)(v79 + 24);
      uint64_t v54 = *(void *)(v48 + v53 + 8);
      v52[4] = *(void *)(v48 + v53);
      v52[5] = v54;
      swift_bridgeObjectRetain(v54);
      DataFrame.validateContainsColumns(_:context:)((Swift::OpaquePointer)v52, (Swift::String)__PAIR128__(0xE500000000000000, 0x6C6562614CLL));
      if (v50)
      {
        swift_setDeallocating(v52);
        specialized _ContiguousArrayStorage.__deallocating_deinit();
LABEL_12:
        uint64_t v55 = v84;
        uint64_t v56 = v85;
        uint64_t v57 = v86;
        void *v84 = v50;
        v55[1] = 0;
        *((unsigned char *)v55 + 16) = 1;
      }
      else
      {
        swift_setDeallocating(v52);
        specialized _ContiguousArrayStorage.__deallocating_deinit();
        TreeRegressorModel.computeMetrics(on:)(v49);
        uint64_t v56 = v85;
        uint64_t v57 = v86;
      }
      (*(void (**)(uint64_t, uint64_t))(v56 + 8))(v49, v57);
      uint64_t v47 = type metadata accessor for MLRandomForestRegressor;
LABEL_22:
      uint64_t v60 = (uint64_t)v33;
      return outlined destroy of MLActivityClassifier.ModelParameters(v60, v47);
    case 3u:
      int64_t v58 = (uint64_t)v71;
      outlined init with take of MLClassifierMetrics((uint64_t)v67, (uint64_t)v71, type metadata accessor for MLLinearRegressor);
      uint64_t v81 = v28;
      int64_t v82 = v29 & 1;
      outlined copy of Result<_DataTable, Error>(v28, v29);
      uint64_t v59 = (uint64_t)v75;
      DataFrame.init(_:)((uint64_t)&v81);
      MLLinearRegressor.evaluation(on:)(v59);
      (*(void (**)(uint64_t, uint64_t))(v85 + 8))(v59, v86);
      uint64_t v60 = v58;
      uint64_t v47 = type metadata accessor for MLLinearRegressor;
      return outlined destroy of MLActivityClassifier.ModelParameters(v60, v47);
  }
}

uint64_t MLRegressor.write(to:metadata:)(uint64_t a1, uint64_t *a2)
{
  uint64_t v34 = v2;
  uint64_t v39 = a1;
  int64_t v3 = *(void *)(*(void *)(type metadata accessor for MLLinearRegressor(0) - 8) + 64);
  int64_t v4 = alloca(v3);
  char v5 = alloca(v3);
  uint64_t v35 = &v24;
  int64_t v6 = *(void *)(*(void *)(type metadata accessor for MLRandomForestRegressor(0) - 8) + 64);
  int64_t v7 = alloca(v6);
  uint64_t v8 = alloca(v6);
  uint64_t v36 = &v24;
  int64_t v9 = *(void *)(*(void *)(type metadata accessor for MLDecisionTreeRegressor(0) - 8) + 64);
  int64_t v10 = alloca(v9);
  char v11 = alloca(v9);
  uint64_t v37 = &v24;
  int64_t v12 = *(void *)(*(void *)(type metadata accessor for MLBoostedTreeRegressor(0) - 8) + 64);
  int64_t v13 = alloca(v12);
  uint64_t v14 = alloca(v12);
  uint64_t v38 = &v24;
  uint64_t v15 = type metadata accessor for MLRegressor(0);
  int64_t v16 = *(void *)(*(void *)(v15 - 8) + 64);
  uint64_t v17 = alloca(v16);
  int64_t v18 = alloca(v16);
  uint64_t v19 = *a2;
  uint64_t v46 = a2[1];
  uint64_t v45 = a2[2];
  uint64_t v44 = a2[3];
  uint64_t v43 = a2[4];
  uint64_t v42 = a2[5];
  uint64_t v41 = a2[6];
  uint64_t v40 = a2[7];
  uint64_t v20 = a2[8];
  outlined init with copy of MLRegressor(v34, (uint64_t)&v24);
  switch(swift_getEnumCaseMultiPayload(&v24, v15))
  {
    case 0u:
      uint64_t v21 = type metadata accessor for MLBoostedTreeRegressor;
      uint64_t v22 = (uint64_t)v38;
      outlined init with take of MLClassifierMetrics((uint64_t)&v24, (uint64_t)v38, type metadata accessor for MLBoostedTreeRegressor);
      uint64_t v25 = v19;
      uint64_t v26 = v46;
      uint64_t v27 = v45;
      uint64_t v28 = v44;
      uint64_t v29 = v43;
      uint64_t v30 = v42;
      uint64_t v31 = v41;
      uint64_t v32 = v40;
      uint64_t v33 = v20;
      MLBoostedTreeRegressor.write(to:metadata:)(v39, &v25);
      break;
    case 1u:
      uint64_t v21 = type metadata accessor for MLDecisionTreeRegressor;
      uint64_t v22 = (uint64_t)v37;
      outlined init with take of MLClassifierMetrics((uint64_t)&v24, (uint64_t)v37, type metadata accessor for MLDecisionTreeRegressor);
      uint64_t v25 = v19;
      uint64_t v26 = v46;
      uint64_t v27 = v45;
      uint64_t v28 = v44;
      uint64_t v29 = v43;
      uint64_t v30 = v42;
      uint64_t v31 = v41;
      uint64_t v32 = v40;
      uint64_t v33 = v20;
      MLDecisionTreeRegressor.write(to:metadata:)(v39, &v25);
      break;
    case 2u:
      uint64_t v21 = type metadata accessor for MLRandomForestRegressor;
      uint64_t v22 = (uint64_t)v36;
      outlined init with take of MLClassifierMetrics((uint64_t)&v24, (uint64_t)v36, type metadata accessor for MLRandomForestRegressor);
      uint64_t v25 = v19;
      uint64_t v26 = v46;
      uint64_t v27 = v45;
      uint64_t v28 = v44;
      uint64_t v29 = v43;
      uint64_t v30 = v42;
      uint64_t v31 = v41;
      uint64_t v32 = v40;
      uint64_t v33 = v20;
      MLRandomForestRegressor.write(to:metadata:)(v39, &v25);
      break;
    case 3u:
      uint64_t v21 = type metadata accessor for MLLinearRegressor;
      uint64_t v22 = (uint64_t)v35;
      outlined init with take of MLClassifierMetrics((uint64_t)&v24, (uint64_t)v35, type metadata accessor for MLLinearRegressor);
      uint64_t v25 = v19;
      uint64_t v26 = v46;
      uint64_t v27 = v45;
      uint64_t v28 = v44;
      uint64_t v29 = v43;
      uint64_t v30 = v42;
      uint64_t v31 = v41;
      uint64_t v32 = v40;
      uint64_t v33 = v20;
      MLLinearRegressor.write(to:metadata:)(v39, &v25);
      break;
  }
  return outlined destroy of MLActivityClassifier.ModelParameters(v22, v21);
}

uint64_t MLRegressor.write(toFile:metadata:)(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v74 = v3;
  uint64_t v69 = v4;
  uint64_t v75 = a2;
  uint64_t v76 = a1;
  int64_t v6 = *(void *)(*(void *)(type metadata accessor for MLLinearRegressor(0) - 8) + 64);
  int64_t v7 = alloca(v6);
  uint64_t v8 = alloca(v6);
  BOOL v89 = &v59;
  int64_t v9 = *(void *)(*(void *)(type metadata accessor for MLRandomForestRegressor(0) - 8) + 64);
  int64_t v10 = alloca(v9);
  char v11 = alloca(v9);
  uint64_t v90 = &v59;
  int64_t v12 = *(void *)(*(void *)(type metadata accessor for MLDecisionTreeRegressor(0) - 8) + 64);
  int64_t v13 = alloca(v12);
  uint64_t v14 = alloca(v12);
  uint64_t v91 = &v59;
  uint64_t v15 = type metadata accessor for URL.DirectoryHint(0);
  uint64_t v79 = *(void *)(v15 - 8);
  int64_t v16 = *(void *)(v79 + 64);
  uint64_t v17 = alloca(v16);
  int64_t v18 = alloca(v16);
  uint64_t v77 = &v59;
  int64_t v19 = *(void *)(*(void *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for URL?)
                              - 8)
                  + 64);
  uint64_t v20 = alloca(v19);
  uint64_t v21 = alloca(v19);
  uint64_t v78 = &v59;
  uint64_t v94 = type metadata accessor for URL(0);
  uint64_t v93 = *(void *)(v94 - 8);
  int64_t v22 = *(void *)(v93 + 64);
  uint64_t v23 = alloca(v22);
  uint64_t v24 = alloca(v22);
  uint64_t v70 = &v59;
  uint64_t v25 = alloca(v22);
  uint64_t v26 = alloca(v22);
  uint64_t v71 = &v59;
  uint64_t v27 = alloca(v22);
  uint64_t v28 = alloca(v22);
  uint64_t v72 = &v59;
  uint64_t v29 = alloca(v22);
  uint64_t v30 = alloca(v22);
  uint64_t v73 = &v59;
  int64_t v31 = *(void *)(*(void *)(type metadata accessor for MLBoostedTreeRegressor(0) - 8) + 64);
  uint64_t v32 = alloca(v31);
  uint64_t v33 = alloca(v31);
  uint64_t v92 = &v59;
  uint64_t v34 = type metadata accessor for MLRegressor(0);
  int64_t v35 = *(void *)(*(void *)(v34 - 8) + 64);
  uint64_t v36 = alloca(v35);
  uint64_t v37 = alloca(v35);
  uint64_t v87 = *a3;
  uint64_t v86 = a3[1];
  uint64_t v85 = a3[2];
  uint64_t v84 = a3[3];
  uint64_t v83 = a3[4];
  uint64_t v82 = a3[5];
  uint64_t v81 = a3[6];
  uint64_t v80 = a3[7];
  uint64_t v38 = a3[8];
  outlined init with copy of MLRegressor(v69, (uint64_t)&v59);
  int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload(&v59, v34);
  uint64_t v88 = v38;
  switch(EnumCaseMultiPayload)
  {
    case 0:
      outlined init with take of MLClassifierMetrics((uint64_t)&v59, (uint64_t)v92, type metadata accessor for MLBoostedTreeRegressor);
      uint64_t v40 = (uint64_t)v78;
      __swift_storeEnumTagSinglePayload((uint64_t)v78, 1, 1, v94);
      uint64_t v41 = v77;
      (*(void (**)(uint64_t *, void, uint64_t))(v79 + 104))(v77, enum case for URL.DirectoryHint.inferFromPath(_:), v15);
      uint64_t v42 = v75;
      swift_bridgeObjectRetain(v75);
      uint64_t v43 = (uint64_t)v73;
      URL.init(filePath:directoryHint:relativeTo:)(v76, v42, v41, v40);
      uint64_t v60 = v87;
      uint64_t v61 = v86;
      uint64_t v62 = v85;
      uint64_t v63 = v84;
      uint64_t v64 = v83;
      uint64_t v65 = v82;
      uint64_t v66 = v81;
      uint64_t v67 = v80;
      uint64_t v68 = v88;
      MLBoostedTreeRegressor.write(to:metadata:)(v43, &v60);
      (*(void (**)(uint64_t, uint64_t))(v93 + 8))(v43, v94);
      uint64_t v44 = type metadata accessor for MLBoostedTreeRegressor;
      uint64_t v45 = (uint64_t)v92;
      break;
    case 1:
      outlined init with take of MLClassifierMetrics((uint64_t)&v59, (uint64_t)v91, type metadata accessor for MLDecisionTreeRegressor);
      uint64_t v54 = (uint64_t)v78;
      __swift_storeEnumTagSinglePayload((uint64_t)v78, 1, 1, v94);
      uint64_t v55 = v77;
      (*(void (**)(uint64_t *, void, uint64_t))(v79 + 104))(v77, enum case for URL.DirectoryHint.inferFromPath(_:), v15);
      uint64_t v56 = v75;
      swift_bridgeObjectRetain(v75);
      uint64_t v57 = (uint64_t)v72;
      URL.init(filePath:directoryHint:relativeTo:)(v76, v56, v55, v54);
      uint64_t v60 = v87;
      uint64_t v61 = v86;
      uint64_t v62 = v85;
      uint64_t v63 = v84;
      uint64_t v64 = v83;
      uint64_t v65 = v82;
      uint64_t v66 = v81;
      uint64_t v67 = v80;
      uint64_t v68 = v88;
      MLDecisionTreeRegressor.write(to:metadata:)(v57, &v60);
      (*(void (**)(uint64_t, uint64_t))(v93 + 8))(v57, v94);
      uint64_t v44 = type metadata accessor for MLDecisionTreeRegressor;
      uint64_t v45 = (uint64_t)v91;
      break;
    case 2:
      outlined init with take of MLClassifierMetrics((uint64_t)&v59, (uint64_t)v90, type metadata accessor for MLRandomForestRegressor);
      uint64_t v46 = (uint64_t)v78;
      __swift_storeEnumTagSinglePayload((uint64_t)v78, 1, 1, v94);
      uint64_t v47 = v77;
      (*(void (**)(uint64_t *, void, uint64_t))(v79 + 104))(v77, enum case for URL.DirectoryHint.inferFromPath(_:), v15);
      uint64_t v48 = v75;
      swift_bridgeObjectRetain(v75);
      uint64_t v49 = (uint64_t)v71;
      URL.init(filePath:directoryHint:relativeTo:)(v76, v48, v47, v46);
      uint64_t v60 = v87;
      uint64_t v61 = v86;
      uint64_t v62 = v85;
      uint64_t v63 = v84;
      uint64_t v64 = v83;
      uint64_t v65 = v82;
      uint64_t v66 = v81;
      uint64_t v67 = v80;
      uint64_t v68 = v88;
      MLRandomForestRegressor.write(to:metadata:)(v49, &v60);
      (*(void (**)(uint64_t, uint64_t))(v93 + 8))(v49, v94);
      uint64_t v44 = type metadata accessor for MLRandomForestRegressor;
      uint64_t v45 = (uint64_t)v90;
      break;
    case 3:
      outlined init with take of MLClassifierMetrics((uint64_t)&v59, (uint64_t)v89, type metadata accessor for MLLinearRegressor);
      uint64_t v50 = (uint64_t)v78;
      __swift_storeEnumTagSinglePayload((uint64_t)v78, 1, 1, v94);
      uint64_t v51 = v77;
      (*(void (**)(uint64_t *, void, uint64_t))(v79 + 104))(v77, enum case for URL.DirectoryHint.inferFromPath(_:), v15);
      uint64_t v52 = v75;
      swift_bridgeObjectRetain(v75);
      uint64_t v53 = (uint64_t)v70;
      URL.init(filePath:directoryHint:relativeTo:)(v76, v52, v51, v50);
      uint64_t v60 = v87;
      uint64_t v61 = v86;
      uint64_t v62 = v85;
      uint64_t v63 = v84;
      uint64_t v64 = v83;
      uint64_t v65 = v82;
      uint64_t v66 = v81;
      uint64_t v67 = v80;
      uint64_t v68 = v88;
      MLLinearRegressor.write(to:metadata:)(v53, &v60);
      (*(void (**)(uint64_t, uint64_t))(v93 + 8))(v53, v94);
      uint64_t v44 = type metadata accessor for MLLinearRegressor;
      uint64_t v45 = (uint64_t)v89;
      break;
  }
  return outlined destroy of MLActivityClassifier.ModelParameters(v45, v44);
}

id MLRegressor.model.getter()
{
  uint64_t v27 = v0;
  uint64_t v28 = type metadata accessor for MLLinearRegressor(0);
  int64_t v1 = *(void *)(*(void *)(v28 - 8) + 64);
  uint64_t v2 = alloca(v1);
  uint64_t v3 = alloca(v1);
  uint64_t v29 = v26;
  uint64_t v30 = type metadata accessor for MLRandomForestRegressor(0);
  int64_t v4 = *(void *)(*(void *)(v30 - 8) + 64);
  char v5 = alloca(v4);
  int64_t v6 = alloca(v4);
  int64_t v31 = v26;
  uint64_t v7 = type metadata accessor for MLDecisionTreeRegressor(0);
  int64_t v8 = *(void *)(*(void *)(v7 - 8) + 64);
  int64_t v9 = alloca(v8);
  int64_t v10 = alloca(v8);
  uint64_t v32 = v26;
  uint64_t v11 = type metadata accessor for MLBoostedTreeRegressor(0);
  int64_t v12 = *(void *)(*(void *)(v11 - 8) + 64);
  int64_t v13 = alloca(v12);
  uint64_t v14 = alloca(v12);
  uint64_t v15 = type metadata accessor for MLRegressor(0);
  int64_t v16 = *(void *)(*(void *)(v15 - 8) + 64);
  uint64_t v17 = alloca(v16);
  int64_t v18 = alloca(v16);
  outlined init with copy of MLRegressor(v27, (uint64_t)v26);
  switch(swift_getEnumCaseMultiPayload(v26, v15))
  {
    case 0u:
      outlined init with take of MLClassifierMetrics((uint64_t)v26, (uint64_t)v26, type metadata accessor for MLBoostedTreeRegressor);
      id v19 = *(id *)&v26[*(int *)(v11 + 20)];
      outlined destroy of MLActivityClassifier.ModelParameters((uint64_t)v26, type metadata accessor for MLBoostedTreeRegressor);
      return v19;
    case 1u:
      uint64_t v21 = type metadata accessor for MLDecisionTreeRegressor;
      uint64_t v22 = (uint64_t)v32;
      outlined init with take of MLClassifierMetrics((uint64_t)v26, (uint64_t)v32, type metadata accessor for MLDecisionTreeRegressor);
      uint64_t v24 = *(int *)(v7 + 20);
      goto LABEL_7;
    case 2u:
      uint64_t v21 = type metadata accessor for MLRandomForestRegressor;
      uint64_t v22 = (uint64_t)v31;
      outlined init with take of MLClassifierMetrics((uint64_t)v26, (uint64_t)v31, type metadata accessor for MLRandomForestRegressor);
      uint64_t v23 = v30;
      goto LABEL_5;
    case 3u:
      uint64_t v21 = type metadata accessor for MLLinearRegressor;
      uint64_t v22 = (uint64_t)v29;
      outlined init with take of MLClassifierMetrics((uint64_t)v26, (uint64_t)v29, type metadata accessor for MLLinearRegressor);
      uint64_t v23 = v28;
LABEL_5:
      uint64_t v24 = *(int *)(v23 + 20);
LABEL_7:
      id v25 = *(id *)(v22 + v24);
      outlined destroy of MLActivityClassifier.ModelParameters(v22, v21);
      return v25;
  }
}

uint64_t *MLRegressor.trainingMetrics.getter()
{
  uint64_t v28 = v1;
  uint64_t v34 = v0;
  uint64_t v30 = type metadata accessor for MLLinearRegressor(0);
  int64_t v2 = *(void *)(*(void *)(v30 - 8) + 64);
  uint64_t v3 = alloca(v2);
  int64_t v4 = alloca(v2);
  uint64_t v29 = &v28;
  uint64_t v32 = type metadata accessor for MLRandomForestRegressor(0);
  int64_t v5 = *(void *)(*(void *)(v32 - 8) + 64);
  int64_t v6 = alloca(v5);
  uint64_t v7 = alloca(v5);
  int64_t v31 = &v28;
  uint64_t v8 = type metadata accessor for MLDecisionTreeRegressor(0);
  int64_t v9 = *(void *)(*(void *)(v8 - 8) + 64);
  int64_t v10 = alloca(v9);
  uint64_t v11 = alloca(v9);
  uint64_t v33 = &v28;
  uint64_t v12 = type metadata accessor for MLBoostedTreeRegressor(0);
  int64_t v13 = *(void *)(*(void *)(v12 - 8) + 64);
  uint64_t v14 = alloca(v13);
  uint64_t v15 = alloca(v13);
  int64_t v16 = &v28;
  uint64_t v17 = type metadata accessor for MLRegressor(0);
  int64_t v18 = *(void *)(*(void *)(v17 - 8) + 64);
  id v19 = alloca(v18);
  uint64_t v20 = alloca(v18);
  outlined init with copy of MLRegressor(v28, (uint64_t)&v28);
  switch(swift_getEnumCaseMultiPayload(&v28, v17))
  {
    case 0u:
      uint64_t v21 = type metadata accessor for MLBoostedTreeRegressor;
      outlined init with take of MLClassifierMetrics((uint64_t)&v28, (uint64_t)&v28, type metadata accessor for MLBoostedTreeRegressor);
      uint64_t v22 = *(int *)(v12 + 36);
      break;
    case 1u:
      uint64_t v21 = type metadata accessor for MLDecisionTreeRegressor;
      int64_t v16 = v33;
      outlined init with take of MLClassifierMetrics((uint64_t)&v28, (uint64_t)v33, type metadata accessor for MLDecisionTreeRegressor);
      uint64_t v22 = *(int *)(v8 + 36);
      break;
    case 2u:
      uint64_t v21 = type metadata accessor for MLRandomForestRegressor;
      int64_t v16 = v31;
      outlined init with take of MLClassifierMetrics((uint64_t)&v28, (uint64_t)v31, type metadata accessor for MLRandomForestRegressor);
      uint64_t v23 = v32;
      goto LABEL_5;
    case 3u:
      uint64_t v21 = type metadata accessor for MLLinearRegressor;
      int64_t v16 = v29;
      outlined init with take of MLClassifierMetrics((uint64_t)&v28, (uint64_t)v29, type metadata accessor for MLLinearRegressor);
      uint64_t v23 = v30;
LABEL_5:
      uint64_t v22 = *(int *)(v23 + 36);
      break;
  }
  uint64_t v24 = *(uint64_t *)((char *)v16 + v22);
  uint64_t v25 = *(uint64_t *)((char *)v16 + v22 + 8);
  int v26 = *(_DWORD *)((char *)v16 + v22 + 16);
  outlined copy of Result<_RegressorMetrics, Error>(v24, v25, v26);
  outlined destroy of MLActivityClassifier.ModelParameters((uint64_t)v16, v21);
  uint64_t result = v34;
  uint64_t *v34 = v24;
  result[1] = v25;
  *((unsigned char *)result + 16) = v26 & 1;
  return result;
}

uint64_t *MLRegressor.validationMetrics.getter()
{
  uint64_t v28 = v1;
  uint64_t v34 = v0;
  uint64_t v30 = type metadata accessor for MLLinearRegressor(0);
  int64_t v2 = *(void *)(*(void *)(v30 - 8) + 64);
  uint64_t v3 = alloca(v2);
  int64_t v4 = alloca(v2);
  uint64_t v29 = &v28;
  uint64_t v32 = type metadata accessor for MLRandomForestRegressor(0);
  int64_t v5 = *(void *)(*(void *)(v32 - 8) + 64);
  int64_t v6 = alloca(v5);
  uint64_t v7 = alloca(v5);
  int64_t v31 = &v28;
  uint64_t v8 = type metadata accessor for MLDecisionTreeRegressor(0);
  int64_t v9 = *(void *)(*(void *)(v8 - 8) + 64);
  int64_t v10 = alloca(v9);
  uint64_t v11 = alloca(v9);
  uint64_t v33 = &v28;
  uint64_t v12 = type metadata accessor for MLBoostedTreeRegressor(0);
  int64_t v13 = *(void *)(*(void *)(v12 - 8) + 64);
  uint64_t v14 = alloca(v13);
  uint64_t v15 = alloca(v13);
  int64_t v16 = &v28;
  uint64_t v17 = type metadata accessor for MLRegressor(0);
  int64_t v18 = *(void *)(*(void *)(v17 - 8) + 64);
  id v19 = alloca(v18);
  uint64_t v20 = alloca(v18);
  outlined init with copy of MLRegressor(v28, (uint64_t)&v28);
  switch(swift_getEnumCaseMultiPayload(&v28, v17))
  {
    case 0u:
      uint64_t v21 = type metadata accessor for MLBoostedTreeRegressor;
      outlined init with take of MLClassifierMetrics((uint64_t)&v28, (uint64_t)&v28, type metadata accessor for MLBoostedTreeRegressor);
      uint64_t v22 = *(int *)(v12 + 40);
      break;
    case 1u:
      uint64_t v21 = type metadata accessor for MLDecisionTreeRegressor;
      int64_t v16 = v33;
      outlined init with take of MLClassifierMetrics((uint64_t)&v28, (uint64_t)v33, type metadata accessor for MLDecisionTreeRegressor);
      uint64_t v22 = *(int *)(v8 + 40);
      break;
    case 2u:
      uint64_t v21 = type metadata accessor for MLRandomForestRegressor;
      int64_t v16 = v31;
      outlined init with take of MLClassifierMetrics((uint64_t)&v28, (uint64_t)v31, type metadata accessor for MLRandomForestRegressor);
      uint64_t v23 = v32;
      goto LABEL_5;
    case 3u:
      uint64_t v21 = type metadata accessor for MLLinearRegressor;
      int64_t v16 = v29;
      outlined init with take of MLClassifierMetrics((uint64_t)&v28, (uint64_t)v29, type metadata accessor for MLLinearRegressor);
      uint64_t v23 = v30;
LABEL_5:
      uint64_t v22 = *(int *)(v23 + 40);
      break;
  }
  uint64_t v24 = *(uint64_t *)((char *)v16 + v22);
  uint64_t v25 = *(uint64_t *)((char *)v16 + v22 + 8);
  int v26 = *(_DWORD *)((char *)v16 + v22 + 16);
  outlined copy of Result<_RegressorMetrics, Error>(v24, v25, v26);
  outlined destroy of MLActivityClassifier.ModelParameters((uint64_t)v16, v21);
  uint64_t result = v34;
  uint64_t *v34 = v24;
  result[1] = v25;
  *((unsigned char *)result + 16) = v26 & 1;
  return result;
}

uint64_t MLRegressor.targetColumn.getter()
{
  uint64_t v29 = v0;
  uint64_t v30 = type metadata accessor for MLLinearRegressor(0);
  int64_t v1 = *(void *)(*(void *)(v30 - 8) + 64);
  int64_t v2 = alloca(v1);
  uint64_t v3 = alloca(v1);
  int64_t v31 = v28;
  uint64_t v32 = type metadata accessor for MLRandomForestRegressor(0);
  int64_t v4 = *(void *)(*(void *)(v32 - 8) + 64);
  int64_t v5 = alloca(v4);
  int64_t v6 = alloca(v4);
  uint64_t v33 = v28;
  uint64_t v7 = type metadata accessor for MLDecisionTreeRegressor(0);
  int64_t v8 = *(void *)(*(void *)(v7 - 8) + 64);
  int64_t v9 = alloca(v8);
  int64_t v10 = alloca(v8);
  uint64_t v34 = v28;
  uint64_t v11 = type metadata accessor for MLBoostedTreeRegressor(0);
  int64_t v12 = *(void *)(*(void *)(v11 - 8) + 64);
  int64_t v13 = alloca(v12);
  uint64_t v14 = alloca(v12);
  uint64_t v15 = type metadata accessor for MLRegressor(0);
  int64_t v16 = *(void *)(*(void *)(v15 - 8) + 64);
  uint64_t v17 = alloca(v16);
  int64_t v18 = alloca(v16);
  outlined init with copy of MLRegressor(v29, (uint64_t)v28);
  switch(swift_getEnumCaseMultiPayload(v28, v15))
  {
    case 0u:
      outlined init with take of MLClassifierMetrics((uint64_t)v28, (uint64_t)v28, type metadata accessor for MLBoostedTreeRegressor);
      uint64_t v19 = *(int *)(v11 + 24);
      uint64_t v20 = *(void *)&v28[v19];
      swift_bridgeObjectRetain(*(void *)&v28[v19 + 8]);
      uint64_t v21 = v28;
      uint64_t v22 = type metadata accessor for MLBoostedTreeRegressor;
      goto LABEL_8;
    case 1u:
      uint64_t v23 = type metadata accessor for MLDecisionTreeRegressor;
      uint64_t v24 = (uint64_t)v34;
      outlined init with take of MLClassifierMetrics((uint64_t)v28, (uint64_t)v34, type metadata accessor for MLDecisionTreeRegressor);
      uint64_t v26 = *(int *)(v7 + 24);
      goto LABEL_7;
    case 2u:
      uint64_t v23 = type metadata accessor for MLRandomForestRegressor;
      uint64_t v24 = (uint64_t)v33;
      outlined init with take of MLClassifierMetrics((uint64_t)v28, (uint64_t)v33, type metadata accessor for MLRandomForestRegressor);
      uint64_t v25 = v32;
      goto LABEL_5;
    case 3u:
      uint64_t v23 = type metadata accessor for MLLinearRegressor;
      uint64_t v24 = (uint64_t)v31;
      outlined init with take of MLClassifierMetrics((uint64_t)v28, (uint64_t)v31, type metadata accessor for MLLinearRegressor);
      uint64_t v25 = v30;
LABEL_5:
      uint64_t v26 = *(int *)(v25 + 24);
LABEL_7:
      uint64_t v20 = *(void *)(v24 + v26);
      swift_bridgeObjectRetain(*(void *)(v24 + v26 + 8));
      uint64_t v21 = (unsigned char *)v24;
      uint64_t v22 = v23;
LABEL_8:
      outlined destroy of MLActivityClassifier.ModelParameters((uint64_t)v21, v22);
      return v20;
  }
}

uint64_t MLRegressor.featureColumns.getter()
{
  uint64_t v28 = v0;
  uint64_t v29 = type metadata accessor for MLLinearRegressor(0);
  int64_t v1 = *(void *)(*(void *)(v29 - 8) + 64);
  int64_t v2 = alloca(v1);
  uint64_t v3 = alloca(v1);
  uint64_t v30 = v27;
  uint64_t v31 = type metadata accessor for MLRandomForestRegressor(0);
  int64_t v4 = *(void *)(*(void *)(v31 - 8) + 64);
  int64_t v5 = alloca(v4);
  int64_t v6 = alloca(v4);
  uint64_t v32 = v27;
  uint64_t v7 = type metadata accessor for MLDecisionTreeRegressor(0);
  int64_t v8 = *(void *)(*(void *)(v7 - 8) + 64);
  int64_t v9 = alloca(v8);
  int64_t v10 = alloca(v8);
  uint64_t v33 = v27;
  uint64_t v11 = type metadata accessor for MLBoostedTreeRegressor(0);
  int64_t v12 = *(void *)(*(void *)(v11 - 8) + 64);
  int64_t v13 = alloca(v12);
  uint64_t v14 = alloca(v12);
  uint64_t v15 = type metadata accessor for MLRegressor(0);
  int64_t v16 = *(void *)(*(void *)(v15 - 8) + 64);
  uint64_t v17 = alloca(v16);
  int64_t v18 = alloca(v16);
  outlined init with copy of MLRegressor(v28, (uint64_t)v27);
  switch(swift_getEnumCaseMultiPayload(v27, v15))
  {
    case 0u:
      outlined init with take of MLClassifierMetrics((uint64_t)v27, (uint64_t)v27, type metadata accessor for MLBoostedTreeRegressor);
      uint64_t v19 = *(void *)&v27[*(int *)(v11 + 28)];
      swift_bridgeObjectRetain(v19);
      uint64_t v20 = v27;
      uint64_t v21 = type metadata accessor for MLBoostedTreeRegressor;
      goto LABEL_8;
    case 1u:
      uint64_t v22 = type metadata accessor for MLDecisionTreeRegressor;
      uint64_t v23 = (uint64_t)v33;
      outlined init with take of MLClassifierMetrics((uint64_t)v27, (uint64_t)v33, type metadata accessor for MLDecisionTreeRegressor);
      uint64_t v25 = *(int *)(v7 + 28);
      goto LABEL_7;
    case 2u:
      uint64_t v22 = type metadata accessor for MLRandomForestRegressor;
      uint64_t v23 = (uint64_t)v32;
      outlined init with take of MLClassifierMetrics((uint64_t)v27, (uint64_t)v32, type metadata accessor for MLRandomForestRegressor);
      uint64_t v24 = v31;
      goto LABEL_5;
    case 3u:
      uint64_t v22 = type metadata accessor for MLLinearRegressor;
      uint64_t v23 = (uint64_t)v30;
      outlined init with take of MLClassifierMetrics((uint64_t)v27, (uint64_t)v30, type metadata accessor for MLLinearRegressor);
      uint64_t v24 = v29;
LABEL_5:
      uint64_t v25 = *(int *)(v24 + 28);
LABEL_7:
      uint64_t v19 = *(void *)(v23 + v25);
      swift_bridgeObjectRetain(v19);
      uint64_t v20 = (unsigned char *)v23;
      uint64_t v21 = v22;
LABEL_8:
      outlined destroy of MLActivityClassifier.ModelParameters((uint64_t)v20, v21);
      return v19;
  }
}

unint64_t MLRegressor.description.getter()
{
  int64_t v1 = *(void *)(*(void *)(type metadata accessor for MLLinearRegressor(0) - 8) + 64);
  int64_t v2 = alloca(v1);
  uint64_t v3 = alloca(v1);
  uint64_t v24 = &v23;
  int64_t v4 = *(void *)(*(void *)(type metadata accessor for MLRandomForestRegressor(0) - 8) + 64);
  int64_t v5 = alloca(v4);
  int64_t v6 = alloca(v4);
  uint64_t v25 = &v23;
  int64_t v7 = *(void *)(*(void *)(type metadata accessor for MLDecisionTreeRegressor(0) - 8) + 64);
  int64_t v8 = alloca(v7);
  int64_t v9 = alloca(v7);
  int64_t v10 = &v23;
  int64_t v11 = *(void *)(*(void *)(type metadata accessor for MLBoostedTreeRegressor(0) - 8) + 64);
  int64_t v12 = alloca(v11);
  int64_t v13 = alloca(v11);
  uint64_t v14 = type metadata accessor for MLRegressor(0);
  int64_t v15 = *(void *)(*(void *)(v14 - 8) + 64);
  int64_t v16 = alloca(v15);
  uint64_t v17 = alloca(v15);
  outlined init with copy of MLRegressor(v0, (uint64_t)&v23);
  switch(swift_getEnumCaseMultiPayload(&v23, v14))
  {
    case 0u:
      int64_t v18 = type metadata accessor for MLBoostedTreeRegressor;
      outlined init with take of MLClassifierMetrics((uint64_t)&v23, (uint64_t)&v23, type metadata accessor for MLBoostedTreeRegressor);
      unint64_t v19 = MLBoostedTreeRegressor.debugDescription.getter();
      uint64_t v20 = &v23;
      goto LABEL_7;
    case 1u:
      int64_t v18 = type metadata accessor for MLDecisionTreeRegressor;
      outlined init with take of MLClassifierMetrics((uint64_t)&v23, (uint64_t)&v23, type metadata accessor for MLDecisionTreeRegressor);
      unint64_t v21 = MLDecisionTreeRegressor.description.getter();
      goto LABEL_6;
    case 2u:
      int64_t v18 = type metadata accessor for MLRandomForestRegressor;
      int64_t v10 = v25;
      outlined init with take of MLClassifierMetrics((uint64_t)&v23, (uint64_t)v25, type metadata accessor for MLRandomForestRegressor);
      unint64_t v21 = MLRandomForestRegressor.description.getter();
      goto LABEL_6;
    case 3u:
      int64_t v18 = type metadata accessor for MLLinearRegressor;
      int64_t v10 = v24;
      outlined init with take of MLClassifierMetrics((uint64_t)&v23, (uint64_t)v24, type metadata accessor for MLLinearRegressor);
      unint64_t v21 = MLLinearRegressor.description.getter();
LABEL_6:
      unint64_t v19 = v21;
      uint64_t v20 = v10;
LABEL_7:
      outlined destroy of MLActivityClassifier.ModelParameters((uint64_t)v20, v18);
      return v19;
  }
}

unint64_t protocol witness for CustomStringConvertible.description.getter in conformance MLRegressor()
{
  return MLRegressor.description.getter();
}

unint64_t MLRegressor.debugDescription.getter()
{
  int64_t v1 = *(void *)(*(void *)(type metadata accessor for MLLinearRegressor(0) - 8) + 64);
  int64_t v2 = alloca(v1);
  uint64_t v3 = alloca(v1);
  uint64_t v24 = &v23;
  int64_t v4 = *(void *)(*(void *)(type metadata accessor for MLRandomForestRegressor(0) - 8) + 64);
  int64_t v5 = alloca(v4);
  int64_t v6 = alloca(v4);
  uint64_t v25 = &v23;
  int64_t v7 = *(void *)(*(void *)(type metadata accessor for MLDecisionTreeRegressor(0) - 8) + 64);
  int64_t v8 = alloca(v7);
  int64_t v9 = alloca(v7);
  int64_t v10 = &v23;
  int64_t v11 = *(void *)(*(void *)(type metadata accessor for MLBoostedTreeRegressor(0) - 8) + 64);
  int64_t v12 = alloca(v11);
  int64_t v13 = alloca(v11);
  uint64_t v14 = type metadata accessor for MLRegressor(0);
  int64_t v15 = *(void *)(*(void *)(v14 - 8) + 64);
  int64_t v16 = alloca(v15);
  uint64_t v17 = alloca(v15);
  outlined init with copy of MLRegressor(v0, (uint64_t)&v23);
  switch(swift_getEnumCaseMultiPayload(&v23, v14))
  {
    case 0u:
      int64_t v18 = type metadata accessor for MLBoostedTreeRegressor;
      outlined init with take of MLClassifierMetrics((uint64_t)&v23, (uint64_t)&v23, type metadata accessor for MLBoostedTreeRegressor);
      unint64_t v19 = MLBoostedTreeRegressor.debugDescription.getter();
      uint64_t v20 = &v23;
      goto LABEL_7;
    case 1u:
      int64_t v18 = type metadata accessor for MLDecisionTreeRegressor;
      outlined init with take of MLClassifierMetrics((uint64_t)&v23, (uint64_t)&v23, type metadata accessor for MLDecisionTreeRegressor);
      unint64_t v21 = MLDecisionTreeRegressor.description.getter();
      goto LABEL_6;
    case 2u:
      int64_t v18 = type metadata accessor for MLRandomForestRegressor;
      int64_t v10 = v25;
      outlined init with take of MLClassifierMetrics((uint64_t)&v23, (uint64_t)v25, type metadata accessor for MLRandomForestRegressor);
      unint64_t v21 = MLRandomForestRegressor.description.getter();
      goto LABEL_6;
    case 3u:
      int64_t v18 = type metadata accessor for MLLinearRegressor;
      int64_t v10 = v24;
      outlined init with take of MLClassifierMetrics((uint64_t)&v23, (uint64_t)v24, type metadata accessor for MLLinearRegressor);
      unint64_t v21 = MLLinearRegressor.description.getter();
LABEL_6:
      unint64_t v19 = v21;
      uint64_t v20 = v10;
LABEL_7:
      outlined destroy of MLActivityClassifier.ModelParameters((uint64_t)v20, v18);
      return v19;
  }
}

unint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance MLRegressor()
{
  return MLRegressor.debugDescription.getter();
}

uint64_t MLRegressor.playgroundDescription.getter()
{
  uint64_t v39 = v0;
  int64_t v2 = *(void *)(*(void *)(type metadata accessor for MLLinearRegressor(0) - 8) + 64);
  uint64_t v3 = alloca(v2);
  int64_t v4 = alloca(v2);
  uint64_t v37 = (uint64_t)&v37;
  int64_t v5 = *(void *)(*(void *)(type metadata accessor for MLRandomForestRegressor(0) - 8) + 64);
  int64_t v6 = alloca(v5);
  int64_t v7 = alloca(v5);
  uint64_t v38 = &v37;
  int64_t v8 = *(void *)(*(void *)(type metadata accessor for MLDecisionTreeRegressor(0) - 8) + 64);
  int64_t v9 = alloca(v8);
  int64_t v10 = alloca(v8);
  int64_t v11 = *(void *)(*(void *)(type metadata accessor for MLBoostedTreeRegressor(0) - 8) + 64);
  int64_t v12 = alloca(v11);
  int64_t v13 = alloca(v11);
  uint64_t v14 = type metadata accessor for MLRegressor(0);
  int64_t v15 = *(void *)(*(void *)(v14 - 8) + 64);
  int64_t v16 = alloca(v15);
  uint64_t v17 = alloca(v15);
  outlined init with copy of MLRegressor(v1, (uint64_t)&v37);
  switch(swift_getEnumCaseMultiPayload(&v37, v14))
  {
    case 0u:
      outlined init with take of MLClassifierMetrics((uint64_t)&v37, (uint64_t)&v37, type metadata accessor for MLBoostedTreeRegressor);
      uint64_t v18 = type metadata accessor for NSAttributedString();
      v19._uint64_t countAndFlagsBits = MLBoostedTreeRegressor.debugDescription.getter();
      v19._char object = v20;
      v21.super.Class isa = NSAttributedString.__allocating_init(string:)(v19).super.isa;
      uint64_t v22 = v39;
      v39[3].super.Class isa = (Class)v18;
      v22->super.Class isa = v21.super.isa;
      uint64_t v23 = &v37;
      uint64_t v24 = type metadata accessor for MLBoostedTreeRegressor;
      return outlined destroy of MLActivityClassifier.ModelParameters((uint64_t)v23, v24);
    case 1u:
      uint64_t v25 = type metadata accessor for MLDecisionTreeRegressor;
      outlined init with take of MLClassifierMetrics((uint64_t)&v37, (uint64_t)&v37, type metadata accessor for MLDecisionTreeRegressor);
      uint64_t v31 = type metadata accessor for NSAttributedString();
      v32._uint64_t countAndFlagsBits = MLDecisionTreeRegressor.description.getter();
      v32._char object = v33;
      v34.super.Class isa = NSAttributedString.__allocating_init(string:)(v32).super.isa;
      int64_t v35 = v39;
      v39[3].super.Class isa = (Class)v31;
      v35->super.Class isa = v34.super.isa;
      uint64_t v23 = &v37;
      goto LABEL_7;
    case 2u:
      uint64_t v25 = type metadata accessor for MLRandomForestRegressor;
      uint64_t v26 = (uint64_t)v38;
      outlined init with take of MLClassifierMetrics((uint64_t)&v37, (uint64_t)v38, type metadata accessor for MLRandomForestRegressor);
      uint64_t v27 = type metadata accessor for NSAttributedString();
      v28._uint64_t countAndFlagsBits = MLRandomForestRegressor.description.getter();
      goto LABEL_5;
    case 3u:
      uint64_t v25 = type metadata accessor for MLLinearRegressor;
      uint64_t v26 = v37;
      outlined init with take of MLClassifierMetrics((uint64_t)&v37, v37, type metadata accessor for MLLinearRegressor);
      uint64_t v27 = type metadata accessor for NSAttributedString();
      v28._uint64_t countAndFlagsBits = MLLinearRegressor.description.getter();
LABEL_5:
      v29.super.Class isa = NSAttributedString.__allocating_init(string:)(v28).super.isa;
      uint64_t v30 = v39;
      v39[3].super.Class isa = (Class)v27;
      v30->super.Class isa = v29.super.isa;
      uint64_t v23 = (uint64_t *)v26;
LABEL_7:
      uint64_t v24 = v25;
      return outlined destroy of MLActivityClassifier.ModelParameters((uint64_t)v23, v24);
  }
}

uint64_t protocol witness for CustomPlaygroundDisplayConvertible.playgroundDescription.getter in conformance MLRegressor()
{
  return MLRegressor.playgroundDescription.getter();
}

char *specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(char a1, int64_t a2, char a3, uint64_t a4)
{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, a4, &demangling cache variable for type metadata for _ContiguousArrayStorage<UInt64>, (void (*)(uint64_t, uint64_t, char *))specialized UnsafeMutablePointer.moveInitialize(from:count:));
}

{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, a4, &demangling cache variable for type metadata for _ContiguousArrayStorage<Int>, (void (*)(uint64_t, uint64_t, char *))specialized UnsafeMutablePointer.moveInitialize(from:count:));
}

{
  uint64_t v5;
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  long long v11;
  char *v12;

  int64_t v5 = a2;
  if (a3)
  {
    int64_t v6 = *(void *)(a4 + 24);
    if ((uint64_t)(v6 >> 1) >= a2)
    {
      int64_t v5 = *(void *)(a4 + 24) >> 1;
    }
    else
    {
      if ((uint64_t)((v6 >> 1) + 0x4000000000000000) < 0) {
        BUG();
      }
      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if (v7 > a2) {
        int64_t v5 = v7;
      }
    }
  }
  int64_t v8 = *(void *)(a4 + 16);
  if (v5 <= v8) {
    int64_t v5 = *(void *)(a4 + 16);
  }
  if (v5)
  {
    int64_t v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(windowKeypoints: MLMultiArray, range: Range<Int>)>);
    int64_t v10 = (char *)swift_allocObject(v9, 24 * v5 + 32, 7);
    int64_t v11 = (uint64_t)(_swift_stdlib_malloc_size_0(v10) - 32);
    *((void *)v10 + 2) = v8;
    *((void *)v10 + 3) = 2 * (v11 / 24);
  }
  else
  {
    int64_t v10 = (char *)_swiftEmptyArrayStorage;
  }
  int64_t v12 = v10 + 32;
  if (a1)
  {
    specialized UnsafeMutablePointer.moveInitialize(from:count:)((char *)(a4 + 32), v8, v12);
    *(void *)(a4 + 16) = 0;
    swift_bridgeObjectRelease(a4);
  }
  else
  {
    specialized _ArrayBuffer._copyContents(subRange:initializing:)(0, v8, (unint64_t)v12, a4);
  }
  return v10;
}

{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, a4, &demangling cache variable for type metadata for _ContiguousArrayStorage<Interaction>, (void (*)(uint64_t, uint64_t, char *))specialized UnsafeMutablePointer.moveInitialize(from:count:));
}

{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, a4, &demangling cache variable for type metadata for _ContiguousArrayStorage<ItemStatistics<Double>>, (void (*)(uint64_t, uint64_t, char *))specialized UnsafeMutablePointer.moveInitialize(from:count:));
}

{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, a4, &demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, Double)>, (void (*)(uint64_t, uint64_t, char *))specialized UnsafeMutablePointer.moveInitialize(from:count:));
}

{
  uint64_t v5;
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  long long v11;
  char *v12;

  int64_t v5 = a2;
  if (a3)
  {
    int64_t v6 = *(void *)(a4 + 24);
    if ((uint64_t)(v6 >> 1) >= a2)
    {
      int64_t v5 = *(void *)(a4 + 24) >> 1;
    }
    else
    {
      if ((uint64_t)((v6 >> 1) + 0x4000000000000000) < 0) {
        BUG();
      }
      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if (v7 > a2) {
        int64_t v5 = v7;
      }
    }
  }
  int64_t v8 = *(void *)(a4 + 16);
  if (v5 <= v8) {
    int64_t v5 = *(void *)(a4 + 16);
  }
  if (v5)
  {
    int64_t v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(user: MLRecommender.Identifier, item: MLRecommender.Identifier)>);
    int64_t v10 = (char *)swift_allocObject(v9, 48 * v5 + 32, 7);
    int64_t v11 = (uint64_t)(_swift_stdlib_malloc_size_0(v10) - 32);
    *((void *)v10 + 2) = v8;
    *((void *)v10 + 3) = 2 * (v11 / 48);
  }
  else
  {
    int64_t v10 = (char *)_swiftEmptyArrayStorage;
  }
  int64_t v12 = v10 + 32;
  if (a1)
  {
    specialized UnsafeMutablePointer.moveInitialize(from:count:)((char *)(a4 + 32), v8, v12);
    *(void *)(a4 + 16) = 0;
    swift_bridgeObjectRelease(a4);
  }
  else
  {
    specialized _ArrayBuffer._copyContents(subRange:initializing:)(0, v8, (unint64_t)v12, a4);
  }
  return v10;
}

{
  int64_t v5;
  unint64_t v6;
  int64_t v7;
  int64_t v8;
  uint64_t v9;
  char *v10;
  size_t v11;
  char *v12;

  int64_t v5 = a2;
  if (a3)
  {
    int64_t v6 = *(void *)(a4 + 24);
    if ((uint64_t)(v6 >> 1) >= a2)
    {
      int64_t v5 = *(void *)(a4 + 24) >> 1;
    }
    else
    {
      if ((uint64_t)((v6 >> 1) + 0x4000000000000000) < 0) {
        BUG();
      }
      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if (v7 > a2) {
        int64_t v5 = v7;
      }
    }
  }
  int64_t v8 = *(void *)(a4 + 16);
  if (v5 <= v8) {
    int64_t v5 = *(void *)(a4 + 16);
  }
  if (v5)
  {
    int64_t v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<UInt8>);
    int64_t v10 = (char *)swift_allocObject(v9, v5 + 32, 7);
    int64_t v11 = _swift_stdlib_malloc_size_0(v10);
    *((void *)v10 + 2) = v8;
    *((void *)v10 + 3) = 2 * v11 - 64;
  }
  else
  {
    int64_t v10 = (char *)_swiftEmptyArrayStorage;
  }
  int64_t v12 = v10 + 32;
  if (a1)
  {
    specialized UnsafeMutablePointer.moveInitialize(from:count:)((char *)(a4 + 32), v8, v12);
    *(void *)(a4 + 16) = 0;
    swift_bridgeObjectRelease(a4);
  }
  else
  {
    specialized _ArrayBuffer._copyContents(subRange:initializing:)(0, v8, v12, a4);
  }
  return v10;
}

{
  int64_t v5;
  unint64_t v7;
  int64_t v8;
  int64_t v9;
  uint64_t v10;
  char *v11;
  size_t v12;
  char *v13;
  char *v14;

  int64_t v5 = a2;
  if (a3)
  {
    int64_t v7 = *(void *)(a4 + 24);
    if ((uint64_t)(v7 >> 1) >= a2)
    {
      int64_t v5 = *(void *)(a4 + 24) >> 1;
    }
    else
    {
      if ((uint64_t)((v7 >> 1) + 0x4000000000000000) < 0) {
        BUG();
      }
      int64_t v8 = v7 & 0xFFFFFFFFFFFFFFFELL;
      if (v8 > a2) {
        int64_t v5 = v8;
      }
    }
  }
  int64_t v9 = *(void *)(a4 + 16);
  if (v5 <= v9) {
    int64_t v5 = *(void *)(a4 + 16);
  }
  if (v5)
  {
    int64_t v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<UInt8>);
    int64_t v11 = (char *)swift_allocObject(v10, v5 + 32, 7);
    int64_t v12 = _swift_stdlib_malloc_size(v11);
    *((void *)v11 + 2) = v9;
    *((void *)v11 + 3) = 2 * v12 - 64;
  }
  else
  {
    int64_t v11 = (char *)_swiftEmptyArrayStorage;
  }
  int64_t v13 = v11 + 32;
  uint64_t v14 = (char *)(a4 + 32);
  if (a1)
  {
    specialized UnsafeMutablePointer.moveInitialize(from:count:)(v14, v9, v13);
    *(void *)(a4 + 16) = 0;
  }
  else
  {
    specialized UnsafeMutablePointer.initialize(from:count:)(v14, v9, v13);
  }
  swift_bridgeObjectRelease(a4);
  return v11;
}

{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, a4, (void (*)(uint64_t, uint64_t, char *))specialized UnsafeMutablePointer.moveInitialize(from:count:));
}

char *specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(char a1, int64_t a2, char a3, uint64_t a4, uint64_t *a5, void (*a6)(uint64_t, uint64_t, char *))
{
  uint64_t v8 = a2;
  if (a3)
  {
    unint64_t v9 = *(void *)(a4 + 24);
    if ((uint64_t)(v9 >> 1) >= a2)
    {
      uint64_t v8 = *(void *)(a4 + 24) >> 1;
    }
    else
    {
      if ((uint64_t)((v9 >> 1) + 0x4000000000000000) < 0) {
        BUG();
      }
      int64_t v10 = v9 & 0xFFFFFFFFFFFFFFFELL;
      if (v10 > a2) {
        uint64_t v8 = v10;
      }
    }
  }
  uint64_t v11 = *(void *)(a4 + 16);
  if (v8 <= v11) {
    uint64_t v8 = *(void *)(a4 + 16);
  }
  if (v8)
  {
    uint64_t v12 = __swift_instantiateConcreteTypeFromMangledName(a5);
    int64_t v13 = (char *)swift_allocObject(v12, 8 * v8 + 32, 7);
    long long v14 = (uint64_t)(_swift_stdlib_malloc_size_0(v13) - 32);
    *((void *)v13 + 2) = v11;
    *((void *)v13 + 3) = 2 * (v14 / 8);
  }
  else
  {
    int64_t v13 = (char *)_swiftEmptyArrayStorage;
  }
  int64_t v15 = v13 + 32;
  if (a1)
  {
    a6(a4 + 32, v11, v15);
    *(void *)(a4 + 16) = 0;
    swift_bridgeObjectRelease(a4);
  }
  else
  {
    specialized _ArrayBuffer._copyContents(subRange:initializing:)(0, v11, v15, a4);
  }
  return v13;
}

{
  uint64_t v8;
  unint64_t v9;
  int64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  long long v14;
  char *v15;

  uint64_t v8 = a2;
  if (a3)
  {
    unint64_t v9 = *(void *)(a4 + 24);
    if ((uint64_t)(v9 >> 1) >= a2)
    {
      uint64_t v8 = *(void *)(a4 + 24) >> 1;
    }
    else
    {
      if ((uint64_t)((v9 >> 1) + 0x4000000000000000) < 0) {
        BUG();
      }
      int64_t v10 = v9 & 0xFFFFFFFFFFFFFFFELL;
      if (v10 > a2) {
        uint64_t v8 = v10;
      }
    }
  }
  uint64_t v11 = *(void *)(a4 + 16);
  if (v8 <= v11) {
    uint64_t v8 = *(void *)(a4 + 16);
  }
  if (v8)
  {
    uint64_t v12 = __swift_instantiateConcreteTypeFromMangledName(a5);
    int64_t v13 = (char *)swift_allocObject(v12, 16 * v8 + 32, 7);
    long long v14 = (uint64_t)(_swift_stdlib_malloc_size_0(v13) - 32);
    *((void *)v13 + 2) = v11;
    *((void *)v13 + 3) = 2 * (v14 / 16);
  }
  else
  {
    int64_t v13 = (char *)_swiftEmptyArrayStorage;
  }
  int64_t v15 = v13 + 32;
  if (a1)
  {
    a6(a4 + 32, v11, v15);
    *(void *)(a4 + 16) = 0;
    swift_bridgeObjectRelease(a4);
  }
  else
  {
    specialized _ArrayBuffer._copyContents(subRange:initializing:)(0, v11, v15, a4);
  }
  return v13;
}

void *specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(char a1, int64_t a2, char a3, uint64_t a4)
{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, a4, &demangling cache variable for type metadata for _ContiguousArrayStorage<Double>, (void (*)(void, int64_t, void *, uint64_t))specialized _ArrayBuffer._copyContents(subRange:initializing:), (void (*)(uint64_t, int64_t, void *))specialized UnsafeMutablePointer.moveInitialize(from:count:));
}

{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, a4, &demangling cache variable for type metadata for _ContiguousArrayStorage<String>, (void (*)(void, int64_t, void *, uint64_t))specialized _ArrayBuffer._copyContents(subRange:initializing:), (void (*)(uint64_t, int64_t, void *))specialized UnsafeMutablePointer.moveInitialize(from:count:));
}

{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, a4, &demangling cache variable for type metadata for _ContiguousArrayStorage<Column<[Float]>>, &demangling cache variable for type metadata for Column<[Float]>, (void (*)(uint64_t, uint64_t, unint64_t))specialized UnsafeMutablePointer.moveInitialize(from:count:));
}

{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, a4, &demangling cache variable for type metadata for _ContiguousArrayStorage<Float>, (void (*)(void, int64_t, void *, uint64_t))specialized _ArrayBuffer._copyContents(subRange:initializing:), (void (*)(uint64_t, int64_t, void *))specialized UnsafeMutablePointer.moveInitialize(from:count:));
}

{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, a4, &demangling cache variable for type metadata for _ContiguousArrayStorage<[Float]>, &demangling cache variable for type metadata for [Float], (void (*)(uint64_t, uint64_t, unint64_t))specialized UnsafeMutablePointer.moveInitialize(from:count:));
}

{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, a4, &demangling cache variable for type metadata for _ContiguousArrayStorage<Column<[Double]>>, &demangling cache variable for type metadata for Column<[Double]>, (void (*)(uint64_t, uint64_t, unint64_t))specialized UnsafeMutablePointer.moveInitialize(from:count:));
}

{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, a4, &demangling cache variable for type metadata for _ContiguousArrayStorage<[Double]>, &demangling cache variable for type metadata for [Double], (void (*)(uint64_t, uint64_t, unint64_t))specialized UnsafeMutablePointer.moveInitialize(from:count:));
}

{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, a4, &demangling cache variable for type metadata for _ContiguousArrayStorage<MLDataValue>, (uint64_t)&type metadata for MLDataValue, (void (*)(void, int64_t, void *, uint64_t, uint64_t))specialized _ArrayBuffer._copyContents(subRange:initializing:), (void (*)(uint64_t, int64_t, void *))specialized UnsafeMutablePointer.moveInitialize(from:count:));
}

{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, a4, &demangling cache variable for type metadata for _ContiguousArrayStorage<[Int]>, &demangling cache variable for type metadata for [Int], (void (*)(uint64_t, uint64_t, unint64_t))specialized UnsafeMutablePointer.moveInitialize(from:count:));
}

{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, a4, &demangling cache variable for type metadata for _ContiguousArrayStorage<[Tensor]>, &demangling cache variable for type metadata for [Tensor], (void (*)(uint64_t, uint64_t, unint64_t))specialized UnsafeMutablePointer.moveInitialize(from:count:));
}

{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, a4, &demangling cache variable for type metadata for _ContiguousArrayStorage<Character>, (void (*)(void, int64_t, void *, uint64_t))specialized _ArrayBuffer._copyContents(subRange:initializing:), (void (*)(uint64_t, int64_t, void *))specialized UnsafeMutablePointer.moveInitialize(from:count:));
}

{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, a4, &demangling cache variable for type metadata for _ContiguousArrayStorage<Layer>, &demangling cache variable for type metadata for Layer, (void (*)(uint64_t, uint64_t, unint64_t))specialized UnsafeMutablePointer.moveInitialize(from:count:));
}

{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, a4, &demangling cache variable for type metadata for _ContiguousArrayStorage<AnnotatedFeature<URL, String>>, &demangling cache variable for type metadata for AnnotatedFeature<URL, String>, (void (*)(uint64_t, uint64_t, unint64_t))specialized UnsafeMutablePointer.moveInitialize(from:count:));
}

{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, a4, &demangling cache variable for type metadata for _ContiguousArrayStorage<MLDataValue.MultiArrayType>, (void (*)(void, int64_t, void *, uint64_t))specialized _ArrayBuffer._copyContents(subRange:initializing:), (void (*)(uint64_t, int64_t, void *))specialized UnsafeMutablePointer.moveInitialize(from:count:));
}

{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, a4, &demangling cache variable for type metadata for _ContiguousArrayStorage<BlobMetadata>, (void (*)(void, int64_t, void *, uint64_t))specialized _ArrayBuffer._copyContents(subRange:initializing:), (void (*)(uint64_t, int64_t, void *))specialized UnsafeMutablePointer.moveInitialize(from:count:));
}

{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, a4, &demangling cache variable for type metadata for _ContiguousArrayStorage<[String]>, &demangling cache variable for type metadata for [String], (void (*)(uint64_t, uint64_t, unint64_t))specialized UnsafeMutablePointer.moveInitialize(from:count:));
}

{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, a4, &demangling cache variable for type metadata for _ContiguousArrayStorage<MLShapedArray<Double>>, &demangling cache variable for type metadata for MLShapedArray<Double>, (void (*)(uint64_t, uint64_t, unint64_t))specialized UnsafeMutablePointer.moveInitialize(from:count:));
}

{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, a4, &demangling cache variable for type metadata for _ContiguousArrayStorage<AnnotatedFeature<String, [MLObjectDetector.NormalizedAnnotation]>>, &demangling cache variable for type metadata for AnnotatedFeature<String, [MLObjectDetector.NormalizedAnnotation]>, (void (*)(uint64_t, uint64_t, unint64_t))specialized UnsafeMutablePointer.moveInitialize(from:count:));
}

{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, a4, &demangling cache variable for type metadata for _ContiguousArrayStorage<MLObjectDetector.AnnotatedPredictionForLabel>, (void (*)(void, int64_t, void *, uint64_t))specialized _ArrayBuffer._copyContents(subRange:initializing:), (void (*)(uint64_t, int64_t, void *))specialized UnsafeMutablePointer.moveInitialize(from:count:));
}

{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, a4, &demangling cache variable for type metadata for _ContiguousArrayStorage<Int?>, (void (*)(void, int64_t, void *, uint64_t))specialized _ArrayBuffer._copyContents(subRange:initializing:), (void (*)(uint64_t, int64_t, void *))specialized UnsafeMutablePointer.moveInitialize(from:count:));
}

{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, a4, &demangling cache variable for type metadata for _ContiguousArrayStorage<MLObjectDetector.ObjectAnnotation>, (void (*)(void, int64_t, void *, uint64_t))specialized _ArrayBuffer._copyContents(subRange:initializing:), (void (*)(uint64_t, int64_t, void *))specialized UnsafeMutablePointer.moveInitialize(from:count:));
}

{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, a4, &demangling cache variable for type metadata for _ContiguousArrayStorage<TabularClassificationTask>, &demangling cache variable for type metadata for TabularClassificationTask, (void (*)(uint64_t, uint64_t, unint64_t))specialized UnsafeMutablePointer.moveInitialize(from:count:));
}

{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, a4, &demangling cache variable for type metadata for _ContiguousArrayStorage<AnnotatedFeature<MLShapedArray<Float>, String>>, &demangling cache variable for type metadata for AnnotatedFeature<MLShapedArray<Float>, String>, (void (*)(uint64_t, uint64_t, unint64_t))specialized UnsafeMutablePointer.moveInitialize(from:count:));
}

{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, a4, &demangling cache variable for type metadata for _ContiguousArrayStorage<ItemStatistics<PearsonSimilarity.ItemScore>>, (void (*)(void, int64_t, void *, uint64_t))specialized _ArrayBuffer._copyContents(subRange:initializing:), (void (*)(uint64_t, int64_t, void *))specialized UnsafeMutablePointer.moveInitialize(from:count:));
}

{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, a4, &demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, Int)>, (void (*)(void, int64_t, void *, uint64_t))specialized _ArrayBuffer._copyContents(subRange:initializing:), (void (*)(uint64_t, int64_t, void *))specialized UnsafeMutablePointer.moveInitialize(from:count:));
}

{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, a4, &demangling cache variable for type metadata for _ContiguousArrayStorage<(user: MLRecommender.Identifier, item: MLRecommender.Identifier, rating: Double)>, &demangling cache variable for type metadata for (user: MLRecommender.Identifier, item: MLRecommender.Identifier, rating: Double), (void (*)(uint64_t, uint64_t, unint64_t))specialized UnsafeMutablePointer.moveInitialize(from:count:));
}

{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, a4, &demangling cache variable for type metadata for _ContiguousArrayStorage<(MLRecommender.Identifier, MLRecommender.Identifier, score: Double)>, &demangling cache variable for type metadata for (MLRecommender.Identifier, MLRecommender.Identifier, score: Double), (void (*)(uint64_t, uint64_t, unint64_t))specialized UnsafeMutablePointer.moveInitialize(from:count:));
}

{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, a4, &demangling cache variable for type metadata for _ContiguousArrayStorage<Recommendation<MLRecommender.Identifier, MLRecommender.Identifier>>, (void (*)(void, int64_t, void *, uint64_t))specialized _ArrayBuffer._copyContents(subRange:initializing:), (void (*)(uint64_t, int64_t, void *))specialized UnsafeMutablePointer.moveInitialize(from:count:));
}

{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, a4, &demangling cache variable for type metadata for _ContiguousArrayStorage<(Double, Double)>, (void (*)(void, int64_t, void *, uint64_t))specialized _ArrayBuffer._copyContents(subRange:initializing:), (void (*)(uint64_t, int64_t, void *))specialized UnsafeMutablePointer.moveInitialize(from:count:));
}

{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, a4, &demangling cache variable for type metadata for _ContiguousArrayStorage<RecommendationMetrics<MLRecommender.Identifier>>, (void (*)(void, int64_t, void *, uint64_t))specialized _ArrayBuffer._copyContents(subRange:initializing:), (void (*)(uint64_t, int64_t, void *))specialized UnsafeMutablePointer.moveInitialize(from:count:));
}

{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, a4, &demangling cache variable for type metadata for _ContiguousArrayStorage<MLRecommender.Identifier>, (uint64_t)&type metadata for MLRecommender.Identifier, (void (*)(void, int64_t, void *, uint64_t, uint64_t))specialized _ArrayBuffer._copyContents(subRange:initializing:), (void (*)(uint64_t, int64_t, void *))specialized UnsafeMutablePointer.moveInitialize(from:count:));
}

{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, a4, &demangling cache variable for type metadata for _ContiguousArrayStorage<(MLRecommender.Identifier, score: Double)>, (void (*)(void, int64_t, void *, uint64_t))specialized _ArrayBuffer._copyContents(subRange:initializing:), (void (*)(uint64_t, int64_t, void *))specialized UnsafeMutablePointer.moveInitialize(from:count:));
}

{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, a4, &demangling cache variable for type metadata for _ContiguousArrayStorage<ClassificationDistribution<Int>>, &demangling cache variable for type metadata for ClassificationDistribution<Int>, (void (*)(uint64_t, uint64_t, unint64_t))specialized UnsafeMutablePointer.moveInitialize(from:count:));
}

{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, a4, &demangling cache variable for type metadata for _ContiguousArrayStorage<ClassificationDistribution<String>>, &demangling cache variable for type metadata for ClassificationDistribution<String>, (void (*)(uint64_t, uint64_t, unint64_t))specialized UnsafeMutablePointer.moveInitialize(from:count:));
}

{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, a4, &demangling cache variable for type metadata for _ContiguousArrayStorage<AnnotatedPrediction<ClassificationDistribution<String>, String>>, &demangling cache variable for type metadata for AnnotatedPrediction<ClassificationDistribution<String>, String>, (void (*)(uint64_t, uint64_t, unint64_t))specialized UnsafeMutablePointer.moveInitialize(from:count:));
}

{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, a4, &demangling cache variable for type metadata for _ContiguousArrayStorage<AnnotatedFeature<CIImage, String>>, &demangling cache variable for type metadata for AnnotatedFeature<CIImage, String>, (void (*)(uint64_t, uint64_t, unint64_t))specialized UnsafeMutablePointer.moveInitialize(from:count:));
}

{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, a4, &demangling cache variable for type metadata for _ContiguousArrayStorage<MLShapedArray<Float>>, &demangling cache variable for type metadata for MLShapedArray<Float>, (void (*)(uint64_t, uint64_t, unint64_t))specialized UnsafeMutablePointer.moveInitialize(from:count:));
}

{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, a4, &demangling cache variable for type metadata for _ContiguousArrayStorage<(predicted: String, label: String)>, (void (*)(void, int64_t, void *, uint64_t))specialized _ArrayBuffer._copyContents(subRange:initializing:), (void (*)(uint64_t, int64_t, void *))specialized UnsafeMutablePointer.moveInitialize(from:count:));
}

{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, a4, &demangling cache variable for type metadata for _ContiguousArrayStorage<MLActionClassifier.Prediction>, (uint64_t)&type metadata for MLActionClassifier.Prediction, (void (*)(void, int64_t, void *, uint64_t, uint64_t))specialized _ArrayBuffer._copyContents(subRange:initializing:), (void (*)(uint64_t, int64_t, void *))specialized UnsafeMutablePointer.moveInitialize(from:count:));
}

{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, a4, &demangling cache variable for type metadata for _ContiguousArrayStorage<MLHandActionClassifier.Prediction>, (uint64_t)&type metadata for MLHandActionClassifier.Prediction, (void (*)(void, int64_t, void *, uint64_t, uint64_t))specialized _ArrayBuffer._copyContents(subRange:initializing:), (void (*)(uint64_t, int64_t, void *))specialized UnsafeMutablePointer.moveInitialize(from:count:));
}

{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, a4, &demangling cache variable for type metadata for _ContiguousArrayStorage<[String : [URL]]>, &demangling cache variable for type metadata for [String : [URL]], (void (*)(uint64_t, uint64_t, unint64_t))specialized UnsafeMutablePointer.moveInitialize(from:count:));
}

{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, a4, &demangling cache variable for type metadata for _ContiguousArrayStorage<ColumnDescriptor>, (void (*)(void, int64_t, void *, uint64_t))specialized _ArrayBuffer._copyContents(subRange:initializing:), (void (*)(uint64_t, int64_t, void *))specialized UnsafeMutablePointer.moveInitialize(from:count:));
}

{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, a4, &demangling cache variable for type metadata for _ContiguousArrayStorage<Any>, (void (*)(void, int64_t, void *, uint64_t))specialized _ArrayBuffer._copyContents(subRange:initializing:), (void (*)(uint64_t, int64_t, void *))specialized UnsafeMutablePointer.moveInitialize(from:count:));
}

{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, a4, &demangling cache variable for type metadata for _ContiguousArrayStorage<Any?>, (void (*)(void, int64_t, void *, uint64_t))specialized _ArrayBuffer._copyContents(subRange:initializing:), (void (*)(uint64_t, int64_t, void *))specialized UnsafeMutablePointer.moveInitialize(from:count:));
}

{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, a4, &demangling cache variable for type metadata for _ContiguousArrayStorage<Int32>, (void (*)(void, int64_t, void *, uint64_t))specialized _ArrayBuffer._copyContents(subRange:initializing:), (void (*)(uint64_t, int64_t, void *))specialized UnsafeMutablePointer.moveInitialize(from:count:));
}

{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, a4, &demangling cache variable for type metadata for _ContiguousArrayStorage<[String : Double]>, &demangling cache variable for type metadata for [String : Double], (void (*)(uint64_t, uint64_t, unint64_t))specialized UnsafeMutablePointer.moveInitialize(from:count:));
}

void *specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(char a1, int64_t a2, char a3, uint64_t a4, uint64_t *a5, void (*a6)(void, int64_t, void *, uint64_t), void (*a7)(uint64_t, int64_t, void *))
{
  int64_t v9 = a2;
  if (a3)
  {
    unint64_t v10 = *(void *)(a4 + 24);
    if ((uint64_t)(v10 >> 1) >= a2)
    {
      int64_t v9 = *(void *)(a4 + 24) >> 1;
    }
    else
    {
      if ((uint64_t)((v10 >> 1) + 0x4000000000000000) < 0) {
        BUG();
      }
      int64_t v11 = v10 & 0xFFFFFFFFFFFFFFFELL;
      if (v11 > a2) {
        int64_t v9 = v11;
      }
    }
  }
  int64_t v12 = *(void *)(a4 + 16);
  if (v9 <= v12) {
    int64_t v9 = *(void *)(a4 + 16);
  }
  if (v9)
  {
    uint64_t v13 = __swift_instantiateConcreteTypeFromMangledName(a5);
    long long v14 = (void *)swift_allocObject(v13, 8 * v9 + 32, 7);
    long long v15 = (uint64_t)(_swift_stdlib_malloc_size_0(v14) - 32);
    v14[2] = v12;
    v14[3] = 2 * (v15 / 8);
  }
  else
  {
    long long v14 = _swiftEmptyArrayStorage;
  }
  int64_t v16 = v14 + 4;
  if (a1)
  {
    a7(a4 + 32, v12, v16);
    *(void *)(a4 + 16) = 0;
    swift_bridgeObjectRelease(a4);
  }
  else
  {
    a6(0, v12, v16, a4);
  }
  return v14;
}

{
  int64_t v9;
  unint64_t v10;
  int64_t v11;
  int64_t v12;
  uint64_t v13;
  void *v14;
  long long v15;
  void *v16;

  int64_t v9 = a2;
  if (a3)
  {
    unint64_t v10 = *(void *)(a4 + 24);
    if ((uint64_t)(v10 >> 1) >= a2)
    {
      int64_t v9 = *(void *)(a4 + 24) >> 1;
    }
    else
    {
      if ((uint64_t)((v10 >> 1) + 0x4000000000000000) < 0) {
        BUG();
      }
      int64_t v11 = v10 & 0xFFFFFFFFFFFFFFFELL;
      if (v11 > a2) {
        int64_t v9 = v11;
      }
    }
  }
  int64_t v12 = *(void *)(a4 + 16);
  if (v9 <= v12) {
    int64_t v9 = *(void *)(a4 + 16);
  }
  if (v9)
  {
    uint64_t v13 = __swift_instantiateConcreteTypeFromMangledName(a5);
    long long v14 = (void *)swift_allocObject(v13, 16 * v9 + 32, 7);
    long long v15 = (uint64_t)(_swift_stdlib_malloc_size_0(v14) - 32);
    v14[2] = v12;
    v14[3] = 2 * (v15 / 16);
  }
  else
  {
    long long v14 = _swiftEmptyArrayStorage;
  }
  int64_t v16 = v14 + 4;
  if (a1)
  {
    a7(a4 + 32, v12, v16);
    *(void *)(a4 + 16) = 0;
    swift_bridgeObjectRelease(a4);
  }
  else
  {
    a6(0, v12, v16, a4);
  }
  return v14;
}

{
  int64_t v9;
  unint64_t v10;
  int64_t v11;
  int64_t v12;
  uint64_t v13;
  void *v14;
  long long v15;
  void *v16;

  int64_t v9 = a2;
  if (a3)
  {
    unint64_t v10 = *(void *)(a4 + 24);
    if ((uint64_t)(v10 >> 1) >= a2)
    {
      int64_t v9 = *(void *)(a4 + 24) >> 1;
    }
    else
    {
      if ((uint64_t)((v10 >> 1) + 0x4000000000000000) < 0) {
        BUG();
      }
      int64_t v11 = v10 & 0xFFFFFFFFFFFFFFFELL;
      if (v11 > a2) {
        int64_t v9 = v11;
      }
    }
  }
  int64_t v12 = *(void *)(a4 + 16);
  if (v9 <= v12) {
    int64_t v9 = *(void *)(a4 + 16);
  }
  if (v9)
  {
    uint64_t v13 = __swift_instantiateConcreteTypeFromMangledName(a5);
    long long v14 = (void *)swift_allocObject(v13, (v9 << 6) | 0x20, 7);
    long long v15 = (uint64_t)(_swift_stdlib_malloc_size_0(v14) - 32);
    v14[2] = v12;
    v14[3] = 2 * (v15 / 64);
  }
  else
  {
    long long v14 = _swiftEmptyArrayStorage;
  }
  int64_t v16 = v14 + 4;
  if (a1)
  {
    a7(a4 + 32, v12, v16);
    *(void *)(a4 + 16) = 0;
    swift_bridgeObjectRelease(a4);
  }
  else
  {
    a6(0, v12, v16, a4);
  }
  return v14;
}

{
  int64_t v9;
  unint64_t v10;
  int64_t v11;
  int64_t v12;
  uint64_t v13;
  void *v14;
  long long v15;
  void *v16;

  int64_t v9 = a2;
  if (a3)
  {
    unint64_t v10 = *(void *)(a4 + 24);
    if ((uint64_t)(v10 >> 1) >= a2)
    {
      int64_t v9 = *(void *)(a4 + 24) >> 1;
    }
    else
    {
      if ((uint64_t)((v10 >> 1) + 0x4000000000000000) < 0) {
        BUG();
      }
      int64_t v11 = v10 & 0xFFFFFFFFFFFFFFFELL;
      if (v11 > a2) {
        int64_t v9 = v11;
      }
    }
  }
  int64_t v12 = *(void *)(a4 + 16);
  if (v9 <= v12) {
    int64_t v9 = *(void *)(a4 + 16);
  }
  if (v9)
  {
    uint64_t v13 = __swift_instantiateConcreteTypeFromMangledName(a5);
    long long v14 = (void *)swift_allocObject(v13, 56 * v9 + 32, 7);
    long long v15 = (uint64_t)(_swift_stdlib_malloc_size_0(v14) - 32);
    v14[2] = v12;
    v14[3] = 2 * (v15 / 56);
  }
  else
  {
    long long v14 = _swiftEmptyArrayStorage;
  }
  int64_t v16 = v14 + 4;
  if (a1)
  {
    a7(a4 + 32, v12, v16);
    *(void *)(a4 + 16) = 0;
    swift_bridgeObjectRelease(a4);
  }
  else
  {
    a6(0, v12, v16, a4);
  }
  return v14;
}

{
  int64_t v9;
  unint64_t v10;
  int64_t v11;
  int64_t v12;
  uint64_t v13;
  void *v14;
  long long v15;
  void *v16;

  int64_t v9 = a2;
  if (a3)
  {
    unint64_t v10 = *(void *)(a4 + 24);
    if ((uint64_t)(v10 >> 1) >= a2)
    {
      int64_t v9 = *(void *)(a4 + 24) >> 1;
    }
    else
    {
      if ((uint64_t)((v10 >> 1) + 0x4000000000000000) < 0) {
        BUG();
      }
      int64_t v11 = v10 & 0xFFFFFFFFFFFFFFFELL;
      if (v11 > a2) {
        int64_t v9 = v11;
      }
    }
  }
  int64_t v12 = *(void *)(a4 + 16);
  if (v9 <= v12) {
    int64_t v9 = *(void *)(a4 + 16);
  }
  if (v9)
  {
    uint64_t v13 = __swift_instantiateConcreteTypeFromMangledName(a5);
    long long v14 = (void *)swift_allocObject(v13, 32 * v9 + 32, 7);
    long long v15 = (uint64_t)(_swift_stdlib_malloc_size_0(v14) - 32);
    v14[2] = v12;
    v14[3] = 2 * (v15 / 32);
  }
  else
  {
    long long v14 = _swiftEmptyArrayStorage;
  }
  int64_t v16 = v14 + 4;
  if (a1)
  {
    a7(a4 + 32, v12, v16);
    *(void *)(a4 + 16) = 0;
    swift_bridgeObjectRelease(a4);
  }
  else
  {
    a6(0, v12, v16, a4);
  }
  return v14;
}

{
  int64_t v9;
  unint64_t v10;
  int64_t v11;
  int64_t v12;
  uint64_t v13;
  void *v14;
  long long v15;
  void *v16;

  int64_t v9 = a2;
  if (a3)
  {
    unint64_t v10 = *(void *)(a4 + 24);
    if ((uint64_t)(v10 >> 1) >= a2)
    {
      int64_t v9 = *(void *)(a4 + 24) >> 1;
    }
    else
    {
      if ((uint64_t)((v10 >> 1) + 0x4000000000000000) < 0) {
        BUG();
      }
      int64_t v11 = v10 & 0xFFFFFFFFFFFFFFFELL;
      if (v11 > a2) {
        int64_t v9 = v11;
      }
    }
  }
  int64_t v12 = *(void *)(a4 + 16);
  if (v9 <= v12) {
    int64_t v9 = *(void *)(a4 + 16);
  }
  if (v9)
  {
    uint64_t v13 = __swift_instantiateConcreteTypeFromMangledName(a5);
    long long v14 = (void *)swift_allocObject(v13, 4 * v9 + 32, 7);
    long long v15 = (uint64_t)(_swift_stdlib_malloc_size_0(v14) - 32);
    v14[2] = v12;
    v14[3] = 2 * (v15 / 4);
  }
  else
  {
    long long v14 = _swiftEmptyArrayStorage;
  }
  int64_t v16 = v14 + 4;
  if (a1)
  {
    a7(a4 + 32, v12, v16);
    *(void *)(a4 + 16) = 0;
    swift_bridgeObjectRelease(a4);
  }
  else
  {
    a6(0, v12, v16, a4);
  }
  return v14;
}

void *specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(char a1, int64_t a2, char a3, uint64_t a4, uint64_t *a5, uint64_t *a6, void (*a7)(uint64_t, uint64_t, unint64_t))
{
  uint64_t v9 = a2;
  if (a3)
  {
    unint64_t v10 = *(void *)(a4 + 24);
    if ((uint64_t)(v10 >> 1) >= a2)
    {
      uint64_t v9 = *(void *)(a4 + 24) >> 1;
    }
    else
    {
      if ((uint64_t)((v10 >> 1) + 0x4000000000000000) < 0) {
        BUG();
      }
      int64_t v11 = v10 & 0xFFFFFFFFFFFFFFFELL;
      if (v11 > a2) {
        uint64_t v9 = v11;
      }
    }
  }
  uint64_t v12 = *(void *)(a4 + 16);
  if (v9 <= v12) {
    uint64_t v9 = *(void *)(a4 + 16);
  }
  if (v9)
  {
    uint64_t v13 = __swift_instantiateConcreteTypeFromMangledName(a5);
    long long v14 = (void *)swift_allocObject(v13, 8 * v9 + 32, 7);
    long long v15 = (uint64_t)(_swift_stdlib_malloc_size_0(v14) - 32);
    v14[2] = v12;
    v14[3] = 2 * (v15 / 8);
  }
  else
  {
    long long v14 = _swiftEmptyArrayStorage;
  }
  unint64_t v16 = (unint64_t)(v14 + 4);
  if (a1)
  {
    a7(a4 + 32, v12, v16);
    *(void *)(a4 + 16) = 0;
    swift_bridgeObjectRelease(a4);
  }
  else
  {
    specialized _ArrayBuffer._copyContents(subRange:initializing:)(0, v12, v16, a4, a6);
  }
  return v14;
}

{
  uint64_t v9;
  char v10;
  unint64_t v11;
  int64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  void *v18;
  size_t v19;
  uint64_t v20;
  int v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t *v25;
  uint64_t v26;

  uint64_t v9 = a2;
  unint64_t v10 = a1;
  if (a3)
  {
    int64_t v11 = *(void *)(a4 + 24);
    if ((uint64_t)(v11 >> 1) >= a2)
    {
      uint64_t v9 = *(void *)(a4 + 24) >> 1;
    }
    else
    {
      if ((uint64_t)((v11 >> 1) + 0x4000000000000000) < 0) {
        BUG();
      }
      uint64_t v12 = v11 & 0xFFFFFFFFFFFFFFFELL;
      if (v12 > a2) {
        uint64_t v9 = v12;
      }
    }
  }
  uint64_t v13 = *(void *)(a4 + 16);
  if (v9 <= v13) {
    uint64_t v9 = *(void *)(a4 + 16);
  }
  if (v9)
  {
    uint64_t v26 = __swift_instantiateConcreteTypeFromMangledName(a5);
    uint64_t v25 = a6;
    long long v14 = *(void *)(__swift_instantiateConcreteTypeFromMangledName(a6) - 8);
    long long v15 = *(void *)(v14 + 72);
    unint64_t v16 = *(unsigned __int8 *)(v14 + 80);
    uint64_t v17 = (v16 + 32) & ~v16;
    uint64_t v18 = (void *)swift_allocObject(v26, v17 + v15 * v9, v16 | 7);
    Swift::String v19 = _swift_stdlib_malloc_size_0(v18);
    if (v15)
    {
      uint64_t v20 = v19 - v17;
      if (v20 != 0x8000000000000000 || v15 != -1)
      {
        v18[2] = v13;
        v18[3] = 2 * (v20 / v15);
        a6 = v25;
        unint64_t v10 = a1;
        goto LABEL_16;
      }
      _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, "Division results in an overflow", 31, 2, "Swift/IntegerTypes.swift", 24, 2, 14384, 1);
    }
    else
    {
      _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, "Division by zero", 16, 2, "Swift/IntegerTypes.swift", 24, 2, 14377, 1);
    }
    BUG();
  }
  uint64_t v18 = _swiftEmptyArrayStorage;
LABEL_16:
  NSAttributedString v21 = *(unsigned __int8 *)(*(void *)(__swift_instantiateConcreteTypeFromMangledName(a6) - 8) + 80);
  uint64_t v22 = (v21 + 32) & ~v21;
  uint64_t v23 = (unint64_t)v18 + v22;
  if (v10)
  {
    a7(a4 + v22, v13, v23);
    *(void *)(a4 + 16) = 0;
    swift_bridgeObjectRelease(a4);
  }
  else
  {
    specialized _ArrayBuffer._copyContents(subRange:initializing:)(0, v13, v23, a4, a6);
  }
  return v18;
}

{
  uint64_t v9;
  unint64_t v10;
  int64_t v11;
  uint64_t v12;
  uint64_t v13;
  void *v14;
  long long v15;
  unint64_t v16;

  uint64_t v9 = a2;
  if (a3)
  {
    unint64_t v10 = *(void *)(a4 + 24);
    if ((uint64_t)(v10 >> 1) >= a2)
    {
      uint64_t v9 = *(void *)(a4 + 24) >> 1;
    }
    else
    {
      if ((uint64_t)((v10 >> 1) + 0x4000000000000000) < 0) {
        BUG();
      }
      int64_t v11 = v10 & 0xFFFFFFFFFFFFFFFELL;
      if (v11 > a2) {
        uint64_t v9 = v11;
      }
    }
  }
  uint64_t v12 = *(void *)(a4 + 16);
  if (v9 <= v12) {
    uint64_t v9 = *(void *)(a4 + 16);
  }
  if (v9)
  {
    uint64_t v13 = __swift_instantiateConcreteTypeFromMangledName(a5);
    long long v14 = (void *)swift_allocObject(v13, 40 * v9 + 32, 7);
    long long v15 = (uint64_t)(_swift_stdlib_malloc_size_0(v14) - 32);
    v14[2] = v12;
    v14[3] = 2 * (v15 / 40);
  }
  else
  {
    long long v14 = _swiftEmptyArrayStorage;
  }
  unint64_t v16 = (unint64_t)(v14 + 4);
  if (a1)
  {
    a7(a4 + 32, v12, v16);
    *(void *)(a4 + 16) = 0;
    swift_bridgeObjectRelease(a4);
  }
  else
  {
    specialized _ArrayBuffer._copyContents(subRange:initializing:)(0, v12, v16, a4, a6);
  }
  return v14;
}

{
  uint64_t v9;
  unint64_t v10;
  int64_t v11;
  uint64_t v12;
  uint64_t v13;
  void *v14;
  long long v15;
  unint64_t v16;

  uint64_t v9 = a2;
  if (a3)
  {
    unint64_t v10 = *(void *)(a4 + 24);
    if ((uint64_t)(v10 >> 1) >= a2)
    {
      uint64_t v9 = *(void *)(a4 + 24) >> 1;
    }
    else
    {
      if ((uint64_t)((v10 >> 1) + 0x4000000000000000) < 0) {
        BUG();
      }
      int64_t v11 = v10 & 0xFFFFFFFFFFFFFFFELL;
      if (v11 > a2) {
        uint64_t v9 = v11;
      }
    }
  }
  uint64_t v12 = *(void *)(a4 + 16);
  if (v9 <= v12) {
    uint64_t v9 = *(void *)(a4 + 16);
  }
  if (v9)
  {
    uint64_t v13 = __swift_instantiateConcreteTypeFromMangledName(a5);
    long long v14 = (void *)swift_allocObject(v13, 56 * v9 + 32, 7);
    long long v15 = (uint64_t)(_swift_stdlib_malloc_size_0(v14) - 32);
    v14[2] = v12;
    v14[3] = 2 * (v15 / 56);
  }
  else
  {
    long long v14 = _swiftEmptyArrayStorage;
  }
  unint64_t v16 = (unint64_t)(v14 + 4);
  if (a1)
  {
    a7(a4 + 32, v12, v16);
    *(void *)(a4 + 16) = 0;
    swift_bridgeObjectRelease(a4);
  }
  else
  {
    specialized _ArrayBuffer._copyContents(subRange:initializing:)(0, v12, v16, a4, a6);
  }
  return v14;
}

void *specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(char a1, int64_t a2, uint64_t a3, uint64_t a4)
{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, a4, &demangling cache variable for type metadata for _ContiguousArrayStorage<Tensor>, (uint64_t (*)(void))&type metadata accessor for Tensor, (void (*)(uint64_t, uint64_t, unint64_t))specialized UnsafeMutablePointer.moveInitialize(from:count:));
}

{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, a4, &demangling cache variable for type metadata for _ContiguousArrayStorage<WeightedDataSample>, type metadata accessor for WeightedDataSample, (void (*)(uint64_t, uint64_t, unint64_t))specialized UnsafeMutablePointer.moveInitialize(from:count:));
}

{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, a4, &demangling cache variable for type metadata for _ContiguousArrayStorage<MLProgram.Operation>, (uint64_t (*)(void))&type metadata accessor for MLProgram.Operation, (void (*)(uint64_t, uint64_t, unint64_t))specialized UnsafeMutablePointer.moveInitialize(from:count:));
}

{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, a4, &demangling cache variable for type metadata for _ContiguousArrayStorage<FeatureDescription>, (uint64_t (*)(void))&type metadata accessor for FeatureDescription, (void (*)(uint64_t, uint64_t, unint64_t))specialized UnsafeMutablePointer.moveInitialize(from:count:));
}

{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, a4, &demangling cache variable for type metadata for _ContiguousArrayStorage<URL>, (uint64_t (*)(void))&type metadata accessor for URL, (void (*)(uint64_t, uint64_t, unint64_t))specialized UnsafeMutablePointer.moveInitialize(from:count:));
}

{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, a4, &demangling cache variable for type metadata for _ContiguousArrayStorage<MLCheckpoint>, type metadata accessor for MLCheckpoint, (void (*)(uint64_t, uint64_t, unint64_t))specialized UnsafeMutablePointer.moveInitialize(from:count:));
}

{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, a4, &demangling cache variable for type metadata for _ContiguousArrayStorage<NeuralNetwork.Layer>, (uint64_t (*)(void))&type metadata accessor for NeuralNetwork.Layer, (void (*)(uint64_t, uint64_t, unint64_t))specialized UnsafeMutablePointer.moveInitialize(from:count:));
}

{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, a4, &demangling cache variable for type metadata for _ContiguousArrayStorage<Model>, (uint64_t (*)(void))&type metadata accessor for Model, (void (*)(uint64_t, uint64_t, unint64_t))specialized UnsafeMutablePointer.moveInitialize(from:count:));
}

{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, a4, &demangling cache variable for type metadata for _ContiguousArrayStorage<FeatureVectorizerConfiguration.Input>, (uint64_t (*)(void))&type metadata accessor for FeatureVectorizerConfiguration.Input, (void (*)(uint64_t, uint64_t, unint64_t))specialized UnsafeMutablePointer.moveInitialize(from:count:));
}

{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, a4, &demangling cache variable for type metadata for _ContiguousArrayStorage<Event>, (uint64_t (*)(void))&type metadata accessor for Event, (void (*)(uint64_t, uint64_t, unint64_t))specialized UnsafeMutablePointer.moveInitialize(from:count:));
}

void *specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(char a1, int64_t a2, uint64_t a3, uint64_t a4, uint64_t *a5, uint64_t (*a6)(void), void (*a7)(uint64_t, uint64_t, unint64_t))
{
  int64_t v7 = a6;
  uint64_t v9 = a2;
  char v10 = a1;
  if (a3)
  {
    unint64_t v11 = *(void *)(a4 + 24);
    if ((uint64_t)(v11 >> 1) >= a2)
    {
      uint64_t v9 = *(void *)(a4 + 24) >> 1;
    }
    else
    {
      a3 = 0x4000000000000000;
      if ((uint64_t)((v11 >> 1) + 0x4000000000000000) < 0) {
        BUG();
      }
      int64_t v12 = v11 & 0xFFFFFFFFFFFFFFFELL;
      if (v12 > a2) {
        uint64_t v9 = v12;
      }
    }
  }
  uint64_t v13 = *(void *)(a4 + 16);
  if (v9 <= v13) {
    uint64_t v9 = *(void *)(a4 + 16);
  }
  if (v9)
  {
    uint64_t v29 = __swift_instantiateConcreteTypeFromMangledName(a5);
    Swift::String v28 = v7;
    uint64_t v14 = *(void *)(v7(0) - 8);
    uint64_t v15 = *(void *)(v14 + 72);
    uint64_t v16 = *(unsigned __int8 *)(v14 + 80);
    uint64_t v17 = (v16 + 32) & ~v16;
    uint64_t v18 = v17 + v15 * v9;
    Swift::String v19 = (void *)swift_allocObject(v29, v18, v16 | 7);
    size_t v20 = _swift_stdlib_malloc_size_0(v19);
    if (v15)
    {
      uint64_t v21 = v20 - v17;
      if (v21 != 0x8000000000000000 || v15 != -1)
      {
        uint64_t v22 = v21 % v15;
        void v19[2] = v13;
        v19[3] = 2 * (v21 / v15);
        int64_t v7 = v28;
        char v10 = a1;
        uint64_t v23 = ((uint64_t (*)(void, uint64_t, uint64_t))v28)(0, v18, v22);
        goto LABEL_16;
      }
      _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, "Division results in an overflow", 31, 2, "Swift/IntegerTypes.swift", 24, 2, 14384, 1);
    }
    else
    {
      _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, "Division by zero", 16, 2, "Swift/IntegerTypes.swift", 24, 2, 14377, 1);
    }
    BUG();
  }
  Swift::String v19 = _swiftEmptyArrayStorage;
  uint64_t v23 = ((uint64_t (*)(void, int64_t, uint64_t))a6)(0, a2, a3);
LABEL_16:
  int v24 = *(unsigned __int8 *)(*(void *)(v23 - 8) + 80);
  uint64_t v25 = (v24 + 32) & ~v24;
  unint64_t v26 = (unint64_t)v19 + v25;
  if (v10)
  {
    a7(a4 + v25, v13, v26);
    *(void *)(a4 + 16) = 0;
    swift_bridgeObjectRelease(a4);
  }
  else
  {
    specialized _ArrayBuffer._copyContents(subRange:initializing:)(0, v13, v26, a4, v7);
  }
  return v19;
}

uint64_t outlined init with copy of TabularRegressionTask(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a1 + 24);
  *(void *)(a2 + 24) = v2;
  *(void *)(a2 + 32) = *(void *)(a1 + 32);
  (**(void (***)(uint64_t, uint64_t))(v2 - 8))(a2, a1);
  return a2;
}

uint64_t type metadata accessor for MLRegressor(uint64_t a1)
{
  uint64_t result = type metadata singleton initialization cache for MLRegressor;
  if (!type metadata singleton initialization cache for MLRegressor) {
    return swift_getSingletonMetadata(a1, &nominal type descriptor for MLRegressor);
  }
  return result;
}

uint64_t outlined init with copy of MLRegressor(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = type metadata accessor for MLRegressor(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v2 - 8) + 16))(a2, a1, v2);
  return a2;
}

void *initializeBufferWithCopyOfBuffer for MLRegressor(void *a1, void *a2, uint64_t a3)
{
  uint64_t v3 = a1;
  int v4 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  if ((v4 & 0x20000) != 0)
  {
    uint64_t v8 = *a2;
    *uint64_t v3 = *a2;
    uint64_t v3 = (void *)(v8 + ((v4 + 16) & ~v4));
    swift_retain();
  }
  else
  {
    switch(swift_getEnumCaseMultiPayload(a2, a3))
    {
      case 0u:
        *a1 = *a2;
        uint64_t v5 = a2[1];
        v3[1] = v5;
        uint64_t v6 = a2[2];
        swift_bridgeObjectRetain(v5);
        if (v6)
        {
          v3[2] = v6;
          void v3[3] = a2[3];
          uint64_t v7 = a2[4];
          void v3[4] = v7;
          swift_bridgeObjectRetain(v6);
          swift_bridgeObjectRetain(v7);
        }
        else
        {
          void v3[4] = a2[4];
          *((_OWORD *)v3 + 1) = *((_OWORD *)a2 + 1);
        }
        uint64_t v18 = *(int *)(type metadata accessor for TreeRegressorModel(0) + 24);
        uint64_t v19 = type metadata accessor for BaseTreeRegressorModel(0);
        (*(void (**)(char *, char *, uint64_t))(*(void *)(v19 - 8) + 16))((char *)v3 + v18, (char *)a2 + v18, v19);
        size_t v20 = (int *)type metadata accessor for MLBoostedTreeRegressor(0);
        uint64_t v21 = v20[5];
        uint64_t v22 = *(void **)((char *)a2 + v21);
        *(void *)((char *)v3 + v21) = v22;
        uint64_t v23 = v20[6];
        *(void *)((char *)v3 + v23) = *(void *)((char *)a2 + v23);
        uint64_t v101 = *(void *)((char *)a2 + v23 + 8);
        *(void *)((char *)v3 + v23 + 8) = v101;
        uint64_t v24 = v20[7];
        uint64_t v109 = *(void *)((char *)a2 + v24);
        *(void *)((char *)v3 + v24) = v109;
        uint64_t v105 = v20;
        uint64_t v25 = v20[8];
        unint64_t v26 = (char *)v3 + v25;
        uint64_t v27 = (char *)a2 + v25;
        uint64_t v28 = *(void *)((char *)a2 + v25 + 24);
        v22;
        swift_bridgeObjectRetain(v101);
        swift_bridgeObjectRetain(v109);
        if (v28)
        {
          *((void *)v26 + 3) = v28;
          (**(void (***)(char *, char *, uint64_t))(v28 - 8))(v26, v27, v28);
        }
        else
        {
          long long v63 = *(_OWORD *)v27;
          *((_OWORD *)v26 + 1) = *((_OWORD *)v27 + 1);
          *(_OWORD *)unint64_t v26 = v63;
        }
        *((_OWORD *)v26 + 2) = *((_OWORD *)v27 + 2);
        *((_OWORD *)v26 + 3) = *((_OWORD *)v27 + 3);
        *((_OWORD *)v26 + 4) = *((_OWORD *)v27 + 4);
        *((void *)v26 + 10) = *((void *)v27 + 10);
        v26[88] = v27[88];
        *((_OWORD *)v26 + 6) = *((_OWORD *)v27 + 6);
        uint64_t v64 = v105[9];
        uint64_t v65 = *(void *)((char *)a2 + v64);
        uint64_t v66 = *(void *)((char *)a2 + v64 + 8);
        char v113 = *((unsigned char *)a2 + v64 + 16);
        outlined copy of Result<_RegressorMetrics, Error>(v65, v66, v113);
        *(void *)((char *)v3 + v64) = v65;
        *(void *)((char *)v3 + v64 + 8) = v66;
        *((unsigned char *)v3 + v64 + 16) = v113;
        uint64_t v67 = v105[10];
        uint64_t v68 = *(void *)((char *)a2 + v67);
        uint64_t v69 = *(void *)((char *)a2 + v67 + 8);
        char v70 = *((unsigned char *)a2 + v67 + 16);
        outlined copy of Result<_RegressorMetrics, Error>(v68, v69, v70);
        *(void *)((char *)v3 + v67) = v68;
        *(void *)((char *)v3 + v67 + 8) = v69;
        *((unsigned char *)v3 + v67 + 16) = v70;
        uint64_t v71 = v3;
        uint64_t v72 = a3;
        uint64_t v73 = 0;
        goto LABEL_33;
      case 1u:
        *a1 = *a2;
        uint64_t v9 = a2[1];
        v3[1] = v9;
        uint64_t v10 = a2[2];
        swift_bridgeObjectRetain(v9);
        if (v10)
        {
          v3[2] = v10;
          void v3[3] = a2[3];
          uint64_t v11 = a2[4];
          void v3[4] = v11;
          swift_bridgeObjectRetain(v10);
          swift_bridgeObjectRetain(v11);
        }
        else
        {
          void v3[4] = a2[4];
          *((_OWORD *)v3 + 1) = *((_OWORD *)a2 + 1);
        }
        uint64_t v29 = *(int *)(type metadata accessor for TreeRegressorModel(0) + 24);
        uint64_t v30 = type metadata accessor for BaseTreeRegressorModel(0);
        (*(void (**)(char *, char *, uint64_t))(*(void *)(v30 - 8) + 16))((char *)v3 + v29, (char *)a2 + v29, v30);
        uint64_t v31 = (int *)type metadata accessor for MLDecisionTreeRegressor(0);
        uint64_t v32 = v31[5];
        uint64_t v33 = *(void **)((char *)a2 + v32);
        *(void *)((char *)v3 + v32) = v33;
        uint64_t v34 = v31[6];
        *(void *)((char *)v3 + v34) = *(void *)((char *)a2 + v34);
        uint64_t v35 = *(void *)((char *)a2 + v34 + 8);
        *(void *)((char *)v3 + v34 + 8) = v35;
        uint64_t v36 = v31[7];
        uint64_t v102 = *(void *)((char *)a2 + v36);
        *(void *)((char *)v3 + v36) = v102;
        uint64_t v106 = v31;
        uint64_t v37 = v31[8];
        uint64_t v38 = (char *)v3 + v37;
        uint64_t v110 = (_OWORD *)((char *)a2 + v37);
        uint64_t v39 = *(void *)((char *)a2 + v37 + 24);
        v33;
        swift_bridgeObjectRetain(v35);
        swift_bridgeObjectRetain(v102);
        if (v39)
        {
          *((void *)v38 + 3) = v39;
          uint64_t v40 = v110;
          (**(void (***)(char *, _OWORD *, uint64_t))(v39 - 8))(v38, v110, v39);
        }
        else
        {
          uint64_t v40 = v110;
          long long v74 = *v110;
          *((_OWORD *)v38 + 1) = v110[1];
          *(_OWORD *)uint64_t v38 = v74;
        }
        *((_OWORD *)v38 + 2) = v40[2];
        *((_OWORD *)v38 + 3) = v40[3];
        uint64_t v75 = v106[9];
        uint64_t v76 = *(void *)((char *)a2 + v75);
        uint64_t v77 = *(void *)((char *)a2 + v75 + 8);
        char v114 = *((unsigned char *)a2 + v75 + 16);
        outlined copy of Result<_RegressorMetrics, Error>(v76, v77, v114);
        *(void *)((char *)v3 + v75) = v76;
        *(void *)((char *)v3 + v75 + 8) = v77;
        *((unsigned char *)v3 + v75 + 16) = v114;
        uint64_t v78 = v106[10];
        uint64_t v79 = *(void *)((char *)a2 + v78);
        uint64_t v80 = *(void *)((char *)a2 + v78 + 8);
        char v81 = *((unsigned char *)a2 + v78 + 16);
        outlined copy of Result<_RegressorMetrics, Error>(v79, v80, v81);
        *(void *)((char *)v3 + v78) = v79;
        *(void *)((char *)v3 + v78 + 8) = v80;
        *((unsigned char *)v3 + v78 + 16) = v81;
        uint64_t v99 = 1;
        goto LABEL_32;
      case 2u:
        *a1 = *a2;
        uint64_t v12 = a2[1];
        v3[1] = v12;
        uint64_t v13 = a2[2];
        swift_bridgeObjectRetain(v12);
        if (v13)
        {
          v3[2] = v13;
          void v3[3] = a2[3];
          uint64_t v14 = a2[4];
          void v3[4] = v14;
          swift_bridgeObjectRetain(v13);
          swift_bridgeObjectRetain(v14);
        }
        else
        {
          void v3[4] = a2[4];
          *((_OWORD *)v3 + 1) = *((_OWORD *)a2 + 1);
        }
        uint64_t v41 = *(int *)(type metadata accessor for TreeRegressorModel(0) + 24);
        uint64_t v42 = type metadata accessor for BaseTreeRegressorModel(0);
        (*(void (**)(char *, char *, uint64_t))(*(void *)(v42 - 8) + 16))((char *)v3 + v41, (char *)a2 + v41, v42);
        uint64_t v43 = (int *)type metadata accessor for MLRandomForestRegressor(0);
        uint64_t v44 = v43[5];
        uint64_t v45 = *(void **)((char *)a2 + v44);
        *(void *)((char *)v3 + v44) = v45;
        uint64_t v46 = v43[6];
        *(void *)((char *)v3 + v46) = *(void *)((char *)a2 + v46);
        uint64_t v103 = *(void *)((char *)a2 + v46 + 8);
        *(void *)((char *)v3 + v46 + 8) = v103;
        uint64_t v47 = v43[7];
        uint64_t v111 = *(void *)((char *)a2 + v47);
        *(void *)((char *)v3 + v47) = v111;
        long long v107 = v43;
        uint64_t v48 = v43[8];
        uint64_t v49 = (char *)v3 + v48;
        uint64_t v50 = (long long *)((char *)a2 + v48);
        uint64_t v51 = *(void *)((char *)a2 + v48 + 24);
        v45;
        swift_bridgeObjectRetain(v103);
        swift_bridgeObjectRetain(v111);
        if (v51)
        {
          *((void *)v49 + 3) = v51;
          (**(void (***)(char *, long long *, uint64_t))(v51 - 8))(v49, v50, v51);
        }
        else
        {
          long long v82 = *v50;
          *((_OWORD *)v49 + 1) = v50[1];
          *(_OWORD *)uint64_t v49 = v82;
        }
        *((_OWORD *)v49 + 2) = v50[2];
        *((_OWORD *)v49 + 3) = v50[3];
        *((_OWORD *)v49 + 4) = v50[4];
        *((_OWORD *)v49 + 5) = v50[5];
        *((_OWORD *)v49 + 6) = v50[6];
        uint64_t v83 = v107[9];
        uint64_t v84 = *(void *)((char *)a2 + v83);
        uint64_t v85 = *(void *)((char *)a2 + v83 + 8);
        char v115 = *((unsigned char *)a2 + v83 + 16);
        outlined copy of Result<_RegressorMetrics, Error>(v84, v85, v115);
        *(void *)((char *)v3 + v83) = v84;
        *(void *)((char *)v3 + v83 + 8) = v85;
        *((unsigned char *)v3 + v83 + 16) = v115;
        uint64_t v86 = v107[10];
        uint64_t v87 = *(void *)((char *)a2 + v86);
        uint64_t v88 = *(void *)((char *)a2 + v86 + 8);
        char v89 = *((unsigned char *)a2 + v86 + 16);
        outlined copy of Result<_RegressorMetrics, Error>(v87, v88, v89);
        *(void *)((char *)v3 + v86) = v87;
        *(void *)((char *)v3 + v86 + 8) = v88;
        *((unsigned char *)v3 + v86 + 16) = v89;
        uint64_t v99 = 2;
        goto LABEL_32;
      case 3u:
        *a1 = *a2;
        uint64_t v15 = a2[1];
        v3[1] = v15;
        uint64_t v16 = a2[2];
        swift_bridgeObjectRetain(v15);
        if (v16)
        {
          v3[2] = v16;
          void v3[3] = a2[3];
          uint64_t v17 = a2[4];
          void v3[4] = v17;
          swift_bridgeObjectRetain(v16);
          swift_bridgeObjectRetain(v17);
        }
        else
        {
          void v3[4] = a2[4];
          *((_OWORD *)v3 + 1) = *((_OWORD *)a2 + 1);
        }
        uint64_t v52 = *(int *)(type metadata accessor for MLLinearRegressor.Model(0) + 24);
        uint64_t v53 = type metadata accessor for BaseLinearRegressorModel(0);
        (*(void (**)(char *, char *, uint64_t))(*(void *)(v53 - 8) + 16))((char *)v3 + v52, (char *)a2 + v52, v53);
        uint64_t v54 = (int *)type metadata accessor for MLLinearRegressor(0);
        uint64_t v55 = v54[5];
        uint64_t v56 = *(void **)((char *)a2 + v55);
        *(void *)((char *)v3 + v55) = v56;
        uint64_t v57 = v54[6];
        *(void *)((char *)v3 + v57) = *(void *)((char *)a2 + v57);
        uint64_t v104 = *(void *)((char *)a2 + v57 + 8);
        *(void *)((char *)v3 + v57 + 8) = v104;
        uint64_t v58 = v54[7];
        uint64_t v112 = *(void *)((char *)a2 + v58);
        *(void *)((char *)v3 + v58) = v112;
        long long v108 = v54;
        uint64_t v59 = v54[8];
        uint64_t v60 = (char *)v3 + v59;
        uint64_t v61 = (char *)a2 + v59;
        uint64_t v62 = *(void *)((char *)a2 + v59 + 24);
        v56;
        swift_bridgeObjectRetain(v104);
        swift_bridgeObjectRetain(v112);
        if (v62)
        {
          *((void *)v60 + 3) = v62;
          (**(void (***)(char *, char *, uint64_t))(v62 - 8))(v60, v61, v62);
        }
        else
        {
          long long v90 = *(_OWORD *)v61;
          *((_OWORD *)v60 + 1) = *((_OWORD *)v61 + 1);
          *(_OWORD *)uint64_t v60 = v90;
        }
        *((_OWORD *)v60 + 2) = *((_OWORD *)v61 + 2);
        *((_OWORD *)v60 + 3) = *((_OWORD *)v61 + 3);
        *((void *)v60 + 8) = *((void *)v61 + 8);
        v60[72] = v61[72];
        uint64_t v91 = v108[9];
        uint64_t v92 = *(void *)((char *)a2 + v91);
        uint64_t v93 = *(void *)((char *)a2 + v91 + 8);
        char v116 = *((unsigned char *)a2 + v91 + 16);
        outlined copy of Result<_RegressorMetrics, Error>(v92, v93, v116);
        *(void *)((char *)v3 + v91) = v92;
        *(void *)((char *)v3 + v91 + 8) = v93;
        *((unsigned char *)v3 + v91 + 16) = v116;
        uint64_t v94 = v108[10];
        uint64_t v95 = *(void *)((char *)a2 + v94);
        uint64_t v96 = *(void *)((char *)a2 + v94 + 8);
        char v97 = *((unsigned char *)a2 + v94 + 16);
        outlined copy of Result<_RegressorMetrics, Error>(v95, v96, v97);
        *(void *)((char *)v3 + v94) = v95;
        *(void *)((char *)v3 + v94 + 8) = v96;
        *((unsigned char *)v3 + v94 + 16) = v97;
        uint64_t v99 = 3;
LABEL_32:
        uint64_t v73 = v99;
        uint64_t v71 = v3;
        uint64_t v72 = a3;
LABEL_33:
        swift_storeEnumTagMultiPayload(v71, v72, v73);
        break;
    }
  }
  return v3;
}

uint64_t destroy for MLRegressor(void *a1, uint64_t a2)
{
  uint64_t result = swift_getEnumCaseMultiPayload(a1, a2);
  switch((int)result)
  {
    case 0:
      swift_bridgeObjectRelease(a1[1]);
      uint64_t v4 = a1[2];
      if (v4)
      {
        swift_bridgeObjectRelease(v4);
        swift_bridgeObjectRelease(a1[4]);
      }
      uint64_t v5 = (char *)a1 + *(int *)(type metadata accessor for TreeRegressorModel(0) + 24);
      uint64_t v6 = type metadata accessor for BaseTreeRegressorModel(0);
      (*(void (**)(char *, uint64_t))(*(void *)(v6 - 8) + 8))(v5, v6);
      uint64_t v7 = type metadata accessor for MLBoostedTreeRegressor(0);
      goto LABEL_14;
    case 1:
      swift_bridgeObjectRelease(a1[1]);
      uint64_t v8 = a1[2];
      if (v8)
      {
        swift_bridgeObjectRelease(v8);
        swift_bridgeObjectRelease(a1[4]);
      }
      uint64_t v9 = (char *)a1 + *(int *)(type metadata accessor for TreeRegressorModel(0) + 24);
      uint64_t v10 = type metadata accessor for BaseTreeRegressorModel(0);
      (*(void (**)(char *, uint64_t))(*(void *)(v10 - 8) + 8))(v9, v10);
      uint64_t v7 = type metadata accessor for MLDecisionTreeRegressor(0);
      goto LABEL_14;
    case 2:
      swift_bridgeObjectRelease(a1[1]);
      uint64_t v11 = a1[2];
      if (v11)
      {
        swift_bridgeObjectRelease(v11);
        swift_bridgeObjectRelease(a1[4]);
      }
      uint64_t v12 = (char *)a1 + *(int *)(type metadata accessor for TreeRegressorModel(0) + 24);
      uint64_t v13 = type metadata accessor for BaseTreeRegressorModel(0);
      (*(void (**)(char *, uint64_t))(*(void *)(v13 - 8) + 8))(v12, v13);
      uint64_t v7 = type metadata accessor for MLRandomForestRegressor(0);
      goto LABEL_14;
    case 3:
      swift_bridgeObjectRelease(a1[1]);
      uint64_t v14 = a1[2];
      if (v14)
      {
        swift_bridgeObjectRelease(v14);
        swift_bridgeObjectRelease(a1[4]);
      }
      uint64_t v15 = (char *)a1 + *(int *)(type metadata accessor for MLLinearRegressor.Model(0) + 24);
      uint64_t v16 = type metadata accessor for BaseLinearRegressorModel(0);
      (*(void (**)(char *, uint64_t))(*(void *)(v16 - 8) + 8))(v15, v16);
      uint64_t v7 = type metadata accessor for MLLinearRegressor(0);
LABEL_14:
      uint64_t v17 = (int *)v7;

      swift_bridgeObjectRelease(*(void *)((char *)a1 + v17[6] + 8));
      swift_bridgeObjectRelease(*(void *)((char *)a1 + v17[7]));
      uint64_t v18 = v17[8];
      if (*(void *)((char *)a1 + v18 + 24)) {
        __swift_destroy_boxed_opaque_existential_1Tm((void *)((char *)a1 + v18));
      }
      outlined consume of Result<(Int, Int), Error>(*(void *)((char *)a1 + v17[9]), *(void *)((char *)a1 + v17[9] + 8), *(_DWORD *)((char *)a1 + v17[9] + 16));
      uint64_t result = outlined consume of Result<(Int, Int), Error>(*(void *)((char *)a1 + v17[10]), *(void *)((char *)a1 + v17[10] + 8), *(_DWORD *)((char *)a1 + v17[10] + 16));
      break;
    default:
      return result;
  }
  return result;
}

uint64_t __swift_destroy_boxed_opaque_existential_1Tm(void *a1)
{
  uint64_t v1 = *(void *)(a1[3] - 8);
  if ((*(unsigned char *)(v1 + 82) & 2) != 0) {
    return swift_release(*a1);
  }
  else {
    return (*(uint64_t (**)(void))(v1 + 8))();
  }
}

void *initializeWithCopy for MLRegressor(void *a1, void *a2, uint64_t a3)
{
  unsigned int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload(a2, a3);
  switch(EnumCaseMultiPayload)
  {
    case 0u:
      *a1 = *a2;
      uint64_t v4 = a2[1];
      a1[1] = v4;
      uint64_t v5 = a2[2];
      swift_bridgeObjectRetain(v4);
      if (v5)
      {
        a1[2] = v5;
        a1[3] = a2[3];
        uint64_t v6 = a2[4];
        a1[4] = v6;
        swift_bridgeObjectRetain(v5);
        swift_bridgeObjectRetain(v6);
      }
      else
      {
        a1[4] = a2[4];
        *((_OWORD *)a1 + 1) = *((_OWORD *)a2 + 1);
      }
      uint64_t v16 = *(int *)(type metadata accessor for TreeRegressorModel(0) + 24);
      uint64_t v17 = type metadata accessor for BaseTreeRegressorModel(0);
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v17 - 8) + 16))((char *)a1 + v16, (char *)a2 + v16, v17);
      uint64_t v18 = (int *)type metadata accessor for MLBoostedTreeRegressor(0);
      uint64_t v19 = v18[5];
      size_t v20 = *(void **)((char *)a2 + v19);
      *(void *)((char *)a1 + v19) = v20;
      uint64_t v21 = v18[6];
      *(void *)((char *)a1 + v21) = *(void *)((char *)a2 + v21);
      uint64_t v72 = *(void *)((char *)a2 + v21 + 8);
      *(void *)((char *)a1 + v21 + 8) = v72;
      uint64_t v22 = v18[7];
      uint64_t v77 = *(void *)((char *)a2 + v22);
      *(void *)((char *)a1 + v22) = v77;
      long long v82 = v18;
      uint64_t v23 = v18[8];
      uint64_t v24 = (char *)a1 + v23;
      uint64_t v25 = (char *)a2 + v23;
      uint64_t v26 = *(void *)((char *)a2 + v23 + 24);
      v20;
      swift_bridgeObjectRetain(v72);
      swift_bridgeObjectRetain(v77);
      if (v26)
      {
        *((void *)v24 + 3) = v26;
        (**(void (***)(char *, char *, uint64_t))(v26 - 8))(v24, v25, v26);
      }
      else
      {
        long long v59 = *(_OWORD *)v25;
        *((_OWORD *)v24 + 1) = *((_OWORD *)v25 + 1);
        *(_OWORD *)uint64_t v24 = v59;
      }
      *((_OWORD *)v24 + 2) = *((_OWORD *)v25 + 2);
      *((_OWORD *)v24 + 3) = *((_OWORD *)v25 + 3);
      *((_OWORD *)v24 + 4) = *((_OWORD *)v25 + 4);
      *((void *)v24 + 10) = *((void *)v25 + 10);
      v24[88] = v25[88];
      goto LABEL_28;
    case 1u:
      *a1 = *a2;
      uint64_t v7 = a2[1];
      a1[1] = v7;
      uint64_t v8 = a2[2];
      swift_bridgeObjectRetain(v7);
      if (v8)
      {
        a1[2] = v8;
        a1[3] = a2[3];
        uint64_t v9 = a2[4];
        a1[4] = v9;
        swift_bridgeObjectRetain(v8);
        swift_bridgeObjectRetain(v9);
      }
      else
      {
        a1[4] = a2[4];
        *((_OWORD *)a1 + 1) = *((_OWORD *)a2 + 1);
      }
      uint64_t v27 = *(int *)(type metadata accessor for TreeRegressorModel(0) + 24);
      uint64_t v28 = type metadata accessor for BaseTreeRegressorModel(0);
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v28 - 8) + 16))((char *)a1 + v27, (char *)a2 + v27, v28);
      uint64_t v29 = (int *)type metadata accessor for MLDecisionTreeRegressor(0);
      uint64_t v30 = v29[5];
      uint64_t v31 = *(void **)((char *)a2 + v30);
      *(void *)((char *)a1 + v30) = v31;
      uint64_t v32 = v29[6];
      *(void *)((char *)a1 + v32) = *(void *)((char *)a2 + v32);
      uint64_t v33 = *(void *)((char *)a2 + v32 + 8);
      *(void *)((char *)a1 + v32 + 8) = v33;
      uint64_t v34 = v29[7];
      uint64_t v73 = *(void *)((char *)a2 + v34);
      *(void *)((char *)a1 + v34) = v73;
      long long v82 = v29;
      uint64_t v35 = v29[8];
      uint64_t v36 = (char *)a1 + v35;
      uint64_t v78 = (_OWORD *)((char *)a2 + v35);
      uint64_t v37 = *(void *)((char *)a2 + v35 + 24);
      v31;
      swift_bridgeObjectRetain(v33);
      swift_bridgeObjectRetain(v73);
      if (v37)
      {
        *((void *)v36 + 3) = v37;
        uint64_t v38 = v78;
        (**(void (***)(char *, _OWORD *, uint64_t))(v37 - 8))(v36, v78, v37);
      }
      else
      {
        uint64_t v38 = v78;
        long long v60 = *v78;
        *((_OWORD *)v36 + 1) = v78[1];
        *(_OWORD *)uint64_t v36 = v60;
      }
      *((_OWORD *)v36 + 2) = v38[2];
      *((_OWORD *)v36 + 3) = v38[3];
      break;
    case 2u:
      *a1 = *a2;
      uint64_t v10 = a2[1];
      a1[1] = v10;
      uint64_t v11 = a2[2];
      swift_bridgeObjectRetain(v10);
      if (v11)
      {
        a1[2] = v11;
        a1[3] = a2[3];
        uint64_t v12 = a2[4];
        a1[4] = v12;
        swift_bridgeObjectRetain(v11);
        swift_bridgeObjectRetain(v12);
      }
      else
      {
        a1[4] = a2[4];
        *((_OWORD *)a1 + 1) = *((_OWORD *)a2 + 1);
      }
      uint64_t v39 = *(int *)(type metadata accessor for TreeRegressorModel(0) + 24);
      uint64_t v40 = type metadata accessor for BaseTreeRegressorModel(0);
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v40 - 8) + 16))((char *)a1 + v39, (char *)a2 + v39, v40);
      uint64_t v41 = (int *)type metadata accessor for MLRandomForestRegressor(0);
      uint64_t v42 = v41[5];
      uint64_t v43 = *(void **)((char *)a2 + v42);
      *(void *)((char *)a1 + v42) = v43;
      uint64_t v44 = v41[6];
      *(void *)((char *)a1 + v44) = *(void *)((char *)a2 + v44);
      uint64_t v74 = *(void *)((char *)a2 + v44 + 8);
      *(void *)((char *)a1 + v44 + 8) = v74;
      uint64_t v45 = v41[7];
      uint64_t v79 = *(void *)((char *)a2 + v45);
      *(void *)((char *)a1 + v45) = v79;
      long long v82 = v41;
      uint64_t v46 = v41[8];
      uint64_t v24 = (char *)a1 + v46;
      uint64_t v25 = (char *)a2 + v46;
      uint64_t v47 = *(void *)((char *)a2 + v46 + 24);
      v43;
      swift_bridgeObjectRetain(v74);
      swift_bridgeObjectRetain(v79);
      if (v47)
      {
        *((void *)v24 + 3) = v47;
        (**(void (***)(char *, char *, uint64_t))(v47 - 8))(v24, v25, v47);
      }
      else
      {
        long long v61 = *(_OWORD *)v25;
        *((_OWORD *)v24 + 1) = *((_OWORD *)v25 + 1);
        *(_OWORD *)uint64_t v24 = v61;
      }
      *((_OWORD *)v24 + 2) = *((_OWORD *)v25 + 2);
      *((_OWORD *)v24 + 3) = *((_OWORD *)v25 + 3);
      *((_OWORD *)v24 + 4) = *((_OWORD *)v25 + 4);
      *((_OWORD *)v24 + 5) = *((_OWORD *)v25 + 5);
LABEL_28:
      *((_OWORD *)v24 + 6) = *((_OWORD *)v25 + 6);
      break;
    case 3u:
      *a1 = *a2;
      uint64_t v13 = a2[1];
      a1[1] = v13;
      uint64_t v14 = a2[2];
      swift_bridgeObjectRetain(v13);
      if (v14)
      {
        a1[2] = v14;
        a1[3] = a2[3];
        uint64_t v15 = a2[4];
        a1[4] = v15;
        swift_bridgeObjectRetain(v14);
        swift_bridgeObjectRetain(v15);
      }
      else
      {
        a1[4] = a2[4];
        *((_OWORD *)a1 + 1) = *((_OWORD *)a2 + 1);
      }
      uint64_t v48 = *(int *)(type metadata accessor for MLLinearRegressor.Model(0) + 24);
      uint64_t v49 = type metadata accessor for BaseLinearRegressorModel(0);
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v49 - 8) + 16))((char *)a1 + v48, (char *)a2 + v48, v49);
      uint64_t v50 = (int *)type metadata accessor for MLLinearRegressor(0);
      uint64_t v51 = v50[5];
      uint64_t v52 = *(void **)((char *)a2 + v51);
      *(void *)((char *)a1 + v51) = v52;
      uint64_t v53 = v50[6];
      *(void *)((char *)a1 + v53) = *(void *)((char *)a2 + v53);
      uint64_t v75 = *(void *)((char *)a2 + v53 + 8);
      *(void *)((char *)a1 + v53 + 8) = v75;
      uint64_t v54 = v50[7];
      uint64_t v80 = *(void *)((char *)a2 + v54);
      *(void *)((char *)a1 + v54) = v80;
      long long v82 = v50;
      uint64_t v55 = v50[8];
      uint64_t v56 = (char *)a1 + v55;
      uint64_t v57 = (char *)a2 + v55;
      uint64_t v58 = *(void *)((char *)a2 + v55 + 24);
      v52;
      swift_bridgeObjectRetain(v75);
      swift_bridgeObjectRetain(v80);
      if (v58)
      {
        *((void *)v56 + 3) = v58;
        (**(void (***)(char *, char *, uint64_t))(v58 - 8))(v56, v57, v58);
      }
      else
      {
        long long v62 = *(_OWORD *)v57;
        *((_OWORD *)v56 + 1) = *((_OWORD *)v57 + 1);
        *(_OWORD *)uint64_t v56 = v62;
      }
      *((_OWORD *)v56 + 2) = *((_OWORD *)v57 + 2);
      *((_OWORD *)v56 + 3) = *((_OWORD *)v57 + 3);
      *((void *)v56 + 8) = *((void *)v57 + 8);
      v56[72] = v57[72];
      break;
  }
  uint64_t v63 = v82[9];
  uint64_t v64 = *(void *)((char *)a2 + v63);
  uint64_t v65 = *(void *)((char *)a2 + v63 + 8);
  char v81 = *((unsigned char *)a2 + v63 + 16);
  outlined copy of Result<_RegressorMetrics, Error>(v64, v65, v81);
  *(void *)((char *)a1 + v63) = v64;
  *(void *)((char *)a1 + v63 + 8) = v65;
  *((unsigned char *)a1 + v63 + 16) = v81;
  uint64_t v66 = v82[10];
  uint64_t v67 = (char *)a1 + v66;
  uint64_t v83 = *(void *)((char *)a2 + v66);
  uint64_t v68 = *(void *)((char *)a2 + v66 + 8);
  int v69 = *(_DWORD *)((char *)a2 + v66 + 16);
  outlined copy of Result<_RegressorMetrics, Error>(v83, v68, v69);
  *(void *)((char *)a1 + v66) = v83;
  *((void *)v67 + 1) = v68;
  v67[16] = v69 & 1;
  swift_storeEnumTagMultiPayload(a1, a3, EnumCaseMultiPayload);
  return a1;
}

void *assignWithCopy for MLRegressor(void *a1, void *a2, uint64_t a3)
{
  if (a1 != a2)
  {
    outlined destroy of MLActivityClassifier.ModelParameters((uint64_t)a1, type metadata accessor for MLRegressor);
    uint64_t v71 = a3;
    unsigned int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload(a2, a3);
    switch(EnumCaseMultiPayload)
    {
      case 0u:
        *a1 = *a2;
        uint64_t v5 = a2[1];
        a1[1] = v5;
        uint64_t v6 = a2[2];
        swift_bridgeObjectRetain(v5);
        if (v6)
        {
          a1[2] = v6;
          a1[3] = a2[3];
          uint64_t v7 = a2[4];
          a1[4] = v7;
          swift_bridgeObjectRetain(v6);
          swift_bridgeObjectRetain(v7);
        }
        else
        {
          a1[4] = a2[4];
          *((_OWORD *)a1 + 1) = *((_OWORD *)a2 + 1);
        }
        uint64_t v41 = *(int *)(type metadata accessor for TreeRegressorModel(0) + 24);
        uint64_t v42 = type metadata accessor for BaseTreeRegressorModel(0);
        (*(void (**)(char *, char *, uint64_t))(*(void *)(v42 - 8) + 16))((char *)a1 + v41, (char *)a2 + v41, v42);
        uint64_t v43 = (int *)type metadata accessor for MLBoostedTreeRegressor(0);
        uint64_t v44 = v43[5];
        uint64_t v45 = *(void **)((char *)a2 + v44);
        *(void *)((char *)a1 + v44) = v45;
        uint64_t v46 = v43[6];
        *(void *)((char *)a1 + v46) = *(void *)((char *)a2 + v46);
        uint64_t v75 = *(void *)((char *)a2 + v46 + 8);
        *(void *)((char *)a1 + v46 + 8) = v75;
        uint64_t v47 = v43[7];
        uint64_t v79 = *(void *)((char *)a2 + v47);
        *(void *)((char *)a1 + v47) = v79;
        long long v82 = v43;
        uint64_t v48 = v43[8];
        uint64_t v25 = (char *)a1 + v48;
        uint64_t v26 = (char *)a2 + v48;
        uint64_t v49 = *(void *)((char *)a2 + v48 + 24);
        v45;
        swift_bridgeObjectRetain(v75);
        swift_bridgeObjectRetain(v79);
        if (v49)
        {
          *((void *)v25 + 3) = v49;
          (**(void (***)(char *, char *, uint64_t))(v49 - 8))(v25, v26, v49);
        }
        else
        {
          long long v61 = *(_OWORD *)v26;
          *((_OWORD *)v25 + 1) = *((_OWORD *)v26 + 1);
          *(_OWORD *)uint64_t v25 = v61;
        }
        *((void *)v25 + 4) = *((void *)v26 + 4);
        *((void *)v25 + 5) = *((void *)v26 + 5);
        *((void *)v25 + 6) = *((void *)v26 + 6);
        *((void *)v25 + 7) = *((void *)v26 + 7);
        *((void *)v25 + 8) = *((void *)v26 + 8);
        *((void *)v25 + 9) = *((void *)v26 + 9);
        *((void *)v25 + 10) = *((void *)v26 + 10);
        v25[88] = v26[88];
        goto LABEL_29;
      case 1u:
        *a1 = *a2;
        uint64_t v8 = a2[1];
        a1[1] = v8;
        uint64_t v9 = a2[2];
        swift_bridgeObjectRetain(v8);
        if (v9)
        {
          a1[2] = v9;
          a1[3] = a2[3];
          uint64_t v10 = a2[4];
          a1[4] = v10;
          swift_bridgeObjectRetain(v9);
          swift_bridgeObjectRetain(v10);
        }
        else
        {
          a1[4] = a2[4];
          *((_OWORD *)a1 + 1) = *((_OWORD *)a2 + 1);
        }
        uint64_t v50 = *(int *)(type metadata accessor for TreeRegressorModel(0) + 24);
        uint64_t v51 = type metadata accessor for BaseTreeRegressorModel(0);
        (*(void (**)(char *, char *, uint64_t))(*(void *)(v51 - 8) + 16))((char *)a1 + v50, (char *)a2 + v50, v51);
        uint64_t v52 = (int *)type metadata accessor for MLDecisionTreeRegressor(0);
        uint64_t v53 = v52[5];
        uint64_t v54 = *(void **)((char *)a2 + v53);
        *(void *)((char *)a1 + v53) = v54;
        uint64_t v55 = v52[6];
        *(void *)((char *)a1 + v55) = *(void *)((char *)a2 + v55);
        uint64_t v76 = *(void *)((char *)a2 + v55 + 8);
        *(void *)((char *)a1 + v55 + 8) = v76;
        uint64_t v56 = v52[7];
        uint64_t v80 = *(void *)((char *)a2 + v56);
        *(void *)((char *)a1 + v56) = v80;
        long long v82 = v52;
        uint64_t v57 = v52[8];
        uint64_t v58 = (char *)a1 + v57;
        long long v59 = (char *)a2 + v57;
        uint64_t v60 = *(void *)((char *)a2 + v57 + 24);
        v54;
        swift_bridgeObjectRetain(v76);
        swift_bridgeObjectRetain(v80);
        if (v60)
        {
          *((void *)v58 + 3) = v60;
          (**(void (***)(char *, char *, uint64_t))(v60 - 8))(v58, v59, v60);
        }
        else
        {
          long long v62 = *(_OWORD *)v59;
          *((_OWORD *)v58 + 1) = *((_OWORD *)v59 + 1);
          *(_OWORD *)uint64_t v58 = v62;
        }
        *((void *)v58 + 4) = *((void *)v59 + 4);
        *((void *)v58 + 5) = *((void *)v59 + 5);
        *((void *)v58 + 6) = *((void *)v59 + 6);
        *((void *)v58 + 7) = *((void *)v59 + 7);
        break;
      case 2u:
        *a1 = *a2;
        uint64_t v11 = a2[1];
        a1[1] = v11;
        uint64_t v12 = a2[2];
        swift_bridgeObjectRetain(v11);
        if (v12)
        {
          a1[2] = v12;
          a1[3] = a2[3];
          uint64_t v13 = a2[4];
          a1[4] = v13;
          swift_bridgeObjectRetain(v12);
          swift_bridgeObjectRetain(v13);
        }
        else
        {
          a1[4] = a2[4];
          *((_OWORD *)a1 + 1) = *((_OWORD *)a2 + 1);
        }
        uint64_t v17 = *(int *)(type metadata accessor for TreeRegressorModel(0) + 24);
        uint64_t v18 = type metadata accessor for BaseTreeRegressorModel(0);
        (*(void (**)(char *, char *, uint64_t))(*(void *)(v18 - 8) + 16))((char *)a1 + v17, (char *)a2 + v17, v18);
        uint64_t v19 = (int *)type metadata accessor for MLRandomForestRegressor(0);
        uint64_t v20 = v19[5];
        uint64_t v21 = *(void **)((char *)a2 + v20);
        *(void *)((char *)a1 + v20) = v21;
        uint64_t v22 = v19[6];
        *(void *)((char *)a1 + v22) = *(void *)((char *)a2 + v22);
        uint64_t v73 = *(void *)((char *)a2 + v22 + 8);
        *(void *)((char *)a1 + v22 + 8) = v73;
        uint64_t v23 = v19[7];
        uint64_t v77 = *(void *)((char *)a2 + v23);
        *(void *)((char *)a1 + v23) = v77;
        long long v82 = v19;
        uint64_t v24 = v19[8];
        uint64_t v25 = (char *)a1 + v24;
        uint64_t v26 = (char *)a2 + v24;
        uint64_t v27 = *(void *)((char *)a2 + v24 + 24);
        v21;
        swift_bridgeObjectRetain(v73);
        swift_bridgeObjectRetain(v77);
        if (v27)
        {
          *((void *)v25 + 3) = v27;
          (**(void (***)(char *, char *, uint64_t))(v27 - 8))(v25, v26, v27);
        }
        else
        {
          long long v39 = *(_OWORD *)v26;
          *((_OWORD *)v25 + 1) = *((_OWORD *)v26 + 1);
          *(_OWORD *)uint64_t v25 = v39;
        }
        *((void *)v25 + 4) = *((void *)v26 + 4);
        *((void *)v25 + 5) = *((void *)v26 + 5);
        *((void *)v25 + 6) = *((void *)v26 + 6);
        *((void *)v25 + 7) = *((void *)v26 + 7);
        *((void *)v25 + 8) = *((void *)v26 + 8);
        *((void *)v25 + 9) = *((void *)v26 + 9);
        *((void *)v25 + 10) = *((void *)v26 + 10);
        *((void *)v25 + 11) = *((void *)v26 + 11);
LABEL_29:
        *((void *)v25 + 12) = *((void *)v26 + 12);
        *((void *)v25 + 13) = *((void *)v26 + 13);
        break;
      case 3u:
        *a1 = *a2;
        uint64_t v14 = a2[1];
        a1[1] = v14;
        uint64_t v15 = a2[2];
        swift_bridgeObjectRetain(v14);
        if (v15)
        {
          a1[2] = v15;
          a1[3] = a2[3];
          uint64_t v16 = a2[4];
          a1[4] = v16;
          swift_bridgeObjectRetain(v15);
          swift_bridgeObjectRetain(v16);
        }
        else
        {
          a1[4] = a2[4];
          *((_OWORD *)a1 + 1) = *((_OWORD *)a2 + 1);
        }
        uint64_t v28 = *(int *)(type metadata accessor for MLLinearRegressor.Model(0) + 24);
        uint64_t v29 = type metadata accessor for BaseLinearRegressorModel(0);
        (*(void (**)(char *, char *, uint64_t))(*(void *)(v29 - 8) + 16))((char *)a1 + v28, (char *)a2 + v28, v29);
        uint64_t v30 = (int *)type metadata accessor for MLLinearRegressor(0);
        uint64_t v31 = v30[5];
        uint64_t v32 = *(void **)((char *)a2 + v31);
        *(void *)((char *)a1 + v31) = v32;
        uint64_t v33 = v30[6];
        *(void *)((char *)a1 + v33) = *(void *)((char *)a2 + v33);
        uint64_t v74 = *(void *)((char *)a2 + v33 + 8);
        *(void *)((char *)a1 + v33 + 8) = v74;
        uint64_t v34 = v30[7];
        uint64_t v78 = *(void *)((char *)a2 + v34);
        *(void *)((char *)a1 + v34) = v78;
        long long v82 = v30;
        uint64_t v35 = v30[8];
        uint64_t v36 = (char *)a1 + v35;
        uint64_t v37 = (char *)a2 + v35;
        uint64_t v38 = *(void *)((char *)a2 + v35 + 24);
        v32;
        swift_bridgeObjectRetain(v74);
        swift_bridgeObjectRetain(v78);
        if (v38)
        {
          *((void *)v36 + 3) = v38;
          (**(void (***)(char *, char *, uint64_t))(v38 - 8))(v36, v37, v38);
        }
        else
        {
          long long v40 = *(_OWORD *)v37;
          *((_OWORD *)v36 + 1) = *((_OWORD *)v37 + 1);
          *(_OWORD *)uint64_t v36 = v40;
        }
        *((void *)v36 + 4) = *((void *)v37 + 4);
        *((void *)v36 + 5) = *((void *)v37 + 5);
        *((void *)v36 + 6) = *((void *)v37 + 6);
        *((void *)v36 + 7) = *((void *)v37 + 7);
        *((void *)v36 + 8) = *((void *)v37 + 8);
        v36[72] = v37[72];
        break;
      case 4u:
        JUMPOUT(0x3F4C0);
    }
    uint64_t v63 = v82[9];
    uint64_t v64 = *(void *)((char *)a2 + v63);
    uint64_t v65 = *(void *)((char *)a2 + v63 + 8);
    char v81 = *((unsigned char *)a2 + v63 + 16);
    outlined copy of Result<_RegressorMetrics, Error>(v64, v65, v81);
    *(void *)((char *)a1 + v63) = v64;
    *(void *)((char *)a1 + v63 + 8) = v65;
    *((unsigned char *)a1 + v63 + 16) = v81;
    uint64_t v66 = v82[10];
    uint64_t v67 = (char *)a1 + v66;
    uint64_t v83 = *(void *)((char *)a2 + v66);
    uint64_t v68 = *(void *)((char *)a2 + v66 + 8);
    int v69 = *(_DWORD *)((char *)a2 + v66 + 16);
    outlined copy of Result<_RegressorMetrics, Error>(v83, v68, v69);
    *(void *)((char *)a1 + v66) = v83;
    *((void *)v67 + 1) = v68;
    v67[16] = v69 & 1;
    swift_storeEnumTagMultiPayload(a1, v71, EnumCaseMultiPayload);
  }
  return a1;
}

uint64_t initializeWithTake for MLRegressor(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unsigned int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload(a2, a3);
  switch(EnumCaseMultiPayload)
  {
    case 0u:
      *(_OWORD *)a1 = *(_OWORD *)a2;
      *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
      *(void *)(a1 + 32) = *(void *)(a2 + 32);
      uint64_t v4 = *(int *)(type metadata accessor for TreeRegressorModel(0) + 24);
      uint64_t v5 = type metadata accessor for BaseTreeRegressorModel(0);
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 32))(a1 + v4, a2 + v4, v5);
      uint64_t v6 = (int *)type metadata accessor for MLBoostedTreeRegressor(0);
      goto LABEL_4;
    case 1u:
      *(_OWORD *)a1 = *(_OWORD *)a2;
      *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
      *(void *)(a1 + 32) = *(void *)(a2 + 32);
      uint64_t v12 = *(int *)(type metadata accessor for TreeRegressorModel(0) + 24);
      uint64_t v13 = type metadata accessor for BaseTreeRegressorModel(0);
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v13 - 8) + 32))(a1 + v12, a2 + v12, v13);
      uint64_t v6 = (int *)type metadata accessor for MLDecisionTreeRegressor(0);
      uint64_t v9 = EnumCaseMultiPayload;
      *(void *)(a1 + v6[5]) = *(void *)(a2 + v6[5]);
      *(_OWORD *)(a1 + v6[6]) = *(_OWORD *)(a2 + v6[6]);
      *(void *)(a1 + v6[7]) = *(void *)(a2 + v6[7]);
      uint64_t v14 = v6[8];
      long long v15 = *(_OWORD *)(a2 + v14);
      long long v16 = *(_OWORD *)(a2 + v14 + 16);
      long long v17 = *(_OWORD *)(a2 + v14 + 32);
      *(_OWORD *)(a1 + v14 + 48) = *(_OWORD *)(a2 + v14 + 48);
      *(_OWORD *)(a1 + v14 + 32) = v17;
      *(_OWORD *)(a1 + v14 + 16) = v16;
      *(_OWORD *)(a1 + v14) = v15;
      break;
    case 2u:
      *(_OWORD *)a1 = *(_OWORD *)a2;
      *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
      *(void *)(a1 + 32) = *(void *)(a2 + 32);
      uint64_t v7 = *(int *)(type metadata accessor for TreeRegressorModel(0) + 24);
      uint64_t v8 = type metadata accessor for BaseTreeRegressorModel(0);
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v8 - 8) + 32))(a1 + v7, a2 + v7, v8);
      uint64_t v6 = (int *)type metadata accessor for MLRandomForestRegressor(0);
LABEL_4:
      uint64_t v9 = EnumCaseMultiPayload;
      *(void *)(a1 + v6[5]) = *(void *)(a2 + v6[5]);
      *(_OWORD *)(a1 + v6[6]) = *(_OWORD *)(a2 + v6[6]);
      *(void *)(a1 + v6[7]) = *(void *)(a2 + v6[7]);
      qmemcpy((void *)(a1 + v6[8]), (const void *)(a2 + v6[8]), 0x70uLL);
      break;
    case 3u:
      *(_OWORD *)a1 = *(_OWORD *)a2;
      *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
      *(void *)(a1 + 32) = *(void *)(a2 + 32);
      uint64_t v10 = *(int *)(type metadata accessor for MLLinearRegressor.Model(0) + 24);
      uint64_t v11 = type metadata accessor for BaseLinearRegressorModel(0);
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v11 - 8) + 32))(a1 + v10, a2 + v10, v11);
      uint64_t v6 = (int *)type metadata accessor for MLLinearRegressor(0);
      uint64_t v9 = EnumCaseMultiPayload;
      *(void *)(a1 + v6[5]) = *(void *)(a2 + v6[5]);
      *(_OWORD *)(a1 + v6[6]) = *(_OWORD *)(a2 + v6[6]);
      *(void *)(a1 + v6[7]) = *(void *)(a2 + v6[7]);
      qmemcpy((void *)(a1 + v6[8]), (const void *)(a2 + v6[8]), 0x49uLL);
      break;
  }
  uint64_t v18 = v6[9];
  *(unsigned char *)(a1 + v18 + 16) = *(unsigned char *)(a2 + v18 + 16);
  *(_OWORD *)(a1 + v18) = *(_OWORD *)(a2 + v18);
  uint64_t v19 = v6[10];
  *(_OWORD *)(a1 + v19) = *(_OWORD *)(a2 + v19);
  *(unsigned char *)(a1 + v19 + 16) = *(unsigned char *)(a2 + v19 + 16);
  swift_storeEnumTagMultiPayload(a1, a3, v9);
  return a1;
}

uint64_t assignWithTake for MLRegressor(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a1 != a2)
  {
    outlined destroy of MLActivityClassifier.ModelParameters(a1, type metadata accessor for MLRegressor);
    unsigned int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload(a2, a3);
    switch(EnumCaseMultiPayload)
    {
      case 0u:
        *(_OWORD *)a1 = *(_OWORD *)a2;
        *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
        *(void *)(a1 + 32) = *(void *)(a2 + 32);
        uint64_t v4 = *(int *)(type metadata accessor for TreeRegressorModel(0) + 24);
        uint64_t v5 = type metadata accessor for BaseTreeRegressorModel(0);
        (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 32))(a1 + v4, a2 + v4, v5);
        uint64_t v6 = (int *)type metadata accessor for MLBoostedTreeRegressor(0);
        goto LABEL_6;
      case 1u:
        *(_OWORD *)a1 = *(_OWORD *)a2;
        *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
        *(void *)(a1 + 32) = *(void *)(a2 + 32);
        uint64_t v7 = *(int *)(type metadata accessor for TreeRegressorModel(0) + 24);
        uint64_t v8 = type metadata accessor for BaseTreeRegressorModel(0);
        (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v8 - 8) + 32))(a1 + v7, a2 + v7, v8);
        uint64_t v6 = (int *)type metadata accessor for MLDecisionTreeRegressor(0);
        *(void *)(a1 + v6[5]) = *(void *)(a2 + v6[5]);
        *(_OWORD *)(a1 + v6[6]) = *(_OWORD *)(a2 + v6[6]);
        *(void *)(a1 + v6[7]) = *(void *)(a2 + v6[7]);
        uint64_t v9 = v6[8];
        long long v10 = *(_OWORD *)(a2 + v9);
        long long v11 = *(_OWORD *)(a2 + v9 + 16);
        long long v12 = *(_OWORD *)(a2 + v9 + 32);
        *(_OWORD *)(a1 + v9 + 48) = *(_OWORD *)(a2 + v9 + 48);
        *(_OWORD *)(a1 + v9 + 32) = v12;
        *(_OWORD *)(a1 + v9 + 16) = v11;
        *(_OWORD *)(a1 + v9) = v10;
        break;
      case 2u:
        *(_OWORD *)a1 = *(_OWORD *)a2;
        *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
        *(void *)(a1 + 32) = *(void *)(a2 + 32);
        uint64_t v13 = *(int *)(type metadata accessor for TreeRegressorModel(0) + 24);
        uint64_t v14 = type metadata accessor for BaseTreeRegressorModel(0);
        (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v14 - 8) + 32))(a1 + v13, a2 + v13, v14);
        uint64_t v6 = (int *)type metadata accessor for MLRandomForestRegressor(0);
LABEL_6:
        *(void *)(a1 + v6[5]) = *(void *)(a2 + v6[5]);
        *(_OWORD *)(a1 + v6[6]) = *(_OWORD *)(a2 + v6[6]);
        *(void *)(a1 + v6[7]) = *(void *)(a2 + v6[7]);
        qmemcpy((void *)(a1 + v6[8]), (const void *)(a2 + v6[8]), 0x70uLL);
        break;
      case 3u:
        *(_OWORD *)a1 = *(_OWORD *)a2;
        *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
        *(void *)(a1 + 32) = *(void *)(a2 + 32);
        uint64_t v15 = *(int *)(type metadata accessor for MLLinearRegressor.Model(0) + 24);
        uint64_t v16 = type metadata accessor for BaseLinearRegressorModel(0);
        (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v16 - 8) + 32))(a1 + v15, a2 + v15, v16);
        uint64_t v6 = (int *)type metadata accessor for MLLinearRegressor(0);
        *(void *)(a1 + v6[5]) = *(void *)(a2 + v6[5]);
        *(_OWORD *)(a1 + v6[6]) = *(_OWORD *)(a2 + v6[6]);
        *(void *)(a1 + v6[7]) = *(void *)(a2 + v6[7]);
        qmemcpy((void *)(a1 + v6[8]), (const void *)(a2 + v6[8]), 0x49uLL);
        break;
    }
    uint64_t v17 = v6[9];
    *(unsigned char *)(a1 + v17 + 16) = *(unsigned char *)(a2 + v17 + 16);
    *(_OWORD *)(a1 + v17) = *(_OWORD *)(a2 + v17);
    uint64_t v18 = v6[10];
    *(_OWORD *)(a1 + v18) = *(_OWORD *)(a2 + v18);
    *(unsigned char *)(a1 + v18 + 16) = *(unsigned char *)(a2 + v18 + 16);
    swift_storeEnumTagMultiPayload(a1, a3, EnumCaseMultiPayload);
  }
  return a1;
}

uint64_t type metadata completion function for MLRegressor(uint64_t a1)
{
  uint64_t result = type metadata accessor for MLBoostedTreeRegressor(319);
  if (v2 <= 0x3F)
  {
    v8[0] = *(void *)(result - 8) + 64;
    uint64_t result = type metadata accessor for MLDecisionTreeRegressor(319);
    if (v3 <= 0x3F)
    {
      v8[1] = *(void *)(result - 8) + 64;
      uint64_t result = type metadata accessor for MLRandomForestRegressor(319);
      if (v4 <= 0x3F)
      {
        _OWORD v8[2] = *(void *)(result - 8) + 64;
        uint64_t result = type metadata accessor for MLLinearRegressor(319);
        if (v7 <= 0x3F)
        {
          v8[3] = *(void *)(result - 8) + 64;
          swift_initEnumMetadataMultiPayload(a1, 256, 4, v8, v5, v6);
          return 0;
        }
      }
    }
  }
  return result;
}

void *specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(char a1, int64_t a2, char a3, uint64_t a4, uint64_t *a5, uint64_t a6, void (*a7)(void, int64_t, void *, uint64_t, uint64_t), void (*a8)(uint64_t, int64_t, void *))
{
  int64_t v10 = a2;
  if (a3)
  {
    unint64_t v11 = *(void *)(a4 + 24);
    if ((uint64_t)(v11 >> 1) >= a2)
    {
      int64_t v10 = *(void *)(a4 + 24) >> 1;
    }
    else
    {
      if ((uint64_t)((v11 >> 1) + 0x4000000000000000) < 0) {
        BUG();
      }
      int64_t v12 = v11 & 0xFFFFFFFFFFFFFFFELL;
      if (v12 > a2) {
        int64_t v10 = v12;
      }
    }
  }
  int64_t v13 = *(void *)(a4 + 16);
  if (v10 <= v13) {
    int64_t v10 = *(void *)(a4 + 16);
  }
  if (v10)
  {
    uint64_t v14 = __swift_instantiateConcreteTypeFromMangledName(a5);
    uint64_t v15 = (void *)swift_allocObject(v14, 24 * v10 + 32, 7);
    long long v16 = (uint64_t)(_swift_stdlib_malloc_size_0(v15) - 32);
    void v15[2] = v13;
    void v15[3] = 2 * (v16 / 24);
  }
  else
  {
    uint64_t v15 = _swiftEmptyArrayStorage;
  }
  uint64_t v17 = v15 + 4;
  if (a1)
  {
    a8(a4 + 32, v13, v17);
    *(void *)(a4 + 16) = 0;
    swift_bridgeObjectRelease(a4);
  }
  else
  {
    a7(0, v13, v17, a4, a6);
  }
  return v15;
}

char *specialized _ArrayBuffer._copyContents(subRange:initializing:)(uint64_t a1, uint64_t a2, char *a3, uint64_t a4)
{
  uint64_t v4 = a2 - a1;
  if (__OFSUB__(a2, a1)) {
    BUG();
  }
  if (a2 - a1 < 0)
  {
    _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize with negative count", 51, 2, "Swift/UnsafePointer.swift", 25, 2, 1090, 1);
LABEL_9:
    BUG();
  }
  uint64_t v6 = (char *)(a4 + 8 * a1 + 32);
  unint64_t v7 = &a3[8 * v4];
  if (v6 < v7 && a4 + 8 * a1 + 8 * v4 + 32 > (unint64_t)a3)
  {
    _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize overlapping range", 49, 2, "Swift/UnsafePointer.swift", 25, 2, 1092, 1);
    goto LABEL_9;
  }
  memcpy(a3, v6, 8 * v4);
  swift_bridgeObjectRelease(a4);
  return v7;
}

{
  uint64_t v4;
  char *v6;
  char *v7;

  uint64_t v4 = a2 - a1;
  if (__OFSUB__(a2, a1)) {
    BUG();
  }
  if (a2 - a1 < 0)
  {
    _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize with negative count", 51, 2, "Swift/UnsafePointer.swift", 25, 2, 1090, 1);
LABEL_9:
    BUG();
  }
  uint64_t v6 = (char *)(a4 + 8 * a1 + 32);
  unint64_t v7 = &a3[8 * v4];
  if (v6 < v7 && a4 + 8 * a1 + 8 * v4 + 32 > (unint64_t)a3)
  {
    _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize overlapping range", 49, 2, "Swift/UnsafePointer.swift", 25, 2, 1092, 1);
    goto LABEL_9;
  }
  memcpy(a3, v6, 8 * v4);
  swift_bridgeObjectRelease(a4);
  return v7;
}

{
  uint64_t v4;
  char *v6;
  char *v7;

  uint64_t v4 = a2 - a1;
  if (__OFSUB__(a2, a1)) {
    BUG();
  }
  if (a2 - a1 < 0)
  {
    _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize with negative count", 51, 2, "Swift/UnsafePointer.swift", 25, 2, 1090, 1);
LABEL_9:
    BUG();
  }
  uint64_t v6 = (char *)(a4 + 4 * a1 + 32);
  unint64_t v7 = &a3[4 * v4];
  if (v6 < v7 && a4 + 4 * a1 + 4 * v4 + 32 > (unint64_t)a3)
  {
    _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize overlapping range", 49, 2, "Swift/UnsafePointer.swift", 25, 2, 1092, 1);
    goto LABEL_9;
  }
  memcpy(a3, v6, 4 * v4);
  swift_bridgeObjectRelease(a4);
  return v7;
}

{
  uint64_t v4;
  uint64_t v6;
  char *v7;
  size_t v8;
  char *v9;

  uint64_t v4 = a2 - a1;
  if (__OFSUB__(a2, a1)) {
    BUG();
  }
  if (a2 - a1 < 0)
  {
    _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize with negative count", 51, 2, "Swift/UnsafePointer.swift", 25, 2, 1090, 1);
LABEL_9:
    BUG();
  }
  uint64_t v6 = a1 << 6;
  unint64_t v7 = (char *)(a4 + v6 + 32);
  uint64_t v8 = v4 << 6;
  uint64_t v9 = &a3[v8];
  if (v7 < &a3[v8] && v8 + a4 + v6 + 32 > (unint64_t)a3)
  {
    _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize overlapping range", 49, 2, "Swift/UnsafePointer.swift", 25, 2, 1092, 1);
    goto LABEL_9;
  }
  memcpy(a3, v7, v8);
  swift_bridgeObjectRelease(a4);
  return v9;
}

{
  uint64_t v4;
  uint64_t v6;
  char *v7;
  size_t v8;
  char *v9;

  uint64_t v4 = a2 - a1;
  if (__OFSUB__(a2, a1)) {
    BUG();
  }
  if (a2 - a1 < 0)
  {
    _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize with negative count", 51, 2, "Swift/UnsafePointer.swift", 25, 2, 1090, 1);
LABEL_9:
    BUG();
  }
  uint64_t v6 = 16 * a1;
  unint64_t v7 = (char *)(a4 + v6 + 32);
  uint64_t v8 = 16 * v4;
  uint64_t v9 = &a3[v8];
  if (v7 < &a3[v8] && v8 + a4 + v6 + 32 > (unint64_t)a3)
  {
    _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize overlapping range", 49, 2, "Swift/UnsafePointer.swift", 25, 2, 1092, 1);
    goto LABEL_9;
  }
  memcpy(a3, v7, v8);
  swift_bridgeObjectRelease(a4);
  return v9;
}

{
  uint64_t v4;
  uint64_t v6;
  char *v7;
  size_t v8;
  char *v9;

  uint64_t v4 = a2 - a1;
  if (__OFSUB__(a2, a1)) {
    BUG();
  }
  if (a2 - a1 < 0)
  {
    _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize with negative count", 51, 2, "Swift/UnsafePointer.swift", 25, 2, 1090, 1);
LABEL_9:
    BUG();
  }
  uint64_t v6 = 32 * a1;
  unint64_t v7 = (char *)(a4 + v6 + 32);
  uint64_t v8 = 32 * v4;
  uint64_t v9 = &a3[v8];
  if (v7 < &a3[v8] && v8 + a4 + v6 + 32 > (unint64_t)a3)
  {
    _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize overlapping range", 49, 2, "Swift/UnsafePointer.swift", 25, 2, 1092, 1);
    goto LABEL_9;
  }
  memcpy(a3, v7, v8);
  swift_bridgeObjectRelease(a4);
  return v9;
}

{
  uint64_t v4;
  uint64_t v6;
  char *v7;
  size_t v8;
  char *v9;

  uint64_t v4 = a2 - a1;
  if (__OFSUB__(a2, a1)) {
    BUG();
  }
  if (a2 - a1 < 0)
  {
    _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize with negative count", 51, 2, "Swift/UnsafePointer.swift", 25, 2, 1090, 1);
LABEL_9:
    BUG();
  }
  uint64_t v6 = 16 * a1;
  unint64_t v7 = (char *)(a4 + v6 + 32);
  uint64_t v8 = 16 * v4;
  uint64_t v9 = &a3[v8];
  if (v7 < &a3[v8] && v8 + a4 + v6 + 32 > (unint64_t)a3)
  {
    _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize overlapping range", 49, 2, "Swift/UnsafePointer.swift", 25, 2, 1092, 1);
    goto LABEL_9;
  }
  memcpy(a3, v7, v8);
  swift_bridgeObjectRelease(a4);
  return v9;
}

{
  uint64_t v4;
  uint64_t v6;
  char *v7;
  size_t v8;
  char *v9;

  uint64_t v4 = a2 - a1;
  if (__OFSUB__(a2, a1)) {
    BUG();
  }
  if (a2 - a1 < 0)
  {
    _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize with negative count", 51, 2, "Swift/UnsafePointer.swift", 25, 2, 1090, 1);
LABEL_9:
    BUG();
  }
  uint64_t v6 = 16 * a1;
  unint64_t v7 = (char *)(a4 + v6 + 32);
  uint64_t v8 = 16 * v4;
  uint64_t v9 = &a3[v8];
  if (v7 < &a3[v8] && v8 + a4 + v6 + 32 > (unint64_t)a3)
  {
    _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize overlapping range", 49, 2, "Swift/UnsafePointer.swift", 25, 2, 1092, 1);
    goto LABEL_9;
  }
  memcpy(a3, v7, v8);
  swift_bridgeObjectRelease(a4);
  return v9;
}

{
  uint64_t v4;
  uint64_t v6;
  char *v7;
  size_t v8;
  char *v9;

  uint64_t v4 = a2 - a1;
  if (__OFSUB__(a2, a1)) {
    BUG();
  }
  if (a2 - a1 < 0)
  {
    _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize with negative count", 51, 2, "Swift/UnsafePointer.swift", 25, 2, 1090, 1);
LABEL_9:
    BUG();
  }
  uint64_t v6 = 16 * a1;
  unint64_t v7 = (char *)(a4 + v6 + 32);
  uint64_t v8 = 16 * v4;
  uint64_t v9 = &a3[v8];
  if (v7 < &a3[v8] && v8 + a4 + v6 + 32 > (unint64_t)a3)
  {
    _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize overlapping range", 49, 2, "Swift/UnsafePointer.swift", 25, 2, 1092, 1);
    goto LABEL_9;
  }
  memcpy(a3, v7, v8);
  swift_bridgeObjectRelease(a4);
  return v9;
}

{
  uint64_t v4;
  char *v6;
  char *v7;

  uint64_t v4 = a2 - a1;
  if (__OFSUB__(a2, a1)) {
    BUG();
  }
  if (a2 - a1 < 0)
  {
    _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize with negative count", 51, 2, "Swift/UnsafePointer.swift", 25, 2, 1090, 1);
LABEL_9:
    BUG();
  }
  uint64_t v6 = (char *)(a4 + 4 * a1 + 32);
  unint64_t v7 = &a3[4 * v4];
  if (v6 < v7 && a4 + 4 * a1 + 4 * v4 + 32 > (unint64_t)a3)
  {
    _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize overlapping range", 49, 2, "Swift/UnsafePointer.swift", 25, 2, 1092, 1);
    goto LABEL_9;
  }
  memcpy(a3, v6, 4 * v4);
  swift_bridgeObjectRelease(a4);
  return v7;
}

{
  size_t v4;
  char *v6;
  char *v7;

  uint64_t v4 = a2 - a1;
  if (__OFSUB__(a2, a1)) {
    BUG();
  }
  if (a2 - a1 < 0)
  {
    _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize with negative count", 51, 2, "Swift/UnsafePointer.swift", 25, 2, 1090, 1);
LABEL_9:
    BUG();
  }
  uint64_t v6 = (char *)(a4 + a1 + 32);
  unint64_t v7 = &a3[v4];
  if (v6 < &a3[v4] && v4 + a4 + a1 + 32 > (unint64_t)a3)
  {
    _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize overlapping range", 49, 2, "Swift/UnsafePointer.swift", 25, 2, 1092, 1);
    goto LABEL_9;
  }
  memcpy(a3, v6, v4);
  swift_bridgeObjectRelease(a4);
  return v7;
}

{
  uint64_t v4;
  char *v6;
  char *v7;

  uint64_t v4 = a2 - a1;
  if (__OFSUB__(a2, a1)) {
    BUG();
  }
  if (a2 - a1 < 0)
  {
    _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize with negative count", 51, 2, "Swift/UnsafePointer.swift", 25, 2, 1090, 1);
LABEL_9:
    BUG();
  }
  uint64_t v6 = (char *)(a4 + 4 * a1 + 32);
  unint64_t v7 = &a3[4 * v4];
  if (v6 < v7 && a4 + 4 * a1 + 4 * v4 + 32 > (unint64_t)a3)
  {
    _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize overlapping range", 49, 2, "Swift/UnsafePointer.swift", 25, 2, 1092, 1);
    goto LABEL_9;
  }
  memcpy(a3, v6, 4 * v4);
  swift_bridgeObjectRelease(a4);
  return v7;
}

unint64_t specialized _ArrayBuffer._copyContents(subRange:initializing:)(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v4 = a2 - a1;
  if (__OFSUB__(a2, a1)) {
    BUG();
  }
  if (a2 - a1 < 0)
  {
    _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize with negative count", 51, 2, "Swift/UnsafePointer.swift", 25, 2, 1090, 1);
LABEL_9:
    BUG();
  }
  uint64_t v6 = 16 * a1;
  unint64_t v7 = a4 + v6 + 32;
  unint64_t v8 = a3 + 16 * v4;
  if (v7 < v8 && a4 + v6 + 16 * v4 + 32 > a3)
  {
    _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize overlapping range", 49, 2, "Swift/UnsafePointer.swift", 25, 2, 1092, 1);
    goto LABEL_9;
  }
  swift_arrayInitWithCopy(a3, v7, v4, &type metadata for String);
  swift_bridgeObjectRelease(a4);
  return v8;
}

{
  uint64_t v4;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;

  uint64_t v4 = a2 - a1;
  if (__OFSUB__(a2, a1)) {
    BUG();
  }
  if (a2 - a1 < 0)
  {
    _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize with negative count", 51, 2, "Swift/UnsafePointer.swift", 25, 2, 1090, 1);
LABEL_9:
    BUG();
  }
  uint64_t v6 = 16 * a1;
  unint64_t v7 = a4 + v6 + 32;
  unint64_t v8 = a3 + 16 * v4;
  if (v7 < v8 && a4 + v6 + 16 * v4 + 32 > a3)
  {
    _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize overlapping range", 49, 2, "Swift/UnsafePointer.swift", 25, 2, 1092, 1);
    goto LABEL_9;
  }
  swift_arrayInitWithCopy(a3, v7, v4, &type metadata for Character);
  swift_bridgeObjectRelease(a4);
  return v8;
}

{
  uint64_t v4;
  unint64_t v6;
  unint64_t v7;

  uint64_t v4 = a2 - a1;
  if (__OFSUB__(a2, a1)) {
    BUG();
  }
  if (a2 - a1 < 0)
  {
    _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize with negative count", 51, 2, "Swift/UnsafePointer.swift", 25, 2, 1090, 1);
LABEL_9:
    BUG();
  }
  uint64_t v6 = a4 + 8 * a1 + 32;
  unint64_t v7 = a3 + 8 * v4;
  if (v6 < v7 && a4 + 8 * a1 + 8 * v4 + 32 > a3)
  {
    _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize overlapping range", 49, 2, "Swift/UnsafePointer.swift", 25, 2, 1092, 1);
    goto LABEL_9;
  }
  swift_arrayInitWithCopy(a3, v6, v4, &type metadata for MLDataValue.MultiArrayType);
  swift_bridgeObjectRelease(a4);
  return v7;
}

{
  uint64_t v4;
  char v5;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;

  uint64_t v4 = a2 - a1;
  if (__OFSUB__(a2, a1)) {
    BUG();
  }
  if (a2 - a1 < 0)
  {
    _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize with negative count", 51, 2, "Swift/UnsafePointer.swift", 25, 2, 1090, 1);
LABEL_9:
    BUG();
  }
  uint64_t v5 = a4;
  unint64_t v7 = a4 + 24 * a1 + 32;
  unint64_t v8 = a3 + 24 * v4;
  if (v7 < v8 && 24 * v4 + a4 + 24 * a1 + 32 > a3)
  {
    _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize overlapping range", 49, 2, "Swift/UnsafePointer.swift", 25, 2, 1092, 1);
    goto LABEL_9;
  }
  uint64_t v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (windowKeypoints: MLMultiArray, range: Range<Int>));
  swift_arrayInitWithCopy(a3, v7, v4, v9);
  swift_bridgeObjectRelease(v5);
  return v8;
}

{
  uint64_t v4;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;

  uint64_t v4 = a2 - a1;
  if (__OFSUB__(a2, a1)) {
    BUG();
  }
  if (a2 - a1 < 0)
  {
    _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize with negative count", 51, 2, "Swift/UnsafePointer.swift", 25, 2, 1090, 1);
LABEL_9:
    BUG();
  }
  uint64_t v6 = 32 * a1;
  unint64_t v7 = a4 + v6 + 32;
  unint64_t v8 = a3 + 32 * v4;
  if (v7 < v8 && a4 + v6 + 32 * v4 + 32 > a3)
  {
    _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize overlapping range", 49, 2, "Swift/UnsafePointer.swift", 25, 2, 1092, 1);
    goto LABEL_9;
  }
  swift_arrayInitWithCopy(a3, v7, v4, &type metadata for MLObjectDetector.AnnotatedPredictionForLabel);
  swift_bridgeObjectRelease(a4);
  return v8;
}

{
  uint64_t v4;
  unint64_t v6;
  unint64_t v7;

  uint64_t v4 = a2 - a1;
  if (__OFSUB__(a2, a1)) {
    BUG();
  }
  if (a2 - a1 < 0)
  {
    _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize with negative count", 51, 2, "Swift/UnsafePointer.swift", 25, 2, 1090, 1);
LABEL_9:
    BUG();
  }
  uint64_t v6 = a4 + 56 * a1 + 32;
  unint64_t v7 = a3 + 56 * v4;
  if (v6 < v7 && 56 * v4 + a4 + 56 * a1 + 32 > a3)
  {
    _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize overlapping range", 49, 2, "Swift/UnsafePointer.swift", 25, 2, 1092, 1);
    goto LABEL_9;
  }
  swift_arrayInitWithCopy(a3, v6, v4, &type metadata for MLObjectDetector.ObjectAnnotation);
  swift_bridgeObjectRelease(a4);
  return v7;
}

{
  uint64_t v4;
  char v5;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;

  uint64_t v4 = a2 - a1;
  if (__OFSUB__(a2, a1)) {
    BUG();
  }
  if (a2 - a1 < 0)
  {
    _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize with negative count", 51, 2, "Swift/UnsafePointer.swift", 25, 2, 1090, 1);
LABEL_9:
    BUG();
  }
  uint64_t v5 = a4;
  unint64_t v7 = a1 << 6;
  unint64_t v8 = a4 + v7 + 32;
  uint64_t v9 = a3 + (v4 << 6);
  if (v8 < v9 && a4 + v7 + (v4 << 6) + 32 > a3)
  {
    _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize overlapping range", 49, 2, "Swift/UnsafePointer.swift", 25, 2, 1092, 1);
    goto LABEL_9;
  }
  int64_t v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Recommendation<MLRecommender.Identifier, MLRecommender.Identifier>);
  swift_arrayInitWithCopy(a3, v8, v4, v10);
  swift_bridgeObjectRelease(v5);
  return v9;
}

{
  uint64_t v4;
  char v5;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;

  uint64_t v4 = a2 - a1;
  if (__OFSUB__(a2, a1)) {
    BUG();
  }
  if (a2 - a1 < 0)
  {
    _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize with negative count", 51, 2, "Swift/UnsafePointer.swift", 25, 2, 1090, 1);
LABEL_9:
    BUG();
  }
  uint64_t v5 = a4;
  unint64_t v7 = a4 + 48 * a1 + 32;
  unint64_t v8 = a3 + 48 * v4;
  if (v7 < v8 && 48 * v4 + a4 + 48 * a1 + 32 > a3)
  {
    _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize overlapping range", 49, 2, "Swift/UnsafePointer.swift", 25, 2, 1092, 1);
    goto LABEL_9;
  }
  uint64_t v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (user: MLRecommender.Identifier, item: MLRecommender.Identifier));
  swift_arrayInitWithCopy(a3, v7, v4, v9);
  swift_bridgeObjectRelease(v5);
  return v8;
}

{
  uint64_t v4;
  char v5;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;

  uint64_t v4 = a2 - a1;
  if (__OFSUB__(a2, a1)) {
    BUG();
  }
  if (a2 - a1 < 0)
  {
    _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize with negative count", 51, 2, "Swift/UnsafePointer.swift", 25, 2, 1090, 1);
LABEL_9:
    BUG();
  }
  uint64_t v5 = a4;
  unint64_t v7 = a4 + 56 * a1 + 32;
  unint64_t v8 = a3 + 56 * v4;
  if (v7 < v8 && 56 * v4 + a4 + 56 * a1 + 32 > a3)
  {
    _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize overlapping range", 49, 2, "Swift/UnsafePointer.swift", 25, 2, 1092, 1);
    goto LABEL_9;
  }
  uint64_t v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for RecommendationMetrics<MLRecommender.Identifier>);
  swift_arrayInitWithCopy(a3, v7, v4, v9);
  swift_bridgeObjectRelease(v5);
  return v8;
}

{
  uint64_t v4;
  char v5;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;

  uint64_t v4 = a2 - a1;
  if (__OFSUB__(a2, a1)) {
    BUG();
  }
  if (a2 - a1 < 0)
  {
    _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize with negative count", 51, 2, "Swift/UnsafePointer.swift", 25, 2, 1090, 1);
LABEL_9:
    BUG();
  }
  uint64_t v5 = a4;
  unint64_t v7 = 32 * a1;
  unint64_t v8 = a4 + v7 + 32;
  uint64_t v9 = a3 + 32 * v4;
  if (v8 < v9 && a4 + v7 + 32 * v4 + 32 > a3)
  {
    _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize overlapping range", 49, 2, "Swift/UnsafePointer.swift", 25, 2, 1092, 1);
    goto LABEL_9;
  }
  int64_t v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (MLRecommender.Identifier, score: Double));
  swift_arrayInitWithCopy(a3, v8, v4, v10);
  swift_bridgeObjectRelease(v5);
  return v9;
}

{
  uint64_t v4;
  char v5;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;

  uint64_t v4 = a2 - a1;
  if (__OFSUB__(a2, a1)) {
    BUG();
  }
  if (a2 - a1 < 0)
  {
    _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize with negative count", 51, 2, "Swift/UnsafePointer.swift", 25, 2, 1090, 1);
LABEL_9:
    BUG();
  }
  uint64_t v5 = a4;
  unint64_t v7 = 32 * a1;
  unint64_t v8 = a4 + v7 + 32;
  uint64_t v9 = a3 + 32 * v4;
  if (v8 < v9 && a4 + v7 + 32 * v4 + 32 > a3)
  {
    _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize overlapping range", 49, 2, "Swift/UnsafePointer.swift", 25, 2, 1092, 1);
    goto LABEL_9;
  }
  int64_t v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (predicted: String, label: String));
  swift_arrayInitWithCopy(a3, v8, v4, v10);
  swift_bridgeObjectRelease(v5);
  return v9;
}

{
  uint64_t v4;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;

  uint64_t v4 = a2 - a1;
  if (__OFSUB__(a2, a1)) {
    BUG();
  }
  if (a2 - a1 < 0)
  {
    _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize with negative count", 51, 2, "Swift/UnsafePointer.swift", 25, 2, 1090, 1);
LABEL_9:
    BUG();
  }
  uint64_t v6 = 32 * a1;
  unint64_t v7 = a4 + v6 + 32;
  unint64_t v8 = a3 + 32 * v4;
  if (v7 < v8 && a4 + v6 + 32 * v4 + 32 > a3)
  {
    _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize overlapping range", 49, 2, "Swift/UnsafePointer.swift", 25, 2, 1092, 1);
    goto LABEL_9;
  }
  swift_arrayInitWithCopy(a3, v7, v4, &type metadata for ColumnDescriptor);
  swift_bridgeObjectRelease(a4);
  return v8;
}

{
  uint64_t v4;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;

  uint64_t v4 = a2 - a1;
  if (__OFSUB__(a2, a1)) {
    BUG();
  }
  if (a2 - a1 < 0)
  {
    _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize with negative count", 51, 2, "Swift/UnsafePointer.swift", 25, 2, 1090, 1);
LABEL_9:
    BUG();
  }
  uint64_t v6 = 32 * a1;
  unint64_t v7 = a4 + v6 + 32;
  unint64_t v8 = a3 + 32 * v4;
  if (v7 < v8 && a4 + v6 + 32 * v4 + 32 > a3)
  {
    _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize overlapping range", 49, 2, "Swift/UnsafePointer.swift", 25, 2, 1092, 1);
    goto LABEL_9;
  }
  swift_arrayInitWithCopy(a3, v7, v4, (char *)&type metadata for Any + 8);
  swift_bridgeObjectRelease(a4);
  return v8;
}

{
  uint64_t v4;
  char v5;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;

  uint64_t v4 = a2 - a1;
  if (__OFSUB__(a2, a1)) {
    BUG();
  }
  if (a2 - a1 < 0)
  {
    _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize with negative count", 51, 2, "Swift/UnsafePointer.swift", 25, 2, 1090, 1);
LABEL_9:
    BUG();
  }
  uint64_t v5 = a4;
  unint64_t v7 = 32 * a1;
  unint64_t v8 = a4 + v7 + 32;
  uint64_t v9 = a3 + 32 * v4;
  if (v8 < v9 && a4 + v7 + 32 * v4 + 32 > a3)
  {
    _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize overlapping range", 49, 2, "Swift/UnsafePointer.swift", 25, 2, 1092, 1);
    goto LABEL_9;
  }
  int64_t v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Any?);
  swift_arrayInitWithCopy(a3, v8, v4, v10);
  swift_bridgeObjectRelease(v5);
  return v9;
}

unint64_t specialized _ArrayBuffer._copyContents(subRange:initializing:)(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4, uint64_t *a5)
{
  uint64_t v5 = a2 - a1;
  if (__OFSUB__(a2, a1)) {
    BUG();
  }
  if (a2 - a1 < 0)
  {
    _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize with negative count", 51, 2, "Swift/UnsafePointer.swift", 25, 2, 1090, 1);
LABEL_9:
    BUG();
  }
  char v6 = a4;
  unint64_t v8 = a4 + 40 * a1 + 32;
  unint64_t v9 = a3 + 40 * v5;
  if (v8 < v9 && 40 * v5 + a4 + 40 * a1 + 32 > a3)
  {
    _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize overlapping range", 49, 2, "Swift/UnsafePointer.swift", 25, 2, 1092, 1);
    goto LABEL_9;
  }
  uint64_t v10 = __swift_instantiateConcreteTypeFromMangledName(a5);
  swift_arrayInitWithCopy(a3, v8, v5, v10);
  swift_bridgeObjectRelease(v6);
  return v9;
}

{
  uint64_t v5;
  char v6;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;

  uint64_t v5 = a2 - a1;
  if (__OFSUB__(a2, a1)) {
    BUG();
  }
  if (a2 - a1 < 0)
  {
    _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize with negative count", 51, 2, "Swift/UnsafePointer.swift", 25, 2, 1090, 1);
LABEL_9:
    BUG();
  }
  char v6 = a4;
  unint64_t v8 = a4 + 56 * a1 + 32;
  unint64_t v9 = a3 + 56 * v5;
  if (v8 < v9 && 56 * v5 + a4 + 56 * a1 + 32 > a3)
  {
    _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize overlapping range", 49, 2, "Swift/UnsafePointer.swift", 25, 2, 1092, 1);
    goto LABEL_9;
  }
  uint64_t v10 = __swift_instantiateConcreteTypeFromMangledName(a5);
  swift_arrayInitWithCopy(a3, v8, v5, v10);
  swift_bridgeObjectRelease(v6);
  return v9;
}

{
  uint64_t v5;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;

  uint64_t v5 = a2 - a1;
  if (__OFSUB__(a2, a1)) {
    BUG();
  }
  if (a2 - a1 < 0)
  {
    _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize with negative count", 51, 2, "Swift/UnsafePointer.swift", 25, 2, 1090, 1);
LABEL_9:
    BUG();
  }
  unint64_t v8 = __swift_instantiateConcreteTypeFromMangledName(a5);
  unint64_t v9 = *(void *)(v8 - 8);
  uint64_t v10 = a4 + ((*(unsigned __int8 *)(v9 + 80) + 32) & ~*(unsigned __int8 *)(v9 + 80));
  unint64_t v11 = *(void *)(v9 + 72);
  int64_t v12 = v10 + v11 * a1;
  int64_t v13 = v5 * v11;
  uint64_t v14 = a3 + v13;
  if (v12 < a3 + v13 && v12 + v13 > a3)
  {
    _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize overlapping range", 49, 2, "Swift/UnsafePointer.swift", 25, 2, 1092, 1);
    goto LABEL_9;
  }
  swift_arrayInitWithCopy(a3, v12, v5, v8);
  swift_bridgeObjectRelease(a4);
  return v14;
}

{
  uint64_t v5;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;

  uint64_t v5 = a2 - a1;
  if (__OFSUB__(a2, a1)) {
    BUG();
  }
  if (a2 - a1 < 0)
  {
    _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize with negative count", 51, 2, "Swift/UnsafePointer.swift", 25, 2, 1090, 1);
LABEL_9:
    BUG();
  }
  unint64_t v8 = a4 + 8 * a1 + 32;
  unint64_t v9 = a3 + 8 * v5;
  if (v8 < v9 && a4 + 8 * a1 + 8 * v5 + 32 > a3)
  {
    _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize overlapping range", 49, 2, "Swift/UnsafePointer.swift", 25, 2, 1092, 1);
    goto LABEL_9;
  }
  uint64_t v10 = __swift_instantiateConcreteTypeFromMangledName(a5);
  swift_arrayInitWithCopy(a3, v8, v5, v10);
  swift_bridgeObjectRelease(a4);
  return v9;
}

unint64_t specialized _ArrayBuffer._copyContents(subRange:initializing:)(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5 = a2 - a1;
  if (__OFSUB__(a2, a1)) {
    BUG();
  }
  if (a2 - a1 < 0)
  {
    _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize with negative count", 51, 2, "Swift/UnsafePointer.swift", 25, 2, 1090, 1);
LABEL_9:
    BUG();
  }
  unint64_t v7 = a4 + 24 * a1 + 32;
  unint64_t v8 = a3 + 24 * v5;
  if (v7 < v8 && 24 * v5 + a4 + 24 * a1 + 32 > a3)
  {
    _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize overlapping range", 49, 2, "Swift/UnsafePointer.swift", 25, 2, 1092, 1);
    goto LABEL_9;
  }
  swift_arrayInitWithCopy(a3, v7, v5, a5);
  swift_bridgeObjectRelease(a4);
  return v8;
}

{
  uint64_t v5;
  unint64_t v7;
  unint64_t v8;

  uint64_t v5 = a2 - a1;
  if (__OFSUB__(a2, a1)) {
    BUG();
  }
  if (a2 - a1 < 0)
  {
    _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize with negative count", 51, 2, "Swift/UnsafePointer.swift", 25, 2, 1090, 1);
LABEL_9:
    BUG();
  }
  unint64_t v7 = a4 + 24 * a1 + 32;
  unint64_t v8 = a3 + 24 * v5;
  if (v7 < v8 && 24 * v5 + a4 + 24 * a1 + 32 > a3)
  {
    _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize overlapping range", 49, 2, "Swift/UnsafePointer.swift", 25, 2, 1092, 1);
    goto LABEL_9;
  }
  swift_arrayInitWithCopy(a3, v7, v5, a5);
  swift_bridgeObjectRelease(a4);
  return v8;
}

unint64_t specialized _ArrayBuffer._copyContents(subRange:initializing:)(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4, uint64_t (*a5)(void))
{
  uint64_t v5 = a2 - a1;
  if (__OFSUB__(a2, a1)) {
    BUG();
  }
  if (a2 - a1 < 0)
  {
    _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize with negative count", 51, 2, "Swift/UnsafePointer.swift", 25, 2, 1090, 1);
LABEL_9:
    BUG();
  }
  uint64_t v8 = a5(0);
  uint64_t v9 = *(void *)(v8 - 8);
  uint64_t v10 = a4 + ((*(unsigned __int8 *)(v9 + 80) + 32) & ~*(unsigned __int8 *)(v9 + 80));
  uint64_t v11 = *(void *)(v9 + 72);
  unint64_t v12 = v10 + v11 * a1;
  uint64_t v13 = v5 * v11;
  unint64_t v14 = a3 + v13;
  if (v12 < a3 + v13 && v12 + v13 > a3)
  {
    _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize overlapping range", 49, 2, "Swift/UnsafePointer.swift", 25, 2, 1092, 1);
    goto LABEL_9;
  }
  swift_arrayInitWithCopy(a3, v12, v5, v8);
  swift_bridgeObjectRelease(a4);
  return v14;
}

size_t _swift_stdlib_malloc_size_0(const void *ptr)
{
  return malloc_size(ptr);
}

uint64_t NSFileManager.temporaryModelDirectory.getter()
{
  v11[1] = v0;
  uint64_t v1 = type metadata accessor for URL(0);
  uint64_t v12 = *(void *)(v1 - 8);
  int64_t v2 = *(void *)(v12 + 64);
  unint64_t v3 = alloca(v2);
  uint64_t v4 = alloca(v2);
  uint64_t v5 = NSTemporaryDirectory();
  char v6 = v5;
  uint64_t v7 = static String._unconditionallyBridgeFromObjectiveC(_:)(v6);
  uint64_t v9 = v8;

  URL.init(fileURLWithPath:)(v7, v9);
  swift_bridgeObjectRelease(v9);
  URL.appendingPathComponent(_:)(0x4C4D657461657243, 0xEE00736C65646F4DLL);
  return (*(uint64_t (**)(void *, uint64_t))(v12 + 8))(v11, v1);
}

Swift::Void __swiftcall __spoils<cf,zf,sf,of,pf,rax,rdx,rcx,rdi,rsi,r8,r9,r10,r11,r12,xmm0,xmm1,xmm2,xmm3,xmm4,xmm5,xmm6,xmm7> NSFileManager.createTemporaryModelDirectory()()
{
  uint64_t v23 = v0;
  uint64_t v25 = type metadata accessor for URL(0);
  uint64_t v26 = *(void *)(v25 - 8);
  int64_t v2 = *(void *)(v26 + 64);
  unint64_t v3 = alloca(v2);
  uint64_t v4 = alloca(v2);
  NSFileManager.temporaryModelDirectory.getter();
  URL.path.getter(0);
  char v6 = v5;
  NSString v7 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(v6);
  uint64_t v24 = v1;
  unsigned __int8 v8 = [v1 fileExistsAtPath:v7];

  if (v8)
  {
    (*(void (**)(uint64_t *, uint64_t))(v26 + 8))(&v23, v25);
  }
  else
  {
    URL._bridgeToObjectiveC()(v9);
    uint64_t v11 = v10;
    uint64_t v12 = type metadata accessor for NSFileAttributeKey(0);
    uint64_t v13 = lazy protocol witness table accessor for type NSFileAttributeKey and conformance NSFileAttributeKey();
    char v14 = Dictionary.init(dictionaryLiteral:)(_swiftEmptyArrayStorage, v12, (char *)&type metadata for Any + 8, v13);
    id v27 = 0;
    char v15 = outlined bridged method (mnnbnnn) of @objc NSFileManager.createDirectory(at:withIntermediateDirectories:attributes:)((uint64_t)v11, 1, v14, (uint64_t)&v27, v24);

    id v16 = v27;
    if (v15)
    {
      uint64_t v17 = *(void (**)(uint64_t *, uint64_t))(v26 + 8);
      v27;
      v17(&v23, v25);
    }
    else
    {
      id v18 = v27;
      _convertNSErrorToError(_:)(v16);

      swift_willThrow(v18, 1, v19, v20, v21, v22);
      (*(void (**)(uint64_t *, uint64_t))(v26 + 8))(&v23, v25);
    }
  }
}

uint64_t lazy protocol witness table accessor for type NSFileAttributeKey and conformance NSFileAttributeKey()
{
  uint64_t result = lazy protocol witness table cache variable for type NSFileAttributeKey and conformance NSFileAttributeKey;
  if (!lazy protocol witness table cache variable for type NSFileAttributeKey and conformance NSFileAttributeKey)
  {
    uint64_t v1 = type metadata accessor for NSFileAttributeKey(255);
    uint64_t result = swift_getWitnessTable(&protocol conformance descriptor for NSFileAttributeKey, v1);
    lazy protocol witness table cache variable for type NSFileAttributeKey and conformance NSFileAttributeKey = result;
  }
  return result;
}

uint64_t outlined bridged method (mnnbnnn) of @objc NSFileManager.createDirectory(at:withIntermediateDirectories:attributes:)(uint64_t a1, char a2, char a3, uint64_t a4, void *a5)
{
  type metadata accessor for NSFileAttributeKey(0);
  lazy protocol witness table accessor for type NSFileAttributeKey and conformance NSFileAttributeKey();
  Class isa = Dictionary._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease(a3);
  LODWORD(a5) = [a5 createDirectoryAtURL:a1 withIntermediateDirectories:a2 attributes:isa error:a4];

  return a5;
}

uint64_t static MLHandActionClassifier.FeatureExtractor.extractFeatures(from:targetFrameRate:startingSessionId:)(uint64_t a1, uint64_t a2, __m128 a3)
{
  uint64_t v10 = a2;
  double v11 = *(double *)a3.i64;
  uint64_t v12 = v3;
  int64_t v5 = *(void *)(*(void *)(type metadata accessor for MLHandActionClassifier.DataSource(0) - 8) + 64);
  char v6 = alloca(v5);
  NSString v7 = alloca(v5);
  outlined init with copy of MLTrainingSessionParameters(a1, (uint64_t)&v9, type metadata accessor for MLHandActionClassifier.DataSource);
  uint64_t result = MLHandActionClassifier.FeatureExtractor.__allocating_init(source:)((uint64_t)&v9, a3);
  if (!v4)
  {
    MLHandActionClassifier.FeatureExtractor.extractFeaturesFromFileTable(_:startingSessionId:)(v10, v11);
    return swift_release();
  }
  return result;
}

uint64_t MLHandActionClassifier.FeatureExtractor.__allocating_init(source:)(uint64_t a1, __m128 a2)
{
  MLHandActionClassifier.DataSource.videosWithAnnotations()(a2);
  uint64_t result = outlined destroy of MLActivityClassifier.ModelParameters(a1, type metadata accessor for MLHandActionClassifier.DataSource);
  if (!v2)
  {
    uint64_t result = swift_allocObject(v3, 64, 7);
    *(void *)(result + 32) = _swiftEmptyArrayStorage;
    *(void *)(result + 40) = _swiftEmptyArrayStorage;
    *(void *)(result + 48) = _swiftEmptyArrayStorage;
    *(void *)(result + 56) = _swiftEmptyArrayStorage;
    *(void *)(result + 16) = v5;
    *(unsigned char *)(result + 24) = v6;
  }
  return result;
}

uint64_t MLHandActionClassifier.FeatureExtractor.extractFeaturesFromFileTable(_:startingSessionId:)(uint64_t a1, double a2)
{
  seconds[0] = v3;
  uint64_t v323 = a1;
  double v322 = a2;
  v327 = v2;
  uint64_t v345 = type metadata accessor for URL(0);
  uint64_t v344 = *(void *)(v345 - 8);
  int64_t v5 = *(void *)(v344 + 64);
  char v6 = alloca(v5);
  NSString v7 = alloca(v5);
  v348 = v318;
  CMTimeValue v370 = type metadata accessor for Date(0);
  Float64 v372 = *(double *)(v370 - 8);
  int64_t v8 = *(void *)(*(void *)&v372 + 64);
  uint64_t v9 = alloca(v8);
  uint64_t v10 = alloca(v8);
  v365 = v318;
  os_log_t log = (os_log_t)type metadata accessor for _TablePrinter(0);
  int64_t v11 = *(void *)(*((void *)log - 1) + 64);
  uint64_t v12 = alloca(v11);
  uint64_t v13 = alloca(v11);
  v324 = (uint64_t *)v318;
  char v14 = alloca(v11);
  char v15 = alloca(v11);
  id v16 = v318;
  uint64_t v17 = *(void *)(v4 + 16);
  v337 = (uint64_t *)v4;
  int v18 = *(unsigned __int8 *)(v4 + 24);
  v338 = (void *)v17;
  LOBYTE(v339) = v18;
  outlined copy of Result<_DataTable, Error>(v17, v18);
  Swift::Int v19 = MLDataTable.size.getter();
  *(void *)type = specialized RandomAccessCollection<>.distance(from:to:)(0, v19);
  CMTimeValue v356 = v17;
  int v347 = v18;
  outlined consume of Result<_DataTable, Error>(v17, v18);
  if (one-time initialization token for logger != -1) {
    swift_once(&one-time initialization token for logger, one-time initialization function for logger);
  }
  uint64_t v20 = type metadata accessor for Logger(0);
  uint64_t v349 = __swift_project_value_buffer(v20, (uint64_t)static MLHandActionClassifier.logger);
  uint64_t v21 = (os_log_s *)Logger.logObject.getter();
  os_log_type_t v22 = static os_log_type_t.info.getter();
  BOOL v23 = os_log_type_enabled(v21, v22);
  v359 = v318;
  if (v23)
  {
    uint64_t v24 = (uint8_t *)swift_slowAlloc(12, -1);
    *(_DWORD *)uint64_t v24 = 134217984;
    uint64_t v25 = *(void **)type;
    v338 = *(void **)type;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v338, &v339, v24 + 4, v24 + 12);
    _os_log_impl(&dword_0, v21, v22, "Processing %ld annotated video clips", v24, 0xCu);
    uint64_t v26 = v24;
    id v16 = v359;
    swift_slowDealloc(v26, -1, -1);
    id v27 = v21;
    uint64_t v28 = v25;
  }
  else
  {
    id v27 = v21;

    uint64_t v28 = *(void **)type;
  }
  os_log_t v29 = log;
  uint64_t v30 = &v16[*((int *)log + 5)];
  Date.init()(v27);
  *(void *)id v16 = v28;
  type metadata accessor for OS_os_log();
  uint64_t v31 = OS_os_log.init(subsystem:category:)(0xD000000000000027, "le" + 0x8000000000000000, 0x72705F656C626174, 0xED00007265746E69);
  uint64_t v326 = *((int *)v29 + 6);
  *(void *)&v16[v326] = v31;
  uint64_t v32 = *((int *)v29 + 7);
  *(void *)&v16[v32] = 0xD000000000000015;
  *(void *)&v16[v32 + 8] = "ml.handActionClassifier" + 0x8000000000000000;
  uint64_t v33 = v365;
  Date.init()(0xD000000000000027);
  v325 = v30;
  (*(void (**)(unsigned char *, unsigned char *, CMTimeValue))(*(void *)&v372 + 40))(v30, v33, v370);
  _TablePrinter.beginTable()();
  _TablePrinter.printRow(currentFileIndex:)(0);
  CMTimeValue v34 = v356;
  v338 = (void *)v356;
  char v35 = v347;
  LOBYTE(v339) = v347;
  v328 = (Float64 *)(v337 + 4);
  v329 = v337 + 6;
  v330 = v337 + 5;
  v337 += 7;
  double v36 = 0.0;
  long long v340 = 0;
  outlined copy of Result<_DataTable, Error>(v356, v347);
  v373.CMTimeValue value = v34;
  LOBYTE(v373.timescale) = v35;
  if (!MLDataTable.size.getter())
  {
    char v37 = v35;
    goto LABEL_134;
  }
  CMTimeValue value = kCMTimeZero.value;
  CMTimeScale timescale = kCMTimeZero.timescale;
  CMTimeFlags flags = kCMTimeZero.flags;
  CMTimeEpoch epoch = kCMTimeZero.epoch;
  CMTimeValue v354 = kCMTimeIndefinite.value;
  CMTimeScale v363 = kCMTimeIndefinite.timescale;
  CMTimeFlags v364 = kCMTimeIndefinite.flags;
  CMTimeEpoch v355 = kCMTimeIndefinite.epoch;
  v351 = (char *)&type metadata for Any + 8;
  char v37 = v35;
  uint64_t v38 = 0;
  do
  {
    MLDataTable.Rows.subscript.getter(v38);
    CMTimeValue v370 = v373.value;
    uint64_t v39 = *(void *)&v373.timescale;
    v365 = (unsigned char *)v373.epoch;
    outlined copy of Result<_DataTable, Error>(v34, v37);
    uint64_t v40 = specialized RandomAccessCollection<>.index(after:)(v38);
    outlined consume of Result<_DataTable, Error>(v34, v37);
    *(void *)&long long v340 = v40;
    Swift::Int v41 = *((void *)&v340 + 1);
    uint64_t v42 = *((void *)&v340 + 1) + 1;
    if (__OFADD__(1, *((void *)&v340 + 1))) {
      BUG();
    }
    ++*((void *)&v340 + 1);
    BOOL v43 = *(void *)(v39 + 16) == 0;
    uint64_t v44 = (uint64_t)v359;
    uint64_t v360 = v39;
    if (v43) {
      goto LABEL_144;
    }
    uint64_t v321 = v42;
    swift_retain();
    swift_bridgeObjectRetain(v39);
    uint64_t v45 = v365;
    swift_retain();
    uint64_t v46 = v39;
    unint64_t v47 = specialized __RawDictionaryStorage.find<A>(_:)(0x7461506F65646976, 0xE900000000000068);
    if ((v48 & 1) == 0)
    {
      swift_release();
      swift_bridgeObjectRelease(v39);
      swift_release();
      goto LABEL_143;
    }
    Swift::Int currentFileIndex = v41;
    uint64_t v49 = *(void *)(v39 + 56);
    uint64_t v50 = v45;
    uint64_t v51 = *(void *)(v49 + 8 * v47);
    swift_retain_n(v50);
    Float64 v52 = seconds[0];
    uint64_t v53 = CMLSequence.value(at:)(v51);
    if (v52 != 0.0)
    {
      swift_release();
      v312 = "CreateML/MLDataTable.Row.swift";
      uint64_t v313 = 30;
      Float64 v314 = v52;
      goto LABEL_159;
    }
    uint64_t v54 = v53;
    swift_release();
    MLDataValue.init(_:)(v54, v36);
    swift_bridgeObjectRelease(v46);
    swift_release();
    swift_release_n(v50);
    uint64_t v55 = (void *)v373.value;
    uint64_t v56 = *(void **)&v373.timescale;
    if (LOBYTE(v373.epoch) != 2)
    {
      char v294 = v373.epoch;
      goto LABEL_142;
    }
    if (!*(void *)(v46 + 16))
    {
      char v294 = 2;
      goto LABEL_142;
    }
    os_log_t log = (os_log_t)v373.value;
    *(void *)type = *(void *)&v373.timescale;
    swift_retain();
    swift_bridgeObjectRetain(v46);
    uint64_t v57 = v365;
    swift_retain();
    unint64_t v58 = specialized __RawDictionaryStorage.find<A>(_:)(0x6C6562616CLL, 0xE500000000000000);
    if ((v59 & 1) == 0)
    {
      swift_release();
      swift_bridgeObjectRelease(v46);
      swift_release();
LABEL_141:
      char v294 = 2;
      uint64_t v55 = log;
      uint64_t v56 = *(void **)type;
LABEL_142:
      outlined consume of MLDataValue(v55, v56, v294);
      Swift::Int v41 = currentFileIndex;
LABEL_143:
      uint64_t v44 = (uint64_t)v359;
LABEL_144:
      v373.CMTimeValue value = 0;
      *(void *)&v373.CMTimeScale timescale = 0xE000000000000000;
      _StringGuts.grow(_:)(52);
      v295._uint64_t countAndFlagsBits = 0xD000000000000029;
      v295._char object = "Annotated Video Clips" + 0x8000000000000000;
      String.append(_:)(v295);
      uint64_t v357 = v41;
      uint64_t v296 = dispatch thunk of CustomStringConvertible.description.getter(&type metadata for Int, &protocol witness table for Int);
      char v298 = (char)v297;
      v295._uint64_t countAndFlagsBits = v296;
      v295._char object = v297;
      String.append(_:)(v295);
      swift_bridgeObjectRelease(v298);
      v295._char object = (void *)0xE900000000000065;
      v295._uint64_t countAndFlagsBits = 0x6C626174206E6920;
      String.append(_:)(v295);
      *(_OWORD *)seconds = *(_OWORD *)&v373.value;
      v295._char object = (void *)lazy protocol witness table accessor for type MLCreateError and conformance MLCreateError();
      swift_allocError(&type metadata for MLCreateError, v295._object, 0, 0);
      *(_OWORD *)uint64_t v299 = *(_OWORD *)seconds;
      *(_OWORD *)(v299 + 16) = 0;
      *(_OWORD *)(v299 + 32) = 0;
      *(unsigned char *)(v299 + 48) = 0;
      swift_willThrow(&type metadata for MLCreateError, v295._object, v299, v300, v301, v302);
      swift_release();
      swift_bridgeObjectRelease(v360);
      swift_release();
      outlined consume of Result<_DataTable, Error>((uint64_t)v338, v339);
      uint64_t v303 = v44;
      return outlined destroy of MLActivityClassifier.ModelParameters(v303, type metadata accessor for _TablePrinter);
    }
    uint64_t v60 = *(void *)(*(void *)(v46 + 56) + 8 * v58);
    swift_retain_n(v57);
    uint64_t v61 = CMLSequence.value(at:)(v60);
    seconds[0] = 0.0;
    uint64_t v62 = v61;
    swift_release();
    MLDataValue.init(_:)(v62, v36);
    swift_bridgeObjectRelease(v46);
    swift_release();
    swift_release_n(v57);
    if (LOBYTE(v373.epoch) != 2)
    {
      outlined consume of MLDataValue((void *)v373.value, *(void **)&v373.timescale, v373.epoch);
      goto LABEL_141;
    }
    v342 = (void *)v373.value;
    v341 = *(void **)&v373.timescale;
    uint64_t v63 = objc_opt_self(NSFileManager);
    id v64 = [v63 defaultManager];
    id v65 = v64;
    NSString v66 = String._bridgeToObjectiveC()();
    unsigned __int8 v67 = [v65 fileExistsAtPath:v66];

    if (!v67)
    {
      outlined consume of MLDataValue(v342, v341, 2);
      v373.CMTimeValue value = 0;
      *(void *)&v373.CMTimeScale timescale = 0xE000000000000000;
      _StringGuts.grow(_:)(26);
      swift_bridgeObjectRelease(v373.timescale);
      v373.CMTimeValue value = 0xD000000000000018;
      *(void *)&v373.CMTimeScale timescale = "h or label string at row " + 0x8000000000000000;
      os_log_t v304 = log;
      v305._uint64_t countAndFlagsBits = (uint64_t)log;
      v306 = *(void **)type;
      v305._char object = *(void **)type;
      String.append(_:)(v305);
      outlined consume of MLDataValue(v304, v306, 2);
      *(_OWORD *)seconds = *(_OWORD *)&v373.value;
      v305._char object = (void *)lazy protocol witness table accessor for type MLCreateError and conformance MLCreateError();
      swift_allocError(&type metadata for MLCreateError, v305._object, 0, 0);
      *(_OWORD *)uint64_t v307 = *(_OWORD *)seconds;
      *(_OWORD *)(v307 + 16) = 0;
      *(_OWORD *)(v307 + 32) = 0;
      *(unsigned char *)(v307 + 48) = 0;
      swift_willThrow(&type metadata for MLCreateError, v305._object, v307, v308, v309, v310);
      swift_release();
      swift_bridgeObjectRelease(v360);
      swift_release();
LABEL_147:
      outlined consume of Result<_DataTable, Error>((uint64_t)v338, v339);
      goto LABEL_148;
    }
    URL.init(fileURLWithPath:)(log, *(void *)type);
    uint64_t v331 = URL.lastPathComponent.getter();
    uint64_t v346 = v68;
    if ((_BYTE)v347)
    {
      uint64_t v69 = v356;
      outlined copy of Result<_DataTable, Error>(v356, 1);
      uint64_t v70 = tc_v1_flex_list_create(0);
      if (!v70) {
        BUG();
      }
      uint64_t v71 = v70;
      outlined consume of Result<_DataTable, Error>(v69, 1);
      uint64_t v72 = type metadata accessor for CMLSequence();
      uint64_t v73 = swift_allocObject(v72, 25, 7);
      *(void *)(v73 + 16) = v71;
      *(unsigned char *)(v73 + 24) = 1;
      uint64_t v357 = v73;
    }
    else
    {
      uint64_t v74 = v356;
      uint64_t v75 = v356;
      outlined copy of Result<_DataTable, Error>(v356, 0);
      _DataTable.columnNames.getter(v75);
      outlined consume of Result<_DataTable, Error>(v74, 0);
      uint64_t v73 = v357;
    }
    swift_retain_n(v73);
    uint64_t v76 = CMLSequence.size.getter();
    uint64_t v77 = specialized RandomAccessCollection<>.distance(from:to:)(0, v76);
    swift_release();
    if (!v77)
    {
      uint64_t v91 = v73;
      goto LABEL_32;
    }
    Float64 v78 = 0.0;
    while (1)
    {
      Float64 v372 = v78;
      Float64 v79 = seconds[0];
      CMLSequence.value(at:)(*(uint64_t *)&v78);
      if (v79 != 0.0)
      {
LABEL_158:
        v312 = "CreateML/SequenceType.swift";
        uint64_t v313 = 27;
        Float64 v314 = v79;
        goto LABEL_159;
      }
      Swift::String v80 = CMLFeatureValue.stringValue()();
      seconds[0] = v82;
      if (v82 != 0.0)
      {
LABEL_160:
        swift_errorRelease(*(void *)&seconds[0]);
        swift_release();
        v373.CMTimeValue value = 0;
        *(void *)&v373.CMTimeScale timescale = 0xE000000000000000;
        _StringGuts.grow(_:)(37);
        swift_bridgeObjectRelease(v373.timescale);
        v373.CMTimeValue value = 0xD000000000000022;
        *(void *)&v373.CMTimeScale timescale = "able.ColumnNames.swift" + 0x8000000000000000;
        v320[0] = v372;
        v315._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter(&type metadata for Int, &protocol witness table for Int);
        char object = (char)v315._object;
        String.append(_:)(v315);
        swift_bridgeObjectRelease(object);
        v317._uint64_t countAndFlagsBits = 46;
        v317._char object = (void *)0xE100000000000000;
        String.append(_:)(v317);
        _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, v373.value, *(void *)&v373.timescale, "CreateML/MLDataTable.ColumnNames.swift", 38, 2, 17, 0);
        BUG();
      }
      uint64_t countAndFlagsBits = v80._countAndFlagsBits;
      uint64_t v84 = v80._object;
      swift_release();
      swift_retain();
      uint64_t v85 = CMLSequence.size.getter();
      uint64_t v86 = specialized RandomAccessCollection<>.distance(from:to:)(0, v85);
      swift_release();
      if (*(uint64_t *)&v372 >= v86) {
        BUG();
      }
      Float64 v87 = v372;
      if (countAndFlagsBits == 0x7472617473 && v84 == (void *)0xE500000000000000)
      {
        swift_release_n(v73);
        swift_bridgeObjectRelease(0);
        goto LABEL_35;
      }
      char v88 = _stringCompareWithSmolCheck(_:_:expecting:)(countAndFlagsBits, v84, 0x7472617473, 0xE500000000000000, 0);
      swift_bridgeObjectRelease((_BYTE)v84);
      if (v88) {
        break;
      }
      swift_retain();
      *(void *)&Float64 v78 = *(void *)&v87 + 1;
      uint64_t v89 = CMLSequence.size.getter();
      uint64_t v90 = specialized RandomAccessCollection<>.distance(from:to:)(0, v89);
      swift_release();
      if (*(void *)&v87 + 1 == v90)
      {
        uint64_t v91 = v73;
LABEL_32:
        swift_release_n(v91);
        goto LABEL_65;
      }
    }
    swift_release_n(v73);
LABEL_35:
    uint64_t v92 = v360;
    if (!*(void *)(v360 + 16)) {
      goto LABEL_61;
    }
    swift_retain();
    swift_bridgeObjectRetain(v92);
    uint64_t v93 = v365;
    swift_retain();
    unint64_t v94 = specialized __RawDictionaryStorage.find<A>(_:)(0x7472617473, 0xE500000000000000);
    if ((v95 & 1) == 0)
    {
      swift_release();
      swift_bridgeObjectRelease(v92);
      swift_release();
      goto LABEL_44;
    }
    uint64_t v96 = *(void *)(*(void *)(v92 + 56) + 8 * v94);
    swift_retain_n(v93);
    Float64 v97 = seconds[0];
    uint64_t v98 = CMLSequence.value(at:)(v96);
    seconds[0] = v97;
    if (v97 != 0.0) {
      goto LABEL_162;
    }
    uint64_t v99 = v98;
    swift_release();
    MLDataValue.init(_:)(v99, v81);
    swift_bridgeObjectRelease(v92);
    swift_release();
    swift_release_n(v93);
    CMTimeValue v100 = v373.value;
    if (LOBYTE(v373.epoch) != 1)
    {
      outlined consume of MLDataValue((void *)v373.value, *(void **)&v373.timescale, v373.epoch);
LABEL_44:
      if (*(void *)(v92 + 16))
      {
        swift_retain();
        swift_bridgeObjectRetain(v92);
        char v113 = v365;
        swift_retain();
        unint64_t v114 = specialized __RawDictionaryStorage.find<A>(_:)(0x7472617473, 0xE500000000000000);
        if (v115)
        {
          uint64_t v116 = *(void *)(*(void *)(v92 + 56) + 8 * v114);
          swift_retain_n(v113);
          Float64 v117 = seconds[0];
          uint64_t v118 = CMLSequence.value(at:)(v116);
          seconds[0] = v117;
          if (v117 != 0.0) {
            goto LABEL_162;
          }
          uint64_t v119 = v118;
          swift_release();
          MLDataValue.init(_:)(v119, v81);
          swift_bridgeObjectRelease(v92);
          swift_release();
          swift_release_n(v113);
          CMTimeValue v120 = v373.value;
          if (LOBYTE(v373.epoch))
          {
            outlined consume of MLDataValue((void *)v373.value, *(void **)&v373.timescale, v373.epoch);
            goto LABEL_50;
          }
          if (v373.value >= 0)
          {
            double value_low = (double)SLODWORD(v373.value);
            goto LABEL_59;
          }
          os_log_t v254 = log;
          uint64_t v103 = *(void **)type;
          outlined copy of MLDataValue(log, *(void **)type, 2u);
          outlined copy of MLDataValue(v254, v103, 2u);
          uint64_t v104 = (os_log_s *)Logger.logObject.getter();
          os_log_type_t v255 = static os_log_type_t.info.getter();
          LODWORD(v372) = v255;
          if (!os_log_type_enabled(v104, v255)) {
            goto LABEL_128;
          }
          os_log_t v350 = v104;
          uint64_t v256 = v103;
          uint64_t v107 = swift_slowAlloc(22, -1);
          CMTimeValue v343 = swift_slowAlloc(32, -1);
          v373.CMTimeValue value = v343;
          *(_DWORD *)uint64_t v107 = 134218242;
          uint64_t v357 = v120;
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v357, v358, v107 + 4, v107 + 12);
          *(_WORD *)(v107 + 12) = 2080;
          os_log_t v257 = log;
          outlined copy of MLDataValue(log, v256, 2u);
          uint64_t v357 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)((uint64_t)v257, (int64_t)v256, &v373.value);
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v357, v358, v107 + 14, v107 + 22);
          outlined consume of MLDataValue(v257, v256, 2);
          outlined consume of MLDataValue(v257, v256, 2);
          outlined consume of MLDataValue(v257, v256, 2);
          os_log_t v109 = v350;
          uint64_t v110 = v350;
          os_log_type_t v111 = LOBYTE(v372);
          uint64_t v112 = "Start time %ld specified in video file %s is negative, using 0.0 automatically.";
LABEL_127:
          _os_log_impl(&dword_0, v110, v111, v112, (uint8_t *)v107, 0x16u);
          CMTimeValue v258 = v343;
          swift_arrayDestroy(v343, 1, v351);
          swift_slowDealloc(v258, -1, -1);
          uint64_t v143 = v356;
          swift_slowDealloc(v107, -1, -1);
          os_log_t v144 = v109;
LABEL_63:

          uint64_t v131 = (os_log_s *)value;
          unsigned int v374 = timescale;
          CMTimeValue v132 = flags;
          CMTimeEpoch v367 = epoch;
          goto LABEL_67;
        }
        swift_release();
        swift_bridgeObjectRelease(v92);
        swift_release();
LABEL_50:
        if (*(void *)(v92 + 16))
        {
          swift_retain();
          swift_bridgeObjectRetain(v92);
          uint64_t v121 = v365;
          swift_retain();
          unint64_t v122 = specialized __RawDictionaryStorage.find<A>(_:)(0x7472617473, 0xE500000000000000);
          if (v123)
          {
            uint64_t v124 = *(void *)(*(void *)(v92 + 56) + 8 * v122);
            swift_retain_n(v121);
            Float64 v125 = seconds[0];
            uint64_t v126 = CMLSequence.value(at:)(v124);
            seconds[0] = v125;
            if (v125 != 0.0) {
              goto LABEL_162;
            }
            uint64_t v127 = v126;
            swift_release();
            MLDataValue.init(_:)(v127, v81);
            swift_bridgeObjectRelease(v92);
            swift_release();
            swift_release_n(v121);
            Swift::String v128 = (void *)v373.value;
            uint64_t v129 = *(void **)&v373.timescale;
            if (LOBYTE(v373.epoch) == 2)
            {
              Float64 v130 = seconds[0];
              static _VideoUtilities.getSecondsFromTimeString(_:)(*(long long *)&v373.value);
              seconds[0] = v130;
              if (v130 != 0.0)
              {
                outlined consume of MLDataValue(v342, v341, 2);
                outlined consume of MLDataValue(v128, v129, 2);
                outlined consume of MLDataValue(log, *(void **)type, 2);
                swift_release();
                swift_bridgeObjectRelease(v92);
                swift_release();
                swift_bridgeObjectRelease(v346);
                (*(void (**)(unsigned char *, uint64_t))(v344 + 8))(v348, v345);
                outlined consume of Result<_DataTable, Error>((uint64_t)v338, v339);
                return outlined destroy of MLActivityClassifier.ModelParameters((uint64_t)v359, type metadata accessor for _TablePrinter);
              }
              Float64 v372 = v81;
              outlined consume of MLDataValue(v128, v129, 2);
              double value_low = v372;
LABEL_59:
              CMTimeMakeWithSeconds(&v373, value_low, 1000);
              uint64_t v131 = (os_log_s *)v373.value;
              unsigned int v374 = v373.timescale;
              CMTimeValue v132 = v373.flags;
              CMTimeEpoch v133 = v373.epoch;
              goto LABEL_66;
            }
            outlined consume of MLDataValue((void *)v373.value, *(void **)&v373.timescale, v373.epoch);
          }
          else
          {
            swift_release();
            swift_bridgeObjectRelease(v92);
            swift_release();
          }
        }
      }
LABEL_61:
      int64_t v134 = v346;
      uint64_t v135 = v346;
      swift_bridgeObjectRetain_n(v346, 2);
      uint64_t v136 = (void *)Logger.logObject.getter();
      os_log_type_t v137 = static os_log_type_t.error.getter(v135, 2);
      if (!os_log_type_enabled((os_log_t)v136, v137))
      {

        swift_bridgeObjectRelease_n(v134, 2, v145, v146, v147);
        goto LABEL_65;
      }
      uint64_t v138 = (uint8_t *)swift_slowAlloc(12, -1);
      Float64 v372 = COERCE_DOUBLE(swift_slowAlloc(32, -1));
      *(Float64 *)&v373.CMTimeValue value = v372;
      *(_DWORD *)uint64_t v138 = 136315138;
      os_log_t v350 = (os_log_t)(v138 + 4);
      swift_bridgeObjectRetain(v134);
      uint64_t v357 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v331, v134, &v373.value);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v357, v358, v350, v138 + 12);
      swift_bridgeObjectRelease_n(v134, 3, v139, v140, v141);
      _os_log_impl(&dword_0, (os_log_t)v136, v137, "Unsupported start time format in annotation file. Please provide either a Double or Int value in seconds, or a String value in hours:minutes:seconds.fraction, minutes:seconds.fraction, or seconds.fraction format. Skipping start time for file %s", v138, 0xCu);
      Float64 v142 = v372;
      swift_arrayDestroy(*(void *)&v372, 1, v351);
      swift_slowDealloc(*(void *)&v142, -1, -1);
      uint64_t v143 = v356;
      swift_slowDealloc(v138, -1, -1);
      os_log_t v144 = (os_log_t)v136;
      goto LABEL_63;
    }
    double value_low = *(double *)&v373.value;
    if (*(double *)&v373.value >= 0.0) {
      goto LABEL_59;
    }
    os_log_t v102 = log;
    uint64_t v103 = *(void **)type;
    outlined copy of MLDataValue(log, *(void **)type, 2u);
    outlined copy of MLDataValue(v102, v103, 2u);
    uint64_t v104 = (os_log_s *)Logger.logObject.getter();
    os_log_type_t v105 = static os_log_type_t.info.getter();
    LODWORD(v372) = v105;
    if (os_log_type_enabled(v104, v105))
    {
      os_log_t v350 = v104;
      uint64_t v106 = v103;
      uint64_t v107 = swift_slowAlloc(22, -1);
      CMTimeValue v343 = swift_slowAlloc(32, -1);
      v373.CMTimeValue value = v343;
      *(_DWORD *)uint64_t v107 = 134218242;
      uint64_t v357 = v100;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v357, v358, v107 + 4, v107 + 12);
      *(_WORD *)(v107 + 12) = 2080;
      os_log_t v108 = log;
      outlined copy of MLDataValue(log, v106, 2u);
      uint64_t v357 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)((uint64_t)v108, (int64_t)v106, &v373.value);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v357, v358, v107 + 14, v107 + 22);
      outlined consume of MLDataValue(v108, v106, 2);
      outlined consume of MLDataValue(v108, v106, 2);
      outlined consume of MLDataValue(v108, v106, 2);
      os_log_t v109 = v350;
      uint64_t v110 = v350;
      os_log_type_t v111 = LOBYTE(v372);
      uint64_t v112 = "Start time %f specified in video file %s is negative, using 0.0 automatically.";
      goto LABEL_127;
    }
LABEL_128:
    os_log_t v259 = log;
    outlined consume of MLDataValue(log, v103, 2);
    outlined consume of MLDataValue(v259, v103, 2);

LABEL_65:
    uint64_t v131 = (os_log_s *)value;
    unsigned int v374 = timescale;
    CMTimeValue v132 = flags;
    CMTimeEpoch v133 = epoch;
LABEL_66:
    CMTimeEpoch v367 = v133;
    uint64_t v143 = v356;
LABEL_67:
    os_log_t v350 = v131;
    CMTimeValue v343 = v132;
    if ((_BYTE)v347)
    {
      outlined copy of Result<_DataTable, Error>(v143, 1);
      uint64_t v148 = tc_v1_flex_list_create(0);
      if (!v148) {
        BUG();
      }
      uint64_t v149 = v143;
      uint64_t v150 = v148;
      outlined consume of Result<_DataTable, Error>(v149, 1);
      uint64_t v151 = type metadata accessor for CMLSequence();
      uint64_t v152 = swift_allocObject(v151, 25, 7);
      *(void *)(v152 + 16) = v150;
      *(unsigned char *)(v152 + 24) = 1;
      uint64_t v357 = v152;
    }
    else
    {
      outlined copy of Result<_DataTable, Error>(v143, 0);
      _DataTable.columnNames.getter(v143);
      outlined consume of Result<_DataTable, Error>(v143, 0);
      uint64_t v152 = v357;
    }
    swift_retain_n(v152);
    uint64_t v153 = CMLSequence.size.getter();
    uint64_t v154 = specialized RandomAccessCollection<>.distance(from:to:)(0, v153);
    swift_release();
    if (!v154)
    {
      swift_release_n(v152);
      outlined consume of MLDataValue(log, *(void **)type, 2);
      goto LABEL_112;
    }
    Float64 v155 = 0.0;
    Float64 v156 = seconds[0];
    while (1)
    {
      Float64 v372 = v155;
      Float64 v79 = v156;
      CMLSequence.value(at:)(*(uint64_t *)&v155);
      if (v156 != 0.0) {
        goto LABEL_158;
      }
      Swift::String v157 = CMLFeatureValue.stringValue()();
      seconds[0] = v159;
      if (v159 != 0.0) {
        goto LABEL_160;
      }
      uint64_t v160 = v157._countAndFlagsBits;
      Swift::String v161 = v157._object;
      swift_release();
      swift_retain();
      uint64_t v162 = CMLSequence.size.getter();
      uint64_t v163 = specialized RandomAccessCollection<>.distance(from:to:)(0, v162);
      swift_release();
      if (*(uint64_t *)&v372 >= v163) {
        BUG();
      }
      if (v160 == 6581861 && v161 == (void *)0xE300000000000000)
      {
        swift_release_n(v152);
        swift_bridgeObjectRelease(0);
        goto LABEL_84;
      }
      char v164 = _stringCompareWithSmolCheck(_:_:expecting:)(v160, v161, 6581861, 0xE300000000000000, 0);
      swift_bridgeObjectRelease((_BYTE)v161);
      if (v164) {
        break;
      }
      *(void *)&Float64 v155 = *(void *)&v372 + 1;
      swift_retain();
      uint64_t v165 = CMLSequence.size.getter();
      uint64_t v166 = specialized RandomAccessCollection<>.distance(from:to:)(0, v165);
      swift_release();
      BOOL v43 = *(void *)&v155 == v166;
      Float64 v156 = seconds[0];
      if (v43)
      {
        swift_release_n(v152);
        outlined consume of MLDataValue(log, *(void **)type, 2);
        CMTimeValue v167 = v354;
        unsigned int v168 = v363;
        uint64_t v169 = v364;
        CMTimeEpoch v170 = v355;
        goto LABEL_113;
      }
    }
    swift_release_n(v152);
LABEL_84:
    uint64_t v171 = v360;
    uint64_t v172 = v365;
    if (!*(void *)(v360 + 16)) {
      goto LABEL_99;
    }
    swift_retain();
    swift_bridgeObjectRetain(v171);
    swift_retain();
    uint64_t v173 = v171;
    unint64_t v174 = specialized __RawDictionaryStorage.find<A>(_:)(6581861, 0xE300000000000000);
    if ((v175 & 1) == 0)
    {
      swift_release();
      swift_bridgeObjectRelease(v171);
      swift_release();
      goto LABEL_93;
    }
    uint64_t v176 = *(void *)(v171 + 56);
    uint64_t v177 = v172;
    uint64_t v178 = *(void *)(v176 + 8 * v174);
    swift_retain_n(v177);
    Float64 v179 = seconds[0];
    uint64_t v180 = CMLSequence.value(at:)(v178);
    seconds[0] = v179;
    if (v179 != 0.0) {
      goto LABEL_162;
    }
    uint64_t v181 = v180;
    swift_release();
    MLDataValue.init(_:)(v181, v158);
    swift_bridgeObjectRelease(v173);
    swift_release();
    swift_release_n(v177);
    CMTimeValue v182 = v373.value;
    uint64_t v171 = v173;
    if (LOBYTE(v373.epoch) != 1)
    {
      outlined consume of MLDataValue((void *)v373.value, *(void **)&v373.timescale, v373.epoch);
      uint64_t v172 = v365;
LABEL_93:
      if (*(void *)(v171 + 16))
      {
        swift_retain();
        swift_bridgeObjectRetain(v171);
        swift_retain();
        uint64_t v193 = v171;
        unint64_t v194 = specialized __RawDictionaryStorage.find<A>(_:)(6581861, 0xE300000000000000);
        if (v195)
        {
          uint64_t v196 = *(void *)(v171 + 56);
          int64_t v197 = v172;
          uint64_t v198 = *(void *)(v196 + 8 * v194);
          swift_retain_n(v197);
          Float64 v199 = seconds[0];
          uint64_t v200 = CMLSequence.value(at:)(v198);
          seconds[0] = v199;
          if (v199 == 0.0)
          {
            uint64_t v201 = v200;
            swift_release();
            MLDataValue.init(_:)(v201, v158);
            swift_bridgeObjectRelease(v193);
            swift_release();
            swift_release_n(v197);
            CMTimeValue v202 = v373.value;
            uint64_t v171 = v193;
            if (LOBYTE(v373.epoch))
            {
              outlined consume of MLDataValue((void *)v373.value, *(void **)&v373.timescale, v373.epoch);
              uint64_t v172 = v365;
              goto LABEL_99;
            }
            Swift::Int v228 = currentFileIndex;
            if (v373.value >= 0)
            {
              outlined consume of MLDataValue(log, *(void **)type, 2);
              CMTimeMakeWithSeconds(&v373, (double)(int)v202, 1000);
              CMTimeValue v167 = v373.value;
              unsigned int v168 = v373.timescale;
              uint64_t v169 = v373.flags;
              CMTimeEpoch v170 = v373.epoch;
              Float64 v156 = seconds[0];
              goto LABEL_115;
            }
            os_log_t v183 = log;
            outlined copy of MLDataValue(log, *(void **)type, 2u);
            uint64_t v184 = (os_log_s *)Logger.logObject.getter();
            os_log_type_t v260 = static os_log_type_t.info.getter();
            LODWORD(v372) = v260;
            if (!os_log_type_enabled(v184, v260)) {
              goto LABEL_132;
            }
            uint64_t v261 = swift_slowAlloc(22, -1);
            os_log_t v333 = v184;
            uint64_t v187 = v261;
            CMTimeValue v332 = swift_slowAlloc(32, -1);
            v373.CMTimeValue value = v332;
            *(_DWORD *)uint64_t v187 = 134218242;
            uint64_t v357 = v202;
            UnsafeMutableRawBufferPointer.copyMemory(from:)(&v357, v358, v187 + 4, v187 + 12);
            *(_WORD *)(v187 + 12) = 2080;
            uint64_t v334 = v187 + 14;
            unsigned __int8 v262 = *(void **)type;
            outlined copy of MLDataValue(v183, *(void **)type, 2u);
            uint64_t v357 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)((uint64_t)v183, (int64_t)v262, &v373.value);
            UnsafeMutableRawBufferPointer.copyMemory(from:)(&v357, v358, v334, v187 + 22);
            outlined consume of MLDataValue(v183, v262, 2);
            outlined consume of MLDataValue(v183, v262, 2);
            outlined consume of MLDataValue(v183, v262, 2);
            os_log_t v189 = v333;
            uint64_t v190 = v333;
            os_log_type_t v191 = LOBYTE(v372);
            uint64_t v192 = "End time %ld specified in video file %s is negative, using end of file automatically.";
LABEL_131:
            _os_log_impl(&dword_0, v190, v191, v192, (uint8_t *)v187, 0x16u);
            CMTimeValue v263 = v332;
            swift_arrayDestroy(v332, 1, v351);
            swift_slowDealloc(v263, -1, -1);
            int64_t v223 = (uint8_t *)v187;
LABEL_109:
            swift_slowDealloc(v223, -1, -1);
            os_log_t v224 = v189;
            goto LABEL_110;
          }
LABEL_162:
          swift_release();
          v312 = "CreateML/MLDataTable.Row.swift";
          uint64_t v313 = 30;
          Float64 v314 = seconds[0];
LABEL_159:
          swift_unexpectedError(*(void *)&v314, v312, v313, 1);
          BUG();
        }
        swift_release();
        swift_bridgeObjectRelease(v171);
        swift_release();
      }
LABEL_99:
      outlined consume of MLDataValue(log, *(void **)type, 2);
      if (*(void *)(v171 + 16))
      {
        swift_retain();
        swift_bridgeObjectRetain(v171);
        swift_retain();
        char v203 = v171;
        unint64_t v204 = specialized __RawDictionaryStorage.find<A>(_:)(6581861, 0xE300000000000000);
        if (v205)
        {
          uint64_t v206 = *(void *)(v171 + 56);
          v207 = v172;
          uint64_t v208 = *(void *)(v206 + 8 * v204);
          swift_retain_n(v207);
          Float64 v209 = seconds[0];
          uint64_t v210 = CMLSequence.value(at:)(v208);
          seconds[0] = v209;
          if (v209 != 0.0) {
            goto LABEL_162;
          }
          uint64_t v211 = v210;
          swift_release();
          MLDataValue.init(_:)(v211, v158);
          swift_bridgeObjectRelease(v203);
          swift_release();
          swift_release_n(v207);
          int64_t v212 = (void *)v373.value;
          uint64_t v213 = *(void **)&v373.timescale;
          if (LOBYTE(v373.epoch) == 2)
          {
            Float64 v214 = seconds[0];
            static _VideoUtilities.getSecondsFromTimeString(_:)(*(long long *)&v373.value);
            if (v214 == 0.0)
            {
              seconds[0] = v158;
              outlined consume of MLDataValue(v212, v213, 2);
              CMTimeMakeWithSeconds(&v373, seconds[0], 1000);
              CMTimeValue v167 = v373.value;
              unsigned int v168 = v373.timescale;
              uint64_t v169 = v373.flags;
              CMTimeEpoch v170 = v373.epoch;
              Float64 v156 = 0.0;
              goto LABEL_113;
            }
            outlined consume of MLDataValue(v342, v341, 2);
            outlined consume of MLDataValue(v212, v213, 2);
            swift_release();
            swift_bridgeObjectRelease(v360);
            swift_release();
            swift_bridgeObjectRelease(v346);
            (*(void (**)(unsigned char *, uint64_t))(v344 + 8))(v348, v345);
            outlined consume of Result<_DataTable, Error>((uint64_t)v338, v339);
            return outlined destroy of MLActivityClassifier.ModelParameters((uint64_t)v359, type metadata accessor for _TablePrinter);
          }
          outlined consume of MLDataValue((void *)v373.value, *(void **)&v373.timescale, v373.epoch);
        }
        else
        {
          swift_release();
          swift_bridgeObjectRelease(v171);
          swift_release();
        }
      }
      int64_t v215 = v346;
      uint64_t v216 = v346;
      swift_bridgeObjectRetain_n(v346, 2);
      os_log_t v189 = (os_log_t)Logger.logObject.getter();
      os_log_type_t v217 = static os_log_type_t.error.getter(v216, 2);
      if (!os_log_type_enabled(v189, v217))
      {

        swift_bridgeObjectRelease_n(v215, 2, v225, v226, v227);
        goto LABEL_112;
      }
      uint64_t v218 = (uint8_t *)swift_slowAlloc(12, -1);
      Float64 v372 = COERCE_DOUBLE(swift_slowAlloc(32, -1));
      *(Float64 *)&v373.CMTimeValue value = v372;
      *(_DWORD *)uint64_t v218 = 136315138;
      os_log_t log = (os_log_t)(v218 + 4);
      swift_bridgeObjectRetain(v215);
      uint64_t v357 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v331, v215, &v373.value);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v357, v358, log, v218 + 12);
      swift_bridgeObjectRelease_n(v215, 3, v219, v220, v221);
      _os_log_impl(&dword_0, v189, v217, "Unsupported end time format in annotation file. Please provide either a Double or Int value in seconds, or a String value in hours:minutes:seconds.fraction, minutes:seconds.fraction, or seconds.fraction format. Skipping end time for file %s", v218, 0xCu);
      Float64 v222 = v372;
      swift_arrayDestroy(*(void *)&v372, 1, v351);
      swift_slowDealloc(*(void *)&v222, -1, -1);
      int64_t v223 = v218;
      goto LABEL_109;
    }
    if (*(double *)&v373.value >= 0.0)
    {
      Float64 v372 = *(double *)&v373.value;
      outlined consume of MLDataValue(log, *(void **)type, 2);
      CMTimeMakeWithSeconds(&v373, v372, 1000);
      CMTimeValue v167 = v373.value;
      unsigned int v168 = v373.timescale;
      uint64_t v169 = v373.flags;
      CMTimeEpoch v170 = v373.epoch;
      Float64 v156 = seconds[0];
    }
    else
    {
      os_log_t v183 = log;
      outlined copy of MLDataValue(log, *(void **)type, 2u);
      uint64_t v184 = (os_log_s *)Logger.logObject.getter();
      os_log_type_t v185 = static os_log_type_t.info.getter();
      LODWORD(v372) = v185;
      if (os_log_type_enabled(v184, v185))
      {
        uint64_t v186 = swift_slowAlloc(22, -1);
        os_log_t v333 = v184;
        uint64_t v187 = v186;
        CMTimeValue v332 = swift_slowAlloc(32, -1);
        v373.CMTimeValue value = v332;
        *(_DWORD *)uint64_t v187 = 134218242;
        uint64_t v357 = v182;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v357, v358, v187 + 4, v187 + 12);
        *(_WORD *)(v187 + 12) = 2080;
        uint64_t v334 = v187 + 14;
        uint64_t v188 = *(void **)type;
        outlined copy of MLDataValue(v183, *(void **)type, 2u);
        uint64_t v357 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)((uint64_t)v183, (int64_t)v188, &v373.value);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v357, v358, v334, v187 + 22);
        outlined consume of MLDataValue(v183, v188, 2);
        outlined consume of MLDataValue(v183, v188, 2);
        outlined consume of MLDataValue(v183, v188, 2);
        os_log_t v189 = v333;
        uint64_t v190 = v333;
        os_log_type_t v191 = LOBYTE(v372);
        uint64_t v192 = "End time %f specified in video file %s is negative, using end of file automatically.";
        goto LABEL_131;
      }
LABEL_132:
      v264 = *(void **)type;
      outlined consume of MLDataValue(v183, *(void **)type, 2);
      outlined consume of MLDataValue(v183, v264, 2);
      os_log_t v224 = v184;
LABEL_110:

LABEL_112:
      CMTimeValue v167 = v354;
      unsigned int v168 = v363;
      uint64_t v169 = v364;
      CMTimeEpoch v170 = v355;
      Float64 v156 = seconds[0];
LABEL_113:
      LOBYTE(v171) = v360;
    }
    Swift::Int v228 = currentFileIndex;
LABEL_115:
    uint64_t v229 = static _VideoUtilities.getHandKeyPointsFromVideoUrl(url:startTime:endTime:targetFrameRate:)(v348, (CMTimeValue)v350, v374 | (unint64_t)(v343 << 32), v367, v167, v168 | (unint64_t)(v169 << 32), v322, v170);
    if (v156 != 0.0)
    {
      outlined consume of MLDataValue(v342, v341, 2);
      swift_release();
      swift_bridgeObjectRelease(v171);
      swift_release();
      swift_bridgeObjectRelease(v346);
      (*(void (**)(unsigned char *, uint64_t))(v344 + 8))(v348, v345);
      goto LABEL_147;
    }
    if (__OFADD__(v323, v228)) {
      BUG();
    }
    uint64_t v230 = (uint64_t)v229;
    seconds[0] = 0.0;
    uint64_t v231 = v229[2];
    *(void *)type = specialized Array.init(repeating:count:)(v323 + v228, v231);
    os_log_t log = (os_log_t)specialized Array.init(repeating:count:)((uint64_t)v342, (uint64_t)v341, v231);
    Float64 v372 = COERCE_DOUBLE(specialized Array.init(repeating:count:)(v331, v346, v231));
    swift_beginAccess(v328, &v373, 33, 0);
    specialized Array.append<A>(contentsOf:)(v230);
    swift_endAccess(&v373);
    swift_beginAccess(v329, &v373, 33, 0);
    specialized Array.append<A>(contentsOf:)(*(uint64_t *)type);
    swift_endAccess(&v373);
    swift_beginAccess(v330, &v373, 33, 0);
    specialized Array.append<A>(contentsOf:)((uint64_t)log);
    swift_endAccess(&v373);
    swift_beginAccess(v337, &v373, 33, 0);
    specialized Array.append<A>(contentsOf:)(*(uint64_t *)&v372);
    swift_endAccess(&v373);
    uint64_t v232 = (uint64_t)v359;
    _TablePrinter.printRow(currentFileIndex:)(currentFileIndex);
    uint64_t v233 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<CVarArg>);
    uint64_t v234 = swift_allocObject(v233, 72, 7);
    *(void *)(v234 + 16) = 1;
    *(void *)(v234 + 24) = 2;
    double v36 = -Date.timeIntervalSinceNow.getter();
    *(void *)(v234 + 56) = &type metadata for Double;
    *(void *)(v234 + 64) = &protocol witness table for Double;
    *(double *)(v234 + 32) = v36;
    Float64 v372 = COERCE_DOUBLE(String.init(format:_:)(1714826789, 0xE400000000000000, v234));
    int64_t v236 = v235;
    uint64_t v237 = v324;
    outlined init with copy of MLTrainingSessionParameters(v232, (uint64_t)v324, type metadata accessor for _TablePrinter);
    swift_bridgeObjectRetain(v236);
    uint64_t v238 = (os_log_s *)Logger.logObject.getter();
    os_log_type_t v239 = static os_log_type_t.debug.getter();
    int v240 = v239;
    if (os_log_type_enabled(v238, v239))
    {
      os_log_t log = v238;
      uint64_t v241 = swift_slowAlloc(32, -1);
      *(_DWORD *)type = v240;
      uint64_t v242 = v241;
      Swift::Int currentFileIndex = swift_slowAlloc(32, -1);
      v373.CMTimeValue value = currentFileIndex;
      *(_DWORD *)uint64_t v242 = 134218498;
      uint64_t v357 = v321;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v357, v358, v242 + 4, v242 + 12);
      *(_WORD *)(v242 + 12) = 2048;
      uint64_t v243 = (uint64_t)v237;
      uint64_t v244 = *v237;
      outlined destroy of MLActivityClassifier.ModelParameters(v243, type metadata accessor for _TablePrinter);
      uint64_t v357 = v244;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v357, v358, v242 + 14, v242 + 22);
      *(_WORD *)(v242 + 22) = 2080;
      swift_bridgeObjectRetain(v236);
      uint64_t v357 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(*(uint64_t *)&v372, v236, &v373.value);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v357, v358, v242 + 24, v242 + 32);
      swift_bridgeObjectRelease_n(v236, 3, v245, v246, v247);
      os_log_t v248 = log;
      _os_log_impl(&dword_0, log, type[0], "Extracted features from %ld out of %ld annotated video clips, elapsed time: %s", (uint8_t *)v242, 0x20u);
      Swift::Int v249 = currentFileIndex;
      swift_arrayDestroy(currentFileIndex, 1, v351);
      swift_slowDealloc(v249, -1, -1);
      swift_slowDealloc(v242, -1, -1);
      swift_release();
      swift_bridgeObjectRelease(v360);
      swift_release();
      os_log_t v250 = v248;
    }
    else
    {
      outlined destroy of MLActivityClassifier.ModelParameters((uint64_t)v237, type metadata accessor for _TablePrinter);
      swift_release();
      swift_bridgeObjectRelease(v360);
      swift_release();
      swift_bridgeObjectRelease_n(v236, 2, v251, v252, v253);
      os_log_t v250 = v238;
    }

    (*(void (**)(unsigned char *, uint64_t))(v344 + 8))(v348, v345);
    uint64_t v38 = v340;
    CMTimeValue v34 = (CMTimeValue)v338;
    char v37 = v339;
    v373.CMTimeValue value = (CMTimeValue)v338;
    LOBYTE(v373.timescale) = v339;
  }
  while (v38 != MLDataTable.size.getter());
LABEL_134:
  outlined consume of Result<_DataTable, Error>(v34, v37);
  static os_log_type_t.info.getter();
  uint64_t v265 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<CVarArg>);
  v266 = (void *)swift_allocObject(v265, 72, 7);
  char v267 = (char)v266;
  v266[2] = 1;
  v266[3] = 2;
  v266[7] = &type metadata for Int;
  v266[8] = &protocol witness table for Int;
  v266[4] = 3;
  os_log(_:dso:log:type:_:)("event: %lu", 10);
  swift_bridgeObjectRelease(v267);
  uint64_t v268 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, MLUntypedColumn)>);
  uint64_t inited = swift_initStackObject(v268, v318);
  *(void *)(inited + 16) = 4;
  *(void *)(inited + 24) = 8;
  *(void *)(inited + 32) = 0x6C6562616CLL;
  *(void *)(inited + 40) = 0xE500000000000000;
  v270 = v330;
  swift_beginAccess(v330, &v338, 0, 0);
  v373.CMTimeValue value = *v270;
  v271 = alloca(24);
  v272 = alloca(32);
  v319 = &v373;
  swift_bridgeObjectRetain(v373.value);
  uint64_t ML14_UntypedColumnC_s5Error_pTgm5 = _ss6ResultOsRi_zrlE8catchingAByxq_Gxyq_YKXE_tcfC8CreateML14_UntypedColumnC_s5Error_pTgm5((void (*)(void *))partial apply for specialized closure #1 in MLUntypedColumn.init<A>(_:));
  LOBYTE(v270) = v274;
  swift_bridgeObjectRelease(v373.value);
  *(void *)(inited + 48) = ML14_UntypedColumnC_s5Error_pTgm5;
  *(unsigned char *)(inited + 56) = v270 & 1;
  *(void *)(inited + 64) = 0x5F6E6F6973736573;
  *(void *)(inited + 72) = 0xEA00000000006469;
  v275 = v329;
  swift_beginAccess(v329, &v373, 0, 0);
  uint64_t v357 = *v275;
  v276 = alloca(24);
  v277 = alloca(32);
  v319 = (CMTime *)&v357;
  swift_bridgeObjectRetain(v357);
  uint64_t v278 = _ss6ResultOsRi_zrlE8catchingAByxq_Gxyq_YKXE_tcfC8CreateML14_UntypedColumnC_s5Error_pTgm5((void (*)(void *))partial apply for specialized closure #1 in MLUntypedColumn.init<A>(_:));
  LOBYTE(v270) = v279;
  swift_bridgeObjectRelease(v357);
  *(void *)(inited + 80) = v278;
  *(unsigned char *)(inited + 88) = v270 & 1;
  *(void *)(inited + 96) = 0x746E696F7079656BLL;
  *(void *)(inited + 104) = 0xE900000000000073;
  v280 = v328;
  swift_beginAccess(v328, &v357, 0, 0);
  v320[0] = *v280;
  v281 = alloca(24);
  v282 = alloca(32);
  v319 = (CMTime *)v320;
  swift_bridgeObjectRetain(LOBYTE(v320[0]));
  uint64_t v283 = _ss6ResultOsRi_zrlE8catchingAByxq_Gxyq_YKXE_tcfC8CreateML14_UntypedColumnC_s5Error_pTgm5((void (*)(void *))partial apply for specialized closure #1 in MLUntypedColumn.init<A>(_:));
  LOBYTE(v270) = v284;
  swift_bridgeObjectRelease(LOBYTE(v320[0]));
  *(void *)(inited + 112) = v283;
  *(unsigned char *)(inited + 120) = v270 & 1;
  *(void *)(inited + 128) = 0x7461506F65646976;
  *(void *)(inited + 136) = 0xE900000000000068;
  v285 = v337;
  swift_beginAccess(v337, v320, 0, 0);
  uint64_t v335 = *v285;
  v286 = alloca(24);
  v287 = alloca(32);
  v319 = (CMTime *)&v335;
  swift_bridgeObjectRetain(v335);
  uint64_t v288 = _ss6ResultOsRi_zrlE8catchingAByxq_Gxyq_YKXE_tcfC8CreateML14_UntypedColumnC_s5Error_pTgm5((void (*)(void *))closure #1 in MLUntypedColumn.init<A>(_:)specialized partial apply);
  LOBYTE(v270) = v289;
  swift_bridgeObjectRelease(v335);
  *(void *)(inited + 144) = v288;
  *(unsigned char *)(inited + 152) = v270 & 1;
  uint64_t v290 = Dictionary.init(dictionaryLiteral:)(inited, &type metadata for String, &type metadata for MLUntypedColumn, &protocol witness table for String);
  Float64 v291 = seconds[0];
  specialized MLDataTable.init<A>(uniqueKeysWithValues:)(v290);
  if (v291 == 0.0)
  {
    char v292 = v336;
    v293 = v327;
    void *v327 = v335;
    *((unsigned char *)v293 + 8) = v292;
  }
LABEL_148:
  uint64_t v303 = (uint64_t)v359;
  return outlined destroy of MLActivityClassifier.ModelParameters(v303, type metadata accessor for _TablePrinter);
}

uint64_t static MLHandActionClassifier.FeatureExtractor.extractFeatures(from:targetFrameRate:startingSessionId:)(uint64_t a1, uint64_t a2, double a3)
{
  uint64_t v11 = a2;
  double v12 = a3;
  uint64_t v13 = v3;
  uint64_t v6 = *(void *)a1;
  char v7 = *(unsigned char *)(a1 + 8);
  uint64_t inited = swift_initStackObject(v5, v10);
  *(void *)(inited + 32) = _swiftEmptyArrayStorage;
  *(void *)(inited + 40) = _swiftEmptyArrayStorage;
  *(void *)(inited + 48) = _swiftEmptyArrayStorage;
  *(void *)(inited + 56) = _swiftEmptyArrayStorage;
  *(void *)(inited + 16) = v6;
  *(unsigned char *)(inited + 24) = v7;
  if (v4) {
    return outlined copy of Result<_DataTable, Error>(v6, v7);
  }
  outlined copy of Result<_DataTable, Error>(v6, v7);
  MLHandActionClassifier.FeatureExtractor.extractFeaturesFromFileTable(_:startingSessionId:)(v11, v12);
  return swift_release();
}

uint64_t MLHandActionClassifier.FeatureExtractor.deinit()
{
  outlined consume of Result<_DataTable, Error>(*(void *)(v0 + 16), *(_DWORD *)(v0 + 24));
  swift_bridgeObjectRelease(*(void *)(v0 + 32));
  swift_bridgeObjectRelease(*(void *)(v0 + 40));
  swift_bridgeObjectRelease(*(void *)(v0 + 48));
  swift_bridgeObjectRelease(*(void *)(v0 + 56));
  return v0;
}

uint64_t MLHandActionClassifier.FeatureExtractor.__deallocating_deinit()
{
  MLHandActionClassifier.FeatureExtractor.deinit();
  return swift_deallocClassInstance(v0, 64, 7);
}

uint64_t type metadata accessor for MLHandActionClassifier.FeatureExtractor()
{
  return objc_opt_self(_TtCV8CreateML22MLHandActionClassifier16FeatureExtractor);
}

ValueMetadata *type metadata accessor for _MLDevice()
{
  return &type metadata for _MLDevice;
}

CreateML::_MLDevice_optional __swiftcall _MLDevice.init(rawValue:)(Swift::String rawValue)
{
  Swift::Int v1 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&outlined read-only object #0 of _MLDevice.init(rawValue:), rawValue);
  swift_bridgeObjectRelease(rawValue._object);
  result.CMTimeValue value = 2 - (v1 == 1);
  if (!v1) {
    return 0;
  }
  return result;
}

uint64_t _MLDevice.rawValue.getter(char a1)
{
  uint64_t result = 7696483;
  if ((a1 & 1) == 0) {
    return 1869903201;
  }
  return result;
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance _MLDevice(char *a1, char *a2)
{
  return specialized == infix<A>(_:_:)(*a1, *a2);
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance _MLDevice()
{
  return specialized RawRepresentable<>.hashValue.getter(*v0);
}

Swift::Int specialized RawRepresentable<>.hashValue.getter(char a1)
{
  return specialized RawRepresentable<>._rawHashValue(seed:)(0, a1 & 1);
}

{
  return specialized RawRepresentable<>._rawHashValue(seed:)(0, a1 & 1);
}

{
  unint64_t v1;
  char v2;
  char v3;
  unsigned char v5[88];

  Hasher.init(_seed:)(0);
  Swift::Int v1 = ColumnDescriptor.FeatureType.rawValue.getter(a1);
  uint64_t v3 = v2;
  String.hash(into:)(v5, v1);
  swift_bridgeObjectRelease(v3);
  return Hasher._finalize()();
}

Swift::Int specialized RawRepresentable<>.hashValue.getter(unsigned int a1)
{
  return specialized RawRepresentable<>.hashValue.getter(a1, (void (*)(unsigned char *, void))specialized RawRepresentable<>.hash(into:));
}

{
  return specialized RawRepresentable<>.hashValue.getter(a1, (void (*)(unsigned char *, void))specialized RawRepresentable<>.hash(into:));
}

{
  return specialized RawRepresentable<>.hashValue.getter(a1, (void (*)(unsigned char *, void))specialized RawRepresentable<>.hash(into:));
}

Swift::Int specialized RawRepresentable<>.hashValue.getter(unsigned int a1, void (*a2)(unsigned char *, void))
{
  Hasher.init(_seed:)(0);
  a2(v3, a1);
  return Hasher._finalize()();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance _MLDevice(uint64_t a1)
{
  return specialized RawRepresentable<>.hash(into:)(a1, *v1);
}

uint64_t specialized RawRepresentable<>.hash(into:)(uint64_t a1, char a2)
{
  uint64_t v2 = 0;
  BOOL v3 = (a2 & 1) == 0;
  uint64_t v4 = 7696483;
  if (v3) {
    uint64_t v4 = 1869903201;
  }
  LOBYTE(v2) = v3;
  uint64_t v5 = (v2 << 56) - 0x1D00000000000000;
  String.hash(into:)(a1, v4);
  return swift_bridgeObjectRelease(v5);
}

{
  unint64_t v2;
  uint64_t v3;

  uint64_t v2 = 0xEB0000000064657ALL;
  switch(a2)
  {
    case 0:
      BOOL v3 = 0x696C616974696E69;
      break;
    case 1:
      BOOL v3 = 0x6974636172747865;
      goto LABEL_6;
    case 2:
      uint64_t v2 = 0xE800000000000000;
      BOOL v3 = 0x676E696E69617274;
      break;
    case 3:
      BOOL v3 = 0x697461756C617665;
LABEL_6:
      uint64_t v2 = 0xEA0000000000676ELL;
      break;
    case 4:
      uint64_t v2 = 0xEB00000000676E69;
      BOOL v3 = 0x636E657265666E69;
      break;
  }
  String.hash(into:)(a1, v3);
  return swift_bridgeObjectRelease(v2);
}

{
  unint64_t v2;
  char v3;
  char v4;

  uint64_t v2 = ColumnDescriptor.FeatureType.rawValue.getter(a2);
  uint64_t v4 = v3;
  String.hash(into:)(a1, v2);
  return swift_bridgeObjectRelease(v4);
}

{
  unint64_t v2;
  uint64_t v3;

  uint64_t v2 = 0xEB00000000657079;
  switch(a2)
  {
    case 0:
      BOOL v3 = 0x54746E656D656C65;
      break;
    case 1:
      uint64_t v2 = 0xE400000000000000;
      BOOL v3 = 1702521203;
      break;
    case 2:
      uint64_t v2 = 0xEA00000000007365;
      BOOL v3 = 0x69726F6765746163;
      break;
    case 3:
      uint64_t v2 = 0xEB0000000073726FLL;
      BOOL v3 = 0x7470697263736564;
      break;
  }
  String.hash(into:)(a1, v3);
  return swift_bridgeObjectRelease(v2);
}

{
  uint64_t v2;

  uint64_t v2 = 0x6574694C6E6E63;
  if ((a2 & 1) == 0) {
    uint64_t v2 = 7237219;
  }
  String.hash(into:)(a1, v2);
  return swift_bridgeObjectRelease(((unint64_t)(a2 & 1) << 58) | 0xE300000000000000);
}

{
  char *v2;
  unint64_t v3;

  switch(a2)
  {
    case 0:
      uint64_t v2 = (char *)0xE400000000000000;
      BOOL v3 = 1936945004;
      break;
    case 1:
      uint64_t v2 = (char *)0xEB0000000073736FLL;
      BOOL v3 = 0x4C746E65746E6F63;
      break;
    case 2:
      uint64_t v2 = (char *)0xE900000000000073;
      BOOL v3 = 0x736F4C656C797473;
      break;
    case 3:
      uint64_t v2 = (char *)0xE800000000000000;
      BOOL v3 = 0x7963617275636361;
      break;
    case 4:
      uint64_t v2 = (char *)0xEE0073736F4C6E6FLL;
      BOOL v3 = 0x69746164696C6176;
      break;
    case 5:
      uint64_t v2 = "accuracy" + 0x8000000000000000;
      BOOL v3 = 0xD000000000000012;
      break;
    case 6:
      uint64_t v2 = "validationAccuracy" + 0x8000000000000000;
      BOOL v3 = 0xD000000000000010;
      break;
    case 7:
      uint64_t v2 = "stylizedImageURL" + 0x8000000000000000;
      BOOL v3 = 0xD000000000000014;
      break;
    case 8:
      uint64_t v2 = (char *)0xEC000000726F7272;
      BOOL v3 = 0x456D756D6978616DLL;
      break;
    case 9:
      uint64_t v2 = "rror" + 0x8000000000000000;
      BOOL v3 = 0xD00000000000001ELL;
      break;
    case 10:
      uint64_t v2 = "validationRootMeanSquaredError" + 0x8000000000000000;
      BOOL v3 = 0xD000000000000016;
      break;
  }
  String.hash(into:)(a1, v3);
  return swift_bridgeObjectRelease(v2);
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance _MLDevice(uint64_t a1)
{
  return specialized RawRepresentable<>._rawHashValue(seed:)(a1, *v1);
}

Swift::Int specialized RawRepresentable<>._rawHashValue(seed:)(uint64_t a1, unsigned int a2)
{
  return specialized RawRepresentable<>._rawHashValue(seed:)(a1, a2, (void (*)(unsigned char *, void))specialized RawRepresentable<>.hash(into:));
}

{
  return specialized RawRepresentable<>._rawHashValue(seed:)(a1, a2, (void (*)(unsigned char *, void))specialized RawRepresentable<>.hash(into:));
}

{
  return specialized RawRepresentable<>._rawHashValue(seed:)(a1, a2, (void (*)(unsigned char *, void))specialized RawRepresentable<>.hash(into:));
}

Swift::Int specialized RawRepresentable<>._rawHashValue(seed:)(uint64_t a1, char a2)
{
  Hasher.init(_seed:)(a1);
  uint64_t v3 = 0x6574694C6E6E63;
  if ((a2 & 1) == 0) {
    uint64_t v3 = 7237219;
  }
  String.hash(into:)(v5, v3);
  swift_bridgeObjectRelease(((unint64_t)(a2 & 1) << 58) | 0xE300000000000000);
  return Hasher._finalize()();
}

{
  unint64_t v2;
  char v3;
  char v4;
  unsigned char v6[88];

  Hasher.init(_seed:)(a1);
  uint64_t v2 = ColumnDescriptor.FeatureType.rawValue.getter(a2);
  uint64_t v4 = v3;
  String.hash(into:)(v6, v2);
  swift_bridgeObjectRelease(v4);
  return Hasher._finalize()();
}

{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unsigned char v7[88];

  Hasher.init(_seed:)(a1);
  uint64_t v3 = 0;
  uint64_t v4 = 7696483;
  if ((a2 & 1) == 0) {
    uint64_t v4 = 1869903201;
  }
  LOBYTE(v3) = (a2 & 1) == 0;
  uint64_t v5 = (v3 << 56) - 0x1D00000000000000;
  String.hash(into:)(v7, v4);
  swift_bridgeObjectRelease(v5);
  return Hasher._finalize()();
}

Swift::Int specialized RawRepresentable<>._rawHashValue(seed:)(uint64_t a1, unsigned int a2, void (*a3)(unsigned char *, void))
{
  Hasher.init(_seed:)(a1);
  a3(v5, a2);
  return Hasher._finalize()();
}

CreateML::_MLDevice_optional protocol witness for RawRepresentable.init(rawValue:) in conformance _MLDevice(Swift::String *a1)
{
  uint64_t v2 = v1;
  result.CMTimeValue value = _MLDevice.init(rawValue:)(*a1).value;
  v2->CMTimeValue value = result.value;
  return result;
}

uint64_t protocol witness for RawRepresentable.rawValue.getter in conformance _MLDevice()
{
  uint64_t v2 = v0;
  uint64_t result = _MLDevice.rawValue.getter(*v1);
  uint64_t *v2 = result;
  v2[1] = v4;
  return result;
}

uint64_t base witness table accessor for Equatable in _MLDevice()
{
  return lazy protocol witness table accessor for type _MLDevice and conformance _MLDevice();
}

uint64_t lazy protocol witness table accessor for type _MLDevice and conformance _MLDevice()
{
  uint64_t result = lazy protocol witness table cache variable for type _MLDevice and conformance _MLDevice;
  if (!lazy protocol witness table cache variable for type _MLDevice and conformance _MLDevice)
  {
    uint64_t result = swift_getWitnessTable(&protocol conformance descriptor for _MLDevice, &type metadata for _MLDevice);
    lazy protocol witness table cache variable for type _MLDevice and conformance _MLDevice = result;
  }
  return result;
}

unint64_t MLCreateErrorDomain.getter()
{
  return 0xD000000000000012;
}

uint64_t protocol witness for Error._domain.getter in conformance MLCreateError(uint64_t a1)
{
  uint64_t v1 = lazy protocol witness table accessor for type MLCreateError and conformance MLCreateError();
  return Error<>._domain.getter(a1, v1);
}

uint64_t protocol witness for Error._code.getter in conformance MLCreateError(uint64_t a1)
{
  uint64_t v1 = lazy protocol witness table accessor for type MLCreateError and conformance MLCreateError();
  return Error<>._code.getter(a1, v1);
}

uint64_t protocol witness for Error._userInfo.getter in conformance MLCreateError()
{
  return Error._userInfo.getter();
}

uint64_t protocol witness for Error._getEmbeddedNSError() in conformance MLCreateError()
{
  return Error._getEmbeddedNSError()();
}

unint64_t static MLCreateError.errorDomain.getter()
{
  return 0xD000000000000012;
}

unint64_t MLCreateError.failureReason.getter()
{
  uint64_t v1 = *(void *)v0;
  uint64_t v2 = *(void *)(v0 + 8);
  uint64_t v3 = *(void *)(v0 + 16);
  uint64_t v4 = *(void *)(v0 + 24);
  uint64_t v5 = *(void *)(v0 + 32);
  uint64_t v6 = *(void *)(v0 + 40);
  unsigned int v7 = *(unsigned __int8 *)(v0 + 48);
  unint64_t result = 0xD000000000000024;
  if (v7 >= 3)
  {
    if (v7 != 3)
    {
      unint64_t result = 0xD00000000000001BLL;
      if (!(v6 | v5 | v1 | v2 | v4 | v3)) {
        return 0xD000000000000018;
      }
    }
  }
  else
  {
    outlined copy of MLCreateError(v1, v2, v3, v4, v5, v6, v7);
    return v1;
  }
  return result;
}

uint64_t outlined copy of MLCreateError(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, unsigned __int8 a7)
{
  uint64_t result = a7;
  if (a7 < 3u) {
    return swift_bridgeObjectRetain(a2);
  }
  if (a7 == 3)
  {
    swift_bridgeObjectRetain(a2);
    swift_bridgeObjectRetain(a4);
    return swift_bridgeObjectRetain(a6);
  }
  return result;
}

unint64_t MLCreateError.errorDescription.getter()
{
  uint64_t v1 = *(void *)v0;
  unint64_t v2 = *(void *)(v0 + 8);
  uint64_t v3 = *(void *)(v0 + 16);
  unint64_t v4 = *(void *)(v0 + 24);
  switch(*(unsigned char *)(v0 + 48))
  {
    case 0:
      _StringGuts.grow(_:)(26);
      swift_bridgeObjectRelease(0xE000000000000000);
      unint64_t v10 = 0xD000000000000018;
      goto LABEL_5;
    case 1:
      _StringGuts.grow(_:)(23);
      swift_bridgeObjectRelease(0xE000000000000000);
      unint64_t v10 = 0xD000000000000015;
      goto LABEL_5;
    case 2:
      _StringGuts.grow(_:)(21);
      swift_bridgeObjectRelease(0xE000000000000000);
      unint64_t v10 = 0xD000000000000013;
LABEL_5:
      v5._uint64_t countAndFlagsBits = v1;
      v5._char object = (void *)v2;
      goto LABEL_7;
    case 3:
      unint64_t v10 = 0;
      int64_t v8 = *(void **)(v0 + 40);
      uint64_t v9 = *(void *)(v0 + 32);
      _StringGuts.grow(_:)(111);
      v6._uint64_t countAndFlagsBits = 0xD000000000000039;
      v6._char object = "eate the session." + 0x8000000000000000;
      String.append(_:)(v6);
      v6._uint64_t countAndFlagsBits = v1;
      v6._char object = (void *)v2;
      String.append(_:)(v6);
      v6._uint64_t countAndFlagsBits = 0xD00000000000001BLL;
      v6._char object = "n incompatible value for " + 0x8000000000000000;
      String.append(_:)(v6);
      v6._uint64_t countAndFlagsBits = v3;
      v6._char object = (void *)v4;
      String.append(_:)(v6);
      v6._char object = ". Session was created with " + 0x8000000000000000;
      v6._uint64_t countAndFlagsBits = 0xD000000000000014;
      String.append(_:)(v6);
      v6._uint64_t countAndFlagsBits = v9;
      v6._char object = v8;
      String.append(_:)(v6);
      v5._uint64_t countAndFlagsBits = 46;
      v5._char object = (void *)0xE100000000000000;
LABEL_7:
      String.append(_:)(v5);
      unint64_t result = v10;
      break;
    case 4:
      unint64_t result = 0xD000000000000051;
      if (!(*(void *)(v0 + 40) | *(void *)(v0 + 32) | v1 | v2 | v4 | v3)) {
        unint64_t result = 0xD00000000000001CLL;
      }
      break;
  }
  return result;
}

uint64_t MLCreateError.errorCode.getter()
{
  uint64_t result = v0[3].u8[0];
  switch(v0[3].i8[0])
  {
    case 0:
      return result;
    case 1:
      uint64_t result = 1;
      break;
    case 2:
      uint64_t result = 2;
      break;
    case 3:
      uint64_t result = 4;
      break;
    case 4:
      __m128i v2 = _mm_or_si128(_mm_loadu_si128(v0 + 2), _mm_loadu_si128(v0 + 1));
      uint64_t result = 2 * ((v0->i64[0] | v0->i64[1] | _mm_or_si128(_mm_shuffle_epi32(v2, 238), v2).u64[0]) != 0) + 3;
      break;
  }
  return result;
}

void *MLCreateError.errorUserInfo.getter()
{
  uint64_t v1 = *(void *)v0;
  uint64_t v2 = *(void *)(v0 + 8);
  uint64_t v30 = *(void *)(v0 + 16);
  uint64_t v36 = *(void *)(v0 + 24);
  uint64_t v35 = *(void *)(v0 + 32);
  uint64_t v3 = *(void *)(v0 + 40);
  unsigned int v34 = *(unsigned __int8 *)(v0 + 48);
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, Any?)>);
  uint64_t inited = (void *)swift_initStackObject(v4, v22);
  inited[2] = 2;
  inited[3] = 4;
  inited[4] = static String._unconditionallyBridgeFromObjectiveC(_:)(NSLocalizedDescriptionKey);
  inited[5] = v6;
  uint64_t v33 = v1;
  uint64_t v23 = v1;
  unsigned int v7 = v34;
  uint64_t v32 = v2;
  uint64_t v24 = v2;
  uint64_t v8 = v30;
  uint64_t v25 = v30;
  uint64_t v26 = v36;
  uint64_t v27 = v35;
  uint64_t v31 = v3;
  uint64_t v28 = v3;
  char v29 = v34;
  unint64_t v9 = MLCreateError.errorDescription.getter();
  if (v10)
  {
    uint64_t v11 = &type metadata for String;
  }
  else
  {
    inited[8] = 0;
    unint64_t v9 = 0;
    uint64_t v10 = 0;
    uint64_t v11 = 0;
  }
  inited[6] = v9;
  inited[7] = v10;
  inited[9] = v11;
  inited[10] = static String._unconditionallyBridgeFromObjectiveC(_:)(NSLocalizedFailureReasonErrorKey);
  inited[11] = v12;
  uint64_t v13 = "Training data was modified." + 0x8000000000000000;
  unint64_t v14 = 0xD000000000000024;
  if (v7 >= 3)
  {
    if (v7 != 3)
    {
      unint64_t v14 = 0xD00000000000001BLL;
      uint64_t v13 = "rs are incompatible." + 0x8000000000000000;
      if (v31 | v35 | v33 | v32 | v36 | v8) {
        uint64_t v13 = "com.apple.CreateML" + 0x8000000000000000;
      }
      else {
        unint64_t v14 = 0xD000000000000018;
      }
    }
  }
  else
  {
    unsigned __int8 v21 = v7;
    unint64_t v14 = v33;
    uint64_t v15 = v32;
    outlined copy of MLCreateError(v33, v32, v8, v36, v35, v31, v21);
    uint64_t v13 = (char *)v15;
  }
  inited[15] = &type metadata for String;
  inited[12] = v14;
  inited[13] = v13;
  uint64_t v16 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Any?);
  uint64_t v17 = Dictionary.init(dictionaryLiteral:)(inited, &type metadata for String, v16, &protocol witness table for String);
  char v18 = v17;
  Swift::Int v19 = specialized Dictionary.compactMapValues<A>(_:)(v17);
  swift_bridgeObjectRelease(v18);
  return v19;
}

void *specialized Dictionary.compactMapValues<A>(_:)(uint64_t a1)
{
  uint64_t v52 = a1;
  uint64_t v1 = _swiftEmptyDictionarySingleton;
  unint64_t v47 = _swiftEmptyDictionarySingleton;
  specialized _NativeDictionary.makeIterator()(a1);
  uint64_t v50 = v28;
  uint64_t v54 = v29;
  uint64_t v2 = v31;
  unint64_t v3 = v32;
  uint64_t v46 = v30;
  int64_t v53 = (unint64_t)(v30 + 64) >> 6;
  swift_bridgeObjectRetain(a1);
  while (v3)
  {
    _BitScanForward64(&v4, v3);
    uint64_t v51 = (v3 - 1) & v3;
    unint64_t v5 = v4 | (v2 << 6);
    uint64_t v52 = v2;
LABEL_21:
    uint64_t v11 = *(void *)(v50 + 48);
    uint64_t v12 = *(void *)(v11 + 16 * v5);
    uint64_t v13 = *(void *)(v11 + 16 * v5 + 8);
    outlined init with copy of Any?(*(void *)(v50 + 56) + 32 * v5, (uint64_t)v42);
    uint64_t v40 = v12;
    uint64_t v41 = v13;
    v45[1] = v42[1];
    v45[0] = v42[0];
    uint64_t v43 = v12;
    uint64_t v44 = v13;
    outlined init with copy of Any?((uint64_t)v45, (uint64_t)&v34);
    if (v35)
    {
      outlined init with take of Any(&v34, v33);
      uint64_t v48 = v43;
      uint64_t v37 = v43;
      uint64_t v49 = v44;
      uint64_t v38 = v44;
      outlined init with take of Any?((uint64_t)v45, (uint64_t)v39);
      outlined init with take of Any(v33, v36);
      unint64_t v14 = v1[2];
      if (v1[3] <= v14)
      {
        swift_bridgeObjectRetain(v13);
        specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v14 + 1, 1u);
        uint64_t v1 = v47;
      }
      else
      {
        swift_bridgeObjectRetain(v13);
      }
      Hasher.init(_seed:)(v1[5]);
      String.hash(into:)(&v34, v48);
      unint64_t v15 = Hasher._finalize()() & ~(-1 << *((unsigned char *)v1 + 32));
      unint64_t v16 = v15 >> 6;
      unint64_t v17 = ~v1[(v15 >> 6) + 8] >> v15 << v15;
      if (v17)
      {
        _BitScanForward64(&v17, v17);
        unint64_t v18 = v17 | v15 & 0xFFFFFFFFFFFFFFC0;
      }
      else
      {
        unint64_t v19 = (unint64_t)(63 - (-1 << *((unsigned char *)v1 + 32))) >> 6;
        char v20 = 0;
        do
        {
          if (++v16 == v19 && (v20 & 1) != 0) {
            BUG();
          }
          BOOL v21 = v16 == v19;
          if (v16 == v19) {
            unint64_t v16 = 0;
          }
          v20 |= v21;
          uint64_t v22 = v1[v16 + 8];
        }
        while (v22 == -1);
        unint64_t v23 = ~v22;
        uint64_t v24 = 64;
        if (v23) {
          _BitScanForward64((unint64_t *)&v24, v23);
        }
        unint64_t v18 = v24 + (v16 << 6);
      }
      uint64_t v2 = v52;
      unint64_t v3 = v51;
      v1[(v18 >> 6) + 8] |= 1 << v18;
      uint64_t v25 = v1[6];
      uint64_t v26 = 16 * v18;
      *(void *)(v25 + v26) = v48;
      *(void *)(v25 + v26 + 8) = v49;
      outlined init with take of Any(v36, (_OWORD *)(v1[7] + 32 * v18));
      ++v1[2];
      outlined destroy of Either<LogisticRegressionClassifier<Float, String>, FullyConnectedNetworkClassifier<Float, String>>((uint64_t)v39, &demangling cache variable for type metadata for Any?);
    }
    else
    {
      swift_bridgeObjectRetain(v13);
      outlined destroy of Either<LogisticRegressionClassifier<Float, String>, FullyConnectedNetworkClassifier<Float, String>>((uint64_t)&v43, &demangling cache variable for type metadata for (key: String, value: Any?));
      outlined destroy of Either<LogisticRegressionClassifier<Float, String>, FullyConnectedNetworkClassifier<Float, String>>((uint64_t)&v34, &demangling cache variable for type metadata for Any?);
      uint64_t v2 = v52;
      unint64_t v3 = v51;
    }
  }
  int64_t v6 = v2 + 1;
  if (__OFADD__(1, v2)) {
    BUG();
  }
  if (v6 >= v53) {
    goto LABEL_38;
  }
  unint64_t v7 = *(void *)(v54 + 8 * v6);
  if (v7)
  {
    uint64_t v8 = v2 + 1;
LABEL_20:
    _BitScanForward64(&v10, v7);
    uint64_t v51 = v7 & (v7 - 1);
    uint64_t v52 = v8;
    unint64_t v5 = v10 + (v8 << 6);
    goto LABEL_21;
  }
  uint64_t v8 = v2 + 2;
  if (v2 + 2 >= v53) {
    goto LABEL_38;
  }
  unint64_t v7 = *(void *)(v54 + 8 * v6 + 8);
  if (v7) {
    goto LABEL_20;
  }
  uint64_t v8 = v2 + 3;
  if (v2 + 3 >= v53) {
    goto LABEL_38;
  }
  unint64_t v7 = *(void *)(v54 + 8 * v6 + 16);
  if (v7) {
    goto LABEL_20;
  }
  uint64_t v8 = v2 + 4;
  if (v2 + 4 >= v53) {
    goto LABEL_38;
  }
  unint64_t v7 = *(void *)(v54 + 8 * v6 + 24);
  if (v7) {
    goto LABEL_20;
  }
  uint64_t v8 = v2 + 5;
  if (v2 + 5 >= v53) {
    goto LABEL_38;
  }
  unint64_t v7 = *(void *)(v54 + 8 * v6 + 32);
  if (v7) {
    goto LABEL_20;
  }
  int64_t v9 = v2 + 6;
  while (v9 < v53)
  {
    unint64_t v7 = *(void *)(v54 + 8 * v9++);
    if (v7)
    {
      uint64_t v8 = v9 - 1;
      goto LABEL_20;
    }
  }
LABEL_38:
  outlined consume of [String : [Int]].Iterator._Variant(v50);
  return v1;
}

{
  void *v1;
  uint64_t v2;
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  int64_t v6;
  unint64_t v7;
  uint64_t v8;
  int64_t v9;
  unint64_t v10;
  char v11;
  char v12;
  unint64_t v13;
  unint64_t v14;
  char v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  char v22;
  BOOL v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  char v27;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  unsigned char v34[72];
  uint64_t v35;
  _OWORD v36[2];
  char v37;
  uint64_t v38;
  int v39;
  __int16 v40;
  char v41;
  long long v42;
  uint64_t v43;
  char *v44;
  uint64_t v45;
  char *v46;
  char *v47;
  char *v48;
  char *v49;
  char *v50;
  uint64_t v51;
  char v52;
  uint64_t v53;
  int v54;
  __int16 v55;
  char v56;
  long long v57;
  uint64_t v58;
  void *v59;
  uint64_t v60;
  uint64_t v61;
  int64_t v62;
  uint64_t v63;
  char v64;

  uint64_t v61 = a1;
  uint64_t v1 = _swiftEmptyDictionarySingleton;
  char v59 = _swiftEmptyDictionarySingleton;
  specialized _NativeDictionary.makeIterator()(a1);
  uint64_t v60 = v29;
  uint64_t v63 = v30;
  uint64_t v2 = v32;
  unint64_t v3 = v33;
  uint64_t v51 = v31;
  uint64_t v62 = (unint64_t)(v31 + 64) >> 6;
  swift_bridgeObjectRetain(a1);
  uint64_t v44 = (char *)&type metadata for Any + 8;
  uint64_t v46 = "accuracy" + 0x8000000000000000;
  unint64_t v47 = "validationAccuracy" + 0x8000000000000000;
  uint64_t v48 = "stylizedImageURL" + 0x8000000000000000;
  uint64_t v49 = "rror" + 0x8000000000000000;
  uint64_t v50 = "validationRootMeanSquaredError" + 0x8000000000000000;
  while (v3)
  {
    _BitScanForward64(&v4, v3);
    v3 &= v3 - 1;
    unint64_t v5 = v4 | (v2 << 6);
    uint64_t v61 = v2;
LABEL_21:
    uint64_t v11 = *(unsigned char *)(*(void *)(v60 + 48) + v5);
    outlined init with copy of Any(*(void *)(v60 + 56) + 32 * v5, (uint64_t)&v38 + 7);
    uint64_t v37 = v11;
    unint64_t v58 = v43;
    uint64_t v57 = v42;
    uint64_t v52 = v11;
    int64_t v53 = v38;
    uint64_t v54 = v39;
    uint64_t v55 = v40;
    uint64_t v56 = v41;
    outlined init with copy of Any((uint64_t)&v53 + 7, (uint64_t)v34);
    if (swift_dynamicCast(&v35, v34, v44, &type metadata for Double, 6))
    {
      uint64_t v45 = v35;
      uint64_t v12 = v52;
      LOBYTE(v35) = v52;
      outlined init with take of Any((long long *)((char *)&v53 + 7), v36);
      uint64_t v13 = v1[2];
      if (v1[3] <= v13)
      {
        specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v13 + 1, 1u);
        uint64_t v1 = v59;
      }
      Hasher.init(_seed:)(v1[5]);
      id v64 = v12;
      switch(v12)
      {
        case 0:
          unint64_t v14 = 1936945004;
          unint64_t v15 = 0;
          break;
        case 1:
          unint64_t v14 = 0x4C746E65746E6F63;
          unint64_t v15 = 111;
          break;
        case 2:
          unint64_t v14 = 0x736F4C656C797473;
          unint64_t v15 = 115;
          break;
        case 3:
          unint64_t v14 = 0x7963617275636361;
          unint64_t v15 = 0;
          break;
        case 4:
          unint64_t v14 = 0x69746164696C6176;
          unint64_t v15 = 111;
          break;
        case 5:
          unint64_t v14 = 0xD000000000000012;
          unint64_t v15 = (char)v46;
          break;
        case 6:
          unint64_t v14 = 0xD000000000000010;
          unint64_t v15 = (char)v47;
          break;
        case 7:
          unint64_t v14 = 0xD000000000000014;
          unint64_t v15 = (char)v48;
          break;
        case 8:
          unint64_t v14 = 0x456D756D6978616DLL;
          unint64_t v15 = 114;
          break;
        case 9:
          unint64_t v14 = 0xD00000000000001ELL;
          unint64_t v15 = (char)v49;
          break;
        case 10:
          unint64_t v14 = 0xD000000000000016;
          unint64_t v15 = (char)v50;
          break;
      }
      String.hash(into:)(v34, v14);
      swift_bridgeObjectRelease(v15);
      unint64_t v16 = Hasher._finalize()() & ~(-1 << *((unsigned char *)v1 + 32));
      unint64_t v17 = v16 >> 6;
      unint64_t v18 = ~v1[(v16 >> 6) + 8] >> v16 << v16;
      if (v18)
      {
        _BitScanForward64(&v19, v18);
        char v20 = v19 | v16 & 0xFFFFFFFFFFFFFFC0;
      }
      else
      {
        BOOL v21 = (unint64_t)(63 - (-1 << *((unsigned char *)v1 + 32))) >> 6;
        uint64_t v22 = 0;
        do
        {
          if (++v17 == v21 && (v22 & 1) != 0) {
            BUG();
          }
          unint64_t v23 = v17 == v21;
          if (v17 == v21) {
            unint64_t v17 = 0;
          }
          v22 |= v23;
          uint64_t v24 = v1[v17 + 8];
        }
        while (v24 == -1);
        uint64_t v25 = ~v24;
        uint64_t v26 = 64;
        if (v25) {
          _BitScanForward64((unint64_t *)&v26, v25);
        }
        char v20 = v26 + (v17 << 6);
      }
      uint64_t v27 = v64;
      v1[(v20 >> 6) + 8] |= 1 << v20;
      *(unsigned char *)(v1[6] + v20) = v27;
      *(void *)(v1[7] + 8 * v20) = v45;
      ++v1[2];
      __swift_destroy_boxed_opaque_existential_1Tm(v36);
      uint64_t v2 = v61;
    }
    else
    {
      uint64_t v35 = 0;
      LOBYTE(v36[0]) = 1;
      outlined destroy of Either<LogisticRegressionClassifier<Float, String>, FullyConnectedNetworkClassifier<Float, String>>((uint64_t)&v52, &demangling cache variable for type metadata for (key: MLProgress.Metric, value: Any));
      uint64_t v2 = v61;
    }
  }
  int64_t v6 = v2 + 1;
  if (__OFADD__(1, v2)) {
    BUG();
  }
  if (v6 >= v62) {
    goto LABEL_49;
  }
  unint64_t v7 = *(void *)(v63 + 8 * v6);
  if (v7)
  {
    uint64_t v8 = v2 + 1;
LABEL_20:
    _BitScanForward64(&v10, v7);
    unint64_t v3 = v7 & (v7 - 1);
    uint64_t v61 = v8;
    unint64_t v5 = v10 + (v8 << 6);
    goto LABEL_21;
  }
  uint64_t v8 = v2 + 2;
  if (v2 + 2 >= v62) {
    goto LABEL_49;
  }
  unint64_t v7 = *(void *)(v63 + 8 * v6 + 8);
  if (v7) {
    goto LABEL_20;
  }
  uint64_t v8 = v2 + 3;
  if (v2 + 3 >= v62) {
    goto LABEL_49;
  }
  unint64_t v7 = *(void *)(v63 + 8 * v6 + 16);
  if (v7) {
    goto LABEL_20;
  }
  uint64_t v8 = v2 + 4;
  if (v2 + 4 >= v62) {
    goto LABEL_49;
  }
  unint64_t v7 = *(void *)(v63 + 8 * v6 + 24);
  if (v7) {
    goto LABEL_20;
  }
  uint64_t v8 = v2 + 5;
  if (v2 + 5 >= v62) {
    goto LABEL_49;
  }
  unint64_t v7 = *(void *)(v63 + 8 * v6 + 32);
  if (v7) {
    goto LABEL_20;
  }
  int64_t v9 = v2 + 6;
  while (v9 < v62)
  {
    unint64_t v7 = *(void *)(v63 + 8 * v9++);
    if (v7)
    {
      uint64_t v8 = v9 - 1;
      goto LABEL_20;
    }
  }
LABEL_49:
  outlined consume of [String : [Int]].Iterator._Variant(v60);
  return v1;
}

{
  int64_t v1;
  void *v2;
  void *v3;
  void *v4;
  int64_t v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  int64_t v14;
  unint64_t v15;
  int64_t v16;
  int64_t v17;
  unint64_t v18;
  uint64_t v19;
  char v20;
  unsigned __int8 v21;
  void (*v22)(unint64_t, void *, uint64_t);
  void *v23;
  char v24;
  void *v25;
  unint64_t v26;
  unint64_t v27;
  char v28;
  unint64_t v29;
  unint64_t v30;
  unint64_t v31;
  unint64_t v32;
  uint64_t v33;
  void (*v34)(unint64_t, void *, uint64_t);
  unint64_t v35;
  char v36;
  unint64_t v37;
  uint64_t v38;
  unint64_t v39;
  uint64_t v40;
  void v42[2];
  uint64_t v43;
  uint64_t v44;
  unint64_t v45;
  unsigned char v46[80];
  _OWORD v47[2];
  char v48;
  uint64_t v49;
  int v50;
  __int16 v51;
  char v52;
  long long v53;
  uint64_t v54;
  char *v55;
  void *v56;
  void *v57;
  char *v58;
  char *v59;
  char *v60;
  char *v61;
  char *v62;
  uint64_t v63;
  char v64;
  uint64_t v65;
  int v66;
  __int16 v67;
  char v68;
  long long v69;
  uint64_t v70;
  uint64_t v71;
  void *v72;
  void *v73;
  void (*v74)(unint64_t, void *, uint64_t);
  int64_t v75;
  uint64_t v76;
  void *v77;
  uint64_t v78;
  int64_t v79;
  uint64_t v80;

  uint64_t v1 = *(void *)(*(void *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for URL?)
                             - 8)
                 + 64);
  uint64_t v2 = alloca(v1);
  unint64_t v3 = alloca(v1);
  unint64_t v4 = v42;
  Float64 v78 = type metadata accessor for URL(0);
  uint64_t v72 = *(void **)(v78 - 8);
  unint64_t v5 = v72[8];
  int64_t v6 = alloca(v5);
  unint64_t v7 = alloca(v5);
  uint64_t v73 = v42;
  uint64_t v8 = alloca(v5);
  int64_t v9 = alloca(v5);
  uint64_t v56 = v42;
  uint64_t v77 = _swiftEmptyDictionarySingleton;
  specialized _NativeDictionary.makeIterator()(a1);
  uint64_t v71 = v42[0];
  Swift::String v80 = v42[1];
  unint64_t v10 = v44;
  uint64_t v11 = v45;
  uint64_t v63 = v43;
  Float64 v79 = (unint64_t)(v43 + 64) >> 6;
  swift_bridgeObjectRetain(a1);
  uint64_t v55 = (char *)&type metadata for Any + 8;
  unint64_t v58 = "accuracy" + 0x8000000000000000;
  char v59 = "validationAccuracy" + 0x8000000000000000;
  uint64_t v60 = "stylizedImageURL" + 0x8000000000000000;
  uint64_t v61 = "rror" + 0x8000000000000000;
  uint64_t v62 = "validationRootMeanSquaredError" + 0x8000000000000000;
  uint64_t v57 = v42;
  while (v11)
  {
    _BitScanForward64(&v12, v11);
    uint64_t v76 = (v11 - 1) & v11;
    uint64_t v13 = v12 | (v10 << 6);
    uint64_t v75 = v10;
LABEL_21:
    unint64_t v19 = v78;
    char v20 = *(unsigned char *)(*(void *)(v71 + 48) + v13);
    outlined init with copy of Any(*(void *)(v71 + 56) + 32 * v13, (uint64_t)&v49 + 7);
    uint64_t v48 = v20;
    uint64_t v70 = v54;
    uint64_t v69 = v53;
    id v64 = v20;
    id v65 = v49;
    NSString v66 = v50;
    unsigned __int8 v67 = v51;
    uint64_t v68 = v52;
    outlined init with copy of Any((uint64_t)&v65 + 7, (uint64_t)v46);
    BOOL v21 = swift_dynamicCast(v4, v46, v55, v19, 6);
    __swift_storeEnumTagSinglePayload((uint64_t)v4, v21 ^ 1u, 1, v19);
    if (__swift_getEnumTagSinglePayload((uint64_t)v4, 1, v19) == 1)
    {
      outlined destroy of Either<LogisticRegressionClassifier<Float, String>, FullyConnectedNetworkClassifier<Float, String>>((uint64_t)&v64, &demangling cache variable for type metadata for (key: MLProgress.Metric, value: Any));
      outlined destroy of Either<LogisticRegressionClassifier<Float, String>, FullyConnectedNetworkClassifier<Float, String>>((uint64_t)v4, &demangling cache variable for type metadata for URL?);
      unint64_t v10 = v75;
      uint64_t v11 = v76;
    }
    else
    {
      uint64_t v22 = (void (*)(unint64_t, void *, uint64_t))v72[4];
      unint64_t v23 = v56;
      v22((unint64_t)v56, v4, v19);
      uint64_t v24 = v64;
      v46[72] = v64;
      outlined init with take of Any((long long *)((char *)&v65 + 7), v47);
      v22((unint64_t)v73, v23, v19);
      uint64_t v25 = v77;
      uint64_t v26 = v77[2];
      if (v77[3] <= v26)
      {
        specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v26 + 1, 1u);
        uint64_t v25 = v77;
      }
      Hasher.init(_seed:)(v25[5]);
      uint64_t v74 = v22;
      switch(v24)
      {
        case 0:
          uint64_t v27 = 1936945004;
          uint64_t v28 = 0;
          break;
        case 1:
          uint64_t v27 = 0x4C746E65746E6F63;
          uint64_t v28 = 111;
          break;
        case 2:
          uint64_t v27 = 0x736F4C656C797473;
          uint64_t v28 = 115;
          break;
        case 3:
          uint64_t v27 = 0x7963617275636361;
          uint64_t v28 = 0;
          break;
        case 4:
          uint64_t v27 = 0x69746164696C6176;
          uint64_t v28 = 111;
          break;
        case 5:
          uint64_t v27 = 0xD000000000000012;
          uint64_t v28 = (char)v58;
          break;
        case 6:
          uint64_t v27 = 0xD000000000000010;
          uint64_t v28 = (char)v59;
          break;
        case 7:
          uint64_t v27 = 0xD000000000000014;
          uint64_t v28 = (char)v60;
          break;
        case 8:
          uint64_t v27 = 0x456D756D6978616DLL;
          uint64_t v28 = 114;
          break;
        case 9:
          uint64_t v27 = 0xD00000000000001ELL;
          uint64_t v28 = (char)v61;
          break;
        case 10:
          uint64_t v27 = 0xD000000000000016;
          uint64_t v28 = (char)v62;
          break;
      }
      String.hash(into:)(v46, v27);
      swift_bridgeObjectRelease(v28);
      uint64_t v29 = Hasher._finalize()() & ~(-1 << *((unsigned char *)v25 + 32));
      uint64_t v30 = v29 >> 6;
      uint64_t v31 = ~v25[(v29 >> 6) + 8] >> v29 << v29;
      if (v31)
      {
        _BitScanForward64(&v31, v31);
        unint64_t v32 = v31 | v29 & 0xFFFFFFFFFFFFFFC0;
        uint64_t v33 = v78;
        long long v34 = v74;
      }
      else
      {
        uint64_t v35 = (unint64_t)(63 - (-1 << *((unsigned char *)v25 + 32))) >> 6;
        uint64_t v36 = 0;
        do
        {
          uint64_t v37 = v30 + 1;
          if (v30 + 1 == v35 && (v36 & 1) != 0) {
            BUG();
          }
          uint64_t v30 = 0;
          if (v37 != v35) {
            uint64_t v30 = v37;
          }
          v36 |= v37 == v35;
          uint64_t v38 = v25[v30 + 8];
        }
        while (v38 == -1);
        uint64_t v39 = ~v38;
        uint64_t v40 = 64;
        long long v34 = v74;
        if (v39) {
          _BitScanForward64((unint64_t *)&v40, v39);
        }
        unint64_t v32 = v40 + (v30 << 6);
        uint64_t v33 = v78;
      }
      v25[(v32 >> 6) + 8] |= 1 << v32;
      *(unsigned char *)(v25[6] + v32) = v24;
      v34(v25[7] + v72[9] * v32, v73, v33);
      ++v25[2];
      __swift_destroy_boxed_opaque_existential_1Tm(v47);
      unint64_t v10 = v75;
      unint64_t v4 = v57;
      uint64_t v11 = v76;
    }
  }
  unint64_t v14 = v10 + 1;
  if (__OFADD__(1, v10)) {
    BUG();
  }
  if (v14 >= v79) {
    goto LABEL_49;
  }
  unint64_t v15 = *(void *)(v80 + 8 * v14);
  if (v15)
  {
    unint64_t v16 = v10 + 1;
LABEL_20:
    _BitScanForward64(&v18, v15);
    uint64_t v76 = v15 & (v15 - 1);
    uint64_t v75 = v16;
    uint64_t v13 = v18 + (v16 << 6);
    goto LABEL_21;
  }
  unint64_t v16 = v10 + 2;
  if (v10 + 2 >= v79) {
    goto LABEL_49;
  }
  unint64_t v15 = *(void *)(v80 + 8 * v14 + 8);
  if (v15) {
    goto LABEL_20;
  }
  unint64_t v16 = v10 + 3;
  if (v10 + 3 >= v79) {
    goto LABEL_49;
  }
  unint64_t v15 = *(void *)(v80 + 8 * v14 + 16);
  if (v15) {
    goto LABEL_20;
  }
  unint64_t v16 = v10 + 4;
  if (v10 + 4 >= v79) {
    goto LABEL_49;
  }
  unint64_t v15 = *(void *)(v80 + 8 * v14 + 24);
  if (v15) {
    goto LABEL_20;
  }
  unint64_t v16 = v10 + 5;
  if (v10 + 5 >= v79) {
    goto LABEL_49;
  }
  unint64_t v15 = *(void *)(v80 + 8 * v14 + 32);
  if (v15) {
    goto LABEL_20;
  }
  unint64_t v17 = v10 + 6;
  while (v17 < v79)
  {
    unint64_t v15 = *(void *)(v80 + 8 * v17++);
    if (v15)
    {
      unint64_t v16 = v17 - 1;
      goto LABEL_20;
    }
  }
LABEL_49:
  outlined consume of [String : [Int]].Iterator._Variant(v71);
  return v77;
}

{
  void *v1;
  uint64_t v2;
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  int64_t v6;
  unint64_t v7;
  uint64_t v8;
  int64_t v9;
  unint64_t v10;
  char v11;
  char v12;
  unint64_t v13;
  unint64_t v14;
  char v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  char v22;
  BOOL v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  char v27;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  unsigned char v34[72];
  uint64_t v35;
  _OWORD v36[2];
  char v37;
  uint64_t v38;
  int v39;
  __int16 v40;
  char v41;
  long long v42;
  uint64_t v43;
  char *v44;
  uint64_t v45;
  char *v46;
  char *v47;
  char *v48;
  char *v49;
  char *v50;
  uint64_t v51;
  char v52;
  uint64_t v53;
  int v54;
  __int16 v55;
  char v56;
  long long v57;
  uint64_t v58;
  void *v59;
  uint64_t v60;
  uint64_t v61;
  int64_t v62;
  uint64_t v63;
  char v64;

  uint64_t v61 = a1;
  uint64_t v1 = _swiftEmptyDictionarySingleton;
  char v59 = _swiftEmptyDictionarySingleton;
  specialized _NativeDictionary.makeIterator()(a1);
  uint64_t v60 = v29;
  uint64_t v63 = v30;
  uint64_t v2 = v32;
  unint64_t v3 = v33;
  uint64_t v51 = v31;
  uint64_t v62 = (unint64_t)(v31 + 64) >> 6;
  swift_bridgeObjectRetain(a1);
  uint64_t v44 = (char *)&type metadata for Any + 8;
  uint64_t v46 = "accuracy" + 0x8000000000000000;
  unint64_t v47 = "validationAccuracy" + 0x8000000000000000;
  uint64_t v48 = "stylizedImageURL" + 0x8000000000000000;
  uint64_t v49 = "rror" + 0x8000000000000000;
  uint64_t v50 = "validationRootMeanSquaredError" + 0x8000000000000000;
  while (v3)
  {
    _BitScanForward64(&v4, v3);
    v3 &= v3 - 1;
    unint64_t v5 = v4 | (v2 << 6);
    uint64_t v61 = v2;
LABEL_21:
    uint64_t v11 = *(unsigned char *)(*(void *)(v60 + 48) + v5);
    outlined init with copy of Any(*(void *)(v60 + 56) + 32 * v5, (uint64_t)&v38 + 7);
    uint64_t v37 = v11;
    unint64_t v58 = v43;
    uint64_t v57 = v42;
    uint64_t v52 = v11;
    int64_t v53 = v38;
    uint64_t v54 = v39;
    uint64_t v55 = v40;
    uint64_t v56 = v41;
    outlined init with copy of Any((uint64_t)&v53 + 7, (uint64_t)v34);
    if (swift_dynamicCast(&v35, v34, v44, &type metadata for Double, 6))
    {
      uint64_t v45 = v35;
      uint64_t v12 = v52;
      LOBYTE(v35) = v52;
      outlined init with take of Any((long long *)((char *)&v53 + 7), v36);
      uint64_t v13 = v1[2];
      if (v1[3] <= v13)
      {
        specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v13 + 1, 1u);
        uint64_t v1 = v59;
      }
      Hasher.init(_seed:)(v1[5]);
      id v64 = v12;
      switch(v12)
      {
        case 0:
          unint64_t v14 = 1936945004;
          unint64_t v15 = 0;
          break;
        case 1:
          unint64_t v14 = 0x4C746E65746E6F63;
          unint64_t v15 = 111;
          break;
        case 2:
          unint64_t v14 = 0x736F4C656C797473;
          unint64_t v15 = 115;
          break;
        case 3:
          unint64_t v14 = 0x7963617275636361;
          unint64_t v15 = 0;
          break;
        case 4:
          unint64_t v14 = 0x69746164696C6176;
          unint64_t v15 = 111;
          break;
        case 5:
          unint64_t v14 = 0xD000000000000012;
          unint64_t v15 = (char)v46;
          break;
        case 6:
          unint64_t v14 = 0xD000000000000010;
          unint64_t v15 = (char)v47;
          break;
        case 7:
          unint64_t v14 = 0xD000000000000014;
          unint64_t v15 = (char)v48;
          break;
        case 8:
          unint64_t v14 = 0x456D756D6978616DLL;
          unint64_t v15 = 114;
          break;
        case 9:
          unint64_t v14 = 0xD00000000000001ELL;
          unint64_t v15 = (char)v49;
          break;
        case 10:
          unint64_t v14 = 0xD000000000000016;
          unint64_t v15 = (char)v50;
          break;
      }
      String.hash(into:)(v34, v14);
      swift_bridgeObjectRelease(v15);
      unint64_t v16 = Hasher._finalize()() & ~(-1 << *((unsigned char *)v1 + 32));
      unint64_t v17 = v16 >> 6;
      unint64_t v18 = ~v1[(v16 >> 6) + 8] >> v16 << v16;
      if (v18)
      {
        _BitScanForward64(&v19, v18);
        char v20 = v19 | v16 & 0xFFFFFFFFFFFFFFC0;
      }
      else
      {
        BOOL v21 = (unint64_t)(63 - (-1 << *((unsigned char *)v1 + 32))) >> 6;
        uint64_t v22 = 0;
        do
        {
          if (++v17 == v21 && (v22 & 1) != 0) {
            BUG();
          }
          unint64_t v23 = v17 == v21;
          if (v17 == v21) {
            unint64_t v17 = 0;
          }
          v22 |= v23;
          uint64_t v24 = v1[v17 + 8];
        }
        while (v24 == -1);
        uint64_t v25 = ~v24;
        uint64_t v26 = 64;
        if (v25) {
          _BitScanForward64((unint64_t *)&v26, v25);
        }
        char v20 = v26 + (v17 << 6);
      }
      uint64_t v27 = v64;
      v1[(v20 >> 6) + 8] |= 1 << v20;
      *(unsigned char *)(v1[6] + v20) = v27;
      *(void *)(v1[7] + 8 * v20) = v45;
      ++v1[2];
      __swift_destroy_boxed_opaque_existential_1Tm(v36);
      uint64_t v2 = v61;
    }
    else
    {
      uint64_t v35 = 0;
      LOBYTE(v36[0]) = 1;
      outlined destroy of Either<LogisticRegressionClassifier<Float, String>, FullyConnectedNetworkClassifier<Float, String>>((uint64_t)&v52, &demangling cache variable for type metadata for (key: MLProgress.Metric, value: Any));
      uint64_t v2 = v61;
    }
  }
  int64_t v6 = v2 + 1;
  if (__OFADD__(1, v2)) {
    BUG();
  }
  if (v6 >= v62) {
    goto LABEL_49;
  }
  unint64_t v7 = *(void *)(v63 + 8 * v6);
  if (v7)
  {
    uint64_t v8 = v2 + 1;
LABEL_20:
    _BitScanForward64(&v10, v7);
    unint64_t v3 = v7 & (v7 - 1);
    uint64_t v61 = v8;
    unint64_t v5 = v10 + (v8 << 6);
    goto LABEL_21;
  }
  uint64_t v8 = v2 + 2;
  if (v2 + 2 >= v62) {
    goto LABEL_49;
  }
  unint64_t v7 = *(void *)(v63 + 8 * v6 + 8);
  if (v7) {
    goto LABEL_20;
  }
  uint64_t v8 = v2 + 3;
  if (v2 + 3 >= v62) {
    goto LABEL_49;
  }
  unint64_t v7 = *(void *)(v63 + 8 * v6 + 16);
  if (v7) {
    goto LABEL_20;
  }
  uint64_t v8 = v2 + 4;
  if (v2 + 4 >= v62) {
    goto LABEL_49;
  }
  unint64_t v7 = *(void *)(v63 + 8 * v6 + 24);
  if (v7) {
    goto LABEL_20;
  }
  uint64_t v8 = v2 + 5;
  if (v2 + 5 >= v62) {
    goto LABEL_49;
  }
  unint64_t v7 = *(void *)(v63 + 8 * v6 + 32);
  if (v7) {
    goto LABEL_20;
  }
  int64_t v9 = v2 + 6;
  while (v9 < v62)
  {
    unint64_t v7 = *(void *)(v63 + 8 * v9++);
    if (v7)
    {
      uint64_t v8 = v9 - 1;
      goto LABEL_20;
    }
  }
LABEL_49:
  outlined consume of [String : [Int]].Iterator._Variant(v60);
  return v1;
}

unint64_t protocol witness for static CustomNSError.errorDomain.getter in conformance MLCreateError()
{
  return 0xD000000000000012;
}

uint64_t protocol witness for CustomNSError.errorCode.getter in conformance MLCreateError()
{
  return CustomNSError.errorCode.getter();
}

uint64_t protocol witness for CustomNSError.errorUserInfo.getter in conformance MLCreateError()
{
  return CustomNSError.errorUserInfo.getter();
}

unint64_t protocol witness for LocalizedError.errorDescription.getter in conformance MLCreateError()
{
  return MLCreateError.errorDescription.getter();
}

unint64_t protocol witness for LocalizedError.failureReason.getter in conformance MLCreateError()
{
  return MLCreateError.failureReason.getter();
}

uint64_t protocol witness for LocalizedError.recoverySuggestion.getter in conformance MLCreateError()
{
  return LocalizedError.recoverySuggestion.getter();
}

uint64_t protocol witness for LocalizedError.helpAnchor.getter in conformance MLCreateError()
{
  return LocalizedError.helpAnchor.getter();
}

unint64_t MLCreateError.description.getter()
{
  return MLCreateError.description.getter();
}

{
  uint64_t v0;
  uint64_t v1;
  unsigned __int8 v2;
  unint64_t v3;
  uint64_t v4;

  uint64_t v1 = *(void *)v0;
  uint64_t v2 = *(unsigned char *)(v0 + 48);
  if (v2 > 2u)
  {
    unint64_t v3 = MLCreateError.errorDescription.getter();
    if (!v4) {
      BUG();
    }
    return v3;
  }
  else
  {
    outlined copy of MLCreateError(v1, *(void *)(v0 + 8), *(void *)(v0 + 16), *(void *)(v0 + 24), *(void *)(v0 + 32), *(void *)(v0 + 40), v2);
  }
  return v1;
}

unint64_t MLCreateError.debugDescription.getter()
{
  return MLCreateError.description.getter();
}

unint64_t protocol witness for CustomStringConvertible.description.getter in conformance MLCreateError()
{
  return MLCreateError.description.getter();
}

uint64_t base witness table accessor for Error in MLCreateError()
{
  return lazy protocol witness table accessor for type MLCreateError and conformance MLCreateError();
}

uint64_t destroy for MLCreateError(uint64_t a1)
{
  return outlined consume of MLCreateError(*(void *)a1, *(void *)(a1 + 8), *(void *)(a1 + 16), *(void *)(a1 + 24), *(void *)(a1 + 32), *(void *)(a1 + 40), *(_DWORD *)(a1 + 48));
}

uint64_t outlined consume of MLCreateError(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, unsigned __int8 a7)
{
  uint64_t result = a7;
  if (a7 < 3u) {
    return swift_bridgeObjectRelease(a2);
  }
  if (a7 == 3)
  {
    swift_bridgeObjectRelease(a2);
    swift_bridgeObjectRelease(a4);
    return swift_bridgeObjectRelease(a6);
  }
  return result;
}

uint64_t initializeWithCopy for MLCreateError(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)a2;
  uint64_t v3 = *(void *)(a2 + 8);
  uint64_t v4 = *(void *)(a2 + 16);
  uint64_t v5 = *(void *)(a2 + 24);
  uint64_t v7 = *(void *)(a2 + 32);
  uint64_t v8 = *(void *)(a2 + 40);
  int v9 = *(_DWORD *)(a2 + 48);
  outlined copy of MLCreateError(*(void *)a2, v3, v4, v5, v7, v8, v9);
  *(void *)a1 = v2;
  *(void *)(a1 + 8) = v3;
  *(void *)(a1 + 16) = v4;
  *(void *)(a1 + 24) = v5;
  *(void *)(a1 + 32) = v7;
  *(void *)(a1 + 40) = v8;
  *(unsigned char *)(a1 + 48) = v9;
  return a1;
}

uint64_t assignWithCopy for MLCreateError(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)a2;
  uint64_t v4 = *(void *)(a2 + 8);
  uint64_t v5 = *(void *)(a2 + 16);
  uint64_t v6 = *(void *)(a2 + 24);
  uint64_t v15 = *(void *)(a2 + 32);
  uint64_t v16 = *(void *)(a2 + 40);
  int v17 = *(_DWORD *)(a2 + 48);
  outlined copy of MLCreateError(*(void *)a2, v4, v5, v6, v15, v16, v17);
  uint64_t v7 = *(void *)a1;
  uint64_t v8 = *(void *)(a1 + 8);
  uint64_t v9 = *(void *)(a1 + 16);
  uint64_t v10 = *(void *)(a1 + 24);
  uint64_t v11 = *(void *)(a1 + 32);
  uint64_t v12 = *(void *)(a1 + 40);
  *(void *)a1 = v3;
  *(void *)(a1 + 8) = v4;
  *(void *)(a1 + 16) = v5;
  *(void *)(a1 + 24) = v6;
  *(void *)(a1 + 32) = v15;
  *(void *)(a1 + 40) = v16;
  int v13 = *(_DWORD *)(a1 + 48);
  *(unsigned char *)(a1 + 48) = v17;
  outlined consume of MLCreateError(v7, v8, v9, v10, v11, v12, v13);
  return a1;
}

uint64_t __swift_memcpy49_8(uint64_t a1, long long *a2)
{
  uint64_t result = a1;
  *(unsigned char *)(a1 + 48) = *((unsigned char *)a2 + 48);
  long long v3 = *a2;
  long long v4 = a2[1];
  *(_OWORD *)(a1 + 32) = a2[2];
  *(_OWORD *)(a1 + 16) = v4;
  *(_OWORD *)a1 = v3;
  return result;
}

uint64_t assignWithTake for MLCreateError(uint64_t a1, uint64_t a2)
{
  char v3 = *(unsigned char *)(a2 + 48);
  uint64_t v4 = *(void *)a1;
  uint64_t v5 = *(void *)(a1 + 8);
  uint64_t v6 = *(void *)(a1 + 16);
  uint64_t v7 = *(void *)(a1 + 24);
  uint64_t v8 = *(void *)(a1 + 32);
  uint64_t v9 = *(void *)(a1 + 40);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  int v10 = *(_DWORD *)(a1 + 48);
  *(unsigned char *)(a1 + 48) = v3;
  outlined consume of MLCreateError(v4, v5, v6, v7, v8, v9, v10);
  return a1;
}

uint64_t getEnumTagSinglePayload for MLCreateError(uint64_t a1, unsigned int a2)
{
  if (a2)
  {
    if (a2 >= 0xFC && *(unsigned char *)(a1 + 49))
    {
      int v2 = *(_DWORD *)a1 + 251;
    }
    else
    {
      int v2 = -1;
      if (*(unsigned __int8 *)(a1 + 48) >= 5u) {
        int v2 = *(unsigned __int8 *)(a1 + 48) ^ 0xFF;
      }
    }
  }
  else
  {
    int v2 = -1;
  }
  return (v2 + 1);
}

void storeEnumTagSinglePayload for MLCreateError(uint64_t a1, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFB)
  {
    *(void *)(a1 + 40) = 0;
    *(_OWORD *)(a1 + 24) = 0;
    *(_OWORD *)(a1 + 8) = 0;
    *(void *)a1 = a2 - 252;
    *(unsigned char *)(a1 + 48) = 0;
    if (a3 >= 0xFC) {
      *(unsigned char *)(a1 + 49) = 1;
    }
  }
  else
  {
    if (a3 >= 0xFC) {
      *(unsigned char *)(a1 + 49) = 0;
    }
    if (a2) {
      *(unsigned char *)(a1 + 48) = -(char)a2;
    }
  }
}

uint64_t getEnumTag for MLCreateError(uint64_t a1)
{
  uint64_t result = (*(_DWORD *)a1 + 4);
  if (*(unsigned __int8 *)(a1 + 48) < 4u) {
    return *(unsigned __int8 *)(a1 + 48);
  }
  return result;
}

void destructiveInjectEnumTag for MLCreateError(uint64_t a1, unsigned int a2)
{
  if (a2 >= 4)
  {
    *(void *)a1 = a2 - 4;
    *(_OWORD *)(a1 + 8) = 0;
    *(_OWORD *)(a1 + 24) = 0;
    *(void *)(a1 + 40) = 0;
    LOBYTE(a2) = 4;
  }
  *(unsigned char *)(a1 + 48) = a2;
}

ValueMetadata *type metadata accessor for MLCreateError()
{
  return &type metadata for MLCreateError;
}

uint64_t lazy protocol witness table accessor for type MLCreateError and conformance MLCreateError()
{
  uint64_t result = lazy protocol witness table cache variable for type MLCreateError and conformance MLCreateError;
  if (!lazy protocol witness table cache variable for type MLCreateError and conformance MLCreateError)
  {
    uint64_t result = swift_getWitnessTable(&protocol conformance descriptor for MLCreateError, &type metadata for MLCreateError);
    lazy protocol witness table cache variable for type MLCreateError and conformance MLCreateError = result;
  }
  return result;
}

{
  uint64_t result;

  uint64_t result = lazy protocol witness table cache variable for type MLCreateError and conformance MLCreateError;
  if (!lazy protocol witness table cache variable for type MLCreateError and conformance MLCreateError)
  {
    uint64_t result = swift_getWitnessTable(&protocol conformance descriptor for MLCreateError, &type metadata for MLCreateError);
    lazy protocol witness table cache variable for type MLCreateError and conformance MLCreateError = result;
  }
  return result;
}

uint64_t outlined init with take of Any?(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Any?);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v2 - 8) + 32))(a2, a1, v2);
  return a2;
}

BOOL specialized == infix<A>(_:_:)(uint64_t a1, uint64_t a2)
{
  return a1 == a2;
}

uint64_t specialized == infix<A>(_:_:)(char a1, char a2)
{
  BOOL v3 = (a1 & 1) == 0;
  uint64_t v4 = 7696483;
  if (v3) {
    uint64_t v4 = 1869903201;
  }
  uint64_t v5 = 7696483;
  unint64_t v6 = ((unint64_t)v3 << 56) - 0x1D00000000000000;
  uint64_t v7 = 0;
  if ((a2 & 1) == 0) {
    uint64_t v5 = 1869903201;
  }
  LOBYTE(v7) = (a2 & 1) == 0;
  uint64_t v8 = (v7 << 56) - 0x1D00000000000000;
  if (v4 != v5 || (LOBYTE(v2) = 1, unint64_t v9 = ((unint64_t)v3 << 56) - 0x1D00000000000000, v6 != v8))
  {
    unsigned int v2 = _stringCompareWithSmolCheck(_:_:expecting:)(v4, v6, v5, v8, 0);
    unint64_t v9 = v8;
  }
  swift_bridgeObjectRelease(v6);
  swift_bridgeObjectRelease(v9);
  return v2;
}

{
  unsigned int v2;
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  char v8;
  char v9;

  BOOL v3 = ColumnDescriptor.FeatureType.rawValue.getter(a1);
  uint64_t v5 = v4;
  unint64_t v6 = ColumnDescriptor.FeatureType.rawValue.getter(a2);
  uint64_t v8 = v7;
  if (v3 != v6 || (LOBYTE(v2) = 1, unint64_t v9 = v5, v5 != v7))
  {
    unsigned int v2 = _stringCompareWithSmolCheck(_:_:expecting:)(v3, v5, v6, v7, 0);
    unint64_t v9 = v8;
  }
  swift_bridgeObjectRelease(v5);
  swift_bridgeObjectRelease(v9);
  return v2;
}

{
  unsigned int v2;
  BOOL v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;

  uint64_t v4 = (a1 & 1) == 0;
  uint64_t v5 = 0x6574694C6E6E63;
  unint64_t v6 = 0x6574694C6E6E63;
  if (v4) {
    unint64_t v6 = 7237219;
  }
  uint64_t v7 = ((unint64_t)(a1 & 1) << 58) | 0xE300000000000000;
  if ((a2 & 1) == 0) {
    uint64_t v5 = 7237219;
  }
  uint64_t v8 = ((unint64_t)(a2 & 1) << 58) | 0xE300000000000000;
  if (v6 != v5 || (LOBYTE(v2) = 1, unint64_t v9 = v7, v7 != v8))
  {
    unsigned int v2 = _stringCompareWithSmolCheck(_:_:expecting:)(v6, v7, v5, v8, 0);
    unint64_t v9 = ((unint64_t)(a2 & 1) << 58) | 0xE300000000000000;
  }
  swift_bridgeObjectRelease(v7);
  swift_bridgeObjectRelease(v9);
  return v2;
}

uint64_t specialized == infix<A>(_:_:)(uint64_t a1, char a2)
{
  unint64_t v3 = 0xEB0000000064657ALL;
  uint64_t v4 = 0x696C616974696E69;
  uint64_t v5 = 0x696C616974696E69;
  unint64_t v6 = 0xEB0000000064657ALL;
  switch(0xEA0000000000676ELL)
  {
    case 0uLL:
      break;
    case 1uLL:
      unint64_t v6 = 0xEA0000000000676ELL;
      uint64_t v5 = 0x6974636172747865;
      switch(a2)
      {
        case 0:
          goto LABEL_10;
        case 1:
          goto LABEL_14;
        case 2:
          goto LABEL_7;
        case 3:
          goto LABEL_8;
        case 4:
          goto LABEL_9;
        case 5:
          goto jpt_4667D;
      }
    case 2uLL:
      unint64_t v6 = 0xE800000000000000;
      uint64_t v5 = 0x676E696E69617274;
      switch(a2)
      {
        case 0:
          goto LABEL_10;
        case 1:
          goto LABEL_14;
        case 2:
          goto LABEL_7;
        case 3:
          goto LABEL_8;
        case 4:
          goto LABEL_9;
        case 5:
          goto jpt_4667D;
      }
    case 3uLL:
      unint64_t v6 = 0xEA0000000000676ELL;
      uint64_t v5 = 0x697461756C617665;
      switch(a2)
      {
        case 0:
          break;
        case 1:
LABEL_14:
          JUMPOUT(0x466CCLL);
        case 2:
LABEL_7:
          uint64_t v4 = 0x676E696E69617274;
          unint64_t v3 = 0xE800000000000000;
          break;
        case 3:
LABEL_8:
          uint64_t v4 = 0x697461756C617665;
          unint64_t v3 = 0xEA0000000000676ELL;
          break;
        case 4:
LABEL_9:
          uint64_t v4 = 0x636E657265666E69;
          unint64_t v3 = 0xEB00000000676E69;
          break;
        case 5:
jpt_4667D:
          JUMPOUT(0x46748);
      }
LABEL_10:
      if (v5 != v4 || (LOBYTE(v2) = 1, unint64_t v7 = v6, v6 != v3))
      {
        unsigned int v2 = _stringCompareWithSmolCheck(_:_:expecting:)(v5, v6, v4, v3, 0);
        unint64_t v7 = v3;
      }
      swift_bridgeObjectRelease(v6);
      swift_bridgeObjectRelease(v7);
      return v2;
    case 4uLL:
      uint64_t v5 = 0x636E657265666E69;
      unint64_t v6 = 0xEB00000000676E69;
      break;
  }
  switch(a2)
  {
    case 0:
      goto LABEL_10;
    case 1:
      goto LABEL_14;
    case 2:
      goto LABEL_7;
    case 3:
      goto LABEL_8;
    case 4:
      goto LABEL_9;
    case 5:
      goto jpt_4667D;
  }
}

{
  unsigned int v2;
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;

  unint64_t v3 = 0x54746E656D656C65;
  uint64_t v4 = 0xEB00000000657079;
  switch(0x69726F6765746163)
  {
    case 0:
      break;
    case 1:
      unint64_t v3 = 1702521203;
      uint64_t v4 = 0xE400000000000000;
      switch(a2)
      {
        case 0:
          goto LABEL_6;
        case 1:
          goto LABEL_10;
      }
    case 2:
      uint64_t v4 = 0xEA00000000007365;
      unint64_t v3 = 0x69726F6765746163;
      switch(a2)
      {
        case 0:
LABEL_6:
          if (v3 != 0x54746E656D656C65 || (LOBYTE(v2) = 1, uint64_t v5 = v4, v4 != 0xEB00000000657079))
          {
            unsigned int v2 = _stringCompareWithSmolCheck(_:_:expecting:)(v3, v4, 0x54746E656D656C65, 0xEB00000000657079, 0);
            uint64_t v5 = 0xEB00000000657079;
          }
          swift_bridgeObjectRelease(v4);
          swift_bridgeObjectRelease(v5);
          return v2;
        case 1:
LABEL_10:
          JUMPOUT(0x46886);
      }
    case 3:
      unint64_t v3 = 0x7470697263736564;
      uint64_t v4 = 0xEB0000000073726FLL;
      break;
  }
  switch(a2)
  {
    case 0:
      goto LABEL_6;
    case 1:
      goto LABEL_10;
  }
}

{
  char *v2;
  uint64_t v3;
  unint64_t v4;
  unsigned int v5;
  unint64_t v6;
  char *v7;
  char *v8;

  unsigned int v2 = (char *)0xE400000000000000;
  unint64_t v3 = 1936945004;
  uint64_t v4 = 0xD000000000000010;
  uint64_t v5 = 0;
  unint64_t v6 = 1936945004;
  unint64_t v7 = (char *)0xE400000000000000;
  switch(0xD000000000000010)
  {
    case 0uLL:
      break;
    case 1uLL:
      unint64_t v7 = (char *)0xEB0000000073736FLL;
      unint64_t v6 = 0x4C746E65746E6F63;
      switch(a2)
      {
        case 0:
          goto LABEL_24;
        case 1:
          goto LABEL_13;
        case 2:
          goto LABEL_14;
        case 3:
          goto LABEL_15;
        case 4:
          goto LABEL_16;
        case 5:
          goto LABEL_17;
        case 6:
          goto LABEL_18;
        case 7:
          goto LABEL_19;
        case 8:
          goto LABEL_20;
        case 9:
          goto LABEL_21;
        case 10:
          goto LABEL_22;
      }
    case 2uLL:
      unint64_t v7 = (char *)0xE900000000000073;
      unint64_t v6 = 0x736F4C656C797473;
      switch(a2)
      {
        case 0:
          goto LABEL_24;
        case 1:
          goto LABEL_13;
        case 2:
          goto LABEL_14;
        case 3:
          goto LABEL_15;
        case 4:
          goto LABEL_16;
        case 5:
          goto LABEL_17;
        case 6:
          goto LABEL_18;
        case 7:
          goto LABEL_19;
        case 8:
          goto LABEL_20;
        case 9:
          goto LABEL_21;
        case 10:
          goto LABEL_22;
      }
    case 3uLL:
      unint64_t v7 = (char *)0xE800000000000000;
      unint64_t v6 = 0x7963617275636361;
      switch(a2)
      {
        case 0:
          goto LABEL_24;
        case 1:
          goto LABEL_13;
        case 2:
          goto LABEL_14;
        case 3:
          goto LABEL_15;
        case 4:
          goto LABEL_16;
        case 5:
          goto LABEL_17;
        case 6:
          goto LABEL_18;
        case 7:
          goto LABEL_19;
        case 8:
          goto LABEL_20;
        case 9:
          goto LABEL_21;
        case 10:
          goto LABEL_22;
      }
    case 4uLL:
      unint64_t v7 = (char *)0xEE0073736F4C6E6FLL;
      unint64_t v6 = 0x69746164696C6176;
      switch(a2)
      {
        case 0:
          goto LABEL_24;
        case 1:
          goto LABEL_13;
        case 2:
          goto LABEL_14;
        case 3:
          goto LABEL_15;
        case 4:
          goto LABEL_16;
        case 5:
          goto LABEL_17;
        case 6:
          goto LABEL_18;
        case 7:
          goto LABEL_19;
        case 8:
          goto LABEL_20;
        case 9:
          goto LABEL_21;
        case 10:
          goto LABEL_22;
      }
    case 5uLL:
      unint64_t v7 = "accuracy" + 0x8000000000000000;
      unint64_t v6 = 0xD000000000000012;
      switch(a2)
      {
        case 0:
          goto LABEL_24;
        case 1:
          goto LABEL_13;
        case 2:
          goto LABEL_14;
        case 3:
          goto LABEL_15;
        case 4:
          goto LABEL_16;
        case 5:
          goto LABEL_17;
        case 6:
          goto LABEL_18;
        case 7:
          goto LABEL_19;
        case 8:
          goto LABEL_20;
        case 9:
          goto LABEL_21;
        case 10:
          goto LABEL_22;
      }
    case 6uLL:
      unint64_t v7 = "validationAccuracy" + 0x8000000000000000;
      unint64_t v6 = 0xD000000000000010;
      switch(a2)
      {
        case 0:
          goto LABEL_24;
        case 1:
          goto LABEL_13;
        case 2:
          goto LABEL_14;
        case 3:
          goto LABEL_15;
        case 4:
          goto LABEL_16;
        case 5:
          goto LABEL_17;
        case 6:
          goto LABEL_18;
        case 7:
          goto LABEL_19;
        case 8:
          goto LABEL_20;
        case 9:
          goto LABEL_21;
        case 10:
          goto LABEL_22;
      }
    case 7uLL:
      unint64_t v7 = "stylizedImageURL" + 0x8000000000000000;
      unint64_t v6 = 0xD000000000000014;
      switch(a2)
      {
        case 0:
          goto LABEL_24;
        case 1:
          goto LABEL_13;
        case 2:
          goto LABEL_14;
        case 3:
          goto LABEL_15;
        case 4:
          goto LABEL_16;
        case 5:
          goto LABEL_17;
        case 6:
          goto LABEL_18;
        case 7:
          goto LABEL_19;
        case 8:
          goto LABEL_20;
        case 9:
          goto LABEL_21;
        case 10:
          goto LABEL_22;
      }
    case 8uLL:
      unint64_t v7 = (char *)0xEC000000726F7272;
      unint64_t v6 = 0x456D756D6978616DLL;
      switch(a2)
      {
        case 0:
          goto LABEL_24;
        case 1:
          goto LABEL_13;
        case 2:
          goto LABEL_14;
        case 3:
          goto LABEL_15;
        case 4:
          goto LABEL_16;
        case 5:
          goto LABEL_17;
        case 6:
          goto LABEL_18;
        case 7:
          goto LABEL_19;
        case 8:
          goto LABEL_20;
        case 9:
          goto LABEL_21;
        case 10:
          goto LABEL_22;
      }
    case 9uLL:
      unint64_t v7 = "rror" + 0x8000000000000000;
      unint64_t v6 = 0xD00000000000001ELL;
      switch(a2)
      {
        case 0:
          goto LABEL_24;
        case 1:
LABEL_13:
          unint64_t v3 = 0x4C746E65746E6F63;
          unsigned int v2 = (char *)0xEB0000000073736FLL;
          goto LABEL_24;
        case 2:
LABEL_14:
          unint64_t v3 = 0x736F4C656C797473;
          unsigned int v2 = (char *)0xE900000000000073;
          goto LABEL_24;
        case 3:
LABEL_15:
          unint64_t v3 = 0x7963617275636361;
          unsigned int v2 = (char *)0xE800000000000000;
          goto LABEL_24;
        case 4:
LABEL_16:
          unint64_t v3 = 0x69746164696C6176;
          unsigned int v2 = (char *)0xEE0073736F4C6E6FLL;
          goto LABEL_24;
        case 5:
LABEL_17:
          unsigned int v2 = "accuracy" + 0x8000000000000000;
          uint64_t v4 = 0xD000000000000012;
          goto LABEL_23;
        case 6:
LABEL_18:
          unsigned int v2 = "validationAccuracy" + 0x8000000000000000;
          goto LABEL_23;
        case 7:
LABEL_19:
          unsigned int v2 = "stylizedImageURL" + 0x8000000000000000;
          uint64_t v4 = 0xD000000000000014;
          goto LABEL_23;
        case 8:
LABEL_20:
          JUMPOUT(0x46BD5);
        case 9:
LABEL_21:
          unsigned int v2 = "rror" + 0x8000000000000000;
          uint64_t v4 = 0xD00000000000001ELL;
          goto LABEL_23;
        case 10:
LABEL_22:
          unsigned int v2 = "validationRootMeanSquaredError" + 0x8000000000000000;
          uint64_t v4 = 0xD000000000000016;
LABEL_23:
          unint64_t v3 = v4;
LABEL_24:
          if (v6 != v3 || (LOBYTE(v5) = 1, uint64_t v8 = v7, v7 != v2))
          {
            uint64_t v5 = _stringCompareWithSmolCheck(_:_:expecting:)(v6, v7, v3, v2, 0);
            uint64_t v8 = v2;
          }
          swift_bridgeObjectRelease(v7);
          swift_bridgeObjectRelease(v8);
          return v5;
      }
    case 0xAuLL:
      unint64_t v7 = "validationRootMeanSquaredError" + 0x8000000000000000;
      unint64_t v6 = 0xD000000000000016;
      break;
  }
  switch(a2)
  {
    case 0:
      goto LABEL_24;
    case 1:
      goto LABEL_13;
    case 2:
      goto LABEL_14;
    case 3:
      goto LABEL_15;
    case 4:
      goto LABEL_16;
    case 5:
      goto LABEL_17;
    case 6:
      goto LABEL_18;
    case 7:
      goto LABEL_19;
    case 8:
      goto LABEL_20;
    case 9:
      goto LABEL_21;
    case 10:
      goto LABEL_22;
  }
}

void MLRandomForestRegressor.predictions(from:)(uint64_t a1)
{
  unint64_t v3 = v2;
  uint64_t v14 = v1;
  uint64_t v5 = type metadata accessor for DataFrame(0);
  uint64_t v13 = *(void *)(v5 - 8);
  int64_t v6 = *(void *)(v13 + 64);
  unint64_t v7 = alloca(v6);
  uint64_t v8 = alloca(v6);
  uint64_t v15 = &v12;
  uint64_t v9 = type metadata accessor for MLRandomForestRegressor(0);
  DataFrame.validateContainsColumns(_:context:)(*(Swift::OpaquePointer *)((char *)v3 + *(int *)(v9 + 28)), (Swift::String)__PAIR128__(0xE700000000000000, 0x65727574616546));
  if (!v10)
  {
    TreeRegressorModel.applied(to:eventHandler:)(a1, 0, 0);
    uint64_t v11 = v15;
    DataFrame.subscript.getter(*v3, v3[1]);
    (*(void (**)(uint64_t *, uint64_t))(v13 + 8))(v11, v5);
  }
}

uint64_t type metadata accessor for MLRandomForestRegressor(uint64_t a1)
{
  uint64_t result = type metadata singleton initialization cache for MLRandomForestRegressor;
  if (!type metadata singleton initialization cache for MLRandomForestRegressor) {
    return swift_getSingletonMetadata(a1, &nominal type descriptor for MLRandomForestRegressor);
  }
  return result;
}

uint64_t MLRandomForestRegressor.predictions(from:)(uint64_t a1, __m128 a2)
{
  uint64_t v15 = v3;
  uint64_t v16 = v2;
  uint64_t v17 = type metadata accessor for DataFrame(0);
  uint64_t v18 = *(void *)(v17 - 8);
  int64_t v4 = *(void *)(v18 + 64);
  uint64_t v5 = alloca(v4);
  int64_t v6 = alloca(v4);
  int64_t v7 = *(void *)(*(void *)(type metadata accessor for AnyColumn(0) - 8) + 64);
  uint64_t v8 = alloca(v7);
  uint64_t v9 = alloca(v7);
  char v10 = *(unsigned char *)(a1 + 8);
  uint64_t v13 = *(void *)a1;
  char v14 = v10;
  outlined copy of Result<_DataTable, Error>(v13, v10);
  DataFrame.init(_:)((uint64_t)&v13);
  uint64_t v11 = v15;
  MLRandomForestRegressor.predictions(from:)((uint64_t)&v13);
  if (v11) {
    return (*(uint64_t (**)(uint64_t *, uint64_t))(v18 + 8))(&v13, v17);
  }
  *(double *)a2.i64 = (*(double (**)(uint64_t *, uint64_t))(v18 + 8))(&v13, v17);
  return MLUntypedColumn.init(_:convertArraysToShapedArrays:)((uint64_t)&v13, 1, a2);
}

void MLRandomForestRegressor.evaluation(on:)(uint64_t a1)
{
  uint64_t v3 = v2;
  uint64_t v5 = v1;
  uint64_t v6 = type metadata accessor for MLRandomForestRegressor(0);
  v7._rawValue = *(void **)(v3 + *(int *)(v6 + 28));
  uint64_t v15 = a1;
  DataFrame.validateContainsColumns(_:context:)(v7, (Swift::String)__PAIR128__(0xE700000000000000, 0x65727574616546));
  if (v8) {
    goto LABEL_4;
  }
  uint64_t v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<String>);
  uint64_t inited = swift_initStackObject(v9, v14);
  uint64_t v16 = v3;
  v11._rawValue = (void *)inited;
  *(void *)(inited + 16) = 1;
  *(void *)(inited + 24) = 2;
  uint64_t v12 = *(int *)(v6 + 24);
  uint64_t v13 = *(void *)(v16 + v12 + 8);
  *((void *)v11._rawValue + 4) = *(void *)(v16 + v12);
  *((void *)v11._rawValue + 5) = v13;
  swift_bridgeObjectRetain(v13);
  DataFrame.validateContainsColumns(_:context:)(v11, (Swift::String)__PAIR128__(0xE500000000000000, 0x6C6562614CLL));
  swift_setDeallocating(v11._rawValue);
  specialized _ContiguousArrayStorage.__deallocating_deinit();
  if (v8)
  {
LABEL_4:
    *(void *)uint64_t v5 = v8;
    *(void *)(v5 + 8) = 0;
    *(unsigned char *)(v5 + 16) = 1;
  }
  else
  {
    TreeRegressorModel.computeMetrics(on:)(v15);
  }
}

uint64_t MLRandomForestRegressor.evaluation(on:)(uint64_t a1)
{
  uint64_t v11 = v1;
  uint64_t v2 = type metadata accessor for DataFrame(0);
  uint64_t v3 = *(void *)(v2 - 8);
  int64_t v4 = *(void *)(v3 + 64);
  uint64_t v5 = alloca(v4);
  uint64_t v6 = alloca(v4);
  char v7 = *(unsigned char *)(a1 + 8);
  uint64_t v9 = *(void *)a1;
  char v10 = v7;
  outlined copy of Result<_DataTable, Error>(v9, v7);
  DataFrame.init(_:)((uint64_t)&v9);
  MLRandomForestRegressor.evaluation(on:)((uint64_t)&v9);
  return (*(uint64_t (**)(uint64_t *, uint64_t))(v3 + 8))(&v9, v2);
}

uint64_t MLRandomForestRegressor.write(to:metadata:)(uint64_t a1, uint64_t *a2)
{
  uint64_t v63 = v2;
  uint64_t v62 = v3;
  uint64_t v61 = a1;
  int64_t v4 = *(void *)(*(void *)(type metadata accessor for TreeRegressorModel(0) - 8) + 64);
  uint64_t v5 = alloca(v4);
  uint64_t v6 = alloca(v4);
  uint64_t v45 = &v40;
  uint64_t v54 = type metadata accessor for Model(0);
  uint64_t v53 = *(void *)(v54 - 8);
  int64_t v7 = *(void *)(v53 + 64);
  uint64_t v8 = alloca(v7);
  uint64_t v9 = alloca(v7);
  uint64_t v42 = &v40;
  uint64_t v10 = type metadata accessor for URL(0);
  uint64_t v11 = *(void *)(v10 - 8);
  int64_t v12 = *(void *)(v11 + 64);
  uint64_t v13 = alloca(v12);
  char v14 = alloca(v12);
  uint64_t v47 = *a2;
  uint64_t v43 = a2[1];
  unint64_t v48 = a2[2];
  uint64_t v49 = (char *)a2[3];
  uint64_t v50 = a2[4];
  uint64_t v51 = a2[5];
  uint64_t v46 = a2[6];
  unint64_t v52 = a2[7];
  uint64_t v15 = a2[8];
  uint64_t v16 = v63;
  uint64_t result = static _ValidationUtilities.validateWriteLocation(atURL:defaultName:fileExtension:)(v61, 0xD000000000000015, (unint64_t)("CreateML Generic Error: " + 0x8000000000000000), 0x6C65646F6D6C6DLL, (void *)0xE700000000000000);
  if (!v16)
  {
    uint64_t v63 = 0;
    uint64_t v56 = &v40;
    uint64_t v57 = v10;
    uint64_t v55 = v11;
    outlined init with copy of MLTrainingSessionParameters(v62, (uint64_t)v45, type metadata accessor for TreeRegressorModel);
    uint64_t v18 = v43;
    uint64_t v44 = v15;
    if (v43)
    {
      uint64_t v19 = v47;
      uint64_t v61 = v43;
      uint64_t v20 = v48;
      unint64_t v21 = v48;
      uint64_t v22 = (uint64_t)v49;
      uint64_t v60 = v49;
      uint64_t v23 = v50;
      uint64_t v24 = v50;
      uint64_t v25 = v51;
      uint64_t v58 = v51;
      uint64_t v26 = v46;
      uint64_t v27 = v46;
      uint64_t v28 = v52;
      unint64_t v59 = v52;
      uint64_t v62 = v15;
      uint64_t v29 = v47;
    }
    else
    {
      uint64_t v30 = NSFullUserName();
      uint64_t v31 = v30;
      uint64_t v29 = static String._unconditionallyBridgeFromObjectiveC(_:)(v31);
      uint64_t v61 = v32;

      uint64_t v60 = "RandomForestRegressor" + 0x8000000000000000;
      unint64_t v21 = 0xD000000000000033;
      unint64_t v59 = 0xE100000000000000;
      uint64_t v27 = 49;
      uint64_t v24 = 0;
      uint64_t v58 = 0;
      uint64_t v62 = 0;
      uint64_t v26 = v46;
      uint64_t v19 = v47;
      uint64_t v20 = v48;
      uint64_t v22 = (uint64_t)v49;
      uint64_t v23 = v50;
      uint64_t v25 = v51;
      uint64_t v28 = v52;
    }
    v41[0] = v29;
    v41[1] = v61;
    v41[2] = v21;
    v41[3] = v60;
    v41[4] = v24;
    v41[5] = v58;
    v41[6] = v27;
    v41[7] = v59;
    char v41[8] = v62;
    outlined copy of MLModelMetadata?(v19, v18, v20, v22, v23, v25, v26, v28, v44);
    uint64_t v33 = v42;
    uint64_t v34 = (uint64_t)v45;
    uint64_t v35 = v63;
    specialized CoreMLExportable.export(metadata:)((uint64_t)v41);
    if (v35)
    {
      uint64_t v63 = v35;
      swift_bridgeObjectRelease(v59);
      swift_bridgeObjectRelease((_BYTE)v60);
      swift_bridgeObjectRelease(v61);
      swift_bridgeObjectRelease(v58);
      swift_bridgeObjectRelease(v62);
      outlined destroy of MLActivityClassifier.ModelParameters(v34, type metadata accessor for TreeRegressorModel);
      uint64_t v36 = v55;
      uint64_t v37 = v57;
      uint64_t v39 = v56;
    }
    else
    {
      swift_bridgeObjectRelease(v59);
      swift_bridgeObjectRelease((_BYTE)v60);
      swift_bridgeObjectRelease(v61);
      swift_bridgeObjectRelease(v58);
      swift_bridgeObjectRelease(v62);
      outlined destroy of MLActivityClassifier.ModelParameters(v34, type metadata accessor for TreeRegressorModel);
      uint64_t v38 = v56;
      Model.write(to:)(v56);
      uint64_t v63 = 0;
      uint64_t v36 = v55;
      (*(void (**)(uint64_t *, uint64_t))(v53 + 8))(v33, v54);
      uint64_t v39 = v38;
      uint64_t v37 = v57;
    }
    return (*(uint64_t (**)(uint64_t *, uint64_t))(v36 + 8))(v39, v37);
  }
  return result;
}

uint64_t MLRandomForestRegressor.write(toFile:metadata:)(uint64_t a1, uint64_t a2, long long *a3)
{
  uint64_t v23 = v3;
  uint64_t v25 = a2;
  uint64_t v24 = a1;
  uint64_t v26 = type metadata accessor for URL.DirectoryHint(0);
  uint64_t v27 = *(void *)(v26 - 8);
  int64_t v5 = *(void *)(v27 + 64);
  uint64_t v6 = alloca(v5);
  int64_t v7 = alloca(v5);
  int64_t v8 = *(void *)(*(void *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for URL?)
                             - 8)
                 + 64);
  uint64_t v9 = alloca(v8);
  uint64_t v10 = alloca(v8);
  uint64_t v11 = type metadata accessor for URL(0);
  uint64_t v29 = *(void *)(v11 - 8);
  int64_t v12 = *(void *)(v29 + 64);
  uint64_t v13 = alloca(v12);
  char v14 = alloca(v12);
  uint64_t v28 = *((void *)a3 + 8);
  long long v19 = *a3;
  long long v20 = a3[1];
  long long v21 = a3[2];
  long long v22 = a3[3];
  uint64_t v30 = v11;
  __swift_storeEnumTagSinglePayload((uint64_t)v17, 1, 1, v11);
  (*(void (**)(_OWORD *, void, uint64_t))(v27 + 104))(v17, enum case for URL.DirectoryHint.inferFromPath(_:), v26);
  uint64_t v15 = v25;
  swift_bridgeObjectRetain(v25);
  URL.init(filePath:directoryHint:relativeTo:)(v24, v15, v17, v17);
  v17[0] = v19;
  v17[1] = v20;
  void v17[2] = v21;
  v17[3] = v22;
  uint64_t v18 = v28;
  MLRandomForestRegressor.write(to:metadata:)((uint64_t)v17, (uint64_t *)v17);
  return (*(uint64_t (**)(_OWORD *, uint64_t))(v29 + 8))(v17, v30);
}

id MLRandomForestRegressor.model.getter()
{
  uint64_t v1 = type metadata accessor for MLRandomForestRegressor(0);
  return *(id *)(v0 + *(int *)(v1 + 20));
}

unint64_t MLRandomForestRegressor.description.getter()
{
  uint64_t v1 = type metadata accessor for MLRandomForestRegressor(0);
  uint64_t v14 = MLRandomForestRegressor.ModelParameters.description.getter();
  uint64_t v3 = v2;
  unint64_t v16 = MLRegressorMetrics.description.getter();
  int64_t v5 = v4;
  char v13 = *(unsigned char *)(v0 + *(int *)(v1 + 40) + 16);
  v12._uint64_t countAndFlagsBits = MLRegressorMetrics.description.getter();
  v12._unsigned __int8 object = v6;
  v7._uint64_t countAndFlagsBits = v14;
  char v15 = (char)v3;
  v7._unsigned __int8 object = v3;
  String.append(_:)(v7);
  v7._uint64_t countAndFlagsBits = v16;
  v7._unsigned __int8 object = v5;
  String.append(_:)(v7);
  v7._uint64_t countAndFlagsBits = 0xD00000000000001ELL;
  v7._unsigned __int8 object = "ActivityClassifier\n\nParameters\n" + 0x8000000000000000;
  String.append(_:)(v7);
  swift_bridgeObjectRelease(("ActivityClassifier\n\nParameters\n" + 0x8000000000000000));
  if (v13)
  {
    char v8 = (char)v5;
    unsigned __int8 object = v12._object;
  }
  else
  {
    String.append(_:)(v12);
    v10._uint64_t countAndFlagsBits = 0xD000000000000020;
    unsigned __int8 object = ("\nPerformance on Training Data\n" + 0x8000000000000000);
    v10._unsigned __int8 object = "\nPerformance on Training Data\n" + 0x8000000000000000;
    String.append(_:)(v10);
    swift_bridgeObjectRelease((_BYTE)v5);
    char v8 = (char)v12._object;
  }
  swift_bridgeObjectRelease(v8);
  swift_bridgeObjectRelease(object);
  swift_bridgeObjectRelease(v15);
  return 0xD000000000000022;
}

unint64_t MLRandomForestRegressor.debugDescription.getter()
{
  return MLRandomForestRegressor.description.getter();
}

NSAttributedString MLRandomForestRegressor.playgroundDescription.getter()
{
  uint64_t v1 = v0;
  uint64_t v2 = type metadata accessor for NSAttributedString();
  v3._uint64_t countAndFlagsBits = MLRandomForestRegressor.description.getter();
  v3._unsigned __int8 object = v4;
  result.super.Class isa = NSAttributedString.__allocating_init(string:)(v3).super.isa;
  v1[3].super.Class isa = (Class)v2;
  v1->super.Class isa = result.super.isa;
  return result;
}

void key path setter for MLRandomForestRegressor.model : MLRandomForestRegressor(id *a1)
{
  id v1 = *a1;
  MLRandomForestRegressor.model.setter((uint64_t)v1);
}

void MLRandomForestRegressor.model.setter(uint64_t a1)
{
  uint64_t v2 = *(int *)(type metadata accessor for MLRandomForestRegressor(0) + 20);

  *(void *)(v1 + v2) = a1;
}

void (*MLRandomForestRegressor.model.modify(uint64_t a1))(uint64_t a1, char a2)
{
  *(void *)(a1 + 8) = v1;
  uint64_t v3 = *(int *)(type metadata accessor for MLRandomForestRegressor(0) + 20);
  *(_DWORD *)(a1 + 16) = v3;
  int64_t v4 = *(void **)(v1 + v3);
  *(void *)a1 = v4;
  v4;
  return MLActivityClassifier.model.modify;
}

uint64_t MLRandomForestRegressor.targetColumn.getter()
{
  uint64_t v1 = *(int *)(type metadata accessor for MLRandomForestRegressor(0) + 24);
  uint64_t v2 = *(void *)(v0 + v1);
  swift_bridgeObjectRetain(*(void *)(v0 + v1 + 8));
  return v2;
}

uint64_t MLRandomForestRegressor.targetColumn.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(int *)(type metadata accessor for MLRandomForestRegressor(0) + 24);
  uint64_t result = swift_bridgeObjectRelease(*(void *)(v2 + v3 + 8));
  *(void *)(v2 + v3) = a1;
  *(void *)(v2 + v3 + 8) = a2;
  return result;
}

void (*MLRandomForestRegressor.targetColumn.modify())()
{
  return MLBoostedTreeRegressor.ModelParameters.maxDepth.modify;
}

uint64_t MLRandomForestRegressor.featureColumns.getter()
{
  uint64_t v1 = type metadata accessor for MLRandomForestRegressor(0);
  return swift_bridgeObjectRetain(*(void *)(v0 + *(int *)(v1 + 28)));
}

uint64_t MLRandomForestRegressor.featureColumns.setter(uint64_t a1)
{
  uint64_t v2 = *(int *)(type metadata accessor for MLRandomForestRegressor(0) + 28);
  uint64_t result = swift_bridgeObjectRelease(*(void *)(v1 + v2));
  *(void *)(v1 + v2) = a1;
  return result;
}

void (*MLRandomForestRegressor.featureColumns.modify())()
{
  return MLBoostedTreeRegressor.ModelParameters.maxDepth.modify;
}

uint64_t MLRandomForestRegressor.modelParameters.getter()
{
  uint64_t v2 = v0;
  uint64_t v3 = type metadata accessor for MLRandomForestRegressor(0);
  return outlined init with copy of MLRandomForestRegressor.ModelParameters(v1 + *(int *)(v3 + 32), v2);
}

uint64_t MLRandomForestRegressor.trainingMetrics.getter()
{
  uint64_t v2 = v0;
  uint64_t v3 = *(int *)(type metadata accessor for MLRandomForestRegressor(0) + 36);
  uint64_t v4 = *(void *)(v1 + v3);
  uint64_t v5 = *(void *)(v1 + v3 + 8);
  char v6 = *(unsigned char *)(v1 + v3 + 16);
  *(void *)uint64_t v2 = v4;
  *(void *)(v2 + 8) = v5;
  *(unsigned char *)(v2 + 16) = v6;
  return outlined copy of Result<_RegressorMetrics, Error>(v4, v5, v6);
}

uint64_t MLRandomForestRegressor.validationMetrics.getter()
{
  uint64_t v2 = v0;
  uint64_t v3 = *(int *)(type metadata accessor for MLRandomForestRegressor(0) + 40);
  uint64_t v4 = *(void *)(v1 + v3);
  uint64_t v5 = *(void *)(v1 + v3 + 8);
  char v6 = *(unsigned char *)(v1 + v3 + 16);
  *(void *)uint64_t v2 = v4;
  *(void *)(v2 + 8) = v5;
  *(unsigned char *)(v2 + 16) = v6;
  return outlined copy of Result<_RegressorMetrics, Error>(v4, v5, v6);
}

uint64_t static MLRandomForestRegressor._defaultSessionParameters.getter()
{
  uint64_t v1 = v0;
  if (one-time initialization token for _defaultSessionParameters != -1) {
    swift_once(&one-time initialization token for _defaultSessionParameters, one-time initialization function for _defaultSessionParameters);
  }
  uint64_t v2 = type metadata accessor for MLTrainingSessionParameters(0);
  uint64_t v3 = __swift_project_value_buffer(v2, (uint64_t)static MLRandomForestRegressor._defaultSessionParameters);
  return outlined init with copy of MLTrainingSessionParameters(v3, v1, type metadata accessor for MLTrainingSessionParameters);
}

uint64_t MLRandomForestRegressor.init(_:targetColumn:featureColumns:parameters:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  v6[7] = a6;
  v6[6] = a5;
  v6[5] = a4;
  void v6[4] = a3;
  void v6[3] = a2;
  v6[2] = a1;
  return swift_task_switch(MLRandomForestRegressor.init(_:targetColumn:featureColumns:parameters:), 0, 0);
}

uint64_t MLRandomForestRegressor.init(_:targetColumn:featureColumns:parameters:)()
{
  uint64_t v1 = *(void *)(v0 + 48);
  long long v13 = *(_OWORD *)(v0 + 32);
  uint64_t v2 = *(void *)(v0 + 16);
  uint64_t v3 = (int *)type metadata accessor for MLRandomForestRegressor(0);
  *(void *)(v0 + 64) = v3;
  uint64_t v4 = v3[9];
  *(_DWORD *)(v0 + 96) = v4;
  *(unsigned char *)(v2 + v4 + 16) = 0;
  *(_OWORD *)(v2 + v4) = 0;
  uint64_t v5 = v3[10];
  *(_DWORD *)(v0 + 100) = v5;
  uint64_t v6 = lazy protocol witness table accessor for type MLCreateError and conformance MLCreateError();
  uint64_t v7 = swift_allocError(&type metadata for MLCreateError, v6, 0, 0);
  *(void *)uint64_t v8 = 0xD0000000000000C0;
  *(void *)(v8 + 8) = "essor\n\nParameters\n" + 0x8000000000000000;
  *(_OWORD *)(v8 + 16) = 0;
  *(_OWORD *)(v8 + 32) = 0;
  *(unsigned char *)(v8 + 48) = 0;
  *(void *)(v2 + v5) = v7;
  *(void *)(v2 + v5 + 8) = 0;
  *(unsigned char *)(v2 + v5 + 16) = 1;
  uint64_t v9 = v3[7];
  *(_DWORD *)(v0 + 104) = v9;
  *(void *)(v2 + v9) = v1;
  *(_OWORD *)(v2 + v3[6]) = v13;
  Swift::String v10 = (uint64_t (*)(void))((char *)&async function pointer to specialized CoreMLExportable.exportAsCoreMLModel()
                          + async function pointer to specialized CoreMLExportable.exportAsCoreMLModel());
  uint64_t v11 = (void *)swift_task_alloc(dword_3AE25C);
  *(void *)(v0 + 72) = v11;
  *uint64_t v11 = v0;
  v11[1] = MLRandomForestRegressor.init(_:targetColumn:featureColumns:parameters:);
  return v10();
}

{
  uint64_t v0;
  uint64_t v1;
  const void *v2;
  uint64_t v3;
  uint64_t v4;

  uint64_t v1 = *(void *)(v0 + 64);
  uint64_t v2 = *(const void **)(v0 + 56);
  uint64_t v3 = *(void *)(v0 + 16);
  uint64_t v4 = *(void *)(v0 + 24);
  *(void *)(v3 + *(int *)(v1 + 20)) = *(void *)(v0 + 88);
  outlined init with take of MLClassifierMetrics(v4, v3, type metadata accessor for TreeRegressorModel);
  qmemcpy((void *)(v3 + *(int *)(v1 + 32)), v2, 0x70uLL);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;

  uint64_t v6 = *(int *)(v0 + 104);
  uint64_t v1 = *(int *)(v0 + 100);
  uint64_t v2 = *(int *)(v0 + 96);
  uint64_t v7 = *(void *)(v0 + 40);
  uint64_t v3 = *(void *)(v0 + 16);
  uint64_t v4 = *(void *)(v0 + 24);
  outlined destroy of MLRandomForestRegressor.ModelParameters(*(void *)(v0 + 56));
  outlined destroy of MLActivityClassifier.ModelParameters(v4, type metadata accessor for TreeRegressorModel);
  swift_bridgeObjectRelease(v7);
  swift_bridgeObjectRelease(*(void *)(v3 + v6));
  outlined consume of Result<(Int, Int), Error>(*(void *)(v3 + v2), *(void *)(v3 + v2 + 8), *(_DWORD *)(v3 + v2 + 16));
  outlined consume of Result<(Int, Int), Error>(*(void *)(v3 + v1), *(void *)(v3 + v1 + 8), *(_DWORD *)(v3 + v1 + 16));
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t MLRandomForestRegressor.init(_:targetColumn:featureColumns:parameters:)(uint64_t a1)
{
  uint64_t v5 = *(void *)(*v2 + 72);
  uint64_t v4 = *v2;
  *(void *)(*v2 + 80) = v1;
  swift_task_dealloc(v5);
  if (v1)
  {
    uint64_t v6 = MLRandomForestRegressor.init(_:targetColumn:featureColumns:parameters:);
  }
  else
  {
    *(void *)(v4 + 88) = a1;
    uint64_t v6 = MLRandomForestRegressor.init(_:targetColumn:featureColumns:parameters:);
  }
  return swift_task_switch(v6, 0, 0);
}

uint64_t MLRandomForestRegressor.init(trainingData:targetColumn:featureColumns:parameters:)(void (*a1)(uint64_t *, uint64_t, uint64_t), uint64_t a2, void *a3, uint64_t a4, uint64_t a5)
{
  uint64_t v126 = a4;
  uint64_t v136 = a3;
  uint64_t v7 = v5;
  uint64_t v130 = a2;
  uint64_t v142 = v6;
  uint64_t v144 = a5;
  CMTimeValue v132 = a1;
  uint64_t v138 = type metadata accessor for DataFrame(0);
  uint64_t v133 = *(void *)(v138 - 8);
  int64_t v8 = *(void *)(v133 + 64);
  uint64_t v9 = alloca(v8);
  Swift::String v10 = alloca(v8);
  uint64_t v121 = &v101;
  uint64_t v118 = *(void *)(type metadata accessor for TreeRegressorModel(0) - 8);
  int64_t v11 = *(void *)(v118 + 64);
  Swift::String v12 = alloca(v11);
  long long v13 = alloca(v11);
  uint64_t v116 = &v101;
  int64_t v117 = v11;
  uint64_t v14 = alloca(v11);
  char v15 = alloca(v11);
  uint64_t v139 = &v101;
  uint64_t v112 = type metadata accessor for BaseTreeRegressor(0);
  uint64_t v113 = *(void *)(v112 - 8);
  int64_t v16 = *(void *)(v113 + 64);
  uint64_t v17 = alloca(v16);
  uint64_t v18 = alloca(v16);
  unint64_t v114 = &v101;
  uint64_t v115 = type metadata accessor for TreeRegressor(0);
  int64_t v19 = *(void *)(*(void *)(v115 - 8) + 64);
  long long v20 = alloca(v19);
  long long v21 = alloca(v19);
  uint64_t v131 = &v101;
  uint64_t v127 = type metadata accessor for MLRandomForestRegressor.ModelParameters.ValidationData(0);
  int64_t v22 = *(void *)(*(void *)(v127 - 8) + 64);
  uint64_t v23 = alloca(v22);
  uint64_t v24 = alloca(v22);
  uint64_t v135 = &v101;
  uint64_t v124 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (training: DataFrame, validation: DataFrame?));
  int64_t v25 = *(void *)(*(void *)(v124 - 8) + 64);
  uint64_t v26 = alloca(v25);
  uint64_t v27 = alloca(v25);
  char v123 = &v101;
  uint64_t v28 = alloca(v25);
  uint64_t v29 = alloca(v25);
  CMTimeValue v120 = &v101;
  uint64_t v30 = alloca(v25);
  uint64_t v31 = alloca(v25);
  uint64_t v140 = &v101;
  uint64_t v141 = type metadata accessor for BoostedTreeConfiguration(0);
  uint64_t v143 = *(void *)(v141 - 8);
  int64_t v32 = *(void *)(v143 + 64);
  uint64_t v33 = alloca(v32);
  uint64_t v34 = alloca(v32);
  unint64_t v122 = &v101;
  uint64_t v35 = alloca(v32);
  uint64_t v36 = alloca(v32);
  Float64 v125 = &v101;
  uint64_t v37 = alloca(v32);
  uint64_t v38 = alloca(v32);
  uint64_t v39 = type metadata accessor for MLRandomForestRegressor(0);
  uint64_t v40 = *(int *)(v39 + 36);
  *(unsigned char *)(v7 + v40 + 16) = 0;
  *(_OWORD *)(v7 + v40) = 0;
  uint64_t v119 = (int *)v39;
  uint64_t v41 = *(int *)(v39 + 40);
  uint64_t v42 = lazy protocol witness table accessor for type MLCreateError and conformance MLCreateError();
  uint64_t v43 = swift_allocError(&type metadata for MLCreateError, v42, 0, 0);
  *(void *)uint64_t v44 = 0xD0000000000000C0;
  *(void *)(v44 + 8) = "essor\n\nParameters\n" + 0x8000000000000000;
  *(_OWORD *)(v44 + 16) = 0;
  *(_OWORD *)(v44 + 32) = 0;
  *(unsigned char *)(v44 + 48) = 0;
  *(void *)(v7 + v41) = v43;
  *(void *)(v7 + v41 + 8) = 0;
  uint64_t v129 = v41;
  uint64_t v134 = v7;
  *(unsigned char *)(v7 + v41 + 16) = 1;
  outlined init with copy of MLRandomForestRegressor.ModelParameters(v144, (uint64_t)&v103);
  BoostedTreeConfiguration.init()();
  BoostedTreeConfiguration.learningRate.setter(1.0);
  BoostedTreeConfiguration.parallelTreeCount.setter(10);
  BoostedTreeConfiguration.maximumDepth.setter(v105);
  BoostedTreeConfiguration.maximumIterations.setter(v106);
  BoostedTreeConfiguration.minimumLossReduction.setter(v107);
  BoostedTreeConfiguration.minimumChildWeight.setter(v108);
  BoostedTreeConfiguration.randomSeed.setter(v109);
  BoostedTreeConfiguration.rowSubsample.setter(v110);
  os_log_type_t v137 = &v101;
  BoostedTreeConfiguration.columnSubsample.setter(v111);
  outlined destroy of MLRandomForestRegressor.ModelParameters((uint64_t)&v103);
  outlined init with copy of Either<LogisticRegressionClassifier<Float, String>, FullyConnectedNetworkClassifier<Float, String>>(v144, (uint64_t)&v101, &demangling cache variable for type metadata for Any?);
  if (!v102) {
    BUG();
  }
  uint64_t v128 = v134 + v40;
  uint64_t v45 = (uint64_t)v140;
  uint64_t v46 = (uint64_t)v140 + *(int *)(v124 + 48);
  outlined init with take of Any(&v101, &v103);
  swift_dynamicCast(v135, &v103, (char *)&type metadata for Any + 8, v127, 7);
  uint64_t v47 = v132;
  uint64_t v48 = v142;
  MLRandomForestRegressor.ModelParameters.ValidationData.generateDataFrames(trainingData:)(v45, v46, v132);
  if (v48)
  {
    uint64_t v142 = v48;
    swift_bridgeObjectRelease((_BYTE)v136);
    swift_bridgeObjectRelease(v126);
    outlined destroy of MLRandomForestRegressor.ModelParameters(v144);
    (*(void (**)(void (*)(uint64_t *, uint64_t, uint64_t), uint64_t))(v133 + 8))(v47, v138);
    outlined destroy of MLActivityClassifier.ModelParameters((uint64_t)v135, type metadata accessor for MLRandomForestRegressor.ModelParameters.ValidationData);
    (*(void (**)(long long *, uint64_t))(v143 + 8))(v137, v141);
    uint64_t v52 = v134;
    uint64_t v53 = v129;
    uint64_t v54 = v128;
LABEL_5:
    outlined consume of Result<(Int, Int), Error>(*(void *)v54, *(void *)(v54 + 8), *(_DWORD *)(v54 + 16));
    return outlined consume of Result<(Int, Int), Error>(*(void *)(v52 + v53), *(void *)(v52 + v53 + 8), *(_DWORD *)(v52 + v53 + 16));
  }
  uint64_t v127 = v46;
  outlined destroy of MLActivityClassifier.ModelParameters((uint64_t)v135, type metadata accessor for MLRandomForestRegressor.ModelParameters.ValidationData);
  char v49 = v126;
  uint64_t v50 = static _FeatureUtilities.selectFeaturesFromTrainingData(trainingData:targetColumn:featureColumns:)(v45, v130, v136, v126);
  uint64_t v51 = v137;
  uint64_t v56 = (uint64_t)v50;
  swift_bridgeObjectRelease(v49);
  uint64_t v57 = *(void (**)(long long *, long long *, uint64_t))(v143 + 16);
  v57(v125, v51, v141);
  uint64_t v58 = v57;
  unint64_t v59 = v136;
  uint64_t v60 = v131;
  *(void *)uint64_t v131 = v130;
  *((void *)v60 + 1) = v59;
  *((void *)v60 + 2) = v56;
  *((void *)v60 + 3) = v56;
  *((void *)v60 + 4) = 0xD000000000000013;
  *((void *)v60 + 5) = "raining samples." + 0x8000000000000000;
  v58(v122, v125, v141);
  uint64_t v135 = (long long *)v56;
  swift_bridgeObjectRetain_n(v56, 2);
  swift_bridgeObjectRetain((_BYTE)v59);
  uint64_t v61 = v114;
  BaseTreeRegressor.init(configuration:)(v122);
  uint64_t v143 = *(void *)(v143 + 8);
  ((void (*)(long long *, uint64_t))v143)(v125, v141);
  (*(void (**)(char *, long long *, uint64_t))(v113 + 32))((char *)v60 + *(int *)(v115 + 28), v61, v112);
  TreeRegressor.fitted(to:validateOn:eventHandler:)((uint64_t)v140, v127, 0, 0);
  uint64_t v142 = 0;
  BOOL v62 = AnalyticsReporter.init()();
  uint64_t v63 = v144;
  if (!v62)
  {
    id v64 = v120;
    uint64_t v65 = (uint64_t)v120 + *(int *)(v124 + 48);
    uint64_t v66 = v133;
    (*(void (**)(long long *, long long *, uint64_t))(v133 + 16))(v120, v140, v138);
    outlined init with copy of Either<LogisticRegressionClassifier<Float, String>, FullyConnectedNetworkClassifier<Float, String>>(v127, v65, &demangling cache variable for type metadata for DataFrame?);
    Swift::Int v67 = DataFrame.shape.getter();
    (*(void (**)(long long *, uint64_t))(v66 + 8))(v64, v138);
    AnalyticsReporter.reportDataMetrics(model:metricName:quantity:)(CreateML_ModelType_randomForestRegressor, (Swift::String)__PAIR128__((unint64_t)("vectorized_features" + 0x8000000000000000), 0xD000000000000015), v67);
    outlined destroy of Either<LogisticRegressionClassifier<Float, String>, FullyConnectedNetworkClassifier<Float, String>>(v65, &demangling cache variable for type metadata for DataFrame?);
    uint64_t v63 = v144;
  }
  uint64_t v68 = v119;
  uint64_t v69 = v119[6];
  uint64_t v70 = v134;
  *(void *)(v134 + v69) = v130;
  uint64_t v126 = v69;
  *(void *)(v70 + v69 + 8) = v136;
  uint64_t v130 = v70 + v68[8];
  outlined init with copy of MLRandomForestRegressor.ModelParameters(v63, v130);
  uint64_t v136 = (void *)v68[7];
  *(void *)((char *)v136 + v70) = v135;
  uint64_t v71 = (uint64_t)v116;
  outlined init with copy of MLTrainingSessionParameters((uint64_t)v139, (uint64_t)v116, type metadata accessor for TreeRegressorModel);
  uint64_t v72 = *(unsigned __int8 *)(v118 + 80);
  uint64_t v73 = ~*(unsigned __int8 *)(v118 + 80) & (v72 + 16);
  uint64_t v74 = swift_allocObject(&unk_3977D0, v73 + v117, v72 | 7);
  outlined init with take of MLClassifierMetrics(v71, v74 + v73, type metadata accessor for TreeRegressorModel);
  uint64_t v75 = v142;
  specialized blockAwait<A>(_:)((uint64_t)&async function pointer to partial apply for closure #1 in MLRandomForestRegressor.init(trainingData:targetColumn:featureColumns:parameters:), v74);
  uint64_t v77 = v144;
  if (v75)
  {
    uint64_t v142 = v75;
    uint64_t v78 = (uint64_t)v131;
    swift_release();
    outlined destroy of MLRandomForestRegressor.ModelParameters(v77);
    (*(void (**)(void (*)(uint64_t *, uint64_t, uint64_t), uint64_t))(v133 + 8))(v132, v138);
    outlined destroy of MLActivityClassifier.ModelParameters((uint64_t)v139, type metadata accessor for TreeRegressorModel);
    outlined destroy of MLActivityClassifier.ModelParameters(v78, type metadata accessor for TreeRegressor);
    outlined destroy of Either<LogisticRegressionClassifier<Float, String>, FullyConnectedNetworkClassifier<Float, String>>((uint64_t)v140, &demangling cache variable for type metadata for (training: DataFrame, validation: DataFrame?));
    ((void (*)(long long *, uint64_t))v143)(v137, v141);
    uint64_t v52 = v134;
LABEL_11:
    uint64_t v53 = v129;
    uint64_t v54 = v128;
    uint64_t v84 = v130;
    swift_bridgeObjectRelease(*(void *)(v52 + v126 + 8));
    swift_bridgeObjectRelease(*(void *)((char *)v136 + v52));
    outlined destroy of MLRandomForestRegressor.ModelParameters(v84);
    goto LABEL_5;
  }
  uint64_t v79 = v76;
  swift_release();
  uint64_t v80 = v68[5];
  uint64_t v81 = v134;
  *(void *)(v134 + v80) = v79;
  uint64_t v82 = v80;
  outlined init with copy of MLTrainingSessionParameters((uint64_t)v139, v81, type metadata accessor for TreeRegressorModel);
  uint64_t v83 = (uint64_t)v140;
  TreeRegressorModel.computeMetrics(on:)((uint64_t)v140);
  uint64_t v142 = 0;
  uint64_t v135 = (long long *)v82;
  uint64_t v85 = v83;
  char v86 = v104;
  uint64_t v87 = v128;
  outlined consume of Result<(Int, Int), Error>(*(void *)v128, *(void *)(v128 + 8), *(_DWORD *)(v128 + 16));
  *(_OWORD *)uint64_t v87 = v103;
  *(unsigned char *)(v87 + 16) = v86;
  char v88 = v123;
  uint64_t v89 = (uint64_t)v123 + *(int *)(v124 + 48);
  uint64_t v90 = v85;
  uint64_t v91 = v138;
  uint64_t v92 = v133;
  (*(void (**)(long long *, uint64_t, uint64_t))(v133 + 16))(v123, v90, v138);
  outlined init with copy of Either<LogisticRegressionClassifier<Float, String>, FullyConnectedNetworkClassifier<Float, String>>(v127, v89, &demangling cache variable for type metadata for DataFrame?);
  if (__swift_getEnumTagSinglePayload(v89, 1, v91) == 1)
  {
    outlined destroy of MLRandomForestRegressor.ModelParameters(v144);
    uint64_t v93 = *(void (**)(void (*)(uint64_t *, uint64_t, uint64_t), uint64_t))(v92 + 8);
    v93(v132, v91);
    outlined destroy of MLActivityClassifier.ModelParameters((uint64_t)v139, type metadata accessor for TreeRegressorModel);
    outlined destroy of MLActivityClassifier.ModelParameters((uint64_t)v131, type metadata accessor for TreeRegressor);
    outlined destroy of Either<LogisticRegressionClassifier<Float, String>, FullyConnectedNetworkClassifier<Float, String>>((uint64_t)v140, &demangling cache variable for type metadata for (training: DataFrame, validation: DataFrame?));
    ((void (*)(long long *, uint64_t))v143)(v137, v141);
    outlined destroy of Either<LogisticRegressionClassifier<Float, String>, FullyConnectedNetworkClassifier<Float, String>>(v89, &demangling cache variable for type metadata for DataFrame?);
    return ((uint64_t (*)(long long *, uint64_t))v93)(v88, v91);
  }
  else
  {
    uint64_t v94 = (uint64_t)v121;
    (*(void (**)(long long *, uint64_t, uint64_t))(v92 + 32))(v121, v89, v91);
    char v95 = *(void (**)(long long *, uint64_t))(v92 + 8);
    v95(v123, v91);
    uint64_t v96 = v91;
    uint64_t v52 = v134;
    uint64_t v97 = v142;
    TreeRegressorModel.computeMetrics(on:)(v94);
    uint64_t v142 = v97;
    if (v97)
    {
      outlined destroy of MLRandomForestRegressor.ModelParameters(v144);
      v95((long long *)v132, v96);
      v95((long long *)v94, v96);
      outlined destroy of MLActivityClassifier.ModelParameters((uint64_t)v139, type metadata accessor for TreeRegressorModel);
      outlined destroy of MLActivityClassifier.ModelParameters((uint64_t)v131, type metadata accessor for TreeRegressor);
      outlined destroy of Either<LogisticRegressionClassifier<Float, String>, FullyConnectedNetworkClassifier<Float, String>>((uint64_t)v140, &demangling cache variable for type metadata for (training: DataFrame, validation: DataFrame?));
      ((void (*)(long long *, uint64_t))v143)(v137, v141);
      uint64_t v98 = (uint64_t)v135;
      outlined destroy of MLActivityClassifier.ModelParameters(v52, type metadata accessor for TreeRegressorModel);

      goto LABEL_11;
    }
    outlined destroy of MLRandomForestRegressor.ModelParameters(v144);
    v95((long long *)v132, v96);
    v95((long long *)v94, v96);
    outlined destroy of MLActivityClassifier.ModelParameters((uint64_t)v139, type metadata accessor for TreeRegressorModel);
    outlined destroy of MLActivityClassifier.ModelParameters((uint64_t)v131, type metadata accessor for TreeRegressor);
    outlined destroy of Either<LogisticRegressionClassifier<Float, String>, FullyConnectedNetworkClassifier<Float, String>>((uint64_t)v140, &demangling cache variable for type metadata for (training: DataFrame, validation: DataFrame?));
    ((void (*)(long long *, uint64_t))v143)(v137, v141);
    char v99 = v104;
    uint64_t v100 = v129;
    uint64_t result = outlined consume of Result<(Int, Int), Error>(*(void *)(v52 + v129), *(void *)(v52 + v129 + 8), *(_DWORD *)(v52 + v129 + 16));
    *(_OWORD *)(v52 + v100) = v103;
    *(unsigned char *)(v52 + v100 + 16) = v99;
  }
  return result;
}

uint64_t closure #1 in MLRandomForestRegressor.init(trainingData:targetColumn:featureColumns:parameters:)(uint64_t a1)
{
  *(void *)(v1 + 16) = a1;
  uint64_t v2 = (uint64_t (*)(void))((char *)&async function pointer to specialized CoreMLExportable.exportAsCoreMLModel()
                         + async function pointer to specialized CoreMLExportable.exportAsCoreMLModel());
  uint64_t v3 = (void *)swift_task_alloc(dword_3AE25C);
  *(void *)(v1 + 24) = v3;
  *uint64_t v3 = v1;
  v3[1] = closure #1 in MLRandomForestRegressor.init(trainingData:targetColumn:featureColumns:parameters:);
  return v2();
}

{
  uint64_t v1;
  uint64_t *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  uint64_t v4 = *v2;
  uint64_t v5 = *(void *)(*v2 + 24);
  uint64_t v6 = *v2;
  swift_task_dealloc(v5);
  if (v1) {
    return (*(uint64_t (**)(void))(v6 + 8))();
  }
  *(void *)(v4 + 32) = a1;
  return swift_task_switch(closure #1 in MLRandomForestRegressor.init(trainingData:targetColumn:featureColumns:parameters:), 0, 0);
}

uint64_t MLRandomForestRegressor.init(trainingData:targetColumn:featureColumns:parameters:)(uint64_t *a1, uint64_t a2, void *a3, uint64_t a4, uint64_t a5)
{
  uint64_t v13 = a4;
  uint64_t v14 = a3;
  uint64_t v15 = a2;
  int64_t v6 = *(void *)(*(void *)(type metadata accessor for DataFrame(0) - 8) + 64);
  uint64_t v7 = alloca(v6);
  int64_t v8 = alloca(v6);
  char v9 = *((unsigned char *)a1 + 8);
  uint64_t v11 = *a1;
  char v12 = v9;
  DataFrame.init(_:)((uint64_t)&v11);
  outlined init with copy of MLRandomForestRegressor.ModelParameters(a5, (uint64_t)&v11);
  MLRandomForestRegressor.init(trainingData:targetColumn:featureColumns:parameters:)((void (*)(uint64_t *, uint64_t, uint64_t))&v11, v15, v14, v13, (uint64_t)&v11);
  return outlined destroy of MLRandomForestRegressor.ModelParameters(a5);
}

uint64_t MLRandomForestRegressor.init(checkpoint:)(uint64_t a1)
{
  uint64_t v66 = v2;
  uint64_t v86 = a1;
  uint64_t v3 = v1;
  uint64_t v79 = type metadata accessor for MLRandomForestRegressor.ModelParameters.ValidationData(0);
  int64_t v4 = *(void *)(*(void *)(v79 - 8) + 64);
  uint64_t v5 = alloca(v4);
  int64_t v6 = alloca(v4);
  uint64_t v77 = v65;
  uint64_t v7 = alloca(v4);
  int64_t v8 = alloca(v4);
  uint64_t v76 = v65;
  uint64_t v75 = *(void *)(type metadata accessor for TreeRegressorModel(0) - 8);
  int64_t v9 = *(void *)(v75 + 64);
  Swift::String v10 = alloca(v9);
  uint64_t v11 = alloca(v9);
  uint64_t v73 = v65;
  int64_t v74 = v9;
  char v12 = alloca(v9);
  uint64_t v13 = alloca(v9);
  uint64_t v84 = v65;
  uint64_t v67 = type metadata accessor for BaseTreeRegressor(0);
  uint64_t v68 = *(void *)(v67 - 8);
  int64_t v14 = *(void *)(v68 + 64);
  uint64_t v15 = alloca(v14);
  int64_t v16 = alloca(v14);
  uint64_t v82 = v65;
  uint64_t v69 = type metadata accessor for BoostedTreeConfiguration(0);
  uint64_t v70 = *(void *)(v69 - 8);
  int64_t v17 = *(void *)(v70 + 64);
  uint64_t v18 = alloca(v17);
  int64_t v19 = alloca(v17);
  uint64_t v72 = v65;
  long long v20 = alloca(v17);
  long long v21 = alloca(v17);
  uint64_t v78 = v65;
  uint64_t v71 = type metadata accessor for TreeRegressor(0);
  int64_t v22 = *(void *)(*(void *)(v71 - 8) + 64);
  uint64_t v23 = alloca(v22);
  uint64_t v24 = alloca(v22);
  uint64_t v87 = (char *)v65;
  uint64_t v25 = type metadata accessor for MLRandomForestRegressor(0);
  uint64_t v26 = *(int *)(v25 + 36);
  *(unsigned char *)(v3 + v26 + 16) = 0;
  *(_OWORD *)(v3 + v26) = 0;
  uint64_t v81 = (int *)v25;
  uint64_t v27 = *(int *)(v25 + 40);
  uint64_t v85 = lazy protocol witness table accessor for type MLCreateError and conformance MLCreateError();
  uint64_t v28 = swift_allocError(&type metadata for MLCreateError, v85, 0, 0);
  *(void *)uint64_t v29 = 0xD0000000000000C0;
  *(void *)(v29 + 8) = "essor\n\nParameters\n" + 0x8000000000000000;
  *(_OWORD *)(v29 + 16) = 0;
  *(_OWORD *)(v29 + 32) = 0;
  *(unsigned char *)(v29 + 48) = 0;
  *(void *)(v3 + v27) = v28;
  *(void *)(v3 + v27 + 8) = 0;
  uint64_t v83 = v3;
  uint64_t v80 = v27;
  *(unsigned char *)(v3 + v27 + 16) = 1;
  switch(*(unsigned char *)(v86 + *(int *)(type metadata accessor for MLCheckpoint(0) + 20)))
  {
    case 0:
      uint64_t v30 = 0x696C616974696E69;
      uint64_t v31 = v87;
      unint64_t v32 = 0xEB0000000064657ALL;
      goto LABEL_9;
    case 1:
      uint64_t v30 = 0x6974636172747865;
      goto LABEL_6;
    case 2:
      swift_bridgeObjectRelease(0);
      uint64_t v31 = v87;
      goto LABEL_10;
    case 3:
      uint64_t v30 = 0x697461756C617665;
LABEL_6:
      unint64_t v32 = 0xEA0000000000676ELL;
      break;
    case 4:
      unint64_t v32 = 0xEB00000000676E69;
      uint64_t v30 = 0x636E657265666E69;
      break;
  }
  uint64_t v31 = v87;
LABEL_9:
  char v33 = _stringCompareWithSmolCheck(_:_:expecting:)(v30, v32, 0x676E696E69617274, 0xE800000000000000, 0);
  swift_bridgeObjectRelease(v32);
  if (v33)
  {
LABEL_10:
    uint64_t v85 = v26;
    uint64_t v34 = v78;
    BoostedTreeConfiguration.init()();
    *(void *)uint64_t v31 = 0;
    *((void *)v31 + 1) = 0xE000000000000000;
    *((void *)v31 + 2) = _swiftEmptyArrayStorage;
    *((void *)v31 + 3) = _swiftEmptyArrayStorage;
    *((void *)v31 + 4) = 0xD000000000000013;
    *((void *)v31 + 5) = "raining samples." + 0x8000000000000000;
    uint64_t v35 = v72;
    uint64_t v36 = v34;
    uint64_t v37 = v69;
    uint64_t v38 = v70;
    (*(void (**)(void *, void *, uint64_t))(v70 + 16))(v72, v36, v69);
    BaseTreeRegressor.init(configuration:)(v35);
    (*(void (**)(void *, uint64_t))(v38 + 8))(v78, v37);
    uint64_t v39 = v71;
    (*(void (**)(char *, void *, uint64_t))(v68 + 32))(&v31[*(int *)(v71 + 28)], v82, v67);
    uint64_t v40 = lazy protocol witness table accessor for type TreeRegressor and conformance TreeRegressor();
    uint64_t v41 = (uint64_t)v84;
    uint64_t v42 = v86;
    uint64_t v43 = v66;
    UpdatableSupervisedTabularEstimator.readWithOptimizer(from:)(v86, v39, v40);
    if (!v43)
    {
      uint64_t v51 = (uint64_t)v73;
      outlined init with copy of MLTrainingSessionParameters(v41, (uint64_t)v73, type metadata accessor for TreeRegressorModel);
      uint64_t v52 = *(unsigned __int8 *)(v75 + 80);
      uint64_t v53 = ~*(unsigned __int8 *)(v75 + 80) & (v52 + 16);
      uint64_t v54 = swift_allocObject(&unk_3977F8, v53 + v74, v52 | 7);
      outlined init with take of MLClassifierMetrics(v51, v54 + v53, type metadata accessor for TreeRegressorModel);
      specialized blockAwait<A>(_:)((uint64_t)&async function pointer to partial apply for closure #1 in MLRandomForestRegressor.init(checkpoint:), v54);
      uint64_t v56 = v55;
      swift_release();
      uint64_t v57 = v83;
      *(void *)(v83 + v81[5]) = v56;
      outlined init with copy of MLTrainingSessionParameters((uint64_t)v84, v57, type metadata accessor for TreeRegressorModel);
      uint64_t v58 = (uint64_t)v76;
      *uint64_t v76 = 0;
      *(_WORD *)(v58 + 16) = 256;
      swift_storeEnumTagMultiPayload(v58, v79, 0);
      uint64_t v59 = v81[8];
      uint64_t v82 = (void *)(v57 + v59);
      *(_OWORD *)(v57 + v59 + 16) = 0;
      *(_OWORD *)(v57 + v59) = 0;
      *(_OWORD *)(v57 + v59 + 88) = 0;
      *(void *)(v57 + v59 + 104) = 0;
      *(void *)(v57 + v59 + 32) = 6;
      *(void *)(v57 + v59 + 40) = 10;
      *(__m128 *)(v57 + v59 + 48) = _mm_loadh_ps((const double *)&qword_346D50);
      *(void *)(v57 + v59 + 64) = 42;
      *(_OWORD *)(v57 + v59 + 72) = xmmword_347720;
      uint64_t v60 = (uint64_t)v77;
      outlined init with copy of MLTrainingSessionParameters(v58, (uint64_t)v77, type metadata accessor for MLRandomForestRegressor.ModelParameters.ValidationData);
      v65[3] = v79;
      boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1(v65);
      outlined init with take of MLClassifierMetrics(v60, (uint64_t)boxed_opaque_existential_1, type metadata accessor for MLRandomForestRegressor.ModelParameters.ValidationData);
      outlined assign with take of Any?((uint64_t)v65, (uint64_t)v82);
      outlined destroy of MLActivityClassifier.ModelParameters(v58, type metadata accessor for MLRandomForestRegressor.ModelParameters.ValidationData);
      BOOL v62 = v81;
      uint64_t v63 = v81[6];
      *(void *)(v57 + v63) = 0;
      *(void *)(v57 + v63 + 8) = 0xE000000000000000;
      outlined destroy of MLActivityClassifier.ModelParameters(v86, type metadata accessor for MLCheckpoint);
      outlined destroy of MLActivityClassifier.ModelParameters((uint64_t)v84, type metadata accessor for TreeRegressorModel);
      outlined destroy of MLActivityClassifier.ModelParameters((uint64_t)v87, type metadata accessor for TreeRegressor);
      uint64_t result = v62[7];
      *(void *)(v57 + result) = _swiftEmptyArrayStorage;
      return result;
    }
    outlined destroy of MLActivityClassifier.ModelParameters(v42, type metadata accessor for MLCheckpoint);
    outlined destroy of MLActivityClassifier.ModelParameters((uint64_t)v31, type metadata accessor for TreeRegressor);
    uint64_t v44 = v83;
    uint64_t v45 = v80;
    uint64_t v26 = v85;
  }
  else
  {
    uint64_t v46 = v85;
    swift_allocError(&type metadata for MLCreateError, v85, 0, 0);
    *(void *)uint64_t v47 = 0xD000000000000042;
    *(void *)(v47 + 8) = "Number of Data Points" + 0x8000000000000000;
    *(_OWORD *)(v47 + 16) = 0;
    *(_OWORD *)(v47 + 32) = 0;
    *(unsigned char *)(v47 + 48) = 0;
    swift_willThrow(&type metadata for MLCreateError, v46, v47, v48, v49, v50);
    outlined destroy of MLActivityClassifier.ModelParameters(v86, type metadata accessor for MLCheckpoint);
    uint64_t v44 = v83;
    uint64_t v45 = v80;
  }
  outlined consume of Result<(Int, Int), Error>(*(void *)(v44 + v26), *(void *)(v44 + v26 + 8), *(_DWORD *)(v44 + v26 + 16));
  return outlined consume of Result<(Int, Int), Error>(*(void *)(v44 + v45), *(void *)(v44 + v45 + 8), *(_DWORD *)(v44 + v45 + 16));
}

uint64_t closure #1 in MLRandomForestRegressor.init(checkpoint:)(uint64_t a1)
{
  *(void *)(v1 + 16) = a1;
  uint64_t v2 = (uint64_t (*)(void))((char *)&async function pointer to specialized CoreMLExportable.exportAsCoreMLModel()
                         + async function pointer to specialized CoreMLExportable.exportAsCoreMLModel());
  uint64_t v3 = (void *)swift_task_alloc(dword_3AE25C);
  *(void *)(v1 + 24) = v3;
  *uint64_t v3 = v1;
  v3[1] = closure #1 in MLRandomForestRegressor.init(checkpoint:);
  return v2();
}

{
  uint64_t v1;
  uint64_t *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  int64_t v4 = *v2;
  uint64_t v5 = *(void *)(*v2 + 24);
  int64_t v6 = *v2;
  swift_task_dealloc(v5);
  if (v1) {
    return (*(uint64_t (**)(void))(v6 + 8))();
  }
  *(void *)(v4 + 32) = a1;
  return swift_task_switch(closure #1 in MLRandomForestRegressor.init(checkpoint:), 0, 0);
}

uint64_t closure #1 in MLRandomForestRegressor.init(checkpoint:)()
{
  **(void **)(v0 + 16) = *(void *)(v0 + 32);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

void *static MLRandomForestRegressor.train(trainingData:targetColumn:featureColumns:parameters:sessionParameters:)(uint64_t a1, uint64_t a2, void *a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v21 = a6;
  uint64_t v22 = a5;
  uint64_t v23 = a4;
  uint64_t v24 = a3;
  uint64_t v25 = a2;
  uint64_t v7 = type metadata accessor for DataFrame(0);
  uint64_t v8 = *(void *)(v7 - 8);
  int64_t v9 = *(void *)(v8 + 64);
  Swift::String v10 = alloca(v9);
  uint64_t v11 = alloca(v9);
  char v12 = *(unsigned char *)(a1 + 8);
  uint64_t v19 = *(void *)a1;
  char v20 = v12;
  outlined copy of Result<_DataTable, Error>(v19, v12);
  DataFrame.init(_:)((uint64_t)&v19);
  uint64_t v13 = static MLRandomForestRegressor.makeTrainingSession(trainingData:targetColumn:featureColumns:parameters:sessionParameters:)((void (*)(uint64_t *, uint64_t, uint64_t))&v19, v25, v24, v23, v22, v21);
  uint64_t v14 = v7;
  if (v6) {
    return (void *)(*(uint64_t (**)(uint64_t *, uint64_t))(v8 + 8))(&v19, v7);
  }
  uint64_t v16 = (uint64_t)v13;
  (*(void (**)(uint64_t *, uint64_t))(v8 + 8))(&v19, v14);
  uint64_t v17 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for MLJob<MLRandomForestRegressor>);
  uint64_t v18 = (void *)swift_allocObject(v17, *(unsigned int *)(v17 + 48), *(unsigned __int16 *)(v17 + 52));
  return specialized MLJob.init(_:)(v18, v16);
}

long long *static MLRandomForestRegressor.makeTrainingSession(trainingData:targetColumn:featureColumns:parameters:sessionParameters:)(uint64_t a1, uint64_t a2, void *a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v16 = a6;
  uint64_t v17 = a5;
  uint64_t v18 = a4;
  uint64_t v19 = a3;
  uint64_t v7 = type metadata accessor for DataFrame(0);
  uint64_t v20 = *(void *)(v7 - 8);
  int64_t v8 = *(void *)(v20 + 64);
  int64_t v9 = alloca(v8);
  Swift::String v10 = alloca(v8);
  char v11 = *(unsigned char *)(a1 + 8);
  uint64_t v14 = *(void *)a1;
  char v15 = v11;
  outlined copy of Result<_DataTable, Error>(v14, v11);
  DataFrame.init(_:)((uint64_t)&v14);
  char v12 = static MLRandomForestRegressor.makeTrainingSession(trainingData:targetColumn:featureColumns:parameters:sessionParameters:)((void (*)(uint64_t *, uint64_t, uint64_t))&v14, a2, v19, v18, v17, v16);
  (*(void (**)(uint64_t *, uint64_t))(v20 + 8))(&v14, v7);
  return v12;
}

void *static MLRandomForestRegressor.resume(_:)(uint64_t a1)
{
  uint64_t v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for MLJob<MLRandomForestRegressor>);
  uint64_t v2 = (void *)swift_allocObject(v1, *(unsigned int *)(v1 + 48), *(unsigned __int16 *)(v1 + 52));
  swift_retain();
  return specialized MLJob.init(_:)(v2, a1);
}

long long *static MLRandomForestRegressor.train(trainingData:targetColumn:featureColumns:parameters:sessionParameters:)(void (*a1)(uint64_t *, uint64_t, uint64_t), uint64_t a2, void *a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t result = static MLRandomForestRegressor.makeTrainingSession(trainingData:targetColumn:featureColumns:parameters:sessionParameters:)(a1, a2, a3, a4, a5, a6);
  if (!v6)
  {
    uint64_t v8 = (uint64_t)result;
    uint64_t v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for MLJob<MLRandomForestRegressor>);
    Swift::String v10 = (void *)swift_allocObject(v9, *(unsigned int *)(v9 + 48), *(unsigned __int16 *)(v9 + 52));
    return (long long *)specialized MLJob.init(_:)(v10, v8);
  }
  return result;
}

long long *static MLRandomForestRegressor.makeTrainingSession(trainingData:targetColumn:featureColumns:parameters:sessionParameters:)(void (*a1)(uint64_t *, uint64_t, uint64_t), uint64_t a2, void *a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v69 = v6;
  uint64_t v65 = a6;
  uint64_t v62 = a4;
  uint64_t v63 = a3;
  uint64_t v56 = a2;
  uint64_t v70 = a1;
  int64_t v8 = *(void *)(*(void *)(type metadata accessor for MLTrainingSessionParameters(0) - 8) + 64);
  uint64_t v9 = alloca(v8);
  Swift::String v10 = alloca(v8);
  uint64_t v60 = &v44;
  char v11 = alloca(v8);
  char v12 = alloca(v8);
  uint64_t v57 = &v44;
  int64_t v13 = *(void *)(*(void *)(type metadata accessor for BoostedTreeConfiguration(0) - 8) + 64);
  uint64_t v14 = alloca(v13);
  char v15 = alloca(v13);
  uint64_t v58 = &v44;
  uint64_t v71 = type metadata accessor for MLRandomForestRegressor.ModelParameters.ValidationData(0);
  int64_t v16 = *(void *)(*(void *)(v71 - 8) + 64);
  uint64_t v17 = alloca(v16);
  uint64_t v18 = alloca(v16);
  uint64_t v19 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (training: DataFrame, validation: DataFrame?));
  int64_t v20 = *(void *)(*(void *)(v19 - 8) + 64);
  uint64_t v21 = alloca(v20);
  uint64_t v22 = alloca(v20);
  uint64_t v67 = &v44;
  uint64_t v23 = alloca(v20);
  uint64_t v24 = alloca(v20);
  uint64_t v72 = &v44;
  uint64_t v25 = alloca(v20);
  uint64_t v26 = alloca(v20);
  uint64_t v68 = &v44;
  uint64_t v59 = a5;
  outlined init with copy of Either<LogisticRegressionClassifier<Float, String>, FullyConnectedNetworkClassifier<Float, String>>(a5, (uint64_t)&v54, &demangling cache variable for type metadata for Any?);
  if (!v55) {
    BUG();
  }
  uint64_t v64 = v19;
  uint64_t v27 = *(int *)(v19 + 48);
  uint64_t v28 = (uint64_t)v68;
  uint64_t v29 = (uint64_t)v68 + v27;
  uint64_t v30 = &v45;
  outlined init with take of Any(&v54, &v45);
  swift_dynamicCast(&v44, &v45, (char *)&type metadata for Any + 8, v71, 7);
  uint64_t v31 = v69;
  MLRandomForestRegressor.ModelParameters.ValidationData.generateDataFrames(trainingData:)(v28, v29, v70);
  outlined destroy of MLActivityClassifier.ModelParameters((uint64_t)&v44, type metadata accessor for MLRandomForestRegressor.ModelParameters.ValidationData);
  if (!v31)
  {
    unint64_t v32 = (void (*)(uint64_t *, uint64_t, uint64_t))((char *)v72 + *(int *)(v64 + 48));
    uint64_t v33 = type metadata accessor for DataFrame(0);
    uint64_t v66 = *(void *)(v33 - 8);
    uint64_t v69 = *(void (**)(void, void, void))(v66 + 16);
    uint64_t v61 = 0;
    uint64_t v34 = (uint64_t)v68;
    v69(v72, v68, v33);
    uint64_t v70 = v32;
    outlined init with copy of Either<LogisticRegressionClassifier<Float, String>, FullyConnectedNetworkClassifier<Float, String>>(v29, (uint64_t)v32, &demangling cache variable for type metadata for DataFrame?);
    uint64_t v30 = (long long *)((char *)v67 + *(int *)(v64 + 48));
    uint64_t v71 = v33;
    v69(v67, v34, v33);
    outlined init with copy of Either<LogisticRegressionClassifier<Float, String>, FullyConnectedNetworkClassifier<Float, String>>(v29, (uint64_t)v30, &demangling cache variable for type metadata for DataFrame?);
    outlined init with copy of MLRandomForestRegressor.ModelParameters(v59, (uint64_t)&v45);
    swift_bridgeObjectRetain(v62);
    swift_bridgeObjectRetain((_BYTE)v63);
    uint64_t v35 = (uint64_t)v58;
    BoostedTreeConfiguration.init()();
    BoostedTreeConfiguration.learningRate.setter(1.0);
    BoostedTreeConfiguration.parallelTreeCount.setter(10);
    BoostedTreeConfiguration.maximumDepth.setter(v47);
    BoostedTreeConfiguration.maximumIterations.setter(v48);
    BoostedTreeConfiguration.minimumLossReduction.setter(v49);
    BoostedTreeConfiguration.minimumChildWeight.setter(v50);
    BoostedTreeConfiguration.randomSeed.setter(v51);
    BoostedTreeConfiguration.rowSubsample.setter(v52);
    BoostedTreeConfiguration.columnSubsample.setter(v53);
    outlined destroy of MLRandomForestRegressor.ModelParameters((uint64_t)&v45);
    uint64_t v36 = (uint64_t)v57;
    outlined init with copy of MLTrainingSessionParameters(v65, (uint64_t)v57, type metadata accessor for MLTrainingSessionParameters);
    uint64_t v37 = type metadata accessor for TreeRegressorTrainingSessionDelegate(0);
    swift_allocObject(v37, *(unsigned int *)(v37 + 48), *(unsigned __int16 *)(v37 + 52));
    uint64_t v38 = v61;
    uint64_t v39 = TreeRegressorTrainingSessionDelegate.init(trainingData:validationData:targetColumn:featureColumns:configuration:sessionParameters:)((uint64_t)v72, (uint64_t)v30, v56, v63, v62, v35, v36);
    if (v38)
    {
      outlined destroy of Either<LogisticRegressionClassifier<Float, String>, FullyConnectedNetworkClassifier<Float, String>>((uint64_t)v68, &demangling cache variable for type metadata for (training: DataFrame, validation: DataFrame?));
      (*(void (**)(uint64_t *, uint64_t))(v66 + 8))(v67, v71);
      outlined destroy of Either<LogisticRegressionClassifier<Float, String>, FullyConnectedNetworkClassifier<Float, String>>((uint64_t)v70, &demangling cache variable for type metadata for DataFrame?);
    }
    else
    {
      uint64_t v40 = (uint64_t)v39;
      (*(void (**)(uint64_t *, uint64_t))(v66 + 8))(v67, v71);
      outlined destroy of Either<LogisticRegressionClassifier<Float, String>, FullyConnectedNetworkClassifier<Float, String>>((uint64_t)v70, &demangling cache variable for type metadata for DataFrame?);
      uint64_t v46 = v37;
      uint64_t v47 = &protocol witness table for TreeRegressorTrainingSessionDelegate;
      *(void *)&long long v45 = v40;
      uint64_t v41 = (uint64_t)v60;
      outlined init with copy of MLTrainingSessionParameters(v65, (uint64_t)v60, type metadata accessor for MLTrainingSessionParameters);
      uint64_t v42 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for MLTrainingSession<MLRandomForestRegressor>);
      swift_allocObject(v42, *(unsigned int *)(v42 + 48), *(unsigned __int16 *)(v42 + 52));
      uint64_t v72 = (uint64_t *)v40;
      swift_retain();
      uint64_t v30 = (long long *)specialized MLTrainingSession.init(delegate:parameters:modelType:)((uint64_t)&v45, v41, 0);
      outlined destroy of Either<LogisticRegressionClassifier<Float, String>, FullyConnectedNetworkClassifier<Float, String>>((uint64_t)v68, &demangling cache variable for type metadata for (training: DataFrame, validation: DataFrame?));
      swift_release();
    }
  }
  return v30;
}

uint64_t static MLRandomForestRegressor.restoreTrainingSession(sessionParameters:)(uint64_t a1)
{
  int64_t v2 = *(void *)(*(void *)(type metadata accessor for MLTrainingSessionParameters(0) - 8) + 64);
  uint64_t v3 = alloca(v2);
  int64_t v4 = alloca(v2);
  char v12 = v11;
  uint64_t v5 = alloca(v2);
  uint64_t v6 = alloca(v2);
  outlined init with copy of MLTrainingSessionParameters(a1, (uint64_t)v11, type metadata accessor for MLTrainingSessionParameters);
  uint64_t v7 = type metadata accessor for TreeRegressorTrainingSessionDelegate(0);
  swift_allocObject(v7, *(unsigned int *)(v7 + 48), *(unsigned __int16 *)(v7 + 52));
  uint64_t result = TreeRegressorTrainingSessionDelegate.init(sessionParameters:)((uint64_t)v11);
  if (!v1)
  {
    v11[3] = v7;
    v11[4] = &protocol witness table for TreeRegressorTrainingSessionDelegate;
    v11[0] = result;
    uint64_t v9 = (uint64_t)v12;
    outlined init with copy of MLTrainingSessionParameters(a1, (uint64_t)v12, type metadata accessor for MLTrainingSessionParameters);
    uint64_t v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for MLTrainingSession<MLRandomForestRegressor>);
    swift_allocObject(v10, *(unsigned int *)(v10 + 48), *(unsigned __int16 *)(v10 + 52));
    return specialized MLTrainingSession.init(delegate:parameters:modelType:)((uint64_t)v11, v9, 0);
  }
  return result;
}

uint64_t closure #1 in closure #1 in static MLRandomForestRegressor.resume(_:)(uint64_t a1, char a2, uint64_t a3, void (*a4)(uint64_t *), uint64_t a5)
{
  uint64_t v22 = a5;
  uint64_t v23 = a4;
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Result<MLRandomForestRegressor, Error>);
  int64_t v7 = *(void *)(*(void *)(v6 - 8) + 64);
  int64_t v8 = alloca(v7);
  uint64_t v9 = alloca(v7);
  int64_t v10 = *(void *)(*(void *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TaskPriority?)
                              - 8)
                  + 64);
  char v11 = alloca(v10);
  char v12 = alloca(v10);
  if (a2)
  {
    uint64_t v19 = a1;
    swift_storeEnumTagMultiPayload(&v19, v6, 1);
    swift_errorRetain(a1);
    v23(&v19);
    return outlined destroy of Either<LogisticRegressionClassifier<Float, String>, FullyConnectedNetworkClassifier<Float, String>>((uint64_t)&v19, &demangling cache variable for type metadata for Result<MLRandomForestRegressor, Error>);
  }
  else
  {
    outlined init with copy of TabularRegressionTask(direct field offset for MLTrainingSession.delegate + a3, (uint64_t)v20);
    uint64_t v13 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TrainingSessionDelegate);
    uint64_t v14 = type metadata accessor for TreeRegressorTrainingSessionDelegate(0);
    swift_dynamicCast(&v21, v20, v13, v14, 7);
    uint64_t v15 = v21;
    uint64_t v16 = type metadata accessor for TaskPriority(0);
    __swift_storeEnumTagSinglePayload((uint64_t)&v19, 1, 1, v16);
    uint64_t v17 = swift_allocObject(&unk_397830, 56, 7);
    *(_OWORD *)(v17 + 16) = 0;
    *(void *)(v17 + 32) = v15;
    *(void *)(v17 + 40) = v23;
    *(void *)(v17 + 48) = v22;
    swift_retain();
    _sScTss5NeverORs_rlE8priority9operationScTyxABGScPSg_xyYaYAcntcfCyt_Tgm5((uint64_t)&v19, (uint64_t)&async function pointer to partial apply for closure #1 in static MLRandomForestRegressor.handleResult(_:session:fulfill:), v17);
    return swift_release();
  }
}

uint64_t closure #1 in static MLRandomForestRegressor.handleResult(_:session:fulfill:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  void v6[4] = a6;
  void v6[3] = a5;
  v6[2] = a4;
  uint64_t v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Result<MLRandomForestRegressor, Error>);
  v6[5] = swift_task_alloc((*(void *)(*(void *)(v7 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  return swift_task_switch(closure #1 in static MLRandomForestRegressor.handleResult(_:session:fulfill:), 0, 0);
}

uint64_t closure #1 in static MLRandomForestRegressor.handleResult(_:session:fulfill:)()
{
  uint64_t v1 = (char *)&async function pointer to specialized Result<>.init(catching:)
     + async function pointer to specialized Result<>.init(catching:);
  uint64_t v2 = dword_3AE674;
  swift_retain();
  uint64_t v3 = (void *)swift_task_alloc(v2);
  v0[6] = v3;
  *uint64_t v3 = v0;
  v3[1] = closure #1 in static MLRandomForestRegressor.handleResult(_:session:fulfill:);
  return ((uint64_t (*)(void, void))v1)(v0[5], v0[2]);
}

{
  uint64_t v0;

  swift_task_dealloc(*(void *)(*(void *)v0 + 48));
  return swift_task_switch(closure #1 in static MLRandomForestRegressor.handleResult(_:session:fulfill:), 0, 0);
}

{
  uint64_t v0;
  uint64_t v1;

  uint64_t v1 = *(void *)(v0 + 40);
  (*(void (**)(uint64_t))(v0 + 24))(v1);
  outlined destroy of Either<LogisticRegressionClassifier<Float, String>, FullyConnectedNetworkClassifier<Float, String>>(v1, &demangling cache variable for type metadata for Result<MLRandomForestRegressor, Error>);
  swift_task_dealloc(v1);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t MLRandomForestRegressor.init(delegate:)(uint64_t a1, uint64_t a2)
{
  v2[37] = a2;
  v2[36] = a1;
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TreeRegressorModel?);
  v2[38] = swift_task_alloc((*(void *)(*(void *)(v3 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v4 = type metadata accessor for MLRandomForestRegressor(0);
  v2[39] = v4;
  v2[40] = swift_task_alloc((*(void *)(*(void *)(v4 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for DataFrame?);
  v2[41] = swift_task_alloc((*(void *)(*(void *)(v5 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = type metadata accessor for BoostedTreeConfiguration(0);
  v2[42] = v6;
  uint64_t v7 = *(void *)(v6 - 8);
  v2[43] = v7;
  v2[44] = swift_task_alloc((*(void *)(v7 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PersistentParametersForTreeBasedMethods?);
  v2[45] = swift_task_alloc((*(void *)(*(void *)(v8 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = type metadata accessor for PersistentParametersForTreeBasedMethods(0);
  v2[46] = v9;
  v2[47] = swift_task_alloc((*(void *)(*(void *)(v9 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  return swift_task_switch(MLRandomForestRegressor.init(delegate:), 0, 0);
}

uint64_t MLRandomForestRegressor.init(delegate:)()
{
  uint64_t v1 = v0[46];
  uint64_t v2 = v0[45];
  uint64_t v3 = OBJC_IVAR____TtC8CreateML36TreeRegressorTrainingSessionDelegate_trainingParameters + v0[37];
  swift_beginAccess(v3, v0 + 30, 0, 0);
  outlined init with copy of Either<LogisticRegressionClassifier<Float, String>, FullyConnectedNetworkClassifier<Float, String>>(v3, v2, &demangling cache variable for type metadata for PersistentParametersForTreeBasedMethods?);
  if (__swift_getEnumTagSinglePayload(v2, 1, v1) == 1) {
    BUG();
  }
  uint64_t v4 = v0[47];
  uint64_t v5 = (int *)v0[46];
  uint64_t v6 = v0[44];
  uint64_t v19 = v0[43];
  uint64_t v16 = v0[42];
  uint64_t v17 = v0[41];
  uint64_t v7 = v0[37];
  uint64_t v15 = v0[38];
  outlined init with take of MLClassifierMetrics(v0[45], v4, type metadata accessor for PersistentParametersForTreeBasedMethods);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v19 + 16))(v6, v4 + v5[8], v16);
  outlined init with copy of Either<LogisticRegressionClassifier<Float, String>, FullyConnectedNetworkClassifier<Float, String>>(v4 + v5[5], v17, &demangling cache variable for type metadata for DataFrame?);
  MLRandomForestRegressor.ModelParameters.init(configuration:validation:)(v6, v17);
  uint64_t v8 = v5[6];
  uint64_t v18 = *(void *)(v4 + v8);
  uint64_t v20 = *(void *)(v4 + v8 + 8);
  uint64_t v9 = *(void *)(v4 + v5[7]);
  uint64_t v10 = OBJC_IVAR____TtC8CreateML36TreeRegressorTrainingSessionDelegate_model + v7;
  swift_beginAccess(v10, v0 + 33, 0, 0);
  outlined init with copy of Either<LogisticRegressionClassifier<Float, String>, FullyConnectedNetworkClassifier<Float, String>>(v10, v15, &demangling cache variable for type metadata for TreeRegressorModel?);
  uint64_t v11 = type metadata accessor for TreeRegressorModel(0);
  if (__swift_getEnumTagSinglePayload(v15, 1, v11) == 1) {
    BUG();
  }
  outlined init with copy of MLRandomForestRegressor.ModelParameters((uint64_t)(v0 + 2), (uint64_t)(v0 + 16));
  uint64_t v12 = dword_3A4B44;
  swift_bridgeObjectRetain(v20);
  swift_bridgeObjectRetain(v9);
  uint64_t v13 = (void *)swift_task_alloc(v12);
  v0[48] = v13;
  void *v13 = v0;
  v13[1] = MLRandomForestRegressor.init(delegate:);
  return MLRandomForestRegressor.init(_:targetColumn:featureColumns:parameters:)(v0[40], v0[38], v18, v20, v9, (uint64_t)(v0 + 16));
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t (*v3)();

  uint64_t v2 = *(void *)(*(void *)v1 + 384);
  *(void *)(*(void *)v1 + 392) = v0;
  swift_task_dealloc(v2);
  if (v0) {
    uint64_t v3 = MLRandomForestRegressor.init(delegate:);
  }
  else {
    uint64_t v3 = MLRandomForestRegressor.init(delegate:);
  }
  return swift_task_switch(v3, 0, 0);
}

{
  uint64_t v0;
  uint64_t v1;
  char v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;

  uint64_t v1 = *(void *)(v0 + 296);
  outlined init with take of MLClassifierMetrics(*(void *)(v0 + 320), *(void *)(v0 + 288), type metadata accessor for MLRandomForestRegressor);
  uint64_t v2 = *(unsigned char *)(v1 + OBJC_IVAR____TtC8CreateML36TreeRegressorTrainingSessionDelegate_trainingMetrics + 16);
  if (v2 == -1) {
    BUG();
  }
  uint64_t v17 = *(void *)(v0 + 376);
  uint64_t v16 = *(void *)(v0 + 312);
  uint64_t v3 = *(void *)(v0 + 288);
  uint64_t v4 = *(void *)(v0 + 296);
  uint64_t v18 = *(void *)(v1 + OBJC_IVAR____TtC8CreateML36TreeRegressorTrainingSessionDelegate_trainingMetrics);
  uint64_t v15 = *(void *)(v1 + OBJC_IVAR____TtC8CreateML36TreeRegressorTrainingSessionDelegate_trainingMetrics + 8);
  outlined copy of Result<_RegressorMetrics, Error>(v18, v15, v2);
  outlined destroy of MLRandomForestRegressor.ModelParameters(v0 + 16);
  outlined destroy of MLActivityClassifier.ModelParameters(v17, type metadata accessor for PersistentParametersForTreeBasedMethods);
  uint64_t v5 = *(int *)(v16 + 36);
  outlined consume of Result<(Int, Int), Error>(*(void *)(v3 + v5), *(void *)(v3 + v5 + 8), *(_DWORD *)(v3 + v5 + 16));
  *(void *)(v3 + v5) = v18;
  *(void *)(v3 + v5 + 8) = v15;
  *(unsigned char *)(v3 + v5 + 16) = v2 & 1;
  uint64_t v6 = *(void *)(v4 + OBJC_IVAR____TtC8CreateML36TreeRegressorTrainingSessionDelegate_validationMetrics + 8);
  uint64_t v7 = *(unsigned char *)(v4 + OBJC_IVAR____TtC8CreateML36TreeRegressorTrainingSessionDelegate_validationMetrics + 16);
  uint64_t v19 = *(void *)(v4 + OBJC_IVAR____TtC8CreateML36TreeRegressorTrainingSessionDelegate_validationMetrics);
  outlined copy of MLRegressorMetrics?(v19, v6, v7);
  swift_release();
  if (v7 != -1)
  {
    uint64_t v8 = *(void *)(v0 + 288);
    uint64_t v9 = *(int *)(*(void *)(v0 + 312) + 40);
    outlined consume of Result<(Int, Int), Error>(*(void *)(v8 + v9), *(void *)(v8 + v9 + 8), *(_DWORD *)(v8 + v9 + 16));
    *(void *)(v8 + v9) = v19;
    *(void *)(v8 + v9 + 8) = v6;
    *(unsigned char *)(v8 + v9 + 16) = v7 & 1;
  }
  uint64_t v10 = *(void *)(v0 + 360);
  uint64_t v11 = *(void *)(v0 + 352);
  uint64_t v12 = *(void *)(v0 + 328);
  uint64_t v20 = *(void *)(v0 + 304);
  uint64_t v13 = *(void *)(v0 + 320);
  swift_task_dealloc(*(void *)(v0 + 376));
  swift_task_dealloc(v10);
  swift_task_dealloc(v11);
  swift_task_dealloc(v12);
  swift_task_dealloc(v13);
  swift_task_dealloc(v20);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  uint64_t v1 = *(void *)(v0 + 376);
  uint64_t v2 = *(void *)(v0 + 360);
  uint64_t v3 = *(void *)(v0 + 352);
  uint64_t v7 = *(void *)(v0 + 328);
  uint64_t v6 = *(void *)(v0 + 320);
  uint64_t v5 = *(void *)(v0 + 304);
  swift_release();
  outlined destroy of MLRandomForestRegressor.ModelParameters(v0 + 16);
  outlined destroy of MLActivityClassifier.ModelParameters(v1, type metadata accessor for PersistentParametersForTreeBasedMethods);
  swift_task_dealloc(v1);
  swift_task_dealloc(v2);
  swift_task_dealloc(v3);
  swift_task_dealloc(v7);
  swift_task_dealloc(v6);
  swift_task_dealloc(v5);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

unint64_t protocol witness for CustomStringConvertible.description.getter in conformance MLRandomForestRegressor()
{
  return MLRandomForestRegressor.description.getter();
}

unint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance MLRandomForestRegressor()
{
  return MLRandomForestRegressor.debugDescription.getter();
}

NSAttributedString protocol witness for CustomPlaygroundDisplayConvertible.playgroundDescription.getter in conformance MLRandomForestRegressor()
{
  return MLRandomForestRegressor.playgroundDescription.getter();
}

uint64_t protocol witness for TabularRegressionTask.validationMetrics.getter in conformance MLRandomForestRegressor()
{
  return MLRandomForestRegressor.validationMetrics.getter();
}

uint64_t outlined init with copy of MLRandomForestRegressor.ModelParameters(uint64_t a1, uint64_t a2)
{
  (*(void (**)(uint64_t, uint64_t))(*((void *)&type metadata for MLRandomForestRegressor.ModelParameters - 1)
                                           + 16))(a2, a1);
  return a2;
}

uint64_t outlined copy of Result<_RegressorMetrics, Error>(uint64_t a1, uint64_t a2, char a3)
{
  if (a3) {
    return swift_errorRetain(a1);
  }
  return result;
}

uint64_t outlined destroy of MLRandomForestRegressor.ModelParameters(uint64_t a1)
{
  return a1;
}

uint64_t sub_4A2CC()
{
  return objectdestroyTm();
}

uint64_t partial apply for closure #1 in MLRandomForestRegressor.init(trainingData:targetColumn:featureColumns:parameters:)(uint64_t a1)
{
  type metadata accessor for TreeRegressorModel(0);
  uint64_t v2 = (void *)swift_task_alloc(dword_3A4A2C);
  *(void *)(v1 + 16) = v2;
  void *v2 = v1;
  v2[1] = partial apply for closure #1 in MLActivityClassifier.init(trainingData:featureColumns:labelColumn:recordingFileColumn:parameters:);
  return closure #1 in MLRandomForestRegressor.init(trainingData:targetColumn:featureColumns:parameters:)(a1);
}

uint64_t lazy protocol witness table accessor for type TreeRegressor and conformance TreeRegressor()
{
  uint64_t result = lazy protocol witness table cache variable for type TreeRegressor and conformance TreeRegressor;
  if (!lazy protocol witness table cache variable for type TreeRegressor and conformance TreeRegressor)
  {
    uint64_t v1 = type metadata accessor for TreeRegressor(255);
    uint64_t result = swift_getWitnessTable(&protocol conformance descriptor for TreeRegressor, v1);
    lazy protocol witness table cache variable for type TreeRegressor and conformance TreeRegressor = result;
  }
  return result;
}

{
  uint64_t result;
  uint64_t v1;

  uint64_t result = lazy protocol witness table cache variable for type TreeRegressor and conformance TreeRegressor;
  if (!lazy protocol witness table cache variable for type TreeRegressor and conformance TreeRegressor)
  {
    uint64_t v1 = type metadata accessor for TreeRegressor(255);
    uint64_t result = swift_getWitnessTable(&protocol conformance descriptor for TreeRegressor, v1);
    lazy protocol witness table cache variable for type TreeRegressor and conformance TreeRegressor = result;
  }
  return result;
}

uint64_t sub_4A38D()
{
  return objectdestroyTm();
}

uint64_t objectdestroyTm()
{
  uint64_t v1 = type metadata accessor for TreeRegressorModel(0);
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = ~*(unsigned __int8 *)(v2 + 80) & (v3 + 16);
  uint64_t v10 = *(void *)(v2 + 64);
  uint64_t v5 = v4 + v0;
  swift_bridgeObjectRelease(*(void *)(v0 + v4 + 8));
  uint64_t v6 = *(void *)(v0 + v4 + 16);
  if (v6)
  {
    swift_bridgeObjectRelease(v6);
    swift_bridgeObjectRelease(*(void *)(v5 + 32));
  }
  uint64_t v7 = *(int *)(v1 + 24) + v5;
  uint64_t v8 = type metadata accessor for BaseTreeRegressorModel(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v8 - 8) + 8))(v7, v8);
  return swift_deallocObject(v0, v10 + v4, v3 | 7);
}

uint64_t partial apply for closure #1 in MLRandomForestRegressor.init(checkpoint:)(uint64_t a1)
{
  type metadata accessor for TreeRegressorModel(0);
  uint64_t v2 = (void *)swift_task_alloc(dword_3A4A44);
  *(void *)(v1 + 16) = v2;
  void *v2 = v1;
  v2[1] = partial apply for closure #1 in MLActivityClassifier.init(trainingData:featureColumns:labelColumn:recordingFileColumn:parameters:);
  return closure #1 in MLRandomForestRegressor.init(checkpoint:)(a1);
}

id sub_4A4B0()
{
  uint64_t v1 = v0;
  id result = MLRandomForestRegressor.model.getter();
  *uint64_t v1 = result;
  return result;
}

void sub_4A4CA(id *a1)
{
}

void *initializeBufferWithCopyOfBuffer for MLRandomForestRegressor(void *a1, void *a2, int *a3)
{
  uint64_t v3 = a1;
  int v4 = *(_DWORD *)(*((void *)a3 - 1) + 80);
  if ((v4 & 0x20000) != 0)
  {
    uint64_t v9 = *a2;
    *uint64_t v3 = *a2;
    uint64_t v3 = (void *)(v9 + ((v4 + 16) & ~v4));
    swift_retain();
  }
  else
  {
    *a1 = *a2;
    uint64_t v6 = a2[1];
    v3[1] = v6;
    uint64_t v7 = a2[2];
    swift_bridgeObjectRetain(v6);
    if (v7)
    {
      v3[2] = v7;
      void v3[3] = a2[3];
      uint64_t v8 = a2[4];
      void v3[4] = v8;
      swift_bridgeObjectRetain(v7);
      swift_bridgeObjectRetain(v8);
    }
    else
    {
      void v3[4] = a2[4];
      *((_OWORD *)v3 + 1) = *((_OWORD *)a2 + 1);
    }
    uint64_t v10 = *(int *)(type metadata accessor for TreeRegressorModel(0) + 24);
    uint64_t v11 = type metadata accessor for BaseTreeRegressorModel(0);
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v11 - 8) + 16))((char *)v3 + v10, (char *)a2 + v10, v11);
    uint64_t v12 = a3[5];
    uint64_t v13 = *(void **)((char *)a2 + v12);
    *(void *)((char *)v3 + v12) = v13;
    uint64_t v14 = a3[6];
    *(void *)((char *)v3 + v14) = *(void *)((char *)a2 + v14);
    uint64_t v29 = *(void *)((char *)a2 + v14 + 8);
    *(void *)((char *)v3 + v14 + 8) = v29;
    uint64_t v15 = a3[7];
    uint64_t v31 = *(void *)((char *)a2 + v15);
    *(void *)((char *)v3 + v15) = v31;
    uint64_t v30 = a3;
    uint64_t v16 = a3[8];
    uint64_t v17 = (char *)v3 + v16;
    uint64_t v18 = (long long *)((char *)a2 + v16);
    uint64_t v19 = *(void *)((char *)a2 + v16 + 24);
    v13;
    swift_bridgeObjectRetain(v29);
    swift_bridgeObjectRetain(v31);
    if (v19)
    {
      *((void *)v17 + 3) = v19;
      (**(void (***)(char *, long long *, uint64_t))(v19 - 8))(v17, v18, v19);
    }
    else
    {
      long long v20 = *v18;
      *((_OWORD *)v17 + 1) = v18[1];
      *(_OWORD *)uint64_t v17 = v20;
    }
    *((_OWORD *)v17 + 2) = v18[2];
    *((_OWORD *)v17 + 3) = v18[3];
    *((_OWORD *)v17 + 4) = v18[4];
    *((_OWORD *)v17 + 5) = v18[5];
    *((_OWORD *)v17 + 6) = v18[6];
    uint64_t v21 = v30[9];
    uint64_t v22 = *(void *)((char *)a2 + v21);
    uint64_t v23 = *(void *)((char *)a2 + v21 + 8);
    char v32 = *((unsigned char *)a2 + v21 + 16);
    outlined copy of Result<_RegressorMetrics, Error>(v22, v23, v32);
    *(void *)((char *)v3 + v21) = v22;
    *(void *)((char *)v3 + v21 + 8) = v23;
    *((unsigned char *)v3 + v21 + 16) = v32;
    uint64_t v24 = v30[10];
    uint64_t v25 = *(void *)((char *)a2 + v24);
    uint64_t v26 = *(void *)((char *)a2 + v24 + 8);
    char v27 = *((unsigned char *)a2 + v24 + 16);
    outlined copy of Result<_RegressorMetrics, Error>(v25, v26, v27);
    *(void *)((char *)v3 + v24) = v25;
    *(void *)((char *)v3 + v24 + 8) = v26;
    *((unsigned char *)v3 + v24 + 16) = v27;
  }
  return v3;
}

uint64_t destroy for MLRandomForestRegressor(void *a1, int *a2)
{
  swift_bridgeObjectRelease(a1[1]);
  uint64_t v3 = a1[2];
  if (v3)
  {
    swift_bridgeObjectRelease(v3);
    swift_bridgeObjectRelease(a1[4]);
  }
  int v4 = (char *)a1 + *(int *)(type metadata accessor for TreeRegressorModel(0) + 24);
  uint64_t v5 = type metadata accessor for BaseTreeRegressorModel(0);
  (*(void (**)(char *, uint64_t))(*(void *)(v5 - 8) + 8))(v4, v5);

  swift_bridgeObjectRelease(*(void *)((char *)a1 + a2[6] + 8));
  swift_bridgeObjectRelease(*(void *)((char *)a1 + a2[7]));
  uint64_t v6 = a2[8];
  if (*(void *)((char *)a1 + v6 + 24)) {
    __swift_destroy_boxed_opaque_existential_1Tm((void *)((char *)a1 + v6));
  }
  outlined consume of Result<(Int, Int), Error>(*(void *)((char *)a1 + a2[9]), *(void *)((char *)a1 + a2[9] + 8), *(_DWORD *)((char *)a1 + a2[9] + 16));
  return outlined consume of Result<(Int, Int), Error>(*(void *)((char *)a1 + a2[10]), *(void *)((char *)a1 + a2[10] + 8), *(_DWORD *)((char *)a1 + a2[10] + 16));
}

void *initializeWithCopy for MLRandomForestRegressor(void *a1, void *a2, int *a3)
{
  *a1 = *a2;
  uint64_t v5 = a2[1];
  a1[1] = v5;
  uint64_t v6 = a2[2];
  swift_bridgeObjectRetain(v5);
  if (v6)
  {
    a1[2] = v6;
    a1[3] = a2[3];
    uint64_t v7 = a2[4];
    a1[4] = v7;
    swift_bridgeObjectRetain(v6);
    swift_bridgeObjectRetain(v7);
  }
  else
  {
    a1[4] = a2[4];
    *((_OWORD *)a1 + 1) = *((_OWORD *)a2 + 1);
  }
  uint64_t v8 = *(int *)(type metadata accessor for TreeRegressorModel(0) + 24);
  uint64_t v9 = type metadata accessor for BaseTreeRegressorModel(0);
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v9 - 8) + 16))((char *)a1 + v8, (char *)a2 + v8, v9);
  uint64_t v10 = a3[5];
  uint64_t v11 = *(void **)((char *)a2 + v10);
  *(void *)((char *)a1 + v10) = v11;
  uint64_t v12 = a3[6];
  *(void *)((char *)a1 + v12) = *(void *)((char *)a2 + v12);
  uint64_t v27 = *(void *)((char *)a2 + v12 + 8);
  *(void *)((char *)a1 + v12 + 8) = v27;
  uint64_t v13 = a3[7];
  uint64_t v29 = *(void *)((char *)a2 + v13);
  *(void *)((char *)a1 + v13) = v29;
  uint64_t v28 = a3;
  uint64_t v14 = a3[8];
  uint64_t v15 = (char *)a1 + v14;
  uint64_t v16 = (long long *)((char *)a2 + v14);
  uint64_t v17 = *(void *)((char *)a2 + v14 + 24);
  v11;
  swift_bridgeObjectRetain(v27);
  swift_bridgeObjectRetain(v29);
  if (v17)
  {
    *((void *)v15 + 3) = v17;
    (**(void (***)(char *, long long *, uint64_t))(v17 - 8))(v15, v16, v17);
  }
  else
  {
    long long v18 = *v16;
    *((_OWORD *)v15 + 1) = v16[1];
    *(_OWORD *)uint64_t v15 = v18;
  }
  *((_OWORD *)v15 + 2) = v16[2];
  *((_OWORD *)v15 + 3) = v16[3];
  *((_OWORD *)v15 + 4) = v16[4];
  *((_OWORD *)v15 + 5) = v16[5];
  *((_OWORD *)v15 + 6) = v16[6];
  uint64_t v19 = v28[9];
  uint64_t v20 = *(void *)((char *)a2 + v19);
  uint64_t v21 = *(void *)((char *)a2 + v19 + 8);
  char v30 = *((unsigned char *)a2 + v19 + 16);
  outlined copy of Result<_RegressorMetrics, Error>(v20, v21, v30);
  *(void *)((char *)a1 + v19) = v20;
  *(void *)((char *)a1 + v19 + 8) = v21;
  *((unsigned char *)a1 + v19 + 16) = v30;
  uint64_t v22 = v28[10];
  uint64_t v23 = *(void *)((char *)a2 + v22);
  uint64_t v24 = *(void *)((char *)a2 + v22 + 8);
  char v25 = *((unsigned char *)a2 + v22 + 16);
  outlined copy of Result<_RegressorMetrics, Error>(v23, v24, v25);
  *(void *)((char *)a1 + v22) = v23;
  *(void *)((char *)a1 + v22 + 8) = v24;
  *((unsigned char *)a1 + v22 + 16) = v25;
  return a1;
}

void *assignWithCopy for MLRandomForestRegressor(void *a1, void *a2, int *a3)
{
  *a1 = *a2;
  uint64_t v4 = a2[1];
  uint64_t v5 = a1[1];
  a1[1] = v4;
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRelease(v5);
  uint64_t v6 = a1 + 2;
  uint64_t v7 = a2 + 2;
  uint64_t v8 = a1[2];
  uint64_t v9 = a2[2];
  if (v8)
  {
    if (v9)
    {
      a1[2] = v9;
      swift_bridgeObjectRetain(v9);
      swift_bridgeObjectRelease(v8);
      a1[3] = a2[3];
      uint64_t v10 = a2[4];
      uint64_t v11 = a1[4];
      a1[4] = v10;
      swift_bridgeObjectRetain(v10);
      swift_bridgeObjectRelease(v11);
    }
    else
    {
      outlined destroy of Either<LogisticRegressionClassifier<Float, String>, FullyConnectedNetworkClassifier<Float, String>>((uint64_t)(a1 + 2), &demangling cache variable for type metadata for FeatureVectorizer<Float>.Transformer);
      *uint64_t v6 = *v7;
      a1[4] = a2[4];
    }
  }
  else if (v9)
  {
    a1[2] = v9;
    a1[3] = a2[3];
    uint64_t v12 = a2[4];
    a1[4] = v12;
    swift_bridgeObjectRetain(v9);
    swift_bridgeObjectRetain(v12);
  }
  else
  {
    a1[4] = a2[4];
    *uint64_t v6 = *v7;
  }
  uint64_t v13 = *(int *)(type metadata accessor for TreeRegressorModel(0) + 24);
  uint64_t v14 = type metadata accessor for BaseTreeRegressorModel(0);
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v14 - 8) + 24))((char *)a1 + v13, (char *)a2 + v13, v14);
  uint64_t v15 = a3[5];
  uint64_t v16 = *(void **)((char *)a2 + v15);
  uint64_t v17 = *(void **)((char *)a1 + v15);
  *(void *)((char *)a1 + v15) = v16;
  v16;

  uint64_t v18 = a3[6];
  *(void *)((char *)a1 + v18) = *(void *)((char *)a2 + v18);
  uint64_t v19 = *(void *)((char *)a2 + v18 + 8);
  uint64_t v20 = *(void *)((char *)a1 + v18 + 8);
  *(void *)((char *)a1 + v18 + 8) = v19;
  swift_bridgeObjectRetain(v19);
  swift_bridgeObjectRelease(v20);
  uint64_t v21 = a3[7];
  uint64_t v22 = *(void *)((char *)a2 + v21);
  uint64_t v23 = *(void *)((char *)a1 + v21);
  *(void *)((char *)a1 + v21) = v22;
  swift_bridgeObjectRetain(v22);
  swift_bridgeObjectRelease(v23);
  uint64_t v24 = a3[8];
  char v25 = (char *)a1 + v24;
  uint64_t v26 = (char *)a2 + v24;
  uint64_t v27 = *(void *)((char *)a2 + v24 + 24);
  if (!*(void *)((char *)a1 + v24 + 24))
  {
    if (v27)
    {
      *((void *)v25 + 3) = v27;
      (**(void (***)(char *, char *))(v27 - 8))(v25, v26);
      goto LABEL_15;
    }
LABEL_14:
    long long v30 = *(_OWORD *)v26;
    *((_OWORD *)v25 + 1) = *((_OWORD *)v26 + 1);
    *(_OWORD *)char v25 = v30;
    goto LABEL_15;
  }
  uint64_t v29 = (void *)((char *)a1 + v24);
  if (!v27)
  {
    __swift_destroy_boxed_opaque_existential_1Tm(v29);
    goto LABEL_14;
  }
  __swift_assign_boxed_opaque_existential_0(v29, (void *)((char *)a2 + v24));
LABEL_15:
  *((void *)v25 + 4) = *((void *)v26 + 4);
  *((void *)v25 + 5) = *((void *)v26 + 5);
  *((void *)v25 + 6) = *((void *)v26 + 6);
  *((void *)v25 + 7) = *((void *)v26 + 7);
  *((void *)v25 + 8) = *((void *)v26 + 8);
  *((void *)v25 + 9) = *((void *)v26 + 9);
  *((void *)v25 + 10) = *((void *)v26 + 10);
  *((void *)v25 + 11) = *((void *)v26 + 11);
  *((void *)v25 + 12) = *((void *)v26 + 12);
  *((void *)v25 + 13) = *((void *)v26 + 13);
  uint64_t v31 = a3[9];
  uint64_t v32 = *(void *)((char *)a2 + v31);
  uint64_t v33 = *(void *)((char *)a2 + v31 + 8);
  char v45 = *((unsigned char *)a2 + v31 + 16);
  outlined copy of Result<_RegressorMetrics, Error>(v32, v33, v45);
  uint64_t v34 = *(void *)((char *)a1 + v31);
  uint64_t v35 = *(void *)((char *)a1 + v31 + 8);
  *(void *)((char *)a1 + v31) = v32;
  *(void *)((char *)a1 + v31 + 8) = v33;
  int v36 = *(_DWORD *)((char *)a1 + v31 + 16);
  *((unsigned char *)a1 + v31 + 16) = v45;
  outlined consume of Result<(Int, Int), Error>(v34, v35, v36);
  uint64_t v37 = a3[10];
  uint64_t v38 = *(void *)((char *)a2 + v37);
  uint64_t v39 = *(void *)((char *)a2 + v37 + 8);
  char v40 = *((unsigned char *)a2 + v37 + 16);
  outlined copy of Result<_RegressorMetrics, Error>(v38, v39, v40);
  uint64_t v41 = *(void *)((char *)a1 + v37);
  uint64_t v42 = *(void *)((char *)a1 + v37 + 8);
  *(void *)((char *)a1 + v37) = v38;
  *(void *)((char *)a1 + v37 + 8) = v39;
  int v43 = *(_DWORD *)((char *)a1 + v37 + 16);
  *((unsigned char *)a1 + v37 + 16) = v40;
  outlined consume of Result<(Int, Int), Error>(v41, v42, v43);
  return a1;
}

uint64_t initializeWithTake for MLRandomForestRegressor(uint64_t a1, uint64_t a2, int *a3)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  uint64_t v4 = *(int *)(type metadata accessor for TreeRegressorModel(0) + 24);
  uint64_t v5 = type metadata accessor for BaseTreeRegressorModel(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 32))(a1 + v4, a2 + v4, v5);
  *(void *)(a1 + a3[5]) = *(void *)(a2 + a3[5]);
  *(_OWORD *)(a1 + a3[6]) = *(_OWORD *)(a2 + a3[6]);
  *(void *)(a1 + a3[7]) = *(void *)(a2 + a3[7]);
  qmemcpy((void *)(a1 + a3[8]), (const void *)(a2 + a3[8]), 0x70uLL);
  uint64_t v6 = a3[9];
  *(unsigned char *)(a1 + v6 + 16) = *(unsigned char *)(a2 + v6 + 16);
  *(_OWORD *)(a1 + v6) = *(_OWORD *)(a2 + v6);
  uint64_t v7 = a3[10];
  *(_OWORD *)(a1 + v7) = *(_OWORD *)(a2 + v7);
  *(unsigned char *)(a1 + v7 + 16) = *(unsigned char *)(a2 + v7 + 16);
  return a1;
}

void *assignWithTake for MLRandomForestRegressor(void *a1, void *a2, int *a3)
{
  *a1 = *a2;
  uint64_t v6 = a1[1];
  a1[1] = a2[1];
  swift_bridgeObjectRelease(v6);
  uint64_t v7 = a1 + 2;
  uint64_t v8 = a2 + 2;
  uint64_t v9 = a1[2];
  if (v9)
  {
    uint64_t v10 = a2[2];
    if (v10)
    {
      a1[2] = v10;
      swift_bridgeObjectRelease(v9);
      a1[3] = a2[3];
      uint64_t v11 = a1[4];
      a1[4] = a2[4];
      swift_bridgeObjectRelease(v11);
    }
    else
    {
      outlined destroy of Either<LogisticRegressionClassifier<Float, String>, FullyConnectedNetworkClassifier<Float, String>>((uint64_t)(a1 + 2), &demangling cache variable for type metadata for FeatureVectorizer<Float>.Transformer);
      *uint64_t v7 = *v8;
      a1[4] = a2[4];
    }
  }
  else
  {
    a1[4] = a2[4];
    *uint64_t v7 = *v8;
  }
  uint64_t v12 = *(int *)(type metadata accessor for TreeRegressorModel(0) + 24);
  uint64_t v13 = type metadata accessor for BaseTreeRegressorModel(0);
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v13 - 8) + 40))((char *)a1 + v12, (char *)a2 + v12, v13);
  uint64_t v14 = a3[5];
  uint64_t v15 = *(void **)((char *)a1 + v14);
  *(void *)((char *)a1 + v14) = *(void *)((char *)a2 + v14);

  uint64_t v16 = a3[6];
  *(void *)((char *)a1 + v16) = *(void *)((char *)a2 + v16);
  uint64_t v17 = *(void *)((char *)a1 + v16 + 8);
  *(void *)((char *)a1 + v16 + 8) = *(void *)((char *)a2 + v16 + 8);
  swift_bridgeObjectRelease(v17);
  uint64_t v18 = a3[7];
  uint64_t v19 = *(void *)((char *)a1 + v18);
  *(void *)((char *)a1 + v18) = *(void *)((char *)a2 + v18);
  swift_bridgeObjectRelease(v19);
  uint64_t v20 = a3[8];
  uint64_t v21 = (_OWORD *)((char *)a1 + v20);
  if (*(void *)((char *)a1 + v20 + 24)) {
    __swift_destroy_boxed_opaque_existential_1Tm((void *)((char *)a1 + v20));
  }
  long long v22 = *(_OWORD *)((char *)a2 + v20);
  v21[1] = *(_OWORD *)((char *)a2 + v20 + 16);
  _OWORD *v21 = v22;
  *(_OWORD *)((char *)a1 + v20 + 32) = *(_OWORD *)((char *)a2 + v20 + 32);
  *(_OWORD *)((char *)a1 + v20 + 48) = *(_OWORD *)((char *)a2 + v20 + 48);
  *(void *)((char *)a1 + v20 + 64) = *(void *)((char *)a2 + v20 + 64);
  *(_OWORD *)((char *)a1 + v20 + 72) = *(_OWORD *)((char *)a2 + v20 + 72);
  *(_OWORD *)((char *)a1 + v20 + 88) = *(_OWORD *)((char *)a2 + v20 + 88);
  *(void *)((char *)a1 + v20 + 104) = *(void *)((char *)a2 + v20 + 104);
  uint64_t v23 = a3[9];
  char v24 = *((unsigned char *)a2 + v23 + 16);
  uint64_t v25 = *(void *)((char *)a1 + v23);
  uint64_t v26 = *(void *)((char *)a1 + v23 + 8);
  *(_OWORD *)((char *)a1 + v23) = *(_OWORD *)((char *)a2 + v23);
  int v27 = *(_DWORD *)((char *)a1 + v23 + 16);
  *((unsigned char *)a1 + v23 + 16) = v24;
  outlined consume of Result<(Int, Int), Error>(v25, v26, v27);
  uint64_t v28 = a3[10];
  char v29 = *((unsigned char *)a2 + v28 + 16);
  uint64_t v30 = *(void *)((char *)a1 + v28);
  uint64_t v31 = *(void *)((char *)a1 + v28 + 8);
  *(_OWORD *)((char *)a1 + v28) = *(_OWORD *)((char *)a2 + v28);
  int v32 = *(_DWORD *)((char *)a1 + v28 + 16);
  *((unsigned char *)a1 + v28 + 16) = v29;
  outlined consume of Result<(Int, Int), Error>(v30, v31, v32);
  return a1;
}

uint64_t getEnumTagSinglePayload for MLRandomForestRegressor(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_4AF31);
}

uint64_t sub_4AF31(uint64_t a1, unsigned int a2, uint64_t a3)
{
  unsigned int v4 = 0;
  uint64_t v5 = type metadata accessor for TreeRegressorModel(0);
  if (*(_DWORD *)(*(void *)(v5 - 8) + 84) == a2) {
    return __swift_getEnumTagSinglePayload(a1, a2, v5);
  }
  if ((*(void *)(a1 + *(int *)(a3 + 20)) & 0xFFFFFFFF00000001) == 0) {
    return (*(void *)(a1 + *(int *)(a3 + 20)) >> 1) + 1;
  }
  return v4;
}

uint64_t storeEnumTagSinglePayload for MLRandomForestRegressor(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_4AFAB);
}

uint64_t sub_4AFAB(uint64_t a1, unsigned int a2, int a3, uint64_t a4)
{
  uint64_t v6 = type metadata accessor for TreeRegressorModel(0);
  if (*(_DWORD *)(*(void *)(v6 - 8) + 84) == a3) {
    return __swift_storeEnumTagSinglePayload(a1, a2, a2, v6);
  }
  uint64_t result = *(int *)(a4 + 20);
  *(void *)(a1 + result) = 2 * (a2 - 1);
  return result;
}

uint64_t type metadata completion function for MLRandomForestRegressor(uint64_t a1)
{
  uint64_t result = type metadata accessor for TreeRegressorModel(319);
  if (v2 <= 0x3F)
  {
    v3[0] = *(void *)(result - 8) + 64;
    v3[1] = (char *)&value witness table for Builtin.UnknownObject + 64;
    v3[2] = &unk_3477F8;
    void v3[3] = (char *)&value witness table for Builtin.BridgeObject + 64;
    void v3[4] = &unk_347810;
    uint64_t v3[5] = &unk_347828;
    v3[6] = &unk_347828;
    swift_initStructMetadata(a1, 256, 7, v3, a1 + 16);
    return 0;
  }
  return result;
}

uint64_t sub_4B098()
{
  swift_unknownObjectRelease(v0[2]);
  swift_release(v0[4]);
  swift_release(v0[6]);
  return swift_deallocObject(v0, 56, 7);
}

uint64_t partial apply for closure #1 in static MLRandomForestRegressor.handleResult(_:session:fulfill:)(uint64_t a1)
{
  uint64_t v3 = v1[2];
  uint64_t v4 = v1[3];
  uint64_t v8 = v1[4];
  uint64_t v9 = v1[5];
  uint64_t v5 = v1[6];
  uint64_t v6 = (void *)swift_task_alloc(dword_3A4B1C);
  *(void *)(v2 + 16) = v6;
  *uint64_t v6 = v2;
  v6[1] = partial apply for specialized closure #1 in blockAwait<A>(_:);
  return closure #1 in static MLRandomForestRegressor.handleResult(_:session:fulfill:)(a1, v3, v4, v8, v9, v5);
}

uint64_t outlined copy of MLRegressorMetrics?(uint64_t a1, uint64_t a2, char a3)
{
  if (a3 != -1) {
    return outlined copy of Result<_RegressorMetrics, Error>(a1, a2, a3 & 1);
  }
  return result;
}

uint64_t closure #1 in MLRandomForestRegressor.init(trainingData:targetColumn:featureColumns:parameters:)()
{
  return closure #1 in MLRandomForestRegressor.init(checkpoint:)();
}

void *_sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lF10Algorithms23ChunksOfCountCollectionVySaySdGG_SSs5NeverOTg5128_s8CreateML20MLActivityClassifierV08activityD10Prediction4from09perWindowF0SaySSGAA11MLDataTableV_SbtKFSSs10ArraySliceVySdGXEfU_SaySSGTf1cn_n(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (!a2) {
    BUG();
  }
  uint64_t v7 = *(void *)(a1 + 16) / a2 + (*(void *)(a1 + 16) % a2 != 0);
  if (!v7)
  {
    swift_bridgeObjectRelease(a4);
    return _swiftEmptyArrayStorage;
  }
  uint64_t v36 = *(void *)(a1 + 16);
  int64_t v8 = 0;
  if (v7 > 0) {
    int64_t v8 = v7;
  }
  int64_t v28 = v8;
  uint64_t v35 = v7;
  specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v8, 0);
  if ((a3 | v35) < 0) {
    BUG();
  }
  uint64_t v30 = a4 + 32;
  uint64_t v9 = 0;
  uint64_t v10 = 0;
  uint64_t v11 = v36;
  uint64_t v29 = a2;
  do
  {
    if (v9 == v28) {
      BUG();
    }
    if (v10 == v11) {
      BUG();
    }
    if (v10 > v11) {
      BUG();
    }
    uint64_t v12 = v11 - a3;
    if (v11 < a3) {
      BUG();
    }
    if (v10 >= a3)
    {
      _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, 0xD000000000000010, "ityClassifier+Training.swift" + 0x8000000000000000, "CreateML/MLActivityClassifier+Training.swift", 44, 2, 630, 0);
      BUG();
    }
    uint64_t v13 = v10;
    if (v10 + 1 < a3)
    {
      uint64_t v14 = v10;
      uint64_t v15 = v10;
      do
      {
        uint64_t v16 = v14 + 1;
        if (v14 + 1 < v10 || v16 >= a3) {
          BUG();
        }
        if (v15 < v10 || v15 >= a3) {
          BUG();
        }
        uint64_t v13 = v14 + 1;
        if (*(double *)(a1 + 8 * v14 + 40) <= *(double *)(a1 + 8 * v15 + 32)) {
          uint64_t v13 = v15;
        }
        ++v14;
        uint64_t v15 = v13;
      }
      while (a3 - 1 != v16);
    }
    BOOL v17 = __OFSUB__(v13, v10);
    uint64_t v18 = v13 - v10;
    if (v17) {
      BUG();
    }
    if (v18 < 0) {
      BUG();
    }
    if ((unint64_t)v18 >= *(void *)(a4 + 16)) {
      BUG();
    }
    uint64_t v34 = v12;
    uint64_t v33 = v9;
    uint64_t v19 = 16 * v18;
    uint64_t v26 = *(void *)(v30 + v19);
    unint64_t v20 = _swiftEmptyArrayStorage[2];
    unint64_t v31 = _swiftEmptyArrayStorage[3];
    int64_t v32 = v20 + 1;
    uint64_t v27 = *(void *)(v30 + v19 + 8);
    swift_bridgeObjectRetain(v27);
    if (v31 >> 1 <= v20) {
      specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v31 >= 2, v32, 1);
    }
    uint64_t v21 = 2 * v20;
    _swiftEmptyArrayStorage[2] = v32;
    _swiftEmptyArrayStorage[v21 + 4] = v26;
    _swiftEmptyArrayStorage[v21 + 5] = v27;
    if (v29 <= 0)
    {
      uint64_t v11 = v36;
      uint64_t v22 = v35;
      uint64_t v23 = v33;
      if (v34 <= 0)
      {
        uint64_t v24 = v36;
        if (v34 > v29) {
          goto LABEL_33;
        }
      }
    }
    else
    {
      uint64_t v11 = v36;
      uint64_t v22 = v35;
      uint64_t v23 = v33;
      if (v34 >= 0)
      {
        uint64_t v24 = v36;
        if (v34 < (unint64_t)v29) {
          goto LABEL_33;
        }
      }
    }
    uint64_t v24 = v29 + a3;
    if (__OFADD__(v29, a3)) {
      BUG();
    }
LABEL_33:
    if (v24 < a3) {
      BUG();
    }
    uint64_t v9 = v23 + 1;
    uint64_t v10 = a3;
    a3 = v24;
  }
  while (v9 != v22);
  swift_bridgeObjectRelease(a4);
  return _swiftEmptyArrayStorage;
}

uint64_t specialized Collection.count.getter()
{
  uint64_t v0 = CMLSequence.size.getter();
  return specialized RandomAccessCollection<>.distance(from:to:)(0, v0, CMLSequence.size.getter);
}

{
  return specialized Collection.count.getter();
}

{
  uint64_t v0;

  uint64_t v0 = CMLDictionary.size.getter();
  return specialized RandomAccessCollection<>.distance(from:to:)(0, v0, CMLDictionary.size.getter);
}

{
  uint64_t v0;

  uint64_t v0 = CMLSequence.size.getter();
  return specialized RandomAccessCollection<>.distance(from:to:)(0, v0);
}

{
  Swift::Int v0;

  uint64_t v0 = MLDataTable.size.getter();
  return specialized RandomAccessCollection<>.distance(from:to:)(0, v0);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  swift_retain();
  uint64_t v0 = CMLSequence.size.getter();
  uint64_t v1 = specialized RandomAccessCollection<>.distance(from:to:)(0, v0, CMLSequence.size.getter);
  swift_release();
  swift_retain();
  uint64_t v2 = CMLSequence.size.getter();
  uint64_t v3 = specialized RandomAccessCollection<>.distance(from:to:)(0, v2, CMLSequence.size.getter);
  swift_release();
  if (v3 < 0) {
    BUG();
  }
  swift_retain();
  uint64_t v4 = CMLSequence.size.getter();
  uint64_t v5 = specialized RandomAccessCollection<>.distance(from:to:)(0, v4, CMLSequence.size.getter);
  swift_release();
  if (v1 < 0 || v5 < v1) {
    BUG();
  }
  return v1;
}

char specialized Sequence.contains(where:)(uint64_t (*a1)(unint64_t *), uint64_t a2, uint64_t a3)
{
  uint64_t v4 = v3;
  swift_retain();
  uint64_t v6 = CMLSequence.size.getter();
  if (specialized RandomAccessCollection<>.distance(from:to:)(0, v6, CMLSequence.size.getter))
  {
    uint64_t v7 = 0;
    uint64_t v27 = a3;
    while (1)
    {
      CMLSequence.value(at:)(v7);
      if (v4)
      {
        swift_unexpectedError(v4, "CreateML/SequenceType.swift", 27, 1, 76);
        BUG();
      }
      uint64_t v26 = v7;
      Swift::String v8 = CMLFeatureValue.stringValue()();
      uint64_t countAndFlagsBits = v8._countAndFlagsBits;
      if (v9)
      {
        swift_errorRelease(v9);
        swift_release();
        unint64_t v24 = 0;
        uint64_t v25 = (char *)0xE000000000000000;
        _StringGuts.grow(_:)(37);
        swift_bridgeObjectRelease(v25);
        unint64_t v24 = 0xD000000000000022;
        uint64_t v25 = "able.ColumnNames.swift" + 0x8000000000000000;
        v20._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter(&type metadata for Int, &protocol witness table for Int);
        unsigned __int8 object = v20._object;
        String.append(_:)(v20);
        swift_bridgeObjectRelease(object);
        v22._uint64_t countAndFlagsBits = 46;
        v22._unsigned __int8 object = (void *)0xE100000000000000;
        String.append(_:)(v22);
        _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, v24, v25, "CreateML/MLDataTable.ColumnNames.swift", 38, 2, 17, 0);
        BUG();
      }
      uint64_t v10 = (char *)v8._object;
      swift_release();
      swift_retain();
      uint64_t v11 = CMLSequence.size.getter();
      uint64_t v12 = specialized RandomAccessCollection<>.distance(from:to:)(0, v11, CMLSequence.size.getter);
      swift_release();
      if (v26 >= v12) {
        BUG();
      }
      uint64_t v13 = v26;
      unint64_t v24 = countAndFlagsBits;
      uint64_t v25 = v10;
      char v14 = a1(&v24);
      uint64_t countAndFlagsBits = 0;
      char v15 = v14;
      swift_bridgeObjectRelease(v10);
      if (v15) {
        break;
      }
      uint64_t v7 = v13 + 1;
      swift_retain();
      uint64_t v16 = CMLSequence.size.getter();
      uint64_t v17 = specialized RandomAccessCollection<>.distance(from:to:)(0, v16, CMLSequence.size.getter);
      swift_release();
      BOOL v18 = v7 == v17;
      uint64_t v4 = countAndFlagsBits;
      if (v18) {
        goto LABEL_8;
      }
    }
    swift_release();
    return 1;
  }
  else
  {
LABEL_8:
    swift_release();
    return 0;
  }
}

void *MLActivityClassifier.predictions(from:perWindowPrediction:)(void *a1, int a2)
{
  uint64_t v56 = v2;
  int v51 = a2;
  uint64_t v4 = a1;
  uint64_t v45 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Column<Int>);
  uint64_t v44 = *(void *)(v45 - 8);
  int64_t v5 = *(void *)(v44 + 64);
  uint64_t v6 = alloca(v5);
  uint64_t v7 = alloca(v5);
  uint64_t v46 = &v39;
  uint64_t v53 = type metadata accessor for DataFrame(0);
  Swift::String v8 = *(void **)(v53 - 8);
  int64_t v9 = v8[8];
  uint64_t v10 = alloca(v9);
  uint64_t v11 = alloca(v9);
  double v49 = &v39;
  uint64_t v12 = alloca(v9);
  uint64_t v13 = alloca(v9);
  uint64_t v55 = &v39;
  uint64_t v14 = *(int *)(type metadata accessor for MLActivityClassifier(0) + 36);
  uint64_t v47 = v3;
  v15._rawValue = *(void **)(v3 + v14);
  uint64_t v48 = a1;
  DataFrame.validateContainsColumns(_:context:)(v15, (Swift::String)__PAIR128__(0xEC00000061746164, 0x2065727574616546));
  if (!v18)
  {
    uint64_t v19 = (char *)*((void *)v15._rawValue + 2);
    long long v54 = v8;
    if (v19)
    {
      swift_bridgeObjectRetain(v15._rawValue);
      rawValue = v15._rawValue;
      Swift::String v20 = (void **)((char *)v15._rawValue + 40);
      while (1)
      {
        uint64_t v56 = 0;
        double v52 = v19;
        uint64_t v21 = (uint64_t)*(v20 - 1);
        Swift::String v22 = *v20;
        uint64_t v23 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Any.Type>);
        uint64_t v4 = (void *)swift_allocObject(v23, 40, 7);
        v4[2] = 1;
        v4[3] = 2;
        v4[4] = &type metadata for Double;
        swift_bridgeObjectRetain((_BYTE)v22);
        v24._uint64_t countAndFlagsBits = v21;
        v24._unsigned __int8 object = v22;
        DataFrame.validateColumnTypes(_:_:context:)(v24, (Swift::OpaquePointer)v4, (Swift::String)__PAIR128__(0xEC00000061746164, 0x2065727574616546));
        if (v25) {
          break;
        }
        swift_bridgeObjectRelease((_BYTE)v22);
        swift_bridgeObjectRelease((_BYTE)v4);
        v20 += 2;
        uint64_t v19 = v52 - 1;
        if (v52 == (unsigned char *)&dword_0 + 1)
        {
          uint64_t v56 = 0;
          swift_bridgeObjectRelease((_BYTE)rawValue);
          Swift::String v8 = v54;
          goto LABEL_8;
        }
      }
      swift_bridgeObjectRelease((_BYTE)v22);
      swift_bridgeObjectRelease((_BYTE)rawValue);
      swift_bridgeObjectRelease((_BYTE)v4);
    }
    else
    {
      uint64_t v56 = 0;
LABEL_8:
      uint64_t v26 = v55;
      double v52 = (char *)v8[2];
      ((void (*)(uint64_t *, void *, uint64_t))v52)(v55, v48, v53);
      v27._uint64_t countAndFlagsBits = 0x5F6E6F6973736573;
      v27._unsigned __int8 object = (void *)0xEA00000000006469;
      Swift::Int_optional v28 = DataFrame.indexOfColumn(_:)(v27);
      uint64_t v29 = (uint64_t)v49;
      if (v28.is_nil)
      {
        uint64_t v30 = DataFrame.shape.getter();
        if (v30 < 0) {
          BUG();
        }
        uint64_t v42 = v30;
        uint64_t v43 = 0;
        uint64_t v31 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Repeated<Int>);
        uint64_t v32 = lazy protocol witness table accessor for type FullyConnectedNetworkClassifier<Float, String> and conformance FullyConnectedNetworkClassifier<A, B>(&lazy protocol witness table cache variable for type Repeated<Int> and conformance Repeated<A>, &demangling cache variable for type metadata for Repeated<Int>, (uint64_t)&protocol conformance descriptor for Repeated<A>);
        uint64_t v33 = v46;
        Column.init<A>(name:contents:)(0x5F6E6F6973736573, 0xEA00000000006469, &v42, &type metadata for Int, v31, v32);
        uint64_t v26 = v55;
        DataFrame.append<A>(column:)(v33, &type metadata for Int);
        (*(void (**)(uint64_t *, uint64_t))(v44 + 8))(v33, v45);
        Swift::String v8 = v54;
        uint64_t v29 = (uint64_t)v49;
      }
      uint64_t v4 = v8;
      uint64_t v34 = v53;
      *(double *)v16.i64 = ((double (*)(uint64_t, uint64_t *, uint64_t))v52)(v29, v26, v53);
      uint64_t v35 = v56;
      MLDataTable.init(_:convertArraysToShapedArrays:)(v29, 0, v16);
      if (v35)
      {
        ((void (*)(uint64_t *, uint64_t))v4[1])(v55, v34);
      }
      else
      {
        uint64_t v36 = v42;
        char v37 = v43;
        uint64_t v40 = v42;
        char v41 = v43;
        uint64_t v4 = MLActivityClassifier.activityClassifierPrediction(from:perWindowPrediction:)((uint64_t)&v40, v51 & 1, *(double *)v16.i64, v17);
        outlined consume of Result<_DataTable, Error>(v36, v37);
        ((void (*)(uint64_t *, uint64_t))v54[1])(v55, v53);
      }
    }
  }
  return v4;
}

void *MLActivityClassifier.activityClassifierPrediction(from:perWindowPrediction:)(uint64_t a1, int a2, double a3, double a4)
{
  uint64_t v225 = v4;
  uint64_t v221 = (unsigned char *)v5;
  int v205 = a2;
  Swift::Int v228 = (unsigned char *)a1;
  uint64_t v191 = type metadata accessor for DataFrame.Rows(0);
  uint64_t v192 = *(void *)(v191 - 8);
  int64_t v6 = *(void *)(v192 + 64);
  uint64_t v7 = alloca(v6);
  Swift::String v8 = alloca(v6);
  uint64_t v193 = v171;
  uint64_t v204 = type metadata accessor for TensorShape(0);
  uint64_t v189 = *(void *)(v204 - 8);
  int64_t v9 = *(void *)(v189 + 64);
  uint64_t v10 = alloca(v9);
  uint64_t v11 = alloca(v9);
  uint64_t v190 = v171;
  uint64_t v12 = alloca(v9);
  uint64_t v13 = alloca(v9);
  uint64_t v211 = v171;
  uint64_t v174 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (label: Tensor, weight: Tensor?));
  int64_t v14 = *(void *)(*(void *)(v174 - 8) + 64);
  Swift::OpaquePointer v15 = alloca(v14);
  __m128 v16 = alloca(v14);
  char v175 = v171;
  *(void *)&long long v216 = type metadata accessor for Tensor(0);
  os_log_type_t v217 = *(void **)(v216 - 8);
  int64_t v17 = v217[8];
  uint64_t v18 = alloca(v17);
  uint64_t v19 = alloca(v17);
  uint64_t v176 = v171;
  Swift::String v20 = alloca(v17);
  uint64_t v21 = alloca(v17);
  uint64_t v177 = v171;
  Swift::String v22 = alloca(v17);
  uint64_t v23 = alloca(v17);
  uint64_t v210 = (unint64_t *)v171;
  uint64_t v178 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (LSTM.State?, Tensor));
  int64_t v24 = *(void *)(*(void *)(v178 - 8) + 64);
  uint64_t v25 = alloca(v24);
  uint64_t v26 = alloca(v24);
  Float64 v179 = v171;
  int64_t v27 = *(void *)(*(void *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for LSTM.State?)
                              - 8)
                  + 64);
  Swift::Int_optional v28 = alloca(v27);
  uint64_t v29 = alloca(v27);
  uint64_t v180 = v171;
  uint64_t v181 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (LSTM.State, Tensor));
  int64_t v30 = *(void *)(*(void *)(v181 - 8) + 64);
  uint64_t v31 = alloca(v30);
  uint64_t v32 = alloca(v30);
  CMTimeValue v202 = v171;
  uint64_t v230 = (void *)type metadata accessor for WeightedDataSample(0);
  int64_t v33 = *(void *)(*(v230 - 1) + 64);
  uint64_t v34 = alloca(v33);
  uint64_t v35 = alloca(v33);
  uint64_t v218 = (void (*)(uint64_t, uint64_t))v171;
  int64_t v36 = *(void *)(*(void *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for WeightedDataSample?)
                              - 8)
                  + 64);
  char v37 = alloca(v36);
  uint64_t v38 = alloca(v36);
  uint64_t v173 = v171;
  uint64_t v184 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for LazyMapSequence<Batches<LazyPrefetchingMapSequence<LazySequence<Sampling<[WeightedDataSample]>>, WeightedDataSample>>, WeightedDataSample>.Iterator);
  int64_t v39 = *(void *)(*(void *)(v184 - 8) + 64);
  uint64_t v40 = alloca(v39);
  char v41 = alloca(v39);
  v207 = v171;
  int64_t v42 = *(void *)(*(void *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Tensor?)
                              - 8)
                  + 64);
  uint64_t v43 = alloca(v42);
  uint64_t v44 = alloca(v42);
  char v195 = v171;
  uint64_t v45 = alloca(v42);
  uint64_t v46 = alloca(v42);
  uint64_t v196 = v171;
  uint64_t v47 = alloca(v42);
  uint64_t v48 = alloca(v42);
  os_log_t v183 = v171;
  double v49 = alloca(v42);
  double v50 = alloca(v42);
  CMTimeValue v182 = (void (*)(unint64_t *, uint64_t))v171;
  int v51 = alloca(v42);
  double v52 = alloca(v42);
  char v203 = v171;
  uint64_t v53 = alloca(v42);
  long long v54 = alloca(v42);
  uint64_t v226 = v171;
  uint64_t v186 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Dataset<[WeightedDataSample], WeightedDataSample>.PrefetchMode);
  uint64_t v187 = *(void *)(v186 - 8);
  int64_t v55 = *(void *)(v187 + 64);
  uint64_t v56 = alloca(v55);
  uint64_t v57 = alloca(v55);
  os_log_type_t v185 = v171;
  uint64_t v213 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Dataset<[WeightedDataSample], WeightedDataSample>);
  uint64_t v209 = *(void *)(v213 - 8);
  int64_t v58 = *(void *)(v209 + 64);
  uint64_t v59 = alloca(v58);
  uint64_t v60 = alloca(v58);
  Float64 v214 = v171;
  uint64_t v219 = type metadata accessor for DataFrame(0);
  uint64_t v212 = *(void *)(v219 - 8);
  int64_t v61 = *(void *)(v212 + 64);
  uint64_t v62 = alloca(v61);
  uint64_t v63 = alloca(v61);
  Float64 v222 = v171;
  uint64_t v64 = alloca(v61);
  uint64_t v65 = alloca(v61);
  int64_t v215 = v171;
  uint64_t v194 = type metadata accessor for MLActivityClassifier.DataBatcher(0);
  int64_t v66 = *(void *)(*(void *)(v194 - 8) + 64);
  uint64_t v67 = alloca(v66);
  uint64_t v68 = alloca(v66);
  uint64_t v227 = v171;
  int64_t v69 = *(void *)(*(void *)(type metadata accessor for MLActivityClassifier.Configuration(0) - 8) + 64);
  uint64_t v70 = alloca(v69);
  uint64_t v71 = alloca(v69);
  uint64_t v206 = type metadata accessor for MLActivityClassifier.Model(0);
  int64_t v72 = *(void *)(*(void *)(v206 - 8) + 64);
  uint64_t v73 = alloca(v72);
  int64_t v74 = alloca(v72);
  uint64_t v75 = *(void *)v228;
  int v76 = v228[8];
  outlined init with copy of MLTrainingSessionParameters((uint64_t)v221, (uint64_t)v171, type metadata accessor for MLActivityClassifier.Model);
  uint64_t v77 = *(int *)(v206 + 64);
  Swift::Int v228 = v171;
  outlined init with copy of MLTrainingSessionParameters((uint64_t)&v171[v77], (uint64_t)v171, type metadata accessor for MLActivityClassifier.Configuration);
  *(void *)&long long v198 = v75;
  BYTE8(v198) = v76;
  outlined copy of Result<_DataTable, Error>(v75, v76);
  Swift::Int v78 = MLDataTable.size.getter();
  uint64_t v188 = specialized RandomAccessCollection<>.distance(from:to:)(0, v78);
  uint64_t v174 = v188;
  *(void *)&long long v198 = v75;
  BYTE8(v198) = v76;
  uint64_t v224 = v75;
  int v231 = v76;
  outlined copy of Result<_DataTable, Error>(v75, v76);
  uint64_t v79 = (uint64_t)v215;
  DataFrame.init(_:)((uint64_t)&v198);
  uint64_t v229 = v179;
  uint64_t v80 = (uint64_t)v180;
  uint64_t v208 = (uint64_t)v177;
  unint64_t v81 = v178;
  uint64_t v221 = v175;
  int64_t v223 = v171;
  uint64_t v82 = v176;
  swift_bridgeObjectRetain((_BYTE)v180);
  swift_bridgeObjectRetain(v81);
  swift_bridgeObjectRetain((_BYTE)v82);
  uint64_t v83 = v225;
  MLActivityClassifier.DataBatcher.init(input:sessionIdColumn:labelColumn:featureColumns:windowSize:sortSessions:mode:)(v79, (uint64_t)v229, v80, v208, v81, v82, a3, (uint64_t)v221, 0, 1);
  if (v83)
  {
    outlined consume of Result<_DataTable, Error>(v224, v231);
    outlined destroy of MLActivityClassifier.Configuration((uint64_t)v223, type metadata accessor for MLActivityClassifier.Configuration);
    uint64_t v84 = type metadata accessor for MLActivityClassifier.Model;
    uint64_t v85 = (uint64_t)v228;
LABEL_3:
    outlined destroy of MLActivityClassifier.Configuration(v85, v84);
    return v82;
  }
  uint64_t v86 = *(int *)(v206 + 60);
  uint64_t v87 = *(void (**)(void **, uint64_t))&v228[v86];
  swift_bridgeObjectRetain((_BYTE)v87);
  uint64_t v225 = v87;
  char v88 = MLActivityClassifier.DataBatcher.asWeightedSamples(with:classLabels:labels:)((uint64_t)v223, v87, a3, a4);
  uint64_t v229 = 0;
  uint64_t v197 = v86;
  uint64_t v220 = v88;
  LOBYTE(v86) = (_BYTE)v88;
  uint64_t v221 = v88;
  uint64_t v90 = type metadata accessor for ShuffleSampler(0);
  uint64_t v91 = *((void *)v223 + 1);
  unsigned int v92 = v223[16];
  swift_bridgeObjectRetain(v86);
  uint64_t v93 = ShuffleSampler.__allocating_init(seed:)(v91, v92);
  uint64_t v200 = v90;
  uint64_t v201 = &protocol witness table for ShuffleSampler;
  *(void *)&long long v198 = v93;
  uint64_t v94 = v185;
  (*(void (**)(unsigned char *, void, uint64_t))(v187 + 104))(v185, enum case for Dataset.PrefetchMode.serial<A, B>(_:), v186);
  int64_t v215 = (unsigned char *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [WeightedDataSample]);
  uint64_t v95 = lazy protocol witness table accessor for type FullyConnectedNetworkClassifier<Float, String> and conformance FullyConnectedNetworkClassifier<A, B>(&lazy protocol witness table cache variable for type [WeightedDataSample] and conformance [A], &demangling cache variable for type metadata for [WeightedDataSample], (uint64_t)&protocol conformance descriptor for [A]);
  uint64_t v96 = lazy protocol witness table accessor for type VNImageOption and conformance VNImageOption(&lazy protocol witness table cache variable for type WeightedDataSample and conformance WeightedDataSample, type metadata accessor for WeightedDataSample, (uint64_t)&protocol conformance descriptor for WeightedDataSample);
  uint64_t v97 = lazy protocol witness table accessor for type VNImageOption and conformance VNImageOption(&lazy protocol witness table cache variable for type WeightedDataSample and conformance WeightedDataSample, type metadata accessor for WeightedDataSample, (uint64_t)&protocol conformance descriptor for WeightedDataSample);
  Dataset.init<>(samples:batchSize:batchSampler:dropsLastPartialBatch:prefetchMode:transform:)(&v220, v188, &v198, 0, v94, 0, 0, v215, v230, v95, v96, v97);
  swift_bridgeObjectRelease((_BYTE)v225);
  swift_bridgeObjectRelease((_BYTE)v221);
  __swift_storeEnumTagSinglePayload((uint64_t)v226, 1, 1, v216);
  Dataset.makeIterator()(v213);
  uint64_t v208 = *(int *)(v184 + 44);
  int64_t v215 = (unsigned char *)lazy protocol witness table accessor for type FullyConnectedNetworkClassifier<Float, String> and conformance FullyConnectedNetworkClassifier<A, B>(&lazy protocol witness table cache variable for type Batches<LazyPrefetchingMapSequence<LazySequence<Sampling<[WeightedDataSample]>>, WeightedDataSample>>.Iterator and conformance Batches<A>.Iterator, &demangling cache variable for type metadata for Batches<LazyPrefetchingMapSequence<LazySequence<Sampling<[WeightedDataSample]>>, WeightedDataSample>>.Iterator, (uint64_t)&protocol conformance descriptor for Batches<A>.Iterator);
  while (1)
  {
    uint64_t v98 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Batches<LazyPrefetchingMapSequence<LazySequence<Sampling<[WeightedDataSample]>>, WeightedDataSample>>.Iterator);
    uint64_t v99 = (uint64_t)v207;
    dispatch thunk of IteratorProtocol.next()(v98, v215);
    char v100 = v198;
    uint64_t v101 = (uint64_t)v173;
    if ((void)v198)
    {
      uint64_t v102 = *(void (**)(void (**)(void **, uint64_t)))(v99 + v208);
      uint64_t v220 = (void (*)(void **, uint64_t))v198;
      v102(&v220);
      swift_bridgeObjectRelease(v100);
      uint64_t v103 = v101;
      uint64_t v104 = 0;
    }
    else
    {
      uint64_t v103 = (uint64_t)v173;
      uint64_t v104 = 1;
    }
    __swift_storeEnumTagSinglePayload(v103, v104, 1, (uint64_t)v230);
    uint64_t v105 = (uint64_t)v227;
    uint64_t v106 = (uint64_t)v222;
    if (__swift_getEnumTagSinglePayload(v101, 1, (uint64_t)v230) == 1) {
      break;
    }
    outlined init with take of WeightedDataSample(v101, (uint64_t)v218);
    uint64_t v107 = type metadata accessor for LSTM.State(0);
    uint64_t v108 = (uint64_t)v180;
    __swift_storeEnumTagSinglePayload((uint64_t)v180, 1, 1, v107);
    uint64_t v109 = (uint64_t)v179;
    double v110 = &v179[*(int *)(v178 + 48)];
    outlined init with take of LSTM.State?(v108, (uint64_t)v179);
    uint64_t v225 = (void (*)(void **, uint64_t))v217[2];
    double v111 = v110;
    uint64_t v112 = (uint64_t)v218;
    ((void (*)(unsigned char *, void (*)(uint64_t, uint64_t), void))v225)(v111, v218, v216);
    uint64_t v113 = lazy protocol witness table accessor for type VNImageOption and conformance VNImageOption(&lazy protocol witness table cache variable for type MLActivityClassifier.Model and conformance MLActivityClassifier.Model, type metadata accessor for MLActivityClassifier.Model, (uint64_t)&protocol conformance descriptor for MLActivityClassifier.Model);
    uint64_t v114 = (uint64_t)v202;
    Layer.callAsFunction(_:)(v109, v206, v113);
    outlined destroy of Either<LogisticRegressionClassifier<Float, String>, FullyConnectedNetworkClassifier<Float, String>>(v109, &demangling cache variable for type metadata for (LSTM.State?, Tensor));
    uint64_t v221 = (unsigned char *)(v114 + *(int *)(v181 + 48));
    uint64_t v115 = v112 + *((int *)v230 + 5);
    uint64_t v116 = *(int *)(v174 + 48);
    int64_t v117 = v175;
    uint64_t v118 = (uint64_t)&v175[v116];
    uint64_t v119 = v216;
    ((void (*)(unsigned char *, uint64_t, void))v225)(v175, v115, v216);
    outlined init with copy of Tensor?(v115 + v116, v118);
    uint64_t v225 = (void (*)(void **, uint64_t))v217[4];
    CMTimeValue v120 = (void (*)(void, void, void))v176;
    ((void (*)(unsigned char *, unsigned char *, uint64_t))v225)(v176, v117, v119);
    outlined destroy of Either<LogisticRegressionClassifier<Float, String>, FullyConnectedNetworkClassifier<Float, String>>(v118, &demangling cache variable for type metadata for Tensor?);
    uint64_t v121 = v182;
    __swift_storeEnumTagSinglePayload((uint64_t)v182, 1, 1, v119);
    uint64_t v122 = (uint64_t)v177;
    static MLActivityClassifier.Trainer.reshapeLabels(prediction:target:weights:)(v210, (uint64_t)v177, (uint64_t)v203, (uint64_t)v221, v120, v121);
    outlined destroy of Either<LogisticRegressionClassifier<Float, String>, FullyConnectedNetworkClassifier<Float, String>>((uint64_t)v121, &demangling cache variable for type metadata for Tensor?);
    char v123 = (void (*)(uint64_t, uint64_t))v217[1];
    uint64_t v124 = v120;
    uint64_t v125 = v216;
    v123((uint64_t)v124, v216);
    outlined destroy of Either<LogisticRegressionClassifier<Float, String>, FullyConnectedNetworkClassifier<Float, String>>((uint64_t)v203, &demangling cache variable for type metadata for Tensor?);
    v123(v122, v125);
    outlined destroy of Either<LogisticRegressionClassifier<Float, String>, FullyConnectedNetworkClassifier<Float, String>>((uint64_t)v202, &demangling cache variable for type metadata for (LSTM.State, Tensor));
    outlined destroy of MLActivityClassifier.Configuration((uint64_t)v218, type metadata accessor for WeightedDataSample);
    uint64_t v126 = (uint64_t)v226;
    outlined destroy of Either<LogisticRegressionClassifier<Float, String>, FullyConnectedNetworkClassifier<Float, String>>((uint64_t)v226, &demangling cache variable for type metadata for Tensor?);
    ((void (*)(uint64_t, unint64_t *, uint64_t))v225)(v126, v210, v125);
    __swift_storeEnumTagSinglePayload(v126, 0, 1, v125);
  }
  outlined destroy of Either<LogisticRegressionClassifier<Float, String>, FullyConnectedNetworkClassifier<Float, String>>((uint64_t)v207, &demangling cache variable for type metadata for LazyMapSequence<Batches<LazyPrefetchingMapSequence<LazySequence<Sampling<[WeightedDataSample]>>, WeightedDataSample>>, WeightedDataSample>.Iterator);
  uint64_t v127 = *(void *)&v228[v197];
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v212 + 16))(v106, v105, v219);
  uint64_t v128 = (uint64_t)v183;
  outlined init with copy of Tensor?((uint64_t)v226, (uint64_t)v183);
  uint64_t v129 = v216;
  if (__swift_getEnumTagSinglePayload(v128, 1, v216) == 1) {
    BUG();
  }
  swift_bridgeObjectRetain(v127);
  uint64_t v230 = (void *)v127;
  Tensor.shape.getter();
  uint64_t v218 = (void (*)(uint64_t, uint64_t))v217[1];
  v218(v128, v129);
  uint64_t v130 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Int>);
  uint64_t v131 = (void *)swift_allocObject(v130, 64, 7);
  v131[2] = 4;
  v131[3] = 8;
  CMTimeValue v132 = v193;
  DataFrame.rows.getter();
  uint64_t v133 = DataFrame.Rows.count.getter();
  double v134 = (*(double (**)(unsigned char *, uint64_t))(v192 + 8))(v132, v191);
  v131[4] = v133;
  v131[5] = *(void *)&v227[*(int *)(v194 + 40)];
  v131[6] = 1;
  uint64_t v210 = (unint64_t *)v230[2];
  v131[7] = v210;
  uint64_t v135 = v190;
  TensorShape.init(_:)(v131, v134);
  uint64_t v136 = v211;
  os_log_type_t v137 = (void *)TensorShape.dimensions.getter();
  uint64_t v138 = (void *)TensorShape.dimensions.getter();
  char v139 = (char)v138;
  LOBYTE(v217) = specialized static Array<A>.== infix(_:_:)(v137, v138);
  swift_bridgeObjectRelease((_BYTE)v137);
  swift_bridgeObjectRelease(v139);
  uint64_t v140 = *(void (**)(unsigned char *, uint64_t))(v189 + 8);
  uint64_t v141 = v204;
  v140(v135, v204);
  v140(v136, v141);
  if ((v217 & 1) == 0)
  {
    swift_bridgeObjectRelease((_BYTE)v230);
    uint64_t v152 = (uint64_t)v195;
    outlined init with copy of Tensor?((uint64_t)v226, (uint64_t)v195);
    uint64_t v153 = v216;
    if (__swift_getEnumTagSinglePayload(v152, 1, v216) == 1) {
      BUG();
    }
    Tensor.shape.getter();
    v218(v152, v153);
    *(void *)&long long v198 = 0;
    *((void *)&v198 + 1) = 0xE000000000000000;
    _StringGuts.grow(_:)(33);
    swift_bridgeObjectRelease(BYTE8(v198));
    *(void *)&long long v198 = 0xD00000000000001FLL;
    *((void *)&v198 + 1) = "aining checkpoint." + 0x8000000000000000;
    uint64_t v154 = lazy protocol witness table accessor for type VNImageOption and conformance VNImageOption(&lazy protocol witness table cache variable for type TensorShape and conformance TensorShape, (uint64_t (*)(uint64_t))&type metadata accessor for TensorShape, (uint64_t)&protocol conformance descriptor for TensorShape);
    uint64_t v82 = (void *)v204;
    v155._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter(v204, v154);
    char object = (char)v155._object;
    String.append(_:)(v155);
    swift_bridgeObjectRelease(object);
    long long v216 = v198;
    uint64_t v157 = lazy protocol witness table accessor for type MLCreateError and conformance MLCreateError();
    swift_allocError(&type metadata for MLCreateError, v157, 0, 0);
    *(_OWORD *)uint64_t v158 = v216;
    *(_OWORD *)(v158 + 16) = 0;
    *(_OWORD *)(v158 + 32) = 0;
    *(unsigned char *)(v158 + 48) = 0;
    Float64 v159 = v211;
    v140(v211, (uint64_t)v82);
    swift_willThrow(v159, v82, v160, v161, v162, v163);
    outlined consume of Result<_DataTable, Error>(v224, v231);
    outlined destroy of Either<LogisticRegressionClassifier<Float, String>, FullyConnectedNetworkClassifier<Float, String>>((uint64_t)v226, &demangling cache variable for type metadata for Tensor?);
    (*(void (**)(unsigned char *, uint64_t))(v209 + 8))(v214, v213);
    outlined destroy of MLActivityClassifier.Configuration((uint64_t)v223, type metadata accessor for MLActivityClassifier.Configuration);
    outlined destroy of MLActivityClassifier.Configuration((uint64_t)v228, type metadata accessor for MLActivityClassifier.Model);
    (*(void (**)(unsigned char *, uint64_t))(v212 + 8))(v222, v219);
    uint64_t v84 = type metadata accessor for MLActivityClassifier.DataBatcher;
    uint64_t v85 = (uint64_t)v227;
    goto LABEL_3;
  }
  uint64_t v142 = (uint64_t)v230;
  uint64_t v143 = (uint64_t)v196;
  outlined init with copy of Tensor?((uint64_t)v226, (uint64_t)v196);
  uint64_t v144 = v216;
  if (__swift_getEnumTagSinglePayload(v143, 1, v216) == 1) {
    BUG();
  }
  uint64_t v145 = Tensor.scalars<A>(as:)(&type metadata for Double, &type metadata for Double, &protocol witness table for Double);
  v218(v143, v144);
  uint64_t v146 = v210;
  if (!v210) {
    BUG();
  }
  uint64_t v147 = *(void *)(v145 + 16);
  uint64_t v148 = specialized Array.index(_:offsetBy:limitedBy:)(0, (uint64_t)v210, v147);
  if ((v149 & 1) == 0) {
    uint64_t v147 = v148;
  }
  swift_bridgeObjectRetain(v142);
  uint64_t v150 = (uint64_t)v229;
  ML20MLActivityClassifierV08activityD10Prediction4from09perWindowF0SaySSGAA11MLDataTableV_SbtKFSSs10ArraySliceVySdGXEfU_SaySSGTf1cn_n = _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lF10Algorithms23ChunksOfCountCollectionVySaySdGG_SSs5NeverOTg5128_s8CreateML20MLActivityClassifierV08activityD10Prediction4from09perWindowF0SaySSGAA11MLDataTableV_SbtKFSSs10ArraySliceVySdGXEfU_SaySSGTf1cn_n(v145, (uint64_t)v146, v147, v142);
  swift_bridgeObjectRelease(v142);
  swift_bridgeObjectRelease(v145);
  if (v205)
  {
    outlined consume of Result<_DataTable, Error>(v224, v231);
    uint64_t v82 = ML20MLActivityClassifierV08activityD10Prediction4from09perWindowF0SaySSGAA11MLDataTableV_SbtKFSSs10ArraySliceVySdGXEfU_SaySSGTf1cn_n;
    goto LABEL_27;
  }
  uint64_t v229 = (unsigned char *)v150;
  uint64_t v82 = _swiftEmptyArrayStorage;
  uint64_t v220 = (void (*)(void **, uint64_t))_swiftEmptyArrayStorage;
  *(void *)&long long v216 = ML20MLActivityClassifierV08activityD10Prediction4from09perWindowF0SaySSGAA11MLDataTableV_SbtKFSSs10ArraySliceVySdGXEfU_SaySSGTf1cn_n[2];
  if (!(void)v216)
  {
    outlined consume of Result<_DataTable, Error>(v224, v231);
    swift_bridgeObjectRelease((_BYTE)ML20MLActivityClassifierV08activityD10Prediction4from09perWindowF0SaySSGAA11MLDataTableV_SbtKFSSs10ArraySliceVySdGXEfU_SaySSGTf1cn_n);
LABEL_27:
    uint64_t v169 = v219;
LABEL_28:
    outlined destroy of Either<LogisticRegressionClassifier<Float, String>, FullyConnectedNetworkClassifier<Float, String>>((uint64_t)v226, &demangling cache variable for type metadata for Tensor?);
    (*(void (**)(unsigned char *, uint64_t))(v209 + 8))(v214, v213);
    outlined destroy of MLActivityClassifier.Configuration((uint64_t)v223, type metadata accessor for MLActivityClassifier.Configuration);
    outlined destroy of MLActivityClassifier.Configuration((uint64_t)v228, type metadata accessor for MLActivityClassifier.Model);
    (*(void (**)(unsigned char *, uint64_t))(v212 + 8))(v222, v169);
    outlined destroy of MLActivityClassifier.Configuration((uint64_t)v227, type metadata accessor for MLActivityClassifier.DataBatcher);
    return v82;
  }
  swift_bridgeObjectRetain((_BYTE)ML20MLActivityClassifierV08activityD10Prediction4from09perWindowF0SaySSGAA11MLDataTableV_SbtKFSSs10ArraySliceVySdGXEfU_SaySSGTf1cn_n);
  uint64_t v230 = ML20MLActivityClassifierV08activityD10Prediction4from09perWindowF0SaySSGAA11MLDataTableV_SbtKFSSs10ArraySliceVySdGXEfU_SaySSGTf1cn_n;
  char v164 = ML20MLActivityClassifierV08activityD10Prediction4from09perWindowF0SaySSGAA11MLDataTableV_SbtKFSSs10ArraySliceVySdGXEfU_SaySSGTf1cn_n
       + 5;
  uint64_t v82 = 0;
  while (1)
  {
    uint64_t v165 = *(v164 - 1);
    uint64_t v166 = *v164;
    *(void *)&long long v198 = v82;
    *((void *)&v198 + 1) = v165;
    uint64_t v199 = v166;
    swift_bridgeObjectRetain(v166);
    uint64_t v167 = (uint64_t)v229;
    closure #2 in MLActivityClassifier.activityClassifierPrediction(from:perWindowPrediction:)((uint64_t *)&v198, (uint64_t)v227, (uint64_t)v222);
    uint64_t v229 = (unsigned char *)v167;
    if (v167) {
      break;
    }
    uint64_t v82 = (void *)((char *)v82 + 1);
    swift_bridgeObjectRelease(v166);
    specialized Array.append<A>(contentsOf:)(v172);
    v164 += 2;
    if ((void *)v216 == v82)
    {
      char v168 = (char)v230;
      swift_bridgeObjectRelease((_BYTE)v230);
      outlined consume of Result<_DataTable, Error>(v224, v231);
      swift_bridgeObjectRelease(v168);
      uint64_t v82 = v220;
      uint64_t v169 = v219;
      goto LABEL_28;
    }
  }
  char v170 = (char)v230;
  swift_bridgeObjectRelease((_BYTE)v230);
  swift_bridgeObjectRelease(v166);
  swift_bridgeObjectRelease((_BYTE)v220);
  outlined consume of Result<_DataTable, Error>(v224, v231);
  swift_bridgeObjectRelease(v170);
  outlined destroy of Either<LogisticRegressionClassifier<Float, String>, FullyConnectedNetworkClassifier<Float, String>>((uint64_t)v226, &demangling cache variable for type metadata for Tensor?);
  (*(void (**)(unsigned char *, uint64_t))(v209 + 8))(v214, v213);
  outlined destroy of MLActivityClassifier.Configuration((uint64_t)v223, type metadata accessor for MLActivityClassifier.Configuration);
  outlined destroy of MLActivityClassifier.Configuration((uint64_t)v228, type metadata accessor for MLActivityClassifier.Model);
  (*(void (**)(unsigned char *, uint64_t))(v212 + 8))(v222, v219);
  outlined destroy of MLActivityClassifier.Configuration((uint64_t)v227, type metadata accessor for MLActivityClassifier.DataBatcher);
  return v82;
}

uint64_t *MLActivityClassifier.predictions(from:perWindowPrediction:)(uint64_t a1, int a2, double a3, double a4)
{
  int v38 = a2;
  LOBYTE(v6) = *(unsigned char *)(a1 + 8);
  uint64_t v7 = &v33;
  int64_t v39 = *(void **)a1;
  uint64_t v33 = (uint64_t)v39;
  LOBYTE(v34) = v6;
  uint64_t v8 = *(int *)(type metadata accessor for MLActivityClassifier(0) + 36);
  uint64_t v32 = v5;
  unint64_t v9 = *(uint64_t *)((char *)v5 + v8);
  static _ValidationUtilities.validateTableFormat(table:context:columns:)((uint64_t)&v33, 0x2065727574616546, (void *)0xEC00000061746164, v9);
  if (!v4)
  {
    uint64_t v33 = (uint64_t)v39;
    LOBYTE(v34) = v6;
    LOBYTE(v35) = 1;
    static _ValidationUtilities.validateTableTypes(table:columns:type:)((uint64_t)&v33, v9, (char *)&v35, a3);
    uint64_t v35 = v39;
    char v36 = v6;
    LODWORD(v37) = v6;
    if ((_BYTE)v6)
    {
      uint64_t v10 = (uint64_t)v39;
      outlined copy of Result<_DataTable, Error>((uint64_t)v39, 1);
      outlined copy of Result<_DataTable, Error>(v10, 1);
      uint64_t v11 = tc_v1_flex_list_create(0);
      if (!v11) {
        BUG();
      }
      uint64_t v12 = v11;
      uint64_t v13 = type metadata accessor for CMLSequence();
      uint64_t v14 = swift_allocObject(v13, 25, 7);
      *(void *)(v14 + 16) = v12;
      *(unsigned char *)(v14 + 24) = 1;
    }
    else
    {
      uint64_t v10 = (uint64_t)v39;
      outlined copy of Result<_DataTable, Error>((uint64_t)v39, 0);
      outlined copy of Result<_DataTable, Error>(v10, 0);
      _DataTable.columnNames.getter(v10);
      uint64_t v14 = v31[1];
    }
    int64_t v39 = v31;
    uint64_t v33 = 0x5F6E6F6973736573;
    unint64_t v34 = 0xEA00000000006469;
    Swift::OpaquePointer v15 = alloca(24);
    __m128 v16 = alloca(32);
    uint64_t v32 = &v33;
    char v17 = specialized Sequence.contains(where:)((uint64_t (*)(unint64_t *))partial apply for specialized closure #1 in Sequence<>.contains(_:), (uint64_t)v31, v14);
    swift_release();
    if (v17)
    {
      char v18 = v37;
      outlined consume of Result<_DataTable, Error>(v10, v37);
      char v19 = v38;
    }
    else
    {
      int64_t v39 = 0;
      uint64_t v33 = v10;
      char v20 = v37;
      LOBYTE(v34) = v37;
      Swift::Int v21 = MLDataTable.size.getter();
      uint64_t v22 = specialized RandomAccessCollection<>.distance(from:to:)(0, v21);
      outlined consume of Result<_DataTable, Error>(v10, v20);
      uint64_t v33 = (uint64_t)specialized Array.init(repeating:count:)(0, v22);
      uint64_t v23 = alloca(24);
      int64_t v24 = alloca(32);
      uint64_t v32 = &v33;
      uint64_t ML14_UntypedColumnC_s5Error_pTgm5 = _ss6ResultOsRi_zrlE8catchingAByxq_Gxyq_YKXE_tcfC8CreateML14_UntypedColumnC_s5Error_pTgm5((void (*)(void *))partial apply for specialized closure #1 in MLUntypedColumn.init<A>(_:));
      LOBYTE(v22) = v26;
      swift_bridgeObjectRelease(v33);
      MLDataTable.willMutate()();
      uint64_t v37 = ML14_UntypedColumnC_s5Error_pTgm5;
      uint64_t v33 = ML14_UntypedColumnC_s5Error_pTgm5;
      char v27 = v22 & 1;
      LOBYTE(v34) = v27;
      MLDataTable.addImpl(newColumn:named:)((uint64_t)&v33, 0x5F6E6F6973736573, (void *)0xEA00000000006469);
      if (v36)
      {
        outlined consume of Result<_DataTable, Error>(v37, v27);
        char v18 = 1;
        uint64_t v10 = (uint64_t)v35;
      }
      else
      {
        uint64_t v10 = (uint64_t)v35;
        char v18 = 0;
        outlined copy of Result<_DataTable, Error>((uint64_t)v35, 0);
        _DataTable.columnNamesDidChange()();
        outlined consume of Result<_DataTable, Error>(v10, 0);
        outlined consume of Result<_DataTable, Error>(v37, v27);
      }
      char v19 = v38;
    }
    uint64_t v33 = v10;
    LOBYTE(v34) = v18;
    Swift::Int_optional v28 = MLActivityClassifier.activityClassifierPrediction(from:perWindowPrediction:)((uint64_t)&v33, v19 & 1, a3, a4);
    char v29 = v18;
    uint64_t v7 = v28;
    outlined consume of Result<_DataTable, Error>(v10, v29);
  }
  return v7;
}

void *closure #2 in MLActivityClassifier.activityClassifierPrediction(from:perWindowPrediction:)(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v46 = v4;
  uint64_t v36 = a3;
  uint64_t v44 = a2;
  uint64_t v40 = v3;
  uint64_t v34 = type metadata accessor for DataFrame.Row(0);
  uint64_t v35 = *(void *)(v34 - 8);
  int64_t v5 = *(void *)(v35 + 64);
  int v6 = alloca(v5);
  uint64_t v7 = alloca(v5);
  uint64_t v37 = type metadata accessor for DataFrame.Rows(0);
  uint64_t v38 = *(void *)(v37 - 8);
  int64_t v8 = *(void *)(v38 + 64);
  unint64_t v9 = alloca(v8);
  uint64_t v10 = alloca(v8);
  uint64_t v11 = *a1;
  uint64_t v42 = a1[1];
  uint64_t v12 = a1[2];
  uint64_t v13 = type metadata accessor for MLActivityClassifier.DataBatcher(0);
  uint64_t v14 = *(void *)(a2 + *(int *)(v13 + 40));
  if (!v14) {
    BUG();
  }
  if (v11 == 0x8000000000000000 && v14 == -1) {
    BUG();
  }
  uint64_t v43 = v12;
  uint64_t v45 = v13;
  unint64_t v41 = v11 % v14;
  uint64_t v39 = v11 / v14;
  uint64_t v15 = v44;
  DataFrame.rows.getter();
  DataFrame.Rows.subscript.getter(v39);
  (*(void (**)(uint64_t *, uint64_t))(v38 + 8))(&v33, v37);
  uint64_t v16 = *(int *)(v45 + 24);
  uint64_t v17 = *(void *)(v15 + v16);
  uint64_t v18 = *(void *)(v15 + v16 + 8);
  uint64_t v19 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [String]);
  DataFrame.Row.subscript.getter(v17, v18, v19);
  (*(void (**)(uint64_t *, uint64_t))(v35 + 8))(&v33, v34);
  if (v33)
  {
    uint64_t v20 = *(void *)(v33 + 16);
    swift_bridgeObjectRelease(v33);
    uint64_t v21 = *(int *)(v45 + 36);
    unint64_t v22 = *(void *)(v44 + v21) * v41;
    if (!is_mul_ok(*(void *)(v44 + v21), v41)) {
      BUG();
    }
    BOOL v23 = __OFSUB__(v20, v22);
    uint64_t v24 = v20 - v22;
    if (v23) {
      BUG();
    }
    if (v24 <= 0)
    {
      uint64_t result = _swiftEmptyArrayStorage;
    }
    else
    {
      uint64_t v25 = v43;
      swift_bridgeObjectRetain(v43);
      uint64_t result = specialized Array.init(repeating:count:)(v42, v25, v24);
    }
    *uint64_t v40 = result;
  }
  else
  {
    uint64_t v27 = lazy protocol witness table accessor for type MLCreateError and conformance MLCreateError();
    swift_allocError(&type metadata for MLCreateError, v27, 0, 0);
    v28._uint64_t countAndFlagsBits = 0x6C6562616CLL;
    v28._char object = (void *)0xE500000000000000;
    static MLCreateError.featureNotFound(feature:)(v28);
    return (void *)swift_willThrow(0x6C6562616CLL, 0xE500000000000000, v29, v30, v31, v32);
  }
  return result;
}

uint64_t specialized RandomAccessCollection<>.distance(from:to:)(uint64_t a1, uint64_t a2)
{
  return specialized RandomAccessCollection<>.distance(from:to:)(a1, a2, CMLDictionary.size.getter);
}

{
  uint64_t v2;
  uint64_t v3;

  uint64_t v2 = CMLSequence.size.getter();
  if (a1 < 0 || v2 < a1) {
    BUG();
  }
  uint64_t v3 = CMLSequence.size.getter();
  if (a2 < 0 || v3 < a2) {
    BUG();
  }
  return a2 - a1;
}

{
  Swift::Int v2;
  Swift::Int v3;

  uint64_t v2 = MLDataTable.size.getter();
  if (a1 < 0 || v2 < a1) {
    BUG();
  }
  uint64_t v3 = MLDataTable.size.getter();
  if (a2 < 0 || v3 < a2) {
    BUG();
  }
  return a2 - a1;
}

{
  return specialized RandomAccessCollection<>.distance(from:to:)(a1, a2, CMLSequence.size.getter);
}

{
  return specialized RandomAccessCollection<>.distance(from:to:)(a1, a2);
}

{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  swift_retain();
  uint64_t v2 = CMLSequence.size.getter();
  uint64_t v3 = specialized RandomAccessCollection<>.distance(from:to:)(0, v2, CMLSequence.size.getter);
  swift_release();
  if (a1 < 0 || v3 < a1) {
    BUG();
  }
  swift_retain();
  uint64_t v4 = CMLSequence.size.getter();
  int64_t v5 = specialized RandomAccessCollection<>.distance(from:to:)(0, v4, CMLSequence.size.getter);
  swift_release();
  if (a2 < 0 || v5 < a2) {
    BUG();
  }
  return a2 - a1;
}

uint64_t specialized RandomAccessCollection<>.distance(from:to:)(uint64_t a1, uint64_t a2, uint64_t (__cdecl *a3)())
{
  uint64_t v4 = a3();
  if (a1 < 0 || v4 < a1) {
    BUG();
  }
  uint64_t v5 = ((uint64_t (*)(uint64_t))a3)(a1);
  if (a2 < 0 || v5 < a2) {
    BUG();
  }
  return a2 - a1;
}

BOOL specialized static Array<A>.== infix(_:_:)(void *a1, void *a2)
{
  uint64_t v2 = a1[2];
  if (v2 != a2[2]) {
    return 0;
  }
  BOOL result = 1;
  if (!v2 || a1 == a2) {
    return result;
  }
  if (a1[4] != a2[4]) {
    return 0;
  }
  if (v2 == 1) {
    return result;
  }
  if (a1[5] != a2[5]) {
    return 0;
  }
  if (v2 != 2)
  {
    uint64_t v4 = v2 - 3;
    uint64_t v5 = v2 - 2;
    uint64_t v6 = 0;
    do
    {
      if (v5 == v6) {
        BUG();
      }
      BOOL result = a1[v6 + 6] == a2[v6 + 6];
      if (a1[v6 + 6] != a2[v6 + 6]) {
        break;
      }
    }
    while (v4 != v6++);
  }
  return result;
}

uint64_t specialized closure #1 in MLUntypedColumn.init<A>(_:)(uint64_t *a1, void *a2)
{
  uint64_t v4 = v2;
  uint64_t result = specialized closure #1 in MLUntypedColumn.init<A>(_:)(*a1);
  if (v3) {
    *a2 = v3;
  }
  else {
    *uint64_t v4 = result;
  }
  return result;
}

{
  uint64_t *v2;
  uint64_t v3;
  uint64_t *v4;
  uint64_t result;

  uint64_t v4 = v2;
  uint64_t result = specialized closure #1 in MLUntypedColumn.init<A>(_:)(*a1);
  if (v3) {
    *a2 = v3;
  }
  else {
    *uint64_t v4 = result;
  }
  return result;
}

{
  uint64_t *v2;
  uint64_t v3;
  uint64_t *v4;
  uint64_t result;

  uint64_t v4 = v2;
  uint64_t result = specialized closure #1 in MLUntypedColumn.init<A>(_:)(*a1);
  if (v3) {
    *a2 = v3;
  }
  else {
    *uint64_t v4 = result;
  }
  return result;
}

{
  uint64_t *v2;
  uint64_t v3;
  uint64_t *v4;
  uint64_t result;

  uint64_t v4 = v2;
  uint64_t result = specialized closure #1 in MLUntypedColumn.init<A>(_:)(*a1);
  if (v3) {
    *a2 = v3;
  }
  else {
    *uint64_t v4 = result;
  }
  return result;
}

{
  uint64_t *v2;
  uint64_t v3;
  uint64_t *v4;
  uint64_t result;

  uint64_t v4 = v2;
  uint64_t result = specialized closure #1 in MLUntypedColumn.init<A>(_:)(*a1);
  if (v3) {
    *a2 = v3;
  }
  else {
    *uint64_t v4 = result;
  }
  return result;
}

char specialized closure #1 in Sequence<>.contains(_:)(uint64_t *a1, uint64_t *a2)
{
  return specialized closure #1 in Sequence<>.contains(_:)(*a1, a1[1], *a2, a2[1]);
}

char partial apply for specialized closure #1 in Sequence<>.contains(_:)(uint64_t *a1)
{
  return specialized closure #1 in Sequence<>.contains(_:)(a1, *(uint64_t **)(v1 + 16));
}

uint64_t __swift_getEnumTagSinglePayload(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(*(void *)(a3 - 8) + 48))();
}

uint64_t outlined init with take of WeightedDataSample(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = type metadata accessor for WeightedDataSample(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v2 - 8) + 32))(a2, a1, v2);
  return a2;
}

uint64_t outlined init with take of LSTM.State?(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for LSTM.State?);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v2 - 8) + 32))(a2, a1, v2);
  return a2;
}

uint64_t outlined destroy of MLActivityClassifier.Configuration(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t v2 = a2(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t *initializeBufferWithCopyOfBuffer for MLImageClassifier.ModelParameters.ValidationData(uint64_t *__dst, uint64_t *__src, uint64_t a3)
{
  uint64_t v3 = __dst;
  uint64_t v4 = *(void *)(a3 - 8);
  int v5 = *(_DWORD *)(v4 + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v11 = *__src;
    *uint64_t v3 = *__src;
    uint64_t v3 = (uint64_t *)(v11 + ((v5 + 16) & ~v5));
    swift_retain();
  }
  else
  {
    int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload(__src, a3);
    if (EnumCaseMultiPayload == 2)
    {
      uint64_t v12 = *__src;
      *uint64_t v3 = *__src;
      swift_bridgeObjectRetain(v12);
      swift_storeEnumTagMultiPayload(v3, a3, 2);
    }
    else
    {
      if (EnumCaseMultiPayload == 1)
      {
        uint64_t v8 = type metadata accessor for MLImageClassifier.DataSource(0);
        int v9 = swift_getEnumCaseMultiPayload(__src, v8);
        if (v9 == 2)
        {
          uint64_t v13 = *__src;
          *uint64_t v3 = *__src;
          swift_bridgeObjectRetain(v13);
          uint64_t v18 = 2;
        }
        else
        {
          if (v9 != 1)
          {
            uint64_t v16 = type metadata accessor for URL(0);
            (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(void *)(v16 - 8) + 16))(__dst, __src, v16);
            uint64_t v15 = v8;
            uint64_t v14 = 0;
            goto LABEL_13;
          }
          uint64_t v10 = type metadata accessor for URL(0);
          (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(void *)(v10 - 8) + 16))(__dst, __src, v10);
          uint64_t v18 = 1;
        }
        uint64_t v14 = v18;
        __dst = v3;
        uint64_t v15 = v8;
LABEL_13:
        swift_storeEnumTagMultiPayload(__dst, v15, v14);
        swift_storeEnumTagMultiPayload(v3, a3, 1);
        return v3;
      }
      memcpy(__dst, __src, *(void *)(v4 + 64));
    }
  }
  return v3;
}

uint64_t destroy for MLImageClassifier.ModelParameters.ValidationData(void *a1, uint64_t a2)
{
  uint64_t result = swift_getEnumCaseMultiPayload(a1, a2);
  if (result == 2) {
    return swift_bridgeObjectRelease(*a1);
  }
  if (result != 1) {
    return result;
  }
  uint64_t v3 = type metadata accessor for MLImageClassifier.DataSource(0);
  uint64_t result = swift_getEnumCaseMultiPayload(a1, v3);
  if (result == 2) {
    return swift_bridgeObjectRelease(*a1);
  }
  if (result <= 1)
  {
    uint64_t v4 = type metadata accessor for URL(0);
    return (*(uint64_t (**)(void *, uint64_t))(*(void *)(v4 - 8) + 8))(a1, v4);
  }
  return result;
}

uint64_t *initializeWithCopy for MLImageClassifier.ModelParameters.ValidationData(uint64_t *__dst, uint64_t *__src, uint64_t a3)
{
  uint64_t v4 = __dst;
  int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload(__src, a3);
  if (EnumCaseMultiPayload == 2)
  {
    uint64_t v9 = *__src;
    *uint64_t v4 = *__src;
    swift_bridgeObjectRetain(v9);
    swift_storeEnumTagMultiPayload(v4, a3, 2);
  }
  else
  {
    if (EnumCaseMultiPayload == 1)
    {
      uint64_t v6 = type metadata accessor for MLImageClassifier.DataSource(0);
      int v7 = swift_getEnumCaseMultiPayload(__src, v6);
      if (v7 == 2)
      {
        uint64_t v10 = *__src;
        *uint64_t v4 = *__src;
        swift_bridgeObjectRetain(v10);
        uint64_t v15 = 2;
      }
      else
      {
        if (v7 != 1)
        {
          uint64_t v13 = type metadata accessor for URL(0);
          (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(void *)(v13 - 8) + 16))(__dst, __src, v13);
          uint64_t v12 = v6;
          uint64_t v11 = 0;
          goto LABEL_11;
        }
        uint64_t v8 = type metadata accessor for URL(0);
        (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(void *)(v8 - 8) + 16))(__dst, __src, v8);
        uint64_t v15 = 1;
      }
      uint64_t v11 = v15;
      __dst = v4;
      uint64_t v12 = v6;
LABEL_11:
      swift_storeEnumTagMultiPayload(__dst, v12, v11);
      swift_storeEnumTagMultiPayload(v4, a3, 1);
      return v4;
    }
    memcpy(__dst, __src, *(void *)(*(void *)(a3 - 8) + 64));
  }
  return v4;
}

uint64_t *assignWithCopy for MLImageClassifier.ModelParameters.ValidationData(uint64_t *__dst, uint64_t *__src, uint64_t a3)
{
  uint64_t v3 = __dst;
  if (__dst != __src)
  {
    outlined destroy of MLImageClassifier.ModelParameters.ValidationData((uint64_t)__dst, type metadata accessor for MLImageClassifier.ModelParameters.ValidationData);
    int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload(__src, a3);
    if (EnumCaseMultiPayload == 2)
    {
      uint64_t v9 = *__src;
      *uint64_t v3 = *__src;
      swift_bridgeObjectRetain(v9);
      swift_storeEnumTagMultiPayload(v3, a3, 2);
    }
    else
    {
      if (EnumCaseMultiPayload == 1)
      {
        uint64_t v6 = type metadata accessor for MLImageClassifier.DataSource(0);
        int v7 = swift_getEnumCaseMultiPayload(__src, v6);
        if (v7 == 2)
        {
          uint64_t v10 = *__src;
          *uint64_t v3 = *__src;
          swift_bridgeObjectRetain(v10);
          uint64_t v15 = 2;
        }
        else
        {
          if (v7 != 1)
          {
            uint64_t v13 = type metadata accessor for URL(0);
            (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(void *)(v13 - 8) + 16))(__dst, __src, v13);
            uint64_t v12 = v6;
            uint64_t v11 = 0;
            goto LABEL_12;
          }
          uint64_t v8 = type metadata accessor for URL(0);
          (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(void *)(v8 - 8) + 16))(__dst, __src, v8);
          uint64_t v15 = 1;
        }
        uint64_t v11 = v15;
        __dst = v3;
        uint64_t v12 = v6;
LABEL_12:
        swift_storeEnumTagMultiPayload(__dst, v12, v11);
        swift_storeEnumTagMultiPayload(v3, a3, 1);
        return v3;
      }
      memcpy(__dst, __src, *(void *)(*(void *)(a3 - 8) + 64));
    }
  }
  return v3;
}

uint64_t type metadata accessor for MLImageClassifier.ModelParameters.ValidationData(uint64_t a1)
{
  uint64_t result = type metadata singleton initialization cache for MLImageClassifier.ModelParameters.ValidationData;
  if (!type metadata singleton initialization cache for MLImageClassifier.ModelParameters.ValidationData) {
    return swift_getSingletonMetadata(a1, &nominal type descriptor for MLImageClassifier.ModelParameters.ValidationData);
  }
  return result;
}

void *initializeWithTake for MLImageClassifier.ModelParameters.ValidationData(void *__dst, void *__src, uint64_t a3)
{
  if (swift_getEnumCaseMultiPayload(__src, a3) == 1)
  {
    uint64_t v4 = type metadata accessor for MLImageClassifier.DataSource(0);
    int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload(__src, v4);
    if (EnumCaseMultiPayload == 1)
    {
      uint64_t v9 = type metadata accessor for URL(0);
      (*(void (**)(void *, void *, uint64_t))(*(void *)(v9 - 8) + 32))(__dst, __src, v9);
      uint64_t v8 = 1;
      uint64_t v7 = v4;
    }
    else
    {
      if (EnumCaseMultiPayload)
      {
        memcpy(__dst, __src, *(void *)(*(void *)(v4 - 8) + 64));
        goto LABEL_9;
      }
      uint64_t v6 = type metadata accessor for URL(0);
      (*(void (**)(void *, void *, uint64_t))(*(void *)(v6 - 8) + 32))(__dst, __src, v6);
      uint64_t v7 = v4;
      uint64_t v8 = 0;
    }
    swift_storeEnumTagMultiPayload(__dst, v7, v8);
LABEL_9:
    swift_storeEnumTagMultiPayload(__dst, a3, 1);
    return __dst;
  }
  memcpy(__dst, __src, *(void *)(*(void *)(a3 - 8) + 64));
  return __dst;
}

void *assignWithTake for MLImageClassifier.ModelParameters.ValidationData(void *__dst, void *__src, uint64_t a3)
{
  if (__dst != __src)
  {
    outlined destroy of MLImageClassifier.ModelParameters.ValidationData((uint64_t)__dst, type metadata accessor for MLImageClassifier.ModelParameters.ValidationData);
    if (swift_getEnumCaseMultiPayload(__src, a3) == 1)
    {
      uint64_t v4 = type metadata accessor for MLImageClassifier.DataSource(0);
      int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload(__src, v4);
      if (EnumCaseMultiPayload == 1)
      {
        uint64_t v9 = type metadata accessor for URL(0);
        (*(void (**)(void *, void *, uint64_t))(*(void *)(v9 - 8) + 32))(__dst, __src, v9);
        uint64_t v8 = 1;
        uint64_t v7 = v4;
      }
      else
      {
        if (EnumCaseMultiPayload)
        {
          memcpy(__dst, __src, *(void *)(*(void *)(v4 - 8) + 64));
          goto LABEL_10;
        }
        uint64_t v6 = type metadata accessor for URL(0);
        (*(void (**)(void *, void *, uint64_t))(*(void *)(v6 - 8) + 32))(__dst, __src, v6);
        uint64_t v7 = v4;
        uint64_t v8 = 0;
      }
      swift_storeEnumTagMultiPayload(__dst, v7, v8);
LABEL_10:
      swift_storeEnumTagMultiPayload(__dst, a3, 1);
      return __dst;
    }
    memcpy(__dst, __src, *(void *)(*(void *)(a3 - 8) + 64));
  }
  return __dst;
}

uint64_t type metadata completion function for MLImageClassifier.ModelParameters.ValidationData(uint64_t a1)
{
  v5[0] = &unk_347850;
  uint64_t result = type metadata accessor for MLImageClassifier.DataSource(319);
  if (v4 <= 0x3F)
  {
    v5[1] = *(void *)(result - 8) + 64;
    _OWORD v5[2] = (char *)&value witness table for Builtin.BridgeObject + 64;
    swift_initEnumMetadataMultiPayload(a1, 256, 3, v5, v2, v3);
    return 0;
  }
  return result;
}

Swift::tuple_training_OpaquePointer_validation_OpaquePointer __swiftcall __spoils<cf,zf,sf,of,pf,rax,rdx,rcx,rdi,rsi,r8,r9,r10,r11,r12,xmm0,xmm1,xmm2,xmm3,xmm4,xmm5,xmm6,xmm7> MLImageClassifier.ModelParameters.ValidationData.extractFilesByLabel(trainingFiles:)(Swift::OpaquePointer trainingFiles)
{
  uint64_t v17 = v1;
  int64_t v3 = *(void *)(*(void *)(type metadata accessor for MLImageClassifier.DataSource(0) - 8) + 64);
  unint64_t v4 = alloca(v3);
  int v5 = alloca(v3);
  uint64_t v16 = &v16;
  uint64_t v6 = type metadata accessor for MLImageClassifier.ModelParameters.ValidationData(0);
  int64_t v7 = *(void *)(*(void *)(v6 - 8) + 64);
  uint64_t v8 = alloca(v7);
  uint64_t v9 = alloca(v7);
  outlined init with copy of MLImageClassifier.ModelParameters.ValidationData(v2, (uint64_t)&v16);
  switch(swift_getEnumCaseMultiPayload(&v16, v6))
  {
    case 0u:
    case 3u:
      swift_bridgeObjectRetain(trainingFiles._rawValue);
      uint64_t v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [URL]);
      uint64_t v11 = (void *)Dictionary.init(dictionaryLiteral:)(_swiftEmptyArrayStorage, &type metadata for String, v10, &protocol witness table for String);
      goto LABEL_6;
    case 1u:
      rawValue = trainingFiles._rawValue;
      uint64_t v13 = (uint64_t)v16;
      outlined init with take of MLImageClassifier.DataSource((uint64_t)&v16, (uint64_t)v16);
      uint64_t v14 = v17;
      uint64_t v11 = (void *)static _ImageUtilities.getImageURLsAndLabels(from:)(v13);
      outlined destroy of MLImageClassifier.ModelParameters.ValidationData(v13, type metadata accessor for MLImageClassifier.DataSource);
      if (!v14) {
        swift_bridgeObjectRetain(trainingFiles._rawValue);
      }
      break;
    case 2u:
      uint64_t v11 = v16;
      swift_bridgeObjectRetain(trainingFiles._rawValue);
LABEL_6:
      rawValue = trainingFiles._rawValue;
      break;
  }
  result.training._rawValue = rawValue;
  result.validation._rawValue = v11;
  return result;
}

uint64_t outlined init with copy of MLImageClassifier.ModelParameters.ValidationData(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = type metadata accessor for MLImageClassifier.ModelParameters.ValidationData(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v2 - 8) + 16))(a2, a1, v2);
  return a2;
}

uint64_t outlined init with take of MLImageClassifier.DataSource(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = type metadata accessor for MLImageClassifier.DataSource(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v2 - 8) + 32))(a2, a1, v2);
  return a2;
}

uint64_t outlined destroy of MLImageClassifier.ModelParameters.ValidationData(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t v2 = a2(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

void *_sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSDy8CreateML11MLDataValueOAHG_SS_Sdts5NeverOTg503_s8d4ML11fg38OACSSSdIgnnod_AC3key_AC5valuetSS_Sdts5H117OIegnrzr_TR03_s8a74ML6_ModelC19makeDetectorMetrics10onTrainingAA08MLObjecteF0VSb_tFSS_SdtAA11cD10O_AItXEfU_Tf3nnnpf_nTf1cn_nTm(uint64_t a1)
{
  int64_t v1 = *(void *)(a1 + 16);
  if (!v1) {
    return _swiftEmptyArrayStorage;
  }
  uint64_t v2 = a1;
  specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v1, 0);
  int64_t v3 = _swiftEmptyArrayStorage;
  int64_t v4 = specialized Dictionary.startIndex.getter(a1);
  if (v6) {
    BUG();
  }
  uint64_t v7 = a1 + 64;
  int64_t v8 = v1 - 1;
  uint64_t v30 = a1 + 64;
  while (1)
  {
    if (v4 < 0 || v4 >= 1 << *(unsigned char *)(v2 + 32)) {
      BUG();
    }
    uint64_t v9 = *(void *)(v7 + 8 * ((unint64_t)v4 >> 6));
    uint64_t v10 = 1 << v4;
    if (!_bittest64(&v9, v4)) {
      BUG();
    }
    if (v5 != *(_DWORD *)(v2 + 36)) {
      BUG();
    }
    unint64_t v26 = (unint64_t)v4 >> 6;
    int v27 = v5;
    BOOL v23 = v3;
    int64_t v28 = v8;
    int64_t v24 = v4;
    uint64_t v11 = 24 * v4;
    uint64_t v12 = *(void *)(v2 + 48);
    uint64_t v13 = *(void *)(v2 + 56);
    uint64_t v14 = *(void **)(v12 + v11);
    uint64_t v32 = *(void **)(v12 + v11 + 8);
    char v31 = *(unsigned char *)(v12 + v11 + 16);
    uint64_t v15 = *(void **)(v13 + v11);
    uint64_t v16 = *(void **)(v13 + v11 + 8);
    char v17 = *(unsigned char *)(v13 + v11 + 16);
    outlined copy of MLDataValue(v14, v32, v31);
    outlined copy of MLDataValue(v15, v16, v17);
    outlined copy of MLDataValue(v14, v32, v31);
    outlined copy of MLDataValue(v15, v16, v17);
    outlined consume of MLDataValue(v14, v32, v31);
    uint64_t v25 = v15;
    outlined consume of MLDataValue(v15, v16, v17);
    if (v31 != 2) {
      BUG();
    }
    if (v17 != 1) {
      BUG();
    }
    swift_bridgeObjectRetain((_BYTE)v32);
    outlined consume of MLDataValue(v14, v32, 2);
    outlined consume of MLDataValue(v15, v16, 1);
    int64_t v3 = v23;
    unint64_t v18 = v23[2];
    unint64_t v19 = v18 + 1;
    if (v23[3] >> 1 <= v18)
    {
      specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v23[3] >= 2uLL, v18 + 1, 1);
      unint64_t v19 = v18 + 1;
      int64_t v3 = v23;
    }
    v3[2] = v19;
    uint64_t v20 = 3 * v18;
    v3[v20 + 4] = v14;
    v3[v20 + 5] = v32;
    v3[v20 + 6] = v25;
    uint64_t v2 = a1;
    uint64_t v21 = -1 << *(unsigned char *)(a1 + 32);
    if (v24 >= -v21) {
      BUG();
    }
    uint64_t v7 = v30;
    if ((v10 & *(void *)(v30 + 8 * v26)) == 0) {
      BUG();
    }
    if (v27 != *(_DWORD *)(a1 + 36)) {
      BUG();
    }
    int64_t v4 = _HashTable.occupiedBucket(after:)(v24, v30, ~v21);
    int64_t v8 = v28 - 1;
    if (!v28) {
      break;
    }
    int v5 = *(_DWORD *)(a1 + 36);
  }
  return v3;
}

void *_sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSay8CreateML16MLObjectDetectorV16ObjectAnnotationVG_SSs5NeverOTg503_s8d4ML16fg88V21makeAnnotatedFeatures18groundTruthObjects08detectedJ0SayAC0F18PredictionForLabelVGSays4AC16hI67VGG_AMtKFZSSAKcfu_33_5beb3c594ea6d4a9def05566b5b2e9caAKSSTf3nnnpk_nTf1cn_nTm(uint64_t a1)
{
  int64_t v1 = *(void *)(a1 + 16);
  if (v1)
  {
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v1, 0);
    uint64_t v2 = (uint64_t *)(a1 + 40);
    do
    {
      int64_t v6 = v1;
      uint64_t v7 = *(v2 - 1);
      unint64_t v3 = _swiftEmptyArrayStorage[2];
      unint64_t v9 = _swiftEmptyArrayStorage[3];
      int64_t v10 = v3 + 1;
      uint64_t v8 = *v2;
      swift_bridgeObjectRetain(*v2);
      if (v9 >> 1 <= v3) {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v9 >= 2, v10, 1);
      }
      _swiftEmptyArrayStorage[2] = v10;
      uint64_t v4 = 2 * v3;
      _swiftEmptyArrayStorage[v4 + 4] = v7;
      _swiftEmptyArrayStorage[v4 + 5] = v8;
      v2 += 7;
      int64_t v1 = v6 - 1;
    }
    while (v6 != 1);
  }
  return _swiftEmptyArrayStorage;
}

void *_sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSDySSSdG_Sds5NeverOTg5194_s8CreateML16MLObjectDetectorV10evaluation2on15detectedObjectsAA0cD7MetricsVSaySayAC16ObjectAnnotationVGG_ALtKFZSdSS3key_Sd5valuet_tcfu1_33_02b57a39088027ce0a04a12694145150SSAM_SdANtSdTf3nnnpk_nTf1cn_nTm(uint64_t a1)
{
  int64_t v1 = *(void *)(a1 + 16);
  if (!v1) {
    return _swiftEmptyArrayStorage;
  }
  uint64_t v2 = a1;
  specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v1, 0);
  unint64_t v3 = _swiftEmptyArrayStorage;
  int64_t v5 = specialized Dictionary.startIndex.getter(a1);
  if (v5 < 0 || v5 >= 1 << *(unsigned char *)(v2 + 32)) {
LABEL_23:
  }
    BUG();
  int v6 = v4;
  uint64_t v7 = v2 + 64;
  while (1)
  {
    int64_t v17 = v1;
    uint64_t v8 = *(void *)(v7 + 8 * ((unint64_t)v5 >> 6));
    if (!_bittest64(&v8, v5)) {
      BUG();
    }
    if (v6 != *(_DWORD *)(v2 + 36)) {
      BUG();
    }
    uint64_t v9 = *(void *)(*(void *)(v2 + 56) + 8 * v5);
    uint64_t v10 = v2;
    unint64_t v11 = v3[2];
    unint64_t v12 = v11 + 1;
    if (v3[3] >> 1 <= v11)
    {
      uint64_t v18 = v7;
      int v19 = v6;
      uint64_t v20 = v10;
      specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v3[3] >= 2uLL, v11 + 1, 1);
      unint64_t v12 = v11 + 1;
      uint64_t v10 = v20;
      int v6 = v19;
      uint64_t v7 = v18;
    }
    v3[2] = v12;
    v3[v11 + 4] = v9;
    char v13 = *(unsigned char *)(v10 + 32);
    if (v5 >= -(-1 << v13)) {
      BUG();
    }
    if (((1 << v5) & *(void *)(v7 + 8 * ((unint64_t)v5 >> 6))) == 0) {
      BUG();
    }
    uint64_t v2 = v10;
    if (v6 != *(_DWORD *)(v10 + 36)) {
      BUG();
    }
    uint64_t v21 = v3;
    uint64_t v14 = v7;
    uint64_t v15 = _HashTable.occupiedBucket(after:)(v5, v7, ~(-1 << v13));
    --v1;
    if (v17 == 1) {
      return v21;
    }
    int64_t v5 = v15;
    uint64_t v7 = v14;
    unint64_t v3 = v21;
    if (v15 >= 0)
    {
      int v6 = *(_DWORD *)(v2 + 36);
      if (v15 < 1 << *(unsigned char *)(v2 + 32)) {
        continue;
      }
    }
    goto LABEL_23;
  }
}

uint64_t MLObjectDetector.evaluation(on:)()
{
  uint64_t v2 = v1;
  unint64_t v3 = v0;
  uint64_t v33 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AnnotatedFeature<String, [MLObjectDetector.NormalizedAnnotation]>);
  uint64_t v4 = *(void *)(v33 - 8);
  int64_t v5 = *(void *)(v4 + 64);
  int v6 = alloca(v5);
  uint64_t v7 = alloca(v5);
  uint64_t v40 = v28;
  uint64_t v8 = *(int *)(type metadata accessor for MLObjectDetector(0) + 24);
  char v9 = *(unsigned char *)(v1 + v8);
  char v10 = *(unsigned char *)(v1 + v8 + 1);
  LOBYTE(v8) = *(unsigned char *)(v1 + v8 + 2);
  LOBYTE(v41) = v9;
  BYTE1(v41) = v10;
  BYTE2(v41) = v8;
  uint64_t v11 = 0;
  unint64_t v12 = MLObjectDetector.DataSource.gatherAnnotatedImages(annotationType:)((__int16 *)&v41);
  uint64_t v38 = v4;
  uint64_t v36 = v2;
  uint64_t v39 = v3;
  int64_t v13 = v12[2];
  if (v13)
  {
    unint64_t v41 = _swiftEmptyArrayStorage;
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v13, 0);
    uint64_t v14 = (*(unsigned __int8 *)(v38 + 80) + 32) & ~*(unsigned __int8 *)(v38 + 80);
    uint64_t v37 = v12;
    uint64_t v15 = (char *)v12 + v14;
    uint64_t v34 = *(void (**)(void *, char *, uint64_t))(v38 + 16);
    uint64_t v35 = *(void *)(v38 + 72);
    uint64_t v16 = v40;
    do
    {
      int64_t v31 = v13;
      int64_t v17 = v16;
      uint64_t v18 = v33;
      v34(v16, v15, v33);
      closure #1 in MLObjectDetector.evaluation(on:)();
      (*(void (**)(void *, uint64_t))(v38 + 8))(v17, v18);
      if (v11)
      {
        swift_release();
        BUG();
      }
      uint64_t v32 = v29;
      int v19 = v41;
      char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v41);
      uint64_t v30 = 0;
      if (!isUniquelyReferenced_nonNull_native)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v19[2] + 1, 1);
        int v19 = v41;
      }
      uint64_t v16 = v40;
      unint64_t v21 = v19[2];
      if (v19[3] >> 1 <= v21)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v19[3] >= 2uLL, v21 + 1, 1);
        uint64_t v16 = v40;
        int v19 = v41;
      }
      void v19[2] = v21 + 1;
      v19[v21 + 4] = v32;
      v15 += v35;
      int64_t v13 = v31 - 1;
      uint64_t v11 = v30;
    }
    while (v31 != 1);
    unint64_t v12 = v37;
  }
  else
  {
    int v19 = _swiftEmptyArrayStorage;
  }
  unint64_t v22 = alloca(24);
  BOOL v23 = alloca(32);
  uint64_t v29 = v36;
  unsigned __int8 MLComponents16AnnotatedFeatureVySSSay0D2ML16MLObjectDetectorV20NormalizedAnnotationVGGG_SayAK06ObjectL0VGsAE_pTg5 = _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSay18CreateMLComponents16AnnotatedFeatureVySSSay0D2ML16MLObjectDetectorV20NormalizedAnnotationVGGG_SayAK06ObjectL0VGsAE_pTg5((void (*)(uint64_t, uint64_t *))partial apply for closure #2 in MLObjectDetector.evaluation(on:), v28, (uint64_t)v12);
  if (v11)
  {
    swift_bridgeObjectRelease((_BYTE)v12);
    uint64_t result = swift_bridgeObjectRelease((_BYTE)v19);
    int v27 = v39;
    *uint64_t v39 = v11;
    *(_OWORD *)(v27 + 1) = 0;
    v27[3] = 0;
    *((unsigned char *)v27 + 32) = 1;
  }
  else
  {
    char v26 = MLComponents16AnnotatedFeatureVySSSay0D2ML16MLObjectDetectorV20NormalizedAnnotationVGGG_SayAK06ObjectL0VGsAE_pTg5;
    swift_bridgeObjectRelease((_BYTE)v12);
    static MLObjectDetector.evaluation(on:detectedObjects:)((char)v19, v26);
    swift_bridgeObjectRelease((_BYTE)v19);
    return swift_bridgeObjectRelease(v26);
  }
  return result;
}

void *closure #1 in MLObjectDetector.evaluation(on:)()
{
  uint64_t v16 = v0;
  uint64_t v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AnnotatedFeature<String, [MLObjectDetector.NormalizedAnnotation]>);
  AnnotatedFeature.annotation.getter(v1);
  uint64_t v2 = *(void *)(v10 + 16);
  if (v2)
  {
    unint64_t v3 = (unint64_t *)(v10 + 56);
    uint64_t v4 = _swiftEmptyArrayStorage;
    do
    {
      uint64_t v14 = *(v3 - 3);
      __m128 v12 = (__m128)*(v3 - 1);
      __m128 v11 = (__m128)*v3;
      __m128 v13 = _mm_mul_ps(v11, (__m128)xmmword_347880);
      uint64_t v15 = *(v3 - 2);
      swift_bridgeObjectRetain(v15);
      if (!swift_isUniquelyReferenced_nonNull_native(v4)) {
        uint64_t v4 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v4[2] + 1, 1, (uint64_t)v4);
      }
      unint64_t v5 = v4[2];
      unint64_t v6 = v5 + 1;
      if (v4[3] >> 1 <= v5)
      {
        uint64_t v8 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(v4[3] >= 2uLL, v5 + 1, 1, (uint64_t)v4);
        unint64_t v6 = v5 + 1;
        uint64_t v4 = v8;
      }
      v4[2] = v6;
      uint64_t v7 = 7 * v5;
      v4[v7 + 4] = v14;
      v4[v7 + 5] = v15;
      *(__m128d *)&v4[v7 + 6] = _mm_cvtps_pd(_mm_add_ps(v12, v13));
      *(__m128d *)&v4[v7 + 8] = _mm_cvtps_pd(*(__m64 *)v11.f32);
      v4[v7 + 10] = 0x3FF0000000000000;
      v3 += 4;
      --v2;
    }
    while (v2);
  }
  else
  {
    uint64_t v4 = _swiftEmptyArrayStorage;
  }
  swift_bridgeObjectRelease(v10);
  uint64_t result = v16;
  void *v16 = v4;
  return result;
}

void *closure #2 in MLObjectDetector.evaluation(on:)(uint64_t a1, uint64_t a2, void *a3)
{
  int v19 = a3;
  uint64_t v17 = v4;
  uint64_t v18 = a2;
  uint64_t v20 = v3;
  uint64_t v5 = type metadata accessor for URL(0);
  uint64_t v21 = *(void *)(v5 - 8);
  int64_t v6 = *(void *)(v21 + 64);
  uint64_t v7 = alloca(v6);
  uint64_t v8 = alloca(v6);
  uint64_t v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AnnotatedFeature<String, [MLObjectDetector.NormalizedAnnotation]>);
  AnnotatedFeature.feature.getter(v9);
  char v10 = v16;
  URL.init(fileURLWithPath:)(v15[1], v16);
  swift_bridgeObjectRelease(v10);
  uint64_t v11 = v17;
  __m128 v12 = MLObjectDetector.modelPredictions(from:)(v15);
  if (v11)
  {
    (*(void (**)(void *, uint64_t))(v21 + 8))(v15, v5);
    uint64_t result = v19;
    void *v19 = v11;
  }
  else
  {
    uint64_t v14 = v12;
    (*(void (**)(void *, uint64_t))(v21 + 8))(v15, v5);
    uint64_t result = v20;
    *uint64_t v20 = v14;
  }
  return result;
}

void *static MLObjectDetector.evaluation(on:detectedObjects:)(char a1, char a2)
{
  uint64_t v4 = v2;
  uint64_t result = static MLObjectDetector.makeAnnotatedFeatures(groundTruthObjects:detectedObjects:)(a1, a2);
  uint64_t v6 = v3;
  if (!v3)
  {
    uint64_t v7 = result;
    uint64_t v79 = result[2];
    uint64_t v81 = v4;
    if (v79)
    {
      uint64_t v80 = result + 4;
      uint64_t v8 = _swiftEmptyDictionarySingleton;
      uint64_t v104 = 0;
      uint64_t v87 = 0;
      unint64_t v9 = 0;
      uint64_t v82 = result;
      do
      {
        if (v9 >= v7[2]) {
          BUG();
        }
        uint64_t v89 = v8;
        uint64_t v10 = v80[4 * v9];
        uint64_t v11 = v80[4 * v9 + 1];
        uint64_t v96 = v80[4 * v9 + 2];
        uint64_t v88 = v6;
        uint64_t v12 = v80[4 * v9 + 3];
        swift_bridgeObjectRetain(v10);
        swift_bridgeObjectRetain(v11);
        swift_bridgeObjectRetain(v12);
        char v83 = v10;
        uint64_t v13 = v10;
        uint64_t v14 = v12;
        char v85 = v11;
        uint64_t v15 = static MLObjectDetector.evaluate(annotatedPredictionForLabel:)(v13, v11, v96, v12);
        uint64_t v6 = v88;
        char v16 = (char)v15;
        uint64_t v99 = v15[2];
        if (v99)
        {
          unint64_t v78 = v9;
          uint64_t v91 = v15;
          uint64_t v77 = v15[4];
          swift_bridgeObjectRetain(v14);
          _sxRi_zRi0_zlySaySdGIsegr_SgWOe((uint64_t)v104, 0);
          char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(_swiftEmptyDictionarySingleton);
          uint64_t v94 = v14;
          unint64_t v105 = specialized __RawDictionaryStorage.find<A>(_:)(v96, v14);
          BOOL v19 = (v18 & 1) == 0;
          BOOL v20 = __OFADD__(_swiftEmptyDictionarySingleton[2], v19);
          Swift::Int v21 = _swiftEmptyDictionarySingleton[2] + v19;
          if (v20) {
            BUG();
          }
          char v22 = v18;
          __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _NativeDictionary<String, [Double]>);
          if (_NativeDictionary.ensureUnique(isUnique:capacity:)(isUniquelyReferenced_nonNull_native, v21))
          {
            unint64_t v105 = specialized __RawDictionaryStorage.find<A>(_:)(v96, v14);
            if ((v22 & 1) != (v23 & 1)) {
              goto LABEL_72;
            }
          }
          swift_bridgeObjectRelease(0);
          unsigned __int8 v24 = _swiftEmptyDictionarySingleton;
          if ((v22 & 1) == 0)
          {
            _swiftEmptyDictionarySingleton[(v105 >> 6) + 8] |= 1 << v105;
            uint64_t v25 = _swiftEmptyDictionarySingleton[6];
            uint64_t v26 = 16 * v105;
            *(void *)(v25 + v26) = v96;
            *(void *)(v25 + v26 + 8) = v14;
            *(void *)(_swiftEmptyDictionarySingleton[7] + 8 * v105) = _swiftEmptyArrayStorage;
            uint64_t v27 = _swiftEmptyDictionarySingleton[2];
            swift_bridgeObjectRetain(_swiftEmptyDictionarySingleton);
            BOOL v20 = __OFADD__(1, v27);
            uint64_t v28 = v27 + 1;
            if (v20) {
              BUG();
            }
            _swiftEmptyDictionarySingleton[2] = v28;
            unsigned __int8 v24 = v14;
          }
          swift_bridgeObjectRetain(v24);
          uint64_t v29 = _swiftEmptyDictionarySingleton[7];
          swift_bridgeObjectRelease(_swiftEmptyDictionarySingleton);
          uint64_t v30 = *(void **)(v29 + 8 * v105);
          char v31 = swift_isUniquelyReferenced_nonNull_native(v30);
          *(void *)(v29 + 8 * v105) = v30;
          if (!v31)
          {
            uint64_t v30 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v30[2] + 1, 1, (uint64_t)v30);
            *(void *)(v29 + 8 * v105) = v30;
          }
          unint64_t v32 = v30[2];
          if (v30[3] >> 1 <= v32)
          {
            uint64_t v30 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(v30[3] >= 2uLL, v32 + 1, 1, (uint64_t)v30);
            *(void *)(v29 + 8 * v105) = v30;
          }
          v30[2] = v32 + 1;
          v30[v32 + 4] = v77;
          swift_bridgeObjectRelease(v94);
          swift_bridgeObjectRetain(v94);
          uint64_t v33 = 0;
          uint64_t v34 = v91;
          do
          {
            uint64_t v35 = v34[v33 + 4];
            if ((~v35 & 0x7FF0000000000000) != 0 || (v35 & 0xFFFFFFFFFFFFFLL) == 0)
            {
              uint64_t v106 = v34[v33 + 4];
              if (!swift_isUniquelyReferenced_nonNull_native(_swiftEmptyArrayStorage)) {
                specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, _swiftEmptyArrayStorage[2] + 1, 1);
              }
              unint64_t v36 = _swiftEmptyArrayStorage[2];
              unint64_t v37 = v36 + 1;
              if (_swiftEmptyArrayStorage[3] >> 1 <= v36)
              {
                specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(_swiftEmptyArrayStorage[3] >= 2uLL, v36 + 1, 1);
                unint64_t v37 = v36 + 1;
                uint64_t v35 = v106;
              }
              _swiftEmptyArrayStorage[2] = v37;
              _swiftEmptyArrayStorage[v36 + 4] = v35;
              uint64_t v34 = v91;
            }
            ++v33;
          }
          while (v99 != v33);
          swift_bridgeObjectRelease((_BYTE)v34);
          uint64_t v38 = _swiftEmptyArrayStorage[2];
          double v39 = 0.0;
          if (v38)
          {
            uint64_t v40 = 0;
            unint64_t v41 = v89;
            do
              double v39 = v39 + *(double *)&_swiftEmptyArrayStorage[v40++ + 4];
            while (v38 != v40);
          }
          else
          {
            unint64_t v41 = v89;
          }
          swift_release();
          _sxRi_zRi0_zlySaySdGIsegr_SgWOe((uint64_t)v87, 0);
          char v42 = swift_isUniquelyReferenced_nonNull_native(v41);
          uint64_t v107 = v41;
          unint64_t v100 = specialized __RawDictionaryStorage.find<A>(_:)(v96, v94);
          BOOL v44 = (v43 & 1) == 0;
          BOOL v20 = __OFADD__(v41[2], v44);
          Swift::Int v45 = v41[2] + v44;
          if (v20) {
            BUG();
          }
          char v46 = v43;
          if (_NativeDictionary.ensureUnique(isUnique:capacity:)(v42, v45))
          {
            unint64_t v100 = specialized __RawDictionaryStorage.find<A>(_:)(v96, v94);
            if ((v46 & 1) != (v47 & 1))
            {
LABEL_72:
              KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(&type metadata for String);
              BUG();
            }
          }
          swift_bridgeObjectRelease(0);
          char v48 = (char)v107;
          if ((v46 & 1) == 0)
          {
            v107[(v100 >> 6) + 8] |= 1 << v100;
            uint64_t v49 = v107[6];
            uint64_t v50 = 16 * v100;
            *(void *)(v49 + v50) = v96;
            *(void *)(v49 + v50 + 8) = v94;
            *(void *)(v107[7] + 8 * v100) = _swiftEmptyArrayStorage;
            uint64_t v51 = v107[2];
            swift_bridgeObjectRetain((_BYTE)v107);
            BOOL v20 = __OFADD__(1, v51);
            uint64_t v52 = v51 + 1;
            if (v20) {
              BUG();
            }
            v107[2] = v52;
            char v48 = v94;
          }
          swift_bridgeObjectRetain(v48);
          unint64_t v53 = v107[7];
          swift_bridgeObjectRelease((_BYTE)v107);
          uint64_t v54 = *(void *)(v53 + 8 * v100);
          char v55 = swift_isUniquelyReferenced_nonNull_native(v54);
          uint64_t v57 = (void *)v54;
          *(void *)(v53 + 8 * v100) = v54;
          if (!v55)
          {
            uint64_t v57 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(void *)(v54 + 16) + 1, 1, v54);
            *(void *)(v53 + 8 * v100) = v57;
          }
          unint64_t v58 = v57[2];
          unint64_t v59 = v57[3] >> 1;
          if (v59 <= v58)
          {
            uint64_t v57 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(v57[3] >= 2uLL, v58 + 1, 1, (uint64_t)v57);
            unint64_t v59 = v53;
            *(void *)(v53 + 8 * v100) = v57;
          }
          void v57[2] = v58 + 1;
          *(double *)&v57[v58 + 4] = v39 / (double)(int)v38;
          swift_bridgeObjectRelease_n(v94, 2, v56, v59, v57);
          swift_bridgeObjectRelease(v85);
          swift_bridgeObjectRelease(v83);
          uint64_t v104 = specialized thunk for @callee_guaranteed () -> (@owned [Double]);
          uint64_t v87 = specialized thunk for @callee_guaranteed () -> (@owned [Double]);
          uint64_t v8 = v107;
          uint64_t v6 = v88;
          uint64_t v7 = v82;
          unint64_t v9 = v78;
        }
        else
        {
          swift_bridgeObjectRelease(v14);
          swift_bridgeObjectRelease(v85);
          swift_bridgeObjectRelease(v83);
          swift_bridgeObjectRelease(v16);
          uint64_t v8 = v89;
          uint64_t v7 = v82;
        }
        ++v9;
      }
      while (v9 != v79);
      uint64_t v60 = v8;
      swift_bridgeObjectRelease((_BYTE)v7);
    }
    else
    {
      swift_bridgeObjectRelease((_BYTE)result);
      uint64_t v60 = _swiftEmptyDictionarySingleton;
      uint64_t v104 = 0;
      uint64_t v87 = 0;
    }
    swift_bridgeObjectRetain(_swiftEmptyDictionarySingleton);
    int64_t v61 = specialized _NativeDictionary.mapValues<A>(_:)((uint64_t)_swiftEmptyDictionarySingleton);
    swift_bridgeObjectRelease(_swiftEmptyDictionarySingleton);
    swift_bridgeObjectRetain((_BYTE)v60);
    uint64_t v95 = specialized _NativeDictionary.mapValues<A>(_:)((uint64_t)v60);
    char v90 = (char)v60;
    swift_bridgeObjectRelease((_BYTE)v60);
    uint64_t v84 = v61;
    ML16MLObjectDetectorV10evaluation2on15detectedObjectsAA0cD7MetricsVSaySayAC16ObjectAnnotationVGG_ALtKFZSdSS3key_Sd5valuet_tcfu1_33_02b57a39088027ce0a04a12694145150SSAM_SdANtSdTf3nnnpk_nTf1cn_nTm = _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSDySSSdG_Sds5NeverOTg5194_s8CreateML16MLObjectDetectorV10evaluation2on15detectedObjectsAA0cD7MetricsVSaySayAC16ObjectAnnotationVGG_ALtKFZSdSS3key_Sd5valuet_tcfu1_33_02b57a39088027ce0a04a12694145150SSAM_SdANtSdTf3nnnpk_nTf1cn_nTm((uint64_t)v61);
    uint64_t v63 = ML16MLObjectDetectorV10evaluation2on15detectedObjectsAA0cD7MetricsVSaySayAC16ObjectAnnotationVGG_ALtKFZSdSS3key_Sd5valuet_tcfu1_33_02b57a39088027ce0a04a12694145150SSAM_SdANtSdTf3nnnpk_nTf1cn_nTm;
    uint64_t v64 = ML16MLObjectDetectorV10evaluation2on15detectedObjectsAA0cD7MetricsVSaySayAC16ObjectAnnotationVGG_ALtKFZSdSS3key_Sd5valuet_tcfu1_33_02b57a39088027ce0a04a12694145150SSAM_SdANtSdTf3nnnpk_nTf1cn_nTm[2];
    if (v64)
    {
      uint64_t v65 = 0;
      unsigned int v92 = ML16MLObjectDetectorV10evaluation2on15detectedObjectsAA0cD7MetricsVSaySayAC16ObjectAnnotationVGG_ALtKFZSdSS3key_Sd5valuet_tcfu1_33_02b57a39088027ce0a04a12694145150SSAM_SdANtSdTf3nnnpk_nTf1cn_nTm;
      uint64_t v97 = ML16MLObjectDetectorV10evaluation2on15detectedObjectsAA0cD7MetricsVSaySayAC16ObjectAnnotationVGG_ALtKFZSdSS3key_Sd5valuet_tcfu1_33_02b57a39088027ce0a04a12694145150SSAM_SdANtSdTf3nnnpk_nTf1cn_nTm[2];
      do
      {
        uint64_t v66 = v63[v65 + 4];
        if ((~v66 & 0x7FF0000000000000) != 0 || (v66 & 0xFFFFFFFFFFFFFLL) == 0)
        {
          uint64_t v101 = v63[v65 + 4];
          if (!swift_isUniquelyReferenced_nonNull_native(_swiftEmptyArrayStorage)) {
            specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, _swiftEmptyArrayStorage[2] + 1, 1);
          }
          unint64_t v67 = _swiftEmptyArrayStorage[2];
          unint64_t v68 = v67 + 1;
          if (_swiftEmptyArrayStorage[3] >> 1 <= v67)
          {
            specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(_swiftEmptyArrayStorage[3] >= 2uLL, v67 + 1, 1);
            unint64_t v68 = v67 + 1;
            uint64_t v66 = v101;
          }
          _swiftEmptyArrayStorage[2] = v68;
          _swiftEmptyArrayStorage[v67 + 4] = v66;
          uint64_t v63 = v92;
          uint64_t v64 = v97;
        }
        ++v65;
      }
      while (v64 != v65);
    }
    swift_bridgeObjectRelease((_BYTE)v63);
    double v86 = specialized Sequence<>.mean()((uint64_t)_swiftEmptyArrayStorage);
    swift_release();
    int64_t v69 = _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSDySSSdG_Sds5NeverOTg5194_s8CreateML16MLObjectDetectorV10evaluation2on15detectedObjectsAA0cD7MetricsVSaySayAC16ObjectAnnotationVGG_ALtKFZSdSS3key_Sd5valuet_tcfu1_33_02b57a39088027ce0a04a12694145150SSAM_SdANtSdTf3nnnpk_nTf1cn_nTm((uint64_t)v95);
    uint64_t v70 = v69;
    uint64_t v71 = v69[2];
    int64_t v72 = _swiftEmptyArrayStorage;
    if (v71)
    {
      int64_t v72 = _swiftEmptyArrayStorage;
      uint64_t v73 = 0;
      uint64_t v93 = v69;
      uint64_t v98 = v69[2];
      do
      {
        uint64_t v74 = v70[v73 + 4];
        if ((~v74 & 0x7FF0000000000000) != 0 || (v74 & 0xFFFFFFFFFFFFFLL) == 0)
        {
          uint64_t v102 = v70[v73 + 4];
          if (!swift_isUniquelyReferenced_nonNull_native(v72)) {
            specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v72[2] + 1, 1);
          }
          unint64_t v75 = v72[2];
          int v76 = v72;
          if (v72[3] >> 1 <= v75)
          {
            specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v72[3] >= 2uLL, v75 + 1, 1);
            uint64_t v74 = v102;
            int v76 = v72;
          }
          v76[2] = v75 + 1;
          v76[v75 + 4] = v74;
          int64_t v72 = v76;
          uint64_t v70 = v93;
          uint64_t v71 = v98;
        }
        ++v73;
      }
      while (v71 != v73);
    }
    swift_bridgeObjectRelease((_BYTE)v70);
    swift_bridgeObjectRelease(_swiftEmptyDictionarySingleton);
    swift_bridgeObjectRelease(v90);
    double v103 = specialized Sequence<>.mean()((uint64_t)v72);
    swift_release();
    _sxRi_zRi0_zlySaySdGIsegr_SgWOe((uint64_t)v104, 0);
    _sxRi_zRi0_zlySaySdGIsegr_SgWOe((uint64_t)v87, 0);
    uint64_t result = (void *)v81;
    *(void *)uint64_t v81 = v95;
    *(void *)(v81 + 8) = v84;
    *(double *)(v81 + 16) = v103;
    *(double *)(v81 + 24) = v86;
    *(unsigned char *)(v81 + 32) = 0;
  }
  return result;
}

uint64_t MLObjectDetector.evaluation(on:imageColumn:annotationColumn:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, double a6)
{
  uint64_t v22 = a4;
  uint64_t v25 = a3;
  uint64_t v26 = v6;
  uint64_t v24 = v7;
  uint64_t v27 = a5;
  uint64_t v8 = *(void *)a1;
  char v9 = *(unsigned char *)(a1 + 8);
  uint64_t v28 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<String>);
  uint64_t inited = (void *)swift_initStackObject(v28, v19);
  inited[2] = 1;
  inited[3] = 2;
  uint64_t v23 = a2;
  inited[4] = a2;
  char v11 = v25;
  inited[5] = v25;
  uint64_t v31 = v8;
  uint64_t v29 = v8;
  char v34 = v9;
  char v30 = v9;
  swift_bridgeObjectRetain(v11);
  static _ValidationUtilities.validateTableFormat(table:context:columns:)((uint64_t)&v29, 0x4C52556567616D49, (void *)0xE800000000000000, (uint64_t)inited);
  uint64_t v29 = v31;
  char v30 = v34;
  uint64_t v12 = (void *)swift_initStackObject(v28, v20);
  v12[2] = 1;
  v12[3] = 2;
  uint64_t v13 = v22;
  v12[4] = v22;
  char v14 = v27;
  v12[5] = v27;
  swift_bridgeObjectRetain(v14);
  static _ValidationUtilities.validateTableFormat(table:context:columns:)((uint64_t)&v29, 0x697461746F6E6E41, (void *)0xEA00000000006E6FLL, (uint64_t)v12);
  swift_setDeallocating(v12);
  specialized _ContiguousArrayStorage.__deallocating_deinit();
  swift_setDeallocating(inited);
  specialized _ContiguousArrayStorage.__deallocating_deinit();
  uint64_t v29 = v31;
  char v30 = v34;
  uint64_t v15 = (void *)swift_initStackObject(v28, v21);
  void v15[2] = 1;
  void v15[3] = 2;
  v15[4] = v23;
  char v16 = v25;
  v15[5] = v25;
  char v32 = 2;
  char v33 = 3;
  swift_bridgeObjectRetain(v16);
  static _ValidationUtilities.validateTableTypes(table:featureColumns:featureType:labelColumn:labelType:)(&v29, (unint64_t)v15, &v32, v13, v27, &v33, a6);
  swift_setDeallocating(v15);
  specialized _ContiguousArrayStorage.__deallocating_deinit();
  uint64_t v29 = v31;
  char v30 = v34;
  uint64_t v17 = _Model.evaluation(from:)((uint64_t)&v29);
  static MLObjectDetector.extractMetrics(from:)(v17, a6);
  return swift_release();
}

void *static MLObjectDetector.makeAnnotatedFeatures(groundTruthObjects:detectedObjects:)(char a1, char a2)
{
  uint64_t v3 = v2;
  swift_bridgeObjectRetain(a1);
  swift_bridgeObjectRetain(a2);
  uint64_t v4 = specialized Zip2Sequence.Iterator.next()();
  if (!v4)
  {
    uint64_t v52 = _swiftEmptyArrayStorage;
    goto LABEL_39;
  }
  uint64_t v6 = v4;
  uint64_t v7 = v5;
  uint64_t v52 = _swiftEmptyArrayStorage;
  do
  {
    uint64_t v49 = v6;
    ML16MLObjectDetectorV16ObjectAnnotationVG_SSs5NeverOTg503_s8d4ML16fg88V21makeAnnotatedFeatures18groundTruthObjects08detectedJ0SayAC0F18PredictionForLabelVGSays4AC16hI67VGG_AMtKFZSSAKcfu_33_5beb3c594ea6d4a9def05566b5b2e9caAKSSTf3nnnpk_nTf1cn_nTm = _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSay8CreateML16MLObjectDetectorV16ObjectAnnotationVG_SSs5NeverOTg503_s8d4ML16fg88V21makeAnnotatedFeatures18groundTruthObjects08detectedJ0SayAC0F18PredictionForLabelVGSays4AC16hI67VGG_AMtKFZSSAKcfu_33_5beb3c594ea6d4a9def05566b5b2e9caAKSSTf3nnnpk_nTf1cn_nTm(v6);
    uint64_t v9 = specialized Set.init<A>(_:)((uint64_t)ML16MLObjectDetectorV16ObjectAnnotationVG_SSs5NeverOTg503_s8d4ML16fg88V21makeAnnotatedFeatures18groundTruthObjects08detectedJ0SayAC0F18PredictionForLabelVGSays4AC16hI67VGG_AMtKFZSSAKcfu_33_5beb3c594ea6d4a9def05566b5b2e9caAKSSTf3nnnpk_nTf1cn_nTm);
    uint64_t v10 = _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSay8CreateML16MLObjectDetectorV16ObjectAnnotationVG_SSs5NeverOTg503_s8d4ML16fg88V21makeAnnotatedFeatures18groundTruthObjects08detectedJ0SayAC0F18PredictionForLabelVGSays4AC16hI67VGG_AMtKFZSSAKcfu_33_5beb3c594ea6d4a9def05566b5b2e9caAKSSTf3nnnpk_nTf1cn_nTm(v7);
    uint64_t v11 = specialized Set.union<A>(_:)((uint64_t)v10, v9);
    uint64_t v12 = 1 << *(unsigned char *)(v11 + 32);
    uint64_t v13 = ~(-1 << v12);
    if (v12 >= 64) {
      uint64_t v13 = -1;
    }
    uint64_t v53 = v11;
    unint64_t v14 = *(void *)(v11 + 56) & v13;
    int64_t v51 = (unint64_t)(v12 + 63) >> 6;
    int64_t v15 = 0;
    uint64_t v46 = v7;
    while (1)
    {
      if (v14)
      {
        uint64_t v16 = v3;
        _BitScanForward64(&v17, v14);
        uint64_t v48 = (v14 - 1) & v14;
        int64_t v47 = v15;
        unint64_t v18 = v17 | (v15 << 6);
        uint64_t v19 = v49;
        goto LABEL_19;
      }
      BOOL v20 = __OFADD__(1, v15);
      int64_t v21 = v15 + 1;
      uint64_t v19 = v49;
      if (v20) {
        BUG();
      }
      if (v21 >= v51) {
        goto LABEL_36;
      }
      unint64_t v22 = *(void *)(v53 + 8 * v21 + 56);
      if (!v22) {
        break;
      }
LABEL_18:
      _BitScanForward64(&v24, v22);
      uint64_t v16 = v3;
      uint64_t v48 = v22 & (v22 - 1);
      int64_t v47 = v21;
      unint64_t v18 = v24 + (v21 << 6);
LABEL_19:
      uint64_t v25 = *(void *)(v53 + 48);
      uint64_t v26 = 16 * v18;
      uint64_t v27 = *(void *)(v25 + v26);
      uint64_t v28 = *(void *)(v25 + v26 + 8);
      swift_bridgeObjectRetain_n(v28, 2);
      swift_bridgeObjectRetain(v19);
      uint64_t v50 = specialized _ArrayProtocol.filter(_:)(v19, v27, v28);
      swift_bridgeObjectRetain(v28);
      swift_bridgeObjectRetain(v46);
      uint64_t v43 = v27;
      uint64_t v44 = v28;
      Swift::Int v45 = specialized _ArrayProtocol.filter(_:)(v46, v27, v28);
      uint64_t v3 = v16;
      int64_t v29 = v50[2];
      if (v29)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v29, 0);
        char v30 = (char)v50;
        int64_t v31 = _swiftEmptyArrayStorage[2];
        uint64_t v32 = 32 * v31 + 48;
        char v33 = (long long *)(v50 + 8);
        do
        {
          unint64_t v34 = v31;
          long long v35 = *(v33 - 1);
          long long v36 = *v33;
          ++v31;
          if (_swiftEmptyArrayStorage[3] >> 1 <= v34)
          {
            specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(_swiftEmptyArrayStorage[3] >= 2uLL, v31, 1);
            char v30 = (char)v50;
          }
          _swiftEmptyArrayStorage[2] = v31;
          *(_OWORD *)((char *)&_swiftEmptyArrayStorage[-2] + v32) = v35;
          *(_OWORD *)((char *)_swiftEmptyArrayStorage + v32) = v36;
          v32 += 32;
          char v33 = (long long *)((char *)v33 + 56);
          --v29;
        }
        while (v29);
        swift_bridgeObjectRelease(v30);
        uint64_t v3 = v16;
      }
      else
      {
        swift_bridgeObjectRelease((_BYTE)v50);
      }
      if (!swift_isUniquelyReferenced_nonNull_native(v52)) {
        uint64_t v52 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v52[2] + 1, 1, (uint64_t)v52);
      }
      unint64_t v37 = v52[2];
      if (v52[3] >> 1 <= v37) {
        uint64_t v52 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(v52[3] >= 2uLL, v37 + 1, 1, (uint64_t)v52);
      }
      v52[2] = v37 + 1;
      uint64_t v38 = 4 * v37;
      v52[v38 + 4] = v45;
      v52[v38 + 5] = _swiftEmptyArrayStorage;
      v52[v38 + 6] = v43;
      v52[v38 + 7] = v44;
      LOBYTE(v7) = v46;
      int64_t v15 = v47;
      unint64_t v14 = v48;
    }
    int64_t v23 = v21 + 1;
    if (v21 + 1 >= v51) {
      goto LABEL_36;
    }
    unint64_t v22 = *(void *)(v53 + 8 * v21 + 64);
    if (v22) {
      goto LABEL_17;
    }
    int64_t v23 = v21 + 2;
    if (v21 + 2 >= v51) {
      goto LABEL_36;
    }
    unint64_t v22 = *(void *)(v53 + 8 * v21 + 72);
    if (v22) {
      goto LABEL_17;
    }
    int64_t v23 = v21 + 3;
    if (v21 + 3 >= v51) {
      goto LABEL_36;
    }
    unint64_t v22 = *(void *)(v53 + 8 * v21 + 80);
    if (v22)
    {
LABEL_17:
      int64_t v21 = v23;
      goto LABEL_18;
    }
    v21 += 3;
    while (1)
    {
      BOOL v20 = __OFADD__(1, v21++);
      if (v20) {
        BUG();
      }
      if (v21 >= v51) {
        break;
      }
      unint64_t v22 = *(void *)(v53 + 8 * v21 + 56);
      if (v22) {
        goto LABEL_18;
      }
    }
LABEL_36:
    swift_bridgeObjectRelease(v49);
    swift_release();
    swift_bridgeObjectRelease(v7);
    uint64_t v6 = specialized Zip2Sequence.Iterator.next()();
    uint64_t v7 = v39;
  }
  while (v6);
LABEL_39:
  swift_bridgeObjectRelease(a1);
  swift_bridgeObjectRelease(a2);
  return v52;
}

void *specialized _ArrayProtocol.filter(_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3 = a3;
  uint64_t v4 = a1 + 80;
  uint64_t v19 = -*(void *)(a1 + 16);
  uint64_t v5 = 0;
  uint64_t v25 = _swiftEmptyArrayStorage;
LABEL_2:
  uint64_t v6 = 56 * v5;
  uint64_t v7 = v5 + 1;
  uint64_t v8 = (void *)(v4 + v6);
  while (v7 + v19 != 1)
  {
    if ((unint64_t)(v7 - 1) >= *(void *)(a1 + 16)) {
      BUG();
    }
    uint64_t v9 = *(v8 - 6);
    uint64_t v10 = *(v8 - 5);
    long long v17 = *((_OWORD *)v8 - 2);
    long long v18 = *((_OWORD *)v8 - 1);
    uint64_t v20 = *v8;
    if (v9 == a2 && v10 == v3)
    {
      uint64_t v9 = a2;
      uint64_t v23 = v3;
      uint64_t v11 = v7;
LABEL_10:
      uint64_t v21 = v11;
      swift_bridgeObjectRetain(v23);
      uint64_t v13 = v25;
      if (!swift_isUniquelyReferenced_nonNull_native(v25))
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v25[2] + 1, 1);
        uint64_t v13 = v25;
      }
      unint64_t v14 = v13[2];
      uint64_t v3 = a3;
      if (v13[3] >> 1 <= v14)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v13[3] >= 2uLL, v14 + 1, 1);
        uint64_t v3 = a3;
        uint64_t v13 = v25;
      }
      v13[2] = v14 + 1;
      uint64_t v15 = 7 * v14;
      v13[v15 + 4] = v9;
      v13[v15 + 5] = v23;
      *(_OWORD *)&v13[v15 + 6] = v17;
      *(_OWORD *)&v13[v15 + 8] = v18;
      uint64_t v25 = v13;
      v13[v15 + 10] = v20;
      uint64_t v4 = a1 + 80;
      uint64_t v5 = v21;
      goto LABEL_2;
    }
    uint64_t v11 = v7++;
    v8 += 7;
    uint64_t v23 = v10;
    char v12 = _stringCompareWithSmolCheck(_:_:expecting:)(v9, v10, a2, v3, 0);
    uint64_t v3 = a3;
    if (v12) {
      goto LABEL_10;
    }
  }
  swift_bridgeObjectRelease(v3);
  swift_bridgeObjectRelease(a1);
  return v25;
}

void *static MLObjectDetector.evaluate(annotatedPredictionForLabel:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v31 = a4;
  uint64_t v32 = a2;
  uint64_t v5 = specialized _copySequenceToContiguousArray<A>(_:)(0.5, 1.0, 0.05);
  uint64_t v33 = a1;
  uint64_t v6 = *(void *)(v5 + 16);
  if (*(void *)(a1 + 16))
  {
    if (v6)
    {
      uint64_t v35 = v4;
      uint64_t v7 = _swiftEmptyArrayStorage;
      unint64_t v8 = 0;
      uint64_t v36 = v5;
      uint64_t v34 = v6;
      do
      {
        if (v8 >= *(void *)(v5 + 16)) {
          BUG();
        }
        uint64_t v38 = v7;
        *(void *)&long long v37 = *(void *)(v5 + 8 * v8 + 32);
        uint64_t v9 = v33;
        swift_bridgeObjectRetain(v33);
        uint64_t v10 = v32;
        swift_bridgeObjectRetain(v32);
        uint64_t v11 = v31;
        swift_bridgeObjectRetain(v31);
        MLObjectDetector.PrecisionRecallCurve.init(annotatedPredictionForLabel:iouThreshold:)(v9, v10, *(CGFloat *)&v37, v12, v11);
        uint64_t v13 = *(void *)(v30 + 16);
        if (v13)
        {
          __m128d v14 = 0;
          uint64_t v15 = 0;
          long long v16 = 0;
          __m128d v17 = 0;
          long long v18 = v38;
          do
          {
            __m128d v19 = (__m128d)*(unint64_t *)(v30 + 8 * v15 + 32);
            __m128d v20 = _mm_cmple_sd(v17, v19);
            __m128d v17 = _mm_or_pd(_mm_andn_pd(v20, v14), _mm_and_pd(v19, v20));
            ++v15;
            *(double *)&long long v16 = *(double *)&v16 + v17.f64[0];
            __m128d v14 = v17;
          }
          while (v13 != v15);
        }
        else
        {
          long long v16 = 0;
          long long v18 = v38;
        }
        long long v37 = v16;
        uint64_t v38 = *(void **)(v29[4] + 16);
        outlined release of MLObjectDetector.PrecisionRecallCurve(v29);
        char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v18);
        uint64_t v22 = v34;
        if (!isUniquelyReferenced_nonNull_native) {
          long long v18 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v18[2] + 1, 1, (uint64_t)v18);
        }
        double v23 = *(double *)&v37;
        unint64_t v24 = v18[2];
        uint64_t v25 = v18;
        if (v18[3] >> 1 <= v24)
        {
          uint64_t v27 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(v18[3] >= 2uLL, v24 + 1, 1, (uint64_t)v18);
          double v23 = *(double *)&v37;
          uint64_t v25 = v27;
        }
        uint64_t v5 = v36;
        ++v8;
        double v26 = v23 / (double)(int)v38;
        v25[2] = v24 + 1;
        uint64_t v7 = v25;
        *(double *)&v25[v24 + 4] = v26;
      }
      while (v8 != v22);
      swift_release();
    }
    else
    {
      swift_release();
      return _swiftEmptyArrayStorage;
    }
    return v7;
  }
  else
  {
    swift_release();
    return specialized Array.init(repeating:count:)(v6, 0.0);
  }
}

void *specialized thunk for @callee_guaranteed () -> (@owned [Double])()
{
  void *result = &_swiftEmptyArrayStorage;
  return result;
}

double specialized Sequence<>.mean()(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 16);
  if (!v1) {
    return NAN;
  }
  double v2 = 0.0;
  for (uint64_t i = 0; i != v1; ++i)
    double v2 = v2 + *(double *)(a1 + 8 * i + 32);
  return v2 / (double)(int)v1;
}

uint64_t closure #2 in static MLObjectDetector.evaluation(on:detectedObjects:)(uint64_t *a1)
{
  double v2 = v1;
  uint64_t v15 = *(void *)(*a1 + 16);
  if (v15)
  {
    uint64_t v14 = *a1;
    swift_bridgeObjectRetain(*a1);
    uint64_t v3 = v14;
    for (uint64_t i = 0; i != v15; ++i)
    {
      uint64_t v5 = *(void *)(v3 + 8 * i + 32);
      if ((~v5 & 0x7FF0000000000000) != 0 || (v5 & 0xFFFFFFFFFFFFFLL) == 0)
      {
        uint64_t v13 = *(void *)(v3 + 8 * i + 32);
        if (!swift_isUniquelyReferenced_nonNull_native(_swiftEmptyArrayStorage)) {
          specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, _swiftEmptyArrayStorage[2] + 1, 1);
        }
        unint64_t v6 = _swiftEmptyArrayStorage[2];
        unint64_t v7 = v6 + 1;
        uint64_t v3 = v14;
        if (_swiftEmptyArrayStorage[3] >> 1 <= v6)
        {
          specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(_swiftEmptyArrayStorage[3] >= 2uLL, v6 + 1, 1);
          unint64_t v7 = v6 + 1;
          uint64_t v5 = v13;
          uint64_t v3 = v14;
        }
        _swiftEmptyArrayStorage[2] = v7;
        _swiftEmptyArrayStorage[v6 + 4] = v5;
      }
    }
    swift_bridgeObjectRelease(v3);
  }
  uint64_t v8 = _swiftEmptyArrayStorage[2];
  if (v8)
  {
    double v9 = 0.0;
    for (uint64_t j = 0; j != v8; ++j)
      double v9 = v9 + *(double *)&_swiftEmptyArrayStorage[j + 4];
    uint64_t result = swift_release();
    double v12 = v9 / (double)(int)v8;
  }
  else
  {
    uint64_t result = swift_release();
    double v12 = NAN;
  }
  double *v2 = v12;
  return result;
}

uint64_t MLObjectDetectorMetrics.init(averagePrecision:meanAveragePrecision:)(uint64_t a1, uint64_t a2, double a3, double a4)
{
  *(void *)uint64_t result = a1;
  *(void *)(result + 8) = a2;
  *(double *)(result + 16) = a3;
  *(double *)(result + 24) = a4;
  *(unsigned char *)(result + 32) = 0;
  return result;
}

uint64_t static MLObjectDetector.extractMetrics(from:)(uint64_t a1, double a2)
{
  uint64_t v4 = v2;
  uint64_t v5 = *(void *)(a1 + 16);
  if (tc_v1_variant_is_parameters(v5))
  {
    uint64_t result = specialized handling<A, B>(_:_:)(v5);
    if (!v3)
    {
      uint64_t v7 = result;
      unint64_t v68 = (uint64_t *)v4;
      if (!result) {
        BUG();
      }
      uint64_t v8 = type metadata accessor for CMLParameters();
      uint64_t inited = swift_initStackObject(v8, v65);
      *(void *)(inited + 16) = v7;
      uint64_t v10 = CMLParameters.featureValue(for:)(59);
      uint64_t v85 = inited;
      specialized handling<A, B>(_:_:)(*(void *)(v10 + 16));
      double v69 = a2;
      swift_release();
      uint64_t v13 = CMLParameters.featureValue(for:)(60);
      specialized handling<A, B>(_:_:)(*(void *)(v13 + 16));
      double v70 = a2;
      swift_release();
      uint64_t v14 = Dictionary.init(dictionaryLiteral:)(_swiftEmptyArrayStorage, &type metadata for String, &type metadata for Double, &protocol witness table for String);
      uint64_t v15 = CMLParameters.featureValue(for:)(57);
      uint64_t v84 = v14;
      uint64_t v16 = specialized handling<A, B>(_:_:)(*(void *)(v15 + 16));
      if (!v16) {
        BUG();
      }
      swift_release();
      uint64_t v72 = type metadata accessor for CMLDictionary();
      uint64_t v17 = swift_initStackObject(v72, v66);
      *(void *)(v17 + 16) = v16;
      uint64_t v80 = v17;
      uint64_t v18 = CMLDictionary.size.getter();
      if (v18 < 0) {
        BUG();
      }
      if (v18)
      {
        uint64_t v19 = 0;
        uint64_t v75 = v18;
        do
        {
          if (v18 == v19) {
            BUG();
          }
          uint64_t v71 = v19;
          uint64_t v20 = CMLDictionary.keyAndValue(at:)(v19);
          uint64_t v22 = v21;
          Swift::String v23 = CMLFeatureValue.stringValue()();
          if (v24)
          {
            swift_errorRelease(v24);
            swift_release();
            swift_release();
          }
          else
          {
            uint64_t countAndFlagsBits = v23._countAndFlagsBits;
            char object = v23._object;
            uint64_t v76 = v20;
            uint64_t v77 = v22;
            specialized handling<A, B>(_:_:)(*(void *)(v22 + 16));
            uint64_t v78 = v25;
            double v26 = (void *)v84;
            LOBYTE(v73) = swift_isUniquelyReferenced_nonNull_native(v84);
            uint64_t v79 = v26;
            unint64_t v27 = specialized __RawDictionaryStorage.find<A>(_:)(countAndFlagsBits, (uint64_t)object);
            LOBYTE(v82) = v28;
            BOOL v29 = (v28 & 1) == 0;
            BOOL v30 = __OFADD__(v26[2], v29);
            Swift::Int v31 = v26[2] + v29;
            if (v30) {
              BUG();
            }
            __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _NativeDictionary<String, Double>);
            if (_NativeDictionary.ensureUnique(isUnique:capacity:)(v73, v31))
            {
              unint64_t v27 = specialized __RawDictionaryStorage.find<A>(_:)(countAndFlagsBits, (uint64_t)object);
              if ((v82 & 1) != (v32 & 1))
              {
LABEL_51:
                KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(&type metadata for String);
                BUG();
              }
            }
            uint64_t v33 = v79;
            uint64_t v84 = (uint64_t)v79;
            if (v82)
            {
              *(void *)(v79[7] + 8 * v27) = v78;
              char v34 = (char)object;
            }
            else
            {
              v79[(v27 >> 6) + 8] |= 1 << v27;
              uint64_t v35 = v33[6];
              uint64_t v36 = 16 * v27;
              *(void *)(v35 + v36) = countAndFlagsBits;
              char v34 = (char)object;
              *(void *)(v35 + v36 + 8) = object;
              *(void *)(v33[7] + 8 * v27) = v78;
              uint64_t v37 = v33[2];
              BOOL v30 = __OFADD__(1, v37);
              uint64_t v38 = v37 + 1;
              if (v30) {
                BUG();
              }
              long long v33[2] = v38;
              swift_bridgeObjectRetain(v34);
            }
            swift_release();
            swift_release();
            swift_bridgeObjectRelease(v34);
            swift_bridgeObjectRelease(0);
          }
          uint64_t v19 = v71 + 1;
          uint64_t v18 = v75;
        }
        while (v75 != v71 + 1);
      }
      uint64_t v39 = Dictionary.init(dictionaryLiteral:)(_swiftEmptyArrayStorage, &type metadata for String, &type metadata for Double, &protocol witness table for String);
      uint64_t v40 = CMLParameters.featureValue(for:)(58);
      uint64_t v41 = specialized handling<A, B>(_:_:)(*(void *)(v40 + 16));
      if (!v41) {
        BUG();
      }
      swift_release();
      uint64_t v42 = swift_initStackObject(v72, v67);
      *(void *)(v42 + 16) = v41;
      uint64_t v74 = v42;
      uint64_t v43 = CMLDictionary.size.getter();
      uint64_t countAndFlagsBits = v43;
      if (v43 < 0) {
        BUG();
      }
      uint64_t v82 = v39;
      if (v43)
      {
        uint64_t v44 = 0;
        uint64_t v45 = countAndFlagsBits;
        do
        {
          if (v45 == v44) {
            BUG();
          }
          uint64_t v71 = v44;
          uint64_t v46 = CMLDictionary.keyAndValue(at:)(v44);
          uint64_t v48 = v47;
          Swift::String v49 = CMLFeatureValue.stringValue()();
          char object = v49._object;
          if (v50)
          {
            swift_errorRelease(v50);
            swift_release();
            swift_release();
            uint64_t v45 = countAndFlagsBits;
          }
          else
          {
            uint64_t v75 = v49._countAndFlagsBits;
            uint64_t v77 = v46;
            uint64_t v78 = v48;
            specialized handling<A, B>(_:_:)(*(void *)(v48 + 16));
            uint64_t v73 = v51;
            uint64_t v52 = (void *)v82;
            LOBYTE(v72) = swift_isUniquelyReferenced_nonNull_native(v82);
            uint64_t v79 = v52;
            unint64_t v53 = specialized __RawDictionaryStorage.find<A>(_:)(v75, (uint64_t)object);
            LOBYTE(v76) = v54;
            BOOL v55 = (v54 & 1) == 0;
            BOOL v30 = __OFADD__(v52[2], v55);
            Swift::Int v56 = v52[2] + v55;
            if (v30) {
              BUG();
            }
            __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _NativeDictionary<String, Double>);
            Swift::Bool v57 = _NativeDictionary.ensureUnique(isUnique:capacity:)(v72, v56);
            unint64_t v58 = object;
            if (v57)
            {
              unint64_t v53 = specialized __RawDictionaryStorage.find<A>(_:)(v75, (uint64_t)object);
              if ((v76 & 1) != (v59 & 1)) {
                goto LABEL_51;
              }
            }
            uint64_t v60 = v79;
            uint64_t v82 = (uint64_t)v79;
            if (v76)
            {
              *(void *)(v79[7] + 8 * v53) = v73;
            }
            else
            {
              v79[(v53 >> 6) + 8] |= 1 << v53;
              uint64_t v61 = v60[6];
              uint64_t v62 = 16 * v53;
              *(void *)(v61 + v62) = v75;
              *(void *)(v61 + v62 + 8) = v58;
              *(void *)(v60[7] + 8 * v53) = v73;
              uint64_t v63 = v60[2];
              BOOL v30 = __OFADD__(1, v63);
              uint64_t v64 = v63 + 1;
              if (v30) {
                BUG();
              }
              v60[2] = v64;
              swift_bridgeObjectRetain((_BYTE)v58);
            }
            uint64_t v45 = countAndFlagsBits;
            swift_release();
            swift_release();
            swift_bridgeObjectRelease((_BYTE)v58);
            swift_bridgeObjectRelease(0);
          }
          uint64_t v44 = v71 + 1;
        }
        while (v45 != v71 + 1);
      }
      swift_release();
      swift_release();
      swift_release();
      uint64_t result = (uint64_t)v68;
      uint64_t *v68 = v84;
      *(void *)(result + 8) = v82;
      *(double *)(result + 16) = v69;
      *(double *)(result + 24) = v70;
      *(unsigned char *)(result + 32) = 0;
    }
  }
  else
  {
    uint64_t v11 = lazy protocol witness table accessor for type MLCreateError and conformance MLCreateError();
    uint64_t result = swift_allocError(&type metadata for MLCreateError, v11, 0, 0);
    *(void *)uint64_t v12 = 0xD000000000000026;
    *(void *)(v12 + 8) = "mean_average_precision_50" + 0x8000000000000000;
    *(_OWORD *)(v12 + 16) = 0;
    *(_OWORD *)(v12 + 32) = 0;
    *(unsigned char *)(v12 + 48) = 0;
    *(void *)uint64_t v4 = result;
    *(_OWORD *)(v4 + 8) = 0;
    *(void *)(v4 + 24) = 0;
    *(unsigned char *)(v4 + 32) = 1;
  }
  return result;
}

void *MLObjectDetector.PrecisionRecallCurve.init(annotatedPredictionForLabel:iouThreshold:)(uint64_t a1, uint64_t a2, CGFloat a3, uint64_t a4, uint64_t a5)
{
  v65.CGFloat width = a3;
  uint64_t v7 = a2;
  CGFloat v8 = *(double *)&a1;
  uint64_t v60 = v5;
  unint64_t v53 = _swiftEmptyArrayStorage;
  char v54 = _swiftEmptyArrayStorage;
  *(void *)&long long v55 = _swiftEmptyArrayStorage;
  *(void *)&long long v70 = _swiftEmptyArrayStorage;
  *((void *)&v55 + 1) = _swiftEmptyArrayStorage;
  *(void *)&rect.origin.CGFloat x = a1;
  swift_bridgeObjectRetain_n(a1, 2);
  specialized MutableCollection<>.sort(by:)(&rect);
  *(void *)&v62.origin.CGFloat x = a5;
  swift_bridgeObjectRelease(a1);
  CGFloat x = rect.origin.x;
  int64_t v10 = *(void *)(*(void *)&rect.origin.x + 16);
  if (v10)
  {
    v67.origin.CGFloat x = v8;
    *(void *)&v62.size.CGFloat width = a2;
    *(void *)&rect.origin.CGFloat x = _swiftEmptyArrayStorage;
    *(CGFloat *)&long long v70 = x;
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v10, 0);
    CGFloat v11 = rect.origin.x;
    int64_t v12 = *(void *)(*(void *)&rect.origin.x + 16);
    uint64_t v13 = 32 * v12 + 48;
    uint64_t v14 = (_OWORD *)(*(void *)&x + 64);
    do
    {
      unint64_t v15 = v12;
      CGSize v16 = (CGSize)*(v14 - 1);
      __m128d v17 = *(__m128d *)v14;
      rect.origin.CGFloat x = v11;
      unint64_t v18 = *(void *)(*(void *)&v11 + 24);
      ++v12;
      if (v18 >> 1 <= v15)
      {
        v67.size = v16;
        __m128d v66 = v17;
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v18 >= 2, v12, 1);
        CGFloat v11 = rect.origin.x;
      }
      *(void *)(*(void *)&v11 + 16) = v12;
      *(CGSize *)(*(void *)&v11 + v13 - 16) = v16;
      *(__m128d *)(*(void *)&v11 + v13) = v17;
      v13 += 32;
      uint64_t v14 = (_OWORD *)((char *)v14 + 56);
      --v10;
    }
    while (v10);
    *(CGFloat *)&long long v70 = v11;
    swift_release();
    uint64_t v7 = *(void *)&v62.size.width;
    LOBYTE(v8) = LOBYTE(v67.origin.x);
  }
  else
  {
    swift_release();
  }
  uint64_t v50 = v70;
  swift_bridgeObjectRetain(v70);
  swift_bridgeObjectRetain(v7);
  swift_bridgeObjectRelease(LOBYTE(v8));
  uint64_t v51 = v7;
  swift_bridgeObjectRelease(LOBYTE(v62.origin.x));
  CGFloat width = v65.width;
  uint64_t v19 = MLObjectDetector.PrecisionRecallCurve.buildMatchingIndices(sampleBoxes:referenceBoxes:setPrediction:)(v70, v7, 1);
  swift_bridgeObjectRelease(v70);
  swift_bridgeObjectRelease(v7);
  swift_bridgeObjectRelease((_BYTE)v53);
  uint64_t v61 = v19;
  unint64_t v53 = v19;
  uint64_t v20 = v70;
  uint64_t v21 = *(void *)(v7 + 16);
  swift_bridgeObjectRetain(v7);
  swift_bridgeObjectRetain(v70);
  uint64_t v22 = specialized Array.init(repeating:count:)(0, 1, v21);
  uint64_t v56 = *(void *)(v7 + 16);
  if (!v56)
  {
    swift_bridgeObjectRelease(v7);
    char v39 = v70;
    goto LABEL_35;
  }
  uint64_t v23 = *(void *)(v70 + 16);
  double v63 = width;
  uint64_t v58 = v7 + 32;
  swift_bridgeObjectRetain(v7);
  char v59 = (CGSize *)(v70 + 48);
  unint64_t v24 = 0;
  uint64_t v25 = v22;
  uint64_t v64 = v7;
  uint64_t v57 = v70;
  do
  {
    if (v24 >= *(void *)(v7 + 16)) {
      BUG();
    }
    if (v23)
    {
      uint64_t v71 = v25;
      unint64_t v68 = v24;
      long long v70 = *(_OWORD *)(v58 + 32 * v24);
      CGSize v65 = *(CGSize *)(v58 + 32 * v24 + 16);
      swift_bridgeObjectRetain(v20);
      double v69 = 0.0;
      double v26 = v59;
      uint64_t v27 = 0;
      uint64_t v28 = 0;
      do
      {
        CGPoint v29 = (CGPoint)v26[-1];
        CGSize v30 = *v26;
        rect.origin = (CGPoint)v70;
        rect.size = v65;
        v62.origin = v29;
        v48.origin = v29;
        v62.size = v30;
        v48.size = v30;
        r2.size = v30;
        r2.origin = v29;
        r1.size = v65;
        r1.origin = (CGPoint)v70;
        CGRectIntersection(&v47, r1, r2);
        CGRect v67 = v47;
        CGRect rect = v47;
        CGPoint v31 = 0;
        if (!CGRectIsNull(v47))
        {
          CGRect rect = v67;
          v66.f64[0] = CGRectGetWidth(v67);
          CGRect rect = v67;
          v32.f64[1] = v67.origin.y;
          v32.f64[0] = CGRectGetHeight(v67) * v66.f64[0];
          CGPoint v31 = (CGPoint)_mm_and_pd(v32, (__m128d)xmmword_347890);
        }
        v67.origin = v31;
        rect.origin = (CGPoint)v70;
        rect.size = v65;
        v33.height = *((CGFloat *)&v70 + 1);
        r1a.size = v65;
        r1a.origin = (CGPoint)v70;
        v33.CGFloat width = CGRectGetWidth(r1a);
        v67.size = v33;
        rect.origin = (CGPoint)v70;
        rect.size = v65;
        v33.height = *((CGFloat *)&v70 + 1);
        r1b.size = v65;
        r1b.origin = (CGPoint)v70;
        v33.CGFloat width = CGRectGetHeight(r1b);
        __m128d v66 = (__m128d)v33;
        CGRect rect = v62;
        v33.height = v62.origin.y;
        v33.CGFloat width = CGRectGetWidth(v62);
        CGSize v49 = v33;
        CGRect rect = v62;
        v33.height = v62.origin.y;
        v33.CGFloat width = CGRectGetHeight(v62);
        __m128d v34 = _mm_and_pd(_mm_mul_pd(_mm_unpacklo_pd(v66, (__m128d)v33), _mm_unpacklo_pd((__m128d)v67.size, (__m128d)v49)), (__m128d)xmmword_347890);
        double v35 = _mm_hadd_pd(v34, v34).f64[0] - v67.origin.x;
        if (v35 <= 0.0) {
          double v36 = 0.0;
        }
        else {
          double v36 = v67.origin.x / v35;
        }
        if (v36 > v69)
        {
          double v69 = v36;
          uint64_t v28 = v27;
        }
        ++v27;
        v26 += 2;
      }
      while (v23 != v27);
      uint64_t v20 = v57;
      swift_bridgeObjectRelease(v57);
      if (v69 <= v63)
      {
        uint64_t v7 = v64;
        uint64_t v25 = v71;
        unint64_t v24 = v68;
        goto LABEL_31;
      }
      char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v71);
      uint64_t v7 = v64;
      if (!isUniquelyReferenced_nonNull_native)
      {
LABEL_33:
        uint64_t v25 = specialized _ArrayBuffer._consumeAndCreateNew()((uint64_t)v71);
        goto LABEL_28;
      }
    }
    else
    {
      if (v63 >= 0.0) {
        goto LABEL_31;
      }
      unint64_t v68 = v24;
      uint64_t v71 = v25;
      uint64_t v28 = 0;
      if (!swift_isUniquelyReferenced_nonNull_native(v25)) {
        goto LABEL_33;
      }
      uint64_t v28 = 0;
    }
    uint64_t v25 = v71;
LABEL_28:
    unint64_t v24 = v68;
    if (v68 >= v25[2]) {
      BUG();
    }
    uint64_t v38 = 2 * v68;
    v25[v38 + 4] = v28;
    LOBYTE(v25[v38 + 5]) = 0;
LABEL_31:
    ++v24;
  }
  while (v24 != v56);
  uint64_t v22 = v25;
  swift_bridgeObjectRelease(v20);
  swift_bridgeObjectRelease(v7);
  char v39 = v7;
LABEL_35:
  swift_bridgeObjectRelease(v39);
  swift_bridgeObjectRelease((_BYTE)v54);
  CGFloat v40 = width;
  long long v41 = v55;
  uint64_t result = v60;
  *uint64_t v60 = v20;
  result[1] = v7;
  *((CGFloat *)result + 2) = v40;
  result[3] = v61;
  result[4] = v22;
  *(_OWORD *)(result + 5) = v41;
  return result;
}

void *MLObjectDetector.PrecisionRecallCurve.buildMatchingIndices(sampleBoxes:referenceBoxes:setPrediction:)(uint64_t a1, uint64_t a2, int a3)
{
  __m128d v66 = v3;
  int v61 = a3;
  uint64_t v62 = a2;
  uint64_t v4 = *(void *)(a1 + 16);
  if (!v4) {
    return _swiftEmptyArrayStorage;
  }
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Int?);
  uint64_t v5 = (void *)static Array._allocateBufferUninitialized(minimumCapacity:)(v4);
  _OWORD v5[2] = v4;
  unint64_t v6 = v5 + 4;
  uint64_t v7 = v4;
  do
  {
    *unint64_t v6 = 0;
    *((unsigned char *)v6 + 8) = 1;
    v6 += 2;
    --v7;
  }
  while (v7);
  uint64_t v8 = *(void *)(v62 + 16);
  double v63 = *((double *)v66 + 2);
  uint64_t v55 = a1 + 32;
  uint64_t v57 = a1;
  swift_bridgeObjectRetain(a1);
  uint64_t v56 = (CGSize *)(v62 + 48);
  unint64_t v9 = 0;
  uint64_t v64 = v4;
  do
  {
    unint64_t v68 = v9;
    if (!v8)
    {
      if (v63 >= 0.0) {
        goto LABEL_41;
      }
      uint64_t v14 = 0;
      if (swift_isUniquelyReferenced_nonNull_native(v5))
      {
        uint64_t v14 = 0;
        goto LABEL_21;
      }
LABEL_43:
      uint64_t v5 = specialized _ArrayBuffer._consumeAndCreateNew()((uint64_t)v5);
      goto LABEL_21;
    }
    double v69 = v5;
    CGPoint v67 = *(CGPoint *)(v55 + 32 * v9);
    CGSize v60 = *(CGSize *)(v55 + 32 * v9 + 16);
    swift_bridgeObjectRetain(v62);
    CGSize v10 = v60;
    CGPoint v11 = v67;
    double v65 = 0.0;
    int64_t v12 = v56;
    uint64_t v13 = 0;
    uint64_t v14 = 0;
    do
    {
      CGPoint v15 = (CGPoint)v12[-1];
      CGSize v16 = *v12;
      rect.origin = v11;
      rect.size = v10;
      v54.origin = v15;
      v52.origin = v15;
      v54.size = v16;
      v52.size = v16;
      r2.size = v16;
      r2.origin = v15;
      r1.size = v10;
      r1.origin = v11;
      CGRectIntersection(&v45, r1, r2);
      CGRect v59 = v45;
      CGRect rect = v45;
      CGPoint v17 = 0;
      if (!CGRectIsNull(v45))
      {
        CGRect rect = v59;
        v58.CGFloat width = CGRectGetWidth(v59);
        CGRect rect = v59;
        v18.f64[1] = v59.origin.y;
        v18.f64[0] = CGRectGetHeight(v59) * v58.width;
        CGPoint v17 = (CGPoint)_mm_and_pd(v18, (__m128d)xmmword_347890);
      }
      v59.origin = v17;
      rect.origin = v67;
      rect.size = v60;
      v19.height = v67.y;
      r1a.size = v60;
      r1a.origin = v67;
      v19.CGFloat width = CGRectGetWidth(r1a);
      v59.size = v19;
      rect.origin = v67;
      rect.size = v60;
      v19.height = v67.y;
      r1b.size = v60;
      r1b.origin = v67;
      v19.CGFloat width = CGRectGetHeight(r1b);
      CGSize v58 = v19;
      CGRect rect = v54;
      v19.height = v54.origin.y;
      v19.CGFloat width = CGRectGetWidth(v54);
      CGSize v53 = v19;
      CGRect rect = v54;
      v19.height = v54.origin.y;
      v19.CGFloat width = CGRectGetHeight(v54);
      __m128d v20 = _mm_and_pd(_mm_mul_pd(_mm_unpacklo_pd((__m128d)v58, (__m128d)v19), _mm_unpacklo_pd((__m128d)v59.size, (__m128d)v53)), (__m128d)xmmword_347890);
      double v21 = _mm_hadd_pd(v20, v20).f64[0] - v59.origin.x;
      if (v21 <= 0.0) {
        double v22 = 0.0;
      }
      else {
        double v22 = v59.origin.x / v21;
      }
      CGPoint v11 = v67;
      CGSize v10 = v60;
      if (v22 > v65)
      {
        double v65 = v22;
        uint64_t v14 = v13;
      }
      ++v13;
      v12 += 2;
    }
    while (v8 != v13);
    swift_bridgeObjectRelease(v62);
    uint64_t v4 = v64;
    if (v65 <= v63)
    {
      uint64_t v5 = v69;
      unint64_t v9 = v68;
      goto LABEL_41;
    }
    uint64_t v5 = v69;
    if (!swift_isUniquelyReferenced_nonNull_native(v69)) {
      goto LABEL_43;
    }
LABEL_21:
    unint64_t v9 = v68;
    if (v68 >= v5[2]) {
      BUG();
    }
    uint64_t v23 = 2 * v68;
    v5[v23 + 4] = v14;
    LOBYTE(v5[v23 + 5]) = 0;
    if (v61)
    {
      double v69 = v5;
      unint64_t v24 = (char *)*((void *)v66 + 5);
      uint64_t v25 = *((void *)v24 + 2);
      if (!v25) {
        goto LABEL_30;
      }
      if (*((void *)v24 + 4) != v14)
      {
        if (v25 != 1)
        {
          uint64_t v26 = 5;
          do
          {
            uint64_t v27 = v26 - 4 + 1;
            if (__OFADD__(1, v26 - 4)) {
              BUG();
            }
            if (*(void *)&v24[8 * v26] == v14) {
              goto LABEL_39;
            }
            ++v26;
          }
          while (v27 != v25);
        }
LABEL_30:
        if (!swift_isUniquelyReferenced_nonNull_native(*((void *)v66 + 5))) {
          unint64_t v24 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v25 + 1, 1, (uint64_t)v24);
        }
        unint64_t v28 = *((void *)v24 + 2);
        unint64_t v29 = *((void *)v24 + 3);
        *(void *)&CGFloat x = v28 + 1;
        if (v29 >> 1 <= v28)
        {
          *(void *)&v67.CGFloat x = v28 + 1;
          uint64_t v38 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(v29 >= 2, v28 + 1, 1, (uint64_t)v24);
          CGFloat x = v67.x;
          unint64_t v24 = v38;
        }
        *((CGFloat *)v24 + 2) = x;
        *(void *)&v24[8 * v28 + 32] = v14;
        CGPoint v31 = v66;
        *((void *)v66 + 5) = v24;
        v67.CGFloat x = *((CGFloat *)v31 + 3);
        __m128d v32 = v69;
        swift_bridgeObjectRetain((_BYTE)v69);
        swift_bridgeObjectRelease(LOBYTE(v67.x));
        *((void *)v31 + 3) = v32;
        uint64_t v33 = *((void *)v31 + 4);
        uint64_t v34 = *((void *)v31 + 6);
        long long v46 = *v31;
        double v47 = v63;
        CGRect v48 = v32;
        uint64_t v49 = v33;
        uint64_t v50 = v24;
        uint64_t v35 = v34;
        uint64_t v51 = v34;
        v67.CGFloat x = MLObjectDetector.PrecisionRecallCurve.precision.getter();
        if (swift_isUniquelyReferenced_nonNull_native(v35))
        {
          uint64_t v4 = v64;
          double v36 = (void *)v35;
        }
        else
        {
          double v36 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(void *)(v35 + 16) + 1, 1, v35);
          uint64_t v4 = v64;
        }
        unint64_t v37 = v36[2];
        unint64_t v9 = v68;
        if (v36[3] >> 1 <= v37)
        {
          char v39 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(v36[3] >= 2uLL, v37 + 1, 1, (uint64_t)v36);
          unint64_t v9 = v68;
          double v36 = v39;
        }
        long long v36[2] = v37 + 1;
        v36[v37 + 4] = *(void *)&v67.x;
        *((void *)v66 + 6) = v36;
      }
LABEL_39:
      uint64_t v5 = v69;
    }
LABEL_41:
    ++v9;
  }
  while (v9 != v4);
  swift_bridgeObjectRelease(v57);
  return v5;
}

double MLObjectDetector.PrecisionRecallCurve.precision.getter()
{
  uint64_t v1 = *(void *)(v0 + 24);
  uint64_t v7 = v1;
  uint64_t v2 = *(void *)(v1 + 16);
  if (v2)
  {
    swift_bridgeObjectRetain(v1);
    uint64_t v3 = (double *)(v1 + 40);
    uint64_t v4 = (char *)_swiftEmptyArrayStorage;
    uint64_t v8 = v2;
    do
    {
      if (!*(unsigned char *)v3)
      {
        double v9 = *(v3 - 1);
        if (!swift_isUniquelyReferenced_nonNull_native(v4)) {
          uint64_t v4 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *((void *)v4 + 2) + 1, 1, (uint64_t)v4);
        }
        unint64_t v5 = *((void *)v4 + 2);
        if (*((void *)v4 + 3) >> 1 <= v5) {
          uint64_t v4 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(*((void *)v4 + 3) >= 2uLL, v5 + 1, 1, (uint64_t)v4);
        }
        *((void *)v4 + 2) = v5 + 1;
        *(double *)&v4[8 * v5 + 32] = v9;
      }
      v3 += 2;
      --v2;
    }
    while (v2);
    outlined release of [Int?](&v7);
    LODWORD(v2) = v8;
  }
  else
  {
    uint64_t v4 = (char *)_swiftEmptyArrayStorage;
  }
  double v9 = (double)(int)*((void *)v4 + 2);
  swift_bridgeObjectRelease((_BYTE)v4);
  return v9 / (double)(int)v2;
}

uint64_t MLObjectDetectorMetrics.averagePrecision.getter()
{
  if (*((unsigned char *)v0 + 32))
  {
    uint64_t v1 = Dictionary.init(dictionaryLiteral:)(&_swiftEmptyArrayStorage, &type metadata for String, &type metadata for Double, &protocol witness table for String);
    Dictionary.init(dictionaryLiteral:)(&_swiftEmptyArrayStorage, &type metadata for String, &type metadata for Double, &protocol witness table for String);
  }
  else
  {
    uint64_t v1 = *v0;
    uint64_t v2 = v0[1];
    swift_bridgeObjectRetain(*v0);
    swift_bridgeObjectRetain(v2);
  }
  return v1;
}

double MLObjectDetectorMetrics.meanAveragePrecision.getter()
{
  double result = 0.0;
  if (!*(unsigned char *)(v0 + 32)) {
    return *(double *)(v0 + 16);
  }
  return result;
}

uint64_t MLObjectDetectorMetrics.error.getter()
{
  if (*((unsigned char *)v0 + 32) != 1) {
    return 0;
  }
  uint64_t v1 = *v0;
  swift_errorRetain(*v0);
  return v1;
}

char MLObjectDetectorMetrics.isValid.getter()
{
  return *(unsigned char *)(v0 + 32) ^ 1;
}

unint64_t MLObjectDetectorMetrics.description.getter()
{
  uint64_t v1 = *(void *)v0;
  if (*(unsigned char *)(v0 + 32))
  {
    unint64_t v65 = 0;
    __m128d v66 = (char *)0xE000000000000000;
    v75._uint64_t countAndFlagsBits = v1;
    uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Error);
    _print_unlocked<A, B>(_:_:)(&v75, &v65, v2, &type metadata for DefaultStringInterpolation, &protocol witness table for DefaultStringInterpolation);
    return v65;
  }
  uint64_t v76 = *(void *)(v0 + 8);
  uint64_t v4 = *(void *)(v0 + 16);
  uint64_t v67 = *(void *)(v0 + 24);
  uint64_t v73 = v67;
  unint64_t v65 = 0xD000000000000023;
  __m128d v66 = "Empty ArraySlice" + 0x8000000000000000;
  v75._uint64_t countAndFlagsBits = 0;
  v75._char object = (void *)0xE000000000000000;
  _StringGuts.grow(_:)(73);
  v5._char object = "------------------\n" + 0x8000000000000000;
  v5._uint64_t countAndFlagsBits = 0xD000000000000045;
  String.append(_:)(v5);
  Double.write<A>(to:)(&v75, &type metadata for DefaultStringInterpolation, &protocol witness table for DefaultStringInterpolation);
  v5._uint64_t countAndFlagsBits = 2592;
  v5._char object = (void *)0xE200000000000000;
  String.append(_:)(v5);
  char object = (char)v75._object;
  String.append(_:)(v75);
  swift_bridgeObjectRelease(object);
  v75._uint64_t countAndFlagsBits = 0;
  v75._char object = (void *)0xE000000000000000;
  _StringGuts.grow(_:)(75);
  v5._uint64_t countAndFlagsBits = 0xD000000000000047;
  v5._char object = "er-Union Thresholds: " + 0x8000000000000000;
  String.append(_:)(v5);
  Double.write<A>(to:)(&v75, &type metadata for DefaultStringInterpolation, &protocol witness table for DefaultStringInterpolation);
  v5._uint64_t countAndFlagsBits = 2592;
  v5._char object = (void *)0xE200000000000000;
  String.append(_:)(v5);
  char v7 = (char)v75._object;
  String.append(_:)(v75);
  swift_bridgeObjectRelease(v7);
  int64_t v8 = 0;
  char v9 = v76;
  uint64_t v71 = v4;
  outlined copy of Result<MLObjectDetector.Metrics, Error>(v1, v76, v4, v67, 0);
  swift_bridgeObjectRelease(v9);
  uint64_t v10 = 1 << *(unsigned char *)(v1 + 32);
  uint64_t v11 = ~(-1 << v10);
  if (v10 >= 64) {
    uint64_t v11 = -1;
  }
  uint64_t v73 = v1;
  unint64_t v12 = *(void *)(v1 + 64) & v11;
  int64_t v74 = (unint64_t)(v10 + 63) >> 6;
  uint64_t v77 = "nion Threshold of 50%: " + 0x8000000000000000;
  uint64_t v13 = (void *)v1;
  while (1)
  {
    if (v12)
    {
      _BitScanForward64(&v14, v12);
      unint64_t v68 = (char *)((v12 - 1) & v12);
      int64_t v72 = v8;
      unint64_t v15 = v14 | (v8 << 6);
      goto LABEL_21;
    }
    BOOL v16 = __OFADD__(1, v8);
    int64_t v17 = v8 + 1;
    if (v16) {
      BUG();
    }
    uint64_t v18 = v73;
    if (v17 >= v74) {
      break;
    }
    unint64_t i = *(void *)(v73 + 8 * v17 + 64);
    if (i)
    {
      int64_t v20 = v17;
    }
    else
    {
      int64_t v20 = v17 + 1;
      if (v17 + 1 >= v74) {
        break;
      }
      unint64_t i = *(void *)(v73 + 8 * v17 + 72);
      if (!i)
      {
        int64_t v20 = v17 + 2;
        if (v17 + 2 >= v74) {
          break;
        }
        unint64_t i = *(void *)(v73 + 8 * v17 + 80);
        if (!i)
        {
          int64_t v20 = v17 + 3;
          if (v17 + 3 >= v74) {
            break;
          }
          unint64_t i = *(void *)(v73 + 8 * v17 + 88);
          if (!i)
          {
            int64_t v20 = v17 + 4;
            if (v17 + 4 >= v74) {
              break;
            }
            unint64_t i = *(void *)(v73 + 8 * v17 + 96);
            if (!i)
            {
              int64_t v20 = v17 + 5;
              if (v17 + 5 >= v74) {
                break;
              }
              for (unint64_t i = *(void *)(v73 + 8 * v17 + 104); !i; unint64_t i = *(void *)(v73 + 8 * v20 + 64))
              {
                BOOL v16 = __OFADD__(1, v20++);
                if (v16) {
                  BUG();
                }
                if (v20 >= v74) {
                  goto LABEL_32;
                }
              }
            }
          }
        }
      }
    }
    _BitScanForward64(&v21, i);
    unint64_t v68 = (char *)(i & (i - 1));
    unint64_t v15 = v21 + (v20 << 6);
    int64_t v72 = v20;
LABEL_21:
    uint64_t v22 = v13[6];
    uint64_t v23 = 16 * v15;
    uint64_t v24 = *(void *)(v22 + v23);
    uint64_t v25 = *(void **)(v22 + v23 + 8);
    v75._uint64_t countAndFlagsBits = 0;
    v75._char object = (void *)0xE000000000000000;
    swift_bridgeObjectRetain((_BYTE)v25);
    _StringGuts.grow(_:)(76);
    v26._uint64_t countAndFlagsBits = 0xD000000000000043;
    v26._char object = v77;
    String.append(_:)(v26);
    v26._uint64_t countAndFlagsBits = v24;
    v26._char object = v25;
    String.append(_:)(v26);
    v26._uint64_t countAndFlagsBits = 2112032;
    v26._char object = (void *)0xE300000000000000;
    String.append(_:)(v26);
    char v27 = v76;
    outlined copy of Result<MLObjectDetector.Metrics, Error>((uint64_t)v13, v76, v71, v67, 0);
    swift_bridgeObjectRelease(v27);
    char v28 = 1;
    if (v13[2] && (unint64_t v29 = specialized __RawDictionaryStorage.find<A>(_:)(v24, (uint64_t)v25), (v30 & 1) != 0))
    {
      uint64_t v31 = *(void *)(v13[7] + 8 * v29);
      char v28 = 0;
    }
    else
    {
      uint64_t v31 = 0;
    }
    swift_bridgeObjectRelease((_BYTE)v25);
    swift_bridgeObjectRelease(v73);
    uint64_t v69 = v31;
    char v70 = v28;
    uint64_t v32 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Double?);
    v33._uint64_t countAndFlagsBits = String.init<A>(describing:)(&v69, v32);
    char v34 = (char)v33._object;
    String.append(_:)(v33);
    swift_bridgeObjectRelease(v34);
    v35._uint64_t countAndFlagsBits = 2592;
    v35._char object = (void *)0xE200000000000000;
    String.append(_:)(v35);
    char v36 = (char)v75._object;
    String.append(_:)(v75);
    swift_bridgeObjectRelease(v36);
    int64_t v8 = v72;
    unint64_t v12 = (unint64_t)v68;
  }
LABEL_32:
  swift_release();
  int64_t v37 = 0;
  uint64_t v38 = v76;
  outlined copy of Result<MLObjectDetector.Metrics, Error>(v18, v76, v71, v67, 0);
  swift_bridgeObjectRelease(v18);
  uint64_t v39 = 1 << *(unsigned char *)(v38 + 32);
  uint64_t v40 = ~(-1 << v39);
  if (v39 >= 64) {
    uint64_t v40 = -1;
  }
  unint64_t v41 = *(void *)(v38 + 64) & v40;
  uint64_t v77 = (char *)((unint64_t)(v39 + 63) >> 6);
  unint64_t v68 = "ion Thresholds for " + 0x8000000000000000;
  while (2)
  {
    if (v41)
    {
      _BitScanForward64(&v42, v41);
      v41 &= v41 - 1;
      int64_t v72 = v37;
      unint64_t v43 = v42 | (v37 << 6);
      uint64_t v44 = v76;
LABEL_50:
      uint64_t v49 = *(void *)(v44 + 48);
      uint64_t v50 = 16 * v43;
      uint64_t v51 = *(void *)(v49 + v50);
      CGRect v52 = *(void **)(v49 + v50 + 8);
      v75._uint64_t countAndFlagsBits = 0;
      v75._char object = (void *)0xE000000000000000;
      swift_bridgeObjectRetain((_BYTE)v52);
      _StringGuts.grow(_:)(78);
      v53._uint64_t countAndFlagsBits = 0xD000000000000045;
      v53._char object = v68;
      String.append(_:)(v53);
      v53._uint64_t countAndFlagsBits = v51;
      v53._char object = v52;
      String.append(_:)(v53);
      v53._uint64_t countAndFlagsBits = 2112032;
      v53._char object = (void *)0xE300000000000000;
      String.append(_:)(v53);
      char v54 = v73;
      outlined copy of Result<MLObjectDetector.Metrics, Error>(v73, v76, v71, v67, 0);
      swift_bridgeObjectRelease(v54);
      uint64_t v55 = v76;
      char v56 = 1;
      if (*(void *)(v76 + 16)
        && (unint64_t v57 = specialized __RawDictionaryStorage.find<A>(_:)(v51, (uint64_t)v52), (v58 & 1) != 0))
      {
        uint64_t v59 = *(void *)(*(void *)(v55 + 56) + 8 * v57);
        char v56 = 0;
      }
      else
      {
        uint64_t v59 = 0;
      }
      swift_bridgeObjectRelease((_BYTE)v52);
      swift_bridgeObjectRelease(v76);
      uint64_t v69 = v59;
      char v70 = v56;
      uint64_t v60 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Double?);
      v61._uint64_t countAndFlagsBits = String.init<A>(describing:)(&v69, v60);
      char v62 = (char)v61._object;
      String.append(_:)(v61);
      swift_bridgeObjectRelease(v62);
      v63._uint64_t countAndFlagsBits = 2592;
      v63._char object = (void *)0xE200000000000000;
      String.append(_:)(v63);
      char v64 = (char)v75._object;
      String.append(_:)(v75);
      swift_bridgeObjectRelease(v64);
      int64_t v37 = v72;
      continue;
    }
    break;
  }
  BOOL v16 = __OFADD__(1, v37);
  uint64_t v45 = v37 + 1;
  uint64_t v44 = v76;
  if (v16) {
    BUG();
  }
  if (v45 < (uint64_t)v77)
  {
    unint64_t j = *(void *)(v76 + 8 * v45 + 64);
    if (j)
    {
      uint64_t v47 = v45;
    }
    else
    {
      uint64_t v47 = v45 + 1;
      if (v45 + 1 >= (uint64_t)v77) {
        goto LABEL_61;
      }
      unint64_t j = *(void *)(v76 + 8 * v45 + 72);
      if (!j)
      {
        uint64_t v47 = v45 + 2;
        if (v45 + 2 >= (uint64_t)v77) {
          goto LABEL_61;
        }
        unint64_t j = *(void *)(v76 + 8 * v45 + 80);
        if (!j)
        {
          uint64_t v47 = v45 + 3;
          if (v45 + 3 >= (uint64_t)v77) {
            goto LABEL_61;
          }
          unint64_t j = *(void *)(v76 + 8 * v45 + 88);
          if (!j)
          {
            uint64_t v47 = v45 + 4;
            if (v45 + 4 >= (uint64_t)v77) {
              goto LABEL_61;
            }
            unint64_t j = *(void *)(v76 + 8 * v45 + 96);
            if (!j)
            {
              uint64_t v47 = v45 + 5;
              if (v45 + 5 >= (uint64_t)v77) {
                goto LABEL_61;
              }
              for (unint64_t j = *(void *)(v76 + 8 * v45 + 104); !j; unint64_t j = *(void *)(v76 + 8 * v47 + 64))
              {
                BOOL v16 = __OFADD__(1, v47++);
                if (v16) {
                  BUG();
                }
                if (v47 >= (uint64_t)v77) {
                  goto LABEL_61;
                }
              }
            }
          }
        }
      }
    }
    _BitScanForward64(&v48, j);
    unint64_t v41 = j & (j - 1);
    unint64_t v43 = v48 + (v47 << 6);
    int64_t v72 = v47;
    goto LABEL_50;
  }
LABEL_61:
  swift_release();
  return v65;
}

unint64_t MLObjectDetectorMetrics.debugDescription.getter()
{
  uint64_t v1 = *(void *)v0;
  if (*(unsigned char *)(v0 + 32))
  {
    v5[0] = 0;
    v5[1] = 0xE000000000000000;
    v6[0] = v1;
    uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Error);
    _print_unlocked<A, B>(_:_:)(v6, v5, v2, &type metadata for DefaultStringInterpolation, &protocol witness table for DefaultStringInterpolation);
    return v5[0];
  }
  else
  {
    uint64_t v4 = *(void *)(v0 + 8);
    outlined copy of Result<MLObjectDetector.Metrics, Error>(*(void *)v0, v4, *(void *)(v0 + 16), *(void *)(v0 + 24), 0);
    swift_bridgeObjectRelease(v4);
    swift_bridgeObjectRelease(v1);
    return MLObjectDetectorMetrics.description.getter();
  }
}

void *MLObjectDetectorMetrics.playgroundDescription.getter()
{
  unint64_t v21 = v0;
  uint64_t v2 = *(void *)v1;
  uint64_t v3 = *(void *)(v1 + 8);
  uint64_t v4 = *(void *)(v1 + 16);
  uint64_t v5 = *(void *)(v1 + 24);
  if (*(unsigned char *)(v1 + 32))
  {
    unint64_t v15 = 0;
    unint64_t v16 = 0xE000000000000000;
    uint64_t v20 = v2;
    uint64_t v6 = v4;
    outlined copy of Result<MLObjectDetector.Metrics, Error>(v2, v3, v4, v5, 1);
    uint64_t v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Error);
    _print_unlocked<A, B>(_:_:)(&v20, &v15, v7, &type metadata for DefaultStringInterpolation, &protocol witness table for DefaultStringInterpolation);
    uint64_t v8 = v5;
    unint64_t v9 = v15;
    unint64_t v10 = v16;
    outlined consume of Result<MLObjectDetector.Metrics, Error>(v2, v3, v6, v8, 1);
  }
  else
  {
    uint64_t v11 = *(void *)(v1 + 16);
    outlined copy of Result<MLObjectDetector.Metrics, Error>(*(void *)v1, *(void *)(v1 + 8), v11, *(void *)(v1 + 24), 0);
    swift_bridgeObjectRelease(v3);
    swift_bridgeObjectRelease(v2);
    unint64_t v15 = v2;
    unint64_t v16 = v3;
    uint64_t v17 = v11;
    uint64_t v18 = v5;
    char v19 = 0;
    unint64_t v9 = MLObjectDetectorMetrics.description.getter();
    unint64_t v10 = v12;
  }
  double result = &type metadata for String;
  unint64_t v14 = v21;
  v21[3] = (unint64_t)&type metadata for String;
  *unint64_t v14 = v9;
  v14[1] = v10;
  return result;
}

unint64_t protocol witness for CustomStringConvertible.description.getter in conformance MLObjectDetectorMetrics()
{
  return MLObjectDetectorMetrics.description.getter();
}

unint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance MLObjectDetectorMetrics()
{
  return MLObjectDetectorMetrics.debugDescription.getter();
}

void *protocol witness for CustomPlaygroundDisplayConvertible.playgroundDescription.getter in conformance MLObjectDetectorMetrics()
{
  return MLObjectDetectorMetrics.playgroundDescription.getter();
}

uint64_t _Model.hasObjectDetectorValidationMetrics.getter(double a1)
{
  uint64_t v1 = _Model.attributes.getter(a1);
  unsigned int v3 = v1;
  specialized Dictionary.subscript.getter(0xD00000000000001CLL, (uint64_t)("Threshold of 50% for " + 0x8000000000000000), v1);
  swift_bridgeObjectRelease(v3);
  uint64_t v2 = v13;
  outlined destroy of Any?((uint64_t)v12);
  LOBYTE(v3) = 1;
  if (!v2)
  {
    uint64_t v4 = _Model.attributes.getter(a1);
    char v5 = v4;
    specialized Dictionary.subscript.getter(0xD00000000000001FLL, (uint64_t)("validation_average_precision" + 0x8000000000000000), v4);
    swift_bridgeObjectRelease(v5);
    uint64_t v6 = v13;
    outlined destroy of Any?((uint64_t)v12);
    if (!v6)
    {
      uint64_t v7 = _Model.attributes.getter(a1);
      char v8 = v7;
      specialized Dictionary.subscript.getter(0xD000000000000021, (uint64_t)("validation_average_precision_50" + 0x8000000000000000), v7);
      swift_bridgeObjectRelease(v8);
      uint64_t v9 = v13;
      outlined destroy of Any?((uint64_t)v12);
      if (!v9)
      {
        uint64_t v10 = _Model.attributes.getter(a1);
        unsigned int v3 = v10;
        specialized Dictionary.subscript.getter(0xD000000000000024, (uint64_t)("average_precision" + 0x8000000000000000), v10);
        swift_bridgeObjectRelease(v3);
        LOBYTE(v3) = v13 != 0;
        outlined destroy of Any?((uint64_t)v12);
      }
    }
  }
  return v3;
}

void *_Model.makeDetectorMetrics(onTraining:)(char a1, double a2)
{
  uint64_t v32 = v3;
  uint64_t v4 = 0x69746164696C6176;
  if (a1) {
    uint64_t v4 = 0x676E696E69617274;
  }
  uint64_t v5 = 0xEB000000005F6E6FLL;
  if (a1) {
    uint64_t v5 = 0xE90000000000005FLL;
  }
  uint64_t v31 = v2;
  swift_bridgeObjectRetain(v5);
  v6._char object = "average_precision_50" + 0x8000000000000000;
  v6._uint64_t countAndFlagsBits = 0xD000000000000011;
  String.append(_:)(v6);
  uint64_t v28 = v5;
  swift_bridgeObjectRetain(v5);
  v6._uint64_t countAndFlagsBits = 0xD000000000000014;
  v6._char object = "average_precision" + 0x8000000000000000;
  String.append(_:)(v6);
  uint64_t v27 = v4;
  uint64_t v33 = v5;
  swift_bridgeObjectRetain(v5);
  v6._uint64_t countAndFlagsBits = 0xD000000000000016;
  v6._char object = "average_precision_50" + 0x8000000000000000;
  String.append(_:)(v6);
  uint64_t v39 = v4;
  v29[0] = v4;
  v29[1] = v5;
  swift_bridgeObjectRetain(v5);
  v6._char object = "mean_average_precision" + 0x8000000000000000;
  v6._uint64_t countAndFlagsBits = 0xD000000000000019;
  String.append(_:)(v6);
  swift_bridgeObjectRelease(v5);
  uint64_t v7 = _Model.attributes.getter(a2);
  char v8 = v7;
  specialized Dictionary.subscript.getter(v4, v5, v7);
  swift_bridgeObjectRelease(v5);
  swift_bridgeObjectRelease(v8);
  if (v30)
  {
    uint64_t v9 = v4;
    if (swift_dynamicCast(&v34, v29, (char *)&type metadata for Any + 8, &type metadata for MLDataValue, 6))
    {
      if (v36 == 1)
      {
        int64_t v37 = v34;
        goto LABEL_12;
      }
      outlined consume of MLDataValue(v34, v35, v36);
    }
  }
  else
  {
    uint64_t v9 = v4;
    outlined destroy of Any?((uint64_t)v29);
  }
  int64_t v37 = 0;
LABEL_12:
  uint64_t v10 = _Model.attributes.getter(a2);
  char v11 = v10;
  specialized Dictionary.subscript.getter(v9, v5, v10);
  swift_bridgeObjectRelease(v5);
  swift_bridgeObjectRelease(v11);
  if (v30)
  {
    if (swift_dynamicCast(&v34, v29, (char *)&type metadata for Any + 8, &type metadata for MLDataValue, 6))
    {
      if (v36 == 1)
      {
        uint64_t v38 = v34;
        goto LABEL_19;
      }
      outlined consume of MLDataValue(v34, v35, v36);
    }
  }
  else
  {
    outlined destroy of Any?((uint64_t)v29);
  }
  uint64_t v38 = 0;
LABEL_19:
  uint64_t v39 = Dictionary.init(dictionaryLiteral:)(_swiftEmptyArrayStorage, &type metadata for String, &type metadata for Double, &protocol witness table for String);
  unint64_t v12 = (void *)Dictionary.init(dictionaryLiteral:)(_swiftEmptyArrayStorage, &type metadata for String, &type metadata for Double, &protocol witness table for String);
  uint64_t v13 = _Model.attributes.getter(a2);
  char v14 = v13;
  specialized Dictionary.subscript.getter(v4, v28, v13);
  swift_bridgeObjectRelease(v28);
  swift_bridgeObjectRelease(v14);
  if (v30)
  {
    if (swift_dynamicCast(&v34, v29, (char *)&type metadata for Any + 8, &type metadata for MLDataValue, 6))
    {
      unint64_t v15 = v34;
      unint64_t v16 = v35;
      if (v36 == 4)
      {
        swift_bridgeObjectRelease(v39);
        ML11MLDataValueOAHG_SS_Sdts5NeverOTg503_s8d4ML11fg38OACSSSdIgnnod_AC3key_AC5valuetSS_Sdts5H117OIegnrzr_TR03_s8a74ML6_ModelC19makeDetectorMetrics10onTrainingAA08MLObjecteF0VSb_tFSS_SdtAA11cD10O_AItXEfU_Tf3nnnpf_nTf1cn_nTm = _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSDy8CreateML11MLDataValueOAHG_SS_Sdts5NeverOTg503_s8d4ML11fg38OACSSSdIgnnod_AC3key_AC5valuetSS_Sdts5H117OIegnrzr_TR03_s8a74ML6_ModelC19makeDetectorMetrics10onTrainingAA08MLObjecteF0VSb_tFSS_SdtAA11cD10O_AItXEfU_Tf3nnnpf_nTf1cn_nTm((uint64_t)v15);
        outlined consume of MLDataValue(v15, v16, 4);
        uint64_t v39 = (uint64_t)specialized Dictionary.init<A>(uniqueKeysWithValues:)((uint64_t)ML11MLDataValueOAHG_SS_Sdts5NeverOTg503_s8d4ML11fg38OACSSSdIgnnod_AC3key_AC5valuetSS_Sdts5H117OIegnrzr_TR03_s8a74ML6_ModelC19makeDetectorMetrics10onTrainingAA08MLObjecteF0VSb_tFSS_SdtAA11cD10O_AItXEfU_Tf3nnnpf_nTf1cn_nTm);
      }
      else
      {
        outlined consume of MLDataValue(v34, v35, v36);
      }
    }
  }
  else
  {
    outlined destroy of Any?((uint64_t)v29);
  }
  uint64_t v18 = v33;
  uint64_t v19 = _Model.attributes.getter(a2);
  char v20 = v19;
  specialized Dictionary.subscript.getter(v27, v18, v19);
  swift_bridgeObjectRelease(v18);
  swift_bridgeObjectRelease(v20);
  if (!v30)
  {
    outlined destroy of Any?((uint64_t)v29);
    goto LABEL_30;
  }
  if (!swift_dynamicCast(&v34, v29, (char *)&type metadata for Any + 8, &type metadata for MLDataValue, 6))
  {
LABEL_30:
    uint64_t v23 = v31;
    goto LABEL_31;
  }
  unint64_t v21 = v34;
  uint64_t v22 = v35;
  uint64_t v23 = v31;
  if (v36 == 4)
  {
    swift_bridgeObjectRelease((_BYTE)v12);
    uint64_t v24 = _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSDy8CreateML11MLDataValueOAHG_SS_Sdts5NeverOTg503_s8d4ML11fg38OACSSSdIgnnod_AC3key_AC5valuetSS_Sdts5H117OIegnrzr_TR03_s8a74ML6_ModelC19makeDetectorMetrics10onTrainingAA08MLObjecteF0VSb_tFSS_SdtAA11cD10O_AItXEfU_Tf3nnnpf_nTf1cn_nTm((uint64_t)v21);
    outlined consume of MLDataValue(v21, v22, 4);
    unint64_t v12 = specialized Dictionary.init<A>(uniqueKeysWithValues:)((uint64_t)v24);
  }
  else
  {
    outlined consume of MLDataValue(v34, v35, v36);
  }
LABEL_31:
  double result = v37;
  Swift::String v26 = v38;
  *(void *)uint64_t v23 = v39;
  *(void *)(v23 + 8) = v12;
  *(void *)(v23 + 16) = result;
  *(void *)(v23 + 24) = v26;
  *(unsigned char *)(v23 + 32) = 0;
  return result;
}

void *partial apply for closure #2 in MLObjectDetector.evaluation(on:)(uint64_t a1, void *a2)
{
  return closure #2 in MLObjectDetector.evaluation(on:)(a1, *(void *)(v2 + 16), a2);
}

char specialized _merge<A>(low:mid:high:buffer:by:)(char *__src, char *a2, unint64_t a3, char *a4)
{
  uint64_t v4 = (double *)a4;
  Swift::String v6 = a2;
  uint64_t v7 = __src;
  int64_t v8 = a2 - __src;
  uint64_t v9 = a3 - (void)v6;
  uint64_t v10 = (uint64_t)(a3 - (void)v6) / 56;
  if (v8 / 56 >= v10)
  {
    uint64_t v26 = (uint64_t)(a3 - (void)v6) / 56;
    specialized UnsafeMutablePointer.moveInitialize(from:count:)(v6, v10, a4);
    char v11 = &v4[7 * v26];
    if (v7 >= v6 || v9 < 56) {
      goto LABEL_31;
    }
    unint64_t v18 = a3 - 56;
    while (1)
    {
      uint64_t v19 = (char *)(v18 + 56);
      if (*(v11 - 1) <= *((double *)v6 - 1))
      {
        char v20 = (char *)(v11 - 7);
        if (v19 == (char *)v11)
        {
          BOOL v21 = v18 < (unint64_t)v11;
          v11 -= 7;
          if (v21) {
            goto LABEL_29;
          }
        }
        else
        {
          v11 -= 7;
        }
      }
      else
      {
        char v20 = v6 - 56;
        if (v19 == v6)
        {
          BOOL v21 = v18 < (unint64_t)v6;
          v6 -= 56;
          if (v21) {
            goto LABEL_29;
          }
        }
        else
        {
          v6 -= 56;
        }
      }
      long long v22 = *(_OWORD *)v20;
      long long v23 = *((_OWORD *)v20 + 1);
      long long v24 = *((_OWORD *)v20 + 2);
      *(void *)(v18 + 48) = *((void *)v20 + 6);
      *(_OWORD *)(v18 + 32) = v24;
      *(_OWORD *)(v18 + 16) = v23;
      *(_OWORD *)unint64_t v18 = v22;
LABEL_29:
      if (v6 > v7)
      {
        v18 -= 56;
        if (v11 > v4) {
          continue;
        }
      }
      goto LABEL_31;
    }
  }
  specialized UnsafeMutablePointer.moveInitialize(from:count:)(v7, v8 / 56, a4);
  char v11 = &v4[7 * (v8 / 56)];
  if ((unint64_t)v6 < a3 && v8 >= 56)
  {
    while (1)
    {
      if (*((double *)v6 + 6) <= v4[6])
      {
        unint64_t v14 = (unint64_t)(v4 + 7);
        uint64_t v13 = (char *)v4;
        unint64_t v12 = v6;
        if (v7 == (char *)v4)
        {
          v4 += 7;
          if ((unint64_t)v7 < v14) {
            goto LABEL_13;
          }
        }
        else
        {
          v4 += 7;
        }
      }
      else
      {
        unint64_t v12 = v6 + 56;
        uint64_t v13 = v6;
        if (v7 == v6 && v7 < v12) {
          goto LABEL_13;
        }
      }
      long long v15 = *(_OWORD *)v13;
      long long v16 = *((_OWORD *)v13 + 1);
      long long v17 = *((_OWORD *)v13 + 2);
      *((void *)v7 + 6) = *((void *)v13 + 6);
      *((_OWORD *)v7 + 2) = v17;
      *((_OWORD *)v7 + 1) = v16;
      *(_OWORD *)uint64_t v7 = v15;
LABEL_13:
      v7 += 56;
      if (v4 < v11)
      {
        Swift::String v6 = v12;
        if ((unint64_t)v12 < a3) {
          continue;
        }
      }
      break;
    }
  }
  Swift::String v6 = v7;
LABEL_31:
  specialized UnsafeMutablePointer.moveInitialize(from:count:)((char *)v4, ((char *)v11 - (char *)v4) / 56, v6);
  return 1;
}

{
  char *v5;
  char *v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  char *v11;
  char *v12;
  char *v13;
  unint64_t v14;
  uint64_t v15;
  char *v16;
  char *v17;
  char *v18;
  BOOL v19;
  uint64_t v22;
  uint64_t v23;

  uint64_t v5 = a2;
  Swift::String v6 = __src;
  uint64_t v7 = a2 - __src;
  int64_t v8 = v7 / 16;
  uint64_t v9 = (uint64_t)(a3 - (void)a2) / 16;
  if (v7 / 16 >= v9)
  {
    long long v23 = a3 - (void)a2;
    long long v15 = (uint64_t)(a3 - (void)a2) / 16;
    specialized UnsafeMutablePointer.moveInitialize(from:count:)(a2, v9, a4);
    uint64_t v10 = a4;
    char v11 = &a4[16 * v15];
    if (v6 >= a2 || v23 < 16) {
      goto LABEL_31;
    }
    long long v16 = (char *)(a3 - 16);
    while (1)
    {
      long long v17 = v16 + 16;
      if (*((void *)v11 - 1) >= *((void *)v5 - 1))
      {
        unint64_t v18 = v11 - 16;
        if (v17 == v11)
        {
          uint64_t v19 = v16 < v11;
          v11 -= 16;
          if (v19) {
            goto LABEL_29;
          }
        }
        else
        {
          v11 -= 16;
        }
      }
      else
      {
        unint64_t v18 = v5 - 16;
        if (v17 == v5)
        {
          uint64_t v19 = v16 < v5;
          v5 -= 16;
          if (v19) {
            goto LABEL_29;
          }
        }
        else
        {
          v5 -= 16;
        }
      }
      *(_OWORD *)long long v16 = *(_OWORD *)v18;
LABEL_29:
      if (v5 > v6)
      {
        v16 -= 16;
        if (v11 > a4) {
          continue;
        }
      }
      goto LABEL_31;
    }
  }
  long long v22 = v7;
  specialized UnsafeMutablePointer.moveInitialize(from:count:)(v6, v8, a4);
  uint64_t v10 = a4;
  char v11 = &a4[16 * v8];
  if ((unint64_t)a2 < a3 && v22 >= 16)
  {
    while (1)
    {
      if (*((void *)v5 + 1) >= *((void *)v10 + 1))
      {
        unint64_t v14 = (unint64_t)(v10 + 16);
        uint64_t v13 = v10;
        unint64_t v12 = v5;
        if (v6 == v10)
        {
          v10 += 16;
          if ((unint64_t)v6 < v14) {
            goto LABEL_13;
          }
        }
        else
        {
          v10 += 16;
        }
      }
      else
      {
        unint64_t v12 = v5 + 16;
        uint64_t v13 = v5;
        if (v6 == v5 && v6 < v12) {
          goto LABEL_13;
        }
      }
      *(_OWORD *)Swift::String v6 = *(_OWORD *)v13;
LABEL_13:
      v6 += 16;
      if (v10 < v11)
      {
        uint64_t v5 = v12;
        if ((unint64_t)v12 < a3) {
          continue;
        }
      }
      break;
    }
  }
  uint64_t v5 = v6;
LABEL_31:
  specialized UnsafeMutablePointer.moveInitialize(from:count:)(v10, (v11 - v10) / 16, v5);
  return 1;
}

{
  char *v5;
  char *v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  char *v11;
  char *v12;
  BOOL v13;
  uint64_t v14;
  char *v15;
  char *v16;
  char *v17;
  BOOL v18;
  uint64_t v21;
  uint64_t v22;

  uint64_t v5 = a2;
  Swift::String v6 = __src;
  uint64_t v7 = a2 - __src;
  int64_t v8 = v7 / 16;
  uint64_t v9 = (uint64_t)(a3 - (void)a2) / 16;
  if (v7 / 16 >= v9)
  {
    long long v22 = a3 - (void)a2;
    unint64_t v14 = (uint64_t)(a3 - (void)a2) / 16;
    specialized UnsafeMutablePointer.moveInitialize(from:count:)(a2, v9, a4);
    uint64_t v10 = a4;
    char v11 = &a4[16 * v14];
    if (v6 >= a2 || v22 < 16) {
      goto LABEL_27;
    }
    long long v15 = (char *)(a3 - 16);
    while (1)
    {
      long long v16 = v15 + 16;
      if (*((void *)v11 - 2) >= *((void *)v5 - 2))
      {
        long long v17 = v11 - 16;
        if (v16 == v11)
        {
          unint64_t v18 = v15 < v11;
          v11 -= 16;
          if (v18) {
            goto LABEL_25;
          }
        }
        else
        {
          v11 -= 16;
        }
      }
      else
      {
        long long v17 = v5 - 16;
        if (v16 == v5)
        {
          unint64_t v18 = v15 < v5;
          v5 -= 16;
          if (v18) {
            goto LABEL_25;
          }
        }
        else
        {
          v5 -= 16;
        }
      }
      *(_OWORD *)long long v15 = *(_OWORD *)v17;
LABEL_25:
      if (v5 > v6)
      {
        v15 -= 16;
        if (v11 > a4) {
          continue;
        }
      }
      goto LABEL_27;
    }
  }
  BOOL v21 = v7;
  specialized UnsafeMutablePointer.moveInitialize(from:count:)(v6, v8, a4);
  uint64_t v10 = a4;
  char v11 = &a4[16 * v8];
  if ((unint64_t)a2 < a3 && v21 >= 16)
  {
    while (*(void *)v5 < *(void *)v10)
    {
      unint64_t v12 = v5;
      uint64_t v13 = v6 == v5;
      v5 += 16;
      if (!v13) {
        goto LABEL_8;
      }
LABEL_9:
      v6 += 16;
      if (v10 >= v11 || (unint64_t)v5 >= a3) {
        goto LABEL_11;
      }
    }
    unint64_t v12 = v10;
    uint64_t v13 = v6 == v10;
    v10 += 16;
    if (v13) {
      goto LABEL_9;
    }
LABEL_8:
    *(_OWORD *)Swift::String v6 = *(_OWORD *)v12;
    goto LABEL_9;
  }
LABEL_11:
  uint64_t v5 = v6;
LABEL_27:
  specialized UnsafeMutablePointer.moveInitialize(from:count:)(v10, (v11 - v10) / 16, v5);
  return 1;
}

{
  char *v4;
  char *v6;
  char *v7;
  int64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  BOOL v13;
  char *v14;
  char *v15;
  uint64_t v16;
  char *v17;
  BOOL v18;
  uint64_t v20;

  uint64_t v4 = a4;
  Swift::String v6 = a2;
  uint64_t v7 = __src;
  int64_t v8 = a2 - __src;
  uint64_t v9 = a3 - (void)v6;
  uint64_t v10 = (uint64_t)(a3 - (void)v6) / 8;
  if (v8 / 8 >= v10)
  {
    char v20 = (uint64_t)(a3 - (void)v6) / 8;
    specialized UnsafeMutablePointer.moveInitialize(from:count:)(v6, v10, a4);
    char v11 = &v4[8 * v20];
    if (v7 >= v6 || v9 < 8) {
      goto LABEL_27;
    }
    unint64_t v14 = (char *)(a3 - 8);
    while (1)
    {
      long long v15 = v14 + 8;
      long long v16 = *((void *)v6 - 1);
      if (*((void *)v11 - 1) >= v16)
      {
        long long v16 = *((void *)v11 - 1);
        long long v17 = v6;
        if (v15 == v11)
        {
          unint64_t v18 = v14 < v11;
          v11 -= 8;
          if (v18) {
            goto LABEL_24;
          }
        }
        else
        {
          v11 -= 8;
        }
      }
      else
      {
        long long v17 = v6 - 8;
        if (v15 == v6 && v14 < v6) {
          goto LABEL_24;
        }
      }
      *(void *)unint64_t v14 = v16;
LABEL_24:
      if (v17 > v7)
      {
        v14 -= 8;
        Swift::String v6 = v17;
        if (v11 > v4) {
          continue;
        }
      }
      Swift::String v6 = v17;
      goto LABEL_27;
    }
  }
  specialized UnsafeMutablePointer.moveInitialize(from:count:)(v7, v8 / 8, a4);
  char v11 = &v4[8 * (v8 / 8)];
  if ((unint64_t)v6 < a3 && v8 >= 8)
  {
    while (1)
    {
      unint64_t v12 = *(void *)v6;
      if (*(void *)v6 >= *(void *)v4) {
        break;
      }
      uint64_t v13 = v7 == v6;
      v6 += 8;
      if (!v13) {
        goto LABEL_8;
      }
LABEL_9:
      v7 += 8;
      if (v4 >= v11 || (unint64_t)v6 >= a3) {
        goto LABEL_11;
      }
    }
    unint64_t v12 = *(void *)v4;
    uint64_t v13 = v7 == v4;
    v4 += 8;
    if (v13) {
      goto LABEL_9;
    }
LABEL_8:
    *(void *)uint64_t v7 = v12;
    goto LABEL_9;
  }
LABEL_11:
  Swift::String v6 = v7;
LABEL_27:
  specialized UnsafeMutablePointer.moveInitialize(from:count:)(v4, (v11 - v4) / 8, v6);
  return 1;
}

{
  char *v4;
  char *v6;
  char *v7;
  int64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  char *v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  char v17;
  char *v18;
  BOOL v19;
  char *v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  char *v27;
  char v28;
  char *v29;
  BOOL v30;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  char *v35;
  char *v36;
  char *v37;

  uint64_t v4 = a4;
  Swift::String v6 = a2;
  uint64_t v7 = __src;
  int64_t v8 = a2 - __src;
  uint64_t v9 = v8 / 16;
  uint64_t v10 = (uint64_t)(a3 - (void)v6) / 16;
  char v36 = v7;
  if (v8 / 16 >= v10)
  {
    uint64_t v32 = a3 - (void)v6;
    char v34 = (uint64_t)(a3 - (void)v6) / 16;
    specialized UnsafeMutablePointer.moveInitialize(from:count:)(v6, v10, a4);
    uint64_t v13 = &v4[16 * v34];
    if (v7 >= v6 || v32 < 16) {
      goto LABEL_35;
    }
    char v20 = (char *)(a3 - 16);
    Swift::String v35 = v4;
    while (1)
    {
      BOOL v21 = v20 + 16;
      long long v22 = *((void *)v13 - 2);
      long long v23 = *((void *)v13 - 1);
      long long v24 = *((void *)v6 - 2);
      uint64_t v25 = *((void *)v6 - 1);
      if (v22 == v24 && v23 == v25
        || (uint64_t v26 = v6,
            uint64_t v27 = v13,
            uint64_t v28 = _stringCompareWithSmolCheck(_:_:expecting:)(v22, v23, v24, v25, 1),
            uint64_t v13 = v27,
            Swift::String v6 = v26,
            uint64_t v7 = v36,
            (v28 & 1) == 0))
      {
        unint64_t v29 = v13 - 16;
        if (v21 == v13)
        {
          uint64_t v30 = v20 < v13;
          v13 -= 16;
LABEL_25:
          uint64_t v4 = v35;
          if (v30) {
            goto LABEL_31;
          }
          goto LABEL_30;
        }
        v13 -= 16;
      }
      else
      {
        unint64_t v29 = v6 - 16;
        if (v21 == v6)
        {
          uint64_t v30 = v20 < v6;
          v6 -= 16;
          goto LABEL_25;
        }
        v6 -= 16;
      }
      uint64_t v4 = v35;
LABEL_30:
      *(_OWORD *)char v20 = *(_OWORD *)v29;
LABEL_31:
      if (v6 > v7)
      {
        v20 -= 16;
        if (v13 > v4) {
          continue;
        }
      }
      goto LABEL_35;
    }
  }
  uint64_t v33 = v8;
  char v11 = v7;
  unint64_t v12 = v6;
  specialized UnsafeMutablePointer.moveInitialize(from:count:)(v11, v9, a4);
  uint64_t v13 = &v4[16 * v9];
  if ((unint64_t)v6 < a3 && v33 >= 16)
  {
    Swift::String v6 = v36;
    while (1)
    {
      unint64_t v14 = *((void *)v12 + 1);
      long long v15 = *((void *)v4 + 1);
      if (*(void *)v12 == *(void *)v4 && v14 == v15) {
        break;
      }
      int64_t v37 = v6;
      long long v16 = v13;
      long long v17 = _stringCompareWithSmolCheck(_:_:expecting:)(*(void *)v12, v14, *(void *)v4, v15, 1);
      uint64_t v13 = v16;
      Swift::String v6 = v37;
      if ((v17 & 1) == 0) {
        break;
      }
      unint64_t v18 = v12;
      uint64_t v19 = v37 == v12;
      v12 += 16;
      if (!v19) {
        goto LABEL_11;
      }
LABEL_12:
      v6 += 16;
      if (v4 >= v13 || (unint64_t)v12 >= a3) {
        goto LABEL_35;
      }
    }
    unint64_t v18 = v4;
    uint64_t v19 = v6 == v4;
    v4 += 16;
    if (v19) {
      goto LABEL_12;
    }
LABEL_11:
    *(_OWORD *)Swift::String v6 = *(_OWORD *)v18;
    goto LABEL_12;
  }
  Swift::String v6 = v36;
LABEL_35:
  specialized UnsafeMutablePointer.moveInitialize(from:count:)(v4, (v13 - v4) / 16, v6);
  return 1;
}

void *specialized _NativeDictionary.makeIterator()(uint64_t a1)
{
  return specialized _NativeDictionary.makeIterator()(a1);
}

{
  void *result;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  uint64_t v2 = -(-1 << *(unsigned char *)(a1 + 32));
  uint64_t v3 = ~(-1 << v2);
  if (v2 >= 64) {
    uint64_t v3 = -1;
  }
  uint64_t v4 = *(void *)(a1 + 64) & v3;
  uint64_t v5 = ~(-1 << *(unsigned char *)(a1 + 32));
  void *result = a1;
  result[1] = a1 + 64;
  result[2] = v5;
  result[3] = 0;
  result[4] = v4;
  return result;
}

uint64_t destroy for MLObjectDetectorMetrics(uint64_t a1)
{
  return outlined consume of Result<MLObjectDetector.Metrics, Error>(*(void *)a1, *(void *)(a1 + 8), *(void *)(a1 + 16), *(void *)(a1 + 24), *(_DWORD *)(a1 + 32));
}

uint64_t initializeWithCopy for MLObjectDetectorMetrics(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)a2;
  uint64_t v3 = *(void *)(a2 + 8);
  uint64_t v4 = *(void *)(a2 + 16);
  uint64_t v5 = *(void *)(a2 + 24);
  char v7 = *(unsigned char *)(a2 + 32);
  outlined copy of Result<MLObjectDetector.Metrics, Error>(*(void *)a2, v3, v4, v5, v7);
  *(void *)a1 = v2;
  *(void *)(a1 + 8) = v3;
  *(void *)(a1 + 16) = v4;
  *(void *)(a1 + 24) = v5;
  *(unsigned char *)(a1 + 32) = v7;
  return a1;
}

uint64_t assignWithCopy for MLObjectDetectorMetrics(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)a2;
  uint64_t v4 = *(void *)(a2 + 8);
  uint64_t v5 = *(void *)(a2 + 16);
  uint64_t v6 = *(void *)(a2 + 24);
  char v13 = *(unsigned char *)(a2 + 32);
  outlined copy of Result<MLObjectDetector.Metrics, Error>(*(void *)a2, v4, v5, v6, v13);
  uint64_t v7 = *(void *)a1;
  uint64_t v8 = *(void *)(a1 + 8);
  uint64_t v9 = *(void *)(a1 + 16);
  uint64_t v10 = *(void *)(a1 + 24);
  *(void *)a1 = v3;
  *(void *)(a1 + 8) = v4;
  *(void *)(a1 + 16) = v5;
  *(void *)(a1 + 24) = v6;
  int v11 = *(_DWORD *)(a1 + 32);
  *(unsigned char *)(a1 + 32) = v13;
  outlined consume of Result<MLObjectDetector.Metrics, Error>(v7, v8, v9, v10, v11);
  return a1;
}

uint64_t __swift_memcpy33_8(uint64_t a1, long long *a2)
{
  uint64_t result = a1;
  *(unsigned char *)(a1 + 32) = *((unsigned char *)a2 + 32);
  long long v3 = *a2;
  *(_OWORD *)(a1 + 16) = a2[1];
  *(_OWORD *)a1 = v3;
  return result;
}

uint64_t assignWithTake for MLObjectDetectorMetrics(uint64_t a1, uint64_t a2)
{
  char v3 = *(unsigned char *)(a2 + 32);
  uint64_t v4 = *(void *)a1;
  uint64_t v5 = *(void *)(a1 + 8);
  uint64_t v6 = *(void *)(a1 + 16);
  uint64_t v7 = *(void *)(a1 + 24);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  int v8 = *(_DWORD *)(a1 + 32);
  *(unsigned char *)(a1 + 32) = v3;
  outlined consume of Result<MLObjectDetector.Metrics, Error>(v4, v5, v6, v7, v8);
  return a1;
}

uint64_t getEnumTagSinglePayload for MLObjectDetectorMetrics(uint64_t a1, unsigned int a2)
{
  if (a2)
  {
    if (a2 >= 0xFF && *(unsigned char *)(a1 + 33))
    {
      int v2 = *(_DWORD *)a1 + 254;
    }
    else
    {
      int v2 = -1;
      if (*(unsigned __int8 *)(a1 + 32) >= 2u) {
        int v2 = *(unsigned __int8 *)(a1 + 32) ^ 0xFF;
      }
    }
  }
  else
  {
    int v2 = -1;
  }
  return (v2 + 1);
}

void storeEnumTagSinglePayload for MLObjectDetectorMetrics(uint64_t a1, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFE)
  {
    *(void *)(a1 + 24) = 0;
    *(_OWORD *)(a1 + 8) = 0;
    *(void *)a1 = a2 - 255;
    *(unsigned char *)(a1 + 32) = 0;
    if (a3 >= 0xFF) {
      *(unsigned char *)(a1 + 33) = 1;
    }
  }
  else
  {
    if (a3 >= 0xFF) {
      *(unsigned char *)(a1 + 33) = 0;
    }
    if (a2) {
      *(unsigned char *)(a1 + 32) = -(char)a2;
    }
  }
}

ValueMetadata *type metadata accessor for MLObjectDetectorMetrics()
{
  return &type metadata for MLObjectDetectorMetrics;
}

uint64_t destroy for MLObjectDetector.Metrics(void *a1)
{
  return swift_bridgeObjectRelease(a1[1]);
}

uint64_t initializeWithCopy for MLObjectDetector.Metrics(uint64_t a1, uint64_t *a2)
{
  uint64_t v3 = *a2;
  *(void *)a1 = *a2;
  uint64_t v4 = a2[1];
  *(void *)(a1 + 8) = v4;
  *(_OWORD *)(a1 + 16) = *((_OWORD *)a2 + 1);
  swift_bridgeObjectRetain(v3);
  swift_bridgeObjectRetain(v4);
  return a1;
}

uint64_t *assignWithCopy for MLObjectDetector.Metrics(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3 = *a2;
  uint64_t v4 = *a1;
  *a1 = *a2;
  swift_bridgeObjectRetain(v3);
  swift_bridgeObjectRelease(v4);
  uint64_t v5 = a2[1];
  uint64_t v6 = a1[1];
  a1[1] = v5;
  swift_bridgeObjectRetain(v5);
  swift_bridgeObjectRelease(v6);
  a1[2] = a2[2];
  a1[3] = a2[3];
  return a1;
}

uint64_t assignWithTake for MLObjectDetector.Metrics(uint64_t a1, _OWORD *a2)
{
  swift_bridgeObjectRelease(*(void *)a1);
  uint64_t v3 = *(void *)(a1 + 8);
  *(_OWORD *)a1 = *a2;
  swift_bridgeObjectRelease(v3);
  *(_OWORD *)(a1 + 16) = a2[1];
  return a1;
}

uint64_t getEnumTagSinglePayload for MLObjectDetector.Metrics(uint64_t a1, int a2)
{
  return getEnumTagSinglePayload for MLObjectDetector.Metrics(a1, a2);
}

{
  int v2;

  if (a2)
  {
    if (a2 < 0 && *(unsigned char *)(a1 + 32)) {
      int v2 = *(_DWORD *)a1 + 0x7FFFFFFF;
    }
    else {
      int v2 = (*(void *)a1 & 0xFFFFFFFF00000001) != 0 ? -1 : *(void *)a1 >> 1;
    }
  }
  else
  {
    int v2 = -1;
  }
  return (v2 + 1);
}

void storeEnumTagSinglePayload for MLObjectDetector.Metrics(uint64_t a1, int a2, int a3)
{
}

{
  if (a2 < 0)
  {
    *(void *)(a1 + 24) = 0;
    *(_OWORD *)(a1 + 8) = 0;
    *(void *)a1 = a2 + 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(a1 + 32) = 1;
    }
  }
  else
  {
    if (a3 < 0) {
      *(unsigned char *)(a1 + 32) = 0;
    }
    if (a2) {
      *(void *)a1 = 2 * (a2 - 1);
    }
  }
}

ValueMetadata *type metadata accessor for MLObjectDetector.Metrics()
{
  return &type metadata for MLObjectDetector.Metrics;
}

uint64_t outlined destroy of Any?(uint64_t a1)
{
  uint64_t v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Any?);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v1 - 8) + 8))(a1, v1);
  return a1;
}

void *specialized _NativeDictionary.mapValues<A>(_:)(uint64_t a1)
{
  uint64_t v29 = v1;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<String, Double>);
  uint64_t v2 = static _DictionaryStorage.copy(original:)(a1);
  uint64_t v3 = 1 << *(unsigned char *)(a1 + 32);
  uint64_t v4 = (void *)v2;
  uint64_t v5 = ~(-1 << v3);
  if (v3 >= 64) {
    uint64_t v5 = -1;
  }
  uint64_t v31 = a1;
  unint64_t v6 = *(void *)(a1 + 64) & v5;
  int64_t v30 = (unint64_t)(v3 + 63) >> 6;
  int64_t v7 = 0;
  uint64_t v28 = (void *)v2;
  while (1)
  {
    if (v6)
    {
      _BitScanForward64(&v8, v6);
      uint64_t v27 = (v6 - 1) & v6;
      int64_t v26 = v7;
      unint64_t v9 = v8 | (v7 << 6);
      goto LABEL_17;
    }
    BOOL v10 = __OFADD__(1, v7);
    int64_t v11 = v7 + 1;
    if (v10) {
      BUG();
    }
    if (v11 >= v30) {
      return v4;
    }
    unint64_t v12 = *(void *)(v31 + 8 * v11 + 64);
    if (!v12) {
      break;
    }
LABEL_16:
    _BitScanForward64(&v14, v12);
    uint64_t v27 = v12 & (v12 - 1);
    int64_t v26 = v11;
    unint64_t v9 = v14 + (v11 << 6);
LABEL_17:
    uint64_t v15 = *(void *)(v31 + 48);
    uint64_t v24 = *(void *)(v15 + 16 * v9);
    uint64_t v16 = *(void *)(v15 + 16 * v9 + 8);
    v23[0] = *(void *)(*(void *)(v31 + 56) + 8 * v9);
    char v17 = v23[0];
    uint64_t v25 = v16;
    swift_bridgeObjectRetain(v16);
    swift_bridgeObjectRetain(v17);
    uint64_t v18 = v29;
    closure #2 in static MLObjectDetector.evaluation(on:detectedObjects:)(v23);
    swift_bridgeObjectRelease(v17);
    uint64_t v29 = v18;
    if (v18)
    {
      swift_bridgeObjectRelease(v25);
      uint64_t v4 = v28;
      swift_release();
      return v4;
    }
    uint64_t v4 = v28;
    v28[(v9 >> 6) + 8] |= 1 << v9;
    uint64_t v19 = v4[6];
    *(void *)(v19 + 16 * v9) = v24;
    *(void *)(v19 + 16 * v9 + 8) = v25;
    *(void *)(v4[7] + 8 * v9) = v23[1];
    uint64_t v20 = v4[2];
    BOOL v10 = __OFADD__(1, v20);
    uint64_t v21 = v20 + 1;
    if (v10) {
      BUG();
    }
    v4[2] = v21;
    int64_t v7 = v26;
    unint64_t v6 = v27;
  }
  int64_t v13 = v11 + 1;
  if (v11 + 1 >= v30) {
    return v4;
  }
  unint64_t v12 = *(void *)(v31 + 8 * v11 + 72);
  if (v12) {
    goto LABEL_15;
  }
  int64_t v13 = v11 + 2;
  if (v11 + 2 >= v30) {
    return v4;
  }
  unint64_t v12 = *(void *)(v31 + 8 * v11 + 80);
  if (v12) {
    goto LABEL_15;
  }
  int64_t v13 = v11 + 3;
  if (v11 + 3 >= v30) {
    return v4;
  }
  unint64_t v12 = *(void *)(v31 + 8 * v11 + 88);
  if (v12)
  {
LABEL_15:
    int64_t v11 = v13;
    goto LABEL_16;
  }
  v11 += 3;
  while (1)
  {
    BOOL v10 = __OFADD__(1, v11++);
    if (v10) {
      BUG();
    }
    if (v11 >= v30) {
      return v4;
    }
    unint64_t v12 = *(void *)(v31 + 8 * v11 + 64);
    if (v12) {
      goto LABEL_16;
    }
  }
}

{
  int64_t v2;
  int64_t v3;
  void *v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  BOOL v13;
  int64_t v14;
  unint64_t i;
  int64_t v16;
  unint64_t v17;
  void (*v18)(long long *, unint64_t, uint64_t);
  long long *v19;
  uint64_t v20;
  long long *v21;
  uint64_t v22;
  uint64_t v23;
  long long v25;
  uint64_t v26;
  uint64_t v27;
  long long *v28;
  void *v29;
  uint64_t v30;
  int64_t v31;
  uint64_t v32;
  int64_t v33;
  uint64_t v34;
  char v35;

  uint64_t v2 = 0;
  uint64_t v27 = type metadata accessor for URL(0);
  int64_t v30 = *(void *)(v27 - 8);
  uint64_t v3 = *(void *)(v30 + 64);
  uint64_t v4 = alloca(v3);
  uint64_t v5 = alloca(v3);
  uint64_t v28 = &v25;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<MLProgress.Metric, Any>);
  unint64_t v6 = static _DictionaryStorage.copy(original:)(a1);
  int64_t v7 = 1 << *(unsigned char *)(a1 + 32);
  unint64_t v8 = (void *)v6;
  unint64_t v9 = ~(-1 << v7);
  if (v7 >= 64) {
    unint64_t v9 = -1;
  }
  char v34 = a1;
  BOOL v10 = *(void *)(a1 + 64) & v9;
  uint64_t v33 = (unint64_t)(v7 + 63) >> 6;
  uint64_t v29 = (void *)v6;
  while (1)
  {
    if (v10)
    {
      _BitScanForward64(&v11, v10);
      uint64_t v32 = (v10 - 1) & v10;
      unint64_t v12 = v11 | (v2 << 6);
      uint64_t v31 = v2;
      goto LABEL_15;
    }
    int64_t v13 = __OFADD__(1, v2);
    unint64_t v14 = v2 + 1;
    if (v13) {
      BUG();
    }
    if (v14 >= v33) {
      return v8;
    }
    unint64_t i = *(void *)(v34 + 8 * v14 + 64);
    if (i)
    {
      uint64_t v16 = v14;
    }
    else
    {
      uint64_t v16 = v14 + 1;
      if (v14 + 1 >= v33) {
        return v8;
      }
      unint64_t i = *(void *)(v34 + 8 * v14 + 72);
      if (!i)
      {
        uint64_t v16 = v14 + 2;
        if (v14 + 2 >= v33) {
          return v8;
        }
        unint64_t i = *(void *)(v34 + 8 * v14 + 80);
        if (!i)
        {
          uint64_t v16 = v14 + 3;
          if (v14 + 3 >= v33) {
            return v8;
          }
          for (unint64_t i = *(void *)(v34 + 8 * v14 + 88); !i; unint64_t i = *(void *)(v34 + 8 * v16 + 64))
          {
            int64_t v13 = __OFADD__(1, v16++);
            if (v13) {
              BUG();
            }
            if (v16 >= v33) {
              return v8;
            }
          }
        }
      }
    }
    _BitScanForward64(&v17, i);
    uint64_t v32 = i & (i - 1);
    uint64_t v31 = v16;
    unint64_t v12 = v17 + (v16 << 6);
LABEL_15:
    Swift::String v35 = *(unsigned char *)(*(void *)(v34 + 48) + v12);
    uint64_t v18 = *(void (**)(long long *, unint64_t, uint64_t))(v30 + 16);
    uint64_t v19 = v28;
    uint64_t v20 = v27;
    v18(v28, *(void *)(v34 + 56) + v12 * *(void *)(v30 + 72), v27);
    int64_t v26 = v20;
    uint64_t v21 = (long long *)__swift_allocate_boxed_opaque_existential_1(&v25);
    v18(v21, (unint64_t)v19, v20);
    (*(void (**)(long long *, uint64_t))(v30 + 8))(v19, v20);
    unint64_t v8 = v29;
    v29[(v12 >> 6) + 8] |= 1 << v12;
    *(unsigned char *)(v8[6] + v12) = v35;
    outlined init with take of Any(&v25, (_OWORD *)(v8[7] + 32 * v12));
    long long v22 = v8[2];
    int64_t v13 = __OFADD__(1, v22);
    long long v23 = v22 + 1;
    if (v13) {
      BUG();
    }
    _OWORD v8[2] = v23;
    uint64_t v2 = v31;
    BOOL v10 = v32;
  }
}

{
  uint64_t v1;
  uint64_t v2;
  void *v3;
  uint64_t v4;
  unint64_t v5;
  int64_t i;
  unint64_t v7;
  unint64_t v8;
  int64_t v9;
  BOOL v10;
  int64_t v11;
  unint64_t j;
  unint64_t v13;
  char v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  long long v19;
  void *v20;
  int64_t v21;

  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<MLProgress.Metric, Any>);
  uint64_t v1 = static _DictionaryStorage.copy(original:)(a1);
  uint64_t v2 = 1 << *(unsigned char *)(a1 + 32);
  uint64_t v3 = (void *)v1;
  uint64_t v4 = ~(-1 << v2);
  if (v2 >= 64) {
    uint64_t v4 = -1;
  }
  uint64_t v5 = *(void *)(a1 + 64) & v4;
  uint64_t v21 = (unint64_t)(v2 + 63) >> 6;
  for (unint64_t i = 0; ; unint64_t i = v9)
  {
    if (v5)
    {
      _BitScanForward64(&v7, v5);
      v5 &= v5 - 1;
      unint64_t v8 = v7 | (i << 6);
      unint64_t v9 = i;
      goto LABEL_15;
    }
    BOOL v10 = __OFADD__(1, i);
    int64_t v11 = i + 1;
    if (v10) {
      BUG();
    }
    if (v11 >= v21) {
      break;
    }
    unint64_t j = *(void *)(a1 + 8 * v11 + 64);
    if (j)
    {
      unint64_t v9 = v11;
    }
    else
    {
      unint64_t v9 = v11 + 1;
      if (v11 + 1 >= v21) {
        return v3;
      }
      unint64_t j = *(void *)(a1 + 8 * v11 + 72);
      if (!j)
      {
        unint64_t v9 = v11 + 2;
        if (v11 + 2 >= v21) {
          return v3;
        }
        unint64_t j = *(void *)(a1 + 8 * v11 + 80);
        if (!j)
        {
          unint64_t v9 = v11 + 3;
          if (v11 + 3 >= v21) {
            return v3;
          }
          for (unint64_t j = *(void *)(a1 + 8 * v11 + 88); !j; unint64_t j = *(void *)(a1 + 8 * v9 + 64))
          {
            BOOL v10 = __OFADD__(1, v9++);
            if (v10) {
              BUG();
            }
            if (v9 >= v21) {
              return v3;
            }
          }
        }
      }
    }
    _BitScanForward64(&v13, j);
    uint64_t v5 = j & (j - 1);
    unint64_t v8 = v13 + (v9 << 6);
LABEL_15:
    unint64_t v14 = *(unsigned char *)(*(void *)(a1 + 48) + v8);
    uint64_t v15 = *(void *)(*(void *)(a1 + 56) + 8 * v8);
    uint64_t v20 = &type metadata for Double;
    *(void *)&uint64_t v19 = v15;
    v3[(v8 >> 6) + 8] |= 1 << v8;
    *(unsigned char *)(v3[6] + v8) = v14;
    outlined init with take of Any(&v19, (_OWORD *)(v3[7] + 32 * v8));
    uint64_t v16 = v3[2];
    BOOL v10 = __OFADD__(1, v16);
    char v17 = v16 + 1;
    if (v10) {
      BUG();
    }
    v3[2] = v17;
  }
  return v3;
}

{
  uint64_t v1;
  uint64_t v2;
  void *v3;
  int64_t v4;
  void *v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  int64_t v14;
  unint64_t v15;
  unint64_t v16;
  int64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t *v27;
  uint64_t *v28;
  uint64_t v29;
  uint64_t v30;
  void *v31;
  uint64_t v32;
  unint64_t v33;
  unint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  BOOL v38;
  uint64_t v39;
  uint64_t v41;
  void (*v42)(uint64_t *, uint64_t, uint64_t);
  uint64_t v43;
  uint64_t v44;
  unint64_t v45;
  uint64_t v46;
  uint64_t v47;
  void *i;
  unint64_t v49;
  void *v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t *v54;
  uint64_t v55;
  int64_t v56;
  void *v57;
  int64_t v58;

  uint64_t v2 = v1;
  uint64_t v3 = (void *)a1;
  char v56 = 0;
  Swift::String v53 = type metadata accessor for URL(0);
  uint64_t v55 = *(void *)(v53 - 8);
  uint64_t v4 = *(void *)(v55 + 64);
  uint64_t v5 = alloca(v4);
  unint64_t v6 = alloca(v4);
  char v54 = &v41;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<String, [CIImage]>);
  int64_t v7 = static _DictionaryStorage.copy(original:)(a1);
  unint64_t v8 = 1 << *(unsigned char *)(a1 + 32);
  unint64_t v9 = ~(-1 << v8);
  if (v8 >= 64) {
    unint64_t v9 = -1;
  }
  BOOL v10 = (void *)v7;
  int64_t v11 = v3[8] & v9;
  char v58 = (unint64_t)(v8 + 63) >> 6;
  uint64_t v50 = (void *)v7;
  for (i = v3; ; uint64_t v3 = i)
  {
    if (v11)
    {
      _BitScanForward64(&v12, v11);
      int64_t v13 = (v11 - 1) & v11;
      unint64_t v14 = v56;
      uint64_t v15 = v12 | (v56 << 6);
      goto LABEL_17;
    }
    unint64_t v14 = v56 + 1;
    if (__OFADD__(1, v56)) {
      BUG();
    }
    if (v14 >= v58) {
      return v10;
    }
    uint64_t v16 = v3[v14 + 8];
    if (!v16) {
      break;
    }
LABEL_16:
    _BitScanForward64(&v18, v16);
    int64_t v13 = v16 & (v16 - 1);
    uint64_t v15 = v18 + (v14 << 6);
LABEL_17:
    uint64_t v45 = v13;
    char v56 = v14;
    uint64_t v19 = v3[6];
    uint64_t v20 = v3[7];
    uint64_t v47 = *(void *)(v19 + 16 * v15);
    long long v46 = 16 * v15;
    uint64_t v21 = *(void *)(v19 + 16 * v15 + 8);
    long long v22 = *(void *)(v20 + 8 * v15);
    long long v23 = *(void *)(v22 + 16);
    if (v23)
    {
      uint64_t v49 = v15;
      uint64_t v24 = v23;
      unint64_t v57 = _swiftEmptyArrayStorage;
      uint64_t v51 = v21;
      swift_bridgeObjectRetain(v21);
      swift_bridgeObjectRetain(v22);
      unint64_t v43 = v24;
      specialized ContiguousArray.reserveCapacity(_:)(v24);
      uint64_t v25 = (*(unsigned __int8 *)(v55 + 80) + 32) & ~*(unsigned __int8 *)(v55 + 80);
      CGRect v52 = v22;
      int64_t v26 = v22 + v25;
      unint64_t v42 = *(void (**)(uint64_t *, uint64_t, uint64_t))(v55 + 16);
      uint64_t v44 = *(void *)(v55 + 72);
      while (1)
      {
        uint64_t v27 = v54;
        v42(v54, v26, v53);
        static ImageReader.read(url:)(v27);
        if (v2) {
          break;
        }
        uint64_t v28 = v54;
        (*(void (**)(uint64_t *, uint64_t))(v55 + 8))(v54, v53);
        specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()(v28);
        unint64_t v41 = 0;
        uint64_t v29 = v57[2];
        specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)(v29);
        int64_t v30 = v29;
        uint64_t v2 = v41;
        specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)(v30);
        specialized ContiguousArray._endMutation()(v30);
        v26 += v44;
        if (!--v43)
        {
          uint64_t v31 = v57;
          swift_bridgeObjectRelease(v52);
          uint64_t v15 = v49;
          uint64_t v21 = v51;
          goto LABEL_23;
        }
      }
      (*(void (**)(uint64_t *, uint64_t))(v55 + 8))(v54, v53);
      swift_bridgeObjectRelease(v52);
      swift_bridgeObjectRelease(v51);
      BOOL v10 = v50;
      swift_release();
      swift_release();
      return v10;
    }
    swift_bridgeObjectRetain(v21);
    uint64_t v31 = _swiftEmptyArrayStorage;
LABEL_23:
    uint64_t v32 = 1 << v15;
    uint64_t v33 = v15 >> 6;
    char v34 = v15;
    BOOL v10 = v50;
    v50[v33 + 8] |= v32;
    Swift::String v35 = v10[6];
    char v36 = v46;
    *(void *)(v35 + v46) = v47;
    *(void *)(v35 + v36 + 8) = v21;
    *(void *)(v10[7] + 8 * v34) = v31;
    int64_t v37 = v10[2];
    uint64_t v38 = __OFADD__(1, v37);
    uint64_t v39 = v37 + 1;
    int64_t v11 = v45;
    if (v38) {
      BUG();
    }
    v10[2] = v39;
  }
  char v17 = v56 + 2;
  if (v56 + 2 >= v58) {
    return v10;
  }
  uint64_t v16 = v3[v14 + 9];
  if (v16) {
    goto LABEL_15;
  }
  char v17 = v56 + 3;
  if (v56 + 3 >= v58) {
    return v10;
  }
  uint64_t v16 = v3[v14 + 10];
  if (v16) {
    goto LABEL_15;
  }
  char v17 = v56 + 4;
  if (v56 + 4 >= v58) {
    return v10;
  }
  uint64_t v16 = v3[v14 + 11];
  if (v16)
  {
LABEL_15:
    unint64_t v14 = v17;
    goto LABEL_16;
  }
  unint64_t v14 = v56 + 4;
  while (1)
  {
    uint64_t v38 = __OFADD__(1, v14++);
    if (v38) {
      BUG();
    }
    if (v14 >= v58) {
      return v10;
    }
    uint64_t v16 = v3[v14 + 8];
    if (v16) {
      goto LABEL_16;
    }
  }
}

{
  int64_t v2;
  int64_t v3;
  void *v4;
  void *v5;
  void *result;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  int64_t v14;
  BOOL v15;
  int64_t v16;
  unint64_t i;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  int64_t v24;
  void *v25;
  uint64_t *v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  int64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t *v40;
  unint64_t v41;
  uint64_t v42;
  int64_t v43;
  unint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  void *v48;
  uint64_t v49;
  void *v50;
  int64_t v51;

  uint64_t v2 = 0;
  uint64_t v38 = type metadata accessor for URL(0);
  uint64_t v39 = *(void *)(v38 - 8);
  uint64_t v3 = *(void *)(v39 + 64);
  uint64_t v4 = alloca(v3);
  uint64_t v5 = alloca(v3);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<String, [URL]>);
  uint64_t result = (void *)static _DictionaryStorage.copy(original:)(a1);
  int64_t v7 = a1;
  unint64_t v8 = 1 << *(unsigned char *)(a1 + 32);
  unint64_t v9 = ~(-1 << v8);
  if (v8 >= 64) {
    unint64_t v9 = -1;
  }
  BOOL v10 = *(void *)(a1 + 64) & v9;
  uint64_t v51 = (unint64_t)(v8 + 63) >> 6;
  uint64_t v49 = a1;
  unint64_t v48 = result;
  uint64_t v40 = &v35;
  while (1)
  {
    if (v10)
    {
      _BitScanForward64(&v11, v10);
      unint64_t v12 = (v10 - 1) & v10;
      int64_t v13 = v11 | (v2 << 6);
      unint64_t v14 = v2;
      goto LABEL_15;
    }
    uint64_t v15 = __OFADD__(1, v2);
    uint64_t v16 = v2 + 1;
    if (v15) {
      BUG();
    }
    if (v16 >= v51) {
      return result;
    }
    unint64_t i = *(void *)(v7 + 8 * v16 + 64);
    if (i)
    {
      unint64_t v14 = v16;
    }
    else
    {
      unint64_t v14 = v16 + 1;
      if (v16 + 1 >= v51) {
        return result;
      }
      unint64_t i = *(void *)(v7 + 8 * v16 + 72);
      if (!i)
      {
        unint64_t v14 = v16 + 2;
        if (v16 + 2 >= v51) {
          return result;
        }
        unint64_t i = *(void *)(v7 + 8 * v16 + 80);
        if (!i)
        {
          unint64_t v14 = v16 + 3;
          if (v16 + 3 >= v51) {
            return result;
          }
          for (unint64_t i = *(void *)(v7 + 8 * v16 + 88); !i; unint64_t i = *(void *)(v7 + 8 * v14 + 64))
          {
            uint64_t v15 = __OFADD__(1, v14++);
            if (v15) {
              BUG();
            }
            if (v14 >= v51) {
              return result;
            }
          }
        }
      }
    }
    _BitScanForward64(&v18, i);
    unint64_t v12 = i & (i - 1);
    int64_t v13 = v18 + (v14 << 6);
LABEL_15:
    uint64_t v44 = v12;
    unint64_t v43 = v14;
    uint64_t v19 = 16 * v13;
    uint64_t v20 = *(void *)(v7 + 48);
    uint64_t v21 = *(void *)(v7 + 56);
    unint64_t v42 = *(void *)(v20 + 16 * v13);
    long long v22 = *(void *)(v20 + 16 * v13 + 8);
    unint64_t v41 = v13;
    long long v23 = *(void *)(v21 + 8 * v13);
    uint64_t v24 = *(void *)(v23 + 16);
    if (v24)
    {
      uint64_t v45 = 16 * v13;
      uint64_t v50 = _swiftEmptyArrayStorage;
      long long v46 = v22;
      swift_bridgeObjectRetain(v22);
      swift_bridgeObjectRetain(v23);
      int64_t v37 = v24;
      specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v24, 0);
      uint64_t v25 = v50;
      uint64_t v47 = v23;
      int64_t v26 = (uint64_t *)(v23 + 40);
      do
      {
        char v36 = *(v26 - 1);
        uint64_t v27 = *v26;
        swift_bridgeObjectRetain(*v26);
        URL.init(fileURLWithPath:)(v36, v27);
        swift_bridgeObjectRelease(v27);
        uint64_t v50 = v25;
        uint64_t v28 = v25[2];
        if (v25[3] >> 1 <= v28)
        {
          specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v25[3] >= 2uLL, v28 + 1, 1);
          uint64_t v25 = v50;
        }
        v25[2] = v28 + 1;
        (*(void (**)(char *, uint64_t *, uint64_t))(v39 + 32))((char *)v25+ ((*(unsigned __int8 *)(v39 + 80) + 32) & ~*(unsigned __int8 *)(v39 + 80))+ *(void *)(v39 + 72) * v28, v40, v38);
        v26 += 2;
        --v37;
      }
      while (v37);
      swift_bridgeObjectRelease(v47);
      int64_t v7 = v49;
      uint64_t v19 = v45;
      uint64_t v29 = v46;
    }
    else
    {
      uint64_t v29 = v22;
      int64_t v30 = v7;
      swift_bridgeObjectRetain(v22);
      int64_t v7 = v30;
      uint64_t v25 = _swiftEmptyArrayStorage;
    }
    uint64_t v31 = v41;
    uint64_t result = v48;
    v48[(v41 >> 6) + 8] |= 1 << v41;
    uint64_t v32 = result[6];
    *(void *)(v32 + v19) = v42;
    *(void *)(v32 + v19 + 8) = v29;
    *(void *)(result[7] + 8 * v31) = v25;
    uint64_t v33 = result[2];
    uint64_t v15 = __OFADD__(1, v33);
    char v34 = v33 + 1;
    if (v15) {
      BUG();
    }
    result[2] = v34;
    uint64_t v2 = v43;
    BOOL v10 = v44;
  }
}

{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  void *v7;
  int64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  int64_t v12;
  BOOL v13;
  int64_t v14;
  unint64_t i;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  int64_t v20;
  BOOL v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  int64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  void *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  int64_t v36;
  uint64_t v37;
  unint64_t v38;
  uint64_t v39;
  uint64_t v40;
  unint64_t v41;
  uint64_t v42;
  char v43;
  uint64_t v44;
  void *v45;
  uint64_t v46;
  uint64_t v47;
  int64_t v48;

  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<String, [String]>);
  uint64_t v2 = static _DictionaryStorage.copy(original:)(a1);
  uint64_t v3 = a1;
  uint64_t v4 = 1 << *(unsigned char *)(a1 + 32);
  uint64_t v5 = ~(-1 << v4);
  if (v4 >= 64) {
    uint64_t v5 = -1;
  }
  unint64_t v6 = *(void *)(a1 + 64) & v5;
  int64_t v7 = (void *)v2;
  unint64_t v48 = (unint64_t)(v4 + 63) >> 6;
  unint64_t v8 = 0;
  uint64_t v44 = a1;
  uint64_t v45 = v7;
  while (1)
  {
    if (v6)
    {
      _BitScanForward64(&v9, v6);
      BOOL v10 = (v6 - 1) & v6;
      int64_t v11 = v9 | (v8 << 6);
      unint64_t v12 = v8;
      goto LABEL_15;
    }
    int64_t v13 = __OFADD__(1, v8);
    unint64_t v14 = v8 + 1;
    if (v13) {
      BUG();
    }
    if (v14 >= v48) {
      return v7;
    }
    unint64_t i = *(void *)(v3 + 8 * v14 + 64);
    if (i)
    {
      unint64_t v12 = v14;
    }
    else
    {
      unint64_t v12 = v14 + 1;
      if (v14 + 1 >= v48) {
        return v7;
      }
      unint64_t i = *(void *)(v3 + 8 * v14 + 72);
      if (!i)
      {
        unint64_t v12 = v14 + 2;
        if (v14 + 2 >= v48) {
          return v7;
        }
        unint64_t i = *(void *)(v3 + 8 * v14 + 80);
        if (!i)
        {
          unint64_t v12 = v14 + 3;
          if (v14 + 3 >= v48) {
            return v7;
          }
          for (unint64_t i = *(void *)(v3 + 8 * v14 + 88); !i; unint64_t i = *(void *)(v3 + 8 * v12 + 64))
          {
            int64_t v13 = __OFADD__(1, v12++);
            if (v13) {
              BUG();
            }
            if (v12 >= v48) {
              return v7;
            }
          }
        }
      }
    }
    _BitScanForward64(&v16, i);
    BOOL v10 = i & (i - 1);
    int64_t v11 = v16 + (v12 << 6);
LABEL_15:
    unint64_t v41 = v10;
    char v17 = *(void *)(v3 + 48);
    uint64_t v40 = *(void *)(v17 + 16 * v11);
    uint64_t v39 = 16 * v11;
    uint64_t v18 = *(void *)(v17 + 16 * v11 + 8);
    uint64_t v38 = v11;
    uint64_t v19 = *(void *)(*(void *)(v3 + 56) + 8 * v11);
    uint64_t v20 = *(void *)(v19 + 16);
    if (v20)
    {
      unint64_t v42 = *(void *)(v17 + 16 * v11 + 8);
      swift_bridgeObjectRetain(v18);
      swift_bridgeObjectRetain(v19);
      char v36 = v20;
      specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v20, 0);
      uint64_t v21 = 0;
      long long v22 = *(void *)(type metadata accessor for URL(0) - 8);
      unint64_t v43 = v19;
      long long v23 = v19 + ((*(unsigned __int8 *)(v22 + 80) + 32) & ~*(unsigned __int8 *)(v22 + 80));
      int64_t v37 = *(void *)(v22 + 72);
      do
      {
        uint64_t v24 = URL.path.getter(v21);
        int64_t v26 = _swiftEmptyArrayStorage[2];
        uint64_t v27 = v26 + 1;
        if (_swiftEmptyArrayStorage[3] >> 1 <= v26)
        {
          uint64_t v21 = _swiftEmptyArrayStorage[3] >= 2uLL;
          long long v46 = v24;
          uint64_t v47 = v25;
          specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v21, v27, 1);
          uint64_t v25 = v47;
          uint64_t v24 = v46;
        }
        _swiftEmptyArrayStorage[2] = v27;
        uint64_t v28 = 2 * v26;
        _swiftEmptyArrayStorage[v28 + 4] = v24;
        _swiftEmptyArrayStorage[v28 + 5] = v25;
        v23 += v37;
        --v36;
      }
      while (v36);
      swift_bridgeObjectRelease(v43);
      uint64_t v3 = v44;
      int64_t v7 = v45;
      uint64_t v29 = v42;
    }
    else
    {
      uint64_t v29 = *(void *)(v17 + 16 * v11 + 8);
      int64_t v30 = v3;
      uint64_t v31 = v7;
      swift_bridgeObjectRetain(v18);
      int64_t v7 = v31;
      uint64_t v3 = v30;
    }
    v7[(v38 >> 6) + 8] |= 1 << v38;
    uint64_t v32 = v7[6];
    *(void *)(v32 + v39) = v40;
    *(void *)(v32 + v39 + 8) = v29;
    *(void *)(v7[7] + 8 * v38) = _swiftEmptyArrayStorage;
    uint64_t v33 = v7[2];
    int64_t v13 = __OFADD__(1, v33);
    char v34 = v33 + 1;
    if (v13) {
      BUG();
    }
    v7[2] = v34;
    unint64_t v8 = v12;
    unint64_t v6 = v41;
  }
}

{
  uint64_t v1;
  int64_t v2;
  int64_t v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  int64_t v16;
  BOOL v17;
  int64_t v18;
  unint64_t i;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  int64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t *v28;
  uint64_t v29;
  uint64_t *v30;
  uint64_t v31;
  void (*v32)(uint64_t *, uint64_t);
  void *v33;
  unint64_t v34;
  uint64_t v35;
  uint64_t v36;
  unint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  int64_t v46;
  void (*v47)(uint64_t *, uint64_t, uint64_t);
  uint64_t v48;
  uint64_t v49;
  uint64_t *v50;
  unint64_t v51;
  uint64_t v52;
  uint64_t v53;
  int64_t v54;
  unint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  void *v59;
  uint64_t *v60;
  uint64_t v61;
  int64_t v62;
  void *v63;

  uint64_t v1 = a1;
  uint64_t v2 = 0;
  uint64_t v49 = type metadata accessor for URL(0);
  Swift::String v61 = *(void *)(v49 - 8);
  uint64_t v3 = *(void *)(v61 + 64);
  uint64_t v4 = alloca(v3);
  uint64_t v5 = alloca(v3);
  uint64_t v50 = &v43;
  unint64_t v6 = alloca(v3);
  int64_t v7 = alloca(v3);
  uint64_t v60 = &v43;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<String, [String]>);
  unint64_t v8 = static _DictionaryStorage.copy(original:)(a1);
  unint64_t v9 = 1 << *(unsigned char *)(a1 + 32);
  BOOL v10 = (void *)v8;
  int64_t v11 = ~(-1 << v9);
  if (v9 >= 64) {
    int64_t v11 = -1;
  }
  unint64_t v12 = *(void *)(a1 + 64) & v11;
  char v62 = (unint64_t)(v9 + 63) >> 6;
  char v58 = a1;
  uint64_t v59 = (void *)v8;
  while (1)
  {
    if (v12)
    {
      _BitScanForward64(&v13, v12);
      unint64_t v14 = (v12 - 1) & v12;
      uint64_t v15 = v13 | (v2 << 6);
      uint64_t v16 = v2;
      goto LABEL_15;
    }
    char v17 = __OFADD__(1, v2);
    uint64_t v18 = v2 + 1;
    if (v17) {
      BUG();
    }
    if (v18 >= v62) {
      return v10;
    }
    unint64_t i = *(void *)(v1 + 8 * v18 + 64);
    if (i)
    {
      uint64_t v16 = v18;
    }
    else
    {
      uint64_t v16 = v18 + 1;
      if (v18 + 1 >= v62) {
        return v10;
      }
      unint64_t i = *(void *)(v1 + 8 * v18 + 72);
      if (!i)
      {
        uint64_t v16 = v18 + 2;
        if (v18 + 2 >= v62) {
          return v10;
        }
        unint64_t i = *(void *)(v1 + 8 * v18 + 80);
        if (!i)
        {
          uint64_t v16 = v18 + 3;
          if (v18 + 3 >= v62) {
            return v10;
          }
          for (unint64_t i = *(void *)(v1 + 8 * v18 + 88); !i; unint64_t i = *(void *)(v1 + 8 * v16 + 64))
          {
            char v17 = __OFADD__(1, v16++);
            if (v17) {
              BUG();
            }
            if (v16 >= v62) {
              return v10;
            }
          }
        }
      }
    }
    _BitScanForward64(&v20, i);
    unint64_t v14 = i & (i - 1);
    uint64_t v15 = v20 + (v16 << 6);
LABEL_15:
    uint64_t v55 = v14;
    char v54 = v16;
    uint64_t v21 = *(void *)(v1 + 48);
    long long v22 = *(void *)(v1 + 56);
    Swift::String v53 = *(void *)(v21 + 16 * v15);
    CGRect v52 = 16 * v15;
    long long v23 = *(void *)(v21 + 16 * v15 + 8);
    uint64_t v51 = v15;
    uint64_t v24 = *(void *)(v22 + 8 * v15);
    uint64_t v25 = *(void *)(v24 + 16);
    if (v25)
    {
      Swift::String v63 = _swiftEmptyArrayStorage;
      char v56 = v23;
      swift_bridgeObjectRetain(v23);
      swift_bridgeObjectRetain(v24);
      long long v46 = v25;
      specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v25, 0);
      int64_t v26 = (*(unsigned __int8 *)(v61 + 80) + 32) & ~*(unsigned __int8 *)(v61 + 80);
      unint64_t v57 = v24;
      uint64_t v27 = v24 + v26;
      uint64_t v47 = *(void (**)(uint64_t *, uint64_t, uint64_t))(v61 + 16);
      unint64_t v48 = *(void *)(v61 + 72);
      do
      {
        uint64_t v28 = v60;
        unint64_t v43 = v27;
        uint64_t v29 = v49;
        v47(v60, v27, v49);
        int64_t v30 = v50;
        URL.absoluteURL.getter();
        uint64_t v44 = URL.path.getter(v28);
        uint64_t v45 = v31;
        uint64_t v32 = *(void (**)(uint64_t *, uint64_t))(v61 + 8);
        v32(v30, v29);
        v32(v60, v29);
        uint64_t v33 = v63;
        if (!swift_isUniquelyReferenced_nonNull_native(v63))
        {
          specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v33[2] + 1, 1);
          uint64_t v33 = v63;
        }
        char v34 = v33[2];
        if (v33[3] >> 1 <= v34)
        {
          specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v33[3] >= 2uLL, v34 + 1, 1);
          uint64_t v33 = v63;
        }
        long long v33[2] = v34 + 1;
        Swift::String v35 = 2 * v34;
        v33[v35 + 4] = v44;
        v33[v35 + 5] = v45;
        uint64_t v27 = v48 + v43;
        --v46;
      }
      while (v46);
      swift_bridgeObjectRelease(v57);
      uint64_t v1 = v58;
      BOOL v10 = v59;
      char v36 = v56;
    }
    else
    {
      char v36 = v23;
      swift_bridgeObjectRetain(v23);
      uint64_t v33 = _swiftEmptyArrayStorage;
    }
    int64_t v37 = v51;
    v10[(v51 >> 6) + 8] |= 1 << v51;
    uint64_t v38 = v10[6];
    uint64_t v39 = v52;
    *(void *)(v38 + v52) = v53;
    *(void *)(v38 + v39 + 8) = v36;
    *(void *)(v10[7] + 8 * v37) = v33;
    uint64_t v40 = v10[2];
    char v17 = __OFADD__(1, v40);
    unint64_t v41 = v40 + 1;
    if (v17) {
      BUG();
    }
    v10[2] = v41;
    uint64_t v2 = v54;
    unint64_t v12 = v55;
  }
}

uint64_t _sxRi_zRi0_zlySaySdGIsegr_SgWOe(uint64_t a1, uint64_t a2)
{
  if (a1) {
    return swift_release(a2);
  }
  return result;
}

uint64_t *outlined release of MLObjectDetector.PrecisionRecallCurve(uint64_t *a1)
{
  uint64_t v6 = *a1;
  uint64_t v1 = a1[1];
  uint64_t v2 = a1[3];
  uint64_t v3 = a1[4];
  uint64_t v4 = a1[5];
  swift_bridgeObjectRelease(a1[6]);
  swift_bridgeObjectRelease(v4);
  swift_bridgeObjectRelease(v3);
  swift_bridgeObjectRelease(v2);
  swift_bridgeObjectRelease(v1);
  swift_bridgeObjectRelease(v6);
  return a1;
}

void *outlined release of [Int?](void *a1)
{
  return a1;
}

uint64_t destroy for MLObjectDetector.AnnotatedPredictionForLabel(void *a1)
{
  return swift_bridgeObjectRelease(a1[3]);
}

uint64_t *initializeWithCopy for MLObjectDetector.AnnotatedPredictionForLabel(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3 = *a2;
  *a1 = *a2;
  uint64_t v4 = a2[1];
  a1[1] = v4;
  a1[2] = a2[2];
  uint64_t v5 = a2[3];
  a1[3] = v5;
  swift_bridgeObjectRetain(v3);
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRetain(v5);
  return a1;
}

uint64_t *assignWithCopy for MLObjectDetector.AnnotatedPredictionForLabel(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3 = *a2;
  uint64_t v4 = *a1;
  *a1 = *a2;
  swift_bridgeObjectRetain(v3);
  swift_bridgeObjectRelease(v4);
  uint64_t v5 = a2[1];
  uint64_t v6 = a1[1];
  a1[1] = v5;
  swift_bridgeObjectRetain(v5);
  swift_bridgeObjectRelease(v6);
  a1[2] = a2[2];
  uint64_t v7 = a2[3];
  uint64_t v8 = a1[3];
  a1[3] = v7;
  swift_bridgeObjectRetain(v7);
  swift_bridgeObjectRelease(v8);
  return a1;
}

void *assignWithTake for MLObjectDetector.AnnotatedPredictionForLabel(void *a1, uint64_t a2)
{
  swift_bridgeObjectRelease(*a1);
  uint64_t v3 = a1[1];
  *(_OWORD *)a1 = *(_OWORD *)a2;
  swift_bridgeObjectRelease(v3);
  a1[2] = *(void *)(a2 + 16);
  uint64_t v4 = a1[3];
  a1[3] = *(void *)(a2 + 24);
  swift_bridgeObjectRelease(v4);
  return a1;
}

ValueMetadata *type metadata accessor for MLObjectDetector.AnnotatedPredictionForLabel()
{
  return &type metadata for MLObjectDetector.AnnotatedPredictionForLabel;
}

uint64_t initializeBufferWithCopyOfBuffer for MLObjectDetectorMetrics(uint64_t *a1, uint64_t *a2)
{
  return initializeBufferWithCopyOfBuffer for CGRect(a1, a2);
}

uint64_t initializeBufferWithCopyOfBuffer for MLObjectDetector.Metrics(uint64_t *a1, uint64_t *a2)
{
  return initializeBufferWithCopyOfBuffer for CGRect(a1, a2);
}

uint64_t *initializeBufferWithCopyOfBuffer for PersistentParametersForTreeBasedMethods(uint64_t *a1, uint64_t *a2, int *a3)
{
  uint64_t v3 = a1;
  int v4 = *(_DWORD *)(*((void *)a3 - 1) + 80);
  if ((v4 & 0x20000) != 0)
  {
    uint64_t v10 = *a2;
    *uint64_t v3 = *a2;
    uint64_t v3 = (uint64_t *)(v10 + ((v4 + 16) & ~v4));
    swift_retain();
  }
  else
  {
    uint64_t v6 = type metadata accessor for DataFrame(0);
    uint64_t v19 = *(void (**)(uint64_t *, uint64_t *, uint64_t))(*(void *)(v6 - 8) + 16);
    v19(a1, a2, v6);
    uint64_t v7 = a3[5];
    __dst = (char *)a1 + v7;
    uint64_t v8 = (char *)a2 + v7;
    if (__swift_getEnumTagSinglePayload((uint64_t)v8, 1, v6))
    {
      uint64_t v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for DataFrame?);
      memcpy(__dst, v8, *(void *)(*(void *)(v9 - 8) + 64));
    }
    else
    {
      v19((uint64_t *)__dst, (uint64_t *)v8, v6);
      __swift_storeEnumTagSinglePayload((uint64_t)__dst, 0, 1, v6);
    }
    uint64_t v11 = a3[6];
    *(uint64_t *)((char *)a1 + v11) = *(uint64_t *)((char *)a2 + v11);
    uint64_t v12 = *(uint64_t *)((char *)a2 + v11 + 8);
    *(uint64_t *)((char *)a1 + v11 + 8) = v12;
    uint64_t v13 = a3[7];
    uint64_t v14 = *(uint64_t *)((char *)a2 + v13);
    *(uint64_t *)((char *)a1 + v13) = v14;
    uint64_t v15 = a3[8];
    unsigned int __dsta = (char *)a1 + v15;
    uint64_t v16 = (char *)a2 + v15;
    uint64_t v17 = type metadata accessor for BoostedTreeConfiguration(0);
    uint64_t v20 = *(void (**)(char *, char *, uint64_t))(*(void *)(v17 - 8) + 16);
    swift_bridgeObjectRetain(v12);
    swift_bridgeObjectRetain(v14);
    v20(__dsta, v16, v17);
  }
  return v3;
}

uint64_t destroy for PersistentParametersForTreeBasedMethods(uint64_t a1, int *a2)
{
  uint64_t v2 = type metadata accessor for DataFrame(0);
  uint64_t v3 = *(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8);
  v3(a1, v2);
  uint64_t v4 = a1 + a2[5];
  if (!__swift_getEnumTagSinglePayload(v4, 1, v2)) {
    v3(v4, v2);
  }
  swift_bridgeObjectRelease(*(void *)(a1 + a2[6] + 8));
  swift_bridgeObjectRelease(*(void *)(a1 + a2[7]));
  uint64_t v5 = a1 + a2[8];
  uint64_t v6 = type metadata accessor for BoostedTreeConfiguration(0);
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v6 - 8) + 8))(v5, v6);
}

char *initializeWithCopy for PersistentParametersForTreeBasedMethods(char *a1, char *a2, int *a3)
{
  uint64_t v4 = type metadata accessor for DataFrame(0);
  uint64_t v16 = *(void (**)(void *, const void *, uint64_t))(*(void *)(v4 - 8) + 16);
  v16(a1, a2, v4);
  uint64_t v5 = a3[5];
  __dst = &a1[v5];
  uint64_t v6 = &a2[v5];
  if (__swift_getEnumTagSinglePayload((uint64_t)v6, 1, v4))
  {
    uint64_t v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for DataFrame?);
    memcpy(__dst, v6, *(void *)(*(void *)(v7 - 8) + 64));
  }
  else
  {
    v16(__dst, v6, v4);
    __swift_storeEnumTagSinglePayload((uint64_t)__dst, 0, 1, v4);
  }
  uint64_t v8 = a3[6];
  *(void *)&a1[v8] = *(void *)&a2[v8];
  uint64_t v9 = *(void *)&a2[v8 + 8];
  *(void *)&a1[v8 + 8] = v9;
  uint64_t v10 = a3[7];
  uint64_t v11 = *(void *)&a2[v10];
  *(void *)&a1[v10] = v11;
  uint64_t v12 = a3[8];
  unsigned int __dsta = &a1[v12];
  uint64_t v13 = &a2[v12];
  uint64_t v14 = type metadata accessor for BoostedTreeConfiguration(0);
  uint64_t v17 = *(void (**)(void *, char *, uint64_t))(*(void *)(v14 - 8) + 16);
  swift_bridgeObjectRetain(v9);
  swift_bridgeObjectRetain(v11);
  v17(__dsta, v13, v14);
  return a1;
}

uint64_t assignWithCopy for PersistentParametersForTreeBasedMethods(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v5 = type metadata accessor for DataFrame(0);
  uint64_t v25 = *(void *)(v5 - 8);
  uint64_t v24 = *(void (**)(uint64_t, uint64_t, uint64_t))(v25 + 24);
  v24(a1, a2, v5);
  long long v23 = a3;
  uint64_t v6 = a3[5];
  uint64_t v7 = (void *)(a1 + v6);
  uint64_t v8 = (const void *)(a2 + v6);
  LODWORD(a3) = __swift_getEnumTagSinglePayload((uint64_t)v7, 1, v5);
  int EnumTagSinglePayload = __swift_getEnumTagSinglePayload((uint64_t)v8, 1, v5);
  if (a3)
  {
    if (!EnumTagSinglePayload)
    {
      (*(void (**)(void *, const void *, uint64_t))(v25 + 16))(v7, v8, v5);
      __swift_storeEnumTagSinglePayload((uint64_t)v7, 0, 1, v5);
      goto LABEL_9;
    }
    size_t v11 = *(void *)(*(void *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for DataFrame?)
                                - 8)
                    + 64);
  }
  else
  {
    if (!EnumTagSinglePayload)
    {
      v24((uint64_t)v7, (uint64_t)v8, v5);
      goto LABEL_9;
    }
    (*(void (**)(void *, uint64_t, uint64_t, void (*)(uint64_t, uint64_t, uint64_t)))(v25 + 8))(v7, v5, v10, v24);
    size_t v11 = *(void *)(*(void *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for DataFrame?)
                                - 8)
                    + 64);
  }
  memcpy(v7, v8, v11);
LABEL_9:
  uint64_t v12 = v23[6];
  *(void *)(a1 + v12) = *(void *)(a2 + v12);
  uint64_t v13 = *(void *)(a2 + v12 + 8);
  uint64_t v14 = *(void *)(a1 + v12 + 8);
  *(void *)(a1 + v12 + 8) = v13;
  swift_bridgeObjectRetain(v13);
  swift_bridgeObjectRelease(v14);
  uint64_t v15 = v23[7];
  uint64_t v16 = *(void *)(a2 + v15);
  uint64_t v17 = *(void *)(a1 + v15);
  *(void *)(a1 + v15) = v16;
  swift_bridgeObjectRetain(v16);
  swift_bridgeObjectRelease(v17);
  uint64_t v18 = v23[8];
  uint64_t v19 = a1 + v18;
  uint64_t v20 = v18 + a2;
  uint64_t v21 = type metadata accessor for BoostedTreeConfiguration(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v21 - 8) + 24))(v19, v20, v21);
  return a1;
}

char *initializeWithTake for PersistentParametersForTreeBasedMethods(char *a1, char *a2, int *a3)
{
  uint64_t v4 = type metadata accessor for DataFrame(0);
  uint64_t v13 = *(void (**)(void *, const void *, uint64_t))(*(void *)(v4 - 8) + 32);
  v13(a1, a2, v4);
  uint64_t v5 = a3[5];
  __dst = &a1[v5];
  uint64_t v6 = &a2[v5];
  if (__swift_getEnumTagSinglePayload((uint64_t)v6, 1, v4))
  {
    uint64_t v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for DataFrame?);
    memcpy(__dst, v6, *(void *)(*(void *)(v7 - 8) + 64));
  }
  else
  {
    v13(__dst, v6, v4);
    __swift_storeEnumTagSinglePayload((uint64_t)__dst, 0, 1, v4);
  }
  *(_OWORD *)&a1[a3[6]] = *(_OWORD *)&a2[a3[6]];
  *(void *)&a1[a3[7]] = *(void *)&a2[a3[7]];
  uint64_t v8 = a3[8];
  uint64_t v9 = &a1[v8];
  uint64_t v10 = &a2[v8];
  uint64_t v11 = type metadata accessor for BoostedTreeConfiguration(0);
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v11 - 8) + 32))(v9, v10, v11);
  return a1;
}

uint64_t assignWithTake for PersistentParametersForTreeBasedMethods(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v5 = type metadata accessor for DataFrame(0);
  uint64_t v23 = *(void *)(v5 - 8);
  long long v22 = *(void (**)(uint64_t, uint64_t, uint64_t))(v23 + 40);
  v22(a1, a2, v5);
  uint64_t v21 = a3;
  uint64_t v6 = a3[5];
  uint64_t v7 = (void *)(a1 + v6);
  uint64_t v8 = (const void *)(a2 + v6);
  LODWORD(a3) = __swift_getEnumTagSinglePayload((uint64_t)v7, 1, v5);
  int EnumTagSinglePayload = __swift_getEnumTagSinglePayload((uint64_t)v8, 1, v5);
  if (a3)
  {
    if (!EnumTagSinglePayload)
    {
      (*(void (**)(void *, const void *, uint64_t))(v23 + 32))(v7, v8, v5);
      __swift_storeEnumTagSinglePayload((uint64_t)v7, 0, 1, v5);
      goto LABEL_9;
    }
    size_t v11 = *(void *)(*(void *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for DataFrame?)
                                - 8)
                    + 64);
  }
  else
  {
    if (!EnumTagSinglePayload)
    {
      v22((uint64_t)v7, (uint64_t)v8, v5);
      goto LABEL_9;
    }
    (*(void (**)(void *, uint64_t, uint64_t, void (*)(uint64_t, uint64_t, uint64_t)))(v23 + 8))(v7, v5, v10, v22);
    size_t v11 = *(void *)(*(void *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for DataFrame?)
                                - 8)
                    + 64);
  }
  memcpy(v7, v8, v11);
LABEL_9:
  uint64_t v12 = v21[6];
  *(void *)(a1 + v12) = *(void *)(a2 + v12);
  uint64_t v13 = *(void *)(a1 + v12 + 8);
  *(void *)(a1 + v12 + 8) = *(void *)(a2 + v12 + 8);
  swift_bridgeObjectRelease(v13);
  uint64_t v14 = v21[7];
  uint64_t v15 = *(void *)(a1 + v14);
  *(void *)(a1 + v14) = *(void *)(a2 + v14);
  swift_bridgeObjectRelease(v15);
  uint64_t v16 = v21[8];
  uint64_t v17 = a1 + v16;
  uint64_t v18 = v16 + a2;
  uint64_t v19 = type metadata accessor for BoostedTreeConfiguration(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v19 - 8) + 40))(v17, v18, v19);
  return a1;
}

uint64_t getEnumTagSinglePayload for PersistentParametersForTreeBasedMethods(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_53BFD);
}

uint64_t sub_53BFD(uint64_t a1, unsigned int a2, int *a3)
{
  uint64_t v4 = a1;
  uint64_t v5 = type metadata accessor for DataFrame(0);
  if (*(_DWORD *)(*(void *)(v5 - 8) + 84) == a2) {
    return __swift_getEnumTagSinglePayload(v4, a2, v5);
  }
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for DataFrame?);
  if (*(_DWORD *)(*(void *)(v5 - 8) + 84) == a2)
  {
    uint64_t v6 = a3[5];
LABEL_9:
    uint64_t v4 = v6 + a1;
    return __swift_getEnumTagSinglePayload(v4, a2, v5);
  }
  if (a2 != 0x7FFFFFFF)
  {
    uint64_t v5 = type metadata accessor for BoostedTreeConfiguration(0);
    uint64_t v6 = a3[8];
    goto LABEL_9;
  }
  uint64_t result = 0;
  if ((*(void *)(a1 + a3[6] + 8) & 0xFFFFFFFF00000001) == 0) {
    return (*(void *)(a1 + a3[6] + 8) >> 1) + 1;
  }
  return result;
}

uint64_t storeEnumTagSinglePayload for PersistentParametersForTreeBasedMethods(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_53CA6);
}

uint64_t sub_53CA6(uint64_t a1, unsigned int a2, int a3, int *a4)
{
  uint64_t v6 = a1;
  uint64_t v7 = type metadata accessor for DataFrame(0);
  if (*(_DWORD *)(*(void *)(v7 - 8) + 84) != a3)
  {
    uint64_t v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for DataFrame?);
    if (*(_DWORD *)(*(void *)(v7 - 8) + 84) == a3)
    {
      uint64_t v8 = a4[5];
    }
    else
    {
      if (a3 == 0x7FFFFFFF)
      {
        uint64_t result = a4[6];
        *(void *)(a1 + result + 8) = 2 * (a2 - 1);
        return result;
      }
      uint64_t v7 = type metadata accessor for BoostedTreeConfiguration(0);
      uint64_t v8 = a4[8];
    }
    uint64_t v6 = v8 + a1;
  }
  return __swift_storeEnumTagSinglePayload(v6, a2, a2, v7);
}

uint64_t type metadata accessor for PersistentParametersForTreeBasedMethods(uint64_t a1)
{
  uint64_t result = type metadata singleton initialization cache for PersistentParametersForTreeBasedMethods;
  if (!type metadata singleton initialization cache for PersistentParametersForTreeBasedMethods) {
    return swift_getSingletonMetadata(a1, &nominal type descriptor for PersistentParametersForTreeBasedMethods);
  }
  return result;
}

uint64_t type metadata completion function for PersistentParametersForTreeBasedMethods(uint64_t a1)
{
  uint64_t result = type metadata accessor for DataFrame(319);
  if (v2 <= 0x3F)
  {
    v5[0] = *(void *)(result - 8) + 64;
    uint64_t result = type metadata accessor for DataFrame?(319);
    if (v3 <= 0x3F)
    {
      v5[1] = *(void *)(result - 8) + 64;
      _OWORD v5[2] = &unk_3479A8;
      void v5[3] = (char *)&value witness table for Builtin.BridgeObject + 64;
      uint64_t result = type metadata accessor for BoostedTreeConfiguration(319);
      if (v4 <= 0x3F)
      {
        void v5[4] = *(void *)(result - 8) + 64;
        swift_initStructMetadata(a1, 256, 5, v5, a1 + 16);
        return 0;
      }
    }
  }
  return result;
}

NSURL *PersistentParametersForTreeBasedMethods.init(sessionDirectory:)(uint64_t a1)
{
  uint64_t v141 = v2;
  uint64_t v150 = a1;
  unint64_t v3 = v1;
  uint64_t v125 = type metadata accessor for CSVType(0);
  uint64_t v130 = *(void *)(v125 - 8);
  int64_t v4 = *(void *)(v130 + 64);
  uint64_t v5 = alloca(v4);
  uint64_t v6 = alloca(v4);
  uint64_t v124 = &v112;
  int64_t v7 = *(void *)(*(void *)(type metadata accessor for CSVReadingOptions(0) - 8) + 64);
  uint64_t v8 = alloca(v7);
  uint64_t v9 = alloca(v7);
  uint64_t v112 = (uint64_t)&v112;
  uint64_t v10 = alloca(v7);
  size_t v11 = alloca(v7);
  uint64_t v113 = &v112;
  int64_t v12 = *(void *)(*(void *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for DataFrame?)
                              - 8)
                  + 64);
  uint64_t v13 = alloca(v12);
  uint64_t v14 = alloca(v12);
  uint64_t v127 = &v112;
  uint64_t v15 = alloca(v12);
  uint64_t v16 = alloca(v12);
  char v139 = &v112;
  uint64_t v17 = type metadata accessor for DataFrame(0);
  uint64_t v129 = *(void *)(v17 - 8);
  int64_t v18 = *(void *)(v129 + 64);
  uint64_t v19 = alloca(v18);
  uint64_t v20 = alloca(v18);
  uint64_t v126 = &v112;
  uint64_t v21 = alloca(v18);
  long long v22 = alloca(v18);
  uint64_t v133 = &v112;
  uint64_t v143 = type metadata accessor for URL(0);
  uint64_t v23 = *(void *)(v143 - 8);
  int64_t v24 = *(void *)(v23 + 64);
  uint64_t v25 = alloca(v24);
  int64_t v26 = alloca(v24);
  char v123 = &v112;
  uint64_t v27 = alloca(v24);
  uint64_t v28 = alloca(v24);
  uint64_t v128 = &v112;
  uint64_t v29 = alloca(v24);
  int64_t v30 = alloca(v24);
  uint64_t v114 = &v112;
  uint64_t v31 = alloca(v24);
  uint64_t v32 = alloca(v24);
  uint64_t v138 = &v112;
  uint64_t v33 = alloca(v24);
  char v34 = alloca(v24);
  uint64_t v136 = &v112;
  Swift::String v35 = alloca(v24);
  char v36 = alloca(v24);
  double v134 = &v112;
  int64_t v37 = alloca(v24);
  uint64_t v38 = alloca(v24);
  uint64_t v131 = type metadata accessor for PersistentParametersForTreeBasedMethods(0);
  uint64_t v39 = *(int *)(v131 + 20);
  uint64_t v142 = v3;
  uint64_t v148 = (uint64_t)v3 + v39;
  uint64_t v132 = v17;
  __swift_storeEnumTagSinglePayload((uint64_t)v3 + v39, 1, 1, v17);
  uint64_t v40 = v150;
  URL.appendingPathComponent(_:)(0xD000000000000010, "ObjectDetectorMetrics." + 0x8000000000000000);
  unint64_t v41 = v141;
  uint64_t v42 = Data.init(contentsOf:options:)(&v112, 0);
  uint64_t v141 = v41;
  if (v41)
  {
    uint64_t v44 = *(void (**)(uint64_t, uint64_t))(v23 + 8);
    uint64_t v45 = v40;
    uint64_t v46 = v143;
    v44(v45, v143);
    v44((uint64_t)&v112, v46);
    uint64_t v47 = v148;
LABEL_47:
    outlined destroy of Either<LogisticRegressionClassifier<Float, String>, FullyConnectedNetworkClassifier<Float, String>>(v47, &demangling cache variable for type metadata for DataFrame?);
    return __stack_chk_guard;
  }
  unint64_t v48 = v43;
  uint64_t v135 = v23;
  uint64_t v49 = *(void (**)(uint64_t, uint64_t))(v23 + 8);
  uint64_t v50 = v143;
  uint64_t v51 = v42;
  os_log_type_t v137 = v49;
  v49((uint64_t)&v112, v143);
  CGRect v52 = objc_opt_self(NSPropertyListSerialization);
  uint64_t v140 = v51;
  v53.super.Class isa = Data._bridgeToObjectiveC()().super.isa;
  unint64_t v149 = v48;
  Class isa = v53.super.isa;
  v152[0] = 0;
  id v55 = [v52 propertyListWithData:v53.super.isa options:0 format:0 error:v152];
  id v56 = v55;

  id v57 = v152[0];
  if (!v56)
  {
    uint64_t v71 = v57;
    _convertNSErrorToError(_:)(v57);

    swift_willThrow(v71, "propertyListWithData:options:format:error:", v72, v73, v74, v75);
    outlined consume of Data._Representation(v140, v149);
    v137(v150, v50);
LABEL_32:
    uint64_t v47 = v148;
    goto LABEL_47;
  }
  _bridgeAnyObjectToAny(_:)(v56);
  swift_unknownObjectRelease(v56);
  outlined init with copy of Any((uint64_t)v154, (uint64_t)v152);
  uint64_t v58 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [String : Any]);
  if (!swift_dynamicCast(v151, v152, (char *)&type metadata for Any + 8, v58, 6))
  {
    uint64_t v76 = lazy protocol witness table accessor for type MLCreateError and conformance MLCreateError();
    swift_allocError(&type metadata for MLCreateError, v76, 0, 0);
    *(void *)uint64_t v77 = 0xD000000000000037;
    *(void *)(v77 + 8) = "parameters.plist" + 0x8000000000000000;
    *(_OWORD *)(v77 + 16) = 0;
    *(_OWORD *)(v77 + 32) = 0;
    *(unsigned char *)(v77 + 48) = 0;
    swift_willThrow(&type metadata for MLCreateError, v76, v77, v78, v79, v80);
    outlined consume of Data._Representation(v140, v149);
    v137(v150, v50);
    __swift_destroy_boxed_opaque_existential_1Tm(v154);
    goto LABEL_32;
  }
  uint64_t v144 = (char *)&type metadata for Any + 8;
  uint64_t v59 = v151[0];
  specialized Dictionary.subscript.getter(0x746567726174, 0xE600000000000000, v151[0]);
  unint64_t v60 = v149;
  if (!v153)
  {
    swift_bridgeObjectRelease(v59);
    outlined destroy of Either<LogisticRegressionClassifier<Float, String>, FullyConnectedNetworkClassifier<Float, String>>((uint64_t)v152, &demangling cache variable for type metadata for Any?);
LABEL_35:
    uint64_t v81 = v150;
    uint64_t v47 = v148;
LABEL_46:
    uint64_t v85 = lazy protocol witness table accessor for type MLCreateError and conformance MLCreateError();
    swift_allocError(&type metadata for MLCreateError, v85, 0, 0);
    *(void *)uint64_t v86 = 0xD000000000000034;
    *(void *)(v86 + 8) = "ad training parameters." + 0x8000000000000000;
    *(_OWORD *)(v86 + 16) = 0;
    *(_OWORD *)(v86 + 32) = 0;
    *(unsigned char *)(v86 + 48) = 0;
    swift_willThrow(&type metadata for MLCreateError, v85, v86, v87, v88, v89);
    outlined consume of Data._Representation(v140, v60);
    v137(v81, v143);
    __swift_destroy_boxed_opaque_existential_1Tm(v154);
    goto LABEL_47;
  }
  if (!swift_dynamicCast(v151, v152, v144, &type metadata for String, 6))
  {
    swift_bridgeObjectRelease(v59);
    goto LABEL_35;
  }
  uint64_t v115 = v151[0];
  uint64_t v61 = v151[1];
  specialized Dictionary.subscript.getter(0xD000000000000010, (uint64_t)("training parameters." + 0x8000000000000000), v59);
  if (!v153)
  {
LABEL_39:
    char v82 = v61;
    goto LABEL_40;
  }
  uint64_t v147 = v59;
  uint64_t v62 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [String]);
  if (!swift_dynamicCast(v151, v152, v144, v62, 6))
  {
LABEL_43:
    char v83 = v61;
    goto LABEL_44;
  }
  uint64_t v145 = v61;
  uint64_t v63 = v151[0];
  LOBYTE(v59) = v147;
  specialized Dictionary.subscript.getter(0x617265744978616DLL, 0xED0000736E6F6974, v147);
  if (!v153)
  {
    swift_bridgeObjectRelease(v63);
    char v82 = v145;
LABEL_40:
    swift_bridgeObjectRelease(v82);
    char v84 = v59;
LABEL_41:
    swift_bridgeObjectRelease(v84);
    outlined destroy of Either<LogisticRegressionClassifier<Float, String>, FullyConnectedNetworkClassifier<Float, String>>((uint64_t)v152, &demangling cache variable for type metadata for Any?);
LABEL_45:
    uint64_t v81 = v150;
    uint64_t v47 = v148;
    unint64_t v60 = v149;
    goto LABEL_46;
  }
  uint64_t v146 = v63;
  if (!swift_dynamicCast(v151, v152, v144, &type metadata for Int, 6)) {
    goto LABEL_37;
  }
  uint64_t v116 = v151[0];
  LOBYTE(v59) = v147;
  specialized Dictionary.subscript.getter(0x687470654478616DLL, 0xE800000000000000, v147);
  LOBYTE(v61) = v145;
  if (!v153) {
    goto LABEL_38;
  }
  if (!swift_dynamicCast(v151, v152, v144, &type metadata for Int, 6))
  {
LABEL_42:
    swift_bridgeObjectRelease(v146);
    goto LABEL_43;
  }
  uint64_t v117 = v151[0];
  LOBYTE(v59) = v147;
  specialized Dictionary.subscript.getter(0xD000000000000010, (uint64_t)("selectedFeatures" + 0x8000000000000000), v147);
  if (!v153)
  {
LABEL_38:
    swift_bridgeObjectRelease(v146);
    goto LABEL_39;
  }
  char v64 = v144;
  if (!swift_dynamicCast(v151, v152, v144, &type metadata for Double, 6)) {
    goto LABEL_42;
  }
  double v118 = *(double *)v151;
  specialized Dictionary.subscript.getter(0x646C6968436E696DLL, 0xEE00746867696557, v147);
  if (!v153)
  {
LABEL_49:
    swift_bridgeObjectRelease(v146);
    char v91 = v61;
LABEL_50:
    swift_bridgeObjectRelease(v91);
    char v84 = v147;
    goto LABEL_41;
  }
  if (!swift_dynamicCast(v151, v152, v64, &type metadata for Double, 6)) {
    goto LABEL_42;
  }
  double v119 = *(double *)v151;
  specialized Dictionary.subscript.getter(0x65536D6F646E6172, 0xEA00000000006465, v147);
  if (!v153) {
    goto LABEL_49;
  }
  if (!swift_dynamicCast(v151, v152, v64, &type metadata for Int, 6)) {
    goto LABEL_37;
  }
  uint64_t v65 = v151[0];
  specialized Dictionary.subscript.getter(0x6173627553776F72, 0xEC000000656C706DLL, v147);
  if (!v153)
  {
LABEL_51:
    swift_bridgeObjectRelease(v146);
    char v91 = v145;
    goto LABEL_50;
  }
  if (!swift_dynamicCast(v151, v152, v144, &type metadata for Double, 6))
  {
LABEL_37:
    swift_bridgeObjectRelease(v146);
    char v83 = v145;
LABEL_44:
    swift_bridgeObjectRelease(v83);
    swift_bridgeObjectRelease(v147);
    goto LABEL_45;
  }
  double v120 = *(double *)v151;
  specialized Dictionary.subscript.getter(0x75536E6D756C6F63, 0xEF656C706D617362, v147);
  if (!v153) {
    goto LABEL_51;
  }
  if (!swift_dynamicCast(v151, v152, v144, &type metadata for Double, 6)) {
    goto LABEL_37;
  }
  double v121 = *(double *)v151;
  specialized Dictionary.subscript.getter(0x657A695370657473, 0xE800000000000000, v147);
  if (!v153) {
    goto LABEL_51;
  }
  if (!swift_dynamicCast(v151, v152, v144, &type metadata for Double, 6)) {
    goto LABEL_37;
  }
  double v122 = *(double *)v151;
  specialized Dictionary.subscript.getter(0xD000000000000013, (uint64_t)("minLossReduction" + 0x8000000000000000), v147);
  if (!v153) {
    goto LABEL_51;
  }
  if (!swift_dynamicCast(v151, v152, v144, &type metadata for Int, 6)) {
    goto LABEL_37;
  }
  uint64_t v66 = v151[0];
  uint64_t v67 = v131;
  uint64_t v68 = *(int *)(v131 + 24);
  uint64_t v69 = v142;
  *(void *)((char *)v142 + v68) = v115;
  *(void *)((char *)v69 + v68 + 8) = v145;
  *(void *)((char *)v69 + *(int *)(v67 + 28)) = v146;
  BoostedTreeConfiguration.init()();
  BoostedTreeConfiguration.maximumIterations.setter(v116);
  BoostedTreeConfiguration.maximumDepth.setter(v117);
  BoostedTreeConfiguration.minimumLossReduction.setter(v118);
  BoostedTreeConfiguration.minimumChildWeight.setter(v119);
  BoostedTreeConfiguration.randomSeed.setter(v65);
  BoostedTreeConfiguration.rowSubsample.setter(v120);
  BoostedTreeConfiguration.columnSubsample.setter(v121);
  BoostedTreeConfiguration.learningRate.setter(v122);
  BoostedTreeConfiguration.earlyStoppingIterationCount.setter(v66, 0);
  char v70 = v147;
  specialized Dictionary.subscript.getter(0xD000000000000011, (uint64_t)("earlyStoppingRounds" + 0x8000000000000000), v147);
  swift_bridgeObjectRelease(v70);
  if (v153)
  {
    if (swift_dynamicCast(v151, v152, v144, &type metadata for Int, 6)) {
      BoostedTreeConfiguration.parallelTreeCount.setter(v151[0]);
    }
  }
  else
  {
    outlined destroy of Either<LogisticRegressionClassifier<Float, String>, FullyConnectedNetworkClassifier<Float, String>>((uint64_t)v152, &demangling cache variable for type metadata for Any?);
  }
  unsigned int v92 = v134;
  URL.appendingPathComponent(_:)(1635017060, 0xE400000000000000);
  URL.appendingPathComponent(_:)(0x69746164696C6176, 0xEE00617461446E6FLL);
  uint64_t v93 = v138;
  uint64_t v135 = *(void *)(v135 + 16);
  ((void (*)(uint64_t *, uint64_t *, uint64_t))v135)(v138, v92, v143);
  uint64_t v94 = v141;
  DataFrame.init(contentsOfSFrameDirectory:columns:rows:)(v93, 0, 0, 0, 1);
  uint64_t v138 = v94;
  if (v94)
  {
    ((void (*)(uint64_t *, uint64_t *, uint64_t))v135)(v123, v134, v143);
    uint64_t v141 = specialized Dictionary.init(dictionaryLiteral:)((uint64_t)_swiftEmptyArrayStorage);
    char v139 = default argument 1 of CSVReadingOptions.init(hasHeaderRow:nilEncodings:trueEncodings:falseEncodings:floatingPointType:ignoresEmptyLines:usesQuoting:usesEscaping:delimiter:escapeCharacter:)();
    uint64_t v95 = specialized Set.init(_nonEmptyArrayLiteral:)((uint64_t)&outlined read-only object #0 of default argument 2 of CSVReadingOptions.init(hasHeaderRow:nilEncodings:trueEncodings:falseEncodings:floatingPointType:ignoresEmptyLines:usesQuoting:usesEscaping:delimiter:escapeCharacter:));
    uint64_t v96 = specialized Set.init(_nonEmptyArrayLiteral:)((uint64_t)&outlined read-only object #0 of default argument 3 of CSVReadingOptions.init(hasHeaderRow:nilEncodings:trueEncodings:falseEncodings:floatingPointType:ignoresEmptyLines:usesQuoting:usesEscaping:delimiter:escapeCharacter:));
    uint64_t v97 = *(uint64_t **)(v130 + 104);
    uint64_t v98 = v124;
    LODWORD(v130) = enum case for CSVType.double(_:);
    uint64_t v133 = v97;
    ((void (*)(uint64_t *, void, uint64_t))v97)(v124, enum case for CSVType.double(_:), v125);
    uint64_t v99 = v112;
    CSVReadingOptions.init(hasHeaderRow:nilEncodings:trueEncodings:falseEncodings:floatingPointType:ignoresEmptyLines:usesQuoting:usesEscaping:delimiter:escapeCharacter:)(1, v139, v95, v96, v98, 1, 1, 0, 44, 0xE100000000000000, 92, 0xE100000000000000);
    DataFrame.init(contentsOfCSVFile:columns:rows:types:options:)(v123, 0, 0, 0, 1, v141, v99);
    uint64_t v141 = 0;
    (*(void (**)(void *, uint64_t *, uint64_t))(v129 + 32))(v142, v126, v132);
    ((void (*)(uint64_t *, uint64_t *, uint64_t))v135)(v128, v136, v143);
    uint64_t v131 = (uint64_t)specialized Dictionary.init(dictionaryLiteral:)((uint64_t)_swiftEmptyArrayStorage);
    uint64_t v142 = default argument 1 of CSVReadingOptions.init(hasHeaderRow:nilEncodings:trueEncodings:falseEncodings:floatingPointType:ignoresEmptyLines:usesQuoting:usesEscaping:delimiter:escapeCharacter:)();
    char v139 = specialized Set.init(_nonEmptyArrayLiteral:)((uint64_t)&outlined read-only object #0 of default argument 2 of CSVReadingOptions.init(hasHeaderRow:nilEncodings:trueEncodings:falseEncodings:floatingPointType:ignoresEmptyLines:usesQuoting:usesEscaping:delimiter:escapeCharacter:));
    double v103 = specialized Set.init(_nonEmptyArrayLiteral:)((uint64_t)&outlined read-only object #0 of default argument 3 of CSVReadingOptions.init(hasHeaderRow:nilEncodings:trueEncodings:falseEncodings:floatingPointType:ignoresEmptyLines:usesQuoting:usesEscaping:delimiter:escapeCharacter:));
    uint64_t v104 = v124;
    ((void (*)(uint64_t *, void, uint64_t))v133)(v124, v130, v125);
    unint64_t v105 = v113;
    CSVReadingOptions.init(hasHeaderRow:nilEncodings:trueEncodings:falseEncodings:floatingPointType:ignoresEmptyLines:usesQuoting:usesEscaping:delimiter:escapeCharacter:)(1, v142, v139, v103, v104, 1, 1, 0, 44, 0xE100000000000000, 92, 0xE100000000000000);
    uint64_t v142 = 0;
    uint64_t v106 = v141;
    DataFrame.init(contentsOfCSVFile:columns:rows:types:options:)(v128, 0, 0, 0, 1, v131, v105);
    outlined consume of Data._Representation(v140, v149);
    if (v106)
    {
      swift_errorRelease(v138);
      uint64_t v138 = v106;
      uint64_t v142 = (void *)(&dword_0 + 1);
    }
    swift_errorRelease(v138);
    uint64_t v109 = v143;
    double v110 = v137;
    v137(v150, v143);
    v110((uint64_t)v136, v109);
    v110((uint64_t)v134, v109);
    __swift_destroy_boxed_opaque_existential_1Tm(v154);
    uint64_t v111 = (uint64_t)v127;
    __swift_storeEnumTagSinglePayload((uint64_t)v127, (uint64_t)v142, 1, v132);
    char v139 = (uint64_t *)v111;
  }
  else
  {
    (*(void (**)(void *, uint64_t *, uint64_t))(v129 + 32))(v142, v133, v132);
    unint64_t v100 = v114;
    ((void (*)(uint64_t *, uint64_t *, uint64_t))v135)(v114, v136, v143);
    unsigned int v101 = 0;
    uint64_t v102 = v138;
    DataFrame.init(contentsOfSFrameDirectory:columns:rows:)(v100, 0, 0, 0, 1);
    outlined consume of Data._Representation(v140, v149);
    if (v102)
    {
      swift_errorRelease(v102);
      unsigned int v101 = 1;
    }
    uint64_t v107 = v143;
    uint64_t v108 = v137;
    v137(v150, v143);
    v108((uint64_t)v136, v107);
    v108((uint64_t)v134, v107);
    __swift_destroy_boxed_opaque_existential_1Tm(v154);
    __swift_storeEnumTagSinglePayload((uint64_t)v139, v101, 1, v132);
  }
  outlined assign with take of DataFrame?((uint64_t)v139, v148);
  return __stack_chk_guard;
}

NSURL *PersistentParametersForTreeBasedMethods.save(toSessionDirectory:)(uint64_t a1)
{
  unint64_t v78 = v1;
  uint64_t v3 = v2;
  uint64_t v70 = a1;
  int64_t v4 = *(void *)(*(void *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for DataFrame?)
                             - 8)
                 + 64);
  uint64_t v5 = alloca(v4);
  uint64_t v6 = alloca(v4);
  uint64_t v75 = &v63;
  uint64_t v74 = type metadata accessor for CSVWritingOptions(0);
  uint64_t v71 = *(void *)(v74 - 8);
  int64_t v7 = *(void *)(v71 + 64);
  uint64_t v8 = alloca(v7);
  uint64_t v9 = alloca(v7);
  uint64_t v69 = &v63;
  uint64_t v10 = alloca(v7);
  size_t v11 = alloca(v7);
  uint64_t v66 = &v63;
  uint64_t v77 = type metadata accessor for URL(0);
  uint64_t v80 = *(void *)(v77 - 8);
  int64_t v12 = *(void *)(v80 + 64);
  uint64_t v13 = alloca(v12);
  uint64_t v14 = alloca(v12);
  uint64_t v72 = &v63;
  uint64_t v15 = alloca(v12);
  uint64_t v16 = alloca(v12);
  uint64_t v67 = &v63;
  uint64_t v17 = alloca(v12);
  int64_t v18 = alloca(v12);
  char v64 = &v63;
  uint64_t v19 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, Any)>);
  uint64_t inited = swift_initStackObject(v19, v83);
  *(void *)(inited + 16) = 11;
  *(void *)(inited + 24) = 22;
  *(void *)(inited + 32) = 0x746567726174;
  *(void *)(inited + 40) = 0xE600000000000000;
  uint64_t v21 = type metadata accessor for PersistentParametersForTreeBasedMethods(0);
  uint64_t v22 = *(int *)(v21 + 24);
  uint64_t v23 = *(void *)(v2 + v22);
  uint64_t v79 = *(void (**)(void, void))(v2 + v22 + 8);
  int64_t v24 = v79;
  *(void *)(inited + 72) = &type metadata for String;
  *(void *)(inited + 48) = v23;
  *(void *)(inited + 56) = v24;
  *(void *)(inited + 80) = 0xD000000000000010;
  *(void *)(inited + 88) = "training parameters." + 0x8000000000000000;
  uint64_t v25 = *(void (**)(uint64_t *, uint64_t))(v2 + *(int *)(v21 + 28));
  uint64_t v76 = v25;
  *(void *)(inited + 120) = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [String]);
  *(void *)(inited + 96) = v25;
  strcpy((char *)(inited + 128), "maxIterations");
  *(_WORD *)(inited + 142) = -4864;
  uint64_t v68 = v21;
  uint64_t v65 = v3;
  swift_bridgeObjectRetain((_BYTE)v79);
  swift_bridgeObjectRetain((_BYTE)v76);
  uint64_t v26 = BoostedTreeConfiguration.maximumIterations.getter();
  *(void *)(inited + 168) = &type metadata for Int;
  *(void *)(inited + 144) = v26;
  *(void *)(inited + 176) = 0x687470654478616DLL;
  *(void *)(inited + 184) = 0xE800000000000000;
  uint64_t v27 = BoostedTreeConfiguration.maximumDepth.getter();
  *(void *)(inited + 216) = &type metadata for Int;
  *(void *)(inited + 192) = v27;
  *(void *)(inited + 224) = 0xD000000000000010;
  *(void *)(inited + 232) = "selectedFeatures" + 0x8000000000000000;
  double v28 = BoostedTreeConfiguration.minimumLossReduction.getter();
  *(void *)(inited + 264) = &type metadata for Double;
  *(double *)(inited + 240) = v28;
  strcpy((char *)(inited + 272), "minChildWeight");
  *(unsigned char *)(inited + 287) = -18;
  double v29 = BoostedTreeConfiguration.minimumChildWeight.getter();
  *(void *)(inited + 312) = &type metadata for Double;
  *(double *)(inited + 288) = v29;
  *(void *)(inited + 320) = 0x65536D6F646E6172;
  *(void *)(inited + 328) = 0xEA00000000006465;
  uint64_t v30 = BoostedTreeConfiguration.randomSeed.getter();
  *(void *)(inited + 360) = &type metadata for Int;
  *(void *)(inited + 336) = v30;
  strcpy((char *)(inited + 368), "rowSubsample");
  *(unsigned char *)(inited + 381) = 0;
  *(_WORD *)(inited + 382) = -5120;
  double v31 = BoostedTreeConfiguration.rowSubsample.getter();
  *(void *)(inited + 408) = &type metadata for Double;
  *(double *)(inited + 384) = v31;
  *(void *)(inited + 416) = 0x75536E6D756C6F63;
  *(void *)(inited + 424) = 0xEF656C706D617362;
  double v32 = BoostedTreeConfiguration.columnSubsample.getter();
  *(void *)(inited + 456) = &type metadata for Double;
  *(double *)(inited + 432) = v32;
  *(void *)(inited + 464) = 0x657A695370657473;
  *(void *)(inited + 472) = 0xE800000000000000;
  double v33 = BoostedTreeConfiguration.learningRate.getter();
  *(void *)(inited + 504) = &type metadata for Double;
  *(double *)(inited + 480) = v33;
  *(void *)(inited + 512) = 0xD000000000000013;
  *(void *)(inited + 520) = "minLossReduction" + 0x8000000000000000;
  uint64_t v34 = BoostedTreeConfiguration.earlyStoppingIterationCount.getter();
  *(void *)(inited + 552) = &type metadata for Int;
  if (v35) {
    uint64_t v34 = 0;
  }
  *(void *)(inited + 528) = v34;
  uint64_t v36 = Dictionary.init(dictionaryLiteral:)(inited, &type metadata for String, (char *)&type metadata for Any + 8, &protocol witness table for String);
  uint64_t v81 = v36;
  if (BoostedTreeConfiguration.parallelTreeCount.getter() != 1)
  {
    int64_t v37 = (void *)BoostedTreeConfiguration.parallelTreeCount.getter();
    v82[3] = &type metadata for Int;
    v82[0] = v37;
    specialized Dictionary.subscript.setter((uint64_t)v82, 0xD000000000000011, (uint64_t)("earlyStoppingRounds" + 0x8000000000000000));
    LOBYTE(v36) = v81;
  }
  uint64_t v38 = objc_opt_self(NSPropertyListSerialization);
  Class isa = Dictionary._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease(v36);
  v82[0] = 0;
  id v40 = [v38 dataWithPropertyList:isa format:200 options:0 error:v82];
  id v41 = v40;

  id v42 = v82[0];
  if (v41)
  {
    uint64_t v43 = static Data._unconditionallyBridgeFromObjectiveC(_:)(v41);
    uint64_t v44 = v41;
    unint64_t v46 = v45;

    uint64_t v47 = v64;
    URL.appendingPathComponent(_:)(0xD000000000000010, "ObjectDetectorMetrics." + 0x8000000000000000);
    unint64_t v48 = v78;
    Data.write(to:options:)(v47, 0, v43, v46);
    uint64_t v79 = (void (*)(void, void))v48;
    if (v48)
    {
      (*(void (**)(uint64_t *, uint64_t))(v80 + 8))(v47, v77);
      outlined consume of Data._Representation(v43, v46);
    }
    else
    {
      uint64_t v73 = v43;
      unint64_t v78 = v46;
      uint64_t v76 = *(void (**)(uint64_t *, uint64_t))(v80 + 8);
      v76(v47, v77);
      char v54 = v67;
      URL.appendingPathComponent(_:)(1635017060, 0xE400000000000000);
      id v55 = v66;
      CSVWritingOptions.init(includesHeader:dateFormat:nilEncoding:trueEncoding:falseEncoding:newline:delimiter:)(1, 0, 0, 0, 0xE000000000000000, 1702195828, 0xE400000000000000, 0x65736C6166, 0xE500000000000000, 10, 0xE100000000000000, 44, 0xE100000000000000);
      uint64_t v80 = type metadata accessor for DataFrame(0);
      uint64_t v56 = v65;
      id v57 = v79;
      DataFrameProtocol.writeCSV(to:options:)(v54, v55, v80, &protocol witness table for DataFrame);
      if (v57)
      {
        outlined consume of Data._Representation(v73, v78);
        (*(void (**)(uint64_t *, uint64_t))(v71 + 8))(v55, v74);
        v76(v54, v77);
      }
      else
      {
        uint64_t v79 = *(void (**)(void, void))(v71 + 8);
        v79(v55, v74);
        v76(v54, v77);
        uint64_t v58 = *(int *)(v68 + 20) + v56;
        uint64_t v59 = (uint64_t)v75;
        outlined init with copy of (String, CSVType)(v58, (uint64_t)v75, &demangling cache variable for type metadata for DataFrame?);
        if (__swift_getEnumTagSinglePayload(v59, 1, v80) == 1)
        {
          outlined consume of Data._Representation(v73, v78);
          outlined destroy of Either<LogisticRegressionClassifier<Float, String>, FullyConnectedNetworkClassifier<Float, String>>(v59, &demangling cache variable for type metadata for DataFrame?);
        }
        else
        {
          unint64_t v60 = v72;
          URL.appendingPathComponent(_:)(0x69746164696C6176, 0xEE00617461446E6FLL);
          uint64_t v61 = v69;
          CSVWritingOptions.init(includesHeader:dateFormat:nilEncoding:trueEncoding:falseEncoding:newline:delimiter:)(1, 0, 0, 0, 0xE000000000000000, 1702195828, 0xE400000000000000, 0x65736C6166, 0xE500000000000000, 10, 0xE100000000000000, 44, 0xE100000000000000);
          DataFrameProtocol.writeCSV(to:options:)(v60, v61, v80, &protocol witness table for DataFrame);
          outlined consume of Data._Representation(v73, v78);
          v79(v61, v74);
          v76(v72, v77);
          (*(void (**)(uint64_t *))(*(void *)(v80 - 8) + 8))(v75);
        }
      }
    }
  }
  else
  {
    uint64_t v49 = v42;
    _convertNSErrorToError(_:)(v42);

    swift_willThrow(v49, "dataWithPropertyList:format:options:error:", v50, v51, v52, v53);
  }
  return __stack_chk_guard;
}

void *specialized Dictionary.init(dictionaryLiteral:)(uint64_t a1)
{
  uint64_t v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (String, CSVType));
  uint64_t v2 = *(void *)(v1 - 8);
  int64_t v3 = *(void *)(v2 + 64);
  int64_t v4 = alloca(v3);
  uint64_t v5 = alloca(v3);
  double v29 = &v25;
  uint64_t v6 = *(void *)(a1 + 16);
  if (v6)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<String, CSVType>);
    int64_t v7 = (void *)static _DictionaryStorage.allocate(capacity:)(v6);
    uint64_t v8 = *(void *)(a1 + 16);
    if (v8)
    {
      uint64_t v26 = (char *)v29 + *(int *)(v1 + 48);
      uint64_t v9 = (*(unsigned __int8 *)(v2 + 80) + 32) & ~*(unsigned __int8 *)(v2 + 80);
      uint64_t v28 = a1;
      uint64_t v10 = a1 + v9;
      uint64_t v27 = *(void *)(v2 + 72);
      swift_retain();
      do
      {
        uint64_t v25 = v8;
        size_t v11 = v29;
        outlined init with copy of (String, CSVType)(v10, (uint64_t)v29, &demangling cache variable for type metadata for (String, CSVType));
        uint64_t v12 = *v11;
        uint64_t v13 = v11[1];
        unint64_t v14 = specialized __RawDictionaryStorage.find<A>(_:)(*v11, v13);
        if (v15) {
          BUG();
        }
        unint64_t v16 = v14;
        v7[(v14 >> 6) + 8] |= 1 << v14;
        uint64_t v17 = v7[6];
        uint64_t v18 = 16 * v16;
        *(void *)(v17 + v18) = v12;
        *(void *)(v17 + v18 + 8) = v13;
        uint64_t v19 = v7[7];
        uint64_t v20 = type metadata accessor for CSVType(0);
        (*(void (**)(unint64_t, char *, uint64_t))(*(void *)(v20 - 8) + 32))(v19 + v16 * *(void *)(*(void *)(v20 - 8) + 72), v26, v20);
        uint64_t v21 = v7[2];
        BOOL v22 = __OFADD__(1, v21);
        uint64_t v23 = v21 + 1;
        if (v22) {
          BUG();
        }
        v7[2] = v23;
        v10 += v27;
        uint64_t v8 = v25 - 1;
      }
      while (v25 != 1);
      swift_release();
      LOBYTE(a1) = v28;
    }
  }
  else
  {
    int64_t v7 = _swiftEmptyDictionarySingleton;
  }
  swift_bridgeObjectRelease(a1);
  return v7;
}

{
  uint64_t v1;
  uint64_t v2;
  int64_t v3;
  void *v4;
  void *v5;
  uint64_t v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  char v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  BOOL v22;
  uint64_t v23;
  uint64_t v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t *v29;

  uint64_t v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (String, JSONType));
  uint64_t v2 = *(void *)(v1 - 8);
  int64_t v3 = *(void *)(v2 + 64);
  int64_t v4 = alloca(v3);
  uint64_t v5 = alloca(v3);
  double v29 = &v25;
  uint64_t v6 = *(void *)(a1 + 16);
  if (v6)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<String, JSONType>);
    int64_t v7 = (void *)static _DictionaryStorage.allocate(capacity:)(v6);
    uint64_t v8 = *(void *)(a1 + 16);
    if (v8)
    {
      uint64_t v26 = (char *)v29 + *(int *)(v1 + 48);
      uint64_t v9 = (*(unsigned __int8 *)(v2 + 80) + 32) & ~*(unsigned __int8 *)(v2 + 80);
      uint64_t v28 = a1;
      uint64_t v10 = a1 + v9;
      uint64_t v27 = *(void *)(v2 + 72);
      swift_retain();
      do
      {
        uint64_t v25 = v8;
        size_t v11 = v29;
        outlined init with copy of Either<LogisticRegressionClassifier<Float, String>, FullyConnectedNetworkClassifier<Float, String>>(v10, (uint64_t)v29, &demangling cache variable for type metadata for (String, JSONType));
        uint64_t v12 = *v11;
        uint64_t v13 = v11[1];
        unint64_t v14 = specialized __RawDictionaryStorage.find<A>(_:)(*v11, v13);
        if (v15) {
          BUG();
        }
        unint64_t v16 = v14;
        v7[(v14 >> 6) + 8] |= 1 << v14;
        uint64_t v17 = v7[6];
        uint64_t v18 = 16 * v16;
        *(void *)(v17 + v18) = v12;
        *(void *)(v17 + v18 + 8) = v13;
        uint64_t v19 = v7[7];
        uint64_t v20 = type metadata accessor for JSONType(0);
        (*(void (**)(unint64_t, char *, uint64_t))(*(void *)(v20 - 8) + 32))(v19 + v16 * *(void *)(*(void *)(v20 - 8) + 72), v26, v20);
        uint64_t v21 = v7[2];
        BOOL v22 = __OFADD__(1, v21);
        uint64_t v23 = v21 + 1;
        if (v22) {
          BUG();
        }
        v7[2] = v23;
        v10 += v27;
        uint64_t v8 = v25 - 1;
      }
      while (v25 != 1);
      swift_release();
      LOBYTE(a1) = v28;
    }
  }
  else
  {
    int64_t v7 = _swiftEmptyDictionarySingleton;
  }
  swift_bridgeObjectRelease(a1);
  return v7;
}

uint64_t outlined assign with take of DataFrame?(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for DataFrame?);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v2 - 8) + 40))(a2, a1, v2);
  return a2;
}

unint64_t specialized __RawDictionaryStorage.find<A>(_:)(uint64_t a1, uint64_t a2)
{
  Hasher.init(_seed:)(*(void *)(v2 + 40));
  String.hash(into:)(v5, a1);
  Swift::Int v3 = Hasher._finalize()();
  return specialized __RawDictionaryStorage.find<A>(_:hashValue:)(a1, a2, v3);
}

{
  uint64_t v2;
  Swift::Int v3;
  unsigned char v5[104];

  Hasher.init(_seed:)(*(void *)(v2 + 40));
  String.hash(into:)(v5, a1);
  Swift::Int v3 = Hasher._finalize()();
  return specialized __RawDictionaryStorage.find<A>(_:hashValue:)(a1, a2, v3);
}

{
  uint64_t v2;
  Swift::Int v3;
  unsigned char v5[104];

  Hasher.init(_seed:)(*(void *)(v2 + 40));
  if (a2)
  {
    Hasher._combine(_:)(1u);
    swift_bridgeObjectRetain(a2);
    String.hash(into:)(v5, a1);
    swift_bridgeObjectRelease(a2);
  }
  else
  {
    Hasher._combine(_:)(0);
  }
  Swift::Int v3 = Hasher._finalize()();
  return specialized __RawDictionaryStorage.find<A>(_:hashValue:)(a1, a2, v3);
}

unint64_t specialized __RawDictionaryStorage.find<A>(_:hashValue:)(uint64_t a1, uint64_t a2, unint64_t a3)
{
  uint64_t v4 = ~(-1 << *(unsigned char *)(v3 + 32));
  unint64_t v5 = v4 & a3;
  uint64_t v6 = *(void *)(v3 + 8 * ((v4 & a3) >> 6) + 64);
  if (_bittest64(&v6, v4 & a3))
  {
    uint64_t v9 = *(void *)(v3 + 48);
    uint64_t v10 = *(void *)(v9 + 16 * v5);
    uint64_t v11 = *(void *)(v9 + 16 * v5 + 8);
    if (v10 != a1 || v11 != a2)
    {
      uint64_t v20 = *(void *)(v3 + 48);
      if ((_stringCompareWithSmolCheck(_:_:expecting:)(v10, v11, a1, a2, 0) & 1) == 0)
      {
        unint64_t v5 = v4 & (v5 + 1);
        uint64_t v12 = *(void *)(v3 + 8 * (v5 >> 6) + 64);
        if (_bittest64(&v12, v5))
        {
          uint64_t v13 = *(void *)(v20 + 16 * v5);
          uint64_t v14 = *(void *)(v20 + 16 * v5 + 8);
          if ((v13 != a1 || v14 != a2) && (_stringCompareWithSmolCheck(_:_:expecting:)(v13, v14, a1, a2, 0) & 1) == 0)
          {
            unint64_t v5 = v4 & (v5 + 1);
            uint64_t v15 = *(void *)(v3 + 8 * (v5 >> 6) + 64);
            if (_bittest64(&v15, v5))
            {
              do
              {
                uint64_t v16 = *(void *)(v20 + 16 * v5);
                uint64_t v17 = *(void *)(v20 + 16 * v5 + 8);
                if (v16 == a1 && v17 == a2) {
                  break;
                }
                if (_stringCompareWithSmolCheck(_:_:expecting:)(v16, v17, a1, a2, 0)) {
                  break;
                }
                unint64_t v5 = v4 & (v5 + 1);
                uint64_t v18 = *(void *)(v3 + 8 * (v5 >> 6) + 64);
              }
              while (_bittest64(&v18, v5));
            }
          }
        }
      }
    }
  }
  return v5;
}

{
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v15;

  uint64_t v4 = ~(-1 << *(unsigned char *)(v3 + 32));
  unint64_t v5 = v4 & a3;
  uint64_t v6 = *(void *)(v3 + 8 * ((v4 & a3) >> 6) + 64);
  if (_bittest64(&v6, v4 & a3))
  {
    uint64_t v9 = *(void *)(v3 + 48);
    uint64_t v10 = *(void *)(v9 + 16 * v5);
    uint64_t v11 = *(void *)(v9 + 16 * v5 + 8);
    if (v10 != a1 || v11 != a2)
    {
      uint64_t v12 = a1;
      uint64_t v15 = a2;
      while ((_stringCompareWithSmolCheck(_:_:expecting:)(v10, v11, v12, a2, 0) & 1) == 0)
      {
        unint64_t v5 = v4 & (v5 + 1);
        uint64_t v13 = *(void *)(v3 + 8 * (v5 >> 6) + 64);
        if (!_bittest64(&v13, v5)) {
          break;
        }
        uint64_t v10 = *(void *)(v9 + 16 * v5);
        uint64_t v11 = *(void *)(v9 + 16 * v5 + 8);
        a2 = v15;
        if (v10 == a1 && v11 == v15) {
          break;
        }
        uint64_t v12 = a1;
      }
    }
  }
  return v5;
}

{
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char v12;
  uint64_t v13;
  uint64_t v15;

  uint64_t v4 = ~(-1 << *(unsigned char *)(v3 + 32));
  unint64_t v5 = v4 & a3;
  uint64_t v6 = *(void *)(v3 + 8 * ((v4 & a3) >> 6) + 64);
  if (_bittest64(&v6, v4 & a3))
  {
    uint64_t v9 = *(void *)(v3 + 48);
    uint64_t v15 = ~(-1 << *(unsigned char *)(v3 + 32));
    do
    {
      uint64_t v10 = *(void *)(v9 + 16 * v5 + 8);
      if (v10)
      {
        if (a2)
        {
          uint64_t v11 = *(void *)(v9 + 16 * v5);
          if (v11 == a1 && v10 == a2) {
            return v5;
          }
          uint64_t v12 = _stringCompareWithSmolCheck(_:_:expecting:)(v11, v10, a1, a2, 0);
          uint64_t v4 = v15;
          if (v12) {
            return v5;
          }
        }
      }
      else if (!a2)
      {
        return v5;
      }
      unint64_t v5 = v4 & (v5 + 1);
      uint64_t v13 = *(void *)(v3 + 8 * (v5 >> 6) + 64);
    }
    while (_bittest64(&v13, v5));
  }
  return v5;
}

uint64_t outlined init with copy of (String, CSVType)(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(a3);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v3 - 8) + 16))(a2, a1, v3);
  return a2;
}

uint64_t MLStyleTransfer.init(model:parameters:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  void v3[4] = a3;
  void v3[3] = a2;
  v3[2] = a1;
  uint64_t v4 = type metadata accessor for _Model();
  swift_allocObject(v4, 48, 7);
  uint64_t v5 = dword_3AABE4;
  swift_retain();
  uint64_t v6 = (void *)swift_task_alloc(v5);
  uint64_t v3[5] = v6;
  *uint64_t v6 = v3;
  v6[1] = MLStyleTransfer.init(model:parameters:);
  return _Model.init(impl:)(a2);
}

uint64_t MLStyleTransfer.init(model:parameters:)(uint64_t a1)
{
  uint64_t v5 = *(void *)(*v2 + 40);
  uint64_t v4 = *v2;
  *(void *)(*v2 + 48) = v1;
  swift_task_dealloc(v5);
  if (v1)
  {
    uint64_t v6 = MLStyleTransfer.init(model:parameters:);
  }
  else
  {
    *(void *)(v4 + 56) = a1;
    uint64_t v6 = MLStyleTransfer.init(model:parameters:);
  }
  return swift_task_switch(v6, 0, 0);
}

uint64_t MLStyleTransfer.init(model:parameters:)()
{
  uint64_t v1 = *(void *)(v0 + 56);
  uint64_t v2 = *(void *)(v0 + 32);
  uint64_t v3 = *(void **)(v0 + 16);
  swift_release();
  *uint64_t v3 = v1;
  uint64_t v4 = type metadata accessor for MLStyleTransfer(0);
  outlined init with take of MLClassifierMetrics(v2, (uint64_t)v3 + *(int *)(v4 + 20), type metadata accessor for MLStyleTransfer.ModelParameters);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

{
  uint64_t v0;
  uint64_t v1;

  uint64_t v1 = *(void *)(v0 + 32);
  swift_release();
  outlined destroy of MLActivityClassifier.ModelParameters(v1, type metadata accessor for MLStyleTransfer.ModelParameters);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t MLStyleTransfer.ModelParameters.init(algorithm:validation:maxIterations:textelDensity:styleStrength:)(char *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  int64_t v7 = v5;
  char v8 = *a1;
  uint64_t v9 = (int *)type metadata accessor for MLStyleTransfer.ModelParameters(0);
  *(void *)&v7[v9[6]] = 1;
  v7[v9[10]] = 0;
  *int64_t v7 = v8;
  outlined init with take of MLClassifierMetrics(a2, (uint64_t)&v7[v9[5]], type metadata accessor for MLStyleTransfer.ModelParameters.ValidationData);
  *(void *)&v7[v9[7]] = a3;
  *(void *)&v7[v9[8]] = a4;
  uint64_t result = v9[9];
  *(void *)&v7[result] = a5;
  return result;
}

uint64_t type metadata accessor for MLStyleTransfer.ModelParameters(uint64_t a1)
{
  return type metadata accessor for MLImageClassifier.CustomFeatureExtractor(a1, (uint64_t *)&type metadata singleton initialization cache for MLStyleTransfer.ModelParameters, (uint64_t)&nominal type descriptor for MLStyleTransfer.ModelParameters);
}

uint64_t type metadata accessor for MLStyleTransfer.ModelParameters.ValidationData(uint64_t a1)
{
  return type metadata accessor for MLImageClassifier.CustomFeatureExtractor(a1, (uint64_t *)&type metadata singleton initialization cache for MLStyleTransfer.ModelParameters.ValidationData, (uint64_t)&nominal type descriptor for MLStyleTransfer.ModelParameters.ValidationData);
}

uint64_t MLStyleTransfer.init(trainingData:parameters:)(uint64_t a1, uint64_t a2)
{
  uint64_t v53 = v3;
  uint64_t v52 = a2;
  uint64_t v47 = a1;
  uint64_t v36 = v2;
  uint64_t v4 = type metadata accessor for MLStyleTransfer.ModelParameters(0);
  uint64_t v38 = *(void *)(v4 - 8);
  int64_t v37 = *(void *)(v38 + 64);
  uint64_t v5 = alloca(v37);
  uint64_t v6 = alloca(v37);
  unint64_t v45 = &v36;
  int64_t v7 = *(void *)(*(void *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for URL?)
                             - 8)
                 + 64);
  char v8 = alloca(v7);
  uint64_t v9 = alloca(v7);
  uint64_t v10 = alloca(v7);
  uint64_t v11 = alloca(v7);
  uint64_t v12 = type metadata accessor for URL(0);
  uint64_t v49 = *(void *)(v12 - 8);
  int64_t v13 = *(void *)(v49 + 64);
  uint64_t v14 = alloca(v13);
  uint64_t v15 = alloca(v13);
  unint64_t v46 = &v36;
  uint64_t v16 = alloca(v13);
  uint64_t v17 = alloca(v13);
  uint64_t v44 = &v36;
  int64_t v39 = v13;
  uint64_t v18 = alloca(v13);
  uint64_t v19 = alloca(v13);
  uint64_t v50 = &v36;
  uint64_t v48 = 4 * (*(void *)(v52 + *(int *)(v4 + 32)) / 4);
  __swift_storeEnumTagSinglePayload((uint64_t)&v36, 1, 1, v12);
  uint64_t v20 = v47;
  uint64_t v51 = v12;
  __swift_storeEnumTagSinglePayload((uint64_t)&v36, 1, 1, v12);
  uint64_t v21 = v53;
  MLStyleTransfer.DataSource.preprocessDataSource(textelDensity:styleImageDestination:contentImagesDestination:)(v44, &v42, v48, &v36, &v36);
  uint64_t v53 = v21;
  if (v21)
  {
    outlined destroy of MLActivityClassifier.ModelParameters(v52, type metadata accessor for MLStyleTransfer.ModelParameters);
    outlined destroy of MLActivityClassifier.ModelParameters(v20, type metadata accessor for MLStyleTransfer.DataSource);
    outlined destroy of Either<LogisticRegressionClassifier<Float, String>, FullyConnectedNetworkClassifier<Float, String>>((uint64_t)&v36, &demangling cache variable for type metadata for URL?);
    return outlined destroy of Either<LogisticRegressionClassifier<Float, String>, FullyConnectedNetworkClassifier<Float, String>>((uint64_t)&v36, &demangling cache variable for type metadata for URL?);
  }
  else
  {
    outlined destroy of Either<LogisticRegressionClassifier<Float, String>, FullyConnectedNetworkClassifier<Float, String>>((uint64_t)&v36, &demangling cache variable for type metadata for URL?);
    outlined destroy of Either<LogisticRegressionClassifier<Float, String>, FullyConnectedNetworkClassifier<Float, String>>((uint64_t)&v36, &demangling cache variable for type metadata for URL?);
    uint64_t v40 = v42;
    LODWORD(v48) = v43;
    uint64_t v23 = v49;
    id v41 = *(void (**)(uint64_t *, uint64_t *, uint64_t))(v49 + 32);
    int64_t v24 = v50;
    uint64_t v25 = v51;
    v41(v50, v44, v51);
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(v23 + 16))(v46, v24, v25);
    outlined init with copy of MLTrainingSessionParameters(v52, (uint64_t)v45, type metadata accessor for MLStyleTransfer.ModelParameters);
    uint64_t v26 = *(unsigned __int8 *)(v23 + 80);
    uint64_t v27 = ~*(unsigned __int8 *)(v23 + 80) & (v26 + 16);
    unint64_t v28 = (v39 + v27 + 7) & 0xFFFFFFFFFFFFFFF8;
    uint64_t v29 = *(unsigned __int8 *)(v38 + 80);
    uint64_t v30 = ~v29 & (v29 + v28 + 9);
    uint64_t v31 = swift_allocObject(&unk_3979E8, v30 + v37, v29 | v26 | 7);
    double v32 = (uint64_t *)(v31 + v27);
    uint64_t v33 = v40;
    v41(v32, v46, v51);
    *(void *)(v31 + v28) = v33;
    char v34 = v48;
    *(unsigned char *)(v31 + v28 + 8) = v48 & 1;
    LOBYTE(v28) = v34;
    outlined init with take of MLClassifierMetrics((uint64_t)v45, v31 + v30, type metadata accessor for MLStyleTransfer.ModelParameters);
    outlined copy of Result<_DataTable, Error>(v33, v28);
    uint64_t v35 = v53;
    specialized blockAwait<A>(_:)((uint64_t)&async function pointer to partial apply for closure #1 in MLStyleTransfer.init(trainingData:parameters:), v31);
    uint64_t v53 = v35;
    swift_release();
    outlined consume of Result<_DataTable, Error>(v33, v28);
    outlined destroy of MLActivityClassifier.ModelParameters(v52, type metadata accessor for MLStyleTransfer.ModelParameters);
    outlined destroy of MLActivityClassifier.ModelParameters(v47, type metadata accessor for MLStyleTransfer.DataSource);
    return (*(uint64_t (**)(uint64_t *, uint64_t))(v49 + 8))(v50, v51);
  }
}

void MLStyleTransfer.DataSource.preprocessDataSource(textelDensity:styleImageDestination:contentImagesDestination:)(unsigned char *a1, void *a2, uint64_t a3, void *a4, void *a5)
{
  uint64_t v41 = v5;
  uint64_t v35 = v6;
  uint64_t v36 = a5;
  double v32 = a2;
  uint64_t v33 = a1;
  int64_t v9 = *(void *)(*(void *)(type metadata accessor for MLStyleTransfer.DataSource(0) - 8) + 64);
  uint64_t v10 = alloca(v9);
  uint64_t v11 = alloca(v9);
  uint64_t v38 = &v32;
  uint64_t v37 = type metadata accessor for URL(0);
  uint64_t v12 = *(void *)(v37 - 8);
  int64_t v13 = *(void *)(v12 + 64);
  uint64_t v14 = alloca(v13);
  uint64_t v15 = alloca(v13);
  uint64_t v16 = alloca(v13);
  uint64_t v17 = alloca(v13);
  uint64_t v18 = alloca(v13);
  uint64_t v19 = alloca(v13);
  uint64_t v40 = &v32;
  uint64_t v20 = alloca(v13);
  uint64_t v21 = alloca(v13);
  int64_t v39 = &v32;
  char v34 = &v32;
  uint64_t v22 = v41;
  MLStyleTransfer.DataSource.processImages(textelDensity:styleImageDestination:contentImagesDestination:)((uint64_t)&v32, (uint64_t)&v32, a3, a4, v36);
  if (!v22)
  {
    uint64_t v23 = *(void (**)(void **, void **, uint64_t))(v12 + 32);
    uint64_t v41 = v12;
    uint64_t v24 = v37;
    v23(v39, &v32, v37);
    v23(v40, v34, v24);
    uint64_t v25 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (styleImage: URL, contentDirectory: URL, processingOption: VNImageCropAndScaleOption?));
    uint64_t v26 = (uint64_t)v38;
    uint64_t v27 = (char *)v38 + *(int *)(v25 + 48);
    uint64_t v36 = (void *)*(int *)(v25 + 64);
    uint64_t v35 = 0;
    unint64_t v28 = *(void (**)(void **, void **, uint64_t))(v41 + 16);
    v28(v38, v39, v24);
    v28((void **)v27, v40, v24);
    uint64_t v29 = v36;
    *(void *)((char *)v36 + v26) = 0;
    v29[v26 + 8] = 0;
    MLStyleTransfer.DataSource.getStyleImageAndContentTable()(v33, v32);
    outlined destroy of MLActivityClassifier.ModelParameters((uint64_t)v38, type metadata accessor for MLStyleTransfer.DataSource);
    uint64_t v30 = *(void (**)(void **, uint64_t))(v41 + 8);
    uint64_t v31 = v37;
    v30(v40, v37);
    v30(v39, v31);
  }
}

uint64_t type metadata accessor for MLStyleTransfer.DataSource(uint64_t a1)
{
  return type metadata accessor for MLImageClassifier.CustomFeatureExtractor(a1, (uint64_t *)&type metadata singleton initialization cache for MLStyleTransfer.DataSource, (uint64_t)&nominal type descriptor for MLStyleTransfer.DataSource);
}

uint64_t closure #1 in MLStyleTransfer.init(trainingData:parameters:)(uint64_t a1, uint64_t a2, uint64_t a3, char a4, uint64_t a5)
{
  *(void *)(v5 + 56) = a5;
  *(unsigned char *)(v5 + 25) = a4;
  *(void *)(v5 + 48) = a3;
  *(void *)(v5 + 40) = a2;
  *(void *)(v5 + 32) = a1;
  uint64_t v6 = type metadata accessor for MLStyleTransfer.ModelParameters(0);
  *(void *)(v5 + 64) = swift_task_alloc((*(void *)(*(void *)(v6 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = type metadata accessor for URL(0);
  *(void *)(v5 + 72) = v7;
  uint64_t v8 = *(void *)(v7 - 8);
  *(void *)(v5 + 80) = v8;
  *(void *)(v5 + 88) = swift_task_alloc((*(void *)(v8 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  return swift_task_switch(closure #1 in MLStyleTransfer.init(trainingData:parameters:), 0, 0);
}

uint64_t closure #1 in MLStyleTransfer.init(trainingData:parameters:)()
{
  uint64_t v1 = *(void *)(v0 + 64);
  uint64_t v2 = *(void *)(v0 + 56);
  uint64_t v3 = *(void *)(v0 + 48);
  char v4 = *(unsigned char *)(v0 + 25);
  (*(void (**)(void, void, void))(*(void *)(v0 + 80) + 16))(*(void *)(v0 + 88), *(void *)(v0 + 40), *(void *)(v0 + 72));
  *(void *)(v0 + 16) = v3;
  *(unsigned char *)(v0 + 24) = v4 & 1;
  outlined init with copy of MLTrainingSessionParameters(v2, v1, type metadata accessor for MLStyleTransfer.ModelParameters);
  outlined copy of Result<_DataTable, Error>(v3, v4);
  uint64_t v5 = (void *)swift_task_alloc(dword_3A50DC);
  *(void *)(v0 + 96) = v5;
  *uint64_t v5 = v0;
  v5[1] = closure #1 in MLStyleTransfer.init(trainingData:parameters:);
  return MLStyleTransfer.init(styleImage:contentTable:parameters:)(*(void *)(v0 + 32), *(void *)(v0 + 88), v0 + 16, *(void *)(v0 + 64));
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;

  uint64_t v2 = *(void *)(*v1 + 96);
  uint64_t v3 = *v1;
  *(void *)(v3 + 104) = v0;
  swift_task_dealloc(v2);
  if (v0) {
    return swift_task_switch(closure #1 in MLStyleTransfer.init(trainingData:parameters:), 0, 0);
  }
  uint64_t v5 = *(void *)(v3 + 64);
  swift_task_dealloc(*(void *)(v3 + 88));
  swift_task_dealloc(v5);
  return (*(uint64_t (**)(void))(v3 + 8))();
}

{
  uint64_t v0;
  uint64_t v1;

  uint64_t v1 = *(void *)(v0 + 64);
  swift_task_dealloc(*(void *)(v0 + 88));
  swift_task_dealloc(v1);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_5646B()
{
  uint64_t v11 = v0;
  uint64_t v12 = type metadata accessor for URL(0);
  uint64_t v1 = *(void *)(v12 - 8);
  uint64_t v2 = *(unsigned __int8 *)(v1 + 80);
  uint64_t v3 = ~*(unsigned __int8 *)(v1 + 80) & (v2 + 16);
  unint64_t v4 = (*(void *)(v1 + 64) + v3 + 7) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v13 = type metadata accessor for MLStyleTransfer.ModelParameters(0);
  uint64_t v5 = *(void *)(v13 - 8);
  uint64_t v9 = *(unsigned __int8 *)(v5 + 80);
  uint64_t v6 = ~v9 & (v4 + v9 + 9);
  uint64_t v10 = *(void *)(v5 + 64);
  uint64_t v14 = *(void (**)(uint64_t, uint64_t))(v1 + 8);
  v14(v11 + v3, v12);
  outlined consume of Result<_DataTable, Error>(*(void *)(v11 + v4), *(_DWORD *)(v11 + v4 + 8));
  uint64_t v7 = v6 + v11 + *(int *)(v13 + 20);
  if (!__swift_getEnumTagSinglePayload(v7, 1, v12)) {
    v14(v7, v12);
  }
  return swift_deallocObject(v11, v10 + v6, v9 | v2 | 7);
}

uint64_t partial apply for closure #1 in MLStyleTransfer.init(trainingData:parameters:)(uint64_t a1)
{
  uint64_t v3 = *(void *)(type metadata accessor for URL(0) - 8);
  uint64_t v4 = ~*(unsigned __int8 *)(v3 + 80) & (*(unsigned __int8 *)(v3 + 80) + 16);
  unint64_t v5 = (*(void *)(v3 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v6 = *(unsigned __int8 *)(*(void *)(type metadata accessor for MLStyleTransfer.ModelParameters(0) - 8) + 80);
  uint64_t v7 = (v5 + v6 + 9) & ~v6;
  uint64_t v10 = *(void *)(v1 + v5);
  LOBYTE(v5) = *(unsigned char *)(v1 + v5 + 8);
  uint64_t v8 = (void *)swift_task_alloc(dword_3A4D6C);
  *(void *)(v2 + 16) = v8;
  *uint64_t v8 = v2;
  v8[1] = partial apply for closure #1 in MLActivityClassifier.init(trainingData:featureColumns:labelColumn:recordingFileColumn:parameters:);
  return closure #1 in MLStyleTransfer.init(trainingData:parameters:)(a1, v1 + v4, v10, v5, v1 + v7);
}

uint64_t MLStyleTransfer.init(styleImage:contentTable:parameters:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  *(void *)(v4 + 32) = a4;
  *(void *)(v4 + 24) = a2;
  *(void *)(v4 + 16) = a1;
  *(void *)(v4 + 40) = *(void *)a3;
  *(unsigned char *)(v4 + 84) = *(unsigned char *)(a3 + 8);
  return swift_task_switch(MLStyleTransfer.init(styleImage:contentTable:parameters:), 0, 0);
}

uint64_t MLStyleTransfer.init(styleImage:contentTable:parameters:)()
{
  uint64_t v17 = v0 | 0x1000000000000000;
  uint64_t v16 = v1;
  char v15 = *(unsigned char *)(v1 + 84);
  uint64_t v2 = *(void *)(v1 + 40);
  uint64_t v3 = *(unsigned char **)(v1 + 32);
  uint64_t v4 = *(void *)(v1 + 16);
  uint64_t v5 = *(void *)(v1 + 24);
  uint64_t v6 = *(int *)(type metadata accessor for MLStyleTransfer(0) + 20);
  *(_DWORD *)(v1 + 80) = v6;
  outlined init with copy of MLTrainingSessionParameters((uint64_t)v3, v6 + v4, type metadata accessor for MLStyleTransfer.ModelParameters);
  uint64_t v13 = v2;
  char v14 = v15;
  uint64_t v7 = static MLStyleTransfer.validateAndConvertParameters(_:styleImage:contentTable:)(v3, v5, (uint64_t)&v13);
  *(void *)(v1 + 48) = v7;
  uint64_t v8 = v7;
  uint64_t v9 = type metadata accessor for _Model();
  swift_allocObject(v9, 48, 7);
  uint64_t v10 = dword_3AABDC;
  swift_retain();
  uint64_t v11 = (void *)swift_task_alloc(v10);
  *(void *)(v1 + 56) = v11;
  *uint64_t v11 = v1;
  v11[1] = MLStyleTransfer.init(styleImage:contentTable:parameters:);
  return _Model.init(type:parameters:modelOptions:)(14, v8, 0);
}

{
  uint64_t v0;
  BOOL v1;
  char v2;
  uint64_t v3;
  uint64_t v4;
  int v5;
  int *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  **(void **)(v0 + 16) = *(void *)(v0 + 72);
  uint64_t v1 = AnalyticsReporter.init()();
  uint64_t v2 = *(unsigned char *)(v0 + 84);
  uint64_t v3 = *(void *)(v0 + 40);
  if (v1)
  {
    outlined consume of Result<_DataTable, Error>(*(void *)(v0 + 40), v2);
  }
  else
  {
    uint64_t v4 = *(void *)(v0 + 32);
    uint64_t v5 = MLDataTable.size.getter();
    outlined consume of Result<_DataTable, Error>(v3, v2);
    AnalyticsReporter.reportDataMetrics(model:metricName:quantity:)(CreateML_ModelType_styleTransfer, (Swift::String)__PAIR128__((unint64_t)(" training session" + 0x8000000000000000), 0xD000000000000011), (float)v5);
    uint64_t v6 = (int *)type metadata accessor for MLStyleTransfer.ModelParameters(0);
    AnalyticsReporter.reportDataMetrics(model:metricName:quantity:)(CreateML_ModelType_styleTransfer, (Swift::String)__PAIR128__(0xEE00736E6F697461, 0x726574492078614DLL), (float)(int)*(void *)(v4 + v6[7]));
    AnalyticsReporter.reportDataMetrics(model:metricName:quantity:)(CreateML_ModelType_styleTransfer, (Swift::String)__PAIR128__(0xEE00797469736E65, 0x44206C6574786554), (float)(int)*(void *)(v4 + v6[8]));
    AnalyticsReporter.reportDataMetrics(model:metricName:quantity:)(CreateML_ModelType_styleTransfer, (Swift::String)__PAIR128__(0xEE006874676E6572, 0x745320656C797453), (float)(int)*(void *)(v4 + v6[9]));
  }
  uint64_t v7 = *(void *)(v0 + 24);
  uint64_t v8 = *(void *)(v0 + 32);
  swift_release();
  outlined destroy of MLActivityClassifier.ModelParameters(v8, type metadata accessor for MLStyleTransfer.ModelParameters);
  uint64_t v9 = type metadata accessor for URL(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v9 - 8) + 8))(v7, v9);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  uint64_t v1 = *(void *)(v0 + 24);
  uint64_t v2 = *(void *)(v0 + 32);
  swift_release();
  outlined destroy of MLActivityClassifier.ModelParameters(v2, type metadata accessor for MLStyleTransfer.ModelParameters);
  uint64_t v3 = type metadata accessor for URL(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(v1, v3);
  outlined destroy of MLActivityClassifier.ModelParameters(*(void *)(v0 + 16) + *(int *)(v0 + 80), type metadata accessor for MLStyleTransfer.ModelParameters);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t MLStyleTransfer.init(styleImage:contentTable:parameters:)(uint64_t a1)
{
  uint64_t v5 = *(void *)(*v2 + 56);
  uint64_t v4 = *v2;
  *(void *)(*v2 + 64) = v1;
  swift_task_dealloc(v5);
  if (v1)
  {
    outlined consume of Result<_DataTable, Error>(*(void *)(v4 + 40), *(unsigned char *)(v4 + 84));
    uint64_t v6 = MLStyleTransfer.init(styleImage:contentTable:parameters:);
  }
  else
  {
    *(void *)(v4 + 72) = a1;
    uint64_t v6 = MLStyleTransfer.init(styleImage:contentTable:parameters:);
  }
  return swift_task_switch(v6, 0, 0);
}

uint64_t static MLStyleTransfer.validateAndConvertParameters(_:styleImage:contentTable:)(unsigned char *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v63 = v3;
  uint64_t v65 = a2;
  uint64_t v61 = a1;
  uint64_t v60 = type metadata accessor for _Model.Parameters(0);
  int64_t v5 = *(void *)(*(void *)(v60 - 8) + 64);
  uint64_t v6 = alloca(v5);
  uint64_t v7 = alloca(v5);
  uint64_t v56 = (uint64_t *)v50;
  uint64_t v8 = alloca(v5);
  uint64_t v9 = alloca(v5);
  id v57 = (uint64_t *)v50;
  uint64_t v10 = *(void *)a3;
  char v11 = *(unsigned char *)(a3 + 8);
  uint64_t empty = tc_v1_parameters_create_empty(0);
  if (!empty) {
    BUG();
  }
  uint64_t v13 = empty;
  uint64_t v14 = type metadata accessor for CMLParameters();
  uint64_t v64 = swift_allocObject(v14, 24, 7);
  *(void *)(v64 + 16) = v13;
  uint64_t v54 = v10;
  char v55 = v11 & 1;
  outlined copy of Result<_DataTable, Error>(v10, v11);
  v15._uint64_t countAndFlagsBits = 0x55746E65746E6F63;
  v15._char object = (void *)0xEB00000000734C52;
  MLDataTable.subscript.getter(v15);
  outlined consume of Result<_DataTable, Error>(v10, v11);
  uint64_t v16 = v52;
  if (v53)
  {
    uint64_t v17 = v52;
    outlined consume of Result<_DataTable, Error>(v52, 1);
  }
  else
  {
    uint64_t v18 = *(void *)(v52 + 16);
    swift_retain();
    outlined consume of Result<_DataTable, Error>(v16, 0);
    uint64_t v19 = v64;
    uint64_t v20 = v63;
    CMLParameters.add(key:column:)(72, v18);
    if (v20)
    {
      swift_release();
      goto LABEL_18;
    }
    uint64_t v63 = 0;
    uint64_t v17 = v18;
    swift_release();
  }
  uint64_t v21 = URL.path.getter(v17);
  uint64_t v23 = v22;
  uint64_t v24 = type metadata accessor for _UntypedColumn();
  swift_initStackObject(v24, v50);
  uint64_t v25 = specialized _UntypedColumn.init<A>(repeating:count:)(v21, v23, 1);
  uint64_t v26 = *(void *)(v25 + 16);
  swift_retain();
  uint64_t v19 = v64;
  uint64_t v27 = v63;
  CMLParameters.add(key:column:)(71, v26);
  if (v27)
  {
    swift_release();
    swift_release();
  }
  else
  {
    uint64_t v65 = v25;
    swift_release();
    uint64_t v28 = type metadata accessor for MLStyleTransfer.ModelParameters(0);
    uint64_t v29 = *(int *)(v28 + 36);
    uint64_t v30 = v61;
    static MLStyleTransfer.ModelParameters.verifyStyleStrengthParameter(value:)(*(void *)&v61[v29]);
    uint64_t v58 = v29;
    uint64_t v31 = *(int *)(v28 + 32);
    static MLStyleTransfer.ModelParameters.verifyTextelDensityParameter(value:)(*(void *)&v30[v31]);
    uint64_t v59 = v31;
    uint64_t v62 = (int *)v28;
    uint64_t v63 = 0;
    uint64_t v32 = tc_v1_flex_dict_create(0);
    if (!v32) {
      BUG();
    }
    uint64_t v33 = v32;
    uint64_t v34 = type metadata accessor for CMLDictionary();
    uint64_t inited = swift_initStackObject(v34, v51);
    *(void *)(inited + 16) = v33;
    uint64_t v36 = *v30;
    uint64_t v37 = 7237219;
    if (*v30) {
      uint64_t v37 = 0x6574694C6E6E63;
    }
    uint64_t v38 = (uint64_t)v57;
    *id v57 = v37;
    *(void *)(v38 + 8) = (v36 << 58) | 0xE300000000000000;
    swift_storeEnumTagMultiPayload(v38, v60, 5);
    CMLDictionary.add(_:)(v38);
    outlined destroy of MLActivityClassifier.ModelParameters(v38, type metadata accessor for _Model.Parameters);
    uint64_t v39 = *(void *)&v30[v62[7]];
    uint64_t v40 = v30;
    uint64_t v41 = v56;
    *uint64_t v56 = v39;
    uint64_t v42 = v60;
    swift_storeEnumTagMultiPayload(v41, v60, 0);
    CMLDictionary.add(_:)((uint64_t)v41);
    outlined destroy of MLActivityClassifier.ModelParameters((uint64_t)v41, type metadata accessor for _Model.Parameters);
    uint64_t *v41 = *(void *)&v40[v62[6]];
    uint64_t v43 = v42;
    swift_storeEnumTagMultiPayload(v41, v42, 1);
    CMLDictionary.add(_:)((uint64_t)v41);
    outlined destroy of MLActivityClassifier.ModelParameters((uint64_t)v41, type metadata accessor for _Model.Parameters);
    uint64_t v44 = v61;
    uint64_t *v41 = 4 * (*(void *)&v61[v59] / 4);
    swift_storeEnumTagMultiPayload(v41, v43, 21);
    CMLDictionary.add(_:)((uint64_t)v41);
    outlined destroy of MLActivityClassifier.ModelParameters((uint64_t)v41, type metadata accessor for _Model.Parameters);
    uint64_t *v41 = *(void *)&v44[v58];
    swift_storeEnumTagMultiPayload(v41, v43, 22);
    CMLDictionary.add(_:)((uint64_t)v41);
    outlined destroy of MLActivityClassifier.ModelParameters((uint64_t)v41, type metadata accessor for _Model.Parameters);
    int v45 = v61[v62[10]];
    uint64_t v46 = 1869903201;
    if (v61[v62[10]]) {
      uint64_t v46 = 7696483;
    }
    uint64_t *v41 = v46;
    v41[1] = ((unint64_t)(v45 ^ 1u) << 56) - 0x1D00000000000000;
    swift_storeEnumTagMultiPayload(v41, v43, 9);
    CMLDictionary.add(_:)((uint64_t)v41);
    outlined destroy of MLActivityClassifier.ModelParameters((uint64_t)v41, type metadata accessor for _Model.Parameters);
    type metadata accessor for CMLFeatureValue();
    swift_retain();
    uint64_t v47 = v63;
    uint64_t v48 = CMLFeatureValue.__allocating_init(_:)(inited);
    if (v47)
    {
      swift_setDeallocating(inited);
      tc_v1_release(*(void *)(inited + 16));
      swift_release();
      uint64_t v19 = v64;
    }
    else
    {
      uint64_t v19 = v64;
      CMLParameters.add(key:featureValue:)(47, v48);
      swift_release();
      swift_setDeallocating(inited);
      tc_v1_release(*(void *)(inited + 16));
    }
  }
LABEL_18:
  swift_release();
  return v19;
}

uint64_t MLStyleTransfer.init(checkpoint:)(uint64_t a1)
{
  uint64_t v18 = v1;
  uint64_t v3 = *(void *)(type metadata accessor for MLCheckpoint(0) - 8);
  int64_t v4 = *(void *)(v3 + 64);
  int64_t v5 = alloca(v4);
  uint64_t v6 = alloca(v4);
  outlined init with copy of MLTrainingSessionParameters(a1, (uint64_t)&v18, type metadata accessor for MLCheckpoint);
  uint64_t v7 = *(unsigned __int8 *)(v3 + 80);
  uint64_t v8 = ~*(unsigned __int8 *)(v3 + 80) & (v7 + 16);
  uint64_t v9 = swift_allocObject(&unk_397A10, v8 + v4, v7 | 7);
  outlined init with take of MLClassifierMetrics((uint64_t)&v18, v9 + v8, type metadata accessor for MLCheckpoint);
  specialized blockAwait<A>(_:)((uint64_t)&async function pointer to partial apply for closure #1 in MLStyleTransfer.init(checkpoint:), v9);
  if (v2)
  {
    outlined destroy of MLActivityClassifier.ModelParameters(a1, type metadata accessor for MLCheckpoint);
    return swift_release();
  }
  else
  {
    uint64_t v12 = v10;
    swift_release();
    outlined destroy of MLActivityClassifier.ModelParameters(a1, type metadata accessor for MLCheckpoint);
    uint64_t v13 = v18;
    void *v18 = v12;
    uint64_t v19 = *(int *)(type metadata accessor for MLStyleTransfer(0) + 20);
    uint64_t v14 = (char *)v13 + v19;
    Swift::String v15 = (int *)type metadata accessor for MLStyleTransfer.ModelParameters(0);
    uint64_t v16 = (uint64_t)&v14[v15[5]];
    uint64_t v17 = type metadata accessor for URL(0);
    __swift_storeEnumTagSinglePayload(v16, 1, 1, v17);
    *(void *)&v14[v15[6]] = 1;
    v14[v15[10]] = 0;
    *((unsigned char *)v18 + v19) = 0;
    *(void *)&v14[v15[7]] = 500;
    *(void *)&v14[v15[8]] = 256;
    uint64_t result = v15[9];
    *(void *)&v14[result] = 5;
  }
  return result;
}

uint64_t closure #1 in MLStyleTransfer.init(checkpoint:)(uint64_t a1, uint64_t a2)
{
  v2[6] = a2;
  v2[5] = a1;
  uint64_t v3 = type metadata accessor for URL(0);
  v2[7] = v3;
  uint64_t v4 = *(void *)(v3 - 8);
  v2[8] = v4;
  v2[9] = swift_task_alloc((*(void *)(v4 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  return swift_task_switch(closure #1 in MLStyleTransfer.init(checkpoint:), 0, 0);
}

uint64_t closure #1 in MLStyleTransfer.init(checkpoint:)()
{
  (*(void (**)(void, void, void))(v0[8] + 16))(v0[9], v0[6], v0[7]);
  uint64_t v2 = URL.absoluteString.getter();
  uint64_t v3 = v1;
  if ((v1 & 0x1000000000000000) != 0 || !(v1 & 0x2000000000000000 | v2 & 0x1000000000000000))
  {
    _StringGuts._slowWithCString<A>(_:)(closure #1 in CMLModel.init(url:), 0, v2, v1, &type metadata for OpaquePointer);
LABEL_7:
    swift_bridgeObjectRelease(v3);
    goto LABEL_10;
  }
  Swift::String v15 = v0 + 4;
  uint64_t v4 = swift_task_alloc(32);
  *(void *)(v4 + 24) = 0;
  *(void *)(v4 + 16) = closure #1 in CMLModel.init(url:);
  if ((v3 & 0x2000000000000000) == 0)
  {
    if ((v2 & 0x1000000000000000) != 0)
    {
      uint64_t v5 = (v3 & 0xFFFFFFFFFFFFFFFLL) + 32;
      uint64_t v6 = v2 & 0xFFFFFFFFFFFFLL;
    }
    else
    {
      uint64_t v5 = _StringObject.sharedUTF8.getter(v2, v3);
      uint64_t v6 = v14;
    }
    *Swift::String v15 = _sSRsRi_zrlE17withMemoryRebound2to_qd_1_qd__m_qd_1_SRyqd__Gqd_0_YKXEtqd_0_YKs5ErrorRd_0_Ri_d__Ri_d_1_r1_lFSRyxGq0_q_Ri_zRi0_zRi__Ri0__Ri_0_Ri0_0_r1_lys4Int8VsAD_pqd_1_Isgyrzr_SRys5UInt8VGqd_1_sAD_pAIRszAGRsd__sAD_pRsd_0_Ri_d_1_r_1_lIetMgyrzo_Tpq5s13OpaquePointerV_Tg507_sSRys4f5VGxs5e31_pIgyrzo_ACxsAD_pIegyrzr_lTRs13hI5V_TG5SRyAGGALsAD_pIgyrzo_Tf1cn_n(v5, v6, (uint64_t (*)(uint64_t))partial apply for specialized closure #1 in _StringGuts.withCString<A>(_:));
    swift_task_dealloc(v4);
    goto LABEL_7;
  }
  v0[2] = v2;
  v0[3] = v3 & 0xFFFFFFFFFFFFFFLL;
  uint64_t v7 = specialized handling<A, B>(_:_:)((uint64_t)(v0 + 2));
  if (!v7) {
    BUG();
  }
  *Swift::String v15 = v7;
  swift_bridgeObjectRelease(v3);
  swift_task_dealloc(v4);
LABEL_10:
  uint64_t v8 = v0[4];
  (*(void (**)(void, void))(v0[8] + 8))(v0[9], v0[7]);
  uint64_t v9 = type metadata accessor for CMLModel();
  uint64_t v10 = swift_allocObject(v9, 24, 7);
  *(void *)(v10 + 16) = v8;
  uint64_t v11 = type metadata accessor for _Model();
  swift_allocObject(v11, 48, 7);
  uint64_t v12 = (void *)swift_task_alloc(dword_3AABE4);
  v0[10] = v12;
  void *v12 = v0;
  v12[1] = closure #1 in MLStyleTransfer.init(checkpoint:);
  return _Model.init(impl:)(v10);
}

{
  uint64_t v0;
  uint64_t v1;

  uint64_t v1 = *(void *)(v0 + 72);
  **(void **)(v0 + 40) = *(void *)(v0 + 88);
  swift_task_dealloc(v1);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t closure #1 in MLStyleTransfer.init(checkpoint:)(uint64_t a1)
{
  uint64_t v4 = *v2;
  uint64_t v5 = *(void *)(*v2 + 80);
  uint64_t v6 = *v2;
  swift_task_dealloc(v5);
  if (v1)
  {
    swift_task_dealloc(*(void *)(v4 + 72));
    return (*(uint64_t (**)(void))(v6 + 8))();
  }
  else
  {
    *(void *)(v4 + 88) = a1;
    return swift_task_switch(closure #1 in MLStyleTransfer.init(checkpoint:), 0, 0);
  }
}

uint64_t sub_573C4()
{
  uint64_t v11 = v0;
  uint64_t v1 = type metadata accessor for MLCheckpoint(0);
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = ~*(unsigned __int8 *)(v2 + 80) & (v3 + 16);
  uint64_t v5 = v4 + v0;
  uint64_t v6 = *(void *)(v2 + 64) + v4;
  uint64_t v7 = type metadata accessor for URL(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v7 - 8) + 8))(v5, v7);
  uint64_t v8 = v5 + *(int *)(v1 + 28);
  uint64_t v9 = type metadata accessor for Date(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v9 - 8) + 8))(v8, v9);
  swift_bridgeObjectRelease(*(void *)(*(int *)(v1 + 32) + v5));
  return swift_deallocObject(v11, v6, v3 | 7);
}

uint64_t partial apply for closure #1 in MLStyleTransfer.init(checkpoint:)(uint64_t a1)
{
  uint64_t v3 = type metadata accessor for MLCheckpoint(0);
  uint64_t v4 = v1
     + (~*(unsigned __int8 *)(*(void *)(v3 - 8) + 80) & (*(unsigned __int8 *)(*(void *)(v3 - 8)
                                                                                              + 80)
                                                           + 16));
  uint64_t v5 = (void *)swift_task_alloc(dword_3A4D7C);
  *(void *)(v2 + 16) = v5;
  *uint64_t v5 = v2;
  v5[1] = partial apply for closure #1 in MLActivityClassifier.init(trainingData:featureColumns:labelColumn:recordingFileColumn:parameters:);
  return closure #1 in MLStyleTransfer.init(checkpoint:)(a1, v4);
}

uint64_t type metadata accessor for MLStyleTransfer(uint64_t a1)
{
  return type metadata accessor for MLImageClassifier.CustomFeatureExtractor(a1, (uint64_t *)&type metadata singleton initialization cache for MLStyleTransfer, (uint64_t)&nominal type descriptor for MLStyleTransfer);
}

void *static MLStyleTransfer.train(trainingData:parameters:sessionParameters:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t result = (void *)static MLStyleTransfer.makeTrainingSession(trainingData:parameters:sessionParameters:)(a1, a2, a3);
  if (!v3)
  {
    uint64_t v5 = (uint64_t)result;
    uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for MLJob<MLStyleTransfer>);
    uint64_t v7 = (void *)swift_allocObject(v6, *(unsigned int *)(v6 + 48), *(unsigned __int16 *)(v6 + 52));
    return specialized MLJob.init(_:)(v7, v5);
  }
  return result;
}

uint64_t static MLStyleTransfer.makeTrainingSession(trainingData:parameters:sessionParameters:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v23 = v3;
  uint64_t v26 = a2;
  uint64_t v24 = a1;
  int64_t v5 = *(void *)(*(void *)(type metadata accessor for MLTrainingSessionParameters(0) - 8) + 64);
  uint64_t v6 = alloca(v5);
  uint64_t v7 = alloca(v5);
  uint64_t v25 = &v21;
  uint64_t v8 = alloca(v5);
  uint64_t v9 = alloca(v5);
  int64_t v10 = *(void *)(*(void *)(type metadata accessor for MLStyleTransfer.ModelParameters(0) - 8) + 64);
  uint64_t v11 = alloca(v10);
  uint64_t v12 = alloca(v10);
  int64_t v13 = *(void *)(*(void *)(type metadata accessor for MLStyleTransfer.DataSource(0) - 8) + 64);
  uint64_t v14 = alloca(v13);
  Swift::String v15 = alloca(v13);
  outlined init with copy of MLTrainingSessionParameters(v24, (uint64_t)&v21, type metadata accessor for MLStyleTransfer.DataSource);
  outlined init with copy of MLTrainingSessionParameters(v26, (uint64_t)&v21, type metadata accessor for MLStyleTransfer.ModelParameters);
  uint64_t v26 = a3;
  outlined init with copy of MLTrainingSessionParameters(a3, (uint64_t)&v21, type metadata accessor for MLTrainingSessionParameters);
  uint64_t v16 = type metadata accessor for MLStyleTransfer.TrainingSessionDelegate(0);
  swift_allocObject(v16, *(unsigned int *)(v16 + 48), *(unsigned __int16 *)(v16 + 52));
  uint64_t v17 = v23;
  uint64_t result = MLStyleTransfer.TrainingSessionDelegate.init(trainingData:modelParameters:sessionParameters:)((uint64_t)&v21, (uint64_t)&v21, (uint64_t)&v21);
  if (!v17)
  {
    v22[3] = v16;
    v22[4] = &protocol witness table for MLStyleTransfer.TrainingSessionDelegate;
    v22[0] = result;
    uint64_t v19 = (uint64_t)v25;
    outlined init with copy of MLTrainingSessionParameters(v26, (uint64_t)v25, type metadata accessor for MLTrainingSessionParameters);
    uint64_t v20 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for MLTrainingSession<MLStyleTransfer>);
    swift_allocObject(v20, *(unsigned int *)(v20 + 48), *(unsigned __int16 *)(v20 + 52));
    return specialized MLTrainingSession.init(delegate:parameters:modelType:)((uint64_t)v22, v19, 14);
  }
  return result;
}

void *static MLStyleTransfer.resume(_:)(uint64_t a1)
{
  uint64_t v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for MLJob<MLStyleTransfer>);
  uint64_t v2 = (void *)swift_allocObject(v1, *(unsigned int *)(v1 + 48), *(unsigned __int16 *)(v1 + 52));
  swift_retain();
  return specialized MLJob.init(_:)(v2, a1);
}

uint64_t static MLStyleTransfer.restoreTrainingSession(sessionParameters:)(uint64_t a1)
{
  int64_t v2 = *(void *)(*(void *)(type metadata accessor for MLTrainingSessionParameters(0) - 8) + 64);
  uint64_t v3 = alloca(v2);
  uint64_t v4 = alloca(v2);
  uint64_t v12 = v11;
  int64_t v5 = alloca(v2);
  uint64_t v6 = alloca(v2);
  outlined init with copy of MLTrainingSessionParameters(a1, (uint64_t)v11, type metadata accessor for MLTrainingSessionParameters);
  uint64_t v7 = type metadata accessor for MLStyleTransfer.TrainingSessionDelegate(0);
  swift_allocObject(v7, *(unsigned int *)(v7 + 48), *(unsigned __int16 *)(v7 + 52));
  uint64_t result = MLStyleTransfer.TrainingSessionDelegate.init(sessionParameters:)((uint64_t)v11);
  if (!v1)
  {
    v11[3] = v7;
    v11[4] = &protocol witness table for MLStyleTransfer.TrainingSessionDelegate;
    v11[0] = result;
    uint64_t v9 = (uint64_t)v12;
    outlined init with copy of MLTrainingSessionParameters(a1, (uint64_t)v12, type metadata accessor for MLTrainingSessionParameters);
    uint64_t v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for MLTrainingSession<MLStyleTransfer>);
    swift_allocObject(v10, *(unsigned int *)(v10 + 48), *(unsigned __int16 *)(v10 + 52));
    return specialized MLTrainingSession.init(delegate:parameters:modelType:)((uint64_t)v11, v9, 14);
  }
  return result;
}

uint64_t closure #1 in closure #1 in static MLStyleTransfer.resume(_:)(uint64_t a1, int a2, uint64_t a3, void (*a4)(uint64_t *), uint64_t a5)
{
  uint64_t v53 = a5;
  uint64_t v54 = a4;
  LODWORD(v52) = a2;
  char v55 = (uint64_t *)a1;
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Result<MLStyleTransfer, Error>);
  int64_t v7 = *(void *)(*(void *)(v6 - 8) + 64);
  uint64_t v8 = alloca(v7);
  uint64_t v9 = alloca(v7);
  int64_t v10 = *(void *)(*(void *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TaskPriority?)
                              - 8)
                  + 64);
  uint64_t v11 = alloca(v10);
  uint64_t v12 = alloca(v10);
  int64_t v13 = *(void *)(*(void *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for MLStyleTransfer.PersistentParameters?)
                              - 8)
                  + 64);
  uint64_t v14 = alloca(v13);
  Swift::String v15 = alloca(v13);
  uint64_t v16 = type metadata accessor for MLStyleTransfer.PersistentParameters(0);
  uint64_t v17 = *(void *)(v16 - 8);
  int64_t v18 = *(void *)(v17 + 64);
  uint64_t v19 = alloca(v18);
  uint64_t v20 = alloca(v18);
  uint64_t v21 = alloca(v18);
  uint64_t v22 = alloca(v18);
  if (v52)
  {
    uint64_t v32 = (uint64_t)v55;
    uint64_t v43 = (uint64_t)v55;
    swift_storeEnumTagMultiPayload(&v43, v6, 1);
    swift_errorRetain(v32);
    goto LABEL_7;
  }
  uint64_t v47 = v16;
  uint64_t v46 = &v43;
  uint64_t v50 = v17;
  int64_t v49 = v18;
  uint64_t v48 = &v43;
  uint64_t v51 = &v43;
  uint64_t v52 = v6;
  char v55 = &v43;
  outlined init with copy of TabularRegressionTask(direct field offset for MLTrainingSession.delegate + a3, (uint64_t)v44);
  uint64_t v23 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TrainingSessionDelegate);
  uint64_t v24 = type metadata accessor for MLStyleTransfer.TrainingSessionDelegate(0);
  if (!swift_dynamicCast(&v45, v44, v23, v24, 6))
  {
LABEL_5:
    uint64_t v29 = lazy protocol witness table accessor for type MLCreateError and conformance MLCreateError();
    uint64_t v30 = swift_allocError(&type metadata for MLCreateError, v29, 0, 0);
    *(void *)uint64_t v31 = 0xD000000000000021;
    *(void *)(v31 + 8) = "ults from vision request." + 0x8000000000000000;
    *(_OWORD *)(v31 + 16) = 0;
    *(_OWORD *)(v31 + 32) = 0;
    *(unsigned char *)(v31 + 48) = 0;
    uint64_t v43 = v30;
    swift_storeEnumTagMultiPayload(&v43, v52, 1);
LABEL_7:
    v54(&v43);
    return outlined destroy of Either<LogisticRegressionClassifier<Float, String>, FullyConnectedNetworkClassifier<Float, String>>((uint64_t)&v43, &demangling cache variable for type metadata for Result<MLStyleTransfer, Error>);
  }
  uint64_t v25 = v45;
  uint64_t v26 = v45 + OBJC_IVAR____TtCV8CreateML15MLStyleTransfer23TrainingSessionDelegate_trainingParameters;
  swift_beginAccess(v45 + OBJC_IVAR____TtCV8CreateML15MLStyleTransfer23TrainingSessionDelegate_trainingParameters, v44, 0, 0);
  uint64_t v27 = v26;
  uint64_t v28 = (uint64_t)v46;
  outlined init with copy of Either<LogisticRegressionClassifier<Float, String>, FullyConnectedNetworkClassifier<Float, String>>(v27, (uint64_t)v46, &demangling cache variable for type metadata for MLStyleTransfer.PersistentParameters?);
  if (__swift_getEnumTagSinglePayload(v28, 1, v47) == 1)
  {
    swift_release();
    outlined destroy of Either<LogisticRegressionClassifier<Float, String>, FullyConnectedNetworkClassifier<Float, String>>(v28, &demangling cache variable for type metadata for MLStyleTransfer.PersistentParameters?);
    goto LABEL_5;
  }
  uint64_t v34 = v28;
  uint64_t v35 = (uint64_t)v51;
  outlined init with take of MLClassifierMetrics(v34, (uint64_t)v51, type metadata accessor for MLStyleTransfer.PersistentParameters);
  uint64_t v36 = type metadata accessor for TaskPriority(0);
  __swift_storeEnumTagSinglePayload((uint64_t)v55, 1, 1, v36);
  uint64_t v37 = v35;
  uint64_t v38 = (uint64_t)v48;
  outlined init with copy of MLTrainingSessionParameters(v37, (uint64_t)v48, type metadata accessor for MLStyleTransfer.PersistentParameters);
  uint64_t v39 = *(unsigned __int8 *)(v50 + 80);
  uint64_t v40 = ~*(unsigned __int8 *)(v50 + 80) & (v39 + 40);
  unint64_t v41 = (v49 + v40 + 7) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v42 = swift_allocObject(&unk_397B08, v41 + 16, v39 | 7);
  *(_OWORD *)(v42 + 16) = 0;
  *(void *)(v42 + 32) = v25;
  outlined init with take of MLClassifierMetrics(v38, v42 + v40, type metadata accessor for MLStyleTransfer.PersistentParameters);
  *(void *)(v42 + v41) = v54;
  *(void *)(v42 + v41 + 8) = v53;
  swift_retain();
  swift_retain();
  _sScTss5NeverORs_rlE8priority9operationScTyxABGScPSg_xyYaYAcntcfCyt_Tgm5((uint64_t)v55, (uint64_t)&async function pointer to partial apply for closure #1 in closure #1 in closure #1 in static MLStyleTransfer.resume(_:), v42);
  swift_release();
  swift_release();
  return outlined destroy of MLActivityClassifier.ModelParameters((uint64_t)v51, type metadata accessor for MLStyleTransfer.PersistentParameters);
}

uint64_t closure #1 in closure #1 in closure #1 in static MLStyleTransfer.resume(_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  void v7[5] = a7;
  v7[4] = a6;
  void v7[3] = a5;
  v7[2] = a4;
  uint64_t v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Result<MLStyleTransfer, Error>);
  void v7[6] = swift_task_alloc((*(void *)(*(void *)(v8 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  return swift_task_switch(closure #1 in closure #1 in closure #1 in static MLStyleTransfer.resume(_:), 0, 0);
}

uint64_t closure #1 in closure #1 in closure #1 in static MLStyleTransfer.resume(_:)()
{
  uint64_t v1 = swift_task_alloc(32);
  *(void *)(v0 + 56) = v1;
  *(_OWORD *)(v1 + 16) = *(_OWORD *)(v0 + 16);
  int64_t v2 = (char *)&async function pointer to specialized Result<>.init(catching:)
     + async function pointer to specialized Result<>.init(catching:);
  uint64_t v3 = (void *)swift_task_alloc(dword_3AC62C);
  *(void *)(v0 + 64) = v3;
  *uint64_t v3 = v0;
  v3[1] = closure #1 in closure #1 in closure #1 in static MLStyleTransfer.resume(_:);
  return ((uint64_t (*)(void, void *, uint64_t))v2)(*(void *)(v0 + 48), &async function pointer to partial apply for closure #1 in closure #1 in closure #1 in closure #1 in static MLStyleTransfer.resume(_:), v1);
}

{
  uint64_t v0;
  uint64_t v1;

  uint64_t v1 = *(void *)(*(void *)v0 + 56);
  swift_task_dealloc(*(void *)(*(void *)v0 + 64));
  swift_task_dealloc(v1);
  return swift_task_switch(closure #1 in closure #1 in closure #1 in static MLStyleTransfer.resume(_:), 0, 0);
}

{
  uint64_t v0;
  uint64_t v1;

  uint64_t v1 = *(void *)(v0 + 48);
  (*(void (**)(uint64_t))(v0 + 32))(v1);
  outlined destroy of Either<LogisticRegressionClassifier<Float, String>, FullyConnectedNetworkClassifier<Float, String>>(v1, &demangling cache variable for type metadata for Result<MLStyleTransfer, Error>);
  swift_task_dealloc(v1);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t closure #1 in closure #1 in closure #1 in closure #1 in static MLStyleTransfer.resume(_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  void v3[4] = a3;
  void v3[3] = a2;
  v3[2] = a1;
  uint64_t v4 = type metadata accessor for MLStyleTransfer.ModelParameters(0);
  uint64_t v3[5] = v4;
  v3[6] = swift_task_alloc((*(void *)(*(void *)(v4 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  return swift_task_switch(closure #1 in closure #1 in closure #1 in closure #1 in static MLStyleTransfer.resume(_:), 0, 0);
}

uint64_t closure #1 in closure #1 in closure #1 in closure #1 in static MLStyleTransfer.resume(_:)()
{
  uint64_t v1 = (unsigned char *)v0[6];
  int64_t v2 = (int *)v0[5];
  uint64_t v3 = v0[4];
  uint64_t v11 = *(void *)(v0[3] + OBJC_IVAR____TtCV8CreateML15MLStyleTransfer23TrainingSessionDelegate_model);
  uint64_t v4 = (int *)type metadata accessor for MLStyleTransfer.PersistentParameters(0);
  char v12 = *(unsigned char *)(v3 + v4[5]);
  outlined init with copy of MLTrainingSessionParameters(v3 + v4[6], (uint64_t)&v1[v2[5]], type metadata accessor for MLStyleTransfer.ModelParameters.ValidationData);
  uint64_t v5 = *(void *)(v3 + v4[7]);
  uint64_t v6 = *(void *)(v3 + v4[8]);
  *(void *)&v1[v2[6]] = 1;
  uint64_t v7 = v2[10];
  *uint64_t v1 = v12;
  *(void *)&v1[v2[7]] = 500;
  *(void *)&v1[v2[8]] = v5;
  *(void *)&v1[v2[9]] = v6;
  v1[v7] = *(unsigned char *)(v3 + v4[9]);
  uint64_t v8 = dword_3A50D4;
  swift_retain();
  uint64_t v9 = (uint64_t **)swift_task_alloc(v8);
  v0[7] = (uint64_t)v9;
  *uint64_t v9 = v0;
  v9[1] = (uint64_t *)closure #1 in closure #1 in closure #1 in closure #1 in static MLStyleTransfer.resume(_:);
  return MLStyleTransfer.init(model:parameters:)(v0[2], v11, v0[6]);
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;

  int64_t v2 = *(void *)(*v1 + 56);
  uint64_t v3 = *v1;
  *(void *)(v3 + 64) = v0;
  swift_task_dealloc(v2);
  if (v0) {
    return swift_task_switch(closure #1 in closure #1 in closure #1 in closure #1 in static MLStyleTransfer.resume(_:), 0, 0);
  }
  swift_task_dealloc(*(void *)(v3 + 48));
  return (*(uint64_t (**)(void))(v3 + 8))();
}

{
  uint64_t v0;

  swift_task_dealloc(*(void *)(v0 + 48));
  return (*(uint64_t (**)(void))(v0 + 8))();
}

CGImageRef_optional __swiftcall __spoils<cf,zf,sf,of,pf,rax,rdx,rcx,rdi,rsi,r8,r9,r10,r11,r12,xmm0,xmm1,xmm2,xmm3,xmm4,xmm5,xmm6,xmm7> MLStyleTransfer.stylize(image:)(CGImageRef image)
{
  uint64_t v2 = type metadata accessor for VNImageOption(0);
  uint64_t v3 = lazy protocol witness table accessor for type VNImageOption and conformance VNImageOption(&lazy protocol witness table cache variable for type VNImageOption and conformance VNImageOption, type metadata accessor for VNImageOption, (uint64_t)&protocol conformance descriptor for VNImageOption);
  uint64_t v4 = image;
  LOBYTE(v3) = Dictionary.init(dictionaryLiteral:)(_swiftEmptyArrayStorage, v2, (char *)&type metadata for Any + 8, v3);
  objc_allocWithZone((Class)VNImageRequestHandler);
  id v5 = @nonobjc VNImageRequestHandler.init(cgImage:options:)(v4, v3);
  uint64_t v6 = (__CVBuffer *)MLStyleTransfer.stylize(using:)(v5);
  if (v1)
  {
  }
  else
  {
    uint64_t v8 = v6;
    CGImageRef imageOut = 0;
    VTCreateCGImageFromCVPixelBuffer(v6, 0, &imageOut);

    return (CGImageRef_optional)imageOut;
  }
  return result;
}

void *MLStyleTransfer.stylize(using:)(void *a1)
{
  uint64_t v4 = (void *)type metadata accessor for OS_os_log(0, &lazy cache variable for type metadata for VNCoreMLModel, VNCoreMLModel_ptr);
  id v5 = *(id *)(*(void *)v2 + 24);
  id v6 = @nonobjc VNCoreMLModel.__allocating_init(for:)(v5);
  if (v1) {
    return v4;
  }
  id v7 = v6;
  id v8 = objc_allocWithZone((Class)VNCoreMLRequest);
  id v9 = [v8 initWithModel:v7];
  uint64_t v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>);
  uint64_t v11 = (void *)swift_allocObject(v10, 40, 7);
  void v11[2] = 1;
  v11[3] = 3;
  v11[4] = v9;
  id v33 = v11;
  specialized Array._endMutation()();
  id v32 = v7;
  id v30 = a1;
  char v12 = (char)v33;
  type metadata accessor for OS_os_log(0, &lazy cache variable for type metadata for VNRequest, VNRequest_ptr);
  id v31 = v9;
  Class isa = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease(v12);
  id v33 = 0;
  uint64_t v14 = "performRequests:error:";
  LOBYTE(v9) = [v30 performRequests:isa error:&v33];

  id v15 = v33;
  if (!(_BYTE)v9)
  {
    uint64_t v28 = (ValueMetadata *)v33;
    _convertNSErrorToError(_:)(v15);
    uint64_t v23 = v28;

    id v16 = v32;
    uint64_t v4 = v31;
    goto LABEL_10;
  }
  id v16 = v31;
  v15;
  uint64_t v17 = outlined bridged method (ob) of @objc VNRequest.results.getter(v16);
  if (!v17
    || (char v18 = v17, v19 = (uint64_t)specialized _arrayConditionalCast<A, B>(_:)(v17), swift_bridgeObjectRelease(v18), !v19))
  {
    uint64_t v23 = &type metadata for MLCreateError;
    uint64_t v14 = (const char *)lazy protocol witness table accessor for type MLCreateError and conformance MLCreateError();
    swift_allocError(&type metadata for MLCreateError, v14, 0, 0);
    *(void *)uint64_t v24 = 0xD000000000000039;
    *(void *)(v24 + 8) = "textel density out of bounds [" + 0x8000000000000000;
    *(_OWORD *)(v24 + 16) = 0;
    *(_OWORD *)(v24 + 32) = 0;
    *(unsigned char *)(v24 + 48) = 0;
    uint64_t v4 = v32;
LABEL_10:
    swift_willThrow(v23, v14, v24, v25, v26, v27);

    return v4;
  }
  specialized Array._checkSubscript(_:wasNativeTypeChecked:)(0, (v19 & 0xC000000000000003) == 0, v19);
  if ((v19 & 0xC000000000000003) != 0) {
    id v20 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(0, v19);
  }
  else {
    id v20 = *(id *)(v19 + 32);
  }
  uint64_t v21 = v20;
  swift_bridgeObjectRelease(v19);
  id v22 = [v21 pixelBuffer];
  uint64_t v4 = v22;

  return v4;
}

uint64_t MLStyleTransfer.getFullMetadata(_:)(__m128i *a1)
{
  uint64_t v2 = v1;
  uint64_t v3 = a1->i64[1];
  if (v3)
  {
    uint64_t v21 = a1->i64[0];
    uint64_t v20 = a1[1].i64[0];
    __m128i v17 = a1[2];
    uint64_t v19 = a1[3].i64[0];
    uint64_t v4 = a1[4].i64[0];
    uint64_t v22 = a1[1].i64[1];
    uint64_t v23 = a1[3].i64[1];
    type metadata accessor for MLStyleTransfer(0);
    char epi64 = _mm_extract_epi64(_mm_load_si128(&v17), 1);
    if (v4)
    {
      swift_bridgeObjectRetain(v4);
      swift_bridgeObjectRetain(v3);
      swift_bridgeObjectRetain(v22);
      swift_bridgeObjectRetain(epi64);
      swift_bridgeObjectRetain(v23);
      uint64_t v6 = MLStyleTransfer.ModelParameters.modelParametersDescription()();
      unsigned __int8 isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v4);
      uint64_t v18 = v4;
      specialized _NativeDictionary.merge<A>(_:isUnique:uniquingKeysWith:)(v6, (uint64_t)specialized thunk for @escaping @callee_guaranteed (@in_guaranteed A, @in_guaranteed B) -> (@out A, @out B), 0, isUniquelyReferenced_nonNull_native, &v18);
      uint64_t v8 = v18;
      swift_bridgeObjectRelease(0);
      uint64_t v9 = v23;
      uint64_t v10 = v22;
    }
    else
    {
      swift_bridgeObjectRetain(epi64);
      swift_bridgeObjectRetain(v23);
      swift_bridgeObjectRetain(v3);
      uint64_t v10 = v22;
      swift_bridgeObjectRetain(v22);
      uint64_t v8 = MLStyleTransfer.ModelParameters.modelParametersDescription()();
      swift_bridgeObjectRelease(0);
      uint64_t v9 = v23;
    }
    v2->i64[0] = v21;
    v2->i64[1] = v3;
    v2[1].i64[0] = v20;
    v2[1].i64[1] = v10;
    v2[2] = v17;
    uint64_t result = v19;
    v2[3].i64[0] = v19;
    v2[3].i64[1] = v9;
  }
  else
  {
    uint64_t v11 = NSFullUserName();
    char v12 = v11;
    uint64_t v13 = static String._unconditionallyBridgeFromObjectiveC(_:)(v12);
    uint64_t v15 = v14;

    v2->i64[0] = v13;
    v2->i64[1] = v15;
    v2[1].i64[0] = 0xD000000000000033;
    v2[1].i64[1] = (uint64_t)("RandomForestRegressor" + 0x8000000000000000);
    v2[2] = 0;
    v2[3].i64[0] = 49;
    v2[3].i64[1] = 0xE100000000000000;
    type metadata accessor for MLStyleTransfer(0);
    uint64_t result = MLStyleTransfer.ModelParameters.modelParametersDescription()();
    uint64_t v8 = result;
  }
  v2[4].i64[0] = v8;
  return result;
}

uint64_t MLStyleTransfer.ModelParameters.modelParametersDescription()()
{
  uint64_t v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, String)>);
  uint64_t inited = swift_initStackObject(v1, v9);
  *(void *)(inited + 16) = 3;
  *(void *)(inited + 24) = 6;
  *(void *)(inited + 32) = 0x687469726F676C41;
  *(void *)(inited + 40) = 0xE90000000000006DLL;
  uint64_t v3 = *v0;
  uint64_t v4 = 7237219;
  if (*v0) {
    uint64_t v4 = 0x6574694C6E6E63;
  }
  *(void *)(inited + 48) = v4;
  *(void *)(inited + 56) = (v3 << 58) | 0xE300000000000000;
  strcpy((char *)(inited + 64), "Textel Density");
  *(unsigned char *)(inited + 79) = -18;
  uint64_t v5 = type metadata accessor for MLStyleTransfer.ModelParameters(0);
  uint64_t v10 = *(void *)&v0[*(int *)(v5 + 32)];
  *(void *)(inited + 80) = dispatch thunk of CustomStringConvertible.description.getter(&type metadata for Int, &protocol witness table for Int);
  *(void *)(inited + 88) = v6;
  strcpy((char *)(inited + 96), "Style Strength");
  *(unsigned char *)(inited + 111) = -18;
  uint64_t v10 = *(void *)&v0[*(int *)(v5 + 36)];
  *(void *)(inited + 112) = dispatch thunk of CustomStringConvertible.description.getter(&type metadata for Int, &protocol witness table for Int);
  *(void *)(inited + 120) = v7;
  return Dictionary.init(dictionaryLiteral:)(inited, &type metadata for String, &type metadata for String, &protocol witness table for String);
}

uint64_t MLStyleTransfer.write(to:metadata:)(uint64_t a1, uint64_t a2)
{
  uint64_t v15 = a1;
  uint64_t v3 = *(void *)(a2 + 64);
  uint64_t v16 = *v2;
  __m128i v10 = *(__m128i *)a2;
  long long v11 = *(_OWORD *)(a2 + 16);
  long long v12 = *(_OWORD *)(a2 + 32);
  long long v13 = *(_OWORD *)(a2 + 48);
  uint64_t v14 = v3;
  MLStyleTransfer.getFullMetadata(_:)(&v10);
  uint64_t v18 = v5.i64[1];
  uint64_t v19 = *((void *)&v6 + 1);
  __m128i v10 = v5;
  long long v11 = v6;
  uint64_t v17 = *((void *)&v7 + 1);
  long long v12 = v7;
  long long v13 = v8;
  uint64_t v14 = v9;
  _Model.write(to:metadata:)(v15, v10.i64);
  swift_bridgeObjectRelease(BYTE8(v8));
  swift_bridgeObjectRelease(v19);
  swift_bridgeObjectRelease(v18);
  swift_bridgeObjectRelease(v17);
  return swift_bridgeObjectRelease(v9);
}

uint64_t MLStyleTransfer.write(toFile:metadata:)(uint64_t a1, void *a2, uint64_t a3)
{
  uint64_t v17 = a2;
  uint64_t v19 = a1;
  uint64_t v4 = *(void *)(a3 + 64);
  uint64_t v18 = *v3;
  __m128i v12 = *(__m128i *)a3;
  long long v13 = *(_OWORD *)(a3 + 16);
  long long v14 = *(_OWORD *)(a3 + 32);
  long long v15 = *(_OWORD *)(a3 + 48);
  uint64_t v16 = v4;
  MLStyleTransfer.getFullMetadata(_:)(&v12);
  uint64_t v21 = v7.i64[1];
  uint64_t v22 = *((void *)&v8 + 1);
  __m128i v12 = v7;
  long long v13 = v8;
  uint64_t v20 = *((void *)&v9 + 1);
  long long v14 = v9;
  long long v15 = v10;
  uint64_t v16 = v11;
  v5._uint64_t countAndFlagsBits = v19;
  v5._char object = v17;
  _Model.write(toFile:metadata:)(v5, (long long *)v12.i8);
  swift_bridgeObjectRelease(BYTE8(v10));
  swift_bridgeObjectRelease(v22);
  swift_bridgeObjectRelease(v21);
  swift_bridgeObjectRelease(v20);
  return swift_bridgeObjectRelease(v11);
}

uint64_t *static MLStyleTransfer.downloadAssets()()
{
  uint64_t v1 = type metadata accessor for _Model();
  swift_allocObject(v1, 48, 7);
  uint64_t result = _Model.init(type:)(14);
  if (!v0)
  {
    swift_retain();
    CMLModel.requestStyleTransferAssets()();
    swift_release();
    return (uint64_t *)swift_release();
  }
  return result;
}

Swift::Void __swiftcall __spoils<cf,zf,sf,of,pf,rax,rdx,rcx,rdi,rsi,r8,r9,r10,r11,r12,xmm0,xmm1,xmm2,xmm3,xmm4,xmm5,xmm6,xmm7> CMLModel.requestStyleTransferAssets()()
{
  uint64_t empty = tc_v1_parameters_create_empty(0);
  if (!empty) {
    BUG();
  }
  uint64_t v2 = empty;
  uint64_t v3 = type metadata accessor for CMLParameters();
  uint64_t inited = swift_initStackObject(v3, v5);
  *(void *)(inited + 16) = v2;
  CMLModel.callFunction(name:arguments:)(20, inited);
  if (!v0) {
    swift_release();
  }
  swift_setDeallocating(inited);
  tc_v1_release(v2);
}

void MLStyleTransfer.DataSource.processImages(textelDensity:styleImageDestination:contentImagesDestination:)(uint64_t a1, uint64_t a2, uint64_t a3, void *a4, void *a5)
{
  uint64_t v125 = v5;
  double v110 = v6;
  id v116 = a5;
  imagesDictionary._char rawValue = a4;
  uint64_t v115 = a2;
  uint64_t v98 = a1;
  uint64_t v96 = type metadata accessor for UUID(0);
  uint64_t v97 = *(void *)(v96 - 8);
  int64_t v8 = *(void *)(v97 + 64);
  long long v9 = alloca(v8);
  long long v10 = alloca(v8);
  unsigned int v101 = &v96;
  int64_t v11 = *(void *)(*(void *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for URL?)
                              - 8)
                  + 64);
  __m128i v12 = alloca(v11);
  long long v13 = alloca(v11);
  uint64_t v106 = &v96;
  uint64_t v112 = type metadata accessor for UTType(0);
  uint64_t v14 = *(void *)(v112 - 8);
  int64_t v15 = *(void *)(v14 + 64);
  uint64_t v16 = alloca(v15);
  uint64_t v17 = alloca(v15);
  uint64_t v107 = &v96;
  uint64_t v120 = type metadata accessor for URL(0);
  uint64_t v123 = *(void *)(v120 - 8);
  int64_t v18 = *(void *)(v123 + 64);
  uint64_t v19 = alloca(v18);
  uint64_t v20 = alloca(v18);
  uint64_t v111 = &v96;
  uint64_t v21 = alloca(v18);
  uint64_t v22 = alloca(v18);
  unint64_t v100 = &v96;
  uint64_t v23 = alloca(v18);
  uint64_t v24 = alloca(v18);
  unint64_t v105 = &v96;
  uint64_t v25 = alloca(v18);
  uint64_t v26 = alloca(v18);
  uint64_t v99 = &v96;
  uint64_t v27 = alloca(v18);
  uint64_t v28 = alloca(v18);
  double v121 = &v96;
  uint64_t v29 = alloca(v18);
  id v30 = alloca(v18);
  uint64_t v124 = &v96;
  id v31 = alloca(v18);
  id v32 = alloca(v18);
  double v119 = &v96;
  int64_t v33 = *(void *)(*(void *)(type metadata accessor for MLStyleTransfer.DataSource(0) - 8) + 64);
  uint64_t v34 = alloca(v33);
  uint64_t v35 = alloca(v33);
  uint64_t v36 = v125;
  static MLStyleTransfer.ModelParameters.verifyTextelDensityParameter(value:)(a3);
  if (!v36)
  {
    uint64_t v118 = v14;
    uint64_t v108 = a3 / 4;
    uint64_t v125 = 0;
    outlined init with copy of MLTrainingSessionParameters((uint64_t)v110, (uint64_t)&v96, type metadata accessor for MLStyleTransfer.DataSource);
    uint64_t v37 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (styleImage: URL, contentDirectory: URL, processingOption: VNImageCropAndScaleOption?));
    uint64_t v38 = (char *)&v96 + *(int *)(v37 + 48);
    uint64_t v39 = *(int *)(v37 + 64);
    double v110 = *(CGImageSource **)((char *)&v96 + v39);
    LOBYTE(v117) = *((unsigned char *)&v96 + v39 + 8);
    uint64_t v40 = (uint64_t)v119;
    unint64_t v41 = *(void (**)(uint64_t *, uint64_t *, uint64_t))(v123 + 32);
    uint64_t v42 = v120;
    v41(v119, &v96, v120);
    v41(v124, (uint64_t *)v38, v42);
    uint64_t v43 = type metadata accessor for OS_os_log(0, &lazy cache variable for type metadata for CIImage, CIImage_ptr);
    uint64_t v44 = lazy protocol witness table accessor for type VNImageOption and conformance VNImageOption(&lazy protocol witness table cache variable for type URL and conformance URL, (uint64_t (*)(uint64_t))&type metadata accessor for URL, (uint64_t)&protocol conformance descriptor for URL);
    uint64_t v45 = Dictionary.init(dictionaryLiteral:)(_swiftEmptyArrayStorage, v42, v43, v44);
    uint64_t v46 = v125;
    MLStyleTransfer.DataSource.getProcessedStyleImageURL(for:destination:)(v40, (uint64_t)imagesDictionary._rawValue);
    if (v46)
    {
      swift_bridgeObjectRelease(v45);
      uint64_t v47 = *(void (**)(uint64_t *, uint64_t))(v123 + 8);
      v47(v124, v42);
      v47(v119, v42);
      return;
    }
    uint64_t v102 = (void (*)(uint64_t, uint64_t *, uint64_t))v41;
    uint64_t v48 = 4 * v108;
    int v49 = v117;
    uint64_t v50 = MLStyleTransfer.DataSource.processImage(sourceURL:textelDensity:processingOption:)((uint64_t)v119, 4 * v108, v110, v117);
    uint64_t v125 = 0;
    int v104 = v49;
    uint64_t v108 = v48;
    uint64_t v51 = v50;
    uint64_t v52 = (uint64_t)v99;
    uint64_t v117 = *(void (**)(uint64_t *, uint64_t *, uint64_t))(v123 + 16);
    v117(v99, v121, v120);
    uint64_t v53 = v51;
    unsigned __int8 isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v45);
    uint64_t v109 = (void *)v45;
    specialized _NativeDictionary.setValue(_:forKey:isUnique:)((uint64_t)v53, v52, isUniquelyReferenced_nonNull_native);
    imagesDictionary._char rawValue = v109;
    uint64_t v55 = v52;
    uint64_t v56 = v120;
    swift_bridgeObjectRelease(0);
    id v57 = *(void (**)(uint64_t, uint64_t))(v123 + 8);
    v57(v55, v56);
    uint64_t v58 = v125;
    MLStyleTransfer.DataSource.getProcessedContentImagesDirectory(for:)((uint64_t)v116);
    if (v58)
    {

      v57((uint64_t)v121, v56);
      swift_bridgeObjectRelease(imagesDictionary._rawValue);
LABEL_6:
      v57((uint64_t)v124, v56);
      v57((uint64_t)v119, v56);
      return;
    }
    id v114 = v53;
    uint64_t v59 = (uint64_t)v107;
    static UTType.image.getter();
    uint64_t v60 = static _FileUtilities.readableFiles(at:type:)((uint64_t)v124, v59);
    uint64_t v125 = 0;
    (*(void (**)(uint64_t, uint64_t))(v118 + 8))(v59, v112);
    uint64_t v61 = v60[2];
    double v103 = v60;
    if (!v61)
    {
      uint64_t v64 = (uint64_t)v106;
LABEL_22:
      __swift_storeEnumTagSinglePayload(v64, 1, 1, v56);
LABEL_24:
      swift_bridgeObjectRelease((_BYTE)v103);
      char rawValue = (char)imagesDictionary._rawValue;
      MLStyleTransfer.DataSource.saveImagesToDisk(imagesDictionary:)(imagesDictionary);
      if (!v94)
      {

        swift_bridgeObjectRelease(rawValue);
        v57((uint64_t)v124, v56);
        v57((uint64_t)v119, v56);
        v102(v98, v121, v56);
        return;
      }

      swift_bridgeObjectRelease(rawValue);
      v57(v115, v56);
      v57((uint64_t)v121, v56);
      goto LABEL_6;
    }
    uint64_t v62 = (uint64_t *)((char *)v60 + ((*(unsigned __int8 *)(v123 + 80) + 32) & ~*(unsigned __int8 *)(v123 + 80)));
    uint64_t v118 = *(void *)(v123 + 72);
    uint64_t v63 = v101;
    uint64_t v64 = (uint64_t)v106;
    uint64_t v113 = v57;
    while (1)
    {
      uint64_t v112 = (uint64_t)v61;
      uint64_t v107 = v62;
      v117((uint64_t *)v64, v62, v56);
      __swift_storeEnumTagSinglePayload(v64, 0, 1, v56);
      if (__swift_getEnumTagSinglePayload(v64, 1, v56) == 1)
      {
        id v57 = v113;
        goto LABEL_24;
      }
      v102((uint64_t)v105, (uint64_t *)v64, v56);
      UUID.init()();
      uint64_t v65 = v63;
      uint64_t v66 = UUID.uuidString.getter();
      uint64_t v68 = v67;
      (*(void (**)(uint64_t *, uint64_t))(v97 + 8))(v65, v96);
      uint64_t v69 = v99;
      URL.appendingPathComponent(_:)(v66, v68);
      uint64_t v70 = v120;
      swift_bridgeObjectRelease(v68);
      uint64_t v71 = v100;
      URL.appendingPathExtension(_:)(6778480, 0xE300000000000000);
      uint64_t v72 = (uint64_t)v105;
      uint64_t v73 = v69;
      uint64_t v74 = v70;
      v113((uint64_t)v73, v70);
      uint64_t v75 = v125;
      uint64_t v76 = MLStyleTransfer.DataSource.processImage(sourceURL:textelDensity:processingOption:)(v72, v108, v110, v104);
      uint64_t v125 = v75;
      if (v75) {
        break;
      }
      uint64_t v77 = v76;
      unint64_t v78 = v71;
      uint64_t v79 = (uint64_t)v111;
      v117(v111, v78, v74);
      id v116 = v77;
      uint64_t v80 = imagesDictionary._rawValue;
      char v81 = swift_isUniquelyReferenced_nonNull_native(imagesDictionary._rawValue);
      uint64_t v109 = v80;
      unint64_t v82 = specialized __RawDictionaryStorage.find<A>(_:)(v79);
      LOBYTE(v123) = v83;
      BOOL v84 = (v83 & 1) == 0;
      BOOL v85 = __OFADD__(v80[2], v84);
      Swift::Int v86 = v80[2] + v84;
      if (v85) {
        BUG();
      }
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _NativeDictionary<URL, CIImage>);
      if (_NativeDictionary.ensureUnique(isUnique:capacity:)(v81, v86))
      {
        unint64_t v82 = specialized __RawDictionaryStorage.find<A>(_:)((uint64_t)v111);
        if ((v123 & 1) != (v87 & 1))
        {
          KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(v120);
          BUG();
        }
      }
      uint64_t v88 = v109;
      imagesDictionary._char rawValue = v109;
      if (v123)
      {
        uint64_t v89 = v109[7];

        id v90 = v116;
        *(void *)(v89 + 8 * v82) = v116;
      }
      else
      {
        v109[(v82 >> 6) + 8] |= 1 << v82;
        v117((uint64_t *)(v88[6] + v118 * v82), v111, v120);
        *(void *)(v88[7] + 8 * v82) = v116;
        uint64_t v91 = v88[2];
        BOOL v85 = __OFADD__(1, v91);
        uint64_t v92 = v91 + 1;
        if (v85) {
          BUG();
        }
        v88[2] = v92;
        id v90 = v116;
      }
      swift_bridgeObjectRelease(0);
      uint64_t v56 = v120;
      id v57 = v113;
      v113((uint64_t)v111, v120);

      v57((uint64_t)v100, v56);
      v57((uint64_t)v105, v56);
      uint64_t v62 = (uint64_t *)((char *)v107 + v118);
      uint64_t v61 = (void (__cdecl *)(id))(v112 - 1);
      uint64_t v64 = (uint64_t)v106;
      uint64_t v63 = v101;
      if (v112 == 1) {
        goto LABEL_22;
      }
    }

    uint64_t v95 = v113;
    v113((uint64_t)v71, v70);
    v95(v72, v70);
    swift_bridgeObjectRelease((_BYTE)v103);
    v95(v115, v70);
    v95((uint64_t)v121, v70);
    swift_bridgeObjectRelease(imagesDictionary._rawValue);
    v95((uint64_t)v124, v70);
    v95((uint64_t)v119, v70);
  }
}

void static MLStyleTransfer.ModelParameters.verifyTextelDensityParameter(value:)(uint64_t a1)
{
  if ((unint64_t)(a1 - 64) > 0x3C0)
  {
    _StringGuts.grow(_:)(38);
    swift_bridgeObjectRelease(0);
    *(void *)&long long v10 = 0xD00000000000001ELL;
    *((void *)&v10 + 1) = "Style image not readable." + 0x8000000000000000;
    v1._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter(&type metadata for Int, &protocol witness table for Int);
    char object = (char)v1._object;
    String.append(_:)(v1);
    swift_bridgeObjectRelease(object);
    v3._uint64_t countAndFlagsBits = 8236;
    v3._char object = (void *)0xE200000000000000;
    String.append(_:)(v3);
    v4._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter(&type metadata for Int, &protocol witness table for Int);
    char v5 = (char)v4._object;
    String.append(_:)(v4);
    swift_bridgeObjectRelease(v5);
    v3._uint64_t countAndFlagsBits = 11869;
    v3._char object = (void *)0xE200000000000000;
    String.append(_:)(v3);
    v3._char object = (void *)lazy protocol witness table accessor for type MLCreateError and conformance MLCreateError();
    swift_allocError(&type metadata for MLCreateError, v3._object, 0, 0);
    *(_OWORD *)uint64_t v6 = v10;
    *(_OWORD *)(v6 + 16) = 0;
    *(_OWORD *)(v6 + 32) = 0;
    *(unsigned char *)(v6 + 48) = 0;
    swift_willThrow(&type metadata for MLCreateError, v3._object, v6, v7, v8, v9);
  }
}

uint64_t MLStyleTransfer.DataSource.getProcessedStyleImageURL(for:destination:)(uint64_t a1, uint64_t a2)
{
  uint64_t v47 = v3;
  uint64_t v41 = a2;
  uint64_t v48 = v2;
  uint64_t v45 = type metadata accessor for UUID(0);
  uint64_t v44 = *(void *)(v45 - 8);
  int64_t v4 = *(void *)(v44 + 64);
  char v5 = alloca(v4);
  uint64_t v6 = alloca(v4);
  uint64_t v46 = &v40;
  uint64_t v50 = type metadata accessor for URL(0);
  uint64_t v49 = *(void *)(v50 - 8);
  int64_t v7 = *(void *)(v49 + 64);
  uint64_t v8 = alloca(v7);
  uint64_t v9 = alloca(v7);
  uint64_t v43 = &v40;
  long long v10 = alloca(v7);
  int64_t v11 = alloca(v7);
  uint64_t v51 = &v40;
  int64_t v12 = *(void *)(*(void *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for URL?)
                              - 8)
                  + 64);
  long long v13 = alloca(v12);
  uint64_t v14 = alloca(v12);
  uint64_t v42 = &v40;
  uint64_t v15 = type metadata accessor for UTType(0);
  uint64_t v16 = *(void *)(v15 - 8);
  int64_t v17 = *(void *)(v16 + 64);
  int64_t v18 = alloca(v17);
  uint64_t v19 = alloca(v17);
  static UTType.image.getter();
  BOOL v20 = static _FileUtilities.isReadableFile(at:of:)(a1, (uint64_t)&v40);
  (*(void (**)(uint64_t *, uint64_t))(v16 + 8))(&v40, v15);
  if (v20)
  {
    uint64_t v21 = (uint64_t)v42;
    outlined init with copy of Either<LogisticRegressionClassifier<Float, String>, FullyConnectedNetworkClassifier<Float, String>>(v41, (uint64_t)v42, &demangling cache variable for type metadata for URL?);
    if (__swift_getEnumTagSinglePayload(v21, 1, v50) == 1)
    {
      outlined destroy of Either<LogisticRegressionClassifier<Float, String>, FullyConnectedNetworkClassifier<Float, String>>(v21, &demangling cache variable for type metadata for URL?);
      uint64_t v22 = NSTemporaryDirectory();
      uint64_t v23 = v22;
      uint64_t v24 = static String._unconditionallyBridgeFromObjectiveC(_:)(v23);
      uint64_t v26 = v25;

      URL.init(fileURLWithPath:isDirectory:)(v24, v26, 1);
      swift_bridgeObjectRelease(v26);
      uint64_t v27 = v46;
      UUID.init()();
      uint64_t v28 = UUID.uuidString.getter();
      uint64_t v30 = v29;
      (*(void (**)(uint64_t *, uint64_t))(v44 + 8))(v27, v45);
      id v31 = v43;
      URL.appendingPathComponent(_:)(v28, v30);
      swift_bridgeObjectRelease(v30);
      URL.appendingPathExtension(_:)(6778480, 0xE300000000000000);
      id v32 = *(void (**)(uint64_t *, uint64_t))(v49 + 8);
      uint64_t v33 = v50;
      v32(v31, v50);
      return ((uint64_t (*)(uint64_t *, uint64_t))v32)(v51, v33);
    }
    else
    {
      return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v49 + 32))(v48, v21, v50);
    }
  }
  else
  {
    uint64_t v35 = lazy protocol witness table accessor for type MLCreateError and conformance MLCreateError();
    swift_allocError(&type metadata for MLCreateError, v35, 0, 0);
    *(void *)uint64_t v36 = 0xD000000000000019;
    *(void *)(v36 + 8) = "Scale Fill Rotate 90CCW" + 0x8000000000000000;
    *(_OWORD *)(v36 + 16) = 0;
    *(_OWORD *)(v36 + 32) = 0;
    *(unsigned char *)(v36 + 48) = 0;
    return swift_willThrow(&type metadata for MLCreateError, v35, v36, v37, v38, v39);
  }
}

CGImageSource *MLStyleTransfer.DataSource.processImage(sourceURL:textelDensity:processingOption:)(uint64_t a1, uint64_t a2, CGImageSource *a3, int a4)
{
  id v53 = v4;
  int v52 = a4;
  uint64_t v50 = a3;
  uint64_t v54 = a2;
  uint64_t v5 = type metadata accessor for URL(0);
  uint64_t v6 = *(void *)(v5 - 8);
  int64_t v7 = *(void *)(v6 + 64);
  uint64_t v8 = alloca(v7);
  uint64_t v9 = alloca(v7);
  uint64_t v49 = v48;
  id v55 = (id)type metadata accessor for OS_os_log(0, &lazy cache variable for type metadata for MLFeatureValue, MLFeatureValue_ptr);
  v51[1] = a1;
  (*(void (**)(unsigned char *, uint64_t, uint64_t))(v6 + 16))(v48, a1, v5);
  uint64_t v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(MLFeatureValueImageOption, Any)>);
  uint64_t inited = (void *)swift_initStackObject(v10, v48);
  inited[2] = 1;
  inited[3] = 2;
  inited[4] = MLFeatureValueImageOptionCropAndScale;
  inited[8] = &type metadata for UInt;
  inited[5] = 0;
  uint64_t v12 = type metadata accessor for MLFeatureValueImageOption(0);
  long long v13 = (CGImageSource *)lazy protocol witness table accessor for type VNImageOption and conformance VNImageOption(&lazy protocol witness table cache variable for type MLFeatureValueImageOption and conformance MLFeatureValueImageOption, type metadata accessor for MLFeatureValueImageOption, (uint64_t)&protocol conformance descriptor for MLFeatureValueImageOption);
  MLFeatureValueImageOptionCropAndScale;
  uint64_t v14 = Dictionary.init(dictionaryLiteral:)(inited, v12, (char *)&type metadata for Any + 8, v13);
  id v15 = v53;
  id v53 = @nonobjc MLFeatureValue.__allocating_init(imageAt:pixelsWide:pixelsHigh:pixelFormatType:options:)((uint64_t)v49, v54, v54, 0x52474241u, v14);
  if (!v15)
  {
    char v16 = v52;
    long long v13 = v50;
    if (AnalyticsReporter.init()()) {
      goto LABEL_19;
    }
    uint64_t v54 = 0;
    if (v16)
    {
      uint64_t v19 = "Unable to process image." + 0x8000000000000000;
      uint64_t v17 = 0xD000000000000020;
    }
    else
    {
      uint64_t v17 = VNImageCropAndScaleOption.description.getter((uint64_t)v13);
      uint64_t v19 = v18;
    }
    AnalyticsReporter.reportParameterSettings(model:parameterName:parameterValue:)(CreateML_ModelType_styleTransfer, (Swift::String)__PAIR128__((unint64_t)("rocessing Option" + 0x8000000000000000), 0xD000000000000014), (Swift::String)__PAIR128__((unint64_t)v19, v17));
    BOOL v20 = (NSURL *)swift_bridgeObjectRelease((_BYTE)v19);
    URL._bridgeToObjectiveC()(v20);
    CFURLRef v22 = v21;
    CFDictionaryRef isa = Dictionary._bridgeToObjectiveC()().super.isa;
    CFURLRef v24 = v22;
    long long v13 = CGImageSourceCreateWithURL(v22, isa);

    if (!v13) {
      goto LABEL_19;
    }
    CFDictionaryRef v25 = Dictionary._bridgeToObjectiveC()().super.isa;
    uint64_t v26 = v13;
    long long v13 = CGImageSourceCopyPropertiesAtIndex(v13, 0, v25);

    if (v13)
    {
      id v55 = v26;
      v51[0] = 0;
      static Dictionary._conditionallyBridgeFromObjectiveC(_:result:)(v13, v51, &type metadata for String, (char *)&type metadata for Swift.AnyObject + 8, &protocol witness table for String);

      long long v13 = (CGImageSource *)v51[0];
      if (v51[0])
      {
        uint64_t v27 = static String._unconditionallyBridgeFromObjectiveC(_:)(kCGImagePropertyPixelHeight);
        char v29 = v28;
        uint64_t v30 = specialized Dictionary.subscript.getter(v27, v28, (uint64_t)v13);
        swift_bridgeObjectRelease(v29);
        if (v30)
        {
          v51[0] = v30;
          if (swift_dynamicCast(quantity, v51, (char *)&type metadata for Swift.AnyObject + 8, &type metadata for Float, 6))AnalyticsReporter.reportDataMetrics(model:metricName:quantity:)(CreateML_ModelType_styleTransfer, (Swift::String)__PAIR128__((unint64_t)("Style Image Width" + 0x8000000000000000), 0xD000000000000012), quantity[0]); {
        }
          }
        uint64_t v31 = static String._unconditionallyBridgeFromObjectiveC(_:)(kCGImagePropertyPixelWidth);
        char v33 = v32;
        uint64_t v34 = specialized Dictionary.subscript.getter(v31, v32, (uint64_t)v13);
        swift_bridgeObjectRelease(v33);
        swift_bridgeObjectRelease((_BYTE)v13);
        if (!v34)
        {

LABEL_19:
          id v38 = [v53 imageBufferValue];
          id v39 = v38;
          if (v39)
          {
            uint64_t v40 = v39;
            id v41 = objc_allocWithZone((Class)CIImage);
            long long v13 = (CGImageSource *)[v41 initWithCVPixelBuffer:v40];
          }
          else
          {
            uint64_t v43 = lazy protocol witness table accessor for type MLCreateError and conformance MLCreateError();
            swift_allocError(&type metadata for MLCreateError, v43, 0, 0);
            *(void *)uint64_t v44 = 0xD000000000000018;
            *(void *)(v44 + 8) = " to be a directory URL." + 0x8000000000000000;
            *(_OWORD *)(v44 + 16) = 0;
            *(_OWORD *)(v44 + 32) = 0;
            *(unsigned char *)(v44 + 48) = 0;
            swift_willThrow(&type metadata for MLCreateError, v43, v44, v45, v46, v47);
          }
          return v13;
        }
        v51[0] = v34;
        char v35 = swift_dynamicCast(quantity, v51, (char *)&type metadata for Swift.AnyObject + 8, &type metadata for Float, 6);
        id v36 = v55;
        if (v35) {
          AnalyticsReporter.reportDataMetrics(model:metricName:quantity:)(CreateML_ModelType_styleTransfer, (Swift::String)__PAIR128__((unint64_t)("Preprocessing Option" + 0x8000000000000000), 0xD000000000000011), quantity[0]);
        }
        id v37 = v36;
      }
      else
      {
        id v37 = v55;
      }
    }
    else
    {
      id v37 = v26;
    }

    goto LABEL_19;
  }
  return v13;
}

NSURL *MLStyleTransfer.DataSource.getProcessedContentImagesDirectory(for:)(uint64_t a1)
{
  uint64_t v53 = v2;
  uint64_t v54 = v1;
  uint64_t v51 = type metadata accessor for UUID(0);
  uint64_t v50 = *(void *)(v51 - 8);
  int64_t v3 = *(void *)(v50 + 64);
  int64_t v4 = alloca(v3);
  uint64_t v5 = alloca(v3);
  int v52 = &v49;
  int64_t v6 = *(void *)(*(void *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for URL?)
                             - 8)
                 + 64);
  int64_t v7 = alloca(v6);
  uint64_t v8 = alloca(v6);
  uint64_t v9 = type metadata accessor for URL(0);
  uint64_t v58 = *(void **)(v9 - 8);
  int64_t v10 = v58[8];
  int64_t v11 = alloca(v10);
  uint64_t v12 = alloca(v10);
  uint64_t v56 = &v49;
  long long v13 = alloca(v10);
  uint64_t v14 = alloca(v10);
  id v57 = &v49;
  id v15 = alloca(v10);
  char v16 = alloca(v10);
  outlined init with copy of Either<LogisticRegressionClassifier<Float, String>, FullyConnectedNetworkClassifier<Float, String>>(a1, (uint64_t)&v49, &demangling cache variable for type metadata for URL?);
  if (__swift_getEnumTagSinglePayload((uint64_t)&v49, 1, v9) == 1)
  {
    uint64_t v55 = v9;
    outlined destroy of Either<LogisticRegressionClassifier<Float, String>, FullyConnectedNetworkClassifier<Float, String>>((uint64_t)&v49, &demangling cache variable for type metadata for URL?);
    uint64_t v17 = NSTemporaryDirectory();
    int64_t v18 = v17;
    uint64_t v19 = static String._unconditionallyBridgeFromObjectiveC(_:)(v18);
    uint64_t v21 = v20;

    URL.init(fileURLWithPath:isDirectory:)(v19, v21, 1);
    swift_bridgeObjectRelease(v21);
    CFURLRef v22 = v52;
    UUID.init()();
    uint64_t v23 = UUID.uuidString.getter();
    uint64_t v25 = v24;
    (*(void (**)(uint64_t *, uint64_t))(v50 + 8))(v22, v51);
    URL.appendingPathComponent(_:)(v23, v25);
    swift_bridgeObjectRelease(v25);
    uint64_t v26 = objc_opt_self(NSFileManager);
    id v27 = [v26 defaultManager];
    uint64_t v28 = (NSURL *)v27;
    URL._bridgeToObjectiveC()(v28);
    uint64_t v30 = v29;
    id v59 = 0;
    LOBYTE(v22) = [(NSURL *)v28 createDirectoryAtURL:v29 withIntermediateDirectories:0 attributes:0 error:&v59];

    id v31 = v59;
    if ((_BYTE)v22)
    {
      uint64_t v32 = v58;
      char v33 = (void (*)(uint64_t *, uint64_t))v58[1];
      v59;
      uint64_t v34 = v55;
      v33(v57, v55);
      ((void (*)(uint64_t *, uint64_t *, uint64_t))v32[4])(v54, v56, v34);
    }
    else
    {
      id v41 = v59;
      _convertNSErrorToError(_:)(v31);

      swift_willThrow(v41, "createDirectoryAtURL:withIntermediateDirectories:attributes:error:", v42, v43, v44, v45);
      uint64_t v46 = (void (*)(uint64_t *, uint64_t))v58[1];
      uint64_t v47 = v55;
      v46(v56, v55);
      v46(v57, v47);
    }
  }
  else
  {
    char v35 = (void (*)(uint64_t *, uint64_t *, uint64_t))v58[4];
    v35(&v49, &v49, v9);
    if (URL.hasDirectoryPath.getter())
    {
      v35(v54, &v49, v9);
    }
    else
    {
      uint64_t v36 = lazy protocol witness table accessor for type MLCreateError and conformance MLCreateError();
      swift_allocError(&type metadata for MLCreateError, v36, 0, 0);
      *(void *)uint64_t v37 = 0xD000000000000037;
      *(void *)(v37 + 8) = "Style strength out of bounds [" + 0x8000000000000000;
      *(_OWORD *)(v37 + 16) = 0;
      *(_OWORD *)(v37 + 32) = 0;
      *(unsigned char *)(v37 + 48) = 0;
      swift_willThrow(&type metadata for MLCreateError, v36, v37, v38, v39, v40);
      ((void (*)(uint64_t *, uint64_t))v58[1])(&v49, v9);
    }
  }
  return __stack_chk_guard;
}

Swift::Void __swiftcall __spoils<cf,zf,sf,of,pf,rax,rdx,rcx,rdi,rsi,r8,r9,r10,r11,r12,xmm0,xmm1,xmm2,xmm3,xmm4,xmm5,xmm6,xmm7> MLStyleTransfer.DataSource.saveImagesToDisk(imagesDictionary:)(Swift::OpaquePointer imagesDictionary)
{
  uint64_t v64 = v1;
  int64_t v68 = 0;
  uint64_t v65 = type metadata accessor for URL(0);
  uint64_t v66 = *(void *)(v65 - 8);
  int64_t v2 = *(void *)(v66 + 64);
  int64_t v3 = alloca(v2);
  int64_t v4 = alloca(v2);
  int64_t v5 = *(void *)(*(void *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (key: URL, value: CIImage)?)
                             - 8)
                 + 64);
  int64_t v6 = alloca(v5);
  int64_t v7 = alloca(v5);
  uint64_t v60 = &v54;
  uint64_t v8 = alloca(v5);
  uint64_t v9 = alloca(v5);
  int64_t v10 = &v54;
  id v11 = objc_allocWithZone((Class)CIContext);
  id v12 = [v11 init];
  uint64_t v13 = 1 << *((unsigned char *)imagesDictionary._rawValue + 32);
  id v69 = v12;
  uint64_t v14 = ~(-1 << v13);
  if (v13 >= 64) {
    uint64_t v14 = -1;
  }
  unint64_t v15 = *((void *)imagesDictionary._rawValue + 8) & v14;
  unsigned int v61 = kCIFormatRGBA16;
  int64_t v70 = (unint64_t)(v13 + 63) >> 6;
  int64_t v57 = v70 - 1;
  char rawValue = imagesDictionary._rawValue;
  swift_bridgeObjectRetain(imagesDictionary._rawValue);
  uint64_t v56 = (char *)&type metadata for Any + 8;
  uint64_t v67 = &v54;
  id v59 = &v54;
  while (1)
  {
    if (v15)
    {
      _BitScanForward64(&v16, v15);
      uint64_t v63 = (v15 - 1) & v15;
      unint64_t v17 = v16 | (v68 << 6);
LABEL_6:
      int64_t v18 = rawValue;
      uint64_t v19 = (uint64_t)v60;
      (*(void (**)(uint64_t *, unint64_t, uint64_t))(v66 + 16))(v60, rawValue[6] + v17 * *(void *)(v66 + 72), v65);
      uint64_t v20 = v18[7];
      uint64_t v21 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (key: URL, value: CIImage));
      CFURLRef v22 = *(void **)(v20 + 8 * v17);
      *(void *)(v19 + *(int *)(v21 + 48)) = v22;
      __swift_storeEnumTagSinglePayload(v19, 0, 1, v21);
      v22;
      int64_t v10 = v59;
      goto LABEL_19;
    }
    int64_t v23 = v68;
    int64_t v24 = v68 + 1;
    if (__OFADD__(1, v68)) {
      BUG();
    }
    uint64_t v19 = (uint64_t)v60;
    if (v24 < v70)
    {
      unint64_t v25 = rawValue[v24 + 8];
      if (v25)
      {
        int64_t v23 = v68 + 1;
LABEL_11:
        _BitScanForward64(&v26, v25);
        uint64_t v63 = v25 & (v25 - 1);
        int64_t v68 = v23;
        unint64_t v17 = v26 + (v23 << 6);
        goto LABEL_6;
      }
      int64_t v23 = v68 + 2;
      if (v68 + 2 >= v70)
      {
        int64_t v23 = v68 + 1;
      }
      else
      {
        unint64_t v25 = rawValue[v24 + 9];
        if (v25) {
          goto LABEL_11;
        }
        if (v68 + 3 < v70)
        {
          unint64_t v25 = rawValue[v24 + 10];
          if (v25)
          {
            int64_t v23 = v68 + 3;
            goto LABEL_11;
          }
          int64_t v23 = v68 + 3;
          if (v68 + 4 < v70)
          {
            unint64_t v25 = rawValue[v24 + 11];
            int64_t v23 = v68 + 4;
            while (!v25)
            {
              if (__OFADD__(1, v23++)) {
                BUG();
              }
              if (v23 >= v70)
              {
                int64_t v23 = v57;
                goto LABEL_18;
              }
              unint64_t v25 = rawValue[v23 + 8];
            }
            goto LABEL_11;
          }
        }
      }
    }
LABEL_18:
    int64_t v68 = v23;
    uint64_t v27 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (key: URL, value: CIImage));
    __swift_storeEnumTagSinglePayload(v19, 1, 1, v27);
    uint64_t v63 = 0;
LABEL_19:
    outlined init with take of (key: URL, value: CIImage)?(v19, (uint64_t)v10);
    uint64_t v28 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (key: URL, value: CIImage));
    if (__swift_getEnumTagSinglePayload((uint64_t)v10, 1, v28) == 1)
    {

      goto LABEL_34;
    }
    char v29 = *(void **)((char *)v10 + *(int *)(v28 + 48));
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(v66 + 32))(v67, v10, v65);
    id v58 = v29;
    id v30 = [v29 colorSpace];
    id v31 = (NSURL *)v30;
    id v62 = v31;
    if (!v31)
    {
      uint64_t v42 = lazy protocol witness table accessor for type MLCreateError and conformance MLCreateError();
      uint64_t v43 = swift_allocError(&type metadata for MLCreateError, v42, 0, 0);
      *(void *)uint64_t v44 = 0xD00000000000001ELL;
      *(void *)(v44 + 8) = "alidation image." + 0x8000000000000000;
      *(_OWORD *)(v44 + 16) = 0;
      *(_OWORD *)(v44 + 32) = 0;
      *(unsigned char *)(v44 + 48) = 2;
      uint64_t v64 = v43;
      swift_willThrow(&type metadata for MLCreateError, v42, v44, v45, v46, v47);

      goto LABEL_33;
    }
    URL._bridgeToObjectiveC()(v31);
    id v55 = v32;
    uint64_t v33 = type metadata accessor for CIImageRepresentationOption(0);
    uint64_t v34 = lazy protocol witness table accessor for type VNImageOption and conformance VNImageOption(&lazy protocol witness table cache variable for type CIImageRepresentationOption and conformance CIImageRepresentationOption, type metadata accessor for CIImageRepresentationOption, (uint64_t)&protocol conformance descriptor for CIImageRepresentationOption);
    char v35 = Dictionary.init(dictionaryLiteral:)(_swiftEmptyArrayStorage, v33, v56, v34);
    Class isa = Dictionary._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease(v35);
    id v72 = 0;
    id v37 = v58;
    id v38 = v55;
    unsigned __int8 v39 = [v69 writePNGRepresentationOfImage:v58 toURL:v55 format:v61 colorSpace:v62 options:isa];

    id v40 = v72;
    if (!v39) {
      break;
    }
    v72;
    (*(void (**)(uint64_t *, uint64_t))(v66 + 8))(v67, v65);
    ((void (*)(id))objc_release)(v37);
    ((void (*)(id))objc_release)(v62);
    int64_t v10 = v59;
    unint64_t v15 = v63;
  }
  id v48 = v72;
  uint64_t v49 = _convertNSErrorToError(_:)(v40);

  uint64_t v64 = v49;
  swift_willThrow(v48, "writePNGRepresentationOfImage:toURL:format:colorSpace:options:error:", v50, v51, v52, v53);

LABEL_33:
  (*(void (**)(uint64_t *, uint64_t))(v66 + 8))(v67, v65);
LABEL_34:
  swift_release();
}

id @nonobjc MLFeatureValue.__allocating_init(imageAt:pixelsWide:pixelsHigh:pixelFormatType:options:)(uint64_t a1, uint64_t a2, uint64_t a3, unsigned int a4, uint64_t a5)
{
  URL._bridgeToObjectiveC()(__stack_chk_guard);
  id v20 = v6;
  if (a5)
  {
    type metadata accessor for MLFeatureValueImageOption(0);
    lazy protocol witness table accessor for type VNImageOption and conformance VNImageOption(&lazy protocol witness table cache variable for type MLFeatureValueImageOption and conformance MLFeatureValueImageOption, type metadata accessor for MLFeatureValueImageOption, (uint64_t)&protocol conformance descriptor for MLFeatureValueImageOption);
    v7.super.Class isa = Dictionary._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease(a5);
  }
  else
  {
    v7.super.Class isa = 0;
  }
  ObjCClassFromMetadata = (void *)swift_getObjCClassFromMetadata();
  id v9 = [ObjCClassFromMetadata featureValueWithImageAtURL:v20 pixelsWide:a2 pixelsHigh:a3 pixelFormatType:a4 options:v7.super.isa error:nil];
  id v10 = v9;

  if (v10)
  {
    uint64_t v11 = type metadata accessor for URL(0);
    id v12 = *(void (**)(uint64_t, uint64_t))(*(void *)(v11 - 8) + 8);
    0;
    v12(a1, v11);
  }
  else
  {
    id v13 = 0;
    _convertNSErrorToError(_:)(0);

    swift_willThrow(v13, "featureValueWithImageAtURL:pixelsWide:pixelsHigh:pixelFormatType:options:error:", v14, v15, v16, v17);
    uint64_t v18 = type metadata accessor for URL(0);
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v18 - 8) + 8))(a1, v18);
  }
  return v10;
}

uint64_t VNImageCropAndScaleOption.description.getter(uint64_t a1)
{
  switch(a1)
  {
    case 0:
      return 0x43207265746E6543;
    case 258:
      return 0xD000000000000017;
    case 2:
      return 0x694620656C616353;
    case 257:
      return 0xD000000000000016;
    case 1:
      return 0x694620656C616353;
  }
  return 0x6669636570736E55;
}

uint64_t MLStyleTransfer.DataSource.getStyleImageAndContentTable()(unsigned char *a1, void *a2)
{
  int64_t v24 = a2;
  unint64_t v25 = a1;
  uint64_t v22 = type metadata accessor for URL(0);
  uint64_t v4 = *(void *)(v22 - 8);
  int64_t v5 = *(void *)(v4 + 64);
  int64_t v6 = alloca(v5);
  NSDictionary v7 = alloca(v5);
  int64_t v23 = v21;
  uint64_t v8 = alloca(v5);
  id v9 = alloca(v5);
  int64_t v10 = *(void *)(*(void *)(type metadata accessor for MLStyleTransfer.DataSource(0) - 8) + 64);
  uint64_t v11 = alloca(v10);
  id v12 = alloca(v10);
  outlined init with copy of MLTrainingSessionParameters(v3, (uint64_t)v21, type metadata accessor for MLStyleTransfer.DataSource);
  id v13 = &v21[*(int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (styleImage: URL, contentDirectory: URL, processingOption: VNImageCropAndScaleOption?))
                    + 48)];
  uint64_t v29 = v4;
  uint64_t v14 = *(void (**)(unsigned char *, unsigned char *, uint64_t))(v4 + 32);
  uint64_t v28 = v21;
  uint64_t v15 = v22;
  v14(v21, v21, v22);
  uint64_t v16 = v13;
  uint64_t v17 = (uint64_t)v23;
  v14(v23, v16, v15);
  static MLStyleTransfer.generateTrainingTable(directoryURL:)(v17);
  if (v2)
  {
    uint64_t v18 = *(void (**)(uint64_t, uint64_t))(v29 + 8);
    v18(v17, v15);
    return ((uint64_t (*)(unsigned char *, uint64_t))v18)(v28, v15);
  }
  else
  {
    (*(void (**)(uint64_t, uint64_t))(v29 + 8))(v17, v15);
    uint64_t v20 = v26;
    LOBYTE(v29) = v27;
    v14(v25, v28, v15);
    uint64_t result = (uint64_t)v24;
    *int64_t v24 = v20;
    *(unsigned char *)(result + 8) = v29;
  }
  return result;
}

uint64_t static MLStyleTransfer.generateTrainingTable(directoryURL:)(uint64_t a1)
{
  uint64_t v18 = v2;
  uint64_t v17 = v1;
  uint64_t v3 = type metadata accessor for UTType(0);
  uint64_t v4 = *(void *)(v3 - 8);
  int64_t v5 = *(void *)(v4 + 64);
  int64_t v6 = alloca(v5);
  NSDictionary v7 = alloca(v5);
  static UTType.image.getter(0);
  uint64_t v8 = v18;
  id v9 = static _FileUtilities.readableFiles(at:type:)(a1, (uint64_t)&v17);
  if (v8) {
    return (*(uint64_t (**)(uint64_t *, uint64_t))(v4 + 8))(&v17, v3);
  }
  uint64_t v18 = (uint64_t)v9;
  (*(void (**)(uint64_t *, uint64_t))(v4 + 8))(&v17, v3);
  char v11 = v18;
  if (*(void *)(v18 + 16))
  {
    static MLStyleTransfer.generateTrainingTable(urls:)(v18);
    return swift_bridgeObjectRelease(v11);
  }
  else
  {
    swift_bridgeObjectRelease(v18);
    uint64_t v12 = lazy protocol witness table accessor for type MLCreateError and conformance MLCreateError();
    swift_allocError(&type metadata for MLCreateError, v12, 0, 0);
    *(void *)uint64_t v13 = 0xD00000000000003CLL;
    *(void *)(v13 + 8) = "training_content_loss" + 0x8000000000000000;
    *(_OWORD *)(v13 + 16) = 0;
    *(_OWORD *)(v13 + 32) = 0;
    *(unsigned char *)(v13 + 48) = 0;
    return swift_willThrow(&type metadata for MLCreateError, v12, v13, v14, v15, v16);
  }
}

unsigned char *MLStyleTransfer.ModelParameters.algorithm.getter()
{
  unsigned char *result = *v1;
  return result;
}

char MLStyleTransfer.ModelParameters.algorithm.setter(char *a1)
{
  char result = *a1;
  *uint64_t v1 = *a1;
  return result;
}

void (*MLStyleTransfer.ModelParameters.algorithm.modify())()
{
  return MLBoostedTreeRegressor.ModelParameters.maxDepth.modify;
}

uint64_t MLStyleTransfer.ModelParameters.validation.getter()
{
  uint64_t v2 = v0;
  uint64_t v3 = type metadata accessor for MLStyleTransfer.ModelParameters(0);
  return outlined init with copy of MLTrainingSessionParameters(v1 + *(int *)(v3 + 20), v2, type metadata accessor for MLStyleTransfer.ModelParameters.ValidationData);
}

uint64_t MLStyleTransfer.ModelParameters.validation.setter(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for MLStyleTransfer.ModelParameters(0);
  return outlined assign with take of MLStyleTransfer.ModelParameters.ValidationData(a1, v1 + *(int *)(v2 + 20));
}

void (*MLStyleTransfer.ModelParameters.validation.modify())()
{
  return MLBoostedTreeRegressor.ModelParameters.maxDepth.modify;
}

uint64_t MLStyleTransfer.ModelParameters.maxIterations.getter()
{
  return *(void *)(v0 + *(int *)(type metadata accessor for MLStyleTransfer.ModelParameters(0) + 28));
}

uint64_t MLStyleTransfer.ModelParameters.maxIterations.setter(uint64_t a1)
{
  uint64_t result = *(int *)(type metadata accessor for MLStyleTransfer.ModelParameters(0) + 28);
  *(void *)(v1 + result) = a1;
  return result;
}

void (*MLStyleTransfer.ModelParameters.maxIterations.modify())()
{
  return MLBoostedTreeRegressor.ModelParameters.maxDepth.modify;
}

uint64_t MLStyleTransfer.ModelParameters.textelDensity.getter()
{
  return *(void *)(v0 + *(int *)(type metadata accessor for MLStyleTransfer.ModelParameters(0) + 32));
}

uint64_t MLStyleTransfer.ModelParameters.textelDensity.setter(uint64_t a1)
{
  uint64_t result = *(int *)(type metadata accessor for MLStyleTransfer.ModelParameters(0) + 32);
  *(void *)(v1 + result) = a1;
  return result;
}

void (*MLStyleTransfer.ModelParameters.textelDensity.modify())()
{
  return MLBoostedTreeRegressor.ModelParameters.maxDepth.modify;
}

uint64_t MLStyleTransfer.ModelParameters.styleStrength.getter()
{
  return *(void *)(v0 + *(int *)(type metadata accessor for MLStyleTransfer.ModelParameters(0) + 36));
}

uint64_t MLStyleTransfer.ModelParameters.styleStrength.setter(uint64_t a1)
{
  uint64_t result = *(int *)(type metadata accessor for MLStyleTransfer.ModelParameters(0) + 36);
  *(void *)(v1 + result) = a1;
  return result;
}

void (*MLStyleTransfer.ModelParameters.styleStrength.modify())()
{
  return MLBoostedTreeRegressor.ModelParameters.maxDepth.modify;
}

uint64_t MLStyleTransfer.ModelParameters.ValidationData.preprocessValidationData(to:)(uint64_t a1)
{
  uint64_t v66 = v1;
  uint64_t v58 = a1;
  uint64_t v60 = type metadata accessor for UUID(0);
  uint64_t v59 = *(void *)(v60 - 8);
  int64_t v3 = *(void *)(v59 + 64);
  uint64_t v4 = alloca(v3);
  int64_t v5 = alloca(v3);
  unsigned int v61 = &v55;
  int64_t v6 = *(void *)(*(void *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for URL?)
                             - 8)
                 + 64);
  NSDictionary v7 = alloca(v6);
  uint64_t v8 = alloca(v6);
  uint64_t v63 = &v55;
  uint64_t v56 = type metadata accessor for UTType(0);
  uint64_t v55 = *(void *)(v56 - 8);
  int64_t v9 = *(void *)(v55 + 64);
  int64_t v10 = alloca(v9);
  char v11 = alloca(v9);
  int64_t v57 = &v55;
  int64_t v12 = *(void *)(*(void *)(type metadata accessor for MLStyleTransfer.ModelParameters.ValidationData(0) - 8)
                  + 64);
  uint64_t v13 = alloca(v12);
  uint64_t v14 = alloca(v12);
  uint64_t v15 = type metadata accessor for URL(0);
  id v69 = *(void **)(v15 - 8);
  int64_t v16 = v69[8];
  uint64_t v17 = alloca(v16);
  uint64_t v18 = alloca(v16);
  uint64_t v65 = &v55;
  uint64_t v19 = alloca(v16);
  uint64_t v20 = alloca(v16);
  id v62 = &v55;
  uint64_t v21 = alloca(v16);
  uint64_t v22 = alloca(v16);
  int64_t v70 = &v55;
  int64_t v23 = alloca(v16);
  int64_t v24 = alloca(v16);
  uint64_t v64 = v2;
  outlined init with copy of MLTrainingSessionParameters(v2, (uint64_t)&v55, type metadata accessor for MLStyleTransfer.ModelParameters.ValidationData);
  uint64_t v25 = v15;
  if (__swift_getEnumTagSinglePayload((uint64_t)&v55, 1, v15) == 1) {
    return outlined destroy of MLActivityClassifier.ModelParameters((uint64_t)&v55, type metadata accessor for MLStyleTransfer.ModelParameters.ValidationData);
  }
  char v27 = (void (*)(uint64_t *, uint64_t, uint64_t))v69[4];
  uint64_t v67 = v25;
  v27(&v55, (uint64_t)&v55, v25);
  uint64_t v28 = (uint64_t)v57;
  static UTType.image.getter(&v55);
  int64_t v68 = &v55;
  BOOL v29 = static _FileUtilities.isReadableFile(at:of:)((uint64_t)&v55, v28);
  (*(void (**)(uint64_t, uint64_t))(v55 + 8))(v28, v56);
  if (v29)
  {
    id v30 = v27;
    uint64_t v31 = (uint64_t)v63;
    outlined init with copy of Either<LogisticRegressionClassifier<Float, String>, FullyConnectedNetworkClassifier<Float, String>>(v58, (uint64_t)v63, &demangling cache variable for type metadata for URL?);
    uint64_t v32 = v67;
    if (__swift_getEnumTagSinglePayload(v31, 1, v67) == 1)
    {
      uint64_t v33 = NSTemporaryDirectory();
      uint64_t v34 = v33;
      uint64_t v35 = static String._unconditionallyBridgeFromObjectiveC(_:)(v34);
      uint64_t v37 = v36;

      URL.init(fileURLWithPath:isDirectory:)(v35, v37, 1);
      swift_bridgeObjectRelease(v37);
      id v38 = v61;
      UUID.init()();
      uint64_t v39 = UUID.uuidString.getter();
      uint64_t v41 = v40;
      (*(void (**)(uint64_t *, uint64_t))(v59 + 8))(v38, v60);
      uint64_t v42 = v62;
      uint64_t v43 = v65;
      URL.appendingPathComponent(_:)(v39, v41);
      char v44 = v41;
      uint64_t v32 = v67;
      swift_bridgeObjectRelease(v44);
      uint64_t v45 = (void (*)(uint64_t *, uint64_t))v69[1];
      v45(v43, v32);
      URL.appendingPathExtension(_:)(6778480, 0xE300000000000000);
      v45(v42, v32);
      outlined destroy of Either<LogisticRegressionClassifier<Float, String>, FullyConnectedNetworkClassifier<Float, String>>((uint64_t)v63, &demangling cache variable for type metadata for URL?);
    }
    else
    {
      v30(v70, v31, v32);
    }
    uint64_t v51 = v66;
    uint64_t v52 = (void *)MLStyleTransfer.ModelParameters.ValidationData.processImage(sourceURL:pixels:processingOption:)((uint64_t)v68, 512, 2);
    if (!v51)
    {
      uint64_t v53 = v52;
      MLStyleTransfer.ModelParameters.ValidationData.saveImage(for:at:)(v52);
    }
    uint64_t v54 = (void (*)(uint64_t *, uint64_t))v69[1];
    v54(v70, v32);
    return ((uint64_t (*)(uint64_t *, uint64_t))v54)(v68, v32);
  }
  else
  {
    uint64_t v46 = lazy protocol witness table accessor for type MLCreateError and conformance MLCreateError();
    swift_allocError(&type metadata for MLCreateError, v46, 0, 0);
    *(void *)uint64_t v47 = 0xD000000000000020;
    *(void *)(v47 + 8) = "fied content image directory" + 0x8000000000000000;
    *(_OWORD *)(v47 + 16) = 0;
    *(_OWORD *)(v47 + 32) = 0;
    *(unsigned char *)(v47 + 48) = 0;
    swift_willThrow(&type metadata for MLCreateError, v46, v47, v48, v49, v50);
    return ((uint64_t (*)(uint64_t *, uint64_t))v69[1])(v68, v67);
  }
}

uint64_t MLStyleTransfer.ModelParameters.ValidationData.processImage(sourceURL:pixels:processingOption:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v29 = v3;
  uint64_t v33 = a3;
  uint64_t v30 = a2;
  uint64_t v4 = type metadata accessor for URL(0);
  uint64_t v5 = *(void *)(v4 - 8);
  int64_t v6 = *(void *)(v5 + 64);
  NSDictionary v7 = alloca(v6);
  uint64_t v8 = alloca(v6);
  uint64_t v32 = v28;
  uint64_t v31 = type metadata accessor for OS_os_log(0, &lazy cache variable for type metadata for MLFeatureValue, MLFeatureValue_ptr);
  (*(void (**)(unsigned char *, uint64_t, uint64_t))(v5 + 16))(v28, a1, v4);
  uint64_t v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(MLFeatureValueImageOption, Any)>);
  uint64_t inited = (void *)swift_initStackObject(v9, v28);
  inited[2] = 1;
  inited[3] = 2;
  inited[4] = MLFeatureValueImageOptionCropAndScale;
  inited[8] = &type metadata for UInt;
  inited[5] = v33;
  uint64_t v11 = type metadata accessor for MLFeatureValueImageOption(0);
  uint64_t v12 = lazy protocol witness table accessor for type VNImageOption and conformance VNImageOption(&lazy protocol witness table cache variable for type MLFeatureValueImageOption and conformance MLFeatureValueImageOption, type metadata accessor for MLFeatureValueImageOption, (uint64_t)&protocol conformance descriptor for MLFeatureValueImageOption);
  MLFeatureValueImageOptionCropAndScale;
  uint64_t v13 = Dictionary.init(dictionaryLiteral:)(inited, v11, (char *)&type metadata for Any + 8, v12);
  uint64_t v14 = v31;
  uint64_t v15 = v29;
  id v16 = @nonobjc MLFeatureValue.__allocating_init(imageAt:pixelsWide:pixelsHigh:pixelFormatType:options:)((uint64_t)v32, v30, v30, 0x52474241u, v13);
  if (!v15)
  {
    uint64_t v17 = v16;
    id v18 = [v16 imageBufferValue];
    id v19 = v18;
    if (v19)
    {
      uint64_t v20 = v19;
      id v21 = objc_allocWithZone((Class)CIImage);
      uint64_t v14 = (uint64_t)[v21 initWithCVPixelBuffer:v20];
    }
    else
    {
      uint64_t v23 = lazy protocol witness table accessor for type MLCreateError and conformance MLCreateError();
      swift_allocError(&type metadata for MLCreateError, v23, 0, 0);
      *(void *)uint64_t v24 = 0xD000000000000023;
      *(void *)(v24 + 8) = "Failed to write image to disk." + 0x8000000000000000;
      *(_OWORD *)(v24 + 16) = 0;
      *(_OWORD *)(v24 + 32) = 0;
      *(unsigned char *)(v24 + 48) = 0;
      swift_willThrow(&type metadata for MLCreateError, v23, v24, v25, v26, v27);
    }
  }
  return v14;
}

NSURL *MLStyleTransfer.ModelParameters.ValidationData.saveImage(for:at:)(id a1)
{
  id v1 = objc_allocWithZone((Class)CIContext);
  id v2 = [v1 init];
  id v3 = [a1 colorSpace];
  id v23 = v3;
  if (v23)
  {
    unsigned int v22 = kCIFormatRGBA16;
    URL._bridgeToObjectiveC()((NSURL *)kCIFormatRGBA16);
    id v21 = v4;
    uint64_t v5 = type metadata accessor for CIImageRepresentationOption(0);
    uint64_t v6 = lazy protocol witness table accessor for type VNImageOption and conformance VNImageOption(&lazy protocol witness table cache variable for type CIImageRepresentationOption and conformance CIImageRepresentationOption, type metadata accessor for CIImageRepresentationOption, (uint64_t)&protocol conformance descriptor for CIImageRepresentationOption);
    id v24 = v2;
    char v7 = Dictionary.init(dictionaryLiteral:)(_swiftEmptyArrayStorage, v5, (char *)&type metadata for Any + 8, v6);
    Class isa = Dictionary._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease(v7);
    unsigned __int8 v9 = [v2 writePNGRepresentationOfImage:a1 toURL:v21 format:v22 colorSpace:v23 options:isa];

    if (v9)
    {
      0;
    }
    else
    {
      id v15 = 0;
      _convertNSErrorToError(_:)(0);

      swift_willThrow(v15, "writePNGRepresentationOfImage:toURL:format:colorSpace:options:error:", v16, v17, v18, v19);
    }
  }
  else
  {
    uint64_t v10 = lazy protocol witness table accessor for type MLCreateError and conformance MLCreateError();
    swift_allocError(&type metadata for MLCreateError, v10, 0, 0);
    *(void *)uint64_t v11 = 0xD00000000000001ELL;
    *(void *)(v11 + 8) = "alidation image." + 0x8000000000000000;
    *(_OWORD *)(v11 + 16) = 0;
    *(_OWORD *)(v11 + 32) = 0;
    *(unsigned char *)(v11 + 48) = 2;
    swift_willThrow(&type metadata for MLCreateError, v10, v11, v12, v13, v14);
  }
  return __stack_chk_guard;
}

CreateML::MLStyleTransfer::ModelParameters::ModelAlgorithmType_optional __swiftcall MLStyleTransfer.ModelParameters.ModelAlgorithmType.init(rawValue:)(Swift::String rawValue)
{
  id v2 = v1;
  Swift::Int v3 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&outlined read-only object #0 of MLStyleTransfer.ModelParameters.ModelAlgorithmType.init(rawValue:), rawValue);
  swift_bridgeObjectRelease(rawValue._object);
  result.CMTimeValue value = CreateML_MLStyleTransfer_ModelParameters_ModelAlgorithmType_cnn;
  char v5 = 2 - (v3 == 1);
  if (!v3) {
    char v5 = 0;
  }
  unsigned char *v2 = v5;
  return result;
}

uint64_t MLStyleTransfer.ModelParameters.ModelAlgorithmType.rawValue.getter()
{
  uint64_t result = 7237219;
  if (*v0) {
    return 0x6574694C6E6E63;
  }
  return result;
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance MLStyleTransfer.ModelParameters.ModelAlgorithmType(char *a1, char *a2)
{
  return specialized == infix<A>(_:_:)(*a1, *a2);
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance MLStyleTransfer.ModelParameters.ModelAlgorithmType()
{
  return specialized RawRepresentable<>.hashValue.getter(*v0);
}

uint64_t protocol witness for Hashable.hash(into:) in conformance MLStyleTransfer.ModelParameters.ModelAlgorithmType(uint64_t a1)
{
  return specialized RawRepresentable<>.hash(into:)(a1, *v1);
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance MLStyleTransfer.ModelParameters.ModelAlgorithmType(uint64_t a1)
{
  return specialized RawRepresentable<>._rawHashValue(seed:)(a1, *v1);
}

CreateML::MLStyleTransfer::ModelParameters::ModelAlgorithmType_optional protocol witness for RawRepresentable.init(rawValue:) in conformance MLStyleTransfer.ModelParameters.ModelAlgorithmType(Swift::String *a1)
{
  return MLStyleTransfer.ModelParameters.ModelAlgorithmType.init(rawValue:)(*a1);
}

uint64_t protocol witness for RawRepresentable.rawValue.getter in conformance MLStyleTransfer.ModelParameters.ModelAlgorithmType(uint64_t a1)
{
  id v2 = v1;
  uint64_t result = MLStyleTransfer.ModelParameters.ModelAlgorithmType.rawValue.getter(a1);
  uint64_t *v2 = result;
  v2[1] = v4;
  return result;
}

void static MLStyleTransfer.ModelParameters.verifyStyleStrengthParameter(value:)(uint64_t a1)
{
  if ((unint64_t)(a1 - 1) > 9)
  {
    _StringGuts.grow(_:)(38);
    swift_bridgeObjectRelease(0);
    *(void *)&long long v10 = 0xD00000000000001ELL;
    *((void *)&v10 + 1) = "s validation image." + 0x8000000000000000;
    v1._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter(&type metadata for Int, &protocol witness table for Int);
    char object = (char)v1._object;
    String.append(_:)(v1);
    swift_bridgeObjectRelease(object);
    v3._uint64_t countAndFlagsBits = 8236;
    v3._char object = (void *)0xE200000000000000;
    String.append(_:)(v3);
    v4._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter(&type metadata for Int, &protocol witness table for Int);
    char v5 = (char)v4._object;
    String.append(_:)(v4);
    swift_bridgeObjectRelease(v5);
    v3._uint64_t countAndFlagsBits = 11869;
    v3._char object = (void *)0xE200000000000000;
    String.append(_:)(v3);
    v3._char object = (void *)lazy protocol witness table accessor for type MLCreateError and conformance MLCreateError();
    swift_allocError(&type metadata for MLCreateError, v3._object, 0, 0);
    *(_OWORD *)uint64_t v6 = v10;
    *(_OWORD *)(v6 + 16) = 0;
    *(_OWORD *)(v6 + 32) = 0;
    *(unsigned char *)(v6 + 48) = 0;
    swift_willThrow(&type metadata for MLCreateError, v3._object, v6, v7, v8, v9);
  }
}

uint64_t static MLStyleTransfer.generateTrainingTable(urls:)(uint64_t a1)
{
  uint64_t v37 = v1;
  uint64_t v32 = type metadata accessor for URL(0);
  uint64_t v3 = *(void *)(v32 - 8);
  int64_t v4 = *(void *)(v3 + 64);
  char v5 = alloca(v4);
  uint64_t v6 = alloca(v4);
  uint64_t v33 = v29;
  int64_t v7 = *(void *)(a1 + 16);
  if (v7)
  {
    uint64_t v40 = _swiftEmptyArrayStorage;
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v7, 0);
    uint64_t v8 = ((*(unsigned __int8 *)(v3 + 80) + 32) & ~*(unsigned __int8 *)(v3 + 80)) + a1;
    uint64_t v35 = *(void (**)(unsigned char *, uint64_t, uint64_t))(v3 + 16);
    uint64_t v34 = v3;
    uint64_t v36 = *(void *)(v3 + 72);
    do
    {
      uint64_t v9 = v33;
      long long v10 = v33;
      uint64_t v11 = v32;
      v35(v33, v8, v32);
      uint64_t v39 = (unsigned char *)URL.path.getter(v10);
      uint64_t v31 = v12;
      (*(void (**)(unsigned char *, uint64_t))(v34 + 8))(v9, v11);
      uint64_t v13 = v40;
      if (!swift_isUniquelyReferenced_nonNull_native(v40))
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v13[2] + 1, 1);
        uint64_t v13 = v40;
      }
      unint64_t v14 = v13[2];
      unint64_t v15 = v13[3];
      unint64_t v16 = v14 + 1;
      if (v15 >> 1 <= v14)
      {
        unint64_t v38 = v14 + 1;
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v15 >= 2, v14 + 1, 1);
        unint64_t v16 = v38;
        uint64_t v13 = v40;
      }
      v13[2] = v16;
      uint64_t v17 = 2 * v14;
      v13[v17 + 4] = v39;
      v13[v17 + 5] = v31;
      v8 += v36;
      --v7;
    }
    while (v7);
  }
  else
  {
    uint64_t v13 = _swiftEmptyArrayStorage;
  }
  uint64_t v18 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, MLUntypedColumn)>);
  uint64_t inited = swift_initStackObject(v18, v29);
  uint64_t v39 = v29;
  *(void *)(inited + 16) = 1;
  *(void *)(inited + 24) = 2;
  *(void *)(inited + 32) = 0x55746E65746E6F63;
  *(void *)(inited + 40) = 0xEB00000000734C52;
  uint64_t v40 = v13;
  uint64_t v20 = alloca(24);
  id v21 = alloca(32);
  uint64_t v30 = &v40;
  uint64_t ML14_UntypedColumnC_s5Error_pTgm5 = _ss6ResultOsRi_zrlE8catchingAByxq_Gxyq_YKXE_tcfC8CreateML14_UntypedColumnC_s5Error_pTgm5((void (*)(void *))partial apply for specialized closure #1 in MLUntypedColumn.init<A>(_:));
  char v24 = v23;
  swift_bridgeObjectRelease((_BYTE)v40);
  *(void *)(inited + 48) = ML14_UntypedColumnC_s5Error_pTgm5;
  *(unsigned char *)(inited + 56) = v24 & 1;
  uint64_t v25 = Dictionary.init(dictionaryLiteral:)(inited, &type metadata for String, &type metadata for MLUntypedColumn, &protocol witness table for String);
  uint64_t result = specialized MLDataTable.init<A>(uniqueKeysWithValues:)(v25);
  if (!v2)
  {
    uint64_t result = (uint64_t)v40;
    char v27 = v41;
    uint64_t v28 = v37;
    *uint64_t v37 = v40;
    *((unsigned char *)v28 + 8) = v27;
  }
  return result;
}

uint64_t CMLModel.contentLoss.getter(double a1)
{
  return CMLModel.contentLoss.getter(0xD000000000000015, (uint64_t)("training_style_loss" + 0x8000000000000000), a1);
}

uint64_t CMLModel.styleLoss.getter(double a1)
{
  return CMLModel.contentLoss.getter(0xD000000000000013, (uint64_t)("Style strength: " + 0x8000000000000000), a1);
}

uint64_t CMLModel.contentLoss.getter(uint64_t a1, uint64_t a2, double a3)
{
  double v12 = v3;
  uint64_t empty = tc_v1_parameters_create_empty(0);
  if (!empty) {
    BUG();
  }
  uint64_t v5 = empty;
  uint64_t v6 = type metadata accessor for CMLParameters();
  uint64_t inited = swift_initStackObject(v6, v11);
  *(void *)(inited + 16) = v5;
  type metadata accessor for CMLFeatureValue();
  uint64_t v8 = CMLFeatureValue.__allocating_init(_:)(a1, a2);
  CMLParameters.add(key:featureValue:)(35, v8);
  swift_release();
  CMLModel.callFunction(name:arguments:)(16, inited);
  uint64_t v9 = CMLVariant.featureValue()(16);
  specialized handling<A, B>(_:_:)(*(void *)(v9 + 16));
  double v12 = a3;
  swift_release();
  swift_release();
  swift_setDeallocating(inited);
  tc_v1_release(v5);
  return *(void *)&v12;
}

unint64_t MLStyleTransfer.ModelParameters.ModelAlgorithmType.description.getter()
{
  unint64_t result = 0xD00000000000004FLL;
  if (!*v0) {
    return 0xD000000000000046;
  }
  return result;
}

unint64_t MLStyleTransfer.ModelParameters.ModelAlgorithmType.debugDescription.getter()
{
  unint64_t result = 0xD00000000000004FLL;
  if (!*v0) {
    return 0xD000000000000046;
  }
  return result;
}

unint64_t *MLStyleTransfer.ModelParameters.ModelAlgorithmType.playgroundDescription.getter()
{
  unint64_t v2 = 0xD00000000000004FLL;
  double v3 = "parallelTreeCount" + 0x8000000000000000;
  if (!*v1)
  {
    unint64_t v2 = 0xD000000000000046;
    double v3 = "volutional neural network lite)" + 0x8000000000000000;
  }
  result[3] = (unint64_t)&type metadata for String;
  unint64_t *result = v2;
  result[1] = (unint64_t)v3;
  return result;
}

unint64_t protocol witness for CustomStringConvertible.description.getter in conformance MLStyleTransfer.ModelParameters.ModelAlgorithmType()
{
  return MLStyleTransfer.ModelParameters.ModelAlgorithmType.description.getter();
}

unint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance MLStyleTransfer.ModelParameters.ModelAlgorithmType()
{
  return MLStyleTransfer.ModelParameters.ModelAlgorithmType.debugDescription.getter();
}

unint64_t *protocol witness for CustomPlaygroundDisplayConvertible.playgroundDescription.getter in conformance MLStyleTransfer.ModelParameters.ModelAlgorithmType()
{
  return MLStyleTransfer.ModelParameters.ModelAlgorithmType.playgroundDescription.getter();
}

uint64_t MLStyleTransfer.ModelParameters.description.getter()
{
  v1._uint64_t countAndFlagsBits = 0xD000000000000046;
  unint64_t v2 = "parallelTreeCount" + 0x8000000000000000;
  if (*v0) {
    v1._uint64_t countAndFlagsBits = 0xD00000000000004FLL;
  }
  else {
    unint64_t v2 = "volutional neural network lite)" + 0x8000000000000000;
  }
  v1._char object = v2;
  String.append(_:)(v1);
  swift_bridgeObjectRelease((_BYTE)v2);
  v3._uint64_t countAndFlagsBits = 10;
  v3._char object = (void *)0xE100000000000000;
  String.append(_:)(v3);
  v3._uint64_t countAndFlagsBits = 0x687469726F676C41;
  v3._char object = (void *)0xEB00000000203A6DLL;
  String.append(_:)(v3);
  swift_bridgeObjectRelease(109);
  _StringGuts.grow(_:)(19);
  swift_bridgeObjectRelease(0);
  type metadata accessor for MLStyleTransfer.ModelParameters(0);
  uint64_t v4 = dispatch thunk of CustomStringConvertible.description.getter(&type metadata for Int, &protocol witness table for Int);
  char v6 = (char)v5;
  v3._uint64_t countAndFlagsBits = v4;
  v3._char object = v5;
  String.append(_:)(v3);
  swift_bridgeObjectRelease(v6);
  v3._uint64_t countAndFlagsBits = 10;
  v3._char object = (void *)0xE100000000000000;
  String.append(_:)(v3);
  v3._uint64_t countAndFlagsBits = 0xD000000000000010;
  v3._char object = "tional neural network)" + 0x8000000000000000;
  String.append(_:)(v3);
  swift_bridgeObjectRelease(("tional neural network)" + 0x8000000000000000));
  _StringGuts.grow(_:)(19);
  swift_bridgeObjectRelease(0);
  uint64_t v7 = dispatch thunk of CustomStringConvertible.description.getter(&type metadata for Int, &protocol witness table for Int);
  char v9 = (char)v8;
  v3._uint64_t countAndFlagsBits = v7;
  v3._char object = v8;
  String.append(_:)(v3);
  swift_bridgeObjectRelease(v9);
  v3._uint64_t countAndFlagsBits = 10;
  v3._char object = (void *)0xE100000000000000;
  String.append(_:)(v3);
  v3._uint64_t countAndFlagsBits = 0xD000000000000010;
  v3._char object = "Max iterations: " + 0x8000000000000000;
  String.append(_:)(v3);
  swift_bridgeObjectRelease(("Max iterations: " + 0x8000000000000000));
  _StringGuts.grow(_:)(19);
  swift_bridgeObjectRelease(0);
  uint64_t v10 = dispatch thunk of CustomStringConvertible.description.getter(&type metadata for Int, &protocol witness table for Int);
  char v12 = (char)v11;
  v3._uint64_t countAndFlagsBits = v10;
  v3._char object = v11;
  String.append(_:)(v3);
  swift_bridgeObjectRelease(v12);
  v3._uint64_t countAndFlagsBits = 10;
  v3._char object = (void *)0xE100000000000000;
  String.append(_:)(v3);
  v3._uint64_t countAndFlagsBits = 0xD000000000000010;
  v3._char object = "Textel density: " + 0x8000000000000000;
  String.append(_:)(v3);
  swift_bridgeObjectRelease(("Textel density: " + 0x8000000000000000));
  return 0;
}

uint64_t MLStyleTransfer.ModelParameters.debugDescription.getter()
{
  return MLStyleTransfer.ModelParameters.description.getter();
}

uint64_t MLStyleTransfer.ModelParameters.playgroundDescription.getter(uint64_t a1)
{
  unint64_t v2 = v1;
  uint64_t result = MLStyleTransfer.ModelParameters.description.getter(a1);
  v2[3] = (uint64_t)&type metadata for String;
  uint64_t *v2 = result;
  v2[1] = v4;
  return result;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance MLStyleTransfer.ModelParameters()
{
  return MLStyleTransfer.ModelParameters.description.getter();
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance MLStyleTransfer.ModelParameters()
{
  return MLStyleTransfer.ModelParameters.debugDescription.getter();
}

uint64_t protocol witness for CustomPlaygroundDisplayConvertible.playgroundDescription.getter in conformance MLStyleTransfer.ModelParameters(uint64_t a1)
{
  return MLStyleTransfer.ModelParameters.playgroundDescription.getter(a1);
}

unint64_t MLStyleTransfer.description.getter()
{
  return MLStyleTransfer.debugDescription.getter();
}

unint64_t MLStyleTransfer.debugDescription.getter()
{
  unint64_t v1 = ModelType.description.getter(*(_DWORD *)(*(void *)v0 + 32));
  char v3 = v2;
  type metadata accessor for MLStyleTransfer(0);
  uint64_t v4 = MLStyleTransfer.ModelParameters.description.getter(0);
  char v6 = v5;
  swift_bridgeObjectRetain(v3);
  v7._uint64_t countAndFlagsBits = 0x656D617261500A0ALL;
  v7._char object = (void *)0xED00000A73726574;
  String.append(_:)(v7);
  swift_bridgeObjectRetain(v3);
  v7._uint64_t countAndFlagsBits = v4;
  v7._char object = v6;
  String.append(_:)(v7);
  swift_bridgeObjectRelease(v3);
  swift_bridgeObjectRelease((_BYTE)v6);
  swift_bridgeObjectRelease(v3);
  return v1;
}

NSAttributedString MLStyleTransfer.playgroundDescription.getter()
{
  unint64_t v1 = v0;
  uint64_t v2 = type metadata accessor for OS_os_log(0, &lazy cache variable for type metadata for NSAttributedString, NSAttributedString_ptr);
  v3._uint64_t countAndFlagsBits = MLStyleTransfer.debugDescription.getter();
  v3._char object = v4;
  result.super.Class isa = NSAttributedString.__allocating_init(string:)(v3).super.isa;
  v1[3].super.Class isa = (Class)v2;
  v1->super.Class isa = result.super.isa;
  return result;
}

unint64_t protocol witness for CustomStringConvertible.description.getter in conformance MLStyleTransfer()
{
  return MLStyleTransfer.description.getter();
}

unint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance MLStyleTransfer()
{
  return MLStyleTransfer.debugDescription.getter();
}

NSAttributedString protocol witness for CustomPlaygroundDisplayConvertible.playgroundDescription.getter in conformance MLStyleTransfer()
{
  return MLStyleTransfer.playgroundDescription.getter();
}

uint64_t static MLStyleTransfer.ModelParameters.ValidationData.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v22 = a2;
  unsigned int v2 = a1;
  uint64_t v3 = type metadata accessor for URL(0);
  uint64_t v25 = *(void *)(v3 - 8);
  int64_t v4 = *(void *)(v25 + 64);
  uint64_t v5 = alloca(v4);
  char v6 = alloca(v4);
  char v23 = v21;
  int64_t v7 = *(void *)(*(void *)(type metadata accessor for MLStyleTransfer.ModelParameters.ValidationData(0) - 8) + 64);
  uint64_t v8 = alloca(v7);
  char v9 = alloca(v7);
  char v24 = v21;
  uint64_t v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (MLStyleTransfer.ModelParameters.ValidationData, MLStyleTransfer.ModelParameters.ValidationData));
  int64_t v11 = *(void *)(*(void *)(v10 - 8) + 64);
  char v12 = alloca(v11);
  uint64_t v13 = alloca(v11);
  unint64_t v14 = &v21[*(int *)(v10 + 48)];
  outlined init with copy of MLTrainingSessionParameters(a1, (uint64_t)v21, type metadata accessor for MLStyleTransfer.ModelParameters.ValidationData);
  outlined init with copy of MLTrainingSessionParameters(v22, (uint64_t)v14, type metadata accessor for MLStyleTransfer.ModelParameters.ValidationData);
  if (__swift_getEnumTagSinglePayload((uint64_t)v21, 1, v3) != 1)
  {
    uint64_t v15 = (uint64_t)v24;
    outlined init with copy of MLTrainingSessionParameters((uint64_t)v21, (uint64_t)v24, type metadata accessor for MLStyleTransfer.ModelParameters.ValidationData);
    if (__swift_getEnumTagSinglePayload((uint64_t)v14, 1, v3) != 1)
    {
      unint64_t v16 = v23;
      uint64_t v17 = v14;
      uint64_t v18 = v25;
      (*(void (**)(unsigned char *, unsigned char *, uint64_t))(v25 + 32))(v23, v17, v3);
      unsigned int v2 = static URL.== infix(_:_:)(v15, v16);
      uint64_t v19 = *(void (**)(unsigned char *, uint64_t))(v18 + 8);
      v19(v16, v3);
      v19(v24, v3);
      outlined destroy of MLActivityClassifier.ModelParameters((uint64_t)v21, type metadata accessor for MLStyleTransfer.ModelParameters.ValidationData);
      return v2;
    }
    (*(void (**)(uint64_t, uint64_t))(v25 + 8))(v15, v3);
    goto LABEL_6;
  }
  if (__swift_getEnumTagSinglePayload((uint64_t)v14, 1, v3) != 1)
  {
LABEL_6:
    outlined destroy of Either<LogisticRegressionClassifier<Float, String>, FullyConnectedNetworkClassifier<Float, String>>((uint64_t)v21, &demangling cache variable for type metadata for (MLStyleTransfer.ModelParameters.ValidationData, MLStyleTransfer.ModelParameters.ValidationData));
    return 0;
  }
  outlined destroy of MLActivityClassifier.ModelParameters((uint64_t)v21, type metadata accessor for MLStyleTransfer.ModelParameters.ValidationData);
  LOBYTE(v2) = 1;
  return v2;
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance MLStyleTransfer.ModelParameters.ValidationData(uint64_t a1, uint64_t a2)
{
  return static MLStyleTransfer.ModelParameters.ValidationData.== infix(_:_:)(a1, a2);
}

id @nonobjc VNImageRequestHandler.init(cgImage:options:)(id a1, char a2)
{
  type metadata accessor for VNImageOption(0);
  lazy protocol witness table accessor for type VNImageOption and conformance VNImageOption(&lazy protocol witness table cache variable for type VNImageOption and conformance VNImageOption, type metadata accessor for VNImageOption, (uint64_t)&protocol conformance descriptor for VNImageOption);
  Class isa = Dictionary._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease(a2);
  id v4 = [v2 initWithCGImage:a1 options:isa];

  return v4;
}

_OWORD *specialized _NativeDictionary.setValue(_:forKey:isUnique:)(long long *a1, uint64_t a2, uint64_t a3, Swift::Bool a4)
{
  uint64_t v5 = (void **)v4;
  char v6 = (void *)*v4;
  unint64_t v8 = specialized __RawDictionaryStorage.find<A>(_:)(a2, a3);
  BOOL v9 = (v7 & 1) == 0;
  BOOL v10 = __OFADD__(v6[2], v9);
  Swift::Int v11 = v6[2] + v9;
  if (v10) {
    BUG();
  }
  char v12 = v7;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _NativeDictionary<String, Any>);
  if (_NativeDictionary.ensureUnique(isUnique:capacity:)(a4, v11))
  {
    unint64_t v8 = specialized __RawDictionaryStorage.find<A>(_:)(a2, a3);
    if ((v12 & 1) != (v13 & 1))
    {
      KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(&type metadata for String);
      BUG();
    }
  }
  unint64_t v14 = *v5;
  if (v12)
  {
    uint64_t v15 = (void *)(v14[7] + 32 * v8);
    __swift_destroy_boxed_opaque_existential_1Tm(v15);
    return outlined init with take of Any(a1, v15);
  }
  else
  {
    specialized _NativeDictionary._insert(at:key:value:)(v8, a2, a3, a1, v14);
    return (_OWORD *)swift_bridgeObjectRetain(a3);
  }
}

uint64_t specialized _NativeDictionary.setValue(_:forKey:isUnique:)(uint64_t a1, uint64_t a2, uint64_t a3, Swift::Bool a4)
{
  uint64_t v5 = (void **)v4;
  char v7 = (void *)*v4;
  unint64_t v8 = specialized __RawDictionaryStorage.find<A>(_:)(a2, a3);
  BOOL v10 = (v9 & 1) == 0;
  BOOL v11 = __OFADD__(v7[2], v10);
  Swift::Int v12 = v7[2] + v10;
  if (v11) {
    BUG();
  }
  char v13 = v9;
  unint64_t v14 = v8;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _NativeDictionary<String, Int>);
  unint64_t v15 = v14;
  if (_NativeDictionary.ensureUnique(isUnique:capacity:)(a4, v12))
  {
    unint64_t v15 = specialized __RawDictionaryStorage.find<A>(_:)(a2, a3);
    if ((v13 & 1) != (v16 & 1))
    {
      KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(&type metadata for String);
      BUG();
    }
  }
  uint64_t v17 = *v5;
  if (v13)
  {
    uint64_t result = v17[7];
    *(void *)(result + 8 * v15) = a1;
  }
  else
  {
    specialized _NativeDictionary._insert(at:key:value:)(v15, a2, a3, a1, v17);
    return swift_bridgeObjectRetain(a3);
  }
  return result;
}

{
  return specialized _NativeDictionary.setValue(_:forKey:isUnique:)(a1, a2, a3, a4, &demangling cache variable for type metadata for _NativeDictionary<String, CSVType>, (uint64_t (*)(void))&type metadata accessor for CSVType);
}

{
  return specialized _NativeDictionary.setValue(_:forKey:isUnique:)(a1, a2, a3, a4, &demangling cache variable for type metadata for _NativeDictionary<String, JSONType>, (uint64_t (*)(void))&type metadata accessor for JSONType);
}

{
  return specialized _NativeDictionary.setValue(_:forKey:isUnique:)(a1, a2, a3, a4, &demangling cache variable for type metadata for _NativeDictionary<String, [Double]>);
}

{
  return specialized _NativeDictionary.setValue(_:forKey:isUnique:)(a1, a2, a3, a4, &demangling cache variable for type metadata for _NativeDictionary<String, MetricsKey>, (uint64_t (*)(void))&type metadata accessor for MetricsKey);
}

{
  return specialized _NativeDictionary.setValue(_:forKey:isUnique:)(a1, a2, a3, a4, &demangling cache variable for type metadata for _NativeDictionary<String, Tensor>, (uint64_t (*)(void))&type metadata accessor for Tensor);
}

{
  return specialized _NativeDictionary.setValue(_:forKey:isUnique:)(a1, a2, a3, a4, &demangling cache variable for type metadata for _NativeDictionary<String, MLProgram.Block>, (uint64_t (*)(void))&type metadata accessor for MLProgram.Block);
}

{
  return specialized _NativeDictionary.setValue(_:forKey:isUnique:)(a1, a2, a3, a4, &demangling cache variable for type metadata for _NativeDictionary<String, [URL]>);
}

uint64_t specialized _NativeDictionary.setValue(_:forKey:isUnique:)(uint64_t a1, uint64_t a2, uint64_t a3, Swift::Bool a4, uint64_t *a5, uint64_t (*a6)(void))
{
  char v7 = (void **)v6;
  unint64_t v8 = (void *)*v6;
  unint64_t v10 = specialized __RawDictionaryStorage.find<A>(_:)(a2, a3);
  BOOL v11 = (v9 & 1) == 0;
  BOOL v12 = __OFADD__(v8[2], v11);
  Swift::Int v13 = v8[2] + v11;
  if (v12) {
    BUG();
  }
  char v14 = v9;
  __swift_instantiateConcreteTypeFromMangledName(a5);
  if (_NativeDictionary.ensureUnique(isUnique:capacity:)(a4, v13))
  {
    unint64_t v10 = specialized __RawDictionaryStorage.find<A>(_:)(a2, a3);
    if ((v14 & 1) != (v15 & 1))
    {
      KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(&type metadata for String);
      BUG();
    }
  }
  char v16 = *v7;
  if (v14)
  {
    uint64_t v17 = v16[7];
    uint64_t v18 = a6(0);
    return (*(uint64_t (**)(unint64_t, uint64_t, uint64_t))(*(void *)(v18 - 8) + 40))(v17 + *(void *)(*(void *)(v18 - 8) + 72) * v10, a1, v18);
  }
  else
  {
    specialized _NativeDictionary._insert(at:key:value:)(v10, a2, a3, a1, v16, a6);
    return swift_bridgeObjectRetain(a3);
  }
}

uint64_t specialized _NativeDictionary.setValue(_:forKey:isUnique:)(uint64_t a1, char a2, uint64_t a3, uint64_t a4, Swift::Bool a5)
{
  char v6 = (void **)v5;
  char v7 = (void *)*v5;
  unint64_t v9 = specialized __RawDictionaryStorage.find<A>(_:)(a3, a4);
  BOOL v10 = (v8 & 1) == 0;
  BOOL v11 = __OFADD__(v7[2], v10);
  Swift::Int v12 = v7[2] + v10;
  if (v11) {
    BUG();
  }
  char v13 = v8;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _NativeDictionary<String, MLUntypedColumn>);
  if (_NativeDictionary.ensureUnique(isUnique:capacity:)(a5, v12))
  {
    unint64_t v9 = specialized __RawDictionaryStorage.find<A>(_:)(a3, a4);
    if ((v13 & 1) != (v14 & 1))
    {
      KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(&type metadata for String);
      BUG();
    }
  }
  char v15 = a2 & 1;
  char v16 = *v6;
  if (v13)
  {
    uint64_t v17 = v16[7];
    uint64_t v18 = 16 * v9;
    outlined consume of Result<_DataTable, Error>(*(void *)(v17 + v18), *(unsigned char *)(v17 + v18 + 8));
    uint64_t result = a1;
    *(void *)(v17 + v18) = a1;
    *(unsigned char *)(v17 + v18 + 8) = v15 != 0;
  }
  else
  {
    specialized _NativeDictionary._insert(at:key:value:)(v9, a3, a4, a1, v15, v16);
    return swift_bridgeObjectRetain(a4);
  }
  return result;
}

uint64_t specialized _NativeDictionary.setValue(_:forKey:isUnique:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, Swift::Bool a5)
{
  char v6 = (void **)v5;
  char v7 = (void *)*v5;
  unint64_t v9 = specialized __RawDictionaryStorage.find<A>(_:)(a3, a4);
  BOOL v10 = (v8 & 1) == 0;
  BOOL v11 = __OFADD__(v7[2], v10);
  Swift::Int v12 = v7[2] + v10;
  if (v11) {
    BUG();
  }
  char v13 = v8;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _NativeDictionary<String, String>);
  if (_NativeDictionary.ensureUnique(isUnique:capacity:)(a5, v12))
  {
    unint64_t v9 = specialized __RawDictionaryStorage.find<A>(_:)(a3, a4);
    if ((v13 & 1) != (v14 & 1))
    {
      KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(&type metadata for String);
      BUG();
    }
  }
  char v15 = *v6;
  if (v13)
  {
    uint64_t v16 = v15[7];
    uint64_t v17 = 16 * v9;
    swift_bridgeObjectRelease(*(void *)(v16 + v17 + 8));
    *(void *)(v16 + v17) = a1;
    uint64_t result = a2;
    *(void *)(v16 + v17 + 8) = a2;
  }
  else
  {
    specialized _NativeDictionary._insert(at:key:value:)(v9, a3, a4, a1, a2, v15);
    return swift_bridgeObjectRetain(a4);
  }
  return result;
}

uint64_t specialized _NativeDictionary.setValue(_:forKey:isUnique:)(uint64_t a1, BOOL a2, double a3)
{
  id v4 = (void **)v3;
  BOOL v25 = a2;
  double v22 = a3;
  uint64_t v24 = type metadata accessor for MetricsKey(0);
  uint64_t v20 = *(void *)(v24 - 8);
  int64_t v5 = *(void *)(v20 + 64);
  char v6 = alloca(v5);
  char v7 = alloca(v5);
  id v21 = &v19;
  char v8 = (void *)*v3;
  uint64_t v23 = a1;
  unint64_t v10 = specialized __RawDictionaryStorage.find<A>(_:)(a1);
  BOOL v11 = (v9 & 1) == 0;
  BOOL v12 = __OFADD__(v8[2], v11);
  Swift::Int v13 = v8[2] + v11;
  if (v12) {
    BUG();
  }
  char v14 = v9;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _NativeDictionary<MetricsKey, Double>);
  if (_NativeDictionary.ensureUnique(isUnique:capacity:)(v25, v13))
  {
    unint64_t v10 = specialized __RawDictionaryStorage.find<A>(_:)(v23);
    if ((v14 & 1) != (v15 & 1))
    {
      KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(v24);
      BUG();
    }
  }
  uint64_t v16 = *v4;
  if (v14)
  {
    uint64_t result = v16[7];
    *(double *)(result + 8 * v10) = v22;
  }
  else
  {
    uint64_t v18 = (uint64_t)v21;
    (*(void (**)(uint64_t *, uint64_t, uint64_t))(v20 + 16))(v21, v23, v24);
    return specialized _NativeDictionary._insert(at:key:value:)(v10, v18, v16, v22);
  }
  return result;
}

uint64_t specialized _NativeDictionary.setValue(_:forKey:isUnique:)(char a1, Swift::Bool a2, double a3)
{
  id v4 = (void **)v3;
  char v6 = (void *)*v3;
  unint64_t v7 = specialized __RawDictionaryStorage.find<A>(_:)(a1);
  BOOL v9 = (v8 & 1) == 0;
  BOOL v10 = __OFADD__(v6[2], v9);
  Swift::Int v11 = v6[2] + v9;
  if (v10) {
    BUG();
  }
  char v12 = v8;
  unint64_t v13 = v7;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _NativeDictionary<MLProgress.Metric, Double>);
  unint64_t v14 = v13;
  if (_NativeDictionary.ensureUnique(isUnique:capacity:)(a2, v11))
  {
    unint64_t v14 = specialized __RawDictionaryStorage.find<A>(_:)(a1);
    if ((v12 & 1) != (v15 & 1))
    {
      KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(&type metadata for MLProgress.Metric);
      BUG();
    }
  }
  uint64_t v16 = *v4;
  if ((v12 & 1) == 0) {
    return specialized _NativeDictionary._insert(at:key:value:)(v14, a1, v16, a3);
  }
  uint64_t result = v16[7];
  *(double *)(result + 8 * v14) = a3;
  return result;
}

uint64_t specialized _NativeDictionary.setValue(_:forKey:isUnique:)(uint64_t a1, uint64_t a2, uint64_t a3, Swift::Bool a4, uint64_t *a5)
{
  unint64_t v7 = (void **)v5;
  char v8 = (void *)*v5;
  unint64_t v19 = specialized __RawDictionaryStorage.find<A>(_:)(a2, a3);
  BOOL v10 = (v9 & 1) == 0;
  BOOL v11 = __OFADD__(v8[2], v10);
  Swift::Int v12 = v8[2] + v10;
  if (v11) {
    BUG();
  }
  char v13 = v9;
  __swift_instantiateConcreteTypeFromMangledName(a5);
  unint64_t v14 = v19;
  if (_NativeDictionary.ensureUnique(isUnique:capacity:)(a4, v12))
  {
    unint64_t v14 = specialized __RawDictionaryStorage.find<A>(_:)(a2, a3);
    if ((v13 & 1) != (v15 & 1))
    {
      KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(&type metadata for String);
      BUG();
    }
  }
  uint64_t v16 = *v7;
  if (v13)
  {
    uint64_t v17 = v16[7];
    swift_bridgeObjectRelease(*(void *)(v17 + 8 * v14));
    uint64_t result = a1;
    *(void *)(v17 + 8 * v14) = a1;
  }
  else
  {
    specialized _NativeDictionary._insert(at:key:value:)(v14, a2, a3, a1, v16);
    return swift_bridgeObjectRetain(a3);
  }
  return result;
}

_OWORD *specialized _NativeDictionary.setValue(_:forKey:isUnique:)(long long *a1, uint64_t a2, BOOL a3)
{
  id v4 = (void **)v3;
  BOOL v26 = a3;
  uint64_t v23 = a1;
  uint64_t v25 = type metadata accessor for CodingUserInfoKey(0);
  uint64_t v21 = *(void *)(v25 - 8);
  int64_t v5 = *(void *)(v21 + 64);
  char v6 = alloca(v5);
  unint64_t v7 = alloca(v5);
  double v22 = &v20;
  char v8 = (void *)*v3;
  uint64_t v24 = a2;
  unint64_t v10 = specialized __RawDictionaryStorage.find<A>(_:)(a2);
  BOOL v11 = (v9 & 1) == 0;
  BOOL v12 = __OFADD__(v8[2], v11);
  Swift::Int v13 = v8[2] + v11;
  if (v12) {
    BUG();
  }
  char v14 = v9;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _NativeDictionary<CodingUserInfoKey, Any>);
  if (_NativeDictionary.ensureUnique(isUnique:capacity:)(v26, v13))
  {
    unint64_t v10 = specialized __RawDictionaryStorage.find<A>(_:)(v24);
    if ((v14 & 1) != (v15 & 1))
    {
      KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(v25);
      BUG();
    }
  }
  uint64_t v16 = *v4;
  if (v14)
  {
    uint64_t v17 = (void *)(v16[7] + 32 * v10);
    __swift_destroy_boxed_opaque_existential_1Tm(v17);
    return outlined init with take of Any(v23, v17);
  }
  else
  {
    uint64_t v19 = (uint64_t)v22;
    (*(void (**)(uint64_t *, uint64_t, uint64_t))(v21 + 16))(v22, v24, v25);
    return (_OWORD *)specialized _NativeDictionary._insert(at:key:value:)(v10, v19, v23, v16);
  }
}

{
  void *v3;
  void **v4;
  void *v5;
  char v6;
  unint64_t v7;
  BOOL v8;
  BOOL v9;
  Swift::Int v10;
  char v11;
  char v12;
  void *v13;
  void *v14;
  long long v16[2];
  long long *v17;
  uint64_t v18;
  BOOL v19;

  id v4 = (void **)v3;
  uint64_t v19 = a3;
  uint64_t v17 = a1;
  int64_t v5 = (void *)*v3;
  uint64_t v18 = a2;
  unint64_t v7 = specialized __RawDictionaryStorage.find<A>(_:)(a2);
  char v8 = (v6 & 1) == 0;
  char v9 = __OFADD__(v5[2], v8);
  unint64_t v10 = v5[2] + v8;
  if (v9) {
    BUG();
  }
  BOOL v11 = v6;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _NativeDictionary<AnyHashable, Any>);
  if (_NativeDictionary.ensureUnique(isUnique:capacity:)(v19, v10))
  {
    unint64_t v7 = specialized __RawDictionaryStorage.find<A>(_:)(v18);
    if ((v11 & 1) != (v12 & 1))
    {
      KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(&type metadata for AnyHashable);
      BUG();
    }
  }
  Swift::Int v13 = *v4;
  if (v11)
  {
    char v14 = (void *)(v13[7] + 32 * v7);
    __swift_destroy_boxed_opaque_existential_1Tm(v14);
    return outlined init with take of Any(v17, v14);
  }
  else
  {
    outlined init with copy of AnyHashable(v18, (uint64_t)v16);
    return (_OWORD *)specialized _NativeDictionary._insert(at:key:value:)(v7, v16, v17, v13);
  }
}

void *specialized _NativeDictionary.setValue(_:forKey:isUnique:)(uint64_t a1, uint64_t a2, Swift::Bool a3)
{
  id v4 = (void **)v3;
  char v6 = (void *)*v3;
  unint64_t v7 = specialized __RawDictionaryStorage.find<A>(_:)(a2);
  BOOL v9 = (v8 & 1) == 0;
  BOOL v10 = __OFADD__(v6[2], v9);
  Swift::Int v11 = v6[2] + v9;
  if (v10) {
    BUG();
  }
  char v12 = v8;
  unint64_t v13 = v7;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _NativeDictionary<Int, Int>);
  unint64_t v14 = v13;
  if (_NativeDictionary.ensureUnique(isUnique:capacity:)(a3, v11))
  {
    unint64_t v14 = specialized __RawDictionaryStorage.find<A>(_:)(a2);
    if ((v12 & 1) != (v15 & 1))
    {
      KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(&type metadata for Int);
      BUG();
    }
  }
  uint64_t v16 = *v4;
  if ((v12 & 1) == 0) {
    return specialized _NativeDictionary._insert(at:key:value:)(v14, a2, a1, v16);
  }
  uint64_t result = (void *)v16[7];
  result[v14] = a1;
  return result;
}

uint64_t specialized _NativeDictionary.setValue(_:forKey:isUnique:)(uint64_t a1, uint64_t a2, BOOL a3)
{
  id v4 = (void **)v3;
  BOOL v26 = a3;
  uint64_t v23 = a1;
  uint64_t v25 = type metadata accessor for URL(0);
  uint64_t v21 = *(void *)(v25 - 8);
  int64_t v5 = *(void *)(v21 + 64);
  char v6 = alloca(v5);
  unint64_t v7 = alloca(v5);
  double v22 = &v20;
  char v8 = (void *)*v3;
  uint64_t v24 = a2;
  unint64_t v10 = specialized __RawDictionaryStorage.find<A>(_:)(a2);
  BOOL v11 = (v9 & 1) == 0;
  BOOL v12 = __OFADD__(v8[2], v11);
  Swift::Int v13 = v8[2] + v11;
  if (v12) {
    BUG();
  }
  char v14 = v9;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _NativeDictionary<URL, CIImage>);
  if (_NativeDictionary.ensureUnique(isUnique:capacity:)(v26, v13))
  {
    unint64_t v10 = specialized __RawDictionaryStorage.find<A>(_:)(v24);
    if ((v14 & 1) != (v15 & 1))
    {
      KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(v25);
      BUG();
    }
  }
  uint64_t v16 = *v4;
  if (v14)
  {
    uint64_t v17 = v16[7];

    uint64_t result = v23;
    *(void *)(v17 + 8 * v10) = v23;
  }
  else
  {
    uint64_t v19 = (uint64_t)v22;
    (*(void (**)(uint64_t *, uint64_t, uint64_t))(v21 + 16))(v22, v24, v25);
    return specialized _NativeDictionary._insert(at:key:value:)(v10, v19, v23, v16);
  }
  return result;
}

_OWORD *specialized _NativeDictionary.setValue(_:forKey:isUnique:)(long long *a1, char a2, Swift::Bool a3)
{
  id v4 = (void **)v3;
  int64_t v5 = (void *)*v3;
  unint64_t v6 = specialized __RawDictionaryStorage.find<A>(_:)(a2);
  char v16 = v7;
  BOOL v8 = (v7 & 1) == 0;
  BOOL v9 = __OFADD__(v5[2], v8);
  Swift::Int v10 = v5[2] + v8;
  if (v9) {
    BUG();
  }
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _NativeDictionary<MLProgress.Metric, Any>);
  if (_NativeDictionary.ensureUnique(isUnique:capacity:)(a3, v10))
  {
    unint64_t v6 = specialized __RawDictionaryStorage.find<A>(_:)(a2);
    if ((v16 & 1) != (v11 & 1))
    {
      KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(&type metadata for MLProgress.Metric);
      BUG();
    }
  }
  BOOL v12 = *v4;
  if ((v16 & 1) == 0) {
    return (_OWORD *)specialized _NativeDictionary._insert(at:key:value:)(v6, a2, a1, v12);
  }
  Swift::Int v13 = (void *)(v12[7] + 32 * v6);
  __swift_destroy_boxed_opaque_existential_1Tm(v13);
  return outlined init with take of Any(a1, v13);
}

uint64_t specialized _NativeDictionary._insert(at:key:value:)(unint64_t a1, uint64_t a2, uint64_t a3, long long *a4, void *a5)
{
  a5[(a1 >> 6) + 8] |= 1 << a1;
  uint64_t v8 = a5[6];
  uint64_t v9 = 16 * a1;
  *(void *)(v8 + v9) = a2;
  *(void *)(v8 + v9 + 8) = a3;
  outlined init with take of Any(a4, (_OWORD *)(a5[7] + 32 * a1));
  uint64_t v10 = a5[2];
  BOOL v11 = __OFADD__(1, v10);
  uint64_t result = v10 + 1;
  if (v11) {
    BUG();
  }
  a5[2] = result;
  return result;
}

uint64_t specialized _NativeDictionary._insert(at:key:value:)(unint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void *a5)
{
  a5[(a1 >> 6) + 8] |= 1 << a1;
  uint64_t v7 = a5[6];
  uint64_t v8 = 16 * a1;
  *(void *)(v7 + v8) = a2;
  *(void *)(v7 + v8 + 8) = a3;
  *(void *)(a5[7] + 8 * a1) = a4;
  uint64_t v9 = a5[2];
  BOOL v10 = __OFADD__(1, v9);
  uint64_t result = v9 + 1;
  if (v10) {
    BUG();
  }
  a5[2] = result;
  return result;
}

{
  return specialized _NativeDictionary._insert(at:key:value:)(a1, a2, a3, a4, a5);
}

uint64_t specialized _NativeDictionary._insert(at:key:value:)(unint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, char a5, void *a6)
{
  unint64_t v7 = a1;
  a6[(a1 >> 6) + 8] |= 1 << a1;
  uint64_t v8 = a6[6];
  v7 *= 16;
  *(void *)(v8 + v7) = a2;
  *(void *)(v8 + v7 + 8) = a3;
  uint64_t v9 = a6[7];
  *(void *)(v9 + v7) = a4;
  *(unsigned char *)(v9 + v7 + 8) = a5 & 1;
  uint64_t v10 = a6[2];
  BOOL v11 = __OFADD__(1, v10);
  uint64_t result = v10 + 1;
  if (v11) {
    BUG();
  }
  a6[2] = result;
  return result;
}

uint64_t specialized _NativeDictionary._insert(at:key:value:)(unint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, void *a6)
{
  unint64_t v7 = a1;
  a6[(a1 >> 6) + 8] |= 1 << a1;
  uint64_t v8 = a6[6];
  v7 *= 16;
  *(void *)(v8 + v7) = a2;
  *(void *)(v8 + v7 + 8) = a3;
  uint64_t v9 = a6[7];
  *(void *)(v9 + v7) = a4;
  *(void *)(v9 + v7 + 8) = a5;
  uint64_t v10 = a6[2];
  BOOL v11 = __OFADD__(1, v10);
  uint64_t result = v10 + 1;
  if (v11) {
    BUG();
  }
  a6[2] = result;
  return result;
}

uint64_t specialized _NativeDictionary._insert(at:key:value:)(unint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void *a5, uint64_t (*a6)(void))
{
  a5[(a1 >> 6) + 8] |= 1 << a1;
  uint64_t v8 = a5[6];
  uint64_t v9 = 16 * a1;
  *(void *)(v8 + v9) = a2;
  *(void *)(v8 + v9 + 8) = a3;
  uint64_t v10 = a5[7];
  uint64_t v11 = a6(0);
  (*(void (**)(unint64_t, uint64_t, uint64_t))(*(void *)(v11 - 8) + 32))(v10 + *(void *)(*(void *)(v11 - 8) + 72) * a1, a4, v11);
  uint64_t v12 = a5[2];
  BOOL v13 = __OFADD__(1, v12);
  uint64_t result = v12 + 1;
  if (v13) {
    BUG();
  }
  a5[2] = result;
  return result;
}

uint64_t specialized _NativeDictionary._insert(at:key:value:)(unint64_t a1, uint64_t a2, void *a3, double a4)
{
  a3[(a1 >> 6) + 8] |= 1 << a1;
  uint64_t v5 = a3[6];
  uint64_t v6 = type metadata accessor for MetricsKey(0);
  (*(void (**)(unint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 32))(v5 + a1 * *(void *)(*(void *)(v6 - 8) + 72), a2, v6);
  *(double *)(a3[7] + 8 * a1) = a4;
  uint64_t v7 = a3[2];
  BOOL v8 = __OFADD__(1, v7);
  uint64_t result = v7 + 1;
  if (v8) {
    BUG();
  }
  a3[2] = result;
  return result;
}

uint64_t specialized _NativeDictionary._insert(at:key:value:)(unint64_t a1, char a2, void *a3, double a4)
{
  a3[(a1 >> 6) + 8] |= 1 << a1;
  *(unsigned char *)(a3[6] + a1) = a2;
  *(double *)(a3[7] + 8 * a1) = a4;
  uint64_t v4 = a3[2];
  BOOL v5 = __OFADD__(1, v4);
  uint64_t result = v4 + 1;
  if (v5) {
    BUG();
  }
  a3[2] = result;
  return result;
}

uint64_t specialized _NativeDictionary._insert(at:key:value:)(unint64_t a1, uint64_t a2, long long *a3, void *a4)
{
  a4[(a1 >> 6) + 8] |= 1 << a1;
  uint64_t v6 = a4[6];
  uint64_t v7 = type metadata accessor for CodingUserInfoKey(0);
  (*(void (**)(unint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 32))(v6 + a1 * *(void *)(*(void *)(v7 - 8) + 72), a2, v7);
  outlined init with take of Any(a3, (_OWORD *)(a4[7] + 32 * a1));
  uint64_t v8 = a4[2];
  BOOL v9 = __OFADD__(1, v8);
  uint64_t result = v8 + 1;
  if (v9) {
    BUG();
  }
  a4[2] = result;
  return result;
}

void *specialized _NativeDictionary._insert(at:key:value:)(unint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  uint64_t result = a4;
  a4[(a1 >> 6) + 8] |= 1 << a1;
  *(void *)(a4[6] + 8 * a1) = a2;
  *(void *)(a4[7] + 8 * a1) = a3;
  uint64_t v5 = a4[2];
  BOOL v6 = __OFADD__(1, v5);
  uint64_t v7 = v5 + 1;
  if (v6) {
    BUG();
  }
  result[2] = v7;
  return result;
}

uint64_t specialized _NativeDictionary._insert(at:key:value:)(unint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  a4[(a1 >> 6) + 8] |= 1 << a1;
  uint64_t v6 = a4[6];
  uint64_t v7 = type metadata accessor for URL(0);
  (*(void (**)(unint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 32))(v6 + a1 * *(void *)(*(void *)(v7 - 8) + 72), a2, v7);
  *(void *)(a4[7] + 8 * a1) = a3;
  uint64_t v8 = a4[2];
  BOOL v9 = __OFADD__(1, v8);
  uint64_t result = v8 + 1;
  if (v9) {
    BUG();
  }
  a4[2] = result;
  return result;
}

uint64_t outlined assign with take of MLStyleTransfer.ModelParameters.ValidationData(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = type metadata accessor for MLStyleTransfer.ModelParameters.ValidationData(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v2 - 8) + 40))(a2, a1, v2);
  return a2;
}

uint64_t base witness table accessor for Equatable in MLStyleTransfer.ModelParameters.ModelAlgorithmType()
{
  return lazy protocol witness table accessor for type MLStyleTransfer.ModelParameters.ModelAlgorithmType and conformance MLStyleTransfer.ModelParameters.ModelAlgorithmType();
}

uint64_t lazy protocol witness table accessor for type MLStyleTransfer.ModelParameters.ModelAlgorithmType and conformance MLStyleTransfer.ModelParameters.ModelAlgorithmType()
{
  uint64_t result = lazy protocol witness table cache variable for type MLStyleTransfer.ModelParameters.ModelAlgorithmType and conformance MLStyleTransfer.ModelParameters.ModelAlgorithmType;
  if (!lazy protocol witness table cache variable for type MLStyleTransfer.ModelParameters.ModelAlgorithmType and conformance MLStyleTransfer.ModelParameters.ModelAlgorithmType)
  {
    uint64_t result = swift_getWitnessTable(&protocol conformance descriptor for MLStyleTransfer.ModelParameters.ModelAlgorithmType, &type metadata for MLStyleTransfer.ModelParameters.ModelAlgorithmType);
    lazy protocol witness table cache variable for type MLStyleTransfer.ModelParameters.ModelAlgorithmType and conformance MLStyleTransfer.ModelParameters.ModelAlgorithmType = result;
  }
  return result;
}

void *initializeBufferWithCopyOfBuffer for MLStyleTransfer(void *a1, void *a2, uint64_t a3)
{
  int v3 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  uint64_t v4 = *a2;
  *a1 = *a2;
  if ((v3 & 0x20000) != 0)
  {
    uint64_t v5 = (void *)(v4 + ((v3 + 16) & ~v3));
    swift_retain();
  }
  else
  {
    uint64_t v5 = a1;
    uint64_t v6 = *(int *)(a3 + 20);
    uint64_t v7 = (char *)a1 + v6;
    uint64_t v8 = (char *)a2 + v6;
    *((unsigned char *)a1 + v6) = *((unsigned char *)a2 + v6);
    char v16 = (int *)type metadata accessor for MLStyleTransfer.ModelParameters(0);
    uint64_t v9 = v16[5];
    char v15 = v7;
    uint64_t v10 = &v7[v9];
    uint64_t v11 = &v8[v9];
    uint64_t v12 = type metadata accessor for URL(0);
    swift_retain();
    if (__swift_getEnumTagSinglePayload((uint64_t)v11, 1, v12))
    {
      uint64_t v13 = type metadata accessor for MLStyleTransfer.ModelParameters.ValidationData(0);
      memcpy(v10, v11, *(void *)(*(void *)(v13 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v12 - 8) + 16))(v10, v11, v12);
      __swift_storeEnumTagSinglePayload((uint64_t)v10, 0, 1, v12);
    }
    *(void *)&v15[v16[6]] = *(void *)&v8[v16[6]];
    *(void *)&v15[v16[7]] = *(void *)&v8[v16[7]];
    *(void *)&v15[v16[8]] = *(void *)&v8[v16[8]];
    *(void *)&v15[v16[9]] = *(void *)&v8[v16[9]];
    v15[v16[10]] = v8[v16[10]];
  }
  return v5;
}

uint64_t destroy for MLStyleTransfer(uint64_t a1, uint64_t a2)
{
  swift_release();
  uint64_t v2 = a1 + *(int *)(a2 + 20);
  uint64_t v3 = v2 + *(int *)(type metadata accessor for MLStyleTransfer.ModelParameters(0) + 20);
  uint64_t v4 = type metadata accessor for URL(0);
  uint64_t result = __swift_getEnumTagSinglePayload(v3, 1, v4);
  if (!result) {
    return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v4 - 8) + 8))(v3, v4);
  }
  return result;
}

void *initializeWithCopy for MLStyleTransfer(void *a1, void *a2, uint64_t a3)
{
  *a1 = *a2;
  uint64_t v3 = *(int *)(a3 + 20);
  uint64_t v4 = (char *)a1 + v3;
  uint64_t v5 = (char *)a2 + v3;
  *((unsigned char *)a1 + v3) = *((unsigned char *)a2 + v3);
  uint64_t v6 = (int *)type metadata accessor for MLStyleTransfer.ModelParameters(0);
  uint64_t v7 = v6[5];
  __dst = &v4[v7];
  uint64_t v8 = &v5[v7];
  uint64_t v9 = type metadata accessor for URL(0);
  swift_retain();
  if (__swift_getEnumTagSinglePayload((uint64_t)v8, 1, v9))
  {
    uint64_t v10 = type metadata accessor for MLStyleTransfer.ModelParameters.ValidationData(0);
    memcpy(__dst, v8, *(void *)(*(void *)(v10 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v9 - 8) + 16))(__dst, v8, v9);
    __swift_storeEnumTagSinglePayload((uint64_t)__dst, 0, 1, v9);
  }
  *(void *)&v4[v6[6]] = *(void *)&v5[v6[6]];
  *(void *)&v4[v6[7]] = *(void *)&v5[v6[7]];
  *(void *)&v4[v6[8]] = *(void *)&v5[v6[8]];
  *(void *)&v4[v6[9]] = *(void *)&v5[v6[9]];
  v4[v6[10]] = v5[v6[10]];
  return a1;
}

void *assignWithCopy for MLStyleTransfer(void *a1, void *a2, uint64_t a3)
{
  *a1 = *a2;
  swift_retain();
  swift_release();
  uint64_t v4 = *(int *)(a3 + 20);
  uint64_t v5 = (char *)a1 + v4;
  uint64_t v6 = (char *)a2 + v4;
  *((unsigned char *)a1 + v4) = *((unsigned char *)a2 + v4);
  uint64_t v7 = (int *)type metadata accessor for MLStyleTransfer.ModelParameters(0);
  uint64_t v8 = v7[5];
  uint64_t v18 = v5;
  uint64_t v9 = (uint64_t)&v5[v8];
  uint64_t v10 = &v6[v8];
  uint64_t v11 = type metadata accessor for URL(0);
  __dst = (void *)v9;
  LODWORD(v9) = __swift_getEnumTagSinglePayload(v9, 1, v11);
  int EnumTagSinglePayload = __swift_getEnumTagSinglePayload((uint64_t)v10, 1, v11);
  if (v9)
  {
    if (!EnumTagSinglePayload)
    {
      (*(void (**)(void *, char *, uint64_t))(*(void *)(v11 - 8) + 16))(__dst, v10, v11);
      __swift_storeEnumTagSinglePayload((uint64_t)__dst, 0, 1, v11);
      goto LABEL_9;
    }
    size_t v13 = *(void *)(*(void *)(type metadata accessor for MLStyleTransfer.ModelParameters.ValidationData(0) - 8)
                    + 64);
    char v14 = __dst;
  }
  else
  {
    uint64_t v15 = *(void *)(v11 - 8);
    if (!EnumTagSinglePayload)
    {
      (*(void (**)(void *, char *, uint64_t))(v15 + 24))(__dst, v10, v11);
      goto LABEL_9;
    }
    (*(void (**)(void *, uint64_t))(v15 + 8))(__dst, v11);
    size_t v13 = *(void *)(*(void *)(type metadata accessor for MLStyleTransfer.ModelParameters.ValidationData(0) - 8)
                    + 64);
    char v14 = __dst;
  }
  memcpy(v14, v10, v13);
LABEL_9:
  *(void *)&v18[v7[6]] = *(void *)&v6[v7[6]];
  *(void *)&v18[v7[7]] = *(void *)&v6[v7[7]];
  *(void *)&v18[v7[8]] = *(void *)&v6[v7[8]];
  *(void *)&v18[v7[9]] = *(void *)&v6[v7[9]];
  v18[v7[10]] = v6[v7[10]];
  return a1;
}

void *initializeWithTake for MLStyleTransfer(void *a1, void *a2, uint64_t a3)
{
  *a1 = *a2;
  uint64_t v3 = *(int *)(a3 + 20);
  uint64_t v4 = (char *)a1 + v3;
  uint64_t v5 = (char *)a2 + v3;
  *((unsigned char *)a1 + v3) = *((unsigned char *)a2 + v3);
  uint64_t v6 = (int *)type metadata accessor for MLStyleTransfer.ModelParameters(0);
  uint64_t v7 = v6[5];
  __dst = &v4[v7];
  uint64_t v8 = &v5[v7];
  uint64_t v9 = type metadata accessor for URL(0);
  if (__swift_getEnumTagSinglePayload((uint64_t)v8, 1, v9))
  {
    uint64_t v10 = type metadata accessor for MLStyleTransfer.ModelParameters.ValidationData(0);
    memcpy(__dst, v8, *(void *)(*(void *)(v10 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v9 - 8) + 32))(__dst, v8, v9);
    __swift_storeEnumTagSinglePayload((uint64_t)__dst, 0, 1, v9);
  }
  *(void *)&v4[v6[6]] = *(void *)&v5[v6[6]];
  *(void *)&v4[v6[7]] = *(void *)&v5[v6[7]];
  *(void *)&v4[v6[8]] = *(void *)&v5[v6[8]];
  *(void *)&v4[v6[9]] = *(void *)&v5[v6[9]];
  v4[v6[10]] = v5[v6[10]];
  return a1;
}

void *assignWithTake for MLStyleTransfer(void *a1, void *a2, uint64_t a3)
{
  *a1 = *a2;
  swift_release();
  uint64_t v4 = *(int *)(a3 + 20);
  uint64_t v5 = (char *)a1 + v4;
  uint64_t v6 = (char *)a2 + v4;
  *((unsigned char *)a1 + v4) = *((unsigned char *)a2 + v4);
  uint64_t v7 = (int *)type metadata accessor for MLStyleTransfer.ModelParameters(0);
  uint64_t v8 = v7[5];
  uint64_t v18 = v5;
  uint64_t v9 = (uint64_t)&v5[v8];
  uint64_t v10 = &v6[v8];
  uint64_t v11 = type metadata accessor for URL(0);
  __dst = (void *)v9;
  LODWORD(v9) = __swift_getEnumTagSinglePayload(v9, 1, v11);
  int EnumTagSinglePayload = __swift_getEnumTagSinglePayload((uint64_t)v10, 1, v11);
  if (v9)
  {
    if (!EnumTagSinglePayload)
    {
      (*(void (**)(void *, char *, uint64_t))(*(void *)(v11 - 8) + 32))(__dst, v10, v11);
      __swift_storeEnumTagSinglePayload((uint64_t)__dst, 0, 1, v11);
      goto LABEL_9;
    }
    size_t v13 = *(void *)(*(void *)(type metadata accessor for MLStyleTransfer.ModelParameters.ValidationData(0) - 8)
                    + 64);
    char v14 = __dst;
  }
  else
  {
    uint64_t v15 = *(void *)(v11 - 8);
    if (!EnumTagSinglePayload)
    {
      (*(void (**)(void *, char *, uint64_t))(v15 + 40))(__dst, v10, v11);
      goto LABEL_9;
    }
    (*(void (**)(void *, uint64_t))(v15 + 8))(__dst, v11);
    size_t v13 = *(void *)(*(void *)(type metadata accessor for MLStyleTransfer.ModelParameters.ValidationData(0) - 8)
                    + 64);
    char v14 = __dst;
  }
  memcpy(v14, v10, v13);
LABEL_9:
  *(void *)&v18[v7[6]] = *(void *)&v6[v7[6]];
  *(void *)&v18[v7[7]] = *(void *)&v6[v7[7]];
  *(void *)&v18[v7[8]] = *(void *)&v6[v7[8]];
  *(void *)&v18[v7[9]] = *(void *)&v6[v7[9]];
  v18[v7[10]] = v6[v7[10]];
  return a1;
}

uint64_t getEnumTagSinglePayload for MLStyleTransfer(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_5D692);
}

uint64_t sub_5D692(void *a1, unsigned int a2, uint64_t a3)
{
  if (a2 == 0x7FFFFFFF)
  {
    uint64_t result = 0;
    if ((*a1 & 0xFFFFFFFF00000001) == 0) {
      return (*a1 >> 1) + 1;
    }
  }
  else
  {
    uint64_t v5 = type metadata accessor for MLStyleTransfer.ModelParameters(0);
    return __swift_getEnumTagSinglePayload((uint64_t)a1 + *(int *)(a3 + 20), a2, v5);
  }
  return result;
}

uint64_t storeEnumTagSinglePayload for MLStyleTransfer(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_5D70A);
}

uint64_t sub_5D70A(void *a1, unsigned int a2, int a3, uint64_t a4)
{
  if (a3 == 0x7FFFFFFF)
  {
    *a1 = 2 * (a2 - 1);
  }
  else
  {
    uint64_t v5 = type metadata accessor for MLStyleTransfer.ModelParameters(0);
    return __swift_storeEnumTagSinglePayload((uint64_t)a1 + *(int *)(a4 + 20), a2, a2, v5);
  }
  return result;
}

uint64_t type metadata completion function for MLStyleTransfer(uint64_t a1)
{
  v3[0] = (char *)&value witness table for Builtin.NativeObject + 64;
  uint64_t result = type metadata accessor for MLStyleTransfer.ModelParameters(319);
  if (v2 <= 0x3F)
  {
    v3[1] = *(void *)(result - 8) + 64;
    swift_initStructMetadata(a1, 256, 2, v3, a1 + 16);
    return 0;
  }
  return result;
}

void *initializeBufferWithCopyOfBuffer for MLStyleTransfer.DataSource(void *a1, void *a2, uint64_t a3)
{
  uint64_t v3 = a1;
  int v4 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  if ((v4 & 0x20000) != 0)
  {
    uint64_t v9 = *a2;
    *uint64_t v3 = *a2;
    uint64_t v3 = (void *)(v9 + ((v4 + 16) & ~v4));
    swift_retain();
  }
  else
  {
    uint64_t v5 = type metadata accessor for URL(0);
    uint64_t v6 = *(void (**)(void *, void *, uint64_t))(*(void *)(v5 - 8) + 16);
    v6(a1, a2, v5);
    uint64_t v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (styleImage: URL, contentDirectory: URL, processingOption: VNImageCropAndScaleOption?));
    v6((void *)((char *)a1 + *(int *)(v7 + 48)), (void *)((char *)a2 + *(int *)(v7 + 48)), v5);
    uint64_t v8 = *(int *)(v7 + 64);
    *((unsigned char *)a1 + v8 + 8) = *((unsigned char *)a2 + v8 + 8);
    *(void *)((char *)a1 + v8) = *(void *)((char *)a2 + v8);
  }
  return v3;
}

uint64_t destroy for MLStyleTransfer.DataSource(uint64_t a1)
{
  uint64_t v1 = type metadata accessor for URL(0);
  unint64_t v2 = *(void (**)(uint64_t, uint64_t))(*(void *)(v1 - 8) + 8);
  v2(a1, v1);
  uint64_t v3 = a1
     + *(int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (styleImage: URL, contentDirectory: URL, processingOption: VNImageCropAndScaleOption?))
              + 48);
  return ((uint64_t (*)(uint64_t, uint64_t))v2)(v3, v1);
}

uint64_t initializeWithCopy for MLStyleTransfer.DataSource(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = type metadata accessor for URL(0);
  uint64_t v3 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v2 - 8) + 16);
  v3(a1, a2, v2);
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (styleImage: URL, contentDirectory: URL, processingOption: VNImageCropAndScaleOption?));
  v3(a1 + *(int *)(v4 + 48), a2 + *(int *)(v4 + 48), v2);
  uint64_t v5 = *(int *)(v4 + 64);
  *(unsigned char *)(a1 + v5 + 8) = *(unsigned char *)(a2 + v5 + 8);
  *(void *)(a1 + v5) = *(void *)(a2 + v5);
  return a1;
}

uint64_t assignWithCopy for MLStyleTransfer.DataSource(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = type metadata accessor for URL(0);
  uint64_t v3 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v2 - 8) + 24);
  v3(a1, a2, v2);
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (styleImage: URL, contentDirectory: URL, processingOption: VNImageCropAndScaleOption?));
  v3(a1 + *(int *)(v4 + 48), a2 + *(int *)(v4 + 48), v2);
  uint64_t v5 = *(int *)(v4 + 64);
  *(unsigned char *)(a1 + v5 + 8) = *(unsigned char *)(a2 + v5 + 8);
  *(void *)(a1 + v5) = *(void *)(a2 + v5);
  return a1;
}

uint64_t initializeWithTake for MLStyleTransfer.DataSource(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = type metadata accessor for URL(0);
  uint64_t v3 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v2 - 8) + 32);
  v3(a1, a2, v2);
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (styleImage: URL, contentDirectory: URL, processingOption: VNImageCropAndScaleOption?));
  v3(a1 + *(int *)(v4 + 48), a2 + *(int *)(v4 + 48), v2);
  uint64_t v5 = *(int *)(v4 + 64);
  *(unsigned char *)(a1 + v5 + 8) = *(unsigned char *)(a2 + v5 + 8);
  *(void *)(a1 + v5) = *(void *)(a2 + v5);
  return a1;
}

uint64_t assignWithTake for MLStyleTransfer.DataSource(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = type metadata accessor for URL(0);
  uint64_t v3 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v2 - 8) + 40);
  v3(a1, a2, v2);
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (styleImage: URL, contentDirectory: URL, processingOption: VNImageCropAndScaleOption?));
  v3(a1 + *(int *)(v4 + 48), a2 + *(int *)(v4 + 48), v2);
  uint64_t v5 = *(int *)(v4 + 64);
  *(unsigned char *)(a1 + v5 + 8) = *(unsigned char *)(a2 + v5 + 8);
  *(void *)(a1 + v5) = *(void *)(a2 + v5);
  return a1;
}

uint64_t getEnumTagSinglePayload for MLStyleTransfer.DataSource(uint64_t a1, unsigned int a2)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (styleImage: URL, contentDirectory: URL, processingOption: VNImageCropAndScaleOption?));
  return __swift_getEnumTagSinglePayload(a1, a2, v2);
}

uint64_t storeEnumTagSinglePayload for MLStyleTransfer.DataSource(uint64_t a1, unsigned int a2, unsigned int a3)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (styleImage: URL, contentDirectory: URL, processingOption: VNImageCropAndScaleOption?));
  return __swift_storeEnumTagSinglePayload(a1, a2, a3, v4);
}

uint64_t getEnumTag for MLStyleTransfer.DataSource()
{
  return 0;
}

uint64_t type metadata completion function for MLStyleTransfer.DataSource(uint64_t a1)
{
  uint64_t result = type metadata accessor for URL(319);
  if (v2 <= 0x3F)
  {
    swift_getTupleTypeLayout3(v3, *(void *)(result - 8) + 64, *(void *)(result - 8) + 64, "\t");
    swift_initEnumMetadataSingleCase(a1, 256, v3);
    *(_DWORD *)(*(void *)(a1 - 8) + 84) = v4;
    return 0;
  }
  return result;
}

void *initializeBufferWithCopyOfBuffer for MLStyleTransfer.ModelParameters(unsigned char *a1, void *a2, int *a3)
{
  uint64_t v3 = a1;
  int v4 = *(_DWORD *)(*((void *)a3 - 1) + 80);
  if ((v4 & 0x20000) != 0)
  {
    uint64_t v10 = *a2;
    *uint64_t v3 = *a2;
    uint64_t v3 = (void *)(v10 + ((v4 + 16) & ~v4));
    swift_retain();
  }
  else
  {
    *a1 = *(unsigned char *)a2;
    uint64_t v6 = a3[5];
    __dst = &a1[v6];
    uint64_t v7 = (char *)a2 + v6;
    uint64_t v8 = type metadata accessor for URL(0);
    if (__swift_getEnumTagSinglePayload((uint64_t)v7, 1, v8))
    {
      uint64_t v9 = type metadata accessor for MLStyleTransfer.ModelParameters.ValidationData(0);
      memcpy(__dst, v7, *(void *)(*(void *)(v9 - 8) + 64));
    }
    else
    {
      (*(void (**)(unsigned char *, char *, uint64_t))(*(void *)(v8 - 8) + 16))(__dst, v7, v8);
      __swift_storeEnumTagSinglePayload((uint64_t)__dst, 0, 1, v8);
    }
    *(void *)&a1[a3[6]] = *(void *)((char *)a2 + a3[6]);
    *(void *)&a1[a3[7]] = *(void *)((char *)a2 + a3[7]);
    *(void *)&a1[a3[8]] = *(void *)((char *)a2 + a3[8]);
    *(void *)&a1[a3[9]] = *(void *)((char *)a2 + a3[9]);
    a1[a3[10]] = *((unsigned char *)a2 + a3[10]);
  }
  return v3;
}

uint64_t destroy for MLStyleTransfer.ModelParameters(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = a1 + *(int *)(a2 + 20);
  uint64_t v3 = type metadata accessor for URL(0);
  uint64_t result = __swift_getEnumTagSinglePayload(v2, 1, v3);
  if (!result) {
    return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(v2, v3);
  }
  return result;
}

unsigned char *initializeWithCopy for MLStyleTransfer.ModelParameters(unsigned char *a1, unsigned char *a2, int *a3)
{
  *a1 = *a2;
  uint64_t v4 = a3[5];
  __dst = &a1[v4];
  uint64_t v5 = &a2[v4];
  uint64_t v6 = type metadata accessor for URL(0);
  if (__swift_getEnumTagSinglePayload((uint64_t)v5, 1, v6))
  {
    uint64_t v7 = type metadata accessor for MLStyleTransfer.ModelParameters.ValidationData(0);
    memcpy(__dst, v5, *(void *)(*(void *)(v7 - 8) + 64));
  }
  else
  {
    (*(void (**)(unsigned char *, unsigned char *, uint64_t))(*(void *)(v6 - 8) + 16))(__dst, v5, v6);
    __swift_storeEnumTagSinglePayload((uint64_t)__dst, 0, 1, v6);
  }
  *(void *)&a1[a3[6]] = *(void *)&a2[a3[6]];
  *(void *)&a1[a3[7]] = *(void *)&a2[a3[7]];
  *(void *)&a1[a3[8]] = *(void *)&a2[a3[8]];
  *(void *)&a1[a3[9]] = *(void *)&a2[a3[9]];
  a1[a3[10]] = a2[a3[10]];
  return a1;
}

unsigned char *assignWithCopy for MLStyleTransfer.ModelParameters(unsigned char *a1, unsigned char *a2, int *a3)
{
  *a1 = *a2;
  uint64_t v4 = a3[5];
  uint64_t v5 = (uint64_t)&a1[v4];
  uint64_t v6 = &a2[v4];
  uint64_t v7 = type metadata accessor for URL(0);
  __dst = (void *)v5;
  LODWORD(v5) = __swift_getEnumTagSinglePayload(v5, 1, v7);
  int EnumTagSinglePayload = __swift_getEnumTagSinglePayload((uint64_t)v6, 1, v7);
  if (v5)
  {
    if (!EnumTagSinglePayload)
    {
      (*(void (**)(void *, unsigned char *, uint64_t))(*(void *)(v7 - 8) + 16))(__dst, v6, v7);
      __swift_storeEnumTagSinglePayload((uint64_t)__dst, 0, 1, v7);
      goto LABEL_9;
    }
    size_t v9 = *(void *)(*(void *)(type metadata accessor for MLStyleTransfer.ModelParameters.ValidationData(0) - 8)
                   + 64);
    uint64_t v10 = __dst;
  }
  else
  {
    uint64_t v11 = *(void *)(v7 - 8);
    if (!EnumTagSinglePayload)
    {
      (*(void (**)(void *, unsigned char *, uint64_t))(v11 + 24))(__dst, v6, v7);
      goto LABEL_9;
    }
    (*(void (**)(void *, uint64_t))(v11 + 8))(__dst, v7);
    size_t v9 = *(void *)(*(void *)(type metadata accessor for MLStyleTransfer.ModelParameters.ValidationData(0) - 8)
                   + 64);
    uint64_t v10 = __dst;
  }
  memcpy(v10, v6, v9);
LABEL_9:
  *(void *)&a1[a3[6]] = *(void *)&a2[a3[6]];
  *(void *)&a1[a3[7]] = *(void *)&a2[a3[7]];
  *(void *)&a1[a3[8]] = *(void *)&a2[a3[8]];
  *(void *)&a1[a3[9]] = *(void *)&a2[a3[9]];
  a1[a3[10]] = a2[a3[10]];
  return a1;
}

unsigned char *initializeWithTake for MLStyleTransfer.ModelParameters(unsigned char *a1, unsigned char *a2, int *a3)
{
  *a1 = *a2;
  uint64_t v4 = a3[5];
  __dst = &a1[v4];
  uint64_t v5 = &a2[v4];
  uint64_t v6 = type metadata accessor for URL(0);
  if (__swift_getEnumTagSinglePayload((uint64_t)v5, 1, v6))
  {
    uint64_t v7 = type metadata accessor for MLStyleTransfer.ModelParameters.ValidationData(0);
    memcpy(__dst, v5, *(void *)(*(void *)(v7 - 8) + 64));
  }
  else
  {
    (*(void (**)(unsigned char *, unsigned char *, uint64_t))(*(void *)(v6 - 8) + 32))(__dst, v5, v6);
    __swift_storeEnumTagSinglePayload((uint64_t)__dst, 0, 1, v6);
  }
  *(void *)&a1[a3[6]] = *(void *)&a2[a3[6]];
  *(void *)&a1[a3[7]] = *(void *)&a2[a3[7]];
  *(void *)&a1[a3[8]] = *(void *)&a2[a3[8]];
  *(void *)&a1[a3[9]] = *(void *)&a2[a3[9]];
  a1[a3[10]] = a2[a3[10]];
  return a1;
}

unsigned char *assignWithTake for MLStyleTransfer.ModelParameters(unsigned char *a1, unsigned char *a2, int *a3)
{
  *a1 = *a2;
  uint64_t v4 = a3[5];
  uint64_t v5 = (uint64_t)&a1[v4];
  uint64_t v6 = &a2[v4];
  uint64_t v7 = type metadata accessor for URL(0);
  __dst = (void *)v5;
  LODWORD(v5) = __swift_getEnumTagSinglePayload(v5, 1, v7);
  int EnumTagSinglePayload = __swift_getEnumTagSinglePayload((uint64_t)v6, 1, v7);
  if (v5)
  {
    if (!EnumTagSinglePayload)
    {
      (*(void (**)(void *, unsigned char *, uint64_t))(*(void *)(v7 - 8) + 32))(__dst, v6, v7);
      __swift_storeEnumTagSinglePayload((uint64_t)__dst, 0, 1, v7);
      goto LABEL_9;
    }
    size_t v9 = *(void *)(*(void *)(type metadata accessor for MLStyleTransfer.ModelParameters.ValidationData(0) - 8)
                   + 64);
    uint64_t v10 = __dst;
  }
  else
  {
    uint64_t v11 = *(void *)(v7 - 8);
    if (!EnumTagSinglePayload)
    {
      (*(void (**)(void *, unsigned char *, uint64_t))(v11 + 40))(__dst, v6, v7);
      goto LABEL_9;
    }
    (*(void (**)(void *, uint64_t))(v11 + 8))(__dst, v7);
    size_t v9 = *(void *)(*(void *)(type metadata accessor for MLStyleTransfer.ModelParameters.ValidationData(0) - 8)
                   + 64);
    uint64_t v10 = __dst;
  }
  memcpy(v10, v6, v9);
LABEL_9:
  *(void *)&a1[a3[6]] = *(void *)&a2[a3[6]];
  *(void *)&a1[a3[7]] = *(void *)&a2[a3[7]];
  *(void *)&a1[a3[8]] = *(void *)&a2[a3[8]];
  *(void *)&a1[a3[9]] = *(void *)&a2[a3[9]];
  a1[a3[10]] = a2[a3[10]];
  return a1;
}

uint64_t getEnumTagSinglePayload for MLStyleTransfer.ModelParameters(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_5E0BE);
}

uint64_t sub_5E0BE(unsigned __int8 *a1, unsigned int a2, uint64_t a3)
{
  if (a2 == 254)
  {
    unsigned int v3 = *a1;
    uint64_t result = 0;
    if (v3 >= 2) {
      return v3 - 1;
    }
  }
  else
  {
    uint64_t v6 = type metadata accessor for MLStyleTransfer.ModelParameters.ValidationData(0);
    return __swift_getEnumTagSinglePayload((uint64_t)&a1[*(int *)(a3 + 20)], a2, v6);
  }
  return result;
}

uint64_t storeEnumTagSinglePayload for MLStyleTransfer.ModelParameters(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_5E128);
}

uint64_t sub_5E128(unsigned char *a1, unsigned int a2, int a3, uint64_t a4)
{
  if (a3 == 254)
  {
    *a1 = a2 + 1;
  }
  else
  {
    uint64_t v5 = type metadata accessor for MLStyleTransfer.ModelParameters.ValidationData(0);
    return __swift_storeEnumTagSinglePayload((uint64_t)&a1[*(int *)(a4 + 20)], a2, a2, v5);
  }
  return result;
}

uint64_t type metadata completion function for MLStyleTransfer.ModelParameters(uint64_t a1)
{
  v3[0] = &unk_347C70;
  uint64_t result = type metadata accessor for MLStyleTransfer.ModelParameters.ValidationData(319);
  if (v2 <= 0x3F)
  {
    v3[1] = *(void *)(result - 8) + 64;
    v3[2] = (char *)&value witness table for Builtin.Int64 + 64;
    void v3[3] = (char *)&value witness table for Builtin.Int64 + 64;
    void v3[4] = (char *)&value witness table for Builtin.Int64 + 64;
    uint64_t v3[5] = (char *)&value witness table for Builtin.Int64 + 64;
    v3[6] = &unk_347C70;
    swift_initStructMetadata(a1, 256, 7, v3, a1 + 16);
    return 0;
  }
  return result;
}

uint64_t *initializeBufferWithCopyOfBuffer for MLStyleTransfer.ModelParameters.ValidationData(uint64_t *__dst, uint64_t *__src, uint64_t a3)
{
  unsigned int v3 = __dst;
  uint64_t v4 = *(void *)(a3 - 8);
  int v5 = *(_DWORD *)(v4 + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v7 = *__src;
    *unsigned int v3 = *__src;
    unsigned int v3 = (uint64_t *)(v7 + ((v5 + 16) & ~v5));
    swift_retain();
  }
  else
  {
    uint64_t v6 = type metadata accessor for URL(0);
    if (__swift_getEnumTagSinglePayload((uint64_t)__src, 1, v6))
    {
      memcpy(__dst, __src, *(void *)(v4 + 64));
    }
    else
    {
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(void *)(v6 - 8) + 16))(__dst, __src, v6);
      __swift_storeEnumTagSinglePayload((uint64_t)__dst, 0, 1, v6);
    }
  }
  return v3;
}

uint64_t destroy for MLStyleTransfer.ModelParameters.ValidationData(uint64_t a1)
{
  uint64_t v1 = type metadata accessor for URL(0);
  uint64_t result = __swift_getEnumTagSinglePayload(a1, 1, v1);
  if (!result) {
    return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v1 - 8) + 8))(a1, v1);
  }
  return result;
}

void *initializeWithCopy for MLStyleTransfer.ModelParameters.ValidationData(void *__dst, void *__src, uint64_t a3)
{
  uint64_t v4 = type metadata accessor for URL(0);
  if (__swift_getEnumTagSinglePayload((uint64_t)__src, 1, v4))
  {
    memcpy(__dst, __src, *(void *)(*(void *)(a3 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, void *, uint64_t))(*(void *)(v4 - 8) + 16))(__dst, __src, v4);
    __swift_storeEnumTagSinglePayload((uint64_t)__dst, 0, 1, v4);
  }
  return __dst;
}

void *assignWithCopy for MLStyleTransfer.ModelParameters.ValidationData(void *__dst, void *__src, uint64_t a3)
{
  uint64_t v3 = type metadata accessor for URL(0);
  int EnumTagSinglePayload = __swift_getEnumTagSinglePayload((uint64_t)__dst, 1, v3);
  int v5 = __swift_getEnumTagSinglePayload((uint64_t)__src, 1, v3);
  if (!EnumTagSinglePayload)
  {
    uint64_t v6 = *(void *)(v3 - 8);
    if (!v5)
    {
      (*(void (**)(void *, void *, uint64_t))(v6 + 24))(__dst, __src, v3);
      return __dst;
    }
    (*(void (**)(void *, uint64_t))(v6 + 8))(__dst, v3);
    goto LABEL_6;
  }
  if (v5)
  {
LABEL_6:
    memcpy(__dst, __src, *(void *)(*(void *)(a3 - 8) + 64));
    return __dst;
  }
  (*(void (**)(void *, void *, uint64_t))(*(void *)(v3 - 8) + 16))(__dst, __src, v3);
  __swift_storeEnumTagSinglePayload((uint64_t)__dst, 0, 1, v3);
  return __dst;
}

void *initializeWithTake for MLStyleTransfer.ModelParameters.ValidationData(void *__dst, void *__src, uint64_t a3)
{
  uint64_t v4 = type metadata accessor for URL(0);
  if (__swift_getEnumTagSinglePayload((uint64_t)__src, 1, v4))
  {
    memcpy(__dst, __src, *(void *)(*(void *)(a3 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, void *, uint64_t))(*(void *)(v4 - 8) + 32))(__dst, __src, v4);
    __swift_storeEnumTagSinglePayload((uint64_t)__dst, 0, 1, v4);
  }
  return __dst;
}

void *assignWithTake for MLStyleTransfer.ModelParameters.ValidationData(void *__dst, void *__src, uint64_t a3)
{
  uint64_t v3 = type metadata accessor for URL(0);
  int EnumTagSinglePayload = __swift_getEnumTagSinglePayload((uint64_t)__dst, 1, v3);
  int v5 = __swift_getEnumTagSinglePayload((uint64_t)__src, 1, v3);
  if (!EnumTagSinglePayload)
  {
    uint64_t v6 = *(void *)(v3 - 8);
    if (!v5)
    {
      (*(void (**)(void *, void *, uint64_t))(v6 + 40))(__dst, __src, v3);
      return __dst;
    }
    (*(void (**)(void *, uint64_t))(v6 + 8))(__dst, v3);
    goto LABEL_6;
  }
  if (v5)
  {
LABEL_6:
    memcpy(__dst, __src, *(void *)(*(void *)(a3 - 8) + 64));
    return __dst;
  }
  (*(void (**)(void *, void *, uint64_t))(*(void *)(v3 - 8) + 32))(__dst, __src, v3);
  __swift_storeEnumTagSinglePayload((uint64_t)__dst, 0, 1, v3);
  return __dst;
}

uint64_t getEnumTagSinglePayload for MLStyleTransfer.ModelParameters.ValidationData(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_5E529);
}

uint64_t sub_5E529(uint64_t a1, unsigned int a2)
{
  uint64_t v2 = type metadata accessor for URL(0);
  unsigned int EnumTagSinglePayload = __swift_getEnumTagSinglePayload(a1, a2, v2);
  unsigned int v4 = EnumTagSinglePayload - 1;
  if (EnumTagSinglePayload < 2) {
    return 0;
  }
  return v4;
}

uint64_t storeEnumTagSinglePayload for MLStyleTransfer.ModelParameters.ValidationData(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_5E577);
}

uint64_t sub_5E577(uint64_t a1, unsigned int a2, unsigned int a3)
{
  unsigned int v4 = a2;
  if (a2) {
    unsigned int v4 = a2 + 1;
  }
  uint64_t v5 = type metadata accessor for URL(0);
  return __swift_storeEnumTagSinglePayload(a1, v4, a3, v5);
}

uint64_t getEnumTag for MLStyleTransfer.ModelParameters.ValidationData(uint64_t a1)
{
  uint64_t v1 = type metadata accessor for URL(0);
  return __swift_getEnumTagSinglePayload(a1, 1, v1);
}

uint64_t destructiveInjectEnumTag for MLStyleTransfer.ModelParameters.ValidationData(uint64_t a1, unsigned int a2)
{
  uint64_t v2 = type metadata accessor for URL(0);
  return __swift_storeEnumTagSinglePayload(a1, a2, 1, v2);
}

uint64_t type metadata completion function for MLStyleTransfer.ModelParameters.ValidationData(uint64_t a1)
{
  uint64_t result = type metadata accessor for URL(319);
  if (v2 <= 0x3F)
  {
    swift_initEnumMetadataSinglePayload(a1, 256, *(void *)(result - 8) + 64, 1);
    return 0;
  }
  return result;
}

uint64_t storeEnumTagSinglePayload for MLStyleTransfer.ModelParameters.ModelAlgorithmType(unsigned char *a1, unsigned int a2, unsigned int a3)
{
  LODWORD(result) = 0;
  if (a3 >= 0xFF)
  {
    unsigned int v4 = a3 + 1;
    LODWORD(result) = 1;
    if (v4 >= 0xFF00) {
      LODWORD(result) = 2 * (v4 >= 0xFFFF00) + 2;
    }
  }
  if (a2 > 0xFE)
  {
    unsigned int v5 = a2 - 255;
    int v6 = (v5 >> 8) + 1;
    *a1 = v5;
    uint64_t result = result;
    switch((int)result)
    {
      case 0:
        return result;
      case 1:
        a1[1] = v6;
        break;
      case 2:
        *(_WORD *)(a1 + 1) = v6;
        break;
      case 3:
LABEL_16:
        BUG();
      case 4:
        *(_DWORD *)(a1 + 1) = v6;
        break;
    }
  }
  else
  {
    uint64_t result = result;
    switch((int)result)
    {
      case 0:
        goto LABEL_11;
      case 1:
        a1[1] = 0;
        goto LABEL_11;
      case 2:
        *(_WORD *)(a1 + 1) = 0;
        goto LABEL_11;
      case 3:
        goto LABEL_16;
      case 4:
        *(_DWORD *)(a1 + 1) = 0;
LABEL_11:
        if (a2) {
          *a1 = a2 + 1;
        }
        break;
      case 5:
        JUMPOUT(0x5E6FCLL);
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for MLStyleTransfer.ModelParameters.ModelAlgorithmType()
{
  return &type metadata for MLStyleTransfer.ModelParameters.ModelAlgorithmType;
}

uint64_t specialized _NativeDictionary._insert(at:key:value:)(unint64_t a1, long long *a2, long long *a3, void *a4)
{
  a4[(a1 >> 6) + 8] |= 1 << a1;
  uint64_t v6 = a4[6];
  uint64_t v7 = 40 * a1;
  *(void *)(v6 + v7 + 32) = *((void *)a2 + 4);
  long long v8 = *a2;
  *(_OWORD *)(v6 + v7 + 16) = a2[1];
  *(_OWORD *)(v6 + v7) = v8;
  outlined init with take of Any(a3, (_OWORD *)(a4[7] + 32 * a1));
  uint64_t v9 = a4[2];
  BOOL v10 = __OFADD__(1, v9);
  uint64_t result = v9 + 1;
  if (v10) {
    BUG();
  }
  a4[2] = result;
  return result;
}

uint64_t specialized _NativeDictionary._insert(at:key:value:)(unint64_t a1, char a2, long long *a3, void *a4)
{
  a4[(a1 >> 6) + 8] |= 1 << a1;
  *(unsigned char *)(a4[6] + a1) = a2;
  outlined init with take of Any(a3, (_OWORD *)(a4[7] + 32 * a1));
  uint64_t v5 = a4[2];
  BOOL v6 = __OFADD__(1, v5);
  uint64_t result = v5 + 1;
  if (v6) {
    BUG();
  }
  a4[2] = result;
  return result;
}

uint64_t specialized _NativeDictionary.merge<A>(_:isUnique:uniquingKeysWith:)(uint64_t a1, uint64_t a2, uint64_t a3, unsigned __int8 a4, void *a5)
{
  specialized LazyMapSequence.makeIterator()(a1, a2, a3);
  char v34 = a1;
  swift_bridgeObjectRetain(a1);
  swift_retain();
  uint64_t v6 = specialized LazyMapSequence.Iterator.next()(a3);
  if (v7)
  {
    uint64_t v10 = v6;
    uint64_t v11 = v7;
    do
    {
      uint64_t v33 = v8;
      uint64_t v35 = v9;
      uint64_t v12 = (void *)*a5;
      uint64_t v36 = v10;
      unint64_t v14 = specialized __RawDictionaryStorage.find<A>(_:)(v10, v11);
      BOOL v15 = (v13 & 1) == 0;
      BOOL v16 = __OFADD__(v12[2], v15);
      uint64_t v17 = v12[2] + v15;
      if (v16) {
        BUG();
      }
      char v18 = v13;
      if (v12[3] >= v17)
      {
        if ((a4 & 1) == 0)
        {
          uint64_t v17 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _NativeDictionary<String, String>);
          _NativeDictionary.copy()();
        }
      }
      else
      {
        specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v17, a4);
        uint64_t v17 = v36;
        unint64_t v14 = specialized __RawDictionaryStorage.find<A>(_:)(v36, v11);
        if ((v18 & 1) != (v19 & 1))
        {
          KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(&type metadata for String);
          BUG();
        }
      }
      uint64_t v20 = (void *)*a5;
      if (v18)
      {
        uint64_t v21 = v20[7];
        uint64_t v22 = 16 * v14;
        uint64_t v39 = *(void *)(v21 + v22);
        uint64_t v23 = *(void *)(v21 + v22 + 8);
        swift_bridgeObjectRetain(v23);
        swift_bridgeObjectRelease(v11);
        swift_bridgeObjectRelease(v35);
        uint64_t v24 = v20[7];
        uint64_t v17 = *(void *)(v24 + v22 + 8);
        swift_bridgeObjectRelease(v17);
        *(void *)(v24 + v22) = v39;
        *(void *)(v24 + v22 + 8) = v23;
      }
      else
      {
        v20[(v14 >> 6) + 8] |= 1 << v14;
        uint64_t v25 = v20[6];
        uint64_t v26 = 16 * v14;
        *(void *)(v25 + v26) = v36;
        *(void *)(v25 + v26 + 8) = v11;
        uint64_t v27 = v20[7];
        *(void *)(v27 + v26) = v33;
        *(void *)(v27 + v26 + 8) = v35;
        uint64_t v28 = v20[2];
        BOOL v16 = __OFADD__(1, v28);
        uint64_t v29 = v28 + 1;
        if (v16) {
          BUG();
        }
        void v20[2] = v29;
      }
      uint64_t v10 = specialized LazyMapSequence.Iterator.next()(v17);
      uint64_t v11 = v30;
      a4 = 1;
    }
    while (v30);
  }
  swift_bridgeObjectRelease(v34);
  swift_release();
  outlined consume of [String : [Int]].Iterator._Variant(v32);
  return swift_release();
}

{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  char v12;
  unint64_t v13;
  BOOL v14;
  BOOL v15;
  uint64_t v16;
  char v17;
  char v18;
  void *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v28;
  char v29;
  uint64_t v30;
  uint64_t v31;

  specialized LazyMapSequence.makeIterator()(a1, a2, a3);
  uint64_t v29 = a1;
  swift_bridgeObjectRetain(a1);
  swift_retain();
  uint64_t v6 = specialized LazyMapSequence.Iterator.next()(a3);
  if (v7)
  {
    uint64_t v9 = v6;
    uint64_t v10 = v7;
    do
    {
      uint64_t v30 = v8;
      uint64_t v11 = (void *)*a5;
      uint64_t v31 = v9;
      char v13 = specialized __RawDictionaryStorage.find<A>(_:)(v9, v10);
      unint64_t v14 = (v12 & 1) == 0;
      BOOL v15 = __OFADD__(v11[2], v14);
      BOOL v16 = v11[2] + v14;
      if (v15) {
        BUG();
      }
      uint64_t v17 = v12;
      if (v11[3] >= v16)
      {
        if ((a4 & 1) == 0)
        {
          BOOL v16 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _NativeDictionary<String, [Double]>);
          _NativeDictionary.copy()();
        }
      }
      else
      {
        specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v16, a4);
        BOOL v16 = v31;
        char v13 = specialized __RawDictionaryStorage.find<A>(_:)(v31, v10);
        if ((v17 & 1) != (v18 & 1))
        {
          KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(&type metadata for String);
          BUG();
        }
      }
      char v19 = (void *)*a5;
      if (v17)
      {
        uint64_t v20 = *(void *)(v19[7] + 8 * v13);
        swift_bridgeObjectRetain(v20);
        swift_bridgeObjectRelease(v10);
        swift_bridgeObjectRelease(v30);
        uint64_t v21 = v19[7];
        BOOL v16 = *(void *)(v21 + 8 * v13);
        swift_bridgeObjectRelease(v16);
        *(void *)(v21 + 8 * v13) = v20;
      }
      else
      {
        v19[(v13 >> 6) + 8] |= 1 << v13;
        uint64_t v22 = v19[6];
        uint64_t v23 = 16 * v13;
        *(void *)(v22 + v23) = v31;
        *(void *)(v22 + v23 + 8) = v10;
        *(void *)(v19[7] + 8 * v13) = v30;
        uint64_t v24 = v19[2];
        BOOL v15 = __OFADD__(1, v24);
        uint64_t v25 = v24 + 1;
        if (v15) {
          BUG();
        }
        void v19[2] = v25;
      }
      uint64_t v9 = specialized LazyMapSequence.Iterator.next()(v16);
      uint64_t v10 = v26;
      a4 = 1;
    }
    while (v26);
  }
  swift_bridgeObjectRelease(v29);
  swift_release();
  outlined consume of [String : [Int]].Iterator._Variant(v28);
  return swift_release();
}

{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void *v12;
  char v13;
  unint64_t v14;
  BOOL v15;
  BOOL v16;
  uint64_t v17;
  char v18;
  char v19;
  void *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v30;
  char v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;

  specialized LazyMapSequence.makeIterator()(a1, a2, a3);
  uint64_t v31 = a1;
  swift_bridgeObjectRetain(a1);
  swift_retain();
  uint64_t v6 = specialized LazyMapSequence.Iterator.next()(a3);
  if (v7)
  {
    uint64_t v10 = v6;
    uint64_t v11 = v7;
    do
    {
      uint64_t v33 = v9;
      uint64_t v32 = v8;
      uint64_t v12 = (void *)*a5;
      char v34 = v10;
      unint64_t v14 = specialized __RawDictionaryStorage.find<A>(_:)(v10, v11);
      BOOL v15 = (v13 & 1) == 0;
      BOOL v16 = __OFADD__(v12[2], v15);
      uint64_t v17 = v12[2] + v15;
      if (v16) {
        BUG();
      }
      char v18 = v13;
      if (v12[3] >= v17)
      {
        if ((a4 & 1) == 0)
        {
          uint64_t v17 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _NativeDictionary<String, String>);
          _NativeDictionary.copy()();
        }
      }
      else
      {
        specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v17, a4);
        uint64_t v17 = v34;
        unint64_t v14 = specialized __RawDictionaryStorage.find<A>(_:)(v34, v11);
        if ((v18 & 1) != (v19 & 1))
        {
          KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(&type metadata for String);
          BUG();
        }
      }
      uint64_t v20 = (void *)*a5;
      if (v18)
      {
        swift_bridgeObjectRelease(v11);
        uint64_t v21 = v20[7];
        uint64_t v22 = 16 * v14;
        uint64_t v17 = *(void *)(v21 + v22 + 8);
        swift_bridgeObjectRelease(v17);
        *(void *)(v21 + v22) = v32;
        *(void *)(v21 + v22 + 8) = v33;
      }
      else
      {
        v20[(v14 >> 6) + 8] |= 1 << v14;
        uint64_t v23 = v20[6];
        uint64_t v24 = 16 * v14;
        *(void *)(v23 + v24) = v34;
        *(void *)(v23 + v24 + 8) = v11;
        uint64_t v25 = v20[7];
        *(void *)(v25 + v24) = v32;
        *(void *)(v25 + v24 + 8) = v33;
        uint64_t v26 = v20[2];
        BOOL v16 = __OFADD__(1, v26);
        uint64_t v27 = v26 + 1;
        if (v16) {
          BUG();
        }
        void v20[2] = v27;
      }
      uint64_t v10 = specialized LazyMapSequence.Iterator.next()(v17);
      uint64_t v11 = v28;
      a4 = 1;
    }
    while (v28);
  }
  swift_bridgeObjectRelease(v31);
  swift_release();
  outlined consume of [String : [Int]].Iterator._Variant(v30);
  return swift_release();
}

uint64_t outlined init with take of (key: URL, value: CIImage)?(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (key: URL, value: CIImage)?);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v2 - 8) + 32))(a2, a1, v2);
  return a2;
}

uint64_t sub_5EA6D()
{
  uint64_t v1 = type metadata accessor for MLStyleTransfer.PersistentParameters(0);
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v11 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v3 = ~*(unsigned __int8 *)(v2 + 80) & (v11 + 40);
  uint64_t v12 = *(void *)(v2 + 64);
  swift_unknownObjectRelease(*(void *)(v0 + 16));
  swift_release();
  uint64_t v10 = v0;
  uint64_t v4 = v3 + v0;
  uint64_t v5 = type metadata accessor for URL(0);
  uint64_t v6 = *(void (**)(uint64_t, uint64_t))(*(void *)(v5 - 8) + 8);
  v6(v4, v5);
  uint64_t v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (styleImage: URL, contentDirectory: URL, processingOption: VNImageCropAndScaleOption?));
  v6(v4 + *(int *)(v7 + 48), v5);
  uint64_t v8 = v4 + *(int *)(v1 + 24);
  if (!__swift_getEnumTagSinglePayload(v8, 1, v5)) {
    v6(v8, v5);
  }
  swift_release();
  return swift_deallocObject(v10, ((v12 + v3 + 7) & 0xFFFFFFFFFFFFFFF8) + 16, v11 | 7);
}

uint64_t partial apply for closure #1 in closure #1 in closure #1 in static MLStyleTransfer.resume(_:)(uint64_t a1)
{
  uint64_t v3 = *(void *)(type metadata accessor for MLStyleTransfer.PersistentParameters(0) - 8);
  uint64_t v4 = ~*(unsigned __int8 *)(v3 + 80) & (*(unsigned __int8 *)(v3 + 80) + 40);
  unint64_t v5 = (v4 + *(void *)(v3 + 64) + 7) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v6 = v1[2];
  uint64_t v12 = v1[3];
  uint64_t v13 = v1[4];
  uint64_t v7 = (uint64_t)v1 + v4;
  uint64_t v8 = *(void *)((char *)v1 + v5);
  uint64_t v9 = *(void *)((char *)v1 + v5 + 8);
  uint64_t v10 = (void *)swift_task_alloc(dword_3A50B4);
  *(void *)(v2 + 16) = v10;
  void *v10 = v2;
  v10[1] = partial apply for specialized closure #1 in blockAwait<A>(_:);
  return closure #1 in closure #1 in closure #1 in static MLStyleTransfer.resume(_:)(a1, v6, v12, v13, v7, v8, v9);
}

uint64_t partial apply for closure #1 in closure #1 in closure #1 in closure #1 in static MLStyleTransfer.resume(_:)(uint64_t a1)
{
  uint64_t v3 = *(void *)(v1 + 16);
  uint64_t v4 = *(void *)(v1 + 24);
  unint64_t v5 = (void *)swift_task_alloc(dword_3A50C4);
  *(void *)(v2 + 16) = v5;
  *unint64_t v5 = v2;
  v5[1] = partial apply for closure #1 in closure #1 in closure #1 in closure #1 in static MLStyleTransfer.resume(_:);
  return closure #1 in closure #1 in closure #1 in closure #1 in static MLStyleTransfer.resume(_:)(a1, v3, v4);
}

uint64_t partial apply for specialized closure #1 in _StringGuts.withCString<A>(_:)(uint64_t a1, uint64_t a2)
{
  return specialized closure #1 in _StringGuts.withCString<A>(_:)(a1, a2, *(uint64_t (**)(void))(v2 + 16));
}

uint64_t partial apply for closure #1 in closure #1 in closure #1 in closure #1 in static MLStyleTransfer.resume(_:)()
{
  return partial apply for closure #1 in MLActivityClassifier.init(trainingData:featureColumns:labelColumn:recordingFileColumn:parameters:)();
}

void *_sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lF11TabularData9AnyColumnV_Say8CreateML16MLObjectDetectorV19DecodableAnnotationVGSgsAE_pTg503_s8h4ML16jk3V10e36SourceO23unpackAnnotationsColumnySayu4AC19lm7VGSgG07d4E003F18I0VKFZAJypSgKXEfU_10Foundation11JSONDecoderCTf1cn_n()
{
  uint64_t v1 = type metadata accessor for AnyColumn(0);
  uint64_t v2 = lazy protocol witness table accessor for type AnyColumn and conformance AnyColumn();
  uint64_t v3 = dispatch thunk of Collection.count.getter(v1, v2);
  if (!v3)
  {
    swift_release();
    return _swiftEmptyArrayStorage;
  }
  uint64_t v39 = _swiftEmptyArrayStorage;
  int64_t v4 = 0;
  if (v3 > 0) {
    int64_t v4 = v3;
  }
  uint64_t v34 = v3;
  specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v4, 0);
  uint64_t v36 = v2;
  dispatch thunk of Collection.startIndex.getter(v1, v2);
  uint64_t v5 = v34;
  if (v34 < 0) {
    BUG();
  }
  uint64_t v32 = v1;
  while (1)
  {
    BOOL v6 = v5 == 0;
    uint64_t v7 = v5 - 1;
    if (v6) {
      BUG();
    }
    uint64_t v35 = v7;
    uint64_t v8 = (void (*)(long long *, void))dispatch thunk of Collection.subscript.read(&v42, v38, v1, v36);
    outlined init with copy of Either<LogisticRegressionClassifier<Float, String>, FullyConnectedNetworkClassifier<Float, String>>(v9, (uint64_t)v41, &demangling cache variable for type metadata for Any?);
    v8(&v42, 0);
    outlined init with copy of Either<LogisticRegressionClassifier<Float, String>, FullyConnectedNetworkClassifier<Float, String>>((uint64_t)v41, (uint64_t)v40, &demangling cache variable for type metadata for Any?);
    if (!v40[3])
    {
      outlined destroy of Either<LogisticRegressionClassifier<Float, String>, FullyConnectedNetworkClassifier<Float, String>>((uint64_t)v40, &demangling cache variable for type metadata for Any?);
      id v11 = 0;
      goto LABEL_14;
    }
    outlined init with take of Any((long long *)v40, &v42);
    outlined init with copy of Any((uint64_t)&v42, (uint64_t)v40);
    uint64_t v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [MLObjectDetector.DecodableAnnotation]);
    if (swift_dynamicCast(&v37, v40, (char *)&type metadata for Any + 8, v10, 6))
    {
      id v11 = v37;
      __swift_destroy_boxed_opaque_existential_1Tm(&v42);
      goto LABEL_14;
    }
    uint64_t v12 = v10;
    id v33 = (id)objc_opt_self(NSJSONSerialization);
    uint64_t v13 = v43;
    unint64_t v14 = __swift_project_boxed_opaque_existential_0Tm(&v42, v43);
    uint64_t v15 = _bridgeAnythingToObjectiveC<A>(_:)(v14, v13);
    v40[0] = 0;
    id v16 = [v33 dataWithJSONObject:v15 options:0 error:v40];
    id v17 = v16;
    swift_unknownObjectRelease(v15);
    id v18 = v40[0];
    if (!v17) {
      break;
    }
    uint64_t v19 = static Data._unconditionallyBridgeFromObjectiveC(_:)(v17);
    unint64_t v21 = v20;

    uint64_t v22 = lazy protocol witness table accessor for type [MLObjectDetector.DecodableAnnotation] and conformance <A> [A]();
    dispatch thunk of JSONDecoder.decode<A>(_:from:)(v12, v19, v21, v12, v22);
    outlined consume of Data._Representation(v19, v21);
    __swift_destroy_boxed_opaque_existential_1Tm(&v42);
    if (v0) {
      goto LABEL_22;
    }
    id v11 = v40[0];
LABEL_14:
    outlined destroy of Either<LogisticRegressionClassifier<Float, String>, FullyConnectedNetworkClassifier<Float, String>>((uint64_t)v41, &demangling cache variable for type metadata for Any?);
    uint64_t v23 = v39;
    if (!swift_isUniquelyReferenced_nonNull_native(v39))
    {
      specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v23[2] + 1, 1);
      uint64_t v23 = v39;
    }
    uint64_t v24 = v36;
    unint64_t v25 = v23[2];
    if (v23[3] >> 1 <= v25)
    {
      specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v23[3] >= 2uLL, v25 + 1, 1);
      uint64_t v24 = v36;
      uint64_t v23 = v39;
    }
    uint64_t v23[2] = v25 + 1;
    v23[v25 + 4] = v11;
    uint64_t v1 = v32;
    dispatch thunk of Collection.formIndex(after:)(v38, v32, v24);
    uint64_t v5 = v35;
    if (!v35)
    {
      swift_release();
      return v23;
    }
  }
  uint64_t v26 = v18;
  _convertNSErrorToError(_:)(v18);

  swift_willThrow(v26, "dataWithJSONObject:options:error:", v27, v28, v29, v30);
  __swift_destroy_boxed_opaque_existential_1Tm(&v42);
LABEL_22:
  outlined destroy of Either<LogisticRegressionClassifier<Float, String>, FullyConnectedNetworkClassifier<Float, String>>((uint64_t)v41, &demangling cache variable for type metadata for Any?);
  uint64_t v23 = v39;
  swift_release();
  swift_release();
  return v23;
}

void *MLObjectDetector.DataSource.gatherAnnotatedImages(annotationType:)(__int16 *a1)
{
  char v83 = v1;
  uint64_t v67 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AnnotatedFeature<String, [MLObjectDetector.NormalizedAnnotation]>);
  uint64_t v68 = *(void *)(v67 - 8);
  int64_t v2 = *(void *)(v68 + 64);
  uint64_t v3 = alloca(v2);
  int64_t v4 = alloca(v2);
  uint64_t v66 = &v62;
  int64_t v5 = *(void *)(*(void *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Zip2Sequence<Column<String>, [[MLObjectDetector.DecodableAnnotation]?]>)
                             - 8)
                 + 64);
  BOOL v6 = alloca(v5);
  uint64_t v7 = alloca(v5);
  uint64_t v79 = &v62;
  uint64_t v78 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Zip2Sequence<Column<String>, [[MLObjectDetector.DecodableAnnotation]?]>.Iterator);
  int64_t v8 = *(void *)(*(void *)(v78 - 8) + 64);
  uint64_t v9 = alloca(v8);
  uint64_t v10 = alloca(v8);
  uint64_t v80 = &v62;
  uint64_t v77 = type metadata accessor for AnyColumn(0);
  BOOL v85 = *(void **)(v77 - 8);
  int64_t v11 = v85[8];
  uint64_t v12 = alloca(v11);
  uint64_t v13 = alloca(v11);
  BOOL v84 = &v62;
  uint64_t v81 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Column<String>);
  uint64_t v76 = *(void *)(v81 - 8);
  int64_t v14 = *(void *)(v76 + 64);
  uint64_t v15 = alloca(v14);
  id v16 = alloca(v14);
  int64_t v70 = &v62;
  id v17 = alloca(v14);
  id v18 = alloca(v14);
  uint64_t v75 = &v62;
  uint64_t v19 = type metadata accessor for DataFrame(0);
  uint64_t v20 = *(void *)(v19 - 8);
  int64_t v21 = *(void *)(v20 + 64);
  uint64_t v22 = alloca(v21);
  uint64_t v23 = alloca(v21);
  __int16 v86 = *a1;
  char v87 = *((unsigned char *)a1 + 2);
  uint64_t v24 = v83;
  uint64_t result = (void *)MLObjectDetector.DataSource.gatherAnnotatedFileNames()();
  if (!v24)
  {
    uint64_t v73 = v19;
    uint64_t v72 = v20;
    uint64_t v26 = v70;
    unint64_t v82 = 0;
    DataFrame.subscript.getter(0x7461506567616D69, 0xE900000000000068, &type metadata for String);
    uint64_t v27 = v81;
    uint64_t v28 = v82;
    Column.map<A>(_:)(closure #1 in MLObjectDetector.DataSource.gatherAnnotatedImages(annotationType:), 0, v81);
    char v83 = v28;
    uint64_t v71 = *(void (**)(uint64_t *, uint64_t))(v76 + 8);
    v71(v26, v27);
    uint64_t v74 = &v62;
    DataFrame.subscript.getter(0x697461746F6E6E61, 0xEA00000000006E6FLL);
    uint64_t v29 = type metadata accessor for JSONDecoder(0);
    swift_allocObject(v29, *(unsigned int *)(v29 + 48), *(unsigned __int16 *)(v29 + 52));
    JSONDecoder.init()();
    uint64_t v30 = v83;
    ML16MLObjectDetectorV19DecodableAnnotationVGSgsAE_pTg503_s8h4ML16jk3V10e36SourceO23unpackAnnotationsColumnySayu4AC19lm7VGSgG07d4E003F18I0VKFZAJypSgKXEfU_10Foundation11JSONDecoderCTf1cn_n = _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lF11TabularData9AnyColumnV_Say8CreateML16MLObjectDetectorV19DecodableAnnotationVGSgsAE_pTg503_s8h4ML16jk3V10e36SourceO23unpackAnnotationsColumnySayu4AC19lm7VGSgG07d4E003F18I0VKFZAJypSgKXEfU_10Foundation11JSONDecoderCTf1cn_n();
    uint64_t v32 = v75;
    if (!v30)
    {
      unint64_t v82 = 0;
      char v83 = ML16MLObjectDetectorV19DecodableAnnotationVGSgsAE_pTg503_s8h4ML16jk3V10e36SourceO23unpackAnnotationsColumnySayu4AC19lm7VGSgG07d4E003F18I0VKFZAJypSgKXEfU_10Foundation11JSONDecoderCTf1cn_n;
      ((void (*)(uint64_t *, uint64_t))v85[1])(v84, v77);
      id v33 = v79;
      uint64_t v64 = *(void (**)(uint64_t *, uint64_t *, uint64_t))(v76 + 16);
      v64(v79, v32, v27);
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(v76 + 32))(v70, v33, v27);
      uint64_t v34 = lazy protocol witness table accessor for type FullyConnectedNetworkClassifier<Float, String> and conformance FullyConnectedNetworkClassifier<A, B>(&lazy protocol witness table cache variable for type Column<String> and conformance Column<A>, &demangling cache variable for type metadata for Column<String>, (uint64_t)&protocol conformance descriptor for Column<A>);
      uint64_t v35 = (uint64_t)v80;
      dispatch thunk of Sequence.makeIterator()(v81, v34);
      uint64_t v36 = v78;
      uint64_t v37 = (void *)*(int *)(v78 + 52);
      *(void *)((char *)v37 + v35) = v83;
      char v83 = v37;
      *(void *)((char *)v37 + v35 + 8) = 0;
      uint64_t v77 = *(int *)(v36 + 56);
      *(unsigned char *)(v35 + v77) = 0;
      unint64_t v38 = (uint64_t **)(v35
                       + *(int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for IndexingIterator<Column<String>>)
                                + 36));
      uint64_t v39 = v81;
      uint64_t v40 = lazy protocol witness table accessor for type FullyConnectedNetworkClassifier<Float, String> and conformance FullyConnectedNetworkClassifier<A, B>(&lazy protocol witness table cache variable for type Column<String> and conformance Column<A>, &demangling cache variable for type metadata for Column<String>, (uint64_t)&protocol conformance descriptor for Column<A>);
      BOOL v85 = _swiftEmptyArrayStorage;
      uint64_t v78 = (uint64_t)v38;
      uint64_t v79 = (uint64_t *)v40;
      while (1)
      {
        BOOL v84 = *v38;
        dispatch thunk of Collection.endIndex.getter(v39, v40);
        uint64_t v41 = (uint64_t)v80;
        if (v84 == (uint64_t *)v65[0]) {
          goto LABEL_22;
        }
        long long v42 = (void (*)(void *, void))dispatch thunk of Collection.subscript.read(v65, v38, v39, v40);
        uint64_t v76 = *v43;
        BOOL v84 = (uint64_t *)v43[1];
        swift_bridgeObjectRetain((_BYTE)v84);
        v42(v65, 0);
        char v44 = v70;
        v64(v70, v80, v39);
        dispatch thunk of Collection.formIndex(after:)(v38, v39, v40);
        uint64_t v45 = v39;
        uint64_t v46 = v71;
        v71(v44, v45);
        uint64_t v41 = (uint64_t)v80;
        uint64_t v47 = *(void *)((char *)v83 + (void)v80);
        unint64_t v48 = *(void *)((char *)v83 + (void)v80 + 8);
        if (v48 == *(void *)(v47 + 16))
        {
          swift_bridgeObjectRelease((_BYTE)v84);
          uint64_t v39 = v81;
LABEL_22:
          *(unsigned char *)(v41 + v77) = 1;
LABEL_23:
          outlined destroy of Either<LogisticRegressionClassifier<Float, String>, FullyConnectedNetworkClassifier<Float, String>>(v41, &demangling cache variable for type metadata for Zip2Sequence<Column<String>, [[MLObjectDetector.DecodableAnnotation]?]>.Iterator);
          v71(v75, v39);
          (*(void (**)(uint64_t *, uint64_t))(v72 + 8))(v74, v73);
          return v85;
        }
        if (v48 >= *(void *)(v47 + 16)) {
          BUG();
        }
        uint64_t v49 = *(unint64_t **)(v47 + 8 * v48 + 32);
        *(void *)((char *)v83 + (void)v80 + 8) = v48 + 1;
        uint64_t v50 = (uint64_t)v84;
        if (v84)
        {
          if (v49)
          {
            LOWORD(v65[0]) = v86;
            BYTE2(v65[0]) = v87;
            swift_bridgeObjectRetain((_BYTE)v49);
            id v69 = v49;
            uint64_t v51 = v76;
            uint64_t v52 = v82;
            uint64_t v53 = static MLObjectDetector.DataSource.normalizedAnnotations(annotatedObjects:filename:annotationType:)(v49, v76, v50, (char *)v65);
            uint64_t v54 = v50;
            unint64_t v82 = v52;
            if (v52)
            {
              swift_bridgeObjectRelease((_BYTE)v69);
              swift_bridgeObjectRelease(v50);
              outlined destroy of Either<LogisticRegressionClassifier<Float, String>, FullyConnectedNetworkClassifier<Float, String>>((uint64_t)v80, &demangling cache variable for type metadata for Zip2Sequence<Column<String>, [[MLObjectDetector.DecodableAnnotation]?]>.Iterator);
              v46(v75, v81);
              (*(void (**)(uint64_t *, uint64_t))(v72 + 8))(v74, v73);
              return (void *)swift_bridgeObjectRelease((_BYTE)v85);
            }
            uint64_t v55 = v53;
            swift_bridgeObjectRelease((_BYTE)v69);
            v65[0] = v51;
            v65[1] = v54;
            uint64_t v63 = v55;
            uint64_t v56 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [MLObjectDetector.NormalizedAnnotation]);
            AnnotatedFeature.init(feature:annotation:)(v65, &v63, &type metadata for String, v56);
            if (swift_isUniquelyReferenced_nonNull_native(v85))
            {
              uint64_t v57 = v67;
              uint64_t v58 = v68;
              uint64_t v59 = v85;
            }
            else
            {
              uint64_t v59 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v85[2] + 1, 1, (uint64_t)v85);
              uint64_t v57 = v67;
              uint64_t v58 = v68;
            }
            unint64_t v60 = v59[2];
            if (v59[3] >> 1 <= v60) {
              uint64_t v59 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(v59[3] >= 2uLL, v60 + 1, 1, (uint64_t)v59);
            }
            v59[2] = v60 + 1;
            int v61 = *(unsigned __int8 *)(v58 + 80);
            BOOL v85 = v59;
            (*(void (**)(char *, uint64_t *, uint64_t))(v58 + 32))((char *)v59 + ((v61 + 32) & ~v61) + *(void *)(v58 + 72) * v60, v66, v57);
            uint64_t v41 = (uint64_t)v80;
          }
          else
          {
            swift_bridgeObjectRelease((_BYTE)v84);
          }
        }
        unint64_t v38 = (uint64_t **)v78;
        uint64_t v40 = (uint64_t)v79;
        uint64_t v39 = v81;
        if (*(unsigned char *)(v41 + v77)) {
          goto LABEL_23;
        }
      }
    }
    ((void (*)(uint64_t *, uint64_t))v85[1])(v84, v77);
    v71(v32, v27);
    return (void *)(*(uint64_t (**)(uint64_t *, uint64_t))(v72 + 8))(v74, v73);
  }
  return result;
}

uint64_t MLObjectDetector.ObjectAnnotation.init(label:boundingBox:confidence:)(uint64_t a1, uint64_t a2, double a3, double a4, double a5, double a6, double a7)
{
  *(void *)uint64_t result = a1;
  *(void *)(result + 8) = a2;
  *(double *)(result + 16) = a3;
  *(double *)(result + 24) = a4;
  *(double *)(result + 32) = a5;
  *(double *)(result + 40) = a6;
  *(double *)(result + 48) = a7;
  return result;
}

uint64_t MLObjectDetector.DataSource.gatherAnnotatedFileNames()()
{
  uint64_t v201 = v1;
  uint64_t v204 = (uint64_t *)v2;
  uint64_t v192 = v0;
  uint64_t v181 = type metadata accessor for DataFrame.Slice(0);
  uint64_t v187 = *(void *)(v181 - 8);
  int64_t v3 = *(void *)(v187 + 64);
  int64_t v4 = alloca(v3);
  int64_t v5 = alloca(v3);
  os_log_t v183 = (uint64_t *)&v170;
  BOOL v6 = alloca(v3);
  uint64_t v7 = alloca(v3);
  uint64_t v186 = (uint64_t *)&v170;
  uint64_t v185 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Column<String>);
  uint64_t v182 = *(void *)(v185 - 8);
  int64_t v8 = *(void *)(v182 + 64);
  uint64_t v9 = alloca(v8);
  uint64_t v10 = alloca(v8);
  uint64_t v193 = (uint64_t *)&v170;
  uint64_t v189 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for FilledColumn<Column<String>>);
  uint64_t v188 = *(void *)(v189 - 8);
  int64_t v11 = *(void *)(v188 + 64);
  uint64_t v12 = alloca(v11);
  uint64_t v13 = alloca(v11);
  uint64_t v194 = (uint64_t *)&v170;
  int64_t v14 = *(void *)(*(void *)(type metadata accessor for JSONReadingOptions(0) - 8) + 64);
  uint64_t v15 = alloca(v14);
  id v16 = alloca(v14);
  Float64 v179 = (uint64_t *)&v170;
  v198._char object = (void *)type metadata accessor for DataFrame(0);
  uint64_t v195 = *((void *)v198._object - 1);
  int64_t v17 = *(void *)(v195 + 64);
  id v18 = alloca(v17);
  uint64_t v19 = alloca(v17);
  uint64_t v180 = (uint64_t *)&v170;
  uint64_t v20 = alloca(v17);
  int64_t v21 = alloca(v17);
  uint64_t v197 = (uint64_t *)&v170;
  uint64_t v22 = alloca(v17);
  uint64_t v23 = alloca(v17);
  named = (uint64_t *)&v170;
  uint64_t v24 = type metadata accessor for MLObjectDetector.DataSource(0);
  int64_t v25 = *(void *)(*(void *)(v24 - 8) + 64);
  uint64_t v26 = alloca(v25);
  uint64_t v27 = alloca(v25);
  uint64_t v28 = type metadata accessor for URL(0);
  *(void *)&long long _ = *(void *)(v28 - 8);
  int64_t v29 = *(void *)(_ + 64);
  uint64_t v30 = alloca(v29);
  uint64_t v31 = alloca(v29);
  uint64_t v184 = (uint64_t *)&v170;
  uint64_t v32 = alloca(v29);
  id v33 = alloca(v29);
  v198._uint64_t countAndFlagsBits = (uint64_t)&v170;
  uint64_t v34 = alloca(v29);
  uint64_t v35 = alloca(v29);
  v202._char object = &v170;
  uint64_t v36 = alloca(v29);
  uint64_t v37 = alloca(v29);
  char v203 = (uint64_t *)&v170;
  unint64_t v38 = alloca(v29);
  uint64_t v39 = alloca(v29);
  v202._uint64_t countAndFlagsBits = (uint64_t)&v170;
  uint64_t v40 = alloca(v29);
  uint64_t v41 = alloca(v29);
  outlined init with copy of MLObjectDetector.DataSource((uint64_t)v204, (uint64_t)&v170);
  switch(swift_getEnumCaseMultiPayload(&v170, v24))
  {
    case 0u:
      named = *(uint64_t **)(_ + 32);
      long long v42 = v203;
      ((void (*)(uint64_t *, uint64_t **, uint64_t))named)(v203, &v170, v28);
      uint64_t v204 = (uint64_t *)&v170;
      URL.resolvingSymlinksInPath()();
      char object = v202._object;
      URL.resolvingSymlinksInPath()();
      char v203 = *(uint64_t **)(_ + 8);
      ((void (*)(uint64_t *, uint64_t))v203)(v42, v28);
      uint64_t countAndFlagsBits = v202._countAndFlagsBits;
      uint64_t v45 = v202._countAndFlagsBits;
      uint64_t v46 = (uint64_t)object;
      goto LABEL_4;
    case 1u:
      uint64_t v47 = &v171[*(int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (at: URL, annotationFile: URL))
                         + 48)
                - 8];
      named = *(uint64_t **)(_ + 32);
      unint64_t v48 = named;
      ((void (*)(uint64_t *, uint64_t **, uint64_t))named)(v203, &v170, v28);
      ((void (*)(void *, char *, uint64_t))v48)(v202._object, v47, v28);
      uint64_t v204 = (uint64_t *)&v170;
      uint64_t v49 = v203;
      URL.resolvingSymlinksInPath()();
      uint64_t v50 = v202._object;
      URL.resolvingSymlinksInPath()();
      uint64_t v51 = *(uint64_t **)(_ + 8);
      ((void (*)(void *, uint64_t))v51)(v50, v28);
      char v203 = v51;
      ((void (*)(uint64_t *, uint64_t))v51)(v49, v28);
      uint64_t countAndFlagsBits = v202._countAndFlagsBits;
      uint64_t v45 = v202._countAndFlagsBits;
      uint64_t v46 = v198._countAndFlagsBits;
LABEL_4:
      ((void (*)(uint64_t, uint64_t, uint64_t))named)(v45, v46, v28);
      uint64_t v52 = v201;
      uint64_t v53 = static _FileUtilities.getReadableJsonFilesInDirectory(at:)(countAndFlagsBits);
      if (v52)
      {
        uint64_t v54 = countAndFlagsBits;
        uint64_t v55 = v203;
        ((void (*)(uint64_t, uint64_t))v203)(v54, v28);
        return ((uint64_t (*)(uint64_t *, uint64_t))v55)(v204, v28);
      }
      char v71 = v53;
      uint64_t v201 = v28;
      unint64_t v72 = *(void *)(v53 + 16);
      if (v72 >= 2)
      {
        *(void *)&long long v196 = 0;
        *((void *)&v196 + 1) = 0xE000000000000000;
        _StringGuts.grow(_:)(58);
        v73._uint64_t countAndFlagsBits = 0xD000000000000037;
        v73._char object = "with object annotations." + 0x8000000000000000;
        String.append(_:)(v73);
        swift_bridgeObjectRelease(v71);
        uint64_t v190 = v72;
        uint64_t v74 = dispatch thunk of CustomStringConvertible.description.getter(&type metadata for Int, &protocol witness table for Int);
        char v76 = (char)v75;
        v73._uint64_t countAndFlagsBits = v74;
        v73._char object = v75;
        String.append(_:)(v73);
        swift_bridgeObjectRelease(v76);
        v73._uint64_t countAndFlagsBits = 46;
        v73._char object = (void *)0xE100000000000000;
        String.append(_:)(v73);
        long long _ = v196;
        uint64_t v77 = lazy protocol witness table accessor for type MLCreateError and conformance MLCreateError();
        swift_allocError(&type metadata for MLCreateError, v77, 0, 0);
        *(_OWORD *)uint64_t v78 = _;
        *(_OWORD *)(v78 + 16) = 0;
        *(_OWORD *)(v78 + 32) = 0;
        *(unsigned char *)(v78 + 48) = 0;
LABEL_33:
        swift_willThrow(&type metadata for MLCreateError, v77, v78, v79, v80, v81);
LABEL_34:
        uint64_t v118 = v201;
        double v119 = v203;
        ((void (*)(uint64_t, uint64_t))v203)(v202._countAndFlagsBits, v201);
        return ((uint64_t (*)(uint64_t *, uint64_t))v119)(v204, v118);
      }
      if (!v72)
      {
        swift_bridgeObjectRelease(v53);
        uint64_t v77 = lazy protocol witness table accessor for type MLCreateError and conformance MLCreateError();
        swift_allocError(&type metadata for MLCreateError, v77, 0, 0);
        *(void *)uint64_t v78 = 0xD000000000000058;
        *(void *)(v78 + 8) = " specified data source." + 0x8000000000000000;
        *(_OWORD *)(v78 + 16) = 0;
        *(_OWORD *)(v78 + 32) = 0;
        *(unsigned char *)(v78 + 48) = 0;
        goto LABEL_33;
      }
      (*(void (**)(uint64_t *, uint64_t, uint64_t))(_ + 16))(v184, ((*(unsigned __int8 *)(_ + 80) + 32) & ~*(unsigned __int8 *)(_ + 80)) + v53, v201);
      swift_bridgeObjectRelease(v71);
      uint64_t v96 = specialized Dictionary.init(dictionaryLiteral:)((uint64_t)_swiftEmptyArrayStorage);
      uint64_t v97 = v179;
      JSONReadingOptions.init()();
      uint64_t v98 = v197;
      DataFrame.init(contentsOfJSONFile:columns:types:options:)(v184, 0, v96, v97);
      uint64_t v123 = v180;
      uint64_t v124 = v195;
      (*(void (**)(uint64_t *, uint64_t *, void *))(v195 + 16))(v180, v98, v198._object);
      *(void *)&long long _ = &v170;
      uint64_t v125 = alloca(24);
      uint64_t v126 = alloca(32);
      uint64_t v172 = v204;
      v127._uint64_t countAndFlagsBits = 0x6C69666567616D69;
      v127._char object = (void *)0xED0000656D616E65;
      uint64_t v130 = specialized DataFrame.findColumn<A>(defaultName:type:where:)(v127, (uint64_t (*)(void **))partial apply for closure #1 in MLObjectDetector.DataSource.gatherAnnotatedFileNames(), (uint64_t)&v170);
      uint64_t v131 = *(void **)(v124 + 8);
      uint64_t v133 = v132;
      v202._char object = v131;
      ((void (*)(uint64_t *, void *))v131)(v123, v198._object);
      v127._uint64_t countAndFlagsBits = v130;
      v127._char object = v133;
      v134._uint64_t countAndFlagsBits = 0x6C69666567616D69;
      v134._char object = (void *)0xED0000656D616E65;
      uint64_t v135 = v197;
      DataFrame.renameColumn(_:to:)(v127, v134);
      swift_bridgeObjectRelease((_BYTE)v133);
      v127._uint64_t countAndFlagsBits = 0x697461746F6E6E61;
      v127._char object = (void *)0xEA00000000006E6FLL;
      v136._uint64_t countAndFlagsBits = (uint64_t)specialized DataFrame.findColumn<A>(defaultName:type:where:)(v127, v135);
      v198._uint64_t countAndFlagsBits = 0;
      char v142 = (char)v136._object;
      Swift::String v143 = v136;
      v144._uint64_t countAndFlagsBits = 0x697461746F6E6E61;
      v144._char object = (void *)0xEA00000000006E6FLL;
      DataFrame.renameColumn(_:to:)(v143, v144);
      swift_bridgeObjectRelease(v142);
      *(void *)&long long _ = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<String>);
      v145._char rawValue = (void *)swift_initStackObject(_, v177);
      *((void *)v145._rawValue + 2) = 1;
      *((void *)v145._rawValue + 3) = 2;
      strcpy((char *)v145._rawValue + 32, "imagefilename");
      *((_WORD *)v145._rawValue + 23) = -4864;
      DataFrame.validateContainsColumns(_:context:)(v145, (Swift::String)__PAIR128__(0xEF656D616E20656CLL, 0x6966206567616D49));
      uint64_t v146 = v201;
      if (!v147)
      {
        swift_setDeallocating(v145._rawValue);
        specialized _ContiguousArrayStorage.__deallocating_deinit();
        v145._char rawValue = (void *)swift_initStackObject(_, v178);
        *((void *)v145._rawValue + 2) = 1;
        *((void *)v145._rawValue + 3) = 2;
        *((void *)v145._rawValue + 4) = 0x697461746F6E6E61;
        *((void *)v145._rawValue + 5) = 0xEA00000000006E6FLL;
        DataFrame.validateContainsColumns(_:context:)(v145, (Swift::String)__PAIR128__(0xEA00000000006E6FLL, 0x697461746F6E6E41));
        if (!v148)
        {
          swift_setDeallocating(v145._rawValue);
          specialized _ContiguousArrayStorage.__deallocating_deinit();
          DataFrame.subscript.getter(0x6C69666567616D69, 0xED0000656D616E65, &type metadata for String);
          *(void *)&long long v196 = 0;
          *((void *)&v196 + 1) = 0xE000000000000000;
          uint64_t v150 = lazy protocol witness table accessor for type FullyConnectedNetworkClassifier<Float, String> and conformance FullyConnectedNetworkClassifier<A, B>(&lazy protocol witness table cache variable for type Column<String> and conformance Column<A>, &demangling cache variable for type metadata for Column<String>, (uint64_t)&protocol conformance descriptor for Column<A>);
          uint64_t v151 = v185;
          uint64_t v152 = v193;
          OptionalColumnProtocol.filled(with:)(&v196, v185, v150);
          v198._uint64_t countAndFlagsBits = 0;
          *(void *)&long long _ = *(void *)(v182 + 8);
          ((void (*)(uint64_t *, uint64_t))_)(v152, v151);
          uint64_t v153 = alloca(24);
          uint64_t v154 = alloca(32);
          uint64_t v172 = v204;
          uint64_t v155 = v198._countAndFlagsBits;
          Float64 v156 = _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lF11TabularData12FilledColumnVyAF0G0VySSGG_SSs5NeverOTg5((void (*)(void *))partial apply for closure #3 in MLObjectDetector.DataSource.gatherAnnotatedFileNames(), (uint64_t)&v170);
          named = (uint64_t *)v155;
          *(void *)&long long v196 = v156;
          uint64_t v157 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [String]);
          uint64_t v158 = lazy protocol witness table accessor for type FullyConnectedNetworkClassifier<Float, String> and conformance FullyConnectedNetworkClassifier<A, B>(&lazy protocol witness table cache variable for type [String] and conformance [A], &demangling cache variable for type metadata for [String], (uint64_t)&protocol conformance descriptor for [A]);
          Float64 v159 = v193;
          Column.init<A>(name:contents:)(0x7461506567616D69, 0xE900000000000068, &v196, &type metadata for String, v157, v158);
          DataFrame.append<A>(column:)(v159, &type metadata for String);
          ((void (*)(uint64_t *, uint64_t))_)(v159, v185);
          uint64_t v160 = v186;
          DataFrame.filter<A>(on:_:_:)(0x7461506567616D69, 0xE900000000000068, &type metadata for String, closure #4 in MLObjectDetector.DataSource.gatherAnnotatedFileNames(), 0, &type metadata for String);
          uint64_t v161 = v181;
          if (DataFrameProtocol.isEmpty.getter(v181, &protocol witness table for DataFrame.Slice))
          {
            uint64_t v162 = lazy protocol witness table accessor for type MLCreateError and conformance MLCreateError();
            swift_allocError(&type metadata for MLCreateError, v162, 0, 0);
            *(void *)uint64_t v163 = 0xD000000000000027;
            *(void *)(v163 + 8) = " required column '" + 0x8000000000000000;
            *(_OWORD *)(v163 + 16) = 0;
            *(_OWORD *)(v163 + 32) = 0;
            *(unsigned char *)(v163 + 48) = 0;
            swift_willThrow(&type metadata for MLCreateError, v162, v163, v164, v165, v166);
            (*(void (**)(uint64_t *, uint64_t))(v187 + 8))(v160, v161);
          }
          else
          {
            uint64_t v167 = v183;
            char v168 = v160;
            uint64_t v169 = v187;
            (*(void (**)(uint64_t *, uint64_t *, uint64_t))(v187 + 16))(v183, v168, v161);
            DataFrame.init(_:)(v167);
            (*(void (**)(uint64_t *, uint64_t))(v169 + 8))(v186, v161);
          }
          (*(void (**)(uint64_t *, uint64_t))(v188 + 8))(v194, v189);
          ((void (*)(uint64_t *, void *))v202._object)(v197, v198._object);
          goto LABEL_34;
        }
      }
      swift_setDeallocating(v145._rawValue);
      specialized _ContiguousArrayStorage.__deallocating_deinit();
      ((void (*)(uint64_t *, void *))v202._object)(v197, v198._object);
      unint64_t v149 = v203;
      ((void (*)(uint64_t, uint64_t))v203)(v202._countAndFlagsBits, v146);
      return ((uint64_t (*)(uint64_t *, uint64_t))v149)(v204, v146);
    case 2u:
      uint64_t v57 = (uint64_t)v170;
      LOBYTE(v202._object) = v171[0];
      *(void *)&long long _ = v172;
      uint64_t v58 = v173;
      v202._uint64_t countAndFlagsBits = v174;
      char v203 = v175;
      uint64_t v204 = v170;
      if (v171[0])
      {
        outlined copy of Result<_DataTable, Error>((uint64_t)v170, 1);
        uint64_t v59 = tc_v1_flex_list_create(0);
        if (!v59) {
          BUG();
        }
        uint64_t v60 = v59;
        uint64_t v61 = type metadata accessor for CMLSequence();
        uint64_t v62 = swift_allocObject(v61, 25, 7);
        *(void *)(v62 + 16) = v60;
        *(unsigned char *)(v62 + 24) = 1;
        outlined consume of Result<_DataTable, Error>(v57, 1);
      }
      else
      {
        outlined copy of Result<_DataTable, Error>((uint64_t)v170, 0);
        _DataTable.columnNames.getter(v57);
        outlined consume of Result<_DataTable, Error>(v57, 0);
        uint64_t v62 = v190;
      }
      uint64_t v82 = v201;
      *(void *)&long long v196 = _;
      *((void *)&v196 + 1) = v58;
      char v83 = alloca(24);
      BOOL v84 = alloca(32);
      uint64_t v172 = (uint64_t *)&v196;
      BOOL v85 = v58;
      char v86 = specialized Sequence.contains(where:)((uint64_t (*)(unint64_t *))partial apply for specialized closure #1 in Sequence<>.contains(_:), (uint64_t)&v170, v62);
      uint64_t v201 = v82;
      swift_release();
      if ((v86 & 1) == 0)
      {
        swift_bridgeObjectRelease((_BYTE)v203);
        *(void *)&long long v196 = 0;
        *((void *)&v196 + 1) = 0xE000000000000000;
        _StringGuts.grow(_:)(38);
        swift_bridgeObjectRelease(BYTE8(v196));
        *(void *)&long long v196 = 0xD000000000000022;
        *((void *)&v196 + 1) = "Number of Samples" + 0x8000000000000000;
        v92._uint64_t countAndFlagsBits = _;
LABEL_30:
        v92._char object = v85;
        String.append(_:)(v92);
        swift_bridgeObjectRelease((_BYTE)v85);
        v108._char object = (void *)0xE200000000000000;
        v108._uint64_t countAndFlagsBits = 11815;
        String.append(_:)(v108);
        long long _ = v196;
        v108._char object = (void *)lazy protocol witness table accessor for type MLCreateError and conformance MLCreateError();
        swift_allocError(&type metadata for MLCreateError, v108._object, 0, 0);
        *(_OWORD *)uint64_t v109 = _;
        *(_OWORD *)(v109 + 16) = 0;
        *(_OWORD *)(v109 + 32) = 0;
        *(unsigned char *)(v109 + 48) = 0;
        swift_willThrow(&type metadata for MLCreateError, v108._object, v109, v110, v111, v112);
        return outlined consume of Result<_DataTable, Error>((uint64_t)v204, (char)v202._object);
      }
      named = v85;
      if (LOBYTE(v202._object))
      {
        uint64_t v87 = (uint64_t)v204;
        outlined copy of Result<_DataTable, Error>((uint64_t)v204, 1);
        uint64_t v88 = tc_v1_flex_list_create(0);
        if (!v88) {
          BUG();
        }
        uint64_t v89 = v88;
        uint64_t v90 = type metadata accessor for CMLSequence();
        uint64_t v91 = swift_allocObject(v90, 25, 7);
        *(void *)(v91 + 16) = v89;
        *(unsigned char *)(v91 + 24) = 1;
        outlined consume of Result<_DataTable, Error>(v87, 1);
      }
      else
      {
        uint64_t v99 = (uint64_t)v204;
        uint64_t v100 = (uint64_t)v204;
        outlined copy of Result<_DataTable, Error>((uint64_t)v204, 0);
        _DataTable.columnNames.getter(v100);
        outlined consume of Result<_DataTable, Error>(v99, 0);
        uint64_t v91 = v190;
      }
      *(void *)&long long v196 = v202._countAndFlagsBits;
      BOOL v85 = v203;
      *((void *)&v196 + 1) = v203;
      unsigned int v101 = alloca(24);
      uint64_t v102 = alloca(32);
      uint64_t v172 = (uint64_t *)&v196;
      uint64_t v103 = v201;
      char v104 = specialized Sequence.contains(where:)((uint64_t (*)(unint64_t *))closure #1 in Sequence<>.contains(_:)specialized partial apply, (uint64_t)&v170, v91);
      v198._uint64_t countAndFlagsBits = v103;
      swift_release();
      if ((v104 & 1) == 0)
      {
        swift_bridgeObjectRelease((_BYTE)named);
        *(void *)&long long v196 = 0;
        *((void *)&v196 + 1) = 0xE000000000000000;
        _StringGuts.grow(_:)(38);
        swift_bridgeObjectRelease(BYTE8(v196));
        *(void *)&long long v196 = 0xD000000000000022;
        *((void *)&v196 + 1) = "Number of Samples" + 0x8000000000000000;
        v92._uint64_t countAndFlagsBits = v202._countAndFlagsBits;
        goto LABEL_30;
      }
      LOBYTE(v105) = 101;
      uint64_t v106 = (uint64_t)v204;
      *(void *)&long long v196 = v204;
      char v107 = (char)v202._object;
      BYTE8(v196) = v202._object;
      if ((void)_ == 0x6C69666567616D69 && named == (uint64_t *)0xED0000656D616E65)
      {
        outlined copy of Result<_DataTable, Error>((uint64_t)v204, (char)v202._object);
LABEL_36:
        swift_bridgeObjectRelease((_BYTE)v105);
        uint64_t v121 = v106;
        char v122 = v107;
        goto LABEL_41;
      }
      unint64_t v105 = named;
      char v120 = _stringCompareWithSmolCheck(_:_:expecting:)(_, named, 0x6C69666567616D69, 0xED0000656D616E65, 0);
      outlined copy of Result<_DataTable, Error>(v106, v107);
      if (v120) {
        goto LABEL_36;
      }
      MLDataTable.willMutate()();
      v128._uint64_t countAndFlagsBits = 0x7461506567616D69;
      v128._char object = (void *)0xE900000000000068;
      v129._uint64_t countAndFlagsBits = _;
      v129._char object = v105;
      MLDataTable.renameImpl(named:to:)(v129, v128);
      uint64_t v121 = v196;
      if (BYTE8(v196))
      {
        swift_bridgeObjectRelease((_BYTE)v105);
        char v122 = 1;
      }
      else
      {
        char v122 = 0;
        outlined copy of Result<_DataTable, Error>(v196, 0);
        _DataTable.columnNamesDidChange()();
        outlined consume of Result<_DataTable, Error>(v121, 0);
        swift_bridgeObjectRelease((_BYTE)v105);
      }
      char v107 = (char)v202._object;
LABEL_41:
      uint64_t v137 = v202._countAndFlagsBits;
      if (v202._countAndFlagsBits == 0x697461746F6E6E61 && v203 == (uint64_t *)0xEA00000000006E6FLL)
      {
        char v138 = 111;
      }
      else
      {
        if ((_stringCompareWithSmolCheck(_:_:expecting:)(v202._countAndFlagsBits, v203, 0x697461746F6E6E61, 0xEA00000000006E6FLL, 0) & 1) == 0)
        {
          MLDataTable.willMutate()();
          v139._uint64_t countAndFlagsBits = v137;
          char v140 = (char)v203;
          v139._char object = v203;
          v141._uint64_t countAndFlagsBits = 0x697461746F6E6E61;
          v141._char object = (void *)0xEA00000000006E6FLL;
          MLDataTable.renameImpl(named:to:)(v139, v141);
          uint64_t v121 = v196;
          if (BYTE8(v196))
          {
            swift_bridgeObjectRelease(v140);
            char v122 = 1;
          }
          else
          {
            char v122 = 0;
            outlined copy of Result<_DataTable, Error>(v196, 0);
            _DataTable.columnNamesDidChange()();
            outlined consume of Result<_DataTable, Error>(v121, 0);
            swift_bridgeObjectRelease(v140);
          }
          char v107 = (char)v202._object;
          goto LABEL_51;
        }
        char v138 = (char)v203;
      }
      swift_bridgeObjectRelease(v138);
LABEL_51:
      uint64_t v190 = v121;
      char v191 = v122;
      outlined copy of Result<_DataTable, Error>(v121, v122);
      DataFrame.init(_:)((uint64_t)&v190);
      outlined consume of Result<_DataTable, Error>((uint64_t)v204, v107);
      return outlined consume of Result<_DataTable, Error>(v121, v122);
    case 3u:
      uint64_t v63 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (DataFrame, imageColumn: String, annotationColumn: String));
      uint64_t v64 = *(int *)(v63 + 48);
      uint64_t v65 = *(void *)&v171[v64 - 8];
      *(void *)&long long _ = *(void *)&v171[v64];
      uint64_t v66 = *(int *)(v63 + 64);
      v202._char object = *(void **)&v171[v66 - 8];
      uint64_t v204 = *(uint64_t **)&v171[v66];
      v202._uint64_t countAndFlagsBits = *(void *)(v195 + 32);
      ((void (*)(uint64_t *, uint64_t **, void *))v202._countAndFlagsBits)(named, &v170, v198._object);
      char v203 = (uint64_t *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<String>);
      uint64_t inited = (void *)swift_initStackObject(v203, v171);
      inited[2] = 1;
      inited[3] = 2;
      v198._uint64_t countAndFlagsBits = v65;
      inited[4] = v65;
      char v68 = _;
      inited[5] = _;
      swift_bridgeObjectRetain(v68);
      DataFrame.validateContainsColumns(_:context:)((Swift::OpaquePointer)inited, (Swift::String)__PAIR128__(0xEF656D616E20656CLL, 0x6966206567616D49));
      if (v69)
      {
        (*(void (**)(uint64_t *, void *))(v195 + 8))(named, v198._object);
        swift_setDeallocating(inited);
        specialized _ContiguousArrayStorage.__deallocating_deinit();
        swift_bridgeObjectRelease(v68);
        char v70 = (char)v204;
      }
      else
      {
        swift_setDeallocating(inited);
        specialized _ContiguousArrayStorage.__deallocating_deinit();
        uint64_t v93 = (void *)swift_initStackObject(v203, v176);
        v93[2] = 1;
        v93[3] = 2;
        v93[4] = v202._object;
        uint64_t v94 = v204;
        v93[5] = v204;
        swift_bridgeObjectRetain((_BYTE)v94);
        DataFrame.validateContainsColumns(_:context:)((Swift::OpaquePointer)v93, (Swift::String)__PAIR128__(0xEA00000000006E6FLL, 0x697461746F6E6E41));
        if (!v95)
        {
          swift_setDeallocating(v93);
          specialized _ContiguousArrayStorage.__deallocating_deinit();
          v113._uint64_t countAndFlagsBits = 0x7461506567616D69;
          v113._char object = (void *)0xE900000000000068;
          v114._uint64_t countAndFlagsBits = v198._countAndFlagsBits;
          char v115 = _;
          v114._char object = (void *)_;
          id v116 = named;
          DataFrame.renameColumn(_:to:)(v114, v113);
          swift_bridgeObjectRelease(v115);
          v114._uint64_t countAndFlagsBits = (uint64_t)v202._object;
          v114._char object = v94;
          v117._uint64_t countAndFlagsBits = 0x697461746F6E6E61;
          v117._char object = (void *)0xEA00000000006E6FLL;
          DataFrame.renameColumn(_:to:)(v114, v117);
          swift_bridgeObjectRelease((_BYTE)v94);
          return ((uint64_t (*)(uint64_t, uint64_t *, void *))v202._countAndFlagsBits)(v192, v116, v198._object);
        }
        (*(void (**)(uint64_t *, void *))(v195 + 8))(named, v198._object);
        swift_setDeallocating(v93);
        specialized _ContiguousArrayStorage.__deallocating_deinit();
        swift_bridgeObjectRelease(_);
        char v70 = (char)v94;
      }
      return swift_bridgeObjectRelease(v70);
    case 4u:
      JUMPOUT(0x609B0);
  }
}

uint64_t type metadata accessor for MLObjectDetector.DataSource(uint64_t a1)
{
  uint64_t result = type metadata singleton initialization cache for MLObjectDetector.DataSource;
  if (!type metadata singleton initialization cache for MLObjectDetector.DataSource) {
    return swift_getSingletonMetadata(a1, &nominal type descriptor for MLObjectDetector.DataSource);
  }
  return result;
}

uint64_t outlined init with copy of MLObjectDetector.DataSource(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = type metadata accessor for MLObjectDetector.DataSource(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v2 - 8) + 16))(a2, a1, v2);
  return a2;
}

uint64_t closure #1 in MLObjectDetector.DataSource.gatherAnnotatedFileNames()(uint64_t *a1, uint64_t a2)
{
  uint64_t v27 = a2;
  uint64_t v28 = type metadata accessor for UTType(0);
  uint64_t v29 = *(void *)(v28 - 8);
  int64_t v2 = *(void *)(v29 + 64);
  int64_t v3 = alloca(v2);
  int64_t v4 = alloca(v2);
  uint64_t v30 = &v26;
  uint64_t v32 = type metadata accessor for URL.DirectoryHint(0);
  uint64_t v33 = *(void *)(v32 - 8);
  int64_t v5 = *(void *)(v33 + 64);
  BOOL v6 = alloca(v5);
  uint64_t v7 = alloca(v5);
  uint64_t v31 = &v26;
  int64_t v8 = *(void *)(*(void *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for URL?)
                             - 8)
                 + 64);
  uint64_t v9 = alloca(v8);
  uint64_t v10 = alloca(v8);
  uint64_t v11 = type metadata accessor for URL(0);
  uint64_t v12 = *(void *)(v11 - 8);
  int64_t v13 = *(void *)(v12 + 64);
  int64_t v14 = alloca(v13);
  uint64_t v15 = alloca(v13);
  id v16 = alloca(v13);
  int64_t v17 = alloca(v13);
  uint64_t v34 = *a1;
  uint64_t v18 = a1[1];
  uint64_t v36 = v12;
  uint64_t v19 = *(void (**)(uint64_t *, uint64_t, uint64_t))(v12 + 16);
  uint64_t v35 = &v26;
  v19(&v26, v27, v11);
  if (v18)
  {
    v19(&v26, (uint64_t)v35, v11);
    __swift_storeEnumTagSinglePayload((uint64_t)&v26, 0, 1, v11);
    uint64_t v20 = v31;
    (*(void (**)(uint64_t *, void, uint64_t))(v33 + 104))(v31, enum case for URL.DirectoryHint.inferFromPath(_:), v32);
    swift_bridgeObjectRetain(v18);
    URL.init(filePath:directoryHint:relativeTo:)(v34, v18, v20, &v26);
    uint64_t v21 = (uint64_t)v30;
    static UTType.image.getter();
    LOBYTE(v22) = static _FileUtilities.isReadableFile(at:of:)((uint64_t)&v26, v21);
    unsigned int v23 = v22;
    (*(void (**)(uint64_t, uint64_t))(v29 + 8))(v21, v28);
    uint64_t v24 = *(void (**)(uint64_t *, uint64_t))(v36 + 8);
    v24(&v26, v11);
  }
  else
  {
    uint64_t v24 = *(void (**)(uint64_t *, uint64_t))(v36 + 8);
    unsigned int v23 = 0;
  }
  v24(v35, v11);
  return v23;
}

uint64_t specialized DataFrame.findColumn<A>(defaultName:type:where:)(Swift::String a1, uint64_t (*a2)(void **), uint64_t a3)
{
  uint64_t v83 = a3;
  BOOL v84 = a2;
  uint64_t countAndFlagsBits = a1._countAndFlagsBits;
  uint64_t v98 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Column<String>);
  uint64_t v97 = *(void *)(v98 - 8);
  int64_t v6 = *(void *)(v97 + 64);
  uint64_t v7 = alloca(v6);
  int64_t v8 = alloca(v6);
  uint64_t v87 = &v83;
  uint64_t v9 = alloca(v6);
  uint64_t v10 = alloca(v6);
  uint64_t v89 = &v83;
  uint64_t v11 = alloca(v6);
  uint64_t v12 = alloca(v6);
  uint64_t v88 = &v83;
  int64_t v13 = alloca(v6);
  int64_t v14 = alloca(v6);
  uint64_t v99 = &v83;
  int64_t v15 = *(void *)(*(void *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AnyColumn?)
                              - 8)
                  + 64);
  id v16 = alloca(v15);
  int64_t v17 = alloca(v15);
  uint64_t v100 = &v83;
  uint64_t v102 = (void *)type metadata accessor for AnyColumn(0);
  uint64_t v107 = *(v102 - 1);
  int64_t v18 = *(void *)(v107 + 64);
  uint64_t v19 = alloca(v18);
  uint64_t v20 = alloca(v18);
  uint64_t v91 = &v83;
  uint64_t v21 = alloca(v18);
  unsigned int v22 = alloca(v18);
  BOOL v85 = &v83;
  unsigned int v23 = alloca(v18);
  uint64_t v24 = alloca(v18);
  v95._char object = &v83;
  v95._uint64_t countAndFlagsBits = a1._countAndFlagsBits;
  char object = a1._object;
  Swift::Int_optional v25 = DataFrame.indexOfColumn(_:)(a1);
  uint64_t v93 = v3;
  uint64_t v92 = v4;
  if (!v25.is_nil)
  {
    Swift::Int value = v25.value;
    uint64_t v27 = DataFrame.columns.getter(a1._countAndFlagsBits, a1._object);
    if (value < 0) {
      BUG();
    }
    if ((unint64_t)value >= *(void *)(v27 + 16)) {
      BUG();
    }
    uint64_t countAndFlagsBits = v107;
    uint64_t v28 = ((*(unsigned __int8 *)(v107 + 80) + 32) & ~*(unsigned __int8 *)(v107 + 80))
        + v27
        + *(void *)(v107 + 72) * value;
    uint64_t v29 = v95._object;
    uint64_t v103 = v27;
    uint64_t v30 = v102;
    (*(void (**)(void *, uint64_t, void *))(v107 + 16))(v95._object, v28, v102);
    swift_bridgeObjectRelease(v103);
    uint64_t v31 = (void *)AnyColumn.wrappedElementType.getter();
    a1._uint64_t countAndFlagsBits = (uint64_t)v29;
    a1._char object = v30;
    (*(void (**)(void *, void *))(countAndFlagsBits + 8))(v29, v30);
    if (v31 == &type metadata for String)
    {
      swift_bridgeObjectRetain((_BYTE)object);
      return v95._countAndFlagsBits;
    }
  }
  if (((uint64_t (*)(void))DataFrame.shape.getter)() <= 0)
  {
    uint64_t v59 = lazy protocol witness table accessor for type MLCreateError and conformance MLCreateError();
    swift_allocError(&type metadata for MLCreateError, v59, 0, 0);
    *(void *)uint64_t v60 = 0xD00000000000001ALL;
    uint64_t v64 = "not in Data Table." + 0x8000000000000000;
LABEL_47:
    *(void *)(v60 + 8) = v64;
    *(_OWORD *)(v60 + 16) = 0;
    *(_OWORD *)(v60 + 32) = 0;
    *(unsigned char *)(v60 + 48) = 1;
    swift_willThrow(&type metadata for MLCreateError, v59, v60, v61, v62, v63);
    return countAndFlagsBits;
  }
  uint64_t v32 = DataFrame.columns.getter(a1._countAndFlagsBits, a1._object);
  unsigned int v101 = _swiftEmptyArrayStorage;
  unint64_t v105 = _swiftEmptyArrayStorage;
  uint64_t v86 = *(void *)(v32 + 16);
  uint64_t v33 = (uint64_t)v102;
  uint64_t v34 = v107;
  uint64_t v35 = (uint64_t)v100;
  uint64_t v90 = v32;
  if (v86)
  {
    unint64_t v36 = 0;
    while (1)
    {
      if (v36 >= *(void *)(v32 + 16)) {
        BUG();
      }
      uint64_t v37 = (*(unsigned __int8 *)(v34 + 80) + 32) & ~*(unsigned __int8 *)(v34 + 80);
      unint64_t v104 = *(void *)(v34 + 72);
      uint64_t v103 = v36;
      (*(void (**)(uint64_t, unint64_t, uint64_t))(v34 + 16))(v35, v37 + v32 + v36 * v104, v33);
      __swift_storeEnumTagSinglePayload(v35, 0, 1, v33);
      if (__swift_getEnumTagSinglePayload(v35, 1, v33) == 1) {
        break;
      }
      unint64_t v38 = v85;
      uint64_t v96 = *(void (**)(uint64_t *, uint64_t, uint64_t))(v107 + 32);
      v96(v85, v35, v33);
      if ((_UNKNOWN *)AnyColumn.wrappedElementType.getter() == &type metadata for String)
      {
        v96(v91, (uint64_t)v38, v33);
        uint64_t v40 = v105;
        if (!swift_isUniquelyReferenced_nonNull_native(v105))
        {
          specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v40[2] + 1, 1);
          uint64_t v40 = v105;
        }
        unint64_t v41 = v104;
        unint64_t v42 = v40[2];
        unint64_t v43 = v40[3];
        unint64_t v44 = v42 + 1;
        if (v43 >> 1 <= v42)
        {
          unint64_t v104 = v42 + 1;
          specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v43 >= 2, v42 + 1, 1);
          unint64_t v44 = v104;
          uint64_t v40 = v105;
        }
        v40[2] = v44;
        uint64_t v45 = (char *)v40 + v37 + v41 * v42;
        uint64_t v33 = (uint64_t)v102;
        v96((uint64_t *)v45, (uint64_t)v91, (uint64_t)v102);
        unint64_t v105 = v40;
        uint64_t v34 = v107;
      }
      else
      {
        uint64_t v39 = v38;
        uint64_t v34 = v107;
        (*(void (**)(uint64_t *, uint64_t))(v107 + 8))(v39, v33);
      }
      uint64_t v35 = (uint64_t)v100;
      unint64_t v36 = v103 + 1;
      uint64_t v32 = v90;
      if (v86 == v103 + 1) {
        goto LABEL_18;
      }
    }
  }
  else
  {
LABEL_18:
    __swift_storeEnumTagSinglePayload(v35, 1, 1, v33);
  }
  uint64_t v46 = v107;
  swift_bridgeObjectRelease(v90);
  outlined destroy of Either<LogisticRegressionClassifier<Float, String>, FullyConnectedNetworkClassifier<Float, String>>(v35, &demangling cache variable for type metadata for AnyColumn?);
  uint64_t v47 = v105;
  int64_t v48 = v105[2];
  if (v48)
  {
    unint64_t v105 = _swiftEmptyArrayStorage;
    uint64_t v103 = v48;
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v48, 0);
    uint64_t v49 = (*(unsigned __int8 *)(v46 + 80) + 32) & ~*(unsigned __int8 *)(v46 + 80);
    uint64_t v100 = v47;
    uint64_t v50 = (char *)v47 + v49;
    uint64_t v96 = *(void (**)(uint64_t *, uint64_t, uint64_t))(v46 + 16);
    unint64_t v104 = *(void *)(v46 + 72);
    uint64_t v51 = v102;
    do
    {
      uint64_t v52 = v95._object;
      v96((uint64_t *)v95._object, (uint64_t)v50, (uint64_t)v51);
      double v53 = AnyColumn.assumingType<A>(_:)(&type metadata for String, &type metadata for String);
      (*(void (**)(void *, void *, double))(v107 + 8))(v52, v51, v53);
      uint64_t v54 = (char *)v105;
      if (!swift_isUniquelyReferenced_nonNull_native(v105))
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, *((void *)v54 + 2) + 1, 1);
        uint64_t v54 = (char *)v105;
      }
      unint64_t v55 = *((void *)v54 + 2);
      uint64_t v56 = v98;
      if (*((void *)v54 + 3) >> 1 <= v55)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(*((void *)v54 + 3) >= 2uLL, v55 + 1, 1);
        uint64_t v56 = v98;
        uint64_t v54 = (char *)v105;
      }
      *((void *)v54 + 2) = v55 + 1;
      (*(void (**)(char *, uint64_t *, uint64_t))(v97 + 32))(&v54[((*(unsigned __int8 *)(v97 + 80) + 32) & ~*(unsigned __int8 *)(v97 + 80)) + *(void *)(v97 + 72) * v55], v99, v56);
      v50 += v104;
      BOOL v57 = v103-- == 1;
      uint64_t v51 = v102;
    }
    while (!v57);
    unsigned int v101 = v54;
    uint64_t v58 = v100;
  }
  else
  {
    uint64_t v58 = v105;
  }
  swift_release();
  double v65 = (double)(int)DataFrame.shape.getter(v58) * 0.2;
  if ((~*(void *)&v65 & 0x7FF0000000000000) == 0) {
    BUG();
  }
  if (v65 <= -9.223372036854778e18) {
    BUG();
  }
  if (v65 >= 9.223372036854776e18) {
    BUG();
  }
  uint64_t v66 = DataFrame.shape.getter(v58);
  uint64_t v67 = 10;
  if (v66 < 10) {
    uint64_t v67 = v66;
  }
  if (v67 <= (int)v65) {
    uint64_t v67 = (int)v65;
  }
  if (v67 < 0) {
    BUG();
  }
  uint64_t v68 = v98;
  uint64_t v69 = v87;
  if (!v67)
  {
LABEL_46:
    swift_bridgeObjectRelease((_BYTE)v101);
    unint64_t v105 = 0;
    unint64_t v106 = 0xE000000000000000;
    _StringGuts.grow(_:)(166);
    v75._uint64_t countAndFlagsBits = 0xD000000000000098;
    v75._char object = "Annotations file is empty." + 0x8000000000000000;
    String.append(_:)(v75);
    v75._uint64_t countAndFlagsBits = v95._countAndFlagsBits;
    v75._char object = object;
    String.append(_:)(v75);
    v75._uint64_t countAndFlagsBits = 0x2E316567616D693ALL;
    v75._char object = (void *)0xEC0000002E67706ALL;
    String.append(_:)(v75);
    uint64_t countAndFlagsBits = (uint64_t)v105;
    uint64_t v64 = (char *)v106;
    uint64_t v59 = lazy protocol witness table accessor for type MLCreateError and conformance MLCreateError();
    swift_allocError(&type metadata for MLCreateError, v59, 0, 0);
    *(void *)uint64_t v60 = countAndFlagsBits;
    goto LABEL_47;
  }
  uint64_t v99 = (uint64_t *)v101[2];
  uint64_t v70 = 0;
  uint64_t v103 = v67;
  while (1)
  {
    if (v70 == v67) {
      BUG();
    }
    if (v99) {
      break;
    }
LABEL_45:
    if (++v70 == v67) {
      goto LABEL_46;
    }
  }
  uint64_t v107 = v70;
  uint64_t v71 = v97;
  unint64_t v72 = (char *)v101 + ((*(unsigned __int8 *)(v97 + 80) + 32) & ~*(unsigned __int8 *)(v97 + 80));
  swift_bridgeObjectRetain((_BYTE)v101);
  uint64_t v102 = *(void **)(v71 + 16);
  v95._char object = *(void **)(v71 + 72);
  Swift::String v73 = v99;
  while (1)
  {
    ((void (*)(uint64_t *, char *, uint64_t))v102)(v69, v72, v68);
    Column.subscript.getter(v107, v68);
    char v74 = v84(&v105);
    swift_bridgeObjectRelease(v106);
    if (v74) {
      break;
    }
    uint64_t v68 = v98;
    (*(void (**)(uint64_t *, uint64_t))(v97 + 8))(v69, v98);
    v72 += (unint64_t)v95._object;
    Swift::String v73 = (uint64_t *)((char *)v73 - 1);
    if (!v73)
    {
      swift_bridgeObjectRelease((_BYTE)v101);
      uint64_t v67 = v103;
      uint64_t v70 = v107;
      goto LABEL_45;
    }
  }
  char v76 = (char)v101;
  swift_bridgeObjectRelease((_BYTE)v101);
  uint64_t v77 = v89;
  uint64_t v78 = v69;
  uint64_t v79 = v98;
  uint64_t v80 = *(void (**)(uint64_t *, uint64_t *, uint64_t))(v97 + 32);
  v80(v89, v78, v98);
  swift_bridgeObjectRelease(v76);
  uint64_t v81 = v88;
  v80(v88, v77, v79);
  uint64_t countAndFlagsBits = Column.name.getter(v79);
  (*(void (**)(uint64_t *, uint64_t))(v97 + 8))(v81, v79);
  return countAndFlagsBits;
}

uint64_t *closure #3 in MLObjectDetector.DataSource.gatherAnnotatedFileNames()(uint64_t *a1, uint64_t a2)
{
  uint64_t v28 = a2;
  uint64_t v27 = v2;
  int64_t v3 = *(void *)(*(void *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for URL?)
                             - 8)
                 + 64);
  uint64_t v4 = alloca(v3);
  int64_t v5 = alloca(v3);
  uint64_t v34 = &v26;
  uint64_t v6 = type metadata accessor for URL.DirectoryHint(0);
  uint64_t v30 = *(void *)(v6 - 8);
  int64_t v7 = *(void *)(v30 + 64);
  int64_t v8 = alloca(v7);
  uint64_t v9 = alloca(v7);
  uint64_t v32 = &v26;
  uint64_t v35 = type metadata accessor for URL(0);
  uint64_t v33 = *(void *)(v35 - 8);
  int64_t v10 = *(void *)(v33 + 64);
  uint64_t v11 = alloca(v10);
  uint64_t v12 = alloca(v10);
  uint64_t v29 = &v26;
  int64_t v13 = alloca(v10);
  int64_t v14 = alloca(v10);
  uint64_t v31 = *a1;
  uint64_t v15 = a1[1];
  (*(void (**)(uint64_t *, void, uint64_t))(v30 + 104))(&v26, enum case for URL.DirectoryHint.notDirectory(_:), v6);
  id v16 = v34;
  uint64_t v17 = v35;
  (*(void (**)(uint64_t *, uint64_t, uint64_t))(v33 + 16))(v34, v28, v35);
  uint64_t v18 = (uint64_t)v16;
  uint64_t v19 = v17;
  __swift_storeEnumTagSinglePayload(v18, 0, 1, v17);
  swift_bridgeObjectRetain(v15);
  URL.init(filePath:directoryHint:relativeTo:)(v31, v15, v32, v34);
  uint64_t v20 = v29;
  URL.absoluteURL.getter();
  uint64_t v21 = *(void (**)(uint64_t *, uint64_t))(v33 + 8);
  v21(&v26, v19);
  uint64_t v22 = URL.path.getter(&v26);
  uint64_t v24 = v23;
  v21(v20, v35);
  uint64_t result = v27;
  *uint64_t v27 = v22;
  result[1] = v24;
  return result;
}

uint64_t closure #4 in MLObjectDetector.DataSource.gatherAnnotatedFileNames()(uint64_t *a1)
{
  uint64_t v22 = type metadata accessor for UTType(0);
  uint64_t v21 = *(void *)(v22 - 8);
  int64_t v1 = *(void *)(v21 + 64);
  int64_t v2 = alloca(v1);
  int64_t v3 = alloca(v1);
  uint64_t v23 = &v20;
  uint64_t v25 = type metadata accessor for URL.DirectoryHint(0);
  uint64_t v24 = *(void *)(v25 - 8);
  int64_t v4 = *(void *)(v24 + 64);
  int64_t v5 = alloca(v4);
  uint64_t v6 = alloca(v4);
  int64_t v7 = *(void *)(*(void *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for URL?)
                             - 8)
                 + 64);
  int64_t v8 = alloca(v7);
  uint64_t v9 = alloca(v7);
  uint64_t v10 = type metadata accessor for URL(0);
  uint64_t v11 = *(void *)(v10 - 8);
  int64_t v12 = *(void *)(v11 + 64);
  int64_t v13 = alloca(v12);
  int64_t v14 = alloca(v12);
  uint64_t v15 = a1[1];
  if (v15)
  {
    uint64_t v28 = *a1;
    uint64_t v26 = v11;
    uint64_t v27 = v10;
    __swift_storeEnumTagSinglePayload((uint64_t)&v20, 1, 1, v10);
    (*(void (**)(uint64_t *, void, uint64_t))(v24 + 104))(&v20, enum case for URL.DirectoryHint.inferFromPath(_:), v25);
    swift_bridgeObjectRetain(v15);
    URL.init(filePath:directoryHint:relativeTo:)(v28, v15, &v20, &v20);
    uint64_t v16 = (uint64_t)v23;
    static UTType.image.getter();
    LOBYTE(v17) = static _FileUtilities.isReadableFile(at:of:)((uint64_t)&v20, v16);
    unsigned int v18 = v17;
    (*(void (**)(uint64_t, uint64_t))(v21 + 8))(v16, v22);
    (*(void (**)(uint64_t *, uint64_t))(v26 + 8))(&v20, v27);
  }
  else
  {
    return 0;
  }
  return v18;
}

uint64_t static MLObjectDetector.DataSource.normalizedAnnotations(annotatedObjects:filename:annotationType:)(unint64_t *a1, uint64_t a2, uint64_t a3, char *a4)
{
  v41.f64[0] = v4;
  *(void *)&v42.f64[0] = a3;
  unint64_t v44 = a1;
  uint64_t v40 = type metadata accessor for URL(0);
  CGFloat x = *(double *)(v40 - 8);
  int64_t v7 = *(void *)(*(void *)&x + 64);
  int64_t v8 = alloca(v7);
  uint64_t v9 = alloca(v7);
  uint64_t v10 = &v30;
  char v45 = *a4;
  char v46 = a4[1];
  int v11 = a4[2];
  URL.init(fileURLWithPath:)(a2, *(void *)&v42.f64[0]);
  double v12 = v41.f64[0];
  int64_t v13 = (const char *)static ImageReader.read(url:)(&v30);
  if (v12 == 0.0)
  {
    uint64_t v37 = 0;
    CGFloat v39 = x;
    int64_t v14 = (char *)v13;
    objc_msgSend_stret(&rect, v13, "extent");
    v15.f64[1] = rect.origin.y;
    v15.f64[0] = CGRectGetWidth(rect);
    __m128d v41 = v15;
    objc_msgSend_stret(&rect, v14, "extent");
    v16.f64[1] = rect.origin.y;
    v16.f64[0] = CGRectGetHeight(rect);
    int64_t v17 = v44[2];
    if (v17)
    {
      id v38 = v14;
      __m128 v31 = _mm_cvtpd_ps(_mm_unpacklo_pd(v41, v16));
      *(void *)&rect.origin.CGFloat x = _swiftEmptyArrayStorage;
      specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v17, 0);
      uint64_t v18 = v17;
      CGFloat x = rect.origin.x;
      uint64_t v19 = v44 + 7;
      uint64_t v35 = &v30;
      int v43 = v11;
      do
      {
        __m128 inserted = (__m128)*(v19 - 1);
        __m128 v21 = (__m128)*v19;
        if ((v45 & 1) == 0)
        {
          __m128 inserted = _mm_div_ps(inserted, v31);
          __m128 v21 = _mm_div_ps(v21, v31);
        }
        if ((v46 & 1) == 0)
        {
          __m128 v22 = (__m128)0x3F800000u;
          v22.f32[0] = 1.0 - _mm_movehdup_ps(inserted).f32[0];
          __m128 inserted = _mm_insert_ps(inserted, v22, 16);
        }
        *(void *)&v41.f64[0] = v18;
        __m128d v30 = (__m128d)v21;
        if (v11)
        {
          if (v11 == 1)
          {
            __m128 v23 = _mm_mul_ps(v21, (__m128)xmmword_347CC0);
            __m128 inserted = _mm_blend_ps(_mm_sub_ps(inserted, v23), _mm_add_ps(inserted, v23), 13);
          }
          else
          {
            __m128 inserted = _mm_add_ps(inserted, _mm_mul_ps(v21, (__m128)xmmword_347CC0));
          }
        }
        __m128d v42 = (__m128d)inserted;
        uint64_t v33 = *(v19 - 3);
        uint64_t v24 = *(v19 - 2);
        rect.origin.CGFloat x = x;
        unint64_t v25 = *(void *)(*(void *)&x + 16);
        unint64_t v36 = *(void *)(*(void *)&x + 24);
        unint64_t v26 = v36 >> 1;
        unint64_t v44 = v19;
        uint64_t v34 = v24;
        swift_bridgeObjectRetain(v24);
        if (v26 <= v25)
        {
          specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v36 >= 2, v25 + 1, 1);
          CGFloat x = rect.origin.x;
        }
        *(void *)(*(void *)&x + 16) = v25 + 1;
        uint64_t v27 = 32 * v25;
        *(void *)(*(void *)&x + v27 + 32) = v33;
        *(void *)(*(void *)&x + v27 + 40) = v34;
        *(__m128d *)(*(void *)&x + v27 + 48) = _mm_unpacklo_pd(v42, v30);
        uint64_t v19 = v44 + 4;
        uint64_t v18 = *(void *)&v41.f64[0] - 1;
        CGFloat v28 = v39;
        uint64_t v10 = v35;
        int v11 = v43;
      }
      while (*(void *)&v41.f64[0] != 1);
    }
    else
    {

      CGFloat x = COERCE_DOUBLE(_swiftEmptyArrayStorage);
      CGFloat v28 = v39;
    }
    (*(void (**)(__m128d *, uint64_t))(*(void *)&v28 + 8))(v10, v40);
  }
  else
  {
    (*(void (**)(__m128d *, uint64_t))(*(void *)&x + 8))(&v30, v40);
  }
  return *(void *)&x;
}

uint64_t closure #1 in MLObjectDetector.DataSource.gatherAnnotatedImages(annotationType:)(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 8);
  *int64_t v1 = *(_OWORD *)a1;
  return swift_bridgeObjectRetain(v2);
}

char MLObjectDetector.DataSource.imagesWithObjectAnnotations()(__m128 a1)
{
  return static _ImageUtilities.getImageURLsAndObjectAnnotations(from:imageColumnName:labelColumnName:)(v1, 0, 0, 0, 0, a1);
}

char MLObjectDetector.DataSource.stratifiedSplit(proportions:seed:annotationColumn:)(uint64_t a1, uint64_t a2, uint64_t a3, void *a4, __m128 a5)
{
  char result = static _ImageUtilities.getImageURLsAndObjectAnnotations(from:imageColumnName:labelColumnName:)(v6, 0, 0, 0, 0, a5);
  if (!v5)
  {
    if (a2 < 0)
    {
      _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, "Negative value is not representable", 35, 2, "Swift/Integers.swift", 20, 2, 3451, 1);
      BUG();
    }
    double v12 = v13;
    char v9 = v14;
    uint64_t v10 = type metadata accessor for MersenneTwisterGenerator();
    swift_allocObject(v10, 136, 7);
    int64_t v13 = MersenneTwisterGenerator.init(seed:)(a2);
    specialized stratifiedSplitGenerator<A>(proportions:generator:dataTable:on:)(a1, (uint64_t)&v13, v12, v14, a3, a4, *(double *)a5.i64);
    swift_release();
    return outlined consume of Result<_DataTable, Error>((uint64_t)v12, v9);
  }
  return result;
}

uint64_t MLObjectDetector.ObjectAnnotation.label.getter()
{
  uint64_t v1 = *v0;
  swift_bridgeObjectRetain(v0[1]);
  return v1;
}

uint64_t MLObjectDetector.ObjectAnnotation.label.setter(uint64_t a1, uint64_t a2)
{
  uint64_t result = swift_bridgeObjectRelease(v2[1]);
  void *v2 = a1;
  v2[1] = a2;
  return result;
}

void (*MLObjectDetector.ObjectAnnotation.label.modify())()
{
  return MLBoostedTreeRegressor.ModelParameters.maxDepth.modify;
}

double MLObjectDetector.ObjectAnnotation.boundingBox.getter()
{
  return *(double *)(v0 + 16);
}

void MLObjectDetector.ObjectAnnotation.boundingBox.setter(double a1, double a2, double a3, double a4)
{
  v4[2] = a1;
  v4[3] = a2;
  v4[4] = a3;
  v4[5] = a4;
}

void (*MLObjectDetector.ObjectAnnotation.boundingBox.modify())()
{
  return MLBoostedTreeRegressor.ModelParameters.maxDepth.modify;
}

double MLObjectDetector.ObjectAnnotation.confidence.getter()
{
  return *(double *)(v0 + 48);
}

void MLObjectDetector.ObjectAnnotation.confidence.setter(double a1)
{
  *(double *)(v1 + 48) = a1;
}

void (*MLObjectDetector.ObjectAnnotation.confidence.modify())()
{
  return MLBoostedTreeRegressor.ModelParameters.maxDepth.modify;
}

char static MLObjectDetector.DecodableAnnotation.Coordinates.== infix(_:_:)(__m128 a1, __m128 a2, float a3, float a4, __m128 a5, __m128 a6, float a7, float a8)
{
  return _mm_cvtsi128_si32((__m128i)_mm_and_ps(_mm_cmpeq_ps(a1, a5), _mm_cmpeq_ps(a2, a6))) & (a3 == a7 && a4 == a8);
}

BOOL static MLObjectDetector.DecodableAnnotation.Coordinates.CodingKeys.== infix(_:_:)(char a1, char a2)
{
  return a1 == a2;
}

void MLObjectDetector.DecodableAnnotation.Coordinates.CodingKeys.hash(into:)(uint64_t a1, unsigned __int8 a2)
{
}

char MLObjectDetector.DecodableAnnotation.Coordinates.CodingKeys.init(stringValue:)(uint64_t a1, unint64_t a2)
{
  if (a1 == 120 && a2 == 0xE100000000000000)
  {
    unint64_t v2 = 0xE100000000000000;
LABEL_6:
    swift_bridgeObjectRelease(v2);
    return 0;
  }
  if (_stringCompareWithSmolCheck(_:_:expecting:)(120, 0xE100000000000000, a1, a2, 0))
  {
    unint64_t v2 = a2;
    goto LABEL_6;
  }
  if (a1 == 121 && a2 == 0xE100000000000000)
  {
    unint64_t v4 = 0xE100000000000000;
LABEL_13:
    swift_bridgeObjectRelease(v4);
    return 1;
  }
  if (_stringCompareWithSmolCheck(_:_:expecting:)(121, 0xE100000000000000, a1, a2, 0))
  {
    unint64_t v4 = a2;
    goto LABEL_13;
  }
  if (a1 == 0x6874646977 && a2 == 0xE500000000000000)
  {
    unint64_t v5 = 0xE500000000000000;
LABEL_19:
    swift_bridgeObjectRelease(v5);
    return 2;
  }
  if (_stringCompareWithSmolCheck(_:_:expecting:)(0x6874646977, 0xE500000000000000, a1, a2, 0))
  {
    unint64_t v5 = a2;
    goto LABEL_19;
  }
  if (a1 == 0x746867696568 && a2 == 0xE600000000000000)
  {
    swift_bridgeObjectRelease(0xE600000000000000);
    return 3;
  }
  else
  {
    char v6 = _stringCompareWithSmolCheck(_:_:expecting:)(0x746867696568, 0xE600000000000000, a1, a2, 0);
    swift_bridgeObjectRelease(a2);
    return 4 - (v6 & 1);
  }
}

char MLObjectDetector.DecodableAnnotation.Coordinates.CodingKeys.init(intValue:)()
{
  return 4;
}

Swift::Int MLObjectDetector.DecodableAnnotation.Coordinates.CodingKeys.hashValue.getter(unsigned __int8 a1)
{
  return Hasher._finalize()();
}

uint64_t MLObjectDetector.DecodableAnnotation.Coordinates.CodingKeys.stringValue.getter(char a1)
{
  switch(a1)
  {
    case 0:
      uint64_t result = 120;
      break;
    case 1:
      uint64_t result = 121;
      break;
    case 2:
      uint64_t result = 0x6874646977;
      break;
    case 3:
      uint64_t result = 0x746867696568;
      break;
  }
  return result;
}

uint64_t MLObjectDetector.DecodableAnnotation.Coordinates.encode(to:)(void *a1, float a2, float a3, float a4, float a5)
{
  uint64_t v17 = v5;
  float v22 = a5;
  float v21 = a4;
  float v20 = a3;
  v27[0] = a2;
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<MLObjectDetector.DecodableAnnotation.Coordinates.CodingKeys>);
  uint64_t v19 = *(void *)(v6 - 8);
  int64_t v7 = *(void *)(v19 + 64);
  int64_t v8 = alloca(v7);
  char v9 = alloca(v7);
  uint64_t v10 = a1[3];
  uint64_t v18 = a1[4];
  __swift_project_boxed_opaque_existential_0Tm(a1, v10);
  uint64_t v11 = lazy protocol witness table accessor for type MLObjectDetector.DecodableAnnotation.Coordinates.CodingKeys and conformance MLObjectDetector.DecodableAnnotation.Coordinates.CodingKeys();
  dispatch thunk of Encoder.container<A>(keyedBy:)(&unk_397E40, &unk_397E40, v11, v10, v18);
  char v23 = 0;
  float v12 = v27[0];
  *(void *)uint64_t v27 = &v17;
  uint64_t v13 = v17;
  KeyedEncodingContainer.encode(_:forKey:)(&v23, v6, v12);
  if (v13) {
    return (*(uint64_t (**)(void *, uint64_t))(v19 + 8))(*(void **)v27, v6);
  }
  uint64_t v15 = v19;
  char v24 = 1;
  KeyedEncodingContainer.encode(_:forKey:)(&v24, v6, v20);
  char v25 = 2;
  KeyedEncodingContainer.encode(_:forKey:)(&v25, v6, v21);
  char v26 = 3;
  __m128d v16 = *(void **)v27;
  KeyedEncodingContainer.encode(_:forKey:)(&v26, v6, v22);
  return (*(uint64_t (**)(void *, uint64_t))(v15 + 8))(v16, v6);
}

uint64_t MLObjectDetector.DecodableAnnotation.Coordinates.init(from:)(void *a1, float a2)
{
  uint64_t v15 = v2;
  uint64_t v22 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<MLObjectDetector.DecodableAnnotation.Coordinates.CodingKeys>);
  uint64_t v12 = *(void *)(v22 - 8);
  int64_t v3 = *(void *)(v12 + 64);
  unint64_t v4 = alloca(v3);
  uint64_t v5 = alloca(v3);
  uint64_t v6 = a1[3];
  *(void *)__m128d v16 = a1[4];
  __swift_project_boxed_opaque_existential_0Tm(a1, v6);
  uint64_t v7 = lazy protocol witness table accessor for type MLObjectDetector.DecodableAnnotation.Coordinates.CodingKeys and conformance MLObjectDetector.DecodableAnnotation.Coordinates.CodingKeys();
  float v21 = &v11;
  dispatch thunk of Decoder.container<A>(keyedBy:)(&unk_397E40, &unk_397E40, v7, v6, *(void *)v16);
  uint64_t v8 = v12;
  char v17 = 0;
  KeyedDecodingContainer.decode(_:forKey:)(&v17, v22);
  *(float *)&uint64_t v15 = a2;
  char v18 = 1;
  KeyedDecodingContainer.decode(_:forKey:)(&v18, v22);
  v16[0] = a2;
  char v19 = 2;
  KeyedDecodingContainer.decode(_:forKey:)(&v19, v22);
  float v13 = a2;
  char v20 = 3;
  char v9 = v21;
  KeyedDecodingContainer.decode(_:forKey:)(&v20, v22);
  float v14 = a2;
  (*(void (**)(uint64_t *, uint64_t))(v8 + 8))(v9, v22);
  return __swift_destroy_boxed_opaque_existential_1Tm(a1);
}

BOOL protocol witness for static Equatable.== infix(_:_:) in conformance MLObjectDetector.DecodableAnnotation.Coordinates.CodingKeys(char *a1, char *a2)
{
  return static MLObjectDetector.DecodableAnnotation.Coordinates.CodingKeys.== infix(_:_:)(*a1, *a2);
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance MLObjectDetector.DecodableAnnotation.Coordinates.CodingKeys()
{
  return MLObjectDetector.DecodableAnnotation.Coordinates.CodingKeys.hashValue.getter(*v0);
}

void protocol witness for Hashable.hash(into:) in conformance MLObjectDetector.DecodableAnnotation.Coordinates.CodingKeys(uint64_t a1)
{
  MLObjectDetector.DecodableAnnotation.Coordinates.CodingKeys.hash(into:)(a1, *v1);
}

uint64_t protocol witness for CodingKey.stringValue.getter in conformance MLObjectDetector.DecodableAnnotation.Coordinates.CodingKeys()
{
  return MLObjectDetector.DecodableAnnotation.Coordinates.CodingKeys.stringValue.getter(*v0);
}

char protocol witness for CodingKey.init(stringValue:) in conformance MLObjectDetector.DecodableAnnotation.Coordinates.CodingKeys(uint64_t a1, unint64_t a2)
{
  int64_t v3 = v2;
  char result = MLObjectDetector.DecodableAnnotation.Coordinates.CodingKeys.init(stringValue:)(a1, a2);
  *int64_t v3 = result;
  return result;
}

char protocol witness for CodingKey.init(intValue:) in conformance MLObjectDetector.DecodableAnnotation.Coordinates.CodingKeys()
{
  uint64_t v1 = v0;
  char result = MLObjectDetector.DecodableAnnotation.Coordinates.CodingKeys.init(intValue:)();
  *uint64_t v1 = result;
  return result;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance MLObjectDetector.DecodableAnnotation.Coordinates.CodingKeys(uint64_t a1)
{
  uint64_t v1 = lazy protocol witness table accessor for type MLObjectDetector.DecodableAnnotation.Coordinates.CodingKeys and conformance MLObjectDetector.DecodableAnnotation.Coordinates.CodingKeys();
  return CodingKey.description.getter(a1, v1);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance MLObjectDetector.DecodableAnnotation.Coordinates.CodingKeys(uint64_t a1)
{
  uint64_t v1 = lazy protocol witness table accessor for type MLObjectDetector.DecodableAnnotation.Coordinates.CodingKeys and conformance MLObjectDetector.DecodableAnnotation.Coordinates.CodingKeys();
  return CodingKey.debugDescription.getter(a1, v1);
}

uint64_t protocol witness for Decodable.init(from:) in conformance MLObjectDetector.DecodableAnnotation.Coordinates(void *a1, float a2, float a3, float a4, float a5)
{
  uint64_t v7 = v5;
  uint64_t result = MLObjectDetector.DecodableAnnotation.Coordinates.init(from:)(a1, a2);
  if (!v6)
  {
    *uint64_t v7 = a2;
    v7[1] = a3;
    v7[2] = a4;
    void v7[3] = a5;
  }
  return result;
}

uint64_t protocol witness for Encodable.encode(to:) in conformance MLObjectDetector.DecodableAnnotation.Coordinates(void *a1)
{
  return MLObjectDetector.DecodableAnnotation.Coordinates.encode(to:)(a1, *v1, v1[1], v1[2], v1[3]);
}

char protocol witness for static Equatable.== infix(_:_:) in conformance MLObjectDetector.DecodableAnnotation.Coordinates(float *a1, float *a2)
{
  return static MLObjectDetector.DecodableAnnotation.Coordinates.== infix(_:_:)((__m128)*(unsigned int *)a1, (__m128)*((unsigned int *)a1 + 1), a1[2], a1[3], (__m128)*(unsigned int *)a2, (__m128)*((unsigned int *)a2 + 1), a2[2], a2[3]);
}

void *MLObjectDetector.DecodableAnnotation.init(from:)(uint64_t *a1, __m128i a2)
{
  uint64_t v3 = *a1;
  if (!*(void *)(*a1 + 16)) {
    goto LABEL_15;
  }
  uint64_t v4 = v2;
  swift_bridgeObjectRetain(*a1);
  *(void *)&long long v5 = 0x6C6562616CLL;
  *((void *)&v5 + 1) = 0xE500000000000000;
  unint64_t v6 = specialized __RawDictionaryStorage.find<A>(_:)(v5, 2);
  if ((v7 & 1) == 0)
  {
    swift_bridgeObjectRelease(v3);
LABEL_15:
    swift_bridgeObjectRelease(v3);
    uint64_t v28 = lazy protocol witness table accessor for type MLCreateError and conformance MLCreateError();
    swift_allocError(&type metadata for MLCreateError, v28, 0, 0);
    *(void *)uint64_t v29 = 0xD00000000000001ELL;
    uint64_t v33 = ", Bounding Box: ";
LABEL_16:
    *(void *)(v29 + 8) = (unint64_t)v33 | 0x8000000000000000;
    *(_OWORD *)(v29 + 16) = 0;
    *(_OWORD *)(v29 + 32) = 0;
    *(unsigned char *)(v29 + 48) = 0;
    return (void *)swift_willThrow(&type metadata for MLCreateError, v28, v29, v30, v31, v32);
  }
  uint64_t v71 = v4;
  uint64_t v8 = *(void *)(v3 + 56);
  uint64_t v9 = 24 * v6;
  uint64_t v10 = *(void **)(v8 + v9);
  uint64_t v11 = *(void **)(v8 + v9 + 8);
  char v12 = *(unsigned char *)(v8 + v9 + 16);
  outlined copy of MLDataValue(v10, v11, v12);
  swift_bridgeObjectRelease(v3);
  if (v12 != 2)
  {
    outlined consume of MLDataValue(v10, v11, v12);
    goto LABEL_15;
  }
  Swift::String v75 = v10;
  char v74 = v11;
  if (!*(void *)(v3 + 16)
    || (*(void *)&long long v13 = 0x616E6964726F6F63,
        *((void *)&v13 + 1) = 0xEB00000000736574,
        unint64_t v14 = specialized __RawDictionaryStorage.find<A>(_:)(v13, 2),
        (v15 & 1) == 0))
  {
    swift_bridgeObjectRelease(v3);
LABEL_18:
    outlined consume of MLDataValue(v75, v74, 2);
    uint64_t v28 = lazy protocol witness table accessor for type MLCreateError and conformance MLCreateError();
    swift_allocError(&type metadata for MLCreateError, v28, 0, 0);
    *(void *)uint64_t v29 = 0xD000000000000024;
    uint64_t v33 = "Missing label from annotation.";
    goto LABEL_16;
  }
  uint64_t v16 = *(void *)(v3 + 56);
  uint64_t v17 = 24 * v14;
  char v18 = *(void **)(v16 + v17);
  char v19 = *(void **)(v16 + v17 + 8);
  char v20 = *(unsigned char *)(v16 + v17 + 16);
  outlined copy of MLDataValue(v18, v19, v20);
  swift_bridgeObjectRelease(v3);
  if (v20 != 4)
  {
    outlined consume of MLDataValue(v18, v19, v20);
    goto LABEL_18;
  }
  if (!v18[2])
  {
LABEL_21:
    outlined consume of MLDataValue(v75, v74, 2);
    outlined consume of MLDataValue(v18, v19, 4);
    uint64_t v28 = lazy protocol witness table accessor for type MLCreateError and conformance MLCreateError();
    swift_allocError(&type metadata for MLCreateError, v28, 0, 0);
    *(void *)uint64_t v29 = 0xD000000000000034;
    uint64_t v33 = "tes from annotation.";
    goto LABEL_16;
  }
  swift_bridgeObjectRetain((_BYTE)v18);
  *(void *)&long long v21 = 120;
  *((void *)&v21 + 1) = 0xE100000000000000;
  unint64_t v22 = specialized __RawDictionaryStorage.find<A>(_:)(v21, 2);
  if ((v23 & 1) == 0)
  {
    outlined consume of MLDataValue(v18, v19, 4);
    goto LABEL_21;
  }
  uint64_t v24 = v18[7];
  uint64_t v25 = 24 * v22;
  int v26 = *(unsigned __int8 *)(v24 + v25 + 16);
  uint64_t v27 = *(void **)(v24 + v25);
  uint64_t v67 = *(void **)(v24 + v25 + 8);
  outlined copy of MLDataValue(v27, v67, *(unsigned char *)(v24 + v25 + 16));
  outlined consume of MLDataValue(v18, v19, 4);
  switch(v26)
  {
    case 0:
      *(double *)a2.i64 = (double)(int)v27;
      goto LABEL_27;
    case 2:
      uint64_t v35 = specialized Double.init<A>(_:)((unint64_t)v27, (uint64_t)v67);
      if ((v36 & 1) == 0)
      {
        a2 = (__m128i)(unint64_t)v35;
        goto LABEL_27;
      }
      break;
    case 1:
      a2 = (__m128i)(unint64_t)v27;
      goto LABEL_27;
    default:
      outlined consume of MLDataValue(v27, v67, v26);
      break;
  }
  a2 = _mm_loadl_epi64((const __m128i *)&qword_3478B0);
LABEL_27:
  if (!v18[2])
  {
LABEL_34:
    outlined consume of MLDataValue(v75, v74, 2);
    outlined consume of MLDataValue(v18, v19, 4);
    uint64_t v28 = lazy protocol witness table accessor for type MLCreateError and conformance MLCreateError();
    swift_allocError(&type metadata for MLCreateError, v28, 0, 0);
    *(void *)uint64_t v29 = 0xD000000000000034;
    uint64_t v33 = "ate from annotation.";
    goto LABEL_16;
  }
  __m128d v68 = (__m128d)a2;
  swift_bridgeObjectRetain((_BYTE)v18);
  *(void *)&long long v37 = 121;
  *((void *)&v37 + 1) = 0xE100000000000000;
  unint64_t v38 = specialized __RawDictionaryStorage.find<A>(_:)(v37, 2);
  if ((v39 & 1) == 0)
  {
    outlined consume of MLDataValue(v18, v19, 4);
    goto LABEL_34;
  }
  uint64_t v40 = v18[7];
  uint64_t v41 = 24 * v38;
  __m128d v42 = *(void **)(v40 + v41);
  int v43 = *(unsigned __int8 *)(v40 + v41 + 16);
  uint64_t v69 = *(void **)(v40 + v41 + 8);
  outlined copy of MLDataValue(v42, v69, *(unsigned char *)(v40 + v41 + 16));
  outlined consume of MLDataValue(v18, v19, 4);
  switch(v43)
  {
    case 0:
      *(double *)a2.i64 = (double)(int)v42;
      goto LABEL_40;
    case 2:
      uint64_t v44 = specialized Double.init<A>(_:)((unint64_t)v42, (uint64_t)v69);
      if ((v45 & 1) == 0)
      {
        a2 = (__m128i)(unint64_t)v44;
        goto LABEL_40;
      }
      break;
    case 1:
      a2 = (__m128i)(unint64_t)v42;
      goto LABEL_40;
    default:
      outlined consume of MLDataValue(v42, v69, v43);
      break;
  }
  a2 = _mm_loadl_epi64((const __m128i *)&qword_3478B0);
LABEL_40:
  if (!v18[2])
  {
LABEL_47:
    outlined consume of MLDataValue(v75, v74, 2);
    outlined consume of MLDataValue(v18, v19, 4);
    uint64_t v28 = lazy protocol witness table accessor for type MLCreateError and conformance MLCreateError();
    swift_allocError(&type metadata for MLCreateError, v28, 0, 0);
    *(void *)uint64_t v29 = 0xD000000000000033;
    uint64_t v33 = "ate from annotation.";
    goto LABEL_16;
  }
  __m128d v70 = (__m128d)a2;
  swift_bridgeObjectRetain((_BYTE)v18);
  *(void *)&long long v46 = 0x6874646977;
  *((void *)&v46 + 1) = 0xE500000000000000;
  unint64_t v47 = specialized __RawDictionaryStorage.find<A>(_:)(v46, 2);
  if ((v48 & 1) == 0)
  {
    outlined consume of MLDataValue(v18, v19, 4);
    goto LABEL_47;
  }
  uint64_t v49 = v18[7];
  uint64_t v50 = 24 * v47;
  uint64_t v51 = v18;
  uint64_t v52 = *(void **)(v49 + v50);
  int v53 = *(unsigned __int8 *)(v49 + v50 + 16);
  v72.i64[0] = *(void *)(v49 + v50 + 8);
  outlined copy of MLDataValue(v52, (void *)v72.i64[0], v53);
  Swift::String v73 = v51;
  outlined consume of MLDataValue(v51, v19, 4);
  if (!v53)
  {
    *(double *)a2.i64 = (double)(int)v52;
    goto LABEL_53;
  }
  if (v53 == 2)
  {
    uint64_t v54 = specialized Double.init<A>(_:)((unint64_t)v52, v72.i64[0]);
    if ((v55 & 1) == 0)
    {
      a2 = (__m128i)(unint64_t)v54;
      goto LABEL_53;
    }
LABEL_52:
    a2 = _mm_loadl_epi64((const __m128i *)&qword_3478B0);
    goto LABEL_53;
  }
  if (v53 != 1)
  {
    outlined consume of MLDataValue(v52, (void *)v72.i64[0], v53);
    goto LABEL_52;
  }
  a2 = (__m128i)(unint64_t)v52;
LABEL_53:
  __m128i v72 = a2;
  if (!*((void *)v73 + 2)
    || (*(void *)&long long v56 = 0x746867696568,
        *((void *)&v56 + 1) = 0xE600000000000000,
        unint64_t v57 = specialized __RawDictionaryStorage.find<A>(_:)(v56, 2),
        (v58 & 1) == 0))
  {
    outlined consume of MLDataValue(v73, v19, 4);
    outlined consume of MLDataValue(v75, v74, 2);
    uint64_t v28 = lazy protocol witness table accessor for type MLCreateError and conformance MLCreateError();
    swift_allocError(&type metadata for MLCreateError, v28, 0, 0);
    *(void *)uint64_t v29 = 0xD000000000000034;
    uint64_t v33 = "ue from annotation.";
    goto LABEL_16;
  }
  uint64_t v59 = *((void *)v73 + 7);
  uint64_t v60 = 24 * v57;
  uint64_t v61 = v73;
  uint64_t v62 = *(void **)(v59 + v60);
  int v63 = *(unsigned __int8 *)(v59 + v60 + 16);
  Swift::String v73 = *(void **)(v59 + v60 + 8);
  outlined copy of MLDataValue(v62, v73, v63);
  outlined consume of MLDataValue(v61, v19, 4);
  if (!v63)
  {
    *(double *)a2.i64 = (double)(int)v62;
    goto LABEL_65;
  }
  if (v63 == 2)
  {
    uint64_t v64 = specialized Double.init<A>(_:)((unint64_t)v62, (uint64_t)v73);
    if ((v65 & 1) == 0)
    {
      a2 = (__m128i)(unint64_t)v64;
      goto LABEL_65;
    }
LABEL_64:
    a2 = _mm_loadl_epi64((const __m128i *)&qword_3478B0);
    goto LABEL_65;
  }
  if (v63 != 1)
  {
    outlined consume of MLDataValue(v62, v73, v63);
    goto LABEL_64;
  }
  a2 = (__m128i)(unint64_t)v62;
LABEL_65:
  uint64_t result = v74;
  __m128d v66 = (__m128d)_mm_cvtpd_ps((__m128d)_mm_unpacklo_epi64(_mm_load_si128(&v72), a2));
  *(void *)uint64_t v71 = v75;
  *(void *)(v71 + 8) = result;
  *(__m128d *)(v71 + 16) = _mm_unpacklo_pd((__m128d)_mm_cvtpd_ps(_mm_unpacklo_pd(v68, v70)), v66);
  return result;
}

uint64_t static MLObjectDetector.DecodableAnnotation.== infix(_:_:)(uint64_t *a1, uint64_t a2)
{
  uint64_t v5 = *a1;
  uint64_t v6 = a1[1];
  uint64_t v7 = *(void *)(a2 + 8);
  if (v5 == *(void *)a2 && v6 == v7
    || (unsigned int v2 = 0, (_stringCompareWithSmolCheck(_:_:expecting:)(v5, v6, *(void *)a2, v7, 0) & 1) != 0))
  {
    if (*((float *)a1 + 4) != *(float *)(a2 + 16)) {
      return 0;
    }
    __m128 v8 = _mm_cmpeq_ps((__m128)*(unint64_t *)((char *)a1 + 20), (__m128)*(unint64_t *)(a2 + 20));
    unsigned __int8 v9 = _mm_movemask_pd((__m128d)_mm_unpacklo_ps(v8, v8));
    if ((v9 & 1) == 0) {
      return 0;
    }
    if (!(v9 >> 1)) {
      return 0;
    }
    LOBYTE(v2) = 1;
    if (*((float *)a1 + 7) != *(float *)(a2 + 28)) {
      return 0;
    }
  }
  return v2;
}

char MLObjectDetector.DecodableAnnotation.CodingKeys.init(stringValue:)(uint64_t a1, unint64_t a2)
{
  if (a1 == 0x6C6562616CLL && a2 == 0xE500000000000000)
  {
    unint64_t v2 = 0xE500000000000000;
LABEL_6:
    swift_bridgeObjectRelease(v2);
    return 0;
  }
  if (_stringCompareWithSmolCheck(_:_:expecting:)(0x6C6562616CLL, 0xE500000000000000, a1, a2, 0))
  {
    unint64_t v2 = a2;
    goto LABEL_6;
  }
  if (a1 == 0x616E6964726F6F63 && a2 == 0xEB00000000736574)
  {
    swift_bridgeObjectRelease(0xEB00000000736574);
    return 1;
  }
  else
  {
    char v4 = _stringCompareWithSmolCheck(_:_:expecting:)(0x616E6964726F6F63, 0xEB00000000736574, a1, a2, 0);
    swift_bridgeObjectRelease(a2);
    return 2 - (v4 & 1);
  }
}

uint64_t MLObjectDetector.DecodableAnnotation.CodingKeys.stringValue.getter(char a1)
{
  uint64_t result = 0x616E6964726F6F63;
  if ((a1 & 1) == 0) {
    return 0x6C6562616CLL;
  }
  return result;
}

uint64_t MLObjectDetector.DecodableAnnotation.encode(to:)(void *a1)
{
  uint64_t v15 = v1;
  char v18 = v2;
  uint64_t v16 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<MLObjectDetector.DecodableAnnotation.CodingKeys>);
  uint64_t v19 = *(void *)(v16 - 8);
  int64_t v3 = *(void *)(v19 + 64);
  char v4 = alloca(v3);
  uint64_t v5 = alloca(v3);
  uint64_t v6 = a1[3];
  uint64_t v17 = a1[4];
  __swift_project_boxed_opaque_existential_0Tm(a1, v6);
  uint64_t v7 = lazy protocol witness table accessor for type MLObjectDetector.DecodableAnnotation.CodingKeys and conformance MLObjectDetector.DecodableAnnotation.CodingKeys();
  uint64_t v8 = v16;
  dispatch thunk of Encoder.container<A>(keyedBy:)(&unk_397D28, &unk_397D28, v7, v6, v17);
  uint64_t v9 = *v18;
  uint64_t v10 = v18[1];
  LOBYTE(v14) = 0;
  uint64_t v11 = v15;
  KeyedEncodingContainer.encode(_:forKey:)(v9, v10, &v14, v8);
  if (!v11)
  {
    long long v14 = *((_OWORD *)v18 + 1);
    v20[0] = 1;
    uint64_t v13 = lazy protocol witness table accessor for type MLObjectDetector.DecodableAnnotation.Coordinates and conformance MLObjectDetector.DecodableAnnotation.Coordinates();
    KeyedEncodingContainer.encode<A>(_:forKey:)(&v14, v20, v8, &type metadata for MLObjectDetector.DecodableAnnotation.Coordinates, v13);
  }
  return (*(uint64_t (**)(long long *, uint64_t))(v19 + 8))(&v14, v8);
}

uint64_t MLObjectDetector.DecodableAnnotation.init(from:)(void *a1)
{
  char v20 = v2;
  uint64_t v16 = v1;
  *(void *)&long long v18 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<MLObjectDetector.DecodableAnnotation.CodingKeys>);
  uint64_t v15 = *(void *)(v18 - 8);
  int64_t v3 = *(void *)(v15 + 64);
  char v4 = alloca(v3);
  uint64_t v5 = alloca(v3);
  uint64_t v6 = a1[3];
  uint64_t v19 = a1[4];
  __swift_project_boxed_opaque_existential_0Tm(a1, v6);
  uint64_t v7 = lazy protocol witness table accessor for type MLObjectDetector.DecodableAnnotation.CodingKeys and conformance MLObjectDetector.DecodableAnnotation.CodingKeys();
  long long v21 = &v14;
  dispatch thunk of Decoder.container<A>(keyedBy:)(&unk_397D28, &unk_397D28, v7, v6, v19);
  if (v2) {
    return __swift_destroy_boxed_opaque_existential_1Tm(a1);
  }
  uint64_t v8 = v15;
  char v20 = a1;
  LOBYTE(v14) = 0;
  uint64_t v17 = KeyedDecodingContainer.decode(_:forKey:)(&v14, v18);
  v22[0] = 1;
  uint64_t v10 = v9;
  uint64_t v11 = lazy protocol witness table accessor for type MLObjectDetector.DecodableAnnotation.Coordinates and conformance MLObjectDetector.DecodableAnnotation.Coordinates();
  uint64_t v19 = v10;
  swift_bridgeObjectRetain(v10);
  KeyedDecodingContainer.decode<A>(_:forKey:)(&type metadata for MLObjectDetector.DecodableAnnotation.Coordinates, v22, v18, &type metadata for MLObjectDetector.DecodableAnnotation.Coordinates, v11);
  (*(void (**)(long long *, void))(v8 + 8))(v21, v18);
  long long v18 = v14;
  __swift_destroy_boxed_opaque_existential_1Tm(v20);
  uint64_t v12 = v19;
  swift_bridgeObjectRelease(v19);
  uint64_t result = (uint64_t)v16;
  uint64_t *v16 = v17;
  *(void *)(result + 8) = v12;
  *(_OWORD *)(result + 16) = v18;
  return result;
}

uint64_t protocol witness for CodingKey.stringValue.getter in conformance MLObjectDetector.DecodableAnnotation.CodingKeys()
{
  return MLObjectDetector.DecodableAnnotation.CodingKeys.stringValue.getter(*v0);
}

char protocol witness for CodingKey.init(stringValue:) in conformance MLObjectDetector.DecodableAnnotation.CodingKeys(uint64_t a1, unint64_t a2)
{
  int64_t v3 = v2;
  char result = MLObjectDetector.DecodableAnnotation.CodingKeys.init(stringValue:)(a1, a2);
  *int64_t v3 = result;
  return result;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance MLObjectDetector.DecodableAnnotation.CodingKeys(uint64_t a1)
{
  uint64_t v1 = lazy protocol witness table accessor for type MLObjectDetector.DecodableAnnotation.CodingKeys and conformance MLObjectDetector.DecodableAnnotation.CodingKeys();
  return CodingKey.description.getter(a1, v1);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance MLObjectDetector.DecodableAnnotation.CodingKeys(uint64_t a1)
{
  uint64_t v1 = lazy protocol witness table accessor for type MLObjectDetector.DecodableAnnotation.CodingKeys and conformance MLObjectDetector.DecodableAnnotation.CodingKeys();
  return CodingKey.debugDescription.getter(a1, v1);
}

uint64_t protocol witness for Decodable.init(from:) in conformance MLObjectDetector.DecodableAnnotation(void *a1)
{
  int64_t v3 = v1;
  uint64_t result = MLObjectDetector.DecodableAnnotation.init(from:)(a1);
  if (!v2)
  {
    v3[1] = v6;
    *int64_t v3 = v5;
  }
  return result;
}

uint64_t protocol witness for Encodable.encode(to:) in conformance MLObjectDetector.DecodableAnnotation(void *a1)
{
  return MLObjectDetector.DecodableAnnotation.encode(to:)(a1);
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance MLObjectDetector.DecodableAnnotation(uint64_t *a1, uint64_t a2)
{
  return static MLObjectDetector.DecodableAnnotation.== infix(_:_:)(a1, a2);
}

uint64_t static MLObjectDetector.NormalizedAnnotation.== infix(_:_:)(uint64_t *a1, uint64_t a2)
{
  uint64_t v4 = *a1;
  uint64_t v5 = a1[1];
  uint64_t v6 = *(void *)(a2 + 8);
  if (v4 == *(void *)a2 && v5 == v6
    || (_stringCompareWithSmolCheck(_:_:expecting:)(v4, v5, *(void *)a2, v6, 0) & 1) != 0)
  {
    return static Rectangle.== infix(_:_:)((__m128)(unint64_t)a1[2], _mm_movehdup_ps((__m128)(unint64_t)a1[2]), (__m128)*((unsigned int *)a1 + 6), (__m128)*((unsigned int *)a1 + 7), (__m128)*(unint64_t *)(a2 + 16), _mm_movehdup_ps((__m128)*(unint64_t *)(a2 + 16)), (__m128)*(unsigned int *)(a2 + 24), (__m128)*(unsigned int *)(a2 + 28));
  }
  else
  {
    return 0;
  }
}

void MLObjectDetector.NormalizedAnnotation.hash(into:)(uint64_t a1)
{
  uint64_t v2 = *(void *)v1;
  swift_bridgeObjectRetain(*(void *)(v1 + 8));
  String.hash(into:)(a1, v2);
  outlined release of MLObjectDetector.NormalizedAnnotation(v1);
  Rectangle.hash(into:)((__m128i)*(unint64_t *)(v1 + 16), _mm_movehdup_ps((__m128)*(unint64_t *)(v1 + 16)).f32[0], *(float *)(v1 + 24), *(float *)(v1 + 28));
}

Swift::Int MLObjectDetector.NormalizedAnnotation.hashValue.getter()
{
  Hasher.init(_seed:)(0);
  uint64_t v1 = *(void *)v0;
  swift_bridgeObjectRetain(*(void *)(v0 + 8));
  String.hash(into:)(v3, v1);
  outlined release of MLObjectDetector.NormalizedAnnotation(v0);
  Rectangle.hash(into:)((__m128i)*(unint64_t *)(v0 + 16), _mm_movehdup_ps((__m128)*(unint64_t *)(v0 + 16)).f32[0], *(float *)(v0 + 24), *(float *)(v0 + 28));
  return Hasher._finalize()();
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance MLObjectDetector.NormalizedAnnotation(uint64_t *a1, uint64_t a2)
{
  return static MLObjectDetector.NormalizedAnnotation.== infix(_:_:)(a1, a2);
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance MLObjectDetector.NormalizedAnnotation()
{
  return MLObjectDetector.NormalizedAnnotation.hashValue.getter();
}

void protocol witness for Hashable.hash(into:) in conformance MLObjectDetector.NormalizedAnnotation(uint64_t a1)
{
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance MLObjectDetector.NormalizedAnnotation(uint64_t a1)
{
  uint64_t v2 = *(void *)v1;
  uint64_t v3 = *((void *)v1 + 1);
  __m128i v6 = (__m128i)*((unint64_t *)v1 + 2);
  float v7 = v1[6];
  float v8 = v1[7];
  Hasher.init(_seed:)(a1);
  swift_bridgeObjectRetain(v3);
  String.hash(into:)(v5, v2);
  swift_bridgeObjectRelease(v3);
  Rectangle.hash(into:)(v6, _mm_movehdup_ps((__m128)v6).f32[0], v7, v8);
  return Hasher._finalize()();
}

uint64_t MLObjectDetector.ObjectAnnotation.description.getter()
{
  uint64_t v15 = *(void *)v0;
  uint64_t v1 = *(void **)(v0 + 8);
  double v18 = *(double *)(v0 + 24);
  double v17 = *(double *)(v0 + 32);
  double v16 = *(double *)(v0 + 40);
  double v14 = *(double *)(v0 + 48);
  v2._uint64_t countAndFlagsBits = Double.description.getter(*(double *)(v0 + 16));
  char object = v2._object;
  String.append(_:)(v2);
  swift_bridgeObjectRelease(object);
  v4._uint64_t countAndFlagsBits = Double.description.getter(v18);
  uint64_t v5 = v4._object;
  String.append(_:)(v4);
  swift_bridgeObjectRelease(v5);
  v6._uint64_t countAndFlagsBits = 0x203A79202CLL;
  v6._char object = (void *)0xE500000000000000;
  String.append(_:)(v6);
  swift_bridgeObjectRelease(0xE500000000000000);
  v7._uint64_t countAndFlagsBits = Double.description.getter(v17);
  float v8 = v7._object;
  String.append(_:)(v7);
  swift_bridgeObjectRelease(v8);
  v6._uint64_t countAndFlagsBits = 0x3A6874646977202CLL;
  v6._char object = (void *)0xE900000000000020;
  String.append(_:)(v6);
  swift_bridgeObjectRelease(0xE900000000000020);
  v9._uint64_t countAndFlagsBits = Double.description.getter(v16);
  uint64_t v10 = v9._object;
  String.append(_:)(v9);
  swift_bridgeObjectRelease(v10);
  swift_bridgeObjectRetain(0xEA0000000000203ALL);
  v6._uint64_t countAndFlagsBits = 41;
  v6._char object = (void *)0xE100000000000000;
  String.append(_:)(v6);
  swift_bridgeObjectRelease(0xEA0000000000203ALL);
  v6._uint64_t countAndFlagsBits = 0x746867696568202CLL;
  v6._char object = (void *)0xEA0000000000203ALL;
  String.append(_:)(v6);
  swift_bridgeObjectRelease(0xEA0000000000203ALL);
  _StringGuts.grow(_:)(44);
  swift_bridgeObjectRelease(0xE000000000000000);
  swift_bridgeObjectRetain(v1);
  v6._uint64_t countAndFlagsBits = v15;
  v6._char object = v1;
  String.append(_:)(v6);
  swift_bridgeObjectRelease(v1);
  v6._uint64_t countAndFlagsBits = 0x6469666E6F43202CLL;
  v6._char object = (void *)0xEE00203A65636E65;
  String.append(_:)(v6);
  v11._uint64_t countAndFlagsBits = Double.description.getter(v14);
  uint64_t v12 = v11._object;
  String.append(_:)(v11);
  swift_bridgeObjectRelease(v12);
  v6._char object = "ect annotations, found " + 0x8000000000000000;
  v6._uint64_t countAndFlagsBits = 0xD000000000000010;
  String.append(_:)(v6);
  v6._uint64_t countAndFlagsBits = 540702760;
  v6._char object = (void *)0xE400000000000000;
  String.append(_:)(v6);
  swift_bridgeObjectRelease(0xE400000000000000);
  v6._uint64_t countAndFlagsBits = 10;
  v6._char object = (void *)0xE100000000000000;
  String.append(_:)(v6);
  return 0x203A6C6562614CLL;
}

uint64_t MLObjectDetector.ObjectAnnotation.debugDescription.getter(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  return MLObjectDetector.ObjectAnnotation.description.getter(a1, a2, a3, a4, a5, a6, *v6);
}

uint64_t MLObjectDetector.ObjectAnnotation.playgroundDescription.getter(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  Swift::String v7 = v6;
  uint64_t result = MLObjectDetector.ObjectAnnotation.description.getter(a1, a2, a3, a4, a5, a6);
  void v7[3] = (uint64_t)&type metadata for String;
  *Swift::String v7 = result;
  v7[1] = v9;
  return result;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance MLObjectDetector.ObjectAnnotation()
{
  return MLObjectDetector.ObjectAnnotation.description.getter();
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance MLObjectDetector.ObjectAnnotation(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  return MLObjectDetector.ObjectAnnotation.debugDescription.getter(a1, a2, a3, a4, a5, a6);
}

uint64_t protocol witness for CustomPlaygroundDisplayConvertible.playgroundDescription.getter in conformance MLObjectDetector.ObjectAnnotation(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  return MLObjectDetector.ObjectAnnotation.playgroundDescription.getter(a1, a2, a3, a4, a5, a6);
}

uint64_t specialized stratifiedSplitGenerator<A>(proportions:generator:dataTable:on:)(uint64_t a1, uint64_t a2, void *a3, int a4, uint64_t a5, void *a6, double a7)
{
  uint64_t v73 = a2;
  uint64_t v88 = a6;
  v89._uint64_t countAndFlagsBits = a5;
  char v74 = (long long *)a1;
  int v104 = a4;
  v89._char object = a3;
  Swift::String v75 = v7;
  if (a4)
  {
    outlined copy of Result<_DataTable, Error>((uint64_t)a3, 1);
    uint64_t v10 = tc_v1_flex_list_create(0);
    if (!v10) {
      BUG();
    }
    uint64_t v11 = v10;
    uint64_t v12 = type metadata accessor for CMLSequence();
    uint64_t v13 = swift_allocObject(v12, 25, 7);
    *(void *)(v13 + 16) = v11;
    *(unsigned char *)(v13 + 24) = 1;
    outlined consume of Result<_DataTable, Error>((uint64_t)a3, 1);
  }
  else
  {
    outlined copy of Result<_DataTable, Error>((uint64_t)a3, 0);
    _DataTable.columnNames.getter(a3);
    outlined consume of Result<_DataTable, Error>((uint64_t)a3, 0);
    uint64_t v13 = v100;
  }
  *(void *)&long long v102 = v89._countAndFlagsBits;
  *((void *)&v102 + 1) = v88;
  uint64_t v15 = alloca(24);
  double v16 = alloca(32);
  char v74 = &v102;
  char v17 = specialized Sequence.contains(where:)((uint64_t (*)(unint64_t *))closure #1 in Sequence<>.contains(_:)specialized partial apply, (uint64_t)v72, v13);
  swift_release();
  if (v17)
  {
    uint64_t v93 = v8;
    char object = v89._object;
    *(void *)&long long v102 = v89._object;
    int v20 = v104;
    int v19 = v104;
    LOBYTE(v20) = v104 & 1;
    BYTE8(v102) = v104 & 1;
    outlined copy of Result<_DataTable, Error>((uint64_t)v89._object, v104);
    v21._uint64_t countAndFlagsBits = v89._countAndFlagsBits;
    v21._char object = v88;
    MLDataTable.subscript.getter(v21);
    int v99 = v19;
    outlined consume of Result<_DataTable, Error>((uint64_t)object, v19);
    uint64_t v22 = v100;
    LODWORD(v96) = v101;
    uint64_t v84 = v100;
    unsigned __int8 v85 = v101;
    MLUntypedColumn.dropDuplicates()();
    outlined consume of Result<_DataTable, Error>(v22, v96);
    uint64_t v100 = v102;
    unsigned __int8 v101 = BYTE8(v102);
    char v23 = Array<A>.init(_:)((uint64_t)&v100, a7);
    *(void *)&long long v102 = object;
    BYTE8(v102) = v20;
    Swift::Int v24 = MLDataTable.size.getter();
    if (v24 < 0) {
      BUG();
    }
    uint64_t v98 = specialized _copyCollectionToContiguousArray<A>(_:)(0, v24);
    uint64_t v100 = (uint64_t)object;
    unsigned __int8 v101 = v20;
    *(void *)&long long v102 = object;
    BYTE8(v102) = v20;
    uint64_t v92 = v23;
    outlined copy of Result<_DataTable, Error>((uint64_t)object, v99);
    Swift::Int v25 = MLDataTable.size.getter();
    uint64_t v94 = (char *)specialized Array.init(repeating:count:)(0, v25);
    int v26 = v92;
    uint64_t v77 = v92[2];
    if (v77)
    {
      unint64_t v27 = 0;
      int v104 = v20;
      while (1)
      {
        if (v27 >= v26[2]) {
          BUG();
        }
        unint64_t v76 = v27;
        uint64_t v28 = 3 * v27;
        uint64_t v91 = (void *)v26[v28 + 4];
        uint64_t v29 = v91;
        uint64_t v90 = (void *)v26[v28 + 5];
        uint64_t v30 = v90;
        unsigned __int8 v31 = v26[v28 + 6];
        outlined copy of Result<_DataTable, Error>((uint64_t)object, v99);
        outlined copy of MLDataValue(v29, v30, v31);
        v32._uint64_t countAndFlagsBits = v89._countAndFlagsBits;
        v32._char object = v88;
        MLDataTable.subscript.getter(v32);
        outlined consume of Result<_DataTable, Error>((uint64_t)object, v99);
        uint64_t v33 = v79;
        LOBYTE(v30) = v80;
        uint64_t v81 = v79;
        char v82 = v80;
        *((void *)&v102 + 1) = v90;
        int v95 = v31;
        unsigned __int8 v103 = v31;
        static MLUntypedColumn.== infix(_:_:)((uint64_t)&v81, &v102);
        outlined consume of Result<_DataTable, Error>(v33, (char)v30);
        *(void *)&long long v102 = v84;
        BYTE8(v102) = v85;
        uint64_t v34 = Array<A>.init(_:)((uint64_t)&v102, a7);
        uint64_t v96 = v34[2];
        if (v96)
        {
          uint64_t v35 = v98;
          uint64_t v97 = v98[2];
          swift_retain();
          uint64_t v78 = v34;
          char v36 = v34 + 6;
          unint64_t v37 = 0;
          unint64_t v38 = _swiftEmptyArrayStorage;
          do
          {
            if (v97 == v37) {
              break;
            }
            if (v37 >= v35[2]) {
              BUG();
            }
            if (!*v36 && *((void *)v36 - 2) == 1)
            {
              uint64_t v87 = *((void *)v36 - 1);
              uint64_t v86 = (void *)v35[v37 + 4];
              char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v38);
              *(void *)&long long v102 = v38;
              if (!isUniquelyReferenced_nonNull_native)
              {
                specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v38[2] + 1, 1);
                unint64_t v38 = (void *)v102;
              }
              unint64_t v40 = v38[2];
              unint64_t v41 = v38[3];
              unint64_t v42 = v40 + 1;
              if (v41 >> 1 <= v40)
              {
                unint64_t v83 = v40 + 1;
                specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v41 >= 2, v40 + 1, 1);
                unint64_t v42 = v83;
                unint64_t v38 = (void *)v102;
              }
              v38[2] = v42;
              uint64_t v43 = 4 * v40;
              v38[v43 + 4] = 1;
              v38[v43 + 5] = v87;
              LOBYTE(v38[v43 + 6]) = 0;
              v38[v43 + 7] = v86;
              uint64_t v35 = v98;
            }
            ++v37;
            v36 += 24;
          }
          while (v96 != v37);
          swift_release();
          uint64_t v34 = v78;
        }
        else
        {
          unint64_t v38 = _swiftEmptyArrayStorage;
        }
        swift_bridgeObjectRelease(v34);
        uint64_t v44 = v93;
        ML11MLDataValueO_SitG_Sis5NeverOTg503_s8d4ML11fg20OS2iIgnyd_AC_SitSis5h126OIegnrzr_TR03_s8a68ML24stratifiedSplitGenerator11proportions9generator9dataTable2onAA06c31I0VSaySdG_xzAHSStKSGRzlFSiAA0K5D11O_N16XEfU0_Tf3nnnpf_nTf1cn_n = _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSay8CreateML11MLDataValueO_SitG_Sis5NeverOTg503_s8d4ML11fg20OS2iIgnyd_AC_SitSis5h126OIegnrzr_TR03_s8a68ML24stratifiedSplitGenerator11proportions9generator9dataTable2onAA06c31I0VSaySdG_xzAHSStKSGRzlFSiAA0K5D11O_N16XEfU0_Tf3nnnpf_nTf1cn_n((uint64_t)v38);
        swift_release();
        long long v46 = specialized _copyCollectionToContiguousArray<A>(_:)(0, ML11MLDataValueO_SitG_Sis5NeverOTg503_s8d4ML11fg20OS2iIgnyd_AC_SitSis5h126OIegnrzr_TR03_s8a68ML24stratifiedSplitGenerator11proportions9generator9dataTable2onAA06c31I0VSaySdG_xzAHSStKSGRzlFSiAA0K5D11O_N16XEfU0_Tf3nnnpf_nTf1cn_n[2]);
        uint64_t v47 = (uint64_t)v74;
        uint64_t v97 = specialized randomSplit<A>(indices:proportions:generator:)((uint64_t)v46, (uint64_t)v74);
        uint64_t v93 = v44;
        if (v44) {
          break;
        }
        swift_release();
        uint64_t v87 = *(void *)(v47 + 16);
        if (v87)
        {
          unint64_t v48 = 0;
          uint64_t v49 = v94;
          uint64_t v50 = v97;
          uint64_t v86 = ML11MLDataValueO_SitG_Sis5NeverOTg503_s8d4ML11fg20OS2iIgnyd_AC_SitSis5h126OIegnrzr_TR03_s8a68ML24stratifiedSplitGenerator11proportions9generator9dataTable2onAA06c31I0VSaySdG_xzAHSStKSGRzlFSiAA0K5D11O_N16XEfU0_Tf3nnnpf_nTf1cn_n;
          do
          {
            if (v48 >= *(void *)(v50 + 16)) {
              BUG();
            }
            uint64_t v96 = *(void *)(*(void *)(v50 + 8 * v48 + 32) + 16);
            if (v96)
            {
              for (unint64_t i = 0; i != v96; ++i)
              {
                uint64_t v52 = *(void *)(v50 + 8 * v48 + 32);
                if (i >= *(void *)(v52 + 16)) {
                  BUG();
                }
                uint64_t v53 = *(void *)(v52 + 8 * i + 32);
                if (v53 < 0) {
                  BUG();
                }
                if ((unint64_t)v53 >= ML11MLDataValueO_SitG_Sis5NeverOTg503_s8d4ML11fg20OS2iIgnyd_AC_SitSis5h126OIegnrzr_TR03_s8a68ML24stratifiedSplitGenerator11proportions9generator9dataTable2onAA06c31I0VSaySdG_xzAHSStKSGRzlFSiAA0K5D11O_N16XEfU0_Tf3nnnpf_nTf1cn_n[2]) {
                  BUG();
                }
                unint64_t v54 = v48;
                uint64_t v55 = ML11MLDataValueO_SitG_Sis5NeverOTg503_s8d4ML11fg20OS2iIgnyd_AC_SitSis5h126OIegnrzr_TR03_s8a68ML24stratifiedSplitGenerator11proportions9generator9dataTable2onAA06c31I0VSaySdG_xzAHSStKSGRzlFSiAA0K5D11O_N16XEfU0_Tf3nnnpf_nTf1cn_n[v53 + 4];
                if (!swift_isUniquelyReferenced_nonNull_native(v49)) {
                  uint64_t v49 = specialized _ArrayBuffer._consumeAndCreateNew()((uint64_t)v49);
                }
                unint64_t v48 = v54;
                ML11MLDataValueO_SitG_Sis5NeverOTg503_s8d4ML11fg20OS2iIgnyd_AC_SitSis5h126OIegnrzr_TR03_s8a68ML24stratifiedSplitGenerator11proportions9generator9dataTable2onAA06c31I0VSaySdG_xzAHSStKSGRzlFSiAA0K5D11O_N16XEfU0_Tf3nnnpf_nTf1cn_n = v86;
                if (v55 < 0) {
                  BUG();
                }
                if ((unint64_t)v55 >= *((void *)v49 + 2)) {
                  BUG();
                }
                *(void *)&v49[8 * v55 + 32] = v54;
                uint64_t v50 = v97;
              }
            }
            ++v48;
          }
          while (v48 != v87);
          uint64_t v94 = v49;
          swift_bridgeObjectRelease(ML11MLDataValueO_SitG_Sis5NeverOTg503_s8d4ML11fg20OS2iIgnyd_AC_SitSis5h126OIegnrzr_TR03_s8a68ML24stratifiedSplitGenerator11proportions9generator9dataTable2onAA06c31I0VSaySdG_xzAHSStKSGRzlFSiAA0K5D11O_N16XEfU0_Tf3nnnpf_nTf1cn_n);
          uint64_t v56 = v50;
        }
        else
        {
          swift_bridgeObjectRelease(ML11MLDataValueO_SitG_Sis5NeverOTg503_s8d4ML11fg20OS2iIgnyd_AC_SitSis5h126OIegnrzr_TR03_s8a68ML24stratifiedSplitGenerator11proportions9generator9dataTable2onAA06c31I0VSaySdG_xzAHSStKSGRzlFSiAA0K5D11O_N16XEfU0_Tf3nnnpf_nTf1cn_n);
          uint64_t v56 = v97;
        }
        swift_bridgeObjectRelease(v56);
        unint64_t v57 = v76 + 1;
        outlined consume of MLDataValue(v91, v90, v95);
        unint64_t v27 = v57;
        BOOL v58 = v57 == v77;
        char object = v89._object;
        int v26 = v92;
        if (v58) {
          goto LABEL_42;
        }
      }
      swift_bridgeObjectRelease(ML11MLDataValueO_SitG_Sis5NeverOTg503_s8d4ML11fg20OS2iIgnyd_AC_SitSis5h126OIegnrzr_TR03_s8a68ML24stratifiedSplitGenerator11proportions9generator9dataTable2onAA06c31I0VSaySdG_xzAHSStKSGRzlFSiAA0K5D11O_N16XEfU0_Tf3nnnpf_nTf1cn_n);
      swift_release();
      outlined consume of MLDataValue(v91, v90, v95);
      swift_bridgeObjectRelease(v94);
      swift_bridgeObjectRelease(v92);
      swift_release();
      return outlined consume of Result<_DataTable, Error>((uint64_t)v89._object, v104);
    }
    else
    {
LABEL_42:
      uint64_t v59 = v26;
      swift_release();
      swift_bridgeObjectRelease(v59);
      *(void *)&long long v102 = v94;
      uint64_t v60 = alloca(24);
      uint64_t v61 = alloca(32);
      unint64_t v105 = &v102;
      uint64_t ML14_UntypedColumnC_s5Error_pTgm5 = _ss6ResultOsRi_zrlE8catchingAByxq_Gxyq_YKXE_tcfC8CreateML14_UntypedColumnC_s5Error_pTgm5((void (*)(void *))partial apply for specialized closure #1 in MLUntypedColumn.init<A>(_:));
      char v64 = v63;
      swift_bridgeObjectRelease(v102);
      MLDataTable.willMutate()();
      *(void *)&long long v102 = ML14_UntypedColumnC_s5Error_pTgm5;
      char v65 = v64;
      char v66 = v64 & 1;
      BYTE8(v102) = v66;
      outlined copy of Result<_DataTable, Error>(ML14_UntypedColumnC_s5Error_pTgm5, v65);
      MLDataTable.addImpl(newColumn:named:)((uint64_t)&v102, 0x6F69746974726170, (void *)0xE90000000000006ELL);
      outlined consume of Result<_DataTable, Error>(ML14_UntypedColumnC_s5Error_pTgm5, v65);
      uint64_t v67 = v100;
      unsigned __int8 v68 = v101;
      if (!v101)
      {
        outlined copy of Result<_DataTable, Error>(v100, 0);
        _DataTable.columnNamesDidChange()();
        outlined consume of Result<_DataTable, Error>(v67, 0);
      }
      outlined consume of Result<_DataTable, Error>(ML14_UntypedColumnC_s5Error_pTgm5, v66);
      uint64_t result = (uint64_t)v75;
      *Swift::String v75 = v67;
      *(unsigned char *)(result + 8) = v68;
    }
  }
  else
  {
    uint64_t v70 = lazy protocol witness table accessor for type MLCreateError and conformance MLCreateError();
    swift_allocError(&type metadata for MLCreateError, v70, 0, 0);
    *(void *)uint64_t v71 = 0xD000000000000022;
    *(void *)(v71 + 8) = "lue from annotation." + 0x8000000000000000;
    *(_OWORD *)(v71 + 16) = 0;
    *(_OWORD *)(v71 + 32) = 0;
    *(unsigned char *)(v71 + 48) = 0;
    return swift_willThrow();
  }
  return result;
}

uint64_t partial apply for closure #1 in MLObjectDetector.DataSource.gatherAnnotatedFileNames()(uint64_t *a1)
{
  return closure #1 in MLObjectDetector.DataSource.gatherAnnotatedFileNames()(a1, *(void *)(v1 + 16));
}

uint64_t *partial apply for closure #3 in MLObjectDetector.DataSource.gatherAnnotatedFileNames()(uint64_t *a1)
{
  return closure #3 in MLObjectDetector.DataSource.gatherAnnotatedFileNames()(a1, *(void *)(v1 + 16));
}

uint64_t *initializeBufferWithCopyOfBuffer for MLObjectDetector.DataSource(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3 = a1;
  int v4 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  if ((v4 & 0x20000) != 0)
  {
    uint64_t v9 = *(void *)a2;
    *uint64_t v3 = *(void *)a2;
    uint64_t v3 = (uint64_t *)(v9 + ((v4 + 16) & ~v4));
    swift_retain();
  }
  else
  {
    switch(swift_getEnumCaseMultiPayload(a2, a3))
    {
      case 0u:
        uint64_t v6 = type metadata accessor for URL(0);
        (*(void (**)(uint64_t *, uint64_t, uint64_t))(*(void *)(v6 - 8) + 16))(a1, a2, v6);
        uint64_t v7 = a3;
        uint64_t v8 = 0;
        goto LABEL_9;
      case 1u:
        uint64_t v20 = type metadata accessor for URL(0);
        Swift::String v21 = *(void (**)(uint64_t *, uint64_t, uint64_t))(*(void *)(v20 - 8) + 16);
        v21(a1, a2, v20);
        uint64_t v22 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (at: URL, annotationFile: URL));
        v21((uint64_t *)((char *)a1 + *(int *)(v22 + 48)), *(int *)(v22 + 48) + a2, v20);
        uint64_t v24 = 1;
        goto LABEL_8;
      case 2u:
        uint64_t v10 = *(void *)a2;
        char v11 = *(unsigned char *)(a2 + 8);
        outlined copy of Result<_DataTable, Error>(*(void *)a2, v11);
        *a1 = v10;
        *((unsigned char *)a1 + 8) = v11;
        a1[2] = *(void *)(a2 + 16);
        uint64_t v12 = *(void *)(a2 + 24);
        void v3[3] = v12;
        void v3[4] = *(void *)(a2 + 32);
        uint64_t v13 = *(void *)(a2 + 40);
        uint64_t v3[5] = v13;
        swift_bridgeObjectRetain(v12);
        swift_bridgeObjectRetain(v13);
        uint64_t v24 = 2;
        goto LABEL_8;
      case 3u:
        uint64_t v14 = type metadata accessor for DataFrame(0);
        (*(void (**)(uint64_t *, uint64_t, uint64_t))(*(void *)(v14 - 8) + 16))(a1, a2, v14);
        uint64_t v15 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (DataFrame, imageColumn: String, annotationColumn: String));
        uint64_t v16 = *(int *)(v15 + 48);
        *(uint64_t *)((char *)a1 + v16) = *(void *)(a2 + v16);
        uint64_t v17 = *(void *)(a2 + v16 + 8);
        *(uint64_t *)((char *)v3 + v16 + 8) = v17;
        uint64_t v18 = *(int *)(v15 + 64);
        *(uint64_t *)((char *)v3 + v18) = *(void *)(a2 + v18);
        uint64_t v19 = *(void *)(a2 + v18 + 8);
        *(uint64_t *)((char *)v3 + v18 + 8) = v19;
        swift_bridgeObjectRetain(v17);
        swift_bridgeObjectRetain(v19);
        uint64_t v24 = 3;
LABEL_8:
        uint64_t v8 = v24;
        a1 = v3;
        uint64_t v7 = a3;
LABEL_9:
        swift_storeEnumTagMultiPayload(a1, v7, v8);
        break;
    }
  }
  return v3;
}

uint64_t destroy for MLObjectDetector.DataSource(uint64_t a1, uint64_t a2)
{
  uint64_t result = swift_getEnumCaseMultiPayload(a1, a2);
  switch((int)result)
  {
    case 0:
      uint64_t v3 = type metadata accessor for URL(0);
      uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(a1, v3);
      break;
    case 1:
      uint64_t v4 = type metadata accessor for URL(0);
      uint64_t v5 = *(void (**)(uint64_t, uint64_t))(*(void *)(v4 - 8) + 8);
      v5(a1, v4);
      uint64_t v6 = a1
         + *(int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (at: URL, annotationFile: URL))
                  + 48);
      uint64_t result = ((uint64_t (*)(uint64_t, uint64_t))v5)(v6, v4);
      break;
    case 2:
      outlined consume of Result<_DataTable, Error>(*(void *)a1, *(_DWORD *)(a1 + 8));
      swift_bridgeObjectRelease(*(void *)(a1 + 24));
      uint64_t result = swift_bridgeObjectRelease(*(void *)(a1 + 40));
      break;
    case 3:
      uint64_t v7 = type metadata accessor for DataFrame(0);
      (*(void (**)(uint64_t, uint64_t))(*(void *)(v7 - 8) + 8))(a1, v7);
      uint64_t v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (DataFrame, imageColumn: String, annotationColumn: String));
      swift_bridgeObjectRelease(*(void *)(a1 + *(int *)(v8 + 48) + 8));
      uint64_t result = swift_bridgeObjectRelease(*(void *)(a1 + *(int *)(v8 + 64) + 8));
      break;
    default:
      return result;
  }
  return result;
}

uint64_t *initializeWithCopy for MLObjectDetector.DataSource(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = a1;
  switch(swift_getEnumCaseMultiPayload(a2, a3))
  {
    case 0u:
      uint64_t v5 = type metadata accessor for URL(0);
      (*(void (**)(uint64_t *, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16))(a1, a2, v5);
      uint64_t v6 = a3;
      uint64_t v7 = 0;
      goto LABEL_7;
    case 1u:
      uint64_t v18 = type metadata accessor for URL(0);
      uint64_t v19 = *(void (**)(uint64_t *, uint64_t, uint64_t))(*(void *)(v18 - 8) + 16);
      v19(a1, a2, v18);
      uint64_t v20 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (at: URL, annotationFile: URL));
      v19((uint64_t *)((char *)a1 + *(int *)(v20 + 48)), *(int *)(v20 + 48) + a2, v18);
      uint64_t v22 = 1;
      goto LABEL_6;
    case 2u:
      uint64_t v8 = *(void *)a2;
      char v9 = *(unsigned char *)(a2 + 8);
      outlined copy of Result<_DataTable, Error>(*(void *)a2, v9);
      *a1 = v8;
      *((unsigned char *)a1 + 8) = v9;
      a1[2] = *(void *)(a2 + 16);
      uint64_t v10 = *(void *)(a2 + 24);
      v4[3] = v10;
      v4[4] = *(void *)(a2 + 32);
      uint64_t v11 = *(void *)(a2 + 40);
      v4[5] = v11;
      swift_bridgeObjectRetain(v10);
      swift_bridgeObjectRetain(v11);
      uint64_t v22 = 2;
      goto LABEL_6;
    case 3u:
      uint64_t v12 = type metadata accessor for DataFrame(0);
      (*(void (**)(uint64_t *, uint64_t, uint64_t))(*(void *)(v12 - 8) + 16))(a1, a2, v12);
      uint64_t v13 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (DataFrame, imageColumn: String, annotationColumn: String));
      uint64_t v14 = *(int *)(v13 + 48);
      *(uint64_t *)((char *)a1 + v14) = *(void *)(a2 + v14);
      uint64_t v15 = *(void *)(a2 + v14 + 8);
      *(uint64_t *)((char *)v4 + v14 + 8) = v15;
      uint64_t v16 = *(int *)(v13 + 64);
      *(uint64_t *)((char *)v4 + v16) = *(void *)(a2 + v16);
      uint64_t v17 = *(void *)(a2 + v16 + 8);
      *(uint64_t *)((char *)v4 + v16 + 8) = v17;
      swift_bridgeObjectRetain(v15);
      swift_bridgeObjectRetain(v17);
      uint64_t v22 = 3;
LABEL_6:
      uint64_t v7 = v22;
      a1 = v4;
      uint64_t v6 = a3;
LABEL_7:
      swift_storeEnumTagMultiPayload(a1, v6, v7);
      return v4;
  }
}

void *assignWithCopy for MLObjectDetector.DataSource(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3 = (void *)a1;
  if (a1 != a2)
  {
    outlined destroy of MLObjectDetector.DataSource(a1);
    switch(swift_getEnumCaseMultiPayload(a2, a3))
    {
      case 0u:
        uint64_t v5 = type metadata accessor for URL(0);
        (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16))(a1, a2, v5);
        uint64_t v6 = a3;
        uint64_t v7 = 0;
        goto LABEL_8;
      case 1u:
        uint64_t v8 = type metadata accessor for URL(0);
        char v9 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v8 - 8) + 16);
        v9(a1, a2, v8);
        uint64_t v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (at: URL, annotationFile: URL));
        v9(a1 + *(int *)(v10 + 48), *(int *)(v10 + 48) + a2, v8);
        uint64_t v22 = 1;
        goto LABEL_7;
      case 2u:
        uint64_t v11 = *(void *)a2;
        char v12 = *(unsigned char *)(a2 + 8);
        outlined copy of Result<_DataTable, Error>(*(void *)a2, v12);
        *(void *)a1 = v11;
        *(unsigned char *)(a1 + 8) = v12;
        *(void *)(a1 + 16) = *(void *)(a2 + 16);
        uint64_t v13 = *(void *)(a2 + 24);
        void v3[3] = v13;
        void v3[4] = *(void *)(a2 + 32);
        uint64_t v14 = *(void *)(a2 + 40);
        uint64_t v3[5] = v14;
        swift_bridgeObjectRetain(v13);
        swift_bridgeObjectRetain(v14);
        uint64_t v22 = 2;
        goto LABEL_7;
      case 3u:
        uint64_t v15 = type metadata accessor for DataFrame(0);
        (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v15 - 8) + 16))(a1, a2, v15);
        uint64_t v16 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (DataFrame, imageColumn: String, annotationColumn: String));
        uint64_t v17 = *(int *)(v16 + 48);
        *(void *)(a1 + v17) = *(void *)(a2 + v17);
        uint64_t v18 = *(void *)(a2 + v17 + 8);
        *(void *)((char *)v3 + v17 + 8) = v18;
        uint64_t v19 = *(int *)(v16 + 64);
        *(void *)((char *)v3 + v19) = *(void *)(a2 + v19);
        uint64_t v20 = *(void *)(a2 + v19 + 8);
        *(void *)((char *)v3 + v19 + 8) = v20;
        swift_bridgeObjectRetain(v18);
        swift_bridgeObjectRetain(v20);
        uint64_t v22 = 3;
LABEL_7:
        uint64_t v7 = v22;
        a1 = (uint64_t)v3;
        uint64_t v6 = a3;
LABEL_8:
        swift_storeEnumTagMultiPayload(a1, v6, v7);
        break;
    }
  }
  return v3;
}

uint64_t outlined destroy of MLObjectDetector.DataSource(uint64_t a1)
{
  uint64_t v1 = type metadata accessor for MLObjectDetector.DataSource(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v1 - 8) + 8))(a1, v1);
  return a1;
}

char *initializeWithTake for MLObjectDetector.DataSource(char *__dst, char *__src, uint64_t a3)
{
  int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload(__src, a3);
  if (EnumCaseMultiPayload == 3)
  {
    uint64_t v8 = type metadata accessor for DataFrame(0);
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v8 - 8) + 32))(__dst, __src, v8);
    uint64_t v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (DataFrame, imageColumn: String, annotationColumn: String));
    *(_OWORD *)&__dst[*(int *)(v9 + 48)] = *(_OWORD *)&__src[*(int *)(v9 + 48)];
    *(_OWORD *)&__dst[*(int *)(v9 + 64)] = *(_OWORD *)&__src[*(int *)(v9 + 64)];
    uint64_t v14 = 3;
LABEL_7:
    uint64_t v7 = v14;
    uint64_t v6 = a3;
    goto LABEL_8;
  }
  if (EnumCaseMultiPayload == 1)
  {
    uint64_t v10 = type metadata accessor for URL(0);
    uint64_t v11 = *(void (**)(char *, char *, uint64_t))(*(void *)(v10 - 8) + 32);
    v11(__dst, __src, v10);
    uint64_t v12 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (at: URL, annotationFile: URL));
    v11(&__dst[*(int *)(v12 + 48)], &__src[*(int *)(v12 + 48)], v10);
    uint64_t v14 = 1;
    goto LABEL_7;
  }
  if (EnumCaseMultiPayload)
  {
    memcpy(__dst, __src, *(void *)(*(void *)(a3 - 8) + 64));
    return __dst;
  }
  uint64_t v5 = type metadata accessor for URL(0);
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v5 - 8) + 32))(__dst, __src, v5);
  uint64_t v6 = a3;
  uint64_t v7 = 0;
LABEL_8:
  swift_storeEnumTagMultiPayload(__dst, v6, v7);
  return __dst;
}

char *assignWithTake for MLObjectDetector.DataSource(char *__dst, char *__src, uint64_t a3)
{
  if (__dst != __src)
  {
    outlined destroy of MLObjectDetector.DataSource((uint64_t)__dst);
    int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload(__src, a3);
    if (EnumCaseMultiPayload == 3)
    {
      uint64_t v8 = type metadata accessor for DataFrame(0);
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v8 - 8) + 32))(__dst, __src, v8);
      uint64_t v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (DataFrame, imageColumn: String, annotationColumn: String));
      *(_OWORD *)&__dst[*(int *)(v9 + 48)] = *(_OWORD *)&__src[*(int *)(v9 + 48)];
      *(_OWORD *)&__dst[*(int *)(v9 + 64)] = *(_OWORD *)&__src[*(int *)(v9 + 64)];
      uint64_t v14 = 3;
    }
    else
    {
      if (EnumCaseMultiPayload != 1)
      {
        if (EnumCaseMultiPayload)
        {
          memcpy(__dst, __src, *(void *)(*(void *)(a3 - 8) + 64));
          return __dst;
        }
        uint64_t v5 = type metadata accessor for URL(0);
        (*(void (**)(char *, char *, uint64_t))(*(void *)(v5 - 8) + 32))(__dst, __src, v5);
        uint64_t v6 = a3;
        uint64_t v7 = 0;
        goto LABEL_9;
      }
      uint64_t v10 = type metadata accessor for URL(0);
      uint64_t v11 = *(void (**)(char *, char *, uint64_t))(*(void *)(v10 - 8) + 32);
      v11(__dst, __src, v10);
      uint64_t v12 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (at: URL, annotationFile: URL));
      v11(&__dst[*(int *)(v12 + 48)], &__src[*(int *)(v12 + 48)], v10);
      uint64_t v14 = 1;
    }
    uint64_t v7 = v14;
    uint64_t v6 = a3;
LABEL_9:
    swift_storeEnumTagMultiPayload(__dst, v6, v7);
  }
  return __dst;
}

uint64_t type metadata completion function for MLObjectDetector.DataSource(uint64_t a1)
{
  uint64_t result = type metadata accessor for URL(319);
  if (v2 <= 0x3F)
  {
    v8[0] = *(void *)(result - 8) + 64;
    swift_getTupleTypeLayout2(v6, v8[0]);
    v8[1] = v6;
    _OWORD v8[2] = "0";
    uint64_t result = type metadata accessor for DataFrame(319);
    if (v3 <= 0x3F)
    {
      swift_getTupleTypeLayout3(v7, *(void *)(result - 8) + 64, &unk_347D80, &unk_347D80);
      v8[3] = v7;
      swift_initEnumMetadataMultiPayload(a1, 256, 4, v8, v4, v5);
      return 0;
    }
  }
  return result;
}

uint64_t destroy for MLObjectDetector.ObjectAnnotation(uint64_t a1)
{
  return swift_bridgeObjectRelease(*(void *)(a1 + 8));
}

uint64_t initializeWithCopy for MLObjectDetector.ObjectAnnotation(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  uint64_t v3 = *(void *)(a2 + 8);
  *(void *)(a1 + 8) = v3;
  long long v4 = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  *(_OWORD *)(a1 + 32) = v4;
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  swift_bridgeObjectRetain(v3);
  return a1;
}

void *assignWithCopy for MLObjectDetector.ObjectAnnotation(void *a1, void *a2)
{
  *a1 = *a2;
  uint64_t v3 = a2[1];
  uint64_t v4 = a1[1];
  a1[1] = v3;
  swift_bridgeObjectRetain(v3);
  swift_bridgeObjectRelease(v4);
  a1[2] = a2[2];
  a1[3] = a2[3];
  a1[4] = a2[4];
  a1[5] = a2[5];
  a1[6] = a2[6];
  return a1;
}

uint64_t __swift_memcpy56_8(uint64_t a1, long long *a2)
{
  uint64_t result = a1;
  *(void *)(a1 + 48) = *((void *)a2 + 6);
  long long v3 = *a2;
  long long v4 = a2[1];
  *(_OWORD *)(a1 + 32) = a2[2];
  *(_OWORD *)(a1 + 16) = v4;
  *(_OWORD *)a1 = v3;
  return result;
}

uint64_t assignWithTake for MLObjectDetector.ObjectAnnotation(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  uint64_t v3 = *(void *)(a1 + 8);
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  swift_bridgeObjectRelease(v3);
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  return a1;
}

uint64_t getEnumTagSinglePayload for MLObjectDetector.ObjectAnnotation(uint64_t a1, int a2)
{
  if (a2)
  {
    if (a2 < 0 && *(unsigned char *)(a1 + 56)) {
      int v2 = *(_DWORD *)a1 + 0x7FFFFFFF;
    }
    else {
      int v2 = (*(void *)(a1 + 8) & 0xFFFFFFFF00000001) != 0 ? -1 : *(void *)(a1 + 8) >> 1;
    }
  }
  else
  {
    int v2 = -1;
  }
  return (v2 + 1);
}

void storeEnumTagSinglePayload for MLObjectDetector.ObjectAnnotation(uint64_t a1, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(a1 + 40) = 0;
    *(_OWORD *)(a1 + 24) = 0;
    *(_OWORD *)(a1 + 8) = 0;
    *(void *)a1 = a2 + 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(a1 + 56) = 1;
    }
  }
  else
  {
    if (a3 < 0) {
      *(unsigned char *)(a1 + 56) = 0;
    }
    if (a2) {
      *(void *)(a1 + 8) = 2 * (a2 - 1);
    }
  }
}

ValueMetadata *type metadata accessor for MLObjectDetector.ObjectAnnotation()
{
  return &type metadata for MLObjectDetector.ObjectAnnotation;
}

uint64_t initializeWithCopy for MLObjectDetector.NormalizedAnnotation(uint64_t a1, uint64_t a2)
{
  return initializeWithCopy for MLObjectDetector.NormalizedAnnotation(a1, a2);
}

{
  uint64_t v3;

  *(void *)a1 = *(void *)a2;
  uint64_t v3 = *(void *)(a2 + 8);
  *(void *)(a1 + 8) = v3;
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  swift_bridgeObjectRetain(v3);
  return a1;
}

uint64_t assignWithCopy for MLObjectDetector.NormalizedAnnotation(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  uint64_t v3 = *(void *)(a2 + 8);
  uint64_t v4 = *(void *)(a1 + 8);
  *(void *)(a1 + 8) = v3;
  swift_bridgeObjectRetain(v3);
  swift_bridgeObjectRelease(v4);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(_DWORD *)(a1 + 24) = *(_DWORD *)(a2 + 24);
  *(_DWORD *)(a1 + 28) = *(_DWORD *)(a2 + 28);
  return a1;
}

void *assignWithTake for MLObjectDetector.NormalizedAnnotation(void *a1, void *a2)
{
  *a1 = *a2;
  uint64_t v3 = a1[1];
  a1[1] = a2[1];
  swift_bridgeObjectRelease(v3);
  a1[2] = a2[2];
  a1[3] = a2[3];
  return a1;
}

uint64_t getEnumTagSinglePayload for MLObjectDetector.NormalizedAnnotation(uint64_t a1, int a2)
{
  return getEnumTagSinglePayload for MLRecommenderMetrics(a1, a2);
}

void storeEnumTagSinglePayload for MLObjectDetector.NormalizedAnnotation(uint64_t a1, int a2, int a3)
{
}

ValueMetadata *type metadata accessor for MLObjectDetector.NormalizedAnnotation()
{
  return &type metadata for MLObjectDetector.NormalizedAnnotation;
}

uint64_t base witness table accessor for Equatable in MLObjectDetector.NormalizedAnnotation()
{
  return lazy protocol witness table accessor for type MLObjectDetector.NormalizedAnnotation and conformance MLObjectDetector.NormalizedAnnotation();
}

uint64_t lazy protocol witness table accessor for type MLObjectDetector.NormalizedAnnotation and conformance MLObjectDetector.NormalizedAnnotation()
{
  uint64_t result = lazy protocol witness table cache variable for type MLObjectDetector.NormalizedAnnotation and conformance MLObjectDetector.NormalizedAnnotation;
  if (!lazy protocol witness table cache variable for type MLObjectDetector.NormalizedAnnotation and conformance MLObjectDetector.NormalizedAnnotation)
  {
    uint64_t result = swift_getWitnessTable(&protocol conformance descriptor for MLObjectDetector.NormalizedAnnotation, &type metadata for MLObjectDetector.NormalizedAnnotation);
    lazy protocol witness table cache variable for type MLObjectDetector.NormalizedAnnotation and conformance MLObjectDetector.NormalizedAnnotation = result;
  }
  return result;
}

uint64_t outlined release of MLObjectDetector.NormalizedAnnotation(uint64_t a1)
{
  return a1;
}

uint64_t lazy protocol witness table accessor for type AnyColumn and conformance AnyColumn()
{
  uint64_t result = lazy protocol witness table cache variable for type AnyColumn and conformance AnyColumn;
  if (!lazy protocol witness table cache variable for type AnyColumn and conformance AnyColumn)
  {
    uint64_t v1 = type metadata accessor for AnyColumn(255);
    uint64_t result = swift_getWitnessTable(&protocol conformance descriptor for AnyColumn, v1);
    lazy protocol witness table cache variable for type AnyColumn and conformance AnyColumn = result;
  }
  return result;
}

uint64_t outlined init with copy of Any(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a1 + 24);
  *(void *)(a2 + 24) = v2;
  (**(void (***)(uint64_t, uint64_t))(v2 - 8))(a2, a1);
  return a2;
}

uint64_t lazy protocol witness table accessor for type [MLObjectDetector.DecodableAnnotation] and conformance <A> [A]()
{
  uint64_t result = lazy protocol witness table cache variable for type [MLObjectDetector.DecodableAnnotation] and conformance <A> [A];
  if (!lazy protocol witness table cache variable for type [MLObjectDetector.DecodableAnnotation] and conformance <A> [A])
  {
    uint64_t v1 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for [MLObjectDetector.DecodableAnnotation]);
    lazy protocol witness table accessor for type MLObjectDetector.DecodableAnnotation and conformance MLObjectDetector.DecodableAnnotation();
    uint64_t result = swift_getWitnessTable(&protocol conformance descriptor for <A> [A], v1);
    lazy protocol witness table cache variable for type [MLObjectDetector.DecodableAnnotation] and conformance <A> [A] = result;
  }
  return result;
}

uint64_t lazy protocol witness table accessor for type MLObjectDetector.DecodableAnnotation and conformance MLObjectDetector.DecodableAnnotation()
{
  uint64_t result = lazy protocol witness table cache variable for type MLObjectDetector.DecodableAnnotation and conformance MLObjectDetector.DecodableAnnotation;
  if (!lazy protocol witness table cache variable for type MLObjectDetector.DecodableAnnotation and conformance MLObjectDetector.DecodableAnnotation)
  {
    uint64_t result = swift_getWitnessTable(&protocol conformance descriptor for MLObjectDetector.DecodableAnnotation, &type metadata for MLObjectDetector.DecodableAnnotation);
    lazy protocol witness table cache variable for type MLObjectDetector.DecodableAnnotation and conformance MLObjectDetector.DecodableAnnotation = result;
  }
  return result;
}

uint64_t assignWithCopy for MLObjectDetector.DecodableAnnotation(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  uint64_t v3 = *(void *)(a2 + 8);
  uint64_t v4 = *(void *)(a1 + 8);
  *(void *)(a1 + 8) = v3;
  swift_bridgeObjectRetain(v3);
  swift_bridgeObjectRelease(v4);
  *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
  *(_DWORD *)(a1 + 20) = *(_DWORD *)(a2 + 20);
  *(_DWORD *)(a1 + 24) = *(_DWORD *)(a2 + 24);
  *(_DWORD *)(a1 + 28) = *(_DWORD *)(a2 + 28);
  return a1;
}

uint64_t assignWithTake for MLObjectDetector.DecodableAnnotation(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  uint64_t v3 = *(void *)(a1 + 8);
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  swift_bridgeObjectRelease(v3);
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  return a1;
}

ValueMetadata *type metadata accessor for MLObjectDetector.DecodableAnnotation()
{
  return &type metadata for MLObjectDetector.DecodableAnnotation;
}

void *__swift_project_boxed_opaque_existential_0Tm(void *a1, uint64_t a2)
{
  uint64_t result = a1;
  int v3 = *(_DWORD *)(*(void *)(a2 - 8) + 80);
  if ((v3 & 0x20000) != 0) {
    return (void *)(*a1 + ((v3 + 16) & ~v3));
  }
  return result;
}

uint64_t lazy protocol witness table accessor for type MLObjectDetector.DecodableAnnotation.CodingKeys and conformance MLObjectDetector.DecodableAnnotation.CodingKeys()
{
  uint64_t result = lazy protocol witness table cache variable for type MLObjectDetector.DecodableAnnotation.CodingKeys and conformance MLObjectDetector.DecodableAnnotation.CodingKeys;
  if (!lazy protocol witness table cache variable for type MLObjectDetector.DecodableAnnotation.CodingKeys and conformance MLObjectDetector.DecodableAnnotation.CodingKeys)
  {
    uint64_t result = swift_getWitnessTable(&protocol conformance descriptor for MLObjectDetector.DecodableAnnotation.CodingKeys, &unk_397D28);
    lazy protocol witness table cache variable for type MLObjectDetector.DecodableAnnotation.CodingKeys and conformance MLObjectDetector.DecodableAnnotation.CodingKeys = result;
  }
  return result;
}

{
  uint64_t result;

  uint64_t result = lazy protocol witness table cache variable for type MLObjectDetector.DecodableAnnotation.CodingKeys and conformance MLObjectDetector.DecodableAnnotation.CodingKeys;
  if (!lazy protocol witness table cache variable for type MLObjectDetector.DecodableAnnotation.CodingKeys and conformance MLObjectDetector.DecodableAnnotation.CodingKeys)
  {
    uint64_t result = swift_getWitnessTable(&protocol conformance descriptor for MLObjectDetector.DecodableAnnotation.CodingKeys, &unk_397D28);
    lazy protocol witness table cache variable for type MLObjectDetector.DecodableAnnotation.CodingKeys and conformance MLObjectDetector.DecodableAnnotation.CodingKeys = result;
  }
  return result;
}

{
  uint64_t result;

  uint64_t result = lazy protocol witness table cache variable for type MLObjectDetector.DecodableAnnotation.CodingKeys and conformance MLObjectDetector.DecodableAnnotation.CodingKeys;
  if (!lazy protocol witness table cache variable for type MLObjectDetector.DecodableAnnotation.CodingKeys and conformance MLObjectDetector.DecodableAnnotation.CodingKeys)
  {
    uint64_t result = swift_getWitnessTable(&protocol conformance descriptor for MLObjectDetector.DecodableAnnotation.CodingKeys, &unk_397D28);
    lazy protocol witness table cache variable for type MLObjectDetector.DecodableAnnotation.CodingKeys and conformance MLObjectDetector.DecodableAnnotation.CodingKeys = result;
  }
  return result;
}

{
  uint64_t result;

  uint64_t result = lazy protocol witness table cache variable for type MLObjectDetector.DecodableAnnotation.CodingKeys and conformance MLObjectDetector.DecodableAnnotation.CodingKeys;
  if (!lazy protocol witness table cache variable for type MLObjectDetector.DecodableAnnotation.CodingKeys and conformance MLObjectDetector.DecodableAnnotation.CodingKeys)
  {
    uint64_t result = swift_getWitnessTable(&protocol conformance descriptor for MLObjectDetector.DecodableAnnotation.CodingKeys, &unk_397D28);
    lazy protocol witness table cache variable for type MLObjectDetector.DecodableAnnotation.CodingKeys and conformance MLObjectDetector.DecodableAnnotation.CodingKeys = result;
  }
  return result;
}

uint64_t lazy protocol witness table accessor for type MLObjectDetector.DecodableAnnotation.Coordinates and conformance MLObjectDetector.DecodableAnnotation.Coordinates()
{
  uint64_t result = lazy protocol witness table cache variable for type MLObjectDetector.DecodableAnnotation.Coordinates and conformance MLObjectDetector.DecodableAnnotation.Coordinates;
  if (!lazy protocol witness table cache variable for type MLObjectDetector.DecodableAnnotation.Coordinates and conformance MLObjectDetector.DecodableAnnotation.Coordinates)
  {
    uint64_t result = swift_getWitnessTable(&protocol conformance descriptor for MLObjectDetector.DecodableAnnotation.Coordinates, &type metadata for MLObjectDetector.DecodableAnnotation.Coordinates);
    lazy protocol witness table cache variable for type MLObjectDetector.DecodableAnnotation.Coordinates and conformance MLObjectDetector.DecodableAnnotation.Coordinates = result;
  }
  return result;
}

{
  uint64_t result;

  uint64_t result = lazy protocol witness table cache variable for type MLObjectDetector.DecodableAnnotation.Coordinates and conformance MLObjectDetector.DecodableAnnotation.Coordinates;
  if (!lazy protocol witness table cache variable for type MLObjectDetector.DecodableAnnotation.Coordinates and conformance MLObjectDetector.DecodableAnnotation.Coordinates)
  {
    uint64_t result = swift_getWitnessTable(&protocol conformance descriptor for MLObjectDetector.DecodableAnnotation.Coordinates, &type metadata for MLObjectDetector.DecodableAnnotation.Coordinates);
    lazy protocol witness table cache variable for type MLObjectDetector.DecodableAnnotation.Coordinates and conformance MLObjectDetector.DecodableAnnotation.Coordinates = result;
  }
  return result;
}

void *type metadata accessor for MLObjectDetector.DecodableAnnotation.CodingKeys()
{
  return &unk_397D28;
}

_OWORD *__swift_memcpy16_4(_OWORD *a1, _OWORD *a2)
{
  uint64_t result = a1;
  *a1 = *a2;
  return result;
}

ValueMetadata *type metadata accessor for MLObjectDetector.DecodableAnnotation.Coordinates()
{
  return &type metadata for MLObjectDetector.DecodableAnnotation.Coordinates;
}

uint64_t base witness table accessor for Equatable in MLObjectDetector.DecodableAnnotation.CodingKeys()
{
  return lazy protocol witness table accessor for type MLObjectDetector.DecodableAnnotation.CodingKeys and conformance MLObjectDetector.DecodableAnnotation.CodingKeys();
}

uint64_t base witness table accessor for CustomDebugStringConvertible in MLObjectDetector.DecodableAnnotation.CodingKeys()
{
  return lazy protocol witness table accessor for type MLObjectDetector.DecodableAnnotation.CodingKeys and conformance MLObjectDetector.DecodableAnnotation.CodingKeys();
}

uint64_t base witness table accessor for CustomStringConvertible in MLObjectDetector.DecodableAnnotation.CodingKeys()
{
  return lazy protocol witness table accessor for type MLObjectDetector.DecodableAnnotation.CodingKeys and conformance MLObjectDetector.DecodableAnnotation.CodingKeys();
}

uint64_t lazy protocol witness table accessor for type MLObjectDetector.DecodableAnnotation.Coordinates.CodingKeys and conformance MLObjectDetector.DecodableAnnotation.Coordinates.CodingKeys()
{
  uint64_t result = lazy protocol witness table cache variable for type MLObjectDetector.DecodableAnnotation.Coordinates.CodingKeys and conformance MLObjectDetector.DecodableAnnotation.Coordinates.CodingKeys;
  if (!lazy protocol witness table cache variable for type MLObjectDetector.DecodableAnnotation.Coordinates.CodingKeys and conformance MLObjectDetector.DecodableAnnotation.Coordinates.CodingKeys)
  {
    uint64_t result = swift_getWitnessTable(&protocol conformance descriptor for MLObjectDetector.DecodableAnnotation.Coordinates.CodingKeys, &unk_397E40);
    lazy protocol witness table cache variable for type MLObjectDetector.DecodableAnnotation.Coordinates.CodingKeys and conformance MLObjectDetector.DecodableAnnotation.Coordinates.CodingKeys = result;
  }
  return result;
}

{
  uint64_t result;

  uint64_t result = lazy protocol witness table cache variable for type MLObjectDetector.DecodableAnnotation.Coordinates.CodingKeys and conformance MLObjectDetector.DecodableAnnotation.Coordinates.CodingKeys;
  if (!lazy protocol witness table cache variable for type MLObjectDetector.DecodableAnnotation.Coordinates.CodingKeys and conformance MLObjectDetector.DecodableAnnotation.Coordinates.CodingKeys)
  {
    uint64_t result = swift_getWitnessTable(&protocol conformance descriptor for MLObjectDetector.DecodableAnnotation.Coordinates.CodingKeys, &unk_397E40);
    lazy protocol witness table cache variable for type MLObjectDetector.DecodableAnnotation.Coordinates.CodingKeys and conformance MLObjectDetector.DecodableAnnotation.Coordinates.CodingKeys = result;
  }
  return result;
}

{
  uint64_t result;

  uint64_t result = lazy protocol witness table cache variable for type MLObjectDetector.DecodableAnnotation.Coordinates.CodingKeys and conformance MLObjectDetector.DecodableAnnotation.Coordinates.CodingKeys;
  if (!lazy protocol witness table cache variable for type MLObjectDetector.DecodableAnnotation.Coordinates.CodingKeys and conformance MLObjectDetector.DecodableAnnotation.Coordinates.CodingKeys)
  {
    uint64_t result = swift_getWitnessTable(&protocol conformance descriptor for MLObjectDetector.DecodableAnnotation.Coordinates.CodingKeys, &unk_397E40);
    lazy protocol witness table cache variable for type MLObjectDetector.DecodableAnnotation.Coordinates.CodingKeys and conformance MLObjectDetector.DecodableAnnotation.Coordinates.CodingKeys = result;
  }
  return result;
}

{
  uint64_t result;

  uint64_t result = lazy protocol witness table cache variable for type MLObjectDetector.DecodableAnnotation.Coordinates.CodingKeys and conformance MLObjectDetector.DecodableAnnotation.Coordinates.CodingKeys;
  if (!lazy protocol witness table cache variable for type MLObjectDetector.DecodableAnnotation.Coordinates.CodingKeys and conformance MLObjectDetector.DecodableAnnotation.Coordinates.CodingKeys)
  {
    uint64_t result = swift_getWitnessTable(&protocol conformance descriptor for MLObjectDetector.DecodableAnnotation.Coordinates.CodingKeys, &unk_397E40);
    lazy protocol witness table cache variable for type MLObjectDetector.DecodableAnnotation.Coordinates.CodingKeys and conformance MLObjectDetector.DecodableAnnotation.Coordinates.CodingKeys = result;
  }
  return result;
}

uint64_t getEnumTagSinglePayload for MLObjectDetector.DecodableAnnotation.Coordinates.CodingKeys(unsigned __int8 *a1, unsigned int a2)
{
  if (a2)
  {
    if (a2 < 0xFD) {
      goto LABEL_13;
    }
    unsigned int v2 = a2 + 3;
    int v3 = 1;
    if (v2 >= 0xFF00) {
      int v3 = 2 * (v2 >= 0xFFFF00) + 2;
    }
    if (v3 == 4) {
      int v4 = *(_DWORD *)(a1 + 1);
    }
    else {
      int v4 = v3 == 2 ? *(unsigned __int16 *)(a1 + 1) : a1[1];
    }
    if (v4)
    {
      int v5 = *a1 + (v4 << 8) - 4;
    }
    else
    {
LABEL_13:
      unsigned int v6 = *a1;
      int v7 = v6 - 4;
      BOOL v8 = v6 < 4;
      int v5 = -1;
      if (!v8) {
        int v5 = v7;
      }
    }
  }
  else
  {
    int v5 = -1;
  }
  return (v5 + 1);
}

uint64_t storeEnumTagSinglePayload for MLObjectDetector.DecodableAnnotation.Coordinates.CodingKeys(unsigned char *a1, unsigned int a2, unsigned int a3)
{
  LODWORD(result) = 0;
  if (a3 >= 0xFD)
  {
    unsigned int v4 = a3 + 3;
    LODWORD(result) = 1;
    if (v4 >= 0xFF00) {
      LODWORD(result) = 2 * (v4 >= 0xFFFF00) + 2;
    }
  }
  if (a2 > 0xFC)
  {
    unsigned int v5 = a2 - 253;
    int v6 = (v5 >> 8) + 1;
    *a1 = v5;
    uint64_t result = result;
    switch((int)result)
    {
      case 0:
        return result;
      case 1:
        a1[1] = v6;
        break;
      case 2:
        *(_WORD *)(a1 + 1) = v6;
        break;
      case 3:
LABEL_16:
        BUG();
      case 4:
        *(_DWORD *)(a1 + 1) = v6;
        break;
    }
  }
  else
  {
    uint64_t result = result;
    switch((int)result)
    {
      case 0:
        goto LABEL_11;
      case 1:
        a1[1] = 0;
        goto LABEL_11;
      case 2:
        *(_WORD *)(a1 + 1) = 0;
        goto LABEL_11;
      case 3:
        goto LABEL_16;
      case 4:
        *(_DWORD *)(a1 + 1) = 0;
LABEL_11:
        if (a2) {
          *a1 = a2 + 3;
        }
        break;
      case 5:
        JUMPOUT(0x64D54);
    }
  }
  return result;
}

void destructiveInjectEnumTag for MLObjectDetector.DecodableAnnotation.Coordinates.CodingKeys(unsigned char *a1, char a2)
{
  *a1 = a2;
}

void *type metadata accessor for MLObjectDetector.DecodableAnnotation.Coordinates.CodingKeys()
{
  return &unk_397E40;
}

uint64_t base witness table accessor for Equatable in MLObjectDetector.DecodableAnnotation.Coordinates.CodingKeys()
{
  return lazy protocol witness table accessor for type MLObjectDetector.DecodableAnnotation.Coordinates.CodingKeys and conformance MLObjectDetector.DecodableAnnotation.Coordinates.CodingKeys();
}

uint64_t base witness table accessor for CustomDebugStringConvertible in MLObjectDetector.DecodableAnnotation.Coordinates.CodingKeys()
{
  return lazy protocol witness table accessor for type MLObjectDetector.DecodableAnnotation.Coordinates.CodingKeys and conformance MLObjectDetector.DecodableAnnotation.Coordinates.CodingKeys();
}

uint64_t base witness table accessor for CustomStringConvertible in MLObjectDetector.DecodableAnnotation.Coordinates.CodingKeys()
{
  return lazy protocol witness table accessor for type MLObjectDetector.DecodableAnnotation.Coordinates.CodingKeys and conformance MLObjectDetector.DecodableAnnotation.Coordinates.CodingKeys();
}

char closure #1 in Sequence<>.contains(_:)specialized partial apply(uint64_t *a1)
{
  return partial apply for specialized closure #1 in Sequence<>.contains(_:)(a1);
}

uint64_t destroy for MLObjectDetector.NormalizedAnnotation(uint64_t a1)
{
  return destroy for MLObjectDetector.ObjectAnnotation(a1);
}

uint64_t initializeBufferWithCopyOfBuffer for MLObjectDetector.DecodableAnnotation(uint64_t *a1, uint64_t *a2)
{
  return initializeBufferWithCopyOfBuffer for CGRect(a1, a2);
}

uint64_t MLClassifier.init<A>(model:)(void *a1, uint64_t a2)
{
  uint64_t v57 = v2;
  uint64_t v49 = type metadata accessor for MLSupportVectorClassifier(0);
  int64_t v3 = *(void *)(*(void *)(v49 - 8) + 64);
  unsigned int v4 = alloca(v3);
  unsigned int v5 = alloca(v3);
  uint64_t v56 = &v42;
  uint64_t v48 = type metadata accessor for MLLogisticRegressionClassifier(0);
  int64_t v6 = *(void *)(*(void *)(v48 - 8) + 64);
  int v7 = alloca(v6);
  BOOL v8 = alloca(v6);
  uint64_t v55 = &v42;
  uint64_t v47 = type metadata accessor for MLRandomForestClassifier(0);
  int64_t v9 = *(void *)(*(void *)(v47 - 8) + 64);
  uint64_t v10 = alloca(v9);
  uint64_t v11 = alloca(v9);
  long long v46 = &v42;
  uint64_t v45 = type metadata accessor for MLDecisionTreeClassifier(0);
  int64_t v12 = *(void *)(*(void *)(v45 - 8) + 64);
  uint64_t v13 = alloca(v12);
  uint64_t v14 = alloca(v12);
  unint64_t v54 = &v42;
  uint64_t v15 = type metadata accessor for MLBoostedTreeClassifier(0);
  int64_t v16 = *(void *)(*(void *)(v15 - 8) + 64);
  uint64_t v17 = alloca(v16);
  uint64_t v18 = alloca(v16);
  uint64_t v19 = *(uint64_t **)(a2 - 8);
  int64_t v20 = v19[8];
  Swift::String v21 = alloca(v20);
  uint64_t v22 = alloca(v20);
  uint64_t v50 = &v42;
  char v23 = alloca(v20);
  uint64_t v24 = alloca(v20);
  Swift::Int v25 = (void (*)(uint64_t *, void *, uint64_t))v19[2];
  uint64_t v53 = a1;
  uint64_t v51 = v25;
  ((void (*)(uint64_t *, void *))v25)(&v42, a1);
  BOOL v58 = &v42;
  uint64_t v52 = &v42;
  if (swift_dynamicCast(&v42, &v42, a2, v15, 0))
  {
    int v26 = (uint64_t (*)(uint64_t *, uint64_t))v19[1];
    v26(v53, a2);
    uint64_t v27 = v57;
    outlined init with take of MLClassifierMetrics((uint64_t)v58, v57, type metadata accessor for MLBoostedTreeClassifier);
    uint64_t v28 = v52;
    unsigned int v29 = 0;
  }
  else
  {
    BOOL v58 = v19;
    uint64_t v30 = v53;
    uint64_t v28 = v52;
    if (swift_dynamicCast(v54, v52, a2, v45, 0))
    {
      int v26 = (uint64_t (*)(uint64_t *, uint64_t))v58[1];
      v26(v30, a2);
      uint64_t v27 = v57;
      outlined init with take of MLClassifierMetrics((uint64_t)v54, v57, type metadata accessor for MLDecisionTreeClassifier);
      int v41 = 1;
    }
    else
    {
      unsigned __int8 v31 = v46;
      char v32 = swift_dynamicCast(v46, v28, a2, v47, 0);
      uint64_t v27 = v57;
      uint64_t v33 = v30;
      if (v32)
      {
        uint64_t v34 = (uint64_t)v31;
        int v26 = (uint64_t (*)(uint64_t *, uint64_t))v58[1];
        v26(v33, a2);
        outlined init with take of MLClassifierMetrics(v34, v27, type metadata accessor for MLRandomForestClassifier);
        int v41 = 2;
      }
      else if (swift_dynamicCast(v55, v28, a2, v48, 0))
      {
        int v26 = (uint64_t (*)(uint64_t *, uint64_t))v58[1];
        v26(v30, a2);
        outlined init with take of MLClassifierMetrics((uint64_t)v55, v27, type metadata accessor for MLLogisticRegressionClassifier);
        int v41 = 3;
      }
      else
      {
        if (!swift_dynamicCast(v56, v28, a2, v49, 0))
        {
          unint64_t v37 = v50;
          v51(v50, v30, a2);
          unint64_t v43 = 0;
          uint64_t v44 = (char *)0xE000000000000000;
          _StringGuts.grow(_:)(22);
          swift_bridgeObjectRelease((_BYTE)v44);
          unint64_t v43 = 0xD000000000000013;
          uint64_t v44 = "CreateML/MLRegressor.swift" + 0x8000000000000000;
          uint64_t DynamicType = swift_getDynamicType(v37, a2, 0);
          v39._uint64_t countAndFlagsBits = _typeName(_:qualified:)(DynamicType, 0);
          LOBYTE(v37) = v39._object;
          String.append(_:)(v39);
          swift_bridgeObjectRelease((_BYTE)v37);
          v40._uint64_t countAndFlagsBits = 46;
          v40._char object = (void *)0xE100000000000000;
          String.append(_:)(v40);
          _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, v43, v44, "CreateML/MLClassifier.swift", 27, 2, 68, 0);
          BUG();
        }
        int v26 = (uint64_t (*)(uint64_t *, uint64_t))v58[1];
        v26(v30, a2);
        outlined init with take of MLClassifierMetrics((uint64_t)v56, v27, type metadata accessor for MLSupportVectorClassifier);
        int v41 = 4;
      }
    }
    unsigned int v29 = v41;
  }
  uint64_t v35 = type metadata accessor for MLClassifier(0);
  swift_storeEnumTagMultiPayload(v27, v35, v29);
  return v26(v28, a2);
}

uint64_t MLClassifier.init(trainingData:targetColumn:featureColumns:)(uint64_t a1, uint64_t a2, char *a3, void *a4)
{
  uint64_t v188 = v5;
  uint64_t v193 = a4;
  uint64_t v189 = a3;
  uint64_t v159 = v4;
  int64_t v6 = *(void *)(*(void *)(type metadata accessor for MLClassifierMetrics.Precomputed(0) - 8) + 64);
  int v7 = alloca(v6);
  BOOL v8 = alloca(v6);
  uint64_t v165 = &v150;
  uint64_t v170 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ClassificationMetrics<Int>);
  uint64_t v171 = *(void *)(v170 - 8);
  int64_t v9 = *(void *)(v171 + 64);
  uint64_t v10 = alloca(v9);
  uint64_t v11 = alloca(v9);
  uint64_t v166 = &v150;
  uint64_t v172 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ClassificationMetrics<String>);
  uint64_t v173 = *(void *)(v172 - 8);
  int64_t v12 = *(void *)(v173 + 64);
  uint64_t v13 = alloca(v12);
  uint64_t v14 = alloca(v12);
  uint64_t v174 = &v150;
  uint64_t v167 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Either<ClassificationMetrics<String>, ClassificationMetrics<Int>>);
  int64_t v15 = *(void *)(*(void *)(v167 - 8) + 64);
  int64_t v16 = alloca(v15);
  uint64_t v17 = alloca(v15);
  uint64_t v157 = &v150;
  uint64_t v18 = alloca(v15);
  uint64_t v19 = alloca(v15);
  uint64_t v158 = &v150;
  int64_t v20 = *(void *)(*(void *)(type metadata accessor for AnyClassificationMetrics(0) - 8) + 64);
  Swift::String v21 = alloca(v20);
  uint64_t v22 = alloca(v20);
  char v168 = &v150;
  char v23 = alloca(v20);
  uint64_t v24 = alloca(v20);
  uint64_t v169 = &v150;
  uint64_t v163 = type metadata accessor for MLClassifierMetrics.Contents(0);
  int64_t v25 = *(void *)(*(void *)(v163 - 8) + 64);
  int v26 = alloca(v25);
  uint64_t v27 = alloca(v25);
  uint64_t v153 = &v150;
  uint64_t v28 = alloca(v25);
  unsigned int v29 = alloca(v25);
  uint64_t v154 = &v150;
  int64_t v30 = *(void *)(*(void *)(type metadata accessor for MLClassifierMetrics(0) - 8) + 64);
  unsigned __int8 v31 = alloca(v30);
  char v32 = alloca(v30);
  uint64_t v164 = &v150;
  uint64_t v33 = alloca(v30);
  uint64_t v34 = alloca(v30);
  uint64_t v184 = &v150;
  int64_t v35 = *(void *)(*(void *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for DataFrame?)
                              - 8)
                  + 64);
  char v36 = alloca(v35);
  unint64_t v37 = alloca(v35);
  Float64 v179 = &v150;
  uint64_t v190 = type metadata accessor for DataFrame(0);
  uint64_t v38 = *(void *)(v190 - 8);
  int64_t v39 = *(void *)(v38 + 64);
  Swift::String v40 = alloca(v39);
  int v41 = alloca(v39);
  uint64_t v178 = &v150;
  uint64_t v42 = alloca(v39);
  unint64_t v43 = alloca(v39);
  uint64_t v177 = &v150;
  uint64_t v176 = type metadata accessor for DataFrame.Slice(0);
  uint64_t v44 = *(void *)(v176 - 8);
  int64_t v45 = *(void *)(v44 + 64);
  long long v46 = alloca(v45);
  uint64_t v47 = alloca(v45);
  double v192 = COERCE_DOUBLE(&v150);
  uint64_t v48 = alloca(v45);
  uint64_t v49 = alloca(v45);
  uint64_t v186 = &v150;
  uint64_t v50 = alloca(v45);
  uint64_t v51 = alloca(v45);
  uint64_t v185 = &v150;
  uint64_t v181 = a1;
  char v52 = (char)v189;
  uint64_t v53 = v188;
  unint64_t v54 = static _FeatureUtilities.selectFeaturesFromTrainingData(trainingData:targetColumn:featureColumns:)(a1, a2, v189, (uint64_t)v193);
  uint64_t v188 = v53;
  if (v53)
  {
    (*(void (**)(uint64_t, uint64_t))(v38 + 8))(v181, v190);
    swift_bridgeObjectRelease(v52);
    return swift_bridgeObjectRelease((_BYTE)v193);
  }
  uint64_t v180 = v54;
  uint64_t v155 = a2;
  uint64_t v183 = v38;
  uint64_t v182 = v44;
  swift_bridgeObjectRelease((_BYTE)v193);
  uint64_t v56 = v181;
  DataFrameProtocol.randomSplit(by:seed:)(v185, v186, 0, 0, v190, &protocol witness table for DataFrame, 0.1);
  uint64_t v57 = v176;
  if (DataFrameProtocol.isEmpty.getter(v176, &protocol witness table for DataFrame.Slice))
  {
    swift_bridgeObjectRelease((_BYTE)v180);
    swift_bridgeObjectRelease((_BYTE)v189);
    uint64_t v58 = lazy protocol witness table accessor for type MLCreateError and conformance MLCreateError();
    swift_allocError(&type metadata for MLCreateError, v58, 0, 0);
    *(void *)uint64_t v59 = 0xD000000000000045;
    *(void *)(v59 + 8) = "filenames, for example: " + 0x8000000000000000;
    *(_OWORD *)(v59 + 16) = 0;
    *(_OWORD *)(v59 + 32) = 0;
    *(unsigned char *)(v59 + 48) = 0;
    swift_willThrow(&type metadata for MLCreateError, v58, v59, v60, v61, v62);
    (*(void (**)(uint64_t, uint64_t))(v183 + 8))(v56, v190);
    char v63 = *(void (**)(long long *, uint64_t))(v182 + 8);
    v63(v186, v57);
    return ((uint64_t (*)(long long *, uint64_t))v63)(v185, v57);
  }
  char v64 = *(void (**)(void, long long *, uint64_t))(v182 + 16);
  double v65 = v192;
  v64(*(void *)&v192, v185, v57);
  DataFrame.init(_:)(*(void *)&v65);
  v64(*(void *)&v65, v186, v57);
  DataFrame.init(_:)(*(void *)&v65);
  char v66 = static MLClassifier.selectClassifiers(featureCount:)(*((void *)v180 + 2));
  double v67 = *((double *)v66 + 2);
  char v175 = v66;
  if (v67 == 0.0)
  {
    uint64_t v193 = _swiftEmptyArrayStorage;
LABEL_25:
    swift_bridgeObjectRelease((_BYTE)v189);
    swift_bridgeObjectRelease((_BYTE)v175);
    swift_bridgeObjectRelease((_BYTE)v180);
    uint64_t v92 = v193;
    uint64_t v93 = (long long *)v193[2];
    if (!v93)
    {
      long long v160 = 0;
      long long v161 = 0;
      uint64_t v162 = 0;
      goto LABEL_61;
    }
    outlined init with copy of TabularRegressionTask((uint64_t)(v193 + 4), (uint64_t)&v150);
    swift_bridgeObjectRetain((_BYTE)v92);
    uint64_t v94 = (uint64_t)v184;
    if (v93 == (long long *)((char *)&dword_0 + 1))
    {
      LOBYTE(v95) = (_BYTE)v92;
LABEL_52:
      char v135 = (char)v95;
      outlined init with take of MLIdentifier(&v150, (uint64_t)&v160);
      swift_bridgeObjectRelease(v135);
      if (*((void *)&v161 + 1))
      {
        swift_bridgeObjectRelease(v135);
        outlined init with take of MLIdentifier(&v160, (uint64_t)&v150);
        uint64_t v136 = v151;
        uint64_t v137 = __swift_project_boxed_opaque_existential_0Tm(&v150, v151);
        uint64_t v138 = *(void *)(v136 - 8);
        int64_t v139 = *(void *)(v138 + 64);
        char v140 = alloca(v139);
        Swift::String v141 = alloca(v139);
        (*(void (**)(long long *, void *, uint64_t))(v138 + 16))(&v150, v137, v136);
        MLClassifier.init<A>(model:)(&v150, v136);
        char v142 = *(void (**)(uint64_t, uint64_t))(v183 + 8);
        uint64_t v143 = v190;
        v142(v181, v190);
        v142((uint64_t)v178, v143);
        v142((uint64_t)v177, v143);
        Swift::String v144 = *(void (**)(long long *, uint64_t))(v182 + 8);
        uint64_t v145 = v176;
        v144(v186, v176);
        v144(v185, v145);
        return __swift_destroy_boxed_opaque_existential_1Tm(&v150);
      }
LABEL_61:
      BUG();
    }
    uint64_t v96 = (uint64_t)(v92 + 9);
    uint64_t v97 = (unsigned char *)(&dword_0 + 1);
    int v95 = v92;
    Float64 v179 = v93;
    while (1)
    {
      if ((unint64_t)v97 >= v95[2]) {
        BUG();
      }
      uint64_t v189 = v97;
      double v192 = *(double *)&v96;
      outlined init with copy of TabularRegressionTask(v96, (uint64_t)&v160);
      uint64_t v98 = *((void *)&v161 + 1);
      uint64_t v99 = v162;
      __swift_project_boxed_opaque_existential_0Tm(&v160, *((uint64_t *)&v161 + 1));
      (*(void (**)(uint64_t, uint64_t))(v99 + 24))(v98, v99);
      uint64_t v100 = (uint64_t)v154;
      outlined init with copy of MLTrainingSessionParameters(v94, (uint64_t)v154, type metadata accessor for MLClassifierMetrics.Contents);
      int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload(v100, v163);
      uint64_t v102 = v100;
      if (!EnumCaseMultiPayload) {
        break;
      }
      if (EnumCaseMultiPayload == 1)
      {
        unsigned __int8 v103 = (double *)v165;
        outlined init with take of MLClassifierMetrics(v102, (uint64_t)v165, type metadata accessor for MLClassifierMetrics.Precomputed);
        double v191 = 1.0 - *v103;
        uint64_t v104 = (uint64_t)v103;
        unint64_t v105 = type metadata accessor for MLClassifierMetrics.Precomputed;
LABEL_38:
        outlined destroy of MLActivityClassifier.ModelParameters(v104, v105);
        goto LABEL_39;
      }
      outlined destroy of MLActivityClassifier.ModelParameters(v100, type metadata accessor for MLClassifierMetrics.Contents);
      double v191 = 0.0;
LABEL_39:
      outlined destroy of MLActivityClassifier.ModelParameters(v94, type metadata accessor for MLClassifierMetrics);
      uint64_t v116 = v151;
      uint64_t v117 = v152;
      __swift_project_boxed_opaque_existential_0Tm(&v150, v151);
      uint64_t v118 = (uint64_t)v164;
      (*(void (**)(uint64_t, uint64_t))(v117 + 24))(v116, v117);
      uint64_t v119 = (uint64_t)v153;
      outlined init with copy of MLTrainingSessionParameters(v118, (uint64_t)v153, type metadata accessor for MLClassifierMetrics.Contents);
      int v120 = swift_getEnumCaseMultiPayload(v119, v163);
      uint64_t v121 = v119;
      if (v120)
      {
        if (v120 == 1)
        {
          char v122 = (double *)v165;
          outlined init with take of MLClassifierMetrics(v121, (uint64_t)v165, type metadata accessor for MLClassifierMetrics.Precomputed);
          double v187 = 1.0 - *v122;
          outlined destroy of MLActivityClassifier.ModelParameters((uint64_t)v122, type metadata accessor for MLClassifierMetrics.Precomputed);
          double v123 = v187;
        }
        else
        {
          outlined destroy of MLActivityClassifier.ModelParameters(v119, type metadata accessor for MLClassifierMetrics.Contents);
          double v123 = 0.0;
        }
        uint64_t v94 = (uint64_t)v184;
        double v132 = v192;
      }
      else
      {
        uint64_t v124 = (uint64_t)v168;
        outlined init with take of MLClassifierMetrics(v121, (uint64_t)v168, type metadata accessor for AnyClassificationMetrics);
        uint64_t v125 = v124;
        uint64_t v126 = (uint64_t)v157;
        outlined init with copy of Either<ClassificationMetrics<String>, ClassificationMetrics<Int>>(v125, (uint64_t)v157);
        if (swift_getEnumCaseMultiPayload(v126, v167) == 1)
        {
          uint64_t v127 = v126;
          Swift::String v128 = v166;
          uint64_t v129 = v170;
          uint64_t v130 = v171;
          (*(void (**)(long long *, uint64_t, uint64_t))(v171 + 32))(v166, v127, v170);
          double v187 = ClassificationMetrics.accuracy.getter(v129);
          uint64_t v131 = v128;
        }
        else
        {
          uint64_t v133 = v174;
          uint64_t v134 = v126;
          uint64_t v129 = v172;
          uint64_t v130 = v173;
          (*(void (**)(long long *, uint64_t, uint64_t))(v173 + 32))(v174, v134, v172);
          uint64_t v131 = v133;
          double v187 = ClassificationMetrics.accuracy.getter(v129);
        }
        (*(void (**)(long long *, uint64_t))(v130 + 8))(v131, v129);
        uint64_t v94 = (uint64_t)v184;
        outlined destroy of MLActivityClassifier.ModelParameters((uint64_t)v168, type metadata accessor for AnyClassificationMetrics);
        uint64_t v118 = (uint64_t)v164;
        double v132 = v192;
        double v123 = v187;
      }
      double v192 = 1.0 - v191;
      double v191 = 1.0 - v123;
      outlined destroy of MLActivityClassifier.ModelParameters(v118, type metadata accessor for MLClassifierMetrics);
      if (v191 <= v192)
      {
        __swift_destroy_boxed_opaque_existential_1Tm(&v160);
      }
      else
      {
        __swift_destroy_boxed_opaque_existential_1Tm(&v150);
        outlined init with take of MLIdentifier(&v160, (uint64_t)&v150);
      }
      uint64_t v97 = v189 + 1;
      uint64_t v96 = *(void *)&v132 + 40;
      int v95 = v193;
      if (v179 == (long long *)(v189 + 1)) {
        goto LABEL_52;
      }
    }
    uint64_t v106 = (uint64_t)v169;
    outlined init with take of MLClassifierMetrics(v102, (uint64_t)v169, type metadata accessor for AnyClassificationMetrics);
    uint64_t v107 = v106;
    uint64_t v108 = (uint64_t)v158;
    outlined init with copy of Either<ClassificationMetrics<String>, ClassificationMetrics<Int>>(v107, (uint64_t)v158);
    int v109 = swift_getEnumCaseMultiPayload(v108, v167);
    uint64_t v110 = v166;
    if (v109 == 1)
    {
      uint64_t v111 = v108;
      uint64_t v112 = v166;
      uint64_t v113 = v170;
      uint64_t v114 = v170;
      uint64_t v115 = v171;
    }
    else
    {
      uint64_t v112 = v174;
      uint64_t v110 = v174;
      uint64_t v111 = v108;
      uint64_t v113 = v172;
      uint64_t v114 = v172;
      uint64_t v115 = v173;
    }
    (*(void (**)(long long *, uint64_t, uint64_t))(v115 + 32))(v110, v111, v114);
    double v191 = ClassificationMetrics.accuracy.getter(v113);
    (*(void (**)(long long *, uint64_t))(v115 + 8))(v112, v113);
    uint64_t v104 = (uint64_t)v169;
    unint64_t v105 = type metadata accessor for AnyClassificationMetrics;
    goto LABEL_38;
  }
  Float64 v156 = *(void (**)(long long *, long long *, uint64_t))(v183 + 16);
  unsigned __int8 v68 = v66 + 5;
  uint64_t v193 = _swiftEmptyArrayStorage;
  uint64_t v69 = v190;
  while (1)
  {
    double v191 = v67;
    uint64_t v70 = *(v68 - 1);
    double v187 = *(double *)&v68;
    uint64_t v71 = *v68;
    uint64_t v72 = (uint64_t)v179;
    v156(v179, v177, v69);
    __swift_storeEnumTagSinglePayload(v72, 0, 1, v69);
    uint64_t v73 = *(void *)(v71 + 8);
    double v192 = *(double *)(v73 + 24);
    char v74 = v180;
    swift_bridgeObjectRetain((_BYTE)v180);
    uint64_t v75 = v188;
    uint64_t v76 = (*(uint64_t (**)(long long *, uint64_t, uint64_t, char *, char *, uint64_t, uint64_t))&v192)(v178, v72, v155, v189, v74, v70, v73);
    uint64_t v188 = v75;
    if (v75) {
      break;
    }
    uint64_t v80 = v76;
    outlined destroy of DataFrame?(v72);
    swift_bridgeObjectRelease((_BYTE)v74);
    double v192 = COERCE_DOUBLE(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TabularClassificationTask));
    uint64_t v81 = _arrayForceCast<A, B>(_:)(v80, v70, *(void *)&v192);
    swift_bridgeObjectRelease(v80);
    uint64_t v82 = *(void *)(v81 + 16);
    int64_t v83 = v193[2];
    int64_t v84 = v82 + v83;
    if (__OFADD__(v82, v83)) {
      BUG();
    }
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v193);
    uint64_t v86 = v193;
    if (!isUniquelyReferenced_nonNull_native || v193[3] >> 1 < v84)
    {
      if (v83 > v84) {
        int64_t v84 = v83;
      }
      uint64_t v86 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(isUniquelyReferenced_nonNull_native, v84, 1, (uint64_t)v193);
    }
    uint64_t v69 = v190;
    BOOL v87 = *(void *)(v81 + 16) == 0;
    uint64_t v193 = v86;
    if (v87)
    {
      if (v82) {
        BUG();
      }
    }
    else
    {
      uint64_t v88 = v86[2];
      if ((v86[3] >> 1) - v88 < v82) {
        BUG();
      }
      unint64_t v89 = (unint64_t)&v86[5 * v88 + 4];
      if (v81 + 32 < v89 + 40 * v82 && v89 < v81 + 40 * v82 + 32)
      {
        _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize overlapping range", 49, 2, "Swift/UnsafePointer.swift", 25, 2, 1092, 1);
        BUG();
      }
      swift_arrayInitWithCopy(v89, v81 + 32, v82, *(void *)&v192);
      if (v82)
      {
        BOOL v90 = __OFADD__(v193[2], v82);
        uint64_t v91 = v193[2] + v82;
        if (v90) {
          BUG();
        }
        v193[2] = v91;
      }
    }
    swift_bridgeObjectRelease(v81);
    unsigned __int8 v68 = (uint64_t *)(*(void *)&v187 + 16);
    *(void *)&double v67 = *(void *)&v191 - 1;
    if (*(void *)&v191 == 1) {
      goto LABEL_25;
    }
  }
  swift_bridgeObjectRelease_n(v74, 2, v77, v78, v79);
  swift_bridgeObjectRelease((_BYTE)v189);
  uint64_t v146 = *(void (**)(uint64_t, uint64_t))(v183 + 8);
  uint64_t v147 = v190;
  v146(v181, v190);
  outlined destroy of DataFrame?(v72);
  swift_bridgeObjectRelease((_BYTE)v193);
  swift_bridgeObjectRelease((_BYTE)v175);
  v146((uint64_t)v178, v147);
  v146((uint64_t)v177, v147);
  uint64_t v148 = *(void (**)(long long *, uint64_t))(v182 + 8);
  uint64_t v149 = v176;
  v148(v186, v176);
  return ((uint64_t (*)(long long *, uint64_t))v148)(v185, v149);
}

void *static MLClassifier.selectClassifiers(featureCount:)(uint64_t a1)
{
  uint64_t v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<TabularClassificationTask.Type>);
  if (a1 > 199)
  {
    uint64_t v2 = (void *)swift_allocObject(v1, 48, 7);
    v2[2] = 1;
    v2[3] = 2;
    v2[4] = type metadata accessor for MLLogisticRegressionClassifier(0);
    v2[5] = &protocol witness table for MLLogisticRegressionClassifier;
  }
  else
  {
    uint64_t v2 = (void *)swift_allocObject(v1, 96, 7);
    v2[2] = 4;
    v2[3] = 8;
    v2[4] = type metadata accessor for MLLogisticRegressionClassifier(0);
    v2[5] = &protocol witness table for MLLogisticRegressionClassifier;
    v2[6] = type metadata accessor for MLBoostedTreeClassifier(0);
    v2[7] = &protocol witness table for MLBoostedTreeClassifier;
    v2[8] = type metadata accessor for MLDecisionTreeClassifier(0);
    v2[9] = &protocol witness table for MLDecisionTreeClassifier;
    v2[10] = type metadata accessor for MLRandomForestClassifier(0);
    v2[11] = &protocol witness table for MLRandomForestClassifier;
  }
  return v2;
}

uint64_t MLClassifier.init(trainingData:targetColumn:featureColumns:)(uint64_t *a1, uint64_t a2, char *a3, void *a4)
{
  int64_t v12 = a4;
  uint64_t v13 = a3;
  int64_t v4 = *(void *)(*(void *)(type metadata accessor for DataFrame(0) - 8) + 64);
  uint64_t v5 = alloca(v4);
  int64_t v6 = alloca(v4);
  char v7 = *((unsigned char *)a1 + 8);
  uint64_t v10 = *a1;
  char v11 = v7;
  DataFrame.init(_:)((uint64_t)&v10);
  return MLClassifier.init(trainingData:targetColumn:featureColumns:)((uint64_t)&v9, a2, v13, v12);
}

uint64_t MLClassifier.predictions(from:)(uint64_t a1)
{
  uint64_t v79 = v2;
  uint64_t v61 = v3;
  uint64_t v78 = a1;
  uint64_t v80 = v1;
  uint64_t v64 = *(void *)(type metadata accessor for MLSupportVectorClassifier(0) - 8);
  int64_t v4 = *(void *)(v64 + 64);
  uint64_t v5 = alloca(v4);
  int64_t v6 = alloca(v4);
  uint64_t v76 = &v61;
  int64_t v62 = v4;
  char v7 = alloca(v4);
  BOOL v8 = alloca(v4);
  uint64_t v75 = &v61;
  uint64_t v67 = type metadata accessor for MLLogisticRegressionClassifier(0);
  int64_t v9 = *(void *)(*(void *)(v67 - 8) + 64);
  uint64_t v10 = alloca(v9);
  char v11 = alloca(v9);
  char v63 = &v61;
  uint64_t v68 = type metadata accessor for MLRandomForestClassifier(0);
  int64_t v12 = *(void *)(*(void *)(v68 - 8) + 64);
  uint64_t v13 = alloca(v12);
  uint64_t v14 = alloca(v12);
  double v65 = &v61;
  uint64_t v69 = type metadata accessor for MLDecisionTreeClassifier(0);
  int64_t v15 = *(void *)(*(void *)(v69 - 8) + 64);
  int64_t v16 = alloca(v15);
  uint64_t v17 = alloca(v15);
  char v66 = &v61;
  uint64_t v82 = type metadata accessor for DataFrame(0);
  uint64_t v81 = *(void *)(v82 - 8);
  int64_t v18 = *(void *)(v81 + 64);
  uint64_t v19 = alloca(v18);
  int64_t v20 = alloca(v18);
  uint64_t v77 = &v61;
  Swift::String v21 = alloca(v18);
  uint64_t v22 = alloca(v18);
  uint64_t v71 = &v61;
  char v23 = alloca(v18);
  uint64_t v24 = alloca(v18);
  uint64_t v72 = &v61;
  int64_t v25 = alloca(v18);
  int v26 = alloca(v18);
  uint64_t v73 = &v61;
  uint64_t v27 = alloca(v18);
  uint64_t v28 = alloca(v18);
  char v74 = &v61;
  uint64_t v29 = type metadata accessor for MLBoostedTreeClassifier(0);
  int64_t v30 = *(void *)(*(void *)(v29 - 8) + 64);
  unsigned __int8 v31 = alloca(v30);
  char v32 = alloca(v30);
  uint64_t v70 = &v61;
  uint64_t v33 = type metadata accessor for MLClassifier(0);
  int64_t v34 = *(void *)(*(void *)(v33 - 8) + 64);
  int64_t v35 = alloca(v34);
  char v36 = alloca(v34);
  outlined init with copy of MLTrainingSessionParameters(v61, (uint64_t)&v61, type metadata accessor for MLClassifier);
  switch(swift_getEnumCaseMultiPayload(&v61, v33))
  {
    case 0u:
      unint64_t v37 = v74;
      uint64_t v38 = v70;
      outlined init with take of MLClassifierMetrics((uint64_t)&v61, (uint64_t)v70, type metadata accessor for MLBoostedTreeClassifier);
      uint64_t v39 = *(int *)(v29 + 28);
      Swift::String v40 = v38;
      uint64_t v41 = v78;
      DataFrame.validateContainsColumns(_:context:)(*(Swift::OpaquePointer *)((char *)v38 + v39), (Swift::String)__PAIR128__(0xE700000000000000, 0x65727574616546));
      if (!v42)
      {
        AnyTreeClassifierModel.applied(to:eventHandler:)(v41, 0, 0);
        DataFrame.subscript.getter(*v38, v38[1]);
        (*(void (**)(uint64_t *, uint64_t))(v81 + 8))(v37, v82);
      }
      unint64_t v43 = type metadata accessor for MLBoostedTreeClassifier;
      goto LABEL_14;
    case 1u:
      uint64_t v44 = v73;
      Swift::String v40 = v66;
      outlined init with take of MLClassifierMetrics((uint64_t)&v61, (uint64_t)v66, type metadata accessor for MLDecisionTreeClassifier);
      uint64_t v45 = v78;
      DataFrame.validateContainsColumns(_:context:)(*(Swift::OpaquePointer *)((char *)v40 + *(int *)(v69 + 28)), (Swift::String)__PAIR128__(0xE700000000000000, 0x65727574616546));
      if (!v46)
      {
        AnyTreeClassifierModel.applied(to:eventHandler:)(v45, 0, 0);
        DataFrame.subscript.getter(*v40, v40[1]);
        (*(void (**)(uint64_t *, uint64_t))(v81 + 8))(v44, v82);
      }
      unint64_t v43 = type metadata accessor for MLDecisionTreeClassifier;
      goto LABEL_14;
    case 2u:
      uint64_t v47 = v72;
      Swift::String v40 = v65;
      outlined init with take of MLClassifierMetrics((uint64_t)&v61, (uint64_t)v65, type metadata accessor for MLRandomForestClassifier);
      uint64_t v48 = v78;
      DataFrame.validateContainsColumns(_:context:)(*(Swift::OpaquePointer *)((char *)v40 + *(int *)(v68 + 28)), (Swift::String)__PAIR128__(0xE700000000000000, 0x65727574616546));
      if (!v49)
      {
        AnyTreeClassifierModel.applied(to:eventHandler:)(v48, 0, 0);
        DataFrame.subscript.getter(*v40, v40[1]);
        (*(void (**)(uint64_t *, uint64_t))(v81 + 8))(v47, v82);
      }
      unint64_t v43 = type metadata accessor for MLRandomForestClassifier;
      goto LABEL_14;
    case 3u:
      uint64_t v50 = v71;
      Swift::String v40 = v63;
      outlined init with take of MLClassifierMetrics((uint64_t)&v61, (uint64_t)v63, type metadata accessor for MLLogisticRegressionClassifier);
      uint64_t v51 = v78;
      DataFrame.validateContainsColumns(_:context:)(*(Swift::OpaquePointer *)((char *)v40 + *(int *)(v67 + 28)), (Swift::String)__PAIR128__(0xE700000000000000, 0x65727574616546));
      if (!v52)
      {
        MLLogisticRegressionClassifier.Model.applied(to:eventHandler:)(v51, 0, 0);
        DataFrame.subscript.getter(*v40, v40[1]);
        (*(void (**)(uint64_t *, uint64_t))(v81 + 8))(v50, v82);
      }
      unint64_t v43 = type metadata accessor for MLLogisticRegressionClassifier;
LABEL_14:
      uint64_t result = outlined destroy of MLActivityClassifier.ModelParameters((uint64_t)v40, v43);
      break;
    case 4u:
      uint64_t v54 = (uint64_t)v75;
      outlined init with take of MLClassifierMetrics((uint64_t)&v61, (uint64_t)v75, type metadata accessor for MLSupportVectorClassifier);
      uint64_t v55 = v81;
      (*(void (**)(uint64_t *, uint64_t, uint64_t))(v81 + 16))(v77, v78, v82);
      outlined init with copy of MLTrainingSessionParameters(v54, (uint64_t)v76, type metadata accessor for MLSupportVectorClassifier);
      uint64_t v56 = *(unsigned __int8 *)(v55 + 80);
      uint64_t v57 = ~*(unsigned __int8 *)(v55 + 80) & (v56 + 16);
      uint64_t v58 = *(unsigned __int8 *)(v64 + 80);
      int64_t v59 = ~v58 & (v57 + v58 + v18);
      uint64_t v60 = swift_allocObject(&unk_397E60, v59 + v62, v58 | v56 | 7);
      (*(void (**)(uint64_t, uint64_t *, uint64_t))(v55 + 32))(v60 + v57, v77, v82);
      outlined init with take of MLClassifierMetrics((uint64_t)v76, v60 + v59, type metadata accessor for MLSupportVectorClassifier);
      specialized blockAwait<A>(_:)((uint64_t)&async function pointer to partial apply for closure #1 in MLSupportVectorClassifier.predictions(from:), v60);
      swift_release();
      uint64_t result = outlined destroy of MLActivityClassifier.ModelParameters((uint64_t)v75, type metadata accessor for MLSupportVectorClassifier);
      break;
  }
  return result;
}

uint64_t MLClassifier.predictions(from:)(uint64_t a1, __m128 a2)
{
  uint64_t v114 = v3;
  uint64_t v91 = v4;
  uint64_t v116 = v2;
  int64_t v5 = *(void *)(*(void *)(type metadata accessor for MLSupportVectorClassifier(0) - 8) + 64);
  int64_t v6 = alloca(v5);
  char v7 = alloca(v5);
  uint64_t v93 = &v91;
  uint64_t v94 = type metadata accessor for MLLogisticRegressionClassifier(0);
  int64_t v8 = *(void *)(*(void *)(v94 - 8) + 64);
  int64_t v9 = alloca(v8);
  uint64_t v10 = alloca(v8);
  uint64_t v92 = &v91;
  uint64_t v96 = type metadata accessor for MLRandomForestClassifier(0);
  int64_t v11 = *(void *)(*(void *)(v96 - 8) + 64);
  int64_t v12 = alloca(v11);
  uint64_t v13 = alloca(v11);
  int v95 = &v91;
  uint64_t v98 = type metadata accessor for MLDecisionTreeClassifier(0);
  int64_t v14 = *(void *)(*(void *)(v98 - 8) + 64);
  int64_t v15 = alloca(v14);
  int64_t v16 = alloca(v14);
  uint64_t v97 = &v91;
  uint64_t v117 = type metadata accessor for DataFrame(0);
  uint64_t v118 = *(void *)(v117 - 8);
  int64_t v17 = *(void *)(v118 + 64);
  int64_t v18 = alloca(v17);
  uint64_t v19 = alloca(v17);
  uint64_t v104 = &v91;
  int64_t v20 = alloca(v17);
  Swift::String v21 = alloca(v17);
  uint64_t v100 = &v91;
  uint64_t v22 = alloca(v17);
  char v23 = alloca(v17);
  unint64_t v105 = &v91;
  uint64_t v24 = alloca(v17);
  int64_t v25 = alloca(v17);
  unsigned __int8 v101 = &v91;
  int v26 = alloca(v17);
  uint64_t v27 = alloca(v17);
  uint64_t v106 = &v91;
  uint64_t v28 = alloca(v17);
  uint64_t v29 = alloca(v17);
  uint64_t v102 = &v91;
  int64_t v30 = alloca(v17);
  unsigned __int8 v31 = alloca(v17);
  uint64_t v107 = &v91;
  char v32 = alloca(v17);
  uint64_t v33 = alloca(v17);
  uint64_t v99 = &v91;
  int64_t v34 = *(void *)(*(void *)(type metadata accessor for AnyColumn(0) - 8) + 64);
  int64_t v35 = alloca(v34);
  char v36 = alloca(v34);
  uint64_t v108 = &v91;
  unint64_t v37 = alloca(v34);
  uint64_t v38 = alloca(v34);
  int v109 = &v91;
  uint64_t v39 = alloca(v34);
  Swift::String v40 = alloca(v34);
  uint64_t v110 = &v91;
  uint64_t v41 = alloca(v34);
  uint64_t v42 = alloca(v34);
  uint64_t v111 = &v91;
  uint64_t v43 = type metadata accessor for MLBoostedTreeClassifier(0);
  int64_t v44 = *(void *)(*(void *)(v43 - 8) + 64);
  uint64_t v45 = alloca(v44);
  uint64_t v46 = alloca(v44);
  unsigned __int8 v103 = &v91;
  uint64_t v47 = type metadata accessor for MLClassifier(0);
  int64_t v48 = *(void *)(*(void *)(v47 - 8) + 64);
  uint64_t v49 = alloca(v48);
  uint64_t v50 = alloca(v48);
  uint64_t v115 = *(void *)a1;
  char v51 = *(unsigned char *)(a1 + 8);
  outlined init with copy of MLTrainingSessionParameters(v91, (uint64_t)&v91, type metadata accessor for MLClassifier);
  switch(swift_getEnumCaseMultiPayload(&v91, v47))
  {
    case 0u:
      uint64_t v52 = v103;
      outlined init with take of MLClassifierMetrics((uint64_t)&v91, (uint64_t)v103, type metadata accessor for MLBoostedTreeClassifier);
      uint64_t v112 = v115;
      char v113 = v51 & 1;
      outlined copy of Result<_DataTable, Error>(v115, v51);
      uint64_t v53 = (uint64_t)v99;
      DataFrame.init(_:)((uint64_t)&v112);
      DataFrame.validateContainsColumns(_:context:)(*(Swift::OpaquePointer *)((char *)v52 + *(int *)(v43 + 28)), (Swift::String)__PAIR128__(0xE700000000000000, 0x65727574616546));
      if (v55)
      {
        (*(void (**)(uint64_t, uint64_t))(v118 + 8))(v53, v117);
      }
      else
      {
        AnyTreeClassifierModel.applied(to:eventHandler:)(v53, 0, 0);
        uint64_t v69 = *v52;
        uint64_t v70 = v52[1];
        uint64_t v71 = v107;
        DataFrame.subscript.getter(v69, v70);
        uint64_t v72 = *(double (**)(uint64_t *, uint64_t))(v118 + 8);
        uint64_t v73 = v71;
        uint64_t v74 = v117;
        v72(v73, v117);
        uint64_t v75 = v74;
        uint64_t v52 = v103;
        *(double *)v54.i64 = v72((uint64_t *)v53, v75);
        MLUntypedColumn.init(_:convertArraysToShapedArrays:)((uint64_t)v111, 1, v54);
      }
      uint64_t v56 = type metadata accessor for MLBoostedTreeClassifier;
      goto LABEL_16;
    case 1u:
      uint64_t v52 = v97;
      outlined init with take of MLClassifierMetrics((uint64_t)&v91, (uint64_t)v97, type metadata accessor for MLDecisionTreeClassifier);
      uint64_t v112 = v115;
      char v113 = v51 & 1;
      outlined copy of Result<_DataTable, Error>(v115, v51);
      uint64_t v57 = (uint64_t)v102;
      DataFrame.init(_:)((uint64_t)&v112);
      DataFrame.validateContainsColumns(_:context:)(*(Swift::OpaquePointer *)((char *)v52 + *(int *)(v98 + 28)), (Swift::String)__PAIR128__(0xE700000000000000, 0x65727574616546));
      if (v59)
      {
        (*(void (**)(uint64_t, uint64_t))(v118 + 8))(v57, v117);
      }
      else
      {
        AnyTreeClassifierModel.applied(to:eventHandler:)(v57, 0, 0);
        uint64_t v76 = v106;
        DataFrame.subscript.getter(*v52, v52[1]);
        uint64_t v77 = *(double (**)(uint64_t *, uint64_t))(v118 + 8);
        uint64_t v78 = v76;
        uint64_t v79 = v52;
        uint64_t v80 = v117;
        v77(v78, v117);
        uint64_t v81 = v80;
        uint64_t v52 = v79;
        *(double *)v58.i64 = v77(v102, v81);
        MLUntypedColumn.init(_:convertArraysToShapedArrays:)((uint64_t)v110, 1, v58);
      }
      uint64_t v56 = type metadata accessor for MLDecisionTreeClassifier;
      goto LABEL_16;
    case 2u:
      uint64_t v52 = v95;
      outlined init with take of MLClassifierMetrics((uint64_t)&v91, (uint64_t)v95, type metadata accessor for MLRandomForestClassifier);
      uint64_t v112 = v115;
      char v113 = v51 & 1;
      outlined copy of Result<_DataTable, Error>(v115, v51);
      uint64_t v60 = (uint64_t)v101;
      DataFrame.init(_:)((uint64_t)&v112);
      DataFrame.validateContainsColumns(_:context:)(*(Swift::OpaquePointer *)((char *)v52 + *(int *)(v96 + 28)), (Swift::String)__PAIR128__(0xE700000000000000, 0x65727574616546));
      if (!v62)
      {
        AnyTreeClassifierModel.applied(to:eventHandler:)(v60, 0, 0);
        uint64_t v82 = v105;
        DataFrame.subscript.getter(*v52, v52[1]);
        int64_t v83 = *(double (**)(uint64_t *, uint64_t))(v118 + 8);
        int64_t v84 = v82;
        unsigned __int8 v85 = v52;
        uint64_t v86 = v117;
        v83(v84, v117);
        *(double *)v61.i64 = v83(v101, v86);
        MLUntypedColumn.init(_:convertArraysToShapedArrays:)((uint64_t)v109, 1, v61);
        uint64_t v56 = type metadata accessor for MLRandomForestClassifier;
        goto LABEL_20;
      }
      (*(void (**)(uint64_t, uint64_t))(v118 + 8))(v60, v117);
      uint64_t v56 = type metadata accessor for MLRandomForestClassifier;
      goto LABEL_16;
    case 3u:
      uint64_t v52 = v92;
      outlined init with take of MLClassifierMetrics((uint64_t)&v91, (uint64_t)v92, type metadata accessor for MLLogisticRegressionClassifier);
      uint64_t v112 = v115;
      char v113 = v51 & 1;
      outlined copy of Result<_DataTable, Error>(v115, v51);
      uint64_t v63 = (uint64_t)v100;
      DataFrame.init(_:)((uint64_t)&v112);
      DataFrame.validateContainsColumns(_:context:)(*(Swift::OpaquePointer *)((char *)v52 + *(int *)(v94 + 28)), (Swift::String)__PAIR128__(0xE700000000000000, 0x65727574616546));
      if (v65)
      {
        (*(void (**)(uint64_t, uint64_t))(v118 + 8))(v63, v117);
        uint64_t v56 = type metadata accessor for MLLogisticRegressionClassifier;
LABEL_16:
        uint64_t v66 = (uint64_t)v52;
      }
      else
      {
        MLLogisticRegressionClassifier.Model.applied(to:eventHandler:)(v63, 0, 0);
        BOOL v87 = v104;
        DataFrame.subscript.getter(*v52, v52[1]);
        uint64_t v88 = *(double (**)(uint64_t *, uint64_t))(v118 + 8);
        unint64_t v89 = v87;
        unsigned __int8 v85 = v52;
        uint64_t v90 = v117;
        v88(v89, v117);
        *(double *)v64.i64 = v88(v100, v90);
        MLUntypedColumn.init(_:convertArraysToShapedArrays:)((uint64_t)v108, 1, v64);
        uint64_t v56 = type metadata accessor for MLLogisticRegressionClassifier;
LABEL_20:
        uint64_t v66 = (uint64_t)v85;
      }
      return outlined destroy of MLActivityClassifier.ModelParameters(v66, v56);
    case 4u:
      uint64_t v68 = (uint64_t)v93;
      outlined init with take of MLClassifierMetrics((uint64_t)&v91, (uint64_t)v93, type metadata accessor for MLSupportVectorClassifier);
      uint64_t v112 = v115;
      char v113 = v51 & 1;
      MLSupportVectorClassifier.predictions(from:)((uint64_t)&v112, a2);
      return outlined destroy of MLActivityClassifier.ModelParameters(v68, type metadata accessor for MLSupportVectorClassifier);
  }
}

uint64_t MLClassifier.evaluation(on:)(uint64_t a1)
{
  uint64_t v3 = v2;
  uint64_t v31 = a1;
  uint64_t v32 = v1;
  int64_t v4 = *(void *)(*(void *)(type metadata accessor for MLSupportVectorClassifier(0) - 8) + 64);
  int64_t v5 = alloca(v4);
  int64_t v6 = alloca(v4);
  uint64_t v28 = (uint64_t *)&v28;
  int64_t v7 = *(void *)(*(void *)(type metadata accessor for MLLogisticRegressionClassifier(0) - 8) + 64);
  int64_t v8 = alloca(v7);
  int64_t v9 = alloca(v7);
  uint64_t v29 = (uint64_t *)&v28;
  int64_t v10 = *(void *)(*(void *)(type metadata accessor for MLRandomForestClassifier(0) - 8) + 64);
  int64_t v11 = alloca(v10);
  int64_t v12 = alloca(v10);
  int64_t v30 = (uint64_t *)&v28;
  int64_t v13 = *(void *)(*(void *)(type metadata accessor for MLDecisionTreeClassifier(0) - 8) + 64);
  int64_t v14 = alloca(v13);
  int64_t v15 = alloca(v13);
  int64_t v16 = *(void *)(*(void *)(type metadata accessor for MLBoostedTreeClassifier(0) - 8) + 64);
  int64_t v17 = alloca(v16);
  int64_t v18 = alloca(v16);
  uint64_t v19 = (uint64_t *)&v28;
  uint64_t v20 = type metadata accessor for MLClassifier(0);
  int64_t v21 = *(void *)(*(void *)(v20 - 8) + 64);
  uint64_t v22 = alloca(v21);
  char v23 = alloca(v21);
  outlined init with copy of MLTrainingSessionParameters(v3, (uint64_t)&v28, type metadata accessor for MLClassifier);
  switch(swift_getEnumCaseMultiPayload(&v28, v20))
  {
    case 0u:
      uint64_t v24 = type metadata accessor for MLBoostedTreeClassifier;
      outlined init with take of MLClassifierMetrics((uint64_t)&v28, (uint64_t)&v28, type metadata accessor for MLBoostedTreeClassifier);
      MLBoostedTreeClassifier.evaluation(on:)(v31);
      goto LABEL_7;
    case 1u:
      outlined init with take of MLClassifierMetrics((uint64_t)&v28, (uint64_t)&v28, type metadata accessor for MLDecisionTreeClassifier);
      MLDecisionTreeClassifier.evaluation(on:)(v31);
      int64_t v25 = (uint64_t *)&v28;
      int v26 = type metadata accessor for MLDecisionTreeClassifier;
      return outlined destroy of MLActivityClassifier.ModelParameters((uint64_t)v25, v26);
    case 2u:
      uint64_t v24 = type metadata accessor for MLRandomForestClassifier;
      uint64_t v19 = v30;
      outlined init with take of MLClassifierMetrics((uint64_t)&v28, (uint64_t)v30, type metadata accessor for MLRandomForestClassifier);
      MLRandomForestClassifier.evaluation(on:)(v31);
      goto LABEL_7;
    case 3u:
      uint64_t v24 = type metadata accessor for MLLogisticRegressionClassifier;
      uint64_t v19 = v29;
      outlined init with take of MLClassifierMetrics((uint64_t)&v28, (uint64_t)v29, type metadata accessor for MLLogisticRegressionClassifier);
      MLLogisticRegressionClassifier.evaluation(on:)(v31);
      goto LABEL_7;
    case 4u:
      uint64_t v24 = type metadata accessor for MLSupportVectorClassifier;
      uint64_t v19 = v28;
      outlined init with take of MLClassifierMetrics((uint64_t)&v28, (uint64_t)v28, type metadata accessor for MLSupportVectorClassifier);
      MLSupportVectorClassifier.evaluation(on:)(v31);
LABEL_7:
      int64_t v25 = v19;
      int v26 = v24;
      return outlined destroy of MLActivityClassifier.ModelParameters((uint64_t)v25, v26);
  }
}

{
  uint64_t v1;
  uint64_t v2;
  int64_t v3;
  void *v4;
  void *v5;
  int64_t v6;
  void *v7;
  void *v8;
  int64_t v9;
  void *v10;
  void *v11;
  int64_t v12;
  void *v13;
  void *v14;
  int64_t v15;
  void *v16;
  void *v17;
  int64_t v18;
  void *v19;
  void *v20;
  uint64_t v21;
  int64_t v22;
  void *v23;
  void *v24;
  uint64_t v25;
  char v26;
  uint64_t *v27;
  uint64_t (*v28)(uint64_t);
  uint64_t v29;
  uint64_t v31;
  uint64_t *v32;
  uint64_t *v33;
  uint64_t *v34;
  uint64_t *v35;
  uint64_t v36;
  char v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t *v41;

  uint64_t v31 = v2;
  uint64_t v38 = v1;
  uint64_t v3 = *(void *)(*(void *)(type metadata accessor for MLSupportVectorClassifier(0) - 8) + 64);
  int64_t v4 = alloca(v3);
  int64_t v5 = alloca(v3);
  uint64_t v32 = &v31;
  int64_t v6 = *(void *)(*(void *)(type metadata accessor for MLLogisticRegressionClassifier(0) - 8) + 64);
  int64_t v7 = alloca(v6);
  int64_t v8 = alloca(v6);
  uint64_t v33 = &v31;
  int64_t v9 = *(void *)(*(void *)(type metadata accessor for MLRandomForestClassifier(0) - 8) + 64);
  int64_t v10 = alloca(v9);
  int64_t v11 = alloca(v9);
  int64_t v34 = &v31;
  int64_t v12 = *(void *)(*(void *)(type metadata accessor for MLDecisionTreeClassifier(0) - 8) + 64);
  int64_t v13 = alloca(v12);
  int64_t v14 = alloca(v12);
  int64_t v35 = &v31;
  Swift::String v40 = type metadata accessor for DataFrame(0);
  uint64_t v39 = *(void *)(v40 - 8);
  int64_t v15 = *(void *)(v39 + 64);
  int64_t v16 = alloca(v15);
  int64_t v17 = alloca(v15);
  uint64_t v41 = &v31;
  int64_t v18 = *(void *)(*(void *)(type metadata accessor for MLBoostedTreeClassifier(0) - 8) + 64);
  uint64_t v19 = alloca(v18);
  uint64_t v20 = alloca(v18);
  int64_t v21 = type metadata accessor for MLClassifier(0);
  uint64_t v22 = *(void *)(*(void *)(v21 - 8) + 64);
  char v23 = alloca(v22);
  uint64_t v24 = alloca(v22);
  int64_t v25 = *(void *)a1;
  int v26 = *(unsigned char *)(a1 + 8);
  outlined init with copy of MLTrainingSessionParameters(v31, (uint64_t)&v31, type metadata accessor for MLClassifier);
  switch(swift_getEnumCaseMultiPayload(&v31, v21))
  {
    case 0u:
      uint64_t v27 = &v31;
      uint64_t v28 = type metadata accessor for MLBoostedTreeClassifier;
      outlined init with take of MLClassifierMetrics((uint64_t)&v31, (uint64_t)&v31, type metadata accessor for MLBoostedTreeClassifier);
      char v36 = v25;
      unint64_t v37 = v26 & 1;
      outlined copy of Result<_DataTable, Error>(v25, v26);
      uint64_t v29 = (uint64_t)v41;
      DataFrame.init(_:)((uint64_t)&v36);
      MLBoostedTreeClassifier.evaluation(on:)(v29);
      break;
    case 1u:
      uint64_t v28 = type metadata accessor for MLDecisionTreeClassifier;
      uint64_t v27 = v35;
      outlined init with take of MLClassifierMetrics((uint64_t)&v31, (uint64_t)v35, type metadata accessor for MLDecisionTreeClassifier);
      char v36 = v25;
      unint64_t v37 = v26 & 1;
      outlined copy of Result<_DataTable, Error>(v25, v26);
      uint64_t v29 = (uint64_t)v41;
      DataFrame.init(_:)((uint64_t)&v36);
      MLDecisionTreeClassifier.evaluation(on:)(v29);
      break;
    case 2u:
      uint64_t v28 = type metadata accessor for MLRandomForestClassifier;
      uint64_t v27 = v34;
      outlined init with take of MLClassifierMetrics((uint64_t)&v31, (uint64_t)v34, type metadata accessor for MLRandomForestClassifier);
      char v36 = v25;
      unint64_t v37 = v26 & 1;
      outlined copy of Result<_DataTable, Error>(v25, v26);
      uint64_t v29 = (uint64_t)v41;
      DataFrame.init(_:)((uint64_t)&v36);
      MLRandomForestClassifier.evaluation(on:)(v29);
      break;
    case 3u:
      uint64_t v28 = type metadata accessor for MLLogisticRegressionClassifier;
      uint64_t v27 = v33;
      outlined init with take of MLClassifierMetrics((uint64_t)&v31, (uint64_t)v33, type metadata accessor for MLLogisticRegressionClassifier);
      char v36 = v25;
      unint64_t v37 = v26 & 1;
      outlined copy of Result<_DataTable, Error>(v25, v26);
      uint64_t v29 = (uint64_t)v41;
      DataFrame.init(_:)((uint64_t)&v36);
      MLLogisticRegressionClassifier.evaluation(on:)(v29);
      break;
    case 4u:
      uint64_t v28 = type metadata accessor for MLSupportVectorClassifier;
      uint64_t v27 = v32;
      outlined init with take of MLClassifierMetrics((uint64_t)&v31, (uint64_t)v32, type metadata accessor for MLSupportVectorClassifier);
      char v36 = v25;
      unint64_t v37 = v26 & 1;
      outlined copy of Result<_DataTable, Error>(v25, v26);
      uint64_t v29 = (uint64_t)v41;
      DataFrame.init(_:)((uint64_t)&v36);
      MLSupportVectorClassifier.evaluation(on:)(v29);
      break;
  }
  (*(void (**)(uint64_t, uint64_t))(v39 + 8))(v29, v40);
  return outlined destroy of MLActivityClassifier.ModelParameters((uint64_t)v27, v28);
}

uint64_t MLClassifier.write(to:metadata:)(uint64_t a1, uint64_t *a2)
{
  uint64_t v36 = v2;
  uint64_t v42 = a1;
  int64_t v3 = *(void *)(*(void *)(type metadata accessor for MLSupportVectorClassifier(0) - 8) + 64);
  int64_t v4 = alloca(v3);
  int64_t v5 = alloca(v3);
  unint64_t v37 = &v27;
  int64_t v6 = *(void *)(*(void *)(type metadata accessor for MLLogisticRegressionClassifier(0) - 8) + 64);
  int64_t v7 = alloca(v6);
  int64_t v8 = alloca(v6);
  uint64_t v38 = &v27;
  int64_t v9 = *(void *)(*(void *)(type metadata accessor for MLRandomForestClassifier(0) - 8) + 64);
  int64_t v10 = alloca(v9);
  int64_t v11 = alloca(v9);
  uint64_t v39 = &v27;
  int64_t v12 = *(void *)(*(void *)(type metadata accessor for MLDecisionTreeClassifier(0) - 8) + 64);
  int64_t v13 = alloca(v12);
  int64_t v14 = alloca(v12);
  Swift::String v40 = &v27;
  int64_t v15 = *(void *)(*(void *)(type metadata accessor for MLBoostedTreeClassifier(0) - 8) + 64);
  int64_t v16 = alloca(v15);
  int64_t v17 = alloca(v15);
  uint64_t v41 = &v27;
  uint64_t v18 = type metadata accessor for MLClassifier(0);
  int64_t v19 = *(void *)(*(void *)(v18 - 8) + 64);
  uint64_t v20 = alloca(v19);
  int64_t v21 = alloca(v19);
  uint64_t v22 = *a2;
  uint64_t v49 = a2[1];
  uint64_t v48 = a2[2];
  uint64_t v47 = a2[3];
  uint64_t v46 = a2[4];
  uint64_t v45 = a2[5];
  uint64_t v44 = a2[6];
  uint64_t v43 = a2[7];
  uint64_t v23 = a2[8];
  outlined init with copy of MLTrainingSessionParameters(v36, (uint64_t)&v27, type metadata accessor for MLClassifier);
  switch(swift_getEnumCaseMultiPayload(&v27, v18))
  {
    case 0u:
      uint64_t v24 = type metadata accessor for MLBoostedTreeClassifier;
      uint64_t v25 = (uint64_t)v41;
      outlined init with take of MLClassifierMetrics((uint64_t)&v27, (uint64_t)v41, type metadata accessor for MLBoostedTreeClassifier);
      uint64_t v27 = v22;
      uint64_t v28 = v49;
      uint64_t v29 = v48;
      uint64_t v30 = v47;
      uint64_t v31 = v46;
      uint64_t v32 = v45;
      uint64_t v33 = v44;
      uint64_t v34 = v43;
      uint64_t v35 = v23;
      MLBoostedTreeClassifier.write(to:metadata:)(v42, &v27);
      break;
    case 1u:
      uint64_t v24 = type metadata accessor for MLDecisionTreeClassifier;
      uint64_t v25 = (uint64_t)v40;
      outlined init with take of MLClassifierMetrics((uint64_t)&v27, (uint64_t)v40, type metadata accessor for MLDecisionTreeClassifier);
      uint64_t v27 = v22;
      uint64_t v28 = v49;
      uint64_t v29 = v48;
      uint64_t v30 = v47;
      uint64_t v31 = v46;
      uint64_t v32 = v45;
      uint64_t v33 = v44;
      uint64_t v34 = v43;
      uint64_t v35 = v23;
      MLDecisionTreeClassifier.write(to:metadata:)(v42, &v27);
      break;
    case 2u:
      uint64_t v24 = type metadata accessor for MLRandomForestClassifier;
      uint64_t v25 = (uint64_t)v39;
      outlined init with take of MLClassifierMetrics((uint64_t)&v27, (uint64_t)v39, type metadata accessor for MLRandomForestClassifier);
      uint64_t v27 = v22;
      uint64_t v28 = v49;
      uint64_t v29 = v48;
      uint64_t v30 = v47;
      uint64_t v31 = v46;
      uint64_t v32 = v45;
      uint64_t v33 = v44;
      uint64_t v34 = v43;
      uint64_t v35 = v23;
      MLRandomForestClassifier.write(to:metadata:)(v42, &v27);
      break;
    case 3u:
      uint64_t v24 = type metadata accessor for MLLogisticRegressionClassifier;
      uint64_t v25 = (uint64_t)v38;
      outlined init with take of MLClassifierMetrics((uint64_t)&v27, (uint64_t)v38, type metadata accessor for MLLogisticRegressionClassifier);
      uint64_t v27 = v22;
      uint64_t v28 = v49;
      uint64_t v29 = v48;
      uint64_t v30 = v47;
      uint64_t v31 = v46;
      uint64_t v32 = v45;
      uint64_t v33 = v44;
      uint64_t v34 = v43;
      uint64_t v35 = v23;
      MLLogisticRegressionClassifier.write(to:metadata:)(v42, &v27);
      break;
    case 4u:
      uint64_t v24 = type metadata accessor for MLSupportVectorClassifier;
      uint64_t v25 = (uint64_t)v37;
      outlined init with take of MLClassifierMetrics((uint64_t)&v27, (uint64_t)v37, type metadata accessor for MLSupportVectorClassifier);
      uint64_t v27 = v22;
      uint64_t v28 = v49;
      uint64_t v29 = v48;
      uint64_t v30 = v47;
      uint64_t v31 = v46;
      uint64_t v32 = v45;
      uint64_t v33 = v44;
      uint64_t v34 = v43;
      uint64_t v35 = v23;
      MLSupportVectorClassifier.write(to:metadata:)(v42, &v27);
      break;
  }
  return outlined destroy of MLActivityClassifier.ModelParameters(v25, v24);
}

uint64_t MLClassifier.write(toFile:metadata:)(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v86 = v3;
  uint64_t v76 = v4;
  uint64_t v87 = a2;
  uint64_t v88 = a1;
  int64_t v6 = *(void *)(*(void *)(type metadata accessor for MLSupportVectorClassifier(0) - 8) + 64);
  int64_t v7 = alloca(v6);
  int64_t v8 = alloca(v6);
  uint64_t v82 = &v66;
  int64_t v9 = *(void *)(*(void *)(type metadata accessor for MLLogisticRegressionClassifier(0) - 8) + 64);
  int64_t v10 = alloca(v9);
  int64_t v11 = alloca(v9);
  int64_t v83 = &v66;
  int64_t v12 = *(void *)(*(void *)(type metadata accessor for MLRandomForestClassifier(0) - 8) + 64);
  int64_t v13 = alloca(v12);
  int64_t v14 = alloca(v12);
  int64_t v84 = &v66;
  int64_t v15 = *(void *)(*(void *)(type metadata accessor for MLDecisionTreeClassifier(0) - 8) + 64);
  int64_t v16 = alloca(v15);
  int64_t v17 = alloca(v15);
  unsigned __int8 v85 = &v66;
  uint64_t v91 = type metadata accessor for URL.DirectoryHint(0);
  uint64_t v90 = *(void *)(v91 - 8);
  int64_t v18 = *(void *)(v90 + 64);
  int64_t v19 = alloca(v18);
  uint64_t v20 = alloca(v18);
  unint64_t v89 = &v66;
  int64_t v21 = *(void *)(*(void *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for URL?)
                              - 8)
                  + 64);
  uint64_t v22 = alloca(v21);
  uint64_t v23 = alloca(v21);
  unsigned __int8 v101 = &v66;
  uint64_t v103 = type metadata accessor for URL(0);
  uint64_t v102 = *(void *)(v103 - 8);
  int64_t v24 = *(void *)(v102 + 64);
  uint64_t v25 = alloca(v24);
  int v26 = alloca(v24);
  uint64_t v77 = &v66;
  uint64_t v27 = alloca(v24);
  uint64_t v28 = alloca(v24);
  uint64_t v78 = &v66;
  uint64_t v29 = alloca(v24);
  uint64_t v30 = alloca(v24);
  uint64_t v79 = &v66;
  uint64_t v31 = alloca(v24);
  uint64_t v32 = alloca(v24);
  uint64_t v80 = &v66;
  uint64_t v33 = alloca(v24);
  uint64_t v34 = alloca(v24);
  uint64_t v81 = &v66;
  int64_t v35 = *(void *)(*(void *)(type metadata accessor for MLBoostedTreeClassifier(0) - 8) + 64);
  uint64_t v36 = alloca(v35);
  unint64_t v37 = alloca(v35);
  uint64_t v38 = type metadata accessor for MLClassifier(0);
  int64_t v39 = *(void *)(*(void *)(v38 - 8) + 64);
  Swift::String v40 = alloca(v39);
  uint64_t v41 = alloca(v39);
  uint64_t v99 = *a3;
  uint64_t v98 = a3[1];
  uint64_t v97 = a3[2];
  uint64_t v96 = a3[3];
  uint64_t v95 = a3[4];
  uint64_t v94 = a3[5];
  uint64_t v93 = a3[6];
  uint64_t v92 = a3[7];
  uint64_t v42 = a3[8];
  outlined init with copy of MLTrainingSessionParameters(v76, (uint64_t)&v66, type metadata accessor for MLClassifier);
  int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload(&v66, v38);
  uint64_t v100 = v42;
  switch(EnumCaseMultiPayload)
  {
    case 0:
      outlined init with take of MLClassifierMetrics((uint64_t)&v66, (uint64_t)&v66, type metadata accessor for MLBoostedTreeClassifier);
      __swift_storeEnumTagSinglePayload((uint64_t)v101, 1, 1, v103);
      uint64_t v44 = v89;
      (*(void (**)(uint64_t *, void, uint64_t))(v90 + 104))(v89, enum case for URL.DirectoryHint.inferFromPath(_:), v91);
      uint64_t v45 = v87;
      swift_bridgeObjectRetain(v87);
      uint64_t v46 = (uint64_t)v81;
      URL.init(filePath:directoryHint:relativeTo:)(v88, v45, v44, v101);
      uint64_t v67 = v99;
      uint64_t v68 = v98;
      uint64_t v69 = v97;
      uint64_t v70 = v96;
      uint64_t v71 = v95;
      uint64_t v72 = v94;
      uint64_t v73 = v93;
      uint64_t v74 = v92;
      uint64_t v75 = v100;
      MLBoostedTreeClassifier.write(to:metadata:)(v46, &v67);
      (*(void (**)(uint64_t *, uint64_t))(v102 + 8))(v81, v103);
      uint64_t v47 = type metadata accessor for MLBoostedTreeClassifier;
      uint64_t v48 = &v66;
      break;
    case 1:
      outlined init with take of MLClassifierMetrics((uint64_t)&v66, (uint64_t)v85, type metadata accessor for MLDecisionTreeClassifier);
      uint64_t v49 = (uint64_t)v101;
      __swift_storeEnumTagSinglePayload((uint64_t)v101, 1, 1, v103);
      uint64_t v50 = v89;
      (*(void (**)(uint64_t *, void, uint64_t))(v90 + 104))(v89, enum case for URL.DirectoryHint.inferFromPath(_:), v91);
      uint64_t v51 = v87;
      swift_bridgeObjectRetain(v87);
      uint64_t v52 = (uint64_t)v80;
      URL.init(filePath:directoryHint:relativeTo:)(v88, v51, v50, v49);
      uint64_t v67 = v99;
      uint64_t v68 = v98;
      uint64_t v69 = v97;
      uint64_t v70 = v96;
      uint64_t v71 = v95;
      uint64_t v72 = v94;
      uint64_t v73 = v93;
      uint64_t v74 = v92;
      uint64_t v75 = v100;
      MLDecisionTreeClassifier.write(to:metadata:)(v52, &v67);
      (*(void (**)(uint64_t *, uint64_t))(v102 + 8))(v80, v103);
      uint64_t v47 = type metadata accessor for MLDecisionTreeClassifier;
      uint64_t v48 = v85;
      break;
    case 2:
      outlined init with take of MLClassifierMetrics((uint64_t)&v66, (uint64_t)v84, type metadata accessor for MLRandomForestClassifier);
      uint64_t v53 = (uint64_t)v101;
      __swift_storeEnumTagSinglePayload((uint64_t)v101, 1, 1, v103);
      __m128 v54 = v89;
      (*(void (**)(uint64_t *, void, uint64_t))(v90 + 104))(v89, enum case for URL.DirectoryHint.inferFromPath(_:), v91);
      uint64_t v55 = v87;
      swift_bridgeObjectRetain(v87);
      uint64_t v56 = (uint64_t)v79;
      URL.init(filePath:directoryHint:relativeTo:)(v88, v55, v54, v53);
      uint64_t v67 = v99;
      uint64_t v68 = v98;
      uint64_t v69 = v97;
      uint64_t v70 = v96;
      uint64_t v71 = v95;
      uint64_t v72 = v94;
      uint64_t v73 = v93;
      uint64_t v74 = v92;
      uint64_t v75 = v100;
      MLRandomForestClassifier.write(to:metadata:)(v56, &v67);
      (*(void (**)(uint64_t *, uint64_t))(v102 + 8))(v79, v103);
      uint64_t v47 = type metadata accessor for MLRandomForestClassifier;
      uint64_t v48 = v84;
      break;
    case 3:
      outlined init with take of MLClassifierMetrics((uint64_t)&v66, (uint64_t)v83, type metadata accessor for MLLogisticRegressionClassifier);
      uint64_t v57 = (uint64_t)v101;
      __swift_storeEnumTagSinglePayload((uint64_t)v101, 1, 1, v103);
      __m128 v58 = v89;
      (*(void (**)(uint64_t *, void, uint64_t))(v90 + 104))(v89, enum case for URL.DirectoryHint.inferFromPath(_:), v91);
      uint64_t v59 = v87;
      swift_bridgeObjectRetain(v87);
      uint64_t v60 = (uint64_t)v78;
      URL.init(filePath:directoryHint:relativeTo:)(v88, v59, v58, v57);
      uint64_t v67 = v99;
      uint64_t v68 = v98;
      uint64_t v69 = v97;
      uint64_t v70 = v96;
      uint64_t v71 = v95;
      uint64_t v72 = v94;
      uint64_t v73 = v93;
      uint64_t v74 = v92;
      uint64_t v75 = v100;
      MLLogisticRegressionClassifier.write(to:metadata:)(v60, &v67);
      (*(void (**)(uint64_t *, uint64_t))(v102 + 8))(v78, v103);
      uint64_t v47 = type metadata accessor for MLLogisticRegressionClassifier;
      uint64_t v48 = v83;
      break;
    case 4:
      outlined init with take of MLClassifierMetrics((uint64_t)&v66, (uint64_t)v82, type metadata accessor for MLSupportVectorClassifier);
      uint64_t v61 = (uint64_t)v101;
      __swift_storeEnumTagSinglePayload((uint64_t)v101, 1, 1, v103);
      uint64_t v62 = v89;
      (*(void (**)(uint64_t *, void, uint64_t))(v90 + 104))(v89, enum case for URL.DirectoryHint.inferFromPath(_:), v91);
      uint64_t v63 = v87;
      swift_bridgeObjectRetain(v87);
      uint64_t v64 = (uint64_t)v77;
      URL.init(filePath:directoryHint:relativeTo:)(v88, v63, v62, v61);
      uint64_t v67 = v99;
      uint64_t v68 = v98;
      uint64_t v69 = v97;
      uint64_t v70 = v96;
      uint64_t v71 = v95;
      uint64_t v72 = v94;
      uint64_t v73 = v93;
      uint64_t v74 = v92;
      uint64_t v75 = v100;
      MLSupportVectorClassifier.write(to:metadata:)(v64, &v67);
      (*(void (**)(uint64_t *, uint64_t))(v102 + 8))(v77, v103);
      uint64_t v47 = type metadata accessor for MLSupportVectorClassifier;
      uint64_t v48 = v82;
      break;
  }
  return outlined destroy of MLActivityClassifier.ModelParameters((uint64_t)v48, v47);
}

id MLClassifier.model.getter()
{
  uint64_t v30 = v0;
  uint64_t v31 = type metadata accessor for MLSupportVectorClassifier(0);
  int64_t v1 = *(void *)(*(void *)(v31 - 8) + 64);
  uint64_t v2 = alloca(v1);
  uint64_t v3 = alloca(v1);
  uint64_t v32 = v29;
  uint64_t v33 = type metadata accessor for MLLogisticRegressionClassifier(0);
  int64_t v4 = *(void *)(*(void *)(v33 - 8) + 64);
  int64_t v5 = alloca(v4);
  int64_t v6 = alloca(v4);
  uint64_t v34 = v29;
  uint64_t v35 = type metadata accessor for MLRandomForestClassifier(0);
  int64_t v7 = *(void *)(*(void *)(v35 - 8) + 64);
  int64_t v8 = alloca(v7);
  int64_t v9 = alloca(v7);
  uint64_t v36 = v29;
  uint64_t v10 = type metadata accessor for MLDecisionTreeClassifier(0);
  int64_t v11 = *(void *)(*(void *)(v10 - 8) + 64);
  int64_t v12 = alloca(v11);
  int64_t v13 = alloca(v11);
  unint64_t v37 = v29;
  uint64_t v14 = type metadata accessor for MLBoostedTreeClassifier(0);
  int64_t v15 = *(void *)(*(void *)(v14 - 8) + 64);
  int64_t v16 = alloca(v15);
  int64_t v17 = alloca(v15);
  uint64_t v18 = type metadata accessor for MLClassifier(0);
  int64_t v19 = *(void *)(*(void *)(v18 - 8) + 64);
  uint64_t v20 = alloca(v19);
  int64_t v21 = alloca(v19);
  outlined init with copy of MLTrainingSessionParameters(v30, (uint64_t)v29, type metadata accessor for MLClassifier);
  switch(swift_getEnumCaseMultiPayload(v29, v18))
  {
    case 0u:
      outlined init with take of MLClassifierMetrics((uint64_t)v29, (uint64_t)v29, type metadata accessor for MLBoostedTreeClassifier);
      id v22 = *(id *)&v29[*(int *)(v14 + 20)];
      outlined destroy of MLActivityClassifier.ModelParameters((uint64_t)v29, type metadata accessor for MLBoostedTreeClassifier);
      return v22;
    case 1u:
      int64_t v24 = type metadata accessor for MLDecisionTreeClassifier;
      uint64_t v25 = (uint64_t)v37;
      outlined init with take of MLClassifierMetrics((uint64_t)v29, (uint64_t)v37, type metadata accessor for MLDecisionTreeClassifier);
      uint64_t v26 = *(int *)(v10 + 20);
      goto LABEL_8;
    case 2u:
      int64_t v24 = type metadata accessor for MLRandomForestClassifier;
      uint64_t v25 = (uint64_t)v36;
      outlined init with take of MLClassifierMetrics((uint64_t)v29, (uint64_t)v36, type metadata accessor for MLRandomForestClassifier);
      uint64_t v27 = v35;
      goto LABEL_7;
    case 3u:
      int64_t v24 = type metadata accessor for MLLogisticRegressionClassifier;
      uint64_t v25 = (uint64_t)v34;
      outlined init with take of MLClassifierMetrics((uint64_t)v29, (uint64_t)v34, type metadata accessor for MLLogisticRegressionClassifier);
      uint64_t v27 = v33;
      goto LABEL_7;
    case 4u:
      int64_t v24 = type metadata accessor for MLSupportVectorClassifier;
      uint64_t v25 = (uint64_t)v32;
      outlined init with take of MLClassifierMetrics((uint64_t)v29, (uint64_t)v32, type metadata accessor for MLSupportVectorClassifier);
      uint64_t v27 = v31;
LABEL_7:
      uint64_t v26 = *(int *)(v27 + 20);
LABEL_8:
      id v28 = *(id *)(v25 + v26);
      outlined destroy of MLActivityClassifier.ModelParameters(v25, v24);
      return v28;
  }
}

uint64_t MLClassifier.trainingMetrics.getter()
{
  uint64_t v32 = v1;
  uint64_t v40 = v0;
  uint64_t v34 = type metadata accessor for MLSupportVectorClassifier(0);
  int64_t v2 = *(void *)(*(void *)(v34 - 8) + 64);
  uint64_t v3 = alloca(v2);
  int64_t v4 = alloca(v2);
  uint64_t v33 = &v32;
  uint64_t v36 = type metadata accessor for MLLogisticRegressionClassifier(0);
  int64_t v5 = *(void *)(*(void *)(v36 - 8) + 64);
  int64_t v6 = alloca(v5);
  int64_t v7 = alloca(v5);
  uint64_t v35 = &v32;
  uint64_t v8 = type metadata accessor for MLRandomForestClassifier(0);
  int64_t v9 = *(void *)(*(void *)(v8 - 8) + 64);
  uint64_t v10 = alloca(v9);
  int64_t v11 = alloca(v9);
  unint64_t v37 = &v32;
  uint64_t v12 = type metadata accessor for MLDecisionTreeClassifier(0);
  int64_t v13 = *(void *)(*(void *)(v12 - 8) + 64);
  uint64_t v14 = alloca(v13);
  int64_t v15 = alloca(v13);
  uint64_t v38 = &v32;
  uint64_t v16 = type metadata accessor for MLBoostedTreeClassifier(0);
  int64_t v17 = *(void *)(*(void *)(v16 - 8) + 64);
  uint64_t v18 = alloca(v17);
  int64_t v19 = alloca(v17);
  int64_t v39 = &v32;
  uint64_t v20 = type metadata accessor for MLClassifier(0);
  int64_t v21 = *(void *)(*(void *)(v20 - 8) + 64);
  id v22 = alloca(v21);
  uint64_t v23 = alloca(v21);
  outlined init with copy of MLTrainingSessionParameters(v32, (uint64_t)&v32, type metadata accessor for MLClassifier);
  switch(swift_getEnumCaseMultiPayload(&v32, v20))
  {
    case 0u:
      uint64_t v24 = (uint64_t)v39;
      outlined init with take of MLClassifierMetrics((uint64_t)&v32, (uint64_t)v39, type metadata accessor for MLBoostedTreeClassifier);
      outlined init with copy of MLTrainingSessionParameters(v24 + *(int *)(v16 + 36), v40, type metadata accessor for MLClassifierMetrics);
      uint64_t v25 = v24;
      uint64_t v26 = type metadata accessor for MLBoostedTreeClassifier;
      return outlined destroy of MLActivityClassifier.ModelParameters(v25, v26);
    case 1u:
      uint64_t v27 = type metadata accessor for MLDecisionTreeClassifier;
      uint64_t v28 = (uint64_t)v38;
      outlined init with take of MLClassifierMetrics((uint64_t)&v32, (uint64_t)v38, type metadata accessor for MLDecisionTreeClassifier);
      uint64_t v29 = *(int *)(v12 + 36);
      goto LABEL_8;
    case 2u:
      uint64_t v27 = type metadata accessor for MLRandomForestClassifier;
      uint64_t v28 = (uint64_t)v37;
      outlined init with take of MLClassifierMetrics((uint64_t)&v32, (uint64_t)v37, type metadata accessor for MLRandomForestClassifier);
      uint64_t v29 = *(int *)(v8 + 36);
      goto LABEL_8;
    case 3u:
      uint64_t v27 = type metadata accessor for MLLogisticRegressionClassifier;
      uint64_t v28 = (uint64_t)v35;
      outlined init with take of MLClassifierMetrics((uint64_t)&v32, (uint64_t)v35, type metadata accessor for MLLogisticRegressionClassifier);
      uint64_t v30 = v36;
      goto LABEL_7;
    case 4u:
      uint64_t v27 = type metadata accessor for MLSupportVectorClassifier;
      uint64_t v28 = (uint64_t)v33;
      outlined init with take of MLClassifierMetrics((uint64_t)&v32, (uint64_t)v33, type metadata accessor for MLSupportVectorClassifier);
      uint64_t v30 = v34;
LABEL_7:
      uint64_t v29 = *(int *)(v30 + 36);
LABEL_8:
      outlined init with copy of MLTrainingSessionParameters(v28 + v29, v40, type metadata accessor for MLClassifierMetrics);
      uint64_t v25 = v28;
      uint64_t v26 = v27;
      return outlined destroy of MLActivityClassifier.ModelParameters(v25, v26);
  }
}

uint64_t MLClassifier.validationMetrics.getter()
{
  uint64_t v32 = v1;
  uint64_t v40 = v0;
  uint64_t v34 = type metadata accessor for MLSupportVectorClassifier(0);
  int64_t v2 = *(void *)(*(void *)(v34 - 8) + 64);
  uint64_t v3 = alloca(v2);
  int64_t v4 = alloca(v2);
  uint64_t v33 = &v32;
  uint64_t v36 = type metadata accessor for MLLogisticRegressionClassifier(0);
  int64_t v5 = *(void *)(*(void *)(v36 - 8) + 64);
  int64_t v6 = alloca(v5);
  int64_t v7 = alloca(v5);
  uint64_t v35 = &v32;
  uint64_t v8 = type metadata accessor for MLRandomForestClassifier(0);
  int64_t v9 = *(void *)(*(void *)(v8 - 8) + 64);
  uint64_t v10 = alloca(v9);
  int64_t v11 = alloca(v9);
  unint64_t v37 = &v32;
  uint64_t v12 = type metadata accessor for MLDecisionTreeClassifier(0);
  int64_t v13 = *(void *)(*(void *)(v12 - 8) + 64);
  uint64_t v14 = alloca(v13);
  int64_t v15 = alloca(v13);
  uint64_t v38 = &v32;
  uint64_t v16 = type metadata accessor for MLBoostedTreeClassifier(0);
  int64_t v17 = *(void *)(*(void *)(v16 - 8) + 64);
  uint64_t v18 = alloca(v17);
  int64_t v19 = alloca(v17);
  int64_t v39 = &v32;
  uint64_t v20 = type metadata accessor for MLClassifier(0);
  int64_t v21 = *(void *)(*(void *)(v20 - 8) + 64);
  id v22 = alloca(v21);
  uint64_t v23 = alloca(v21);
  outlined init with copy of MLTrainingSessionParameters(v32, (uint64_t)&v32, type metadata accessor for MLClassifier);
  switch(swift_getEnumCaseMultiPayload(&v32, v20))
  {
    case 0u:
      uint64_t v24 = (uint64_t)v39;
      outlined init with take of MLClassifierMetrics((uint64_t)&v32, (uint64_t)v39, type metadata accessor for MLBoostedTreeClassifier);
      outlined init with copy of MLTrainingSessionParameters(v24 + *(int *)(v16 + 40), v40, type metadata accessor for MLClassifierMetrics);
      uint64_t v25 = v24;
      uint64_t v26 = type metadata accessor for MLBoostedTreeClassifier;
      return outlined destroy of MLActivityClassifier.ModelParameters(v25, v26);
    case 1u:
      uint64_t v27 = type metadata accessor for MLDecisionTreeClassifier;
      uint64_t v28 = (uint64_t)v38;
      outlined init with take of MLClassifierMetrics((uint64_t)&v32, (uint64_t)v38, type metadata accessor for MLDecisionTreeClassifier);
      uint64_t v29 = *(int *)(v12 + 40);
      goto LABEL_8;
    case 2u:
      uint64_t v27 = type metadata accessor for MLRandomForestClassifier;
      uint64_t v28 = (uint64_t)v37;
      outlined init with take of MLClassifierMetrics((uint64_t)&v32, (uint64_t)v37, type metadata accessor for MLRandomForestClassifier);
      uint64_t v29 = *(int *)(v8 + 40);
      goto LABEL_8;
    case 3u:
      uint64_t v27 = type metadata accessor for MLLogisticRegressionClassifier;
      uint64_t v28 = (uint64_t)v35;
      outlined init with take of MLClassifierMetrics((uint64_t)&v32, (uint64_t)v35, type metadata accessor for MLLogisticRegressionClassifier);
      uint64_t v30 = v36;
      goto LABEL_7;
    case 4u:
      uint64_t v27 = type metadata accessor for MLSupportVectorClassifier;
      uint64_t v28 = (uint64_t)v33;
      outlined init with take of MLClassifierMetrics((uint64_t)&v32, (uint64_t)v33, type metadata accessor for MLSupportVectorClassifier);
      uint64_t v30 = v34;
LABEL_7:
      uint64_t v29 = *(int *)(v30 + 40);
LABEL_8:
      outlined init with copy of MLTrainingSessionParameters(v28 + v29, v40, type metadata accessor for MLClassifierMetrics);
      uint64_t v25 = v28;
      uint64_t v26 = v27;
      return outlined destroy of MLActivityClassifier.ModelParameters(v25, v26);
  }
}

uint64_t MLClassifier.targetColumn.getter()
{
  uint64_t v32 = v0;
  uint64_t v33 = type metadata accessor for MLSupportVectorClassifier(0);
  int64_t v1 = *(void *)(*(void *)(v33 - 8) + 64);
  int64_t v2 = alloca(v1);
  uint64_t v3 = alloca(v1);
  uint64_t v34 = v31;
  uint64_t v35 = type metadata accessor for MLLogisticRegressionClassifier(0);
  int64_t v4 = *(void *)(*(void *)(v35 - 8) + 64);
  int64_t v5 = alloca(v4);
  int64_t v6 = alloca(v4);
  uint64_t v36 = v31;
  uint64_t v37 = type metadata accessor for MLRandomForestClassifier(0);
  int64_t v7 = *(void *)(*(void *)(v37 - 8) + 64);
  uint64_t v8 = alloca(v7);
  int64_t v9 = alloca(v7);
  uint64_t v38 = v31;
  uint64_t v10 = type metadata accessor for MLDecisionTreeClassifier(0);
  int64_t v11 = *(void *)(*(void *)(v10 - 8) + 64);
  uint64_t v12 = alloca(v11);
  int64_t v13 = alloca(v11);
  int64_t v39 = v31;
  uint64_t v14 = type metadata accessor for MLBoostedTreeClassifier(0);
  int64_t v15 = *(void *)(*(void *)(v14 - 8) + 64);
  uint64_t v16 = alloca(v15);
  int64_t v17 = alloca(v15);
  uint64_t v18 = type metadata accessor for MLClassifier(0);
  int64_t v19 = *(void *)(*(void *)(v18 - 8) + 64);
  uint64_t v20 = alloca(v19);
  int64_t v21 = alloca(v19);
  outlined init with copy of MLTrainingSessionParameters(v32, (uint64_t)v31, type metadata accessor for MLClassifier);
  switch(swift_getEnumCaseMultiPayload(v31, v18))
  {
    case 0u:
      outlined init with take of MLClassifierMetrics((uint64_t)v31, (uint64_t)v31, type metadata accessor for MLBoostedTreeClassifier);
      uint64_t v22 = *(int *)(v14 + 24);
      uint64_t v23 = *(void *)&v31[v22];
      swift_bridgeObjectRetain(*(void *)&v31[v22 + 8]);
      uint64_t v24 = v31;
      uint64_t v25 = type metadata accessor for MLBoostedTreeClassifier;
      goto LABEL_9;
    case 1u:
      uint64_t v26 = type metadata accessor for MLDecisionTreeClassifier;
      uint64_t v27 = (uint64_t)v39;
      outlined init with take of MLClassifierMetrics((uint64_t)v31, (uint64_t)v39, type metadata accessor for MLDecisionTreeClassifier);
      uint64_t v28 = *(int *)(v10 + 24);
      goto LABEL_8;
    case 2u:
      uint64_t v26 = type metadata accessor for MLRandomForestClassifier;
      uint64_t v27 = (uint64_t)v38;
      outlined init with take of MLClassifierMetrics((uint64_t)v31, (uint64_t)v38, type metadata accessor for MLRandomForestClassifier);
      uint64_t v29 = v37;
      goto LABEL_7;
    case 3u:
      uint64_t v26 = type metadata accessor for MLLogisticRegressionClassifier;
      uint64_t v27 = (uint64_t)v36;
      outlined init with take of MLClassifierMetrics((uint64_t)v31, (uint64_t)v36, type metadata accessor for MLLogisticRegressionClassifier);
      uint64_t v29 = v35;
      goto LABEL_7;
    case 4u:
      uint64_t v26 = type metadata accessor for MLSupportVectorClassifier;
      uint64_t v27 = (uint64_t)v34;
      outlined init with take of MLClassifierMetrics((uint64_t)v31, (uint64_t)v34, type metadata accessor for MLSupportVectorClassifier);
      uint64_t v29 = v33;
LABEL_7:
      uint64_t v28 = *(int *)(v29 + 24);
LABEL_8:
      uint64_t v23 = *(void *)(v27 + v28);
      swift_bridgeObjectRetain(*(void *)(v27 + v28 + 8));
      uint64_t v24 = (unsigned char *)v27;
      uint64_t v25 = v26;
LABEL_9:
      outlined destroy of MLActivityClassifier.ModelParameters((uint64_t)v24, v25);
      return v23;
  }
}