void *initializeWithCopy for MLRandomForestClassifier(void *a1, void *a2, int *a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char v12;
  uint64_t v13;
  void *v14;
  uint64_t v15;
  void *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  char *v21;
  uint64_t v22;
  long long v23;
  uint64_t v24;
  char *v25;
  char *v26;
  unsigned int EnumCaseMultiPayload;
  uint64_t v28;
  uint64_t v29;
  char *v30;
  void (*v31)(char *, char *, uint64_t);
  uint64_t v32;
  int v33;
  BOOL v34;
  uint64_t *v35;
  uint64_t v36;
  uint64_t v37;
  char *v38;
  char *v39;
  unsigned int v40;
  uint64_t v41;
  uint64_t v42;
  char *v43;
  void (*v44)(char *, char *, uint64_t);
  uint64_t v45;
  uint64_t v46;
  int v47;
  BOOL v48;
  uint64_t *v49;
  uint64_t v50;
  char *v52;
  void *v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v59;
  char *v61;
  char *v62;

  *a1 = *a2;
  v4 = a2[1];
  a1[1] = v4;
  v5 = a2[2];
  swift_bridgeObjectRetain(v4);
  if (v5)
  {
    a1[2] = v5;
    a1[3] = a2[3];
    v6 = a2[4];
    a1[4] = v6;
    swift_bridgeObjectRetain(v5);
    swift_bridgeObjectRetain(v6);
  }
  else
  {
    a1[4] = a2[4];
    *((_OWORD *)a1 + 1) = *((_OWORD *)a2 + 1);
  }
  v7 = type metadata accessor for AnyTreeClassifierModel(0);
  v8 = *(int *)(v7 + 24);
  v9 = type metadata accessor for BaseTreeClassifierModel(0);
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v9 - 8) + 16))((char *)a1 + v8, (char *)a2 + v8, v9);
  v10 = *(int *)(v7 + 28);
  v11 = *(void *)((char *)a2 + v10);
  v12 = *((unsigned char *)a2 + v10 + 8);
  *(void *)((char *)a1 + v10) = v11;
  *((unsigned char *)a1 + v10 + 8) = v12;
  v13 = a3[5];
  v14 = *(void **)((char *)a2 + v13);
  *(void *)((char *)a1 + v13) = v14;
  v15 = a3[6];
  *(void *)((char *)a1 + v15) = *(void *)((char *)a2 + v15);
  v16 = a1;
  v17 = *(void *)((char *)a2 + v15 + 8);
  *(void *)((char *)v16 + v15 + 8) = v17;
  v18 = a3[7];
  v56 = *(void *)((char *)a2 + v18);
  *(void *)((char *)v16 + v18) = v56;
  v19 = a3[8];
  v53 = v16;
  v20 = (char *)v16 + v19;
  v21 = (char *)a2 + v19;
  v22 = *(void *)((char *)a2 + v19 + 24);
  swift_bridgeObjectRetain(v11);
  v14;
  swift_bridgeObjectRetain(v17);
  swift_bridgeObjectRetain(v56);
  if (v22)
  {
    *((void *)v20 + 3) = v22;
    (**(void (***)(char *, char *, uint64_t))(v22 - 8))(v20, v21, v22);
  }
  else
  {
    v23 = *(_OWORD *)v21;
    *((_OWORD *)v20 + 1) = *((_OWORD *)v21 + 1);
    *(_OWORD *)v20 = v23;
  }
  *((_OWORD *)v20 + 2) = *((_OWORD *)v21 + 2);
  *((_OWORD *)v20 + 3) = *((_OWORD *)v21 + 3);
  *((_OWORD *)v20 + 4) = *((_OWORD *)v21 + 4);
  *((void *)v20 + 10) = *((void *)v21 + 10);
  v24 = a3[9];
  v25 = (char *)v53 + v24;
  v26 = (char *)a2 + v24;
  v57 = type metadata accessor for MLClassifierMetrics.Contents(0);
  EnumCaseMultiPayload = swift_getEnumCaseMultiPayload(v26, v57);
  if (EnumCaseMultiPayload == 2)
  {
    v32 = *(void *)v26;
    swift_errorRetain(*(void *)v26);
    *(void *)v25 = v32;
  }
  else if (EnumCaseMultiPayload == 1)
  {
    *(void *)v25 = *(void *)v26;
    v54 = type metadata accessor for MLClassifierMetrics.Precomputed(0);
    v28 = *(int *)(v54 + 20);
    v52 = &v25[v28];
    v29 = type metadata accessor for DataFrame(0);
    v30 = &v26[v28];
    v31 = *(void (**)(char *, char *, uint64_t))(*(void *)(v29 - 8) + 16);
    v31(v52, v30, v29);
    v31(&v25[*(int *)(v54 + 24)], &v26[*(int *)(v54 + 24)], v29);
  }
  else
  {
    v55 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Either<ClassificationMetrics<String>, ClassificationMetrics<Int>>);
    v33 = swift_getEnumCaseMultiPayload(v26, v55);
    v34 = v33 == 1;
    v35 = &demangling cache variable for type metadata for ClassificationMetrics<String>;
    if (v33 == 1) {
      v35 = &demangling cache variable for type metadata for ClassificationMetrics<Int>;
    }
    v36 = __swift_instantiateConcreteTypeFromMangledName(v35);
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v36 - 8) + 16))(v25, v26, v36);
    swift_storeEnumTagMultiPayload(v25, v55, v34);
  }
  swift_storeEnumTagMultiPayload(v25, v57, EnumCaseMultiPayload);
  v37 = a3[10];
  v38 = (char *)v53 + v37;
  v39 = (char *)a2 + v37;
  v40 = swift_getEnumCaseMultiPayload((char *)a2 + v37, v57);
  if (v40 == 2)
  {
    v45 = *(void *)v39;
    swift_errorRetain(v45);
    *(void *)v38 = v45;
  }
  else if (v40 == 1)
  {
    *(void *)v38 = *(void *)v39;
    v59 = type metadata accessor for MLClassifierMetrics.Precomputed(0);
    v41 = *(int *)(v59 + 20);
    v61 = &v38[v41];
    v42 = type metadata accessor for DataFrame(0);
    v43 = &v39[v41];
    v44 = *(void (**)(char *, char *, uint64_t))(*(void *)(v42 - 8) + 16);
    v44(v61, v43, v42);
    v44(&v38[*(int *)(v59 + 24)], &v39[*(int *)(v59 + 24)], v42);
  }
  else
  {
    v46 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Either<ClassificationMetrics<String>, ClassificationMetrics<Int>>);
    v47 = swift_getEnumCaseMultiPayload(v39, v46);
    v62 = v39;
    v48 = v47 == 1;
    v49 = &demangling cache variable for type metadata for ClassificationMetrics<String>;
    if (v47 == 1) {
      v49 = &demangling cache variable for type metadata for ClassificationMetrics<Int>;
    }
    v50 = __swift_instantiateConcreteTypeFromMangledName(v49);
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v50 - 8) + 16))(v38, v62, v50);
    swift_storeEnumTagMultiPayload(v38, v46, v48);
  }
  swift_storeEnumTagMultiPayload(v38, v57, v40);
  return v53;
}

void *assignWithCopy for MLRandomForestClassifier(void *a1, void *a2, int *a3)
{
  *a1 = *a2;
  uint64_t v5 = a2[1];
  uint64_t v6 = a1[1];
  a1[1] = v5;
  swift_bridgeObjectRetain(v5);
  swift_bridgeObjectRelease(v6);
  v7 = a1 + 2;
  v8 = a2 + 2;
  uint64_t v9 = a1[2];
  uint64_t v10 = a2[2];
  if (v9)
  {
    if (v10)
    {
      a1[2] = v10;
      swift_bridgeObjectRetain(v10);
      swift_bridgeObjectRelease(v9);
      a1[3] = a2[3];
      uint64_t v11 = a2[4];
      uint64_t v12 = a1[4];
      a1[4] = v11;
      swift_bridgeObjectRetain(v11);
      swift_bridgeObjectRelease(v12);
    }
    else
    {
      outlined destroy of Either<LogisticRegressionClassifier<Float, String>, FullyConnectedNetworkClassifier<Float, String>>((uint64_t)(a1 + 2), &demangling cache variable for type metadata for FeatureVectorizer<Float>.Transformer);
      _OWORD *v7 = *v8;
      a1[4] = a2[4];
    }
  }
  else if (v10)
  {
    a1[2] = v10;
    a1[3] = a2[3];
    uint64_t v13 = a2[4];
    a1[4] = v13;
    swift_bridgeObjectRetain(v10);
    swift_bridgeObjectRetain(v13);
  }
  else
  {
    a1[4] = a2[4];
    _OWORD *v7 = *v8;
  }
  uint64_t v14 = type metadata accessor for AnyTreeClassifierModel(0);
  uint64_t v15 = *(int *)(v14 + 24);
  uint64_t v16 = type metadata accessor for BaseTreeClassifierModel(0);
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v16 - 8) + 24))((char *)a1 + v15, (char *)a2 + v15, v16);
  uint64_t v17 = *(int *)(v14 + 28);
  uint64_t v18 = *(void *)((char *)a2 + v17);
  char v19 = *((unsigned char *)a2 + v17 + 8);
  uint64_t v20 = *(void *)((char *)a1 + v17);
  *(void *)((char *)a1 + v17) = v18;
  *((unsigned char *)a1 + v17 + 8) = v19;
  swift_bridgeObjectRetain(v18);
  swift_bridgeObjectRelease(v20);
  uint64_t v21 = a3[5];
  v22 = *(void **)((char *)a2 + v21);
  v23 = *(void **)((char *)a1 + v21);
  *(void *)((char *)a1 + v21) = v22;
  v22;

  uint64_t v24 = a3[6];
  *(void *)((char *)a1 + v24) = *(void *)((char *)a2 + v24);
  uint64_t v25 = *(void *)((char *)a2 + v24 + 8);
  uint64_t v26 = *(void *)((char *)a1 + v24 + 8);
  *(void *)((char *)a1 + v24 + 8) = v25;
  swift_bridgeObjectRetain(v25);
  swift_bridgeObjectRelease(v26);
  uint64_t v27 = a3[7];
  uint64_t v28 = *(void *)((char *)a2 + v27);
  uint64_t v29 = *(void *)((char *)a1 + v27);
  *(void *)((char *)a1 + v27) = v28;
  swift_bridgeObjectRetain(v28);
  swift_bridgeObjectRelease(v29);
  uint64_t v30 = a3[8];
  v31 = (char *)a1 + v30;
  v32 = (char *)a2 + v30;
  uint64_t v33 = *(void *)((char *)a2 + v30 + 24);
  if (*(void *)((char *)a1 + v30 + 24))
  {
    v34 = (void *)((char *)a1 + v30);
    if (v33)
    {
      __swift_assign_boxed_opaque_existential_0(v34, (void *)((char *)a2 + v30));
      goto LABEL_15;
    }
    __swift_destroy_boxed_opaque_existential_1Tm(v34);
  }
  else if (v33)
  {
    *((void *)v31 + 3) = v33;
    (**(void (***)(char *, char *))(v33 - 8))(v31, v32);
    goto LABEL_15;
  }
  long long v35 = *(_OWORD *)v32;
  *((_OWORD *)v31 + 1) = *((_OWORD *)v32 + 1);
  *(_OWORD *)v31 = v35;
LABEL_15:
  *((void *)v31 + 4) = *((void *)v32 + 4);
  *((void *)v31 + 5) = *((void *)v32 + 5);
  *((void *)v31 + 6) = *((void *)v32 + 6);
  *((void *)v31 + 7) = *((void *)v32 + 7);
  *((void *)v31 + 8) = *((void *)v32 + 8);
  *((void *)v31 + 9) = *((void *)v32 + 9);
  *((void *)v31 + 10) = *((void *)v32 + 10);
  if (a1 != a2)
  {
    uint64_t v36 = a3[9];
    v37 = (void *)((char *)a1 + v36);
    v38 = (void *)((char *)a2 + v36);
    outlined destroy of MLActivityClassifier.ModelParameters((uint64_t)v37, type metadata accessor for MLClassifierMetrics.Contents);
    uint64_t v39 = type metadata accessor for MLClassifierMetrics.Contents(0);
    unsigned int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload(v38, v39);
    unsigned int v74 = EnumCaseMultiPayload;
    if (EnumCaseMultiPayload == 2)
    {
      uint64_t v43 = *v38;
      swift_errorRetain(v43);
      uint64_t v44 = 2;
      uint64_t *v37 = v43;
    }
    else
    {
      if (EnumCaseMultiPayload == 1)
      {
        uint64_t *v37 = *v38;
        uint64_t v64 = type metadata accessor for MLClassifierMetrics.Precomputed(0);
        uint64_t v66 = v39;
        uint64_t v41 = *(int *)(v64 + 20);
        v62 = (char *)v37 + v41;
        uint64_t v63 = type metadata accessor for DataFrame(0);
        v71 = *(void (**)(char *, char *, uint64_t))(*(void *)(v63 - 8) + 16);
        v42 = (char *)v38 + v41;
        uint64_t v39 = v66;
        v71(v62, v42, v63);
        v71((char *)v37 + *(int *)(v64 + 24), (char *)v38 + *(int *)(v64 + 24), v63);
      }
      else
      {
        uint64_t v67 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Either<ClassificationMetrics<String>, ClassificationMetrics<Int>>);
        int v45 = swift_getEnumCaseMultiPayload(v38, v67);
        BOOL v72 = v45 == 1;
        v46 = &demangling cache variable for type metadata for ClassificationMetrics<String>;
        if (v45 == 1) {
          v46 = &demangling cache variable for type metadata for ClassificationMetrics<Int>;
        }
        uint64_t v47 = __swift_instantiateConcreteTypeFromMangledName(v46);
        (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(void *)(v47 - 8) + 16))(v37, v38, v47);
        swift_storeEnumTagMultiPayload(v37, v67, v72);
      }
      uint64_t v44 = v74;
    }
    swift_storeEnumTagMultiPayload(v37, v39, v44);
    uint64_t v48 = a3[10];
    v49 = (void *)((char *)a1 + v48);
    v50 = (void *)((char *)a2 + v48);
    outlined destroy of MLActivityClassifier.ModelParameters((uint64_t)a1 + v48, type metadata accessor for MLClassifierMetrics.Contents);
    unsigned int v51 = swift_getEnumCaseMultiPayload(v50, v39);
    if (v51 == 2)
    {
      uint64_t v56 = *v50;
      swift_errorRetain(v56);
      uint64_t *v49 = v56;
    }
    else
    {
      unsigned int v70 = v51;
      if (v51 == 1)
      {
        uint64_t *v49 = *v50;
        uint64_t v73 = type metadata accessor for MLClassifierMetrics.Precomputed(0);
        uint64_t v52 = *(int *)(v73 + 20);
        v65 = (char *)v49 + v52;
        uint64_t v68 = v39;
        uint64_t v53 = type metadata accessor for DataFrame(0);
        v75 = *(void (**)(char *, char *, uint64_t))(*(void *)(v53 - 8) + 16);
        v54 = (char *)v50 + v52;
        unsigned int v51 = 1;
        v75(v65, v54, v53);
        uint64_t v55 = v53;
        uint64_t v39 = v68;
        v75((char *)v49 + *(int *)(v73 + 24), (char *)v50 + *(int *)(v73 + 24), v55);
      }
      else
      {
        uint64_t v76 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Either<ClassificationMetrics<String>, ClassificationMetrics<Int>>);
        int v57 = swift_getEnumCaseMultiPayload(v50, v76);
        BOOL v58 = v57 == 1;
        v59 = &demangling cache variable for type metadata for ClassificationMetrics<String>;
        if (v57 == 1) {
          v59 = &demangling cache variable for type metadata for ClassificationMetrics<Int>;
        }
        uint64_t v60 = __swift_instantiateConcreteTypeFromMangledName(v59);
        (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(void *)(v60 - 8) + 16))(v49, v50, v60);
        swift_storeEnumTagMultiPayload(v49, v76, v58);
        unsigned int v51 = v70;
      }
    }
    swift_storeEnumTagMultiPayload(v49, v39, v51);
  }
  return a1;
}

uint64_t initializeWithTake for MLRandomForestClassifier(uint64_t a1, uint64_t a2, int *a3)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  uint64_t v5 = type metadata accessor for AnyTreeClassifierModel(0);
  uint64_t v6 = *(int *)(v5 + 24);
  uint64_t v7 = type metadata accessor for BaseTreeClassifierModel(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 32))(a1 + v6, a2 + v6, v7);
  uint64_t v8 = *(int *)(v5 + 28);
  *(unsigned char *)(a1 + v8 + 8) = *(unsigned char *)(a2 + v8 + 8);
  *(void *)(a1 + v8) = *(void *)(a2 + v8);
  *(void *)(a1 + a3[5]) = *(void *)(a2 + a3[5]);
  *(_OWORD *)(a1 + a3[6]) = *(_OWORD *)(a2 + a3[6]);
  *(void *)(a1 + a3[7]) = *(void *)(a2 + a3[7]);
  qmemcpy((void *)(a1 + a3[8]), (const void *)(a2 + a3[8]), 0x58uLL);
  uint64_t v47 = a3;
  uint64_t v9 = a3[9];
  uint64_t v10 = (char *)(v9 + a1);
  uint64_t v11 = (char *)(a2 + v9);
  uint64_t v12 = type metadata accessor for MLClassifierMetrics.Contents(0);
  int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload(v11, v12);
  if (EnumCaseMultiPayload == 1)
  {
    *(void *)uint64_t v10 = *(void *)v11;
    uint64_t v45 = type metadata accessor for MLClassifierMetrics.Precomputed(0);
    uint64_t v21 = *(int *)(v45 + 20);
    v46 = &v10[v21];
    uint64_t v51 = v12;
    uint64_t v22 = type metadata accessor for DataFrame(0);
    v23 = &v11[v21];
    uint64_t v24 = *(void (**)(char *, char *, uint64_t))(*(void *)(v22 - 8) + 32);
    v24(v46, v23, v22);
    uint64_t v25 = v22;
    uint64_t v12 = v51;
    v24(&v10[*(int *)(v45 + 24)], &v11[*(int *)(v45 + 24)], v25);
    uint64_t v20 = 1;
    uint64_t v18 = v10;
    uint64_t v19 = v51;
LABEL_7:
    swift_storeEnumTagMultiPayload(v18, v19, v20);
    goto LABEL_9;
  }
  if (!EnumCaseMultiPayload)
  {
    uint64_t v50 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Either<ClassificationMetrics<String>, ClassificationMetrics<Int>>);
    int v14 = swift_getEnumCaseMultiPayload(v11, v50);
    BOOL v15 = v14 == 1;
    uint64_t v16 = &demangling cache variable for type metadata for ClassificationMetrics<String>;
    if (v14 == 1) {
      uint64_t v16 = &demangling cache variable for type metadata for ClassificationMetrics<Int>;
    }
    uint64_t v17 = __swift_instantiateConcreteTypeFromMangledName(v16);
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v17 - 8) + 32))(v10, v11, v17);
    swift_storeEnumTagMultiPayload(v10, v50, v15);
    uint64_t v18 = v10;
    uint64_t v19 = v12;
    uint64_t v20 = 0;
    goto LABEL_7;
  }
  memcpy(v10, v11, *(void *)(*(void *)(v12 - 8) + 64));
LABEL_9:
  uint64_t v26 = v47[10];
  uint64_t v27 = (char *)(a1 + v26);
  uint64_t v28 = (char *)(v26 + a2);
  int v29 = swift_getEnumCaseMultiPayload(v28, v12);
  if (v29 == 1)
  {
    *(void *)uint64_t v27 = *(void *)v28;
    uint64_t v39 = type metadata accessor for MLClassifierMetrics.Precomputed(0);
    uint64_t v52 = v12;
    uint64_t v40 = *(int *)(v39 + 20);
    uint64_t v48 = &v27[v40];
    uint64_t v41 = type metadata accessor for DataFrame(0);
    v42 = &v28[v40];
    uint64_t v43 = *(void (**)(char *, char *, uint64_t))(*(void *)(v41 - 8) + 32);
    v43(v48, v42, v41);
    v43(&v27[*(int *)(v39 + 24)], &v28[*(int *)(v39 + 24)], v41);
    uint64_t v38 = 1;
    uint64_t v36 = v27;
    uint64_t v37 = v52;
  }
  else
  {
    if (v29)
    {
      memcpy(v27, v28, *(void *)(*(void *)(v12 - 8) + 64));
      return a1;
    }
    uint64_t v30 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Either<ClassificationMetrics<String>, ClassificationMetrics<Int>>);
    int v31 = swift_getEnumCaseMultiPayload(v28, v30);
    uint64_t v32 = v12;
    BOOL v33 = v31 == 1;
    v34 = &demangling cache variable for type metadata for ClassificationMetrics<String>;
    if (v31 == 1) {
      v34 = &demangling cache variable for type metadata for ClassificationMetrics<Int>;
    }
    uint64_t v35 = __swift_instantiateConcreteTypeFromMangledName(v34);
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v35 - 8) + 32))(v27, v28, v35);
    swift_storeEnumTagMultiPayload(v27, v30, v33);
    uint64_t v36 = v27;
    uint64_t v37 = v32;
    uint64_t v38 = 0;
  }
  swift_storeEnumTagMultiPayload(v36, v37, v38);
  return a1;
}

void *assignWithTake for MLRandomForestClassifier(void *a1, void *a2, int *a3)
{
  *a1 = *a2;
  uint64_t v5 = a1[1];
  a1[1] = a2[1];
  swift_bridgeObjectRelease(v5);
  uint64_t v6 = a1 + 2;
  uint64_t v7 = a2 + 2;
  uint64_t v8 = a1[2];
  if (v8)
  {
    uint64_t v9 = a2[2];
    if (v9)
    {
      a1[2] = v9;
      swift_bridgeObjectRelease(v8);
      a1[3] = a2[3];
      uint64_t v10 = a1[4];
      a1[4] = a2[4];
      swift_bridgeObjectRelease(v10);
    }
    else
    {
      outlined destroy of Either<LogisticRegressionClassifier<Float, String>, FullyConnectedNetworkClassifier<Float, String>>((uint64_t)(a1 + 2), &demangling cache variable for type metadata for FeatureVectorizer<Float>.Transformer);
      *uint64_t v6 = *v7;
      a1[4] = a2[4];
    }
  }
  else
  {
    a1[4] = a2[4];
    *uint64_t v6 = *v7;
  }
  uint64_t v11 = type metadata accessor for AnyTreeClassifierModel(0);
  uint64_t v12 = *(int *)(v11 + 24);
  uint64_t v13 = type metadata accessor for BaseTreeClassifierModel(0);
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v13 - 8) + 40))((char *)a1 + v12, (char *)a2 + v12, v13);
  uint64_t v14 = *(int *)(v11 + 28);
  char v15 = *((unsigned char *)a2 + v14 + 8);
  uint64_t v16 = *(void *)((char *)a1 + v14);
  *(void *)((char *)a1 + v14) = *(void *)((char *)a2 + v14);
  *((unsigned char *)a1 + v14 + 8) = v15;
  swift_bridgeObjectRelease(v16);
  uint64_t v17 = a3[5];
  uint64_t v18 = *(void **)((char *)a1 + v17);
  *(void *)((char *)a1 + v17) = *(void *)((char *)a2 + v17);

  uint64_t v19 = a3[6];
  *(void *)((char *)a1 + v19) = *(void *)((char *)a2 + v19);
  uint64_t v20 = *(void *)((char *)a1 + v19 + 8);
  *(void *)((char *)a1 + v19 + 8) = *(void *)((char *)a2 + v19 + 8);
  swift_bridgeObjectRelease(v20);
  uint64_t v21 = a3[7];
  uint64_t v22 = *(void *)((char *)a1 + v21);
  *(void *)((char *)a1 + v21) = *(void *)((char *)a2 + v21);
  swift_bridgeObjectRelease(v22);
  uint64_t v23 = a3[8];
  uint64_t v24 = (char *)a1 + v23;
  uint64_t v25 = (char *)a2 + v23;
  if (*(void *)((char *)a1 + v23 + 24)) {
    __swift_destroy_boxed_opaque_existential_1Tm((void *)((char *)a1 + v23));
  }
  long long v26 = *(_OWORD *)v25;
  *((_OWORD *)v24 + 1) = *((_OWORD *)v25 + 1);
  *(_OWORD *)uint64_t v24 = v26;
  *((_OWORD *)v24 + 2) = *((_OWORD *)v25 + 2);
  *((_OWORD *)v24 + 3) = *((_OWORD *)v25 + 3);
  *((void *)v24 + 8) = *((void *)v25 + 8);
  *(_OWORD *)(v24 + 72) = *(_OWORD *)(v25 + 72);
  if (a1 == a2) {
    return a1;
  }
  uint64_t v27 = a3[9];
  uint64_t v28 = (char *)a1 + v27;
  int v29 = (char *)a2 + v27;
  outlined destroy of MLActivityClassifier.ModelParameters((uint64_t)v28, type metadata accessor for MLClassifierMetrics.Contents);
  uint64_t v64 = type metadata accessor for MLClassifierMetrics.Contents(0);
  int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload(v29, v64);
  if (EnumCaseMultiPayload == 1)
  {
    *(void *)uint64_t v28 = *(void *)v29;
    uint64_t v66 = type metadata accessor for MLClassifierMetrics.Precomputed(0);
    uint64_t v39 = *(int *)(v66 + 20);
    uint64_t v60 = &v28[v39];
    uint64_t v61 = type metadata accessor for DataFrame(0);
    uint64_t v40 = &v29[v39];
    uint64_t v41 = *(void (**)(char *, char *, uint64_t))(*(void *)(v61 - 8) + 32);
    v41(v60, v40, v61);
    v41(&v28[*(int *)(v66 + 24)], &v29[*(int *)(v66 + 24)], v61);
    uint64_t v38 = 1;
    uint64_t v35 = v28;
    uint64_t v36 = v64;
    uint64_t v37 = v64;
  }
  else
  {
    if (EnumCaseMultiPayload)
    {
      v42 = v29;
      uint64_t v36 = v64;
      memcpy(v28, v42, *(void *)(*(void *)(v64 - 8) + 64));
      goto LABEL_17;
    }
    uint64_t v65 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Either<ClassificationMetrics<String>, ClassificationMetrics<Int>>);
    int v31 = swift_getEnumCaseMultiPayload(v29, v65);
    BOOL v32 = v31 == 1;
    BOOL v33 = &demangling cache variable for type metadata for ClassificationMetrics<String>;
    if (v31 == 1) {
      BOOL v33 = &demangling cache variable for type metadata for ClassificationMetrics<Int>;
    }
    uint64_t v34 = __swift_instantiateConcreteTypeFromMangledName(v33);
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v34 - 8) + 32))(v28, v29, v34);
    swift_storeEnumTagMultiPayload(v28, v65, v32);
    uint64_t v35 = v28;
    uint64_t v36 = v64;
    uint64_t v37 = v64;
    uint64_t v38 = 0;
  }
  swift_storeEnumTagMultiPayload(v35, v37, v38);
LABEL_17:
  uint64_t v43 = a3[10];
  uint64_t v44 = (char *)a1 + v43;
  uint64_t v45 = (char *)a2 + v43;
  outlined destroy of MLActivityClassifier.ModelParameters((uint64_t)a1 + v43, type metadata accessor for MLClassifierMetrics.Contents);
  int v46 = swift_getEnumCaseMultiPayload(v45, v36);
  if (v46 == 1)
  {
    *(void *)uint64_t v44 = *(void *)v45;
    uint64_t v63 = type metadata accessor for MLClassifierMetrics.Precomputed(0);
    uint64_t v55 = *(int *)(v63 + 20);
    uint64_t v67 = &v44[v55];
    uint64_t v56 = type metadata accessor for DataFrame(0);
    int v57 = &v45[v55];
    BOOL v58 = *(void (**)(char *, char *, uint64_t))(*(void *)(v56 - 8) + 32);
    v58(v67, v57, v56);
    v58(&v44[*(int *)(v63 + 24)], &v45[*(int *)(v63 + 24)], v56);
    uint64_t v54 = 1;
    uint64_t v52 = v44;
    uint64_t v53 = v64;
  }
  else
  {
    if (v46)
    {
      memcpy(v44, v45, *(void *)(*(void *)(v36 - 8) + 64));
      return a1;
    }
    uint64_t v47 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Either<ClassificationMetrics<String>, ClassificationMetrics<Int>>);
    int v48 = swift_getEnumCaseMultiPayload(v45, v47);
    BOOL v49 = v48 == 1;
    uint64_t v50 = &demangling cache variable for type metadata for ClassificationMetrics<String>;
    if (v48 == 1) {
      uint64_t v50 = &demangling cache variable for type metadata for ClassificationMetrics<Int>;
    }
    uint64_t v51 = __swift_instantiateConcreteTypeFromMangledName(v50);
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v51 - 8) + 32))(v44, v45, v51);
    swift_storeEnumTagMultiPayload(v44, v47, v49);
    uint64_t v52 = v44;
    uint64_t v53 = v64;
    uint64_t v54 = 0;
  }
  swift_storeEnumTagMultiPayload(v52, v53, v54);
  return a1;
}

uint64_t getEnumTagSinglePayload for MLRandomForestClassifier(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_1C6C2C);
}

uint64_t sub_1C6C2C(uint64_t a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4 = a1;
  uint64_t v5 = type metadata accessor for AnyTreeClassifierModel(0);
  if (*(_DWORD *)(*(void *)(v5 - 8) + 84) == a2) {
    return __swift_getEnumTagSinglePayload(v4, a2, v5);
  }
  if (a2 != 0x7FFFFFFF)
  {
    uint64_t v5 = type metadata accessor for MLClassifierMetrics(0);
    uint64_t v4 = *(int *)(a3 + 36) + a1;
    return __swift_getEnumTagSinglePayload(v4, a2, v5);
  }
  uint64_t result = 0;
  if ((*(void *)(a1 + *(int *)(a3 + 20)) & 0xFFFFFFFF00000001) == 0) {
    return (*(void *)(a1 + *(int *)(a3 + 20)) >> 1) + 1;
  }
  return result;
}

uint64_t storeEnumTagSinglePayload for MLRandomForestClassifier(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_1C6CB9);
}

uint64_t sub_1C6CB9(uint64_t a1, unsigned int a2, int a3, uint64_t a4)
{
  uint64_t v6 = a1;
  uint64_t v7 = type metadata accessor for AnyTreeClassifierModel(0);
  if (*(_DWORD *)(*(void *)(v7 - 8) + 84) != a3)
  {
    if (a3 == 0x7FFFFFFF)
    {
      uint64_t result = *(int *)(a4 + 20);
      *(void *)(a1 + result) = 2 * (a2 - 1);
      return result;
    }
    uint64_t v7 = type metadata accessor for MLClassifierMetrics(0);
    uint64_t v6 = *(int *)(a4 + 36) + a1;
  }
  return __swift_storeEnumTagSinglePayload(v6, a2, a2, v7);
}

uint64_t type metadata completion function for MLRandomForestClassifier(uint64_t a1)
{
  uint64_t result = type metadata accessor for AnyTreeClassifierModel(319);
  if (v2 <= 0x3F)
  {
    v4[0] = *(void *)(result - 8) + 64;
    v4[1] = (char *)&value witness table for Builtin.UnknownObject + 64;
    v4[2] = &unk_34DAE0;
    v4[3] = (char *)&value witness table for Builtin.BridgeObject + 64;
    v4[4] = &unk_34DAF8;
    uint64_t result = type metadata accessor for MLClassifierMetrics.Contents(319);
    if (v3 <= 0x3F)
    {
      uint64_t v5 = *(void *)(result - 8) + 64;
      uint64_t v6 = v5;
      swift_initStructMetadata(a1, 256, 7, v4, a1 + 16);
      return 0;
    }
  }
  return result;
}

uint64_t sub_1C6DDE()
{
  swift_unknownObjectRelease(v0[2]);
  swift_release(v0[4]);
  swift_release(v0[6]);
  return swift_deallocObject(v0, 56, 7);
}

uint64_t partial apply for closure #1 in static MLRandomForestClassifier.handleResult(_:session:fulfill:)(uint64_t a1)
{
  uint64_t v3 = v1[2];
  uint64_t v4 = v1[3];
  uint64_t v8 = v1[4];
  uint64_t v9 = v1[5];
  uint64_t v5 = v1[6];
  uint64_t v6 = (void *)swift_task_alloc(dword_3AAE74);
  *(void *)(v2 + 16) = v6;
  *uint64_t v6 = v2;
  v6[1] = partial apply for specialized closure #1 in blockAwait<A>(_:);
  return closure #1 in static MLRandomForestClassifier.handleResult(_:session:fulfill:)(a1, v3, v4, v8, v9, v5);
}

uint64_t closure #1 in MLRandomForestClassifier.init(trainingData:targetColumn:featureColumns:parameters:)()
{
  return closure #1 in MLRandomForestRegressor.init(checkpoint:)();
}

unint64_t MethodName.rawValue.getter(char a1)
{
  switch(a1)
  {
    case 0:
      unint64_t result = 0x6172745F74696E69;
      break;
    case 1:
    case 8:
      unint64_t result = 0xD000000000000010;
      break;
    case 2:
      unint64_t result = 0xD000000000000014;
      break;
    case 3:
      unint64_t result = 0x745F656D75736572;
      break;
    case 4:
    case 18:
    case 21:
      unint64_t result = 0xD000000000000011;
      break;
    case 5:
      unint64_t result = 0x6E69617274;
      break;
    case 6:
      unint64_t result = 1702257011;
      break;
    case 7:
      unint64_t result = 0x6174656D5F646461;
      break;
    case 9:
      unint64_t result = 0x737265765F746567;
      break;
    case 10:
      unint64_t result = 0x74636964657270;
      break;
    case 11:
      unint64_t result = 0x657A696C797473;
      break;
    case 12:
      unint64_t result = 0xD000000000000012;
      break;
    case 13:
      unint64_t result = 0x657461756C617665;
      break;
    case 14:
      unint64_t result = 0x74706F5F74696E69;
      break;
    case 15:
      unint64_t result = 0x6569665F7473696CLL;
      break;
    case 16:
      unint64_t result = 0x756C61765F746567;
      break;
    case 17:
      unint64_t result = 0x6E656D6D6F636572;
      break;
    case 19:
      unint64_t result = 0xD000000000000018;
      break;
    case 20:
      unint64_t result = 0xD00000000000001DLL;
      break;
    case 22:
      unint64_t result = 0xD000000000000019;
      break;
    case 23:
      unint64_t result = 0xD00000000000002BLL;
      break;
    case 24:
      unint64_t result = 0xD000000000000025;
      break;
    case 25:
      unint64_t result = 0xD000000000000024;
      break;
    case 26:
      unint64_t result = 0xD00000000000001ALL;
      break;
    case 27:
      unint64_t result = 0xD000000000000021;
      break;
  }
  return result;
}

uint64_t MLHandActionClassifier.GraphCNN.updateGraphCNN(from:)(uint64_t a1, double a2, double a3)
{
  uint64_t v43 = v4;
  int64_t v5 = *(void *)(*(void *)(type metadata accessor for MLHandActionClassifier.GraphCNNModel(0) - 8) + 64);
  uint64_t v6 = alloca(v5);
  uint64_t v7 = alloca(v5);
  uint64_t v44 = v30;
  int64_t v8 = *(void *)(*(void *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SGD<MLHandActionClassifier.GraphCNNModel>)
                             - 8)
                 + 64);
  uint64_t v9 = alloca(v8);
  uint64_t v10 = alloca(v8);
  uint64_t v45 = v30;
  uint64_t v11 = alloca(v8);
  uint64_t v12 = alloca(v8);
  int64_t v13 = *(void *)(*(void *)(type metadata accessor for URL(0) - 8) + 64);
  uint64_t v14 = alloca(v13);
  char v15 = alloca(v13);
  URL.appendingPathComponent(_:)(0x7461446C65646F6DLL, 0xE900000000000061);
  LOBYTE(v30[0]) = 1;
  v30[1] = 44;
  v30[2] = 0xE100000000000000;
  v30[3] = 0;
  char v51 = 1;
  v30[4] = 0xE000000000000000;
  v30[5] = 92;
  v30[6] = 0xE100000000000000;
  char v31 = 1;
  uint64_t v32 = 34;
  unint64_t v33 = 0xE100000000000000;
  char v34 = 1;
  uint64_t v35 = &outlined read-only object #0 of default argument 1 of MLDataTable.init(contentsOf:options:);
  uint64_t v36 = 10;
  unint64_t v37 = 0xE100000000000000;
  long long v38 = 0;
  char v39 = 1;
  uint64_t v40 = 0;
  uint64_t result = MLDataTable.init(contentsOf:options:)(v30, v30);
  if (!v3)
  {
    uint64_t v47 = a1;
    uint64_t v17 = v43;
    int v48 = v30;
    uint64_t v18 = (uint64_t)v41;
    int v19 = v42;
    uint64_t v46 = specialized static _ModelCheckpoint<>.getCheckpointDictionary(from:)(v41, v42, 0.0);
    int v50 = v19;
    uint64_t v49 = v18;
    uint64_t v20 = v17;
    uint64_t v21 = v17 + OBJC_IVAR____TtCV8CreateML22MLHandActionClassifier8GraphCNN_model;
    swift_beginAccess(v17 + OBJC_IVAR____TtCV8CreateML22MLHandActionClassifier8GraphCNN_model, v30, 0, 0);
    uint64_t v22 = v21;
    uint64_t v23 = (uint64_t)v44;
    outlined init with copy of MLTrainingSessionParameters(v22, (uint64_t)v44, type metadata accessor for MLHandActionClassifier.GraphCNNModel);
    uint64_t v24 = v46;
    specialized static SGD.createOptimizer(for:checkpointDictionary:)(v23, v46);
    outlined destroy of MLActivityClassifier.ModelParameters(v23, type metadata accessor for MLHandActionClassifier.GraphCNNModel);
    uint64_t v25 = v20;
    specialized _ModelCheckpoint<>.updateGraph<A>(from:optimizer:checkpointDictionary:)(0.0, a3, v47, (uint64_t)v48, v24);
    uint64_t v26 = (uint64_t)v48;
    outlined consume of Result<_DataTable, Error>(v49, v50);
    swift_bridgeObjectRelease(v24);
    uint64_t v27 = v26;
    uint64_t v28 = (uint64_t)v45;
    outlined init with take of DataFrame?(v27, (uint64_t)v45, &demangling cache variable for type metadata for SGD<MLHandActionClassifier.GraphCNNModel>);
    uint64_t v29 = OBJC_IVAR____TtCV8CreateML22MLHandActionClassifier8GraphCNN_optimizer + v25;
    swift_beginAccess(v29, &v41, 33, 0);
    outlined assign with take of SGD<MLHandActionClassifier.GraphCNNModel>(v28, v29);
    return swift_endAccess(&v41);
  }
  return result;
}

uint64_t specialized SGD.updateOptimizerState(for:shape:using:name:)(uint64_t a1, uint64_t a2, uint64_t a3, void *a4, uint64_t a5, double a6, double a7)
{
  v51[1] = v7;
  uint64_t v61 = a4;
  uint64_t v60 = a3;
  uint64_t v52 = a1;
  int64_t v9 = *(void *)(*(void *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Tensor?)
                             - 8)
                 + 64);
  uint64_t v10 = alloca(v9);
  uint64_t v11 = alloca(v9);
  uint64_t v53 = v51;
  uint64_t v54 = type metadata accessor for Tensor(0);
  uint64_t v62 = *(void *)(v54 - 8);
  int64_t v12 = *(void *)(v62 + 64);
  int64_t v13 = alloca(v12);
  uint64_t v14 = alloca(v12);
  uint64_t v55 = v51;
  char v15 = alloca(v12);
  uint64_t v16 = alloca(v12);
  uint64_t v63 = v51;
  int64_t v17 = *(void *)(*(void *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TensorShape?)
                              - 8)
                  + 64);
  uint64_t v18 = alloca(v17);
  int v19 = alloca(v17);
  uint64_t v56 = v51;
  uint64_t v20 = alloca(v17);
  uint64_t v21 = alloca(v17);
  outlined init with copy of Either<LogisticRegressionClassifier<Float, String>, FullyConnectedNetworkClassifier<Float, String>>(a2, (uint64_t)v51, &demangling cache variable for type metadata for TensorShape?);
  uint64_t v22 = type metadata accessor for TensorShape(0);
  int EnumTagSinglePayload = __swift_getEnumTagSinglePayload((uint64_t)v51, 1, v22);
  uint64_t v57 = v22;
  if (EnumTagSinglePayload == 1)
  {
    outlined destroy of Either<LogisticRegressionClassifier<Float, String>, FullyConnectedNetworkClassifier<Float, String>>((uint64_t)v51, &demangling cache variable for type metadata for TensorShape?);
    uint64_t v65 = 0;
    uint64_t v66 = 0xE000000000000000;
    _StringGuts.grow(_:)(27);
    char v24 = v66;
    swift_bridgeObjectRetain(a5);
    swift_bridgeObjectRelease(v24);
    uint64_t v65 = v61;
    uint64_t v59 = a5;
    uint64_t v66 = a5;
    v25._countAndFlagsBits = 0xD000000000000019;
    v25._object = ".optimizer.velocity" + 0x8000000000000000;
    String.append(_:)(v25);
    char v26 = v66;
    uint64_t v27 = specialized Dictionary.subscript.getter((uint64_t)v65, v66, v60);
    uint64_t result = swift_bridgeObjectRelease(v26);
    if (!v27) {
      return result;
    }
    int64_t v29 = *(void *)(v27 + 16);
    if (v29)
    {
      uint64_t v65 = _swiftEmptyArrayStorage;
      uint64_t v30 = 0;
      uint64_t v64 = v27;
      uint64_t v67 = (void *)v29;
      specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v29, 0);
      char v31 = v67;
      uint64_t v32 = v64;
      unint64_t v33 = v65;
      a6 = -9.223372036854778e18;
      a7 = 9.223372036854776e18;
      do
      {
        double v34 = *(double *)(v32 + 8 * (void)v30 + 32);
        if ((~*(void *)&v34 & 0x7FF0000000000000) == 0) {
          BUG();
        }
        if (v34 <= -9.223372036854778e18) {
          BUG();
        }
        if (v34 >= 9.223372036854776e18) {
          BUG();
        }
        uint64_t v65 = v33;
        unint64_t v35 = v33[2];
        unint64_t v36 = v33[3];
        if (v36 >> 1 <= v35)
        {
          double v58 = v34;
          specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v36 >= 2, v35 + 1, 1);
          double v34 = v58;
          a7 = 9.223372036854776e18;
          a6 = -9.223372036854778e18;
          char v31 = v67;
          uint64_t v32 = v64;
          unint64_t v33 = v65;
        }
        uint64_t v30 = (void *)((char *)v30 + 1);
        v33[2] = v35 + 1;
        v33[v35 + 4] = (int)v34;
        a5 = v59;
      }
      while (v31 != v30);
      uint64_t v67 = v33;
      swift_bridgeObjectRelease(v32);
    }
    else
    {
      swift_bridgeObjectRelease(v27);
      uint64_t v67 = _swiftEmptyArrayStorage;
      a5 = v59;
    }
  }
  else
  {
    uint64_t v67 = (void *)TensorShape.dimensions.getter();
    (*(void (**)(void *, uint64_t))(*(void *)(v22 - 8) + 8))(v51, v22);
  }
  uint64_t v65 = 0;
  uint64_t v66 = 0xE000000000000000;
  _StringGuts.grow(_:)(21);
  char v37 = v66;
  swift_bridgeObjectRetain(a5);
  swift_bridgeObjectRelease(v37);
  uint64_t v65 = v61;
  uint64_t v66 = a5;
  v38._countAndFlagsBits = 0xD000000000000013;
  String.append(_:)(v38);
  char v39 = v66;
  uint64_t v40 = specialized Dictionary.subscript.getter((uint64_t)v65, v66, v60);
  swift_bridgeObjectRelease(v39);
  if (!v40) {
    return swift_bridgeObjectRelease((_BYTE)v67);
  }
  uint64_t v41 = (uint64_t)v56;
  TensorShape.init(_:)(v67, a6, a7);
  __swift_storeEnumTagSinglePayload(v41, 0, 1, v57);
  unsigned __int8 v42 = v55;
  Array<A>.floatTensor(shape:)(v41, v40);
  swift_bridgeObjectRelease(v40);
  outlined destroy of Either<LogisticRegressionClassifier<Float, String>, FullyConnectedNetworkClassifier<Float, String>>(v41, &demangling cache variable for type metadata for TensorShape?);
  uint64_t v43 = v63;
  uint64_t v44 = v42;
  uint64_t v45 = v54;
  uint64_t v46 = v62;
  (*(void (**)(void *, void *, uint64_t))(v62 + 32))(v63, v44, v54);
  uint64_t v47 = (uint64_t)v53;
  (*(void (**)(void *, void *, uint64_t))(v46 + 16))(v53, v43, v45);
  uint64_t v48 = v47;
  __swift_storeEnumTagSinglePayload(v47, 0, 1, v45);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SGD<MLHandActionClassifier.GraphCNNModel>);
  uint64_t v49 = v52;
  swift_retain();
  uint64_t v50 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for OptimizerStateDictionary<MLHandActionClassifier.GraphCNNModel>);
  OptimizerStateDictionary.subscript.setter(v48, v49, v50);
  return (*(uint64_t (**)(void *, uint64_t))(v62 + 8))(v63, v45);
}

uint64_t specialized static SGD.createOptimizer(for:checkpointDictionary:)(uint64_t a1, uint64_t a2)
{
  uint64_t v30 = v2;
  int64_t v3 = *(void *)(*(void *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for RegularizationKind?)
                             - 8)
                 + 64);
  uint64_t v4 = alloca(v3);
  int64_t v5 = alloca(v3);
  char v31 = &v30;
  int64_t v6 = *(void *)(*(void *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for GradientClippingMode?)
                             - 8)
                 + 64);
  uint64_t v7 = alloca(v6);
  int64_t v8 = alloca(v6);
  unint64_t v33 = &v30;
  uint64_t v9 = specialized Dictionary.subscript.getter(0x676E696E7261656CLL, 0xEC00000065746152, a2);
  if (!v9) {
    goto LABEL_15;
  }
  uint64_t v10 = v9;
  if (*(void *)(v9 + 16) != 1)
  {
    swift_bridgeObjectRelease(v9);
LABEL_15:
    uint64_t v24 = lazy protocol witness table accessor for type MLCreateError and conformance MLCreateError();
    swift_allocError(&type metadata for MLCreateError, v24, 0, 0);
    *(void *)uint64_t v25 = 0xD000000000000037;
LABEL_20:
    *(void *)(v25 + 8) = (unint64_t)v29 | 0x8000000000000000;
    *(_OWORD *)(v25 + 16) = 0;
    *(_OWORD *)(v25 + 32) = 0;
    *(unsigned char *)(v25 + 48) = 2;
    return swift_willThrow(&type metadata for MLCreateError, v24, v25, v26, v27, v28);
  }
  uint64_t v32 = a1;
  uint64_t v11 = specialized Dictionary.subscript.getter(0x6D75746E656D6F6DLL, 0xE800000000000000, a2);
  if (!v11)
  {
LABEL_17:
    swift_bridgeObjectRelease(v10);
    uint64_t v24 = lazy protocol witness table accessor for type MLCreateError and conformance MLCreateError();
    swift_allocError(&type metadata for MLCreateError, v24, 0, 0);
    *(void *)uint64_t v25 = 0xD000000000000033;
    int64_t v29 = "e checkpoint dictionary";
    goto LABEL_20;
  }
  uint64_t v12 = v11;
  if (*(void *)(v11 + 16) != 1)
  {
    swift_bridgeObjectRelease(v11);
    goto LABEL_17;
  }
  uint64_t v13 = specialized Dictionary.subscript.getter(0xD000000000000014, (uint64_t)(".isBidirectional" + 0x8000000000000000), a2);
  if (!v13)
  {
LABEL_19:
    swift_bridgeObjectRelease(v12);
    swift_bridgeObjectRelease(v10);
    uint64_t v24 = lazy protocol witness table accessor for type MLCreateError and conformance MLCreateError();
    swift_allocError(&type metadata for MLCreateError, v24, 0, 0);
    *(void *)uint64_t v25 = 0xD00000000000003FLL;
    int64_t v29 = "eckpoint dictionary";
    goto LABEL_20;
  }
  uint64_t v14 = v13;
  if (*(void *)(v13 + 16) != 1)
  {
    swift_bridgeObjectRelease(v13);
    goto LABEL_19;
  }
  if (!*(void *)(v10 + 16)) {
    BUG();
  }
  float v15 = *(double *)(v10 + 32);
  float v34 = v15;
  swift_bridgeObjectRelease(v10);
  if (!*(void *)(v12 + 16)) {
    BUG();
  }
  float v16 = *(double *)(v12 + 32);
  float v35 = v16;
  swift_bridgeObjectRelease(v12);
  if (!*(void *)(v14 + 16)) {
    BUG();
  }
  double v36 = *(double *)(v14 + 32);
  swift_bridgeObjectRelease(v14);
  if ((~*(void *)&v36 & 0x7FF0000000000000) == 0) {
    BUG();
  }
  if (v36 <= -9.223372036854778e18) {
    BUG();
  }
  if (v36 >= 9.223372036854776e18) {
    BUG();
  }
  LODWORD(v36) = (int)v36 == 1;
  uint64_t v17 = type metadata accessor for GradientClippingMode(0);
  __swift_storeEnumTagSinglePayload((uint64_t)v33, 1, 1, v17);
  uint64_t v18 = (uint64_t)v31;
  *(_DWORD *)char v31 = 981668463;
  unsigned int v19 = enum case for RegularizationKind.l2(_:);
  uint64_t v20 = type metadata accessor for RegularizationKind(0);
  (*(void (**)(uint64_t, void, uint64_t))(*(void *)(v20 - 8) + 104))(v18, v19, v20);
  __swift_storeEnumTagSinglePayload(v18, 0, 1, v20);
  uint64_t v21 = type metadata accessor for MLHandActionClassifier.GraphCNNModel(0);
  uint64_t v22 = lazy protocol witness table accessor for type VNImageOption and conformance VNImageOption(&lazy protocol witness table cache variable for type MLHandActionClassifier.GraphCNNModel and conformance MLHandActionClassifier.GraphCNNModel, type metadata accessor for MLHandActionClassifier.GraphCNNModel, (uint64_t)&protocol conformance descriptor for MLHandActionClassifier.GraphCNNModel);
  return SGD.init(for:learningRate:momentum:usesNesterovMomentum:gradientClippingMode:regularizationKind:gradientScale:)(v32, LODWORD(v36), v33, v18, v21, v22, v34, v35, 1.0);
}

_UNKNOWN **one-time initialization function for adjustLearningRateSteps()
{
  uint64_t result = &outlined read-only object #0 of one-time initialization function for adjustLearningRateSteps;
  static MLHandActionClassifier.GraphCNN.ModelTrainingInternalParameters.adjustLearningRateSteps = (uint64_t)&outlined read-only object #0 of one-time initialization function for adjustLearningRateSteps;
  return result;
}

void *MLHandActionClassifier.GraphCNN.init(classLabels:export:numOfKeypoints:numOfKeypointsChannels:windowSize:)(uint64_t a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v35 = a5;
  uint64_t v36 = a4;
  uint64_t v37 = a3;
  int v39 = a2;
  int64_t v6 = *(void *)(*(void *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for RegularizationKind?)
                             - 8)
                 + 64);
  uint64_t v7 = alloca(v6);
  int64_t v8 = alloca(v6);
  unint64_t v33 = &v29;
  int64_t v9 = *(void *)(*(void *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for GradientClippingMode?)
                             - 8)
                 + 64);
  uint64_t v10 = alloca(v9);
  uint64_t v11 = alloca(v9);
  Swift::String v38 = &v29;
  int64_t v12 = *(void *)(*(void *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SGD<MLHandActionClassifier.GraphCNNModel>)
                              - 8)
                  + 64);
  uint64_t v13 = alloca(v12);
  uint64_t v14 = alloca(v12);
  char v31 = &v29;
  uint64_t v32 = type metadata accessor for MLHandActionClassifier.GraphCNNModel(0);
  int64_t v15 = *(void *)(*(void *)(v32 - 8) + 64);
  float v16 = alloca(v15);
  uint64_t v17 = alloca(v15);
  v5[2] = a1;
  v5[3] = v37;
  v5[4] = v36;
  float v34 = v5;
  swift_bridgeObjectRetain(a1);
  MLHandActionClassifier.GraphCNNModel.init(classLabels:export:numOfKeypoints:numOfKeypointsChannels:windowSize:)(a1, v39, v18, v19, v35);
  uint64_t v20 = (uint64_t)v5 + OBJC_IVAR____TtCV8CreateML22MLHandActionClassifier8GraphCNN_model;
  outlined init with take of MLClassifierMetrics((uint64_t)&v29, (uint64_t)v5 + OBJC_IVAR____TtCV8CreateML22MLHandActionClassifier8GraphCNN_model, type metadata accessor for MLHandActionClassifier.GraphCNNModel);
  swift_beginAccess(v20, v30, 0, 0);
  outlined init with copy of MLTrainingSessionParameters(v20, (uint64_t)&v29, type metadata accessor for MLHandActionClassifier.GraphCNNModel);
  uint64_t v21 = type metadata accessor for GradientClippingMode(0);
  __swift_storeEnumTagSinglePayload((uint64_t)&v29, 1, 1, v21);
  uint64_t v22 = (uint64_t)v33;
  *(_DWORD *)unint64_t v33 = 981668463;
  unsigned int v23 = enum case for RegularizationKind.l2(_:);
  uint64_t v24 = type metadata accessor for RegularizationKind(0);
  (*(void (**)(uint64_t, void, uint64_t))(*(void *)(v24 - 8) + 104))(v22, v23, v24);
  __swift_storeEnumTagSinglePayload(v22, 0, 1, v24);
  uint64_t v25 = lazy protocol witness table accessor for type VNImageOption and conformance VNImageOption(&lazy protocol witness table cache variable for type MLHandActionClassifier.GraphCNNModel and conformance MLHandActionClassifier.GraphCNNModel, type metadata accessor for MLHandActionClassifier.GraphCNNModel, (uint64_t)&protocol conformance descriptor for MLHandActionClassifier.GraphCNNModel);
  uint64_t v26 = (uint64_t)v31;
  SGD.init(for:learningRate:momentum:usesNesterovMomentum:gradientClippingMode:regularizationKind:gradientScale:)(&v29, 1, v38, v22, v32, v25, 0.0099999998, 0.89999998, 1.0);
  outlined destroy of MLActivityClassifier.ModelParameters((uint64_t)&v29, type metadata accessor for MLHandActionClassifier.GraphCNNModel);
  uint64_t v27 = v34;
  outlined init with take of DataFrame?(v26, (uint64_t)v34 + OBJC_IVAR____TtCV8CreateML22MLHandActionClassifier8GraphCNN_optimizer, &demangling cache variable for type metadata for SGD<MLHandActionClassifier.GraphCNNModel>);
  return v27;
}

uint64_t MLHandActionClassifier.GraphCNNModel.init(classLabels:export:numOfKeypoints:numOfKeypointsChannels:windowSize:)(uint64_t a1, char a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v26 = a1;
  uint64_t v7 = v5;
  int64_t v8 = *(void *)(*(void *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ComputeDevice?)
                             - 8)
                 + 64);
  int64_t v9 = alloca(v8);
  uint64_t v10 = alloca(v8);
  uint64_t v27 = v24;
  uint64_t v11 = type metadata accessor for MLHandActionClassifier.GraphCNNModel(0);
  *(unsigned char *)(v7 + *(int *)(v11 + 36)) = a2 & 1;
  *(void *)(v7 + *(int *)(v11 + 40)) = a5;
  uint64_t v12 = type metadata accessor for ParameterInitializer(0);
  uint64_t v13 = static ParameterInitializer.zeros.getter();
  v24[1] = v12;
  uint64_t v14 = static ParameterInitializer.ones.getter();
  BatchNorm.init(offsetInitializer:scaleInitializer:momentum:epsilon:)(v13, v14, 0.1, 0.0000099999997);
  v24[0] = type metadata accessor for ComputeDevice(0);
  uint64_t v15 = (uint64_t)v27;
  __swift_storeEnumTagSinglePayload((uint64_t)v27, 1, 1, v24[0]);
  uint64_t v16 = static ParameterInitializer.glorotUniform(seed:scalarType:on:)(0, 1, &type metadata for Float, &protocol witness table for Float, v15);
  outlined destroy of Either<LogisticRegressionClassifier<Float, String>, FullyConnectedNetworkClassifier<Float, String>>(v15, &demangling cache variable for type metadata for ComputeDevice?);
  Dense.init(unitCount:weightInitializer:biasInitializer:)(704, v16, 0);
  uint64_t v17 = static ParameterInitializer.zeros.getter();
  uint64_t v18 = static ParameterInitializer.ones.getter();
  BatchNorm.init(offsetInitializer:scaleInitializer:momentum:epsilon:)(v17, v18, 0.1, 0.0000099999997);
  Dropout.init(probability:seed:)(0, 1, 0.2);
  uint64_t v25 = *(void *)(v26 + 16);
  swift_bridgeObjectRelease(v26);
  static MLHandActionClassifier.SingleStreamBlock.makeDownSampledInvertedResidual(inplanes:planes:stride:)(16, 8, 1, 1);
  type metadata accessor for MLHandActionClassifier.SingleStreamBlock(0);
  static MLHandActionClassifier.SingleStreamBlock.makeDownSampledInvertedResidual(inplanes:planes:stride:)(8, 16, 1, 1);
  static MLHandActionClassifier.SingleStreamBlock.makeDownSampledInvertedResidual(inplanes:planes:stride:)(16, 32, 1, 1);
  static MLHandActionClassifier.SingleStreamBlock.makeDownSampledInvertedResidual(inplanes:planes:stride:)(32, 64, 2, 2);
  static MLHandActionClassifier.SingleStreamBlock.makeInvertedResidual(inplanes:planes:stride:)(64, 64, 1, 1);
  static MLHandActionClassifier.SingleStreamBlock.makeDownSampledInvertedResidual(inplanes:planes:stride:)(64, 128, 2, 2);
  static MLHandActionClassifier.SingleStreamBlock.makeDownSampledInvertedResidual(inplanes:planes:stride:)(128, 256, 1, 1);
  GlobalAveragePool2D.init()();
  uint64_t v19 = (uint64_t)v27;
  __swift_storeEnumTagSinglePayload((uint64_t)v27, 1, 1, v24[0]);
  uint64_t v20 = v19;
  uint64_t v21 = static ParameterInitializer.glorotUniform(seed:scalarType:on:)(0, 1, &type metadata for Float, &protocol witness table for Float, v19);
  outlined destroy of Either<LogisticRegressionClassifier<Float, String>, FullyConnectedNetworkClassifier<Float, String>>(v20, &demangling cache variable for type metadata for ComputeDevice?);
  uint64_t v22 = static ParameterInitializer.zeros.getter();
  type metadata accessor for MLHandActionClassifier.Torso(0);
  return Dense.init(unitCount:weightInitializer:biasInitializer:)(v25, v21, v22);
}

uint64_t specialized static _ModelCheckpoint<>.getCheckpointDictionary(from:)(void *a1, char a2, double a3)
{
  return specialized static _ModelCheckpoint<>.getCheckpointDictionary(from:)(a1, a2, a3);
}

{
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  char v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  char v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char v25;
  void *v26;
  uint64_t v27;
  uint64_t v28;

  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [Double]);
  uint64_t v28 = Dictionary.init(dictionaryLiteral:)(_swiftEmptyArrayStorage, &type metadata for String, v4, &protocol witness table for String);
  uint64_t v25 = a2 & 1;
  outlined copy of Result<_DataTable, Error>((uint64_t)a1, a2);
  LOBYTE(v26) = a2 & 1;
  if (MLDataTable.size.getter())
  {
    MLDataTable.Rows.subscript.getter(0);
    outlined copy of Result<_DataTable, Error>((uint64_t)a1, a2);
    specialized RandomAccessCollection<>.index(after:)(0);
    outlined consume of Result<_DataTable, Error>((uint64_t)a1, a2);
    if (v26[2])
    {
      swift_retain();
      swift_bridgeObjectRetain((_BYTE)v26);
      swift_retain();
      uint64_t v5 = specialized __RawDictionaryStorage.find<A>(_:)(1937335659, 0xE400000000000000);
      if (v6)
      {
        uint64_t v7 = *(void *)(v26[7] + 8 * v5);
        swift_retain_n(v27);
        int64_t v8 = CMLSequence.value(at:)(v7);
        if (v3)
        {
          swift_release();
          swift_unexpectedError(v3, "CreateML/MLDataTable.Row.swift", 30, 1, 85);
          BUG();
        }
        int64_t v9 = v8;
        swift_release();
        MLDataValue.init(_:)(v9, a3);
        swift_bridgeObjectRelease((_BYTE)v26);
        swift_release();
        swift_release_n(v27);
        if ((_BYTE)v27 == 2)
        {
          if (v26[2])
          {
            swift_retain();
            swift_bridgeObjectRetain((_BYTE)v26);
            swift_retain();
            outlined copy of MLDataValue(a1, v26, 2u);
            uint64_t v10 = specialized __RawDictionaryStorage.find<A>(_:)(0x7365756C6176, 0xE600000000000000);
            if (v11)
            {
              uint64_t v12 = *(void *)(v26[7] + 8 * v10);
              swift_retain_n(v27);
              uint64_t v13 = CMLSequence.value(at:)(v12);
              swift_release();
              MLDataValue.init(_:)(v13, a3);
              swift_bridgeObjectRelease((_BYTE)v26);
              swift_release();
              swift_release_n(v27);
              swift_bridgeObjectRelease(v28);
              outlined consume of MLDataValue(a1, v26, v27);
LABEL_17:
              outlined consume of MLDataValue(a1, v26, 2);
              uint64_t v19 = lazy protocol witness table accessor for type MLCreateError and conformance MLCreateError();
              swift_allocError(&type metadata for MLCreateError, v19, 0, 0);
              *(void *)uint64_t v20 = 0xD00000000000005BLL;
              *(void *)(v20 + 8) = " contains string keys" + 0x8000000000000000;
              *(_OWORD *)(v20 + 16) = 0;
              *(_OWORD *)(v20 + 32) = 0;
              *(unsigned char *)(v20 + 48) = 2;
              swift_willThrow(&type metadata for MLCreateError, v19, v20, v21, v22, v23);
              outlined consume of MLDataValue(a1, v26, 2);
              swift_release();
              swift_bridgeObjectRelease((_BYTE)v26);
              goto LABEL_18;
            }
            swift_release();
            swift_bridgeObjectRelease((_BYTE)v26);
            swift_release();
          }
          else
          {
            outlined copy of MLDataValue(a1, v26, 2u);
          }
          swift_bridgeObjectRelease(v28);
          goto LABEL_17;
        }
        swift_bridgeObjectRelease(v28);
        outlined consume of MLDataValue(a1, v26, v27);
LABEL_13:
        uint64_t v14 = lazy protocol witness table accessor for type MLCreateError and conformance MLCreateError();
        swift_allocError(&type metadata for MLCreateError, v14, 0, 0);
        *(void *)uint64_t v15 = 0xD000000000000055;
        *(void *)(v15 + 8) = "nd in the checkpoint dictionary" + 0x8000000000000000;
        *(_OWORD *)(v15 + 16) = 0;
        *(_OWORD *)(v15 + 32) = 0;
        *(unsigned char *)(v15 + 48) = 2;
        swift_willThrow(&type metadata for MLCreateError, v14, v15, v16, v17, v18);
        swift_release();
        swift_bridgeObjectRelease((_BYTE)v26);
LABEL_18:
        swift_release();
        a2 = v25;
        goto LABEL_19;
      }
      swift_release();
      swift_bridgeObjectRelease((_BYTE)v26);
      swift_release();
    }
    swift_bridgeObjectRelease(v28);
    goto LABEL_13;
  }
LABEL_19:
  outlined consume of Result<_DataTable, Error>((uint64_t)a1, a2);
  return v28;
}

uint64_t specialized _ModelCheckpoint<>.updateGraph<A>(from:optimizer:checkpointDictionary:)(double a1, double a2, uint64_t a3, uint64_t a4, void *a5)
{
  uint64_t v107 = v5;
  v102 = a5;
  uint64_t v103 = a4;
  uint64_t v91 = type metadata accessor for LSTM(0);
  uint64_t v98 = *(void *)(v91 - 8);
  int64_t v7 = *(void *)(v98 + 64);
  int64_t v8 = alloca(v7);
  int64_t v9 = alloca(v7);
  v94 = &v73;
  uint64_t v10 = alloca(v7);
  uint64_t v11 = alloca(v7);
  v92 = &v73;
  uint64_t v88 = type metadata accessor for Dense(0);
  uint64_t v97 = *(void *)(v88 - 8);
  int64_t v12 = *(void *)(v97 + 64);
  uint64_t v13 = alloca(v12);
  uint64_t v14 = alloca(v12);
  v93 = &v73;
  uint64_t v15 = alloca(v12);
  uint64_t v16 = alloca(v12);
  v89 = &v73;
  uint64_t v84 = type metadata accessor for Conv2D(0);
  uint64_t v96 = *(void *)(v84 - 8);
  int64_t v17 = *(void *)(v96 + 64);
  uint64_t v18 = alloca(v17);
  uint64_t v19 = alloca(v17);
  v90 = &v73;
  uint64_t v20 = alloca(v17);
  uint64_t v21 = alloca(v17);
  uint64_t v81 = type metadata accessor for BatchNorm(0);
  uint64_t v85 = *(void *)(v81 - 8);
  int64_t v22 = *(void *)(v85 + 64);
  unsigned int v23 = alloca(v22);
  uint64_t v24 = alloca(v22);
  v87 = &v73;
  uint64_t v25 = alloca(v22);
  uint64_t v26 = alloca(v22);
  v82 = &v73;
  int64_t v27 = *(void *)(*(void *)(type metadata accessor for MLActivityClassifier.Model(0) - 8) + 64);
  uint64_t v28 = alloca(v27);
  uint64_t v29 = alloca(v27);
  uint64_t v30 = v6 + OBJC_IVAR____TtCVV8CreateML20MLActivityClassifier7Trainer14ModelContainer_model;
  swift_beginAccess(v6 + OBJC_IVAR____TtCVV8CreateML20MLActivityClassifier7Trainer14ModelContainer_model, v74, 0, 0);
  uint64_t v31 = v30;
  unint64_t v32 = 0;
  outlined init with copy of MLTrainingSessionParameters(v31, (uint64_t)&v73, type metadata accessor for MLActivityClassifier.Model);
  uint64_t v101 = v6;
  unint64_t v33 = specialized _ModelCheckpoint<>.trainableSublayers(model:)((uint64_t)&v73, type metadata accessor for MLActivityClassifier.Model, &lazy protocol witness table cache variable for type MLActivityClassifier.Model and conformance MLActivityClassifier.Model, (uint64_t)&protocol conformance descriptor for MLActivityClassifier.Model);
  outlined destroy of MLActivityClassifier.ModelParameters((uint64_t)&v73, type metadata accessor for MLActivityClassifier.Model);
  unint64_t v34 = v33[2];
  v106 = v33;
  v83 = v33 + 4;
  unint64_t v104 = v34;
  v86 = &v73;
  while (1)
  {
    if (v32 == v34)
    {
      memset(v95, 0, sizeof(v95));
    }
    else
    {
      if (v32 >= v106[2]) {
        BUG();
      }
      unint64_t v34 = v32 + 1;
      outlined init with copy of TabularRegressionTask((uint64_t)&v83[5 * v32], (uint64_t)v79);
      *(void *)&v95[0] = v32;
      outlined init with take of MLIdentifier(v79, (uint64_t)v95 + 8);
    }
    outlined init with take of DataFrame?((uint64_t)v95, (uint64_t)&v75, &demangling cache variable for type metadata for (offset: Int, element: Layer)?);
    if (!v77) {
      return swift_bridgeObjectRelease((_BYTE)v106);
    }
    unint64_t v100 = v34;
    uint64_t v35 = v75;
    outlined init with take of MLIdentifier(&v76, (uint64_t)v95);
    uint64_t v78 = 0x5F726579616CLL;
    *(void *)&v79[0] = 0xE600000000000000;
    *(void *)&long long v80 = v35;
    v36._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter(&type metadata for Int, &protocol witness table for Int);
    LOBYTE(v35) = v36._object;
    String.append(_:)(v36);
    swift_bridgeObjectRelease(v35);
    uint64_t v99 = v78;
    *(void *)&long long v105 = *(void *)&v79[0];
    outlined init with copy of TabularRegressionTask((uint64_t)v95, (uint64_t)&v78);
    uint64_t v37 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Layer);
    Swift::String v38 = v82;
    uint64_t v39 = v81;
    if (!swift_dynamicCast(v82, &v78, v37, v81, 0)) {
      break;
    }
    uint64_t v40 = (uint64_t)v87;
    uint64_t v41 = v85;
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(v85 + 32))(v87, v38, v39);
    uint64_t v42 = v107;
    specialized _ModelCheckpoint<>.restoreLayer<A>(_:optimizer:layerName:checkpointDictionary:)(v40, v103, v99, v105, (uint64_t)v102, (uint64_t (*)(void))specialized _ModelCheckpoint<>.parameterKeyPathLookup.getter, (uint64_t (*)(void))specialized _ModelCheckpoint<>.layerStateKeyPathLookup.getter, (uint64_t (*)(uint64_t, uint64_t (*)(void)))specialized Dictionary.subscript.getter, &OBJC_IVAR____TtCVV8CreateML20MLActivityClassifier7Trainer14ModelContainer_model, &lazy protocol witness table cache variable for type MLActivityClassifier.Model and conformance MLActivityClassifier.Model, type metadata accessor for MLActivityClassifier.Model, (uint64_t)&protocol conformance descriptor for MLActivityClassifier.Model, (void (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))specialized Adam.updateOptimizerState(for:shape:using:name:), (uint64_t (*)(uint64_t, uint64_t))specialized Dictionary.subscript.getter);
    uint64_t v107 = v42;
    if (v42)
    {
      swift_bridgeObjectRelease(v105);
      (*(void (**)(uint64_t, uint64_t))(v41 + 8))(v40, v39);
      goto LABEL_28;
    }
    swift_bridgeObjectRelease(v105);
    (*(void (**)(uint64_t, uint64_t))(v41 + 8))(v40, v39);
LABEL_20:
    unint64_t v32 = v100;
    unint64_t v34 = v104;
    __swift_destroy_boxed_opaque_existential_1Tm(v95);
    __swift_destroy_boxed_opaque_existential_1Tm(&v78);
  }
  uint64_t v43 = v86;
  uint64_t v44 = v84;
  if (swift_dynamicCast(v86, &v78, v37, v84, 0))
  {
    uint64_t v45 = (uint64_t)v90;
    double v46 = (*(double (**)(uint64_t *, uint64_t *, uint64_t))(v96 + 32))(v90, v43, v44);
    char v47 = v105;
    uint64_t v48 = v107;
    specialized _ModelCheckpoint<>.restoreLayer<A>(_:optimizer:layerName:checkpointDictionary:)(v45, v103, v99, v105, v102, v46, a2);
    uint64_t v107 = v48;
    if (v48)
    {
      swift_bridgeObjectRelease(v47);
      uint64_t v65 = v45;
      uint64_t v66 = v44;
      uint64_t v67 = v96;
      goto LABEL_27;
    }
    swift_bridgeObjectRelease(v47);
    uint64_t v49 = v45;
    uint64_t v50 = v44;
    uint64_t v51 = v96;
    goto LABEL_19;
  }
  uint64_t v52 = v89;
  uint64_t v53 = v88;
  if (swift_dynamicCast(v89, &v78, v37, v88, 0))
  {
    uint64_t v54 = (uint64_t)v93;
    double v55 = (*(double (**)(uint64_t *, uint64_t *, uint64_t))(v97 + 32))(v93, v52, v53);
    char v56 = v105;
    uint64_t v57 = v107;
    specialized _ModelCheckpoint<>.restoreLayer<A>(_:optimizer:layerName:checkpointDictionary:)(v54, v103, v99, v105, v102, v55, a2);
    uint64_t v107 = v57;
    if (v57)
    {
      swift_bridgeObjectRelease(v56);
      uint64_t v65 = v54;
      uint64_t v66 = v53;
      uint64_t v67 = v97;
      goto LABEL_27;
    }
    swift_bridgeObjectRelease(v56);
    uint64_t v49 = v54;
    uint64_t v50 = v53;
    uint64_t v51 = v97;
    goto LABEL_19;
  }
  double v58 = v92;
  uint64_t v59 = v91;
  if (!swift_dynamicCast(v92, &v78, v37, v91, 0))
  {
    swift_bridgeObjectRelease(v105);
    swift_bridgeObjectRelease((_BYTE)v106);
    *(void *)&long long v80 = 0;
    *((void *)&v80 + 1) = 0xE000000000000000;
    _StringGuts.grow(_:)(64);
    v68._countAndFlagsBits = 0xD000000000000020;
    v68._object = "annels" + 0x8000000000000000;
    String.append(_:)(v68);
    _print_unlocked<A, B>(_:_:)(v95, &v80, v37, &type metadata for DefaultStringInterpolation, &protocol witness table for DefaultStringInterpolation);
    v68._countAndFlagsBits = 0xD00000000000001ELL;
    String.append(_:)(v68);
    long long v105 = v80;
    v68._object = (void *)lazy protocol witness table accessor for type MLCreateError and conformance MLCreateError();
    swift_allocError(&type metadata for MLCreateError, v68._object, 0, 0);
    *(_OWORD *)uint64_t v69 = v105;
    *(_OWORD *)(v69 + 16) = 0;
    *(_OWORD *)(v69 + 32) = 0;
    *(unsigned char *)(v69 + 48) = 2;
    swift_willThrow(&type metadata for MLCreateError, v68._object, v69, v70, v71, v72);
    __swift_destroy_boxed_opaque_existential_1Tm(v95);
    return __swift_destroy_boxed_opaque_existential_1Tm(&v78);
  }
  uint64_t v60 = (uint64_t)v94;
  (*(void (**)(uint64_t *, uint64_t *, uint64_t))(v98 + 32))(v94, v58, v59);
  uint64_t v61 = v59;
  char v62 = v105;
  uint64_t v63 = v107;
  specialized _ModelCheckpoint<>.restoreGenericLayer<A, B>(_:optimizer:layerName:checkpointDictionary:)(v60, v103, v99, (void *)v105, (uint64_t)v102, type metadata accessor for MLActivityClassifier.Model, &OBJC_IVAR____TtCVV8CreateML20MLActivityClassifier7Trainer14ModelContainer_model, (uint64_t (*)(void))specialized _ModelCheckpoint<>.parameterKeyPathLookup.getter, &lazy protocol witness table cache variable for type MLActivityClassifier.Model and conformance MLActivityClassifier.Model, (uint64_t)&protocol conformance descriptor for MLActivityClassifier.Model, (void (*)(uint64_t, uint64_t, uint64_t, uint64_t, void *))specialized Adam.updateOptimizerState(for:shape:using:name:));
  uint64_t v107 = v63;
  if (!v63)
  {
    swift_bridgeObjectRelease(v62);
    uint64_t v49 = v60;
    uint64_t v50 = v61;
    uint64_t v51 = v98;
LABEL_19:
    (*(void (**)(uint64_t, uint64_t))(v51 + 8))(v49, v50);
    goto LABEL_20;
  }
  swift_bridgeObjectRelease(v62);
  uint64_t v65 = v60;
  uint64_t v66 = v61;
  uint64_t v67 = v98;
LABEL_27:
  (*(void (**)(uint64_t, uint64_t))(v67 + 8))(v65, v66);
LABEL_28:
  __swift_destroy_boxed_opaque_existential_1Tm(v95);
  swift_bridgeObjectRelease((_BYTE)v106);
  return __swift_destroy_boxed_opaque_existential_1Tm(&v78);
}

uint64_t specialized _ModelCheckpoint<>.updateGraph<A>(from:optimizer:checkpointDictionary:)(double a1, double a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v107 = v5;
  uint64_t v102 = a5;
  uint64_t v103 = a4;
  uint64_t v91 = type metadata accessor for LSTM(0);
  uint64_t v98 = *(void *)(v91 - 8);
  int64_t v7 = *(void *)(v98 + 64);
  int64_t v8 = alloca(v7);
  int64_t v9 = alloca(v7);
  v94 = &v73;
  uint64_t v10 = alloca(v7);
  uint64_t v11 = alloca(v7);
  v92 = &v73;
  uint64_t v88 = type metadata accessor for Dense(0);
  uint64_t v97 = *(void *)(v88 - 8);
  int64_t v12 = *(void *)(v97 + 64);
  uint64_t v13 = alloca(v12);
  uint64_t v14 = alloca(v12);
  v93 = &v73;
  uint64_t v15 = alloca(v12);
  uint64_t v16 = alloca(v12);
  v89 = &v73;
  uint64_t v84 = type metadata accessor for Conv2D(0);
  uint64_t v96 = *(void *)(v84 - 8);
  int64_t v17 = *(void *)(v96 + 64);
  uint64_t v18 = alloca(v17);
  uint64_t v19 = alloca(v17);
  v90 = &v73;
  uint64_t v20 = alloca(v17);
  uint64_t v21 = alloca(v17);
  uint64_t v81 = type metadata accessor for BatchNorm(0);
  uint64_t v85 = *(void *)(v81 - 8);
  int64_t v22 = *(void *)(v85 + 64);
  unsigned int v23 = alloca(v22);
  uint64_t v24 = alloca(v22);
  v87 = &v73;
  uint64_t v25 = alloca(v22);
  uint64_t v26 = alloca(v22);
  v82 = &v73;
  int64_t v27 = *(void *)(*(void *)(type metadata accessor for MLHandActionClassifier.GraphCNNModel(0) - 8) + 64);
  uint64_t v28 = alloca(v27);
  uint64_t v29 = alloca(v27);
  uint64_t v30 = v6 + OBJC_IVAR____TtCV8CreateML22MLHandActionClassifier8GraphCNN_model;
  swift_beginAccess(v6 + OBJC_IVAR____TtCV8CreateML22MLHandActionClassifier8GraphCNN_model, v74, 0, 0);
  uint64_t v31 = v30;
  unint64_t v32 = 0;
  outlined init with copy of MLTrainingSessionParameters(v31, (uint64_t)&v73, type metadata accessor for MLHandActionClassifier.GraphCNNModel);
  uint64_t v101 = v6;
  unint64_t v33 = specialized _ModelCheckpoint<>.trainableSublayers(model:)((uint64_t)&v73, type metadata accessor for MLHandActionClassifier.GraphCNNModel, &lazy protocol witness table cache variable for type MLHandActionClassifier.GraphCNNModel and conformance MLHandActionClassifier.GraphCNNModel, (uint64_t)&protocol conformance descriptor for MLHandActionClassifier.GraphCNNModel);
  outlined destroy of MLActivityClassifier.ModelParameters((uint64_t)&v73, type metadata accessor for MLHandActionClassifier.GraphCNNModel);
  unint64_t v34 = v33[2];
  v106 = v33;
  v83 = v33 + 4;
  unint64_t v104 = v34;
  v86 = &v73;
  while (1)
  {
    if (v32 == v34)
    {
      memset(v95, 0, sizeof(v95));
    }
    else
    {
      if (v32 >= v106[2]) {
        BUG();
      }
      unint64_t v34 = v32 + 1;
      outlined init with copy of TabularRegressionTask((uint64_t)&v83[5 * v32], (uint64_t)v79);
      *(void *)&v95[0] = v32;
      outlined init with take of MLIdentifier(v79, (uint64_t)v95 + 8);
    }
    outlined init with take of DataFrame?((uint64_t)v95, (uint64_t)&v75, &demangling cache variable for type metadata for (offset: Int, element: Layer)?);
    if (!v77) {
      return swift_bridgeObjectRelease((_BYTE)v106);
    }
    unint64_t v100 = v34;
    uint64_t v35 = v75;
    outlined init with take of MLIdentifier(&v76, (uint64_t)v95);
    uint64_t v78 = 0x5F726579616CLL;
    *(void *)&v79[0] = 0xE600000000000000;
    *(void *)&long long v80 = v35;
    v36._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter(&type metadata for Int, &protocol witness table for Int);
    LOBYTE(v35) = v36._object;
    String.append(_:)(v36);
    swift_bridgeObjectRelease(v35);
    uint64_t v99 = v78;
    *(void *)&long long v105 = *(void *)&v79[0];
    outlined init with copy of TabularRegressionTask((uint64_t)v95, (uint64_t)&v78);
    uint64_t v37 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Layer);
    Swift::String v38 = v82;
    uint64_t v39 = v81;
    if (!swift_dynamicCast(v82, &v78, v37, v81, 0)) {
      break;
    }
    uint64_t v40 = (uint64_t)v87;
    uint64_t v41 = v85;
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(v85 + 32))(v87, v38, v39);
    uint64_t v42 = v107;
    specialized _ModelCheckpoint<>.restoreLayer<A>(_:optimizer:layerName:checkpointDictionary:)(v40, v103, v99, v105, v102, (uint64_t (*)(void))specialized _ModelCheckpoint<>.parameterKeyPathLookup.getter, (uint64_t (*)(void))specialized _ModelCheckpoint<>.layerStateKeyPathLookup.getter, (uint64_t (*)(uint64_t, uint64_t (*)(void)))specialized Dictionary.subscript.getter, &OBJC_IVAR____TtCV8CreateML22MLHandActionClassifier8GraphCNN_model, &lazy protocol witness table cache variable for type MLHandActionClassifier.GraphCNNModel and conformance MLHandActionClassifier.GraphCNNModel, type metadata accessor for MLHandActionClassifier.GraphCNNModel, (uint64_t)&protocol conformance descriptor for MLHandActionClassifier.GraphCNNModel, (void (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))specialized SGD.updateOptimizerState(for:shape:using:name:), (uint64_t (*)(uint64_t, uint64_t))specialized Dictionary.subscript.getter);
    uint64_t v107 = v42;
    if (v42)
    {
      swift_bridgeObjectRelease(v105);
      (*(void (**)(uint64_t, uint64_t))(v41 + 8))(v40, v39);
      goto LABEL_28;
    }
    swift_bridgeObjectRelease(v105);
    (*(void (**)(uint64_t, uint64_t))(v41 + 8))(v40, v39);
LABEL_20:
    unint64_t v32 = v100;
    unint64_t v34 = v104;
    __swift_destroy_boxed_opaque_existential_1Tm(v95);
    __swift_destroy_boxed_opaque_existential_1Tm(&v78);
  }
  uint64_t v43 = v86;
  uint64_t v44 = v84;
  if (swift_dynamicCast(v86, &v78, v37, v84, 0))
  {
    uint64_t v45 = (uint64_t)v90;
    double v46 = (*(double (**)(uint64_t *, uint64_t *, uint64_t))(v96 + 32))(v90, v43, v44);
    char v47 = v105;
    uint64_t v48 = v107;
    specialized _ModelCheckpoint<>.restoreLayer<A>(_:optimizer:layerName:checkpointDictionary:)(v45, v103, v99, v105, v102, v46, a2);
    uint64_t v107 = v48;
    if (v48)
    {
      swift_bridgeObjectRelease(v47);
      uint64_t v65 = v45;
      uint64_t v66 = v44;
      uint64_t v67 = v96;
      goto LABEL_27;
    }
    swift_bridgeObjectRelease(v47);
    uint64_t v49 = v45;
    uint64_t v50 = v44;
    uint64_t v51 = v96;
    goto LABEL_19;
  }
  uint64_t v52 = v89;
  uint64_t v53 = v88;
  if (swift_dynamicCast(v89, &v78, v37, v88, 0))
  {
    uint64_t v54 = (uint64_t)v93;
    double v55 = (*(double (**)(uint64_t *, uint64_t *, uint64_t))(v97 + 32))(v93, v52, v53);
    char v56 = v105;
    uint64_t v57 = v107;
    specialized _ModelCheckpoint<>.restoreLayer<A>(_:optimizer:layerName:checkpointDictionary:)(v54, v103, v99, v105, v102, v55, a2);
    uint64_t v107 = v57;
    if (v57)
    {
      swift_bridgeObjectRelease(v56);
      uint64_t v65 = v54;
      uint64_t v66 = v53;
      uint64_t v67 = v97;
      goto LABEL_27;
    }
    swift_bridgeObjectRelease(v56);
    uint64_t v49 = v54;
    uint64_t v50 = v53;
    uint64_t v51 = v97;
    goto LABEL_19;
  }
  double v58 = v92;
  uint64_t v59 = v91;
  if (!swift_dynamicCast(v92, &v78, v37, v91, 0))
  {
    swift_bridgeObjectRelease(v105);
    swift_bridgeObjectRelease((_BYTE)v106);
    *(void *)&long long v80 = 0;
    *((void *)&v80 + 1) = 0xE000000000000000;
    _StringGuts.grow(_:)(64);
    v68._countAndFlagsBits = 0xD000000000000020;
    v68._object = "annels" + 0x8000000000000000;
    String.append(_:)(v68);
    _print_unlocked<A, B>(_:_:)(v95, &v80, v37, &type metadata for DefaultStringInterpolation, &protocol witness table for DefaultStringInterpolation);
    v68._countAndFlagsBits = 0xD00000000000001ELL;
    String.append(_:)(v68);
    long long v105 = v80;
    v68._object = (void *)lazy protocol witness table accessor for type MLCreateError and conformance MLCreateError();
    swift_allocError(&type metadata for MLCreateError, v68._object, 0, 0);
    *(_OWORD *)uint64_t v69 = v105;
    *(_OWORD *)(v69 + 16) = 0;
    *(_OWORD *)(v69 + 32) = 0;
    *(unsigned char *)(v69 + 48) = 2;
    swift_willThrow(&type metadata for MLCreateError, v68._object, v69, v70, v71, v72);
    __swift_destroy_boxed_opaque_existential_1Tm(v95);
    return __swift_destroy_boxed_opaque_existential_1Tm(&v78);
  }
  uint64_t v60 = (uint64_t)v94;
  (*(void (**)(uint64_t *, uint64_t *, uint64_t))(v98 + 32))(v94, v58, v59);
  uint64_t v61 = v59;
  char v62 = v105;
  uint64_t v63 = v107;
  specialized _ModelCheckpoint<>.restoreGenericLayer<A, B>(_:optimizer:layerName:checkpointDictionary:)(v60, v103, v99, (void *)v105, v102, type metadata accessor for MLHandActionClassifier.GraphCNNModel, &OBJC_IVAR____TtCV8CreateML22MLHandActionClassifier8GraphCNN_model, (uint64_t (*)(void))specialized _ModelCheckpoint<>.parameterKeyPathLookup.getter, &lazy protocol witness table cache variable for type MLHandActionClassifier.GraphCNNModel and conformance MLHandActionClassifier.GraphCNNModel, (uint64_t)&protocol conformance descriptor for MLHandActionClassifier.GraphCNNModel, (void (*)(uint64_t, uint64_t, uint64_t, uint64_t, void *))specialized SGD.updateOptimizerState(for:shape:using:name:));
  uint64_t v107 = v63;
  if (!v63)
  {
    swift_bridgeObjectRelease(v62);
    uint64_t v49 = v60;
    uint64_t v50 = v61;
    uint64_t v51 = v98;
LABEL_19:
    (*(void (**)(uint64_t, uint64_t))(v51 + 8))(v49, v50);
    goto LABEL_20;
  }
  swift_bridgeObjectRelease(v62);
  uint64_t v65 = v60;
  uint64_t v66 = v61;
  uint64_t v67 = v98;
LABEL_27:
  (*(void (**)(uint64_t, uint64_t))(v67 + 8))(v65, v66);
LABEL_28:
  __swift_destroy_boxed_opaque_existential_1Tm(v95);
  swift_bridgeObjectRelease((_BYTE)v106);
  return __swift_destroy_boxed_opaque_existential_1Tm(&v78);
}

uint64_t MLHandActionClassifier.GraphCNN.deinit()
{
  swift_bridgeObjectRelease(*(void *)(v0 + 16));
  outlined destroy of MLActivityClassifier.ModelParameters(v0 + OBJC_IVAR____TtCV8CreateML22MLHandActionClassifier8GraphCNN_model, type metadata accessor for MLHandActionClassifier.GraphCNNModel);
  outlined destroy of Either<LogisticRegressionClassifier<Float, String>, FullyConnectedNetworkClassifier<Float, String>>(v0 + OBJC_IVAR____TtCV8CreateML22MLHandActionClassifier8GraphCNN_optimizer, &demangling cache variable for type metadata for SGD<MLHandActionClassifier.GraphCNNModel>);
  return v0;
}

uint64_t MLHandActionClassifier.GraphCNN.__deallocating_deinit()
{
  MLHandActionClassifier.GraphCNN.deinit();
  return swift_deallocClassInstance(v0, *(unsigned int *)(*(void *)v0 + 48), *(unsigned __int16 *)(*(void *)v0 + 52));
}

uint64_t ObjC metadata update function for MLHandActionClassifier.GraphCNN()
{
  return type metadata accessor for MLHandActionClassifier.GraphCNN(0);
}

uint64_t type metadata accessor for MLHandActionClassifier.GraphCNN(uint64_t a1)
{
  return type metadata accessor for MLImageClassifier.CustomFeatureExtractor(a1, (uint64_t *)&type metadata singleton initialization cache for MLHandActionClassifier.GraphCNN, (uint64_t)&nominal type descriptor for MLHandActionClassifier.GraphCNN);
}

uint64_t type metadata completion function for MLHandActionClassifier.GraphCNN(uint64_t a1)
{
  v4[0] = (char *)&value witness table for Builtin.BridgeObject + 64;
  v4[1] = (char *)&value witness table for Builtin.Int64 + 64;
  v4[2] = (char *)&value witness table for Builtin.Int64 + 64;
  uint64_t result = type metadata accessor for MLHandActionClassifier.GraphCNNModel(319);
  if (v2 <= 0x3F)
  {
    v4[3] = *(void *)(result - 8) + 64;
    uint64_t result = type metadata accessor for SGD<MLHandActionClassifier.GraphCNNModel>(319);
    if (v3 <= 0x3F)
    {
      v4[4] = *(void *)(result - 8) + 64;
      uint64_t result = swift_updateClassMetadata2(a1, 256, 5, v4, a1 + 80);
      if (!result) {
        return 0;
      }
    }
  }
  return result;
}

uint64_t type metadata accessor for MLHandActionClassifier.GraphCNNModel(uint64_t a1)
{
  return type metadata accessor for MLImageClassifier.CustomFeatureExtractor(a1, (uint64_t *)&type metadata singleton initialization cache for MLHandActionClassifier.GraphCNNModel, (uint64_t)&nominal type descriptor for MLHandActionClassifier.GraphCNNModel);
}

uint64_t type metadata accessor for SGD<MLHandActionClassifier.GraphCNNModel>(uint64_t a1)
{
  uint64_t result = lazy cache variable for type metadata for SGD<MLHandActionClassifier.GraphCNNModel>;
  if (!lazy cache variable for type metadata for SGD<MLHandActionClassifier.GraphCNNModel>)
  {
    uint64_t v2 = type metadata accessor for MLHandActionClassifier.GraphCNNModel(255);
    uint64_t v3 = lazy protocol witness table accessor for type VNImageOption and conformance VNImageOption(&lazy protocol witness table cache variable for type MLHandActionClassifier.GraphCNNModel and conformance MLHandActionClassifier.GraphCNNModel, type metadata accessor for MLHandActionClassifier.GraphCNNModel, (uint64_t)&protocol conformance descriptor for MLHandActionClassifier.GraphCNNModel);
    uint64_t result = type metadata accessor for SGD(a1, v2, v3);
    if (!v4) {
      lazy cache variable for type metadata for SGD<MLHandActionClassifier.GraphCNNModel> = result;
    }
  }
  return result;
}

char *initializeBufferWithCopyOfBuffer for MLHandActionClassifier.GraphCNNModel(char *a1, char *a2, int *a3)
{
  int v4 = *(_DWORD *)(*((void *)a3 - 1) + 80);
  if ((v4 & 0x20000) != 0)
  {
    uint64_t v66 = *(void *)a2;
    *(void *)a1 = *(void *)a2;
    uint64_t v64 = (char *)(v66 + ((v4 + 16) & ~v4));
    swift_retain();
  }
  else
  {
    uint64_t v6 = type metadata accessor for BatchNorm(0);
    uint64_t v81 = *(void (**)(char *, char *, uint64_t))(*(void *)(v6 - 8) + 16);
    uint64_t v80 = v6;
    v81(a1, a2, v6);
    uint64_t v7 = a3[5];
    uint64_t v68 = type metadata accessor for Dense(0);
    uint64_t v69 = *(void (**)(char *, char *, uint64_t))(*(void *)(v68 - 8) + 16);
    v69(&a1[v7], &a2[v7], v68);
    v81(&a1[a3[6]], &a2[a3[6]], v6);
    uint64_t v8 = a3[7];
    uint64_t v79 = type metadata accessor for Dropout(0);
    uint64_t v78 = *(void (**)(char *, char *, uint64_t))(*(void *)(v79 - 8) + 16);
    v78(&a1[v8], &a2[v8], v79);
    uint64_t v9 = a3[8];
    uint64_t v10 = &a1[v9];
    uint64_t v11 = &a2[v9];
    uint64_t v71 = a3;
    uint64_t v12 = type metadata accessor for Conv2D(0);
    uint64_t v13 = *(void (**)(char *, char *, uint64_t))(*(void *)(v12 - 8) + 16);
    v13(v10, v11, v12);
    uint64_t v14 = v13;
    unsigned int v74 = v13;
    uint64_t v15 = type metadata accessor for MLHandActionClassifier.InvertedResidual(0);
    uint64_t v16 = *(int *)(v15 + 20);
    v10[v16 + 48] = v11[v16 + 48];
    long long v17 = *(_OWORD *)&v11[v16];
    long long v18 = *(_OWORD *)&v11[v16 + 16];
    *(_OWORD *)&v10[v16 + 32] = *(_OWORD *)&v11[v16 + 32];
    *(_OWORD *)&v10[v16 + 16] = v18;
    *(_OWORD *)&v10[v16] = v17;
    uint64_t v19 = v15;
    uint64_t v75 = (int *)v15;
    v14(&v10[*(int *)(v15 + 24)], &v11[*(int *)(v15 + 24)], v12);
    v81(&v10[*(int *)(v19 + 28)], &v11[*(int *)(v19 + 28)], v80);
    v78(&v10[*(int *)(v19 + 32)], &v11[*(int *)(v19 + 32)], v79);
    uint64_t v73 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for MLHandActionClassifier.DownsampledResidualLayer<MLHandActionClassifier.InvertedResidual>);
    v74(&v10[*(int *)(v73 + 36)], &v11[*(int *)(v73 + 36)], v12);
    uint64_t v20 = v10;
    long long v76 = v10;
    uint64_t v77 = v11;
    v81(&v10[*(int *)(v73 + 40)], &v11[*(int *)(v73 + 40)], v80);
    uint64_t v72 = (int *)type metadata accessor for MLHandActionClassifier.SingleStreamBlock(0);
    uint64_t v21 = v72[5];
    int64_t v22 = &v20[v21];
    unsigned int v23 = &v77[v21];
    v74(v22, v23, v12);
    uint64_t v24 = v75;
    uint64_t v25 = v75[5];
    v22[v25 + 48] = v23[v25 + 48];
    long long v26 = *(_OWORD *)&v23[v25];
    long long v27 = *(_OWORD *)&v23[v25 + 16];
    *(_OWORD *)&v22[v25 + 32] = *(_OWORD *)&v23[v25 + 32];
    *(_OWORD *)&v22[v25 + 16] = v27;
    *(_OWORD *)&v22[v25] = v26;
    v74(&v22[v75[6]], &v23[v75[6]], v12);
    v81(&v22[v24[7]], &v23[v24[7]], v80);
    v78(&v22[v24[8]], &v23[v24[8]], v79);
    v74(&v22[*(int *)(v73 + 36)], &v23[*(int *)(v73 + 36)], v12);
    v81(&v22[*(int *)(v73 + 40)], &v23[*(int *)(v73 + 40)], v80);
    uint64_t v28 = v72[6];
    uint64_t v29 = &v76[v28];
    uint64_t v30 = &v77[v28];
    v74(v29, v30, v12);
    uint64_t v31 = v75;
    uint64_t v32 = v75[5];
    v29[v32 + 48] = v30[v32 + 48];
    long long v33 = *(_OWORD *)&v30[v32];
    long long v34 = *(_OWORD *)&v30[v32 + 16];
    *(_OWORD *)&v29[v32 + 32] = *(_OWORD *)&v30[v32 + 32];
    *(_OWORD *)&v29[v32 + 16] = v34;
    *(_OWORD *)&v29[v32] = v33;
    v74(&v29[v75[6]], &v30[v75[6]], v12);
    v81(&v29[v31[7]], &v30[v31[7]], v80);
    v78(&v29[v31[8]], &v30[v31[8]], v79);
    v74(&v29[*(int *)(v73 + 36)], &v30[*(int *)(v73 + 36)], v12);
    v81(&v29[*(int *)(v73 + 40)], &v30[*(int *)(v73 + 40)], v80);
    uint64_t v35 = v72[7];
    Swift::String v36 = &v76[v35];
    uint64_t v37 = &v77[v35];
    v74(v36, v37, v12);
    Swift::String v38 = v75;
    uint64_t v39 = v75[5];
    v36[v39 + 48] = v37[v39 + 48];
    long long v40 = *(_OWORD *)&v37[v39];
    long long v41 = *(_OWORD *)&v37[v39 + 16];
    *(_OWORD *)&v36[v39 + 32] = *(_OWORD *)&v37[v39 + 32];
    *(_OWORD *)&v36[v39 + 16] = v41;
    *(_OWORD *)&v36[v39] = v40;
    v74(&v36[v75[6]], &v37[v75[6]], v12);
    v81(&v36[v38[7]], &v37[v38[7]], v80);
    v78(&v36[v38[8]], &v37[v38[8]], v79);
    v74(&v36[*(int *)(v73 + 36)], &v37[*(int *)(v73 + 36)], v12);
    v81(&v36[*(int *)(v73 + 40)], &v37[*(int *)(v73 + 40)], v80);
    uint64_t v42 = v72[8];
    uint64_t v43 = &v76[v42];
    uint64_t v44 = &v77[v42];
    v74(v43, v44, v12);
    uint64_t v45 = v75;
    uint64_t v46 = v75[5];
    v43[v46 + 48] = v44[v46 + 48];
    long long v47 = *(_OWORD *)&v44[v46];
    long long v48 = *(_OWORD *)&v44[v46 + 16];
    *(_OWORD *)&v43[v46 + 32] = *(_OWORD *)&v44[v46 + 32];
    *(_OWORD *)&v43[v46 + 16] = v48;
    *(_OWORD *)&v43[v46] = v47;
    v74(&v43[v75[6]], &v44[v75[6]], v12);
    v81(&v43[v45[7]], &v44[v45[7]], v80);
    v78(&v43[v45[8]], &v44[v45[8]], v79);
    uint64_t v49 = v72[9];
    uint64_t v50 = &v76[v49];
    uint64_t v51 = &v77[v49];
    v74(v50, v51, v12);
    uint64_t v52 = v75[5];
    v50[v52 + 48] = v51[v52 + 48];
    long long v53 = *(_OWORD *)&v51[v52];
    long long v54 = *(_OWORD *)&v51[v52 + 16];
    *(_OWORD *)&v50[v52 + 32] = *(_OWORD *)&v51[v52 + 32];
    *(_OWORD *)&v50[v52 + 16] = v54;
    *(_OWORD *)&v50[v52] = v53;
    v74(&v50[v45[6]], &v51[v45[6]], v12);
    v81(&v50[v75[7]], &v51[v75[7]], v80);
    v78(&v50[v75[8]], &v51[v75[8]], v79);
    v74(&v50[*(int *)(v73 + 36)], &v51[*(int *)(v73 + 36)], v12);
    v81(&v50[*(int *)(v73 + 40)], &v51[*(int *)(v73 + 40)], v80);
    uint64_t v55 = v72[10];
    char v56 = &v76[v55];
    uint64_t v57 = &v77[v55];
    v74(v56, v57, v12);
    uint64_t v58 = v75[5];
    v56[v58 + 48] = v57[v58 + 48];
    long long v59 = *(_OWORD *)&v57[v58];
    long long v60 = *(_OWORD *)&v57[v58 + 16];
    *(_OWORD *)&v56[v58 + 32] = *(_OWORD *)&v57[v58 + 32];
    *(_OWORD *)&v56[v58 + 16] = v60;
    *(_OWORD *)&v56[v58] = v59;
    uint64_t v61 = v75;
    v74(&v56[v75[6]], &v57[v75[6]], v12);
    v81(&v56[v61[7]], &v57[v61[7]], v80);
    v78(&v56[v61[8]], &v57[v61[8]], v79);
    v74(&v56[*(int *)(v73 + 36)], &v57[*(int *)(v73 + 36)], v12);
    uint64_t v62 = *(int *)(v73 + 40);
    uint64_t v63 = &v57[v62];
    uint64_t v64 = a1;
    v81(&v56[v62], v63, v80);
    uint64_t v65 = type metadata accessor for MLHandActionClassifier.Torso(0);
    v69(&v76[*(int *)(v65 + 24)], &v77[*(int *)(v65 + 24)], v68);
    a1[v71[9]] = a2[v71[9]];
    *(void *)&a1[v71[10]] = *(void *)&a2[v71[10]];
  }
  return v64;
}

uint64_t type metadata accessor for MLHandActionClassifier.InvertedResidual(uint64_t a1)
{
  return type metadata accessor for MLImageClassifier.CustomFeatureExtractor(a1, (uint64_t *)&type metadata singleton initialization cache for MLHandActionClassifier.InvertedResidual, (uint64_t)&nominal type descriptor for MLHandActionClassifier.InvertedResidual);
}

uint64_t type metadata accessor for MLHandActionClassifier.SingleStreamBlock(uint64_t a1)
{
  return type metadata accessor for MLImageClassifier.CustomFeatureExtractor(a1, (uint64_t *)&type metadata singleton initialization cache for MLHandActionClassifier.SingleStreamBlock, (uint64_t)&nominal type descriptor for MLHandActionClassifier.SingleStreamBlock);
}

uint64_t type metadata accessor for MLHandActionClassifier.Torso(uint64_t a1)
{
  return type metadata accessor for MLImageClassifier.CustomFeatureExtractor(a1, (uint64_t *)&type metadata singleton initialization cache for MLHandActionClassifier.Torso, (uint64_t)&nominal type descriptor for MLHandActionClassifier.Torso);
}

uint64_t destroy for MLHandActionClassifier.GraphCNNModel(uint64_t a1, int *a2)
{
  uint64_t v2 = type metadata accessor for BatchNorm(0);
  uint64_t v3 = *(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8);
  v3(a1, v2);
  int v4 = v3;
  long long v27 = v3;
  uint64_t v5 = a1 + a2[5];
  uint64_t v20 = type metadata accessor for Dense(0);
  uint64_t v21 = *(void (**)(uint64_t, uint64_t))(*(void *)(v20 - 8) + 8);
  v21(v5, v20);
  v4(a1 + a2[6], v2);
  uint64_t v6 = a1 + a2[7];
  uint64_t v26 = type metadata accessor for Dropout(0);
  uint64_t v25 = *(void (**)(uint64_t, uint64_t))(*(void *)(v26 - 8) + 8);
  v25(v6, v26);
  uint64_t v7 = a1 + a2[8];
  uint64_t v8 = type metadata accessor for Conv2D(0);
  uint64_t v9 = *(void (**)(uint64_t, uint64_t))(*(void *)(v8 - 8) + 8);
  v9(v7, v8);
  uint64_t v10 = v9;
  uint64_t v28 = v9;
  uint64_t v11 = (int *)type metadata accessor for MLHandActionClassifier.InvertedResidual(0);
  v10(v7 + v11[6], v8);
  v27(v7 + v11[7], v2);
  v25(v7 + v11[8], v26);
  uint64_t v24 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for MLHandActionClassifier.DownsampledResidualLayer<MLHandActionClassifier.InvertedResidual>);
  v28(v7 + *(int *)(v24 + 36), v8);
  uint64_t v23 = v7;
  v27(v7 + *(int *)(v24 + 40), v2);
  int64_t v22 = (int *)type metadata accessor for MLHandActionClassifier.SingleStreamBlock(0);
  uint64_t v12 = v7 + v22[5];
  v28(v12, v8);
  v28(v12 + v11[6], v8);
  v27(v12 + v11[7], v2);
  v25(v12 + v11[8], v26);
  v28(v12 + *(int *)(v24 + 36), v8);
  v27(v12 + *(int *)(v24 + 40), v2);
  uint64_t v13 = v7 + v22[6];
  v28(v13, v8);
  v28(v13 + v11[6], v8);
  v27(v13 + v11[7], v2);
  v25(v13 + v11[8], v26);
  v28(v13 + *(int *)(v24 + 36), v8);
  v27(v13 + *(int *)(v24 + 40), v2);
  uint64_t v14 = v23 + v22[7];
  v28(v14, v8);
  v28(v14 + v11[6], v8);
  v27(v14 + v11[7], v2);
  v25(v14 + v11[8], v26);
  v28(v14 + *(int *)(v24 + 36), v8);
  v27(v14 + *(int *)(v24 + 40), v2);
  uint64_t v15 = v23 + v22[8];
  v28(v15, v8);
  v28(v15 + v11[6], v8);
  v27(v15 + v11[7], v2);
  v25(v15 + v11[8], v26);
  uint64_t v16 = v23 + v22[9];
  v28(v16, v8);
  v28(v16 + v11[6], v8);
  v27(v16 + v11[7], v2);
  v25(v16 + v11[8], v26);
  v28(v16 + *(int *)(v24 + 36), v8);
  v27(v16 + *(int *)(v24 + 40), v2);
  uint64_t v17 = v23 + v22[10];
  v28(v17, v8);
  v28(v17 + v11[6], v8);
  v27(v17 + v11[7], v2);
  v25(v17 + v11[8], v26);
  v28(v17 + *(int *)(v24 + 36), v8);
  v27(v17 + *(int *)(v24 + 40), v2);
  uint64_t v18 = type metadata accessor for MLHandActionClassifier.Torso(0);
  return ((uint64_t (*)(uint64_t, uint64_t))v21)(v23 + *(int *)(v18 + 24), v20);
}

uint64_t initializeWithCopy for MLHandActionClassifier.GraphCNNModel(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v72 = type metadata accessor for BatchNorm(0);
  uint64_t v71 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v72 - 8) + 16);
  v71(a1, a2, v72);
  uint64_t v4 = a3[5];
  uint64_t v60 = type metadata accessor for Dense(0);
  uint64_t v61 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v60 - 8) + 16);
  v61(a1 + v4, a2 + v4, v60);
  v71(a1 + a3[6], a2 + a3[6], v72);
  uint64_t v5 = a3[7];
  uint64_t v62 = a3;
  uint64_t v69 = type metadata accessor for Dropout(0);
  uint64_t v70 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v69 - 8) + 16);
  v70(a1 + v5, a2 + v5, v69);
  uint64_t v6 = a3[8];
  uint64_t v7 = v6 + a1;
  uint64_t v8 = a2 + v6;
  uint64_t v9 = type metadata accessor for Conv2D(0);
  uint64_t v10 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v9 - 8) + 16);
  v10(v7, v8, v9);
  uint64_t v63 = v10;
  uint64_t v11 = type metadata accessor for MLHandActionClassifier.InvertedResidual(0);
  uint64_t v12 = *(int *)(v11 + 20);
  *(unsigned char *)(v12 + v7 + 48) = *(unsigned char *)(v12 + v8 + 48);
  long long v13 = *(_OWORD *)(v12 + v8);
  long long v14 = *(_OWORD *)(v12 + v8 + 16);
  *(_OWORD *)(v12 + v7 + 32) = *(_OWORD *)(v12 + v8 + 32);
  *(_OWORD *)(v12 + v7 + 16) = v14;
  *(_OWORD *)(v12 + v7) = v13;
  uint64_t v15 = (int *)v11;
  v10(v7 + *(int *)(v11 + 24), v8 + *(int *)(v11 + 24), v9);
  uint64_t v66 = v15;
  v71(v7 + v15[7], v8 + v15[7], v72);
  v70(v7 + v15[8], v8 + v15[8], v69);
  uint64_t v65 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for MLHandActionClassifier.DownsampledResidualLayer<MLHandActionClassifier.InvertedResidual>);
  v10(v7 + *(int *)(v65 + 36), v8 + *(int *)(v65 + 36), v9);
  uint64_t v67 = v7;
  uint64_t v68 = v8;
  v71(v7 + *(int *)(v65 + 40), v8 + *(int *)(v65 + 40), v72);
  uint64_t v64 = (int *)type metadata accessor for MLHandActionClassifier.SingleStreamBlock(0);
  uint64_t v16 = v64[5];
  uint64_t v17 = v16 + v7;
  uint64_t v18 = v8 + v16;
  v10(v17, v18, v9);
  uint64_t v19 = v66[5];
  *(unsigned char *)(v19 + v17 + 48) = *(unsigned char *)(v19 + v18 + 48);
  long long v20 = *(_OWORD *)(v19 + v18);
  long long v21 = *(_OWORD *)(v19 + v18 + 16);
  *(_OWORD *)(v19 + v17 + 32) = *(_OWORD *)(v19 + v18 + 32);
  *(_OWORD *)(v19 + v17 + 16) = v21;
  *(_OWORD *)(v19 + v17) = v20;
  int64_t v22 = v66;
  v10(v17 + v66[6], v18 + v66[6], v9);
  v71(v17 + v22[7], v18 + v22[7], v72);
  v70(v17 + v22[8], v18 + v22[8], v69);
  v10(v17 + *(int *)(v65 + 36), v18 + *(int *)(v65 + 36), v9);
  v71(*(int *)(v65 + 40) + v17, *(int *)(v65 + 40) + v18, v72);
  uint64_t v23 = v64[6];
  uint64_t v24 = v67 + v23;
  uint64_t v25 = v68 + v23;
  uint64_t v26 = v10;
  v10(v24, v25, v9);
  long long v27 = v66;
  uint64_t v28 = v66[5];
  *(unsigned char *)(v28 + v24 + 48) = *(unsigned char *)(v28 + v25 + 48);
  long long v29 = *(_OWORD *)(v28 + v25);
  long long v30 = *(_OWORD *)(v28 + v25 + 16);
  *(_OWORD *)(v28 + v24 + 32) = *(_OWORD *)(v28 + v25 + 32);
  *(_OWORD *)(v28 + v24 + 16) = v30;
  *(_OWORD *)(v28 + v24) = v29;
  v26(v24 + v66[6], v25 + v66[6], v9);
  v71(v24 + v27[7], v25 + v27[7], v72);
  v70(v24 + v27[8], v25 + v27[8], v69);
  v63(v24 + *(int *)(v65 + 36), v25 + *(int *)(v65 + 36), v9);
  v71(*(int *)(v65 + 40) + v24, *(int *)(v65 + 40) + v25, v72);
  uint64_t v31 = v64[7];
  uint64_t v32 = v67 + v31;
  uint64_t v33 = v68 + v31;
  v63(v32, v33, v9);
  long long v34 = v66;
  uint64_t v35 = v66[5];
  *(unsigned char *)(v35 + v32 + 48) = *(unsigned char *)(v35 + v33 + 48);
  long long v36 = *(_OWORD *)(v35 + v33);
  long long v37 = *(_OWORD *)(v35 + v33 + 16);
  *(_OWORD *)(v35 + v32 + 32) = *(_OWORD *)(v35 + v33 + 32);
  *(_OWORD *)(v35 + v32 + 16) = v37;
  *(_OWORD *)(v35 + v32) = v36;
  v63(v32 + v66[6], v33 + v66[6], v9);
  v71(v32 + v34[7], v33 + v34[7], v72);
  v70(v32 + v34[8], v33 + v34[8], v69);
  v63(v32 + *(int *)(v65 + 36), v33 + *(int *)(v65 + 36), v9);
  v71(*(int *)(v65 + 40) + v32, *(int *)(v65 + 40) + v33, v72);
  uint64_t v38 = v64[8];
  uint64_t v39 = v67 + v38;
  uint64_t v40 = v68 + v38;
  v63(v39, v40, v9);
  long long v41 = v66;
  uint64_t v42 = v66[5];
  *(unsigned char *)(v42 + v39 + 48) = *(unsigned char *)(v42 + v40 + 48);
  long long v43 = *(_OWORD *)(v42 + v40);
  long long v44 = *(_OWORD *)(v42 + v40 + 16);
  *(_OWORD *)(v42 + v39 + 32) = *(_OWORD *)(v42 + v40 + 32);
  *(_OWORD *)(v42 + v39 + 16) = v44;
  *(_OWORD *)(v42 + v39) = v43;
  v63(v39 + v66[6], v40 + v66[6], v9);
  v71(v39 + v41[7], v40 + v41[7], v72);
  v70(v41[8] + v39, v41[8] + v40, v69);
  uint64_t v45 = v64[9];
  uint64_t v46 = v67 + v45;
  uint64_t v47 = v68 + v45;
  v63(v46, v47, v9);
  uint64_t v48 = v66[5];
  *(unsigned char *)(v48 + v46 + 48) = *(unsigned char *)(v48 + v47 + 48);
  long long v49 = *(_OWORD *)(v48 + v47);
  long long v50 = *(_OWORD *)(v48 + v47 + 16);
  *(_OWORD *)(v48 + v46 + 32) = *(_OWORD *)(v48 + v47 + 32);
  *(_OWORD *)(v48 + v46 + 16) = v50;
  *(_OWORD *)(v48 + v46) = v49;
  v63(v46 + v41[6], v47 + v41[6], v9);
  v71(v46 + v66[7], v47 + v66[7], v72);
  v70(v46 + v66[8], v47 + v66[8], v69);
  v63(v46 + *(int *)(v65 + 36), v47 + *(int *)(v65 + 36), v9);
  v71(*(int *)(v65 + 40) + v46, *(int *)(v65 + 40) + v47, v72);
  uint64_t v51 = v64[10];
  uint64_t v52 = v67 + v51;
  uint64_t v53 = v68 + v51;
  v63(v52, v53, v9);
  long long v54 = v66;
  uint64_t v55 = v66[5];
  *(unsigned char *)(v55 + v52 + 48) = *(unsigned char *)(v55 + v53 + 48);
  long long v56 = *(_OWORD *)(v55 + v53);
  long long v57 = *(_OWORD *)(v55 + v53 + 16);
  *(_OWORD *)(v55 + v52 + 32) = *(_OWORD *)(v55 + v53 + 32);
  *(_OWORD *)(v55 + v52 + 16) = v57;
  *(_OWORD *)(v55 + v52) = v56;
  v63(v52 + v66[6], v53 + v66[6], v9);
  v71(v52 + v54[7], v53 + v54[7], v72);
  v70(v52 + v54[8], v53 + v54[8], v69);
  v63(v52 + *(int *)(v65 + 36), v53 + *(int *)(v65 + 36), v9);
  v71(*(int *)(v65 + 40) + v52, *(int *)(v65 + 40) + v53, v72);
  uint64_t v58 = type metadata accessor for MLHandActionClassifier.Torso(0);
  v61(*(int *)(v58 + 24) + v67, *(int *)(v58 + 24) + v68, v60);
  uint64_t result = a1;
  *(unsigned char *)(a1 + v62[9]) = *(unsigned char *)(a2 + v62[9]);
  *(void *)(a1 + v62[10]) = *(void *)(a2 + v62[10]);
  return result;
}

uint64_t assignWithCopy for MLHandActionClassifier.GraphCNNModel(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v56 = type metadata accessor for BatchNorm(0);
  uint64_t v53 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v56 - 8) + 24);
  v53(a1, a2, v56);
  uint64_t v4 = a3[5];
  uint64_t v44 = type metadata accessor for Dense(0);
  uint64_t v45 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v44 - 8) + 24);
  v45(a1 + v4, a2 + v4, v44);
  v53(a1 + a3[6], a2 + a3[6], v56);
  uint64_t v5 = a3[7];
  uint64_t v46 = a3;
  uint64_t v51 = type metadata accessor for Dropout(0);
  uint64_t v52 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v51 - 8) + 24);
  v52(a1 + v5, a2 + v5, v51);
  uint64_t v6 = a3[8];
  uint64_t v7 = v6 + a1;
  uint64_t v8 = a2 + v6;
  uint64_t v9 = type metadata accessor for Conv2D(0);
  uint64_t v10 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v9 - 8) + 24);
  uint64_t v55 = v9;
  v10(v7, v8, v9);
  uint64_t v11 = v10;
  long long v54 = v10;
  uint64_t v12 = type metadata accessor for MLHandActionClassifier.InvertedResidual(0);
  uint64_t v13 = *(int *)(v12 + 20);
  uint64_t v14 = v12;
  long long v49 = (int *)v12;
  *(void *)(v13 + v7) = *(void *)(v13 + v8);
  *(void *)(v13 + v7 + 8) = *(void *)(v13 + v8 + 8);
  *(void *)(v13 + v7 + 16) = *(void *)(v13 + v8 + 16);
  *(void *)(v13 + v7 + 24) = *(void *)(v13 + v8 + 24);
  *(void *)(v13 + v7 + 32) = *(void *)(v13 + v8 + 32);
  *(void *)(v13 + v7 + 40) = *(void *)(v13 + v8 + 40);
  *(unsigned char *)(v13 + v7 + 48) = *(unsigned char *)(v13 + v8 + 48);
  v11(v7 + *(int *)(v12 + 24), v8 + *(int *)(v12 + 24), v9);
  v53(v7 + *(int *)(v14 + 28), v8 + *(int *)(v14 + 28), v56);
  v52(*(int *)(v14 + 32) + v7, v8 + *(int *)(v14 + 32), v51);
  uint64_t v48 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for MLHandActionClassifier.DownsampledResidualLayer<MLHandActionClassifier.InvertedResidual>);
  v54(*(int *)(v48 + 36) + v7, v8 + *(int *)(v48 + 36), v9);
  uint64_t v50 = v7;
  v53(*(int *)(v48 + 40) + v7, v8 + *(int *)(v48 + 40), v56);
  uint64_t v47 = (int *)type metadata accessor for MLHandActionClassifier.SingleStreamBlock(0);
  uint64_t v15 = v47[5];
  uint64_t v16 = v15 + v7;
  uint64_t v17 = v8 + v15;
  v54(v16, v17, v55);
  uint64_t v18 = v49[5];
  *(void *)(v18 + v16) = *(void *)(v18 + v17);
  *(void *)(v18 + v16 + 8) = *(void *)(v18 + v17 + 8);
  *(void *)(v18 + v16 + 16) = *(void *)(v18 + v17 + 16);
  *(void *)(v18 + v16 + 24) = *(void *)(v18 + v17 + 24);
  *(void *)(v18 + v16 + 32) = *(void *)(v18 + v17 + 32);
  *(void *)(v18 + v16 + 40) = *(void *)(v18 + v17 + 40);
  *(unsigned char *)(v18 + v16 + 48) = *(unsigned char *)(v18 + v17 + 48);
  v54(v16 + v49[6], v17 + v49[6], v55);
  v53(v16 + v49[7], v17 + v49[7], v56);
  v52(v16 + v49[8], v17 + v49[8], v51);
  v54(v16 + *(int *)(v48 + 36), v17 + *(int *)(v48 + 36), v55);
  v53(*(int *)(v48 + 40) + v16, *(int *)(v48 + 40) + v17, v56);
  uint64_t v19 = v47[6];
  uint64_t v20 = v50 + v19;
  uint64_t v21 = v8 + v19;
  v54(v20, v21, v55);
  int64_t v22 = v49;
  uint64_t v23 = v49[5];
  *(void *)(v23 + v20) = *(void *)(v23 + v21);
  *(void *)(v23 + v20 + 8) = *(void *)(v23 + v21 + 8);
  *(void *)(v23 + v20 + 16) = *(void *)(v23 + v21 + 16);
  *(void *)(v23 + v20 + 24) = *(void *)(v23 + v21 + 24);
  *(void *)(v23 + v20 + 32) = *(void *)(v23 + v21 + 32);
  *(void *)(v23 + v20 + 40) = *(void *)(v23 + v21 + 40);
  *(unsigned char *)(v23 + v20 + 48) = *(unsigned char *)(v23 + v21 + 48);
  v54(v20 + v49[6], v21 + v49[6], v55);
  v53(v20 + v22[7], v21 + v22[7], v56);
  v52(v20 + v22[8], v21 + v22[8], v51);
  v54(v20 + *(int *)(v48 + 36), v21 + *(int *)(v48 + 36), v55);
  v53(*(int *)(v48 + 40) + v20, *(int *)(v48 + 40) + v21, v56);
  uint64_t v24 = v47[7];
  uint64_t v25 = v50 + v24;
  uint64_t v26 = v8 + v24;
  v54(v25, v26, v55);
  uint64_t v27 = v49[5];
  *(void *)(v27 + v25) = *(void *)(v27 + v26);
  *(void *)(v27 + v25 + 8) = *(void *)(v27 + v26 + 8);
  *(void *)(v27 + v25 + 16) = *(void *)(v27 + v26 + 16);
  *(void *)(v27 + v25 + 24) = *(void *)(v27 + v26 + 24);
  *(void *)(v27 + v25 + 32) = *(void *)(v27 + v26 + 32);
  *(void *)(v27 + v25 + 40) = *(void *)(v27 + v26 + 40);
  *(unsigned char *)(v27 + v25 + 48) = *(unsigned char *)(v27 + v26 + 48);
  v54(v25 + v49[6], v26 + v49[6], v55);
  v53(v25 + v49[7], v26 + v49[7], v56);
  v52(v25 + v49[8], v26 + v49[8], v51);
  v54(v25 + *(int *)(v48 + 36), v26 + *(int *)(v48 + 36), v55);
  v53(*(int *)(v48 + 40) + v25, *(int *)(v48 + 40) + v26, v56);
  uint64_t v28 = v47[8];
  uint64_t v29 = v50 + v28;
  uint64_t v30 = v8 + v28;
  v54(v29, v30, v55);
  uint64_t v31 = v49;
  uint64_t v32 = v49[5];
  *(void *)(v32 + v29) = *(void *)(v32 + v30);
  *(void *)(v32 + v29 + 8) = *(void *)(v32 + v30 + 8);
  *(void *)(v32 + v29 + 16) = *(void *)(v32 + v30 + 16);
  *(void *)(v32 + v29 + 24) = *(void *)(v32 + v30 + 24);
  *(void *)(v32 + v29 + 32) = *(void *)(v32 + v30 + 32);
  *(void *)(v32 + v29 + 40) = *(void *)(v32 + v30 + 40);
  *(unsigned char *)(v32 + v29 + 48) = *(unsigned char *)(v32 + v30 + 48);
  v54(v29 + v49[6], v30 + v49[6], v55);
  v53(v29 + v31[7], v30 + v31[7], v56);
  v52(v31[8] + v29, v31[8] + v30, v51);
  uint64_t v33 = v47[9];
  uint64_t v34 = v50 + v33;
  uint64_t v35 = v8 + v33;
  v54(v34, v35, v55);
  uint64_t v36 = v49[5];
  *(void *)(v36 + v34) = *(void *)(v36 + v35);
  *(void *)(v36 + v34 + 8) = *(void *)(v36 + v35 + 8);
  *(void *)(v36 + v34 + 16) = *(void *)(v36 + v35 + 16);
  *(void *)(v36 + v34 + 24) = *(void *)(v36 + v35 + 24);
  *(void *)(v36 + v34 + 32) = *(void *)(v36 + v35 + 32);
  *(void *)(v36 + v34 + 40) = *(void *)(v36 + v35 + 40);
  *(unsigned char *)(v36 + v34 + 48) = *(unsigned char *)(v36 + v35 + 48);
  v54(v34 + v31[6], v35 + v31[6], v55);
  v53(v34 + v49[7], v35 + v49[7], v56);
  v52(v34 + v49[8], v35 + v49[8], v51);
  v54(v34 + *(int *)(v48 + 36), v35 + *(int *)(v48 + 36), v55);
  v53(*(int *)(v48 + 40) + v34, *(int *)(v48 + 40) + v35, v56);
  uint64_t v37 = v47[10];
  uint64_t v38 = v50 + v37;
  uint64_t v39 = v8 + v37;
  v54(v38, v39, v55);
  uint64_t v40 = v49[5];
  *(void *)(v40 + v38) = *(void *)(v40 + v39);
  *(void *)(v40 + v38 + 8) = *(void *)(v40 + v39 + 8);
  *(void *)(v40 + v38 + 16) = *(void *)(v40 + v39 + 16);
  *(void *)(v40 + v38 + 24) = *(void *)(v40 + v39 + 24);
  *(void *)(v40 + v38 + 32) = *(void *)(v40 + v39 + 32);
  *(void *)(v40 + v38 + 40) = *(void *)(v40 + v39 + 40);
  *(unsigned char *)(v40 + v38 + 48) = *(unsigned char *)(v40 + v39 + 48);
  long long v41 = v49;
  v54(v38 + v49[6], v39 + v49[6], v55);
  v53(v38 + v41[7], v39 + v41[7], v56);
  v52(v38 + v41[8], v39 + v41[8], v51);
  v54(v38 + *(int *)(v48 + 36), v39 + *(int *)(v48 + 36), v55);
  v53(*(int *)(v48 + 40) + v38, *(int *)(v48 + 40) + v39, v56);
  uint64_t v42 = type metadata accessor for MLHandActionClassifier.Torso(0);
  v45(*(int *)(v42 + 24) + v50, *(int *)(v42 + 24) + v8, v44);
  uint64_t result = a1;
  *(unsigned char *)(a1 + v46[9]) = *(unsigned char *)(a2 + v46[9]);
  *(void *)(a1 + v46[10]) = *(void *)(a2 + v46[10]);
  return result;
}

uint64_t initializeWithTake for MLHandActionClassifier.GraphCNNModel(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v72 = type metadata accessor for BatchNorm(0);
  uint64_t v71 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v72 - 8) + 32);
  v71(a1, a2, v72);
  uint64_t v4 = a3[5];
  uint64_t v60 = type metadata accessor for Dense(0);
  uint64_t v61 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v60 - 8) + 32);
  v61(a1 + v4, a2 + v4, v60);
  v71(a1 + a3[6], a2 + a3[6], v72);
  uint64_t v5 = a3[7];
  uint64_t v62 = a3;
  uint64_t v69 = type metadata accessor for Dropout(0);
  uint64_t v70 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v69 - 8) + 32);
  v70(a1 + v5, a2 + v5, v69);
  uint64_t v6 = a3[8];
  uint64_t v7 = v6 + a1;
  uint64_t v8 = a2 + v6;
  uint64_t v9 = type metadata accessor for Conv2D(0);
  uint64_t v10 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v9 - 8) + 32);
  v10(v7, v8, v9);
  uint64_t v63 = v10;
  uint64_t v11 = type metadata accessor for MLHandActionClassifier.InvertedResidual(0);
  uint64_t v12 = *(int *)(v11 + 20);
  *(unsigned char *)(v12 + v7 + 48) = *(unsigned char *)(v12 + v8 + 48);
  long long v13 = *(_OWORD *)(v12 + v8);
  long long v14 = *(_OWORD *)(v12 + v8 + 16);
  *(_OWORD *)(v12 + v7 + 32) = *(_OWORD *)(v12 + v8 + 32);
  *(_OWORD *)(v12 + v7 + 16) = v14;
  *(_OWORD *)(v12 + v7) = v13;
  uint64_t v15 = (int *)v11;
  v10(v7 + *(int *)(v11 + 24), v8 + *(int *)(v11 + 24), v9);
  uint64_t v66 = v15;
  v71(v7 + v15[7], v8 + v15[7], v72);
  v70(v7 + v15[8], v8 + v15[8], v69);
  uint64_t v65 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for MLHandActionClassifier.DownsampledResidualLayer<MLHandActionClassifier.InvertedResidual>);
  v10(v7 + *(int *)(v65 + 36), v8 + *(int *)(v65 + 36), v9);
  uint64_t v67 = v7;
  uint64_t v68 = v8;
  v71(v7 + *(int *)(v65 + 40), v8 + *(int *)(v65 + 40), v72);
  uint64_t v64 = (int *)type metadata accessor for MLHandActionClassifier.SingleStreamBlock(0);
  uint64_t v16 = v64[5];
  uint64_t v17 = v16 + v7;
  uint64_t v18 = v8 + v16;
  v10(v17, v18, v9);
  uint64_t v19 = v66[5];
  *(unsigned char *)(v19 + v17 + 48) = *(unsigned char *)(v19 + v18 + 48);
  long long v20 = *(_OWORD *)(v19 + v18);
  long long v21 = *(_OWORD *)(v19 + v18 + 16);
  *(_OWORD *)(v19 + v17 + 32) = *(_OWORD *)(v19 + v18 + 32);
  *(_OWORD *)(v19 + v17 + 16) = v21;
  *(_OWORD *)(v19 + v17) = v20;
  int64_t v22 = v66;
  v10(v17 + v66[6], v18 + v66[6], v9);
  v71(v17 + v22[7], v18 + v22[7], v72);
  v70(v17 + v22[8], v18 + v22[8], v69);
  v10(v17 + *(int *)(v65 + 36), v18 + *(int *)(v65 + 36), v9);
  v71(*(int *)(v65 + 40) + v17, *(int *)(v65 + 40) + v18, v72);
  uint64_t v23 = v64[6];
  uint64_t v24 = v67 + v23;
  uint64_t v25 = v68 + v23;
  uint64_t v26 = v10;
  v10(v24, v25, v9);
  uint64_t v27 = v66;
  uint64_t v28 = v66[5];
  *(unsigned char *)(v28 + v24 + 48) = *(unsigned char *)(v28 + v25 + 48);
  long long v29 = *(_OWORD *)(v28 + v25);
  long long v30 = *(_OWORD *)(v28 + v25 + 16);
  *(_OWORD *)(v28 + v24 + 32) = *(_OWORD *)(v28 + v25 + 32);
  *(_OWORD *)(v28 + v24 + 16) = v30;
  *(_OWORD *)(v28 + v24) = v29;
  v26(v24 + v66[6], v25 + v66[6], v9);
  v71(v24 + v27[7], v25 + v27[7], v72);
  v70(v24 + v27[8], v25 + v27[8], v69);
  v63(v24 + *(int *)(v65 + 36), v25 + *(int *)(v65 + 36), v9);
  v71(*(int *)(v65 + 40) + v24, *(int *)(v65 + 40) + v25, v72);
  uint64_t v31 = v64[7];
  uint64_t v32 = v67 + v31;
  uint64_t v33 = v68 + v31;
  v63(v32, v33, v9);
  uint64_t v34 = v66;
  uint64_t v35 = v66[5];
  *(unsigned char *)(v35 + v32 + 48) = *(unsigned char *)(v35 + v33 + 48);
  long long v36 = *(_OWORD *)(v35 + v33);
  long long v37 = *(_OWORD *)(v35 + v33 + 16);
  *(_OWORD *)(v35 + v32 + 32) = *(_OWORD *)(v35 + v33 + 32);
  *(_OWORD *)(v35 + v32 + 16) = v37;
  *(_OWORD *)(v35 + v32) = v36;
  v63(v32 + v66[6], v33 + v66[6], v9);
  v71(v32 + v34[7], v33 + v34[7], v72);
  v70(v32 + v34[8], v33 + v34[8], v69);
  v63(v32 + *(int *)(v65 + 36), v33 + *(int *)(v65 + 36), v9);
  v71(*(int *)(v65 + 40) + v32, *(int *)(v65 + 40) + v33, v72);
  uint64_t v38 = v64[8];
  uint64_t v39 = v67 + v38;
  uint64_t v40 = v68 + v38;
  v63(v39, v40, v9);
  long long v41 = v66;
  uint64_t v42 = v66[5];
  *(unsigned char *)(v42 + v39 + 48) = *(unsigned char *)(v42 + v40 + 48);
  long long v43 = *(_OWORD *)(v42 + v40);
  long long v44 = *(_OWORD *)(v42 + v40 + 16);
  *(_OWORD *)(v42 + v39 + 32) = *(_OWORD *)(v42 + v40 + 32);
  *(_OWORD *)(v42 + v39 + 16) = v44;
  *(_OWORD *)(v42 + v39) = v43;
  v63(v39 + v66[6], v40 + v66[6], v9);
  v71(v39 + v41[7], v40 + v41[7], v72);
  v70(v41[8] + v39, v41[8] + v40, v69);
  uint64_t v45 = v64[9];
  uint64_t v46 = v67 + v45;
  uint64_t v47 = v68 + v45;
  v63(v46, v47, v9);
  uint64_t v48 = v66[5];
  *(unsigned char *)(v48 + v46 + 48) = *(unsigned char *)(v48 + v47 + 48);
  long long v49 = *(_OWORD *)(v48 + v47);
  long long v50 = *(_OWORD *)(v48 + v47 + 16);
  *(_OWORD *)(v48 + v46 + 32) = *(_OWORD *)(v48 + v47 + 32);
  *(_OWORD *)(v48 + v46 + 16) = v50;
  *(_OWORD *)(v48 + v46) = v49;
  v63(v46 + v41[6], v47 + v41[6], v9);
  v71(v46 + v66[7], v47 + v66[7], v72);
  v70(v46 + v66[8], v47 + v66[8], v69);
  v63(v46 + *(int *)(v65 + 36), v47 + *(int *)(v65 + 36), v9);
  v71(*(int *)(v65 + 40) + v46, *(int *)(v65 + 40) + v47, v72);
  uint64_t v51 = v64[10];
  uint64_t v52 = v67 + v51;
  uint64_t v53 = v68 + v51;
  v63(v52, v53, v9);
  long long v54 = v66;
  uint64_t v55 = v66[5];
  *(unsigned char *)(v55 + v52 + 48) = *(unsigned char *)(v55 + v53 + 48);
  long long v56 = *(_OWORD *)(v55 + v53);
  long long v57 = *(_OWORD *)(v55 + v53 + 16);
  *(_OWORD *)(v55 + v52 + 32) = *(_OWORD *)(v55 + v53 + 32);
  *(_OWORD *)(v55 + v52 + 16) = v57;
  *(_OWORD *)(v55 + v52) = v56;
  v63(v52 + v66[6], v53 + v66[6], v9);
  v71(v52 + v54[7], v53 + v54[7], v72);
  v70(v52 + v54[8], v53 + v54[8], v69);
  v63(v52 + *(int *)(v65 + 36), v53 + *(int *)(v65 + 36), v9);
  v71(*(int *)(v65 + 40) + v52, *(int *)(v65 + 40) + v53, v72);
  uint64_t v58 = type metadata accessor for MLHandActionClassifier.Torso(0);
  v61(*(int *)(v58 + 24) + v67, *(int *)(v58 + 24) + v68, v60);
  uint64_t result = a1;
  *(unsigned char *)(a1 + v62[9]) = *(unsigned char *)(a2 + v62[9]);
  *(void *)(a1 + v62[10]) = *(void *)(a2 + v62[10]);
  return result;
}

uint64_t assignWithTake for MLHandActionClassifier.GraphCNNModel(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v53 = type metadata accessor for BatchNorm(0);
  uint64_t v52 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v53 - 8) + 40);
  v52(a1, a2, v53);
  uint64_t v4 = a3[5];
  uint64_t v42 = type metadata accessor for Dense(0);
  long long v43 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v42 - 8) + 40);
  v43(a1 + v4, a2 + v4, v42);
  v52(a1 + a3[6], a2 + a3[6], v53);
  uint64_t v5 = a3[7];
  long long v44 = a3;
  uint64_t v48 = type metadata accessor for Dropout(0);
  long long v49 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v48 - 8) + 40);
  v49(a1 + v5, a2 + v5, v48);
  uint64_t v6 = a3[8];
  uint64_t v7 = a1 + v6;
  uint64_t v8 = a2 + v6;
  uint64_t v50 = type metadata accessor for Conv2D(0);
  uint64_t v9 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v50 - 8) + 40);
  v9(v7, v8, v50);
  uint64_t v51 = v9;
  uint64_t v10 = type metadata accessor for MLHandActionClassifier.InvertedResidual(0);
  uint64_t v11 = *(int *)(v10 + 20);
  *(_OWORD *)(v11 + v7) = *(_OWORD *)(v11 + v8);
  *(_OWORD *)(v11 + v7 + 16) = *(_OWORD *)(v11 + v8 + 16);
  *(_OWORD *)(v11 + v7 + 32) = *(_OWORD *)(v11 + v8 + 32);
  *(unsigned char *)(v11 + v7 + 48) = *(unsigned char *)(v11 + v8 + 48);
  uint64_t v12 = (int *)v10;
  v9(*(int *)(v10 + 24) + v7, v8 + *(int *)(v10 + 24), v50);
  uint64_t v45 = v12;
  v52(v12[7] + v7, v8 + v12[7], v53);
  v49(v12[8] + v7, v8 + v12[8], v48);
  uint64_t v47 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for MLHandActionClassifier.DownsampledResidualLayer<MLHandActionClassifier.InvertedResidual>);
  v9(*(int *)(v47 + 36) + v7, v8 + *(int *)(v47 + 36), v50);
  v52(*(int *)(v47 + 40) + v7, v8 + *(int *)(v47 + 40), v53);
  uint64_t v46 = (int *)type metadata accessor for MLHandActionClassifier.SingleStreamBlock(0);
  uint64_t v13 = v46[5];
  uint64_t v14 = v13 + v7;
  uint64_t v15 = v8 + v13;
  v9(v14, v15, v50);
  uint64_t v16 = v45;
  uint64_t v17 = v45[5];
  *(_OWORD *)(v17 + v14) = *(_OWORD *)(v17 + v15);
  *(_OWORD *)(v17 + v14 + 16) = *(_OWORD *)(v17 + v15 + 16);
  *(_OWORD *)(v17 + v14 + 32) = *(_OWORD *)(v17 + v15 + 32);
  *(unsigned char *)(v17 + v14 + 48) = *(unsigned char *)(v17 + v15 + 48);
  v51(v14 + v45[6], v15 + v45[6], v50);
  v52(v14 + v16[7], v15 + v16[7], v53);
  v49(v14 + v16[8], v15 + v16[8], v48);
  v51(v14 + *(int *)(v47 + 36), v15 + *(int *)(v47 + 36), v50);
  v52(*(int *)(v47 + 40) + v14, *(int *)(v47 + 40) + v15, v53);
  uint64_t v18 = v46[6];
  uint64_t v19 = v7 + v18;
  uint64_t v20 = v8 + v18;
  v51(v19, v20, v50);
  uint64_t v21 = v45[5];
  *(_OWORD *)(v21 + v19) = *(_OWORD *)(v21 + v20);
  *(_OWORD *)(v21 + v19 + 16) = *(_OWORD *)(v21 + v20 + 16);
  *(_OWORD *)(v21 + v19 + 32) = *(_OWORD *)(v21 + v20 + 32);
  *(unsigned char *)(v21 + v19 + 48) = *(unsigned char *)(v21 + v20 + 48);
  v51(v19 + v45[6], v20 + v45[6], v50);
  v52(v19 + v45[7], v20 + v45[7], v53);
  v49(v19 + v45[8], v20 + v45[8], v48);
  v51(v19 + *(int *)(v47 + 36), v20 + *(int *)(v47 + 36), v50);
  v52(*(int *)(v47 + 40) + v19, *(int *)(v47 + 40) + v20, v53);
  uint64_t v22 = v46[7];
  uint64_t v23 = v7 + v22;
  uint64_t v24 = v8 + v22;
  v51(v23, v24, v50);
  uint64_t v25 = v45;
  uint64_t v26 = v45[5];
  *(_OWORD *)(v26 + v23) = *(_OWORD *)(v26 + v24);
  *(_OWORD *)(v26 + v23 + 16) = *(_OWORD *)(v26 + v24 + 16);
  *(_OWORD *)(v26 + v23 + 32) = *(_OWORD *)(v26 + v24 + 32);
  *(unsigned char *)(v26 + v23 + 48) = *(unsigned char *)(v26 + v24 + 48);
  v51(v23 + v45[6], v24 + v45[6], v50);
  v52(v23 + v25[7], v24 + v25[7], v53);
  v49(v23 + v25[8], v24 + v25[8], v48);
  v51(v23 + *(int *)(v47 + 36), v24 + *(int *)(v47 + 36), v50);
  v52(*(int *)(v47 + 40) + v23, *(int *)(v47 + 40) + v24, v53);
  uint64_t v27 = v46[8];
  uint64_t v28 = v7 + v27;
  uint64_t v29 = v8 + v27;
  v51(v28, v29, v50);
  long long v30 = v45;
  uint64_t v31 = v45[5];
  *(_OWORD *)(v31 + v28) = *(_OWORD *)(v31 + v29);
  *(_OWORD *)(v31 + v28 + 16) = *(_OWORD *)(v31 + v29 + 16);
  *(_OWORD *)(v31 + v28 + 32) = *(_OWORD *)(v31 + v29 + 32);
  *(unsigned char *)(v31 + v28 + 48) = *(unsigned char *)(v31 + v29 + 48);
  v51(v28 + v45[6], v29 + v45[6], v50);
  v52(v28 + v30[7], v29 + v30[7], v53);
  v49(v30[8] + v28, v30[8] + v29, v48);
  uint64_t v32 = v46[9];
  uint64_t v33 = v7 + v32;
  uint64_t v34 = v8 + v32;
  v51(v33, v34, v50);
  uint64_t v35 = v45[5];
  *(_OWORD *)(v35 + v33) = *(_OWORD *)(v35 + v34);
  *(_OWORD *)(v35 + v33 + 16) = *(_OWORD *)(v35 + v34 + 16);
  *(_OWORD *)(v35 + v33 + 32) = *(_OWORD *)(v35 + v34 + 32);
  *(unsigned char *)(v35 + v33 + 48) = *(unsigned char *)(v35 + v34 + 48);
  v51(v33 + v30[6], v34 + v30[6], v50);
  v52(v33 + v30[7], v34 + v30[7], v53);
  v49(v33 + v30[8], v34 + v30[8], v48);
  v51(v33 + *(int *)(v47 + 36), v34 + *(int *)(v47 + 36), v50);
  v52(*(int *)(v47 + 40) + v33, *(int *)(v47 + 40) + v34, v53);
  uint64_t v36 = v46[10];
  uint64_t v37 = v7 + v36;
  uint64_t v38 = v8 + v36;
  v51(v37, v38, v50);
  uint64_t v39 = v45[5];
  *(_OWORD *)(v39 + v37) = *(_OWORD *)(v39 + v38);
  *(_OWORD *)(v39 + v37 + 16) = *(_OWORD *)(v39 + v38 + 16);
  *(_OWORD *)(v39 + v37 + 32) = *(_OWORD *)(v39 + v38 + 32);
  *(unsigned char *)(v39 + v37 + 48) = *(unsigned char *)(v39 + v38 + 48);
  v51(v37 + v30[6], v38 + v30[6], v50);
  v52(v37 + v30[7], v38 + v30[7], v53);
  v49(v37 + v30[8], v38 + v30[8], v48);
  v51(v37 + *(int *)(v47 + 36), v38 + *(int *)(v47 + 36), v50);
  v52(*(int *)(v47 + 40) + v37, *(int *)(v47 + 40) + v38, v53);
  uint64_t v40 = type metadata accessor for MLHandActionClassifier.Torso(0);
  v43(*(int *)(v40 + 24) + v7, *(int *)(v40 + 24) + v8, v42);
  uint64_t result = a1;
  *(unsigned char *)(a1 + v44[9]) = *(unsigned char *)(a2 + v44[9]);
  *(void *)(a1 + v44[10]) = *(void *)(a2 + v44[10]);
  return result;
}

uint64_t getEnumTagSinglePayload for MLHandActionClassifier.GraphCNNModel(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_1CC286);
}

uint64_t sub_1CC286(uint64_t a1, unsigned int a2, int *a3)
{
  uint64_t v4 = a1;
  uint64_t v5 = type metadata accessor for BatchNorm(0);
  if (*(_DWORD *)(*(void *)(v5 - 8) + 84) == a2) {
    return __swift_getEnumTagSinglePayload(v4, a2, v5);
  }
  uint64_t v5 = type metadata accessor for Dense(0);
  if (*(_DWORD *)(*(void *)(v5 - 8) + 84) == a2)
  {
    uint64_t v6 = a3[5];
LABEL_8:
    uint64_t v4 = v6 + a1;
    return __swift_getEnumTagSinglePayload(v4, a2, v5);
  }
  uint64_t v5 = type metadata accessor for Dropout(0);
  if (*(_DWORD *)(*(void *)(v5 - 8) + 84) == a2)
  {
    uint64_t v6 = a3[7];
    goto LABEL_8;
  }
  unsigned int v7 = 0;
  uint64_t v5 = type metadata accessor for MLHandActionClassifier.Torso(0);
  if (*(_DWORD *)(*(void *)(v5 - 8) + 84) == a2)
  {
    uint64_t v6 = a3[8];
    goto LABEL_8;
  }
  unsigned __int8 v9 = *(unsigned char *)(a1 + a3[9]);
  if (v9 >= 2u) {
    return ((v9 + 2147483646) & 0x7FFFFFFFu) + 1;
  }
  return v7;
}

uint64_t storeEnumTagSinglePayload for MLHandActionClassifier.GraphCNNModel(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_1CC351);
}

uint64_t sub_1CC351(uint64_t a1, unsigned int a2, int a3, int *a4)
{
  uint64_t v6 = a1;
  uint64_t v7 = type metadata accessor for BatchNorm(0);
  if (*(_DWORD *)(*(void *)(v7 - 8) + 84) == a3) {
    return __swift_storeEnumTagSinglePayload(v6, a2, a2, v7);
  }
  uint64_t v7 = type metadata accessor for Dense(0);
  if (*(_DWORD *)(*(void *)(v7 - 8) + 84) == a3)
  {
    uint64_t v8 = a4[5];
LABEL_8:
    uint64_t v6 = v8 + a1;
    return __swift_storeEnumTagSinglePayload(v6, a2, a2, v7);
  }
  uint64_t v7 = type metadata accessor for Dropout(0);
  if (*(_DWORD *)(*(void *)(v7 - 8) + 84) == a3)
  {
    uint64_t v8 = a4[7];
    goto LABEL_8;
  }
  uint64_t v7 = type metadata accessor for MLHandActionClassifier.Torso(0);
  if (*(_DWORD *)(*(void *)(v7 - 8) + 84) == a3)
  {
    uint64_t v8 = a4[8];
    goto LABEL_8;
  }
  uint64_t result = a4[9];
  *(unsigned char *)(a1 + result) = a2 + 1;
  return result;
}

uint64_t type metadata completion function for MLHandActionClassifier.GraphCNNModel(uint64_t a1)
{
  uint64_t result = type metadata accessor for BatchNorm(319);
  if (v2 <= 0x3F)
  {
    uint64_t v3 = *(void *)(result - 8) + 64;
    v7[0] = v3;
    uint64_t result = type metadata accessor for Dense(319);
    if (v4 <= 0x3F)
    {
      v7[1] = *(void *)(result - 8) + 64;
      v7[2] = v3;
      uint64_t result = type metadata accessor for Dropout(319);
      if (v5 <= 0x3F)
      {
        v7[3] = *(void *)(result - 8) + 64;
        uint64_t result = type metadata accessor for MLHandActionClassifier.Torso(319);
        if (v6 <= 0x3F)
        {
          v7[4] = *(void *)(result - 8) + 64;
          v7[5] = &unk_34DB50;
          v7[6] = (char *)&value witness table for Builtin.Int64 + 64;
          swift_initStructMetadata(a1, 256, 7, v7, a1 + 16);
          return 0;
        }
      }
    }
  }
  return result;
}

void *initializeBufferWithCopyOfBuffer for MLHandActionClassifier.Torso(void *a1, char *a2, uint64_t a3)
{
  uint64_t v3 = a1;
  int v4 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  if ((v4 & 0x20000) != 0)
  {
    uint64_t v54 = *(void *)a2;
    *uint64_t v3 = *(void *)a2;
    uint64_t v3 = (void *)(v54 + ((v4 + 16) & ~v4));
    swift_retain();
  }
  else
  {
    uint64_t v5 = type metadata accessor for Conv2D(0);
    unint64_t v6 = *(void (**)(char *, char *, uint64_t))(*(void *)(v5 - 8) + 16);
    v6((char *)a1, a2, v5);
    uint64_t v63 = v6;
    uint64_t v7 = type metadata accessor for MLHandActionClassifier.InvertedResidual(0);
    uint64_t v8 = *(int *)(v7 + 20);
    *((unsigned char *)a1 + v8 + 48) = a2[v8 + 48];
    long long v9 = *(_OWORD *)&a2[v8];
    long long v10 = *(_OWORD *)&a2[v8 + 16];
    *(_OWORD *)((char *)a1 + v8 + 32) = *(_OWORD *)&a2[v8 + 32];
    *(_OWORD *)((char *)a1 + v8 + 16) = v10;
    *(_OWORD *)((char *)a1 + v8) = v9;
    uint64_t v11 = (int *)v7;
    v6((char *)a1 + *(int *)(v7 + 24), &a2[*(int *)(v7 + 24)], v5);
    uint64_t v12 = v11[7];
    uint64_t v61 = type metadata accessor for BatchNorm(0);
    uint64_t v62 = *(void (**)(char *, char *, uint64_t))(*(void *)(v61 - 8) + 16);
    v62((char *)a1 + v12, &a2[v12], v61);
    uint64_t v13 = v11[8];
    uint64_t v60 = type metadata accessor for Dropout(0);
    long long v59 = *(void (**)(char *, char *, uint64_t))(*(void *)(v60 - 8) + 16);
    v59((char *)a1 + v13, &a2[v13], v60);
    uint64_t v58 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for MLHandActionClassifier.DownsampledResidualLayer<MLHandActionClassifier.InvertedResidual>);
    v6((char *)a1 + *(int *)(v58 + 36), &a2[*(int *)(v58 + 36)], v5);
    v62((char *)a1 + *(int *)(v58 + 40), &a2[*(int *)(v58 + 40)], v61);
    long long v57 = (int *)type metadata accessor for MLHandActionClassifier.SingleStreamBlock(0);
    uint64_t v14 = v57[5];
    uint64_t v15 = (char *)a1 + v14;
    uint64_t v16 = &a2[v14];
    v63(v15, v16, v5);
    uint64_t v17 = v11[5];
    v15[v17 + 48] = v16[v17 + 48];
    long long v18 = *(_OWORD *)&v16[v17];
    long long v19 = *(_OWORD *)&v16[v17 + 16];
    *(_OWORD *)&v15[v17 + 32] = *(_OWORD *)&v16[v17 + 32];
    *(_OWORD *)&v15[v17 + 16] = v19;
    *(_OWORD *)&v15[v17] = v18;
    v63(&v15[v11[6]], &v16[v11[6]], v5);
    v62(&v15[v11[7]], &v16[v11[7]], v61);
    v59(&v15[v11[8]], &v16[v11[8]], v60);
    v63(&v15[*(int *)(v58 + 36)], &v16[*(int *)(v58 + 36)], v5);
    v62(&v15[*(int *)(v58 + 40)], &v16[*(int *)(v58 + 40)], v61);
    uint64_t v20 = v57[6];
    uint64_t v21 = (char *)a1 + v20;
    uint64_t v22 = &a2[v20];
    v63(v21, v22, v5);
    uint64_t v23 = v11[5];
    v21[v23 + 48] = v22[v23 + 48];
    long long v24 = *(_OWORD *)&v22[v23];
    long long v25 = *(_OWORD *)&v22[v23 + 16];
    *(_OWORD *)&v21[v23 + 32] = *(_OWORD *)&v22[v23 + 32];
    *(_OWORD *)&v21[v23 + 16] = v25;
    *(_OWORD *)&v21[v23] = v24;
    v63(&v21[v11[6]], &v22[v11[6]], v5);
    v62(&v21[v11[7]], &v22[v11[7]], v61);
    v59(&v21[v11[8]], &v22[v11[8]], v60);
    v63(&v21[*(int *)(v58 + 36)], &v22[*(int *)(v58 + 36)], v5);
    v62(&v21[*(int *)(v58 + 40)], &v22[*(int *)(v58 + 40)], v61);
    uint64_t v26 = v57[7];
    uint64_t v27 = (char *)a1 + v26;
    uint64_t v28 = &a2[v26];
    v63(v27, v28, v5);
    uint64_t v29 = v11[5];
    v27[v29 + 48] = v28[v29 + 48];
    long long v30 = *(_OWORD *)&v28[v29];
    long long v31 = *(_OWORD *)&v28[v29 + 16];
    *(_OWORD *)&v27[v29 + 32] = *(_OWORD *)&v28[v29 + 32];
    *(_OWORD *)&v27[v29 + 16] = v31;
    *(_OWORD *)&v27[v29] = v30;
    v63(&v27[v11[6]], &v28[v11[6]], v5);
    v62(&v27[v11[7]], &v28[v11[7]], v61);
    v59(&v27[v11[8]], &v28[v11[8]], v60);
    v63(&v27[*(int *)(v58 + 36)], &v28[*(int *)(v58 + 36)], v5);
    v62(&v27[*(int *)(v58 + 40)], &v28[*(int *)(v58 + 40)], v61);
    uint64_t v32 = v57[8];
    uint64_t v33 = (char *)a1 + v32;
    uint64_t v34 = &a2[v32];
    v63(v33, v34, v5);
    uint64_t v35 = v11[5];
    v33[v35 + 48] = v34[v35 + 48];
    long long v36 = *(_OWORD *)&v34[v35];
    long long v37 = *(_OWORD *)&v34[v35 + 16];
    *(_OWORD *)&v33[v35 + 32] = *(_OWORD *)&v34[v35 + 32];
    *(_OWORD *)&v33[v35 + 16] = v37;
    *(_OWORD *)&v33[v35] = v36;
    v63(&v33[v11[6]], &v34[v11[6]], v5);
    v62(&v33[v11[7]], &v34[v11[7]], v61);
    v59(&v33[v11[8]], &v34[v11[8]], v60);
    uint64_t v38 = v57[9];
    uint64_t v39 = (char *)a1 + v38;
    uint64_t v40 = &a2[v38];
    v63(v39, v40, v5);
    uint64_t v41 = v11[5];
    v39[v41 + 48] = v40[v41 + 48];
    long long v42 = *(_OWORD *)&v40[v41];
    long long v43 = *(_OWORD *)&v40[v41 + 16];
    *(_OWORD *)&v39[v41 + 32] = *(_OWORD *)&v40[v41 + 32];
    *(_OWORD *)&v39[v41 + 16] = v43;
    *(_OWORD *)&v39[v41] = v42;
    v63(&v39[v11[6]], &v40[v11[6]], v5);
    v62(&v39[v11[7]], &v40[v11[7]], v61);
    v59(&v39[v11[8]], &v40[v11[8]], v60);
    v63(&v39[*(int *)(v58 + 36)], &v40[*(int *)(v58 + 36)], v5);
    v62(&v39[*(int *)(v58 + 40)], &v40[*(int *)(v58 + 40)], v61);
    uint64_t v44 = v57[10];
    uint64_t v45 = (char *)a1 + v44;
    uint64_t v46 = &a2[v44];
    v63(v45, v46, v5);
    uint64_t v47 = v11[5];
    v45[v47 + 48] = v46[v47 + 48];
    long long v48 = *(_OWORD *)&v46[v47];
    long long v49 = *(_OWORD *)&v46[v47 + 16];
    *(_OWORD *)&v45[v47 + 32] = *(_OWORD *)&v46[v47 + 32];
    *(_OWORD *)&v45[v47 + 16] = v49;
    *(_OWORD *)&v45[v47] = v48;
    v63(&v45[v11[6]], &v46[v11[6]], v5);
    v62(&v45[v11[7]], &v46[v11[7]], v61);
    v59(&v45[v11[8]], &v46[v11[8]], v60);
    v63(&v45[*(int *)(v58 + 36)], &v46[*(int *)(v58 + 36)], v5);
    v62(&v45[*(int *)(v58 + 40)], &v46[*(int *)(v58 + 40)], v61);
    uint64_t v50 = *(int *)(a3 + 24);
    uint64_t v51 = (char *)a1 + v50;
    uint64_t v52 = &a2[v50];
    uint64_t v53 = type metadata accessor for Dense(0);
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v53 - 8) + 16))(v51, v52, v53);
  }
  return v3;
}

uint64_t destroy for MLHandActionClassifier.Torso(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = type metadata accessor for Conv2D(0);
  uint64_t v3 = *(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8);
  uint64_t v24 = v2;
  v3(a1, v2);
  uint64_t v23 = v3;
  uint64_t v4 = type metadata accessor for MLHandActionClassifier.InvertedResidual(0);
  v3(a1 + *(int *)(v4 + 24), v2);
  uint64_t v5 = v4;
  long long v18 = (int *)v4;
  uint64_t v6 = a1 + *(int *)(v4 + 28);
  uint64_t v7 = type metadata accessor for BatchNorm(0);
  long long v25 = *(void (**)(uint64_t, uint64_t))(*(void *)(v7 - 8) + 8);
  v25(v6, v7);
  uint64_t v8 = a1 + *(int *)(v5 + 32);
  uint64_t v22 = type metadata accessor for Dropout(0);
  long long v19 = *(void (**)(uint64_t, uint64_t))(*(void *)(v22 - 8) + 8);
  v19(v8, v22);
  uint64_t v21 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for MLHandActionClassifier.DownsampledResidualLayer<MLHandActionClassifier.InvertedResidual>);
  v23(a1 + *(int *)(v21 + 36), v24);
  v25(a1 + *(int *)(v21 + 40), v7);
  uint64_t v20 = (int *)type metadata accessor for MLHandActionClassifier.SingleStreamBlock(0);
  uint64_t v9 = a1 + v20[5];
  v23(v9, v24);
  v23(v9 + v18[6], v24);
  v25(v9 + v18[7], v7);
  v19(v9 + v18[8], v22);
  v23(v9 + *(int *)(v21 + 36), v24);
  v25(v9 + *(int *)(v21 + 40), v7);
  uint64_t v10 = a1 + v20[6];
  v23(v10, v24);
  v23(v10 + v18[6], v24);
  v25(v10 + v18[7], v7);
  v19(v10 + v18[8], v22);
  v23(v10 + *(int *)(v21 + 36), v24);
  v25(v10 + *(int *)(v21 + 40), v7);
  uint64_t v11 = a1 + v20[7];
  v23(v11, v24);
  v23(v11 + v18[6], v24);
  v25(v11 + v18[7], v7);
  v19(v11 + v18[8], v22);
  v23(v11 + *(int *)(v21 + 36), v24);
  v25(v11 + *(int *)(v21 + 40), v7);
  uint64_t v12 = a1 + v20[8];
  v23(v12, v24);
  v23(v12 + v18[6], v24);
  v25(v12 + v18[7], v7);
  v19(v12 + v18[8], v22);
  uint64_t v13 = a1 + v20[9];
  v23(v13, v24);
  v23(v13 + v18[6], v24);
  v25(v13 + v18[7], v7);
  v19(v13 + v18[8], v22);
  v23(v13 + *(int *)(v21 + 36), v24);
  v25(v13 + *(int *)(v21 + 40), v7);
  uint64_t v14 = a1 + v20[10];
  v23(v14, v24);
  v23(v14 + v18[6], v24);
  v25(v14 + v18[7], v7);
  v19(v14 + v18[8], v22);
  v23(v14 + *(int *)(v21 + 36), v24);
  v25(v14 + *(int *)(v21 + 40), v7);
  uint64_t v15 = a1 + *(int *)(a2 + 24);
  uint64_t v16 = type metadata accessor for Dense(0);
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v16 - 8) + 8))(v15, v16);
}

uint64_t initializeWithCopy for MLHandActionClassifier.Torso(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v61 = type metadata accessor for Conv2D(0);
  uint64_t v3 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v61 - 8) + 16);
  v3(a1, a2, v61);
  uint64_t v58 = v3;
  uint64_t v4 = type metadata accessor for MLHandActionClassifier.InvertedResidual(0);
  uint64_t v5 = *(int *)(v4 + 20);
  *(unsigned char *)(a1 + v5 + 48) = *(unsigned char *)(a2 + v5 + 48);
  long long v6 = *(_OWORD *)(a2 + v5);
  long long v7 = *(_OWORD *)(a2 + v5 + 16);
  *(_OWORD *)(a1 + v5 + 32) = *(_OWORD *)(a2 + v5 + 32);
  *(_OWORD *)(a1 + v5 + 16) = v7;
  *(_OWORD *)(a1 + v5) = v6;
  uint64_t v8 = (int *)v4;
  v3(a1 + *(int *)(v4 + 24), a2 + *(int *)(v4 + 24), v61);
  uint64_t v9 = v8[7];
  uint64_t v59 = type metadata accessor for BatchNorm(0);
  uint64_t v60 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v59 - 8) + 16);
  v60(a1 + v9, a2 + v9, v59);
  uint64_t v10 = v8[8];
  uint64_t v56 = type metadata accessor for Dropout(0);
  long long v57 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v56 - 8) + 16);
  v57(a1 + v10, a2 + v10, v56);
  uint64_t v55 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for MLHandActionClassifier.DownsampledResidualLayer<MLHandActionClassifier.InvertedResidual>);
  v3(a1 + *(int *)(v55 + 36), a2 + *(int *)(v55 + 36), v61);
  v60(a1 + *(int *)(v55 + 40), a2 + *(int *)(v55 + 40), v59);
  uint64_t v54 = (int *)type metadata accessor for MLHandActionClassifier.SingleStreamBlock(0);
  uint64_t v11 = v54[5];
  uint64_t v12 = a1 + v11;
  uint64_t v13 = a2 + v11;
  v3(v12, v13, v61);
  uint64_t v14 = v8[5];
  *(unsigned char *)(v14 + v12 + 48) = *(unsigned char *)(v14 + v13 + 48);
  long long v15 = *(_OWORD *)(v14 + v13);
  long long v16 = *(_OWORD *)(v14 + v13 + 16);
  *(_OWORD *)(v14 + v12 + 32) = *(_OWORD *)(v14 + v13 + 32);
  *(_OWORD *)(v14 + v12 + 16) = v16;
  *(_OWORD *)(v14 + v12) = v15;
  v3(v12 + v8[6], v13 + v8[6], v61);
  v60(v12 + v8[7], v13 + v8[7], v59);
  v57(v12 + v8[8], v13 + v8[8], v56);
  v3(v12 + *(int *)(v55 + 36), v13 + *(int *)(v55 + 36), v61);
  v60(*(int *)(v55 + 40) + v12, *(int *)(v55 + 40) + v13, v59);
  uint64_t v17 = v54[6];
  uint64_t v18 = a1 + v17;
  uint64_t v19 = a2 + v17;
  v3(v18, v19, v61);
  uint64_t v20 = v8[5];
  *(unsigned char *)(v20 + v18 + 48) = *(unsigned char *)(v20 + v19 + 48);
  long long v21 = *(_OWORD *)(v20 + v19);
  long long v22 = *(_OWORD *)(v20 + v19 + 16);
  *(_OWORD *)(v20 + v18 + 32) = *(_OWORD *)(v20 + v19 + 32);
  *(_OWORD *)(v20 + v18 + 16) = v22;
  *(_OWORD *)(v20 + v18) = v21;
  v3(v18 + v8[6], v19 + v8[6], v61);
  v60(v18 + v8[7], v19 + v8[7], v59);
  v57(v18 + v8[8], v19 + v8[8], v56);
  v3(v18 + *(int *)(v55 + 36), v19 + *(int *)(v55 + 36), v61);
  v60(*(int *)(v55 + 40) + v18, *(int *)(v55 + 40) + v19, v59);
  uint64_t v23 = v54[7];
  uint64_t v24 = a1 + v23;
  uint64_t v25 = a2 + v23;
  v3(v24, v25, v61);
  uint64_t v26 = v8[5];
  *(unsigned char *)(v26 + v24 + 48) = *(unsigned char *)(v26 + v25 + 48);
  long long v27 = *(_OWORD *)(v26 + v25);
  long long v28 = *(_OWORD *)(v26 + v25 + 16);
  *(_OWORD *)(v26 + v24 + 32) = *(_OWORD *)(v26 + v25 + 32);
  *(_OWORD *)(v26 + v24 + 16) = v28;
  *(_OWORD *)(v26 + v24) = v27;
  v3(v24 + v8[6], v25 + v8[6], v61);
  v60(v24 + v8[7], v25 + v8[7], v59);
  v57(v24 + v8[8], v25 + v8[8], v56);
  v3(v24 + *(int *)(v55 + 36), v25 + *(int *)(v55 + 36), v61);
  v60(*(int *)(v55 + 40) + v24, *(int *)(v55 + 40) + v25, v59);
  uint64_t v29 = v54[8];
  uint64_t v30 = a1 + v29;
  uint64_t v31 = a2 + v29;
  v3(v30, v31, v61);
  uint64_t v32 = v8[5];
  *(unsigned char *)(v32 + v30 + 48) = *(unsigned char *)(v32 + v31 + 48);
  long long v33 = *(_OWORD *)(v32 + v31);
  long long v34 = *(_OWORD *)(v32 + v31 + 16);
  *(_OWORD *)(v32 + v30 + 32) = *(_OWORD *)(v32 + v31 + 32);
  *(_OWORD *)(v32 + v30 + 16) = v34;
  *(_OWORD *)(v32 + v30) = v33;
  v3(v30 + v8[6], v31 + v8[6], v61);
  v60(v30 + v8[7], v31 + v8[7], v59);
  v57(v8[8] + v30, v8[8] + v31, v56);
  uint64_t v35 = v54[9];
  uint64_t v36 = a1 + v35;
  uint64_t v37 = a2 + v35;
  v3(v36, v37, v61);
  uint64_t v38 = v8[5];
  *(unsigned char *)(v38 + v36 + 48) = *(unsigned char *)(v38 + v37 + 48);
  long long v39 = *(_OWORD *)(v38 + v37);
  long long v40 = *(_OWORD *)(v38 + v37 + 16);
  *(_OWORD *)(v38 + v36 + 32) = *(_OWORD *)(v38 + v37 + 32);
  *(_OWORD *)(v38 + v36 + 16) = v40;
  *(_OWORD *)(v38 + v36) = v39;
  v3(v36 + v8[6], v37 + v8[6], v61);
  v60(v36 + v8[7], v37 + v8[7], v59);
  v57(v36 + v8[8], v37 + v8[8], v56);
  v3(v36 + *(int *)(v55 + 36), v37 + *(int *)(v55 + 36), v61);
  v60(*(int *)(v55 + 40) + v36, *(int *)(v55 + 40) + v37, v59);
  uint64_t v41 = v54[10];
  uint64_t v42 = a1 + v41;
  uint64_t v43 = a2 + v41;
  v3(v42, v43, v61);
  uint64_t v44 = v8;
  uint64_t v45 = v8[5];
  *(unsigned char *)(v45 + v42 + 48) = *(unsigned char *)(v45 + v43 + 48);
  long long v46 = *(_OWORD *)(v45 + v43);
  long long v47 = *(_OWORD *)(v45 + v43 + 16);
  *(_OWORD *)(v45 + v42 + 32) = *(_OWORD *)(v45 + v43 + 32);
  *(_OWORD *)(v45 + v42 + 16) = v47;
  *(_OWORD *)(v45 + v42) = v46;
  v58(v42 + v44[6], v43 + v44[6], v61);
  v60(v42 + v44[7], v43 + v44[7], v59);
  v57(v42 + v44[8], v43 + v44[8], v56);
  v58(v42 + *(int *)(v55 + 36), v43 + *(int *)(v55 + 36), v61);
  v60(*(int *)(v55 + 40) + v42, *(int *)(v55 + 40) + v43, v59);
  uint64_t v48 = *(int *)(a3 + 24);
  uint64_t v49 = a1 + v48;
  uint64_t v50 = v48 + a2;
  uint64_t v51 = type metadata accessor for Dense(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v51 - 8) + 16))(v49, v50, v51);
  return a1;
}

uint64_t assignWithCopy for MLHandActionClassifier.Torso(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = type metadata accessor for Conv2D(0);
  uint64_t v49 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 24);
  uint64_t v50 = v4;
  v49(a1, a2, v4);
  uint64_t v5 = type metadata accessor for MLHandActionClassifier.InvertedResidual(0);
  uint64_t v6 = *(int *)(v5 + 20);
  *(void *)(a1 + v6) = *(void *)(a2 + v6);
  *(void *)(a1 + v6 + 8) = *(void *)(a2 + v6 + 8);
  *(void *)(a1 + v6 + 16) = *(void *)(a2 + v6 + 16);
  *(void *)(a1 + v6 + 24) = *(void *)(a2 + v6 + 24);
  *(void *)(a1 + v6 + 32) = *(void *)(a2 + v6 + 32);
  *(void *)(a1 + v6 + 40) = *(void *)(a2 + v6 + 40);
  *(unsigned char *)(a1 + v6 + 48) = *(unsigned char *)(a2 + v6 + 48);
  long long v7 = (int *)v5;
  v49(a1 + *(int *)(v5 + 24), a2 + *(int *)(v5 + 24), v4);
  uint64_t v8 = v7[7];
  long long v46 = v7;
  uint64_t v51 = type metadata accessor for BatchNorm(0);
  uint64_t v52 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v51 - 8) + 24);
  v52(a1 + v8, a2 + v8, v51);
  uint64_t v9 = v7[8];
  uint64_t v48 = type metadata accessor for Dropout(0);
  long long v47 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v48 - 8) + 24);
  v47(v9 + a1, a2 + v9, v48);
  uint64_t v45 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for MLHandActionClassifier.DownsampledResidualLayer<MLHandActionClassifier.InvertedResidual>);
  v49(a1 + *(int *)(v45 + 36), a2 + *(int *)(v45 + 36), v4);
  v52(a1 + *(int *)(v45 + 40), a2 + *(int *)(v45 + 40), v51);
  uint64_t v44 = (int *)type metadata accessor for MLHandActionClassifier.SingleStreamBlock(0);
  uint64_t v10 = v44[5];
  uint64_t v11 = a1 + v10;
  uint64_t v12 = a2 + v10;
  v49(v11, v12, v4);
  uint64_t v13 = v7;
  uint64_t v14 = v7[5];
  *(void *)(v14 + v11) = *(void *)(v14 + v12);
  *(void *)(v14 + v11 + 8) = *(void *)(v14 + v12 + 8);
  *(void *)(v14 + v11 + 16) = *(void *)(v14 + v12 + 16);
  *(void *)(v14 + v11 + 24) = *(void *)(v14 + v12 + 24);
  *(void *)(v14 + v11 + 32) = *(void *)(v14 + v12 + 32);
  *(void *)(v14 + v11 + 40) = *(void *)(v14 + v12 + 40);
  *(unsigned char *)(v14 + v11 + 48) = *(unsigned char *)(v14 + v12 + 48);
  v49(v11 + v13[6], v12 + v13[6], v50);
  v52(v11 + v13[7], v12 + v13[7], v51);
  v47(v11 + v13[8], v12 + v13[8], v48);
  v49(v11 + *(int *)(v45 + 36), v12 + *(int *)(v45 + 36), v50);
  v52(*(int *)(v45 + 40) + v11, *(int *)(v45 + 40) + v12, v51);
  uint64_t v15 = v44[6];
  uint64_t v16 = a1 + v15;
  uint64_t v17 = a2 + v15;
  v49(v16, v17, v50);
  uint64_t v18 = v7[5];
  *(void *)(v18 + v16) = *(void *)(v18 + v17);
  *(void *)(v18 + v16 + 8) = *(void *)(v18 + v17 + 8);
  *(void *)(v18 + v16 + 16) = *(void *)(v18 + v17 + 16);
  *(void *)(v18 + v16 + 24) = *(void *)(v18 + v17 + 24);
  *(void *)(v18 + v16 + 32) = *(void *)(v18 + v17 + 32);
  *(void *)(v18 + v16 + 40) = *(void *)(v18 + v17 + 40);
  *(unsigned char *)(v18 + v16 + 48) = *(unsigned char *)(v18 + v17 + 48);
  v49(v16 + v46[6], v17 + v46[6], v50);
  v52(v16 + v13[7], v17 + v13[7], v51);
  v47(v16 + v13[8], v17 + v13[8], v48);
  v49(v16 + *(int *)(v45 + 36), v17 + *(int *)(v45 + 36), v50);
  v52(*(int *)(v45 + 40) + v16, *(int *)(v45 + 40) + v17, v51);
  uint64_t v19 = v44[7];
  uint64_t v20 = a1 + v19;
  uint64_t v21 = a2 + v19;
  v49(v20, v21, v50);
  long long v22 = v7;
  uint64_t v23 = v7[5];
  *(void *)(v23 + v20) = *(void *)(v23 + v21);
  *(void *)(v23 + v20 + 8) = *(void *)(v23 + v21 + 8);
  *(void *)(v23 + v20 + 16) = *(void *)(v23 + v21 + 16);
  *(void *)(v23 + v20 + 24) = *(void *)(v23 + v21 + 24);
  *(void *)(v23 + v20 + 32) = *(void *)(v23 + v21 + 32);
  *(void *)(v23 + v20 + 40) = *(void *)(v23 + v21 + 40);
  *(unsigned char *)(v23 + v20 + 48) = *(unsigned char *)(v23 + v21 + 48);
  v49(v20 + v46[6], v21 + v46[6], v50);
  v52(v20 + v22[7], v21 + v22[7], v51);
  v47(v20 + v22[8], v21 + v22[8], v48);
  v49(v20 + *(int *)(v45 + 36), v21 + *(int *)(v45 + 36), v50);
  v52(*(int *)(v45 + 40) + v20, *(int *)(v45 + 40) + v21, v51);
  uint64_t v24 = v44[8];
  uint64_t v25 = a1 + v24;
  uint64_t v26 = a2 + v24;
  v49(v25, v26, v50);
  long long v27 = v7;
  uint64_t v28 = v7[5];
  *(void *)(v28 + v25) = *(void *)(v28 + v26);
  *(void *)(v28 + v25 + 8) = *(void *)(v28 + v26 + 8);
  *(void *)(v28 + v25 + 16) = *(void *)(v28 + v26 + 16);
  *(void *)(v28 + v25 + 24) = *(void *)(v28 + v26 + 24);
  *(void *)(v28 + v25 + 32) = *(void *)(v28 + v26 + 32);
  *(void *)(v28 + v25 + 40) = *(void *)(v28 + v26 + 40);
  *(unsigned char *)(v28 + v25 + 48) = *(unsigned char *)(v28 + v26 + 48);
  v49(v25 + v46[6], v26 + v46[6], v50);
  v52(v25 + v27[7], v26 + v27[7], v51);
  v47(v27[8] + v25, v27[8] + v26, v48);
  uint64_t v29 = v44[9];
  uint64_t v30 = a1 + v29;
  uint64_t v31 = a2 + v29;
  v49(v30, v31, v50);
  uint64_t v32 = v7[5];
  *(void *)(v32 + v30) = *(void *)(v32 + v31);
  *(void *)(v32 + v30 + 8) = *(void *)(v32 + v31 + 8);
  *(void *)(v32 + v30 + 16) = *(void *)(v32 + v31 + 16);
  *(void *)(v32 + v30 + 24) = *(void *)(v32 + v31 + 24);
  *(void *)(v32 + v30 + 32) = *(void *)(v32 + v31 + 32);
  *(void *)(v32 + v30 + 40) = *(void *)(v32 + v31 + 40);
  *(unsigned char *)(v32 + v30 + 48) = *(unsigned char *)(v32 + v31 + 48);
  v49(v30 + v27[6], v31 + v27[6], v50);
  v52(v30 + v7[7], v31 + v7[7], v51);
  v47(v30 + v7[8], v31 + v7[8], v48);
  v49(v30 + *(int *)(v45 + 36), v31 + *(int *)(v45 + 36), v50);
  v52(*(int *)(v45 + 40) + v30, *(int *)(v45 + 40) + v31, v51);
  uint64_t v33 = v44[10];
  uint64_t v34 = a1 + v33;
  uint64_t v35 = a2 + v33;
  v49(v34, v35, v50);
  uint64_t v36 = v7[5];
  *(void *)(v36 + v34) = *(void *)(v36 + v35);
  *(void *)(v36 + v34 + 8) = *(void *)(v36 + v35 + 8);
  *(void *)(v36 + v34 + 16) = *(void *)(v36 + v35 + 16);
  *(void *)(v36 + v34 + 24) = *(void *)(v36 + v35 + 24);
  *(void *)(v36 + v34 + 32) = *(void *)(v36 + v35 + 32);
  *(void *)(v36 + v34 + 40) = *(void *)(v36 + v35 + 40);
  *(unsigned char *)(v36 + v34 + 48) = *(unsigned char *)(v36 + v35 + 48);
  uint64_t v37 = v7;
  v49(v34 + v46[6], v35 + v46[6], v50);
  v52(v34 + v37[7], v35 + v37[7], v51);
  v47(v34 + v37[8], v35 + v37[8], v48);
  v49(v34 + *(int *)(v45 + 36), v35 + *(int *)(v45 + 36), v50);
  v52(*(int *)(v45 + 40) + v34, *(int *)(v45 + 40) + v35, v51);
  uint64_t v38 = *(int *)(a3 + 24);
  uint64_t v39 = a1 + v38;
  uint64_t v40 = v38 + a2;
  uint64_t v41 = type metadata accessor for Dense(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v41 - 8) + 24))(v39, v40, v41);
  return a1;
}

uint64_t initializeWithTake for MLHandActionClassifier.Torso(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v61 = type metadata accessor for Conv2D(0);
  uint64_t v3 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v61 - 8) + 32);
  v3(a1, a2, v61);
  uint64_t v58 = v3;
  uint64_t v4 = type metadata accessor for MLHandActionClassifier.InvertedResidual(0);
  uint64_t v5 = *(int *)(v4 + 20);
  *(unsigned char *)(a1 + v5 + 48) = *(unsigned char *)(a2 + v5 + 48);
  long long v6 = *(_OWORD *)(a2 + v5);
  long long v7 = *(_OWORD *)(a2 + v5 + 16);
  *(_OWORD *)(a1 + v5 + 32) = *(_OWORD *)(a2 + v5 + 32);
  *(_OWORD *)(a1 + v5 + 16) = v7;
  *(_OWORD *)(a1 + v5) = v6;
  uint64_t v8 = (int *)v4;
  v3(a1 + *(int *)(v4 + 24), a2 + *(int *)(v4 + 24), v61);
  uint64_t v9 = v8[7];
  uint64_t v59 = type metadata accessor for BatchNorm(0);
  uint64_t v60 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v59 - 8) + 32);
  v60(a1 + v9, a2 + v9, v59);
  uint64_t v10 = v8[8];
  uint64_t v56 = type metadata accessor for Dropout(0);
  long long v57 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v56 - 8) + 32);
  v57(a1 + v10, a2 + v10, v56);
  uint64_t v55 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for MLHandActionClassifier.DownsampledResidualLayer<MLHandActionClassifier.InvertedResidual>);
  v3(a1 + *(int *)(v55 + 36), a2 + *(int *)(v55 + 36), v61);
  v60(a1 + *(int *)(v55 + 40), a2 + *(int *)(v55 + 40), v59);
  uint64_t v54 = (int *)type metadata accessor for MLHandActionClassifier.SingleStreamBlock(0);
  uint64_t v11 = v54[5];
  uint64_t v12 = a1 + v11;
  uint64_t v13 = a2 + v11;
  v3(v12, v13, v61);
  uint64_t v14 = v8[5];
  *(unsigned char *)(v14 + v12 + 48) = *(unsigned char *)(v14 + v13 + 48);
  long long v15 = *(_OWORD *)(v14 + v13);
  long long v16 = *(_OWORD *)(v14 + v13 + 16);
  *(_OWORD *)(v14 + v12 + 32) = *(_OWORD *)(v14 + v13 + 32);
  *(_OWORD *)(v14 + v12 + 16) = v16;
  *(_OWORD *)(v14 + v12) = v15;
  v3(v12 + v8[6], v13 + v8[6], v61);
  v60(v12 + v8[7], v13 + v8[7], v59);
  v57(v12 + v8[8], v13 + v8[8], v56);
  v3(v12 + *(int *)(v55 + 36), v13 + *(int *)(v55 + 36), v61);
  v60(*(int *)(v55 + 40) + v12, *(int *)(v55 + 40) + v13, v59);
  uint64_t v17 = v54[6];
  uint64_t v18 = a1 + v17;
  uint64_t v19 = a2 + v17;
  v3(v18, v19, v61);
  uint64_t v20 = v8[5];
  *(unsigned char *)(v20 + v18 + 48) = *(unsigned char *)(v20 + v19 + 48);
  long long v21 = *(_OWORD *)(v20 + v19);
  long long v22 = *(_OWORD *)(v20 + v19 + 16);
  *(_OWORD *)(v20 + v18 + 32) = *(_OWORD *)(v20 + v19 + 32);
  *(_OWORD *)(v20 + v18 + 16) = v22;
  *(_OWORD *)(v20 + v18) = v21;
  v3(v18 + v8[6], v19 + v8[6], v61);
  v60(v18 + v8[7], v19 + v8[7], v59);
  v57(v18 + v8[8], v19 + v8[8], v56);
  v3(v18 + *(int *)(v55 + 36), v19 + *(int *)(v55 + 36), v61);
  v60(*(int *)(v55 + 40) + v18, *(int *)(v55 + 40) + v19, v59);
  uint64_t v23 = v54[7];
  uint64_t v24 = a1 + v23;
  uint64_t v25 = a2 + v23;
  v3(v24, v25, v61);
  uint64_t v26 = v8[5];
  *(unsigned char *)(v26 + v24 + 48) = *(unsigned char *)(v26 + v25 + 48);
  long long v27 = *(_OWORD *)(v26 + v25);
  long long v28 = *(_OWORD *)(v26 + v25 + 16);
  *(_OWORD *)(v26 + v24 + 32) = *(_OWORD *)(v26 + v25 + 32);
  *(_OWORD *)(v26 + v24 + 16) = v28;
  *(_OWORD *)(v26 + v24) = v27;
  v3(v24 + v8[6], v25 + v8[6], v61);
  v60(v24 + v8[7], v25 + v8[7], v59);
  v57(v24 + v8[8], v25 + v8[8], v56);
  v3(v24 + *(int *)(v55 + 36), v25 + *(int *)(v55 + 36), v61);
  v60(*(int *)(v55 + 40) + v24, *(int *)(v55 + 40) + v25, v59);
  uint64_t v29 = v54[8];
  uint64_t v30 = a1 + v29;
  uint64_t v31 = a2 + v29;
  v3(v30, v31, v61);
  uint64_t v32 = v8[5];
  *(unsigned char *)(v32 + v30 + 48) = *(unsigned char *)(v32 + v31 + 48);
  long long v33 = *(_OWORD *)(v32 + v31);
  long long v34 = *(_OWORD *)(v32 + v31 + 16);
  *(_OWORD *)(v32 + v30 + 32) = *(_OWORD *)(v32 + v31 + 32);
  *(_OWORD *)(v32 + v30 + 16) = v34;
  *(_OWORD *)(v32 + v30) = v33;
  v3(v30 + v8[6], v31 + v8[6], v61);
  v60(v30 + v8[7], v31 + v8[7], v59);
  v57(v8[8] + v30, v8[8] + v31, v56);
  uint64_t v35 = v54[9];
  uint64_t v36 = a1 + v35;
  uint64_t v37 = a2 + v35;
  v3(v36, v37, v61);
  uint64_t v38 = v8[5];
  *(unsigned char *)(v38 + v36 + 48) = *(unsigned char *)(v38 + v37 + 48);
  long long v39 = *(_OWORD *)(v38 + v37);
  long long v40 = *(_OWORD *)(v38 + v37 + 16);
  *(_OWORD *)(v38 + v36 + 32) = *(_OWORD *)(v38 + v37 + 32);
  *(_OWORD *)(v38 + v36 + 16) = v40;
  *(_OWORD *)(v38 + v36) = v39;
  v3(v36 + v8[6], v37 + v8[6], v61);
  v60(v36 + v8[7], v37 + v8[7], v59);
  v57(v36 + v8[8], v37 + v8[8], v56);
  v3(v36 + *(int *)(v55 + 36), v37 + *(int *)(v55 + 36), v61);
  v60(*(int *)(v55 + 40) + v36, *(int *)(v55 + 40) + v37, v59);
  uint64_t v41 = v54[10];
  uint64_t v42 = a1 + v41;
  uint64_t v43 = a2 + v41;
  v3(v42, v43, v61);
  uint64_t v44 = v8;
  uint64_t v45 = v8[5];
  *(unsigned char *)(v45 + v42 + 48) = *(unsigned char *)(v45 + v43 + 48);
  long long v46 = *(_OWORD *)(v45 + v43);
  long long v47 = *(_OWORD *)(v45 + v43 + 16);
  *(_OWORD *)(v45 + v42 + 32) = *(_OWORD *)(v45 + v43 + 32);
  *(_OWORD *)(v45 + v42 + 16) = v47;
  *(_OWORD *)(v45 + v42) = v46;
  v58(v42 + v44[6], v43 + v44[6], v61);
  v60(v42 + v44[7], v43 + v44[7], v59);
  v57(v42 + v44[8], v43 + v44[8], v56);
  v58(v42 + *(int *)(v55 + 36), v43 + *(int *)(v55 + 36), v61);
  v60(*(int *)(v55 + 40) + v42, *(int *)(v55 + 40) + v43, v59);
  uint64_t v48 = *(int *)(a3 + 24);
  uint64_t v49 = a1 + v48;
  uint64_t v50 = v48 + a2;
  uint64_t v51 = type metadata accessor for Dense(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v51 - 8) + 32))(v49, v50, v51);
  return a1;
}

uint64_t assignWithTake for MLHandActionClassifier.Torso(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3 = type metadata accessor for Conv2D(0);
  uint64_t v4 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v3 - 8) + 40);
  uint64_t v53 = v3;
  v4(a1, a2, v3);
  uint64_t v50 = (int *)type metadata accessor for MLHandActionClassifier.InvertedResidual(0);
  uint64_t v5 = v50[5];
  *(_OWORD *)(a1 + v5) = *(_OWORD *)(a2 + v5);
  *(_OWORD *)(a1 + v5 + 16) = *(_OWORD *)(a2 + v5 + 16);
  *(_OWORD *)(a1 + v5 + 32) = *(_OWORD *)(a2 + v5 + 32);
  *(unsigned char *)(a1 + v5 + 48) = *(unsigned char *)(a2 + v5 + 48);
  v4(v50[6] + a1, a2 + v50[6], v3);
  uint64_t v6 = v50[7];
  uint64_t v51 = type metadata accessor for BatchNorm(0);
  uint64_t v52 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v51 - 8) + 40);
  v52(v6 + a1, a2 + v6, v51);
  uint64_t v7 = v50[8];
  uint64_t v49 = type metadata accessor for Dropout(0);
  uint64_t v48 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v49 - 8) + 40);
  v48(v7 + a1, a2 + v7, v49);
  uint64_t v47 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for MLHandActionClassifier.DownsampledResidualLayer<MLHandActionClassifier.InvertedResidual>);
  v4(*(int *)(v47 + 36) + a1, a2 + *(int *)(v47 + 36), v3);
  v52(a1 + *(int *)(v47 + 40), a2 + *(int *)(v47 + 40), v51);
  long long v46 = (int *)type metadata accessor for MLHandActionClassifier.SingleStreamBlock(0);
  uint64_t v8 = v46[5];
  uint64_t v9 = a1 + v8;
  uint64_t v10 = a2 + v8;
  v4(v9, v10, v3);
  uint64_t v11 = v50;
  uint64_t v12 = v50[5];
  *(_OWORD *)(v12 + v9) = *(_OWORD *)(v12 + v10);
  *(_OWORD *)(v12 + v9 + 16) = *(_OWORD *)(v12 + v10 + 16);
  *(_OWORD *)(v12 + v9 + 32) = *(_OWORD *)(v12 + v10 + 32);
  *(unsigned char *)(v12 + v9 + 48) = *(unsigned char *)(v12 + v10 + 48);
  v4(v9 + v50[6], v10 + v50[6], v3);
  v52(v9 + v11[7], v10 + v11[7], v51);
  v48(v9 + v11[8], v10 + v11[8], v49);
  v4(v9 + *(int *)(v47 + 36), v10 + *(int *)(v47 + 36), v3);
  v52(*(int *)(v47 + 40) + v9, *(int *)(v47 + 40) + v10, v51);
  uint64_t v13 = v46[6];
  uint64_t v14 = a1 + v13;
  uint64_t v15 = a2 + v13;
  v4(v14, v15, v3);
  long long v16 = v50;
  uint64_t v17 = v50[5];
  *(_OWORD *)(v17 + v14) = *(_OWORD *)(v17 + v15);
  *(_OWORD *)(v17 + v14 + 16) = *(_OWORD *)(v17 + v15 + 16);
  *(_OWORD *)(v17 + v14 + 32) = *(_OWORD *)(v17 + v15 + 32);
  *(unsigned char *)(v17 + v14 + 48) = *(unsigned char *)(v17 + v15 + 48);
  v4(v14 + v50[6], v15 + v50[6], v3);
  v52(v14 + v16[7], v15 + v16[7], v51);
  v48(v14 + v16[8], v15 + v16[8], v49);
  v4(v14 + *(int *)(v47 + 36), v15 + *(int *)(v47 + 36), v3);
  v52(*(int *)(v47 + 40) + v14, *(int *)(v47 + 40) + v15, v51);
  uint64_t v18 = v46[7];
  uint64_t v19 = a1 + v18;
  uint64_t v20 = a2 + v18;
  v4(v19, v20, v3);
  long long v21 = v50;
  uint64_t v22 = v50[5];
  *(_OWORD *)(v22 + v19) = *(_OWORD *)(v22 + v20);
  *(_OWORD *)(v22 + v19 + 16) = *(_OWORD *)(v22 + v20 + 16);
  *(_OWORD *)(v22 + v19 + 32) = *(_OWORD *)(v22 + v20 + 32);
  *(unsigned char *)(v22 + v19 + 48) = *(unsigned char *)(v22 + v20 + 48);
  v4(v19 + v50[6], v20 + v50[6], v3);
  v52(v19 + v21[7], v20 + v21[7], v51);
  v48(v19 + v21[8], v20 + v21[8], v49);
  v4(v19 + *(int *)(v47 + 36), v20 + *(int *)(v47 + 36), v3);
  v52(*(int *)(v47 + 40) + v19, *(int *)(v47 + 40) + v20, v51);
  uint64_t v23 = v46[8];
  uint64_t v24 = a1 + v23;
  uint64_t v25 = a2 + v23;
  v4(v24, v25, v3);
  uint64_t v26 = v50;
  uint64_t v27 = v50[5];
  *(_OWORD *)(v27 + v24) = *(_OWORD *)(v27 + v25);
  *(_OWORD *)(v27 + v24 + 16) = *(_OWORD *)(v27 + v25 + 16);
  *(_OWORD *)(v27 + v24 + 32) = *(_OWORD *)(v27 + v25 + 32);
  *(unsigned char *)(v27 + v24 + 48) = *(unsigned char *)(v27 + v25 + 48);
  v4(v24 + v50[6], v25 + v50[6], v3);
  v52(v24 + v26[7], v25 + v26[7], v51);
  v48(v26[8] + v24, v26[8] + v25, v49);
  uint64_t v28 = v46[9];
  uint64_t v29 = a1 + v28;
  uint64_t v30 = a2 + v28;
  v4(v29, v30, v3);
  uint64_t v31 = v50[5];
  *(_OWORD *)(v31 + v29) = *(_OWORD *)(v31 + v30);
  *(_OWORD *)(v31 + v29 + 16) = *(_OWORD *)(v31 + v30 + 16);
  *(_OWORD *)(v31 + v29 + 32) = *(_OWORD *)(v31 + v30 + 32);
  *(unsigned char *)(v31 + v29 + 48) = *(unsigned char *)(v31 + v30 + 48);
  v4(v29 + v26[6], v30 + v26[6], v3);
  v52(v29 + v50[7], v30 + v50[7], v51);
  v48(v29 + v50[8], v30 + v50[8], v49);
  v4(v29 + *(int *)(v47 + 36), v30 + *(int *)(v47 + 36), v3);
  v52(*(int *)(v47 + 40) + v29, *(int *)(v47 + 40) + v30, v51);
  uint64_t v32 = v46[10];
  uint64_t v33 = a1 + v32;
  uint64_t v34 = a2 + v32;
  v4(v33, v34, v3);
  uint64_t v35 = v4;
  uint64_t v36 = v50;
  uint64_t v37 = v50[5];
  *(_OWORD *)(v37 + v33) = *(_OWORD *)(v37 + v34);
  *(_OWORD *)(v37 + v33 + 16) = *(_OWORD *)(v37 + v34 + 16);
  *(_OWORD *)(v37 + v33 + 32) = *(_OWORD *)(v37 + v34 + 32);
  *(unsigned char *)(v37 + v33 + 48) = *(unsigned char *)(v37 + v34 + 48);
  uint64_t v38 = v3;
  long long v39 = v35;
  v35(v33 + v50[6], v34 + v50[6], v38);
  v52(v33 + v36[7], v34 + v36[7], v51);
  v48(v33 + v36[8], v34 + v36[8], v49);
  v39(v33 + *(int *)(v47 + 36), v34 + *(int *)(v47 + 36), v53);
  v52(*(int *)(v47 + 40) + v33, *(int *)(v47 + 40) + v34, v51);
  uint64_t v40 = *(int *)(a3 + 24);
  uint64_t v41 = a1 + v40;
  uint64_t v42 = v40 + a2;
  uint64_t v43 = type metadata accessor for Dense(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v43 - 8) + 40))(v41, v42, v43);
  return a1;
}

uint64_t getEnumTagSinglePayload for MLHandActionClassifier.Torso(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_1CE610);
}

uint64_t sub_1CE610(uint64_t a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4 = a1;
  uint64_t v5 = type metadata accessor for MLHandActionClassifier.SingleStreamBlock(0);
  if (*(_DWORD *)(*(void *)(v5 - 8) + 84) != a2)
  {
    uint64_t v5 = type metadata accessor for Dense(0);
    uint64_t v4 = *(int *)(a3 + 24) + a1;
  }
  return __swift_getEnumTagSinglePayload(v4, a2, v5);
}

uint64_t storeEnumTagSinglePayload for MLHandActionClassifier.Torso(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_1CE668);
}

uint64_t sub_1CE668(uint64_t a1, unsigned int a2, int a3, uint64_t a4)
{
  uint64_t v6 = a1;
  uint64_t v7 = type metadata accessor for MLHandActionClassifier.SingleStreamBlock(0);
  if (*(_DWORD *)(*(void *)(v7 - 8) + 84) != a3)
  {
    uint64_t v7 = type metadata accessor for Dense(0);
    uint64_t v6 = *(int *)(a4 + 24) + a1;
  }
  return __swift_storeEnumTagSinglePayload(v6, a2, a2, v7);
}

uint64_t type metadata completion function for MLHandActionClassifier.Torso(uint64_t a1)
{
  uint64_t result = type metadata accessor for MLHandActionClassifier.SingleStreamBlock(319);
  if (v2 <= 0x3F)
  {
    v4[0] = *(void *)(result - 8) + 64;
    v4[1] = (char *)&value witness table for () + 64;
    uint64_t result = type metadata accessor for Dense(319);
    if (v3 <= 0x3F)
    {
      v4[2] = *(void *)(result - 8) + 64;
      swift_initStructMetadata(a1, 256, 3, v4, a1 + 16);
      return 0;
    }
  }
  return result;
}

void *initializeBufferWithCopyOfBuffer for MLHandActionClassifier.SingleStreamBlock(void *a1, char *a2, int *a3)
{
  unint64_t v3 = a1;
  int v4 = *(_DWORD *)(*((void *)a3 - 1) + 80);
  if ((v4 & 0x20000) != 0)
  {
    uint64_t v53 = *(void *)a2;
    *unint64_t v3 = *(void *)a2;
    unint64_t v3 = (void *)(v53 + ((v4 + 16) & ~v4));
    swift_retain();
  }
  else
  {
    uint64_t v5 = type metadata accessor for Conv2D(0);
    uint64_t v6 = *(void (**)(char *, char *, uint64_t))(*(void *)(v5 - 8) + 16);
    uint64_t v62 = v5;
    v6((char *)a1, a2, v5);
    uint64_t v60 = v6;
    uint64_t v7 = (int *)type metadata accessor for MLHandActionClassifier.InvertedResidual(0);
    uint64_t v8 = v7[5];
    *((unsigned char *)a1 + v8 + 48) = a2[v8 + 48];
    long long v9 = *(_OWORD *)&a2[v8];
    long long v10 = *(_OWORD *)&a2[v8 + 16];
    *(_OWORD *)((char *)a1 + v8 + 32) = *(_OWORD *)&a2[v8 + 32];
    *(_OWORD *)((char *)a1 + v8 + 16) = v10;
    *(_OWORD *)((char *)a1 + v8) = v9;
    v6((char *)a1 + v7[6], &a2[v7[6]], v5);
    uint64_t v11 = v7[7];
    uint64_t v56 = v7;
    uint64_t v61 = type metadata accessor for BatchNorm(0);
    uint64_t v63 = *(void (**)(char *, char *, uint64_t))(*(void *)(v61 - 8) + 16);
    v63((char *)a1 + v11, &a2[v11], v61);
    uint64_t v12 = v7[8];
    uint64_t v59 = type metadata accessor for Dropout(0);
    uint64_t v58 = *(void (**)(char *, char *, uint64_t))(*(void *)(v59 - 8) + 16);
    v58((char *)a1 + v12, &a2[v12], v59);
    uint64_t v55 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for MLHandActionClassifier.DownsampledResidualLayer<MLHandActionClassifier.InvertedResidual>);
    v60((char *)a1 + *(int *)(v55 + 36), &a2[*(int *)(v55 + 36)], v5);
    v63((char *)a1 + *(int *)(v55 + 40), &a2[*(int *)(v55 + 40)], v61);
    uint64_t v13 = a3[5];
    uint64_t v14 = (char *)a1 + v13;
    uint64_t v15 = &a2[v13];
    v60(v14, v15, v5);
    long long v16 = v56;
    uint64_t v17 = v56[5];
    v14[v17 + 48] = v15[v17 + 48];
    long long v18 = *(_OWORD *)&v15[v17];
    long long v19 = *(_OWORD *)&v15[v17 + 16];
    *(_OWORD *)&v14[v17 + 32] = *(_OWORD *)&v15[v17 + 32];
    *(_OWORD *)&v14[v17 + 16] = v19;
    *(_OWORD *)&v14[v17] = v18;
    v60(&v14[v56[6]], &v15[v56[6]], v62);
    v63(&v14[v16[7]], &v15[v16[7]], v61);
    v58(&v14[v16[8]], &v15[v16[8]], v59);
    v60(&v14[*(int *)(v55 + 36)], &v15[*(int *)(v55 + 36)], v62);
    v63(&v14[*(int *)(v55 + 40)], &v15[*(int *)(v55 + 40)], v61);
    uint64_t v20 = a3[6];
    long long v21 = (char *)a1 + v20;
    uint64_t v22 = &a2[v20];
    v60(v21, v22, v62);
    uint64_t v23 = v56;
    uint64_t v24 = v56[5];
    v21[v24 + 48] = v22[v24 + 48];
    long long v25 = *(_OWORD *)&v22[v24];
    long long v26 = *(_OWORD *)&v22[v24 + 16];
    *(_OWORD *)&v21[v24 + 32] = *(_OWORD *)&v22[v24 + 32];
    *(_OWORD *)&v21[v24 + 16] = v26;
    *(_OWORD *)&v21[v24] = v25;
    v60(&v21[v56[6]], &v22[v56[6]], v62);
    v63(&v21[v23[7]], &v22[v23[7]], v61);
    v58(&v21[v23[8]], &v22[v23[8]], v59);
    v60(&v21[*(int *)(v55 + 36)], &v22[*(int *)(v55 + 36)], v62);
    v63(&v21[*(int *)(v55 + 40)], &v22[*(int *)(v55 + 40)], v61);
    uint64_t v27 = a3[7];
    uint64_t v28 = (char *)a1 + v27;
    uint64_t v29 = &a2[v27];
    v60(v28, v29, v62);
    uint64_t v30 = v56[5];
    v28[v30 + 48] = v29[v30 + 48];
    long long v31 = *(_OWORD *)&v29[v30];
    long long v32 = *(_OWORD *)&v29[v30 + 16];
    *(_OWORD *)&v28[v30 + 32] = *(_OWORD *)&v29[v30 + 32];
    *(_OWORD *)&v28[v30 + 16] = v32;
    *(_OWORD *)&v28[v30] = v31;
    v60(&v28[v56[6]], &v29[v56[6]], v62);
    v63(&v28[v56[7]], &v29[v56[7]], v61);
    v58(&v28[v56[8]], &v29[v56[8]], v59);
    v60(&v28[*(int *)(v55 + 36)], &v29[*(int *)(v55 + 36)], v62);
    v63(&v28[*(int *)(v55 + 40)], &v29[*(int *)(v55 + 40)], v61);
    uint64_t v33 = a3[8];
    uint64_t v34 = (char *)a1 + v33;
    uint64_t v35 = &a2[v33];
    v60(v34, v35, v62);
    uint64_t v36 = v56;
    uint64_t v37 = v56[5];
    v34[v37 + 48] = v35[v37 + 48];
    long long v38 = *(_OWORD *)&v35[v37];
    long long v39 = *(_OWORD *)&v35[v37 + 16];
    *(_OWORD *)&v34[v37 + 32] = *(_OWORD *)&v35[v37 + 32];
    *(_OWORD *)&v34[v37 + 16] = v39;
    *(_OWORD *)&v34[v37] = v38;
    v60(&v34[v56[6]], &v35[v56[6]], v62);
    v63(&v34[v36[7]], &v35[v36[7]], v61);
    v58(&v34[v36[8]], &v35[v36[8]], v59);
    uint64_t v40 = a3[9];
    uint64_t v41 = (char *)a1 + v40;
    uint64_t v42 = &a2[v40];
    v60(v41, v42, v62);
    uint64_t v43 = v56[5];
    v41[v43 + 48] = v42[v43 + 48];
    long long v44 = *(_OWORD *)&v42[v43];
    long long v45 = *(_OWORD *)&v42[v43 + 16];
    *(_OWORD *)&v41[v43 + 32] = *(_OWORD *)&v42[v43 + 32];
    *(_OWORD *)&v41[v43 + 16] = v45;
    *(_OWORD *)&v41[v43] = v44;
    v60(&v41[v36[6]], &v42[v36[6]], v62);
    v63(&v41[v36[7]], &v42[v36[7]], v61);
    v58(&v41[v36[8]], &v42[v36[8]], v59);
    v60(&v41[*(int *)(v55 + 36)], &v42[*(int *)(v55 + 36)], v62);
    v63(&v41[*(int *)(v55 + 40)], &v42[*(int *)(v55 + 40)], v61);
    uint64_t v46 = a3[10];
    uint64_t v47 = (char *)a1 + v46;
    uint64_t v48 = &a2[v46];
    v60((char *)a1 + v46, &a2[v46], v62);
    uint64_t v49 = v56;
    uint64_t v50 = v56[5];
    v47[v50 + 48] = v48[v50 + 48];
    long long v51 = *(_OWORD *)&v48[v50];
    long long v52 = *(_OWORD *)&v48[v50 + 16];
    *(_OWORD *)&v47[v50 + 32] = *(_OWORD *)&v48[v50 + 32];
    *(_OWORD *)&v47[v50 + 16] = v52;
    *(_OWORD *)&v47[v50] = v51;
    v60(&v47[v56[6]], &v48[v56[6]], v62);
    v63(&v47[v49[7]], &v48[v49[7]], v61);
    v58(&v47[v49[8]], &v48[v49[8]], v59);
    v60(&v47[*(int *)(v55 + 36)], &v48[*(int *)(v55 + 36)], v62);
    v63(&v47[*(int *)(v55 + 40)], &v48[*(int *)(v55 + 40)], v61);
  }
  return v3;
}

uint64_t destroy for MLHandActionClassifier.SingleStreamBlock(uint64_t a1, int *a2)
{
  uint64_t v2 = type metadata accessor for Conv2D(0);
  unint64_t v3 = *(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8);
  v3(a1, v2);
  int v4 = (int *)type metadata accessor for MLHandActionClassifier.InvertedResidual(0);
  v3(a1 + v4[6], v2);
  uint64_t v5 = a1 + v4[7];
  uint64_t v14 = type metadata accessor for BatchNorm(0);
  long long v18 = *(void (**)(uint64_t, uint64_t))(*(void *)(v14 - 8) + 8);
  v18(v5, v14);
  uint64_t v6 = a1 + v4[8];
  uint64_t v17 = type metadata accessor for Dropout(0);
  uint64_t v15 = *(void (**)(uint64_t, uint64_t))(*(void *)(v17 - 8) + 8);
  v15(v6, v17);
  uint64_t v16 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for MLHandActionClassifier.DownsampledResidualLayer<MLHandActionClassifier.InvertedResidual>);
  v3(a1 + *(int *)(v16 + 36), v2);
  v18(a1 + *(int *)(v16 + 40), v14);
  uint64_t v7 = a1 + a2[5];
  v3(v7, v2);
  v3(v7 + v4[6], v2);
  v18(v7 + v4[7], v14);
  v15(v7 + v4[8], v17);
  v3(v7 + *(int *)(v16 + 36), v2);
  v18(v7 + *(int *)(v16 + 40), v14);
  uint64_t v8 = a1 + a2[6];
  v3(v8, v2);
  v3(v8 + v4[6], v2);
  v18(v8 + v4[7], v14);
  v15(v8 + v4[8], v17);
  v3(v8 + *(int *)(v16 + 36), v2);
  v18(v8 + *(int *)(v16 + 40), v14);
  uint64_t v9 = a1 + a2[7];
  v3(v9, v2);
  v3(v9 + v4[6], v2);
  v18(v9 + v4[7], v14);
  v15(v9 + v4[8], v17);
  v3(v9 + *(int *)(v16 + 36), v2);
  v18(v9 + *(int *)(v16 + 40), v14);
  uint64_t v10 = a1 + a2[8];
  v3(v10, v2);
  v3(v10 + v4[6], v2);
  v18(v10 + v4[7], v14);
  v15(v10 + v4[8], v17);
  uint64_t v11 = a1 + a2[9];
  v3(v11, v2);
  v3(v11 + v4[6], v2);
  v18(v11 + v4[7], v14);
  v15(v11 + v4[8], v17);
  v3(v11 + *(int *)(v16 + 36), v2);
  v18(v11 + *(int *)(v16 + 40), v14);
  uint64_t v12 = a1 + a2[10];
  v3(v12, v2);
  v3(v12 + v4[6], v2);
  v18(v12 + v4[7], v14);
  v15(v12 + v4[8], v17);
  v3(v12 + *(int *)(v16 + 36), v2);
  return ((uint64_t (*)(uint64_t, uint64_t))v18)(v12 + *(int *)(v16 + 40), v14);
}

uint64_t initializeWithCopy for MLHandActionClassifier.SingleStreamBlock(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v3 = type metadata accessor for Conv2D(0);
  uint64_t v55 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v3 - 8) + 16);
  uint64_t v53 = v3;
  v55(a1, a2, v3);
  uint64_t v4 = type metadata accessor for MLHandActionClassifier.InvertedResidual(0);
  uint64_t v5 = *(int *)(v4 + 20);
  *(unsigned char *)(a1 + v5 + 48) = *(unsigned char *)(a2 + v5 + 48);
  long long v6 = *(_OWORD *)(a2 + v5);
  long long v7 = *(_OWORD *)(a2 + v5 + 16);
  *(_OWORD *)(a1 + v5 + 32) = *(_OWORD *)(a2 + v5 + 32);
  *(_OWORD *)(a1 + v5 + 16) = v7;
  *(_OWORD *)(a1 + v5) = v6;
  uint64_t v8 = (int *)v4;
  v55(a1 + *(int *)(v4 + 24), a2 + *(int *)(v4 + 24), v3);
  uint64_t v9 = v8[7];
  uint64_t v49 = v8;
  uint64_t v56 = type metadata accessor for BatchNorm(0);
  uint64_t v54 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v56 - 8) + 16);
  v54(a1 + v9, a2 + v9, v56);
  uint64_t v10 = v8[8];
  uint64_t v51 = type metadata accessor for Dropout(0);
  uint64_t v50 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v51 - 8) + 16);
  v50(a1 + v10, a2 + v10, v51);
  uint64_t v48 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for MLHandActionClassifier.DownsampledResidualLayer<MLHandActionClassifier.InvertedResidual>);
  v55(a1 + *(int *)(v48 + 36), a2 + *(int *)(v48 + 36), v3);
  v54(a1 + *(int *)(v48 + 40), a2 + *(int *)(v48 + 40), v56);
  uint64_t v11 = a3[5];
  uint64_t v12 = a1 + v11;
  uint64_t v13 = a2 + v11;
  v55(v12, v13, v53);
  uint64_t v14 = v8[5];
  *(unsigned char *)(v14 + v12 + 48) = *(unsigned char *)(v14 + v13 + 48);
  long long v15 = *(_OWORD *)(v14 + v13);
  long long v16 = *(_OWORD *)(v14 + v13 + 16);
  *(_OWORD *)(v14 + v12 + 32) = *(_OWORD *)(v14 + v13 + 32);
  *(_OWORD *)(v14 + v12 + 16) = v16;
  *(_OWORD *)(v14 + v12) = v15;
  v55(v12 + v8[6], v13 + v8[6], v53);
  v54(v12 + v8[7], v13 + v8[7], v56);
  v50(v12 + v8[8], v13 + v8[8], v51);
  v55(v12 + *(int *)(v48 + 36), v13 + *(int *)(v48 + 36), v53);
  v54(*(int *)(v48 + 40) + v12, *(int *)(v48 + 40) + v13, v56);
  uint64_t v17 = a3[6];
  uint64_t v18 = a1 + v17;
  uint64_t v19 = a2 + v17;
  v55(v18, v19, v53);
  uint64_t v20 = v8[5];
  *(unsigned char *)(v20 + v18 + 48) = *(unsigned char *)(v20 + v19 + 48);
  long long v21 = *(_OWORD *)(v20 + v19);
  long long v22 = *(_OWORD *)(v20 + v19 + 16);
  *(_OWORD *)(v20 + v18 + 32) = *(_OWORD *)(v20 + v19 + 32);
  *(_OWORD *)(v20 + v18 + 16) = v22;
  *(_OWORD *)(v20 + v18) = v21;
  v55(v18 + v49[6], v19 + v49[6], v53);
  v54(v18 + v49[7], v19 + v49[7], v56);
  v50(v18 + v49[8], v19 + v49[8], v51);
  v55(v18 + *(int *)(v48 + 36), v19 + *(int *)(v48 + 36), v53);
  v54(*(int *)(v48 + 40) + v18, *(int *)(v48 + 40) + v19, v56);
  uint64_t v23 = a3[7];
  uint64_t v24 = a1 + v23;
  uint64_t v25 = a2 + v23;
  v55(v24, v25, v53);
  uint64_t v26 = v8[5];
  *(unsigned char *)(v26 + v24 + 48) = *(unsigned char *)(v26 + v25 + 48);
  long long v27 = *(_OWORD *)(v26 + v25);
  long long v28 = *(_OWORD *)(v26 + v25 + 16);
  *(_OWORD *)(v26 + v24 + 32) = *(_OWORD *)(v26 + v25 + 32);
  *(_OWORD *)(v26 + v24 + 16) = v28;
  *(_OWORD *)(v26 + v24) = v27;
  v55(v24 + v49[6], v25 + v49[6], v53);
  v54(v24 + v8[7], v25 + v8[7], v56);
  v50(v24 + v8[8], v25 + v8[8], v51);
  v55(v24 + *(int *)(v48 + 36), v25 + *(int *)(v48 + 36), v53);
  v54(*(int *)(v48 + 40) + v24, *(int *)(v48 + 40) + v25, v56);
  uint64_t v29 = a3[8];
  uint64_t v30 = a1 + v29;
  uint64_t v31 = a2 + v29;
  v55(v30, v31, v53);
  uint64_t v32 = v8[5];
  *(unsigned char *)(v32 + v30 + 48) = *(unsigned char *)(v32 + v31 + 48);
  long long v33 = *(_OWORD *)(v32 + v31);
  long long v34 = *(_OWORD *)(v32 + v31 + 16);
  *(_OWORD *)(v32 + v30 + 32) = *(_OWORD *)(v32 + v31 + 32);
  *(_OWORD *)(v32 + v30 + 16) = v34;
  *(_OWORD *)(v32 + v30) = v33;
  v55(v49[6] + v30, v31 + v49[6], v53);
  v54(v8[7] + v30, v31 + v8[7], v56);
  v50(v8[8] + v30, v8[8] + v31, v51);
  uint64_t v35 = a3[9];
  uint64_t v36 = a1 + v35;
  uint64_t v37 = a2 + v35;
  v55(v36, v37, v53);
  uint64_t v38 = v8[5];
  *(unsigned char *)(v38 + v36 + 48) = *(unsigned char *)(v38 + v37 + 48);
  long long v39 = *(_OWORD *)(v38 + v37);
  long long v40 = *(_OWORD *)(v38 + v37 + 16);
  *(_OWORD *)(v38 + v36 + 32) = *(_OWORD *)(v38 + v37 + 32);
  *(_OWORD *)(v38 + v36 + 16) = v40;
  *(_OWORD *)(v38 + v36) = v39;
  v55(v36 + v8[6], v37 + v8[6], v53);
  v54(v36 + v8[7], v37 + v8[7], v56);
  v50(v36 + v8[8], v37 + v8[8], v51);
  v55(v36 + *(int *)(v48 + 36), v37 + *(int *)(v48 + 36), v53);
  v54(*(int *)(v48 + 40) + v36, *(int *)(v48 + 40) + v37, v56);
  uint64_t v41 = a3[10];
  uint64_t v42 = a1 + v41;
  uint64_t v43 = v41 + a2;
  v55(a1 + v41, v41 + a2, v53);
  uint64_t v44 = v8[5];
  *(unsigned char *)(v44 + v42 + 48) = *(unsigned char *)(v44 + v43 + 48);
  long long v45 = *(_OWORD *)(v44 + v43);
  long long v46 = *(_OWORD *)(v44 + v43 + 16);
  *(_OWORD *)(v44 + v42 + 32) = *(_OWORD *)(v44 + v43 + 32);
  *(_OWORD *)(v44 + v42 + 16) = v46;
  *(_OWORD *)(v44 + v42) = v45;
  v55(v42 + v8[6], v43 + v8[6], v53);
  v54(v42 + v8[7], v43 + v8[7], v56);
  v50(v42 + v8[8], v43 + v8[8], v51);
  v55(v42 + *(int *)(v48 + 36), v43 + *(int *)(v48 + 36), v53);
  v54(*(int *)(v48 + 40) + v42, *(int *)(v48 + 40) + v43, v56);
  return a1;
}

uint64_t assignWithCopy for MLHandActionClassifier.SingleStreamBlock(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v3 = type metadata accessor for Conv2D(0);
  uint64_t v41 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v3 - 8) + 24);
  uint64_t v38 = v3;
  v41(a1, a2, v3);
  uint64_t v4 = type metadata accessor for MLHandActionClassifier.InvertedResidual(0);
  uint64_t v5 = *(int *)(v4 + 20);
  long long v6 = (int *)v4;
  *(void *)(a1 + v5) = *(void *)(a2 + v5);
  *(void *)(a1 + v5 + 8) = *(void *)(a2 + v5 + 8);
  *(void *)(a1 + v5 + 16) = *(void *)(a2 + v5 + 16);
  *(void *)(a1 + v5 + 24) = *(void *)(a2 + v5 + 24);
  *(void *)(a1 + v5 + 32) = *(void *)(a2 + v5 + 32);
  *(void *)(a1 + v5 + 40) = *(void *)(a2 + v5 + 40);
  *(unsigned char *)(a1 + v5 + 48) = *(unsigned char *)(a2 + v5 + 48);
  v41(a1 + *(int *)(v4 + 24), a2 + *(int *)(v4 + 24), v3);
  uint64_t v7 = v6[7];
  uint64_t v40 = type metadata accessor for BatchNorm(0);
  long long v39 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v40 - 8) + 24);
  v39(a1 + v7, a2 + v7, v40);
  uint64_t v8 = v6[8];
  uint64_t v36 = type metadata accessor for Dropout(0);
  uint64_t v35 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v36 - 8) + 24);
  v35(a1 + v8, a2 + v8, v36);
  uint64_t v34 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for MLHandActionClassifier.DownsampledResidualLayer<MLHandActionClassifier.InvertedResidual>);
  v41(a1 + *(int *)(v34 + 36), a2 + *(int *)(v34 + 36), v3);
  v39(a1 + *(int *)(v34 + 40), a2 + *(int *)(v34 + 40), v40);
  uint64_t v9 = a3[5];
  uint64_t v10 = a1 + v9;
  uint64_t v11 = a2 + v9;
  v41(v10, v11, v38);
  uint64_t v12 = v6[5];
  *(void *)(v12 + v10) = *(void *)(v12 + v11);
  *(void *)(v12 + v10 + 8) = *(void *)(v12 + v11 + 8);
  *(void *)(v12 + v10 + 16) = *(void *)(v12 + v11 + 16);
  *(void *)(v12 + v10 + 24) = *(void *)(v12 + v11 + 24);
  *(void *)(v12 + v10 + 32) = *(void *)(v12 + v11 + 32);
  *(void *)(v12 + v10 + 40) = *(void *)(v12 + v11 + 40);
  *(unsigned char *)(v12 + v10 + 48) = *(unsigned char *)(v12 + v11 + 48);
  v41(v10 + v6[6], v11 + v6[6], v38);
  v39(v10 + v6[7], v11 + v6[7], v40);
  v35(v10 + v6[8], v11 + v6[8], v36);
  v41(v10 + *(int *)(v34 + 36), v11 + *(int *)(v34 + 36), v38);
  v39(*(int *)(v34 + 40) + v10, *(int *)(v34 + 40) + v11, v40);
  uint64_t v13 = a3[6];
  uint64_t v14 = a1 + v13;
  uint64_t v15 = a2 + v13;
  v41(v14, v15, v38);
  uint64_t v16 = v6[5];
  *(void *)(v16 + v14) = *(void *)(v16 + v15);
  *(void *)(v16 + v14 + 8) = *(void *)(v16 + v15 + 8);
  *(void *)(v16 + v14 + 16) = *(void *)(v16 + v15 + 16);
  *(void *)(v16 + v14 + 24) = *(void *)(v16 + v15 + 24);
  *(void *)(v16 + v14 + 32) = *(void *)(v16 + v15 + 32);
  *(void *)(v16 + v14 + 40) = *(void *)(v16 + v15 + 40);
  *(unsigned char *)(v16 + v14 + 48) = *(unsigned char *)(v16 + v15 + 48);
  v41(v14 + v6[6], v15 + v6[6], v38);
  v39(v14 + v6[7], v15 + v6[7], v40);
  v35(v14 + v6[8], v15 + v6[8], v36);
  v41(v14 + *(int *)(v34 + 36), v15 + *(int *)(v34 + 36), v38);
  v39(*(int *)(v34 + 40) + v14, *(int *)(v34 + 40) + v15, v40);
  uint64_t v17 = a3[7];
  uint64_t v18 = a1 + v17;
  uint64_t v19 = a2 + v17;
  v41(v18, v19, v38);
  uint64_t v20 = v6[5];
  *(void *)(v20 + v18) = *(void *)(v20 + v19);
  *(void *)(v20 + v18 + 8) = *(void *)(v20 + v19 + 8);
  *(void *)(v20 + v18 + 16) = *(void *)(v20 + v19 + 16);
  *(void *)(v20 + v18 + 24) = *(void *)(v20 + v19 + 24);
  *(void *)(v20 + v18 + 32) = *(void *)(v20 + v19 + 32);
  *(void *)(v20 + v18 + 40) = *(void *)(v20 + v19 + 40);
  *(unsigned char *)(v20 + v18 + 48) = *(unsigned char *)(v20 + v19 + 48);
  v41(v18 + v6[6], v19 + v6[6], v38);
  v39(v18 + v6[7], v19 + v6[7], v40);
  v35(v18 + v6[8], v19 + v6[8], v36);
  v41(v18 + *(int *)(v34 + 36), v19 + *(int *)(v34 + 36), v38);
  v39(*(int *)(v34 + 40) + v18, *(int *)(v34 + 40) + v19, v40);
  uint64_t v21 = a3[8];
  uint64_t v22 = a1 + v21;
  uint64_t v23 = a2 + v21;
  v41(v22, v23, v38);
  uint64_t v24 = v6[5];
  *(void *)(v24 + v22) = *(void *)(v24 + v23);
  *(void *)(v24 + v22 + 8) = *(void *)(v24 + v23 + 8);
  *(void *)(v24 + v22 + 16) = *(void *)(v24 + v23 + 16);
  *(void *)(v24 + v22 + 24) = *(void *)(v24 + v23 + 24);
  *(void *)(v24 + v22 + 32) = *(void *)(v24 + v23 + 32);
  *(void *)(v24 + v22 + 40) = *(void *)(v24 + v23 + 40);
  *(unsigned char *)(v24 + v22 + 48) = *(unsigned char *)(v24 + v23 + 48);
  v41(v6[6] + v22, v23 + v6[6], v38);
  v39(v6[7] + v22, v23 + v6[7], v40);
  v35(v6[8] + v22, v6[8] + v23, v36);
  uint64_t v25 = a3[9];
  uint64_t v26 = a1 + v25;
  uint64_t v27 = a2 + v25;
  v41(v26, v27, v38);
  uint64_t v28 = v6[5];
  *(void *)(v28 + v26) = *(void *)(v28 + v27);
  *(void *)(v28 + v26 + 8) = *(void *)(v28 + v27 + 8);
  *(void *)(v28 + v26 + 16) = *(void *)(v28 + v27 + 16);
  *(void *)(v28 + v26 + 24) = *(void *)(v28 + v27 + 24);
  *(void *)(v28 + v26 + 32) = *(void *)(v28 + v27 + 32);
  *(void *)(v28 + v26 + 40) = *(void *)(v28 + v27 + 40);
  *(unsigned char *)(v28 + v26 + 48) = *(unsigned char *)(v28 + v27 + 48);
  v41(v26 + v6[6], v27 + v6[6], v38);
  v39(v26 + v6[7], v27 + v6[7], v40);
  v35(v26 + v6[8], v27 + v6[8], v36);
  v41(v26 + *(int *)(v34 + 36), v27 + *(int *)(v34 + 36), v38);
  v39(*(int *)(v34 + 40) + v26, *(int *)(v34 + 40) + v27, v40);
  uint64_t v29 = a3[10];
  uint64_t v30 = a1 + v29;
  uint64_t v31 = v29 + a2;
  v41(a1 + v29, v29 + a2, v38);
  uint64_t v32 = v6[5];
  *(void *)(v32 + v30) = *(void *)(v32 + v31);
  *(void *)(v32 + v30 + 8) = *(void *)(v32 + v31 + 8);
  *(void *)(v32 + v30 + 16) = *(void *)(v32 + v31 + 16);
  *(void *)(v32 + v30 + 24) = *(void *)(v32 + v31 + 24);
  *(void *)(v32 + v30 + 32) = *(void *)(v32 + v31 + 32);
  *(void *)(v32 + v30 + 40) = *(void *)(v32 + v31 + 40);
  *(unsigned char *)(v32 + v30 + 48) = *(unsigned char *)(v32 + v31 + 48);
  v41(v30 + v6[6], v31 + v6[6], v38);
  v39(v30 + v6[7], v31 + v6[7], v40);
  v35(v30 + v6[8], v31 + v6[8], v36);
  v41(v30 + *(int *)(v34 + 36), v31 + *(int *)(v34 + 36), v38);
  v39(*(int *)(v34 + 40) + v30, *(int *)(v34 + 40) + v31, v40);
  return a1;
}

uint64_t initializeWithTake for MLHandActionClassifier.SingleStreamBlock(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v3 = type metadata accessor for Conv2D(0);
  uint64_t v55 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v3 - 8) + 32);
  uint64_t v53 = v3;
  v55(a1, a2, v3);
  uint64_t v4 = type metadata accessor for MLHandActionClassifier.InvertedResidual(0);
  uint64_t v5 = *(int *)(v4 + 20);
  *(unsigned char *)(a1 + v5 + 48) = *(unsigned char *)(a2 + v5 + 48);
  long long v6 = *(_OWORD *)(a2 + v5);
  long long v7 = *(_OWORD *)(a2 + v5 + 16);
  *(_OWORD *)(a1 + v5 + 32) = *(_OWORD *)(a2 + v5 + 32);
  *(_OWORD *)(a1 + v5 + 16) = v7;
  *(_OWORD *)(a1 + v5) = v6;
  uint64_t v8 = (int *)v4;
  v55(a1 + *(int *)(v4 + 24), a2 + *(int *)(v4 + 24), v3);
  uint64_t v9 = v8[7];
  uint64_t v49 = v8;
  uint64_t v56 = type metadata accessor for BatchNorm(0);
  uint64_t v54 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v56 - 8) + 32);
  v54(a1 + v9, a2 + v9, v56);
  uint64_t v10 = v8[8];
  uint64_t v51 = type metadata accessor for Dropout(0);
  uint64_t v50 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v51 - 8) + 32);
  v50(a1 + v10, a2 + v10, v51);
  uint64_t v48 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for MLHandActionClassifier.DownsampledResidualLayer<MLHandActionClassifier.InvertedResidual>);
  v55(a1 + *(int *)(v48 + 36), a2 + *(int *)(v48 + 36), v3);
  v54(a1 + *(int *)(v48 + 40), a2 + *(int *)(v48 + 40), v56);
  uint64_t v11 = a3[5];
  uint64_t v12 = a1 + v11;
  uint64_t v13 = a2 + v11;
  v55(v12, v13, v53);
  uint64_t v14 = v8[5];
  *(unsigned char *)(v14 + v12 + 48) = *(unsigned char *)(v14 + v13 + 48);
  long long v15 = *(_OWORD *)(v14 + v13);
  long long v16 = *(_OWORD *)(v14 + v13 + 16);
  *(_OWORD *)(v14 + v12 + 32) = *(_OWORD *)(v14 + v13 + 32);
  *(_OWORD *)(v14 + v12 + 16) = v16;
  *(_OWORD *)(v14 + v12) = v15;
  v55(v12 + v8[6], v13 + v8[6], v53);
  v54(v12 + v8[7], v13 + v8[7], v56);
  v50(v12 + v8[8], v13 + v8[8], v51);
  v55(v12 + *(int *)(v48 + 36), v13 + *(int *)(v48 + 36), v53);
  v54(*(int *)(v48 + 40) + v12, *(int *)(v48 + 40) + v13, v56);
  uint64_t v17 = a3[6];
  uint64_t v18 = a1 + v17;
  uint64_t v19 = a2 + v17;
  v55(v18, v19, v53);
  uint64_t v20 = v8[5];
  *(unsigned char *)(v20 + v18 + 48) = *(unsigned char *)(v20 + v19 + 48);
  long long v21 = *(_OWORD *)(v20 + v19);
  long long v22 = *(_OWORD *)(v20 + v19 + 16);
  *(_OWORD *)(v20 + v18 + 32) = *(_OWORD *)(v20 + v19 + 32);
  *(_OWORD *)(v20 + v18 + 16) = v22;
  *(_OWORD *)(v20 + v18) = v21;
  v55(v18 + v49[6], v19 + v49[6], v53);
  v54(v18 + v49[7], v19 + v49[7], v56);
  v50(v18 + v49[8], v19 + v49[8], v51);
  v55(v18 + *(int *)(v48 + 36), v19 + *(int *)(v48 + 36), v53);
  v54(*(int *)(v48 + 40) + v18, *(int *)(v48 + 40) + v19, v56);
  uint64_t v23 = a3[7];
  uint64_t v24 = a1 + v23;
  uint64_t v25 = a2 + v23;
  v55(v24, v25, v53);
  uint64_t v26 = v8[5];
  *(unsigned char *)(v26 + v24 + 48) = *(unsigned char *)(v26 + v25 + 48);
  long long v27 = *(_OWORD *)(v26 + v25);
  long long v28 = *(_OWORD *)(v26 + v25 + 16);
  *(_OWORD *)(v26 + v24 + 32) = *(_OWORD *)(v26 + v25 + 32);
  *(_OWORD *)(v26 + v24 + 16) = v28;
  *(_OWORD *)(v26 + v24) = v27;
  v55(v24 + v49[6], v25 + v49[6], v53);
  v54(v24 + v8[7], v25 + v8[7], v56);
  v50(v24 + v8[8], v25 + v8[8], v51);
  v55(v24 + *(int *)(v48 + 36), v25 + *(int *)(v48 + 36), v53);
  v54(*(int *)(v48 + 40) + v24, *(int *)(v48 + 40) + v25, v56);
  uint64_t v29 = a3[8];
  uint64_t v30 = a1 + v29;
  uint64_t v31 = a2 + v29;
  v55(v30, v31, v53);
  uint64_t v32 = v8[5];
  *(unsigned char *)(v32 + v30 + 48) = *(unsigned char *)(v32 + v31 + 48);
  long long v33 = *(_OWORD *)(v32 + v31);
  long long v34 = *(_OWORD *)(v32 + v31 + 16);
  *(_OWORD *)(v32 + v30 + 32) = *(_OWORD *)(v32 + v31 + 32);
  *(_OWORD *)(v32 + v30 + 16) = v34;
  *(_OWORD *)(v32 + v30) = v33;
  v55(v49[6] + v30, v31 + v49[6], v53);
  v54(v8[7] + v30, v31 + v8[7], v56);
  v50(v8[8] + v30, v8[8] + v31, v51);
  uint64_t v35 = a3[9];
  uint64_t v36 = a1 + v35;
  uint64_t v37 = a2 + v35;
  v55(v36, v37, v53);
  uint64_t v38 = v8[5];
  *(unsigned char *)(v38 + v36 + 48) = *(unsigned char *)(v38 + v37 + 48);
  long long v39 = *(_OWORD *)(v38 + v37);
  long long v40 = *(_OWORD *)(v38 + v37 + 16);
  *(_OWORD *)(v38 + v36 + 32) = *(_OWORD *)(v38 + v37 + 32);
  *(_OWORD *)(v38 + v36 + 16) = v40;
  *(_OWORD *)(v38 + v36) = v39;
  v55(v36 + v8[6], v37 + v8[6], v53);
  v54(v36 + v8[7], v37 + v8[7], v56);
  v50(v36 + v8[8], v37 + v8[8], v51);
  v55(v36 + *(int *)(v48 + 36), v37 + *(int *)(v48 + 36), v53);
  v54(*(int *)(v48 + 40) + v36, *(int *)(v48 + 40) + v37, v56);
  uint64_t v41 = a3[10];
  uint64_t v42 = a1 + v41;
  uint64_t v43 = v41 + a2;
  v55(a1 + v41, v41 + a2, v53);
  uint64_t v44 = v8[5];
  *(unsigned char *)(v44 + v42 + 48) = *(unsigned char *)(v44 + v43 + 48);
  long long v45 = *(_OWORD *)(v44 + v43);
  long long v46 = *(_OWORD *)(v44 + v43 + 16);
  *(_OWORD *)(v44 + v42 + 32) = *(_OWORD *)(v44 + v43 + 32);
  *(_OWORD *)(v44 + v42 + 16) = v46;
  *(_OWORD *)(v44 + v42) = v45;
  v55(v42 + v8[6], v43 + v8[6], v53);
  v54(v42 + v8[7], v43 + v8[7], v56);
  v50(v42 + v8[8], v43 + v8[8], v51);
  v55(v42 + *(int *)(v48 + 36), v43 + *(int *)(v48 + 36), v53);
  v54(*(int *)(v48 + 40) + v42, *(int *)(v48 + 40) + v43, v56);
  return a1;
}

uint64_t assignWithTake for MLHandActionClassifier.SingleStreamBlock(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v3 = type metadata accessor for Conv2D(0);
  long long v39 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v3 - 8) + 40);
  uint64_t v41 = v3;
  v39(a1, a2, v3);
  uint64_t v4 = type metadata accessor for MLHandActionClassifier.InvertedResidual(0);
  uint64_t v5 = *(int *)(v4 + 20);
  *(_OWORD *)(a1 + v5) = *(_OWORD *)(a2 + v5);
  *(_OWORD *)(a1 + v5 + 16) = *(_OWORD *)(a2 + v5 + 16);
  *(_OWORD *)(a1 + v5 + 32) = *(_OWORD *)(a2 + v5 + 32);
  *(unsigned char *)(a1 + v5 + 48) = *(unsigned char *)(a2 + v5 + 48);
  long long v6 = (int *)v4;
  v39(a1 + *(int *)(v4 + 24), a2 + *(int *)(v4 + 24), v3);
  uint64_t v7 = v6[7];
  uint64_t v40 = type metadata accessor for BatchNorm(0);
  uint64_t v42 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v40 - 8) + 40);
  v42(a1 + v7, a2 + v7, v40);
  uint64_t v8 = v6[8];
  uint64_t v37 = type metadata accessor for Dropout(0);
  uint64_t v36 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v37 - 8) + 40);
  v36(a1 + v8, a2 + v8, v37);
  uint64_t v35 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for MLHandActionClassifier.DownsampledResidualLayer<MLHandActionClassifier.InvertedResidual>);
  v39(a1 + *(int *)(v35 + 36), a2 + *(int *)(v35 + 36), v3);
  v42(a1 + *(int *)(v35 + 40), a2 + *(int *)(v35 + 40), v40);
  uint64_t v9 = a3[5];
  uint64_t v10 = a1 + v9;
  uint64_t v11 = a2 + v9;
  v39(v10, v11, v41);
  uint64_t v12 = v6[5];
  *(_OWORD *)(v12 + v10) = *(_OWORD *)(v12 + v11);
  *(_OWORD *)(v12 + v10 + 16) = *(_OWORD *)(v12 + v11 + 16);
  *(_OWORD *)(v12 + v10 + 32) = *(_OWORD *)(v12 + v11 + 32);
  *(unsigned char *)(v12 + v10 + 48) = *(unsigned char *)(v12 + v11 + 48);
  v39(v10 + v6[6], v11 + v6[6], v41);
  v42(v10 + v6[7], v11 + v6[7], v40);
  v36(v10 + v6[8], v11 + v6[8], v37);
  v39(v10 + *(int *)(v35 + 36), v11 + *(int *)(v35 + 36), v41);
  v42(*(int *)(v35 + 40) + v10, *(int *)(v35 + 40) + v11, v40);
  uint64_t v13 = a3[6];
  uint64_t v14 = a1 + v13;
  uint64_t v15 = a2 + v13;
  v39(v14, v15, v41);
  uint64_t v16 = v6[5];
  *(_OWORD *)(v16 + v14) = *(_OWORD *)(v16 + v15);
  *(_OWORD *)(v16 + v14 + 16) = *(_OWORD *)(v16 + v15 + 16);
  *(_OWORD *)(v16 + v14 + 32) = *(_OWORD *)(v16 + v15 + 32);
  *(unsigned char *)(v16 + v14 + 48) = *(unsigned char *)(v16 + v15 + 48);
  v39(v14 + v6[6], v15 + v6[6], v41);
  v42(v14 + v6[7], v15 + v6[7], v40);
  v36(v14 + v6[8], v15 + v6[8], v37);
  v39(v14 + *(int *)(v35 + 36), v15 + *(int *)(v35 + 36), v41);
  v42(*(int *)(v35 + 40) + v14, *(int *)(v35 + 40) + v15, v40);
  uint64_t v17 = a3[7];
  uint64_t v18 = a1 + v17;
  uint64_t v19 = a2 + v17;
  v39(v18, v19, v41);
  uint64_t v20 = v6[5];
  *(_OWORD *)(v20 + v18) = *(_OWORD *)(v20 + v19);
  *(_OWORD *)(v20 + v18 + 16) = *(_OWORD *)(v20 + v19 + 16);
  *(_OWORD *)(v20 + v18 + 32) = *(_OWORD *)(v20 + v19 + 32);
  *(unsigned char *)(v20 + v18 + 48) = *(unsigned char *)(v20 + v19 + 48);
  v39(v18 + v6[6], v19 + v6[6], v41);
  v42(v18 + v6[7], v19 + v6[7], v40);
  v36(v18 + v6[8], v19 + v6[8], v37);
  v39(v18 + *(int *)(v35 + 36), v19 + *(int *)(v35 + 36), v41);
  v42(*(int *)(v35 + 40) + v18, *(int *)(v35 + 40) + v19, v40);
  uint64_t v21 = a3[8];
  uint64_t v22 = a1 + v21;
  uint64_t v23 = a2 + v21;
  v39(v22, v23, v41);
  uint64_t v24 = v6;
  uint64_t v25 = v6[5];
  *(_OWORD *)(v25 + v22) = *(_OWORD *)(v25 + v23);
  *(_OWORD *)(v25 + v22 + 16) = *(_OWORD *)(v25 + v23 + 16);
  *(_OWORD *)(v25 + v22 + 32) = *(_OWORD *)(v25 + v23 + 32);
  *(unsigned char *)(v25 + v22 + 48) = *(unsigned char *)(v25 + v23 + 48);
  v39(v24[6] + v22, v23 + v24[6], v41);
  v42(v24[7] + v22, v23 + v24[7], v40);
  v36(v24[8] + v22, v24[8] + v23, v37);
  uint64_t v26 = a3[9];
  uint64_t v27 = a1 + v26;
  uint64_t v28 = a2 + v26;
  v39(v27, v28, v41);
  uint64_t v29 = v6[5];
  *(_OWORD *)(v29 + v27) = *(_OWORD *)(v29 + v28);
  *(_OWORD *)(v29 + v27 + 16) = *(_OWORD *)(v29 + v28 + 16);
  *(_OWORD *)(v29 + v27 + 32) = *(_OWORD *)(v29 + v28 + 32);
  *(unsigned char *)(v29 + v27 + 48) = *(unsigned char *)(v29 + v28 + 48);
  v39(v27 + v24[6], v28 + v24[6], v41);
  v42(v27 + v24[7], v28 + v24[7], v40);
  v36(v27 + v24[8], v28 + v24[8], v37);
  v39(v27 + *(int *)(v35 + 36), v28 + *(int *)(v35 + 36), v41);
  v42(*(int *)(v35 + 40) + v27, *(int *)(v35 + 40) + v28, v40);
  uint64_t v30 = a3[10];
  uint64_t v31 = a1 + v30;
  uint64_t v32 = v30 + a2;
  v39(a1 + v30, v30 + a2, v41);
  uint64_t v33 = v24[5];
  *(_OWORD *)(v33 + v31) = *(_OWORD *)(v33 + v32);
  *(_OWORD *)(v33 + v31 + 16) = *(_OWORD *)(v33 + v32 + 16);
  *(_OWORD *)(v33 + v31 + 32) = *(_OWORD *)(v33 + v32 + 32);
  *(unsigned char *)(v33 + v31 + 48) = *(unsigned char *)(v33 + v32 + 48);
  v39(v31 + v24[6], v32 + v24[6], v41);
  v42(v31 + v24[7], v32 + v24[7], v40);
  v36(v31 + v24[8], v32 + v24[8], v37);
  v39(v31 + *(int *)(v35 + 36), v32 + *(int *)(v35 + 36), v41);
  v42(*(int *)(v35 + 40) + v31, *(int *)(v35 + 40) + v32, v40);
  return a1;
}

uint64_t getEnumTagSinglePayload for MLHandActionClassifier.SingleStreamBlock(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_1D0719);
}

uint64_t sub_1D0719(uint64_t a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4 = a1;
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for MLHandActionClassifier.DownsampledResidualLayer<MLHandActionClassifier.InvertedResidual>);
  if (*(_DWORD *)(*(void *)(v5 - 8) + 84) != a2)
  {
    uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for MLHandActionClassifier.ResidualLayer<MLHandActionClassifier.InvertedResidual>);
    uint64_t v4 = *(int *)(a3 + 32) + a1;
  }
  return __swift_getEnumTagSinglePayload(v4, a2, v5);
}

uint64_t storeEnumTagSinglePayload for MLHandActionClassifier.SingleStreamBlock(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_1D077B);
}

uint64_t sub_1D077B(uint64_t a1, unsigned int a2, int a3, uint64_t a4)
{
  uint64_t v6 = a1;
  uint64_t v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for MLHandActionClassifier.DownsampledResidualLayer<MLHandActionClassifier.InvertedResidual>);
  if (*(_DWORD *)(*(void *)(v7 - 8) + 84) != a3)
  {
    uint64_t v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for MLHandActionClassifier.ResidualLayer<MLHandActionClassifier.InvertedResidual>);
    uint64_t v6 = *(int *)(a4 + 32) + a1;
  }
  return __swift_storeEnumTagSinglePayload(v6, a2, a2, v7);
}

uint64_t type metadata completion function for MLHandActionClassifier.SingleStreamBlock(uint64_t a1)
{
  uint64_t result = type metadata accessor for MLHandActionClassifier.DownsampledResidualLayer<MLHandActionClassifier.InvertedResidual>(319);
  if (v2 <= 0x3F)
  {
    uint64_t v3 = *(void *)(result - 8) + 64;
    v5[0] = v3;
    v5[1] = v3;
    v5[2] = v3;
    v5[3] = v3;
    uint64_t result = type metadata accessor for MLHandActionClassifier.InvertedResidual(319);
    if (v4 <= 0x3F)
    {
      v5[4] = *(void *)(result - 8) + 64;
      v5[5] = v3;
      v5[6] = v3;
      swift_initStructMetadata(a1, 256, 7, v5, a1 + 16);
      return 0;
    }
  }
  return result;
}

uint64_t type metadata accessor for MLHandActionClassifier.DownsampledResidualLayer<MLHandActionClassifier.InvertedResidual>(uint64_t a1)
{
  uint64_t result = lazy cache variable for type metadata for MLHandActionClassifier.DownsampledResidualLayer<MLHandActionClassifier.InvertedResidual>;
  if (!lazy cache variable for type metadata for MLHandActionClassifier.DownsampledResidualLayer<MLHandActionClassifier.InvertedResidual>)
  {
    uint64_t v2 = type metadata accessor for MLHandActionClassifier.InvertedResidual(255);
    uint64_t v3 = lazy protocol witness table accessor for type VNImageOption and conformance VNImageOption(&lazy protocol witness table cache variable for type MLHandActionClassifier.InvertedResidual and conformance MLHandActionClassifier.InvertedResidual, type metadata accessor for MLHandActionClassifier.InvertedResidual, (uint64_t)&protocol conformance descriptor for MLHandActionClassifier.InvertedResidual);
    uint64_t result = type metadata accessor for MLHandActionClassifier.DownsampledResidualLayer(a1, v2, v3, v4);
    if (!v5) {
      lazy cache variable for type metadata for MLHandActionClassifier.DownsampledResidualLayer<MLHandActionClassifier.InvertedResidual> = result;
    }
  }
  return result;
}

uint64_t type metadata accessor for MLHandActionClassifier.DownsampledResidualLayer(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for MLHandActionClassifier.DownsampledResidualLayer);
}

uint64_t type metadata completion function for MLHandActionClassifier.ResidualLayer(uint64_t a1)
{
  uint64_t v1 = swift_checkMetadataState(319, *(void *)(a1 + 16));
  if (v2 <= 0x3F)
  {
    v4[0] = *(void *)(v1 - 8) + 64;
    uint64_t v1 = 0;
    swift_initStructMetadata(a1, 0, 1, v4, a1 + 32);
  }
  return v1;
}

uint64_t *initializeBufferWithCopyOfBuffer for MLHandActionClassifier.ResidualLayer(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v3 = a1;
  uint64_t v4 = *(void *)(*(void *)(a3 + 16) - 8);
  int v5 = *(_DWORD *)(v4 + 80);
  int v6 = v5;
  if (v5 > 7u || *(void *)(v4 + 64) > 0x18uLL || (v5 & 0x100000) != 0)
  {
    uint64_t v7 = *a2;
    *uint64_t v3 = *a2;
    swift_retain(v7);
    return (uint64_t *)(v7 + ((v6 + 16) & ~v6));
  }
  else
  {
    (*(void (**)(uint64_t *))(v4 + 16))(a1);
  }
  return v3;
}

uint64_t initializeWithCopy for MLHandActionClassifier.ResidualLayer(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return a1;
}

uint64_t assignWithCopy for MLHandActionClassifier.ResidualLayer(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return a1;
}

uint64_t initializeWithTake for MLHandActionClassifier.ResidualLayer(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return a1;
}

uint64_t assignWithTake for MLHandActionClassifier.ResidualLayer(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return a1;
}

uint64_t getEnumTagSinglePayload for MLHandActionClassifier.ResidualLayer(unsigned __int8 *a1, unsigned int a2, uint64_t a3)
{
  uint64_t result = 0;
  if (!a2) {
    return result;
  }
  uint64_t v5 = *(void *)(a3 + 16);
  uint64_t v6 = *(void *)(v5 - 8);
  uint64_t v7 = *(unsigned int *)(v6 + 84);
  BOOL v8 = a2 <= v7;
  int v9 = a2 - v7;
  if (v8) {
    goto LABEL_19;
  }
  uint64_t v10 = *(void *)(v6 + 64);
  if (v10 > 3)
  {
LABEL_4:
    int v11 = a1[v10];
    goto LABEL_11;
  }
  unsigned int v12 = ((~(-1 << (8 * v10)) + v9) >> (8 * v10)) + 1;
  if (v12 > 0xFFFF)
  {
    int v11 = *(_DWORD *)&a1[v10];
  }
  else
  {
    if (v12 <= 0xFF)
    {
      if (v12 < 2) {
        goto LABEL_19;
      }
      goto LABEL_4;
    }
    int v11 = *(unsigned __int16 *)&a1[v10];
  }
LABEL_11:
  if (v11)
  {
    int v13 = (v11 - 1) << (8 * v10);
    int v14 = 0;
    if (v10 >= 4) {
      int v13 = 0;
    }
    if (v10)
    {
      int v15 = 4;
      if (v10 < 4) {
        int v15 = *(void *)(v6 + 64);
      }
      switch(v15)
      {
        case 1:
          int v14 = *a1;
          break;
        case 2:
          int v14 = *(unsigned __int16 *)a1;
          break;
        case 3:
          int v14 = *(unsigned __int16 *)a1 | (a1[2] << 16);
          break;
        case 4:
          int v14 = *(_DWORD *)a1;
          break;
      }
    }
    return v7 + (v13 | v14) + 1;
  }
LABEL_19:
  if (v7) {
    return __swift_getEnumTagSinglePayload((uint64_t)a1, v7, v5);
  }
  return result;
}

uint64_t storeEnumTagSinglePayload for MLHandActionClassifier.ResidualLayer(uint64_t a1, uint64_t a2, unsigned int a3, uint64_t a4)
{
  uint64_t result = *(void *)(a4 + 16);
  uint64_t v5 = *(void *)(result - 8);
  unsigned int v6 = *(_DWORD *)(v5 + 84);
  uint64_t v7 = *(void *)(v5 + 64);
  unsigned int v8 = 0;
  BOOL v9 = a3 <= v6;
  unsigned int v10 = a3 - v6;
  if (!v9)
  {
    if (v7 > 3)
    {
      int v15 = 1;
LABEL_9:
      unsigned int v8 = v15;
      goto LABEL_10;
    }
    unsigned int v11 = ((~(-1 << (8 * v7)) + v10) >> (8 * v7)) + 1;
    if (v11 > 0xFFFF)
    {
      int v15 = 4;
      goto LABEL_9;
    }
    unsigned int v8 = 2;
    if (v11 < 0x100) {
      unsigned int v8 = v11 >= 2;
    }
  }
LABEL_10:
  if (v6 < a2)
  {
    unsigned int v12 = a2 + ~v6;
    if (v7 >= 4)
    {
      int v13 = 1;
      __bzero(a1, v7);
      *(_DWORD *)a1 = v12;
      uint64_t result = v8;
      switch(v8)
      {
        case 0u:
          return result;
        case 1u:
          goto LABEL_26;
        case 2u:
          goto LABEL_27;
        case 3u:
          goto LABEL_30;
        case 4u:
          goto LABEL_28;
      }
    }
    int v13 = (v12 >> (8 * v7)) + 1;
    if (v7)
    {
      int v14 = ~(-1 << (8 * v7)) & v12;
      __bzero(a1, v7);
      if (v7 != 3)
      {
        if (v7 == 2)
        {
          *(_WORD *)a1 = v14;
          uint64_t result = v8;
          switch(v8)
          {
            case 0u:
              return result;
            case 1u:
              goto LABEL_26;
            case 2u:
              goto LABEL_27;
            case 3u:
              goto LABEL_30;
            case 4u:
              goto LABEL_28;
          }
        }
        *(unsigned char *)a1 = v14;
        uint64_t result = v8;
        switch(v8)
        {
          case 0u:
            return result;
          case 1u:
            goto LABEL_26;
          case 2u:
            goto LABEL_27;
          case 3u:
            goto LABEL_30;
          case 4u:
            goto LABEL_28;
        }
      }
      *(_WORD *)a1 = v14;
      *(unsigned char *)(a1 + 2) = BYTE2(v14);
      uint64_t result = v8;
      switch(v8)
      {
        case 0u:
          return result;
        case 1u:
          goto LABEL_26;
        case 2u:
          goto LABEL_27;
        case 3u:
          goto LABEL_30;
        case 4u:
          goto LABEL_28;
      }
    }
    uint64_t result = v8;
    switch(v8)
    {
      case 0u:
        return result;
      case 1u:
LABEL_26:
        *(unsigned char *)(a1 + v7) = v13;
        return result;
      case 2u:
LABEL_27:
        *(_WORD *)(a1 + v7) = v13;
        return result;
      case 3u:
        goto LABEL_30;
      case 4u:
LABEL_28:
        *(_DWORD *)(a1 + v7) = v13;
        return result;
    }
  }
  switch(v8)
  {
    case 0u:
      break;
    case 1u:
      *(unsigned char *)(a1 + v7) = 0;
      break;
    case 2u:
      *(_WORD *)(a1 + v7) = 0;
      break;
    case 3u:
LABEL_30:
      BUG();
    case 4u:
      *(_DWORD *)(a1 + v7) = 0;
      break;
  }
  if (a2) {
    return __swift_storeEnumTagSinglePayload(a1, a2, v6, result);
  }
  return result;
}

uint64_t type metadata accessor for MLHandActionClassifier.ResidualLayer(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for MLHandActionClassifier.ResidualLayer);
}

uint64_t type metadata completion function for MLHandActionClassifier.DownsampledResidualLayer(uint64_t a1)
{
  uint64_t v1 = swift_checkMetadataState(319, *(void *)(a1 + 16));
  uint64_t v2 = v1;
  if (v3 <= 0x3F)
  {
    v8[0] = *(void *)(v1 - 8) + 64;
    uint64_t v4 = type metadata accessor for Conv2D(319);
    uint64_t v2 = v4;
    if (v5 <= 0x3F)
    {
      v8[1] = *(void *)(v4 - 8) + 64;
      uint64_t v2 = type metadata accessor for BatchNorm(319);
      if (v6 <= 0x3F)
      {
        v8[2] = *(void *)(v2 - 8) + 64;
        uint64_t v2 = 0;
        swift_initStructMetadata(a1, 0, 3, v8, a1 + 32);
      }
    }
  }
  return v2;
}

uint64_t *initializeBufferWithCopyOfBuffer for MLHandActionClassifier.DownsampledResidualLayer(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v27 = *(void *)(a3 + 16);
  uint64_t v3 = *(void *)(v27 - 8);
  uint64_t v4 = *(void *)(v3 + 64);
  uint64_t v25 = type metadata accessor for Conv2D(0);
  uint64_t v5 = *(void *)(v25 - 8);
  int v6 = *(_DWORD *)(v5 + 80);
  uint64_t v26 = v5;
  uint64_t v7 = *(void *)(v5 + 64);
  uint64_t v8 = type metadata accessor for BatchNorm(0);
  uint64_t v9 = v3;
  uint64_t v10 = *(void *)(v8 - 8);
  int v11 = *(_DWORD *)(v10 + 80);
  int v12 = v11 | v6 | *(_DWORD *)(v3 + 80);
  unsigned int v13 = (v11 | v6 | *(unsigned char *)(v3 + 80));
  if (v13 > 7
    || (uint64_t v14 = v6 + v4,
        unint64_t v15 = ~(unint64_t)v6,
        uint64_t v16 = *(_DWORD *)(v10 + 80),
        uint64_t v17 = v16 + v7,
        uint64_t v18 = ~v16,
        *(void *)(v10 + 64) + (v18 & (v17 + (v15 & v14))) > 0x18)
    || (v12 & 0x100000) != 0)
  {
    uint64_t v23 = *a2;
    *a1 = *a2;
    swift_retain(v23);
    return (uint64_t *)(v23 + ((v13 + 16) & ~v13));
  }
  else
  {
    uint64_t v19 = v17;
    uint64_t v20 = a1;
    uint64_t v28 = *(void *)(v8 - 8);
    uint64_t v30 = v19;
    uint64_t v29 = v8;
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(v9 + 16))(a1, a2, v27);
    unint64_t v21 = v15 & ((unint64_t)a1 + v14);
    unint64_t v22 = v15 & ((unint64_t)a2 + v14);
    (*(void (**)(unint64_t, unint64_t, uint64_t))(v26 + 16))(v21, v22, v25);
    (*(void (**)(unint64_t, unint64_t, uint64_t))(v28 + 16))(v18 & (v30 + v21), v18 & (v30 + v22), v29);
  }
  return v20;
}

uint64_t destroy for MLHandActionClassifier.DownsampledResidualLayer(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(*(void *)(a2 + 16) - 8);
  (*(void (**)(uint64_t))(v2 + 8))(a1);
  uint64_t v3 = *(void *)(v2 + 64) + a1;
  uint64_t v4 = type metadata accessor for Conv2D(0);
  uint64_t v5 = *(void *)(v4 - 8);
  unint64_t v6 = (*(unsigned __int8 *)(v5 + 80) + v3) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80);
  (*(void (**)(unint64_t, uint64_t))(v5 + 8))(v6, v4);
  unint64_t v7 = *(void *)(v5 + 64) + v6;
  uint64_t v8 = type metadata accessor for BatchNorm(0);
  return (*(uint64_t (**)(unint64_t, uint64_t))(*(void *)(v8 - 8) + 8))((*(unsigned __int8 *)(*(void *)(v8 - 8) + 80) + v7) & ~(unint64_t)*(unsigned __int8 *)(*(void *)(v8 - 8) + 80), v8);
}

uint64_t initializeWithCopy for MLHandActionClassifier.DownsampledResidualLayer(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3 = *(void *)(*(void *)(a3 + 16) - 8);
  (*(void (**)(uint64_t))(v3 + 16))(a1);
  uint64_t v4 = *(void *)(v3 + 64);
  uint64_t v5 = type metadata accessor for Conv2D(0);
  uint64_t v6 = *(void *)(v5 - 8);
  uint64_t v7 = *(unsigned __int8 *)(v6 + 80);
  uint64_t v8 = v7 + v4;
  uint64_t v9 = ~v7;
  uint64_t v10 = v9 & (v8 + a1);
  uint64_t v11 = v9 & (a2 + v8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v6 + 16))(v10, v11, v5);
  uint64_t v12 = *(void *)(v6 + 64);
  uint64_t v13 = type metadata accessor for BatchNorm(0);
  uint64_t v14 = *(void *)(v13 - 8);
  (*(void (**)(unint64_t, unint64_t, uint64_t))(v14 + 16))(~(unint64_t)*(unsigned __int8 *)(v14 + 80) & (*(unsigned __int8 *)(v14 + 80) + v12 + v10), ~(unint64_t)*(unsigned __int8 *)(v14 + 80) & (v11 + *(unsigned __int8 *)(v14 + 80) + v12), v13);
  return a1;
}

uint64_t assignWithCopy for MLHandActionClassifier.DownsampledResidualLayer(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3 = *(void *)(*(void *)(a3 + 16) - 8);
  (*(void (**)(uint64_t))(v3 + 24))(a1);
  uint64_t v4 = *(void *)(v3 + 64);
  uint64_t v5 = type metadata accessor for Conv2D(0);
  uint64_t v6 = *(void *)(v5 - 8);
  uint64_t v7 = *(unsigned __int8 *)(v6 + 80);
  uint64_t v8 = v7 + v4;
  uint64_t v9 = ~v7;
  uint64_t v10 = v9 & (v8 + a1);
  uint64_t v11 = v9 & (a2 + v8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v6 + 24))(v10, v11, v5);
  uint64_t v12 = *(void *)(v6 + 64);
  uint64_t v13 = type metadata accessor for BatchNorm(0);
  uint64_t v14 = *(void *)(v13 - 8);
  (*(void (**)(unint64_t, unint64_t, uint64_t))(v14 + 24))(~(unint64_t)*(unsigned __int8 *)(v14 + 80) & (*(unsigned __int8 *)(v14 + 80) + v12 + v10), ~(unint64_t)*(unsigned __int8 *)(v14 + 80) & (v11 + *(unsigned __int8 *)(v14 + 80) + v12), v13);
  return a1;
}

uint64_t initializeWithTake for MLHandActionClassifier.DownsampledResidualLayer(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3 = *(void *)(*(void *)(a3 + 16) - 8);
  (*(void (**)(uint64_t))(v3 + 32))(a1);
  uint64_t v4 = *(void *)(v3 + 64);
  uint64_t v5 = type metadata accessor for Conv2D(0);
  uint64_t v6 = *(void *)(v5 - 8);
  uint64_t v7 = *(unsigned __int8 *)(v6 + 80);
  uint64_t v8 = v7 + v4;
  uint64_t v9 = ~v7;
  uint64_t v10 = v9 & (v8 + a1);
  uint64_t v11 = v9 & (a2 + v8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v6 + 32))(v10, v11, v5);
  uint64_t v12 = *(void *)(v6 + 64);
  uint64_t v13 = type metadata accessor for BatchNorm(0);
  uint64_t v14 = *(void *)(v13 - 8);
  (*(void (**)(unint64_t, unint64_t, uint64_t))(v14 + 32))(~(unint64_t)*(unsigned __int8 *)(v14 + 80) & (*(unsigned __int8 *)(v14 + 80) + v12 + v10), ~(unint64_t)*(unsigned __int8 *)(v14 + 80) & (v11 + *(unsigned __int8 *)(v14 + 80) + v12), v13);
  return a1;
}

uint64_t assignWithTake for MLHandActionClassifier.DownsampledResidualLayer(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3 = *(void *)(*(void *)(a3 + 16) - 8);
  (*(void (**)(uint64_t))(v3 + 40))(a1);
  uint64_t v4 = *(void *)(v3 + 64);
  uint64_t v5 = type metadata accessor for Conv2D(0);
  uint64_t v6 = *(void *)(v5 - 8);
  uint64_t v7 = *(unsigned __int8 *)(v6 + 80);
  uint64_t v8 = v7 + v4;
  uint64_t v9 = ~v7;
  uint64_t v10 = v9 & (v8 + a1);
  uint64_t v11 = v9 & (a2 + v8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v6 + 40))(v10, v11, v5);
  uint64_t v12 = *(void *)(v6 + 64);
  uint64_t v13 = type metadata accessor for BatchNorm(0);
  uint64_t v14 = *(void *)(v13 - 8);
  (*(void (**)(unint64_t, unint64_t, uint64_t))(v14 + 40))(~(unint64_t)*(unsigned __int8 *)(v14 + 80) & (*(unsigned __int8 *)(v14 + 80) + v12 + v10), ~(unint64_t)*(unsigned __int8 *)(v14 + 80) & (v11 + *(unsigned __int8 *)(v14 + 80) + v12), v13);
  return a1;
}

uint64_t getEnumTagSinglePayload for MLHandActionClassifier.DownsampledResidualLayer(unsigned __int8 *a1, unsigned int a2, uint64_t a3)
{
  uint64_t v29 = *(void *)(a3 + 16);
  uint64_t v4 = *(void *)(v29 - 8);
  unsigned int v5 = *(_DWORD *)(v4 + 84);
  uint64_t v30 = type metadata accessor for Conv2D(0);
  uint64_t v6 = *(void *)(v30 - 8);
  unsigned int v7 = v5;
  unsigned int v31 = *(_DWORD *)(v6 + 84);
  if (v31 > v5) {
    unsigned int v7 = *(_DWORD *)(v6 + 84);
  }
  uint64_t v8 = type metadata accessor for BatchNorm(0);
  uint64_t v9 = *(void *)(v8 - 8);
  uint64_t v10 = *(unsigned int *)(v9 + 84);
  if (v10 > v7) {
    unsigned int v7 = *(_DWORD *)(v9 + 84);
  }
  if (!a2) {
    return 0;
  }
  unint64_t v11 = ~(unint64_t)*(unsigned __int8 *)(v6 + 80);
  uint64_t v12 = *(void *)(v4 + 64) + *(unsigned __int8 *)(v6 + 80);
  uint64_t v13 = *(void *)(v6 + 64);
  uint64_t v14 = *(unsigned __int8 *)(v9 + 80);
  uint64_t v15 = ~v14;
  BOOL v16 = a2 <= v7;
  unsigned int v17 = a2 - v7;
  if (!v16)
  {
    unint64_t v18 = *(void *)(v9 + 64) + (v15 & (v14 + v13 + (v11 & v12)));
    if (v18 > 3)
    {
LABEL_8:
      int v19 = a1[v18];
      goto LABEL_16;
    }
    unsigned int v21 = ((~(-1 << (8 * v18)) + v17) >> (8 * v18)) + 1;
    if (v21 > 0xFFFF)
    {
      int v19 = *(_DWORD *)&a1[v18];
    }
    else
    {
      if (v21 <= 0xFF)
      {
        if (v21 < 2) {
          goto LABEL_24;
        }
        goto LABEL_8;
      }
      int v19 = *(unsigned __int16 *)&a1[v18];
    }
LABEL_16:
    if (v19)
    {
      int v22 = (v19 - 1) << (8 * v18);
      int v23 = 0;
      if (v18 >= 4) {
        int v22 = 0;
      }
      if (v18)
      {
        int v24 = 4;
        if (v18 < 4) {
          int v24 = *(_DWORD *)(v9 + 64) + (v15 & (v14 + v13 + (v11 & v12)));
        }
        switch(v24)
        {
          case 1:
            int v23 = *a1;
            break;
          case 2:
            int v23 = *(unsigned __int16 *)a1;
            break;
          case 3:
            int v23 = *(unsigned __int16 *)a1 | (a1[2] << 16);
            break;
          case 4:
            int v23 = *(_DWORD *)a1;
            break;
        }
      }
      return v7 + (v22 | v23) + 1;
    }
  }
LABEL_24:
  unsigned int v20 = 0;
  if (!v7) {
    return v20;
  }
  if (v5 == v7) {
    return __swift_getEnumTagSinglePayload((uint64_t)a1, v5, v29);
  }
  uint64_t v26 = v11 & (unint64_t)&a1[v12];
  if (v31 == v7)
  {
    uint64_t v10 = v31;
    uint64_t v27 = v30;
  }
  else
  {
    uint64_t v26 = v15 & (v14 + v13 + v26);
    uint64_t v27 = v8;
  }
  return __swift_getEnumTagSinglePayload(v26, v10, v27);
}

uint64_t storeEnumTagSinglePayload for MLHandActionClassifier.DownsampledResidualLayer(uint64_t a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v26 = *(void *)(a4 + 16);
  uint64_t v5 = *(void *)(v26 - 8);
  unsigned int v6 = *(_DWORD *)(v5 + 84);
  uint64_t v27 = type metadata accessor for Conv2D(0);
  uint64_t v7 = *(void *)(v27 - 8);
  unsigned int v8 = v6;
  uint64_t v31 = *(unsigned int *)(v7 + 84);
  if (*(_DWORD *)(v7 + 84) > v6) {
    unsigned int v8 = *(_DWORD *)(v7 + 84);
  }
  uint64_t v28 = type metadata accessor for BatchNorm(0);
  uint64_t v9 = *(void *)(v28 - 8);
  uint64_t v10 = *(unsigned int *)(v9 + 84);
  if (v10 > v8) {
    unsigned int v8 = *(_DWORD *)(v9 + 84);
  }
  unint64_t v11 = ~(unint64_t)*(unsigned __int8 *)(v7 + 80);
  uint64_t v12 = *(void *)(v5 + 64) + *(unsigned __int8 *)(v7 + 80);
  uint64_t result = *(void *)(v7 + 64);
  uint64_t v14 = *(unsigned __int8 *)(v9 + 80);
  unint64_t v15 = *(void *)(v9 + 64) + (~v14 & (v14 + result + (v11 & v12)));
  BOOL v16 = a3 <= v8;
  unsigned int v17 = a3 - v8;
  if (!v16)
  {
    if (v15 > 3)
    {
      int v25 = 1;
LABEL_13:
      HIDWORD(v31) = v25;
      goto LABEL_14;
    }
    unsigned int v18 = ((~(-1 << (8 * v15)) + v17) >> (8 * v15)) + 1;
    if (v18 > 0xFFFF)
    {
      int v25 = 4;
      goto LABEL_13;
    }
    int v19 = 2;
    if (v18 < 0x100) {
      int v19 = v18 >= 2;
    }
    HIDWORD(v31) = v19;
  }
LABEL_14:
  if (v8 < a2)
  {
    unsigned int v20 = a2 + ~v8;
    if (v15 >= 4)
    {
      int v21 = 1;
      __bzero(a1, v15);
      *(_DWORD *)a1 = v20;
      uint64_t result = HIDWORD(v31);
      switch(HIDWORD(v31))
      {
        case 0:
          return result;
        case 1:
          goto LABEL_35;
        case 2:
          goto LABEL_36;
        case 3:
          goto LABEL_39;
        case 4:
          goto LABEL_37;
      }
    }
    int v21 = (v20 >> (8 * v15)) + 1;
    if (v15)
    {
      int v22 = ~(-1 << (8 * v15)) & v20;
      __bzero(a1, v15);
      if (v15 != 3)
      {
        if (v15 == 2)
        {
          *(_WORD *)a1 = v22;
          uint64_t result = HIDWORD(v31);
          switch(HIDWORD(v31))
          {
            case 0:
              return result;
            case 1:
              goto LABEL_35;
            case 2:
              goto LABEL_36;
            case 3:
              goto LABEL_39;
            case 4:
              goto LABEL_37;
          }
        }
        *(unsigned char *)a1 = v22;
        uint64_t result = HIDWORD(v31);
        switch(HIDWORD(v31))
        {
          case 0:
            return result;
          case 1:
            goto LABEL_35;
          case 2:
            goto LABEL_36;
          case 3:
            goto LABEL_39;
          case 4:
            goto LABEL_37;
        }
      }
      *(_WORD *)a1 = v22;
      *(unsigned char *)(a1 + 2) = BYTE2(v22);
      uint64_t result = HIDWORD(v31);
      switch(HIDWORD(v31))
      {
        case 0:
          return result;
        case 1:
          goto LABEL_35;
        case 2:
          goto LABEL_36;
        case 3:
          goto LABEL_39;
        case 4:
          goto LABEL_37;
      }
    }
    uint64_t result = HIDWORD(v31);
    switch(HIDWORD(v31))
    {
      case 0:
        return result;
      case 1:
LABEL_35:
        *(unsigned char *)(a1 + v15) = v21;
        return result;
      case 2:
LABEL_36:
        *(_WORD *)(a1 + v15) = v21;
        return result;
      case 3:
        goto LABEL_39;
      case 4:
LABEL_37:
        *(_DWORD *)(a1 + v15) = v21;
        return result;
    }
  }
  switch(HIDWORD(v31))
  {
    case 0:
      break;
    case 1:
      *(unsigned char *)(a1 + v15) = 0;
      break;
    case 2:
      *(_WORD *)(a1 + v15) = 0;
      break;
    case 3:
LABEL_39:
      BUG();
    case 4:
      *(_DWORD *)(a1 + v15) = 0;
      break;
  }
  if (a2)
  {
    if (v6 == v8)
    {
      uint64_t v23 = a1;
      uint64_t v10 = v6;
      uint64_t v24 = v26;
    }
    else
    {
      uint64_t v23 = v11 & (a1 + v12);
      if (v31 == v8)
      {
        uint64_t v10 = v31;
        uint64_t v24 = v27;
      }
      else
      {
        uint64_t v23 = ~v14 & (v14 + result + v23);
        uint64_t v24 = v28;
      }
    }
    return __swift_storeEnumTagSinglePayload(v23, a2, v10, v24);
  }
  return result;
}

void *initializeBufferWithCopyOfBuffer for MLHandActionClassifier.InvertedResidual(void *a1, void *a2, int *a3)
{
  uint64_t v3 = a1;
  int v4 = *(_DWORD *)(*((void *)a3 - 1) + 80);
  if ((v4 & 0x20000) != 0)
  {
    uint64_t v17 = *a2;
    *uint64_t v3 = *a2;
    uint64_t v3 = (void *)(v17 + ((v4 + 16) & ~v4));
    swift_retain(v17);
  }
  else
  {
    uint64_t v6 = type metadata accessor for Conv2D(0);
    uint64_t v7 = *(void (**)(void *, void *, uint64_t))(*(void *)(v6 - 8) + 16);
    v7(a1, a2, v6);
    uint64_t v8 = a3[5];
    *((unsigned char *)a1 + v8 + 48) = *((unsigned char *)a2 + v8 + 48);
    long long v9 = *(_OWORD *)((char *)a2 + v8);
    long long v10 = *(_OWORD *)((char *)a2 + v8 + 16);
    *(_OWORD *)((char *)a1 + v8 + 32) = *(_OWORD *)((char *)a2 + v8 + 32);
    *(_OWORD *)((char *)a1 + v8 + 16) = v10;
    *(_OWORD *)((char *)a1 + v8) = v9;
    v7((void *)((char *)a1 + a3[6]), (void *)((char *)a2 + a3[6]), v6);
    uint64_t v11 = a3[7];
    uint64_t v12 = type metadata accessor for BatchNorm(0);
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v12 - 8) + 16))((char *)a1 + v11, (char *)a2 + v11, v12);
    uint64_t v13 = a3[8];
    uint64_t v14 = (char *)a1 + v13;
    unint64_t v15 = (char *)a2 + v13;
    uint64_t v16 = type metadata accessor for Dropout(0);
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v16 - 8) + 16))(v14, v15, v16);
  }
  return v3;
}

uint64_t destroy for MLHandActionClassifier.InvertedResidual(uint64_t a1, int *a2)
{
  uint64_t v2 = type metadata accessor for Conv2D(0);
  uint64_t v3 = *(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8);
  v3(a1, v2);
  v3(a1 + a2[6], v2);
  uint64_t v4 = a1 + a2[7];
  uint64_t v5 = type metadata accessor for BatchNorm(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v5 - 8) + 8))(v4, v5);
  uint64_t v6 = a1 + a2[8];
  uint64_t v7 = type metadata accessor for Dropout(0);
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v7 - 8) + 8))(v6, v7);
}

uint64_t initializeWithCopy for MLHandActionClassifier.InvertedResidual(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v4 = type metadata accessor for Conv2D(0);
  uint64_t v5 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16);
  v5(a1, a2, v4);
  uint64_t v6 = a3[5];
  *(unsigned char *)(a1 + v6 + 48) = *(unsigned char *)(a2 + v6 + 48);
  long long v7 = *(_OWORD *)(a2 + v6);
  long long v8 = *(_OWORD *)(a2 + v6 + 16);
  *(_OWORD *)(a1 + v6 + 32) = *(_OWORD *)(a2 + v6 + 32);
  *(_OWORD *)(a1 + v6 + 16) = v8;
  *(_OWORD *)(a1 + v6) = v7;
  v5(a1 + a3[6], a2 + a3[6], v4);
  uint64_t v9 = a3[7];
  uint64_t v10 = type metadata accessor for BatchNorm(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v10 - 8) + 16))(a1 + v9, a2 + v9, v10);
  uint64_t v11 = a3[8];
  uint64_t v12 = a1 + v11;
  uint64_t v13 = v11 + a2;
  uint64_t v14 = type metadata accessor for Dropout(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v14 - 8) + 16))(v12, v13, v14);
  return a1;
}

uint64_t assignWithCopy for MLHandActionClassifier.InvertedResidual(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v4 = type metadata accessor for Conv2D(0);
  uint64_t v5 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 24);
  v5(a1, a2, v4);
  uint64_t v6 = a3[5];
  *(void *)(a1 + v6) = *(void *)(a2 + v6);
  *(void *)(a1 + v6 + 8) = *(void *)(a2 + v6 + 8);
  *(void *)(a1 + v6 + 16) = *(void *)(a2 + v6 + 16);
  *(void *)(a1 + v6 + 24) = *(void *)(a2 + v6 + 24);
  *(void *)(a1 + v6 + 32) = *(void *)(a2 + v6 + 32);
  *(void *)(a1 + v6 + 40) = *(void *)(a2 + v6 + 40);
  *(unsigned char *)(a1 + v6 + 48) = *(unsigned char *)(a2 + v6 + 48);
  v5(a1 + a3[6], a2 + a3[6], v4);
  uint64_t v7 = a3[7];
  uint64_t v8 = type metadata accessor for BatchNorm(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v8 - 8) + 24))(a1 + v7, a2 + v7, v8);
  uint64_t v9 = a3[8];
  uint64_t v10 = a1 + v9;
  uint64_t v11 = v9 + a2;
  uint64_t v12 = type metadata accessor for Dropout(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v12 - 8) + 24))(v10, v11, v12);
  return a1;
}

uint64_t initializeWithTake for MLHandActionClassifier.InvertedResidual(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v4 = type metadata accessor for Conv2D(0);
  uint64_t v5 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32);
  v5(a1, a2, v4);
  uint64_t v6 = a3[5];
  *(unsigned char *)(a1 + v6 + 48) = *(unsigned char *)(a2 + v6 + 48);
  long long v7 = *(_OWORD *)(a2 + v6);
  long long v8 = *(_OWORD *)(a2 + v6 + 16);
  *(_OWORD *)(a1 + v6 + 32) = *(_OWORD *)(a2 + v6 + 32);
  *(_OWORD *)(a1 + v6 + 16) = v8;
  *(_OWORD *)(a1 + v6) = v7;
  v5(a1 + a3[6], a2 + a3[6], v4);
  uint64_t v9 = a3[7];
  uint64_t v10 = type metadata accessor for BatchNorm(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v10 - 8) + 32))(a1 + v9, a2 + v9, v10);
  uint64_t v11 = a3[8];
  uint64_t v12 = a1 + v11;
  uint64_t v13 = v11 + a2;
  uint64_t v14 = type metadata accessor for Dropout(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v14 - 8) + 32))(v12, v13, v14);
  return a1;
}

uint64_t assignWithTake for MLHandActionClassifier.InvertedResidual(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v4 = type metadata accessor for Conv2D(0);
  uint64_t v5 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 40);
  v5(a1, a2, v4);
  uint64_t v6 = a3[5];
  *(_OWORD *)(a1 + v6) = *(_OWORD *)(a2 + v6);
  *(_OWORD *)(a1 + v6 + 16) = *(_OWORD *)(a2 + v6 + 16);
  *(_OWORD *)(a1 + v6 + 32) = *(_OWORD *)(a2 + v6 + 32);
  *(unsigned char *)(a1 + v6 + 48) = *(unsigned char *)(a2 + v6 + 48);
  v5(a1 + a3[6], a2 + a3[6], v4);
  uint64_t v7 = a3[7];
  uint64_t v8 = type metadata accessor for BatchNorm(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v8 - 8) + 40))(a1 + v7, a2 + v7, v8);
  uint64_t v9 = a3[8];
  uint64_t v10 = a1 + v9;
  uint64_t v11 = v9 + a2;
  uint64_t v12 = type metadata accessor for Dropout(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v12 - 8) + 40))(v10, v11, v12);
  return a1;
}

uint64_t getEnumTagSinglePayload for MLHandActionClassifier.InvertedResidual(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_1D1A89);
}

uint64_t sub_1D1A89(uint64_t a1, unsigned int a2, int *a3)
{
  uint64_t v4 = a1;
  uint64_t v5 = type metadata accessor for Conv2D(0);
  if (*(_DWORD *)(*(void *)(v5 - 8) + 84) == a2) {
    return __swift_getEnumTagSinglePayload(v4, a2, v5);
  }
  if (a2 != 254)
  {
    uint64_t v5 = type metadata accessor for BatchNorm(0);
    if (*(_DWORD *)(*(void *)(v5 - 8) + 84) == a2)
    {
      uint64_t v8 = a3[7];
    }
    else
    {
      uint64_t v5 = type metadata accessor for Dropout(0);
      uint64_t v8 = a3[8];
    }
    uint64_t v4 = v8 + a1;
    return __swift_getEnumTagSinglePayload(v4, a2, v5);
  }
  unsigned __int8 v6 = *(unsigned char *)(a1 + a3[5] + 48);
  uint64_t result = 0;
  if (v6 >= 2u) {
    return ((v6 + 2147483646) & 0x7FFFFFFFu) + 1;
  }
  return result;
}

uint64_t storeEnumTagSinglePayload for MLHandActionClassifier.InvertedResidual(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_1D1B29);
}

uint64_t sub_1D1B29(uint64_t a1, unsigned int a2, int a3, int *a4)
{
  uint64_t v6 = a1;
  uint64_t v7 = type metadata accessor for Conv2D(0);
  if (*(_DWORD *)(*(void *)(v7 - 8) + 84) != a3)
  {
    if (a3 == 254)
    {
      uint64_t result = a4[5];
      *(unsigned char *)(a1 + result + 48) = a2 + 1;
      return result;
    }
    uint64_t v7 = type metadata accessor for BatchNorm(0);
    if (*(_DWORD *)(*(void *)(v7 - 8) + 84) == a3)
    {
      uint64_t v9 = a4[7];
    }
    else
    {
      uint64_t v7 = type metadata accessor for Dropout(0);
      uint64_t v9 = a4[8];
    }
    uint64_t v6 = v9 + a1;
  }
  return __swift_storeEnumTagSinglePayload(v6, a2, a2, v7);
}

uint64_t type metadata completion function for MLHandActionClassifier.InvertedResidual(uint64_t a1)
{
  uint64_t result = type metadata accessor for Conv2D(319);
  if (v2 <= 0x3F)
  {
    v5[0] = *(void *)(result - 8) + 64;
    v5[1] = "1";
    v5[2] = v5[0];
    uint64_t result = type metadata accessor for BatchNorm(319);
    if (v3 <= 0x3F)
    {
      v5[3] = *(void *)(result - 8) + 64;
      uint64_t result = type metadata accessor for Dropout(319);
      if (v4 <= 0x3F)
      {
        v5[4] = *(void *)(result - 8) + 64;
        swift_initStructMetadata(a1, 256, 5, v5, a1 + 16);
        return 0;
      }
    }
  }
  return result;
}

uint64_t MLHandActionClassifier.GraphCNN.callAsFunction(_:)(uint64_t a1)
{
  uint64_t v11 = a1;
  uint64_t v2 = type metadata accessor for MLHandActionClassifier.GraphCNNModel(0);
  int64_t v3 = *(void *)(*(void *)(v2 - 8) + 64);
  unint64_t v4 = alloca(v3);
  uint64_t v5 = alloca(v3);
  uint64_t v6 = OBJC_IVAR____TtCV8CreateML22MLHandActionClassifier8GraphCNN_model + v1;
  swift_beginAccess(v6, v10, 0, 0);
  outlined init with copy of MLTrainingSessionParameters(v6, (uint64_t)&v9, type metadata accessor for MLHandActionClassifier.GraphCNNModel);
  uint64_t v7 = lazy protocol witness table accessor for type VNImageOption and conformance VNImageOption(&lazy protocol witness table cache variable for type MLHandActionClassifier.GraphCNNModel and conformance MLHandActionClassifier.GraphCNNModel, type metadata accessor for MLHandActionClassifier.GraphCNNModel, (uint64_t)&protocol conformance descriptor for MLHandActionClassifier.GraphCNNModel);
  Layer.callAsFunction(_:)(v11, v2, v7);
  return outlined destroy of MLActivityClassifier.ModelParameters((uint64_t)&v9, type metadata accessor for MLHandActionClassifier.GraphCNNModel);
}

uint64_t MLHandActionClassifier.GraphCNNModel.forward(_:)(uint64_t a1, double a2)
{
  unint64_t v4 = v2;
  uint64_t v59 = type metadata accessor for TensorShape(0);
  uint64_t v61 = *(void *)(v59 - 8);
  int64_t v5 = *(void *)(v61 + 64);
  uint64_t v6 = alloca(v5);
  uint64_t v7 = alloca(v5);
  uint64_t v53 = &v48;
  uint64_t v8 = alloca(v5);
  uint64_t v9 = alloca(v5);
  long long v57 = &v48;
  uint64_t v10 = type metadata accessor for Tensor(0);
  uint64_t v11 = *(void *)(v10 - 8);
  int64_t v12 = *(void *)(v11 + 64);
  uint64_t v13 = alloca(v12);
  uint64_t v14 = alloca(v12);
  uint64_t v54 = &v48;
  unint64_t v15 = alloca(v12);
  uint64_t v16 = alloca(v12);
  uint64_t v62 = &v48;
  uint64_t v50 = *(void (**)(uint64_t, uint64_t, uint64_t))(v11 + 16);
  v50(v4, a1, v10);
  uint64_t v51 = type metadata accessor for MLHandActionClassifier.GraphCNNModel(0);
  uint64_t v17 = *(int *)(v51 + 36);
  uint64_t v56 = v3;
  uint64_t v49 = v17;
  if (*(unsigned char *)(v3 + v17) == 1)
  {
    unsigned int v18 = v62;
    Tensor.expandingShape(at:)(&outlined read-only object #0 of MLHandActionClassifier.GraphCNNModel.forward(_:));
    (*(void (**)(uint64_t *, uint64_t))(v11 + 8))((uint64_t *)v4, v10);
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(v11 + 32))((uint64_t *)v4, v18, v10);
  }
  int v19 = v62;
  Tensor.transposed(permutation:)(&outlined read-only object #1 of MLHandActionClassifier.GraphCNNModel.forward(_:));
  uint64_t v60 = *(void (**)(uint64_t, uint64_t))(v11 + 8);
  v60(v4, v10);
  uint64_t v58 = *(void (**)(uint64_t, uint64_t *, uint64_t))(v11 + 32);
  v58(v4, v19, v10);
  Tensor.shape.getter((uint64_t *)v4, v19, v20);
  uint64_t v52 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Int>);
  int v21 = (void *)swift_allocObject(v52, 64, 7);
  v21[2] = 4;
  v21[3] = 8;
  v21[4] = TensorShape.subscript.getter(0);
  v21[5] = TensorShape.subscript.getter(1);
  v21[6] = -1;
  v21[7] = 1;
  int v22 = v53;
  TensorShape.init(_:)(v21, a2);
  uint64_t v23 = v62;
  Tensor.reshaped(to:)(v22);
  uint64_t v61 = *(void *)(v61 + 8);
  ((void (*)(uint64_t *, uint64_t))v61)(v22, v59);
  v60(v4, v10);
  uint64_t v24 = v10;
  uint64_t v25 = v10;
  uint64_t v55 = v10;
  uint64_t v26 = v58;
  v58(v4, v23, v24);
  MLHandActionClassifier.GraphCNNModel.poseMotion(_:)((uint64_t *)v4);
  v60(v4, v25);
  v26(v4, v23, v25);
  uint64_t v27 = v4;
  uint64_t v28 = type metadata accessor for MLHandActionClassifier.Torso(0);
  uint64_t v29 = lazy protocol witness table accessor for type VNImageOption and conformance VNImageOption(&lazy protocol witness table cache variable for type MLHandActionClassifier.Torso and conformance MLHandActionClassifier.Torso, type metadata accessor for MLHandActionClassifier.Torso, (uint64_t)&protocol conformance descriptor for MLHandActionClassifier.Torso);
  uint64_t v30 = v62;
  Layer.callAsFunction(_:)((uint64_t *)v4, v28, v29);
  uint64_t v31 = v4;
  uint64_t v32 = v55;
  v60(v31, v55);
  v58(v27, v30, v32);
  v50((uint64_t)v54, v27, v32);
  uint64_t v33 = v52;
  long long v34 = (void *)swift_allocObject(v52, 48, 7);
  v34[2] = 2;
  v34[3] = 4;
  uint64_t v35 = v53;
  Tensor.shape.getter(v33, 48, v36);
  uint64_t v37 = TensorShape.subscript.getter(0);
  uint64_t v38 = v59;
  double v39 = ((double (*)(uint64_t *, uint64_t))v61)(v35, v59);
  v34[4] = v37;
  v34[5] = -1;
  uint64_t v40 = v34;
  uint64_t v41 = v38;
  TensorShape.init(_:)(v40, v39);
  uint64_t v42 = v54;
  Tensor.reshaped(to:)(v35);
  uint64_t v43 = (void (*)(uint64_t *, uint64_t))v60;
  uint64_t v44 = v35;
  uint64_t v45 = v55;
  ((void (*)(uint64_t *, uint64_t))v61)(v44, v41);
  v43(v42, v45);
  v43((uint64_t *)v27, v45);
  v58(v27, v62, v45);
  if (*(unsigned char *)(v56 + v49) != 1) {
    return ((uint64_t (*)(uint64_t *, uint64_t))v61)(v57, v59);
  }
  long long v46 = v62;
  softmax(_:alongAxis:)((uint64_t *)v27, 1);
  ((void (*)(uint64_t *, uint64_t))v61)(v57, v59);
  v60(v27, v45);
  return ((uint64_t (*)(uint64_t *, uint64_t *, uint64_t))v58)((uint64_t *)v27, v46, v45);
}

uint64_t MLHandActionClassifier.GraphCNNModel.poseMotion(_:)()
{
  uint64_t v73 = v0;
  uint64_t v87 = type metadata accessor for TensorShape(0);
  uint64_t v88 = *(double (**)(uint64_t *, uint64_t))(v87 - 8);
  int64_t v2 = *((void *)v88 + 8);
  uint64_t v3 = alloca(v2);
  unint64_t v4 = alloca(v2);
  uint64_t v70 = (uint64_t)&v70;
  int64_t v5 = alloca(v2);
  uint64_t v6 = alloca(v2);
  long long v76 = &v70;
  uint64_t v7 = alloca(v2);
  uint64_t v8 = alloca(v2);
  v83 = &v70;
  uint64_t v86 = type metadata accessor for Tensor(0);
  uint64_t v9 = *(void *)(v86 - 8);
  int64_t v10 = *(void *)(v9 + 64);
  uint64_t v11 = alloca(v10);
  int64_t v12 = alloca(v10);
  uint64_t v78 = &v70;
  uint64_t v13 = alloca(v10);
  uint64_t v14 = alloca(v10);
  uint64_t v75 = &v70;
  unint64_t v15 = alloca(v10);
  uint64_t v16 = alloca(v10);
  uint64_t v85 = &v70;
  uint64_t v17 = alloca(v10);
  unsigned int v18 = alloca(v10);
  int v19 = alloca(v10);
  uint64_t v20 = alloca(v10);
  Tensor.transposed(permutation:)(&outlined read-only object #0 of MLHandActionClassifier.GraphCNNModel.poseMotion(_:));
  uint64_t v74 = type metadata accessor for BatchNorm(0);
  uint64_t v79 = v1;
  Layer.callAsFunction(_:)((uint64_t **)&v70, v74, &protocol witness table for BatchNorm);
  uint64_t v21 = v9;
  uint64_t v82 = v9;
  uint64_t v84 = *(void (**)(uint64_t *, uint64_t))(v9 + 8);
  uint64_t v22 = v86;
  v84(&v70, v86);
  uint64_t v23 = *(void (**)(uint64_t *, uint64_t *, uint64_t))(v21 + 32);
  v23(&v70, &v70, v22);
  Tensor.transposed(permutation:)(&outlined read-only object #1 of MLHandActionClassifier.GraphCNNModel.poseMotion(_:));
  uint64_t v24 = v84;
  v84(&v70, v22);
  v23(&v70, &v70, v22);
  Tensor.squeezingShape(at:)(&outlined read-only object #2 of MLHandActionClassifier.GraphCNNModel.poseMotion(_:));
  uint64_t v25 = v86;
  v24(&v70, v86);
  uint64_t v77 = &v70;
  uint64_t v81 = v23;
  v23(&v70, &v70, v25);
  uint64_t v71 = *(void (**)(uint64_t *, uint64_t *, uint64_t))(v82 + 16);
  v71(v85, &v70, v25);
  uint64_t v82 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Int>);
  uint64_t v26 = swift_allocObject(v82, 48, 7);
  *(void *)(v26 + 16) = 2;
  uint64_t v72 = v26;
  *(void *)(v26 + 24) = 4;
  uint64_t v27 = v83;
  ((void (*)(void))Tensor.shape.getter)();
  unint64_t v80 = TensorShape.subscript.getter(0);
  uint64_t v28 = (void (*)(uint64_t *, uint64_t))*((void *)v88 + 1);
  uint64_t v29 = v27;
  uint64_t v30 = v87;
  v28(v29, v87);
  uint64_t v31 = v76;
  ((void (*)(void))Tensor.shape.getter)();
  uint64_t v32 = TensorShape.subscript.getter(1);
  uint64_t v88 = (double (*)(uint64_t *, uint64_t))v28;
  v28(v31, v30);
  unint64_t v34 = v32;
  unint64_t v33 = v80 * v32;
  if (!is_mul_ok(v80, v34)) {
    BUG();
  }
  uint64_t v35 = v72;
  *(void *)(v72 + 32) = v33;
  uint64_t v36 = v83;
  ((void (*)(void))Tensor.shape.getter)();
  uint64_t v37 = TensorShape.subscript.getter(2);
  double v38 = v88(v36, v87);
  *(void *)(v35 + 40) = v37;
  TensorShape.init(_:)(v35, v38);
  double v39 = v77;
  uint64_t v40 = v85;
  Tensor.reshaped(to:)(v36);
  uint64_t v41 = v86;
  v88(v36, v87);
  uint64_t v42 = v84;
  v84(v40, v41);
  v42(&v70, v41);
  v81(&v70, v39, v41);
  uint64_t v85 = (uint64_t *)type metadata accessor for MLHandActionClassifier.GraphCNNModel(0);
  uint64_t v43 = type metadata accessor for Dense(0);
  Layer.callAsFunction(_:)((uint64_t **)&v70, v43, &protocol witness table for Dense);
  v42(&v70, v41);
  v81(&v70, v39, v41);
  v71(v78, &v70, v41);
  uint64_t v44 = (void *)swift_allocObject(v82, 56, 7);
  v44[2] = 3;
  v44[3] = 6;
  uint64_t v45 = (uint64_t *)v70;
  ((void (*)(void))Tensor.shape.getter)();
  uint64_t v46 = TensorShape.subscript.getter(0);
  uint64_t v47 = v45;
  uint64_t v48 = v87;
  uint64_t v49 = v87;
  v88(v45, v87);
  uint64_t v50 = *(void *)(v79 + *((int *)v85 + 10));
  if (!v50) {
    BUG();
  }
  if (v46 == 0x8000000000000000 && v50 == -1) {
    BUG();
  }
  v44[4] = v46 / v50;
  v44[5] = v50;
  uint64_t v51 = v83;
  Tensor.shape.getter(v47, v49, v46 % v50);
  unint64_t v80 = TensorShape.subscript.getter(1);
  uint64_t v52 = v48;
  uint64_t v53 = (void (*)(uint64_t *, uint64_t))v88;
  double v54 = v88(v51, v52);
  v44[6] = v80;
  TensorShape.init(_:)(v44, v54);
  uint64_t v55 = v75;
  uint64_t v56 = v78;
  Tensor.reshaped(to:)(v51);
  v53(v51, v87);
  uint64_t v57 = v86;
  uint64_t v58 = v84;
  v84(v56, v86);
  v58(&v70, v57);
  v81(&v70, v55, v57);
  Tensor.shape.getter((uint64_t **)&v70, v55, v59);
  uint64_t v60 = (void *)swift_allocObject(v82, 64, 7);
  v60[2] = 4;
  v60[3] = 8;
  v60[4] = TensorShape.subscript.getter(0);
  v60[5] = TensorShape.subscript.getter(1);
  v60[6] = TensorShape.subscript.getter(2) / 16;
  v60[7] = 16;
  uint64_t v61 = v81;
  uint64_t v62 = v76;
  TensorShape.init(_:)(v60, v54);
  uint64_t v63 = v77;
  Tensor.reshaped(to:)(v62);
  v88(v62, v87);
  uint64_t v64 = v86;
  uint64_t v65 = v84;
  v84(&v70, v86);
  v61(&v70, v63, v64);
  Tensor.transposed(permutation:)(&outlined read-only object #3 of MLHandActionClassifier.GraphCNNModel.poseMotion(_:));
  uint64_t v66 = v86;
  v65(&v70, v86);
  uint64_t v67 = v66;
  v61(&v70, v63, v66);
  Layer.callAsFunction(_:)((uint64_t **)&v70, v74, &protocol witness table for BatchNorm);
  uint64_t v68 = (uint64_t (*)(uint64_t *, uint64_t))v84;
  v84(&v70, v67);
  v61(&v70, v63, v67);
  relu(_:)((uint64_t **)&v70);
  v88(v83, v87);
  return v68(&v70, v67);
}

uint64_t protocol witness for Layer.forward(_:) in conformance MLHandActionClassifier.GraphCNNModel(uint64_t a1, double a2)
{
  return MLHandActionClassifier.GraphCNNModel.forward(_:)(a1, a2);
}

uint64_t protocol witness for _ComputeDevicePlaceable.place(on:) in conformance MLHandActionClassifier.GraphCNNModel(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = lazy protocol witness table accessor for type VNImageOption and conformance VNImageOption(&lazy protocol witness table cache variable for type MLHandActionClassifier.GraphCNNModel and conformance MLHandActionClassifier.GraphCNNModel, type metadata accessor for MLHandActionClassifier.GraphCNNModel, (uint64_t)&protocol conformance descriptor for MLHandActionClassifier.GraphCNNModel);
  return Layer.place(on:)(a1, a2, v2);
}

uint64_t protocol witness for _ComputeDevicePlaceable.placed(on:) in conformance MLHandActionClassifier.GraphCNNModel(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = lazy protocol witness table accessor for type VNImageOption and conformance VNImageOption(&lazy protocol witness table cache variable for type MLHandActionClassifier.GraphCNNModel and conformance MLHandActionClassifier.GraphCNNModel, type metadata accessor for MLHandActionClassifier.GraphCNNModel, (uint64_t)&protocol conformance descriptor for MLHandActionClassifier.GraphCNNModel);
  return Layer.placed(on:)(a1, a2, v2);
}

uint64_t MLHandActionClassifier.Torso.forward(_:)(uint64_t a1)
{
  uint64_t v19 = v2;
  uint64_t v18 = a1;
  v16[1] = v1;
  uint64_t v17 = type metadata accessor for Tensor(0);
  int64_t v3 = *(void *)(*(void *)(v17 - 8) + 64);
  uint64_t v4 = *(void *)(v17 - 8);
  int64_t v5 = alloca(v3);
  uint64_t v6 = alloca(v3);
  uint64_t v7 = alloca(v3);
  uint64_t v8 = alloca(v3);
  uint64_t v9 = type metadata accessor for MLHandActionClassifier.SingleStreamBlock(0);
  uint64_t v10 = lazy protocol witness table accessor for type VNImageOption and conformance VNImageOption(&lazy protocol witness table cache variable for type MLHandActionClassifier.SingleStreamBlock and conformance MLHandActionClassifier.SingleStreamBlock, type metadata accessor for MLHandActionClassifier.SingleStreamBlock, (uint64_t)&protocol conformance descriptor for MLHandActionClassifier.SingleStreamBlock);
  Layer.callAsFunction(_:)(v18, v9, v10);
  Layer.callAsFunction(_:)(v16, &type metadata for GlobalAveragePool2D, &protocol witness table for GlobalAveragePool2D);
  uint64_t v11 = v4;
  int64_t v12 = *(void (**)(void *, uint64_t))(v4 + 8);
  uint64_t v13 = v17;
  v12(v16, v17);
  (*(void (**)(void *, void *, uint64_t))(v11 + 32))(v16, v16, v13);
  type metadata accessor for MLHandActionClassifier.Torso(0);
  uint64_t v14 = type metadata accessor for Dense(0);
  Layer.callAsFunction(_:)(v16, v14, &protocol witness table for Dense);
  return ((uint64_t (*)(void *, uint64_t))v12)(v16, v13);
}

uint64_t protocol witness for Layer.forward(_:) in conformance MLHandActionClassifier.Torso(uint64_t a1)
{
  return MLHandActionClassifier.Torso.forward(_:)(a1);
}

uint64_t protocol witness for _ComputeDevicePlaceable.place(on:) in conformance MLHandActionClassifier.Torso(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = lazy protocol witness table accessor for type VNImageOption and conformance VNImageOption(&lazy protocol witness table cache variable for type MLHandActionClassifier.Torso and conformance MLHandActionClassifier.Torso, type metadata accessor for MLHandActionClassifier.Torso, (uint64_t)&protocol conformance descriptor for MLHandActionClassifier.Torso);
  return Layer.place(on:)(a1, a2, v2);
}

uint64_t protocol witness for _ComputeDevicePlaceable.placed(on:) in conformance MLHandActionClassifier.Torso(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = lazy protocol witness table accessor for type VNImageOption and conformance VNImageOption(&lazy protocol witness table cache variable for type MLHandActionClassifier.Torso and conformance MLHandActionClassifier.Torso, type metadata accessor for MLHandActionClassifier.Torso, (uint64_t)&protocol conformance descriptor for MLHandActionClassifier.Torso);
  return Layer.placed(on:)(a1, a2, v2);
}

uint64_t static MLHandActionClassifier.SingleStreamBlock.makeDownSampledInvertedResidual(inplanes:planes:stride:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v32 = a4;
  uint64_t v27 = v4;
  int64_t v6 = *(void *)(*(void *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ComputeDevice?)
                             - 8)
                 + 64);
  uint64_t v7 = alloca(v6);
  uint64_t v8 = alloca(v6);
  uint64_t v9 = type metadata accessor for MLHandActionClassifier.InvertedResidual(0);
  int64_t v10 = *(void *)(*(void *)(v9 - 8) + 64);
  uint64_t v11 = alloca(v10);
  int64_t v12 = alloca(v10);
  uint64_t v28 = v25;
  if (a1 + 0x4000000000000000 < 0) {
    BUG();
  }
  uint64_t v34 = v9;
  uint64_t v13 = type metadata accessor for ParameterInitializer(0);
  uint64_t v33 = a2;
  uint64_t v31 = v13;
  uint64_t v30 = type metadata accessor for ComputeDevice(0);
  __swift_storeEnumTagSinglePayload((uint64_t)v25, 1, 1, v30);
  uint64_t v14 = static ParameterInitializer.glorotUniform(seed:scalarType:on:)(0, 1, &type metadata for Float, &protocol witness table for Float, v25);
  uint64_t v29 = a3;
  uint64_t v15 = v14;
  outlined destroy of Either<LogisticRegressionClassifier<Float, String>, FullyConnectedNetworkClassifier<Float, String>>((uint64_t)v25, &demangling cache variable for type metadata for ComputeDevice?);
  uint64_t v16 = (uint64_t)v28;
  Conv2D.init(filterCount:kernelSize:stride:padding:dilation:groupCount:weightInitializer:biasInitializer:)(2 * a1, 1, 1, 1, 1, 0, 0, 1, 1, 1, v15, 0);
  AveragePool2D.init(kernelSize:stride:padding:countIncludesPadding:)(1, 3, 1, 1, 0, 0, 1, 1);
  uint64_t v17 = *(int *)(v34 + 20);
  *(unsigned char *)(v16 + v17 + 48) = v26;
  long long v18 = v25[0];
  long long v19 = v25[1];
  *(_OWORD *)(v16 + v17 + 32) = v25[2];
  *(_OWORD *)(v16 + v17 + 16) = v19;
  *(_OWORD *)(v16 + v17) = v18;
  __swift_storeEnumTagSinglePayload((uint64_t)v25, 1, 1, v30);
  uint64_t v20 = static ParameterInitializer.glorotUniform(seed:scalarType:on:)(0, 1, &type metadata for Float, &protocol witness table for Float, v25);
  outlined destroy of Either<LogisticRegressionClassifier<Float, String>, FullyConnectedNetworkClassifier<Float, String>>((uint64_t)v25, &demangling cache variable for type metadata for ComputeDevice?);
  uint64_t v21 = v29;
  Conv2D.init(filterCount:kernelSize:stride:padding:dilation:groupCount:weightInitializer:biasInitializer:)(v33, 9, 1, v29, v32, 4, 0, 1, 1, 1, v20, 0);
  uint64_t v22 = static ParameterInitializer.zeros.getter();
  uint64_t v23 = static ParameterInitializer.ones.getter();
  BatchNorm.init(offsetInitializer:scaleInitializer:momentum:epsilon:)(v22, v23, 0.1, 0.0000099999997);
  Dropout.init(probability:seed:)(0, 1, 0.2);
  return specialized MLHandActionClassifier.DownsampledResidualLayer.init(_:filterCount:stride:)(v16, v33, v21, v32);
}

uint64_t static MLHandActionClassifier.SingleStreamBlock.makeInvertedResidual(inplanes:planes:stride:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v29 = a3;
  uint64_t v27 = a2;
  uint64_t v6 = v4;
  int64_t v7 = *(void *)(*(void *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ComputeDevice?)
                             - 8)
                 + 64);
  uint64_t v8 = alloca(v7);
  uint64_t v9 = alloca(v7);
  uint64_t v10 = type metadata accessor for MLHandActionClassifier.InvertedResidual(0);
  int64_t v11 = *(void *)(*(void *)(v10 - 8) + 64);
  int64_t v12 = alloca(v11);
  uint64_t v13 = alloca(v11);
  uint64_t v28 = v25;
  if (a1 + 0x4000000000000000 < 0) {
    BUG();
  }
  uint64_t v34 = v10;
  uint64_t v14 = type metadata accessor for ParameterInitializer(0);
  uint64_t v31 = a4;
  uint64_t v33 = v14;
  uint64_t v32 = type metadata accessor for ComputeDevice(0);
  __swift_storeEnumTagSinglePayload((uint64_t)v25, 1, 1, v32);
  uint64_t v15 = static ParameterInitializer.glorotUniform(seed:scalarType:on:)(0, 1, &type metadata for Float, &protocol witness table for Float, v25);
  uint64_t v30 = v6;
  uint64_t v16 = v15;
  outlined destroy of Either<LogisticRegressionClassifier<Float, String>, FullyConnectedNetworkClassifier<Float, String>>((uint64_t)v25, &demangling cache variable for type metadata for ComputeDevice?);
  uint64_t v17 = (uint64_t)v28;
  Conv2D.init(filterCount:kernelSize:stride:padding:dilation:groupCount:weightInitializer:biasInitializer:)(2 * a1, 1, 1, 1, 1, 0, 0, 1, 1, 1, v16, 0);
  AveragePool2D.init(kernelSize:stride:padding:countIncludesPadding:)(1, 3, 1, 1, 0, 0, 1, 1);
  uint64_t v18 = *(int *)(v34 + 20);
  *(unsigned char *)(v17 + v18 + 48) = v26;
  long long v19 = v25[0];
  long long v20 = v25[1];
  *(_OWORD *)(v17 + v18 + 32) = v25[2];
  *(_OWORD *)(v17 + v18 + 16) = v20;
  *(_OWORD *)(v17 + v18) = v19;
  __swift_storeEnumTagSinglePayload((uint64_t)v25, 1, 1, v32);
  uint64_t v21 = static ParameterInitializer.glorotUniform(seed:scalarType:on:)(0, 1, &type metadata for Float, &protocol witness table for Float, v25);
  outlined destroy of Either<LogisticRegressionClassifier<Float, String>, FullyConnectedNetworkClassifier<Float, String>>((uint64_t)v25, &demangling cache variable for type metadata for ComputeDevice?);
  Conv2D.init(filterCount:kernelSize:stride:padding:dilation:groupCount:weightInitializer:biasInitializer:)(v27, 9, 1, v29, v31, 4, 0, 1, 1, 1, v21, 0);
  uint64_t v22 = static ParameterInitializer.zeros.getter();
  uint64_t v23 = static ParameterInitializer.ones.getter();
  BatchNorm.init(offsetInitializer:scaleInitializer:momentum:epsilon:)(v22, v23, 0.1, 0.0000099999997);
  Dropout.init(probability:seed:)(0, 1, 0.2);
  return outlined init with take of MLClassifierMetrics(v17, v30, type metadata accessor for MLHandActionClassifier.InvertedResidual);
}

uint64_t MLHandActionClassifier.SingleStreamBlock.forward(_:)(void (*a1)(void *, uint64_t))
{
  uint64_t v70 = a1;
  v53[1] = v1;
  uint64_t v54 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for MLHandActionClassifier.ResidualLayer<MLHandActionClassifier.InvertedResidual>);
  int64_t v3 = *(void *)(*(void *)(v54 - 8) + 64);
  uint64_t v4 = alloca(v3);
  int64_t v5 = alloca(v3);
  uint64_t v64 = v53;
  uint64_t v69 = type metadata accessor for Tensor(0);
  uint64_t v57 = *(void *)(v69 - 8);
  int64_t v6 = *(void *)(v57 + 64);
  int64_t v7 = alloca(v6);
  uint64_t v8 = alloca(v6);
  uint64_t v60 = v53;
  uint64_t v9 = alloca(v6);
  uint64_t v10 = alloca(v6);
  uint64_t v66 = v53;
  int64_t v11 = alloca(v6);
  int64_t v12 = alloca(v6);
  uint64_t v65 = v53;
  uint64_t v13 = alloca(v6);
  uint64_t v14 = alloca(v6);
  uint64_t v58 = v53;
  uint64_t v15 = alloca(v6);
  uint64_t v16 = alloca(v6);
  uint64_t v56 = v53;
  uint64_t v17 = alloca(v6);
  uint64_t v18 = alloca(v6);
  uint64_t v55 = v53;
  uint64_t v68 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for MLHandActionClassifier.DownsampledResidualLayer<MLHandActionClassifier.InvertedResidual>);
  int64_t v19 = *(void *)(*(void *)(v68 - 8) + 64);
  long long v20 = alloca(v19);
  uint64_t v21 = alloca(v19);
  uint64_t v67 = v53;
  uint64_t v22 = alloca(v19);
  uint64_t v23 = alloca(v19);
  uint64_t v62 = v53;
  uint64_t v24 = alloca(v19);
  uint64_t v25 = alloca(v19);
  uint64_t v61 = v53;
  char v26 = alloca(v19);
  uint64_t v27 = alloca(v19);
  uint64_t v59 = v53;
  uint64_t v28 = (int *)type metadata accessor for MLHandActionClassifier.SingleStreamBlock(0);
  outlined init with copy of Either<LogisticRegressionClassifier<Float, String>, FullyConnectedNetworkClassifier<Float, String>>(v2 + v28[10], (uint64_t)v53, &demangling cache variable for type metadata for MLHandActionClassifier.DownsampledResidualLayer<MLHandActionClassifier.InvertedResidual>);
  outlined init with copy of Either<LogisticRegressionClassifier<Float, String>, FullyConnectedNetworkClassifier<Float, String>>(v2 + v28[9], (uint64_t)v53, &demangling cache variable for type metadata for MLHandActionClassifier.DownsampledResidualLayer<MLHandActionClassifier.InvertedResidual>);
  outlined init with copy of Either<LogisticRegressionClassifier<Float, String>, FullyConnectedNetworkClassifier<Float, String>>(v2 + v28[8], (uint64_t)v64, &demangling cache variable for type metadata for MLHandActionClassifier.ResidualLayer<MLHandActionClassifier.InvertedResidual>);
  outlined init with copy of Either<LogisticRegressionClassifier<Float, String>, FullyConnectedNetworkClassifier<Float, String>>(v2 + v28[7], (uint64_t)v53, &demangling cache variable for type metadata for MLHandActionClassifier.DownsampledResidualLayer<MLHandActionClassifier.InvertedResidual>);
  outlined init with copy of Either<LogisticRegressionClassifier<Float, String>, FullyConnectedNetworkClassifier<Float, String>>(v2 + v28[6], (uint64_t)v67, &demangling cache variable for type metadata for MLHandActionClassifier.DownsampledResidualLayer<MLHandActionClassifier.InvertedResidual>);
  uint64_t v29 = lazy protocol witness table accessor for type FullyConnectedNetworkClassifier<Float, String> and conformance FullyConnectedNetworkClassifier<A, B>(&lazy protocol witness table cache variable for type MLHandActionClassifier.DownsampledResidualLayer<MLHandActionClassifier.InvertedResidual> and conformance MLHandActionClassifier.DownsampledResidualLayer<A>, &demangling cache variable for type metadata for MLHandActionClassifier.DownsampledResidualLayer<MLHandActionClassifier.InvertedResidual>, (uint64_t)&protocol conformance descriptor for MLHandActionClassifier.DownsampledResidualLayer<A>);
  uint64_t v30 = v60;
  uint64_t v31 = v68;
  Layer.callAsFunction(_:)(v70, v68, v29);
  Layer.callAsFunction(_:)(v30, v31, v29);
  uint64_t v70 = *(void (**)(void *, uint64_t))(v57 + 8);
  uint64_t v32 = v30;
  uint64_t v33 = v69;
  v70(v32, v69);
  uint64_t v34 = v66;
  uint64_t v35 = v68;
  uint64_t v63 = v29;
  uint64_t v36 = (uint64_t)v67;
  Layer.callAsFunction(_:)(v66, v68, v29);
  v70(v34, v33);
  outlined destroy of Either<LogisticRegressionClassifier<Float, String>, FullyConnectedNetworkClassifier<Float, String>>(v36, &demangling cache variable for type metadata for MLHandActionClassifier.DownsampledResidualLayer<MLHandActionClassifier.InvertedResidual>);
  uint64_t v37 = v58;
  double v38 = v65;
  uint64_t v39 = (uint64_t)v62;
  Layer.callAsFunction(_:)(v65, v35, v29);
  uint64_t v40 = v69;
  uint64_t v41 = v70;
  v70(v38, v69);
  outlined destroy of Either<LogisticRegressionClassifier<Float, String>, FullyConnectedNetworkClassifier<Float, String>>(v39, &demangling cache variable for type metadata for MLHandActionClassifier.DownsampledResidualLayer<MLHandActionClassifier.InvertedResidual>);
  uint64_t v42 = lazy protocol witness table accessor for type FullyConnectedNetworkClassifier<Float, String> and conformance FullyConnectedNetworkClassifier<A, B>(&lazy protocol witness table cache variable for type MLHandActionClassifier.ResidualLayer<MLHandActionClassifier.InvertedResidual> and conformance MLHandActionClassifier.ResidualLayer<A>, &demangling cache variable for type metadata for MLHandActionClassifier.ResidualLayer<MLHandActionClassifier.InvertedResidual>, (uint64_t)&protocol conformance descriptor for MLHandActionClassifier.ResidualLayer<A>);
  uint64_t v43 = v56;
  uint64_t v44 = (uint64_t)v64;
  Layer.callAsFunction(_:)(v37, v54, v42);
  v41(v37, v40);
  outlined destroy of Either<LogisticRegressionClassifier<Float, String>, FullyConnectedNetworkClassifier<Float, String>>(v44, &demangling cache variable for type metadata for MLHandActionClassifier.ResidualLayer<MLHandActionClassifier.InvertedResidual>);
  uint64_t v45 = v55;
  uint64_t v46 = v68;
  uint64_t v47 = v63;
  uint64_t v48 = (uint64_t)v61;
  Layer.callAsFunction(_:)(v43, v68, v63);
  uint64_t v49 = v43;
  uint64_t v50 = v70;
  v70(v49, v69);
  outlined destroy of Either<LogisticRegressionClassifier<Float, String>, FullyConnectedNetworkClassifier<Float, String>>(v48, &demangling cache variable for type metadata for MLHandActionClassifier.DownsampledResidualLayer<MLHandActionClassifier.InvertedResidual>);
  uint64_t v51 = (uint64_t)v59;
  Layer.callAsFunction(_:)(v45, v46, v47);
  v50(v45, v69);
  return outlined destroy of Either<LogisticRegressionClassifier<Float, String>, FullyConnectedNetworkClassifier<Float, String>>(v51, &demangling cache variable for type metadata for MLHandActionClassifier.DownsampledResidualLayer<MLHandActionClassifier.InvertedResidual>);
}

uint64_t specialized MLHandActionClassifier.DownsampledResidualLayer.init(_:filterCount:stride:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v22 = a4;
  uint64_t v21 = a3;
  uint64_t v23 = a2;
  uint64_t v24 = a1;
  uint64_t v5 = v4;
  uint64_t v19 = type metadata accessor for BatchNorm(0);
  uint64_t v20 = *(void *)(v19 - 8);
  int64_t v6 = *(void *)(v20 + 64);
  int64_t v7 = alloca(v6);
  uint64_t v8 = alloca(v6);
  int64_t v9 = *(void *)(*(void *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ComputeDevice?)
                             - 8)
                 + 64);
  uint64_t v10 = alloca(v9);
  int64_t v11 = alloca(v9);
  outlined init with copy of MLTrainingSessionParameters(a1, v5, type metadata accessor for MLHandActionClassifier.InvertedResidual);
  type metadata accessor for ParameterInitializer(0);
  uint64_t v12 = type metadata accessor for ComputeDevice(0);
  __swift_storeEnumTagSinglePayload((uint64_t)&v18, 1, 1, v12);
  uint64_t v13 = static ParameterInitializer.glorotUniform(seed:scalarType:on:)(0, 1, &type metadata for Float, &protocol witness table for Float, &v18);
  outlined destroy of Either<LogisticRegressionClassifier<Float, String>, FullyConnectedNetworkClassifier<Float, String>>((uint64_t)&v18, &demangling cache variable for type metadata for ComputeDevice?);
  uint64_t v14 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for MLHandActionClassifier.DownsampledResidualLayer<MLHandActionClassifier.InvertedResidual>);
  Conv2D.init(filterCount:kernelSize:stride:padding:dilation:groupCount:weightInitializer:biasInitializer:)(v23, 1, 1, v21, v22, 0, 0, 1, 1, 1, v13, 0);
  uint64_t v15 = static ParameterInitializer.zeros.getter();
  uint64_t v16 = static ParameterInitializer.ones.getter();
  BatchNorm.init(offsetInitializer:scaleInitializer:momentum:epsilon:)(v15, v16, 0.1, 0.0000099999997);
  outlined destroy of MLActivityClassifier.ModelParameters(v24, type metadata accessor for MLHandActionClassifier.InvertedResidual);
  return (*(uint64_t (**)(uint64_t, uint64_t *, uint64_t))(v20 + 32))(v5 + *(int *)(v14 + 40), &v18, v19);
}

uint64_t protocol witness for Layer.forward(_:) in conformance MLHandActionClassifier.SingleStreamBlock(void (*a1)(void *, uint64_t))
{
  return MLHandActionClassifier.SingleStreamBlock.forward(_:)(a1);
}

uint64_t protocol witness for _ComputeDevicePlaceable.place(on:) in conformance MLHandActionClassifier.SingleStreamBlock(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = lazy protocol witness table accessor for type VNImageOption and conformance VNImageOption(&lazy protocol witness table cache variable for type MLHandActionClassifier.SingleStreamBlock and conformance MLHandActionClassifier.SingleStreamBlock, type metadata accessor for MLHandActionClassifier.SingleStreamBlock, (uint64_t)&protocol conformance descriptor for MLHandActionClassifier.SingleStreamBlock);
  return Layer.place(on:)(a1, a2, v2);
}

uint64_t protocol witness for _ComputeDevicePlaceable.placed(on:) in conformance MLHandActionClassifier.SingleStreamBlock(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = lazy protocol witness table accessor for type VNImageOption and conformance VNImageOption(&lazy protocol witness table cache variable for type MLHandActionClassifier.SingleStreamBlock and conformance MLHandActionClassifier.SingleStreamBlock, type metadata accessor for MLHandActionClassifier.SingleStreamBlock, (uint64_t)&protocol conformance descriptor for MLHandActionClassifier.SingleStreamBlock);
  return Layer.placed(on:)(a1, a2, v2);
}

uint64_t MLHandActionClassifier.InvertedResidual.forward(_:)(uint64_t a1)
{
  uint64_t v21 = v1;
  uint64_t v23 = type metadata accessor for Tensor(0);
  int64_t v3 = *(void **)(v23 - 8);
  int64_t v4 = v3[8];
  uint64_t v5 = alloca(v4);
  int64_t v6 = alloca(v4);
  int64_t v7 = alloca(v4);
  uint64_t v8 = alloca(v4);
  uint64_t v22 = type metadata accessor for Conv2D(0);
  Layer.callAsFunction(_:)(a1, v22, &protocol witness table for Conv2D);
  uint64_t v26 = type metadata accessor for MLHandActionClassifier.InvertedResidual(0);
  uint64_t v9 = *(int *)(v26 + 20);
  uint64_t v25 = v2;
  char v10 = *(unsigned char *)(v2 + v9 + 48);
  v19[0] = *(_OWORD *)(v2 + v9);
  v19[1] = *(_OWORD *)(v2 + v9 + 16);
  v19[2] = *(_OWORD *)(v2 + v9 + 32);
  char v20 = v10;
  Layer.callAsFunction(_:)(v19, &type metadata for AveragePool2D, &protocol witness table for AveragePool2D);
  uint64_t v27 = (void (*)(_OWORD *, uint64_t))v3[1];
  uint64_t v11 = v23;
  v27(v19, v23);
  uint64_t v24 = (void (*)(_OWORD *, _OWORD *, uint64_t))v3[4];
  v24(v19, v19, v11);
  Layer.callAsFunction(_:)(v19, v22, &protocol witness table for Conv2D);
  uint64_t v12 = v11;
  uint64_t v13 = v11;
  uint64_t v14 = v27;
  v27(v19, v13);
  v24(v19, v19, v12);
  uint64_t v15 = type metadata accessor for BatchNorm(0);
  Layer.callAsFunction(_:)(v19, v15, &protocol witness table for BatchNorm);
  uint64_t v16 = v23;
  v14(v19, v23);
  v24(v19, v19, v16);
  uint64_t v17 = type metadata accessor for Dropout(0);
  Layer.callAsFunction(_:)(v19, v17, &protocol witness table for Dropout);
  return ((uint64_t (*)(_OWORD *, uint64_t))v27)(v19, v16);
}

uint64_t protocol witness for Layer.forward(_:) in conformance MLHandActionClassifier.InvertedResidual(uint64_t a1)
{
  return MLHandActionClassifier.InvertedResidual.forward(_:)(a1);
}

uint64_t protocol witness for _ComputeDevicePlaceable.place(on:) in conformance MLHandActionClassifier.InvertedResidual(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = lazy protocol witness table accessor for type VNImageOption and conformance VNImageOption(&lazy protocol witness table cache variable for type MLHandActionClassifier.InvertedResidual and conformance MLHandActionClassifier.InvertedResidual, type metadata accessor for MLHandActionClassifier.InvertedResidual, (uint64_t)&protocol conformance descriptor for MLHandActionClassifier.InvertedResidual);
  return Layer.place(on:)(a1, a2, v2);
}

uint64_t protocol witness for _ComputeDevicePlaceable.placed(on:) in conformance MLHandActionClassifier.InvertedResidual(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = lazy protocol witness table accessor for type VNImageOption and conformance VNImageOption(&lazy protocol witness table cache variable for type MLHandActionClassifier.InvertedResidual and conformance MLHandActionClassifier.InvertedResidual, type metadata accessor for MLHandActionClassifier.InvertedResidual, (uint64_t)&protocol conformance descriptor for MLHandActionClassifier.InvertedResidual);
  return Layer.placed(on:)(a1, a2, v2);
}

uint64_t MLHandActionClassifier.ResidualLayer.forward(_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v8 = v2;
  uint64_t v3 = type metadata accessor for Tensor(0);
  uint64_t v9 = *(void *)(v3 - 8);
  int64_t v4 = *(void *)(v9 + 64);
  uint64_t v5 = alloca(v4);
  int64_t v6 = alloca(v4);
  Layer.callAsFunction(_:)(a1, *(void *)(a2 + 16), *(void *)(a2 + 24));
  static Tensor.+= infix(_:_:)(&v8, a1);
  relu(_:)(&v8);
  return (*(uint64_t (**)(uint64_t *, uint64_t))(v9 + 8))(&v8, v3);
}

uint64_t protocol witness for Layer.forward(_:) in conformance MLHandActionClassifier.ResidualLayer<A>(uint64_t a1, uint64_t a2)
{
  return MLHandActionClassifier.ResidualLayer.forward(_:)(a1, a2);
}

uint64_t protocol witness for _ComputeDevicePlaceable.place(on:) in conformance MLHandActionClassifier.ResidualLayer<A>(uint64_t a1, uint64_t a2)
{
  uint64_t WitnessTable = swift_getWitnessTable(&protocol conformance descriptor for MLHandActionClassifier.ResidualLayer<A>, a2);
  return Layer.place(on:)(a1, a2, WitnessTable);
}

uint64_t protocol witness for _ComputeDevicePlaceable.placed(on:) in conformance MLHandActionClassifier.ResidualLayer<A>(uint64_t a1, uint64_t a2)
{
  uint64_t WitnessTable = swift_getWitnessTable(&protocol conformance descriptor for MLHandActionClassifier.ResidualLayer<A>, a2);
  return Layer.placed(on:)(a1, a2, WitnessTable);
}

uint64_t MLHandActionClassifier.DownsampledResidualLayer.forward(_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v17 = v2;
  uint64_t v18 = type metadata accessor for Tensor(0);
  uint64_t v19 = *(void *)(v18 - 8);
  int64_t v3 = *(void *)(v19 + 64);
  int64_t v4 = alloca(v3);
  uint64_t v5 = alloca(v3);
  int64_t v6 = alloca(v3);
  int64_t v7 = alloca(v3);
  uint64_t v21 = &v17;
  uint64_t v8 = alloca(v3);
  uint64_t v9 = alloca(v3);
  char v20 = &v17;
  Layer.callAsFunction(_:)(a1, *(void *)(a2 + 16), *(void *)(a2 + 24));
  uint64_t v10 = type metadata accessor for Conv2D(0);
  Layer.callAsFunction(_:)(a1, v10, &protocol witness table for Conv2D);
  uint64_t v11 = type metadata accessor for BatchNorm(0);
  uint64_t v12 = v21;
  Layer.callAsFunction(_:)(&v17, v11, &protocol witness table for BatchNorm);
  uint64_t v13 = *(void (**)(uint64_t *, uint64_t))(v19 + 8);
  uint64_t v14 = v18;
  v13(&v17, v18);
  uint64_t v15 = v20;
  static Tensor.+= infix(_:_:)(v20, v12);
  v13(v12, v14);
  relu(_:)(v15);
  return ((uint64_t (*)(uint64_t *, uint64_t))v13)(v15, v14);
}

uint64_t protocol witness for Layer.forward(_:) in conformance MLHandActionClassifier.DownsampledResidualLayer<A>(uint64_t a1, uint64_t a2)
{
  return MLHandActionClassifier.DownsampledResidualLayer.forward(_:)(a1, a2);
}

uint64_t protocol witness for _ComputeDevicePlaceable.place(on:) in conformance MLHandActionClassifier.DownsampledResidualLayer<A>(uint64_t a1, uint64_t a2)
{
  uint64_t WitnessTable = swift_getWitnessTable(&protocol conformance descriptor for MLHandActionClassifier.DownsampledResidualLayer<A>, a2);
  return Layer.place(on:)(a1, a2, WitnessTable);
}

uint64_t protocol witness for _ComputeDevicePlaceable.placed(on:) in conformance MLHandActionClassifier.DownsampledResidualLayer<A>(uint64_t a1, uint64_t a2)
{
  uint64_t WitnessTable = swift_getWitnessTable(&protocol conformance descriptor for MLHandActionClassifier.DownsampledResidualLayer<A>, a2);
  return Layer.placed(on:)(a1, a2, WitnessTable);
}

uint64_t base witness table accessor for _BaseLayer in MLHandActionClassifier.DownsampledResidualLayer<A>(uint64_t a1)
{
  return swift_getWitnessTable(&protocol conformance descriptor for MLHandActionClassifier.DownsampledResidualLayer<A>, a1);
}

uint64_t base witness table accessor for _ComputeDevicePlaceable in MLHandActionClassifier.DownsampledResidualLayer<A>(uint64_t a1)
{
  return swift_getWitnessTable(&protocol conformance descriptor for MLHandActionClassifier.DownsampledResidualLayer<A>, a1);
}

uint64_t base witness table accessor for _Differentiable in MLHandActionClassifier.DownsampledResidualLayer<A>(uint64_t a1)
{
  return swift_getWitnessTable(&protocol conformance descriptor for MLHandActionClassifier.DownsampledResidualLayer<A>, a1);
}

uint64_t base witness table accessor for _BaseLayer in MLHandActionClassifier.ResidualLayer<A>(uint64_t a1)
{
  return swift_getWitnessTable(&protocol conformance descriptor for MLHandActionClassifier.ResidualLayer<A>, a1);
}

uint64_t base witness table accessor for _ComputeDevicePlaceable in MLHandActionClassifier.ResidualLayer<A>(uint64_t a1)
{
  return swift_getWitnessTable(&protocol conformance descriptor for MLHandActionClassifier.ResidualLayer<A>, a1);
}

uint64_t base witness table accessor for _Differentiable in MLHandActionClassifier.ResidualLayer<A>(uint64_t a1)
{
  return swift_getWitnessTable(&protocol conformance descriptor for MLHandActionClassifier.ResidualLayer<A>, a1);
}

uint64_t base witness table accessor for _BaseLayer in MLHandActionClassifier.SingleStreamBlock()
{
  return lazy protocol witness table accessor for type VNImageOption and conformance VNImageOption(&lazy protocol witness table cache variable for type MLHandActionClassifier.SingleStreamBlock and conformance MLHandActionClassifier.SingleStreamBlock, type metadata accessor for MLHandActionClassifier.SingleStreamBlock, (uint64_t)&protocol conformance descriptor for MLHandActionClassifier.SingleStreamBlock);
}

uint64_t base witness table accessor for _ComputeDevicePlaceable in MLHandActionClassifier.SingleStreamBlock()
{
  return lazy protocol witness table accessor for type VNImageOption and conformance VNImageOption(&lazy protocol witness table cache variable for type MLHandActionClassifier.SingleStreamBlock and conformance MLHandActionClassifier.SingleStreamBlock, type metadata accessor for MLHandActionClassifier.SingleStreamBlock, (uint64_t)&protocol conformance descriptor for MLHandActionClassifier.SingleStreamBlock);
}

uint64_t base witness table accessor for _Differentiable in MLHandActionClassifier.SingleStreamBlock()
{
  return lazy protocol witness table accessor for type VNImageOption and conformance VNImageOption(&lazy protocol witness table cache variable for type MLHandActionClassifier.SingleStreamBlock and conformance MLHandActionClassifier.SingleStreamBlock, type metadata accessor for MLHandActionClassifier.SingleStreamBlock, (uint64_t)&protocol conformance descriptor for MLHandActionClassifier.SingleStreamBlock);
}

uint64_t base witness table accessor for _BaseLayer in MLHandActionClassifier.InvertedResidual()
{
  return lazy protocol witness table accessor for type VNImageOption and conformance VNImageOption(&lazy protocol witness table cache variable for type MLHandActionClassifier.InvertedResidual and conformance MLHandActionClassifier.InvertedResidual, type metadata accessor for MLHandActionClassifier.InvertedResidual, (uint64_t)&protocol conformance descriptor for MLHandActionClassifier.InvertedResidual);
}

uint64_t base witness table accessor for _ComputeDevicePlaceable in MLHandActionClassifier.InvertedResidual()
{
  return lazy protocol witness table accessor for type VNImageOption and conformance VNImageOption(&lazy protocol witness table cache variable for type MLHandActionClassifier.InvertedResidual and conformance MLHandActionClassifier.InvertedResidual, type metadata accessor for MLHandActionClassifier.InvertedResidual, (uint64_t)&protocol conformance descriptor for MLHandActionClassifier.InvertedResidual);
}

uint64_t base witness table accessor for _Differentiable in MLHandActionClassifier.InvertedResidual()
{
  return lazy protocol witness table accessor for type VNImageOption and conformance VNImageOption(&lazy protocol witness table cache variable for type MLHandActionClassifier.InvertedResidual and conformance MLHandActionClassifier.InvertedResidual, type metadata accessor for MLHandActionClassifier.InvertedResidual, (uint64_t)&protocol conformance descriptor for MLHandActionClassifier.InvertedResidual);
}

uint64_t base witness table accessor for _BaseLayer in MLHandActionClassifier.Torso()
{
  return lazy protocol witness table accessor for type VNImageOption and conformance VNImageOption(&lazy protocol witness table cache variable for type MLHandActionClassifier.Torso and conformance MLHandActionClassifier.Torso, type metadata accessor for MLHandActionClassifier.Torso, (uint64_t)&protocol conformance descriptor for MLHandActionClassifier.Torso);
}

uint64_t base witness table accessor for _ComputeDevicePlaceable in MLHandActionClassifier.Torso()
{
  return lazy protocol witness table accessor for type VNImageOption and conformance VNImageOption(&lazy protocol witness table cache variable for type MLHandActionClassifier.Torso and conformance MLHandActionClassifier.Torso, type metadata accessor for MLHandActionClassifier.Torso, (uint64_t)&protocol conformance descriptor for MLHandActionClassifier.Torso);
}

uint64_t base witness table accessor for _Differentiable in MLHandActionClassifier.Torso()
{
  return lazy protocol witness table accessor for type VNImageOption and conformance VNImageOption(&lazy protocol witness table cache variable for type MLHandActionClassifier.Torso and conformance MLHandActionClassifier.Torso, type metadata accessor for MLHandActionClassifier.Torso, (uint64_t)&protocol conformance descriptor for MLHandActionClassifier.Torso);
}

uint64_t base witness table accessor for _BaseLayer in MLHandActionClassifier.GraphCNNModel()
{
  return lazy protocol witness table accessor for type VNImageOption and conformance VNImageOption(&lazy protocol witness table cache variable for type MLHandActionClassifier.GraphCNNModel and conformance MLHandActionClassifier.GraphCNNModel, type metadata accessor for MLHandActionClassifier.GraphCNNModel, (uint64_t)&protocol conformance descriptor for MLHandActionClassifier.GraphCNNModel);
}

uint64_t base witness table accessor for _ComputeDevicePlaceable in MLHandActionClassifier.GraphCNNModel()
{
  return lazy protocol witness table accessor for type VNImageOption and conformance VNImageOption(&lazy protocol witness table cache variable for type MLHandActionClassifier.GraphCNNModel and conformance MLHandActionClassifier.GraphCNNModel, type metadata accessor for MLHandActionClassifier.GraphCNNModel, (uint64_t)&protocol conformance descriptor for MLHandActionClassifier.GraphCNNModel);
}

uint64_t base witness table accessor for _Differentiable in MLHandActionClassifier.GraphCNNModel()
{
  return lazy protocol witness table accessor for type VNImageOption and conformance VNImageOption(&lazy protocol witness table cache variable for type MLHandActionClassifier.GraphCNNModel and conformance MLHandActionClassifier.GraphCNNModel, type metadata accessor for MLHandActionClassifier.GraphCNNModel, (uint64_t)&protocol conformance descriptor for MLHandActionClassifier.GraphCNNModel);
}

void *specialized _ModelCheckpoint<>.trainableSublayers(model:)(uint64_t a1, uint64_t (*a2)(uint64_t), uint64_t *a3, uint64_t a4)
{
  uint64_t v6 = a2(0);
  uint64_t v7 = lazy protocol witness table accessor for type VNImageOption and conformance VNImageOption(a3, a2, a4);
  uint64_t v27 = Layer.sublayers(recursively:)(1, v6, v7);
  uint64_t v28 = dispatch thunk of _AnySequenceBox._makeIterator()();
  dispatch thunk of _AnyIteratorBoxBase.next()();
  if (v23)
  {
    uint64_t v29 = _swiftEmptyArrayStorage;
    do
    {
      outlined init with take of MLIdentifier(&v22, (uint64_t)v19);
      outlined init with copy of TabularRegressionTask((uint64_t)v19, (uint64_t)v17);
      uint64_t v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Layer);
      uint64_t v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _LayerDictionaryRepresentable);
      if (swift_dynamicCast(v18, v17, v8, v9, 0))
      {
        outlined init with copy of TabularRegressionTask((uint64_t)v19, (uint64_t)&v24);
        __swift_destroy_boxed_opaque_existential_1Tm(v18);
      }
      else
      {
        uint64_t v10 = v21;
        uint64_t v11 = v20;
        __swift_project_boxed_opaque_existential_0Tm(v19, v20);
        uint64_t v12 = Layer.parameters(recursively:)(0, v11, v10);
        uint64_t v13 = *(void *)(v12 + 16);
        swift_bridgeObjectRelease(v12);
        if (v13)
        {
          outlined init with copy of TabularRegressionTask((uint64_t)v19, (uint64_t)&v24);
        }
        else
        {
          long long v25 = 0;
          long long v24 = 0;
          uint64_t v26 = 0;
        }
      }
      __swift_destroy_boxed_opaque_existential_1Tm(v17);
      __swift_destroy_boxed_opaque_existential_1Tm(v19);
      if (*((void *)&v25 + 1))
      {
        outlined init with take of MLIdentifier(&v24, (uint64_t)v17);
        outlined init with take of MLIdentifier(v17, (uint64_t)&v24);
        if (!swift_isUniquelyReferenced_nonNull_native(v29)) {
          uint64_t v29 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v29[2] + 1, 1, (uint64_t)v29);
        }
        unint64_t v14 = v29[2];
        if (v29[3] >> 1 <= v14) {
          uint64_t v29 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(v29[3] >= 2uLL, v14 + 1, 1, (uint64_t)v29);
        }
        uint64_t v15 = v29;
        v29[2] = v14 + 1;
        outlined init with take of MLIdentifier(&v24, (uint64_t)&v15[5 * v14 + 4]);
      }
      else
      {
        outlined destroy of Either<LogisticRegressionClassifier<Float, String>, FullyConnectedNetworkClassifier<Float, String>>((uint64_t)&v24, &demangling cache variable for type metadata for Layer?);
      }
      dispatch thunk of _AnyIteratorBoxBase.next()();
    }
    while (v23);
  }
  else
  {
    uint64_t v29 = _swiftEmptyArrayStorage;
  }
  swift_release();
  swift_release();
  return v29;
}

uint64_t specialized _ModelCheckpoint<>.restoreLayer<A>(_:optimizer:layerName:checkpointDictionary:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t (*a6)(void), uint64_t (*a7)(void), uint64_t (*a8)(uint64_t, uint64_t (*)(void)), void *a9, uint64_t *a10, uint64_t (*a11)(uint64_t), uint64_t a12, void (*a13)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t), uint64_t (*a14)(uint64_t, uint64_t))
{
  v145 = a6;
  uint64_t v146 = v14;
  uint64_t v141 = a5;
  v144._countAndFlagsBits = a3;
  uint64_t v126 = a2;
  uint64_t v133 = a1;
  uint64_t v127 = type metadata accessor for LayerState(0);
  uint64_t v120 = *(void *)(v127 - 8);
  int64_t v17 = *(void *)(v120 + 64);
  uint64_t v18 = alloca(v17);
  uint64_t v19 = alloca(v17);
  v122 = &v118;
  uint64_t v20 = alloca(v17);
  uint64_t v21 = alloca(v17);
  v121 = &v118;
  int64_t v22 = *(void *)(*(void *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TensorShape?)
                              - 8)
                  + 64);
  uint64_t v23 = alloca(v22);
  long long v24 = alloca(v22);
  v130 = &v118;
  long long v25 = alloca(v22);
  uint64_t v26 = alloca(v22);
  v147 = &v118;
  uint64_t v137 = type metadata accessor for Tensor(0);
  uint64_t v129 = *(void *)(v137 - 8);
  int64_t v27 = *(void *)(v129 + 64);
  uint64_t v28 = alloca(v27);
  uint64_t v29 = alloca(v27);
  v119 = &v118;
  uint64_t v30 = alloca(v27);
  uint64_t v31 = alloca(v27);
  v128 = &v118;
  uint64_t v32 = alloca(v27);
  uint64_t v33 = alloca(v27);
  v135 = &v118;
  int64_t v34 = *(void *)(*(void *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Tensor?)
                              - 8)
                  + 64);
  uint64_t v35 = alloca(v34);
  uint64_t v36 = alloca(v34);
  v134 = &v118;
  uint64_t v125 = type metadata accessor for Parameter(0);
  uint64_t v148 = *(void *)(v125 - 8);
  int64_t v37 = *(void *)(v148 + 64);
  double v38 = alloca(v37);
  uint64_t v39 = alloca(v37);
  uint64_t v118 = (uint64_t)&v118;
  uint64_t v40 = alloca(v37);
  uint64_t v41 = alloca(v37);
  v138 = &v118;
  uint64_t v142 = type metadata accessor for BatchNorm(0);
  uint64_t v42 = *(void *)(v142 - 8);
  int64_t v43 = *(void *)(v42 + 64);
  uint64_t v44 = alloca(v43);
  uint64_t v45 = alloca(v43);
  v145 = (uint64_t (*)(void))v145();
  uint64_t v136 = v15;
  uint64_t v46 = a4;
  uint64_t v47 = a7();
  uint64_t v48 = v146;
  static BatchNorm.loadLayer(from:layerName:)(v141, v144._countAndFlagsBits, v46);
  uint64_t v146 = v48;
  if (v48)
  {
    swift_bridgeObjectRelease((_BYTE)v145);
    return swift_bridgeObjectRelease(v47);
  }
  uint64_t v140 = v47;
  v139 = (void *)v46;
  v149 = &v118;
  uint64_t v143 = v42;
  uint64_t v50 = v138;
  BatchNorm.$offset.getter();
  unsigned int v51 = Parameter.id.getter();
  uint64_t v52 = *(void (**)(uint64_t *, uint64_t))(v148 + 8);
  v52(v50, v125);
  uint64_t v53 = v51;
  char v54 = (char)v145;
  uint64_t v55 = a8(v53, v145);
  if (!v55)
  {
    swift_bridgeObjectRelease(v140);
    swift_bridgeObjectRelease(v54);
    v132._countAndFlagsBits = 0;
    v132._object = (void *)0xE000000000000000;
    _StringGuts.grow(_:)(47);
    swift_bridgeObjectRelease(v132._object);
    v132._countAndFlagsBits = 0xD000000000000019;
    v69._countAndFlagsBits = v144._countAndFlagsBits;
    v69._object = v139;
    String.append(_:)(v69);
    v69._countAndFlagsBits = 0xD000000000000014;
    String.append(_:)(v69);
    Swift::String v144 = v132;
    v69._object = (void *)lazy protocol witness table accessor for type MLCreateError and conformance MLCreateError();
    swift_allocError(&type metadata for MLCreateError, v69._object, 0, 0);
    *(Swift::String *)uint64_t v70 = v144;
    *(_OWORD *)(v70 + 16) = 0;
    *(_OWORD *)(v70 + 32) = 0;
    *(unsigned char *)(v70 + 48) = 2;
    swift_willThrow(&type metadata for MLCreateError, v69._object, v70, v71, v72, v73);
    goto LABEL_12;
  }
  v123 = (void (*)(uint64_t, uint64_t))v52;
  uint64_t v56 = v55;
  uint64_t v148 = v55;
  BatchNorm.offset.getter();
  uint64_t v57 = *a9 + v136;
  swift_beginAccess(v57, &v132, 33, 0);
  uint64_t v58 = lazy protocol witness table accessor for type VNImageOption and conformance VNImageOption(a10, a11, a12);
  uint64_t v59 = (uint64_t)v134;
  uint64_t v131 = v58;
  uint64_t v136 = v57;
  Layer.updateValue<A>(_:for:)(v135, v56, v58, &protocol witness table for Parameter);
  uint64_t v60 = *(void (**)(uint64_t *, uint64_t))(v129 + 8);
  v60(v135, v137);
  outlined destroy of Either<LogisticRegressionClassifier<Float, String>, FullyConnectedNetworkClassifier<Float, String>>(v59, &demangling cache variable for type metadata for Tensor?);
  swift_endAccess(&v132);
  uint64_t v61 = (uint64_t)v128;
  BatchNorm.offset.getter();
  uint64_t v62 = (uint64_t)v147;
  Tensor.shape.getter();
  v138 = (uint64_t *)v60;
  v60((uint64_t *)v61, v137);
  v128 = (uint64_t *)type metadata accessor for TensorShape(0);
  __swift_storeEnumTagSinglePayload(v62, 0, 1, (uint64_t)v128);
  uint64_t v129 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<CVarArg>);
  uint64_t v63 = (void *)swift_allocObject(v129, 72, 7);
  v63[2] = 1;
  v63[3] = 2;
  v63[7] = &type metadata for String;
  uint64_t v124 = lazy protocol witness table accessor for type String and conformance String();
  v63[8] = v124;
  v63[4] = v144._countAndFlagsBits;
  char v64 = (char)v139;
  v63[5] = v139;
  swift_bridgeObjectRetain(v64);
  uint64_t v65 = String.init(format:_:)(0x657366666F2E4025, 0xE900000000000074, v63);
  char v67 = v66;
  uint64_t v68 = v146;
  a13(v148, v62, v141, v65, v66);
  if (v68)
  {
    swift_release();
    swift_bridgeObjectRelease(v140);
    swift_bridgeObjectRelease((_BYTE)v145);
    swift_bridgeObjectRelease(v67);
    outlined destroy of Either<LogisticRegressionClassifier<Float, String>, FullyConnectedNetworkClassifier<Float, String>>((uint64_t)v147, &demangling cache variable for type metadata for TensorShape?);
LABEL_12:
    v90 = v149;
    uint64_t v91 = v142;
    return (*(uint64_t (**)(uint64_t *, uint64_t))(v143 + 8))(v90, v91);
  }
  uint64_t v146 = 0;
  outlined destroy of Either<LogisticRegressionClassifier<Float, String>, FullyConnectedNetworkClassifier<Float, String>>((uint64_t)v147, &demangling cache variable for type metadata for TensorShape?);
  swift_bridgeObjectRelease(v67);
  uint64_t v74 = v118;
  BatchNorm.$scale.getter();
  unsigned int v75 = Parameter.id.getter();
  v123(v74, v125);
  LOBYTE(v74) = (_BYTE)v145;
  uint64_t v76 = a8(v75, v145);
  swift_bridgeObjectRelease(v74);
  if (!v76)
  {
    swift_bridgeObjectRelease(v140);
    v132._countAndFlagsBits = 0;
    v132._object = (void *)0xE000000000000000;
    _StringGuts.grow(_:)(46);
    swift_bridgeObjectRelease(v132._object);
    v132._countAndFlagsBits = 0xD000000000000019;
    v92._countAndFlagsBits = v144._countAndFlagsBits;
    v92._object = v139;
    String.append(_:)(v92);
    v92._countAndFlagsBits = 0xD000000000000013;
    String.append(_:)(v92);
    Swift::String v144 = v132;
    v92._object = (void *)lazy protocol witness table accessor for type MLCreateError and conformance MLCreateError();
    swift_allocError(&type metadata for MLCreateError, v92._object, 0, 0);
    *(Swift::String *)uint64_t v93 = v144;
    *(_OWORD *)(v93 + 16) = 0;
    *(_OWORD *)(v93 + 32) = 0;
    *(unsigned char *)(v93 + 48) = 2;
    swift_willThrow(&type metadata for MLCreateError, v92._object, v93, v94, v95, v96);
LABEL_11:
    swift_release();
    goto LABEL_12;
  }
  uint64_t v77 = v135;
  BatchNorm.scale.getter();
  swift_beginAccess(v136, &v132, 33, 0);
  uint64_t v78 = v76;
  v147 = (uint64_t *)v76;
  uint64_t v79 = (uint64_t)v134;
  Layer.updateValue<A>(_:for:)(v77, v78, v131, &protocol witness table for Parameter);
  unint64_t v80 = v77;
  uint64_t v81 = v137;
  ((void (*)(uint64_t *, uint64_t))v138)(v80, v137);
  outlined destroy of Either<LogisticRegressionClassifier<Float, String>, FullyConnectedNetworkClassifier<Float, String>>(v79, &demangling cache variable for type metadata for Tensor?);
  swift_endAccess(&v132);
  uint64_t v82 = v119;
  BatchNorm.scale.getter();
  uint64_t v83 = (uint64_t)v130;
  Tensor.shape.getter();
  ((void (*)(uint64_t *, uint64_t))v138)(v82, v81);
  __swift_storeEnumTagSinglePayload(v83, 0, 1, (uint64_t)v128);
  uint64_t v84 = (void *)swift_allocObject(v129, 72, 7);
  v84[2] = 1;
  v84[3] = 2;
  v84[7] = &type metadata for String;
  v84[8] = v124;
  v84[4] = v144._countAndFlagsBits;
  LOBYTE(v80) = (_BYTE)v139;
  v84[5] = v139;
  swift_bridgeObjectRetain((_BYTE)v80);
  uint64_t v85 = String.init(format:_:)(0x656C6163732E4025, 0xE800000000000000, v84);
  char v87 = v86;
  uint64_t v88 = v146;
  a13((uint64_t)v147, v83, v141, v85, v86);
  uint64_t v89 = v142;
  if (v88)
  {
    swift_release();
    swift_release();
    swift_bridgeObjectRelease(v140);
    swift_bridgeObjectRelease(v87);
    outlined destroy of Either<LogisticRegressionClassifier<Float, String>, FullyConnectedNetworkClassifier<Float, String>>((uint64_t)v130, &demangling cache variable for type metadata for TensorShape?);
    v90 = v149;
    uint64_t v91 = v89;
    return (*(uint64_t (**)(uint64_t *, uint64_t))(v143 + 8))(v90, v91);
  }
  uint64_t v146 = 0;
  outlined destroy of Either<LogisticRegressionClassifier<Float, String>, FullyConnectedNetworkClassifier<Float, String>>((uint64_t)v130, &demangling cache variable for type metadata for TensorShape?);
  swift_bridgeObjectRelease(v87);
  uint64_t v97 = v121;
  BatchNorm.$runningMean.getter();
  unsigned int v98 = LayerState.id.getter();
  uint64_t v99 = *(uint64_t (**)(void))(v120 + 8);
  ((void (*)(uint64_t *, uint64_t))v99)(v97, v127);
  uint64_t v100 = v98;
  char v101 = v140;
  uint64_t v141 = a14(v100, v140);
  if (!v141)
  {
    swift_bridgeObjectRelease(v101);
    v132._countAndFlagsBits = 0;
    v132._object = (void *)0xE000000000000000;
    _StringGuts.grow(_:)(52);
    v108._countAndFlagsBits = 0xD000000000000019;
    String.append(_:)(v108);
    v108._countAndFlagsBits = v144._countAndFlagsBits;
    v108._object = v139;
    String.append(_:)(v108);
    v108._countAndFlagsBits = 0xD000000000000019;
    String.append(_:)(v108);
    Swift::String v144 = v132;
    v108._object = (void *)lazy protocol witness table accessor for type MLCreateError and conformance MLCreateError();
    swift_allocError(&type metadata for MLCreateError, v108._object, 0, 0);
    *(Swift::String *)uint64_t v109 = v144;
    *(_OWORD *)(v109 + 16) = 0;
    *(_OWORD *)(v109 + 32) = 0;
    *(unsigned char *)(v109 + 48) = 2;
    swift_willThrow(&type metadata for MLCreateError, v108._object, v109, v110, v111, v112);
    swift_release();
    goto LABEL_11;
  }
  uint64_t v102 = v135;
  v145 = v99;
  BatchNorm.runningMean.getter();
  swift_beginAccess(v136, &v132, 33, 0);
  uint64_t v103 = (uint64_t)v134;
  Layer.updateValue<A>(_:for:)(v102, v141, v131, &protocol witness table for LayerState);
  ((void (*)(uint64_t *, uint64_t))v138)(v102, v137);
  outlined destroy of Either<LogisticRegressionClassifier<Float, String>, FullyConnectedNetworkClassifier<Float, String>>(v103, &demangling cache variable for type metadata for Tensor?);
  swift_endAccess(&v132);
  unint64_t v104 = v122;
  BatchNorm.$runningVariance.getter();
  unsigned int v105 = LayerState.id.getter();
  ((void (*)(uint64_t *, uint64_t))v145)(v104, v127);
  LOBYTE(v104) = v140;
  uint64_t v106 = a14(v105, v140);
  swift_bridgeObjectRelease((_BYTE)v104);
  if (!v106)
  {
    v132._countAndFlagsBits = 0;
    v132._object = (void *)0xE000000000000000;
    _StringGuts.grow(_:)(56);
    v113._countAndFlagsBits = 0xD000000000000019;
    String.append(_:)(v113);
    v113._countAndFlagsBits = v144._countAndFlagsBits;
    v113._object = v139;
    String.append(_:)(v113);
    v113._countAndFlagsBits = 0xD00000000000001DLL;
    String.append(_:)(v113);
    Swift::String v144 = v132;
    v113._object = (void *)lazy protocol witness table accessor for type MLCreateError and conformance MLCreateError();
    swift_allocError(&type metadata for MLCreateError, v113._object, 0, 0);
    *(Swift::String *)uint64_t v114 = v144;
    *(_OWORD *)(v114 + 16) = 0;
    *(_OWORD *)(v114 + 32) = 0;
    *(unsigned char *)(v114 + 48) = 2;
    swift_willThrow(&type metadata for MLCreateError, v113._object, v114, v115, v116, v117);
    swift_release();
    swift_release();
    goto LABEL_11;
  }
  BatchNorm.runningVariance.getter();
  swift_beginAccess(v136, &v132, 33, 0);
  uint64_t v107 = (uint64_t)v134;
  Layer.updateValue<A>(_:for:)(v102, v106, v131, &protocol witness table for LayerState);
  ((void (*)(uint64_t *, uint64_t))v138)(v102, v137);
  outlined destroy of Either<LogisticRegressionClassifier<Float, String>, FullyConnectedNetworkClassifier<Float, String>>(v107, &demangling cache variable for type metadata for Tensor?);
  swift_endAccess(&v132);
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  return (*(uint64_t (**)(uint64_t *, uint64_t))(v143 + 8))(v149, v142);
}

uint64_t specialized _ModelCheckpoint<>.restoreLayer<A>(_:optimizer:layerName:checkpointDictionary:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void *a5, double a6, double a7)
{
  uint64_t v111 = v7;
  uint64_t v100 = a5;
  *(void *)&long long v105 = a4;
  v106._countAndFlagsBits = a3;
  uint64_t v98 = a2;
  uint64_t v95 = a1;
  int64_t v9 = *(void *)(*(void *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Parameter?)
                             - 8)
                 + 64);
  uint64_t v10 = alloca(v9);
  uint64_t v11 = alloca(v9);
  uint64_t v89 = &v87;
  int64_t v12 = *(void *)(*(void *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TensorShape?)
                              - 8)
                  + 64);
  uint64_t v13 = alloca(v12);
  uint64_t v14 = alloca(v12);
  v90 = &v87;
  uint64_t v15 = alloca(v12);
  uint64_t v16 = alloca(v12);
  uint64_t v87 = (uint64_t)&v87;
  v106._object = (void *)type metadata accessor for Tensor(0);
  uint64_t v97 = *((void *)v106._object - 1);
  int64_t v17 = *(void *)(v97 + 64);
  uint64_t v18 = alloca(v17);
  uint64_t v19 = alloca(v17);
  uint64_t v107 = &v87;
  uint64_t v20 = alloca(v17);
  uint64_t v21 = alloca(v17);
  uint64_t v102 = &v87;
  int64_t v22 = alloca(v17);
  uint64_t v23 = alloca(v17);
  uint64_t v103 = &v87;
  int64_t v24 = *(void *)(*(void *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Tensor?)
                              - 8)
                  + 64);
  long long v25 = alloca(v24);
  uint64_t v26 = alloca(v24);
  uint64_t v88 = &v87;
  int64_t v27 = alloca(v24);
  uint64_t v28 = alloca(v24);
  uint64_t v99 = &v87;
  uint64_t v96 = type metadata accessor for Parameter(0);
  uint64_t v112 = *(void *)(v96 - 8);
  int64_t v29 = *(void *)(v112 + 64);
  uint64_t v30 = alloca(v29);
  uint64_t v31 = alloca(v29);
  Swift::String v108 = &v87;
  uint64_t v32 = type metadata accessor for Conv2D(0);
  uint64_t v33 = *(void *)(v32 - 8);
  int64_t v34 = *(void *)(v33 + 64);
  uint64_t v35 = alloca(v34);
  uint64_t v36 = alloca(v34);
  uint64_t v101 = v8;
  int64_t v37 = specialized _ModelCheckpoint<>.parameterKeyPathLookup.getter();
  uint64_t v38 = v111;
  static Conv2D.loadLayer(from:layerName:)((uint64_t)v100, v106._countAndFlagsBits, v105, a6, a7);
  uint64_t v111 = v38;
  if (v38) {
    return swift_bridgeObjectRelease((_BYTE)v37);
  }
  Swift::String v113 = &v87;
  uint64_t v110 = v32;
  uint64_t v109 = v33;
  uint64_t v40 = v108;
  uint64_t v41 = (uint64_t)v37;
  Conv2D.$weight.getter();
  unsigned int v42 = Parameter.id.getter();
  int64_t v43 = *(void (**)(uint64_t *, uint64_t))(v112 + 8);
  v43(v40, v96);
  uint64_t v44 = specialized Dictionary.subscript.getter(v42, v41);
  if (v44)
  {
    uint64_t v91 = (void (*)(uint64_t, uint64_t))v43;
    uint64_t v104 = v41;
    uint64_t v45 = v103;
    uint64_t v46 = v44;
    Conv2D.weight.getter();
    uint64_t v47 = OBJC_IVAR____TtCVV8CreateML20MLActivityClassifier7Trainer14ModelContainer_model + v101;
    swift_beginAccess(OBJC_IVAR____TtCVV8CreateML20MLActivityClassifier7Trainer14ModelContainer_model + v101, &v94, 33, 0);
    uint64_t v48 = lazy protocol witness table accessor for type VNImageOption and conformance VNImageOption(&lazy protocol witness table cache variable for type MLActivityClassifier.Model and conformance MLActivityClassifier.Model, type metadata accessor for MLActivityClassifier.Model, (uint64_t)&protocol conformance descriptor for MLActivityClassifier.Model);
    uint64_t v49 = (uint64_t)v99;
    uint64_t v92 = v48;
    uint64_t v101 = v47;
    Layer.updateValue<A>(_:for:)(v45, v46, v48, &protocol witness table for Parameter);
    Swift::String v108 = *(uint64_t **)(v97 + 8);
    uint64_t v50 = v45;
    uint64_t v112 = v46;
    object = v106._object;
    ((void (*)(uint64_t *, void *))v108)(v50, v106._object);
    outlined destroy of Either<LogisticRegressionClassifier<Float, String>, FullyConnectedNetworkClassifier<Float, String>>(v49, &demangling cache variable for type metadata for Tensor?);
    swift_endAccess(&v94);
    uint64_t v52 = (uint64_t)v102;
    Conv2D.weight.getter();
    uint64_t v53 = v87;
    Tensor.shape.getter();
    ((void (*)(uint64_t, void *))v108)(v52, object);
    uint64_t v102 = (uint64_t *)type metadata accessor for TensorShape(0);
    __swift_storeEnumTagSinglePayload(v53, 0, 1, (uint64_t)v102);
    uint64_t v103 = (uint64_t *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<CVarArg>);
    char v54 = (void *)swift_allocObject(v103, 72, 7);
    v54[2] = 1;
    v54[3] = 2;
    v54[7] = &type metadata for String;
    uint64_t v55 = lazy protocol witness table accessor for type String and conformance String();
    v54[8] = v55;
    v54[4] = v106._countAndFlagsBits;
    LOBYTE(v50) = v105;
    v54[5] = v105;
    swift_bridgeObjectRetain((_BYTE)v50);
    uint64_t v56 = String.init(format:_:)(0x68676965772E4025, 0xE900000000000074, v54);
    char v58 = (char)v57;
    uint64_t v59 = v111;
    specialized Adam.updateOptimizerState(for:shape:using:name:)(v112, v53, v100, v56, v57);
    if (v59)
    {
      uint64_t v60 = v109;
      swift_bridgeObjectRelease(v104);
      swift_release();
      swift_bridgeObjectRelease(v58);
      outlined destroy of Either<LogisticRegressionClassifier<Float, String>, FullyConnectedNetworkClassifier<Float, String>>(v53, &demangling cache variable for type metadata for TensorShape?);
      return (*(uint64_t (**)(uint64_t *, uint64_t))(v60 + 8))(v113, v110);
    }
    uint64_t v93 = v55;
    uint64_t v66 = v101;
    uint64_t v111 = 0;
    outlined destroy of Either<LogisticRegressionClassifier<Float, String>, FullyConnectedNetworkClassifier<Float, String>>(v53, &demangling cache variable for type metadata for TensorShape?);
    swift_bridgeObjectRelease(v58);
    uint64_t v67 = (uint64_t)v88;
    uint64_t v68 = v113;
    Conv2D.bias.getter();
    Swift::String v69 = v106._object;
    if (__swift_getEnumTagSinglePayload(v67, 1, (uint64_t)v106._object) == 1)
    {
      (*(void (**)(uint64_t *, uint64_t))(v109 + 8))(v68, v110);
      swift_bridgeObjectRelease(v104);
      swift_release();
      return outlined destroy of Either<LogisticRegressionClassifier<Float, String>, FullyConnectedNetworkClassifier<Float, String>>(v67, &demangling cache variable for type metadata for Tensor?);
    }
    (*(void (**)(uint64_t *, uint64_t, void *))(v97 + 32))(v107, v67, v69);
    uint64_t v70 = (uint64_t)v89;
    Conv2D.$bias.getter();
    uint64_t v71 = v96;
    if (__swift_getEnumTagSinglePayload(v70, 1, v96) == 1)
    {
      swift_bridgeObjectRelease(v104);
      outlined destroy of Either<LogisticRegressionClassifier<Float, String>, FullyConnectedNetworkClassifier<Float, String>>(v70, &demangling cache variable for type metadata for Parameter?);
      uint64_t v72 = (void *)v105;
    }
    else
    {
      unsigned int v73 = Parameter.id.getter();
      v91(v70, v71);
      char v74 = v104;
      uint64_t v75 = specialized Dictionary.subscript.getter(v73, v104);
      swift_bridgeObjectRelease(v74);
      uint64_t v72 = (void *)v105;
      if (v75)
      {
        swift_beginAccess(v66, &v94, 33, 0);
        uint64_t v76 = (uint64_t)v99;
        Layer.updateValue<A>(_:for:)(v107, v75, v92, &protocol witness table for Parameter);
        outlined destroy of Either<LogisticRegressionClassifier<Float, String>, FullyConnectedNetworkClassifier<Float, String>>(v76, &demangling cache variable for type metadata for Tensor?);
        swift_endAccess(&v94);
        uint64_t v77 = (uint64_t)v90;
        Tensor.shape.getter();
        __swift_storeEnumTagSinglePayload(v77, 0, 1, (uint64_t)v102);
        uint64_t v78 = (void *)swift_allocObject(v103, 72, 7);
        v78[2] = 1;
        v78[3] = 2;
        v78[7] = &type metadata for String;
        v78[8] = v93;
        v78[4] = v106._countAndFlagsBits;
        char v79 = v105;
        v78[5] = v105;
        swift_bridgeObjectRetain(v79);
        uint64_t v80 = String.init(format:_:)(0x736169622E4025, 0xE700000000000000, v78);
        LOBYTE(v78) = (_BYTE)v81;
        specialized Adam.updateOptimizerState(for:shape:using:name:)(v75, v77, v100, v80, v81);
        swift_release();
        swift_bridgeObjectRelease((_BYTE)v78);
        swift_release();
        outlined destroy of Either<LogisticRegressionClassifier<Float, String>, FullyConnectedNetworkClassifier<Float, String>>(v77, &demangling cache variable for type metadata for TensorShape?);
LABEL_14:
        ((void (*)(uint64_t *, void *))v108)(v107, v106._object);
        return (*(uint64_t (**)(uint64_t *, uint64_t))(v109 + 8))(v113, v110);
      }
    }
    *(void *)&long long v94 = 0;
    *((void *)&v94 + 1) = 0xE000000000000000;
    _StringGuts.grow(_:)(45);
    swift_bridgeObjectRelease(BYTE8(v94));
    *(void *)&long long v94 = 0xD000000000000019;
    v82._countAndFlagsBits = v106._countAndFlagsBits;
    v82._object = v72;
    String.append(_:)(v82);
    v82._countAndFlagsBits = 0xD000000000000012;
    String.append(_:)(v82);
    long long v105 = v94;
    v82._object = (void *)lazy protocol witness table accessor for type MLCreateError and conformance MLCreateError();
    swift_allocError(&type metadata for MLCreateError, v82._object, 0, 0);
    *(_OWORD *)uint64_t v83 = v105;
    *(_OWORD *)(v83 + 16) = 0;
    *(_OWORD *)(v83 + 32) = 0;
    *(unsigned char *)(v83 + 48) = 2;
    swift_willThrow(&type metadata for MLCreateError, v82._object, v83, v84, v85, v86);
    swift_release();
    goto LABEL_14;
  }
  swift_bridgeObjectRelease(v41);
  *(void *)&long long v94 = 0;
  *((void *)&v94 + 1) = 0xE000000000000000;
  _StringGuts.grow(_:)(47);
  swift_bridgeObjectRelease(BYTE8(v94));
  *(void *)&long long v94 = 0xD000000000000019;
  v61._countAndFlagsBits = v106._countAndFlagsBits;
  v61._object = (void *)v105;
  String.append(_:)(v61);
  v61._countAndFlagsBits = 0xD000000000000014;
  String.append(_:)(v61);
  long long v105 = v94;
  v61._object = (void *)lazy protocol witness table accessor for type MLCreateError and conformance MLCreateError();
  swift_allocError(&type metadata for MLCreateError, v61._object, 0, 0);
  *(_OWORD *)uint64_t v62 = v105;
  *(_OWORD *)(v62 + 16) = 0;
  *(_OWORD *)(v62 + 32) = 0;
  *(unsigned char *)(v62 + 48) = 2;
  swift_willThrow(&type metadata for MLCreateError, v61._object, v62, v63, v64, v65);
  return (*(uint64_t (**)(uint64_t *, uint64_t))(v109 + 8))(v113, v110);
}

{
  uint64_t v7;
  uint64_t v8;
  int64_t v9;
  void *v10;
  void *v11;
  int64_t v12;
  void *v13;
  void *v14;
  void *v15;
  void *v16;
  int64_t v17;
  void *v18;
  void *v19;
  void *v20;
  void *v21;
  void *v22;
  void *v23;
  int64_t v24;
  void *v25;
  void *v26;
  void *v27;
  void *v28;
  int64_t v29;
  void *v30;
  void *v31;
  uint64_t v32;
  uint64_t v33;
  int64_t v34;
  void *v35;
  void *v36;
  void *v37;
  uint64_t v38;
  uint64_t *v40;
  uint64_t v41;
  unsigned int v42;
  void (*v43)(uint64_t *, uint64_t);
  uint64_t v44;
  uint64_t *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t *v50;
  void *object;
  uint64_t v52;
  uint64_t v53;
  void *v54;
  uint64_t v55;
  uint64_t v56;
  void *v57;
  char v58;
  uint64_t v59;
  uint64_t v60;
  Swift::String v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t *v68;
  void *v69;
  uint64_t v70;
  uint64_t v71;
  void *v72;
  unsigned int v73;
  char v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  void *v78;
  char v79;
  uint64_t v80;
  void *v81;
  Swift::String v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t *v88;
  uint64_t *v89;
  uint64_t *v90;
  void (*v91)(uint64_t, uint64_t);
  uint64_t v92;
  uint64_t v93;
  long long v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t *v99;
  void *v100;
  uint64_t v101;
  uint64_t *v102;
  uint64_t *v103;
  uint64_t v104;
  long long v105;
  Swift::String v106;
  uint64_t *v107;
  uint64_t *v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t *v113;

  uint64_t v111 = v7;
  uint64_t v100 = a5;
  *(void *)&long long v105 = a4;
  v106._countAndFlagsBits = a3;
  uint64_t v98 = a2;
  uint64_t v95 = a1;
  int64_t v9 = *(void *)(*(void *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Parameter?)
                             - 8)
                 + 64);
  uint64_t v10 = alloca(v9);
  uint64_t v11 = alloca(v9);
  uint64_t v89 = &v87;
  int64_t v12 = *(void *)(*(void *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TensorShape?)
                              - 8)
                  + 64);
  uint64_t v13 = alloca(v12);
  uint64_t v14 = alloca(v12);
  v90 = &v87;
  uint64_t v15 = alloca(v12);
  uint64_t v16 = alloca(v12);
  uint64_t v87 = (uint64_t)&v87;
  v106._object = (void *)type metadata accessor for Tensor(0);
  uint64_t v97 = *((void *)v106._object - 1);
  int64_t v17 = *(void *)(v97 + 64);
  uint64_t v18 = alloca(v17);
  uint64_t v19 = alloca(v17);
  uint64_t v107 = &v87;
  uint64_t v20 = alloca(v17);
  uint64_t v21 = alloca(v17);
  uint64_t v102 = &v87;
  int64_t v22 = alloca(v17);
  uint64_t v23 = alloca(v17);
  uint64_t v103 = &v87;
  int64_t v24 = *(void *)(*(void *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Tensor?)
                              - 8)
                  + 64);
  long long v25 = alloca(v24);
  uint64_t v26 = alloca(v24);
  uint64_t v88 = &v87;
  int64_t v27 = alloca(v24);
  uint64_t v28 = alloca(v24);
  uint64_t v99 = &v87;
  uint64_t v96 = type metadata accessor for Parameter(0);
  uint64_t v112 = *(void *)(v96 - 8);
  int64_t v29 = *(void *)(v112 + 64);
  uint64_t v30 = alloca(v29);
  uint64_t v31 = alloca(v29);
  Swift::String v108 = &v87;
  uint64_t v32 = type metadata accessor for Dense(0);
  uint64_t v33 = *(void *)(v32 - 8);
  int64_t v34 = *(void *)(v33 + 64);
  uint64_t v35 = alloca(v34);
  uint64_t v36 = alloca(v34);
  uint64_t v101 = v8;
  int64_t v37 = specialized _ModelCheckpoint<>.parameterKeyPathLookup.getter();
  uint64_t v38 = v111;
  static Dense.loadLayer(from:layerName:)((uint64_t)v100, v106._countAndFlagsBits, v105, a6, a7);
  uint64_t v111 = v38;
  if (v38) {
    return swift_bridgeObjectRelease((_BYTE)v37);
  }
  Swift::String v113 = &v87;
  uint64_t v110 = v32;
  uint64_t v109 = v33;
  uint64_t v40 = v108;
  uint64_t v41 = (uint64_t)v37;
  Dense.$weight.getter();
  unsigned int v42 = Parameter.id.getter();
  int64_t v43 = *(void (**)(uint64_t *, uint64_t))(v112 + 8);
  v43(v40, v96);
  uint64_t v44 = specialized Dictionary.subscript.getter(v42, v41);
  if (v44)
  {
    uint64_t v91 = (void (*)(uint64_t, uint64_t))v43;
    uint64_t v104 = v41;
    uint64_t v45 = v103;
    uint64_t v46 = v44;
    Dense.weight.getter();
    uint64_t v47 = OBJC_IVAR____TtCVV8CreateML20MLActivityClassifier7Trainer14ModelContainer_model + v101;
    swift_beginAccess(OBJC_IVAR____TtCVV8CreateML20MLActivityClassifier7Trainer14ModelContainer_model + v101, &v94, 33, 0);
    uint64_t v48 = lazy protocol witness table accessor for type VNImageOption and conformance VNImageOption(&lazy protocol witness table cache variable for type MLActivityClassifier.Model and conformance MLActivityClassifier.Model, type metadata accessor for MLActivityClassifier.Model, (uint64_t)&protocol conformance descriptor for MLActivityClassifier.Model);
    uint64_t v49 = (uint64_t)v99;
    uint64_t v92 = v48;
    uint64_t v101 = v47;
    Layer.updateValue<A>(_:for:)(v45, v46, v48, &protocol witness table for Parameter);
    Swift::String v108 = *(uint64_t **)(v97 + 8);
    uint64_t v50 = v45;
    uint64_t v112 = v46;
    object = v106._object;
    ((void (*)(uint64_t *, void *))v108)(v50, v106._object);
    outlined destroy of Either<LogisticRegressionClassifier<Float, String>, FullyConnectedNetworkClassifier<Float, String>>(v49, &demangling cache variable for type metadata for Tensor?);
    swift_endAccess(&v94);
    uint64_t v52 = (uint64_t)v102;
    Dense.weight.getter();
    uint64_t v53 = v87;
    Tensor.shape.getter();
    ((void (*)(uint64_t, void *))v108)(v52, object);
    uint64_t v102 = (uint64_t *)type metadata accessor for TensorShape(0);
    __swift_storeEnumTagSinglePayload(v53, 0, 1, (uint64_t)v102);
    uint64_t v103 = (uint64_t *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<CVarArg>);
    char v54 = (void *)swift_allocObject(v103, 72, 7);
    v54[2] = 1;
    v54[3] = 2;
    v54[7] = &type metadata for String;
    uint64_t v55 = lazy protocol witness table accessor for type String and conformance String();
    v54[8] = v55;
    v54[4] = v106._countAndFlagsBits;
    LOBYTE(v50) = v105;
    v54[5] = v105;
    swift_bridgeObjectRetain((_BYTE)v50);
    uint64_t v56 = String.init(format:_:)(0x68676965772E4025, 0xE900000000000074, v54);
    char v58 = (char)v57;
    uint64_t v59 = v111;
    specialized Adam.updateOptimizerState(for:shape:using:name:)(v112, v53, v100, v56, v57);
    if (v59)
    {
      uint64_t v60 = v109;
      swift_bridgeObjectRelease(v104);
      swift_release();
      swift_bridgeObjectRelease(v58);
      outlined destroy of Either<LogisticRegressionClassifier<Float, String>, FullyConnectedNetworkClassifier<Float, String>>(v53, &demangling cache variable for type metadata for TensorShape?);
      return (*(uint64_t (**)(uint64_t *, uint64_t))(v60 + 8))(v113, v110);
    }
    uint64_t v93 = v55;
    uint64_t v66 = v101;
    uint64_t v111 = 0;
    outlined destroy of Either<LogisticRegressionClassifier<Float, String>, FullyConnectedNetworkClassifier<Float, String>>(v53, &demangling cache variable for type metadata for TensorShape?);
    swift_bridgeObjectRelease(v58);
    uint64_t v67 = (uint64_t)v88;
    uint64_t v68 = v113;
    Dense.bias.getter();
    Swift::String v69 = v106._object;
    if (__swift_getEnumTagSinglePayload(v67, 1, (uint64_t)v106._object) == 1)
    {
      (*(void (**)(uint64_t *, uint64_t))(v109 + 8))(v68, v110);
      swift_bridgeObjectRelease(v104);
      swift_release();
      return outlined destroy of Either<LogisticRegressionClassifier<Float, String>, FullyConnectedNetworkClassifier<Float, String>>(v67, &demangling cache variable for type metadata for Tensor?);
    }
    (*(void (**)(uint64_t *, uint64_t, void *))(v97 + 32))(v107, v67, v69);
    uint64_t v70 = (uint64_t)v89;
    Dense.$bias.getter();
    uint64_t v71 = v96;
    if (__swift_getEnumTagSinglePayload(v70, 1, v96) == 1)
    {
      swift_bridgeObjectRelease(v104);
      outlined destroy of Either<LogisticRegressionClassifier<Float, String>, FullyConnectedNetworkClassifier<Float, String>>(v70, &demangling cache variable for type metadata for Parameter?);
      uint64_t v72 = (void *)v105;
    }
    else
    {
      unsigned int v73 = Parameter.id.getter();
      v91(v70, v71);
      char v74 = v104;
      uint64_t v75 = specialized Dictionary.subscript.getter(v73, v104);
      swift_bridgeObjectRelease(v74);
      uint64_t v72 = (void *)v105;
      if (v75)
      {
        swift_beginAccess(v66, &v94, 33, 0);
        uint64_t v76 = (uint64_t)v99;
        Layer.updateValue<A>(_:for:)(v107, v75, v92, &protocol witness table for Parameter);
        outlined destroy of Either<LogisticRegressionClassifier<Float, String>, FullyConnectedNetworkClassifier<Float, String>>(v76, &demangling cache variable for type metadata for Tensor?);
        swift_endAccess(&v94);
        uint64_t v77 = (uint64_t)v90;
        Tensor.shape.getter();
        __swift_storeEnumTagSinglePayload(v77, 0, 1, (uint64_t)v102);
        uint64_t v78 = (void *)swift_allocObject(v103, 72, 7);
        v78[2] = 1;
        v78[3] = 2;
        v78[7] = &type metadata for String;
        v78[8] = v93;
        v78[4] = v106._countAndFlagsBits;
        char v79 = v105;
        v78[5] = v105;
        swift_bridgeObjectRetain(v79);
        uint64_t v80 = String.init(format:_:)(0x736169622E4025, 0xE700000000000000, v78);
        LOBYTE(v78) = (_BYTE)v81;
        specialized Adam.updateOptimizerState(for:shape:using:name:)(v75, v77, v100, v80, v81);
        swift_release();
        swift_bridgeObjectRelease((_BYTE)v78);
        swift_release();
        outlined destroy of Either<LogisticRegressionClassifier<Float, String>, FullyConnectedNetworkClassifier<Float, String>>(v77, &demangling cache variable for type metadata for TensorShape?);
LABEL_14:
        ((void (*)(uint64_t *, void *))v108)(v107, v106._object);
        return (*(uint64_t (**)(uint64_t *, uint64_t))(v109 + 8))(v113, v110);
      }
    }
    *(void *)&long long v94 = 0;
    *((void *)&v94 + 1) = 0xE000000000000000;
    _StringGuts.grow(_:)(45);
    swift_bridgeObjectRelease(BYTE8(v94));
    *(void *)&long long v94 = 0xD000000000000019;
    v82._countAndFlagsBits = v106._countAndFlagsBits;
    v82._object = v72;
    String.append(_:)(v82);
    v82._countAndFlagsBits = 0xD000000000000012;
    String.append(_:)(v82);
    long long v105 = v94;
    v82._object = (void *)lazy protocol witness table accessor for type MLCreateError and conformance MLCreateError();
    swift_allocError(&type metadata for MLCreateError, v82._object, 0, 0);
    *(_OWORD *)uint64_t v83 = v105;
    *(_OWORD *)(v83 + 16) = 0;
    *(_OWORD *)(v83 + 32) = 0;
    *(unsigned char *)(v83 + 48) = 2;
    swift_willThrow(&type metadata for MLCreateError, v82._object, v83, v84, v85, v86);
    swift_release();
    goto LABEL_14;
  }
  swift_bridgeObjectRelease(v41);
  *(void *)&long long v94 = 0;
  *((void *)&v94 + 1) = 0xE000000000000000;
  _StringGuts.grow(_:)(47);
  swift_bridgeObjectRelease(BYTE8(v94));
  *(void *)&long long v94 = 0xD000000000000019;
  v61._countAndFlagsBits = v106._countAndFlagsBits;
  v61._object = (void *)v105;
  String.append(_:)(v61);
  v61._countAndFlagsBits = 0xD000000000000014;
  String.append(_:)(v61);
  long long v105 = v94;
  v61._object = (void *)lazy protocol witness table accessor for type MLCreateError and conformance MLCreateError();
  swift_allocError(&type metadata for MLCreateError, v61._object, 0, 0);
  *(_OWORD *)uint64_t v62 = v105;
  *(_OWORD *)(v62 + 16) = 0;
  *(_OWORD *)(v62 + 32) = 0;
  *(unsigned char *)(v62 + 48) = 2;
  swift_willThrow(&type metadata for MLCreateError, v61._object, v62, v63, v64, v65);
  return (*(uint64_t (**)(uint64_t *, uint64_t))(v109 + 8))(v113, v110);
}

uint64_t specialized _ModelCheckpoint<>.restoreLayer<A>(_:optimizer:layerName:checkpointDictionary:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, double a6, double a7)
{
  uint64_t v112 = v7;
  uint64_t v101 = a5;
  *(void *)&long long v106 = a4;
  v107._countAndFlagsBits = a3;
  uint64_t v99 = a2;
  uint64_t v96 = a1;
  int64_t v9 = *(void *)(*(void *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Parameter?)
                             - 8)
                 + 64);
  uint64_t v10 = alloca(v9);
  uint64_t v11 = alloca(v9);
  v90 = &v88;
  int64_t v12 = *(void *)(*(void *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TensorShape?)
                              - 8)
                  + 64);
  uint64_t v13 = alloca(v12);
  uint64_t v14 = alloca(v12);
  uint64_t v91 = &v88;
  uint64_t v15 = alloca(v12);
  uint64_t v16 = alloca(v12);
  uint64_t v88 = (uint64_t)&v88;
  v107._object = (void *)type metadata accessor for Tensor(0);
  uint64_t v98 = *((void *)v107._object - 1);
  int64_t v17 = *(void *)(v98 + 64);
  uint64_t v18 = alloca(v17);
  uint64_t v19 = alloca(v17);
  Swift::String v108 = &v88;
  uint64_t v20 = alloca(v17);
  uint64_t v21 = alloca(v17);
  uint64_t v103 = &v88;
  int64_t v22 = alloca(v17);
  uint64_t v23 = alloca(v17);
  uint64_t v104 = &v88;
  int64_t v24 = *(void *)(*(void *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Tensor?)
                              - 8)
                  + 64);
  long long v25 = alloca(v24);
  uint64_t v26 = alloca(v24);
  uint64_t v89 = &v88;
  int64_t v27 = alloca(v24);
  uint64_t v28 = alloca(v24);
  uint64_t v100 = &v88;
  uint64_t v97 = type metadata accessor for Parameter(0);
  uint64_t v113 = *(void *)(v97 - 8);
  int64_t v29 = *(void *)(v113 + 64);
  uint64_t v30 = alloca(v29);
  uint64_t v31 = alloca(v29);
  uint64_t v109 = &v88;
  uint64_t v32 = type metadata accessor for Conv2D(0);
  uint64_t v33 = *(void *)(v32 - 8);
  int64_t v34 = *(void *)(v33 + 64);
  uint64_t v35 = alloca(v34);
  uint64_t v36 = alloca(v34);
  uint64_t v102 = v8;
  int64_t v37 = specialized _ModelCheckpoint<>.parameterKeyPathLookup.getter();
  uint64_t v38 = v101;
  uint64_t v39 = v112;
  static Conv2D.loadLayer(from:layerName:)(v101, v107._countAndFlagsBits, v106, a6, a7);
  uint64_t v112 = v39;
  if (v39) {
    return swift_bridgeObjectRelease((_BYTE)v37);
  }
  uint64_t v114 = &v88;
  uint64_t v111 = v32;
  uint64_t v110 = v33;
  uint64_t v41 = v109;
  uint64_t v42 = (uint64_t)v37;
  Conv2D.$weight.getter();
  unsigned int v43 = Parameter.id.getter(v38);
  uint64_t v44 = *(void (**)(uint64_t *, uint64_t))(v113 + 8);
  v44(v41, v97);
  uint64_t v45 = specialized Dictionary.subscript.getter(v43, v42);
  if (v45)
  {
    uint64_t v92 = (void (*)(uint64_t, uint64_t))v44;
    uint64_t v105 = v42;
    uint64_t v46 = v104;
    uint64_t v47 = v45;
    Conv2D.weight.getter();
    uint64_t v48 = OBJC_IVAR____TtCV8CreateML22MLHandActionClassifier8GraphCNN_model + v102;
    swift_beginAccess(OBJC_IVAR____TtCV8CreateML22MLHandActionClassifier8GraphCNN_model + v102, &v95, 33, 0);
    uint64_t v49 = lazy protocol witness table accessor for type VNImageOption and conformance VNImageOption(&lazy protocol witness table cache variable for type MLHandActionClassifier.GraphCNNModel and conformance MLHandActionClassifier.GraphCNNModel, type metadata accessor for MLHandActionClassifier.GraphCNNModel, (uint64_t)&protocol conformance descriptor for MLHandActionClassifier.GraphCNNModel);
    uint64_t v50 = (uint64_t)v100;
    uint64_t v93 = v49;
    uint64_t v102 = v48;
    Layer.updateValue<A>(_:for:)(v46, v47, v49, &protocol witness table for Parameter);
    uint64_t v109 = *(uint64_t **)(v98 + 8);
    unsigned int v51 = v46;
    uint64_t v113 = v47;
    object = v107._object;
    ((void (*)(uint64_t *, void *))v109)(v51, v107._object);
    outlined destroy of Either<LogisticRegressionClassifier<Float, String>, FullyConnectedNetworkClassifier<Float, String>>(v50, &demangling cache variable for type metadata for Tensor?);
    swift_endAccess(&v95);
    uint64_t v53 = (uint64_t)v103;
    Conv2D.weight.getter();
    uint64_t v54 = v88;
    Tensor.shape.getter();
    ((void (*)(uint64_t, void *))v109)(v53, object);
    uint64_t v103 = (uint64_t *)type metadata accessor for TensorShape(0);
    __swift_storeEnumTagSinglePayload(v54, 0, 1, (uint64_t)v103);
    uint64_t v104 = (uint64_t *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<CVarArg>);
    uint64_t v55 = (void *)swift_allocObject(v104, 72, 7);
    v55[2] = 1;
    v55[3] = 2;
    v55[7] = &type metadata for String;
    uint64_t v56 = lazy protocol witness table accessor for type String and conformance String();
    v55[8] = v56;
    v55[4] = v107._countAndFlagsBits;
    LOBYTE(v51) = v106;
    v55[5] = v106;
    swift_bridgeObjectRetain((_BYTE)v51);
    uint64_t v57 = (void *)String.init(format:_:)(0x68676965772E4025, 0xE900000000000074, v55);
    char v59 = v58;
    uint64_t v60 = v112;
    specialized SGD.updateOptimizerState(for:shape:using:name:)(v113, v54, v101, v57, v58, a6, a7);
    if (v60)
    {
      uint64_t v61 = v110;
      swift_bridgeObjectRelease(v105);
      swift_release();
      swift_bridgeObjectRelease(v59);
      outlined destroy of Either<LogisticRegressionClassifier<Float, String>, FullyConnectedNetworkClassifier<Float, String>>(v54, &demangling cache variable for type metadata for TensorShape?);
      return (*(uint64_t (**)(uint64_t *, uint64_t))(v61 + 8))(v114, v111);
    }
    uint64_t v94 = v56;
    uint64_t v67 = v102;
    uint64_t v112 = 0;
    outlined destroy of Either<LogisticRegressionClassifier<Float, String>, FullyConnectedNetworkClassifier<Float, String>>(v54, &demangling cache variable for type metadata for TensorShape?);
    swift_bridgeObjectRelease(v59);
    uint64_t v68 = (uint64_t)v89;
    Swift::String v69 = v114;
    Conv2D.bias.getter();
    uint64_t v70 = v107._object;
    if (__swift_getEnumTagSinglePayload(v68, 1, (uint64_t)v107._object) == 1)
    {
      (*(void (**)(uint64_t *, uint64_t))(v110 + 8))(v69, v111);
      swift_bridgeObjectRelease(v105);
      swift_release();
      return outlined destroy of Either<LogisticRegressionClassifier<Float, String>, FullyConnectedNetworkClassifier<Float, String>>(v68, &demangling cache variable for type metadata for Tensor?);
    }
    (*(void (**)(uint64_t *, uint64_t, void *))(v98 + 32))(v108, v68, v70);
    uint64_t v71 = (uint64_t)v90;
    Conv2D.$bias.getter();
    uint64_t v72 = v97;
    if (__swift_getEnumTagSinglePayload(v71, 1, v97) == 1)
    {
      swift_bridgeObjectRelease(v105);
      outlined destroy of Either<LogisticRegressionClassifier<Float, String>, FullyConnectedNetworkClassifier<Float, String>>(v71, &demangling cache variable for type metadata for Parameter?);
      unsigned int v73 = (void *)v106;
    }
    else
    {
      unsigned int v74 = Parameter.id.getter(v71);
      v92(v71, v72);
      char v75 = v105;
      uint64_t v76 = specialized Dictionary.subscript.getter(v74, v105);
      swift_bridgeObjectRelease(v75);
      unsigned int v73 = (void *)v106;
      if (v76)
      {
        swift_beginAccess(v67, &v95, 33, 0);
        uint64_t v77 = (uint64_t)v100;
        Layer.updateValue<A>(_:for:)(v108, v76, v93, &protocol witness table for Parameter);
        outlined destroy of Either<LogisticRegressionClassifier<Float, String>, FullyConnectedNetworkClassifier<Float, String>>(v77, &demangling cache variable for type metadata for Tensor?);
        swift_endAccess(&v95);
        uint64_t v78 = (uint64_t)v91;
        Tensor.shape.getter();
        __swift_storeEnumTagSinglePayload(v78, 0, 1, (uint64_t)v103);
        char v79 = (void *)swift_allocObject(v104, 72, 7);
        long long v79[2] = 1;
        v79[3] = 2;
        v79[7] = &type metadata for String;
        v79[8] = v94;
        v79[4] = v107._countAndFlagsBits;
        char v80 = v106;
        v79[5] = v106;
        swift_bridgeObjectRetain(v80);
        uint64_t v81 = (void *)String.init(format:_:)(0x736169622E4025, 0xE700000000000000, v79);
        LOBYTE(v79) = v82;
        specialized SGD.updateOptimizerState(for:shape:using:name:)(v76, v78, v101, v81, v82, a6, a7);
        swift_release();
        swift_bridgeObjectRelease((_BYTE)v79);
        swift_release();
        outlined destroy of Either<LogisticRegressionClassifier<Float, String>, FullyConnectedNetworkClassifier<Float, String>>(v78, &demangling cache variable for type metadata for TensorShape?);
LABEL_14:
        ((void (*)(uint64_t *, void *))v109)(v108, v107._object);
        return (*(uint64_t (**)(uint64_t *, uint64_t))(v110 + 8))(v114, v111);
      }
    }
    *(void *)&long long v95 = 0;
    *((void *)&v95 + 1) = 0xE000000000000000;
    _StringGuts.grow(_:)(45);
    swift_bridgeObjectRelease(BYTE8(v95));
    *(void *)&long long v95 = 0xD000000000000019;
    v83._countAndFlagsBits = v107._countAndFlagsBits;
    v83._object = v73;
    String.append(_:)(v83);
    v83._countAndFlagsBits = 0xD000000000000012;
    String.append(_:)(v83);
    long long v106 = v95;
    v83._object = (void *)lazy protocol witness table accessor for type MLCreateError and conformance MLCreateError();
    swift_allocError(&type metadata for MLCreateError, v83._object, 0, 0);
    *(_OWORD *)uint64_t v84 = v106;
    *(_OWORD *)(v84 + 16) = 0;
    *(_OWORD *)(v84 + 32) = 0;
    *(unsigned char *)(v84 + 48) = 2;
    swift_willThrow(&type metadata for MLCreateError, v83._object, v84, v85, v86, v87);
    swift_release();
    goto LABEL_14;
  }
  swift_bridgeObjectRelease(v42);
  *(void *)&long long v95 = 0;
  *((void *)&v95 + 1) = 0xE000000000000000;
  _StringGuts.grow(_:)(47);
  swift_bridgeObjectRelease(BYTE8(v95));
  *(void *)&long long v95 = 0xD000000000000019;
  v62._countAndFlagsBits = v107._countAndFlagsBits;
  v62._object = (void *)v106;
  String.append(_:)(v62);
  v62._countAndFlagsBits = 0xD000000000000014;
  String.append(_:)(v62);
  long long v106 = v95;
  v62._object = (void *)lazy protocol witness table accessor for type MLCreateError and conformance MLCreateError();
  swift_allocError(&type metadata for MLCreateError, v62._object, 0, 0);
  *(_OWORD *)uint64_t v63 = v106;
  *(_OWORD *)(v63 + 16) = 0;
  *(_OWORD *)(v63 + 32) = 0;
  *(unsigned char *)(v63 + 48) = 2;
  swift_willThrow(&type metadata for MLCreateError, v62._object, v63, v64, v65, v66);
  return (*(uint64_t (**)(uint64_t *, uint64_t))(v110 + 8))(v114, v111);
}

{
  uint64_t v7;
  uint64_t v8;
  int64_t v9;
  void *v10;
  void *v11;
  int64_t v12;
  void *v13;
  void *v14;
  void *v15;
  void *v16;
  int64_t v17;
  void *v18;
  void *v19;
  void *v20;
  void *v21;
  void *v22;
  void *v23;
  int64_t v24;
  void *v25;
  void *v26;
  void *v27;
  void *v28;
  int64_t v29;
  void *v30;
  void *v31;
  uint64_t v32;
  uint64_t v33;
  int64_t v34;
  void *v35;
  void *v36;
  void *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t *v41;
  uint64_t v42;
  unsigned int v43;
  void (*v44)(uint64_t *, uint64_t);
  uint64_t v45;
  uint64_t *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t *v51;
  void *object;
  uint64_t v53;
  uint64_t v54;
  void *v55;
  uint64_t v56;
  void *v57;
  uint64_t v58;
  char v59;
  uint64_t v60;
  uint64_t v61;
  Swift::String v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t *v69;
  void *v70;
  uint64_t v71;
  uint64_t v72;
  void *v73;
  unsigned int v74;
  char v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  void *v79;
  char v80;
  void *v81;
  uint64_t v82;
  Swift::String v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t *v89;
  uint64_t *v90;
  uint64_t *v91;
  void (*v92)(uint64_t, uint64_t);
  uint64_t v93;
  uint64_t v94;
  long long v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t *v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t *v103;
  uint64_t *v104;
  uint64_t v105;
  long long v106;
  Swift::String v107;
  uint64_t *v108;
  uint64_t *v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t *v114;

  uint64_t v112 = v7;
  uint64_t v101 = a5;
  *(void *)&long long v106 = a4;
  v107._countAndFlagsBits = a3;
  uint64_t v99 = a2;
  uint64_t v96 = a1;
  int64_t v9 = *(void *)(*(void *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Parameter?)
                             - 8)
                 + 64);
  uint64_t v10 = alloca(v9);
  uint64_t v11 = alloca(v9);
  v90 = &v88;
  int64_t v12 = *(void *)(*(void *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TensorShape?)
                              - 8)
                  + 64);
  uint64_t v13 = alloca(v12);
  uint64_t v14 = alloca(v12);
  uint64_t v91 = &v88;
  uint64_t v15 = alloca(v12);
  uint64_t v16 = alloca(v12);
  uint64_t v88 = (uint64_t)&v88;
  v107._object = (void *)type metadata accessor for Tensor(0);
  uint64_t v98 = *((void *)v107._object - 1);
  int64_t v17 = *(void *)(v98 + 64);
  uint64_t v18 = alloca(v17);
  uint64_t v19 = alloca(v17);
  Swift::String v108 = &v88;
  uint64_t v20 = alloca(v17);
  uint64_t v21 = alloca(v17);
  uint64_t v103 = &v88;
  int64_t v22 = alloca(v17);
  uint64_t v23 = alloca(v17);
  uint64_t v104 = &v88;
  int64_t v24 = *(void *)(*(void *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Tensor?)
                              - 8)
                  + 64);
  long long v25 = alloca(v24);
  uint64_t v26 = alloca(v24);
  uint64_t v89 = &v88;
  int64_t v27 = alloca(v24);
  uint64_t v28 = alloca(v24);
  uint64_t v100 = &v88;
  uint64_t v97 = type metadata accessor for Parameter(0);
  uint64_t v113 = *(void *)(v97 - 8);
  int64_t v29 = *(void *)(v113 + 64);
  uint64_t v30 = alloca(v29);
  uint64_t v31 = alloca(v29);
  uint64_t v109 = &v88;
  uint64_t v32 = type metadata accessor for Dense(0);
  uint64_t v33 = *(void *)(v32 - 8);
  int64_t v34 = *(void *)(v33 + 64);
  uint64_t v35 = alloca(v34);
  uint64_t v36 = alloca(v34);
  uint64_t v102 = v8;
  int64_t v37 = specialized _ModelCheckpoint<>.parameterKeyPathLookup.getter();
  uint64_t v38 = v101;
  uint64_t v39 = v112;
  static Dense.loadLayer(from:layerName:)(v101, v107._countAndFlagsBits, v106, a6, a7);
  uint64_t v112 = v39;
  if (v39) {
    return swift_bridgeObjectRelease((_BYTE)v37);
  }
  uint64_t v114 = &v88;
  uint64_t v111 = v32;
  uint64_t v110 = v33;
  uint64_t v41 = v109;
  uint64_t v42 = (uint64_t)v37;
  Dense.$weight.getter();
  unsigned int v43 = Parameter.id.getter(v38);
  uint64_t v44 = *(void (**)(uint64_t *, uint64_t))(v113 + 8);
  v44(v41, v97);
  uint64_t v45 = specialized Dictionary.subscript.getter(v43, v42);
  if (v45)
  {
    uint64_t v92 = (void (*)(uint64_t, uint64_t))v44;
    uint64_t v105 = v42;
    uint64_t v46 = v104;
    uint64_t v47 = v45;
    Dense.weight.getter();
    uint64_t v48 = OBJC_IVAR____TtCV8CreateML22MLHandActionClassifier8GraphCNN_model + v102;
    swift_beginAccess(OBJC_IVAR____TtCV8CreateML22MLHandActionClassifier8GraphCNN_model + v102, &v95, 33, 0);
    uint64_t v49 = lazy protocol witness table accessor for type VNImageOption and conformance VNImageOption(&lazy protocol witness table cache variable for type MLHandActionClassifier.GraphCNNModel and conformance MLHandActionClassifier.GraphCNNModel, type metadata accessor for MLHandActionClassifier.GraphCNNModel, (uint64_t)&protocol conformance descriptor for MLHandActionClassifier.GraphCNNModel);
    uint64_t v50 = (uint64_t)v100;
    uint64_t v93 = v49;
    uint64_t v102 = v48;
    Layer.updateValue<A>(_:for:)(v46, v47, v49, &protocol witness table for Parameter);
    uint64_t v109 = *(uint64_t **)(v98 + 8);
    unsigned int v51 = v46;
    uint64_t v113 = v47;
    object = v107._object;
    ((void (*)(uint64_t *, void *))v109)(v51, v107._object);
    outlined destroy of Either<LogisticRegressionClassifier<Float, String>, FullyConnectedNetworkClassifier<Float, String>>(v50, &demangling cache variable for type metadata for Tensor?);
    swift_endAccess(&v95);
    uint64_t v53 = (uint64_t)v103;
    Dense.weight.getter();
    uint64_t v54 = v88;
    Tensor.shape.getter();
    ((void (*)(uint64_t, void *))v109)(v53, object);
    uint64_t v103 = (uint64_t *)type metadata accessor for TensorShape(0);
    __swift_storeEnumTagSinglePayload(v54, 0, 1, (uint64_t)v103);
    uint64_t v104 = (uint64_t *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<CVarArg>);
    uint64_t v55 = (void *)swift_allocObject(v104, 72, 7);
    v55[2] = 1;
    v55[3] = 2;
    v55[7] = &type metadata for String;
    uint64_t v56 = lazy protocol witness table accessor for type String and conformance String();
    v55[8] = v56;
    v55[4] = v107._countAndFlagsBits;
    LOBYTE(v51) = v106;
    v55[5] = v106;
    swift_bridgeObjectRetain((_BYTE)v51);
    uint64_t v57 = (void *)String.init(format:_:)(0x68676965772E4025, 0xE900000000000074, v55);
    char v59 = v58;
    uint64_t v60 = v112;
    specialized SGD.updateOptimizerState(for:shape:using:name:)(v113, v54, v101, v57, v58, a6, a7);
    if (v60)
    {
      uint64_t v61 = v110;
      swift_bridgeObjectRelease(v105);
      swift_release();
      swift_bridgeObjectRelease(v59);
      outlined destroy of Either<LogisticRegressionClassifier<Float, String>, FullyConnectedNetworkClassifier<Float, String>>(v54, &demangling cache variable for type metadata for TensorShape?);
      return (*(uint64_t (**)(uint64_t *, uint64_t))(v61 + 8))(v114, v111);
    }
    uint64_t v94 = v56;
    uint64_t v67 = v102;
    uint64_t v112 = 0;
    outlined destroy of Either<LogisticRegressionClassifier<Float, String>, FullyConnectedNetworkClassifier<Float, String>>(v54, &demangling cache variable for type metadata for TensorShape?);
    swift_bridgeObjectRelease(v59);
    uint64_t v68 = (uint64_t)v89;
    Swift::String v69 = v114;
    Dense.bias.getter();
    uint64_t v70 = v107._object;
    if (__swift_getEnumTagSinglePayload(v68, 1, (uint64_t)v107._object) == 1)
    {
      (*(void (**)(uint64_t *, uint64_t))(v110 + 8))(v69, v111);
      swift_bridgeObjectRelease(v105);
      swift_release();
      return outlined destroy of Either<LogisticRegressionClassifier<Float, String>, FullyConnectedNetworkClassifier<Float, String>>(v68, &demangling cache variable for type metadata for Tensor?);
    }
    (*(void (**)(uint64_t *, uint64_t, void *))(v98 + 32))(v108, v68, v70);
    uint64_t v71 = (uint64_t)v90;
    Dense.$bias.getter();
    uint64_t v72 = v97;
    if (__swift_getEnumTagSinglePayload(v71, 1, v97) == 1)
    {
      swift_bridgeObjectRelease(v105);
      outlined destroy of Either<LogisticRegressionClassifier<Float, String>, FullyConnectedNetworkClassifier<Float, String>>(v71, &demangling cache variable for type metadata for Parameter?);
      unsigned int v73 = (void *)v106;
    }
    else
    {
      unsigned int v74 = Parameter.id.getter(v71);
      v92(v71, v72);
      char v75 = v105;
      uint64_t v76 = specialized Dictionary.subscript.getter(v74, v105);
      swift_bridgeObjectRelease(v75);
      unsigned int v73 = (void *)v106;
      if (v76)
      {
        swift_beginAccess(v67, &v95, 33, 0);
        uint64_t v77 = (uint64_t)v100;
        Layer.updateValue<A>(_:for:)(v108, v76, v93, &protocol witness table for Parameter);
        outlined destroy of Either<LogisticRegressionClassifier<Float, String>, FullyConnectedNetworkClassifier<Float, String>>(v77, &demangling cache variable for type metadata for Tensor?);
        swift_endAccess(&v95);
        uint64_t v78 = (uint64_t)v91;
        Tensor.shape.getter();
        __swift_storeEnumTagSinglePayload(v78, 0, 1, (uint64_t)v103);
        char v79 = (void *)swift_allocObject(v104, 72, 7);
        long long v79[2] = 1;
        v79[3] = 2;
        v79[7] = &type metadata for String;
        v79[8] = v94;
        v79[4] = v107._countAndFlagsBits;
        char v80 = v106;
        v79[5] = v106;
        swift_bridgeObjectRetain(v80);
        uint64_t v81 = (void *)String.init(format:_:)(0x736169622E4025, 0xE700000000000000, v79);
        LOBYTE(v79) = v82;
        specialized SGD.updateOptimizerState(for:shape:using:name:)(v76, v78, v101, v81, v82, a6, a7);
        swift_release();
        swift_bridgeObjectRelease((_BYTE)v79);
        swift_release();
        outlined destroy of Either<LogisticRegressionClassifier<Float, String>, FullyConnectedNetworkClassifier<Float, String>>(v78, &demangling cache variable for type metadata for TensorShape?);
LABEL_14:
        ((void (*)(uint64_t *, void *))v109)(v108, v107._object);
        return (*(uint64_t (**)(uint64_t *, uint64_t))(v110 + 8))(v114, v111);
      }
    }
    *(void *)&long long v95 = 0;
    *((void *)&v95 + 1) = 0xE000000000000000;
    _StringGuts.grow(_:)(45);
    swift_bridgeObjectRelease(BYTE8(v95));
    *(void *)&long long v95 = 0xD000000000000019;
    v83._countAndFlagsBits = v107._countAndFlagsBits;
    v83._object = v73;
    String.append(_:)(v83);
    v83._countAndFlagsBits = 0xD000000000000012;
    String.append(_:)(v83);
    long long v106 = v95;
    v83._object = (void *)lazy protocol witness table accessor for type MLCreateError and conformance MLCreateError();
    swift_allocError(&type metadata for MLCreateError, v83._object, 0, 0);
    *(_OWORD *)uint64_t v84 = v106;
    *(_OWORD *)(v84 + 16) = 0;
    *(_OWORD *)(v84 + 32) = 0;
    *(unsigned char *)(v84 + 48) = 2;
    swift_willThrow(&type metadata for MLCreateError, v83._object, v84, v85, v86, v87);
    swift_release();
    goto LABEL_14;
  }
  swift_bridgeObjectRelease(v42);
  *(void *)&long long v95 = 0;
  *((void *)&v95 + 1) = 0xE000000000000000;
  _StringGuts.grow(_:)(47);
  swift_bridgeObjectRelease(BYTE8(v95));
  *(void *)&long long v95 = 0xD000000000000019;
  v62._countAndFlagsBits = v107._countAndFlagsBits;
  v62._object = (void *)v106;
  String.append(_:)(v62);
  v62._countAndFlagsBits = 0xD000000000000014;
  String.append(_:)(v62);
  long long v106 = v95;
  v62._object = (void *)lazy protocol witness table accessor for type MLCreateError and conformance MLCreateError();
  swift_allocError(&type metadata for MLCreateError, v62._object, 0, 0);
  *(_OWORD *)uint64_t v63 = v106;
  *(_OWORD *)(v63 + 16) = 0;
  *(_OWORD *)(v63 + 32) = 0;
  *(unsigned char *)(v63 + 48) = 2;
  swift_willThrow(&type metadata for MLCreateError, v62._object, v63, v64, v65, v66);
  return (*(uint64_t (**)(uint64_t *, uint64_t))(v110 + 8))(v114, v111);
}

uint64_t specialized _ModelCheckpoint<>.restoreGenericLayer<A, B>(_:optimizer:layerName:checkpointDictionary:)(uint64_t a1, uint64_t a2, uint64_t a3, void *a4, uint64_t a5, uint64_t (*a6)(uint64_t), uint64_t *a7, uint64_t (*a8)(void), uint64_t *a9, uint64_t a10, void (*a11)(uint64_t, uint64_t, uint64_t, uint64_t, void *))
{
  uint64_t v130 = v11;
  uint64_t v116 = a5;
  v122._object = a4;
  v122._countAndFlagsBits = a3;
  uint64_t v109 = a2;
  int64_t v14 = *(void *)(*(void *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TensorShape?)
                              - 8)
                  + 64);
  uint64_t v15 = alloca(v14);
  uint64_t v16 = alloca(v14);
  Swift::String v108 = v100;
  uint64_t v125 = a6;
  uint64_t v107 = a6(0);
  int64_t v17 = *(void *)(*(void *)(v107 - 8) + 64);
  uint64_t v18 = alloca(v17);
  uint64_t v19 = alloca(v17);
  v121._object = v100;
  uint64_t v113 = type metadata accessor for Parameter(0);
  uint64_t v103 = *(void *)(v113 - 8);
  int64_t v20 = *(void *)(v103 + 64);
  uint64_t v21 = alloca(v20);
  int64_t v22 = alloca(v20);
  uint64_t v114 = v100;
  int64_t v23 = *(void *)(*(void *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Tensor?)
                              - 8)
                  + 64);
  int64_t v24 = alloca(v23);
  long long v25 = alloca(v23);
  uint64_t v110 = v100;
  uint64_t v26 = alloca(v23);
  int64_t v27 = alloca(v23);
  uint64_t v123 = type metadata accessor for Tensor(0);
  uint64_t v28 = *(void *)(v123 - 8);
  int64_t v29 = *(void *)(v28 + 64);
  uint64_t v30 = alloca(v29);
  uint64_t v31 = alloca(v29);
  uint64_t v127 = v100;
  uint64_t v32 = type metadata accessor for LSTM(0);
  uint64_t v102 = a1;
  uint64_t v33 = Layer.namedParameterKeyPaths(recursively:)(1, v32, &protocol witness table for LSTM);
  uint64_t v111 = *(void *)(v33 + 16);
  if (v111)
  {
    uint64_t v105 = v100;
    uint64_t v34 = *a7;
    uint64_t v106 = v12;
    uint64_t v35 = v12 + v34;
    uint64_t v128 = v33;
    uint64_t v36 = v33 + 32;
    object = v122._object;
    uint64_t v38 = 0;
    uint64_t v117 = v35;
    swift_beginAccess(v35, v100, 0, 0);
    uint64_t v124 = v28;
    uint64_t v112 = v36;
    while (1)
    {
      uint64_t v104 = v38;
      uint64_t v39 = 24 * v38;
      uint64_t v40 = *(void *)(v36 + 24 * v38);
      uint64_t v41 = *(void **)(v36 + v39 + 8);
      uint64_t v42 = *(void *)(v36 + v39 + 16);
      swift_bridgeObjectRetain((_BYTE)v41);
      uint64_t v129 = v42;
      swift_retain();
      uint64_t v43 = (uint64_t)v105;
      v121._countAndFlagsBits = v40;
      v44._countAndFlagsBits = v40;
      uint64_t v126 = v41;
      v44._object = v41;
      uint64_t v45 = v130;
      Dictionary<>.tensor(forKey:prefix:)(v44, v122._countAndFlagsBits, object, v116);
      if (v45)
      {
        swift_bridgeObjectRelease((_BYTE)v126);
        swift_release();
        return swift_bridgeObjectRelease(v128);
      }
      uint64_t v46 = object;
      uint64_t v47 = v123;
      if (__swift_getEnumTagSinglePayload(v43, 1, v123) == 1)
      {
        swift_bridgeObjectRelease(v128);
        outlined destroy of Either<LogisticRegressionClassifier<Float, String>, FullyConnectedNetworkClassifier<Float, String>>(v43, &demangling cache variable for type metadata for Tensor?);
        v119._countAndFlagsBits = 0;
        v119._object = (void *)0xE000000000000000;
        _StringGuts.grow(_:)(52);
        v93._countAndFlagsBits = 0xD000000000000025;
        String.append(_:)(v93);
        v93._countAndFlagsBits = v122._countAndFlagsBits;
        v93._object = v46;
        String.append(_:)(v93);
        v93._countAndFlagsBits = 0x74656D6172617020;
        v93._object = (void *)0xEB00000000207265;
        String.append(_:)(v93);
        v93._countAndFlagsBits = v121._countAndFlagsBits;
        uint64_t v94 = v126;
        v93._object = v126;
        String.append(_:)(v93);
        Swift::String v118 = v119;
        v93._object = (void *)lazy protocol witness table accessor for type MLCreateError and conformance MLCreateError();
        swift_allocError(&type metadata for MLCreateError, v93._object, 0, 0);
        *(Swift::String *)uint64_t v95 = v118;
        *(_OWORD *)(v95 + 16) = 0;
        *(_OWORD *)(v95 + 32) = 0;
        *(unsigned char *)(v95 + 48) = 0;
        swift_bridgeObjectRelease((_BYTE)v94);
        swift_willThrow(v94, v93._object, v96, v97, v98, v99);
        return swift_release();
      }
      (*(void (**)(unsigned char *, uint64_t, uint64_t))(v124 + 32))(v127, v43, v47);
      uint64_t v48 = v129;
      swift_retain();
      uint64_t v49 = v114;
      swift_getAtKeyPath(v102, v48);
      swift_release();
      unsigned int v50 = Parameter.id.getter(v48);
      uint64_t v101 = *(void (**)(unsigned char *, uint64_t))(v103 + 8);
      v101(v49, v113);
      uint64_t v51 = a8();
      BOOL v52 = *(void *)(v51 + 16) == 0;
      uint64_t v130 = 0;
      if (v52 || (unint64_t v53 = specialized __RawDictionaryStorage.find<A>(_:)(v50), (v54 & 1) == 0))
      {
        unsigned int v120 = v50;
        swift_bridgeObjectRelease(v51);
        uint64_t v57 = v125;
        outlined init with copy of MLTrainingSessionParameters(v117, (uint64_t)v121._object, v125);
        uint64_t v58 = lazy protocol witness table accessor for type VNImageOption and conformance VNImageOption(a9, v57, a10);
        uint64_t v59 = Layer.parameterKeyPaths(recursively:)(1, v107, v58);
        if ((v59 & 0x4000000000000001) != 0)
        {
          uint64_t v83 = v59 & 0xFFFFFFFFFFFFF8;
          if (v59) {
            uint64_t v83 = v59;
          }
          swift_bridgeObjectRetain(v59);
          uint64_t v60 = _CocoaArrayWrapper.endIndex.getter(v83);
        }
        else
        {
          uint64_t v60 = *(void *)((char *)&dword_10 + (v59 & 0xFFFFFFFFFFFFF8));
          swift_bridgeObjectRetain(v59);
        }
        if (!v60)
        {
LABEL_26:
          swift_bridgeObjectRelease_n(v59, 2, v61, v62, v63);
          outlined destroy of MLActivityClassifier.ModelParameters((uint64_t)v121._object, v125);
          swift_bridgeObjectRelease(v128);
          v119._countAndFlagsBits = 0;
          v119._object = (void *)0xE000000000000000;
          _StringGuts.grow(_:)(52);
          v84._countAndFlagsBits = 0xD000000000000025;
          String.append(_:)(v84);
          String.append(_:)(v122);
          v84._countAndFlagsBits = 0x74656D6172617020;
          v84._object = (void *)0xEB00000000207265;
          String.append(_:)(v84);
          v84._countAndFlagsBits = v121._countAndFlagsBits;
          uint64_t v85 = v126;
          v84._object = v126;
          String.append(_:)(v84);
          Swift::String v118 = v119;
          v84._object = (void *)lazy protocol witness table accessor for type MLCreateError and conformance MLCreateError();
          swift_allocError(&type metadata for MLCreateError, v84._object, 0, 0);
          *(Swift::String *)uint64_t v86 = v118;
          *(_OWORD *)(v86 + 16) = 0;
          *(_OWORD *)(v86 + 32) = 0;
          *(unsigned char *)(v86 + 48) = 0;
          swift_bridgeObjectRelease((_BYTE)v85);
          swift_willThrow(v85, v84._object, v87, v88, v89, v90);
          swift_release();
          return (*(uint64_t (**)(unsigned char *, uint64_t))(v124 + 8))(v127, v123);
        }
        uint64_t v64 = 0;
        uint64_t v115 = v59;
        while (1)
        {
          if ((v59 & 0xC000000000000003) != 0)
          {
            uint64_t v55 = specialized _ArrayBuffer._getElementSlowPath(_:)(v64, v59);
          }
          else
          {
            uint64_t v55 = *(void *)(v59 + 8 * v64 + 32);
            swift_retain();
          }
          if (__OFADD__(1, v64++)) {
            BUG();
          }
          uint64_t v66 = v60;
          uint64_t v67 = v114;
          uint64_t v68 = v121._object;
          swift_getAtKeyPath(v121._object, v55);
          LODWORD(v118._countAndFlagsBits) = Parameter.id.getter(v68);
          v101(v67, v113);
          if (LODWORD(v118._countAndFlagsBits) == v120) {
            break;
          }
          swift_release();
          uint64_t v60 = v66;
          BOOL v52 = v64 == v66;
          uint64_t v59 = v115;
          if (v52) {
            goto LABEL_26;
          }
        }
        swift_bridgeObjectRelease_n(v115, 2, v69, v70, v71);
        uint64_t v56 = v125;
        outlined destroy of MLActivityClassifier.ModelParameters((uint64_t)v121._object, v125);
      }
      else
      {
        uint64_t v55 = *(void *)(*(void *)(v51 + 56) + 8 * v53);
        swift_retain();
        swift_bridgeObjectRelease(v51);
        uint64_t v56 = v125;
      }
      swift_beginAccess(v117, &v119, 33, 0);
      uint64_t v72 = lazy protocol witness table accessor for type VNImageOption and conformance VNImageOption(a9, v56, a10);
      uint64_t v73 = (uint64_t)v110;
      Layer.updateValue<A>(_:for:)(v127, v55, v72, &protocol witness table for Parameter);
      outlined destroy of Either<LogisticRegressionClassifier<Float, String>, FullyConnectedNetworkClassifier<Float, String>>(v73, &demangling cache variable for type metadata for Tensor?);
      swift_endAccess(&v119);
      uint64_t v74 = type metadata accessor for TensorShape(0);
      uint64_t v75 = v55;
      uint64_t v76 = (uint64_t)v108;
      __swift_storeEnumTagSinglePayload((uint64_t)v108, 1, 1, v74);
      Swift::String v119 = v122;
      swift_bridgeObjectRetain(v122._object);
      v77._countAndFlagsBits = 46;
      v77._object = (void *)0xE100000000000000;
      String.append(_:)(v77);
      v77._countAndFlagsBits = v121._countAndFlagsBits;
      LOBYTE(v73) = (_BYTE)v126;
      v77._object = v126;
      String.append(_:)(v77);
      swift_bridgeObjectRelease(v73);
      uint64_t v78 = v76;
      uint64_t v79 = v75;
      char v80 = (char)v119._object;
      uint64_t v81 = v130;
      a11(v79, v78, v116, v119._countAndFlagsBits, v119._object);
      uint64_t v130 = v81;
      if (v81) {
        break;
      }
      uint64_t v82 = v104 + 1;
      swift_release();
      uint64_t v38 = v82;
      swift_release();
      swift_bridgeObjectRelease(v80);
      outlined destroy of Either<LogisticRegressionClassifier<Float, String>, FullyConnectedNetworkClassifier<Float, String>>(v78, &demangling cache variable for type metadata for TensorShape?);
      (*(void (**)(unsigned char *, uint64_t))(v124 + 8))(v127, v123);
      BOOL v52 = v82 == v111;
      object = v122._object;
      uint64_t v36 = v112;
      if (v52) {
        goto LABEL_32;
      }
    }
    swift_release();
    swift_release();
    swift_bridgeObjectRelease(v80);
    outlined destroy of Either<LogisticRegressionClassifier<Float, String>, FullyConnectedNetworkClassifier<Float, String>>(v78, &demangling cache variable for type metadata for TensorShape?);
    (*(void (**)(unsigned char *, uint64_t))(v124 + 8))(v127, v123);
LABEL_32:
    char v92 = v128;
  }
  else
  {
    char v92 = v33;
  }
  return swift_bridgeObjectRelease(v92);
}

uint64_t specialized Adam.updateOptimizerState(for:shape:using:name:)(uint64_t a1, uint64_t a2, void *a3, uint64_t a4, void *a5)
{
  uint64_t v66 = v5;
  uint64_t v59 = v6;
  uint64_t v64 = a5;
  v63._object = a3;
  uint64_t v60 = a1;
  int64_t v8 = *(void *)(*(void *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Tensor?)
                             - 8)
                 + 64);
  int64_t v9 = alloca(v8);
  uint64_t v10 = alloca(v8);
  uint64_t v62 = &v55;
  uint64_t v11 = alloca(v8);
  uint64_t v12 = alloca(v8);
  uint64_t v57 = &v55;
  uint64_t v13 = alloca(v8);
  int64_t v14 = alloca(v8);
  uint64_t v61 = &v55;
  uint64_t v15 = alloca(v8);
  uint64_t v16 = alloca(v8);
  uint64_t v17 = type metadata accessor for Tensor(0);
  uint64_t v65 = *(void *)(v17 - 8);
  int64_t v18 = *(void *)(v65 + 64);
  uint64_t v19 = alloca(v18);
  int64_t v20 = alloca(v18);
  uint64_t v58 = &v55;
  uint64_t v21 = alloca(v18);
  int64_t v22 = alloca(v18);
  uint64_t v56 = &v55;
  int64_t v23 = alloca(v18);
  int64_t v24 = alloca(v18);
  uint64_t v55 = (uint64_t)&v55;
  v25._countAndFlagsBits = a4;
  v25._object = v64;
  uint64_t v26 = v66;
  uint64_t result = Dictionary<>.tensor(forKey:prefix:)(v25, 0x6D6F4D7473726966, (void *)0xEC00000073746E65, (uint64_t)v63._object);
  uint64_t v66 = v26;
  if (!v26)
  {
    v63._countAndFlagsBits = a4;
    if (__swift_getEnumTagSinglePayload((uint64_t)&v55, 1, v17) == 1)
    {
      outlined destroy of Either<LogisticRegressionClassifier<Float, String>, FullyConnectedNetworkClassifier<Float, String>>((uint64_t)&v55, &demangling cache variable for type metadata for Tensor?);
    }
    else
    {
      uint64_t v28 = v55;
      uint64_t v29 = v65;
      (*(void (**)(uint64_t, uint64_t *, uint64_t))(v65 + 32))(v55, &v55, v17);
      uint64_t v30 = (uint64_t)v61;
      (*(void (**)(uint64_t *, uint64_t, uint64_t))(v29 + 16))(v61, v28, v17);
      __swift_storeEnumTagSinglePayload(v30, 0, 1, v17);
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Adam<MLActivityClassifier.Model>);
      uint64_t v67 = v17;
      uint64_t v31 = v60;
      swift_retain();
      uint64_t v32 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for OptimizerStateDictionary<MLActivityClassifier.Model>);
      OptimizerStateDictionary.subscript.setter(v30, v31, v32);
      uint64_t v17 = v67;
      (*(void (**)(uint64_t))(v65 + 8))(v28);
    }
    v33._object = v64;
    v33._countAndFlagsBits = v63._countAndFlagsBits;
    uint64_t v34 = (uint64_t)v57;
    uint64_t v35 = v66;
    uint64_t result = Dictionary<>.tensor(forKey:prefix:)(v33, 0x6F4D646E6F636573, (void *)0xED000073746E656DLL, (uint64_t)v63._object);
    uint64_t v66 = v35;
    if (!v35)
    {
      if (__swift_getEnumTagSinglePayload(v34, 1, v17) == 1)
      {
        outlined destroy of Either<LogisticRegressionClassifier<Float, String>, FullyConnectedNetworkClassifier<Float, String>>(v34, &demangling cache variable for type metadata for Tensor?);
      }
      else
      {
        uint64_t v36 = v56;
        uint64_t v37 = v65;
        (*(void (**)(uint64_t *, uint64_t, uint64_t))(v65 + 32))(v56, v34, v17);
        uint64_t v38 = (uint64_t)v61;
        (*(void (**)(uint64_t *, uint64_t *, uint64_t))(v37 + 16))(v61, v36, v17);
        __swift_storeEnumTagSinglePayload(v38, 0, 1, v17);
        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Adam<MLActivityClassifier.Model>);
        uint64_t v67 = v17;
        uint64_t v39 = v60;
        swift_retain();
        uint64_t v40 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for OptimizerStateDictionary<MLActivityClassifier.Model>);
        OptimizerStateDictionary.subscript.setter(v38, v39, v40);
        uint64_t v17 = v67;
        (*(void (**)(uint64_t *))(v65 + 8))(v36);
      }
      v41._object = v64;
      v41._countAndFlagsBits = v63._countAndFlagsBits;
      uint64_t v42 = v66;
      uint64_t result = Dictionary<>.tensor(forKey:prefix:)(v41, 0xD000000000000014, "used as dictionary key" + 0x8000000000000000, (uint64_t)v63._object);
      uint64_t v66 = v42;
      if (!v42)
      {
        uint64_t v43 = (uint64_t)v62;
        if (__swift_getEnumTagSinglePayload((uint64_t)v62, 1, v17) == 1)
        {
          return outlined destroy of Either<LogisticRegressionClassifier<Float, String>, FullyConnectedNetworkClassifier<Float, String>>(v43, &demangling cache variable for type metadata for Tensor?);
        }
        else
        {
          uint64_t v44 = v17;
          uint64_t v45 = v58;
          uint64_t v46 = v43;
          uint64_t v67 = v44;
          uint64_t v47 = v65;
          (*(void (**)(uint64_t *, uint64_t))(v65 + 32))(v58, v46);
          uint64_t v48 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Adam<MLActivityClassifier.Model>);
          uint64_t v49 = *(int *)(v48 + 72) + v59;
          uint64_t v50 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for OptimizerStateDictionary<MLActivityClassifier.Model>);
          if (__swift_getEnumTagSinglePayload(v49, 1, v50))
          {
            return (*(uint64_t (**)(uint64_t *, uint64_t))(v47 + 8))(v45, v67);
          }
          else
          {
            uint64_t v51 = v45;
            uint64_t v52 = (uint64_t)v61;
            (*(void (**)(uint64_t *, uint64_t *, uint64_t))(v47 + 16))(v61, v51, v67);
            __swift_storeEnumTagSinglePayload(v52, 0, 1, v67);
            uint64_t v53 = v52;
            uint64_t v54 = v60;
            swift_retain();
            OptimizerStateDictionary.subscript.setter(v53, v54, v50);
            return (*(uint64_t (**)(uint64_t *, uint64_t))(v65 + 8))(v58, v67);
          }
        }
      }
    }
  }
  return result;
}

uint64_t outlined assign with take of SGD<MLHandActionClassifier.GraphCNNModel>(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SGD<MLHandActionClassifier.GraphCNNModel>);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v2 - 8) + 40))(a2, a1, v2);
  return a2;
}

Swift::Void __swiftcall __spoils<cf,zf,sf,of,pf,rax,rdx,rcx,rdi,rsi,r8,r9,r10,r11,r12,xmm0,xmm1,xmm2,xmm3,xmm4,xmm5,xmm6,xmm7> MLSoundClassifier.ModelParameters.ModelAlgorithmType.validate()()
{
  uint64_t v1 = *(void **)(v0 + 16);
  MLSoundClassifier.ModelParameters.FeatureExtractorType.validate()();
  if (!v2 && v1)
  {
    uint64_t v3 = v1[2];
    if (v3)
    {
      if ((uint64_t)v1[4] > 0)
      {
        if (v3 == 1) {
          return;
        }
        if ((uint64_t)v1[5] > 0)
        {
          if (v3 == 2) {
            return;
          }
          for (uint64_t i = 6; ; ++i)
          {
            uint64_t v5 = i - 4 + 1;
            if (__OFADD__(1, i - 4)) {
              BUG();
            }
            if ((uint64_t)v1[i] <= 0) {
              break;
            }
            if (v5 == v3) {
              return;
            }
          }
        }
      }
      uint64_t v6 = lazy protocol witness table accessor for type MLCreateError and conformance MLCreateError();
      swift_allocError(&type metadata for MLCreateError, v6, 0, 0);
      *(void *)uint64_t v7 = 0xD000000000000031;
      uint64_t v11 = "n be converted to double";
    }
    else
    {
      uint64_t v6 = lazy protocol witness table accessor for type MLCreateError and conformance MLCreateError();
      swift_allocError(&type metadata for MLCreateError, v6, 0, 0);
      *(void *)uint64_t v7 = 0xD000000000000036;
      uint64_t v11 = "positive integers";
    }
    *(void *)(v7 + 8) = (unint64_t)v11 | 0x8000000000000000;
    *(_OWORD *)(v7 + 16) = 0;
    *(_OWORD *)(v7 + 32) = 0;
    *(unsigned char *)(v7 + 48) = 0;
    swift_willThrow(&type metadata for MLCreateError, v6, v7, v8, v9, v10);
  }
}

unint64_t MLSoundClassifier.ModelParameters.ModelAlgorithmType.description.getter()
{
  uint64_t v1 = 0xD000000000000012;
  uint64_t v2 = *(void *)(v0 + 16);
  swift_bridgeObjectRetain(v2);
  unint64_t v3 = MLSoundClassifier.ModelParameters.FeatureExtractorType.description.getter();
  char v5 = v4;
  if (v2)
  {
    swift_bridgeObjectRelease(v2);
    uint64_t v6 = "Feature Extractor: " + 0x8000000000000000;
    uint64_t v1 = 0xD000000000000015;
  }
  else
  {
    swift_bridgeObjectRelease(0);
    uint64_t v6 = "Multilayer Perceptron" + 0x8000000000000000;
  }
  swift_bridgeObjectRetain(v5);
  v7._countAndFlagsBits = v1;
  v7._object = v6;
  String.append(_:)(v7);
  swift_bridgeObjectRelease(v5);
  swift_bridgeObjectRelease((_BYTE)v6);
  return v3;
}

char static MLSoundClassifier.ModelParameters.ModelAlgorithmType.== infix(_:_:)(uint64_t *a1, uint64_t *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5 = *a1;
  uint64_t v6 = a1[2];
  uint64_t v7 = *a2;
  char v8 = *((unsigned char *)a2 + 8);
  uint64_t v9 = a2[2];
  if (*((unsigned char *)a1 + 8))
  {
    LOBYTE(a4) = (v5 == v7) & v8;
    if ((_BYTE)a4 != 1) {
      return 0;
    }
  }
  else
  {
    LOBYTE(a4) = (v5 != v7) | v8;
    if (a4) {
      return 0;
    }
  }
  if (!v6)
  {
    if (!v9)
    {
      swift_bridgeObjectRelease_n(0, 2, v5, a4, v7);
      return 1;
    }
    return 0;
  }
  if (!v9) {
    return 0;
  }
  BOOL v10 = specialized static Array<A>.== infix(_:_:)(v6, v9);
  char result = 1;
  if (!v10) {
    return 0;
  }
  return result;
}

char protocol witness for static Equatable.== infix(_:_:) in conformance MLSoundClassifier.ModelParameters.ModelAlgorithmType(uint64_t *a1, uint64_t *a2, uint64_t a3, uint64_t a4)
{
  return static MLSoundClassifier.ModelParameters.ModelAlgorithmType.== infix(_:_:)(a1, a2, a3, a4);
}

unint64_t protocol witness for CustomStringConvertible.description.getter in conformance MLSoundClassifier.ModelParameters.ModelAlgorithmType()
{
  return MLSoundClassifier.ModelParameters.ModelAlgorithmType.description.getter();
}

uint64_t initializeBufferWithCopyOfBuffer for MLSoundClassifier.ModelParameters.ModelAlgorithmType(uint64_t a1, uint64_t a2)
{
  *(unsigned char *)(a1 + 8) = *(unsigned char *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  uint64_t v3 = *(void *)(a2 + 16);
  *(void *)(a1 + 16) = v3;
  swift_bridgeObjectRetain(v3);
  return a1;
}

uint64_t assignWithCopy for MLSoundClassifier.ModelParameters.ModelAlgorithmType(uint64_t a1, uint64_t a2)
{
  *(unsigned char *)(a1 + 8) = *(unsigned char *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  uint64_t v3 = *(void *)(a2 + 16);
  uint64_t v4 = *(void *)(a1 + 16);
  *(void *)(a1 + 16) = v3;
  swift_bridgeObjectRetain(v3);
  swift_bridgeObjectRelease(v4);
  return a1;
}

uint64_t assignWithTake for MLSoundClassifier.ModelParameters.ModelAlgorithmType(uint64_t a1, uint64_t a2)
{
  *(unsigned char *)(a1 + 8) = *(unsigned char *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  uint64_t v3 = *(void *)(a1 + 16);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  swift_bridgeObjectRelease(v3);
  return a1;
}

uint64_t getEnumTagSinglePayload for MLSoundClassifier.ModelParameters.ModelAlgorithmType(uint64_t a1, unsigned int a2)
{
  if (a2)
  {
    if (a2 >= 0x7FFFFFFF && *(unsigned char *)(a1 + 24))
    {
      int v2 = *(_DWORD *)a1 + 2147483646;
    }
    else
    {
      unint64_t v3 = *(void *)(a1 + 16);
      unint64_t v4 = v3 & 0xFFFFFFFF00000001;
      int v5 = (v3 >> 1) - 1;
      int v6 = -1;
      if (v5 >= 0) {
        int v6 = v5;
      }
      int v2 = v4 != 0 ? -1 : v6;
    }
  }
  else
  {
    int v2 = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for MLSoundClassifier.ModelParameters.ModelAlgorithmType(uint64_t a1, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFE)
  {
    *(_OWORD *)(a1 + 8) = 0;
    *(void *)a1 = a2 - 0x7FFFFFFF;
    if (a3 >= 0x7FFFFFFF) {
      *(unsigned char *)(a1 + 24) = 1;
    }
  }
  else
  {
    if (a3 >= 0x7FFFFFFF) {
      *(unsigned char *)(a1 + 24) = 0;
    }
    if (a2)
    {
      uint64_t result = 2 * a2;
      *(void *)(a1 + 16) = result;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for MLSoundClassifier.ModelParameters.ModelAlgorithmType()
{
  return &type metadata for MLSoundClassifier.ModelParameters.ModelAlgorithmType;
}

uint64_t initializeWithCopy for MLSoundClassifier.ModelParameters.ModelAlgorithmType(uint64_t a1, uint64_t a2)
{
  return initializeBufferWithCopyOfBuffer for MLSoundClassifier.ModelParameters.ModelAlgorithmType(a1, a2);
}

uint64_t type metadata instantiation function for ItemStatistics(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_allocateGenericValueMetadata(a1, a2, a3, 16);
}

uint64_t type metadata completion function for ItemStatistics(uint64_t a1)
{
  v4[0] = (char *)&value witness table for Builtin.Int64 + 64;
  uint64_t v1 = swift_checkMetadataState(319, *(void *)(a1 + 16));
  if (v2 <= 0x3F)
  {
    v4[1] = *(void *)(v1 - 8) + 64;
    uint64_t v1 = 0;
    swift_initStructMetadata(a1, 0, 2, v4, a1 + 24);
  }
  return v1;
}

uint64_t *initializeBufferWithCopyOfBuffer for ItemStatistics(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  unint64_t v3 = a1;
  uint64_t v4 = *(void *)(*(void *)(a3 + 16) - 8);
  int v5 = *(_DWORD *)(v4 + 80);
  int v6 = v5;
  if (v5 > 7u
    || (v5 & 0x100000) != 0
    || *(void *)(v4 + 64) + (unint64_t)((v5 + 8) & ~v5) > 0x18)
  {
    uint64_t v7 = *a2;
    *unint64_t v3 = *a2;
    swift_retain(v7);
    return (uint64_t *)(v7 + ((v6 + 16) & (v6 & 0xFFFFFFF8 ^ 0x1F8)));
  }
  else
  {
    *a1 = *a2;
    (*(void (**)(unint64_t, unint64_t))(v4 + 16))(~(unint64_t)v5 & ((unint64_t)a1 + v5 + 8), ~(unint64_t)v5 & ((unint64_t)a2 + v5 + 8));
  }
  return v3;
}

uint64_t destroy for ItemStatistics(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(unint64_t))(*(void *)(*(void *)(a2 + 16) - 8) + 8))((a1 + *(unsigned __int8 *)(*(void *)(*(void *)(a2 + 16) - 8) + 80) + 8) & ~(unint64_t)*(unsigned __int8 *)(*(void *)(*(void *)(a2 + 16) - 8) + 80));
}

void *initializeWithCopy for ItemStatistics(void *a1, void *a2, uint64_t a3)
{
  *a1 = *a2;
  uint64_t v3 = *(void *)(*(void *)(a3 + 16) - 8);
  (*(void (**)(unint64_t, unint64_t))(v3 + 16))(~(unint64_t)*(unsigned __int8 *)(v3 + 80) & ((unint64_t)a1 + *(unsigned __int8 *)(v3 + 80) + 8), ((unint64_t)a2 + *(unsigned __int8 *)(v3 + 80) + 8) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80));
  return a1;
}

void *assignWithCopy for ItemStatistics(void *a1, void *a2, uint64_t a3)
{
  *a1 = *a2;
  uint64_t v3 = *(void *)(*(void *)(a3 + 16) - 8);
  (*(void (**)(unint64_t, unint64_t))(v3 + 24))(~(unint64_t)*(unsigned __int8 *)(v3 + 80) & ((unint64_t)a1 + *(unsigned __int8 *)(v3 + 80) + 8), ((unint64_t)a2 + *(unsigned __int8 *)(v3 + 80) + 8) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80));
  return a1;
}

void *initializeWithTake for ItemStatistics(void *a1, void *a2, uint64_t a3)
{
  *a1 = *a2;
  uint64_t v3 = *(void *)(*(void *)(a3 + 16) - 8);
  (*(void (**)(unint64_t, unint64_t))(v3 + 32))(~(unint64_t)*(unsigned __int8 *)(v3 + 80) & ((unint64_t)a1 + *(unsigned __int8 *)(v3 + 80) + 8), ((unint64_t)a2 + *(unsigned __int8 *)(v3 + 80) + 8) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80));
  return a1;
}

void *assignWithTake for ItemStatistics(void *a1, void *a2, uint64_t a3)
{
  *a1 = *a2;
  uint64_t v3 = *(void *)(*(void *)(a3 + 16) - 8);
  (*(void (**)(unint64_t, unint64_t))(v3 + 40))(~(unint64_t)*(unsigned __int8 *)(v3 + 80) & ((unint64_t)a1 + *(unsigned __int8 *)(v3 + 80) + 8), ((unint64_t)a2 + *(unsigned __int8 *)(v3 + 80) + 8) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80));
  return a1;
}

uint64_t getEnumTagSinglePayload for ItemStatistics(unsigned __int8 *a1, unsigned int a2, uint64_t a3)
{
  uint64_t result = 0;
  if (!a2) {
    return result;
  }
  uint64_t v5 = *(void *)(a3 + 16);
  uint64_t v6 = *(void *)(v5 - 8);
  uint64_t v7 = *(unsigned int *)(v6 + 84);
  uint64_t v8 = *(unsigned __int8 *)(v6 + 80);
  uint64_t v9 = ~v8;
  BOOL v10 = a2 <= v7;
  int v11 = a2 - v7;
  if (v10) {
    goto LABEL_19;
  }
  uint64_t v12 = *(void *)(v6 + 64) + ((v8 + 8) & v9);
  if (v12 > 3)
  {
LABEL_4:
    int v13 = a1[v12];
    goto LABEL_11;
  }
  unsigned int v14 = ((~(-1 << (8 * v12)) + v11) >> (8 * v12)) + 1;
  if (v14 > 0xFFFF)
  {
    int v13 = *(_DWORD *)&a1[v12];
  }
  else
  {
    if (v14 <= 0xFF)
    {
      if (v14 < 2) {
        goto LABEL_19;
      }
      goto LABEL_4;
    }
    int v13 = *(unsigned __int16 *)&a1[v12];
  }
LABEL_11:
  if (v13)
  {
    int v15 = (v13 - 1) << (8 * v12);
    int v16 = 0;
    if (v12 >= 4) {
      int v15 = 0;
    }
    if (v12)
    {
      int v17 = 4;
      if (v12 < 4) {
        int v17 = *(_DWORD *)(v6 + 64) + ((v8 + 8) & v9);
      }
      switch(v17)
      {
        case 1:
          int v16 = *a1;
          break;
        case 2:
          int v16 = *(unsigned __int16 *)a1;
          break;
        case 3:
          int v16 = *(unsigned __int16 *)a1 | (a1[2] << 16);
          break;
        case 4:
          int v16 = *(_DWORD *)a1;
          break;
      }
    }
    return v7 + (v15 | v16) + 1;
  }
LABEL_19:
  if (v7) {
    return __swift_getEnumTagSinglePayload(v9 & (unint64_t)&a1[v8 + 8], v7, v5);
  }
  return result;
}

uint64_t storeEnumTagSinglePayload for ItemStatistics(uint64_t a1, uint64_t a2, unsigned int a3, uint64_t a4)
{
  uint64_t result = *(void *)(a4 + 16);
  uint64_t v6 = *(void *)(result - 8);
  uint64_t v7 = *(unsigned __int8 *)(v6 + 80);
  uint64_t v8 = *(void *)(v6 + 64) + (((int)v7 + 8) & ~*(unsigned __int8 *)(v6 + 80));
  unsigned int v9 = *(_DWORD *)(v6 + 84);
  unsigned int v10 = 0;
  BOOL v11 = a3 <= v9;
  unsigned int v12 = a3 - v9;
  if (!v11)
  {
    if (v8 > 3)
    {
      int v17 = 1;
LABEL_9:
      unsigned int v10 = v17;
      goto LABEL_10;
    }
    unsigned int v13 = ((~(-1 << (8 * v8)) + v12) >> (8 * v8)) + 1;
    if (v13 > 0xFFFF)
    {
      int v17 = 4;
      goto LABEL_9;
    }
    unsigned int v10 = 2;
    if (v13 < 0x100) {
      unsigned int v10 = v13 >= 2;
    }
  }
LABEL_10:
  if (v9 < a2)
  {
    unsigned int v14 = a2 + ~v9;
    if (v8 >= 4)
    {
      int v15 = 1;
      __bzero(a1, v8);
      *(_DWORD *)a1 = v14;
      uint64_t result = v10;
      switch(v10)
      {
        case 0u:
          return result;
        case 1u:
          goto LABEL_26;
        case 2u:
          goto LABEL_27;
        case 3u:
          goto LABEL_30;
        case 4u:
          goto LABEL_28;
      }
    }
    int v15 = (v14 >> (8 * v8)) + 1;
    if (v8)
    {
      int v16 = ~(-1 << (8 * v8)) & v14;
      __bzero(a1, v8);
      if (v8 != 3)
      {
        if (v8 == 2)
        {
          *(_WORD *)a1 = v16;
          uint64_t result = v10;
          switch(v10)
          {
            case 0u:
              return result;
            case 1u:
              goto LABEL_26;
            case 2u:
              goto LABEL_27;
            case 3u:
              goto LABEL_30;
            case 4u:
              goto LABEL_28;
          }
        }
        *(unsigned char *)a1 = v16;
        uint64_t result = v10;
        switch(v10)
        {
          case 0u:
            return result;
          case 1u:
            goto LABEL_26;
          case 2u:
            goto LABEL_27;
          case 3u:
            goto LABEL_30;
          case 4u:
            goto LABEL_28;
        }
      }
      *(_WORD *)a1 = v16;
      *(unsigned char *)(a1 + 2) = BYTE2(v16);
      uint64_t result = v10;
      switch(v10)
      {
        case 0u:
          return result;
        case 1u:
          goto LABEL_26;
        case 2u:
          goto LABEL_27;
        case 3u:
          goto LABEL_30;
        case 4u:
          goto LABEL_28;
      }
    }
    uint64_t result = v10;
    switch(v10)
    {
      case 0u:
        return result;
      case 1u:
LABEL_26:
        *(unsigned char *)(a1 + v8) = v15;
        return result;
      case 2u:
LABEL_27:
        *(_WORD *)(a1 + v8) = v15;
        return result;
      case 3u:
        goto LABEL_30;
      case 4u:
LABEL_28:
        *(_DWORD *)(a1 + v8) = v15;
        return result;
    }
  }
  switch(v10)
  {
    case 0u:
      break;
    case 1u:
      *(unsigned char *)(a1 + v8) = 0;
      break;
    case 2u:
      *(_WORD *)(a1 + v8) = 0;
      break;
    case 3u:
LABEL_30:
      BUG();
    case 4u:
      *(_DWORD *)(a1 + v8) = 0;
      break;
  }
  if (a2) {
    return __swift_storeEnumTagSinglePayload(~v7 & (a1 + v7 + 8), a2, v9, result);
  }
  return result;
}

uint64_t type metadata accessor for ItemStatistics(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for ItemStatistics);
}

uint64_t static MLLogisticRegressionClassifier.ModelParameters.firstIncompatibility(_:_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = v2;
  if (*(void *)a1 == *(void *)a2)
  {
    double v4 = *(double *)(a1 + 40);
    if (v4 == *(double *)(a2 + 40))
    {
      double v5 = *(double *)(a1 + 48);
      if (v5 == *(double *)(a2 + 48))
      {
        double v6 = *(double *)(a1 + 56);
        if (v6 == *(double *)(a2 + 56))
        {
          double v7 = *(double *)(a1 + 64);
          if (v7 == *(double *)(a2 + 64))
          {
            unsigned __int8 v8 = *(unsigned char *)(a1 + 72);
            unsigned __int8 v9 = *(unsigned char *)(a2 + 72);
            if (v8 == v9)
            {
              unint64_t v15 = 0;
              unsigned int v14 = 0;
              uint64_t v11 = 0;
              unint64_t v12 = 0;
              uint64_t result = 0;
              unint64_t v13 = 0;
            }
            else
            {
              uint64_t result = 0x65736C6166;
              uint64_t v11 = 0x65736C6166;
              if (v8) {
                uint64_t v11 = 1702195828;
              }
              unint64_t v12 = (v8 ^ 1u | 0xFFFFFFFFFFFFFFE4) << 56;
              if (v9) {
                uint64_t result = 1702195828;
              }
              unint64_t v13 = (v9 ^ 1u | 0xFFFFFFFFFFFFFFE4) << 56;
              unsigned int v14 = (char *)0xEF676E696C616373;
              unint64_t v15 = 0x2065727574616546;
            }
          }
          else
          {
            double v26 = *(double *)(a2 + 64);
            uint64_t v11 = Double.description.getter(v7);
            unint64_t v12 = v22;
            uint64_t result = Double.description.getter(v26);
            unsigned int v14 = "e at least one element" + 0x8000000000000000;
            unint64_t v15 = 0xD000000000000015;
          }
        }
        else
        {
          double v25 = *(double *)(a2 + 56);
          uint64_t v11 = Double.description.getter(v6);
          unint64_t v12 = v21;
          uint64_t result = Double.description.getter(v25);
          unsigned int v14 = (char *)0xE900000000000065;
          unint64_t v15 = 0x7A69732070657453;
        }
      }
      else
      {
        unsigned int v14 = (char *)0xEA00000000007974;
        double v24 = *(double *)(a2 + 48);
        uint64_t v11 = Double.description.getter(v5);
        unint64_t v12 = v20;
        uint64_t result = Double.description.getter(v24);
        unint64_t v15 = 0x6C616E657020324CLL;
      }
    }
    else
    {
      unsigned int v14 = (char *)0xEA00000000007974;
      unint64_t v15 = 0x6C616E657020314CLL;
      double v23 = *(double *)(a2 + 40);
      uint64_t v11 = Double.description.getter(v4);
      unint64_t v12 = v19;
      uint64_t result = Double.description.getter(v23);
    }
  }
  else
  {
    uint64_t v16 = dispatch thunk of CustomStringConvertible.description.getter(&type metadata for Int, &protocol witness table for Int);
    unint64_t v18 = v17;
    uint64_t v11 = v16;
    uint64_t result = dispatch thunk of CustomStringConvertible.description.getter(&type metadata for Int, &protocol witness table for Int);
    unint64_t v12 = v18;
    unsigned int v14 = (char *)0xEF736E6F69746172;
    unint64_t v15 = 0x657469202E78614DLL;
  }
  *uint64_t v3 = v15;
  v3[1] = (unint64_t)v14;
  v3[2] = v11;
  v3[3] = v12;
  v3[4] = result;
  v3[5] = v13;
  return result;
}

void *_sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSaySSG_SSs5NeverOTg563_s8CreateML11MLGazetteerV11predictions4fromSaySSGAF_tKFS2SXEfU_0F2ML0H0VTf1cn_n(uint64_t a1, void *a2, char a3, void *a4, void *a5)
{
  int64_t v7 = *(void *)(a1 + 16);
  if (v7)
  {
    id v25 = a2;
    uint64_t v27 = *(void *)(a1 + 16);
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v7, 0);
    double v26 = _swiftEmptyArrayStorage;
    unsigned __int8 v8 = (uint64_t *)(a1 + 40);
    do
    {
      uint64_t v9 = *v8;
      swift_bridgeObjectRetain(*v8);
      NSString v10 = String._bridgeToObjectiveC()();
      id v11 = [v25 labelForString:v10];
      id v12 = v11;

      if (v12)
      {
        uint64_t v23 = static String._unconditionallyBridgeFromObjectiveC(_:)(v12);
        unint64_t v24 = v13;
        swift_bridgeObjectRelease(v9);
      }
      else
      {
        swift_bridgeObjectRelease(v9);
        uint64_t v23 = 0;
        unint64_t v24 = 0xE000000000000000;
      }
      unsigned int v14 = v26;
      unint64_t v15 = v26[2];
      uint64_t v16 = v27;
      if (v26[3] >> 1 <= v15)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v26[3] >= 2uLL, v15 + 1, 1);
        uint64_t v16 = v27;
        unsigned int v14 = v26;
      }
      v14[2] = v15 + 1;
      uint64_t v17 = 2 * v15;
      v14[v17 + 4] = v23;
      double v26 = v14;
      v14[v17 + 5] = v24;
      v8 += 2;
      uint64_t v27 = v16 - 1;
    }
    while (v16 != 1);

    swift_bridgeObjectRelease(a3);
    return v26;
  }
  else
  {

    swift_bridgeObjectRelease(a3);
    return _swiftEmptyArrayStorage;
  }
}

Swift::String __swiftcall __spoils<cf,zf,sf,of,pf,rax,rdx,rcx,rdi,rsi,r8,r9,r10,r11,r12,xmm0,xmm1,xmm2,xmm3,xmm4,xmm5,xmm6,xmm7> MLGazetteer.prediction(from:)(Swift::String from)
{
  unint64_t v2 = *v1;
  NSString v3 = String._bridgeToObjectiveC()();
  id v4 = [v2 labelForString:v3];
  id v5 = v4;

  if (v5)
  {
    uint64_t v6 = static String._unconditionallyBridgeFromObjectiveC(_:)(v5);
    unsigned __int8 v8 = v7;
  }
  else
  {
    unsigned __int8 v8 = (void *)0xE000000000000000;
    uint64_t v6 = 0;
  }
  result._countAndFlagsBits = v6;
  result._object = v8;
  return result;
}

void *MLGazetteer.predictions(from:)(uint64_t a1)
{
  unint64_t v2 = *(void **)v1;
  uint64_t v3 = *(void *)(v1 + 8);
  id v8 = *(id *)(v1 + 16);
  id v4 = *(void **)(v1 + 24);
  v4;
  id v5 = v2;
  swift_bridgeObjectRetain(v3);
  id v6 = v8;
  return _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSaySSG_SSs5NeverOTg563_s8CreateML11MLGazetteerV11predictions4fromSaySSGAF_tKFS2SXEfU_0F2ML0H0VTf1cn_n(a1, v5, v3, v6, v4);
}

uint64_t MLGazetteer.predictions(from:)(uint64_t a1, double a2)
{
  uint64_t v13 = v2;
  uint64_t v4 = *(void *)a1;
  char v5 = *(unsigned char *)(a1 + 8);
  id v17 = *(id *)v3;
  uint64_t v15 = *(void *)(v3 + 8);
  id v14 = *(id *)(v3 + 16);
  uint64_t v16 = *(void **)(v3 + 24);
  outlined copy of Result<_DataTable, Error>(*(void *)a1, v5);
  uint64_t v6 = (uint64_t)specialized Array<A>.init(_:)(v4, v5, a2);
  v16;
  id v7 = v17;
  swift_bridgeObjectRetain(v15);
  id v8 = v14;
  LOBYTE(v7) = _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSaySSG_SSs5NeverOTg563_s8CreateML11MLGazetteerV11predictions4fromSaySSGAF_tKFS2SXEfU_0F2ML0H0VTf1cn_n(v6, v7, v15, v8, v16);
  swift_bridgeObjectRelease(v6);
  char v12 = (char)v7;
  uint64_t ML14_UntypedColumnC_s5Error_pTgm5 = _ss6ResultOsRi_zrlE8catchingAByxq_Gxyq_YKXE_tcfC8CreateML14_UntypedColumnC_s5Error_pTgm5((void (*)(void *))partial apply for specialized closure #1 in MLUntypedColumn.init<A>(_:));
  LOBYTE(v6) = v10;
  swift_bridgeObjectRelease(v12);
  uint64_t result = v13;
  *(void *)uint64_t v13 = ML14_UntypedColumnC_s5Error_pTgm5;
  *(unsigned char *)(v13 + 8) = v6 & 1;
  return result;
}

Class static MLTextClassifier.buildOptions(_:)(uint64_t a1)
{
  v76[1] = v1;
  uint64_t v2 = a1;
  uint64_t v81 = type metadata accessor for URL(0);
  uint64_t v82 = *(void *)(v81 - 8);
  int64_t v3 = *(void *)(v82 + 64);
  uint64_t v4 = alloca(v3);
  char v5 = alloca(v3);
  uint64_t v79 = v76;
  uint64_t v6 = alloca(v3);
  id v7 = alloca(v3);
  char v80 = v76;
  int64_t v8 = *(void *)(*(void *)(type metadata accessor for MLTextClassifier.FeatureExtractorType(0) - 8) + 64);
  uint64_t v9 = alloca(v8);
  char v10 = alloca(v8);
  Swift::String v77 = v76;
  id v11 = alloca(v8);
  char v12 = alloca(v8);
  uint64_t v13 = v76;
  uint64_t v86 = type metadata accessor for MLTextClassifier.ModelAlgorithmType(0);
  int64_t v14 = *(void *)(*(void *)(v86 - 8) + 64);
  uint64_t v15 = alloca(v14);
  uint64_t v16 = alloca(v14);
  uint64_t v85 = v76;
  v76[2] = (char *)&type metadata for Any + 8;
  uint64_t v87 = (objc_class *)Dictionary.init(dictionaryLiteral:)(_swiftEmptyArrayStorage, &type metadata for AnyHashable, (char *)&type metadata for Any + 8, &protocol witness table for AnyHashable);
  uint64_t v17 = type metadata accessor for MLTextClassifier.ModelParameters(0);
  uint64_t v18 = *(int *)(v17 + 36);
  if (!*(unsigned char *)(a1 + v18 + 8))
  {
    Swift::String v84 = v76;
    if (!kNLPMaximumIterationsKey) {
      BUG();
    }
    uint64_t v83 = *(void *)(a1 + v18);
    *(void *)&long long v88 = kNLPMaximumIterationsKey;
    uint64_t v19 = type metadata accessor for CFStringRef(0);
    uint64_t v20 = lazy protocol witness table accessor for type NLModelConfigurationOptionsKey and conformance NLModelConfigurationOptionsKey(&lazy protocol witness table cache variable for type CFStringRef and conformance CFStringRef, type metadata accessor for CFStringRef, (uint64_t)&protocol conformance descriptor for CFStringRef);
    uint64_t v21 = v19;
    uint64_t v2 = a1;
    AnyHashable.init<A>(_:)(&v88, v21, v20);
    *((void *)&v89 + 1) = &type metadata for Int;
    *(void *)&long long v88 = v83;
    specialized Dictionary.subscript.setter((uint64_t)&v88, (uint64_t)v90);
    uint64_t v13 = v84;
  }
  unint64_t v22 = *(void **)(v2 + *(int *)(v17 + 20));
  if (v22)
  {
    Swift::String v84 = (void *)v2;
    uint64_t v23 = (void *)NLModelConfigurationOptionsKeyLanguage;
    *(void *)&long long v88 = NLModelConfigurationOptionsKeyLanguage;
    uint64_t v83 = type metadata accessor for NLModelConfigurationOptionsKey(0);
    uint64_t v78 = lazy protocol witness table accessor for type NLModelConfigurationOptionsKey and conformance NLModelConfigurationOptionsKey(&lazy protocol witness table cache variable for type NLModelConfigurationOptionsKey and conformance NLModelConfigurationOptionsKey, type metadata accessor for NLModelConfigurationOptionsKey, (uint64_t)&protocol conformance descriptor for NLModelConfigurationOptionsKey);
    id v24 = v22;
    v23;
    AnyHashable.init<A>(_:)(&v88, v83, v78);
    *((void *)&v89 + 1) = type metadata accessor for NLLanguage(0);
    *(void *)&long long v88 = v24;
    uint64_t v2 = (uint64_t)v84;
    specialized Dictionary.subscript.setter((uint64_t)&v88, (uint64_t)v90);
  }
  uint64_t v25 = (uint64_t)v85;
  outlined init with copy of MLTrainingSessionParameters(v2, (uint64_t)v85, type metadata accessor for MLTextClassifier.ModelAlgorithmType);
  int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload(v25, v86);
  if (EnumCaseMultiPayload)
  {
    if (EnumCaseMultiPayload == 1)
    {
      uint64_t v86 = *(void *)v25;
      uint64_t v27 = (void *)NLModelConfigurationOptionsKeyRevision;
      char v28 = *(unsigned char *)(v25 + 8);
      *(void *)&long long v88 = NLModelConfigurationOptionsKeyRevision;
      uint64_t v29 = type metadata accessor for NLModelConfigurationOptionsKey(0);
      uint64_t v30 = lazy protocol witness table accessor for type NLModelConfigurationOptionsKey and conformance NLModelConfigurationOptionsKey(&lazy protocol witness table cache variable for type NLModelConfigurationOptionsKey and conformance NLModelConfigurationOptionsKey, type metadata accessor for NLModelConfigurationOptionsKey, (uint64_t)&protocol conformance descriptor for NLModelConfigurationOptionsKey);
      v27;
      uint64_t v85 = (void *)v29;
      AnyHashable.init<A>(_:)(&v88, v29, v30);
      if (v28)
      {
        long long v89 = 0;
        long long v88 = 0;
      }
      else
      {
        *((void *)&v89 + 1) = &type metadata for Int;
        *(void *)&long long v88 = v86;
      }
      specialized Dictionary.subscript.setter((uint64_t)&v88, (uint64_t)v90);
      uint64_t v40 = &NLModelConfigurationOptionsKeyUseCRF;
      goto LABEL_18;
    }
    uint64_t v34 = *(int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (MLTextClassifier.FeatureExtractorType, revision: Int?))
                 + 48);
    uint64_t v83 = *(void *)(v25 + v34);
    char v35 = *(unsigned char *)(v25 + v34 + 8);
    Swift::String v84 = v13;
    outlined init with take of MLTextClassifier.FeatureExtractorType(v25, (uint64_t)v13);
    uint64_t v36 = (void *)NLModelConfigurationOptionsKeyRevision;
    *(void *)&long long v88 = NLModelConfigurationOptionsKeyRevision;
    uint64_t v37 = type metadata accessor for NLModelConfigurationOptionsKey(0);
    uint64_t v38 = v36;
    uint64_t v39 = lazy protocol witness table accessor for type NLModelConfigurationOptionsKey and conformance NLModelConfigurationOptionsKey(&lazy protocol witness table cache variable for type NLModelConfigurationOptionsKey and conformance NLModelConfigurationOptionsKey, type metadata accessor for NLModelConfigurationOptionsKey, (uint64_t)&protocol conformance descriptor for NLModelConfigurationOptionsKey);
    uint64_t v86 = v39;
    uint64_t v85 = (void *)v37;
    v38;
    AnyHashable.init<A>(_:)(&v88, v37, v39);
    if (v35)
    {
      long long v89 = 0;
      long long v88 = 0;
    }
    else
    {
      *((void *)&v89 + 1) = &type metadata for Int;
      *(void *)&long long v88 = v83;
    }
    specialized Dictionary.subscript.setter((uint64_t)&v88, (uint64_t)v90);
    *(void *)&long long v88 = NLModelConfigurationOptionsKeyUseTransfer;
    NLModelConfigurationOptionsKeyUseTransfer;
    AnyHashable.init<A>(_:)(&v88, v85, v86);
    *((void *)&v89 + 1) = &type metadata for Bool;
    LOBYTE(v88) = 1;
    specialized Dictionary.subscript.setter((uint64_t)&v88, (uint64_t)v90);
    uint64_t v41 = (uint64_t)v84;
    uint64_t v42 = (uint64_t)v77;
    outlined init with copy of MLTrainingSessionParameters((uint64_t)v84, (uint64_t)v77, type metadata accessor for MLTextClassifier.FeatureExtractorType);
    uint64_t v43 = v81;
    switch(__swift_getEnumTagSinglePayload(v42, 4, v81))
    {
      case 0u:
        uint64_t v45 = v80;
        (*(void (**)(void *, uint64_t, uint64_t))(v82 + 32))(v80, v42, v43);
        *(void *)&long long v88 = NLModelConfigurationOptionsKeyEmbeddingType;
        NLModelConfigurationOptionsKeyEmbeddingType;
        AnyHashable.init<A>(_:)(&v88, v85, v86);
        uint64_t v46 = (void *)NLModelEmbeddingTypeCustom;
        *((void *)&v89 + 1) = type metadata accessor for NLModelEmbeddingType(0);
        *(void *)&long long v88 = v46;
        v46;
        specialized Dictionary.subscript.setter((uint64_t)&v88, (uint64_t)v90);
        uint64_t v47 = URL.pathExtension.getter();
        char v49 = v48;
        if (v47 == 0x6C65646F6D6C6DLL && v48 == 0xE700000000000000)
        {
          swift_bridgeObjectRelease(0);
        }
        else
        {
          char v55 = _stringCompareWithSmolCheck(_:_:expecting:)(v47, v48, 0x6C65646F6D6C6DLL, 0xE700000000000000, 0);
          swift_bridgeObjectRelease(v49);
          if ((v55 & 1) == 0)
          {
            *(void *)&long long v88 = NLModelConfigurationOptionsKeyEmbeddingURL;
            NLModelConfigurationOptionsKeyEmbeddingURL;
            AnyHashable.init<A>(_:)(&v88, v85, v86);
            uint64_t v72 = v45;
            uint64_t v73 = v81;
            *((void *)&v89 + 1) = v81;
            uint64_t v74 = __swift_allocate_boxed_opaque_existential_1(&v88);
            uint64_t v75 = v82;
            (*(void (**)(void *, void *, uint64_t))(v82 + 16))(v74, v72, v73);
            specialized Dictionary.subscript.setter((uint64_t)&v88, (uint64_t)v90);
            (*(void (**)(void *, uint64_t))(v75 + 8))(v72, v73);
            goto LABEL_36;
          }
        }
        uint64_t v56 = (NSURL *)objc_opt_self(MLModel);
        URL._bridgeToObjectiveC()(v56);
        uint64_t v58 = v57;
        v90[0] = 0;
        id v59 = [(NSURL *)v56 compileModelAtURL:v57 error:v90];
        id v60 = v59;

        id v61 = v90[0];
        if (!v60)
        {
          v53.super.isa = v87;
          id v67 = v90[0];
          swift_bridgeObjectRelease(v53.super.isa);
          _convertNSErrorToError(_:)(v61);

          swift_willThrow(v67, "compileModelAtURL:error:", v68, v69, v70, v71);
          (*(void (**)(void *, uint64_t))(v82 + 8))(v80, v81);
          outlined destroy of MLTextClassifier.FeatureExtractorType((uint64_t)v84);
          return v53.super.isa;
        }
        uint64_t v62 = v79;
        static URL._unconditionallyBridgeFromObjectiveC(_:)(v60);
        v61;

        *(void *)&long long v88 = NLModelConfigurationOptionsKeyEmbeddingURL;
        NLModelConfigurationOptionsKeyEmbeddingURL;
        AnyHashable.init<A>(_:)(&v88, v85, v86);
        uint64_t v63 = v81;
        *((void *)&v89 + 1) = v81;
        uint64_t v64 = __swift_allocate_boxed_opaque_existential_1(&v88);
        uint64_t v65 = v82;
        (*(void (**)(void *, void *, uint64_t))(v82 + 16))(v64, v62, v63);
        specialized Dictionary.subscript.setter((uint64_t)&v88, (uint64_t)v90);
        uint64_t v66 = *(void (**)(void *, uint64_t))(v65 + 8);
        v66(v79, v63);
        v66(v80, v63);
LABEL_36:
        uint64_t v51 = (uint64_t)v84;
        goto LABEL_28;
      case 1u:
        *(void *)&long long v88 = NLModelConfigurationOptionsKeyEmbeddingType;
        NLModelConfigurationOptionsKeyEmbeddingType;
        AnyHashable.init<A>(_:)(&v88, v85, v86);
        uint64_t v44 = (void **)&NLModelEmbeddingTypeStatic;
        goto LABEL_27;
      case 2u:
      case 3u:
        *(void *)&long long v88 = NLModelConfigurationOptionsKeyEmbeddingType;
        NLModelConfigurationOptionsKeyEmbeddingType;
        AnyHashable.init<A>(_:)(&v88, v85, v86);
        uint64_t v44 = (void **)&NLModelEmbeddingTypeDynamic;
        goto LABEL_27;
      case 4u:
        *(void *)&long long v88 = NLModelConfigurationOptionsKeyEmbeddingType;
        NLModelConfigurationOptionsKeyEmbeddingType;
        AnyHashable.init<A>(_:)(&v88, v85, v86);
        uint64_t v44 = (void **)&NLModelEmbeddingTypeContextual;
LABEL_27:
        uint64_t v50 = *v44;
        *((void *)&v89 + 1) = type metadata accessor for NLModelEmbeddingType(0);
        *(void *)&long long v88 = v50;
        v50;
        specialized Dictionary.subscript.setter((uint64_t)&v88, (uint64_t)v90);
        uint64_t v51 = v41;
LABEL_28:
        outlined destroy of MLTextClassifier.FeatureExtractorType(v51);
        goto LABEL_29;
    }
  }
  uint64_t v86 = *(void *)v25;
  uint64_t v31 = (void *)NLModelConfigurationOptionsKeyRevision;
  char v32 = *(unsigned char *)(v25 + 8);
  *(void *)&long long v88 = NLModelConfigurationOptionsKeyRevision;
  uint64_t v33 = type metadata accessor for NLModelConfigurationOptionsKey(0);
  uint64_t v30 = lazy protocol witness table accessor for type NLModelConfigurationOptionsKey and conformance NLModelConfigurationOptionsKey(&lazy protocol witness table cache variable for type NLModelConfigurationOptionsKey and conformance NLModelConfigurationOptionsKey, type metadata accessor for NLModelConfigurationOptionsKey, (uint64_t)&protocol conformance descriptor for NLModelConfigurationOptionsKey);
  v31;
  uint64_t v85 = (void *)v33;
  AnyHashable.init<A>(_:)(&v88, v33, v30);
  if (v32)
  {
    long long v89 = 0;
    long long v88 = 0;
  }
  else
  {
    *((void *)&v89 + 1) = &type metadata for Int;
    *(void *)&long long v88 = v86;
  }
  specialized Dictionary.subscript.setter((uint64_t)&v88, (uint64_t)v90);
  uint64_t v40 = (id *)&NLModelConfigurationOptionsKeyUseMaxEnt;
LABEL_18:
  *(void *)&long long v88 = *v40;
  (id)v88;
  AnyHashable.init<A>(_:)(&v88, v85, v30);
  *((void *)&v89 + 1) = &type metadata for Bool;
  LOBYTE(v88) = 1;
  specialized Dictionary.subscript.setter((uint64_t)&v88, (uint64_t)v90);
LABEL_29:
  char v52 = (char)v87;
  v53.super.isa = Dictionary._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease(v52);
  return v53.super.isa;
}

uint64_t outlined destroy of MLTextClassifier.FeatureExtractorType(uint64_t a1)
{
  uint64_t v1 = type metadata accessor for MLTextClassifier.FeatureExtractorType(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v1 - 8) + 8))(a1, v1);
  return a1;
}

uint64_t lazy protocol witness table accessor for type NLModelConfigurationOptionsKey and conformance NLModelConfigurationOptionsKey(uint64_t *a1, uint64_t (*a2)(uint64_t), uint64_t a3)
{
  uint64_t result = *a1;
  if (!*a1)
  {
    uint64_t v5 = a2(255);
    uint64_t result = swift_getWitnessTable(a3, v5);
    *a1 = result;
  }
  return result;
}

void AnyTreeClassifierModel.export(internalMetadata:)()
{
  uint64_t v120 = v0;
  uint64_t v131 = type metadata accessor for FeatureType(0);
  uint64_t v130 = *(void *)(v131 - 8);
  int64_t v3 = *(void *)(v130 + 64);
  uint64_t v4 = alloca(v3);
  uint64_t v5 = alloca(v3);
  v145 = v116;
  uint64_t v132 = type metadata accessor for TreeEnsembleClassifierConfiguration.ClassLabels(0);
  uint64_t v122 = *(void *)(v132 - 8);
  int64_t v6 = *(void *)(v122 + 64);
  id v7 = alloca(v6);
  int64_t v8 = alloca(v6);
  Swift::String v121 = v116;
  uint64_t v136 = type metadata accessor for ModelKind(0);
  uint64_t v129 = *(void *)(v136 - 8);
  int64_t v9 = *(void *)(v129 + 64);
  char v10 = alloca(v9);
  id v11 = alloca(v9);
  uint64_t v126 = v116;
  char v12 = alloca(v9);
  uint64_t v13 = alloca(v9);
  uint64_t v123 = v116;
  uint64_t v137 = type metadata accessor for TreeEnsembleClassifierConfiguration(0);
  uint64_t v138 = *(void *)(v137 - 8);
  int64_t v14 = *(void *)(v138 + 64);
  uint64_t v15 = alloca(v14);
  uint64_t v16 = alloca(v14);
  v139 = v116;
  int64_t v17 = *(void *)(*(void *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Model?)
                              - 8)
                  + 64);
  uint64_t v18 = alloca(v17);
  uint64_t v19 = alloca(v17);
  uint64_t v124 = v116;
  uint64_t v127 = type metadata accessor for Model(0);
  uint64_t v128 = *(void *)(v127 - 8);
  int64_t v20 = *(void *)(v128 + 64);
  uint64_t v21 = alloca(v20);
  unint64_t v22 = alloca(v20);
  uint64_t v140 = v116;
  uint64_t v23 = alloca(v20);
  id v24 = alloca(v20);
  v150 = v116;
  uint64_t v135 = type metadata accessor for URL.DirectoryHint(0);
  uint64_t v143 = *(void *)(v135 - 8);
  int64_t v25 = *(void *)(v143 + 64);
  double v26 = alloca(v25);
  uint64_t v27 = alloca(v25);
  Swift::String v144 = v116;
  uint64_t v149 = type metadata accessor for UUID(0);
  uint64_t v117 = *(void *)(v149 - 8);
  int64_t v28 = *(void *)(v117 + 64);
  uint64_t v29 = alloca(v28);
  uint64_t v30 = alloca(v28);
  Swift::String v118 = v116;
  uint64_t v141 = type metadata accessor for URL(0);
  uint64_t v142 = *(void *)(v141 - 8);
  int64_t v31 = *(void *)(v142 + 64);
  char v32 = alloca(v31);
  uint64_t v33 = alloca(v31);
  Swift::String v119 = v116;
  uint64_t v34 = alloca(v31);
  char v35 = alloca(v31);
  v153 = v116;
  uint64_t v36 = alloca(v31);
  uint64_t v37 = alloca(v31);
  uint64_t v148 = v116;
  uint64_t v38 = alloca(v31);
  uint64_t v39 = alloca(v31);
  uint64_t v40 = v2[2];
  if (!v40)
  {
    _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, 0xD00000000000001CLL, "ressorModel.swift" + 0x8000000000000000, "CreateML/AnyTreeClassifierModel+CoreML.swift", 44, 2, 11, 0);
    goto LABEL_16;
  }
  uint64_t v41 = specialized FeatureVectorizer.Transformer.exportEncoders()(v2[2], v2[3], v2[4]);
  if (v1) {
    return;
  }
  uint64_t v125 = v40;
  uint64_t v151 = v41;
  uint64_t v146 = v116;
  v147 = v2;
  uint64_t v42 = objc_opt_self(NSFileManager);
  id v43 = [v42 defaultManager];
  id v44 = v43;
  NSFileManager.createTemporaryModelDirectory()();
  if (v45)
  {
    swift_bridgeObjectRelease(v151);

    return;
  }

  id v46 = [v42 defaultManager];
  id v47 = v46;
  NSFileManager.temporaryModelDirectory.getter();

  uint64_t v48 = v118;
  UUID.init()();
  uint64_t v49 = UUID.uuidString.getter();
  uint64_t v152 = 0;
  uint64_t v50 = v49;
  uint64_t v52 = v51;
  (*(void (**)(char *, uint64_t))(v117 + 8))(v48, v149);
  uint64_t v133 = v50;
  uint64_t v134 = v52;
  NSDictionary v53 = v144;
  uint64_t v54 = v135;
  uint64_t v55 = v143;
  (*(void (**)(char *, void, uint64_t))(v143 + 104))(v144, enum case for URL.DirectoryHint.inferFromPath(_:), v135);
  uint64_t v56 = lazy protocol witness table accessor for type String and conformance String();
  uint64_t v57 = v153;
  URL.appending<A>(component:directoryHint:)(&v133, v53, &type metadata for String, v56);
  (*(void (**)(char *, uint64_t))(v55 + 8))(v53, v54);
  swift_bridgeObjectRelease(v134);
  uint64_t v58 = *(void (**)(char *, uint64_t))(v142 + 8);
  uint64_t v59 = v141;
  v58(v57, v141);
  id v60 = v146;
  id v61 = v148;
  URL.appendingPathExtension(_:)(0x6C65646F6D6C6D2ELL, 0xE800000000000000);
  v58(v61, v59);
  uint64_t v62 = type metadata accessor for AnyTreeClassifierModel(0);
  uint64_t v63 = v152;
  BaseTreeClassifierModel.export(to:)(v60);
  if (v63)
  {
    v58(v146, v141);
    swift_bridgeObjectRelease(v151);
    return;
  }
  v153 = (char *)v62;
  uint64_t v148 = (char *)v58;
  uint64_t v64 = v119;
  (*(void (**)(char *, char *, uint64_t))(v142 + 16))(v119, v146, v141);
  Model.init(contentsOf:)(v64);
  uint64_t v152 = 0;
  uint64_t v65 = (uint64_t)v124;
  specialized BidirectionalCollection.last.getter(v151);
  uint64_t v66 = v127;
  if (__swift_getEnumTagSinglePayload(v65, 1, v127) == 1) {
    BUG();
  }
  uint64_t v67 = v65;
  uint64_t v68 = Model.outputs.getter(v65, 1);
  uint64_t v142 = *(void *)(v128 + 8);
  ((void (*)(uint64_t, uint64_t))v142)(v67, v66);
  Model.inputs.setter(v68);
  uint64_t v69 = (char *)*v147;
  uint64_t v70 = v147[1];
  swift_bridgeObjectRetain(v70);
  Model.predictedFeatureName.setter(v69, v70);
  Swift::String v144 = v69;
  uint64_t v133 = (uint64_t)v69;
  uint64_t v134 = v70;
  uint64_t v143 = v70;
  swift_bridgeObjectRetain(v70);
  v71._countAndFlagsBits = 0x6C696261626F7250;
  v71._object = (void *)0xEB00000000797469;
  String.append(_:)(v71);
  Model.predictedProbabilitiesName.setter(v133, v134);
  uint64_t v72 = Dictionary.init(dictionaryLiteral:)(_swiftEmptyArrayStorage, &type metadata for String, &type metadata for String, &protocol witness table for String);
  Model.metadata.setter(v72);
  uint64_t v73 = (uint64_t)v123;
  Model.kind.getter();
  uint64_t v74 = v73;
  v71._countAndFlagsBits = v73;
  uint64_t v75 = v136;
  uint64_t v76 = v129;
  LODWORD(v135) = (*(uint64_t (**)(uint64_t, uint64_t))(v129 + 88))(v71._countAndFlagsBits, v136);
  if (v135 != enum case for ModelKind.treeEnsembleClassifier(_:))
  {
    (*(void (**)(uint64_t, uint64_t))(v76 + 8))(v74, v75);
    _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, 0xD00000000000001BLL, "ClassifierModel+CoreML.swift" + 0x8000000000000000, "CreateML/AnyTreeClassifierModel+CoreML.swift", 44, 2, 32, 0);
LABEL_16:
    BUG();
  }
  (*(void (**)(uint64_t, uint64_t))(v76 + 96))(v74, v75);
  (*(void (**)(char *, uint64_t, uint64_t))(v138 + 32))(v139, v74, v137);
  uint64_t v77 = *((int *)v153 + 7);
  uint64_t v78 = *(uint64_t *)((char *)v147 + v77);
  BOOL v79 = *((unsigned char *)v147 + v77 + 8) == 0;
  char v80 = v121;
  *(void *)Swift::String v121 = v78;
  uint64_t v81 = *(void (**)(char *, void, uint64_t))(v122 + 104);
  if (v79)
  {
    v81(v80, enum case for TreeEnsembleClassifierConfiguration.ClassLabels.int(_:), v132);
    swift_bridgeObjectRetain(v78);
    TreeEnsembleClassifierConfiguration.classLabels.setter(v80);
    uint64_t v92 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<FeatureDescription>);
    uint64_t v93 = *(void *)(type metadata accessor for FeatureDescription(0) - 8);
    uint64_t v149 = *(void *)(v93 + 72);
    uint64_t v94 = swift_allocObject(v92, ((*(unsigned __int8 *)(v93 + 80) + 32) & ~*(unsigned __int8 *)(v93 + 80)) + 2 * v149, *(unsigned __int8 *)(v93 + 80) | 7);
    *(void *)(v94 + 16) = 2;
    *(void *)(v94 + 24) = 4;
    v153 = (char *)v94;
    uint64_t v95 = v143;
    swift_bridgeObjectRetain(v143);
    uint64_t v96 = v145;
    FeatureType.IntParameters.init(optional:)(0);
    (*(void (**)(char *, void, uint64_t))(v130 + 104))(v96, enum case for FeatureType.int(_:), v131);
    uint64_t v97 = v144;
    FeatureDescription.init(name:type:description:)(v144, v95, v96, 0, 0xE000000000000000);
    uint64_t v133 = (uint64_t)v97;
    uint64_t v134 = v95;
    swift_bridgeObjectRetain(v95);
    v98._countAndFlagsBits = 0x6C696261626F7250;
    v98._object = (void *)0xEB00000000797469;
    String.append(_:)(v98);
    uint64_t v89 = v133;
    uint64_t v90 = v134;
    uint64_t v91 = v145;
    static FeatureType.dictionaryWithIntKeys(optional:)(0);
  }
  else
  {
    v81(v80, enum case for TreeEnsembleClassifierConfiguration.ClassLabels.string(_:), v132);
    swift_bridgeObjectRetain(v78);
    TreeEnsembleClassifierConfiguration.classLabels.setter(v80);
    uint64_t v82 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<FeatureDescription>);
    uint64_t v83 = *(void *)(type metadata accessor for FeatureDescription(0) - 8);
    uint64_t v149 = *(void *)(v83 + 72);
    uint64_t v84 = swift_allocObject(v82, ((*(unsigned __int8 *)(v83 + 80) + 32) & ~*(unsigned __int8 *)(v83 + 80)) + 2 * v149, *(unsigned __int8 *)(v83 + 80) | 7);
    *(void *)(v84 + 16) = 2;
    *(void *)(v84 + 24) = 4;
    v153 = (char *)v84;
    uint64_t v85 = v143;
    swift_bridgeObjectRetain(v143);
    uint64_t v86 = v145;
    FeatureType.StringParameters.init(optional:)(0);
    (*(void (**)(char *, void, uint64_t))(v130 + 104))(v86, enum case for FeatureType.string(_:), v131);
    uint64_t v87 = v144;
    FeatureDescription.init(name:type:description:)(v144, v85, v86, 0, 0xE000000000000000);
    uint64_t v133 = (uint64_t)v87;
    uint64_t v134 = v85;
    swift_bridgeObjectRetain(v85);
    v88._countAndFlagsBits = 0x6C696261626F7250;
    v88._object = (void *)0xEB00000000797469;
    String.append(_:)(v88);
    uint64_t v89 = v133;
    uint64_t v90 = v134;
    uint64_t v91 = v145;
    static FeatureType.dictionaryWithStringKeys(optional:)(0);
  }
  FeatureDescription.init(name:type:description:)(v89, v90, v91, 0, 0xE000000000000000);
  Model.outputs.setter(v153);
  uint64_t v99 = v126;
  (*(void (**)(char *, char *, uint64_t))(v138 + 16))(v126, v139, v137);
  v153 = *(char **)(v129 + 104);
  ((void (*)(char *, void, uint64_t))v153)(v99, v135, v136);
  Model.kind.setter(v99);
  Model.init()();
  Model.specificationVersion.setter(1);
  uint64_t v100 = v125;
  swift_bridgeObjectRetain(v125);
  uint64_t v101 = v152;
  ML16ColumnDescriptorVG_20MLModelSpecification18FeatureDescriptionVs5NeverOTg503_s8d50ML18TreeRegressorModelV6export16internalMetadata20h33Specification0E0VSDyS2SGz_tKFAF18jk5VAA16fG54Vcfu0_33_3fd57c9cf8bb5b882e179ce0f1f8c55eAmKTf3nnnpk_nTf1cn_n = _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSay8CreateML16ColumnDescriptorVG_20MLModelSpecification18FeatureDescriptionVs5NeverOTg503_s8d50ML18TreeRegressorModelV6export16internalMetadata20h33Specification0E0VSDyS2SGz_tKFAF18jk5VAA16fG54Vcfu0_33_3fd57c9cf8bb5b882e179ce0f1f8c55eAmKTf3nnnpk_nTf1cn_n(v100);
  uint64_t v152 = v101;
  swift_bridgeObjectRelease(v100);
  Model.inputs.setter(ML16ColumnDescriptorVG_20MLModelSpecification18FeatureDescriptionVs5NeverOTg503_s8d50ML18TreeRegressorModelV6export16internalMetadata20h33Specification0E0VSDyS2SGz_tKFAF18jk5VAA16fG54Vcfu0_33_3fd57c9cf8bb5b882e179ce0f1f8c55eAmKTf3nnnpk_nTf1cn_n);
  uint64_t v103 = Model.outputs.getter(ML16ColumnDescriptorVG_20MLModelSpecification18FeatureDescriptionVs5NeverOTg503_s8d50ML18TreeRegressorModelV6export16internalMetadata20h33Specification0E0VSDyS2SGz_tKFAF18jk5VAA16fG54Vcfu0_33_3fd57c9cf8bb5b882e179ce0f1f8c55eAmKTf3nnnpk_nTf1cn_n, v116);
  Model.outputs.setter(v103);
  uint64_t v104 = *v147;
  uint64_t v105 = v147[1];
  swift_bridgeObjectRetain(v105);
  Model.predictedFeatureName.setter(v104, v105);
  uint64_t v133 = v104;
  uint64_t v134 = v105;
  swift_bridgeObjectRetain(v105);
  v106._countAndFlagsBits = 0x6C696261626F7250;
  v106._object = (void *)0xEB00000000797469;
  String.append(_:)(v106);
  Model.predictedProbabilitiesName.setter(v133, v134);
  uint64_t v107 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Model>);
  uint64_t v108 = v128;
  uint64_t v109 = *(unsigned __int8 *)(v128 + 80);
  uint64_t v110 = ((int)v109 + 32) & ~*(unsigned __int8 *)(v128 + 80);
  uint64_t v111 = swift_allocObject(v107, v110 + *(void *)(v128 + 72), v109 | 7);
  *(void *)(v111 + 16) = 1;
  *(void *)(v111 + 24) = 2;
  v106._countAndFlagsBits = v111 + v110;
  uint64_t v112 = v127;
  (*(void (**)(uint64_t, char *, uint64_t))(v108 + 16))(v106._countAndFlagsBits, v150, v127);
  uint64_t v133 = v151;
  specialized Array.append<A>(contentsOf:)(v111);
  uint64_t v113 = (uint64_t)v126;
  PipelineClassifierConfiguration.init(models:names:)(v133, _swiftEmptyArrayStorage);
  ((void (*)(uint64_t, void, uint64_t))v153)(v113, enum case for ModelKind.pipelineClassifier(_:), v136);
  v106._countAndFlagsBits = v113;
  uint64_t v114 = v140;
  Model.kind.setter(v106._countAndFlagsBits);
  (*(void (**)(char *, uint64_t))(v138 + 8))(v139, v137);
  ((void (*)(char *, uint64_t))v142)(v150, v112);
  (*(void (**)(uint64_t, char *, uint64_t))(v108 + 32))(v120, v114, v112);
  uint64_t v115 = v146;
  $defer #1 () in AnyTreeClassifierModel.export(internalMetadata:)();
  ((void (*)(char *, uint64_t))v148)(v115, v141);
}

NSURL *$defer #1 () in AnyTreeClassifierModel.export(internalMetadata:)()
{
  uint64_t v0 = objc_opt_self(NSFileManager);
  id v1 = [v0 defaultManager];
  uint64_t v2 = (NSURL *)v1;
  URL._bridgeToObjectiveC()(v2);
  uint64_t v4 = v3;
  id v10 = 0;
  unsigned __int8 v5 = [(NSURL *)v2 removeItemAtURL:v3 error:&v10];

  id v6 = v10;
  if (v5) {
    return (NSURL *)v10;
  }
  id v8 = v10;
  uint64_t v9 = _convertNSErrorToError(_:)(v6);

  swift_willThrow();
  swift_errorRelease(v9);
  return __stack_chk_guard;
}

uint64_t outlined copy of ColumnDescriptor.ColumnTypeDescriptor(uint64_t a1, char a2)
{
  if ((a2 & 0xFE) == 4) {
    return swift_bridgeObjectRetain(a1);
  }
  return result;
}

void MLBoostedTreeRegressor.predictions(from:)(uint64_t a1)
{
  int64_t v3 = v2;
  uint64_t v14 = v1;
  uint64_t v5 = type metadata accessor for DataFrame(0);
  uint64_t v13 = *(void *)(v5 - 8);
  int64_t v6 = *(void *)(v13 + 64);
  id v7 = alloca(v6);
  id v8 = alloca(v6);
  uint64_t v15 = &v12;
  uint64_t v9 = type metadata accessor for MLBoostedTreeRegressor(0);
  DataFrame.validateContainsColumns(_:context:)(*(Swift::OpaquePointer *)((char *)v3 + *(int *)(v9 + 28)), (Swift::String)__PAIR128__(0xE700000000000000, 0x65727574616546));
  if (!v10)
  {
    TreeRegressorModel.applied(to:eventHandler:)(a1, 0, 0);
    id v11 = v15;
    DataFrame.subscript.getter(*v3, v3[1]);
    (*(void (**)(uint64_t *, uint64_t))(v13 + 8))(v11, v5);
  }
}

uint64_t type metadata accessor for MLBoostedTreeRegressor(uint64_t a1)
{
  uint64_t result = type metadata singleton initialization cache for MLBoostedTreeRegressor;
  if (!type metadata singleton initialization cache for MLBoostedTreeRegressor) {
    return swift_getSingletonMetadata(a1, &nominal type descriptor for MLBoostedTreeRegressor);
  }
  return result;
}

uint64_t MLBoostedTreeRegressor.predictions(from:)(uint64_t a1, __m128 a2)
{
  uint64_t v15 = v3;
  uint64_t v16 = v2;
  uint64_t v17 = type metadata accessor for DataFrame(0);
  uint64_t v18 = *(void *)(v17 - 8);
  int64_t v4 = *(void *)(v18 + 64);
  uint64_t v5 = alloca(v4);
  int64_t v6 = alloca(v4);
  int64_t v7 = *(void *)(*(void *)(type metadata accessor for AnyColumn(0) - 8) + 64);
  id v8 = alloca(v7);
  uint64_t v9 = alloca(v7);
  char v10 = *(unsigned char *)(a1 + 8);
  uint64_t v13 = *(void *)a1;
  char v14 = v10;
  outlined copy of Result<_DataTable, Error>(v13, v10);
  DataFrame.init(_:)((uint64_t)&v13);
  uint64_t v11 = v15;
  MLBoostedTreeRegressor.predictions(from:)((uint64_t)&v13);
  if (v11) {
    return (*(uint64_t (**)(uint64_t *, uint64_t))(v18 + 8))(&v13, v17);
  }
  *(double *)a2.i64 = (*(double (**)(uint64_t *, uint64_t))(v18 + 8))(&v13, v17);
  return MLUntypedColumn.init(_:convertArraysToShapedArrays:)((uint64_t)&v13, 1, a2);
}

void MLBoostedTreeRegressor.evaluation(on:)(uint64_t a1)
{
  uint64_t v3 = v2;
  uint64_t v5 = v1;
  uint64_t v6 = type metadata accessor for MLBoostedTreeRegressor(0);
  v7._rawValue = *(void **)(v3 + *(int *)(v6 + 28));
  uint64_t v15 = a1;
  DataFrame.validateContainsColumns(_:context:)(v7, (Swift::String)__PAIR128__(0xE700000000000000, 0x65727574616546));
  if (v8) {
    goto LABEL_4;
  }
  uint64_t v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<String>);
  uint64_t inited = swift_initStackObject(v9, v14);
  uint64_t v16 = v3;
  v11._rawValue = (void *)inited;
  *(void *)(inited + 16) = 1;
  *(void *)(inited + 24) = 2;
  uint64_t v12 = *(int *)(v6 + 24);
  uint64_t v13 = *(void *)(v16 + v12 + 8);
  *((void *)v11._rawValue + 4) = *(void *)(v16 + v12);
  *((void *)v11._rawValue + 5) = v13;
  swift_bridgeObjectRetain(v13);
  DataFrame.validateContainsColumns(_:context:)(v11, (Swift::String)__PAIR128__(0xE500000000000000, 0x6C6562614CLL));
  swift_setDeallocating(v11._rawValue);
  specialized _ContiguousArrayStorage.__deallocating_deinit();
  if (v8)
  {
LABEL_4:
    *(void *)uint64_t v5 = v8;
    *(void *)(v5 + 8) = 0;
    *(unsigned char *)(v5 + 16) = 1;
  }
  else
  {
    TreeRegressorModel.computeMetrics(on:)(v15);
  }
}

uint64_t MLBoostedTreeRegressor.evaluation(on:)(uint64_t a1)
{
  uint64_t v11 = v1;
  uint64_t v2 = type metadata accessor for DataFrame(0);
  uint64_t v3 = *(void *)(v2 - 8);
  int64_t v4 = *(void *)(v3 + 64);
  uint64_t v5 = alloca(v4);
  uint64_t v6 = alloca(v4);
  char v7 = *(unsigned char *)(a1 + 8);
  uint64_t v9 = *(void *)a1;
  char v10 = v7;
  outlined copy of Result<_DataTable, Error>(v9, v7);
  DataFrame.init(_:)((uint64_t)&v9);
  MLBoostedTreeRegressor.evaluation(on:)((uint64_t)&v9);
  return (*(uint64_t (**)(uint64_t *, uint64_t))(v3 + 8))(&v9, v2);
}

uint64_t MLBoostedTreeRegressor.write(to:metadata:)(uint64_t a1, uint64_t *a2)
{
  uint64_t v62 = v2;
  uint64_t v64 = v3;
  uint64_t v63 = a1;
  int64_t v4 = *(void *)(*(void *)(type metadata accessor for TreeRegressorModel(0) - 8) + 64);
  uint64_t v5 = alloca(v4);
  uint64_t v6 = alloca(v4);
  id v46 = &v41;
  uint64_t v55 = type metadata accessor for Model(0);
  uint64_t v7 = *(void *)(v55 - 8);
  int64_t v8 = *(void *)(v7 + 64);
  uint64_t v9 = alloca(v8);
  char v10 = alloca(v8);
  id v43 = &v41;
  uint64_t v11 = type metadata accessor for URL(0);
  uint64_t v12 = *(void *)(v11 - 8);
  int64_t v13 = *(void *)(v12 + 64);
  char v14 = alloca(v13);
  uint64_t v15 = alloca(v13);
  uint64_t v48 = *a2;
  uint64_t v44 = a2[1];
  unint64_t v49 = a2[2];
  uint64_t v50 = (char *)a2[3];
  uint64_t v51 = a2[4];
  uint64_t v52 = a2[5];
  uint64_t v47 = a2[6];
  unint64_t v53 = a2[7];
  uint64_t v54 = a2[8];
  uint64_t v16 = v62;
  uint64_t result = static _ValidationUtilities.validateWriteLocation(atURL:defaultName:fileExtension:)(v63, 0xD000000000000014, (unint64_t)("Expected a tree classifier." + 0x8000000000000000), 0x6C65646F6D6C6DLL, (void *)0xE700000000000000);
  if (!v16)
  {
    uint64_t v45 = 0;
    uint64_t v59 = v7;
    uint64_t v58 = &v41;
    uint64_t v57 = v11;
    uint64_t v56 = v12;
    outlined init with copy of MLTrainingSessionParameters((uint64_t)v64, (uint64_t)v46, type metadata accessor for TreeRegressorModel);
    uint64_t v18 = v44;
    if (v44)
    {
      uint64_t v19 = v48;
      uint64_t v20 = v48;
      uint64_t v62 = v44;
      uint64_t v21 = v49;
      unint64_t v22 = v49;
      uint64_t v23 = (uint64_t)v50;
      uint64_t v64 = v50;
      uint64_t v24 = v51;
      uint64_t v25 = v51;
      uint64_t v26 = v52;
      uint64_t v60 = v52;
      uint64_t v27 = v47;
      uint64_t v28 = v47;
      uint64_t v29 = v53;
      unint64_t v61 = v53;
      uint64_t v30 = v54;
      uint64_t v63 = v54;
    }
    else
    {
      int64_t v31 = NSFullUserName();
      char v32 = v31;
      uint64_t v20 = static String._unconditionallyBridgeFromObjectiveC(_:)(v32);
      uint64_t v62 = v33;

      uint64_t v64 = "RandomForestRegressor" + 0x8000000000000000;
      unint64_t v22 = 0xD000000000000033;
      unint64_t v61 = 0xE100000000000000;
      uint64_t v28 = 49;
      uint64_t v25 = 0;
      uint64_t v60 = 0;
      uint64_t v63 = 0;
      uint64_t v27 = v47;
      uint64_t v19 = v48;
      uint64_t v21 = v49;
      uint64_t v23 = (uint64_t)v50;
      uint64_t v24 = v51;
      uint64_t v26 = v52;
      uint64_t v29 = v53;
      uint64_t v30 = v54;
    }
    v42[0] = v20;
    v42[1] = v62;
    v42[2] = v22;
    v42[3] = v64;
    v42[4] = v25;
    v42[5] = v60;
    v42[6] = v28;
    v42[7] = v61;
    v42[8] = v63;
    outlined copy of MLModelMetadata?(v19, v18, v21, v23, v24, v26, v27, v29, v30);
    uint64_t v34 = v43;
    uint64_t v35 = (uint64_t)v46;
    uint64_t v36 = v45;
    specialized CoreMLExportable.export(metadata:)((uint64_t)v42, (uint64_t (*)(void))TreeRegressorModel.export(internalMetadata:));
    swift_bridgeObjectRelease(v61);
    swift_bridgeObjectRelease((_BYTE)v64);
    swift_bridgeObjectRelease(v62);
    swift_bridgeObjectRelease(v60);
    swift_bridgeObjectRelease(v63);
    outlined destroy of MLActivityClassifier.ModelParameters(v35, type metadata accessor for TreeRegressorModel);
    if (v36)
    {
      uint64_t v37 = v56;
      uint64_t v38 = v58;
    }
    else
    {
      uint64_t v39 = v58;
      Model.write(to:)(v58);
      uint64_t v40 = v34;
      uint64_t v37 = v56;
      (*(void (**)(uint64_t *, uint64_t))(v59 + 8))(v40, v55);
      uint64_t v38 = v39;
    }
    return (*(uint64_t (**)(uint64_t *, uint64_t))(v37 + 8))(v38, v57);
  }
  return result;
}

uint64_t MLBoostedTreeRegressor.write(toFile:metadata:)(uint64_t a1, uint64_t a2, long long *a3)
{
  uint64_t v23 = v3;
  uint64_t v25 = a2;
  uint64_t v24 = a1;
  uint64_t v26 = type metadata accessor for URL.DirectoryHint(0);
  uint64_t v27 = *(void *)(v26 - 8);
  int64_t v5 = *(void *)(v27 + 64);
  uint64_t v6 = alloca(v5);
  uint64_t v7 = alloca(v5);
  int64_t v8 = *(void *)(*(void *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for URL?)
                             - 8)
                 + 64);
  uint64_t v9 = alloca(v8);
  char v10 = alloca(v8);
  uint64_t v11 = type metadata accessor for URL(0);
  uint64_t v29 = *(void *)(v11 - 8);
  int64_t v12 = *(void *)(v29 + 64);
  int64_t v13 = alloca(v12);
  char v14 = alloca(v12);
  uint64_t v28 = *((void *)a3 + 8);
  long long v19 = *a3;
  long long v20 = a3[1];
  long long v21 = a3[2];
  long long v22 = a3[3];
  uint64_t v30 = v11;
  __swift_storeEnumTagSinglePayload((uint64_t)v17, 1, 1, v11);
  (*(void (**)(_OWORD *, void, uint64_t))(v27 + 104))(v17, enum case for URL.DirectoryHint.inferFromPath(_:), v26);
  uint64_t v15 = v25;
  swift_bridgeObjectRetain(v25);
  URL.init(filePath:directoryHint:relativeTo:)(v24, v15, v17, v17);
  v17[0] = v19;
  v17[1] = v20;
  long long v17[2] = v21;
  v17[3] = v22;
  uint64_t v18 = v28;
  MLBoostedTreeRegressor.write(to:metadata:)((uint64_t)v17, (uint64_t *)v17);
  return (*(uint64_t (**)(_OWORD *, uint64_t))(v29 + 8))(v17, v30);
}

id MLBoostedTreeRegressor.model.getter()
{
  uint64_t v1 = type metadata accessor for MLBoostedTreeRegressor(0);
  return *(id *)(v0 + *(int *)(v1 + 20));
}

unint64_t MLBoostedTreeRegressor.description.getter()
{
  return MLBoostedTreeRegressor.debugDescription.getter();
}

unint64_t MLBoostedTreeRegressor.debugDescription.getter()
{
  uint64_t v1 = type metadata accessor for MLBoostedTreeRegressor(0);
  uint64_t v14 = MLBoostedTreeRegressor.ModelParameters.description.getter(0);
  uint64_t v3 = v2;
  unint64_t v16 = MLRegressorMetrics.description.getter();
  int64_t v5 = v4;
  char v13 = *(unsigned char *)(v0 + *(int *)(v1 + 40) + 16);
  v12._countAndFlagsBits = MLRegressorMetrics.description.getter();
  v12._unsigned __int8 object = v6;
  v7._countAndFlagsBits = v14;
  char v15 = (char)v3;
  v7._unsigned __int8 object = v3;
  String.append(_:)(v7);
  v7._countAndFlagsBits = v16;
  v7._unsigned __int8 object = v5;
  String.append(_:)(v7);
  v7._countAndFlagsBits = 0xD00000000000001ELL;
  v7._unsigned __int8 object = "ActivityClassifier\n\nParameters\n" + 0x8000000000000000;
  String.append(_:)(v7);
  swift_bridgeObjectRelease(("ActivityClassifier\n\nParameters\n" + 0x8000000000000000));
  if (v13)
  {
    char v8 = (char)v5;
    unsigned __int8 object = v12._object;
  }
  else
  {
    String.append(_:)(v12);
    v10._countAndFlagsBits = 0xD000000000000020;
    unsigned __int8 object = ("\nPerformance on Training Data\n" + 0x8000000000000000);
    v10._unsigned __int8 object = "\nPerformance on Training Data\n" + 0x8000000000000000;
    String.append(_:)(v10);
    swift_bridgeObjectRelease((_BYTE)v5);
    char v8 = (char)v12._object;
  }
  swift_bridgeObjectRelease(v8);
  swift_bridgeObjectRelease(object);
  swift_bridgeObjectRelease(v15);
  return 0xD000000000000021;
}

NSAttributedString MLBoostedTreeRegressor.playgroundDescription.getter()
{
  uint64_t v1 = v0;
  uint64_t v2 = type metadata accessor for NSAttributedString();
  v3._countAndFlagsBits = MLBoostedTreeRegressor.debugDescription.getter();
  v3._unsigned __int8 object = v4;
  result.super.isa = NSAttributedString.__allocating_init(string:)(v3).super.isa;
  v1[3].super.isa = (Class)v2;
  v1->super.isa = result.super.isa;
  return result;
}

uint64_t specialized CoreMLExportable.export(metadata:)(uint64_t a1)
{
  return specialized CoreMLExportable.export(metadata:)(a1, (uint64_t (*)(void))TreeRegressorModel.export(internalMetadata:));
}

{
  return specialized CoreMLExportable.export(metadata:)(a1, (uint64_t (*)(void))MLLinearRegressor.Model.export(internalMetadata:));
}

{
  return specialized CoreMLExportable.export(metadata:)(a1, (uint64_t (*)(void))AnyTreeClassifierModel.export(internalMetadata:));
}

{
  return specialized CoreMLExportable.export(metadata:)(a1, (uint64_t (*)(void))MLLogisticRegressionClassifier.Model.export(internalMetadata:));
}

uint64_t specialized CoreMLExportable.export(metadata:)(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t v52 = a2;
  uint64_t v51 = a1;
  uint64_t v4 = v2;
  uint64_t v5 = type metadata accessor for Model(0);
  uint64_t v6 = *(void *)(v5 - 8);
  int64_t v7 = *(void *)(v6 + 64);
  char v8 = alloca(v7);
  uint64_t v9 = alloca(v7);
  uint64_t v41 = v39;
  uint64_t v40 = _swiftEmptyDictionarySingleton;
  uint64_t v49 = v4;
  uint64_t result = a2();
  if (!v3)
  {
    uint64_t v52 = 0;
    uint64_t v42 = v6;
    uint64_t v50 = v5;
    uint64_t v11 = v51;
    uint64_t v44 = *(void *)v51;
    uint64_t v46 = *(void *)(v51 + 8);
    uint64_t v48 = *(void *)(v51 + 16);
    uint64_t v12 = *(void *)(v51 + 24);
    unint64_t v13 = *(void *)(v51 + 40);
    uint64_t v47 = *(void *)(v51 + 48);
    uint64_t v14 = *(void *)(v51 + 32);
    if (!v13) {
      uint64_t v14 = 0;
    }
    uint64_t v43 = v14;
    uint64_t v15 = *(void *)(v51 + 56);
    unint64_t v16 = 0xE000000000000000;
    if (v13) {
      unint64_t v16 = v13;
    }
    unint64_t v45 = v16;
    swift_bridgeObjectRetain(v12);
    uint64_t v17 = v12;
    uint64_t v18 = v49;
    Model.modelDescription.setter(v48, v17);
    swift_bridgeObjectRetain(v15);
    Model.versionString.setter(v47, v15);
    uint64_t v19 = v46;
    swift_bridgeObjectRetain(v46);
    Model.author.setter(v44, v19);
    uint64_t v20 = *(void *)(v11 + 64);
    swift_bridgeObjectRetain(v13);
    Model.license.setter(v43, v45);
    if (v20)
    {
      uint64_t v21 = v20;
    }
    else
    {
      uint64_t v21 = Dictionary.init(dictionaryLiteral:)(_swiftEmptyArrayStorage, &type metadata for String, &type metadata for String, &protocol witness table for String);
      LOBYTE(v20) = 0;
    }
    swift_bridgeObjectRetain(v20);
    Model.metadata.setter(v21);
    long long v22 = (void (*)(unsigned char *, void))Model.metadata.modify(v39);
    uint64_t v23 = v52;
    specialized Dictionary._Variant.merge<A>(_:uniquingKeysWith:)((uint64_t)_swiftEmptyDictionarySingleton, (uint64_t)specialized thunk for @escaping @callee_guaranteed (@in_guaranteed A, @in_guaranteed B) -> (@out A, @out B), 0, v24);
    uint64_t v52 = v23;
    v22(v39, 0);
    Swift::String v25 = getOSVersion()();
    uint64_t countAndFlagsBits = v25._countAndFlagsBits;
    unsigned __int8 object = v25._object;
    uint64_t v28 = v18;
    uint64_t v51 = Model.metadata.modify(v39);
    specialized Dictionary._Variant.setValue(_:forKey:)(countAndFlagsBits, (uint64_t)object, 0xD00000000000001ALL, (uint64_t)("Recommender Model" + 0x8000000000000000));
    ((void (*)(unsigned char *, void))v51)(v39, 0);
    uint64_t v29 = v41;
    uint64_t v30 = v28;
    uint64_t v31 = v50;
    uint64_t v32 = v42;
    (*(void (**)(unsigned char *, uint64_t, uint64_t))(v42 + 16))(v41, v30, v50);
    uint64_t v33 = Model.nestedModels.getter();
    (*(void (**)(unsigned char *, uint64_t))(v32 + 8))(v29, v31);
    uint64_t v34 = v52;
    ML17MLImageClassifierV5f41V6export8metadata20featureExtractorType20dE92ADVAA0K8MetadataV_AC07FeatureiJ0OtKFSiAJcfu_32b63bdf5f6c975d31a36a8f37561ba444AJSiTf3nnnpk_nTf1cn_n = _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSay20MLModelSpecification5ModelVG_Sis5NeverOTg5032_s8CreateML17MLImageClassifierV5f41V6export8metadata20featureExtractorType20dE92ADVAA0K8MetadataV_AC07FeatureiJ0OtKFSiAJcfu_32b63bdf5f6c975d31a36a8f37561ba444AJSiTf3nnnpk_nTf1cn_n(v33);
    uint64_t v52 = v34;
    swift_bridgeObjectRelease(v33);
    swift_bridgeObjectRelease((_BYTE)v40);
    uint64_t v36 = specialized Sequence<>.max()((uint64_t)ML17MLImageClassifierV5f41V6export8metadata20featureExtractorType20dE92ADVAA0K8MetadataV_AC07FeatureiJ0OtKFSiAJcfu_32b63bdf5f6c975d31a36a8f37561ba444AJSiTf3nnnpk_nTf1cn_n);
    LOBYTE(v32) = v37;
    swift_bridgeObjectRelease((_BYTE)ML17MLImageClassifierV5f41V6export8metadata20featureExtractorType20dE92ADVAA0K8MetadataV_AC07FeatureiJ0OtKFSiAJcfu_32b63bdf5f6c975d31a36a8f37561ba444AJSiTf3nnnpk_nTf1cn_n);
    uint64_t v38 = 1;
    if ((v32 & 1) == 0) {
      uint64_t v38 = v36;
    }
    return Model.specificationVersion.setter(v38);
  }
  return result;
}

uint64_t specialized CoreMLExportable.export(metadata:)(uint64_t a1, uint64_t a2)
{
  uint64_t v54 = v3;
  uint64_t v53 = a1;
  uint64_t v4 = v2;
  uint64_t v5 = type metadata accessor for Model(0);
  uint64_t v6 = *(void *)(v5 - 8);
  int64_t v7 = *(void *)(v6 + 64);
  char v8 = alloca(v7);
  uint64_t v9 = alloca(v7);
  uint64_t v41 = &v39;
  uint64_t v52 = _swiftEmptyDictionarySingleton;
  uint64_t v51 = v4;
  MLSoundClassifier.Model.export(internalMetadata:)(&v52, a2);
  if (v3) {
    return swift_bridgeObjectRelease((_BYTE)v52);
  }
  uint64_t v54 = 0;
  uint64_t v43 = v6;
  uint64_t v42 = v5;
  uint64_t v11 = v53;
  uint64_t v45 = *(void *)v53;
  uint64_t v47 = *(void *)(v53 + 8);
  uint64_t v49 = *(void *)(v53 + 16);
  uint64_t v12 = *(void *)(v53 + 24);
  uint64_t v13 = v51;
  unint64_t v14 = *(void *)(v53 + 40);
  uint64_t v48 = *(void *)(v53 + 48);
  uint64_t v15 = *(void *)(v53 + 32);
  if (!v14) {
    uint64_t v15 = 0;
  }
  uint64_t v44 = v15;
  uint64_t v50 = *(void *)(v53 + 56);
  unint64_t v16 = 0xE000000000000000;
  if (v14) {
    unint64_t v16 = v14;
  }
  unint64_t v46 = v16;
  swift_bridgeObjectRetain(v12);
  Model.modelDescription.setter(v49, v12);
  uint64_t v17 = v50;
  swift_bridgeObjectRetain(v50);
  Model.versionString.setter(v48, v17);
  uint64_t v18 = v47;
  swift_bridgeObjectRetain(v47);
  Model.author.setter(v45, v18);
  uint64_t v19 = *(void *)(v11 + 64);
  swift_bridgeObjectRetain(v14);
  Model.license.setter(v44, v46);
  if (v19)
  {
    uint64_t v20 = v19;
  }
  else
  {
    uint64_t v20 = Dictionary.init(dictionaryLiteral:)(_swiftEmptyArrayStorage, &type metadata for String, &type metadata for String, &protocol witness table for String);
    LOBYTE(v19) = 0;
  }
  swift_bridgeObjectRetain(v19);
  Model.metadata.setter(v20);
  uint64_t v21 = (uint64_t)v52;
  swift_bridgeObjectRetain((_BYTE)v52);
  uint64_t v22 = v13;
  uint64_t v23 = (void (*)(unsigned char *, void))Model.metadata.modify(v40);
  uint64_t v24 = v54;
  specialized Dictionary._Variant.merge<A>(_:uniquingKeysWith:)(v21, (uint64_t)specialized thunk for @escaping @callee_guaranteed (@in_guaranteed A, @in_guaranteed B) -> (@out A, @out B), 0, v25);
  uint64_t v54 = v24;
  v23(v40, 0);
  Swift::String v26 = getOSVersion()();
  uint64_t countAndFlagsBits = v26._countAndFlagsBits;
  unsigned __int8 object = v26._object;
  uint64_t v53 = Model.metadata.modify(v40);
  specialized Dictionary._Variant.setValue(_:forKey:)(countAndFlagsBits, (uint64_t)object, 0xD00000000000001ALL, (uint64_t)("Recommender Model" + 0x8000000000000000));
  ((void (*)(unsigned char *, void))v53)(v40, 0);
  uint64_t v29 = v41;
  uint64_t v30 = v22;
  uint64_t v31 = v42;
  uint64_t v32 = v43;
  (*(void (**)(uint64_t *, uint64_t, uint64_t))(v43 + 16))(v41, v30, v42);
  uint64_t v33 = Model.nestedModels.getter();
  (*(void (**)(uint64_t *, uint64_t))(v32 + 8))(v29, v31);
  uint64_t v34 = v54;
  ML17MLImageClassifierV5f41V6export8metadata20featureExtractorType20dE92ADVAA0K8MetadataV_AC07FeatureiJ0OtKFSiAJcfu_32b63bdf5f6c975d31a36a8f37561ba444AJSiTf3nnnpk_nTf1cn_n = _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSay20MLModelSpecification5ModelVG_Sis5NeverOTg5032_s8CreateML17MLImageClassifierV5f41V6export8metadata20featureExtractorType20dE92ADVAA0K8MetadataV_AC07FeatureiJ0OtKFSiAJcfu_32b63bdf5f6c975d31a36a8f37561ba444AJSiTf3nnnpk_nTf1cn_n(v33);
  uint64_t v54 = v34;
  swift_bridgeObjectRelease(v33);
  swift_bridgeObjectRelease((_BYTE)v52);
  uint64_t v36 = specialized Sequence<>.max()((uint64_t)ML17MLImageClassifierV5f41V6export8metadata20featureExtractorType20dE92ADVAA0K8MetadataV_AC07FeatureiJ0OtKFSiAJcfu_32b63bdf5f6c975d31a36a8f37561ba444AJSiTf3nnnpk_nTf1cn_n);
  LOBYTE(v32) = v37;
  swift_bridgeObjectRelease((_BYTE)ML17MLImageClassifierV5f41V6export8metadata20featureExtractorType20dE92ADVAA0K8MetadataV_AC07FeatureiJ0OtKFSiAJcfu_32b63bdf5f6c975d31a36a8f37561ba444AJSiTf3nnnpk_nTf1cn_n);
  uint64_t v38 = 1;
  if ((v32 & 1) == 0) {
    uint64_t v38 = v36;
  }
  return Model.specificationVersion.setter(v38);
}

uint64_t specialized Sequence<>.max()(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 16);
  if (!v1) {
    return 0;
  }
  uint64_t result = *(void *)(a1 + 32);
  if (v1 != 1)
  {
    uint64_t v3 = 0;
    do
    {
      if (result <= *(void *)(a1 + 8 * v3 + 40)) {
        uint64_t result = *(void *)(a1 + 8 * v3 + 40);
      }
      ++v3;
    }
    while (v1 - 1 != v3);
  }
  return result;
}

{
  uint64_t v1;
  double v2;
  double v3;
  uint64_t v5;

  uint64_t v1 = *(void *)(a1 + 16);
  if (!v1) {
    return 0;
  }
  uint64_t v2 = *(double *)(a1 + 32);
  if (v1 == 1)
  {
    uint64_t v3 = *(double *)(a1 + 32);
  }
  else
  {
    uint64_t v5 = 0;
    do
    {
      uint64_t v3 = fmax(*(double *)(a1 + 8 * v5++ + 40), v2);
      uint64_t v2 = v3;
    }
    while (v1 - 1 != v5);
  }
  return *(void *)&v3;
}

void key path setter for MLBoostedTreeRegressor.model : MLBoostedTreeRegressor(id *a1)
{
  id v1 = *a1;
  MLBoostedTreeRegressor.model.setter((uint64_t)v1);
}

void MLBoostedTreeRegressor.model.setter(uint64_t a1)
{
  uint64_t v2 = *(int *)(type metadata accessor for MLBoostedTreeRegressor(0) + 20);

  *(void *)(v1 + v2) = a1;
}

void (*MLBoostedTreeRegressor.model.modify(uint64_t a1))(uint64_t a1, char a2)
{
  *(void *)(a1 + 8) = v1;
  uint64_t v3 = *(int *)(type metadata accessor for MLBoostedTreeRegressor(0) + 20);
  *(_DWORD *)(a1 + 16) = v3;
  uint64_t v4 = *(void **)(v1 + v3);
  *(void *)a1 = v4;
  v4;
  return MLActivityClassifier.model.modify;
}

uint64_t MLBoostedTreeRegressor.targetColumn.getter()
{
  uint64_t v1 = *(int *)(type metadata accessor for MLBoostedTreeRegressor(0) + 24);
  uint64_t v2 = *(void *)(v0 + v1);
  swift_bridgeObjectRetain(*(void *)(v0 + v1 + 8));
  return v2;
}

uint64_t MLBoostedTreeRegressor.targetColumn.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(int *)(type metadata accessor for MLBoostedTreeRegressor(0) + 24);
  uint64_t result = swift_bridgeObjectRelease(*(void *)(v2 + v3 + 8));
  *(void *)(v2 + v3) = a1;
  *(void *)(v2 + v3 + 8) = a2;
  return result;
}

void (*MLBoostedTreeRegressor.targetColumn.modify())()
{
  return MLBoostedTreeRegressor.ModelParameters.maxDepth.modify;
}

uint64_t MLBoostedTreeRegressor.featureColumns.getter()
{
  uint64_t v1 = type metadata accessor for MLBoostedTreeRegressor(0);
  return swift_bridgeObjectRetain(*(void *)(v0 + *(int *)(v1 + 28)));
}

uint64_t MLBoostedTreeRegressor.featureColumns.setter(uint64_t a1)
{
  uint64_t v2 = *(int *)(type metadata accessor for MLBoostedTreeRegressor(0) + 28);
  uint64_t result = swift_bridgeObjectRelease(*(void *)(v1 + v2));
  *(void *)(v1 + v2) = a1;
  return result;
}

void (*MLBoostedTreeRegressor.featureColumns.modify())()
{
  return MLBoostedTreeRegressor.ModelParameters.maxDepth.modify;
}

uint64_t MLBoostedTreeRegressor.modelParameters.getter()
{
  uint64_t v2 = v0;
  uint64_t v3 = type metadata accessor for MLBoostedTreeRegressor(0);
  return outlined init with copy of MLBoostedTreeRegressor.ModelParameters(v1 + *(int *)(v3 + 32), v2);
}

uint64_t MLBoostedTreeRegressor.trainingMetrics.getter()
{
  uint64_t v2 = v0;
  uint64_t v3 = *(int *)(type metadata accessor for MLBoostedTreeRegressor(0) + 36);
  uint64_t v4 = *(void *)(v1 + v3);
  uint64_t v5 = *(void *)(v1 + v3 + 8);
  char v6 = *(unsigned char *)(v1 + v3 + 16);
  *(void *)uint64_t v2 = v4;
  *(void *)(v2 + 8) = v5;
  *(unsigned char *)(v2 + 16) = v6;
  return outlined copy of Result<_RegressorMetrics, Error>(v4, v5, v6);
}

uint64_t MLBoostedTreeRegressor.validationMetrics.getter()
{
  uint64_t v2 = v0;
  uint64_t v3 = *(int *)(type metadata accessor for MLBoostedTreeRegressor(0) + 40);
  uint64_t v4 = *(void *)(v1 + v3);
  uint64_t v5 = *(void *)(v1 + v3 + 8);
  char v6 = *(unsigned char *)(v1 + v3 + 16);
  *(void *)uint64_t v2 = v4;
  *(void *)(v2 + 8) = v5;
  *(unsigned char *)(v2 + 16) = v6;
  return outlined copy of Result<_RegressorMetrics, Error>(v4, v5, v6);
}

uint64_t static MLBoostedTreeRegressor._defaultSessionParameters.getter()
{
  uint64_t v1 = v0;
  if (one-time initialization token for _defaultSessionParameters != -1) {
    swift_once(&one-time initialization token for _defaultSessionParameters, one-time initialization function for _defaultSessionParameters);
  }
  uint64_t v2 = type metadata accessor for MLTrainingSessionParameters(0);
  uint64_t v3 = __swift_project_value_buffer(v2, (uint64_t)static MLBoostedTreeRegressor._defaultSessionParameters);
  return outlined init with copy of MLTrainingSessionParameters(v3, v1, type metadata accessor for MLTrainingSessionParameters);
}

uint64_t MLBoostedTreeRegressor.init(_:targetColumn:featureColumns:parameters:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  v6[7] = a6;
  v6[6] = a5;
  v6[5] = a4;
  v6[4] = a3;
  v6[3] = a2;
  v6[2] = a1;
  return swift_task_switch(MLBoostedTreeRegressor.init(_:targetColumn:featureColumns:parameters:), 0, 0);
}

uint64_t MLBoostedTreeRegressor.init(_:targetColumn:featureColumns:parameters:)()
{
  uint64_t v1 = *(void *)(v0 + 48);
  long long v13 = *(_OWORD *)(v0 + 32);
  uint64_t v2 = *(void *)(v0 + 16);
  uint64_t v3 = (int *)type metadata accessor for MLBoostedTreeRegressor(0);
  *(void *)(v0 + 64) = v3;
  uint64_t v4 = v3[9];
  *(_DWORD *)(v0 + 96) = v4;
  *(unsigned char *)(v2 + v4 + 16) = 0;
  *(_OWORD *)(v2 + v4) = 0;
  uint64_t v5 = v3[10];
  *(_DWORD *)(v0 + 100) = v5;
  uint64_t v6 = lazy protocol witness table accessor for type MLCreateError and conformance MLCreateError();
  uint64_t v7 = swift_allocError(&type metadata for MLCreateError, v6, 0, 0);
  *(void *)uint64_t v8 = 0xD0000000000000C0;
  *(void *)(v8 + 8) = "essor\n\nParameters\n" + 0x8000000000000000;
  *(_OWORD *)(v8 + 16) = 0;
  *(_OWORD *)(v8 + 32) = 0;
  *(unsigned char *)(v8 + 48) = 0;
  *(void *)(v2 + v5) = v7;
  *(void *)(v2 + v5 + 8) = 0;
  *(unsigned char *)(v2 + v5 + 16) = 1;
  uint64_t v9 = v3[7];
  *(_DWORD *)(v0 + 104) = v9;
  *(void *)(v2 + v9) = v1;
  *(_OWORD *)(v2 + v3[6]) = v13;
  Swift::String v10 = (uint64_t (*)(void))((char *)&async function pointer to specialized CoreMLExportable.exportAsCoreMLModel()
                          + async function pointer to specialized CoreMLExportable.exportAsCoreMLModel());
  uint64_t v11 = (void *)swift_task_alloc(dword_3AE25C);
  *(void *)(v0 + 72) = v11;
  *uint64_t v11 = v0;
  v11[1] = MLBoostedTreeRegressor.init(_:targetColumn:featureColumns:parameters:);
  return v10();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;

  uint64_t v6 = *(int *)(v0 + 104);
  uint64_t v1 = *(int *)(v0 + 100);
  uint64_t v2 = *(int *)(v0 + 96);
  uint64_t v7 = *(void *)(v0 + 40);
  uint64_t v3 = *(void *)(v0 + 16);
  uint64_t v4 = *(void *)(v0 + 24);
  outlined destroy of MLBoostedTreeRegressor.ModelParameters(*(void *)(v0 + 56));
  outlined destroy of MLActivityClassifier.ModelParameters(v4, type metadata accessor for TreeRegressorModel);
  swift_bridgeObjectRelease(v7);
  swift_bridgeObjectRelease(*(void *)(v3 + v6));
  outlined consume of Result<(Int, Int), Error>(*(void *)(v3 + v2), *(void *)(v3 + v2 + 8), *(_DWORD *)(v3 + v2 + 16));
  outlined consume of Result<(Int, Int), Error>(*(void *)(v3 + v1), *(void *)(v3 + v1 + 8), *(_DWORD *)(v3 + v1 + 16));
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t MLBoostedTreeRegressor.init(_:targetColumn:featureColumns:parameters:)(uint64_t a1)
{
  uint64_t v5 = *(void *)(*v2 + 72);
  uint64_t v4 = *v2;
  *(void *)(*v2 + 80) = v1;
  swift_task_dealloc(v5);
  if (v1)
  {
    uint64_t v6 = MLBoostedTreeRegressor.init(_:targetColumn:featureColumns:parameters:);
  }
  else
  {
    *(void *)(v4 + 88) = a1;
    uint64_t v6 = MLRandomForestRegressor.init(_:targetColumn:featureColumns:parameters:);
  }
  return swift_task_switch(v6, 0, 0);
}

uint64_t MLBoostedTreeRegressor.init(trainingData:targetColumn:featureColumns:parameters:)(void (*a1)(uint64_t *, uint64_t, uint64_t), uint64_t a2, void *a3, void *a4, uint64_t a5)
{
  v150._rawValue = a4;
  _ = a3;
  uint64_t v7 = v5;
  v143._uint64_t countAndFlagsBits = a2;
  uint64_t v157 = v6;
  uint64_t v155 = a5;
  v154 = a1;
  uint64_t v147 = type metadata accessor for DataFrame(0);
  uint64_t v149 = *(void *)(v147 - 8);
  int64_t v8 = *(void *)(v149 + 64);
  uint64_t v9 = alloca(v8);
  Swift::String v10 = alloca(v8);
  uint64_t v135 = &v112;
  uint64_t v133 = *(void *)(type metadata accessor for TreeRegressorModel(0) - 8);
  int64_t v11 = *(void *)(v133 + 64);
  uint64_t v12 = alloca(v11);
  long long v13 = alloca(v11);
  uint64_t v131 = &v112;
  int64_t v132 = v11;
  unint64_t v14 = alloca(v11);
  uint64_t v15 = alloca(v11);
  v145 = &v112;
  uint64_t v126 = type metadata accessor for BaseTreeRegressor(0);
  uint64_t v127 = *(void *)(v126 - 8);
  int64_t v16 = *(void *)(v127 + 64);
  uint64_t v17 = alloca(v16);
  uint64_t v18 = alloca(v16);
  uint64_t v128 = &v112;
  uint64_t v129 = type metadata accessor for TreeRegressor(0);
  int64_t v19 = *(void *)(*(void *)(v129 - 8) + 64);
  uint64_t v20 = alloca(v19);
  uint64_t v21 = alloca(v19);
  Swift::String v144 = &v112;
  uint64_t v142 = type metadata accessor for MLBoostedTreeRegressor.ModelParameters.ValidationData(0);
  int64_t v22 = *(void *)(*(void *)(v142 - 8) + 64);
  uint64_t v23 = alloca(v22);
  uint64_t v24 = alloca(v22);
  v143._unsigned __int8 object = &v112;
  uint64_t v140 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (training: DataFrame, validation: DataFrame?));
  int64_t v25 = *(void *)(*(void *)(v140 - 8) + 64);
  Swift::String v26 = alloca(v25);
  uint64_t v27 = alloca(v25);
  uint64_t v138 = &v112;
  uint64_t v28 = alloca(v25);
  uint64_t v29 = alloca(v25);
  uint64_t v134 = &v112;
  uint64_t v30 = alloca(v25);
  uint64_t v31 = alloca(v25);
  v156 = &v112;
  uint64_t v152 = type metadata accessor for BoostedTreeConfiguration(0);
  v153 = *(void (**)(long long *, uint64_t))(v152 - 8);
  int64_t v32 = *((void *)v153 + 8);
  uint64_t v33 = alloca(v32);
  uint64_t v34 = alloca(v32);
  uint64_t v130 = &v112;
  uint64_t v35 = alloca(v32);
  uint64_t v36 = alloca(v32);
  uint64_t v141 = &v112;
  char v37 = alloca(v32);
  uint64_t v38 = alloca(v32);
  uint64_t v151 = &v112;
  uint64_t v39 = type metadata accessor for MLBoostedTreeRegressor(0);
  uint64_t v40 = *(int *)(v39 + 36);
  uint64_t v136 = v7 + v40;
  *(unsigned char *)(v7 + v40 + 16) = 0;
  *(_OWORD *)(v7 + v40) = 0;
  uint64_t v41 = *(int *)(v39 + 40);
  uint64_t v42 = lazy protocol witness table accessor for type MLCreateError and conformance MLCreateError();
  uint64_t v43 = swift_allocError(&type metadata for MLCreateError, v42, 0, 0);
  *(void *)uint64_t v44 = 0xD0000000000000C0;
  *(void *)(v44 + 8) = "essor\n\nParameters\n" + 0x8000000000000000;
  *(_OWORD *)(v44 + 16) = 0;
  *(_OWORD *)(v44 + 32) = 0;
  *(unsigned char *)(v44 + 48) = 0;
  *(void *)(v7 + v41) = v43;
  *(void *)(v7 + v41 + 8) = 0;
  uint64_t v137 = v41;
  uint64_t v148 = v7;
  *(unsigned char *)(v7 + v41 + 16) = 1;
  v45._uint64_t countAndFlagsBits = 0x6C6562614CLL;
  v45._unsigned __int8 object = (void *)0xE500000000000000;
  v46._uint64_t countAndFlagsBits = v143._countAndFlagsBits;
  v46._unsigned __int8 object = _;
  char v47 = (char)_;
  uint64_t v48 = v154;
  DataFrame.validateColumnIsNumeric(_:context:)(v46, v45);
  uint64_t v157 = v49;
  if (v49)
  {
    swift_bridgeObjectRelease(v47);
    swift_bridgeObjectRelease(v150._rawValue);
    outlined destroy of MLBoostedTreeRegressor.ModelParameters(v155);
    (*(void (**)(void (*)(uint64_t *, uint64_t, uint64_t), uint64_t))(v149 + 8))(v48, v147);
    uint64_t v50 = v148;
LABEL_13:
    outlined consume of Result<(Int, Int), Error>(*(void *)v136, *(void *)(v136 + 8), *(_DWORD *)(v136 + 16));
    return outlined consume of Result<(Int, Int), Error>(*(void *)(v50 + v137), *(void *)(v50 + v137 + 8), *(_DWORD *)(v50 + v137 + 16));
  }
  uint64_t v139 = v39;
  rawValue = v150._rawValue;
  if (v150._rawValue)
  {
    swift_bridgeObjectRetain(v150._rawValue);
    uint64_t v52 = v154;
    DataFrame.validateContainsColumns(_:context:)((Swift::OpaquePointer)rawValue, (Swift::String)__PAIR128__(0xE700000000000000, 0x65727574616546));
    uint64_t v53 = v151;
    if (v54)
    {
      swift_bridgeObjectRelease((_BYTE)_);
      swift_bridgeObjectRelease_n(rawValue, 2, v55, v56, v57);
      outlined destroy of MLBoostedTreeRegressor.ModelParameters(v155);
      uint64_t v58 = v52;
      uint64_t v59 = v147;
      uint64_t v60 = (void (*)(long long *, uint64_t))v149;
LABEL_11:
      (*((void (**)(void (*)(uint64_t *, uint64_t, uint64_t), uint64_t))v60 + 1))(v58, v59);
LABEL_12:
      uint64_t v50 = v148;
      goto LABEL_13;
    }
    uint64_t v157 = 0;
    swift_bridgeObjectRelease((_BYTE)rawValue);
  }
  else
  {
    uint64_t v53 = v151;
  }
  uint64_t v61 = v155;
  outlined init with copy of MLBoostedTreeRegressor.ModelParameters(v155, (uint64_t)&v114);
  BoostedTreeConfiguration.init()();
  BoostedTreeConfiguration.maximumDepth.setter(v116);
  BoostedTreeConfiguration.maximumIterations.setter(v117);
  BoostedTreeConfiguration.minimumLossReduction.setter(v118);
  BoostedTreeConfiguration.minimumChildWeight.setter(v119);
  BoostedTreeConfiguration.randomSeed.setter(v120);
  BoostedTreeConfiguration.learningRate.setter(v121);
  BoostedTreeConfiguration.earlyStoppingIterationCount.setter(v122, v123);
  BoostedTreeConfiguration.rowSubsample.setter(v124);
  BoostedTreeConfiguration.columnSubsample.setter(v125);
  outlined destroy of MLBoostedTreeRegressor.ModelParameters((uint64_t)&v114);
  outlined init with copy of Either<LogisticRegressionClassifier<Float, String>, FullyConnectedNetworkClassifier<Float, String>>(v61, (uint64_t)&v112, &demangling cache variable for type metadata for Any?);
  if (!v113) {
    BUG();
  }
  uint64_t v62 = (uint64_t)v156;
  uint64_t v63 = (uint64_t)v156 + *(int *)(v140 + 48);
  outlined init with take of Any(&v112, &v114);
  unsigned __int8 object = v143._object;
  swift_dynamicCast(v143._object, &v114, (char *)&type metadata for Any + 8, v142, 7);
  uint64_t v65 = v157;
  MLBoostedTreeRegressor.ModelParameters.ValidationData.generateDataFrames(trainingData:)(v62, v63, v154);
  if (v65)
  {
    swift_bridgeObjectRelease((_BYTE)_);
    swift_bridgeObjectRelease(v150._rawValue);
    outlined destroy of MLBoostedTreeRegressor.ModelParameters(v155);
    (*(void (**)(void (*)(uint64_t *, uint64_t, uint64_t), uint64_t))(v149 + 8))(v154, v147);
    outlined destroy of MLActivityClassifier.ModelParameters((uint64_t)object, type metadata accessor for MLBoostedTreeRegressor.ModelParameters.ValidationData);
    uint64_t v58 = (void (*)(uint64_t *, uint64_t, uint64_t))v53;
    uint64_t v59 = v152;
    uint64_t v60 = v153;
    goto LABEL_11;
  }
  uint64_t v142 = v63;
  outlined destroy of MLActivityClassifier.ModelParameters((uint64_t)object, type metadata accessor for MLBoostedTreeRegressor.ModelParameters.ValidationData);
  uint64_t v67 = _;
  char v68 = (char)v150._rawValue;
  uint64_t v69 = static _FeatureUtilities.selectFeaturesFromTrainingData(trainingData:targetColumn:featureColumns:)((uint64_t)v156, v143._countAndFlagsBits, _, (uint64_t)v150._rawValue);
  uint64_t v157 = 0;
  char v70 = v68;
  Swift::String v71 = v69;
  swift_bridgeObjectRelease(v70);
  uint64_t v72 = (void (*)(long long *, long long *, uint64_t))*((void *)v153 + 2);
  v72(v141, v151, v152);
  uint64_t v73 = v72;
  uint64_t v74 = v144;
  *(void *)Swift::String v144 = v143._countAndFlagsBits;
  *((void *)v74 + 1) = v67;
  *((void *)v74 + 2) = v71;
  *((void *)v74 + 3) = v71;
  *((void *)v74 + 4) = 0xD000000000000013;
  *((void *)v74 + 5) = "raining samples." + 0x8000000000000000;
  uint64_t v75 = v130;
  uint64_t v76 = v152;
  v73(v130, v141, v152);
  v150._rawValue = v71;
  swift_bridgeObjectRetain_n(v71, 2);
  swift_bridgeObjectRetain((_BYTE)_);
  uint64_t v77 = v128;
  BaseTreeRegressor.init(configuration:)(v75);
  uint64_t v78 = v76;
  BOOL v79 = (void (*)(long long *, uint64_t))*((void *)v153 + 1);
  v79(v141, v78);
  (*(void (**)(char *, long long *, uint64_t))(v127 + 32))((char *)v74 + *(int *)(v129 + 28), v77, v126);
  uint64_t v80 = (uint64_t)v156;
  uint64_t v81 = v157;
  TreeRegressor.fitted(to:validateOn:eventHandler:)((uint64_t)v156, v142, 0, 0);
  uint64_t v157 = v81;
  if (v81)
  {
    swift_bridgeObjectRelease((_BYTE)_);
    swift_bridgeObjectRelease(v150._rawValue);
    outlined destroy of MLBoostedTreeRegressor.ModelParameters(v155);
    (*(void (**)(void (*)(uint64_t *, uint64_t, uint64_t), uint64_t))(v149 + 8))(v154, v147);
    outlined destroy of MLActivityClassifier.ModelParameters((uint64_t)v74, type metadata accessor for TreeRegressor);
    outlined destroy of Either<LogisticRegressionClassifier<Float, String>, FullyConnectedNetworkClassifier<Float, String>>(v80, &demangling cache variable for type metadata for (training: DataFrame, validation: DataFrame?));
    v79(v151, v152);
    goto LABEL_12;
  }
  v153 = v79;
  if (!AnalyticsReporter.init()())
  {
    uint64_t v82 = v134;
    uint64_t v83 = (uint64_t)v134 + *(int *)(v140 + 48);
    uint64_t v84 = v147;
    uint64_t v85 = v149;
    (*(void (**)(long long *, long long *, uint64_t))(v149 + 16))(v134, v156, v147);
    uint64_t v86 = v142;
    outlined init with copy of Either<LogisticRegressionClassifier<Float, String>, FullyConnectedNetworkClassifier<Float, String>>(v142, v83, &demangling cache variable for type metadata for DataFrame?);
    v143._unsigned __int8 object = (void *)DataFrame.shape.getter(v86);
    (*(void (**)(long long *, uint64_t))(v85 + 8))(v82, v84);
    AnalyticsReporter.reportDataMetrics(model:metricName:quantity:)(CreateML_ModelType_boostedTreeRegressor, (Swift::String)__PAIR128__((unint64_t)("vectorized_features" + 0x8000000000000000), 0xD000000000000015), (Swift::Int)v143._object);
    outlined destroy of Either<LogisticRegressionClassifier<Float, String>, FullyConnectedNetworkClassifier<Float, String>>(v83, &demangling cache variable for type metadata for DataFrame?);
  }
  uint64_t v87 = v139;
  uint64_t v88 = *(int *)(v139 + 24);
  uint64_t v89 = v148;
  *(void *)(v148 + v88) = v143._countAndFlagsBits;
  v143._uint64_t countAndFlagsBits = v88;
  *(void *)(v89 + v88 + 8) = _;
  v143._unsigned __int8 object = (void *)(v89 + *(int *)(v87 + 32));
  outlined init with copy of MLBoostedTreeRegressor.ModelParameters(v155, (uint64_t)v143._object);
  _ = (void *)*(int *)(v87 + 28);
  *(Swift::OpaquePointer *)((char *)_ + v89) = v150;
  uint64_t v90 = (uint64_t)v131;
  outlined init with copy of MLTrainingSessionParameters((uint64_t)v145, (uint64_t)v131, type metadata accessor for TreeRegressorModel);
  uint64_t v91 = *(unsigned __int8 *)(v133 + 80);
  uint64_t v92 = ~*(unsigned __int8 *)(v133 + 80) & (v91 + 16);
  uint64_t v93 = swift_allocObject(&unk_39AEF0, v92 + v132, v91 | 7);
  outlined init with take of MLClassifierMetrics(v90, v93 + v92, type metadata accessor for TreeRegressorModel);
  uint64_t v94 = v157;
  specialized blockAwait<A>(_:)((uint64_t)&async function pointer to partial apply for closure #1 in MLBoostedTreeRegressor.init(trainingData:targetColumn:featureColumns:parameters:), v93);
  if (v94)
  {
    swift_release();
    outlined destroy of MLBoostedTreeRegressor.ModelParameters(v155);
    (*(void (**)(void (*)(uint64_t *, uint64_t, uint64_t), uint64_t))(v149 + 8))(v154, v147);
    outlined destroy of MLActivityClassifier.ModelParameters((uint64_t)v145, type metadata accessor for TreeRegressorModel);
    outlined destroy of MLActivityClassifier.ModelParameters((uint64_t)v144, type metadata accessor for TreeRegressor);
    outlined destroy of Either<LogisticRegressionClassifier<Float, String>, FullyConnectedNetworkClassifier<Float, String>>((uint64_t)v156, &demangling cache variable for type metadata for (training: DataFrame, validation: DataFrame?));
    v153(v151, v152);
    uint64_t v50 = v89;
LABEL_21:
    Swift::String v98 = v143._object;
    swift_bridgeObjectRelease(*(void *)(v50 + v143._countAndFlagsBits + 8));
    swift_bridgeObjectRelease(*(void *)((char *)_ + v50));
    outlined destroy of MLBoostedTreeRegressor.ModelParameters((uint64_t)v98);
    goto LABEL_13;
  }
  uint64_t v96 = v95;
  swift_release();
  v150._rawValue = (void *)*(int *)(v139 + 20);
  *(void *)((char *)v150._rawValue + v89) = v96;
  outlined init with copy of MLTrainingSessionParameters((uint64_t)v145, v89, type metadata accessor for TreeRegressorModel);
  TreeRegressorModel.computeMetrics(on:)((uint64_t)v156);
  uint64_t v157 = 0;
  char v99 = v115;
  uint64_t v100 = v136;
  outlined consume of Result<(Int, Int), Error>(*(void *)v136, *(void *)(v136 + 8), *(_DWORD *)(v136 + 16));
  *(_OWORD *)uint64_t v100 = v114;
  *(unsigned char *)(v100 + 16) = v99;
  uint64_t v101 = v138;
  uint64_t v102 = (uint64_t)v138 + *(int *)(v140 + 48);
  uint64_t v103 = v147;
  uint64_t v104 = v149;
  (*(void (**)(long long *, long long *, uint64_t))(v149 + 16))(v138, v156, v147);
  outlined init with copy of Either<LogisticRegressionClassifier<Float, String>, FullyConnectedNetworkClassifier<Float, String>>(v142, v102, &demangling cache variable for type metadata for DataFrame?);
  if (__swift_getEnumTagSinglePayload(v102, 1, v103) == 1)
  {
    outlined destroy of MLBoostedTreeRegressor.ModelParameters(v155);
    uint64_t v105 = *(void (**)(void (*)(uint64_t *, uint64_t, uint64_t), uint64_t))(v104 + 8);
    v105(v154, v103);
    outlined destroy of MLActivityClassifier.ModelParameters((uint64_t)v145, type metadata accessor for TreeRegressorModel);
    outlined destroy of MLActivityClassifier.ModelParameters((uint64_t)v144, type metadata accessor for TreeRegressor);
    outlined destroy of Either<LogisticRegressionClassifier<Float, String>, FullyConnectedNetworkClassifier<Float, String>>((uint64_t)v156, &demangling cache variable for type metadata for (training: DataFrame, validation: DataFrame?));
    v153(v151, v152);
    outlined destroy of Either<LogisticRegressionClassifier<Float, String>, FullyConnectedNetworkClassifier<Float, String>>(v102, &demangling cache variable for type metadata for DataFrame?);
    return ((uint64_t (*)(long long *, uint64_t))v105)(v101, v103);
  }
  else
  {
    uint64_t v106 = (uint64_t)v135;
    (*(void (**)(long long *, uint64_t, uint64_t))(v104 + 32))(v135, v102, v103);
    uint64_t v107 = *(void (**)(long long *, uint64_t))(v104 + 8);
    v107(v138, v103);
    uint64_t v108 = v157;
    TreeRegressorModel.computeMetrics(on:)(v106);
    if (v108)
    {
      outlined destroy of MLBoostedTreeRegressor.ModelParameters(v155);
      v107((long long *)v154, v103);
      v107((long long *)v106, v103);
      outlined destroy of MLActivityClassifier.ModelParameters((uint64_t)v145, type metadata accessor for TreeRegressorModel);
      outlined destroy of MLActivityClassifier.ModelParameters((uint64_t)v144, type metadata accessor for TreeRegressor);
      outlined destroy of Either<LogisticRegressionClassifier<Float, String>, FullyConnectedNetworkClassifier<Float, String>>((uint64_t)v156, &demangling cache variable for type metadata for (training: DataFrame, validation: DataFrame?));
      v153(v151, v152);
      uint64_t v97 = (char *)v150._rawValue;
      uint64_t v50 = v148;
      outlined destroy of MLActivityClassifier.ModelParameters(v148, type metadata accessor for TreeRegressorModel);

      goto LABEL_21;
    }
    outlined destroy of MLBoostedTreeRegressor.ModelParameters(v155);
    v107((long long *)v154, v103);
    v107((long long *)v106, v103);
    outlined destroy of MLActivityClassifier.ModelParameters((uint64_t)v145, type metadata accessor for TreeRegressorModel);
    outlined destroy of MLActivityClassifier.ModelParameters((uint64_t)v144, type metadata accessor for TreeRegressor);
    outlined destroy of Either<LogisticRegressionClassifier<Float, String>, FullyConnectedNetworkClassifier<Float, String>>((uint64_t)v156, &demangling cache variable for type metadata for (training: DataFrame, validation: DataFrame?));
    v153(v151, v152);
    char v109 = v115;
    uint64_t v110 = v137;
    uint64_t v111 = v148;
    uint64_t result = outlined consume of Result<(Int, Int), Error>(*(void *)(v148 + v137), *(void *)(v148 + v137 + 8), *(_DWORD *)(v148 + v137 + 16));
    *(_OWORD *)(v111 + v110) = v114;
    *(unsigned char *)(v111 + v110 + 16) = v109;
  }
  return result;
}

uint64_t closure #1 in MLBoostedTreeRegressor.init(trainingData:targetColumn:featureColumns:parameters:)(uint64_t a1)
{
  *(void *)(v1 + 16) = a1;
  uint64_t v2 = (uint64_t (*)(void))((char *)&async function pointer to specialized CoreMLExportable.exportAsCoreMLModel()
                         + async function pointer to specialized CoreMLExportable.exportAsCoreMLModel());
  uint64_t v3 = (void *)swift_task_alloc(dword_3AE25C);
  *(void *)(v1 + 24) = v3;
  *uint64_t v3 = v1;
  v3[1] = closure #1 in MLBoostedTreeRegressor.init(trainingData:targetColumn:featureColumns:parameters:);
  return v2();
}

{
  uint64_t v1;
  uint64_t *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  uint64_t v4 = *v2;
  uint64_t v5 = *(void *)(*v2 + 24);
  uint64_t v6 = *v2;
  swift_task_dealloc(v5);
  if (v1) {
    return (*(uint64_t (**)(void))(v6 + 8))();
  }
  *(void *)(v4 + 32) = a1;
  return swift_task_switch(closure #1 in MLBoostedTreeRegressor.init(trainingData:targetColumn:featureColumns:parameters:), 0, 0);
}

uint64_t MLBoostedTreeRegressor.init(trainingData:targetColumn:featureColumns:parameters:)(uint64_t *a1, uint64_t a2, void *a3, void *a4, uint64_t a5)
{
  long long v13 = a4;
  unint64_t v14 = a3;
  uint64_t v15 = a2;
  int64_t v6 = *(void *)(*(void *)(type metadata accessor for DataFrame(0) - 8) + 64);
  uint64_t v7 = alloca(v6);
  int64_t v8 = alloca(v6);
  char v9 = *((unsigned char *)a1 + 8);
  uint64_t v11 = *a1;
  char v12 = v9;
  DataFrame.init(_:)((uint64_t)&v11);
  outlined init with copy of MLBoostedTreeRegressor.ModelParameters(a5, (uint64_t)&v11);
  MLBoostedTreeRegressor.init(trainingData:targetColumn:featureColumns:parameters:)((void (*)(uint64_t *, uint64_t, uint64_t))&v11, v15, v14, v13, (uint64_t)&v11);
  return outlined destroy of MLBoostedTreeRegressor.ModelParameters(a5);
}

uint64_t MLBoostedTreeRegressor.init(checkpoint:)(uint64_t a1)
{
  uint64_t v68 = v2;
  uint64_t v88 = a1;
  uint64_t v3 = v1;
  uint64_t v79 = type metadata accessor for MLBoostedTreeRegressor.ModelParameters.ValidationData(0);
  int64_t v4 = *(void *)(*(void *)(v79 - 8) + 64);
  uint64_t v5 = alloca(v4);
  int64_t v6 = alloca(v4);
  uint64_t v80 = v67;
  uint64_t v7 = alloca(v4);
  int64_t v8 = alloca(v4);
  uint64_t v78 = v67;
  uint64_t v77 = *(void *)(type metadata accessor for TreeRegressorModel(0) - 8);
  int64_t v9 = *(void *)(v77 + 64);
  Swift::String v10 = alloca(v9);
  uint64_t v11 = alloca(v9);
  uint64_t v75 = v67;
  int64_t v76 = v9;
  char v12 = alloca(v9);
  long long v13 = alloca(v9);
  uint64_t v86 = v67;
  uint64_t v69 = type metadata accessor for BaseTreeRegressor(0);
  uint64_t v70 = *(void *)(v69 - 8);
  int64_t v14 = *(void *)(v70 + 64);
  uint64_t v15 = alloca(v14);
  int64_t v16 = alloca(v14);
  uint64_t v83 = v67;
  uint64_t v71 = type metadata accessor for BoostedTreeConfiguration(0);
  uint64_t v72 = *(void *)(v71 - 8);
  int64_t v17 = *(void *)(v72 + 64);
  uint64_t v18 = alloca(v17);
  int64_t v19 = alloca(v17);
  uint64_t v74 = v67;
  uint64_t v20 = alloca(v17);
  uint64_t v21 = alloca(v17);
  uint64_t v84 = v67;
  uint64_t v73 = type metadata accessor for TreeRegressor(0);
  int64_t v22 = *(void *)(*(void *)(v73 - 8) + 64);
  uint64_t v23 = alloca(v22);
  uint64_t v24 = alloca(v22);
  uint64_t v89 = (char *)v67;
  uint64_t v25 = type metadata accessor for MLBoostedTreeRegressor(0);
  uint64_t v26 = *(int *)(v25 + 36);
  *(unsigned char *)(v3 + v26 + 16) = 0;
  *(_OWORD *)(v3 + v26) = 0;
  uint64_t v82 = (int *)v25;
  uint64_t v27 = *(int *)(v25 + 40);
  uint64_t v87 = lazy protocol witness table accessor for type MLCreateError and conformance MLCreateError();
  uint64_t v28 = swift_allocError(&type metadata for MLCreateError, v87, 0, 0);
  *(void *)uint64_t v29 = 0xD0000000000000C0;
  *(void *)(v29 + 8) = "essor\n\nParameters\n" + 0x8000000000000000;
  *(_OWORD *)(v29 + 16) = 0;
  *(_OWORD *)(v29 + 32) = 0;
  *(unsigned char *)(v29 + 48) = 0;
  *(void *)(v3 + v27) = v28;
  *(void *)(v3 + v27 + 8) = 0;
  uint64_t v85 = v3;
  uint64_t v81 = v27;
  *(unsigned char *)(v3 + v27 + 16) = 1;
  switch(*(unsigned char *)(v88 + *(int *)(type metadata accessor for MLCheckpoint(0) + 20)))
  {
    case 0:
      uint64_t v30 = 0x696C616974696E69;
      uint64_t v31 = v89;
      unint64_t v32 = 0xEB0000000064657ALL;
      goto LABEL_9;
    case 1:
      uint64_t v30 = 0x6974636172747865;
      goto LABEL_6;
    case 2:
      swift_bridgeObjectRelease(0);
      uint64_t v31 = v89;
      goto LABEL_10;
    case 3:
      uint64_t v30 = 0x697461756C617665;
LABEL_6:
      unint64_t v32 = 0xEA0000000000676ELL;
      break;
    case 4:
      unint64_t v32 = 0xEB00000000676E69;
      uint64_t v30 = 0x636E657265666E69;
      break;
    case 5:
      JUMPOUT(0x1DC630);
  }
  uint64_t v31 = v89;
LABEL_9:
  char v33 = _stringCompareWithSmolCheck(_:_:expecting:)(v30, v32, 0x676E696E69617274, 0xE800000000000000, 0);
  swift_bridgeObjectRelease(v32);
  if (v33)
  {
LABEL_10:
    uint64_t v87 = v26;
    uint64_t v34 = (uint64_t)v84;
    BoostedTreeConfiguration.init()();
    *(void *)uint64_t v31 = 0;
    *((void *)v31 + 1) = 0xE000000000000000;
    *((void *)v31 + 2) = _swiftEmptyArrayStorage;
    *((void *)v31 + 3) = _swiftEmptyArrayStorage;
    *((void *)v31 + 4) = 0xD000000000000013;
    *((void *)v31 + 5) = "raining samples." + 0x8000000000000000;
    uint64_t v35 = v74;
    uint64_t v36 = v34;
    uint64_t v37 = v71;
    uint64_t v38 = v72;
    (*(void (**)(void *, uint64_t, uint64_t))(v72 + 16))(v74, v36, v71);
    BaseTreeRegressor.init(configuration:)(v35);
    (*(void (**)(void *, uint64_t))(v38 + 8))(v84, v37);
    uint64_t v39 = v73;
    (*(void (**)(char *, void *, uint64_t))(v70 + 32))(&v31[*(int *)(v73 + 28)], v83, v69);
    uint64_t v40 = lazy protocol witness table accessor for type TreeRegressor and conformance TreeRegressor();
    uint64_t v41 = (uint64_t)v86;
    uint64_t v42 = v88;
    uint64_t v43 = v68;
    UpdatableSupervisedTabularEstimator.readWithOptimizer(from:)(v88, v39, v40);
    if (!v43)
    {
      uint64_t v51 = (uint64_t)v75;
      outlined init with copy of MLTrainingSessionParameters(v41, (uint64_t)v75, type metadata accessor for TreeRegressorModel);
      uint64_t v52 = *(unsigned __int8 *)(v77 + 80);
      uint64_t v53 = ~*(unsigned __int8 *)(v77 + 80) & (v52 + 16);
      uint64_t v54 = swift_allocObject(&unk_39AF18, v53 + v76, v52 | 7);
      outlined init with take of MLClassifierMetrics(v51, v54 + v53, type metadata accessor for TreeRegressorModel);
      specialized blockAwait<A>(_:)((uint64_t)&async function pointer to partial apply for closure #1 in MLBoostedTreeRegressor.init(checkpoint:), v54);
      uint64_t v56 = v55;
      swift_release();
      uint64_t v57 = v85;
      *(void *)(v85 + v82[5]) = v56;
      outlined init with copy of MLTrainingSessionParameters((uint64_t)v86, v57, type metadata accessor for TreeRegressorModel);
      uint64_t v58 = (uint64_t)v78;
      *uint64_t v78 = 0;
      *(_WORD *)(v58 + 16) = 256;
      uint64_t v83 = 0;
      uint64_t v59 = v79;
      swift_storeEnumTagMultiPayload(v58, v79, 0);
      uint64_t v60 = v82[8];
      *(_OWORD *)(v57 + v60 + 16) = 0;
      *(_OWORD *)(v57 + v60) = 0;
      *(void *)(v57 + v60 + 32) = 6;
      __m128 v61 = _mm_loadh_ps((const double *)&qword_346D50);
      *(void *)(v57 + v60 + 40) = 10;
      *(__m128 *)(v57 + v60 + 48) = v61;
      *(void *)(v57 + v60 + 64) = 42;
      *(void *)(v57 + v60 + 72) = 0x3FD3333333333333;
      *(void *)(v57 + v60 + 80) = 0;
      uint64_t v84 = (void *)(v57 + v60);
      *(unsigned char *)(v57 + v60 + 88) = 1;
      *(_OWORD *)(v57 + v60 + 96) = xmmword_34E1F0;
      uint64_t v62 = (uint64_t)v80;
      outlined init with copy of MLTrainingSessionParameters(v58, (uint64_t)v80, type metadata accessor for MLBoostedTreeRegressor.ModelParameters.ValidationData);
      v67[3] = v59;
      boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1(v67);
      outlined init with take of MLClassifierMetrics(v62, (uint64_t)boxed_opaque_existential_1, type metadata accessor for MLBoostedTreeRegressor.ModelParameters.ValidationData);
      outlined assign with take of Any?((uint64_t)v67, (uint64_t)v84);
      outlined destroy of MLActivityClassifier.ModelParameters(v58, type metadata accessor for MLBoostedTreeRegressor.ModelParameters.ValidationData);
      uint64_t v64 = v82;
      uint64_t v65 = v82[6];
      *(void *)(v57 + v65) = 0;
      *(void *)(v57 + v65 + 8) = 0xE000000000000000;
      outlined destroy of MLActivityClassifier.ModelParameters(v88, type metadata accessor for MLCheckpoint);
      outlined destroy of MLActivityClassifier.ModelParameters((uint64_t)v86, type metadata accessor for TreeRegressorModel);
      outlined destroy of MLActivityClassifier.ModelParameters((uint64_t)v89, type metadata accessor for TreeRegressor);
      uint64_t result = v64[7];
      *(void *)(v57 + result) = _swiftEmptyArrayStorage;
      return result;
    }
    outlined destroy of MLActivityClassifier.ModelParameters(v42, type metadata accessor for MLCheckpoint);
    outlined destroy of MLActivityClassifier.ModelParameters((uint64_t)v31, type metadata accessor for TreeRegressor);
    uint64_t v44 = v85;
    uint64_t v45 = v81;
    uint64_t v26 = v87;
  }
  else
  {
    uint64_t v46 = v87;
    swift_allocError(&type metadata for MLCreateError, v87, 0, 0);
    *(void *)uint64_t v47 = 0xD000000000000041;
    *(void *)(v47 + 8) = "ssor\n\nParameters\n" + 0x8000000000000000;
    *(_OWORD *)(v47 + 16) = 0;
    *(_OWORD *)(v47 + 32) = 0;
    *(unsigned char *)(v47 + 48) = 0;
    swift_willThrow(&type metadata for MLCreateError, v46, v47, v48, v49, v50);
    outlined destroy of MLActivityClassifier.ModelParameters(v88, type metadata accessor for MLCheckpoint);
    uint64_t v44 = v85;
    uint64_t v45 = v81;
  }
  outlined consume of Result<(Int, Int), Error>(*(void *)(v44 + v26), *(void *)(v44 + v26 + 8), *(_DWORD *)(v44 + v26 + 16));
  return outlined consume of Result<(Int, Int), Error>(*(void *)(v44 + v45), *(void *)(v44 + v45 + 8), *(_DWORD *)(v44 + v45 + 16));
}

void *static MLBoostedTreeRegressor.train(trainingData:targetColumn:featureColumns:parameters:sessionParameters:)(uint64_t a1, uint64_t a2, void *a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v21 = a6;
  uint64_t v22 = a5;
  uint64_t v23 = a4;
  uint64_t v24 = a3;
  uint64_t v25 = a2;
  uint64_t v7 = type metadata accessor for DataFrame(0);
  uint64_t v8 = *(void *)(v7 - 8);
  int64_t v9 = *(void *)(v8 + 64);
  Swift::String v10 = alloca(v9);
  uint64_t v11 = alloca(v9);
  char v12 = *(unsigned char *)(a1 + 8);
  uint64_t v19 = *(void *)a1;
  char v20 = v12;
  outlined copy of Result<_DataTable, Error>(v19, v12);
  DataFrame.init(_:)((uint64_t)&v19);
  long long v13 = static MLBoostedTreeRegressor.makeTrainingSession(trainingData:targetColumn:featureColumns:parameters:sessionParameters:)((void (*)(uint64_t *, uint64_t, uint64_t))&v19, v25, v24, v23, v22, v21);
  uint64_t v14 = v7;
  if (v6) {
    return (void *)(*(uint64_t (**)(uint64_t *, uint64_t))(v8 + 8))(&v19, v7);
  }
  uint64_t v16 = (uint64_t)v13;
  (*(void (**)(uint64_t *, uint64_t))(v8 + 8))(&v19, v14);
  uint64_t v17 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for MLJob<MLBoostedTreeRegressor>);
  uint64_t v18 = (void *)swift_allocObject(v17, *(unsigned int *)(v17 + 48), *(unsigned __int16 *)(v17 + 52));
  return specialized MLJob.init(_:)(v18, v16);
}

long long *static MLBoostedTreeRegressor.makeTrainingSession(trainingData:targetColumn:featureColumns:parameters:sessionParameters:)(uint64_t a1, uint64_t a2, void *a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v16 = a6;
  uint64_t v17 = a5;
  uint64_t v18 = a4;
  uint64_t v19 = a3;
  uint64_t v7 = type metadata accessor for DataFrame(0);
  uint64_t v20 = *(void *)(v7 - 8);
  int64_t v8 = *(void *)(v20 + 64);
  int64_t v9 = alloca(v8);
  Swift::String v10 = alloca(v8);
  char v11 = *(unsigned char *)(a1 + 8);
  uint64_t v14 = *(void *)a1;
  char v15 = v11;
  outlined copy of Result<_DataTable, Error>(v14, v11);
  DataFrame.init(_:)((uint64_t)&v14);
  char v12 = static MLBoostedTreeRegressor.makeTrainingSession(trainingData:targetColumn:featureColumns:parameters:sessionParameters:)((void (*)(uint64_t *, uint64_t, uint64_t))&v14, a2, v19, v18, v17, v16);
  (*(void (**)(uint64_t *, uint64_t))(v20 + 8))(&v14, v7);
  return v12;
}

void *static MLBoostedTreeRegressor.resume(_:)(uint64_t a1)
{
  uint64_t v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for MLJob<MLBoostedTreeRegressor>);
  uint64_t v2 = (void *)swift_allocObject(v1, *(unsigned int *)(v1 + 48), *(unsigned __int16 *)(v1 + 52));
  swift_retain();
  return specialized MLJob.init(_:)(v2, a1);
}

long long *static MLBoostedTreeRegressor.train(trainingData:targetColumn:featureColumns:parameters:sessionParameters:)(void (*a1)(uint64_t *, uint64_t, uint64_t), uint64_t a2, void *a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t result = static MLBoostedTreeRegressor.makeTrainingSession(trainingData:targetColumn:featureColumns:parameters:sessionParameters:)(a1, a2, a3, a4, a5, a6);
  if (!v6)
  {
    uint64_t v8 = (uint64_t)result;
    uint64_t v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for MLJob<MLBoostedTreeRegressor>);
    Swift::String v10 = (void *)swift_allocObject(v9, *(unsigned int *)(v9 + 48), *(unsigned __int16 *)(v9 + 52));
    return (long long *)specialized MLJob.init(_:)(v10, v8);
  }
  return result;
}

long long *static MLBoostedTreeRegressor.makeTrainingSession(trainingData:targetColumn:featureColumns:parameters:sessionParameters:)(void (*a1)(uint64_t *, uint64_t, uint64_t), uint64_t a2, void *a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v72 = v6;
  uint64_t v68 = a6;
  uint64_t v65 = a4;
  uint64_t v66 = a3;
  uint64_t v59 = a2;
  uint64_t v73 = a1;
  int64_t v8 = *(void *)(*(void *)(type metadata accessor for MLTrainingSessionParameters(0) - 8) + 64);
  uint64_t v9 = alloca(v8);
  Swift::String v10 = alloca(v8);
  uint64_t v63 = &v44;
  char v11 = alloca(v8);
  char v12 = alloca(v8);
  uint64_t v60 = &v44;
  int64_t v13 = *(void *)(*(void *)(type metadata accessor for BoostedTreeConfiguration(0) - 8) + 64);
  uint64_t v14 = alloca(v13);
  char v15 = alloca(v13);
  __m128 v61 = &v44;
  uint64_t v74 = type metadata accessor for MLBoostedTreeRegressor.ModelParameters.ValidationData(0);
  int64_t v16 = *(void *)(*(void *)(v74 - 8) + 64);
  uint64_t v17 = alloca(v16);
  uint64_t v18 = alloca(v16);
  uint64_t v19 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (training: DataFrame, validation: DataFrame?));
  int64_t v20 = *(void *)(*(void *)(v19 - 8) + 64);
  uint64_t v21 = alloca(v20);
  uint64_t v22 = alloca(v20);
  uint64_t v70 = &v44;
  uint64_t v23 = alloca(v20);
  uint64_t v24 = alloca(v20);
  uint64_t v75 = &v44;
  uint64_t v25 = alloca(v20);
  uint64_t v26 = alloca(v20);
  uint64_t v71 = &v44;
  uint64_t v62 = a5;
  outlined init with copy of Either<LogisticRegressionClassifier<Float, String>, FullyConnectedNetworkClassifier<Float, String>>(a5, (uint64_t)&v57, &demangling cache variable for type metadata for Any?);
  if (!v58) {
    BUG();
  }
  uint64_t v67 = v19;
  uint64_t v27 = *(int *)(v19 + 48);
  uint64_t v28 = (uint64_t)v71;
  uint64_t v29 = (uint64_t)v71 + v27;
  uint64_t v30 = &v45;
  outlined init with take of Any(&v57, &v45);
  swift_dynamicCast(&v44, &v45, (char *)&type metadata for Any + 8, v74, 7);
  uint64_t v31 = v72;
  MLBoostedTreeRegressor.ModelParameters.ValidationData.generateDataFrames(trainingData:)(v28, v29, v73);
  outlined destroy of MLActivityClassifier.ModelParameters((uint64_t)&v44, type metadata accessor for MLBoostedTreeRegressor.ModelParameters.ValidationData);
  if (!v31)
  {
    unint64_t v32 = (void (*)(uint64_t *, uint64_t, uint64_t))((char *)v75 + *(int *)(v67 + 48));
    uint64_t v33 = type metadata accessor for DataFrame(0);
    uint64_t v69 = *(void *)(v33 - 8);
    uint64_t v72 = *(void (**)(void, void, void))(v69 + 16);
    uint64_t v64 = 0;
    uint64_t v34 = (uint64_t)v71;
    v72(v75, v71, v33);
    uint64_t v73 = v32;
    outlined init with copy of Either<LogisticRegressionClassifier<Float, String>, FullyConnectedNetworkClassifier<Float, String>>(v29, (uint64_t)v32, &demangling cache variable for type metadata for DataFrame?);
    uint64_t v30 = (long long *)((char *)v70 + *(int *)(v67 + 48));
    uint64_t v74 = v33;
    v72(v70, v34, v33);
    outlined init with copy of Either<LogisticRegressionClassifier<Float, String>, FullyConnectedNetworkClassifier<Float, String>>(v29, (uint64_t)v30, &demangling cache variable for type metadata for DataFrame?);
    outlined init with copy of MLBoostedTreeRegressor.ModelParameters(v62, (uint64_t)&v45);
    swift_bridgeObjectRetain(v65);
    swift_bridgeObjectRetain((_BYTE)v66);
    uint64_t v35 = (uint64_t)v61;
    BoostedTreeConfiguration.init()();
    BoostedTreeConfiguration.maximumDepth.setter(v47);
    BoostedTreeConfiguration.maximumIterations.setter(v48);
    BoostedTreeConfiguration.minimumLossReduction.setter(v49);
    BoostedTreeConfiguration.minimumChildWeight.setter(v50);
    BoostedTreeConfiguration.randomSeed.setter(v51);
    BoostedTreeConfiguration.learningRate.setter(v52);
    BoostedTreeConfiguration.earlyStoppingIterationCount.setter(v53, v54);
    BoostedTreeConfiguration.rowSubsample.setter(v55);
    BoostedTreeConfiguration.columnSubsample.setter(v56);
    outlined destroy of MLBoostedTreeRegressor.ModelParameters((uint64_t)&v45);
    uint64_t v36 = (uint64_t)v60;
    outlined init with copy of MLTrainingSessionParameters(v68, (uint64_t)v60, type metadata accessor for MLTrainingSessionParameters);
    uint64_t v37 = type metadata accessor for TreeRegressorTrainingSessionDelegate(0);
    swift_allocObject(v37, *(unsigned int *)(v37 + 48), *(unsigned __int16 *)(v37 + 52));
    uint64_t v38 = v64;
    uint64_t v39 = TreeRegressorTrainingSessionDelegate.init(trainingData:validationData:targetColumn:featureColumns:configuration:sessionParameters:)((uint64_t)v75, (uint64_t)v30, v59, v66, v65, v35, v36);
    if (v38)
    {
      outlined destroy of Either<LogisticRegressionClassifier<Float, String>, FullyConnectedNetworkClassifier<Float, String>>((uint64_t)v71, &demangling cache variable for type metadata for (training: DataFrame, validation: DataFrame?));
      (*(void (**)(uint64_t *, uint64_t))(v69 + 8))(v70, v74);
      outlined destroy of Either<LogisticRegressionClassifier<Float, String>, FullyConnectedNetworkClassifier<Float, String>>((uint64_t)v73, &demangling cache variable for type metadata for DataFrame?);
    }
    else
    {
      uint64_t v40 = (uint64_t)v39;
      (*(void (**)(uint64_t *, uint64_t))(v69 + 8))(v70, v74);
      outlined destroy of Either<LogisticRegressionClassifier<Float, String>, FullyConnectedNetworkClassifier<Float, String>>((uint64_t)v73, &demangling cache variable for type metadata for DataFrame?);
      uint64_t v46 = v37;
      uint64_t v47 = &protocol witness table for TreeRegressorTrainingSessionDelegate;
      *(void *)&long long v45 = v40;
      uint64_t v41 = (uint64_t)v63;
      outlined init with copy of MLTrainingSessionParameters(v68, (uint64_t)v63, type metadata accessor for MLTrainingSessionParameters);
      uint64_t v42 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for MLTrainingSession<MLBoostedTreeRegressor>);
      swift_allocObject(v42, *(unsigned int *)(v42 + 48), *(unsigned __int16 *)(v42 + 52));
      uint64_t v75 = (uint64_t *)v40;
      swift_retain();
      uint64_t v30 = (long long *)specialized MLTrainingSession.init(delegate:parameters:modelType:)((uint64_t)&v45, v41, 4);
      outlined destroy of Either<LogisticRegressionClassifier<Float, String>, FullyConnectedNetworkClassifier<Float, String>>((uint64_t)v71, &demangling cache variable for type metadata for (training: DataFrame, validation: DataFrame?));
      swift_release();
    }
  }
  return v30;
}

uint64_t static MLBoostedTreeRegressor.restoreTrainingSession(sessionParameters:)(uint64_t a1)
{
  int64_t v2 = *(void *)(*(void *)(type metadata accessor for MLTrainingSessionParameters(0) - 8) + 64);
  uint64_t v3 = alloca(v2);
  int64_t v4 = alloca(v2);
  char v12 = v11;
  uint64_t v5 = alloca(v2);
  uint64_t v6 = alloca(v2);
  outlined init with copy of MLTrainingSessionParameters(a1, (uint64_t)v11, type metadata accessor for MLTrainingSessionParameters);
  uint64_t v7 = type metadata accessor for TreeRegressorTrainingSessionDelegate(0);
  swift_allocObject(v7, *(unsigned int *)(v7 + 48), *(unsigned __int16 *)(v7 + 52));
  uint64_t result = TreeRegressorTrainingSessionDelegate.init(sessionParameters:)((uint64_t)v11);
  if (!v1)
  {
    v11[3] = v7;
    v11[4] = &protocol witness table for TreeRegressorTrainingSessionDelegate;
    v11[0] = result;
    uint64_t v9 = (uint64_t)v12;
    outlined init with copy of MLTrainingSessionParameters(a1, (uint64_t)v12, type metadata accessor for MLTrainingSessionParameters);
    uint64_t v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for MLTrainingSession<MLBoostedTreeRegressor>);
    swift_allocObject(v10, *(unsigned int *)(v10 + 48), *(unsigned __int16 *)(v10 + 52));
    return specialized MLTrainingSession.init(delegate:parameters:modelType:)((uint64_t)v11, v9, 4);
  }
  return result;
}

uint64_t closure #1 in closure #1 in static MLBoostedTreeRegressor.resume(_:)(uint64_t a1, char a2, uint64_t a3, void (*a4)(uint64_t *), uint64_t a5)
{
  uint64_t v22 = a5;
  uint64_t v23 = a4;
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Result<MLBoostedTreeRegressor, Error>);
  int64_t v7 = *(void *)(*(void *)(v6 - 8) + 64);
  int64_t v8 = alloca(v7);
  uint64_t v9 = alloca(v7);
  int64_t v10 = *(void *)(*(void *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TaskPriority?)
                              - 8)
                  + 64);
  char v11 = alloca(v10);
  char v12 = alloca(v10);
  if (a2)
  {
    uint64_t v19 = a1;
    swift_storeEnumTagMultiPayload(&v19, v6, 1);
    swift_errorRetain(a1);
    v23(&v19);
    return outlined destroy of Either<LogisticRegressionClassifier<Float, String>, FullyConnectedNetworkClassifier<Float, String>>((uint64_t)&v19, &demangling cache variable for type metadata for Result<MLBoostedTreeRegressor, Error>);
  }
  else
  {
    outlined init with copy of TabularRegressionTask(direct field offset for MLTrainingSession.delegate + a3, (uint64_t)v20);
    uint64_t v13 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TrainingSessionDelegate);
    uint64_t v14 = type metadata accessor for TreeRegressorTrainingSessionDelegate(0);
    swift_dynamicCast(&v21, v20, v13, v14, 7);
    uint64_t v15 = v21;
    uint64_t v16 = type metadata accessor for TaskPriority(0);
    __swift_storeEnumTagSinglePayload((uint64_t)&v19, 1, 1, v16);
    uint64_t v17 = swift_allocObject(&unk_39AF50, 56, 7);
    *(_OWORD *)(v17 + 16) = 0;
    *(void *)(v17 + 32) = v15;
    *(void *)(v17 + 40) = v23;
    *(void *)(v17 + 48) = v22;
    swift_retain();
    _sScTss5NeverORs_rlE8priority9operationScTyxABGScPSg_xyYaYAcntcfCyt_Tgm5((uint64_t)&v19, (uint64_t)&async function pointer to partial apply for closure #1 in static MLBoostedTreeRegressor.handleResult(_:session:fulfill:), v17);
    return swift_release();
  }
}

uint64_t closure #1 in static MLBoostedTreeRegressor.handleResult(_:session:fulfill:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  v6[4] = a6;
  v6[3] = a5;
  v6[2] = a4;
  uint64_t v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Result<MLBoostedTreeRegressor, Error>);
  v6[5] = swift_task_alloc((*(void *)(*(void *)(v7 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  return swift_task_switch(closure #1 in static MLBoostedTreeRegressor.handleResult(_:session:fulfill:), 0, 0);
}

uint64_t closure #1 in static MLBoostedTreeRegressor.handleResult(_:session:fulfill:)()
{
  uint64_t v1 = (char *)&async function pointer to specialized Result<>.init(catching:)
     + async function pointer to specialized Result<>.init(catching:);
  uint64_t v2 = dword_3AE65C;
  swift_retain();
  uint64_t v3 = (void *)swift_task_alloc(v2);
  v0[6] = v3;
  *uint64_t v3 = v0;
  v3[1] = closure #1 in static MLBoostedTreeRegressor.handleResult(_:session:fulfill:);
  return ((uint64_t (*)(void, void))v1)(v0[5], v0[2]);
}

{
  uint64_t v0;

  swift_task_dealloc(*(void *)(*(void *)v0 + 48));
  return swift_task_switch(closure #1 in static MLBoostedTreeRegressor.handleResult(_:session:fulfill:), 0, 0);
}

{
  uint64_t v0;
  uint64_t v1;

  uint64_t v1 = *(void *)(v0 + 40);
  (*(void (**)(uint64_t))(v0 + 24))(v1);
  outlined destroy of Either<LogisticRegressionClassifier<Float, String>, FullyConnectedNetworkClassifier<Float, String>>(v1, &demangling cache variable for type metadata for Result<MLBoostedTreeRegressor, Error>);
  swift_task_dealloc(v1);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t MLBoostedTreeRegressor.init(delegate:)(uint64_t a1, uint64_t a2)
{
  v2[37] = a2;
  v2[36] = a1;
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TreeRegressorModel?);
  v2[38] = swift_task_alloc((*(void *)(*(void *)(v3 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v4 = type metadata accessor for MLBoostedTreeRegressor(0);
  v2[39] = v4;
  v2[40] = swift_task_alloc((*(void *)(*(void *)(v4 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for DataFrame?);
  v2[41] = swift_task_alloc((*(void *)(*(void *)(v5 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = type metadata accessor for BoostedTreeConfiguration(0);
  v2[42] = v6;
  uint64_t v7 = *(void *)(v6 - 8);
  v2[43] = v7;
  v2[44] = swift_task_alloc((*(void *)(v7 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PersistentParametersForTreeBasedMethods?);
  v2[45] = swift_task_alloc((*(void *)(*(void *)(v8 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = type metadata accessor for PersistentParametersForTreeBasedMethods(0);
  v2[46] = v9;
  v2[47] = swift_task_alloc((*(void *)(*(void *)(v9 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  return swift_task_switch(MLBoostedTreeRegressor.init(delegate:), 0, 0);
}

uint64_t MLBoostedTreeRegressor.init(delegate:)()
{
  uint64_t v1 = v0[46];
  uint64_t v2 = v0[45];
  uint64_t v3 = OBJC_IVAR____TtC8CreateML36TreeRegressorTrainingSessionDelegate_trainingParameters + v0[37];
  swift_beginAccess(v3, v0 + 30, 0, 0);
  outlined init with copy of Either<LogisticRegressionClassifier<Float, String>, FullyConnectedNetworkClassifier<Float, String>>(v3, v2, &demangling cache variable for type metadata for PersistentParametersForTreeBasedMethods?);
  if (__swift_getEnumTagSinglePayload(v2, 1, v1) == 1) {
    BUG();
  }
  uint64_t v4 = v0[47];
  uint64_t v5 = (int *)v0[46];
  uint64_t v6 = v0[44];
  uint64_t v19 = v0[43];
  uint64_t v16 = v0[42];
  uint64_t v17 = v0[41];
  uint64_t v7 = v0[37];
  uint64_t v15 = v0[38];
  outlined init with take of MLClassifierMetrics(v0[45], v4, type metadata accessor for PersistentParametersForTreeBasedMethods);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v19 + 16))(v6, v4 + v5[8], v16);
  outlined init with copy of Either<LogisticRegressionClassifier<Float, String>, FullyConnectedNetworkClassifier<Float, String>>(v4 + v5[5], v17, &demangling cache variable for type metadata for DataFrame?);
  MLBoostedTreeRegressor.ModelParameters.init(configuration:validation:)(v6, v17);
  uint64_t v8 = v5[6];
  uint64_t v18 = *(void *)(v4 + v8);
  uint64_t v20 = *(void *)(v4 + v8 + 8);
  uint64_t v9 = *(void *)(v4 + v5[7]);
  uint64_t v10 = OBJC_IVAR____TtC8CreateML36TreeRegressorTrainingSessionDelegate_model + v7;
  swift_beginAccess(v10, v0 + 33, 0, 0);
  outlined init with copy of Either<LogisticRegressionClassifier<Float, String>, FullyConnectedNetworkClassifier<Float, String>>(v10, v15, &demangling cache variable for type metadata for TreeRegressorModel?);
  uint64_t v11 = type metadata accessor for TreeRegressorModel(0);
  if (__swift_getEnumTagSinglePayload(v15, 1, v11) == 1) {
    BUG();
  }
  outlined init with copy of MLBoostedTreeRegressor.ModelParameters((uint64_t)(v0 + 2), (uint64_t)(v0 + 16));
  uint64_t v12 = dword_3AB53C;
  swift_bridgeObjectRetain(v20);
  swift_bridgeObjectRetain(v9);
  uint64_t v13 = (void *)swift_task_alloc(v12);
  v0[48] = v13;
  *uint64_t v13 = v0;
  v13[1] = MLBoostedTreeRegressor.init(delegate:);
  return MLBoostedTreeRegressor.init(_:targetColumn:featureColumns:parameters:)(v0[40], v0[38], v18, v20, v9, (uint64_t)(v0 + 16));
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t (*v3)();

  uint64_t v2 = *(void *)(*(void *)v1 + 384);
  *(void *)(*(void *)v1 + 392) = v0;
  swift_task_dealloc(v2);
  if (v0) {
    uint64_t v3 = MLBoostedTreeRegressor.init(delegate:);
  }
  else {
    uint64_t v3 = MLBoostedTreeRegressor.init(delegate:);
  }
  return swift_task_switch(v3, 0, 0);
}

{
  uint64_t v0;
  uint64_t v1;
  char v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;

  uint64_t v1 = *(void *)(v0 + 296);
  outlined init with take of MLClassifierMetrics(*(void *)(v0 + 320), *(void *)(v0 + 288), type metadata accessor for MLBoostedTreeRegressor);
  uint64_t v2 = *(unsigned char *)(v1 + OBJC_IVAR____TtC8CreateML36TreeRegressorTrainingSessionDelegate_trainingMetrics + 16);
  if (v2 == -1) {
    BUG();
  }
  uint64_t v17 = *(void *)(v0 + 376);
  uint64_t v16 = *(void *)(v0 + 312);
  uint64_t v3 = *(void *)(v0 + 288);
  uint64_t v4 = *(void *)(v0 + 296);
  uint64_t v18 = *(void *)(v1 + OBJC_IVAR____TtC8CreateML36TreeRegressorTrainingSessionDelegate_trainingMetrics);
  uint64_t v15 = *(void *)(v1 + OBJC_IVAR____TtC8CreateML36TreeRegressorTrainingSessionDelegate_trainingMetrics + 8);
  outlined copy of Result<_RegressorMetrics, Error>(v18, v15, v2);
  outlined destroy of MLBoostedTreeRegressor.ModelParameters(v0 + 16);
  outlined destroy of MLActivityClassifier.ModelParameters(v17, type metadata accessor for PersistentParametersForTreeBasedMethods);
  uint64_t v5 = *(int *)(v16 + 36);
  outlined consume of Result<(Int, Int), Error>(*(void *)(v3 + v5), *(void *)(v3 + v5 + 8), *(_DWORD *)(v3 + v5 + 16));
  *(void *)(v3 + v5) = v18;
  *(void *)(v3 + v5 + 8) = v15;
  *(unsigned char *)(v3 + v5 + 16) = v2 & 1;
  uint64_t v6 = *(void *)(v4 + OBJC_IVAR____TtC8CreateML36TreeRegressorTrainingSessionDelegate_validationMetrics + 8);
  uint64_t v7 = *(unsigned char *)(v4 + OBJC_IVAR____TtC8CreateML36TreeRegressorTrainingSessionDelegate_validationMetrics + 16);
  uint64_t v19 = *(void *)(v4 + OBJC_IVAR____TtC8CreateML36TreeRegressorTrainingSessionDelegate_validationMetrics);
  outlined copy of MLRegressorMetrics?(v19, v6, v7);
  swift_release();
  if (v7 != -1)
  {
    uint64_t v8 = *(void *)(v0 + 288);
    uint64_t v9 = *(int *)(*(void *)(v0 + 312) + 40);
    outlined consume of Result<(Int, Int), Error>(*(void *)(v8 + v9), *(void *)(v8 + v9 + 8), *(_DWORD *)(v8 + v9 + 16));
    *(void *)(v8 + v9) = v19;
    *(void *)(v8 + v9 + 8) = v6;
    *(unsigned char *)(v8 + v9 + 16) = v7 & 1;
  }
  uint64_t v10 = *(void *)(v0 + 360);
  uint64_t v11 = *(void *)(v0 + 352);
  uint64_t v12 = *(void *)(v0 + 328);
  uint64_t v20 = *(void *)(v0 + 304);
  uint64_t v13 = *(void *)(v0 + 320);
  swift_task_dealloc(*(void *)(v0 + 376));
  swift_task_dealloc(v10);
  swift_task_dealloc(v11);
  swift_task_dealloc(v12);
  swift_task_dealloc(v13);
  swift_task_dealloc(v20);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  uint64_t v1 = *(void *)(v0 + 376);
  uint64_t v2 = *(void *)(v0 + 360);
  uint64_t v3 = *(void *)(v0 + 352);
  uint64_t v7 = *(void *)(v0 + 328);
  uint64_t v6 = *(void *)(v0 + 320);
  uint64_t v5 = *(void *)(v0 + 304);
  swift_release();
  outlined destroy of MLBoostedTreeRegressor.ModelParameters(v0 + 16);
  outlined destroy of MLActivityClassifier.ModelParameters(v1, type metadata accessor for PersistentParametersForTreeBasedMethods);
  swift_task_dealloc(v1);
  swift_task_dealloc(v2);
  swift_task_dealloc(v3);
  swift_task_dealloc(v7);
  swift_task_dealloc(v6);
  swift_task_dealloc(v5);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

unint64_t protocol witness for CustomStringConvertible.description.getter in conformance MLBoostedTreeRegressor()
{
  return MLBoostedTreeRegressor.description.getter();
}

unint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance MLBoostedTreeRegressor()
{
  return MLBoostedTreeRegressor.debugDescription.getter();
}

NSAttributedString protocol witness for CustomPlaygroundDisplayConvertible.playgroundDescription.getter in conformance MLBoostedTreeRegressor()
{
  return MLBoostedTreeRegressor.playgroundDescription.getter();
}

uint64_t protocol witness for TabularRegressionTask.validationMetrics.getter in conformance MLBoostedTreeRegressor()
{
  return MLBoostedTreeRegressor.validationMetrics.getter();
}

uint64_t outlined copy of MLModelMetadata?(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  if (a2)
  {
    swift_bridgeObjectRetain(a9);
    swift_bridgeObjectRetain(a2);
    swift_bridgeObjectRetain(a4);
    swift_bridgeObjectRetain(a6);
    return swift_bridgeObjectRetain(a8);
  }
  return result;
}

uint64_t outlined init with copy of MLBoostedTreeRegressor.ModelParameters(uint64_t a1, uint64_t a2)
{
  (*(void (**)(uint64_t, uint64_t))(*((void *)&type metadata for MLBoostedTreeRegressor.ModelParameters - 1)
                                           + 16))(a2, a1);
  return a2;
}

uint64_t outlined destroy of MLBoostedTreeRegressor.ModelParameters(uint64_t a1)
{
  return a1;
}

uint64_t sub_1DD7E0()
{
  return objectdestroyTm();
}

uint64_t partial apply for closure #1 in MLBoostedTreeRegressor.init(trainingData:targetColumn:featureColumns:parameters:)(uint64_t a1)
{
  type metadata accessor for TreeRegressorModel(0);
  uint64_t v2 = (void *)swift_task_alloc(dword_3AB444);
  *(void *)(v1 + 16) = v2;
  *uint64_t v2 = v1;
  v2[1] = partial apply for closure #1 in MLActivityClassifier.init(trainingData:featureColumns:labelColumn:recordingFileColumn:parameters:);
  return closure #1 in MLBoostedTreeRegressor.init(trainingData:targetColumn:featureColumns:parameters:)(a1);
}

uint64_t sub_1DD861()
{
  return objectdestroyTm();
}

uint64_t partial apply for closure #1 in MLBoostedTreeRegressor.init(checkpoint:)(uint64_t a1)
{
  type metadata accessor for TreeRegressorModel(0);
  uint64_t v2 = (void *)swift_task_alloc(dword_3AB454);
  *(void *)(v1 + 16) = v2;
  *uint64_t v2 = v1;
  v2[1] = partial apply for closure #1 in MLActivityClassifier.init(trainingData:featureColumns:labelColumn:recordingFileColumn:parameters:);
  return closure #1 in MLRandomForestRegressor.init(checkpoint:)(a1);
}

id sub_1DD8F4()
{
  uint64_t v1 = v0;
  id result = MLBoostedTreeRegressor.model.getter();
  void *v1 = result;
  return result;
}

void sub_1DD90E(id *a1)
{
}

void *initializeBufferWithCopyOfBuffer for MLBoostedTreeRegressor(void *a1, void *a2, int *a3)
{
  uint64_t v3 = a1;
  int v4 = *(_DWORD *)(*((void *)a3 - 1) + 80);
  if ((v4 & 0x20000) != 0)
  {
    uint64_t v9 = *a2;
    *uint64_t v3 = *a2;
    uint64_t v3 = (void *)(v9 + ((v4 + 16) & ~v4));
    swift_retain();
  }
  else
  {
    *a1 = *a2;
    uint64_t v6 = a2[1];
    v3[1] = v6;
    uint64_t v7 = a2[2];
    swift_bridgeObjectRetain(v6);
    if (v7)
    {
      v3[2] = v7;
      v3[3] = a2[3];
      uint64_t v8 = a2[4];
      v3[4] = v8;
      swift_bridgeObjectRetain(v7);
      swift_bridgeObjectRetain(v8);
    }
    else
    {
      v3[4] = a2[4];
      *((_OWORD *)v3 + 1) = *((_OWORD *)a2 + 1);
    }
    uint64_t v10 = *(int *)(type metadata accessor for TreeRegressorModel(0) + 24);
    uint64_t v11 = type metadata accessor for BaseTreeRegressorModel(0);
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v11 - 8) + 16))((char *)v3 + v10, (char *)a2 + v10, v11);
    uint64_t v12 = a3[5];
    uint64_t v13 = *(void **)((char *)a2 + v12);
    *(void *)((char *)v3 + v12) = v13;
    uint64_t v14 = a3[6];
    *(void *)((char *)v3 + v14) = *(void *)((char *)a2 + v14);
    uint64_t v29 = *(void *)((char *)a2 + v14 + 8);
    *(void *)((char *)v3 + v14 + 8) = v29;
    uint64_t v15 = a3[7];
    uint64_t v31 = *(void *)((char *)a2 + v15);
    *(void *)((char *)v3 + v15) = v31;
    uint64_t v30 = a3;
    uint64_t v16 = a3[8];
    uint64_t v17 = (char *)v3 + v16;
    uint64_t v18 = (char *)a2 + v16;
    uint64_t v19 = *(void *)((char *)a2 + v16 + 24);
    v13;
    swift_bridgeObjectRetain(v29);
    swift_bridgeObjectRetain(v31);
    if (v19)
    {
      *((void *)v17 + 3) = v19;
      (**(void (***)(char *, char *, uint64_t))(v19 - 8))(v17, v18, v19);
    }
    else
    {
      long long v20 = *(_OWORD *)v18;
      *((_OWORD *)v17 + 1) = *((_OWORD *)v18 + 1);
      *(_OWORD *)uint64_t v17 = v20;
    }
    *((_OWORD *)v17 + 2) = *((_OWORD *)v18 + 2);
    *((_OWORD *)v17 + 3) = *((_OWORD *)v18 + 3);
    *((_OWORD *)v17 + 4) = *((_OWORD *)v18 + 4);
    *((void *)v17 + 10) = *((void *)v18 + 10);
    v17[88] = v18[88];
    *((_OWORD *)v17 + 6) = *((_OWORD *)v18 + 6);
    uint64_t v21 = v30[9];
    uint64_t v22 = *(void *)((char *)a2 + v21);
    uint64_t v23 = *(void *)((char *)a2 + v21 + 8);
    char v32 = *((unsigned char *)a2 + v21 + 16);
    outlined copy of Result<_RegressorMetrics, Error>(v22, v23, v32);
    *(void *)((char *)v3 + v21) = v22;
    *(void *)((char *)v3 + v21 + 8) = v23;
    *((unsigned char *)v3 + v21 + 16) = v32;
    uint64_t v24 = v30[10];
    uint64_t v25 = *(void *)((char *)a2 + v24);
    uint64_t v26 = *(void *)((char *)a2 + v24 + 8);
    char v27 = *((unsigned char *)a2 + v24 + 16);
    outlined copy of Result<_RegressorMetrics, Error>(v25, v26, v27);
    *(void *)((char *)v3 + v24) = v25;
    *(void *)((char *)v3 + v24 + 8) = v26;
    *((unsigned char *)v3 + v24 + 16) = v27;
  }
  return v3;
}

void *initializeWithCopy for MLBoostedTreeRegressor(void *a1, void *a2, int *a3)
{
  *a1 = *a2;
  uint64_t v5 = a2[1];
  a1[1] = v5;
  uint64_t v6 = a2[2];
  swift_bridgeObjectRetain(v5);
  if (v6)
  {
    a1[2] = v6;
    a1[3] = a2[3];
    uint64_t v7 = a2[4];
    a1[4] = v7;
    swift_bridgeObjectRetain(v6);
    swift_bridgeObjectRetain(v7);
  }
  else
  {
    a1[4] = a2[4];
    *((_OWORD *)a1 + 1) = *((_OWORD *)a2 + 1);
  }
  uint64_t v8 = *(int *)(type metadata accessor for TreeRegressorModel(0) + 24);
  uint64_t v9 = type metadata accessor for BaseTreeRegressorModel(0);
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v9 - 8) + 16))((char *)a1 + v8, (char *)a2 + v8, v9);
  uint64_t v10 = a3[5];
  uint64_t v11 = *(void **)((char *)a2 + v10);
  *(void *)((char *)a1 + v10) = v11;
  uint64_t v12 = a3[6];
  *(void *)((char *)a1 + v12) = *(void *)((char *)a2 + v12);
  uint64_t v27 = *(void *)((char *)a2 + v12 + 8);
  *(void *)((char *)a1 + v12 + 8) = v27;
  uint64_t v13 = a3[7];
  uint64_t v29 = *(void *)((char *)a2 + v13);
  *(void *)((char *)a1 + v13) = v29;
  uint64_t v28 = a3;
  uint64_t v14 = a3[8];
  uint64_t v15 = (char *)a1 + v14;
  uint64_t v16 = (char *)a2 + v14;
  uint64_t v17 = *(void *)((char *)a2 + v14 + 24);
  v11;
  swift_bridgeObjectRetain(v27);
  swift_bridgeObjectRetain(v29);
  if (v17)
  {
    *((void *)v15 + 3) = v17;
    (**(void (***)(char *, char *, uint64_t))(v17 - 8))(v15, v16, v17);
  }
  else
  {
    long long v18 = *(_OWORD *)v16;
    *((_OWORD *)v15 + 1) = *((_OWORD *)v16 + 1);
    *(_OWORD *)uint64_t v15 = v18;
  }
  *((_OWORD *)v15 + 2) = *((_OWORD *)v16 + 2);
  *((_OWORD *)v15 + 3) = *((_OWORD *)v16 + 3);
  *((_OWORD *)v15 + 4) = *((_OWORD *)v16 + 4);
  *((void *)v15 + 10) = *((void *)v16 + 10);
  v15[88] = v16[88];
  *((_OWORD *)v15 + 6) = *((_OWORD *)v16 + 6);
  uint64_t v19 = v28[9];
  uint64_t v20 = *(void *)((char *)a2 + v19);
  uint64_t v21 = *(void *)((char *)a2 + v19 + 8);
  char v30 = *((unsigned char *)a2 + v19 + 16);
  outlined copy of Result<_RegressorMetrics, Error>(v20, v21, v30);
  *(void *)((char *)a1 + v19) = v20;
  *(void *)((char *)a1 + v19 + 8) = v21;
  *((unsigned char *)a1 + v19 + 16) = v30;
  uint64_t v22 = v28[10];
  uint64_t v23 = *(void *)((char *)a2 + v22);
  uint64_t v24 = *(void *)((char *)a2 + v22 + 8);
  char v25 = *((unsigned char *)a2 + v22 + 16);
  outlined copy of Result<_RegressorMetrics, Error>(v23, v24, v25);
  *(void *)((char *)a1 + v22) = v23;
  *(void *)((char *)a1 + v22 + 8) = v24;
  *((unsigned char *)a1 + v22 + 16) = v25;
  return a1;
}

void *assignWithCopy for MLBoostedTreeRegressor(void *a1, void *a2, int *a3)
{
  *a1 = *a2;
  uint64_t v4 = a2[1];
  uint64_t v5 = a1[1];
  a1[1] = v4;
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRelease(v5);
  uint64_t v6 = a1 + 2;
  uint64_t v7 = a2 + 2;
  uint64_t v8 = a1[2];
  uint64_t v9 = a2[2];
  if (v8)
  {
    if (v9)
    {
      a1[2] = v9;
      swift_bridgeObjectRetain(v9);
      swift_bridgeObjectRelease(v8);
      a1[3] = a2[3];
      uint64_t v10 = a2[4];
      uint64_t v11 = a1[4];
      a1[4] = v10;
      swift_bridgeObjectRetain(v10);
      swift_bridgeObjectRelease(v11);
    }
    else
    {
      outlined destroy of Either<LogisticRegressionClassifier<Float, String>, FullyConnectedNetworkClassifier<Float, String>>((uint64_t)(a1 + 2), &demangling cache variable for type metadata for FeatureVectorizer<Float>.Transformer);
      *uint64_t v6 = *v7;
      a1[4] = a2[4];
    }
  }
  else if (v9)
  {
    a1[2] = v9;
    a1[3] = a2[3];
    uint64_t v12 = a2[4];
    a1[4] = v12;
    swift_bridgeObjectRetain(v9);
    swift_bridgeObjectRetain(v12);
  }
  else
  {
    a1[4] = a2[4];
    *uint64_t v6 = *v7;
  }
  uint64_t v13 = *(int *)(type metadata accessor for TreeRegressorModel(0) + 24);
  uint64_t v14 = type metadata accessor for BaseTreeRegressorModel(0);
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v14 - 8) + 24))((char *)a1 + v13, (char *)a2 + v13, v14);
  uint64_t v15 = a3[5];
  uint64_t v16 = *(void **)((char *)a2 + v15);
  uint64_t v17 = *(void **)((char *)a1 + v15);
  *(void *)((char *)a1 + v15) = v16;
  v16;

  uint64_t v18 = a3[6];
  *(void *)((char *)a1 + v18) = *(void *)((char *)a2 + v18);
  uint64_t v19 = *(void *)((char *)a2 + v18 + 8);
  uint64_t v20 = *(void *)((char *)a1 + v18 + 8);
  *(void *)((char *)a1 + v18 + 8) = v19;
  swift_bridgeObjectRetain(v19);
  swift_bridgeObjectRelease(v20);
  uint64_t v21 = a3[7];
  uint64_t v22 = *(void *)((char *)a2 + v21);
  uint64_t v23 = *(void *)((char *)a1 + v21);
  *(void *)((char *)a1 + v21) = v22;
  swift_bridgeObjectRetain(v22);
  swift_bridgeObjectRelease(v23);
  uint64_t v24 = a3[8];
  char v25 = (char *)a1 + v24;
  uint64_t v26 = (char *)a2 + v24;
  uint64_t v27 = *(void *)((char *)a2 + v24 + 24);
  if (!*(void *)((char *)a1 + v24 + 24))
  {
    if (v27)
    {
      *((void *)v25 + 3) = v27;
      (**(void (***)(char *, char *))(v27 - 8))(v25, v26);
      goto LABEL_15;
    }
LABEL_14:
    long long v30 = *(_OWORD *)v26;
    *((_OWORD *)v25 + 1) = *((_OWORD *)v26 + 1);
    *(_OWORD *)char v25 = v30;
    goto LABEL_15;
  }
  uint64_t v29 = (void *)((char *)a1 + v24);
  if (!v27)
  {
    __swift_destroy_boxed_opaque_existential_1Tm(v29);
    goto LABEL_14;
  }
  __swift_assign_boxed_opaque_existential_0(v29, (void *)((char *)a2 + v24));
LABEL_15:
  *((void *)v25 + 4) = *((void *)v26 + 4);
  *((void *)v25 + 5) = *((void *)v26 + 5);
  *((void *)v25 + 6) = *((void *)v26 + 6);
  *((void *)v25 + 7) = *((void *)v26 + 7);
  *((void *)v25 + 8) = *((void *)v26 + 8);
  *((void *)v25 + 9) = *((void *)v26 + 9);
  *((void *)v25 + 10) = *((void *)v26 + 10);
  v25[88] = v26[88];
  *((void *)v25 + 12) = *((void *)v26 + 12);
  *((void *)v25 + 13) = *((void *)v26 + 13);
  uint64_t v31 = a3[9];
  uint64_t v32 = *(void *)((char *)a2 + v31);
  uint64_t v33 = *(void *)((char *)a2 + v31 + 8);
  char v45 = *((unsigned char *)a2 + v31 + 16);
  outlined copy of Result<_RegressorMetrics, Error>(v32, v33, v45);
  uint64_t v34 = *(void *)((char *)a1 + v31);
  uint64_t v35 = *(void *)((char *)a1 + v31 + 8);
  *(void *)((char *)a1 + v31) = v32;
  *(void *)((char *)a1 + v31 + 8) = v33;
  int v36 = *(_DWORD *)((char *)a1 + v31 + 16);
  *((unsigned char *)a1 + v31 + 16) = v45;
  outlined consume of Result<(Int, Int), Error>(v34, v35, v36);
  uint64_t v37 = a3[10];
  uint64_t v38 = *(void *)((char *)a2 + v37);
  uint64_t v39 = *(void *)((char *)a2 + v37 + 8);
  char v40 = *((unsigned char *)a2 + v37 + 16);
  outlined copy of Result<_RegressorMetrics, Error>(v38, v39, v40);
  uint64_t v41 = *(void *)((char *)a1 + v37);
  uint64_t v42 = *(void *)((char *)a1 + v37 + 8);
  *(void *)((char *)a1 + v37) = v38;
  *(void *)((char *)a1 + v37 + 8) = v39;
  int v43 = *(_DWORD *)((char *)a1 + v37 + 16);
  *((unsigned char *)a1 + v37 + 16) = v40;
  outlined consume of Result<(Int, Int), Error>(v41, v42, v43);
  return a1;
}

void *assignWithTake for MLBoostedTreeRegressor(void *a1, void *a2, int *a3)
{
  *a1 = *a2;
  uint64_t v6 = a1[1];
  a1[1] = a2[1];
  swift_bridgeObjectRelease(v6);
  uint64_t v7 = a1 + 2;
  uint64_t v8 = a2 + 2;
  uint64_t v9 = a1[2];
  if (v9)
  {
    uint64_t v10 = a2[2];
    if (v10)
    {
      a1[2] = v10;
      swift_bridgeObjectRelease(v9);
      a1[3] = a2[3];
      uint64_t v11 = a1[4];
      a1[4] = a2[4];
      swift_bridgeObjectRelease(v11);
    }
    else
    {
      outlined destroy of Either<LogisticRegressionClassifier<Float, String>, FullyConnectedNetworkClassifier<Float, String>>((uint64_t)(a1 + 2), &demangling cache variable for type metadata for FeatureVectorizer<Float>.Transformer);
      _OWORD *v7 = *v8;
      a1[4] = a2[4];
    }
  }
  else
  {
    a1[4] = a2[4];
    _OWORD *v7 = *v8;
  }
  uint64_t v12 = *(int *)(type metadata accessor for TreeRegressorModel(0) + 24);
  uint64_t v13 = type metadata accessor for BaseTreeRegressorModel(0);
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v13 - 8) + 40))((char *)a1 + v12, (char *)a2 + v12, v13);
  uint64_t v14 = a3[5];
  uint64_t v15 = *(void **)((char *)a1 + v14);
  *(void *)((char *)a1 + v14) = *(void *)((char *)a2 + v14);

  uint64_t v16 = a3[6];
  *(void *)((char *)a1 + v16) = *(void *)((char *)a2 + v16);
  uint64_t v17 = *(void *)((char *)a1 + v16 + 8);
  *(void *)((char *)a1 + v16 + 8) = *(void *)((char *)a2 + v16 + 8);
  swift_bridgeObjectRelease(v17);
  uint64_t v18 = a3[7];
  uint64_t v19 = *(void *)((char *)a1 + v18);
  *(void *)((char *)a1 + v18) = *(void *)((char *)a2 + v18);
  swift_bridgeObjectRelease(v19);
  uint64_t v20 = a3[8];
  uint64_t v21 = (char *)a1 + v20;
  if (*(void *)((char *)a1 + v20 + 24)) {
    __swift_destroy_boxed_opaque_existential_1Tm((void *)((char *)a1 + v20));
  }
  long long v22 = *(_OWORD *)((char *)a2 + v20);
  *((_OWORD *)v21 + 1) = *(_OWORD *)((char *)a2 + v20 + 16);
  *(_OWORD *)uint64_t v21 = v22;
  *(_OWORD *)((char *)a1 + v20 + 32) = *(_OWORD *)((char *)a2 + v20 + 32);
  *(_OWORD *)((char *)a1 + v20 + 48) = *(_OWORD *)((char *)a2 + v20 + 48);
  *(void *)((char *)a1 + v20 + 64) = *(void *)((char *)a2 + v20 + 64);
  *(void *)((char *)a1 + v20 + 72) = *(void *)((char *)a2 + v20 + 72);
  v21[88] = *((unsigned char *)a2 + v20 + 88);
  *((void *)v21 + 10) = *(void *)((char *)a2 + v20 + 80);
  *(_OWORD *)((char *)a1 + v20 + 96) = *(_OWORD *)((char *)a2 + v20 + 96);
  uint64_t v23 = a3[9];
  char v24 = *((unsigned char *)a2 + v23 + 16);
  uint64_t v25 = *(void *)((char *)a1 + v23);
  uint64_t v26 = *(void *)((char *)a1 + v23 + 8);
  *(_OWORD *)((char *)a1 + v23) = *(_OWORD *)((char *)a2 + v23);
  int v27 = *(_DWORD *)((char *)a1 + v23 + 16);
  *((unsigned char *)a1 + v23 + 16) = v24;
  outlined consume of Result<(Int, Int), Error>(v25, v26, v27);
  uint64_t v28 = a3[10];
  char v29 = *((unsigned char *)a2 + v28 + 16);
  uint64_t v30 = *(void *)((char *)a1 + v28);
  uint64_t v31 = *(void *)((char *)a1 + v28 + 8);
  *(_OWORD *)((char *)a1 + v28) = *(_OWORD *)((char *)a2 + v28);
  int v32 = *(_DWORD *)((char *)a1 + v28 + 16);
  *((unsigned char *)a1 + v28 + 16) = v29;
  outlined consume of Result<(Int, Int), Error>(v30, v31, v32);
  return a1;
}

uint64_t getEnumTagSinglePayload for MLBoostedTreeRegressor(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_1DE213);
}

uint64_t sub_1DE213(uint64_t a1, unsigned int a2, uint64_t a3)
{
  unsigned int v4 = 0;
  uint64_t v5 = type metadata accessor for TreeRegressorModel(0);
  if (*(_DWORD *)(*(void *)(v5 - 8) + 84) == a2) {
    return __swift_getEnumTagSinglePayload(a1, a2, v5);
  }
  if ((*(void *)(a1 + *(int *)(a3 + 20)) & 0xFFFFFFFF00000001) == 0) {
    return (*(void *)(a1 + *(int *)(a3 + 20)) >> 1) + 1;
  }
  return v4;
}

uint64_t storeEnumTagSinglePayload for MLBoostedTreeRegressor(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_1DE28D);
}

uint64_t sub_1DE28D(uint64_t a1, unsigned int a2, int a3, uint64_t a4)
{
  uint64_t v6 = type metadata accessor for TreeRegressorModel(0);
  if (*(_DWORD *)(*(void *)(v6 - 8) + 84) == a3) {
    return __swift_storeEnumTagSinglePayload(a1, a2, a2, v6);
  }
  uint64_t result = *(int *)(a4 + 20);
  *(void *)(a1 + result) = 2 * (a2 - 1);
  return result;
}

uint64_t type metadata completion function for MLBoostedTreeRegressor(uint64_t a1)
{
  uint64_t result = type metadata accessor for TreeRegressorModel(319);
  if (v2 <= 0x3F)
  {
    v3[0] = *(void *)(result - 8) + 64;
    v3[1] = (char *)&value witness table for Builtin.UnknownObject + 64;
    v3[2] = &unk_34E2C8;
    v3[3] = (char *)&value witness table for Builtin.BridgeObject + 64;
    v3[4] = &unk_34E2E0;
    v3[5] = &unk_34E2F8;
    v3[6] = &unk_34E2F8;
    swift_initStructMetadata(a1, 256, 7, v3, a1 + 16);
    return 0;
  }
  return result;
}

uint64_t specialized Dictionary._Variant.merge<A>(_:uniquingKeysWith:)(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  uint64_t v9 = a3;
  unsigned __int8 isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*a4);
  uint64_t v8 = *a4;
  *a4 = 0x8000000000000000;
  specialized _NativeDictionary.merge<A>(_:isUnique:uniquingKeysWith:)(a1, a2, v9, isUniquelyReferenced_nonNull_native, &v8);
  uint64_t v6 = *a4;
  *a4 = v8;
  return swift_bridgeObjectRelease(v6);
}

{
  unsigned __int8 isUniquelyReferenced_nonNull_native;
  uint64_t v6;
  uint64_t v8;
  uint64_t v9;

  uint64_t v9 = a3;
  unsigned __int8 isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*a4);
  uint64_t v8 = *a4;
  *a4 = 0x8000000000000000;
  specialized _NativeDictionary.merge<A>(_:isUnique:uniquingKeysWith:)(a1, a2, v9, isUniquelyReferenced_nonNull_native, &v8);
  uint64_t v6 = *a4;
  *a4 = v8;
  return swift_bridgeObjectRelease(v6);
}

uint64_t sub_1DE623()
{
  swift_unknownObjectRelease(v0[2]);
  swift_release(v0[4]);
  swift_release(v0[6]);
  return swift_deallocObject(v0, 56, 7);
}

uint64_t partial apply for closure #1 in static MLBoostedTreeRegressor.handleResult(_:session:fulfill:)(uint64_t a1)
{
  uint64_t v3 = v1[2];
  uint64_t v4 = v1[3];
  uint64_t v8 = v1[4];
  uint64_t v9 = v1[5];
  uint64_t v5 = v1[6];
  uint64_t v6 = (void *)swift_task_alloc(dword_3AB524);
  *(void *)(v2 + 16) = v6;
  *uint64_t v6 = v2;
  v6[1] = partial apply for specialized closure #1 in blockAwait<A>(_:);
  return closure #1 in static MLBoostedTreeRegressor.handleResult(_:session:fulfill:)(a1, v3, v4, v8, v9, v5);
}

uint64_t closure #1 in MLBoostedTreeRegressor.init(trainingData:targetColumn:featureColumns:parameters:)()
{
  return closure #1 in MLRandomForestRegressor.init(checkpoint:)();
}

uint64_t static MLActionClassifier.__Defaults.batchSize.getter()
{
  return 32;
}

uint64_t static MLActionClassifier.__Defaults.maximumIterations.getter()
{
  return 80;
}

uint64_t static MLActionClassifier.__Defaults.predictionWindowSize.getter()
{
  return 30;
}

uint64_t static MLActionClassifier.__Defaults.sessionIdColumnName.getter()
{
  return 0x5F6E6F6973736573;
}

uint64_t static MLActionClassifier.__Defaults.featureColumnName.getter()
{
  return 0x746E696F7079656BLL;
}

uint64_t static MLActionClassifier.__Defaults.labelColumnName.getter()
{
  return 0x6C6562616CLL;
}

uint64_t static MLActionClassifier.__Defaults.videoColumnName.getter()
{
  return 0x7461506F65646976;
}

uint64_t static MLActionClassifier.__Defaults.startTimeColumnName.getter()
{
  return 0x7472617473;
}

uint64_t static MLActionClassifier.__Defaults.endTimeColumnName.getter()
{
  return 6581861;
}

double static MLActionClassifier.__Defaults.targetFrameRate.getter()
{
  return 30.0;
}

ValueMetadata *type metadata accessor for MLActionClassifier.__Defaults()
{
  return &type metadata for MLActionClassifier.__Defaults;
}

uint64_t LogisticRegressionClassifierTrainingSessionDelegate.init(sessionParameters:)(uint64_t a1)
{
  uint64_t v2 = v1 + OBJC_IVAR____TtC8CreateML51LogisticRegressionClassifierTrainingSessionDelegate_trainingParameters;
  uint64_t v3 = type metadata accessor for MLLogisticRegressionClassifier.PersistentParameters(0);
  __swift_storeEnumTagSinglePayload(v2, 1, 1, v3);
  DataFrame.init()(v2, 1, v4, v5);
  uint64_t v6 = v1 + OBJC_IVAR____TtC8CreateML51LogisticRegressionClassifierTrainingSessionDelegate_validationData;
  uint64_t v7 = type metadata accessor for DataFrame(0);
  __swift_storeEnumTagSinglePayload(v6, 1, 1, v7);
  uint64_t v8 = v1 + OBJC_IVAR____TtC8CreateML51LogisticRegressionClassifierTrainingSessionDelegate_classifier;
  uint64_t v9 = type metadata accessor for MLLogisticRegressionClassifier.Classifier(0);
  __swift_storeEnumTagSinglePayload(v8, 1, 1, v9);
  uint64_t v10 = v1 + OBJC_IVAR____TtC8CreateML51LogisticRegressionClassifierTrainingSessionDelegate_model;
  uint64_t v11 = type metadata accessor for MLLogisticRegressionClassifier.Model(0);
  __swift_storeEnumTagSinglePayload(v10, 1, 1, v11);
  uint64_t v12 = v1 + OBJC_IVAR____TtC8CreateML51LogisticRegressionClassifierTrainingSessionDelegate_trainingMetrics;
  uint64_t v13 = type metadata accessor for MLClassifierMetrics(0);
  __swift_storeEnumTagSinglePayload(v12, 1, 1, v13);
  __swift_storeEnumTagSinglePayload(v1 + OBJC_IVAR____TtC8CreateML51LogisticRegressionClassifierTrainingSessionDelegate_validationMetrics, 1, 1, v13);
  outlined init with take of MLClassifierMetrics(a1, v1 + OBJC_IVAR____TtC8CreateML51LogisticRegressionClassifierTrainingSessionDelegate_sessionParameters, type metadata accessor for MLTrainingSessionParameters);
  return v1;
}

char *LogisticRegressionClassifierTrainingSessionDelegate.init(trainingData:validationData:targetColumn:featureColumns:modelParameters:sessionParameters:)(uint64_t a1, uint64_t a2, uint64_t a3, void *a4, char *a5, uint64_t a6, uint64_t a7)
{
  uint64_t v97 = v7;
  uint64_t v9 = v8;
  uint64_t v92 = a6;
  context = a5;
  _ = a4;
  v90._uint64_t countAndFlagsBits = a3;
  uint64_t v95 = a2;
  uint64_t v93 = a1;
  uint64_t v85 = *(void *)v8;
  uint64_t v10 = type metadata accessor for MLLogisticRegressionClassifier.PersistentParameters(0);
  int64_t v11 = *(void *)(*(void *)(v10 - 8) + 64);
  uint64_t v12 = alloca(v11);
  uint64_t v13 = alloca(v11);
  uint64_t v82 = v77;
  int64_t v14 = *(void *)(*(void *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for MLLogisticRegressionClassifier.PersistentParameters?)
                              - 8)
                  + 64);
  uint64_t v15 = alloca(v14);
  uint64_t v16 = alloca(v14);
  uint64_t v81 = v77;
  int64_t v17 = *(void *)(*(void *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for DataFrame?)
                              - 8)
                  + 64);
  uint64_t v18 = alloca(v17);
  uint64_t v19 = alloca(v17);
  uint64_t v87 = v77;
  uint64_t v20 = alloca(v17);
  uint64_t v21 = alloca(v17);
  uint64_t v86 = v77;
  uint64_t v22 = type metadata accessor for DataFrame(0);
  uint64_t v96 = *(void *)(v22 - 8);
  int64_t v23 = *(void *)(v96 + 64);
  char v24 = alloca(v23);
  uint64_t v25 = alloca(v23);
  uint64_t v88 = v77;
  uint64_t v26 = alloca(v23);
  int v27 = alloca(v23);
  uint64_t v79 = v77;
  uint64_t v28 = &v9[OBJC_IVAR____TtC8CreateML51LogisticRegressionClassifierTrainingSessionDelegate_trainingParameters];
  uint64_t v83 = &v9[OBJC_IVAR____TtC8CreateML51LogisticRegressionClassifierTrainingSessionDelegate_trainingParameters];
  uint64_t v80 = (int *)v10;
  __swift_storeEnumTagSinglePayload((uint64_t)&v9[OBJC_IVAR____TtC8CreateML51LogisticRegressionClassifierTrainingSessionDelegate_trainingParameters], 1, 1, v10);
  DataFrame.init()(v28, 1, v29, v30);
  uint64_t v94 = v22;
  __swift_storeEnumTagSinglePayload((uint64_t)&v9[OBJC_IVAR____TtC8CreateML51LogisticRegressionClassifierTrainingSessionDelegate_validationData], 1, 1, v22);
  uint64_t v31 = (uint64_t)&v9[OBJC_IVAR____TtC8CreateML51LogisticRegressionClassifierTrainingSessionDelegate_classifier];
  uint64_t v32 = type metadata accessor for MLLogisticRegressionClassifier.Classifier(0);
  __swift_storeEnumTagSinglePayload(v31, 1, 1, v32);
  uint64_t v33 = (uint64_t)&v9[OBJC_IVAR____TtC8CreateML51LogisticRegressionClassifierTrainingSessionDelegate_model];
  uint64_t v34 = type metadata accessor for MLLogisticRegressionClassifier.Model(0);
  __swift_storeEnumTagSinglePayload(v33, 1, 1, v34);
  uint64_t v35 = (uint64_t)&v9[OBJC_IVAR____TtC8CreateML51LogisticRegressionClassifierTrainingSessionDelegate_trainingMetrics];
  uint64_t v36 = type metadata accessor for MLClassifierMetrics(0);
  __swift_storeEnumTagSinglePayload(v35, 1, 1, v36);
  v90._unsigned __int8 object = v9;
  uint64_t v37 = (uint64_t)&v9[OBJC_IVAR____TtC8CreateML51LogisticRegressionClassifierTrainingSessionDelegate_validationMetrics];
  uint64_t v38 = (uint64_t)context;
  uint64_t v39 = _;
  __swift_storeEnumTagSinglePayload(v37, 1, 1, v36);
  uint64_t v40 = v97;
  uint64_t v41 = static _FeatureUtilities.selectFeaturesFromTrainingData(trainingData:targetColumn:featureColumns:)(v93, v90._countAndFlagsBits, v39, v38);
  uint64_t v97 = v40;
  if (v40)
  {
    swift_bridgeObjectRelease((_BYTE)v39);
    swift_bridgeObjectRelease(v38);
    outlined destroy of MLActivityClassifier.ModelParameters(a7, type metadata accessor for MLTrainingSessionParameters);
    outlined destroy of MLLogisticRegressionClassifier.ModelParameters(v92);
    outlined destroy of Either<LogisticRegressionClassifier<Float, String>, FullyConnectedNetworkClassifier<Float, String>>(v95, &demangling cache variable for type metadata for DataFrame?);
    uint64_t v42 = *(void (**)(uint64_t, uint64_t))(v96 + 8);
    uint64_t v43 = v94;
    v42(v93, v94);
    goto LABEL_4;
  }
  uint64_t v46 = v41;
  char v47 = v38;
  uint64_t v48 = v79;
  swift_bridgeObjectRelease(v47);
  uint64_t v49 = v95;
  uint64_t v50 = (uint64_t)v86;
  outlined init with copy of Either<LogisticRegressionClassifier<Float, String>, FullyConnectedNetworkClassifier<Float, String>>(v95, (uint64_t)v86, &demangling cache variable for type metadata for DataFrame?);
  uint64_t v51 = v50;
  uint64_t v52 = v94;
  int EnumTagSinglePayload = __swift_getEnumTagSinglePayload(v51, 1, v94);
  uint64_t v89 = v46;
  if (EnumTagSinglePayload == 1)
  {
    outlined destroy of Either<LogisticRegressionClassifier<Float, String>, FullyConnectedNetworkClassifier<Float, String>>((uint64_t)v86, &demangling cache variable for type metadata for DataFrame?);
    uint64_t v54 = v96;
LABEL_7:
    uint64_t v55 = (uint64_t)v87;
    uint64_t v56 = v94;
    (*(void (**)(unsigned char *, uint64_t, uint64_t))(v54 + 16))(v88, v93, v94);
    outlined init with copy of Either<LogisticRegressionClassifier<Float, String>, FullyConnectedNetworkClassifier<Float, String>>(v49, v55, &demangling cache variable for type metadata for DataFrame?);
    outlined init with copy of MLLogisticRegressionClassifier.ModelParameters(v92, (uint64_t)v78);
    long long v57 = v80;
    uint64_t v58 = (uint64_t)v82;
    uint64_t v59 = (uint64_t)&v82[v80[5]];
    __swift_storeEnumTagSinglePayload(v59, 1, 1, v56);
    uint64_t v60 = v56;
    uint64_t v61 = v96;
    (*(void (**)(uint64_t, unsigned char *, uint64_t))(v96 + 32))(v58, v88, v60);
    outlined assign with take of MLClassifierMetrics?((uint64_t)v87, v59, &demangling cache variable for type metadata for DataFrame?);
    uint64_t v62 = v57[6];
    *(void *)(v58 + v62) = v90._countAndFlagsBits;
    *(void *)(v58 + v62 + 8) = _;
    *(void *)(v58 + v57[7]) = v89;
    qmemcpy((void *)(v58 + v57[8]), v78, 0x49uLL);
    uint64_t v63 = (uint64_t)v81;
    outlined init with take of MLClassifierMetrics(v58, (uint64_t)v81, type metadata accessor for MLLogisticRegressionClassifier.PersistentParameters);
    outlined destroy of MLLogisticRegressionClassifier.ModelParameters(v92);
    outlined destroy of Either<LogisticRegressionClassifier<Float, String>, FullyConnectedNetworkClassifier<Float, String>>(v95, &demangling cache variable for type metadata for DataFrame?);
    (*(void (**)(uint64_t, uint64_t))(v61 + 8))(v93, v94);
    __swift_storeEnumTagSinglePayload(v63, 0, 1, (uint64_t)v57);
    uint64_t v64 = (uint64_t)v83;
    swift_beginAccess(v83, v78, 33, 0);
    outlined assign with take of MLClassifierMetrics?(v63, v64, &demangling cache variable for type metadata for MLLogisticRegressionClassifier.PersistentParameters?);
    swift_endAccess(v78);
    unsigned __int8 object = (char *)v90._object;
    outlined init with take of MLClassifierMetrics(a7, (uint64_t)v90._object+ OBJC_IVAR____TtC8CreateML51LogisticRegressionClassifierTrainingSessionDelegate_sessionParameters, type metadata accessor for MLTrainingSessionParameters);
    return object;
  }
  (*(void (**)(unsigned char *, unsigned char *, uint64_t))(v96 + 32))(v48, v86, v52);
  uint64_t v66 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<String>);
  uint64_t inited = (void *)swift_initStackObject(v66, v77);
  inited[2] = 1;
  inited[3] = 2;
  inited[4] = v90._countAndFlagsBits;
  char v68 = (char)_;
  inited[5] = _;
  swift_bridgeObjectRetain(v68);
  context = "Algorithm type: " + 0x8000000000000000;
  DataFrame.validateContainsColumns(_:context:)((Swift::OpaquePointer)inited, (Swift::String)__PAIR128__((unint64_t)("Algorithm type: " + 0x8000000000000000), 0xD00000000000001CLL));
  uint64_t v97 = v69;
  if (v69)
  {
    swift_setDeallocating(inited);
    specialized _ContiguousArrayStorage.__deallocating_deinit();
    swift_bridgeObjectRelease((_BYTE)_);
    swift_bridgeObjectRelease((_BYTE)v89);
    outlined destroy of MLActivityClassifier.ModelParameters(a7, type metadata accessor for MLTrainingSessionParameters);
    outlined destroy of MLLogisticRegressionClassifier.ModelParameters(v92);
    outlined destroy of Either<LogisticRegressionClassifier<Float, String>, FullyConnectedNetworkClassifier<Float, String>>(v95, &demangling cache variable for type metadata for DataFrame?);
    uint64_t v42 = *(void (**)(uint64_t, uint64_t))(v96 + 8);
    v42(v93, v52);
    v42((uint64_t)v48, v52);
    uint64_t v43 = v52;
  }
  else
  {
    swift_setDeallocating(inited);
    specialized _ContiguousArrayStorage.__deallocating_deinit();
    uint64_t v70 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Any.Type>);
    uint64_t v71 = (void *)swift_allocObject(v70, 48, 7);
    v71[2] = 2;
    v71[3] = 4;
    v71[4] = &type metadata for String;
    v71[5] = &type metadata for Int;
    v72._uint64_t countAndFlagsBits = v90._countAndFlagsBits;
    char v73 = (char)_;
    v72._unsigned __int8 object = _;
    char v74 = (char)v71;
    DataFrame.validateColumnTypes(_:_:context:)(v72, (Swift::OpaquePointer)v71, (Swift::String)__PAIR128__((unint64_t)context, 0xD00000000000001CLL));
    uint64_t v97 = v75;
    if (!v75)
    {
      uint64_t v76 = v96;
      (*(void (**)(unsigned char *, uint64_t))(v96 + 8))(v48, v94);
      swift_bridgeObjectRelease(v74);
      uint64_t v54 = v76;
      uint64_t v49 = v95;
      goto LABEL_7;
    }
    swift_bridgeObjectRelease(v73);
    swift_bridgeObjectRelease((_BYTE)v89);
    swift_bridgeObjectRelease(v74);
    outlined destroy of MLActivityClassifier.ModelParameters(a7, type metadata accessor for MLTrainingSessionParameters);
    outlined destroy of MLLogisticRegressionClassifier.ModelParameters(v92);
    outlined destroy of Either<LogisticRegressionClassifier<Float, String>, FullyConnectedNetworkClassifier<Float, String>>(v95, &demangling cache variable for type metadata for DataFrame?);
    uint64_t v42 = *(void (**)(uint64_t, uint64_t))(v96 + 8);
    uint64_t v43 = v94;
    v42(v93, v94);
    v42((uint64_t)v48, v43);
  }
LABEL_4:
  uint64_t v44 = v85;
  unsigned __int8 object = (char *)v90._object;
  outlined destroy of Either<LogisticRegressionClassifier<Float, String>, FullyConnectedNetworkClassifier<Float, String>>((uint64_t)v90._object+ OBJC_IVAR____TtC8CreateML51LogisticRegressionClassifierTrainingSessionDelegate_trainingParameters, &demangling cache variable for type metadata for MLLogisticRegressionClassifier.PersistentParameters?);
  v42((uint64_t)&object[OBJC_IVAR____TtC8CreateML51LogisticRegressionClassifierTrainingSessionDelegate_trainingData], v43);
  outlined destroy of Either<LogisticRegressionClassifier<Float, String>, FullyConnectedNetworkClassifier<Float, String>>((uint64_t)&object[OBJC_IVAR____TtC8CreateML51LogisticRegressionClassifierTrainingSessionDelegate_validationData], &demangling cache variable for type metadata for DataFrame?);
  outlined destroy of Either<LogisticRegressionClassifier<Float, String>, FullyConnectedNetworkClassifier<Float, String>>((uint64_t)&object[OBJC_IVAR____TtC8CreateML51LogisticRegressionClassifierTrainingSessionDelegate_classifier], &demangling cache variable for type metadata for MLLogisticRegressionClassifier.Classifier?);
  outlined destroy of Either<LogisticRegressionClassifier<Float, String>, FullyConnectedNetworkClassifier<Float, String>>((uint64_t)&object[OBJC_IVAR____TtC8CreateML51LogisticRegressionClassifierTrainingSessionDelegate_model], &demangling cache variable for type metadata for MLLogisticRegressionClassifier.Model?);
  outlined destroy of Either<LogisticRegressionClassifier<Float, String>, FullyConnectedNetworkClassifier<Float, String>>((uint64_t)&object[OBJC_IVAR____TtC8CreateML51LogisticRegressionClassifierTrainingSessionDelegate_trainingMetrics], &demangling cache variable for type metadata for MLClassifierMetrics?);
  outlined destroy of Either<LogisticRegressionClassifier<Float, String>, FullyConnectedNetworkClassifier<Float, String>>((uint64_t)&object[OBJC_IVAR____TtC8CreateML51LogisticRegressionClassifierTrainingSessionDelegate_validationMetrics], &demangling cache variable for type metadata for MLClassifierMetrics?);
  swift_deallocPartialClassInstance(object, v44, *(unsigned int *)(*(void *)object + 48), *(unsigned __int16 *)(*(void *)object + 52));
  return object;
}

Swift::Void __swiftcall __spoils<cf,zf,sf,of,pf,rax,rdx,rcx,rdi,rsi,r8,r9,r10,r11,r12,xmm0,xmm1,xmm2,xmm3,xmm4,xmm5,xmm6,xmm7> LogisticRegressionClassifierTrainingSessionDelegate.setUp()()
{
  uint64_t v56 = v0;
  uint64_t v62 = type metadata accessor for BaseLogisticRegressionClassifierModel(0);
  uint64_t v61 = *(void *)(v62 - 8);
  int64_t v2 = *(void *)(v61 + 64);
  uint64_t v3 = alloca(v2);
  uint64_t v4 = alloca(v2);
  uint64_t v63 = &v53;
  int64_t v5 = *(void *)(*(void *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for MLLogisticRegressionClassifier.Model?)
                             - 8)
                 + 64);
  uint64_t v6 = alloca(v5);
  uint64_t v7 = alloca(v5);
  uint64_t v60 = &v53;
  int64_t v8 = *(void *)(*(void *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AnyColumn?)
                             - 8)
                 + 64);
  uint64_t v9 = alloca(v8);
  uint64_t v10 = alloca(v8);
  uint64_t v64 = &v53;
  uint64_t v57 = type metadata accessor for AnyColumn(0);
  int64_t v11 = *(void *)(*(void *)(v57 - 8) + 64);
  uint64_t v12 = alloca(v11);
  uint64_t v13 = alloca(v11);
  char v68 = &v53;
  int64_t v14 = *(void *)(*(void *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for MLLogisticRegressionClassifier.Classifier?)
                              - 8)
                  + 64);
  uint64_t v15 = alloca(v14);
  uint64_t v16 = alloca(v14);
  uint64_t v65 = &v53;
  int64_t v17 = alloca(v14);
  uint64_t v18 = alloca(v14);
  uint64_t v70 = &v53;
  int64_t v19 = *(void *)(*(void *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for MLLogisticRegressionClassifier.PersistentParameters?)
                              - 8)
                  + 64);
  uint64_t v20 = alloca(v19);
  uint64_t v21 = alloca(v19);
  uint64_t v22 = type metadata accessor for MLLogisticRegressionClassifier.PersistentParameters(0);
  int64_t v23 = *(void *)(*(void *)(v22 - 8) + 64);
  char v24 = alloca(v23);
  uint64_t v25 = alloca(v23);
  uint64_t v66 = &v53;
  uint64_t v67 = v1;
  uint64_t v26 = v1 + OBJC_IVAR____TtC8CreateML51LogisticRegressionClassifierTrainingSessionDelegate_trainingParameters;
  swift_beginAccess(v1 + OBJC_IVAR____TtC8CreateML51LogisticRegressionClassifierTrainingSessionDelegate_trainingParameters, v54, 0, 0);
  outlined init with copy of Either<LogisticRegressionClassifier<Float, String>, FullyConnectedNetworkClassifier<Float, String>>(v26, (uint64_t)&v53, &demangling cache variable for type metadata for MLLogisticRegressionClassifier.PersistentParameters?);
  uint64_t v69 = (int *)v22;
  if (__swift_getEnumTagSinglePayload((uint64_t)&v53, 1, v22) == 1)
  {
    outlined destroy of Either<LogisticRegressionClassifier<Float, String>, FullyConnectedNetworkClassifier<Float, String>>((uint64_t)&v53, &demangling cache variable for type metadata for MLLogisticRegressionClassifier.PersistentParameters?);
    BUG();
  }
  uint64_t v27 = (uint64_t)v66;
  outlined init with take of MLClassifierMetrics((uint64_t)&v53, (uint64_t)v66, type metadata accessor for MLLogisticRegressionClassifier.PersistentParameters);
  uint64_t v28 = v67 + OBJC_IVAR____TtC8CreateML51LogisticRegressionClassifierTrainingSessionDelegate_trainingData;
  uint64_t v59 = v67 + OBJC_IVAR____TtC8CreateML51LogisticRegressionClassifierTrainingSessionDelegate_trainingData;
  swift_beginAccess(v67 + OBJC_IVAR____TtC8CreateML51LogisticRegressionClassifierTrainingSessionDelegate_trainingData, v55, 33, 0);
  uint64_t v58 = type metadata accessor for DataFrame(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v58 - 8) + 24))(v28, v27, v58);
  swift_endAccess(v55);
  uint64_t v29 = v69;
  uint64_t v30 = v27 + v69[5];
  uint64_t v31 = v67 + OBJC_IVAR____TtC8CreateML51LogisticRegressionClassifierTrainingSessionDelegate_validationData;
  swift_beginAccess(v67 + OBJC_IVAR____TtC8CreateML51LogisticRegressionClassifierTrainingSessionDelegate_validationData, v55, 33, 0);
  outlined assign with copy of DataFrame?(v30, v31);
  swift_endAccess(v55);
  uint64_t v32 = v29[6];
  uint64_t v33 = *(void *)(v27 + v32);
  uint64_t v34 = *(void *)(v27 + v32 + 8);
  swift_beginAccess(v59, v55, 32, 0);
  swift_bridgeObjectRetain(v34);
  uint64_t v71 = v33;
  DataFrame.subscript.getter(v33, v34);
  swift_endAccess(v55);
  swift_bridgeObjectRelease(v34);
  swift_beginAccess(v31, v55, 32, 0);
  if (__swift_getEnumTagSinglePayload(v31, 1, v58))
  {
    swift_endAccess(v55);
    uint64_t v35 = 1;
    uint64_t v36 = (uint64_t)v64;
  }
  else
  {
    swift_bridgeObjectRetain(v34);
    uint64_t v36 = (uint64_t)v64;
    DataFrame.subscript.getter(v71, v34);
    swift_endAccess(v55);
    swift_bridgeObjectRelease(v34);
    uint64_t v35 = 0;
  }
  __swift_storeEnumTagSinglePayload(v36, v35, 1, v57);
  uint64_t v37 = (uint64_t)v66;
  uint64_t v38 = *(double **)((char *)v66 + v69[7]);
  outlined init with copy of MLLogisticRegressionClassifier.ModelParameters((uint64_t)v66 + v69[8], (uint64_t)v55);
  swift_bridgeObjectRetain(v34);
  swift_bridgeObjectRetain((_BYTE)v38);
  uint64_t v39 = v56;
  MLLogisticRegressionClassifier.Classifier.init(trainingLabelsColumn:validationLabelsColumn:annotationColumnName:featureColumnNames:parameters:)((uint64_t)v68, v36, v71, v34, v38, (uint64_t)v55);
  if (v39)
  {
    outlined destroy of MLActivityClassifier.ModelParameters(v37, type metadata accessor for MLLogisticRegressionClassifier.PersistentParameters);
  }
  else
  {
    char v68 = 0;
    uint64_t v40 = type metadata accessor for MLLogisticRegressionClassifier.Classifier(0);
    uint64_t v41 = (uint64_t)v70;
    __swift_storeEnumTagSinglePayload((uint64_t)v70, 0, 1, v40);
    uint64_t v42 = v67 + OBJC_IVAR____TtC8CreateML51LogisticRegressionClassifierTrainingSessionDelegate_classifier;
    swift_beginAccess(v67 + OBJC_IVAR____TtC8CreateML51LogisticRegressionClassifierTrainingSessionDelegate_classifier, v55, 33, 0);
    outlined assign with take of MLClassifierMetrics?(v41, v42, &demangling cache variable for type metadata for MLLogisticRegressionClassifier.Classifier?);
    swift_endAccess(v55);
    uint64_t v43 = v42;
    uint64_t v44 = (uint64_t)v65;
    outlined init with copy of Either<LogisticRegressionClassifier<Float, String>, FullyConnectedNetworkClassifier<Float, String>>(v43, (uint64_t)v65, &demangling cache variable for type metadata for MLLogisticRegressionClassifier.Classifier?);
    if (__swift_getEnumTagSinglePayload(v44, 1, v40) == 1) {
      BUG();
    }
    uint64_t v71 = *(void *)v44;
    uint64_t v45 = *(void *)(v44 + 8);
    uint64_t v70 = *(uint64_t **)(v44 + 104);
    LOBYTE(v69) = *(unsigned char *)(v44 + 112);
    uint64_t v46 = v70[2];
    swift_bridgeObjectRetain(v45);
    char v47 = v63;
    BaseLogisticRegressionClassifier.makeTransformer(classCount:)(v46);
    uint64_t v48 = (uint64_t)v60;
    *uint64_t v60 = v71;
    *(void *)(v48 + 8) = v45;
    uint64_t v49 = type metadata accessor for MLLogisticRegressionClassifier.Model(0);
    *(void *)(v48 + 32) = 0;
    *(_OWORD *)(v48 + 16) = 0;
    (*(void (**)(uint64_t, uint64_t *, uint64_t))(v61 + 32))(v48 + *(int *)(v49 + 24), v47, v62);
    uint64_t v50 = *(int *)(v49 + 28);
    char v51 = (char)v70;
    *(void *)(v48 + v50) = v70;
    *(unsigned char *)(v48 + v50 + 8) = (_BYTE)v69;
    swift_bridgeObjectRetain(v51);
    outlined destroy of MLActivityClassifier.ModelParameters((uint64_t)v66, type metadata accessor for MLLogisticRegressionClassifier.PersistentParameters);
    outlined destroy of MLActivityClassifier.ModelParameters((uint64_t)v65, type metadata accessor for MLLogisticRegressionClassifier.Classifier);
    __swift_storeEnumTagSinglePayload(v48, 0, 1, v49);
    uint64_t v52 = OBJC_IVAR____TtC8CreateML51LogisticRegressionClassifierTrainingSessionDelegate_model + v67;
    swift_beginAccess(OBJC_IVAR____TtC8CreateML51LogisticRegressionClassifierTrainingSessionDelegate_model + v67, v55, 33, 0);
    outlined assign with take of MLClassifierMetrics?(v48, v52, &demangling cache variable for type metadata for MLLogisticRegressionClassifier.Model?);
    swift_endAccess(v55);
  }
}

Swift::Void __swiftcall __spoils<cf,zf,sf,of,pf,rax,rdx,rcx,rdi,rsi,r8,r9,r10,r11,r12,xmm0,xmm1,xmm2,xmm3,xmm4,xmm5,xmm6,xmm7> LogisticRegressionClassifierTrainingSessionDelegate.resume(from:)(Swift::OpaquePointer from)
{
  uint64_t v87 = v1;
  uint64_t v93 = v2;
  rawValue = from._rawValue;
  int64_t v3 = *(void *)(*(void *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for MLLogisticRegressionClassifier.Model?)
                             - 8)
                 + 64);
  uint64_t v4 = alloca(v3);
  int64_t v5 = alloca(v3);
  uint64_t v86 = v78;
  int64_t v6 = *(void *)(*(void *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for MLLogisticRegressionClassifier.Classifier?)
                             - 8)
                 + 64);
  uint64_t v7 = alloca(v6);
  int64_t v8 = alloca(v6);
  uint64_t v82 = v78;
  uint64_t v9 = alloca(v6);
  uint64_t v10 = alloca(v6);
  uint64_t v88 = v78;
  uint64_t v83 = type metadata accessor for AnyColumn(0);
  uint64_t v84 = *(void *)(v83 - 8);
  int64_t v11 = *(void *)(v84 + 64);
  uint64_t v12 = alloca(v11);
  uint64_t v13 = alloca(v11);
  uint64_t v85 = v78;
  int64_t v14 = *(void *)(*(void *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for MLCheckpoint?)
                              - 8)
                  + 64);
  uint64_t v15 = alloca(v14);
  uint64_t v16 = alloca(v14);
  Swift::String v90 = v78;
  uint64_t v94 = (unsigned char *)type metadata accessor for MLCheckpoint(0);
  int64_t v17 = *(void *)(*((void *)v94 - 1) + 64);
  uint64_t v18 = alloca(v17);
  int64_t v19 = alloca(v17);
  uint64_t v91 = v78;
  int64_t v20 = *(void *)(*(void *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for MLLogisticRegressionClassifier.PersistentParameters?)
                              - 8)
                  + 64);
  uint64_t v21 = alloca(v20);
  uint64_t v22 = alloca(v20);
  uint64_t v23 = type metadata accessor for MLLogisticRegressionClassifier.PersistentParameters(0);
  int64_t v24 = *(void *)(*(void *)(v23 - 8) + 64);
  uint64_t v25 = alloca(v24);
  uint64_t v26 = alloca(v24);
  uint64_t v27 = v93 + OBJC_IVAR____TtC8CreateML51LogisticRegressionClassifierTrainingSessionDelegate_trainingParameters;
  swift_beginAccess(v93 + OBJC_IVAR____TtC8CreateML51LogisticRegressionClassifierTrainingSessionDelegate_trainingParameters, v79, 0, 0);
  outlined init with copy of Either<LogisticRegressionClassifier<Float, String>, FullyConnectedNetworkClassifier<Float, String>>(v27, (uint64_t)v78, &demangling cache variable for type metadata for MLLogisticRegressionClassifier.PersistentParameters?);
  uint64_t v92 = (int *)v23;
  if (__swift_getEnumTagSinglePayload((uint64_t)v78, 1, v23) == 1)
  {
    outlined destroy of Either<LogisticRegressionClassifier<Float, String>, FullyConnectedNetworkClassifier<Float, String>>((uint64_t)v78, &demangling cache variable for type metadata for MLLogisticRegressionClassifier.PersistentParameters?);
    BUG();
  }
  outlined init with take of MLClassifierMetrics((uint64_t)v78, (uint64_t)v78, type metadata accessor for MLLogisticRegressionClassifier.PersistentParameters);
  uint64_t v28 = (uint64_t)v90;
  specialized BidirectionalCollection.last.getter((uint64_t)rawValue);
  if (__swift_getEnumTagSinglePayload(v28, 1, (uint64_t)v94) == 1)
  {
    outlined destroy of Either<LogisticRegressionClassifier<Float, String>, FullyConnectedNetworkClassifier<Float, String>>(v28, &demangling cache variable for type metadata for MLCheckpoint?);
    uint64_t v29 = lazy protocol witness table accessor for type MLCreateError and conformance MLCreateError();
    swift_allocError(&type metadata for MLCreateError, v29, 0, 0);
    *(void *)uint64_t v30 = 0xD00000000000001DLL;
    *(void *)(v30 + 8) = "reated." + 0x8000000000000000;
    *(_OWORD *)(v30 + 16) = 0;
    *(_OWORD *)(v30 + 32) = 0;
    *(unsigned char *)(v30 + 48) = 0;
    swift_willThrow(&type metadata for MLCreateError, v29, v30, v31, v32, v33);
LABEL_15:
    outlined destroy of MLActivityClassifier.ModelParameters((uint64_t)v78, type metadata accessor for MLLogisticRegressionClassifier.PersistentParameters);
    return;
  }
  unint64_t v34 = 0xEB0000000064657ALL;
  uint64_t v35 = v28;
  uint64_t v36 = (uint64_t)v91;
  outlined init with take of MLClassifierMetrics(v35, (uint64_t)v91, type metadata accessor for MLCheckpoint);
  switch(*(unsigned char *)(v36 + *((int *)v94 + 5)))
  {
    case 0:
      uint64_t v37 = 0x696C616974696E69;
      break;
    case 1:
      uint64_t v37 = 0x6974636172747865;
      goto LABEL_10;
    case 2:
      swift_bridgeObjectRelease(0);
      goto LABEL_12;
    case 3:
      uint64_t v37 = 0x697461756C617665;
LABEL_10:
      unint64_t v34 = 0xEA0000000000676ELL;
      break;
    case 4:
      unint64_t v34 = 0xEB00000000676E69;
      uint64_t v37 = 0x636E657265666E69;
      break;
  }
  char v38 = _stringCompareWithSmolCheck(_:_:expecting:)(v37, v34, 0x676E696E69617274, 0xE800000000000000, 0);
  swift_bridgeObjectRelease(v34);
  if ((v38 & 1) == 0)
  {
    uint64_t v56 = lazy protocol witness table accessor for type MLCreateError and conformance MLCreateError();
    swift_allocError(&type metadata for MLCreateError, v56, 0, 0);
    *(void *)uint64_t v57 = 0xD000000000000027;
    *(void *)(v57 + 8) = "ingSessionDelegate" + 0x8000000000000000;
    *(_OWORD *)(v57 + 16) = 0;
    *(_OWORD *)(v57 + 32) = 0;
    *(unsigned char *)(v57 + 48) = 0;
    swift_willThrow(&type metadata for MLCreateError, v56, v57, v58, v59, v60);
    outlined destroy of MLActivityClassifier.ModelParameters((uint64_t)v91, type metadata accessor for MLCheckpoint);
    goto LABEL_15;
  }
LABEL_12:
  uint64_t v39 = v93 + OBJC_IVAR____TtC8CreateML51LogisticRegressionClassifierTrainingSessionDelegate_trainingData;
  rawValue = (void *)(v93 + OBJC_IVAR____TtC8CreateML51LogisticRegressionClassifierTrainingSessionDelegate_trainingData);
  swift_beginAccess(v93 + OBJC_IVAR____TtC8CreateML51LogisticRegressionClassifierTrainingSessionDelegate_trainingData, v81, 33, 0);
  uint64_t v40 = type metadata accessor for DataFrame(0);
  (*(void (**)(uint64_t, unsigned char *, uint64_t))(*(void *)(v40 - 8) + 24))(v39, v78, v40);
  swift_endAccess(v81);
  uint64_t v41 = v92;
  uint64_t v42 = &v78[v92[5]];
  uint64_t v43 = v93 + OBJC_IVAR____TtC8CreateML51LogisticRegressionClassifierTrainingSessionDelegate_validationData;
  swift_beginAccess(v93 + OBJC_IVAR____TtC8CreateML51LogisticRegressionClassifierTrainingSessionDelegate_validationData, v81, 33, 0);
  outlined assign with copy of DataFrame?((uint64_t)v42, v43);
  swift_endAccess(v81);
  uint64_t v44 = v41[6];
  Swift::String v90 = *(unsigned char **)&v78[v44];
  uint64_t v94 = v78;
  uint64_t v45 = *(void *)&v78[v44 + 8];
  swift_beginAccess(rawValue, v81, 32, 0);
  swift_bridgeObjectRetain(v45);
  uint64_t v46 = v85;
  DataFrame.subscript.getter(v90, v45);
  swift_endAccess(v81);
  swift_bridgeObjectRelease(v45);
  uint64_t v47 = AnyColumn.wrappedElementType.getter();
  (*(void (**)(unsigned char *, uint64_t))(v84 + 8))(v46, v83);
  if (swift_dynamicCastMetatype(v47, &type metadata for String))
  {
    uint64_t v48 = *(void *)&v94[v44];
    uint64_t v49 = *(void *)&v94[v44 + 8];
    uint64_t v50 = *(void *)&v94[v92[7]];
    swift_bridgeObjectRetain(v49);
    swift_bridgeObjectRetain(v50);
    uint64_t v51 = (uint64_t)v88;
    MLLogisticRegressionClassifier.Classifier.init(labels:annotationColumnName:featureColumnNames:)((uint64_t)_swiftEmptyArrayStorage, 1, v48, v49, v50);
    uint64_t v52 = type metadata accessor for MLLogisticRegressionClassifier.Classifier(0);
    __swift_storeEnumTagSinglePayload(v51, 0, 1, v52);
    uint64_t v53 = v93;
    uint64_t v54 = v93 + OBJC_IVAR____TtC8CreateML51LogisticRegressionClassifierTrainingSessionDelegate_classifier;
    swift_beginAccess(v93 + OBJC_IVAR____TtC8CreateML51LogisticRegressionClassifierTrainingSessionDelegate_classifier, v81, 33, 0);
    outlined assign with take of MLClassifierMetrics?(v51, v54, &demangling cache variable for type metadata for MLLogisticRegressionClassifier.Classifier?);
    swift_endAccess(v81);
    uint64_t v55 = v53;
  }
  else
  {
    uint64_t v61 = (uint64_t)v94;
    if (!swift_dynamicCastMetatype(v47, &type metadata for Int))
    {
      _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, 0xD00000000000001ELL, "essionDelegate.swift" + 0x8000000000000000, "CreateML/_LogisticRegressionClassifierTrainingSessionDelegate.swift", 67, 2, 109, 0);
      BUG();
    }
    uint64_t v62 = v61;
    uint64_t v63 = *(void *)(v61 + v44);
    uint64_t v64 = *(void *)(v61 + v44 + 8);
    uint64_t v65 = *(void *)(v62 + v92[7]);
    swift_bridgeObjectRetain(v64);
    swift_bridgeObjectRetain(v65);
    uint64_t v66 = (uint64_t)v88;
    MLLogisticRegressionClassifier.Classifier.init(labels:annotationColumnName:featureColumnNames:)((uint64_t)_swiftEmptyArrayStorage, 0, v63, v64, v65);
    uint64_t v52 = type metadata accessor for MLLogisticRegressionClassifier.Classifier(0);
    uint64_t v67 = v66;
    __swift_storeEnumTagSinglePayload(v66, 0, 1, v52);
    uint64_t v55 = v93;
    uint64_t v68 = v93 + OBJC_IVAR____TtC8CreateML51LogisticRegressionClassifierTrainingSessionDelegate_classifier;
    swift_beginAccess(v93 + OBJC_IVAR____TtC8CreateML51LogisticRegressionClassifierTrainingSessionDelegate_classifier, v81, 33, 0);
    outlined assign with take of MLClassifierMetrics?(v67, v68, &demangling cache variable for type metadata for MLLogisticRegressionClassifier.Classifier?);
    swift_endAccess(v81);
  }
  outlined init with copy of MLLogisticRegressionClassifier.ModelParameters((uint64_t)&v94[v92[8]], (uint64_t)v81);
  uint64_t v69 = v55 + OBJC_IVAR____TtC8CreateML51LogisticRegressionClassifierTrainingSessionDelegate_classifier;
  swift_beginAccess(v55 + OBJC_IVAR____TtC8CreateML51LogisticRegressionClassifierTrainingSessionDelegate_classifier, v80, 33, 0);
  type metadata accessor for MLLogisticRegressionClassifier.Classifier(0);
  int EnumTagSinglePayload = __swift_getEnumTagSinglePayload(v69, 1, v52);
  uint64_t v71 = (uint64_t)v82;
  if (EnumTagSinglePayload == 1) {
    BUG();
  }
  outlined assign with take of MLLogisticRegressionClassifier.ModelParameters((uint64_t)v81, v69 + 24);
  swift_endAccess(v80);
  outlined init with copy of Either<LogisticRegressionClassifier<Float, String>, FullyConnectedNetworkClassifier<Float, String>>(v69, v71, &demangling cache variable for type metadata for MLLogisticRegressionClassifier.Classifier?);
  if (__swift_getEnumTagSinglePayload(v71, 1, v52) == 1) {
    BUG();
  }
  uint64_t v72 = lazy protocol witness table accessor for type MLLogisticRegressionClassifier.Classifier and conformance MLLogisticRegressionClassifier.Classifier();
  uint64_t v73 = (uint64_t)v86;
  uint64_t v74 = (uint64_t)v91;
  uint64_t v75 = v87;
  SupervisedTabularEstimator.read(from:)(v91, v52, v72);
  outlined destroy of MLActivityClassifier.ModelParameters(v74, type metadata accessor for MLCheckpoint);
  outlined destroy of MLActivityClassifier.ModelParameters((uint64_t)v94, type metadata accessor for MLLogisticRegressionClassifier.PersistentParameters);
  outlined destroy of MLActivityClassifier.ModelParameters(v71, type metadata accessor for MLLogisticRegressionClassifier.Classifier);
  if (!v75)
  {
    uint64_t v76 = type metadata accessor for MLLogisticRegressionClassifier.Model(0);
    __swift_storeEnumTagSinglePayload(v73, 0, 1, v76);
    uint64_t v77 = OBJC_IVAR____TtC8CreateML51LogisticRegressionClassifierTrainingSessionDelegate_model + v93;
    swift_beginAccess(OBJC_IVAR____TtC8CreateML51LogisticRegressionClassifierTrainingSessionDelegate_model + v93, v81, 33, 0);
    outlined assign with take of MLClassifierMetrics?(v73, v77, &demangling cache variable for type metadata for MLLogisticRegressionClassifier.Model?);
    swift_endAccess(v81);
  }
}

Swift::Int_optional __swiftcall LogisticRegressionClassifierTrainingSessionDelegate.itemCount(phase:)(CreateML::MLPhase phase)
{
  if (*(unsigned char *)phase == 2)
  {
    uint64_t v2 = OBJC_IVAR____TtC8CreateML51LogisticRegressionClassifierTrainingSessionDelegate_sessionParameters + v1;
    char v3 = 0;
    v4.value = *(void *)(*(int *)(type metadata accessor for MLTrainingSessionParameters(0) + 28) + v2);
  }
  else
  {
    char v3 = 1;
    v4.value = 0;
  }
  v4.is_nil = v3;
  return v4;
}

uint64_t LogisticRegressionClassifierTrainingSessionDelegate.train(from:)(uint64_t a1)
{
  v2[15] = v1;
  v2[14] = a1;
  uint64_t v3 = type metadata accessor for MetricsKey(0);
  v2[16] = v3;
  uint64_t v4 = *(void *)(v3 - 8);
  v2[17] = v4;
  v2[18] = swift_task_alloc((*(void *)(v4 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = type metadata accessor for DataFrame(0);
  v2[19] = v5;
  uint64_t v6 = *(void *)(v5 - 8);
  v2[20] = v6;
  v2[21] = swift_task_alloc((*(void *)(v6 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for MLLogisticRegressionClassifier.Classifier?);
  v2[22] = swift_task_alloc((*(void *)(*(void *)(v7 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for MLLogisticRegressionClassifier.PersistentParameters?);
  v2[23] = swift_task_alloc((*(void *)(*(void *)(v8 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  return swift_task_switch(LogisticRegressionClassifierTrainingSessionDelegate.train(from:), 0, 0);
}

uint64_t LogisticRegressionClassifierTrainingSessionDelegate.train(from:)(double a1)
{
  uint64_t v2 = v1[23];
  uint64_t v3 = OBJC_IVAR____TtC8CreateML51LogisticRegressionClassifierTrainingSessionDelegate_trainingParameters + v1[15];
  swift_beginAccess(v3, v1 + 2, 0, 0);
  outlined init with copy of Either<LogisticRegressionClassifier<Float, String>, FullyConnectedNetworkClassifier<Float, String>>(v3, v2, &demangling cache variable for type metadata for MLLogisticRegressionClassifier.PersistentParameters?);
  uint64_t v4 = type metadata accessor for MLLogisticRegressionClassifier.PersistentParameters(0);
  LODWORD(v3) = __swift_getEnumTagSinglePayload(v2, 1, v4);
  outlined destroy of Either<LogisticRegressionClassifier<Float, String>, FullyConnectedNetworkClassifier<Float, String>>(v2, &demangling cache variable for type metadata for MLLogisticRegressionClassifier.PersistentParameters?);
  if (v3 == 1) {
    BUG();
  }
  uint64_t v5 = v1[14];
  uint64_t v6 = OBJC_IVAR____TtC8CreateML51LogisticRegressionClassifierTrainingSessionDelegate_sessionParameters + v1[15];
  uint64_t v7 = type metadata accessor for MLTrainingSessionParameters(0);
  uint64_t v8 = *(void *)(*(int *)(v7 + 20) + v6);
  if (__OFADD__(v8, v5)) {
    BUG();
  }
  uint64_t v9 = *(void *)(v6 + *(int *)(v7 + 28));
  uint64_t v10 = v9 - v5;
  if (__OFSUB__(v9, v5)) {
    BUG();
  }
  int64_t v11 = v1;
  uint64_t v46 = v9;
  uint64_t v49 = v8 + v5;
  uint64_t v12 = v1 + 5;
  uint64_t v13 = v1 + 8;
  uint64_t v56 = v11 + 11;
  if (v8 < v10) {
    uint64_t v10 = v8;
  }
  uint64_t v14 = type metadata accessor for EventCollector();
  swift_allocObject(v14, 32, 7);
  uint64_t v15 = EventCollector.init()();
  if (v10 < 0) {
    BUG();
  }
  uint64_t v50 = v15;
  uint64_t v48 = v10;
  uint64_t v55 = v11;
  if (v10)
  {
    uint64_t v16 = v11[15];
    uint64_t v17 = v11[20];
    uint64_t v18 = v13;
    uint64_t v19 = v16 + OBJC_IVAR____TtC8CreateML51LogisticRegressionClassifierTrainingSessionDelegate_trainingData;
    uint64_t v45 = (uint64_t *)(OBJC_IVAR____TtC8CreateML51LogisticRegressionClassifierTrainingSessionDelegate_model + v16);
    uint64_t v53 = v16 + OBJC_IVAR____TtC8CreateML51LogisticRegressionClassifierTrainingSessionDelegate_classifier;
    swift_beginAccess(v16 + OBJC_IVAR____TtC8CreateML51LogisticRegressionClassifierTrainingSessionDelegate_classifier, v12, 0, 0);
    swift_beginAccess(v19, v18, 0, 0);
    uint64_t v20 = v48;
    uint64_t v47 = v17;
    do
    {
      uint64_t v51 = v20;
      uint64_t v21 = v11[22];
      outlined init with copy of Either<LogisticRegressionClassifier<Float, String>, FullyConnectedNetworkClassifier<Float, String>>(v53, v21, &demangling cache variable for type metadata for MLLogisticRegressionClassifier.Classifier?);
      uint64_t v22 = type metadata accessor for MLLogisticRegressionClassifier.Classifier(0);
      if (__swift_getEnumTagSinglePayload(v21, 1, v22) == 1) {
        BUG();
      }
      (*(void (**)(void, uint64_t, void))(v17 + 16))(v11[21], v19, v11[19]);
      swift_beginAccess(v45, v56, 33, 0);
      uint64_t v23 = type metadata accessor for MLLogisticRegressionClassifier.Model(0);
      if (__swift_getEnumTagSinglePayload((uint64_t)v45, 1, v23) == 1) {
        BUG();
      }
      uint64_t v24 = v11[21];
      swift_retain();
      MLLogisticRegressionClassifier.Classifier.update(_:with:eventHandler:)(v45, v24, (uint64_t)partial apply for closure #1 in LogisticRegressionClassifierTrainingSessionDelegate.train(from:), v50, a1);
      uint64_t v25 = v11[22];
      uint64_t v26 = v11[19];
      uint64_t v27 = v55[21];
      swift_endAccess(v56);
      swift_release();
      uint64_t v28 = v27;
      int64_t v11 = v55;
      uint64_t v17 = v47;
      (*(void (**)(uint64_t, uint64_t))(v47 + 8))(v28, v26);
      outlined destroy of MLActivityClassifier.ModelParameters(v25, type metadata accessor for MLLogisticRegressionClassifier.Classifier);
      uint64_t v20 = v51 - 1;
    }
    while (v51 != 1);
  }
  unint64_t v29 = v11[18];
  uint64_t v57 = v11[16];
  uint64_t v30 = v11[17];
  static MetricsKey.trainingAccuracy.getter();
  id v31 = specialized EventCollector.getLast<A>(metric:type:)();
  char v33 = v32;
  unint64_t v34 = *(void (**)(unint64_t, uint64_t))(v30 + 8);
  unint64_t v35 = v29;
  v34(v29, v57);
  if ((v33 & 1) == 0)
  {
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(_swiftEmptyDictionarySingleton);
    specialized _NativeDictionary.setValue(_:forKey:isUnique:)(3, isUniquelyReferenced_nonNull_native, *(double *)&v31);
    unint64_t v35 = 0x8000000000000000;
    swift_bridgeObjectRelease(0);
  }
  uint64_t v37 = v55[16];
  unint64_t v38 = v55[18];
  static MetricsKey.trainingLoss.getter(v35);
  id v58 = specialized EventCollector.getLast<A>(metric:type:)();
  char v40 = v39;
  v34(v38, v37);
  if ((v40 & 1) == 0)
  {
    char v41 = swift_isUniquelyReferenced_nonNull_native(_swiftEmptyDictionarySingleton);
    specialized _NativeDictionary.setValue(_:forKey:isUnique:)(0, v41, *(double *)&v58);
    swift_bridgeObjectRelease(0);
  }
  uint64_t v42 = v55[23];
  uint64_t v43 = v55[22];
  uint64_t v52 = v55[18];
  uint64_t v54 = v55[21];
  uint64_t v59 = specialized _dictionaryUpCast<A, B, C, D>(_:)((uint64_t)_swiftEmptyDictionarySingleton);
  swift_release();
  swift_bridgeObjectRelease(_swiftEmptyDictionarySingleton);
  swift_task_dealloc(v42);
  swift_task_dealloc(v43);
  swift_task_dealloc(v54);
  swift_task_dealloc(v52);
  return ((uint64_t (*)(uint64_t, void *, BOOL))v55[1])(v48, v59, v49 >= v46);
}

uint64_t LogisticRegressionClassifierTrainingSessionDelegate.evaluate(from:)()
{
  v1[26] = v0;
  uint64_t v2 = type metadata accessor for AnyClassificationMetrics(0);
  v1[27] = swift_task_alloc((*(void *)(*(void *)(v2 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for DataFrame?);
  v1[28] = swift_task_alloc((*(void *)(*(void *)(v3 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  unint64_t v4 = (*(void *)(*(void *)(type metadata accessor for AnyColumn(0) - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v1[29] = swift_task_alloc(v4);
  v1[30] = swift_task_alloc(v4);
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for MLClassifierMetrics?);
  v1[31] = swift_task_alloc((*(void *)(*(void *)(v5 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = type metadata accessor for DataFrame(0);
  v1[32] = v6;
  uint64_t v7 = *(void *)(v6 - 8);
  v1[33] = v7;
  unint64_t v8 = (*(void *)(v7 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v1[34] = swift_task_alloc(v8);
  v1[35] = swift_task_alloc(v8);
  v1[36] = swift_task_alloc(v8);
  v1[37] = swift_task_alloc(v8);
  uint64_t v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for MLLogisticRegressionClassifier.Model?);
  v1[38] = swift_task_alloc((*(void *)(*(void *)(v9 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = type metadata accessor for MLLogisticRegressionClassifier.Model(0);
  v1[39] = v10;
  v1[40] = swift_task_alloc((*(void *)(*(void *)(v10 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  return swift_task_switch(LogisticRegressionClassifierTrainingSessionDelegate.evaluate(from:), 0, 0);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  int EnumTagSinglePayload;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  void (*v45)(uint64_t, uint64_t);
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;

  uint64_t v1 = *(void *)(v0 + 312);
  uint64_t v2 = *(void *)(v0 + 304);
  uint64_t v3 = OBJC_IVAR____TtC8CreateML51LogisticRegressionClassifierTrainingSessionDelegate_model + *(void *)(v0 + 208);
  swift_beginAccess(v3, v0 + 16, 0, 0);
  outlined init with copy of Either<LogisticRegressionClassifier<Float, String>, FullyConnectedNetworkClassifier<Float, String>>(v3, v2, &demangling cache variable for type metadata for MLLogisticRegressionClassifier.Model?);
  if (__swift_getEnumTagSinglePayload(v2, 1, v1) == 1)
  {
    outlined destroy of Either<LogisticRegressionClassifier<Float, String>, FullyConnectedNetworkClassifier<Float, String>>(*(void *)(v0 + 304), &demangling cache variable for type metadata for MLLogisticRegressionClassifier.Model?);
LABEL_5:
    uint64_t v7 = 0;
    goto LABEL_6;
  }
  unint64_t v4 = *(void *)(v0 + 208);
  outlined init with take of MLClassifierMetrics(*(void *)(v0 + 304), *(void *)(v0 + 320), type metadata accessor for MLLogisticRegressionClassifier.Model);
  uint64_t v5 = OBJC_IVAR____TtC8CreateML51LogisticRegressionClassifierTrainingSessionDelegate_trainingParameters + v4;
  swift_beginAccess(v5, v0 + 40, 0, 0);
  uint64_t v6 = type metadata accessor for MLLogisticRegressionClassifier.PersistentParameters(0);
  if (__swift_getEnumTagSinglePayload(v5, 1, v6))
  {
    outlined destroy of MLActivityClassifier.ModelParameters(*(void *)(v0 + 320), type metadata accessor for MLLogisticRegressionClassifier.Model);
    goto LABEL_5;
  }
  uint64_t v44 = *(void *)(v0 + 288);
  uint64_t v52 = *(void *)(v0 + 264);
  id v58 = *(void *)(v0 + 256);
  uint64_t v13 = *(int *)(v6 + 24);
  char v41 = *(void *)(v5 + v13);
  uint64_t v14 = *(void *)(v5 + v13 + 8);
  uint64_t v15 = OBJC_IVAR____TtC8CreateML51LogisticRegressionClassifierTrainingSessionDelegate_trainingData
      + *(void *)(v0 + 208);
  swift_beginAccess(v15, v0 + 64, 0, 0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v52 + 16))(v44, v15, v58);
  uint64_t v53 = v14;
  swift_bridgeObjectRetain(v14);
  MLLogisticRegressionClassifier.Model.applied(to:eventHandler:)(v44, 0, 0);
  uint64_t v59 = *(void *)(v0 + 256);
  unint64_t v35 = *(void *)(v0 + 248);
  uint64_t v37 = *(void *)(v0 + 240);
  uint64_t v55 = *(void *)(v0 + 232);
  char v33 = *(void *)(v0 + 208);
  uint64_t v49 = *(void *)(v0 + 224);
  uint64_t v45 = *(void (**)(uint64_t, uint64_t))(*(void *)(v0 + 264) + 8);
  ((void (*)(void))v45)(*(void *)(v0 + 288));
  DataFrame.subscript.getter(v41, v14);
  swift_beginAccess(v15, v0 + 88, 32, 0);
  DataFrame.subscript.getter(v41, v14);
  swift_endAccess(v0 + 88);
  AnyClassificationMetrics.init(_:_:)(v37, v55);
  unint64_t v38 = type metadata accessor for MLClassifierMetrics.Contents(0);
  swift_storeEnumTagMultiPayload(v35, v38, 0);
  uint64_t v56 = type metadata accessor for MLClassifierMetrics(0);
  __swift_storeEnumTagSinglePayload(v35, 0, 1, v56);
  uint64_t v16 = v33 + OBJC_IVAR____TtC8CreateML51LogisticRegressionClassifierTrainingSessionDelegate_trainingMetrics;
  swift_beginAccess(v33 + OBJC_IVAR____TtC8CreateML51LogisticRegressionClassifierTrainingSessionDelegate_trainingMetrics, v0 + 112, 33, 0);
  outlined assign with take of MLClassifierMetrics?(v35, v16, &demangling cache variable for type metadata for MLClassifierMetrics?);
  swift_endAccess(v0 + 112);
  uint64_t v17 = OBJC_IVAR____TtC8CreateML51LogisticRegressionClassifierTrainingSessionDelegate_validationData + v33;
  swift_beginAccess(OBJC_IVAR____TtC8CreateML51LogisticRegressionClassifierTrainingSessionDelegate_validationData + v33, v0 + 136, 0, 0);
  outlined init with copy of Either<LogisticRegressionClassifier<Float, String>, FullyConnectedNetworkClassifier<Float, String>>(v17, v49, &demangling cache variable for type metadata for DataFrame?);
  int EnumTagSinglePayload = __swift_getEnumTagSinglePayload(v49, 1, v59);
  uint64_t v19 = *(void *)(v0 + 320);
  if (EnumTagSinglePayload == 1)
  {
    uint64_t v20 = *(void *)(v0 + 296);
    uint64_t v21 = *(void *)(v0 + 256);
    uint64_t v42 = *(void *)(v0 + 248);
    uint64_t v22 = *(void *)(v0 + 208);
    uint64_t v47 = *(void *)(v0 + 224);
    swift_bridgeObjectRelease(v53);
    v45(v20, v21);
    outlined destroy of MLActivityClassifier.ModelParameters(v19, type metadata accessor for MLLogisticRegressionClassifier.Model);
    outlined destroy of Either<LogisticRegressionClassifier<Float, String>, FullyConnectedNetworkClassifier<Float, String>>(v47, &demangling cache variable for type metadata for DataFrame?);
    uint64_t v23 = v42;
    __swift_storeEnumTagSinglePayload(v42, 1, 1, v56);
    uint64_t v24 = OBJC_IVAR____TtC8CreateML51LogisticRegressionClassifierTrainingSessionDelegate_validationMetrics + v22;
    uint64_t v25 = v24;
    uint64_t v26 = v0 + 160;
  }
  else
  {
    uint64_t v27 = *(void *)(v0 + 280);
    (*(void (**)(uint64_t, void, void))(*(void *)(v0 + 264) + 32))(v27, *(void *)(v0 + 224), *(void *)(v0 + 256));
    MLLogisticRegressionClassifier.Model.applied(to:eventHandler:)(v27, 0, 0);
    unint64_t v34 = *(void *)(v0 + 320);
    uint64_t v36 = *(void *)(v0 + 296);
    uint64_t v60 = *(void *)(v0 + 280);
    uint64_t v30 = *(void *)(v0 + 272);
    unint64_t v29 = *(void *)(v0 + 256);
    char v39 = *(void *)(v0 + 248);
    char v32 = *(void *)(v0 + 240);
    uint64_t v28 = *(void *)(v0 + 232);
    uint64_t v50 = *(void *)(v0 + 208);
    id v31 = *(void *)(v0 + 216);
    DataFrame.subscript.getter(v41, v53);
    DataFrame.subscript.getter(v41, v53);
    swift_bridgeObjectRelease(v53);
    AnyClassificationMetrics.init(_:_:)(v32, v28);
    v45(v30, v29);
    v45(v60, v29);
    v45(v36, v29);
    outlined destroy of MLActivityClassifier.ModelParameters(v34, type metadata accessor for MLLogisticRegressionClassifier.Model);
    uint64_t v23 = v39;
    outlined init with take of MLClassifierMetrics(v31, v39, type metadata accessor for AnyClassificationMetrics);
    swift_storeEnumTagMultiPayload(v39, v38, 0);
    __swift_storeEnumTagSinglePayload(v39, 0, 1, v56);
    uint64_t v24 = OBJC_IVAR____TtC8CreateML51LogisticRegressionClassifierTrainingSessionDelegate_validationMetrics + v50;
    uint64_t v25 = OBJC_IVAR____TtC8CreateML51LogisticRegressionClassifierTrainingSessionDelegate_validationMetrics + v50;
    uint64_t v26 = v0 + 184;
  }
  swift_beginAccess(v25, v26, 33, 0);
  outlined assign with take of MLClassifierMetrics?(v23, v24, &demangling cache variable for type metadata for MLClassifierMetrics?);
  swift_endAccess(v26);
  uint64_t v7 = 1;
LABEL_6:
  uint64_t v48 = v7;
  unint64_t v8 = *(void *)(v0 + 304);
  uint64_t v9 = *(void *)(v0 + 296);
  uint64_t v10 = *(void *)(v0 + 288);
  int64_t v11 = *(void *)(v0 + 280);
  uint64_t v46 = *(void *)(v0 + 272);
  char v40 = *(void *)(v0 + 248);
  uint64_t v57 = *(void *)(v0 + 240);
  uint64_t v43 = *(void *)(v0 + 232);
  uint64_t v51 = *(void *)(v0 + 216);
  uint64_t v54 = *(void *)(v0 + 224);
  swift_task_dealloc(*(void *)(v0 + 320));
  swift_task_dealloc(v8);
  swift_task_dealloc(v9);
  swift_task_dealloc(v10);
  swift_task_dealloc(v11);
  swift_task_dealloc(v46);
  swift_task_dealloc(v40);
  swift_task_dealloc(v57);
  swift_task_dealloc(v43);
  swift_task_dealloc(v54);
  swift_task_dealloc(v51);
  return (*(uint64_t (**)(uint64_t, uint64_t))(v0 + 8))(v48, 1);
}

uint64_t LogisticRegressionClassifierTrainingSessionDelegate.saveCheckpoint(to:phase:iteration:)(uint64_t a1, unsigned __int8 *a2)
{
  uint64_t v4 = v2;
  uint64_t v30 = v3;
  uint64_t v32 = a1;
  unint64_t v5 = 0xEB0000000064657ALL;
  int64_t v6 = *(void *)(*(void *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for MLLogisticRegressionClassifier.Model?)
                             - 8)
                 + 64);
  uint64_t v7 = alloca(v6);
  unint64_t v8 = alloca(v6);
  id v31 = v27;
  int64_t v9 = *(void *)(*(void *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for MLLogisticRegressionClassifier.Classifier?)
                             - 8)
                 + 64);
  uint64_t v10 = alloca(v9);
  int64_t v11 = alloca(v9);
  uint64_t v12 = *a2;
  unint64_t v29 = v27;
  switch(v12)
  {
    case 0:
      uint64_t v13 = v2;
      uint64_t v14 = 0x696C616974696E69;
      break;
    case 1:
      uint64_t v13 = v2;
      uint64_t v14 = 0x6974636172747865;
      goto LABEL_6;
    case 2:
      swift_bridgeObjectRelease(0);
      goto LABEL_9;
    case 3:
      uint64_t v13 = v2;
      uint64_t v14 = 0x697461756C617665;
LABEL_6:
      unint64_t v5 = 0xEA0000000000676ELL;
      break;
    case 4:
      uint64_t v13 = v2;
      unint64_t v5 = 0xEB00000000676E69;
      uint64_t v14 = 0x636E657265666E69;
      break;
  }
  LODWORD(v15) = 0;
  char v16 = _stringCompareWithSmolCheck(_:_:expecting:)(v14, v5, 0x676E696E69617274, 0xE800000000000000, 0);
  swift_bridgeObjectRelease(v5);
  BOOL v17 = (v16 & 1) == 0;
  uint64_t v4 = v13;
  if (!v17)
  {
LABEL_9:
    uint64_t v18 = v30;
    uint64_t v19 = v30 + OBJC_IVAR____TtC8CreateML51LogisticRegressionClassifierTrainingSessionDelegate_classifier;
    swift_beginAccess(v30 + OBJC_IVAR____TtC8CreateML51LogisticRegressionClassifierTrainingSessionDelegate_classifier, v27, 0, 0);
    uint64_t v20 = (uint64_t)v29;
    outlined init with copy of Either<LogisticRegressionClassifier<Float, String>, FullyConnectedNetworkClassifier<Float, String>>(v19, (uint64_t)v29, &demangling cache variable for type metadata for MLLogisticRegressionClassifier.Classifier?);
    uint64_t v21 = type metadata accessor for MLLogisticRegressionClassifier.Classifier(0);
    if (__swift_getEnumTagSinglePayload(v20, 1, v21) == 1) {
      BUG();
    }
    uint64_t v22 = OBJC_IVAR____TtC8CreateML51LogisticRegressionClassifierTrainingSessionDelegate_model + v18;
    swift_beginAccess(v22, v28, 0, 0);
    uint64_t v23 = v22;
    uint64_t v15 = (uint64_t)v31;
    outlined init with copy of Either<LogisticRegressionClassifier<Float, String>, FullyConnectedNetworkClassifier<Float, String>>(v23, (uint64_t)v31, &demangling cache variable for type metadata for MLLogisticRegressionClassifier.Model?);
    uint64_t v24 = type metadata accessor for MLLogisticRegressionClassifier.Model(0);
    if (__swift_getEnumTagSinglePayload(v15, 1, v24) == 1) {
      BUG();
    }
    uint64_t v25 = lazy protocol witness table accessor for type MLLogisticRegressionClassifier.Classifier and conformance MLLogisticRegressionClassifier.Classifier();
    SupervisedTabularEstimator.write(_:to:overwrite:)(v15, v32, 1, v21, v25);
    outlined destroy of MLActivityClassifier.ModelParameters(v15, type metadata accessor for MLLogisticRegressionClassifier.Model);
    outlined destroy of MLActivityClassifier.ModelParameters(v20, type metadata accessor for MLLogisticRegressionClassifier.Classifier);
    if (!v4) {
      LOBYTE(v15) = 1;
    }
  }
  return v15;
}

uint64_t LogisticRegressionClassifierTrainingSessionDelegate.save(to:)(uint64_t a1)
{
  uint64_t v19 = v1;
  uint64_t v20 = a1;
  int64_t v3 = *(void *)(*(void *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for MLLogisticRegressionClassifier.PersistentParameters?)
                             - 8)
                 + 64);
  uint64_t v4 = alloca(v3);
  unint64_t v5 = alloca(v3);
  uint64_t v6 = type metadata accessor for MLLogisticRegressionClassifier.PersistentParameters(0);
  int64_t v7 = *(void *)(*(void *)(v6 - 8) + 64);
  unint64_t v8 = alloca(v7);
  int64_t v9 = alloca(v7);
  uint64_t v10 = OBJC_IVAR____TtC8CreateML51LogisticRegressionClassifierTrainingSessionDelegate_trainingParameters + v2;
  swift_beginAccess(v10, v18, 0, 0);
  outlined init with copy of Either<LogisticRegressionClassifier<Float, String>, FullyConnectedNetworkClassifier<Float, String>>(v10, (uint64_t)&v17, &demangling cache variable for type metadata for MLLogisticRegressionClassifier.PersistentParameters?);
  if (__swift_getEnumTagSinglePayload((uint64_t)&v17, 1, v6) == 1)
  {
    outlined destroy of Either<LogisticRegressionClassifier<Float, String>, FullyConnectedNetworkClassifier<Float, String>>((uint64_t)&v17, &demangling cache variable for type metadata for MLLogisticRegressionClassifier.PersistentParameters?);
    uint64_t v11 = lazy protocol witness table accessor for type MLCreateError and conformance MLCreateError();
    swift_allocError(&type metadata for MLCreateError, v11, 0, 0);
    *(void *)uint64_t v12 = 0xD000000000000030;
    *(void *)(v12 + 8) = "Feature Extractor" + 0x8000000000000000;
    *(_OWORD *)(v12 + 16) = 0;
    *(_OWORD *)(v12 + 32) = 0;
    *(unsigned char *)(v12 + 48) = 2;
    return swift_willThrow(&type metadata for MLCreateError, v11, v12, v13, v14, v15);
  }
  else
  {
    outlined init with take of MLClassifierMetrics((uint64_t)&v17, (uint64_t)&v17, type metadata accessor for MLLogisticRegressionClassifier.PersistentParameters);
    MLLogisticRegressionClassifier.PersistentParameters.save(toSessionDirectory:)(v20);
    return outlined destroy of MLActivityClassifier.ModelParameters((uint64_t)&v17, type metadata accessor for MLLogisticRegressionClassifier.PersistentParameters);
  }
}

NSURL *LogisticRegressionClassifierTrainingSessionDelegate.restore(from:phase:)(uint64_t a1)
{
  uint64_t v36 = (uint64_t *)v1;
  uint64_t v31 = v2;
  uint64_t v30 = a1;
  int64_t v3 = *(void *)(*(void *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for MLLogisticRegressionClassifier.PersistentParameters?)
                             - 8)
                 + 64);
  uint64_t v4 = alloca(v3);
  unint64_t v5 = alloca(v3);
  char v33 = &v27;
  uint64_t v6 = alloca(v3);
  int64_t v7 = alloca(v3);
  unint64_t v35 = &v27;
  uint64_t v8 = type metadata accessor for URL(0);
  uint64_t v9 = *(void *)(v8 - 8);
  int64_t v10 = *(void *)(v9 + 64);
  uint64_t v11 = alloca(v10);
  uint64_t v12 = alloca(v10);
  uint64_t v32 = type metadata accessor for MLLogisticRegressionClassifier.PersistentParameters(0);
  int64_t v13 = *(void *)(*(void *)(v32 - 8) + 64);
  uint64_t v14 = alloca(v13);
  uint64_t v15 = alloca(v13);
  unint64_t v34 = &v27;
  char v16 = alloca(v13);
  uint64_t v17 = alloca(v13);
  (*(void (**)(uint64_t *, uint64_t, uint64_t))(v9 + 16))(&v27, v30, v8);
  uint64_t v18 = (uint64_t)v36;
  uint64_t result = MLLogisticRegressionClassifier.PersistentParameters.init(sessionDirectory:)(&v27);
  if (!v18)
  {
    uint64_t v36 = &v27;
    uint64_t v20 = OBJC_IVAR____TtC8CreateML51LogisticRegressionClassifierTrainingSessionDelegate_trainingParameters + v31;
    swift_beginAccess(OBJC_IVAR____TtC8CreateML51LogisticRegressionClassifierTrainingSessionDelegate_trainingParameters + v31, v28, 0, 0);
    uint64_t v21 = (uint64_t)v35;
    outlined init with copy of Either<LogisticRegressionClassifier<Float, String>, FullyConnectedNetworkClassifier<Float, String>>(v20, (uint64_t)v35, &demangling cache variable for type metadata for MLLogisticRegressionClassifier.PersistentParameters?);
    uint64_t v22 = v21;
    uint64_t v23 = v32;
    if (__swift_getEnumTagSinglePayload(v22, 1, v32) == 1)
    {
      outlined destroy of Either<LogisticRegressionClassifier<Float, String>, FullyConnectedNetworkClassifier<Float, String>>((uint64_t)v35, &demangling cache variable for type metadata for MLLogisticRegressionClassifier.PersistentParameters?);
      uint64_t v24 = (uint64_t)v33;
      outlined init with take of MLClassifierMetrics((uint64_t)v36, (uint64_t)v33, type metadata accessor for MLLogisticRegressionClassifier.PersistentParameters);
      __swift_storeEnumTagSinglePayload(v24, 0, 1, v23);
      swift_beginAccess(v20, v29, 33, 0);
      outlined assign with take of MLClassifierMetrics?(v24, v20, &demangling cache variable for type metadata for MLLogisticRegressionClassifier.PersistentParameters?);
      return (NSURL *)swift_endAccess(v29);
    }
    else
    {
      uint64_t v25 = (uint64_t)v34;
      outlined init with take of MLClassifierMetrics((uint64_t)v35, (uint64_t)v34, type metadata accessor for MLLogisticRegressionClassifier.PersistentParameters);
      uint64_t v26 = (uint64_t)v36;
      LogisticRegressionClassifierTrainingSessionDelegate.verifyThatParametersAreCompatible(_:_:)((uint64_t)v36, v25);
      outlined destroy of MLActivityClassifier.ModelParameters(v25, type metadata accessor for MLLogisticRegressionClassifier.PersistentParameters);
      return (NSURL *)outlined destroy of MLActivityClassifier.ModelParameters(v26, type metadata accessor for MLLogisticRegressionClassifier.PersistentParameters);
    }
  }
  return result;
}

uint64_t LogisticRegressionClassifierTrainingSessionDelegate.verifyThatParametersAreCompatible(_:_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v42 = v2;
  uint64_t v3 = type metadata accessor for MLLogisticRegressionClassifier.PersistentParameters(0);
  uint64_t v4 = *(int *)(v3 + 24);
  uint64_t v5 = *(void *)(a1 + v4);
  uint64_t v6 = *(void *)(a1 + v4 + 8);
  uint64_t v7 = *(void *)(a2 + v4);
  uint64_t v46 = a2;
  uint64_t v8 = *(void *)(a2 + v4 + 8);
  uint64_t v47 = v3;
  if (v5 == v7 && v6 == v8
    || (v45 = v6, char v9 = _stringCompareWithSmolCheck(_:_:expecting:)(v5, v6, v7, v8, 0), v3 = v47, (v9 & 1) != 0))
  {
    uint64_t v10 = *(void *)(a1 + *(int *)(v3 + 28));
    uint64_t v11 = v3;
    swift_bridgeObjectRetain(v10);
    uint64_t v44 = v10;
    uint64_t v12 = specialized Set.init<A>(_:)(v10);
    uint64_t v13 = *(void *)(v46 + *(int *)(v11 + 28));
    swift_bridgeObjectRetain(v13);
    uint64_t v43 = v13;
    uint64_t v14 = specialized Set.init<A>(_:)(v13);
    LOBYTE(v13) = v14;
    LOBYTE(v11) = specialized static Set.== infix(_:_:)(v12, v14);
    swift_bridgeObjectRelease(v12);
    swift_bridgeObjectRelease(v13);
    if (v11)
    {
      static MLLogisticRegressionClassifier.ModelParameters.firstIncompatibility(_:_:)(*(int *)(v47 + 32) + a1, *(int *)(v47 + 32) + v46);
      uint64_t result = outlined init with take of (name: String, originalValue: String, newValue: String)?((uint64_t)v33, (uint64_t)&v34);
      char v16 = v35;
      if (!v35) {
        return result;
      }
      uint64_t v17 = v34;
      uint64_t v47 = v36;
      uint64_t v45 = v37;
      uint64_t v46 = v38;
      uint64_t v18 = v39;
      uint64_t v19 = lazy protocol witness table accessor for type MLCreateError and conformance MLCreateError();
      swift_allocError(&type metadata for MLCreateError, v19, 0, 0);
      *(void *)uint64_t v20 = v17;
      uint64_t v24 = v47;
    }
    else
    {
      swift_bridgeObjectRetain(v44);
      uint64_t v25 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [String]);
      uint64_t v26 = lazy protocol witness table accessor for type [String] and conformance [A]();
      uint64_t v47 = BidirectionalCollection<>.joined(separator:)(8236, 0xE200000000000000, v25, v26);
      uint64_t v45 = v27;
      swift_bridgeObjectRelease(v44);
      swift_bridgeObjectRetain(v43);
      uint64_t v28 = BidirectionalCollection<>.joined(separator:)(8236, 0xE200000000000000, v25, v26);
      uint64_t v30 = v29;
      swift_bridgeObjectRelease(v43);
      uint64_t v40 = v28;
      uint64_t v41 = v30;
      uint64_t v24 = v47;
      uint64_t v46 = String.init<A>(_:)(&v40, &type metadata for String, &protocol witness table for String, &protocol witness table for String);
      uint64_t v18 = v31;
      uint64_t v19 = lazy protocol witness table accessor for type MLCreateError and conformance MLCreateError();
      swift_allocError(&type metadata for MLCreateError, v19, 0, 0);
      *(void *)uint64_t v20 = 0xD000000000000011;
      char v16 = "Classifier.swift" + 0x8000000000000000;
    }
  }
  else
  {
    uint64_t v40 = v7;
    uint64_t v41 = v8;
    swift_bridgeObjectRetain(v45);
    swift_bridgeObjectRetain(v8);
    uint64_t v46 = String.init<A>(_:)(&v40, &type metadata for String, &protocol witness table for String, &protocol witness table for String);
    uint64_t v24 = v5;
    uint64_t v18 = v32;
    uint64_t v19 = lazy protocol witness table accessor for type MLCreateError and conformance MLCreateError();
    swift_allocError(&type metadata for MLCreateError, v19, 0, 0);
    *(void *)uint64_t v20 = 0x6320746567726154;
    char v16 = (char *)0xED00006E6D756C6FLL;
  }
  *(void *)(v20 + 8) = v16;
  *(void *)(v20 + 16) = v24;
  *(void *)(v20 + 24) = v45;
  *(void *)(v20 + 32) = v46;
  *(void *)(v20 + 40) = v18;
  *(unsigned char *)(v20 + 48) = 3;
  return swift_willThrow(&type metadata for MLCreateError, v19, v20, v21, v22, v23);
}

uint64_t LogisticRegressionClassifierTrainingSessionDelegate.deinit()
{
  outlined destroy of MLActivityClassifier.ModelParameters(v0 + OBJC_IVAR____TtC8CreateML51LogisticRegressionClassifierTrainingSessionDelegate_sessionParameters, type metadata accessor for MLTrainingSessionParameters);
  outlined destroy of Either<LogisticRegressionClassifier<Float, String>, FullyConnectedNetworkClassifier<Float, String>>(v0 + OBJC_IVAR____TtC8CreateML51LogisticRegressionClassifierTrainingSessionDelegate_trainingParameters, &demangling cache variable for type metadata for MLLogisticRegressionClassifier.PersistentParameters?);
  uint64_t v1 = v0 + OBJC_IVAR____TtC8CreateML51LogisticRegressionClassifierTrainingSessionDelegate_trainingData;
  uint64_t v2 = type metadata accessor for DataFrame(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(v1, v2);
  outlined destroy of Either<LogisticRegressionClassifier<Float, String>, FullyConnectedNetworkClassifier<Float, String>>(v0 + OBJC_IVAR____TtC8CreateML51LogisticRegressionClassifierTrainingSessionDelegate_validationData, &demangling cache variable for type metadata for DataFrame?);
  outlined destroy of Either<LogisticRegressionClassifier<Float, String>, FullyConnectedNetworkClassifier<Float, String>>(v0 + OBJC_IVAR____TtC8CreateML51LogisticRegressionClassifierTrainingSessionDelegate_classifier, &demangling cache variable for type metadata for MLLogisticRegressionClassifier.Classifier?);
  outlined destroy of Either<LogisticRegressionClassifier<Float, String>, FullyConnectedNetworkClassifier<Float, String>>(v0 + OBJC_IVAR____TtC8CreateML51LogisticRegressionClassifierTrainingSessionDelegate_model, &demangling cache variable for type metadata for MLLogisticRegressionClassifier.Model?);
  outlined destroy of Either<LogisticRegressionClassifier<Float, String>, FullyConnectedNetworkClassifier<Float, String>>(v0 + OBJC_IVAR____TtC8CreateML51LogisticRegressionClassifierTrainingSessionDelegate_trainingMetrics, &demangling cache variable for type metadata for MLClassifierMetrics?);
  outlined destroy of Either<LogisticRegressionClassifier<Float, String>, FullyConnectedNetworkClassifier<Float, String>>(v0 + OBJC_IVAR____TtC8CreateML51LogisticRegressionClassifierTrainingSessionDelegate_validationMetrics, &demangling cache variable for type metadata for MLClassifierMetrics?);
  return v0;
}

uint64_t LogisticRegressionClassifierTrainingSessionDelegate.__deallocating_deinit()
{
  LogisticRegressionClassifierTrainingSessionDelegate.deinit();
  return swift_deallocClassInstance(v0, *(unsigned int *)(*(void *)v0 + 48), *(unsigned __int16 *)(*(void *)v0 + 52));
}

uint64_t ObjC metadata update function for LogisticRegressionClassifierTrainingSessionDelegate()
{
  return type metadata accessor for LogisticRegressionClassifierTrainingSessionDelegate(0);
}

uint64_t type metadata accessor for LogisticRegressionClassifierTrainingSessionDelegate(uint64_t a1)
{
  uint64_t result = type metadata singleton initialization cache for LogisticRegressionClassifierTrainingSessionDelegate;
  if (!type metadata singleton initialization cache for LogisticRegressionClassifierTrainingSessionDelegate) {
    return swift_getSingletonMetadata(a1, &nominal type descriptor for LogisticRegressionClassifierTrainingSessionDelegate);
  }
  return result;
}

uint64_t type metadata completion function for LogisticRegressionClassifierTrainingSessionDelegate(uint64_t a1)
{
  uint64_t result = type metadata accessor for MLTrainingSessionParameters(319);
  if (v2 <= 0x3F)
  {
    v9[0] = *(void *)(result - 8) + 64;
    uint64_t result = type metadata accessor for MLSoundClassifier.PersistentParameters?(319, &lazy cache variable for type metadata for MLLogisticRegressionClassifier.PersistentParameters?, type metadata accessor for MLLogisticRegressionClassifier.PersistentParameters);
    if (v3 <= 0x3F)
    {
      v9[1] = *(void *)(result - 8) + 64;
      uint64_t result = type metadata accessor for DataFrame(319);
      if (v4 <= 0x3F)
      {
        v9[2] = *(void *)(result - 8) + 64;
        uint64_t result = type metadata accessor for MLSoundClassifier.PersistentParameters?(319, &lazy cache variable for type metadata for DataFrame?, (uint64_t (*)(uint64_t))&type metadata accessor for DataFrame);
        if (v5 <= 0x3F)
        {
          v9[3] = *(void *)(result - 8) + 64;
          uint64_t result = type metadata accessor for MLSoundClassifier.PersistentParameters?(319, &lazy cache variable for type metadata for MLLogisticRegressionClassifier.Classifier?, type metadata accessor for MLLogisticRegressionClassifier.Classifier);
          if (v6 <= 0x3F)
          {
            v9[4] = *(void *)(result - 8) + 64;
            uint64_t result = type metadata accessor for MLSoundClassifier.PersistentParameters?(319, &lazy cache variable for type metadata for MLLogisticRegressionClassifier.Model?, type metadata accessor for MLLogisticRegressionClassifier.Model);
            if (v7 <= 0x3F)
            {
              v9[5] = *(void *)(result - 8) + 64;
              uint64_t result = type metadata accessor for MLSoundClassifier.PersistentParameters?(319, &lazy cache variable for type metadata for MLClassifierMetrics?, type metadata accessor for MLClassifierMetrics);
              if (v8 <= 0x3F)
              {
                uint64_t v10 = *(void *)(result - 8) + 64;
                uint64_t v11 = v10;
                uint64_t result = swift_updateClassMetadata2(a1, 256, 8, v9, a1 + 80);
                if (!result) {
                  return 0;
                }
              }
            }
          }
        }
      }
    }
  }
  return result;
}

void protocol witness for TrainingSessionDelegate.setUp() in conformance LogisticRegressionClassifierTrainingSessionDelegate()
{
}

void protocol witness for TrainingSessionDelegate.resume(from:) in conformance LogisticRegressionClassifierTrainingSessionDelegate(Swift::OpaquePointer a1)
{
}

unint64_t protocol witness for TrainingSessionDelegate.itemCount(phase:) in conformance LogisticRegressionClassifierTrainingSessionDelegate(CreateML::MLPhase a1)
{
  return (unint64_t)LogisticRegressionClassifierTrainingSessionDelegate.itemCount(phase:)(a1);
}

uint64_t protocol witness for TrainingSessionDelegate.train(from:) in conformance LogisticRegressionClassifierTrainingSessionDelegate(uint64_t a1)
{
  unint64_t v2 = (void *)swift_task_alloc(dword_3AB66C);
  *(void *)(v1 + 16) = v2;
  *unint64_t v2 = v1;
  v2[1] = protocol witness for TrainingSessionDelegate.train(from:) in conformance SoundClassifierTrainingSessionDelegate;
  return LogisticRegressionClassifierTrainingSessionDelegate.train(from:)(a1);
}

uint64_t protocol witness for TrainingSessionDelegate.evaluate(from:) in conformance LogisticRegressionClassifierTrainingSessionDelegate()
{
  uint64_t v1 = (void *)swift_task_alloc(dword_3AB664);
  *(void *)(v0 + 16) = v1;
  void *v1 = v0;
  v1[1] = protocol witness for TrainingSessionDelegate.evaluate(from:) in conformance SoundClassifierTrainingSessionDelegate;
  return LogisticRegressionClassifierTrainingSessionDelegate.evaluate(from:)();
}

uint64_t protocol witness for TrainingSessionDelegate.saveCheckpoint(to:phase:iteration:) in conformance LogisticRegressionClassifierTrainingSessionDelegate(uint64_t a1, unsigned __int8 *a2)
{
  return LogisticRegressionClassifierTrainingSessionDelegate.saveCheckpoint(to:phase:iteration:)(a1, a2);
}

uint64_t protocol witness for TrainingSessionCodable.save(to:) in conformance LogisticRegressionClassifierTrainingSessionDelegate(uint64_t a1)
{
  return LogisticRegressionClassifierTrainingSessionDelegate.save(to:)(a1);
}

NSURL *protocol witness for TrainingSessionCodable.restore(from:phase:) in conformance LogisticRegressionClassifierTrainingSessionDelegate(uint64_t a1)
{
  return LogisticRegressionClassifierTrainingSessionDelegate.restore(from:phase:)(a1);
}

void partial apply for closure #1 in LogisticRegressionClassifierTrainingSessionDelegate.train(from:)()
{
}

uint64_t outlined assign with copy of DataFrame?(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for DataFrame?);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v2 - 8) + 24))(a2, a1, v2);
  return a2;
}

uint64_t outlined assign with take of MLLogisticRegressionClassifier.ModelParameters(uint64_t a1, uint64_t a2)
{
  (*(void (**)(uint64_t, uint64_t))(*((void *)&type metadata for MLLogisticRegressionClassifier.ModelParameters
                                             - 1)
                                           + 40))(a2, a1);
  return a2;
}

uint64_t outlined assign with take of MLClassifierMetrics?(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(a3);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v3 - 8) + 40))(a2, a1, v3);
  return a2;
}

unsigned char *MLDataValue.type.getter()
{
  *uint64_t result = *(unsigned char *)(v1 + 16);
  return result;
}

uint64_t MLDataValue.stringValue.getter()
{
  if (*((unsigned char *)v0 + 16) != 2) {
    return 0;
  }
  uint64_t v1 = *v0;
  swift_bridgeObjectRetain(v0[1]);
  return v1;
}

uint64_t MLDataValue.intValue.getter()
{
  if (v0[16]) {
    return 0;
  }
  else {
    return *(void *)v0;
  }
}

uint64_t MLDataValue.doubleValue.getter()
{
  if (v0[16] == 1) {
    return *(void *)v0;
  }
  else {
    return 0;
  }
}

uint64_t MLDataValue.sequenceValue.getter()
{
  uint64_t v2 = (void *)result;
  if (*((unsigned char *)v1 + 16) == 3)
  {
    uint64_t v3 = *v1;
    uint64_t result = swift_retain(*v1);
  }
  else
  {
    uint64_t v3 = 0;
  }
  *uint64_t v2 = v3;
  return result;
}

BOOL static MLDataValue.ValueType.== infix(_:_:)(unsigned char *a1, unsigned char *a2)
{
  return *a1 == *a2;
}

void *MLDataValue.multiArrayValue.getter()
{
  uint64_t v2 = result;
  if (*(unsigned char *)(v1 + 16) == 5)
  {
    id v3 = *(id *)v1;
    uint64_t result = *(id *)v1;
  }
  else
  {
    id v3 = 0;
  }
  *uint64_t v2 = v3;
  return result;
}

uint64_t MLDataValue.dictionaryValue.getter()
{
  uint64_t v2 = (void *)result;
  if (*((unsigned char *)v1 + 16) == 4)
  {
    uint64_t v3 = *v1;
    uint64_t result = swift_bridgeObjectRetain(*v1);
  }
  else
  {
    uint64_t v3 = 0;
  }
  *uint64_t v2 = v3;
  return result;
}

char MLDataValue.init(_:)(uint64_t a1, double a2)
{
  uint64_t v4 = v2;
  switch(CMLFeatureValue.type.getter())
  {
    case 0u:
      uint64_t countAndFlagsBits = specialized handling<A, B>(_:_:)(*(void *)(a1 + 16));
      swift_release(a1);
      unsigned __int8 object = 0;
      char result = 0;
      goto LABEL_14;
    case 1u:
      specialized handling<A, B>(_:_:)(*(void *)(a1 + 16));
      uint64_t v18 = *(void *)&a2;
      swift_release(a1);
      uint64_t countAndFlagsBits = *(void *)&a2;
      char result = 1;
      goto LABEL_13;
    case 2u:
      swift_retain(a1);
      Swift::String v8 = CMLFeatureValue.stringValue()();
      uint64_t countAndFlagsBits = v8._countAndFlagsBits;
      unsigned __int8 object = v8._object;
      swift_release(a1);
      if (v9)
      {
        swift_errorRelease(v9);
        BUG();
      }
      swift_release(a1);
      char result = 2;
      goto LABEL_14;
    case 3u:
      uint64_t v10 = *(void *)(a1 + 16);
      swift_retain(a1);
      uint64_t v11 = specialized handling<A, B>(_:_:)(v10);
      if (!v11) {
        BUG();
      }
      uint64_t v12 = v11;
      unsigned __int8 object = 0;
      uint64_t v13 = type metadata accessor for CMLSequence();
      uint64_t countAndFlagsBits = swift_allocObject(v13, 25, 7);
      *(void *)(countAndFlagsBits + 16) = v12;
      *(unsigned char *)(countAndFlagsBits + 24) = 1;
      swift_release_n(a1, 2);
      char result = 3;
      goto LABEL_14;
    case 4u:
      uint64_t v14 = *(void *)(a1 + 16);
      swift_retain(a1);
      uint64_t v18 = specialized handling<A, B>(_:_:)(v14);
      if (!v18) {
        BUG();
      }
      unsigned __int8 object = 0;
      uint64_t v15 = type metadata accessor for CMLDictionary();
      uint64_t v16 = swift_allocObject(v15, 24, 7);
      v17[0] = v16;
      v17[1] = (uint64_t)closure #1 in MLDataValue.DictionaryType.init(from:);
      long long v17[2] = 0;
      *(void *)(v16 + 16) = v18;
      v17[3] = (uint64_t)specialized closure #1 in LazySequenceProtocol.compactMap<A>(_:);
      _OWORD v17[4] = 0;
      v17[5] = (uint64_t)specialized closure #2 in LazySequenceProtocol.compactMap<A>(_:);
      v17[6] = 0;
      swift_retain(v16);
      uint64_t countAndFlagsBits = (uint64_t)specialized Dictionary.init<A>(uniqueKeysWithValues:)(v17);
      swift_release(v16);
      swift_release_n(a1, 2);
      char result = 4;
      goto LABEL_14;
    case 5u:
      swift_release(a1);
      char result = 6;
      uint64_t countAndFlagsBits = 0;
      goto LABEL_13;
    case 6u:
      swift_retain(a1);
      MLDataValue.MultiArrayType.init(from:)(a1);
      uint64_t countAndFlagsBits = v17[0];
      if (!v17[0]) {
        BUG();
      }
      swift_release(a1);
      char result = 5;
LABEL_13:
      unsigned __int8 object = 0;
LABEL_14:
      *(void *)uint64_t v4 = countAndFlagsBits;
      *(void *)(v4 + 8) = object;
      *(unsigned char *)(v4 + 16) = result;
      return result;
  }
}

uint64_t MLDataValue.featureValue.getter(double a1)
{
  uint64_t v2 = *(void *)v1;
  switch(*(unsigned char *)(v1 + 16))
  {
    case 0:
      uint64_t v3 = specialized handling<A, B>(_:_:)(*(void *)v1);
      if (!v3) {
        BUG();
      }
      goto LABEL_8;
    case 1:
      uint64_t v3 = specialized handling<A, B>(_:_:)();
      if (!v3) {
        BUG();
      }
LABEL_8:
      uint64_t v6 = type metadata accessor for CMLFeatureValue();
      swift_allocObject(v6, 25, 7);
      uint64_t result = CMLFeatureValue.init(rawValue:ownsValue:)(v3, 1);
      break;
    case 2:
      uint64_t v5 = *(void *)(v1 + 8);
      type metadata accessor for CMLFeatureValue();
      swift_bridgeObjectRetain(v5);
      uint64_t result = CMLFeatureValue.__allocating_init(_:)(v2, v5);
      break;
    case 3:
      uint64_t result = MLDataValue.SequenceType.featureValue.getter(a1);
      break;
    case 4:
      uint64_t result = MLDataValue.DictionaryType.featureValue.getter();
      break;
    case 5:
      uint64_t result = MLDataValue.MultiArrayType.featureValue.getter();
      break;
    case 6:
      type metadata accessor for CMLFeatureValue();
      uint64_t result = CMLFeatureValue.__allocating_init()(0);
      break;
  }
  return result;
}

uint64_t MLDataValue.ValueType.description.getter()
{
  switch(*v0)
  {
    case 0:
      uint64_t result = 7630409;
      break;
    case 1:
      uint64_t result = 0x656C62756F44;
      break;
    case 2:
      uint64_t result = 0x676E69727453;
      break;
    case 3:
      uint64_t result = 0x65636E6575716553;
      break;
    case 4:
      uint64_t result = 0x616E6F6974636944;
      break;
    case 5:
      uint64_t result = 0x72724169746C754DLL;
      break;
    case 6:
      uint64_t result = 0x676E697373694DLL;
      break;
  }
  return result;
}

uint64_t MLDataValue.description.getter()
{
  uint64_t v1 = *(void **)v0;
  uint64_t v2 = *(void **)(v0 + 8);
  switch(*(unsigned char *)(v0 + 16))
  {
    case 0:
      unint64_t v32 = 0xEA00000000002865;
      v30[0] = v1;
      v3._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter(&type metadata for Int, &protocol witness table for Int);
      char object = (char)v3._object;
      String.append(_:)(v3);
      swift_bridgeObjectRelease(object);
      v5._uint64_t countAndFlagsBits = 41;
      v5._char object = (void *)0xE100000000000000;
      String.append(_:)(v5);
      return 0x756C615661746144;
    case 1:
      unint64_t v7 = &v31;
      uint64_t v31 = 0;
      v30[2] = v1;
      unint64_t v32 = 0xE000000000000000;
      v8._uint64_t countAndFlagsBits = 0x756C615661746144;
      v8._char object = (void *)0xEA00000000002865;
      String.append(_:)(v8);
      Double.write<A>(to:)(&v31, &type metadata for DefaultStringInterpolation, &protocol witness table for DefaultStringInterpolation);
      goto LABEL_7;
    case 2:
      unint64_t v7 = &v31;
      uint64_t v31 = 0x756C615661746144;
      unint64_t v32 = 0xEB00000000222865;
      v9._uint64_t countAndFlagsBits = (uint64_t)v1;
      v9._char object = v2;
      String.append(_:)(v9);
      v10._char object = (void *)0xE200000000000000;
      v10._uint64_t countAndFlagsBits = 10530;
      goto LABEL_8;
    case 3:
      v30[0] = 0x756C615661746144;
      v30[1] = 0xEA00000000002865;
      uint64_t v33 = 0;
      outlined copy of MLDataValue(v1, v2, 3u);
      swift_retain_n(v1);
      uint64_t v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for LazyMapSequence<MLDataValue.SequenceType, String>);
      uint64_t v12 = lazy protocol witness table accessor for type LazyMapSequence<MLDataValue.SequenceType, String> and conformance <> LazyMapSequence<A, B>();
      uint64_t v17 = BidirectionalCollection<>.joined(separator:)(8236, 0xE200000000000000, v11, v12);
      uint64_t v14 = v13;
      swift_release();
      uint64_t v31 = 91;
      unint64_t v32 = 0xE100000000000000;
      v15._uint64_t countAndFlagsBits = v17;
      v15._char object = v14;
      String.append(_:)(v15);
      swift_bridgeObjectRelease((_BYTE)v14);
      swift_bridgeObjectRetain(0);
      v15._uint64_t countAndFlagsBits = 93;
      v15._char object = (void *)0xE100000000000000;
      String.append(_:)(v15);
      swift_bridgeObjectRelease(0);
      char v16 = 3;
      outlined consume of MLDataValue(v1, v2, 3);
      v18._uint64_t countAndFlagsBits = 91;
      LOBYTE(v17) = 0;
      v18._char object = (void *)0xE100000000000000;
      unint64_t v7 = v30;
      goto LABEL_10;
    case 4:
      unint64_t v7 = &v31;
      uint64_t v31 = 0x756C615661746144;
      unint64_t v32 = 0xEA00000000002865;
      outlined copy of MLDataValue(v1, v2, 4u);
      uint64_t v19 = lazy protocol witness table accessor for type MLDataValue and conformance MLDataValue();
      uint64_t v20 = Dictionary.description.getter(v1, &type metadata for MLDataValue, &type metadata for MLDataValue, v19);
      uint64_t v22 = v21;
      outlined consume of MLDataValue(v1, v2, 4);
      v23._uint64_t countAndFlagsBits = v20;
      v23._char object = v22;
      String.append(_:)(v23);
      swift_bridgeObjectRelease((_BYTE)v22);
LABEL_7:
      v10._uint64_t countAndFlagsBits = 41;
      v10._char object = (void *)0xE100000000000000;
LABEL_8:
      String.append(_:)(v10);
      goto LABEL_11;
    case 5:
      uint64_t v31 = 0x756C615661746144;
      unint64_t v32 = 0xEA00000000002865;
      outlined copy of MLDataValue(v1, v2, 5u);
      id v24 = v1;
      id v25 = [v24 description];
      id v26 = v25;
      uint64_t v27 = static String._unconditionallyBridgeFromObjectiveC(_:)(v26);
      uint64_t v17 = v28;

      char v16 = 5;
      outlined consume of MLDataValue(v1, v2, 5);
      v18._uint64_t countAndFlagsBits = v27;
      v18._char object = (void *)v17;
      unint64_t v7 = &v31;
LABEL_10:
      String.append(_:)(v18);
      swift_bridgeObjectRelease(v17);
      v29._uint64_t countAndFlagsBits = 41;
      v29._char object = (void *)0xE100000000000000;
      String.append(_:)(v29);
      outlined consume of MLDataValue(v1, v2, v16);
LABEL_11:
      uint64_t result = *v7;
      break;
    case 6:
      uint64_t result = 0xD000000000000012;
      break;
  }
  return result;
}

uint64_t MLDataValue.init(fromAny:)(void *a1, double a2)
{
  uint64_t v4 = a1;
  *(void *)&long long v53 = v2;
  outlined init with copy of Any((uint64_t)a1, (uint64_t)v57);
  if (!swift_dynamicCast(&v54, v57, (char *)&type metadata for Any + 8, &type metadata for MLDataValue, 0))
  {
    uint64_t v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for MLDataValueConvertible);
    if (swift_dynamicCast(&v54, v57, (char *)&type metadata for Any + 8, v8, 0))
    {
      outlined init with take of MLIdentifier(&v54, (uint64_t)v44);
      uint64_t v9 = v44[3];
      uint64_t v69 = a1;
      uint64_t v10 = v44[4];
      __swift_project_boxed_opaque_existential_0Tm(v44, v44[3]);
      uint64_t v70 = v3;
      (*(void (**)(uint64_t, uint64_t))(v10 + 32))(v9, v10);
      __swift_destroy_boxed_opaque_existential_1Tm(v69);
      uint64_t v6 = *((void *)&v46[0] + 1);
      Swift::String v5 = *(void **)&v46[0];
      char v7 = v46[1];
      __swift_destroy_boxed_opaque_existential_1Tm(v44);
      goto LABEL_51;
    }
    if (swift_dynamicCast(&v54, v57, (char *)&type metadata for Any + 8, &type metadata for String, 0))
    {
      __swift_destroy_boxed_opaque_existential_1Tm(a1);
      uint64_t v6 = *((void *)&v54 + 1);
      Swift::String v5 = (void *)v54;
      char v7 = 2;
      goto LABEL_51;
    }
    if (swift_dynamicCast(&v54, v57, (char *)&type metadata for Any + 8, &type metadata for Int, 0))
    {
      __swift_destroy_boxed_opaque_existential_1Tm(a1);
      Swift::String v5 = (void *)v54;
      uint64_t v6 = 0;
      char v7 = 0;
      goto LABEL_51;
    }
    if (swift_dynamicCast(&v54, v57, (char *)&type metadata for Any + 8, &type metadata for Double, 0))
    {
      __swift_destroy_boxed_opaque_existential_1Tm(a1);
      Swift::String v5 = (void *)v54;
      char v7 = 1;
LABEL_50:
      uint64_t v6 = 0;
      goto LABEL_51;
    }
    uint64_t v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [Any]);
    if (swift_dynamicCast(v49, v57, (char *)&type metadata for Any + 8, v11, 0))
    {
      uint64_t v69 = a1;
      uint64_t v12 = *(void *)&v49[0];
      int64_t v13 = *(void *)(*(void *)&v49[0] + 16);
      if (!v13)
      {
        swift_bridgeObjectRelease(*(void *)&v49[0]);
        uint64_t v17 = _swiftEmptyArrayStorage;
LABEL_43:
        specialized MLDataValue.SequenceType.init<A>(_:)((uint64_t)v17, a2);
        __swift_destroy_boxed_opaque_existential_1Tm(v69);
        Swift::String v5 = (void *)v54;
        char v7 = 3;
        goto LABEL_50;
      }
      uint64_t v70 = v3;
      *(void *)&long long v59 = _swiftEmptyArrayStorage;
      specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v13, 0);
      uint64_t v66 = v12;
      uint64_t v14 = v12 + 32;
      while (1)
      {
        int64_t v67 = v13;
        outlined init with copy of Any(v14, (uint64_t)&v54);
        outlined init with copy of Any((uint64_t)&v54, (uint64_t)v44);
        uint64_t v15 = v70;
        MLDataValue.init(fromAny:)(v44);
        __swift_destroy_boxed_opaque_existential_1Tm(&v54);
        uint64_t v70 = v15;
        if (v15) {
          break;
        }
        long long v58 = v46[0];
        char v16 = v46[1];
        uint64_t v17 = (void *)v59;
        char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v59);
        LOBYTE(v64) = v16;
        if (!isUniquelyReferenced_nonNull_native)
        {
          specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v17[2] + 1, 1);
          uint64_t v17 = (void *)v59;
        }
        unint64_t v19 = v17[2];
        unint64_t v20 = v19 + 1;
        if (v17[3] >> 1 <= v19)
        {
          specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v17[3] >= 2uLL, v19 + 1, 1);
          unint64_t v20 = v19 + 1;
          uint64_t v17 = (void *)v59;
        }
        long long v17[2] = v20;
        uint64_t v21 = 3 * v19;
        a2 = *(double *)&v58;
        *(_OWORD *)&v17[v21 + 4] = v58;
        LOBYTE(v17[v21 + 6]) = v64;
        v14 += 32;
        int64_t v13 = v67 - 1;
        if (v67 == 1)
        {
          swift_bridgeObjectRelease(v66);
          goto LABEL_43;
        }
      }
      swift_release(v59);
      __swift_destroy_boxed_opaque_existential_1Tm(v69);
      uint64_t v42 = v66;
LABEL_46:
      swift_bridgeObjectRelease(v42);
    }
    else
    {
      uint64_t v22 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [AnyHashable : Any]);
      if (swift_dynamicCast(&v52, v57, (char *)&type metadata for Any + 8, v22, 0))
      {
        uint64_t v23 = v52;
        int64_t v24 = *(void *)(v52 + 16);
        if (v24)
        {
          uint64_t v69 = a1;
          uint64_t v70 = v3;
          uint64_t v68 = _swiftEmptyArrayStorage;
          *(void *)&long long v58 = v24;
          specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v24, 0);
          int64_t v25 = specialized Dictionary.startIndex.getter(v23);
          if (v25 < 0 || v25 >= 1 << *(unsigned char *)(v23 + 32)) {
LABEL_57:
          }
            BUG();
          uint64_t v27 = v23 + 64;
          uint64_t v63 = v23;
          uint64_t v65 = v23 + 64;
          while (1)
          {
            unint64_t v28 = (unint64_t)v25 >> 6;
            uint64_t v29 = *(void *)(v27 + 8 * ((unint64_t)v25 >> 6));
            if (!_bittest64(&v29, v25)) {
              BUG();
            }
            uint64_t v64 = 1 << v25;
            uint64_t v66 = v26;
            if (*(_DWORD *)(v23 + 36) != v26) {
              BUG();
            }
            int64_t v30 = v25;
            outlined init with copy of AnyHashable(*(void *)(v23 + 48) + 40 * v25, (uint64_t)&v54);
            int64_t v67 = v30;
            outlined init with copy of Any(*(void *)(v23 + 56) + 32 * v30, (uint64_t)v56);
            outlined init with copy of AnyHashable((uint64_t)&v54, (uint64_t)v44);
            outlined init with copy of Any((uint64_t)v56, (uint64_t)&v44[5]);
            qmemcpy(v46, v44, 0x48uLL);
            outlined destroy of (key: AnyHashable, value: Any)((uint64_t)&v54);
            outlined init with copy of AnyHashable((uint64_t)v46, (uint64_t)v49);
            outlined init with copy of Any((uint64_t)&v46[2] + 8, (uint64_t)v51);
            v45[3] = &type metadata for AnyHashable;
            uint64_t v31 = swift_allocObject(&unk_39B1A0, 56, 7);
            v45[0] = v31;
            long long v32 = v49[1];
            *(_OWORD *)(v31 + 16) = v49[0];
            *(_OWORD *)(v31 + 32) = v32;
            *(void *)(v31 + 48) = v50;
            uint64_t v33 = v70;
            MLDataValue.init(fromAny:)(v45);
            if (v33)
            {
              uint64_t v70 = v33;
              __swift_destroy_boxed_opaque_existential_1Tm(v51);
              outlined destroy of (key: AnyHashable, value: Any)((uint64_t)v46);
              swift_release(v68);
              __swift_destroy_boxed_opaque_existential_1Tm(v69);
              uint64_t v42 = v63;
              goto LABEL_46;
            }
            __swift_destroy_boxed_opaque_existential_1Tm(v51);
            outlined init with copy of AnyHashable((uint64_t)v46, (uint64_t)v49);
            outlined init with copy of Any((uint64_t)&v46[2] + 8, (uint64_t)v51);
            MLDataValue.init(fromAny:)(v51);
            uint64_t v70 = 0;
            outlined destroy of AnyHashable((uint64_t)v49);
            outlined destroy of (key: AnyHashable, value: Any)((uint64_t)v46);
            long long v47 = v59;
            char v71 = v60;
            long long v48 = v61;
            char v72 = v62;
            uint64_t v34 = v68;
            if (!swift_isUniquelyReferenced_nonNull_native(v68))
            {
              specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v34[2] + 1, 1);
              uint64_t v34 = v68;
            }
            uint64_t v35 = v67;
            uint64_t v27 = v65;
            unint64_t v36 = v34[2];
            unint64_t v37 = v36 + 1;
            if (v34[3] >> 1 <= v36)
            {
              specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v34[3] >= 2uLL, v36 + 1, 1);
              unint64_t v37 = v36 + 1;
              uint64_t v27 = v65;
              uint64_t v35 = v67;
              uint64_t v34 = v68;
            }
            v34[2] = v37;
            uint64_t v38 = 6 * v36;
            *(_OWORD *)&v34[v38 + 4] = v47;
            LOBYTE(v34[v38 + 6]) = v71;
            *(_OWORD *)&v34[v38 + 7] = v48;
            LOBYTE(v34[v38 + 9]) = v72;
            uint64_t v23 = v63;
            char v39 = *(unsigned char *)(v63 + 32);
            if (v35 >= -(-1 << v39)) {
              BUG();
            }
            if ((v64 & *(void *)(v27 + 8 * v28)) == 0) {
              BUG();
            }
            uint64_t v4 = v69;
            if (*(_DWORD *)(v63 + 36) != v66) {
              BUG();
            }
            int64_t v25 = _HashTable.occupiedBucket(after:)(v35, v27, ~(-1 << v39));
            if ((void)v58 == 1) {
              break;
            }
            *(void *)&long long v58 = v58 - 1;
            if (v25 >= 0)
            {
              uint64_t v26 = *(unsigned int *)(v23 + 36);
              if (v25 < 1 << *(unsigned char *)(v23 + 32)) {
                continue;
              }
            }
            goto LABEL_57;
          }
          swift_bridgeObjectRelease(v23);
        }
        else
        {
          swift_bridgeObjectRelease(v52);
          uint64_t v34 = _swiftEmptyArrayStorage;
        }
        Swift::String v5 = specialized Dictionary.init<A>(uniqueKeysWithValues:)((uint64_t)v34);
        __swift_destroy_boxed_opaque_existential_1Tm(v4);
        char v7 = 4;
        goto LABEL_50;
      }
      *(void *)&long long v54 = 0;
      *((void *)&v54 + 1) = 0xE000000000000000;
      _StringGuts.grow(_:)(36);
      v40._uint64_t countAndFlagsBits = 0x20666F2065707954;
      v40._char object = (void *)0xEF272065756C6176;
      String.append(_:)(v40);
      _print_unlocked<A, B>(_:_:)(v4, &v54, (char *)&type metadata for Any + 8, &type metadata for DefaultStringInterpolation, &protocol witness table for DefaultStringInterpolation);
      v40._char object = "DataValue(Missing)" + 0x8000000000000000;
      v40._uint64_t countAndFlagsBits = 0xD000000000000013;
      String.append(_:)(v40);
      long long v53 = v54;
      v40._char object = (void *)lazy protocol witness table accessor for type MLCreateError and conformance MLCreateError();
      swift_allocError(&type metadata for MLCreateError, v40._object, 0, 0);
      *(_OWORD *)uint64_t v41 = v53;
      *(_OWORD *)(v41 + 16) = 0;
      *(_OWORD *)(v41 + 32) = 0;
      *(unsigned char *)(v41 + 48) = 1;
      swift_willThrow();
      __swift_destroy_boxed_opaque_existential_1Tm(v4);
    }
    return __swift_destroy_boxed_opaque_existential_1Tm(v57);
  }
  __swift_destroy_boxed_opaque_existential_1Tm(a1);
  uint64_t v6 = *((void *)&v54 + 1);
  Swift::String v5 = (void *)v54;
  char v7 = v55;
LABEL_51:
  __swift_destroy_boxed_opaque_existential_1Tm(v57);
  uint64_t result = v53;
  *(void *)long long v53 = v5;
  *(void *)(result + 8) = v6;
  *(unsigned char *)(result + 16) = v7;
  return result;
}

uint64_t MLDataValue.isValid.getter()
{
  id v2 = *(id *)v1;
  uint64_t v3 = *(void **)(v1 + 8);
  char v4 = *(unsigned char *)(v1 + 16);
  switch(v4)
  {
    case 0:
    case 1:
      goto LABEL_7;
    case 2:
      id v5 = *(id *)(v1 + 8);
      goto LABEL_5;
    case 3:
      swift_retain();
      goto LABEL_7;
    case 4:
      id v5 = *(id *)v1;
LABEL_5:
      swift_bridgeObjectRetain((_BYTE)v5);
      goto LABEL_7;
    case 5:
      *(id *)v1;
LABEL_7:
      LOBYTE(v0) = 1;
      break;
    case 6:
      unsigned int v0 = 0;
      break;
  }
  outlined consume of MLDataValue(v2, v3, v4);
  outlined consume of MLDataValue(0, 0, 6);
  return v0;
}

void MLDataValue.ValueType.hash(into:)()
{
  Hasher._combine(_:)(*v0);
}

Swift::Int MLDataValue.ValueType.hashValue.getter()
{
  Swift::UInt v1 = *v0;
  Hasher.init(_seed:)(0);
  Hasher._combine(_:)(v1);
  return Hasher._finalize()();
}

BOOL protocol witness for static Equatable.== infix(_:_:) in conformance MLDataValue.ValueType(unsigned char *a1, unsigned char *a2)
{
  return static MLDataValue.ValueType.== infix(_:_:)(a1, a2);
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance MLDataValue.ValueType()
{
  return MLDataValue.ValueType.hashValue.getter();
}

void protocol witness for Hashable.hash(into:) in conformance MLDataValue.ValueType()
{
}

uint64_t MLDataValue.ValueType.debugDescription.getter()
{
  switch(*v0)
  {
    case 0:
      uint64_t result = 7630409;
      break;
    case 1:
      uint64_t result = 0x656C62756F44;
      break;
    case 2:
      uint64_t result = 0x676E69727453;
      break;
    case 3:
      uint64_t result = 0x65636E6575716553;
      break;
    case 4:
      uint64_t result = 0x616E6F6974636944;
      break;
    case 5:
      uint64_t result = 0x72724169746C754DLL;
      break;
    case 6:
      uint64_t result = 0x676E697373694DLL;
      break;
  }
  return result;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance MLDataValue.ValueType()
{
  return MLDataValue.ValueType.description.getter();
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance MLDataValue.ValueType()
{
  return MLDataValue.ValueType.debugDescription.getter();
}

id MLDataValue.debugDescription.getter()
{
  id v1 = *(id *)v0;
  id v2 = *(void **)(v0 + 8);
  switch(*(unsigned char *)(v0 + 16))
  {
    case 0:
      uint64_t v3 = lazy protocol witness table accessor for type Int and conformance Int();
      uint64_t v4 = BinaryInteger.description.getter(&type metadata for Int, v3);
      goto LABEL_4;
    case 1:
      uint64_t v4 = Double.description.getter(*(double *)&v1);
LABEL_4:
      id v1 = (id)v4;
      break;
    case 2:
      swift_bridgeObjectRetain(*(void *)(v0 + 8));
      break;
    case 3:
      outlined copy of MLDataValue(v1, v2, 3u);
      swift_retain_n(v1);
      uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for LazyMapSequence<MLDataValue.SequenceType, String>);
      uint64_t v6 = lazy protocol witness table accessor for type LazyMapSequence<MLDataValue.SequenceType, String> and conformance <> LazyMapSequence<A, B>();
      uint64_t v7 = BidirectionalCollection<>.joined(separator:)(8236, 0xE200000000000000, v5, v6);
      uint64_t v9 = v8;
      swift_release();
      v10._uint64_t countAndFlagsBits = v7;
      v10._char object = v9;
      String.append(_:)(v10);
      swift_bridgeObjectRelease((_BYTE)v9);
      swift_bridgeObjectRetain(0);
      v10._uint64_t countAndFlagsBits = 93;
      v10._char object = (void *)0xE100000000000000;
      String.append(_:)(v10);
      swift_bridgeObjectRelease(0);
      outlined consume of MLDataValue(v1, v2, 3);
      outlined consume of MLDataValue(v1, v2, 3);
      id v1 = &stru_20 + 59;
      break;
    case 4:
      uint64_t v11 = lazy protocol witness table accessor for type MLDataValue and conformance MLDataValue();
      swift_bridgeObjectRetain((_BYTE)v1);
      uint64_t v12 = Dictionary.debugDescription.getter(v1, &type metadata for MLDataValue, &type metadata for MLDataValue, v11);
      outlined consume of MLDataValue(v1, v2, 4);
      id v1 = (id)v12;
      break;
    case 5:
      id v13 = *(id *)v0;
      id v14 = v13;
      id v15 = [v14 debugDescription];
      id v16 = v15;
      uint64_t v17 = static String._unconditionallyBridgeFromObjectiveC(_:)(v16);

      outlined consume of MLDataValue(v1, v2, 5);
      outlined consume of MLDataValue(v1, v2, 5);
      id v1 = (id)v17;
      break;
    case 6:
      id v1 = (id)0xD000000000000012;
      break;
  }
  return v1;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance MLDataValue()
{
  return MLDataValue.description.getter();
}

id protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance MLDataValue()
{
  return MLDataValue.debugDescription.getter();
}

__int8 static MLDataValue.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  id v2 = *(void **)a1;
  uint64_t v3 = *(void **)(a1 + 8);
  uint64_t v4 = *(void **)a2;
  uint64_t v5 = *(void **)(a2 + 8);
  char v6 = *(unsigned char *)(a2 + 16);
  char v7 = *(unsigned char *)(a1 + 16);
  switch(v7)
  {
    case 0:
      unint64_t v8 = *(void *)a2;
      unint64_t v9 = *(void *)(a2 + 8);
      Swift::String v10 = *(void **)a1;
      v28.i64[1] = *(void *)(a1 + 8);
      if (v6) {
        goto LABEL_26;
      }
      outlined consume of MLDataValue(v2, (void *)v28.i64[1], 0);
      outlined consume of MLDataValue((void *)v8, (void *)v9, 0);
      return v10 == (void *)v8;
    case 1:
      unint64_t v8 = *(void *)a2;
      unint64_t v9 = *(void *)(a2 + 8);
      Swift::String v10 = *(void **)a1;
      v28.i64[1] = *(void *)(a1 + 8);
      if (v6 != 1) {
        goto LABEL_26;
      }
      v28.i64[0] = *(_OWORD *)&_mm_cmpeq_sd((__m128d)v8, (__m128d)(unint64_t)v2);
      outlined consume of MLDataValue(v2, (void *)v28.i64[1], 1);
      outlined consume of MLDataValue((void *)v8, (void *)v9, 1);
      return _mm_loadl_epi64(&v28).u8[0] & 1;
    case 2:
      if (v6 != 2)
      {
        unint64_t v8 = *(void *)a2;
        unint64_t v9 = *(void *)(a2 + 8);
        Swift::String v10 = *(void **)a1;
        v28.i64[1] = *(void *)(a1 + 8);
        int64_t v25 = v3;
        goto LABEL_23;
      }
      id v14 = *(void **)a1;
      if (v2 != v4 || (char v11 = 1, v3 != v5))
      {
        id v15 = *(void **)(a1 + 8);
        char v16 = _stringCompareWithSmolCheck(_:_:expecting:)(v2, v3, v4, v5, 0);
        uint64_t v3 = v15;
        char v11 = v16;
      }
      uint64_t v17 = v3;
      outlined copy of MLDataValue(v4, v5, 2u);
      outlined copy of MLDataValue(v14, v17, 2u);
      outlined consume of MLDataValue(v14, v17, 2);
      Swift::String v18 = v4;
      unint64_t v19 = v5;
      char v20 = 2;
      goto LABEL_15;
    case 3:
      if (v6 != 3)
      {
        unint64_t v8 = *(void *)a2;
        unint64_t v9 = *(void *)(a2 + 8);
        v28.i64[1] = *(void *)(a1 + 8);
        Swift::String v10 = v2;
        swift_retain(v2);
        goto LABEL_26;
      }
      uint64_t v26 = *(void **)a1;
      uint64_t v27 = v4;
      uint64_t v21 = v3;
      uint64_t v22 = v2;
      outlined copy of MLDataValue(v4, v5, 3u);
      outlined copy of MLDataValue(v22, v21, 3u);
      outlined copy of MLDataValue(v4, v5, 3u);
      outlined copy of MLDataValue(v22, v21, 3u);
      char v11 = static MLDataValue.SequenceType.== infix(_:_:)(&v26, &v27);
      outlined consume of MLDataValue(v22, v21, 3);
      outlined consume of MLDataValue(v4, v5, 3);
      outlined consume of MLDataValue(v4, v5, 3);
      Swift::String v18 = v22;
      unint64_t v19 = v21;
      char v20 = 3;
LABEL_15:
      outlined consume of MLDataValue(v18, v19, v20);
      return v11;
    case 4:
      v28.i64[1] = *(void *)(a1 + 8);
      if (v6 == 4)
      {
        uint64_t v12 = v2;
        outlined copy of MLDataValue(v4, v5, 4u);
        outlined copy of MLDataValue(v12, (void *)v28.i64[1], 4u);
        outlined copy of MLDataValue(v4, v5, 4u);
        outlined copy of MLDataValue(v12, (void *)v28.i64[1], 4u);
        v28.i8[0] = specialized static Dictionary<>.== infix(_:_:)((uint64_t)v12, (uint64_t)v4);
        outlined consume of MLDataValue(v12, (void *)v28.i64[1], 4);
        outlined consume of MLDataValue(v4, v5, 4);
        outlined consume of MLDataValue(v4, v5, 4);
        outlined consume of MLDataValue(v12, (void *)v28.i64[1], 4);
        return v28.i8[0];
      }
      unint64_t v8 = (unint64_t)v4;
      unint64_t v9 = (unint64_t)v5;
      Swift::String v10 = v2;
      int64_t v25 = v2;
LABEL_23:
      swift_bridgeObjectRetain(v25);
      goto LABEL_26;
    case 5:
      if (v6 == 5)
      {
        uint64_t v23 = *(void **)(a1 + 8);
        int64_t v24 = *(void **)a1;
        v28.i64[1] = type metadata accessor for NSObject();
        outlined copy of MLDataValue(v4, v5, 5u);
        outlined copy of MLDataValue(v24, v23, 5u);
        outlined copy of MLDataValue(v4, v5, 5u);
        outlined copy of MLDataValue(v24, v23, 5u);
        v28.i8[8] = static NSObject.== infix(_:_:)(v24, v4);
        outlined consume of MLDataValue(v24, v23, 5);
        outlined consume of MLDataValue(v4, v5, 5);
        outlined consume of MLDataValue(v4, v5, 5);
        outlined consume of MLDataValue(v24, v23, 5);
        return v28.i8[8];
      }
      else
      {
        unint64_t v8 = *(void *)a2;
        unint64_t v9 = *(void *)(a2 + 8);
        v28.i64[1] = *(void *)(a1 + 8);
        Swift::String v10 = v2;
        v2;
LABEL_26:
        outlined copy of MLDataValue((void *)v8, (void *)v9, v6);
        outlined consume of MLDataValue(v10, (void *)v28.i64[1], v7);
        outlined consume of MLDataValue((void *)v8, (void *)v9, v6);
        return 0;
      }
    case 6:
      unint64_t v8 = *(void *)a2;
      unint64_t v9 = *(void *)(a2 + 8);
      Swift::String v10 = *(void **)a1;
      v28.i64[1] = *(void *)(a1 + 8);
      if (v6 != 6 || v8 | v9) {
        goto LABEL_26;
      }
      outlined consume of MLDataValue(v2, (void *)v28.i64[1], 6);
      outlined consume of MLDataValue(0, 0, 6);
      return 1;
  }
}

void MLDataValue.hash(into:)(uint64_t a1)
{
  Swift::UInt v2 = *(void *)v1;
  switch(*(unsigned char *)(v1 + 16))
  {
    case 0:
      Swift::UInt v3 = *(void *)v1;
      goto LABEL_8;
    case 1:
      Swift::UInt64 v4 = v2 & 0x7FFFFFFFFFFFFFFFLL;
      if ((v2 & 0x7FFFFFFFFFFFFFFFLL) != 0) {
        Swift::UInt64 v4 = *(void *)v1;
      }
      Hasher._combine(_:)(v4);
      return;
    case 2:
      String.hash(into:)(a1, v2);
      return;
    case 3:
      unint64_t v7 = 0xD000000000000026;
      uint64_t v8 = 381;
      char v6 = "t be used as dictionary key" + 0x8000000000000000;
      goto LABEL_13;
    case 4:
      uint64_t v8 = 383;
      uint64_t v5 = "t be used as dictionary key";
      goto LABEL_11;
    case 5:
      uint64_t v8 = 385;
      uint64_t v5 = "CreateML/MLDataValue.swift";
LABEL_11:
      char v6 = (char *)((unint64_t)v5 | 0x8000000000000000);
      unint64_t v7 = 0xD00000000000002BLL;
LABEL_13:
      _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, v7, v6, "CreateML/MLDataValue.swift", 26, 2, v8, 0);
      BUG();
    case 6:
      Swift::UInt v3 = 1;
LABEL_8:
      Hasher._combine(_:)(v3);
      return;
  }
}

Swift::Int MLDataValue.hashValue.getter()
{
  char v1 = *((unsigned char *)v0 + 16);
  long long v4 = *v0;
  char v5 = v1;
  Hasher.init(_seed:)(0);
  MLDataValue.hash(into:)((uint64_t)v3);
  return Hasher._finalize()();
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance MLDataValue()
{
  return MLDataValue.hashValue.getter();
}

void protocol witness for Hashable.hash(into:) in conformance MLDataValue(uint64_t a1)
{
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance MLDataValue(uint64_t a1)
{
  char v2 = *((unsigned char *)v1 + 16);
  long long v5 = *v1;
  char v6 = v2;
  Hasher.init(_seed:)(a1);
  MLDataValue.hash(into:)((uint64_t)v4);
  return Hasher._finalize()();
}

__int8 protocol witness for static Equatable.== infix(_:_:) in conformance MLDataValue(uint64_t a1, uint64_t a2)
{
  return static MLDataValue.== infix(_:_:)(a1, a2);
}

char specialized static Dictionary<>.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  char result = 1;
  if (a1 == a2) {
    return result;
  }
  if (*(void *)(a1 + 16) != *(void *)(a2 + 16)) {
    return 0;
  }
  uint64_t v3 = 1 << *(unsigned char *)(a1 + 32);
  uint64_t v4 = ~(-1 << v3);
  if (v3 >= 64) {
    uint64_t v4 = -1;
  }
  unint64_t v5 = *(void *)(a1 + 64) & v4;
  int64_t v60 = (unint64_t)(v3 + 63) >> 6;
  int64_t v6 = 0;
  uint64_t v62 = a1;
  uint64_t v58 = a2;
  while (2)
  {
    if (v5)
    {
      _BitScanForward64(&v7, v5);
      uint64_t v65 = (v5 - 1) & v5;
      int64_t v64 = v6;
      unint64_t v8 = v7 | (v6 << 6);
    }
    else
    {
      BOOL v9 = __OFADD__(1, v6);
      int64_t v10 = v6 + 1;
      if (v9) {
        BUG();
      }
      if (v10 >= v60) {
        return 1;
      }
      unint64_t i = *(void *)(a1 + 8 * v10 + 64);
      if (i)
      {
        int64_t v12 = v10;
      }
      else
      {
        int64_t v12 = v10 + 1;
        if (v10 + 1 >= v60) {
          return 1;
        }
        unint64_t i = *(void *)(a1 + 8 * v10 + 72);
        if (!i)
        {
          int64_t v12 = v10 + 2;
          if (v10 + 2 >= v60) {
            return 1;
          }
          unint64_t i = *(void *)(a1 + 8 * v10 + 80);
          if (!i)
          {
            int64_t v12 = v10 + 3;
            if (v10 + 3 >= v60) {
              return 1;
            }
            for (unint64_t i = *(void *)(a1 + 8 * v10 + 88); !i; unint64_t i = *(void *)(a1 + 8 * v12 + 64))
            {
              BOOL v9 = __OFADD__(1, v12++);
              if (v9) {
                BUG();
              }
              if (v12 >= v60) {
                return 1;
              }
            }
          }
        }
      }
      _BitScanForward64(&v13, i);
      uint64_t v65 = i & (i - 1);
      unint64_t v8 = v13 + (v12 << 6);
      int64_t v64 = v12;
    }
    uint64_t v14 = 24 * v8;
    uint64_t v15 = *(void *)(a1 + 48);
    uint64_t v16 = *(void *)(a1 + 56);
    uint64_t v17 = *(void **)(v15 + v14);
    double v67 = *(double *)(v15 + v14 + 8);
    Swift::String v18 = *(void **)(v16 + v14);
    unint64_t v19 = *(void **)(v16 + v14 + 8);
    unsigned __int8 v20 = *(unsigned char *)(v16 + v14 + 16);
    unsigned int v21 = *(unsigned __int8 *)(v15 + v14 + 16);
    outlined copy of MLDataValue(v17, *(void **)&v67, *(unsigned char *)(v15 + v14 + 16));
    unsigned __int8 v68 = v20;
    unint64_t v66 = (unint64_t)v18;
    unint64_t v63 = (unint64_t)v19;
    int v61 = v20;
    outlined copy of MLDataValue(v18, v19, v20);
    double v22 = v67;
    uint64_t v23 = v58;
    uint64_t v24 = specialized __RawDictionaryStorage.find<A>(_:)(v17, *(void *)&v67, v21);
    LOBYTE(v59) = v25;
    outlined consume of MLDataValue(v17, *(void **)&v22, v21);
    if ((LOBYTE(v59) & 1) == 0) {
      goto LABEL_56;
    }
    uint64_t v26 = *(void *)(v23 + 56);
    uint64_t v27 = *(void **)(v26 + 24 * v24);
    __m128i v28 = *(void **)(v26 + 24 * v24 + 8);
    char v29 = *(unsigned char *)(v26 + 24 * v24 + 16);
    switch(v29)
    {
      case 0:
        if (v68) {
          goto LABEL_55;
        }
        outlined consume of MLDataValue(v27, v28, 0);
        unint64_t v30 = v66;
        outlined consume of MLDataValue((void *)v66, (void *)v63, 0);
        a1 = v62;
        int64_t v6 = v64;
        unint64_t v5 = v65;
        if (v27 != (void *)v30) {
          return 0;
        }
        continue;
      case 1:
        if (v68 != 1) {
          goto LABEL_55;
        }
        double v67 = *(double *)(v26 + 24 * v24);
        uint64_t v31 = (void *)v66;
        double v59 = *(double *)&v66;
        outlined consume of MLDataValue(v27, v28, 1);
        outlined consume of MLDataValue(v31, (void *)v63, 1);
        a1 = v62;
        int64_t v6 = v64;
        unint64_t v5 = v65;
        if (v67 == v59) {
          continue;
        }
        return 0;
      case 2:
        if (v68 == 2)
        {
          long long v32 = (void *)v63;
          if (v27 == (void *)v66 && v28 == (void *)v63)
          {
            swift_bridgeObjectRetain(v28);
            unint64_t v33 = v66;
            char v34 = 2;
            outlined consume of MLDataValue((void *)v66, v32, 2);
            uint64_t v35 = (void *)v33;
            unint64_t v36 = v32;
LABEL_42:
            outlined consume of MLDataValue(v35, v36, v34);
            a1 = v62;
            int64_t v6 = v64;
            unint64_t v5 = v65;
          }
          else
          {
            uint64_t v49 = v28;
            uint64_t v50 = v28;
            uint64_t v51 = (void *)v66;
            char v52 = _stringCompareWithSmolCheck(_:_:expecting:)(v27, v49, v66, v63, 0);
            swift_bridgeObjectRetain(v50);
            outlined consume of MLDataValue(v27, v50, 2);
            outlined consume of MLDataValue(v51, v32, 2);
            BOOL v48 = (v52 & 1) == 0;
LABEL_37:
            a1 = v62;
            int64_t v6 = v64;
            unint64_t v5 = v65;
            if (v48) {
              return 0;
            }
          }
          continue;
        }
        outlined copy of MLDataValue(*(void **)(v26 + 24 * v24), *(void **)(v26 + 24 * v24 + 8), 2u);
        swift_bridgeObjectRetain(v28);
LABEL_55:
        long long v54 = (void *)v66;
        char v55 = (void *)v63;
        outlined copy of MLDataValue((void *)v66, (void *)v63, v61);
        outlined consume of MLDataValue(v27, v28, v29);
        outlined consume of MLDataValue(v54, v55, v61);
        outlined consume of MLDataValue(v27, v28, v29);
LABEL_56:
        outlined consume of MLDataValue((void *)v66, (void *)v63, v61);
        return 0;
      case 3:
        if (v68 != 3)
        {
          swift_retain_n(*(void *)(v26 + 24 * v24), 2);
          goto LABEL_55;
        }
        uint64_t v56 = *(void *)(v26 + 24 * v24);
        unint64_t v37 = (void *)v66;
        unint64_t v57 = v66;
        char v38 = 3;
        outlined copy of MLDataValue(v27, v28, 3u);
        char v39 = (void *)v63;
        outlined copy of MLDataValue(v37, (void *)v63, 3u);
        outlined copy of MLDataValue(v27, v28, 3u);
        outlined copy of MLDataValue(v37, v39, 3u);
        outlined copy of MLDataValue(v27, v28, 3u);
        LOBYTE(v67) = static MLDataValue.SequenceType.== infix(_:_:)(&v56, &v57);
        outlined consume of MLDataValue(v27, v28, 3);
        outlined consume of MLDataValue(v37, v39, 3);
        outlined consume of MLDataValue(v37, v39, 3);
        outlined consume of MLDataValue(v27, v28, 3);
        outlined consume of MLDataValue(v27, v28, 3);
        Swift::String v40 = v37;
LABEL_33:
        uint64_t v43 = v39;
        char v44 = v38;
LABEL_36:
        outlined consume of MLDataValue(v40, v43, v44);
        BOOL v48 = (LOBYTE(v67) & 1) == 0;
        goto LABEL_37;
      case 4:
        if (v68 != 4)
        {
          swift_bridgeObjectRetain_n(*(void *)(v26 + 24 * v24), 2);
          goto LABEL_55;
        }
        char v38 = 4;
        outlined copy of MLDataValue(v27, v28, 4u);
        uint64_t v41 = v28;
        uint64_t v42 = (void *)v66;
        char v39 = (void *)v63;
        outlined copy of MLDataValue((void *)v66, (void *)v63, 4u);
        outlined copy of MLDataValue(v27, v41, 4u);
        outlined copy of MLDataValue(v42, v39, 4u);
        outlined copy of MLDataValue(v27, v41, 4u);
        LOBYTE(v67) = specialized static Dictionary<>.== infix(_:_:)(v27, v42);
        outlined consume of MLDataValue(v27, v41, 4);
        outlined consume of MLDataValue(v42, v39, 4);
        outlined consume of MLDataValue(v42, v39, 4);
        outlined consume of MLDataValue(v27, v41, 4);
        outlined consume of MLDataValue(v27, v41, 4);
        Swift::String v40 = v42;
        goto LABEL_33;
      case 5:
        if (v68 != 5)
        {
          id v53 = *(id *)(v26 + 24 * v24);
          v53;
          goto LABEL_55;
        }
        double v67 = COERCE_DOUBLE(type metadata accessor for NSObject());
        outlined copy of MLDataValue(v27, v28, 5u);
        uint64_t v45 = v28;
        uint64_t v46 = (void *)v66;
        long long v47 = (void *)v63;
        outlined copy of MLDataValue((void *)v66, (void *)v63, 5u);
        outlined copy of MLDataValue(v27, v45, 5u);
        outlined copy of MLDataValue(v46, v47, 5u);
        outlined copy of MLDataValue(v27, v45, 5u);
        LOBYTE(v67) = static NSObject.== infix(_:_:)(v27, v46);
        outlined consume of MLDataValue(v27, v45, 5);
        outlined consume of MLDataValue(v46, v47, 5);
        outlined consume of MLDataValue(v46, v47, 5);
        outlined consume of MLDataValue(v27, v45, 5);
        outlined consume of MLDataValue(v27, v45, 5);
        Swift::String v40 = v46;
        uint64_t v43 = v47;
        char v44 = 5;
        goto LABEL_36;
      case 6:
        if (v68 != 6 || v66 | v63) {
          goto LABEL_55;
        }
        char v34 = 6;
        outlined consume of MLDataValue(v27, v28, 6);
        uint64_t v35 = 0;
        unint64_t v36 = 0;
        goto LABEL_42;
    }
  }
}

{
  uint64_t v2;
  uint64_t v3;
  int64_t v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  char result;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  BOOL v16;
  int64_t v17;
  unint64_t j;
  int64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  char v27;
  char v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  void (*v36)(void, void, void);
  unint64_t v37;
  uint64_t *v38;
  uint64_t v39;
  uint64_t *v40;
  uint64_t v41;
  uint64_t *v42;
  uint64_t *v43;
  uint64_t v44;
  void (*v45)(uint64_t *, uint64_t);
  char v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t *v49;
  uint64_t *v50;
  uint64_t v51;
  void (*v52)(void, void, void);
  uint64_t v53;
  uint64_t v54;
  unint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t i;
  int64_t v60;
  uint64_t v61;
  int64_t v62;
  char v63;

  char v2 = a2;
  uint64_t v3 = a1;
  BOOL v48 = type metadata accessor for URL(0);
  uint64_t v56 = *(void *)(v48 - 8);
  uint64_t v4 = *(void *)(v56 + 64);
  unint64_t v5 = alloca(v4);
  int64_t v6 = alloca(v4);
  uint64_t v50 = &v47;
  unint64_t v7 = alloca(v4);
  unint64_t v8 = alloca(v4);
  uint64_t v49 = &v47;
  char result = 1;
  if (a1 != a2)
  {
    if (*(void *)(a1 + 16) == *(void *)(a2 + 16))
    {
      int64_t v10 = 1 << *(unsigned char *)(a1 + 32);
      char v11 = ~(-1 << v10);
      if (v10 >= 64) {
        char v11 = -1;
      }
      int64_t v12 = *(void *)(a1 + 64) & v11;
      uint64_t v62 = (unint64_t)(v10 + 63) >> 6;
      unint64_t v13 = 0;
      long long v54 = v2;
      for (i = a1; ; uint64_t v3 = i)
      {
LABEL_6:
        if (v12)
        {
          _BitScanForward64(&v14, v12);
          int v61 = (v12 - 1) & v12;
          uint64_t v15 = v14 | (v13 << 6);
          int64_t v60 = v13;
        }
        else
        {
          uint64_t v16 = __OFADD__(1, v13);
          uint64_t v17 = v13 + 1;
          if (v16) {
            BUG();
          }
          if (v17 >= v62) {
            return 1;
          }
          j = *(void *)(v3 + 8 * v17 + 64);
          if (j)
          {
            unint64_t v19 = v17;
          }
          else
          {
            unint64_t v19 = v17 + 1;
            if (v17 + 1 >= v62) {
              return 1;
            }
            j = *(void *)(v3 + 8 * v17 + 72);
            if (!j)
            {
              unint64_t v19 = v17 + 2;
              if (v17 + 2 >= v62) {
                return 1;
              }
              j = *(void *)(v3 + 8 * v17 + 80);
              if (!j)
              {
                unint64_t v19 = v17 + 3;
                if (v17 + 3 >= v62) {
                  return 1;
                }
                j = *(void *)(v3 + 8 * v17 + 88);
                if (!j)
                {
                  unint64_t v19 = v17 + 4;
                  if (v17 + 4 >= v62) {
                    return 1;
                  }
                  for (j = *(void *)(v3 + 8 * v17 + 96); !j; j = *(void *)(v3 + 8 * v19 + 64))
                  {
                    uint64_t v16 = __OFADD__(1, v19++);
                    if (v16) {
                      BUG();
                    }
                    if (v19 >= v62) {
                      return 1;
                    }
                  }
                }
              }
            }
          }
          _BitScanForward64(&v20, j);
          int v61 = j & (j - 1);
          int64_t v60 = v19;
          uint64_t v15 = v20 + (v19 << 6);
        }
        unsigned int v21 = *(void *)(v3 + 48);
        double v22 = *(void *)(v3 + 56);
        uint64_t v23 = *(void *)(v21 + 16 * v15);
        uint64_t v24 = *(void *)(v21 + 16 * v15 + 8);
        char v25 = *(void *)(v22 + 8 * v15);
        swift_bridgeObjectRetain(v24);
        swift_bridgeObjectRetain(v25);
        uint64_t v26 = specialized __RawDictionaryStorage.find<A>(_:)(v23, v24);
        __m128i v28 = v27;
        swift_bridgeObjectRelease(v24);
        if ((v28 & 1) == 0) {
          break;
        }
        char v29 = *(void *)(*(void *)(v2 + 56) + 8 * v26);
        unint64_t v30 = *(void *)(v29 + 16);
        if (v30 != *(void *)(v25 + 16)) {
          break;
        }
        if (v30 && v29 != v25)
        {
          uint64_t v51 = *(void *)(v29 + 16);
          uint64_t v31 = v56;
          long long v32 = (*(unsigned __int8 *)(v56 + 80) + 32) & ~*(unsigned __int8 *)(v56 + 80);
          unint64_t v33 = v29 + v32;
          char v34 = v25 + v32;
          uint64_t v58 = v29;
          swift_bridgeObjectRetain(v29);
          uint64_t v35 = v33;
          unint64_t v36 = *(void (**)(void, void, void))(v31 + 16);
          id v53 = *(void *)(v31 + 72);
          unint64_t v37 = 0;
          unint64_t v57 = v25;
          char v52 = v36;
          while (1)
          {
            char v55 = v37;
            char v38 = v49;
            long long v47 = v35;
            char v39 = v48;
            v36(v49, v35, v48);
            if (v55 >= *(void *)(v25 + 16)) {
              BUG();
            }
            Swift::String v40 = v50;
            v36(v50, v34, v39);
            uint64_t v41 = lazy protocol witness table accessor for type URL and conformance URL();
            uint64_t v42 = v38;
            uint64_t v43 = v38;
            char v44 = v39;
            unint64_t v63 = dispatch thunk of static Equatable.== infix(_:_:)(v42, v40, v39, v41);
            uint64_t v45 = *(void (**)(uint64_t *, uint64_t))(v56 + 8);
            v45(v40, v44);
            v45(v43, v44);
            if ((v63 & 1) == 0) {
              break;
            }
            unint64_t v37 = v55 + 1;
            v34 += v53;
            uint64_t v35 = v53 + v47;
            char v25 = v57;
            unint64_t v36 = v52;
            if (v51 == v55 + 1)
            {
              swift_bridgeObjectRelease(v57);
              swift_bridgeObjectRelease(v58);
              unint64_t v13 = v60;
              char v2 = v54;
              uint64_t v3 = i;
              int64_t v12 = v61;
              goto LABEL_6;
            }
          }
          swift_bridgeObjectRelease(v57);
          uint64_t v46 = v58;
          goto LABEL_37;
        }
        swift_bridgeObjectRelease(v25);
        unint64_t v13 = v60;
        int64_t v12 = v61;
      }
      uint64_t v46 = v25;
LABEL_37:
      swift_bridgeObjectRelease(v46);
    }
    return 0;
  }
  return result;
}

{
  char result;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  int64_t v7;
  unint64_t v8;
  unint64_t v9;
  BOOL v10;
  int64_t v11;
  unint64_t i;
  int64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  void *v18;
  uint64_t v19;
  unint64_t v20;
  char v21;
  char v22;
  void *v23;
  unint64_t v24;
  void *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  void *v30;
  BOOL v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  unint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  char v42;
  uint64_t v43;
  uint64_t v44;
  int64_t v45;
  uint64_t v46;
  int64_t v47;

  char result = 1;
  if (a1 != a2)
  {
    uint64_t v3 = a2;
    if (*(void *)(a1 + 16) == *(void *)(a2 + 16))
    {
      uint64_t v4 = 1 << *(unsigned char *)(a1 + 32);
      unint64_t v5 = ~(-1 << v4);
      if (v4 >= 64) {
        unint64_t v5 = -1;
      }
      int64_t v6 = *(void *)(a1 + 64) & v5;
      long long v47 = (unint64_t)(v4 + 63) >> 6;
      unint64_t v7 = 0;
      uint64_t v43 = v3;
      char v44 = a1;
      while (1)
      {
        if (v6)
        {
          _BitScanForward64(&v8, v6);
          uint64_t v46 = (v6 - 1) & v6;
          uint64_t v45 = v7;
          BOOL v9 = v8 | (v7 << 6);
        }
        else
        {
          int64_t v10 = __OFADD__(1, v7);
          char v11 = v7 + 1;
          if (v10) {
            BUG();
          }
          if (v11 >= v47) {
            return 1;
          }
          unint64_t i = *(void *)(a1 + 8 * v11 + 64);
          if (i)
          {
            unint64_t v13 = v11;
          }
          else
          {
            unint64_t v13 = v11 + 1;
            if (v11 + 1 >= v47) {
              return 1;
            }
            unint64_t i = *(void *)(a1 + 8 * v11 + 72);
            if (!i)
            {
              unint64_t v13 = v11 + 2;
              if (v11 + 2 >= v47) {
                return 1;
              }
              unint64_t i = *(void *)(a1 + 8 * v11 + 80);
              if (!i)
              {
                unint64_t v13 = v11 + 3;
                if (v11 + 3 >= v47) {
                  return 1;
                }
                unint64_t i = *(void *)(a1 + 8 * v11 + 88);
                if (!i)
                {
                  unint64_t v13 = v11 + 4;
                  if (v11 + 4 >= v47) {
                    return 1;
                  }
                  for (unint64_t i = *(void *)(a1 + 8 * v11 + 96); !i; unint64_t i = *(void *)(a1 + 8 * v13 + 64))
                  {
                    int64_t v10 = __OFADD__(1, v13++);
                    if (v10) {
                      BUG();
                    }
                    if (v13 >= v47) {
                      return 1;
                    }
                  }
                }
              }
            }
          }
          _BitScanForward64(&v14, i);
          uint64_t v46 = i & (i - 1);
          BOOL v9 = v14 + (v13 << 6);
          uint64_t v45 = v13;
        }
        uint64_t v15 = *(void *)(a1 + 48);
        uint64_t v16 = *(void *)(v15 + 16 * v9);
        uint64_t v17 = *(void *)(v15 + 16 * v9 + 8);
        Swift::String v18 = *(void **)(*(void *)(a1 + 56) + 8 * v9);
        swift_bridgeObjectRetain(v17);
        swift_bridgeObjectRetain((_BYTE)v18);
        unint64_t v19 = v3;
        unsigned __int8 v20 = specialized __RawDictionaryStorage.find<A>(_:)(v16, v17);
        double v22 = v21;
        swift_bridgeObjectRelease(v17);
        if ((v22 & 1) == 0)
        {
          uint64_t v42 = (char)v18;
          goto LABEL_46;
        }
        uint64_t v23 = *(void **)(*(void *)(v19 + 56) + 8 * v20);
        uint64_t v24 = v23[2];
        char v25 = v18;
        if (v24 != v18[2]) {
          goto LABEL_44;
        }
        if (v24 && v23 != v18)
        {
          uint64_t v26 = v23[4];
          uint64_t v27 = v23[5];
          __m128i v28 = v18[4];
          char v29 = v18[5];
          unint64_t v30 = v18;
          if (v26 != v28 || v27 != v29)
          {
            uint64_t v31 = (_stringCompareWithSmolCheck(_:_:expecting:)(v26, v27, v28, v29, 0) & 1) == 0;
            char v25 = v18;
            if (v31) {
              goto LABEL_44;
            }
          }
          if (v24 != 1)
          {
            long long v32 = v23[6];
            unint64_t v33 = v23[7];
            char v34 = v25[6];
            uint64_t v35 = v25[7];
            if (v32 != v34 || v33 != v35)
            {
              uint64_t v31 = (_stringCompareWithSmolCheck(_:_:expecting:)(v32, v33, v34, v35, 0) & 1) == 0;
              char v25 = v18;
              if (v31) {
                goto LABEL_44;
              }
            }
            if (v24 != 2)
            {
              unint64_t v36 = 9;
              unint64_t v37 = 2;
              while (1)
              {
                if (v37 >= v24) {
                  BUG();
                }
                char v38 = v23[v36 - 1];
                char v39 = v23[v36];
                Swift::String v40 = v25[v36 - 1];
                uint64_t v41 = v25[v36];
                if (v38 != v40 || v39 != v41)
                {
                  uint64_t v31 = (_stringCompareWithSmolCheck(_:_:expecting:)(v38, v39, v40, v41, 0) & 1) == 0;
                  char v25 = v30;
                  if (v31) {
                    break;
                  }
                }
                ++v37;
                v36 += 2;
                if (v24 == v37) {
                  goto LABEL_37;
                }
              }
LABEL_44:
              uint64_t v42 = (char)v25;
LABEL_46:
              swift_bridgeObjectRelease(v42);
              return 0;
            }
          }
        }
LABEL_37:
        swift_bridgeObjectRelease((_BYTE)v25);
        a1 = v44;
        uint64_t v3 = v43;
        unint64_t v7 = v45;
        int64_t v6 = v46;
      }
    }
    return 0;
  }
  return result;
}

uint64_t type metadata accessor for NSObject()
{
  uint64_t result = lazy cache variable for type metadata for NSObject;
  if (!lazy cache variable for type metadata for NSObject)
  {
    uint64_t v1 = objc_opt_self(NSObject);
    uint64_t result = swift_getObjCClassMetadata(v1);
    lazy cache variable for type metadata for NSObject = result;
  }
  return result;
}

uint64_t base witness table accessor for Equatable in MLDataValue.ValueType()
{
  return lazy protocol witness table accessor for type MLDataValue.ValueType and conformance MLDataValue.ValueType();
}

uint64_t lazy protocol witness table accessor for type MLDataValue.ValueType and conformance MLDataValue.ValueType()
{
  uint64_t result = lazy protocol witness table cache variable for type MLDataValue.ValueType and conformance MLDataValue.ValueType;
  if (!lazy protocol witness table cache variable for type MLDataValue.ValueType and conformance MLDataValue.ValueType)
  {
    uint64_t result = swift_getWitnessTable(&protocol conformance descriptor for MLDataValue.ValueType, &type metadata for MLDataValue.ValueType);
    lazy protocol witness table cache variable for type MLDataValue.ValueType and conformance MLDataValue.ValueType = result;
  }
  return result;
}

uint64_t base witness table accessor for Equatable in MLDataValue()
{
  return lazy protocol witness table accessor for type MLDataValue and conformance MLDataValue();
}

uint64_t initializeBufferWithCopyOfBuffer for MLDataValue(uint64_t a1, uint64_t a2)
{
  return initializeBufferWithCopyOfBuffer for MLDataValue(a1, a2);
}

{
  void *v2;
  void *v3;
  int v4;

  char v2 = *(void **)a2;
  uint64_t v3 = *(void **)(a2 + 8);
  uint64_t v4 = *(_DWORD *)(a2 + 16);
  outlined copy of MLDataValue(*(void **)a2, v3, v4);
  *(void *)a1 = v2;
  *(void *)(a1 + 8) = v3;
  *(unsigned char *)(a1 + 16) = v4;
  return a1;
}

uint64_t assignWithCopy for MLDataValue(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void **)a2;
  uint64_t v4 = *(void **)(a2 + 8);
  int v5 = *(_DWORD *)(a2 + 16);
  outlined copy of MLDataValue(*(void **)a2, v4, v5);
  int64_t v6 = *(void **)a1;
  unint64_t v7 = *(void **)(a1 + 8);
  *(void *)a1 = v3;
  *(void *)(a1 + 8) = v4;
  int v8 = *(_DWORD *)(a1 + 16);
  *(unsigned char *)(a1 + 16) = v5;
  outlined consume of MLDataValue(v6, v7, v8);
  return a1;
}

uint64_t assignWithTake for MLDataValue(uint64_t a1, uint64_t a2)
{
  char v3 = *(unsigned char *)(a2 + 16);
  uint64_t v4 = *(void **)a1;
  int v5 = *(void **)(a1 + 8);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  int v6 = *(_DWORD *)(a1 + 16);
  *(unsigned char *)(a1 + 16) = v3;
  outlined consume of MLDataValue(v4, v5, v6);
  return a1;
}

uint64_t getEnumTagSinglePayload for MLDataValue(uint64_t a1, unsigned int a2)
{
  if (a2)
  {
    if (a2 >= 0xFA && *(unsigned char *)(a1 + 17))
    {
      int v2 = *(_DWORD *)a1 + 249;
    }
    else
    {
      int v2 = -1;
      if (*(unsigned __int8 *)(a1 + 16) >= 7u) {
        int v2 = *(unsigned __int8 *)(a1 + 16) ^ 0xFF;
      }
    }
  }
  else
  {
    int v2 = -1;
  }
  return (v2 + 1);
}

void storeEnumTagSinglePayload for MLDataValue(uint64_t a1, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xF9)
  {
    *(void *)(a1 + 8) = 0;
    *(void *)a1 = a2 - 250;
    *(unsigned char *)(a1 + 16) = 0;
    if (a3 >= 0xFA) {
      *(unsigned char *)(a1 + 17) = 1;
    }
  }
  else
  {
    if (a3 >= 0xFA) {
      *(unsigned char *)(a1 + 17) = 0;
    }
    if (a2) {
      *(unsigned char *)(a1 + 16) = -(char)a2;
    }
  }
}

uint64_t getEnumTag for MLDataValue(uint64_t a1)
{
  uint64_t result = (*(_DWORD *)a1 + 6);
  if (*(unsigned __int8 *)(a1 + 16) < 6u) {
    return *(unsigned __int8 *)(a1 + 16);
  }
  return result;
}

void destructiveInjectEnumTag for MLDataValue(uint64_t a1, unsigned int a2)
{
  if (a2 >= 6)
  {
    *(void *)a1 = a2 - 6;
    *(void *)(a1 + 8) = 0;
    LOBYTE(a2) = 6;
  }
  *(unsigned char *)(a1 + 16) = a2;
}

ValueMetadata *type metadata accessor for MLDataValue()
{
  return &type metadata for MLDataValue;
}

ValueMetadata *type metadata accessor for MLDataValue.SequenceType()
{
  return &type metadata for MLDataValue.SequenceType;
}

ValueMetadata *type metadata accessor for MLDataValue.DictionaryType()
{
  return &type metadata for MLDataValue.DictionaryType;
}

ValueMetadata *type metadata accessor for MLDataValue.MultiArrayType()
{
  return &type metadata for MLDataValue.MultiArrayType;
}

ValueMetadata *type metadata accessor for MLDataValue.ValueType()
{
  return &type metadata for MLDataValue.ValueType;
}

uint64_t outlined destroy of (key: AnyHashable, value: Any)(uint64_t a1)
{
  uint64_t v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (key: AnyHashable, value: Any));
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v1 - 8) + 8))(a1, v1);
  return a1;
}

uint64_t sub_1E45F6()
{
  __swift_destroy_boxed_opaque_existential_1Tm((void *)(v0 + 16));
  return swift_deallocObject(v0, 56, 7);
}

uint64_t outlined destroy of AnyHashable(uint64_t a1)
{
  return a1;
}

uint64_t (*ActivityClassifierTrainingSessionDelegate.trainer.modify(uint64_t a1))()
{
  swift_beginAccess(OBJC_IVAR____TtC8CreateML41ActivityClassifierTrainingSessionDelegate_trainer + v1, a1, 33, 0);
  return HandPoseClassifierTrainingSessionDelegate.sourceTable.modify;
}

uint64_t ActivityClassifierTrainingSessionDelegate.model.getter()
{
  uint64_t v19 = v0;
  uint64_t v2 = type metadata accessor for MLActivityClassifier.Trainer(0);
  int64_t v3 = *(void *)(*(void *)(v2 - 8) + 64);
  uint64_t v4 = alloca(v3);
  int v5 = alloca(v3);
  int64_t v6 = *(void *)(*(void *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for MLActivityClassifier.Trainer?)
                             - 8)
                 + 64);
  unint64_t v7 = alloca(v6);
  int v8 = alloca(v6);
  uint64_t v9 = OBJC_IVAR____TtC8CreateML41ActivityClassifierTrainingSessionDelegate_trainer + v1;
  swift_beginAccess(v9, v17, 0, 0);
  outlined init with copy of Either<LogisticRegressionClassifier<Float, String>, FullyConnectedNetworkClassifier<Float, String>>(v9, (uint64_t)v17, &demangling cache variable for type metadata for MLActivityClassifier.Trainer?);
  unsigned int v10 = 1;
  if (__swift_getEnumTagSinglePayload((uint64_t)v17, 1, v2))
  {
    outlined destroy of Either<LogisticRegressionClassifier<Float, String>, FullyConnectedNetworkClassifier<Float, String>>((uint64_t)v17, &demangling cache variable for type metadata for MLActivityClassifier.Trainer?);
    uint64_t v11 = type metadata accessor for MLActivityClassifier.Model(0);
    return __swift_storeEnumTagSinglePayload(v19, 1, 1, v11);
  }
  else
  {
    outlined init with copy of TrainingTablePrinter((uint64_t)v17, (uint64_t)v17, type metadata accessor for MLActivityClassifier.Trainer);
    outlined destroy of Either<LogisticRegressionClassifier<Float, String>, FullyConnectedNetworkClassifier<Float, String>>((uint64_t)v17, &demangling cache variable for type metadata for MLActivityClassifier.Trainer?);
    uint64_t v13 = *(void *)&v17[*(int *)(v2 + 24)];
    uint64_t v14 = v19;
    if (v13)
    {
      uint64_t v15 = OBJC_IVAR____TtCVV8CreateML20MLActivityClassifier7Trainer14ModelContainer_model + v13;
      unsigned int v10 = 0;
      swift_beginAccess(v15, v18, 0, 0);
      outlined init with copy of TrainingTablePrinter(v15, v14, type metadata accessor for MLActivityClassifier.Model);
    }
    uint64_t v16 = type metadata accessor for MLActivityClassifier.Model(0);
    __swift_storeEnumTagSinglePayload(v14, v10, 1, v16);
    return outlined destroy of MLActivityClassifier.ModelParameters((uint64_t)v17, type metadata accessor for MLActivityClassifier.Trainer);
  }
}

uint64_t ActivityClassifierTrainingSessionDelegate.init(sessionParameters:)(uint64_t a1)
{
  *(void *)(v1 + 16) = 0xD000000000000013;
  *(void *)(v1 + 24) = "ot found in Configuration" + 0x8000000000000000;
  uint64_t v2 = OBJC_IVAR____TtC8CreateML41ActivityClassifierTrainingSessionDelegate_trainingParameters;
  *(_OWORD *)(v1 + OBJC_IVAR____TtC8CreateML41ActivityClassifierTrainingSessionDelegate_trainingParameters + 48) = 0;
  *(_OWORD *)(v1 + v2 + 32) = 0;
  *(_OWORD *)(v1 + v2 + 16) = 0;
  *(_OWORD *)(v1 + v2) = 0;
  uint64_t v3 = v1 + OBJC_IVAR____TtC8CreateML41ActivityClassifierTrainingSessionDelegate_trainer;
  uint64_t v4 = type metadata accessor for MLActivityClassifier.Trainer(0);
  __swift_storeEnumTagSinglePayload(v3, 1, 1, v4);
  uint64_t v5 = v1 + OBJC_IVAR____TtC8CreateML41ActivityClassifierTrainingSessionDelegate_tablePrinter;
  uint64_t v6 = type metadata accessor for TrainingTablePrinter(0);
  __swift_storeEnumTagSinglePayload(v5, 1, 1, v6);
  *(void *)(v1 + OBJC_IVAR____TtC8CreateML41ActivityClassifierTrainingSessionDelegate_trainingDataSamples) = 0;
  *(void *)(v1 + OBJC_IVAR____TtC8CreateML41ActivityClassifierTrainingSessionDelegate_validationDataSamples) = 0;
  *(void *)(v1 + OBJC_IVAR____TtC8CreateML41ActivityClassifierTrainingSessionDelegate_classLabels) = 0;
  outlined init with take of MLClassifierMetrics(a1, v1 + OBJC_IVAR____TtC8CreateML41ActivityClassifierTrainingSessionDelegate_sessionParameters, type metadata accessor for MLTrainingSessionParameters);
  return v1;
}

void *ActivityClassifierTrainingSessionDelegate.init(trainingData:featureColumnNames:labelColumnName:recordingFileColumn:modelParameters:sessionParameters:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4, void *a5, void *a6, uint64_t a7, uint64_t a8)
{
  uint64_t v46 = v8;
  unsigned int v10 = v9;
  long long v54 = a6;
  uint64_t v50 = a5;
  id v53 = a4;
  uint64_t v51 = a3;
  uint64_t v52 = a2;
  int64_t v11 = *(void *)(*(void *)(type metadata accessor for MLActivityClassifier.ModelParameters(0) - 8) + 64);
  int64_t v12 = alloca(v11);
  uint64_t v13 = alloca(v11);
  long long v47 = &v36;
  uint64_t v55 = *(void *)a1;
  char v56 = *(unsigned char *)(a1 + 8);
  v9[2] = 0xD000000000000013;
  v9[3] = "ot found in Configuration" + 0x8000000000000000;
  uint64_t v14 = OBJC_IVAR____TtC8CreateML41ActivityClassifierTrainingSessionDelegate_trainingParameters;
  *(_OWORD *)((char *)v9 + OBJC_IVAR____TtC8CreateML41ActivityClassifierTrainingSessionDelegate_trainingParameters + 48) = 0;
  *(_OWORD *)((char *)v9 + v14 + 32) = 0;
  *(_OWORD *)((char *)v9 + v14 + 16) = 0;
  *(_OWORD *)((char *)v9 + v14) = 0;
  uint64_t v15 = (uint64_t)v9 + OBJC_IVAR____TtC8CreateML41ActivityClassifierTrainingSessionDelegate_trainer;
  uint64_t v16 = type metadata accessor for MLActivityClassifier.Trainer(0);
  __swift_storeEnumTagSinglePayload(v15, 1, 1, v16);
  uint64_t v17 = (uint64_t)v10 + OBJC_IVAR____TtC8CreateML41ActivityClassifierTrainingSessionDelegate_tablePrinter;
  uint64_t v18 = type metadata accessor for TrainingTablePrinter(0);
  __swift_storeEnumTagSinglePayload(v17, 1, 1, v18);
  *(void *)((char *)v10 + OBJC_IVAR____TtC8CreateML41ActivityClassifierTrainingSessionDelegate_trainingDataSamples) = 0;
  *(void *)((char *)v10 + OBJC_IVAR____TtC8CreateML41ActivityClassifierTrainingSessionDelegate_validationDataSamples) = 0;
  *(void *)((char *)v10 + OBJC_IVAR____TtC8CreateML41ActivityClassifierTrainingSessionDelegate_classLabels) = 0;
  uint64_t v48 = v55;
  char v19 = v56;
  char v49 = v56;
  uint64_t v20 = v46;
  MLActivityClassifier.ModelParameters.generateTables(trainingData:featureColumns:labelColumn:recordingFileColumn:)(&v37, &v44, (uint64_t)&v48, v52, v51, v53, (__m128)0, v50, v54);
  if (v20)
  {
    swift_bridgeObjectRelease((_BYTE)v54);
    swift_bridgeObjectRelease((_BYTE)v53);
    swift_bridgeObjectRelease(v52);
    outlined destroy of MLActivityClassifier.ModelParameters(a8, type metadata accessor for MLTrainingSessionParameters);
    outlined destroy of MLActivityClassifier.ModelParameters(a7, type metadata accessor for MLActivityClassifier.ModelParameters);
    outlined consume of Result<_DataTable, Error>(v55, v19);
    swift_bridgeObjectRelease(v10[3]);
    outlined consume of MLActivityClassifier.PersistentParameters?(*(void *)((char *)v10 + OBJC_IVAR____TtC8CreateML41ActivityClassifierTrainingSessionDelegate_trainingParameters), *(void *)((char *)v10+ OBJC_IVAR____TtC8CreateML41ActivityClassifierTrainingSessionDelegate_trainingParameters+ 8), *(void *)((char *)v10+ OBJC_IVAR____TtC8CreateML41ActivityClassifierTrainingSessionDelegate_trainingParameters+ 16), *(void *)((char *)v10+ OBJC_IVAR____TtC8CreateML41ActivityClassifierTrainingSessionDelegate_trainingParameters+ 24), *(void *)((char *)v10+ OBJC_IVAR____TtC8CreateML41ActivityClassifierTrainingSessionDelegate_trainingParameters+ 32));
    outlined destroy of Either<LogisticRegressionClassifier<Float, String>, FullyConnectedNetworkClassifier<Float, String>>((uint64_t)v10 + OBJC_IVAR____TtC8CreateML41ActivityClassifierTrainingSessionDelegate_trainer, &demangling cache variable for type metadata for MLActivityClassifier.Trainer?);
    outlined destroy of Either<LogisticRegressionClassifier<Float, String>, FullyConnectedNetworkClassifier<Float, String>>((uint64_t)v10 + OBJC_IVAR____TtC8CreateML41ActivityClassifierTrainingSessionDelegate_tablePrinter, &demangling cache variable for type metadata for TrainingTablePrinter?);
    swift_bridgeObjectRelease(*(void *)((char *)v10
                                        + OBJC_IVAR____TtC8CreateML41ActivityClassifierTrainingSessionDelegate_trainingDataSamples));
    swift_bridgeObjectRelease(*(void *)((char *)v10
                                        + OBJC_IVAR____TtC8CreateML41ActivityClassifierTrainingSessionDelegate_validationDataSamples));
    swift_bridgeObjectRelease(*(void *)((char *)v10
                                        + OBJC_IVAR____TtC8CreateML41ActivityClassifierTrainingSessionDelegate_classLabels));
    uint64_t v21 = type metadata accessor for ActivityClassifierTrainingSessionDelegate(0);
    swift_deallocPartialClassInstance(v10, v21, *(unsigned int *)(*v10 + 48), *(unsigned __int16 *)(*v10 + 52));
  }
  else
  {
    double v22 = (char *)v10 + v14;
    outlined consume of Result<_DataTable, Error>(v55, v19);
    uint64_t v55 = 0;
    uint64_t v23 = v44;
    char v24 = v45;
    uint64_t v44 = v37;
    char v45 = v38;
    uint64_t v48 = v23;
    char v49 = v24;
    uint64_t v25 = (uint64_t)v47;
    outlined init with copy of TrainingTablePrinter(a7, (uint64_t)v47, type metadata accessor for MLActivityClassifier.ModelParameters);
    MLActivityClassifier.PersistentParameters.init(trainingData:validationData:featureColumnNames:labelColumnName:recordingFileColumn:modelParameters:)((uint64_t)&v44, (uint64_t)&v48, v52, v51, (char)v53, (uint64_t)v50, (uint64_t)v54, v25);
    outlined destroy of MLActivityClassifier.ModelParameters(a7, type metadata accessor for MLActivityClassifier.ModelParameters);
    uint64_t v26 = v38;
    uint64_t v27 = v39;
    uint64_t v28 = v40;
    uint64_t v29 = v41;
    uint64_t v30 = v43;
    uint64_t v31 = *(void *)v22;
    uint64_t v32 = *((void *)v22 + 1);
    uint64_t v33 = *((void *)v22 + 2);
    long long v54 = (void *)*((void *)v22 + 3);
    uint64_t v34 = *((void *)v22 + 4);
    *(void *)double v22 = v37;
    *((void *)v22 + 1) = v26;
    *((void *)v22 + 2) = v27;
    *((void *)v22 + 3) = v28;
    *((void *)v22 + 4) = v29;
    *(_OWORD *)(v22 + 40) = v42;
    *((void *)v22 + 7) = v30;
    outlined consume of MLActivityClassifier.PersistentParameters?(v31, v32, v33, (char)v54, v34);
    outlined init with take of MLClassifierMetrics(a8, (uint64_t)v10 + OBJC_IVAR____TtC8CreateML41ActivityClassifierTrainingSessionDelegate_sessionParameters, type metadata accessor for MLTrainingSessionParameters);
  }
  return v10;
}

Swift::Void __swiftcall __spoils<cf,zf,sf,of,pf,rax,rdx,rcx,rdi,rsi,r8,r9,r10,r11,r12,xmm0,xmm1,xmm2,xmm3,xmm4,xmm5,xmm6,xmm7> ActivityClassifierTrainingSessionDelegate.setUp()()
{
  uint64_t v99 = v0;
  uint64_t v4 = v1;
  uint64_t v85 = type metadata accessor for MLActivityClassifier.Trainer(0);
  int64_t v5 = *(void *)(*(void *)(v85 - 8) + 64);
  uint64_t v6 = alloca(v5);
  unint64_t v7 = alloca(v5);
  uint64_t v89 = &v78;
  int64_t v8 = *(void *)(*(void *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for DataFrame?)
                             - 8)
                 + 64);
  uint64_t v9 = alloca(v8);
  unsigned int v10 = alloca(v8);
  uint64_t v93 = &v78;
  int64_t v11 = *(void *)(*(void *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TrainingTablePrinter?)
                              - 8)
                  + 64);
  int64_t v12 = alloca(v11);
  uint64_t v13 = alloca(v11);
  uint64_t v14 = alloca(v11);
  uint64_t v15 = alloca(v11);
  uint64_t v84 = &v78;
  uint64_t v16 = alloca(v11);
  uint64_t v17 = alloca(v11);
  uint64_t v94 = &v78;
  int64_t v18 = *(void *)(*(void *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for MLActivityClassifier.Trainer?)
                              - 8)
                  + 64);
  char v19 = alloca(v18);
  uint64_t v20 = alloca(v18);
  uint64_t v86 = &v78;
  uint64_t v21 = alloca(v18);
  double v22 = alloca(v18);
  uint64_t v87 = &v78;
  uint64_t v23 = alloca(v18);
  char v24 = alloca(v18);
  uint64_t v88 = &v78;
  uint64_t v25 = (int *)type metadata accessor for MLActivityClassifier.ModelParameters(0);
  int64_t v26 = *(void *)(*((void *)v25 - 1) + 64);
  uint64_t v27 = alloca(v26);
  uint64_t v28 = alloca(v26);
  uint64_t v96 = &v78;
  uint64_t v29 = type metadata accessor for MLActivityClassifier.Configuration(0);
  int64_t v30 = *(void *)(*(void *)(v29 - 8) + 64);
  uint64_t v31 = alloca(v30);
  uint64_t v32 = alloca(v30);
  uint64_t v33 = alloca(v30);
  uint64_t v34 = alloca(v30);
  uint64_t v35 = *(void *)(v1 + OBJC_IVAR____TtC8CreateML41ActivityClassifierTrainingSessionDelegate_trainingParameters + 32);
  if (v35)
  {
    uint64_t v92 = v29;
    uint64_t v91 = &v78;
    Swift::String v90 = &v78;
    uint64_t v104 = *(void *)(v1 + OBJC_IVAR____TtC8CreateML41ActivityClassifierTrainingSessionDelegate_trainingParameters);
    uint64_t v97 = *(void *)(v1 + OBJC_IVAR____TtC8CreateML41ActivityClassifierTrainingSessionDelegate_trainingParameters + 8);
    uint64_t v36 = *(void *)(v1 + OBJC_IVAR____TtC8CreateML41ActivityClassifierTrainingSessionDelegate_trainingParameters + 16);
    uint64_t v37 = *(void *)(v1 + OBJC_IVAR____TtC8CreateML41ActivityClassifierTrainingSessionDelegate_trainingParameters + 24);
    uint64_t v102 = *(void *)(v4 + OBJC_IVAR____TtC8CreateML41ActivityClassifierTrainingSessionDelegate_trainingParameters + 40);
    uint64_t v101 = *(void *)(v4 + OBJC_IVAR____TtC8CreateML41ActivityClassifierTrainingSessionDelegate_trainingParameters + 48);
    uint64_t v103 = *(void *)(v4 + OBJC_IVAR____TtC8CreateML41ActivityClassifierTrainingSessionDelegate_trainingParameters + 56);
    uint64_t v105 = v25[6];
    uint64_t v95 = v4;
    uint64_t v83 = v25[7];
    uint64_t v106 = v25[8];
    uint64_t v38 = v25[5];
    uint64_t v39 = (uint64_t)v96;
    unsigned __int8 v40 = (char *)v96 + v38;
    Swift::String v98 = &v78;
    uint64_t v100 = v35;
    uint64_t v41 = type metadata accessor for MLActivityClassifier.ModelParameters.Validation(0);
    swift_storeEnumTagMultiPayload(v40, v41, 2);
    *(void *)uint64_t v39 = v36;
    *(unsigned char *)(v39 + 8) = v37;
    uint64_t v42 = v83;
    *(void *)(v39 + v83) = v101;
    *(unsigned char *)(v39 + v42 + 8) = 0;
    uint64_t v43 = v104;
    uint64_t v44 = v105;
    *(void *)(v39 + v105) = v102;
    *(unsigned char *)(v39 + v44 + 8) = 0;
    uint64_t v45 = v106;
    *(void *)(v39 + v106) = v103;
    *(unsigned char *)(v39 + v45 + 8) = 0;
    uint64_t v79 = v43;
    char v80 = v97 & 1;
    uint64_t v81 = v36;
    char v82 = v37;
    outlined copy of MLDataTable?(v36, v37);
    outlined copy of MLDataTable?(v36, v37);
    uint64_t v105 = v36;
    uint64_t v46 = v36;
    char v47 = v97;
    uint64_t v106 = v37;
    outlined copy of MLActivityClassifier.PersistentParameters?(v43, v97, v46, v37, v100);
    outlined copy of Result<_DataTable, Error>(v43, v47);
    uint64_t v48 = v99;
    static MLActivityClassifier.validateAndConvertParameters(parameters:featureColumns:trainingTable:validationTable:)(v39, v100, (uint64_t)&v79, (uint64_t)&v81);
    if (v48)
    {
      char v49 = v47;
      char v50 = v47 & 1;
      uint64_t v51 = v105;
      char v52 = v106;
      outlined consume of MLActivityClassifier.PersistentParameters?(v104, v49, v105, v106, v100);
      outlined consume of MLDataTable?(v51, v52);
      outlined consume of Result<_DataTable, Error>(v104, v50);
      outlined destroy of MLActivityClassifier.ModelParameters((uint64_t)v96, type metadata accessor for MLActivityClassifier.ModelParameters);
    }
    else
    {
      uint64_t v99 = 0;
      outlined consume of MLDataTable?(v105, v106);
      outlined consume of Result<_DataTable, Error>(v104, v47 & 1);
      outlined destroy of MLActivityClassifier.ModelParameters((uint64_t)v96, type metadata accessor for MLActivityClassifier.ModelParameters);
      uint64_t v58 = v85;
      double v59 = v88;
      outlined init with copy of TrainingTablePrinter((uint64_t)v98, (uint64_t)v88 + *(int *)(v85 + 20), type metadata accessor for MLActivityClassifier.Configuration);
      uint64_t *v59 = 0xD00000000000001BLL;
      v59[1] = (uint64_t)("Starting a new session in '" + 0x8000000000000000);
      *(uint64_t *)((char *)v59 + *(int *)(v58 + 24)) = 0;
      __swift_storeEnumTagSinglePayload((uint64_t)v59, 0, 1, v58);
      uint64_t v60 = (uint64_t)v59;
      uint64_t v61 = (uint64_t)v87;
      outlined init with take of DataFrame?(v60, (uint64_t)v87, &demangling cache variable for type metadata for MLActivityClassifier.Trainer?);
      uint64_t v62 = v95 + OBJC_IVAR____TtC8CreateML41ActivityClassifierTrainingSessionDelegate_trainer;
      swift_beginAccess(v95 + OBJC_IVAR____TtC8CreateML41ActivityClassifierTrainingSessionDelegate_trainer, &v79, 33, 0);
      outlined assign with take of MLTrainingSession<MLImageClassifier>.Metadata(v61, v62, &demangling cache variable for type metadata for MLActivityClassifier.Trainer?);
      swift_endAccess(&v79);
      uint64_t v63 = v62;
      uint64_t v64 = (uint64_t)v86;
      outlined init with copy of Either<LogisticRegressionClassifier<Float, String>, FullyConnectedNetworkClassifier<Float, String>>(v63, (uint64_t)v86, &demangling cache variable for type metadata for MLActivityClassifier.Trainer?);
      if (__swift_getEnumTagSinglePayload(v64, 1, v58))
      {
        outlined destroy of Either<LogisticRegressionClassifier<Float, String>, FullyConnectedNetworkClassifier<Float, String>>(v64, &demangling cache variable for type metadata for MLActivityClassifier.Trainer?);
        BOOL v65 = 0;
        uint64_t v66 = type metadata accessor for DataFrame(0);
        uint64_t v67 = (uint64_t)v93;
        __swift_storeEnumTagSinglePayload((uint64_t)v93, 1, 1, v66);
      }
      else
      {
        uint64_t v68 = v58;
        uint64_t v69 = (uint64_t)v89;
        outlined init with copy of TrainingTablePrinter(v64, (uint64_t)v89, type metadata accessor for MLActivityClassifier.Trainer);
        outlined destroy of Either<LogisticRegressionClassifier<Float, String>, FullyConnectedNetworkClassifier<Float, String>>(v64, &demangling cache variable for type metadata for MLActivityClassifier.Trainer?);
        uint64_t v70 = (uint64_t)v91;
        outlined init with copy of TrainingTablePrinter(v69 + *(int *)(v68 + 20), (uint64_t)v91, type metadata accessor for MLActivityClassifier.Configuration);
        outlined destroy of MLActivityClassifier.ModelParameters(v69, type metadata accessor for MLActivityClassifier.Trainer);
        uint64_t v67 = (uint64_t)v93;
        outlined init with copy of Either<LogisticRegressionClassifier<Float, String>, FullyConnectedNetworkClassifier<Float, String>>(v70 + *(int *)(v92 + 48), (uint64_t)v93, &demangling cache variable for type metadata for DataFrame?);
        outlined destroy of MLActivityClassifier.ModelParameters(v70, type metadata accessor for MLActivityClassifier.Configuration);
        uint64_t v71 = type metadata accessor for DataFrame(0);
        BOOL v65 = __swift_getEnumTagSinglePayload(v67, 1, v71) != 1;
      }
      uint64_t v72 = (uint64_t)v94;
      outlined destroy of Either<LogisticRegressionClassifier<Float, String>, FullyConnectedNetworkClassifier<Float, String>>(v67, &demangling cache variable for type metadata for DataFrame?);
      static MLActivityClassifier.makeTablePrinter(hasValidation:)(v65);
      uint64_t v73 = type metadata accessor for TrainingTablePrinter(0);
      __swift_storeEnumTagSinglePayload(v72, 0, 1, v73);
      uint64_t v74 = (uint64_t)v84;
      outlined init with take of DataFrame?(v72, (uint64_t)v84, &demangling cache variable for type metadata for TrainingTablePrinter?);
      uint64_t v75 = v95 + OBJC_IVAR____TtC8CreateML41ActivityClassifierTrainingSessionDelegate_tablePrinter;
      swift_beginAccess(v95 + OBJC_IVAR____TtC8CreateML41ActivityClassifierTrainingSessionDelegate_tablePrinter, &v79, 33, 0);
      outlined assign with take of MLTrainingSession<MLImageClassifier>.Metadata(v74, v75, &demangling cache variable for type metadata for TrainingTablePrinter?);
      swift_endAccess(&v79);
      uint64_t v76 = v75;
      uint64_t v77 = (uint64_t)v90;
      outlined init with copy of Either<LogisticRegressionClassifier<Float, String>, FullyConnectedNetworkClassifier<Float, String>>(v76, (uint64_t)v90, &demangling cache variable for type metadata for TrainingTablePrinter?);
      if (__swift_getEnumTagSinglePayload(v77, 1, v73) == 1) {
        BUG();
      }
      TrainingTablePrinter.beginTable()();
      outlined destroy of MLActivityClassifier.ModelParameters(v77, type metadata accessor for TrainingTablePrinter);
      ActivityClassifierTrainingSessionDelegate.setupCachedSamples()(v2, v3);
      outlined destroy of MLActivityClassifier.ModelParameters((uint64_t)v98, type metadata accessor for MLActivityClassifier.Configuration);
      outlined consume of MLActivityClassifier.PersistentParameters?(v104, v97, v105, v106, v100);
    }
  }
  else
  {
    uint64_t v53 = lazy protocol witness table accessor for type MLCreateError and conformance MLCreateError();
    swift_allocError(&type metadata for MLCreateError, v53, 0, 0);
    *(void *)uint64_t v54 = 0xD000000000000061;
    *(void *)(v54 + 8) = "tylized validation result" + 0x8000000000000000;
    *(_OWORD *)(v54 + 16) = 0;
    *(_OWORD *)(v54 + 32) = 0;
    *(unsigned char *)(v54 + 48) = 0;
    swift_willThrow(&type metadata for MLCreateError, v53, v54, v55, v56, v57);
  }
}

Swift::Void __swiftcall __spoils<cf,zf,sf,of,pf,rax,rdx,rcx,rdi,rsi,r8,r9,r10,r11,r12,xmm0,xmm1,xmm2,xmm3,xmm4,xmm5,xmm6,xmm7> ActivityClassifierTrainingSessionDelegate.resume(from:)(Swift::OpaquePointer from)
{
  uint64_t v131 = v1;
  uint64_t v124 = v2;
  rawValue = from._rawValue;
  uint64_t v114 = type metadata accessor for MLActivityClassifier.Trainer(0);
  int64_t v5 = *(void *)(*(void *)(v114 - 8) + 64);
  uint64_t v6 = alloca(v5);
  unint64_t v7 = alloca(v5);
  uint64_t v117 = &v101;
  int64_t v8 = *(void *)(*(void *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for DataFrame?)
                             - 8)
                 + 64);
  uint64_t v9 = alloca(v8);
  unsigned int v10 = alloca(v8);
  double v121 = &v101;
  int64_t v11 = *(void *)(*(void *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TrainingTablePrinter?)
                              - 8)
                  + 64);
  int64_t v12 = alloca(v11);
  uint64_t v13 = alloca(v11);
  uint64_t v111 = &v101;
  uint64_t v14 = alloca(v11);
  uint64_t v15 = alloca(v11);
  long long v112 = &v101;
  uint64_t v16 = alloca(v11);
  uint64_t v17 = alloca(v11);
  uint64_t v113 = &v101;
  uint64_t v107 = type metadata accessor for URL(0);
  uint64_t v108 = *(void *)(v107 - 8);
  int64_t v18 = *(void *)(v108 + 64);
  char v19 = alloca(v18);
  uint64_t v20 = alloca(v18);
  uint64_t v106 = &v101;
  int64_t v21 = *(void *)(*(void *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for MLActivityClassifier.Trainer?)
                              - 8)
                  + 64);
  double v22 = alloca(v21);
  uint64_t v23 = alloca(v21);
  char v115 = &v101;
  char v24 = alloca(v21);
  uint64_t v25 = alloca(v21);
  uint64_t v116 = &v101;
  int64_t v26 = alloca(v21);
  uint64_t v27 = alloca(v21);
  char v109 = &v101;
  uint64_t v28 = (int *)type metadata accessor for MLActivityClassifier.ModelParameters(0);
  int64_t v29 = *(void *)(*((void *)v28 - 1) + 64);
  int64_t v30 = alloca(v29);
  uint64_t v31 = alloca(v29);
  uint64_t v105 = &v101;
  uint64_t v119 = type metadata accessor for MLActivityClassifier.Configuration(0);
  int64_t v32 = *(void *)(*(void *)(v119 - 8) + 64);
  uint64_t v33 = alloca(v32);
  uint64_t v34 = alloca(v32);
  double v118 = &v101;
  uint64_t v35 = alloca(v32);
  uint64_t v36 = alloca(v32);
  uint64_t v110 = &v101;
  uint64_t v37 = alloca(v32);
  uint64_t v38 = alloca(v32);
  uint64_t v122 = &v101;
  int64_t v39 = *(void *)(*(void *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for MLCheckpoint?)
                              - 8)
                  + 64);
  unsigned __int8 v40 = alloca(v39);
  uint64_t v41 = alloca(v39);
  uint64_t v42 = type metadata accessor for MLCheckpoint(0);
  int64_t v43 = *(void *)(*(void *)(v42 - 8) + 64);
  uint64_t v44 = alloca(v43);
  uint64_t v45 = alloca(v43);
  specialized BidirectionalCollection.last.getter((uint64_t)rawValue);
  if (__swift_getEnumTagSinglePayload((uint64_t)&v101, 1, v42) == 1)
  {
    outlined destroy of Either<LogisticRegressionClassifier<Float, String>, FullyConnectedNetworkClassifier<Float, String>>((uint64_t)&v101, &demangling cache variable for type metadata for MLCheckpoint?);
    uint64_t v46 = lazy protocol witness table accessor for type MLCreateError and conformance MLCreateError();
    swift_allocError(&type metadata for MLCreateError, v46, 0, 0);
    *(void *)uint64_t v47 = 0xD00000000000001DLL;
    *(void *)(v47 + 8) = "reated." + 0x8000000000000000;
    *(_OWORD *)(v47 + 16) = 0;
    *(_OWORD *)(v47 + 32) = 0;
    *(unsigned char *)(v47 + 48) = 0;
    swift_willThrow(&type metadata for MLCreateError, v46, v47, v48, v49, v50);
    return;
  }
  outlined init with take of MLClassifierMetrics((uint64_t)&v101, (uint64_t)&v101, type metadata accessor for MLCheckpoint);
  uint64_t v51 = *(void *)(v124 + OBJC_IVAR____TtC8CreateML41ActivityClassifierTrainingSessionDelegate_trainingParameters + 32);
  if (!v51)
  {
    uint64_t v73 = lazy protocol witness table accessor for type MLCreateError and conformance MLCreateError();
    swift_allocError(&type metadata for MLCreateError, v73, 0, 0);
    *(void *)uint64_t v74 = 0xD000000000000061;
    *(void *)(v74 + 8) = "tylized validation result" + 0x8000000000000000;
    *(_OWORD *)(v74 + 16) = 0;
    *(_OWORD *)(v74 + 32) = 0;
    *(unsigned char *)(v74 + 48) = 0;
    swift_willThrow(&type metadata for MLCreateError, v73, v74, v75, v76, v77);
    uint64_t v78 = &v101;
LABEL_9:
    outlined destroy of MLActivityClassifier.ModelParameters((uint64_t)v78, type metadata accessor for MLCheckpoint);
    return;
  }
  uint64_t v126 = &v101;
  rawValue = *(void **)(v124 + OBJC_IVAR____TtC8CreateML41ActivityClassifierTrainingSessionDelegate_trainingParameters);
  uint64_t v125 = *(void *)(v124 + OBJC_IVAR____TtC8CreateML41ActivityClassifierTrainingSessionDelegate_trainingParameters + 8);
  uint64_t v52 = *(void *)(v124 + OBJC_IVAR____TtC8CreateML41ActivityClassifierTrainingSessionDelegate_trainingParameters + 16);
  uint64_t v53 = *(void *)(v124 + OBJC_IVAR____TtC8CreateML41ActivityClassifierTrainingSessionDelegate_trainingParameters + 24);
  uint64_t v129 = *(void *)(v124 + OBJC_IVAR____TtC8CreateML41ActivityClassifierTrainingSessionDelegate_trainingParameters + 40);
  uint64_t v127 = *(void *)(v124 + OBJC_IVAR____TtC8CreateML41ActivityClassifierTrainingSessionDelegate_trainingParameters + 48);
  uint64_t v128 = *(void *)(v124 + OBJC_IVAR____TtC8CreateML41ActivityClassifierTrainingSessionDelegate_trainingParameters + 56);
  uint64_t v132 = v28[6];
  uint64_t v120 = v28[7];
  uint64_t v130 = v28[8];
  uint64_t v54 = v28[5];
  uint64_t v55 = (uint64_t)v105;
  uint64_t v56 = (char *)v105 + v54;
  uint64_t v123 = v51;
  uint64_t v57 = type metadata accessor for MLActivityClassifier.ModelParameters.Validation(0);
  swift_storeEnumTagMultiPayload(v56, v57, 2);
  *(void *)uint64_t v55 = v52;
  *(unsigned char *)(v55 + 8) = v53;
  uint64_t v58 = v120;
  *(void *)(v55 + v120) = v127;
  *(unsigned char *)(v55 + v58 + 8) = 0;
  uint64_t v59 = v132;
  *(void *)(v55 + v132) = v129;
  *(unsigned char *)(v55 + v59 + 8) = 0;
  uint64_t v60 = v130;
  *(void *)(v55 + v130) = v128;
  *(unsigned char *)(v55 + v60 + 8) = 0;
  uint64_t v61 = (uint64_t)rawValue;
  uint64_t v103 = rawValue;
  char v104 = v125 & 1;
  uint64_t v101 = v52;
  char v102 = v53;
  outlined copy of MLDataTable?(v52, v53);
  outlined copy of MLDataTable?(v52, v53);
  uint64_t v132 = v52;
  uint64_t v62 = v52;
  uint64_t v130 = v53;
  char v63 = v53;
  char v64 = v125;
  uint64_t v65 = v123;
  outlined copy of MLActivityClassifier.PersistentParameters?(v61, v125, v62, v63, v123);
  outlined copy of Result<_DataTable, Error>(v61, v64);
  uint64_t v66 = (uint64_t)v122;
  uint64_t v67 = v131;
  static MLActivityClassifier.validateAndConvertParameters(parameters:featureColumns:trainingTable:validationTable:)(v55, v65, (uint64_t)&v103, (uint64_t)&v101);
  uint64_t v131 = v67;
  if (v67)
  {
    uint64_t v68 = v65;
    char v69 = v64 & 1;
    char v70 = v64;
    uint64_t v71 = v132;
    char v72 = v130;
    outlined consume of MLActivityClassifier.PersistentParameters?((uint64_t)rawValue, v70, v132, v130, v68);
    outlined consume of MLDataTable?(v71, v72);
    outlined consume of Result<_DataTable, Error>((uint64_t)rawValue, v69);
    outlined destroy of MLActivityClassifier.ModelParameters(v55, type metadata accessor for MLActivityClassifier.ModelParameters);
    outlined destroy of MLActivityClassifier.ModelParameters((uint64_t)v126, type metadata accessor for MLCheckpoint);
    return;
  }
  uint64_t v79 = v66;
  char v80 = v64 & 1;
  char v81 = v130;
  outlined consume of MLDataTable?(v132, v130);
  outlined consume of Result<_DataTable, Error>((uint64_t)rawValue, v80);
  outlined destroy of MLActivityClassifier.ModelParameters(v55, type metadata accessor for MLActivityClassifier.ModelParameters);
  uint64_t v82 = (uint64_t)v106;
  (*(void (**)(uint64_t *, uint64_t *, uint64_t))(v108 + 16))(v106, v126, v107);
  uint64_t v83 = (uint64_t)v110;
  outlined init with copy of TrainingTablePrinter(v79, (uint64_t)v110, type metadata accessor for MLActivityClassifier.Configuration);
  uint64_t v84 = (uint64_t)v109;
  uint64_t v85 = v131;
  MLActivityClassifier.Trainer.init(checkpoint:configuration:)(v82, v83);
  if (v85)
  {
    outlined consume of MLActivityClassifier.PersistentParameters?((uint64_t)rawValue, v125, v132, v81, v123);
    outlined destroy of MLActivityClassifier.ModelParameters((uint64_t)v122, type metadata accessor for MLActivityClassifier.Configuration);
    uint64_t v78 = v126;
    goto LABEL_9;
  }
  uint64_t v131 = 0;
  uint64_t v86 = v114;
  __swift_storeEnumTagSinglePayload(v84, 0, 1, v114);
  uint64_t v87 = (uint64_t)v116;
  outlined init with take of DataFrame?(v84, (uint64_t)v116, &demangling cache variable for type metadata for MLActivityClassifier.Trainer?);
  uint64_t v88 = v124 + OBJC_IVAR____TtC8CreateML41ActivityClassifierTrainingSessionDelegate_trainer;
  swift_beginAccess(v124 + OBJC_IVAR____TtC8CreateML41ActivityClassifierTrainingSessionDelegate_trainer, &v103, 33, 0);
  outlined assign with take of MLTrainingSession<MLImageClassifier>.Metadata(v87, v88, &demangling cache variable for type metadata for MLActivityClassifier.Trainer?);
  swift_endAccess(&v103);
  uint64_t v89 = (uint64_t)v115;
  outlined init with copy of Either<LogisticRegressionClassifier<Float, String>, FullyConnectedNetworkClassifier<Float, String>>(v88, (uint64_t)v115, &demangling cache variable for type metadata for MLActivityClassifier.Trainer?);
  if (__swift_getEnumTagSinglePayload(v89, 1, v86))
  {
    outlined destroy of Either<LogisticRegressionClassifier<Float, String>, FullyConnectedNetworkClassifier<Float, String>>(v89, &demangling cache variable for type metadata for MLActivityClassifier.Trainer?);
    BOOL v90 = 0;
    uint64_t v91 = type metadata accessor for DataFrame(0);
    uint64_t v92 = (uint64_t)v121;
    __swift_storeEnumTagSinglePayload((uint64_t)v121, 1, 1, v91);
  }
  else
  {
    uint64_t v93 = (uint64_t)v117;
    outlined init with copy of TrainingTablePrinter(v89, (uint64_t)v117, type metadata accessor for MLActivityClassifier.Trainer);
    outlined destroy of Either<LogisticRegressionClassifier<Float, String>, FullyConnectedNetworkClassifier<Float, String>>(v89, &demangling cache variable for type metadata for MLActivityClassifier.Trainer?);
    uint64_t v94 = (uint64_t)v118;
    outlined init with copy of TrainingTablePrinter(v93 + *(int *)(v86 + 20), (uint64_t)v118, type metadata accessor for MLActivityClassifier.Configuration);
    outlined destroy of MLActivityClassifier.ModelParameters(v93, type metadata accessor for MLActivityClassifier.Trainer);
    uint64_t v92 = (uint64_t)v121;
    outlined init with copy of Either<LogisticRegressionClassifier<Float, String>, FullyConnectedNetworkClassifier<Float, String>>(v94 + *(int *)(v119 + 48), (uint64_t)v121, &demangling cache variable for type metadata for DataFrame?);
    outlined destroy of MLActivityClassifier.ModelParameters(v94, type metadata accessor for MLActivityClassifier.Configuration);
    uint64_t v95 = type metadata accessor for DataFrame(0);
    BOOL v90 = __swift_getEnumTagSinglePayload(v92, 1, v95) != 1;
  }
  outlined destroy of Either<LogisticRegressionClassifier<Float, String>, FullyConnectedNetworkClassifier<Float, String>>(v92, &demangling cache variable for type metadata for DataFrame?);
  uint64_t v96 = (uint64_t)v113;
  static MLActivityClassifier.makeTablePrinter(hasValidation:)(v90);
  uint64_t v97 = type metadata accessor for TrainingTablePrinter(0);
  __swift_storeEnumTagSinglePayload(v96, 0, 1, v97);
  uint64_t v98 = (uint64_t)v112;
  outlined init with take of DataFrame?(v96, (uint64_t)v112, &demangling cache variable for type metadata for TrainingTablePrinter?);
  uint64_t v99 = v124 + OBJC_IVAR____TtC8CreateML41ActivityClassifierTrainingSessionDelegate_tablePrinter;
  swift_beginAccess(v124 + OBJC_IVAR____TtC8CreateML41ActivityClassifierTrainingSessionDelegate_tablePrinter, &v103, 33, 0);
  outlined assign with take of MLTrainingSession<MLImageClassifier>.Metadata(v98, v99, &demangling cache variable for type metadata for TrainingTablePrinter?);
  swift_endAccess(&v103);
  uint64_t v100 = (uint64_t)v111;
  outlined init with copy of Either<LogisticRegressionClassifier<Float, String>, FullyConnectedNetworkClassifier<Float, String>>(v99, (uint64_t)v111, &demangling cache variable for type metadata for TrainingTablePrinter?);
  if (__swift_getEnumTagSinglePayload(v100, 1, v97) == 1) {
    BUG();
  }
  TrainingTablePrinter.beginTable()();
  outlined destroy of MLActivityClassifier.ModelParameters(v100, type metadata accessor for TrainingTablePrinter);
  ActivityClassifierTrainingSessionDelegate.setupCachedSamples()(v3, v4);
  outlined consume of MLActivityClassifier.PersistentParameters?((uint64_t)rawValue, v125, v132, v130, v123);
  outlined destroy of MLActivityClassifier.ModelParameters((uint64_t)v122, type metadata accessor for MLActivityClassifier.Configuration);
  outlined destroy of MLActivityClassifier.ModelParameters((uint64_t)v126, type metadata accessor for MLCheckpoint);
}

uint64_t ActivityClassifierTrainingSessionDelegate.setupCachedSamples()(double a1, double a2)
{
  uint64_t v134 = v2;
  v145 = (void *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for IndexingIterator<Column<String>>);
  int64_t v4 = *(void *)(*(v145 - 1) + 64);
  int64_t v5 = alloca(v4);
  uint64_t v6 = alloca(v4);
  uint64_t v129 = v122;
  uint64_t v130 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Column<String>);
  uint64_t v138 = *(void *)(v130 - 8);
  int64_t v7 = *(void *)(v138 + 64);
  int64_t v8 = alloca(v7);
  uint64_t v9 = alloca(v7);
  uint64_t v127 = v122;
  unsigned int v10 = alloca(v7);
  int64_t v11 = alloca(v7);
  uint64_t v131 = v122;
  int64_t v12 = *(void *)(*(void *)(type metadata accessor for MLActivityClassifier.DataBatcher(0) - 8) + 64);
  uint64_t v13 = alloca(v12);
  uint64_t v14 = alloca(v12);
  uint64_t v133 = v122;
  uint64_t v15 = alloca(v12);
  uint64_t v16 = alloca(v12);
  uint64_t v141 = v122;
  int64_t v17 = *(void *)(*(void *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for DataFrame?)
                              - 8)
                  + 64);
  int64_t v18 = alloca(v17);
  char v19 = alloca(v17);
  uint64_t v124 = v122;
  uint64_t v20 = alloca(v17);
  int64_t v21 = alloca(v17);
  uint64_t v148 = (uint64_t *)v122;
  uint64_t v142 = type metadata accessor for DataFrame(0);
  uint64_t v140 = *(void *)(v142 - 8);
  int64_t v22 = *(void *)(v140 + 64);
  uint64_t v23 = alloca(v22);
  char v24 = alloca(v22);
  uint64_t v132 = v122;
  uint64_t v25 = alloca(v22);
  int64_t v26 = alloca(v22);
  uint64_t v137 = v122;
  uint64_t v27 = alloca(v22);
  uint64_t v28 = alloca(v22);
  uint64_t v147 = v122;
  int64_t v29 = alloca(v22);
  int64_t v30 = alloca(v22);
  Swift::String v144 = v122;
  uint64_t v31 = type metadata accessor for MLActivityClassifier.Trainer(0);
  int64_t v32 = *(void *)(*(void *)(v31 - 8) + 64);
  uint64_t v33 = alloca(v32);
  uint64_t v34 = alloca(v32);
  Swift::String v143 = v122;
  int64_t v35 = *(void *)(*(void *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for MLActivityClassifier.Trainer?)
                              - 8)
                  + 64);
  uint64_t v36 = alloca(v35);
  uint64_t v37 = alloca(v35);
  uint64_t v128 = type metadata accessor for MLActivityClassifier.Configuration(0);
  int64_t v38 = *(void *)(*(void *)(v128 - 8) + 64);
  int64_t v39 = alloca(v38);
  unsigned __int8 v40 = alloca(v38);
  uint64_t v139 = v122;
  uint64_t v41 = alloca(v38);
  uint64_t v42 = alloca(v38);
  uint64_t v135 = v122;
  uint64_t v136 = v3;
  uint64_t v43 = v3 + OBJC_IVAR____TtC8CreateML41ActivityClassifierTrainingSessionDelegate_trainer;
  swift_beginAccess(v3 + OBJC_IVAR____TtC8CreateML41ActivityClassifierTrainingSessionDelegate_trainer, v122, 0, 0);
  outlined init with copy of Either<LogisticRegressionClassifier<Float, String>, FullyConnectedNetworkClassifier<Float, String>>(v43, (uint64_t)v122, &demangling cache variable for type metadata for MLActivityClassifier.Trainer?);
  if (__swift_getEnumTagSinglePayload((uint64_t)v122, 1, v31))
  {
    outlined destroy of Either<LogisticRegressionClassifier<Float, String>, FullyConnectedNetworkClassifier<Float, String>>((uint64_t)v122, &demangling cache variable for type metadata for MLActivityClassifier.Trainer?);
    uint64_t v44 = lazy protocol witness table accessor for type MLCreateError and conformance MLCreateError();
    swift_allocError(&type metadata for MLCreateError, v44, 0, 0);
    *(void *)uint64_t v45 = 0xD00000000000001ELL;
    *(void *)(v45 + 8) = "Training samples are missing" + 0x8000000000000000;
    *(_OWORD *)(v45 + 16) = 0;
    *(_OWORD *)(v45 + 32) = 0;
    *(unsigned char *)(v45 + 48) = 0;
    return swift_willThrow(&type metadata for MLCreateError, v44, v45, v46, v47, v48);
  }
  uint64_t v50 = (uint64_t)v143;
  outlined init with copy of TrainingTablePrinter((uint64_t)v122, (uint64_t)v143, type metadata accessor for MLActivityClassifier.Trainer);
  outlined destroy of Either<LogisticRegressionClassifier<Float, String>, FullyConnectedNetworkClassifier<Float, String>>((uint64_t)v122, &demangling cache variable for type metadata for MLActivityClassifier.Trainer?);
  uint64_t v51 = (uint64_t)v139;
  outlined init with copy of TrainingTablePrinter(v50 + *(int *)(v31 + 20), (uint64_t)v139, type metadata accessor for MLActivityClassifier.Configuration);
  outlined destroy of MLActivityClassifier.ModelParameters(v50, type metadata accessor for MLActivityClassifier.Trainer);
  uint64_t v52 = v51;
  uint64_t v53 = (uint64_t)v135;
  outlined init with take of MLClassifierMetrics(v52, (uint64_t)v135, type metadata accessor for MLActivityClassifier.Configuration);
  uint64_t v54 = (uint64_t)v148;
  outlined init with copy of Either<LogisticRegressionClassifier<Float, String>, FullyConnectedNetworkClassifier<Float, String>>(v53 + *(int *)(v128 + 44), (uint64_t)v148, &demangling cache variable for type metadata for DataFrame?);
  uint64_t v55 = v142;
  if (__swift_getEnumTagSinglePayload(v54, 1, v142) == 1)
  {
    uint64_t v56 = v53;
    outlined destroy of Either<LogisticRegressionClassifier<Float, String>, FullyConnectedNetworkClassifier<Float, String>>(v54, &demangling cache variable for type metadata for DataFrame?);
    uint64_t v57 = lazy protocol witness table accessor for type MLCreateError and conformance MLCreateError();
    swift_allocError(&type metadata for MLCreateError, v57, 0, 0);
    *(void *)uint64_t v58 = 0xD000000000000039;
    *(void *)(v58 + 8) = "Model configuration is not set" + 0x8000000000000000;
    *(_OWORD *)(v58 + 16) = 0;
    *(_OWORD *)(v58 + 32) = 0;
    *(unsigned char *)(v58 + 48) = 0;
    swift_willThrow(&type metadata for MLCreateError, v57, v58, v59, v60, v61);
LABEL_7:
    uint64_t v70 = v56;
    return outlined destroy of MLActivityClassifier.ModelParameters(v70, type metadata accessor for MLActivityClassifier.Configuration);
  }
  uint64_t v62 = v140;
  char v63 = v144;
  uint64_t v125 = *(void (**)(unsigned char *, uint64_t, uint64_t))(v140 + 32);
  v125(v144, v54, v55);
  uint64_t v126 = *(void (**)(unsigned char *, unsigned char *, uint64_t))(v62 + 16);
  v126(v147, v63, v55);
  uint64_t v56 = (uint64_t)v135;
  uint64_t v139 = (unsigned char *)v135[8];
  uint64_t v64 = v135[9];
  Swift::String v143 = (unsigned char *)v135[6];
  unint64_t v65 = v135[7];
  uint64_t v148 = (uint64_t *)v135[4];
  uint64_t v66 = (void *)v135[5];
  swift_bridgeObjectRetain(v64);
  swift_bridgeObjectRetain(v65);
  swift_bridgeObjectRetain((_BYTE)v66);
  uint64_t v67 = v66;
  uint64_t v68 = (uint64_t)v143;
  uint64_t v69 = v134;
  MLActivityClassifier.DataBatcher.init(input:sessionIdColumn:labelColumn:featureColumns:windowSize:sortSessions:mode:)((uint64_t)v147, (uint64_t)v139, v64, (uint64_t)v143, v65, v67, a1, (uint64_t)v148, 0, 0);
  if (v69)
  {
    (*(void (**)(unsigned char *, uint64_t))(v140 + 8))(v144, v142);
    goto LABEL_7;
  }
  uint64_t v146 = 0;
  swift_bridgeObjectRetain(v65);
  uint64_t v71 = v131;
  DataFrame.subscript.getter(v68, v65, &type metadata for String);
  swift_bridgeObjectRelease(v65);
  char v72 = v71;
  uint64_t v73 = v130;
  uint64_t v139 = *(unsigned char **)(v138 + 16);
  ((void (*)(unsigned char *, unsigned char *, uint64_t))v139)(v127, v72, v130);
  uint64_t v74 = lazy protocol witness table accessor for type Column<String> and conformance Column<A>(&lazy protocol witness table cache variable for type Column<String> and conformance Column<A>, (uint64_t)&protocol conformance descriptor for Column<A>);
  uint64_t v75 = v129;
  dispatch thunk of Sequence.makeIterator()(v73, v74);
  uint64_t v76 = (uint64_t *)&v75[*((int *)v145 + 9)];
  uint64_t v77 = lazy protocol witness table accessor for type Column<String> and conformance Column<A>(&lazy protocol witness table cache variable for type Column<String> and conformance Column<A>, (uint64_t)&protocol conformance descriptor for Column<A>);
  v145 = _swiftEmptyArrayStorage;
  uint64_t v148 = v76;
  Swift::String v143 = (unsigned char *)v77;
LABEL_10:
  uint64_t v78 = (uint64_t)v129;
  uint64_t v79 = v130;
  while (1)
  {
    uint64_t v147 = (unsigned char *)*v76;
    dispatch thunk of Collection.endIndex.getter(v79, v77);
    if (v147 == (unsigned char *)v123[0]) {
      break;
    }
    char v80 = (void (*)(void *, void))dispatch thunk of Collection.subscript.read(v123, v148, v79, v143);
    uint64_t v134 = *v81;
    uint64_t v147 = (unsigned char *)v81[1];
    swift_bridgeObjectRetain((_BYTE)v147);
    v80(v123, 0);
    uint64_t v82 = v127;
    ((void (*)(unsigned char *, uint64_t, uint64_t))v139)(v127, v78, v79);
    uint64_t v83 = (uint64_t)v143;
    dispatch thunk of Collection.formIndex(after:)(v148, v79, v143);
    (*(void (**)(unsigned char *, uint64_t))(v138 + 8))(v82, v79);
    uint64_t v76 = v148;
    uint64_t v77 = v83;
    if (v147)
    {
      uint64_t v84 = v134;
      uint64_t v85 = v77;
      uint64_t v86 = v145;
      if (!swift_isUniquelyReferenced_nonNull_native(v145)) {
        uint64_t v86 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v86[2] + 1, 1, (uint64_t)v86);
      }
      uint64_t v87 = v84;
      unint64_t v88 = v86[2];
      unint64_t v89 = v86[3];
      int64_t v90 = v88 + 1;
      if (v89 >> 1 <= v88)
      {
        v145 = (void *)(v88 + 1);
        uint64_t v92 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(v89 >= 2, v90, 1, (uint64_t)v86);
        int64_t v90 = (int64_t)v145;
        uint64_t v87 = v84;
        uint64_t v77 = v85;
        uint64_t v86 = v92;
      }
      else
      {
        uint64_t v77 = v85;
      }
      v86[2] = v90;
      uint64_t v91 = 2 * v88;
      v86[v91 + 4] = v87;
      v145 = v86;
      v86[v91 + 5] = v147;
      uint64_t v76 = v148;
      goto LABEL_10;
    }
  }
  outlined destroy of Either<LogisticRegressionClassifier<Float, String>, FullyConnectedNetworkClassifier<Float, String>>(v78, &demangling cache variable for type metadata for IndexingIterator<Column<String>>);
  (*(void (**)(unsigned char *, uint64_t))(v138 + 8))(v131, v79);
  char v93 = (char)v145;
  uint64_t v94 = v146;
  uint64_t v95 = specialized Sequence.sorted(by:)((uint64_t)v145, (uint64_t)specialized closure #1 in Sequence<>.uniqued(), 0);
  swift_bridgeObjectRelease(v93);
  uint64_t v96 = OBJC_IVAR____TtC8CreateML41ActivityClassifierTrainingSessionDelegate_classLabels;
  uint64_t v97 = v136;
  uint64_t v98 = *(void *)(v136 + OBJC_IVAR____TtC8CreateML41ActivityClassifierTrainingSessionDelegate_classLabels);
  *(void *)(v136 + OBJC_IVAR____TtC8CreateML41ActivityClassifierTrainingSessionDelegate_classLabels) = v95;
  swift_bridgeObjectRelease(v98);
  uint64_t v148 = (uint64_t *)v96;
  uint64_t v99 = *(void (**)(void **, uint64_t))(v97 + v96);
  if (!v99) {
    BUG();
  }
  swift_bridgeObjectRetain(*(void *)(v97 + v96));
  uint64_t v100 = v135;
  uint64_t v101 = (uint64_t)v141;
  char v102 = MLActivityClassifier.DataBatcher.asWeightedSamples(with:classLabels:labels:)((uint64_t)v135, v99, a1, a2);
  uint64_t v146 = v94;
  if (v94)
  {
    swift_bridgeObjectRelease((_BYTE)v99);
    outlined destroy of MLActivityClassifier.ModelParameters(v101, type metadata accessor for MLActivityClassifier.DataBatcher);
    (*(void (**)(unsigned char *, uint64_t))(v140 + 8))(v144, v142);
    return outlined destroy of MLActivityClassifier.ModelParameters((uint64_t)v100, type metadata accessor for MLActivityClassifier.Configuration);
  }
  else
  {
    uint64_t v103 = v102;
    swift_bridgeObjectRelease((_BYTE)v99);
    uint64_t v104 = *(void *)(v136 + OBJC_IVAR____TtC8CreateML41ActivityClassifierTrainingSessionDelegate_trainingDataSamples);
    *(void *)(v136 + OBJC_IVAR____TtC8CreateML41ActivityClassifierTrainingSessionDelegate_trainingDataSamples) = v103;
    swift_bridgeObjectRelease(v104);
    uint64_t v105 = (uint64_t)v124;
    outlined init with copy of Either<LogisticRegressionClassifier<Float, String>, FullyConnectedNetworkClassifier<Float, String>>((uint64_t)v100 + *(int *)(v128 + 48), (uint64_t)v124, &demangling cache variable for type metadata for DataFrame?);
    uint64_t v106 = v142;
    if (__swift_getEnumTagSinglePayload(v105, 1, v142) == 1)
    {
      outlined destroy of MLActivityClassifier.ModelParameters((uint64_t)v141, type metadata accessor for MLActivityClassifier.DataBatcher);
      (*(void (**)(unsigned char *, uint64_t))(v140 + 8))(v144, v106);
      outlined destroy of MLActivityClassifier.ModelParameters((uint64_t)v100, type metadata accessor for MLActivityClassifier.Configuration);
      return outlined destroy of Either<LogisticRegressionClassifier<Float, String>, FullyConnectedNetworkClassifier<Float, String>>(v105, &demangling cache variable for type metadata for DataFrame?);
    }
    else
    {
      uint64_t v107 = v137;
      v125(v137, v105, v106);
      v126(v132, v107, v106);
      uint64_t v138 = v100[8];
      uint64_t v108 = v100[9];
      Swift::String v143 = (unsigned char *)v100[6];
      unint64_t v109 = v100[7];
      uint64_t v147 = (unsigned char *)v100[4];
      uint64_t v110 = (void *)v100[5];
      swift_bridgeObjectRetain(v108);
      swift_bridgeObjectRetain(v109);
      swift_bridgeObjectRetain((_BYTE)v110);
      uint64_t v111 = v146;
      MLActivityClassifier.DataBatcher.init(input:sessionIdColumn:labelColumn:featureColumns:windowSize:sortSessions:mode:)((uint64_t)v132, v138, v108, (uint64_t)v143, v109, v110, a1, (uint64_t)v147, 0, 1);
      if (v111)
      {
        long long v112 = *(void (**)(unsigned char *, uint64_t))(v140 + 8);
        uint64_t v113 = v142;
        v112(v137, v142);
        outlined destroy of MLActivityClassifier.ModelParameters((uint64_t)v141, type metadata accessor for MLActivityClassifier.DataBatcher);
        v112(v144, v113);
        uint64_t v70 = (uint64_t)v100;
        return outlined destroy of MLActivityClassifier.ModelParameters(v70, type metadata accessor for MLActivityClassifier.Configuration);
      }
      uint64_t v114 = *(void (**)(void **, uint64_t))((char *)v148 + v136);
      if (!v114) {
        BUG();
      }
      swift_bridgeObjectRetain(*(uint64_t *)((char *)v148 + v136));
      uint64_t v115 = (uint64_t)v135;
      uint64_t v116 = (uint64_t)v133;
      uint64_t v117 = MLActivityClassifier.DataBatcher.asWeightedSamples(with:classLabels:labels:)((uint64_t)v135, v114, a1, a2);
      uint64_t v146 = 0;
      uint64_t v118 = v140;
      uint64_t v148 = (uint64_t *)v117;
      swift_bridgeObjectRelease((_BYTE)v114);
      outlined destroy of MLActivityClassifier.ModelParameters(v116, type metadata accessor for MLActivityClassifier.DataBatcher);
      uint64_t v119 = *(void (**)(unsigned char *, uint64_t))(v118 + 8);
      uint64_t v120 = v142;
      v119(v137, v142);
      outlined destroy of MLActivityClassifier.ModelParameters((uint64_t)v141, type metadata accessor for MLActivityClassifier.DataBatcher);
      v119(v144, v120);
      outlined destroy of MLActivityClassifier.ModelParameters(v115, type metadata accessor for MLActivityClassifier.Configuration);
      uint64_t v121 = *(void *)(v136
                       + OBJC_IVAR____TtC8CreateML41ActivityClassifierTrainingSessionDelegate_validationDataSamples);
      *(void *)(v136 + OBJC_IVAR____TtC8CreateML41ActivityClassifierTrainingSessionDelegate_validationDataSamples) = v148;
      return swift_bridgeObjectRelease(v121);
    }
  }
}

Swift::Int_optional __swiftcall ActivityClassifierTrainingSessionDelegate.itemCount(phase:)(CreateML::MLPhase phase)
{
  switch(*(unsigned char *)phase)
  {
    case 0:
    case 3:
    case 4:
      char v2 = 1;
      v3.value = 0;
      break;
    case 1:
      v3.value = 0;
      char v2 = 0;
      break;
    case 2:
      uint64_t v4 = OBJC_IVAR____TtC8CreateML41ActivityClassifierTrainingSessionDelegate_sessionParameters + v1;
      char v2 = 0;
      v3.value = *(void *)(*(int *)(type metadata accessor for MLTrainingSessionParameters(0) + 28) + v4);
      break;
  }
  v3.is_nil = v2;
  return v3;
}

Swift::tuple_Int_metrics_OpaquePointer_finished_Bool __swiftcall __spoils<cf,zf,sf,of,pf,rax,rdx,rcx,rdi,rsi,r8,r9,r10,r11,r12,xmm0,xmm1,xmm2,xmm3,xmm4,xmm5,xmm6,xmm7> ActivityClassifierTrainingSessionDelegate.train(from:)(Swift::Int from)
{
  uint64_t v38 = type metadata accessor for TrainingTablePrinter(0);
  int64_t v5 = *(void *)(*(void *)(v38 - 8) + 64);
  uint64_t v6 = alloca(v5);
  int64_t v7 = alloca(v5);
  uint64_t v44 = &v34;
  int64_t v8 = *(void *)(*(void *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TrainingTablePrinter?)
                             - 8)
                 + 64);
  uint64_t v9 = alloca(v8);
  unsigned int v10 = alloca(v8);
  int64_t v39 = &v34;
  uint64_t v11 = v2 + OBJC_IVAR____TtC8CreateML41ActivityClassifierTrainingSessionDelegate_sessionParameters;
  uint64_t v12 = type metadata accessor for MLTrainingSessionParameters(0);
  uint64_t v13 = *(void *)(*(int *)(v12 + 20) + v11);
  if (__OFADD__(v13, from)) {
    BUG();
  }
  Swift::Int v14 = *(void *)(v11 + *(int *)(v12 + 28));
  uint64_t v15 = v14 - from;
  if (__OFSUB__(v14, from)) {
    BUG();
  }
  if (v13 < v15) {
    uint64_t v15 = v13;
  }
  if (v15 <= 0)
  {
    LOBYTE(v17) = 1;
    uint64_t v16 = _swiftEmptyDictionarySingleton;
    Swift::Int v25 = 0;
  }
  else
  {
    Swift::Int v47 = v14;
    uint64_t v46 = v13 + from;
    Swift::Int v49 = v15;
    Swift::Int v45 = from;
    uint64_t v51 = v1;
    uint64_t v37 = OBJC_IVAR____TtC8CreateML41ActivityClassifierTrainingSessionDelegate_trainingDataSamples;
    uint64_t v40 = OBJC_IVAR____TtC8CreateML41ActivityClassifierTrainingSessionDelegate_validationDataSamples;
    uint64_t v41 = v2 + OBJC_IVAR____TtC8CreateML41ActivityClassifierTrainingSessionDelegate_trainer;
    uint64_t v42 = v2 + OBJC_IVAR____TtC8CreateML41ActivityClassifierTrainingSessionDelegate_tablePrinter;
    swift_beginAccess(v2 + OBJC_IVAR____TtC8CreateML41ActivityClassifierTrainingSessionDelegate_tablePrinter, v35, 0, 0);
    uint64_t v16 = (void *)(&dword_0 + 1);
    uint64_t v43 = v2;
    while (1)
    {
      uint64_t v17 = *(void *)(v2 + v37);
      if (!v17)
      {
        uint64_t v26 = lazy protocol witness table accessor for type MLCreateError and conformance MLCreateError();
        swift_allocError(&type metadata for MLCreateError, v26, 0, 0);
        *(void *)uint64_t v27 = 0xD00000000000001CLL;
        *(void *)(v27 + 8) = "Model has not been trained" + 0x8000000000000000;
        *(_OWORD *)(v27 + 16) = 0;
        *(_OWORD *)(v27 + 32) = 0;
        *(unsigned char *)(v27 + 48) = 0;
        Swift::Int v25 = swift_willThrow(&type metadata for MLCreateError, v26, v27, v28, v29, v30);
        goto LABEL_21;
      }
      uint64_t v48 = v16;
      uint64_t v16 = *(void **)(v2 + v40);
      uint64_t v18 = v41;
      swift_beginAccess(v41, v36, 33, 0);
      uint64_t v19 = type metadata accessor for MLActivityClassifier.Trainer(0);
      if (__swift_getEnumTagSinglePayload(v18, 1, v19) == 1) {
        BUG();
      }
      swift_bridgeObjectRetain((_BYTE)v16);
      swift_bridgeObjectRetain(v17);
      uint64_t v20 = v51;
      metrics._char rawValue = MLActivityClassifier.Trainer.iterateTraining(using:validationSamples:)(v17, (uint64_t)v16, v3, v4);
      swift_endAccess(v36);
      uint64_t v51 = v20;
      if (v20)
      {
        swift_bridgeObjectRelease(v17);
        Swift::Int v25 = swift_bridgeObjectRelease((_BYTE)v16);
        goto LABEL_21;
      }
      swift_bridgeObjectRelease((_BYTE)v16);
      swift_bridgeObjectRelease(v17);
      uint64_t v21 = (uint64_t)v39;
      outlined init with copy of Either<LogisticRegressionClassifier<Float, String>, FullyConnectedNetworkClassifier<Float, String>>(v42, (uint64_t)v39, &demangling cache variable for type metadata for TrainingTablePrinter?);
      if (__swift_getEnumTagSinglePayload(v21, 1, v38))
      {
        outlined destroy of Either<LogisticRegressionClassifier<Float, String>, FullyConnectedNetworkClassifier<Float, String>>(v21, &demangling cache variable for type metadata for TrainingTablePrinter?);
        int64_t v22 = v48;
      }
      else
      {
        uint64_t v23 = (uint64_t)v44;
        outlined init with copy of TrainingTablePrinter(v21, (uint64_t)v44, type metadata accessor for TrainingTablePrinter);
        outlined destroy of Either<LogisticRegressionClassifier<Float, String>, FullyConnectedNetworkClassifier<Float, String>>(v21, &demangling cache variable for type metadata for TrainingTablePrinter?);
        int64_t v22 = v48;
        if (__OFADD__(v48, v45)) {
          BUG();
        }
        TrainingTablePrinter.print(iteration:metrics:)((Swift::Int)v48 + v45, metrics);
        outlined destroy of MLActivityClassifier.ModelParameters(v23, type metadata accessor for TrainingTablePrinter);
      }
      uint64_t v2 = v43;
      if ((void *)v49 == v22) {
        break;
      }
      swift_bridgeObjectRelease(metrics._rawValue);
      BOOL v24 = __OFADD__(1, v22);
      uint64_t v16 = (void *)((char *)v22 + 1);
      if (v24) {
        BUG();
      }
    }
    LOBYTE(v17) = v46 >= v47;
    char rawValue = (char)metrics._rawValue;
    uint64_t v16 = specialized _dictionaryUpCast<A, B, C, D>(_:)((uint64_t)metrics._rawValue);
    swift_bridgeObjectRelease(rawValue);
    Swift::Int v25 = v49;
  }
LABEL_21:
  int64_t v32 = v16;
  Swift::Bool v33 = v17;
  result.metrics._char rawValue = v32;
  result._0 = v25;
  result.finished = v33;
  return result;
}

Swift::tuple_Int_finished_Bool __swiftcall __spoils<cf,zf,sf,of,pf,rax,rdx,rcx,rdi,rsi,r8,r9,r10,r11,r12,xmm0,xmm1,xmm2,xmm3,xmm4,xmm5,xmm6,xmm7> ActivityClassifierTrainingSessionDelegate.evaluate(from:)(Swift::Int from)
{
  uint64_t v24 = v1;
  uint64_t v3 = type metadata accessor for TrainingTablePrinter(0);
  int64_t v4 = *(void *)(*(void *)(v3 - 8) + 64);
  int64_t v5 = alloca(v4);
  uint64_t v6 = alloca(v4);
  uint64_t v23 = v20;
  int64_t v7 = *(void *)(*(void *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TrainingTablePrinter?)
                             - 8)
                 + 64);
  int64_t v8 = alloca(v7);
  uint64_t v9 = alloca(v7);
  uint64_t v22 = v2;
  uint64_t v10 = v2 + OBJC_IVAR____TtC8CreateML41ActivityClassifierTrainingSessionDelegate_tablePrinter;
  swift_beginAccess(v2 + OBJC_IVAR____TtC8CreateML41ActivityClassifierTrainingSessionDelegate_tablePrinter, v20, 0, 0);
  outlined init with copy of Either<LogisticRegressionClassifier<Float, String>, FullyConnectedNetworkClassifier<Float, String>>(v10, (uint64_t)v20, &demangling cache variable for type metadata for TrainingTablePrinter?);
  if (__swift_getEnumTagSinglePayload((uint64_t)v20, 1, v3))
  {
    outlined destroy of Either<LogisticRegressionClassifier<Float, String>, FullyConnectedNetworkClassifier<Float, String>>((uint64_t)v20, &demangling cache variable for type metadata for TrainingTablePrinter?);
  }
  else
  {
    uint64_t v11 = (uint64_t)v23;
    outlined init with copy of TrainingTablePrinter((uint64_t)v20, (uint64_t)v23, type metadata accessor for TrainingTablePrinter);
    outlined destroy of Either<LogisticRegressionClassifier<Float, String>, FullyConnectedNetworkClassifier<Float, String>>((uint64_t)v20, &demangling cache variable for type metadata for TrainingTablePrinter?);
    static os_log_type_t.info.getter();
    uint64_t v12 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<CVarArg>);
    uint64_t v13 = (void *)swift_allocObject(v12, 72, 7);
    v13[2] = 1;
    v13[3] = 2;
    v13[7] = &type metadata for Int;
    v13[8] = &protocol witness table for Int;
    v13[4] = 3;
    os_log(_:dso:log:type:_:)("event: %lu", 10);
    swift_bridgeObjectRelease((_BYTE)v13);
    outlined destroy of MLActivityClassifier.ModelParameters(v11, type metadata accessor for TrainingTablePrinter);
  }
  Swift::Int v14 = ActivityClassifierTrainingSessionDelegate.trainer.modify((uint64_t)v21);
  uint64_t v16 = v15;
  uint64_t v17 = type metadata accessor for MLActivityClassifier.Trainer(0);
  if (__swift_getEnumTagSinglePayload(v16, 1, v17))
  {
    ((void (*)(unsigned char *, void))v14)(v21, 0);
  }
  else
  {
    if (!*(void *)(v16 + *(int *)(v17 + 24))) {
      BUG();
    }
    MLActivityClassifier.Trainer.ModelContainer.compileModel()();
    ((void (*)(unsigned char *, BOOL))v14)(v21, v18 != 0);
  }
  v19._0 = 1;
  v19.finished = 1;
  return v19;
}

uint64_t ActivityClassifierTrainingSessionDelegate.saveCheckpoint(to:phase:iteration:)(uint64_t a1, unsigned char *a2)
{
  uint64_t v4 = v2;
  uint64_t v23 = a1;
  unint64_t v5 = 0xEB0000000064657ALL;
  int64_t v6 = *(void *)(*(void *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for MLActivityClassifier.Trainer?)
                             - 8)
                 + 64);
  int64_t v7 = alloca(v6);
  int64_t v8 = alloca(v6);
  uint64_t v22 = v21;
  switch(*a2)
  {
    case 0:
      uint64_t v24 = v2;
      uint64_t v9 = 0x696C616974696E69;
      break;
    case 1:
      uint64_t v24 = v2;
      uint64_t v9 = 0x6974636172747865;
      goto LABEL_6;
    case 2:
      swift_bridgeObjectRelease(0);
      goto LABEL_9;
    case 3:
      uint64_t v24 = v2;
      uint64_t v9 = 0x697461756C617665;
LABEL_6:
      unint64_t v5 = 0xEA0000000000676ELL;
      break;
    case 4:
      uint64_t v24 = v2;
      unint64_t v5 = 0xEB00000000676E69;
      uint64_t v9 = 0x636E657265666E69;
      break;
  }
  LODWORD(v10) = 0;
  char v11 = _stringCompareWithSmolCheck(_:_:expecting:)(v9, v5, 0x676E696E69617274, 0xE800000000000000, 0);
  swift_bridgeObjectRelease(v5);
  BOOL v12 = (v11 & 1) == 0;
  uint64_t v4 = v24;
  if (!v12)
  {
LABEL_9:
    uint64_t v13 = OBJC_IVAR____TtC8CreateML41ActivityClassifierTrainingSessionDelegate_trainer + v3;
    swift_beginAccess(v13, v21, 0, 0);
    uint64_t v14 = (uint64_t)v22;
    outlined init with copy of Either<LogisticRegressionClassifier<Float, String>, FullyConnectedNetworkClassifier<Float, String>>(v13, (uint64_t)v22, &demangling cache variable for type metadata for MLActivityClassifier.Trainer?);
    uint64_t v10 = type metadata accessor for MLActivityClassifier.Trainer(0);
    if (__swift_getEnumTagSinglePayload(v14, 1, v10) == 1) {
      BUG();
    }
    if (*(void *)(v14 + *(int *)(v10 + 24)))
    {
      swift_retain();
      specialized _ModelCheckpoint<>.save(to:)(v23);
      swift_release();
      if (!v4)
      {
        outlined destroy of MLActivityClassifier.ModelParameters(v14, type metadata accessor for MLActivityClassifier.Trainer);
        LOBYTE(v10) = 1;
        return v10;
      }
    }
    else
    {
      uint64_t v15 = lazy protocol witness table accessor for type MLCreateError and conformance MLCreateError();
      swift_allocError(&type metadata for MLCreateError, v15, 0, 0);
      *(void *)uint64_t v16 = 0xD00000000000001ALL;
      *(void *)(v16 + 8) = "validationDataSamples" + 0x8000000000000000;
      *(_OWORD *)(v16 + 16) = 0;
      *(_OWORD *)(v16 + 32) = 0;
      *(unsigned char *)(v16 + 48) = 0;
      swift_willThrow(&type metadata for MLCreateError, v15, v16, v17, v18, v19);
    }
    outlined destroy of MLActivityClassifier.ModelParameters(v14, type metadata accessor for MLActivityClassifier.Trainer);
  }
  return v10;
}

NSURL *ActivityClassifierTrainingSessionDelegate.save(to:)(uint64_t a1)
{
  if (*(void *)(v1 + OBJC_IVAR____TtC8CreateML41ActivityClassifierTrainingSessionDelegate_trainingParameters + 32)) {
    return MLActivityClassifier.PersistentParameters.save(toSessionDirectory:)(a1);
  }
  uint64_t v3 = lazy protocol witness table accessor for type MLCreateError and conformance MLCreateError();
  swift_allocError(&type metadata for MLCreateError, v3, 0, 0);
  *(void *)uint64_t v4 = 0xD000000000000030;
  *(void *)(v4 + 8) = "Feature Extractor" + 0x8000000000000000;
  *(_OWORD *)(v4 + 16) = 0;
  *(_OWORD *)(v4 + 32) = 0;
  *(unsigned char *)(v4 + 48) = 2;
  return (NSURL *)swift_willThrow(&type metadata for MLCreateError, v3, v4, v5, v6, v7);
}

NSURL *ActivityClassifierTrainingSessionDelegate.restore(from:phase:)(uint64_t a1, double a2)
{
  uint64_t v4 = type metadata accessor for URL(0);
  uint64_t v5 = *(void *)(v4 - 8);
  int64_t v6 = *(void *)(v5 + 64);
  uint64_t v7 = alloca(v6);
  int64_t v8 = alloca(v6);
  (*(void (**)(uint64_t *, uint64_t, uint64_t))(v5 + 16))(&v25, a1, v4);
  Swift::tuple_Int_metrics_OpaquePointer_finished_Bool result = MLActivityClassifier.PersistentParameters.init(sessionDirectory:)((uint64_t)&v25);
  if (!v2)
  {
    uint64_t v10 = v36;
    uint64_t v11 = v35;
    uint64_t v12 = v37;
    uint64_t v13 = v38;
    uint64_t v14 = v39;
    uint64_t v15 = v40;
    uint64_t v16 = v41;
    uint64_t v17 = OBJC_IVAR____TtC8CreateML41ActivityClassifierTrainingSessionDelegate_trainingParameters;
    uint64_t v54 = *(void *)(v3 + OBJC_IVAR____TtC8CreateML41ActivityClassifierTrainingSessionDelegate_trainingParameters);
    uint64_t v53 = *(void *)(v3 + OBJC_IVAR____TtC8CreateML41ActivityClassifierTrainingSessionDelegate_trainingParameters + 8);
    uint64_t v52 = *(void *)(v3 + OBJC_IVAR____TtC8CreateML41ActivityClassifierTrainingSessionDelegate_trainingParameters + 16);
    uint64_t v51 = *(void *)(v3 + OBJC_IVAR____TtC8CreateML41ActivityClassifierTrainingSessionDelegate_trainingParameters + 24);
    uint64_t v18 = *(void *)(v3 + OBJC_IVAR____TtC8CreateML41ActivityClassifierTrainingSessionDelegate_trainingParameters + 32);
    uint64_t v19 = *(void *)(v3 + OBJC_IVAR____TtC8CreateML41ActivityClassifierTrainingSessionDelegate_trainingParameters + 40);
    uint64_t v50 = *(void *)(v3 + OBJC_IVAR____TtC8CreateML41ActivityClassifierTrainingSessionDelegate_trainingParameters + 48);
    uint64_t v20 = *(void *)(v3 + OBJC_IVAR____TtC8CreateML41ActivityClassifierTrainingSessionDelegate_trainingParameters + 56);
    if (v18)
    {
      uint64_t v45 = v34;
      uint64_t v47 = v35;
      uint64_t v46 = v19;
      uint64_t v48 = v20;
      uint64_t v26 = v54;
      char v27 = v53 & 1;
      uint64_t v28 = v52;
      uint64_t v21 = v18;
      uint64_t v49 = v18;
      uint64_t v22 = v52;
      char v29 = v51;
      uint64_t v30 = v21;
      uint64_t v31 = v19;
      uint64_t v32 = v50;
      uint64_t v33 = v20;
      uint64_t v42 = v38;
      uint64_t v44 = v36;
      uint64_t v43 = v37;
      outlined copy of Result<_DataTable, Error>(v54, v53);
      uint64_t v23 = v22;
      LOBYTE(v22) = v51;
      outlined copy of MLDataTable?(v23, v51);
      swift_bridgeObjectRetain(v49);
      ActivityClassifierTrainingSessionDelegate.verifyThatParametersAreCompatible(_:_:phase:)((uint64_t)&v34, (uint64_t)&v26, a2);
      outlined consume of MLActivityClassifier.PersistentParameters?(v54, v53, v52, v22, v49);
      outlined consume of Result<_DataTable, Error>(v45, v47);
      outlined consume of MLDataTable?(v44, v43);
      return (NSURL *)swift_bridgeObjectRelease(v42);
    }
    else
    {
      *(void *)(v3 + OBJC_IVAR____TtC8CreateML41ActivityClassifierTrainingSessionDelegate_trainingParameters) = v34;
      *(void *)(v3 + v17 + 8) = v11;
      *(void *)(v3 + v17 + 16) = v10;
      *(void *)(v3 + v17 + 24) = v12;
      *(void *)(v3 + v17 + 32) = v13;
      *(void *)(v3 + v17 + 40) = v14;
      *(void *)(v3 + v17 + 48) = v15;
      *(void *)(v3 + v17 + 56) = v16;
      uint64_t v24 = v50;
      outlined consume of MLActivityClassifier.PersistentParameters?(v54, v53, v52, v51, 0);
      return (NSURL *)v24;
    }
  }
  return result;
}

uint64_t ActivityClassifierTrainingSessionDelegate.verifyThatParametersAreCompatible(_:_:phase:)(uint64_t a1, uint64_t a2, double a3)
{
  uint64_t v4 = *(void *)(a2 + 48);
  if (*(void *)(a1 + 48) != v4)
  {
    uint64_t v238 = lazy protocol witness table accessor for type Int and conformance Int();
    *(void *)&unsigned long long v326 = BinaryInteger.description.getter(&type metadata for Int, v238);
    *(void *)&unsigned long long v331 = v239;
    *(void *)&unsigned long long v327 = v4;
    uint64_t v240 = BinaryInteger.description.getter(&type metadata for Int, v238);
    uint64_t v242 = v241;
    uint64_t v243 = lazy protocol witness table accessor for type MLCreateError and conformance MLCreateError();
    swift_allocError(&type metadata for MLCreateError, v243, 0, 0);
    *(void *)uint64_t v244 = 0x6953206863746142;
    v248 = (char *)0xEA0000000000657ALL;
LABEL_168:
    *(void *)(v244 + 8) = v248;
    *(void *)(v244 + 16) = v326;
    *(void *)(v244 + 24) = v331;
    *(void *)(v244 + 32) = v240;
LABEL_170:
    *(void *)(v244 + 40) = v242;
    *(unsigned char *)(v244 + 48) = 3;
    return swift_willThrow(&type metadata for MLCreateError, v243, v244, v245, v246, v247);
  }
  uint64_t v5 = *(void *)(a2 + 40);
  if (*(void *)(a1 + 40) != v5)
  {
    uint64_t v249 = lazy protocol witness table accessor for type Int and conformance Int();
    *(void *)&unsigned long long v326 = BinaryInteger.description.getter(&type metadata for Int, v249);
    *(void *)&unsigned long long v331 = v250;
    *(void *)&unsigned long long v327 = v5;
    uint64_t v251 = BinaryInteger.description.getter(&type metadata for Int, v249);
    uint64_t v242 = v252;
    uint64_t v243 = lazy protocol witness table accessor for type MLCreateError and conformance MLCreateError();
    swift_allocError(&type metadata for MLCreateError, v243, 0, 0);
    *(void *)uint64_t v244 = 0xD000000000000012;
    *(void *)(v244 + 8) = "metricsAttributesDictionary" + 0x8000000000000000;
    *(void *)(v244 + 16) = v326;
    *(void *)(v244 + 24) = v331;
    *(void *)(v244 + 32) = v251;
    goto LABEL_170;
  }
  uint64_t v6 = *(void *)(a2 + 56);
  if (*(void *)(a1 + 56) != v6)
  {
    uint64_t v253 = lazy protocol witness table accessor for type Int and conformance Int();
    *(void *)&unsigned long long v326 = BinaryInteger.description.getter(&type metadata for Int, v253);
    *(void *)&unsigned long long v331 = v254;
    *(void *)&unsigned long long v327 = v6;
    uint64_t v240 = BinaryInteger.description.getter(&type metadata for Int, v253);
    uint64_t v242 = v255;
    uint64_t v243 = lazy protocol witness table accessor for type MLCreateError and conformance MLCreateError();
    swift_allocError(&type metadata for MLCreateError, v243, 0, 0);
    *(void *)uint64_t v244 = 0xD000000000000016;
    v248 = "Number of Labels" + 0x8000000000000000;
    goto LABEL_168;
  }
  *(void *)&unsigned long long v326 = v3;
  uint64_t v7 = *(void *)a1;
  unsigned __int8 v8 = *(unsigned char *)(a1 + 8);
  v335._uint64_t countAndFlagsBits = *(void *)(a1 + 32);
  uint64_t v9 = *(void *)a2;
  unsigned __int8 v323 = *(unsigned char *)(a2 + 8);
  v310 = *(void **)(a2 + 32);
  LOBYTE(v332) = v8 & 1;
  unsigned __int8 v321 = v8;
  int v10 = v8;
  outlined copy of Result<_DataTable, Error>(v7, v8);
  v11._uint64_t countAndFlagsBits = 0x6C6562616CLL;
  v11._char object = (void *)0xE500000000000000;
  MLDataTable.subscript.getter(v11);
  uint64_t v309 = v7;
  int v313 = v10;
  outlined consume of Result<_DataTable, Error>(v7, v10);
  uint64_t v315 = v327;
  LOBYTE(v316) = BYTE8(v327);
  *(void *)&unsigned long long v331 = Array<A>.init(_:)((uint64_t)&v315, a3);
  uint64_t v315 = v9;
  LOBYTE(v333) = v323 & 1;
  LOBYTE(v316) = v323 & 1;
  LODWORD(v7) = v323;
  outlined copy of Result<_DataTable, Error>(v9, v323);
  v11._uint64_t countAndFlagsBits = 0x6C6562616CLL;
  v11._char object = (void *)0xE500000000000000;
  MLDataTable.subscript.getter(v11);
  uint64_t v304 = v9;
  int v314 = v7;
  outlined consume of Result<_DataTable, Error>(v9, v7);
  uint64_t v315 = v327;
  LOBYTE(v316) = BYTE8(v327);
  uint64_t v12 = Array<A>.init(_:)((uint64_t)&v315, a3);
  LOBYTE(v10) = (_BYTE)v12;
  LOBYTE(v7) = v331;
  LOBYTE(v9) = specialized static Array<A>.== infix(_:_:)(v331, (uint64_t)v12);
  swift_bridgeObjectRelease(v7);
  swift_bridgeObjectRelease(v10);
  if ((v9 & 1) == 0) {
    goto LABEL_192;
  }
  uint64_t v315 = v309;
  LOBYTE(v316) = (_BYTE)v332;
  outlined copy of Result<_DataTable, Error>(v309, v313);
  v13._uint64_t countAndFlagsBits = 0x5F6E6F6973736573;
  v13._char object = (void *)0xEA00000000006469;
  MLDataTable.subscript.getter(v13);
  outlined consume of Result<_DataTable, Error>(v309, v313);
  uint64_t v315 = v327;
  LOBYTE(v316) = BYTE8(v327);
  *(void *)&unsigned long long v331 = Array<A>.init(_:)((uint64_t)&v315, a3);
  uint64_t v315 = v304;
  LOBYTE(v316) = (_BYTE)v333;
  outlined copy of Result<_DataTable, Error>(v304, v314);
  v13._uint64_t countAndFlagsBits = 0x5F6E6F6973736573;
  v13._char object = (void *)0xEA00000000006469;
  MLDataTable.subscript.getter(v13);
  outlined consume of Result<_DataTable, Error>(v304, v314);
  uint64_t v315 = v327;
  LOBYTE(v316) = BYTE8(v327);
  uint64_t v14 = Array<A>.init(_:)((uint64_t)&v315, a3);
  char v15 = (char)v14;
  char v16 = v331;
  char v17 = specialized static Array<A>.== infix(_:_:)(v331, (uint64_t)v14);
  swift_bridgeObjectRelease(v16);
  swift_bridgeObjectRelease(v15);
  if ((v17 & 1) == 0 || (specialized static Array<A>.== infix(_:_:)(v335._countAndFlagsBits, v310) & 1) == 0) {
    goto LABEL_192;
  }
  uint64_t result = v310[2];
  uint64_t v302 = result;
  if (!result) {
    return result;
  }
  v301 = v310 + 4;
  swift_bridgeObjectRetain((_BYTE)v310);
  uint64_t v19 = v310;
  unint64_t v20 = 0;
  v306 = "ml.activityclassifier" + 0x8000000000000000;
  uint64_t v21 = v326;
  while (1)
  {
    if (v20 >= v19[2]) {
      BUG();
    }
    unint64_t v300 = v20;
    uint64_t v22 = 2 * v20;
    uint64_t v23 = v301[v22];
    uint64_t v24 = (char *)v301[v22 + 1];
    uint64_t v25 = v309;
    v333 = v24;
    v335._uint64_t countAndFlagsBits = v23;
    if (v321)
    {
      outlined copy of Result<_DataTable, Error>(v309, 1);
      swift_bridgeObjectRetain((_BYTE)v24);
      swift_willThrow(v24, 1, v26, v27, v28, v29);
      v330 = 0;
      uint64_t v30 = v24;
LABEL_14:
      *(void *)&unsigned long long v327 = 0;
      *((void *)&v327 + 1) = 0xE000000000000000;
      _StringGuts.grow(_:)(34);
      swift_bridgeObjectRelease(BYTE8(v327));
      *(void *)&unsigned long long v327 = 0xD00000000000001FLL;
      *((void *)&v327 + 1) = v306;
      v34._uint64_t countAndFlagsBits = v335._countAndFlagsBits;
      v34._char object = v30;
      String.append(_:)(v34);
      v34._uint64_t countAndFlagsBits = 34;
      v34._char object = (void *)0xE100000000000000;
      String.append(_:)(v34);
      unsigned long long v326 = v327;
      uint64_t v35 = lazy protocol witness table accessor for type MLCreateError and conformance MLCreateError();
      uint64_t v36 = swift_allocError(&type metadata for MLCreateError, v35, 0, 0);
      *(_OWORD *)uint64_t v37 = v326;
      a3 = 0.0;
      *(_OWORD *)(v37 + 16) = 0;
      *(_OWORD *)(v37 + 32) = 0;
      *(unsigned char *)(v37 + 48) = 1;
      outlined consume of Result<_DataTable, Error>(v25, v313);
      uint64_t v38 = v36;
      char v39 = 1;
LABEL_15:
      outlined consume of Result<_DataTable, Error>(v38, v39);
      uint64_t v40 = _swiftEmptyArrayStorage;
      goto LABEL_16;
    }
    uint64_t v31 = *(void *)(v309 + 16);
    outlined copy of Result<_DataTable, Error>(v309, 0);
    uint64_t v32 = (uint64_t)v333;
    swift_bridgeObjectRetain((_BYTE)v333);
    swift_retain();
    *(void *)&unsigned long long v326 = v31;
    uint64_t v33 = specialized String.withCString<A>(_:)((uint64_t (*)(void))partial apply for closure #1 in CMLTable.column(name:), v31, v23, v32);
    if (v21)
    {
      swift_errorRelease(v21);
      swift_release();
      v330 = 0;
      uint64_t v30 = v333;
      uint64_t v25 = v309;
      goto LABEL_14;
    }
    uint64_t v216 = v33;
    v330 = 0;
    swift_release();
    outlined consume of Result<_DataTable, Error>(v309, 0);
    uint64_t v217 = type metadata accessor for _UntypedColumn();
    uint64_t v218 = swift_allocObject(v217, 24, 7);
    *(void *)(v218 + 16) = v216;
    outlined copy of Result<_DataTable, Error>(v218, 0);
    v219 = (char *)CMLColumn.size.getter();
    *(void *)&unsigned long long v331 = v218;
    outlined consume of Result<_DataTable, Error>(v218, 0);
    v332 = v219;
    if ((uint64_t)v219 < 0) {
      BUG();
    }
    if (!v219)
    {
      uint64_t v38 = v331;
      char v39 = 0;
      goto LABEL_15;
    }
    v220 = 0;
    v221 = _swiftEmptyArrayStorage;
    do
    {
      uint64_t v222 = v331;
      outlined copy of Result<_DataTable, Error>(v331, 0);
      _UntypedColumn.valueAtIndex(index:)((uint64_t)v220, a3);
      outlined consume of Result<_DataTable, Error>(v222, 0);
      unsigned long long v326 = v327;
      char v223 = v328;
      v224 = v221;
      if (!swift_isUniquelyReferenced_nonNull_native(v221)) {
        v224 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v221[2] + 1, 1, (uint64_t)v221);
      }
      v225 = v224;
      unint64_t v226 = v224[2];
      if (v224[3] >> 1 <= v226) {
        v225 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(v224[3] >= 2uLL, v226 + 1, 1, (uint64_t)v224);
      }
      ++v220;
      v225[2] = v226 + 1;
      uint64_t v227 = 3 * v226;
      a3 = *(double *)&v326;
      *(_OWORD *)&v225[v227 + 4] = v326;
      LOBYTE(v225[v227 + 6]) = v223;
      v221 = v225;
    }
    while (v332 != v220);
    outlined consume of Result<_DataTable, Error>(v331, 0);
    uint64_t v40 = v221;
LABEL_16:
    v311 = v40;
    uint64_t v41 = v304;
    if (v323)
    {
      uint64_t v42 = v304;
      outlined copy of Result<_DataTable, Error>(v304, 1);
      swift_willThrow(v42, 1, v43, v44, v45, v46);
LABEL_20:
      *(void *)&unsigned long long v326 = 0;
      *(void *)&unsigned long long v327 = 0;
      *((void *)&v327 + 1) = 0xE000000000000000;
      _StringGuts.grow(_:)(34);
      swift_bridgeObjectRelease(BYTE8(v327));
      *(void *)&unsigned long long v327 = 0xD00000000000001FLL;
      *((void *)&v327 + 1) = v306;
      v51._uint64_t countAndFlagsBits = v335._countAndFlagsBits;
      char v52 = (char)v333;
      v51._char object = v333;
      String.append(_:)(v51);
      v51._uint64_t countAndFlagsBits = 34;
      v51._char object = (void *)0xE100000000000000;
      String.append(_:)(v51);
      unsigned long long v331 = v327;
      uint64_t v53 = lazy protocol witness table accessor for type MLCreateError and conformance MLCreateError();
      uint64_t v54 = swift_allocError(&type metadata for MLCreateError, v53, 0, 0);
      *(_OWORD *)uint64_t v55 = v331;
      a3 = 0.0;
      *(_OWORD *)(v55 + 16) = 0;
      *(_OWORD *)(v55 + 32) = 0;
      *(unsigned char *)(v55 + 48) = 1;
      swift_bridgeObjectRelease(v52);
      outlined consume of Result<_DataTable, Error>(v41, v314);
      uint64_t v56 = v54;
      char v57 = 1;
LABEL_21:
      outlined consume of Result<_DataTable, Error>(v56, v57);
      uint64_t v61 = _swiftEmptyArrayStorage;
      goto LABEL_22;
    }
    uint64_t v47 = *(void *)(v304 + 16);
    outlined copy of Result<_DataTable, Error>(v304, 0);
    swift_retain();
    char v48 = (char)v333;
    uint64_t v49 = v330;
    uint64_t v50 = specialized String.withCString<A>(_:)((uint64_t (*)(void))partial apply for closure #1 in CMLTable.column(name:), v47, v335._countAndFlagsBits, (uint64_t)v333);
    if (v49)
    {
      swift_errorRelease(v49);
      swift_release();
      goto LABEL_20;
    }
    uint64_t v228 = v50;
    *(void *)&unsigned long long v326 = 0;
    swift_bridgeObjectRelease(v48);
    swift_release();
    outlined consume of Result<_DataTable, Error>(v41, 0);
    uint64_t v229 = type metadata accessor for _UntypedColumn();
    v230 = (char *)swift_allocObject(v229, 24, 7);
    *((void *)v230 + 2) = v228;
    outlined copy of Result<_DataTable, Error>((uint64_t)v230, 0);
    v231 = (char *)CMLColumn.size.getter();
    v332 = v230;
    outlined consume of Result<_DataTable, Error>((uint64_t)v230, 0);
    v333 = v231;
    if ((uint64_t)v231 < 0) {
      BUG();
    }
    if (!v231)
    {
      uint64_t v56 = (uint64_t)v332;
      char v57 = 0;
      goto LABEL_21;
    }
    v232 = 0;
    uint64_t v61 = _swiftEmptyArrayStorage;
    do
    {
      uint64_t v233 = (uint64_t)v332;
      outlined copy of Result<_DataTable, Error>((uint64_t)v332, 0);
      _UntypedColumn.valueAtIndex(index:)((uint64_t)v232, a3);
      outlined consume of Result<_DataTable, Error>(v233, 0);
      unsigned long long v331 = v327;
      char v234 = v328;
      if (!swift_isUniquelyReferenced_nonNull_native(v61)) {
        uint64_t v61 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v61[2] + 1, 1, (uint64_t)v61);
      }
      unint64_t v235 = v61[2];
      v236 = v61;
      if (v61[3] >> 1 <= v235) {
        v236 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(v61[3] >= 2uLL, v235 + 1, 1, (uint64_t)v61);
      }
      ++v232;
      v236[2] = v235 + 1;
      uint64_t v61 = v236;
      uint64_t v237 = 3 * v235;
      a3 = *(double *)&v331;
      *(_OWORD *)&v61[v237 + 4] = v331;
      LOBYTE(v61[v237 + 6]) = v234;
    }
    while (v333 != v232);
    outlined consume of Result<_DataTable, Error>((uint64_t)v332, 0);
LABEL_22:
    uint64_t v62 = v311;
    uint64_t v63 = v311[2];
    if (v63 != v61[2]) {
      goto LABEL_191;
    }
    if (v63) {
      break;
    }
LABEL_143:
    swift_bridgeObjectRelease((_BYTE)v62);
    swift_bridgeObjectRelease((_BYTE)v61);
LABEL_145:
    unint64_t v20 = v300 + 1;
    uint64_t v19 = v310;
    uint64_t v21 = v326;
    if (v300 + 1 == v302) {
      return swift_bridgeObjectRelease((_BYTE)v310);
    }
  }
  if (v311 == v61)
  {
    swift_bridgeObjectRelease_n(v311, 2, v58, v59, v60);
    goto LABEL_145;
  }
  unint64_t v64 = 0;
  v320 = v61;
  uint64_t v298 = v63;
  while (2)
  {
    if (v64 >= v61[2]) {
      BUG();
    }
    id v322 = (id)v62[3 * v64 + 4];
    unint64_t v65 = (void *)v62[3 * v64 + 5];
    uint64_t v66 = v61[3 * v64 + 4];
    unint64_t v67 = v61[3 * v64 + 5];
    unsigned __int8 v68 = v61[3 * v64 + 6];
    uint64_t v69 = LOBYTE(v62[3 * v64 + 6]);
    v332 = (char *)v67;
    v333 = (char *)v66;
    unint64_t v297 = v64;
    switch(v69)
    {
      case 0:
        if (v68) {
          goto LABEL_180;
        }
        id v70 = v322;
        id v71 = (id)v66;
        outlined consume of MLDataValue(v322, v65, 0);
        outlined consume of MLDataValue(v71, (void *)v67, 0);
        if (v70 != v71) {
          goto LABEL_190;
        }
        goto LABEL_142;
      case 1:
        if (v68 != 1) {
          goto LABEL_180;
        }
        *(void *)&unsigned long long v331 = v322;
        v335._uint64_t countAndFlagsBits = v66;
        v204 = (void *)v66;
        outlined consume of MLDataValue(v322, v65, 1);
        outlined consume of MLDataValue(v204, (void *)v67, 1);
        a3 = *(double *)&v331;
        if (*(double *)&v331 == *(double *)&v335._countAndFlagsBits) {
          goto LABEL_142;
        }
        goto LABEL_190;
      case 2:
        if (v68 != 2)
        {
          id v257 = v65;
          char v72 = v65;
LABEL_177:
          swift_bridgeObjectRetain_n(v257, 2);
          uint64_t v66 = (uint64_t)v333;
          unint64_t v65 = v72;
          unint64_t v67 = (unint64_t)v332;
          goto LABEL_180;
        }
        id v85 = v322;
        if (v322 != (id)v66 || v65 != (void *)v67)
        {
          v325 = v65;
          v213 = (void *)v66;
          LOBYTE(v331) = _stringCompareWithSmolCheck(_:_:expecting:)(v322, v65, v66, v67, 0);
          outlined copy of MLDataValue(v213, v332, 2u);
          v214 = v325;
          outlined copy of MLDataValue(v85, v325, 2u);
          outlined consume of MLDataValue(v85, v214, 2);
          v210 = v333;
          v211 = v332;
          char v212 = 2;
LABEL_133:
          outlined consume of MLDataValue(v210, v211, v212);
          if ((v331 & 1) == 0) {
            goto LABEL_190;
          }
          goto LABEL_142;
        }
        uint64_t v86 = v65;
        outlined copy of MLDataValue(v322, v65, 2u);
        outlined copy of MLDataValue(v85, v86, 2u);
        outlined consume of MLDataValue(v85, v86, 2);
        uint64_t v87 = v85;
        unint64_t v88 = v86;
        char v89 = 2;
LABEL_141:
        outlined consume of MLDataValue(v87, v88, v89);
LABEL_142:
        unint64_t v64 = v297 + 1;
        uint64_t v62 = v311;
        if (v297 + 1 == v298) {
          goto LABEL_143;
        }
        continue;
      case 3:
        if (v68 != 3)
        {
          v256 = v65;
          swift_retain_n(v322);
          unint64_t v65 = v256;
LABEL_179:
          unint64_t v67 = (unint64_t)v332;
          uint64_t v66 = (uint64_t)v333;
LABEL_180:
          unsigned __int8 v259 = v68;
          LODWORD(v326) = v68;
          v260 = v65;
          outlined copy of MLDataValue((void *)v66, (void *)v67, v259);
          id v261 = v322;
          outlined consume of MLDataValue(v322, v260, v69);
          outlined consume of MLDataValue(v333, v332, v326);
          v262 = v261;
          v263 = v260;
          char v264 = v69;
          goto LABEL_189;
        }
        id v90 = v322;
        uint64_t v91 = v65;
        outlined copy of MLDataValue(v322, v65, 3u);
        uint64_t v92 = v332;
        outlined copy of MLDataValue(v333, v332, 3u);
        outlined copy of MLDataValue(v90, v91, 3u);
        outlined copy of MLDataValue(v333, v92, 3u);
        outlined copy of MLDataValue(v90, v91, 3u);
        outlined copy of MLDataValue(v333, v92, 3u);
        v325 = v91;
        outlined copy of MLDataValue(v90, v91, 3u);
        uint64_t v93 = CMLSequence.size.getter();
        if (CMLSequence.size.getter() < 0) {
          BUG();
        }
        uint64_t v94 = CMLSequence.size.getter();
        outlined consume of MLDataValue(v90, v325, 3);
        if (v93 < 0 || v94 < v93) {
          BUG();
        }
        uint64_t v95 = v333;
        swift_retain();
        uint64_t v96 = CMLSequence.size.getter();
        if (CMLSequence.size.getter() < 0) {
          BUG();
        }
        uint64_t v97 = CMLSequence.size.getter();
        outlined consume of MLDataValue(v95, v332, 3);
        if (v96 < 0 || v97 < v96) {
          BUG();
        }
        LOBYTE(v61) = (_BYTE)v320;
        if (v93 != v96) {
          goto LABEL_188;
        }
        id v98 = v322;
        swift_retain();
        uint64_t v99 = CMLSequence.size.getter();
        if (CMLSequence.size.getter() < 0) {
          BUG();
        }
        uint64_t v100 = CMLSequence.size.getter();
        outlined consume of MLDataValue(v98, v325, 3);
        if (v99 < 0 || v100 < v99) {
          BUG();
        }
        uint64_t v61 = v320;
        if (!v99)
        {
          id v102 = v322;
LABEL_140:
          outlined consume of MLDataValue(v102, v325, 3);
          v215 = v332;
          outlined consume of MLDataValue(v333, v332, 3);
          outlined consume of MLDataValue(v333, v215, 3);
          outlined consume of MLDataValue(v102, v325, 3);
          outlined consume of MLDataValue(v333, v215, 3);
          uint64_t v87 = v102;
          unint64_t v88 = v325;
          char v89 = 3;
          goto LABEL_141;
        }
        uint64_t v101 = 0;
        id v102 = v322;
        uint64_t v299 = v99;
        while (2)
        {
          if (v101 == v99) {
            BUG();
          }
          uint64_t v103 = v101;
          swift_retain_n(v102);
          uint64_t v305 = v103;
          uint64_t v104 = v326;
          uint64_t v105 = CMLSequence.value(at:)(v103);
          v335._uint64_t countAndFlagsBits = v104;
          if (v104)
          {
            outlined consume of MLDataValue(v102, v325, 3);
            v277 = "CreateML/SequenceType.swift";
            uint64_t v278 = 27;
            uint64_t countAndFlagsBits = v335._countAndFlagsBits;
            goto LABEL_227;
          }
          outlined consume of MLDataValue(v102, v325, 3);
          switch(CMLFeatureValue.type.getter())
          {
            case 0u:
              uint64_t v106 = *(void *)(v105 + 16);
              swift_retain();
              uint64_t v107 = v335._countAndFlagsBits;
              v330 = (void *)specialized handling<A, B>(_:_:)(v106);
              v335._uint64_t countAndFlagsBits = v107;
              if (v107)
              {
                swift_release();
                swift_errorRelease(v335._countAndFlagsBits);
                BUG();
              }
              swift_release_n(v105);
              outlined consume of MLDataValue(v322, v325, 3);
              char object = 0;
              unsigned __int8 v108 = 0;
              goto LABEL_84;
            case 1u:
              uint64_t v146 = *(void *)(v105 + 16);
              swift_retain();
              uint64_t v147 = v335._countAndFlagsBits;
              specialized handling<A, B>(_:_:)(v146);
              *(double *)&unsigned long long v326 = a3;
              v335._uint64_t countAndFlagsBits = v147;
              if (v147)
              {
                swift_release();
                swift_errorRelease(v335._countAndFlagsBits);
                BUG();
              }
              swift_release_n(v105);
              outlined consume of MLDataValue(v322, v325, 3);
              a3 = *(double *)&v326;
              v330 = (void *)v326;
              unsigned __int8 v108 = 1;
              goto LABEL_83;
            case 2u:
              swift_retain();
              Swift::String v138 = CMLFeatureValue.stringValue()();
              v330 = (void *)v138._countAndFlagsBits;
              v335._uint64_t countAndFlagsBits = v139;
              if (v139)
              {
                swift_release();
                swift_errorRelease(v335._countAndFlagsBits);
                BUG();
              }
              char object = v138._object;
              swift_release_n(v105);
              outlined consume of MLDataValue(v102, v325, 3);
              unsigned __int8 v108 = 2;
              goto LABEL_84;
            case 3u:
              uint64_t v140 = *(void *)(v105 + 16);
              swift_retain();
              uint64_t v141 = v335._countAndFlagsBits;
              uint64_t v142 = specialized handling<A, B>(_:_:)(v140);
              if (!v141)
              {
                uint64_t v143 = v142;
                v335._uint64_t countAndFlagsBits = 0;
                if (v142)
                {
                  uint64_t v144 = type metadata accessor for CMLSequence();
                  uint64_t v145 = swift_allocObject(v144, 25, 7);
                  *(void *)(v145 + 16) = v143;
                  v330 = (void *)v145;
                  *(unsigned char *)(v145 + 24) = 1;
                  swift_release_n(v105);
                  JUMPOUT(0x1E7EB7);
                }
                BUG();
              }
              swift_release();
              swift_errorRelease(v141);
              BUG();
            case 4u:
              uint64_t v109 = *(void *)(v105 + 16);
              swift_retain();
              uint64_t v110 = v335._countAndFlagsBits;
              uint64_t v111 = specialized handling<A, B>(_:_:)(v109);
              v335._uint64_t countAndFlagsBits = v110;
              if (v110)
              {
                swift_release();
                swift_errorRelease(v335._countAndFlagsBits);
                BUG();
              }
              uint64_t v329 = v105;
              if (!v111) {
                BUG();
              }
              uint64_t v112 = type metadata accessor for CMLDictionary();
              uint64_t inited = (void *)swift_initStackObject(v112, v296);
              inited[2] = v111;
              v308 = _swiftEmptyDictionarySingleton;
              swift_retain_n(inited);
              char object = inited;
              if (!CMLDictionary.size.getter())
              {
                v330 = _swiftEmptyDictionarySingleton;
                goto LABEL_82;
              }
              v330 = _swiftEmptyDictionarySingleton;
              uint64_t v114 = 0;
              uint64_t v115 = v335._countAndFlagsBits;
              break;
            case 5u:
              swift_release();
              outlined consume of MLDataValue(v102, v325, 3);
              unsigned __int8 v108 = 6;
              v330 = 0;
              goto LABEL_83;
            case 6u:
              swift_retain();
              MLDataValue.MultiArrayType.init(from:)(v105);
              v330 = (void *)v327;
              if (!(void)v327) {
                BUG();
              }
              swift_release();
              outlined consume of MLDataValue(v102, v325, 3);
              unsigned __int8 v108 = 5;
              goto LABEL_83;
          }
          while (2)
          {
            *(void *)&unsigned long long v326 = CMLDictionary.keyAndValue(at:)(v114);
            *(void *)&unsigned long long v331 = v116;
            if (v115)
            {
              v277 = "CreateML/DictionaryType.swift";
              uint64_t v278 = 29;
              uint64_t countAndFlagsBits = v115;
              goto LABEL_227;
            }
            swift_retain();
            uint64_t v117 = specialized RandomAccessCollection<>.index(after:)(v114);
            swift_release();
            Swift::String v118 = CMLFeatureValue.stringValue()();
            if (!v119)
            {
              uint64_t v120 = v118._countAndFlagsBits;
              uint64_t v121 = v118._object;
              uint64_t v318 = v117;
              v335._uint64_t countAndFlagsBits = 0;
              uint64_t v122 = v331;
              swift_retain();
              MLDataValue.init(_:)(v122, a3);
              swift_release();
              swift_release();
              *(void *)&unsigned long long v331 = *((void *)&v327 + 1);
              v319 = (void *)v327;
              LOBYTE(v317) = v328;
              unsigned long long v327 = __PAIR128__((unint64_t)v121, v120);
              LOBYTE(v328) = 2;
              long long v123 = __PAIR128__((unint64_t)v121, v120);
              *(void *)&unsigned long long v326 = v121;
              uint64_t v124 = v330;
              unint64_t v125 = specialized __RawDictionaryStorage.find<A>(_:)(v123, 2);
              *(void *)&long long v123 = (v126 & 1) == 0;
              BOOL v127 = __OFADD__(v124[2], (void)v123);
              uint64_t v128 = v124[2] + v123;
              if (v127) {
                sub_1E9708(v128, 1);
              }
              char v129 = v126;
              if (v124[3] < v128)
              {
                specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v128, 1u);
                *(void *)&long long v130 = v120;
                *((void *)&v130 + 1) = v326;
                v330 = v308;
                unint64_t v125 = specialized __RawDictionaryStorage.find<A>(_:)(v130, 2);
                if ((v129 & 1) != (v131 & 1))
                {
LABEL_230:
                  KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(&type metadata for MLDataValue);
                  BUG();
                }
              }
              if ((v129 & 1) == 0)
              {
                uint64_t v132 = v330;
                v330[(v125 >> 6) + 8] |= 1 << v125;
                uint64_t v133 = v132[6];
                uint64_t v134 = 24 * v125;
                *(void *)(v133 + v134) = v120;
                *(void *)(v133 + v134 + 8) = v326;
                *(unsigned char *)(v133 + v134 + 16) = 2;
                uint64_t v135 = v132[7];
                *(void *)(v135 + v134) = v319;
                *(void *)(v135 + v134 + 8) = v331;
                *(unsigned char *)(v135 + v134 + 16) = v317;
                uint64_t v136 = v132[2];
                BOOL v127 = __OFADD__(1, v136);
                uint64_t v137 = v136 + 1;
                if (!v127)
                {
                  v132[2] = v137;
                  JUMPOUT(0x1E7DEALL);
                }
                BUG();
              }
              uint64_t v280 = swift_allocError(&type metadata for _MergeError, &protocol witness table for _MergeError, 0, 0);
              swift_willThrow(&type metadata for _MergeError, &protocol witness table for _MergeError, v281, v282, v283, v284);
              uint64_t v307 = v280;
              swift_errorRetain(v280);
              uint64_t v285 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Error);
              if (swift_dynamicCast(&demangling cache variable for type metadata for Error, &v307, v285, &type metadata for _MergeError, 0))
              {
LABEL_232:
                uint64_t v315 = 0;
                unint64_t v316 = 0xE000000000000000;
                _StringGuts.grow(_:)(30);
                v294._char object = "Swift/NativeDictionary.swift" + 0x8000000000000000;
                v294._uint64_t countAndFlagsBits = 0xD00000000000001BLL;
                String.append(_:)(v294);
                _print_unlocked<A, B>(_:_:)(&v327, &v315, &type metadata for MLDataValue, &type metadata for DefaultStringInterpolation, &protocol witness table for DefaultStringInterpolation);
                v294._uint64_t countAndFlagsBits = 39;
                v294._char object = (void *)0xE100000000000000;
                String.append(_:)(v294);
                _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, v315, v316, "Swift/NativeDictionary.swift", 28, 2, 783, 0);
                BUG();
              }
              swift_release();
              char v286 = v317;
              v287 = v319;
              v288 = (void *)v331;
LABEL_234:
              outlined consume of MLDataValue(v287, v288, v286);
              outlined consume of MLDataValue((void *)v327, *((void **)&v327 + 1), v328);
              swift_release();
              swift_errorRelease(v307);
              v277 = "Swift/Dictionary.swift";
              uint64_t v278 = 22;
              uint64_t countAndFlagsBits = v280;
LABEL_227:
              swift_unexpectedError(countAndFlagsBits, v277, v278, 1);
              BUG();
            }
            swift_errorRelease(v119);
            swift_release();
            swift_release();
            uint64_t v115 = 0;
            uint64_t v114 = v117;
            if (v117 != CMLDictionary.size.getter()) {
              continue;
            }
            break;
          }
          v335._uint64_t countAndFlagsBits = 0;
LABEL_82:
          swift_release_n(v329);
          swift_release_n(object);
          outlined consume of MLDataValue(v322, v325, 3);
          unsigned __int8 v108 = 4;
LABEL_83:
          char object = 0;
LABEL_84:
          uint64_t v148 = v333;
          swift_retain_n(v333);
          uint64_t v149 = v335._countAndFlagsBits;
          uint64_t v150 = CMLSequence.value(at:)(v305);
          *(void *)&unsigned long long v326 = v149;
          if (v149)
          {
            outlined consume of MLDataValue(v148, v332, 3);
            v277 = "CreateML/SequenceType.swift";
            uint64_t v278 = 27;
            uint64_t countAndFlagsBits = v326;
            goto LABEL_227;
          }
          outlined consume of MLDataValue(v148, v332, 3);
          switch(CMLFeatureValue.type.getter())
          {
            case 0u:
              uint64_t v151 = *(void *)(v150 + 16);
              swift_retain();
              uint64_t v152 = v326;
              uint64_t v329 = specialized handling<A, B>(_:_:)(v151);
              *(void *)&unsigned long long v326 = v152;
              if (v152)
              {
                swift_release();
                swift_errorRelease(v326);
                BUG();
              }
              swift_release_n(v150);
              outlined consume of MLDataValue(v333, v332, 3);
              char v153 = 1;
              uint64_t v154 = 0;
              uint64_t v155 = 0;
              goto LABEL_116;
            case 1u:
              uint64_t v196 = *(void *)(v150 + 16);
              swift_retain();
              uint64_t v197 = v326;
              specialized handling<A, B>(_:_:)(v196);
              *(double *)&unsigned long long v331 = a3;
              *(void *)&unsigned long long v326 = v197;
              if (v197)
              {
                swift_release();
                swift_errorRelease(v326);
                BUG();
              }
              swift_release_n(v150);
              outlined consume of MLDataValue(v333, v332, 3);
              uint64_t v329 = v331;
              LOBYTE(v154) = 1;
              uint64_t v155 = 0;
              char v153 = 0;
              goto LABEL_116;
            case 2u:
              swift_retain();
              Swift::String v188 = CMLFeatureValue.stringValue()();
              uint64_t v329 = v188._countAndFlagsBits;
              v335._uint64_t countAndFlagsBits = (uint64_t)v188._object;
              *(void *)&unsigned long long v326 = v189;
              if (v189)
              {
                swift_release();
                swift_errorRelease(v326);
                BUG();
              }
              swift_release_n(v150);
              outlined consume of MLDataValue(v333, v332, 3);
              LOBYTE(v154) = 2;
              char v153 = 0;
              uint64_t v155 = v335._countAndFlagsBits;
              switch(v335._countAndFlagsBits)
              {
                case 0:
                  goto LABEL_116;
                case 1:
                  LOBYTE(v61) = (_BYTE)v320;
                  char v267 = 1;
                  v198 = v330;
                  goto LABEL_185;
                case 2:
                  uint64_t v61 = v320;
                  v199 = v330;
                  v200 = (void *)v329;
                  v201 = object;
                  if (v330 == (void *)v329 && object == (void *)v335._countAndFlagsBits) {
                    JUMPOUT(0x1E87A0);
                  }
                  LOBYTE(v331) = _stringCompareWithSmolCheck(_:_:expecting:)(v330, object, v329, v335._countAndFlagsBits, 0);
                  outlined consume of MLDataValue(v199, v201, 2);
                  outlined consume of MLDataValue(v200, (void *)v335._countAndFlagsBits, 2);
                  if ((v331 & 1) == 0) {
                    goto LABEL_188;
                  }
                  uint64_t v101 = v305 + 1;
                  uint64_t v99 = v299;
                  id v102 = v322;
                  if (v305 + 1 == v299) {
                    goto LABEL_140;
                  }
                  continue;
                case 3:
                  char v265 = 3;
                  v266 = v330;
                  goto LABEL_183;
                case 4:
                  LOBYTE(v61) = (_BYTE)v320;
                  v198 = v330;
                  char v267 = 4;
LABEL_185:
                  uint64_t v271 = v335._countAndFlagsBits;
                  outlined consume of MLDataValue(v198, object, v267);
                  char v268 = 2;
                  v269 = (void *)v329;
                  v270 = (void *)v271;
                  goto LABEL_186;
                case 5:
                  char v265 = 5;
                  v266 = v330;
LABEL_183:
                  v202 = (void *)v335._countAndFlagsBits;
                  outlined consume of MLDataValue(v266, object, v265);
                  char v272 = 2;
                  v273 = (void *)v329;
                  goto LABEL_187;
                case 6:
                  *(void *)&unsigned long long v331 = v154;
                  v202 = (void *)v335._countAndFlagsBits;
                  v203 = (void *)v329;
                  LOBYTE(v335._countAndFlagsBits) = (v329 | v335._countAndFlagsBits) == 0;
                  outlined consume of MLDataValue(v330, object, 6);
                  char v272 = v331;
                  v273 = v203;
LABEL_187:
                  outlined consume of MLDataValue(v273, v202, v272);
                  LOBYTE(v61) = (_BYTE)v320;
                  break;
              }
              goto LABEL_188;
            case 3u:
              uint64_t v317 = v108;
              uint64_t v190 = *(void *)(v150 + 16);
              v319 = (void *)v150;
              swift_retain();
              uint64_t v191 = v326;
              uint64_t v192 = specialized handling<A, B>(_:_:)(v190);
              if (v191)
              {
                swift_release();
                swift_errorRelease(v191);
                BUG();
              }
              uint64_t v193 = v192;
              *(void *)&unsigned long long v326 = 0;
              if (!v192) {
                BUG();
              }
              swift_release_n(v319);
              outlined consume of MLDataValue(v333, v332, 3);
              uint64_t v194 = type metadata accessor for CMLSequence();
              uint64_t v195 = swift_allocObject(v194, 25, 7);
              *(void *)(v195 + 16) = v193;
              uint64_t v329 = v195;
              *(unsigned char *)(v195 + 24) = 1;
              LOBYTE(v154) = 3;
              uint64_t v155 = 0;
              char v153 = 0;
              goto LABEL_116;
            case 4u:
              uint64_t v317 = v108;
              uint64_t v156 = *(void *)(v150 + 16);
              v319 = (void *)v150;
              swift_retain();
              uint64_t v157 = v326;
              uint64_t v158 = specialized handling<A, B>(_:_:)(v156);
              if (v157)
              {
                swift_release();
                swift_errorRelease(v157);
                BUG();
              }
              uint64_t v159 = v158;
              *(void *)&unsigned long long v326 = 0;
              if (!v158) {
                BUG();
              }
              uint64_t v160 = type metadata accessor for CMLDictionary();
              uint64_t v161 = swift_initStackObject(v160, v295);
              *(void *)(v161 + 16) = v159;
              v308 = _swiftEmptyDictionarySingleton;
              swift_retain_n(v161);
              uint64_t v318 = v161;
              if (!CMLDictionary.size.getter())
              {
                uint64_t v329 = (uint64_t)_swiftEmptyDictionarySingleton;
                uint64_t v163 = v318;
                goto LABEL_115;
              }
              uint64_t v329 = (uint64_t)_swiftEmptyDictionarySingleton;
              uint64_t v162 = 0;
              uint64_t v163 = v318;
              break;
            case 5u:
              swift_release();
              outlined consume of MLDataValue(v333, v332, 3);
              LOBYTE(v154) = 6;
              uint64_t v155 = 0;
              uint64_t v329 = 0;
              char v153 = 0;
              goto LABEL_116;
            case 6u:
              swift_retain();
              MLDataValue.MultiArrayType.init(from:)(v150);
              uint64_t v329 = v327;
              if (!(void)v327) {
                BUG();
              }
              swift_release();
              outlined consume of MLDataValue(v333, v332, 3);
              LOBYTE(v154) = 5;
              uint64_t v155 = 0;
              char v153 = 0;
              goto LABEL_116;
          }
          break;
        }
LABEL_92:
        uint64_t v164 = v326;
        do
        {
          *(void *)&unsigned long long v331 = CMLDictionary.keyAndValue(at:)(v162);
          v335._uint64_t countAndFlagsBits = v165;
          if (v164)
          {
            v277 = "CreateML/DictionaryType.swift";
            uint64_t v278 = 29;
            uint64_t countAndFlagsBits = v164;
            goto LABEL_227;
          }
          swift_retain();
          uint64_t v162 = specialized RandomAccessCollection<>.index(after:)(v162);
          swift_release();
          Swift::String v166 = CMLFeatureValue.stringValue()();
          if (!v167)
          {
            uint64_t v169 = v166._countAndFlagsBits;
            v170 = v166._object;
            uint64_t v303 = v162;
            *(void *)&unsigned long long v326 = 0;
            uint64_t v171 = v335._countAndFlagsBits;
            swift_retain();
            MLDataValue.init(_:)(v171, v168);
            swift_release();
            swift_release();
            v335._uint64_t countAndFlagsBits = *((void *)&v327 + 1);
            v312 = (void *)v327;
            char v324 = v328;
            unsigned long long v327 = __PAIR128__((unint64_t)v170, v169);
            LOBYTE(v328) = 2;
            *((void *)&v172 + 1) = v170;
            uint64_t v173 = v169;
            *(void *)&long long v172 = v169;
            *(void *)&unsigned long long v331 = *((void *)&v172 + 1);
            uint64_t v174 = v329;
            unint64_t v175 = specialized __RawDictionaryStorage.find<A>(_:)(v172, 2);
            *(void *)&long long v172 = (v176 & 1) == 0;
            BOOL v127 = __OFADD__(*(void *)(v174 + 16), (void)v172);
            uint64_t v177 = *(void *)(v174 + 16) + v172;
            if (v127) {
              BUG();
            }
            char v178 = v176;
            if (*(void *)(v174 + 24) < v177)
            {
              specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v177, 1u);
              *(void *)&long long v179 = v173;
              *((void *)&v179 + 1) = v331;
              uint64_t v329 = (uint64_t)v308;
              unint64_t v175 = specialized __RawDictionaryStorage.find<A>(_:)(v179, 2);
              if ((v178 & 1) != (v180 & 1)) {
                goto LABEL_230;
              }
            }
            if (v178)
            {
              uint64_t v280 = swift_allocError(&type metadata for _MergeError, &protocol witness table for _MergeError, 0, 0);
              swift_willThrow(&type metadata for _MergeError, &protocol witness table for _MergeError, v289, v290, v291, v292);
              uint64_t v307 = v280;
              swift_errorRetain(v280);
              uint64_t v293 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Error);
              if (swift_dynamicCast(&demangling cache variable for type metadata for Error, &v307, v293, &type metadata for _MergeError, 0))goto LABEL_232; {
              swift_release();
              }
              char v286 = v324;
              v287 = v312;
              v288 = (void *)v335._countAndFlagsBits;
              goto LABEL_234;
            }
            v181 = (void *)v329;
            *(void *)(v329 + 8 * (v175 >> 6) + 64) |= 1 << v175;
            uint64_t v182 = v181[6];
            uint64_t v183 = 24 * v175;
            *(void *)(v182 + v183) = v173;
            *(void *)(v182 + v183 + 8) = v331;
            *(unsigned char *)(v182 + v183 + 16) = 2;
            uint64_t v184 = v181[7];
            *(void *)(v184 + v183) = v312;
            *(void *)(v184 + v183 + 8) = v335._countAndFlagsBits;
            *(unsigned char *)(v184 + v183 + 16) = v324;
            uint64_t v185 = v181[2];
            BOOL v127 = __OFADD__(1, v185);
            uint64_t v186 = v185 + 1;
            uint64_t v163 = v318;
            if (v127) {
              BUG();
            }
            v181[2] = v186;
            uint64_t v187 = CMLDictionary.size.getter();
            uint64_t v162 = v303;
            if (v303 == v187) {
              goto LABEL_115;
            }
            goto LABEL_92;
          }
          swift_errorRelease(v167);
          swift_release();
          swift_release();
          uint64_t v164 = 0;
        }
        while (v162 != CMLDictionary.size.getter());
        *(void *)&unsigned long long v326 = 0;
LABEL_115:
        swift_release_n(v319);
        swift_release_n(v163);
        outlined consume of MLDataValue(v333, v332, 3);
        LOBYTE(v154) = 4;
        uint64_t v155 = 0;
        char v153 = 0;
LABEL_116:
        *(void *)&unsigned long long v331 = v154;
        outlined consume of MLDataValue(v330, object, 0);
        LOBYTE(v61) = (_BYTE)v320;
        if (v153) {
          JUMPOUT(0x1E865DLL);
        }
        char v268 = v331;
        v269 = (void *)v329;
        v270 = (void *)v155;
LABEL_186:
        outlined consume of MLDataValue(v269, v270, v268);
LABEL_188:
        outlined consume of MLDataValue(v322, v325, 3);
        v274 = v333;
        v275 = v332;
        outlined consume of MLDataValue(v333, v332, 3);
        outlined consume of MLDataValue(v274, v275, 3);
        id v276 = v322;
        outlined consume of MLDataValue(v322, v325, 3);
        outlined consume of MLDataValue(v274, v275, 3);
        v262 = v276;
        v263 = v325;
        char v264 = 3;
LABEL_189:
        outlined consume of MLDataValue(v262, v263, v264);
LABEL_190:
        LOBYTE(v62) = (_BYTE)v311;
LABEL_191:
        swift_bridgeObjectRelease((_BYTE)v62);
        swift_bridgeObjectRelease((_BYTE)v61);
        swift_bridgeObjectRelease((_BYTE)v310);
LABEL_192:
        uint64_t v243 = lazy protocol witness table accessor for type MLCreateError and conformance MLCreateError();
        swift_allocError(&type metadata for MLCreateError, v243, 0, 0);
        *(void *)uint64_t v244 = 1;
        *(_OWORD *)(v244 + 8) = 0;
        *(_OWORD *)(v244 + 24) = 0;
        *(void *)(v244 + 40) = 0;
        *(unsigned char *)(v244 + 48) = 4;
        return swift_willThrow(&type metadata for MLCreateError, v243, v244, v245, v246, v247);
      case 4:
        char v72 = v65;
        if (v68 != 4)
        {
          id v257 = v322;
          goto LABEL_177;
        }
        uint64_t v73 = (void *)v66;
        outlined copy of MLDataValue((void *)v66, v332, 4u);
        id v74 = v322;
        v325 = v72;
        outlined copy of MLDataValue(v322, v72, 4u);
        uint64_t v75 = v73;
        uint64_t v76 = v332;
        outlined copy of MLDataValue(v75, v332, 4u);
        outlined copy of MLDataValue(v74, v72, 4u);
        outlined copy of MLDataValue(v333, v76, 4u);
        outlined copy of MLDataValue(v74, v72, 4u);
        uint64_t v77 = v333;
        LOBYTE(v331) = specialized static Dictionary<>.== infix(_:_:)((uint64_t)v74, (uint64_t)v333);
        outlined consume of MLDataValue(v74, v72, 4);
        uint64_t v78 = v332;
        outlined consume of MLDataValue(v77, v332, 4);
        uint64_t v79 = v78;
        char v80 = 4;
        outlined consume of MLDataValue(v77, v79, 4);
        char v81 = (char *)v325;
        outlined consume of MLDataValue(v74, v325, 4);
        uint64_t v82 = v333;
        uint64_t v83 = v332;
        char v84 = 4;
        goto LABEL_132;
      case 5:
        v325 = v65;
        if (v68 == 5)
        {
          *(void *)&unsigned long long v331 = type metadata accessor for NSObject();
          v205 = v333;
          v206 = v332;
          outlined copy of MLDataValue(v333, v332, 5u);
          id v74 = v322;
          v207 = v325;
          outlined copy of MLDataValue(v322, v325, 5u);
          outlined copy of MLDataValue(v205, v206, 5u);
          outlined copy of MLDataValue(v74, v207, 5u);
          outlined copy of MLDataValue(v205, v206, 5u);
          outlined copy of MLDataValue(v74, v207, 5u);
          char v208 = static NSObject.== infix(_:_:)(v74, v205);
          uint64_t v61 = v320;
          LOBYTE(v331) = v208;
          outlined consume of MLDataValue(v74, v207, 5);
          v209 = v332;
          outlined consume of MLDataValue(v205, v332, 5);
          outlined consume of MLDataValue(v205, v209, 5);
          char v81 = (char *)v325;
          outlined consume of MLDataValue(v74, v325, 5);
          uint64_t v82 = v205;
          uint64_t v83 = v332;
          char v84 = 5;
          char v80 = 5;
LABEL_132:
          outlined consume of MLDataValue(v82, v83, v84);
          v210 = (char *)v74;
          v211 = v81;
          char v212 = v80;
          goto LABEL_133;
        }
        id v258 = v322;
        v258;
        unint64_t v65 = v325;
        goto LABEL_179;
      case 6:
        if (v68 != 6 || v66 | v67) {
          goto LABEL_180;
        }
        outlined consume of MLDataValue(v322, v65, 6);
        uint64_t v87 = 0;
        unint64_t v88 = 0;
        char v89 = 6;
        goto LABEL_141;
    }
  }
}

uint64_t ActivityClassifierTrainingSessionDelegate.deinit()
{
  swift_bridgeObjectRelease(*(void *)(v0 + 24));
  outlined destroy of MLActivityClassifier.ModelParameters(v0 + OBJC_IVAR____TtC8CreateML41ActivityClassifierTrainingSessionDelegate_sessionParameters, type metadata accessor for MLTrainingSessionParameters);
  outlined consume of MLActivityClassifier.PersistentParameters?(*(void *)(v0 + OBJC_IVAR____TtC8CreateML41ActivityClassifierTrainingSessionDelegate_trainingParameters), *(void *)(v0 + OBJC_IVAR____TtC8CreateML41ActivityClassifierTrainingSessionDelegate_trainingParameters + 8), *(void *)(v0 + OBJC_IVAR____TtC8CreateML41ActivityClassifierTrainingSessionDelegate_trainingParameters + 16), *(void *)(v0 + OBJC_IVAR____TtC8CreateML41ActivityClassifierTrainingSessionDelegate_trainingParameters + 24), *(void *)(v0 + OBJC_IVAR____TtC8CreateML41ActivityClassifierTrainingSessionDelegate_trainingParameters + 32));
  outlined destroy of Either<LogisticRegressionClassifier<Float, String>, FullyConnectedNetworkClassifier<Float, String>>(v0 + OBJC_IVAR____TtC8CreateML41ActivityClassifierTrainingSessionDelegate_trainer, &demangling cache variable for type metadata for MLActivityClassifier.Trainer?);
  outlined destroy of Either<LogisticRegressionClassifier<Float, String>, FullyConnectedNetworkClassifier<Float, String>>(v0 + OBJC_IVAR____TtC8CreateML41ActivityClassifierTrainingSessionDelegate_tablePrinter, &demangling cache variable for type metadata for TrainingTablePrinter?);
  swift_bridgeObjectRelease(*(void *)(v0
                                      + OBJC_IVAR____TtC8CreateML41ActivityClassifierTrainingSessionDelegate_trainingDataSamples));
  swift_bridgeObjectRelease(*(void *)(v0
                                      + OBJC_IVAR____TtC8CreateML41ActivityClassifierTrainingSessionDelegate_validationDataSamples));
  swift_bridgeObjectRelease(*(void *)(v0
                                      + OBJC_IVAR____TtC8CreateML41ActivityClassifierTrainingSessionDelegate_classLabels));
  return v0;
}

uint64_t ActivityClassifierTrainingSessionDelegate.__deallocating_deinit()
{
  ActivityClassifierTrainingSessionDelegate.deinit();
  return swift_deallocClassInstance(v0, *(unsigned int *)(*(void *)v0 + 48), *(unsigned __int16 *)(*(void *)v0 + 52));
}

uint64_t ObjC metadata update function for ActivityClassifierTrainingSessionDelegate()
{
  return type metadata accessor for ActivityClassifierTrainingSessionDelegate(0);
}

uint64_t type metadata accessor for ActivityClassifierTrainingSessionDelegate(uint64_t a1)
{
  uint64_t result = type metadata singleton initialization cache for ActivityClassifierTrainingSessionDelegate;
  if (!type metadata singleton initialization cache for ActivityClassifierTrainingSessionDelegate) {
    return swift_getSingletonMetadata(a1, &nominal type descriptor for ActivityClassifierTrainingSessionDelegate);
  }
  return result;
}

uint64_t type metadata completion function for ActivityClassifierTrainingSessionDelegate(uint64_t a1)
{
  v5[0] = &unk_34E5B0;
  uint64_t result = type metadata accessor for MLTrainingSessionParameters(319);
  if (v2 <= 0x3F)
  {
    v5[1] = *(void *)(result - 8) + 64;
    v5[2] = &unk_34E5C8;
    uint64_t result = type metadata accessor for MLSoundClassifier.PersistentParameters?(319, &lazy cache variable for type metadata for MLActivityClassifier.Trainer?, type metadata accessor for MLActivityClassifier.Trainer);
    if (v3 <= 0x3F)
    {
      v5[3] = *(void *)(result - 8) + 64;
      uint64_t result = type metadata accessor for MLSoundClassifier.PersistentParameters?(319, &lazy cache variable for type metadata for TrainingTablePrinter?, type metadata accessor for TrainingTablePrinter);
      if (v4 <= 0x3F)
      {
        v5[4] = *(void *)(result - 8) + 64;
        v5[5] = &unk_34E5E0;
        v5[6] = &unk_34E5E0;
        void v5[7] = &unk_34E5E0;
        uint64_t result = swift_updateClassMetadata2(a1, 256, 8, v5, a1 + 80);
        if (!result) {
          return 0;
        }
      }
    }
  }
  return result;
}

void protocol witness for TrainingSessionDelegate.setUp() in conformance ActivityClassifierTrainingSessionDelegate()
{
}

void protocol witness for TrainingSessionDelegate.resume(from:) in conformance ActivityClassifierTrainingSessionDelegate(Swift::OpaquePointer a1)
{
}

unint64_t protocol witness for TrainingSessionDelegate.itemCount(phase:) in conformance ActivityClassifierTrainingSessionDelegate(CreateML::MLPhase a1)
{
  return (unint64_t)ActivityClassifierTrainingSessionDelegate.itemCount(phase:)(a1);
}

uint64_t protocol witness for TrainingSessionDelegate.train(from:) in conformance ActivityClassifierTrainingSessionDelegate(Swift::Int a1)
{
  Swift::tuple_Int_metrics_OpaquePointer_finished_Bool v9 = ActivityClassifierTrainingSessionDelegate.train(from:)(a1);
  if (v4)
  {
    uint64_t v5 = *(uint64_t (**)(uint64_t, uint64_t, void))(v1 + 8);
    uint64_t v6 = v1;
  }
  else
  {
    char rawValue = v9.metrics._rawValue;
    uint64_t v5 = *(uint64_t (**)(uint64_t, uint64_t, void))(v1 + 8);
    BOOL finished = v9.finished;
    uint64_t v6 = v1;
    v9.metrics._char rawValue = (void *)v9._0;
    *(void *)&v9.BOOL finished = rawValue;
  }
  return protocol witness for TrainingSessionDelegate.train(from:) in conformance MLStyleTransfer.TrainingSessionDelegate(v5, v6, (uint64_t)v9.metrics._rawValue, *(uint64_t *)&v9.finished, finished);
}

uint64_t protocol witness for TrainingSessionDelegate.evaluate(from:) in conformance ActivityClassifierTrainingSessionDelegate(Swift::Int a1)
{
  *(Swift::tuple_Int_finished_Bool *)&long long v2 = ActivityClassifierTrainingSessionDelegate.evaluate(from:)(a1);
  if (!v4)
  {
    *((void *)&v2 + 1) = 1;
    unsigned int v3 = 1;
  }
  return protocol witness for TrainingSessionDelegate.extractFeatures(from:) in conformance SoundClassifierTrainingSessionDelegate(*(uint64_t (**)(uint64_t, void))(v1 + 8), v1, *((uint64_t *)&v2 + 1), v3);
}

uint64_t protocol witness for TrainingSessionDelegate.saveCheckpoint(to:phase:iteration:) in conformance ActivityClassifierTrainingSessionDelegate(uint64_t a1, unsigned char *a2)
{
  return ActivityClassifierTrainingSessionDelegate.saveCheckpoint(to:phase:iteration:)(a1, a2);
}

NSURL *protocol witness for TrainingSessionCodable.save(to:) in conformance ActivityClassifierTrainingSessionDelegate(uint64_t a1)
{
  return ActivityClassifierTrainingSessionDelegate.save(to:)(a1);
}

NSURL *protocol witness for TrainingSessionCodable.restore(from:phase:) in conformance ActivityClassifierTrainingSessionDelegate(uint64_t a1, double a2)
{
  return ActivityClassifierTrainingSessionDelegate.restore(from:phase:)(a1, a2);
}

uint64_t outlined consume of MLActivityClassifier.PersistentParameters?(uint64_t a1, char a2, uint64_t a3, char a4, uint64_t a5)
{
  if (a5)
  {
    char v5 = a5;
    outlined consume of Result<_DataTable, Error>(a1, a2 & 1);
    outlined consume of MLDataTable?(a3, a4);
    return swift_bridgeObjectRelease(v5);
  }
  return result;
}

uint64_t lazy protocol witness table accessor for type Column<String> and conformance Column<A>(uint64_t *a1, uint64_t a2)
{
  uint64_t result = *a1;
  if (!*a1)
  {
    uint64_t v3 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for Column<String>);
    uint64_t result = swift_getWitnessTable(a2, v3);
    *a1 = result;
  }
  return result;
}

uint64_t outlined copy of MLActivityClassifier.PersistentParameters?(uint64_t a1, char a2, uint64_t a3, char a4, uint64_t a5)
{
  if (a5)
  {
    char v5 = a5;
    outlined copy of Result<_DataTable, Error>(a1, a2 & 1);
    outlined copy of MLDataTable?(a3, a4);
    return swift_bridgeObjectRetain(v5);
  }
  return result;
}

uint64_t outlined init with copy of TrainingTablePrinter(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v3 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v3 - 8) + 16))(a2, a1, v3);
  return a2;
}

void MLDataValue.DictionaryType.subscript.getter(uint64_t a1)
{
  uint64_t v3 = v1;
  uint64_t v4 = *v2;
  if (*(void *)(v4 + 16))
  {
    char v5 = *(void **)a1;
    uint64_t v6 = *(void **)(a1 + 8);
    int v7 = *(unsigned __int8 *)(a1 + 16);
    outlined copy of MLDataValue(*(void **)a1, v6, v7);
    *(void *)&long long v8 = v5;
    *((void *)&v8 + 1) = v6;
    unint64_t v9 = specialized __RawDictionaryStorage.find<A>(_:)(v8, v7);
    if (v10)
    {
      uint64_t v11 = *(void *)(v4 + 56);
      uint64_t v12 = 24 * v9;
      Swift::String v13 = *(void **)(v11 + v12);
      uint64_t v14 = *(void **)(v11 + v12 + 8);
      unsigned __int8 v15 = *(unsigned char *)(v11 + v12 + 16);
      *(void *)uint64_t v3 = v13;
      *(void *)(v3 + 8) = v14;
      *(unsigned char *)(v3 + 16) = v15;
      outlined copy of MLDataValue(v13, v14, v15);
      outlined consume of MLDataValue(v5, v6, v7);
      return;
    }
    outlined consume of MLDataValue(v5, v6, v7);
  }
  *(_OWORD *)uint64_t v3 = 0;
  *(unsigned char *)(v3 + 16) = -1;
}

uint64_t MLDataValue.DictionaryType.description.getter()
{
  uint64_t v1 = *v0;
  uint64_t v2 = lazy protocol witness table accessor for type MLDataValue and conformance MLDataValue();
  return Dictionary.description.getter(v1, &type metadata for MLDataValue, &type metadata for MLDataValue, v2);
}

void *MLDataValue.DictionaryType.init(_:)(uint64_t a1)
{
  *uint64_t result = a1;
  return result;
}

uint64_t specialized Collection<>.indices.getter(uint64_t a1)
{
  uint64_t v2 = v1;
  uint64_t *v1 = a1;
  v1[1] = specialized Dictionary.startIndex.getter(a1);
  v2[2] = v3;
  *((unsigned char *)v2 + 24) = v4 & 1;
  uint64_t v5 = *(unsigned int *)(a1 + 36);
  v2[4] = 1 << *(unsigned char *)(a1 + 32);
  v2[5] = v5;
  *((unsigned char *)v2 + 48) = 0;
  return swift_bridgeObjectRetain(a1);
}

uint64_t specialized Collection<>.indices.getter(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = v3;
  *uint64_t v3 = a1;
  v3[1] = a2;
  v3[2] = a3;
  v3[3] = 0;
  swift_retain_n(a1);
  swift_bridgeObjectRetain_n(a2, 2);
  swift_retain_n(a3);
  uint64_t v6 = CMLSequence.size.getter();
  uint64_t v7 = specialized RandomAccessCollection<>.distance(from:to:)(0, v6);
  swift_retain();
  uint64_t v8 = CMLSequence.size.getter();
  uint64_t v9 = specialized RandomAccessCollection<>.distance(from:to:)(0, v8);
  swift_release();
  if (v9 < 0) {
    BUG();
  }
  swift_retain();
  uint64_t v10 = CMLSequence.size.getter();
  uint64_t v11 = specialized RandomAccessCollection<>.distance(from:to:)(0, v10);
  swift_bridgeObjectRelease(a2);
  swift_release();
  uint64_t result = swift_release_n(a3);
  if (v7 < 0 || v11 < v7) {
    BUG();
  }
  v5[4] = v7;
  return result;
}

uint64_t MLDataValue.DictionaryType.count.getter()
{
  return *(void *)(*(void *)v0 + 16);
}

uint64_t specialized Collection.index(_:offsetBy:)(uint64_t a1, uint64_t a2)
{
  if (a2 < 0) {
    BUG();
  }
  if (a2)
  {
    unint64_t v2 = a2 - 1;
    uint64_t v3 = -a2;
    uint64_t v4 = 0;
    do
    {
      if ((a1 ^ 0x7FFFFFFFFFFFFFFFuLL) <= v2) {
        BUG();
      }
      --v4;
    }
    while (v3 != v4);
    a1 -= v4;
  }
  return a1;
}

unint64_t specialized Collection.index(_:offsetBy:)(uint64_t a1, uint64_t a2, char a3, uint64_t a4, uint64_t a5)
{
  char v6 = a3 & 1;
  if (a4 < 0) {
    BUG();
  }
  uint64_t v7 = v5;
  uint64_t v8 = a2;
  int64_t v9 = a1;
  if (!a4)
  {
    unint64_t result = outlined copy of [A : B].Index._Variant<A, B>(a1, a2, a3 & 1);
    goto LABEL_27;
  }
  uint64_t v36 = v5;
  outlined copy of [A : B].Index._Variant<A, B>(a1, a2, a3 & 1);
  uint64_t v10 = a5;
  uint64_t v11 = a4;
  uint64_t v12 = v8;
  uint64_t v13 = 0;
  uint64_t v14 = 1;
  uint64_t v15 = -2;
  uint64_t v16 = 64;
  do
  {
    if (v6) {
      BUG();
    }
    int64_t v17 = v14 << *(unsigned char *)(v10 + 32);
    if (v9 < 0 || v9 >= v17) {
      BUG();
    }
    unint64_t v18 = (unint64_t)v9 >> 6;
    uint64_t v19 = *(void *)(v10 + 8 * ((unint64_t)v9 >> 6) + 64);
    unint64_t v20 = v9 & 0x3F;
    if (!_bittest64(&v19, v20)) {
      BUG();
    }
    if (*(_DWORD *)(v10 + 36) != v8) {
      BUG();
    }
    unint64_t result = (v15 << v20) & v19;
    if (result)
    {
      _BitScanForward64(&result, result);
      int64_t v9 = result | v9 & 0xFFFFFFFFFFFFFFC0;
      goto LABEL_24;
    }
    unint64_t result = v18 + 1;
    unint64_t v22 = (unint64_t)(v17 + 63) >> 6;
    if (v18 + 1 < v22)
    {
      unint64_t v23 = *(void *)(v10 + 8 * v18 + 72);
      if (v23) {
        goto LABEL_13;
      }
      unint64_t result = v18 + 2;
      if (v18 + 2 < v22)
      {
        unint64_t v23 = *(void *)(v10 + 8 * v18 + 80);
        if (v23) {
          goto LABEL_13;
        }
        unint64_t result = v18 + 3;
        if (v18 + 3 < v22)
        {
          unint64_t v23 = *(void *)(v10 + 8 * v18 + 88);
          if (v23)
          {
LABEL_13:
            _BitScanForward64(&v24, v23);
            unint64_t result = v24 + (result << 6);
            int64_t v9 = result;
            goto LABEL_24;
          }
          uint64_t v38 = v12;
          while (v18 + 4 < v22)
          {
            unint64_t v25 = *(void *)(v10 + 8 * v18++ + 96);
            if (v25)
            {
              uint64_t v26 = v9;
              uint64_t v27 = v8;
              unint64_t v37 = v25;
              uint64_t v28 = v14;
              uint64_t v29 = v15;
              uint64_t v30 = v16;
              outlined consume of [MLDataValue : MLDataValue].Index._Variant(v26, v27, 0);
              unint64_t v23 = v37;
              uint64_t v16 = v30;
              uint64_t v15 = v29;
              uint64_t v14 = v28;
              uint64_t v12 = v38;
              uint64_t v10 = a5;
              uint64_t v11 = a4;
              unint64_t result = v18 + 3;
              goto LABEL_13;
            }
          }
          uint64_t v31 = v9;
          uint64_t v32 = v8;
          uint64_t v33 = v14;
          uint64_t v34 = v15;
          uint64_t v35 = v16;
          unint64_t result = outlined consume of [MLDataValue : MLDataValue].Index._Variant(v31, v32, 0);
          uint64_t v16 = v35;
          uint64_t v15 = v34;
          uint64_t v14 = v33;
          uint64_t v12 = v38;
          uint64_t v10 = a5;
          uint64_t v11 = a4;
        }
      }
    }
    int64_t v9 = v17;
LABEL_24:
    ++v13;
    char v6 = 0;
    uint64_t v8 = v12;
  }
  while (v13 < v11);
  uint64_t v8 = v12;
  uint64_t v7 = v36;
LABEL_27:
  *(void *)uint64_t v7 = v9;
  *(void *)(v7 + 8) = v8;
  *(unsigned char *)(v7 + 16) = v6;
  return result;
}

uint64_t specialized Collection.index(_:offsetBy:limitedBy:)(uint64_t a1, uint64_t a2, char a3, uint64_t a4, uint64_t a5, unsigned int a6, char a7, uint64_t a8)
{
  if (a4 < 0) {
    BUG();
  }
  uint64_t v10 = a2;
  int64_t v11 = a1;
  uint64_t v34 = v8;
  unsigned __int8 v12 = a3 & 1;
  outlined copy of [A : B].Index._Variant<A, B>(a1, a2, (a3 & 1) != 0);
  if (a4)
  {
    uint64_t v13 = a8;
    unsigned int v14 = a6;
    char v15 = (a7 & 1 | v12) != 0;
    uint64_t v16 = 0;
    uint64_t v31 = a4;
    while (1)
    {
      if (v15) {
        BUG();
      }
      if (v10 != v14) {
        BUG();
      }
      if (v11 == a5)
      {
        outlined consume of [MLDataValue : MLDataValue].Index._Variant(a5, v10, 0);
        uint64_t result = v34;
        *(_OWORD *)uint64_t v34 = 0;
        *(unsigned char *)(v34 + 16) = -1;
        return result;
      }
      uint64_t v17 = 1 << *(unsigned char *)(v13 + 32);
      if (v11 < 0 || v11 >= v17) {
        BUG();
      }
      unint64_t v18 = (unint64_t)v11 >> 6;
      uint64_t v19 = *(void *)(v13 + 8 * ((unint64_t)v11 >> 6) + 64);
      unint64_t v20 = v11 & 0x3F;
      if (!_bittest64(&v19, v20)) {
        BUG();
      }
      if (*(_DWORD *)(v13 + 36) != v14) {
        BUG();
      }
      unint64_t v21 = (-2 << v20) & v19;
      if (v21)
      {
        outlined consume of [MLDataValue : MLDataValue].Index._Variant(v11, v10, 0);
        _BitScanForward64(&v22, v21);
        int64_t v11 = v22 | v11 & 0xFFFFFFFFFFFFFFC0;
      }
      else
      {
        unint64_t v23 = v18 + 1;
        unint64_t v24 = (unint64_t)(v17 + 63) >> 6;
        if (v18 + 1 >= v24) {
          goto LABEL_23;
        }
        unint64_t v25 = *(void *)(v13 + 8 * v18 + 72);
        if (!v25)
        {
          unint64_t v23 = v18 + 2;
          if (v18 + 2 >= v24) {
            goto LABEL_23;
          }
          unint64_t v25 = *(void *)(v13 + 8 * v18 + 80);
          if (!v25)
          {
            unint64_t v23 = v18 + 3;
            if (v18 + 3 >= v24) {
              goto LABEL_23;
            }
            unint64_t v25 = *(void *)(v13 + 8 * v18 + 88);
            if (!v25)
            {
              while (v18 + 4 < v24)
              {
                unint64_t v25 = *(void *)(v13 + 8 * v18++ + 96);
                if (v25)
                {
                  unint64_t v23 = v18 + 3;
                  goto LABEL_15;
                }
              }
LABEL_23:
              outlined consume of [MLDataValue : MLDataValue].Index._Variant(v11, v10, 0);
              int64_t v11 = v17;
              goto LABEL_24;
            }
          }
        }
LABEL_15:
        uint64_t v26 = v10;
        unint64_t v27 = v25;
        outlined consume of [MLDataValue : MLDataValue].Index._Variant(v11, v26, 0);
        _BitScanForward64(&v28, v27);
        int64_t v11 = v28 | (v23 << 6);
      }
LABEL_24:
      ++v16;
      uint64_t v29 = a6;
      uint64_t v10 = a6;
      char v15 = a7 & 1;
      unsigned int v14 = a6;
      uint64_t v13 = a8;
      if (v16 == v31)
      {
        unsigned __int8 v12 = 0;
        goto LABEL_27;
      }
    }
  }
  uint64_t v29 = a2;
LABEL_27:
  uint64_t result = v34;
  *(void *)uint64_t v34 = v11;
  *(void *)(v34 + 8) = v29;
  *(unsigned char *)(v34 + 16) = v12;
  return result;
}

uint64_t specialized Collection.index(_:offsetBy:limitedBy:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a2 < 0) {
    BUG();
  }
  if (a2)
  {
    while (a3 != a1)
    {
      if (__OFADD__(1, a1++)) {
        BUG();
      }
      if (!--a2) {
        return a1;
      }
    }
    return 0;
  }
  return a1;
}

uint64_t specialized Collection.distance(from:to:)(int64_t a1, uint64_t a2, char a3, uint64_t a4, unsigned int a5, char a6, uint64_t a7)
{
  if (a6 & 1) != 0 || (a3) {
    BUG();
  }
  uint64_t v7 = a4;
  int64_t v8 = a1;
  if (a4 < a1) {
    BUG();
  }
  if (a5 != a2) {
    BUG();
  }
  if (a1 != a4)
  {
    uint64_t v11 = a7;
    uint64_t v9 = 1;
    while (1)
    {
      uint64_t v12 = 1 << *(unsigned char *)(v11 + 32);
      if (v8 < 0 || v8 >= v12) {
        BUG();
      }
      unint64_t v13 = (unint64_t)v8 >> 6;
      uint64_t v14 = *(void *)(v11 + 8 * ((unint64_t)v8 >> 6) + 64);
      unint64_t v15 = v8 & 0x3F;
      if (!_bittest64(&v14, v15)) {
        BUG();
      }
      if (*(_DWORD *)(v11 + 36) != a5) {
        BUG();
      }
      unint64_t v16 = (-2 << v15) & v14;
      if (v16)
      {
        outlined consume of [MLDataValue : MLDataValue].Index._Variant(v8, a2, 0);
        _BitScanForward64(&v17, v16);
        int64_t v8 = v17 | v8 & 0xFFFFFFFFFFFFFFC0;
        goto LABEL_28;
      }
      unint64_t v18 = v13 + 1;
      unint64_t v19 = (unint64_t)(v12 + 63) >> 6;
      if (v13 + 1 >= v19)
      {
        outlined consume of [MLDataValue : MLDataValue].Index._Variant(v8, a2, 0);
        int64_t v8 = v12;
        goto LABEL_28;
      }
      unint64_t v20 = *(void *)(v11 + 8 * v13 + 72);
      if (!v20)
      {
        unint64_t v18 = v13 + 2;
        if (v13 + 2 >= v19) {
          goto LABEL_26;
        }
        unint64_t v20 = *(void *)(v11 + 8 * v13 + 80);
        if (!v20)
        {
          unint64_t v18 = v13 + 3;
          if (v13 + 3 >= v19) {
            goto LABEL_26;
          }
          unint64_t v20 = *(void *)(v11 + 8 * v13 + 88);
          if (!v20) {
            break;
          }
        }
      }
LABEL_17:
      outlined consume of [MLDataValue : MLDataValue].Index._Variant(v8, a2, 0);
      _BitScanForward64(&v21, v20);
      int64_t v8 = v21 | (v18 << 6);
LABEL_27:
      uint64_t v7 = a4;
LABEL_28:
      if (v8 == v7) {
        return v9;
      }
      BOOL v22 = __OFADD__(1, v9++);
      a2 = a5;
      uint64_t v11 = a7;
      if (v22) {
        BUG();
      }
    }
    while (v13 + 4 < v19)
    {
      unint64_t v20 = *(void *)(v11 + 8 * v13++ + 96);
      if (v20)
      {
        unint64_t v18 = v13 + 3;
        goto LABEL_17;
      }
    }
LABEL_26:
    outlined consume of [MLDataValue : MLDataValue].Index._Variant(v8, a2, 0);
    int64_t v8 = v12;
    goto LABEL_27;
  }
  uint64_t v9 = 0;
  outlined consume of [MLDataValue : MLDataValue].Index._Variant(a4, a2, 0);
  return v9;
}

uint64_t specialized Collection.distance(from:to:)(uint64_t a1, uint64_t a2)
{
  if (a2 < a1) {
    BUG();
  }
  uint64_t v2 = a2 - a1;
  if (a2 == a1) {
    return 0;
  }
  if (a2 <= a1) {
    BUG();
  }
  unint64_t v4 = a2 + ~a1;
  uint64_t result = 0;
  do
  {
    if (v4 > 0x7FFFFFFFFFFFFFFELL) {
      BUG();
    }
    ++result;
  }
  while (v2 != result);
  return result;
}

uint64_t MLDataValue.DictionaryType.init(from:)(uint64_t a1)
{
  uint64_t v2 = v1;
  uint64_t v3 = specialized handling<A, B>(_:_:)(*(void *)(a1 + 16));
  if (!v3) {
    BUG();
  }
  uint64_t v4 = type metadata accessor for CMLDictionary();
  v7[0] = swift_allocObject(v4, 24, 7);
  v7[1] = (uint64_t)closure #1 in MLDataValue.DictionaryType.init(from:);
  v7[2] = 0;
  *(void *)(v7[0] + 16) = v3;
  v7[3] = (uint64_t)specialized closure #1 in LazySequenceProtocol.compactMap<A>(_:);
  v7[4] = 0;
  v7[5] = (uint64_t)specialized closure #2 in LazySequenceProtocol.compactMap<A>(_:);
  v7[6] = 0;
  swift_retain();
  uint64_t v5 = specialized Dictionary.init<A>(uniqueKeysWithValues:)(v7);
  swift_release();
  uint64_t result = swift_release();
  *uint64_t v2 = v5;
  return result;
}

uint64_t MLDataValue.DictionaryType.featureValue.getter()
{
  uint64_t v73 = 0;
  uint64_t v1 = *v0;
  uint64_t v2 = tc_v1_flex_dict_create(0);
  if (!v2) {
    BUG();
  }
  uint64_t v3 = v2;
  uint64_t v4 = type metadata accessor for CMLDictionary();
  uint64_t inited = swift_initStackObject(v4, v57);
  uint64_t v58 = v3;
  *(void *)(inited + 16) = v3;
  int64_t v59 = specialized Dictionary.startIndex.getter(v1);
  uint64_t v65 = v6;
  LOBYTE(v3) = v7;
  swift_bridgeObjectRetain(v1);
  if (v3) {
LABEL_39:
  }
    BUG();
  uint64_t v61 = inited;
  uint64_t v60 = v1;
  while (1)
  {
    uint64_t v8 = 1 << *(unsigned char *)(v1 + 32);
    if (*(_DWORD *)(v1 + 36) != v65) {
      BUG();
    }
    int64_t v9 = v59;
    if (v59 == v8) {
      break;
    }
    if (v59 < 0 || v59 >= v8) {
      BUG();
    }
    uint64_t v10 = *(void *)(v1 + 8 * ((unint64_t)v59 >> 6) + 64);
    if (!_bittest64(&v10, v59)) {
      BUG();
    }
    uint64_t v11 = *(void *)(v1 + 48);
    uint64_t v12 = *(void *)(v1 + 56);
    unint64_t v13 = *(void **)(v11 + 24 * v59);
    uint64_t v63 = *(void **)(v11 + 24 * v59 + 8);
    uint64_t v69 = *(void **)(v12 + 24 * v59);
    uint64_t v14 = v69;
    uint64_t v62 = *(void **)(v12 + 24 * v59 + 8);
    unint64_t v15 = v62;
    int v16 = *(unsigned __int8 *)(v12 + 24 * v59 + 16);
    LOBYTE(v12) = *(unsigned char *)(v11 + 24 * v59 + 16);
    uint64_t v64 = v12;
    outlined copy of MLDataValue(v13, v63, v12);
    outlined copy of MLDataValue(v14, v15, v16);
    char v72 = v13;
    unint64_t v17 = v63;
    outlined copy of MLDataValue(v13, v63, v64);
    outlined copy of MLDataValue(v14, v62, v16);
    LOBYTE(v15) = v64;
    outlined consume of MLDataValue(v13, v17, v64);
    unint64_t v18 = v62;
    outlined consume of MLDataValue(v14, v62, v16);
    uint64_t v19 = v60;
    swift_bridgeObjectRetain(v60);
    int64_t v59 = specialized _NativeDictionary.index(after:)(v9, v65, 0, v19);
    uint64_t v65 = v20;
    char v71 = v21;
    swift_bridgeObjectRelease(v19);
    BOOL v22 = v63;
    outlined copy of MLDataValue(v72, v63, v15);
    unint64_t v23 = v69;
    outlined copy of MLDataValue(v69, v18, v16);
    int v66 = v16;
    outlined consume of MLDataValue(v23, v18, v16);
    unint64_t v24 = v22;
    switch((unint64_t)v22)
    {
      case 0uLL:
        unint64_t v25 = v72;
        uint64_t v26 = v73;
        uint64_t v27 = specialized handling<A, B>(_:_:)((uint64_t)v72);
        if (v26)
        {
          char v52 = "CreateML/MLDataValueConvertible.swift";
          uint64_t v53 = 37;
          uint64_t v56 = 100;
LABEL_51:
          uint64_t v54 = v56;
LABEL_54:
          uint64_t v55 = v26;
          goto LABEL_55;
        }
        uint64_t v28 = v27;
        if (!v27) {
          BUG();
        }
LABEL_19:
        uint64_t v33 = type metadata accessor for CMLFeatureValue();
        swift_allocObject(v33, 25, 7);
        uint64_t v29 = CMLFeatureValue.init(rawValue:ownsValue:)(v28, 1);
LABEL_23:
        Swift::String v34 = CMLFeatureValue.stringValue()();
        uint64_t countAndFlagsBits = v34._countAndFlagsBits;
        char object = v34._object;
        uint64_t v73 = v35;
        if (v35) {
          goto LABEL_49;
        }
        swift_release(v29);
        uint64_t v36 = v63;
        char v37 = v64;
        outlined copy of MLDataValue(v25, v63, v64);
        uint64_t v38 = v25;
        char v39 = v62;
        int v40 = v66;
        outlined copy of MLDataValue(v69, v62, v66);
        outlined consume of MLDataValue(v38, v36, v37);
        switch(v40)
        {
          case 0:
            specialized handling<A, B>(_:_:)((uint64_t)v69);
            JUMPOUT(0x1EAC21);
          case 1:
            uint64_t v26 = v73;
            uint64_t v43 = specialized handling<A, B>(_:_:)();
            if (v26) {
              goto LABEL_53;
            }
            uint64_t v44 = v43;
            uint64_t v45 = v72;
            uint64_t v46 = (uint64_t)object;
            if (!v43) {
              BUG();
            }
            uint64_t v47 = type metadata accessor for CMLFeatureValue();
            swift_allocObject(v47, 25, 7);
            uint64_t v29 = CMLFeatureValue.init(rawValue:ownsValue:)(v44, 1);
            goto LABEL_37;
          case 2:
            type metadata accessor for CMLFeatureValue();
            swift_bridgeObjectRetain(v39);
            uint64_t v41 = v69;
            uint64_t v26 = v73;
            uint64_t v42 = CMLFeatureValue.__allocating_init(_:)((uint64_t)v69, (uint64_t)v39);
            if (v26) {
              goto LABEL_52;
            }
            uint64_t v29 = v42;
            outlined consume of MLDataValue(v41, v39, 2);
            goto LABEL_36;
          case 3:
            JUMPOUT(0x1EACA5);
          case 4:
            JUMPOUT(0x1EAC44);
          case 5:
            char v48 = v69;
            id v70 = v69;
            uint64_t v29 = MLDataValue.MultiArrayType.featureValue.getter();
            outlined consume of MLDataValue(v48, v39, 5);
            goto LABEL_35;
          case 6:
            type metadata accessor for CMLFeatureValue();
            uint64_t v29 = CMLFeatureValue.__allocating_init()(0);
LABEL_35:
            uint64_t v26 = v73;
LABEL_36:
            uint64_t v45 = v72;
            uint64_t v46 = (uint64_t)object;
LABEL_37:
            CMLDictionary.add(key:value:)(countAndFlagsBits, v46, v29);
            uint64_t v73 = v26;
            if (v26)
            {
              swift_bridgeObjectRelease(v46);
LABEL_49:
              swift_release(v29);
              char v52 = "CreateML/DictionaryType.swift";
              uint64_t v53 = 29;
              uint64_t v54 = 119;
              uint64_t v55 = v73;
LABEL_55:
              swift_unexpectedError(v55, v52, v53, 1, v54);
              BUG();
            }
            swift_bridgeObjectRelease(v46);
            swift_release(v29);
            outlined consume of MLDataValue(v45, v63, v64);
            outlined consume of MLDataValue(v69, v62, v66);
            uint64_t inited = v61;
            uint64_t v1 = v60;
            if (v71) {
              goto LABEL_39;
            }
            break;
        }
        break;
      case 1uLL:
        unint64_t v25 = v72;
        uint64_t v26 = v73;
        uint64_t v32 = specialized handling<A, B>(_:_:)();
        if (v26)
        {
LABEL_53:
          char v52 = "CreateML/MLDataValueConvertible.swift";
          uint64_t v53 = 37;
          uint64_t v54 = 153;
          goto LABEL_54;
        }
        uint64_t v28 = v32;
        if (!v32) {
          BUG();
        }
        goto LABEL_19;
      case 2uLL:
        type metadata accessor for CMLFeatureValue();
        swift_bridgeObjectRetain(v22);
        unint64_t v25 = v72;
        uint64_t v30 = v22;
        uint64_t v26 = v73;
        uint64_t v31 = CMLFeatureValue.__allocating_init(_:)((uint64_t)v72, (uint64_t)v22);
        if (v26)
        {
LABEL_52:
          char v52 = "CreateML/MLDataValueConvertible.swift";
          uint64_t v53 = 37;
          uint64_t v54 = 170;
          goto LABEL_54;
        }
        uint64_t v29 = v31;
        outlined consume of MLDataValue(v25, v30, 2);
        goto LABEL_23;
      case 3uLL:
        unint64_t v25 = v72;
        id v70 = v72;
        uint64_t v29 = MLDataValue.SequenceType.featureValue.getter();
        outlined consume of MLDataValue(v25, v24, 3);
        goto LABEL_23;
      case 4uLL:
        unint64_t v25 = v72;
        id v70 = v72;
        uint64_t v29 = MLDataValue.DictionaryType.featureValue.getter();
        outlined consume of MLDataValue(v25, v24, 4);
        goto LABEL_23;
      case 5uLL:
        unint64_t v25 = v72;
        id v70 = v72;
        uint64_t v29 = MLDataValue.MultiArrayType.featureValue.getter();
        outlined consume of MLDataValue(v25, v24, 5);
        goto LABEL_23;
      case 6uLL:
        type metadata accessor for CMLFeatureValue();
        uint64_t v29 = CMLFeatureValue.__allocating_init()(0);
        unint64_t v25 = v72;
        goto LABEL_23;
    }
  }
  swift_bridgeObjectRelease(v1);
  outlined consume of [MLDataValue : MLDataValue].Index._Variant(v9, v65, 0);
  type metadata accessor for CMLFeatureValue();
  swift_retain(inited);
  uint64_t v26 = v73;
  uint64_t v49 = CMLFeatureValue.__allocating_init(_:)(inited);
  if (v26)
  {
    char v52 = "CreateML/DictionaryType.swift";
    uint64_t v53 = 29;
    uint64_t v56 = 121;
    goto LABEL_51;
  }
  uint64_t v50 = v49;
  swift_setDeallocating(inited);
  tc_v1_release(v58);
  return v50;
}

uint64_t MLDataValue.DictionaryType.init<A>(uniqueKeysWithValues:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  v12[0] = v3;
  uint64_t v5 = *(void *)(a2 - 8);
  int64_t v6 = *(void *)(v5 + 64);
  char v7 = alloca(v6);
  uint64_t v8 = alloca(v6);
  (*(void (**)(void *, uint64_t, uint64_t))(v5 + 16))(v12, a1, a2);
  uint64_t v9 = lazy protocol witness table accessor for type MLDataValue and conformance MLDataValue();
  uint64_t v10 = Dictionary.init<A>(uniqueKeysWithValues:)(v12, &type metadata for MLDataValue, &type metadata for MLDataValue, a2, v9, a3);
  (*(void (**)(uint64_t, uint64_t))(v5 + 8))(a1, a2);
  uint64_t result = v12[0];
  *(void *)v12[0] = v10;
  return result;
}

uint64_t MLDataValue.DictionaryType.debugDescription.getter()
{
  uint64_t v1 = *v0;
  uint64_t v2 = lazy protocol witness table accessor for type MLDataValue and conformance MLDataValue();
  return Dictionary.debugDescription.getter(v1, &type metadata for MLDataValue, &type metadata for MLDataValue, v2);
}

char static MLDataValue.DictionaryType.== infix(_:_:)(uint64_t *a1, uint64_t *a2)
{
  return specialized static Dictionary<>.== infix(_:_:)(*a1, *a2);
}

void *MLDataValue.DictionaryType.init()()
{
  *uint64_t result = &_swiftEmptyDictionarySingleton;
  return result;
}

BOOL MLDataValue.DictionaryType.isEmpty.getter()
{
  return *(void *)(*(void *)v0 + 16) == 0;
}

BOOL static MLDataValue.DictionaryType.Index.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  if (*(unsigned char *)(a1 + 16) || *(unsigned char *)(a2 + 16)) {
    BUG();
  }
  if (*(_DWORD *)(a1 + 8) != *(void *)(a2 + 8)) {
    BUG();
  }
  return *(void *)a1 == *(void *)a2;
}

BOOL static MLDataValue.DictionaryType.Index.< infix(_:_:)(uint64_t a1, uint64_t a2)
{
  if (*(unsigned char *)(a1 + 16) || *(unsigned char *)(a2 + 16)) {
    BUG();
  }
  if (*(_DWORD *)(a1 + 8) != *(void *)(a2 + 8)) {
    BUG();
  }
  return *(void *)a1 < *(void *)a2;
}

BOOL protocol witness for static Comparable.< infix(_:_:) in conformance MLDataValue.DictionaryType.Index(uint64_t a1, uint64_t a2)
{
  return static MLDataValue.DictionaryType.Index.< infix(_:_:)(a1, a2);
}

uint64_t protocol witness for static Comparable.<= infix(_:_:) in conformance MLDataValue.DictionaryType.Index(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return protocol witness for static Comparable.< infix(_:_:) in conformance MLRecommender.Identifier(a1, a2, a3, a4, (uint64_t (*)(void, void, void, void, void, void))specialized static Comparable.<= infix(_:_:));
}

uint64_t protocol witness for static Comparable.>= infix(_:_:) in conformance MLDataValue.DictionaryType.Index(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return protocol witness for static Comparable.< infix(_:_:) in conformance MLRecommender.Identifier(a1, a2, a3, a4, (uint64_t (*)(void, void, void, void, void, void))specialized static Comparable.>= infix(_:_:));
}

uint64_t protocol witness for static Comparable.> infix(_:_:) in conformance MLDataValue.DictionaryType.Index(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return protocol witness for static Comparable.< infix(_:_:) in conformance MLRecommender.Identifier(a1, a2, a3, a4, (uint64_t (*)(void, void, void, void, void, void))specialized static Comparable.> infix(_:_:));
}

BOOL protocol witness for static Equatable.== infix(_:_:) in conformance MLDataValue.DictionaryType.Index(uint64_t a1, uint64_t a2)
{
  return static MLDataValue.DictionaryType.Index.== infix(_:_:)(a1, a2);
}

uint64_t MLDataValue.DictionaryType.startIndex.getter()
{
  uint64_t v2 = v0;
  uint64_t result = specialized Dictionary.startIndex.getter(*v1);
  *(void *)uint64_t v2 = result;
  *(void *)(v2 + 8) = v4;
  *(unsigned char *)(v2 + 16) = v5 & 1;
  return result;
}

uint64_t specialized Dictionary.startIndex.getter(uint64_t a1)
{
  return specialized Dictionary.startIndex.getter(a1);
}

{
  char v1;
  uint64_t result;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  unsigned __int8 v6;
  uint64_t v7;

  uint64_t v1 = *(unsigned char *)(a1 + 32);
  uint64_t result = 1 << v1;
  uint64_t v3 = *(void *)(a1 + 64);
  if (v3)
  {
    uint64_t v4 = 0;
LABEL_3:
    _BitScanForward64(&v5, v3);
    return v4 + v5;
  }
  int64_t v6 = v1 & 0x3F;
  if (v6 >= 7u)
  {
    uint64_t v3 = *(void *)(a1 + 72);
    if (v3)
    {
      uint64_t v4 = 64;
      goto LABEL_3;
    }
    if (v6 >= 8u)
    {
      uint64_t v3 = *(void *)(a1 + 80);
      uint64_t v4 = 128;
      if (v3) {
        goto LABEL_3;
      }
      char v7 = 11;
      while (v7 - 8 < (unint64_t)(result + 63) >> 6)
      {
        uint64_t v3 = *(void *)(a1 + 8 * v7);
        v4 += 64;
        ++v7;
        if (v3) {
          goto LABEL_3;
        }
      }
    }
  }
  return result;
}

uint64_t MLDataValue.DictionaryType.endIndex.getter()
{
  uint64_t v2 = *(unsigned int *)(*(void *)v1 + 36);
  *(void *)uint64_t result = 1 << *(unsigned char *)(*(void *)v1 + 32);
  *(void *)(result + 8) = v2;
  *(unsigned char *)(result + 16) = 0;
  return result;
}

uint64_t MLDataValue.DictionaryType.subscript.getter(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return specialized Dictionary.subscript.getter(a1, a2, *(void *)a3, *(void *)(a3 + 8), *(unsigned char *)(a3 + 16), *v3);
}

uint64_t specialized Dictionary.subscript.getter(uint64_t a1, uint64_t a2, int64_t a3, int a4, char a5, uint64_t a6)
{
  if (a5) {
    BUG();
  }
  if (a3 < 0 || 1 << *(unsigned char *)(a6 + 32) <= a3) {
    BUG();
  }
  uint64_t v7 = *(void *)(a6 + 8 * ((unint64_t)a3 >> 6) + 64);
  if (!_bittest64(&v7, a3)) {
    BUG();
  }
  if (*(_DWORD *)(a6 + 36) != a4) {
    BUG();
  }
  uint64_t v8 = *(void *)(a6 + 48);
  uint64_t v9 = 24 * a3;
  uint64_t v10 = *(void **)(v8 + 24 * a3);
  uint64_t v11 = *(void **)(v8 + 24 * a3 + 8);
  unsigned __int8 v12 = *(unsigned char *)(v8 + 24 * a3 + 16);
  *(void *)a1 = v10;
  *(void *)(a1 + 8) = v11;
  *(unsigned char *)(a1 + 16) = v12;
  uint64_t v13 = *(void *)(a6 + 56);
  uint64_t v14 = *(void **)(v13 + v9);
  unint64_t v15 = *(void **)(v13 + v9 + 8);
  unsigned __int8 v16 = *(unsigned char *)(v13 + v9 + 16);
  *(void *)a2 = v14;
  *(void *)(a2 + 8) = v15;
  *(unsigned char *)(a2 + 16) = v16;
  outlined copy of MLDataValue(v10, v11, v12);
  return outlined copy of MLDataValue(v14, v15, v16);
}

uint64_t specialized Dictionary.subscript.getter(uint64_t a1, int64_t a2, int a3, uint64_t a4, uint64_t a5)
{
  return specialized Dictionary.subscript.getter(a1, a2, a3, a4, a5, (uint64_t (*)(void))&type metadata accessor for MLProgram.Block);
}

{
  return specialized Dictionary.subscript.getter(a1, a2, a3, a4, a5, (uint64_t (*)(void))&type metadata accessor for Tensor);
}

uint64_t specialized Dictionary.subscript.getter(uint64_t a1, int64_t a2, int a3, uint64_t a4, uint64_t a5, uint64_t (*a6)(void))
{
  if (a2 < 0 || 1 << *(unsigned char *)(a5 + 32) <= a2) {
    BUG();
  }
  uint64_t v6 = *(void *)(a5 + 8 * ((unint64_t)a2 >> 6) + 64);
  if (!_bittest64(&v6, a2)) {
    BUG();
  }
  if (*(_DWORD *)(a5 + 36) != a3) {
    BUG();
  }
  uint64_t v7 = *(void *)(a5 + 48);
  uint64_t v8 = *(void *)(a5 + 56);
  uint64_t v9 = *(void *)(v7 + 16 * a2);
  uint64_t v10 = *(void *)(v7 + 16 * a2 + 8);
  uint64_t v11 = a6(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v11 - 8) + 16))(a1, v8 + *(void *)(*(void *)(v11 - 8) + 72) * a2, v11);
  swift_bridgeObjectRetain(v10);
  return v9;
}

uint64_t MLDataValue.DictionaryType.index(after:)(uint64_t a1)
{
  uint64_t v3 = v1;
  uint64_t result = specialized _NativeDictionary.index(after:)(*(void *)a1, *(void *)(a1 + 8), *(unsigned char *)(a1 + 16), *v2);
  *(void *)uint64_t v3 = result;
  *(void *)(v3 + 8) = v5;
  *(unsigned char *)(v3 + 16) = v6 & 1;
  return result;
}

uint64_t protocol witness for Collection.startIndex.getter in conformance MLDataValue.DictionaryType()
{
  return MLDataValue.DictionaryType.startIndex.getter();
}

uint64_t protocol witness for Collection.endIndex.getter in conformance MLDataValue.DictionaryType()
{
  return MLDataValue.DictionaryType.endIndex.getter();
}

void (*protocol witness for Collection.subscript.read in conformance MLDataValue.DictionaryType(void *a1, uint64_t a2))(uint64_t *a1)
{
  uint64_t v2 = malloc(0x80uLL);
  *a1 = v2;
  MLDataValue.DictionaryType.subscript.getter((uint64_t)v2, (uint64_t)(v2 + 3), a2);
  uint64_t v3 = (void *)*v2;
  uint64_t v4 = (void *)v2[1];
  v2[12] = *v2;
  v2[13] = v4;
  int v5 = *((_DWORD *)v2 + 4);
  *((unsigned char *)v2 + 41) = v5;
  v2[6] = v3;
  v2[7] = v4;
  *((unsigned char *)v2 + 64) = v5;
  char v6 = (void *)v2[3];
  v2[14] = v6;
  uint64_t v7 = (void *)v2[4];
  v2[15] = v7;
  int v8 = *((_DWORD *)v2 + 10);
  *((unsigned char *)v2 + 42) = v8;
  v2[9] = v6;
  v2[10] = v7;
  *((unsigned char *)v2 + 88) = v8;
  outlined copy of MLDataValue(v3, v4, v5);
  outlined copy of MLDataValue(v6, v7, v8);
  return protocol witness for Collection.subscript.read in conformance MLDataValue.DictionaryType;
}

void protocol witness for Collection.subscript.read in conformance MLDataValue.DictionaryType(uint64_t *a1)
{
  uint64_t v1 = *a1;
  char v6 = *(void **)(*a1 + 120);
  uint64_t v7 = *(void **)(*a1 + 112);
  int v8 = *(void **)(*a1 + 104);
  uint64_t v9 = *(void **)(*a1 + 96);
  uint64_t v2 = *(void **)(*a1 + 72);
  uint64_t v3 = *(void **)(*a1 + 80);
  int v4 = *(_DWORD *)(*a1 + 88);
  char v5 = *(unsigned char *)(*a1 + 41);
  char v10 = *(unsigned char *)(*a1 + 42);
  outlined consume of MLDataValue(*(void **)(*a1 + 48), *(void **)(v1 + 56), *(_DWORD *)(v1 + 64));
  outlined consume of MLDataValue(v2, v3, v4);
  outlined consume of MLDataValue(v9, v8, v5);
  outlined consume of MLDataValue(v7, v6, v10);
  free((void *)v1);
}

uint64_t protocol witness for Collection.subscript.getter in conformance MLDataValue.DictionaryType(long long *a1)
{
  long long v2 = *a1;
  long long v3 = a1[1];
  *(_OWORD *)((char *)v6 + 9) = *(long long *)((char *)a1 + 25);
  v6[0] = v3;
  long long v5 = v2;
  return specialized Collection<>.subscript.getter((uint64_t)&v5, *v1);
}

uint64_t protocol witness for Collection.indices.getter in conformance MLDataValue.DictionaryType()
{
  return specialized Collection<>.indices.getter(*v0);
}

BOOL protocol witness for Collection.isEmpty.getter in conformance MLDataValue.DictionaryType()
{
  return MLDataValue.DictionaryType.isEmpty.getter();
}

uint64_t protocol witness for Collection.count.getter in conformance MLDataValue.DictionaryType()
{
  return MLDataValue.DictionaryType.count.getter();
}

uint64_t protocol witness for Collection._customIndexOfEquatableElement(_:) in conformance MLDataValue.DictionaryType()
{
  *(_OWORD *)uint64_t result = 0;
  *(unsigned char *)(result + 16) = -2;
  return result;
}

unint64_t protocol witness for Collection.index(_:offsetBy:) in conformance MLDataValue.DictionaryType(uint64_t a1, uint64_t a2)
{
  return specialized Collection.index(_:offsetBy:)(*(void *)a1, *(void *)(a1 + 8), *(unsigned char *)(a1 + 16), a2, *v2);
}

uint64_t protocol witness for Collection.index(_:offsetBy:limitedBy:) in conformance MLDataValue.DictionaryType(uint64_t a1, uint64_t a2, uint64_t a3)
{
  specialized Collection.index(_:offsetBy:limitedBy:)(*(void *)a1, *(void *)(a1 + 8), *(unsigned char *)(a1 + 16), a2, *(void *)a3, *(void *)(a3 + 8), *(unsigned char *)(a3 + 16), *v3);
  return v5;
}

uint64_t protocol witness for Collection.distance(from:to:) in conformance MLDataValue.DictionaryType(uint64_t a1, uint64_t a2)
{
  return specialized Collection.distance(from:to:)(*(void *)a1, *(void *)(a1 + 8), *(unsigned char *)(a1 + 16), *(void *)a2, *(void *)(a2 + 8), *(unsigned char *)(a2 + 16), *v2);
}

uint64_t protocol witness for Collection._failEarlyRangeCheck(_:bounds:) in conformance MLDataValue.DictionaryType(uint64_t *a1, long long *a2, uint64_t a3, uint64_t a4)
{
  return protocol witness for Collection._failEarlyRangeCheck(_:bounds:) in conformance MLDataValue.DictionaryType(a1, a2, a3, a4, (uint64_t (*)(uint64_t, uint64_t, uint64_t, long long *, void))specialized Collection._failEarlyRangeCheck(_:bounds:));
}

{
  return protocol witness for Collection._failEarlyRangeCheck(_:bounds:) in conformance MLDataValue.DictionaryType(a1, a2, a3, a4, (uint64_t (*)(uint64_t, uint64_t, uint64_t, long long *, void))specialized Collection._failEarlyRangeCheck(_:bounds:));
}

uint64_t protocol witness for Collection._failEarlyRangeCheck(_:bounds:) in conformance MLDataValue.DictionaryType(uint64_t *a1, long long *a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(uint64_t, uint64_t, uint64_t, long long *, void))
{
  uint64_t v6 = *a1;
  uint64_t v7 = a1[1];
  uint64_t v8 = *((unsigned __int8 *)a1 + 16);
  long long v9 = *a2;
  long long v10 = a2[1];
  *(_OWORD *)((char *)v13 + 9) = *(long long *)((char *)a2 + 25);
  v13[0] = v10;
  long long v12 = v9;
  return a5(v6, v7, v8, &v12, *v5);
}

uint64_t protocol witness for Collection._failEarlyRangeCheck(_:bounds:) in conformance MLDataValue.DictionaryType(long long *a1, long long *a2)
{
  long long v2 = *a1;
  long long v3 = a1[1];
  *(_OWORD *)((char *)v10 + 9) = *(long long *)((char *)a1 + 25);
  v10[0] = v3;
  long long v9 = v2;
  long long v4 = a2[1];
  long long v5 = *(long long *)((char *)a2 + 25);
  long long v7 = *a2;
  v8[0] = v4;
  *(_OWORD *)((char *)v8 + 9) = v5;
  return specialized Collection._failEarlyRangeCheck(_:bounds:)(&v9, &v7);
}

uint64_t protocol witness for Collection.index(after:) in conformance MLDataValue.DictionaryType(uint64_t a1)
{
  return MLDataValue.DictionaryType.index(after:)(a1);
}

uint64_t protocol witness for Collection.formIndex(after:) in conformance MLDataValue.DictionaryType(uint64_t a1)
{
  uint64_t v2 = *(void *)a1;
  uint64_t v3 = *(void *)(a1 + 8);
  char v4 = *(unsigned char *)(a1 + 16);
  uint64_t v9 = specialized _NativeDictionary.index(after:)(*(void *)a1, v3, v4, *v1);
  uint64_t v10 = v5;
  char v7 = v6;
  outlined consume of [MLDataValue : MLDataValue].Index._Variant(v2, v3, v4);
  *(void *)a1 = v9;
  uint64_t result = v10;
  *(void *)(a1 + 8) = v10;
  *(unsigned char *)(a1 + 16) = v7 & 1;
  return result;
}

uint64_t protocol witness for Sequence.makeIterator() in conformance MLDataValue.DictionaryType()
{
  uint64_t v2 = v0;
  uint64_t v3 = *v1;
  uint64_t result = specialized Dictionary.startIndex.getter(*v1);
  *(void *)uint64_t v2 = v3;
  *(void *)(v2 + 8) = result;
  *(void *)(v2 + 16) = v5;
  *(unsigned char *)(v2 + 24) = v6 & 1;
  return result;
}

uint64_t protocol witness for Sequence.underestimatedCount.getter in conformance MLDataValue.DictionaryType()
{
  return specialized Array.count.getter(*v0);
}

void *protocol witness for Sequence._copyToContiguousArray() in conformance MLDataValue.DictionaryType()
{
  return specialized Collection._copyToContiguousArray()(*v0);
}

uint64_t protocol witness for Sequence._copyContents(initializing:) in conformance MLDataValue.DictionaryType(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return specialized Sequence._copyContents(initializing:)(a1, a2, a3, *v3);
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance MLDataValue.DictionaryType()
{
  return MLDataValue.DictionaryType.description.getter();
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance MLDataValue.DictionaryType()
{
  return MLDataValue.DictionaryType.debugDescription.getter();
}

char protocol witness for static Equatable.== infix(_:_:) in conformance MLDataValue.DictionaryType(uint64_t *a1, uint64_t *a2)
{
  return static MLDataValue.DictionaryType.== infix(_:_:)(a1, a2);
}

uint64_t CMLDictionary.endIndex.getter()
{
  return CMLDictionary.size.getter();
}

uint64_t protocol witness for RandomAccessCollection.index(_:offsetBy:limitedBy:) in conformance CMLDictionary(uint64_t *a1, uint64_t a2, uint64_t *a3)
{
  return protocol witness for RandomAccessCollection.index(_:offsetBy:limitedBy:) in conformance CMLDictionary(a1, a2, a3);
}

{
  uint64_t v3;
  uint64_t v4;
  uint64_t result;
  char v6;

  char v4 = v3;
  uint64_t result = specialized RandomAccessCollection.index(_:offsetBy:limitedBy:)(*a1, a2, *a3);
  *(void *)char v4 = result;
  *(unsigned char *)(v4 + 8) = v6 & 1;
  return result;
}

uint64_t protocol witness for BidirectionalCollection.index(before:) in conformance CMLDictionary(uint64_t *a1)
{
  uint64_t v2 = v1;
  uint64_t result = specialized RandomAccessCollection<>.index(before:)(*a1);
  *uint64_t v2 = result;
  return result;
}

uint64_t protocol witness for BidirectionalCollection.formIndex(before:) in conformance CMLDictionary(uint64_t *a1)
{
  uint64_t result = specialized RandomAccessCollection<>.index(before:)(*a1);
  *a1 = result;
  return result;
}

uint64_t protocol witness for BidirectionalCollection.index(_:offsetBy:) in conformance CMLDictionary(uint64_t *a1, uint64_t a2)
{
  uint64_t v3 = v2;
  uint64_t result = specialized RandomAccessCollection<>.index(_:offsetBy:)(*a1, a2);
  *uint64_t v3 = result;
  return result;
}

uint64_t protocol witness for BidirectionalCollection.distance(from:to:) in conformance CMLDictionary(uint64_t *a1, uint64_t *a2)
{
  return specialized RandomAccessCollection<>.distance(from:to:)(*a1, *a2);
}

uint64_t protocol witness for Collection.endIndex.getter in conformance CMLDictionary()
{
  uint64_t v1 = v0;
  uint64_t result = CMLDictionary.endIndex.getter();
  uint64_t *v1 = result;
  return result;
}

uint64_t (*protocol witness for Collection.subscript.read in conformance CMLDictionary(uint64_t *a1, uint64_t *a2))(void *a1)
{
  uint64_t v2 = CMLDictionary.keyAndValue(at:)(*a2);
  a1[2] = v3;
  a1[3] = v2;
  *a1 = v2;
  a1[1] = v3;
  swift_retain();
  swift_retain();
  return protocol witness for Collection.subscript.read in conformance CMLDictionary;
}

uint64_t protocol witness for Collection.subscript.read in conformance CMLDictionary(void *a1)
{
  uint64_t v1 = a1[3];
  uint64_t v2 = a1[2];
  uint64_t v3 = a1[1];
  swift_release(*a1);
  swift_release(v3);
  swift_release(v2);
  return swift_release(v1);
}

uint64_t protocol witness for Collection.subscript.getter in conformance CMLDictionary(uint64_t *a1)
{
  uint64_t v2 = v1;
  uint64_t result = specialized Collection<>.subscript.getter(*a1, a1[1]);
  *uint64_t v2 = result;
  v2[1] = v4;
  v2[2] = v5;
  return result;
}

uint64_t protocol witness for Collection.indices.getter in conformance CMLDictionary()
{
  uint64_t v1 = v0;
  uint64_t result = specialized RandomAccessCollection<>.indices.getter();
  uint64_t *v1 = result;
  v1[1] = v3;
  return result;
}

BOOL protocol witness for Collection.isEmpty.getter in conformance CMLDictionary()
{
  return specialized Collection.isEmpty.getter();
}

uint64_t protocol witness for Collection.count.getter in conformance CMLDictionary()
{
  return specialized Collection.count.getter();
}

void protocol witness for Collection._failEarlyRangeCheck(_:bounds:) in conformance CMLDictionary(uint64_t *a1, uint64_t *a2)
{
}

{
  specialized Collection._failEarlyRangeCheck(_:bounds:)(*a1, *a2, a2[1]);
}

{
  specialized Collection._failEarlyRangeCheck(_:bounds:)(*a1, a1[1], *a2, a2[1]);
}

uint64_t protocol witness for Collection.index(after:) in conformance CMLDictionary(uint64_t *a1)
{
  uint64_t v2 = v1;
  uint64_t result = specialized RandomAccessCollection<>.index(after:)(*a1);
  *uint64_t v2 = result;
  return result;
}

uint64_t protocol witness for Collection.formIndex(after:) in conformance CMLDictionary(uint64_t *a1)
{
  uint64_t result = specialized RandomAccessCollection<>.index(after:)(*a1);
  *a1 = result;
  return result;
}

uint64_t protocol witness for Sequence.underestimatedCount.getter in conformance CMLDictionary()
{
  return specialized Collection.underestimatedCount.getter();
}

uint64_t *protocol witness for Sequence._copyToContiguousArray() in conformance CMLDictionary()
{
  return specialized Collection._copyToContiguousArray()();
}

uint64_t protocol witness for Sequence._copyContents(initializing:) in conformance CMLDictionary(void *a1, uint64_t *a2, uint64_t a3)
{
  return specialized Sequence._copyContents(initializing:)(a1, a2, a3);
}

unsigned char *static MLDataValue.DictionaryType.dataValueType.getter()
{
  *uint64_t result = 4;
  return result;
}

void MLDataValue.DictionaryType.init(from:)(uint64_t a1)
{
  uint64_t v3 = v1;
  uint64_t v4 = *(void **)a1;
  char v5 = *(unsigned char *)(a1 + 16);
  if (v5 != 4)
  {
    outlined consume of MLDataValue(v4, *(void **)(a1 + 8), v5);
    uint64_t v4 = 0;
  }
  *uint64_t v3 = v4;
}

uint64_t MLDataValue.DictionaryType.dataValue.getter()
{
  uint64_t v2 = *v1;
  *(void *)uint64_t v0 = *v1;
  *(void *)(v0 + 8) = 0;
  *(unsigned char *)(v0 + 16) = 4;
  return swift_bridgeObjectRetain(v2);
}

uint64_t closure #1 in MLDataValue.DictionaryType.init(from:)(uint64_t a1)
{
  uint64_t v2 = v1;
  uint64_t v12 = *(void *)(a1 + 8);
  Swift::String v3 = CMLFeatureValue.stringValue()();
  if (v4)
  {
    swift_errorRelease(v4);
    long long v5 = 0;
    uint64_t result = 255;
    uint64_t countAndFlagsBits = 0;
    char object = 0;
    char v9 = 0;
  }
  else
  {
    uint64_t countAndFlagsBits = v3._countAndFlagsBits;
    char object = v3._object;
    swift_retain(v12);
    MLDataValue.init(_:)(v12);
    long long v5 = v10;
    char v9 = v11;
    uint64_t result = 2;
  }
  *(void *)uint64_t v2 = countAndFlagsBits;
  *(void *)(v2 + 8) = object;
  *(void *)(v2 + 16) = result;
  *(_OWORD *)(v2 + 24) = v5;
  *(unsigned char *)(v2 + 40) = v9;
  return result;
}

unsigned char *protocol witness for static MLDataValueConvertible.dataValueType.getter in conformance MLDataValue.DictionaryType()
{
  return static MLDataValue.DictionaryType.dataValueType.getter();
}

void protocol witness for MLDataValueConvertible.init(from:) in conformance MLDataValue.DictionaryType(uint64_t a1)
{
}

void *protocol witness for MLDataValueConvertible.init() in conformance MLDataValue.DictionaryType()
{
  return MLDataValue.DictionaryType.init()();
}

uint64_t protocol witness for MLDataValueConvertible.dataValue.getter in conformance MLDataValue.DictionaryType()
{
  return MLDataValue.DictionaryType.dataValue.getter();
}

uint64_t protocol witness for FeatureValueConvertible.init(from:) in conformance MLDataValue.DictionaryType(uint64_t a1)
{
  return MLDataValue.DictionaryType.init(from:)(a1);
}

uint64_t protocol witness for FeatureValueConvertible.featureValue.getter in conformance MLDataValue.DictionaryType()
{
  return MLDataValue.DictionaryType.featureValue.getter();
}

unsigned char *static Dictionary<>.dataValueType.getter()
{
  *uint64_t result = 4;
  return result;
}

uint64_t Dictionary<>.init(from:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  char v7 = *(void **)a1;
  char v8 = *(unsigned char *)(a1 + 16);
  if (v8 == 4)
  {
    long long v10 = v7;
    return Dictionary<>.init(from:)((uint64_t *)&v10, a2, a3, a4, a5, a6);
  }
  else
  {
    outlined consume of MLDataValue(v7, *(void **)(a1 + 8), v8);
    return 0;
  }
}

uint64_t Dictionary<>.init(from:)(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v81 = a6;
  uint64_t v78 = a4;
  uint64_t v91 = a3;
  uint64_t v88 = type metadata accessor for Optional(0, a3);
  uint64_t v89 = *(void *)(v88 - 8);
  int64_t v8 = *(void *)(v89 + 64);
  char v9 = alloca(v8);
  long long v10 = alloca(v8);
  uint64_t v83 = &v78;
  char v11 = alloca(v8);
  uint64_t v12 = alloca(v8);
  char v80 = &v78;
  uint64_t v84 = *(void *)(a3 - 8);
  int64_t v13 = *(void *)(v84 + 64);
  uint64_t v14 = alloca(v13);
  unint64_t v15 = alloca(v13);
  uint64_t v92 = &v78;
  uint64_t v86 = type metadata accessor for Optional(0, a2);
  uint64_t v87 = *(void *)(v86 - 8);
  int64_t v16 = *(void *)(v87 + 64);
  unint64_t v17 = alloca(v16);
  unint64_t v18 = alloca(v16);
  uint64_t v79 = &v78;
  uint64_t v19 = *(void *)(a2 - 8);
  int64_t v20 = *(void *)(v19 + 64);
  char v21 = alloca(v20);
  BOOL v22 = alloca(v20);
  id v85 = &v78;
  unint64_t v23 = alloca(v20);
  unint64_t v24 = alloca(v20);
  id v98 = &v78;
  uint64_t v25 = *a1;
  uint64_t v26 = v19;
  uint64_t v82 = a5;
  uint64_t v96 = Dictionary.init()(a2, a3, a5);
  uint64_t v105 = v25;
  uint64_t v27 = specialized Dictionary.startIndex.getter(v25);
  if (v29) {
LABEL_11:
  }
    BUG();
  uint64_t v30 = v27;
  uint64_t v31 = v28;
  uint64_t v97 = v26;
  uint64_t v90 = a2;
  while (1)
  {
    uint64_t v32 = 1 << *(unsigned char *)(v105 + 32);
    if (*(_DWORD *)(v105 + 36) != v31) {
      BUG();
    }
    if (v30 == v32)
    {
      swift_bridgeObjectRelease(v105);
      outlined consume of [MLDataValue : MLDataValue].Index._Variant(v30, v31, 0);
      return v96;
    }
    if (v30 < 0 || v30 >= v32) {
      BUG();
    }
    uint64_t v33 = *(void *)(v105 + 8 * ((unint64_t)v30 >> 6) + 64);
    if (!_bittest64(&v33, v30)) {
      BUG();
    }
    uint64_t v34 = *(void *)(v105 + 48);
    uint64_t v35 = *(void *)(v105 + 56);
    uint64_t v103 = *(void **)(v34 + 24 * v30);
    uint64_t v36 = *(void **)(v34 + 24 * v30 + 8);
    LOBYTE(v34) = *(unsigned char *)(v34 + 24 * v30 + 16);
    uint64_t v100 = v31;
    char v37 = *(void **)(v35 + 24 * v30);
    id v102 = *(void **)(v35 + 24 * v30 + 8);
    uint64_t v38 = v102;
    unsigned __int8 v39 = *(unsigned char *)(v35 + 24 * v30 + 16);
    char v40 = v34;
    uint64_t v101 = v30;
    int v106 = v34;
    outlined copy of MLDataValue(v103, v36, v34);
    unsigned __int8 v41 = v39;
    int v108 = v39;
    uint64_t v42 = v37;
    outlined copy of MLDataValue(v37, v38, v41);
    uint64_t v43 = v103;
    uint64_t v104 = v36;
    outlined copy of MLDataValue(v103, v36, v40);
    uint64_t v44 = v37;
    uint64_t v45 = v102;
    outlined copy of MLDataValue(v44, v102, v108);
    outlined consume of MLDataValue(v43, v36, v40);
    outlined consume of MLDataValue(v42, v45, v108);
    uint64_t v46 = v105;
    swift_bridgeObjectRetain(v105);
    uint64_t v101 = specialized _NativeDictionary.index(after:)(v101, v100, 0, v46);
    uint64_t v100 = v47;
    char v49 = v48;
    swift_bridgeObjectRelease(v46);
    char v109 = v49 & 1;
    char v107 = v49 & 1;
    uint64_t v50 = v103;
    Swift::String v51 = v104;
    LOBYTE(v45) = v106;
    outlined copy of MLDataValue(v103, v104, v106);
    char v52 = v42;
    uint64_t v53 = v42;
    uint64_t v54 = v102;
    outlined copy of MLDataValue(v53, v102, v108);
    uint64_t v99 = v52;
    outlined consume of MLDataValue(v52, v54, v108);
    uint64_t v93 = v50;
    uint64_t v94 = v51;
    char v95 = (char)v45;
    uint64_t v55 = (uint64_t)v79;
    uint64_t v56 = v90;
    (*(void (**)(void **, uint64_t))(v78 + 16))(&v93, v90);
    uint64_t v57 = v56;
    if (__swift_getEnumTagSinglePayload(v55, 1, v56) == 1)
    {
      outlined consume of MLDataValue(v103, v104, v106);
      outlined consume of MLDataValue(v99, v102, v108);
      swift_bridgeObjectRelease(v105);
      outlined consume of [MLDataValue : MLDataValue].Index._Variant(v101, v100, v109);
      swift_bridgeObjectRelease(v96);
      uint64_t v75 = v55;
      uint64_t v76 = v86;
      uint64_t v77 = v87;
      goto LABEL_15;
    }
    (*(void (**)(uint64_t *, uint64_t, uint64_t))(v97 + 32))(v98, v55, v56);
    uint64_t v58 = v103;
    outlined copy of MLDataValue(v103, v104, v106);
    int64_t v59 = v99;
    uint64_t v60 = v102;
    char v61 = v108;
    outlined copy of MLDataValue(v99, v102, v108);
    outlined consume of MLDataValue(v58, v104, v106);
    uint64_t v93 = v59;
    uint64_t v94 = v60;
    char v95 = v61;
    uint64_t v62 = v91;
    uint64_t v63 = (uint64_t)v80;
    (*(void (**)(void **, uint64_t))(v81 + 16))(&v93, v91);
    if (__swift_getEnumTagSinglePayload(v63, 1, v62) == 1) {
      break;
    }
    uint64_t v64 = v92;
    uint64_t v65 = v63;
    uint64_t v66 = v91;
    uint64_t v67 = v84;
    (*(void (**)(uint64_t *, uint64_t, uint64_t))(v84 + 32))(v92, v65, v91);
    uint64_t v68 = v57;
    uint64_t v69 = v67;
    id v70 = v85;
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(v97 + 16))(v85, v98, v68);
    uint64_t v71 = (uint64_t)v83;
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(v69 + 16))(v83, v64, v66);
    __swift_storeEnumTagSinglePayload(v71, 0, 1, v66);
    uint64_t v72 = v90;
    uint64_t v73 = type metadata accessor for Dictionary(0, v90, v66, v82);
    Dictionary.subscript.setter(v71, v70, v73);
    outlined consume of MLDataValue(v103, v104, v106);
    outlined consume of MLDataValue(v99, v102, v108);
    (*(void (**)(uint64_t *, uint64_t))(v69 + 8))(v92, v66);
    (*(void (**)(uint64_t *, uint64_t))(v97 + 8))(v98, v72);
    uint64_t v31 = v100;
    uint64_t v30 = v101;
    if (v107) {
      goto LABEL_11;
    }
  }
  outlined consume of MLDataValue(v103, v104, v106);
  outlined consume of MLDataValue(v99, v102, v108);
  (*(void (**)(uint64_t *, uint64_t))(v97 + 8))(v98, v57);
  swift_bridgeObjectRelease(v105);
  outlined consume of [MLDataValue : MLDataValue].Index._Variant(v101, v100, v109);
  swift_bridgeObjectRelease(v96);
  uint64_t v75 = v63;
  uint64_t v76 = v88;
  uint64_t v77 = v89;
LABEL_15:
  (*(void (**)(uint64_t, uint64_t))(v77 + 8))(v75, v76);
  return 0;
}

uint64_t Dictionary<>.dataValue.getter(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v21 = a4;
  uint64_t v26 = a3;
  int64_t v20 = v6;
  uint64_t v23 = a6;
  uint64_t v25 = a5;
  v18[0] = a1;
  uint64_t v7 = type metadata accessor for Dictionary(0, a2, a3, a5);
  uint64_t v24 = v7;
  uint64_t WitnessTable = swift_getWitnessTable(&protocol conformance descriptor for [A : B], v7);
  uint64_t v22 = WitnessTable;
  Sequence.lazy.getter(v7, WitnessTable);
  char v17 = v19;
  char v9 = (void *)swift_allocObject(&unk_39B238, 56, 7);
  v9[2] = a2;
  v9[3] = v26;
  v9[4] = v21;
  v9[5] = v25;
  void v9[6] = v23;
  uint64_t v10 = type metadata accessor for LazySequence(0, v7, WitnessTable);
  uint64_t v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (MLDataValue, MLDataValue));
  uint64_t v12 = swift_getWitnessTable(&protocol conformance descriptor for LazySequence<A>, v10);
  LazySequenceProtocol.map<A>(_:)(partial apply for closure #1 in Dictionary<>.dataValue.getter, v9, v10, v11, v12);
  swift_release();
  swift_bridgeObjectRelease(v17);
  uint64_t v13 = type metadata accessor for LazyMapSequence(0, v24, v11, v22);
  uint64_t v14 = swift_getWitnessTable(&protocol conformance descriptor for LazyMapSequence<A, B>, v13);
  MLDataValue.DictionaryType.init<A>(uniqueKeysWithValues:)((uint64_t)v18, v13, v14);
  uint64_t result = v19;
  int64_t v16 = v20;
  *int64_t v20 = v19;
  v16[1] = 0;
  *((unsigned char *)v16 + 16) = 4;
  return result;
}

uint64_t closure #1 in Dictionary<>.dataValue.getter(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(a6 + 32))(a3, a6);
}

uint64_t Dictionary<>.init(from:)(uint64_t a1, uint64_t a2, uint64_t a3, double a4)
{
  uint64_t v64 = a3;
  uint64_t v58 = type metadata accessor for Optional(0, a2);
  uint64_t v4 = *(void *)(v58 - 8);
  int64_t v5 = *(void *)(v4 + 64);
  char v6 = alloca(v5);
  uint64_t v7 = alloca(v5);
  uint64_t v55 = v47;
  int64_t v8 = alloca(v5);
  char v9 = alloca(v5);
  uint64_t v53 = v47;
  uint64_t v10 = *(void *)(a2 - 8);
  int64_t v11 = *(void *)(v10 + 64);
  uint64_t v12 = alloca(v11);
  uint64_t v13 = alloca(v11);
  uint64_t v56 = v47;
  uint64_t v14 = 0;
  uint64_t v15 = specialized handling<A, B>(_:_:)(*(void *)(a1 + 16));
  uint64_t v70 = a1;
  uint64_t v57 = v10;
  uint64_t v65 = a2;
  uint64_t v59 = v4;
  if (!v15) {
    BUG();
  }
  uint64_t v18 = v15;
  uint64_t v19 = type metadata accessor for CMLDictionary();
  uint64_t inited = swift_initStackObject(v19, v48);
  *(void *)(inited + 16) = v18;
  uint64_t v16 = Dictionary.init()(&type metadata for String, v65, &protocol witness table for String);
  uint64_t v68 = v16;
  swift_retain();
  if (!CMLDictionary.size.getter())
  {
    swift_release();
    swift_release();
    goto LABEL_17;
  }
  uint64_t v21 = 0;
  uint64_t v67 = inited;
  do
  {
    uint64_t v22 = CMLDictionary.keyAndValue(at:)(v21);
    uint64_t v69 = v23;
    uint64_t v63 = v14;
    if (v14)
    {
      swift_unexpectedError(v63, "CreateML/DictionaryType.swift", 29, 1);
      BUG();
    }
    uint64_t v24 = v22;
    swift_retain();
    uint64_t v52 = specialized RandomAccessCollection<>.index(after:)(v21);
    swift_release();
    uint64_t v25 = dynamic_cast_existential_1_unconditional((uint64_t)&type metadata for String, (uint64_t)&type metadata for String, (uint64_t)&protocol descriptor for FeatureValueConvertible);
    uint64_t v27 = v26;
    Swift::String v51 = *(void (**)(uint64_t, uint64_t, uint64_t))(v26 + 16);
    uint64_t v28 = type metadata accessor for Optional(0, v25);
    uint64_t v71 = v47;
    uint64_t v54 = v28;
    uint64_t v29 = *(void *)(v28 - 8);
    int64_t v30 = *(void *)(v29 + 64);
    uint64_t v31 = alloca(v30);
    uint64_t v32 = alloca(v30);
    swift_retain();
    uint64_t v66 = v24;
    v51(v24, v25, v27);
    if (__swift_getEnumTagSinglePayload((uint64_t)v47, 1, v25) == 1)
    {
      (*(void (**)(unsigned char *, uint64_t))(v29 + 8))(v47, v54);
      a4 = 0.0;
      long long v61 = 0;
      long long v60 = 0;
      uint64_t v62 = 0;
    }
    else
    {
      *((void *)&v61 + 1) = v25;
      uint64_t v62 = v27;
      uint64_t v34 = __swift_allocate_boxed_opaque_existential_1(&v60);
      (*(void (**)(void *, unsigned char *, uint64_t))(*(void *)(v25 - 8) + 32))(v34, v47, v25);
    }
    uint64_t v33 = v64;
    uint64_t v35 = v69;
    uint64_t v36 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for FeatureValueConvertible?);
    char v37 = swift_dynamicCast(&v49, &v60, v36, &type metadata for String, 6);
    uint64_t v38 = (uint64_t)v53;
    if (!v37 || !v50)
    {
      swift_release_n(v67);
      swift_release();
      swift_release();
      swift_release();
      swift_bridgeObjectRelease(v68);
      return 0;
    }
    uint64_t v71 = v50;
    uint64_t v39 = v49;
    uint64_t v40 = v33;
    uint64_t v41 = v65;
    static MLDataValueConvertible.makeInstance(featureValue:)(v35, v65, v40, a4);
    if (__swift_getEnumTagSinglePayload(v38, 1, v41) == 1)
    {
      swift_release_n(v67);
      swift_release();
      swift_release();
      swift_release();
      swift_bridgeObjectRelease((_BYTE)v71);
      swift_bridgeObjectRelease(v68);
      (*(void (**)(uint64_t, uint64_t))(v59 + 8))(v38, v58);
      return 0;
    }
    uint64_t v42 = v56;
    uint64_t v43 = v57;
    (*(void (**)(unsigned char *, uint64_t, uint64_t))(v57 + 32))(v56, v38, v41);
    uint64_t v44 = (uint64_t)v55;
    (*(void (**)(unsigned char *, unsigned char *, uint64_t))(v43 + 16))(v55, v42, v41);
    __swift_storeEnumTagSinglePayload(v44, 0, 1, v41);
    *(void *)&long long v60 = v39;
    *((void *)&v60 + 1) = v71;
    uint64_t v45 = type metadata accessor for Dictionary(0, &type metadata for String, v41, &protocol witness table for String);
    Dictionary.subscript.setter(v44, &v60, v45);
    swift_release();
    swift_release();
    (*(void (**)(unsigned char *, uint64_t))(v43 + 8))(v42, v41);
    uint64_t v46 = CMLDictionary.size.getter();
    uint64_t v21 = v52;
    uint64_t v14 = v63;
  }
  while (v52 != v46);
  swift_release();
  swift_release();
  uint64_t v16 = v68;
LABEL_17:
  swift_release();
  return v16;
}

uint64_t Dictionary<>.featureValue.getter(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v54 = a3;
  uint64_t v64 = a1;
  uint64_t v60 = *(void *)(a2 - 8);
  int64_t v3 = *(void *)(v60 + 64);
  uint64_t v4 = alloca(v3);
  int64_t v5 = alloca(v3);
  uint64_t v50 = v47;
  uint64_t v57 = a2;
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2(255, &type metadata for String, a2, "key value ", 0);
  uint64_t v51 = type metadata accessor for Optional(0, TupleTypeMetadata2);
  uint64_t v52 = *(void *)(v51 - 8);
  int64_t v6 = *(void *)(v52 + 64);
  uint64_t v7 = alloca(v6);
  int64_t v8 = alloca(v6);
  uint64_t v63 = v47;
  char v9 = alloca(v6);
  uint64_t v10 = alloca(v6);
  uint64_t v11 = tc_v1_flex_dict_create(0);
  if (!v11) {
    BUG();
  }
  uint64_t v12 = v11;
  int64_t v13 = 0;
  uint64_t v14 = type metadata accessor for CMLDictionary();
  uint64_t inited = swift_initStackObject(v14, v48);
  *(void *)(inited + 16) = v12;
  uint64_t v15 = 1 << *(unsigned char *)(v64 + 32);
  uint64_t v16 = ~(-1 << v15);
  if (v15 >= 64) {
    uint64_t v16 = -1;
  }
  unint64_t v17 = *(void *)(v64 + 64) & v16;
  int64_t v61 = (unint64_t)(v15 + 63) >> 6;
  int64_t v55 = v61 - 1;
  swift_bridgeObjectRetain(v64);
  uint64_t v53 = (uint64_t *)v47;
  while (1)
  {
    if (v17)
    {
      _BitScanForward64(&v18, v17);
      uint64_t v59 = (v17 - 1) & v17;
      int64_t v58 = v13;
      unint64_t v19 = v18 | (v13 << 6);
      uint64_t v20 = v60;
LABEL_7:
      uint64_t v21 = v64;
      uint64_t v22 = *(void *)(v64 + 48);
      uint64_t v23 = *(void *)(v22 + 16 * v19 + 8);
      uint64_t v24 = (uint64_t)v63;
      *uint64_t v63 = *(void *)(v22 + 16 * v19);
      *(void *)(v24 + 8) = v23;
      uint64_t v25 = TupleTypeMetadata2;
      (*(void (**)(uint64_t, unint64_t, uint64_t))(v20 + 16))(v24 + *(int *)(TupleTypeMetadata2 + 48), *(void *)(v21 + 56) + *(void *)(v20 + 72) * v19, v57);
      __swift_storeEnumTagSinglePayload(v24, 0, 1, v25);
      swift_bridgeObjectRetain(v23);
      goto LABEL_15;
    }
    int64_t v26 = v13 + 1;
    uint64_t v20 = v60;
    if (__OFADD__(1, v13)) {
      BUG();
    }
    if (v26 >= v61)
    {
      int64_t v26 = v13;
      uint64_t v25 = TupleTypeMetadata2;
      uint64_t v24 = (uint64_t)v63;
    }
    else
    {
      unint64_t i = *(void *)(v64 + 8 * v26 + 64);
      if (i)
      {
        int64_t v28 = v13 + 1;
LABEL_12:
        _BitScanForward64(&v29, i);
        uint64_t v59 = i & (i - 1);
        int64_t v58 = v28;
        unint64_t v19 = v29 + (v28 << 6);
        goto LABEL_7;
      }
      if (v13 + 2 < v61)
      {
        unint64_t i = *(void *)(v64 + 8 * v26 + 72);
        if (i)
        {
          int64_t v28 = v13 + 2;
          goto LABEL_12;
        }
        int64_t v28 = v13 + 3;
        if (v13 + 3 < v61)
        {
          for (unint64_t i = *(void *)(v64 + 8 * v26 + 80); !i; unint64_t i = *(void *)(v64 + 8 * v28 + 64))
          {
            if (__OFADD__(1, v28++)) {
              BUG();
            }
            if (v28 >= v61)
            {
              int64_t v26 = v55;
              goto LABEL_28;
            }
          }
          goto LABEL_12;
        }
        int64_t v26 = v13 + 2;
      }
LABEL_28:
      uint64_t v25 = TupleTypeMetadata2;
      uint64_t v24 = (uint64_t)v63;
    }
    __swift_storeEnumTagSinglePayload(v24, 1, 1, v25);
    int64_t v58 = v26;
    uint64_t v59 = 0;
LABEL_15:
    uint64_t v30 = v24;
    uint64_t v31 = v53;
    (*(void (**)(uint64_t *, uint64_t, uint64_t))(v52 + 32))(v53, v30, v51);
    int EnumTagSinglePayload = __swift_getEnumTagSinglePayload((uint64_t)v31, 1, v25);
    uint64_t v33 = v50;
    if (EnumTagSinglePayload == 1) {
      break;
    }
    uint64_t v49 = 0;
    uint64_t v34 = *v31;
    uint64_t v35 = v31[1];
    uint64_t v36 = (char *)v31 + *(int *)(v25 + 48);
    uint64_t v37 = v57;
    (*(void (**)(unsigned char *, char *, uint64_t))(v60 + 32))(v50, v36, v57);
    uint64_t v38 = MLDataValueConvertible.featureValue.getter(v37, v54);
    uint64_t v39 = v34;
    char v40 = v35;
    uint64_t v41 = v35;
    uint64_t v42 = v49;
    CMLDictionary.add(key:value:)(v39, v41, v38);
    if (v42)
    {
      swift_bridgeObjectRelease(v40);
      swift_release();
      swift_unexpectedError(v42, "CreateML/DictionaryType.swift", 29, 1);
      BUG();
    }
    (*(void (**)(unsigned char *, uint64_t))(v60 + 8))(v33, v57);
    swift_bridgeObjectRelease(v40);
    swift_release();
    int64_t v13 = v58;
    unint64_t v17 = v59;
  }
  swift_release();
  type metadata accessor for CMLFeatureValue();
  uint64_t v44 = inited;
  swift_retain();
  uint64_t v45 = CMLFeatureValue.__allocating_init(_:)(v44);
  swift_setDeallocating(v44);
  tc_v1_release(*(void *)(v44 + 16));
  return v45;
}

uint64_t specialized _NativeDictionary.index(after:)(int64_t a1, int a2, char a3, uint64_t a4)
{
  if (a3) {
    BUG();
  }
  uint64_t v4 = -1 << *(unsigned char *)(a4 + 32);
  if (a1 < 0 || -v4 <= a1) {
    BUG();
  }
  uint64_t v5 = *(void *)(a4 + 8 * ((unint64_t)a1 >> 6) + 64);
  if (!_bittest64(&v5, a1)) {
    BUG();
  }
  if (*(_DWORD *)(a4 + 36) != a2) {
    BUG();
  }
  return _HashTable.occupiedBucket(after:)(a1, a4 + 64, ~v4);
}

uint64_t sub_1ECD15()
{
  return swift_deallocObject(v0, 56, 7);
}

uint64_t partial apply for closure #1 in Dictionary<>.dataValue.getter(uint64_t a1)
{
  return closure #1 in Dictionary<>.dataValue.getter(a1, v1[2], v1[3], v1[4], v1[5], v1[6]);
}

uint64_t base witness table accessor for Equatable in MLDataValue.DictionaryType.Index()
{
  return lazy protocol witness table accessor for type MLDataValue.DictionaryType.Index and conformance MLDataValue.DictionaryType.Index();
}

uint64_t lazy protocol witness table accessor for type MLDataValue.DictionaryType.Index and conformance MLDataValue.DictionaryType.Index()
{
  uint64_t result = lazy protocol witness table cache variable for type MLDataValue.DictionaryType.Index and conformance MLDataValue.DictionaryType.Index;
  if (!lazy protocol witness table cache variable for type MLDataValue.DictionaryType.Index and conformance MLDataValue.DictionaryType.Index)
  {
    uint64_t result = swift_getWitnessTable(&protocol conformance descriptor for MLDataValue.DictionaryType.Index, &type metadata for MLDataValue.DictionaryType.Index);
    lazy protocol witness table cache variable for type MLDataValue.DictionaryType.Index and conformance MLDataValue.DictionaryType.Index = result;
  }
  return result;
}

{
  uint64_t result;

  uint64_t result = lazy protocol witness table cache variable for type MLDataValue.DictionaryType.Index and conformance MLDataValue.DictionaryType.Index;
  if (!lazy protocol witness table cache variable for type MLDataValue.DictionaryType.Index and conformance MLDataValue.DictionaryType.Index)
  {
    uint64_t result = swift_getWitnessTable(&protocol conformance descriptor for MLDataValue.DictionaryType.Index, &type metadata for MLDataValue.DictionaryType.Index);
    lazy protocol witness table cache variable for type MLDataValue.DictionaryType.Index and conformance MLDataValue.DictionaryType.Index = result;
  }
  return result;
}

uint64_t base witness table accessor for Sequence in MLDataValue.DictionaryType()
{
  return lazy protocol witness table accessor for type MLDataValue.DictionaryType and conformance MLDataValue.DictionaryType();
}

uint64_t lazy protocol witness table accessor for type MLDataValue.DictionaryType and conformance MLDataValue.DictionaryType()
{
  uint64_t result = lazy protocol witness table cache variable for type MLDataValue.DictionaryType and conformance MLDataValue.DictionaryType;
  if (!lazy protocol witness table cache variable for type MLDataValue.DictionaryType and conformance MLDataValue.DictionaryType)
  {
    uint64_t result = swift_getWitnessTable(&protocol conformance descriptor for MLDataValue.DictionaryType, &type metadata for MLDataValue.DictionaryType);
    lazy protocol witness table cache variable for type MLDataValue.DictionaryType and conformance MLDataValue.DictionaryType = result;
  }
  return result;
}

uint64_t associated type witness table accessor for Collection.Index : Comparable in MLDataValue.DictionaryType()
{
  return lazy protocol witness table accessor for type MLDataValue.DictionaryType.Index and conformance MLDataValue.DictionaryType.Index();
}

uint64_t associated type witness table accessor for Collection.Indices : Collection in MLDataValue.DictionaryType()
{
  return lazy protocol witness table accessor for type FullyConnectedNetworkClassifier<Float, String> and conformance FullyConnectedNetworkClassifier<A, B>(&lazy protocol witness table cache variable for type DefaultIndices<MLDataValue.DictionaryType> and conformance DefaultIndices<A>, &demangling cache variable for type metadata for DefaultIndices<MLDataValue.DictionaryType>, (uint64_t)&protocol conformance descriptor for DefaultIndices<A>);
}

uint64_t associated type witness table accessor for Collection.SubSequence : Collection in MLDataValue.DictionaryType()
{
  return lazy protocol witness table accessor for type FullyConnectedNetworkClassifier<Float, String> and conformance FullyConnectedNetworkClassifier<A, B>(&lazy protocol witness table cache variable for type Slice<MLDataValue.DictionaryType> and conformance Slice<A>, &demangling cache variable for type metadata for Slice<MLDataValue.DictionaryType>, (uint64_t)&protocol conformance descriptor for Slice<A>);
}

uint64_t associated type witness table accessor for Sequence.Iterator : IteratorProtocol in MLDataValue.DictionaryType()
{
  return lazy protocol witness table accessor for type FullyConnectedNetworkClassifier<Float, String> and conformance FullyConnectedNetworkClassifier<A, B>(&lazy protocol witness table cache variable for type IndexingIterator<MLDataValue.DictionaryType> and conformance IndexingIterator<A>, &demangling cache variable for type metadata for IndexingIterator<MLDataValue.DictionaryType>, (uint64_t)&protocol conformance descriptor for IndexingIterator<A>);
}

uint64_t initializeBufferWithCopyOfBuffer for MLDataValue.DictionaryType.Index(uint64_t a1, uint64_t a2)
{
  return initializeBufferWithCopyOfBuffer for MLDataValue.DictionaryType.Index(a1, a2);
}

{
  uint64_t v2;
  uint64_t v3;
  char v4;

  uint64_t v2 = *(void *)a2;
  int64_t v3 = *(void *)(a2 + 8);
  uint64_t v4 = *(unsigned char *)(a2 + 16);
  outlined copy of [A : B].Index._Variant<A, B>(*(void *)a2, v3, v4);
  *(void *)a1 = v2;
  *(void *)(a1 + 8) = v3;
  *(unsigned char *)(a1 + 16) = v4;
  return a1;
}

uint64_t destroy for MLDataValue.DictionaryType.Index(uint64_t a1)
{
  return outlined consume of [MLDataValue : MLDataValue].Index._Variant(*(void *)a1, *(void *)(a1 + 8), *(_DWORD *)(a1 + 16));
}

uint64_t assignWithCopy for MLDataValue.DictionaryType.Index(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)a2;
  uint64_t v4 = *(void *)(a2 + 8);
  char v5 = *(unsigned char *)(a2 + 16);
  outlined copy of [A : B].Index._Variant<A, B>(*(void *)a2, v4, v5);
  uint64_t v6 = *(void *)a1;
  uint64_t v7 = *(void *)(a1 + 8);
  *(void *)a1 = v3;
  *(void *)(a1 + 8) = v4;
  int v8 = *(_DWORD *)(a1 + 16);
  *(unsigned char *)(a1 + 16) = v5;
  outlined consume of [MLDataValue : MLDataValue].Index._Variant(v6, v7, v8);
  return a1;
}

uint64_t assignWithTake for MLDataValue.DictionaryType.Index(uint64_t a1, uint64_t a2)
{
  char v3 = *(unsigned char *)(a2 + 16);
  uint64_t v4 = *(void *)a1;
  uint64_t v5 = *(void *)(a1 + 8);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  int v6 = *(_DWORD *)(a1 + 16);
  *(unsigned char *)(a1 + 16) = v3;
  outlined consume of [MLDataValue : MLDataValue].Index._Variant(v4, v5, v6);
  return a1;
}

ValueMetadata *type metadata accessor for MLDataValue.DictionaryType.Index()
{
  return &type metadata for MLDataValue.DictionaryType.Index;
}

uint64_t associated type witness table accessor for Sequence.Iterator : IteratorProtocol in CMLDictionary()
{
  return lazy protocol witness table accessor for type FullyConnectedNetworkClassifier<Float, String> and conformance FullyConnectedNetworkClassifier<A, B>(&lazy protocol witness table cache variable for type IndexingIterator<CMLDictionary> and conformance IndexingIterator<A>, &demangling cache variable for type metadata for IndexingIterator<CMLDictionary>, (uint64_t)&protocol conformance descriptor for IndexingIterator<A>);
}

uint64_t base witness table accessor for Sequence in CMLDictionary()
{
  return lazy protocol witness table accessor for type CMLDictionary and conformance CMLDictionary(&lazy protocol witness table cache variable for type CMLDictionary and conformance CMLDictionary, (uint64_t)&protocol conformance descriptor for CMLDictionary);
}

uint64_t associated type witness table accessor for Collection.SubSequence : Collection in CMLDictionary()
{
  return lazy protocol witness table accessor for type FullyConnectedNetworkClassifier<Float, String> and conformance FullyConnectedNetworkClassifier<A, B>(&lazy protocol witness table cache variable for type Slice<CMLDictionary> and conformance Slice<A>, &demangling cache variable for type metadata for Slice<CMLDictionary>, (uint64_t)&protocol conformance descriptor for Slice<A>);
}

uint64_t base witness table accessor for Collection in CMLDictionary()
{
  return lazy protocol witness table accessor for type CMLDictionary and conformance CMLDictionary(&lazy protocol witness table cache variable for type CMLDictionary and conformance CMLDictionary, (uint64_t)&protocol conformance descriptor for CMLDictionary);
}

uint64_t associated type witness table accessor for Collection.SubSequence : BidirectionalCollection in CMLDictionary()
{
  return lazy protocol witness table accessor for type Slice<CMLDictionary> and conformance <> Slice<A>(&lazy protocol witness table cache variable for type Slice<CMLDictionary> and conformance <> Slice<A>, &lazy protocol witness table cache variable for type CMLDictionary and conformance CMLDictionary, (uint64_t)&protocol conformance descriptor for CMLDictionary, (uint64_t)&protocol conformance descriptor for <> Slice<A>);
}

uint64_t base witness table accessor for BidirectionalCollection in CMLDictionary()
{
  return lazy protocol witness table accessor for type CMLDictionary and conformance CMLDictionary(&lazy protocol witness table cache variable for type CMLDictionary and conformance CMLDictionary, (uint64_t)&protocol conformance descriptor for CMLDictionary);
}

uint64_t associated type witness table accessor for Collection.SubSequence : RandomAccessCollection in CMLDictionary()
{
  return lazy protocol witness table accessor for type Slice<CMLDictionary> and conformance <> Slice<A>(&lazy protocol witness table cache variable for type Slice<CMLDictionary> and conformance <> Slice<A>, &lazy protocol witness table cache variable for type CMLDictionary and conformance CMLDictionary, (uint64_t)&protocol conformance descriptor for CMLDictionary, (uint64_t)&protocol conformance descriptor for <> Slice<A>);
}

uint64_t lazy protocol witness table accessor for type Slice<CMLDictionary> and conformance <> Slice<A>(uint64_t *a1, uint64_t *a2, uint64_t a3, uint64_t a4)
{
  uint64_t result = *a1;
  if (!*a1)
  {
    uint64_t v7 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for Slice<CMLDictionary>);
    lazy protocol witness table accessor for type CMLDictionary and conformance CMLDictionary(a2, a3);
    uint64_t result = swift_getWitnessTable(a4, v7);
    *a1 = result;
  }
  return result;
}

uint64_t lazy protocol witness table accessor for type CMLDictionary and conformance CMLDictionary(uint64_t *a1, uint64_t a2)
{
  uint64_t result = *a1;
  if (!*a1)
  {
    uint64_t v3 = type metadata accessor for CMLDictionary();
    uint64_t result = swift_getWitnessTable(a2, v3);
    *a1 = result;
  }
  return result;
}

uint64_t dynamic_cast_existential_1_unconditional(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (!swift_conformsToProtocol2(a2, a3)) {
    BUG();
  }
  return a1;
}

void *__swift_allocate_boxed_opaque_existential_1(void *a1)
{
  uint64_t v1 = a1;
  uint64_t v2 = a1[3];
  if ((*(unsigned char *)(*(void *)(v2 - 8) + 82) & 2) != 0)
  {
    void *v1 = swift_allocBox(v2);
    return (void *)v3;
  }
  return v1;
}

uint64_t protocol witness for Collection._customLastIndexOfEquatableElement(_:) in conformance MLDataValue.DictionaryType()
{
  return protocol witness for Collection._customIndexOfEquatableElement(_:) in conformance MLDataValue.DictionaryType();
}

uint64_t protocol witness for RandomAccessCollection.distance(from:to:) in conformance CMLDictionary(uint64_t *a1, uint64_t *a2)
{
  return protocol witness for BidirectionalCollection.distance(from:to:) in conformance CMLDictionary(a1, a2);
}

uint64_t protocol witness for RandomAccessCollection.index(_:offsetBy:) in conformance CMLDictionary(uint64_t *a1, uint64_t a2)
{
  return protocol witness for BidirectionalCollection.index(_:offsetBy:) in conformance CMLDictionary(a1, a2);
}

uint64_t protocol witness for Collection._customLastIndexOfEquatableElement(_:) in conformance CMLDictionary()
{
  return protocol witness for Collection._customIndexOfEquatableElement(_:) in conformance MLDataTable.ColumnNames();
}

void *_sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSaySdG_Sis5NeverOTg5058_s8CreateML11randomSplit7indices11proportions9generatorSayi7SiGGAF_i15SdGxztKSGRzlFSiL6XEfU1_SaySiGTf1cn_n(uint64_t a1, uint64_t a2, __m128d a3)
{
  int64_t v3 = *(void *)(a1 + 16);
  if (v3)
  {
    uint64_t v4 = 0;
    uint64_t v21 = *(void *)(a1 + 16);
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v3, 0);
    uint64_t v5 = 0x7FF0000000000000;
    uint64_t v6 = v21;
    uint64_t v7 = a1;
    uint64_t v8 = a2;
    char v9 = _swiftEmptyArrayStorage;
    __m128d v10 = (__m128d)xmmword_3474C0;
    __m128d v11 = (__m128d)xmmword_34EAE0;
    do
    {
      a3.f64[0] = (double)(int)*(void *)(v8 + 16) * *(double *)(v7 + 8 * v4 + 32);
      __m128d v12 = _mm_or_pd(_mm_and_pd(a3, v10), v11);
      v12.f64[0] = v12.f64[0] + a3.f64[0];
      a3 = _mm_round_sd(a3, v12, 11);
      if ((~*(void *)&a3.f64[0] & v5) == 0) {
        BUG();
      }
      if (a3.f64[0] <= -9.223372036854778e18) {
        BUG();
      }
      if (a3.f64[0] >= 9.223372036854776e18) {
        BUG();
      }
      unint64_t v18 = v9;
      unint64_t v13 = v9[2];
      unint64_t v14 = v9[3];
      int64_t v15 = v13 + 1;
      if (v14 >> 1 <= v13)
      {
        uint64_t v16 = v5;
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v14 >= 2, v15, 1);
        int64_t v15 = v13 + 1;
        a3 = (__m128d)*(unint64_t *)&a3.f64[0];
        __m128d v11 = (__m128d)xmmword_34EAE0;
        __m128d v10 = (__m128d)xmmword_3474C0;
        uint64_t v5 = v16;
        uint64_t v6 = v21;
        uint64_t v7 = a1;
        uint64_t v8 = a2;
        char v9 = v18;
      }
      ++v4;
      v9[2] = v15;
      v9[v13 + 4] = (int)a3.f64[0];
    }
    while (v6 != v4);
    swift_bridgeObjectRelease(v8);
  }
  else
  {
    swift_bridgeObjectRelease(a2);
    return _swiftEmptyArrayStorage;
  }
  return v9;
}

void *_sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSay8CreateML11MLDataValueO_SitG_Sis5NeverOTg503_s8d4ML11fg20OS2iIgnyd_AC_SitSis5h126OIegnrzr_TR03_s8a68ML24stratifiedSplitGenerator11proportions9generator9dataTable2onAA06c31I0VSaySdG_xzAHSStKSGRzlFSiAA0K5D11O_N16XEfU0_Tf3nnnpf_nTf1cn_n(uint64_t a1)
{
  int64_t v1 = *(void *)(a1 + 16);
  if (!v1) {
    return _swiftEmptyArrayStorage;
  }
  specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v1, 0);
  uint64_t result = _swiftEmptyArrayStorage;
  int64_t v3 = (uint64_t *)(a1 + 56);
  do
  {
    uint64_t v4 = *v3;
    uint64_t v7 = result;
    unint64_t v5 = result[2];
    int64_t v6 = v5 + 1;
    if (result[3] >> 1 <= v5)
    {
      specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(result[3] >= 2uLL, v6, 1);
      int64_t v6 = v5 + 1;
      uint64_t result = v7;
    }
    result[2] = v6;
    result[v5 + 4] = v4;
    v3 += 4;
    --v1;
  }
  while (v1);
  return result;
}

void *_sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSay8CreateML11MLDataValueOG_AHs5NeverOTg503_s8d81ML34stratifiedSplitBySequenceGenerator11proportions9generator9dataTable2by2onAA06f30K0VSaySdG_xzAIS2StKSGRzlFAA0N5G8OALXEfU_AF0F5TableVS2STf1cn_n(uint64_t a1, uint64_t a2, int a3, uint64_t a4, void *a5, uint64_t a6, void *a7)
{
  uint64_t v28 = a6;
  uint64_t v35 = a5;
  uint64_t v29 = a4;
  int v9 = a3;
  LOBYTE(v9) = a3 & 1;
  int64_t v10 = *(void *)(a1 + 16);
  if (v10)
  {
    uint64_t v36 = a2;
    uint64_t v34 = v7;
    uint64_t v33 = _swiftEmptyArrayStorage;
    int64_t v30 = v10;
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v10, 0);
    __m128d v11 = _swiftEmptyArrayStorage;
    __m128d v12 = (unsigned __int8 *)(a1 + 48);
    int v37 = v9;
    int v32 = v9;
    while (1)
    {
      *(void *)&long long v31 = v11;
      __m128d v11 = (void *)*((void *)v12 - 2);
      unint64_t v13 = (void *)*((void *)v12 - 1);
      unsigned __int8 v14 = *v12;
      v26[0] = v11;
      v26[1] = v13;
      unsigned __int8 v27 = v14;
      char v15 = v14;
      outlined copy of MLDataValue(v11, v13, v14);
      uint64_t v16 = v34;
      closure #1 in stratifiedSplitBySequenceGenerator<A>(proportions:generator:dataTable:by:on:)((uint64_t)v26, v36, v32, v29, v35, v28, a7);
      uint64_t v34 = v16;
      if (v16) {
        break;
      }
      outlined consume of MLDataValue(v11, v13, v15);
      long long v17 = v24;
      char v18 = v25;
      __m128d v11 = (void *)v31;
      uint64_t v33 = (void *)v31;
      unint64_t v19 = *(void *)(v31 + 16);
      unint64_t v20 = *(void *)(v31 + 24);
      if (v20 >> 1 <= v19)
      {
        char v38 = v25;
        long long v31 = v24;
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v20 >= 2, v19 + 1, 1);
        char v18 = v38;
        long long v17 = v31;
        __m128d v11 = v33;
      }
      v11[2] = v19 + 1;
      uint64_t v21 = 3 * v19;
      *(_OWORD *)&v11[v21 + 4] = v17;
      LOBYTE(v11[v21 + 6]) = v18;
      v12 += 24;
      if (!--v30)
      {
        outlined consume of Result<_DataTable, Error>(v36, (_BYTE)v37 != 0);
        goto LABEL_10;
      }
    }
    char v22 = (_BYTE)v37 != 0;
    outlined consume of MLDataValue(v11, v13, v15);
    swift_release();
    outlined consume of Result<_DataTable, Error>(v36, v22);
    swift_bridgeObjectRelease(a7);
    swift_bridgeObjectRelease(v35);
  }
  else
  {
    outlined consume of Result<_DataTable, Error>(a2, (_BYTE)v9 != 0);
    __m128d v11 = _swiftEmptyArrayStorage;
LABEL_10:
    swift_bridgeObjectRelease(a7);
    swift_bridgeObjectRelease(v35);
  }
  return v11;
}

Swift::Int __swiftcall timestampSeed()()
{
  v8[0] = v0;
  uint64_t v1 = type metadata accessor for Date(0);
  uint64_t v2 = *(void *)(v1 - 8);
  int64_t v3 = *(void *)(v2 + 64);
  uint64_t v4 = alloca(v3);
  unint64_t v5 = alloca(v3);
  Date.init()(0);
  v8[0] = Date.timeIntervalSince1970.getter(0);
  (*(void (**)(double *, uint64_t))(v2 + 8))(v8, v1);
  double v6 = v8[0] * 1000.0;
  if ((~COERCE__INT64(v8[0] * 1000.0) & 0x7FF0000000000000) == 0) {
    BUG();
  }
  if (v6 <= -9.223372036854778e18) {
    BUG();
  }
  if (v6 >= 9.223372036854776e18) {
    BUG();
  }
  return (int)v6;
}

uint64_t specialized Sequence<>.min()(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 16);
  if (!v1) {
    return 0;
  }
  double v2 = *(double *)(a1 + 32);
  if (v1 == 1)
  {
    double v3 = *(double *)(a1 + 32);
  }
  else
  {
    uint64_t v5 = 0;
    do
    {
      double v3 = fmin(*(double *)(a1 + 8 * v5++ + 40), v2);
      double v2 = v3;
    }
    while (v1 - 1 != v5);
  }
  return *(void *)&v3;
}

void *stratifiedSplitGenerator<A>(proportions:generator:fileURLAndLabel:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v72 = a5;
  uint64_t v73 = a4;
  uint64_t v74 = a2;
  uint64_t v75 = a1;
  uint64_t v79 = type metadata accessor for URL(0);
  uint64_t v7 = *(void *)(v79 - 8);
  int64_t v8 = *(void *)(v7 + 64);
  int v9 = alloca(v8);
  int64_t v10 = alloca(v8);
  swift_bridgeObjectRetain(a3);
  uint64_t v91 = specialized _copyCollectionToContiguousArray<A>(_:)(a3);
  specialized MutableCollection<>.sort(by:)(&v91);
  uint64_t v85 = v5;
  if (v5)
  {
    swift_release();
    BUG();
  }
  swift_bridgeObjectRelease(a3);
  __m128d v11 = v91;
  uint64_t v78 = v91[2];
  if (v78)
  {
    uint64_t v77 = v91 + 4;
    __m128d v12 = _swiftEmptyArrayStorage;
    uint64_t v76 = a3;
    unint64_t v13 = 0;
    uint64_t v69 = &v64;
    uint64_t v87 = v7;
    char v80 = v91;
    while (1)
    {
      if (v13 >= v11[2]) {
        BUG();
      }
      uint64_t v14 = v77[2 * v13];
      uint64_t v15 = v77[2 * v13 + 1];
      swift_bridgeObjectRetain_n(v15, 2);
      uint64_t v84 = v14;
      uint64_t v16 = specialized Dictionary.subscript.getter(v14, v15, v76);
      uint64_t v90 = v15;
      swift_bridgeObjectRelease(v15);
      if (!v16) {
        BUG();
      }
      uint64_t v86 = v16;
      long long v17 = specialized _copyCollectionToContiguousArray<A>(_:)(0, *(void *)(v16 + 16));
      uint64_t v18 = v75;
      uint64_t v19 = v85;
      uint64_t v20 = randomSplit<A>(indices:proportions:generator:)((uint64_t)v17, v75, v74, v73, v72);
      uint64_t v85 = v19;
      if (v19) {
        break;
      }
      uint64_t v88 = v20;
      unint64_t v71 = v13;
      swift_release();
      uint64_t v70 = *(void *)(v18 + 16);
      if (v70)
      {
        unint64_t v21 = 0;
        uint64_t v22 = v87;
        uint64_t v23 = v12;
        uint64_t v24 = v90;
        do
        {
          BOOL v25 = v23[2] <= v21;
          unint64_t v82 = v21;
          if (v25)
          {
            uint64_t v27 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [URL]);
            uint64_t v28 = Dictionary.init(dictionaryLiteral:)(_swiftEmptyArrayStorage, &type metadata for String, v27, &protocol witness table for String);
            if (!swift_isUniquelyReferenced_nonNull_native(v23)) {
              uint64_t v23 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v23[2] + 1, 1, (uint64_t)v23);
            }
            unint64_t v29 = v23[2];
            if (v23[3] >> 1 <= v29) {
              uint64_t v23 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(v23[3] >= 2uLL, v29 + 1, 1, (uint64_t)v23);
            }
            uint64_t v26 = v88;
            v23[2] = v29 + 1;
            v23[v29 + 4] = v28;
            uint64_t v22 = v87;
            uint64_t v24 = v90;
            unint64_t v21 = v82;
          }
          else
          {
            uint64_t v26 = v88;
          }
          if (v21 >= *(void *)(v26 + 16)) {
            BUG();
          }
          uint64_t v30 = *(void *)(v26 + 8 * v21 + 32);
          int64_t v31 = *(void *)(v30 + 16);
          uint64_t v89 = _swiftEmptyArrayStorage;
          if (v31)
          {
            uint64_t v83 = v23;
            uint64_t v91 = _swiftEmptyArrayStorage;
            int64_t v32 = v31;
            swift_bridgeObjectRetain(v30);
            int64_t v66 = v32;
            specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v32, 0);
            uint64_t v89 = v91;
            uint64_t v67 = (*(unsigned __int8 *)(v22 + 80) + 32) & ~*(unsigned __int8 *)(v22 + 80);
            uint64_t v68 = v67 + v86;
            uint64_t v33 = 0;
            uint64_t v34 = v79;
            uint64_t v65 = v30;
            do
            {
              uint64_t v35 = *(void *)(v30 + 8 * v33 + 32);
              if (v35 < 0) {
                BUG();
              }
              if ((unint64_t)v35 >= *(void *)(v86 + 16)) {
                BUG();
              }
              uint64_t v81 = *(void *)(v22 + 72);
              uint64_t v36 = v69;
              (*(void (**)(uint64_t *, uint64_t, uint64_t))(v22 + 16))(v69, v68 + v81 * v35, v34);
              int v37 = v89;
              uint64_t v91 = v89;
              uint64_t v38 = v22;
              unint64_t v39 = v89[2];
              unint64_t v40 = v89[3];
              int64_t v41 = v39 + 1;
              if (v40 >> 1 <= v39)
              {
                uint64_t v89 = (void *)(v39 + 1);
                specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v40 >= 2, v41, 1);
                int64_t v41 = (int64_t)v89;
                uint64_t v38 = v87;
                uint64_t v34 = v79;
                int v37 = v91;
              }
              ++v33;
              v37[2] = v41;
              uint64_t v89 = v37;
              uint64_t v42 = (char *)v37 + v67 + v81 * v39;
              uint64_t v22 = v38;
              (*(void (**)(char *, uint64_t *, uint64_t))(v38 + 32))(v42, v36, v34);
              uint64_t v30 = v65;
            }
            while (v66 != v33);
            swift_bridgeObjectRelease(v65);
            uint64_t v23 = v83;
            uint64_t v24 = v90;
          }
          swift_bridgeObjectRetain(v24);
          if (!swift_isUniquelyReferenced_nonNull_native(v23)) {
            uint64_t v23 = specialized _ArrayBuffer._consumeAndCreateNew()((uint64_t)v23);
          }
          if (v82 >= v23[2]) {
            BUG();
          }
          unint64_t v43 = v82;
          LOBYTE(v81) = swift_isUniquelyReferenced_nonNull_native(v23[v82 + 4]);
          uint64_t v91 = (void *)v23[v43 + 4];
          uint64_t v44 = v91;
          uint64_t v83 = v23;
          v23[v43 + 4] = 0x8000000000000000;
          unint64_t v46 = specialized __RawDictionaryStorage.find<A>(_:)(v84, v24);
          BOOL v47 = (v45 & 1) == 0;
          BOOL v48 = __OFADD__(v44[2], v47);
          Swift::Int v49 = v44[2] + v47;
          if (v48) {
            BUG();
          }
          char v50 = v45;
          __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _NativeDictionary<String, [URL]>);
          if (_NativeDictionary.ensureUnique(isUnique:capacity:)(v81, v49))
          {
            unint64_t v46 = specialized __RawDictionaryStorage.find<A>(_:)(v84, v90);
            if ((v50 & 1) != (v51 & 1))
            {
              KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(&type metadata for String);
              BUG();
            }
          }
          uint64_t v52 = v91;
          if (v50)
          {
            uint64_t v53 = v91[7];
            swift_bridgeObjectRelease(*(void *)(v53 + 8 * v46));
            *(void *)(v53 + 8 * v46) = v89;
          }
          else
          {
            v91[(v46 >> 6) + 8] |= 1 << v46;
            uint64_t v54 = v52[6];
            uint64_t v55 = 16 * v46;
            *(void *)(v54 + v55) = v84;
            char v56 = v90;
            *(void *)(v54 + v55 + 8) = v90;
            *(void *)(v52[7] + 8 * v46) = v89;
            uint64_t v57 = v52[2];
            BOOL v48 = __OFADD__(1, v57);
            uint64_t v58 = v57 + 1;
            if (v48) {
              BUG();
            }
            v52[2] = v58;
            swift_bridgeObjectRetain(v56);
          }
          unint64_t v59 = v82 + 1;
          uint64_t v23 = v83;
          uint64_t v60 = v83[v82 + 4];
          v83[v82 + 4] = v52;
          uint64_t v61 = v90;
          swift_bridgeObjectRelease(v90);
          swift_bridgeObjectRelease(v60);
          unint64_t v21 = v59;
          BOOL v62 = v59 == v70;
          uint64_t v22 = v87;
          uint64_t v24 = v61;
        }
        while (!v62);
      }
      else
      {
        uint64_t v23 = v12;
        LOBYTE(v24) = v90;
      }
      __m128d v12 = v23;
      unint64_t v13 = v71 + 1;
      swift_bridgeObjectRelease(v24);
      swift_bridgeObjectRelease(v86);
      swift_bridgeObjectRelease(v88);
      __m128d v11 = v80;
      if (v13 == v78)
      {
        swift_release();
        return v12;
      }
    }
    swift_bridgeObjectRelease((_BYTE)v12);
    swift_release();
    swift_bridgeObjectRelease(v90);
    swift_bridgeObjectRelease(v86);
    return (void *)swift_release();
  }
  else
  {
    swift_release();
    return _swiftEmptyArrayStorage;
  }
}

uint64_t randomSplit<A>(indices:proportions:generator:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  if (!*(void *)(a2 + 16))
  {
    uint64_t v10 = lazy protocol witness table accessor for type MLCreateError and conformance MLCreateError();
    swift_allocError(&type metadata for MLCreateError, v10, 0, 0);
    *(void *)uint64_t v11 = 0xD000000000000024;
    uint64_t v15 = "-zero proportion is required.";
    goto LABEL_16;
  }
  int64_t v67 = *(void *)(a2 + 16);
  double v8 = COERCE_DOUBLE(specialized Sequence<>.min()(a2));
  if (v9) {
    BUG();
  }
  if (v8 < 0.0)
  {
    uint64_t v10 = lazy protocol witness table accessor for type MLCreateError and conformance MLCreateError();
    swift_allocError(&type metadata for MLCreateError, v10, 0, 0);
    *(void *)uint64_t v11 = 0xD00000000000002ALL;
    uint64_t v15 = "";
LABEL_16:
    *(void *)(v11 + 8) = (unint64_t)v15 | 0x8000000000000000;
    *(_OWORD *)(v11 + 16) = 0;
    *(_OWORD *)(v11 + 32) = 0;
    *(unsigned char *)(v11 + 48) = 0;
    return swift_willThrow(&type metadata for MLCreateError, v10, v11, v12, v13, v14);
  }
  double v16 = COERCE_DOUBLE(specialized Sequence<>.max()(a2));
  if (v17) {
    BUG();
  }
  if (v16 <= 0.0)
  {
    uint64_t v10 = lazy protocol witness table accessor for type MLCreateError and conformance MLCreateError();
    swift_allocError(&type metadata for MLCreateError, v10, 0, 0);
    *(void *)uint64_t v11 = 0xD00000000000002DLL;
    uint64_t v15 = "e proportions are allowed.";
    goto LABEL_16;
  }
  unint64_t v63 = *(void *)(a1 + 16);
  uint64_t v18 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Range<Int>);
  uint64_t v19 = lazy protocol witness table accessor for type Range<Int> and conformance <> Range<A>();
  double v20 = 0.0;
  uint64_t v64 = Sequence.shuffled<A>(using:)(a3, v18, a4, v19, a5);
  uint64_t v21 = 0;
  do
    double v20 = v20 + *(double *)(a2 + 8 * v21++ + 32);
  while (v67 != v21);
  uint64_t v22 = 0;
  double v68 = v20;
  specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v67, 0);
  uint64_t v23 = a2;
  int64_t v24 = v67;
  unint64_t v25 = _swiftEmptyArrayStorage[2];
  do
  {
    double v26 = *(double *)(v23 + 8 * v22 + 32);
    int64_t v27 = v25 + 1;
    if (_swiftEmptyArrayStorage[3] >> 1 <= v25)
    {
      specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(_swiftEmptyArrayStorage[3] >= 2uLL, v27, 1);
      double v20 = v68;
      int64_t v27 = v25 + 1;
      uint64_t v23 = a2;
      int64_t v24 = v67;
    }
    ++v22;
    _swiftEmptyArrayStorage[2] = v27;
    *(double *)&_swiftEmptyArrayStorage[v25 + 4] = v26 / v20;
    unint64_t v25 = v27;
  }
  while (v24 != v22);
  int64_t v71 = v27;
  swift_retain();
  uint64_t v29 = 0;
  uint64_t v30 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, 1, 1, (uint64_t)_swiftEmptyArrayStorage);
  uint64_t v31 = v30[2];
  uint64_t v32 = 8 * v31;
  uint64_t v33 = &_swiftEmptyArrayStorage[4];
  do
  {
    if (v29 + v31) {
      __m128d v34 = (__m128d)*(unint64_t *)((char *)&v30[v29 + 3] + v32);
    }
    else {
      __m128d v34 = 0;
    }
    double v35 = *(double *)&v33[v29];
    uint64_t v36 = v31 + v29 + 1;
    if (v30[3] >> 1 <= (unint64_t)(v29 + v31))
    {
      char v37 = v30[3] >= 2uLL;
      uint64_t v38 = (uint64_t)v30;
      uint64_t v69 = v31;
      uint64_t v74 = v32;
      unint64_t v39 = v33;
      unint64_t v40 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(v37, v31 + v29 + 1, 1, v38);
      __m128d v34 = (__m128d)*(unint64_t *)&v34.f64[0];
      uint64_t v33 = v39;
      uint64_t v32 = v74;
      uint64_t v31 = v69;
      int64_t v27 = v71;
      uint64_t v30 = v40;
    }
    v30[2] = v36;
    *(double *)((char *)&v30[v29++ + 4] + v32) = v35 + v34.f64[0];
  }
  while (v27 != v29);
  swift_release_n(_swiftEmptyArrayStorage);
  swift_bridgeObjectRetain(a1);
  ML11randomSplit7indices11proportions9generatorSayi7SiGGAF_i15SdGxztKSGRzlFSiL6XEfU1_SaySiGTf1cn_n = _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSaySdG_Sis5NeverOTg5058_s8CreateML11randomSplit7indices11proportions9generatorSayi7SiGGAF_i15SdGxztKSGRzlFSiL6XEfU1_SaySiGTf1cn_n((uint64_t)v30, a1, v34);
  swift_bridgeObjectRelease((_BYTE)v30);
  uint64_t v42 = ML11randomSplit7indices11proportions9generatorSayi7SiGGAF_i15SdGxztKSGRzlFSiL6XEfU1_SaySiGTf1cn_n;
  uint64_t v43 = 0;
  unint64_t v44 = 0;
  char v45 = _swiftEmptyArrayStorage;
  uint64_t v72 = ML11randomSplit7indices11proportions9generatorSayi7SiGGAF_i15SdGxztKSGRzlFSiL6XEfU1_SaySiGTf1cn_n;
  do
  {
    if (v44 >= v42[2]) {
      BUG();
    }
    if (v43 >= v42[v44 + 4])
    {
      unint64_t v46 = (char *)_swiftEmptyArrayStorage;
    }
    else
    {
      uint64_t v75 = v45;
      unint64_t v70 = v44;
      uint64_t v65 = v43;
      unint64_t v46 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, 1, 1, (uint64_t)_swiftEmptyArrayStorage);
      uint64_t v47 = v43;
      unint64_t v44 = v70;
      char v45 = v75;
      BOOL v48 = v72;
      uint64_t v49 = a1;
      unint64_t v50 = v63;
      uint64_t v51 = v64;
      do
      {
        if (v47 < 0) {
          BUG();
        }
        if ((unint64_t)v43 >= *(void *)(v51 + 16)) {
          BUG();
        }
        unint64_t v52 = *(void *)(v51 + 8 * v43 + 32);
        if (v52 >= v50) {
          BUG();
        }
        uint64_t v53 = *(void *)(v49 + 8 * v52 + 32);
        unint64_t v54 = *((void *)v46 + 2);
        if (*((void *)v46 + 3) >> 1 <= v54)
        {
          unint64_t v46 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(*((void *)v46 + 3) >= 2uLL, v54 + 1, 1, (uint64_t)v46);
          uint64_t v47 = v65;
          unint64_t v44 = v70;
          char v45 = v75;
          BOOL v48 = v72;
          uint64_t v51 = v64;
          unint64_t v50 = v63;
          uint64_t v49 = a1;
        }
        *((void *)v46 + 2) = v54 + 1;
        *(void *)&v46[8 * v54 + 32] = v53;
        ++v43;
      }
      while (v43 < v48[v44 + 4]);
    }
    uint64_t v76 = v46;
    unint64_t v55 = v44;
    uint64_t v56 = (uint64_t)v45;
    if (swift_isUniquelyReferenced_nonNull_native(v45)) {
      char v45 = (void *)v56;
    }
    else {
      char v45 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(void *)(v56 + 16) + 1, 1, v56);
    }
    unint64_t v57 = v45[2];
    int64_t v58 = v67;
    uint64_t v42 = v72;
    unint64_t v59 = v76;
    if (v45[3] >> 1 <= v57)
    {
      uint64_t v61 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(v45[3] >= 2uLL, v57 + 1, 1, (uint64_t)v45);
      unint64_t v59 = v76;
      unint64_t v60 = v55;
      uint64_t v42 = v72;
      int64_t v58 = v67;
      char v45 = v61;
    }
    else
    {
      unint64_t v60 = v55;
    }
    unint64_t v44 = v60 + 1;
    v45[2] = v57 + 1;
    v45[v57 + 4] = v59;
  }
  while (v44 != v58);
  BOOL v62 = v45;
  swift_bridgeObjectRelease((_BYTE)v42);
  swift_bridgeObjectRelease(v64);
  return (uint64_t)v62;
}

uint64_t stratifiedSplitGenerator<A>(proportions:generator:dataTable:on:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void *a5, uint64_t a6, double a7, uint64_t a8)
{
  v95._uint64_t countAndFlagsBits = a4;
  uint64_t v77 = a2;
  uint64_t v78 = (Swift::String *)a6;
  v95._char object = a5;
  uint64_t v79 = a1;
  uint64_t v10 = *(void *)a3;
  unsigned __int8 v109 = *(unsigned char *)(a3 + 8);
  uint64_t v98 = v10;
  char v80 = v8;
  if (v109)
  {
    outlined copy of Result<_DataTable, Error>(v10, 1);
    uint64_t v11 = tc_v1_flex_list_create(0);
    if (!v11) {
      BUG();
    }
    uint64_t v12 = v11;
    uint64_t v13 = type metadata accessor for CMLSequence();
    uint64_t v14 = swift_allocObject(v13, 25, 7);
    *(void *)(v14 + 16) = v12;
    *(unsigned char *)(v14 + 24) = 1;
    outlined consume of Result<_DataTable, Error>(v10, 1);
  }
  else
  {
    outlined copy of Result<_DataTable, Error>(v10, 0);
    _DataTable.columnNames.getter(v10);
    outlined consume of Result<_DataTable, Error>(v10, 0);
    uint64_t v14 = countAndFlagsBits;
  }
  Swift::String v107 = v95;
  uint64_t v15 = alloca(24);
  double v16 = alloca(32);
  uint64_t v78 = &v107;
  char v17 = specialized Sequence.contains(where:)((uint64_t (*)(unint64_t *))closure #1 in Sequence<>.contains(_:)specialized partial apply, (uint64_t)v76, v14);
  swift_release();
  if (v17)
  {
    uint64_t v99 = v9;
    uint64_t v18 = v98;
    v107._uint64_t countAndFlagsBits = v98;
    LOBYTE(v107._object) = v109;
    unsigned int v19 = v109;
    outlined copy of Result<_DataTable, Error>(v98, v109);
    MLDataTable.subscript.getter(v95);
    unsigned int v106 = v19;
    uint64_t v20 = v19;
    outlined consume of Result<_DataTable, Error>(v18, v19);
    uint64_t v21 = countAndFlagsBits;
    char v22 = object;
    uint64_t v90 = countAndFlagsBits;
    char v91 = object;
    MLUntypedColumn.dropDuplicates()(v18, v20);
    uint64_t v23 = v21;
    unsigned __int8 v24 = v109;
    outlined consume of Result<_DataTable, Error>(v23, v22);
    uint64_t countAndFlagsBits = v107._countAndFlagsBits;
    char object = (char)v107._object;
    unint64_t v25 = Array<A>.init(_:)((uint64_t)&countAndFlagsBits, a7);
    v107._uint64_t countAndFlagsBits = v18;
    LOBYTE(v107._object) = v24;
    Swift::Int v26 = MLDataTable.size.getter();
    if (v26 < 0) {
      BUG();
    }
    id v102 = specialized _copyCollectionToContiguousArray<A>(_:)(0, v26);
    uint64_t countAndFlagsBits = v18;
    char object = v24;
    v107._uint64_t countAndFlagsBits = v18;
    LOBYTE(v107._object) = v24;
    outlined copy of Result<_DataTable, Error>(v18, v106);
    Swift::Int v27 = MLDataTable.size.getter();
    uint64_t v28 = (char *)specialized Array.init(repeating:count:)(0, v27);
    uint64_t v82 = v25[2];
    if (v82)
    {
      unint64_t v29 = 0;
      uint64_t v88 = v25;
      while (1)
      {
        if (v29 >= v25[2]) {
          BUG();
        }
        uint64_t v103 = v28;
        unint64_t v81 = v29;
        uint64_t v97 = (void *)v25[3 * v29 + 4];
        uint64_t v30 = v97;
        uint64_t v96 = (void *)v25[3 * v29 + 5];
        uint64_t v31 = v96;
        LOBYTE(v101) = v25[3 * v29 + 6];
        char v32 = v106;
        outlined copy of Result<_DataTable, Error>(v18, v106);
        int v33 = v101;
        outlined copy of MLDataValue(v30, v31, v101);
        MLDataTable.subscript.getter(v95);
        outlined consume of Result<_DataTable, Error>(v98, v32);
        uint64_t v34 = v84;
        char v35 = v85;
        uint64_t v86 = v84;
        char v87 = v85;
        v107._char object = v96;
        int v100 = v33;
        char v108 = v33;
        static MLUntypedColumn.== infix(_:_:)((uint64_t)&v86, (long long *)&v107._countAndFlagsBits);
        outlined consume of Result<_DataTable, Error>(v34, v35);
        v107._uint64_t countAndFlagsBits = v90;
        LOBYTE(v107._object) = v91;
        uint64_t v36 = Array<A>.init(_:)((uint64_t)&v107, a7);
        uint64_t v37 = v36[2];
        if (v37)
        {
          uint64_t v101 = v102[2];
          swift_retain();
          uint64_t v83 = v36;
          uint64_t v38 = v36 + 6;
          unint64_t v39 = 0;
          unint64_t v40 = _swiftEmptyArrayStorage;
          uint64_t v94 = v37;
          do
          {
            if (v101 == v39) {
              break;
            }
            if (v39 >= v102[2]) {
              BUG();
            }
            if (!*v38 && *((void *)v38 - 2) == 1)
            {
              uint64_t v93 = (void *)*((void *)v38 - 1);
              unint64_t v92 = v102[v39 + 4];
              char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v40);
              v107._uint64_t countAndFlagsBits = (uint64_t)v40;
              if (!isUniquelyReferenced_nonNull_native)
              {
                specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v40[2] + 1, 1);
                unint64_t v40 = (void *)v107._countAndFlagsBits;
              }
              unint64_t v42 = v40[2];
              unint64_t v43 = v40[3];
              unint64_t v44 = v42 + 1;
              if (v43 >> 1 <= v42)
              {
                unint64_t v89 = v42 + 1;
                specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v43 >= 2, v42 + 1, 1);
                unint64_t v44 = v89;
                unint64_t v40 = (void *)v107._countAndFlagsBits;
              }
              v40[2] = v44;
              uint64_t v45 = 4 * v42;
              v40[v45 + 4] = 1;
              v40[v45 + 5] = v93;
              LOBYTE(v40[v45 + 6]) = 0;
              v40[v45 + 7] = v92;
              uint64_t v37 = v94;
            }
            ++v39;
            v38 += 24;
          }
          while (v37 != v39);
          swift_release();
          LOBYTE(v36) = (_BYTE)v83;
        }
        else
        {
          unint64_t v40 = _swiftEmptyArrayStorage;
        }
        swift_bridgeObjectRelease((_BYTE)v36);
        uint64_t v46 = v99;
        ML11MLDataValueO_SitG_Sis5NeverOTg503_s8d4ML11fg20OS2iIgnyd_AC_SitSis5h126OIegnrzr_TR03_s8a68ML24stratifiedSplitGenerator11proportions9generator9dataTable2onAA06c31I0VSaySdG_xzAHSStKSGRzlFSiAA0K5D11O_N16XEfU0_Tf3nnnpf_nTf1cn_n = _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSay8CreateML11MLDataValueO_SitG_Sis5NeverOTg503_s8d4ML11fg20OS2iIgnyd_AC_SitSis5h126OIegnrzr_TR03_s8a68ML24stratifiedSplitGenerator11proportions9generator9dataTable2onAA06c31I0VSaySdG_xzAHSStKSGRzlFSiAA0K5D11O_N16XEfU0_Tf3nnnpf_nTf1cn_n((uint64_t)v40);
        swift_release();
        BOOL v48 = specialized _copyCollectionToContiguousArray<A>(_:)(0, ML11MLDataValueO_SitG_Sis5NeverOTg503_s8d4ML11fg20OS2iIgnyd_AC_SitSis5h126OIegnrzr_TR03_s8a68ML24stratifiedSplitGenerator11proportions9generator9dataTable2onAA06c31I0VSaySdG_xzAHSStKSGRzlFSiAA0K5D11O_N16XEfU0_Tf3nnnpf_nTf1cn_n[2]);
        uint64_t v49 = v79;
        uint64_t v50 = randomSplit<A>(indices:proportions:generator:)((uint64_t)v48, v79, v77, (uint64_t)v78, a8);
        uint64_t v99 = v46;
        if (v46) {
          break;
        }
        uint64_t v51 = v50;
        swift_release();
        uint64_t v94 = *(void *)(v49 + 16);
        if (v94)
        {
          unint64_t v52 = 0;
          uint64_t v53 = v103;
          uint64_t v93 = ML11MLDataValueO_SitG_Sis5NeverOTg503_s8d4ML11fg20OS2iIgnyd_AC_SitSis5h126OIegnrzr_TR03_s8a68ML24stratifiedSplitGenerator11proportions9generator9dataTable2onAA06c31I0VSaySdG_xzAHSStKSGRzlFSiAA0K5D11O_N16XEfU0_Tf3nnnpf_nTf1cn_n;
          do
          {
            if (v52 >= *(void *)(v51 + 16)) {
              BUG();
            }
            uint64_t v101 = *(void *)(*(void *)(v51 + 8 * v52 + 32) + 16);
            if (v101)
            {
              unint64_t v54 = 0;
              unint64_t v92 = v52;
              do
              {
                uint64_t v55 = *(void *)(v51 + 8 * v52 + 32);
                if (v54 >= *(void *)(v55 + 16)) {
                  BUG();
                }
                uint64_t v56 = *(void *)(v55 + 8 * v54 + 32);
                if (v56 < 0) {
                  BUG();
                }
                if ((unint64_t)v56 >= ML11MLDataValueO_SitG_Sis5NeverOTg503_s8d4ML11fg20OS2iIgnyd_AC_SitSis5h126OIegnrzr_TR03_s8a68ML24stratifiedSplitGenerator11proportions9generator9dataTable2onAA06c31I0VSaySdG_xzAHSStKSGRzlFSiAA0K5D11O_N16XEfU0_Tf3nnnpf_nTf1cn_n[2]) {
                  BUG();
                }
                uint64_t v57 = v51;
                uint64_t v58 = ML11MLDataValueO_SitG_Sis5NeverOTg503_s8d4ML11fg20OS2iIgnyd_AC_SitSis5h126OIegnrzr_TR03_s8a68ML24stratifiedSplitGenerator11proportions9generator9dataTable2onAA06c31I0VSaySdG_xzAHSStKSGRzlFSiAA0K5D11O_N16XEfU0_Tf3nnnpf_nTf1cn_n[v56 + 4];
                uint64_t v59 = (uint64_t)v53;
                if (swift_isUniquelyReferenced_nonNull_native(v53)) {
                  uint64_t v53 = (char *)v59;
                }
                else {
                  uint64_t v53 = specialized _ArrayBuffer._consumeAndCreateNew()(v59);
                }
                if (v58 < 0) {
                  BUG();
                }
                if ((unint64_t)v58 >= *((void *)v53 + 2)) {
                  BUG();
                }
                uint64_t v51 = v57;
                ++v54;
                unint64_t v52 = v92;
                *(void *)&v53[8 * v58 + 32] = v92;
                ML11MLDataValueO_SitG_Sis5NeverOTg503_s8d4ML11fg20OS2iIgnyd_AC_SitSis5h126OIegnrzr_TR03_s8a68ML24stratifiedSplitGenerator11proportions9generator9dataTable2onAA06c31I0VSaySdG_xzAHSStKSGRzlFSiAA0K5D11O_N16XEfU0_Tf3nnnpf_nTf1cn_n = v93;
              }
              while (v101 != v54);
            }
            ++v52;
          }
          while (v52 != v94);
          uint64_t v103 = v53;
        }
        swift_bridgeObjectRelease((_BYTE)ML11MLDataValueO_SitG_Sis5NeverOTg503_s8d4ML11fg20OS2iIgnyd_AC_SitSis5h126OIegnrzr_TR03_s8a68ML24stratifiedSplitGenerator11proportions9generator9dataTable2onAA06c31I0VSaySdG_xzAHSStKSGRzlFSiAA0K5D11O_N16XEfU0_Tf3nnnpf_nTf1cn_n);
        swift_bridgeObjectRelease(v51);
        unint64_t v60 = v81 + 1;
        outlined consume of MLDataValue(v97, v96, v100);
        unint64_t v29 = v60;
        uint64_t v18 = v98;
        unint64_t v25 = v88;
        uint64_t v28 = v103;
        if (v60 == v82) {
          goto LABEL_46;
        }
      }
      swift_bridgeObjectRelease((_BYTE)ML11MLDataValueO_SitG_Sis5NeverOTg503_s8d4ML11fg20OS2iIgnyd_AC_SitSis5h126OIegnrzr_TR03_s8a68ML24stratifiedSplitGenerator11proportions9generator9dataTable2onAA06c31I0VSaySdG_xzAHSStKSGRzlFSiAA0K5D11O_N16XEfU0_Tf3nnnpf_nTf1cn_n);
      swift_release();
      outlined consume of MLDataValue(v97, v96, v100);
      swift_bridgeObjectRelease((_BYTE)v103);
      swift_bridgeObjectRelease((_BYTE)v88);
      swift_release();
      return outlined consume of Result<_DataTable, Error>(v98, v106);
    }
    else
    {
      uint64_t v103 = v28;
LABEL_46:
      swift_release();
      swift_bridgeObjectRelease((_BYTE)v25);
      LOBYTE(v107._countAndFlagsBits) = (_BYTE)v103;
      int64_t v67 = alloca(24);
      double v68 = alloca(32);
      uint64_t v110 = &v107;
      uint64_t ML14_UntypedColumnC_s5Error_pTgm5 = _ss6ResultOsRi_zrlE8catchingAByxq_Gxyq_YKXE_tcfC8CreateML14_UntypedColumnC_s5Error_pTgm5((void (*)(void *))closure #1 in MLUntypedColumn.init<A>(_:)specialized partial apply);
      char v71 = v70;
      swift_bridgeObjectRelease(v107._countAndFlagsBits);
      MLDataTable.willMutate()();
      v107._uint64_t countAndFlagsBits = ML14_UntypedColumnC_s5Error_pTgm5;
      char v72 = v71;
      char v73 = v71 & 1;
      LOBYTE(v107._object) = v73;
      outlined copy of Result<_DataTable, Error>(ML14_UntypedColumnC_s5Error_pTgm5, v72);
      MLDataTable.addImpl(newColumn:named:)((uint64_t)&v107, 0x6F69746974726170, (void *)0xE90000000000006ELL);
      outlined consume of Result<_DataTable, Error>(ML14_UntypedColumnC_s5Error_pTgm5, v72);
      uint64_t v74 = countAndFlagsBits;
      char v75 = object;
      if (!object)
      {
        outlined copy of Result<_DataTable, Error>(countAndFlagsBits, 0);
        _DataTable.columnNamesDidChange()();
        outlined consume of Result<_DataTable, Error>(v74, 0);
      }
      outlined consume of Result<_DataTable, Error>(ML14_UntypedColumnC_s5Error_pTgm5, v73);
      uint64_t result = (uint64_t)v80;
      *char v80 = v74;
      *(unsigned char *)(result + 8) = v75;
    }
  }
  else
  {
    uint64_t v61 = lazy protocol witness table accessor for type MLCreateError and conformance MLCreateError();
    swift_allocError(&type metadata for MLCreateError, v61, 0, 0);
    *(void *)uint64_t v62 = 0xD000000000000022;
    *(void *)(v62 + 8) = "lue from annotation." + 0x8000000000000000;
    *(_OWORD *)(v62 + 16) = 0;
    *(_OWORD *)(v62 + 32) = 0;
    *(unsigned char *)(v62 + 48) = 0;
    return swift_willThrow(&type metadata for MLCreateError, v61, v62, v63, v64, v65);
  }
  return result;
}

uint64_t stratifiedSplitBySequenceGenerator<A>(proportions:generator:dataTable:by:on:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, char *a5, uint64_t a6, double a7, void *a8, uint64_t a9, uint64_t a10)
{
  *(void *)&long long v170 = v11;
  v166._uint64_t countAndFlagsBits = a6;
  uint64_t v169 = a5;
  uint64_t v156 = a1;
  uint64_t v12 = *(void **)a3;
  HIBYTE(v172) = *(unsigned char *)(a3 + 8);
  v168._uint64_t countAndFlagsBits = a4;
  uint64_t v149 = v10;
  uint64_t v160 = v12;
  uint64_t v155 = a2;
  if (HIBYTE(v172))
  {
    outlined copy of Result<_DataTable, Error>((uint64_t)v12, 1);
    uint64_t v13 = tc_v1_flex_list_create(0);
    if (!v13) {
      BUG();
    }
    uint64_t v14 = v13;
    uint64_t v15 = type metadata accessor for CMLSequence();
    uint64_t v16 = swift_allocObject(v15, 25, 7);
    *(void *)(v16 + 16) = v14;
    *(unsigned char *)(v16 + 24) = 1;
    outlined consume of Result<_DataTable, Error>((uint64_t)v12, 1);
    uint64_t countAndFlagsBits = v168._countAndFlagsBits;
  }
  else
  {
    uint64_t countAndFlagsBits = a4;
    outlined copy of Result<_DataTable, Error>((uint64_t)v12, 0);
    _DataTable.columnNames.getter(v12);
    outlined consume of Result<_DataTable, Error>((uint64_t)v12, 0);
    uint64_t v16 = v162;
  }
  *(void *)&long long v171 = countAndFlagsBits;
  uint64_t v18 = v169;
  *((void *)&v171 + 1) = v169;
  unsigned int v19 = alloca(24);
  uint64_t v20 = alloca(32);
  uint64_t v145 = &v171;
  uint64_t v21 = v170;
  char v22 = specialized Sequence.contains(where:)((uint64_t (*)(unint64_t *))partial apply for specialized closure #1 in Sequence<>.contains(_:), (uint64_t)v144, v16);
  *(void *)&long long v170 = v21;
  swift_release();
  if ((v22 & 1) == 0)
  {
    *(void *)&long long v171 = 0x2064696C61766E49;
    *((void *)&v171 + 1) = 0xE800000000000000;
    v28._uint64_t countAndFlagsBits = v168._countAndFlagsBits;
    v28._char object = v18;
LABEL_27:
    String.append(_:)(v28);
    v63._uint64_t countAndFlagsBits = 46;
    v63._char object = (void *)0xE100000000000000;
    String.append(_:)(v63);
    long long v170 = v171;
    v63._char object = (void *)lazy protocol witness table accessor for type MLCreateError and conformance MLCreateError();
    swift_allocError(&type metadata for MLCreateError, v63._object, 0, 0);
    *(_OWORD *)uint64_t v64 = v170;
    *(_OWORD *)(v64 + 16) = 0;
    *(_OWORD *)(v64 + 32) = 0;
    *(unsigned char *)(v64 + 48) = 0;
    return swift_willThrow(&type metadata for MLCreateError, v63._object, v64, v65, v66, v67);
  }
  if (HIBYTE(v172))
  {
    uint64_t v23 = (uint64_t)v160;
    outlined copy of Result<_DataTable, Error>((uint64_t)v160, 1);
    uint64_t v24 = tc_v1_flex_list_create(0);
    if (!v24) {
      BUG();
    }
    uint64_t v25 = v24;
    uint64_t v26 = type metadata accessor for CMLSequence();
    uint64_t v27 = swift_allocObject(v26, 25, 7);
    *(void *)(v27 + 16) = v25;
    *(unsigned char *)(v27 + 24) = 1;
    outlined consume of Result<_DataTable, Error>(v23, 1);
  }
  else
  {
    uint64_t v23 = (uint64_t)v160;
    unint64_t v29 = v160;
    outlined copy of Result<_DataTable, Error>((uint64_t)v160, 0);
    _DataTable.columnNames.getter(v29);
    outlined consume of Result<_DataTable, Error>(v23, 0);
    uint64_t v27 = v162;
  }
  *(void *)&long long v171 = v166._countAndFlagsBits;
  *((void *)&v171 + 1) = a8;
  uint64_t v30 = alloca(24);
  uint64_t v31 = alloca(32);
  uint64_t v174 = &v171;
  uint64_t v32 = v170;
  char v33 = specialized Sequence.contains(where:)((uint64_t (*)(unint64_t *))closure #1 in Sequence<>.contains(_:)specialized partial apply, (uint64_t)v173, v27);
  *(void *)&long long v170 = v32;
  swift_release();
  if ((v33 & 1) == 0)
  {
    *(void *)&long long v171 = 0x2064696C61766E49;
    *((void *)&v171 + 1) = 0xE800000000000000;
    v28._uint64_t countAndFlagsBits = v166._countAndFlagsBits;
    v28._char object = a8;
    goto LABEL_27;
  }
  uint64_t v162 = v23;
  LOBYTE(v163) = HIBYTE(v172);
  *(void *)&long long v171 = v23;
  BYTE8(v171) = HIBYTE(v172);
  int v161 = HIBYTE(v172);
  outlined copy of Result<_DataTable, Error>(v23, SHIBYTE(v172));
  v34._uint64_t countAndFlagsBits = v168._countAndFlagsBits;
  v34._char object = v169;
  MLDataTable.subscript.getter(v34);
  char object = v166._object;
  char v36 = v167;
  uint64_t v146 = v166._object;
  char v147 = v167;
  MLUntypedColumn.dropDuplicates()(v34._countAndFlagsBits, v34._object);
  outlined consume of Result<_DataTable, Error>((uint64_t)object, v36);
  v166._char object = (void *)v171;
  char v167 = BYTE8(v171);
  uint64_t v37 = Array<A>.init(_:)((uint64_t)&v166._object, a7);
  int v38 = v161;
  outlined copy of Result<_DataTable, Error>((uint64_t)v160, v161);
  unint64_t v39 = v169;
  swift_bridgeObjectRetain((_BYTE)v169);
  swift_bridgeObjectRetain((_BYTE)a8);
  uint64_t v40 = v170;
  long long v172 = &v148;
  ML11MLDataValueOG_AHs5NeverOTg503_s8d81ML34stratifiedSplitBySequenceGenerator11proportions9generator9dataTable2by2onAA06f30K0VSaySdG_xzAIS2StKSGRzlFAA0N5G8OALXEfU_AF0F5TableVS2STf1cn_n = _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSay8CreateML11MLDataValueOG_AHs5NeverOTg503_s8d81ML34stratifiedSplitBySequenceGenerator11proportions9generator9dataTable2by2onAA06f30K0VSaySdG_xzAIS2StKSGRzlFAA0N5G8OALXEfU_AF0F5TableVS2STf1cn_n((uint64_t)v37, (uint64_t)v160, v38, v168._countAndFlagsBits, v39, v166._countAndFlagsBits, a8);
  uint64_t v150 = v40;
  uint64_t v41 = v37[2];
  swift_bridgeObjectRetain((_BYTE)v37);
  uint64_t v152 = v37;
  unint64_t v42 = specialized Dictionary.init<A>(uniqueKeysWithValues:)((uint64_t)v37, 0, v41);
  v168._char object = specialized Array.init(repeating:count:)((uint64_t)_swiftEmptyArrayStorage, v41);
  uint64_t v43 = (uint64_t)v160;
  LOBYTE(v41) = v161;
  outlined copy of Result<_DataTable, Error>((uint64_t)v160, v161);
  v34._uint64_t countAndFlagsBits = v168._countAndFlagsBits;
  v34._char object = v169;
  MLDataTable.subscript.getter(v34);
  outlined consume of Result<_DataTable, Error>(v43, v41);
  v166._char object = (void *)v171;
  char v167 = BYTE8(v171);
  unint64_t v44 = Array<A>.init(_:)((uint64_t)&v166._object, a7);
  uint64_t v165 = (char *)v44[2];
  if (v165)
  {
    uint64_t v151 = v44;
    uint64_t v45 = v44 + 6;
    uint64_t v46 = 0;
    uint64_t v154 = v42;
    do
    {
      uint64_t v157 = v46;
      uint64_t v47 = (void *)*((void *)v45 - 2);
      BOOL v48 = (void *)*((void *)v45 - 1);
      uint64_t v49 = v42;
      *(void *)&long long v170 = v42[2];
      uint64_t v164 = v45;
      int v50 = *v45;
      outlined copy of MLDataValue(v47, v48, *v45);
      if (!(void)v170) {
        goto LABEL_71;
      }
      outlined copy of MLDataValue(v47, v48, v50);
      *(void *)&long long v51 = v47;
      *((void *)&v51 + 1) = v48;
      unint64_t v52 = specialized __RawDictionaryStorage.find<A>(_:)(v51, v50);
      BOOL v54 = (v53 & 1) == 0;
      int v55 = v50;
      if (v54)
      {
        outlined consume of MLDataValue(v47, v48, v50);
LABEL_71:
        swift_bridgeObjectRelease((_BYTE)ML11MLDataValueOG_AHs5NeverOTg503_s8d81ML34stratifiedSplitBySequenceGenerator11proportions9generator9dataTable2by2onAA06f30K0VSaySdG_xzAIS2StKSGRzlFAA0N5G8OALXEfU_AF0F5TableVS2STf1cn_n);
        swift_bridgeObjectRelease((_BYTE)v152);
        BUG();
      }
      uint64_t v56 = *(void *)(v49[7] + 8 * v52);
      uint64_t v57 = v47;
      *(void *)&long long v170 = v48;
      LODWORD(v158) = v55;
      outlined consume of MLDataValue(v47, v48, v55);
      uint64_t v58 = v168._object;
      if (!swift_isUniquelyReferenced_nonNull_native(v168._object)) {
        uint64_t v58 = specialized _ArrayBuffer._consumeAndCreateNew()((uint64_t)v58);
      }
      if (v56 < 0) {
        BUG();
      }
      if ((unint64_t)v56 >= v58[2]) {
        BUG();
      }
      uint64_t v59 = (char *)v58[v56 + 4];
      char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v59);
      v168._char object = v58;
      uint64_t v159 = v56;
      v58[v56 + 4] = v59;
      if (!isUniquelyReferenced_nonNull_native)
      {
        uint64_t v59 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *((void *)v59 + 2) + 1, 1, (uint64_t)v59);
        *((void *)v168._object + v159 + 4) = v59;
      }
      unint64_t v61 = *((void *)v59 + 2);
      if (*((void *)v59 + 3) >> 1 <= v61)
      {
        uint64_t v59 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(*((void *)v59 + 3) >= 2uLL, v61 + 1, 1, (uint64_t)v59);
        *((void *)v168._object + v159 + 4) = v59;
      }
      *((void *)v59 + 2) = v61 + 1;
      uint64_t v62 = v157;
      *(void *)&v59[8 * v61 + 32] = v157;
      uint64_t v46 = v62 + 1;
      outlined consume of MLDataValue(v57, (void *)v170, v158);
      uint64_t v45 = v164 + 24;
      unint64_t v42 = v154;
    }
    while (v165 != v46);
    swift_bridgeObjectRelease((_BYTE)v154);
    LOBYTE(v44) = (_BYTE)v151;
  }
  else
  {
    swift_bridgeObjectRelease((_BYTE)v42);
  }
  swift_bridgeObjectRelease((_BYTE)v44);
  uint64_t v69 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, MLUntypedColumn)>);
  uint64_t inited = swift_initStackObject(v69, v144);
  *(void *)(inited + 16) = 3;
  *(void *)(inited + 24) = 6;
  *(void *)(inited + 32) = 0x73656369646E69;
  *(void *)(inited + 40) = 0xE700000000000000;
  LOBYTE(v171) = v168._object;
  char v71 = alloca(24);
  char v72 = alloca(32);
  uint64_t v174 = &v171;
  swift_bridgeObjectRetain(v168._object);
  uint64_t ML14_UntypedColumnC_s5Error_pTgm5 = _ss6ResultOsRi_zrlE8catchingAByxq_Gxyq_YKXE_tcfC8CreateML14_UntypedColumnC_s5Error_pTgm5((void (*)(void *))_s8CreateML15MLUntypedColumnVyACxcSTRzAA22MLDataValueConvertible7ElementRpzlufcAA08_UntypedD0CyKXEfU_SaySaySiGG_TG5TA_0);
  char v75 = v74;
  swift_bridgeObjectRelease(v171);
  *(void *)(inited + 48) = ML14_UntypedColumnC_s5Error_pTgm5;
  *(unsigned char *)(inited + 56) = v75 & 1;
  *(void *)(inited + 64) = v166._countAndFlagsBits;
  *(void *)(inited + 72) = a8;
  LOBYTE(v171) = (_BYTE)ML11MLDataValueOG_AHs5NeverOTg503_s8d81ML34stratifiedSplitBySequenceGenerator11proportions9generator9dataTable2by2onAA06f30K0VSaySdG_xzAIS2StKSGRzlFAA0N5G8OALXEfU_AF0F5TableVS2STf1cn_n;
  uint64_t v76 = alloca(24);
  uint64_t v77 = alloca(32);
  uint64_t v174 = &v171;
  swift_bridgeObjectRetain((_BYTE)a8);
  uint64_t v78 = _ss6ResultOsRi_zrlE8catchingAByxq_Gxyq_YKXE_tcfC8CreateML14_UntypedColumnC_s5Error_pTgm5((void (*)(void *))_s8CreateML15MLUntypedColumnVyACxcSTRzAA11MLDataValueO7ElementRtzlufcAA08_UntypedD0CyKXEfU_SayAEG_TG5TA_0);
  char v80 = v79;
  swift_bridgeObjectRelease(v171);
  *(void *)&long long v170 = v173;
  *(void *)(inited + 80) = v78;
  *(unsigned char *)(inited + 88) = v80 & 1;
  *(void *)(inited + 96) = v168._countAndFlagsBits;
  char v81 = (char)v169;
  *(void *)(inited + 104) = v169;
  *(void *)&long long v171 = v152;
  uint64_t v82 = alloca(24);
  uint64_t v83 = alloca(32);
  uint64_t v174 = &v171;
  swift_bridgeObjectRetain(v81);
  uint64_t v84 = _ss6ResultOsRi_zrlE8catchingAByxq_Gxyq_YKXE_tcfC8CreateML14_UntypedColumnC_s5Error_pTgm5((void (*)(void *))closure #1 in MLUntypedColumn.init<A>(_:)specialized partial apply);
  char v86 = v85;
  swift_bridgeObjectRelease(v171);
  *(void *)(inited + 112) = v84;
  *(unsigned char *)(inited + 120) = v86 & 1;
  uint64_t v87 = Dictionary.init(dictionaryLiteral:)(inited, &type metadata for String, &type metadata for MLUntypedColumn, &protocol witness table for String);
  uint64_t v88 = v150;
  specialized MLDataTable.init<A>(uniqueKeysWithValues:)(v87);
  if (v88)
  {
    swift_bridgeObjectRelease(v168._object);
    return outlined consume of Result<_DataTable, Error>(v162, v163);
  }
  uint64_t v89 = v171;
  char v90 = BYTE8(v171);
  MLDataTable.stratifiedSplit<A>(proportions:on:generator:)(v156, v166._countAndFlagsBits, a8, v155, a9, a10, a7);
  LOBYTE(v156) = v90;
  uint64_t v155 = v89;
  *(void *)&long long v170 = 0;
  uint64_t v165 = (char *)v171;
  LOBYTE(v166._countAndFlagsBits) = BYTE8(v171);
  uint64_t v91 = (uint64_t)v160;
  v166._char object = v160;
  char v167 = HIBYTE(v172);
  char v92 = v161;
  outlined copy of Result<_DataTable, Error>((uint64_t)v160, v161);
  v93._uint64_t countAndFlagsBits = v168._countAndFlagsBits;
  v93._char object = v169;
  MLDataTable.subscript.getter(v93);
  outlined consume of Result<_DataTable, Error>(v91, v92);
  uint64_t v94 = v171;
  char v95 = BYTE8(v171);
  if (BYTE8(v171))
  {
    uint64_t v96 = -1;
  }
  else
  {
    swift_retain();
    uint64_t v96 = CMLColumn.size.getter();
    outlined consume of Result<_DataTable, Error>(v94, 0);
  }
  outlined consume of Result<_DataTable, Error>(v94, v95);
  uint64_t v157 = (char *)specialized Array.init(repeating:count:)(0, v96);
  uint64_t v97 = v165;
  v166._char object = v165;
  char v167 = v166._countAndFlagsBits;
  int countAndFlagsBits_low = LOBYTE(v166._countAndFlagsBits);
  outlined copy of Result<_DataTable, Error>((uint64_t)v165, v166._countAndFlagsBits);
  v99._uint64_t countAndFlagsBits = 0x73656369646E69;
  v99._char object = (void *)0xE700000000000000;
  MLDataTable.subscript.getter(v99);
  LODWORD(v159) = countAndFlagsBits_low;
  outlined consume of Result<_DataTable, Error>((uint64_t)v97, countAndFlagsBits_low);
  uint64_t v100 = v171;
  if (BYTE8(v171) == 1)
  {
    outlined consume of Result<_DataTable, Error>(v171, 1);
LABEL_79:
    BUG();
  }
  swift_retain();
  uint64_t v101 = CMLColumn.size.getter();
  outlined consume of Result<_DataTable, Error>(v100, 0);
  outlined consume of Result<_DataTable, Error>(v100, 0);
  if (v101 < 0) {
    goto LABEL_79;
  }
  char v102 = (char)v168._object;
  if (v101)
  {
    uint64_t v103 = 0;
    v168._uint64_t countAndFlagsBits = v101;
    while (1)
    {
      if (v103 == (char *)v101) {
        BUG();
      }
      uint64_t v169 = v103;
      if (LOBYTE(v166._countAndFlagsBits)) {
        break;
      }
      uint64_t v104 = v165;
      uint64_t v105 = *((void *)v165 + 2);
      outlined copy of Result<_DataTable, Error>((uint64_t)v165, 0);
      swift_retain();
      uint64_t v106 = v170;
      uint64_t v107 = specialized String.withCString<A>(_:)((uint64_t (*)(void))partial apply for closure #1 in CMLTable.column(name:), v105, 0x73656369646E69, 0xE700000000000000);
      uint64_t v108 = v106;
      if (v106)
      {
        swift_errorRelease(v106);
        swift_release();
        goto LABEL_75;
      }
      uint64_t v109 = v107;
      swift_release();
      outlined consume of Result<_DataTable, Error>((uint64_t)v104, 0);
      uint64_t v110 = type metadata accessor for _UntypedColumn();
      uint64_t v111 = swift_allocObject(v110, 24, 7);
      *(void *)(v111 + 16) = v109;
      swift_retain();
      _UntypedColumn.valueAtIndex(index:)((uint64_t)v169, a7);
      outlined consume of Result<_DataTable, Error>(v111, 0);
      outlined consume of Result<_DataTable, Error>(v111, 0);
      if ((_BYTE)v172 != 3) {
        goto LABEL_76;
      }
      uint64_t v164 = (char *)*((void *)&v171 + 1);
      uint64_t v112 = (void *)v171;
      swift_retain();
      if (CMLSequence.size.getter())
      {
        uint64_t v113 = 0;
        uint64_t v154 = v112;
        while (1)
        {
          swift_retain();
          uint64_t v114 = CMLSequence.value(at:)(v113);
          *(void *)&long long v170 = v108;
          if (v108)
          {
            outlined consume of MLDataValue(v112, v164, 3);
            swift_unexpectedError(v170, "CreateML/SequenceType.swift", 27, 1);
            BUG();
          }
          uint64_t v115 = v114;
          outlined consume of MLDataValue(v112, v164, 3);
          MLDataValue.init(_:)(v115, a7);
          uint64_t v158 = v171;
          char v116 = (char)v172;
          swift_retain();
          uint64_t v117 = CMLSequence.size.getter();
          outlined consume of MLDataValue(v112, v164, 3);
          if (v113 >= v117) {
            BUG();
          }
          if (v116) {
            BUG();
          }
          uint64_t v118 = v113;
          uint64_t v119 = v165;
          outlined copy of Result<_DataTable, Error>((uint64_t)v165, 0);
          v120._uint64_t countAndFlagsBits = 0x6F69746974726170;
          v120._char object = (void *)0xE90000000000006ELL;
          specialized MLDataTable.subscript.getter(v120, (uint64_t)v119, v159);
          outlined consume of Result<_DataTable, Error>((uint64_t)v119, 0);
          uint64_t v121 = v166._object;
          if (v167) {
            break;
          }
          outlined copy of Result<_DataTable, Error>((uint64_t)v166._object, 0);
          _UntypedColumn.valueAtIndex(index:)((uint64_t)v169, a7);
          outlined consume of Result<_DataTable, Error>((uint64_t)v121, 0);
          uint64_t v123 = v171;
          uint64_t v122 = v157;
          if ((_BYTE)v172)
          {
            outlined consume of MLDataValue((void *)v171, *((void **)&v171 + 1), (char)v172);
            outlined consume of Result<_DataTable, Error>((uint64_t)v121, 0);
            goto LABEL_51;
          }
          outlined consume of Result<_DataTable, Error>((uint64_t)v121, 0);
          if (!swift_isUniquelyReferenced_nonNull_native(v122)) {
LABEL_58:
          }
            uint64_t v122 = specialized _ArrayBuffer._consumeAndCreateNew()((uint64_t)v122);
LABEL_53:
          if (v158 < 0) {
            BUG();
          }
          if ((unint64_t)v158 >= *((void *)v122 + 2)) {
            BUG();
          }
          uint64_t v157 = v122;
          *(void *)&v122[8 * v158 + 32] = v123;
          uint64_t v113 = v118 + 1;
          uint64_t v112 = v154;
          BOOL v54 = v118 + 1 == CMLSequence.size.getter();
          uint64_t v108 = v170;
          if (v54) {
            goto LABEL_59;
          }
        }
        outlined consume of Result<_DataTable, Error>((uint64_t)v166._object, 1);
        uint64_t v122 = v157;
LABEL_51:
        uint64_t v123 = 0;
        if (!swift_isUniquelyReferenced_nonNull_native(v122)) {
          goto LABEL_58;
        }
        uint64_t v123 = 0;
        goto LABEL_53;
      }
LABEL_59:
      *(void *)&long long v170 = v108;
      uint64_t v124 = v169 + 1;
      unint64_t v125 = v164;
      outlined consume of MLDataValue(v112, v164, 3);
      outlined consume of MLDataValue(v112, v125, 3);
      uint64_t v103 = v124;
      uint64_t v101 = v168._countAndFlagsBits;
      char v102 = (char)v168._object;
      if (v124 == (char *)v168._countAndFlagsBits) {
        goto LABEL_60;
      }
    }
    uint64_t v135 = v165;
    outlined copy of Result<_DataTable, Error>((uint64_t)v165, 1);
    swift_willThrow(v135, 1, v136, v137, v138, v139);
LABEL_75:
    BYTE8(v171) = 0;
    _StringGuts.grow(_:)(34);
    swift_bridgeObjectRelease(BYTE8(v171));
    *(void *)&long long v171 = 0xD00000000000001FLL;
    *((void *)&v171 + 1) = "ml.activityclassifier" + 0x8000000000000000;
    v140._uint64_t countAndFlagsBits = 0x73656369646E69;
    v140._char object = (void *)0xE700000000000000;
    String.append(_:)(v140);
    v140._char object = (void *)0xE100000000000000;
    v140._uint64_t countAndFlagsBits = 34;
    String.append(_:)(v140);
    long long v170 = v171;
    uint64_t v141 = lazy protocol witness table accessor for type MLCreateError and conformance MLCreateError();
    uint64_t v142 = swift_allocError(&type metadata for MLCreateError, v141, 0, 0);
    *(_OWORD *)uint64_t v143 = v170;
    *(_OWORD *)(v143 + 16) = 0;
    *(_OWORD *)(v143 + 32) = 0;
    *(unsigned char *)(v143 + 48) = 1;
    outlined consume of Result<_DataTable, Error>((uint64_t)v165, v159);
    outlined consume of Result<_DataTable, Error>(v142, 1);
LABEL_76:
    BUG();
  }
LABEL_60:
  swift_bridgeObjectRelease(v102);
  LOBYTE(v171) = (_BYTE)v157;
  char v126 = alloca(24);
  BOOL v127 = alloca(24);
  uint64_t v174 = &v171;
  uint64_t v128 = _ss6ResultOsRi_zrlE8catchingAByxq_Gxyq_YKXE_tcfC8CreateML14_UntypedColumnC_s5Error_pTgm5((void (*)(void *))partial apply for specialized closure #1 in MLUntypedColumn.init<A>(_:));
  char v130 = v129;
  swift_bridgeObjectRelease(v171);
  MLDataTable.willMutate()();
  *(void *)&long long v171 = v128;
  char v131 = v130;
  char v132 = v130 & 1;
  BYTE8(v171) = v132;
  outlined copy of Result<_DataTable, Error>(v128, v131);
  MLDataTable.addImpl(newColumn:named:)((uint64_t)&v171, 0x6F69746974726170, (void *)0xE90000000000006ELL);
  outlined consume of Result<_DataTable, Error>(v128, v131);
  uint64_t v133 = v162;
  char v134 = v163;
  if (!(_BYTE)v163)
  {
    outlined copy of Result<_DataTable, Error>(v162, 0);
    LOBYTE(v164) = 0;
    _DataTable.columnNamesDidChange()();
    char v134 = (char)v164;
    outlined consume of Result<_DataTable, Error>(v133, 0);
  }
  outlined consume of Result<_DataTable, Error>(v155, v156);
  outlined consume of Result<_DataTable, Error>((uint64_t)v165, v159);
  outlined consume of Result<_DataTable, Error>(v128, v132);
  uint64_t result = (uint64_t)v149;
  uint64_t *v149 = v133;
  *(unsigned char *)(result + 8) = v134;
  return result;
}

char closure #1 in stratifiedSplitBySequenceGenerator<A>(proportions:generator:dataTable:by:on:)(uint64_t a1, uint64_t a2, int a3, uint64_t a4, void *a5, uint64_t a6, void *a7)
{
  v24._uint64_t countAndFlagsBits = a4;
  char v8 = a3;
  uint64_t v22 = v7;
  v24._char object = a5;
  char v33 = *(unsigned char *)(a1 + 16);
  *(void *)&long long v28 = a2;
  char v9 = a3 & 1;
  BYTE8(v28) = a3 & 1;
  uint64_t v27 = a2;
  int v32 = a3;
  outlined copy of Result<_DataTable, Error>(a2, a3);
  MLDataTable.subscript.getter(v24);
  outlined consume of Result<_DataTable, Error>(a2, v8);
  uint64_t v10 = v30;
  char v11 = v31;
  uint64_t v25 = v30;
  char v26 = v31;
  long long v12 = *(_OWORD *)a1;
  long long v28 = *(_OWORD *)a1;
  char v29 = v33;
  static MLUntypedColumn.== infix(_:_:)((uint64_t)&v25, &v28);
  outlined consume of Result<_DataTable, Error>(v10, v11);
  *(void *)&long long v28 = v27;
  BYTE8(v28) = v9;
  uint64_t v25 = v20;
  char v26 = v21;
  char v13 = v32;
  outlined copy of Result<_DataTable, Error>(v27, v32);
  MLDataTable.subscript.getter((uint64_t)&v25);
  outlined consume of Result<_DataTable, Error>(v20, v21);
  outlined consume of Result<_DataTable, Error>(v27, v13);
  uint64_t v14 = v30;
  char v15 = v31;
  *(void *)&long long v28 = v30;
  BYTE8(v28) = v31;
  v16._uint64_t countAndFlagsBits = a6;
  v16._char object = a7;
  MLDataTable.subscript.getter(v16);
  outlined consume of Result<_DataTable, Error>(v14, v15);
  uint64_t v17 = v25;
  if (v26)
  {
    outlined consume of Result<_DataTable, Error>(v25, 1);
    long long v18 = 0;
    char result = 6;
  }
  else
  {
    swift_retain();
    _UntypedColumn.valueAtIndex(index:)(0, *(double *)&v12);
    outlined consume of Result<_DataTable, Error>(v17, 0);
    outlined consume of Result<_DataTable, Error>(v17, 0);
    long long v18 = v28;
    char result = v29;
  }
  *(_OWORD *)uint64_t v22 = v18;
  *(unsigned char *)(v22 + 16) = result;
  return result;
}

unint64_t MersenneTwisterGenerator.twist()()
{
  uint64_t v19 = v0;
  uint64_t v1 = (char **)(v0 + 120);
  unint64_t v2 = 0;
  uint64_t v20 = v1;
  swift_beginAccess(v1, v15, 0, 0);
  unint64_t v3 = 156;
  uint64_t v4 = v20;
  do
  {
    unint64_t v5 = v3 / 0x270;
    double v6 = *v20;
    unint64_t v7 = *((void *)*v20 + 2);
    if (v2 >= v7) {
      BUG();
    }
    unint64_t v8 = 0;
    if (v2 != 623) {
      unint64_t v8 = v2 + 1;
    }
    if (v8 >= v7) {
      BUG();
    }
    unint64_t v9 = *(void *)&v6[8 * v8 + 32] % 0x270uLL;
    unint64_t v10 = ((v9 | ((unint64_t)*(unsigned int *)&v6[8 * v2 + 36] << 32)) >> 1) ^ 0xB5026F5AA96619E9;
    if ((v9 & 1) == 0) {
      unint64_t v10 = (v9 | ((unint64_t)*(unsigned int *)&v6[8 * v2 + 36] << 32)) >> 1;
    }
    if (v2 + 156 - 624 * v5 >= v7) {
      BUG();
    }
    unint64_t v18 = v2 + 1;
    unint64_t v17 = v3;
    uint64_t v11 = *(void *)&v6[8 * v2 + 1280 - 4992 * v5];
    swift_beginAccess(v4, v16, 33, 0);
    long long v12 = *v4;
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v4);
    *uint64_t v4 = v12;
    if (!isUniquelyReferenced_nonNull_native)
    {
      long long v12 = specialized _ArrayBuffer._consumeAndCreateNew()((uint64_t)v12);
      *uint64_t v20 = v12;
    }
    if (v2 >= *((void *)v12 + 2)) {
      BUG();
    }
    *(void *)&v12[8 * v2 + 32] = v10 ^ v11;
    swift_endAccess(v16);
    *(void *)(v19 + 128) = 0;
    unint64_t v3 = v17 + 1;
    unint64_t result = v18;
    unint64_t v2 = v18;
  }
  while (v18 != 624);
  return result;
}

void *MersenneTwisterGenerator.init(seed:)(uint64_t a1)
{
  v1[2] = 32;
  v1[3] = 624;
  v1[4] = 156;
  v1[5] = 31;
  v1[6] = 0xB5026F5AA96619E9;
  v1[7] = 29;
  v1[8] = 0x5555555555555555;
  v1[9] = 17;
  v1[10] = 0x71D67FFFEDA60000;
  v1[11] = 37;
  v1[12] = 0xFFF7EEE000000000;
  v1[13] = 43;
  v1[14] = 0x5851F42D4C957F2DLL;
  v1[16] = 0;
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<UInt64>);
  unint64_t v3 = (char *)swift_allocObject(v2, 40, 7);
  *((void *)v3 + 2) = 1;
  *((void *)v3 + 3) = 2;
  *((void *)v3 + 4) = a1;
  unint64_t v4 = 0;
  do
  {
    unint64_t v5 = v4 + 1;
    if (v4 >= v4 + 1) {
      BUG();
    }
    uint64_t v6 = 1284865837 * (*(_DWORD *)&v3[8 * v4 + 32] ^ (*(void *)&v3[8 * v4 + 32] >> 30))
       + 0x5851F42D00000000 * (*(void *)&v3[8 * v4 + 32] ^ (*(void *)&v3[8 * v4 + 32] >> 30))
       + 0x4C957F2D00000000 * ((*(void *)&v3[8 * v4 + 32] ^ (*(void *)&v3[8 * v4 + 32] >> 30)) >> 32);
    BOOL v7 = __CFADD__(v5, v6);
    unint64_t v8 = v5 + v6;
    if (v7) {
      BUG();
    }
    if (*((void *)v3 + 3) >> 1 <= v5) {
      unint64_t v3 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(*((void *)v3 + 3) >= 2uLL, v4 + 2, 1, (uint64_t)v3);
    }
    *((void *)v3 + 2) = v4 + 2;
    *(void *)&v3[8 * v4++ + 40] = v8;
  }
  while (v5 != 623);
  v1[15] = v3;
  return v1;
}

Swift::UInt64 __swiftcall MersenneTwisterGenerator.next()()
{
  uint64_t v1 = *(void *)(v0 + 128);
  if (v1 == 624)
  {
    MersenneTwisterGenerator.twist()();
    uint64_t v1 = *(void *)(v0 + 128);
  }
  swift_beginAccess(v0 + 120, v8, 0, 0);
  if (v1 < 0) {
    BUG();
  }
  uint64_t v2 = *(void *)(v0 + 120);
  if ((unint64_t)v1 >= *(void *)(v2 + 16)) {
    BUG();
  }
  uint64_t v3 = *(void *)(v0 + 128);
  BOOL v4 = __OFADD__(1, v3);
  uint64_t v5 = v3 + 1;
  if (v4) {
    BUG();
  }
  unint64_t v6 = *(void *)(v2 + 8 * v1 + 32) ^ (*(void *)(v2 + 8 * v1 + 32) >> 29) & 0x555555555 ^ ((*(void *)(v2 + 8 * v1 + 32) ^ (*(void *)(v2 + 8 * v1 + 32) >> 29) & 0x555555555) << 17) & 0x71D67FFFEDA60000 ^ (((*(_DWORD *)(v2 + 8 * v1 + 32) ^ (*(void *)(v2 + 8 * v1 + 32) >> 29) & 0x55555555 ^ ((*(_DWORD *)(v2 + 8 * v1 + 32) ^ (*(void *)(v2 + 8 * v1 + 32) >> 29) & 0x55555555) << 17) & 0xEDA60000) & 0x7FFBF77) << 37);
  Swift::UInt64 result = v6 ^ (v6 >> 43);
  *(void *)(v0 + 128) = v5;
  return result;
}

uint64_t MersenneTwisterGenerator.__deallocating_deinit()
{
  swift_bridgeObjectRelease(*(void *)(v0 + 120));
  return swift_deallocClassInstance(v0, 136, 7);
}

uint64_t type metadata accessor for MersenneTwisterGenerator()
{
  return objc_opt_self(_TtC8CreateML24MersenneTwisterGenerator);
}

uint64_t specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  uint64_t result = *v4;
  *(void *)(result + 16) = a1 + 1;
  uint64_t v6 = 24 * a1;
  *(void *)(result + v6 + 32) = a2;
  *(void *)(result + v6 + 40) = a3;
  *(unsigned char *)(result + v6 + 48) = a4;
  return result;
}

char specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)(uint64_t a1, uint64_t a2)
{
  char result = *(unsigned char *)(a2 + 16);
  char v4 = *(unsigned char *)(a2 + 40);
  uint64_t v5 = *v2;
  *(void *)(v5 + 16) = a1 + 1;
  uint64_t v6 = 48 * a1;
  *(_OWORD *)(v5 + v6 + 32) = *(_OWORD *)a2;
  *(unsigned char *)(v5 + v6 + 48) = result;
  *(_OWORD *)(v5 + v6 + 56) = *(_OWORD *)(a2 + 24);
  *(unsigned char *)(v5 + v6 + 72) = v4;
  return result;
}

uint64_t _s8CreateML15MLUntypedColumnVyACxcSTRzAA22MLDataValueConvertible7ElementRpzlufcAA08_UntypedD0CyKXEfU_SaySaySiGG_TG5TA_0(void *a1)
{
  return specialized closure #1 in MLUntypedColumn.init<A>(_:)(*(void **)(v1 + 16), a1);
}

void *MLTextClassifier.DataSource.labeledTexts()(double a1)
{
  return static _TextUtilities.getTextLabeledDictionary(from:)(v1, a1);
}

void *MLTextClassifier.DataSource.stratifiedSplit(proportions:seed:labelColumn:textColumn:)(uint64_t a1, uint64_t a2, uint64_t a3, void *a4, uint64_t a5, void *a6, double a7)
{
  unint64_t v17 = a4;
  uint64_t v18 = a3;
  uint64_t v19 = a6;
  char result = static _TextUtilities.getTextLabeledDictionary(from:)(v8, a7);
  if (!v7)
  {
    char v10 = (char)result;
    specialized generateTextTable<A>(_:textColumn:labelColumn:using:)((uint64_t)result, a5, (uint64_t)v19, v18, (uint64_t)v17);
    swift_bridgeObjectRelease(v10);
    if (a2 < 0)
    {
      _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, "Negative value is not representable", 35, 2, "Swift/Integers.swift", 20, 2, 3451, 1);
      BUG();
    }
    uint64_t v19 = v15;
    char v11 = v16;
    uint64_t v12 = type metadata accessor for MersenneTwisterGenerator();
    swift_allocObject(v12, 136, 7);
    char v15 = MersenneTwisterGenerator.init(seed:)(a2);
    uint64_t v13 = (uint64_t)v19;
    specialized stratifiedSplitGenerator<A>(proportions:generator:dataTable:on:)(a1, (uint64_t)&v15, v19, v16, v18, v17, a7);
    swift_release();
    return (void *)outlined consume of Result<_DataTable, Error>(v13, v11);
  }
  return result;
}

uint64_t specialized generateTextTable<A>(_:textColumn:labelColumn:using:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v44 = a4;
  uint64_t v46 = v5;
  uint64_t v45 = a2;
  uint64_t v43 = a5;
  int v55 = unpackLabeledTexts(_:)(a1);
  specialized MutableCollection<>.shuffle<A>(using:)();
  uint64_t v8 = v55;
  int64_t v9 = v55[2];
  if (v9)
  {
    uint64_t v47 = a3;
    int v55 = _swiftEmptyArrayStorage;
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v9, 0);
    char v10 = _swiftEmptyArrayStorage;
    uint64_t v49 = v8;
    char v11 = v8 + 5;
    int64_t v48 = v9;
    do
    {
      BOOL v54 = (void *)v9;
      char v53 = (uint64_t *)*(v11 - 1);
      int64_t v12 = *v11;
      int v55 = v10;
      unint64_t v13 = v10[2];
      unint64_t v52 = v10[3];
      unint64_t v51 = v13 + 1;
      unint64_t v50 = v12;
      uint64_t v14 = v10;
      swift_bridgeObjectRetain(v12);
      char v10 = v14;
      if (v52 >> 1 <= v13)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v52 >= 2, v51, 1);
        char v10 = v55;
      }
      _OWORD v10[2] = v13 + 1;
      uint64_t v15 = 2 * v13;
      v10[v15 + 4] = v53;
      v10[v15 + 5] = v50;
      v11 += 4;
      int64_t v9 = (int64_t)v54 - 1;
    }
    while (v54 != (void *)((char *)&dword_0 + 1));
    unint64_t v52 = (unint64_t)v10;
    int v55 = _swiftEmptyArrayStorage;
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v48, 0);
    unsigned __int8 v16 = _swiftEmptyArrayStorage;
    unint64_t v17 = (uint64_t **)(v49 + 7);
    do
    {
      BOOL v54 = *(v17 - 1);
      uint64_t v18 = *v17;
      int v55 = v16;
      unint64_t v19 = v16[2];
      unint64_t v51 = v16[3];
      unint64_t v50 = v19 + 1;
      char v53 = v18;
      uint64_t v20 = v16;
      swift_bridgeObjectRetain((_BYTE)v18);
      unsigned __int8 v16 = v20;
      if (v51 >> 1 <= v19)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v51 >= 2, v50, 1);
        unsigned __int8 v16 = v55;
      }
      void v16[2] = v19 + 1;
      uint64_t v21 = 2 * v19;
      v16[v21 + 4] = v54;
      v16[v21 + 5] = v53;
      v17 += 4;
      --v48;
    }
    while (v48);
    BOOL v54 = v16;
    swift_release();
    a3 = v47;
    uint64_t v22 = (void *)v52;
  }
  else
  {
    swift_release();
    uint64_t v22 = _swiftEmptyArrayStorage;
    BOOL v54 = _swiftEmptyArrayStorage;
  }
  uint64_t v23 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, MLUntypedColumn)>);
  uint64_t inited = swift_initStackObject(v23, v41);
  *(void *)(inited + 16) = 2;
  *(void *)(inited + 24) = 4;
  *(void *)(inited + 32) = v45;
  *(void *)(inited + 40) = a3;
  int v55 = v22;
  uint64_t v25 = alloca(24);
  char v26 = alloca(32);
  unint64_t v42 = &v55;
  swift_bridgeObjectRetain(a3);
  uint64_t ML14_UntypedColumnC_s5Error_pTgm5 = _ss6ResultOsRi_zrlE8catchingAByxq_Gxyq_YKXE_tcfC8CreateML14_UntypedColumnC_s5Error_pTgm5((void (*)(void *))partial apply for specialized closure #1 in MLUntypedColumn.init<A>(_:));
  char v29 = v28;
  swift_bridgeObjectRelease((_BYTE)v55);
  char v53 = &v40;
  *(void *)(inited + 48) = ML14_UntypedColumnC_s5Error_pTgm5;
  *(unsigned char *)(inited + 56) = v29 & 1;
  *(void *)(inited + 64) = v44;
  char v30 = v43;
  *(void *)(inited + 72) = v43;
  int v55 = v54;
  char v31 = alloca(24);
  int v32 = alloca(32);
  unint64_t v42 = &v55;
  swift_bridgeObjectRetain(v30);
  uint64_t v33 = _ss6ResultOsRi_zrlE8catchingAByxq_Gxyq_YKXE_tcfC8CreateML14_UntypedColumnC_s5Error_pTgm5((void (*)(void *))closure #1 in MLUntypedColumn.init<A>(_:)specialized partial apply);
  char v35 = v34;
  swift_bridgeObjectRelease((_BYTE)v55);
  *(void *)(inited + 80) = v33;
  *(unsigned char *)(inited + 88) = v35 & 1;
  uint64_t v36 = Dictionary.init(dictionaryLiteral:)(inited, &type metadata for String, &type metadata for MLUntypedColumn, &protocol witness table for String);
  uint64_t result = specialized MLDataTable.init<A>(uniqueKeysWithValues:)(v36);
  if (!v6)
  {
    uint64_t result = (uint64_t)v55;
    char v38 = v56;
    unint64_t v39 = v46;
    void *v46 = v55;
    *((unsigned char *)v39 + 8) = v38;
  }
  return result;
}

uint64_t type metadata accessor for MLTextClassifier.DataSource(uint64_t a1)
{
  uint64_t result = type metadata singleton initialization cache for MLTextClassifier.DataSource;
  if (!type metadata singleton initialization cache for MLTextClassifier.DataSource) {
    return swift_getSingletonMetadata(a1, &nominal type descriptor for MLTextClassifier.DataSource);
  }
  return result;
}

uint64_t LinearRegressorTrainingSessionDelegate.init(sessionParameters:)(uint64_t a1)
{
  uint64_t v2 = v1 + OBJC_IVAR____TtC8CreateML38LinearRegressorTrainingSessionDelegate_trainingParameters;
  uint64_t v3 = type metadata accessor for MLLinearRegressor.PersistentParameters(0);
  __swift_storeEnumTagSinglePayload(v2, 1, 1, v3);
  DataFrame.init()(v2, 1, v4, v5);
  uint64_t v6 = v1 + OBJC_IVAR____TtC8CreateML38LinearRegressorTrainingSessionDelegate_validationData;
  uint64_t v7 = type metadata accessor for DataFrame(0);
  __swift_storeEnumTagSinglePayload(v6, 1, 1, v7);
  uint64_t v8 = v1 + OBJC_IVAR____TtC8CreateML38LinearRegressorTrainingSessionDelegate_regressor;
  uint64_t v9 = type metadata accessor for MLLinearRegressor.Regressor(0);
  __swift_storeEnumTagSinglePayload(v8, 1, 1, v9);
  uint64_t v10 = v1 + OBJC_IVAR____TtC8CreateML38LinearRegressorTrainingSessionDelegate_model;
  uint64_t v11 = type metadata accessor for MLLinearRegressor.Model(0);
  __swift_storeEnumTagSinglePayload(v10, 1, 1, v11);
  uint64_t v12 = OBJC_IVAR____TtC8CreateML38LinearRegressorTrainingSessionDelegate_trainingMetrics;
  *(_OWORD *)(v1 + OBJC_IVAR____TtC8CreateML38LinearRegressorTrainingSessionDelegate_trainingMetrics) = 0;
  *(unsigned char *)(v1 + v12 + 16) = -1;
  uint64_t v13 = OBJC_IVAR____TtC8CreateML38LinearRegressorTrainingSessionDelegate_validationMetrics;
  *(_OWORD *)(v1 + OBJC_IVAR____TtC8CreateML38LinearRegressorTrainingSessionDelegate_validationMetrics) = 0;
  *(unsigned char *)(v1 + v13 + 16) = -1;
  outlined init with take of MLClassifierMetrics(a1, v1 + OBJC_IVAR____TtC8CreateML38LinearRegressorTrainingSessionDelegate_sessionParameters, type metadata accessor for MLTrainingSessionParameters);
  return v1;
}

uint64_t *LinearRegressorTrainingSessionDelegate.init(trainingData:validationData:targetColumn:featureColumns:parameters:sessionParameters:)(uint64_t a1, uint64_t a2, uint64_t a3, void *a4, char *a5, uint64_t a6, uint64_t a7)
{
  uint64_t v68 = v7;
  uint64_t v64 = a6;
  uint64_t v69 = a5;
  uint64_t v59 = a4;
  uint64_t v58 = a3;
  uint64_t v63 = a2;
  uint64_t v60 = a1;
  uint64_t v54 = *v8;
  uint64_t v9 = type metadata accessor for MLLinearRegressor.PersistentParameters(0);
  int64_t v10 = *(void *)(*(void *)(v9 - 8) + 64);
  uint64_t v11 = alloca(v10);
  uint64_t v12 = alloca(v10);
  int v55 = &v52;
  int64_t v13 = *(void *)(*(void *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for DataFrame?)
                              - 8)
                  + 64);
  uint64_t v14 = alloca(v13);
  uint64_t v15 = alloca(v13);
  unint64_t v61 = &v52;
  uint64_t v16 = type metadata accessor for DataFrame(0);
  uint64_t v66 = *(void *)(v16 - 8);
  int64_t v17 = *(void *)(v66 + 64);
  uint64_t v18 = alloca(v17);
  unint64_t v19 = alloca(v17);
  uint64_t v62 = &v52;
  int64_t v20 = *(void *)(*(void *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for MLLinearRegressor.PersistentParameters?)
                              - 8)
                  + 64);
  uint64_t v21 = alloca(v20);
  uint64_t v22 = alloca(v20);
  char v56 = &v52;
  uint64_t v23 = (uint64_t)v8 + OBJC_IVAR____TtC8CreateML38LinearRegressorTrainingSessionDelegate_trainingParameters;
  uint64_t v57 = (uint64_t)v8 + OBJC_IVAR____TtC8CreateML38LinearRegressorTrainingSessionDelegate_trainingParameters;
  uint64_t v67 = v9;
  uint64_t v24 = v9;
  uint64_t v25 = (uint64_t)v69;
  __swift_storeEnumTagSinglePayload((uint64_t)v8 + OBJC_IVAR____TtC8CreateML38LinearRegressorTrainingSessionDelegate_trainingParameters, 1, 1, v24);
  DataFrame.init()(v23, 1, v26, v27);
  uint64_t v65 = v16;
  __swift_storeEnumTagSinglePayload((uint64_t)v8 + OBJC_IVAR____TtC8CreateML38LinearRegressorTrainingSessionDelegate_validationData, 1, 1, v16);
  uint64_t v28 = (uint64_t)v8 + OBJC_IVAR____TtC8CreateML38LinearRegressorTrainingSessionDelegate_regressor;
  uint64_t v29 = type metadata accessor for MLLinearRegressor.Regressor(0);
  __swift_storeEnumTagSinglePayload(v28, 1, 1, v29);
  uint64_t v30 = (uint64_t)v8 + OBJC_IVAR____TtC8CreateML38LinearRegressorTrainingSessionDelegate_model;
  uint64_t v31 = type metadata accessor for MLLinearRegressor.Model(0);
  uint64_t v32 = v30;
  uint64_t v33 = v60;
  char v34 = v59;
  __swift_storeEnumTagSinglePayload(v32, 1, 1, v31);
  uint64_t v35 = OBJC_IVAR____TtC8CreateML38LinearRegressorTrainingSessionDelegate_trainingMetrics;
  *(_OWORD *)((char *)v8 + OBJC_IVAR____TtC8CreateML38LinearRegressorTrainingSessionDelegate_trainingMetrics) = 0;
  *((unsigned char *)v8 + v35 + 16) = -1;
  uint64_t v36 = OBJC_IVAR____TtC8CreateML38LinearRegressorTrainingSessionDelegate_validationMetrics;
  *(_OWORD *)((char *)v8 + OBJC_IVAR____TtC8CreateML38LinearRegressorTrainingSessionDelegate_validationMetrics) = 0;
  *((unsigned char *)v8 + v36 + 16) = -1;
  uint64_t v37 = v68;
  char v38 = static _FeatureUtilities.selectFeaturesFromTrainingData(trainingData:targetColumn:featureColumns:)(v33, v58, v34, v25);
  uint64_t v68 = v37;
  if (v37)
  {
    swift_bridgeObjectRelease((_BYTE)v34);
    swift_bridgeObjectRelease(v25);
    outlined destroy of MLActivityClassifier.ModelParameters(a7, type metadata accessor for MLTrainingSessionParameters);
    outlined destroy of MLLinearRegressor.ModelParameters(v64);
    outlined destroy of Either<LogisticRegressionClassifier<Float, String>, FullyConnectedNetworkClassifier<Float, String>>(v63, &demangling cache variable for type metadata for DataFrame?);
    unint64_t v39 = *(void (**)(uint64_t, uint64_t))(v66 + 8);
    uint64_t v40 = v33;
    uint64_t v41 = v65;
    v39(v40, v65);
    outlined destroy of Either<LogisticRegressionClassifier<Float, String>, FullyConnectedNetworkClassifier<Float, String>>((uint64_t)v8 + OBJC_IVAR____TtC8CreateML38LinearRegressorTrainingSessionDelegate_trainingParameters, &demangling cache variable for type metadata for MLLinearRegressor.PersistentParameters?);
    v39((uint64_t)v8 + OBJC_IVAR____TtC8CreateML38LinearRegressorTrainingSessionDelegate_trainingData, v41);
    outlined destroy of Either<LogisticRegressionClassifier<Float, String>, FullyConnectedNetworkClassifier<Float, String>>((uint64_t)v8 + OBJC_IVAR____TtC8CreateML38LinearRegressorTrainingSessionDelegate_validationData, &demangling cache variable for type metadata for DataFrame?);
    outlined destroy of Either<LogisticRegressionClassifier<Float, String>, FullyConnectedNetworkClassifier<Float, String>>((uint64_t)v8 + OBJC_IVAR____TtC8CreateML38LinearRegressorTrainingSessionDelegate_regressor, &demangling cache variable for type metadata for MLLinearRegressor.Regressor?);
    outlined destroy of Either<LogisticRegressionClassifier<Float, String>, FullyConnectedNetworkClassifier<Float, String>>((uint64_t)v8 + OBJC_IVAR____TtC8CreateML38LinearRegressorTrainingSessionDelegate_model, &demangling cache variable for type metadata for MLLinearRegressor.Model?);
    outlined consume of MLRegressorMetrics?(*(uint64_t *)((char *)v8 + OBJC_IVAR____TtC8CreateML38LinearRegressorTrainingSessionDelegate_trainingMetrics), *(uint64_t *)((char *)v8 + OBJC_IVAR____TtC8CreateML38LinearRegressorTrainingSessionDelegate_trainingMetrics + 8), *(_DWORD *)((char *)v8 + OBJC_IVAR____TtC8CreateML38LinearRegressorTrainingSessionDelegate_trainingMetrics + 16));
    outlined consume of MLRegressorMetrics?(*(uint64_t *)((char *)v8 + OBJC_IVAR____TtC8CreateML38LinearRegressorTrainingSessionDelegate_validationMetrics), *(uint64_t *)((char *)v8 + OBJC_IVAR____TtC8CreateML38LinearRegressorTrainingSessionDelegate_validationMetrics + 8), *(_DWORD *)((char *)v8 + OBJC_IVAR____TtC8CreateML38LinearRegressorTrainingSessionDelegate_validationMetrics + 16));
    swift_deallocPartialClassInstance(v8, v54, *(unsigned int *)(*v8 + 48), *(unsigned __int16 *)(*v8 + 52));
  }
  else
  {
    uint64_t v69 = v38;
    swift_bridgeObjectRelease(v25);
    uint64_t v42 = v65;
    (*(void (**)(uint64_t *, uint64_t, uint64_t))(v66 + 16))(v62, v33, v65);
    outlined init with copy of Either<LogisticRegressionClassifier<Float, String>, FullyConnectedNetworkClassifier<Float, String>>(v63, (uint64_t)v61, &demangling cache variable for type metadata for DataFrame?);
    outlined init with copy of MLLinearRegressor.ModelParameters(v64, (uint64_t)v53);
    uint64_t v43 = (uint64_t)v55;
    uint64_t v44 = (uint64_t)v55 + *(int *)(v67 + 20);
    __swift_storeEnumTagSinglePayload(v44, 1, 1, v42);
    uint64_t v45 = v42;
    uint64_t v46 = v66;
    (*(void (**)(uint64_t, uint64_t *, uint64_t))(v66 + 32))(v43, v62, v45);
    outlined assign with take of MLLinearRegressor.Regressor?((uint64_t)v61, v44, &demangling cache variable for type metadata for DataFrame?);
    uint64_t v47 = v67;
    uint64_t v48 = *(int *)(v67 + 24);
    *(void *)(v43 + v48) = v58;
    *(void *)(v43 + v48 + 8) = v59;
    *(void *)(v43 + *(int *)(v47 + 28)) = v69;
    qmemcpy((void *)(v43 + *(int *)(v47 + 32)), v53, 0x49uLL);
    uint64_t v49 = (uint64_t)v56;
    outlined init with take of MLClassifierMetrics(v43, (uint64_t)v56, type metadata accessor for MLLinearRegressor.PersistentParameters);
    outlined destroy of MLLinearRegressor.ModelParameters(v64);
    outlined destroy of Either<LogisticRegressionClassifier<Float, String>, FullyConnectedNetworkClassifier<Float, String>>(v63, &demangling cache variable for type metadata for DataFrame?);
    (*(void (**)(uint64_t, uint64_t))(v46 + 8))(v60, v65);
    __swift_storeEnumTagSinglePayload(v49, 0, 1, v67);
    uint64_t v50 = v57;
    swift_beginAccess(v57, v53, 33, 0);
    outlined assign with take of MLLinearRegressor.Regressor?(v49, v50, &demangling cache variable for type metadata for MLLinearRegressor.PersistentParameters?);
    swift_endAccess(v53);
    outlined init with take of MLClassifierMetrics(a7, (uint64_t)v8 + OBJC_IVAR____TtC8CreateML38LinearRegressorTrainingSessionDelegate_sessionParameters, type metadata accessor for MLTrainingSessionParameters);
  }
  return v8;
}

Swift::Void __swiftcall __spoils<cf,zf,sf,of,pf,rax,rdx,rcx,rdi,rsi,r8,r9,r10,r11,r12,xmm0,xmm1,xmm2,xmm3,xmm4,xmm5,xmm6,xmm7> LinearRegressorTrainingSessionDelegate.setUp()()
{
  uint64_t v42 = v0;
  int64_t v1 = *(void *)(*(void *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for MLLinearRegressor.Model?)
                             - 8)
                 + 64);
  uint64_t v2 = alloca(v1);
  uint64_t v3 = alloca(v1);
  uint64_t v37 = v35;
  int64_t v4 = *(void *)(*(void *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for MLLinearRegressor.Regressor?)
                             - 8)
                 + 64);
  uint64_t v5 = alloca(v4);
  uint64_t v6 = alloca(v4);
  char v38 = (uint64_t *)v35;
  uint64_t v7 = alloca(v4);
  uint64_t v8 = alloca(v4);
  unint64_t v39 = v35;
  int64_t v9 = *(void *)(*(void *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for MLLinearRegressor.PersistentParameters?)
                             - 8)
                 + 64);
  int64_t v10 = alloca(v9);
  uint64_t v11 = alloca(v9);
  uint64_t v12 = type metadata accessor for MLLinearRegressor.PersistentParameters(0);
  int64_t v13 = *(void *)(*(void *)(v12 - 8) + 64);
  uint64_t v14 = alloca(v13);
  uint64_t v15 = alloca(v13);
  uint64_t v16 = v42 + OBJC_IVAR____TtC8CreateML38LinearRegressorTrainingSessionDelegate_trainingParameters;
  swift_beginAccess(v42 + OBJC_IVAR____TtC8CreateML38LinearRegressorTrainingSessionDelegate_trainingParameters, v35, 0, 0);
  outlined init with copy of Either<LogisticRegressionClassifier<Float, String>, FullyConnectedNetworkClassifier<Float, String>>(v16, (uint64_t)v35, &demangling cache variable for type metadata for MLLinearRegressor.PersistentParameters?);
  uint64_t v40 = (int *)v12;
  if (__swift_getEnumTagSinglePayload((uint64_t)v35, 1, v12) == 1)
  {
    outlined destroy of Either<LogisticRegressionClassifier<Float, String>, FullyConnectedNetworkClassifier<Float, String>>((uint64_t)v35, &demangling cache variable for type metadata for MLLinearRegressor.PersistentParameters?);
    BUG();
  }
  outlined init with take of MLClassifierMetrics((uint64_t)v35, (uint64_t)v35, type metadata accessor for MLLinearRegressor.PersistentParameters);
  uint64_t v17 = v42;
  uint64_t v18 = v42 + OBJC_IVAR____TtC8CreateML38LinearRegressorTrainingSessionDelegate_trainingData;
  swift_beginAccess(v42 + OBJC_IVAR____TtC8CreateML38LinearRegressorTrainingSessionDelegate_trainingData, v36, 33, 0);
  uint64_t v19 = type metadata accessor for DataFrame(0);
  (*(void (**)(uint64_t, unsigned char *, uint64_t))(*(void *)(v19 - 8) + 24))(v18, v35, v19);
  swift_endAccess(v36);
  int64_t v20 = v40;
  uint64_t v21 = &v35[v40[5]];
  uint64_t v22 = v17 + OBJC_IVAR____TtC8CreateML38LinearRegressorTrainingSessionDelegate_validationData;
  swift_beginAccess(v17 + OBJC_IVAR____TtC8CreateML38LinearRegressorTrainingSessionDelegate_validationData, v36, 33, 0);
  outlined assign with copy of DataFrame?((uint64_t)v21, v22);
  swift_endAccess(v36);
  uint64_t v23 = v20[6];
  uint64_t v41 = *(void *)&v35[v23];
  uint64_t v24 = *(void *)&v35[v23 + 8];
  uint64_t v25 = *(void *)&v35[v20[7]];
  uint64_t v26 = v20[8];
  uint64_t v40 = (int *)v35;
  outlined init with copy of MLLinearRegressor.ModelParameters((uint64_t)&v35[v26], (uint64_t)v36);
  swift_bridgeObjectRetain(v24);
  swift_bridgeObjectRetain(v25);
  uint64_t v27 = (uint64_t)v39;
  MLLinearRegressor.Regressor.init(annotationColumnName:featureColumnNames:parameters:)(v41, v24, v25, (uint64_t)v36);
  uint64_t v28 = type metadata accessor for MLLinearRegressor.Regressor(0);
  __swift_storeEnumTagSinglePayload(v27, 0, 1, v28);
  uint64_t v29 = v42 + OBJC_IVAR____TtC8CreateML38LinearRegressorTrainingSessionDelegate_regressor;
  swift_beginAccess(v42 + OBJC_IVAR____TtC8CreateML38LinearRegressorTrainingSessionDelegate_regressor, v36, 33, 0);
  outlined assign with take of MLLinearRegressor.Regressor?(v27, v29, &demangling cache variable for type metadata for MLLinearRegressor.Regressor?);
  swift_endAccess(v36);
  uint64_t v30 = v29;
  uint64_t v31 = (uint64_t)v38;
  outlined init with copy of Either<LogisticRegressionClassifier<Float, String>, FullyConnectedNetworkClassifier<Float, String>>(v30, (uint64_t)v38, &demangling cache variable for type metadata for MLLinearRegressor.Regressor?);
  if (__swift_getEnumTagSinglePayload(v31, 1, v28) == 1) {
    BUG();
  }
  uint64_t v41 = *v38;
  uint64_t v32 = v38[1];
  unint64_t v39 = (unsigned char *)type metadata accessor for MLLinearRegressor.Model(0);
  uint64_t v33 = (uint64_t)v37;
  swift_bridgeObjectRetain(v32);
  BaseLinearRegressor.makeTransformer()();
  *(void *)uint64_t v33 = v41;
  *(void *)(v33 + 8) = v32;
  *(_OWORD *)(v33 + 16) = 0;
  *(void *)(v33 + 32) = 0;
  outlined destroy of MLActivityClassifier.ModelParameters((uint64_t)v40, type metadata accessor for MLLinearRegressor.PersistentParameters);
  outlined destroy of MLActivityClassifier.ModelParameters((uint64_t)v38, type metadata accessor for MLLinearRegressor.Regressor);
  __swift_storeEnumTagSinglePayload(v33, 0, 1, (uint64_t)v39);
  uint64_t v34 = OBJC_IVAR____TtC8CreateML38LinearRegressorTrainingSessionDelegate_model + v42;
  swift_beginAccess(OBJC_IVAR____TtC8CreateML38LinearRegressorTrainingSessionDelegate_model + v42, v36, 33, 0);
  outlined assign with take of MLLinearRegressor.Regressor?(v33, v34, &demangling cache variable for type metadata for MLLinearRegressor.Model?);
  swift_endAccess(v36);
}

Swift::Void __swiftcall __spoils<cf,zf,sf,of,pf,rax,rdx,rcx,rdi,rsi,r8,r9,r10,r11,r12,xmm0,xmm1,xmm2,xmm3,xmm4,xmm5,xmm6,xmm7> LinearRegressorTrainingSessionDelegate.resume(from:)(Swift::OpaquePointer from)
{
  uint64_t v69 = v1;
  uint64_t v73 = v2;
  char rawValue = from._rawValue;
  int64_t v3 = *(void *)(*(void *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for MLLinearRegressor.Model?)
                             - 8)
                 + 64);
  int64_t v4 = alloca(v3);
  uint64_t v5 = alloca(v3);
  uint64_t v68 = v61;
  int64_t v6 = *(void *)(*(void *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for MLLinearRegressor.Regressor?)
                             - 8)
                 + 64);
  uint64_t v7 = alloca(v6);
  uint64_t v8 = alloca(v6);
  uint64_t v65 = v61;
  int64_t v9 = alloca(v6);
  int64_t v10 = alloca(v6);
  uint64_t v66 = v61;
  int64_t v11 = *(void *)(*(void *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for MLCheckpoint?)
                              - 8)
                  + 64);
  uint64_t v12 = alloca(v11);
  int64_t v13 = alloca(v11);
  uint64_t v64 = v61;
  uint64_t v72 = type metadata accessor for MLCheckpoint(0);
  int64_t v14 = *(void *)(*(void *)(v72 - 8) + 64);
  uint64_t v15 = alloca(v14);
  uint64_t v16 = alloca(v14);
  char v71 = v61;
  int64_t v17 = *(void *)(*(void *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for MLLinearRegressor.PersistentParameters?)
                              - 8)
                  + 64);
  uint64_t v18 = alloca(v17);
  uint64_t v19 = alloca(v17);
  uint64_t v20 = type metadata accessor for MLLinearRegressor.PersistentParameters(0);
  int64_t v21 = *(void *)(*(void *)(v20 - 8) + 64);
  uint64_t v22 = alloca(v21);
  uint64_t v23 = alloca(v21);
  uint64_t v24 = v73 + OBJC_IVAR____TtC8CreateML38LinearRegressorTrainingSessionDelegate_trainingParameters;
  swift_beginAccess(v73 + OBJC_IVAR____TtC8CreateML38LinearRegressorTrainingSessionDelegate_trainingParameters, v62, 0, 0);
  outlined init with copy of Either<LogisticRegressionClassifier<Float, String>, FullyConnectedNetworkClassifier<Float, String>>(v24, (uint64_t)v61, &demangling cache variable for type metadata for MLLinearRegressor.PersistentParameters?);
  uint64_t v67 = (int *)v20;
  if (__swift_getEnumTagSinglePayload((uint64_t)v61, 1, v20) == 1)
  {
    outlined destroy of Either<LogisticRegressionClassifier<Float, String>, FullyConnectedNetworkClassifier<Float, String>>((uint64_t)v61, &demangling cache variable for type metadata for MLLinearRegressor.PersistentParameters?);
    BUG();
  }
  outlined init with take of MLClassifierMetrics((uint64_t)v61, (uint64_t)v61, type metadata accessor for MLLinearRegressor.PersistentParameters);
  uint64_t v25 = (uint64_t)v64;
  specialized BidirectionalCollection.last.getter((uint64_t)rawValue);
  if (__swift_getEnumTagSinglePayload(v25, 1, v72) == 1)
  {
    outlined destroy of Either<LogisticRegressionClassifier<Float, String>, FullyConnectedNetworkClassifier<Float, String>>(v25, &demangling cache variable for type metadata for MLCheckpoint?);
    uint64_t v26 = lazy protocol witness table accessor for type MLCreateError and conformance MLCreateError();
    swift_allocError(&type metadata for MLCreateError, v26, 0, 0);
    *(void *)uint64_t v27 = 0xD00000000000001DLL;
    *(void *)(v27 + 8) = "reated." + 0x8000000000000000;
    *(_OWORD *)(v27 + 16) = 0;
    *(_OWORD *)(v27 + 32) = 0;
    *(unsigned char *)(v27 + 48) = 0;
    swift_willThrow(&type metadata for MLCreateError, v26, v27, v28, v29, v30);
LABEL_16:
    outlined destroy of MLActivityClassifier.ModelParameters((uint64_t)v61, type metadata accessor for MLLinearRegressor.PersistentParameters);
    return;
  }
  unint64_t v31 = 0xEB0000000064657ALL;
  uint64_t v32 = (uint64_t)v71;
  outlined init with take of MLClassifierMetrics(v25, (uint64_t)v71, type metadata accessor for MLCheckpoint);
  switch(*(unsigned char *)(v32 + *(int *)(v72 + 20)))
  {
    case 0:
      uint64_t v33 = 0x696C616974696E69;
      break;
    case 1:
      uint64_t v33 = 0x6974636172747865;
      goto LABEL_9;
    case 2:
      swift_bridgeObjectRelease(0);
      goto LABEL_12;
    case 3:
      uint64_t v33 = 0x697461756C617665;
LABEL_9:
      unint64_t v31 = 0xEA0000000000676ELL;
      break;
    case 4:
      unint64_t v31 = 0xEB00000000676E69;
      uint64_t v33 = 0x636E657265666E69;
      break;
  }
  char v34 = _stringCompareWithSmolCheck(_:_:expecting:)(v33, v31, 0x676E696E69617274, 0xE800000000000000, 0);
  swift_bridgeObjectRelease(v31);
  if ((v34 & 1) == 0)
  {
    uint64_t v56 = lazy protocol witness table accessor for type MLCreateError and conformance MLCreateError();
    swift_allocError(&type metadata for MLCreateError, v56, 0, 0);
    *(void *)uint64_t v57 = 0xD000000000000027;
    *(void *)(v57 + 8) = "ingSessionDelegate" + 0x8000000000000000;
    *(_OWORD *)(v57 + 16) = 0;
    *(_OWORD *)(v57 + 32) = 0;
    *(unsigned char *)(v57 + 48) = 0;
    swift_willThrow(&type metadata for MLCreateError, v56, v57, v58, v59, v60);
    outlined destroy of MLActivityClassifier.ModelParameters((uint64_t)v71, type metadata accessor for MLCheckpoint);
    goto LABEL_16;
  }
LABEL_12:
  uint64_t v35 = v73 + OBJC_IVAR____TtC8CreateML38LinearRegressorTrainingSessionDelegate_trainingData;
  swift_beginAccess(v73 + OBJC_IVAR____TtC8CreateML38LinearRegressorTrainingSessionDelegate_trainingData, v63, 33, 0);
  uint64_t v36 = type metadata accessor for DataFrame(0);
  (*(void (**)(uint64_t, unsigned char *, uint64_t))(*(void *)(v36 - 8) + 24))(v35, v61, v36);
  swift_endAccess(v63);
  uint64_t v37 = v67;
  char v38 = &v61[v67[5]];
  uint64_t v39 = v73 + OBJC_IVAR____TtC8CreateML38LinearRegressorTrainingSessionDelegate_validationData;
  swift_beginAccess(v73 + OBJC_IVAR____TtC8CreateML38LinearRegressorTrainingSessionDelegate_validationData, v63, 33, 0);
  outlined assign with copy of DataFrame?((uint64_t)v38, v39);
  swift_endAccess(v63);
  uint64_t v40 = v37[6];
  uint64_t v72 = *(void *)&v61[v40];
  uint64_t v41 = *(void *)&v61[v40 + 8];
  uint64_t v42 = *(void *)&v61[v37[7]];
  uint64_t v43 = v37[8];
  char rawValue = v61;
  outlined init with copy of MLLinearRegressor.ModelParameters((uint64_t)&v61[v43], (uint64_t)v63);
  uint64_t v44 = v41;
  swift_bridgeObjectRetain(v41);
  swift_bridgeObjectRetain(v42);
  uint64_t v45 = (uint64_t)v66;
  MLLinearRegressor.Regressor.init(annotationColumnName:featureColumnNames:parameters:)(v72, v44, v42, (uint64_t)v63);
  uint64_t v46 = type metadata accessor for MLLinearRegressor.Regressor(0);
  __swift_storeEnumTagSinglePayload(v45, 0, 1, v46);
  uint64_t v47 = v73 + OBJC_IVAR____TtC8CreateML38LinearRegressorTrainingSessionDelegate_regressor;
  swift_beginAccess(v73 + OBJC_IVAR____TtC8CreateML38LinearRegressorTrainingSessionDelegate_regressor, v63, 33, 0);
  outlined assign with take of MLLinearRegressor.Regressor?(v45, v47, &demangling cache variable for type metadata for MLLinearRegressor.Regressor?);
  swift_endAccess(v63);
  uint64_t v48 = v47;
  uint64_t v49 = (uint64_t)v65;
  outlined init with copy of Either<LogisticRegressionClassifier<Float, String>, FullyConnectedNetworkClassifier<Float, String>>(v48, (uint64_t)v65, &demangling cache variable for type metadata for MLLinearRegressor.Regressor?);
  if (__swift_getEnumTagSinglePayload(v49, 1, v46) == 1) {
    BUG();
  }
  uint64_t v50 = lazy protocol witness table accessor for type MLLinearRegressor.Regressor and conformance MLLinearRegressor.Regressor();
  uint64_t v51 = (uint64_t)v68;
  uint64_t v52 = (uint64_t)v71;
  uint64_t v53 = v69;
  SupervisedTabularEstimator.read(from:)(v71, v46, v50);
  outlined destroy of MLActivityClassifier.ModelParameters(v52, type metadata accessor for MLCheckpoint);
  outlined destroy of MLActivityClassifier.ModelParameters((uint64_t)rawValue, type metadata accessor for MLLinearRegressor.PersistentParameters);
  outlined destroy of MLActivityClassifier.ModelParameters(v49, type metadata accessor for MLLinearRegressor.Regressor);
  if (!v53)
  {
    uint64_t v54 = type metadata accessor for MLLinearRegressor.Model(0);
    __swift_storeEnumTagSinglePayload(v51, 0, 1, v54);
    uint64_t v55 = OBJC_IVAR____TtC8CreateML38LinearRegressorTrainingSessionDelegate_model + v73;
    swift_beginAccess(OBJC_IVAR____TtC8CreateML38LinearRegressorTrainingSessionDelegate_model + v73, v63, 33, 0);
    outlined assign with take of MLLinearRegressor.Regressor?(v51, v55, &demangling cache variable for type metadata for MLLinearRegressor.Model?);
    swift_endAccess(v63);
  }
}

Swift::Int_optional __swiftcall LinearRegressorTrainingSessionDelegate.itemCount(phase:)(CreateML::MLPhase phase)
{
  if (*(unsigned char *)phase == 2)
  {
    uint64_t v2 = OBJC_IVAR____TtC8CreateML38LinearRegressorTrainingSessionDelegate_sessionParameters + v1;
    char v3 = 0;
    v4.value = *(void *)(*(int *)(type metadata accessor for MLTrainingSessionParameters(0) + 28) + v2);
  }
  else
  {
    char v3 = 1;
    v4.value = 0;
  }
  v4.is_nil = v3;
  return v4;
}

uint64_t LinearRegressorTrainingSessionDelegate.train(from:)(uint64_t a1)
{
  v2[15] = v1;
  v2[14] = a1;
  uint64_t v3 = type metadata accessor for MetricsKey(0);
  v2[16] = v3;
  uint64_t v4 = *(void *)(v3 - 8);
  v2[17] = v4;
  v2[18] = swift_task_alloc((*(void *)(v4 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = type metadata accessor for DataFrame(0);
  v2[19] = v5;
  uint64_t v6 = *(void *)(v5 - 8);
  v2[20] = v6;
  v2[21] = swift_task_alloc((*(void *)(v6 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for MLLinearRegressor.Regressor?);
  v2[22] = swift_task_alloc((*(void *)(*(void *)(v7 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for MLLinearRegressor.PersistentParameters?);
  v2[23] = swift_task_alloc((*(void *)(*(void *)(v8 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  return swift_task_switch(LinearRegressorTrainingSessionDelegate.train(from:), 0, 0);
}

uint64_t LinearRegressorTrainingSessionDelegate.train(from:)()
{
  uint64_t v1 = v0[23];
  uint64_t v2 = OBJC_IVAR____TtC8CreateML38LinearRegressorTrainingSessionDelegate_trainingParameters + v0[15];
  swift_beginAccess(v2, v0 + 2, 0, 0);
  outlined init with copy of Either<LogisticRegressionClassifier<Float, String>, FullyConnectedNetworkClassifier<Float, String>>(v2, v1, &demangling cache variable for type metadata for MLLinearRegressor.PersistentParameters?);
  uint64_t v3 = type metadata accessor for MLLinearRegressor.PersistentParameters(0);
  LODWORD(v2) = __swift_getEnumTagSinglePayload(v1, 1, v3);
  outlined destroy of Either<LogisticRegressionClassifier<Float, String>, FullyConnectedNetworkClassifier<Float, String>>(v1, &demangling cache variable for type metadata for MLLinearRegressor.PersistentParameters?);
  if (v2 == 1) {
    BUG();
  }
  uint64_t v4 = v0[14];
  uint64_t v5 = OBJC_IVAR____TtC8CreateML38LinearRegressorTrainingSessionDelegate_sessionParameters + v0[15];
  uint64_t v6 = type metadata accessor for MLTrainingSessionParameters(0);
  uint64_t v7 = *(void *)(*(int *)(v6 + 20) + v5);
  if (__OFADD__(v7, v4)) {
    BUG();
  }
  uint64_t v8 = *(void *)(v5 + *(int *)(v6 + 28));
  uint64_t v9 = v8 - v4;
  if (__OFSUB__(v8, v4)) {
    BUG();
  }
  int64_t v10 = v0;
  uint64_t v44 = v8;
  uint64_t v47 = v7 + v4;
  int64_t v11 = v0 + 5;
  uint64_t v12 = v0 + 8;
  uint64_t v54 = v10 + 11;
  if (v7 < v9) {
    uint64_t v9 = v7;
  }
  uint64_t v13 = type metadata accessor for EventCollector();
  swift_allocObject(v13, 32, 7);
  uint64_t v14 = EventCollector.init()();
  if (v9 < 0) {
    BUG();
  }
  uint64_t v48 = v14;
  uint64_t v46 = v9;
  uint64_t v53 = v10;
  if (v9)
  {
    uint64_t v15 = v10[15];
    uint64_t v16 = v10[20];
    int64_t v17 = v12;
    uint64_t v18 = v15 + OBJC_IVAR____TtC8CreateML38LinearRegressorTrainingSessionDelegate_trainingData;
    uint64_t v43 = (uint64_t *)(OBJC_IVAR____TtC8CreateML38LinearRegressorTrainingSessionDelegate_model + v15);
    uint64_t v51 = v15 + OBJC_IVAR____TtC8CreateML38LinearRegressorTrainingSessionDelegate_regressor;
    swift_beginAccess(v15 + OBJC_IVAR____TtC8CreateML38LinearRegressorTrainingSessionDelegate_regressor, v11, 0, 0);
    swift_beginAccess(v18, v17, 0, 0);
    uint64_t v19 = v46;
    uint64_t v45 = v16;
    do
    {
      uint64_t v49 = v19;
      uint64_t v20 = v10[22];
      outlined init with copy of Either<LogisticRegressionClassifier<Float, String>, FullyConnectedNetworkClassifier<Float, String>>(v51, v20, &demangling cache variable for type metadata for MLLinearRegressor.Regressor?);
      uint64_t v21 = type metadata accessor for MLLinearRegressor.Regressor(0);
      if (__swift_getEnumTagSinglePayload(v20, 1, v21) == 1) {
        BUG();
      }
      (*(void (**)(void, uint64_t, void))(v16 + 16))(v10[21], v18, v10[19]);
      swift_beginAccess(v43, v54, 33, 0);
      uint64_t v22 = type metadata accessor for MLLinearRegressor.Model(0);
      if (__swift_getEnumTagSinglePayload((uint64_t)v43, 1, v22) == 1) {
        BUG();
      }
      uint64_t v23 = v10[21];
      swift_retain();
      MLLinearRegressor.Regressor.update(_:with:eventHandler:)(v43, v23, (uint64_t)partial apply for closure #1 in LogisticRegressionClassifierTrainingSessionDelegate.train(from:), v48);
      uint64_t v24 = v10[22];
      uint64_t v25 = v10[19];
      uint64_t v26 = v53[21];
      swift_endAccess(v54);
      swift_release();
      uint64_t v27 = v26;
      int64_t v10 = v53;
      uint64_t v16 = v45;
      (*(void (**)(uint64_t, uint64_t))(v45 + 8))(v27, v25);
      outlined destroy of MLActivityClassifier.ModelParameters(v24, type metadata accessor for MLLinearRegressor.Regressor);
      uint64_t v19 = v49 - 1;
    }
    while (v49 != 1);
  }
  uint64_t v28 = v10[18];
  uint64_t v55 = v10[16];
  uint64_t v29 = v10[17];
  static MetricsKey.trainingMaximumError.getter();
  id v30 = specialized EventCollector.getLast<A>(metric:type:)();
  char v32 = v31;
  uint64_t v33 = *(void (**)(uint64_t, uint64_t))(v29 + 8);
  v33(v28, v55);
  if ((v32 & 1) == 0)
  {
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(_swiftEmptyDictionarySingleton);
    specialized _NativeDictionary.setValue(_:forKey:isUnique:)(8, isUniquelyReferenced_nonNull_native, *(double *)&v30);
    swift_bridgeObjectRelease(0);
  }
  uint64_t v35 = v53[16];
  uint64_t v36 = v53[18];
  static MetricsKey.trainingError.getter();
  id v56 = specialized EventCollector.getLast<A>(metric:type:)();
  char v38 = v37;
  v33(v36, v35);
  if ((v38 & 1) == 0)
  {
    char v39 = swift_isUniquelyReferenced_nonNull_native(_swiftEmptyDictionarySingleton);
    specialized _NativeDictionary.setValue(_:forKey:isUnique:)(7, v39, *(double *)&v56);
    swift_bridgeObjectRelease(0);
  }
  uint64_t v40 = v53[23];
  uint64_t v41 = v53[22];
  uint64_t v50 = v53[18];
  uint64_t v52 = v53[21];
  uint64_t v57 = specialized _dictionaryUpCast<A, B, C, D>(_:)((uint64_t)_swiftEmptyDictionarySingleton);
  swift_release();
  swift_bridgeObjectRelease(_swiftEmptyDictionarySingleton);
  swift_task_dealloc(v40);
  swift_task_dealloc(v41);
  swift_task_dealloc(v52);
  swift_task_dealloc(v50);
  return ((uint64_t (*)(uint64_t, void *, BOOL))v53[1])(v46, v57, v47 >= v44);
}

uint64_t LinearRegressorTrainingSessionDelegate.evaluate(from:)()
{
  v1[25] = v0;
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for DataFrame?);
  v1[26] = swift_task_alloc((*(void *)(*(void *)(v2 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Column<Double>);
  v1[27] = v3;
  uint64_t v4 = *(void *)(v3 - 8);
  v1[28] = v4;
  v1[29] = swift_task_alloc((*(void *)(v4 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for FilledColumn<Column<Double>>);
  v1[30] = v5;
  uint64_t v6 = *(void *)(v5 - 8);
  v1[31] = v6;
  unint64_t v7 = (*(void *)(v6 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v1[32] = swift_task_alloc(v7);
  v1[33] = swift_task_alloc(v7);
  v1[34] = swift_task_alloc(v7);
  v1[35] = swift_task_alloc(v7);
  unint64_t v8 = (*(void *)(*(void *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for MLLinearRegressor.Model?)
                              - 8)
                  + 64)
      + 15) & 0xFFFFFFFFFFFFFFF0;
  v1[36] = swift_task_alloc(v8);
  v1[37] = swift_task_alloc(v8);
  uint64_t v9 = type metadata accessor for DataFrame(0);
  v1[38] = v9;
  uint64_t v10 = *(void *)(v9 - 8);
  v1[39] = v10;
  unint64_t v11 = (*(void *)(v10 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v1[40] = swift_task_alloc(v11);
  v1[41] = swift_task_alloc(v11);
  v1[42] = swift_task_alloc(v11);
  v1[43] = swift_task_alloc(v11);
  return swift_task_switch(LinearRegressorTrainingSessionDelegate.evaluate(from:), 0, 0);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v16;
  uint64_t v17;
  void (*v18)(uint64_t, uint64_t);
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  int v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  void (*v31)(uint64_t, uint64_t);
  char *v32;
  uint64_t v33;
  uint64_t v34;
  char v35;
  char v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  void (*v40)(uint64_t, uint64_t);
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  void (*v54)(uint64_t, uint64_t);
  uint64_t v55;
  void (*v56)(uint64_t, uint64_t);
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;

  uint64_t v1 = OBJC_IVAR____TtC8CreateML38LinearRegressorTrainingSessionDelegate_trainingParameters + *(void *)(v0 + 200);
  uint64_t v2 = 0;
  swift_beginAccess(v1, v0 + 16, 0, 0);
  uint64_t v3 = type metadata accessor for MLLinearRegressor.PersistentParameters(0);
  if (!__swift_getEnumTagSinglePayload(v1, 1, v3))
  {
    unint64_t v8 = *(void *)(v0 + 296);
    uint64_t v9 = *(int *)(v3 + 24);
    char v70 = *(void *)(v1 + v9);
    uint64_t v67 = *(void *)(v1 + v9 + 8);
    uint64_t v10 = OBJC_IVAR____TtC8CreateML38LinearRegressorTrainingSessionDelegate_model + *(void *)(v0 + 200);
    swift_beginAccess(v10, v0 + 40, 0, 0);
    uint64_t v59 = v10;
    outlined init with copy of Either<LogisticRegressionClassifier<Float, String>, FullyConnectedNetworkClassifier<Float, String>>(v10, v8, &demangling cache variable for type metadata for MLLinearRegressor.Model?);
    uint64_t v64 = type metadata accessor for MLLinearRegressor.Model(0);
    if (__swift_getEnumTagSinglePayload(v8, 1, v64) == 1) {
      BUG();
    }
    unint64_t v11 = *(void *)(v0 + 336);
    uint64_t v12 = *(void *)(v0 + 312);
    uint64_t v13 = *(void *)(v0 + 304);
    uint64_t v14 = OBJC_IVAR____TtC8CreateML38LinearRegressorTrainingSessionDelegate_trainingData + *(void *)(v0 + 200);
    swift_beginAccess(v14, v0 + 64, 0, 0);
    uint64_t v76 = v14;
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v12 + 16))(v11, v14, v13);
    swift_bridgeObjectRetain(v67);
    MLLinearRegressor.Model.applied(to:eventHandler:)(v11, 0, 0);
    uint64_t v42 = *(void *)(v0 + 304);
    uint64_t v16 = *(void *)(v0 + 296);
    uint64_t v51 = *(void *)(v0 + 280);
    uint64_t v62 = *(void *)(v0 + 272);
    uint64_t v49 = *(void *)(v0 + 240);
    int64_t v17 = *(void *)(v0 + 232);
    uint64_t v53 = *(void *)(v0 + 224);
    char v81 = *(void *)(v0 + 216);
    uint64_t v47 = *(void *)(v0 + 200);
    uint64_t v44 = *(void *)(v0 + 208);
    uint64_t v54 = *(void (**)(uint64_t, uint64_t))(*(void *)(v0 + 312) + 8);
    ((void (*)(void))v54)(*(void *)(v0 + 336));
    outlined destroy of MLActivityClassifier.ModelParameters(v16, type metadata accessor for MLLinearRegressor.Model);
    DataFrame.subscript.getter(v70, v67, &type metadata for Double);
    *(void *)(v0 + 136) = 0;
    uint64_t v57 = lazy protocol witness table accessor for type FullyConnectedNetworkClassifier<Float, String> and conformance FullyConnectedNetworkClassifier<A, B>(&lazy protocol witness table cache variable for type Column<Double> and conformance Column<A>, &demangling cache variable for type metadata for Column<Double>, (uint64_t)&protocol conformance descriptor for Column<A>);
    OptionalColumnProtocol.filled(with:)(v0 + 136, v81, v57);
    uint64_t v18 = *(void (**)(uint64_t, uint64_t))(v53 + 8);
    v18(v17, v81);
    swift_beginAccess(v76, v0 + 88, 32, 0);
    DataFrame.subscript.getter(v70, v67, &type metadata for Double);
    swift_endAccess(v0 + 88);
    *(void *)(v0 + 144) = 0;
    OptionalColumnProtocol.filled(with:)(v0 + 144, v81, v57);
    id v56 = v18;
    v18(v17, v81);
    uint64_t v82 = lazy protocol witness table accessor for type Double and conformance Double();
    uint64_t v19 = lazy protocol witness table accessor for type FullyConnectedNetworkClassifier<Float, String> and conformance FullyConnectedNetworkClassifier<A, B>(&lazy protocol witness table cache variable for type FilledColumn<Column<Double>> and conformance FilledColumn<A>, &demangling cache variable for type metadata for FilledColumn<Column<Double>>, (uint64_t)&protocol conformance descriptor for FilledColumn<A>);
    maximumAbsoluteError<A, B, C>(_:_:)(v51, v62, &type metadata for Double, v49, v49, v82, v19, v19);
    uint64_t v77 = *(void *)(v0 + 152);
    uint64_t v20 = v19;
    rootMeanSquaredError<A, B, C>(_:_:)(v51, v62, &type metadata for Double, v49, v49, v82, v19, v19);
    uint64_t v21 = *(void *)(v0 + 160);
    uint64_t v22 = OBJC_IVAR____TtC8CreateML38LinearRegressorTrainingSessionDelegate_trainingMetrics;
    uint64_t v23 = *(void *)(v47 + OBJC_IVAR____TtC8CreateML38LinearRegressorTrainingSessionDelegate_trainingMetrics);
    uint64_t v24 = *(void *)(v47 + OBJC_IVAR____TtC8CreateML38LinearRegressorTrainingSessionDelegate_trainingMetrics + 8);
    *(void *)(v47 + OBJC_IVAR____TtC8CreateML38LinearRegressorTrainingSessionDelegate_trainingMetrics) = v77;
    *(void *)(v47 + v22 + 8) = v21;
    uint64_t v25 = *(_DWORD *)(v47 + v22 + 16);
    *(unsigned char *)(v47 + v22 + 16) = 0;
    outlined consume of MLRegressorMetrics?(v23, v24, v25);
    uint64_t v26 = OBJC_IVAR____TtC8CreateML38LinearRegressorTrainingSessionDelegate_validationData + v47;
    swift_beginAccess(OBJC_IVAR____TtC8CreateML38LinearRegressorTrainingSessionDelegate_validationData + v47, v0 + 112, 0, 0);
    outlined init with copy of Either<LogisticRegressionClassifier<Float, String>, FullyConnectedNetworkClassifier<Float, String>>(v26, v44, &demangling cache variable for type metadata for DataFrame?);
    if (__swift_getEnumTagSinglePayload(v44, 1, v42) == 1)
    {
      uint64_t v83 = *(void *)(v0 + 344);
      char v71 = *(void *)(v0 + 304);
      uint64_t v27 = *(void *)(v0 + 280);
      uint64_t v28 = *(void *)(v0 + 272);
      uint64_t v29 = *(void *)(v0 + 248);
      id v30 = *(void *)(v0 + 240);
      uint64_t v73 = *(void *)(v0 + 200);
      uint64_t v78 = *(void *)(v0 + 208);
      swift_bridgeObjectRelease(v67);
      char v31 = *(void (**)(uint64_t, uint64_t))(v29 + 8);
      v31(v28, v30);
      v31(v27, v30);
      v54(v83, v71);
      outlined destroy of Either<LogisticRegressionClassifier<Float, String>, FullyConnectedNetworkClassifier<Float, String>>(v78, &demangling cache variable for type metadata for DataFrame?);
      char v32 = (char *)(v73 + OBJC_IVAR____TtC8CreateML38LinearRegressorTrainingSessionDelegate_validationMetrics + 16);
      uint64_t v33 = *(void *)(v73 + OBJC_IVAR____TtC8CreateML38LinearRegressorTrainingSessionDelegate_validationMetrics);
      char v34 = *(void *)(v73 + OBJC_IVAR____TtC8CreateML38LinearRegressorTrainingSessionDelegate_validationMetrics + 8);
      uint64_t v35 = *v32;
      *((_OWORD *)v32 - 1) = 0;
      uint64_t v36 = -1;
    }
    else
    {
      char v37 = *(void *)(v0 + 288);
      (*(void (**)(void, void, void))(*(void *)(v0 + 312) + 32))(*(void *)(v0 + 328), *(void *)(v0 + 208), *(void *)(v0 + 304));
      outlined init with copy of Either<LogisticRegressionClassifier<Float, String>, FullyConnectedNetworkClassifier<Float, String>>(v59, v37, &demangling cache variable for type metadata for MLLinearRegressor.Model?);
      if (__swift_getEnumTagSinglePayload(v37, 1, v64) == 1) {
        BUG();
      }
      MLLinearRegressor.Model.applied(to:eventHandler:)(*(void *)(v0 + 328), 0, 0);
      char v79 = *(void *)(v0 + 328);
      uint64_t v60 = *(void *)(v0 + 344);
      uint64_t v65 = *(void *)(v0 + 320);
      uint64_t v48 = *(void *)(v0 + 304);
      uint64_t v45 = *(void *)(v0 + 280);
      uint64_t v46 = *(void *)(v0 + 272);
      char v74 = *(void *)(v0 + 264);
      uint64_t v55 = *(void *)(v0 + 256);
      uint64_t v50 = *(void *)(v0 + 248);
      uint64_t v52 = *(void *)(v0 + 240);
      char v38 = *(void *)(v0 + 232);
      uint64_t v43 = *(void *)(v0 + 200);
      char v39 = *(void *)(v0 + 216);
      outlined destroy of MLActivityClassifier.ModelParameters(*(void *)(v0 + 288), type metadata accessor for MLLinearRegressor.Model);
      DataFrame.subscript.getter(v70, v67, &type metadata for Double);
      *(void *)(v0 + 168) = 0;
      OptionalColumnProtocol.filled(with:)(v0 + 168, v39, v57);
      v56(v38, v39);
      DataFrame.subscript.getter(v70, v67, &type metadata for Double);
      swift_bridgeObjectRelease(v67);
      *(void *)(v0 + 176) = 0;
      OptionalColumnProtocol.filled(with:)(v0 + 176, v39, v57);
      v56(v38, v39);
      maximumAbsoluteError<A, B, C>(_:_:)(v74, v55, &type metadata for Double, v52, v52, v82, v20, v20);
      uint64_t v68 = *(void *)(v0 + 184);
      rootMeanSquaredError<A, B, C>(_:_:)(v74, v55, &type metadata for Double, v52, v52, v82, v20, v20);
      uint64_t v40 = *(void (**)(uint64_t, uint64_t))(v50 + 8);
      v40(v55, v52);
      v40(v74, v52);
      v54(v65, v48);
      v54(v79, v48);
      v40(v46, v52);
      v40(v45, v52);
      v54(v60, v48);
      uint64_t v41 = *(void *)(v0 + 192);
      char v32 = (char *)(v43 + OBJC_IVAR____TtC8CreateML38LinearRegressorTrainingSessionDelegate_validationMetrics + 16);
      uint64_t v33 = *(void *)(v43 + OBJC_IVAR____TtC8CreateML38LinearRegressorTrainingSessionDelegate_validationMetrics);
      char v34 = *(void *)(v43 + OBJC_IVAR____TtC8CreateML38LinearRegressorTrainingSessionDelegate_validationMetrics + 8);
      uint64_t v35 = *v32;
      *((void *)v32 - 2) = v68;
      *((void *)v32 - 1) = v41;
      uint64_t v36 = 0;
    }
    void *v32 = v36;
    outlined consume of MLRegressorMetrics?(v33, v34, v35);
    uint64_t v2 = 1;
  }
  uint64_t v66 = v2;
  uint64_t v4 = *(void *)(v0 + 336);
  uint64_t v5 = *(void *)(v0 + 328);
  uint64_t v6 = *(void *)(v0 + 320);
  unint64_t v7 = *(void *)(v0 + 296);
  unint64_t v61 = *(void *)(v0 + 288);
  uint64_t v63 = *(void *)(v0 + 280);
  uint64_t v58 = *(void *)(v0 + 272);
  char v75 = *(void *)(v0 + 264);
  uint64_t v69 = *(void *)(v0 + 256);
  uint64_t v72 = *(void *)(v0 + 208);
  char v80 = *(void *)(v0 + 232);
  swift_task_dealloc(*(void *)(v0 + 344));
  swift_task_dealloc(v4);
  swift_task_dealloc(v5);
  swift_task_dealloc(v6);
  swift_task_dealloc(v7);
  swift_task_dealloc(v61);
  swift_task_dealloc(v63);
  swift_task_dealloc(v58);
  swift_task_dealloc(v75);
  swift_task_dealloc(v69);
  swift_task_dealloc(v80);
  swift_task_dealloc(v72);
  return (*(uint64_t (**)(uint64_t, uint64_t))(v0 + 8))(v66, 1);
}

uint64_t LinearRegressorTrainingSessionDelegate.saveCheckpoint(to:phase:iteration:)(uint64_t a1, unsigned __int8 *a2)
{
  uint64_t v4 = v2;
  uint64_t v30 = v3;
  uint64_t v32 = a1;
  unint64_t v5 = 0xEB0000000064657ALL;
  int64_t v6 = *(void *)(*(void *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for MLLinearRegressor.Model?)
                             - 8)
                 + 64);
  unint64_t v7 = alloca(v6);
  unint64_t v8 = alloca(v6);
  char v31 = v27;
  int64_t v9 = *(void *)(*(void *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for MLLinearRegressor.Regressor?)
                             - 8)
                 + 64);
  uint64_t v10 = alloca(v9);
  unint64_t v11 = alloca(v9);
  uint64_t v12 = *a2;
  uint64_t v29 = v27;
  switch(v12)
  {
    case 0:
      uint64_t v13 = v2;
      uint64_t v14 = 0x696C616974696E69;
      break;
    case 1:
      uint64_t v13 = v2;
      uint64_t v14 = 0x6974636172747865;
      goto LABEL_6;
    case 2:
      swift_bridgeObjectRelease(0);
      goto LABEL_9;
    case 3:
      uint64_t v13 = v2;
      uint64_t v14 = 0x697461756C617665;
LABEL_6:
      unint64_t v5 = 0xEA0000000000676ELL;
      break;
    case 4:
      uint64_t v13 = v2;
      unint64_t v5 = 0xEB00000000676E69;
      uint64_t v14 = 0x636E657265666E69;
      break;
  }
  LODWORD(v15) = 0;
  char v16 = _stringCompareWithSmolCheck(_:_:expecting:)(v14, v5, 0x676E696E69617274, 0xE800000000000000, 0);
  swift_bridgeObjectRelease(v5);
  BOOL v17 = (v16 & 1) == 0;
  uint64_t v4 = v13;
  if (!v17)
  {
LABEL_9:
    uint64_t v18 = v30;
    uint64_t v19 = v30 + OBJC_IVAR____TtC8CreateML38LinearRegressorTrainingSessionDelegate_regressor;
    swift_beginAccess(v30 + OBJC_IVAR____TtC8CreateML38LinearRegressorTrainingSessionDelegate_regressor, v27, 0, 0);
    uint64_t v20 = (uint64_t)v29;
    outlined init with copy of Either<LogisticRegressionClassifier<Float, String>, FullyConnectedNetworkClassifier<Float, String>>(v19, (uint64_t)v29, &demangling cache variable for type metadata for MLLinearRegressor.Regressor?);
    uint64_t v21 = type metadata accessor for MLLinearRegressor.Regressor(0);
    if (__swift_getEnumTagSinglePayload(v20, 1, v21) == 1) {
      BUG();
    }
    uint64_t v22 = OBJC_IVAR____TtC8CreateML38LinearRegressorTrainingSessionDelegate_model + v18;
    swift_beginAccess(v22, v28, 0, 0);
    uint64_t v23 = v22;
    uint64_t v15 = (uint64_t)v31;
    outlined init with copy of Either<LogisticRegressionClassifier<Float, String>, FullyConnectedNetworkClassifier<Float, String>>(v23, (uint64_t)v31, &demangling cache variable for type metadata for MLLinearRegressor.Model?);
    uint64_t v24 = type metadata accessor for MLLinearRegressor.Model(0);
    if (__swift_getEnumTagSinglePayload(v15, 1, v24) == 1) {
      BUG();
    }
    uint64_t v25 = lazy protocol witness table accessor for type MLLinearRegressor.Regressor and conformance MLLinearRegressor.Regressor();
    SupervisedTabularEstimator.write(_:to:overwrite:)(v15, v32, 1, v21, v25);
    outlined destroy of MLActivityClassifier.ModelParameters(v15, type metadata accessor for MLLinearRegressor.Model);
    outlined destroy of MLActivityClassifier.ModelParameters(v20, type metadata accessor for MLLinearRegressor.Regressor);
    if (!v4) {
      LOBYTE(v15) = 1;
    }
  }
  return v15;
}

uint64_t LinearRegressorTrainingSessionDelegate.save(to:)(uint64_t a1)
{
  uint64_t v19 = v1;
  uint64_t v20 = a1;
  int64_t v3 = *(void *)(*(void *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for MLLinearRegressor.PersistentParameters?)
                             - 8)
                 + 64);
  uint64_t v4 = alloca(v3);
  unint64_t v5 = alloca(v3);
  uint64_t v6 = type metadata accessor for MLLinearRegressor.PersistentParameters(0);
  int64_t v7 = *(void *)(*(void *)(v6 - 8) + 64);
  unint64_t v8 = alloca(v7);
  int64_t v9 = alloca(v7);
  uint64_t v10 = OBJC_IVAR____TtC8CreateML38LinearRegressorTrainingSessionDelegate_trainingParameters + v2;
  swift_beginAccess(v10, v18, 0, 0);
  outlined init with copy of Either<LogisticRegressionClassifier<Float, String>, FullyConnectedNetworkClassifier<Float, String>>(v10, (uint64_t)&v17, &demangling cache variable for type metadata for MLLinearRegressor.PersistentParameters?);
  if (__swift_getEnumTagSinglePayload((uint64_t)&v17, 1, v6) == 1)
  {
    outlined destroy of Either<LogisticRegressionClassifier<Float, String>, FullyConnectedNetworkClassifier<Float, String>>((uint64_t)&v17, &demangling cache variable for type metadata for MLLinearRegressor.PersistentParameters?);
    uint64_t v11 = lazy protocol witness table accessor for type MLCreateError and conformance MLCreateError();
    swift_allocError(&type metadata for MLCreateError, v11, 0, 0);
    *(void *)uint64_t v12 = 0xD000000000000030;
    *(void *)(v12 + 8) = "Feature Extractor" + 0x8000000000000000;
    *(_OWORD *)(v12 + 16) = 0;
    *(_OWORD *)(v12 + 32) = 0;
    *(unsigned char *)(v12 + 48) = 2;
    return swift_willThrow(&type metadata for MLCreateError, v11, v12, v13, v14, v15);
  }
  else
  {
    outlined init with take of MLClassifierMetrics((uint64_t)&v17, (uint64_t)&v17, type metadata accessor for MLLinearRegressor.PersistentParameters);
    MLLinearRegressor.PersistentParameters.save(toSessionDirectory:)(v20);
    return outlined destroy of MLActivityClassifier.ModelParameters((uint64_t)&v17, type metadata accessor for MLLinearRegressor.PersistentParameters);
  }
}

NSURL *LinearRegressorTrainingSessionDelegate.restore(from:phase:)(uint64_t a1)
{
  uint64_t v36 = (uint64_t *)v1;
  uint64_t v31 = v2;
  uint64_t v30 = a1;
  int64_t v3 = *(void *)(*(void *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for MLLinearRegressor.PersistentParameters?)
                             - 8)
                 + 64);
  uint64_t v4 = alloca(v3);
  unint64_t v5 = alloca(v3);
  uint64_t v33 = &v27;
  uint64_t v6 = alloca(v3);
  int64_t v7 = alloca(v3);
  uint64_t v35 = &v27;
  uint64_t v8 = type metadata accessor for URL(0);
  uint64_t v9 = *(void *)(v8 - 8);
  int64_t v10 = *(void *)(v9 + 64);
  uint64_t v11 = alloca(v10);
  uint64_t v12 = alloca(v10);
  uint64_t v32 = type metadata accessor for MLLinearRegressor.PersistentParameters(0);
  int64_t v13 = *(void *)(*(void *)(v32 - 8) + 64);
  uint64_t v14 = alloca(v13);
  uint64_t v15 = alloca(v13);
  char v34 = &v27;
  char v16 = alloca(v13);
  uint64_t v17 = alloca(v13);
  (*(void (**)(uint64_t *, uint64_t, uint64_t))(v9 + 16))(&v27, v30, v8);
  uint64_t v18 = (uint64_t)v36;
  uint64_t result = MLLinearRegressor.PersistentParameters.init(sessionDirectory:)(&v27);
  if (!v18)
  {
    uint64_t v36 = &v27;
    uint64_t v20 = OBJC_IVAR____TtC8CreateML38LinearRegressorTrainingSessionDelegate_trainingParameters + v31;
    swift_beginAccess(OBJC_IVAR____TtC8CreateML38LinearRegressorTrainingSessionDelegate_trainingParameters + v31, v28, 0, 0);
    uint64_t v21 = (uint64_t)v35;
    outlined init with copy of Either<LogisticRegressionClassifier<Float, String>, FullyConnectedNetworkClassifier<Float, String>>(v20, (uint64_t)v35, &demangling cache variable for type metadata for MLLinearRegressor.PersistentParameters?);
    uint64_t v22 = v21;
    uint64_t v23 = v32;
    if (__swift_getEnumTagSinglePayload(v22, 1, v32) == 1)
    {
      outlined destroy of Either<LogisticRegressionClassifier<Float, String>, FullyConnectedNetworkClassifier<Float, String>>((uint64_t)v35, &demangling cache variable for type metadata for MLLinearRegressor.PersistentParameters?);
      uint64_t v24 = (uint64_t)v33;
      outlined init with take of MLClassifierMetrics((uint64_t)v36, (uint64_t)v33, type metadata accessor for MLLinearRegressor.PersistentParameters);
      __swift_storeEnumTagSinglePayload(v24, 0, 1, v23);
      swift_beginAccess(v20, v29, 33, 0);
      outlined assign with take of MLLinearRegressor.Regressor?(v24, v20, &demangling cache variable for type metadata for MLLinearRegressor.PersistentParameters?);
      return (NSURL *)swift_endAccess(v29);
    }
    else
    {
      uint64_t v25 = (uint64_t)v34;
      outlined init with take of MLClassifierMetrics((uint64_t)v35, (uint64_t)v34, type metadata accessor for MLLinearRegressor.PersistentParameters);
      uint64_t v26 = (uint64_t)v36;
      LinearRegressorTrainingSessionDelegate.verifyThatParametersAreCompatible(_:_:)((uint64_t)v36, v25);
      outlined destroy of MLActivityClassifier.ModelParameters(v25, type metadata accessor for MLLinearRegressor.PersistentParameters);
      return (NSURL *)outlined destroy of MLActivityClassifier.ModelParameters(v26, type metadata accessor for MLLinearRegressor.PersistentParameters);
    }
  }
  return result;
}

uint64_t LinearRegressorTrainingSessionDelegate.verifyThatParametersAreCompatible(_:_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v43 = v2;
  uint64_t v3 = type metadata accessor for MLLinearRegressor.PersistentParameters(0);
  uint64_t v4 = *(int *)(v3 + 24);
  uint64_t v5 = *(void *)(a1 + v4);
  uint64_t v6 = *(void *)(a1 + v4 + 8);
  uint64_t v7 = *(void *)(a2 + v4);
  uint64_t v47 = a2;
  uint64_t v8 = *(void *)(a2 + v4 + 8);
  uint64_t v48 = v3;
  if (v5 == v7 && v6 == v8
    || (v46 = v6, char v9 = _stringCompareWithSmolCheck(_:_:expecting:)(v5, v6, v7, v8, 0), v3 = v48, (v9 & 1) != 0))
  {
    uint64_t v10 = *(void *)(a1 + *(int *)(v3 + 28));
    uint64_t v11 = v3;
    swift_bridgeObjectRetain(v10);
    uint64_t v45 = v10;
    uint64_t v12 = specialized Set.init<A>(_:)(v10);
    uint64_t v13 = *(void *)(v47 + *(int *)(v11 + 28));
    swift_bridgeObjectRetain(v13);
    uint64_t v44 = v13;
    uint64_t v14 = specialized Set.init<A>(_:)(v13);
    LOBYTE(v13) = v14;
    char v15 = specialized static Set.== infix(_:_:)(v12, v14);
    swift_bridgeObjectRelease(v12);
    swift_bridgeObjectRelease(v13);
    if (v15)
    {
      static MLLinearRegressor.ModelParameters.firstIncompatibility(_:_:)(*(int *)(v48 + 32) + a1, *(int *)(v48 + 32) + v47);
      uint64_t result = outlined init with take of (name: String, originalValue: String, newValue: String)?((uint64_t)v34, (uint64_t)&v35);
      uint64_t v17 = v36;
      if (!v36) {
        return result;
      }
      uint64_t v18 = v35;
      uint64_t v48 = v37;
      uint64_t v46 = v38;
      uint64_t v47 = v39;
      uint64_t v19 = v40;
      uint64_t v20 = lazy protocol witness table accessor for type MLCreateError and conformance MLCreateError();
      swift_allocError(&type metadata for MLCreateError, v20, 0, 0);
      *(void *)uint64_t v21 = v18;
      uint64_t v25 = v48;
    }
    else
    {
      swift_bridgeObjectRetain(v45);
      uint64_t v26 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [String]);
      uint64_t v27 = lazy protocol witness table accessor for type FullyConnectedNetworkClassifier<Float, String> and conformance FullyConnectedNetworkClassifier<A, B>(&lazy protocol witness table cache variable for type [String] and conformance [A], &demangling cache variable for type metadata for [String], (uint64_t)&protocol conformance descriptor for [A]);
      uint64_t v48 = BidirectionalCollection<>.joined(separator:)(8236, 0xE200000000000000, v26, v27);
      uint64_t v46 = v28;
      swift_bridgeObjectRelease(v45);
      swift_bridgeObjectRetain(v44);
      uint64_t v29 = BidirectionalCollection<>.joined(separator:)(8236, 0xE200000000000000, v26, v27);
      uint64_t v31 = v30;
      swift_bridgeObjectRelease(v44);
      uint64_t v41 = v29;
      uint64_t v42 = v31;
      uint64_t v25 = v48;
      uint64_t v47 = String.init<A>(_:)(&v41, &type metadata for String, &protocol witness table for String, &protocol witness table for String);
      uint64_t v19 = v32;
      uint64_t v20 = lazy protocol witness table accessor for type MLCreateError and conformance MLCreateError();
      swift_allocError(&type metadata for MLCreateError, v20, 0, 0);
      *(void *)uint64_t v21 = 0xD000000000000011;
      uint64_t v17 = "Classifier.swift" + 0x8000000000000000;
    }
  }
  else
  {
    uint64_t v41 = v7;
    uint64_t v42 = v8;
    swift_bridgeObjectRetain(v46);
    swift_bridgeObjectRetain(v8);
    uint64_t v47 = String.init<A>(_:)(&v41, &type metadata for String, &protocol witness table for String, &protocol witness table for String);
    uint64_t v25 = v5;
    uint64_t v19 = v33;
    uint64_t v20 = lazy protocol witness table accessor for type MLCreateError and conformance MLCreateError();
    swift_allocError(&type metadata for MLCreateError, v20, 0, 0);
    *(void *)uint64_t v21 = 0x6320746567726154;
    uint64_t v17 = (char *)0xED00006E6D756C6FLL;
  }
  *(void *)(v21 + 8) = v17;
  *(void *)(v21 + 16) = v25;
  *(void *)(v21 + 24) = v46;
  *(void *)(v21 + 32) = v47;
  *(void *)(v21 + 40) = v19;
  *(unsigned char *)(v21 + 48) = 3;
  return swift_willThrow(&type metadata for MLCreateError, v20, v21, v22, v23, v24);
}

uint64_t LinearRegressorTrainingSessionDelegate.deinit()
{
  outlined destroy of MLActivityClassifier.ModelParameters(v0 + OBJC_IVAR____TtC8CreateML38LinearRegressorTrainingSessionDelegate_sessionParameters, type metadata accessor for MLTrainingSessionParameters);
  outlined destroy of Either<LogisticRegressionClassifier<Float, String>, FullyConnectedNetworkClassifier<Float, String>>(v0 + OBJC_IVAR____TtC8CreateML38LinearRegressorTrainingSessionDelegate_trainingParameters, &demangling cache variable for type metadata for MLLinearRegressor.PersistentParameters?);
  uint64_t v1 = v0 + OBJC_IVAR____TtC8CreateML38LinearRegressorTrainingSessionDelegate_trainingData;
  uint64_t v2 = type metadata accessor for DataFrame(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(v1, v2);
  outlined destroy of Either<LogisticRegressionClassifier<Float, String>, FullyConnectedNetworkClassifier<Float, String>>(v0 + OBJC_IVAR____TtC8CreateML38LinearRegressorTrainingSessionDelegate_validationData, &demangling cache variable for type metadata for DataFrame?);
  outlined destroy of Either<LogisticRegressionClassifier<Float, String>, FullyConnectedNetworkClassifier<Float, String>>(v0 + OBJC_IVAR____TtC8CreateML38LinearRegressorTrainingSessionDelegate_regressor, &demangling cache variable for type metadata for MLLinearRegressor.Regressor?);
  outlined destroy of Either<LogisticRegressionClassifier<Float, String>, FullyConnectedNetworkClassifier<Float, String>>(v0 + OBJC_IVAR____TtC8CreateML38LinearRegressorTrainingSessionDelegate_model, &demangling cache variable for type metadata for MLLinearRegressor.Model?);
  outlined consume of MLRegressorMetrics?(*(void *)(v0 + OBJC_IVAR____TtC8CreateML38LinearRegressorTrainingSessionDelegate_trainingMetrics), *(void *)(v0 + OBJC_IVAR____TtC8CreateML38LinearRegressorTrainingSessionDelegate_trainingMetrics + 8), *(_DWORD *)(v0 + OBJC_IVAR____TtC8CreateML38LinearRegressorTrainingSessionDelegate_trainingMetrics + 16));
  outlined consume of MLRegressorMetrics?(*(void *)(v0 + OBJC_IVAR____TtC8CreateML38LinearRegressorTrainingSessionDelegate_validationMetrics), *(void *)(v0 + OBJC_IVAR____TtC8CreateML38LinearRegressorTrainingSessionDelegate_validationMetrics + 8), *(_DWORD *)(v0 + OBJC_IVAR____TtC8CreateML38LinearRegressorTrainingSessionDelegate_validationMetrics + 16));
  return v0;
}

uint64_t LinearRegressorTrainingSessionDelegate.__deallocating_deinit()
{
  LinearRegressorTrainingSessionDelegate.deinit();
  return swift_deallocClassInstance(v0, *(unsigned int *)(*(void *)v0 + 48), *(unsigned __int16 *)(*(void *)v0 + 52));
}

uint64_t ObjC metadata update function for LinearRegressorTrainingSessionDelegate()
{
  return type metadata accessor for LinearRegressorTrainingSessionDelegate(0);
}

uint64_t type metadata accessor for LinearRegressorTrainingSessionDelegate(uint64_t a1)
{
  uint64_t result = type metadata singleton initialization cache for LinearRegressorTrainingSessionDelegate;
  if (!type metadata singleton initialization cache for LinearRegressorTrainingSessionDelegate) {
    return swift_getSingletonMetadata(a1, &nominal type descriptor for LinearRegressorTrainingSessionDelegate);
  }
  return result;
}

uint64_t type metadata completion function for LinearRegressorTrainingSessionDelegate(uint64_t a1)
{
  uint64_t result = type metadata accessor for MLTrainingSessionParameters(319);
  if (v2 <= 0x3F)
  {
    v8[0] = *(void *)(result - 8) + 64;
    uint64_t result = type metadata accessor for MLSoundClassifier.PersistentParameters?(319, &lazy cache variable for type metadata for MLLinearRegressor.PersistentParameters?, type metadata accessor for MLLinearRegressor.PersistentParameters);
    if (v3 <= 0x3F)
    {
      v8[1] = *(void *)(result - 8) + 64;
      uint64_t result = type metadata accessor for DataFrame(319);
      if (v4 <= 0x3F)
      {
        _OWORD v8[2] = *(void *)(result - 8) + 64;
        uint64_t result = type metadata accessor for MLSoundClassifier.PersistentParameters?(319, &lazy cache variable for type metadata for DataFrame?, (uint64_t (*)(uint64_t))&type metadata accessor for DataFrame);
        if (v5 <= 0x3F)
        {
          v8[3] = *(void *)(result - 8) + 64;
          uint64_t result = type metadata accessor for MLSoundClassifier.PersistentParameters?(319, &lazy cache variable for type metadata for MLLinearRegressor.Regressor?, type metadata accessor for MLLinearRegressor.Regressor);
          if (v6 <= 0x3F)
          {
            double v8[4] = *(void *)(result - 8) + 64;
            uint64_t result = type metadata accessor for MLSoundClassifier.PersistentParameters?(319, &lazy cache variable for type metadata for MLLinearRegressor.Model?, type metadata accessor for MLLinearRegressor.Model);
            if (v7 <= 0x3F)
            {
              v8[5] = *(void *)(result - 8) + 64;
              void v8[6] = &unk_34EBC8;
              v8[7] = &unk_34EBC8;
              uint64_t result = swift_updateClassMetadata2(a1, 256, 8, v8, a1 + 80);
              if (!result) {
                return 0;
              }
            }
          }
        }
      }
    }
  }
  return result;
}

void protocol witness for TrainingSessionDelegate.setUp() in conformance LinearRegressorTrainingSessionDelegate()
{
}

void protocol witness for TrainingSessionDelegate.resume(from:) in conformance LinearRegressorTrainingSessionDelegate(Swift::OpaquePointer a1)
{
}

unint64_t protocol witness for TrainingSessionDelegate.itemCount(phase:) in conformance LinearRegressorTrainingSessionDelegate(CreateML::MLPhase a1)
{
  return (unint64_t)LinearRegressorTrainingSessionDelegate.itemCount(phase:)(a1);
}

uint64_t protocol witness for TrainingSessionDelegate.train(from:) in conformance LinearRegressorTrainingSessionDelegate(uint64_t a1)
{
  unint64_t v2 = (void *)swift_task_alloc(dword_3ABC3C);
  *(void *)(v1 + 16) = v2;
  *unint64_t v2 = v1;
  v2[1] = protocol witness for TrainingSessionDelegate.train(from:) in conformance SoundClassifierTrainingSessionDelegate;
  return LinearRegressorTrainingSessionDelegate.train(from:)(a1);
}

uint64_t protocol witness for TrainingSessionDelegate.evaluate(from:) in conformance LinearRegressorTrainingSessionDelegate()
{
  uint64_t v1 = (void *)swift_task_alloc(dword_3ABC34);
  *(void *)(v0 + 16) = v1;
  void *v1 = v0;
  v1[1] = protocol witness for TrainingSessionDelegate.evaluate(from:) in conformance SoundClassifierTrainingSessionDelegate;
  return LinearRegressorTrainingSessionDelegate.evaluate(from:)();
}

uint64_t protocol witness for TrainingSessionDelegate.saveCheckpoint(to:phase:iteration:) in conformance LinearRegressorTrainingSessionDelegate(uint64_t a1, unsigned __int8 *a2)
{
  return LinearRegressorTrainingSessionDelegate.saveCheckpoint(to:phase:iteration:)(a1, a2);
}

uint64_t protocol witness for TrainingSessionCodable.save(to:) in conformance LinearRegressorTrainingSessionDelegate(uint64_t a1)
{
  return LinearRegressorTrainingSessionDelegate.save(to:)(a1);
}

NSURL *protocol witness for TrainingSessionCodable.restore(from:phase:) in conformance LinearRegressorTrainingSessionDelegate(uint64_t a1)
{
  return LinearRegressorTrainingSessionDelegate.restore(from:phase:)(a1);
}

uint64_t lazy protocol witness table accessor for type MLLinearRegressor.Regressor and conformance MLLinearRegressor.Regressor()
{
  uint64_t result = lazy protocol witness table cache variable for type MLLinearRegressor.Regressor and conformance MLLinearRegressor.Regressor;
  if (!lazy protocol witness table cache variable for type MLLinearRegressor.Regressor and conformance MLLinearRegressor.Regressor)
  {
    uint64_t v1 = type metadata accessor for MLLinearRegressor.Regressor(255);
    uint64_t result = swift_getWitnessTable(&protocol conformance descriptor for MLLinearRegressor.Regressor, v1);
    lazy protocol witness table cache variable for type MLLinearRegressor.Regressor and conformance MLLinearRegressor.Regressor = result;
  }
  return result;
}

{
  uint64_t result;
  uint64_t v1;

  uint64_t result = lazy protocol witness table cache variable for type MLLinearRegressor.Regressor and conformance MLLinearRegressor.Regressor;
  if (!lazy protocol witness table cache variable for type MLLinearRegressor.Regressor and conformance MLLinearRegressor.Regressor)
  {
    uint64_t v1 = type metadata accessor for MLLinearRegressor.Regressor(255);
    uint64_t result = swift_getWitnessTable(&protocol conformance descriptor for MLLinearRegressor.Regressor, v1);
    lazy protocol witness table cache variable for type MLLinearRegressor.Regressor and conformance MLLinearRegressor.Regressor = result;
  }
  return result;
}

uint64_t outlined consume of MLRegressorMetrics?(uint64_t a1, uint64_t a2, char a3)
{
  if (a3 != -1) {
    return outlined consume of Result<(Int, Int), Error>(a1, a2, a3 & 1);
  }
  return result;
}

uint64_t outlined init with copy of MLLinearRegressor.ModelParameters(uint64_t a1, uint64_t a2)
{
  return a2;
}

uint64_t outlined init with take of (name: String, originalValue: String, newValue: String)?(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (name: String, originalValue: String, newValue: String)?);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v2 - 8) + 32))(a2, a1, v2);
  return a2;
}

uint64_t outlined destroy of MLLinearRegressor.ModelParameters(uint64_t a1)
{
  return a1;
}

uint64_t outlined assign with take of MLLinearRegressor.Regressor?(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(a3);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v3 - 8) + 40))(a2, a1, v3);
  return a2;
}

uint64_t CMLParameters.Key.rawValue.getter(char a1)
{
  switch(a1)
  {
    case 0:
      uint64_t result = 0x6F635F6C6562616CLL;
      break;
    case 1:
    case 57:
    case 74:
    case 75:
      uint64_t result = 0xD000000000000011;
      break;
    case 2:
    case 73:
      uint64_t result = 0xD000000000000013;
      break;
    case 3:
      uint64_t result = 0x69746164696C6176;
      break;
    case 4:
      uint64_t result = 1635017060;
      break;
    case 5:
      uint64_t result = 0x746567726174;
      break;
    case 6:
      uint64_t result = 0x736E6F6974706FLL;
      break;
    case 7:
      uint64_t result = 7107189;
      break;
    case 8:
      uint64_t result = 1752457584;
      break;
    case 9:
      uint64_t result = 0x61625F726F727265;
      break;
    case 10:
      uint64_t result = 0x726564616568;
      break;
    case 11:
      uint64_t result = 0x6574696D696C6564;
      break;
    case 12:
      uint64_t result = 0x5F746E656D6D6F63;
      break;
    case 13:
      uint64_t result = 0x635F657061637365;
      break;
    case 14:
      uint64_t result = 0x715F656C62756F64;
      break;
    case 15:
      uint64_t result = 0x68635F65746F7571;
      break;
    case 16:
    case 64:
      uint64_t result = 0xD000000000000012;
      break;
    case 17:
      uint64_t result = 0x65756C61765F616ELL;
      break;
    case 18:
      uint64_t result = 0x7265745F656E696CLL;
      break;
    case 19:
      uint64_t result = 0x635F74757074756FLL;
      break;
    case 20:
      uint64_t result = 0x696D696C5F776F72;
      break;
    case 21:
      uint64_t result = 0x776F725F70696B73;
      break;
    case 22:
      uint64_t result = 0x6C6F635F74786574;
      break;
    case 23:
      uint64_t result = 0x6E6F697461636F6CLL;
      break;
    case 24:
      uint64_t result = 0x635F6874676E656CLL;
      break;
    case 25:
      uint64_t result = 1954047348;
      break;
    case 26:
      uint64_t result = 0x6F635F6E656B6F74;
      break;
    case 27:
      uint64_t result = 0x656D616E656C6966;
      break;
    case 28:
      uint64_t result = 0x6974636964657270;
      break;
    case 29:
      uint64_t result = 0x63697274656DLL;
      break;
    case 30:
      uint64_t result = 0x6F7272655F78616DLL;
      break;
    case 31:
      uint64_t result = 1702063474;
      break;
    case 32:
    case 54:
    case 62:
      uint64_t result = 0xD000000000000010;
      break;
    case 33:
      uint64_t result = 0x7374706F5FLL;
      break;
    case 34:
      uint64_t result = 0x745F74757074756FLL;
      break;
    case 35:
      uint64_t result = 0x646C656966;
      break;
    case 36:
      uint64_t result = 0x65665F6F69647561;
      break;
    case 37:
      uint64_t result = 0x5F6E6F6973736573;
      break;
    case 38:
      uint64_t result = 0x736D657469;
      break;
    case 39:
      uint64_t result = 107;
      break;
    case 40:
      uint64_t result = 0x65736F62726576;
      break;
    case 41:
      uint64_t result = 0x5F6C6C615F746567;
      break;
    case 42:
      uint64_t result = 0x74657361746164;
      break;
    case 43:
      uint64_t result = 0x7461645F72657375;
      break;
    case 44:
      uint64_t result = 0x7461645F6D657469;
      break;
    case 45:
      uint64_t result = 0x61645F6172747865;
      break;
    case 46:
      uint64_t result = 0x5F7473657261656ELL;
      break;
    case 47:
      uint64_t result = 1937010799;
      break;
    case 48:
      uint64_t result = 0x7972657571;
      break;
    case 49:
      uint64_t result = 0x6B5F706F74;
      break;
    case 50:
      uint64_t result = 0x7463697274736572;
      break;
    case 51:
      uint64_t result = 0x6564756C637865;
      break;
    case 52:
      uint64_t result = 0xD00000000000001DLL;
      break;
    case 53:
    case 56:
      uint64_t result = 0xD000000000000017;
      break;
    case 55:
      uint64_t result = 0x7366666F747563;
      break;
    case 58:
      uint64_t result = 0xD000000000000014;
      break;
    case 59:
      uint64_t result = 0xD000000000000016;
      break;
    case 60:
      uint64_t result = 0xD000000000000019;
      break;
    case 61:
      uint64_t result = 0x7963617275636361;
      break;
    case 63:
      uint64_t result = 0x625F74726F706572;
      break;
    case 65:
      uint64_t result = 0x6F69736963657270;
      break;
    case 66:
      uint64_t result = 0x6C6C61636572;
      break;
    case 67:
      uint64_t result = 6518113;
      break;
    case 68:
      uint64_t result = 0x767275635F636F72;
      break;
    case 69:
      uint64_t result = 0x65726F63735F3166;
      break;
    case 70:
      uint64_t result = 0x73736F6C5F676F6CLL;
      break;
    case 71:
      uint64_t result = 0x656C797473;
      break;
    case 72:
      uint64_t result = 0x746E65746E6F63;
      break;
  }
  return result;
}

unint64_t MLTextClassifier.FeatureExtractorType.description.getter()
{
  unint64_t v1 = 0xD000000000000015;
  uint64_t v2 = type metadata accessor for URL(0);
  uint64_t v16 = *(void *)(v2 - 8);
  int64_t v3 = *(void *)(v16 + 64);
  unint64_t v4 = alloca(v3);
  unint64_t v5 = alloca(v3);
  int64_t v6 = *(void *)(*(void *)(type metadata accessor for MLTextClassifier.FeatureExtractorType(0) - 8) + 64);
  unint64_t v7 = alloca(v6);
  uint64_t v8 = alloca(v6);
  outlined init with copy of MLTextClassifier.FeatureExtractorType(v0, (uint64_t)&v14);
  switch(__swift_getEnumTagSinglePayload((uint64_t)&v14, 4, v2))
  {
    case 0u:
      (*(void (**)(unint64_t *, unint64_t *, uint64_t))(v16 + 32))(&v14, &v14, v2);
      unint64_t v14 = 0;
      char v15 = (char *)0xE000000000000000;
      _StringGuts.grow(_:)(29);
      char v9 = v15;
      swift_bridgeObjectRelease((_BYTE)v15);
      unint64_t v14 = 0xD00000000000001ALL;
      char v15 = "image_column_name" + 0x8000000000000000;
      v10._uint64_t countAndFlagsBits = URL.path.getter(v9);
      char object = (char)v10._object;
      String.append(_:)(v10);
      swift_bridgeObjectRelease(object);
      v12._uint64_t countAndFlagsBits = 39;
      v12._char object = (void *)0xE100000000000000;
      String.append(_:)(v12);
      unint64_t v1 = v14;
      (*(void (**)(unint64_t *, uint64_t))(v16 + 8))(&v14, v2);
      break;
    case 1u:
      return v1;
    case 2u:
      unint64_t v1 = 0xD000000000000016;
      break;
    case 3u:
      unint64_t v1 = 0xD000000000000027;
      break;
    case 4u:
      unint64_t v1 = 0xD000000000000046;
      break;
  }
  return v1;
}

uint64_t type metadata accessor for MLTextClassifier.FeatureExtractorType(uint64_t a1)
{
  uint64_t result = type metadata singleton initialization cache for MLTextClassifier.FeatureExtractorType;
  if (!type metadata singleton initialization cache for MLTextClassifier.FeatureExtractorType) {
    return swift_getSingletonMetadata(a1, &nominal type descriptor for MLTextClassifier.FeatureExtractorType);
  }
  return result;
}

uint64_t outlined init with copy of MLTextClassifier.FeatureExtractorType(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = type metadata accessor for MLTextClassifier.FeatureExtractorType(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v2 - 8) + 16))(a2, a1, v2);
  return a2;
}

unint64_t MLTextClassifier.FeatureExtractorType.debugDescription.getter()
{
  return MLTextClassifier.FeatureExtractorType.description.getter();
}

unint64_t MLTextClassifier.FeatureExtractorType.playgroundDescription.getter()
{
  unint64_t v1 = v0;
  unint64_t result = MLTextClassifier.FeatureExtractorType.description.getter();
  v1[3] = (unint64_t)&type metadata for String;
  unint64_t *v1 = result;
  v1[1] = v3;
  return result;
}

unint64_t protocol witness for CustomStringConvertible.description.getter in conformance MLTextClassifier.FeatureExtractorType()
{
  return MLTextClassifier.FeatureExtractorType.description.getter();
}

unint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance MLTextClassifier.FeatureExtractorType()
{
  return MLTextClassifier.FeatureExtractorType.debugDescription.getter();
}

unint64_t protocol witness for CustomPlaygroundDisplayConvertible.playgroundDescription.getter in conformance MLTextClassifier.FeatureExtractorType()
{
  return MLTextClassifier.FeatureExtractorType.playgroundDescription.getter();
}

id NLModelEmbeddingType.init(_:)(uint64_t a1)
{
  v10[0] = v1;
  int64_t v2 = *(void *)(*(void *)(type metadata accessor for MLTextClassifier.FeatureExtractorType(0) - 8) + 64);
  unint64_t v3 = alloca(v2);
  unint64_t v4 = alloca(v2);
  outlined init with copy of MLTextClassifier.FeatureExtractorType(a1, (uint64_t)v10);
  uint64_t v5 = type metadata accessor for URL(0);
  switch(__swift_getEnumTagSinglePayload((uint64_t)v10, 4, v5))
  {
    case 0u:
      id v7 = NLModelEmbeddingTypeCustom;
      outlined destroy of MLTextClassifier.FeatureExtractorType(a1);
      outlined destroy of MLTextClassifier.FeatureExtractorType((uint64_t)v10);
      return v7;
    case 1u:
      int64_t v6 = (id *)&NLModelEmbeddingTypeStatic;
      goto LABEL_6;
    case 2u:
    case 3u:
      int64_t v6 = (id *)&NLModelEmbeddingTypeDynamic;
      goto LABEL_6;
    case 4u:
      int64_t v6 = (id *)&NLModelEmbeddingTypeContextual;
LABEL_6:
      id v9 = *v6;
      outlined destroy of MLTextClassifier.FeatureExtractorType(a1);
      return v9;
  }
}

uint64_t *initializeBufferWithCopyOfBuffer for MLTextClassifier.FeatureExtractorType(uint64_t *__dst, uint64_t *__src, uint64_t a3)
{
  unint64_t v3 = __dst;
  uint64_t v4 = *(void *)(a3 - 8);
  int v5 = *(_DWORD *)(v4 + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v7 = *__src;
    *unint64_t v3 = *__src;
    unint64_t v3 = (uint64_t *)(v7 + ((v5 + 16) & ~v5));
    swift_retain();
  }
  else
  {
    uint64_t v6 = type metadata accessor for URL(0);
    if (__swift_getEnumTagSinglePayload((uint64_t)__src, 4, v6))
    {
      memcpy(__dst, __src, *(void *)(v4 + 64));
    }
    else
    {
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(void *)(v6 - 8) + 16))(__dst, __src, v6);
      __swift_storeEnumTagSinglePayload((uint64_t)__dst, 0, 4, v6);
    }
  }
  return v3;
}

uint64_t destroy for MLTextClassifier.FeatureExtractorType(uint64_t a1)
{
  uint64_t v1 = type metadata accessor for URL(0);
  uint64_t result = __swift_getEnumTagSinglePayload(a1, 4, v1);
  if (!result) {
    return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v1 - 8) + 8))(a1, v1);
  }
  return result;
}

void *initializeWithCopy for MLTextClassifier.FeatureExtractorType(void *__dst, void *__src, uint64_t a3)
{
  uint64_t v4 = type metadata accessor for URL(0);
  if (__swift_getEnumTagSinglePayload((uint64_t)__src, 4, v4))
  {
    memcpy(__dst, __src, *(void *)(*(void *)(a3 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, void *, uint64_t))(*(void *)(v4 - 8) + 16))(__dst, __src, v4);
    __swift_storeEnumTagSinglePayload((uint64_t)__dst, 0, 4, v4);
  }
  return __dst;
}

void *assignWithCopy for MLTextClassifier.FeatureExtractorType(void *__dst, void *__src, uint64_t a3)
{
  uint64_t v3 = type metadata accessor for URL(0);
  int EnumTagSinglePayload = __swift_getEnumTagSinglePayload((uint64_t)__dst, 4, v3);
  int v5 = __swift_getEnumTagSinglePayload((uint64_t)__src, 4, v3);
  if (!EnumTagSinglePayload)
  {
    uint64_t v6 = *(void *)(v3 - 8);
    if (!v5)
    {
      (*(void (**)(void *, void *, uint64_t))(v6 + 24))(__dst, __src, v3);
      return __dst;
    }
    (*(void (**)(void *, uint64_t))(v6 + 8))(__dst, v3);
    goto LABEL_6;
  }
  if (v5)
  {
LABEL_6:
    memcpy(__dst, __src, *(void *)(*(void *)(a3 - 8) + 64));
    return __dst;
  }
  (*(void (**)(void *, void *, uint64_t))(*(void *)(v3 - 8) + 16))(__dst, __src, v3);
  __swift_storeEnumTagSinglePayload((uint64_t)__dst, 0, 4, v3);
  return __dst;
}

void *initializeWithTake for MLTextClassifier.FeatureExtractorType(void *__dst, void *__src, uint64_t a3)
{
  uint64_t v4 = type metadata accessor for URL(0);
  if (__swift_getEnumTagSinglePayload((uint64_t)__src, 4, v4))
  {
    memcpy(__dst, __src, *(void *)(*(void *)(a3 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, void *, uint64_t))(*(void *)(v4 - 8) + 32))(__dst, __src, v4);
    __swift_storeEnumTagSinglePayload((uint64_t)__dst, 0, 4, v4);
  }
  return __dst;
}

void *assignWithTake for MLTextClassifier.FeatureExtractorType(void *__dst, void *__src, uint64_t a3)
{
  uint64_t v3 = type metadata accessor for URL(0);
  int EnumTagSinglePayload = __swift_getEnumTagSinglePayload((uint64_t)__dst, 4, v3);
  int v5 = __swift_getEnumTagSinglePayload((uint64_t)__src, 4, v3);
  if (!EnumTagSinglePayload)
  {
    uint64_t v6 = *(void *)(v3 - 8);
    if (!v5)
    {
      (*(void (**)(void *, void *, uint64_t))(v6 + 40))(__dst, __src, v3);
      return __dst;
    }
    (*(void (**)(void *, uint64_t))(v6 + 8))(__dst, v3);
    goto LABEL_6;
  }
  if (v5)
  {
LABEL_6:
    memcpy(__dst, __src, *(void *)(*(void *)(a3 - 8) + 64));
    return __dst;
  }
  (*(void (**)(void *, void *, uint64_t))(*(void *)(v3 - 8) + 32))(__dst, __src, v3);
  __swift_storeEnumTagSinglePayload((uint64_t)__dst, 0, 4, v3);
  return __dst;
}

uint64_t getEnumTagSinglePayload for MLTextClassifier.FeatureExtractorType(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_1F40FD);
}

uint64_t sub_1F40FD(uint64_t a1, unsigned int a2)
{
  uint64_t v2 = type metadata accessor for URL(0);
  unsigned int EnumTagSinglePayload = __swift_getEnumTagSinglePayload(a1, a2, v2);
  unsigned int v4 = EnumTagSinglePayload - 4;
  if (EnumTagSinglePayload < 5) {
    return 0;
  }
  return v4;
}

uint64_t storeEnumTagSinglePayload for MLTextClassifier.FeatureExtractorType(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_1F414B);
}

uint64_t sub_1F414B(uint64_t a1, unsigned int a2, unsigned int a3)
{
  unsigned int v4 = a2;
  if (a2) {
    unsigned int v4 = a2 + 4;
  }
  uint64_t v5 = type metadata accessor for URL(0);
  return __swift_storeEnumTagSinglePayload(a1, v4, a3, v5);
}

uint64_t getEnumTag for MLTextClassifier.FeatureExtractorType(uint64_t a1)
{
  uint64_t v1 = type metadata accessor for URL(0);
  return __swift_getEnumTagSinglePayload(a1, 4, v1);
}

uint64_t destructiveInjectEnumTag for MLTextClassifier.FeatureExtractorType(uint64_t a1, unsigned int a2)
{
  uint64_t v2 = type metadata accessor for URL(0);
  return __swift_storeEnumTagSinglePayload(a1, a2, 4, v2);
}

uint64_t type metadata completion function for MLTextClassifier.FeatureExtractorType(uint64_t a1)
{
  uint64_t result = type metadata accessor for URL(319);
  if (v2 <= 0x3F)
  {
    swift_initEnumMetadataSinglePayload(a1, 256, *(void *)(result - 8) + 64, 4);
    return 0;
  }
  return result;
}

uint64_t MLTextClassifier.ModelAlgorithmType.description.getter()
{
  int64_t v1 = *(void *)(*(void *)(type metadata accessor for MLTextClassifier.FeatureExtractorType(0) - 8) + 64);
  unint64_t v2 = alloca(v1);
  uint64_t v3 = alloca(v1);
  uint64_t v4 = type metadata accessor for MLTextClassifier.ModelAlgorithmType(0);
  int64_t v5 = *(void *)(*(void *)(v4 - 8) + 64);
  uint64_t v6 = alloca(v5);
  uint64_t v7 = alloca(v5);
  outlined init with copy of MLTextClassifier.ModelAlgorithmType(v0, (uint64_t)v15);
  int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload(v15, v4);
  if (!EnumCaseMultiPayload) {
    return 0x20746E452078614DLL;
  }
  if (EnumCaseMultiPayload == 1) {
    return 0xD00000000000001ELL;
  }
  outlined init with take of MLTextClassifier.FeatureExtractorType((uint64_t)v15, (uint64_t)v15);
  unint64_t v10 = MLTextClassifier.FeatureExtractorType.description.getter();
  char v12 = v11;
  v15[0] = v10;
  v15[1] = v11;
  swift_bridgeObjectRetain(v11);
  v13._uint64_t countAndFlagsBits = 0x6C65646F4D20;
  v13._char object = (void *)0xE600000000000000;
  String.append(_:)(v13);
  swift_bridgeObjectRelease(v12);
  uint64_t v9 = v15[0];
  outlined destroy of MLActivityClassifier.ModelParameters((uint64_t)v15, type metadata accessor for MLTextClassifier.FeatureExtractorType);
  return v9;
}

uint64_t type metadata accessor for MLTextClassifier.ModelAlgorithmType(uint64_t a1)
{
  uint64_t result = type metadata singleton initialization cache for MLTextClassifier.ModelAlgorithmType;
  if (!type metadata singleton initialization cache for MLTextClassifier.ModelAlgorithmType) {
    return swift_getSingletonMetadata(a1, &nominal type descriptor for MLTextClassifier.ModelAlgorithmType);
  }
  return result;
}

uint64_t outlined init with copy of MLTextClassifier.ModelAlgorithmType(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = type metadata accessor for MLTextClassifier.ModelAlgorithmType(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v2 - 8) + 16))(a2, a1, v2);
  return a2;
}

uint64_t MLTextClassifier.ModelAlgorithmType.debugDescription.getter()
{
  int64_t v1 = *(void *)(*(void *)(type metadata accessor for MLTextClassifier.FeatureExtractorType(0) - 8) + 64);
  uint64_t v2 = alloca(v1);
  uint64_t v3 = alloca(v1);
  uint64_t v4 = type metadata accessor for MLTextClassifier.ModelAlgorithmType(0);
  int64_t v5 = *(void *)(*(void *)(v4 - 8) + 64);
  uint64_t v6 = alloca(v5);
  uint64_t v7 = alloca(v5);
  outlined init with copy of MLTextClassifier.ModelAlgorithmType(v0, (uint64_t)v15);
  int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload(v15, v4);
  if (!EnumCaseMultiPayload) {
    return 0x20746E452078614DLL;
  }
  if (EnumCaseMultiPayload == 1) {
    return 0xD00000000000001ELL;
  }
  outlined init with take of MLTextClassifier.FeatureExtractorType((uint64_t)v15, (uint64_t)v15);
  unint64_t v10 = MLTextClassifier.FeatureExtractorType.description.getter();
  char v12 = v11;
  v15[0] = v10;
  v15[1] = v11;
  swift_bridgeObjectRetain(v11);
  v13._uint64_t countAndFlagsBits = 0x6C65646F4D20;
  v13._char object = (void *)0xE600000000000000;
  String.append(_:)(v13);
  swift_bridgeObjectRelease(v12);
  uint64_t v9 = v15[0];
  outlined destroy of MLActivityClassifier.ModelParameters((uint64_t)v15, type metadata accessor for MLTextClassifier.FeatureExtractorType);
  return v9;
}

void *MLTextClassifier.ModelAlgorithmType.playgroundDescription.getter()
{
  uint64_t v2 = v0;
  int64_t v3 = *(void *)(*(void *)(type metadata accessor for MLTextClassifier.FeatureExtractorType(0) - 8) + 64);
  uint64_t v4 = alloca(v3);
  int64_t v5 = alloca(v3);
  uint64_t v6 = type metadata accessor for MLTextClassifier.ModelAlgorithmType(0);
  int64_t v7 = *(void *)(*(void *)(v6 - 8) + 64);
  uint64_t v8 = alloca(v7);
  uint64_t v9 = alloca(v7);
  outlined init with copy of MLTextClassifier.ModelAlgorithmType(v1, (uint64_t)&v18);
  int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload(&v18, v6);
  if (EnumCaseMultiPayload)
  {
    if (EnumCaseMultiPayload == 1)
    {
      uint64_t v11 = "Dynamic Text Embedding" + 0x8000000000000000;
      unint64_t v12 = 0xD00000000000001ELL;
    }
    else
    {
      outlined init with take of MLTextClassifier.FeatureExtractorType((uint64_t)&v18, (uint64_t)&v18);
      unint64_t v13 = MLTextClassifier.FeatureExtractorType.description.getter();
      char v15 = (char)v14;
      unint64_t v19 = v13;
      uint64_t v20 = v14;
      swift_bridgeObjectRetain((_BYTE)v14);
      v16._uint64_t countAndFlagsBits = 0x6C65646F4D20;
      v16._char object = (void *)0xE600000000000000;
      String.append(_:)(v16);
      swift_bridgeObjectRelease(v15);
      unint64_t v12 = v19;
      uint64_t v11 = v20;
      outlined destroy of MLActivityClassifier.ModelParameters((uint64_t)&v18, type metadata accessor for MLTextClassifier.FeatureExtractorType);
    }
  }
  else
  {
    uint64_t v11 = (char *)0xED00006C65646F4DLL;
    unint64_t v12 = 0x20746E452078614DLL;
  }
  uint64_t result = &type metadata for String;
  v2[3] = (unint64_t)&type metadata for String;
  *uint64_t v2 = v12;
  v2[1] = (unint64_t)v11;
  return result;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance MLTextClassifier.ModelAlgorithmType()
{
  return MLTextClassifier.ModelAlgorithmType.description.getter();
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance MLTextClassifier.ModelAlgorithmType()
{
  return MLTextClassifier.ModelAlgorithmType.debugDescription.getter();
}

void *protocol witness for CustomPlaygroundDisplayConvertible.playgroundDescription.getter in conformance MLTextClassifier.ModelAlgorithmType()
{
  return MLTextClassifier.ModelAlgorithmType.playgroundDescription.getter();
}

char *initializeBufferWithCopyOfBuffer for MLTextClassifier.ModelAlgorithmType(char *__dst, char *__src, uint64_t a3)
{
  int64_t v3 = __dst;
  uint64_t v4 = *(void *)(a3 - 8);
  int v5 = *(_DWORD *)(v4 + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v9 = *(void *)__src;
    *(void *)int64_t v3 = *(void *)__src;
    int64_t v3 = (char *)(v9 + ((v5 + 16) & ~v5));
    swift_retain();
  }
  else if (swift_getEnumCaseMultiPayload(__src, a3) == 2)
  {
    uint64_t v7 = type metadata accessor for URL(0);
    if (__swift_getEnumTagSinglePayload((uint64_t)__src, 4, v7))
    {
      uint64_t v8 = type metadata accessor for MLTextClassifier.FeatureExtractorType(0);
      memcpy(__dst, __src, *(void *)(*(void *)(v8 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v7 - 8) + 16))(__dst, __src, v7);
      __swift_storeEnumTagSinglePayload((uint64_t)__dst, 0, 4, v7);
    }
    uint64_t v10 = *(int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (MLTextClassifier.FeatureExtractorType, revision: Int?))
                 + 48);
    __dst[v10 + 8] = __src[v10 + 8];
    *(void *)&__dst[v10] = *(void *)&__src[v10];
    swift_storeEnumTagMultiPayload(__dst, a3, 2);
  }
  else
  {
    memcpy(__dst, __src, *(void *)(v4 + 64));
  }
  return v3;
}

uint64_t destroy for MLTextClassifier.ModelAlgorithmType(uint64_t a1, uint64_t a2)
{
  uint64_t result = swift_getEnumCaseMultiPayload(a1, a2);
  if (result == 2)
  {
    uint64_t v3 = type metadata accessor for URL(0);
    uint64_t result = __swift_getEnumTagSinglePayload(a1, 4, v3);
    if (!result) {
      return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(a1, v3);
    }
  }
  return result;
}

char *initializeWithCopy for MLTextClassifier.ModelAlgorithmType(char *__dst, char *__src, uint64_t a3)
{
  if (swift_getEnumCaseMultiPayload(__src, a3) == 2)
  {
    uint64_t v4 = type metadata accessor for URL(0);
    if (__swift_getEnumTagSinglePayload((uint64_t)__src, 4, v4))
    {
      uint64_t v5 = type metadata accessor for MLTextClassifier.FeatureExtractorType(0);
      memcpy(__dst, __src, *(void *)(*(void *)(v5 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v4 - 8) + 16))(__dst, __src, v4);
      __swift_storeEnumTagSinglePayload((uint64_t)__dst, 0, 4, v4);
    }
    uint64_t v6 = *(int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (MLTextClassifier.FeatureExtractorType, revision: Int?))
                + 48);
    __dst[v6 + 8] = __src[v6 + 8];
    *(void *)&__dst[v6] = *(void *)&__src[v6];
    swift_storeEnumTagMultiPayload(__dst, a3, 2);
  }
  else
  {
    memcpy(__dst, __src, *(void *)(*(void *)(a3 - 8) + 64));
  }
  return __dst;
}

char *assignWithCopy for MLTextClassifier.ModelAlgorithmType(char *__dst, char *__src, uint64_t a3)
{
  if (__dst != __src)
  {
    outlined destroy of MLActivityClassifier.ModelParameters((uint64_t)__dst, type metadata accessor for MLTextClassifier.ModelAlgorithmType);
    if (swift_getEnumCaseMultiPayload(__src, a3) == 2)
    {
      uint64_t v4 = type metadata accessor for URL(0);
      if (__swift_getEnumTagSinglePayload((uint64_t)__src, 4, v4))
      {
        uint64_t v5 = type metadata accessor for MLTextClassifier.FeatureExtractorType(0);
        memcpy(__dst, __src, *(void *)(*(void *)(v5 - 8) + 64));
      }
      else
      {
        (*(void (**)(char *, char *, uint64_t))(*(void *)(v4 - 8) + 16))(__dst, __src, v4);
        __swift_storeEnumTagSinglePayload((uint64_t)__dst, 0, 4, v4);
      }
      uint64_t v6 = *(int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (MLTextClassifier.FeatureExtractorType, revision: Int?))
                  + 48);
      __dst[v6 + 8] = __src[v6 + 8];
      *(void *)&__dst[v6] = *(void *)&__src[v6];
      swift_storeEnumTagMultiPayload(__dst, a3, 2);
    }
    else
    {
      memcpy(__dst, __src, *(void *)(*(void *)(a3 - 8) + 64));
    }
  }
  return __dst;
}

char *initializeWithTake for MLTextClassifier.ModelAlgorithmType(char *__dst, char *__src, uint64_t a3)
{
  if (swift_getEnumCaseMultiPayload(__src, a3) == 2)
  {
    uint64_t v4 = type metadata accessor for URL(0);
    if (__swift_getEnumTagSinglePayload((uint64_t)__src, 4, v4))
    {
      uint64_t v5 = type metadata accessor for MLTextClassifier.FeatureExtractorType(0);
      memcpy(__dst, __src, *(void *)(*(void *)(v5 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v4 - 8) + 32))(__dst, __src, v4);
      __swift_storeEnumTagSinglePayload((uint64_t)__dst, 0, 4, v4);
    }
    uint64_t v6 = *(int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (MLTextClassifier.FeatureExtractorType, revision: Int?))
                + 48);
    __dst[v6 + 8] = __src[v6 + 8];
    *(void *)&__dst[v6] = *(void *)&__src[v6];
    swift_storeEnumTagMultiPayload(__dst, a3, 2);
  }
  else
  {
    memcpy(__dst, __src, *(void *)(*(void *)(a3 - 8) + 64));
  }
  return __dst;
}

char *assignWithTake for MLTextClassifier.ModelAlgorithmType(char *__dst, char *__src, uint64_t a3)
{
  if (__dst != __src)
  {
    outlined destroy of MLActivityClassifier.ModelParameters((uint64_t)__dst, type metadata accessor for MLTextClassifier.ModelAlgorithmType);
    if (swift_getEnumCaseMultiPayload(__src, a3) == 2)
    {
      uint64_t v4 = type metadata accessor for URL(0);
      if (__swift_getEnumTagSinglePayload((uint64_t)__src, 4, v4))
      {
        uint64_t v5 = type metadata accessor for MLTextClassifier.FeatureExtractorType(0);
        memcpy(__dst, __src, *(void *)(*(void *)(v5 - 8) + 64));
      }
      else
      {
        (*(void (**)(char *, char *, uint64_t))(*(void *)(v4 - 8) + 32))(__dst, __src, v4);
        __swift_storeEnumTagSinglePayload((uint64_t)__dst, 0, 4, v4);
      }
      uint64_t v6 = *(int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (MLTextClassifier.FeatureExtractorType, revision: Int?))
                  + 48);
      __dst[v6 + 8] = __src[v6 + 8];
      *(void *)&__dst[v6] = *(void *)&__src[v6];
      swift_storeEnumTagMultiPayload(__dst, a3, 2);
    }
    else
    {
      memcpy(__dst, __src, *(void *)(*(void *)(a3 - 8) + 64));
    }
  }
  return __dst;
}

uint64_t type metadata completion function for MLTextClassifier.ModelAlgorithmType(uint64_t a1)
{
  v6[0] = "\t";
  v6[1] = "\t";
  uint64_t result = type metadata accessor for MLTextClassifier.FeatureExtractorType(319);
  if (v2 <= 0x3F)
  {
    swift_getTupleTypeLayout2(v5, *(void *)(result - 8) + 64);
    _OWORD v6[2] = v5;
    swift_initEnumMetadataMultiPayload(a1, 256, 3, v6, v3, v4);
    return 0;
  }
  return result;
}

uint64_t static MLImageClassifier.__Defaults.validation.getter()
{
  return static MLImageClassifier.__Defaults.validation.getter(&one-time initialization token for validation, type metadata accessor for MLImageClassifier.ModelParameters.ValidationData, (uint64_t)static MLImageClassifier.__Defaults.validation, (uint64_t)one-time initialization function for validation);
}

uint64_t static MLImageClassifier.__Defaults.maximumIterations.getter()
{
  return 25;
}

uint64_t static MLImageClassifier.__Defaults.algorithm.getter()
{
  return static MLImageClassifier.__Defaults.validation.getter(&one-time initialization token for algorithm, type metadata accessor for MLImageClassifier.ModelParameters.ModelAlgorithmType, (uint64_t)static MLImageClassifier.__Defaults.algorithm, (uint64_t)one-time initialization function for algorithm);
}

uint64_t static MLImageClassifier.__Defaults.validation.getter(void *a1, uint64_t (*a2)(void), uint64_t a3, uint64_t a4)
{
  uint64_t v6 = v4;
  if (*a1 != -1) {
    swift_once(a1, a4);
  }
  uint64_t v7 = a2(0);
  uint64_t v8 = __swift_project_value_buffer(v7, a3);
  return outlined init with copy of MLTrainingSessionParameters(v8, v6, a2);
}

uint64_t static MLImageClassifier.__Defaults.batchSize.getter()
{
  return 32;
}

void *static MLImageClassifier.__Defaults.augmentationOptions.getter()
{
  *uint64_t result = 0;
  return result;
}

void *static MLImageClassifier.__Defaults.classifier.getter()
{
  *uint64_t result = 0;
  return result;
}

uint64_t one-time initialization function for algorithm()
{
  uint64_t v0 = type metadata accessor for MLImageClassifier.ModelParameters.ModelAlgorithmType(0);
  __swift_allocate_value_buffer(v0, static MLImageClassifier.__Defaults.algorithm);
  uint64_t v1 = __swift_project_value_buffer(v0, (uint64_t)static MLImageClassifier.__Defaults.algorithm);
  uint64_t v2 = *(int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (featureExtractor: MLImageClassifier.FeatureExtractorType, classifier: MLImageClassifier.ModelParameters.ClassifierType))
              + 48);
  *(void *)uint64_t v1 = 1;
  *(unsigned char *)(v1 + 8) = 0;
  uint64_t v3 = type metadata accessor for MLImageClassifier.FeatureExtractorType(0);
  uint64_t result = swift_storeEnumTagMultiPayload(v1, v3, 0);
  *(void *)(v1 + v2) = 0;
  return result;
}

uint64_t static MLImageClassifier.__Defaults.featureColumnName.getter()
{
  return 0x7365727574616566;
}

uint64_t static MLImageClassifier.__Defaults.labelColumnName.getter()
{
  return 0x62614C7373616C63;
}

ValueMetadata *type metadata accessor for MLImageClassifier.__Defaults()
{
  return &type metadata for MLImageClassifier.__Defaults;
}

uint64_t MLWordTagger.write(to:metadata:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 64);
  v4[0] = *(_OWORD *)a2;
  v4[1] = *(_OWORD *)(a2 + 16);
  v4[2] = *(_OWORD *)(a2 + 32);
  uint64_t v4[3] = *(_OWORD *)(a2 + 48);
  uint64_t v5 = v2;
  return NLModel.write(to:defaultName:metadata:)(a1, 0x6767615464726F57, 0xEA00000000007265, v4);
}

uint64_t MLWordTagger.write(toFile:metadata:)(Swift::String a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 64);
  v4[0] = *(_OWORD *)a2;
  v4[1] = *(_OWORD *)(a2 + 16);
  v4[2] = *(_OWORD *)(a2 + 32);
  uint64_t v4[3] = *(_OWORD *)(a2 + 48);
  uint64_t v5 = v2;
  return NLModel.write(toFile:defaultName:metadata:)(a1, 0x6767615464726F57, (void *)0xEA00000000007265, (uint64_t)v4);
}

uint64_t *initializeBufferWithCopyOfBuffer for AnyClassificationMetrics(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2 = a1;
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Either<ClassificationMetrics<String>, ClassificationMetrics<Int>>);
  int v4 = *(_DWORD *)(*(void *)(v3 - 8) + 80);
  if ((v4 & 0x20000) != 0)
  {
    uint64_t v8 = *a2;
    *uint64_t v2 = *a2;
    uint64_t v2 = (uint64_t *)(v8 + ((v4 + 16) & ~v4));
    swift_retain();
  }
  else
  {
    if (swift_getEnumCaseMultiPayload(a2, v3) == 1)
    {
      uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ClassificationMetrics<Int>);
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(void *)(v5 - 8) + 16))(a1, a2, v5);
      uint64_t v6 = 1;
      uint64_t v7 = v3;
    }
    else
    {
      uint64_t v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ClassificationMetrics<String>);
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(void *)(v9 - 8) + 16))(a1, a2, v9);
      uint64_t v7 = v3;
      uint64_t v6 = 0;
    }
    swift_storeEnumTagMultiPayload(a1, v7, v6);
  }
  return v2;
}

uint64_t destroy for AnyClassificationMetrics(uint64_t a1)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Either<ClassificationMetrics<String>, ClassificationMetrics<Int>>);
  int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload(a1, v2);
  int v4 = &demangling cache variable for type metadata for ClassificationMetrics<String>;
  if (EnumCaseMultiPayload == 1) {
    int v4 = &demangling cache variable for type metadata for ClassificationMetrics<Int>;
  }
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(v4);
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v5 - 8) + 8))(a1, v5);
}

uint64_t initializeWithCopy for AnyClassificationMetrics(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Either<ClassificationMetrics<String>, ClassificationMetrics<Int>>);
  int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload(a2, v3);
  BOOL v5 = EnumCaseMultiPayload == 1;
  uint64_t v6 = &demangling cache variable for type metadata for ClassificationMetrics<String>;
  if (EnumCaseMultiPayload == 1) {
    uint64_t v6 = &demangling cache variable for type metadata for ClassificationMetrics<Int>;
  }
  uint64_t v7 = __swift_instantiateConcreteTypeFromMangledName(v6);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 16))(a1, a2, v7);
  swift_storeEnumTagMultiPayload(a1, v3, v5);
  return a1;
}

uint64_t assignWithCopy for AnyClassificationMetrics(uint64_t a1, uint64_t a2)
{
  if (a1 != a2)
  {
    outlined destroy of Either<ClassificationMetrics<String>, ClassificationMetrics<Int>>(a1);
    uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Either<ClassificationMetrics<String>, ClassificationMetrics<Int>>);
    int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload(a2, v3);
    BOOL v5 = EnumCaseMultiPayload == 1;
    uint64_t v6 = &demangling cache variable for type metadata for ClassificationMetrics<String>;
    if (EnumCaseMultiPayload == 1) {
      uint64_t v6 = &demangling cache variable for type metadata for ClassificationMetrics<Int>;
    }
    uint64_t v7 = __swift_instantiateConcreteTypeFromMangledName(v6);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 16))(a1, a2, v7);
    swift_storeEnumTagMultiPayload(a1, v3, v5);
  }
  return a1;
}

uint64_t outlined destroy of Either<ClassificationMetrics<String>, ClassificationMetrics<Int>>(uint64_t a1)
{
  uint64_t v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Either<ClassificationMetrics<String>, ClassificationMetrics<Int>>);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v1 - 8) + 8))(a1, v1);
  return a1;
}

uint64_t initializeWithTake for AnyClassificationMetrics(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Either<ClassificationMetrics<String>, ClassificationMetrics<Int>>);
  int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload(a2, v3);
  BOOL v5 = EnumCaseMultiPayload == 1;
  uint64_t v6 = &demangling cache variable for type metadata for ClassificationMetrics<String>;
  if (EnumCaseMultiPayload == 1) {
    uint64_t v6 = &demangling cache variable for type metadata for ClassificationMetrics<Int>;
  }
  uint64_t v7 = __swift_instantiateConcreteTypeFromMangledName(v6);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 32))(a1, a2, v7);
  swift_storeEnumTagMultiPayload(a1, v3, v5);
  return a1;
}

uint64_t assignWithTake for AnyClassificationMetrics(uint64_t a1, uint64_t a2)
{
  if (a1 != a2)
  {
    outlined destroy of Either<ClassificationMetrics<String>, ClassificationMetrics<Int>>(a1);
    uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Either<ClassificationMetrics<String>, ClassificationMetrics<Int>>);
    int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload(a2, v3);
    BOOL v5 = EnumCaseMultiPayload == 1;
    uint64_t v6 = &demangling cache variable for type metadata for ClassificationMetrics<String>;
    if (EnumCaseMultiPayload == 1) {
      uint64_t v6 = &demangling cache variable for type metadata for ClassificationMetrics<Int>;
    }
    uint64_t v7 = __swift_instantiateConcreteTypeFromMangledName(v6);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 32))(a1, a2, v7);
    swift_storeEnumTagMultiPayload(a1, v3, v5);
  }
  return a1;
}

uint64_t getEnumTagSinglePayload for AnyClassificationMetrics(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_1F50D9);
}

uint64_t sub_1F50D9(uint64_t a1, unsigned int a2)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Either<ClassificationMetrics<String>, ClassificationMetrics<Int>>);
  return __swift_getEnumTagSinglePayload(a1, a2, v2);
}

uint64_t storeEnumTagSinglePayload for AnyClassificationMetrics(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_1F5122);
}

uint64_t sub_1F5122(uint64_t a1, unsigned int a2)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Either<ClassificationMetrics<String>, ClassificationMetrics<Int>>);
  return __swift_storeEnumTagSinglePayload(a1, a2, a2, v2);
}

uint64_t type metadata accessor for AnyClassificationMetrics(uint64_t a1)
{
  uint64_t result = type metadata singleton initialization cache for AnyClassificationMetrics;
  if (!type metadata singleton initialization cache for AnyClassificationMetrics) {
    return swift_getSingletonMetadata(a1, &nominal type descriptor for AnyClassificationMetrics);
  }
  return result;
}

uint64_t type metadata completion function for AnyClassificationMetrics(uint64_t a1)
{
  uint64_t v4 = v1;
  uint64_t result = type metadata accessor for Either<ClassificationMetrics<String>, ClassificationMetrics<Int>>(319);
  if (v3 <= 0x3F)
  {
    uint64_t v4 = *(void *)(result - 8) + 64;
    swift_initStructMetadata(a1, 256, 1, &v4, a1 + 16);
    return 0;
  }
  return result;
}

uint64_t AnyClassificationMetrics.init(_:_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v68 = v2;
  uint64_t v54 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Column<Int>);
  uint64_t v58 = *(void *)(v54 - 8);
  int64_t v3 = *(void *)(v58 + 64);
  uint64_t v4 = alloca(v3);
  BOOL v5 = alloca(v3);
  uint64_t v57 = &v50;
  uint64_t v53 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for FilledColumn<Column<Int>>);
  int64_t v6 = *(void *)(*(void *)(v53 - 8) + 64);
  uint64_t v7 = alloca(v6);
  uint64_t v8 = alloca(v6);
  id v56 = &v50;
  uint64_t v9 = alloca(v6);
  uint64_t v10 = alloca(v6);
  char v71 = &v50;
  uint64_t v52 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ClassificationMetrics<Int>);
  uint64_t v51 = *(void *)(v52 - 8);
  int64_t v11 = *(void *)(v51 + 64);
  unint64_t v12 = alloca(v11);
  unint64_t v13 = alloca(v11);
  uint64_t v55 = &v50;
  uint64_t v63 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Column<String>);
  uint64_t v65 = *(void *)(v63 - 8);
  int64_t v14 = *(void *)(v65 + 64);
  char v15 = alloca(v14);
  Swift::String v16 = alloca(v14);
  uint64_t v61 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for FilledColumn<Column<String>>);
  int64_t v17 = *(void *)(*(void *)(v61 - 8) + 64);
  uint64_t v18 = alloca(v17);
  unint64_t v19 = alloca(v17);
  uint64_t v64 = &v50;
  uint64_t v20 = alloca(v17);
  uint64_t v21 = alloca(v17);
  uint64_t v72 = &v50;
  uint64_t v59 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ClassificationMetrics<String>);
  uint64_t v60 = *(void *)(v59 - 8);
  int64_t v22 = *(void *)(v60 + 64);
  uint64_t v23 = alloca(v22);
  uint64_t v24 = alloca(v22);
  uint64_t v62 = &v50;
  uint64_t v69 = a1;
  uint64_t v25 = AnyColumn.wrappedElementType.getter();
  uint64_t v70 = a2;
  uint64_t v26 = AnyColumn.wrappedElementType.getter();
  if (swift_dynamicCastMetatype(v25, &type metadata for String)
    && swift_dynamicCastMetatype(v26, &type metadata for String))
  {
    double v27 = AnyColumn.assumingType<A>(_:)(&type metadata for String, &type metadata for String);
    uint64_t v66 = 0;
    unint64_t v67 = 0xE000000000000000;
    char v71 = (uint64_t *)lazy protocol witness table accessor for type FullyConnectedNetworkClassifier<Float, String> and conformance FullyConnectedNetworkClassifier<A, B>(&lazy protocol witness table cache variable for type Column<String> and conformance Column<A>, &demangling cache variable for type metadata for Column<String>, (uint64_t)&protocol conformance descriptor for Column<A>);
    uint64_t v28 = v63;
    OptionalColumnProtocol.filled(with:)(&v66, v63, v71);
    uint64_t v29 = *(void (**)(uint64_t *, uint64_t, double))(v65 + 8);
    v29(&v50, v28, v27);
    double v30 = AnyColumn.assumingType<A>(_:)(&type metadata for String, &type metadata for String);
    uint64_t v66 = 0;
    unint64_t v67 = 0xE000000000000000;
    uint64_t v31 = v64;
    OptionalColumnProtocol.filled(with:)(&v66, v28, v71);
    v29(&v50, v28, v30);
    uint64_t v32 = lazy protocol witness table accessor for type FullyConnectedNetworkClassifier<Float, String> and conformance FullyConnectedNetworkClassifier<A, B>(&lazy protocol witness table cache variable for type FilledColumn<Column<String>> and conformance FilledColumn<A>, &demangling cache variable for type metadata for FilledColumn<Column<String>>, (uint64_t)&protocol conformance descriptor for FilledColumn<A>);
    uint64_t v33 = v62;
    ClassificationMetrics.init<A, B>(_:_:)(v72, v31, &type metadata for String, v61, v61, &protocol witness table for String, v32, v32);
    unsigned int v34 = 0;
    uint64_t v35 = type metadata accessor for AnyColumn(0);
    uint64_t v36 = *(void (**)(uint64_t, uint64_t))(*(void *)(v35 - 8) + 8);
    v36(v70, v35);
    v36(v69, v35);
    uint64_t v37 = v68;
    (*(void (**)(uint64_t, uint64_t *, uint64_t))(v60 + 32))(v68, v33, v59);
  }
  else
  {
    if (!swift_dynamicCastMetatype(v25, &type metadata for Int)
      || !swift_dynamicCastMetatype(v26, &type metadata for Int))
    {
      _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, 0xD000000000000027, "sificationMetrics.swift" + 0x8000000000000000, "CreateML/AnyClassificationMetrics.swift", 39, 2, 74, 0);
      BUG();
    }
    uint64_t v38 = v57;
    double v39 = AnyColumn.assumingType<A>(_:)(&type metadata for Int, &type metadata for Int);
    uint64_t v66 = 0;
    uint64_t v72 = (uint64_t *)lazy protocol witness table accessor for type FullyConnectedNetworkClassifier<Float, String> and conformance FullyConnectedNetworkClassifier<A, B>(&lazy protocol witness table cache variable for type Column<Int> and conformance Column<A>, &demangling cache variable for type metadata for Column<Int>, (uint64_t)&protocol conformance descriptor for Column<A>);
    uint64_t v40 = v54;
    OptionalColumnProtocol.filled(with:)(&v66, v54, v72);
    uint64_t v41 = *(void (**)(uint64_t *, uint64_t, double))(v58 + 8);
    v41(v38, v40, v39);
    double v42 = AnyColumn.assumingType<A>(_:)(&type metadata for Int, &type metadata for Int);
    uint64_t v66 = 0;
    uint64_t v43 = v56;
    OptionalColumnProtocol.filled(with:)(&v66, v40, v72);
    v41(v38, v40, v42);
    uint64_t v44 = lazy protocol witness table accessor for type FullyConnectedNetworkClassifier<Float, String> and conformance FullyConnectedNetworkClassifier<A, B>(&lazy protocol witness table cache variable for type FilledColumn<Column<Int>> and conformance FilledColumn<A>, &demangling cache variable for type metadata for FilledColumn<Column<Int>>, (uint64_t)&protocol conformance descriptor for FilledColumn<A>);
    uint64_t v45 = v55;
    ClassificationMetrics.init<A, B>(_:_:)(v71, v43, &type metadata for Int, v53, v53, &protocol witness table for Int, v44, v44);
    uint64_t v46 = type metadata accessor for AnyColumn(0);
    uint64_t v47 = *(void (**)(uint64_t, uint64_t))(*(void *)(v46 - 8) + 8);
    v47(v70, v46);
    v47(v69, v46);
    uint64_t v37 = v68;
    (*(void (**)(uint64_t, uint64_t *, uint64_t))(v51 + 32))(v68, v45, v52);
    unsigned int v34 = 1;
  }
  uint64_t v48 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Either<ClassificationMetrics<String>, ClassificationMetrics<Int>>);
  return swift_storeEnumTagMultiPayload(v37, v48, v34);
}

uint64_t AnyClassificationMetrics.stringLabels.getter()
{
  uint64_t v45 = v0;
  uint64_t v43 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ClassificationMetrics<Int>);
  uint64_t v42 = *(void *)(v43 - 8);
  int64_t v1 = *(void *)(v42 + 64);
  uint64_t v2 = alloca(v1);
  int64_t v3 = alloca(v1);
  uint64_t v41 = v36;
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ClassificationMetrics<String>);
  uint64_t v5 = *(void *)(v4 - 8);
  int64_t v6 = *(void *)(v5 + 64);
  uint64_t v7 = alloca(v6);
  uint64_t v8 = alloca(v6);
  uint64_t v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Either<ClassificationMetrics<String>, ClassificationMetrics<Int>>);
  int64_t v10 = *(void *)(*(void *)(v9 - 8) + 64);
  int64_t v11 = alloca(v10);
  unint64_t v12 = alloca(v10);
  outlined init with copy of Either<ClassificationMetrics<String>, ClassificationMetrics<Int>>(v45, (uint64_t)v36);
  if (swift_getEnumCaseMultiPayload(v36, v9) == 1)
  {
    unint64_t v13 = v41;
    uint64_t v14 = v43;
    (*(void (**)(void *, void *, uint64_t))(v42 + 32))(v41, v36, v43);
    uint64_t v15 = ClassificationMetrics.labels.getter(v14);
    int64_t v16 = *(void *)(v15 + 16);
    if (v16)
    {
      uint64_t v44 = _swiftEmptyArrayStorage;
      int64_t v37 = v16;
      uint64_t v17 = v15;
      specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v16, 0);
      uint64_t v18 = v44;
      uint64_t v19 = specialized _NativeSet.startIndex.getter(v17);
      uint64_t v21 = v20;
      char v23 = v22 & 1;
      uint64_t v38 = v17;
      do
      {
        if (v19 < 0 || v19 >= 1 << *(unsigned char *)(v17 + 32)) {
          BUG();
        }
        uint64_t v24 = *(void *)(v17 + 8 * ((unint64_t)v19 >> 6) + 56);
        if (!_bittest64(&v24, v19)) {
          BUG();
        }
        if (*(_DWORD *)(v17 + 36) != v21) {
          BUG();
        }
        uint64_t v45 = v21;
        v36[1] = *(void *)(*(void *)(v17 + 48) + 8 * v19);
        uint64_t v25 = dispatch thunk of CustomStringConvertible.description.getter(&type metadata for Int, &protocol witness table for Int);
        uint64_t v44 = v18;
        unint64_t v27 = v18[2];
        unint64_t v28 = v18[3];
        if (v28 >> 1 <= v27)
        {
          uint64_t v39 = v25;
          uint64_t v40 = v26;
          specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v28 >= 2, v27 + 1, 1);
          uint64_t v26 = v40;
          uint64_t v25 = v39;
          uint64_t v18 = v44;
        }
        v18[2] = v27 + 1;
        uint64_t v29 = 2 * v27;
        v18[v29 + 4] = v25;
        v18[v29 + 5] = v26;
        uint64_t v17 = v38;
        int64_t v30 = specialized _NativeSet.index(after:)(v19, v45, v23 & 1, v38);
        uint64_t v19 = v30;
        uint64_t v21 = v31;
        char v23 = v32 & 1;
        BOOL v33 = v37-- == 1;
        unint64_t v13 = v41;
      }
      while (!v33);
      outlined consume of Set<Int>.Index._Variant(v30, v31, v32 & 1);
      swift_bridgeObjectRelease(v17);
      uint64_t v14 = v43;
    }
    else
    {
      swift_bridgeObjectRelease(v15);
      uint64_t v18 = _swiftEmptyArrayStorage;
    }
    uint64_t v34 = specialized Set.init<A>(_:)((uint64_t)v18);
    (*(void (**)(void *, uint64_t))(v42 + 8))(v13, v14);
  }
  else
  {
    (*(void (**)(void *, void *, uint64_t))(v5 + 32))(v36, v36, v4);
    uint64_t v34 = ClassificationMetrics.labels.getter(v4);
    (*(void (**)(void *, uint64_t))(v5 + 8))(v36, v4);
  }
  return v34;
}

uint64_t AnyClassificationMetrics.labelCount.getter()
{
  uint64_t v22 = v0;
  uint64_t v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ClassificationMetrics<Int>);
  uint64_t v23 = *(void *)(v1 - 8);
  int64_t v2 = *(void *)(v23 + 64);
  int64_t v3 = alloca(v2);
  uint64_t v4 = alloca(v2);
  uint64_t v24 = &v21;
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ClassificationMetrics<String>);
  uint64_t v6 = *(void *)(v5 - 8);
  int64_t v7 = *(void *)(v6 + 64);
  uint64_t v8 = alloca(v7);
  uint64_t v9 = alloca(v7);
  uint64_t v25 = &v21;
  uint64_t v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Either<ClassificationMetrics<String>, ClassificationMetrics<Int>>);
  int64_t v11 = *(void *)(*(void *)(v10 - 8) + 64);
  unint64_t v12 = alloca(v11);
  unint64_t v13 = alloca(v11);
  outlined init with copy of Either<ClassificationMetrics<String>, ClassificationMetrics<Int>>(v22, (uint64_t)&v21);
  if (swift_getEnumCaseMultiPayload(&v21, v10) == 1)
  {
    uint64_t v14 = v24;
    uint64_t v15 = v23;
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(v23 + 32))(v24, &v21, v1);
    uint64_t v16 = ClassificationMetrics.labels.getter(v1);
    uint64_t v17 = *(void *)(v16 + 16);
    swift_bridgeObjectRelease(v16);
    (*(void (**)(uint64_t *, uint64_t))(v15 + 8))(v14, v1);
  }
  else
  {
    uint64_t v18 = v25;
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(v6 + 32))(v25, &v21, v5);
    uint64_t v19 = ClassificationMetrics.labels.getter(v5);
    uint64_t v17 = *(void *)(v19 + 16);
    swift_bridgeObjectRelease(v19);
    (*(void (**)(uint64_t *, uint64_t))(v6 + 8))(v18, v5);
  }
  return v17;
}

uint64_t AnyClassificationMetrics.exampleCount.getter()
{
  uint64_t v20 = v0;
  uint64_t v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ClassificationMetrics<Int>);
  uint64_t v21 = *(void *)(v1 - 8);
  int64_t v2 = *(void *)(v21 + 64);
  int64_t v3 = alloca(v2);
  uint64_t v4 = alloca(v2);
  uint64_t v22 = &v19;
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ClassificationMetrics<String>);
  uint64_t v6 = *(void *)(v5 - 8);
  int64_t v7 = *(void *)(v6 + 64);
  uint64_t v8 = alloca(v7);
  uint64_t v9 = alloca(v7);
  uint64_t v23 = &v19;
  uint64_t v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Either<ClassificationMetrics<String>, ClassificationMetrics<Int>>);
  int64_t v11 = *(void *)(*(void *)(v10 - 8) + 64);
  unint64_t v12 = alloca(v11);
  unint64_t v13 = alloca(v11);
  outlined init with copy of Either<ClassificationMetrics<String>, ClassificationMetrics<Int>>(v20, (uint64_t)&v19);
  if (swift_getEnumCaseMultiPayload(&v19, v10) == 1)
  {
    uint64_t v14 = v22;
    uint64_t v15 = v21;
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(v21 + 32))(v22, &v19, v1);
    uint64_t v16 = ClassificationMetrics.exampleCount.getter(v1);
    (*(void (**)(uint64_t *, uint64_t))(v15 + 8))(v14, v1);
  }
  else
  {
    uint64_t v17 = v23;
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(v6 + 32))(v23, &v19, v5);
    uint64_t v16 = ClassificationMetrics.exampleCount.getter(v5);
    (*(void (**)(uint64_t *, uint64_t))(v6 + 8))(v17, v5);
  }
  return v16;
}

double AnyClassificationMetrics.accuracy.getter()
{
  double v22 = v0;
  uint64_t v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ClassificationMetrics<Int>);
  uint64_t v19 = *(void *)(v1 - 8);
  int64_t v2 = *(void *)(v19 + 64);
  int64_t v3 = alloca(v2);
  uint64_t v4 = alloca(v2);
  uint64_t v20 = &v18;
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ClassificationMetrics<String>);
  uint64_t v6 = *(void *)(v5 - 8);
  int64_t v7 = *(void *)(v6 + 64);
  uint64_t v8 = alloca(v7);
  uint64_t v9 = alloca(v7);
  uint64_t v21 = &v18;
  uint64_t v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Either<ClassificationMetrics<String>, ClassificationMetrics<Int>>);
  int64_t v11 = *(void *)(*(void *)(v10 - 8) + 64);
  unint64_t v12 = alloca(v11);
  unint64_t v13 = alloca(v11);
  outlined init with copy of Either<ClassificationMetrics<String>, ClassificationMetrics<Int>>(*(uint64_t *)&v22, (uint64_t)&v18);
  if (swift_getEnumCaseMultiPayload(&v18, v10) == 1)
  {
    uint64_t v14 = v20;
    uint64_t v15 = v19;
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(v19 + 32))(v20, &v18, v1);
    double v22 = ClassificationMetrics.accuracy.getter(v1);
    (*(void (**)(uint64_t *, uint64_t))(v15 + 8))(v14, v1);
  }
  else
  {
    uint64_t v16 = v21;
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(v6 + 32))(v21, &v18, v5);
    double v22 = ClassificationMetrics.accuracy.getter(v5);
    (*(void (**)(uint64_t *, uint64_t))(v6 + 8))(v16, v5);
  }
  return v22;
}

uint64_t AnyClassificationMetrics.makeConfusionMatrix()()
{
  uint64_t v19 = v1;
  uint64_t v23 = v0;
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ClassificationMetrics<Int>);
  uint64_t v20 = *(void *)(v2 - 8);
  int64_t v3 = *(void *)(v20 + 64);
  uint64_t v4 = alloca(v3);
  uint64_t v5 = alloca(v3);
  uint64_t v21 = &v19;
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ClassificationMetrics<String>);
  uint64_t v7 = *(void *)(v6 - 8);
  int64_t v8 = *(void *)(v7 + 64);
  uint64_t v9 = alloca(v8);
  uint64_t v10 = alloca(v8);
  double v22 = &v19;
  uint64_t v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Either<ClassificationMetrics<String>, ClassificationMetrics<Int>>);
  int64_t v12 = *(void *)(*(void *)(v11 - 8) + 64);
  unint64_t v13 = alloca(v12);
  uint64_t v14 = alloca(v12);
  outlined init with copy of Either<ClassificationMetrics<String>, ClassificationMetrics<Int>>(v19, (uint64_t)&v19);
  if (swift_getEnumCaseMultiPayload(&v19, v11) == 1)
  {
    uint64_t v15 = v21;
    uint64_t v16 = v20;
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(v20 + 32))(v21, &v19, v2);
    ClassificationMetrics.makeConfusionMatrix<>()(v2, &protocol witness table for Int, &protocol witness table for Int, &protocol witness table for Int);
    return (*(uint64_t (**)(uint64_t *, uint64_t))(v16 + 8))(v15, v2);
  }
  else
  {
    uint64_t v18 = v22;
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(v7 + 32))(v22, &v19, v6);
    ClassificationMetrics.makeConfusionMatrix<>()(v6, &protocol witness table for String, &protocol witness table for String, &protocol witness table for String);
    return (*(uint64_t (**)(uint64_t *, uint64_t))(v7 + 8))(v18, v6);
  }
}

uint64_t outlined consume of Set<Int>.Index._Variant(uint64_t a1, uint64_t a2, char a3)
{
  if (a3) {
    return swift_bridgeObjectRelease(a1);
  }
  return result;
}

uint64_t destroy for MLObjectDetector.PersistentParameters(uint64_t a1)
{
  outlined consume of Result<_DataTable, Error>(*(void *)a1, *(_DWORD *)(a1 + 8));
  char v1 = *(unsigned char *)(a1 + 24);
  if (v1 != -1) {
    outlined consume of Result<_DataTable, Error>(*(void *)(a1 + 16), v1 & 1);
  }
  swift_bridgeObjectRelease(*(void *)(a1 + 40));
  return swift_bridgeObjectRelease(*(void *)(a1 + 56));
}

uint64_t initializeWithCopy for MLObjectDetector.PersistentParameters(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)a2;
  char v4 = *(unsigned char *)(a2 + 8);
  outlined copy of Result<_DataTable, Error>(*(void *)a2, v4);
  *(void *)a1 = v3;
  *(unsigned char *)(a1 + 8) = v4;
  uint64_t v5 = (uint64_t *)(a2 + 16);
  char v6 = *(unsigned char *)(a2 + 24);
  if (v6 == -1)
  {
    *(unsigned char *)(a1 + 24) = *(unsigned char *)(a2 + 24);
    *(void *)(a1 + 16) = *v5;
  }
  else
  {
    uint64_t v7 = *v5;
    outlined copy of Result<_DataTable, Error>(*v5, v6);
    *(void *)(a1 + 16) = v7;
    *(unsigned char *)(a1 + 24) = v6 & 1;
  }
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  uint64_t v8 = *(void *)(a2 + 40);
  *(void *)(a1 + 40) = v8;
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  uint64_t v9 = *(void *)(a2 + 56);
  *(void *)(a1 + 56) = v9;
  *(_WORD *)(a1 + 64) = *(_WORD *)(a2 + 64);
  *(unsigned char *)(a1 + 66) = *(unsigned char *)(a2 + 66);
  *(unsigned char *)(a1 + 80) = *(unsigned char *)(a2 + 80);
  *(void *)(a1 + 72) = *(void *)(a2 + 72);
  *(unsigned char *)(a1 + 96) = *(unsigned char *)(a2 + 96);
  *(void *)(a1 + 88) = *(void *)(a2 + 88);
  *(_OWORD *)(a1 + 104) = *(_OWORD *)(a2 + 104);
  *(unsigned char *)(a1 + 128) = *(unsigned char *)(a2 + 128);
  *(void *)(a1 + 120) = *(void *)(a2 + 120);
  swift_bridgeObjectRetain(v8);
  swift_bridgeObjectRetain(v9);
  return a1;
}

uint64_t assignWithCopy for MLObjectDetector.PersistentParameters(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)a2;
  char v5 = *(unsigned char *)(a2 + 8);
  outlined copy of Result<_DataTable, Error>(*(void *)a2, v5);
  uint64_t v6 = *(void *)a1;
  *(void *)a1 = v4;
  int v7 = *(_DWORD *)(a1 + 8);
  *(unsigned char *)(a1 + 8) = v5;
  outlined consume of Result<_DataTable, Error>(v6, v7);
  uint64_t v8 = (uint64_t *)(a1 + 16);
  uint64_t v9 = (uint64_t *)(a2 + 16);
  char v10 = *(unsigned char *)(a2 + 24);
  if (*(unsigned char *)(a1 + 24) == 0xFF)
  {
    if (v10 == -1)
    {
      *(unsigned char *)(a1 + 24) = *(unsigned char *)(a2 + 24);
      uint64_t *v8 = *v9;
    }
    else
    {
      uint64_t v14 = *v9;
      outlined copy of Result<_DataTable, Error>(*v9, v10);
      *(void *)(a1 + 16) = v14;
      *(unsigned char *)(a1 + 24) = v10 & 1;
    }
  }
  else if (v10 == -1)
  {
    outlined destroy of MLDataTable(a1 + 16);
    uint64_t *v8 = *v9;
    *(unsigned char *)(a1 + 24) = *(unsigned char *)(a2 + 24);
  }
  else
  {
    uint64_t v11 = *v9;
    outlined copy of Result<_DataTable, Error>(*v9, v10);
    uint64_t v12 = *(void *)(a1 + 16);
    *(void *)(a1 + 16) = v11;
    int v13 = *(_DWORD *)(a1 + 24);
    *(unsigned char *)(a1 + 24) = v10 & 1;
    outlined consume of Result<_DataTable, Error>(v12, v13);
  }
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  uint64_t v15 = *(void *)(a2 + 40);
  uint64_t v16 = *(void *)(a1 + 40);
  *(void *)(a1 + 40) = v15;
  swift_bridgeObjectRetain(v15);
  swift_bridgeObjectRelease(v16);
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  uint64_t v17 = *(void *)(a2 + 56);
  uint64_t v18 = *(void *)(a1 + 56);
  *(void *)(a1 + 56) = v17;
  swift_bridgeObjectRetain(v17);
  swift_bridgeObjectRelease(v18);
  *(unsigned char *)(a1 + 64) = *(unsigned char *)(a2 + 64);
  *(unsigned char *)(a1 + 65) = *(unsigned char *)(a2 + 65);
  *(unsigned char *)(a1 + 66) = *(unsigned char *)(a2 + 66);
  *(unsigned char *)(a1 + 80) = *(unsigned char *)(a2 + 80);
  *(void *)(a1 + 72) = *(void *)(a2 + 72);
  *(void *)(a1 + 88) = *(void *)(a2 + 88);
  *(unsigned char *)(a1 + 96) = *(unsigned char *)(a2 + 96);
  *(void *)(a1 + 104) = *(void *)(a2 + 104);
  *(void *)(a1 + 112) = *(void *)(a2 + 112);
  *(void *)(a1 + 120) = *(void *)(a2 + 120);
  *(unsigned char *)(a1 + 128) = *(unsigned char *)(a2 + 128);
  return a1;
}

void *__swift_memcpy129_8(void *a1, const void *a2)
{
  return memcpy(a1, a2, 0x81uLL);
}

uint64_t assignWithTake for MLObjectDetector.PersistentParameters(uint64_t a1, uint64_t a2)
{
  char v4 = *(unsigned char *)(a2 + 8);
  uint64_t v5 = *(void *)a1;
  *(void *)a1 = *(void *)a2;
  int v6 = *(_DWORD *)(a1 + 8);
  *(unsigned char *)(a1 + 8) = v4;
  outlined consume of Result<_DataTable, Error>(v5, v6);
  int v7 = (void *)(a1 + 16);
  uint64_t v8 = (void *)(a2 + 16);
  char v9 = *(unsigned char *)(a1 + 24);
  if (v9 == -1)
  {
    *(unsigned char *)(a1 + 24) = *(unsigned char *)(a2 + 24);
    void *v7 = *v8;
  }
  else
  {
    char v10 = *(unsigned char *)(a2 + 24);
    if (v10 == -1)
    {
      outlined destroy of MLDataTable(a1 + 16);
      void *v7 = *v8;
      *(unsigned char *)(a1 + 24) = *(unsigned char *)(a2 + 24);
    }
    else
    {
      uint64_t v11 = *(void *)(a1 + 16);
      *(void *)(a1 + 16) = *v8;
      *(unsigned char *)(a1 + 24) = v10 & 1;
      outlined consume of Result<_DataTable, Error>(v11, v9 & 1);
    }
  }
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  uint64_t v12 = *(void *)(a1 + 40);
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  swift_bridgeObjectRelease(v12);
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  uint64_t v13 = *(void *)(a1 + 56);
  *(void *)(a1 + 56) = *(void *)(a2 + 56);
  swift_bridgeObjectRelease(v13);
  *(unsigned char *)(a1 + 64) = *(unsigned char *)(a2 + 64);
  *(unsigned char *)(a1 + 65) = *(unsigned char *)(a2 + 65);
  *(unsigned char *)(a1 + 66) = *(unsigned char *)(a2 + 66);
  *(unsigned char *)(a1 + 80) = *(unsigned char *)(a2 + 80);
  *(void *)(a1 + 72) = *(void *)(a2 + 72);
  *(void *)(a1 + 88) = *(void *)(a2 + 88);
  *(unsigned char *)(a1 + 96) = *(unsigned char *)(a2 + 96);
  *(_OWORD *)(a1 + 104) = *(_OWORD *)(a2 + 104);
  *(unsigned char *)(a1 + 128) = *(unsigned char *)(a2 + 128);
  *(void *)(a1 + 120) = *(void *)(a2 + 120);
  return a1;
}

uint64_t getEnumTagSinglePayload for MLObjectDetector.PersistentParameters(uint64_t a1, int a2)
{
  if (a2)
  {
    if (a2 < 0 && *(unsigned char *)(a1 + 129)) {
      int v2 = *(_DWORD *)a1 + 0x7FFFFFFF;
    }
    else {
      int v2 = (*(void *)(a1 + 40) & 0xFFFFFFFF00000001) != 0 ? -1 : *(void *)(a1 + 40) >> 1;
    }
  }
  else
  {
    int v2 = -1;
  }
  return (v2 + 1);
}

void storeEnumTagSinglePayload for MLObjectDetector.PersistentParameters(uint64_t a1, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)(a1 + 120) = 0;
    *(_OWORD *)(a1 + 104) = 0;
    *(_OWORD *)(a1 + 88) = 0;
    *(_OWORD *)(a1 + 72) = 0;
    *(_OWORD *)(a1 + 56) = 0;
    *(_OWORD *)(a1 + 40) = 0;
    *(_OWORD *)(a1 + 24) = 0;
    *(_OWORD *)(a1 + 8) = 0;
    *(void *)a1 = a2 + 0x80000000;
    *(unsigned char *)(a1 + 128) = 0;
    if (a3 < 0) {
      *(unsigned char *)(a1 + 129) = 1;
    }
  }
  else
  {
    if (a3 < 0) {
      *(unsigned char *)(a1 + 129) = 0;
    }
    if (a2) {
      *(void *)(a1 + 40) = 2 * (a2 - 1);
    }
  }
}

ValueMetadata *type metadata accessor for MLObjectDetector.PersistentParameters()
{
  return &type metadata for MLObjectDetector.PersistentParameters;
}

uint64_t MLObjectDetector.PersistentParameters.modelParameters.getter()
{
  v14[0] = v0;
  uint64_t v2 = type metadata accessor for MLObjectDetector.ModelParameters.ValidationData(0);
  int64_t v3 = *(void *)(*(void *)(v2 - 8) + 64);
  char v4 = alloca(v3);
  uint64_t v5 = alloca(v3);
  int v6 = alloca(v3);
  int v7 = alloca(v3);
  uint64_t v8 = *(void *)(v1 + 16);
  char v9 = *(unsigned char *)(v1 + 24);
  uint64_t v15 = *(void *)(v1 + 72);
  char v19 = *(unsigned char *)(v1 + 80);
  v14[1] = *(void *)(v1 + 88);
  char v20 = *(unsigned char *)(v1 + 96);
  double v17 = *(double *)(v1 + 104);
  double v18 = *(double *)(v1 + 112);
  unint64_t v16 = *(void *)(v1 + 120);
  char v10 = *(unsigned char *)(v1 + 128);
  if (v9 == -1)
  {
    swift_storeEnumTagMultiPayload(&v12, v2, 4);
  }
  else
  {
    unint64_t v12 = v8;
    char v13 = v9 & 1;
    strcpy((char *)v14, "imagefilename");
    HIWORD(v14[1]) = -4864;
    uint64_t v15 = 0x697461746F6E6E61;
    unint64_t v16 = 0xEA00000000006E6FLL;
    swift_storeEnumTagMultiPayload(&v12, v2, 2);
    outlined init with take of MLObjectDetector.ModelParameters.ValidationData((uint64_t)&v12, (uint64_t)&v12);
  }
  double v17 = (double)SLODWORD(v17);
  double v18 = (double)SLODWORD(v18);
  unint64_t v12 = v16;
  char v13 = v10 & 1;
  outlined copy of MLDataTable?(v8, v9);
  return MLObjectDetector.ModelParameters.init(validation:batchSize:maxIterations:gridSize:algorithm:)((uint64_t)&v12, v15, v19, v14[1], v20, (uint64_t *)&v12, v17, v18);
}

uint64_t MLObjectDetector.PersistentParameters.init(trainingData:validationData:imageColumnName:annotationColumnName:annotationType:modelParameters:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, __int16 *a7, uint64_t a8)
{
  uint64_t v57 = a4;
  uint64_t v51 = a3;
  __dst = v8;
  uint64_t v55 = a6;
  uint64_t v52 = a5;
  uint64_t v9 = *(void *)a1;
  unsigned __int8 v10 = *(unsigned char *)(a1 + 8);
  uint64_t v56 = *(void *)a2;
  unsigned __int8 v11 = *(unsigned char *)(a2 + 8);
  __int16 v63 = *a7;
  char v64 = *((unsigned char *)a7 + 2);
  unint64_t v12 = (int *)type metadata accessor for MLObjectDetector.ModelParameters(0);
  double v13 = (double)(int)*(void *)(a8 + v12[7]);
  if ((~*(void *)&v13 & 0x7FF0000000000000) == 0) {
    BUG();
  }
  if (v13 <= -9.223372036854778e18) {
    BUG();
  }
  if (v13 >= 9.223372036854776e18) {
    BUG();
  }
  double v14 = (double)(int)*(void *)(a8 + v12[8]);
  if ((~*(void *)&v14 & 0x7FF0000000000000) == 0) {
    BUG();
  }
  if (v14 <= -9.223372036854778e18) {
    BUG();
  }
  if (v14 >= 9.223372036854776e18) {
    BUG();
  }
  double v60 = (double)(int)*(void *)(a8 + v12[8]);
  double v61 = v13;
  uint64_t v15 = v12[5];
  uint64_t v53 = *(void *)(a8 + v15);
  char v65 = *(unsigned char *)(a8 + v15 + 8);
  uint64_t v16 = v12[6];
  uint64_t v54 = *(void *)(a8 + v16);
  char v66 = *(unsigned char *)(a8 + v16 + 8);
  outlined init with copy of Any?(a8 + v12[10], (uint64_t)v46);
  int v62 = v11;
  int v59 = v10;
  uint64_t v17 = v9;
  if (!v47)
  {
    outlined copy of Result<_DataTable, Error>(v9, v10);
    outlined copy of MLDataTable?(v56, v62);
    uint64_t v18 = v57;
    swift_bridgeObjectRetain(v57);
    uint64_t v19 = v55;
    swift_bridgeObjectRetain(v55);
    outlined destroy of Any?((uint64_t)v46);
    goto LABEL_11;
  }
  outlined copy of Result<_DataTable, Error>(v9, v10);
  outlined copy of MLDataTable?(v56, v62);
  uint64_t v18 = v57;
  swift_bridgeObjectRetain(v57);
  uint64_t v19 = v55;
  swift_bridgeObjectRetain(v55);
  if (!swift_dynamicCast(&v28, v46, (char *)&type metadata for Any + 8, &type metadata for MLObjectDetector.ModelParameters.ModelAlgorithmType, 6))
  {
LABEL_11:
    char v67 = 1;
    uint64_t v58 = 0;
    goto LABEL_12;
  }
  uint64_t v58 = v28;
  char v67 = v29;
LABEL_12:
  uint64_t v50 = v9;
  uint64_t v20 = (int)v60;
  uint64_t v49 = v20;
  *(void *)&double v61 = (int)v61;
  outlined destroy of MLObjectDetector.ModelParameters(a8);
  __src[0] = v17;
  LOBYTE(v60) = v59 & 1;
  LOBYTE(__src[1]) = v59 & 1;
  __src[2] = v56;
  LOBYTE(__src[3]) = v62;
  __src[4] = v51;
  char v21 = v18;
  __src[5] = v18;
  __src[6] = v52;
  __src[7] = v19;
  LOWORD(__src[8]) = v63;
  BYTE2(__src[8]) = v64;
  __src[9] = v53;
  v65 &= 1u;
  LOBYTE(__src[10]) = v65;
  __src[11] = v54;
  v66 &= 1u;
  LOBYTE(__src[12]) = v66;
  *(double *)&__src[13] = v61;
  __src[14] = v20;
  __src[15] = v58;
  uint64_t v22 = v56;
  LOBYTE(v20) = v67 & 1;
  LOBYTE(__src[16]) = v67 & 1;
  outlined retain of MLObjectDetector.PersistentParameters((uint64_t)__src);
  swift_bridgeObjectRelease(v21);
  swift_bridgeObjectRelease(v19);
  uint64_t v23 = v22;
  uint64_t v24 = v22;
  LOBYTE(v22) = v62;
  outlined consume of MLDataTable?(v23, v62);
  uint64_t v25 = v50;
  outlined consume of Result<_DataTable, Error>(v50, v59);
  memcpy(__dst, __src, 0x81uLL);
  uint64_t v28 = v25;
  char v29 = LOBYTE(v60);
  uint64_t v30 = v24;
  char v31 = v22;
  uint64_t v32 = v51;
  uint64_t v33 = v57;
  uint64_t v34 = v52;
  uint64_t v35 = v55;
  __int16 v36 = v63;
  char v37 = v64;
  uint64_t v38 = v53;
  char v39 = v65;
  uint64_t v40 = v54;
  char v41 = v66;
  double v42 = v61;
  uint64_t v43 = v49;
  uint64_t v44 = v58;
  char v45 = v20;
  return outlined release of MLObjectDetector.PersistentParameters((uint64_t)&v28);
}

NSURL *MLObjectDetector.PersistentParameters.init(sessionDirectory:)(uint64_t a1)
{
  uint64_t v109 = v2;
  __dst = v1;
  uint64_t v3 = type metadata accessor for URL(0);
  uint64_t v4 = *(void *)(v3 - 8);
  int64_t v5 = *(void *)(v4 + 64);
  int v6 = alloca(v5);
  int v7 = alloca(v5);
  uint64_t v106 = &v94;
  uint64_t v8 = alloca(v5);
  uint64_t v9 = alloca(v5);
  uint64_t v113 = &v94;
  unsigned __int8 v10 = alloca(v5);
  unsigned __int8 v11 = alloca(v5);
  char v128 = 1;
  char v129 = 1;
  URL.appendingPathComponent(_:)(0xD000000000000010, "ObjectDetectorMetrics." + 0x8000000000000000);
  uint64_t v12 = v109;
  uint64_t v13 = Data.init(contentsOf:options:)(&v94, 0);
  uint64_t v109 = v12;
  if (v12)
  {
    uint64_t v15 = *(void (**)(uint64_t, uint64_t))(v4 + 8);
    v15(a1, v3);
    v15((uint64_t)&v94, v3);
    uint64_t v16 = 0;
    char v17 = -1;
    char v18 = 0;
    goto LABEL_24;
  }
  uint64_t v118 = a1;
  uint64_t v19 = *(void (**)(uint64_t, uint64_t))(v4 + 8);
  unint64_t v20 = v14;
  uint64_t v21 = v13;
  char v126 = v19;
  v19((uint64_t)&v94, v3);
  uint64_t v22 = objc_opt_self(NSPropertyListSerialization);
  uint64_t v115 = v21;
  unint64_t v114 = v20;
  Class isa = Data._bridgeToObjectiveC()().super.isa;
  *(void *)&long long v150 = 0;
  id v24 = [v22 propertyListWithData:isa options:0 format:0 error:&v150];
  id v25 = v24;

  id v26 = (id)v150;
  uint64_t v27 = v3;
  if (!v25)
  {
    uint64_t v38 = v26;
    _convertNSErrorToError(_:)(v26);

    swift_willThrow(v38, "propertyListWithData:options:format:error:", v39, v40, v41, v42);
    outlined consume of Data._Representation(v115, v114);
    uint64_t v16 = 0;
    v126(v118, v3);
LABEL_23:
    char v17 = -1;
    char v18 = 0;
    goto LABEL_24;
  }
  _bridgeAnyObjectToAny(_:)(v25);
  swift_unknownObjectRelease(v25);
  outlined init with copy of Any((uint64_t)v169, (uint64_t)&v150);
  uint64_t v28 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [String : Any]);
  if (!swift_dynamicCast(&v135, &v150, (char *)&type metadata for Any + 8, v28, 6))
  {
    uint64_t v43 = lazy protocol witness table accessor for type MLCreateError and conformance MLCreateError();
    swift_allocError(&type metadata for MLCreateError, v43, 0, 0);
    *(void *)uint64_t v44 = 0xD000000000000037;
    *(void *)(v44 + 8) = "parameters.plist" + 0x8000000000000000;
    *(_OWORD *)(v44 + 16) = 0;
    *(_OWORD *)(v44 + 32) = 0;
    *(unsigned char *)(v44 + 48) = 0;
    swift_willThrow(&type metadata for MLCreateError, v43, v44, v45, v46, v47);
    outlined consume of Data._Representation(v115, v114);
    uint64_t v48 = v27;
    uint64_t v16 = 0;
    v126(v118, v48);
LABEL_22:
    __swift_destroy_boxed_opaque_existential_1Tm(v169);
    goto LABEL_23;
  }
  uint64_t v117 = (char *)&type metadata for Any + 8;
  uint64_t v96 = v28;
  uint64_t v29 = v135;
  specialized Dictionary.subscript.getter(0x6C6F436567616D69, 0xEF656D614E6E6D75, v135);
  uint64_t v30 = v118;
  if (!*((void *)&v151 + 1))
  {
    swift_bridgeObjectRelease(v29);
    outlined destroy of Any?((uint64_t)&v150);
LABEL_17:
    uint64_t v49 = v126;
LABEL_21:
    uint64_t v50 = lazy protocol witness table accessor for type MLCreateError and conformance MLCreateError();
    swift_allocError(&type metadata for MLCreateError, v50, 0, 0);
    *(void *)uint64_t v51 = 0xD00000000000003FLL;
    *(void *)(v51 + 8) = "labeled_directories" + 0x8000000000000000;
    *(_OWORD *)(v51 + 16) = 0;
    *(_OWORD *)(v51 + 32) = 0;
    *(unsigned char *)(v51 + 48) = 0;
    swift_willThrow(&type metadata for MLCreateError, v50, v51, v52, v53, v54);
    outlined consume of Data._Representation(v115, v114);
    uint64_t v55 = v27;
    uint64_t v16 = 0;
    v49(v30, v55);
    goto LABEL_22;
  }
  if (!swift_dynamicCast(&v135, &v150, v117, &type metadata for String, 6))
  {
    swift_bridgeObjectRelease(v29);
    goto LABEL_17;
  }
  uint64_t v31 = *((void *)&v135 + 1);
  unint64_t v97 = v135;
  specialized Dictionary.subscript.getter(0xD000000000000014, (uint64_t)("oth String or both Int." + 0x8000000000000000), v29);
  if (!*((void *)&v151 + 1))
  {
    swift_bridgeObjectRelease(v31);
    swift_bridgeObjectRelease(v29);
    outlined destroy of Any?((uint64_t)&v150);
LABEL_20:
    uint64_t v49 = v126;
    uint64_t v30 = v118;
    goto LABEL_21;
  }
  uint64_t v120 = v31;
  if (!swift_dynamicCast(&v135, &v150, v117, &type metadata for String, 6))
  {
    swift_bridgeObjectRelease(v120);
    swift_bridgeObjectRelease(v29);
    goto LABEL_20;
  }
  unint64_t v98 = v135;
  uint64_t v32 = v29;
  uint64_t v33 = *((void *)&v135 + 1);
  char v34 = v120;
  swift_bridgeObjectRetain(v120);
  swift_bridgeObjectRetain(v33);
  specialized Dictionary.subscript.getter(0x697461746F6E6E61, 0xEE00657079546E6FLL, v32);
  uint64_t v119 = v33;
  if (!*((void *)&v151 + 1))
  {
    swift_bridgeObjectRelease(v34);
    swift_bridgeObjectRelease(v33);
    swift_bridgeObjectRelease(v32);
    outlined destroy of Any?((uint64_t)&v150);
LABEL_29:
    char v37 = v126;
    uint64_t v36 = v118;
    goto LABEL_30;
  }
  uint64_t v103 = v32;
  if (!swift_dynamicCast(&v135, &v150, v117, v96, 6))
  {
    swift_bridgeObjectRelease(v120);
    swift_bridgeObjectRelease(v119);
    swift_bridgeObjectRelease(v103);
    goto LABEL_29;
  }
  MLObjectDetector.AnnotationType.init(dictionary:)(v135);
  uint64_t v35 = v103;
  uint64_t v36 = v118;
  if ((_BYTE)v150 == 2)
  {
    swift_bridgeObjectRelease(v120);
    swift_bridgeObjectRelease(v119);
    swift_bridgeObjectRelease(v35);
    char v37 = v126;
LABEL_30:
    uint64_t v57 = lazy protocol witness table accessor for type MLCreateError and conformance MLCreateError();
    swift_allocError(&type metadata for MLCreateError, v57, 0, 0);
    *(void *)uint64_t v58 = 0xD000000000000044;
    int v62 = "featureExtractorType";
LABEL_31:
    *(void *)(v58 + 8) = (unint64_t)v62 | 0x8000000000000000;
    *(_OWORD *)(v58 + 16) = 0;
    *(_OWORD *)(v58 + 32) = 0;
    *(unsigned char *)(v58 + 48) = 0;
    swift_willThrow(&type metadata for MLCreateError, v57, v58, v59, v60, v61);
    outlined consume of Data._Representation(v115, v114);
    uint64_t v63 = v27;
    uint64_t v16 = 0;
    v37(v36, v63);
    __swift_destroy_boxed_opaque_existential_1Tm(v169);
    char v18 = 1;
LABEL_32:
    char v17 = -1;
    goto LABEL_24;
  }
  char v122 = v150 & 1;
  char v125 = v150 & 1;
  unsigned int v110 = (BYTE2(v150) << 16) | (unsigned __int16)v150;
  unsigned int v64 = v110 >> 8;
  LOBYTE(v64) = BYTE1(v150) & 1;
  unsigned int v101 = v64;
  char v121 = BYTE1(v150) & 1;
  specialized Dictionary.subscript.getter(0x7A69536863746162, 0xE900000000000065, v103);
  if (*((void *)&v151 + 1))
  {
    char v65 = swift_dynamicCast(&v135, &v150, v117, &type metadata for Int, 6);
    if (v65) {
      unint64_t v66 = v135;
    }
    else {
      unint64_t v66 = 0;
    }
    unint64_t v104 = v66;
    char v67 = v65 ^ 1;
  }
  else
  {
    outlined destroy of Any?((uint64_t)&v150);
    char v67 = 1;
    unint64_t v104 = 0;
  }
  char v123 = v67;
  char v128 = v67;
  specialized Dictionary.subscript.getter(0x617265744978616DLL, 0xED0000736E6F6974, v35);
  if (*((void *)&v151 + 1))
  {
    char v68 = swift_dynamicCast(&v135, &v150, v117, &type metadata for Int, 6);
    if (v68) {
      uint64_t v69 = (_UNKNOWN **)v135;
    }
    else {
      uint64_t v69 = 0;
    }
    uint64_t v105 = v69;
    char v70 = v68 ^ 1;
  }
  else
  {
    outlined destroy of Any?((uint64_t)&v150);
    char v70 = 1;
    uint64_t v105 = 0;
  }
  char v124 = v70;
  char v129 = v70;
  if (*(void *)(v35 + 16)
    && (unint64_t v71 = specialized __RawDictionaryStorage.find<A>(_:)(0x7464695764697267, 0xE900000000000068), (v72 & 1) != 0))
  {
    outlined init with copy of Any(*(void *)(v35 + 56) + 32 * v71, (uint64_t)&v135);
  }
  else
  {
    long long v136 = 0;
    long long v135 = 0;
  }
  outlined init with take of Any?((uint64_t)&v135, (uint64_t)__src);
  if (*(void *)&__src[24])
  {
    outlined init with take of Any((long long *)__src, &v150);
  }
  else
  {
    *((void *)&v151 + 1) = &type metadata for Int;
    *(void *)&long long v150 = 13;
    outlined destroy of Any?((uint64_t)__src);
  }
  char v37 = v126;
  if (!swift_dynamicCast(&v135, &v150, v117, &type metadata for Int, 6))
  {
    swift_bridgeObjectRelease(v120);
    swift_bridgeObjectRelease(v119);
    swift_bridgeObjectRelease(v35);
LABEL_65:
    uint64_t v57 = lazy protocol witness table accessor for type MLCreateError and conformance MLCreateError();
    swift_allocError(&type metadata for MLCreateError, v57, 0, 0);
    *(void *)uint64_t v58 = 0xD00000000000003ELL;
    int v62 = "lid annotation type.";
    goto LABEL_31;
  }
  unint64_t v99 = v135;
  if (*(void *)(v35 + 16)
    && (unint64_t v73 = specialized __RawDictionaryStorage.find<A>(_:)(0x6769654864697267, 0xEA00000000007468), (v74 & 1) != 0))
  {
    outlined init with copy of Any(*(void *)(v35 + 56) + 32 * v73, (uint64_t)&v150);
  }
  else
  {
    long long v151 = 0;
    long long v150 = 0;
  }
  outlined init with take of Any?((uint64_t)&v150, (uint64_t)&v135);
  if (*((void *)&v136 + 1))
  {
    outlined init with take of Any(&v135, &v167);
  }
  else
  {
    Swift::String v168 = &type metadata for Int;
    *(void *)&long long v167 = 13;
    outlined destroy of Any?((uint64_t)&v135);
  }
  char v75 = v119;
  if (!swift_dynamicCast(&v130, &v167, v117, &type metadata for Int, 6))
  {
    swift_bridgeObjectRelease(v120);
    swift_bridgeObjectRelease(v75);
    swift_bridgeObjectRelease(v35);
    char v37 = v126;
    goto LABEL_65;
  }
  uint64_t v107 = v27;
  uint64_t v100 = v130;
  uint64_t v76 = v113;
  URL.appendingPathComponent(_:)(1635017060, 0xE400000000000000);
  char v18 = 1;
  char v111 = 1;
  LOBYTE(v150) = 1;
  *((void *)&v150 + 1) = 44;
  long long v151 = 0xE100000000000000;
  unint64_t v152 = 0xE000000000000000;
  uint64_t v153 = 92;
  unint64_t v154 = 0xE100000000000000;
  char v155 = 1;
  uint64_t v156 = 34;
  unint64_t v157 = 0xE100000000000000;
  char v158 = 1;
  uint64_t v159 = &outlined read-only object #0 of default argument 1 of MLDataTable.init(contentsOf:options:);
  uint64_t v160 = 10;
  unint64_t v161 = 0xE100000000000000;
  long long v162 = 0;
  char v163 = 1;
  uint64_t v164 = 0;
  uint64_t v77 = v109;
  MLDataTable.init(contentsOf:options:)(v76, &v150);
  if (v77)
  {
    uint64_t v16 = 0;
    outlined consume of Data._Representation(v115, v114);
    swift_bridgeObjectRelease(v120);
    swift_bridgeObjectRelease(v119);
    swift_bridgeObjectRelease(v103);
    v126(v118, v107);
    __swift_destroy_boxed_opaque_existential_1Tm(v169);
    goto LABEL_32;
  }
  LOBYTE(v127) = v166;
  uint64_t v108 = v165;
  int v116 = v166;
  outlined copy of Result<_DataTable, Error>(v165, v166);
  uint64_t v78 = v106;
  URL.appendingPathComponent(_:)(0x69746164696C6176, 0xEE00617461446E6FLL);
  LOBYTE(v135) = 1;
  *((void *)&v135 + 1) = 44;
  long long v136 = 0xE100000000000000;
  char v112 = 1;
  unint64_t v137 = 0xE000000000000000;
  uint64_t v138 = 92;
  unint64_t v139 = 0xE100000000000000;
  LOBYTE(v140) = 1;
  uint64_t v141 = 34;
  unint64_t v142 = 0xE100000000000000;
  char v143 = 1;
  uint64_t v144 = &outlined read-only object #0 of default argument 1 of MLDataTable.init(contentsOf:options:);
  uint64_t v145 = 10;
  unint64_t v146 = 0xE100000000000000;
  long long v147 = 0;
  char v148 = 1;
  uint64_t v149 = 0;
  MLDataTable.init(contentsOf:options:)(v78, &v135);
  char v17 = __src[8];
  int v79 = __src[8];
  uint64_t v113 = *(uint64_t **)__src;
  outlined copy of MLDataTable?(*(uint64_t *)__src, __src[8]);
  outlined consume of MLDataTable?(0, 255);
  char v80 = v103;
  specialized Dictionary.subscript.getter(0x687469726F676C61, 0xE90000000000006DLL, v103);
  swift_bridgeObjectRelease(v80);
  if (*((void *)&v136 + 1))
  {
    uint64_t v109 = 0;
    if (swift_dynamicCast(__src, &v135, v117, v96, 6))
    {
      MLObjectDetector.ModelParameters.ModelAlgorithmType.init(dictionary:)(*(uint64_t *)__src);
      if (!v134)
      {
        v110 >>= 16;
        char v88 = v110;
        LOBYTE(v106) = v133;
        uint64_t v117 = v132;
        outlined consume of Data._Representation(v115, v114);
        v126(v118, v107);
        __swift_destroy_boxed_opaque_existential_1Tm(v169);
        *(void *)__src = v108;
        __src[8] = v116;
        *(void *)&__src[16] = v113;
        int v102 = v79;
        __src[24] = v79;
        *(void *)&__src[32] = v97;
        char v89 = v120;
        *(void *)&__src[40] = v120;
        *(void *)&__src[48] = v98;
        char v90 = v119;
        *(void *)&__src[56] = v119;
        __src[64] = v122;
        __src[65] = v101;
        __src[66] = v88;
        *(void *)&__src[72] = v104;
        __src[80] = v123;
        *(void *)&__src[88] = v105;
        __src[96] = v124;
        *(void *)&__src[104] = v99;
        *(void *)&__src[112] = v100;
        *(void *)&__src[120] = v117;
        LOBYTE(v106) = v106 & 1;
        __src[128] = (_BYTE)v106;
        outlined retain of MLObjectDetector.PersistentParameters((uint64_t)__src);
        swift_bridgeObjectRelease(v89);
        swift_bridgeObjectRelease(v90);
        uint64_t v91 = (uint64_t)v113;
        char v92 = v102;
        outlined consume of MLDataTable?((uint64_t)v113, v102);
        uint64_t v93 = v108;
        outlined consume of Result<_DataTable, Error>(v108, v116);
        memcpy(__dst, __src, 0x81uLL);
        *(void *)&long long v135 = v93;
        BYTE8(v135) = v127;
        *(void *)&long long v136 = v91;
        BYTE8(v136) = v92;
        unint64_t v137 = v97;
        uint64_t v138 = v120;
        unint64_t v139 = v98;
        uint64_t v140 = v119;
        LOBYTE(v141) = v125;
        BYTE1(v141) = v121;
        BYTE2(v141) = v110;
        unint64_t v142 = v104;
        char v143 = v128;
        uint64_t v144 = v105;
        LOBYTE(v145) = v129;
        unint64_t v146 = v99;
        *(void *)&long long v147 = v100;
        *((void *)&v147 + 1) = v117;
        char v148 = (char)v106;
        outlined release of MLObjectDetector.PersistentParameters((uint64_t)&v135);
        return __stack_chk_guard;
      }
      swift_bridgeObjectRelease(v120);
      swift_bridgeObjectRelease(v119);
      outlined consume of MLDataTable?((uint64_t)v113, v17);
      uint64_t v81 = v108;
      outlined consume of Result<_DataTable, Error>(v108, v116);
    }
    else
    {
      outlined consume of MLDataTable?((uint64_t)v113, v17);
      uint64_t v81 = v108;
      outlined consume of Result<_DataTable, Error>(v108, v116);
      swift_bridgeObjectRelease(v120);
      swift_bridgeObjectRelease(v119);
    }
  }
  else
  {
    outlined consume of MLDataTable?((uint64_t)v113, v17);
    uint64_t v81 = v108;
    outlined consume of Result<_DataTable, Error>(v108, v116);
    swift_bridgeObjectRelease(v120);
    swift_bridgeObjectRelease(v119);
    outlined destroy of Any?((uint64_t)&v135);
  }
  uint64_t v82 = v107;
  uint64_t v83 = lazy protocol witness table accessor for type MLCreateError and conformance MLCreateError();
  swift_allocError(&type metadata for MLCreateError, v83, 0, 0);
  *(void *)uint64_t v84 = 0xD000000000000023;
  *(void *)(v84 + 8) = "contains an invalid grid size." + 0x8000000000000000;
  *(_OWORD *)(v84 + 16) = 0;
  *(_OWORD *)(v84 + 32) = 0;
  *(unsigned char *)(v84 + 48) = 0;
  swift_willThrow(&type metadata for MLCreateError, v83, v84, v85, v86, v87);
  outlined consume of Data._Representation(v115, v114);
  v126(v118, v82);
  __swift_destroy_boxed_opaque_existential_1Tm(v169);
  outlined consume of Result<_DataTable, Error>(v81, v127);
  char v18 = 1;
  uint64_t v16 = (uint64_t)v113;
LABEL_24:
  outlined consume of MLDataTable?(v16, v17);
  if (v18)
  {
    swift_bridgeObjectRelease(v119);
    swift_bridgeObjectRelease(v120);
  }
  return __stack_chk_guard;
}

uint64_t MLObjectDetector.AnnotationType.init(dictionary:)(uint64_t a1)
{
  uint64_t v2 = v1;
  if (!*(void *)(a1 + 16)) {
    goto LABEL_37;
  }
  unint64_t v3 = specialized __RawDictionaryStorage.find<A>(_:)(1684957547, 0xE400000000000000);
  if ((v4 & 1) == 0) {
    goto LABEL_37;
  }
  outlined init with copy of Any(*(void *)(a1 + 56) + 32 * v3, (uint64_t)v23);
  if (!swift_dynamicCast(&v26, v23, (char *)&type metadata for Any + 8, &type metadata for String, 6))goto LABEL_37; {
  char v5 = v27;
  }
  if (v26 == 0x676E69646E756F62 && v27 == 0xEC000000786F625FLL)
  {
    swift_bridgeObjectRelease(95);
  }
  else
  {
    char v6 = _stringCompareWithSmolCheck(_:_:expecting:)(v26, v27, 0x676E69646E756F62, 0xEC000000786F625FLL, 0);
    swift_bridgeObjectRelease(v5);
    if ((v6 & 1) == 0) {
      goto LABEL_37;
    }
  }
  LOBYTE(v7) = 0;
  specialized Dictionary.subscript.getter(0x7374696E75, 0xE500000000000000, a1);
  if (!v24) {
    goto LABEL_19;
  }
  if (!swift_dynamicCast(&v26, v23, (char *)&type metadata for Any + 8, &type metadata for String, 6))goto LABEL_37; {
  if ((uint64_t v8 = v26, v26 == 0x6C65786970) && v27 == 0xE500000000000000
  }
    || (uint64_t v7 = v27,
        (_stringCompareWithSmolCheck(_:_:expecting:)(0x6C65786970, 0xE500000000000000, v26, v27, 0) & 1) != 0))
  {
    swift_bridgeObjectRelease(v7);
    LODWORD(v8) = 0;
  }
  else if (v8 == 0x7A696C616D726F6ELL && v7 == 0xEA00000000006465)
  {
    swift_bridgeObjectRelease(101);
    LOBYTE(v8) = 1;
  }
  else
  {
    uint64_t v11 = v8;
    LODWORD(v8) = v7;
    char v12 = _stringCompareWithSmolCheck(_:_:expecting:)(0x7A696C616D726F6ELL, 0xEA00000000006465, v11, v7, 0);
    swift_bridgeObjectRelease(v8);
    LOBYTE(v8) = 1;
    if ((v12 & 1) == 0) {
      goto LABEL_37;
    }
  }
  specialized Dictionary.subscript.getter(0x6E696769726FLL, 0xE600000000000000, a1);
  if (!v24)
  {
LABEL_19:
    swift_bridgeObjectRelease(a1);
LABEL_20:
    outlined destroy of Any?((uint64_t)v23);
    goto LABEL_38;
  }
  if (!swift_dynamicCast(&v26, v23, (char *)&type metadata for Any + 8, &type metadata for String, 6))goto LABEL_37; {
  int v25 = v8;
  }
  uint64_t v9 = v26;
  uint64_t v10 = v27;
  if (v26 == 0x7466656C5F706F74 && v27 == 0xE800000000000000)
  {
    swift_bridgeObjectRelease(0);
    int v28 = 0;
    goto LABEL_32;
  }
  int v28 = 0;
  if (_stringCompareWithSmolCheck(_:_:expecting:)(0x7466656C5F706F74, 0xE800000000000000, v26, v27, 0))
  {
    swift_bridgeObjectRelease(v10);
    goto LABEL_32;
  }
  if (v9 == 0x6C5F6D6F74746F62 && v10 == 0xEB00000000746665)
  {
    swift_bridgeObjectRelease(101);
    int v28 = 256;
    goto LABEL_32;
  }
  char v13 = _stringCompareWithSmolCheck(_:_:expecting:)(0x6C5F6D6F74746F62, 0xEB00000000746665, v9, v10, 0);
  swift_bridgeObjectRelease(v10);
  int v28 = 256;
  if ((v13 & 1) == 0)
  {
LABEL_37:
    swift_bridgeObjectRelease(a1);
    goto LABEL_38;
  }
LABEL_32:
  specialized Dictionary.subscript.getter(0x726F68636E61, 0xE600000000000000, a1);
  swift_bridgeObjectRelease(a1);
  if (!v24) {
    goto LABEL_20;
  }
  if (swift_dynamicCast(&v26, v23, (char *)&type metadata for Any + 8, &type metadata for String, 6))
  {
    uint64_t v14 = v26;
    uint64_t v15 = v27;
    if (v26 == 0x7265746E6563 && v27 == 0xE600000000000000)
    {
      swift_bridgeObjectRelease(0);
      unsigned __int8 v16 = 0;
      unsigned __int8 v17 = v25;
LABEL_48:
      unsigned int v18 = v17 | v28 | (v16 << 16);
      goto LABEL_39;
    }
    char v20 = _stringCompareWithSmolCheck(_:_:expecting:)(0x7265746E6563, 0xE600000000000000, v26, v27, 0);
    unsigned __int8 v17 = v25;
    if (v20)
    {
      swift_bridgeObjectRelease(v15);
      unsigned __int8 v16 = 0;
      goto LABEL_48;
    }
    if (v14 == 0x7466656C5F706F74 && v15 == 0xE800000000000000)
    {
      char v21 = 0;
LABEL_47:
      swift_bridgeObjectRelease(v21);
      unsigned __int8 v16 = 1;
      goto LABEL_48;
    }
    if (_stringCompareWithSmolCheck(_:_:expecting:)(0x7466656C5F706F74, 0xE800000000000000, v14, v15, 0))
    {
      char v21 = v15;
      goto LABEL_47;
    }
    if (v14 == 0x6C5F6D6F74746F62 && v15 == 0xEB00000000746665)
    {
      swift_bridgeObjectRelease(101);
      unsigned __int8 v16 = 2;
      goto LABEL_48;
    }
    char v22 = _stringCompareWithSmolCheck(_:_:expecting:)(0x6C5F6D6F74746F62, 0xEB00000000746665, v14, v15, 0);
    swift_bridgeObjectRelease(v15);
    unsigned __int8 v16 = 2;
    if (v22) {
      goto LABEL_48;
    }
  }
LABEL_38:
  unsigned int v18 = 2;
LABEL_39:
  *(_WORD *)uint64_t v2 = v18;
  uint64_t result = HIWORD(v18);
  *(unsigned char *)(v2 + 2) = result;
  return result;
}

char MLObjectDetector.ModelParameters.ModelAlgorithmType.init(dictionary:)(uint64_t a1)
{
  char v2 = a1;
  uint64_t v3 = v1;
  if (!*(void *)(a1 + 16)) {
    goto LABEL_18;
  }
  unint64_t v4 = specialized __RawDictionaryStorage.find<A>(_:)(0x687469726F676C61, 0xE90000000000006DLL);
  if ((v5 & 1) == 0) {
    goto LABEL_18;
  }
  outlined init with copy of Any(*(void *)(a1 + 56) + 32 * v4, (uint64_t)v15);
  if (!swift_dynamicCast(&v17, v15, (char *)&type metadata for Any + 8, &type metadata for String, 6))goto LABEL_18; {
  uint64_t v6 = v17;
  }
  uint64_t v7 = v18;
  if (v17 != 0x2D74656E6B726164 || v18 != (char *)0xEC0000006F6C6F79)
  {
    if (_stringCompareWithSmolCheck(_:_:expecting:)(0x2D74656E6B726164, 0xEC0000006F6C6F79, v17, v18, 0))
    {
      char v8 = (char)v7;
      goto LABEL_9;
    }
    if (v6 == 0xD000000000000010 && v7 == "annotationColumnName" + 0x8000000000000000)
    {
      swift_bridgeObjectRelease(("annotationColumnName" + 0x8000000000000000));
      goto LABEL_15;
    }
    char v12 = _stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000010, "annotationColumnName" + 0x8000000000000000, v6, v7, 0);
    swift_bridgeObjectRelease((_BYTE)v7);
    if (v12)
    {
LABEL_15:
      specialized Dictionary.subscript.getter(0x6E6F697369766572, 0xE800000000000000, a1);
      if (v16)
      {
        if (swift_dynamicCast(&v17, v15, (char *)&type metadata for Any + 8, &type metadata for Int, 6))
        {
          uint64_t v10 = v17;
          goto LABEL_23;
        }
      }
      else
      {
        outlined destroy of Any?((uint64_t)v15);
      }
      uint64_t v10 = 1;
LABEL_23:
      specialized Dictionary.subscript.getter(0xD000000000000014, (uint64_t)("transferLearning" + 0x8000000000000000), a1);
      swift_bridgeObjectRelease(a1);
      if (v16)
      {
        if (swift_dynamicCast(&v17, v15, (char *)&type metadata for Any + 8, &type metadata for String, 6))
        {
          char v13 = (char)v18;
          if (v17 == 0x72507463656A626FLL && v18 == (char *)0xEB00000000746E69)
          {
            swift_bridgeObjectRelease(105);
            char v9 = 0;
            goto LABEL_10;
          }
          char v9 = 0;
          char v14 = _stringCompareWithSmolCheck(_:_:expecting:)(0x72507463656A626FLL, 0xEB00000000746E69, v17, v18, 0);
          swift_bridgeObjectRelease(v13);
          char result = 0;
          if (v14) {
            goto LABEL_20;
          }
        }
      }
      else
      {
        outlined destroy of Any?((uint64_t)v15);
      }
LABEL_19:
      char result = 1;
      uint64_t v10 = 0;
      char v9 = 0;
      goto LABEL_20;
    }
LABEL_18:
    swift_bridgeObjectRelease(a1);
    goto LABEL_19;
  }
  char v8 = 121;
LABEL_9:
  swift_bridgeObjectRelease(v8);
  swift_bridgeObjectRelease(v2);
  char v9 = 1;
  uint64_t v10 = 0;
LABEL_10:
  char result = 0;
LABEL_20:
  *(void *)uint64_t v3 = v10;
  *(unsigned char *)(v3 + 8) = v9;
  *(unsigned char *)(v3 + 9) = result;
  return result;
}

NSURL *MLObjectDetector.PersistentParameters.save(toSessionDirectory:)(uint64_t a1)
{
  uint64_t v42 = v1;
  uint64_t v51 = a1;
  uint64_t v55 = type metadata accessor for URL(0);
  uint64_t v50 = *(void *)(v55 - 8);
  int64_t v3 = *(void *)(v50 + 64);
  unint64_t v4 = alloca(v3);
  char v5 = alloca(v3);
  uint64_t v48 = &v37;
  uint64_t v6 = alloca(v3);
  uint64_t v7 = alloca(v3);
  uint64_t v46 = &v37;
  char v8 = alloca(v3);
  char v9 = alloca(v3);
  uint64_t v43 = &v37;
  uint64_t v47 = *(void **)v2;
  char v58 = *(unsigned char *)(v2 + 8);
  uint64_t v49 = *(void **)(v2 + 16);
  char v59 = *(unsigned char *)(v2 + 24);
  uint64_t v41 = *(void *)(v2 + 32);
  uint64_t v10 = *(void *)(v2 + 40);
  uint64_t v40 = *(void *)(v2 + 48);
  uint64_t v11 = *(void *)(v2 + 56);
  __int16 v56 = *(_WORD *)(v2 + 64);
  char v57 = *(unsigned char *)(v2 + 66);
  uint64_t v45 = *(void **)(v2 + 72);
  uint64_t v44 = *(void **)(v2 + 88);
  LOBYTE(v54) = *(unsigned char *)(v2 + 96);
  LOBYTE(v52) = *(unsigned char *)(v2 + 128);
  LOBYTE(v53) = *(unsigned char *)(v2 + 80);
  uint64_t v39 = *(void *)(v2 + 104);
  uint64_t v38 = *(void *)(v2 + 112);
  char v37 = *(void **)(v2 + 120);
  uint64_t v12 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, Any)>);
  uint64_t inited = swift_initStackObject(v12, v64);
  *(void *)(inited + 16) = 6;
  *(void *)(inited + 24) = 12;
  *(void *)(inited + 32) = 0x6C6F436567616D69;
  *(void *)(inited + 40) = 0xEF656D614E6E6D75;
  *(void *)(inited + 72) = &type metadata for String;
  *(void *)(inited + 48) = v41;
  *(void *)(inited + 56) = v10;
  *(void *)(inited + 80) = 0xD000000000000014;
  *(void *)(inited + 88) = "oth String or both Int." + 0x8000000000000000;
  *(void *)(inited + 120) = &type metadata for String;
  *(void *)(inited + 96) = v40;
  *(void *)(inited + 104) = v11;
  strcpy((char *)(inited + 128), "annotationType");
  *(unsigned char *)(inited + 143) = -18;
  LOWORD(v61) = v56;
  BYTE2(v61) = v57;
  swift_bridgeObjectRetain(v10);
  swift_bridgeObjectRetain(v11);
  uint64_t v14 = MLObjectDetector.AnnotationType.dictionary.getter();
  uint64_t v15 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [String : Any]);
  *(void *)(inited + 168) = v15;
  *(void *)(inited + 144) = v14;
  *(void *)(inited + 176) = 0x7464695764697267;
  *(void *)(inited + 184) = 0xE900000000000068;
  *(void *)(inited + 216) = &type metadata for Int;
  *(void *)(inited + 192) = v39;
  *(void *)(inited + 224) = 0x6769654864697267;
  *(void *)(inited + 232) = 0xEA00000000007468;
  *(void *)(inited + 264) = &type metadata for Int;
  *(void *)(inited + 240) = v38;
  *(void *)(inited + 272) = 0x687469726F676C61;
  *(void *)(inited + 280) = 0xE90000000000006DLL;
  id v61 = v37;
  LOBYTE(v62) = (_BYTE)v52;
  uint64_t v16 = MLObjectDetector.ModelParameters.ModelAlgorithmType.dictionary.getter();
  *(void *)(inited + 312) = v15;
  *(void *)(inited + 288) = v16;
  uint64_t v60 = Dictionary.init(dictionaryLiteral:)(inited, &type metadata for String, (char *)&type metadata for Any + 8, &protocol witness table for String);
  if (!(_BYTE)v53)
  {
    uint64_t v63 = &type metadata for Int;
    id v61 = v45;
    specialized Dictionary.subscript.setter((uint64_t)&v61, 0x7A69536863746162, 0xE900000000000065);
  }
  if ((v54 & 1) == 0)
  {
    uint64_t v63 = &type metadata for Int;
    id v61 = v44;
    specialized Dictionary.subscript.setter((uint64_t)&v61, 0x617265744978616DLL, 0xED0000736E6F6974);
  }
  uint64_t v17 = objc_opt_self(NSPropertyListSerialization);
  char v18 = v60;
  Class isa = Dictionary._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease(v18);
  id v61 = 0;
  id v20 = [v17 dataWithPropertyList:isa format:200 options:0 error:&v61];
  id v21 = v20;

  id v22 = v61;
  if (v21)
  {
    uint64_t v23 = static Data._unconditionallyBridgeFromObjectiveC(_:)(v21);
    unint64_t v54 = v24;

    int v25 = v43;
    URL.appendingPathComponent(_:)(0xD000000000000010, "ObjectDetectorMetrics." + 0x8000000000000000);
    unint64_t v26 = v54;
    uint64_t v27 = v42;
    Data.write(to:options:)(v25, 0, v23, v54);
    if (v27)
    {
      (*(void (**)(void **, uint64_t))(v50 + 8))(v25, v55);
      outlined consume of Data._Representation(v23, v26);
    }
    else
    {
      uint64_t v53 = v23;
      uint64_t v33 = *(void (**)(void **, uint64_t))(v50 + 8);
      v33(v25, v55);
      id v61 = v47;
      LOBYTE(v62) = v58 & 1;
      outlined copy of Result<_DataTable, Error>((uint64_t)v47, v58);
      uint64_t v34 = (uint64_t)v46;
      URL.appendingPathComponent(_:)(1635017060, 0xE400000000000000);
      MLDataTable.write(to:)(v34);
      v33((void **)v34, v55);
      outlined consume of Result<_DataTable, Error>((uint64_t)v61, v62);
      if (v59 == -1)
      {
        outlined consume of Data._Representation(v53, v54);
      }
      else
      {
        uint64_t v52 = (void (*)(uint64_t, uint64_t))v33;
        id v61 = v49;
        LOBYTE(v62) = v59 & 1;
        outlined copy of MLDataTable?((uint64_t)v49, v59);
        uint64_t v35 = (uint64_t)v48;
        URL.appendingPathComponent(_:)(0x69746164696C6176, 0xEE00617461446E6FLL);
        MLDataTable.write(to:)(v35);
        outlined consume of Data._Representation(v53, v54);
        v52(v35, v55);
        outlined consume of Result<_DataTable, Error>((uint64_t)v61, v62);
      }
    }
  }
  else
  {
    int v28 = v22;
    _convertNSErrorToError(_:)(v22);

    swift_willThrow(v28, "dataWithPropertyList:format:options:error:", v29, v30, v31, v32);
  }
  return __stack_chk_guard;
}

uint64_t MLObjectDetector.AnnotationType.dictionary.getter()
{
  unint64_t v1 = 0xE800000000000000;
  uint64_t v2 = 0x7466656C5F706F74;
  int v13 = v0[2];
  uint64_t v3 = 0x7466656C5F706F74;
  if (v0[1])
  {
    uint64_t v3 = 0x6C5F6D6F74746F62;
    unint64_t v1 = 0xEB00000000746665;
  }
  BOOL v4 = *v0 == 0;
  uint64_t v5 = 0x6C65786970;
  if (!v4) {
    uint64_t v5 = 0x7A696C616D726F6ELL;
  }
  unint64_t v6 = 0xEA00000000006465;
  if (v4) {
    unint64_t v6 = 0xE500000000000000;
  }
  uint64_t v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, Any)>);
  uint64_t inited = swift_initStackObject(v7, v12);
  *(void *)(inited + 16) = 4;
  *(void *)(inited + 24) = 8;
  *(void *)(inited + 32) = 1684957547;
  *(void *)(inited + 40) = 0xE400000000000000;
  *(void *)(inited + 72) = &type metadata for String;
  strcpy((char *)(inited + 48), "bounding_box");
  *(unsigned char *)(inited + 61) = 0;
  *(_WORD *)(inited + 62) = -5120;
  *(void *)(inited + 80) = 0x7374696E75;
  *(void *)(inited + 88) = 0xE500000000000000;
  *(void *)(inited + 120) = &type metadata for String;
  *(void *)(inited + 96) = v5;
  *(void *)(inited + 104) = v6;
  *(void *)(inited + 128) = 0x6E696769726FLL;
  unint64_t v9 = 0xE600000000000000;
  *(void *)(inited + 136) = 0xE600000000000000;
  *(void *)(inited + 168) = &type metadata for String;
  *(void *)(inited + 144) = v3;
  *(void *)(inited + 152) = v1;
  *(void *)(inited + 176) = 0x726F68636E61;
  int v10 = v13;
  *(void *)(inited + 184) = 0xE600000000000000;
  if (v10)
  {
    if (v10 == 1)
    {
      unint64_t v9 = 0xE800000000000000;
    }
    else
    {
      uint64_t v2 = 0x6C5F6D6F74746F62;
      unint64_t v9 = 0xEB00000000746665;
    }
  }
  else
  {
    uint64_t v2 = 0x7265746E6563;
  }
  *(void *)(inited + 216) = &type metadata for String;
  *(void *)(inited + 192) = v2;
  *(void *)(inited + 200) = v9;
  return Dictionary.init(dictionaryLiteral:)(inited, &type metadata for String, (char *)&type metadata for Any + 8, &protocol witness table for String);
}

uint64_t MLObjectDetector.ModelParameters.ModelAlgorithmType.dictionary.getter()
{
  char v1 = *(unsigned char *)(v0 + 8);
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, Any)>);
  if (v1 == 1)
  {
    uint64_t inited = swift_initStackObject(v2, v6);
    *(void *)(inited + 16) = 1;
    *(void *)(inited + 24) = 2;
    *(void *)(inited + 32) = 0x687469726F676C61;
    *(void *)(inited + 40) = 0xE90000000000006DLL;
    *(void *)(inited + 72) = &type metadata for String;
    strcpy((char *)(inited + 48), "darknet-yolo");
    *(unsigned char *)(inited + 61) = 0;
    *(_WORD *)(inited + 62) = -5120;
  }
  else
  {
    uint64_t inited = swift_initStackObject(v2, v5);
    *(void *)(inited + 16) = 3;
    *(void *)(inited + 24) = 6;
    *(void *)(inited + 32) = 0x687469726F676C61;
    *(void *)(inited + 40) = 0xE90000000000006DLL;
    *(void *)(inited + 72) = &type metadata for String;
    *(void *)(inited + 48) = 0xD000000000000010;
    *(void *)(inited + 56) = "annotationColumnName" + 0x8000000000000000;
    *(void *)(inited + 80) = 0xD000000000000014;
    *(void *)(inited + 88) = "transferLearning" + 0x8000000000000000;
    *(void *)(inited + 120) = &type metadata for String;
    *(void *)(inited + 96) = 0x72507463656A626FLL;
    *(void *)(inited + 104) = 0xEB00000000746E69;
    *(void *)(inited + 128) = 0x6E6F697369766572;
    *(void *)(inited + 136) = 0xE800000000000000;
    *(void *)(inited + 168) = &type metadata for Int;
    *(void *)(inited + 144) = 1;
  }
  return Dictionary.init(dictionaryLiteral:)(inited, &type metadata for String, (char *)&type metadata for Any + 8, &protocol witness table for String);
}

uint64_t outlined destroy of MLObjectDetector.ModelParameters(uint64_t a1)
{
  uint64_t v1 = type metadata accessor for MLObjectDetector.ModelParameters(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v1 - 8) + 8))(a1, v1);
  return a1;
}

uint64_t outlined release of MLObjectDetector.PersistentParameters(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 16);
  uint64_t v2 = *(void *)(a1 + 40);
  uint64_t v3 = *(void *)(a1 + 56);
  int v4 = *(_DWORD *)(a1 + 24);
  outlined consume of Result<_DataTable, Error>(*(void *)a1, *(_DWORD *)(a1 + 8));
  outlined consume of MLDataTable?(v1, v4);
  swift_bridgeObjectRelease(v3);
  swift_bridgeObjectRelease(v2);
  return a1;
}

uint64_t outlined init with take of MLObjectDetector.ModelParameters.ValidationData(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = type metadata accessor for MLObjectDetector.ModelParameters.ValidationData(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v2 - 8) + 32))(a2, a1, v2);
  return a2;
}

uint64_t specialized handling<A, B>(_:_:)(uint64_t a1)
{
  return specialized handling<A, B>(_:_:)(a1, (uint64_t (*)(uint64_t, uint64_t *))&tc_v1_ft_flex_list);
}

{
  return specialized handling<A, B>(_:_:)(a1, (uint64_t (*)(uint64_t, uint64_t *))&tc_v1_ft_flex_dict);
}

{
  return specialized handling<A, B>(_:_:)(a1, (uint64_t (*)(uint64_t, uint64_t *))&tc_v1_ft_ndarray);
}

{
  return specialized handling<A, B>(_:_:)(a1, (uint64_t (*)(uint64_t, uint64_t *))&tc_v1_sframe_column_names);
}

{
  return specialized handling<A, B>(_:_:)(a1, (uint64_t (*)(uint64_t, uint64_t *))&tc_v1_ft_create_from_ndarray);
}

{
  return specialized handling<A, B>(_:_:)(a1, (uint64_t (*)(uint64_t, uint64_t *))&tc_v1_ft_create_from_flex_dict);
}

{
  return specialized handling<A, B>(_:_:)(a1, (uint64_t (*)(uint64_t, uint64_t *))&tc_v1_ft_create_from_flex_list);
}

{
  return specialized handling<A, B>(_:_:)(a1, (uint64_t (*)(uint64_t, uint64_t *))&tc_v1_sarray_create_from_list);
}

{
  return specialized handling<A, B>(_:_:)(a1, (uint64_t (*)(uint64_t, uint64_t *))&tc_v1_sarray_unique);
}

{
  return specialized handling<A, B>(_:_:)(a1, (uint64_t (*)(uint64_t, uint64_t *))&tc_v1_sframe_text_summary);
}

{
  return specialized handling<A, B>(_:_:)(a1, (uint64_t (*)(uint64_t, uint64_t *))&tc_v1_variant_flexible_type);
}

{
  return specialized handling<A, B>(_:_:)(a1, (uint64_t (*)(uint64_t, uint64_t *))&tc_v1_variant_sframe);
}

{
  return specialized handling<A, B>(_:_:)(a1, (uint64_t (*)(uint64_t, uint64_t *))&tc_v1_variant_sarray);
}

{
  return specialized handling<A, B>(_:_:)(a1, (uint64_t (*)(uint64_t, uint64_t *))&tc_v1_variant_model);
}

{
  return specialized handling<A, B>(_:_:)(a1, (uint64_t (*)(uint64_t, uint64_t *))&tc_v1_variant_parameters);
}

{
  return specialized handling<A, B>(_:_:)(a1, (uint64_t (*)(uint64_t, uint64_t *))&tc_v1_sarray_drop_na);
}

{
  return specialized handling<A, B>(_:_:)(a1, (uint64_t (*)(uint64_t, uint64_t *))&tc_v1_sarray_sum);
}

{
  return specialized handling<A, B>(_:_:)(a1, (uint64_t (*)(uint64_t, uint64_t *))&tc_v1_sarray_min);
}

{
  return specialized handling<A, B>(_:_:)(a1, (uint64_t (*)(uint64_t, uint64_t *))&tc_v1_sarray_max);
}

{
  return specialized handling<A, B>(_:_:)(a1, (uint64_t (*)(uint64_t, uint64_t *))&tc_v1_sarray_mean);
}

{
  return specialized handling<A, B>(_:_:)(a1, (uint64_t (*)(uint64_t, uint64_t *))&tc_v1_sarray_std);
}

{
  return specialized handling<A, B>(_:_:)(a1, (uint64_t (*)(uint64_t, uint64_t *))&tc_v1_sarray_create_copy);
}

{
  return specialized handling<A, B>(_:_:)(a1, (uint64_t (*)(uint64_t, uint64_t *))&tc_v1_sframe_unique);
}

{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  void *v45;
  uint64_t v46;
  void *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  unsigned __int8 v65;
  long long v66;
  long long v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;

  char v70 = 0;
  uint64_t v1 = tc_v1_ft_create_from_int64(a1, &v70);
  uint64_t v2 = v70;
  if (v70)
  {
    uint64_t v3 = tc_v1_error_message(v70);
    if (!v3) {
      BUG();
    }
    uint64_t v52 = v2;
    uint64_t v51 = v1;
    char v68 = String.init(cString:)(v3);
    uint64_t v53 = v4;
    uint64_t v69 = v4;
    if (one-time initialization token for table != -1) {
      swift_once(&one-time initialization token for table, one-time initialization function for table);
    }
    char v67 = static ErrorString.table;
    unint64_t v66 = xmmword_3ABE40;
    uint64_t v5 = lazy protocol witness table accessor for type String and conformance String();
    unint64_t v6 = StringProtocol.replacingOccurrences<A, B>(of:with:options:range:)(&v67, &v66, 1, 0, 0, 1, &type metadata for String, &type metadata for String, &type metadata for String, v5, v5, v5);
    char v8 = v7;
    swift_bridgeObjectRelease(v53);
    char v68 = v6;
    unint64_t v54 = v8;
    uint64_t v69 = v8;
    if (one-time initialization token for column != -1) {
      swift_once(&one-time initialization token for column, one-time initialization function for column);
    }
    char v67 = static ErrorString.column;
    unint64_t v66 = xmmword_3ABE60;
    unint64_t v9 = StringProtocol.replacingOccurrences<A, B>(of:with:options:range:)(&v67, &v66, 1, 0, 0, 1, &type metadata for String, &type metadata for String, &type metadata for String, v5, v5, v5);
    uint64_t v11 = v10;
    swift_bridgeObjectRelease(v54);
    char v68 = v9;
    uint64_t v55 = v11;
    uint64_t v69 = v11;
    if (one-time initialization token for tableMap != -1) {
      swift_once(&one-time initialization token for tableMap, one-time initialization function for tableMap);
    }
    char v67 = static ErrorString.tableMap;
    unint64_t v66 = xmmword_3ABE80;
    uint64_t v12 = StringProtocol.replacingOccurrences<A, B>(of:with:options:range:)(&v67, &v66, 1, 0, 0, 1, &type metadata for String, &type metadata for String, &type metadata for String, v5, v5, v5);
    uint64_t v14 = v13;
    swift_bridgeObjectRelease(v55);
    char v68 = v12;
    __int16 v56 = v14;
    uint64_t v69 = v14;
    if (one-time initialization token for columnMap != -1) {
      swift_once(&one-time initialization token for columnMap, one-time initialization function for columnMap);
    }
    char v67 = static ErrorString.columnMap;
    unint64_t v66 = xmmword_3ABEA0;
    uint64_t v15 = StringProtocol.replacingOccurrences<A, B>(of:with:options:range:)(&v67, &v66, 1, 0, 0, 1, &type metadata for String, &type metadata for String, &type metadata for String, v5, v5, v5);
    uint64_t v17 = v16;
    swift_bridgeObjectRelease(v56);
    char v68 = v15;
    char v57 = v17;
    uint64_t v69 = v17;
    if (one-time initialization token for drop != -1) {
      swift_once(&one-time initialization token for drop, one-time initialization function for drop);
    }
    char v67 = static ErrorString.drop;
    unint64_t v66 = xmmword_3ABEC0;
    char v18 = StringProtocol.replacingOccurrences<A, B>(of:with:options:range:)(&v67, &v66, 1, 0, 0, 1, &type metadata for String, &type metadata for String, &type metadata for String, v5, v5, v5);
    id v20 = v19;
    swift_bridgeObjectRelease(v57);
    char v68 = v18;
    char v58 = v20;
    uint64_t v69 = v20;
    if (one-time initialization token for sequence != -1) {
      swift_once(&one-time initialization token for sequence, one-time initialization function for sequence);
    }
    char v67 = static ErrorString.sequence;
    unint64_t v66 = xmmword_3ABEE0;
    id v21 = StringProtocol.replacingOccurrences<A, B>(of:with:options:range:)(&v67, &v66, 1, 0, 0, 1, &type metadata for String, &type metadata for String, &type metadata for String, v5, v5, v5);
    uint64_t v23 = v22;
    swift_bridgeObjectRelease(v58);
    char v68 = v21;
    uint64_t v69 = v23;
    if (one-time initialization token for double != -1) {
      swift_once(&one-time initialization token for double, one-time initialization function for double);
    }
    char v67 = static ErrorString.double;
    unint64_t v66 = xmmword_3ABF00;
    unint64_t v24 = StringProtocol.replacingOccurrences<A, B>(of:with:options:range:)(&v67, &v66, 1, 0, 0, 1, &type metadata for String, &type metadata for String, &type metadata for String, v5, v5, v5);
    unint64_t v26 = v25;
    swift_bridgeObjectRelease(v23);
    char v68 = v24;
    char v59 = v26;
    uint64_t v69 = v26;
    if (one-time initialization token for integer != -1) {
      swift_once(&one-time initialization token for integer, one-time initialization function for integer);
    }
    char v67 = static ErrorString.integer;
    unint64_t v66 = xmmword_3ABF20;
    uint64_t v27 = StringProtocol.replacingOccurrences<A, B>(of:with:options:range:)(&v67, &v66, 1, 0, 0, 1, &type metadata for String, &type metadata for String, &type metadata for String, v5, v5, v5);
    uint64_t v29 = v28;
    swift_bridgeObjectRelease(v59);
    char v68 = v27;
    uint64_t v60 = v29;
    uint64_t v69 = v29;
    if (one-time initialization token for error != -1) {
      swift_once(&one-time initialization token for error, one-time initialization function for error);
    }
    char v67 = static ErrorString.error;
    unint64_t v66 = xmmword_3ABF40;
    uint64_t v30 = StringProtocol.replacingOccurrences<A, B>(of:with:options:range:)(&v67, &v66, 0, 0, 0, 1, &type metadata for String, &type metadata for String, &type metadata for String, v5, v5, v5);
    uint64_t v32 = v31;
    swift_bridgeObjectRelease(v60);
    char v68 = v30;
    id v61 = v32;
    uint64_t v69 = v32;
    if (one-time initialization token for archive != -1) {
      swift_once(&one-time initialization token for archive, one-time initialization function for archive);
    }
    char v67 = static ErrorString.archive;
    unint64_t v66 = xmmword_3ABF60;
    uint64_t v33 = StringProtocol.replacingOccurrences<A, B>(of:with:options:range:)(&v67, &v66, 0, 0, 0, 1, &type metadata for String, &type metadata for String, &type metadata for String, v5, v5, v5);
    uint64_t v35 = v34;
    swift_bridgeObjectRelease(v61);
    char v68 = v33;
    int v62 = v35;
    uint64_t v69 = v35;
    if (one-time initialization token for limit != -1) {
      swift_once(&one-time initialization token for limit, one-time initialization function for limit);
    }
    char v67 = static ErrorString.limit;
    unint64_t v66 = xmmword_3ABF80;
    uint64_t v36 = StringProtocol.replacingOccurrences<A, B>(of:with:options:range:)(&v67, &v66, 0, 0, 0, 1, &type metadata for String, &type metadata for String, &type metadata for String, v5, v5, v5);
    uint64_t v38 = v37;
    swift_bridgeObjectRelease(v62);
    char v68 = v36;
    uint64_t v63 = v38;
    uint64_t v69 = v38;
    if (one-time initialization token for supportedStackTypes != -1) {
      swift_once(&one-time initialization token for supportedStackTypes, one-time initialization function for supportedStackTypes);
    }
    char v67 = static ErrorString.supportedStackTypes;
    unint64_t v66 = xmmword_3ABFA0;
    uint64_t v39 = StringProtocol.replacingOccurrences<A, B>(of:with:options:range:)(&v67, &v66, 0, 0, 0, 1, &type metadata for String, &type metadata for String, &type metadata for String, v5, v5, v5);
    uint64_t v41 = v40;
    swift_bridgeObjectRelease(v63);
    char v68 = v39;
    unsigned int v64 = v41;
    uint64_t v69 = v41;
    if (one-time initialization token for sortTypes != -1) {
      swift_once(&one-time initialization token for sortTypes, one-time initialization function for sortTypes);
    }
    char v67 = static ErrorString.sortTypes;
    unint64_t v66 = xmmword_3ABFC0;
    uint64_t v42 = StringProtocol.replacingOccurrences<A, B>(of:with:options:range:)(&v67, &v66, 0, 0, 0, 1, &type metadata for String, &type metadata for String, &type metadata for String, v5, v5, v5);
    uint64_t v44 = v43;
    swift_bridgeObjectRelease(v64);
    type metadata accessor for OS_os_log();
    swift_bridgeObjectRetain(v44);
    uint64_t v45 = (void *)static OS_os_log.default.getter();
    char v65 = static os_log_type_t.error.getter();
    uint64_t v46 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<CVarArg>);
    uint64_t v47 = (void *)swift_allocObject(v46, 72, 7);
    v47[2] = 1;
    v47[3] = 2;
    v47[7] = &type metadata for String;
    v47[8] = lazy protocol witness table accessor for type String and conformance String();
    v47[4] = v42;
    v47[5] = v44;
    os_log(_:dso:log:type:_:)("%@ \n", 4, 2, &dword_0, v45, v65, v47);

    swift_bridgeObjectRelease(v47);
    uint64_t v48 = lazy protocol witness table accessor for type MLCreateError and conformance MLCreateError();
    swift_allocError(&type metadata for MLCreateError, v48, 0, 0);
    *(void *)uint64_t v49 = v42;
    *(void *)(v49 + 8) = v44;
    *(_OWORD *)(v49 + 16) = 0;
    *(_OWORD *)(v49 + 32) = 0;
    *(unsigned char *)(v49 + 48) = 0;
    swift_willThrow();
    tc_v1_release(v52);
    return v51;
  }
  return v1;
}

{
  return specialized handling<A, B>(_:_:)(a1, (uint64_t (*)(uint64_t, uint64_t *))&tc_v1_ft_create_from_cstring);
}

{
  return specialized handling<A, B>(_:_:)(a1, (uint64_t (*)(uint64_t, uint64_t *))&tc_v1_sframe_read_json);
}

{
  return specialized handling<A, B>(_:_:)(a1, (uint64_t (*)(uint64_t, uint64_t *))&tc_v1_sframe_load);
}

{
  return specialized handling<A, B>(_:_:)(a1, (uint64_t (*)(uint64_t, uint64_t *))&tc_v1_model_new);
}

{
  return specialized handling<A, B>(_:_:)(a1, (uint64_t (*)(uint64_t, uint64_t *))&tc_v1_model_load);
}

{
  return specialized handling<A, B>(_:_:)(a1, (uint64_t (*)(uint64_t, uint64_t *))&tc_v1_ft_string_data);
}

{
  return specialized handling<A, B>(_:_:)(a1, (uint64_t (*)(uint64_t, uint64_t *))&tc_v1_model_name);
}

{
  return specialized handling<A, B>(_:_:)(a1, (uint64_t (*)(uint64_t, uint64_t *))&tc_v1_ndarray_strides);
}

{
  return specialized handling<A, B>(_:_:)(a1, (uint64_t (*)(uint64_t, uint64_t *))&tc_v1_ndarray_shape);
}

{
  return specialized handling<A, B>(_:_:)(a1, (uint64_t (*)(uint64_t, uint64_t *))&tc_v1_sframe_num_rows);
}

{
  return specialized handling<A, B>(_:_:)(a1, (uint64_t (*)(uint64_t, uint64_t *))&tc_v1_sframe_num_columns);
}

{
  return specialized handling<A, B>(_:_:)(a1, (uint64_t (*)(uint64_t, uint64_t *))&tc_v1_ndarray_num_dimensions);
}

{
  return specialized handling<A, B>(_:_:)(a1, (uint64_t (*)(uint64_t, uint64_t *))&tc_v1_ndarray_data);
}

{
  return specialized handling<A, B>(_:_:)(a1, (uint64_t (*)(uint64_t, uint64_t *))&tc_v1_ft_int64);
}

uint64_t specialized handling<A, B>(_:_:)()
{
  uint64_t v69 = 0;
  uint64_t v0 = tc_v1_ft_create_from_double(&v69);
  uint64_t v1 = v69;
  if (v69)
  {
    uint64_t v2 = tc_v1_error_message(v69);
    if (!v2) {
      BUG();
    }
    uint64_t v51 = v1;
    uint64_t v50 = v0;
    uint64_t v67 = String.init(cString:)(v2);
    uint64_t v52 = v3;
    uint64_t v68 = v3;
    if (one-time initialization token for table != -1) {
      swift_once(&one-time initialization token for table, one-time initialization function for table);
    }
    long long v66 = static ErrorString.table;
    long long v65 = xmmword_3ABE40;
    uint64_t v4 = lazy protocol witness table accessor for type String and conformance String();
    uint64_t v5 = StringProtocol.replacingOccurrences<A, B>(of:with:options:range:)(&v66, &v65, 1, 0, 0, 1, &type metadata for String, &type metadata for String, &type metadata for String, v4, v4, v4);
    uint64_t v7 = v6;
    swift_bridgeObjectRelease(v52);
    uint64_t v67 = v5;
    uint64_t v53 = v7;
    uint64_t v68 = v7;
    if (one-time initialization token for column != -1) {
      swift_once(&one-time initialization token for column, one-time initialization function for column);
    }
    long long v66 = static ErrorString.column;
    long long v65 = xmmword_3ABE60;
    uint64_t v8 = StringProtocol.replacingOccurrences<A, B>(of:with:options:range:)(&v66, &v65, 1, 0, 0, 1, &type metadata for String, &type metadata for String, &type metadata for String, v4, v4, v4);
    uint64_t v10 = v9;
    swift_bridgeObjectRelease(v53);
    uint64_t v67 = v8;
    uint64_t v54 = v10;
    uint64_t v68 = v10;
    if (one-time initialization token for tableMap != -1) {
      swift_once(&one-time initialization token for tableMap, one-time initialization function for tableMap);
    }
    long long v66 = static ErrorString.tableMap;
    long long v65 = xmmword_3ABE80;
    uint64_t v11 = StringProtocol.replacingOccurrences<A, B>(of:with:options:range:)(&v66, &v65, 1, 0, 0, 1, &type metadata for String, &type metadata for String, &type metadata for String, v4, v4, v4);
    uint64_t v13 = v12;
    swift_bridgeObjectRelease(v54);
    uint64_t v67 = v11;
    uint64_t v55 = v13;
    uint64_t v68 = v13;
    if (one-time initialization token for columnMap != -1) {
      swift_once(&one-time initialization token for columnMap, one-time initialization function for columnMap);
    }
    long long v66 = static ErrorString.columnMap;
    long long v65 = xmmword_3ABEA0;
    uint64_t v14 = StringProtocol.replacingOccurrences<A, B>(of:with:options:range:)(&v66, &v65, 1, 0, 0, 1, &type metadata for String, &type metadata for String, &type metadata for String, v4, v4, v4);
    uint64_t v16 = v15;
    swift_bridgeObjectRelease(v55);
    uint64_t v67 = v14;
    uint64_t v56 = v16;
    uint64_t v68 = v16;
    if (one-time initialization token for drop != -1) {
      swift_once(&one-time initialization token for drop, one-time initialization function for drop);
    }
    long long v66 = static ErrorString.drop;
    long long v65 = xmmword_3ABEC0;
    uint64_t v17 = StringProtocol.replacingOccurrences<A, B>(of:with:options:range:)(&v66, &v65, 1, 0, 0, 1, &type metadata for String, &type metadata for String, &type metadata for String, v4, v4, v4);
    uint64_t v19 = v18;
    swift_bridgeObjectRelease(v56);
    uint64_t v67 = v17;
    uint64_t v57 = v19;
    uint64_t v68 = v19;
    if (one-time initialization token for sequence != -1) {
      swift_once(&one-time initialization token for sequence, one-time initialization function for sequence);
    }
    long long v66 = static ErrorString.sequence;
    long long v65 = xmmword_3ABEE0;
    uint64_t v20 = StringProtocol.replacingOccurrences<A, B>(of:with:options:range:)(&v66, &v65, 1, 0, 0, 1, &type metadata for String, &type metadata for String, &type metadata for String, v4, v4, v4);
    uint64_t v22 = v21;
    swift_bridgeObjectRelease(v57);
    uint64_t v67 = v20;
    uint64_t v68 = v22;
    if (one-time initialization token for double != -1) {
      swift_once(&one-time initialization token for double, one-time initialization function for double);
    }
    long long v66 = static ErrorString.double;
    long long v65 = xmmword_3ABF00;
    uint64_t v23 = StringProtocol.replacingOccurrences<A, B>(of:with:options:range:)(&v66, &v65, 1, 0, 0, 1, &type metadata for String, &type metadata for String, &type metadata for String, v4, v4, v4);
    uint64_t v25 = v24;
    swift_bridgeObjectRelease(v22);
    uint64_t v67 = v23;
    uint64_t v58 = v25;
    uint64_t v68 = v25;
    if (one-time initialization token for integer != -1) {
      swift_once(&one-time initialization token for integer, one-time initialization function for integer);
    }
    long long v66 = static ErrorString.integer;
    long long v65 = xmmword_3ABF20;
    uint64_t v26 = StringProtocol.replacingOccurrences<A, B>(of:with:options:range:)(&v66, &v65, 1, 0, 0, 1, &type metadata for String, &type metadata for String, &type metadata for String, v4, v4, v4);
    uint64_t v28 = v27;
    swift_bridgeObjectRelease(v58);
    uint64_t v67 = v26;
    uint64_t v59 = v28;
    uint64_t v68 = v28;
    if (one-time initialization token for error != -1) {
      swift_once(&one-time initialization token for error, one-time initialization function for error);
    }
    long long v66 = static ErrorString.error;
    long long v65 = xmmword_3ABF40;
    uint64_t v29 = StringProtocol.replacingOccurrences<A, B>(of:with:options:range:)(&v66, &v65, 0, 0, 0, 1, &type metadata for String, &type metadata for String, &type metadata for String, v4, v4, v4);
    uint64_t v31 = v30;
    swift_bridgeObjectRelease(v59);
    uint64_t v67 = v29;
    uint64_t v60 = v31;
    uint64_t v68 = v31;
    if (one-time initialization token for archive != -1) {
      swift_once(&one-time initialization token for archive, one-time initialization function for archive);
    }
    long long v66 = static ErrorString.archive;
    long long v65 = xmmword_3ABF60;
    uint64_t v32 = StringProtocol.replacingOccurrences<A, B>(of:with:options:range:)(&v66, &v65, 0, 0, 0, 1, &type metadata for String, &type metadata for String, &type metadata for String, v4, v4, v4);
    uint64_t v34 = v33;
    swift_bridgeObjectRelease(v60);
    uint64_t v67 = v32;
    uint64_t v61 = v34;
    uint64_t v68 = v34;
    if (one-time initialization token for limit != -1) {
      swift_once(&one-time initialization token for limit, one-time initialization function for limit);
    }
    long long v66 = static ErrorString.limit;
    long long v65 = xmmword_3ABF80;
    uint64_t v35 = StringProtocol.replacingOccurrences<A, B>(of:with:options:range:)(&v66, &v65, 0, 0, 0, 1, &type metadata for String, &type metadata for String, &type metadata for String, v4, v4, v4);
    uint64_t v37 = v36;
    swift_bridgeObjectRelease(v61);
    uint64_t v67 = v35;
    uint64_t v62 = v37;
    uint64_t v68 = v37;
    if (one-time initialization token for supportedStackTypes != -1) {
      swift_once(&one-time initialization token for supportedStackTypes, one-time initialization function for supportedStackTypes);
    }
    long long v66 = static ErrorString.supportedStackTypes;
    long long v65 = xmmword_3ABFA0;
    uint64_t v38 = StringProtocol.replacingOccurrences<A, B>(of:with:options:range:)(&v66, &v65, 0, 0, 0, 1, &type metadata for String, &type metadata for String, &type metadata for String, v4, v4, v4);
    uint64_t v40 = v39;
    swift_bridgeObjectRelease(v62);
    uint64_t v67 = v38;
    uint64_t v63 = v40;
    uint64_t v68 = v40;
    if (one-time initialization token for sortTypes != -1) {
      swift_once(&one-time initialization token for sortTypes, one-time initialization function for sortTypes);
    }
    long long v66 = static ErrorString.sortTypes;
    long long v65 = xmmword_3ABFC0;
    uint64_t v41 = StringProtocol.replacingOccurrences<A, B>(of:with:options:range:)(&v66, &v65, 0, 0, 0, 1, &type metadata for String, &type metadata for String, &type metadata for String, v4, v4, v4);
    uint64_t v43 = v42;
    swift_bridgeObjectRelease(v63);
    type metadata accessor for OS_os_log();
    swift_bridgeObjectRetain(v43);
    uint64_t v44 = (void *)static OS_os_log.default.getter();
    unsigned __int8 v64 = static os_log_type_t.error.getter();
    uint64_t v45 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<CVarArg>);
    uint64_t v46 = (void *)swift_allocObject(v45, 72, 7);
    v46[2] = 1;
    v46[3] = 2;
    v46[7] = &type metadata for String;
    v46[8] = lazy protocol witness table accessor for type String and conformance String();
    v46[4] = v41;
    _OWORD v46[5] = v43;
    os_log(_:dso:log:type:_:)("%@ \n", 4, 2, &dword_0, v44, v64, v46);

    swift_bridgeObjectRelease(v46);
    uint64_t v47 = lazy protocol witness table accessor for type MLCreateError and conformance MLCreateError();
    swift_allocError(&type metadata for MLCreateError, v47, 0, 0);
    *(void *)uint64_t v48 = v41;
    *(void *)(v48 + 8) = v43;
    *(_OWORD *)(v48 + 16) = 0;
    *(_OWORD *)(v48 + 32) = 0;
    *(unsigned char *)(v48 + 48) = 0;
    swift_willThrow();
    tc_v1_release(v51);
    return v50;
  }
  return v0;
}

uint64_t specialized handling<A, B>(_:_:)(uint64_t a1, uint64_t (*a2)(uint64_t, uint64_t *))
{
  uint64_t v71 = 0;
  uint64_t v2 = a2(a1, &v71);
  uint64_t v3 = v71;
  if (v71)
  {
    uint64_t v4 = tc_v1_error_message(v71);
    if (!v4) {
      BUG();
    }
    uint64_t v53 = v3;
    uint64_t v52 = v2;
    uint64_t v69 = String.init(cString:)(v4);
    uint64_t v54 = v5;
    uint64_t v70 = v5;
    if (one-time initialization token for table != -1) {
      swift_once(&one-time initialization token for table, one-time initialization function for table);
    }
    long long v68 = static ErrorString.table;
    long long v67 = xmmword_3ABE40;
    uint64_t v6 = lazy protocol witness table accessor for type String and conformance String();
    uint64_t v7 = StringProtocol.replacingOccurrences<A, B>(of:with:options:range:)(&v68, &v67, 1, 0, 0, 1, &type metadata for String, &type metadata for String, &type metadata for String, v6, v6, v6);
    uint64_t v9 = v8;
    swift_bridgeObjectRelease(v54);
    uint64_t v69 = v7;
    uint64_t v55 = v9;
    uint64_t v70 = v9;
    if (one-time initialization token for column != -1) {
      swift_once(&one-time initialization token for column, one-time initialization function for column);
    }
    long long v68 = static ErrorString.column;
    long long v67 = xmmword_3ABE60;
    uint64_t v10 = StringProtocol.replacingOccurrences<A, B>(of:with:options:range:)(&v68, &v67, 1, 0, 0, 1, &type metadata for String, &type metadata for String, &type metadata for String, v6, v6, v6);
    uint64_t v12 = v11;
    swift_bridgeObjectRelease(v55);
    uint64_t v69 = v10;
    uint64_t v56 = v12;
    uint64_t v70 = v12;
    if (one-time initialization token for tableMap != -1) {
      swift_once(&one-time initialization token for tableMap, one-time initialization function for tableMap);
    }
    long long v68 = static ErrorString.tableMap;
    long long v67 = xmmword_3ABE80;
    uint64_t v13 = StringProtocol.replacingOccurrences<A, B>(of:with:options:range:)(&v68, &v67, 1, 0, 0, 1, &type metadata for String, &type metadata for String, &type metadata for String, v6, v6, v6);
    uint64_t v15 = v14;
    swift_bridgeObjectRelease(v56);
    uint64_t v69 = v13;
    uint64_t v57 = v15;
    uint64_t v70 = v15;
    if (one-time initialization token for columnMap != -1) {
      swift_once(&one-time initialization token for columnMap, one-time initialization function for columnMap);
    }
    long long v68 = static ErrorString.columnMap;
    long long v67 = xmmword_3ABEA0;
    uint64_t v16 = StringProtocol.replacingOccurrences<A, B>(of:with:options:range:)(&v68, &v67, 1, 0, 0, 1, &type metadata for String, &type metadata for String, &type metadata for String, v6, v6, v6);
    uint64_t v18 = v17;
    swift_bridgeObjectRelease(v57);
    uint64_t v69 = v16;
    uint64_t v58 = v18;
    uint64_t v70 = v18;
    if (one-time initialization token for drop != -1) {
      swift_once(&one-time initialization token for drop, one-time initialization function for drop);
    }
    long long v68 = static ErrorString.drop;
    long long v67 = xmmword_3ABEC0;
    uint64_t v19 = StringProtocol.replacingOccurrences<A, B>(of:with:options:range:)(&v68, &v67, 1, 0, 0, 1, &type metadata for String, &type metadata for String, &type metadata for String, v6, v6, v6);
    uint64_t v21 = v20;
    swift_bridgeObjectRelease(v58);
    uint64_t v69 = v19;
    uint64_t v59 = v21;
    uint64_t v70 = v21;
    if (one-time initialization token for sequence != -1) {
      swift_once(&one-time initialization token for sequence, one-time initialization function for sequence);
    }
    long long v68 = static ErrorString.sequence;
    long long v67 = xmmword_3ABEE0;
    uint64_t v22 = StringProtocol.replacingOccurrences<A, B>(of:with:options:range:)(&v68, &v67, 1, 0, 0, 1, &type metadata for String, &type metadata for String, &type metadata for String, v6, v6, v6);
    uint64_t v24 = v23;
    swift_bridgeObjectRelease(v59);
    uint64_t v69 = v22;
    uint64_t v70 = v24;
    if (one-time initialization token for double != -1) {
      swift_once(&one-time initialization token for double, one-time initialization function for double);
    }
    long long v68 = static ErrorString.double;
    long long v67 = xmmword_3ABF00;
    uint64_t v25 = StringProtocol.replacingOccurrences<A, B>(of:with:options:range:)(&v68, &v67, 1, 0, 0, 1, &type metadata for String, &type metadata for String, &type metadata for String, v6, v6, v6);
    uint64_t v27 = v26;
    swift_bridgeObjectRelease(v24);
    uint64_t v69 = v25;
    uint64_t v60 = v27;
    uint64_t v70 = v27;
    if (one-time initialization token for integer != -1) {
      swift_once(&one-time initialization token for integer, one-time initialization function for integer);
    }
    long long v68 = static ErrorString.integer;
    long long v67 = xmmword_3ABF20;
    uint64_t v28 = StringProtocol.replacingOccurrences<A, B>(of:with:options:range:)(&v68, &v67, 1, 0, 0, 1, &type metadata for String, &type metadata for String, &type metadata for String, v6, v6, v6);
    uint64_t v30 = v29;
    swift_bridgeObjectRelease(v60);
    uint64_t v69 = v28;
    uint64_t v61 = v30;
    uint64_t v70 = v30;
    if (one-time initialization token for error != -1) {
      swift_once(&one-time initialization token for error, one-time initialization function for error);
    }
    long long v68 = static ErrorString.error;
    long long v67 = xmmword_3ABF40;
    uint64_t v31 = StringProtocol.replacingOccurrences<A, B>(of:with:options:range:)(&v68, &v67, 0, 0, 0, 1, &type metadata for String, &type metadata for String, &type metadata for String, v6, v6, v6);
    uint64_t v33 = v32;
    swift_bridgeObjectRelease(v61);
    uint64_t v69 = v31;
    uint64_t v62 = v33;
    uint64_t v70 = v33;
    if (one-time initialization token for archive != -1) {
      swift_once(&one-time initialization token for archive, one-time initialization function for archive);
    }
    long long v68 = static ErrorString.archive;
    long long v67 = xmmword_3ABF60;
    uint64_t v34 = StringProtocol.replacingOccurrences<A, B>(of:with:options:range:)(&v68, &v67, 0, 0, 0, 1, &type metadata for String, &type metadata for String, &type metadata for String, v6, v6, v6);
    uint64_t v36 = v35;
    swift_bridgeObjectRelease(v62);
    uint64_t v69 = v34;
    uint64_t v63 = v36;
    uint64_t v70 = v36;
    if (one-time initialization token for limit != -1) {
      swift_once(&one-time initialization token for limit, one-time initialization function for limit);
    }
    long long v68 = static ErrorString.limit;
    long long v67 = xmmword_3ABF80;
    uint64_t v37 = StringProtocol.replacingOccurrences<A, B>(of:with:options:range:)(&v68, &v67, 0, 0, 0, 1, &type metadata for String, &type metadata for String, &type metadata for String, v6, v6, v6);
    uint64_t v39 = v38;
    swift_bridgeObjectRelease(v63);
    uint64_t v69 = v37;
    uint64_t v64 = v39;
    uint64_t v70 = v39;
    if (one-time initialization token for supportedStackTypes != -1) {
      swift_once(&one-time initialization token for supportedStackTypes, one-time initialization function for supportedStackTypes);
    }
    long long v68 = static ErrorString.supportedStackTypes;
    long long v67 = xmmword_3ABFA0;
    uint64_t v40 = StringProtocol.replacingOccurrences<A, B>(of:with:options:range:)(&v68, &v67, 0, 0, 0, 1, &type metadata for String, &type metadata for String, &type metadata for String, v6, v6, v6);
    uint64_t v42 = v41;
    swift_bridgeObjectRelease(v64);
    uint64_t v69 = v40;
    uint64_t v65 = v42;
    uint64_t v70 = v42;
    if (one-time initialization token for sortTypes != -1) {
      swift_once(&one-time initialization token for sortTypes, one-time initialization function for sortTypes);
    }
    long long v68 = static ErrorString.sortTypes;
    long long v67 = xmmword_3ABFC0;
    uint64_t v43 = StringProtocol.replacingOccurrences<A, B>(of:with:options:range:)(&v68, &v67, 0, 0, 0, 1, &type metadata for String, &type metadata for String, &type metadata for String, v6, v6, v6);
    uint64_t v45 = v44;
    swift_bridgeObjectRelease(v65);
    type metadata accessor for OS_os_log();
    swift_bridgeObjectRetain(v45);
    uint64_t v46 = (void *)static OS_os_log.default.getter();
    unsigned __int8 v66 = static os_log_type_t.error.getter();
    uint64_t v47 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<CVarArg>);
    uint64_t v48 = (void *)swift_allocObject(v47, 72, 7);
    v48[2] = 1;
    v48[3] = 2;
    v48[7] = &type metadata for String;
    v48[8] = lazy protocol witness table accessor for type String and conformance String();
    v48[4] = v43;
    v48[5] = v45;
    os_log(_:dso:log:type:_:)("%@ \n", 4, 2, &dword_0, v46, v66, v48);

    swift_bridgeObjectRelease(v48);
    uint64_t v49 = lazy protocol witness table accessor for type MLCreateError and conformance MLCreateError();
    swift_allocError(&type metadata for MLCreateError, v49, 0, 0);
    *(void *)uint64_t v50 = v43;
    *(void *)(v50 + 8) = v45;
    *(_OWORD *)(v50 + 16) = 0;
    *(_OWORD *)(v50 + 32) = 0;
    *(unsigned char *)(v50 + 48) = 0;
    swift_willThrow();
    tc_v1_release(v53);
    return v52;
  }
  return v2;
}

{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  void *v46;
  uint64_t v47;
  void *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  unsigned __int8 v66;
  long long v67;
  long long v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;

  uint64_t v71 = 0;
  uint64_t v2 = a2(a1, &v71);
  uint64_t v3 = v71;
  if (v71)
  {
    uint64_t v4 = tc_v1_error_message(v71);
    if (!v4) {
      BUG();
    }
    uint64_t v53 = v3;
    uint64_t v52 = v2;
    uint64_t v69 = String.init(cString:)(v4);
    uint64_t v54 = v5;
    uint64_t v70 = v5;
    if (one-time initialization token for table != -1) {
      swift_once(&one-time initialization token for table, one-time initialization function for table);
    }
    long long v68 = static ErrorString.table;
    long long v67 = xmmword_3ABE40;
    uint64_t v6 = lazy protocol witness table accessor for type String and conformance String();
    uint64_t v7 = StringProtocol.replacingOccurrences<A, B>(of:with:options:range:)(&v68, &v67, 1, 0, 0, 1, &type metadata for String, &type metadata for String, &type metadata for String, v6, v6, v6);
    uint64_t v9 = v8;
    swift_bridgeObjectRelease(v54);
    uint64_t v69 = v7;
    uint64_t v55 = v9;
    uint64_t v70 = v9;
    if (one-time initialization token for column != -1) {
      swift_once(&one-time initialization token for column, one-time initialization function for column);
    }
    long long v68 = static ErrorString.column;
    long long v67 = xmmword_3ABE60;
    uint64_t v10 = StringProtocol.replacingOccurrences<A, B>(of:with:options:range:)(&v68, &v67, 1, 0, 0, 1, &type metadata for String, &type metadata for String, &type metadata for String, v6, v6, v6);
    uint64_t v12 = v11;
    swift_bridgeObjectRelease(v55);
    uint64_t v69 = v10;
    uint64_t v56 = v12;
    uint64_t v70 = v12;
    if (one-time initialization token for tableMap != -1) {
      swift_once(&one-time initialization token for tableMap, one-time initialization function for tableMap);
    }
    long long v68 = static ErrorString.tableMap;
    long long v67 = xmmword_3ABE80;
    uint64_t v13 = StringProtocol.replacingOccurrences<A, B>(of:with:options:range:)(&v68, &v67, 1, 0, 0, 1, &type metadata for String, &type metadata for String, &type metadata for String, v6, v6, v6);
    uint64_t v15 = v14;
    swift_bridgeObjectRelease(v56);
    uint64_t v69 = v13;
    uint64_t v57 = v15;
    uint64_t v70 = v15;
    if (one-time initialization token for columnMap != -1) {
      swift_once(&one-time initialization token for columnMap, one-time initialization function for columnMap);
    }
    long long v68 = static ErrorString.columnMap;
    long long v67 = xmmword_3ABEA0;
    uint64_t v16 = StringProtocol.replacingOccurrences<A, B>(of:with:options:range:)(&v68, &v67, 1, 0, 0, 1, &type metadata for String, &type metadata for String, &type metadata for String, v6, v6, v6);
    uint64_t v18 = v17;
    swift_bridgeObjectRelease(v57);
    uint64_t v69 = v16;
    uint64_t v58 = v18;
    uint64_t v70 = v18;
    if (one-time initialization token for drop != -1) {
      swift_once(&one-time initialization token for drop, one-time initialization function for drop);
    }
    long long v68 = static ErrorString.drop;
    long long v67 = xmmword_3ABEC0;
    uint64_t v19 = StringProtocol.replacingOccurrences<A, B>(of:with:options:range:)(&v68, &v67, 1, 0, 0, 1, &type metadata for String, &type metadata for String, &type metadata for String, v6, v6, v6);
    uint64_t v21 = v20;
    swift_bridgeObjectRelease(v58);
    uint64_t v69 = v19;
    uint64_t v59 = v21;
    uint64_t v70 = v21;
    if (one-time initialization token for sequence != -1) {
      swift_once(&one-time initialization token for sequence, one-time initialization function for sequence);
    }
    long long v68 = static ErrorString.sequence;
    long long v67 = xmmword_3ABEE0;
    uint64_t v22 = StringProtocol.replacingOccurrences<A, B>(of:with:options:range:)(&v68, &v67, 1, 0, 0, 1, &type metadata for String, &type metadata for String, &type metadata for String, v6, v6, v6);
    uint64_t v24 = v23;
    swift_bridgeObjectRelease(v59);
    uint64_t v69 = v22;
    uint64_t v70 = v24;
    if (one-time initialization token for double != -1) {
      swift_once(&one-time initialization token for double, one-time initialization function for double);
    }
    long long v68 = static ErrorString.double;
    long long v67 = xmmword_3ABF00;
    uint64_t v25 = StringProtocol.replacingOccurrences<A, B>(of:with:options:range:)(&v68, &v67, 1, 0, 0, 1, &type metadata for String, &type metadata for String, &type metadata for String, v6, v6, v6);
    uint64_t v27 = v26;
    swift_bridgeObjectRelease(v24);
    uint64_t v69 = v25;
    uint64_t v60 = v27;
    uint64_t v70 = v27;
    if (one-time initialization token for integer != -1) {
      swift_once(&one-time initialization token for integer, one-time initialization function for integer);
    }
    long long v68 = static ErrorString.integer;
    long long v67 = xmmword_3ABF20;
    uint64_t v28 = StringProtocol.replacingOccurrences<A, B>(of:with:options:range:)(&v68, &v67, 1, 0, 0, 1, &type metadata for String, &type metadata for String, &type metadata for String, v6, v6, v6);
    uint64_t v30 = v29;
    swift_bridgeObjectRelease(v60);
    uint64_t v69 = v28;
    uint64_t v61 = v30;
    uint64_t v70 = v30;
    if (one-time initialization token for error != -1) {
      swift_once(&one-time initialization token for error, one-time initialization function for error);
    }
    long long v68 = static ErrorString.error;
    long long v67 = xmmword_3ABF40;
    uint64_t v31 = StringProtocol.replacingOccurrences<A, B>(of:with:options:range:)(&v68, &v67, 0, 0, 0, 1, &type metadata for String, &type metadata for String, &type metadata for String, v6, v6, v6);
    uint64_t v33 = v32;
    swift_bridgeObjectRelease(v61);
    uint64_t v69 = v31;
    uint64_t v62 = v33;
    uint64_t v70 = v33;
    if (one-time initialization token for archive != -1) {
      swift_once(&one-time initialization token for archive, one-time initialization function for archive);
    }
    long long v68 = static ErrorString.archive;
    long long v67 = xmmword_3ABF60;
    uint64_t v34 = StringProtocol.replacingOccurrences<A, B>(of:with:options:range:)(&v68, &v67, 0, 0, 0, 1, &type metadata for String, &type metadata for String, &type metadata for String, v6, v6, v6);
    uint64_t v36 = v35;
    swift_bridgeObjectRelease(v62);
    uint64_t v69 = v34;
    uint64_t v63 = v36;
    uint64_t v70 = v36;
    if (one-time initialization token for limit != -1) {
      swift_once(&one-time initialization token for limit, one-time initialization function for limit);
    }
    long long v68 = static ErrorString.limit;
    long long v67 = xmmword_3ABF80;
    uint64_t v37 = StringProtocol.replacingOccurrences<A, B>(of:with:options:range:)(&v68, &v67, 0, 0, 0, 1, &type metadata for String, &type metadata for String, &type metadata for String, v6, v6, v6);
    uint64_t v39 = v38;
    swift_bridgeObjectRelease(v63);
    uint64_t v69 = v37;
    uint64_t v64 = v39;
    uint64_t v70 = v39;
    if (one-time initialization token for supportedStackTypes != -1) {
      swift_once(&one-time initialization token for supportedStackTypes, one-time initialization function for supportedStackTypes);
    }
    long long v68 = static ErrorString.supportedStackTypes;
    long long v67 = xmmword_3ABFA0;
    uint64_t v40 = StringProtocol.replacingOccurrences<A, B>(of:with:options:range:)(&v68, &v67, 0, 0, 0, 1, &type metadata for String, &type metadata for String, &type metadata for String, v6, v6, v6);
    uint64_t v42 = v41;
    swift_bridgeObjectRelease(v64);
    uint64_t v69 = v40;
    uint64_t v65 = v42;
    uint64_t v70 = v42;
    if (one-time initialization token for sortTypes != -1) {
      swift_once(&one-time initialization token for sortTypes, one-time initialization function for sortTypes);
    }
    long long v68 = static ErrorString.sortTypes;
    long long v67 = xmmword_3ABFC0;
    uint64_t v43 = StringProtocol.replacingOccurrences<A, B>(of:with:options:range:)(&v68, &v67, 0, 0, 0, 1, &type metadata for String, &type metadata for String, &type metadata for String, v6, v6, v6);
    uint64_t v45 = v44;
    swift_bridgeObjectRelease(v65);
    type metadata accessor for OS_os_log();
    swift_bridgeObjectRetain(v45);
    uint64_t v46 = (void *)static OS_os_log.default.getter();
    unsigned __int8 v66 = static os_log_type_t.error.getter();
    uint64_t v47 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<CVarArg>);
    uint64_t v48 = (void *)swift_allocObject(v47, 72, 7);
    v48[2] = 1;
    v48[3] = 2;
    v48[7] = &type metadata for String;
    v48[8] = lazy protocol witness table accessor for type String and conformance String();
    v48[4] = v43;
    v48[5] = v45;
    os_log(_:dso:log:type:_:)("%@ \n", 4, 2, &dword_0, v46, v66, v48);

    swift_bridgeObjectRelease(v48);
    uint64_t v49 = lazy protocol witness table accessor for type MLCreateError and conformance MLCreateError();
    swift_allocError(&type metadata for MLCreateError, v49, 0, 0);
    *(void *)uint64_t v50 = v43;
    *(void *)(v50 + 8) = v45;
    *(_OWORD *)(v50 + 16) = 0;
    *(_OWORD *)(v50 + 32) = 0;
    *(unsigned char *)(v50 + 48) = 0;
    swift_willThrow();
    tc_v1_release(v53);
    return v52;
  }
  return v2;
}

NSURL *specialized handling<A, B>(_:_:)(uint64_t a1)
{
  uint64_t v68 = 0;
  tc_v1_ft_double(a1, &v68);
  uint64_t v1 = v68;
  if (v68)
  {
    uint64_t v2 = tc_v1_error_message(v68);
    if (!v2) {
      BUG();
    }
    uint64_t v50 = v1;
    uint64_t v66 = String.init(cString:)(v2);
    uint64_t v51 = v3;
    uint64_t v67 = v3;
    if (one-time initialization token for table != -1) {
      swift_once(&one-time initialization token for table, one-time initialization function for table);
    }
    long long v65 = static ErrorString.table;
    long long v64 = xmmword_3ABE40;
    uint64_t v4 = lazy protocol witness table accessor for type String and conformance String();
    uint64_t v5 = StringProtocol.replacingOccurrences<A, B>(of:with:options:range:)(&v65, &v64, 1, 0, 0, 1, &type metadata for String, &type metadata for String, &type metadata for String, v4, v4, v4);
    uint64_t v7 = v6;
    swift_bridgeObjectRelease(v51);
    uint64_t v66 = v5;
    uint64_t v52 = v7;
    uint64_t v67 = v7;
    if (one-time initialization token for column != -1) {
      swift_once(&one-time initialization token for column, one-time initialization function for column);
    }
    long long v65 = static ErrorString.column;
    long long v64 = xmmword_3ABE60;
    uint64_t v8 = StringProtocol.replacingOccurrences<A, B>(of:with:options:range:)(&v65, &v64, 1, 0, 0, 1, &type metadata for String, &type metadata for String, &type metadata for String, v4, v4, v4);
    uint64_t v10 = v9;
    swift_bridgeObjectRelease(v52);
    uint64_t v66 = v8;
    uint64_t v53 = v10;
    uint64_t v67 = v10;
    if (one-time initialization token for tableMap != -1) {
      swift_once(&one-time initialization token for tableMap, one-time initialization function for tableMap);
    }
    long long v65 = static ErrorString.tableMap;
    long long v64 = xmmword_3ABE80;
    uint64_t v11 = StringProtocol.replacingOccurrences<A, B>(of:with:options:range:)(&v65, &v64, 1, 0, 0, 1, &type metadata for String, &type metadata for String, &type metadata for String, v4, v4, v4);
    uint64_t v13 = v12;
    swift_bridgeObjectRelease(v53);
    uint64_t v66 = v11;
    uint64_t v54 = v13;
    uint64_t v67 = v13;
    if (one-time initialization token for columnMap != -1) {
      swift_once(&one-time initialization token for columnMap, one-time initialization function for columnMap);
    }
    long long v65 = static ErrorString.columnMap;
    long long v64 = xmmword_3ABEA0;
    uint64_t v14 = StringProtocol.replacingOccurrences<A, B>(of:with:options:range:)(&v65, &v64, 1, 0, 0, 1, &type metadata for String, &type metadata for String, &type metadata for String, v4, v4, v4);
    uint64_t v16 = v15;
    swift_bridgeObjectRelease(v54);
    uint64_t v66 = v14;
    uint64_t v55 = v16;
    uint64_t v67 = v16;
    if (one-time initialization token for drop != -1) {
      swift_once(&one-time initialization token for drop, one-time initialization function for drop);
    }
    long long v65 = static ErrorString.drop;
    long long v64 = xmmword_3ABEC0;
    uint64_t v17 = StringProtocol.replacingOccurrences<A, B>(of:with:options:range:)(&v65, &v64, 1, 0, 0, 1, &type metadata for String, &type metadata for String, &type metadata for String, v4, v4, v4);
    uint64_t v19 = v18;
    swift_bridgeObjectRelease(v55);
    uint64_t v66 = v17;
    uint64_t v56 = v19;
    uint64_t v67 = v19;
    if (one-time initialization token for sequence != -1) {
      swift_once(&one-time initialization token for sequence, one-time initialization function for sequence);
    }
    long long v65 = static ErrorString.sequence;
    long long v64 = xmmword_3ABEE0;
    uint64_t v20 = StringProtocol.replacingOccurrences<A, B>(of:with:options:range:)(&v65, &v64, 1, 0, 0, 1, &type metadata for String, &type metadata for String, &type metadata for String, v4, v4, v4);
    uint64_t v22 = v21;
    swift_bridgeObjectRelease(v56);
    uint64_t v66 = v20;
    uint64_t v57 = v22;
    uint64_t v67 = v22;
    if (one-time initialization token for double != -1) {
      swift_once(&one-time initialization token for double, one-time initialization function for double);
    }
    long long v65 = static ErrorString.double;
    long long v64 = xmmword_3ABF00;
    uint64_t v23 = StringProtocol.replacingOccurrences<A, B>(of:with:options:range:)(&v65, &v64, 1, 0, 0, 1, &type metadata for String, &type metadata for String, &type metadata for String, v4, v4, v4);
    uint64_t v25 = v24;
    swift_bridgeObjectRelease(v57);
    uint64_t v66 = v23;
    uint64_t v58 = v25;
    uint64_t v67 = v25;
    if (one-time initialization token for integer != -1) {
      swift_once(&one-time initialization token for integer, one-time initialization function for integer);
    }
    long long v65 = static ErrorString.integer;
    long long v64 = xmmword_3ABF20;
    uint64_t v26 = StringProtocol.replacingOccurrences<A, B>(of:with:options:range:)(&v65, &v64, 1, 0, 0, 1, &type metadata for String, &type metadata for String, &type metadata for String, v4, v4, v4);
    uint64_t v28 = v27;
    swift_bridgeObjectRelease(v58);
    uint64_t v66 = v26;
    uint64_t v59 = v28;
    uint64_t v67 = v28;
    if (one-time initialization token for error != -1) {
      swift_once(&one-time initialization token for error, one-time initialization function for error);
    }
    long long v65 = static ErrorString.error;
    long long v64 = xmmword_3ABF40;
    uint64_t v29 = StringProtocol.replacingOccurrences<A, B>(of:with:options:range:)(&v65, &v64, 0, 0, 0, 1, &type metadata for String, &type metadata for String, &type metadata for String, v4, v4, v4);
    uint64_t v31 = v30;
    swift_bridgeObjectRelease(v59);
    uint64_t v66 = v29;
    uint64_t v60 = v31;
    uint64_t v67 = v31;
    if (one-time initialization token for archive != -1) {
      swift_once(&one-time initialization token for archive, one-time initialization function for archive);
    }
    long long v65 = static ErrorString.archive;
    long long v64 = xmmword_3ABF60;
    uint64_t v32 = StringProtocol.replacingOccurrences<A, B>(of:with:options:range:)(&v65, &v64, 0, 0, 0, 1, &type metadata for String, &type metadata for String, &type metadata for String, v4, v4, v4);
    uint64_t v34 = v33;
    swift_bridgeObjectRelease(v60);
    uint64_t v66 = v32;
    uint64_t v61 = v34;
    uint64_t v67 = v34;
    if (one-time initialization token for limit != -1) {
      swift_once(&one-time initialization token for limit, one-time initialization function for limit);
    }
    long long v65 = static ErrorString.limit;
    long long v64 = xmmword_3ABF80;
    uint64_t v35 = StringProtocol.replacingOccurrences<A, B>(of:with:options:range:)(&v65, &v64, 0, 0, 0, 1, &type metadata for String, &type metadata for String, &type metadata for String, v4, v4, v4);
    uint64_t v37 = v36;
    swift_bridgeObjectRelease(v61);
    uint64_t v66 = v35;
    uint64_t v62 = v37;
    uint64_t v67 = v37;
    if (one-time initialization token for supportedStackTypes != -1) {
      swift_once(&one-time initialization token for supportedStackTypes, one-time initialization function for supportedStackTypes);
    }
    long long v65 = static ErrorString.supportedStackTypes;
    long long v64 = xmmword_3ABFA0;
    uint64_t v38 = StringProtocol.replacingOccurrences<A, B>(of:with:options:range:)(&v65, &v64, 0, 0, 0, 1, &type metadata for String, &type metadata for String, &type metadata for String, v4, v4, v4);
    uint64_t v40 = v39;
    swift_bridgeObjectRelease(v62);
    uint64_t v66 = v38;
    uint64_t v67 = v40;
    if (one-time initialization token for sortTypes != -1) {
      swift_once(&one-time initialization token for sortTypes, one-time initialization function for sortTypes);
    }
    long long v65 = static ErrorString.sortTypes;
    long long v64 = xmmword_3ABFC0;
    uint64_t v41 = StringProtocol.replacingOccurrences<A, B>(of:with:options:range:)(&v65, &v64, 0, 0, 0, 1, &type metadata for String, &type metadata for String, &type metadata for String, v4, v4, v4);
    uint64_t v43 = v42;
    swift_bridgeObjectRelease(v40);
    type metadata accessor for OS_os_log();
    swift_bridgeObjectRetain(v43);
    uint64_t v44 = (void *)static OS_os_log.default.getter();
    unsigned __int8 v63 = static os_log_type_t.error.getter();
    uint64_t v45 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<CVarArg>);
    uint64_t v46 = (void *)swift_allocObject(v45, 72, 7);
    v46[2] = 1;
    v46[3] = 2;
    v46[7] = &type metadata for String;
    v46[8] = lazy protocol witness table accessor for type String and conformance String();
    v46[4] = v41;
    _OWORD v46[5] = v43;
    os_log(_:dso:log:type:_:)("%@ \n", 4, 2, &dword_0, v44, v63, v46);

    swift_bridgeObjectRelease(v46);
    uint64_t v47 = lazy protocol witness table accessor for type MLCreateError and conformance MLCreateError();
    swift_allocError(&type metadata for MLCreateError, v47, 0, 0);
    *(void *)uint64_t v48 = v41;
    *(void *)(v48 + 8) = v43;
    *(_OWORD *)(v48 + 16) = 0;
    *(_OWORD *)(v48 + 32) = 0;
    *(unsigned char *)(v48 + 48) = 0;
    swift_willThrow();
    tc_v1_release(v50);
  }
  return __stack_chk_guard;
}

{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  void *v44;
  uint64_t v45;
  void *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v53;
  char v54;
  char v55;
  char v56;
  char v57;
  char v58;
  char v59;
  char v60;
  char v61;
  char v62;
  char v63;
  char v64;
  char v65;
  unsigned __int8 v66;
  long long v67;
  long long v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;

  uint64_t v71 = 0;
  tc_v1_sarray_materialize(a1, &v71);
  uint64_t v1 = v71;
  if (v71)
  {
    uint64_t v2 = tc_v1_error_message(v71);
    if (!v2) {
      BUG();
    }
    uint64_t v53 = v1;
    uint64_t v69 = String.init(cString:)(v2);
    uint64_t v54 = v3;
    uint64_t v70 = v3;
    if (one-time initialization token for table != -1) {
      swift_once(&one-time initialization token for table, one-time initialization function for table);
    }
    uint64_t v68 = static ErrorString.table;
    uint64_t v67 = xmmword_3ABE40;
    uint64_t v4 = lazy protocol witness table accessor for type String and conformance String();
    uint64_t v5 = StringProtocol.replacingOccurrences<A, B>(of:with:options:range:)(&v68, &v67, 1, 0, 0, 1, &type metadata for String, &type metadata for String, &type metadata for String, v4, v4, v4);
    uint64_t v7 = v6;
    swift_bridgeObjectRelease(v54);
    uint64_t v69 = v5;
    uint64_t v55 = v7;
    uint64_t v70 = v7;
    if (one-time initialization token for column != -1) {
      swift_once(&one-time initialization token for column, one-time initialization function for column);
    }
    uint64_t v68 = static ErrorString.column;
    uint64_t v67 = xmmword_3ABE60;
    uint64_t v8 = StringProtocol.replacingOccurrences<A, B>(of:with:options:range:)(&v68, &v67, 1, 0, 0, 1, &type metadata for String, &type metadata for String, &type metadata for String, v4, v4, v4);
    uint64_t v10 = v9;
    swift_bridgeObjectRelease(v55);
    uint64_t v69 = v8;
    uint64_t v56 = v10;
    uint64_t v70 = v10;
    if (one-time initialization token for tableMap != -1) {
      swift_once(&one-time initialization token for tableMap, one-time initialization function for tableMap);
    }
    uint64_t v68 = static ErrorString.tableMap;
    uint64_t v67 = xmmword_3ABE80;
    uint64_t v11 = StringProtocol.replacingOccurrences<A, B>(of:with:options:range:)(&v68, &v67, 1, 0, 0, 1, &type metadata for String, &type metadata for String, &type metadata for String, v4, v4, v4);
    uint64_t v13 = v12;
    swift_bridgeObjectRelease(v56);
    uint64_t v69 = v11;
    uint64_t v57 = v13;
    uint64_t v70 = v13;
    if (one-time initialization token for columnMap != -1) {
      swift_once(&one-time initialization token for columnMap, one-time initialization function for columnMap);
    }
    uint64_t v68 = static ErrorString.columnMap;
    uint64_t v67 = xmmword_3ABEA0;
    uint64_t v14 = StringProtocol.replacingOccurrences<A, B>(of:with:options:range:)(&v68, &v67, 1, 0, 0, 1, &type metadata for String, &type metadata for String, &type metadata for String, v4, v4, v4);
    uint64_t v16 = v15;
    swift_bridgeObjectRelease(v57);
    uint64_t v69 = v14;
    uint64_t v58 = v16;
    uint64_t v70 = v16;
    if (one-time initialization token for drop != -1) {
      swift_once(&one-time initialization token for drop, one-time initialization function for drop);
    }
    uint64_t v68 = static ErrorString.drop;
    uint64_t v67 = xmmword_3ABEC0;
    uint64_t v17 = StringProtocol.replacingOccurrences<A, B>(of:with:options:range:)(&v68, &v67, 1, 0, 0, 1, &type metadata for String, &type metadata for String, &type metadata for String, v4, v4, v4);
    uint64_t v19 = v18;
    swift_bridgeObjectRelease(v58);
    uint64_t v69 = v17;
    uint64_t v59 = v19;
    uint64_t v70 = v19;
    if (one-time initialization token for sequence != -1) {
      swift_once(&one-time initialization token for sequence, one-time initialization function for sequence);
    }
    uint64_t v68 = static ErrorString.sequence;
    uint64_t v67 = xmmword_3ABEE0;
    uint64_t v20 = StringProtocol.replacingOccurrences<A, B>(of:with:options:range:)(&v68, &v67, 1, 0, 0, 1, &type metadata for String, &type metadata for String, &type metadata for String, v4, v4, v4);
    uint64_t v22 = v21;
    swift_bridgeObjectRelease(v59);
    uint64_t v69 = v20;
    uint64_t v60 = v22;
    uint64_t v70 = v22;
    if (one-time initialization token for double != -1) {
      swift_once(&one-time initialization token for double, one-time initialization function for double);
    }
    uint64_t v68 = static ErrorString.double;
    uint64_t v67 = xmmword_3ABF00;
    uint64_t v23 = StringProtocol.replacingOccurrences<A, B>(of:with:options:range:)(&v68, &v67, 1, 0, 0, 1, &type metadata for String, &type metadata for String, &type metadata for String, v4, v4, v4);
    uint64_t v25 = v24;
    swift_bridgeObjectRelease(v60);
    uint64_t v69 = v23;
    uint64_t v61 = v25;
    uint64_t v70 = v25;
    if (one-time initialization token for integer != -1) {
      swift_once(&one-time initialization token for integer, one-time initialization function for integer);
    }
    uint64_t v68 = static ErrorString.integer;
    uint64_t v67 = xmmword_3ABF20;
    uint64_t v26 = StringProtocol.replacingOccurrences<A, B>(of:with:options:range:)(&v68, &v67, 1, 0, 0, 1, &type metadata for String, &type metadata for String, &type metadata for String, v4, v4, v4);
    uint64_t v28 = v27;
    swift_bridgeObjectRelease(v61);
    uint64_t v69 = v26;
    uint64_t v62 = v28;
    uint64_t v70 = v28;
    if (one-time initialization token for error != -1) {
      swift_once(&one-time initialization token for error, one-time initialization function for error);
    }
    uint64_t v68 = static ErrorString.error;
    uint64_t v67 = xmmword_3ABF40;
    uint64_t v29 = StringProtocol.replacingOccurrences<A, B>(of:with:options:range:)(&v68, &v67, 0, 0, 0, 1, &type metadata for String, &type metadata for String, &type metadata for String, v4, v4, v4);
    uint64_t v31 = v30;
    swift_bridgeObjectRelease(v62);
    uint64_t v69 = v29;
    unsigned __int8 v63 = v31;
    uint64_t v70 = v31;
    if (one-time initialization token for archive != -1) {
      swift_once(&one-time initialization token for archive, one-time initialization function for archive);
    }
    uint64_t v68 = static ErrorString.archive;
    uint64_t v67 = xmmword_3ABF60;
    uint64_t v32 = StringProtocol.replacingOccurrences<A, B>(of:with:options:range:)(&v68, &v67, 0, 0, 0, 1, &type metadata for String, &type metadata for String, &type metadata for String, v4, v4, v4);
    uint64_t v34 = v33;
    swift_bridgeObjectRelease(v63);
    uint64_t v69 = v32;
    long long v64 = v34;
    uint64_t v70 = v34;
    if (one-time initialization token for limit != -1) {
      swift_once(&one-time initialization token for limit, one-time initialization function for limit);
    }
    uint64_t v68 = static ErrorString.limit;
    uint64_t v67 = xmmword_3ABF80;
    uint64_t v35 = StringProtocol.replacingOccurrences<A, B>(of:with:options:range:)(&v68, &v67, 0, 0, 0, 1, &type metadata for String, &type metadata for String, &type metadata for String, v4, v4, v4);
    uint64_t v37 = v36;
    swift_bridgeObjectRelease(v64);
    uint64_t v69 = v35;
    long long v65 = v37;
    uint64_t v70 = v37;
    if (one-time initialization token for supportedStackTypes != -1) {
      swift_once(&one-time initialization token for supportedStackTypes, one-time initialization function for supportedStackTypes);
    }
    uint64_t v68 = static ErrorString.supportedStackTypes;
    uint64_t v67 = xmmword_3ABFA0;
    uint64_t v38 = StringProtocol.replacingOccurrences<A, B>(of:with:options:range:)(&v68, &v67, 0, 0, 0, 1, &type metadata for String, &type metadata for String, &type metadata for String, v4, v4, v4);
    uint64_t v40 = v39;
    swift_bridgeObjectRelease(v65);
    uint64_t v69 = v38;
    uint64_t v70 = v40;
    if (one-time initialization token for sortTypes != -1) {
      swift_once(&one-time initialization token for sortTypes, one-time initialization function for sortTypes);
    }
    uint64_t v68 = static ErrorString.sortTypes;
    uint64_t v67 = xmmword_3ABFC0;
    uint64_t v41 = StringProtocol.replacingOccurrences<A, B>(of:with:options:range:)(&v68, &v67, 0, 0, 0, 1, &type metadata for String, &type metadata for String, &type metadata for String, v4, v4, v4);
    uint64_t v43 = v42;
    swift_bridgeObjectRelease(v40);
    type metadata accessor for OS_os_log();
    swift_bridgeObjectRetain(v43);
    uint64_t v44 = (void *)static OS_os_log.default.getter(v43);
    uint64_t v66 = static os_log_type_t.error.getter(v43, &v67);
    uint64_t v45 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<CVarArg>);
    uint64_t v46 = (void *)swift_allocObject(v45, 72, 7);
    v46[2] = 1;
    v46[3] = 2;
    v46[7] = &type metadata for String;
    v46[8] = lazy protocol witness table accessor for type String and conformance String();
    v46[4] = v41;
    _OWORD v46[5] = v43;
    os_log(_:dso:log:type:_:)("%@ \n", 4, 2, &dword_0, v44, v66, v46);

    swift_bridgeObjectRelease((_BYTE)v46);
    uint64_t v47 = lazy protocol witness table accessor for type MLCreateError and conformance MLCreateError();
    swift_allocError(&type metadata for MLCreateError, v47, 0, 0);
    *(void *)uint64_t v48 = v41;
    *(void *)(v48 + 8) = v43;
    *(_OWORD *)(v48 + 16) = 0;
    *(_OWORD *)(v48 + 32) = 0;
    *(unsigned char *)(v48 + 48) = 0;
    swift_willThrow(&type metadata for MLCreateError, v47, v48, v49, v50, v51);
    tc_v1_release(v53);
  }
  return __stack_chk_guard;
}

uint64_t specialized handling<A, B, C>(_:_:_:)(uint64_t a1, uint64_t a2)
{
  return specialized handling<A, B, C>(_:_:_:)(a1, a2, (uint64_t (*)(uint64_t, uint64_t, uint64_t *))&tc_v1_flex_list_extract_element);
}

{
  return specialized handling<A, B, C>(_:_:_:)(a1, a2, (uint64_t (*)(uint64_t, uint64_t, uint64_t *))&tc_v1_sframe_extract_row);
}

{
  return specialized handling<A, B, C>(_:_:_:)(a1, a2, (uint64_t (*)(uint64_t, uint64_t, uint64_t *))&tc_v1_sarray_extract_element);
}

{
  return specialized handling<A, B, C>(_:_:_:)(a1, a2, (uint64_t (*)(uint64_t, uint64_t, uint64_t *))&tc_v1_sarray_head);
}

{
  return specialized handling<A, B, C>(_:_:_:)(a1, a2, (uint64_t (*)(uint64_t, uint64_t, uint64_t *))&tc_v1_sarray_create_from_const);
}

{
  return specialized handling<A, B, C>(_:_:_:)(a1, a2, (uint64_t (*)(uint64_t, uint64_t, uint64_t *))&tc_v1_sarray_tail);
}

{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  void *v46;
  uint64_t v47;
  void *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  unsigned __int8 v66;
  long long v67;
  long long v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;

  uint64_t v71 = 0;
  uint64_t v2 = tc_v1_flex_list_add_element(a1, a2, &v71);
  uint64_t v3 = v71;
  if (v71)
  {
    uint64_t v4 = tc_v1_error_message(v71);
    if (!v4) {
      BUG();
    }
    uint64_t v53 = v3;
    uint64_t v52 = v2;
    uint64_t v69 = String.init(cString:)(v4);
    uint64_t v54 = v5;
    uint64_t v70 = v5;
    if (one-time initialization token for table != -1) {
      swift_once(&one-time initialization token for table, one-time initialization function for table);
    }
    uint64_t v68 = static ErrorString.table;
    uint64_t v67 = xmmword_3ABE40;
    uint64_t v6 = lazy protocol witness table accessor for type String and conformance String();
    uint64_t v7 = StringProtocol.replacingOccurrences<A, B>(of:with:options:range:)(&v68, &v67, 1, 0, 0, 1, &type metadata for String, &type metadata for String, &type metadata for String, v6, v6, v6);
    uint64_t v9 = v8;
    swift_bridgeObjectRelease(v54);
    uint64_t v69 = v7;
    uint64_t v55 = v9;
    uint64_t v70 = v9;
    if (one-time initialization token for column != -1) {
      swift_once(&one-time initialization token for column, one-time initialization function for column);
    }
    uint64_t v68 = static ErrorString.column;
    uint64_t v67 = xmmword_3ABE60;
    uint64_t v10 = StringProtocol.replacingOccurrences<A, B>(of:with:options:range:)(&v68, &v67, 1, 0, 0, 1, &type metadata for String, &type metadata for String, &type metadata for String, v6, v6, v6);
    uint64_t v12 = v11;
    swift_bridgeObjectRelease(v55);
    uint64_t v69 = v10;
    uint64_t v56 = v12;
    uint64_t v70 = v12;
    if (one-time initialization token for tableMap != -1) {
      swift_once(&one-time initialization token for tableMap, one-time initialization function for tableMap);
    }
    uint64_t v68 = static ErrorString.tableMap;
    uint64_t v67 = xmmword_3ABE80;
    uint64_t v13 = StringProtocol.replacingOccurrences<A, B>(of:with:options:range:)(&v68, &v67, 1, 0, 0, 1, &type metadata for String, &type metadata for String, &type metadata for String, v6, v6, v6);
    uint64_t v15 = v14;
    swift_bridgeObjectRelease(v56);
    uint64_t v69 = v13;
    uint64_t v57 = v15;
    uint64_t v70 = v15;
    if (one-time initialization token for columnMap != -1) {
      swift_once(&one-time initialization token for columnMap, one-time initialization function for columnMap);
    }
    uint64_t v68 = static ErrorString.columnMap;
    uint64_t v67 = xmmword_3ABEA0;
    uint64_t v16 = StringProtocol.replacingOccurrences<A, B>(of:with:options:range:)(&v68, &v67, 1, 0, 0, 1, &type metadata for String, &type metadata for String, &type metadata for String, v6, v6, v6);
    uint64_t v18 = v17;
    swift_bridgeObjectRelease(v57);
    uint64_t v69 = v16;
    uint64_t v58 = v18;
    uint64_t v70 = v18;
    if (one-time initialization token for drop != -1) {
      swift_once(&one-time initialization token for drop, one-time initialization function for drop);
    }
    uint64_t v68 = static ErrorString.drop;
    uint64_t v67 = xmmword_3ABEC0;
    uint64_t v19 = StringProtocol.replacingOccurrences<A, B>(of:with:options:range:)(&v68, &v67, 1, 0, 0, 1, &type metadata for String, &type metadata for String, &type metadata for String, v6, v6, v6);
    uint64_t v21 = v20;
    swift_bridgeObjectRelease(v58);
    uint64_t v69 = v19;
    uint64_t v59 = v21;
    uint64_t v70 = v21;
    if (one-time initialization token for sequence != -1) {
      swift_once(&one-time initialization token for sequence, one-time initialization function for sequence);
    }
    uint64_t v68 = static ErrorString.sequence;
    uint64_t v67 = xmmword_3ABEE0;
    uint64_t v22 = StringProtocol.replacingOccurrences<A, B>(of:with:options:range:)(&v68, &v67, 1, 0, 0, 1, &type metadata for String, &type metadata for String, &type metadata for String, v6, v6, v6);
    uint64_t v24 = v23;
    swift_bridgeObjectRelease(v59);
    uint64_t v69 = v22;
    uint64_t v70 = v24;
    if (one-time initialization token for double != -1) {
      swift_once(&one-time initialization token for double, one-time initialization function for double);
    }
    uint64_t v68 = static ErrorString.double;
    uint64_t v67 = xmmword_3ABF00;
    uint64_t v25 = StringProtocol.replacingOccurrences<A, B>(of:with:options:range:)(&v68, &v67, 1, 0, 0, 1, &type metadata for String, &type metadata for String, &type metadata for String, v6, v6, v6);
    uint64_t v27 = v26;
    swift_bridgeObjectRelease(v24);
    uint64_t v69 = v25;
    uint64_t v60 = v27;
    uint64_t v70 = v27;
    if (one-time initialization token for integer != -1) {
      swift_once(&one-time initialization token for integer, one-time initialization function for integer);
    }
    uint64_t v68 = static ErrorString.integer;
    uint64_t v67 = xmmword_3ABF20;
    uint64_t v28 = StringProtocol.replacingOccurrences<A, B>(of:with:options:range:)(&v68, &v67, 1, 0, 0, 1, &type metadata for String, &type metadata for String, &type metadata for String, v6, v6, v6);
    uint64_t v30 = v29;
    swift_bridgeObjectRelease(v60);
    uint64_t v69 = v28;
    uint64_t v61 = v30;
    uint64_t v70 = v30;
    if (one-time initialization token for error != -1) {
      swift_once(&one-time initialization token for error, one-time initialization function for error);
    }
    uint64_t v68 = static ErrorString.error;
    uint64_t v67 = xmmword_3ABF40;
    uint64_t v31 = StringProtocol.replacingOccurrences<A, B>(of:with:options:range:)(&v68, &v67, 0, 0, 0, 1, &type metadata for String, &type metadata for String, &type metadata for String, v6, v6, v6);
    uint64_t v33 = v32;
    swift_bridgeObjectRelease(v61);
    uint64_t v69 = v31;
    uint64_t v62 = v33;
    uint64_t v70 = v33;
    if (one-time initialization token for archive != -1) {
      swift_once(&one-time initialization token for archive, one-time initialization function for archive);
    }
    uint64_t v68 = static ErrorString.archive;
    uint64_t v67 = xmmword_3ABF60;
    uint64_t v34 = StringProtocol.replacingOccurrences<A, B>(of:with:options:range:)(&v68, &v67, 0, 0, 0, 1, &type metadata for String, &type metadata for String, &type metadata for String, v6, v6, v6);
    uint64_t v36 = v35;
    swift_bridgeObjectRelease(v62);
    uint64_t v69 = v34;
    unsigned __int8 v63 = v36;
    uint64_t v70 = v36;
    if (one-time initialization token for limit != -1) {
      swift_once(&one-time initialization token for limit, one-time initialization function for limit);
    }
    uint64_t v68 = static ErrorString.limit;
    uint64_t v67 = xmmword_3ABF80;
    uint64_t v37 = StringProtocol.replacingOccurrences<A, B>(of:with:options:range:)(&v68, &v67, 0, 0, 0, 1, &type metadata for String, &type metadata for String, &type metadata for String, v6, v6, v6);
    uint64_t v39 = v38;
    swift_bridgeObjectRelease(v63);
    uint64_t v69 = v37;
    long long v64 = v39;
    uint64_t v70 = v39;
    if (one-time initialization token for supportedStackTypes != -1) {
      swift_once(&one-time initialization token for supportedStackTypes, one-time initialization function for supportedStackTypes);
    }
    uint64_t v68 = static ErrorString.supportedStackTypes;
    uint64_t v67 = xmmword_3ABFA0;
    uint64_t v40 = StringProtocol.replacingOccurrences<A, B>(of:with:options:range:)(&v68, &v67, 0, 0, 0, 1, &type metadata for String, &type metadata for String, &type metadata for String, v6, v6, v6);
    uint64_t v42 = v41;
    swift_bridgeObjectRelease(v64);
    uint64_t v69 = v40;
    long long v65 = v42;
    uint64_t v70 = v42;
    if (one-time initialization token for sortTypes != -1) {
      swift_once(&one-time initialization token for sortTypes, one-time initialization function for sortTypes);
    }
    uint64_t v68 = static ErrorString.sortTypes;
    uint64_t v67 = xmmword_3ABFC0;
    uint64_t v43 = StringProtocol.replacingOccurrences<A, B>(of:with:options:range:)(&v68, &v67, 0, 0, 0, 1, &type metadata for String, &type metadata for String, &type metadata for String, v6, v6, v6);
    uint64_t v45 = v44;
    swift_bridgeObjectRelease(v65);
    type metadata accessor for OS_os_log();
    swift_bridgeObjectRetain(v45);
    uint64_t v46 = (void *)static OS_os_log.default.getter();
    uint64_t v66 = static os_log_type_t.error.getter();
    uint64_t v47 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<CVarArg>);
    uint64_t v48 = (void *)swift_allocObject(v47, 72, 7);
    v48[2] = 1;
    v48[3] = 2;
    v48[7] = &type metadata for String;
    v48[8] = lazy protocol witness table accessor for type String and conformance String();
    v48[4] = v43;
    v48[5] = v45;
    os_log(_:dso:log:type:_:)("%@ \n", 4, 2, &dword_0, v46, v66, v48);

    swift_bridgeObjectRelease(v48);
    uint64_t v49 = lazy protocol witness table accessor for type MLCreateError and conformance MLCreateError();
    swift_allocError(&type metadata for MLCreateError, v49, 0, 0);
    *(void *)uint64_t v50 = v43;
    *(void *)(v50 + 8) = v45;
    *(_OWORD *)(v50 + 16) = 0;
    *(_OWORD *)(v50 + 32) = 0;
    *(unsigned char *)(v50 + 48) = 0;
    swift_willThrow();
    tc_v1_release(v53);
    return v52;
  }
  return v2;
}

{
  return specialized handling<A, B, C>(_:_:_:)(a1, a2, (uint64_t (*)(uint64_t, uint64_t, uint64_t *))&tc_v1_sframe_extract_column_by_name);
}

{
  return specialized handling<A, B, C>(_:_:_:)(a1, a2, (uint64_t (*)(uint64_t, uint64_t, uint64_t *))&tc_v1_parameters_retrieve_flexible_type);
}

{
  return specialized handling<A, B, C>(_:_:_:)(a1, a2, (uint64_t (*)(uint64_t, uint64_t, uint64_t *))&tc_v1_parameters_retrieve_sframe);
}

{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  void *v45;
  uint64_t v46;
  void *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v54;
  uint64_t v55;
  unsigned __int8 v56;
  char v57;
  char v58;
  char v59;
  char v60;
  char v61;
  char v62;
  char v63;
  char v64;
  char v65;
  char v66;
  char v67;
  uint64_t v68;
  long long v69;
  long long v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;

  unint64_t v73 = 0;
  uint64_t v2 = tc_v1_flex_enum_list_add_element(a1, a2, &v73);
  uint64_t v3 = v73;
  if (v73)
  {
    uint64_t v4 = tc_v1_error_message(v73);
    if (!v4) {
      BUG();
    }
    uint64_t v55 = v3;
    uint64_t v54 = v2;
    uint64_t v71 = String.init(cString:)(v4);
    uint64_t v57 = v5;
    char v72 = v5;
    if (one-time initialization token for table != -1) {
      swift_once(&one-time initialization token for table, one-time initialization function for table);
    }
    uint64_t v70 = static ErrorString.table;
    uint64_t v69 = xmmword_3ABE40;
    uint64_t v6 = lazy protocol witness table accessor for type String and conformance String();
    uint64_t v7 = StringProtocol.replacingOccurrences<A, B>(of:with:options:range:)(&v70, &v69, 1, 0, 0, 1, &type metadata for String, &type metadata for String, &type metadata for String, v6, v6, v6);
    uint64_t v9 = v8;
    swift_bridgeObjectRelease(v57);
    uint64_t v71 = v7;
    uint64_t v58 = v9;
    char v72 = v9;
    if (one-time initialization token for column != -1) {
      swift_once(&one-time initialization token for column, one-time initialization function for column);
    }
    uint64_t v70 = static ErrorString.column;
    uint64_t v69 = xmmword_3ABE60;
    uint64_t v10 = StringProtocol.replacingOccurrences<A, B>(of:with:options:range:)(&v70, &v69, 1, 0, 0, 1, &type metadata for String, &type metadata for String, &type metadata for String, v6, v6, v6);
    uint64_t v12 = v11;
    swift_bridgeObjectRelease(v58);
    uint64_t v71 = v10;
    uint64_t v59 = v12;
    char v72 = v12;
    if (one-time initialization token for tableMap != -1) {
      swift_once(&one-time initialization token for tableMap, one-time initialization function for tableMap);
    }
    uint64_t v70 = static ErrorString.tableMap;
    uint64_t v69 = xmmword_3ABE80;
    uint64_t v13 = StringProtocol.replacingOccurrences<A, B>(of:with:options:range:)(&v70, &v69, 1, 0, 0, 1, &type metadata for String, &type metadata for String, &type metadata for String, v6, v6, v6);
    uint64_t v15 = v14;
    swift_bridgeObjectRelease(v59);
    uint64_t v71 = v13;
    uint64_t v60 = v15;
    char v72 = v15;
    if (one-time initialization token for columnMap != -1) {
      swift_once(&one-time initialization token for columnMap, one-time initialization function for columnMap);
    }
    uint64_t v70 = static ErrorString.columnMap;
    uint64_t v69 = xmmword_3ABEA0;
    uint64_t v16 = StringProtocol.replacingOccurrences<A, B>(of:with:options:range:)(&v70, &v69, 1, 0, 0, 1, &type metadata for String, &type metadata for String, &type metadata for String, v6, v6, v6);
    uint64_t v18 = v17;
    swift_bridgeObjectRelease(v60);
    uint64_t v71 = v16;
    uint64_t v61 = v18;
    char v72 = v18;
    if (one-time initialization token for drop != -1) {
      swift_once(&one-time initialization token for drop, one-time initialization function for drop);
    }
    uint64_t v70 = static ErrorString.drop;
    uint64_t v69 = xmmword_3ABEC0;
    uint64_t v19 = StringProtocol.replacingOccurrences<A, B>(of:with:options:range:)(&v70, &v69, 1, 0, 0, 1, &type metadata for String, &type metadata for String, &type metadata for String, v6, v6, v6);
    uint64_t v21 = v20;
    swift_bridgeObjectRelease(v61);
    uint64_t v71 = v19;
    uint64_t v62 = v21;
    char v72 = v21;
    if (one-time initialization token for sequence != -1) {
      swift_once(&one-time initialization token for sequence, one-time initialization function for sequence);
    }
    uint64_t v70 = static ErrorString.sequence;
    uint64_t v69 = xmmword_3ABEE0;
    uint64_t v22 = StringProtocol.replacingOccurrences<A, B>(of:with:options:range:)(&v70, &v69, 1, 0, 0, 1, &type metadata for String, &type metadata for String, &type metadata for String, v6, v6, v6);
    uint64_t v24 = v23;
    swift_bridgeObjectRelease(v62);
    uint64_t v71 = v22;
    char v72 = v24;
    if (one-time initialization token for double != -1) {
      swift_once(&one-time initialization token for double, one-time initialization function for double);
    }
    uint64_t v70 = static ErrorString.double;
    uint64_t v69 = xmmword_3ABF00;
    uint64_t v25 = StringProtocol.replacingOccurrences<A, B>(of:with:options:range:)(&v70, &v69, 1, 0, 0, 1, &type metadata for String, &type metadata for String, &type metadata for String, v6, v6, v6);
    uint64_t v27 = v26;
    swift_bridgeObjectRelease(v24);
    uint64_t v71 = v25;
    unsigned __int8 v63 = v27;
    char v72 = v27;
    if (one-time initialization token for integer != -1) {
      swift_once(&one-time initialization token for integer, one-time initialization function for integer);
    }
    uint64_t v70 = static ErrorString.integer;
    uint64_t v69 = xmmword_3ABF20;
    uint64_t v28 = StringProtocol.replacingOccurrences<A, B>(of:with:options:range:)(&v70, &v69, 1, 0, 0, 1, &type metadata for String, &type metadata for String, &type metadata for String, v6, v6, v6);
    uint64_t v30 = v29;
    swift_bridgeObjectRelease(v63);
    uint64_t v71 = v28;
    long long v64 = v30;
    char v72 = v30;
    if (one-time initialization token for error != -1) {
      swift_once(&one-time initialization token for error, one-time initialization function for error);
    }
    uint64_t v70 = static ErrorString.error;
    uint64_t v69 = xmmword_3ABF40;
    uint64_t v31 = StringProtocol.replacingOccurrences<A, B>(of:with:options:range:)(&v70, &v69, 0, 0, 0, 1, &type metadata for String, &type metadata for String, &type metadata for String, v6, v6, v6);
    uint64_t v33 = v32;
    swift_bridgeObjectRelease(v64);
    uint64_t v71 = v31;
    long long v65 = v33;
    char v72 = v33;
    if (one-time initialization token for archive != -1) {
      swift_once(&one-time initialization token for archive, one-time initialization function for archive);
    }
    uint64_t v70 = static ErrorString.archive;
    uint64_t v69 = xmmword_3ABF60;
    uint64_t v34 = StringProtocol.replacingOccurrences<A, B>(of:with:options:range:)(&v70, &v69, 0, 0, 0, 1, &type metadata for String, &type metadata for String, &type metadata for String, v6, v6, v6);
    uint64_t v36 = v35;
    swift_bridgeObjectRelease(v65);
    uint64_t v71 = v34;
    uint64_t v66 = v36;
    char v72 = v36;
    if (one-time initialization token for limit != -1) {
      swift_once(&one-time initialization token for limit, one-time initialization function for limit);
    }
    uint64_t v70 = static ErrorString.limit;
    uint64_t v69 = xmmword_3ABF80;
    uint64_t v37 = StringProtocol.replacingOccurrences<A, B>(of:with:options:range:)(&v70, &v69, 0, 0, 0, 1, &type metadata for String, &type metadata for String, &type metadata for String, v6, v6, v6);
    uint64_t v39 = v38;
    swift_bridgeObjectRelease(v66);
    uint64_t v71 = v37;
    uint64_t v67 = v39;
    char v72 = v39;
    if (one-time initialization token for supportedStackTypes != -1) {
      swift_once(&one-time initialization token for supportedStackTypes, one-time initialization function for supportedStackTypes);
    }
    uint64_t v70 = static ErrorString.supportedStackTypes;
    uint64_t v69 = xmmword_3ABFA0;
    uint64_t v40 = StringProtocol.replacingOccurrences<A, B>(of:with:options:range:)(&v70, &v69, 0, 0, 0, 1, &type metadata for String, &type metadata for String, &type metadata for String, v6, v6, v6);
    uint64_t v42 = v41;
    swift_bridgeObjectRelease(v67);
    uint64_t v71 = v40;
    char v72 = v42;
    if (one-time initialization token for sortTypes != -1) {
      swift_once(&one-time initialization token for sortTypes, one-time initialization function for sortTypes);
    }
    uint64_t v70 = static ErrorString.sortTypes;
    uint64_t v69 = xmmword_3ABFC0;
    uint64_t v43 = StringProtocol.replacingOccurrences<A, B>(of:with:options:range:)(&v70, &v69, 0, 0, 0, 1, &type metadata for String, &type metadata for String, &type metadata for String, v6, v6, v6);
    uint64_t v68 = v44;
    swift_bridgeObjectRelease(v42);
    type metadata accessor for OS_os_log();
    uint64_t v45 = (void *)static OS_os_log.default.getter(0);
    uint64_t v56 = static os_log_type_t.error.getter(0, &v69);
    uint64_t v46 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<CVarArg>);
    uint64_t v47 = (void *)swift_allocObject(v46, 72, 7);
    v47[2] = 1;
    v47[3] = 2;
    v47[7] = &type metadata for String;
    v47[8] = lazy protocol witness table accessor for type String and conformance String();
    v47[4] = v43;
    v47[5] = v68;
    swift_bridgeObjectRetain(v68);
    os_log(_:dso:log:type:_:)("%@ \n", 4, 2, &dword_0, v45, v56, v47);

    swift_bridgeObjectRelease((_BYTE)v47);
    uint64_t v48 = lazy protocol witness table accessor for type MLCreateError and conformance MLCreateError();
    swift_allocError(&type metadata for MLCreateError, v48, 0, 0);
    *(void *)uint64_t v49 = v43;
    *(void *)(v49 + 8) = v68;
    *(_OWORD *)(v49 + 16) = 0;
    *(_OWORD *)(v49 + 32) = 0;
    *(unsigned char *)(v49 + 48) = 0;
    swift_willThrow(&type metadata for MLCreateError, v48, v49, v50, v51, v52);
    tc_v1_release(v55);
    return v54;
  }
  return v2;
}

{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  void *v45;
  uint64_t v46;
  void *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v54;
  uint64_t v55;
  unsigned __int8 v56;
  char v57;
  char v58;
  char v59;
  char v60;
  char v61;
  char v62;
  char v63;
  char v64;
  char v65;
  char v66;
  char v67;
  uint64_t v68;
  long long v69;
  long long v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;

  unint64_t v73 = 0;
  uint64_t v2 = tc_v1_sarray_create_from_sequence(a1, a2, &v73);
  uint64_t v3 = v73;
  if (v73)
  {
    uint64_t v4 = tc_v1_error_message(v73);
    if (!v4) {
      BUG();
    }
    uint64_t v55 = v3;
    uint64_t v54 = v2;
    uint64_t v71 = String.init(cString:)(v4);
    uint64_t v57 = v5;
    char v72 = v5;
    if (one-time initialization token for table != -1) {
      swift_once(&one-time initialization token for table, one-time initialization function for table);
    }
    uint64_t v70 = static ErrorString.table;
    uint64_t v69 = xmmword_3ABE40;
    uint64_t v6 = lazy protocol witness table accessor for type String and conformance String();
    uint64_t v7 = StringProtocol.replacingOccurrences<A, B>(of:with:options:range:)(&v70, &v69, 1, 0, 0, 1, &type metadata for String, &type metadata for String, &type metadata for String, v6, v6, v6);
    uint64_t v9 = v8;
    swift_bridgeObjectRelease(v57);
    uint64_t v71 = v7;
    uint64_t v58 = v9;
    char v72 = v9;
    if (one-time initialization token for column != -1) {
      swift_once(&one-time initialization token for column, one-time initialization function for column);
    }
    uint64_t v70 = static ErrorString.column;
    uint64_t v69 = xmmword_3ABE60;
    uint64_t v10 = StringProtocol.replacingOccurrences<A, B>(of:with:options:range:)(&v70, &v69, 1, 0, 0, 1, &type metadata for String, &type metadata for String, &type metadata for String, v6, v6, v6);
    uint64_t v12 = v11;
    swift_bridgeObjectRelease(v58);
    uint64_t v71 = v10;
    uint64_t v59 = v12;
    char v72 = v12;
    if (one-time initialization token for tableMap != -1) {
      swift_once(&one-time initialization token for tableMap, one-time initialization function for tableMap);
    }
    uint64_t v70 = static ErrorString.tableMap;
    uint64_t v69 = xmmword_3ABE80;
    uint64_t v13 = StringProtocol.replacingOccurrences<A, B>(of:with:options:range:)(&v70, &v69, 1, 0, 0, 1, &type metadata for String, &type metadata for String, &type metadata for String, v6, v6, v6);
    uint64_t v15 = v14;
    swift_bridgeObjectRelease(v59);
    uint64_t v71 = v13;
    uint64_t v60 = v15;
    char v72 = v15;
    if (one-time initialization token for columnMap != -1) {
      swift_once(&one-time initialization token for columnMap, one-time initialization function for columnMap);
    }
    uint64_t v70 = static ErrorString.columnMap;
    uint64_t v69 = xmmword_3ABEA0;
    uint64_t v16 = StringProtocol.replacingOccurrences<A, B>(of:with:options:range:)(&v70, &v69, 1, 0, 0, 1, &type metadata for String, &type metadata for String, &type metadata for String, v6, v6, v6);
    uint64_t v18 = v17;
    swift_bridgeObjectRelease(v60);
    uint64_t v71 = v16;
    uint64_t v61 = v18;
    char v72 = v18;
    if (one-time initialization token for drop != -1) {
      swift_once(&one-time initialization token for drop, one-time initialization function for drop);
    }
    uint64_t v70 = static ErrorString.drop;
    uint64_t v69 = xmmword_3ABEC0;
    uint64_t v19 = StringProtocol.replacingOccurrences<A, B>(of:with:options:range:)(&v70, &v69, 1, 0, 0, 1, &type metadata for String, &type metadata for String, &type metadata for String, v6, v6, v6);
    uint64_t v21 = v20;
    swift_bridgeObjectRelease(v61);
    uint64_t v71 = v19;
    uint64_t v62 = v21;
    char v72 = v21;
    if (one-time initialization token for sequence != -1) {
      swift_once(&one-time initialization token for sequence, one-time initialization function for sequence);
    }
    uint64_t v70 = static ErrorString.sequence;
    uint64_t v69 = xmmword_3ABEE0;
    uint64_t v22 = StringProtocol.replacingOccurrences<A, B>(of:with:options:range:)(&v70, &v69, 1, 0, 0, 1, &type metadata for String, &type metadata for String, &type metadata for String, v6, v6, v6);
    uint64_t v24 = v23;
    swift_bridgeObjectRelease(v62);
    uint64_t v71 = v22;
    char v72 = v24;
    if (one-time initialization token for double != -1) {
      swift_once(&one-time initialization token for double, one-time initialization function for double);
    }
    uint64_t v70 = static ErrorString.double;
    uint64_t v69 = xmmword_3ABF00;
    uint64_t v25 = StringProtocol.replacingOccurrences<A, B>(of:with:options:range:)(&v70, &v69, 1, 0, 0, 1, &type metadata for String, &type metadata for String, &type metadata for String, v6, v6, v6);
    uint64_t v27 = v26;
    swift_bridgeObjectRelease(v24);
    uint64_t v71 = v25;
    unsigned __int8 v63 = v27;
    char v72 = v27;
    if (one-time initialization token for integer != -1) {
      swift_once(&one-time initialization token for integer, one-time initialization function for integer);
    }
    uint64_t v70 = static ErrorString.integer;
    uint64_t v69 = xmmword_3ABF20;
    uint64_t v28 = StringProtocol.replacingOccurrences<A, B>(of:with:options:range:)(&v70, &v69, 1, 0, 0, 1, &type metadata for String, &type metadata for String, &type metadata for String, v6, v6, v6);
    uint64_t v30 = v29;
    swift_bridgeObjectRelease(v63);
    uint64_t v71 = v28;
    long long v64 = v30;
    char v72 = v30;
    if (one-time initialization token for error != -1) {
      swift_once(&one-time initialization token for error, one-time initialization function for error);
    }
    uint64_t v70 = static ErrorString.error;
    uint64_t v69 = xmmword_3ABF40;
    uint64_t v31 = StringProtocol.replacingOccurrences<A, B>(of:with:options:range:)(&v70, &v69, 0, 0, 0, 1, &type metadata for String, &type metadata for String, &type metadata for String, v6, v6, v6);
    uint64_t v33 = v32;
    swift_bridgeObjectRelease(v64);
    uint64_t v71 = v31;
    long long v65 = v33;
    char v72 = v33;
    if (one-time initialization token for archive != -1) {
      swift_once(&one-time initialization token for archive, one-time initialization function for archive);
    }
    uint64_t v70 = static ErrorString.archive;
    uint64_t v69 = xmmword_3ABF60;
    uint64_t v34 = StringProtocol.replacingOccurrences<A, B>(of:with:options:range:)(&v70, &v69, 0, 0, 0, 1, &type metadata for String, &type metadata for String, &type metadata for String, v6, v6, v6);
    uint64_t v36 = v35;
    swift_bridgeObjectRelease(v65);
    uint64_t v71 = v34;
    uint64_t v66 = v36;
    char v72 = v36;
    if (one-time initialization token for limit != -1) {
      swift_once(&one-time initialization token for limit, one-time initialization function for limit);
    }
    uint64_t v70 = static ErrorString.limit;
    uint64_t v69 = xmmword_3ABF80;
    uint64_t v37 = StringProtocol.replacingOccurrences<A, B>(of:with:options:range:)(&v70, &v69, 0, 0, 0, 1, &type metadata for String, &type metadata for String, &type metadata for String, v6, v6, v6);
    uint64_t v39 = v38;
    swift_bridgeObjectRelease(v66);
    uint64_t v71 = v37;
    uint64_t v67 = v39;
    char v72 = v39;
    if (one-time initialization token for supportedStackTypes != -1) {
      swift_once(&one-time initialization token for supportedStackTypes, one-time initialization function for supportedStackTypes);
    }
    uint64_t v70 = static ErrorString.supportedStackTypes;
    uint64_t v69 = xmmword_3ABFA0;
    uint64_t v40 = StringProtocol.replacingOccurrences<A, B>(of:with:options:range:)(&v70, &v69, 0, 0, 0, 1, &type metadata for String, &type metadata for String, &type metadata for String, v6, v6, v6);
    uint64_t v42 = v41;
    swift_bridgeObjectRelease(v67);
    uint64_t v71 = v40;
    char v72 = v42;
    if (one-time initialization token for sortTypes != -1) {
      swift_once(&one-time initialization token for sortTypes, one-time initialization function for sortTypes);
    }
    uint64_t v70 = static ErrorString.sortTypes;
    uint64_t v69 = xmmword_3ABFC0;
    uint64_t v43 = StringProtocol.replacingOccurrences<A, B>(of:with:options:range:)(&v70, &v69, 0, 0, 0, 1, &type metadata for String, &type metadata for String, &type metadata for String, v6, v6, v6);
    uint64_t v68 = v44;
    swift_bridgeObjectRelease(v42);
    type metadata accessor for OS_os_log();
    uint64_t v45 = (void *)static OS_os_log.default.getter(0);
    uint64_t v56 = static os_log_type_t.error.getter(0, &v69);
    uint64_t v46 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<CVarArg>);
    uint64_t v47 = (void *)swift_allocObject(v46, 72, 7);
    v47[2] = 1;
    v47[3] = 2;
    v47[7] = &type metadata for String;
    v47[8] = lazy protocol witness table accessor for type String and conformance String();
    v47[4] = v43;
    v47[5] = v68;
    swift_bridgeObjectRetain(v68);
    os_log(_:dso:log:type:_:)("%@ \n", 4, 2, &dword_0, v45, v56, v47);

    swift_bridgeObjectRelease((_BYTE)v47);
    uint64_t v48 = lazy protocol witness table accessor for type MLCreateError and conformance MLCreateError();
    swift_allocError(&type metadata for MLCreateError, v48, 0, 0);
    *(void *)uint64_t v49 = v43;
    *(void *)(v49 + 8) = v68;
    *(_OWORD *)(v49 + 16) = 0;
    *(_OWORD *)(v49 + 32) = 0;
    *(unsigned char *)(v49 + 48) = 0;
    swift_willThrow(&type metadata for MLCreateError, v48, v49, v50, v51, v52);
    tc_v1_release(v55);
    return v54;
  }
  return v2;
}

{
  return specialized handling<A, B, C>(_:_:_:)(a1, a2, (uint64_t (*)(uint64_t, uint64_t, uint64_t *))&tc_v1_sarray_append);
}

{
  return specialized handling<A, B, C>(_:_:_:)(a1, a2, (uint64_t (*)(uint64_t, uint64_t, uint64_t *))&tc_v1_sarray_apply_mask);
}

{
  return specialized handling<A, B, C>(_:_:_:)(a1, a2, (uint64_t (*)(uint64_t, uint64_t, uint64_t *))&tc_v1_sarray_replace_na);
}

{
  return specialized handling<A, B, C>(_:_:_:)(a1, a2, (uint64_t (*)(uint64_t, uint64_t, uint64_t *))&tc_v1_sframe_append);
}

{
  return specialized handling<A, B, C>(_:_:_:)(a1, a2, (uint64_t (*)(uint64_t, uint64_t, uint64_t *))&tc_v1_plot_get_next_data);
}

{
  return specialized handling<A, B, C>(_:_:_:)(a1, a2, (uint64_t (*)(uint64_t, uint64_t, uint64_t *))&tc_v1_sframe_read_csv);
}

{
  return specialized handling<A, B, C>(_:_:_:)(a1, a2, (uint64_t (*)(uint64_t, uint64_t, uint64_t *))&tc_v1_function_call);
}

{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  void *v45;
  uint64_t v46;
  void *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v51;
  uint64_t v52;
  unsigned __int8 v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  long long v66;
  long long v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;

  uint64_t v70 = 0;
  uint64_t v2 = tc_v1_sframe_column_type(a1, a2, &v70);
  uint64_t v3 = v70;
  if (v70)
  {
    uint64_t v4 = tc_v1_error_message(v70);
    if (!v4) {
      BUG();
    }
    uint64_t v52 = v3;
    uint64_t v51 = v2;
    uint64_t v68 = String.init(cString:)(v4);
    uint64_t v54 = v5;
    uint64_t v69 = v5;
    if (one-time initialization token for table != -1) {
      swift_once(&one-time initialization token for table, one-time initialization function for table);
    }
    uint64_t v67 = static ErrorString.table;
    uint64_t v66 = xmmword_3ABE40;
    uint64_t v6 = lazy protocol witness table accessor for type String and conformance String();
    uint64_t v7 = StringProtocol.replacingOccurrences<A, B>(of:with:options:range:)(&v67, &v66, 1, 0, 0, 1, &type metadata for String, &type metadata for String, &type metadata for String, v6, v6, v6);
    uint64_t v9 = v8;
    swift_bridgeObjectRelease(v54);
    uint64_t v68 = v7;
    uint64_t v55 = v9;
    uint64_t v69 = v9;
    if (one-time initialization token for column != -1) {
      swift_once(&one-time initialization token for column, one-time initialization function for column);
    }
    uint64_t v67 = static ErrorString.column;
    uint64_t v66 = xmmword_3ABE60;
    uint64_t v10 = StringProtocol.replacingOccurrences<A, B>(of:with:options:range:)(&v67, &v66, 1, 0, 0, 1, &type metadata for String, &type metadata for String, &type metadata for String, v6, v6, v6);
    uint64_t v12 = v11;
    swift_bridgeObjectRelease(v55);
    uint64_t v68 = v10;
    uint64_t v56 = v12;
    uint64_t v69 = v12;
    if (one-time initialization token for tableMap != -1) {
      swift_once(&one-time initialization token for tableMap, one-time initialization function for tableMap);
    }
    uint64_t v67 = static ErrorString.tableMap;
    uint64_t v66 = xmmword_3ABE80;
    uint64_t v13 = StringProtocol.replacingOccurrences<A, B>(of:with:options:range:)(&v67, &v66, 1, 0, 0, 1, &type metadata for String, &type metadata for String, &type metadata for String, v6, v6, v6);
    uint64_t v15 = v14;
    swift_bridgeObjectRelease(v56);
    uint64_t v68 = v13;
    uint64_t v57 = v15;
    uint64_t v69 = v15;
    if (one-time initialization token for columnMap != -1) {
      swift_once(&one-time initialization token for columnMap, one-time initialization function for columnMap);
    }
    uint64_t v67 = static ErrorString.columnMap;
    uint64_t v66 = xmmword_3ABEA0;
    uint64_t v16 = StringProtocol.replacingOccurrences<A, B>(of:with:options:range:)(&v67, &v66, 1, 0, 0, 1, &type metadata for String, &type metadata for String, &type metadata for String, v6, v6, v6);
    uint64_t v18 = v17;
    swift_bridgeObjectRelease(v57);
    uint64_t v68 = v16;
    uint64_t v58 = v18;
    uint64_t v69 = v18;
    if (one-time initialization token for drop != -1) {
      swift_once(&one-time initialization token for drop, one-time initialization function for drop);
    }
    uint64_t v67 = static ErrorString.drop;
    uint64_t v66 = xmmword_3ABEC0;
    uint64_t v19 = StringProtocol.replacingOccurrences<A, B>(of:with:options:range:)(&v67, &v66, 1, 0, 0, 1, &type metadata for String, &type metadata for String, &type metadata for String, v6, v6, v6);
    uint64_t v21 = v20;
    swift_bridgeObjectRelease(v58);
    uint64_t v68 = v19;
    uint64_t v59 = v21;
    uint64_t v69 = v21;
    if (one-time initialization token for sequence != -1) {
      swift_once(&one-time initialization token for sequence, one-time initialization function for sequence);
    }
    uint64_t v67 = static ErrorString.sequence;
    uint64_t v66 = xmmword_3ABEE0;
    uint64_t v22 = StringProtocol.replacingOccurrences<A, B>(of:with:options:range:)(&v67, &v66, 1, 0, 0, 1, &type metadata for String, &type metadata for String, &type metadata for String, v6, v6, v6);
    uint64_t v24 = v23;
    swift_bridgeObjectRelease(v59);
    uint64_t v68 = v22;
    uint64_t v69 = v24;
    if (one-time initialization token for double != -1) {
      swift_once(&one-time initialization token for double, one-time initialization function for double);
    }
    uint64_t v67 = static ErrorString.double;
    uint64_t v66 = xmmword_3ABF00;
    uint64_t v25 = StringProtocol.replacingOccurrences<A, B>(of:with:options:range:)(&v67, &v66, 1, 0, 0, 1, &type metadata for String, &type metadata for String, &type metadata for String, v6, v6, v6);
    uint64_t v27 = v26;
    swift_bridgeObjectRelease(v24);
    uint64_t v68 = v25;
    uint64_t v60 = v27;
    uint64_t v69 = v27;
    if (one-time initialization token for integer != -1) {
      swift_once(&one-time initialization token for integer, one-time initialization function for integer);
    }
    uint64_t v67 = static ErrorString.integer;
    uint64_t v66 = xmmword_3ABF20;
    uint64_t v28 = StringProtocol.replacingOccurrences<A, B>(of:with:options:range:)(&v67, &v66, 1, 0, 0, 1, &type metadata for String, &type metadata for String, &type metadata for String, v6, v6, v6);
    uint64_t v30 = v29;
    swift_bridgeObjectRelease(v60);
    uint64_t v68 = v28;
    uint64_t v61 = v30;
    uint64_t v69 = v30;
    if (one-time initialization token for error != -1) {
      swift_once(&one-time initialization token for error, one-time initialization function for error);
    }
    uint64_t v67 = static ErrorString.error;
    uint64_t v66 = xmmword_3ABF40;
    uint64_t v31 = StringProtocol.replacingOccurrences<A, B>(of:with:options:range:)(&v67, &v66, 0, 0, 0, 1, &type metadata for String, &type metadata for String, &type metadata for String, v6, v6, v6);
    uint64_t v33 = v32;
    swift_bridgeObjectRelease(v61);
    uint64_t v68 = v31;
    uint64_t v62 = v33;
    uint64_t v69 = v33;
    if (one-time initialization token for archive != -1) {
      swift_once(&one-time initialization token for archive, one-time initialization function for archive);
    }
    uint64_t v67 = static ErrorString.archive;
    uint64_t v66 = xmmword_3ABF60;
    uint64_t v34 = StringProtocol.replacingOccurrences<A, B>(of:with:options:range:)(&v67, &v66, 0, 0, 0, 1, &type metadata for String, &type metadata for String, &type metadata for String, v6, v6, v6);
    uint64_t v36 = v35;
    swift_bridgeObjectRelease(v62);
    uint64_t v68 = v34;
    unsigned __int8 v63 = v36;
    uint64_t v69 = v36;
    if (one-time initialization token for limit != -1) {
      swift_once(&one-time initialization token for limit, one-time initialization function for limit);
    }
    uint64_t v67 = static ErrorString.limit;
    uint64_t v66 = xmmword_3ABF80;
    uint64_t v37 = StringProtocol.replacingOccurrences<A, B>(of:with:options:range:)(&v67, &v66, 0, 0, 0, 1, &type metadata for String, &type metadata for String, &type metadata for String, v6, v6, v6);
    uint64_t v39 = v38;
    swift_bridgeObjectRelease(v63);
    uint64_t v68 = v37;
    long long v64 = v39;
    uint64_t v69 = v39;
    if (one-time initialization token for supportedStackTypes != -1) {
      swift_once(&one-time initialization token for supportedStackTypes, one-time initialization function for supportedStackTypes);
    }
    uint64_t v67 = static ErrorString.supportedStackTypes;
    uint64_t v66 = xmmword_3ABFA0;
    uint64_t v40 = StringProtocol.replacingOccurrences<A, B>(of:with:options:range:)(&v67, &v66, 0, 0, 0, 1, &type metadata for String, &type metadata for String, &type metadata for String, v6, v6, v6);
    uint64_t v42 = v41;
    swift_bridgeObjectRelease(v64);
    uint64_t v68 = v40;
    uint64_t v69 = v42;
    if (one-time initialization token for sortTypes != -1) {
      swift_once(&one-time initialization token for sortTypes, one-time initialization function for sortTypes);
    }
    uint64_t v67 = static ErrorString.sortTypes;
    uint64_t v66 = xmmword_3ABFC0;
    uint64_t v43 = StringProtocol.replacingOccurrences<A, B>(of:with:options:range:)(&v67, &v66, 0, 0, 0, 1, &type metadata for String, &type metadata for String, &type metadata for String, v6, v6, v6);
    long long v65 = v44;
    swift_bridgeObjectRelease(v42);
    type metadata accessor for OS_os_log();
    uint64_t v45 = (void *)static OS_os_log.default.getter(0);
    uint64_t v53 = static os_log_type_t.error.getter(0, &v66);
    uint64_t v46 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<CVarArg>);
    uint64_t v47 = (void *)swift_allocObject(v46, 72, 7);
    v47[2] = 1;
    v47[3] = 2;
    v47[7] = &type metadata for String;
    v47[8] = lazy protocol witness table accessor for type String and conformance String();
    v47[4] = v43;
    v47[5] = v65;
    swift_bridgeObjectRetain(v65);
    os_log(_:dso:log:type:_:)("%@ \n", 4, 2, &dword_0, v45, v53, v47);

    swift_bridgeObjectRelease(v47);
    uint64_t v48 = lazy protocol witness table accessor for type MLCreateError and conformance MLCreateError();
    swift_allocError(&type metadata for MLCreateError, v48, 0, 0);
    *(void *)uint64_t v49 = v43;
    *(void *)(v49 + 8) = v65;
    *(_OWORD *)(v49 + 16) = 0;
    *(_OWORD *)(v49 + 32) = 0;
    *(unsigned char *)(v49 + 48) = 0;
    swift_willThrow();
    tc_v1_release(v52);
    return v51;
  }
  return v2;
}

{
  return specialized handling<A, B, C>(_:_:_:)(a1, a2, (uint64_t (*)(uint64_t, uint64_t, uint64_t *))&tc_v1_sframe_head);
}

{
  return specialized handling<A, B, C>(_:_:_:)(a1, a2, (uint64_t (*)(uint64_t, uint64_t, uint64_t *))&tc_v1_sframe_tail);
}

{
  unsigned int v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  void *v45;
  uint64_t v46;
  void *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v54;
  char v55;
  unsigned __int8 v56;
  char v57;
  char v58;
  char v59;
  char v60;
  char v61;
  char v62;
  char v63;
  char v64;
  char v65;
  char v66;
  char v67;
  uint64_t v68;
  long long v69;
  long long v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;

  unint64_t v73 = 0;
  uint64_t v2 = tc_v1_plot_finished_streaming(a1, a2, &v73);
  uint64_t v3 = v73;
  if (v73)
  {
    uint64_t v4 = tc_v1_error_message(v73);
    if (!v4) {
      BUG();
    }
    uint64_t v54 = v3;
    uint64_t v55 = v2;
    uint64_t v71 = String.init(cString:)(v4);
    uint64_t v57 = v5;
    char v72 = v5;
    if (one-time initialization token for table != -1) {
      swift_once(&one-time initialization token for table, one-time initialization function for table);
    }
    uint64_t v70 = static ErrorString.table;
    uint64_t v69 = xmmword_3ABE40;
    uint64_t v6 = lazy protocol witness table accessor for type String and conformance String();
    uint64_t v7 = StringProtocol.replacingOccurrences<A, B>(of:with:options:range:)(&v70, &v69, 1, 0, 0, 1, &type metadata for String, &type metadata for String, &type metadata for String, v6, v6, v6);
    uint64_t v9 = v8;
    swift_bridgeObjectRelease(v57);
    uint64_t v71 = v7;
    uint64_t v58 = v9;
    char v72 = v9;
    if (one-time initialization token for column != -1) {
      swift_once(&one-time initialization token for column, one-time initialization function for column);
    }
    uint64_t v70 = static ErrorString.column;
    uint64_t v69 = xmmword_3ABE60;
    uint64_t v10 = StringProtocol.replacingOccurrences<A, B>(of:with:options:range:)(&v70, &v69, 1, 0, 0, 1, &type metadata for String, &type metadata for String, &type metadata for String, v6, v6, v6);
    uint64_t v12 = v11;
    swift_bridgeObjectRelease(v58);
    uint64_t v71 = v10;
    uint64_t v59 = v12;
    char v72 = v12;
    if (one-time initialization token for tableMap != -1) {
      swift_once(&one-time initialization token for tableMap, one-time initialization function for tableMap);
    }
    uint64_t v70 = static ErrorString.tableMap;
    uint64_t v69 = xmmword_3ABE80;
    uint64_t v13 = StringProtocol.replacingOccurrences<A, B>(of:with:options:range:)(&v70, &v69, 1, 0, 0, 1, &type metadata for String, &type metadata for String, &type metadata for String, v6, v6, v6);
    uint64_t v15 = v14;
    swift_bridgeObjectRelease(v59);
    uint64_t v71 = v13;
    uint64_t v60 = v15;
    char v72 = v15;
    if (one-time initialization token for columnMap != -1) {
      swift_once(&one-time initialization token for columnMap, one-time initialization function for columnMap);
    }
    uint64_t v70 = static ErrorString.columnMap;
    uint64_t v69 = xmmword_3ABEA0;
    uint64_t v16 = StringProtocol.replacingOccurrences<A, B>(of:with:options:range:)(&v70, &v69, 1, 0, 0, 1, &type metadata for String, &type metadata for String, &type metadata for String, v6, v6, v6);
    uint64_t v18 = v17;
    swift_bridgeObjectRelease(v60);
    uint64_t v71 = v16;
    uint64_t v61 = v18;
    char v72 = v18;
    if (one-time initialization token for drop != -1) {
      swift_once(&one-time initialization token for drop, one-time initialization function for drop);
    }
    uint64_t v70 = static ErrorString.drop;
    uint64_t v69 = xmmword_3ABEC0;
    uint64_t v19 = StringProtocol.replacingOccurrences<A, B>(of:with:options:range:)(&v70, &v69, 1, 0, 0, 1, &type metadata for String, &type metadata for String, &type metadata for String, v6, v6, v6);
    uint64_t v21 = v20;
    swift_bridgeObjectRelease(v61);
    uint64_t v71 = v19;
    uint64_t v62 = v21;
    char v72 = v21;
    if (one-time initialization token for sequence != -1) {
      swift_once(&one-time initialization token for sequence, one-time initialization function for sequence);
    }
    uint64_t v70 = static ErrorString.sequence;
    uint64_t v69 = xmmword_3ABEE0;
    uint64_t v22 = StringProtocol.replacingOccurrences<A, B>(of:with:options:range:)(&v70, &v69, 1, 0, 0, 1, &type metadata for String, &type metadata for String, &type metadata for String, v6, v6, v6);
    uint64_t v24 = v23;
    swift_bridgeObjectRelease(v62);
    uint64_t v71 = v22;
    char v72 = v24;
    if (one-time initialization token for double != -1) {
      swift_once(&one-time initialization token for double, one-time initialization function for double);
    }
    uint64_t v70 = static ErrorString.double;
    uint64_t v69 = xmmword_3ABF00;
    uint64_t v25 = StringProtocol.replacingOccurrences<A, B>(of:with:options:range:)(&v70, &v69, 1, 0, 0, 1, &type metadata for String, &type metadata for String, &type metadata for String, v6, v6, v6);
    uint64_t v27 = v26;
    swift_bridgeObjectRelease(v24);
    uint64_t v71 = v25;
    unsigned __int8 v63 = v27;
    char v72 = v27;
    if (one-time initialization token for integer != -1) {
      swift_once(&one-time initialization token for integer, one-time initialization function for integer);
    }
    uint64_t v70 = static ErrorString.integer;
    uint64_t v69 = xmmword_3ABF20;
    uint64_t v28 = StringProtocol.replacingOccurrences<A, B>(of:with:options:range:)(&v70, &v69, 1, 0, 0, 1, &type metadata for String, &type metadata for String, &type metadata for String, v6, v6, v6);
    uint64_t v30 = v29;
    swift_bridgeObjectRelease(v63);
    uint64_t v71 = v28;
    long long v64 = v30;
    char v72 = v30;
    if (one-time initialization token for error != -1) {
      swift_once(&one-time initialization token for error, one-time initialization function for error);
    }
    uint64_t v70 = static ErrorString.error;
    uint64_t v69 = xmmword_3ABF40;
    uint64_t v31 = StringProtocol.replacingOccurrences<A, B>(of:with:options:range:)(&v70, &v69, 0, 0, 0, 1, &type metadata for String, &type metadata for String, &type metadata for String, v6, v6, v6);
    uint64_t v33 = v32;
    swift_bridgeObjectRelease(v64);
    uint64_t v71 = v31;
    long long v65 = v33;
    char v72 = v33;
    if (one-time initialization token for archive != -1) {
      swift_once(&one-time initialization token for archive, one-time initialization function for archive);
    }
    uint64_t v70 = static ErrorString.archive;
    uint64_t v69 = xmmword_3ABF60;
    uint64_t v34 = StringProtocol.replacingOccurrences<A, B>(of:with:options:range:)(&v70, &v69, 0, 0, 0, 1, &type metadata for String, &type metadata for String, &type metadata for String, v6, v6, v6);
    uint64_t v36 = v35;
    swift_bridgeObjectRelease(v65);
    uint64_t v71 = v34;
    uint64_t v66 = v36;
    char v72 = v36;
    if (one-time initialization token for limit != -1) {
      swift_once(&one-time initialization token for limit, one-time initialization function for limit);
    }
    uint64_t v70 = static ErrorString.limit;
    uint64_t v69 = xmmword_3ABF80;
    uint64_t v37 = StringProtocol.replacingOccurrences<A, B>(of:with:options:range:)(&v70, &v69, 0, 0, 0, 1, &type metadata for String, &type metadata for String, &type metadata for String, v6, v6, v6);
    uint64_t v39 = v38;
    swift_bridgeObjectRelease(v66);
    uint64_t v71 = v37;
    uint64_t v67 = v39;
    char v72 = v39;
    if (one-time initialization token for supportedStackTypes != -1) {
      swift_once(&one-time initialization token for supportedStackTypes, one-time initialization function for supportedStackTypes);
    }
    uint64_t v70 = static ErrorString.supportedStackTypes;
    uint64_t v69 = xmmword_3ABFA0;
    uint64_t v40 = StringProtocol.replacingOccurrences<A, B>(of:with:options:range:)(&v70, &v69, 0, 0, 0, 1, &type metadata for String, &type metadata for String, &type metadata for String, v6, v6, v6);
    uint64_t v42 = v41;
    swift_bridgeObjectRelease(v67);
    uint64_t v71 = v40;
    char v72 = v42;
    if (one-time initialization token for sortTypes != -1) {
      swift_once(&one-time initialization token for sortTypes, one-time initialization function for sortTypes);
    }
    uint64_t v70 = static ErrorString.sortTypes;
    uint64_t v69 = xmmword_3ABFC0;
    uint64_t v43 = StringProtocol.replacingOccurrences<A, B>(of:with:options:range:)(&v70, &v69, 0, 0, 0, 1, &type metadata for String, &type metadata for String, &type metadata for String, v6, v6, v6);
    uint64_t v68 = v44;
    swift_bridgeObjectRelease(v42);
    type metadata accessor for OS_os_log();
    uint64_t v45 = (void *)static OS_os_log.default.getter(0);
    uint64_t v56 = static os_log_type_t.error.getter(0, &v69);
    uint64_t v46 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<CVarArg>);
    uint64_t v47 = (void *)swift_allocObject(v46, 72, 7);
    v47[2] = 1;
    v47[3] = 2;
    v47[7] = &type metadata for String;
    v47[8] = lazy protocol witness table accessor for type String and conformance String();
    v47[4] = v43;
    v47[5] = v68;
    uint64_t v2 = v68;
    swift_bridgeObjectRetain(v68);
    os_log(_:dso:log:type:_:)("%@ \n", 4, 2, &dword_0, v45, v56, v47);

    swift_bridgeObjectRelease((_BYTE)v47);
    uint64_t v48 = lazy protocol witness table accessor for type MLCreateError and conformance MLCreateError();
    swift_allocError(&type metadata for MLCreateError, v48, 0, 0);
    *(void *)uint64_t v49 = v43;
    *(void *)(v49 + 8) = v68;
    *(_OWORD *)(v49 + 16) = 0;
    *(_OWORD *)(v49 + 32) = 0;
    *(unsigned char *)(v49 + 48) = 0;
    swift_willThrow(&type metadata for MLCreateError, v48, v49, v50, v51, v52);
    tc_v1_release(v54);
    LOBYTE(v2) = v55;
  }
  return v2;
}

uint64_t specialized handling<A, B, C>(_:_:_:)(uint64_t a1, uint64_t a2, uint64_t (*a3)(uint64_t, uint64_t, uint64_t *))
{
  uint64_t v72 = 0;
  uint64_t v3 = a3(a1, a2, &v72);
  uint64_t v4 = v72;
  if (v72)
  {
    uint64_t v5 = tc_v1_error_message(v72);
    if (!v5) {
      BUG();
    }
    uint64_t v54 = v4;
    uint64_t v53 = v3;
    uint64_t v70 = String.init(cString:)(v5);
    uint64_t v55 = v6;
    uint64_t v71 = v6;
    if (one-time initialization token for table != -1) {
      swift_once(&one-time initialization token for table, one-time initialization function for table);
    }
    long long v69 = static ErrorString.table;
    long long v68 = xmmword_3ABE40;
    uint64_t v7 = lazy protocol witness table accessor for type String and conformance String();
    uint64_t v8 = StringProtocol.replacingOccurrences<A, B>(of:with:options:range:)(&v69, &v68, 1, 0, 0, 1, &type metadata for String, &type metadata for String, &type metadata for String, v7, v7, v7);
    uint64_t v10 = v9;
    swift_bridgeObjectRelease(v55);
    uint64_t v70 = v8;
    uint64_t v56 = v10;
    uint64_t v71 = v10;
    if (one-time initialization token for column != -1) {
      swift_once(&one-time initialization token for column, one-time initialization function for column);
    }
    long long v69 = static ErrorString.column;
    long long v68 = xmmword_3ABE60;
    uint64_t v11 = StringProtocol.replacingOccurrences<A, B>(of:with:options:range:)(&v69, &v68, 1, 0, 0, 1, &type metadata for String, &type metadata for String, &type metadata for String, v7, v7, v7);
    uint64_t v13 = v12;
    swift_bridgeObjectRelease(v56);
    uint64_t v70 = v11;
    uint64_t v57 = v13;
    uint64_t v71 = v13;
    if (one-time initialization token for tableMap != -1) {
      swift_once(&one-time initialization token for tableMap, one-time initialization function for tableMap);
    }
    long long v69 = static ErrorString.tableMap;
    long long v68 = xmmword_3ABE80;
    uint64_t v14 = StringProtocol.replacingOccurrences<A, B>(of:with:options:range:)(&v69, &v68, 1, 0, 0, 1, &type metadata for String, &type metadata for String, &type metadata for String, v7, v7, v7);
    uint64_t v16 = v15;
    swift_bridgeObjectRelease(v57);
    uint64_t v70 = v14;
    uint64_t v58 = v16;
    uint64_t v71 = v16;
    if (one-time initialization token for columnMap != -1) {
      swift_once(&one-time initialization token for columnMap, one-time initialization function for columnMap);
    }
    long long v69 = static ErrorString.columnMap;
    long long v68 = xmmword_3ABEA0;
    uint64_t v17 = StringProtocol.replacingOccurrences<A, B>(of:with:options:range:)(&v69, &v68, 1, 0, 0, 1, &type metadata for String, &type metadata for String, &type metadata for String, v7, v7, v7);
    uint64_t v19 = v18;
    swift_bridgeObjectRelease(v58);
    uint64_t v70 = v17;
    uint64_t v59 = v19;
    uint64_t v71 = v19;
    if (one-time initialization token for drop != -1) {
      swift_once(&one-time initialization token for drop, one-time initialization function for drop);
    }
    long long v69 = static ErrorString.drop;
    long long v68 = xmmword_3ABEC0;
    uint64_t v20 = StringProtocol.replacingOccurrences<A, B>(of:with:options:range:)(&v69, &v68, 1, 0, 0, 1, &type metadata for String, &type metadata for String, &type metadata for String, v7, v7, v7);
    uint64_t v22 = v21;
    swift_bridgeObjectRelease(v59);
    uint64_t v70 = v20;
    uint64_t v60 = v22;
    uint64_t v71 = v22;
    if (one-time initialization token for sequence != -1) {
      swift_once(&one-time initialization token for sequence, one-time initialization function for sequence);
    }
    long long v69 = static ErrorString.sequence;
    long long v68 = xmmword_3ABEE0;
    uint64_t v23 = StringProtocol.replacingOccurrences<A, B>(of:with:options:range:)(&v69, &v68, 1, 0, 0, 1, &type metadata for String, &type metadata for String, &type metadata for String, v7, v7, v7);
    uint64_t v25 = v24;
    swift_bridgeObjectRelease(v60);
    uint64_t v70 = v23;
    uint64_t v71 = v25;
    if (one-time initialization token for double != -1) {
      swift_once(&one-time initialization token for double, one-time initialization function for double);
    }
    long long v69 = static ErrorString.double;
    long long v68 = xmmword_3ABF00;
    uint64_t v26 = StringProtocol.replacingOccurrences<A, B>(of:with:options:range:)(&v69, &v68, 1, 0, 0, 1, &type metadata for String, &type metadata for String, &type metadata for String, v7, v7, v7);
    uint64_t v28 = v27;
    swift_bridgeObjectRelease(v25);
    uint64_t v70 = v26;
    uint64_t v61 = v28;
    uint64_t v71 = v28;
    if (one-time initialization token for integer != -1) {
      swift_once(&one-time initialization token for integer, one-time initialization function for integer);
    }
    long long v69 = static ErrorString.integer;
    long long v68 = xmmword_3ABF20;
    uint64_t v29 = StringProtocol.replacingOccurrences<A, B>(of:with:options:range:)(&v69, &v68, 1, 0, 0, 1, &type metadata for String, &type metadata for String, &type metadata for String, v7, v7, v7);
    uint64_t v31 = v30;
    swift_bridgeObjectRelease(v61);
    uint64_t v70 = v29;
    uint64_t v62 = v31;
    uint64_t v71 = v31;
    if (one-time initialization token for error != -1) {
      swift_once(&one-time initialization token for error, one-time initialization function for error);
    }
    long long v69 = static ErrorString.error;
    long long v68 = xmmword_3ABF40;
    uint64_t v32 = StringProtocol.replacingOccurrences<A, B>(of:with:options:range:)(&v69, &v68, 0, 0, 0, 1, &type metadata for String, &type metadata for String, &type metadata for String, v7, v7, v7);
    uint64_t v34 = v33;
    swift_bridgeObjectRelease(v62);
    uint64_t v70 = v32;
    uint64_t v63 = v34;
    uint64_t v71 = v34;
    if (one-time initialization token for archive != -1) {
      swift_once(&one-time initialization token for archive, one-time initialization function for archive);
    }
    long long v69 = static ErrorString.archive;
    long long v68 = xmmword_3ABF60;
    uint64_t v35 = StringProtocol.replacingOccurrences<A, B>(of:with:options:range:)(&v69, &v68, 0, 0, 0, 1, &type metadata for String, &type metadata for String, &type metadata for String, v7, v7, v7);
    uint64_t v37 = v36;
    swift_bridgeObjectRelease(v63);
    uint64_t v70 = v35;
    uint64_t v64 = v37;
    uint64_t v71 = v37;
    if (one-time initialization token for limit != -1) {
      swift_once(&one-time initialization token for limit, one-time initialization function for limit);
    }
    long long v69 = static ErrorString.limit;
    long long v68 = xmmword_3ABF80;
    uint64_t v38 = StringProtocol.replacingOccurrences<A, B>(of:with:options:range:)(&v69, &v68, 0, 0, 0, 1, &type metadata for String, &type metadata for String, &type metadata for String, v7, v7, v7);
    uint64_t v40 = v39;
    swift_bridgeObjectRelease(v64);
    uint64_t v70 = v38;
    uint64_t v65 = v40;
    uint64_t v71 = v40;
    if (one-time initialization token for supportedStackTypes != -1) {
      swift_once(&one-time initialization token for supportedStackTypes, one-time initialization function for supportedStackTypes);
    }
    long long v69 = static ErrorString.supportedStackTypes;
    long long v68 = xmmword_3ABFA0;
    uint64_t v41 = StringProtocol.replacingOccurrences<A, B>(of:with:options:range:)(&v69, &v68, 0, 0, 0, 1, &type metadata for String, &type metadata for String, &type metadata for String, v7, v7, v7);
    uint64_t v43 = v42;
    swift_bridgeObjectRelease(v65);
    uint64_t v70 = v41;
    uint64_t v66 = v43;
    uint64_t v71 = v43;
    if (one-time initialization token for sortTypes != -1) {
      swift_once(&one-time initialization token for sortTypes, one-time initialization function for sortTypes);
    }
    long long v69 = static ErrorString.sortTypes;
    long long v68 = xmmword_3ABFC0;
    uint64_t v44 = StringProtocol.replacingOccurrences<A, B>(of:with:options:range:)(&v69, &v68, 0, 0, 0, 1, &type metadata for String, &type metadata for String, &type metadata for String, v7, v7, v7);
    uint64_t v46 = v45;
    swift_bridgeObjectRelease(v66);
    type metadata accessor for OS_os_log();
    swift_bridgeObjectRetain(v46);
    uint64_t v47 = (void *)static OS_os_log.default.getter();
    unsigned __int8 v67 = static os_log_type_t.error.getter();
    uint64_t v48 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<CVarArg>);
    uint64_t v49 = (void *)swift_allocObject(v48, 72, 7);
    _OWORD v49[2] = 1;
    v49[3] = 2;
    v49[7] = &type metadata for String;
    v49[8] = lazy protocol witness table accessor for type String and conformance String();
    v49[4] = v44;
    v49[5] = v46;
    os_log(_:dso:log:type:_:)("%@ \n", 4, 2, &dword_0, v47, v67, v49);

    swift_bridgeObjectRelease(v49);
    uint64_t v50 = lazy protocol witness table accessor for type MLCreateError and conformance MLCreateError();
    swift_allocError(&type metadata for MLCreateError, v50, 0, 0);
    *(void *)uint64_t v51 = v44;
    *(void *)(v51 + 8) = v46;
    *(_OWORD *)(v51 + 16) = 0;
    *(_OWORD *)(v51 + 32) = 0;
    *(unsigned char *)(v51 + 48) = 0;
    swift_willThrow();
    tc_v1_release(v54);
    return v53;
  }
  return v3;
}

{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  void *v46;
  uint64_t v47;
  void *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v52;
  uint64_t v53;
  unsigned __int8 v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  long long v67;
  long long v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;

  uint64_t v71 = 0;
  uint64_t v3 = a3(a1, a2, &v71);
  uint64_t v4 = v71;
  if (v71)
  {
    uint64_t v5 = tc_v1_error_message(v71);
    if (!v5) {
      BUG();
    }
    uint64_t v53 = v4;
    uint64_t v52 = v3;
    long long v69 = String.init(cString:)(v5);
    uint64_t v55 = v6;
    uint64_t v70 = v6;
    if (one-time initialization token for table != -1) {
      swift_once(&one-time initialization token for table, one-time initialization function for table);
    }
    long long v68 = static ErrorString.table;
    unsigned __int8 v67 = xmmword_3ABE40;
    uint64_t v7 = lazy protocol witness table accessor for type String and conformance String();
    uint64_t v8 = StringProtocol.replacingOccurrences<A, B>(of:with:options:range:)(&v68, &v67, 1, 0, 0, 1, &type metadata for String, &type metadata for String, &type metadata for String, v7, v7, v7);
    uint64_t v10 = v9;
    swift_bridgeObjectRelease(v55);
    long long v69 = v8;
    uint64_t v56 = v10;
    uint64_t v70 = v10;
    if (one-time initialization token for column != -1) {
      swift_once(&one-time initialization token for column, one-time initialization function for column);
    }
    long long v68 = static ErrorString.column;
    unsigned __int8 v67 = xmmword_3ABE60;
    uint64_t v11 = StringProtocol.replacingOccurrences<A, B>(of:with:options:range:)(&v68, &v67, 1, 0, 0, 1, &type metadata for String, &type metadata for String, &type metadata for String, v7, v7, v7);
    uint64_t v13 = v12;
    swift_bridgeObjectRelease(v56);
    long long v69 = v11;
    uint64_t v57 = v13;
    uint64_t v70 = v13;
    if (one-time initialization token for tableMap != -1) {
      swift_once(&one-time initialization token for tableMap, one-time initialization function for tableMap);
    }
    long long v68 = static ErrorString.tableMap;
    unsigned __int8 v67 = xmmword_3ABE80;
    uint64_t v14 = StringProtocol.replacingOccurrences<A, B>(of:with:options:range:)(&v68, &v67, 1, 0, 0, 1, &type metadata for String, &type metadata for String, &type metadata for String, v7, v7, v7);
    uint64_t v16 = v15;
    swift_bridgeObjectRelease(v57);
    long long v69 = v14;
    uint64_t v58 = v16;
    uint64_t v70 = v16;
    if (one-time initialization token for columnMap != -1) {
      swift_once(&one-time initialization token for columnMap, one-time initialization function for columnMap);
    }
    long long v68 = static ErrorString.columnMap;
    unsigned __int8 v67 = xmmword_3ABEA0;
    uint64_t v17 = StringProtocol.replacingOccurrences<A, B>(of:with:options:range:)(&v68, &v67, 1, 0, 0, 1, &type metadata for String, &type metadata for String, &type metadata for String, v7, v7, v7);
    uint64_t v19 = v18;
    swift_bridgeObjectRelease(v58);
    long long v69 = v17;
    uint64_t v59 = v19;
    uint64_t v70 = v19;
    if (one-time initialization token for drop != -1) {
      swift_once(&one-time initialization token for drop, one-time initialization function for drop);
    }
    long long v68 = static ErrorString.drop;
    unsigned __int8 v67 = xmmword_3ABEC0;
    uint64_t v20 = StringProtocol.replacingOccurrences<A, B>(of:with:options:range:)(&v68, &v67, 1, 0, 0, 1, &type metadata for String, &type metadata for String, &type metadata for String, v7, v7, v7);
    uint64_t v22 = v21;
    swift_bridgeObjectRelease(v59);
    long long v69 = v20;
    uint64_t v60 = v22;
    uint64_t v70 = v22;
    if (one-time initialization token for sequence != -1) {
      swift_once(&one-time initialization token for sequence, one-time initialization function for sequence);
    }
    long long v68 = static ErrorString.sequence;
    unsigned __int8 v67 = xmmword_3ABEE0;
    uint64_t v23 = StringProtocol.replacingOccurrences<A, B>(of:with:options:range:)(&v68, &v67, 1, 0, 0, 1, &type metadata for String, &type metadata for String, &type metadata for String, v7, v7, v7);
    uint64_t v25 = v24;
    swift_bridgeObjectRelease(v60);
    long long v69 = v23;
    uint64_t v70 = v25;
    if (one-time initialization token for double != -1) {
      swift_once(&one-time initialization token for double, one-time initialization function for double);
    }
    long long v68 = static ErrorString.double;
    unsigned __int8 v67 = xmmword_3ABF00;
    uint64_t v26 = StringProtocol.replacingOccurrences<A, B>(of:with:options:range:)(&v68, &v67, 1, 0, 0, 1, &type metadata for String, &type metadata for String, &type metadata for String, v7, v7, v7);
    uint64_t v28 = v27;
    swift_bridgeObjectRelease(v25);
    long long v69 = v26;
    uint64_t v61 = v28;
    uint64_t v70 = v28;
    if (one-time initialization token for integer != -1) {
      swift_once(&one-time initialization token for integer, one-time initialization function for integer);
    }
    long long v68 = static ErrorString.integer;
    unsigned __int8 v67 = xmmword_3ABF20;
    uint64_t v29 = StringProtocol.replacingOccurrences<A, B>(of:with:options:range:)(&v68, &v67, 1, 0, 0, 1, &type metadata for String, &type metadata for String, &type metadata for String, v7, v7, v7);
    uint64_t v31 = v30;
    swift_bridgeObjectRelease(v61);
    long long v69 = v29;
    uint64_t v62 = v31;
    uint64_t v70 = v31;
    if (one-time initialization token for error != -1) {
      swift_once(&one-time initialization token for error, one-time initialization function for error);
    }
    long long v68 = static ErrorString.error;
    unsigned __int8 v67 = xmmword_3ABF40;
    uint64_t v32 = StringProtocol.replacingOccurrences<A, B>(of:with:options:range:)(&v68, &v67, 0, 0, 0, 1, &type metadata for String, &type metadata for String, &type metadata for String, v7, v7, v7);
    uint64_t v34 = v33;
    swift_bridgeObjectRelease(v62);
    long long v69 = v32;
    uint64_t v63 = v34;
    uint64_t v70 = v34;
    if (one-time initialization token for archive != -1) {
      swift_once(&one-time initialization token for archive, one-time initialization function for archive);
    }
    long long v68 = static ErrorString.archive;
    unsigned __int8 v67 = xmmword_3ABF60;
    uint64_t v35 = StringProtocol.replacingOccurrences<A, B>(of:with:options:range:)(&v68, &v67, 0, 0, 0, 1, &type metadata for String, &type metadata for String, &type metadata for String, v7, v7, v7);
    uint64_t v37 = v36;
    swift_bridgeObjectRelease(v63);
    long long v69 = v35;
    uint64_t v64 = v37;
    uint64_t v70 = v37;
    if (one-time initialization token for limit != -1) {
      swift_once(&one-time initialization token for limit, one-time initialization function for limit);
    }
    long long v68 = static ErrorString.limit;
    unsigned __int8 v67 = xmmword_3ABF80;
    uint64_t v38 = StringProtocol.replacingOccurrences<A, B>(of:with:options:range:)(&v68, &v67, 0, 0, 0, 1, &type metadata for String, &type metadata for String, &type metadata for String, v7, v7, v7);
    uint64_t v40 = v39;
    swift_bridgeObjectRelease(v64);
    long long v69 = v38;
    uint64_t v65 = v40;
    uint64_t v70 = v40;
    if (one-time initialization token for supportedStackTypes != -1) {
      swift_once(&one-time initialization token for supportedStackTypes, one-time initialization function for supportedStackTypes);
    }
    long long v68 = static ErrorString.supportedStackTypes;
    unsigned __int8 v67 = xmmword_3ABFA0;
    uint64_t v41 = StringProtocol.replacingOccurrences<A, B>(of:with:options:range:)(&v68, &v67, 0, 0, 0, 1, &type metadata for String, &type metadata for String, &type metadata for String, v7, v7, v7);
    uint64_t v43 = v42;
    swift_bridgeObjectRelease(v65);
    long long v69 = v41;
    uint64_t v70 = v43;
    if (one-time initialization token for sortTypes != -1) {
      swift_once(&one-time initialization token for sortTypes, one-time initialization function for sortTypes);
    }
    long long v68 = static ErrorString.sortTypes;
    unsigned __int8 v67 = xmmword_3ABFC0;
    uint64_t v44 = StringProtocol.replacingOccurrences<A, B>(of:with:options:range:)(&v68, &v67, 0, 0, 0, 1, &type metadata for String, &type metadata for String, &type metadata for String, v7, v7, v7);
    uint64_t v66 = v45;
    swift_bridgeObjectRelease(v43);
    type metadata accessor for OS_os_log();
    uint64_t v46 = (void *)static OS_os_log.default.getter(0);
    uint64_t v54 = static os_log_type_t.error.getter();
    uint64_t v47 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<CVarArg>);
    uint64_t v48 = (void *)swift_allocObject(v47, 72, 7);
    v48[2] = 1;
    v48[3] = 2;
    v48[7] = &type metadata for String;
    v48[8] = lazy protocol witness table accessor for type String and conformance String();
    v48[4] = v44;
    v48[5] = v66;
    swift_bridgeObjectRetain(v66);
    os_log(_:dso:log:type:_:)("%@ \n", 4, 2, &dword_0, v46, v54, v48);

    swift_bridgeObjectRelease(v48);
    uint64_t v49 = lazy protocol witness table accessor for type MLCreateError and conformance MLCreateError();
    swift_allocError(&type metadata for MLCreateError, v49, 0, 0);
    *(void *)uint64_t v50 = v44;
    *(void *)(v50 + 8) = v66;
    *(_OWORD *)(v50 + 16) = 0;
    *(_OWORD *)(v50 + 32) = 0;
    *(unsigned char *)(v50 + 48) = 0;
    swift_willThrow();
    tc_v1_release(v53);
    return v52;
  }
  return v3;
}

{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  void *v46;
  uint64_t v47;
  void *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v55;
  uint64_t v56;
  unsigned __int8 v57;
  char v58;
  char v59;
  char v60;
  char v61;
  char v62;
  char v63;
  char v64;
  char v65;
  char v66;
  char v67;
  char v68;
  uint64_t v69;
  long long v70;
  long long v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;

  char v74 = 0;
  uint64_t v3 = a3(a1, a2, &v74);
  uint64_t v4 = v74;
  if (v74)
  {
    uint64_t v5 = tc_v1_error_message(v74);
    if (!v5) {
      BUG();
    }
    uint64_t v56 = v4;
    uint64_t v55 = v3;
    uint64_t v72 = String.init(cString:)(v5);
    uint64_t v58 = v6;
    unint64_t v73 = v6;
    if (one-time initialization token for table != -1) {
      swift_once(&one-time initialization token for table, one-time initialization function for table);
    }
    uint64_t v71 = static ErrorString.table;
    uint64_t v70 = xmmword_3ABE40;
    uint64_t v7 = lazy protocol witness table accessor for type String and conformance String();
    uint64_t v8 = StringProtocol.replacingOccurrences<A, B>(of:with:options:range:)(&v71, &v70, 1, 0, 0, 1, &type metadata for String, &type metadata for String, &type metadata for String, v7, v7, v7);
    uint64_t v10 = v9;
    swift_bridgeObjectRelease(v58);
    uint64_t v72 = v8;
    uint64_t v59 = v10;
    unint64_t v73 = v10;
    if (one-time initialization token for column != -1) {
      swift_once(&one-time initialization token for column, one-time initialization function for column);
    }
    uint64_t v71 = static ErrorString.column;
    uint64_t v70 = xmmword_3ABE60;
    uint64_t v11 = StringProtocol.replacingOccurrences<A, B>(of:with:options:range:)(&v71, &v70, 1, 0, 0, 1, &type metadata for String, &type metadata for String, &type metadata for String, v7, v7, v7);
    uint64_t v13 = v12;
    swift_bridgeObjectRelease(v59);
    uint64_t v72 = v11;
    uint64_t v60 = v13;
    unint64_t v73 = v13;
    if (one-time initialization token for tableMap != -1) {
      swift_once(&one-time initialization token for tableMap, one-time initialization function for tableMap);
    }
    uint64_t v71 = static ErrorString.tableMap;
    uint64_t v70 = xmmword_3ABE80;
    uint64_t v14 = StringProtocol.replacingOccurrences<A, B>(of:with:options:range:)(&v71, &v70, 1, 0, 0, 1, &type metadata for String, &type metadata for String, &type metadata for String, v7, v7, v7);
    uint64_t v16 = v15;
    swift_bridgeObjectRelease(v60);
    uint64_t v72 = v14;
    uint64_t v61 = v16;
    unint64_t v73 = v16;
    if (one-time initialization token for columnMap != -1) {
      swift_once(&one-time initialization token for columnMap, one-time initialization function for columnMap);
    }
    uint64_t v71 = static ErrorString.columnMap;
    uint64_t v70 = xmmword_3ABEA0;
    uint64_t v17 = StringProtocol.replacingOccurrences<A, B>(of:with:options:range:)(&v71, &v70, 1, 0, 0, 1, &type metadata for String, &type metadata for String, &type metadata for String, v7, v7, v7);
    uint64_t v19 = v18;
    swift_bridgeObjectRelease(v61);
    uint64_t v72 = v17;
    uint64_t v62 = v19;
    unint64_t v73 = v19;
    if (one-time initialization token for drop != -1) {
      swift_once(&one-time initialization token for drop, one-time initialization function for drop);
    }
    uint64_t v71 = static ErrorString.drop;
    uint64_t v70 = xmmword_3ABEC0;
    uint64_t v20 = StringProtocol.replacingOccurrences<A, B>(of:with:options:range:)(&v71, &v70, 1, 0, 0, 1, &type metadata for String, &type metadata for String, &type metadata for String, v7, v7, v7);
    uint64_t v22 = v21;
    swift_bridgeObjectRelease(v62);
    uint64_t v72 = v20;
    uint64_t v63 = v22;
    unint64_t v73 = v22;
    if (one-time initialization token for sequence != -1) {
      swift_once(&one-time initialization token for sequence, one-time initialization function for sequence);
    }
    uint64_t v71 = static ErrorString.sequence;
    uint64_t v70 = xmmword_3ABEE0;
    uint64_t v23 = StringProtocol.replacingOccurrences<A, B>(of:with:options:range:)(&v71, &v70, 1, 0, 0, 1, &type metadata for String, &type metadata for String, &type metadata for String, v7, v7, v7);
    uint64_t v25 = v24;
    swift_bridgeObjectRelease(v63);
    uint64_t v72 = v23;
    unint64_t v73 = v25;
    if (one-time initialization token for double != -1) {
      swift_once(&one-time initialization token for double, one-time initialization function for double);
    }
    uint64_t v71 = static ErrorString.double;
    uint64_t v70 = xmmword_3ABF00;
    uint64_t v26 = StringProtocol.replacingOccurrences<A, B>(of:with:options:range:)(&v71, &v70, 1, 0, 0, 1, &type metadata for String, &type metadata for String, &type metadata for String, v7, v7, v7);
    uint64_t v28 = v27;
    swift_bridgeObjectRelease(v25);
    uint64_t v72 = v26;
    uint64_t v64 = v28;
    unint64_t v73 = v28;
    if (one-time initialization token for integer != -1) {
      swift_once(&one-time initialization token for integer, one-time initialization function for integer);
    }
    uint64_t v71 = static ErrorString.integer;
    uint64_t v70 = xmmword_3ABF20;
    uint64_t v29 = StringProtocol.replacingOccurrences<A, B>(of:with:options:range:)(&v71, &v70, 1, 0, 0, 1, &type metadata for String, &type metadata for String, &type metadata for String, v7, v7, v7);
    uint64_t v31 = v30;
    swift_bridgeObjectRelease(v64);
    uint64_t v72 = v29;
    uint64_t v65 = v31;
    unint64_t v73 = v31;
    if (one-time initialization token for error != -1) {
      swift_once(&one-time initialization token for error, one-time initialization function for error);
    }
    uint64_t v71 = static ErrorString.error;
    uint64_t v70 = xmmword_3ABF40;
    uint64_t v32 = StringProtocol.replacingOccurrences<A, B>(of:with:options:range:)(&v71, &v70, 0, 0, 0, 1, &type metadata for String, &type metadata for String, &type metadata for String, v7, v7, v7);
    uint64_t v34 = v33;
    swift_bridgeObjectRelease(v65);
    uint64_t v72 = v32;
    uint64_t v66 = v34;
    unint64_t v73 = v34;
    if (one-time initialization token for archive != -1) {
      swift_once(&one-time initialization token for archive, one-time initialization function for archive);
    }
    uint64_t v71 = static ErrorString.archive;
    uint64_t v70 = xmmword_3ABF60;
    uint64_t v35 = StringProtocol.replacingOccurrences<A, B>(of:with:options:range:)(&v71, &v70, 0, 0, 0, 1, &type metadata for String, &type metadata for String, &type metadata for String, v7, v7, v7);
    uint64_t v37 = v36;
    swift_bridgeObjectRelease(v66);
    uint64_t v72 = v35;
    unsigned __int8 v67 = v37;
    unint64_t v73 = v37;
    if (one-time initialization token for limit != -1) {
      swift_once(&one-time initialization token for limit, one-time initialization function for limit);
    }
    uint64_t v71 = static ErrorString.limit;
    uint64_t v70 = xmmword_3ABF80;
    uint64_t v38 = StringProtocol.replacingOccurrences<A, B>(of:with:options:range:)(&v71, &v70, 0, 0, 0, 1, &type metadata for String, &type metadata for String, &type metadata for String, v7, v7, v7);
    uint64_t v40 = v39;
    swift_bridgeObjectRelease(v67);
    uint64_t v72 = v38;
    long long v68 = v40;
    unint64_t v73 = v40;
    if (one-time initialization token for supportedStackTypes != -1) {
      swift_once(&one-time initialization token for supportedStackTypes, one-time initialization function for supportedStackTypes);
    }
    uint64_t v71 = static ErrorString.supportedStackTypes;
    uint64_t v70 = xmmword_3ABFA0;
    uint64_t v41 = StringProtocol.replacingOccurrences<A, B>(of:with:options:range:)(&v71, &v70, 0, 0, 0, 1, &type metadata for String, &type metadata for String, &type metadata for String, v7, v7, v7);
    uint64_t v43 = v42;
    swift_bridgeObjectRelease(v68);
    uint64_t v72 = v41;
    unint64_t v73 = v43;
    if (one-time initialization token for sortTypes != -1) {
      swift_once(&one-time initialization token for sortTypes, one-time initialization function for sortTypes);
    }
    uint64_t v71 = static ErrorString.sortTypes;
    uint64_t v70 = xmmword_3ABFC0;
    uint64_t v44 = StringProtocol.replacingOccurrences<A, B>(of:with:options:range:)(&v71, &v70, 0, 0, 0, 1, &type metadata for String, &type metadata for String, &type metadata for String, v7, v7, v7);
    long long v69 = v45;
    swift_bridgeObjectRelease(v43);
    type metadata accessor for OS_os_log();
    uint64_t v46 = (void *)static OS_os_log.default.getter(0);
    uint64_t v57 = static os_log_type_t.error.getter(0, &v70);
    uint64_t v47 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<CVarArg>);
    uint64_t v48 = (void *)swift_allocObject(v47, 72, 7);
    v48[2] = 1;
    v48[3] = 2;
    v48[7] = &type metadata for String;
    v48[8] = lazy protocol witness table accessor for type String and conformance String();
    v48[4] = v44;
    v48[5] = v69;
    swift_bridgeObjectRetain(v69);
    os_log(_:dso:log:type:_:)("%@ \n", 4, 2, &dword_0, v46, v57, v48);

    swift_bridgeObjectRelease((_BYTE)v48);
    uint64_t v49 = lazy protocol witness table accessor for type MLCreateError and conformance MLCreateError();
    swift_allocError(&type metadata for MLCreateError, v49, 0, 0);
    *(void *)uint64_t v50 = v44;
    *(void *)(v50 + 8) = v69;
    *(_OWORD *)(v50 + 16) = 0;
    *(_OWORD *)(v50 + 32) = 0;
    *(unsigned char *)(v50 + 48) = 0;
    swift_willThrow(&type metadata for MLCreateError, v49, v50, v51, v52, v53);
    tc_v1_release(v56);
    return v55;
  }
  return v3;
}

uint64_t specialized handling<A, B, C>(_:_:_:)(uint64_t a1, char a2)
{
  uint64_t v73 = 0;
  uint64_t v2 = tc_v1_sarray_sort(a1, a2 & 1, &v73);
  uint64_t v3 = v73;
  if (v73)
  {
    uint64_t v4 = tc_v1_error_message(v73);
    if (!v4) {
      BUG();
    }
    uint64_t v55 = v3;
    uint64_t v54 = v2;
    uint64_t v71 = String.init(cString:)(v4);
    char v57 = v5;
    uint64_t v72 = v5;
    if (one-time initialization token for table != -1) {
      swift_once(&one-time initialization token for table, one-time initialization function for table);
    }
    long long v70 = static ErrorString.table;
    long long v69 = xmmword_3ABE40;
    uint64_t v6 = lazy protocol witness table accessor for type String and conformance String();
    uint64_t v7 = StringProtocol.replacingOccurrences<A, B>(of:with:options:range:)(&v70, &v69, 1, 0, 0, 1, &type metadata for String, &type metadata for String, &type metadata for String, v6, v6, v6);
    uint64_t v9 = v8;
    swift_bridgeObjectRelease(v57);
    uint64_t v71 = v7;
    char v58 = v9;
    uint64_t v72 = v9;
    if (one-time initialization token for column != -1) {
      swift_once(&one-time initialization token for column, one-time initialization function for column);
    }
    long long v70 = static ErrorString.column;
    long long v69 = xmmword_3ABE60;
    uint64_t v10 = StringProtocol.replacingOccurrences<A, B>(of:with:options:range:)(&v70, &v69, 1, 0, 0, 1, &type metadata for String, &type metadata for String, &type metadata for String, v6, v6, v6);
    uint64_t v12 = v11;
    swift_bridgeObjectRelease(v58);
    uint64_t v71 = v10;
    char v59 = v12;
    uint64_t v72 = v12;
    if (one-time initialization token for tableMap != -1) {
      swift_once(&one-time initialization token for tableMap, one-time initialization function for tableMap);
    }
    long long v70 = static ErrorString.tableMap;
    long long v69 = xmmword_3ABE80;
    uint64_t v13 = StringProtocol.replacingOccurrences<A, B>(of:with:options:range:)(&v70, &v69, 1, 0, 0, 1, &type metadata for String, &type metadata for String, &type metadata for String, v6, v6, v6);
    uint64_t v15 = v14;
    swift_bridgeObjectRelease(v59);
    uint64_t v71 = v13;
    char v60 = v15;
    uint64_t v72 = v15;
    if (one-time initialization token for columnMap != -1) {
      swift_once(&one-time initialization token for columnMap, one-time initialization function for columnMap);
    }
    long long v70 = static ErrorString.columnMap;
    long long v69 = xmmword_3ABEA0;
    uint64_t v16 = StringProtocol.replacingOccurrences<A, B>(of:with:options:range:)(&v70, &v69, 1, 0, 0, 1, &type metadata for String, &type metadata for String, &type metadata for String, v6, v6, v6);
    uint64_t v18 = v17;
    swift_bridgeObjectRelease(v60);
    uint64_t v71 = v16;
    char v61 = v18;
    uint64_t v72 = v18;
    if (one-time initialization token for drop != -1) {
      swift_once(&one-time initialization token for drop, one-time initialization function for drop);
    }
    long long v70 = static ErrorString.drop;
    long long v69 = xmmword_3ABEC0;
    uint64_t v19 = StringProtocol.replacingOccurrences<A, B>(of:with:options:range:)(&v70, &v69, 1, 0, 0, 1, &type metadata for String, &type metadata for String, &type metadata for String, v6, v6, v6);
    uint64_t v21 = v20;
    swift_bridgeObjectRelease(v61);
    uint64_t v71 = v19;
    char v62 = v21;
    uint64_t v72 = v21;
    if (one-time initialization token for sequence != -1) {
      swift_once(&one-time initialization token for sequence, one-time initialization function for sequence);
    }
    long long v70 = static ErrorString.sequence;
    long long v69 = xmmword_3ABEE0;
    uint64_t v22 = StringProtocol.replacingOccurrences<A, B>(of:with:options:range:)(&v70, &v69, 1, 0, 0, 1, &type metadata for String, &type metadata for String, &type metadata for String, v6, v6, v6);
    uint64_t v24 = v23;
    swift_bridgeObjectRelease(v62);
    uint64_t v71 = v22;
    uint64_t v72 = v24;
    if (one-time initialization token for double != -1) {
      swift_once(&one-time initialization token for double, one-time initialization function for double);
    }
    long long v70 = static ErrorString.double;
    long long v69 = xmmword_3ABF00;
    uint64_t v25 = StringProtocol.replacingOccurrences<A, B>(of:with:options:range:)(&v70, &v69, 1, 0, 0, 1, &type metadata for String, &type metadata for String, &type metadata for String, v6, v6, v6);
    uint64_t v27 = v26;
    swift_bridgeObjectRelease(v24);
    uint64_t v71 = v25;
    char v63 = v27;
    uint64_t v72 = v27;
    if (one-time initialization token for integer != -1) {
      swift_once(&one-time initialization token for integer, one-time initialization function for integer);
    }
    long long v70 = static ErrorString.integer;
    long long v69 = xmmword_3ABF20;
    uint64_t v28 = StringProtocol.replacingOccurrences<A, B>(of:with:options:range:)(&v70, &v69, 1, 0, 0, 1, &type metadata for String, &type metadata for String, &type metadata for String, v6, v6, v6);
    uint64_t v30 = v29;
    swift_bridgeObjectRelease(v63);
    uint64_t v71 = v28;
    char v64 = v30;
    uint64_t v72 = v30;
    if (one-time initialization token for error != -1) {
      swift_once(&one-time initialization token for error, one-time initialization function for error);
    }
    long long v70 = static ErrorString.error;
    long long v69 = xmmword_3ABF40;
    uint64_t v31 = StringProtocol.replacingOccurrences<A, B>(of:with:options:range:)(&v70, &v69, 0, 0, 0, 1, &type metadata for String, &type metadata for String, &type metadata for String, v6, v6, v6);
    uint64_t v33 = v32;
    swift_bridgeObjectRelease(v64);
    uint64_t v71 = v31;
    char v65 = v33;
    uint64_t v72 = v33;
    if (one-time initialization token for archive != -1) {
      swift_once(&one-time initialization token for archive, one-time initialization function for archive);
    }
    long long v70 = static ErrorString.archive;
    long long v69 = xmmword_3ABF60;
    uint64_t v34 = StringProtocol.replacingOccurrences<A, B>(of:with:options:range:)(&v70, &v69, 0, 0, 0, 1, &type metadata for String, &type metadata for String, &type metadata for String, v6, v6, v6);
    uint64_t v36 = v35;
    swift_bridgeObjectRelease(v65);
    uint64_t v71 = v34;
    char v66 = v36;
    uint64_t v72 = v36;
    if (one-time initialization token for limit != -1) {
      swift_once(&one-time initialization token for limit, one-time initialization function for limit);
    }
    long long v70 = static ErrorString.limit;
    long long v69 = xmmword_3ABF80;
    uint64_t v37 = StringProtocol.replacingOccurrences<A, B>(of:with:options:range:)(&v70, &v69, 0, 0, 0, 1, &type metadata for String, &type metadata for String, &type metadata for String, v6, v6, v6);
    uint64_t v39 = v38;
    swift_bridgeObjectRelease(v66);
    uint64_t v71 = v37;
    char v67 = v39;
    uint64_t v72 = v39;
    if (one-time initialization token for supportedStackTypes != -1) {
      swift_once(&one-time initialization token for supportedStackTypes, one-time initialization function for supportedStackTypes);
    }
    long long v70 = static ErrorString.supportedStackTypes;
    long long v69 = xmmword_3ABFA0;
    uint64_t v40 = StringProtocol.replacingOccurrences<A, B>(of:with:options:range:)(&v70, &v69, 0, 0, 0, 1, &type metadata for String, &type metadata for String, &type metadata for String, v6, v6, v6);
    uint64_t v42 = v41;
    swift_bridgeObjectRelease(v67);
    uint64_t v71 = v40;
    uint64_t v72 = v42;
    if (one-time initialization token for sortTypes != -1) {
      swift_once(&one-time initialization token for sortTypes, one-time initialization function for sortTypes);
    }
    long long v70 = static ErrorString.sortTypes;
    long long v69 = xmmword_3ABFC0;
    uint64_t v56 = StringProtocol.replacingOccurrences<A, B>(of:with:options:range:)(&v70, &v69, 0, 0, 0, 1, &type metadata for String, &type metadata for String, &type metadata for String, v6, v6, v6);
    uint64_t v68 = v43;
    swift_bridgeObjectRelease(v42);
    type metadata accessor for OS_os_log();
    uint64_t v44 = (void *)static OS_os_log.default.getter(0);
    unsigned __int8 v45 = static os_log_type_t.error.getter(0, &v69);
    uint64_t v46 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<CVarArg>);
    uint64_t v47 = (void *)swift_allocObject(v46, 72, 7);
    v47[2] = 1;
    v47[3] = 2;
    v47[7] = &type metadata for String;
    v47[8] = lazy protocol witness table accessor for type String and conformance String();
    v47[4] = v56;
    v47[5] = v68;
    swift_bridgeObjectRetain(v68);
    os_log(_:dso:log:type:_:)("%@ \n", 4, 2, &dword_0, v44, v45, v47);

    swift_bridgeObjectRelease((_BYTE)v47);
    uint64_t v48 = lazy protocol witness table accessor for type MLCreateError and conformance MLCreateError();
    swift_allocError(&type metadata for MLCreateError, v48, 0, 0);
    *(void *)uint64_t v49 = v56;
    *(void *)(v49 + 8) = v68;
    *(_OWORD *)(v49 + 16) = 0;
    *(_OWORD *)(v49 + 32) = 0;
    *(unsigned char *)(v49 + 48) = 0;
    swift_willThrow(&type metadata for MLCreateError, v48, v49, v50, v51, v52);
    tc_v1_release(v55);
    return v54;
  }
  return v2;
}

NSURL *specialized handling<A, B, C>(_:_:_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v72 = 0;
  tc_v1_sframe_remove_column(a1, a2, &v72);
  uint64_t v2 = v72;
  if (v72)
  {
    uint64_t v3 = tc_v1_error_message(v72);
    if (!v3) {
      BUG();
    }
    uint64_t v53 = v2;
    uint64_t v70 = String.init(cString:)(v3);
    char v55 = v4;
    uint64_t v71 = v4;
    if (one-time initialization token for table != -1) {
      swift_once(&one-time initialization token for table, one-time initialization function for table);
    }
    long long v69 = static ErrorString.table;
    long long v68 = xmmword_3ABE40;
    uint64_t v5 = lazy protocol witness table accessor for type String and conformance String();
    uint64_t v6 = StringProtocol.replacingOccurrences<A, B>(of:with:options:range:)(&v69, &v68, 1, 0, 0, 1, &type metadata for String, &type metadata for String, &type metadata for String, v5, v5, v5);
    uint64_t v8 = v7;
    swift_bridgeObjectRelease(v55);
    uint64_t v70 = v6;
    char v56 = v8;
    uint64_t v71 = v8;
    if (one-time initialization token for column != -1) {
      swift_once(&one-time initialization token for column, one-time initialization function for column);
    }
    long long v69 = static ErrorString.column;
    long long v68 = xmmword_3ABE60;
    uint64_t v9 = StringProtocol.replacingOccurrences<A, B>(of:with:options:range:)(&v69, &v68, 1, 0, 0, 1, &type metadata for String, &type metadata for String, &type metadata for String, v5, v5, v5);
    uint64_t v11 = v10;
    swift_bridgeObjectRelease(v56);
    uint64_t v70 = v9;
    char v57 = v11;
    uint64_t v71 = v11;
    if (one-time initialization token for tableMap != -1) {
      swift_once(&one-time initialization token for tableMap, one-time initialization function for tableMap);
    }
    long long v69 = static ErrorString.tableMap;
    long long v68 = xmmword_3ABE80;
    uint64_t v12 = StringProtocol.replacingOccurrences<A, B>(of:with:options:range:)(&v69, &v68, 1, 0, 0, 1, &type metadata for String, &type metadata for String, &type metadata for String, v5, v5, v5);
    uint64_t v14 = v13;
    swift_bridgeObjectRelease(v57);
    uint64_t v70 = v12;
    char v58 = v14;
    uint64_t v71 = v14;
    if (one-time initialization token for columnMap != -1) {
      swift_once(&one-time initialization token for columnMap, one-time initialization function for columnMap);
    }
    long long v69 = static ErrorString.columnMap;
    long long v68 = xmmword_3ABEA0;
    uint64_t v15 = StringProtocol.replacingOccurrences<A, B>(of:with:options:range:)(&v69, &v68, 1, 0, 0, 1, &type metadata for String, &type metadata for String, &type metadata for String, v5, v5, v5);
    uint64_t v17 = v16;
    swift_bridgeObjectRelease(v58);
    uint64_t v70 = v15;
    char v59 = v17;
    uint64_t v71 = v17;
    if (one-time initialization token for drop != -1) {
      swift_once(&one-time initialization token for drop, one-time initialization function for drop);
    }
    long long v69 = static ErrorString.drop;
    long long v68 = xmmword_3ABEC0;
    uint64_t v18 = StringProtocol.replacingOccurrences<A, B>(of:with:options:range:)(&v69, &v68, 1, 0, 0, 1, &type metadata for String, &type metadata for String, &type metadata for String, v5, v5, v5);
    uint64_t v20 = v19;
    swift_bridgeObjectRelease(v59);
    uint64_t v70 = v18;
    char v60 = v20;
    uint64_t v71 = v20;
    if (one-time initialization token for sequence != -1) {
      swift_once(&one-time initialization token for sequence, one-time initialization function for sequence);
    }
    long long v69 = static ErrorString.sequence;
    long long v68 = xmmword_3ABEE0;
    uint64_t v21 = StringProtocol.replacingOccurrences<A, B>(of:with:options:range:)(&v69, &v68, 1, 0, 0, 1, &type metadata for String, &type metadata for String, &type metadata for String, v5, v5, v5);
    uint64_t v23 = v22;
    swift_bridgeObjectRelease(v60);
    uint64_t v70 = v21;
    char v61 = v23;
    uint64_t v71 = v23;
    if (one-time initialization token for double != -1) {
      swift_once(&one-time initialization token for double, one-time initialization function for double);
    }
    long long v69 = static ErrorString.double;
    long long v68 = xmmword_3ABF00;
    uint64_t v24 = StringProtocol.replacingOccurrences<A, B>(of:with:options:range:)(&v69, &v68, 1, 0, 0, 1, &type metadata for String, &type metadata for String, &type metadata for String, v5, v5, v5);
    uint64_t v26 = v25;
    swift_bridgeObjectRelease(v61);
    uint64_t v70 = v24;
    char v62 = v26;
    uint64_t v71 = v26;
    if (one-time initialization token for integer != -1) {
      swift_once(&one-time initialization token for integer, one-time initialization function for integer);
    }
    long long v69 = static ErrorString.integer;
    long long v68 = xmmword_3ABF20;
    uint64_t v27 = StringProtocol.replacingOccurrences<A, B>(of:with:options:range:)(&v69, &v68, 1, 0, 0, 1, &type metadata for String, &type metadata for String, &type metadata for String, v5, v5, v5);
    uint64_t v29 = v28;
    swift_bridgeObjectRelease(v62);
    uint64_t v70 = v27;
    char v63 = v29;
    uint64_t v71 = v29;
    if (one-time initialization token for error != -1) {
      swift_once(&one-time initialization token for error, one-time initialization function for error);
    }
    long long v69 = static ErrorString.error;
    long long v68 = xmmword_3ABF40;
    uint64_t v30 = StringProtocol.replacingOccurrences<A, B>(of:with:options:range:)(&v69, &v68, 0, 0, 0, 1, &type metadata for String, &type metadata for String, &type metadata for String, v5, v5, v5);
    uint64_t v32 = v31;
    swift_bridgeObjectRelease(v63);
    uint64_t v70 = v30;
    char v64 = v32;
    uint64_t v71 = v32;
    if (one-time initialization token for archive != -1) {
      swift_once(&one-time initialization token for archive, one-time initialization function for archive);
    }
    long long v69 = static ErrorString.archive;
    long long v68 = xmmword_3ABF60;
    uint64_t v33 = StringProtocol.replacingOccurrences<A, B>(of:with:options:range:)(&v69, &v68, 0, 0, 0, 1, &type metadata for String, &type metadata for String, &type metadata for String, v5, v5, v5);
    uint64_t v35 = v34;
    swift_bridgeObjectRelease(v64);
    uint64_t v70 = v33;
    char v65 = v35;
    uint64_t v71 = v35;
    if (one-time initialization token for limit != -1) {
      swift_once(&one-time initialization token for limit, one-time initialization function for limit);
    }
    long long v69 = static ErrorString.limit;
    long long v68 = xmmword_3ABF80;
    uint64_t v36 = StringProtocol.replacingOccurrences<A, B>(of:with:options:range:)(&v69, &v68, 0, 0, 0, 1, &type metadata for String, &type metadata for String, &type metadata for String, v5, v5, v5);
    uint64_t v38 = v37;
    swift_bridgeObjectRelease(v65);
    uint64_t v70 = v36;
    char v66 = v38;
    uint64_t v71 = v38;
    if (one-time initialization token for supportedStackTypes != -1) {
      swift_once(&one-time initialization token for supportedStackTypes, one-time initialization function for supportedStackTypes);
    }
    long long v69 = static ErrorString.supportedStackTypes;
    long long v68 = xmmword_3ABFA0;
    uint64_t v39 = StringProtocol.replacingOccurrences<A, B>(of:with:options:range:)(&v69, &v68, 0, 0, 0, 1, &type metadata for String, &type metadata for String, &type metadata for String, v5, v5, v5);
    uint64_t v41 = v40;
    swift_bridgeObjectRelease(v66);
    uint64_t v70 = v39;
    uint64_t v71 = v41;
    if (one-time initialization token for sortTypes != -1) {
      swift_once(&one-time initialization token for sortTypes, one-time initialization function for sortTypes);
    }
    long long v69 = static ErrorString.sortTypes;
    long long v68 = xmmword_3ABFC0;
    uint64_t v42 = StringProtocol.replacingOccurrences<A, B>(of:with:options:range:)(&v69, &v68, 0, 0, 0, 1, &type metadata for String, &type metadata for String, &type metadata for String, v5, v5, v5);
    uint64_t v67 = v43;
    swift_bridgeObjectRelease(v41);
    type metadata accessor for OS_os_log();
    uint64_t v44 = (void *)static OS_os_log.default.getter(0);
    unsigned __int8 v54 = static os_log_type_t.error.getter(0, &v68);
    uint64_t v45 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<CVarArg>);
    uint64_t v46 = (void *)swift_allocObject(v45, 72, 7);
    v46[2] = 1;
    v46[3] = 2;
    v46[7] = &type metadata for String;
    v46[8] = lazy protocol witness table accessor for type String and conformance String();
    v46[4] = v42;
    _OWORD v46[5] = v67;
    swift_bridgeObjectRetain(v67);
    os_log(_:dso:log:type:_:)("%@ \n", 4, 2, &dword_0, v44, v54, v46);

    swift_bridgeObjectRelease((_BYTE)v46);
    uint64_t v47 = lazy protocol witness table accessor for type MLCreateError and conformance MLCreateError();
    swift_allocError(&type metadata for MLCreateError, v47, 0, 0);
    *(void *)uint64_t v48 = v42;
    *(void *)(v48 + 8) = v67;
    *(_OWORD *)(v48 + 16) = 0;
    *(_OWORD *)(v48 + 32) = 0;
    *(unsigned char *)(v48 + 48) = 0;
    swift_willThrow(&type metadata for MLCreateError, v47, v48, v49, v50, v51);
    tc_v1_release(v53);
  }
  return __stack_chk_guard;
}

uint64_t specialized handling<A, B, C, D>(_:_:_:_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v72 = 0;
  uint64_t v3 = tc_v1_flex_dict_add_element(a1, a2, a3, &v72);
  uint64_t v4 = v72;
  if (v72)
  {
    uint64_t v5 = tc_v1_error_message(v72);
    if (!v5) {
      BUG();
    }
    uint64_t v54 = v4;
    uint64_t v53 = v3;
    uint64_t v70 = String.init(cString:)(v5);
    uint64_t v57 = v6;
    uint64_t v71 = v6;
    if (one-time initialization token for table != -1) {
      swift_once(&one-time initialization token for table, one-time initialization function for table);
    }
    long long v69 = static ErrorString.table;
    long long v68 = xmmword_3ABE40;
    uint64_t v7 = lazy protocol witness table accessor for type String and conformance String();
    uint64_t v8 = StringProtocol.replacingOccurrences<A, B>(of:with:options:range:)(&v69, &v68, 1, 0, 0, 1, &type metadata for String, &type metadata for String, &type metadata for String, v7, v7, v7);
    uint64_t v10 = v9;
    swift_bridgeObjectRelease(v57);
    uint64_t v70 = v8;
    uint64_t v58 = v10;
    uint64_t v71 = v10;
    if (one-time initialization token for column != -1) {
      swift_once(&one-time initialization token for column, one-time initialization function for column);
    }
    long long v69 = static ErrorString.column;
    long long v68 = xmmword_3ABE60;
    uint64_t v11 = StringProtocol.replacingOccurrences<A, B>(of:with:options:range:)(&v69, &v68, 1, 0, 0, 1, &type metadata for String, &type metadata for String, &type metadata for String, v7, v7, v7);
    uint64_t v13 = v12;
    swift_bridgeObjectRelease(v58);
    uint64_t v70 = v11;
    uint64_t v59 = v13;
    uint64_t v71 = v13;
    if (one-time initialization token for tableMap != -1) {
      swift_once(&one-time initialization token for tableMap, one-time initialization function for tableMap);
    }
    long long v69 = static ErrorString.tableMap;
    long long v68 = xmmword_3ABE80;
    uint64_t v14 = StringProtocol.replacingOccurrences<A, B>(of:with:options:range:)(&v69, &v68, 1, 0, 0, 1, &type metadata for String, &type metadata for String, &type metadata for String, v7, v7, v7);
    uint64_t v16 = v15;
    swift_bridgeObjectRelease(v59);
    uint64_t v70 = v14;
    uint64_t v60 = v16;
    uint64_t v71 = v16;
    if (one-time initialization token for columnMap != -1) {
      swift_once(&one-time initialization token for columnMap, one-time initialization function for columnMap);
    }
    long long v69 = static ErrorString.columnMap;
    long long v68 = xmmword_3ABEA0;
    uint64_t v17 = StringProtocol.replacingOccurrences<A, B>(of:with:options:range:)(&v69, &v68, 1, 0, 0, 1, &type metadata for String, &type metadata for String, &type metadata for String, v7, v7, v7);
    uint64_t v19 = v18;
    swift_bridgeObjectRelease(v60);
    uint64_t v70 = v17;
    uint64_t v61 = v19;
    uint64_t v71 = v19;
    if (one-time initialization token for drop != -1) {
      swift_once(&one-time initialization token for drop, one-time initialization function for drop);
    }
    long long v69 = static ErrorString.drop;
    long long v68 = xmmword_3ABEC0;
    uint64_t v20 = StringProtocol.replacingOccurrences<A, B>(of:with:options:range:)(&v69, &v68, 1, 0, 0, 1, &type metadata for String, &type metadata for String, &type metadata for String, v7, v7, v7);
    uint64_t v22 = v21;
    swift_bridgeObjectRelease(v61);
    uint64_t v70 = v20;
    uint64_t v62 = v22;
    uint64_t v71 = v22;
    if (one-time initialization token for sequence != -1) {
      swift_once(&one-time initialization token for sequence, one-time initialization function for sequence);
    }
    long long v69 = static ErrorString.sequence;
    long long v68 = xmmword_3ABEE0;
    uint64_t v23 = StringProtocol.replacingOccurrences<A, B>(of:with:options:range:)(&v69, &v68, 1, 0, 0, 1, &type metadata for String, &type metadata for String, &type metadata for String, v7, v7, v7);
    uint64_t v25 = v24;
    swift_bridgeObjectRelease(v62);
    uint64_t v70 = v23;
    uint64_t v71 = v25;
    if (one-time initialization token for double != -1) {
      swift_once(&one-time initialization token for double, one-time initialization function for double);
    }
    long long v69 = static ErrorString.double;
    long long v68 = xmmword_3ABF00;
    uint64_t v26 = StringProtocol.replacingOccurrences<A, B>(of:with:options:range:)(&v69, &v68, 1, 0, 0, 1, &type metadata for String, &type metadata for String, &type metadata for String, v7, v7, v7);
    uint64_t v28 = v27;
    swift_bridgeObjectRelease(v25);
    uint64_t v70 = v26;
    uint64_t v63 = v28;
    uint64_t v71 = v28;
    if (one-time initialization token for integer != -1) {
      swift_once(&one-time initialization token for integer, one-time initialization function for integer);
    }
    long long v69 = static ErrorString.integer;
    long long v68 = xmmword_3ABF20;
    uint64_t v29 = StringProtocol.replacingOccurrences<A, B>(of:with:options:range:)(&v69, &v68, 1, 0, 0, 1, &type metadata for String, &type metadata for String, &type metadata for String, v7, v7, v7);
    uint64_t v31 = v30;
    swift_bridgeObjectRelease(v63);
    uint64_t v70 = v29;
    uint64_t v64 = v31;
    uint64_t v71 = v31;
    if (one-time initialization token for error != -1) {
      swift_once(&one-time initialization token for error, one-time initialization function for error);
    }
    long long v69 = static ErrorString.error;
    long long v68 = xmmword_3ABF40;
    uint64_t v32 = StringProtocol.replacingOccurrences<A, B>(of:with:options:range:)(&v69, &v68, 0, 0, 0, 1, &type metadata for String, &type metadata for String, &type metadata for String, v7, v7, v7);
    uint64_t v34 = v33;
    swift_bridgeObjectRelease(v64);
    uint64_t v70 = v32;
    uint64_t v65 = v34;
    uint64_t v71 = v34;
    if (one-time initialization token for archive != -1) {
      swift_once(&one-time initialization token for archive, one-time initialization function for archive);
    }
    long long v69 = static ErrorString.archive;
    long long v68 = xmmword_3ABF60;
    uint64_t v35 = StringProtocol.replacingOccurrences<A, B>(of:with:options:range:)(&v69, &v68, 0, 0, 0, 1, &type metadata for String, &type metadata for String, &type metadata for String, v7, v7, v7);
    uint64_t v37 = v36;
    swift_bridgeObjectRelease(v65);
    uint64_t v70 = v35;
    uint64_t v66 = v37;
    uint64_t v71 = v37;
    if (one-time initialization token for limit != -1) {
      swift_once(&one-time initialization token for limit, one-time initialization function for limit);
    }
    long long v69 = static ErrorString.limit;
    long long v68 = xmmword_3ABF80;
    uint64_t v38 = StringProtocol.replacingOccurrences<A, B>(of:with:options:range:)(&v69, &v68, 0, 0, 0, 1, &type metadata for String, &type metadata for String, &type metadata for String, v7, v7, v7);
    uint64_t v40 = v39;
    swift_bridgeObjectRelease(v66);
    uint64_t v70 = v38;
    uint64_t v71 = v40;
    if (one-time initialization token for supportedStackTypes != -1) {
      swift_once(&one-time initialization token for supportedStackTypes, one-time initialization function for supportedStackTypes);
    }
    long long v69 = static ErrorString.supportedStackTypes;
    long long v68 = xmmword_3ABFA0;
    uint64_t v41 = StringProtocol.replacingOccurrences<A, B>(of:with:options:range:)(&v69, &v68, 0, 0, 0, 1, &type metadata for String, &type metadata for String, &type metadata for String, v7, v7, v7);
    uint64_t v42 = v40;
    uint64_t v44 = v43;
    swift_bridgeObjectRelease(v42);
    uint64_t v70 = v41;
    uint64_t v71 = v44;
    if (one-time initialization token for sortTypes != -1) {
      swift_once(&one-time initialization token for sortTypes, one-time initialization function for sortTypes);
    }
    long long v69 = static ErrorString.sortTypes;
    long long v68 = xmmword_3ABFC0;
    uint64_t v67 = StringProtocol.replacingOccurrences<A, B>(of:with:options:range:)(&v69, &v68, 0, 0, 0, 1, &type metadata for String, &type metadata for String, &type metadata for String, v7, v7, v7);
    uint64_t v46 = v45;
    uint64_t v55 = v45;
    swift_bridgeObjectRelease(v44);
    type metadata accessor for OS_os_log();
    swift_bridgeObjectRetain(v46);
    uint64_t v47 = (void *)static OS_os_log.default.getter();
    unsigned __int8 v56 = static os_log_type_t.error.getter();
    uint64_t v48 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<CVarArg>);
    uint64_t v49 = (void *)swift_allocObject(v48, 72, 7);
    _OWORD v49[2] = 1;
    v49[3] = 2;
    v49[7] = &type metadata for String;
    v49[8] = lazy protocol witness table accessor for type String and conformance String();
    v49[4] = v67;
    v49[5] = v55;
    os_log(_:dso:log:type:_:)("%@ \n", 4, 2, &dword_0, v47, v56, v49);

    swift_bridgeObjectRelease(v49);
    uint64_t v50 = lazy protocol witness table accessor for type MLCreateError and conformance MLCreateError();
    swift_allocError(&type metadata for MLCreateError, v50, 0, 0);
    *(void *)uint64_t v51 = v67;
    *(void *)(v51 + 8) = v55;
    *(_OWORD *)(v51 + 16) = 0;
    *(_OWORD *)(v51 + 32) = 0;
    *(unsigned char *)(v51 + 48) = 0;
    swift_willThrow();
    tc_v1_release(v54);
    return v53;
  }
  return v3;
}

{
  return specialized handling<A, B, C, D>(_:_:_:_:)(a1, a2, a3, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t *))&tc_v1_binary_op_sf);
}

{
  return specialized handling<A, B, C, D>(_:_:_:_:)(a1, a2, a3, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t *))&tc_v1_binary_op_fs);
}

{
  return specialized handling<A, B, C, D>(_:_:_:_:)(a1, a2, a3, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t *))&tc_v1_binary_op_ss);
}

{
  return specialized handling<A, B, C, D>(_:_:_:_:)(a1, a2, a3, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t *))&tc_v1_sframe_replace_na);
}

{
  return specialized handling<A, B, C, D>(_:_:_:_:)(a1, a2, a3, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t *))&tc_v1_model_call_method);
}

{
  return specialized handling<A, B, C, D>(_:_:_:_:)(a1, a2, a3, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t *))&tc_v1_sframe_drop_na);
}

{
  return specialized handling<A, B, C, D>(_:_:_:_:)(a1, a2, a3, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t *))&tc_v1_sframe_unstack);
}

{
  return specialized handling<A, B, C, D>(_:_:_:_:)(a1, a2, a3, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t *))&tc_v1_sframe_group_by);
}

uint64_t specialized handling<A, B, C, D>(_:_:_:_:)(uint64_t a1, uint64_t a2, char a3)
{
  uint64_t v75 = 0;
  uint64_t v3 = tc_v1_sarray_to_type(a1, a2, a3 & 1, &v75);
  uint64_t v4 = v75;
  if (v75)
  {
    uint64_t v5 = tc_v1_error_message(v75);
    if (!v5) {
      BUG();
    }
    uint64_t v57 = v4;
    uint64_t v56 = v3;
    uint64_t v73 = String.init(cString:)(v5);
    char v58 = v6;
    uint64_t v74 = v6;
    if (one-time initialization token for table != -1) {
      swift_once(&one-time initialization token for table, one-time initialization function for table);
    }
    long long v72 = static ErrorString.table;
    long long v71 = xmmword_3ABE40;
    uint64_t v7 = lazy protocol witness table accessor for type String and conformance String();
    uint64_t v8 = StringProtocol.replacingOccurrences<A, B>(of:with:options:range:)(&v72, &v71, 1, 0, 0, 1, &type metadata for String, &type metadata for String, &type metadata for String, v7, v7, v7);
    uint64_t v10 = v9;
    swift_bridgeObjectRelease(v58);
    uint64_t v73 = v8;
    char v59 = v10;
    uint64_t v74 = v10;
    if (one-time initialization token for column != -1) {
      swift_once(&one-time initialization token for column, one-time initialization function for column);
    }
    long long v72 = static ErrorString.column;
    long long v71 = xmmword_3ABE60;
    uint64_t v11 = StringProtocol.replacingOccurrences<A, B>(of:with:options:range:)(&v72, &v71, 1, 0, 0, 1, &type metadata for String, &type metadata for String, &type metadata for String, v7, v7, v7);
    uint64_t v13 = v12;
    swift_bridgeObjectRelease(v59);
    uint64_t v73 = v11;
    char v60 = v13;
    uint64_t v74 = v13;
    if (one-time initialization token for tableMap != -1) {
      swift_once(&one-time initialization token for tableMap, one-time initialization function for tableMap);
    }
    long long v72 = static ErrorString.tableMap;
    long long v71 = xmmword_3ABE80;
    uint64_t v14 = StringProtocol.replacingOccurrences<A, B>(of:with:options:range:)(&v72, &v71, 1, 0, 0, 1, &type metadata for String, &type metadata for String, &type metadata for String, v7, v7, v7);
    uint64_t v16 = v15;
    swift_bridgeObjectRelease(v60);
    uint64_t v73 = v14;
    char v61 = v16;
    uint64_t v74 = v16;
    if (one-time initialization token for columnMap != -1) {
      swift_once(&one-time initialization token for columnMap, one-time initialization function for columnMap);
    }
    long long v72 = static ErrorString.columnMap;
    long long v71 = xmmword_3ABEA0;
    uint64_t v17 = StringProtocol.replacingOccurrences<A, B>(of:with:options:range:)(&v72, &v71, 1, 0, 0, 1, &type metadata for String, &type metadata for String, &type metadata for String, v7, v7, v7);
    uint64_t v19 = v18;
    swift_bridgeObjectRelease(v61);
    uint64_t v73 = v17;
    char v62 = v19;
    uint64_t v74 = v19;
    if (one-time initialization token for drop != -1) {
      swift_once(&one-time initialization token for drop, one-time initialization function for drop);
    }
    long long v72 = static ErrorString.drop;
    long long v71 = xmmword_3ABEC0;
    uint64_t v20 = StringProtocol.replacingOccurrences<A, B>(of:with:options:range:)(&v72, &v71, 1, 0, 0, 1, &type metadata for String, &type metadata for String, &type metadata for String, v7, v7, v7);
    uint64_t v22 = v21;
    swift_bridgeObjectRelease(v62);
    uint64_t v73 = v20;
    char v63 = v22;
    uint64_t v74 = v22;
    if (one-time initialization token for sequence != -1) {
      swift_once(&one-time initialization token for sequence, one-time initialization function for sequence);
    }
    long long v72 = static ErrorString.sequence;
    long long v71 = xmmword_3ABEE0;
    uint64_t v23 = StringProtocol.replacingOccurrences<A, B>(of:with:options:range:)(&v72, &v71, 1, 0, 0, 1, &type metadata for String, &type metadata for String, &type metadata for String, v7, v7, v7);
    uint64_t v25 = v24;
    swift_bridgeObjectRelease(v63);
    uint64_t v73 = v23;
    uint64_t v74 = v25;
    if (one-time initialization token for double != -1) {
      swift_once(&one-time initialization token for double, one-time initialization function for double);
    }
    long long v72 = static ErrorString.double;
    long long v71 = xmmword_3ABF00;
    uint64_t v26 = StringProtocol.replacingOccurrences<A, B>(of:with:options:range:)(&v72, &v71, 1, 0, 0, 1, &type metadata for String, &type metadata for String, &type metadata for String, v7, v7, v7);
    uint64_t v28 = v27;
    swift_bridgeObjectRelease(v25);
    uint64_t v73 = v26;
    char v64 = v28;
    uint64_t v74 = v28;
    if (one-time initialization token for integer != -1) {
      swift_once(&one-time initialization token for integer, one-time initialization function for integer);
    }
    long long v72 = static ErrorString.integer;
    long long v71 = xmmword_3ABF20;
    uint64_t v29 = StringProtocol.replacingOccurrences<A, B>(of:with:options:range:)(&v72, &v71, 1, 0, 0, 1, &type metadata for String, &type metadata for String, &type metadata for String, v7, v7, v7);
    uint64_t v31 = v30;
    swift_bridgeObjectRelease(v64);
    uint64_t v73 = v29;
    char v65 = v31;
    uint64_t v74 = v31;
    if (one-time initialization token for error != -1) {
      swift_once(&one-time initialization token for error, one-time initialization function for error);
    }
    long long v72 = static ErrorString.error;
    long long v71 = xmmword_3ABF40;
    uint64_t v32 = StringProtocol.replacingOccurrences<A, B>(of:with:options:range:)(&v72, &v71, 0, 0, 0, 1, &type metadata for String, &type metadata for String, &type metadata for String, v7, v7, v7);
    uint64_t v34 = v33;
    swift_bridgeObjectRelease(v65);
    uint64_t v73 = v32;
    char v66 = v34;
    uint64_t v74 = v34;
    if (one-time initialization token for archive != -1) {
      swift_once(&one-time initialization token for archive, one-time initialization function for archive);
    }
    long long v72 = static ErrorString.archive;
    long long v71 = xmmword_3ABF60;
    uint64_t v35 = StringProtocol.replacingOccurrences<A, B>(of:with:options:range:)(&v72, &v71, 0, 0, 0, 1, &type metadata for String, &type metadata for String, &type metadata for String, v7, v7, v7);
    uint64_t v37 = v36;
    swift_bridgeObjectRelease(v66);
    uint64_t v73 = v35;
    char v67 = v37;
    uint64_t v74 = v37;
    if (one-time initialization token for limit != -1) {
      swift_once(&one-time initialization token for limit, one-time initialization function for limit);
    }
    long long v72 = static ErrorString.limit;
    long long v71 = xmmword_3ABF80;
    uint64_t v38 = StringProtocol.replacingOccurrences<A, B>(of:with:options:range:)(&v72, &v71, 0, 0, 0, 1, &type metadata for String, &type metadata for String, &type metadata for String, v7, v7, v7);
    uint64_t v40 = v39;
    swift_bridgeObjectRelease(v67);
    uint64_t v73 = v38;
    char v68 = v40;
    uint64_t v74 = v40;
    if (one-time initialization token for supportedStackTypes != -1) {
      swift_once(&one-time initialization token for supportedStackTypes, one-time initialization function for supportedStackTypes);
    }
    long long v72 = static ErrorString.supportedStackTypes;
    long long v71 = xmmword_3ABFA0;
    uint64_t v41 = StringProtocol.replacingOccurrences<A, B>(of:with:options:range:)(&v72, &v71, 0, 0, 0, 1, &type metadata for String, &type metadata for String, &type metadata for String, v7, v7, v7);
    uint64_t v43 = v42;
    swift_bridgeObjectRelease(v68);
    uint64_t v73 = v41;
    char v69 = v43;
    uint64_t v74 = v43;
    if (one-time initialization token for sortTypes != -1) {
      swift_once(&one-time initialization token for sortTypes, one-time initialization function for sortTypes);
    }
    long long v72 = static ErrorString.sortTypes;
    long long v71 = xmmword_3ABFC0;
    uint64_t v44 = StringProtocol.replacingOccurrences<A, B>(of:with:options:range:)(&v72, &v71, 0, 0, 0, 1, &type metadata for String, &type metadata for String, &type metadata for String, v7, v7, v7);
    uint64_t v46 = v45;
    swift_bridgeObjectRelease(v69);
    type metadata accessor for OS_os_log();
    swift_bridgeObjectRetain(v46);
    uint64_t v47 = (void *)static OS_os_log.default.getter(v46);
    unsigned __int8 v70 = static os_log_type_t.error.getter(v46, &v71);
    uint64_t v48 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<CVarArg>);
    uint64_t v49 = (void *)swift_allocObject(v48, 72, 7);
    _OWORD v49[2] = 1;
    v49[3] = 2;
    v49[7] = &type metadata for String;
    v49[8] = lazy protocol witness table accessor for type String and conformance String();
    v49[4] = v44;
    v49[5] = v46;
    os_log(_:dso:log:type:_:)("%@ \n", 4, 2, &dword_0, v47, v70, v49);

    swift_bridgeObjectRelease((_BYTE)v49);
    uint64_t v50 = lazy protocol witness table accessor for type MLCreateError and conformance MLCreateError();
    swift_allocError(&type metadata for MLCreateError, v50, 0, 0);
    *(void *)uint64_t v51 = v44;
    *(void *)(v51 + 8) = v46;
    *(_OWORD *)(v51 + 16) = 0;
    *(_OWORD *)(v51 + 32) = 0;
    *(unsigned char *)(v51 + 48) = 0;
    swift_willThrow(&type metadata for MLCreateError, v50, v51, v52, v53, v54);
    tc_v1_release(v57);
    return v56;
  }
  return v3;
}

{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  void *v47;
  uint64_t v48;
  void *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v56;
  uint64_t v57;
  char v58;
  char v59;
  char v60;
  char v61;
  char v62;
  char v63;
  char v64;
  char v65;
  char v66;
  char v67;
  char v68;
  char v69;
  unsigned __int8 v70;
  long long v71;
  long long v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;

  uint64_t v75 = 0;
  uint64_t v3 = tc_v1_sframe_sort_single_column(a1, a2, a3 & 1, &v75);
  uint64_t v4 = v75;
  if (v75)
  {
    uint64_t v5 = tc_v1_error_message(v75);
    if (!v5) {
      BUG();
    }
    uint64_t v57 = v4;
    uint64_t v56 = v3;
    uint64_t v73 = String.init(cString:)(v5);
    char v58 = v6;
    uint64_t v74 = v6;
    if (one-time initialization token for table != -1) {
      swift_once(&one-time initialization token for table, one-time initialization function for table);
    }
    long long v72 = static ErrorString.table;
    long long v71 = xmmword_3ABE40;
    uint64_t v7 = lazy protocol witness table accessor for type String and conformance String();
    uint64_t v8 = StringProtocol.replacingOccurrences<A, B>(of:with:options:range:)(&v72, &v71, 1, 0, 0, 1, &type metadata for String, &type metadata for String, &type metadata for String, v7, v7, v7);
    uint64_t v10 = v9;
    swift_bridgeObjectRelease(v58);
    uint64_t v73 = v8;
    char v59 = v10;
    uint64_t v74 = v10;
    if (one-time initialization token for column != -1) {
      swift_once(&one-time initialization token for column, one-time initialization function for column);
    }
    long long v72 = static ErrorString.column;
    long long v71 = xmmword_3ABE60;
    uint64_t v11 = StringProtocol.replacingOccurrences<A, B>(of:with:options:range:)(&v72, &v71, 1, 0, 0, 1, &type metadata for String, &type metadata for String, &type metadata for String, v7, v7, v7);
    uint64_t v13 = v12;
    swift_bridgeObjectRelease(v59);
    uint64_t v73 = v11;
    char v60 = v13;
    uint64_t v74 = v13;
    if (one-time initialization token for tableMap != -1) {
      swift_once(&one-time initialization token for tableMap, one-time initialization function for tableMap);
    }
    long long v72 = static ErrorString.tableMap;
    long long v71 = xmmword_3ABE80;
    uint64_t v14 = StringProtocol.replacingOccurrences<A, B>(of:with:options:range:)(&v72, &v71, 1, 0, 0, 1, &type metadata for String, &type metadata for String, &type metadata for String, v7, v7, v7);
    uint64_t v16 = v15;
    swift_bridgeObjectRelease(v60);
    uint64_t v73 = v14;
    char v61 = v16;
    uint64_t v74 = v16;
    if (one-time initialization token for columnMap != -1) {
      swift_once(&one-time initialization token for columnMap, one-time initialization function for columnMap);
    }
    long long v72 = static ErrorString.columnMap;
    long long v71 = xmmword_3ABEA0;
    uint64_t v17 = StringProtocol.replacingOccurrences<A, B>(of:with:options:range:)(&v72, &v71, 1, 0, 0, 1, &type metadata for String, &type metadata for String, &type metadata for String, v7, v7, v7);
    uint64_t v19 = v18;
    swift_bridgeObjectRelease(v61);
    uint64_t v73 = v17;
    char v62 = v19;
    uint64_t v74 = v19;
    if (one-time initialization token for drop != -1) {
      swift_once(&one-time initialization token for drop, one-time initialization function for drop);
    }
    long long v72 = static ErrorString.drop;
    long long v71 = xmmword_3ABEC0;
    uint64_t v20 = StringProtocol.replacingOccurrences<A, B>(of:with:options:range:)(&v72, &v71, 1, 0, 0, 1, &type metadata for String, &type metadata for String, &type metadata for String, v7, v7, v7);
    uint64_t v22 = v21;
    swift_bridgeObjectRelease(v62);
    uint64_t v73 = v20;
    char v63 = v22;
    uint64_t v74 = v22;
    if (one-time initialization token for sequence != -1) {
      swift_once(&one-time initialization token for sequence, one-time initialization function for sequence);
    }
    long long v72 = static ErrorString.sequence;
    long long v71 = xmmword_3ABEE0;
    uint64_t v23 = StringProtocol.replacingOccurrences<A, B>(of:with:options:range:)(&v72, &v71, 1, 0, 0, 1, &type metadata for String, &type metadata for String, &type metadata for String, v7, v7, v7);
    uint64_t v25 = v24;
    swift_bridgeObjectRelease(v63);
    uint64_t v73 = v23;
    uint64_t v74 = v25;
    if (one-time initialization token for double != -1) {
      swift_once(&one-time initialization token for double, one-time initialization function for double);
    }
    long long v72 = static ErrorString.double;
    long long v71 = xmmword_3ABF00;
    uint64_t v26 = StringProtocol.replacingOccurrences<A, B>(of:with:options:range:)(&v72, &v71, 1, 0, 0, 1, &type metadata for String, &type metadata for String, &type metadata for String, v7, v7, v7);
    uint64_t v28 = v27;
    swift_bridgeObjectRelease(v25);
    uint64_t v73 = v26;
    char v64 = v28;
    uint64_t v74 = v28;
    if (one-time initialization token for integer != -1) {
      swift_once(&one-time initialization token for integer, one-time initialization function for integer);
    }
    long long v72 = static ErrorString.integer;
    long long v71 = xmmword_3ABF20;
    uint64_t v29 = StringProtocol.replacingOccurrences<A, B>(of:with:options:range:)(&v72, &v71, 1, 0, 0, 1, &type metadata for String, &type metadata for String, &type metadata for String, v7, v7, v7);
    uint64_t v31 = v30;
    swift_bridgeObjectRelease(v64);
    uint64_t v73 = v29;
    char v65 = v31;
    uint64_t v74 = v31;
    if (one-time initialization token for error != -1) {
      swift_once(&one-time initialization token for error, one-time initialization function for error);
    }
    long long v72 = static ErrorString.error;
    long long v71 = xmmword_3ABF40;
    uint64_t v32 = StringProtocol.replacingOccurrences<A, B>(of:with:options:range:)(&v72, &v71, 0, 0, 0, 1, &type metadata for String, &type metadata for String, &type metadata for String, v7, v7, v7);
    uint64_t v34 = v33;
    swift_bridgeObjectRelease(v65);
    uint64_t v73 = v32;
    char v66 = v34;
    uint64_t v74 = v34;
    if (one-time initialization token for archive != -1) {
      swift_once(&one-time initialization token for archive, one-time initialization function for archive);
    }
    long long v72 = static ErrorString.archive;
    long long v71 = xmmword_3ABF60;
    uint64_t v35 = StringProtocol.replacingOccurrences<A, B>(of:with:options:range:)(&v72, &v71, 0, 0, 0, 1, &type metadata for String, &type metadata for String, &type metadata for String, v7, v7, v7);
    uint64_t v37 = v36;
    swift_bridgeObjectRelease(v66);
    uint64_t v73 = v35;
    char v67 = v37;
    uint64_t v74 = v37;
    if (one-time initialization token for limit != -1) {
      swift_once(&one-time initialization token for limit, one-time initialization function for limit);
    }
    long long v72 = static ErrorString.limit;
    long long v71 = xmmword_3ABF80;
    uint64_t v38 = StringProtocol.replacingOccurrences<A, B>(of:with:options:range:)(&v72, &v71, 0, 0, 0, 1, &type metadata for String, &type metadata for String, &type metadata for String, v7, v7, v7);
    uint64_t v40 = v39;
    swift_bridgeObjectRelease(v67);
    uint64_t v73 = v38;
    char v68 = v40;
    uint64_t v74 = v40;
    if (one-time initialization token for supportedStackTypes != -1) {
      swift_once(&one-time initialization token for supportedStackTypes, one-time initialization function for supportedStackTypes);
    }
    long long v72 = static ErrorString.supportedStackTypes;
    long long v71 = xmmword_3ABFA0;
    uint64_t v41 = StringProtocol.replacingOccurrences<A, B>(of:with:options:range:)(&v72, &v71, 0, 0, 0, 1, &type metadata for String, &type metadata for String, &type metadata for String, v7, v7, v7);
    uint64_t v43 = v42;
    swift_bridgeObjectRelease(v68);
    uint64_t v73 = v41;
    char v69 = v43;
    uint64_t v74 = v43;
    if (one-time initialization token for sortTypes != -1) {
      swift_once(&one-time initialization token for sortTypes, one-time initialization function for sortTypes);
    }
    long long v72 = static ErrorString.sortTypes;
    long long v71 = xmmword_3ABFC0;
    uint64_t v44 = StringProtocol.replacingOccurrences<A, B>(of:with:options:range:)(&v72, &v71, 0, 0, 0, 1, &type metadata for String, &type metadata for String, &type metadata for String, v7, v7, v7);
    uint64_t v46 = v45;
    swift_bridgeObjectRelease(v69);
    type metadata accessor for OS_os_log();
    swift_bridgeObjectRetain(v46);
    uint64_t v47 = (void *)static OS_os_log.default.getter(v46);
    unsigned __int8 v70 = static os_log_type_t.error.getter(v46, &v71);
    uint64_t v48 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<CVarArg>);
    uint64_t v49 = (void *)swift_allocObject(v48, 72, 7);
    _OWORD v49[2] = 1;
    v49[3] = 2;
    v49[7] = &type metadata for String;
    v49[8] = lazy protocol witness table accessor for type String and conformance String();
    v49[4] = v44;
    v49[5] = v46;
    os_log(_:dso:log:type:_:)("%@ \n", 4, 2, &dword_0, v47, v70, v49);

    swift_bridgeObjectRelease((_BYTE)v49);
    uint64_t v50 = lazy protocol witness table accessor for type MLCreateError and conformance MLCreateError();
    swift_allocError(&type metadata for MLCreateError, v50, 0, 0);
    *(void *)uint64_t v51 = v44;
    *(void *)(v51 + 8) = v46;
    *(_OWORD *)(v51 + 16) = 0;
    *(_OWORD *)(v51 + 32) = 0;
    *(unsigned char *)(v51 + 48) = 0;
    swift_willThrow(&type metadata for MLCreateError, v50, v51, v52, v53, v54);
    tc_v1_release(v57);
    return v56;
  }
  return v3;
}

NSURL *specialized handling<A, B, C, D>(_:_:_:_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return __stack_chk_guard;
}

{
  specialized handling<A, B, C, D>(_:_:_:_:)(a1, a2, a3, (void (*)(uint64_t, uint64_t, uint64_t, uint64_t *))&tc_v1_parameters_add_flexible_type);
  return __stack_chk_guard;
}

{
  specialized handling<A, B, C, D>(_:_:_:_:)(a1, a2, a3, (void (*)(uint64_t, uint64_t, uint64_t, uint64_t *))&tc_v1_parameters_add_sarray);
  return __stack_chk_guard;
}

{
  specialized handling<A, B, C, D>(_:_:_:_:)(a1, a2, a3, (void (*)(uint64_t, uint64_t, uint64_t, uint64_t *))&tc_v1_parameters_add_sframe);
  return __stack_chk_guard;
}

{
  specialized handling<A, B, C, D>(_:_:_:_:)(a1, a2, a3, (void (*)(uint64_t, uint64_t, uint64_t, uint64_t *))&tc_v1_sframe_rename_column);
  return __stack_chk_guard;
}

NSURL *specialized handling<A, B, C, D>(_:_:_:_:)(uint64_t a1, uint64_t a2, uint64_t a3, void (*a4)(uint64_t, uint64_t, uint64_t, uint64_t *))
{
  uint64_t v71 = 0;
  a4(a1, a2, a3, &v71);
  uint64_t v4 = v71;
  if (v71)
  {
    uint64_t v5 = tc_v1_error_message(v71);
    if (!v5) {
      BUG();
    }
    uint64_t v53 = v4;
    uint64_t v69 = String.init(cString:)(v5);
    uint64_t v54 = v6;
    uint64_t v70 = v6;
    if (one-time initialization token for table != -1) {
      swift_once(&one-time initialization token for table, one-time initialization function for table);
    }
    long long v68 = static ErrorString.table;
    long long v67 = xmmword_3ABE40;
    uint64_t v7 = lazy protocol witness table accessor for type String and conformance String();
    uint64_t v8 = StringProtocol.replacingOccurrences<A, B>(of:with:options:range:)(&v68, &v67, 1, 0, 0, 1, &type metadata for String, &type metadata for String, &type metadata for String, v7, v7, v7);
    uint64_t v10 = v9;
    swift_bridgeObjectRelease(v54);
    uint64_t v69 = v8;
    uint64_t v55 = v10;
    uint64_t v70 = v10;
    if (one-time initialization token for column != -1) {
      swift_once(&one-time initialization token for column, one-time initialization function for column);
    }
    long long v68 = static ErrorString.column;
    long long v67 = xmmword_3ABE60;
    uint64_t v11 = StringProtocol.replacingOccurrences<A, B>(of:with:options:range:)(&v68, &v67, 1, 0, 0, 1, &type metadata for String, &type metadata for String, &type metadata for String, v7, v7, v7);
    uint64_t v13 = v12;
    swift_bridgeObjectRelease(v55);
    uint64_t v69 = v11;
    uint64_t v56 = v13;
    uint64_t v70 = v13;
    if (one-time initialization token for tableMap != -1) {
      swift_once(&one-time initialization token for tableMap, one-time initialization function for tableMap);
    }
    long long v68 = static ErrorString.tableMap;
    long long v67 = xmmword_3ABE80;
    uint64_t v14 = StringProtocol.replacingOccurrences<A, B>(of:with:options:range:)(&v68, &v67, 1, 0, 0, 1, &type metadata for String, &type metadata for String, &type metadata for String, v7, v7, v7);
    uint64_t v16 = v15;
    swift_bridgeObjectRelease(v56);
    uint64_t v69 = v14;
    uint64_t v57 = v16;
    uint64_t v70 = v16;
    if (one-time initialization token for columnMap != -1) {
      swift_once(&one-time initialization token for columnMap, one-time initialization function for columnMap);
    }
    long long v68 = static ErrorString.columnMap;
    long long v67 = xmmword_3ABEA0;
    uint64_t v17 = StringProtocol.replacingOccurrences<A, B>(of:with:options:range:)(&v68, &v67, 1, 0, 0, 1, &type metadata for String, &type metadata for String, &type metadata for String, v7, v7, v7);
    uint64_t v19 = v18;
    swift_bridgeObjectRelease(v57);
    uint64_t v69 = v17;
    uint64_t v58 = v19;
    uint64_t v70 = v19;
    if (one-time initialization token for drop != -1) {
      swift_once(&one-time initialization token for drop, one-time initialization function for drop);
    }
    long long v68 = static ErrorString.drop;
    long long v67 = xmmword_3ABEC0;
    uint64_t v20 = StringProtocol.replacingOccurrences<A, B>(of:with:options:range:)(&v68, &v67, 1, 0, 0, 1, &type metadata for String, &type metadata for String, &type metadata for String, v7, v7, v7);
    uint64_t v22 = v21;
    swift_bridgeObjectRelease(v58);
    uint64_t v69 = v20;
    uint64_t v59 = v22;
    uint64_t v70 = v22;
    if (one-time initialization token for sequence != -1) {
      swift_once(&one-time initialization token for sequence, one-time initialization function for sequence);
    }
    long long v68 = static ErrorString.sequence;
    long long v67 = xmmword_3ABEE0;
    uint64_t v23 = StringProtocol.replacingOccurrences<A, B>(of:with:options:range:)(&v68, &v67, 1, 0, 0, 1, &type metadata for String, &type metadata for String, &type metadata for String, v7, v7, v7);
    uint64_t v25 = v24;
    swift_bridgeObjectRelease(v59);
    uint64_t v69 = v23;
    uint64_t v60 = v25;
    uint64_t v70 = v25;
    if (one-time initialization token for double != -1) {
      swift_once(&one-time initialization token for double, one-time initialization function for double);
    }
    long long v68 = static ErrorString.double;
    long long v67 = xmmword_3ABF00;
    uint64_t v26 = StringProtocol.replacingOccurrences<A, B>(of:with:options:range:)(&v68, &v67, 1, 0, 0, 1, &type metadata for String, &type metadata for String, &type metadata for String, v7, v7, v7);
    uint64_t v28 = v27;
    swift_bridgeObjectRelease(v60);
    uint64_t v69 = v26;
    uint64_t v61 = v28;
    uint64_t v70 = v28;
    if (one-time initialization token for integer != -1) {
      swift_once(&one-time initialization token for integer, one-time initialization function for integer);
    }
    long long v68 = static ErrorString.integer;
    long long v67 = xmmword_3ABF20;
    uint64_t v29 = StringProtocol.replacingOccurrences<A, B>(of:with:options:range:)(&v68, &v67, 1, 0, 0, 1, &type metadata for String, &type metadata for String, &type metadata for String, v7, v7, v7);
    uint64_t v31 = v30;
    swift_bridgeObjectRelease(v61);
    uint64_t v69 = v29;
    uint64_t v62 = v31;
    uint64_t v70 = v31;
    if (one-time initialization token for error != -1) {
      swift_once(&one-time initialization token for error, one-time initialization function for error);
    }
    long long v68 = static ErrorString.error;
    long long v67 = xmmword_3ABF40;
    uint64_t v32 = StringProtocol.replacingOccurrences<A, B>(of:with:options:range:)(&v68, &v67, 0, 0, 0, 1, &type metadata for String, &type metadata for String, &type metadata for String, v7, v7, v7);
    uint64_t v34 = v33;
    swift_bridgeObjectRelease(v62);
    uint64_t v69 = v32;
    uint64_t v63 = v34;
    uint64_t v70 = v34;
    if (one-time initialization token for archive != -1) {
      swift_once(&one-time initialization token for archive, one-time initialization function for archive);
    }
    long long v68 = static ErrorString.archive;
    long long v67 = xmmword_3ABF60;
    uint64_t v35 = StringProtocol.replacingOccurrences<A, B>(of:with:options:range:)(&v68, &v67, 0, 0, 0, 1, &type metadata for String, &type metadata for String, &type metadata for String, v7, v7, v7);
    uint64_t v37 = v36;
    swift_bridgeObjectRelease(v63);
    uint64_t v69 = v35;
    uint64_t v64 = v37;
    uint64_t v70 = v37;
    if (one-time initialization token for limit != -1) {
      swift_once(&one-time initialization token for limit, one-time initialization function for limit);
    }
    long long v68 = static ErrorString.limit;
    long long v67 = xmmword_3ABF80;
    uint64_t v38 = StringProtocol.replacingOccurrences<A, B>(of:with:options:range:)(&v68, &v67, 0, 0, 0, 1, &type metadata for String, &type metadata for String, &type metadata for String, v7, v7, v7);
    uint64_t v40 = v39;
    swift_bridgeObjectRelease(v64);
    uint64_t v69 = v38;
    uint64_t v65 = v40;
    uint64_t v70 = v40;
    if (one-time initialization token for supportedStackTypes != -1) {
      swift_once(&one-time initialization token for supportedStackTypes, one-time initialization function for supportedStackTypes);
    }
    long long v68 = static ErrorString.supportedStackTypes;
    long long v67 = xmmword_3ABFA0;
    uint64_t v41 = StringProtocol.replacingOccurrences<A, B>(of:with:options:range:)(&v68, &v67, 0, 0, 0, 1, &type metadata for String, &type metadata for String, &type metadata for String, v7, v7, v7);
    uint64_t v43 = v42;
    swift_bridgeObjectRelease(v65);
    uint64_t v69 = v41;
    uint64_t v70 = v43;
    if (one-time initialization token for sortTypes != -1) {
      swift_once(&one-time initialization token for sortTypes, one-time initialization function for sortTypes);
    }
    long long v68 = static ErrorString.sortTypes;
    long long v67 = xmmword_3ABFC0;
    uint64_t v44 = StringProtocol.replacingOccurrences<A, B>(of:with:options:range:)(&v68, &v67, 0, 0, 0, 1, &type metadata for String, &type metadata for String, &type metadata for String, v7, v7, v7);
    uint64_t v46 = v45;
    swift_bridgeObjectRelease(v43);
    type metadata accessor for OS_os_log();
    swift_bridgeObjectRetain(v46);
    uint64_t v47 = (void *)static OS_os_log.default.getter();
    unsigned __int8 v66 = static os_log_type_t.error.getter();
    uint64_t v48 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<CVarArg>);
    uint64_t v49 = (void *)swift_allocObject(v48, 72, 7);
    _OWORD v49[2] = 1;
    v49[3] = 2;
    v49[7] = &type metadata for String;
    v49[8] = lazy protocol witness table accessor for type String and conformance String();
    v49[4] = v44;
    v49[5] = v46;
    os_log(_:dso:log:type:_:)("%@ \n", 4, 2, &dword_0, v47, v66, v49);

    swift_bridgeObjectRelease(v49);
    uint64_t v50 = lazy protocol witness table accessor for type MLCreateError and conformance MLCreateError();
    swift_allocError(&type metadata for MLCreateError, v50, 0, 0);
    *(void *)uint64_t v51 = v44;
    *(void *)(v51 + 8) = v46;
    *(_OWORD *)(v51 + 16) = 0;
    *(_OWORD *)(v51 + 32) = 0;
    *(unsigned char *)(v51 + 48) = 0;
    swift_willThrow();
    tc_v1_release(v53);
  }
  return __stack_chk_guard;
}

uint64_t specialized handling<A, B, C, D>(_:_:_:_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v75 = 0;
  uint64_t v2 = tc_v1_sframe_sample(a1, a2, &v75);
  uint64_t v3 = v75;
  if (v75)
  {
    uint64_t v4 = tc_v1_error_message(v75);
    if (!v4) {
      BUG();
    }
    uint64_t v57 = v3;
    uint64_t v56 = v2;
    uint64_t v73 = String.init(cString:)(v4);
    char v60 = v5;
    uint64_t v74 = v5;
    if (one-time initialization token for table != -1) {
      swift_once(&one-time initialization token for table, one-time initialization function for table);
    }
    long long v72 = static ErrorString.table;
    long long v71 = xmmword_3ABE40;
    uint64_t v6 = lazy protocol witness table accessor for type String and conformance String();
    uint64_t v7 = StringProtocol.replacingOccurrences<A, B>(of:with:options:range:)(&v72, &v71, 1, 0, 0, 1, &type metadata for String, &type metadata for String, &type metadata for String, v6, v6, v6);
    uint64_t v9 = v8;
    swift_bridgeObjectRelease(v60);
    uint64_t v73 = v7;
    char v61 = v9;
    uint64_t v74 = v9;
    if (one-time initialization token for column != -1) {
      swift_once(&one-time initialization token for column, one-time initialization function for column);
    }
    long long v72 = static ErrorString.column;
    long long v71 = xmmword_3ABE60;
    uint64_t v10 = StringProtocol.replacingOccurrences<A, B>(of:with:options:range:)(&v72, &v71, 1, 0, 0, 1, &type metadata for String, &type metadata for String, &type metadata for String, v6, v6, v6);
    uint64_t v12 = v11;
    swift_bridgeObjectRelease(v61);
    uint64_t v73 = v10;
    char v62 = v12;
    uint64_t v74 = v12;
    if (one-time initialization token for tableMap != -1) {
      swift_once(&one-time initialization token for tableMap, one-time initialization function for tableMap);
    }
    long long v72 = static ErrorString.tableMap;
    long long v71 = xmmword_3ABE80;
    uint64_t v13 = StringProtocol.replacingOccurrences<A, B>(of:with:options:range:)(&v72, &v71, 1, 0, 0, 1, &type metadata for String, &type metadata for String, &type metadata for String, v6, v6, v6);
    uint64_t v15 = v14;
    swift_bridgeObjectRelease(v62);
    uint64_t v73 = v13;
    char v63 = v15;
    uint64_t v74 = v15;
    if (one-time initialization token for columnMap != -1) {
      swift_once(&one-time initialization token for columnMap, one-time initialization function for columnMap);
    }
    long long v72 = static ErrorString.columnMap;
    long long v71 = xmmword_3ABEA0;
    uint64_t v16 = StringProtocol.replacingOccurrences<A, B>(of:with:options:range:)(&v72, &v71, 1, 0, 0, 1, &type metadata for String, &type metadata for String, &type metadata for String, v6, v6, v6);
    uint64_t v18 = v17;
    swift_bridgeObjectRelease(v63);
    uint64_t v73 = v16;
    char v64 = v18;
    uint64_t v74 = v18;
    if (one-time initialization token for drop != -1) {
      swift_once(&one-time initialization token for drop, one-time initialization function for drop);
    }
    long long v72 = static ErrorString.drop;
    long long v71 = xmmword_3ABEC0;
    uint64_t v19 = StringProtocol.replacingOccurrences<A, B>(of:with:options:range:)(&v72, &v71, 1, 0, 0, 1, &type metadata for String, &type metadata for String, &type metadata for String, v6, v6, v6);
    uint64_t v21 = v20;
    swift_bridgeObjectRelease(v64);
    uint64_t v73 = v19;
    char v65 = v21;
    uint64_t v74 = v21;
    if (one-time initialization token for sequence != -1) {
      swift_once(&one-time initialization token for sequence, one-time initialization function for sequence);
    }
    long long v72 = static ErrorString.sequence;
    long long v71 = xmmword_3ABEE0;
    uint64_t v22 = StringProtocol.replacingOccurrences<A, B>(of:with:options:range:)(&v72, &v71, 1, 0, 0, 1, &type metadata for String, &type metadata for String, &type metadata for String, v6, v6, v6);
    uint64_t v24 = v23;
    swift_bridgeObjectRelease(v65);
    uint64_t v73 = v22;
    uint64_t v74 = v24;
    if (one-time initialization token for double != -1) {
      swift_once(&one-time initialization token for double, one-time initialization function for double);
    }
    long long v72 = static ErrorString.double;
    long long v71 = xmmword_3ABF00;
    uint64_t v25 = StringProtocol.replacingOccurrences<A, B>(of:with:options:range:)(&v72, &v71, 1, 0, 0, 1, &type metadata for String, &type metadata for String, &type metadata for String, v6, v6, v6);
    uint64_t v27 = v26;
    swift_bridgeObjectRelease(v24);
    uint64_t v73 = v25;
    char v66 = v27;
    uint64_t v74 = v27;
    if (one-time initialization token for integer != -1) {
      swift_once(&one-time initialization token for integer, one-time initialization function for integer);
    }
    long long v72 = static ErrorString.integer;
    long long v71 = xmmword_3ABF20;
    uint64_t v28 = StringProtocol.replacingOccurrences<A, B>(of:with:options:range:)(&v72, &v71, 1, 0, 0, 1, &type metadata for String, &type metadata for String, &type metadata for String, v6, v6, v6);
    uint64_t v30 = v29;
    swift_bridgeObjectRelease(v66);
    uint64_t v73 = v28;
    char v67 = v30;
    uint64_t v74 = v30;
    if (one-time initialization token for error != -1) {
      swift_once(&one-time initialization token for error, one-time initialization function for error);
    }
    long long v72 = static ErrorString.error;
    long long v71 = xmmword_3ABF40;
    uint64_t v31 = StringProtocol.replacingOccurrences<A, B>(of:with:options:range:)(&v72, &v71, 0, 0, 0, 1, &type metadata for String, &type metadata for String, &type metadata for String, v6, v6, v6);
    uint64_t v33 = v32;
    swift_bridgeObjectRelease(v67);
    uint64_t v73 = v31;
    char v68 = v33;
    uint64_t v74 = v33;
    if (one-time initialization token for archive != -1) {
      swift_once(&one-time initialization token for archive, one-time initialization function for archive);
    }
    long long v72 = static ErrorString.archive;
    long long v71 = xmmword_3ABF60;
    uint64_t v34 = StringProtocol.replacingOccurrences<A, B>(of:with:options:range:)(&v72, &v71, 0, 0, 0, 1, &type metadata for String, &type metadata for String, &type metadata for String, v6, v6, v6);
    uint64_t v36 = v35;
    swift_bridgeObjectRelease(v68);
    uint64_t v73 = v34;
    char v69 = v36;
    uint64_t v74 = v36;
    if (one-time initialization token for limit != -1) {
      swift_once(&one-time initialization token for limit, one-time initialization function for limit);
    }
    long long v72 = static ErrorString.limit;
    long long v71 = xmmword_3ABF80;
    uint64_t v37 = StringProtocol.replacingOccurrences<A, B>(of:with:options:range:)(&v72, &v71, 0, 0, 0, 1, &type metadata for String, &type metadata for String, &type metadata for String, v6, v6, v6);
    uint64_t v39 = v38;
    swift_bridgeObjectRelease(v69);
    uint64_t v73 = v37;
    uint64_t v74 = v39;
    if (one-time initialization token for supportedStackTypes != -1) {
      swift_once(&one-time initialization token for supportedStackTypes, one-time initialization function for supportedStackTypes);
    }
    long long v72 = static ErrorString.supportedStackTypes;
    long long v71 = xmmword_3ABFA0;
    uint64_t v40 = StringProtocol.replacingOccurrences<A, B>(of:with:options:range:)(&v72, &v71, 0, 0, 0, 1, &type metadata for String, &type metadata for String, &type metadata for String, v6, v6, v6);
    char v41 = v39;
    uint64_t v43 = v42;
    swift_bridgeObjectRelease(v41);
    uint64_t v73 = v40;
    uint64_t v74 = v43;
    if (one-time initialization token for sortTypes != -1) {
      swift_once(&one-time initialization token for sortTypes, one-time initialization function for sortTypes);
    }
    long long v72 = static ErrorString.sortTypes;
    long long v71 = xmmword_3ABFC0;
    uint64_t v70 = StringProtocol.replacingOccurrences<A, B>(of:with:options:range:)(&v72, &v71, 0, 0, 0, 1, &type metadata for String, &type metadata for String, &type metadata for String, v6, v6, v6);
    uint64_t v45 = v44;
    uint64_t v58 = v44;
    swift_bridgeObjectRelease(v43);
    type metadata accessor for OS_os_log();
    uint64_t v46 = v45;
    swift_bridgeObjectRetain(v45);
    uint64_t v47 = (void *)static OS_os_log.default.getter(v45);
    unsigned __int8 v59 = static os_log_type_t.error.getter(v46, &v71);
    uint64_t v48 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<CVarArg>);
    uint64_t v49 = (void *)swift_allocObject(v48, 72, 7);
    _OWORD v49[2] = 1;
    v49[3] = 2;
    v49[7] = &type metadata for String;
    v49[8] = lazy protocol witness table accessor for type String and conformance String();
    v49[4] = v70;
    v49[5] = v58;
    os_log(_:dso:log:type:_:)("%@ \n", 4, 2, &dword_0, v47, v59, v49);

    swift_bridgeObjectRelease((_BYTE)v49);
    uint64_t v50 = lazy protocol witness table accessor for type MLCreateError and conformance MLCreateError();
    swift_allocError(&type metadata for MLCreateError, v50, 0, 0);
    *(void *)uint64_t v51 = v70;
    *(void *)(v51 + 8) = v58;
    *(_OWORD *)(v51 + 16) = 0;
    *(_OWORD *)(v51 + 32) = 0;
    *(unsigned char *)(v51 + 48) = 0;
    swift_willThrow(&type metadata for MLCreateError, v50, v51, v52, v53, v54);
    tc_v1_release(v57);
    return v56;
  }
  return v2;
}

uint64_t specialized handling<A, B, C, D>(_:_:_:_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(uint64_t, uint64_t, uint64_t, uint64_t *))
{
  uint64_t v74 = 0;
  uint64_t v4 = a4(a1, a2, a3, &v74);
  uint64_t v5 = v74;
  if (v74)
  {
    uint64_t v6 = tc_v1_error_message(v74);
    if (!v6) {
      BUG();
    }
    uint64_t v56 = v5;
    uint64_t v55 = v4;
    uint64_t v72 = String.init(cString:)(v6);
    uint64_t v59 = v7;
    uint64_t v73 = v7;
    if (one-time initialization token for table != -1) {
      swift_once(&one-time initialization token for table, one-time initialization function for table);
    }
    long long v71 = static ErrorString.table;
    long long v70 = xmmword_3ABE40;
    uint64_t v8 = lazy protocol witness table accessor for type String and conformance String();
    uint64_t v9 = StringProtocol.replacingOccurrences<A, B>(of:with:options:range:)(&v71, &v70, 1, 0, 0, 1, &type metadata for String, &type metadata for String, &type metadata for String, v8, v8, v8);
    uint64_t v11 = v10;
    swift_bridgeObjectRelease(v59);
    uint64_t v72 = v9;
    uint64_t v60 = v11;
    uint64_t v73 = v11;
    if (one-time initialization token for column != -1) {
      swift_once(&one-time initialization token for column, one-time initialization function for column);
    }
    long long v71 = static ErrorString.column;
    long long v70 = xmmword_3ABE60;
    uint64_t v12 = StringProtocol.replacingOccurrences<A, B>(of:with:options:range:)(&v71, &v70, 1, 0, 0, 1, &type metadata for String, &type metadata for String, &type metadata for String, v8, v8, v8);
    uint64_t v14 = v13;
    swift_bridgeObjectRelease(v60);
    uint64_t v72 = v12;
    uint64_t v61 = v14;
    uint64_t v73 = v14;
    if (one-time initialization token for tableMap != -1) {
      swift_once(&one-time initialization token for tableMap, one-time initialization function for tableMap);
    }
    long long v71 = static ErrorString.tableMap;
    long long v70 = xmmword_3ABE80;
    uint64_t v15 = StringProtocol.replacingOccurrences<A, B>(of:with:options:range:)(&v71, &v70, 1, 0, 0, 1, &type metadata for String, &type metadata for String, &type metadata for String, v8, v8, v8);
    uint64_t v17 = v16;
    swift_bridgeObjectRelease(v61);
    uint64_t v72 = v15;
    uint64_t v62 = v17;
    uint64_t v73 = v17;
    if (one-time initialization token for columnMap != -1) {
      swift_once(&one-time initialization token for columnMap, one-time initialization function for columnMap);
    }
    long long v71 = static ErrorString.columnMap;
    long long v70 = xmmword_3ABEA0;
    uint64_t v18 = StringProtocol.replacingOccurrences<A, B>(of:with:options:range:)(&v71, &v70, 1, 0, 0, 1, &type metadata for String, &type metadata for String, &type metadata for String, v8, v8, v8);
    uint64_t v20 = v19;
    swift_bridgeObjectRelease(v62);
    uint64_t v72 = v18;
    uint64_t v63 = v20;
    uint64_t v73 = v20;
    if (one-time initialization token for drop != -1) {
      swift_once(&one-time initialization token for drop, one-time initialization function for drop);
    }
    long long v71 = static ErrorString.drop;
    long long v70 = xmmword_3ABEC0;
    uint64_t v21 = StringProtocol.replacingOccurrences<A, B>(of:with:options:range:)(&v71, &v70, 1, 0, 0, 1, &type metadata for String, &type metadata for String, &type metadata for String, v8, v8, v8);
    uint64_t v23 = v22;
    swift_bridgeObjectRelease(v63);
    uint64_t v72 = v21;
    uint64_t v64 = v23;
    uint64_t v73 = v23;
    if (one-time initialization token for sequence != -1) {
      swift_once(&one-time initialization token for sequence, one-time initialization function for sequence);
    }
    long long v71 = static ErrorString.sequence;
    long long v70 = xmmword_3ABEE0;
    uint64_t v24 = StringProtocol.replacingOccurrences<A, B>(of:with:options:range:)(&v71, &v70, 1, 0, 0, 1, &type metadata for String, &type metadata for String, &type metadata for String, v8, v8, v8);
    uint64_t v26 = v25;
    swift_bridgeObjectRelease(v64);
    uint64_t v72 = v24;
    uint64_t v73 = v26;
    if (one-time initialization token for double != -1) {
      swift_once(&one-time initialization token for double, one-time initialization function for double);
    }
    long long v71 = static ErrorString.double;
    long long v70 = xmmword_3ABF00;
    uint64_t v27 = StringProtocol.replacingOccurrences<A, B>(of:with:options:range:)(&v71, &v70, 1, 0, 0, 1, &type metadata for String, &type metadata for String, &type metadata for String, v8, v8, v8);
    uint64_t v29 = v28;
    swift_bridgeObjectRelease(v26);
    uint64_t v72 = v27;
    uint64_t v65 = v29;
    uint64_t v73 = v29;
    if (one-time initialization token for integer != -1) {
      swift_once(&one-time initialization token for integer, one-time initialization function for integer);
    }
    long long v71 = static ErrorString.integer;
    long long v70 = xmmword_3ABF20;
    uint64_t v30 = StringProtocol.replacingOccurrences<A, B>(of:with:options:range:)(&v71, &v70, 1, 0, 0, 1, &type metadata for String, &type metadata for String, &type metadata for String, v8, v8, v8);
    uint64_t v32 = v31;
    swift_bridgeObjectRelease(v65);
    uint64_t v72 = v30;
    uint64_t v66 = v32;
    uint64_t v73 = v32;
    if (one-time initialization token for error != -1) {
      swift_once(&one-time initialization token for error, one-time initialization function for error);
    }
    long long v71 = static ErrorString.error;
    long long v70 = xmmword_3ABF40;
    uint64_t v33 = StringProtocol.replacingOccurrences<A, B>(of:with:options:range:)(&v71, &v70, 0, 0, 0, 1, &type metadata for String, &type metadata for String, &type metadata for String, v8, v8, v8);
    uint64_t v35 = v34;
    swift_bridgeObjectRelease(v66);
    uint64_t v72 = v33;
    uint64_t v67 = v35;
    uint64_t v73 = v35;
    if (one-time initialization token for archive != -1) {
      swift_once(&one-time initialization token for archive, one-time initialization function for archive);
    }
    long long v71 = static ErrorString.archive;
    long long v70 = xmmword_3ABF60;
    uint64_t v36 = StringProtocol.replacingOccurrences<A, B>(of:with:options:range:)(&v71, &v70, 0, 0, 0, 1, &type metadata for String, &type metadata for String, &type metadata for String, v8, v8, v8);
    uint64_t v38 = v37;
    swift_bridgeObjectRelease(v67);
    uint64_t v72 = v36;
    uint64_t v68 = v38;
    uint64_t v73 = v38;
    if (one-time initialization token for limit != -1) {
      swift_once(&one-time initialization token for limit, one-time initialization function for limit);
    }
    long long v71 = static ErrorString.limit;
    long long v70 = xmmword_3ABF80;
    uint64_t v39 = StringProtocol.replacingOccurrences<A, B>(of:with:options:range:)(&v71, &v70, 0, 0, 0, 1, &type metadata for String, &type metadata for String, &type metadata for String, v8, v8, v8);
    uint64_t v41 = v40;
    swift_bridgeObjectRelease(v68);
    uint64_t v72 = v39;
    uint64_t v73 = v41;
    if (one-time initialization token for supportedStackTypes != -1) {
      swift_once(&one-time initialization token for supportedStackTypes, one-time initialization function for supportedStackTypes);
    }
    long long v71 = static ErrorString.supportedStackTypes;
    long long v70 = xmmword_3ABFA0;
    uint64_t v42 = StringProtocol.replacingOccurrences<A, B>(of:with:options:range:)(&v71, &v70, 0, 0, 0, 1, &type metadata for String, &type metadata for String, &type metadata for String, v8, v8, v8);
    uint64_t v43 = v41;
    uint64_t v45 = v44;
    swift_bridgeObjectRelease(v43);
    uint64_t v72 = v42;
    uint64_t v73 = v45;
    if (one-time initialization token for sortTypes != -1) {
      swift_once(&one-time initialization token for sortTypes, one-time initialization function for sortTypes);
    }
    long long v71 = static ErrorString.sortTypes;
    long long v70 = xmmword_3ABFC0;
    uint64_t v69 = StringProtocol.replacingOccurrences<A, B>(of:with:options:range:)(&v71, &v70, 0, 0, 0, 1, &type metadata for String, &type metadata for String, &type metadata for String, v8, v8, v8);
    uint64_t v47 = v46;
    uint64_t v57 = v46;
    swift_bridgeObjectRelease(v45);
    type metadata accessor for OS_os_log();
    uint64_t v48 = v47;
    swift_bridgeObjectRetain(v47);
    uint64_t v49 = (void *)static OS_os_log.default.getter(v47);
    unsigned __int8 v58 = static os_log_type_t.error.getter(v48, &v70);
    uint64_t v50 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<CVarArg>);
    uint64_t v51 = (void *)swift_allocObject(v50, 72, 7);
    void v51[2] = 1;
    v51[3] = 2;
    v51[7] = &type metadata for String;
    v51[8] = lazy protocol witness table accessor for type String and conformance String();
    void v51[4] = v69;
    v51[5] = v57;
    os_log(_:dso:log:type:_:)("%@ \n", 4, 2, &dword_0, v49, v58, v51);

    swift_bridgeObjectRelease(v51);
    uint64_t v52 = lazy protocol witness table accessor for type MLCreateError and conformance MLCreateError();
    swift_allocError(&type metadata for MLCreateError, v52, 0, 0);
    *(void *)uint64_t v53 = v69;
    *(void *)(v53 + 8) = v57;
    *(_OWORD *)(v53 + 16) = 0;
    *(_OWORD *)(v53 + 32) = 0;
    *(unsigned char *)(v53 + 48) = 0;
    swift_willThrow();
    tc_v1_release(v56);
    return v55;
  }
  return v4;
}

NSURL *specialized handling<A, B, C, D, E>(_:_:_:_:_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v71 = 0;
  tc_v1_flex_dict_extract_entry(a1, a2, a3, a4, &v71);
  uint64_t v4 = v71;
  if (v71)
  {
    uint64_t v5 = tc_v1_error_message(v71);
    if (!v5) {
      BUG();
    }
    uint64_t v53 = v4;
    uint64_t v69 = String.init(cString:)(v5);
    uint64_t v54 = v6;
    uint64_t v70 = v6;
    if (one-time initialization token for table != -1) {
      swift_once(&one-time initialization token for table, one-time initialization function for table);
    }
    long long v68 = static ErrorString.table;
    long long v67 = xmmword_3ABE40;
    uint64_t v7 = lazy protocol witness table accessor for type String and conformance String();
    uint64_t v8 = StringProtocol.replacingOccurrences<A, B>(of:with:options:range:)(&v68, &v67, 1, 0, 0, 1, &type metadata for String, &type metadata for String, &type metadata for String, v7, v7, v7);
    uint64_t v10 = v9;
    swift_bridgeObjectRelease(v54);
    uint64_t v69 = v8;
    uint64_t v55 = v10;
    uint64_t v70 = v10;
    if (one-time initialization token for column != -1) {
      swift_once(&one-time initialization token for column, one-time initialization function for column);
    }
    long long v68 = static ErrorString.column;
    long long v67 = xmmword_3ABE60;
    uint64_t v11 = StringProtocol.replacingOccurrences<A, B>(of:with:options:range:)(&v68, &v67, 1, 0, 0, 1, &type metadata for String, &type metadata for String, &type metadata for String, v7, v7, v7);
    uint64_t v13 = v12;
    swift_bridgeObjectRelease(v55);
    uint64_t v69 = v11;
    uint64_t v56 = v13;
    uint64_t v70 = v13;
    if (one-time initialization token for tableMap != -1) {
      swift_once(&one-time initialization token for tableMap, one-time initialization function for tableMap);
    }
    long long v68 = static ErrorString.tableMap;
    long long v67 = xmmword_3ABE80;
    uint64_t v14 = StringProtocol.replacingOccurrences<A, B>(of:with:options:range:)(&v68, &v67, 1, 0, 0, 1, &type metadata for String, &type metadata for String, &type metadata for String, v7, v7, v7);
    uint64_t v16 = v15;
    swift_bridgeObjectRelease(v56);
    uint64_t v69 = v14;
    uint64_t v57 = v16;
    uint64_t v70 = v16;
    if (one-time initialization token for columnMap != -1) {
      swift_once(&one-time initialization token for columnMap, one-time initialization function for columnMap);
    }
    long long v68 = static ErrorString.columnMap;
    long long v67 = xmmword_3ABEA0;
    uint64_t v17 = StringProtocol.replacingOccurrences<A, B>(of:with:options:range:)(&v68, &v67, 1, 0, 0, 1, &type metadata for String, &type metadata for String, &type metadata for String, v7, v7, v7);
    uint64_t v19 = v18;
    swift_bridgeObjectRelease(v57);
    uint64_t v69 = v17;
    uint64_t v58 = v19;
    uint64_t v70 = v19;
    if (one-time initialization token for drop != -1) {
      swift_once(&one-time initialization token for drop, one-time initialization function for drop);
    }
    long long v68 = static ErrorString.drop;
    long long v67 = xmmword_3ABEC0;
    uint64_t v20 = StringProtocol.replacingOccurrences<A, B>(of:with:options:range:)(&v68, &v67, 1, 0, 0, 1, &type metadata for String, &type metadata for String, &type metadata for String, v7, v7, v7);
    uint64_t v22 = v21;
    swift_bridgeObjectRelease(v58);
    uint64_t v69 = v20;
    uint64_t v59 = v22;
    uint64_t v70 = v22;
    if (one-time initialization token for sequence != -1) {
      swift_once(&one-time initialization token for sequence, one-time initialization function for sequence);
    }
    long long v68 = static ErrorString.sequence;
    long long v67 = xmmword_3ABEE0;
    uint64_t v23 = StringProtocol.replacingOccurrences<A, B>(of:with:options:range:)(&v68, &v67, 1, 0, 0, 1, &type metadata for String, &type metadata for String, &type metadata for String, v7, v7, v7);
    uint64_t v25 = v24;
    swift_bridgeObjectRelease(v59);
    uint64_t v69 = v23;
    uint64_t v60 = v25;
    uint64_t v70 = v25;
    if (one-time initialization token for double != -1) {
      swift_once(&one-time initialization token for double, one-time initialization function for double);
    }
    long long v68 = static ErrorString.double;
    long long v67 = xmmword_3ABF00;
    uint64_t v26 = StringProtocol.replacingOccurrences<A, B>(of:with:options:range:)(&v68, &v67, 1, 0, 0, 1, &type metadata for String, &type metadata for String, &type metadata for String, v7, v7, v7);
    uint64_t v28 = v27;
    swift_bridgeObjectRelease(v60);
    uint64_t v69 = v26;
    uint64_t v61 = v28;
    uint64_t v70 = v28;
    if (one-time initialization token for integer != -1) {
      swift_once(&one-time initialization token for integer, one-time initialization function for integer);
    }
    long long v68 = static ErrorString.integer;
    long long v67 = xmmword_3ABF20;
    uint64_t v29 = StringProtocol.replacingOccurrences<A, B>(of:with:options:range:)(&v68, &v67, 1, 0, 0, 1, &type metadata for String, &type metadata for String, &type metadata for String, v7, v7, v7);
    uint64_t v31 = v30;
    swift_bridgeObjectRelease(v61);
    uint64_t v69 = v29;
    uint64_t v62 = v31;
    uint64_t v70 = v31;
    if (one-time initialization token for error != -1) {
      swift_once(&one-time initialization token for error, one-time initialization function for error);
    }
    long long v68 = static ErrorString.error;
    long long v67 = xmmword_3ABF40;
    uint64_t v32 = StringProtocol.replacingOccurrences<A, B>(of:with:options:range:)(&v68, &v67, 0, 0, 0, 1, &type metadata for String, &type metadata for String, &type metadata for String, v7, v7, v7);
    uint64_t v34 = v33;
    swift_bridgeObjectRelease(v62);
    uint64_t v69 = v32;
    uint64_t v63 = v34;
    uint64_t v70 = v34;
    if (one-time initialization token for archive != -1) {
      swift_once(&one-time initialization token for archive, one-time initialization function for archive);
    }
    long long v68 = static ErrorString.archive;
    long long v67 = xmmword_3ABF60;
    uint64_t v35 = StringProtocol.replacingOccurrences<A, B>(of:with:options:range:)(&v68, &v67, 0, 0, 0, 1, &type metadata for String, &type metadata for String, &type metadata for String, v7, v7, v7);
    uint64_t v37 = v36;
    swift_bridgeObjectRelease(v63);
    uint64_t v69 = v35;
    uint64_t v64 = v37;
    uint64_t v70 = v37;
    if (one-time initialization token for limit != -1) {
      swift_once(&one-time initialization token for limit, one-time initialization function for limit);
    }
    long long v68 = static ErrorString.limit;
    long long v67 = xmmword_3ABF80;
    uint64_t v38 = StringProtocol.replacingOccurrences<A, B>(of:with:options:range:)(&v68, &v67, 0, 0, 0, 1, &type metadata for String, &type metadata for String, &type metadata for String, v7, v7, v7);
    uint64_t v40 = v39;
    swift_bridgeObjectRelease(v64);
    uint64_t v69 = v38;
    uint64_t v65 = v40;
    uint64_t v70 = v40;
    if (one-time initialization token for supportedStackTypes != -1) {
      swift_once(&one-time initialization token for supportedStackTypes, one-time initialization function for supportedStackTypes);
    }
    long long v68 = static ErrorString.supportedStackTypes;
    long long v67 = xmmword_3ABFA0;
    uint64_t v41 = StringProtocol.replacingOccurrences<A, B>(of:with:options:range:)(&v68, &v67, 0, 0, 0, 1, &type metadata for String, &type metadata for String, &type metadata for String, v7, v7, v7);
    uint64_t v43 = v42;
    swift_bridgeObjectRelease(v65);
    uint64_t v69 = v41;
    uint64_t v70 = v43;
    if (one-time initialization token for sortTypes != -1) {
      swift_once(&one-time initialization token for sortTypes, one-time initialization function for sortTypes);
    }
    long long v68 = static ErrorString.sortTypes;
    long long v67 = xmmword_3ABFC0;
    uint64_t v44 = StringProtocol.replacingOccurrences<A, B>(of:with:options:range:)(&v68, &v67, 0, 0, 0, 1, &type metadata for String, &type metadata for String, &type metadata for String, v7, v7, v7);
    uint64_t v46 = v45;
    swift_bridgeObjectRelease(v43);
    type metadata accessor for OS_os_log();
    swift_bridgeObjectRetain(v46);
    uint64_t v47 = (void *)static OS_os_log.default.getter();
    unsigned __int8 v66 = static os_log_type_t.error.getter();
    uint64_t v48 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<CVarArg>);
    uint64_t v49 = (void *)swift_allocObject(v48, 72, 7);
    _OWORD v49[2] = 1;
    v49[3] = 2;
    v49[7] = &type metadata for String;
    v49[8] = lazy protocol witness table accessor for type String and conformance String();
    v49[4] = v44;
    v49[5] = v46;
    os_log(_:dso:log:type:_:)("%@ \n", 4, 2, &dword_0, v47, v66, v49);

    swift_bridgeObjectRelease(v49);
    uint64_t v50 = lazy protocol witness table accessor for type MLCreateError and conformance MLCreateError();
    swift_allocError(&type metadata for MLCreateError, v50, 0, 0);
    *(void *)uint64_t v51 = v44;
    *(void *)(v51 + 8) = v46;
    *(_OWORD *)(v51 + 16) = 0;
    *(_OWORD *)(v51 + 32) = 0;
    *(unsigned char *)(v51 + 48) = 0;
    swift_willThrow();
    tc_v1_release(v53);
  }
  return __stack_chk_guard;
}

{
  specialized handling<A, B, C, D, E>(_:_:_:_:_:)(a1, a2, a3, a4, (void (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t *))&tc_v1_sframe_export);
  return __stack_chk_guard;
}

{
  specialized handling<A, B, C, D, E>(_:_:_:_:_:)(a1, a2, a3, a4, (void (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t *))&tc_v1_groupby_aggregator_add_simple_aggregator);
  return __stack_chk_guard;
}

{
  specialized handling<A, B, C, D, E>(_:_:_:_:_:)(a1, a2, a3, a4, (void (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t *))&tc_v1_groupby_aggregator_add_argmax);
  return __stack_chk_guard;
}

{
  specialized handling<A, B, C, D, E>(_:_:_:_:_:)(a1, a2, a3, a4, (void (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t *))&tc_v1_groupby_aggregator_add_argmin);
  return __stack_chk_guard;
}

{
  specialized handling<A, B, C, D, E>(_:_:_:_:_:)(a1, a2, a3, a4, (void (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t *))&tc_v1_groupby_aggregator_add_concat_two_columns);
  return __stack_chk_guard;
}

uint64_t specialized handling<A, B, C, D, E>(_:_:_:_:_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v73 = 0;
  uint64_t v4 = tc_v1_ndarray_create_from_data(a1, a2, a3, a4, &v73);
  uint64_t v5 = v73;
  if (v73)
  {
    uint64_t v6 = tc_v1_error_message(v73);
    if (!v6) {
      BUG();
    }
    uint64_t v55 = v5;
    uint64_t v54 = v4;
    uint64_t v71 = String.init(cString:)(v6);
    uint64_t v56 = v7;
    uint64_t v72 = v7;
    if (one-time initialization token for table != -1) {
      swift_once(&one-time initialization token for table, one-time initialization function for table);
    }
    long long v70 = static ErrorString.table;
    long long v69 = xmmword_3ABE40;
    uint64_t v8 = lazy protocol witness table accessor for type String and conformance String();
    uint64_t v9 = StringProtocol.replacingOccurrences<A, B>(of:with:options:range:)(&v70, &v69, 1, 0, 0, 1, &type metadata for String, &type metadata for String, &type metadata for String, v8, v8, v8);
    uint64_t v11 = v10;
    swift_bridgeObjectRelease(v56);
    uint64_t v71 = v9;
    uint64_t v57 = v11;
    uint64_t v72 = v11;
    if (one-time initialization token for column != -1) {
      swift_once(&one-time initialization token for column, one-time initialization function for column);
    }
    long long v70 = static ErrorString.column;
    long long v69 = xmmword_3ABE60;
    uint64_t v12 = StringProtocol.replacingOccurrences<A, B>(of:with:options:range:)(&v70, &v69, 1, 0, 0, 1, &type metadata for String, &type metadata for String, &type metadata for String, v8, v8, v8);
    uint64_t v14 = v13;
    swift_bridgeObjectRelease(v57);
    uint64_t v71 = v12;
    uint64_t v58 = v14;
    uint64_t v72 = v14;
    if (one-time initialization token for tableMap != -1) {
      swift_once(&one-time initialization token for tableMap, one-time initialization function for tableMap);
    }
    long long v70 = static ErrorString.tableMap;
    long long v69 = xmmword_3ABE80;
    uint64_t v15 = StringProtocol.replacingOccurrences<A, B>(of:with:options:range:)(&v70, &v69, 1, 0, 0, 1, &type metadata for String, &type metadata for String, &type metadata for String, v8, v8, v8);
    uint64_t v17 = v16;
    swift_bridgeObjectRelease(v58);
    uint64_t v71 = v15;
    uint64_t v59 = v17;
    uint64_t v72 = v17;
    if (one-time initialization token for columnMap != -1) {
      swift_once(&one-time initialization token for columnMap, one-time initialization function for columnMap);
    }
    long long v70 = static ErrorString.columnMap;
    long long v69 = xmmword_3ABEA0;
    uint64_t v18 = StringProtocol.replacingOccurrences<A, B>(of:with:options:range:)(&v70, &v69, 1, 0, 0, 1, &type metadata for String, &type metadata for String, &type metadata for String, v8, v8, v8);
    uint64_t v20 = v19;
    swift_bridgeObjectRelease(v59);
    uint64_t v71 = v18;
    uint64_t v60 = v20;
    uint64_t v72 = v20;
    if (one-time initialization token for drop != -1) {
      swift_once(&one-time initialization token for drop, one-time initialization function for drop);
    }
    long long v70 = static ErrorString.drop;
    long long v69 = xmmword_3ABEC0;
    uint64_t v21 = StringProtocol.replacingOccurrences<A, B>(of:with:options:range:)(&v70, &v69, 1, 0, 0, 1, &type metadata for String, &type metadata for String, &type metadata for String, v8, v8, v8);
    uint64_t v23 = v22;
    swift_bridgeObjectRelease(v60);
    uint64_t v71 = v21;
    uint64_t v61 = v23;
    uint64_t v72 = v23;
    if (one-time initialization token for sequence != -1) {
      swift_once(&one-time initialization token for sequence, one-time initialization function for sequence);
    }
    long long v70 = static ErrorString.sequence;
    long long v69 = xmmword_3ABEE0;
    uint64_t v24 = StringProtocol.replacingOccurrences<A, B>(of:with:options:range:)(&v70, &v69, 1, 0, 0, 1, &type metadata for String, &type metadata for String, &type metadata for String, v8, v8, v8);
    uint64_t v26 = v25;
    swift_bridgeObjectRelease(v61);
    uint64_t v71 = v24;
    uint64_t v72 = v26;
    if (one-time initialization token for double != -1) {
      swift_once(&one-time initialization token for double, one-time initialization function for double);
    }
    long long v70 = static ErrorString.double;
    long long v69 = xmmword_3ABF00;
    uint64_t v27 = StringProtocol.replacingOccurrences<A, B>(of:with:options:range:)(&v70, &v69, 1, 0, 0, 1, &type metadata for String, &type metadata for String, &type metadata for String, v8, v8, v8);
    uint64_t v29 = v28;
    swift_bridgeObjectRelease(v26);
    uint64_t v71 = v27;
    uint64_t v62 = v29;
    uint64_t v72 = v29;
    if (one-time initialization token for integer != -1) {
      swift_once(&one-time initialization token for integer, one-time initialization function for integer);
    }
    long long v70 = static ErrorString.integer;
    long long v69 = xmmword_3ABF20;
    uint64_t v30 = StringProtocol.replacingOccurrences<A, B>(of:with:options:range:)(&v70, &v69, 1, 0, 0, 1, &type metadata for String, &type metadata for String, &type metadata for String, v8, v8, v8);
    uint64_t v32 = v31;
    swift_bridgeObjectRelease(v62);
    uint64_t v71 = v30;
    uint64_t v63 = v32;
    uint64_t v72 = v32;
    if (one-time initialization token for error != -1) {
      swift_once(&one-time initialization token for error, one-time initialization function for error);
    }
    long long v70 = static ErrorString.error;
    long long v69 = xmmword_3ABF40;
    uint64_t v33 = StringProtocol.replacingOccurrences<A, B>(of:with:options:range:)(&v70, &v69, 0, 0, 0, 1, &type metadata for String, &type metadata for String, &type metadata for String, v8, v8, v8);
    uint64_t v35 = v34;
    swift_bridgeObjectRelease(v63);
    uint64_t v71 = v33;
    uint64_t v64 = v35;
    uint64_t v72 = v35;
    if (one-time initialization token for archive != -1) {
      swift_once(&one-time initialization token for archive, one-time initialization function for archive);
    }
    long long v70 = static ErrorString.archive;
    long long v69 = xmmword_3ABF60;
    uint64_t v36 = StringProtocol.replacingOccurrences<A, B>(of:with:options:range:)(&v70, &v69, 0, 0, 0, 1, &type metadata for String, &type metadata for String, &type metadata for String, v8, v8, v8);
    uint64_t v38 = v37;
    swift_bridgeObjectRelease(v64);
    uint64_t v71 = v36;
    uint64_t v65 = v38;
    uint64_t v72 = v38;
    if (one-time initialization token for limit != -1) {
      swift_once(&one-time initialization token for limit, one-time initialization function for limit);
    }
    long long v70 = static ErrorString.limit;
    long long v69 = xmmword_3ABF80;
    uint64_t v39 = StringProtocol.replacingOccurrences<A, B>(of:with:options:range:)(&v70, &v69, 0, 0, 0, 1, &type metadata for String, &type metadata for String, &type metadata for String, v8, v8, v8);
    uint64_t v41 = v40;
    swift_bridgeObjectRelease(v65);
    uint64_t v71 = v39;
    uint64_t v66 = v41;
    uint64_t v72 = v41;
    if (one-time initialization token for supportedStackTypes != -1) {
      swift_once(&one-time initialization token for supportedStackTypes, one-time initialization function for supportedStackTypes);
    }
    long long v70 = static ErrorString.supportedStackTypes;
    long long v69 = xmmword_3ABFA0;
    uint64_t v42 = StringProtocol.replacingOccurrences<A, B>(of:with:options:range:)(&v70, &v69, 0, 0, 0, 1, &type metadata for String, &type metadata for String, &type metadata for String, v8, v8, v8);
    uint64_t v44 = v43;
    swift_bridgeObjectRelease(v66);
    uint64_t v71 = v42;
    uint64_t v67 = v44;
    uint64_t v72 = v44;
    if (one-time initialization token for sortTypes != -1) {
      swift_once(&one-time initialization token for sortTypes, one-time initialization function for sortTypes);
    }
    long long v70 = static ErrorString.sortTypes;
    long long v69 = xmmword_3ABFC0;
    uint64_t v45 = StringProtocol.replacingOccurrences<A, B>(of:with:options:range:)(&v70, &v69, 0, 0, 0, 1, &type metadata for String, &type metadata for String, &type metadata for String, v8, v8, v8);
    uint64_t v47 = v46;
    swift_bridgeObjectRelease(v67);
    type metadata accessor for OS_os_log();
    swift_bridgeObjectRetain(v47);
    uint64_t v48 = (void *)static OS_os_log.default.getter();
    unsigned __int8 v68 = static os_log_type_t.error.getter();
    uint64_t v49 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<CVarArg>);
    uint64_t v50 = (void *)swift_allocObject(v49, 72, 7);
    v50[2] = 1;
    v50[3] = 2;
    v50[7] = &type metadata for String;
    v50[8] = lazy protocol witness table accessor for type String and conformance String();
    v50[4] = v45;
    v50[5] = v47;
    os_log(_:dso:log:type:_:)("%@ \n", 4, 2, &dword_0, v48, v68, v50);

    swift_bridgeObjectRelease(v50);
    uint64_t v51 = lazy protocol witness table accessor for type MLCreateError and conformance MLCreateError();
    swift_allocError(&type metadata for MLCreateError, v51, 0, 0);
    *(void *)uint64_t v52 = v45;
    *(void *)(v52 + 8) = v47;
    *(_OWORD *)(v52 + 16) = 0;
    *(_OWORD *)(v52 + 32) = 0;
    *(unsigned char *)(v52 + 48) = 0;
    swift_willThrow();
    tc_v1_release(v55);
    return v54;
  }
  return v4;
}

{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  void *v48;
  uint64_t v49;
  void *v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v57;
  uint64_t v58;
  char v59;
  char v60;
  char v61;
  char v62;
  char v63;
  char v64;
  char v65;
  char v66;
  char v67;
  char v68;
  char v69;
  char v70;
  unsigned __int8 v71;
  long long v72;
  long long v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;

  uint64_t v76 = 0;
  uint64_t v4 = tc_v1_sframe_join_on_multiple_columns(a1, a2, a3, a4, &v76);
  uint64_t v5 = v76;
  if (v76)
  {
    uint64_t v6 = tc_v1_error_message(v76);
    if (!v6) {
      BUG();
    }
    uint64_t v58 = v5;
    uint64_t v57 = v4;
    uint64_t v74 = String.init(cString:)(v6);
    uint64_t v59 = v7;
    uint64_t v75 = v7;
    if (one-time initialization token for table != -1) {
      swift_once(&one-time initialization token for table, one-time initialization function for table);
    }
    uint64_t v73 = static ErrorString.table;
    uint64_t v72 = xmmword_3ABE40;
    uint64_t v8 = lazy protocol witness table accessor for type String and conformance String();
    uint64_t v9 = StringProtocol.replacingOccurrences<A, B>(of:with:options:range:)(&v73, &v72, 1, 0, 0, 1, &type metadata for String, &type metadata for String, &type metadata for String, v8, v8, v8);
    uint64_t v11 = v10;
    swift_bridgeObjectRelease(v59);
    uint64_t v74 = v9;
    uint64_t v60 = v11;
    uint64_t v75 = v11;
    if (one-time initialization token for column != -1) {
      swift_once(&one-time initialization token for column, one-time initialization function for column);
    }
    uint64_t v73 = static ErrorString.column;
    uint64_t v72 = xmmword_3ABE60;
    uint64_t v12 = StringProtocol.replacingOccurrences<A, B>(of:with:options:range:)(&v73, &v72, 1, 0, 0, 1, &type metadata for String, &type metadata for String, &type metadata for String, v8, v8, v8);
    uint64_t v14 = v13;
    swift_bridgeObjectRelease(v60);
    uint64_t v74 = v12;
    uint64_t v61 = v14;
    uint64_t v75 = v14;
    if (one-time initialization token for tableMap != -1) {
      swift_once(&one-time initialization token for tableMap, one-time initialization function for tableMap);
    }
    uint64_t v73 = static ErrorString.tableMap;
    uint64_t v72 = xmmword_3ABE80;
    uint64_t v15 = StringProtocol.replacingOccurrences<A, B>(of:with:options:range:)(&v73, &v72, 1, 0, 0, 1, &type metadata for String, &type metadata for String, &type metadata for String, v8, v8, v8);
    uint64_t v17 = v16;
    swift_bridgeObjectRelease(v61);
    uint64_t v74 = v15;
    uint64_t v62 = v17;
    uint64_t v75 = v17;
    if (one-time initialization token for columnMap != -1) {
      swift_once(&one-time initialization token for columnMap, one-time initialization function for columnMap);
    }
    uint64_t v73 = static ErrorString.columnMap;
    uint64_t v72 = xmmword_3ABEA0;
    uint64_t v18 = StringProtocol.replacingOccurrences<A, B>(of:with:options:range:)(&v73, &v72, 1, 0, 0, 1, &type metadata for String, &type metadata for String, &type metadata for String, v8, v8, v8);
    uint64_t v20 = v19;
    swift_bridgeObjectRelease(v62);
    uint64_t v74 = v18;
    uint64_t v63 = v20;
    uint64_t v75 = v20;
    if (one-time initialization token for drop != -1) {
      swift_once(&one-time initialization token for drop, one-time initialization function for drop);
    }
    uint64_t v73 = static ErrorString.drop;
    uint64_t v72 = xmmword_3ABEC0;
    uint64_t v21 = StringProtocol.replacingOccurrences<A, B>(of:with:options:range:)(&v73, &v72, 1, 0, 0, 1, &type metadata for String, &type metadata for String, &type metadata for String, v8, v8, v8);
    uint64_t v23 = v22;
    swift_bridgeObjectRelease(v63);
    uint64_t v74 = v21;
    uint64_t v64 = v23;
    uint64_t v75 = v23;
    if (one-time initialization token for sequence != -1) {
      swift_once(&one-time initialization token for sequence, one-time initialization function for sequence);
    }
    uint64_t v73 = static ErrorString.sequence;
    uint64_t v72 = xmmword_3ABEE0;
    uint64_t v24 = StringProtocol.replacingOccurrences<A, B>(of:with:options:range:)(&v73, &v72, 1, 0, 0, 1, &type metadata for String, &type metadata for String, &type metadata for String, v8, v8, v8);
    uint64_t v26 = v25;
    swift_bridgeObjectRelease(v64);
    uint64_t v74 = v24;
    uint64_t v75 = v26;
    if (one-time initialization token for double != -1) {
      swift_once(&one-time initialization token for double, one-time initialization function for double);
    }
    uint64_t v73 = static ErrorString.double;
    uint64_t v72 = xmmword_3ABF00;
    uint64_t v27 = StringProtocol.replacingOccurrences<A, B>(of:with:options:range:)(&v73, &v72, 1, 0, 0, 1, &type metadata for String, &type metadata for String, &type metadata for String, v8, v8, v8);
    uint64_t v29 = v28;
    swift_bridgeObjectRelease(v26);
    uint64_t v74 = v27;
    uint64_t v65 = v29;
    uint64_t v75 = v29;
    if (one-time initialization token for integer != -1) {
      swift_once(&one-time initialization token for integer, one-time initialization function for integer);
    }
    uint64_t v73 = static ErrorString.integer;
    uint64_t v72 = xmmword_3ABF20;
    uint64_t v30 = StringProtocol.replacingOccurrences<A, B>(of:with:options:range:)(&v73, &v72, 1, 0, 0, 1, &type metadata for String, &type metadata for String, &type metadata for String, v8, v8, v8);
    uint64_t v32 = v31;
    swift_bridgeObjectRelease(v65);
    uint64_t v74 = v30;
    uint64_t v66 = v32;
    uint64_t v75 = v32;
    if (one-time initialization token for error != -1) {
      swift_once(&one-time initialization token for error, one-time initialization function for error);
    }
    uint64_t v73 = static ErrorString.error;
    uint64_t v72 = xmmword_3ABF40;
    uint64_t v33 = StringProtocol.replacingOccurrences<A, B>(of:with:options:range:)(&v73, &v72, 0, 0, 0, 1, &type metadata for String, &type metadata for String, &type metadata for String, v8, v8, v8);
    uint64_t v35 = v34;
    swift_bridgeObjectRelease(v66);
    uint64_t v74 = v33;
    uint64_t v67 = v35;
    uint64_t v75 = v35;
    if (one-time initialization token for archive != -1) {
      swift_once(&one-time initialization token for archive, one-time initialization function for archive);
    }
    uint64_t v73 = static ErrorString.archive;
    uint64_t v72 = xmmword_3ABF60;
    uint64_t v36 = StringProtocol.replacingOccurrences<A, B>(of:with:options:range:)(&v73, &v72, 0, 0, 0, 1, &type metadata for String, &type metadata for String, &type metadata for String, v8, v8, v8);
    uint64_t v38 = v37;
    swift_bridgeObjectRelease(v67);
    uint64_t v74 = v36;
    unsigned __int8 v68 = v38;
    uint64_t v75 = v38;
    if (one-time initialization token for limit != -1) {
      swift_once(&one-time initialization token for limit, one-time initialization function for limit);
    }
    uint64_t v73 = static ErrorString.limit;
    uint64_t v72 = xmmword_3ABF80;
    uint64_t v39 = StringProtocol.replacingOccurrences<A, B>(of:with:options:range:)(&v73, &v72, 0, 0, 0, 1, &type metadata for String, &type metadata for String, &type metadata for String, v8, v8, v8);
    uint64_t v41 = v40;
    swift_bridgeObjectRelease(v68);
    uint64_t v74 = v39;
    long long v69 = v41;
    uint64_t v75 = v41;
    if (one-time initialization token for supportedStackTypes != -1) {
      swift_once(&one-time initialization token for supportedStackTypes, one-time initialization function for supportedStackTypes);
    }
    uint64_t v73 = static ErrorString.supportedStackTypes;
    uint64_t v72 = xmmword_3ABFA0;
    uint64_t v42 = StringProtocol.replacingOccurrences<A, B>(of:with:options:range:)(&v73, &v72, 0, 0, 0, 1, &type metadata for String, &type metadata for String, &type metadata for String, v8, v8, v8);
    uint64_t v44 = v43;
    swift_bridgeObjectRelease(v69);
    uint64_t v74 = v42;
    long long v70 = v44;
    uint64_t v75 = v44;
    if (one-time initialization token for sortTypes != -1) {
      swift_once(&one-time initialization token for sortTypes, one-time initialization function for sortTypes);
    }
    uint64_t v73 = static ErrorString.sortTypes;
    uint64_t v72 = xmmword_3ABFC0;
    uint64_t v45 = StringProtocol.replacingOccurrences<A, B>(of:with:options:range:)(&v73, &v72, 0, 0, 0, 1, &type metadata for String, &type metadata for String, &type metadata for String, v8, v8, v8);
    uint64_t v47 = v46;
    swift_bridgeObjectRelease(v70);
    type metadata accessor for OS_os_log();
    swift_bridgeObjectRetain(v47);
    uint64_t v48 = (void *)static OS_os_log.default.getter(v47);
    uint64_t v71 = static os_log_type_t.error.getter(v47, &v72);
    uint64_t v49 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<CVarArg>);
    uint64_t v50 = (void *)swift_allocObject(v49, 72, 7);
    v50[2] = 1;
    v50[3] = 2;
    v50[7] = &type metadata for String;
    v50[8] = lazy protocol witness table accessor for type String and conformance String();
    v50[4] = v45;
    v50[5] = v47;
    os_log(_:dso:log:type:_:)("%@ \n", 4, 2, &dword_0, v48, v71, v50);

    swift_bridgeObjectRelease((_BYTE)v50);
    uint64_t v51 = lazy protocol witness table accessor for type MLCreateError and conformance MLCreateError();
    swift_allocError(&type metadata for MLCreateError, v51, 0, 0);
    *(void *)uint64_t v52 = v45;
    *(void *)(v52 + 8) = v47;
    *(_OWORD *)(v52 + 16) = 0;
    *(_OWORD *)(v52 + 32) = 0;
    *(unsigned char *)(v52 + 48) = 0;
    swift_willThrow(&type metadata for MLCreateError, v51, v52, v53, v54, v55);
    tc_v1_release(v58);
    return v57;
  }
  return v4;
}

{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  void *v48;
  uint64_t v49;
  void *v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v57;
  uint64_t v58;
  char v59;
  char v60;
  char v61;
  char v62;
  char v63;
  char v64;
  char v65;
  char v66;
  char v67;
  char v68;
  char v69;
  char v70;
  unsigned __int8 v71;
  long long v72;
  long long v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;

  uint64_t v76 = 0;
  uint64_t v4 = tc_v1_sframe_slice(a1, a2, a3, a4, &v76);
  uint64_t v5 = v76;
  if (v76)
  {
    uint64_t v6 = tc_v1_error_message(v76);
    if (!v6) {
      BUG();
    }
    uint64_t v58 = v5;
    uint64_t v57 = v4;
    uint64_t v74 = String.init(cString:)(v6);
    uint64_t v59 = v7;
    uint64_t v75 = v7;
    if (one-time initialization token for table != -1) {
      swift_once(&one-time initialization token for table, one-time initialization function for table);
    }
    uint64_t v73 = static ErrorString.table;
    uint64_t v72 = xmmword_3ABE40;
    uint64_t v8 = lazy protocol witness table accessor for type String and conformance String();
    uint64_t v9 = StringProtocol.replacingOccurrences<A, B>(of:with:options:range:)(&v73, &v72, 1, 0, 0, 1, &type metadata for String, &type metadata for String, &type metadata for String, v8, v8, v8);
    uint64_t v11 = v10;
    swift_bridgeObjectRelease(v59);
    uint64_t v74 = v9;
    uint64_t v60 = v11;
    uint64_t v75 = v11;
    if (one-time initialization token for column != -1) {
      swift_once(&one-time initialization token for column, one-time initialization function for column);
    }
    uint64_t v73 = static ErrorString.column;
    uint64_t v72 = xmmword_3ABE60;
    uint64_t v12 = StringProtocol.replacingOccurrences<A, B>(of:with:options:range:)(&v73, &v72, 1, 0, 0, 1, &type metadata for String, &type metadata for String, &type metadata for String, v8, v8, v8);
    uint64_t v14 = v13;
    swift_bridgeObjectRelease(v60);
    uint64_t v74 = v12;
    uint64_t v61 = v14;
    uint64_t v75 = v14;
    if (one-time initialization token for tableMap != -1) {
      swift_once(&one-time initialization token for tableMap, one-time initialization function for tableMap);
    }
    uint64_t v73 = static ErrorString.tableMap;
    uint64_t v72 = xmmword_3ABE80;
    uint64_t v15 = StringProtocol.replacingOccurrences<A, B>(of:with:options:range:)(&v73, &v72, 1, 0, 0, 1, &type metadata for String, &type metadata for String, &type metadata for String, v8, v8, v8);
    uint64_t v17 = v16;
    swift_bridgeObjectRelease(v61);
    uint64_t v74 = v15;
    uint64_t v62 = v17;
    uint64_t v75 = v17;
    if (one-time initialization token for columnMap != -1) {
      swift_once(&one-time initialization token for columnMap, one-time initialization function for columnMap);
    }
    uint64_t v73 = static ErrorString.columnMap;
    uint64_t v72 = xmmword_3ABEA0;
    uint64_t v18 = StringProtocol.replacingOccurrences<A, B>(of:with:options:range:)(&v73, &v72, 1, 0, 0, 1, &type metadata for String, &type metadata for String, &type metadata for String, v8, v8, v8);
    uint64_t v20 = v19;
    swift_bridgeObjectRelease(v62);
    uint64_t v74 = v18;
    uint64_t v63 = v20;
    uint64_t v75 = v20;
    if (one-time initialization token for drop != -1) {
      swift_once(&one-time initialization token for drop, one-time initialization function for drop);
    }
    uint64_t v73 = static ErrorString.drop;
    uint64_t v72 = xmmword_3ABEC0;
    uint64_t v21 = StringProtocol.replacingOccurrences<A, B>(of:with:options:range:)(&v73, &v72, 1, 0, 0, 1, &type metadata for String, &type metadata for String, &type metadata for String, v8, v8, v8);
    uint64_t v23 = v22;
    swift_bridgeObjectRelease(v63);
    uint64_t v74 = v21;
    uint64_t v64 = v23;
    uint64_t v75 = v23;
    if (one-time initialization token for sequence != -1) {
      swift_once(&one-time initialization token for sequence, one-time initialization function for sequence);
    }
    uint64_t v73 = static ErrorString.sequence;
    uint64_t v72 = xmmword_3ABEE0;
    uint64_t v24 = StringProtocol.replacingOccurrences<A, B>(of:with:options:range:)(&v73, &v72, 1, 0, 0, 1, &type metadata for String, &type metadata for String, &type metadata for String, v8, v8, v8);
    uint64_t v26 = v25;
    swift_bridgeObjectRelease(v64);
    uint64_t v74 = v24;
    uint64_t v75 = v26;
    if (one-time initialization token for double != -1) {
      swift_once(&one-time initialization token for double, one-time initialization function for double);
    }
    uint64_t v73 = static ErrorString.double;
    uint64_t v72 = xmmword_3ABF00;
    uint64_t v27 = StringProtocol.replacingOccurrences<A, B>(of:with:options:range:)(&v73, &v72, 1, 0, 0, 1, &type metadata for String, &type metadata for String, &type metadata for String, v8, v8, v8);
    uint64_t v29 = v28;
    swift_bridgeObjectRelease(v26);
    uint64_t v74 = v27;
    uint64_t v65 = v29;
    uint64_t v75 = v29;
    if (one-time initialization token for integer != -1) {
      swift_once(&one-time initialization token for integer, one-time initialization function for integer);
    }
    uint64_t v73 = static ErrorString.integer;
    uint64_t v72 = xmmword_3ABF20;
    uint64_t v30 = StringProtocol.replacingOccurrences<A, B>(of:with:options:range:)(&v73, &v72, 1, 0, 0, 1, &type metadata for String, &type metadata for String, &type metadata for String, v8, v8, v8);
    uint64_t v32 = v31;
    swift_bridgeObjectRelease(v65);
    uint64_t v74 = v30;
    uint64_t v66 = v32;
    uint64_t v75 = v32;
    if (one-time initialization token for error != -1) {
      swift_once(&one-time initialization token for error, one-time initialization function for error);
    }
    uint64_t v73 = static ErrorString.error;
    uint64_t v72 = xmmword_3ABF40;
    uint64_t v33 = StringProtocol.replacingOccurrences<A, B>(of:with:options:range:)(&v73, &v72, 0, 0, 0, 1, &type metadata for String, &type metadata for String, &type metadata for String, v8, v8, v8);
    uint64_t v35 = v34;
    swift_bridgeObjectRelease(v66);
    uint64_t v74 = v33;
    uint64_t v67 = v35;
    uint64_t v75 = v35;
    if (one-time initialization token for archive != -1) {
      swift_once(&one-time initialization token for archive, one-time initialization function for archive);
    }
    uint64_t v73 = static ErrorString.archive;
    uint64_t v72 = xmmword_3ABF60;
    uint64_t v36 = StringProtocol.replacingOccurrences<A, B>(of:with:options:range:)(&v73, &v72, 0, 0, 0, 1, &type metadata for String, &type metadata for String, &type metadata for String, v8, v8, v8);
    uint64_t v38 = v37;
    swift_bridgeObjectRelease(v67);
    uint64_t v74 = v36;
    unsigned __int8 v68 = v38;
    uint64_t v75 = v38;
    if (one-time initialization token for limit != -1) {
      swift_once(&one-time initialization token for limit, one-time initialization function for limit);
    }
    uint64_t v73 = static ErrorString.limit;
    uint64_t v72 = xmmword_3ABF80;
    uint64_t v39 = StringProtocol.replacingOccurrences<A, B>(of:with:options:range:)(&v73, &v72, 0, 0, 0, 1, &type metadata for String, &type metadata for String, &type metadata for String, v8, v8, v8);
    uint64_t v41 = v40;
    swift_bridgeObjectRelease(v68);
    uint64_t v74 = v39;
    long long v69 = v41;
    uint64_t v75 = v41;
    if (one-time initialization token for supportedStackTypes != -1) {
      swift_once(&one-time initialization token for supportedStackTypes, one-time initialization function for supportedStackTypes);
    }
    uint64_t v73 = static ErrorString.supportedStackTypes;
    uint64_t v72 = xmmword_3ABFA0;
    uint64_t v42 = StringProtocol.replacingOccurrences<A, B>(of:with:options:range:)(&v73, &v72, 0, 0, 0, 1, &type metadata for String, &type metadata for String, &type metadata for String, v8, v8, v8);
    uint64_t v44 = v43;
    swift_bridgeObjectRelease(v69);
    uint64_t v74 = v42;
    long long v70 = v44;
    uint64_t v75 = v44;
    if (one-time initialization token for sortTypes != -1) {
      swift_once(&one-time initialization token for sortTypes, one-time initialization function for sortTypes);
    }
    uint64_t v73 = static ErrorString.sortTypes;
    uint64_t v72 = xmmword_3ABFC0;
    uint64_t v45 = StringProtocol.replacingOccurrences<A, B>(of:with:options:range:)(&v73, &v72, 0, 0, 0, 1, &type metadata for String, &type metadata for String, &type metadata for String, v8, v8, v8);
    uint64_t v47 = v46;
    swift_bridgeObjectRelease(v70);
    type metadata accessor for OS_os_log();
    swift_bridgeObjectRetain(v47);
    uint64_t v48 = (void *)static OS_os_log.default.getter(v47);
    uint64_t v71 = static os_log_type_t.error.getter(v47, &v72);
    uint64_t v49 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<CVarArg>);
    uint64_t v50 = (void *)swift_allocObject(v49, 72, 7);
    v50[2] = 1;
    v50[3] = 2;
    v50[7] = &type metadata for String;
    v50[8] = lazy protocol witness table accessor for type String and conformance String();
    v50[4] = v45;
    v50[5] = v47;
    os_log(_:dso:log:type:_:)("%@ \n", 4, 2, &dword_0, v48, v71, v50);

    swift_bridgeObjectRelease((_BYTE)v50);
    uint64_t v51 = lazy protocol witness table accessor for type MLCreateError and conformance MLCreateError();
    swift_allocError(&type metadata for MLCreateError, v51, 0, 0);
    *(void *)uint64_t v52 = v45;
    *(void *)(v52 + 8) = v47;
    *(_OWORD *)(v52 + 16) = 0;
    *(_OWORD *)(v52 + 32) = 0;
    *(unsigned char *)(v52 + 48) = 0;
    swift_willThrow(&type metadata for MLCreateError, v51, v52, v53, v54, v55);
    tc_v1_release(v58);
    return v57;
  }
  return v4;
}

{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  void *v47;
  uint64_t v48;
  void *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v56;
  char v57;
  char v58;
  char v59;
  char v60;
  char v61;
  char v62;
  char v63;
  char v64;
  char v65;
  char v66;
  char v67;
  char v68;
  char v69;
  unsigned __int8 v70;
  long long v71;
  long long v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;

  uint64_t v75 = 0;
  LODWORD(v4) = tc_v1_plot_render_next_into_context(a1, a2, a3, a4, &v75);
  uint64_t v5 = v75;
  if (v75)
  {
    uint64_t v6 = tc_v1_error_message(v75);
    if (!v6) {
      BUG();
    }
    uint64_t v56 = v5;
    uint64_t v57 = v4;
    uint64_t v73 = String.init(cString:)(v6);
    uint64_t v58 = v7;
    uint64_t v74 = v7;
    if (one-time initialization token for table != -1) {
      swift_once(&one-time initialization token for table, one-time initialization function for table);
    }
    uint64_t v72 = static ErrorString.table;
    uint64_t v71 = xmmword_3ABE40;
    uint64_t v8 = lazy protocol witness table accessor for type String and conformance String();
    uint64_t v9 = StringProtocol.replacingOccurrences<A, B>(of:with:options:range:)(&v72, &v71, 1, 0, 0, 1, &type metadata for String, &type metadata for String, &type metadata for String, v8, v8, v8);
    uint64_t v11 = v10;
    swift_bridgeObjectRelease(v58);
    uint64_t v73 = v9;
    uint64_t v59 = v11;
    uint64_t v74 = v11;
    if (one-time initialization token for column != -1) {
      swift_once(&one-time initialization token for column, one-time initialization function for column);
    }
    uint64_t v72 = static ErrorString.column;
    uint64_t v71 = xmmword_3ABE60;
    uint64_t v12 = StringProtocol.replacingOccurrences<A, B>(of:with:options:range:)(&v72, &v71, 1, 0, 0, 1, &type metadata for String, &type metadata for String, &type metadata for String, v8, v8, v8);
    uint64_t v14 = v13;
    swift_bridgeObjectRelease(v59);
    uint64_t v73 = v12;
    uint64_t v60 = v14;
    uint64_t v74 = v14;
    if (one-time initialization token for tableMap != -1) {
      swift_once(&one-time initialization token for tableMap, one-time initialization function for tableMap);
    }
    uint64_t v72 = static ErrorString.tableMap;
    uint64_t v71 = xmmword_3ABE80;
    uint64_t v15 = StringProtocol.replacingOccurrences<A, B>(of:with:options:range:)(&v72, &v71, 1, 0, 0, 1, &type metadata for String, &type metadata for String, &type metadata for String, v8, v8, v8);
    uint64_t v17 = v16;
    swift_bridgeObjectRelease(v60);
    uint64_t v73 = v15;
    uint64_t v61 = v17;
    uint64_t v74 = v17;
    if (one-time initialization token for columnMap != -1) {
      swift_once(&one-time initialization token for columnMap, one-time initialization function for columnMap);
    }
    uint64_t v72 = static ErrorString.columnMap;
    uint64_t v71 = xmmword_3ABEA0;
    uint64_t v18 = StringProtocol.replacingOccurrences<A, B>(of:with:options:range:)(&v72, &v71, 1, 0, 0, 1, &type metadata for String, &type metadata for String, &type metadata for String, v8, v8, v8);
    uint64_t v20 = v19;
    swift_bridgeObjectRelease(v61);
    uint64_t v73 = v18;
    uint64_t v62 = v20;
    uint64_t v74 = v20;
    if (one-time initialization token for drop != -1) {
      swift_once(&one-time initialization token for drop, one-time initialization function for drop);
    }
    uint64_t v72 = static ErrorString.drop;
    uint64_t v71 = xmmword_3ABEC0;
    uint64_t v21 = StringProtocol.replacingOccurrences<A, B>(of:with:options:range:)(&v72, &v71, 1, 0, 0, 1, &type metadata for String, &type metadata for String, &type metadata for String, v8, v8, v8);
    uint64_t v23 = v22;
    swift_bridgeObjectRelease(v62);
    uint64_t v73 = v21;
    uint64_t v63 = v23;
    uint64_t v74 = v23;
    if (one-time initialization token for sequence != -1) {
      swift_once(&one-time initialization token for sequence, one-time initialization function for sequence);
    }
    uint64_t v72 = static ErrorString.sequence;
    uint64_t v71 = xmmword_3ABEE0;
    uint64_t v24 = StringProtocol.replacingOccurrences<A, B>(of:with:options:range:)(&v72, &v71, 1, 0, 0, 1, &type metadata for String, &type metadata for String, &type metadata for String, v8, v8, v8);
    uint64_t v26 = v25;
    swift_bridgeObjectRelease(v63);
    uint64_t v73 = v24;
    uint64_t v74 = v26;
    if (one-time initialization token for double != -1) {
      swift_once(&one-time initialization token for double, one-time initialization function for double);
    }
    uint64_t v72 = static ErrorString.double;
    uint64_t v71 = xmmword_3ABF00;
    uint64_t v27 = StringProtocol.replacingOccurrences<A, B>(of:with:options:range:)(&v72, &v71, 1, 0, 0, 1, &type metadata for String, &type metadata for String, &type metadata for String, v8, v8, v8);
    uint64_t v29 = v28;
    swift_bridgeObjectRelease(v26);
    uint64_t v73 = v27;
    uint64_t v64 = v29;
    uint64_t v74 = v29;
    if (one-time initialization token for integer != -1) {
      swift_once(&one-time initialization token for integer, one-time initialization function for integer);
    }
    uint64_t v72 = static ErrorString.integer;
    uint64_t v71 = xmmword_3ABF20;
    uint64_t v30 = StringProtocol.replacingOccurrences<A, B>(of:with:options:range:)(&v72, &v71, 1, 0, 0, 1, &type metadata for String, &type metadata for String, &type metadata for String, v8, v8, v8);
    uint64_t v32 = v31;
    swift_bridgeObjectRelease(v64);
    uint64_t v73 = v30;
    uint64_t v65 = v32;
    uint64_t v74 = v32;
    if (one-time initialization token for error != -1) {
      swift_once(&one-time initialization token for error, one-time initialization function for error);
    }
    uint64_t v72 = static ErrorString.error;
    uint64_t v71 = xmmword_3ABF40;
    uint64_t v33 = StringProtocol.replacingOccurrences<A, B>(of:with:options:range:)(&v72, &v71, 0, 0, 0, 1, &type metadata for String, &type metadata for String, &type metadata for String, v8, v8, v8);
    uint64_t v35 = v34;
    swift_bridgeObjectRelease(v65);
    uint64_t v73 = v33;
    uint64_t v66 = v35;
    uint64_t v74 = v35;
    if (one-time initialization token for archive != -1) {
      swift_once(&one-time initialization token for archive, one-time initialization function for archive);
    }
    uint64_t v72 = static ErrorString.archive;
    uint64_t v71 = xmmword_3ABF60;
    uint64_t v36 = StringProtocol.replacingOccurrences<A, B>(of:with:options:range:)(&v72, &v71, 0, 0, 0, 1, &type metadata for String, &type metadata for String, &type metadata for String, v8, v8, v8);
    uint64_t v38 = v37;
    swift_bridgeObjectRelease(v66);
    uint64_t v73 = v36;
    uint64_t v67 = v38;
    uint64_t v74 = v38;
    if (one-time initialization token for limit != -1) {
      swift_once(&one-time initialization token for limit, one-time initialization function for limit);
    }
    uint64_t v72 = static ErrorString.limit;
    uint64_t v71 = xmmword_3ABF80;
    uint64_t v39 = StringProtocol.replacingOccurrences<A, B>(of:with:options:range:)(&v72, &v71, 0, 0, 0, 1, &type metadata for String, &type metadata for String, &type metadata for String, v8, v8, v8);
    uint64_t v41 = v40;
    swift_bridgeObjectRelease(v67);
    uint64_t v73 = v39;
    unsigned __int8 v68 = v41;
    uint64_t v74 = v41;
    if (one-time initialization token for supportedStackTypes != -1) {
      swift_once(&one-time initialization token for supportedStackTypes, one-time initialization function for supportedStackTypes);
    }
    uint64_t v72 = static ErrorString.supportedStackTypes;
    uint64_t v71 = xmmword_3ABFA0;
    uint64_t v42 = StringProtocol.replacingOccurrences<A, B>(of:with:options:range:)(&v72, &v71, 0, 0, 0, 1, &type metadata for String, &type metadata for String, &type metadata for String, v8, v8, v8);
    uint64_t v44 = v43;
    swift_bridgeObjectRelease(v68);
    uint64_t v73 = v42;
    long long v69 = v44;
    uint64_t v74 = v44;
    if (one-time initialization token for sortTypes != -1) {
      swift_once(&one-time initialization token for sortTypes, one-time initialization function for sortTypes);
    }
    uint64_t v72 = static ErrorString.sortTypes;
    uint64_t v71 = xmmword_3ABFC0;
    uint64_t v4 = StringProtocol.replacingOccurrences<A, B>(of:with:options:range:)(&v72, &v71, 0, 0, 0, 1, &type metadata for String, &type metadata for String, &type metadata for String, v8, v8, v8);
    uint64_t v46 = v45;
    swift_bridgeObjectRelease(v69);
    type metadata accessor for OS_os_log();
    swift_bridgeObjectRetain(v46);
    uint64_t v47 = (void *)static OS_os_log.default.getter(v46);
    long long v70 = static os_log_type_t.error.getter(v46, &v71);
    uint64_t v48 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<CVarArg>);
    uint64_t v49 = (void *)swift_allocObject(v48, 72, 7);
    _OWORD v49[2] = 1;
    v49[3] = 2;
    v49[7] = &type metadata for String;
    v49[8] = lazy protocol witness table accessor for type String and conformance String();
    v49[4] = v4;
    v49[5] = v46;
    os_log(_:dso:log:type:_:)("%@ \n", 4, 2, &dword_0, v47, v70, v49);

    swift_bridgeObjectRelease((_BYTE)v49);
    uint64_t v50 = lazy protocol witness table accessor for type MLCreateError and conformance MLCreateError();
    swift_allocError(&type metadata for MLCreateError, v50, 0, 0);
    *(void *)uint64_t v51 = v4;
    *(void *)(v51 + 8) = v46;
    *(_OWORD *)(v51 + 16) = 0;
    *(_OWORD *)(v51 + 32) = 0;
    *(unsigned char *)(v51 + 48) = 0;
    swift_willThrow(&type metadata for MLCreateError, v50, v51, v52, v53, v54);
    tc_v1_release(v56);
    LOBYTE(v4) = v57;
  }
  return v4;
}

uint64_t specialized handling<A, B, C, D, E>(_:_:_:_:_:)(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  return specialized handling<A, B, C, D, E>(_:_:_:_:_:)(a1, a2, a3, a4, (uint64_t (*)(uint64_t, uint64_t, uint64_t, void, uint64_t *))&tc_v1_sframe_filter_by);
}

{
  return specialized handling<A, B, C, D, E>(_:_:_:_:_:)(a1, a2, a3, a4, (uint64_t (*)(uint64_t, uint64_t, uint64_t, void, uint64_t *))&tc_v1_sframe_stack_and_rename);
}

uint64_t specialized handling<A, B, C, D, E>(_:_:_:_:_:)(uint64_t a1, uint64_t a2, uint64_t a3, char a4, uint64_t (*a5)(uint64_t, uint64_t, uint64_t, void, uint64_t *))
{
  uint64_t v77 = 0;
  uint64_t v5 = a5(a1, a2, a3, a4 & 1, &v77);
  uint64_t v6 = v77;
  if (v77)
  {
    uint64_t v7 = tc_v1_error_message(v77);
    if (!v7) {
      BUG();
    }
    uint64_t v59 = v6;
    uint64_t v58 = v5;
    uint64_t v75 = String.init(cString:)(v7);
    char v60 = v8;
    uint64_t v76 = v8;
    if (one-time initialization token for table != -1) {
      swift_once(&one-time initialization token for table, one-time initialization function for table);
    }
    long long v74 = static ErrorString.table;
    long long v73 = xmmword_3ABE40;
    uint64_t v9 = lazy protocol witness table accessor for type String and conformance String();
    uint64_t v10 = StringProtocol.replacingOccurrences<A, B>(of:with:options:range:)(&v74, &v73, 1, 0, 0, 1, &type metadata for String, &type metadata for String, &type metadata for String, v9, v9, v9);
    uint64_t v12 = v11;
    swift_bridgeObjectRelease(v60);
    uint64_t v75 = v10;
    char v61 = v12;
    uint64_t v76 = v12;
    if (one-time initialization token for column != -1) {
      swift_once(&one-time initialization token for column, one-time initialization function for column);
    }
    long long v74 = static ErrorString.column;
    long long v73 = xmmword_3ABE60;
    uint64_t v13 = StringProtocol.replacingOccurrences<A, B>(of:with:options:range:)(&v74, &v73, 1, 0, 0, 1, &type metadata for String, &type metadata for String, &type metadata for String, v9, v9, v9);
    uint64_t v15 = v14;
    swift_bridgeObjectRelease(v61);
    uint64_t v75 = v13;
    char v62 = v15;
    uint64_t v76 = v15;
    if (one-time initialization token for tableMap != -1) {
      swift_once(&one-time initialization token for tableMap, one-time initialization function for tableMap);
    }
    long long v74 = static ErrorString.tableMap;
    long long v73 = xmmword_3ABE80;
    uint64_t v16 = StringProtocol.replacingOccurrences<A, B>(of:with:options:range:)(&v74, &v73, 1, 0, 0, 1, &type metadata for String, &type metadata for String, &type metadata for String, v9, v9, v9);
    uint64_t v18 = v17;
    swift_bridgeObjectRelease(v62);
    uint64_t v75 = v16;
    char v63 = v18;
    uint64_t v76 = v18;
    if (one-time initialization token for columnMap != -1) {
      swift_once(&one-time initialization token for columnMap, one-time initialization function for columnMap);
    }
    long long v74 = static ErrorString.columnMap;
    long long v73 = xmmword_3ABEA0;
    uint64_t v19 = StringProtocol.replacingOccurrences<A, B>(of:with:options:range:)(&v74, &v73, 1, 0, 0, 1, &type metadata for String, &type metadata for String, &type metadata for String, v9, v9, v9);
    uint64_t v21 = v20;
    swift_bridgeObjectRelease(v63);
    uint64_t v75 = v19;
    char v64 = v21;
    uint64_t v76 = v21;
    if (one-time initialization token for drop != -1) {
      swift_once(&one-time initialization token for drop, one-time initialization function for drop);
    }
    long long v74 = static ErrorString.drop;
    long long v73 = xmmword_3ABEC0;
    uint64_t v22 = StringProtocol.replacingOccurrences<A, B>(of:with:options:range:)(&v74, &v73, 1, 0, 0, 1, &type metadata for String, &type metadata for String, &type metadata for String, v9, v9, v9);
    uint64_t v24 = v23;
    swift_bridgeObjectRelease(v64);
    uint64_t v75 = v22;
    char v65 = v24;
    uint64_t v76 = v24;
    if (one-time initialization token for sequence != -1) {
      swift_once(&one-time initialization token for sequence, one-time initialization function for sequence);
    }
    long long v74 = static ErrorString.sequence;
    long long v73 = xmmword_3ABEE0;
    uint64_t v25 = StringProtocol.replacingOccurrences<A, B>(of:with:options:range:)(&v74, &v73, 1, 0, 0, 1, &type metadata for String, &type metadata for String, &type metadata for String, v9, v9, v9);
    uint64_t v27 = v26;
    swift_bridgeObjectRelease(v65);
    uint64_t v75 = v25;
    uint64_t v76 = v27;
    if (one-time initialization token for double != -1) {
      swift_once(&one-time initialization token for double, one-time initialization function for double);
    }
    long long v74 = static ErrorString.double;
    long long v73 = xmmword_3ABF00;
    uint64_t v28 = StringProtocol.replacingOccurrences<A, B>(of:with:options:range:)(&v74, &v73, 1, 0, 0, 1, &type metadata for String, &type metadata for String, &type metadata for String, v9, v9, v9);
    uint64_t v30 = v29;
    swift_bridgeObjectRelease(v27);
    uint64_t v75 = v28;
    char v66 = v30;
    uint64_t v76 = v30;
    if (one-time initialization token for integer != -1) {
      swift_once(&one-time initialization token for integer, one-time initialization function for integer);
    }
    long long v74 = static ErrorString.integer;
    long long v73 = xmmword_3ABF20;
    uint64_t v31 = StringProtocol.replacingOccurrences<A, B>(of:with:options:range:)(&v74, &v73, 1, 0, 0, 1, &type metadata for String, &type metadata for String, &type metadata for String, v9, v9, v9);
    uint64_t v33 = v32;
    swift_bridgeObjectRelease(v66);
    uint64_t v75 = v31;
    char v67 = v33;
    uint64_t v76 = v33;
    if (one-time initialization token for error != -1) {
      swift_once(&one-time initialization token for error, one-time initialization function for error);
    }
    long long v74 = static ErrorString.error;
    long long v73 = xmmword_3ABF40;
    uint64_t v34 = StringProtocol.replacingOccurrences<A, B>(of:with:options:range:)(&v74, &v73, 0, 0, 0, 1, &type metadata for String, &type metadata for String, &type metadata for String, v9, v9, v9);
    uint64_t v36 = v35;
    swift_bridgeObjectRelease(v67);
    uint64_t v75 = v34;
    char v68 = v36;
    uint64_t v76 = v36;
    if (one-time initialization token for archive != -1) {
      swift_once(&one-time initialization token for archive, one-time initialization function for archive);
    }
    long long v74 = static ErrorString.archive;
    long long v73 = xmmword_3ABF60;
    uint64_t v37 = StringProtocol.replacingOccurrences<A, B>(of:with:options:range:)(&v74, &v73, 0, 0, 0, 1, &type metadata for String, &type metadata for String, &type metadata for String, v9, v9, v9);
    uint64_t v39 = v38;
    swift_bridgeObjectRelease(v68);
    uint64_t v75 = v37;
    char v69 = v39;
    uint64_t v76 = v39;
    if (one-time initialization token for limit != -1) {
      swift_once(&one-time initialization token for limit, one-time initialization function for limit);
    }
    long long v74 = static ErrorString.limit;
    long long v73 = xmmword_3ABF80;
    uint64_t v40 = StringProtocol.replacingOccurrences<A, B>(of:with:options:range:)(&v74, &v73, 0, 0, 0, 1, &type metadata for String, &type metadata for String, &type metadata for String, v9, v9, v9);
    uint64_t v42 = v41;
    swift_bridgeObjectRelease(v69);
    uint64_t v75 = v40;
    char v70 = v42;
    uint64_t v76 = v42;
    if (one-time initialization token for supportedStackTypes != -1) {
      swift_once(&one-time initialization token for supportedStackTypes, one-time initialization function for supportedStackTypes);
    }
    long long v74 = static ErrorString.supportedStackTypes;
    long long v73 = xmmword_3ABFA0;
    uint64_t v43 = StringProtocol.replacingOccurrences<A, B>(of:with:options:range:)(&v74, &v73, 0, 0, 0, 1, &type metadata for String, &type metadata for String, &type metadata for String, v9, v9, v9);
    uint64_t v45 = v44;
    swift_bridgeObjectRelease(v70);
    uint64_t v75 = v43;
    char v71 = v45;
    uint64_t v76 = v45;
    if (one-time initialization token for sortTypes != -1) {
      swift_once(&one-time initialization token for sortTypes, one-time initialization function for sortTypes);
    }
    long long v74 = static ErrorString.sortTypes;
    long long v73 = xmmword_3ABFC0;
    uint64_t v46 = StringProtocol.replacingOccurrences<A, B>(of:with:options:range:)(&v74, &v73, 0, 0, 0, 1, &type metadata for String, &type metadata for String, &type metadata for String, v9, v9, v9);
    uint64_t v48 = v47;
    swift_bridgeObjectRelease(v71);
    type metadata accessor for OS_os_log();
    swift_bridgeObjectRetain(v48);
    uint64_t v49 = (void *)static OS_os_log.default.getter(v48);
    unsigned __int8 v72 = static os_log_type_t.error.getter(v48, &v73);
    uint64_t v50 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<CVarArg>);
    uint64_t v51 = (void *)swift_allocObject(v50, 72, 7);
    void v51[2] = 1;
    v51[3] = 2;
    v51[7] = &type metadata for String;
    v51[8] = lazy protocol witness table accessor for type String and conformance String();
    void v51[4] = v46;
    v51[5] = v48;
    os_log(_:dso:log:type:_:)("%@ \n", 4, 2, &dword_0, v49, v72, v51);

    swift_bridgeObjectRelease((_BYTE)v51);
    uint64_t v52 = lazy protocol witness table accessor for type MLCreateError and conformance MLCreateError();
    swift_allocError(&type metadata for MLCreateError, v52, 0, 0);
    *(void *)uint64_t v53 = v46;
    *(void *)(v53 + 8) = v48;
    *(_OWORD *)(v53 + 16) = 0;
    *(_OWORD *)(v53 + 32) = 0;
    *(unsigned char *)(v53 + 48) = 0;
    swift_willThrow(&type metadata for MLCreateError, v52, v53, v54, v55, v56);
    tc_v1_release(v59);
    return v58;
  }
  return v5;
}

NSURL *specialized handling<A, B, C, D, E>(_:_:_:_:_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void (*a5)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t *))
{
  uint64_t v75 = 0;
  a5(a1, a2, a3, a4, &v75);
  uint64_t v5 = v75;
  if (v75)
  {
    uint64_t v6 = tc_v1_error_message(v75);
    if (!v6) {
      BUG();
    }
    uint64_t v57 = v5;
    uint64_t v73 = String.init(cString:)(v6);
    char v58 = v7;
    uint64_t v74 = v7;
    if (one-time initialization token for table != -1) {
      swift_once(&one-time initialization token for table, one-time initialization function for table);
    }
    long long v72 = static ErrorString.table;
    long long v71 = xmmword_3ABE40;
    uint64_t v8 = lazy protocol witness table accessor for type String and conformance String();
    uint64_t v9 = StringProtocol.replacingOccurrences<A, B>(of:with:options:range:)(&v72, &v71, 1, 0, 0, 1, &type metadata for String, &type metadata for String, &type metadata for String, v8, v8, v8);
    uint64_t v11 = v10;
    swift_bridgeObjectRelease(v58);
    uint64_t v73 = v9;
    char v59 = v11;
    uint64_t v74 = v11;
    if (one-time initialization token for column != -1) {
      swift_once(&one-time initialization token for column, one-time initialization function for column);
    }
    long long v72 = static ErrorString.column;
    long long v71 = xmmword_3ABE60;
    uint64_t v12 = StringProtocol.replacingOccurrences<A, B>(of:with:options:range:)(&v72, &v71, 1, 0, 0, 1, &type metadata for String, &type metadata for String, &type metadata for String, v8, v8, v8);
    uint64_t v14 = v13;
    swift_bridgeObjectRelease(v59);
    uint64_t v73 = v12;
    char v60 = v14;
    uint64_t v74 = v14;
    if (one-time initialization token for tableMap != -1) {
      swift_once(&one-time initialization token for tableMap, one-time initialization function for tableMap);
    }
    long long v72 = static ErrorString.tableMap;
    long long v71 = xmmword_3ABE80;
    uint64_t v15 = StringProtocol.replacingOccurrences<A, B>(of:with:options:range:)(&v72, &v71, 1, 0, 0, 1, &type metadata for String, &type metadata for String, &type metadata for String, v8, v8, v8);
    uint64_t v17 = v16;
    swift_bridgeObjectRelease(v60);
    uint64_t v73 = v15;
    char v61 = v17;
    uint64_t v74 = v17;
    if (one-time initialization token for columnMap != -1) {
      swift_once(&one-time initialization token for columnMap, one-time initialization function for columnMap);
    }
    long long v72 = static ErrorString.columnMap;
    long long v71 = xmmword_3ABEA0;
    uint64_t v18 = StringProtocol.replacingOccurrences<A, B>(of:with:options:range:)(&v72, &v71, 1, 0, 0, 1, &type metadata for String, &type metadata for String, &type metadata for String, v8, v8, v8);
    uint64_t v20 = v19;
    swift_bridgeObjectRelease(v61);
    uint64_t v73 = v18;
    char v62 = v20;
    uint64_t v74 = v20;
    if (one-time initialization token for drop != -1) {
      swift_once(&one-time initialization token for drop, one-time initialization function for drop);
    }
    long long v72 = static ErrorString.drop;
    long long v71 = xmmword_3ABEC0;
    uint64_t v21 = StringProtocol.replacingOccurrences<A, B>(of:with:options:range:)(&v72, &v71, 1, 0, 0, 1, &type metadata for String, &type metadata for String, &type metadata for String, v8, v8, v8);
    uint64_t v23 = v22;
    swift_bridgeObjectRelease(v62);
    uint64_t v73 = v21;
    char v63 = v23;
    uint64_t v74 = v23;
    if (one-time initialization token for sequence != -1) {
      swift_once(&one-time initialization token for sequence, one-time initialization function for sequence);
    }
    long long v72 = static ErrorString.sequence;
    long long v71 = xmmword_3ABEE0;
    uint64_t v24 = StringProtocol.replacingOccurrences<A, B>(of:with:options:range:)(&v72, &v71, 1, 0, 0, 1, &type metadata for String, &type metadata for String, &type metadata for String, v8, v8, v8);
    uint64_t v26 = v25;
    swift_bridgeObjectRelease(v63);
    uint64_t v73 = v24;
    char v64 = v26;
    uint64_t v74 = v26;
    if (one-time initialization token for double != -1) {
      swift_once(&one-time initialization token for double, one-time initialization function for double);
    }
    long long v72 = static ErrorString.double;
    long long v71 = xmmword_3ABF00;
    uint64_t v27 = StringProtocol.replacingOccurrences<A, B>(of:with:options:range:)(&v72, &v71, 1, 0, 0, 1, &type metadata for String, &type metadata for String, &type metadata for String, v8, v8, v8);
    uint64_t v29 = v28;
    swift_bridgeObjectRelease(v64);
    uint64_t v73 = v27;
    char v65 = v29;
    uint64_t v74 = v29;
    if (one-time initialization token for integer != -1) {
      swift_once(&one-time initialization token for integer, one-time initialization function for integer);
    }
    long long v72 = static ErrorString.integer;
    long long v71 = xmmword_3ABF20;
    uint64_t v30 = StringProtocol.replacingOccurrences<A, B>(of:with:options:range:)(&v72, &v71, 1, 0, 0, 1, &type metadata for String, &type metadata for String, &type metadata for String, v8, v8, v8);
    uint64_t v32 = v31;
    swift_bridgeObjectRelease(v65);
    uint64_t v73 = v30;
    char v66 = v32;
    uint64_t v74 = v32;
    if (one-time initialization token for error != -1) {
      swift_once(&one-time initialization token for error, one-time initialization function for error);
    }
    long long v72 = static ErrorString.error;
    long long v71 = xmmword_3ABF40;
    uint64_t v33 = StringProtocol.replacingOccurrences<A, B>(of:with:options:range:)(&v72, &v71, 0, 0, 0, 1, &type metadata for String, &type metadata for String, &type metadata for String, v8, v8, v8);
    uint64_t v35 = v34;
    swift_bridgeObjectRelease(v66);
    uint64_t v73 = v33;
    char v67 = v35;
    uint64_t v74 = v35;
    if (one-time initialization token for archive != -1) {
      swift_once(&one-time initialization token for archive, one-time initialization function for archive);
    }
    long long v72 = static ErrorString.archive;
    long long v71 = xmmword_3ABF60;
    uint64_t v36 = StringProtocol.replacingOccurrences<A, B>(of:with:options:range:)(&v72, &v71, 0, 0, 0, 1, &type metadata for String, &type metadata for String, &type metadata for String, v8, v8, v8);
    uint64_t v38 = v37;
    swift_bridgeObjectRelease(v67);
    uint64_t v73 = v36;
    char v68 = v38;
    uint64_t v74 = v38;
    if (one-time initialization token for limit != -1) {
      swift_once(&one-time initialization token for limit, one-time initialization function for limit);
    }
    long long v72 = static ErrorString.limit;
    long long v71 = xmmword_3ABF80;
    uint64_t v39 = StringProtocol.replacingOccurrences<A, B>(of:with:options:range:)(&v72, &v71, 0, 0, 0, 1, &type metadata for String, &type metadata for String, &type metadata for String, v8, v8, v8);
    uint64_t v41 = v40;
    swift_bridgeObjectRelease(v68);
    uint64_t v73 = v39;
    char v69 = v41;
    uint64_t v74 = v41;
    if (one-time initialization token for supportedStackTypes != -1) {
      swift_once(&one-time initialization token for supportedStackTypes, one-time initialization function for supportedStackTypes);
    }
    long long v72 = static ErrorString.supportedStackTypes;
    long long v71 = xmmword_3ABFA0;
    uint64_t v42 = StringProtocol.replacingOccurrences<A, B>(of:with:options:range:)(&v72, &v71, 0, 0, 0, 1, &type metadata for String, &type metadata for String, &type metadata for String, v8, v8, v8);
    uint64_t v44 = v43;
    swift_bridgeObjectRelease(v69);
    uint64_t v73 = v42;
    uint64_t v74 = v44;
    if (one-time initialization token for sortTypes != -1) {
      swift_once(&one-time initialization token for sortTypes, one-time initialization function for sortTypes);
    }
    long long v72 = static ErrorString.sortTypes;
    long long v71 = xmmword_3ABFC0;
    uint64_t v45 = StringProtocol.replacingOccurrences<A, B>(of:with:options:range:)(&v72, &v71, 0, 0, 0, 1, &type metadata for String, &type metadata for String, &type metadata for String, v8, v8, v8);
    uint64_t v47 = v46;
    swift_bridgeObjectRelease(v44);
    type metadata accessor for OS_os_log();
    swift_bridgeObjectRetain(v47);
    uint64_t v48 = (void *)static OS_os_log.default.getter(v47);
    unsigned __int8 v70 = static os_log_type_t.error.getter(v47, &v71);
    uint64_t v49 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<CVarArg>);
    uint64_t v50 = (void *)swift_allocObject(v49, 72, 7);
    v50[2] = 1;
    v50[3] = 2;
    v50[7] = &type metadata for String;
    v50[8] = lazy protocol witness table accessor for type String and conformance String();
    v50[4] = v45;
    v50[5] = v47;
    os_log(_:dso:log:type:_:)("%@ \n", 4, 2, &dword_0, v48, v70, v50);

    swift_bridgeObjectRelease((_BYTE)v50);
    uint64_t v51 = lazy protocol witness table accessor for type MLCreateError and conformance MLCreateError();
    swift_allocError(&type metadata for MLCreateError, v51, 0, 0);
    *(void *)uint64_t v52 = v45;
    *(void *)(v52 + 8) = v47;
    *(_OWORD *)(v52 + 16) = 0;
    *(_OWORD *)(v52 + 32) = 0;
    *(unsigned char *)(v52 + 48) = 0;
    swift_willThrow(&type metadata for MLCreateError, v51, v52, v53, v54, v55);
    tc_v1_release(v57);
  }
  return __stack_chk_guard;
}

uint64_t specialized handling<A, B, C, D, E, F, G>(_:_:_:_:_:_:_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, char a6)
{
  uint64_t v77 = 0;
  uint64_t v6 = tc_v1_sarray_apply(a1, a2, a3, a4, a5, a6 & 1, &v77);
  uint64_t v7 = v77;
  if (v77)
  {
    uint64_t v8 = tc_v1_error_message(v77);
    if (!v8) {
      BUG();
    }
    uint64_t v59 = v7;
    uint64_t v58 = v6;
    uint64_t v75 = String.init(cString:)(v8);
    char v61 = v9;
    uint64_t v76 = v9;
    if (one-time initialization token for table != -1) {
      swift_once(&one-time initialization token for table, one-time initialization function for table);
    }
    long long v74 = static ErrorString.table;
    long long v73 = xmmword_3ABE40;
    uint64_t v10 = lazy protocol witness table accessor for type String and conformance String();
    uint64_t v11 = StringProtocol.replacingOccurrences<A, B>(of:with:options:range:)(&v74, &v73, 1, 0, 0, 1, &type metadata for String, &type metadata for String, &type metadata for String, v10, v10, v10);
    uint64_t v13 = v12;
    swift_bridgeObjectRelease(v61);
    uint64_t v75 = v11;
    char v62 = v13;
    uint64_t v76 = v13;
    if (one-time initialization token for column != -1) {
      swift_once(&one-time initialization token for column, one-time initialization function for column);
    }
    long long v74 = static ErrorString.column;
    long long v73 = xmmword_3ABE60;
    uint64_t v14 = StringProtocol.replacingOccurrences<A, B>(of:with:options:range:)(&v74, &v73, 1, 0, 0, 1, &type metadata for String, &type metadata for String, &type metadata for String, v10, v10, v10);
    uint64_t v16 = v15;
    swift_bridgeObjectRelease(v62);
    uint64_t v75 = v14;
    char v63 = v16;
    uint64_t v76 = v16;
    if (one-time initialization token for tableMap != -1) {
      swift_once(&one-time initialization token for tableMap, one-time initialization function for tableMap);
    }
    long long v74 = static ErrorString.tableMap;
    long long v73 = xmmword_3ABE80;
    uint64_t v17 = StringProtocol.replacingOccurrences<A, B>(of:with:options:range:)(&v74, &v73, 1, 0, 0, 1, &type metadata for String, &type metadata for String, &type metadata for String, v10, v10, v10);
    uint64_t v19 = v18;
    swift_bridgeObjectRelease(v63);
    uint64_t v75 = v17;
    char v64 = v19;
    uint64_t v76 = v19;
    if (one-time initialization token for columnMap != -1) {
      swift_once(&one-time initialization token for columnMap, one-time initialization function for columnMap);
    }
    long long v74 = static ErrorString.columnMap;
    long long v73 = xmmword_3ABEA0;
    uint64_t v20 = StringProtocol.replacingOccurrences<A, B>(of:with:options:range:)(&v74, &v73, 1, 0, 0, 1, &type metadata for String, &type metadata for String, &type metadata for String, v10, v10, v10);
    uint64_t v22 = v21;
    swift_bridgeObjectRelease(v64);
    uint64_t v75 = v20;
    char v65 = v22;
    uint64_t v76 = v22;
    if (one-time initialization token for drop != -1) {
      swift_once(&one-time initialization token for drop, one-time initialization function for drop);
    }
    long long v74 = static ErrorString.drop;
    long long v73 = xmmword_3ABEC0;
    uint64_t v23 = StringProtocol.replacingOccurrences<A, B>(of:with:options:range:)(&v74, &v73, 1, 0, 0, 1, &type metadata for String, &type metadata for String, &type metadata for String, v10, v10, v10);
    uint64_t v25 = v24;
    swift_bridgeObjectRelease(v65);
    uint64_t v75 = v23;
    char v66 = v25;
    uint64_t v76 = v25;
    if (one-time initialization token for sequence != -1) {
      swift_once(&one-time initialization token for sequence, one-time initialization function for sequence);
    }
    long long v74 = static ErrorString.sequence;
    long long v73 = xmmword_3ABEE0;
    uint64_t v26 = StringProtocol.replacingOccurrences<A, B>(of:with:options:range:)(&v74, &v73, 1, 0, 0, 1, &type metadata for String, &type metadata for String, &type metadata for String, v10, v10, v10);
    uint64_t v28 = v27;
    swift_bridgeObjectRelease(v66);
    uint64_t v75 = v26;
    uint64_t v76 = v28;
    if (one-time initialization token for double != -1) {
      swift_once(&one-time initialization token for double, one-time initialization function for double);
    }
    long long v74 = static ErrorString.double;
    long long v73 = xmmword_3ABF00;
    uint64_t v29 = StringProtocol.replacingOccurrences<A, B>(of:with:options:range:)(&v74, &v73, 1, 0, 0, 1, &type metadata for String, &type metadata for String, &type metadata for String, v10, v10, v10);
    uint64_t v31 = v30;
    swift_bridgeObjectRelease(v28);
    uint64_t v75 = v29;
    char v67 = v31;
    uint64_t v76 = v31;
    if (one-time initialization token for integer != -1) {
      swift_once(&one-time initialization token for integer, one-time initialization function for integer);
    }
    long long v74 = static ErrorString.integer;
    long long v73 = xmmword_3ABF20;
    uint64_t v32 = StringProtocol.replacingOccurrences<A, B>(of:with:options:range:)(&v74, &v73, 1, 0, 0, 1, &type metadata for String, &type metadata for String, &type metadata for String, v10, v10, v10);
    uint64_t v34 = v33;
    swift_bridgeObjectRelease(v67);
    uint64_t v75 = v32;
    char v68 = v34;
    uint64_t v76 = v34;
    if (one-time initialization token for error != -1) {
      swift_once(&one-time initialization token for error, one-time initialization function for error);
    }
    long long v74 = static ErrorString.error;
    long long v73 = xmmword_3ABF40;
    uint64_t v35 = StringProtocol.replacingOccurrences<A, B>(of:with:options:range:)(&v74, &v73, 0, 0, 0, 1, &type metadata for String, &type metadata for String, &type metadata for String, v10, v10, v10);
    uint64_t v37 = v36;
    swift_bridgeObjectRelease(v68);
    uint64_t v75 = v35;
    char v69 = v37;
    uint64_t v76 = v37;
    if (one-time initialization token for archive != -1) {
      swift_once(&one-time initialization token for archive, one-time initialization function for archive);
    }
    long long v74 = static ErrorString.archive;
    long long v73 = xmmword_3ABF60;
    uint64_t v38 = StringProtocol.replacingOccurrences<A, B>(of:with:options:range:)(&v74, &v73, 0, 0, 0, 1, &type metadata for String, &type metadata for String, &type metadata for String, v10, v10, v10);
    uint64_t v40 = v39;
    swift_bridgeObjectRelease(v69);
    uint64_t v75 = v38;
    char v70 = v40;
    uint64_t v76 = v40;
    if (one-time initialization token for limit != -1) {
      swift_once(&one-time initialization token for limit, one-time initialization function for limit);
    }
    long long v74 = static ErrorString.limit;
    long long v73 = xmmword_3ABF80;
    uint64_t v41 = StringProtocol.replacingOccurrences<A, B>(of:with:options:range:)(&v74, &v73, 0, 0, 0, 1, &type metadata for String, &type metadata for String, &type metadata for String, v10, v10, v10);
    uint64_t v43 = v42;
    swift_bridgeObjectRelease(v70);
    uint64_t v75 = v41;
    char v71 = v43;
    uint64_t v76 = v43;
    if (one-time initialization token for supportedStackTypes != -1) {
      swift_once(&one-time initialization token for supportedStackTypes, one-time initialization function for supportedStackTypes);
    }
    long long v74 = static ErrorString.supportedStackTypes;
    long long v73 = xmmword_3ABFA0;
    uint64_t v44 = StringProtocol.replacingOccurrences<A, B>(of:with:options:range:)(&v74, &v73, 0, 0, 0, 1, &type metadata for String, &type metadata for String, &type metadata for String, v10, v10, v10);
    uint64_t v46 = v45;
    swift_bridgeObjectRelease(v71);
    uint64_t v75 = v44;
    uint64_t v76 = v46;
    if (one-time initialization token for sortTypes != -1) {
      swift_once(&one-time initialization token for sortTypes, one-time initialization function for sortTypes);
    }
    long long v74 = static ErrorString.sortTypes;
    long long v73 = xmmword_3ABFC0;
    uint64_t v47 = StringProtocol.replacingOccurrences<A, B>(of:with:options:range:)(&v74, &v73, 0, 0, 0, 1, &type metadata for String, &type metadata for String, &type metadata for String, v10, v10, v10);
    uint64_t v72 = v48;
    swift_bridgeObjectRelease(v46);
    type metadata accessor for OS_os_log();
    uint64_t v49 = (void *)static OS_os_log.default.getter(0);
    unsigned __int8 v60 = static os_log_type_t.error.getter(0, &v73);
    uint64_t v50 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<CVarArg>);
    uint64_t v51 = (void *)swift_allocObject(v50, 72, 7);
    void v51[2] = 1;
    v51[3] = 2;
    v51[7] = &type metadata for String;
    v51[8] = lazy protocol witness table accessor for type String and conformance String();
    void v51[4] = v47;
    v51[5] = v72;
    swift_bridgeObjectRetain(v72);
    os_log(_:dso:log:type:_:)("%@ \n", 4, 2, &dword_0, v49, v60, v51);

    swift_bridgeObjectRelease((_BYTE)v51);
    uint64_t v52 = lazy protocol witness table accessor for type MLCreateError and conformance MLCreateError();
    swift_allocError(&type metadata for MLCreateError, v52, 0, 0);
    *(void *)uint64_t v53 = v47;
    *(void *)(v53 + 8) = v72;
    *(_OWORD *)(v53 + 16) = 0;
    *(_OWORD *)(v53 + 32) = 0;
    *(unsigned char *)(v53 + 48) = 0;
    swift_willThrow(&type metadata for MLCreateError, v52, v53, v54, v55, v56);
    tc_v1_release(v59);
    return v58;
  }
  return v6;
}

uint64_t specialized handling<A, B, C, D, E, F, G>(_:_:_:_:_:_:_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  return specialized handling<A, B, C, D, E, F, G>(_:_:_:_:_:_:_:)(a1, a2, a3, a4, a5, a6, (uint64_t (*)(uint64_t))&tc_v1_plot_create_2d);
}

{
  return specialized handling<A, B, C, D, E, F, G>(_:_:_:_:_:_:_:)(a1, a2, a3, a4, a5, a6, (uint64_t (*)(uint64_t))&tc_v1_sframe_unpack_detailed);
}

uint64_t specialized handling<A, B, C, D, E, F, G>(_:_:_:_:_:_:_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t (*a7)(uint64_t))
{
  return a7(a1);
}

uint64_t specialized handling<A, B, C, D, E, F>(_:_:_:_:_:_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v76 = 0;
  uint64_t v5 = tc_v1_plot_create_1d(a1, a2, a3, a4, a5, &v76);
  uint64_t v6 = v76;
  if (v76)
  {
    uint64_t v7 = tc_v1_error_message(v76);
    if (!v7) {
      BUG();
    }
    uint64_t v58 = v6;
    uint64_t v57 = v5;
    uint64_t v74 = String.init(cString:)(v7);
    char v60 = v8;
    uint64_t v75 = v8;
    if (one-time initialization token for table != -1) {
      swift_once(&one-time initialization token for table, one-time initialization function for table);
    }
    long long v73 = static ErrorString.table;
    long long v72 = xmmword_3ABE40;
    uint64_t v9 = lazy protocol witness table accessor for type String and conformance String();
    uint64_t v10 = StringProtocol.replacingOccurrences<A, B>(of:with:options:range:)(&v73, &v72, 1, 0, 0, 1, &type metadata for String, &type metadata for String, &type metadata for String, v9, v9, v9);
    uint64_t v12 = v11;
    swift_bridgeObjectRelease(v60);
    uint64_t v74 = v10;
    char v61 = v12;
    uint64_t v75 = v12;
    if (one-time initialization token for column != -1) {
      swift_once(&one-time initialization token for column, one-time initialization function for column);
    }
    long long v73 = static ErrorString.column;
    long long v72 = xmmword_3ABE60;
    uint64_t v13 = StringProtocol.replacingOccurrences<A, B>(of:with:options:range:)(&v73, &v72, 1, 0, 0, 1, &type metadata for String, &type metadata for String, &type metadata for String, v9, v9, v9);
    uint64_t v15 = v14;
    swift_bridgeObjectRelease(v61);
    uint64_t v74 = v13;
    char v62 = v15;
    uint64_t v75 = v15;
    if (one-time initialization token for tableMap != -1) {
      swift_once(&one-time initialization token for tableMap, one-time initialization function for tableMap);
    }
    long long v73 = static ErrorString.tableMap;
    long long v72 = xmmword_3ABE80;
    uint64_t v16 = StringProtocol.replacingOccurrences<A, B>(of:with:options:range:)(&v73, &v72, 1, 0, 0, 1, &type metadata for String, &type metadata for String, &type metadata for String, v9, v9, v9);
    uint64_t v18 = v17;
    swift_bridgeObjectRelease(v62);
    uint64_t v74 = v16;
    char v63 = v18;
    uint64_t v75 = v18;
    if (one-time initialization token for columnMap != -1) {
      swift_once(&one-time initialization token for columnMap, one-time initialization function for columnMap);
    }
    long long v73 = static ErrorString.columnMap;
    long long v72 = xmmword_3ABEA0;
    uint64_t v19 = StringProtocol.replacingOccurrences<A, B>(of:with:options:range:)(&v73, &v72, 1, 0, 0, 1, &type metadata for String, &type metadata for String, &type metadata for String, v9, v9, v9);
    uint64_t v21 = v20;
    swift_bridgeObjectRelease(v63);
    uint64_t v74 = v19;
    char v64 = v21;
    uint64_t v75 = v21;
    if (one-time initialization token for drop != -1) {
      swift_once(&one-time initialization token for drop, one-time initialization function for drop);
    }
    long long v73 = static ErrorString.drop;
    long long v72 = xmmword_3ABEC0;
    uint64_t v22 = StringProtocol.replacingOccurrences<A, B>(of:with:options:range:)(&v73, &v72, 1, 0, 0, 1, &type metadata for String, &type metadata for String, &type metadata for String, v9, v9, v9);
    uint64_t v24 = v23;
    swift_bridgeObjectRelease(v64);
    uint64_t v74 = v22;
    char v65 = v24;
    uint64_t v75 = v24;
    if (one-time initialization token for sequence != -1) {
      swift_once(&one-time initialization token for sequence, one-time initialization function for sequence);
    }
    long long v73 = static ErrorString.sequence;
    long long v72 = xmmword_3ABEE0;
    uint64_t v25 = StringProtocol.replacingOccurrences<A, B>(of:with:options:range:)(&v73, &v72, 1, 0, 0, 1, &type metadata for String, &type metadata for String, &type metadata for String, v9, v9, v9);
    uint64_t v27 = v26;
    swift_bridgeObjectRelease(v65);
    uint64_t v74 = v25;
    uint64_t v75 = v27;
    if (one-time initialization token for double != -1) {
      swift_once(&one-time initialization token for double, one-time initialization function for double);
    }
    long long v73 = static ErrorString.double;
    long long v72 = xmmword_3ABF00;
    uint64_t v28 = StringProtocol.replacingOccurrences<A, B>(of:with:options:range:)(&v73, &v72, 1, 0, 0, 1, &type metadata for String, &type metadata for String, &type metadata for String, v9, v9, v9);
    uint64_t v30 = v29;
    swift_bridgeObjectRelease(v27);
    uint64_t v74 = v28;
    char v66 = v30;
    uint64_t v75 = v30;
    if (one-time initialization token for integer != -1) {
      swift_once(&one-time initialization token for integer, one-time initialization function for integer);
    }
    long long v73 = static ErrorString.integer;
    long long v72 = xmmword_3ABF20;
    uint64_t v31 = StringProtocol.replacingOccurrences<A, B>(of:with:options:range:)(&v73, &v72, 1, 0, 0, 1, &type metadata for String, &type metadata for String, &type metadata for String, v9, v9, v9);
    uint64_t v33 = v32;
    swift_bridgeObjectRelease(v66);
    uint64_t v74 = v31;
    char v67 = v33;
    uint64_t v75 = v33;
    if (one-time initialization token for error != -1) {
      swift_once(&one-time initialization token for error, one-time initialization function for error);
    }
    long long v73 = static ErrorString.error;
    long long v72 = xmmword_3ABF40;
    uint64_t v34 = StringProtocol.replacingOccurrences<A, B>(of:with:options:range:)(&v73, &v72, 0, 0, 0, 1, &type metadata for String, &type metadata for String, &type metadata for String, v9, v9, v9);
    uint64_t v36 = v35;
    swift_bridgeObjectRelease(v67);
    uint64_t v74 = v34;
    char v68 = v36;
    uint64_t v75 = v36;
    if (one-time initialization token for archive != -1) {
      swift_once(&one-time initialization token for archive, one-time initialization function for archive);
    }
    long long v73 = static ErrorString.archive;
    long long v72 = xmmword_3ABF60;
    uint64_t v37 = StringProtocol.replacingOccurrences<A, B>(of:with:options:range:)(&v73, &v72, 0, 0, 0, 1, &type metadata for String, &type metadata for String, &type metadata for String, v9, v9, v9);
    uint64_t v39 = v38;
    swift_bridgeObjectRelease(v68);
    uint64_t v74 = v37;
    char v69 = v39;
    uint64_t v75 = v39;
    if (one-time initialization token for limit != -1) {
      swift_once(&one-time initialization token for limit, one-time initialization function for limit);
    }
    long long v73 = static ErrorString.limit;
    long long v72 = xmmword_3ABF80;
    uint64_t v40 = StringProtocol.replacingOccurrences<A, B>(of:with:options:range:)(&v73, &v72, 0, 0, 0, 1, &type metadata for String, &type metadata for String, &type metadata for String, v9, v9, v9);
    uint64_t v42 = v41;
    swift_bridgeObjectRelease(v69);
    uint64_t v74 = v40;
    char v70 = v42;
    uint64_t v75 = v42;
    if (one-time initialization token for supportedStackTypes != -1) {
      swift_once(&one-time initialization token for supportedStackTypes, one-time initialization function for supportedStackTypes);
    }
    long long v73 = static ErrorString.supportedStackTypes;
    long long v72 = xmmword_3ABFA0;
    uint64_t v43 = StringProtocol.replacingOccurrences<A, B>(of:with:options:range:)(&v73, &v72, 0, 0, 0, 1, &type metadata for String, &type metadata for String, &type metadata for String, v9, v9, v9);
    uint64_t v45 = v44;
    swift_bridgeObjectRelease(v70);
    uint64_t v74 = v43;
    uint64_t v75 = v45;
    if (one-time initialization token for sortTypes != -1) {
      swift_once(&one-time initialization token for sortTypes, one-time initialization function for sortTypes);
    }
    long long v73 = static ErrorString.sortTypes;
    long long v72 = xmmword_3ABFC0;
    uint64_t v46 = StringProtocol.replacingOccurrences<A, B>(of:with:options:range:)(&v73, &v72, 0, 0, 0, 1, &type metadata for String, &type metadata for String, &type metadata for String, v9, v9, v9);
    uint64_t v71 = v47;
    swift_bridgeObjectRelease(v45);
    type metadata accessor for OS_os_log();
    uint64_t v48 = (void *)static OS_os_log.default.getter(0);
    unsigned __int8 v59 = static os_log_type_t.error.getter(0, &v72);
    uint64_t v49 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<CVarArg>);
    uint64_t v50 = (void *)swift_allocObject(v49, 72, 7);
    v50[2] = 1;
    v50[3] = 2;
    v50[7] = &type metadata for String;
    v50[8] = lazy protocol witness table accessor for type String and conformance String();
    v50[4] = v46;
    v50[5] = v71;
    swift_bridgeObjectRetain(v71);
    os_log(_:dso:log:type:_:)("%@ \n", 4, 2, &dword_0, v48, v59, v50);

    swift_bridgeObjectRelease((_BYTE)v50);
    uint64_t v51 = lazy protocol witness table accessor for type MLCreateError and conformance MLCreateError();
    swift_allocError(&type metadata for MLCreateError, v51, 0, 0);
    *(void *)uint64_t v52 = v46;
    *(void *)(v52 + 8) = v71;
    *(_OWORD *)(v52 + 16) = 0;
    *(_OWORD *)(v52 + 32) = 0;
    *(unsigned char *)(v52 + 48) = 0;
    swift_willThrow(&type metadata for MLCreateError, v51, v52, v53, v54, v55);
    tc_v1_release(v58);
    return v57;
  }
  return v5;
}

{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  void *v48;
  uint64_t v49;
  void *v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v57;
  uint64_t v58;
  unsigned __int8 v59;
  char v60;
  char v61;
  char v62;
  char v63;
  char v64;
  char v65;
  char v66;
  char v67;
  char v68;
  char v69;
  char v70;
  uint64_t v71;
  long long v72;
  long long v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;

  uint64_t v76 = 0;
  uint64_t v5 = tc_v1_sframe_apply(a1, a2, a3, a4, a5, &v76);
  uint64_t v6 = v76;
  if (v76)
  {
    uint64_t v7 = tc_v1_error_message(v76);
    if (!v7) {
      BUG();
    }
    uint64_t v58 = v6;
    uint64_t v57 = v5;
    uint64_t v74 = String.init(cString:)(v7);
    char v60 = v8;
    uint64_t v75 = v8;
    if (one-time initialization token for table != -1) {
      swift_once(&one-time initialization token for table, one-time initialization function for table);
    }
    long long v73 = static ErrorString.table;
    long long v72 = xmmword_3ABE40;
    uint64_t v9 = lazy protocol witness table accessor for type String and conformance String();
    uint64_t v10 = StringProtocol.replacingOccurrences<A, B>(of:with:options:range:)(&v73, &v72, 1, 0, 0, 1, &type metadata for String, &type metadata for String, &type metadata for String, v9, v9, v9);
    uint64_t v12 = v11;
    swift_bridgeObjectRelease(v60);
    uint64_t v74 = v10;
    char v61 = v12;
    uint64_t v75 = v12;
    if (one-time initialization token for column != -1) {
      swift_once(&one-time initialization token for column, one-time initialization function for column);
    }
    long long v73 = static ErrorString.column;
    long long v72 = xmmword_3ABE60;
    uint64_t v13 = StringProtocol.replacingOccurrences<A, B>(of:with:options:range:)(&v73, &v72, 1, 0, 0, 1, &type metadata for String, &type metadata for String, &type metadata for String, v9, v9, v9);
    uint64_t v15 = v14;
    swift_bridgeObjectRelease(v61);
    uint64_t v74 = v13;
    char v62 = v15;
    uint64_t v75 = v15;
    if (one-time initialization token for tableMap != -1) {
      swift_once(&one-time initialization token for tableMap, one-time initialization function for tableMap);
    }
    long long v73 = static ErrorString.tableMap;
    long long v72 = xmmword_3ABE80;
    uint64_t v16 = StringProtocol.replacingOccurrences<A, B>(of:with:options:range:)(&v73, &v72, 1, 0, 0, 1, &type metadata for String, &type metadata for String, &type metadata for String, v9, v9, v9);
    uint64_t v18 = v17;
    swift_bridgeObjectRelease(v62);
    uint64_t v74 = v16;
    char v63 = v18;
    uint64_t v75 = v18;
    if (one-time initialization token for columnMap != -1) {
      swift_once(&one-time initialization token for columnMap, one-time initialization function for columnMap);
    }
    long long v73 = static ErrorString.columnMap;
    long long v72 = xmmword_3ABEA0;
    uint64_t v19 = StringProtocol.replacingOccurrences<A, B>(of:with:options:range:)(&v73, &v72, 1, 0, 0, 1, &type metadata for String, &type metadata for String, &type metadata for String, v9, v9, v9);
    uint64_t v21 = v20;
    swift_bridgeObjectRelease(v63);
    uint64_t v74 = v19;
    char v64 = v21;
    uint64_t v75 = v21;
    if (one-time initialization token for drop != -1) {
      swift_once(&one-time initialization token for drop, one-time initialization function for drop);
    }
    long long v73 = static ErrorString.drop;
    long long v72 = xmmword_3ABEC0;
    uint64_t v22 = StringProtocol.replacingOccurrences<A, B>(of:with:options:range:)(&v73, &v72, 1, 0, 0, 1, &type metadata for String, &type metadata for String, &type metadata for String, v9, v9, v9);
    uint64_t v24 = v23;
    swift_bridgeObjectRelease(v64);
    uint64_t v74 = v22;
    char v65 = v24;
    uint64_t v75 = v24;
    if (one-time initialization token for sequence != -1) {
      swift_once(&one-time initialization token for sequence, one-time initialization function for sequence);
    }
    long long v73 = static ErrorString.sequence;
    long long v72 = xmmword_3ABEE0;
    uint64_t v25 = StringProtocol.replacingOccurrences<A, B>(of:with:options:range:)(&v73, &v72, 1, 0, 0, 1, &type metadata for String, &type metadata for String, &type metadata for String, v9, v9, v9);
    uint64_t v27 = v26;
    swift_bridgeObjectRelease(v65);
    uint64_t v74 = v25;
    uint64_t v75 = v27;
    if (one-time initialization token for double != -1) {
      swift_once(&one-time initialization token for double, one-time initialization function for double);
    }
    long long v73 = static ErrorString.double;
    long long v72 = xmmword_3ABF00;
    uint64_t v28 = StringProtocol.replacingOccurrences<A, B>(of:with:options:range:)(&v73, &v72, 1, 0, 0, 1, &type metadata for String, &type metadata for String, &type metadata for String, v9, v9, v9);
    uint64_t v30 = v29;
    swift_bridgeObjectRelease(v27);
    uint64_t v74 = v28;
    char v66 = v30;
    uint64_t v75 = v30;
    if (one-time initialization token for integer != -1) {
      swift_once(&one-time initialization token for integer, one-time initialization function for integer);
    }
    long long v73 = static ErrorString.integer;
    long long v72 = xmmword_3ABF20;
    uint64_t v31 = StringProtocol.replacingOccurrences<A, B>(of:with:options:range:)(&v73, &v72, 1, 0, 0, 1, &type metadata for String, &type metadata for String, &type metadata for String, v9, v9, v9);
    uint64_t v33 = v32;
    swift_bridgeObjectRelease(v66);
    uint64_t v74 = v31;
    char v67 = v33;
    uint64_t v75 = v33;
    if (one-time initialization token for error != -1) {
      swift_once(&one-time initialization token for error, one-time initialization function for error);
    }
    long long v73 = static ErrorString.error;
    long long v72 = xmmword_3ABF40;
    uint64_t v34 = StringProtocol.replacingOccurrences<A, B>(of:with:options:range:)(&v73, &v72, 0, 0, 0, 1, &type metadata for String, &type metadata for String, &type metadata for String, v9, v9, v9);
    uint64_t v36 = v35;
    swift_bridgeObjectRelease(v67);
    uint64_t v74 = v34;
    char v68 = v36;
    uint64_t v75 = v36;
    if (one-time initialization token for archive != -1) {
      swift_once(&one-time initialization token for archive, one-time initialization function for archive);
    }
    long long v73 = static ErrorString.archive;
    long long v72 = xmmword_3ABF60;
    uint64_t v37 = StringProtocol.replacingOccurrences<A, B>(of:with:options:range:)(&v73, &v72, 0, 0, 0, 1, &type metadata for String, &type metadata for String, &type metadata for String, v9, v9, v9);
    uint64_t v39 = v38;
    swift_bridgeObjectRelease(v68);
    uint64_t v74 = v37;
    char v69 = v39;
    uint64_t v75 = v39;
    if (one-time initialization token for limit != -1) {
      swift_once(&one-time initialization token for limit, one-time initialization function for limit);
    }
    long long v73 = static ErrorString.limit;
    long long v72 = xmmword_3ABF80;
    uint64_t v40 = StringProtocol.replacingOccurrences<A, B>(of:with:options:range:)(&v73, &v72, 0, 0, 0, 1, &type metadata for String, &type metadata for String, &type metadata for String, v9, v9, v9);
    uint64_t v42 = v41;
    swift_bridgeObjectRelease(v69);
    uint64_t v74 = v40;
    char v70 = v42;
    uint64_t v75 = v42;
    if (one-time initialization token for supportedStackTypes != -1) {
      swift_once(&one-time initialization token for supportedStackTypes, one-time initialization function for supportedStackTypes);
    }
    long long v73 = static ErrorString.supportedStackTypes;
    long long v72 = xmmword_3ABFA0;
    uint64_t v43 = StringProtocol.replacingOccurrences<A, B>(of:with:options:range:)(&v73, &v72, 0, 0, 0, 1, &type metadata for String, &type metadata for String, &type metadata for String, v9, v9, v9);
    uint64_t v45 = v44;
    swift_bridgeObjectRelease(v70);
    uint64_t v74 = v43;
    uint64_t v75 = v45;
    if (one-time initialization token for sortTypes != -1) {
      swift_once(&one-time initialization token for sortTypes, one-time initialization function for sortTypes);
    }
    long long v73 = static ErrorString.sortTypes;
    long long v72 = xmmword_3ABFC0;
    uint64_t v46 = StringProtocol.replacingOccurrences<A, B>(of:with:options:range:)(&v73, &v72, 0, 0, 0, 1, &type metadata for String, &type metadata for String, &type metadata for String, v9, v9, v9);
    uint64_t v71 = v47;
    swift_bridgeObjectRelease(v45);
    type metadata accessor for OS_os_log();
    uint64_t v48 = (void *)static OS_os_log.default.getter(0);
    unsigned __int8 v59 = static os_log_type_t.error.getter(0, &v72);
    uint64_t v49 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<CVarArg>);
    uint64_t v50 = (void *)swift_allocObject(v49, 72, 7);
    v50[2] = 1;
    v50[3] = 2;
    v50[7] = &type metadata for String;
    v50[8] = lazy protocol witness table accessor for type String and conformance String();
    v50[4] = v46;
    v50[5] = v71;
    swift_bridgeObjectRetain(v71);
    os_log(_:dso:log:type:_:)("%@ \n", 4, 2, &dword_0, v48, v59, v50);

    swift_bridgeObjectRelease((_BYTE)v50);
    uint64_t v51 = lazy protocol witness table accessor for type MLCreateError and conformance MLCreateError();
    swift_allocError(&type metadata for MLCreateError, v51, 0, 0);
    *(void *)uint64_t v52 = v46;
    *(void *)(v52 + 8) = v71;
    *(_OWORD *)(v52 + 16) = 0;
    *(_OWORD *)(v52 + 32) = 0;
    *(unsigned char *)(v52 + 48) = 0;
    swift_willThrow(&type metadata for MLCreateError, v51, v52, v53, v54, v55);
    tc_v1_release(v58);
    return v57;
  }
  return v5;
}

{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  void *v48;
  uint64_t v49;
  void *v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v57;
  uint64_t v58;
  unsigned __int8 v59;
  char v60;
  char v61;
  char v62;
  char v63;
  char v64;
  char v65;
  char v66;
  char v67;
  char v68;
  char v69;
  char v70;
  uint64_t v71;
  long long v72;
  long long v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;

  uint64_t v76 = 0;
  uint64_t v5 = tc_v1_sframe_pack_columns_vector(a1, a2, a3, a4, a5, &v76);
  uint64_t v6 = v76;
  if (v76)
  {
    uint64_t v7 = tc_v1_error_message(v76);
    if (!v7) {
      BUG();
    }
    uint64_t v58 = v6;
    uint64_t v57 = v5;
    uint64_t v74 = String.init(cString:)(v7);
    char v60 = v8;
    uint64_t v75 = v8;
    if (one-time initialization token for table != -1) {
      swift_once(&one-time initialization token for table, one-time initialization function for table);
    }
    long long v73 = static ErrorString.table;
    long long v72 = xmmword_3ABE40;
    uint64_t v9 = lazy protocol witness table accessor for type String and conformance String();
    uint64_t v10 = StringProtocol.replacingOccurrences<A, B>(of:with:options:range:)(&v73, &v72, 1, 0, 0, 1, &type metadata for String, &type metadata for String, &type metadata for String, v9, v9, v9);
    uint64_t v12 = v11;
    swift_bridgeObjectRelease(v60);
    uint64_t v74 = v10;
    char v61 = v12;
    uint64_t v75 = v12;
    if (one-time initialization token for column != -1) {
      swift_once(&one-time initialization token for column, one-time initialization function for column);
    }
    long long v73 = static ErrorString.column;
    long long v72 = xmmword_3ABE60;
    uint64_t v13 = StringProtocol.replacingOccurrences<A, B>(of:with:options:range:)(&v73, &v72, 1, 0, 0, 1, &type metadata for String, &type metadata for String, &type metadata for String, v9, v9, v9);
    uint64_t v15 = v14;
    swift_bridgeObjectRelease(v61);
    uint64_t v74 = v13;
    char v62 = v15;
    uint64_t v75 = v15;
    if (one-time initialization token for tableMap != -1) {
      swift_once(&one-time initialization token for tableMap, one-time initialization function for tableMap);
    }
    long long v73 = static ErrorString.tableMap;
    long long v72 = xmmword_3ABE80;
    uint64_t v16 = StringProtocol.replacingOccurrences<A, B>(of:with:options:range:)(&v73, &v72, 1, 0, 0, 1, &type metadata for String, &type metadata for String, &type metadata for String, v9, v9, v9);
    uint64_t v18 = v17;
    swift_bridgeObjectRelease(v62);
    uint64_t v74 = v16;
    char v63 = v18;
    uint64_t v75 = v18;
    if (one-time initialization token for columnMap != -1) {
      swift_once(&one-time initialization token for columnMap, one-time initialization function for columnMap);
    }
    long long v73 = static ErrorString.columnMap;
    long long v72 = xmmword_3ABEA0;
    uint64_t v19 = StringProtocol.replacingOccurrences<A, B>(of:with:options:range:)(&v73, &v72, 1, 0, 0, 1, &type metadata for String, &type metadata for String, &type metadata for String, v9, v9, v9);
    uint64_t v21 = v20;
    swift_bridgeObjectRelease(v63);
    uint64_t v74 = v19;
    char v64 = v21;
    uint64_t v75 = v21;
    if (one-time initialization token for drop != -1) {
      swift_once(&one-time initialization token for drop, one-time initialization function for drop);
    }
    long long v73 = static ErrorString.drop;
    long long v72 = xmmword_3ABEC0;
    uint64_t v22 = StringProtocol.replacingOccurrences<A, B>(of:with:options:range:)(&v73, &v72, 1, 0, 0, 1, &type metadata for String, &type metadata for String, &type metadata for String, v9, v9, v9);
    uint64_t v24 = v23;
    swift_bridgeObjectRelease(v64);
    uint64_t v74 = v22;
    char v65 = v24;
    uint64_t v75 = v24;
    if (one-time initialization token for sequence != -1) {
      swift_once(&one-time initialization token for sequence, one-time initialization function for sequence);
    }
    long long v73 = static ErrorString.sequence;
    long long v72 = xmmword_3ABEE0;
    uint64_t v25 = StringProtocol.replacingOccurrences<A, B>(of:with:options:range:)(&v73, &v72, 1, 0, 0, 1, &type metadata for String, &type metadata for String, &type metadata for String, v9, v9, v9);
    uint64_t v27 = v26;
    swift_bridgeObjectRelease(v65);
    uint64_t v74 = v25;
    uint64_t v75 = v27;
    if (one-time initialization token for double != -1) {
      swift_once(&one-time initialization token for double, one-time initialization function for double);
    }
    long long v73 = static ErrorString.double;
    long long v72 = xmmword_3ABF00;
    uint64_t v28 = StringProtocol.replacingOccurrences<A, B>(of:with:options:range:)(&v73, &v72, 1, 0, 0, 1, &type metadata for String, &type metadata for String, &type metadata for String, v9, v9, v9);
    uint64_t v30 = v29;
    swift_bridgeObjectRelease(v27);
    uint64_t v74 = v28;
    char v66 = v30;
    uint64_t v75 = v30;
    if (one-time initialization token for integer != -1) {
      swift_once(&one-time initialization token for integer, one-time initialization function for integer);
    }
    long long v73 = static ErrorString.integer;
    long long v72 = xmmword_3ABF20;
    uint64_t v31 = StringProtocol.replacingOccurrences<A, B>(of:with:options:range:)(&v73, &v72, 1, 0, 0, 1, &type metadata for String, &type metadata for String, &type metadata for String, v9, v9, v9);
    uint64_t v33 = v32;
    swift_bridgeObjectRelease(v66);
    uint64_t v74 = v31;
    char v67 = v33;
    uint64_t v75 = v33;
    if (one-time initialization token for error != -1) {
      swift_once(&one-time initialization token for error, one-time initialization function for error);
    }
    long long v73 = static ErrorString.error;
    long long v72 = xmmword_3ABF40;
    uint64_t v34 = StringProtocol.replacingOccurrences<A, B>(of:with:options:range:)(&v73, &v72, 0, 0, 0, 1, &type metadata for String, &type metadata for String, &type metadata for String, v9, v9, v9);
    uint64_t v36 = v35;
    swift_bridgeObjectRelease(v67);
    uint64_t v74 = v34;
    char v68 = v36;
    uint64_t v75 = v36;
    if (one-time initialization token for archive != -1) {
      swift_once(&one-time initialization token for archive, one-time initialization function for archive);
    }
    long long v73 = static ErrorString.archive;
    long long v72 = xmmword_3ABF60;
    uint64_t v37 = StringProtocol.replacingOccurrences<A, B>(of:with:options:range:)(&v73, &v72, 0, 0, 0, 1, &type metadata for String, &type metadata for String, &type metadata for String, v9, v9, v9);
    uint64_t v39 = v38;
    swift_bridgeObjectRelease(v68);
    uint64_t v74 = v37;
    char v69 = v39;
    uint64_t v75 = v39;
    if (one-time initialization token for limit != -1) {
      swift_once(&one-time initialization token for limit, one-time initialization function for limit);
    }
    long long v73 = static ErrorString.limit;
    long long v72 = xmmword_3ABF80;
    uint64_t v40 = StringProtocol.replacingOccurrences<A, B>(of:with:options:range:)(&v73, &v72, 0, 0, 0, 1, &type metadata for String, &type metadata for String, &type metadata for String, v9, v9, v9);
    uint64_t v42 = v41;
    swift_bridgeObjectRelease(v69);
    uint64_t v74 = v40;
    char v70 = v42;
    uint64_t v75 = v42;
    if (one-time initialization token for supportedStackTypes != -1) {
      swift_once(&one-time initialization token for supportedStackTypes, one-time initialization function for supportedStackTypes);
    }
    long long v73 = static ErrorString.supportedStackTypes;
    long long v72 = xmmword_3ABFA0;
    uint64_t v43 = StringProtocol.replacingOccurrences<A, B>(of:with:options:range:)(&v73, &v72, 0, 0, 0, 1, &type metadata for String, &type metadata for String, &type metadata for String, v9, v9, v9);
    uint64_t v45 = v44;
    swift_bridgeObjectRelease(v70);
    uint64_t v74 = v43;
    uint64_t v75 = v45;
    if (one-time initialization token for sortTypes != -1) {
      swift_once(&one-time initialization token for sortTypes, one-time initialization function for sortTypes);
    }
    long long v73 = static ErrorString.sortTypes;
    long long v72 = xmmword_3ABFC0;
    uint64_t v46 = StringProtocol.replacingOccurrences<A, B>(of:with:options:range:)(&v73, &v72, 0, 0, 0, 1, &type metadata for String, &type metadata for String, &type metadata for String, v9, v9, v9);
    uint64_t v71 = v47;
    swift_bridgeObjectRelease(v45);
    type metadata accessor for OS_os_log();
    uint64_t v48 = (void *)static OS_os_log.default.getter(0);
    unsigned __int8 v59 = static os_log_type_t.error.getter(0, &v72);
    uint64_t v49 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<CVarArg>);
    uint64_t v50 = (void *)swift_allocObject(v49, 72, 7);
    v50[2] = 1;
    v50[3] = 2;
    v50[7] = &type metadata for String;
    v50[8] = lazy protocol witness table accessor for type String and conformance String();
    v50[4] = v46;
    v50[5] = v71;
    swift_bridgeObjectRetain(v71);
    os_log(_:dso:log:type:_:)("%@ \n", 4, 2, &dword_0, v48, v59, v50);

    swift_bridgeObjectRelease((_BYTE)v50);
    uint64_t v51 = lazy protocol witness table accessor for type MLCreateError and conformance MLCreateError();
    swift_allocError(&type metadata for MLCreateError, v51, 0, 0);
    *(void *)uint64_t v52 = v46;
    *(void *)(v52 + 8) = v71;
    *(_OWORD *)(v52 + 16) = 0;
    *(_OWORD *)(v52 + 32) = 0;
    *(unsigned char *)(v52 + 48) = 0;
    swift_willThrow(&type metadata for MLCreateError, v51, v52, v53, v54, v55);
    tc_v1_release(v58);
    return v57;
  }
  return v5;
}

NSURL *specialized handling<A, B, C, D, E, F>(_:_:_:_:_:_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v71 = 0;
  tc_v1_sframe_random_split(a1, a2, a3, a4, &v71);
  uint64_t v4 = v71;
  if (v71)
  {
    uint64_t v5 = tc_v1_error_message(v71);
    if (!v5) {
      BUG();
    }
    uint64_t v52 = v4;
    uint64_t v69 = String.init(cString:)(v5);
    uint64_t v54 = v6;
    uint64_t v70 = v6;
    if (one-time initialization token for table != -1) {
      swift_once(&one-time initialization token for table, one-time initialization function for table);
    }
    long long v68 = static ErrorString.table;
    long long v67 = xmmword_3ABE40;
    uint64_t v7 = lazy protocol witness table accessor for type String and conformance String();
    uint64_t v8 = StringProtocol.replacingOccurrences<A, B>(of:with:options:range:)(&v68, &v67, 1, 0, 0, 1, &type metadata for String, &type metadata for String, &type metadata for String, v7, v7, v7);
    uint64_t v10 = v9;
    swift_bridgeObjectRelease(v54);
    uint64_t v69 = v8;
    uint64_t v55 = v10;
    uint64_t v70 = v10;
    if (one-time initialization token for column != -1) {
      swift_once(&one-time initialization token for column, one-time initialization function for column);
    }
    long long v68 = static ErrorString.column;
    long long v67 = xmmword_3ABE60;
    uint64_t v11 = StringProtocol.replacingOccurrences<A, B>(of:with:options:range:)(&v68, &v67, 1, 0, 0, 1, &type metadata for String, &type metadata for String, &type metadata for String, v7, v7, v7);
    uint64_t v13 = v12;
    swift_bridgeObjectRelease(v55);
    uint64_t v69 = v11;
    uint64_t v56 = v13;
    uint64_t v70 = v13;
    if (one-time initialization token for tableMap != -1) {
      swift_once(&one-time initialization token for tableMap, one-time initialization function for tableMap);
    }
    long long v68 = static ErrorString.tableMap;
    long long v67 = xmmword_3ABE80;
    uint64_t v14 = StringProtocol.replacingOccurrences<A, B>(of:with:options:range:)(&v68, &v67, 1, 0, 0, 1, &type metadata for String, &type metadata for String, &type metadata for String, v7, v7, v7);
    uint64_t v16 = v15;
    swift_bridgeObjectRelease(v56);
    uint64_t v69 = v14;
    uint64_t v57 = v16;
    uint64_t v70 = v16;
    if (one-time initialization token for columnMap != -1) {
      swift_once(&one-time initialization token for columnMap, one-time initialization function for columnMap);
    }
    long long v68 = static ErrorString.columnMap;
    long long v67 = xmmword_3ABEA0;
    uint64_t v17 = StringProtocol.replacingOccurrences<A, B>(of:with:options:range:)(&v68, &v67, 1, 0, 0, 1, &type metadata for String, &type metadata for String, &type metadata for String, v7, v7, v7);
    uint64_t v19 = v18;
    swift_bridgeObjectRelease(v57);
    uint64_t v69 = v17;
    uint64_t v58 = v19;
    uint64_t v70 = v19;
    if (one-time initialization token for drop != -1) {
      swift_once(&one-time initialization token for drop, one-time initialization function for drop);
    }
    long long v68 = static ErrorString.drop;
    long long v67 = xmmword_3ABEC0;
    uint64_t v20 = StringProtocol.replacingOccurrences<A, B>(of:with:options:range:)(&v68, &v67, 1, 0, 0, 1, &type metadata for String, &type metadata for String, &type metadata for String, v7, v7, v7);
    uint64_t v22 = v21;
    swift_bridgeObjectRelease(v58);
    uint64_t v69 = v20;
    uint64_t v59 = v22;
    uint64_t v70 = v22;
    if (one-time initialization token for sequence != -1) {
      swift_once(&one-time initialization token for sequence, one-time initialization function for sequence);
    }
    long long v68 = static ErrorString.sequence;
    long long v67 = xmmword_3ABEE0;
    uint64_t v23 = StringProtocol.replacingOccurrences<A, B>(of:with:options:range:)(&v68, &v67, 1, 0, 0, 1, &type metadata for String, &type metadata for String, &type metadata for String, v7, v7, v7);
    uint64_t v25 = v24;
    swift_bridgeObjectRelease(v59);
    uint64_t v69 = v23;
    uint64_t v60 = v25;
    uint64_t v70 = v25;
    if (one-time initialization token for double != -1) {
      swift_once(&one-time initialization token for double, one-time initialization function for double);
    }
    long long v68 = static ErrorString.double;
    long long v67 = xmmword_3ABF00;
    uint64_t v26 = StringProtocol.replacingOccurrences<A, B>(of:with:options:range:)(&v68, &v67, 1, 0, 0, 1, &type metadata for String, &type metadata for String, &type metadata for String, v7, v7, v7);
    uint64_t v28 = v27;
    swift_bridgeObjectRelease(v60);
    uint64_t v69 = v26;
    uint64_t v61 = v28;
    uint64_t v70 = v28;
    if (one-time initialization token for integer != -1) {
      swift_once(&one-time initialization token for integer, one-time initialization function for integer);
    }
    long long v68 = static ErrorString.integer;
    long long v67 = xmmword_3ABF20;
    uint64_t v29 = StringProtocol.replacingOccurrences<A, B>(of:with:options:range:)(&v68, &v67, 1, 0, 0, 1, &type metadata for String, &type metadata for String, &type metadata for String, v7, v7, v7);
    uint64_t v31 = v30;
    swift_bridgeObjectRelease(v61);
    uint64_t v69 = v29;
    uint64_t v62 = v31;
    uint64_t v70 = v31;
    if (one-time initialization token for error != -1) {
      swift_once(&one-time initialization token for error, one-time initialization function for error);
    }
    long long v68 = static ErrorString.error;
    long long v67 = xmmword_3ABF40;
    uint64_t v32 = StringProtocol.replacingOccurrences<A, B>(of:with:options:range:)(&v68, &v67, 0, 0, 0, 1, &type metadata for String, &type metadata for String, &type metadata for String, v7, v7, v7);
    uint64_t v34 = v33;
    swift_bridgeObjectRelease(v62);
    uint64_t v69 = v32;
    uint64_t v63 = v34;
    uint64_t v70 = v34;
    if (one-time initialization token for archive != -1) {
      swift_once(&one-time initialization token for archive, one-time initialization function for archive);
    }
    long long v68 = static ErrorString.archive;
    long long v67 = xmmword_3ABF60;
    uint64_t v35 = StringProtocol.replacingOccurrences<A, B>(of:with:options:range:)(&v68, &v67, 0, 0, 0, 1, &type metadata for String, &type metadata for String, &type metadata for String, v7, v7, v7);
    uint64_t v37 = v36;
    swift_bridgeObjectRelease(v63);
    uint64_t v69 = v35;
    uint64_t v64 = v37;
    uint64_t v70 = v37;
    if (one-time initialization token for limit != -1) {
      swift_once(&one-time initialization token for limit, one-time initialization function for limit);
    }
    long long v68 = static ErrorString.limit;
    long long v67 = xmmword_3ABF80;
    uint64_t v38 = StringProtocol.replacingOccurrences<A, B>(of:with:options:range:)(&v68, &v67, 0, 0, 0, 1, &type metadata for String, &type metadata for String, &type metadata for String, v7, v7, v7);
    uint64_t v40 = v39;
    swift_bridgeObjectRelease(v64);
    uint64_t v69 = v38;
    uint64_t v65 = v40;
    uint64_t v70 = v40;
    if (one-time initialization token for supportedStackTypes != -1) {
      swift_once(&one-time initialization token for supportedStackTypes, one-time initialization function for supportedStackTypes);
    }
    long long v68 = static ErrorString.supportedStackTypes;
    long long v67 = xmmword_3ABFA0;
    uint64_t v41 = StringProtocol.replacingOccurrences<A, B>(of:with:options:range:)(&v68, &v67, 0, 0, 0, 1, &type metadata for String, &type metadata for String, &type metadata for String, v7, v7, v7);
    uint64_t v43 = v42;
    swift_bridgeObjectRelease(v65);
    uint64_t v69 = v41;
    uint64_t v70 = v43;
    if (one-time initialization token for sortTypes != -1) {
      swift_once(&one-time initialization token for sortTypes, one-time initialization function for sortTypes);
    }
    long long v68 = static ErrorString.sortTypes;
    long long v67 = xmmword_3ABFC0;
    uint64_t v44 = StringProtocol.replacingOccurrences<A, B>(of:with:options:range:)(&v68, &v67, 0, 0, 0, 1, &type metadata for String, &type metadata for String, &type metadata for String, v7, v7, v7);
    uint64_t v66 = v45;
    swift_bridgeObjectRelease(v43);
    type metadata accessor for OS_os_log();
    uint64_t v46 = (void *)static OS_os_log.default.getter(0);
    unsigned __int8 v53 = static os_log_type_t.error.getter(0, &v67);
    uint64_t v47 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<CVarArg>);
    uint64_t v48 = (void *)swift_allocObject(v47, 72, 7);
    v48[2] = 1;
    v48[3] = 2;
    v48[7] = &type metadata for String;
    v48[8] = lazy protocol witness table accessor for type String and conformance String();
    v48[4] = v44;
    v48[5] = v66;
    swift_bridgeObjectRetain(v66);
    os_log(_:dso:log:type:_:)("%@ \n", 4, 2, &dword_0, v46, v53, v48);

    swift_bridgeObjectRelease(v48);
    uint64_t v49 = lazy protocol witness table accessor for type MLCreateError and conformance MLCreateError();
    swift_allocError(&type metadata for MLCreateError, v49, 0, 0);
    *(void *)uint64_t v50 = v44;
    *(void *)(v50 + 8) = v66;
    *(_OWORD *)(v50 + 16) = 0;
    *(_OWORD *)(v50 + 32) = 0;
    *(unsigned char *)(v50 + 48) = 0;
    swift_willThrow();
    tc_v1_release(v52);
  }
  return __stack_chk_guard;
}

unint64_t one-time initialization function for table()
{
  *(void *)&static ErrorString.table = 0x656D61724653;
  *((void *)&static ErrorString.table + 1) = 0xE600000000000000;
  *(void *)&xmmword_3ABE40 = 0x6C62615461746144;
  unint64_t result = 0xE900000000000065;
  *((void *)&xmmword_3ABE40 + 1) = 0xE900000000000065;
  return result;
}

unint64_t one-time initialization function for column()
{
  *(void *)&static ErrorString.column = 0x796172724153;
  *((void *)&static ErrorString.column + 1) = 0xE600000000000000;
  *(void *)&xmmword_3ABE60 = 0x756C6F4361746144;
  unint64_t result = 0xEA00000000006E6DLL;
  *((void *)&xmmword_3ABE60 + 1) = 0xEA00000000006E6DLL;
  return result;
}

unint64_t one-time initialization function for tableMap()
{
  *(void *)&static ErrorString.tableMap = 0x6D617266735F6374;
  *((void *)&static ErrorString.tableMap + 1) = 0xEF796C7070615F65;
  *(void *)&xmmword_3ABE80 = 7364973;
  unint64_t result = 0xE300000000000000;
  *((void *)&xmmword_3ABE80 + 1) = 0xE300000000000000;
  return result;
}

unint64_t one-time initialization function for columnMap()
{
  *(void *)&static ErrorString.columnMap = 0x61727261735F6374;
  *((void *)&static ErrorString.columnMap + 1) = 0xEF796C7070615F79;
  *(void *)&xmmword_3ABEA0 = 7364973;
  unint64_t result = 0xE300000000000000;
  *((void *)&xmmword_3ABEA0 + 1) = 0xE300000000000000;
  return result;
}

unint64_t one-time initialization function for drop()
{
  *(void *)&static ErrorString.drop = 0x616E706F7264;
  *((void *)&static ErrorString.drop + 1) = 0xE600000000000000;
  *(void *)&xmmword_3ABEC0 = 0x7373694D706F7264;
  unint64_t result = 0xEB00000000676E69;
  *((void *)&xmmword_3ABEC0 + 1) = 0xEB00000000676E69;
  return result;
}

unint64_t one-time initialization function for sequence()
{
  *(void *)&static ErrorString.sequence = 1953720684;
  *((void *)&static ErrorString.sequence + 1) = 0xE400000000000000;
  strcpy((char *)&xmmword_3ABEE0, "SequenceType");
  unint64_t result = 0xEC00000065707954;
  BYTE13(xmmword_3ABEE0) = 0;
  HIWORD(xmmword_3ABEE0) = -5120;
  return result;
}

unint64_t one-time initialization function for double()
{
  *(void *)&static ErrorString.double = 0x74616F6C66;
  *((void *)&static ErrorString.double + 1) = 0xE500000000000000;
  *(void *)&xmmword_3ABF00 = 0x656C62756F44;
  unint64_t result = 0xE600000000000000;
  *((void *)&xmmword_3ABF00 + 1) = 0xE600000000000000;
  return result;
}

unint64_t one-time initialization function for integer()
{
  *(void *)&static ErrorString.integer = 0x656765746E692061;
  *((void *)&static ErrorString.integer + 1) = 0xE900000000000072;
  *(void *)&xmmword_3ABF20 = 0x746E49206E61;
  unint64_t result = 0xE600000000000000;
  *((void *)&xmmword_3ABF20 + 1) = 0xE600000000000000;
  return result;
}

unint64_t one-time initialization function for error()
{
  *(void *)&static ErrorString.error = 0x203A726F727245;
  *((void *)&static ErrorString.error + 1) = 0xE700000000000000;
  *(void *)&xmmword_3ABF40 = 0;
  unint64_t result = 0xE000000000000000;
  *((void *)&xmmword_3ABF40 + 1) = 0xE000000000000000;
  return result;
}

char *one-time initialization function for archive()
{
  strcpy((char *)&static ErrorString.archive, "a Turi archive");
  HIBYTE(static ErrorString.archive) = -18;
  *(void *)&xmmword_3ABF60 = 0xD000000000000023;
  unint64_t result = "Subset and Column Types" + 0x8000000000000000;
  *((void *)&xmmword_3ABF60 + 1) = "Subset and Column Types" + 0x8000000000000000;
  return result;
}

char *one-time initialization function for limit()
{
  *(void *)&static ErrorString.limit = 0xD000000000000016;
  *((void *)&static ErrorString.limit + 1) = "Type/array type." + 0x8000000000000000;
  *(void *)&xmmword_3ABF80 = 0xD000000000000017;
  unint64_t result = "limit and column_types" + 0x8000000000000000;
  *((void *)&xmmword_3ABF80 + 1) = "limit and column_types" + 0x8000000000000000;
  return result;
}

unint64_t one-time initialization function for supportedStackTypes()
{
  *(void *)&static ErrorString.supportedStackTypes = 0xD000000000000020;
  *((void *)&static ErrorString.supportedStackTypes + 1) = "s of type Int, Double or String" + 0x8000000000000000;
  strcpy((char *)&xmmword_3ABFA0, "type Sequence.");
  unint64_t result = 0xEE002E65636E6575;
  HIBYTE(xmmword_3ABFA0) = -18;
  return result;
}

char *one-time initialization function for sortTypes()
{
  *(void *)&static ErrorString.sortTypes = 0xD000000000000034;
  *((void *)&static ErrorString.sortTypes + 1) = "hm." + 0x8000000000000000;
  *(void *)&xmmword_3ABFC0 = 0xD00000000000001FLL;
  unint64_t result = "ing', and 'datetime'" + 0x8000000000000000;
  *((void *)&xmmword_3ABFC0 + 1) = "ing', and 'datetime'" + 0x8000000000000000;
  return result;
}

uint64_t *assignWithCopy for FeatureVectorizer(uint64_t *a1, uint64_t *a2)
{
  return assignWithCopy for Metadata(a1, a2);
}

uint64_t *assignWithTake for FeatureVectorizer(uint64_t *a1, uint64_t *a2)
{
  return assignWithTake for Metadata(a1, a2);
}

uint64_t getEnumTagSinglePayload for FeatureVectorizer(uint64_t a1, int a2)
{
  return getEnumTagSinglePayload for Metadata(a1, a2);
}

void storeEnumTagSinglePayload for FeatureVectorizer(uint64_t a1, int a2, int a3)
{
}

uint64_t type metadata accessor for FeatureVectorizer(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for FeatureVectorizer);
}

uint64_t type metadata accessor for FeatureVectorizer.Transformer(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for FeatureVectorizer.Transformer);
}

uint64_t closure #1 in FeatureVectorizer.fitted(to:)(void *a1, uint64_t a2, void *a3)
{
  uint64_t v13 = a3;
  uint64_t v14 = v3;
  int64_t v5 = *(void *)(*(void *)(type metadata accessor for AnyColumn(0) - 8) + 64);
  uint64_t v6 = alloca(v5);
  uint64_t v7 = alloca(v5);
  DataFrame.subscript.getter(*a1, a1[1]);
  uint64_t result = ColumnDescriptor.init(_:)((uint64_t)&v13);
  if (v4)
  {
    uint64_t result = (uint64_t)v13;
    *uint64_t v13 = v4;
  }
  else
  {
    uint64_t v12 = v14;
    *uint64_t v14 = result;
    v12[1] = v9;
    v12[2] = v10;
    *((unsigned char *)v12 + 24) = v11;
  }
  return result;
}

char FeatureVectorizer.Transformer.CodingKeys.init(stringValue:)(uint64_t a1, char *a2)
{
  if (a1 == 0xD000000000000011)
  {
    uint64_t v3 = "nary representation" + 0x8000000000000000;
    if (a2 == "nary representation" + 0x8000000000000000) {
      goto LABEL_5;
    }
  }
  if (_stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000011, "nary representation" + 0x8000000000000000, a1, a2, 0))
  {
    uint64_t v3 = a2;
LABEL_5:
    swift_bridgeObjectRelease(v3);
    return 0;
  }
  if (a1 == 0xD000000000000016 && a2 == "columnDescriptors" + 0x8000000000000000)
  {
    swift_bridgeObjectRelease("columnDescriptors" + 0x8000000000000000);
    return 1;
  }
  else
  {
    char v5 = _stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000016, "columnDescriptors" + 0x8000000000000000, a1, a2, 0);
    swift_bridgeObjectRelease(a2);
    return 2 - (v5 & 1);
  }
}

unint64_t FeatureVectorizer.Transformer.CodingKeys.stringValue.getter(char a1)
{
  unint64_t result = 0xD000000000000016;
  if ((a1 & 1) == 0) {
    return 0xD000000000000011;
  }
  return result;
}

uint64_t FeatureVectorizer.Transformer.encode(to:)(void *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v19 = v6;
  uint64_t v23 = a4;
  uint64_t v24 = a3;
  uint64_t v26 = a2;
  uint64_t v7 = type metadata accessor for FeatureVectorizer.Transformer.CodingKeys(255, a5, a6, a4);
  uint64_t WitnessTable = swift_getWitnessTable(&protocol conformance descriptor for FeatureVectorizer<A>.Transformer.CodingKeys, v7);
  uint64_t v20 = type metadata accessor for KeyedEncodingContainer(0, v7, WitnessTable);
  uint64_t v25 = *(void *)(v20 - 8);
  int64_t v8 = *(void *)(v25 + 64);
  uint64_t v9 = alloca(v8);
  uint64_t v10 = alloca(v8);
  uint64_t v11 = a1[3];
  uint64_t v22 = a1[4];
  __swift_project_boxed_opaque_existential_0Tm(a1, v11);
  dispatch thunk of Encoder.container<A>(keyedBy:)(v7, v7, WitnessTable, v11, v22);
  uint64_t v18 = v26;
  char v27 = 0;
  uint64_t v12 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [ColumnDescriptor]);
  uint64_t v13 = lazy protocol witness table accessor for type [ColumnDescriptor] and conformance <A> [A](&lazy protocol witness table cache variable for type [ColumnDescriptor] and conformance <A> [A], (void (*)(void))lazy protocol witness table accessor for type ColumnDescriptor and conformance ColumnDescriptor, (uint64_t)&protocol conformance descriptor for <A> [A]);
  uint64_t v14 = v20;
  uint64_t v26 = &v18;
  uint64_t v15 = v19;
  KeyedEncodingContainer.encode<A>(_:forKey:)(&v18, &v27, v20, v12, v13);
  if (v15) {
    return (*(uint64_t (**)(void *, uint64_t))(v25 + 8))(v26, v14);
  }
  uint64_t v17 = v25;
  v28[0] = 1;
  KeyedEncodingContainer.encode(_:forKey:)(v24, v23, v28, v14);
  return (*(uint64_t (**)(void *, uint64_t))(v17 + 8))(v26, v14);
}

void *FeatureVectorizer.Transformer.init(from:)(void *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v22 = v4;
  char v5 = a1;
  uint64_t v6 = type metadata accessor for FeatureVectorizer.Transformer.CodingKeys(255, a2, a3, a4);
  uint64_t WitnessTable = swift_getWitnessTable(&protocol conformance descriptor for FeatureVectorizer<A>.Transformer.CodingKeys, v6);
  uint64_t v19 = type metadata accessor for KeyedDecodingContainer(0, v6, WitnessTable);
  uint64_t v20 = *(void *)(v19 - 8);
  int64_t v7 = *(void *)(v20 + 64);
  int64_t v8 = alloca(v7);
  uint64_t v9 = alloca(v7);
  uint64_t v10 = a1[3];
  uint64_t v18 = a1[4];
  __swift_project_boxed_opaque_existential_0Tm(a1, v10);
  uint64_t v23 = &v17;
  dispatch thunk of Decoder.container<A>(keyedBy:)(v6, v6, WitnessTable, v10, v18);
  if (v4)
  {
    __swift_destroy_boxed_opaque_existential_1Tm(a1);
  }
  else
  {
    uint64_t v22 = a1;
    uint64_t v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [ColumnDescriptor]);
    char v24 = 0;
    uint64_t v12 = lazy protocol witness table accessor for type [ColumnDescriptor] and conformance <A> [A](&lazy protocol witness table cache variable for type [ColumnDescriptor] and conformance <A> [A], (void (*)(void))lazy protocol witness table accessor for type ColumnDescriptor and conformance ColumnDescriptor, (uint64_t)&protocol conformance descriptor for <A> [A]);
    uint64_t v13 = v19;
    KeyedDecodingContainer.decode<A>(_:forKey:)(v11, &v24, v19, v11, v12);
    v25[0] = 1;
    uint64_t WitnessTable = v17;
    swift_bridgeObjectRetain(v17);
    KeyedDecodingContainer.decode(_:forKey:)(v25, v13);
    char v16 = v15;
    (*(void (**)(uint64_t *, uint64_t))(v20 + 8))(v23, v13);
    swift_bridgeObjectRetain(v16);
    __swift_destroy_boxed_opaque_existential_1Tm(v22);
    swift_bridgeObjectRelease(v16);
    char v5 = (void *)WitnessTable;
    swift_bridgeObjectRelease(WitnessTable);
  }
  return v5;
}

BOOL protocol witness for static Equatable.== infix(_:_:) in conformance FeatureVectorizer<A>.Transformer.CodingKeys(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return static Rectangle.CodingKeys.== infix(_:_:)(*a1, *a2);
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance FeatureVectorizer<A>.Transformer.CodingKeys()
{
  return Rectangle.CodingKeys.hashValue.getter(*v0);
}

void protocol witness for Hashable.hash(into:) in conformance FeatureVectorizer<A>.Transformer.CodingKeys(uint64_t a1)
{
  Rectangle.CodingKeys.hash(into:)(a1, *v1);
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance FeatureVectorizer<A>.Transformer.CodingKeys(uint64_t a1)
{
  Hasher.init(_seed:)(a1);
  Rectangle.CodingKeys.hash(into:)((uint64_t)v3, *v1);
  return Hasher._finalize()();
}

unint64_t protocol witness for CodingKey.stringValue.getter in conformance FeatureVectorizer<A>.Transformer.CodingKeys()
{
  return FeatureVectorizer.Transformer.CodingKeys.stringValue.getter(*v0);
}

char protocol witness for CodingKey.init(stringValue:) in conformance FeatureVectorizer<A>.Transformer.CodingKeys(uint64_t a1, char *a2)
{
  uint64_t v3 = v2;
  char result = FeatureVectorizer.Transformer.CodingKeys.init(stringValue:)(a1, a2);
  *uint64_t v3 = result;
  return result;
}

uint64_t protocol witness for CodingKey.intValue.getter in conformance FeatureVectorizer<A>.Transformer.CodingKeys()
{
  return Rectangle.CodingKeys.intValue.getter();
}

char protocol witness for CodingKey.init(intValue:) in conformance FeatureVectorizer<A>.Transformer.CodingKeys()
{
  uint64_t v1 = v0;
  char result = Rectangle.CodingKeys.init(intValue:)();
  char *v1 = result;
  return result;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance FeatureVectorizer<A>.Transformer.CodingKeys(uint64_t a1)
{
  uint64_t WitnessTable = swift_getWitnessTable(&protocol conformance descriptor for FeatureVectorizer<A>.Transformer.CodingKeys, a1);
  return CodingKey.description.getter(a1, WitnessTable);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance FeatureVectorizer<A>.Transformer.CodingKeys(uint64_t a1)
{
  uint64_t WitnessTable = swift_getWitnessTable(&protocol conformance descriptor for FeatureVectorizer<A>.Transformer.CodingKeys, a1);
  return CodingKey.debugDescription.getter(a1, WitnessTable);
}

void *protocol witness for Decodable.init(from:) in conformance FeatureVectorizer<A>.Transformer(void *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6 = v4;
  char result = FeatureVectorizer.Transformer.init(from:)(a1, *(void *)(a2 + 16), *(void *)(a2 + 24), a4);
  if (!v5)
  {
    *uint64_t v6 = result;
    v6[1] = v8;
    _OWORD v6[2] = v9;
  }
  return result;
}

uint64_t protocol witness for Encodable.encode(to:) in conformance FeatureVectorizer<A>.Transformer(void *a1, uint64_t a2)
{
  return FeatureVectorizer.Transformer.encode(to:)(a1, *(void **)v2, *(void *)(v2 + 8), *(void *)(v2 + 16), *(void *)(a2 + 16), *(void *)(a2 + 24));
}

uint64_t type metadata accessor for FeatureVectorizer.Transformer.CodingKeys(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for FeatureVectorizer.Transformer.CodingKeys);
}

uint64_t lazy protocol witness table accessor for type ColumnDescriptor and conformance ColumnDescriptor()
{
  uint64_t result = lazy protocol witness table cache variable for type ColumnDescriptor and conformance ColumnDescriptor;
  if (!lazy protocol witness table cache variable for type ColumnDescriptor and conformance ColumnDescriptor)
  {
    uint64_t result = swift_getWitnessTable(&protocol conformance descriptor for ColumnDescriptor, &type metadata for ColumnDescriptor);
    lazy protocol witness table cache variable for type ColumnDescriptor and conformance ColumnDescriptor = result;
  }
  return result;
}

{
  uint64_t result;

  uint64_t result = lazy protocol witness table cache variable for type ColumnDescriptor and conformance ColumnDescriptor;
  if (!lazy protocol witness table cache variable for type ColumnDescriptor and conformance ColumnDescriptor)
  {
    uint64_t result = swift_getWitnessTable(&protocol conformance descriptor for ColumnDescriptor, &type metadata for ColumnDescriptor);
    lazy protocol witness table cache variable for type ColumnDescriptor and conformance ColumnDescriptor = result;
  }
  return result;
}

uint64_t lazy protocol witness table accessor for type [ColumnDescriptor] and conformance <A> [A](uint64_t *a1, void (*a2)(void), uint64_t a3)
{
  uint64_t result = *a1;
  if (!*a1)
  {
    uint64_t v5 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for [ColumnDescriptor]);
    a2();
    uint64_t result = swift_getWitnessTable(a3, v5);
    *a1 = result;
  }
  return result;
}

uint64_t base witness table accessor for Equatable in FeatureVectorizer<A>.Transformer.CodingKeys(uint64_t a1)
{
  return swift_getWitnessTable(&protocol conformance descriptor for FeatureVectorizer<A>.Transformer.CodingKeys, a1);
}

uint64_t base witness table accessor for CustomDebugStringConvertible in FeatureVectorizer<A>.Transformer.CodingKeys(uint64_t a1)
{
  return swift_getWitnessTable(&protocol conformance descriptor for FeatureVectorizer<A>.Transformer.CodingKeys, a1);
}

uint64_t base witness table accessor for CustomStringConvertible in FeatureVectorizer<A>.Transformer.CodingKeys(uint64_t a1)
{
  return swift_getWitnessTable(&protocol conformance descriptor for FeatureVectorizer<A>.Transformer.CodingKeys, a1);
}

uint64_t destroy for FeatureVectorizer(void *a1)
{
  return destroy for Metadata(a1);
}

void CMLDictionary.add(_:)(uint64_t a1)
{
  uint64_t v145 = v1;
  uint64_t v139 = type metadata accessor for URL(0);
  uint64_t v2 = *(void *)(v139 - 8);
  int64_t v3 = *(void *)(v2 + 64);
  uint64_t v4 = alloca(v3);
  uint64_t v5 = alloca(v3);
  char v143 = (uint64_t *)&v119;
  int64_t v6 = *(void *)(*(void *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for URL?)
                             - 8)
                 + 64);
  int64_t v7 = alloca(v6);
  uint64_t v8 = alloca(v6);
  uint64_t v140 = (uint64_t *)&v119;
  uint64_t v9 = alloca(v6);
  uint64_t v10 = alloca(v6);
  uint64_t v144 = (uint64_t *)&v119;
  uint64_t v11 = type metadata accessor for _Model.Parameters(0);
  int64_t v12 = *(void *)(*(void *)(v11 - 8) + 64);
  uint64_t v13 = alloca(v12);
  uint64_t v14 = alloca(v12);
  outlined init with copy of _Model.Parameters(a1, (uint64_t)&v119);
  switch(swift_getEnumCaseMultiPayload(&v119, v11))
  {
    case 0u:
      uint64_t v15 = specialized handling<A, B>(_:_:)((uint64_t)v119);
      if (!v15) {
        BUG();
      }
      uint64_t v16 = type metadata accessor for CMLFeatureValue();
      swift_initStackObject(v16, v137);
      uint64_t v17 = CMLFeatureValue.init(rawValue:ownsValue:)(v15, 1);
      CMLDictionary.add(key:value:)(0x726574695F78616DLL, 0xEE00736E6F697461, v17);
      goto LABEL_50;
    case 1u:
      uint64_t v66 = specialized handling<A, B>(_:_:)((uint64_t)v119);
      if (!v66) {
        BUG();
      }
      uint64_t v67 = type metadata accessor for CMLFeatureValue();
      swift_initStackObject(v67, v136);
      uint64_t v68 = CMLFeatureValue.init(rawValue:ownsValue:)(v66, 1);
      CMLDictionary.add(key:value:)(0x69735F6863746162, 0xEA0000000000657ALL, v68);
      goto LABEL_50;
    case 2u:
      uint64_t v48 = (uint64_t)v119;
      uint64_t v49 = v120[0];
      type metadata accessor for CMLFeatureValue();
      swift_bridgeObjectRetain(v49);
      uint64_t v50 = CMLFeatureValue.__allocating_init(_:)(v48, v49);
      swift_bridgeObjectRelease(v49);
      CMLDictionary.add(key:value:)(0x6972616C696D6973, 0xEF657079745F7974, v50);
      goto LABEL_50;
    case 3u:
      uint64_t v54 = v120[0];
      uint64_t v55 = v120[1];
      uint64_t v56 = specialized handling<A, B>(_:_:)();
      uint64_t v144 = (uint64_t *)v55;
      if (!v56) {
        BUG();
      }
      uint64_t v57 = type metadata accessor for CMLFeatureValue();
      swift_initStackObject(v57, v133);
      uint64_t v58 = CMLFeatureValue.init(rawValue:ownsValue:)(v56, 1);
      CMLDictionary.add(key:value:)(0x6C6F687365726874, 0xE900000000000064, v58);
      swift_release();
      uint64_t v59 = specialized handling<A, B>(_:_:)(v54);
      if (!v59) {
        BUG();
      }
      swift_initStackObject(v57, v134);
      uint64_t v60 = CMLFeatureValue.init(rawValue:ownsValue:)(v59, 1);
      CMLDictionary.add(key:value:)(0xD00000000000001ALL, (uint64_t)("customEmbeddingURL" + 0x8000000000000000), v60);
      swift_release();
      uint64_t v61 = specialized handling<A, B>(_:_:)((uint64_t)v144);
      if (!v61) {
        BUG();
      }
      swift_initStackObject(v57, v135);
      uint64_t v62 = CMLFeatureValue.init(rawValue:ownsValue:)(v61, 1);
      CMLDictionary.add(key:value:)(0x617461645F78616DLL, 0xEF7365737361705FLL, v62);
      goto LABEL_50;
    case 4u:
      uint64_t v37 = v119;
      if (v119)
      {
        uint64_t v38 = static String._unconditionallyBridgeFromObjectiveC(_:)(v119);
        uint64_t v40 = v39;
        type metadata accessor for CMLFeatureValue();
        swift_bridgeObjectRetain(v40);
        uint64_t v41 = CMLFeatureValue.__allocating_init(_:)(v38, v40);
        swift_bridgeObjectRelease(v40);
        CMLDictionary.add(key:value:)(0x65676175676E616CLL, 0xE800000000000000, v41);
        swift_release();
      }
      return;
    case 5u:
      uint64_t v72 = (uint64_t)v119;
      uint64_t v73 = v120[0];
      type metadata accessor for CMLFeatureValue();
      swift_bridgeObjectRetain(v73);
      uint64_t v74 = CMLFeatureValue.__allocating_init(_:)(v72, v73);
      swift_bridgeObjectRelease(v73);
      CMLDictionary.add(key:value:)(0x687469726F676C61, 0xE90000000000006DLL, v74);
      goto LABEL_50;
    case 6u:
      uint64_t v142 = v2;
      uint64_t v87 = (uint64_t)v119;
      uint64_t v88 = v120[0];
      uint64_t v89 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (String, custom: URL?));
      outlined init with take of URL?((uint64_t)&v120[-1] + *(int *)(v89 + 48), (uint64_t)v144);
      uint64_t v90 = type metadata accessor for CMLFeatureValue();
      swift_bridgeObjectRetain(v88);
      uint64_t v141 = v90;
      uint64_t v91 = CMLFeatureValue.__allocating_init(_:)(v87, v88);
      swift_bridgeObjectRelease(v88);
      CMLDictionary.add(key:value:)(0x6E69646465626D65, 0xE900000000000067, v91);
      uint64_t v92 = v139;
      swift_release();
      uint64_t v93 = (uint64_t)v144;
      uint64_t v94 = (uint64_t)v140;
      outlined init with copy of URL?((uint64_t)v144, (uint64_t)v140);
      if (__swift_getEnumTagSinglePayload(v94, 1, v92) == 1)
      {
        outlined destroy of URL?(v93);
        uint64_t v95 = v94;
      }
      else
      {
        unint64_t v114 = v143;
        (*(void (**)(uint64_t *, uint64_t, uint64_t))(v142 + 32))(v143, v94, v92);
        uint64_t v115 = URL.path.getter(v114);
        uint64_t v117 = v116;
        swift_bridgeObjectRetain(v116);
        uint64_t v118 = CMLFeatureValue.__allocating_init(_:)(v115, v117);
        swift_bridgeObjectRelease(v117);
        CMLDictionary.add(key:value:)(0xD000000000000012, (uint64_t)("algorithm_revision" + 0x8000000000000000), v118);
        swift_release();
        (*(void (**)(uint64_t *, uint64_t))(v142 + 8))(v143, v92);
        uint64_t v95 = (uint64_t)v144;
      }
      outlined destroy of URL?(v95);
      return;
    case 7u:
      uint64_t v63 = specialized handling<A, B>(_:_:)((uint64_t)v119);
      if (!v63) {
        BUG();
      }
      uint64_t v64 = type metadata accessor for CMLFeatureValue();
      swift_initStackObject(v64, v132);
      uint64_t v65 = CMLFeatureValue.init(rawValue:ownsValue:)(v63, 1);
      CMLDictionary.add(key:value:)(0xD000000000000012, (uint64_t)("prediction_window" + 0x8000000000000000), v65);
      goto LABEL_50;
    case 8u:
      uint64_t v102 = specialized handling<A, B>(_:_:)((uint64_t)v119);
      if (!v102) {
        BUG();
      }
      uint64_t v103 = type metadata accessor for CMLFeatureValue();
      swift_initStackObject(v103, v131);
      uint64_t v104 = CMLFeatureValue.init(rawValue:ownsValue:)(v102, 1);
      CMLDictionary.add(key:value:)(0xD000000000000011, (uint64_t)("annotation_scale" + 0x8000000000000000), v104);
      goto LABEL_50;
    case 9u:
      uint64_t v45 = (uint64_t)v119;
      uint64_t v46 = v120[0];
      type metadata accessor for CMLFeatureValue();
      swift_bridgeObjectRetain(v46);
      uint64_t v47 = CMLFeatureValue.__allocating_init(_:)(v45, v46);
      swift_bridgeObjectRelease(v46);
      CMLDictionary.add(key:value:)(0x705F656369766564, 0xED00007963696C6FLL, v47);
      goto LABEL_50;
    case 0xAu:
      uint64_t v99 = (uint64_t)v119;
      uint64_t v100 = v120[0];
      type metadata accessor for CMLFeatureValue();
      swift_bridgeObjectRetain(v100);
      uint64_t v101 = CMLFeatureValue.__allocating_init(_:)(v99, v100);
      swift_bridgeObjectRelease(v100);
      CMLDictionary.add(key:value:)(0xD000000000000010, (uint64_t)("annotation_origin" + 0x8000000000000000), v101);
      goto LABEL_50;
    case 0xBu:
      uint64_t v34 = (uint64_t)v119;
      uint64_t v35 = v120[0];
      type metadata accessor for CMLFeatureValue();
      swift_bridgeObjectRetain(v35);
      uint64_t v36 = CMLFeatureValue.__allocating_init(_:)(v34, v35);
      swift_bridgeObjectRelease(v35);
      CMLDictionary.add(key:value:)(0xD000000000000011, (uint64_t)("annotation_position" + 0x8000000000000000), v36);
      goto LABEL_50;
    case 0xCu:
      uint64_t v42 = (uint64_t)v119;
      uint64_t v43 = v120[0];
      type metadata accessor for CMLFeatureValue();
      swift_bridgeObjectRetain(v43);
      uint64_t v44 = CMLFeatureValue.__allocating_init(_:)(v42, v43);
      swift_bridgeObjectRelease(v43);
      CMLDictionary.add(key:value:)(0xD000000000000013, (uint64_t)("default_model_input_size" + 0x8000000000000000), v44);
      goto LABEL_50;
    case 0xDu:
      uint64_t v81 = v120[0];
      uint64_t v82 = specialized handling<A, B>(_:_:)((uint64_t)v119);
      if (!v82) {
        BUG();
      }
      uint64_t v83 = type metadata accessor for CMLFeatureValue();
      swift_initStackObject(v83, v129);
      uint64_t v84 = CMLFeatureValue.init(rawValue:ownsValue:)(v82, 1);
      CMLDictionary.add(key:value:)(0x6469775F64697267, 0xEA00000000006874, v84);
      swift_release();
      uint64_t v85 = specialized handling<A, B>(_:_:)(v81);
      if (!v85) {
        BUG();
      }
      swift_initStackObject(v83, v130);
      uint64_t v86 = CMLFeatureValue.init(rawValue:ownsValue:)(v85, 1);
      CMLDictionary.add(key:value:)(0x6965685F64697267, 0xEB00000000746867, v86);
      goto LABEL_50;
    case 0xEu:
      uint64_t v31 = (uint64_t)v119;
      uint64_t v32 = v120[0];
      type metadata accessor for CMLFeatureValue();
      swift_bridgeObjectRetain(v32);
      uint64_t v33 = CMLFeatureValue.__allocating_init(_:)(v31, v32);
      swift_bridgeObjectRelease(v32);
      CMLDictionary.add(key:value:)(0x6C65646F6DLL, 0xE500000000000000, v33);
      goto LABEL_50;
    case 0xFu:
      uint64_t v51 = (uint64_t)v119;
      uint64_t v52 = v120[0];
      type metadata accessor for CMLFeatureValue();
      swift_bridgeObjectRetain(v52);
      uint64_t v53 = CMLFeatureValue.__allocating_init(_:)(v51, v52);
      swift_bridgeObjectRelease(v52);
      CMLDictionary.add(key:value:)(0x6966697373616C63, 0xEA00000000007265, v53);
      goto LABEL_50;
    case 0x10u:
      uint64_t v18 = (uint64_t)v119;
      uint64_t v19 = tc_v1_flex_list_create(0);
      if (!v19) {
        BUG();
      }
      uint64_t v20 = v19;
      uint64_t v21 = type metadata accessor for CMLSequence();
      uint64_t inited = swift_initStackObject(v21, v127);
      *(void *)(inited + 16) = v20;
      uint64_t v144 = (uint64_t *)inited;
      *(unsigned char *)(inited + 24) = 1;
      char v143 = *(uint64_t **)(v18 + 16);
      if (v143)
      {
        swift_bridgeObjectRetain(v18);
        uint64_t v23 = 0;
        do
        {
          uint64_t v24 = *(void *)(v18 + 8 * (void)v23 + 32);
          v138[3] = &type metadata for Int;
          v138[4] = &protocol witness table for Int;
          v138[0] = v24;
          uint64_t v25 = __swift_project_boxed_opaque_existential_0Tm(v138, (uint64_t)&type metadata for Int);
          uint64_t v26 = specialized handling<A, B>(_:_:)(*v25);
          if (!v26) {
            BUG();
          }
          uint64_t v27 = v18;
          uint64_t v28 = type metadata accessor for CMLFeatureValue();
          swift_initStackObject(v28, v128);
          uint64_t v29 = CMLFeatureValue.init(rawValue:ownsValue:)(v26, 1);
          __swift_destroy_boxed_opaque_existential_1Tm(v138);
          CMLSequence.append(_:)(v29);
          uint64_t v23 = (uint64_t *)((char *)v23 + 1);
          swift_release();
          uint64_t v18 = v27;
        }
        while (v143 != v23);
        swift_bridgeObjectRelease(v27);
      }
      type metadata accessor for CMLFeatureValue();
      uint64_t v30 = CMLFeatureValue.__allocating_init(_:)((uint64_t)v144);
      swift_bridgeObjectRelease(v18);
      CMLDictionary.add(key:value:)(0x69735F726579616CLL, 0xEB0000000073657ALL, v30);
      goto LABEL_50;
    case 0x11u:
      uint64_t v69 = specialized handling<A, B>(_:_:)((uint64_t)v119);
      if (!v69) {
        BUG();
      }
      uint64_t v70 = type metadata accessor for CMLFeatureValue();
      swift_initStackObject(v70, v126);
      uint64_t v71 = CMLFeatureValue.init(rawValue:ownsValue:)(v69, 1);
      CMLDictionary.add(key:value:)(0xD000000000000018, (uint64_t)("min_model_input_size" + 0x8000000000000000), v71);
      goto LABEL_50;
    case 0x12u:
      uint64_t v96 = specialized handling<A, B>(_:_:)((uint64_t)v119);
      if (!v96) {
        BUG();
      }
      uint64_t v97 = type metadata accessor for CMLFeatureValue();
      swift_initStackObject(v97, v125);
      uint64_t v98 = CMLFeatureValue.init(rawValue:ownsValue:)(v96, 1);
      CMLDictionary.add(key:value:)(0xD000000000000014, (uint64_t)("max_model_input_size" + 0x8000000000000000), v98);
      goto LABEL_50;
    case 0x13u:
      uint64_t v108 = specialized handling<A, B>(_:_:)((uint64_t)v119);
      if (!v108) {
        BUG();
      }
      uint64_t v109 = type metadata accessor for CMLFeatureValue();
      swift_initStackObject(v109, v124);
      uint64_t v110 = CMLFeatureValue.init(rawValue:ownsValue:)(v108, 1);
      CMLDictionary.add(key:value:)(0xD000000000000014, (uint64_t)("reporting_interval" + 0x8000000000000000), v110);
      goto LABEL_50;
    case 0x14u:
      uint64_t v75 = specialized handling<A, B>(_:_:)((uint64_t)v119);
      if (!v75) {
        BUG();
      }
      uint64_t v76 = type metadata accessor for CMLFeatureValue();
      swift_initStackObject(v76, v123);
      uint64_t v77 = CMLFeatureValue.init(rawValue:ownsValue:)(v75, 1);
      CMLDictionary.add(key:value:)(0xD000000000000012, (uint64_t)("CreateML/_Parameters.swift" + 0x8000000000000000), v77);
      goto LABEL_50;
    case 0x15u:
      uint64_t v78 = specialized handling<A, B>(_:_:)((uint64_t)v119);
      if (!v78) {
        BUG();
      }
      uint64_t v79 = type metadata accessor for CMLFeatureValue();
      swift_initStackObject(v79, v122);
      uint64_t v80 = CMLFeatureValue.init(rawValue:ownsValue:)(v78, 1);
      CMLDictionary.add(key:value:)(0x645F6C6574786574, 0xEE00797469736E65, v80);
      goto LABEL_50;
    case 0x16u:
      uint64_t v105 = specialized handling<A, B>(_:_:)((uint64_t)v119);
      if (!v105) {
        BUG();
      }
      uint64_t v106 = type metadata accessor for CMLFeatureValue();
      swift_initStackObject(v106, v121);
      uint64_t v107 = CMLFeatureValue.init(rawValue:ownsValue:)(v105, 1);
      CMLDictionary.add(key:value:)(0x74735F656C797473, 0xEE006874676E6572, v107);
      goto LABEL_50;
    case 0x17u:
      uint64_t v111 = specialized handling<A, B>(_:_:)((uint64_t)v119);
      if (!v111) {
        BUG();
      }
      uint64_t v112 = type metadata accessor for CMLFeatureValue();
      swift_initStackObject(v112, v120);
      uint64_t v113 = CMLFeatureValue.init(rawValue:ownsValue:)(v111, 1);
      CMLDictionary.add(key:value:)(0x6D6172665F6D756ELL, 0xEA00000000007365, v113);
LABEL_50:
      swift_release();
      return;
    case 0x18u:
      JUMPOUT(0x20D834);
  }
}

uint64_t type metadata accessor for _Model.Parameters(uint64_t a1)
{
  uint64_t result = type metadata singleton initialization cache for _Model.Parameters;
  if (!type metadata singleton initialization cache for _Model.Parameters) {
    return swift_getSingletonMetadata(a1, &nominal type descriptor for _Model.Parameters);
  }
  return result;
}

uint64_t outlined init with copy of _Model.Parameters(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = type metadata accessor for _Model.Parameters(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v2 - 8) + 16))(a2, a1, v2);
  return a2;
}

uint64_t outlined init with take of URL?(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for URL?);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v2 - 8) + 32))(a2, a1, v2);
  return a2;
}

char *initializeBufferWithCopyOfBuffer for _Model.Parameters(char *__dst, char **__src, uint64_t a3)
{
  int64_t v3 = __dst;
  uint64_t v4 = *(void *)(a3 - 8);
  int v5 = *(_DWORD *)(v4 + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v8 = *__src;
    *(void *)int64_t v3 = *__src;
    int64_t v3 = &v8[(v5 + 16) & ~v5];
    swift_retain();
  }
  else
  {
    switch(swift_getEnumCaseMultiPayload(__src, a3))
    {
      case 2u:
        *(void *)__dst = *__src;
        int64_t v7 = __src[1];
        *((void *)v3 + 1) = v7;
        swift_bridgeObjectRetain((_BYTE)v7);
        swift_storeEnumTagMultiPayload(v3, a3, 2);
        break;
      case 4u:
        uint64_t v9 = *__src;
        *(void *)int64_t v3 = *__src;
        v9;
        swift_storeEnumTagMultiPayload(v3, a3, 4);
        break;
      case 5u:
        *(void *)__dst = *__src;
        uint64_t v10 = __src[1];
        *((void *)v3 + 1) = v10;
        swift_bridgeObjectRetain((_BYTE)v10);
        swift_storeEnumTagMultiPayload(v3, a3, 5);
        break;
      case 6u:
        *(void *)__dst = *__src;
        uint64_t v11 = __src[1];
        *((void *)v3 + 1) = v11;
        swift_bridgeObjectRetain((_BYTE)v11);
        uint64_t v12 = *(int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (String, custom: URL?))
                     + 48);
        uint64_t v13 = &v3[v12];
        uint64_t v14 = (char *)__src + v12;
        uint64_t v15 = type metadata accessor for URL(0);
        if (__swift_getEnumTagSinglePayload((uint64_t)v14, 1, v15))
        {
          uint64_t v16 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for URL?);
          memcpy(v13, v14, *(void *)(*(void *)(v16 - 8) + 64));
        }
        else
        {
          (*(void (**)(char *, char *, uint64_t))(*(void *)(v15 - 8) + 16))(v13, v14, v15);
          __swift_storeEnumTagSinglePayload((uint64_t)v13, 0, 1, v15);
        }
        swift_storeEnumTagMultiPayload(v3, a3, 6);
        break;
      case 9u:
        *(void *)__dst = *__src;
        uint64_t v17 = __src[1];
        *((void *)v3 + 1) = v17;
        swift_bridgeObjectRetain((_BYTE)v17);
        swift_storeEnumTagMultiPayload(v3, a3, 9);
        break;
      case 0xAu:
        *(void *)__dst = *__src;
        uint64_t v18 = __src[1];
        *((void *)v3 + 1) = v18;
        swift_bridgeObjectRetain((_BYTE)v18);
        swift_storeEnumTagMultiPayload(v3, a3, 10);
        break;
      case 0xBu:
        *(void *)__dst = *__src;
        uint64_t v19 = __src[1];
        *((void *)v3 + 1) = v19;
        swift_bridgeObjectRetain((_BYTE)v19);
        swift_storeEnumTagMultiPayload(v3, a3, 11);
        break;
      case 0xCu:
        *(void *)__dst = *__src;
        uint64_t v20 = __src[1];
        *((void *)v3 + 1) = v20;
        swift_bridgeObjectRetain((_BYTE)v20);
        swift_storeEnumTagMultiPayload(v3, a3, 12);
        break;
      case 0xEu:
        *(void *)__dst = *__src;
        uint64_t v21 = __src[1];
        *((void *)v3 + 1) = v21;
        swift_bridgeObjectRetain((_BYTE)v21);
        swift_storeEnumTagMultiPayload(v3, a3, 14);
        break;
      case 0xFu:
        *(void *)__dst = *__src;
        uint64_t v22 = __src[1];
        *((void *)v3 + 1) = v22;
        swift_bridgeObjectRetain((_BYTE)v22);
        swift_storeEnumTagMultiPayload(v3, a3, 15);
        break;
      case 0x10u:
        uint64_t v23 = *__src;
        *(void *)int64_t v3 = *__src;
        swift_bridgeObjectRetain((_BYTE)v23);
        swift_storeEnumTagMultiPayload(v3, a3, 16);
        break;
      default:
        memcpy(__dst, __src, *(void *)(v4 + 64));
        break;
    }
  }
  return v3;
}

void destroy for _Model.Parameters(uint64_t a1, uint64_t a2)
{
  switch(swift_getEnumCaseMultiPayload(a1, a2))
  {
    case 2u:
    case 5u:
    case 9u:
    case 0xAu:
    case 0xBu:
    case 0xCu:
    case 0xEu:
    case 0xFu:
      swift_bridgeObjectRelease(*(void *)(a1 + 8));
      break;
    case 4u:

      break;
    case 6u:
      swift_bridgeObjectRelease(*(void *)(a1 + 8));
      uint64_t v2 = a1
         + *(int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (String, custom: URL?))
                  + 48);
      uint64_t v3 = type metadata accessor for URL(0);
      if (!__swift_getEnumTagSinglePayload(v2, 1, v3)) {
        (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(v2, v3);
      }
      break;
    case 0x10u:
      swift_bridgeObjectRelease(*(void *)a1);
      break;
    default:
      return;
  }
}

void *initializeWithCopy for _Model.Parameters(void *__dst, void *__src, uint64_t a3)
{
  switch(swift_getEnumCaseMultiPayload(__src, a3))
  {
    case 2u:
      void *__dst = *__src;
      uint64_t v5 = __src[1];
      __dst[1] = v5;
      swift_bridgeObjectRetain(v5);
      swift_storeEnumTagMultiPayload(__dst, a3, 2);
      break;
    case 4u:
      int64_t v6 = (void *)*__src;
      void *__dst = *__src;
      v6;
      swift_storeEnumTagMultiPayload(__dst, a3, 4);
      break;
    case 5u:
      void *__dst = *__src;
      uint64_t v7 = __src[1];
      __dst[1] = v7;
      swift_bridgeObjectRetain(v7);
      swift_storeEnumTagMultiPayload(__dst, a3, 5);
      break;
    case 6u:
      void *__dst = *__src;
      uint64_t v8 = __src[1];
      __dst[1] = v8;
      swift_bridgeObjectRetain(v8);
      uint64_t v9 = *(int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (String, custom: URL?))
                  + 48);
      uint64_t v10 = (char *)__dst + v9;
      uint64_t v11 = (char *)__src + v9;
      uint64_t v12 = type metadata accessor for URL(0);
      if (__swift_getEnumTagSinglePayload((uint64_t)v11, 1, v12))
      {
        uint64_t v13 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for URL?);
        memcpy(v10, v11, *(void *)(*(void *)(v13 - 8) + 64));
      }
      else
      {
        (*(void (**)(char *, char *, uint64_t))(*(void *)(v12 - 8) + 16))(v10, v11, v12);
        __swift_storeEnumTagSinglePayload((uint64_t)v10, 0, 1, v12);
      }
      swift_storeEnumTagMultiPayload(__dst, a3, 6);
      break;
    case 9u:
      void *__dst = *__src;
      uint64_t v14 = __src[1];
      __dst[1] = v14;
      swift_bridgeObjectRetain(v14);
      swift_storeEnumTagMultiPayload(__dst, a3, 9);
      break;
    case 0xAu:
      void *__dst = *__src;
      uint64_t v15 = __src[1];
      __dst[1] = v15;
      swift_bridgeObjectRetain(v15);
      swift_storeEnumTagMultiPayload(__dst, a3, 10);
      break;
    case 0xBu:
      void *__dst = *__src;
      uint64_t v16 = __src[1];
      __dst[1] = v16;
      swift_bridgeObjectRetain(v16);
      swift_storeEnumTagMultiPayload(__dst, a3, 11);
      break;
    case 0xCu:
      void *__dst = *__src;
      uint64_t v17 = __src[1];
      __dst[1] = v17;
      swift_bridgeObjectRetain(v17);
      swift_storeEnumTagMultiPayload(__dst, a3, 12);
      break;
    case 0xEu:
      void *__dst = *__src;
      uint64_t v18 = __src[1];
      __dst[1] = v18;
      swift_bridgeObjectRetain(v18);
      swift_storeEnumTagMultiPayload(__dst, a3, 14);
      break;
    case 0xFu:
      void *__dst = *__src;
      uint64_t v19 = __src[1];
      __dst[1] = v19;
      swift_bridgeObjectRetain(v19);
      swift_storeEnumTagMultiPayload(__dst, a3, 15);
      break;
    case 0x10u:
      uint64_t v20 = *__src;
      void *__dst = *__src;
      swift_bridgeObjectRetain(v20);
      swift_storeEnumTagMultiPayload(__dst, a3, 16);
      break;
    default:
      memcpy(__dst, __src, *(void *)(*(void *)(a3 - 8) + 64));
      break;
  }
  return __dst;
}

void *assignWithCopy for _Model.Parameters(void *__dst, void *__src, uint64_t a3)
{
  if (__dst != __src)
  {
    outlined destroy of _Model.Parameters((uint64_t)__dst);
    switch(swift_getEnumCaseMultiPayload(__src, a3))
    {
      case 2u:
        void *__dst = *__src;
        uint64_t v5 = __src[1];
        __dst[1] = v5;
        swift_bridgeObjectRetain(v5);
        swift_storeEnumTagMultiPayload(__dst, a3, 2);
        break;
      case 4u:
        int64_t v6 = (void *)*__src;
        void *__dst = *__src;
        v6;
        swift_storeEnumTagMultiPayload(__dst, a3, 4);
        break;
      case 5u:
        void *__dst = *__src;
        uint64_t v7 = __src[1];
        __dst[1] = v7;
        swift_bridgeObjectRetain(v7);
        swift_storeEnumTagMultiPayload(__dst, a3, 5);
        break;
      case 6u:
        void *__dst = *__src;
        uint64_t v8 = __src[1];
        __dst[1] = v8;
        swift_bridgeObjectRetain(v8);
        uint64_t v9 = *(int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (String, custom: URL?))
                    + 48);
        uint64_t v10 = (char *)__dst + v9;
        uint64_t v11 = (char *)__src + v9;
        uint64_t v12 = type metadata accessor for URL(0);
        if (__swift_getEnumTagSinglePayload((uint64_t)v11, 1, v12))
        {
          uint64_t v13 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for URL?);
          memcpy(v10, v11, *(void *)(*(void *)(v13 - 8) + 64));
        }
        else
        {
          (*(void (**)(char *, char *, uint64_t))(*(void *)(v12 - 8) + 16))(v10, v11, v12);
          __swift_storeEnumTagSinglePayload((uint64_t)v10, 0, 1, v12);
        }
        swift_storeEnumTagMultiPayload(__dst, a3, 6);
        break;
      case 9u:
        void *__dst = *__src;
        uint64_t v14 = __src[1];
        __dst[1] = v14;
        swift_bridgeObjectRetain(v14);
        swift_storeEnumTagMultiPayload(__dst, a3, 9);
        break;
      case 0xAu:
        void *__dst = *__src;
        uint64_t v15 = __src[1];
        __dst[1] = v15;
        swift_bridgeObjectRetain(v15);
        swift_storeEnumTagMultiPayload(__dst, a3, 10);
        break;
      case 0xBu:
        void *__dst = *__src;
        uint64_t v16 = __src[1];
        __dst[1] = v16;
        swift_bridgeObjectRetain(v16);
        swift_storeEnumTagMultiPayload(__dst, a3, 11);
        break;
      case 0xCu:
        void *__dst = *__src;
        uint64_t v17 = __src[1];
        __dst[1] = v17;
        swift_bridgeObjectRetain(v17);
        swift_storeEnumTagMultiPayload(__dst, a3, 12);
        break;
      case 0xEu:
        void *__dst = *__src;
        uint64_t v18 = __src[1];
        __dst[1] = v18;
        swift_bridgeObjectRetain(v18);
        swift_storeEnumTagMultiPayload(__dst, a3, 14);
        break;
      case 0xFu:
        void *__dst = *__src;
        uint64_t v19 = __src[1];
        __dst[1] = v19;
        swift_bridgeObjectRetain(v19);
        swift_storeEnumTagMultiPayload(__dst, a3, 15);
        break;
      case 0x10u:
        uint64_t v20 = *__src;
        void *__dst = *__src;
        swift_bridgeObjectRetain(v20);
        swift_storeEnumTagMultiPayload(__dst, a3, 16);
        break;
      default:
        memcpy(__dst, __src, *(void *)(*(void *)(a3 - 8) + 64));
        break;
    }
  }
  return __dst;
}

uint64_t outlined destroy of _Model.Parameters(uint64_t a1)
{
  uint64_t v1 = type metadata accessor for _Model.Parameters(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v1 - 8) + 8))(a1, v1);
  return a1;
}

char *initializeWithTake for _Model.Parameters(char *__dst, char *__src, uint64_t a3)
{
  if (swift_getEnumCaseMultiPayload(__src, a3) == 6)
  {
    *(_OWORD *)__dst = *(_OWORD *)__src;
    uint64_t v4 = *(int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (String, custom: URL?))
                + 48);
    uint64_t v5 = &__dst[v4];
    int64_t v6 = &__src[v4];
    uint64_t v7 = type metadata accessor for URL(0);
    if (__swift_getEnumTagSinglePayload((uint64_t)v6, 1, v7))
    {
      uint64_t v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for URL?);
      memcpy(v5, v6, *(void *)(*(void *)(v8 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v7 - 8) + 32))(v5, v6, v7);
      __swift_storeEnumTagSinglePayload((uint64_t)v5, 0, 1, v7);
    }
    swift_storeEnumTagMultiPayload(__dst, a3, 6);
  }
  else
  {
    memcpy(__dst, __src, *(void *)(*(void *)(a3 - 8) + 64));
  }
  return __dst;
}

char *assignWithTake for _Model.Parameters(char *__dst, char *__src, uint64_t a3)
{
  if (__dst != __src)
  {
    outlined destroy of _Model.Parameters((uint64_t)__dst);
    if (swift_getEnumCaseMultiPayload(__src, a3) == 6)
    {
      *(_OWORD *)__dst = *(_OWORD *)__src;
      uint64_t v4 = *(int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (String, custom: URL?))
                  + 48);
      uint64_t v5 = &__dst[v4];
      int64_t v6 = &__src[v4];
      uint64_t v7 = type metadata accessor for URL(0);
      if (__swift_getEnumTagSinglePayload((uint64_t)v6, 1, v7))
      {
        uint64_t v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for URL?);
        memcpy(v5, v6, *(void *)(*(void *)(v8 - 8) + 64));
      }
      else
      {
        (*(void (**)(char *, char *, uint64_t))(*(void *)(v7 - 8) + 32))(v5, v6, v7);
        __swift_storeEnumTagSinglePayload((uint64_t)v5, 0, 1, v7);
      }
      swift_storeEnumTagMultiPayload(__dst, a3, 6);
    }
    else
    {
      memcpy(__dst, __src, *(void *)(*(void *)(a3 - 8) + 64));
    }
  }
  return __dst;
}

uint64_t type metadata completion function for _Model.Parameters(uint64_t a1)
{
  v6[0] = (char *)&value witness table for Builtin.Int64 + 64;
  v6[1] = (char *)&value witness table for Builtin.Int64 + 64;
  _OWORD v6[2] = &unk_34EFB8;
  v6[3] = &unk_34EFD0;
  v6[4] = &unk_34EFE8;
  void v6[5] = &unk_34EFB8;
  uint64_t result = type metadata accessor for URL?(319);
  if (v2 <= 0x3F)
  {
    swift_getTupleTypeLayout2(v5, &unk_34EFB8);
    v6[6] = v5;
    v6[7] = (char *)&value witness table for Builtin.Int64 + 64;
    v6[8] = (char *)&value witness table for Builtin.Int64 + 64;
    v6[9] = &unk_34EFB8;
    v6[10] = &unk_34EFB8;
    v6[11] = &unk_34EFB8;
    v6[12] = &unk_34EFB8;
    v6[13] = &unk_34F000;
    v6[14] = &unk_34EFB8;
    v6[15] = &unk_34EFB8;
    v6[16] = (char *)&value witness table for Builtin.BridgeObject + 64;
    v6[17] = (char *)&value witness table for Builtin.Int64 + 64;
    v6[18] = (char *)&value witness table for Builtin.Int64 + 64;
    v6[19] = (char *)&value witness table for Builtin.Int64 + 64;
    v6[20] = (char *)&value witness table for Builtin.Int64 + 64;
    v6[21] = (char *)&value witness table for Builtin.Int64 + 64;
    v6[22] = (char *)&value witness table for Builtin.Int64 + 64;
    v6[23] = (char *)&value witness table for Builtin.Int64 + 64;
    swift_initEnumMetadataMultiPayload(a1, 256, 24, v6, v3, v4);
    return 0;
  }
  return result;
}

void *initializeBufferWithCopyOfBuffer for MLSoundClassifier.ModelParameters.ValidationData(char *__dst, char *__src, uint64_t a3)
{
  uint64_t v3 = __dst;
  uint64_t v4 = *(void *)(a3 - 8);
  int v5 = *(_DWORD *)(v4 + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v12 = *(void *)__src;
    *uint64_t v3 = *(void *)__src;
    uint64_t v3 = (void *)(v12 + ((v5 + 16) & ~v5));
    swift_retain();
  }
  else
  {
    int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload(__src, a3);
    if (EnumCaseMultiPayload == 2)
    {
      uint64_t v13 = *(void *)__src;
      *uint64_t v3 = *(void *)__src;
      swift_bridgeObjectRetain(v13);
      swift_storeEnumTagMultiPayload(v3, a3, 2);
    }
    else if (EnumCaseMultiPayload == 1)
    {
      uint64_t v8 = type metadata accessor for MLSoundClassifier.DataSource(0);
      switch(swift_getEnumCaseMultiPayload(__src, v8))
      {
        case 0u:
          uint64_t v9 = type metadata accessor for URL(0);
          (*(void (**)(char *, char *, uint64_t))(*(void *)(v9 - 8) + 16))(__dst, __src, v9);
          uint64_t v10 = v8;
          uint64_t v11 = 0;
          goto LABEL_14;
        case 1u:
          uint64_t v14 = type metadata accessor for URL(0);
          (*(void (**)(char *, char *, uint64_t))(*(void *)(v14 - 8) + 16))(__dst, __src, v14);
          uint64_t v30 = 1;
          goto LABEL_13;
        case 2u:
          uint64_t v15 = *(void *)__src;
          *uint64_t v3 = *(void *)__src;
          swift_bridgeObjectRetain(v15);
          uint64_t v30 = 2;
          goto LABEL_13;
        case 3u:
          uint64_t v31 = v8;
          uint64_t v16 = *(void *)__src;
          char v17 = __src[8];
          outlined copy of Result<_DataTable, Error>(*(void *)__src, v17);
          *(void *)__dst = v16;
          __dst[8] = v17;
          *((void *)__dst + 2) = *((void *)__src + 2);
          uint64_t v18 = *((void *)__src + 3);
          v3[3] = v18;
          v3[4] = *((void *)__src + 4);
          uint64_t v19 = *((void *)__src + 5);
          v3[5] = v19;
          long long v20 = *((_OWORD *)__src + 4);
          *((_OWORD *)v3 + 3) = *((_OWORD *)__src + 3);
          *((_OWORD *)v3 + 4) = v20;
          *((unsigned char *)v3 + 80) = __src[80];
          swift_bridgeObjectRetain(v18);
          swift_bridgeObjectRetain(v19);
          uint64_t v11 = 3;
          __dst = (char *)v3;
          uint64_t v10 = v31;
          goto LABEL_14;
        case 4u:
          uint64_t v21 = type metadata accessor for DataFrame(0);
          (*(void (**)(char *, char *, uint64_t))(*(void *)(v21 - 8) + 16))(__dst, __src, v21);
          uint64_t v22 = (int *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (DataFrame, featureColumn: String, labelColumn: String, parameters: MLSoundClassifier.FeatureExtractionParameters));
          uint64_t v23 = v22[12];
          *(void *)&__dst[v23] = *(void *)&__src[v23];
          uint64_t v24 = *(void *)&__src[v23 + 8];
          *(void *)((char *)v3 + v23 + 8) = v24;
          uint64_t v25 = v22[16];
          *(void *)((char *)v3 + v25) = *(void *)&__src[v25];
          uint64_t v26 = *(void *)&__src[v25 + 8];
          *(void *)((char *)v3 + v25 + 8) = v26;
          uint64_t v27 = v22[20];
          *((unsigned char *)v3 + v27 + 32) = __src[v27 + 32];
          long long v28 = *(_OWORD *)&__src[v27];
          *(_OWORD *)((char *)v3 + v27 + 16) = *(_OWORD *)&__src[v27 + 16];
          *(_OWORD *)((char *)v3 + v27) = v28;
          swift_bridgeObjectRetain(v24);
          swift_bridgeObjectRetain(v26);
          uint64_t v30 = 4;
LABEL_13:
          uint64_t v11 = v30;
          __dst = (char *)v3;
          uint64_t v10 = v8;
LABEL_14:
          swift_storeEnumTagMultiPayload(__dst, v10, v11);
          swift_storeEnumTagMultiPayload(v3, a3, 1);
          break;
        case 5u:
          JUMPOUT(0x20E5F4);
      }
    }
    else
    {
      memcpy(__dst, __src, *(void *)(v4 + 64));
    }
  }
  return v3;
}

uint64_t destroy for MLSoundClassifier.ModelParameters.ValidationData(uint64_t a1, uint64_t a2)
{
  uint64_t result = swift_getEnumCaseMultiPayload(a1, a2);
  if (result == 2) {
    return swift_bridgeObjectRelease(*(void *)a1);
  }
  if (result == 1)
  {
    uint64_t v3 = type metadata accessor for MLSoundClassifier.DataSource(0);
    uint64_t result = swift_getEnumCaseMultiPayload(a1, v3);
    switch((int)result)
    {
      case 0:
      case 1:
        uint64_t v4 = type metadata accessor for URL(0);
        uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v4 - 8) + 8))(a1, v4);
        break;
      case 2:
        return swift_bridgeObjectRelease(*(void *)a1);
      case 3:
        outlined consume of Result<_DataTable, Error>(*(void *)a1, *(_DWORD *)(a1 + 8));
        swift_bridgeObjectRelease(*(void *)(a1 + 24));
        uint64_t result = swift_bridgeObjectRelease(*(void *)(a1 + 40));
        break;
      case 4:
        uint64_t v5 = type metadata accessor for DataFrame(0);
        (*(void (**)(uint64_t, uint64_t))(*(void *)(v5 - 8) + 8))(a1, v5);
        uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (DataFrame, featureColumn: String, labelColumn: String, parameters: MLSoundClassifier.FeatureExtractionParameters));
        swift_bridgeObjectRelease(*(void *)(a1 + *(int *)(v6 + 48) + 8));
        uint64_t result = swift_bridgeObjectRelease(*(void *)(a1 + *(int *)(v6 + 64) + 8));
        break;
      default:
        return result;
    }
  }
  return result;
}

void *initializeWithCopy for MLSoundClassifier.ModelParameters.ValidationData(char *__dst, char *__src, uint64_t a3)
{
  uint64_t v4 = __dst;
  int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload(__src, a3);
  if (EnumCaseMultiPayload == 2)
  {
    uint64_t v10 = *(void *)__src;
    *uint64_t v4 = *(void *)__src;
    swift_bridgeObjectRetain(v10);
    swift_storeEnumTagMultiPayload(v4, a3, 2);
  }
  else if (EnumCaseMultiPayload == 1)
  {
    uint64_t v6 = type metadata accessor for MLSoundClassifier.DataSource(0);
    switch(swift_getEnumCaseMultiPayload(__src, v6))
    {
      case 0u:
        uint64_t v7 = type metadata accessor for URL(0);
        (*(void (**)(char *, char *, uint64_t))(*(void *)(v7 - 8) + 16))(__dst, __src, v7);
        uint64_t v8 = v6;
        uint64_t v9 = 0;
        goto LABEL_12;
      case 1u:
        uint64_t v11 = type metadata accessor for URL(0);
        (*(void (**)(char *, char *, uint64_t))(*(void *)(v11 - 8) + 16))(__dst, __src, v11);
        uint64_t v27 = 1;
        goto LABEL_11;
      case 2u:
        uint64_t v12 = *(void *)__src;
        *uint64_t v4 = *(void *)__src;
        swift_bridgeObjectRetain(v12);
        uint64_t v27 = 2;
        goto LABEL_11;
      case 3u:
        uint64_t v28 = v6;
        uint64_t v13 = *(void *)__src;
        char v14 = __src[8];
        outlined copy of Result<_DataTable, Error>(*(void *)__src, v14);
        *(void *)__dst = v13;
        __dst[8] = v14;
        *((void *)__dst + 2) = *((void *)__src + 2);
        uint64_t v15 = *((void *)__src + 3);
        uint64_t v4[3] = v15;
        _OWORD v4[4] = *((void *)__src + 4);
        uint64_t v16 = *((void *)__src + 5);
        void v4[5] = v16;
        long long v17 = *((_OWORD *)__src + 4);
        *((_OWORD *)v4 + 3) = *((_OWORD *)__src + 3);
        *((_OWORD *)v4 + 4) = v17;
        *((unsigned char *)v4 + 80) = __src[80];
        swift_bridgeObjectRetain(v15);
        swift_bridgeObjectRetain(v16);
        uint64_t v9 = 3;
        __dst = (char *)v4;
        uint64_t v8 = v28;
        goto LABEL_12;
      case 4u:
        uint64_t v18 = type metadata accessor for DataFrame(0);
        (*(void (**)(char *, char *, uint64_t))(*(void *)(v18 - 8) + 16))(__dst, __src, v18);
        uint64_t v19 = (int *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (DataFrame, featureColumn: String, labelColumn: String, parameters: MLSoundClassifier.FeatureExtractionParameters));
        uint64_t v20 = v19[12];
        *(void *)&__dst[v20] = *(void *)&__src[v20];
        uint64_t v21 = *(void *)&__src[v20 + 8];
        *(void *)((char *)v4 + v20 + 8) = v21;
        uint64_t v22 = v19[16];
        *(void *)((char *)v4 + v22) = *(void *)&__src[v22];
        uint64_t v23 = *(void *)&__src[v22 + 8];
        *(void *)((char *)v4 + v22 + 8) = v23;
        uint64_t v24 = v19[20];
        *((unsigned char *)v4 + v24 + 32) = __src[v24 + 32];
        long long v25 = *(_OWORD *)&__src[v24];
        *(_OWORD *)((char *)v4 + v24 + 16) = *(_OWORD *)&__src[v24 + 16];
        *(_OWORD *)((char *)v4 + v24) = v25;
        swift_bridgeObjectRetain(v21);
        swift_bridgeObjectRetain(v23);
        uint64_t v27 = 4;
LABEL_11:
        uint64_t v9 = v27;
        __dst = (char *)v4;
        uint64_t v8 = v6;
LABEL_12:
        swift_storeEnumTagMultiPayload(__dst, v8, v9);
        swift_storeEnumTagMultiPayload(v4, a3, 1);
        break;
    }
  }
  else
  {
    memcpy(__dst, __src, *(void *)(*(void *)(a3 - 8) + 64));
  }
  return v4;
}

void *assignWithCopy for MLSoundClassifier.ModelParameters.ValidationData(char *__dst, char *__src, uint64_t a3)
{
  uint64_t v3 = __dst;
  if (__dst != __src)
  {
    outlined destroy of MLActivityClassifier.ModelParameters((uint64_t)__dst, type metadata accessor for MLSoundClassifier.ModelParameters.ValidationData);
    int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload(__src, a3);
    if (EnumCaseMultiPayload == 2)
    {
      uint64_t v10 = *(void *)__src;
      *uint64_t v3 = *(void *)__src;
      swift_bridgeObjectRetain(v10);
      swift_storeEnumTagMultiPayload(v3, a3, 2);
    }
    else if (EnumCaseMultiPayload == 1)
    {
      uint64_t v6 = type metadata accessor for MLSoundClassifier.DataSource(0);
      switch(swift_getEnumCaseMultiPayload(__src, v6))
      {
        case 0u:
          uint64_t v7 = type metadata accessor for URL(0);
          (*(void (**)(char *, char *, uint64_t))(*(void *)(v7 - 8) + 16))(__dst, __src, v7);
          uint64_t v8 = v6;
          uint64_t v9 = 0;
          goto LABEL_13;
        case 1u:
          uint64_t v11 = type metadata accessor for URL(0);
          (*(void (**)(char *, char *, uint64_t))(*(void *)(v11 - 8) + 16))(__dst, __src, v11);
          uint64_t v27 = 1;
          goto LABEL_12;
        case 2u:
          uint64_t v12 = *(void *)__src;
          *uint64_t v3 = *(void *)__src;
          swift_bridgeObjectRetain(v12);
          uint64_t v27 = 2;
          goto LABEL_12;
        case 3u:
          uint64_t v28 = v6;
          uint64_t v13 = *(void *)__src;
          char v14 = __src[8];
          outlined copy of Result<_DataTable, Error>(*(void *)__src, v14);
          *(void *)__dst = v13;
          __dst[8] = v14;
          *((void *)__dst + 2) = *((void *)__src + 2);
          uint64_t v15 = *((void *)__src + 3);
          v3[3] = v15;
          v3[4] = *((void *)__src + 4);
          uint64_t v16 = *((void *)__src + 5);
          v3[5] = v16;
          long long v17 = *((_OWORD *)__src + 4);
          *((_OWORD *)v3 + 3) = *((_OWORD *)__src + 3);
          *((_OWORD *)v3 + 4) = v17;
          *((unsigned char *)v3 + 80) = __src[80];
          swift_bridgeObjectRetain(v15);
          swift_bridgeObjectRetain(v16);
          uint64_t v9 = 3;
          __dst = (char *)v3;
          uint64_t v8 = v28;
          goto LABEL_13;
        case 4u:
          uint64_t v18 = type metadata accessor for DataFrame(0);
          (*(void (**)(char *, char *, uint64_t))(*(void *)(v18 - 8) + 16))(__dst, __src, v18);
          uint64_t v19 = (int *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (DataFrame, featureColumn: String, labelColumn: String, parameters: MLSoundClassifier.FeatureExtractionParameters));
          uint64_t v20 = v19[12];
          *(void *)&__dst[v20] = *(void *)&__src[v20];
          uint64_t v21 = *(void *)&__src[v20 + 8];
          *(void *)((char *)v3 + v20 + 8) = v21;
          uint64_t v22 = v19[16];
          *(void *)((char *)v3 + v22) = *(void *)&__src[v22];
          uint64_t v23 = *(void *)&__src[v22 + 8];
          *(void *)((char *)v3 + v22 + 8) = v23;
          uint64_t v24 = v19[20];
          *((unsigned char *)v3 + v24 + 32) = __src[v24 + 32];
          long long v25 = *(_OWORD *)&__src[v24];
          *(_OWORD *)((char *)v3 + v24 + 16) = *(_OWORD *)&__src[v24 + 16];
          *(_OWORD *)((char *)v3 + v24) = v25;
          swift_bridgeObjectRetain(v21);
          swift_bridgeObjectRetain(v23);
          uint64_t v27 = 4;
LABEL_12:
          uint64_t v9 = v27;
          __dst = (char *)v3;
          uint64_t v8 = v6;
LABEL_13:
          swift_storeEnumTagMultiPayload(__dst, v8, v9);
          swift_storeEnumTagMultiPayload(v3, a3, 1);
          break;
      }
    }
    else
    {
      memcpy(__dst, __src, *(void *)(*(void *)(a3 - 8) + 64));
    }
  }
  return v3;
}

uint64_t type metadata accessor for MLSoundClassifier.ModelParameters.ValidationData(uint64_t a1)
{
  uint64_t result = type metadata singleton initialization cache for MLSoundClassifier.ModelParameters.ValidationData;
  if (!type metadata singleton initialization cache for MLSoundClassifier.ModelParameters.ValidationData) {
    return swift_getSingletonMetadata(a1, &nominal type descriptor for MLSoundClassifier.ModelParameters.ValidationData);
  }
  return result;
}

unsigned char *initializeWithTake for MLSoundClassifier.ModelParameters.ValidationData(unsigned char *__dst, unsigned char *__src, uint64_t a3)
{
  if (swift_getEnumCaseMultiPayload(__src, a3) == 1)
  {
    uint64_t v4 = type metadata accessor for MLSoundClassifier.DataSource(0);
    int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload(__src, v4);
    if (EnumCaseMultiPayload == 4)
    {
      uint64_t v9 = type metadata accessor for DataFrame(0);
      (*(void (**)(unsigned char *, unsigned char *, uint64_t))(*(void *)(v9 - 8) + 32))(__dst, __src, v9);
      uint64_t v10 = (int *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (DataFrame, featureColumn: String, labelColumn: String, parameters: MLSoundClassifier.FeatureExtractionParameters));
      *(_OWORD *)&__dst[v10[12]] = *(_OWORD *)&__src[v10[12]];
      *(_OWORD *)&__dst[v10[16]] = *(_OWORD *)&__src[v10[16]];
      uint64_t v11 = v10[20];
      long long v12 = *(_OWORD *)&__src[v11 + 16];
      *(_OWORD *)&__dst[v11] = *(_OWORD *)&__src[v11];
      *(_OWORD *)&__dst[v11 + 16] = v12;
      __dst[v11 + 32] = __src[v11 + 32];
      uint64_t v15 = 4;
    }
    else
    {
      if (EnumCaseMultiPayload != 1)
      {
        if (EnumCaseMultiPayload)
        {
          memcpy(__dst, __src, *(void *)(*(void *)(v4 - 8) + 64));
          goto LABEL_12;
        }
        uint64_t v6 = type metadata accessor for URL(0);
        (*(void (**)(unsigned char *, unsigned char *, uint64_t))(*(void *)(v6 - 8) + 32))(__dst, __src, v6);
        uint64_t v7 = v4;
        uint64_t v8 = 0;
LABEL_10:
        swift_storeEnumTagMultiPayload(__dst, v7, v8);
LABEL_12:
        swift_storeEnumTagMultiPayload(__dst, a3, 1);
        return __dst;
      }
      uint64_t v13 = type metadata accessor for URL(0);
      (*(void (**)(unsigned char *, unsigned char *, uint64_t))(*(void *)(v13 - 8) + 32))(__dst, __src, v13);
      uint64_t v15 = 1;
    }
    uint64_t v8 = v15;
    uint64_t v7 = v4;
    goto LABEL_10;
  }
  memcpy(__dst, __src, *(void *)(*(void *)(a3 - 8) + 64));
  return __dst;
}

unsigned char *assignWithTake for MLSoundClassifier.ModelParameters.ValidationData(unsigned char *__dst, unsigned char *__src, uint64_t a3)
{
  if (__dst != __src)
  {
    outlined destroy of MLActivityClassifier.ModelParameters((uint64_t)__dst, type metadata accessor for MLSoundClassifier.ModelParameters.ValidationData);
    if (swift_getEnumCaseMultiPayload(__src, a3) == 1)
    {
      uint64_t v4 = type metadata accessor for MLSoundClassifier.DataSource(0);
      int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload(__src, v4);
      if (EnumCaseMultiPayload == 4)
      {
        uint64_t v9 = type metadata accessor for DataFrame(0);
        (*(void (**)(unsigned char *, unsigned char *, uint64_t))(*(void *)(v9 - 8) + 32))(__dst, __src, v9);
        uint64_t v10 = (int *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (DataFrame, featureColumn: String, labelColumn: String, parameters: MLSoundClassifier.FeatureExtractionParameters));
        *(_OWORD *)&__dst[v10[12]] = *(_OWORD *)&__src[v10[12]];
        *(_OWORD *)&__dst[v10[16]] = *(_OWORD *)&__src[v10[16]];
        uint64_t v11 = v10[20];
        long long v12 = *(_OWORD *)&__src[v11 + 16];
        *(_OWORD *)&__dst[v11] = *(_OWORD *)&__src[v11];
        *(_OWORD *)&__dst[v11 + 16] = v12;
        __dst[v11 + 32] = __src[v11 + 32];
        uint64_t v15 = 4;
      }
      else
      {
        if (EnumCaseMultiPayload != 1)
        {
          if (EnumCaseMultiPayload)
          {
            memcpy(__dst, __src, *(void *)(*(void *)(v4 - 8) + 64));
            goto LABEL_13;
          }
          uint64_t v6 = type metadata accessor for URL(0);
          (*(void (**)(unsigned char *, unsigned char *, uint64_t))(*(void *)(v6 - 8) + 32))(__dst, __src, v6);
          uint64_t v7 = v4;
          uint64_t v8 = 0;
LABEL_11:
          swift_storeEnumTagMultiPayload(__dst, v7, v8);
LABEL_13:
          swift_storeEnumTagMultiPayload(__dst, a3, 1);
          return __dst;
        }
        uint64_t v13 = type metadata accessor for URL(0);
        (*(void (**)(unsigned char *, unsigned char *, uint64_t))(*(void *)(v13 - 8) + 32))(__dst, __src, v13);
        uint64_t v15 = 1;
      }
      uint64_t v8 = v15;
      uint64_t v7 = v4;
      goto LABEL_11;
    }
    memcpy(__dst, __src, *(void *)(*(void *)(a3 - 8) + 64));
  }
  return __dst;
}

uint64_t type metadata completion function for MLSoundClassifier.ModelParameters.ValidationData(uint64_t a1)
{
  v5[0] = &unk_34F028;
  uint64_t result = type metadata accessor for MLSoundClassifier.DataSource(319);
  if (v4 <= 0x3F)
  {
    v5[1] = *(void *)(result - 8) + 64;
    v5[2] = (char *)&value witness table for Builtin.BridgeObject + 64;
    swift_initEnumMetadataMultiPayload(a1, 256, 3, v5, v2, v3);
    return 0;
  }
  return result;
}

Swift::tuple_training_OpaquePointer_validation_OpaquePointer_optional __swiftcall __spoils<cf,zf,sf,of,pf,rax,rdx,rcx,rdi,rsi,r8,r9,r10,r11,r12,xmm0,xmm1,xmm2,xmm3,xmm4,xmm5,xmm6,xmm7> MLSoundClassifier.ModelParameters.ValidationData.splitFeatures(trainingData:)(Swift::OpaquePointer trainingData)
{
  uint64_t v29 = v1;
  uint64_t v3 = (void *)v2;
  char rawValue = (uint64_t *)trainingData._rawValue;
  int64_t v4 = *(void *)(*(void *)(type metadata accessor for MLSoundClassifier.DataSource(0) - 8) + 64);
  uint64_t v5 = alloca(v4);
  uint64_t v6 = alloca(v4);
  uint64_t v7 = v28;
  uint64_t v8 = type metadata accessor for MLSoundClassifier.ModelParameters.ValidationData(0);
  int64_t v9 = *(void *)(*(void *)(v8 - 8) + 64);
  uint64_t v10 = alloca(v9);
  uint64_t v11 = alloca(v9);
  outlined init with copy of MLSoundClassifier.ModelParameters.ValidationData(v2, (uint64_t)v28);
  switch(swift_getEnumCaseMultiPayload(v28, v8))
  {
    case 0u:
      uint64_t v3 = specialized Collection.randomSplit<A, B>(strategy:)(v28[0], v28[1], v29, (uint64_t)rawValue);
      uint64_t v7 = v13;
      break;
    case 1u:
      outlined init with take of MLSoundClassifier.DataSource((uint64_t)v28, (uint64_t)v28);
      unint64_t v14 = (unint64_t)MLSoundClassifier.DataSource.annotatedFeatures()();
      if (!v15)
      {
        uint64_t v3 = (void *)v14;
        if (v14)
        {
          swift_bridgeObjectRetain(v14);
          outlined destroy of MLActivityClassifier.ModelParameters((uint64_t)v28, type metadata accessor for MLSoundClassifier.DataSource);
          uint64_t v7 = rawValue;
          swift_bridgeObjectRetain((_BYTE)rawValue);
          swift_bridgeObjectRelease((_BYTE)v3);
          break;
        }
        uint64_t v23 = lazy protocol witness table accessor for type MLCreateError and conformance MLCreateError();
        swift_allocError(&type metadata for MLCreateError, v23, 0, 0);
        *(void *)uint64_t v24 = 0xD000000000000031;
        *(void *)(v24 + 8) = "max_item_neighborhood_size" + 0x8000000000000000;
        *(_OWORD *)(v24 + 16) = 0;
        *(_OWORD *)(v24 + 32) = 0;
        *(unsigned char *)(v24 + 48) = 0;
        swift_willThrow(&type metadata for MLCreateError, v23, v24, v25, v26, v27);
      }
      outlined destroy of MLActivityClassifier.ModelParameters((uint64_t)v28, type metadata accessor for MLSoundClassifier.DataSource);
      break;
    case 2u:
      outlined destroy of MLActivityClassifier.ModelParameters((uint64_t)v28, type metadata accessor for MLSoundClassifier.ModelParameters.ValidationData);
      uint64_t v16 = lazy protocol witness table accessor for type MLCreateError and conformance MLCreateError();
      swift_allocError(&type metadata for MLCreateError, v16, 0, 0);
      *(void *)uint64_t v17 = 0xD000000000000031;
      *(void *)(v17 + 8) = "max_item_neighborhood_size" + 0x8000000000000000;
      *(_OWORD *)(v17 + 16) = 0;
      *(_OWORD *)(v17 + 32) = 0;
      *(unsigned char *)(v17 + 48) = 0;
      swift_willThrow(&type metadata for MLCreateError, v16, v17, v18, v19, v20);
      break;
    case 3u:
      uint64_t v7 = rawValue;
      swift_bridgeObjectRetain((_BYTE)rawValue);
      uint64_t v3 = 0;
      break;
  }
  uint64_t v21 = v7;
  uint64_t v22 = v3;
  result.validation.value._char rawValue = v22;
  result.training._char rawValue = v21;
  result.validation.is_nil = v12;
  return result;
}

uint64_t outlined init with take of MLSoundClassifier.DataSource(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = type metadata accessor for MLSoundClassifier.DataSource(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v2 - 8) + 32))(a2, a1, v2);
  return a2;
}

Swift::tuple_training_OpaquePointer_validation_OpaquePointer_optional __swiftcall __spoils<cf,zf,sf,of,pf,rax,rdx,rcx,rdi,rsi,r8,r9,r10,r11,r12,xmm0,xmm1,xmm2,xmm3,xmm4,xmm5,xmm6,xmm7> MLSoundClassifier.ModelParameters.ValidationData.splitFiles(trainingData:)(Swift::OpaquePointer trainingData)
{
  uint64_t v38 = v1;
  char rawValue = (uint64_t *)trainingData._rawValue;
  uint64_t v3 = type metadata accessor for MLSoundClassifier.DataSource(0);
  int64_t v4 = *(void *)(*(void *)(v3 - 8) + 64);
  uint64_t v5 = alloca(v4);
  uint64_t v6 = alloca(v4);
  uint64_t v37 = v35;
  uint64_t v7 = alloca(v4);
  uint64_t v8 = alloca(v4);
  uint64_t v36 = v35;
  uint64_t v9 = type metadata accessor for MLSoundClassifier.ModelParameters.ValidationData(0);
  int64_t v10 = *(void *)(*(void *)(v9 - 8) + 64);
  uint64_t v11 = alloca(v10);
  Swift::Bool v12 = alloca(v10);
  uint64_t v13 = v35;
  outlined init with copy of MLSoundClassifier.ModelParameters.ValidationData(v2, (uint64_t)v35);
  switch(swift_getEnumCaseMultiPayload(v35, v9))
  {
    case 0u:
      uint64_t v3 = (uint64_t)specialized Collection.randomSplit<A, B>(strategy:)(v35[0], v35[1], (__int16)v36, (uint64_t)rawValue);
      uint64_t v13 = v15;
      goto LABEL_9;
    case 1u:
      uint64_t v16 = (uint64_t)v36;
      outlined init with take of MLSoundClassifier.DataSource((uint64_t)v35, (uint64_t)v36);
      uint64_t v17 = v38;
      uint64_t v18 = MLSoundClassifier.DataSource.labeledSounds()();
      if (v17) {
        goto LABEL_4;
      }
      uint64_t v13 = (uint64_t *)v18;
      uint64_t v3 = (uint64_t)specialized Sequence.flatMap<A>(_:)(v18);
      swift_bridgeObjectRelease((_BYTE)v13);
      if (!*(void *)(v3 + 16))
      {
        swift_bridgeObjectRelease(v3);
        uint64_t v25 = lazy protocol witness table accessor for type MLCreateError and conformance MLCreateError();
        swift_allocError(&type metadata for MLCreateError, v25, 0, 0);
        *(void *)uint64_t v26 = 0xD00000000000002ELL;
        *(void *)(v26 + 8) = "uld use features." + 0x8000000000000000;
        *(_OWORD *)(v26 + 16) = 0;
        *(_OWORD *)(v26 + 32) = 0;
        *(unsigned char *)(v26 + 48) = 0;
        swift_willThrow(&type metadata for MLCreateError, v25, v26, v27, v28, v29);
LABEL_4:
        uint64_t v19 = v16;
        goto LABEL_7;
      }
      outlined destroy of MLActivityClassifier.ModelParameters(v16, type metadata accessor for MLSoundClassifier.DataSource);
      goto LABEL_13;
    case 2u:
      uint64_t v20 = (uint64_t)v37;
      uint64_t *v37 = v35[0];
      swift_storeEnumTagMultiPayload(v20, v3, 2);
      uint64_t v21 = v38;
      uint64_t v22 = MLSoundClassifier.DataSource.labeledSounds()();
      if (v21)
      {
        uint64_t v19 = (uint64_t)v37;
LABEL_7:
        outlined destroy of MLActivityClassifier.ModelParameters(v19, type metadata accessor for MLSoundClassifier.DataSource);
      }
      else
      {
        uint64_t v13 = (uint64_t *)v22;
        uint64_t v3 = (uint64_t)specialized Sequence.flatMap<A>(_:)(v22);
        swift_bridgeObjectRelease((_BYTE)v13);
        outlined destroy of MLActivityClassifier.ModelParameters((uint64_t)v37, type metadata accessor for MLSoundClassifier.DataSource);
        if (*(void *)(v3 + 16))
        {
LABEL_13:
          uint64_t v13 = rawValue;
          swift_bridgeObjectRetain((_BYTE)rawValue);
        }
        else
        {
          swift_bridgeObjectRelease(v3);
          uint64_t v30 = lazy protocol witness table accessor for type MLCreateError and conformance MLCreateError();
          swift_allocError(&type metadata for MLCreateError, v30, 0, 0);
          *(void *)uint64_t v31 = 0xD00000000000002ELL;
          *(void *)(v31 + 8) = "uld use features." + 0x8000000000000000;
          *(_OWORD *)(v31 + 16) = 0;
          *(_OWORD *)(v31 + 32) = 0;
          *(unsigned char *)(v31 + 48) = 0;
          swift_willThrow(&type metadata for MLCreateError, v30, v31, v32, v33, v34);
        }
      }
LABEL_9:
      uint64_t v23 = v13;
      uint64_t v24 = (void *)v3;
      result.validation.value._char rawValue = v24;
      result.training._char rawValue = v23;
      result.validation.is_nil = v14;
      return result;
    case 3u:
      uint64_t v13 = rawValue;
      swift_bridgeObjectRetain((_BYTE)rawValue);
      uint64_t v3 = 0;
      goto LABEL_9;
  }
}

uint64_t MLSoundClassifier.ModelParameters.ValidationData.validate(modelParameters:)(uint64_t a1)
{
  uint64_t v2 = v1;
  uint64_t v12 = a1;
  int64_t v3 = *(void *)(*(void *)(type metadata accessor for MLSoundClassifier.DataSource(0) - 8) + 64);
  int64_t v4 = alloca(v3);
  uint64_t v5 = alloca(v3);
  uint64_t v13 = &v12;
  uint64_t v6 = type metadata accessor for MLSoundClassifier.ModelParameters.ValidationData(0);
  int64_t v7 = *(void *)(*(void *)(v6 - 8) + 64);
  uint64_t v8 = alloca(v7);
  uint64_t v9 = alloca(v7);
  outlined init with copy of MLSoundClassifier.ModelParameters.ValidationData(v2, (uint64_t)&v12);
  uint64_t result = swift_getEnumCaseMultiPayload(&v12, v6);
  switch((int)result)
  {
    case 0:
    case 3:
      return result;
    case 1:
      uint64_t v11 = (uint64_t)v13;
      outlined init with take of MLSoundClassifier.DataSource((uint64_t)&v12, (uint64_t)v13);
      MLSoundClassifier.DataSource.validate(modelParameters:)(v12);
      uint64_t result = outlined destroy of MLActivityClassifier.ModelParameters(v11, type metadata accessor for MLSoundClassifier.DataSource);
      break;
    case 2:
      uint64_t result = outlined destroy of MLActivityClassifier.ModelParameters((uint64_t)&v12, type metadata accessor for MLSoundClassifier.ModelParameters.ValidationData);
      break;
  }
  return result;
}

uint64_t type metadata instantiation function for RecommenderModel(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_allocateGenericValueMetadata(a1, a2, a3, 80);
}

uint64_t destroy for RecommenderModel(void *a1)
{
  swift_bridgeObjectRelease(*a1);
  swift_bridgeObjectRelease(a1[1]);
  swift_bridgeObjectRelease(a1[2]);
  swift_bridgeObjectRelease(a1[3]);
  swift_bridgeObjectRelease(a1[7]);
  swift_bridgeObjectRelease(a1[8]);
  swift_release(a1[9]);
  uint64_t v2 = a1[13];
  if (v2)
  {
    swift_bridgeObjectRelease(v2);
    swift_bridgeObjectRelease(a1[14]);
  }
  swift_bridgeObjectRelease(a1[15]);
  return swift_bridgeObjectRelease(a1[16]);
}

uint64_t initializeWithCopy for RecommenderModel(uint64_t a1, uint64_t *a2)
{
  uint64_t v3 = *a2;
  *(void *)a1 = *a2;
  uint64_t v4 = a2[1];
  *(void *)(a1 + 8) = v4;
  uint64_t v5 = a2[2];
  *(void *)(a1 + 16) = v5;
  uint64_t v14 = a2[3];
  *(void *)(a1 + 24) = v14;
  *(_OWORD *)(a1 + 32) = *((_OWORD *)a2 + 2);
  *(unsigned char *)(a1 + 48) = *((unsigned char *)a2 + 48);
  uint64_t v6 = a2[7];
  *(void *)(a1 + 56) = v6;
  uint64_t v15 = a2[8];
  *(void *)(a1 + 64) = v15;
  uint64_t v12 = a2[9];
  uint64_t v7 = a2[11];
  *(_OWORD *)(a1 + 72) = *(_OWORD *)(a2 + 9);
  *(void *)(a1 + 88) = v7;
  uint64_t v13 = a2[13];
  swift_bridgeObjectRetain(v3);
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRetain(v5);
  swift_bridgeObjectRetain(v14);
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRetain(v15);
  swift_retain(v12);
  if (v13)
  {
    *(void *)(a1 + 96) = a2[12];
    *(void *)(a1 + 104) = v13;
    uint64_t v8 = a2[14];
    *(void *)(a1 + 112) = v8;
    swift_bridgeObjectRetain(v13);
    swift_bridgeObjectRetain(v8);
  }
  else
  {
    *(void *)(a1 + 112) = a2[14];
    *(_OWORD *)(a1 + 96) = *((_OWORD *)a2 + 6);
  }
  uint64_t v9 = a2[15];
  *(void *)(a1 + 120) = v9;
  uint64_t v10 = a2[16];
  *(void *)(a1 + 128) = v10;
  *(_OWORD *)(a1 + 136) = *(_OWORD *)(a2 + 17);
  swift_bridgeObjectRetain(v9);
  swift_bridgeObjectRetain(v10);
  return a1;
}

uint64_t *assignWithCopy for RecommenderModel(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3 = *a2;
  uint64_t v4 = *a1;
  *a1 = *a2;
  swift_bridgeObjectRetain(v3);
  swift_bridgeObjectRelease(v4);
  uint64_t v5 = a2[1];
  uint64_t v6 = a1[1];
  a1[1] = v5;
  swift_bridgeObjectRetain(v5);
  swift_bridgeObjectRelease(v6);
  uint64_t v7 = a2[2];
  uint64_t v8 = a1[2];
  a1[2] = v7;
  swift_bridgeObjectRetain(v7);
  swift_bridgeObjectRelease(v8);
  uint64_t v9 = a2[3];
  uint64_t v10 = a1[3];
  a1[3] = v9;
  swift_bridgeObjectRetain(v9);
  swift_bridgeObjectRelease(v10);
  a1[4] = a2[4];
  a1[5] = a2[5];
  *((unsigned char *)a1 + 48) = *((unsigned char *)a2 + 48);
  uint64_t v11 = a2[7];
  uint64_t v12 = a1[7];
  a1[7] = v11;
  swift_bridgeObjectRetain(v11);
  swift_bridgeObjectRelease(v12);
  uint64_t v13 = a2[8];
  uint64_t v14 = a1[8];
  a1[8] = v13;
  swift_bridgeObjectRetain(v13);
  swift_bridgeObjectRelease(v14);
  a1[9] = a2[9];
  swift_retain();
  swift_release();
  *((_OWORD *)a1 + 5) = *((_OWORD *)a2 + 5);
  uint64_t v15 = a1 + 12;
  uint64_t v16 = a2 + 12;
  uint64_t v17 = a1[13];
  uint64_t v18 = a2[13];
  if (v17)
  {
    if (v18)
    {
      a1[12] = a2[12];
      uint64_t v19 = a2[13];
      a1[13] = v19;
      swift_bridgeObjectRetain(v19);
      swift_bridgeObjectRelease(v17);
      uint64_t v20 = a2[14];
      uint64_t v21 = a1[14];
      a1[14] = v20;
      swift_bridgeObjectRetain(v20);
      swift_bridgeObjectRelease(v21);
    }
    else
    {
      outlined destroy of InteractionLookupTable((uint64_t)(a1 + 12));
      *uint64_t v15 = *v16;
      a1[14] = a2[14];
    }
  }
  else if (v18)
  {
    a1[12] = a2[12];
    uint64_t v22 = a2[13];
    a1[13] = v22;
    uint64_t v23 = a2[14];
    a1[14] = v23;
    swift_bridgeObjectRetain(v22);
    swift_bridgeObjectRetain(v23);
  }
  else
  {
    a1[14] = a2[14];
    *uint64_t v15 = *v16;
  }
  uint64_t v24 = a2[15];
  uint64_t v25 = a1[15];
  a1[15] = v24;
  swift_bridgeObjectRetain(v24);
  swift_bridgeObjectRelease(v25);
  uint64_t v26 = a2[16];
  uint64_t v27 = a1[16];
  a1[16] = v26;
  swift_bridgeObjectRetain(v26);
  swift_bridgeObjectRelease(v27);
  a1[17] = a2[17];
  a1[18] = a2[18];
  return a1;
}

void *__swift_memcpy152_8(void *a1, const void *a2)
{
  return memcpy(a1, a2, 0x98uLL);
}

uint64_t *assignWithTake for RecommenderModel(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3 = *a1;
  *a1 = *a2;
  swift_bridgeObjectRelease(v3);
  uint64_t v4 = a1[1];
  a1[1] = a2[1];
  swift_bridgeObjectRelease(v4);
  uint64_t v5 = a1[2];
  a1[2] = a2[2];
  swift_bridgeObjectRelease(v5);
  uint64_t v6 = a1[3];
  a1[3] = a2[3];
  swift_bridgeObjectRelease(v6);
  *((_OWORD *)a1 + 2) = *((_OWORD *)a2 + 2);
  *((unsigned char *)a1 + 48) = *((unsigned char *)a2 + 48);
  uint64_t v7 = a1[7];
  a1[7] = a2[7];
  swift_bridgeObjectRelease(v7);
  uint64_t v8 = a1[8];
  a1[8] = a2[8];
  swift_bridgeObjectRelease(v8);
  a1[9] = a2[9];
  swift_release();
  *((_OWORD *)a1 + 5) = *((_OWORD *)a2 + 5);
  uint64_t v9 = a1 + 12;
  uint64_t v10 = a2 + 12;
  uint64_t v11 = a1[13];
  if (v11)
  {
    uint64_t v12 = a2[13];
    if (v12)
    {
      a1[12] = a2[12];
      a1[13] = v12;
      swift_bridgeObjectRelease(v11);
      uint64_t v13 = a1[14];
      a1[14] = a2[14];
      swift_bridgeObjectRelease(v13);
    }
    else
    {
      outlined destroy of InteractionLookupTable((uint64_t)(a1 + 12));
      *uint64_t v9 = *v10;
      a1[14] = a2[14];
    }
  }
  else
  {
    a1[14] = a2[14];
    *uint64_t v9 = *v10;
  }
  uint64_t v14 = a1[15];
  a1[15] = a2[15];
  swift_bridgeObjectRelease(v14);
  uint64_t v15 = a1[16];
  a1[16] = a2[16];
  swift_bridgeObjectRelease(v15);
  *(_OWORD *)(a1 + 17) = *(_OWORD *)(a2 + 17);
  return a1;
}

uint64_t getEnumTagSinglePayload for RecommenderModel(uint64_t a1, int a2)
{
  if (a2)
  {
    if (a2 < 0 && *(unsigned char *)(a1 + 152)) {
      int v2 = *(_DWORD *)a1 + 0x7FFFFFFF;
    }
    else {
      int v2 = (*(void *)a1 & 0xFFFFFFFF00000001) != 0 ? -1 : *(void *)a1 >> 1;
    }
  }
  else
  {
    int v2 = -1;
  }
  return (v2 + 1);
}

void storeEnumTagSinglePayload for RecommenderModel(uint64_t a1, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(a1 + 136) = 0;
    *(_OWORD *)(a1 + 120) = 0;
    *(_OWORD *)(a1 + 104) = 0;
    *(_OWORD *)(a1 + 88) = 0;
    *(_OWORD *)(a1 + 72) = 0;
    *(_OWORD *)(a1 + 56) = 0;
    *(_OWORD *)(a1 + 40) = 0;
    *(_OWORD *)(a1 + 24) = 0;
    *(_OWORD *)(a1 + 8) = 0;
    *(void *)a1 = a2 + 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(a1 + 152) = 1;
    }
  }
  else
  {
    if (a3 < 0) {
      *(unsigned char *)(a1 + 152) = 0;
    }
    if (a2) {
      *(void *)a1 = 2 * (a2 - 1);
    }
  }
}

uint64_t type metadata accessor for RecommenderModel(uint64_t a1, uint64_t a2)
{
  return swift_getGenericMetadata(a1, a2, &nominal type descriptor for RecommenderModel);
}

uint64_t type metadata completion function for Recommendation(uint64_t a1)
{
  uint64_t v1 = swift_checkMetadataState(319, *(void *)(a1 + 16));
  uint64_t v2 = v1;
  if (v3 <= 0x3F)
  {
    v7[0] = *(void *)(v1 - 8) + 64;
    uint64_t v4 = swift_checkMetadataState(319, *(void *)(a1 + 24));
    uint64_t v2 = v4;
    if (v5 <= 0x3F)
    {
      v7[1] = *(void *)(v4 - 8) + 64;
      v7[2] = (char *)&value witness table for Builtin.Int64 + 64;
      v7[3] = (char *)&value witness table for Builtin.Int64 + 64;
      uint64_t v2 = 0;
      swift_initStructMetadata(a1, 0, 4, v7, a1 + 32);
    }
  }
  return v2;
}

uint64_t *initializeBufferWithCopyOfBuffer for Recommendation(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(a3 + 24);
  uint64_t v5 = *(void *)(*(void *)(a3 + 16) - 8);
  uint64_t v6 = *(void *)(v4 - 8);
  int v7 = *(_DWORD *)(v6 + 80);
  unsigned int v8 = v7 | *(_DWORD *)(v5 + 80) & 0xF8;
  if (v8 > 7
    || ((v7 | *(_DWORD *)(v5 + 80)) & 0x100000) != 0
    || (unint64_t v9 = ~(unint64_t)v7,
        uint64_t v10 = *(void *)(v5 + 64) + v7,
        uint64_t v11 = *(void *)(v6 + 64),
        ((((v11 + (v9 & v10) + 7) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8) + 8 > 0x18))
  {
    uint64_t v18 = *a2;
    *a1 = *a2;
    swift_retain(v18);
    return (uint64_t *)(v18 + (((v8 | 7) + 16) & ~(v8 | 7)));
  }
  else
  {
    uint64_t v12 = v11 + 7;
    uint64_t v20 = *(void *)(a3 + 24);
    uint64_t v19 = *(void *)(v4 - 8);
    (*(void (**)(uint64_t *))(v5 + 16))(a1);
    unint64_t v13 = v9 & ((unint64_t)a1 + v10);
    unint64_t v14 = v9 & ((unint64_t)a2 + v10);
    (*(void (**)(unint64_t, unint64_t, uint64_t))(v19 + 16))(v13, v14, v20);
    uint64_t result = a1;
    uint64_t v16 = (void *)((v12 + v13) & 0xFFFFFFFFFFFFFFF8);
    uint64_t v17 = (void *)((v12 + v14) & 0xFFFFFFFFFFFFFFF8);
    *uint64_t v16 = *v17;
    *(void *)(((unint64_t)v16 + 15) & 0xFFFFFFFFFFFFFFF8) = *(void *)(((unint64_t)v17 + 15) & 0xFFFFFFFFFFFFFFF8);
  }
  return result;
}

uint64_t destroy for Recommendation(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(*(void *)(a2 + 16) - 8);
  (*(void (**)(uint64_t))(v2 + 8))(a1);
  return (*(uint64_t (**)(unint64_t))(*(void *)(*(void *)(a2 + 24) - 8) + 8))((*(unsigned __int8 *)(*(void *)(*(void *)(a2 + 24) - 8) + 80) + *(void *)(v2 + 64) + a1) & ~(unint64_t)*(unsigned __int8 *)(*(void *)(*(void *)(a2 + 24) - 8) + 80));
}

uint64_t initializeWithCopy for Recommendation(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(*(void *)(a3 + 16) - 8);
  (*(void (**)(uint64_t))(v4 + 16))(a1);
  uint64_t v5 = *(void *)(*(void *)(a3 + 24) - 8);
  uint64_t v6 = *(unsigned __int8 *)(v5 + 80);
  uint64_t v7 = v6 + *(void *)(v4 + 64);
  uint64_t v8 = ~v6;
  uint64_t v9 = v8 & (v7 + a1);
  uint64_t v10 = v8 & (a2 + v7);
  (*(void (**)(uint64_t, uint64_t))(v5 + 16))(v9, v10);
  uint64_t v11 = *(void *)(v5 + 64);
  uint64_t v12 = (void *)((v11 + v9 + 7) & 0xFFFFFFFFFFFFFFF8);
  unint64_t v13 = (void *)((v10 + v11 + 7) & 0xFFFFFFFFFFFFFFF8);
  *uint64_t v12 = *v13;
  *(void *)(((unint64_t)v12 + 15) & 0xFFFFFFFFFFFFFFF8) = *(void *)(((unint64_t)v13 + 15) & 0xFFFFFFFFFFFFFFF8);
  return a1;
}

uint64_t assignWithCopy for Recommendation(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(*(void *)(a3 + 16) - 8);
  (*(void (**)(uint64_t))(v4 + 24))(a1);
  uint64_t v5 = *(void *)(*(void *)(a3 + 24) - 8);
  uint64_t v6 = *(unsigned __int8 *)(v5 + 80);
  uint64_t v7 = v6 + *(void *)(v4 + 64);
  uint64_t v8 = ~v6;
  uint64_t v9 = v8 & (v7 + a1);
  uint64_t v10 = v8 & (a2 + v7);
  (*(void (**)(uint64_t, uint64_t))(v5 + 24))(v9, v10);
  uint64_t v11 = *(void *)(v5 + 64);
  uint64_t v12 = (void *)((v11 + v9 + 7) & 0xFFFFFFFFFFFFFFF8);
  unint64_t v13 = (void *)((v10 + v11 + 7) & 0xFFFFFFFFFFFFFFF8);
  *uint64_t v12 = *v13;
  *(void *)(((unint64_t)v12 + 15) & 0xFFFFFFFFFFFFFFF8) = *(void *)(((unint64_t)v13 + 15) & 0xFFFFFFFFFFFFFFF8);
  return a1;
}

uint64_t initializeWithTake for Recommendation(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(*(void *)(a3 + 16) - 8);
  (*(void (**)(uint64_t))(v4 + 32))(a1);
  uint64_t v5 = *(void *)(*(void *)(a3 + 24) - 8);
  uint64_t v6 = *(unsigned __int8 *)(v5 + 80);
  uint64_t v7 = v6 + *(void *)(v4 + 64);
  uint64_t v8 = ~v6;
  uint64_t v9 = v8 & (v7 + a1);
  uint64_t v10 = v8 & (a2 + v7);
  (*(void (**)(uint64_t, uint64_t))(v5 + 32))(v9, v10);
  uint64_t v11 = *(void *)(v5 + 64);
  uint64_t v12 = (void *)((v11 + v9 + 7) & 0xFFFFFFFFFFFFFFF8);
  unint64_t v13 = (void *)((v10 + v11 + 7) & 0xFFFFFFFFFFFFFFF8);
  *uint64_t v12 = *v13;
  *(void *)(((unint64_t)v12 + 15) & 0xFFFFFFFFFFFFFFF8) = *(void *)(((unint64_t)v13 + 15) & 0xFFFFFFFFFFFFFFF8);
  return a1;
}

uint64_t assignWithTake for Recommendation(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(*(void *)(a3 + 16) - 8);
  (*(void (**)(uint64_t))(v4 + 40))(a1);
  uint64_t v5 = *(void *)(*(void *)(a3 + 24) - 8);
  uint64_t v6 = *(unsigned __int8 *)(v5 + 80);
  uint64_t v7 = v6 + *(void *)(v4 + 64);
  uint64_t v8 = ~v6;
  uint64_t v9 = v8 & (v7 + a1);
  uint64_t v10 = v8 & (a2 + v7);
  (*(void (**)(uint64_t, uint64_t))(v5 + 40))(v9, v10);
  uint64_t v11 = *(void *)(v5 + 64);
  uint64_t v12 = (void *)((v11 + v9 + 7) & 0xFFFFFFFFFFFFFFF8);
  unint64_t v13 = (void *)((v10 + v11 + 7) & 0xFFFFFFFFFFFFFFF8);
  *uint64_t v12 = *v13;
  *(void *)(((unint64_t)v12 + 15) & 0xFFFFFFFFFFFFFFF8) = *(void *)(((unint64_t)v13 + 15) & 0xFFFFFFFFFFFFFFF8);
  return a1;
}

uint64_t getEnumTagSinglePayload for Recommendation(unsigned int *a1, unsigned int a2, uint64_t a3)
{
  uint64_t v3 = *(void *)(a3 + 16);
  uint64_t v4 = *(void *)(a3 + 24);
  uint64_t v5 = *(void *)(v3 - 8);
  unsigned int v6 = *(_DWORD *)(v5 + 84);
  uint64_t v7 = *(void *)(v4 - 8);
  unsigned int v8 = *(_DWORD *)(v7 + 84);
  unsigned int v9 = v6;
  if (v8 > v6) {
    unsigned int v9 = *(_DWORD *)(v7 + 84);
  }
  uint64_t result = 0;
  if (a2)
  {
    unint64_t v11 = ~(unint64_t)*(unsigned __int8 *)(v7 + 80);
    uint64_t v12 = *(void *)(v5 + 64) + *(unsigned __int8 *)(v7 + 80);
    if (v9 >= a2)
    {
LABEL_19:
      if (v9)
      {
        if (v6 >= v8)
        {
          uint64_t v21 = v6;
          uint64_t v4 = v3;
        }
        else
        {
          a1 = (unsigned int *)(v11 & ((unint64_t)a1 + v12));
          uint64_t v21 = v8;
        }
        return __swift_getEnumTagSinglePayload((uint64_t)a1, v21, v4);
      }
    }
    else
    {
      unint64_t v13 = (((((v11 & v12) + *(void *)(v7 + 64) + 7) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8) + 8;
      int v14 = a2 - v9 + 1;
      unsigned int v15 = 2;
      if ((v13 & 0xFFFFFFF8) == 0) {
        unsigned int v15 = v14;
      }
      unsigned int v16 = 1;
      if (v15 >= 0x100) {
        unsigned int v16 = 2 * (v15 >= 0x10000) + 2;
      }
      uint64_t v17 = 0;
      if (v15 >= 2) {
        uint64_t v17 = v16;
      }
      switch(v17)
      {
        case 0:
          goto LABEL_19;
        case 1:
          int v18 = *((unsigned __int8 *)a1 + v13);
          goto LABEL_15;
        case 2:
          int v18 = *(unsigned __int16 *)((char *)a1 + v13);
          goto LABEL_15;
        case 3:
          BUG();
        case 4:
          int v18 = *(unsigned int *)((char *)a1 + v13);
LABEL_15:
          if (!v18) {
            goto LABEL_19;
          }
          int v19 = v18 - 1;
          unsigned int v20 = 0;
          if ((v13 & 0xFFFFFFF8) != 0)
          {
            int v19 = 0;
            unsigned int v20 = *a1;
          }
          uint64_t result = v9 + (v19 | v20) + 1;
          break;
      }
    }
  }
  return result;
}

uint64_t storeEnumTagSinglePayload for Recommendation(_DWORD *a1, uint64_t a2, unsigned int a3, uint64_t a4)
{
  uint64_t result = *(void *)(a4 + 16);
  uint64_t v7 = *(void *)(a4 + 24);
  uint64_t v8 = *(void *)(result - 8);
  unsigned int v9 = *(_DWORD *)(v8 + 84);
  uint64_t v10 = *(void *)(v7 - 8);
  uint64_t v11 = *(unsigned int *)(v10 + 84);
  unsigned int v12 = v9;
  if (v11 > v9) {
    unsigned int v12 = *(_DWORD *)(v10 + 84);
  }
  uint64_t v13 = *(unsigned __int8 *)(v10 + 80);
  uint64_t v14 = *(void *)(v8 + 64) + v13;
  uint64_t v15 = ~v13;
  unint64_t v16 = (((((v15 & v14) + *(void *)(v10 + 64) + 7) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8) + 8;
  unsigned int v17 = 0;
  int v18 = 1;
  if (v12 < a3)
  {
    int v19 = a3 - v12 + 1;
    unsigned int v20 = 2;
    if (!v16) {
      unsigned int v20 = v19;
    }
    int v21 = 2 * (v20 >= 0x10000) + 2;
    if (v20 < 0x100) {
      int v21 = 1;
    }
    unsigned int v17 = 0;
    if (v20 >= 2) {
      unsigned int v17 = v21;
    }
  }
  if (a2 > v12)
  {
    if (v16)
    {
      __bzero(a1, v16);
      *a1 = a2 + ~v12;
    }
    else
    {
      int v18 = a2 - v12;
    }
    uint64_t result = v17;
    switch(v17)
    {
      case 0u:
        return result;
      case 1u:
        *((unsigned char *)a1 + v16) = v18;
        return result;
      case 2u:
        *(_WORD *)((char *)a1 + v16) = v18;
        return result;
      case 3u:
        goto LABEL_28;
      case 4u:
        *(_DWORD *)((char *)a1 + v16) = v18;
        return result;
    }
  }
  switch(v17)
  {
    case 0u:
      break;
    case 1u:
      *((unsigned char *)a1 + v16) = 0;
      break;
    case 2u:
      *(_WORD *)((char *)a1 + v16) = 0;
      break;
    case 3u:
LABEL_28:
      BUG();
    case 4u:
      *(_DWORD *)((char *)a1 + v16) = 0;
      break;
  }
  if (a2)
  {
    if (v9 >= v11)
    {
      uint64_t v22 = (uint64_t)a1;
      uint64_t v11 = v9;
      uint64_t v7 = result;
    }
    else
    {
      uint64_t v22 = v15 & ((unint64_t)a1 + v14);
    }
    return __swift_storeEnumTagSinglePayload(v22, a2, v11, v7);
  }
  return result;
}

uint64_t type metadata accessor for Recommendation(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for Recommendation);
}

uint64_t Dictionary<>.updateValue(tensor:forKey:prefix:)(uint64_t a1, uint64_t a2, void *a3, uint64_t a4, void *a5)
{
  uint64_t v49 = a5;
  uint64_t v46 = a4;
  uint64_t v48 = a3;
  uint64_t v7 = type metadata accessor for TensorShape(0);
  uint64_t v39 = *(void *)(v7 - 8);
  int64_t v8 = *(void *)(v39 + 64);
  unsigned int v9 = alloca(v8);
  uint64_t v10 = alloca(v8);
  uint64_t v37 = v5;
  v11._uint64_t countAndFlagsBits = a2;
  v11._char object = v48;
  uint64_t v43 = Dictionary<>.getTensorNames(forKey:prefix:)(v11, v46, v49);
  uint64_t v48 = v12;
  uint64_t v40 = v13;
  uint64_t v44 = v14;
  uint64_t v38 = a1;
  Tensor.shape.getter();
  uint64_t v15 = lazy protocol witness table accessor for type TensorShape and conformance TensorShape();
  uint64_t v16 = dispatch thunk of Collection.count.getter(v7, v15);
  uint64_t v42 = v7;
  uint64_t v47 = &v34;
  if (v16)
  {
    uint64_t v17 = v16;
    uint64_t v45 = _swiftEmptyArrayStorage;
    int64_t v18 = 0;
    if (v16 > 0) {
      int64_t v18 = v16;
    }
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v18, 0);
    uint64_t v49 = v45;
    dispatch thunk of Collection.startIndex.getter(v7, v15);
    if (v17 < 0) {
      BUG();
    }
    uint64_t v19 = v15;
    uint64_t v46 = v17;
    uint64_t v20 = v42;
    int v21 = v49;
    do
    {
      uint64_t v22 = (void (*)(unsigned char *, void))dispatch thunk of Collection.subscript.read(v35, v36, v20, v19);
      uint64_t v49 = *v23;
      v22(v35, 0);
      uint64_t v45 = v21;
      uint64_t v24 = v19;
      unint64_t v25 = v21[2];
      unint64_t v26 = v21[3];
      int64_t v27 = v25 + 1;
      if (v26 >> 1 <= v25)
      {
        uint64_t v41 = v24;
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v26 >= 2, v27, 1);
        uint64_t v24 = v41;
        int v21 = v45;
      }
      double v28 = (double)(int)v49;
      v21[2] = v27;
      *(double *)&v21[v25 + 4] = v28;
      uint64_t v19 = v24;
      dispatch thunk of Collection.formIndex(after:)(v36, v20, v24);
      --v46;
    }
    while (v46);
  }
  else
  {
    int v21 = _swiftEmptyArrayStorage;
  }
  uint64_t v29 = (uint64_t)v48;
  uint64_t v30 = v43;
  uint64_t v31 = v44;
  (*(void (**)(uint64_t *, uint64_t))(v39 + 8))(v47, v42);
  specialized Dictionary._Variant.setValue(_:forKey:)((uint64_t)v21, v40, v31);
  swift_bridgeObjectRelease(v31);
  uint64_t v32 = Tensor.scalars<A>(as:)(&type metadata for Double, &type metadata for Double, &protocol witness table for Double);
  specialized Dictionary._Variant.setValue(_:forKey:)(v32, v30, v29);
  return swift_bridgeObjectRelease(v29);
}

uint64_t Dictionary<>.getTensorNames(forKey:prefix:)(Swift::String a1, uint64_t a2, void *a3)
{
  char object = a1._object;
  uint64_t countAndFlagsBits = a1._countAndFlagsBits;
  if (a3)
  {
    swift_bridgeObjectRetain(a3);
    v5._uint64_t countAndFlagsBits = 46;
    v5._char object = (void *)0xE100000000000000;
    String.append(_:)(v5);
    v5._uint64_t countAndFlagsBits = countAndFlagsBits;
    v5._char object = object;
    String.append(_:)(v5);
    uint64_t countAndFlagsBits = a2;
    char object = a3;
  }
  else
  {
    swift_bridgeObjectRetain(a1._object);
  }
  swift_bridgeObjectRetain(object);
  v6._uint64_t countAndFlagsBits = 0x65706168732ELL;
  v6._char object = (void *)0xE600000000000000;
  String.append(_:)(v6);
  return countAndFlagsBits;
}

uint64_t Dictionary<>.tensor(forKey:prefix:)(Swift::String a1, uint64_t a2, void *a3, uint64_t a4)
{
  uint64_t v58 = v5;
  uint64_t v60 = a3;
  uint64_t v56 = v4;
  int64_t v8 = *(void *)(*(void *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TensorShape?)
                             - 8)
                 + 64);
  unsigned int v9 = alloca(v8);
  uint64_t v10 = alloca(v8);
  uint64_t v53 = (uint64_t)&v53;
  uint64_t v60 = (void *)Dictionary<>.getTensorNames(forKey:prefix:)(a1, a2, v60);
  uint64_t v12 = v11;
  LOBYTE(a2) = v13;
  uint64_t v15 = specialized Dictionary.subscript.getter(v14, v13, a4);
  swift_bridgeObjectRelease(a2);
  if (!v15)
  {
    char v32 = v12;
LABEL_24:
    swift_bridgeObjectRelease(v32);
    uint64_t v41 = type metadata accessor for Tensor(0);
    return __swift_storeEnumTagSinglePayload(v56, 1, 1, v41);
  }
  uint64_t v59 = v15;
  uint64_t v16 = specialized Dictionary.subscript.getter((uint64_t)v60, v12, a4);
  swift_bridgeObjectRelease(v12);
  if (!v16)
  {
    char v32 = v59;
    goto LABEL_24;
  }
  uint64_t v17 = v59;
  int64_t v18 = *(char **)(v59 + 16);
  if (!v18
    || (__m128d v19 = (__m128d)*(unint64_t *)(v59 + 32), v19.f64[0] < 1.0)
    || (__m128d v20 = _mm_or_pd(_mm_and_pd((__m128d)xmmword_3474C0, v19), (__m128d)xmmword_34EAE0),
        v20.f64[0] = v20.f64[0] + v19.f64[0],
        _mm_round_sd(v20, v20, 11).f64[0] != v19.f64[0]))
  {
LABEL_21:
    swift_bridgeObjectRelease(v16);
    uint64_t v33 = specialized _arrayForceCast<A, B>(_:)(v17);
    swift_bridgeObjectRelease(v17);
    uint64_t v34 = lazy protocol witness table accessor for type MLCreateError and conformance MLCreateError();
    swift_allocError(&type metadata for MLCreateError, v34, 0, 0);
    static MLCreateError.invalidTensorDimensions(value:)((uint64_t)v33);
    uint64_t v35 = v33;
    swift_bridgeObjectRelease((_BYTE)v33);
    return swift_willThrow(v35, v34, v36, v37, v38, v39);
  }
  if (v18 != (unsigned char *)&dword_0 + 1)
  {
    uint64_t v21 = 5;
    do
    {
      uint64_t v22 = v21 - 4 + 1;
      if (__OFADD__(1, v21 - 4)) {
        BUG();
      }
      __m128d v23 = (__m128d)*(unint64_t *)(v59 + 8 * v21);
      if (v23.f64[0] < 1.0) {
        goto LABEL_21;
      }
      __m128d v24 = _mm_or_pd(_mm_and_pd(v23, (__m128d)xmmword_3474C0), (__m128d)xmmword_34EAE0);
      v24.f64[0] = v24.f64[0] + v23.f64[0];
      if (_mm_round_sd(v24, v24, 11).f64[0] != v23.f64[0]) {
        goto LABEL_21;
      }
      ++v21;
    }
    while ((char *)v22 != v18);
  }
  uint64_t v54 = v16;
  uint64_t v57 = _swiftEmptyArrayStorage;
  unint64_t v25 = 0;
  uint64_t v60 = v18;
  specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, (int64_t)v18, 0);
  unint64_t v26 = v60;
  uint64_t v27 = v59;
  double v28 = v57;
  do
  {
    double v29 = *(double *)(v27 + 8 * (void)v25 + 32);
    if ((~*(void *)&v29 & 0x7FF0000000000000) == 0) {
      BUG();
    }
    if (v29 <= -9.223372036854778e18) {
      BUG();
    }
    if (v29 >= 9.223372036854776e18) {
      BUG();
    }
    uint64_t v57 = v28;
    unint64_t v30 = v28[2];
    unint64_t v31 = v28[3];
    if (v31 >> 1 <= v30)
    {
      double v55 = v29;
      specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v31 >= 2, v30 + 1, 1);
      double v29 = v55;
      unint64_t v26 = v60;
      uint64_t v27 = v59;
      double v28 = v57;
    }
    unint64_t v25 = (char *)v25 + 1;
    uint64_t v28[2] = v30 + 1;
    v28[v30 + 4] = (int)v29;
  }
  while (v26 != v25);
  swift_bridgeObjectRelease(v27);
  uint64_t v42 = v28[2];
  uint64_t v43 = 1;
  if (v42)
  {
    for (uint64_t i = 0; i != v42; ++i)
    {
      unint64_t v45 = v43;
      v43 *= v28[i + 4];
      if (!is_mul_ok(v28[i + 4], v45)) {
        BUG();
      }
    }
  }
  uint64_t v46 = v54;
  if (*(void *)(v54 + 16) != v43)
  {
    uint64_t v51 = *(void *)(v54 + 16);
    swift_bridgeObjectRelease(v54);
    swift_release();
    uint64_t v52 = lazy protocol witness table accessor for type MLCreateError and conformance MLCreateError();
    swift_allocError(&type metadata for MLCreateError, v52, 0, 0);
    uint64_t v35 = (void *)v43;
    uint64_t v34 = v51;
    static MLCreateError.invalidTensorSize(expected:actual:)(v43, v51, -9.223372036854778e18, 9.223372036854776e18);
    return swift_willThrow(v35, v34, v36, v37, v38, v39);
  }
  uint64_t v47 = v53;
  TensorShape.init(_:)(v28, -9.223372036854778e18, 9.223372036854776e18);
  uint64_t v48 = type metadata accessor for TensorShape(0);
  __swift_storeEnumTagSinglePayload(v47, 0, 1, v48);
  uint64_t v49 = v56;
  Array<A>.floatTensor(shape:)(v47, v46);
  swift_bridgeObjectRelease(v46);
  outlined destroy of TensorShape?(v47);
  uint64_t v50 = type metadata accessor for Tensor(0);
  return __swift_storeEnumTagSinglePayload(v49, 0, 1, v50);
}

uint64_t static MLCreateError.invalidTensorDimensions(value:)(uint64_t a1)
{
  uint64_t v2 = v1;
  _StringGuts.grow(_:)(29);
  swift_bridgeObjectRelease(0);
  *(void *)&long long v7 = 0xD00000000000001BLL;
  *((void *)&v7 + 1) = "Invalid tensor size: expected " + 0x8000000000000000;
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Numeric);
  v4._uint64_t countAndFlagsBits = Array.description.getter(a1, v3);
  char object = (char)v4._object;
  String.append(_:)(v4);
  uint64_t result = swift_bridgeObjectRelease(object);
  *(_OWORD *)uint64_t v2 = v7;
  *(_OWORD *)(v2 + 16) = 0;
  *(_OWORD *)(v2 + 32) = 0;
  *(unsigned char *)(v2 + 48) = 0;
  return result;
}

uint64_t static MLCreateError.invalidTensorSize(expected:actual:)()
{
  uint64_t v1 = v0;
  _StringGuts.grow(_:)(43);
  swift_bridgeObjectRelease(0xE000000000000000);
  *(void *)&long long v8 = 0xD00000000000001ELL;
  *((void *)&v8 + 1) = "d validation should use files." + 0x8000000000000000;
  v2._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter(&type metadata for Int, &protocol witness table for Int);
  char object = v2._object;
  String.append(_:)(v2);
  swift_bridgeObjectRelease(object);
  v4._uint64_t countAndFlagsBits = 0x6C6175746361202CLL;
  v4._char object = (void *)0xE900000000000020;
  String.append(_:)(v4);
  v5._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter(&type metadata for Int, &protocol witness table for Int);
  Swift::String v6 = v5._object;
  String.append(_:)(v5);
  uint64_t result = swift_bridgeObjectRelease(v6);
  *(_OWORD *)uint64_t v1 = v8;
  *(_OWORD *)(v1 + 16) = 0;
  *(_OWORD *)(v1 + 32) = 0;
  *(unsigned char *)(v1 + 48) = 0;
  return result;
}

uint64_t lazy protocol witness table accessor for type TensorShape and conformance TensorShape()
{
  uint64_t result = lazy protocol witness table cache variable for type TensorShape and conformance TensorShape;
  if (!lazy protocol witness table cache variable for type TensorShape and conformance TensorShape)
  {
    uint64_t v1 = type metadata accessor for TensorShape(255);
    uint64_t result = swift_getWitnessTable(&protocol conformance descriptor for TensorShape, v1);
    lazy protocol witness table cache variable for type TensorShape and conformance TensorShape = result;
  }
  return result;
}

uint64_t outlined destroy of TensorShape?(uint64_t a1)
{
  uint64_t v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TensorShape?);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v1 - 8) + 8))(a1, v1);
  return a1;
}

char *static _FeatureUtilities.selectFeaturesFromTrainingData(trainingData:targetColumn:featureColumns:)(uint64_t a1, uint64_t a2, void *a3, uint64_t a4)
{
  uint64_t v6 = DataFrame.columns.getter(a1, a2);
  char v7 = v6;
  MLE23validateContainsColumns_7contextySaySSG_SStKFSSAA9fG54Vcfu_33_06ca46402338970f1b3e0a01942d815dAISSTf3nnnpk_nTf1cn_n = _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSay11TabularData9AnyColumnVG_SSs5NeverOTg504_s11d75Data0B5FrameV8CreateMLE23validateContainsColumns_7contextySaySSG_SStKFSSAA9fG54Vcfu_33_06ca46402338970f1b3e0a01942d815dAISSTf3nnnpk_nTf1cn_n(v6);
  swift_bridgeObjectRelease(v7);
  uint64_t v9 = specialized Collection<>.firstIndex(of:)(a2, (uint64_t)a3, MLE23validateContainsColumns_7contextySaySSG_SStKFSSAA9fG54Vcfu_33_06ca46402338970f1b3e0a01942d815dAISSTf3nnnpk_nTf1cn_n);
  if (v10)
  {
    swift_bridgeObjectRelease((_BYTE)MLE23validateContainsColumns_7contextySaySSG_SStKFSSAA9fG54Vcfu_33_06ca46402338970f1b3e0a01942d815dAISSTf3nnnpk_nTf1cn_n);
    _StringGuts.grow(_:)(53);
    v18._uint64_t countAndFlagsBits = 0x6320746567726154;
    v18._char object = (void *)0xEF27206E6D756C6FLL;
    String.append(_:)(v18);
    v18._uint64_t countAndFlagsBits = a2;
    v18._char object = a3;
    String.append(_:)(v18);
    v18._char object = "Invalid tensor dimensions: " + 0x8000000000000000;
    v18._uint64_t countAndFlagsBits = 0xD000000000000024;
    String.append(_:)(v18);
    uint64_t v17 = (char *)0xE000000000000000;
    uint64_t v19 = lazy protocol witness table accessor for type MLCreateError and conformance MLCreateError();
    swift_allocError(&type metadata for MLCreateError, v19, 0, 0);
    *(void *)uint64_t v20 = 0;
LABEL_9:
    *(void *)(v20 + 8) = v17;
    *(_OWORD *)(v20 + 16) = 0;
    *(_OWORD *)(v20 + 32) = 0;
    *(unsigned char *)(v20 + 48) = 1;
    swift_willThrow(&type metadata for MLCreateError, v19, v20, v21, v22, v23);
    return v17;
  }
  unint64_t v11 = v9;
  if (!swift_isUniquelyReferenced_nonNull_native(MLE23validateContainsColumns_7contextySaySSG_SStKFSSAA9fG54Vcfu_33_06ca46402338970f1b3e0a01942d815dAISSTf3nnnpk_nTf1cn_n)) {
    MLE23validateContainsColumns_7contextySaySSG_SStKFSSAA9fG54Vcfu_33_06ca46402338970f1b3e0a01942d815dAISSTf3nnnpk_nTf1cn_n = specialized _ArrayBuffer._consumeAndCreateNew()((uint64_t)MLE23validateContainsColumns_7contextySaySSG_SStKFSSAA9fG54Vcfu_33_06ca46402338970f1b3e0a01942d815dAISSTf3nnnpk_nTf1cn_n);
  }
  unint64_t v12 = MLE23validateContainsColumns_7contextySaySSG_SStKFSSAA9fG54Vcfu_33_06ca46402338970f1b3e0a01942d815dAISSTf3nnnpk_nTf1cn_n[2];
  if (v11 >= v12) {
    BUG();
  }
  unint64_t v13 = v12 - 1;
  uint64_t v14 = v13 - v11;
  uint64_t v15 = 2 * v11;
  uint64_t v16 = MLE23validateContainsColumns_7contextySaySSG_SStKFSSAA9fG54Vcfu_33_06ca46402338970f1b3e0a01942d815dAISSTf3nnnpk_nTf1cn_n[v15 + 5];
  specialized UnsafeMutablePointer.moveInitialize(from:count:)((char *)&MLE23validateContainsColumns_7contextySaySSG_SStKFSSAA9fG54Vcfu_33_06ca46402338970f1b3e0a01942d815dAISSTf3nnnpk_nTf1cn_n[v15 + 6], v14, (char *)&MLE23validateContainsColumns_7contextySaySSG_SStKFSSAA9fG54Vcfu_33_06ca46402338970f1b3e0a01942d815dAISSTf3nnnpk_nTf1cn_n[v15 + 4]);
  MLE23validateContainsColumns_7contextySaySSG_SStKFSSAA9fG54Vcfu_33_06ca46402338970f1b3e0a01942d815dAISSTf3nnnpk_nTf1cn_n[2] = v13;
  swift_bridgeObjectRelease(v16);
  uint64_t v17 = (char *)static _FeatureUtilities.selectFeatures(from:select:)(MLE23validateContainsColumns_7contextySaySSG_SStKFSSAA9fG54Vcfu_33_06ca46402338970f1b3e0a01942d815dAISSTf3nnnpk_nTf1cn_n, a4);
  swift_bridgeObjectRelease((_BYTE)MLE23validateContainsColumns_7contextySaySSG_SStKFSSAA9fG54Vcfu_33_06ca46402338970f1b3e0a01942d815dAISSTf3nnnpk_nTf1cn_n);
  if (!*((void *)v17 + 2))
  {
    swift_bridgeObjectRelease((_BYTE)v17);
    uint64_t v19 = lazy protocol witness table accessor for type MLCreateError and conformance MLCreateError();
    swift_allocError(&type metadata for MLCreateError, v19, 0, 0);
    *(void *)uint64_t v20 = 0xD000000000000038;
    uint64_t v17 = " in the given table." + 0x8000000000000000;
    goto LABEL_9;
  }
  return v17;
}

void *static _FeatureUtilities.selectFeatures(from:select:)(void *a1, uint64_t a2)
{
  Swift::String v2 = a1;
  if (!a2)
  {
    swift_bridgeObjectRetain((_BYTE)a1);
    return v2;
  }
  uint64_t v26 = *(void *)(a2 + 16);
  if (!v26) {
    return _swiftEmptyArrayStorage;
  }
  uint64_t v32 = a1[2];
  uint64_t v27 = a2 + 32;
  char v28 = a2;
  swift_bridgeObjectRetain(a2);
  double v29 = (void **)(a1 + 9);
  Swift::String v2 = _swiftEmptyArrayStorage;
  for (uint64_t i = 0; i != v26; ++i)
  {
    uint64_t v30 = (uint64_t)v2;
    uint64_t v4 = *(void *)(v27 + 16 * i);
    Swift::String v5 = *(void **)(v27 + 16 * i + 8);
    if (!v32)
    {
LABEL_14:
      swift_bridgeObjectRetain((_BYTE)v5);
      _StringGuts.grow(_:)(66);
      v12._uint64_t countAndFlagsBits = 0x27206E6D756C6F43;
      v12._char object = (void *)0xE800000000000000;
      String.append(_:)(v12);
      v12._uint64_t countAndFlagsBits = v4;
      v12._char object = v5;
      String.append(_:)(v12);
      swift_bridgeObjectRelease((_BYTE)v5);
      v12._uint64_t countAndFlagsBits = 0xD000000000000038;
      v12._char object = "ven training data frame." + 0x8000000000000000;
      String.append(_:)(v12);
      unsigned __int8 v33 = static os_log_type_t.error.getter(0xD000000000000038, "ven training data frame." + 0x8000000000000000);
      uint64_t v13 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Any>);
      uint64_t v14 = (void *)swift_allocObject(v13, 64, 7);
      void v14[2] = 1;
      v14[3] = 2;
      v14[7] = &type metadata for String;
      v14[4] = 0;
      v14[5] = 0xE000000000000000;
      swift_bridgeObjectRetain(0);
      print(_:separator:terminator:)(v14, 32, 0xE100000000000000, 10, 0xE100000000000000);
      swift_bridgeObjectRelease((_BYTE)v14);
      type metadata accessor for OS_os_log();
      uint64_t v15 = (void *)static OS_os_log.default.getter(0);
      uint64_t v16 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<CVarArg>);
      uint64_t v17 = (void *)swift_allocObject(v16, 72, 7);
      long long v17[2] = 1;
      v17[3] = 2;
      uint64_t v17[7] = &type metadata for String;
      v17[8] = lazy protocol witness table accessor for type String and conformance String();
      _OWORD v17[4] = 0;
      v17[5] = 0xE000000000000000;
      swift_bridgeObjectRetain(0);
      os_log(_:dso:log:type:_:)("%@\n", 3, 2, &dword_0, v15, v33, v17);
      swift_bridgeObjectRelease(0);

      swift_bridgeObjectRelease((_BYTE)v17);
      Swift::String v2 = (void *)v30;
      continue;
    }
    uint64_t v6 = a1[4];
    char v7 = (void *)a1[5];
    if ((v6 != v4 || v7 != v5)
      && (_stringCompareWithSmolCheck(_:_:expecting:)(v6, v7, *(void *)(v27 + 16 * i), *(void *)(v27 + 16 * i + 8), 0) & 1) == 0)
    {
      if (v32 == 1) {
        goto LABEL_14;
      }
      uint64_t v18 = a1[6];
      uint64_t v19 = (void *)a1[7];
      if ((v18 != v4 || v19 != v5) && (_stringCompareWithSmolCheck(_:_:expecting:)(v18, v19, v4, v5, 0) & 1) == 0)
      {
        if (v32 == 2) {
          goto LABEL_14;
        }
        uint64_t v20 = v29;
        uint64_t v21 = 2;
        while (1)
        {
          if (__OFADD__(1, v21++)) {
            BUG();
          }
          uint64_t v23 = (uint64_t)*(v20 - 1);
          __m128d v24 = *v20;
          if (v23 == v4 && v24 == v5) {
            break;
          }
          if (_stringCompareWithSmolCheck(_:_:expecting:)(v23, v24, v4, v5, 0)) {
            break;
          }
          v20 += 2;
          if (v21 == v32) {
            goto LABEL_14;
          }
        }
      }
    }
    swift_bridgeObjectRetain((_BYTE)v5);
    long long v8 = (void *)v30;
    if (!swift_isUniquelyReferenced_nonNull_native(v30)) {
      long long v8 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(void *)(v30 + 16) + 1, 1, v30);
    }
    unint64_t v9 = v8[2];
    char v10 = v8;
    if (v8[3] >> 1 <= v9) {
      char v10 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(v8[3] >= 2uLL, v9 + 1, 1, (uint64_t)v8);
    }
    _OWORD v10[2] = v9 + 1;
    Swift::String v2 = v10;
    uint64_t v11 = 2 * v9;
    v10[v11 + 4] = v4;
    v10[v11 + 5] = v5;
  }
  swift_bridgeObjectRelease(v28);
  return v2;
}

char static MLBoundingBoxCoordinatesOrigin.== infix(_:_:)(unsigned char *a1, unsigned char *a2)
{
  return *a2 ^ *a1 ^ 1;
}

void MLBoundingBoxCoordinatesOrigin.hash(into:)()
{
  Hasher._combine(_:)(*v0);
}

Swift::Int MLBoundingBoxCoordinatesOrigin.hashValue.getter()
{
  Swift::UInt v1 = *v0;
  Hasher.init(_seed:)(0);
  Hasher._combine(_:)(v1);
  return Hasher._finalize()();
}

char protocol witness for static Equatable.== infix(_:_:) in conformance MLBoundingBoxCoordinatesOrigin(unsigned char *a1, unsigned char *a2)
{
  return static MLBoundingBoxCoordinatesOrigin.== infix(_:_:)(a1, a2);
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance MLBoundingBoxCoordinatesOrigin()
{
  return MLBoundingBoxCoordinatesOrigin.hashValue.getter();
}

void protocol witness for Hashable.hash(into:) in conformance MLBoundingBoxCoordinatesOrigin()
{
}

uint64_t base witness table accessor for Equatable in MLBoundingBoxCoordinatesOrigin()
{
  return lazy protocol witness table accessor for type MLBoundingBoxCoordinatesOrigin and conformance MLBoundingBoxCoordinatesOrigin();
}

uint64_t lazy protocol witness table accessor for type MLBoundingBoxCoordinatesOrigin and conformance MLBoundingBoxCoordinatesOrigin()
{
  uint64_t result = lazy protocol witness table cache variable for type MLBoundingBoxCoordinatesOrigin and conformance MLBoundingBoxCoordinatesOrigin;
  if (!lazy protocol witness table cache variable for type MLBoundingBoxCoordinatesOrigin and conformance MLBoundingBoxCoordinatesOrigin)
  {
    uint64_t result = swift_getWitnessTable(&protocol conformance descriptor for MLBoundingBoxCoordinatesOrigin, &type metadata for MLBoundingBoxCoordinatesOrigin);
    lazy protocol witness table cache variable for type MLBoundingBoxCoordinatesOrigin and conformance MLBoundingBoxCoordinatesOrigin = result;
  }
  return result;
}

ValueMetadata *type metadata accessor for MLBoundingBoxCoordinatesOrigin()
{
  return &type metadata for MLBoundingBoxCoordinatesOrigin;
}

uint64_t static MLStyleTransfer.__Defaults.maxIterations.getter()
{
  return 500;
}

uint64_t static MLStyleTransfer.__Defaults.textelDensity.getter()
{
  return 256;
}

uint64_t static MLStyleTransfer.__Defaults.styleStrength.getter()
{
  return 5;
}

uint64_t static MLStyleTransfer.__Constants.textelDensityRange.getter()
{
  return 64;
}

uint64_t static MLStyleTransfer.__Constants.styleStrengthRange.getter()
{
  return 1;
}

uint64_t static MLStyleTransfer.__Constants.inferenceHeight.getter()
{
  return 512;
}

uint64_t static MLStyleTransfer.__Constants.inferenceWidth.getter()
{
  return 512;
}

uint64_t static MLStyleTransfer.__Constants.inferenceChannels.getter()
{
  return 3;
}

ValueMetadata *type metadata accessor for MLStyleTransfer.__Constants()
{
  return &type metadata for MLStyleTransfer.__Constants;
}

ValueMetadata *type metadata accessor for MLStyleTransfer.__Defaults()
{
  return &type metadata for MLStyleTransfer.__Defaults;
}

id specialized EventCollector.getLast<A>(metric:type:)()
{
  id v1 = *(id *)(v0 + 16);
  id v2 = specialized NSLocking.withLock<A>(_:)((void (*)(void))partial apply for specialized closure #1 in EventCollector.getLast<A>(metric:type:));

  return v2;
}

unsigned __int8 specialized NSLocking.withLock<A>(_:)(void (*a1)(void))
{
  [v2 lock];
  a1();
  if (v1) {
    return [v2 unlock];
  }
  [v2 unlock];
  return v4;
}

id specialized NSLocking.withLock<A>(_:)(void (*a1)(void))
{
  [v2 lock];
  a1();
  if (v1) {
    return [v2 unlock];
  }
  [v2 unlock];
  return (id)v4;
}

{
  void *v1;

  [v1 lock];
  a1();
  return [v1 unlock];
}

uint64_t specialized BidirectionalCollection.lastIndex(where:)(uint64_t (*a1)(uint64_t), uint64_t a2, uint64_t a3)
{
  uint64_t v4 = a3;
  uint64_t v5 = *(void *)(a3 + 16);
  LOBYTE(a3) = 1;
  if (!v5) {
    return 0;
  }
  uint64_t v6 = *(void *)(type metadata accessor for Event(0, a2, a3) - 8);
  uint64_t v7 = v5 - 1;
  uint64_t v8 = v7 * *(void *)(v6 + 72) + ((*(unsigned __int8 *)(v6 + 80) + 32) & ~*(unsigned __int8 *)(v6 + 80)) + v4;
  uint64_t v12 = -*(void *)(v6 + 72);
  while (1)
  {
    char v9 = a1(v8);
    if (v3 || (v9 & 1) != 0) {
      break;
    }
    v8 += v12;
    if (v7-- == 0) {
      return 0;
    }
  }
  return v7;
}

uint64_t specialized closure #1 in EventCollector.getLast<A>(metric:type:)(uint64_t a1, uint64_t a2)
{
  int64_t v2 = *(void *)(*(void *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Event?)
                             - 8)
                 + 64);
  uint64_t v3 = alloca(v2);
  uint64_t v4 = alloca(v2);
  swift_beginAccess(a1 + 24, v14, 0, 0);
  uint64_t v5 = *(void *)(a1 + 24);
  uint64_t v22 = a2;
  uint64_t v16 = a2;
  *(void *)&v20[0] = v5;
  swift_bridgeObjectRetain(v5);
  uint64_t v6 = specialized BidirectionalCollection.lastIndex(where:)(partial apply for closure #1 in closure #1 in EventCollector.getLast<A>(metric:type:), (uint64_t)v15, v5);
  uint64_t v18 = v20;
  _sSq3mapyqd_0_Sgqd_0_xqd__YKXEqd__YKs5ErrorRd__Ri_d_0_r0_lFxq0_q_Ri_zRi0_zRi__Ri0__Ri_0_Ri0_0_r1_lyxs5NeverOqd_0_Isgnrzr_xSgAb2ERsd__Ri_d_0_r_0_lIetMgnrzo_Tpq5Si_18CreateMLComponents5EventVTg5((uint64_t (*)(void))partial apply for specialized closure #1 in BidirectionalCollection.last(where:), (uint64_t)v17, v6, v7 & 1, (uint64_t)v19);
  swift_bridgeObjectRelease(v5);
  uint64_t v9 = type metadata accessor for Event(0, v17, v8);
  if (__swift_getEnumTagSinglePayload((uint64_t)&v13, 1, v9) == 1)
  {
    outlined destroy of Either<LogisticRegressionClassifier<Float, String>, FullyConnectedNetworkClassifier<Float, String>>((uint64_t)&v13, &demangling cache variable for type metadata for Event?);
    memset(v20, 0, sizeof(v20));
  }
  else
  {
    uint64_t v10 = Event.metrics.getter();
    (*(void (**)(uint64_t *, uint64_t))(*(void *)(v9 - 8) + 8))(&v13, v9);
    specialized Dictionary.subscript.getter(v22, v10);
    swift_bridgeObjectRelease(v10);
  }
  uint64_t v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Sendable?);
  if (swift_dynamicCast(&v21, v20, v11, &type metadata for Double, 6)) {
    return v21;
  }
  else {
    return 0;
  }
}

{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t result;
  char v6;

  uint64_t v4 = v2;
  uint64_t result = specialized closure #1 in EventCollector.getLast<A>(metric:type:)(a1, a2);
  if (!v3)
  {
    *(void *)uint64_t v4 = result;
    *(unsigned char *)(v4 + 8) = v6 & 1;
  }
  return result;
}

uint64_t TreeRegressorTrainingSessionDelegate.init(sessionParameters:)(uint64_t a1)
{
  uint64_t v2 = v1 + OBJC_IVAR____TtC8CreateML36TreeRegressorTrainingSessionDelegate_trainingParameters;
  uint64_t v3 = type metadata accessor for PersistentParametersForTreeBasedMethods(0);
  __swift_storeEnumTagSinglePayload(v2, 1, 1, v3);
  DataFrame.init()(v2, 1, v4, v5);
  uint64_t v6 = v1 + OBJC_IVAR____TtC8CreateML36TreeRegressorTrainingSessionDelegate_validationData;
  uint64_t v7 = type metadata accessor for DataFrame(0);
  __swift_storeEnumTagSinglePayload(v6, 1, 1, v7);
  uint64_t v8 = v1 + OBJC_IVAR____TtC8CreateML36TreeRegressorTrainingSessionDelegate_regressor;
  uint64_t v9 = type metadata accessor for TreeRegressor(0);
  __swift_storeEnumTagSinglePayload(v8, 1, 1, v9);
  uint64_t v10 = v1 + OBJC_IVAR____TtC8CreateML36TreeRegressorTrainingSessionDelegate_model;
  uint64_t v11 = type metadata accessor for TreeRegressorModel(0);
  __swift_storeEnumTagSinglePayload(v10, 1, 1, v11);
  uint64_t v12 = OBJC_IVAR____TtC8CreateML36TreeRegressorTrainingSessionDelegate_trainingMetrics;
  *(_OWORD *)(v1 + OBJC_IVAR____TtC8CreateML36TreeRegressorTrainingSessionDelegate_trainingMetrics) = 0;
  *(unsigned char *)(v1 + v12 + 16) = -1;
  uint64_t v13 = OBJC_IVAR____TtC8CreateML36TreeRegressorTrainingSessionDelegate_validationMetrics;
  *(_OWORD *)(v1 + OBJC_IVAR____TtC8CreateML36TreeRegressorTrainingSessionDelegate_validationMetrics) = 0;
  *(unsigned char *)(v1 + v13 + 16) = -1;
  outlined init with take of MLClassifierMetrics(a1, v1 + OBJC_IVAR____TtC8CreateML36TreeRegressorTrainingSessionDelegate_sessionParameters, type metadata accessor for MLTrainingSessionParameters);
  return v1;
}

uint64_t *TreeRegressorTrainingSessionDelegate.init(trainingData:validationData:targetColumn:featureColumns:configuration:sessionParameters:)(uint64_t a1, uint64_t a2, uint64_t a3, void *a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v84 = v7;
  uint64_t v80 = a6;
  uint64_t v85 = a5;
  uint64_t v78 = a3;
  uint64_t v79 = a2;
  uint64_t v73 = a1;
  uint64_t v67 = *v8;
  int64_t v10 = *(void *)(*(void *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TreeRegressor?)
                              - 8)
                  + 64);
  uint64_t v11 = alloca(v10);
  uint64_t v12 = alloca(v10);
  uint64_t v68 = v66;
  int64_t v13 = *(void *)(*(void *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PersistentParametersForTreeBasedMethods?)
                              - 8)
                  + 64);
  uint64_t v14 = alloca(v13);
  uint64_t v15 = alloca(v13);
  uint64_t v69 = v66;
  uint64_t v86 = type metadata accessor for BoostedTreeConfiguration(0);
  uint64_t v87 = *(void *)(v86 - 8);
  int64_t v16 = *(void *)(v87 + 64);
  uint64_t v17 = alloca(v16);
  uint64_t v18 = alloca(v16);
  uint64_t v82 = v66;
  int64_t v19 = *(void *)(*(void *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for DataFrame?)
                              - 8)
                  + 64);
  uint64_t v20 = alloca(v19);
  uint64_t v21 = alloca(v19);
  uint64_t v75 = v66;
  uint64_t v22 = type metadata accessor for DataFrame(0);
  uint64_t v88 = *(void *)(v22 - 8);
  int64_t v23 = *(void *)(v88 + 64);
  __m128d v24 = alloca(v23);
  unint64_t v25 = alloca(v23);
  uint64_t v76 = v66;
  uint64_t v26 = type metadata accessor for PersistentParametersForTreeBasedMethods(0);
  int64_t v27 = *(void *)(*(void *)(v26 - 8) + 64);
  char v28 = alloca(v27);
  double v29 = alloca(v27);
  uint64_t v72 = v66;
  uint64_t v30 = alloca(v27);
  unint64_t v31 = alloca(v27);
  uint64_t v83 = v66;
  uint64_t v32 = (uint64_t)v8 + OBJC_IVAR____TtC8CreateML36TreeRegressorTrainingSessionDelegate_trainingParameters;
  uint64_t v71 = (uint64_t)v8 + OBJC_IVAR____TtC8CreateML36TreeRegressorTrainingSessionDelegate_trainingParameters;
  uint64_t v74 = v26;
  __swift_storeEnumTagSinglePayload((uint64_t)v8 + OBJC_IVAR____TtC8CreateML36TreeRegressorTrainingSessionDelegate_trainingParameters, 1, 1, v26);
  DataFrame.init()(v32, 1, v33, v34);
  uint64_t v81 = v22;
  __swift_storeEnumTagSinglePayload((uint64_t)v8 + OBJC_IVAR____TtC8CreateML36TreeRegressorTrainingSessionDelegate_validationData, 1, 1, v22);
  uint64_t v35 = (uint64_t)v8 + OBJC_IVAR____TtC8CreateML36TreeRegressorTrainingSessionDelegate_regressor;
  uint64_t v70 = type metadata accessor for TreeRegressor(0);
  __swift_storeEnumTagSinglePayload(v35, 1, 1, v70);
  uint64_t v36 = (uint64_t)v8 + OBJC_IVAR____TtC8CreateML36TreeRegressorTrainingSessionDelegate_model;
  uint64_t v37 = type metadata accessor for TreeRegressorModel(0);
  uint64_t v38 = v36;
  uint64_t v39 = a4;
  uint64_t v40 = v73;
  __swift_storeEnumTagSinglePayload(v38, 1, 1, v37);
  uint64_t v41 = OBJC_IVAR____TtC8CreateML36TreeRegressorTrainingSessionDelegate_trainingMetrics;
  *(_OWORD *)((char *)v8 + OBJC_IVAR____TtC8CreateML36TreeRegressorTrainingSessionDelegate_trainingMetrics) = 0;
  *((unsigned char *)v8 + v41 + 16) = -1;
  uint64_t v42 = OBJC_IVAR____TtC8CreateML36TreeRegressorTrainingSessionDelegate_validationMetrics;
  *(_OWORD *)((char *)v8 + OBJC_IVAR____TtC8CreateML36TreeRegressorTrainingSessionDelegate_validationMetrics) = 0;
  *((unsigned char *)v8 + v42 + 16) = -1;
  uint64_t v43 = v40;
  uint64_t v44 = v40;
  char v45 = v85;
  uint64_t v46 = v84;
  uint64_t v47 = static _FeatureUtilities.selectFeaturesFromTrainingData(trainingData:targetColumn:featureColumns:)(v44, v78, v39, v85);
  uint64_t v84 = v46;
  if (v46)
  {
    swift_bridgeObjectRelease((_BYTE)v39);
    swift_bridgeObjectRelease(v45);
    outlined destroy of MLActivityClassifier.ModelParameters(a7, type metadata accessor for MLTrainingSessionParameters);
    (*(void (**)(uint64_t, uint64_t))(v87 + 8))(v80, v86);
    outlined destroy of Either<LogisticRegressionClassifier<Float, String>, FullyConnectedNetworkClassifier<Float, String>>(v79, &demangling cache variable for type metadata for DataFrame?);
    uint64_t v48 = *(void (**)(uint64_t, uint64_t))(v88 + 8);
    uint64_t v49 = v81;
    v48(v43, v81);
    outlined destroy of Either<LogisticRegressionClassifier<Float, String>, FullyConnectedNetworkClassifier<Float, String>>((uint64_t)v8 + OBJC_IVAR____TtC8CreateML36TreeRegressorTrainingSessionDelegate_trainingParameters, &demangling cache variable for type metadata for PersistentParametersForTreeBasedMethods?);
    v48((uint64_t)v8 + OBJC_IVAR____TtC8CreateML36TreeRegressorTrainingSessionDelegate_trainingData, v49);
    outlined destroy of Either<LogisticRegressionClassifier<Float, String>, FullyConnectedNetworkClassifier<Float, String>>((uint64_t)v8 + OBJC_IVAR____TtC8CreateML36TreeRegressorTrainingSessionDelegate_validationData, &demangling cache variable for type metadata for DataFrame?);
    outlined destroy of Either<LogisticRegressionClassifier<Float, String>, FullyConnectedNetworkClassifier<Float, String>>((uint64_t)v8 + OBJC_IVAR____TtC8CreateML36TreeRegressorTrainingSessionDelegate_regressor, &demangling cache variable for type metadata for TreeRegressor?);
    outlined destroy of Either<LogisticRegressionClassifier<Float, String>, FullyConnectedNetworkClassifier<Float, String>>((uint64_t)v8 + OBJC_IVAR____TtC8CreateML36TreeRegressorTrainingSessionDelegate_model, &demangling cache variable for type metadata for TreeRegressorModel?);
    outlined consume of MLRegressorMetrics?(*(uint64_t *)((char *)v8 + OBJC_IVAR____TtC8CreateML36TreeRegressorTrainingSessionDelegate_trainingMetrics), *(uint64_t *)((char *)v8 + OBJC_IVAR____TtC8CreateML36TreeRegressorTrainingSessionDelegate_trainingMetrics + 8), *(_DWORD *)((char *)v8 + OBJC_IVAR____TtC8CreateML36TreeRegressorTrainingSessionDelegate_trainingMetrics + 16));
    outlined consume of MLRegressorMetrics?(*(uint64_t *)((char *)v8 + OBJC_IVAR____TtC8CreateML36TreeRegressorTrainingSessionDelegate_validationMetrics), *(uint64_t *)((char *)v8 + OBJC_IVAR____TtC8CreateML36TreeRegressorTrainingSessionDelegate_validationMetrics + 8), *(_DWORD *)((char *)v8 + OBJC_IVAR____TtC8CreateML36TreeRegressorTrainingSessionDelegate_validationMetrics + 16));
    swift_deallocPartialClassInstance(v8, v67, *(unsigned int *)(*v8 + 48), *(unsigned __int16 *)(*v8 + 52));
  }
  else
  {
    uint64_t v85 = (uint64_t)v47;
    swift_bridgeObjectRelease(v45);
    uint64_t v50 = v81;
    (*(void (**)(unsigned char *, uint64_t, uint64_t))(v88 + 16))(v76, v43, v81);
    outlined init with copy of Either<LogisticRegressionClassifier<Float, String>, FullyConnectedNetworkClassifier<Float, String>>(v79, (uint64_t)v75, &demangling cache variable for type metadata for DataFrame?);
    (*(void (**)(unsigned char *, uint64_t, uint64_t))(v87 + 16))(v82, v80, v86);
    uint64_t v77 = (uint64_t)v39;
    uint64_t v51 = (uint64_t)v72;
    uint64_t v52 = (uint64_t)&v72[*(int *)(v74 + 20)];
    __swift_storeEnumTagSinglePayload(v52, 1, 1, v50);
    (*(void (**)(uint64_t, unsigned char *, uint64_t))(v88 + 32))(v51, v76, v50);
    uint64_t v53 = v77;
    swift_bridgeObjectRetain(v77);
    outlined assign with take of MLTrainingSession<MLImageClassifier>.Metadata((uint64_t)v75, v52, &demangling cache variable for type metadata for DataFrame?);
    uint64_t v54 = v74;
    uint64_t v55 = *(int *)(v74 + 24);
    *(void *)(v51 + v55) = v78;
    *(void *)(v51 + v55 + 8) = v53;
    *(void *)(v51 + *(int *)(v54 + 28)) = v85;
    uint64_t v56 = v54;
    (*(void (**)(uint64_t, unsigned char *, uint64_t))(v87 + 32))(v51 + *(int *)(v54 + 32), v82, v86);
    uint64_t v57 = (uint64_t)v83;
    outlined init with take of MLClassifierMetrics(v51, (uint64_t)v83, type metadata accessor for PersistentParametersForTreeBasedMethods);
    uint64_t v58 = v57;
    uint64_t v59 = (uint64_t)v69;
    outlined init with copy of MLCheckpoint(v58, (uint64_t)v69, type metadata accessor for PersistentParametersForTreeBasedMethods);
    __swift_storeEnumTagSinglePayload(v59, 0, 1, v56);
    uint64_t v60 = v71;
    swift_beginAccess(v71, v66, 33, 0);
    outlined assign with take of MLTrainingSession<MLImageClassifier>.Metadata(v59, v60, &demangling cache variable for type metadata for PersistentParametersForTreeBasedMethods?);
    swift_endAccess(v66);
    outlined init with copy of MLCheckpoint(a7, (uint64_t)v8 + OBJC_IVAR____TtC8CreateML36TreeRegressorTrainingSessionDelegate_sessionParameters, type metadata accessor for MLTrainingSessionParameters);
    uint64_t v61 = *(void *)&v83[*(int *)(v56 + 28)];
    swift_bridgeObjectRetain(v61);
    uint64_t v62 = (uint64_t)v82;
    BoostedTreeConfiguration.init()();
    uint64_t v63 = (uint64_t)v68;
    TreeRegressor.init(annotationColumnName:featureColumnNames:configuration:)(v78, v77, v61, v62);
    outlined destroy of MLActivityClassifier.ModelParameters(a7, type metadata accessor for MLTrainingSessionParameters);
    (*(void (**)(uint64_t, uint64_t))(v87 + 8))(v80, v86);
    outlined destroy of Either<LogisticRegressionClassifier<Float, String>, FullyConnectedNetworkClassifier<Float, String>>(v79, &demangling cache variable for type metadata for DataFrame?);
    (*(void (**)(uint64_t, uint64_t))(v88 + 8))(v73, v81);
    outlined destroy of MLActivityClassifier.ModelParameters((uint64_t)v83, type metadata accessor for PersistentParametersForTreeBasedMethods);
    __swift_storeEnumTagSinglePayload(v63, 0, 1, v70);
    uint64_t v64 = (uint64_t)v8 + OBJC_IVAR____TtC8CreateML36TreeRegressorTrainingSessionDelegate_regressor;
    swift_beginAccess((char *)v8 + OBJC_IVAR____TtC8CreateML36TreeRegressorTrainingSessionDelegate_regressor, v66, 33, 0);
    outlined assign with take of MLTrainingSession<MLImageClassifier>.Metadata(v63, v64, &demangling cache variable for type metadata for TreeRegressor?);
    swift_endAccess(v66);
  }
  return v8;
}

Swift::Void __swiftcall __spoils<cf,zf,sf,of,pf,rax,rdx,rcx,rdi,rsi,r8,r9,r10,r11,r12,xmm0,xmm1,xmm2,xmm3,xmm4,xmm5,xmm6,xmm7> TreeRegressorTrainingSessionDelegate.setUp()()
{
  uint64_t v51 = v0;
  int64_t v1 = *(void *)(*(void *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TreeRegressorModel?)
                             - 8)
                 + 64);
  uint64_t v2 = alloca(v1);
  uint64_t v3 = alloca(v1);
  uint64_t v46 = v42;
  uint64_t v53 = type metadata accessor for BoostedTreeConfiguration(0);
  uint64_t v52 = *(void *)(v53 - 8);
  int64_t v4 = *(void *)(v52 + 64);
  uint64_t v5 = alloca(v4);
  uint64_t v6 = alloca(v4);
  uint64_t v47 = v42;
  uint64_t v7 = alloca(v4);
  uint64_t v8 = alloca(v4);
  uint64_t v48 = v42;
  int64_t v9 = *(void *)(*(void *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TreeRegressor?)
                             - 8)
                 + 64);
  int64_t v10 = alloca(v9);
  uint64_t v11 = alloca(v9);
  uint64_t v50 = (uint64_t *)v42;
  uint64_t v12 = alloca(v9);
  int64_t v13 = alloca(v9);
  uint64_t v44 = v42;
  int64_t v14 = *(void *)(*(void *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PersistentParametersForTreeBasedMethods?)
                              - 8)
                  + 64);
  uint64_t v15 = alloca(v14);
  int64_t v16 = alloca(v14);
  uint64_t v17 = type metadata accessor for PersistentParametersForTreeBasedMethods(0);
  int64_t v18 = *(void *)(*(void *)(v17 - 8) + 64);
  int64_t v19 = alloca(v18);
  uint64_t v20 = alloca(v18);
  uint64_t v21 = v51 + OBJC_IVAR____TtC8CreateML36TreeRegressorTrainingSessionDelegate_trainingParameters;
  swift_beginAccess(v51 + OBJC_IVAR____TtC8CreateML36TreeRegressorTrainingSessionDelegate_trainingParameters, v42, 0, 0);
  outlined init with copy of Either<LogisticRegressionClassifier<Float, String>, FullyConnectedNetworkClassifier<Float, String>>(v21, (uint64_t)v42, &demangling cache variable for type metadata for PersistentParametersForTreeBasedMethods?);
  uint64_t v54 = v17;
  if (__swift_getEnumTagSinglePayload((uint64_t)v42, 1, v17) == 1)
  {
    outlined destroy of Either<LogisticRegressionClassifier<Float, String>, FullyConnectedNetworkClassifier<Float, String>>((uint64_t)v42, &demangling cache variable for type metadata for PersistentParametersForTreeBasedMethods?);
    BUG();
  }
  outlined init with take of MLClassifierMetrics((uint64_t)v42, (uint64_t)v42, type metadata accessor for PersistentParametersForTreeBasedMethods);
  uint64_t v22 = v51;
  uint64_t v23 = v51 + OBJC_IVAR____TtC8CreateML36TreeRegressorTrainingSessionDelegate_trainingData;
  swift_beginAccess(v51 + OBJC_IVAR____TtC8CreateML36TreeRegressorTrainingSessionDelegate_trainingData, v43, 33, 0);
  uint64_t v24 = type metadata accessor for DataFrame(0);
  (*(void (**)(uint64_t, unsigned char *, uint64_t))(*(void *)(v24 - 8) + 24))(v23, v42, v24);
  swift_endAccess(v43);
  uint64_t v25 = v54;
  uint64_t v26 = &v42[*(int *)(v54 + 20)];
  uint64_t v27 = v22 + OBJC_IVAR____TtC8CreateML36TreeRegressorTrainingSessionDelegate_validationData;
  swift_beginAccess(v22 + OBJC_IVAR____TtC8CreateML36TreeRegressorTrainingSessionDelegate_validationData, v43, 33, 0);
  outlined assign with copy of DataFrame?((uint64_t)v26, v27);
  swift_endAccess(v43);
  uint64_t v28 = *(int *)(v25 + 24);
  uint64_t v49 = v42;
  uint64_t v45 = *(void *)&v42[v28];
  uint64_t v29 = *(void *)&v42[v28 + 8];
  uint64_t v30 = *(void *)&v42[*(int *)(v25 + 28)];
  swift_bridgeObjectRetain(v29);
  swift_bridgeObjectRetain(v30);
  uint64_t v31 = (uint64_t)v48;
  BoostedTreeConfiguration.init()();
  uint64_t v32 = (uint64_t)v44;
  TreeRegressor.init(annotationColumnName:featureColumnNames:configuration:)(v45, v29, v30, v31);
  uint64_t v33 = type metadata accessor for TreeRegressor(0);
  __swift_storeEnumTagSinglePayload(v32, 0, 1, v33);
  uint64_t v34 = v51 + OBJC_IVAR____TtC8CreateML36TreeRegressorTrainingSessionDelegate_regressor;
  swift_beginAccess(v51 + OBJC_IVAR____TtC8CreateML36TreeRegressorTrainingSessionDelegate_regressor, v43, 33, 0);
  outlined assign with take of MLTrainingSession<MLImageClassifier>.Metadata(v32, v34, &demangling cache variable for type metadata for TreeRegressor?);
  uint64_t v35 = *(void (**)(unsigned char *, unsigned char *, uint64_t))(v52 + 16);
  v35(v47, &v49[*(int *)(v54 + 32)], v53);
  uint64_t v54 = v33;
  if (__swift_getEnumTagSinglePayload(v34, 1, v33) == 1) {
    BUG();
  }
  uint64_t v36 = v48;
  uint64_t v37 = v47;
  v35(v48, v47, v53);
  BaseTreeRegressor.configuration.setter(v36);
  (*(void (**)(unsigned char *, uint64_t))(v52 + 8))(v37, v53);
  swift_endAccess(v43);
  uint64_t v38 = v50;
  outlined init with copy of Either<LogisticRegressionClassifier<Float, String>, FullyConnectedNetworkClassifier<Float, String>>(v34, (uint64_t)v50, &demangling cache variable for type metadata for TreeRegressor?);
  if (__swift_getEnumTagSinglePayload((uint64_t)v38, 1, v54) == 1) {
    BUG();
  }
  uint64_t v52 = *v38;
  uint64_t v39 = v38[1];
  uint64_t v53 = type metadata accessor for TreeRegressorModel(0);
  uint64_t v40 = (uint64_t)v46;
  swift_bridgeObjectRetain(v39);
  BaseTreeRegressor.makeTransformer()(v39);
  *(void *)uint64_t v40 = v52;
  *(void *)(v40 + 8) = v39;
  *(_OWORD *)(v40 + 16) = 0;
  *(void *)(v40 + 32) = 0;
  outlined destroy of MLActivityClassifier.ModelParameters((uint64_t)v49, type metadata accessor for PersistentParametersForTreeBasedMethods);
  outlined destroy of MLActivityClassifier.ModelParameters((uint64_t)v50, type metadata accessor for TreeRegressor);
  __swift_storeEnumTagSinglePayload(v40, 0, 1, v53);
  uint64_t v41 = OBJC_IVAR____TtC8CreateML36TreeRegressorTrainingSessionDelegate_model + v51;
  swift_beginAccess(OBJC_IVAR____TtC8CreateML36TreeRegressorTrainingSessionDelegate_model + v51, v43, 33, 0);
  outlined assign with take of MLTrainingSession<MLImageClassifier>.Metadata(v40, v41, &demangling cache variable for type metadata for TreeRegressorModel?);
  swift_endAccess(v43);
}

Swift::Void __swiftcall __spoils<cf,zf,sf,of,pf,rax,rdx,rcx,rdi,rsi,r8,r9,r10,r11,r12,xmm0,xmm1,xmm2,xmm3,xmm4,xmm5,xmm6,xmm7> TreeRegressorTrainingSessionDelegate.resume(from:)(Swift::OpaquePointer from)
{
  uint64_t v71 = v1;
  uint64_t v76 = v2;
  char rawValue = from._rawValue;
  int64_t v3 = *(void *)(*(void *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TreeRegressorModel?)
                             - 8)
                 + 64);
  int64_t v4 = alloca(v3);
  uint64_t v5 = alloca(v3);
  uint64_t v72 = v63;
  int64_t v6 = *(void *)(*(void *)(type metadata accessor for BoostedTreeConfiguration(0) - 8) + 64);
  uint64_t v7 = alloca(v6);
  uint64_t v8 = alloca(v6);
  uint64_t v69 = v63;
  int64_t v9 = *(void *)(*(void *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TreeRegressor?)
                             - 8)
                 + 64);
  int64_t v10 = alloca(v9);
  uint64_t v11 = alloca(v9);
  uint64_t v67 = v63;
  uint64_t v12 = alloca(v9);
  int64_t v13 = alloca(v9);
  uint64_t v68 = v63;
  int64_t v14 = *(void *)(*(void *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for MLCheckpoint?)
                              - 8)
                  + 64);
  uint64_t v15 = alloca(v14);
  int64_t v16 = alloca(v14);
  uint64_t v66 = v63;
  uint64_t v75 = type metadata accessor for MLCheckpoint(0);
  int64_t v17 = *(void *)(*(void *)(v75 - 8) + 64);
  int64_t v18 = alloca(v17);
  int64_t v19 = alloca(v17);
  uint64_t v74 = v63;
  int64_t v20 = *(void *)(*(void *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PersistentParametersForTreeBasedMethods?)
                              - 8)
                  + 64);
  uint64_t v21 = alloca(v20);
  uint64_t v22 = alloca(v20);
  uint64_t v23 = type metadata accessor for PersistentParametersForTreeBasedMethods(0);
  int64_t v24 = *(void *)(*(void *)(v23 - 8) + 64);
  uint64_t v25 = alloca(v24);
  uint64_t v26 = alloca(v24);
  uint64_t v27 = v76 + OBJC_IVAR____TtC8CreateML36TreeRegressorTrainingSessionDelegate_trainingParameters;
  swift_beginAccess(v76 + OBJC_IVAR____TtC8CreateML36TreeRegressorTrainingSessionDelegate_trainingParameters, v64, 0, 0);
  outlined init with copy of Either<LogisticRegressionClassifier<Float, String>, FullyConnectedNetworkClassifier<Float, String>>(v27, (uint64_t)v63, &demangling cache variable for type metadata for PersistentParametersForTreeBasedMethods?);
  uint64_t v70 = v23;
  if (__swift_getEnumTagSinglePayload((uint64_t)v63, 1, v23) == 1)
  {
    outlined destroy of Either<LogisticRegressionClassifier<Float, String>, FullyConnectedNetworkClassifier<Float, String>>((uint64_t)v63, &demangling cache variable for type metadata for PersistentParametersForTreeBasedMethods?);
    BUG();
  }
  outlined init with take of MLClassifierMetrics((uint64_t)v63, (uint64_t)v63, type metadata accessor for PersistentParametersForTreeBasedMethods);
  uint64_t v28 = (uint64_t)v66;
  specialized BidirectionalCollection.last.getter((uint64_t)rawValue);
  if (__swift_getEnumTagSinglePayload(v28, 1, v75) == 1)
  {
    outlined destroy of Either<LogisticRegressionClassifier<Float, String>, FullyConnectedNetworkClassifier<Float, String>>(v28, &demangling cache variable for type metadata for MLCheckpoint?);
    uint64_t v29 = lazy protocol witness table accessor for type MLCreateError and conformance MLCreateError();
    swift_allocError(&type metadata for MLCreateError, v29, 0, 0);
    *(void *)uint64_t v30 = 0xD00000000000001DLL;
    *(void *)(v30 + 8) = "reated." + 0x8000000000000000;
    *(_OWORD *)(v30 + 16) = 0;
    *(_OWORD *)(v30 + 32) = 0;
    *(unsigned char *)(v30 + 48) = 0;
    swift_willThrow(&type metadata for MLCreateError, v29, v30, v31, v32, v33);
LABEL_16:
    outlined destroy of MLActivityClassifier.ModelParameters((uint64_t)v63, type metadata accessor for PersistentParametersForTreeBasedMethods);
    return;
  }
  unint64_t v34 = 0xEB0000000064657ALL;
  uint64_t v35 = (uint64_t)v74;
  outlined init with take of MLClassifierMetrics(v28, (uint64_t)v74, type metadata accessor for MLCheckpoint);
  switch(*(unsigned char *)(v35 + *(int *)(v75 + 20)))
  {
    case 0:
      uint64_t v36 = 0x696C616974696E69;
      break;
    case 1:
      uint64_t v36 = 0x6974636172747865;
      goto LABEL_9;
    case 2:
      swift_bridgeObjectRelease(0);
      goto LABEL_12;
    case 3:
      uint64_t v36 = 0x697461756C617665;
LABEL_9:
      unint64_t v34 = 0xEA0000000000676ELL;
      break;
    case 4:
      unint64_t v34 = 0xEB00000000676E69;
      uint64_t v36 = 0x636E657265666E69;
      break;
  }
  char v37 = _stringCompareWithSmolCheck(_:_:expecting:)(v36, v34, 0x676E696E69617274, 0xE800000000000000, 0);
  swift_bridgeObjectRelease(v34);
  if ((v37 & 1) == 0)
  {
    uint64_t v58 = lazy protocol witness table accessor for type MLCreateError and conformance MLCreateError();
    swift_allocError(&type metadata for MLCreateError, v58, 0, 0);
    *(void *)uint64_t v59 = 0xD000000000000028;
    *(void *)(v59 + 8) = "" + 0x8000000000000000;
    *(_OWORD *)(v59 + 16) = 0;
    *(_OWORD *)(v59 + 32) = 0;
    *(unsigned char *)(v59 + 48) = 0;
    swift_willThrow(&type metadata for MLCreateError, v58, v59, v60, v61, v62);
    outlined destroy of MLActivityClassifier.ModelParameters((uint64_t)v74, type metadata accessor for MLCheckpoint);
    goto LABEL_16;
  }
LABEL_12:
  uint64_t v38 = v76 + OBJC_IVAR____TtC8CreateML36TreeRegressorTrainingSessionDelegate_trainingData;
  swift_beginAccess(v76 + OBJC_IVAR____TtC8CreateML36TreeRegressorTrainingSessionDelegate_trainingData, v65, 33, 0);
  uint64_t v39 = type metadata accessor for DataFrame(0);
  (*(void (**)(uint64_t, unsigned char *, uint64_t))(*(void *)(v39 - 8) + 24))(v38, v63, v39);
  swift_endAccess(v65);
  uint64_t v40 = v70;
  uint64_t v41 = &v63[*(int *)(v70 + 20)];
  uint64_t v42 = v76 + OBJC_IVAR____TtC8CreateML36TreeRegressorTrainingSessionDelegate_validationData;
  swift_beginAccess(v76 + OBJC_IVAR____TtC8CreateML36TreeRegressorTrainingSessionDelegate_validationData, v65, 33, 0);
  outlined assign with copy of DataFrame?((uint64_t)v41, v42);
  swift_endAccess(v65);
  uint64_t v43 = *(int *)(v40 + 24);
  uint64_t v75 = *(void *)&v63[v43];
  uint64_t v44 = *(void *)&v63[v43 + 8];
  uint64_t v45 = *(int *)(v40 + 28);
  char rawValue = v63;
  uint64_t v46 = *(void *)&v63[v45];
  swift_bridgeObjectRetain(v44);
  swift_bridgeObjectRetain(v46);
  uint64_t v47 = (uint64_t)v69;
  BoostedTreeConfiguration.init()();
  uint64_t v48 = (uint64_t)v68;
  TreeRegressor.init(annotationColumnName:featureColumnNames:configuration:)(v75, v44, v46, v47);
  uint64_t v49 = type metadata accessor for TreeRegressor(0);
  __swift_storeEnumTagSinglePayload(v48, 0, 1, v49);
  uint64_t v50 = v76 + OBJC_IVAR____TtC8CreateML36TreeRegressorTrainingSessionDelegate_regressor;
  swift_beginAccess(v76 + OBJC_IVAR____TtC8CreateML36TreeRegressorTrainingSessionDelegate_regressor, v65, 33, 0);
  outlined assign with take of MLTrainingSession<MLImageClassifier>.Metadata(v48, v50, &demangling cache variable for type metadata for TreeRegressor?);
  swift_endAccess(v65);
  uint64_t v51 = (uint64_t)v67;
  outlined init with copy of Either<LogisticRegressionClassifier<Float, String>, FullyConnectedNetworkClassifier<Float, String>>(v50, (uint64_t)v67, &demangling cache variable for type metadata for TreeRegressor?);
  if (__swift_getEnumTagSinglePayload(v51, 1, v49) == 1) {
    BUG();
  }
  uint64_t v52 = lazy protocol witness table accessor for type TreeRegressor and conformance TreeRegressor();
  uint64_t v53 = (uint64_t)v74;
  uint64_t v54 = v71;
  SupervisedTabularEstimator.read(from:)(v74, v49, v52);
  outlined destroy of MLActivityClassifier.ModelParameters(v53, type metadata accessor for MLCheckpoint);
  outlined destroy of MLActivityClassifier.ModelParameters((uint64_t)rawValue, type metadata accessor for PersistentParametersForTreeBasedMethods);
  outlined destroy of MLActivityClassifier.ModelParameters(v51, type metadata accessor for TreeRegressor);
  if (!v54)
  {
    uint64_t v55 = type metadata accessor for TreeRegressorModel(0);
    uint64_t v56 = (uint64_t)v72;
    __swift_storeEnumTagSinglePayload((uint64_t)v72, 0, 1, v55);
    uint64_t v57 = OBJC_IVAR____TtC8CreateML36TreeRegressorTrainingSessionDelegate_model + v76;
    swift_beginAccess(OBJC_IVAR____TtC8CreateML36TreeRegressorTrainingSessionDelegate_model + v76, v65, 33, 0);
    outlined assign with take of MLTrainingSession<MLImageClassifier>.Metadata(v56, v57, &demangling cache variable for type metadata for TreeRegressorModel?);
    swift_endAccess(v65);
  }
}

Swift::Int_optional __swiftcall TreeRegressorTrainingSessionDelegate.itemCount(phase:)(CreateML::MLPhase phase)
{
  if (*(unsigned char *)phase == 2)
  {
    uint64_t v2 = OBJC_IVAR____TtC8CreateML36TreeRegressorTrainingSessionDelegate_sessionParameters + v1;
    char v3 = 0;
    v4.value = *(void *)(*(int *)(type metadata accessor for MLTrainingSessionParameters(0) + 28) + v2);
  }
  else
  {
    char v3 = 1;
    v4.value = 0;
  }
  v4.is_nil = v3;
  return v4;
}

uint64_t TreeRegressorTrainingSessionDelegate.train(from:)(uint64_t a1)
{
  v2[20] = v1;
  v2[19] = a1;
  uint64_t v3 = type metadata accessor for MetricsKey(0);
  v2[21] = v3;
  uint64_t v4 = *(void *)(v3 - 8);
  v2[22] = v4;
  v2[23] = swift_task_alloc((*(void *)(v4 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = type metadata accessor for AnyColumn(0);
  v2[24] = v5;
  uint64_t v6 = *(void *)(v5 - 8);
  v2[25] = v6;
  v2[26] = swift_task_alloc((*(void *)(v6 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for DenseMatrix<Float>);
  v2[27] = v7;
  uint64_t v8 = *(void *)(v7 - 8);
  v2[28] = v8;
  v2[29] = swift_task_alloc((*(void *)(v8 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = type metadata accessor for DataFrame(0);
  v2[30] = v9;
  uint64_t v10 = *(void *)(v9 - 8);
  v2[31] = v10;
  unint64_t v11 = (*(void *)(v10 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v2[32] = swift_task_alloc(v11);
  v2[33] = swift_task_alloc(v11);
  uint64_t v12 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TreeRegressor?);
  v2[34] = swift_task_alloc((*(void *)(*(void *)(v12 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PersistentParametersForTreeBasedMethods?);
  v2[35] = swift_task_alloc((*(void *)(*(void *)(v13 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TreeRegressorModel?);
  v2[36] = swift_task_alloc((*(void *)(*(void *)(v14 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  return swift_task_switch(TreeRegressorTrainingSessionDelegate.train(from:), 0, 0);
}

uint64_t TreeRegressorTrainingSessionDelegate.train(from:)()
{
  uint64_t v1 = v0[36];
  uint64_t v2 = OBJC_IVAR____TtC8CreateML36TreeRegressorTrainingSessionDelegate_model + v0[20];
  swift_beginAccess(v2, v0 + 2, 0, 0);
  uint64_t v77 = (uint64_t *)v2;
  outlined init with copy of Either<LogisticRegressionClassifier<Float, String>, FullyConnectedNetworkClassifier<Float, String>>(v2, v1, &demangling cache variable for type metadata for TreeRegressorModel?);
  uint64_t v66 = type metadata accessor for TreeRegressorModel(0);
  LODWORD(v2) = __swift_getEnumTagSinglePayload(v1, 1, v66);
  outlined destroy of Either<LogisticRegressionClassifier<Float, String>, FullyConnectedNetworkClassifier<Float, String>>(v1, &demangling cache variable for type metadata for TreeRegressorModel?);
  if (v2 == 1) {
    BUG();
  }
  uint64_t v3 = v0[35];
  uint64_t v4 = OBJC_IVAR____TtC8CreateML36TreeRegressorTrainingSessionDelegate_trainingParameters + v0[20];
  swift_beginAccess(v4, v0 + 5, 0, 0);
  outlined init with copy of Either<LogisticRegressionClassifier<Float, String>, FullyConnectedNetworkClassifier<Float, String>>(v4, v3, &demangling cache variable for type metadata for PersistentParametersForTreeBasedMethods?);
  uint64_t v5 = type metadata accessor for PersistentParametersForTreeBasedMethods(0);
  LODWORD(v4) = __swift_getEnumTagSinglePayload(v3, 1, v5);
  outlined destroy of Either<LogisticRegressionClassifier<Float, String>, FullyConnectedNetworkClassifier<Float, String>>(v3, &demangling cache variable for type metadata for PersistentParametersForTreeBasedMethods?);
  if (v4 == 1) {
    BUG();
  }
  uint64_t v6 = v0[19];
  uint64_t v7 = OBJC_IVAR____TtC8CreateML36TreeRegressorTrainingSessionDelegate_sessionParameters + v0[20];
  uint64_t v8 = type metadata accessor for MLTrainingSessionParameters(0);
  uint64_t v9 = *(void *)(*(int *)(v8 + 20) + v7);
  uint64_t v10 = v9 + v6;
  if (__OFADD__(v9, v6)) {
    BUG();
  }
  uint64_t v11 = *(void *)(v7 + *(int *)(v8 + 28));
  uint64_t v12 = v11 - v6;
  if (__OFSUB__(v11, v6)) {
    BUG();
  }
  uint64_t v62 = v11;
  uint64_t v13 = v0;
  uint64_t v14 = v0 + 8;
  uint64_t v15 = v13 + 11;
  uint64_t v70 = v13 + 14;
  uint64_t v63 = v13;
  uint64_t v55 = v13 + 18;
  if (v9 < v12) {
    uint64_t v12 = v9;
  }
  uint64_t v16 = type metadata accessor for EventCollector();
  swift_allocObject(v16, 32, 7);
  uint64_t v17 = EventCollector.init()();
  if (v12 < 0) {
    BUG();
  }
  uint64_t v58 = v10;
  uint64_t v65 = v17;
  uint64_t v61 = v12;
  if (v12)
  {
    uint64_t v59 = v63[34];
    uint64_t v18 = v63[31];
    uint64_t v60 = v63[28];
    uint64_t v19 = v63[20];
    uint64_t v57 = v63[25];
    uint64_t v20 = v19 + OBJC_IVAR____TtC8CreateML36TreeRegressorTrainingSessionDelegate_regressor;
    uint64_t v21 = OBJC_IVAR____TtC8CreateML36TreeRegressorTrainingSessionDelegate_trainingData + v19;
    swift_beginAccess(v20, v14, 0, 0);
    uint64_t v56 = v21;
    swift_beginAccess(v21, v15, 0, 0);
    uint64_t v22 = v12;
    uint64_t v68 = v18;
    do
    {
      uint64_t v54 = v22;
      uint64_t v23 = v63[34];
      outlined init with copy of Either<LogisticRegressionClassifier<Float, String>, FullyConnectedNetworkClassifier<Float, String>>(v20, v23, &demangling cache variable for type metadata for TreeRegressor?);
      uint64_t v53 = type metadata accessor for TreeRegressor(0);
      if (__swift_getEnumTagSinglePayload(v23, 1, v53) == 1) {
        BUG();
      }
      (*(void (**)(void, uint64_t, void))(v18 + 16))(v63[33], v56, v63[30]);
      swift_beginAccess(v77, v70, 33, 0);
      if (__swift_getEnumTagSinglePayload((uint64_t)v77, 1, v66) == 1) {
        BUG();
      }
      ML16ColumnDescriptorVsAE_pTg5 = (void *)v77[2];
      if (ML16ColumnDescriptorVsAE_pTg5)
      {
        swift_retain();
      }
      else
      {
        uint64_t v25 = v63[33];
        uint64_t v26 = *(void *)(v59 + 16);
        uint64_t v27 = swift_task_alloc(32);
        *(void *)(v27 + 16) = v25;
        swift_retain();
        swift_bridgeObjectRetain(v26);
        ML16ColumnDescriptorVsAE_pTg5 = _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSaySSG_8CreateML16ColumnDescriptorVsAE_pTg5((void (*)(void *, uint64_t *))partial apply for closure #1 in FeatureVectorizer.fitted(to:), v27, v26);
        swift_bridgeObjectRelease(v26);
        swift_task_dealloc(v27);
        outlined consume of FeatureVectorizer<Float>.Transformer?(v77[2], v77[3], v77[4]);
        v77[2] = (uint64_t)ML16ColumnDescriptorVsAE_pTg5;
        v77[3] = 0xD000000000000013;
        v77[4] = (uint64_t)("raining samples." + 0x8000000000000000);
      }
      swift_bridgeObjectRetain((_BYTE)ML16ColumnDescriptorVsAE_pTg5);
      ML16ColumnDescriptorVG_SSs5NeverOTg503_s8d131ML17FeatureVectorizerV11TransformerV10vectorized_13includingBias0A12MLComponents11DenseMatrixVyxG11TabularData0M5FrameV_SbtKFSSAA16fG54Vcfu_33_44daf68368b8b9c6f03dca699c8750fcAPSSTf3nnnpk_nTf1cn_n = _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSay8CreateML16ColumnDescriptorVG_SSs5NeverOTg503_s8d131ML17FeatureVectorizerV11TransformerV10vectorized_13includingBias0A12MLComponents11DenseMatrixVyxG11TabularData0M5FrameV_SbtKFSSAA16fG54Vcfu_33_44daf68368b8b9c6f03dca699c8750fcAPSSTf3nnnpk_nTf1cn_n((uint64_t)ML16ColumnDescriptorVsAE_pTg5);
      swift_bridgeObjectRelease((_BYTE)ML16ColumnDescriptorVsAE_pTg5);
      v63[18] = ML16ColumnDescriptorVG_SSs5NeverOTg503_s8d131ML17FeatureVectorizerV11TransformerV10vectorized_13includingBias0A12MLComponents11DenseMatrixVyxG11TabularData0M5FrameV_SbtKFSSAA16fG54Vcfu_33_44daf68368b8b9c6f03dca699c8750fcAPSSTf3nnnpk_nTf1cn_n;
      uint64_t v29 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [String]);
      uint64_t v30 = lazy protocol witness table accessor for type FullyConnectedNetworkClassifier<Float, String> and conformance FullyConnectedNetworkClassifier<A, B>(&lazy protocol witness table cache variable for type [String] and conformance [A], &demangling cache variable for type metadata for [String], (uint64_t)&protocol conformance descriptor for [A]);
      DataFrame.selecting<A>(columnNames:)(v55, v29, v30);
      swift_bridgeObjectRelease((_BYTE)ML16ColumnDescriptorVG_SSs5NeverOTg503_s8d131ML17FeatureVectorizerV11TransformerV10vectorized_13includingBias0A12MLComponents11DenseMatrixVyxG11TabularData0M5FrameV_SbtKFSSAA16fG54Vcfu_33_44daf68368b8b9c6f03dca699c8750fcAPSSTf3nnnpk_nTf1cn_n);
      specialized DataFrame.asMatrix<A>(of:descriptors:includingBias:)((uint64_t)ML16ColumnDescriptorVsAE_pTg5, 0);
      uint64_t v31 = (void *)v63[34];
      uint64_t v74 = v63[24];
      uint64_t v32 = v63[26];
      uint64_t v72 = *(void (**)(uint64_t, uint64_t))(v68 + 8);
      v72(v63[32], v63[30]);
      DataFrame.subscript.getter(*v31, *(void *)(v59 + 8));
      uint64_t v33 = AnyColumn.convertedToFloats()();
      (*(void (**)(uint64_t, uint64_t))(v57 + 8))(v32, v74);
      if (!v33) {
        BUG();
      }
      BaseTreeRegressor.update(_:features:annotations:eventHandler:)((char *)v77 + *(int *)(v66 + 24), v63[29], v33, partial apply for closure #1 in LogisticRegressionClassifierTrainingSessionDelegate.train(from:), v65);
      uint64_t v75 = v63[34];
      uint64_t v34 = v63[33];
      uint64_t v35 = v63[30];
      (*(void (**)(void, void))(v60 + 8))(v63[29], v63[27]);
      swift_release();
      swift_endAccess(v70);
      swift_release();
      v72(v34, v35);
      outlined destroy of MLActivityClassifier.ModelParameters(v75, type metadata accessor for TreeRegressor);
      uint64_t v22 = v54 - 1;
      uint64_t v18 = v68;
    }
    while (v54 != 1);
  }
  uint64_t v36 = v63[23];
  uint64_t v37 = v63[21];
  uint64_t v38 = v63[22];
  static MetricsKey.trainingMaximumError.getter();
  id v39 = specialized EventCollector.getLast<A>(metric:type:)();
  char v41 = v40;
  uint64_t v42 = *(void (**)(uint64_t, uint64_t))(v38 + 8);
  v42(v36, v37);
  uint64_t v78 = v42;
  if ((v41 & 1) == 0)
  {
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(_swiftEmptyDictionarySingleton);
    specialized _NativeDictionary.setValue(_:forKey:isUnique:)(8, isUniquelyReferenced_nonNull_native, *(double *)&v39);
    swift_bridgeObjectRelease(0);
  }
  uint64_t v44 = v63[21];
  uint64_t v45 = v63[23];
  static MetricsKey.trainingError.getter();
  id v46 = specialized EventCollector.getLast<A>(metric:type:)();
  char v48 = v47;
  v78(v45, v44);
  if ((v48 & 1) == 0)
  {
    char v49 = swift_isUniquelyReferenced_nonNull_native(_swiftEmptyDictionarySingleton);
    specialized _NativeDictionary.setValue(_:forKey:isUnique:)(7, v49, *(double *)&v46);
    swift_bridgeObjectRelease(0);
  }
  uint64_t v50 = v63[36];
  uint64_t v51 = v63[35];
  uint64_t v64 = v63[34];
  uint64_t v73 = v63[33];
  uint64_t v76 = v63[32];
  uint64_t v69 = v63[29];
  uint64_t v71 = v63[23];
  uint64_t v67 = v63[26];
  uint64_t v79 = specialized _dictionaryUpCast<A, B, C, D>(_:)((uint64_t)_swiftEmptyDictionarySingleton);
  swift_release();
  swift_bridgeObjectRelease(_swiftEmptyDictionarySingleton);
  swift_task_dealloc(v50);
  swift_task_dealloc(v51);
  swift_task_dealloc(v64);
  swift_task_dealloc(v73);
  swift_task_dealloc(v76);
  swift_task_dealloc(v69);
  swift_task_dealloc(v67);
  swift_task_dealloc(v71);
  return ((uint64_t (*)(uint64_t, void *, BOOL))v63[1])(v61, v79, v58 >= v62);
}

uint64_t TreeRegressorTrainingSessionDelegate.evaluate(from:)()
{
  v1[25] = v0;
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for DataFrame?);
  v1[26] = swift_task_alloc((*(void *)(*(void *)(v2 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Column<Double>);
  v1[27] = v3;
  uint64_t v4 = *(void *)(v3 - 8);
  v1[28] = v4;
  v1[29] = swift_task_alloc((*(void *)(v4 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for FilledColumn<Column<Double>>);
  v1[30] = v5;
  uint64_t v6 = *(void *)(v5 - 8);
  v1[31] = v6;
  unint64_t v7 = (*(void *)(v6 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v1[32] = swift_task_alloc(v7);
  v1[33] = swift_task_alloc(v7);
  v1[34] = swift_task_alloc(v7);
  v1[35] = swift_task_alloc(v7);
  uint64_t v8 = type metadata accessor for DataFrame(0);
  v1[36] = v8;
  uint64_t v9 = *(void *)(v8 - 8);
  v1[37] = v9;
  unint64_t v10 = (*(void *)(v9 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v1[38] = swift_task_alloc(v10);
  v1[39] = swift_task_alloc(v10);
  v1[40] = swift_task_alloc(v10);
  v1[41] = swift_task_alloc(v10);
  uint64_t v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TreeRegressorModel?);
  v1[42] = swift_task_alloc((*(void *)(*(void *)(v11 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = type metadata accessor for TreeRegressorModel(0);
  v1[43] = v12;
  v1[44] = swift_task_alloc((*(void *)(*(void *)(v12 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  return swift_task_switch(TreeRegressorTrainingSessionDelegate.evaluate(from:), 0, 0);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  void (*v18)(uint64_t, uint64_t);
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  int v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  void (*v30)(uint64_t, uint64_t);
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  int v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  void (*v38)(uint64_t, uint64_t);
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  void (*v54)(uint64_t, uint64_t);
  void (*v55)(uint64_t, uint64_t);
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;

  uint64_t v1 = *(void *)(v0 + 344);
  uint64_t v2 = *(void *)(v0 + 336);
  uint64_t v3 = OBJC_IVAR____TtC8CreateML36TreeRegressorTrainingSessionDelegate_model + *(void *)(v0 + 200);
  swift_beginAccess(v3, v0 + 16, 0, 0);
  outlined init with copy of Either<LogisticRegressionClassifier<Float, String>, FullyConnectedNetworkClassifier<Float, String>>(v3, v2, &demangling cache variable for type metadata for TreeRegressorModel?);
  if (__swift_getEnumTagSinglePayload(v2, 1, v1) == 1)
  {
    outlined destroy of Either<LogisticRegressionClassifier<Float, String>, FullyConnectedNetworkClassifier<Float, String>>(*(void *)(v0 + 336), &demangling cache variable for type metadata for TreeRegressorModel?);
LABEL_5:
    unint64_t v7 = 0;
    goto LABEL_6;
  }
  uint64_t v4 = *(void *)(v0 + 200);
  outlined init with take of MLClassifierMetrics(*(void *)(v0 + 336), *(void *)(v0 + 352), type metadata accessor for TreeRegressorModel);
  uint64_t v5 = OBJC_IVAR____TtC8CreateML36TreeRegressorTrainingSessionDelegate_trainingParameters + v4;
  swift_beginAccess(v5, v0 + 40, 0, 0);
  uint64_t v6 = type metadata accessor for PersistentParametersForTreeBasedMethods(0);
  if (__swift_getEnumTagSinglePayload(v5, 1, v6))
  {
    outlined destroy of MLActivityClassifier.ModelParameters(*(void *)(v0 + 352), type metadata accessor for TreeRegressorModel);
    goto LABEL_5;
  }
  uint64_t v72 = *(void *)(v0 + 320);
  uint64_t v81 = *(void *)(v0 + 296);
  uint64_t v76 = *(void *)(v0 + 288);
  uint64_t v13 = *(int *)(v6 + 24);
  uint64_t v65 = *(void *)(v5 + v13);
  uint64_t v14 = *(void *)(v5 + v13 + 8);
  uint64_t v15 = OBJC_IVAR____TtC8CreateML36TreeRegressorTrainingSessionDelegate_trainingData + *(void *)(v0 + 200);
  swift_beginAccess(v15, v0 + 64, 0, 0);
  uint64_t v59 = v15;
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v81 + 16))(v72, v15, v76);
  swift_bridgeObjectRetain(v14);
  TreeRegressorModel.applied(to:eventHandler:)(v72, 0, 0);
  uint64_t v43 = *(void *)(v0 + 288);
  uint64_t v73 = *(void *)(v0 + 280);
  uint64_t v77 = *(void *)(v0 + 272);
  char v49 = *(void *)(v0 + 240);
  uint64_t v16 = *(void *)(v0 + 232);
  uint64_t v57 = v14;
  uint64_t v17 = *(void *)(v0 + 224);
  uint64_t v82 = *(void *)(v0 + 216);
  uint64_t v51 = *(void *)(v0 + 200);
  uint64_t v45 = *(void *)(v0 + 208);
  uint64_t v55 = *(void (**)(uint64_t, uint64_t))(*(void *)(v0 + 296) + 8);
  ((void (*)(void))v55)(*(void *)(v0 + 320));
  DataFrame.subscript.getter(v65, v14, &type metadata for Double);
  *(void *)(v0 + 136) = 0;
  uint64_t v63 = lazy protocol witness table accessor for type FullyConnectedNetworkClassifier<Float, String> and conformance FullyConnectedNetworkClassifier<A, B>(&lazy protocol witness table cache variable for type Column<Double> and conformance Column<A>, &demangling cache variable for type metadata for Column<Double>, (uint64_t)&protocol conformance descriptor for Column<A>);
  OptionalColumnProtocol.filled(with:)(v0 + 136, v82, v63);
  uint64_t v18 = *(void (**)(uint64_t, uint64_t))(v17 + 8);
  v18(v16, v82);
  swift_beginAccess(v59, v0 + 88, 32, 0);
  DataFrame.subscript.getter(v65, v14, &type metadata for Double);
  swift_endAccess(v0 + 88);
  *(void *)(v0 + 144) = 0;
  OptionalColumnProtocol.filled(with:)(v0 + 144, v82, v63);
  uint64_t v54 = v18;
  v18(v16, v82);
  uint64_t v83 = lazy protocol witness table accessor for type Double and conformance Double();
  uint64_t v19 = lazy protocol witness table accessor for type FullyConnectedNetworkClassifier<Float, String> and conformance FullyConnectedNetworkClassifier<A, B>(&lazy protocol witness table cache variable for type FilledColumn<Column<Double>> and conformance FilledColumn<A>, &demangling cache variable for type metadata for FilledColumn<Column<Double>>, (uint64_t)&protocol conformance descriptor for FilledColumn<A>);
  maximumAbsoluteError<A, B, C>(_:_:)(v73, v77, &type metadata for Double, v49, v49, v83, v19, v19);
  uint64_t v60 = *(void *)(v0 + 152);
  rootMeanSquaredError<A, B, C>(_:_:)(v73, v77, &type metadata for Double, v49, v49, v83, v19, v19);
  uint64_t v20 = *(void *)(v0 + 160);
  uint64_t v21 = OBJC_IVAR____TtC8CreateML36TreeRegressorTrainingSessionDelegate_trainingMetrics;
  uint64_t v22 = *(void *)(v51 + OBJC_IVAR____TtC8CreateML36TreeRegressorTrainingSessionDelegate_trainingMetrics);
  uint64_t v23 = *(void *)(v51 + OBJC_IVAR____TtC8CreateML36TreeRegressorTrainingSessionDelegate_trainingMetrics + 8);
  *(void *)(v51 + OBJC_IVAR____TtC8CreateML36TreeRegressorTrainingSessionDelegate_trainingMetrics) = v60;
  *(void *)(v51 + v21 + 8) = v20;
  int64_t v24 = *(_DWORD *)(v51 + v21 + 16);
  *(unsigned char *)(v51 + v21 + 16) = 0;
  outlined consume of MLRegressorMetrics?(v22, v23, v24);
  uint64_t v25 = OBJC_IVAR____TtC8CreateML36TreeRegressorTrainingSessionDelegate_validationData + v51;
  swift_beginAccess(OBJC_IVAR____TtC8CreateML36TreeRegressorTrainingSessionDelegate_validationData + v51, v0 + 112, 0, 0);
  outlined init with copy of Either<LogisticRegressionClassifier<Float, String>, FullyConnectedNetworkClassifier<Float, String>>(v25, v45, &demangling cache variable for type metadata for DataFrame?);
  if (__swift_getEnumTagSinglePayload(v45, 1, v43) == 1)
  {
    uint64_t v74 = *(void *)(v0 + 328);
    uint64_t v78 = *(void *)(v0 + 288);
    uint64_t v66 = *(void *)(v0 + 280);
    uint64_t v26 = *(void *)(v0 + 272);
    uint64_t v84 = *(void *)(v0 + 352);
    uint64_t v27 = *(void *)(v0 + 248);
    uint64_t v28 = *(void *)(v0 + 240);
    uint64_t v29 = *(void *)(v0 + 200);
    uint64_t v69 = *(void *)(v0 + 208);
    swift_bridgeObjectRelease(v57);
    uint64_t v30 = *(void (**)(uint64_t, uint64_t))(v27 + 8);
    v30(v26, v28);
    v30(v66, v28);
    v55(v74, v78);
    outlined destroy of MLActivityClassifier.ModelParameters(v84, type metadata accessor for TreeRegressorModel);
    outlined destroy of Either<LogisticRegressionClassifier<Float, String>, FullyConnectedNetworkClassifier<Float, String>>(v69, &demangling cache variable for type metadata for DataFrame?);
    uint64_t v31 = OBJC_IVAR____TtC8CreateML36TreeRegressorTrainingSessionDelegate_validationMetrics;
    uint64_t v32 = *(void *)(v29 + OBJC_IVAR____TtC8CreateML36TreeRegressorTrainingSessionDelegate_validationMetrics);
    uint64_t v33 = *(void *)(v29 + OBJC_IVAR____TtC8CreateML36TreeRegressorTrainingSessionDelegate_validationMetrics + 8);
    *(_OWORD *)(v29 + OBJC_IVAR____TtC8CreateML36TreeRegressorTrainingSessionDelegate_validationMetrics) = 0;
    uint64_t v34 = *(_DWORD *)(v29 + v31 + 16);
    *(unsigned char *)(v29 + v31 + 16) = -1;
  }
  else
  {
    uint64_t v35 = *(void *)(v0 + 312);
    (*(void (**)(uint64_t, void, void))(*(void *)(v0 + 296) + 32))(v35, *(void *)(v0 + 208), *(void *)(v0 + 288));
    TreeRegressorModel.applied(to:eventHandler:)(v35, 0, 0);
    uint64_t v42 = *(void *)(v0 + 352);
    id v46 = *(void *)(v0 + 328);
    uint64_t v79 = *(void *)(v0 + 312);
    uint64_t v53 = *(void *)(v0 + 304);
    uint64_t v50 = *(void *)(v0 + 288);
    char v47 = *(void *)(v0 + 280);
    char v48 = *(void *)(v0 + 272);
    uint64_t v70 = *(void *)(v0 + 264);
    uint64_t v61 = *(void *)(v0 + 256);
    uint64_t v52 = *(void *)(v0 + 248);
    char v41 = *(void *)(v0 + 240);
    uint64_t v36 = *(void *)(v0 + 232);
    uint64_t v44 = *(void *)(v0 + 200);
    uint64_t v37 = *(void *)(v0 + 216);
    DataFrame.subscript.getter(v65, v57, &type metadata for Double);
    *(void *)(v0 + 168) = 0;
    OptionalColumnProtocol.filled(with:)(v0 + 168, v37, v63);
    v54(v36, v37);
    DataFrame.subscript.getter(v65, v57, &type metadata for Double);
    swift_bridgeObjectRelease(v57);
    *(void *)(v0 + 176) = 0;
    OptionalColumnProtocol.filled(with:)(v0 + 176, v37, v63);
    v54(v36, v37);
    maximumAbsoluteError<A, B, C>(_:_:)(v70, v61, &type metadata for Double, v41, v41, v83, v19, v19);
    uint64_t v67 = *(void *)(v0 + 184);
    rootMeanSquaredError<A, B, C>(_:_:)(v70, v61, &type metadata for Double, v41, v41, v83, v19, v19);
    uint64_t v38 = *(void (**)(uint64_t, uint64_t))(v52 + 8);
    v38(v61, v41);
    v38(v70, v41);
    v55(v53, v50);
    v55(v79, v50);
    v38(v48, v41);
    v38(v47, v41);
    v55(v46, v50);
    outlined destroy of MLActivityClassifier.ModelParameters(v42, type metadata accessor for TreeRegressorModel);
    id v39 = *(void *)(v0 + 192);
    char v40 = OBJC_IVAR____TtC8CreateML36TreeRegressorTrainingSessionDelegate_validationMetrics;
    uint64_t v32 = *(void *)(v44 + OBJC_IVAR____TtC8CreateML36TreeRegressorTrainingSessionDelegate_validationMetrics);
    uint64_t v33 = *(void *)(v44 + OBJC_IVAR____TtC8CreateML36TreeRegressorTrainingSessionDelegate_validationMetrics + 8);
    *(void *)(v44 + OBJC_IVAR____TtC8CreateML36TreeRegressorTrainingSessionDelegate_validationMetrics) = v67;
    *(void *)(v44 + v40 + 8) = v39;
    uint64_t v34 = *(_DWORD *)(v44 + v40 + 16);
    *(unsigned char *)(v44 + v40 + 16) = 0;
  }
  outlined consume of MLRegressorMetrics?(v32, v33, v34);
  unint64_t v7 = 1;
LABEL_6:
  uint64_t v62 = v7;
  uint64_t v8 = *(void *)(v0 + 336);
  uint64_t v9 = *(void *)(v0 + 328);
  unint64_t v10 = *(void *)(v0 + 320);
  uint64_t v11 = *(void *)(v0 + 312);
  uint64_t v56 = *(void *)(v0 + 304);
  uint64_t v58 = *(void *)(v0 + 280);
  uint64_t v64 = *(void *)(v0 + 272);
  uint64_t v75 = *(void *)(v0 + 264);
  uint64_t v71 = *(void *)(v0 + 256);
  uint64_t v68 = *(void *)(v0 + 208);
  uint64_t v80 = *(void *)(v0 + 232);
  swift_task_dealloc(*(void *)(v0 + 352));
  swift_task_dealloc(v8);
  swift_task_dealloc(v9);
  swift_task_dealloc(v10);
  swift_task_dealloc(v11);
  swift_task_dealloc(v56);
  swift_task_dealloc(v58);
  swift_task_dealloc(v64);
  swift_task_dealloc(v75);
  swift_task_dealloc(v71);
  swift_task_dealloc(v80);
  swift_task_dealloc(v68);
  return (*(uint64_t (**)(uint64_t, uint64_t))(v0 + 8))(v62, 1);
}

char TreeRegressorTrainingSessionDelegate.saveCheckpoint(to:phase:iteration:)(uint64_t a1, unsigned __int8 *a2)
{
  uint64_t v32 = v2;
  uint64_t v30 = a1;
  int64_t v4 = *(void *)(*(void *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TreeRegressor?)
                             - 8)
                 + 64);
  uint64_t v5 = alloca(v4);
  uint64_t v6 = alloca(v4);
  uint64_t v28 = v25;
  int64_t v7 = *(void *)(*(void *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TreeRegressorModel?)
                             - 8)
                 + 64);
  uint64_t v8 = alloca(v7);
  uint64_t v9 = alloca(v7);
  uint64_t v10 = type metadata accessor for TreeRegressorModel(0);
  int64_t v11 = *(void *)(*(void *)(v10 - 8) + 64);
  uint64_t v12 = alloca(v11);
  uint64_t v13 = alloca(v11);
  uint64_t v27 = v25;
  int v31 = *a2;
  uint64_t v29 = v3;
  uint64_t v14 = v3 + OBJC_IVAR____TtC8CreateML36TreeRegressorTrainingSessionDelegate_model;
  swift_beginAccess(v3 + OBJC_IVAR____TtC8CreateML36TreeRegressorTrainingSessionDelegate_model, v25, 0, 0);
  outlined init with copy of Either<LogisticRegressionClassifier<Float, String>, FullyConnectedNetworkClassifier<Float, String>>(v14, (uint64_t)v25, &demangling cache variable for type metadata for TreeRegressorModel?);
  if (__swift_getEnumTagSinglePayload((uint64_t)v25, 1, v10) == 1)
  {
    outlined destroy of Either<LogisticRegressionClassifier<Float, String>, FullyConnectedNetworkClassifier<Float, String>>((uint64_t)v25, &demangling cache variable for type metadata for TreeRegressorModel?);
    return 0;
  }
  unint64_t v15 = 0xEB0000000064657ALL;
  uint64_t v16 = (uint64_t)v27;
  outlined init with take of MLClassifierMetrics((uint64_t)v25, (uint64_t)v27, type metadata accessor for TreeRegressorModel);
  switch(v31)
  {
    case 0:
      uint64_t v17 = 0x696C616974696E69;
      break;
    case 1:
      uint64_t v17 = 0x6974636172747865;
      goto LABEL_8;
    case 2:
      swift_bridgeObjectRelease(0);
      goto LABEL_11;
    case 3:
      uint64_t v17 = 0x697461756C617665;
LABEL_8:
      unint64_t v15 = 0xEA0000000000676ELL;
      break;
    case 4:
      unint64_t v15 = 0xEB00000000676E69;
      uint64_t v17 = 0x636E657265666E69;
      break;
  }
  char v18 = _stringCompareWithSmolCheck(_:_:expecting:)(v17, v15, 0x676E696E69617274, 0xE800000000000000, 0);
  swift_bridgeObjectRelease(v15);
  if ((v18 & 1) == 0)
  {
    outlined destroy of MLActivityClassifier.ModelParameters(v16, type metadata accessor for TreeRegressorModel);
    return 0;
  }
LABEL_11:
  uint64_t v19 = OBJC_IVAR____TtC8CreateML36TreeRegressorTrainingSessionDelegate_regressor + v29;
  swift_beginAccess(OBJC_IVAR____TtC8CreateML36TreeRegressorTrainingSessionDelegate_regressor + v29, v26, 0, 0);
  uint64_t v20 = (uint64_t)v28;
  outlined init with copy of Either<LogisticRegressionClassifier<Float, String>, FullyConnectedNetworkClassifier<Float, String>>(v19, (uint64_t)v28, &demangling cache variable for type metadata for TreeRegressor?);
  uint64_t v21 = type metadata accessor for TreeRegressor(0);
  if (__swift_getEnumTagSinglePayload(v20, 1, v21) == 1) {
    BUG();
  }
  uint64_t v22 = lazy protocol witness table accessor for type TreeRegressor and conformance TreeRegressor();
  uint64_t v23 = v32;
  SupervisedTabularEstimator.write(_:to:overwrite:)(v16, v30, 1, v21, v22);
  outlined destroy of MLActivityClassifier.ModelParameters(v16, type metadata accessor for TreeRegressorModel);
  char result = outlined destroy of MLActivityClassifier.ModelParameters(v20, type metadata accessor for TreeRegressor);
  if (!v23) {
    return 1;
  }
  return result;
}

uint64_t TreeRegressorTrainingSessionDelegate.save(to:)(uint64_t a1)
{
  uint64_t v19 = v1;
  uint64_t v20 = a1;
  int64_t v3 = *(void *)(*(void *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PersistentParametersForTreeBasedMethods?)
                             - 8)
                 + 64);
  int64_t v4 = alloca(v3);
  uint64_t v5 = alloca(v3);
  uint64_t v6 = type metadata accessor for PersistentParametersForTreeBasedMethods(0);
  int64_t v7 = *(void *)(*(void *)(v6 - 8) + 64);
  uint64_t v8 = alloca(v7);
  uint64_t v9 = alloca(v7);
  uint64_t v10 = OBJC_IVAR____TtC8CreateML36TreeRegressorTrainingSessionDelegate_trainingParameters + v2;
  swift_beginAccess(v10, v18, 0, 0);
  outlined init with copy of Either<LogisticRegressionClassifier<Float, String>, FullyConnectedNetworkClassifier<Float, String>>(v10, (uint64_t)&v17, &demangling cache variable for type metadata for PersistentParametersForTreeBasedMethods?);
  if (__swift_getEnumTagSinglePayload((uint64_t)&v17, 1, v6) == 1)
  {
    outlined destroy of Either<LogisticRegressionClassifier<Float, String>, FullyConnectedNetworkClassifier<Float, String>>((uint64_t)&v17, &demangling cache variable for type metadata for PersistentParametersForTreeBasedMethods?);
    uint64_t v11 = lazy protocol witness table accessor for type MLCreateError and conformance MLCreateError();
    swift_allocError(&type metadata for MLCreateError, v11, 0, 0);
    *(void *)uint64_t v12 = 0xD000000000000031;
    *(void *)(v12 + 8) = "Selected features" + 0x8000000000000000;
    *(_OWORD *)(v12 + 16) = 0;
    *(_OWORD *)(v12 + 32) = 0;
    *(unsigned char *)(v12 + 48) = 2;
    return swift_willThrow(&type metadata for MLCreateError, v11, v12, v13, v14, v15);
  }
  else
  {
    outlined init with take of MLClassifierMetrics((uint64_t)&v17, (uint64_t)&v17, type metadata accessor for PersistentParametersForTreeBasedMethods);
    PersistentParametersForTreeBasedMethods.save(toSessionDirectory:)(v20);
    return outlined destroy of MLActivityClassifier.ModelParameters((uint64_t)&v17, type metadata accessor for PersistentParametersForTreeBasedMethods);
  }
}

NSURL *TreeRegressorTrainingSessionDelegate.restore(from:phase:)(uint64_t a1)
{
  uint64_t v36 = (uint64_t *)v1;
  uint64_t v31 = v2;
  uint64_t v30 = a1;
  int64_t v3 = *(void *)(*(void *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PersistentParametersForTreeBasedMethods?)
                             - 8)
                 + 64);
  int64_t v4 = alloca(v3);
  uint64_t v5 = alloca(v3);
  uint64_t v33 = &v27;
  uint64_t v6 = alloca(v3);
  int64_t v7 = alloca(v3);
  uint64_t v35 = &v27;
  uint64_t v8 = type metadata accessor for URL(0);
  uint64_t v9 = *(void *)(v8 - 8);
  int64_t v10 = *(void *)(v9 + 64);
  uint64_t v11 = alloca(v10);
  uint64_t v12 = alloca(v10);
  uint64_t v32 = type metadata accessor for PersistentParametersForTreeBasedMethods(0);
  int64_t v13 = *(void *)(*(void *)(v32 - 8) + 64);
  uint64_t v14 = alloca(v13);
  uint64_t v15 = alloca(v13);
  uint64_t v34 = &v27;
  uint64_t v16 = alloca(v13);
  uint64_t v17 = alloca(v13);
  (*(void (**)(uint64_t *, uint64_t, uint64_t))(v9 + 16))(&v27, v30, v8);
  uint64_t v18 = (uint64_t)v36;
  char result = PersistentParametersForTreeBasedMethods.init(sessionDirectory:)((uint64_t)&v27);
  if (!v18)
  {
    uint64_t v36 = &v27;
    uint64_t v20 = OBJC_IVAR____TtC8CreateML36TreeRegressorTrainingSessionDelegate_trainingParameters + v31;
    swift_beginAccess(OBJC_IVAR____TtC8CreateML36TreeRegressorTrainingSessionDelegate_trainingParameters + v31, v28, 0, 0);
    uint64_t v21 = (uint64_t)v35;
    outlined init with copy of Either<LogisticRegressionClassifier<Float, String>, FullyConnectedNetworkClassifier<Float, String>>(v20, (uint64_t)v35, &demangling cache variable for type metadata for PersistentParametersForTreeBasedMethods?);
    uint64_t v22 = v21;
    uint64_t v23 = v32;
    if (__swift_getEnumTagSinglePayload(v22, 1, v32) == 1)
    {
      outlined destroy of Either<LogisticRegressionClassifier<Float, String>, FullyConnectedNetworkClassifier<Float, String>>((uint64_t)v35, &demangling cache variable for type metadata for PersistentParametersForTreeBasedMethods?);
      uint64_t v24 = (uint64_t)v33;
      outlined init with take of MLClassifierMetrics((uint64_t)v36, (uint64_t)v33, type metadata accessor for PersistentParametersForTreeBasedMethods);
      __swift_storeEnumTagSinglePayload(v24, 0, 1, v23);
      swift_beginAccess(v20, v29, 33, 0);
      outlined assign with take of MLTrainingSession<MLImageClassifier>.Metadata(v24, v20, &demangling cache variable for type metadata for PersistentParametersForTreeBasedMethods?);
      return (NSURL *)swift_endAccess(v29);
    }
    else
    {
      uint64_t v25 = (uint64_t)v34;
      outlined init with take of MLClassifierMetrics((uint64_t)v35, (uint64_t)v34, type metadata accessor for PersistentParametersForTreeBasedMethods);
      uint64_t v26 = (uint64_t)v36;
      TreeRegressorTrainingSessionDelegate.verifyThatParametersAreCompatible(_:_:)((uint64_t)v36, v25);
      outlined destroy of MLActivityClassifier.ModelParameters(v25, type metadata accessor for PersistentParametersForTreeBasedMethods);
      return (NSURL *)outlined destroy of MLActivityClassifier.ModelParameters(v26, type metadata accessor for PersistentParametersForTreeBasedMethods);
    }
  }
  return result;
}

uint64_t TreeRegressorTrainingSessionDelegate.verifyThatParametersAreCompatible(_:_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v43 = v2;
  uint64_t v3 = type metadata accessor for PersistentParametersForTreeBasedMethods(0);
  uint64_t v4 = *(int *)(v3 + 24);
  uint64_t v5 = *(void *)(a1 + v4);
  uint64_t v6 = *(void *)(a1 + v4 + 8);
  uint64_t v7 = *(void *)(a2 + v4);
  uint64_t v47 = a2;
  uint64_t v8 = *(void *)(a2 + v4 + 8);
  uint64_t v48 = v3;
  if (v5 == v7 && v6 == v8
    || (v46 = v6, char v9 = _stringCompareWithSmolCheck(_:_:expecting:)(v5, v6, v7, v8, 0), v3 = v48, (v9 & 1) != 0))
  {
    uint64_t v10 = *(void *)(a1 + *(int *)(v3 + 28));
    uint64_t v11 = v3;
    swift_bridgeObjectRetain(v10);
    uint64_t v45 = v10;
    uint64_t v12 = specialized Set.init<A>(_:)(v10);
    uint64_t v13 = *(void *)(v47 + *(int *)(v11 + 28));
    swift_bridgeObjectRetain(v13);
    uint64_t v44 = v13;
    uint64_t v14 = specialized Set.init<A>(_:)(v13);
    LOBYTE(v13) = v14;
    char v15 = specialized static Set.== infix(_:_:)(v12, v14);
    swift_bridgeObjectRelease(v12);
    swift_bridgeObjectRelease(v13);
    if (v15)
    {
      static BoostedTreeConfiguration.firstIncompatibility(_:_:)(*(int *)(v48 + 32) + a1, *(int *)(v48 + 32) + v47);
      uint64_t result = outlined init with take of (name: String, originalValue: String, newValue: String)?((uint64_t)v34, (uint64_t)&v35);
      uint64_t v17 = v36;
      if (!v36) {
        return result;
      }
      uint64_t v18 = v35;
      uint64_t v48 = v37;
      uint64_t v46 = v38;
      uint64_t v47 = v39;
      uint64_t v19 = v40;
      uint64_t v20 = lazy protocol witness table accessor for type MLCreateError and conformance MLCreateError();
      swift_allocError(&type metadata for MLCreateError, v20, 0, 0);
      *(void *)uint64_t v21 = v18;
      uint64_t v25 = v48;
    }
    else
    {
      swift_bridgeObjectRetain(v45);
      uint64_t v26 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [String]);
      uint64_t v27 = lazy protocol witness table accessor for type FullyConnectedNetworkClassifier<Float, String> and conformance FullyConnectedNetworkClassifier<A, B>(&lazy protocol witness table cache variable for type [String] and conformance [A], &demangling cache variable for type metadata for [String], (uint64_t)&protocol conformance descriptor for [A]);
      uint64_t v48 = BidirectionalCollection<>.joined(separator:)(8236, 0xE200000000000000, v26, v27);
      uint64_t v46 = v28;
      swift_bridgeObjectRelease(v45);
      swift_bridgeObjectRetain(v44);
      uint64_t v29 = BidirectionalCollection<>.joined(separator:)(8236, 0xE200000000000000, v26, v27);
      uint64_t v31 = v30;
      swift_bridgeObjectRelease(v44);
      uint64_t v41 = v29;
      uint64_t v42 = v31;
      uint64_t v25 = v48;
      uint64_t v47 = String.init<A>(_:)(&v41, &type metadata for String, &protocol witness table for String, &protocol witness table for String);
      uint64_t v19 = v32;
      uint64_t v20 = lazy protocol witness table accessor for type MLCreateError and conformance MLCreateError();
      swift_allocError(&type metadata for MLCreateError, v20, 0, 0);
      *(void *)uint64_t v21 = 0xD000000000000011;
      uint64_t v17 = "Classifier.swift" + 0x8000000000000000;
    }
  }
  else
  {
    uint64_t v41 = v7;
    uint64_t v42 = v8;
    swift_bridgeObjectRetain(v46);
    swift_bridgeObjectRetain(v8);
    uint64_t v47 = String.init<A>(_:)(&v41, &type metadata for String, &protocol witness table for String, &protocol witness table for String);
    uint64_t v25 = v5;
    uint64_t v19 = v33;
    uint64_t v20 = lazy protocol witness table accessor for type MLCreateError and conformance MLCreateError();
    swift_allocError(&type metadata for MLCreateError, v20, 0, 0);
    *(void *)uint64_t v21 = 0x6320746567726154;
    uint64_t v17 = (char *)0xED00006E6D756C6FLL;
  }
  *(void *)(v21 + 8) = v17;
  *(void *)(v21 + 16) = v25;
  *(void *)(v21 + 24) = v46;
  *(void *)(v21 + 32) = v47;
  *(void *)(v21 + 40) = v19;
  *(unsigned char *)(v21 + 48) = 3;
  return swift_willThrow(&type metadata for MLCreateError, v20, v21, v22, v23, v24);
}

uint64_t TreeRegressorTrainingSessionDelegate.deinit()
{
  outlined destroy of MLActivityClassifier.ModelParameters(v0 + OBJC_IVAR____TtC8CreateML36TreeRegressorTrainingSessionDelegate_sessionParameters, type metadata accessor for MLTrainingSessionParameters);
  outlined destroy of Either<LogisticRegressionClassifier<Float, String>, FullyConnectedNetworkClassifier<Float, String>>(v0 + OBJC_IVAR____TtC8CreateML36TreeRegressorTrainingSessionDelegate_trainingParameters, &demangling cache variable for type metadata for PersistentParametersForTreeBasedMethods?);
  uint64_t v1 = v0 + OBJC_IVAR____TtC8CreateML36TreeRegressorTrainingSessionDelegate_trainingData;
  uint64_t v2 = type metadata accessor for DataFrame(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(v1, v2);
  outlined destroy of Either<LogisticRegressionClassifier<Float, String>, FullyConnectedNetworkClassifier<Float, String>>(v0 + OBJC_IVAR____TtC8CreateML36TreeRegressorTrainingSessionDelegate_validationData, &demangling cache variable for type metadata for DataFrame?);
  outlined destroy of Either<LogisticRegressionClassifier<Float, String>, FullyConnectedNetworkClassifier<Float, String>>(v0 + OBJC_IVAR____TtC8CreateML36TreeRegressorTrainingSessionDelegate_regressor, &demangling cache variable for type metadata for TreeRegressor?);
  outlined destroy of Either<LogisticRegressionClassifier<Float, String>, FullyConnectedNetworkClassifier<Float, String>>(v0 + OBJC_IVAR____TtC8CreateML36TreeRegressorTrainingSessionDelegate_model, &demangling cache variable for type metadata for TreeRegressorModel?);
  outlined consume of MLRegressorMetrics?(*(void *)(v0 + OBJC_IVAR____TtC8CreateML36TreeRegressorTrainingSessionDelegate_trainingMetrics), *(void *)(v0 + OBJC_IVAR____TtC8CreateML36TreeRegressorTrainingSessionDelegate_trainingMetrics + 8), *(_DWORD *)(v0 + OBJC_IVAR____TtC8CreateML36TreeRegressorTrainingSessionDelegate_trainingMetrics + 16));
  outlined consume of MLRegressorMetrics?(*(void *)(v0 + OBJC_IVAR____TtC8CreateML36TreeRegressorTrainingSessionDelegate_validationMetrics), *(void *)(v0 + OBJC_IVAR____TtC8CreateML36TreeRegressorTrainingSessionDelegate_validationMetrics + 8), *(_DWORD *)(v0 + OBJC_IVAR____TtC8CreateML36TreeRegressorTrainingSessionDelegate_validationMetrics + 16));
  return v0;
}

uint64_t TreeRegressorTrainingSessionDelegate.__deallocating_deinit()
{
  TreeRegressorTrainingSessionDelegate.deinit();
  return swift_deallocClassInstance(v0, *(unsigned int *)(*(void *)v0 + 48), *(unsigned __int16 *)(*(void *)v0 + 52));
}

uint64_t ObjC metadata update function for TreeRegressorTrainingSessionDelegate()
{
  return type metadata accessor for TreeRegressorTrainingSessionDelegate(0);
}

uint64_t type metadata accessor for TreeRegressorTrainingSessionDelegate(uint64_t a1)
{
  uint64_t result = type metadata singleton initialization cache for TreeRegressorTrainingSessionDelegate;
  if (!type metadata singleton initialization cache for TreeRegressorTrainingSessionDelegate) {
    return swift_getSingletonMetadata(a1, &nominal type descriptor for TreeRegressorTrainingSessionDelegate);
  }
  return result;
}

uint64_t type metadata completion function for TreeRegressorTrainingSessionDelegate(uint64_t a1)
{
  uint64_t result = type metadata accessor for MLTrainingSessionParameters(319);
  if (v2 <= 0x3F)
  {
    v8[0] = *(void *)(result - 8) + 64;
    uint64_t result = type metadata accessor for MLSoundClassifier.PersistentParameters?(319, &lazy cache variable for type metadata for PersistentParametersForTreeBasedMethods?, type metadata accessor for PersistentParametersForTreeBasedMethods);
    if (v3 <= 0x3F)
    {
      v8[1] = *(void *)(result - 8) + 64;
      uint64_t result = type metadata accessor for DataFrame(319);
      if (v4 <= 0x3F)
      {
        _OWORD v8[2] = *(void *)(result - 8) + 64;
        uint64_t result = type metadata accessor for MLSoundClassifier.PersistentParameters?(319, &lazy cache variable for type metadata for DataFrame?, (uint64_t (*)(uint64_t))&type metadata accessor for DataFrame);
        if (v5 <= 0x3F)
        {
          v8[3] = *(void *)(result - 8) + 64;
          uint64_t result = type metadata accessor for MLSoundClassifier.PersistentParameters?(319, &lazy cache variable for type metadata for TreeRegressor?, type metadata accessor for TreeRegressor);
          if (v6 <= 0x3F)
          {
            double v8[4] = *(void *)(result - 8) + 64;
            uint64_t result = type metadata accessor for MLSoundClassifier.PersistentParameters?(319, &lazy cache variable for type metadata for TreeRegressorModel?, type metadata accessor for TreeRegressorModel);
            if (v7 <= 0x3F)
            {
              v8[5] = *(void *)(result - 8) + 64;
              void v8[6] = &unk_34F1B8;
              v8[7] = &unk_34F1B8;
              uint64_t result = swift_updateClassMetadata2(a1, 256, 8, v8, a1 + 80);
              if (!result) {
                return 0;
              }
            }
          }
        }
      }
    }
  }
  return result;
}

void protocol witness for TrainingSessionDelegate.setUp() in conformance TreeRegressorTrainingSessionDelegate()
{
}

void protocol witness for TrainingSessionDelegate.resume(from:) in conformance TreeRegressorTrainingSessionDelegate(Swift::OpaquePointer a1)
{
}

unint64_t protocol witness for TrainingSessionDelegate.itemCount(phase:) in conformance TreeRegressorTrainingSessionDelegate(CreateML::MLPhase a1)
{
  return (unint64_t)TreeRegressorTrainingSessionDelegate.itemCount(phase:)(a1);
}

uint64_t protocol witness for TrainingSessionDelegate.train(from:) in conformance TreeRegressorTrainingSessionDelegate(uint64_t a1)
{
  unint64_t v2 = (void *)swift_task_alloc(dword_3AC4FC);
  *(void *)(v1 + 16) = v2;
  *unint64_t v2 = v1;
  v2[1] = protocol witness for TrainingSessionDelegate.train(from:) in conformance SoundClassifierTrainingSessionDelegate;
  return TreeRegressorTrainingSessionDelegate.train(from:)(a1);
}

uint64_t protocol witness for TrainingSessionDelegate.evaluate(from:) in conformance TreeRegressorTrainingSessionDelegate()
{
  uint64_t v1 = (void *)swift_task_alloc(dword_3AC4F4);
  *(void *)(v0 + 16) = v1;
  void *v1 = v0;
  v1[1] = protocol witness for TrainingSessionDelegate.evaluate(from:) in conformance SoundClassifierTrainingSessionDelegate;
  return TreeRegressorTrainingSessionDelegate.evaluate(from:)();
}

char protocol witness for TrainingSessionDelegate.saveCheckpoint(to:phase:iteration:) in conformance TreeRegressorTrainingSessionDelegate(uint64_t a1, unsigned __int8 *a2)
{
  return TreeRegressorTrainingSessionDelegate.saveCheckpoint(to:phase:iteration:)(a1, a2);
}

uint64_t protocol witness for TrainingSessionCodable.save(to:) in conformance TreeRegressorTrainingSessionDelegate(uint64_t a1)
{
  return TreeRegressorTrainingSessionDelegate.save(to:)(a1);
}

NSURL *protocol witness for TrainingSessionCodable.restore(from:phase:) in conformance TreeRegressorTrainingSessionDelegate(uint64_t a1)
{
  return TreeRegressorTrainingSessionDelegate.restore(from:phase:)(a1);
}

uint64_t specialized closure #1 in BidirectionalCollection.last(where:)(uint64_t a1, uint64_t a2)
{
  if (a1 < 0) {
    BUG();
  }
  if (*(void *)(a2 + 16) <= (unint64_t)a1) {
    BUG();
  }
  uint64_t v3 = v2;
  uint64_t v4 = type metadata accessor for MLCheckpoint(0);
  return outlined init with copy of MLCheckpoint(((*(unsigned __int8 *)(*(void *)(v4 - 8) + 80) + 32) & ~*(unsigned __int8 *)(*(void *)(v4 - 8) + 80))+ a2+ *(void *)(*(void *)(v4 - 8) + 72) * a1, v3, type metadata accessor for MLCheckpoint);
}

uint64_t specialized closure #1 in BidirectionalCollection.last(where:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a1 < 0) {
    BUG();
  }
  if (*(void *)(a2 + 16) <= (unint64_t)a1) {
    BUG();
  }
  uint64_t v4 = v3;
  uint64_t v5 = type metadata accessor for Event(0, a2, a3);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16))(v4, ((*(unsigned __int8 *)(*(void *)(v5 - 8) + 80) + 32) & ~*(unsigned __int8 *)(*(void *)(v5 - 8) + 80))+ a2+ *(void *)(*(void *)(v5 - 8) + 72) * a1, v5);
}

uint64_t partial apply for specialized closure #1 in EventCollector.getLast<A>(metric:type:)()
{
  return specialized closure #1 in EventCollector.getLast<A>(metric:type:)(*(void *)(v0 + 16), *(void *)(v0 + 24));
}

uint64_t partial apply for closure #1 in closure #1 in EventCollector.getLast<A>(metric:type:)(uint64_t a1)
{
  return closure #1 in closure #1 in EventCollector.getLast<A>(metric:type:)(a1, *(void *)(v1 + 16));
}

uint64_t outlined init with copy of MLCheckpoint(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v3 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v3 - 8) + 16))(a2, a1, v3);
  return a2;
}

unint64_t static BlobsFile.round(_:to:)(uint64_t a1, int64_t a2)
{
  BOOL v2 = __OFSUB__(a1, 1);
  uint64_t v3 = a1 - 1;
  if (v2) {
    BUG();
  }
  if (!a2) {
    BUG();
  }
  if (v3 == 0x8000000000000000 && a2 == -1) {
    BUG();
  }
  unint64_t v4 = v3 / a2 + 1;
  if (__OFADD__(1, v3 / a2)) {
    BUG();
  }
  unint64_t v5 = v4 * a2;
  if (!is_mul_ok(v4, a2)) {
    BUG();
  }
  return v5;
}

uint64_t BlobsFile.init()()
{
  uint64_t v1 = v0;
  *(void *)&long long v7 = 0;
  *((void *)&v7 + 1) = 0xC000000000000000;
  *(void *)&v10[0] = 0x200000000;
  memset((char *)v10 + 8, 0, 56);
  uint64_t v8 = 0x200000000;
  *(void *)&v9[0] = 0;
  *(_OWORD *)((char *)v9 + 8) = v10[1];
  *(_OWORD *)((char *)&v9[1] + 8) = v10[2];
  *(_OWORD *)((char *)&v9[2] + 8) = 0uLL;
  *((void *)&v9[3] + 1) = _swiftEmptyArrayStorage;
  specialized Data.append<A>(contentsOf:)(&stru_20.vmsize, 0);
  specialized Data._Representation.withUnsafeMutableBytes<A>(_:)((uint64_t *)&v7, (uint64_t)v10);
  long long v2 = v9[3];
  uint64_t result = v8;
  long long v4 = v9[0];
  long long v5 = v9[1];
  long long v6 = v9[2];
  *(_OWORD *)uint64_t v1 = v7;
  *(void *)(v1 + 16) = result;
  *(_OWORD *)(v1 + 24) = v4;
  *(_OWORD *)(v1 + 40) = v5;
  *(_OWORD *)(v1 + 56) = v6;
  *(_OWORD *)(v1 + 72) = v2;
  return result;
}

Swift::Void __swiftcall BlobsFile.appendBlob(_:)(Swift::OpaquePointer a1)
{
  unint64_t v3 = *((void *)a1._rawValue + 2);
  if (v3 >> 61) {
    BUG();
  }
  int64_t v4 = static BlobsFile.round(_:to:)(4 * v3, 64);
  uint64_t v5 = Data.count.getter(*v1, v1[1]);
  BOOL v7 = __OFADD__(64, v5);
  BOOL v6 = v5 + 64 < 0;
  uint64_t v8 = v5 + 64;
  if (v7) {
    BUG();
  }
  if (v6)
  {
    _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, "Negative value is not representable", 35, 2, "Swift/Integers.swift", 20, 2, 3451, 1);
    BUG();
  }
  if (v4 < 0) {
    BUG();
  }
  *(void *)&long long v22 = 0x2DEADBEEFLL;
  *((void *)&v22 + 1) = v4;
  *(void *)&v23[0] = v8;
  memset((char *)v23 + 8, 0, 40);
  specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
  uint64_t v9 = *(void *)(v1[10] + 16);
  specialized Array._reserveCapacityAssumingUniqueBuffer(oldCount:)(v9);
  uint64_t v10 = v1[10];
  *(void *)(v10 + 16) = v9 + 1;
  v9 <<= 6;
  long long v11 = v22;
  long long v12 = v23[0];
  long long v13 = v23[1];
  *(_OWORD *)(v10 + v9 + 80) = v23[2];
  *(_OWORD *)(v10 + v9 + 64) = v13;
  *(_OWORD *)(v10 + v9 + 48) = v12;
  *(_OWORD *)(v10 + v9 + 32) = v11;
  v1[10] = v10;
  int v14 = *((_DWORD *)v1 + 4) + 1;
  if (*((_DWORD *)v1 + 4) == -1) {
    BUG();
  }
  *((_DWORD *)v1 + 4) = v14;
  int v15 = *((_DWORD *)v1 + 5);
  uint64_t v16 = v1[9];
  v17[0] = v14;
  v17[1] = v15;
  long long v18 = *(_OWORD *)(v1 + 3);
  long long v19 = *(_OWORD *)(v1 + 5);
  long long v20 = *(_OWORD *)(v1 + 7);
  uint64_t v21 = v16;
  static BlobsFile.writeHeader(_:to:)((uint64_t)v17, v1);
  _ss15withUnsafeBytes2of_q0_x_q0_SWq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lF8CreateML12BlobMetadataV_s5NeverOytTg503_s8F42ML9BlobsFileV10appendBlobyySaySfGFySWXEfU_AD0mN0VTf1nnc_n(&v22);
  specialized Array.withUnsafeBytes<A>(_:)((uint64_t)a1._rawValue, (uint64_t)v1, (NSURL *)&v22, v4);
}

char *BlobsFile.floatBlob(at:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  if (a1 < 0) {
    BUG();
  }
  uint64_t v8 = (long long *)v7;
  uint64_t v9 = *(void *)(v7 + 80);
  if (*(void *)(v9 + 16) <= (unint64_t)a1) {
    BUG();
  }
  uint64_t v10 = a1 << 6;
  long long v11 = *(_OWORD *)(v9 + v10 + 32);
  long long v12 = *(_OWORD *)(v9 + v10 + 48);
  long long v13 = *(_OWORD *)(v9 + v10 + 64);
  ML9BlobsFileV9floatBlob2atrS16GSi_tKFAFSWXEfU_0V2ML12BlobMetadataVTf1ncn_n = v28;
  long long v31 = *(_OWORD *)(v9 + v10 + 80);
  long long v30 = v13;
  long long v29 = v12;
  if (BlobMetadata.dataType.getter(v10, a2, a3, a4, a5, a6, v11, *((void *)&v11 + 1)) == 1)
  {
    long long v32 = *v8;
    switch(*((void *)&v32 + 1) >> 62)
    {
      case 0:
        uint64_t v33 = v28;
        ML9BlobsFileV9floatBlob2atrS16GSi_tKFAFSWXEfU_0V2ML12BlobMetadataVTf1ncn_n = _ss15withUnsafeBytes2of_q0_x_q0_SWq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lFs5UInt8V_A13Et_sAC_pSaySfGTg5037_s10Foundation4DataV06InlineB0V15withB35BytesyxxSWKXEKlFxSWKXEfU_SaySfG_TG5SWxsAC_pRi_zRi0_zlyAFIsgyrzo_SiTf1nc_n035_s8CreateML9BlobsFileV9floatBlob2atrS16GSi_tKFAFSWXEfU_0V2ML12BlobMetadataVTf1ncn_n(v32, *((void *)&v32 + 1) & 0xFFFFFFFFFFFFLL, BYTE14(v32), (uint64_t)v28);
        break;
      case 1:
        uint64_t v24 = (int)v32;
        uint64_t v25 = (uint64_t)v32 >> 32;
        if ((uint64_t)v32 >> 32 < (int)v32) {
          BUG();
        }
        uint64_t v26 = *((void *)&v32 + 1) & 0x3FFFFFFFFFFFFFFFLL;
        swift_retain();
        uint64_t v27 = specialized __DataStorage.withUnsafeBytes<A>(in:apply:)(v24, v25, v26, (uint64_t)v28);
        if (v6)
        {
          outlined release of Data((uint64_t)&v32);
          BUG();
        }
        ML9BlobsFileV9floatBlob2atrS16GSi_tKFAFSWXEfU_0V2ML12BlobMetadataVTf1ncn_n = v27;
        outlined release of Data((uint64_t)&v32);
        break;
      case 2:
        uint64_t v21 = *((void *)&v32 + 1) & 0x3FFFFFFFFFFFFFFFLL;
        uint64_t v22 = *(void *)(v32 + 16);
        uint64_t v33 = *(unsigned char **)(v32 + 24);
        swift_retain();
        swift_retain();
        uint64_t v23 = specialized __DataStorage.withUnsafeBytes<A>(in:apply:)(v22, (uint64_t)v33, v21, (uint64_t)v28);
        if (v6)
        {
          swift_release();
          swift_release();
          BUG();
        }
        ML9BlobsFileV9floatBlob2atrS16GSi_tKFAFSWXEfU_0V2ML12BlobMetadataVTf1ncn_n = v23;
        swift_release();
        swift_release();
        break;
      case 3:
        ML9BlobsFileV9floatBlob2atrS16GSi_tKFAFSWXEfU_0V2ML12BlobMetadataVTf1ncn_n = _ss15withUnsafeBytes2of_q0_x_q0_SWq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lFs5UInt8V_A13Et_sAC_pSaySfGTg5037_s10Foundation4DataV06InlineB0V15withB35BytesyxxSWKXEKlFxSWKXEfU_SaySfG_TG5SWxsAC_pRi_zRi0_zlyAFIsgyrzo_SiTf1nc_n035_s8CreateML9BlobsFileV9floatBlob2atrS16GSi_tKFAFSWXEfU_0V2ML12BlobMetadataVTf1ncn_n(0, 0, 0, (uint64_t)v28);
        break;
    }
  }
  else
  {
    uint64_t v15 = lazy protocol witness table accessor for type BlobsFileError and conformance BlobsFileError();
    swift_allocError(&type metadata for BlobsFileError, v15, 0, 0);
    *uint64_t v16 = 2;
    swift_willThrow(&type metadata for BlobsFileError, v15, v16, v17, v18, v19);
  }
  return ML9BlobsFileV9floatBlob2atrS16GSi_tKFAFSWXEfU_0V2ML12BlobMetadataVTf1ncn_n;
}

NSURL *static BlobsFile.writeHeader(_:to:)(uint64_t a1, uint64_t *a2)
{
  uint64_t v2 = *a2;
  unint64_t v3 = a2[1];
  switch(v3 >> 62)
  {
    case 0uLL:
      uint64_t v4 = BYTE6(v3);
      goto LABEL_6;
    case 1uLL:
      LODWORD(v4) = HIDWORD(v2) - v2;
      if (__OFSUB__(HIDWORD(v2), v2)) {
        BUG();
      }
      uint64_t v4 = (int)v4;
      goto LABEL_6;
    case 2uLL:
      uint64_t v5 = *(void *)(v2 + 24);
      BOOL v6 = __OFSUB__(v5, *(void *)(v2 + 16));
      uint64_t v4 = v5 - *(void *)(v2 + 16);
      if (v6) {
        BUG();
      }
LABEL_6:
      if (v4 <= 63) {
        goto LABEL_7;
      }
      return specialized Data._Representation.withUnsafeMutableBytes<A>(_:)(a2, a1);
    case 3uLL:
LABEL_7:
      specialized Data.append<A>(contentsOf:)(&stru_20.vmsize, 0);
      return specialized Data._Representation.withUnsafeMutableBytes<A>(_:)(a2, a1);
  }
}

NSURL *specialized Data.append<A>(contentsOf:)(void *a1, char a2)
{
  uint64_t v38 = a1;
  char v39 = a2;
  uint64_t v36 = a1;
  char v37 = a2;
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Repeated<UInt8>);
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ContiguousBytes);
  if (swift_dynamicCast(v40, &v36, v3, v4, 6))
  {
    outlined init with take of MLIdentifier(v40, (uint64_t)v42);
    uint64_t v5 = v43;
    uint64_t v33 = v44;
    BOOL v6 = alloca(24);
    uint64_t v7 = alloca(32);
    uint64_t v34 = v2;
    __swift_project_boxed_opaque_existential_0Tm(v42, v43);
    dispatch thunk of ContiguousBytes.withUnsafeBytes<A>(_:)(partial apply for closure #1 in Data.append<A>(contentsOf:), &v32, (char *)&type metadata for () + 8, v5, v33);
    __swift_destroy_boxed_opaque_existential_1Tm(v42);
  }
  else
  {
    memset(v40, 0, sizeof(v40));
    uint64_t v41 = 0;
    outlined destroy of ContiguousBytes?((uint64_t)v40);
    uint64_t v8 = v38;
    uint64_t v9 = *v2;
    unint64_t v10 = v2[1];
    switch(v10 >> 62)
    {
      case 0uLL:
        uint64_t v11 = BYTE6(v10);
        uint64_t v12 = BYTE6(v10);
        break;
      case 1uLL:
        if (__OFSUB__(HIDWORD(v9), v9)) {
          BUG();
        }
        uint64_t v12 = HIDWORD(v9) - (int)v9;
        uint64_t v11 = v9 >> 32;
        break;
      case 2uLL:
        uint64_t v11 = *(void *)(v9 + 24);
        uint64_t v12 = v11 - *(void *)(v9 + 16);
        if (__OFSUB__(v11, *(void *)(v9 + 16))) {
          BUG();
        }
        return result;
      case 3uLL:
        uint64_t v11 = 0;
        uint64_t v12 = 0;
        break;
    }
    if (__OFADD__(v38, v11)) {
      BUG();
    }
    if ((uint64_t)v38 + v11 < v11) {
      BUG();
    }
    if (v11 < 0) {
      BUG();
    }
    Data._Representation.resetBytes(in:)();
    uint64_t v33 = &v32;
    long long v13 = alloca(40);
    int v14 = alloca(48);
    uint64_t v34 = (uint64_t *)v12;
    uint64_t v35 = v8;
    uint64_t v36 = &v38;
    uint64_t v15 = specialized Data._Representation.withUnsafeMutableBytes<A>(_:)(partial apply for specialized closure #3 in Data.append<A>(contentsOf:), (uint64_t)&v32);
    if ((void *)v18 == v8)
    {
      uint64_t v19 = v15;
      uint64_t v20 = v17;
      memset(v42, 0, 15);
      if (v17 != v15)
      {
        if (v17 < 0 || v17 >= v15) {
LABEL_24:
        }
          BUG();
        char v21 = v16;
        uint64_t v22 = v15 - 1;
        unsigned __int8 v23 = 0;
        while (1)
        {
          *((unsigned char *)v42 + v23++) = v21;
          if (!v23) {
            BUG();
          }
          if (v23 == 14)
          {
            *(void *)&v40[0] = v42[0];
            DWORD2(v40[0]) = v42[1];
            WORD6(v40[0]) = WORD2(v42[1]);
            Data._Representation.append(contentsOf:)(v40, (char *)v40 + 14);
            if (v22 == v20) {
              return __stack_chk_guard;
            }
            unsigned __int8 v23 = 0;
          }
          else if (v22 == v20)
          {
            *(void *)&v40[0] = v42[0];
            DWORD2(v40[0]) = v42[1];
            WORD6(v40[0]) = WORD2(v42[1]);
            Data._Representation.append(contentsOf:)(v40, (char *)v40 + v23);
            return __stack_chk_guard;
          }
          if (++v20 >= v19) {
            goto LABEL_24;
          }
        }
      }
    }
    else
    {
      uint64_t v24 = *v2;
      unint64_t v25 = (unint64_t)v2[1] >> 62;
      switch(v25)
      {
        case 0uLL:
        case 3uLL:
          uint64_t v26 = 0;
          break;
        case 1uLL:
          uint64_t v26 = (int)v24;
          break;
        case 2uLL:
          uint64_t v26 = *(void *)(v24 + 16);
          break;
      }
      BOOL v27 = __OFADD__(v34, v26);
      uint64_t v28 = (char *)v34 + v26;
      if (v27) {
        BUG();
      }
      BOOL v27 = __OFADD__(v18, v28);
      uint64_t v29 = (uint64_t)&v28[v18];
      if (v27) {
        BUG();
      }
      switch((char)v25)
      {
        case 0:
          JUMPOUT(0x215258);
        case 1:
          uint64_t v30 = v24 >> 32;
          break;
        case 2:
          uint64_t v30 = *(void *)(v24 + 24);
          break;
        case 3:
          uint64_t v30 = 0;
          break;
      }
      if (v30 < v29) {
        BUG();
      }
      Data._Representation.replaceSubrange(_:with:count:)(v29, v30, 0, 0);
    }
  }
  return __stack_chk_guard;
}

char *_ss15withUnsafeBytes2of_q0_x_q0_SWq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lFs5UInt8V_A13Et_sAC_pSaySfGTg5037_s10Foundation4DataV06InlineB0V15withB35BytesyxxSWKXEKlFxSWKXEfU_SaySfG_TG5SWxsAC_pRi_zRi0_zlyAFIsgyrzo_SiTf1nc_n035_s8CreateML9BlobsFileV9floatBlob2atrS16GSi_tKFAFSWXEfU_0V2ML12BlobMetadataVTf1ncn_n(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6 = a1;
  __int16 v7 = a2;
  char v8 = BYTE2(a2);
  char v9 = BYTE3(a2);
  char v10 = BYTE4(a2);
  char v11 = BYTE5(a2);
  uint64_t v4 = *(void *)(a4 + 16);
  if ((v4 | *(void *)(a4 + 8)) < 0) {
    BUG();
  }
  return specialized _copyCollectionToContiguousArray<A>(_:)((char *)&v6 + v4, *(void *)(a4 + 8) >> 2);
}

NSURL *_ss15withUnsafeBytes2of_q0_x_q0_SWq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lF8CreateML12BlobMetadataV_s5NeverOytTg503_s8F42ML9BlobsFileV10appendBlobyySaySfGFySWXEfU_AD0mN0VTf1nnc_n(long long *a1)
{
  long long v1 = *a1;
  long long v2 = a1[1];
  long long v3 = a1[2];
  v6[3] = a1[3];
  _OWORD v6[2] = v3;
  v6[1] = v2;
  v6[0] = v1;
  v8[3] = &type metadata for UnsafeRawBufferPointer;
  double v8[4] = &protocol witness table for UnsafeRawBufferPointer;
  v8[0] = v6;
  v8[1] = &v7;
  uint64_t v4 = __swift_project_boxed_opaque_existential_0Tm(v8, (uint64_t)&type metadata for UnsafeRawBufferPointer);
  Data._Representation.append(contentsOf:)(*v4, v4[1]);
  __swift_destroy_boxed_opaque_existential_1Tm(v8);
  return __stack_chk_guard;
}

NSURL *closure #2 in BlobsFile.appendBlob(_:)(uint64_t a1, uint64_t a2, uint64_t a3, NSURL *a4, uint64_t a5)
{
  uint64_t v9 = a5;
  char v10 = a4;
  v8[3] = &type metadata for UnsafeRawBufferPointer;
  double v8[4] = &protocol witness table for UnsafeRawBufferPointer;
  v8[0] = a1;
  v8[1] = a2;
  uint64_t v5 = __swift_project_boxed_opaque_existential_0Tm(v8, (uint64_t)&type metadata for UnsafeRawBufferPointer);
  Data._Representation.append(contentsOf:)(*v5, v5[1]);
  __swift_destroy_boxed_opaque_existential_1Tm(v8);
  if (a1)
  {
    uint64_t v6 = a2 - a1;
    uint64_t result = v10;
    if ((NSString *)(a2 - a1) >= v10->_urlString) {
      return result;
    }
  }
  else
  {
    uint64_t result = v10;
    if (!v10->_urlString) {
      return result;
    }
    uint64_t v6 = 0;
  }
  if (__OFSUB__(v9, v6)) {
    BUG();
  }
  if (v9 - v6 < 0) {
    BUG();
  }
  return specialized Data.append<A>(contentsOf:)((void *)(v9 - v6), 0);
}

NSURL *specialized Array.withUnsafeBytes<A>(_:)(uint64_t a1, uint64_t a2, NSURL *a3, uint64_t a4)
{
  if (*(void *)(a1 + 16) >> 61) {
    BUG();
  }
  return closure #2 in BlobsFile.appendBlob(_:)(a1 + 32, a1 + 4 * *(void *)(a1 + 16) + 32, a2, a3, a4);
}

uint64_t protocol witness for Error._domain.getter in conformance BlobsFileError()
{
  return Error._domain.getter();
}

uint64_t protocol witness for Error._code.getter in conformance BlobsFileError()
{
  return Error._code.getter();
}

uint64_t protocol witness for Error._userInfo.getter in conformance BlobsFileError()
{
  return Error._userInfo.getter();
}

uint64_t protocol witness for Error._getEmbeddedNSError() in conformance BlobsFileError()
{
  return Error._getEmbeddedNSError()();
}

char *specialized __DataStorage.withUnsafeBytes<A>(in:apply:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5 = __DataStorage._bytes.getter();
  if (v5)
  {
    uint64_t v6 = v5;
    uint64_t v7 = __DataStorage._offset.getter();
    if (__OFSUB__(a1, v7)) {
      BUG();
    }
    uint64_t v8 = a1 - v7 + v6;
  }
  else
  {
    uint64_t v8 = 0;
  }
  __DataStorage._length.getter();
  if (v8)
  {
    uint64_t v9 = *(void *)(a4 + 16);
    if (v9 < 0) {
      BUG();
    }
    char v10 = (char *)(v9 + v8);
  }
  else
  {
    char v10 = 0;
  }
  uint64_t v11 = *(void *)(a4 + 8);
  if (v11 < 0) {
    BUG();
  }
  return specialized _copyCollectionToContiguousArray<A>(_:)(v10, (unint64_t)v11 >> 2);
}

NSURL *specialized Data._Representation.withUnsafeMutableBytes<A>(_:)(uint64_t *a1, uint64_t a2)
{
  long long v2 = (_OWORD *)a2;
  uint64_t v4 = *a1;
  unint64_t v5 = a1[1];
  switch(v5 >> 62)
  {
    case 0uLL:
      unint64_t v6 = *(unsigned int *)(a2 + 8) | ((unint64_t)*(unsigned __int8 *)(a2 + 12) << 32) | ((unint64_t)*(unsigned __int8 *)(a2 + 13) << 40) | ((unint64_t)*(unsigned __int8 *)(a2 + 14) << 48);
      *a1 = *(void *)a2;
      a1[1] = v6;
      break;
    case 1uLL:
      *a1 = 0;
      uint64_t v7 = v5 & 0x3FFFFFFFFFFFFFFFLL;
      a1[1] = 0xC000000000000000;
      uint64_t v21 = v4;
      uint64_t v8 = (int)v4;
      uint64_t v9 = v4 >> 32;
      if (!swift_isUniquelyReferenced_nonNull_native(v7))
      {
        uint64_t v20 = v2;
        BOOL v10 = v9 < (int)v21;
        uint64_t v11 = v9 - (int)v21;
        if (v10) {
          BUG();
        }
        uint64_t v12 = __DataStorage._bytes.getter((int)v21, v11);
        if (v12)
        {
          uint64_t v13 = v12;
          uint64_t v14 = __DataStorage._offset.getter();
          if (__OFSUB__((int)v21, v14)) {
            BUG();
          }
          uint64_t v15 = (int)v21 - v14 + v13;
        }
        else
        {
          uint64_t v15 = 0;
        }
        uint64_t v17 = type metadata accessor for __DataStorage(0);
        swift_allocObject(v17, *(unsigned int *)(v17 + 48), *(unsigned __int16 *)(v17 + 52));
        uint64_t v18 = __DataStorage.init(bytes:length:copy:deallocator:offset:)(v15, v11, 1, 0, 0, (int)v21);
        swift_release();
        uint64_t v8 = (int)v21;
        uint64_t v7 = v18;
        long long v2 = v20;
        uint64_t v9 = v21 >> 32;
      }
      if (v9 < v8) {
        BUG();
      }
      specialized __DataStorage.withUnsafeMutableBytes<A>(in:apply:)(v8, v9, v7, v2);
      *a1 = v21;
      a1[1] = v7 | 0x4000000000000000;
      break;
    case 2uLL:
      uint64_t v22 = *a1;
      Data.LargeSlice.ensureUniqueReference()();
      uint64_t v16 = v5 & 0x3FFFFFFFFFFFFFFFLL;
      specialized __DataStorage.withUnsafeMutableBytes<A>(in:apply:)(*(void *)(v22 + 16), *(void *)(v22 + 24), v16, (_OWORD *)a2);
      *a1 = v22;
      a1[1] = v16 | 0x8000000000000000;
      break;
    case 3uLL:
      return __stack_chk_guard;
  }
  return __stack_chk_guard;
}

uint64_t specialized Data._Representation.withUnsafeMutableBytes<A>(_:)(uint64_t (*a1)(uint64_t, uint64_t), uint64_t a2)
{
  long long v3 = v2;
  uint64_t v6 = *v3;
  unint64_t v7 = v3[1];
  switch(v7 >> 62)
  {
    case 0uLL:
      *(void *)&long long v24 = *v3;
      WORD4(v24) = v7;
      BYTE10(v24) = BYTE2(v7);
      BYTE11(v24) = BYTE3(v7);
      BYTE12(v24) = BYTE4(v7);
      BYTE13(v24) = BYTE5(v7);
      BYTE14(v24) = BYTE6(v7);
      uint64_t result = _ss22withUnsafeMutableBytes2of_q0_xz_q0_Swq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lFs5UInt8V_A13Et_sAC_ps16IndexingIteratorVys8RepeatedVyAEGG_SitTg5037_s10Foundation4DataV06InlineB0V22withbc17BytesyxxSwKXEKlFxs9KXEfU_s16hi4Vys8j4Vys5G11VGG_Sit_TG5SwxsAC_pRi_zRi0_zlyAK_SitIsgyrzo_SiTf1nc_n((uint64_t)&v24, a1, a2, BYTE6(v7));
      unint64_t v9 = DWORD2(v24) | ((unint64_t)BYTE12(v24) << 32) | ((unint64_t)BYTE13(v24) << 40) | ((unint64_t)BYTE14(v24) << 48);
      *long long v3 = v24;
      v3[1] = v9;
      break;
    case 1uLL:
      *long long v3 = 0;
      uint64_t v10 = v7 & 0x3FFFFFFFFFFFFFFFLL;
      v3[1] = 0xC000000000000000;
      uint64_t v22 = v6;
      char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v10);
      uint64_t v12 = v22;
      uint64_t v13 = (int)v22;
      uint64_t v14 = v22 >> 32;
      if (!isUniquelyReferenced_nonNull_native)
      {
        if (v14 < (int)v22) {
          BUG();
        }
        uint64_t v15 = __DataStorage._bytes.getter((int)v22, a1);
        if (v15)
        {
          uint64_t v21 = v15;
          uint64_t v16 = __DataStorage._offset.getter();
          if (__OFSUB__((int)v22, v16)) {
            BUG();
          }
          uint64_t v17 = (int)v22 - v16 + v21;
        }
        else
        {
          uint64_t v17 = 0;
        }
        uint64_t v18 = type metadata accessor for __DataStorage(0);
        swift_allocObject(v18, *(unsigned int *)(v18 + 48), *(unsigned __int16 *)(v18 + 52));
        uint64_t v19 = __DataStorage.init(bytes:length:copy:deallocator:offset:)(v17, v14 - (int)v22, 1, 0, 0, (int)v22);
        swift_release();
        uint64_t v13 = (int)v22;
        uint64_t v10 = v19;
        uint64_t v12 = v22;
      }
      if (v14 < v13) {
        BUG();
      }
      uint64_t v20 = v12;
      uint64_t result = specialized __DataStorage.withUnsafeMutableBytes<A>(in:apply:)(v13, v22 >> 32, a1);
      *long long v3 = v20;
      v3[1] = v10 | 0x4000000000000000;
      break;
    case 2uLL:
      *(void *)&long long v24 = *v3;
      *((void *)&v24 + 1) = v7 & 0x3FFFFFFFFFFFFFFFLL;
      Data.LargeSlice.ensureUniqueReference()();
      uint64_t result = specialized __DataStorage.withUnsafeMutableBytes<A>(in:apply:)(*(void *)(v24 + 16), *(void *)(v24 + 24), a1);
      *long long v3 = v24;
      v3[1] = v7 & 0x3FFFFFFFFFFFFFFFLL | 0x8000000000000000;
      break;
    case 3uLL:
      *(void *)((char *)&v24 + 7) = 0;
      *(void *)&long long v24 = 0;
      uint64_t result = _ss22withUnsafeMutableBytes2of_q0_xz_q0_Swq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lFs5UInt8V_A13Et_sAC_ps16IndexingIteratorVys8RepeatedVyAEGG_SitTg5037_s10Foundation4DataV06InlineB0V22withbc17BytesyxxSwKXEKlFxs9KXEfU_s16hi4Vys8j4Vys5G11VGG_Sit_TG5SwxsAC_pRi_zRi0_zlyAK_SitIsgyrzo_SiTf1nc_n((uint64_t)&v24, a1, a2, 0);
      break;
  }
  return result;
}

uint64_t specialized __DataStorage.withUnsafeMutableBytes<A>(in:apply:)(uint64_t a1, uint64_t a2, uint64_t a3, _OWORD *a4)
{
  uint64_t v5 = __DataStorage._bytes.getter();
  if (!v5) {
    BUG();
  }
  uint64_t v6 = v5;
  uint64_t v7 = __DataStorage._offset.getter();
  uint64_t v8 = a1 - v7;
  if (__OFSUB__(a1, v7)) {
    BUG();
  }
  uint64_t result = __DataStorage._length.getter();
  long long v10 = a4[1];
  long long v11 = a4[2];
  long long v12 = a4[3];
  *(_OWORD *)(v6 + v8) = *a4;
  *(_OWORD *)(v6 + v8 + 16) = v10;
  *(_OWORD *)(v6 + v8 + 32) = v11;
  *(_OWORD *)(v6 + v8 + 48) = v12;
  return result;
}

uint64_t specialized __DataStorage.withUnsafeMutableBytes<A>(in:apply:)(uint64_t a1, uint64_t a2, uint64_t (*a3)(uint64_t, uint64_t))
{
  uint64_t v4 = __DataStorage._bytes.getter();
  if (!v4) {
    BUG();
  }
  uint64_t v5 = v4;
  uint64_t v6 = __DataStorage._offset.getter();
  uint64_t v7 = a1 - v6;
  if (__OFSUB__(a1, v6)) {
    BUG();
  }
  uint64_t v8 = a2 - a1;
  if (__OFSUB__(a2, a1)) {
    BUG();
  }
  uint64_t v9 = __DataStorage._length.getter();
  if (v9 < v8) {
    uint64_t v8 = v9;
  }
  uint64_t result = a3(v7 + v5, v7 + v5 + v8);
  if (!v3) {
    return v11;
  }
  return result;
}

uint64_t _ss22withUnsafeMutableBytes2of_q0_xz_q0_Swq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lFs5UInt8V_A13Et_sAC_ps16IndexingIteratorVys8RepeatedVyAEGG_SitTg5037_s10Foundation4DataV06InlineB0V22withbc17BytesyxxSwKXEKlFxs9KXEfU_s16hi4Vys8j4Vys5G11VGG_Sit_TG5SwxsAC_pRi_zRi0_zlyAK_SitIsgyrzo_SiTf1nc_n(uint64_t a1, uint64_t (*a2)(uint64_t, uint64_t), uint64_t a3, uint64_t a4)
{
  uint64_t result = a2(a1, a4 + a1);
  if (!v4) {
    return v6;
  }
  return result;
}

uint64_t specialized closure #3 in Data.append<A>(contentsOf:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, char a6)
{
  if (a1)
  {
    if (__OFSUB__(a2 - a1, a3)) {
      BUG();
    }
    specialized Sequence._copySequenceContents(initializing:)((uint64_t)v7, (unsigned char *)(a3 + a1), a2 - a1 - a3, a5, a6);
    return v7[0];
  }
  return a5;
}

uint64_t outlined destroy of ContiguousBytes?(uint64_t a1)
{
  uint64_t v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ContiguousBytes?);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v1 - 8) + 8))(a1, v1);
  return a1;
}

uint64_t specialized closure #3 in Data.append<A>(contentsOf:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v7 = v5;
  uint64_t result = specialized closure #3 in Data.append<A>(contentsOf:)(a1, a2, a3, a4, *(void *)a5, *(_DWORD *)(a5 + 8));
  if (!v6)
  {
    *(void *)uint64_t v7 = result;
    *(unsigned char *)(v7 + 8) = v9;
    *(void *)(v7 + 16) = v10;
    *(void *)(v7 + 24) = v11;
  }
  return result;
}

uint64_t partial apply for specialized closure #3 in Data.append<A>(contentsOf:)(uint64_t a1, uint64_t a2)
{
  return specialized closure #3 in Data.append<A>(contentsOf:)(a1, a2, v2[2], v2[3], v2[4]);
}

uint64_t partial apply for closure #1 in Data.append<A>(contentsOf:)()
{
  return Data._Representation.append(contentsOf:)();
}

uint64_t outlined release of Data(uint64_t a1)
{
  return a1;
}

uint64_t storeEnumTagSinglePayload for BlobsFileError(unsigned char *a1, unsigned int a2, unsigned int a3)
{
  LODWORD(result) = 0;
  if (a3 >= 0xFE)
  {
    unsigned int v4 = a3 + 2;
    LODWORD(result) = 1;
    if (v4 >= 0xFF00) {
      LODWORD(result) = 2 * (v4 >= 0xFFFF00) + 2;
    }
  }
  if (a2 > 0xFD)
  {
    unsigned int v5 = a2 - 254;
    int v6 = (v5 >> 8) + 1;
    *a1 = v5;
    uint64_t result = result;
    switch((int)result)
    {
      case 0:
        return result;
      case 1:
        a1[1] = v6;
        break;
      case 2:
        *(_WORD *)(a1 + 1) = v6;
        break;
      case 3:
LABEL_16:
        BUG();
      case 4:
        *(_DWORD *)(a1 + 1) = v6;
        break;
    }
  }
  else
  {
    uint64_t result = result;
    switch((int)result)
    {
      case 0:
        goto LABEL_11;
      case 1:
        a1[1] = 0;
        goto LABEL_11;
      case 2:
        *(_WORD *)(a1 + 1) = 0;
        goto LABEL_11;
      case 3:
        goto LABEL_16;
      case 4:
        *(_DWORD *)(a1 + 1) = 0;
LABEL_11:
        if (a2) {
          *a1 = a2 + 2;
        }
        break;
      case 5:
        JUMPOUT(0x215E44);
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for BlobsFileError()
{
  return &type metadata for BlobsFileError;
}

uint64_t destroy for BlobsFile(uint64_t *a1)
{
  return swift_bridgeObjectRelease(a1[10]);
}

uint64_t initializeWithCopy for BlobsFile(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)a2;
  unint64_t v4 = *(void *)(a2 + 8);
  outlined copy of Data._Representation(*(void *)a2, v4);
  *(void *)a1 = v3;
  *(void *)(a1 + 8) = v4;
  long long v5 = *(_OWORD *)(a2 + 32);
  long long v6 = *(_OWORD *)(a2 + 48);
  long long v7 = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  *(_OWORD *)(a1 + 32) = v5;
  *(_OWORD *)(a1 + 48) = v6;
  *(_OWORD *)(a1 + 64) = v7;
  uint64_t v8 = *(void *)(a2 + 80);
  *(void *)(a1 + 80) = v8;
  swift_bridgeObjectRetain(v8);
  return a1;
}

uint64_t assignWithCopy for BlobsFile(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)a2;
  unint64_t v5 = *(void *)(a2 + 8);
  outlined copy of Data._Representation(*(void *)a2, v5);
  uint64_t v6 = *(void *)a1;
  unint64_t v7 = *(void *)(a1 + 8);
  *(void *)a1 = v4;
  *(void *)(a1 + 8) = v5;
  outlined consume of Data._Representation(v6, v7);
  *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
  *(_DWORD *)(a1 + 20) = *(_DWORD *)(a2 + 20);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  *(void *)(a1 + 56) = *(void *)(a2 + 56);
  *(void *)(a1 + 64) = *(void *)(a2 + 64);
  *(void *)(a1 + 72) = *(void *)(a2 + 72);
  uint64_t v8 = *(void *)(a2 + 80);
  uint64_t v9 = *(void *)(a1 + 80);
  *(void *)(a1 + 80) = v8;
  swift_bridgeObjectRetain(v8);
  swift_bridgeObjectRelease(v9);
  return a1;
}

uint64_t assignWithTake for BlobsFile(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)a1;
  unint64_t v5 = *(void *)(a1 + 8);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  outlined consume of Data._Representation(v4, v5);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
  *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
  *(void *)(a1 + 72) = *(void *)(a2 + 72);
  uint64_t v6 = *(void *)(a1 + 80);
  *(void *)(a1 + 80) = *(void *)(a2 + 80);
  swift_bridgeObjectRelease(v6);
  return a1;
}

uint64_t getEnumTagSinglePayload for BlobsFile(uint64_t a1, int a2)
{
  if (a2)
  {
    if (a2 < 0 && *(unsigned char *)(a1 + 88)) {
      int v2 = *(_DWORD *)a1 + 0x7FFFFFFF;
    }
    else {
      int v2 = (*(void *)(a1 + 80) & 0xFFFFFFFF00000001) != 0 ? -1 : *(void *)(a1 + 80) >> 1;
    }
  }
  else
  {
    int v2 = -1;
  }
  return (v2 + 1);
}

void storeEnumTagSinglePayload for BlobsFile(uint64_t a1, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(a1 + 72) = 0;
    *(_OWORD *)(a1 + 56) = 0;
    *(_OWORD *)(a1 + 40) = 0;
    *(_OWORD *)(a1 + 24) = 0;
    *(_OWORD *)(a1 + 8) = 0;
    *(void *)a1 = a2 + 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(a1 + 88) = 1;
    }
  }
  else
  {
    if (a3 < 0) {
      *(unsigned char *)(a1 + 88) = 0;
    }
    if (a2) {
      *(void *)(a1 + 80) = 2 * (a2 - 1);
    }
  }
}

ValueMetadata *type metadata accessor for BlobsFile()
{
  return &type metadata for BlobsFile;
}

uint64_t base witness table accessor for Equatable in BlobsFileError()
{
  return lazy protocol witness table accessor for type BlobsFileError and conformance BlobsFileError();
}

void *initializeBufferWithCopyOfBuffer for MLStyleTransfer.PersistentParameters(void *a1, char *a2, int *a3)
{
  uint64_t v3 = a1;
  int v4 = *(_DWORD *)(*((void *)a3 - 1) + 80);
  if ((v4 & 0x20000) != 0)
  {
    uint64_t v13 = *(void *)a2;
    *uint64_t v3 = *(void *)a2;
    uint64_t v3 = (void *)(v13 + ((v4 + 16) & ~v4));
    swift_retain();
  }
  else
  {
    uint64_t v6 = type metadata accessor for URL(0);
    uint64_t v15 = a3;
    unint64_t v7 = *(void (**)(char *, char *, uint64_t))(*(void *)(v6 - 8) + 16);
    v7((char *)a1, a2, v6);
    uint64_t v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (styleImage: URL, contentDirectory: URL, processingOption: VNImageCropAndScaleOption?));
    v7((char *)a1 + *(int *)(v8 + 48), &a2[*(int *)(v8 + 48)], v6);
    uint64_t v9 = *(int *)(v8 + 64);
    *((unsigned char *)a1 + v9 + 8) = a2[v9 + 8];
    *(void *)((char *)a1 + v9) = *(void *)&a2[v9];
    *((unsigned char *)a1 + v15[5]) = a2[v15[5]];
    uint64_t v10 = v15[6];
    __dst = (char *)a1 + v10;
    uint64_t v11 = &a2[v10];
    if (__swift_getEnumTagSinglePayload((uint64_t)v11, 1, v6))
    {
      uint64_t v12 = type metadata accessor for MLStyleTransfer.ModelParameters.ValidationData(0);
      memcpy(__dst, v11, *(void *)(*(void *)(v12 - 8) + 64));
    }
    else
    {
      v7(__dst, v11, v6);
      __swift_storeEnumTagSinglePayload((uint64_t)__dst, 0, 1, v6);
    }
    *(void *)((char *)a1 + v15[7]) = *(void *)&a2[v15[7]];
    *(void *)((char *)a1 + v15[8]) = *(void *)&a2[v15[8]];
    *((unsigned char *)a1 + v15[9]) = a2[v15[9]];
  }
  return v3;
}

uint64_t destroy for MLStyleTransfer.PersistentParameters(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = type metadata accessor for URL(0);
  uint64_t v3 = *(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8);
  v3(a1, v2);
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (styleImage: URL, contentDirectory: URL, processingOption: VNImageCropAndScaleOption?));
  v3(a1 + *(int *)(v4 + 48), v2);
  uint64_t v5 = a1 + *(int *)(a2 + 24);
  uint64_t result = __swift_getEnumTagSinglePayload(v5, 1, v2);
  if (!result) {
    return v3(v5, v2);
  }
  return result;
}

char *initializeWithCopy for MLStyleTransfer.PersistentParameters(char *a1, char *a2, int *a3)
{
  uint64_t v3 = type metadata accessor for URL(0);
  uint64_t v4 = *(void (**)(void *, const void *, uint64_t))(*(void *)(v3 - 8) + 16);
  v4(a1, a2, v3);
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (styleImage: URL, contentDirectory: URL, processingOption: VNImageCropAndScaleOption?));
  v4(&a1[*(int *)(v5 + 48)], &a2[*(int *)(v5 + 48)], v3);
  uint64_t v6 = *(int *)(v5 + 64);
  a1[v6 + 8] = a2[v6 + 8];
  *(void *)&a1[v6] = *(void *)&a2[v6];
  a1[a3[5]] = a2[a3[5]];
  uint64_t v7 = a3[6];
  __dst = &a1[v7];
  uint64_t v8 = &a2[v7];
  if (__swift_getEnumTagSinglePayload((uint64_t)v8, 1, v3))
  {
    uint64_t v9 = type metadata accessor for MLStyleTransfer.ModelParameters.ValidationData(0);
    memcpy(__dst, v8, *(void *)(*(void *)(v9 - 8) + 64));
  }
  else
  {
    v4(__dst, v8, v3);
    __swift_storeEnumTagSinglePayload((uint64_t)__dst, 0, 1, v3);
  }
  *(void *)&a1[a3[7]] = *(void *)&a2[a3[7]];
  *(void *)&a1[a3[8]] = *(void *)&a2[a3[8]];
  a1[a3[9]] = a2[a3[9]];
  return a1;
}

char *assignWithCopy for MLStyleTransfer.PersistentParameters(char *a1, char *a2, int *a3)
{
  uint64_t v4 = type metadata accessor for URL(0);
  uint64_t v17 = *(void *)(v4 - 8);
  uint64_t v5 = *(void (**)(void *, const void *, uint64_t))(v17 + 24);
  v5(a1, a2, v4);
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (styleImage: URL, contentDirectory: URL, processingOption: VNImageCropAndScaleOption?));
  uint64_t v15 = v5;
  v5(&a1[*(int *)(v6 + 48)], &a2[*(int *)(v6 + 48)], v4);
  uint64_t v7 = *(int *)(v6 + 64);
  a1[v7 + 8] = a2[v7 + 8];
  *(void *)&a1[v7] = *(void *)&a2[v7];
  a1[a3[5]] = a2[a3[5]];
  uint64_t v8 = a3[6];
  uint64_t v9 = &a1[v8];
  uint64_t v10 = &a2[v8];
  LODWORD(v5) = __swift_getEnumTagSinglePayload((uint64_t)v9, 1, v4);
  int EnumTagSinglePayload = __swift_getEnumTagSinglePayload((uint64_t)v10, 1, v4);
  if (v5)
  {
    if (!EnumTagSinglePayload)
    {
      (*(void (**)(char *, char *, uint64_t))(v17 + 16))(v9, v10, v4);
      __swift_storeEnumTagSinglePayload((uint64_t)v9, 0, 1, v4);
      goto LABEL_9;
    }
    size_t v13 = *(void *)(*(void *)(type metadata accessor for MLStyleTransfer.ModelParameters.ValidationData(0) - 8)
                    + 64);
  }
  else
  {
    if (!EnumTagSinglePayload)
    {
      v15(v9, v10, v4);
      goto LABEL_9;
    }
    (*(void (**)(char *, uint64_t, uint64_t, void (*)(void *, const void *, uint64_t)))(v17 + 8))(v9, v4, v12, v15);
    size_t v13 = *(void *)(*(void *)(type metadata accessor for MLStyleTransfer.ModelParameters.ValidationData(0) - 8)
                    + 64);
  }
  memcpy(v9, v10, v13);
LABEL_9:
  *(void *)&a1[a3[7]] = *(void *)&a2[a3[7]];
  *(void *)&a1[a3[8]] = *(void *)&a2[a3[8]];
  a1[a3[9]] = a2[a3[9]];
  return a1;
}

char *initializeWithTake for MLStyleTransfer.PersistentParameters(char *a1, char *a2, int *a3)
{
  uint64_t v3 = type metadata accessor for URL(0);
  uint64_t v4 = *(void (**)(void *, const void *, uint64_t))(*(void *)(v3 - 8) + 32);
  v4(a1, a2, v3);
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (styleImage: URL, contentDirectory: URL, processingOption: VNImageCropAndScaleOption?));
  v4(&a1[*(int *)(v5 + 48)], &a2[*(int *)(v5 + 48)], v3);
  uint64_t v6 = *(int *)(v5 + 64);
  a1[v6 + 8] = a2[v6 + 8];
  *(void *)&a1[v6] = *(void *)&a2[v6];
  a1[a3[5]] = a2[a3[5]];
  uint64_t v7 = a3[6];
  __dst = &a1[v7];
  uint64_t v8 = &a2[v7];
  if (__swift_getEnumTagSinglePayload((uint64_t)v8, 1, v3))
  {
    uint64_t v9 = type metadata accessor for MLStyleTransfer.ModelParameters.ValidationData(0);
    memcpy(__dst, v8, *(void *)(*(void *)(v9 - 8) + 64));
  }
  else
  {
    v4(__dst, v8, v3);
    __swift_storeEnumTagSinglePayload((uint64_t)__dst, 0, 1, v3);
  }
  *(void *)&a1[a3[7]] = *(void *)&a2[a3[7]];
  *(void *)&a1[a3[8]] = *(void *)&a2[a3[8]];
  a1[a3[9]] = a2[a3[9]];
  return a1;
}

char *assignWithTake for MLStyleTransfer.PersistentParameters(char *a1, char *a2, int *a3)
{
  uint64_t v4 = type metadata accessor for URL(0);
  uint64_t v17 = *(void *)(v4 - 8);
  uint64_t v5 = *(void (**)(void *, const void *, uint64_t))(v17 + 40);
  v5(a1, a2, v4);
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (styleImage: URL, contentDirectory: URL, processingOption: VNImageCropAndScaleOption?));
  uint64_t v15 = v5;
  v5(&a1[*(int *)(v6 + 48)], &a2[*(int *)(v6 + 48)], v4);
  uint64_t v7 = *(int *)(v6 + 64);
  a1[v7 + 8] = a2[v7 + 8];
  *(void *)&a1[v7] = *(void *)&a2[v7];
  a1[a3[5]] = a2[a3[5]];
  uint64_t v8 = a3[6];
  uint64_t v9 = &a1[v8];
  uint64_t v10 = &a2[v8];
  LODWORD(v5) = __swift_getEnumTagSinglePayload((uint64_t)v9, 1, v4);
  int EnumTagSinglePayload = __swift_getEnumTagSinglePayload((uint64_t)v10, 1, v4);
  if (v5)
  {
    if (!EnumTagSinglePayload)
    {
      (*(void (**)(char *, char *, uint64_t))(v17 + 32))(v9, v10, v4);
      __swift_storeEnumTagSinglePayload((uint64_t)v9, 0, 1, v4);
      goto LABEL_9;
    }
    size_t v13 = *(void *)(*(void *)(type metadata accessor for MLStyleTransfer.ModelParameters.ValidationData(0) - 8)
                    + 64);
  }
  else
  {
    if (!EnumTagSinglePayload)
    {
      v15(v9, v10, v4);
      goto LABEL_9;
    }
    (*(void (**)(char *, uint64_t, uint64_t, void (*)(void *, const void *, uint64_t)))(v17 + 8))(v9, v4, v12, v15);
    size_t v13 = *(void *)(*(void *)(type metadata accessor for MLStyleTransfer.ModelParameters.ValidationData(0) - 8)
                    + 64);
  }
  memcpy(v9, v10, v13);
LABEL_9:
  *(void *)&a1[a3[7]] = *(void *)&a2[a3[7]];
  *(void *)&a1[a3[8]] = *(void *)&a2[a3[8]];
  a1[a3[9]] = a2[a3[9]];
  return a1;
}

uint64_t getEnumTagSinglePayload for MLStyleTransfer.PersistentParameters(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_2167B1);
}

uint64_t sub_2167B1(uint64_t a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4 = a1;
  if (*(_DWORD *)(*(void *)(type metadata accessor for MLStyleTransfer.DataSource(0) - 8) + 84) == a2)
  {
    uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (styleImage: URL, contentDirectory: URL, processingOption: VNImageCropAndScaleOption?));
    return __swift_getEnumTagSinglePayload(v4, a2, v5);
  }
  if (a2 != 254)
  {
    uint64_t v5 = type metadata accessor for MLStyleTransfer.ModelParameters.ValidationData(0);
    uint64_t v4 = *(int *)(a3 + 24) + a1;
    return __swift_getEnumTagSinglePayload(v4, a2, v5);
  }
  unsigned int v6 = *(unsigned __int8 *)(a1 + *(int *)(a3 + 20));
  uint64_t result = 0;
  if (v6 >= 2) {
    return v6 - 1;
  }
  return result;
}

uint64_t storeEnumTagSinglePayload for MLStyleTransfer.PersistentParameters(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_21683E);
}

uint64_t sub_21683E(uint64_t a1, unsigned int a2, int a3, uint64_t a4)
{
  uint64_t v6 = a1;
  if (*(_DWORD *)(*(void *)(type metadata accessor for MLStyleTransfer.DataSource(0) - 8) + 84) == a3)
  {
    uint64_t v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (styleImage: URL, contentDirectory: URL, processingOption: VNImageCropAndScaleOption?));
  }
  else
  {
    if (a3 == 254)
    {
      uint64_t result = *(int *)(a4 + 20);
      *(unsigned char *)(a1 + result) = a2 + 1;
      return result;
    }
    uint64_t v7 = type metadata accessor for MLStyleTransfer.ModelParameters.ValidationData(0);
    uint64_t v6 = *(int *)(a4 + 24) + a1;
  }
  return __swift_storeEnumTagSinglePayload(v6, a2, a2, v7);
}

uint64_t type metadata accessor for MLStyleTransfer.PersistentParameters(uint64_t a1)
{
  uint64_t result = type metadata singleton initialization cache for MLStyleTransfer.PersistentParameters;
  if (!type metadata singleton initialization cache for MLStyleTransfer.PersistentParameters) {
    return swift_getSingletonMetadata(a1, &nominal type descriptor for MLStyleTransfer.PersistentParameters);
  }
  return result;
}

uint64_t type metadata completion function for MLStyleTransfer.PersistentParameters(uint64_t a1)
{
  uint64_t result = type metadata accessor for URL(319);
  if (v2 <= 0x3F)
  {
    swift_getTupleTypeLayout3(v4, *(void *)(result - 8) + 64, *(void *)(result - 8) + 64, "\t");
    v5[0] = v4;
    v5[1] = &unk_34F2F0;
    uint64_t result = type metadata accessor for MLStyleTransfer.ModelParameters.ValidationData(319);
    if (v3 <= 0x3F)
    {
      v5[2] = *(void *)(result - 8) + 64;
      v5[3] = (char *)&value witness table for Builtin.Int64 + 64;
      void v5[4] = (char *)&value witness table for Builtin.Int64 + 64;
      v5[5] = &unk_34F2F0;
      swift_initStructMetadata(a1, 256, 6, v5, a1 + 16);
      return 0;
    }
  }
  return result;
}

NSURL *MLStyleTransfer.PersistentParameters.save(toSessionDirectory:)(uint64_t a1)
{
  uint64_t v99 = v1;
  uint64_t v108 = a1;
  int64_t v3 = *(void *)(*(void *)(type metadata accessor for MLStyleTransfer.ModelParameters.ValidationData(0) - 8) + 64);
  uint64_t v4 = alloca(v3);
  uint64_t v5 = alloca(v3);
  uint64_t v97 = v95;
  uint64_t v110 = type metadata accessor for URL(0);
  uint64_t v111 = *(void *)(v110 - 8);
  int64_t v6 = *(void *)(v111 + 64);
  uint64_t v7 = alloca(v6);
  uint64_t v8 = alloca(v6);
  uint64_t v106 = v95;
  uint64_t v9 = alloca(v6);
  uint64_t v10 = alloca(v6);
  uint64_t v103 = v95;
  uint64_t v11 = alloca(v6);
  uint64_t v12 = alloca(v6);
  uint64_t v105 = v95;
  size_t v13 = alloca(v6);
  uint64_t v14 = alloca(v6);
  uint64_t v109 = v95;
  uint64_t v15 = alloca(v6);
  uint64_t v16 = alloca(v6);
  int64_t v17 = *(void *)(*(void *)(type metadata accessor for MLStyleTransfer.DataSource(0) - 8) + 64);
  uint64_t v18 = alloca(v17);
  uint64_t v19 = alloca(v17);
  uint64_t v96 = (char *)&type metadata for Any + 8;
  uint64_t v117 = Dictionary.init(dictionaryLiteral:)(_swiftEmptyArrayStorage, &type metadata for String, (char *)&type metadata for Any + 8, &protocol witness table for String);
  uint64_t v98 = v2;
  outlined init with copy of MLTrainingSessionParameters(v2, (uint64_t)v95, type metadata accessor for MLStyleTransfer.DataSource);
  uint64_t v20 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (styleImage: URL, contentDirectory: URL, processingOption: VNImageCropAndScaleOption?));
  uint64_t v21 = &v95[*(int *)(v20 + 48)];
  uint64_t v22 = *(int *)(v20 + 64);
  uint64_t v102 = *(void **)&v95[v22];
  char v112 = v95[v22 + 8];
  unsigned __int8 v23 = *(void (**)(unsigned char *, uint64_t, uint64_t))(v111 + 32);
  uint64_t v24 = v110;
  v23(v95, (uint64_t)v95, v110);
  unint64_t v25 = v109;
  uint64_t v100 = v23;
  v23(v109, (uint64_t)v21, v24);
  uint64_t v104 = v95;
  uint64_t v26 = (void *)URL.path.getter(v25);
  unint64_t v107 = v27;
  id v118 = v26;
  unint64_t v119 = v27;
  uint64_t v28 = URL.path.getter(v25);
  LOBYTE(v24) = v29;
  uint64_t v115 = v28;
  uint64_t v116 = v29;
  uint64_t v113 = 0;
  unint64_t v114 = 0xE000000000000000;
  uint64_t v30 = lazy protocol witness table accessor for type String and conformance String();
  uint64_t v31 = StringProtocol.replacingOccurrences<A, B>(of:with:options:range:)(&v115, &v113, 0, 0, 0, 1, &type metadata for String, &type metadata for String, &type metadata for String, v30, v30, v30);
  uint64_t v33 = v32;
  swift_bridgeObjectRelease(v107);
  swift_bridgeObjectRelease(v24);
  uint64_t v34 = v105;
  URL.init(fileURLWithPath:)(v31, v33);
  swift_bridgeObjectRelease(v33);
  uint64_t v35 = (void *)URL.path.getter(v33);
  unint64_t v37 = v36;
  uint64_t v111 = *(void *)(v111 + 8);
  ((void (*)(unsigned char *, uint64_t))v111)(v34, v110);
  uint64_t v120 = &type metadata for String;
  id v118 = v35;
  unint64_t v119 = v37;
  specialized Dictionary.subscript.setter((uint64_t)&v118, 0x6D695F656C797473, 0xEB00000000656761);
  uint64_t v38 = (void *)URL.path.getter(&v118);
  unint64_t v107 = v39;
  id v118 = v38;
  unint64_t v119 = v39;
  uint64_t v40 = URL.path.getter(&v118);
  LOBYTE(v37) = v41;
  uint64_t v115 = v40;
  uint64_t v116 = v41;
  uint64_t v113 = 0;
  unint64_t v114 = 0xE000000000000000;
  uint64_t v101 = v30;
  uint64_t v42 = StringProtocol.replacingOccurrences<A, B>(of:with:options:range:)(&v115, &v113, 0, 0, 0, 1, &type metadata for String, &type metadata for String, &type metadata for String, v30, v30, v30);
  uint64_t v44 = v43;
  swift_bridgeObjectRelease(v107);
  uint64_t v45 = v110;
  swift_bridgeObjectRelease(v37);
  uint64_t v46 = v105;
  URL.init(fileURLWithPath:)(v42, v44);
  swift_bridgeObjectRelease(v44);
  uint64_t v47 = (void *)URL.path.getter(v44);
  unint64_t v49 = v48;
  uint64_t v50 = v46;
  uint64_t v51 = (void (*)(unsigned char *, uint64_t))v111;
  ((void (*)(unsigned char *, uint64_t))v111)(v50, v45);
  uint64_t v120 = &type metadata for String;
  id v118 = v47;
  unint64_t v119 = v49;
  specialized Dictionary.subscript.setter((uint64_t)&v118, 0xD000000000000011, (uint64_t)("sing the style image URL." + 0x8000000000000000));
  if (v112 != 1)
  {
    uint64_t v120 = &type metadata for UInt;
    id v118 = v102;
    specialized Dictionary.subscript.setter((uint64_t)&v118, 0xD000000000000011, (uint64_t)("sing the content directory URL." + 0x8000000000000000));
  }
  v51(v109, v45);
  v51(v104, v45);
  uint64_t v52 = (int *)type metadata accessor for MLStyleTransfer.PersistentParameters(0);
  uint64_t v53 = v98;
  uint64_t v54 = *(unsigned __int8 *)(v98 + v52[5]);
  uint64_t v55 = 7237219;
  if (*(unsigned char *)(v98 + v52[5])) {
    uint64_t v55 = 0x6574694C6E6E63;
  }
  uint64_t v120 = &type metadata for String;
  id v118 = (id)v55;
  unint64_t v119 = (v54 << 58) | 0xE300000000000000;
  specialized Dictionary.subscript.setter((uint64_t)&v118, 0x687469726F676C61, 0xE90000000000006DLL);
  uint64_t v56 = *(void **)(v53 + v52[7]);
  uint64_t v120 = &type metadata for Int;
  id v118 = v56;
  specialized Dictionary.subscript.setter((uint64_t)&v118, 0x645F6C6574786574, 0xEE00797469736E65);
  uint64_t v57 = *(void **)(v53 + v52[8]);
  uint64_t v120 = &type metadata for Int;
  id v118 = v57;
  specialized Dictionary.subscript.setter((uint64_t)&v118, 0x74735F656C797473, 0xEE006874676E6572);
  int v58 = *(unsigned __int8 *)(v53 + v52[9]);
  uint64_t v59 = 1869903201;
  if (*(unsigned char *)(v53 + v52[9])) {
    uint64_t v59 = 7696483;
  }
  uint64_t v120 = &type metadata for String;
  id v118 = (id)v59;
  unint64_t v119 = ((unint64_t)(v58 ^ 1u) << 56) - 0x1D00000000000000;
  specialized Dictionary.subscript.setter((uint64_t)&v118, 0x656369766564, 0xE600000000000000);
  uint64_t v60 = (uint64_t)v97;
  outlined init with copy of MLTrainingSessionParameters(v53 + v52[6], (uint64_t)v97, type metadata accessor for MLStyleTransfer.ModelParameters.ValidationData);
  uint64_t v61 = v110;
  if (__swift_getEnumTagSinglePayload(v60, 1, v110) == 1)
  {
    outlined destroy of MLStyleTransfer.ModelParameters.ValidationData(v60);
  }
  else
  {
    uint64_t v62 = v103;
    v100(v103, v60, v61);
    uint64_t v63 = (void *)URL.path.getter(v62);
    char v65 = v64;
    id v118 = v63;
    unint64_t v119 = v64;
    uint64_t v66 = URL.path.getter(v62);
    char v68 = v67;
    uint64_t v115 = v66;
    uint64_t v116 = v67;
    uint64_t v113 = 0;
    unint64_t v114 = 0xE000000000000000;
    uint64_t v69 = StringProtocol.replacingOccurrences<A, B>(of:with:options:range:)(&v115, &v113, 0, 0, 0, 1, &type metadata for String, &type metadata for String, &type metadata for String, v101, v101, v101);
    uint64_t v71 = v70;
    swift_bridgeObjectRelease(v65);
    swift_bridgeObjectRelease(v68);
    uint64_t v72 = v105;
    URL.init(fileURLWithPath:)(v69, v71);
    swift_bridgeObjectRelease(v71);
    uint64_t v73 = (void *)URL.path.getter(v71);
    unint64_t v75 = v74;
    uint64_t v76 = v72;
    uint64_t v77 = v110;
    uint64_t v78 = (void (*)(unsigned char *, uint64_t))v111;
    ((void (*)(unsigned char *, uint64_t))v111)(v76, v110);
    uint64_t v120 = &type metadata for String;
    id v118 = v73;
    unint64_t v119 = v75;
    specialized Dictionary.subscript.setter((uint64_t)&v118, 0x69746164696C6176, 0xEA00000000006E6FLL);
    v78(v103, v77);
  }
  uint64_t v79 = objc_opt_self(NSPropertyListSerialization);
  char v80 = v117;
  Class isa = Dictionary._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease(v80);
  id v118 = 0;
  id v82 = [v79 dataWithPropertyList:isa format:200 options:0 error:&v118];
  id v83 = v82;

  id v84 = v118;
  if (v83)
  {
    uint64_t v85 = static Data._unconditionallyBridgeFromObjectiveC(_:)(v83);
    unint64_t v87 = v86;

    URL.appendingPathComponent(_:)(0xD000000000000010, "ObjectDetectorMetrics." + 0x8000000000000000);
    uint64_t v88 = v106;
    Data.write(to:options:)(v106, 0, v85, v87);
    ((void (*)(unsigned char *, uint64_t))v111)(v88, v110);
    outlined consume of Data._Representation(v85, v87);
  }
  else
  {
    uint64_t v89 = v84;
    _convertNSErrorToError(_:)(v84);

    swift_willThrow(v89, "dataWithPropertyList:format:options:error:", v90, v91, v92, v93);
  }
  return __stack_chk_guard;
}

NSURL *MLStyleTransfer.PersistentParameters.init(sessionDirectory:)(uint64_t a1)
{
  uint64_t v128 = v2;
  uint64_t v131 = v1;
  uint64_t v3 = type metadata accessor for URL(0);
  uint64_t v4 = *(void *)(v3 - 8);
  int64_t v5 = *(void *)(v4 + 64);
  int64_t v6 = alloca(v5);
  uint64_t v7 = alloca(v5);
  char v126 = &v122;
  uint64_t v8 = alloca(v5);
  uint64_t v9 = alloca(v5);
  char v125 = &v122;
  uint64_t v10 = alloca(v5);
  uint64_t v11 = alloca(v5);
  char v132 = &v122;
  uint64_t v12 = alloca(v5);
  size_t v13 = alloca(v5);
  char v124 = &v122;
  uint64_t v14 = alloca(v5);
  uint64_t v15 = alloca(v5);
  URL.appendingPathComponent(_:)(0xD000000000000010, "ObjectDetectorMetrics." + 0x8000000000000000);
  uint64_t v16 = v128;
  uint64_t v17 = Data.init(contentsOf:options:)(&v122, 0);
  uint64_t v128 = v16;
  if (!v16)
  {
    uint64_t v138 = a1;
    uint64_t v127 = v4;
    uint64_t v20 = *(void (**)(uint64_t, uint64_t))(v4 + 8);
    unint64_t v21 = v18;
    uint64_t v22 = v17;
    uint64_t v139 = v20;
    v20((uint64_t)&v122, v3);
    unsigned __int8 v23 = objc_opt_self(NSPropertyListSerialization);
    uint64_t v136 = v22;
    unint64_t v135 = v21;
    Class isa = Data._bridgeToObjectiveC()().super.isa;
    v142[0] = 0;
    id v25 = [v23 propertyListWithData:isa options:0 format:0 error:v142];
    id v26 = v25;

    id v27 = v142[0];
    if (!v26)
    {
      unint64_t v36 = v27;
      _convertNSErrorToError(_:)(v27);

      swift_willThrow(v36, "propertyListWithData:options:format:error:", v37, v38, v39, v40);
      outlined consume of Data._Representation(v136, v135);
      v139(v138, v3);
      return __stack_chk_guard;
    }
    uint64_t v137 = v3;
    _bridgeAnyObjectToAny(_:)(v26);
    swift_unknownObjectRelease(v26);
    outlined init with copy of Any((uint64_t)v144, (uint64_t)v142);
    uint64_t v28 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [String : Any]);
    if (swift_dynamicCast(&string, v142, (char *)&type metadata for Any + 8, v28, 6))
    {
      uint64_t countAndFlagsBits = string._countAndFlagsBits;
      specialized Dictionary.subscript.getter(0x687469726F676C61, 0xE90000000000006DLL, string._countAndFlagsBits);
      uint64_t v30 = v137;
      if (v143)
      {
        uint64_t v140 = countAndFlagsBits;
        if (swift_dynamicCast(&string, v142, (char *)&type metadata for Any + 8, &type metadata for String, 6))
        {
          char v133 = (char *)&type metadata for Any + 8;
          char object = (char)string._object;
          Swift::Int v32 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&outlined read-only object #0 of MLStyleTransfer.PersistentParameters.init(sessionDirectory:), string);
          swift_bridgeObjectRelease(object);
          if (v32)
          {
            uint64_t v33 = v137;
            uint64_t v34 = v131;
            if (v32 != 1)
            {
              swift_bridgeObjectRelease(v140);
              uint64_t v54 = lazy protocol witness table accessor for type MLCreateError and conformance MLCreateError();
              swift_allocError(&type metadata for MLCreateError, v54, 0, 0);
              *(void *)uint64_t v55 = 0xD000000000000049;
              uint64_t v59 = "ontain an algorithm.";
LABEL_38:
              *(void *)(v55 + 8) = (unint64_t)v59 | 0x8000000000000000;
              *(_OWORD *)(v55 + 16) = 0;
              *(_OWORD *)(v55 + 32) = 0;
              *(unsigned char *)(v55 + 48) = 0;
              swift_willThrow(&type metadata for MLCreateError, v54, v55, v56, v57, v58);
              outlined consume of Data._Representation(v136, v135);
              uint64_t v46 = v138;
              uint64_t v47 = v33;
              goto LABEL_39;
            }
            char v35 = 1;
          }
          else
          {
            char v35 = 0;
            uint64_t v33 = v137;
            uint64_t v34 = v131;
          }
          char v129 = (int *)type metadata accessor for MLStyleTransfer.PersistentParameters(0);
          *(unsigned char *)(v34 + v129[5]) = v35;
          specialized Dictionary.subscript.getter(0x645F6C6574786574, 0xEE00797469736E65, v140);
          if (v143)
          {
            if (swift_dynamicCast(&string, v142, v133, &type metadata for Int, 6))
            {
              uint64_t v53 = string._countAndFlagsBits;
              goto LABEL_22;
            }
          }
          else
          {
            outlined destroy of Any?((uint64_t)v142);
          }
          uint64_t v53 = 256;
LABEL_22:
          *(void *)(v34 + v129[7]) = v53;
          specialized Dictionary.subscript.getter(0x74735F656C797473, 0xEE006874676E6572, v140);
          uint64_t v60 = 5;
          if (v143)
          {
            if (swift_dynamicCast(&string, v142, v133, &type metadata for Int, 6)) {
              uint64_t v60 = string._countAndFlagsBits;
            }
          }
          else
          {
            outlined destroy of Any?((uint64_t)v142);
          }
          *(void *)(v34 + v129[8]) = v60;
          specialized Dictionary.subscript.getter(0x656369766564, 0xE600000000000000, v140);
          if (v143)
          {
            if (swift_dynamicCast(&string, v142, v133, &type metadata for String, 6))
            {
              v61.value = _MLDevice.init(rawValue:)(string).value & 1;
LABEL_31:
              *(CreateML::_MLDevice_optional *)(v34 + v129[9]) = v61;
              char v62 = v140;
              specialized Dictionary.subscript.getter(0x6D695F656C797473, 0xEB00000000656761, v140);
              if (v143)
              {
                if (swift_dynamicCast(&string, v142, v133, &type metadata for String, 6))
                {
                  uint64_t v63 = string._countAndFlagsBits;
                  unint64_t v64 = string._object;
                  id v123 = (id)objc_opt_self(NSFileManager);
                  id v65 = [v123 defaultManager];
                  id v66 = v65;
                  uint64_t v130 = v63;
                  uint64_t v134 = (uint64_t)v64;
                  NSString v67 = String._bridgeToObjectiveC()();
                  unsigned __int8 v68 = [v66 fileExistsAtPath:v67];

                  if (v68)
                  {
                    uint64_t v69 = v124;
                    char v70 = v134;
                    URL.init(fileURLWithPath:)(v130, v134);
                    swift_bridgeObjectRelease(v70);
                    uint64_t v71 = v137;
                  }
                  else
                  {
                    uint64_t v73 = v132;
                    uint64_t v74 = v134;
                    URL.init(fileURLWithPath:)(v130, v134);
                    swift_bridgeObjectRelease(v74);
                    uint64_t v75 = URL.path.getter(v74);
                    LOBYTE(v74) = v76;
                    uint64_t v77 = v124;
                    URL.appendingPathComponent(_:)(v75, v76);
                    uint64_t v69 = v77;
                    swift_bridgeObjectRelease(v74);
                    uint64_t v71 = v137;
                    v139((uint64_t)v73, v137);
                  }
                  char v78 = v140;
                  specialized Dictionary.subscript.getter(0xD000000000000011, (uint64_t)("sing the style image URL." + 0x8000000000000000), v140);
                  if (v143)
                  {
                    if (swift_dynamicCast(&string, v142, v133, &type metadata for String, 6))
                    {
                      uint64_t v79 = string._countAndFlagsBits;
                      char v80 = string._object;
                      id v81 = [v123 defaultManager];
                      id v82 = v81;
                      uint64_t v134 = v79;
                      NSString v83 = String._bridgeToObjectiveC()();
                      unsigned __int8 v84 = [v82 fileExistsAtPath:v83];

                      if (v84)
                      {
                        URL.init(fileURLWithPath:)(v134, v80);
                        swift_bridgeObjectRelease((_BYTE)v80);
                        uint64_t v85 = v137;
                      }
                      else
                      {
                        uint64_t v92 = v132;
                        URL.init(fileURLWithPath:)(v134, v80);
                        swift_bridgeObjectRelease((_BYTE)v80);
                        uint64_t v93 = URL.path.getter(v80);
                        char v95 = v94;
                        URL.appendingPathComponent(_:)(v93, v94);
                        swift_bridgeObjectRelease(v95);
                        uint64_t v96 = v92;
                        uint64_t v85 = v137;
                        v139((uint64_t)v96, v137);
                      }
                      specialized Dictionary.subscript.getter(0xD000000000000011, (uint64_t)("sing the content directory URL." + 0x8000000000000000), v140);
                      uint64_t v97 = v131;
                      if (v143)
                      {
                        LODWORD(v98) = swift_dynamicCast(&string, v142, v133, &type metadata for Int, 6);
                        if ((_BYTE)v98)
                        {
                          if (string._countAndFlagsBits < 0)
                          {
                            _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, "Negative value is not representable", 35, 2, "Swift/Integers.swift", 20, 2, 3451, 1);
                            BUG();
                          }
                          uint64_t v134 = string._countAndFlagsBits;
                          LODWORD(v130) = 0;
LABEL_57:
                          char v99 = v140;
                          specialized Dictionary.subscript.getter(0x69746164696C6176, 0xEA00000000006E6FLL, v140);
                          swift_bridgeObjectRelease(v99);
                          if (v143)
                          {
                            if (swift_dynamicCast(&string, v142, v133, &type metadata for String, 6))
                            {
                              uint64_t v100 = string._countAndFlagsBits;
                              uint64_t v101 = string._object;
                              id v102 = [v123 defaultManager];
                              id v103 = v102;
                              uint64_t v140 = v100;
                              NSString v104 = String._bridgeToObjectiveC()();
                              LOBYTE(v100) = [v103 fileExistsAtPath:v104];

                              if ((_BYTE)v100)
                              {
                                uint64_t v105 = v126;
                                URL.init(fileURLWithPath:)(v140, v101);
                                outlined consume of Data._Representation(v136, v135);
                                swift_bridgeObjectRelease((_BYTE)v101);
                                uint64_t v106 = v137;
                                v139(v138, v137);
                              }
                              else
                              {
                                uint64_t v108 = v132;
                                URL.init(fileURLWithPath:)(v140, v101);
                                swift_bridgeObjectRelease((_BYTE)v101);
                                uint64_t v109 = URL.path.getter(v101);
                                char v111 = v110;
                                uint64_t v112 = v138;
                                URL.appendingPathComponent(_:)(v109, v110);
                                swift_bridgeObjectRelease(v111);
                                outlined consume of Data._Representation(v136, v135);
                                uint64_t v106 = v137;
                                uint64_t v113 = (void (*)(uint64_t *, uint64_t))v139;
                                v139(v112, v137);
                                unint64_t v114 = v108;
                                uint64_t v105 = v126;
                                v113(v114, v106);
                              }
                              __swift_destroy_boxed_opaque_existential_1Tm(v144);
                              uint64_t v97 = v131;
                              uint64_t v115 = v131 + v129[6];
                              char v132 = *(uint64_t **)(v127 + 32);
                              ((void (*)(uint64_t, uint64_t *, uint64_t))v132)(v115, v105, v106);
                              uint64_t v85 = v106;
                              __swift_storeEnumTagSinglePayload(v115, 0, 1, v106);
                              goto LABEL_66;
                            }
                            outlined consume of Data._Representation(v136, v135);
                          }
                          else
                          {
                            outlined consume of Data._Representation(v136, v135);
                            outlined destroy of Any?((uint64_t)v142);
                          }
                          uint64_t v107 = v127;
                          v139(v138, v85);
                          __swift_destroy_boxed_opaque_existential_1Tm(v144);
                          __swift_storeEnumTagSinglePayload(v97 + v129[6], 1, 1, v85);
                          char v132 = *(uint64_t **)(v107 + 32);
LABEL_66:
                          uint64_t v116 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (styleImage: URL, contentDirectory: URL, processingOption: VNImageCropAndScaleOption?));
                          uint64_t v117 = v97 + *(int *)(v116 + 48);
                          uint64_t v118 = v97;
                          uint64_t v131 = *(int *)(v116 + 64);
                          uint64_t v119 = v97;
                          uint64_t v120 = v132;
                          ((void (*)(uint64_t, uint64_t *, uint64_t))v132)(v119, v124, v85);
                          ((void (*)(uint64_t, uint64_t *, uint64_t))v120)(v117, v125, v85);
                          uint64_t v121 = v131;
                          *(void *)(v118 + v131) = v134;
                          *(unsigned char *)(v118 + v121 + 8) = v130;
                          return __stack_chk_guard;
                        }
                      }
                      else
                      {
                        uint64_t v98 = outlined destroy of Any?((uint64_t)v142);
                      }
                      LOBYTE(v98) = 1;
                      LODWORD(v130) = v98;
                      uint64_t v134 = 0;
                      goto LABEL_57;
                    }
                    swift_bridgeObjectRelease(v140);
                  }
                  else
                  {
                    swift_bridgeObjectRelease(v78);
                    outlined destroy of Any?((uint64_t)v142);
                  }
                  uint64_t v86 = lazy protocol witness table accessor for type MLCreateError and conformance MLCreateError();
                  swift_allocError(&type metadata for MLCreateError, v86, 0, 0);
                  *(void *)uint64_t v87 = 0xD00000000000003FLL;
                  *(void *)(v87 + 8) = "content_directory" + 0x8000000000000000;
                  *(_OWORD *)(v87 + 16) = 0;
                  *(_OWORD *)(v87 + 32) = 0;
                  *(unsigned char *)(v87 + 48) = 0;
                  swift_willThrow(&type metadata for MLCreateError, v86, v87, v88, v89, v90);
                  outlined consume of Data._Representation(v136, v135);
                  uint64_t v91 = (void (*)(uint64_t *, uint64_t))v139;
                  v139(v138, v71);
                  v91(v69, v71);
LABEL_40:
                  __swift_destroy_boxed_opaque_existential_1Tm(v144);
                  return __stack_chk_guard;
                }
                swift_bridgeObjectRelease(v62);
              }
              else
              {
                swift_bridgeObjectRelease(v62);
                outlined destroy of Any?((uint64_t)v142);
              }
              uint64_t v54 = lazy protocol witness table accessor for type MLCreateError and conformance MLCreateError();
              swift_allocError(&type metadata for MLCreateError, v54, 0, 0);
              *(void *)uint64_t v55 = 0xD000000000000039;
              uint64_t v59 = "ontain a valid algorithm.";
              goto LABEL_38;
            }
          }
          else
          {
            outlined destroy of Any?((uint64_t)v142);
          }
          v61.value = CreateML__MLDevice_auto;
          goto LABEL_31;
        }
        swift_bridgeObjectRelease(v140);
      }
      else
      {
        swift_bridgeObjectRelease(countAndFlagsBits);
        outlined destroy of Any?((uint64_t)v142);
      }
      uint64_t v48 = lazy protocol witness table accessor for type MLCreateError and conformance MLCreateError();
      swift_allocError(&type metadata for MLCreateError, v48, 0, 0);
      *(void *)uint64_t v49 = 0xD000000000000044;
      *(void *)(v49 + 8) = "ningSessionDelegate" + 0x8000000000000000;
      *(_OWORD *)(v49 + 16) = 0;
      *(_OWORD *)(v49 + 32) = 0;
      *(unsigned char *)(v49 + 48) = 0;
      swift_willThrow(&type metadata for MLCreateError, v48, v49, v50, v51, v52);
      outlined consume of Data._Representation(v136, v135);
      uint64_t v46 = v138;
      uint64_t v47 = v30;
    }
    else
    {
      uint64_t v41 = lazy protocol witness table accessor for type MLCreateError and conformance MLCreateError();
      swift_allocError(&type metadata for MLCreateError, v41, 0, 0);
      *(void *)uint64_t v42 = 0xD000000000000037;
      *(void *)(v42 + 8) = "parameters.plist" + 0x8000000000000000;
      *(_OWORD *)(v42 + 16) = 0;
      *(_OWORD *)(v42 + 32) = 0;
      *(unsigned char *)(v42 + 48) = 0;
      swift_willThrow(&type metadata for MLCreateError, v41, v42, v43, v44, v45);
      outlined consume of Data._Representation(v136, v135);
      uint64_t v46 = v138;
      uint64_t v47 = v137;
    }
LABEL_39:
    v139(v46, v47);
    goto LABEL_40;
  }
  uint64_t v19 = *(void (**)(uint64_t, uint64_t))(v4 + 8);
  v19(a1, v3);
  v19((uint64_t)&v122, v3);
  return __stack_chk_guard;
}

uint64_t outlined destroy of MLStyleTransfer.ModelParameters.ValidationData(uint64_t a1)
{
  uint64_t v1 = type metadata accessor for MLStyleTransfer.ModelParameters.ValidationData(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v1 - 8) + 8))(a1, v1);
  return a1;
}

double MLSoundClassifier.FeatureExtractionParameters.featureExtractionTimeWindowSize.getter()
{
  if (*(unsigned char *)(v0 + 16)) {
    return 0.975;
  }
  else {
    return *(double *)(v0 + 8);
  }
}

void MLSoundClassifier.FeatureExtractionParameters.featureExtractionTimeWindowSize.setter(double a1)
{
  *(double *)(v1 + 8) = a1;
  *(unsigned char *)(v1 + 16) = 0;
}

double MLSoundClassifier.FeatureExtractionParameters.overlapFactor.getter()
{
  return *(double *)v0;
}

void MLSoundClassifier.FeatureExtractionParameters.overlapFactor.setter(double a1)
{
  double *v1 = a1;
}

void (*MLSoundClassifier.FeatureExtractionParameters.overlapFactor.modify())()
{
  return MLBoostedTreeRegressor.ModelParameters.maxDepth.modify;
}

void key path getter for MLSoundClassifier.FeatureExtractionParameters.featureExtractionTimeWindowSize : MLSoundClassifier.FeatureExtractionParameters()
{
  double *v0 = MLSoundClassifier.FeatureExtractionParameters.featureExtractionTimeWindowSize.getter();
}

uint64_t (*MLSoundClassifier.FeatureExtractionParameters.featureExtractionTimeWindowSize.modify(uint64_t *a1))(uint64_t *a1)
{
  a1[1] = v1;
  if (*(unsigned char *)(v1 + 16)) {
    uint64_t v2 = 0x3FEF333333333333;
  }
  else {
    uint64_t v2 = *(void *)(v1 + 8);
  }
  *a1 = v2;
  return MLSoundClassifier.FeatureExtractionParameters.featureExtractionTimeWindowSize.modify;
}

uint64_t MLSoundClassifier.FeatureExtractionParameters.featureExtractionTimeWindowSize.modify(uint64_t *a1)
{
  uint64_t result = *a1;
  uint64_t v2 = a1[1];
  *(void *)(v2 + 8) = *a1;
  *(unsigned char *)(v2 + 16) = 0;
  return result;
}

uint64_t MLSoundClassifier.FeatureExtractionParameters.featureExtractor.getter()
{
  char v2 = *(unsigned char *)(v1 + 32);
  *(void *)uint64_t result = *(void *)(v1 + 24);
  *(unsigned char *)(result + 8) = v2;
  return result;
}

uint64_t MLSoundClassifier.FeatureExtractionParameters.featureExtractor.setter(uint64_t *a1)
{
  uint64_t result = *a1;
  char v3 = *((unsigned char *)a1 + 8);
  *(void *)(v1 + 24) = *a1;
  *(unsigned char *)(v1 + 32) = v3;
  return result;
}

void (*MLSoundClassifier.FeatureExtractionParameters.featureExtractor.modify())()
{
  return MLBoostedTreeRegressor.ModelParameters.maxDepth.modify;
}

uint64_t MLSoundClassifier.FeatureExtractionParameters.init(overlapFactor:featureExtractor:)(uint64_t *a1, double a2)
{
  uint64_t v3 = *a1;
  *(double *)uint64_t result = a2;
  *(void *)(result + 8) = 0;
  char v4 = *((unsigned char *)a1 + 8);
  *(unsigned char *)(result + 16) = 1;
  *(void *)(result + 24) = v3;
  *(unsigned char *)(result + 32) = v4;
  return result;
}

char MLSoundClassifier.FeatureExtractionParameters.init(overlapFactor:featureExtractor:featureExtractionTimeWindowSize:)(uint64_t *a1, uint64_t a2, char a3, double a4)
{
  uint64_t v6 = a2;
  uint64_t v7 = v4;
  uint64_t v8 = *a1;
  char v9 = *((unsigned char *)a1 + 8);
  if ((a3 & 1) == 0)
  {
    if (*(double *)&a2 < 0.5)
    {
      double v21 = a4;
      uint64_t v20 = v8;
      char v22 = v9;
      uint64_t v18 = 0;
      unint64_t v19 = 0xE000000000000000;
      _StringGuts.grow(_:)(108);
      v10._uint64_t countAndFlagsBits = 0xD000000000000056;
      v10._char object = ". Clamping it to " + 0x8000000000000000;
      String.append(_:)(v10);
      Double.write<A>(to:)(&v18, &type metadata for DefaultStringInterpolation, &protocol witness table for DefaultStringInterpolation);
      v10._char object = "ximum supported value " + 0x8000000000000000;
      v10._uint64_t countAndFlagsBits = 0xD000000000000011;
      String.append(_:)(v10);
      Double.write<A>(to:)(&v18, &type metadata for DefaultStringInterpolation, &protocol witness table for DefaultStringInterpolation);
      v10._uint64_t countAndFlagsBits = 46;
      v10._char object = (void *)0xE100000000000000;
      String.append(_:)(v10);
      uint64_t v11 = v18;
      uint64_t v12 = (void *)v19;
      os_log_type_t v13 = static os_log_type_t.default.getter(46);
      v10._uint64_t countAndFlagsBits = v11;
      v10._char object = v12;
      log(_:type:)(v10, v13);
      uint64_t v6 = 0x3FE0000000000000;
LABEL_6:
      swift_bridgeObjectRelease((_BYTE)v12);
      char v9 = v22;
      uint64_t v8 = v20;
      a4 = v21;
      goto LABEL_7;
    }
    if (*(double *)&a2 > 15.0)
    {
      double v21 = a4;
      uint64_t v20 = v8;
      char v22 = v9;
      uint64_t v18 = 0;
      unint64_t v19 = 0xE000000000000000;
      _StringGuts.grow(_:)(108);
      v14._uint64_t countAndFlagsBits = 0xD000000000000056;
      v14._char object = "r MLShapedArray<Double> values." + 0x8000000000000000;
      String.append(_:)(v14);
      Double.write<A>(to:)(&v18, &type metadata for DefaultStringInterpolation, &protocol witness table for DefaultStringInterpolation);
      v14._char object = "ximum supported value " + 0x8000000000000000;
      v14._uint64_t countAndFlagsBits = 0xD000000000000011;
      String.append(_:)(v14);
      Double.write<A>(to:)(&v18, &type metadata for DefaultStringInterpolation, &protocol witness table for DefaultStringInterpolation);
      v14._uint64_t countAndFlagsBits = 46;
      v14._char object = (void *)0xE100000000000000;
      String.append(_:)(v14);
      uint64_t v15 = v18;
      uint64_t v12 = (void *)v19;
      os_log_type_t v16 = static os_log_type_t.default.getter(46);
      v14._uint64_t countAndFlagsBits = v15;
      v14._char object = v12;
      log(_:type:)(v14, v16);
      uint64_t v6 = 0x402E000000000000;
      goto LABEL_6;
    }
  }
LABEL_7:
  *(double *)uint64_t v7 = a4;
  *(void *)(v7 + 8) = v6;
  *(unsigned char *)(v7 + 16) = a3 & 1;
  *(void *)(v7 + 24) = v8;
  char result = v9 & 1;
  *(unsigned char *)(v7 + 32) = result;
  return result;
}

void sub_218310()
{
}

void sub_21831A(double *a1)
{
}

ValueMetadata *type metadata accessor for MLSoundClassifier.FeatureExtractionParameters()
{
  return &type metadata for MLSoundClassifier.FeatureExtractionParameters;
}

id MLWordEmbedding.model.getter()
{
  return *(id *)(v0 + 16);
}

id key path getter for MLWordEmbedding.model : MLWordEmbedding()
{
  uint64_t v1 = v0;
  id result = MLWordEmbedding.model.getter();
  void *v1 = result;
  return result;
}

void key path setter for MLWordEmbedding.model : MLWordEmbedding(id *a1)
{
  id v1 = *a1;
  MLWordEmbedding.model.setter((uint64_t)v1);
}

void MLWordEmbedding.model.setter(uint64_t a1)
{
  *(void *)(v1 + 16) = a1;
}

void (*MLWordEmbedding.model.modify(void *a1))(uint64_t a1, char a2)
{
  a1[1] = v1;
  uint64_t v3 = *(void **)(v1 + 16);
  *a1 = v3;
  v3;
  return MLWordTagger.model.modify;
}

id MLWordEmbedding.modelParameters.getter()
{
  char v2 = *(void **)(v1 + 24);
  _OWORD *v0 = *(_OWORD *)(v1 + 24);
  return v2;
}

uint64_t MLWordEmbedding.dimension.getter()
{
  return *(void *)(v0 + 40);
}

uint64_t MLWordEmbedding.vocabularySize.getter()
{
  return *(void *)(v0 + 48);
}

NSURL *MLWordEmbedding.init(dictionary:parameters:)(void *a1, uint64_t a2)
{
  uint64_t v91 = v3;
  id v82 = a1;
  uint64_t v75 = v2;
  id v92 = (id)type metadata accessor for UUID(0);
  id v88 = (id)*((void *)v92 - 1);
  int64_t v4 = *((void *)v88 + 8);
  int64_t v5 = alloca(v4);
  uint64_t v6 = alloca(v4);
  id v84 = &v73;
  uint64_t v81 = type metadata accessor for URL(0);
  uint64_t v83 = *(void *)(v81 - 8);
  int64_t v7 = *(void *)(v83 + 64);
  uint64_t v8 = alloca(v7);
  char v9 = alloca(v7);
  uint64_t v74 = &v73;
  Swift::String v10 = alloca(v7);
  uint64_t v11 = alloca(v7);
  uint64_t v73 = (uint64_t)&v73;
  uint64_t v12 = alloca(v7);
  os_log_type_t v13 = alloca(v7);
  id v89 = &v73;
  Swift::String v14 = alloca(v7);
  uint64_t v15 = alloca(v7);
  uint64_t v87 = &v73;
  os_log_type_t v16 = alloca(v7);
  uint64_t v17 = alloca(v7);
  uint64_t v86 = &v73;
  uint64_t v18 = alloca(v7);
  unint64_t v19 = alloca(v7);
  uint64_t v20 = alloca(v7);
  double v21 = alloca(v7);
  char v22 = *(void **)(a2 + 8);
  id v90 = *(id *)a2;
  v93[0] = v90;
  v93[1] = v22;
  MLWordEmbedding.ModelParameters.validateRevision()();
  if (v23)
  {
    swift_bridgeObjectRelease((_BYTE)v82);
  }
  else
  {
    uint64_t v77 = (uint64_t)v22;
    uint64_t v85 = &v73;
    uint64_t v91 = &v73;
    uint64_t v24 = objc_opt_self(NSFileManager);
    id v25 = v90;
    swift_bridgeObjectRetain((_BYTE)v82);
    id v26 = [v24 defaultManager];
    id v27 = v26;
    NSFileManager.createTemporaryModelDirectory()();
    if (v28)
    {

      LOBYTE(v27) = (_BYTE)v82;
      swift_bridgeObjectRelease((_BYTE)v82);
    }
    else
    {
      uint64_t v79 = 0;
      NSFileManager.temporaryModelDirectory.getter();
      v93[0] = 0;
      v93[1] = (id)0xE000000000000000;
      id v29 = v84;
      UUID.init()();
      char v78 = (void *)UUID.uuidString.getter();
      id v80 = v30;
      (*((void (**)(id, id))v88 + 1))(v29, v92);
      swift_bridgeObjectRelease(v93[1]);
      v93[0] = v78;
      v93[1] = v80;
      v31._uint64_t countAndFlagsBits = 45;
      v31._char object = (void *)0xE100000000000000;
      String.append(_:)(v31);
      v31._uint64_t countAndFlagsBits = 0x65626D4564726F57;
      v31._char object = (void *)0xED0000676E696464;
      String.append(_:)(v31);
      char v32 = (char)v93[1];
      id v88 = v27;
      uint64_t v33 = v25;
      URL.appendingPathComponent(_:)(v93[0], v93[1]);
      swift_bridgeObjectRelease(v32);
      uint64_t v34 = v86;
      URL.appendingPathExtension(_:)(7627108, 0xE300000000000000);
      URL.appendingPathExtension(_:)(0x6C65646F6D6C6DLL, 0xE700000000000000);
      type metadata accessor for OS_os_log(0, &lazy cache variable for type metadata for NLEmbedding, NLEmbedding_ptr);
      id v84 = v33;
      id v92 = v33;
      id v27 = v82;
      uint64_t v35 = v79;
      static NLEmbedding.write(_:language:revision:to:)(v82, v90, v77, v34);
      if (v35)
      {
        swift_bridgeObjectRelease((_BYTE)v27);

        id v36 = v92;
        uint64_t v37 = *(void (**)(uint64_t *, uint64_t))(v83 + 8);
        uint64_t v38 = v81;
        v37(v87, v81);
        v37(v86, v38);
        v37(v85, v38);
        v37(v91, v38);
      }
      else
      {

        id v39 = v89;
        char v78 = *(void **)(v83 + 16);
        ((void (*)(id, uint64_t *, uint64_t))v78)(v89, v86, v81);
        id v40 = @nonobjc NLEmbedding.__allocating_init(contentsOf:)((uint64_t)v39);
        id v41 = v40;
        id v80 = [v41 dimension];
        id v89 = v41;
        id v76 = [v41 vocabularySize];
        v94[0] = (uint64_t)v90;
        v94[1] = v77;
        memset(v93, 0, sizeof(v93));
        id v92 = v92;
        static MLWordEmbedding.write(dictionary:parameters:to:metadata:)((uint64_t)v27, v94, (uint64_t)v87, (uint64_t)v93);
        uint64_t v79 = 0;

        uint64_t v42 = (NSURL *)objc_opt_self(MLModel);
        uint64_t v43 = (uint64_t)v87;
        URL._bridgeToObjectiveC()(v42);
        uint64_t v45 = v44;
        v93[0] = 0;
        id v46 = [(NSURL *)v42 compileModelAtURL:v44 error:v93];
        id v47 = v46;

        id v48 = v93[0];
        if (v47)
        {
          uint64_t v49 = v73;
          static URL._unconditionallyBridgeFromObjectiveC(_:)(v47);
          uint64_t v50 = v48;
          uint64_t v51 = v49;
          v50;

          type metadata accessor for OS_os_log(0, &lazy cache variable for type metadata for MLModel, MLModel_ptr);
          uint64_t v52 = (uint64_t)v74;
          uint64_t v53 = v49;
          uint64_t v54 = v81;
          ((void (*)(uint64_t *, uint64_t, uint64_t))v78)(v74, v53, v81);
          uint64_t v55 = v79;
          id v56 = @nonobjc MLModel.__allocating_init(contentsOf:)(v52);
          if (!v55)
          {
            unsigned __int8 v68 = v56;
            id v92 = v92;
            id v84 = v68;
            static MLWordEmbedding.reportAnalytics(vocabularySize:dimension:language:)((int)v76, (int)v80, (uint64_t)v90);

            uint64_t v69 = *(void (**)(uint64_t, uint64_t))(v83 + 8);
            v69(v51, v54);
            uint64_t v70 = (uint64_t)v87;
            $defer #1 () in MLWordEmbedding.init(dictionary:parameters:)();

            v69(v70, v54);
            v69((uint64_t)v86, v54);
            v69((uint64_t)v85, v54);
            v69((uint64_t)v91, v54);
            uint64_t v71 = v75;
            *uint64_t v75 = v89;
            LOBYTE(v69) = (_BYTE)v82;
            v71[1] = v82;
            id v72 = v84;
            v71[2] = v84;
            v71[3] = v90;
            v71[4] = (id)v77;
            v71[5] = v80;
            v71[6] = v76;

            swift_bridgeObjectRelease((_BYTE)v69);
            return __stack_chk_guard;
          }
          id v90 = *(id *)(v83 + 8);
          ((void (*)(uint64_t, uint64_t))v90)(v51, v54);

          LOBYTE(v27) = (_BYTE)v82;
          swift_bridgeObjectRelease((_BYTE)v82);

          uint64_t v57 = (uint64_t)v87;
          $defer #1 () in MLWordEmbedding.init(dictionary:parameters:)();

          uint64_t v58 = v57;
          uint64_t v59 = (void (*)(uint64_t, uint64_t))v90;
          ((void (*)(uint64_t, uint64_t))v90)(v58, v54);
        }
        else
        {
          id v90 = v93[0];

          char v60 = (char)v82;
          swift_bridgeObjectRelease((_BYTE)v82);
          ((void (*)(id))objc_release)(v92);
          _convertNSErrorToError(_:)(v48);
          id v61 = v90;
          LOBYTE(v27) = v60;

          swift_willThrow(v61, "compileModelAtURL:error:", v62, v63, v64, v65);
          $defer #1 () in MLWordEmbedding.init(dictionary:parameters:)();

          uint64_t v59 = *(void (**)(uint64_t, uint64_t))(v83 + 8);
          uint64_t v66 = v43;
          uint64_t v54 = v81;
          v59(v66, v81);
        }
        v59((uint64_t)v86, v54);
        v59((uint64_t)v85, v54);
        v59((uint64_t)v91, v54);
      }
      id v25 = v84;
    }

    swift_bridgeObjectRelease((_BYTE)v27);
  }
  return __stack_chk_guard;
}

id @nonobjc NLEmbedding.__allocating_init(contentsOf:)(uint64_t a1)
{
  URL._bridgeToObjectiveC()(__stack_chk_guard);
  char v2 = v1;
  ObjCClassFromMetadata = (void *)swift_getObjCClassFromMetadata();
  id v12 = 0;
  id v4 = [ObjCClassFromMetadata embeddingWithContentsOfURL:v2 error:&v12];
  id v5 = v4;

  id v6 = v12;
  if (v5)
  {
    uint64_t v7 = type metadata accessor for URL(0);
    uint64_t v8 = *(void (**)(uint64_t, uint64_t))(*(void *)(v7 - 8) + 8);
    v6;
    v8(a1, v7);
  }
  else
  {
    id v9 = v12;
    _convertNSErrorToError(_:)(v6);

    swift_willThrow();
    uint64_t v10 = type metadata accessor for URL(0);
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v10 - 8) + 8))(a1, v10);
  }
  return v5;
}

NSURL *$defer #1 () in MLWordEmbedding.init(dictionary:parameters:)()
{
  uint64_t v0 = objc_opt_self(NSFileManager);
  id v1 = [v0 defaultManager];
  char v2 = (NSURL *)v1;
  URL._bridgeToObjectiveC()(v2);
  id v4 = v3;
  id v10 = 0;
  unsigned __int8 v5 = [(NSURL *)v2 removeItemAtURL:v3 error:&v10];

  id v6 = v10;
  if (v5) {
    return (NSURL *)v10;
  }
  id v8 = v10;
  uint64_t v9 = _convertNSErrorToError(_:)(v6);

  swift_willThrow();
  swift_errorRelease(v9);
  return __stack_chk_guard;
}

char static MLWordEmbedding.reportAnalytics(vocabularySize:dimension:language:)(int a1, int a2, uint64_t a3)
{
  char result = AnalyticsReporter.init()();
  if ((result & 1) == 0)
  {
    AnalyticsReporter.reportDataMetrics(model:metricName:quantity:)(CreateML_ModelType_wordEmbedding, (Swift::String)__PAIR128__(0xEF657A6953207972, 0x616C756261636F56), (float)a1);
    AnalyticsReporter.reportDataMetrics(model:metricName:quantity:)(CreateML_ModelType_wordEmbedding, (Swift::String)__PAIR128__(0xE90000000000006ELL, 0x6F69736E656D6944), (float)a2);
    if (a3)
    {
      v6._uint64_t countAndFlagsBits = static String._unconditionallyBridgeFromObjectiveC(_:)(a3);
      v6._char object = v5;
    }
    else
    {
      v6._char object = "formers Text Embedding" + 0x8000000000000000;
      v6._uint64_t countAndFlagsBits = 0xD000000000000014;
    }
    AnalyticsReporter.reportParameterSettings(model:parameterName:parameterValue:)(CreateML_ModelType_wordEmbedding, (Swift::String)__PAIR128__(0xE800000000000000, 0x65676175676E614CLL), v6);
    return swift_bridgeObjectRelease(v6._object);
  }
  return result;
}

Swift::Bool __swiftcall MLWordEmbedding.contains(_:)(Swift::String a1)
{
  char v2 = *v1;
  NSString v3 = String._bridgeToObjectiveC()();
  LOBYTE(v2) = [v2 containsString:v3];

  return (_BYTE)v2 != 0;
}

Swift::Double __swiftcall MLWordEmbedding.distance(between:and:distanceType:)(Swift::String between, Swift::String and, NLDistanceType distanceType)
{
  return NLEmbedding.distance(between:and:distanceType:)(between, and, distanceType);
}

Swift::OpaquePointer_optional __swiftcall MLWordEmbedding.vector(for:)(Swift::String a1)
{
  return NLEmbedding.vector(for:)(a1);
}

unint64_t MLWordEmbedding.description.getter()
{
  v7._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter(&type metadata for Int, &protocol witness table for Int);
  v7._char object = v0;
  v1._uint64_t countAndFlagsBits = 10;
  v1._char object = (void *)0xE100000000000000;
  String.append(_:)(v1);
  String.append(_:)(v7);
  swift_bridgeObjectRelease(v7._object);
  v1._uint64_t countAndFlagsBits = 0x6F69736E656D6944;
  v1._char object = (void *)0xEB00000000203A6ELL;
  String.append(_:)(v1);
  swift_bridgeObjectRelease(110);
  v7._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter(&type metadata for Int, &protocol witness table for Int);
  v7._char object = v2;
  v1._uint64_t countAndFlagsBits = 10;
  v1._char object = (void *)0xE100000000000000;
  String.append(_:)(v1);
  String.append(_:)(v7);
  swift_bridgeObjectRelease(v7._object);
  v1._uint64_t countAndFlagsBits = 0xD000000000000011;
  v1._char object = "WordEmbedding\n\nParameters\n" + 0x8000000000000000;
  String.append(_:)(v1);
  swift_bridgeObjectRelease(("WordEmbedding\n\nParameters\n" + 0x8000000000000000));
  uint64_t v3 = MLWordEmbedding.ModelParameters.description.getter();
  char v5 = (char)v4;
  v1._uint64_t countAndFlagsBits = v3;
  v1._char object = v4;
  String.append(_:)(v1);
  swift_bridgeObjectRelease(v5);
  return 0xD00000000000001ALL;
}

unint64_t MLWordEmbedding.debugDescription.getter()
{
  return MLWordEmbedding.description.getter();
}

unint64_t MLWordEmbedding.playgroundDescription.getter()
{
  Swift::String v1 = v0;
  unint64_t result = MLWordEmbedding.description.getter();
  v1[3] = (unint64_t)&type metadata for String;
  unint64_t *v1 = result;
  v1[1] = v3;
  return result;
}

unint64_t protocol witness for CustomStringConvertible.description.getter in conformance MLWordEmbedding()
{
  return MLWordEmbedding.description.getter();
}

unint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance MLWordEmbedding()
{
  return MLWordEmbedding.debugDescription.getter();
}

unint64_t protocol witness for CustomPlaygroundDisplayConvertible.playgroundDescription.getter in conformance MLWordEmbedding()
{
  return MLWordEmbedding.playgroundDescription.getter();
}

id sub_219357()
{
  return key path getter for MLWordEmbedding.model : MLWordEmbedding();
}

void sub_219361(id *a1)
{
}

uint64_t initializeWithCopy for MLWordEmbedding(uint64_t a1, uint64_t a2)
{
  unint64_t v3 = *(void **)a2;
  *(void *)a1 = *(void *)a2;
  uint64_t v4 = *(void *)(a2 + 8);
  *(void *)(a1 + 8) = v4;
  char v5 = *(void **)(a2 + 16);
  *(void *)(a1 + 16) = v5;
  Swift::String v6 = *(void **)(a2 + 24);
  *(void *)(a1 + 24) = v6;
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  v3;
  swift_bridgeObjectRetain(v4);
  v5;
  v6;
  return a1;
}

uint64_t assignWithCopy for MLWordEmbedding(uint64_t a1, uint64_t a2)
{
  unint64_t v3 = *(void **)a2;
  uint64_t v4 = *(void **)a1;
  *(void *)a1 = *(void *)a2;
  v3;

  uint64_t v5 = *(void *)(a2 + 8);
  uint64_t v6 = *(void *)(a1 + 8);
  *(void *)(a1 + 8) = v5;
  swift_bridgeObjectRetain(v5);
  swift_bridgeObjectRelease(v6);
  Swift::String v7 = *(void **)(a2 + 16);
  id v8 = *(void **)(a1 + 16);
  *(void *)(a1 + 16) = v7;
  v7;

  uint64_t v9 = *(void **)(a1 + 24);
  id v10 = *(void **)(a2 + 24);
  *(void *)(a1 + 24) = v10;
  v10;

  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  return a1;
}

uint64_t assignWithTake for MLWordEmbedding(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a1 + 8);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  swift_bridgeObjectRelease(v3);

  uint64_t v4 = *(void **)(a1 + 24);
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);

  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  return a1;
}

uint64_t getEnumTagSinglePayload for MLWordEmbedding(uint64_t a1, int a2)
{
  if (a2)
  {
    if (a2 < 0 && *(unsigned char *)(a1 + 56)) {
      int v2 = *(_DWORD *)a1 + 0x7FFFFFFF;
    }
    else {
      int v2 = (*(void *)a1 & 0xFFFFFFFF00000001) != 0 ? -1 : *(void *)a1 >> 1;
    }
  }
  else
  {
    int v2 = -1;
  }
  return (v2 + 1);
}

void storeEnumTagSinglePayload for MLWordEmbedding(uint64_t a1, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(a1 + 40) = 0;
    *(_OWORD *)(a1 + 24) = 0;
    *(_OWORD *)(a1 + 8) = 0;
    *(void *)a1 = a2 + 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(a1 + 56) = 1;
    }
  }
  else
  {
    if (a3 < 0) {
      *(unsigned char *)(a1 + 56) = 0;
    }
    if (a2) {
      *(void *)a1 = 2 * (a2 - 1);
    }
  }
}

ValueMetadata *type metadata accessor for MLWordEmbedding()
{
  return &type metadata for MLWordEmbedding;
}

Swift::String __swiftcall __spoils<cf,zf,sf,of,pf,rax,rdx,rcx,rdi,rsi,r8,r9,r10,r11,r12,xmm0,xmm1,xmm2,xmm3,xmm4,xmm5,xmm6,xmm7> MLTextClassifier.prediction(from:)(Swift::String from)
{
  int v2 = *v1;
  NSString v3 = String._bridgeToObjectiveC()();
  id v4 = [v2 predictedLabelForString:v3];
  id v5 = v4;

  if (v5)
  {
    uint64_t v6 = static String._unconditionallyBridgeFromObjectiveC(_:)(v5);
    id v8 = v7;
  }
  else
  {
    id v8 = (void *)0xE000000000000000;
    uint64_t v6 = 0;
  }
  result._uint64_t countAndFlagsBits = v6;
  result._char object = v8;
  return result;
}

void *MLTextClassifier.predictions(from:)(uint64_t a1)
{
  int64_t v3 = *(void *)(*(void *)(type metadata accessor for MLTextClassifier(0) - 8) + 64);
  id v4 = alloca(v3);
  id v5 = alloca(v3);
  uint64_t v6 = (void **)&v18;
  outlined init with copy of MLTextClassifier(v2, (uint64_t)&v18);
  int64_t v7 = *(void *)(a1 + 16);
  if (v7)
  {
    uint64_t v20 = v1;
    id v25 = _swiftEmptyArrayStorage;
    uint64_t v18 = (char *)v7;
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v7, 0);
    id v8 = v25;
    double v21 = (void **)&v18;
    id v19 = v18;
    uint64_t v9 = (uint64_t *)(a1 + 40);
    do
    {
      char v22 = v8;
      uint64_t v10 = *v9;
      swift_bridgeObjectRetain(*v9);
      NSString v11 = String._bridgeToObjectiveC()();
      id v12 = [v19 predictedLabelForString:v11];
      id v13 = v12;

      if (v13)
      {
        uint64_t v23 = static String._unconditionallyBridgeFromObjectiveC(_:)(v13);
        unint64_t v24 = v14;
        swift_bridgeObjectRelease(v10);
      }
      else
      {
        swift_bridgeObjectRelease(v10);
        uint64_t v23 = 0;
        unint64_t v24 = 0xE000000000000000;
      }
      id v8 = v22;
      id v25 = v22;
      unint64_t v15 = v22[2];
      if (v22[3] >> 1 <= v15)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v22[3] >= 2uLL, v15 + 1, 1);
        id v8 = v25;
      }
      _OWORD v8[2] = v15 + 1;
      uint64_t v16 = 2 * v15;
      v8[v16 + 4] = v23;
      v8[v16 + 5] = v24;
      v9 += 2;
      --v18;
    }
    while (v18);
    uint64_t v6 = v21;
  }
  else
  {
    id v8 = _swiftEmptyArrayStorage;
  }
  outlined destroy of MLTextClassifier((uint64_t)v6);
  return v8;
}

void *MLTextClassifier.predictionWithConfidence(from:)(uint64_t a1, uint64_t a2)
{
  return MLTextClassifier.predictionWithAllLabelsAndConfidences(text:)(a1, a2);
}

void *MLTextClassifier.predictionWithAllLabelsAndConfidences(text:)(uint64_t a1, uint64_t a2)
{
  uint64_t v63 = *(void *)(v2 + 8);
  unint64_t v3 = *(void *)(v63 + 16);
  id v4 = (void *)NLModel.predictedLabelHypotheses(for:maximumCount:)(a1, a2, v3);
  unint64_t v5 = v4[2];
  if (v3 >= v5)
  {
    if (v3 != v5)
    {
      specialized _NativeDictionary.makeIterator()((uint64_t)v4);
      int64_t v11 = v56;
      unint64_t v12 = v57;
      int64_t v13 = (unint64_t)(v55 + 64) >> 6;
      for (double i = 0.0; ; double i = i + *(double *)(*(void *)(v53 + 56) + 8 * v16))
      {
        if (v12)
        {
          _BitScanForward64(&v15, v12);
          v12 &= v12 - 1;
          unint64_t v16 = v15 | (v11 << 6);
        }
        else
        {
          int64_t v17 = v11 + 1;
          if (__OFADD__(1, v11)) {
            BUG();
          }
          if (v17 >= v13)
          {
LABEL_27:
            swift_bridgeObjectRetain_n(v4, 2);
            swift_release();
            unint64_t v22 = v3 - v4[2];
            swift_bridgeObjectRelease((_BYTE)v4);
            uint64_t v23 = 1 << *(unsigned char *)(v63 + 32);
            double v59 = (1.0 - i) / (double)(int)v22;
            uint64_t v24 = ~(-1 << v23);
            if (v23 >= 64) {
              uint64_t v24 = -1;
            }
            unint64_t v25 = *(void *)(v63 + 56) & v24;
            int64_t v62 = (unint64_t)(v23 + 63) >> 6;
            swift_bridgeObjectRetain(v63);
            int64_t v26 = 0;
            while (1)
            {
              if (v25)
              {
                _BitScanForward64(&v27, v25);
                uint64_t v60 = (v25 - 1) & v25;
                unint64_t v28 = v27 | (v26 << 6);
                int64_t v61 = v26;
              }
              else
              {
                BOOL v29 = __OFADD__(1, v26);
                int64_t v30 = v26 + 1;
                if (v29) {
                  BUG();
                }
                if (v30 >= v62)
                {
LABEL_59:
                  swift_release();
                  return v4;
                }
                unint64_t j = *(void *)(v63 + 8 * v30 + 56);
                if (j)
                {
                  int64_t v32 = v30;
                }
                else
                {
                  int64_t v32 = v30 + 1;
                  if (v30 + 1 >= v62) {
                    goto LABEL_59;
                  }
                  unint64_t j = *(void *)(v63 + 8 * v30 + 64);
                  if (!j)
                  {
                    int64_t v32 = v30 + 2;
                    if (v30 + 2 >= v62) {
                      goto LABEL_59;
                    }
                    unint64_t j = *(void *)(v63 + 8 * v30 + 72);
                    if (!j)
                    {
                      int64_t v32 = v30 + 3;
                      if (v30 + 3 >= v62) {
                        goto LABEL_59;
                      }
                      for (unint64_t j = *(void *)(v63 + 8 * v30 + 80); !j; unint64_t j = *(void *)(v63 + 8 * v32 + 56))
                      {
                        BOOL v29 = __OFADD__(1, v32++);
                        if (v29) {
                          BUG();
                        }
                        if (v32 >= v62) {
                          goto LABEL_59;
                        }
                      }
                    }
                  }
                }
                _BitScanForward64(&v33, j);
                uint64_t v60 = j & (j - 1);
                int64_t v61 = v32;
                unint64_t v28 = v33 + (v32 << 6);
              }
              uint64_t v34 = *(void *)(v63 + 48);
              uint64_t v35 = 16 * v28;
              uint64_t v36 = *(void *)(v34 + v35);
              uint64_t v37 = *(void *)(v34 + v35 + 8);
              uint64_t v38 = v4[2];
              swift_bridgeObjectRetain(v37);
              if (v38
                && (swift_bridgeObjectRetain((_BYTE)v4),
                    specialized __RawDictionaryStorage.find<A>(_:)(v36, v37),
                    char v40 = v39,
                    swift_bridgeObjectRelease((_BYTE)v4),
                    (v40 & 1) != 0))
              {
                char v41 = v37;
              }
              else
              {
                char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v4);
                unint64_t v42 = specialized __RawDictionaryStorage.find<A>(_:)(v36, v37);
                char v64 = v43;
                BOOL v44 = (v43 & 1) == 0;
                BOOL v29 = __OFADD__(v4[2], v44);
                Swift::Int v45 = v4[2] + v44;
                if (v29) {
                  BUG();
                }
                unint64_t v58 = v42;
                __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _NativeDictionary<String, Double>);
                unint64_t v46 = v58;
                if (_NativeDictionary.ensureUnique(isUnique:capacity:)(isUniquelyReferenced_nonNull_native, v45))
                {
                  unint64_t v46 = specialized __RawDictionaryStorage.find<A>(_:)(v36, v37);
                  if ((v64 & 1) != (v47 & 1))
                  {
                    KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(&type metadata for String);
                    BUG();
                  }
                }
                if (v64)
                {
                  *(double *)(v4[7] + 8 * v46) = v59;
                }
                else
                {
                  v4[(v46 >> 6) + 8] |= 1 << v46;
                  uint64_t v48 = v4[6];
                  uint64_t v49 = 16 * v46;
                  *(void *)(v48 + v49) = v36;
                  *(void *)(v48 + v49 + 8) = v37;
                  *(double *)(v4[7] + 8 * v46) = v59;
                  uint64_t v50 = v4[2];
                  BOOL v29 = __OFADD__(1, v50);
                  uint64_t v51 = v50 + 1;
                  if (v29) {
                    BUG();
                  }
                  v4[2] = v51;
                  swift_bridgeObjectRetain(v37);
                }
                swift_bridgeObjectRelease(v37);
                char v41 = 0;
              }
              swift_bridgeObjectRelease(v41);
              int64_t v26 = v61;
              unint64_t v25 = v60;
            }
          }
          unint64_t v18 = *(void *)(v54 + 8 * v17);
          if (v18)
          {
            int64_t v19 = v11 + 1;
          }
          else
          {
            int64_t v19 = v11 + 2;
            if (v11 + 2 >= v13) {
              goto LABEL_27;
            }
            unint64_t v18 = *(void *)(v54 + 8 * v17 + 8);
            if (!v18)
            {
              int64_t v19 = v11 + 3;
              if (v11 + 3 >= v13) {
                goto LABEL_27;
              }
              unint64_t v18 = *(void *)(v54 + 8 * v17 + 16);
              if (!v18)
              {
                int64_t v19 = v11 + 4;
                if (v11 + 4 >= v13) {
                  goto LABEL_27;
                }
                unint64_t v18 = *(void *)(v54 + 8 * v17 + 24);
                if (!v18)
                {
                  int64_t v19 = v11 + 5;
                  if (v11 + 5 >= v13) {
                    goto LABEL_27;
                  }
                  unint64_t v18 = *(void *)(v54 + 8 * v17 + 32);
                  if (!v18)
                  {
                    int64_t v19 = v11 + 6;
                    if (v11 + 6 >= v13) {
                      goto LABEL_27;
                    }
                    unint64_t v18 = *(void *)(v54 + 8 * v17 + 40);
                    if (!v18)
                    {
                      int64_t v20 = v11 + 7;
                      do
                      {
                        if (v20 >= v13) {
                          goto LABEL_27;
                        }
                        unint64_t v18 = *(void *)(v54 + 8 * v20++);
                      }
                      while (!v18);
                      int64_t v19 = v20 - 1;
                    }
                  }
                }
              }
            }
          }
          _BitScanForward64(&v21, v18);
          unint64_t v12 = v18 & (v18 - 1);
          unint64_t v16 = v21 + (v19 << 6);
          int64_t v11 = v19;
        }
      }
    }
  }
  else
  {
    swift_bridgeObjectRelease((_BYTE)v4);
    uint64_t v6 = lazy protocol witness table accessor for type MLCreateError and conformance MLCreateError();
    swift_allocError(&type metadata for MLCreateError, v6, 0, 0);
    *(void *)uint64_t v7 = 0xD000000000000037;
    *(void *)(v7 + 8) = "Vocabulary Size: " + 0x8000000000000000;
    *(_OWORD *)(v7 + 16) = 0;
    *(_OWORD *)(v7 + 32) = 0;
    *(unsigned char *)(v7 + 48) = 0;
    swift_willThrow(&type metadata for MLCreateError, v6, v7, v8, v9, v10);
  }
  return v4;
}

uint64_t *MLTextClassifier.predictionsWithConfidence(from:)(uint64_t a1)
{
  int64_t v3 = *(void *)(*(void *)(type metadata accessor for MLTextClassifier(0) - 8) + 64);
  id v4 = alloca(v3);
  unint64_t v5 = alloca(v3);
  unint64_t v21 = &v17;
  outlined init with copy of MLTextClassifier(v2, (uint64_t)&v17);
  int64_t v6 = *(void *)(a1 + 16);
  if (v6)
  {
    uint64_t v22 = v1;
    int64_t v20 = _swiftEmptyArrayStorage;
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v6, 0);
    uint64_t v7 = v20;
    uint64_t v8 = (uint64_t *)(a1 + 40);
    while (1)
    {
      uint64_t v9 = v7;
      int64_t v18 = v6;
      uint64_t v10 = *(v8 - 1);
      int64_t v19 = v8;
      uint64_t v11 = *v8;
      swift_bridgeObjectRetain(*v8);
      uint64_t v7 = v21;
      uint64_t v12 = v22;
      int64_t v13 = MLTextClassifier.predictionWithAllLabelsAndConfidences(text:)(v10, v11);
      uint64_t v22 = v12;
      if (v12) {
        break;
      }
      unint64_t v14 = v13;
      swift_bridgeObjectRelease(v11);
      uint64_t v7 = v9;
      int64_t v20 = v9;
      unint64_t v15 = v9[2];
      if ((unint64_t)v9[3] >> 1 <= v15)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)((unint64_t)v9[3] >= 2, v15 + 1, 1);
        uint64_t v7 = v20;
      }
      v7[2] = v15 + 1;
      v7[v15 + 4] = (uint64_t)v14;
      uint64_t v8 = v19 + 2;
      int64_t v6 = v18 - 1;
      if (v18 == 1) {
        goto LABEL_10;
      }
    }
    swift_release();
    swift_bridgeObjectRelease(v11);
    outlined destroy of MLTextClassifier((uint64_t)v21);
  }
  else
  {
    uint64_t v7 = _swiftEmptyArrayStorage;
LABEL_10:
    outlined destroy of MLTextClassifier((uint64_t)v21);
  }
  return v7;
}

uint64_t *MLTextClassifier.predictions(from:)(uint64_t a1, double a2)
{
  int64_t v32 = v2;
  int64_t v4 = *(void *)(*(void *)(type metadata accessor for MLTextClassifier(0) - 8) + 64);
  unint64_t v5 = alloca(v4);
  int64_t v6 = alloca(v4);
  uint64_t v7 = *(void *)a1;
  char v8 = *(unsigned char *)(a1 + 8);
  outlined copy of Result<_DataTable, Error>(*(void *)a1, v8);
  char v9 = v8;
  uint64_t v10 = &v29;
  uint64_t v11 = specialized Array<A>.init(_:)(v7, v9, a2);
  outlined init with copy of MLTextClassifier(v3, (uint64_t)&v29);
  int64_t v12 = v11[2];
  if (v12)
  {
    uint64_t v37 = _swiftEmptyArrayStorage;
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v12, 0);
    int64_t v13 = v37;
    unint64_t v33 = &v29;
    id v31 = v29;
    uint64_t v34 = v11;
    unint64_t v14 = v11 + 5;
    do
    {
      BOOL v29 = (void *)v12;
      int64_t v30 = v14;
      uint64_t v15 = *v14;
      swift_bridgeObjectRetain(*v14);
      NSString v16 = String._bridgeToObjectiveC()();
      id v17 = [v31 predictedLabelForString:v16];
      id v18 = v17;

      if (v18)
      {
        uint64_t v35 = static String._unconditionallyBridgeFromObjectiveC(_:)(v18);
        unint64_t v36 = v19;
        swift_bridgeObjectRelease(v15);
      }
      else
      {
        swift_bridgeObjectRelease(v15);
        uint64_t v35 = 0;
        unint64_t v36 = 0xE000000000000000;
      }
      uint64_t v37 = v13;
      unint64_t v20 = v13[2];
      unint64_t v21 = v29;
      if (v13[3] >> 1 <= v20)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v13[3] >= 2uLL, v20 + 1, 1);
        int64_t v13 = v37;
      }
      _OWORD v13[2] = v20 + 1;
      uint64_t v22 = 2 * v20;
      v13[v22 + 4] = v35;
      v13[v22 + 5] = v36;
      unint64_t v14 = v30 + 2;
      int64_t v12 = (int64_t)v21 - 1;
    }
    while (v12);
    uint64_t v10 = v33;
    LOBYTE(v11) = (_BYTE)v34;
  }
  else
  {
    int64_t v13 = _swiftEmptyArrayStorage;
  }
  outlined destroy of MLTextClassifier((uint64_t)v10);
  swift_bridgeObjectRelease((_BYTE)v11);
  uint64_t v37 = v13;
  uint64_t v23 = alloca(24);
  uint64_t v24 = alloca(32);
  id v31 = &v37;
  uint64_t ML14_UntypedColumnC_s5Error_pTgm5 = _ss6ResultOsRi_zrlE8catchingAByxq_Gxyq_YKXE_tcfC8CreateML14_UntypedColumnC_s5Error_pTgm5((void (*)(void *))partial apply for specialized closure #1 in MLUntypedColumn.init<A>(_:));
  char v27 = v26;
  swift_bridgeObjectRelease((_BYTE)v37);
  Swift::String result = v32;
  uint64_t *v32 = ML14_UntypedColumnC_s5Error_pTgm5;
  *((unsigned char *)result + 8) = v27 & 1;
  return result;
}

uint64_t MLTextClassifier.predictionsWithConfidence(from:)(uint64_t a1, double a2)
{
  uint64_t v33 = v3;
  id v31 = v2;
  int64_t v5 = *(void *)(*(void *)(type metadata accessor for MLTextClassifier(0) - 8) + 64);
  int64_t v6 = alloca(v5);
  uint64_t v7 = alloca(v5);
  uint64_t v8 = *(void *)a1;
  char v9 = *(unsigned char *)(a1 + 8);
  outlined copy of Result<_DataTable, Error>(*(void *)a1, v9);
  uint64_t v10 = specialized Array<A>.init(_:)(v8, v9, a2);
  uint64_t v34 = &v29;
  outlined init with copy of MLTextClassifier(v4, (uint64_t)&v29);
  int64_t v11 = v10[2];
  if (v11)
  {
    uint64_t v35 = _swiftEmptyArrayStorage;
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v11, 0);
    unint64_t v36 = v35;
    int64_t v32 = v10;
    int64_t v12 = v10 + 5;
    while (1)
    {
      int64_t v30 = v11;
      uint64_t v13 = *(v12 - 1);
      uint64_t v14 = *v12;
      swift_bridgeObjectRetain(*v12);
      uint64_t v15 = v33;
      NSString v16 = MLTextClassifier.predictionWithAllLabelsAndConfidences(text:)(v13, v14);
      if (v15) {
        break;
      }
      id v17 = v16;
      uint64_t v33 = 0;
      swift_bridgeObjectRelease(v14);
      id v18 = v36;
      uint64_t v35 = v36;
      unint64_t v19 = v36[2];
      unint64_t v20 = v36[3];
      int64_t v21 = v19 + 1;
      if (v20 >> 1 <= v19)
      {
        unint64_t v36 = (void *)(v19 + 1);
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v20 >= 2, v21, 1);
        int64_t v21 = (int64_t)v36;
        id v18 = v35;
      }
      v18[2] = v21;
      unint64_t v36 = v18;
      v18[v19 + 4] = v17;
      v12 += 2;
      int64_t v11 = v30 - 1;
      if (v30 == 1)
      {
        LOBYTE(v10) = (_BYTE)v32;
        uint64_t v23 = v36;
        goto LABEL_10;
      }
    }
    swift_release();
    swift_bridgeObjectRelease(v14);
    outlined destroy of MLTextClassifier((uint64_t)v34);
    return swift_bridgeObjectRelease((_BYTE)v32);
  }
  else
  {
    uint64_t v23 = _swiftEmptyArrayStorage;
LABEL_10:
    outlined destroy of MLTextClassifier((uint64_t)v34);
    swift_bridgeObjectRelease((_BYTE)v10);
    uint64_t v35 = v23;
    uint64_t v24 = alloca(24);
    unint64_t v25 = alloca(32);
    id v31 = (uint64_t *)&v35;
    uint64_t ML14_UntypedColumnC_s5Error_pTgm5 = _ss6ResultOsRi_zrlE8catchingAByxq_Gxyq_YKXE_tcfC8CreateML14_UntypedColumnC_s5Error_pTgm5((void (*)(void *))partial apply for specialized closure #1 in MLUntypedColumn.init<A>(_:));
    char v28 = v27;
    swift_bridgeObjectRelease((_BYTE)v35);
    uint64_t result = (uint64_t)v31;
    uint64_t *v31 = ML14_UntypedColumnC_s5Error_pTgm5;
    *(unsigned char *)(result + 8) = v28 & 1;
  }
  return result;
}

uint64_t outlined init with copy of MLTextClassifier(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = type metadata accessor for MLTextClassifier(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v2 - 8) + 16))(a2, a1, v2);
  return a2;
}

uint64_t outlined destroy of MLTextClassifier(uint64_t a1)
{
  uint64_t v1 = type metadata accessor for MLTextClassifier(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v1 - 8) + 8))(a1, v1);
  return a1;
}

uint64_t MLWordTagger.ModelParameters.init(validation:algorithm:language:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v13 = a3;
  uint64_t v4 = v3;
  uint64_t v5 = type metadata accessor for MLWordTagger.ModelParameters.ValidationData(0);
  int64_t v6 = *(void *)(*(void *)(v5 - 8) + 64);
  uint64_t v7 = alloca(v6);
  uint64_t v8 = alloca(v6);
  LOBYTE(v6) = *(unsigned char *)(a2 + 16);
  uint64_t v14 = v4 + 32;
  *(_OWORD *)(v4 + 80) = 0;
  *(_OWORD *)(v4 + 64) = 0;
  *(_OWORD *)(v4 + 48) = 0;
  *(_OWORD *)(v4 + 32) = 0;
  *(void *)(v4 + 96) = 0;
  *(unsigned char *)(v4 + 104) = 1;
  *(_OWORD *)uint64_t v4 = *(_OWORD *)a2;
  *(unsigned char *)(v4 + 16) = v6;
  *(void *)(v4 + 24) = v13;
  outlined init with copy of MLWordTagger.ModelParameters.ValidationData(a1, (uint64_t)&v11);
  *(_OWORD *)(v4 + 64) = 0;
  v12[3] = v5;
  boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1(v12);
  outlined init with take of MLWordTagger.ModelParameters.ValidationData((uint64_t)&v11, (uint64_t)boxed_opaque_existential_1);
  outlined assign with take of Any?((uint64_t)v12, v14);
  return outlined destroy of MLWordTagger.ModelParameters.ValidationData(a1);
}

uint64_t MLWordTagger.ModelParameters.validation.getter()
{
  uint64_t v2 = v0;
  outlined init with copy of Any?(v1 + 32, (uint64_t)&v6);
  if (!v7) {
    BUG();
  }
  outlined init with take of Any(&v6, v5);
  uint64_t v3 = type metadata accessor for MLWordTagger.ModelParameters.ValidationData(0);
  return swift_dynamicCast(v2, v5, (char *)&type metadata for Any + 8, v3, 7);
}

void MLWordTagger.ModelParameters.init(validationData:algorithm:language:tokenColumnValidationData:labelColumnValidationData:)(uint64_t a1, uint64_t a2, void *a3, uint64_t a4, unint64_t a5, uint64_t a6, unint64_t a7)
{
  uint64_t v23 = a4;
  uint64_t v9 = v7;
  uint64_t v28 = a6;
  unint64_t v24 = a5;
  uint64_t v11 = type metadata accessor for MLWordTagger.ModelParameters.ValidationData(0);
  int64_t v12 = a3;
  uint64_t v13 = v11;
  int64_t v14 = *(void *)(*(void *)(v11 - 8) + 64);
  uint64_t v15 = alloca(v14);
  NSString v16 = alloca(v14);
  uint64_t v17 = *(void *)a1;
  char v18 = *(unsigned char *)(a1 + 8);
  LOBYTE(v14) = *(unsigned char *)(a2 + 16);
  *(_OWORD *)(v9 + 80) = 0;
  *(_OWORD *)(v9 + 64) = 0;
  *(void *)(v9 + 96) = 0;
  *(_OWORD *)(v9 + 48) = 0;
  *(_OWORD *)(v9 + 32) = 0;
  *(unsigned char *)(v9 + 104) = 1;
  *(_OWORD *)uint64_t v9 = *(_OWORD *)a2;
  *(unsigned char *)(v9 + 16) = v14;
  *(void *)(v9 + 24) = v12;
  if (v18 == -1)
  {
    long long v21 = 0;
    LOWORD(v22) = 256;
    unint64_t v19 = v12;
    swift_storeEnumTagMultiPayload(&v21, v13, 0);
    v19;
  }
  else
  {
    uint64_t v26 = v13;
    uint64_t v27 = v17;
    *((void *)&v21 + 1) = v17;
    LOBYTE(v22) = v18 & 1;
    unint64_t v25 = (unint64_t)v12;
    v12;
    if (MLDataTable.size.getter())
    {
      *(void *)&long long v21 = v27;
      BYTE8(v21) = v18 & 1;
      uint64_t v22 = 1954047348;
      uint64_t v23 = 0xE400000000000000;
      unint64_t v24 = 0x736C6562616CLL;
      unint64_t v25 = 0xE600000000000000;
      swift_storeEnumTagMultiPayload(&v21, v26, 1);
    }
    else
    {
      outlined consume of MLDataTable?(v27, v18);
      swift_storeEnumTagMultiPayload(&v21, v26, 4);
    }
    unint64_t v19 = (void *)v25;
  }
  uint64_t v20 = v28;
  MLWordTagger.ModelParameters.validation.setter((uint64_t)&v21);
  MLWordTagger.ModelParameters.tokenColumnValidationData.setter(v23, v24);
  MLWordTagger.ModelParameters.labelColumnValidationData.setter(v20, a7);
}

id MLWordTagger.ModelParameters.description.getter()
{
  id v13 = 0;
  int64_t v14 = (char *)0xE000000000000000;
  if (*(unsigned char *)(v0 + 16) == 1)
  {
    if (*(unsigned char *)v0)
    {
      if (*(unsigned char *)v0 == 1)
      {
        uint64_t v1 = "Unspecified Language" + 0x8000000000000000;
        unint64_t v2 = 0xD000000000000027;
      }
      else
      {
        uint64_t v1 = "Average Tokens per Sequence" + 0x8000000000000000;
        unint64_t v2 = 0xD000000000000046;
      }
    }
    else
    {
      unint64_t v2 = 0xD000000000000016;
      uint64_t v1 = "ge Model Text Embedding" + 0x8000000000000000;
    }
    unint64_t v12 = v2;
    swift_bridgeObjectRetain((_BYTE)v1);
    uint64_t v4 = 0x6C65646F4D20;
    v3._char object = (void *)0xE600000000000000;
    String.append(_:)(v3);
    swift_bridgeObjectRelease((_BYTE)v1);
    v3._uint64_t countAndFlagsBits = v12;
  }
  else
  {
    uint64_t v1 = "Dynamic Text Embedding" + 0x8000000000000000;
    v3._uint64_t countAndFlagsBits = 0xD00000000000001ELL;
  }
  v3._char object = v1;
  String.append(_:)(v3);
  swift_bridgeObjectRelease((_BYTE)v1);
  v5._uint64_t countAndFlagsBits = (uint64_t)v13;
  long long v6 = v14;
  id v13 = (id)0xD000000000000010;
  int64_t v14 = "than the trained model." + 0x8000000000000000;
  v5._char object = v6;
  String.append(_:)(v5);
  swift_bridgeObjectRelease((_BYTE)v6);
  swift_bridgeObjectRetain(("than the trained model." + 0x8000000000000000));
  v5._uint64_t countAndFlagsBits = 0x676175676E614C0ALL;
  v5._char object = (void *)0xEB00000000203A65;
  String.append(_:)(v5);
  swift_bridgeObjectRelease(("than the trained model." + 0x8000000000000000));
  id v13 = *(id *)(v0 + 24);
  v13;
  uint64_t v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NLLanguage?);
  id v13 = (id)String.init<A>(describing:)(&v13, v7);
  int64_t v14 = v8;
  v5._uint64_t countAndFlagsBits = 10;
  v5._char object = (void *)0xE100000000000000;
  String.append(_:)(v5);
  uint64_t v9 = (uint64_t)v13;
  uint64_t v10 = v14;
  id v13 = (id)0xD000000000000010;
  int64_t v14 = "than the trained model." + 0x8000000000000000;
  swift_bridgeObjectRetain(("than the trained model." + 0x8000000000000000));
  v5._uint64_t countAndFlagsBits = v9;
  v5._char object = v10;
  String.append(_:)(v5);
  swift_bridgeObjectRelease(("than the trained model." + 0x8000000000000000));
  swift_bridgeObjectRelease((_BYTE)v10);
  return v13;
}

uint64_t MLWordTagger.ModelParameters.maxIterations.getter()
{
  return *(void *)(v0 + 96);
}

uint64_t MLWordTagger.ModelParameters.algorithm.getter()
{
  char v2 = *(unsigned char *)(v1 + 16);
  *(_OWORD *)uint64_t result = *(_OWORD *)v1;
  *(unsigned char *)(result + 16) = v2;
  return result;
}

char MLWordTagger.ModelParameters.algorithm.setter(uint64_t a1)
{
  char result = *(unsigned char *)(a1 + 16);
  *(_OWORD *)uint64_t v1 = *(_OWORD *)a1;
  *(unsigned char *)(v1 + 16) = result;
  return result;
}

void (*MLWordTagger.ModelParameters.algorithm.modify())()
{
  return MLBoostedTreeRegressor.ModelParameters.maxDepth.modify;
}

void *MLWordTagger.ModelParameters.language.getter()
{
  uint64_t v1 = *(void **)(v0 + 24);
  v1;
  return v1;
}

void MLWordTagger.ModelParameters.language.setter(uint64_t a1)
{
  *(void *)(v1 + 24) = a1;
}

void (*MLWordTagger.ModelParameters.language.modify())()
{
  return MLBoostedTreeRegressor.ModelParameters.maxDepth.modify;
}

uint64_t MLWordTagger.ModelParameters.validationData.getter(__m128 a1)
{
  uint64_t v2 = type metadata accessor for MLWordTagger.ModelParameters.ValidationData(0);
  int64_t v3 = *(void *)(*(void *)(v2 - 8) + 64);
  uint64_t v4 = alloca(v3);
  Swift::String v5 = alloca(v3);
  outlined init with copy of Any?(v1 + 32, (uint64_t)&v9);
  if (!v10) {
    BUG();
  }
  outlined init with take of Any(&v9, v8);
  swift_dynamicCast(&v7, v8, (char *)&type metadata for Any + 8, v2, 7);
  MLWordTagger.ModelParameters.ValidationData.table.getter(a1);
  return outlined destroy of MLWordTagger.ModelParameters.ValidationData((uint64_t)&v7);
}

uint64_t key path getter for MLWordTagger.ModelParameters.validationData : MLWordTagger.ModelParameters(__m128 a1)
{
  uint64_t v2 = v1;
  MLWordTagger.ModelParameters.validationData.getter(a1);
  uint64_t result = v4;
  *(void *)uint64_t v2 = v4;
  *(unsigned char *)(v2 + 8) = v5;
  return result;
}

uint64_t key path setter for MLWordTagger.ModelParameters.validationData : MLWordTagger.ModelParameters(uint64_t a1)
{
  int v1 = *(_DWORD *)(a1 + 8);
  uint64_t v3 = *(void *)a1;
  char v4 = v1;
  outlined copy of MLDataTable?(v3, v1);
  return MLWordTagger.ModelParameters.validationData.setter((uint64_t)&v3);
}

uint64_t MLWordTagger.ModelParameters.validationData.setter(uint64_t a1)
{
  unsigned int v2 = 0;
  uint64_t v3 = type metadata accessor for MLWordTagger.ModelParameters.ValidationData(0);
  int64_t v4 = *(void *)(*(void *)(v3 - 8) + 64);
  char v5 = alloca(v4);
  long long v6 = alloca(v4);
  char v7 = *(unsigned char *)(a1 + 8);
  if (v7 == -1)
  {
    long long v11 = 0;
    LOWORD(v12) = 256;
  }
  else
  {
    uint64_t v14 = v3;
    unint64_t v13 = v1;
    uint64_t v8 = *(void *)a1;
    *((void *)&v11 + 1) = *(void *)a1;
    LOBYTE(v12) = v7 & 1;
    if (MLDataTable.size.getter())
    {
      *(void *)&long long v11 = v8;
      BYTE8(v11) = v7 & 1;
      uint64_t v12 = 1954047348;
      unint64_t v13 = 0xE400000000000000;
      uint64_t v14 = 0x736C6562616CLL;
      unint64_t v15 = 0xE600000000000000;
      int v10 = 1;
    }
    else
    {
      outlined consume of MLDataTable?(v8, v7);
      int v10 = 4;
    }
    unsigned int v2 = v10;
    uint64_t v3 = v14;
  }
  swift_storeEnumTagMultiPayload(&v11, v3, v2);
  return MLWordTagger.ModelParameters.validation.setter((uint64_t)&v11);
}

uint64_t MLWordTagger.ModelParameters.validation.setter(uint64_t a1)
{
  swift_bridgeObjectRelease(*(void *)(v1 + 72));
  *(_OWORD *)(v1 + 64) = 0;
  uint64_t v4[3] = type metadata accessor for MLWordTagger.ModelParameters.ValidationData(0);
  boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1(v4);
  outlined init with take of MLWordTagger.ModelParameters.ValidationData(a1, (uint64_t)boxed_opaque_existential_1);
  return outlined assign with take of Any?((uint64_t)v4, v1 + 32);
}

uint64_t outlined init with take of MLWordTagger.ModelParameters.ValidationData(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = type metadata accessor for MLWordTagger.ModelParameters.ValidationData(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v2 - 8) + 32))(a2, a1, v2);
  return a2;
}

void (*MLWordTagger.ModelParameters.validationData.modify(void *a1, __m128 a2))(uint64_t **a1, char a2)
{
  uint64_t v3 = malloc(0x30uLL);
  *a1 = v3;
  v3[2] = v2;
  uint64_t v4 = type metadata accessor for MLWordTagger.ModelParameters.ValidationData(0);
  v3[3] = v4;
  size_t v5 = *(void *)(*(void *)(v4 - 8) + 64);
  v3[4] = malloc(v5);
  v3[5] = malloc(v5);
  MLWordTagger.ModelParameters.validationData.getter(a2);
  return MLWordTagger.ModelParameters.validationData.modify;
}

void MLWordTagger.ModelParameters.validationData.modify(uint64_t **a1, char a2)
{
  uint64_t v2 = *a1;
  uint64_t v3 = **a1;
  char v4 = *((unsigned char *)*a1 + 8);
  if (a2)
  {
    if (v4 == -1)
    {
      uint64_t v13 = v2[3];
      uint64_t v14 = v2[4];
      *(_OWORD *)uint64_t v14 = 0;
      *(_WORD *)(v14 + 16) = 256;
      uint64_t v15 = 0;
    }
    else
    {
      char v5 = *((unsigned char *)*a1 + 8);
      char v6 = v4 & 1;
      outlined copy of MLDataTable?(v3, v5);
      Swift::Int v7 = MLDataTable.size.getter();
      uint64_t v8 = v2[3];
      uint64_t v9 = v2[4];
      if (v7)
      {
        *(void *)uint64_t v9 = v3;
        *(unsigned char *)(v9 + 8) = v6;
        *(void *)(v9 + 16) = 1954047348;
        *(void *)(v9 + 24) = 0xE400000000000000;
        *(void *)(v9 + 32) = 0x736C6562616CLL;
        *(void *)(v9 + 40) = 0xE600000000000000;
        uint64_t v21 = 1;
      }
      else
      {
        outlined consume of MLDataTable?(v3, v5);
        uint64_t v21 = 4;
      }
      uint64_t v15 = v21;
      uint64_t v14 = v9;
      uint64_t v13 = v8;
    }
    swift_storeEnumTagMultiPayload(v14, v13, v15);
    unint64_t v19 = (void *)v2[5];
    uint64_t v20 = (void *)v2[4];
    MLWordTagger.ModelParameters.validation.setter((uint64_t)v20);
    outlined consume of MLDataTable?(*v2, *((_DWORD *)v2 + 2));
  }
  else
  {
    if (v4 == -1)
    {
      uint64_t v16 = v2[3];
      uint64_t v17 = v2[5];
      *(_OWORD *)uint64_t v17 = 0;
      *(_WORD *)(v17 + 16) = 256;
      uint64_t v18 = 0;
    }
    else
    {
      Swift::Int v10 = MLDataTable.size.getter();
      uint64_t v11 = v2[3];
      uint64_t v12 = v2[5];
      if (v10)
      {
        *(void *)uint64_t v12 = v3;
        *(unsigned char *)(v12 + 8) = v4 & 1;
        *(void *)(v12 + 16) = 1954047348;
        *(void *)(v12 + 24) = 0xE400000000000000;
        *(void *)(v12 + 32) = 0x736C6562616CLL;
        *(void *)(v12 + 40) = 0xE600000000000000;
        uint64_t v22 = 1;
      }
      else
      {
        outlined consume of MLDataTable?(v3, v4);
        uint64_t v22 = 4;
      }
      uint64_t v18 = v22;
      uint64_t v17 = v12;
      uint64_t v16 = v11;
    }
    swift_storeEnumTagMultiPayload(v17, v16, v18);
    unint64_t v19 = (void *)v2[5];
    uint64_t v20 = (void *)v2[4];
    MLWordTagger.ModelParameters.validation.setter((uint64_t)v19);
  }
  free(v19);
  free(v20);
  free(v2);
}

uint64_t MLWordTagger.ModelParameters.tokenColumnValidationData.getter()
{
  uint64_t v1 = type metadata accessor for MLWordTagger.ModelParameters.ValidationData(0);
  int64_t v2 = *(void *)(*(void *)(v1 - 8) + 64);
  uint64_t v3 = alloca(v2);
  char v4 = alloca(v2);
  outlined init with copy of Any?(v0 + 32, (uint64_t)&v11);
  if (!v12) {
    BUG();
  }
  outlined init with take of Any(&v11, &v9);
  swift_dynamicCast(&v9, &v9, (char *)&type metadata for Any + 8, v1, 7);
  if (swift_getEnumCaseMultiPayload(&v9, v1) == 1)
  {
    uint64_t v5 = v9;
    uint64_t v6 = v10;
    char v7 = BYTE8(v9);
    swift_bridgeObjectRelease(BYTE8(v11));
    outlined consume of Result<_DataTable, Error>(v5, v7);
  }
  else
  {
    outlined destroy of MLWordTagger.ModelParameters.ValidationData((uint64_t)&v9);
    uint64_t v6 = *(void *)(v0 + 64);
    swift_bridgeObjectRetain(*(void *)(v0 + 72));
  }
  return v6;
}

uint64_t MLWordTagger.ModelParameters.tokenColumnValidationData.setter(uint64_t a1, unint64_t a2)
{
  unint64_t v20 = a2;
  uint64_t v19 = a1;
  uint64_t v3 = type metadata accessor for MLWordTagger.ModelParameters.ValidationData(0);
  int64_t v4 = *(void *)(*(void *)(v3 - 8) + 64);
  uint64_t v5 = alloca(v4);
  uint64_t v6 = alloca(v4);
  char v7 = alloca(v4);
  uint64_t v8 = alloca(v4);
  outlined init with copy of Any?(v2 + 32, (uint64_t)&v16);
  if (!v17) {
    BUG();
  }
  outlined init with take of Any(&v16, &v13);
  swift_dynamicCast(&v13, &v13, (char *)&type metadata for Any + 8, v3, 7);
  if (swift_getEnumCaseMultiPayload(&v13, v3) == 1)
  {
    uint64_t v9 = v13;
    char v21 = BYTE8(v13);
    long long v18 = v16;
    swift_bridgeObjectRelease(v15);
    swift_bridgeObjectRelease(*(void *)(v2 + 72));
    uint64_t v10 = v19;
    if (!v20) {
      uint64_t v10 = 1954047348;
    }
    unint64_t v11 = 0xE400000000000000;
    if (v20) {
      unint64_t v11 = v20;
    }
    *(_OWORD *)(v2 + 64) = 0;
    *(void *)&long long v13 = v9;
    BYTE8(v13) = v21;
    uint64_t v14 = v10;
    unint64_t v15 = v11;
    long long v16 = v18;
    swift_storeEnumTagMultiPayload(&v13, v3, 1);
    return MLWordTagger.ModelParameters.validation.setter((uint64_t)&v13);
  }
  else
  {
    outlined destroy of MLWordTagger.ModelParameters.ValidationData((uint64_t)&v13);
    swift_bridgeObjectRelease(*(void *)(v2 + 72));
    *(void *)(v2 + 64) = v19;
    uint64_t result = v20;
    *(void *)(v2 + 72) = v20;
  }
  return result;
}

uint64_t (*MLWordTagger.ModelParameters.tokenColumnValidationData.modify(void *a1))(uint64_t *a1, char a2)
{
  a1[2] = v1;
  *a1 = MLWordTagger.ModelParameters.tokenColumnValidationData.getter(a1);
  a1[1] = v2;
  return MLWordTagger.ModelParameters.tokenColumnValidationData.modify;
}

uint64_t MLWordTagger.ModelParameters.tokenColumnValidationData.modify(uint64_t *a1, char a2)
{
  return MLWordTagger.ModelParameters.tokenColumnValidationData.modify(a1, a2, (uint64_t (*)(uint64_t, uint64_t))MLWordTagger.ModelParameters.tokenColumnValidationData.setter);
}

uint64_t MLWordTagger.ModelParameters.labelColumnValidationData.getter()
{
  uint64_t v1 = type metadata accessor for MLWordTagger.ModelParameters.ValidationData(0);
  int64_t v2 = *(void *)(*(void *)(v1 - 8) + 64);
  uint64_t v3 = alloca(v2);
  int64_t v4 = alloca(v2);
  outlined init with copy of Any?(v0 + 32, (uint64_t)&v11);
  if (!v12) {
    BUG();
  }
  outlined init with take of Any(&v11, &v9);
  swift_dynamicCast(&v9, &v9, (char *)&type metadata for Any + 8, v1, 7);
  if (swift_getEnumCaseMultiPayload(&v9, v1) == 1)
  {
    uint64_t v5 = v9;
    uint64_t v6 = v11;
    char v7 = BYTE8(v9);
    swift_bridgeObjectRelease(v10);
    outlined consume of Result<_DataTable, Error>(v5, v7);
  }
  else
  {
    outlined destroy of MLWordTagger.ModelParameters.ValidationData((uint64_t)&v9);
    uint64_t v6 = *(void *)(v0 + 80);
    swift_bridgeObjectRetain(*(void *)(v0 + 88));
  }
  return v6;
}

uint64_t key path setter for MLWordTagger.ModelParameters.tokenColumnValidationData : MLWordTagger.ModelParameters(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(uint64_t, uint64_t))
{
  uint64_t v6 = *a1;
  uint64_t v7 = a1[1];
  swift_bridgeObjectRetain(v7);
  return a5(v6, v7);
}

uint64_t MLWordTagger.ModelParameters.labelColumnValidationData.setter(uint64_t a1, unint64_t a2)
{
  unint64_t v19 = a2;
  uint64_t v18 = a1;
  uint64_t v3 = type metadata accessor for MLWordTagger.ModelParameters.ValidationData(0);
  int64_t v4 = *(void *)(*(void *)(v3 - 8) + 64);
  uint64_t v5 = alloca(v4);
  uint64_t v6 = alloca(v4);
  uint64_t v7 = alloca(v4);
  uint64_t v8 = alloca(v4);
  outlined init with copy of Any?(v2 + 32, (uint64_t)&v15);
  if (!v16) {
    BUG();
  }
  outlined init with take of Any(&v15, &v13);
  swift_dynamicCast(&v13, &v13, (char *)&type metadata for Any + 8, v3, 7);
  if (swift_getEnumCaseMultiPayload(&v13, v3) == 1)
  {
    uint64_t v9 = v13;
    char v20 = BYTE8(v13);
    long long v17 = v14;
    swift_bridgeObjectRelease(BYTE8(v15));
    swift_bridgeObjectRelease(*(void *)(v2 + 88));
    uint64_t v10 = v18;
    if (!v19) {
      uint64_t v10 = 0x6C6562616CLL;
    }
    unint64_t v11 = 0xE500000000000000;
    if (v19) {
      unint64_t v11 = v19;
    }
    *(_OWORD *)(v2 + 80) = 0;
    *(void *)&long long v13 = v9;
    BYTE8(v13) = v20;
    long long v14 = v17;
    *(void *)&long long v15 = v10;
    *((void *)&v15 + 1) = v11;
    swift_storeEnumTagMultiPayload(&v13, v3, 1);
    return MLWordTagger.ModelParameters.validation.setter((uint64_t)&v13);
  }
  else
  {
    outlined destroy of MLWordTagger.ModelParameters.ValidationData((uint64_t)&v13);
    swift_bridgeObjectRelease(*(void *)(v2 + 88));
    *(void *)(v2 + 80) = v18;
    uint64_t result = v19;
    *(void *)(v2 + 88) = v19;
  }
  return result;
}

uint64_t (*MLWordTagger.ModelParameters.labelColumnValidationData.modify(void *a1))(uint64_t *a1, char a2)
{
  a1[2] = v1;
  *a1 = MLWordTagger.ModelParameters.labelColumnValidationData.getter(a1);
  a1[1] = v2;
  return MLWordTagger.ModelParameters.labelColumnValidationData.modify;
}

uint64_t MLWordTagger.ModelParameters.labelColumnValidationData.modify(uint64_t *a1, char a2)
{
  return MLWordTagger.ModelParameters.tokenColumnValidationData.modify(a1, a2, (uint64_t (*)(uint64_t, uint64_t))MLWordTagger.ModelParameters.labelColumnValidationData.setter);
}

uint64_t MLWordTagger.ModelParameters.tokenColumnValidationData.modify(uint64_t *a1, char a2, uint64_t (*a3)(uint64_t, uint64_t))
{
  uint64_t v4 = *a1;
  uint64_t v5 = a1[1];
  if ((a2 & 1) == 0) {
    return a3(*a1, v5);
  }
  swift_bridgeObjectRetain(a1[1]);
  a3(v4, v5);
  return swift_bridgeObjectRelease(v5);
}

uint64_t key path getter for MLWordTagger.ModelParameters.maxIterations : MLWordTagger.ModelParameters()
{
  uint64_t v1 = v0;
  uint64_t result = MLWordTagger.ModelParameters.maxIterations.getter();
  *(void *)uint64_t v1 = result;
  *(unsigned char *)(v1 + 8) = v3 & 1;
  return result;
}

void key path setter for MLWordTagger.ModelParameters.maxIterations : MLWordTagger.ModelParameters(uint64_t a1)
{
}

void MLWordTagger.ModelParameters.maxIterations.setter(uint64_t a1, char a2)
{
  *(void *)(v2 + 96) = a1;
  *(unsigned char *)(v2 + 104) = a2 & 1;
}

uint64_t (*MLWordTagger.ModelParameters.maxIterations.modify(uint64_t a1))(uint64_t a1)
{
  *(void *)(a1 + 16) = v1;
  char v2 = *(unsigned char *)(v1 + 104);
  *(void *)a1 = *(void *)(v1 + 96);
  *(unsigned char *)(a1 + 8) = v2;
  return MLWordTagger.ModelParameters.maxIterations.modify;
}

uint64_t MLWordTagger.ModelParameters.maxIterations.modify(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 16);
  char v2 = *(unsigned char *)(a1 + 8);
  *(void *)(result + 96) = *(void *)a1;
  *(unsigned char *)(result + 104) = v2;
  return result;
}

uint64_t key path setter for MLWordTagger.ModelParameters.validation : MLWordTagger.ModelParameters(uint64_t a1)
{
  v6[0] = v1;
  int64_t v2 = *(void *)(*(void *)(type metadata accessor for MLWordTagger.ModelParameters.ValidationData(0) - 8) + 64);
  char v3 = alloca(v2);
  uint64_t v4 = alloca(v2);
  outlined init with copy of MLWordTagger.ModelParameters.ValidationData(a1, (uint64_t)v6);
  return MLWordTagger.ModelParameters.validation.setter((uint64_t)v6);
}

void (*MLWordTagger.ModelParameters.validation.modify(void *a1))(uint64_t a1, char a2)
{
  int64_t v2 = malloc(0x58uLL);
  *a1 = v2;
  *((void *)v2 + 8) = v1;
  uint64_t v3 = type metadata accessor for MLWordTagger.ModelParameters.ValidationData(0);
  size_t v4 = *(void *)(*(void *)(v3 - 8) + 64);
  *((void *)v2 + 9) = malloc(v4);
  uint64_t v5 = malloc(v4);
  *((void *)v2 + 10) = v5;
  outlined init with copy of Any?(v1 + 32, (uint64_t)(v2 + 2));
  if (!*((void *)v2 + 7)) {
    BUG();
  }
  outlined init with take of Any(v2 + 2, v2);
  swift_dynamicCast(v5, v2, (char *)&type metadata for Any + 8, v3, 7);
  return MLWordTagger.ModelParameters.validation.modify;
}

void MLWordTagger.ModelParameters.validation.modify(uint64_t a1, char a2)
{
  int64_t v2 = *(void **)a1;
  uint64_t v3 = *(void **)(*(void *)a1 + 80);
  size_t v4 = *(void **)(*(void *)a1 + 72);
  if (a2)
  {
    outlined init with copy of MLWordTagger.ModelParameters.ValidationData((uint64_t)v3, (uint64_t)v4);
    MLWordTagger.ModelParameters.validation.setter((uint64_t)v4);
    outlined destroy of MLWordTagger.ModelParameters.ValidationData((uint64_t)v3);
  }
  else
  {
    MLWordTagger.ModelParameters.validation.setter((uint64_t)v3);
  }
  free(v3);
  free(v4);
  free(v2);
}

void MLWordTagger.ModelParameters.init(validationData:algorithm:language:)(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v5 = v3;
  uint64_t v18 = type metadata accessor for MLWordTagger.ModelParameters.ValidationData(0);
  int64_t v6 = *(void *)(*(void *)(v18 - 8) + 64);
  uint64_t v7 = alloca(v6);
  uint64_t v8 = alloca(v6);
  LOBYTE(v6) = *(unsigned char *)(a2 + 16);
  uint64_t v20 = v5 + 32;
  *(_OWORD *)(v5 + 80) = 0;
  *(_OWORD *)(v5 + 64) = 0;
  *(_OWORD *)(v5 + 48) = 0;
  *(_OWORD *)(v5 + 32) = 0;
  *(void *)(v5 + 96) = 0;
  *(unsigned char *)(v5 + 104) = 1;
  *(_OWORD *)uint64_t v5 = *(_OWORD *)a2;
  *(unsigned char *)(v5 + 16) = v6;
  *(void *)(v5 + 24) = a3;
  id v19 = a3;
  static MLWordTagger.generateTextTable(_:tokenColumn:labelColumn:)(a1, 1954047348, 0xE400000000000000, 0x736C6562616CLL, 0xE600000000000000);
  swift_bridgeObjectRelease(a1);
  if (MLDataTable.size.getter())
  {
    uint64_t v12 = v14;
    char v13 = v15;
    uint64_t v14 = 1954047348;
    unint64_t v15 = 0xE400000000000000;
    uint64_t v16 = 0x736C6562616CLL;
    unint64_t v17 = 0xE600000000000000;
    uint64_t v9 = 1;
  }
  else
  {
    outlined consume of MLDataTable?(v14, v15);
    uint64_t v9 = 4;
  }
  unint64_t v10 = v18;
  swift_storeEnumTagMultiPayload(&v12, v18, v9);
  *(_OWORD *)(v5 + 64) = 0;
  unint64_t v17 = v10;
  unint64_t v11 = __swift_allocate_boxed_opaque_existential_1(&v14);
  outlined init with take of MLWordTagger.ModelParameters.ValidationData((uint64_t)&v12, (uint64_t)v11);
  outlined assign with take of Any?((uint64_t)&v14, v20);
  MLWordTagger.ModelParameters.tokenColumnValidationData.setter(1954047348, 0xE400000000000000);
  MLWordTagger.ModelParameters.labelColumnValidationData.setter(0x736C6562616CLL, 0xE600000000000000);
}

Swift::Void __swiftcall __spoils<cf,zf,sf,of,pf,rax,rdx,rcx,rdi,rsi,r8,r9,r10,r11,r12,xmm0,xmm1,xmm2,xmm3,xmm4,xmm5,xmm6,xmm7> MLWordTagger.ModelParameters.validateRevision()()
{
  uint64_t v1 = v0[1];
  if (!*((unsigned char *)v0 + 16))
  {
    if (v1) {
      return;
    }
    uint64_t v1 = *v0;
  }
  if (!NLPSequenceModelIsRevisionSupported(v1))
  {
    _StringGuts.grow(_:)(29);
    swift_bridgeObjectRelease(0);
    v2._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter(&type metadata for Int, &protocol witness table for Int);
    char object = (char)v2._object;
    String.append(_:)(v2);
    swift_bridgeObjectRelease(object);
    v4._char object = "und in the model." + 0x8000000000000000;
    v4._uint64_t countAndFlagsBits = 0xD000000000000012;
    String.append(_:)(v4);
    v4._char object = (void *)lazy protocol witness table accessor for type MLCreateError and conformance MLCreateError();
    swift_allocError(&type metadata for MLCreateError, v4._object, 0, 0);
    *(void *)uint64_t v5 = 0x6E6F697369766552;
    *(void *)(v5 + 8) = 0xE900000000000020;
    *(_OWORD *)(v5 + 16) = 0;
    *(_OWORD *)(v5 + 32) = 0;
    *(unsigned char *)(v5 + 48) = 0;
    swift_willThrow(&type metadata for MLCreateError, v4._object, v5, v6, v7, v8);
  }
}

id MLWordTagger.ModelParameters.debugDescription.getter()
{
  return MLWordTagger.ModelParameters.description.getter();
}

id MLWordTagger.ModelParameters.playgroundDescription.getter()
{
  uint64_t v1 = v0;
  id result = MLWordTagger.ModelParameters.description.getter();
  v1[3] = &type metadata for String;
  void *v1 = result;
  v1[1] = v3;
  return result;
}

id protocol witness for CustomStringConvertible.description.getter in conformance MLWordTagger.ModelParameters()
{
  return MLWordTagger.ModelParameters.description.getter();
}

id protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance MLWordTagger.ModelParameters()
{
  return MLWordTagger.ModelParameters.debugDescription.getter();
}

id protocol witness for CustomPlaygroundDisplayConvertible.playgroundDescription.getter in conformance MLWordTagger.ModelParameters()
{
  return MLWordTagger.ModelParameters.playgroundDescription.getter();
}

uint64_t sub_21B763(__m128 a1)
{
  return key path getter for MLWordTagger.ModelParameters.validationData : MLWordTagger.ModelParameters(a1);
}

uint64_t sub_21B76D(uint64_t a1)
{
  return key path setter for MLWordTagger.ModelParameters.validationData : MLWordTagger.ModelParameters(a1);
}

uint64_t sub_21B777(uint64_t a1)
{
  Swift::String v2 = v1;
  uint64_t result = MLWordTagger.ModelParameters.tokenColumnValidationData.getter(a1);
  *Swift::String v2 = result;
  v2[1] = v4;
  return result;
}

uint64_t sub_21B795(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return key path setter for MLWordTagger.ModelParameters.tokenColumnValidationData : MLWordTagger.ModelParameters(a1, a2, a3, a4, (uint64_t (*)(uint64_t, uint64_t))MLWordTagger.ModelParameters.tokenColumnValidationData.setter);
}

uint64_t sub_21B7A7(uint64_t a1)
{
  Swift::String v2 = v1;
  uint64_t result = MLWordTagger.ModelParameters.labelColumnValidationData.getter(a1);
  *Swift::String v2 = result;
  v2[1] = v4;
  return result;
}

uint64_t sub_21B7C5(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return key path setter for MLWordTagger.ModelParameters.tokenColumnValidationData : MLWordTagger.ModelParameters(a1, a2, a3, a4, (uint64_t (*)(uint64_t, uint64_t))MLWordTagger.ModelParameters.labelColumnValidationData.setter);
}

uint64_t sub_21B7D7()
{
  return key path getter for MLWordTagger.ModelParameters.maxIterations : MLWordTagger.ModelParameters();
}

void sub_21B7E1(uint64_t a1)
{
}

uint64_t sub_21B7EB(uint64_t a1)
{
  return MLWordTagger.ModelParameters.validation.getter(a1);
}

uint64_t sub_21B802(uint64_t a1)
{
  return key path setter for MLWordTagger.ModelParameters.validation : MLWordTagger.ModelParameters(a1);
}

uint64_t destroy for MLWordTagger.ModelParameters(uint64_t a1)
{
  if (*(void *)(a1 + 56)) {
    __swift_destroy_boxed_opaque_existential_1Tm((void *)(a1 + 32));
  }
  swift_bridgeObjectRelease(*(void *)(a1 + 72));
  return swift_bridgeObjectRelease(*(void *)(a1 + 88));
}

uint64_t initializeWithCopy for MLWordTagger.ModelParameters(uint64_t a1, uint64_t a2)
{
  *(unsigned char *)(a1 + 16) = *(unsigned char *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  uint64_t v3 = *(void **)(a2 + 24);
  *(void *)(a1 + 24) = v3;
  uint64_t v4 = *(void *)(a2 + 56);
  v3;
  if (v4)
  {
    *(void *)(a1 + 56) = v4;
    (**(void (***)(uint64_t, uint64_t, uint64_t))(v4 - 8))(a1 + 32, a2 + 32, v4);
  }
  else
  {
    long long v5 = *(_OWORD *)(a2 + 32);
    *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
    *(_OWORD *)(a1 + 32) = v5;
  }
  *(void *)(a1 + 64) = *(void *)(a2 + 64);
  uint64_t v6 = *(void *)(a2 + 72);
  *(void *)(a1 + 72) = v6;
  *(void *)(a1 + 80) = *(void *)(a2 + 80);
  uint64_t v7 = *(void *)(a2 + 88);
  *(void *)(a1 + 88) = v7;
  *(void *)(a1 + 96) = *(void *)(a2 + 96);
  *(unsigned char *)(a1 + 104) = *(unsigned char *)(a2 + 104);
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRetain(v7);
  return a1;
}

uint64_t assignWithCopy for MLWordTagger.ModelParameters(uint64_t a1, uint64_t a2)
{
  *(unsigned char *)(a1 + 16) = *(unsigned char *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  uint64_t v3 = *(void **)(a1 + 24);
  uint64_t v4 = *(void **)(a2 + 24);
  *(void *)(a1 + 24) = v4;
  v4;

  uint64_t v5 = *(void *)(a2 + 56);
  if (!*(void *)(a1 + 56))
  {
    if (v5)
    {
      *(void *)(a1 + 56) = v5;
      (**(void (***)(uint64_t, uint64_t))(v5 - 8))(a1 + 32, a2 + 32);
      goto LABEL_8;
    }
LABEL_7:
    long long v6 = *(_OWORD *)(a2 + 32);
    *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
    *(_OWORD *)(a1 + 32) = v6;
    goto LABEL_8;
  }
  if (!v5)
  {
    __swift_destroy_boxed_opaque_existential_1Tm((void *)(a1 + 32));
    goto LABEL_7;
  }
  __swift_assign_boxed_opaque_existential_0((uint64_t *)(a1 + 32), (uint64_t *)(a2 + 32));
LABEL_8:
  *(void *)(a1 + 64) = *(void *)(a2 + 64);
  uint64_t v7 = *(void *)(a2 + 72);
  uint64_t v8 = *(void *)(a1 + 72);
  *(void *)(a1 + 72) = v7;
  swift_bridgeObjectRetain(v7);
  swift_bridgeObjectRelease(v8);
  *(void *)(a1 + 80) = *(void *)(a2 + 80);
  uint64_t v9 = *(void *)(a2 + 88);
  uint64_t v10 = *(void *)(a1 + 88);
  *(void *)(a1 + 88) = v9;
  swift_bridgeObjectRetain(v9);
  swift_bridgeObjectRelease(v10);
  *(unsigned char *)(a1 + 104) = *(unsigned char *)(a2 + 104);
  *(void *)(a1 + 96) = *(void *)(a2 + 96);
  return a1;
}

void *__swift_memcpy105_8(void *a1, const void *a2)
{
  uint64_t result = a1;
  qmemcpy(a1, a2, 0x69uLL);
  return result;
}

uint64_t assignWithTake for MLWordTagger.ModelParameters(uint64_t a1, uint64_t a2)
{
  *(unsigned char *)(a1 + 16) = *(unsigned char *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  uint64_t v3 = *(void **)(a1 + 24);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);

  if (*(void *)(a1 + 56)) {
    __swift_destroy_boxed_opaque_existential_1Tm((void *)(a1 + 32));
  }
  long long v4 = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 32) = v4;
  *(void *)(a1 + 64) = *(void *)(a2 + 64);
  uint64_t v5 = *(void *)(a1 + 72);
  *(void *)(a1 + 72) = *(void *)(a2 + 72);
  swift_bridgeObjectRelease(v5);
  *(void *)(a1 + 80) = *(void *)(a2 + 80);
  uint64_t v6 = *(void *)(a1 + 88);
  *(void *)(a1 + 88) = *(void *)(a2 + 88);
  swift_bridgeObjectRelease(v6);
  *(unsigned char *)(a1 + 104) = *(unsigned char *)(a2 + 104);
  *(void *)(a1 + 96) = *(void *)(a2 + 96);
  return a1;
}

uint64_t getEnumTagSinglePayload for MLWordTagger.ModelParameters(uint64_t a1, unsigned int a2)
{
  if (a2)
  {
    if (a2 >= 0x7FFFFFFF && *(unsigned char *)(a1 + 105))
    {
      int v2 = *(_DWORD *)a1 + 2147483646;
    }
    else
    {
      unint64_t v3 = *(void *)(a1 + 24);
      unint64_t v4 = v3 & 0xFFFFFFFF00000001;
      int v5 = (v3 >> 1) - 1;
      int v6 = -1;
      if (v5 >= 0) {
        int v6 = v5;
      }
      int v2 = v4 != 0 ? -1 : v6;
    }
  }
  else
  {
    int v2 = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for MLWordTagger.ModelParameters(uint64_t a1, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFE)
  {
    *(_OWORD *)(a1 + 88) = 0;
    *(_OWORD *)(a1 + 72) = 0;
    *(_OWORD *)(a1 + 56) = 0;
    *(_OWORD *)(a1 + 40) = 0;
    *(_OWORD *)(a1 + 24) = 0;
    *(_OWORD *)(a1 + 8) = 0;
    *(void *)a1 = a2 - 0x7FFFFFFF;
    *(unsigned char *)(a1 + 104) = 0;
    if (a3 >= 0x7FFFFFFF) {
      *(unsigned char *)(a1 + 105) = 1;
    }
  }
  else
  {
    if (a3 >= 0x7FFFFFFF) {
      *(unsigned char *)(a1 + 105) = 0;
    }
    if (a2)
    {
      uint64_t result = 2 * a2;
      *(void *)(a1 + 24) = result;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for MLWordTagger.ModelParameters()
{
  return &type metadata for MLWordTagger.ModelParameters;
}

uint64_t specialized Result<>.init(catching:)(uint64_t a1, int *a2)
{
  v2[2] = a1;
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Result<MLStyleTransfer, Error>);
  v2[3] = v3;
  uint64_t v4 = swift_task_alloc((*(void *)(*(void *)(v3 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v2[4] = v4;
  int v5 = (uint64_t (*)(uint64_t))((char *)a2 + *a2);
  int v6 = (void *)swift_task_alloc(a2[1]);
  v2[5] = v6;
  *int v6 = v2;
  v6[1] = specialized Result<>.init(catching:);
  return v5(v4);
}

{
  void *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t (*v5)(uint64_t);
  void *v6;

  v2[2] = a1;
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Result<MLActionClassifier, Error>);
  v2[3] = v3;
  uint64_t v4 = swift_task_alloc((*(void *)(*(void *)(v3 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v2[4] = v4;
  int v5 = (uint64_t (*)(uint64_t))((char *)a2 + *a2);
  int v6 = (void *)swift_task_alloc(a2[1]);
  v2[5] = v6;
  *int v6 = v2;
  v6[1] = specialized Result<>.init(catching:);
  return v5(v4);
}

{
  void *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t (*v5)(uint64_t);
  void *v6;

  v2[2] = a1;
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Result<MLObjectDetector, Error>);
  v2[3] = v3;
  uint64_t v4 = swift_task_alloc((*(void *)(*(void *)(v3 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v2[4] = v4;
  int v5 = (uint64_t (*)(uint64_t))((char *)a2 + *a2);
  int v6 = (void *)swift_task_alloc(a2[1]);
  v2[5] = v6;
  *int v6 = v2;
  v6[1] = specialized Result<>.init(catching:);
  return v5(v4);
}

uint64_t specialized Result<>.init(catching:)()
{
  uint64_t v2 = *(void *)(*(void *)v1 + 40);
  *(void *)(*(void *)v1 + 48) = v0;
  swift_task_dealloc(v2);
  if (v0) {
    uint64_t v3 = specialized Result<>.init(catching:);
  }
  else {
    uint64_t v3 = specialized Result<>.init(catching:);
  }
  return swift_task_switch(v3, 0, 0);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  uint64_t v1 = *(void *)(v0 + 32);
  uint64_t v2 = *(void *)(v0 + 16);
  swift_storeEnumTagMultiPayload(v1, *(void *)(v0 + 24), 0);
  outlined init with take of DataFrame?(v1, v2, &demangling cache variable for type metadata for Result<MLStyleTransfer, Error>);
  swift_task_dealloc(*(void *)(v0 + 32));
  return (*(uint64_t (**)(void))(v0 + 8))();
}

{
  uint64_t v0;
  void *v1;
  uint64_t v2;

  uint64_t v1 = *(void **)(v0 + 16);
  uint64_t v2 = *(void *)(v0 + 24);
  uint64_t *v1 = *(void *)(v0 + 48);
  swift_storeEnumTagMultiPayload(v1, v2, 1);
  swift_task_dealloc(*(void *)(v0 + 32));
  return (*(uint64_t (**)(void))(v0 + 8))();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t (*v3)();

  uint64_t v2 = *(void *)(*(void *)v1 + 40);
  *(void *)(*(void *)v1 + 48) = v0;
  swift_task_dealloc(v2);
  if (v0) {
    uint64_t v3 = specialized Result<>.init(catching:);
  }
  else {
    uint64_t v3 = specialized Result<>.init(catching:);
  }
  return swift_task_switch(v3, 0, 0);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  uint64_t v1 = *(void *)(v0 + 32);
  uint64_t v2 = *(void *)(v0 + 16);
  swift_storeEnumTagMultiPayload(v1, *(void *)(v0 + 24), 0);
  outlined init with take of DataFrame?(v1, v2, &demangling cache variable for type metadata for Result<MLActionClassifier, Error>);
  swift_task_dealloc(*(void *)(v0 + 32));
  return (*(uint64_t (**)(void))(v0 + 8))();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t (*v3)();

  uint64_t v2 = *(void *)(*(void *)v1 + 40);
  *(void *)(*(void *)v1 + 48) = v0;
  swift_task_dealloc(v2);
  if (v0) {
    uint64_t v3 = specialized Result<>.init(catching:);
  }
  else {
    uint64_t v3 = specialized Result<>.init(catching:);
  }
  return swift_task_switch(v3, 0, 0);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  uint64_t v1 = *(void *)(v0 + 32);
  uint64_t v2 = *(void *)(v0 + 16);
  swift_storeEnumTagMultiPayload(v1, *(void *)(v0 + 24), 0);
  outlined init with take of DataFrame?(v1, v2, &demangling cache variable for type metadata for Result<MLObjectDetector, Error>);
  swift_task_dealloc(*(void *)(v0 + 32));
  return (*(uint64_t (**)(void))(v0 + 8))();
}

{
  return specialized Result<>.init(catching:)();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t (*v3)();

  uint64_t v2 = *(void *)(*(void *)v1 + 56);
  *(void *)(*(void *)v1 + 64) = v0;
  swift_task_dealloc(v2);
  if (v0) {
    uint64_t v3 = specialized Result<>.init(catching:);
  }
  else {
    uint64_t v3 = specialized Result<>.init(catching:);
  }
  return swift_task_switch(v3, 0, 0);
}

{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  void *v3;
  uint64_t v4;
  uint64_t v5;
  void *v6;

  uint64_t v1 = v0[6];
  uint64_t v2 = v0[5];
  swift_storeEnumTagMultiPayload(v2, v0[4], 0);
  outlined init with take of DataFrame?(v2, v1, &demangling cache variable for type metadata for Result<MLRandomForestRegressor, Error>);
  uint64_t v3 = v0;
  uint64_t v4 = v0[6];
  int v5 = v3[5];
  int v6 = v3;
  outlined init with take of DataFrame?(v4, v3[2], &demangling cache variable for type metadata for Result<MLRandomForestRegressor, Error>);
  swift_release();
  swift_task_dealloc(v4);
  swift_task_dealloc(v5);
  return ((uint64_t (*)(void))v6[1])();
}

{
  void *v0;
  uint64_t v1;
  void *v2;
  void *v3;
  uint64_t v4;
  uint64_t v5;
  void *v6;

  uint64_t v1 = v0[4];
  uint64_t v2 = (void *)v0[6];
  *uint64_t v2 = v0[8];
  swift_storeEnumTagMultiPayload(v2, v1, 1);
  uint64_t v3 = v0;
  uint64_t v4 = v0[6];
  int v5 = v3[5];
  int v6 = v3;
  outlined init with take of DataFrame?(v4, v3[2], &demangling cache variable for type metadata for Result<MLRandomForestRegressor, Error>);
  swift_release();
  swift_task_dealloc(v4);
  swift_task_dealloc(v5);
  return ((uint64_t (*)(void))v6[1])();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t (*v3)();

  uint64_t v2 = *(void *)(*(void *)v1 + 56);
  *(void *)(*(void *)v1 + 64) = v0;
  swift_task_dealloc(v2);
  if (v0) {
    uint64_t v3 = specialized Result<>.init(catching:);
  }
  else {
    uint64_t v3 = specialized Result<>.init(catching:);
  }
  return swift_task_switch(v3, 0, 0);
}

{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  void *v3;
  uint64_t v4;
  uint64_t v5;
  void *v6;

  uint64_t v1 = v0[6];
  uint64_t v2 = v0[5];
  swift_storeEnumTagMultiPayload(v2, v0[4], 0);
  outlined init with take of DataFrame?(v2, v1, &demangling cache variable for type metadata for Result<MLDecisionTreeRegressor, Error>);
  uint64_t v3 = v0;
  uint64_t v4 = v0[6];
  int v5 = v3[5];
  int v6 = v3;
  outlined init with take of DataFrame?(v4, v3[2], &demangling cache variable for type metadata for Result<MLDecisionTreeRegressor, Error>);
  swift_release();
  swift_task_dealloc(v4);
  swift_task_dealloc(v5);
  return ((uint64_t (*)(void))v6[1])();
}

{
  void *v0;
  uint64_t v1;
  void *v2;
  void *v3;
  uint64_t v4;
  uint64_t v5;
  void *v6;

  uint64_t v1 = v0[4];
  uint64_t v2 = (void *)v0[6];
  *uint64_t v2 = v0[8];
  swift_storeEnumTagMultiPayload(v2, v1, 1);
  uint64_t v3 = v0;
  uint64_t v4 = v0[6];
  int v5 = v3[5];
  int v6 = v3;
  outlined init with take of DataFrame?(v4, v3[2], &demangling cache variable for type metadata for Result<MLDecisionTreeRegressor, Error>);
  swift_release();
  swift_task_dealloc(v4);
  swift_task_dealloc(v5);
  return ((uint64_t (*)(void))v6[1])();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t (*v3)();

  uint64_t v2 = *(void *)(*(void *)v1 + 56);
  *(void *)(*(void *)v1 + 64) = v0;
  swift_task_dealloc(v2);
  if (v0) {
    uint64_t v3 = specialized Result<>.init(catching:);
  }
  else {
    uint64_t v3 = specialized Result<>.init(catching:);
  }
  return swift_task_switch(v3, 0, 0);
}

{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  void *v3;
  uint64_t v4;
  uint64_t v5;
  void *v6;

  uint64_t v1 = v0[6];
  uint64_t v2 = v0[5];
  swift_storeEnumTagMultiPayload(v2, v0[4], 0);
  outlined init with take of DataFrame?(v2, v1, &demangling cache variable for type metadata for Result<MLRandomForestClassifier, Error>);
  uint64_t v3 = v0;
  uint64_t v4 = v0[6];
  int v5 = v3[5];
  int v6 = v3;
  outlined init with take of DataFrame?(v4, v3[2], &demangling cache variable for type metadata for Result<MLRandomForestClassifier, Error>);
  swift_release();
  swift_task_dealloc(v4);
  swift_task_dealloc(v5);
  return ((uint64_t (*)(void))v6[1])();
}

{
  void *v0;
  uint64_t v1;
  void *v2;
  void *v3;
  uint64_t v4;
  uint64_t v5;
  void *v6;

  uint64_t v1 = v0[4];
  uint64_t v2 = (void *)v0[6];
  *uint64_t v2 = v0[8];
  swift_storeEnumTagMultiPayload(v2, v1, 1);
  uint64_t v3 = v0;
  uint64_t v4 = v0[6];
  int v5 = v3[5];
  int v6 = v3;
  outlined init with take of DataFrame?(v4, v3[2], &demangling cache variable for type metadata for Result<MLRandomForestClassifier, Error>);
  swift_release();
  swift_task_dealloc(v4);
  swift_task_dealloc(v5);
  return ((uint64_t (*)(void))v6[1])();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t (*v3)();

  uint64_t v2 = *(void *)(*(void *)v1 + 56);
  *(void *)(*(void *)v1 + 64) = v0;
  swift_task_dealloc(v2);
  if (v0) {
    uint64_t v3 = specialized Result<>.init(catching:);
  }
  else {
    uint64_t v3 = specialized Result<>.init(catching:);
  }
  return swift_task_switch(v3, 0, 0);
}

{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  void *v3;
  uint64_t v4;
  uint64_t v5;
  void *v6;

  uint64_t v1 = v0[6];
  uint64_t v2 = v0[5];
  swift_storeEnumTagMultiPayload(v2, v0[4], 0);
  outlined init with take of DataFrame?(v2, v1, &demangling cache variable for type metadata for Result<MLBoostedTreeRegressor, Error>);
  uint64_t v3 = v0;
  uint64_t v4 = v0[6];
  int v5 = v3[5];
  int v6 = v3;
  outlined init with take of DataFrame?(v4, v3[2], &demangling cache variable for type metadata for Result<MLBoostedTreeRegressor, Error>);
  swift_release();
  swift_task_dealloc(v4);
  swift_task_dealloc(v5);
  return ((uint64_t (*)(void))v6[1])();
}

{
  void *v0;
  uint64_t v1;
  void *v2;
  void *v3;
  uint64_t v4;
  uint64_t v5;
  void *v6;

  uint64_t v1 = v0[4];
  uint64_t v2 = (void *)v0[6];
  *uint64_t v2 = v0[8];
  swift_storeEnumTagMultiPayload(v2, v1, 1);
  uint64_t v3 = v0;
  uint64_t v4 = v0[6];
  int v5 = v3[5];
  int v6 = v3;
  outlined init with take of DataFrame?(v4, v3[2], &demangling cache variable for type metadata for Result<MLBoostedTreeRegressor, Error>);
  swift_release();
  swift_task_dealloc(v4);
  swift_task_dealloc(v5);
  return ((uint64_t (*)(void))v6[1])();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t (*v3)();

  uint64_t v2 = *(void *)(*(void *)v1 + 56);
  *(void *)(*(void *)v1 + 64) = v0;
  swift_task_dealloc(v2);
  if (v0) {
    uint64_t v3 = specialized Result<>.init(catching:);
  }
  else {
    uint64_t v3 = specialized Result<>.init(catching:);
  }
  return swift_task_switch(v3, 0, 0);
}

{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  void *v3;
  uint64_t v4;
  uint64_t v5;
  void *v6;

  uint64_t v1 = v0[6];
  uint64_t v2 = v0[5];
  swift_storeEnumTagMultiPayload(v2, v0[4], 0);
  outlined init with take of DataFrame?(v2, v1, &demangling cache variable for type metadata for Result<MLDecisionTreeClassifier, Error>);
  uint64_t v3 = v0;
  uint64_t v4 = v0[6];
  int v5 = v3[5];
  int v6 = v3;
  outlined init with take of DataFrame?(v4, v3[2], &demangling cache variable for type metadata for Result<MLDecisionTreeClassifier, Error>);
  swift_release();
  swift_task_dealloc(v4);
  swift_task_dealloc(v5);
  return ((uint64_t (*)(void))v6[1])();
}

{
  void *v0;
  uint64_t v1;
  void *v2;
  void *v3;
  uint64_t v4;
  uint64_t v5;
  void *v6;

  uint64_t v1 = v0[4];
  uint64_t v2 = (void *)v0[6];
  *uint64_t v2 = v0[8];
  swift_storeEnumTagMultiPayload(v2, v1, 1);
  uint64_t v3 = v0;
  uint64_t v4 = v0[6];
  int v5 = v3[5];
  int v6 = v3;
  outlined init with take of DataFrame?(v4, v3[2], &demangling cache variable for type metadata for Result<MLDecisionTreeClassifier, Error>);
  swift_release();
  swift_task_dealloc(v4);
  swift_task_dealloc(v5);
  return ((uint64_t (*)(void))v6[1])();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t (*v3)();

  uint64_t v2 = *(void *)(*(void *)v1 + 56);
  *(void *)(*(void *)v1 + 64) = v0;
  swift_task_dealloc(v2);
  if (v0) {
    uint64_t v3 = specialized Result<>.init(catching:);
  }
  else {
    uint64_t v3 = specialized Result<>.init(catching:);
  }
  return swift_task_switch(v3, 0, 0);
}

{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  void *v3;
  uint64_t v4;
  uint64_t v5;
  void *v6;

  uint64_t v1 = v0[6];
  uint64_t v2 = v0[5];
  swift_storeEnumTagMultiPayload(v2, v0[4], 0);
  outlined init with take of DataFrame?(v2, v1, &demangling cache variable for type metadata for Result<MLSoundClassifier, Error>);
  uint64_t v3 = v0;
  uint64_t v4 = v0[6];
  int v5 = v3[5];
  int v6 = v3;
  outlined init with take of DataFrame?(v4, v3[2], &demangling cache variable for type metadata for Result<MLSoundClassifier, Error>);
  swift_release();
  swift_task_dealloc(v4);
  swift_task_dealloc(v5);
  return ((uint64_t (*)(void))v6[1])();
}

{
  void *v0;
  uint64_t v1;
  void *v2;
  void *v3;
  uint64_t v4;
  uint64_t v5;
  void *v6;

  uint64_t v1 = v0[4];
  uint64_t v2 = (void *)v0[6];
  *uint64_t v2 = v0[8];
  swift_storeEnumTagMultiPayload(v2, v1, 1);
  uint64_t v3 = v0;
  uint64_t v4 = v0[6];
  int v5 = v3[5];
  int v6 = v3;
  outlined init with take of DataFrame?(v4, v3[2], &demangling cache variable for type metadata for Result<MLSoundClassifier, Error>);
  swift_release();
  swift_task_dealloc(v4);
  swift_task_dealloc(v5);
  return ((uint64_t (*)(void))v6[1])();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t (*v3)();

  uint64_t v2 = *(void *)(*(void *)v1 + 56);
  *(void *)(*(void *)v1 + 64) = v0;
  swift_task_dealloc(v2);
  if (v0) {
    uint64_t v3 = specialized Result<>.init(catching:);
  }
  else {
    uint64_t v3 = specialized Result<>.init(catching:);
  }
  return swift_task_switch(v3, 0, 0);
}

{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  void *v3;
  uint64_t v4;
  uint64_t v5;
  void *v6;

  uint64_t v1 = v0[6];
  uint64_t v2 = v0[5];
  swift_storeEnumTagMultiPayload(v2, v0[4], 0);
  outlined init with take of DataFrame?(v2, v1, &demangling cache variable for type metadata for Result<MLBoostedTreeClassifier, Error>);
  uint64_t v3 = v0;
  uint64_t v4 = v0[6];
  int v5 = v3[5];
  int v6 = v3;
  outlined init with take of DataFrame?(v4, v3[2], &demangling cache variable for type metadata for Result<MLBoostedTreeClassifier, Error>);
  swift_release();
  swift_task_dealloc(v4);
  swift_task_dealloc(v5);
  return ((uint64_t (*)(void))v6[1])();
}

{
  void *v0;
  uint64_t v1;
  void *v2;
  void *v3;
  uint64_t v4;
  uint64_t v5;
  void *v6;

  uint64_t v1 = v0[4];
  uint64_t v2 = (void *)v0[6];
  *uint64_t v2 = v0[8];
  swift_storeEnumTagMultiPayload(v2, v1, 1);
  uint64_t v3 = v0;
  uint64_t v4 = v0[6];
  int v5 = v3[5];
  int v6 = v3;
  outlined init with take of DataFrame?(v4, v3[2], &demangling cache variable for type metadata for Result<MLBoostedTreeClassifier, Error>);
  swift_release();
  swift_task_dealloc(v4);
  swift_task_dealloc(v5);
  return ((uint64_t (*)(void))v6[1])();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t (*v3)();

  uint64_t v2 = *(void *)(*(void *)v1 + 56);
  *(void *)(*(void *)v1 + 64) = v0;
  swift_task_dealloc(v2);
  if (v0) {
    uint64_t v3 = specialized Result<>.init(catching:);
  }
  else {
    uint64_t v3 = specialized Result<>.init(catching:);
  }
  return swift_task_switch(v3, 0, 0);
}

{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  void *v3;
  uint64_t v4;
  uint64_t v5;
  void *v6;

  uint64_t v1 = v0[6];
  uint64_t v2 = v0[5];
  swift_storeEnumTagMultiPayload(v2, v0[4], 0);
  outlined init with take of DataFrame?(v2, v1, &demangling cache variable for type metadata for Result<MLLinearRegressor, Error>);
  uint64_t v3 = v0;
  uint64_t v4 = v0[6];
  int v5 = v3[5];
  int v6 = v3;
  outlined init with take of DataFrame?(v4, v3[2], &demangling cache variable for type metadata for Result<MLLinearRegressor, Error>);
  swift_release();
  swift_task_dealloc(v4);
  swift_task_dealloc(v5);
  return ((uint64_t (*)(void))v6[1])();
}

{
  void *v0;
  uint64_t v1;
  void *v2;
  void *v3;
  uint64_t v4;
  uint64_t v5;
  void *v6;

  uint64_t v1 = v0[4];
  uint64_t v2 = (void *)v0[6];
  *uint64_t v2 = v0[8];
  swift_storeEnumTagMultiPayload(v2, v1, 1);
  uint64_t v3 = v0;
  uint64_t v4 = v0[6];
  int v5 = v3[5];
  int v6 = v3;
  outlined init with take of DataFrame?(v4, v3[2], &demangling cache variable for type metadata for Result<MLLinearRegressor, Error>);
  swift_release();
  swift_task_dealloc(v4);
  swift_task_dealloc(v5);
  return ((uint64_t (*)(void))v6[1])();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t (*v3)();

  uint64_t v2 = *(void *)(*(void *)v1 + 56);
  *(void *)(*(void *)v1 + 64) = v0;
  swift_task_dealloc(v2);
  if (v0) {
    uint64_t v3 = specialized Result<>.init(catching:);
  }
  else {
    uint64_t v3 = specialized Result<>.init(catching:);
  }
  return swift_task_switch(v3, 0, 0);
}

{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  void *v3;
  uint64_t v4;
  uint64_t v5;
  void *v6;

  uint64_t v1 = v0[6];
  uint64_t v2 = v0[5];
  swift_storeEnumTagMultiPayload(v2, v0[4], 0);
  outlined init with take of DataFrame?(v2, v1, &demangling cache variable for type metadata for Result<MLImageClassifier, Error>);
  uint64_t v3 = v0;
  uint64_t v4 = v0[6];
  int v5 = v3[5];
  int v6 = v3;
  outlined init with take of DataFrame?(v4, v3[2], &demangling cache variable for type metadata for Result<MLImageClassifier, Error>);
  swift_release();
  swift_task_dealloc(v4);
  swift_task_dealloc(v5);
  return ((uint64_t (*)(void))v6[1])();
}

{
  void *v0;
  uint64_t v1;
  void *v2;
  void *v3;
  uint64_t v4;
  uint64_t v5;
  void *v6;

  uint64_t v1 = v0[4];
  uint64_t v2 = (void *)v0[6];
  *uint64_t v2 = v0[8];
  swift_storeEnumTagMultiPayload(v2, v1, 1);
  uint64_t v3 = v0;
  uint64_t v4 = v0[6];
  int v5 = v3[5];
  int v6 = v3;
  outlined init with take of DataFrame?(v4, v3[2], &demangling cache variable for type metadata for Result<MLImageClassifier, Error>);
  swift_release();
  swift_task_dealloc(v4);
  swift_task_dealloc(v5);
  return ((uint64_t (*)(void))v6[1])();
}

char MLObjectDetector.init(checkpoint:)(uint64_t a1)
{
  uint64_t v33 = v2;
  uint64_t v37 = v1;
  int64_t v3 = *(void *)(*(void *)(type metadata accessor for MLObjectDetector.ModelParameters(0) - 8) + 64);
  uint64_t v4 = alloca(v3);
  int v5 = alloca(v3);
  unint64_t v36 = v29;
  uint64_t v38 = type metadata accessor for URL(0);
  uint64_t v35 = *(void *)(v38 - 8);
  int64_t v6 = *(void *)(v35 + 64);
  uint64_t v7 = alloca(v6);
  uint64_t v8 = alloca(v6);
  uint64_t v34 = v29;
  uint64_t v9 = alloca(v6);
  uint64_t v10 = alloca(v6);
  char v39 = v29;
  uint64_t v11 = *(void *)(type metadata accessor for MLCheckpoint(0) - 8);
  int64_t v12 = *(void *)(v11 + 64);
  char v13 = alloca(v12);
  uint64_t v14 = alloca(v12);
  uint64_t v40 = a1;
  outlined init with copy of MLTrainingSessionParameters(a1, (uint64_t)v29, type metadata accessor for MLCheckpoint);
  uint64_t v15 = *(unsigned __int8 *)(v11 + 80);
  uint64_t v16 = ~*(unsigned __int8 *)(v11 + 80) & (v15 + 16);
  uint64_t v17 = swift_allocObject(&unk_39BB20, v16 + v12, v15 | 7);
  outlined init with take of MLClassifierMetrics((uint64_t)v29, v17 + v16, type metadata accessor for MLCheckpoint);
  uint64_t v18 = v33;
  specialized blockAwait<A>(_:)((uint64_t)&async function pointer to partial apply for closure #1 in MLObjectDetector.init(checkpoint:), v17);
  if (v18)
  {
    outlined destroy of MLActivityClassifier.ModelParameters(v40, type metadata accessor for MLCheckpoint);
    return swift_release();
  }
  else
  {
    uint64_t v20 = v19;
    swift_release();
    void *v37 = v20;
    char v21 = v39;
    URL.deletingLastPathComponent()(v17);
    uint64_t v22 = (uint64_t)v34;
    (*(void (**)(unsigned char *, unsigned char *, uint64_t))(v35 + 16))(v34, v21, v38);
    MLObjectDetector.PersistentParameters.init(sessionDirectory:)(v22);
    unint64_t v24 = v37;
    memcpy(__dst, __src, 0x81uLL);
    memcpy(v31, __src, sizeof(v31));
    outlined retain of MLObjectDetector.PersistentParameters((uint64_t)__dst);
    MLObjectDetector.PersistentParameters.modelParameters.getter();
    outlined destroy of MLActivityClassifier.ModelParameters(v40, type metadata accessor for MLCheckpoint);
    memcpy(v29, v31, 0x81uLL);
    outlined release of MLObjectDetector.PersistentParameters((uint64_t)v29);
    (*(void (**)(unsigned char *, uint64_t))(v35 + 8))(v39, v38);
    uint64_t v25 = type metadata accessor for MLObjectDetector(0);
    outlined init with take of MLClassifierMetrics((uint64_t)v36, (uint64_t)v24 + *(int *)(v25 + 20), type metadata accessor for MLObjectDetector.ModelParameters);
    outlined release of MLObjectDetector.PersistentParameters((uint64_t)__dst);
    char result = __dst[64];
    char v26 = __dst[65];
    char v27 = __dst[66];
    uint64_t v28 = *(int *)(v25 + 24);
    *((unsigned char *)v24 + v28) = __dst[64];
    *((unsigned char *)v24 + v28 + 1) = v26;
    *((unsigned char *)v24 + v28 + 2) = v27;
  }
  return result;
}

uint64_t sub_21C23F()
{
  uint64_t v11 = v0;
  uint64_t v1 = type metadata accessor for MLCheckpoint(0);
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = ~*(unsigned __int8 *)(v2 + 80) & (v3 + 16);
  uint64_t v5 = v4 + v0;
  uint64_t v6 = *(void *)(v2 + 64) + v4;
  uint64_t v7 = type metadata accessor for URL(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v7 - 8) + 8))(v5, v7);
  uint64_t v8 = v5 + *(int *)(v1 + 28);
  uint64_t v9 = type metadata accessor for Date(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v9 - 8) + 8))(v8, v9);
  swift_bridgeObjectRelease(*(void *)(*(int *)(v1 + 32) + v5));
  return swift_deallocObject(v11, v6, v3 | 7);
}

uint64_t partial apply for closure #1 in MLObjectDetector.init(checkpoint:)(uint64_t a1)
{
  uint64_t v3 = type metadata accessor for MLCheckpoint(0);
  uint64_t v4 = v1
     + (~*(unsigned __int8 *)(*(void *)(v3 - 8) + 80) & (*(unsigned __int8 *)(*(void *)(v3 - 8)
                                                                                              + 80)
                                                           + 16));
  uint64_t v5 = (void *)swift_task_alloc(dword_3AC5CC);
  *(void *)(v2 + 16) = v5;
  *uint64_t v5 = v2;
  v5[1] = partial apply for closure #1 in MLActivityClassifier.init(trainingData:featureColumns:labelColumn:recordingFileColumn:parameters:);
  return closure #1 in MLStyleTransfer.init(checkpoint:)(a1, v4);
}

void *static MLObjectDetector.train(trainingData:annotationType:parameters:sessionParameters:)(void (*a1)(ValueMetadata **, uint64_t), unsigned char *a2, uint64_t a3, uint64_t a4, __m128 a5)
{
  char v6 = a2[1];
  char v7 = a2[2];
  v12[0] = *a2;
  v12[1] = v6;
  v12[2] = v7;
  char result = (void *)static MLObjectDetector.makeTrainingSession(trainingData:annotationType:parameters:sessionParameters:)(a1, (uint64_t)v12, a3, a4, a5);
  if (!v5)
  {
    uint64_t v9 = (uint64_t)result;
    uint64_t v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for MLJob<MLObjectDetector>);
    uint64_t v11 = (void *)swift_allocObject(v10, *(unsigned int *)(v10 + 48), *(unsigned __int16 *)(v10 + 52));
    return specialized MLJob.init(_:)(v11, v9);
  }
  return result;
}

uint64_t static MLObjectDetector.makeTrainingSession(trainingData:annotationType:parameters:sessionParameters:)(void (*a1)(ValueMetadata **, uint64_t), uint64_t a2, uint64_t a3, uint64_t a4, __m128 a5)
{
  uint64_t v55 = v5;
  uint64_t v47 = a4;
  uint64_t v51 = a3;
  uint64_t v6 = a2;
  int64_t v7 = *(void *)(*(void *)(type metadata accessor for MLTrainingSessionParameters(0) - 8) + 64);
  uint64_t v8 = alloca(v7);
  uint64_t v9 = alloca(v7);
  char v43 = &v36;
  uint64_t v10 = alloca(v7);
  uint64_t v11 = alloca(v7);
  unint64_t v42 = &v36;
  int64_t v12 = *(void *)(*(void *)(type metadata accessor for MLObjectDetector.ModelParameters(0) - 8) + 64);
  char v13 = alloca(v12);
  uint64_t v14 = alloca(v12);
  unint64_t v46 = &v36;
  uint64_t v15 = type metadata accessor for MLObjectDetector.DataSource(0);
  int64_t v16 = *(void *)(*(void *)(v15 - 8) + 64);
  uint64_t v17 = alloca(v16);
  uint64_t v18 = alloca(v16);
  LOBYTE(v54) = *(unsigned char *)a2;
  __int16 v56 = *(_WORD *)(a2 + 1);
  uint64_t v52 = a1;
  outlined init with copy of MLTrainingSessionParameters((uint64_t)a1, (uint64_t)&v36, type metadata accessor for MLObjectDetector.DataSource);
  if (swift_getEnumCaseMultiPayload(&v36, v15) == 2)
  {
    uint64_t v6 = v36;
    uint64_t v19 = v38;
    char v20 = v39;
    char v21 = (char)v41;
    char v22 = v37;
    uint64_t v37 = v36;
    LOBYTE(v38) = v22;
    uint64_t v23 = v55;
    static MLObjectDetector.validateInput(trainingData:imageColumn:annotationColumn:)((uint64_t)&v37, v19, v39, v40, (uint64_t)v41, *(double *)a5.i64);
    swift_bridgeObjectRelease(v21);
    swift_bridgeObjectRelease(v20);
    outlined consume of Result<_DataTable, Error>(v6, v22);
    uint64_t v55 = v23;
    if (v23) {
      return v6;
    }
  }
  else
  {
    outlined destroy of MLActivityClassifier.ModelParameters((uint64_t)&v36, type metadata accessor for MLObjectDetector.DataSource);
  }
  uint64_t v24 = v55;
  static _ImageUtilities.getImageURLsAndObjectAnnotations(from:imageColumnName:labelColumnName:)(v52, 0, 0, 0, 0, a5);
  uint64_t v55 = v24;
  if (!v24)
  {
    uint64_t v25 = v37;
    char v26 = v38;
    uint64_t v49 = v37;
    char v50 = v38;
    uint64_t v27 = v51;
    MLObjectDetector.ModelParameters.ValidationData.generateTables(trainingData:)(&v37, (uint64_t *)&v44, (uint64_t)&v49, a5);
    uint64_t v55 = 0;
    char v58 = v26;
    uint64_t v48 = v25;
    uint64_t v28 = v37;
    int v53 = v38;
    uint64_t v52 = v44;
    unsigned __int8 v57 = v45;
    LOBYTE(v38) = v38 & 1;
    LOBYTE(v49) = v54;
    *(_WORD *)((char *)&v49 + 1) = v56;
    outlined init with copy of MLTrainingSessionParameters(v27, (uint64_t)v46, type metadata accessor for MLObjectDetector.ModelParameters);
    uint64_t v29 = (uint64_t)v42;
    outlined init with copy of MLTrainingSessionParameters(v47, (uint64_t)v42, type metadata accessor for MLTrainingSessionParameters);
    uint64_t v6 = type metadata accessor for ObjectDetectorTrainingSessionDelegate(0);
    swift_allocObject(v6, *(unsigned int *)(v6 + 48), *(unsigned __int16 *)(v6 + 52));
    uint64_t v51 = v28;
    outlined copy of Result<_DataTable, Error>(v28, v53);
    int v54 = v57;
    outlined copy of MLDataTable?((uint64_t)v52, v57);
    uint64_t v30 = v55;
    uint64_t v31 = ObjectDetectorTrainingSessionDelegate.init(trainingData:validationData:imageColumnName:annotationColumnName:annotationType:modelParameters:sessionParameters:)((uint64_t)&v37, (uint64_t *)&v44, 0x7461506567616D69, 0xE900000000000068, 0x697461746F6E6E61, 0xEA00000000006E6FLL, (uint64_t)&v49, (uint64_t)v46, v29);
    uint64_t v55 = v30;
    if (v30)
    {
      outlined consume of Result<_DataTable, Error>(v51, v53);
      outlined consume of MLDataTable?((uint64_t)v52, v54);
      outlined consume of Result<_DataTable, Error>(v48, v58);
    }
    else
    {
      uint64_t v40 = v6;
      char v41 = &protocol witness table for ObjectDetectorTrainingSessionDelegate;
      uint64_t v37 = v31;
      uint64_t v33 = (uint64_t)v43;
      outlined init with copy of MLTrainingSessionParameters(v47, (uint64_t)v43, type metadata accessor for MLTrainingSessionParameters);
      uint64_t v34 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for MLTrainingSession<MLObjectDetector>);
      swift_allocObject(v34, *(unsigned int *)(v34 + 48), *(unsigned __int16 *)(v34 + 52));
      swift_retain();
      uint64_t v35 = v55;
      uint64_t v6 = specialized MLTrainingSession.init(delegate:parameters:modelType:)((uint64_t)&v37, v33, 17);
      outlined consume of Result<_DataTable, Error>(v51, v53);
      outlined consume of MLDataTable?((uint64_t)v52, v54);
      swift_release();
      outlined consume of Result<_DataTable, Error>(v48, v58);
      uint64_t v55 = v35;
    }
  }
  return v6;
}

void *static MLObjectDetector.resume(_:)(uint64_t a1)
{
  uint64_t v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for MLJob<MLObjectDetector>);
  uint64_t v2 = (void *)swift_allocObject(v1, *(unsigned int *)(v1 + 48), *(unsigned __int16 *)(v1 + 52));
  swift_retain();
  return specialized MLJob.init(_:)(v2, a1);
}

void *static MLObjectDetector.restoreTrainingSession(sessionParameters:)(uint64_t a1)
{
  int64_t v2 = *(void *)(*(void *)(type metadata accessor for MLTrainingSessionParameters(0) - 8) + 64);
  uint64_t v3 = alloca(v2);
  uint64_t v4 = alloca(v2);
  int64_t v12 = v11;
  uint64_t v5 = alloca(v2);
  uint64_t v6 = alloca(v2);
  outlined init with copy of MLTrainingSessionParameters(a1, (uint64_t)v11, type metadata accessor for MLTrainingSessionParameters);
  uint64_t v7 = type metadata accessor for ObjectDetectorTrainingSessionDelegate(0);
  swift_allocObject(v7, *(unsigned int *)(v7 + 48), *(unsigned __int16 *)(v7 + 52));
  char result = ObjectDetectorTrainingSessionDelegate.init(sessionParameters:)((uint64_t)v11);
  if (!v1)
  {
    v11[3] = v7;
    v11[4] = &protocol witness table for ObjectDetectorTrainingSessionDelegate;
    v11[0] = result;
    uint64_t v9 = (uint64_t)v12;
    outlined init with copy of MLTrainingSessionParameters(a1, (uint64_t)v12, type metadata accessor for MLTrainingSessionParameters);
    uint64_t v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for MLTrainingSession<MLObjectDetector>);
    swift_allocObject(v10, *(unsigned int *)(v10 + 48), *(unsigned __int16 *)(v10 + 52));
    return (void *)specialized MLTrainingSession.init(delegate:parameters:modelType:)((uint64_t)v11, v9, 17);
  }
  return result;
}

uint64_t closure #1 in closure #1 in static MLObjectDetector.resume(_:)(uint64_t a1, char a2, uint64_t a3, void (*a4)(void *), uint64_t a5)
{
  uint64_t v35 = a5;
  uint64_t v36 = a4;
  uint64_t v39 = (void *)a1;
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Result<MLObjectDetector, Error>);
  int64_t v7 = *(void *)(*(void *)(v6 - 8) + 64);
  uint64_t v8 = alloca(v7);
  uint64_t v9 = alloca(v7);
  int64_t v10 = *(void *)(*(void *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TaskPriority?)
                              - 8)
                  + 64);
  uint64_t v11 = alloca(v10);
  int64_t v12 = alloca(v10);
  uint64_t v37 = __dst;
  uint64_t v13 = *(void *)(type metadata accessor for MLObjectDetector.ModelParameters(0) - 8);
  int64_t v14 = *(void *)(v13 + 64);
  uint64_t v15 = alloca(v14);
  int64_t v16 = alloca(v14);
  uint64_t v17 = alloca(v14);
  uint64_t v18 = alloca(v14);
  if (a2)
  {
    uint64_t v30 = (uint64_t)v39;
    __dst[0] = v39;
    swift_storeEnumTagMultiPayload(__dst, v6, 1);
    swift_errorRetain(v30);
    v36(__dst);
    return outlined destroy of Result<MLObjectDetector, Error>((uint64_t)__dst);
  }
  else
  {
    uint64_t v34 = v13;
    uint64_t v39 = __dst;
    uint64_t v38 = __dst;
    outlined init with copy of TabularRegressionTask(direct field offset for MLTrainingSession.delegate + a3, (uint64_t)__src);
    uint64_t v19 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TrainingSessionDelegate);
    uint64_t v20 = type metadata accessor for ObjectDetectorTrainingSessionDelegate(0);
    swift_dynamicCast(v32, __src, v19, v20, 7);
    uint64_t v21 = v32[0];
    outlined init with take of DataFrame?(v32[0] + OBJC_IVAR____TtC8CreateML37ObjectDetectorTrainingSessionDelegate_trainingParameters, (uint64_t)v32, &demangling cache variable for type metadata for MLObjectDetector.PersistentParameters?);
    outlined init with take of DataFrame?((uint64_t)v32, (uint64_t)__src, &demangling cache variable for type metadata for MLObjectDetector.PersistentParameters?);
    if (_s8CreateML16MLObjectDetectorV20PersistentParametersVSgWOg((uint64_t)__src) == 1) {
      BUG();
    }
    memcpy(__dst, __src, 0x81uLL);
    uint64_t v22 = (uint64_t)v38;
    MLObjectDetector.PersistentParameters.modelParameters.getter();
    uint64_t v23 = type metadata accessor for TaskPriority(0);
    __swift_storeEnumTagSinglePayload((uint64_t)v37, 1, 1, v23);
    uint64_t v24 = (uint64_t)v39;
    outlined init with copy of MLTrainingSessionParameters(v22, (uint64_t)v39, type metadata accessor for MLObjectDetector.ModelParameters);
    uint64_t v25 = *(unsigned __int8 *)(v34 + 80);
    uint64_t v26 = ~*(unsigned __int8 *)(v34 + 80) & (v25 + 40);
    unint64_t v27 = (v14 + v26 + 7) & 0xFFFFFFFFFFFFFFF8;
    uint64_t v28 = swift_allocObject(&unk_39BB48, v27 + 16, v25 | 7);
    *(_OWORD *)(v28 + 16) = 0;
    *(void *)(v28 + 32) = v21;
    outlined init with take of MLClassifierMetrics(v24, v28 + v26, type metadata accessor for MLObjectDetector.ModelParameters);
    *(void *)(v28 + v27) = v36;
    *(void *)(v28 + v27 + 8) = v35;
    swift_retain();
    swift_retain();
    _sScTss5NeverORs_rlE8priority9operationScTyxABGScPSg_xyYaYAcntcfCyt_Tgm5((uint64_t)v37, (uint64_t)&async function pointer to partial apply for closure #1 in closure #1 in closure #1 in static MLObjectDetector.resume(_:), v28);
    swift_release();
    swift_release();
    return outlined destroy of MLActivityClassifier.ModelParameters((uint64_t)v38, type metadata accessor for MLObjectDetector.ModelParameters);
  }
}

uint64_t closure #1 in closure #1 in closure #1 in static MLObjectDetector.resume(_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  void v7[5] = a7;
  v7[4] = a6;
  v7[3] = a5;
  v7[2] = a4;
  uint64_t v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Result<MLObjectDetector, Error>);
  v7[6] = swift_task_alloc((*(void *)(*(void *)(v8 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  return swift_task_switch(closure #1 in closure #1 in closure #1 in static MLObjectDetector.resume(_:), 0, 0);
}

uint64_t closure #1 in closure #1 in closure #1 in static MLObjectDetector.resume(_:)()
{
  uint64_t v1 = swift_task_alloc(32);
  *(void *)(v0 + 56) = v1;
  *(_OWORD *)(v1 + 16) = *(_OWORD *)(v0 + 16);
  int64_t v2 = (char *)&async function pointer to specialized Result<>.init(catching:)
     + async function pointer to specialized Result<>.init(catching:);
  uint64_t v3 = (void *)swift_task_alloc(dword_3AC61C);
  *(void *)(v0 + 64) = v3;
  *uint64_t v3 = v0;
  v3[1] = closure #1 in closure #1 in closure #1 in static MLObjectDetector.resume(_:);
  return ((uint64_t (*)(void, void *, uint64_t))v2)(*(void *)(v0 + 48), &async function pointer to partial apply for closure #1 in closure #1 in closure #1 in closure #1 in static MLObjectDetector.resume(_:), v1);
}

{
  uint64_t v0;
  uint64_t v1;

  uint64_t v1 = *(void *)(*(void *)v0 + 56);
  swift_task_dealloc(*(void *)(*(void *)v0 + 64));
  swift_task_dealloc(v1);
  return swift_task_switch(closure #1 in closure #1 in closure #1 in static MLObjectDetector.resume(_:), 0, 0);
}

{
  uint64_t v0;
  uint64_t v1;

  uint64_t v1 = *(void *)(v0 + 48);
  (*(void (**)(uint64_t))(v0 + 32))(v1);
  outlined destroy of Result<MLObjectDetector, Error>(v1);
  swift_task_dealloc(v1);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t closure #1 in closure #1 in closure #1 in closure #1 in static MLObjectDetector.resume(_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  v3[38] = a3;
  v3[37] = a2;
  v3[36] = a1;
  uint64_t v4 = type metadata accessor for MLObjectDetector.ModelParameters(0);
  v3[39] = swift_task_alloc((*(void *)(*(void *)(v4 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  return swift_task_switch(closure #1 in closure #1 in closure #1 in closure #1 in static MLObjectDetector.resume(_:), 0, 0);
}

uint64_t closure #1 in closure #1 in closure #1 in closure #1 in static MLObjectDetector.resume(_:)()
{
  uint64_t v1 = *(void *)(v0 + 312);
  uint64_t v2 = *(void *)(v0 + 296);
  uint64_t v3 = *(void *)(v0 + 304);
  uint64_t v9 = *(void *)(v2 + OBJC_IVAR____TtC8CreateML37ObjectDetectorTrainingSessionDelegate_model);
  *(void *)(v0 + 320) = v9;
  outlined init with copy of MLTrainingSessionParameters(v3, v1, type metadata accessor for MLObjectDetector.ModelParameters);
  outlined init with take of DataFrame?(OBJC_IVAR____TtC8CreateML37ObjectDetectorTrainingSessionDelegate_trainingParameters + v2, v0 + 152, &demangling cache variable for type metadata for MLObjectDetector.PersistentParameters?);
  outlined init with take of DataFrame?(v0 + 152, v0 + 16, &demangling cache variable for type metadata for MLObjectDetector.PersistentParameters?);
  if (_s8CreateML16MLObjectDetectorV20PersistentParametersVSgWOg(v0 + 16) == 1) {
    BUG();
  }
  char v4 = *(unsigned char *)(v0 + 81);
  *(unsigned char *)(v0 + 145) = *(unsigned char *)(v0 + 80);
  *(unsigned char *)(v0 + 146) = v4;
  *(unsigned char *)(v0 + 147) = *(unsigned char *)(v0 + 82);
  uint64_t v5 = type metadata accessor for _Model();
  swift_allocObject(v5, 48, 7);
  uint64_t v6 = dword_3AABE4;
  swift_retain_n(v9);
  int64_t v7 = (void *)swift_task_alloc(v6);
  *(void *)(v0 + 328) = v7;
  void *v7 = v0;
  v7[1] = closure #1 in closure #1 in closure #1 in closure #1 in static MLObjectDetector.resume(_:);
  return _Model.init(impl:)(v9);
}

{
  uint64_t v0;
  uint64_t v1;
  char v2;
  uint64_t v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  char v8;
  char v9;

  uint64_t v1 = *(void *)(v0 + 344);
  uint64_t v8 = *(unsigned char *)(v0 + 147);
  uint64_t v2 = *(unsigned char *)(v0 + 145);
  uint64_t v9 = *(unsigned char *)(v0 + 146);
  uint64_t v3 = *(void *)(v0 + 312);
  char v4 = *(void **)(v0 + 288);
  swift_release();
  *char v4 = v1;
  uint64_t v5 = type metadata accessor for MLObjectDetector(0);
  outlined init with take of MLClassifierMetrics(v3, (uint64_t)v4 + *(int *)(v5 + 20), type metadata accessor for MLObjectDetector.ModelParameters);
  uint64_t v6 = *(int *)(v5 + 24);
  *((unsigned char *)v4 + v6) = v2;
  *((unsigned char *)v4 + v6 + 1) = v9;
  *((unsigned char *)v4 + v6 + 2) = v8;
  swift_task_dealloc(v3);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

{
  uint64_t v0;
  uint64_t v1;

  uint64_t v1 = *(void *)(v0 + 312);
  swift_release();
  outlined destroy of MLActivityClassifier.ModelParameters(v1, type metadata accessor for MLObjectDetector.ModelParameters);
  swift_task_dealloc(v1);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t closure #1 in closure #1 in closure #1 in closure #1 in static MLObjectDetector.resume(_:)(uint64_t a1)
{
  uint64_t v5 = *(void *)(*v2 + 328);
  uint64_t v4 = *v2;
  *(void *)(*v2 + 336) = v1;
  swift_task_dealloc(v5);
  if (v1)
  {
    uint64_t v6 = closure #1 in closure #1 in closure #1 in closure #1 in static MLObjectDetector.resume(_:);
  }
  else
  {
    *(void *)(v4 + 344) = a1;
    uint64_t v6 = closure #1 in closure #1 in closure #1 in closure #1 in static MLObjectDetector.resume(_:);
  }
  return swift_task_switch(v6, 0, 0);
}

uint64_t outlined destroy of Result<MLObjectDetector, Error>(uint64_t a1)
{
  uint64_t v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Result<MLObjectDetector, Error>);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v1 - 8) + 8))(a1, v1);
  return a1;
}

uint64_t _s8CreateML16MLObjectDetectorV20PersistentParametersVSgWOg(uint64_t a1)
{
  uint64_t result = 0;
  if ((*(void *)(a1 + 40) & 0xFFFFFFFF00000001) == 0) {
    return (*(void *)(a1 + 40) >> 1) + 1;
  }
  return result;
}

uint64_t sub_21D08A()
{
  uint64_t v1 = type metadata accessor for MLObjectDetector.ModelParameters(0);
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = ~*(unsigned __int8 *)(v2 + 80) & (v3 + 40);
  uint64_t v19 = *(void *)(v2 + 64);
  swift_unknownObjectRelease(*(void *)(v0 + 16));
  swift_release();
  uint64_t v5 = v4 + v0;
  uint64_t v6 = type metadata accessor for MLObjectDetector.ModelParameters.ValidationData(0);
  int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload(v4 + v0, v6);
  switch(EnumCaseMultiPayload)
  {
    case 3:
LABEL_7:
      uint64_t v11 = type metadata accessor for DataFrame(0);
      (*(void (**)(uint64_t, uint64_t))(*(void *)(v11 - 8) + 8))(v4 + v0, v11);
      uint64_t v21 = v1;
      uint64_t v12 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (DataFrame, imageColumn: String, annotationColumn: String));
      swift_bridgeObjectRelease(*(void *)(v5 + *(int *)(v12 + 48) + 8));
      uint64_t v13 = *(int *)(v12 + 64);
      uint64_t v1 = v21;
      uint64_t v10 = *(void *)(v5 + v13 + 8);
      goto LABEL_8;
    case 2:
LABEL_6:
      outlined consume of Result<_DataTable, Error>(*(void *)v5, *(_DWORD *)(v5 + 8));
      swift_bridgeObjectRelease(*(void *)(v5 + 24));
      uint64_t v10 = *(void *)(v5 + 40);
LABEL_8:
      swift_bridgeObjectRelease(v10);
      break;
    case 1:
      uint64_t v8 = type metadata accessor for MLObjectDetector.DataSource(0);
      switch(swift_getEnumCaseMultiPayload(v4 + v0, v8))
      {
        case 0u:
          uint64_t v9 = type metadata accessor for URL(0);
          (*(void (**)(uint64_t, uint64_t))(*(void *)(v9 - 8) + 8))(v4 + v0, v9);
          break;
        case 1u:
          uint64_t v22 = v1;
          uint64_t v16 = type metadata accessor for URL(0);
          uint64_t v20 = *(void (**)(uint64_t, uint64_t))(*(void *)(v16 - 8) + 8);
          v20(v4 + v0, v16);
          uint64_t v17 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (at: URL, annotationFile: URL));
          uint64_t v18 = v16;
          uint64_t v1 = v22;
          v20(v5 + *(int *)(v17 + 48), v18);
          break;
        case 2u:
          goto LABEL_6;
        case 3u:
          goto LABEL_7;
        default:
          goto LABEL_9;
      }
      break;
  }
LABEL_9:
  uint64_t v14 = *(int *)(v1 + 40);
  if (*(void *)(v5 + v14 + 24)) {
    __swift_destroy_boxed_opaque_existential_1Tm((void *)(v14 + v5));
  }
  swift_release();
  return swift_deallocObject(v0, ((v19 + v4 + 7) & 0xFFFFFFFFFFFFFFF8) + 16, v3 | 7);
}

uint64_t partial apply for closure #1 in closure #1 in closure #1 in static MLObjectDetector.resume(_:)(uint64_t a1)
{
  uint64_t v3 = *(void *)(type metadata accessor for MLObjectDetector.ModelParameters(0) - 8);
  uint64_t v4 = ~*(unsigned __int8 *)(v3 + 80) & (*(unsigned __int8 *)(v3 + 80) + 40);
  unint64_t v5 = (v4 + *(void *)(v3 + 64) + 7) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v6 = v1[2];
  uint64_t v12 = v1[3];
  uint64_t v13 = v1[4];
  uint64_t v7 = (uint64_t)v1 + v4;
  uint64_t v8 = *(void *)((char *)v1 + v5);
  uint64_t v9 = *(void *)((char *)v1 + v5 + 8);
  uint64_t v10 = (void *)swift_task_alloc(dword_3AC5FC);
  *(void *)(v2 + 16) = v10;
  *uint64_t v10 = v2;
  v10[1] = partial apply for specialized closure #1 in blockAwait<A>(_:);
  return closure #1 in closure #1 in closure #1 in static MLObjectDetector.resume(_:)(a1, v6, v12, v13, v7, v8, v9);
}

uint64_t partial apply for closure #1 in closure #1 in closure #1 in closure #1 in static MLObjectDetector.resume(_:)(uint64_t a1)
{
  uint64_t v3 = *(void *)(v1 + 16);
  uint64_t v4 = *(void *)(v1 + 24);
  unint64_t v5 = (void *)swift_task_alloc(dword_3AC60C);
  *(void *)(v2 + 16) = v5;
  *unint64_t v5 = v2;
  v5[1] = partial apply for closure #1 in closure #1 in closure #1 in closure #1 in static MLObjectDetector.resume(_:);
  return closure #1 in closure #1 in closure #1 in closure #1 in static MLObjectDetector.resume(_:)(a1, v3, v4);
}

uint64_t partial apply for closure #1 in closure #1 in closure #1 in closure #1 in static MLObjectDetector.resume(_:)()
{
  return partial apply for closure #1 in MLActivityClassifier.init(trainingData:featureColumns:labelColumn:recordingFileColumn:parameters:)();
}

uint64_t MLFewShotSoundClassifier.performValidationStep(on:)(uint64_t a1, uint64_t a2, unsigned char *a3)
{
  char v41 = a3;
  uint64_t v36 = a2;
  uint64_t v37 = a1;
  uint64_t v34 = type metadata accessor for MLFewShotSoundClassifier.TemporalClassifier(0);
  int64_t v4 = *(void *)(*(void *)(v34 - 8) + 64);
  unint64_t v5 = alloca(v4);
  uint64_t v6 = alloca(v4);
  int64_t v7 = *(void *)(*(void *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Tensor?)
                             - 8)
                 + 64);
  uint64_t v8 = alloca(v7);
  uint64_t v9 = alloca(v7);
  uint64_t v35 = v29;
  uint64_t v10 = alloca(v7);
  uint64_t v11 = alloca(v7);
  uint64_t v12 = type metadata accessor for Tensor(0);
  uint64_t v39 = *(void *)(v12 - 8);
  int64_t v13 = *(void *)(v39 + 64);
  uint64_t v14 = alloca(v13);
  uint64_t v15 = alloca(v13);
  uint64_t v38 = v29;
  uint64_t v16 = alloca(v13);
  uint64_t v17 = alloca(v13);
  __swift_storeEnumTagSinglePayload((uint64_t)v29, 1, 1, v12);
  int v40 = *(_DWORD *)(v3 + 24);
  uint64_t v18 = v3 + *(int *)(type metadata accessor for MLFewShotSoundClassifier(0) + 40);
  __m128 v33 = (__m128)*(unint64_t *)(v3 + 28);
  outlined init with copy of MLFewShotSoundClassifier.TemporalClassifier(v18, (uint64_t)v29);
  uint64_t v30 = v41;
  int v31 = v40;
  _mm_storel_ps((double *)v32, _mm_shuffle_ps(v33, v33, 225));
  *(void *)&v32[3] = v29;
  uint64_t v19 = lazy protocol witness table accessor for type MLFewShotSoundClassifier.TemporalClassifier and conformance MLFewShotSoundClassifier.TemporalClassifier();
  char v41 = v29;
  char v20 = valueWithGradient<A>(at:of:)(v29, v29, partial apply for closure #1 in MLFewShotSoundClassifier.performStep(on:), v29, v34, v19);
  outlined destroy of MLActivityClassifier.ModelParameters((uint64_t)v29, type metadata accessor for MLFewShotSoundClassifier.TemporalClassifier);
  uint64_t v21 = (uint64_t)v35;
  outlined init with copy of Tensor?((uint64_t)v29, (uint64_t)v35);
  uint64_t v22 = v21;
  if (__swift_getEnumTagSinglePayload(v21, 1, v12) == 1) {
    BUG();
  }
  uint64_t v23 = v38;
  uint64_t v24 = v22;
  uint64_t v25 = v39;
  (*(void (**)(unsigned char *, uint64_t, uint64_t))(v39 + 32))(v38, v24, v12);
  outlined destroy of Either<LogisticRegressionClassifier<Float, String>, FullyConnectedNetworkClassifier<Float, String>>((uint64_t)v29, &demangling cache variable for type metadata for Tensor?);
  swift_bridgeObjectRelease(v20);
  uint64_t v26 = v41;
  (*(void (**)(uint64_t, unsigned char *, uint64_t))(v25 + 16))(v37, v41, v12);
  softmax(_:alongAxis:)(v23, -1);
  unint64_t v27 = *(void (**)(unsigned char *, uint64_t))(v25 + 8);
  v27(v23, v12);
  return ((uint64_t (*)(unsigned char *, uint64_t))v27)(v26, v12);
}

uint64_t closure #1 in MLFewShotSoundClassifier.performStep(on:)(void (*a1)(unsigned char *, uint64_t), uint64_t a2, uint64_t a3, float a4, float a5, float a6)
{
  uint64_t v219 = a3;
  float v245 = a6;
  *(float *)&uint64_t v241 = a5;
  *(float *)&uint64_t v254 = a4;
  uint64_t v243 = a1;
  uint64_t v221 = v6;
  int64_t v7 = *(void *)(*(void *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Tensor?)
                             - 8)
                 + 64);
  uint64_t v8 = alloca(v7);
  uint64_t v9 = alloca(v7);
  v220 = v218;
  int64_t v10 = *(void *)(*(void *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ComputeDevice?)
                              - 8)
                  + 64);
  uint64_t v11 = alloca(v10);
  uint64_t v12 = alloca(v10);
  uint64_t v237 = v218;
  uint64_t v233 = type metadata accessor for TensorShape(0);
  uint64_t v240 = *(void **)(v233 - 8);
  int64_t v13 = v240[8];
  uint64_t v14 = alloca(v13);
  uint64_t v15 = alloca(v13);
  char v234 = v218;
  int64_t v16 = *(void *)(*(void *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for LossReduction?)
                              - 8)
                  + 64);
  uint64_t v17 = alloca(v16);
  uint64_t v18 = alloca(v16);
  uint64_t v252 = (uint64_t)v218;
  uint64_t v261 = type metadata accessor for Tensor(0);
  uint64_t v19 = *(void *)(v261 - 8);
  int64_t v20 = *(void *)(v19 + 64);
  uint64_t v244 = v19;
  uint64_t v21 = alloca(v20);
  uint64_t v22 = alloca(v20);
  char v223 = v218;
  uint64_t v23 = alloca(v20);
  uint64_t v24 = alloca(v20);
  v232 = v218;
  uint64_t v25 = alloca(v20);
  uint64_t v26 = alloca(v20);
  unint64_t v235 = v218;
  unint64_t v27 = alloca(v20);
  uint64_t v28 = alloca(v20);
  uint64_t v238 = v218;
  uint64_t v29 = alloca(v20);
  uint64_t v30 = alloca(v20);
  v248 = v218;
  int v31 = alloca(v20);
  int64_t v32 = alloca(v20);
  uint64_t v253 = v218;
  __m128 v33 = alloca(v20);
  uint64_t v34 = alloca(v20);
  unsigned __int8 v259 = v218;
  uint64_t v35 = alloca(v20);
  uint64_t v36 = alloca(v20);
  id v257 = v218;
  uint64_t v37 = alloca(v20);
  uint64_t v38 = alloca(v20);
  v260 = v218;
  uint64_t v39 = alloca(v20);
  int v40 = alloca(v20);
  id v258 = v218;
  char v41 = alloca(v20);
  unint64_t v42 = alloca(v20);
  v256 = v218;
  char v43 = alloca(v20);
  BOOL v44 = alloca(v20);
  uint64_t v250 = v218;
  unsigned __int8 v45 = alloca(v20);
  unint64_t v46 = alloca(v20);
  uint64_t v246 = v218;
  uint64_t v47 = alloca(v20);
  uint64_t v48 = alloca(v20);
  v236 = v218;
  uint64_t v49 = alloca(v20);
  char v50 = alloca(v20);
  uint64_t v247 = v218;
  uint64_t v51 = alloca(v20);
  uint64_t v52 = alloca(v20);
  uint64_t v255 = type metadata accessor for MLFewShotSoundClassifier.TemporalClassifier.Output(0);
  int64_t v53 = *(void *)(*(void *)(v255 - 8) + 64);
  int v54 = alloca(v53);
  uint64_t v55 = alloca(v53);
  uint64_t v249 = (void (*)(unsigned char *, uint64_t, uint64_t))__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for DataSample<Tensor, Tensor>);
  uint64_t v251 = a2;
  DataSample.features.getter(v249);
  uint64_t v56 = type metadata accessor for MLFewShotSoundClassifier.TemporalClassifier(0);
  uint64_t v57 = lazy protocol witness table accessor for type MLFewShotSoundClassifier.TemporalClassifier and conformance MLFewShotSoundClassifier.TemporalClassifier();
  v230 = v218;
  uint64_t v229 = v218;
  Layer.callAsFunction(_:)(v218, v56, v57);
  uint64_t v243 = *(void (**)(unsigned char *, uint64_t))(v19 + 8);
  v243(v218, v261);
  char v58 = &v218[*(int *)(v255 + 28)];
  double v59 = v247;
  DataSample.labels.getter(v249);
  unsigned int v60 = enum case for LossReduction.mean(_:);
  uint64_t v61 = type metadata accessor for LossReduction(0);
  uint64_t v62 = v252;
  (*(void (**)(uint64_t, void, uint64_t))(*(void *)(v61 - 8) + 104))(v252, v60, v61);
  __swift_storeEnumTagSinglePayload(v62, 0, 1, v61);
  softmaxCrossEntropy(logits:labels:labelSmoothing:axis:reduction:)(v58, v59, -1, v62, 0.0);
  outlined destroy of Either<LogisticRegressionClassifier<Float, String>, FullyConnectedNetworkClassifier<Float, String>>(v62, &demangling cache variable for type metadata for LossReduction?);
  uint64_t v63 = v59;
  char v64 = v243;
  v243(v63, v261);
  uint64_t v65 = v236;
  DataSample.labels.getter(v249);
  uint64_t v66 = v246;
  uint64_t v222 = v58;
  softmax(_:alongAxis:)(v58, -1);
  NSString v67 = v256;
  unsigned __int8 v68 = v66;
  uint64_t v69 = v65;
  static Tensor.* infix(_:_:)(v68, v65);
  Tensor.sum(alongAxes:)(&outlined read-only object #0 of closure #1 in MLFewShotSoundClassifier.performStep(on:));
  uint64_t v70 = v261;
  v64(v67, v261);
  uint64_t v71 = v257;
  Tensor.init(floatLiteral:)(1.0);
  id v72 = v260;
  static Tensor.- infix(_:_:)(v71, v69);
  v64(v71, v70);
  uint64_t v73 = v258;
  static Tensor.* infix(_:_:)(v246, v72);
  v64(v72, v70);
  uint64_t v74 = v256;
  Tensor.max(alongAxes:)(&outlined read-only object #1 of closure #1 in MLFewShotSoundClassifier.performStep(on:));
  v64(v73, v70);
  uint64_t v75 = v250;
  static Tensor.- infix(_:_:)(v250, v74);
  v64(v74, v70);
  v64(v75, v70);
  v64(v246, v70);
  v64(v236, v70);
  uint64_t v76 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Tensor>);
  uint64_t v77 = v244;
  uint64_t v79 = *(unsigned __int8 *)(v244 + 80);
  uint64_t v80 = ((int)v79 + 32) & ~*(unsigned __int8 *)(v244 + 80);
  uint64_t v252 = *(void *)(v244 + 72);
  uint64_t v78 = v252;
  uint64_t v81 = swift_allocObject(v76, v80 + 4 * v252, v79 | 7);
  uint64_t v239 = v81;
  *(void *)(v81 + 16) = 4;
  *(void *)(v81 + 24) = 8;
  uint64_t v82 = v81 + v80;
  DataSample.features.getter(v249);
  uint64_t v83 = v82 + v78;
  id v84 = *(void (**)(uint64_t, unsigned char *, uint64_t))(v77 + 16);
  uint64_t v85 = (uint64_t)v230;
  uint64_t v86 = v261;
  v84(v83, v230, v261);
  v84(v82 + 2 * v252, (unsigned char *)(v85 + *(int *)(v255 + 20)), v86);
  uint64_t v224 = 3 * v252;
  uint64_t v87 = v85 + *(int *)(v255 + 24);
  uint64_t v249 = (void (*)(unsigned char *, uint64_t, uint64_t))v84;
  v84(3 * v252 + v82, (unsigned char *)v87, v86);
  LOBYTE(v82) = v239;
  uint64_t v88 = gradient(at:of:)(v239, v247);
  swift_bridgeObjectRelease(v82);
  uint64_t v255 = v88;
  if (!*(void *)(v88 + 16)) {
    BUG();
  }
  uint64_t v239 = v255 + v80;
  v249(v246, v255 + v80, v261);
  uint64_t v231 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Int>);
  id v89 = (void *)swift_allocObject(v231, 48, 7);
  v89[2] = 2;
  v89[3] = 4;
  id v90 = v234;
  Tensor.shape.getter();
  uint64_t v91 = TensorShape.subscript.getter(0);
  id v92 = (void *)v240[1];
  uint64_t v93 = v233;
  double v94 = ((double (*)(unsigned char *, uint64_t))v92)(v90, v233);
  v89[4] = v91;
  v89[5] = -1;
  TensorShape.init(_:)(v89, v94);
  uint64_t v95 = (uint64_t)v250;
  Tensor.reshaped(to:)(v90);
  uint64_t v240 = v92;
  ((void (*)(unsigned char *, uint64_t))v92)(v90, v93);
  uint64_t v96 = alloca(24);
  uint64_t v97 = alloca(32);
  uint64_t v219 = v95;
  uint64_t v98 = v256;
  uint64_t v99 = v261;
  withoutGradient<A>(_:)(partial apply for closure #1 in static MLFewShotSoundClassifier.localLoss(probabilities:gradients:gamma:alpha:epsilon:), v218, v261);
  uint64_t v242 = 0;
  uint64_t v100 = v260;
  static Tensor.+ infix<A>(_:_:)(v98, v226, &type metadata for Float, &protocol witness table for Float);
  static Tensor./ infix(_:_:)(v247, v100);
  uint64_t v101 = v243;
  v243(v100, v99);
  uint64_t v251 = ((uint64_t (*)(void))Tensor.scalarType.getter)();
  uint64_t v244 = v102;
  uint64_t v103 = type metadata accessor for ComputeDevice(0);
  uint64_t v104 = (uint64_t)v237;
  __swift_storeEnumTagSinglePayload((uint64_t)v237, 1, 1, v103);
  Tensor.init(coercing:scalarType:on:)(v226, v251, v244, v104);
  uint64_t v227 = &type metadata for Float;
  uint64_t v228 = &protocol witness table for Float;
  *(float *)&uint64_t v244 = (float)(1.0 - *(float *)&v241) * *(float *)&v254;
  v226[0] = *(float *)&v244;
  uint64_t v105 = ((uint64_t (*)(void))Tensor.scalarType.getter)();
  uint64_t v107 = v106;
  uint64_t v251 = v103;
  __swift_storeEnumTagSinglePayload(v104, 1, 1, v103);
  uint64_t v108 = v257;
  Tensor.init(coercing:scalarType:on:)(v226, v105, v107, v104);
  uint64_t v109 = v248;
  uint64_t v110 = v258;
  static Tensor.- infix(_:_:)(v108, v258);
  char v111 = v253;
  relu(_:)(v109);
  uint64_t v112 = v261;
  v101(v109, v261);
  static Tensor.+ infix(_:_:)(v110, v111);
  v101(v111, v112);
  uint64_t v113 = v238;
  static Tensor.- infix(_:_:)(v260, v259);
  relu(_:)(v113);
  v101(v113, v112);
  unint64_t v114 = v260;
  static Tensor.- infix(_:_:)(v109, v260);
  v101(v109, v112);
  Tensor.mean()();
  v101(v111, v112);
  v101(v259, v112);
  v101(v257, v112);
  v101(v114, v112);
  v101(v258, v112);
  v101(v256, v112);
  v101(v250, v112);
  v101(v246, v112);
  if (*(void *)(v255 + 16) < 2uLL) {
    BUG();
  }
  v249(v250, v239 + v252, v261);
  uint64_t v115 = (void *)swift_allocObject(v231, 48, 7);
  v115[2] = 2;
  v115[3] = 4;
  uint64_t v116 = v234;
  Tensor.shape.getter();
  uint64_t v117 = TensorShape.subscript.getter(0);
  uint64_t v118 = v233;
  uint64_t v119 = (void (*)(unsigned char *, uint64_t))v240;
  double v120 = ((double (*)(unsigned char *, uint64_t))v240)(v116, v233);
  v115[4] = v117;
  v115[5] = -1;
  TensorShape.init(_:)(v115, v120);
  uint64_t v121 = v256;
  Tensor.reshaped(to:)(v116);
  v119(v116, v118);
  uint64_t v122 = alloca(24);
  id v123 = alloca(32);
  v263 = v121;
  char v124 = v258;
  uint64_t v125 = v261;
  uint64_t v126 = v242;
  withoutGradient<A>(_:)(closure #1 in static MLFewShotSoundClassifier.localLoss(probabilities:gradients:gamma:alpha:epsilon:)partial apply, v262, v261);
  uint64_t v225 = v126;
  uint64_t v127 = v257;
  static Tensor.+ infix<A>(_:_:)(v124, v226, &type metadata for Float, &protocol witness table for Float);
  static Tensor./ infix(_:_:)(v247, v127);
  uint64_t v128 = v127;
  char v129 = v243;
  v243(v128, v125);
  uint64_t v241 = ((uint64_t (*)(void))Tensor.scalarType.getter)();
  uint64_t v242 = v130;
  uint64_t v131 = (uint64_t)v237;
  uint64_t v132 = v251;
  __swift_storeEnumTagSinglePayload((uint64_t)v237, 1, 1, v251);
  Tensor.init(coercing:scalarType:on:)(v226, v241, v242, v131);
  uint64_t v227 = &type metadata for Float;
  uint64_t v228 = &protocol witness table for Float;
  LODWORD(v226[0]) = v244;
  uint64_t v133 = ((uint64_t (*)(void))Tensor.scalarType.getter)();
  uint64_t v135 = v134;
  __swift_storeEnumTagSinglePayload(v131, 1, 1, v132);
  uint64_t v136 = v259;
  Tensor.init(coercing:scalarType:on:)(v226, v133, v135, v131);
  uint64_t v137 = v238;
  uint64_t v138 = v136;
  uint64_t v139 = v260;
  static Tensor.- infix(_:_:)(v138, v260);
  uint64_t v140 = v248;
  relu(_:)(v137);
  uint64_t v141 = v261;
  v129(v137, v261);
  static Tensor.+ infix(_:_:)(v139, v140);
  v129(v140, v141);
  uint64_t v142 = v235;
  uint64_t v143 = v257;
  static Tensor.- infix(_:_:)(v257, v253);
  relu(_:)(v142);
  uint64_t v144 = v142;
  uint64_t v145 = v261;
  v129(v144, v261);
  static Tensor.- infix(_:_:)(v137, v143);
  v129(v137, v145);
  Tensor.mean()();
  v129(v140, v145);
  v129(v253, v145);
  v129(v259, v145);
  v129(v143, v145);
  v129(v260, v145);
  v129(v258, v145);
  v129(v256, v145);
  v129(v250, v145);
  if (*(void *)(v255 + 16) < 3uLL) {
    BUG();
  }
  v249(v256, v239 + 2 * v252, v261);
  unint64_t v146 = (void *)swift_allocObject(v231, 48, 7);
  v146[2] = 2;
  v146[3] = 4;
  long long v147 = v234;
  Tensor.shape.getter();
  uint64_t v148 = TensorShape.subscript.getter(0);
  uint64_t v149 = v233;
  long long v150 = (void (*)(unsigned char *, uint64_t))v240;
  double v151 = ((double (*)(unsigned char *, uint64_t))v240)(v147, v233);
  v146[4] = v148;
  v146[5] = -1;
  TensorShape.init(_:)(v146, v151);
  unint64_t v152 = v258;
  Tensor.reshaped(to:)(v147);
  v150(v147, v149);
  uint64_t v153 = alloca(24);
  unint64_t v154 = alloca(32);
  v263 = v152;
  char v155 = v260;
  uint64_t v156 = v261;
  uint64_t v157 = v225;
  withoutGradient<A>(_:)(closure #1 in static MLFewShotSoundClassifier.localLoss(probabilities:gradients:gamma:alpha:epsilon:)partial apply, v262, v261);
  uint64_t v242 = v157;
  char v158 = v259;
  static Tensor.+ infix<A>(_:_:)(v155, v226, &type metadata for Float, &protocol witness table for Float);
  static Tensor./ infix(_:_:)(v247, v158);
  uint64_t v159 = v158;
  uint64_t v160 = v243;
  v243(v159, v156);
  uint64_t v252 = ((uint64_t (*)(void))Tensor.scalarType.getter)();
  uint64_t v241 = v161;
  uint64_t v162 = (uint64_t)v237;
  uint64_t v163 = v251;
  __swift_storeEnumTagSinglePayload((uint64_t)v237, 1, 1, v251);
  Tensor.init(coercing:scalarType:on:)(v226, v252, v241, v162);
  uint64_t v227 = &type metadata for Float;
  uint64_t v228 = &protocol witness table for Float;
  LODWORD(v226[0]) = v244;
  uint64_t v164 = ((uint64_t (*)(void))Tensor.scalarType.getter)();
  uint64_t v252 = v165;
  __swift_storeEnumTagSinglePayload(v162, 1, 1, v163);
  unsigned __int8 v166 = v253;
  long long v167 = v235;
  Tensor.init(coercing:scalarType:on:)(v226, v164, v252, v162);
  Swift::String v168 = v257;
  static Tensor.- infix(_:_:)(v166, v257);
  uint64_t v169 = v238;
  relu(_:)(v167);
  uint64_t v170 = v261;
  v160(v167, v261);
  static Tensor.+ infix(_:_:)(v168, v169);
  v160(v169, v170);
  long long v171 = v232;
  long long v172 = v259;
  static Tensor.- infix(_:_:)(v259, v248);
  relu(_:)(v171);
  uint64_t v173 = v171;
  uint64_t v174 = v261;
  v160(v173, v261);
  static Tensor.- infix(_:_:)(v167, v172);
  v160(v167, v174);
  Tensor.mean()();
  v160(v169, v174);
  v160(v248, v174);
  v160(v253, v174);
  v160(v172, v174);
  v160(v257, v174);
  v160(v260, v174);
  v160(v258, v174);
  v160(v256, v174);
  if (*(void *)(v255 + 16) < 4uLL) {
    BUG();
  }
  v249(v258, v224 + v239, v261);
  swift_bridgeObjectRelease(v255);
  unint64_t v175 = (void *)swift_allocObject(v231, 48, 7);
  v175[2] = 2;
  v175[3] = 4;
  char v176 = v234;
  Tensor.shape.getter();
  uint64_t v177 = TensorShape.subscript.getter(0);
  uint64_t v178 = v233;
  long long v179 = (void (*)(unsigned char *, uint64_t))v240;
  double v180 = ((double (*)(unsigned char *, uint64_t))v240)(v176, v233);
  v175[4] = v177;
  v175[5] = -1;
  TensorShape.init(_:)(v175, v180);
  v181 = v260;
  Tensor.reshaped(to:)(v176);
  v179(v176, v178);
  uint64_t v182 = alloca(24);
  uint64_t v183 = alloca(32);
  v263 = v181;
  uint64_t v184 = v257;
  uint64_t v185 = v261;
  withoutGradient<A>(_:)(closure #1 in static MLFewShotSoundClassifier.localLoss(probabilities:gradients:gamma:alpha:epsilon:)partial apply, v262, v261);
  uint64_t v186 = v253;
  static Tensor.+ infix<A>(_:_:)(v184, v226, &type metadata for Float, &protocol witness table for Float);
  static Tensor./ infix(_:_:)(v247, v186);
  uint64_t v187 = v186;
  Swift::String v188 = v243;
  v243(v187, v185);
  uint64_t v254 = ((uint64_t (*)(void))Tensor.scalarType.getter)();
  uint64_t v255 = v189;
  uint64_t v190 = (uint64_t)v237;
  __swift_storeEnumTagSinglePayload((uint64_t)v237, 1, 1, v251);
  Tensor.init(coercing:scalarType:on:)(v226, v254, v255, v190);
  uint64_t v191 = ((uint64_t (*)(void))Tensor.scalarType.getter)();
  uint64_t v254 = v192;
  __swift_storeEnumTagSinglePayload(v190, 1, 1, v251);
  uint64_t v193 = v248;
  Tensor.init(coercing:scalarType:on:)(v226, v191, v254, v190);
  uint64_t v194 = v232;
  uint64_t v195 = v259;
  static Tensor.- infix(_:_:)(v193, v259);
  uint64_t v196 = v235;
  relu(_:)(v194);
  v188(v194, v185);
  uint64_t v197 = v238;
  static Tensor.+ infix(_:_:)(v195, v196);
  v198 = v196;
  v199 = v188;
  v188(v198, v185);
  v200 = v223;
  v201 = v253;
  static Tensor.- infix(_:_:)(v253, v197);
  v202 = v232;
  relu(_:)(v200);
  v199(v200, v185);
  v203 = v235;
  static Tensor.- infix(_:_:)(v202, v201);
  v204 = v199;
  v199(v202, v185);
  Tensor.mean()();
  v199(v203, v185);
  v199(v238, v185);
  v199(v248, v185);
  v199(v253, v185);
  v199(v259, v185);
  v199(v257, v185);
  v199(v260, v185);
  v205 = v258;
  v206 = v258;
  v199(v258, v185);
  uint64_t v227 = &type metadata for Double;
  uint64_t v228 = &protocol witness table for Double;
  *(void *)unint64_t v226 = 0x3FD0000000000000;
  v248 = (unsigned char *)Tensor.scalarType.getter(v206, v185, v207, v226);
  uint64_t v254 = v208;
  uint64_t v209 = (uint64_t)v237;
  __swift_storeEnumTagSinglePayload((uint64_t)v237, 1, 1, v251);
  v210 = v205;
  Tensor.init(coercing:scalarType:on:)(v226, v248, v254, v209);
  v211 = v253;
  static Tensor.+ infix(_:_:)(v236, v246);
  char v212 = v259;
  static Tensor.+ infix(_:_:)(v211, v250);
  v204(v211, v185);
  v213 = v257;
  static Tensor.+ infix(_:_:)(v212, v256);
  v204(v212, v185);
  v214 = v260;
  static Tensor.* infix(_:_:)(v213, v210);
  v204(v213, v185);
  v215 = v229;
  static Tensor.+ infix(_:_:)(v229, v214);
  v204(v214, v185);
  v204(v258, v185);
  v204(v256, v185);
  v204(v250, v185);
  v204(v246, v185);
  v204(v236, v185);
  v204(v247, v185);
  v204(v215, v185);
  uint64_t v216 = (uint64_t)v220;
  v249(v220, (uint64_t)v222, v185);
  outlined destroy of MLActivityClassifier.ModelParameters((uint64_t)v230, type metadata accessor for MLFewShotSoundClassifier.TemporalClassifier.Output);
  __swift_storeEnumTagSinglePayload(v216, 0, 1, v185);
  return outlined assign with take of Tensor?(v216, v219);
}

uint64_t closure #1 in static MLFewShotSoundClassifier.localLoss(probabilities:gradients:gamma:alpha:epsilon:)()
{
  v9[2] = v0;
  uint64_t v1 = type metadata accessor for Tensor(0);
  uint64_t v10 = *(void *)(v1 - 8);
  int64_t v2 = *(void *)(v10 + 64);
  uint64_t v3 = alloca(v2);
  int64_t v4 = alloca(v2);
  unint64_t v5 = alloca(v2);
  uint64_t v6 = alloca(v2);
  Tensor.squared()();
  Tensor.sum(alongAxes:)(&outlined read-only object #0 of closure #1 in static MLFewShotSoundClassifier.localLoss(probabilities:gradients:gamma:alpha:epsilon:));
  int64_t v7 = *(void (**)(void *, uint64_t))(v10 + 8);
  v7(v9, v1);
  sqrt(_:)(v9);
  return ((uint64_t (*)(void *, uint64_t))v7)(v9, v1);
}

uint64_t partial apply for closure #1 in static MLFewShotSoundClassifier.localLoss(probabilities:gradients:gamma:alpha:epsilon:)()
{
  return closure #1 in static MLFewShotSoundClassifier.localLoss(probabilities:gradients:gamma:alpha:epsilon:)(*(void *)(v0 + 16));
}

uint64_t outlined init with copy of MLFewShotSoundClassifier.TemporalClassifier(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = type metadata accessor for MLFewShotSoundClassifier.TemporalClassifier(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v2 - 8) + 16))(a2, a1, v2);
  return a2;
}

uint64_t closure #1 in static MLFewShotSoundClassifier.localLoss(probabilities:gradients:gamma:alpha:epsilon:)partial apply()
{
  return partial apply for closure #1 in static MLFewShotSoundClassifier.localLoss(probabilities:gradients:gamma:alpha:epsilon:)();
}

{
  return partial apply for closure #1 in static MLFewShotSoundClassifier.localLoss(probabilities:gradients:gamma:alpha:epsilon:)();
}

void one-time initialization function for tmpPath()
{
  uint64_t v0 = NSTemporaryDirectory();
  uint64_t v1 = v0;
  uint64_t v2 = static String._unconditionallyBridgeFromObjectiveC(_:)(v1);
  int64_t v4 = v3;

  tmpPath._uint64_t countAndFlagsBits = v2;
  tmpPath._char object = v4;
}

uint64_t static BoostedTreeConfiguration.firstIncompatibility(_:_:)()
{
  int64_t v32 = v0;
  uint64_t v1 = BoostedTreeConfiguration.maximumIterations.getter();
  if (v1 != BoostedTreeConfiguration.maximumIterations.getter())
  {
    BoostedTreeConfiguration.maximumIterations.getter();
    uint64_t v6 = dispatch thunk of CustomStringConvertible.description.getter(&type metadata for Int, &protocol witness table for Int);
    unint64_t v7 = v10;
    BoostedTreeConfiguration.maximumIterations.getter();
    uint64_t result = dispatch thunk of CustomStringConvertible.description.getter(&type metadata for Int, &protocol witness table for Int);
    unint64_t v5 = (char *)0xEF736E6F69746172;
    unint64_t v4 = 0x657469202E78614DLL;
    goto LABEL_16;
  }
  uint64_t v2 = BoostedTreeConfiguration.maximumDepth.getter();
  if (v2 != BoostedTreeConfiguration.maximumDepth.getter())
  {
    BoostedTreeConfiguration.maximumDepth.getter();
    uint64_t v11 = dispatch thunk of CustomStringConvertible.description.getter(&type metadata for Int, &protocol witness table for Int);
    unint64_t v7 = v12;
    BoostedTreeConfiguration.maximumDepth.getter();
    uint64_t v6 = v11;
    uint64_t result = dispatch thunk of CustomStringConvertible.description.getter(&type metadata for Int, &protocol witness table for Int);
    unint64_t v5 = (char *)0xEA00000000006874;
    unint64_t v4 = 0x706564202E78614DLL;
    goto LABEL_16;
  }
  double v28 = BoostedTreeConfiguration.minimumLossReduction.getter();
  if (v28 != BoostedTreeConfiguration.minimumLossReduction.getter())
  {
    double v13 = BoostedTreeConfiguration.minimumLossReduction.getter();
    uint64_t v6 = Double.description.getter(v13);
    unint64_t v7 = v14;
    double v15 = BoostedTreeConfiguration.minimumLossReduction.getter();
    uint64_t result = Double.description.getter(v15);
    unint64_t v5 = "Algorithm Type: " + 0x8000000000000000;
    unint64_t v4 = 0xD000000000000013;
    goto LABEL_16;
  }
  double v29 = BoostedTreeConfiguration.minimumChildWeight.getter();
  if (v29 != BoostedTreeConfiguration.minimumChildWeight.getter())
  {
    unint64_t v4 = 0xD000000000000011;
    double v16 = BoostedTreeConfiguration.minimumChildWeight.getter();
    uint64_t v6 = Double.description.getter(v16);
    unint64_t v7 = v17;
    double v18 = BoostedTreeConfiguration.minimumChildWeight.getter();
    uint64_t result = Double.description.getter(v18);
    uint64_t v19 = "Min. loss reduction";
LABEL_13:
    unint64_t v5 = (char *)((unint64_t)v19 | 0x8000000000000000);
    goto LABEL_16;
  }
  uint64_t v3 = BoostedTreeConfiguration.randomSeed.getter();
  if (v3 != BoostedTreeConfiguration.randomSeed.getter())
  {
    BoostedTreeConfiguration.randomSeed.getter();
    uint64_t v20 = dispatch thunk of CustomStringConvertible.description.getter(&type metadata for Int, &protocol witness table for Int);
    unint64_t v7 = v21;
    BoostedTreeConfiguration.randomSeed.getter();
    uint64_t v6 = v20;
    uint64_t result = dispatch thunk of CustomStringConvertible.description.getter(&type metadata for Int, &protocol witness table for Int);
    unint64_t v5 = (char *)0xEB00000000646565;
    unint64_t v4 = 0x73206D6F646E6152;
    goto LABEL_16;
  }
  double v30 = BoostedTreeConfiguration.rowSubsample.getter();
  if (v30 != BoostedTreeConfiguration.rowSubsample.getter())
  {
    double v22 = BoostedTreeConfiguration.rowSubsample.getter();
    uint64_t v6 = Double.description.getter(v22);
    unint64_t v7 = v23;
    double v24 = BoostedTreeConfiguration.rowSubsample.getter();
    uint64_t result = Double.description.getter(v24);
    unint64_t v5 = (char *)0xEE00656C706D6173;
    unint64_t v4 = 0x2062757320776F52;
    goto LABEL_16;
  }
  double v31 = BoostedTreeConfiguration.columnSubsample.getter();
  if (v31 != BoostedTreeConfiguration.columnSubsample.getter())
  {
    unint64_t v4 = 0xD000000000000011;
    double v25 = BoostedTreeConfiguration.columnSubsample.getter();
    uint64_t v6 = Double.description.getter(v25);
    unint64_t v7 = v26;
    double v27 = BoostedTreeConfiguration.columnSubsample.getter();
    uint64_t result = Double.description.getter(v27);
    uint64_t v19 = "Min. child weight";
    goto LABEL_13;
  }
  unint64_t v4 = 0;
  unint64_t v5 = 0;
  uint64_t v6 = 0;
  unint64_t v7 = 0;
  uint64_t result = 0;
  unint64_t v9 = 0;
LABEL_16:
  unint64_t *v32 = v4;
  v32[1] = (unint64_t)v5;
  v32[2] = v6;
  v32[3] = v7;
  v32[4] = result;
  _DWORD v32[5] = v9;
  return result;
}

uint64_t MLSupportVectorClassifier.predictions(from:)(uint64_t a1)
{
  uint64_t v22 = v2;
  uint64_t v23 = a1;
  v17[1] = v1;
  uint64_t v21 = *(void *)(type metadata accessor for MLSupportVectorClassifier(0) - 8);
  int64_t v3 = *(void *)(v21 + 64);
  unint64_t v4 = alloca(v3);
  unint64_t v5 = alloca(v3);
  double v18 = v17;
  uint64_t v6 = type metadata accessor for DataFrame(0);
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v20 = v6;
  int64_t v8 = *(void *)(v7 + 64);
  unint64_t v9 = alloca(v8);
  unint64_t v10 = alloca(v8);
  uint64_t v19 = v17;
  (*(void (**)(void *, uint64_t, uint64_t))(v7 + 16))(v17, v23, v6);
  outlined init with copy of MLTrainingSessionParameters(v22, (uint64_t)v17, type metadata accessor for MLSupportVectorClassifier);
  uint64_t v11 = *(unsigned __int8 *)(v7 + 80);
  uint64_t v12 = ~*(unsigned __int8 *)(v7 + 80) & (v11 + 16);
  uint64_t v13 = *(unsigned __int8 *)(v21 + 80);
  int64_t v14 = ~v13 & (v12 + v13 + v8);
  uint64_t v15 = swift_allocObject(&unk_39BB70, v14 + v3, v13 | v11 | 7);
  (*(void (**)(uint64_t, void *, uint64_t))(v7 + 32))(v15 + v12, v19, v20);
  outlined init with take of MLClassifierMetrics((uint64_t)v18, v15 + v14, type metadata accessor for MLSupportVectorClassifier);
  specialized blockAwait<A>(_:)((uint64_t)&async function pointer to partial apply for closure #1 in MLSupportVectorClassifier.predictions(from:), v15);
  return swift_release();
}

uint64_t type metadata accessor for MLSupportVectorClassifier(uint64_t a1)
{
  uint64_t result = type metadata singleton initialization cache for MLSupportVectorClassifier;
  if (!type metadata singleton initialization cache for MLSupportVectorClassifier) {
    return swift_getSingletonMetadata(a1, &nominal type descriptor for MLSupportVectorClassifier);
  }
  return result;
}

uint64_t MLSupportVectorClassifier.predictions(from:)(uint64_t a1, __m128 a2)
{
  uint64_t v29 = v3;
  uint64_t v32 = v4;
  uint64_t v36 = v2;
  uint64_t v31 = *(void *)(type metadata accessor for MLSupportVectorClassifier(0) - 8);
  int64_t v30 = *(void *)(v31 + 64);
  unint64_t v5 = alloca(v30);
  uint64_t v6 = alloca(v30);
  uint64_t v37 = &v26;
  uint64_t v39 = type metadata accessor for DataFrame(0);
  uint64_t v34 = *(void *)(v39 - 8);
  int64_t v7 = *(void *)(v34 + 64);
  int64_t v8 = alloca(v7);
  unint64_t v9 = alloca(v7);
  uint64_t v35 = &v26;
  unint64_t v10 = alloca(v7);
  uint64_t v11 = alloca(v7);
  int64_t v12 = *(void *)(*(void *)(type metadata accessor for AnyColumn(0) - 8) + 64);
  uint64_t v13 = alloca(v12);
  int64_t v14 = alloca(v12);
  __m128 v33 = &v26;
  char v15 = *(unsigned char *)(a1 + 8);
  uint64_t v27 = *(void *)a1;
  char v28 = v15;
  outlined copy of Result<_DataTable, Error>(v27, v15);
  DataFrame.init(_:)((uint64_t)&v27);
  uint64_t v38 = &v26;
  uint64_t v16 = v34;
  (*(void (**)(uint64_t *, uint64_t *, uint64_t))(v34 + 16))(&v26, &v26, v39);
  outlined init with copy of MLTrainingSessionParameters(v32, (uint64_t)v37, type metadata accessor for MLSupportVectorClassifier);
  uint64_t v17 = *(unsigned __int8 *)(v16 + 80);
  uint64_t v18 = ~*(unsigned __int8 *)(v16 + 80) & (v17 + 16);
  uint64_t v19 = *(unsigned __int8 *)(v31 + 80);
  int64_t v20 = ~v19 & (v18 + v19 + v7);
  uint64_t v21 = swift_allocObject(&unk_39BB98, v20 + v30, v19 | v17 | 7);
  (*(void (**)(uint64_t, uint64_t *, uint64_t))(v16 + 32))(v21 + v18, v35, v39);
  uint64_t v22 = v21 + v20;
  uint64_t v23 = (uint64_t)v33;
  outlined init with take of MLClassifierMetrics((uint64_t)v37, v22, type metadata accessor for MLSupportVectorClassifier);
  uint64_t v24 = v29;
  specialized blockAwait<A>(_:)((uint64_t)&closure #1 in MLSupportVectorClassifier.predictions(from:)partial apply, v21);
  swift_release();
  if (v24) {
    return (*(uint64_t (**)(uint64_t *, uint64_t))(v16 + 8))(v38, v39);
  }
  *(double *)a2.i64 = (*(double (**)(uint64_t *, uint64_t))(v16 + 8))(v38, v39);
  return MLUntypedColumn.init(_:convertArraysToShapedArrays:)(v23, 1, a2);
}

uint64_t MLSupportVectorClassifier.evaluation(on:)(uint64_t a1)
{
  uint64_t v21 = v2;
  uint64_t v22 = a1;
  v17[1] = v1;
  uint64_t v20 = *(void *)(type metadata accessor for MLSupportVectorClassifier(0) - 8);
  int64_t v3 = *(void *)(v20 + 64);
  uint64_t v4 = alloca(v3);
  unint64_t v5 = alloca(v3);
  uint64_t v18 = v17;
  uint64_t v6 = type metadata accessor for DataFrame(0);
  uint64_t v7 = *(void *)(v6 - 8);
  int64_t v8 = *(void *)(v7 + 64);
  unint64_t v9 = alloca(v8);
  unint64_t v10 = alloca(v8);
  uint64_t v19 = v17;
  (*(void (**)(void *, uint64_t, uint64_t))(v7 + 16))(v17, v22, v6);
  outlined init with copy of MLTrainingSessionParameters(v21, (uint64_t)v17, type metadata accessor for MLSupportVectorClassifier);
  uint64_t v11 = *(unsigned __int8 *)(v7 + 80);
  uint64_t v12 = ~*(unsigned __int8 *)(v7 + 80) & (v11 + 16);
  uint64_t v13 = *(unsigned __int8 *)(v20 + 80);
  int64_t v14 = ~v13 & (v12 + v13 + v8);
  uint64_t v15 = swift_allocObject(&unk_39BBC0, v14 + v3, v13 | v11 | 7);
  (*(void (**)(uint64_t, void *, uint64_t))(v7 + 32))(v15 + v12, v19, v6);
  outlined init with take of MLClassifierMetrics((uint64_t)v18, v15 + v14, type metadata accessor for MLSupportVectorClassifier);
  specialized blockAwait<A>(_:)((uint64_t)&async function pointer to partial apply for closure #1 in MLSupportVectorClassifier.evaluation(on:), v15);
  return swift_release();
}

{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  int64_t v4;
  void *v5;
  void *v6;
  char v7;
  uint64_t v9;
  char v10;
  uint64_t v11;

  uint64_t v11 = v1;
  uint64_t v2 = type metadata accessor for DataFrame(0);
  int64_t v3 = *(void *)(v2 - 8);
  uint64_t v4 = *(void *)(v3 + 64);
  unint64_t v5 = alloca(v4);
  uint64_t v6 = alloca(v4);
  uint64_t v7 = *(unsigned char *)(a1 + 8);
  unint64_t v9 = *(void *)a1;
  unint64_t v10 = v7;
  outlined copy of Result<_DataTable, Error>(v9, v7);
  DataFrame.init(_:)((uint64_t)&v9);
  MLSupportVectorClassifier.evaluation(on:)((uint64_t)&v9);
  return (*(uint64_t (**)(uint64_t *, uint64_t))(v3 + 8))(&v9, v2);
}

uint64_t MLSupportVectorClassifier.write(to:metadata:)(uint64_t a1, uint64_t *a2)
{
  uint64_t v57 = v2;
  uint64_t v59 = v3;
  uint64_t v58 = a1;
  int64_t v4 = *(void *)(*(void *)(type metadata accessor for MLSupportVectorClassifier.Model(0) - 8) + 64);
  unint64_t v5 = alloca(v4);
  uint64_t v6 = alloca(v4);
  char v41 = v38;
  uint64_t v52 = type metadata accessor for Model(0);
  uint64_t v51 = *(void *)(v52 - 8);
  int64_t v7 = *(void *)(v51 + 64);
  int64_t v8 = alloca(v7);
  unint64_t v9 = alloca(v7);
  uint64_t v39 = v38;
  uint64_t v10 = type metadata accessor for URL(0);
  uint64_t v11 = *(void *)(v10 - 8);
  int64_t v12 = *(void *)(v11 + 64);
  uint64_t v13 = alloca(v12);
  int64_t v14 = alloca(v12);
  uint64_t v44 = *a2;
  uint64_t v42 = a2[1];
  uint64_t v45 = a2[2];
  unint64_t v46 = (char *)a2[3];
  uint64_t v47 = a2[4];
  uint64_t v48 = a2[5];
  uint64_t v43 = a2[6];
  uint64_t v49 = a2[7];
  uint64_t v50 = a2[8];
  uint64_t v15 = v57;
  uint64_t result = static _ValidationUtilities.validateWriteLocation(atURL:defaultName:fileExtension:)(v58, 0x56537261656E694CLL, 0xE90000000000004DLL, 0x6C65646F6D6C6DLL, (void *)0xE700000000000000);
  if (!v15)
  {
    int v54 = v38;
    uint64_t v55 = v10;
    uint64_t v53 = v11;
    outlined init with copy of MLTrainingSessionParameters(v59, (uint64_t)v41, type metadata accessor for MLSupportVectorClassifier.Model);
    uint64_t v40 = 0;
    if (v42)
    {
      uint64_t v17 = v44;
      uint64_t v18 = v44;
      uint64_t v57 = v42;
      uint64_t v19 = v45;
      uint64_t v20 = v45;
      uint64_t v21 = (uint64_t)v46;
      uint64_t v22 = v46;
      uint64_t v23 = v47;
      uint64_t v24 = v47;
      uint64_t v25 = v48;
      uint64_t v59 = v48;
      uint64_t v26 = v43;
      uint64_t v27 = v43;
      uint64_t v28 = v49;
      uint64_t v56 = v49;
      uint64_t v29 = v50;
      uint64_t v58 = v50;
    }
    else
    {
      int64_t v30 = NSFullUserName();
      uint64_t v31 = v30;
      uint64_t v18 = static String._unconditionallyBridgeFromObjectiveC(_:)(v31);
      uint64_t v57 = v32;

      uint64_t v22 = "RandomForestRegressor" + 0x8000000000000000;
      uint64_t v56 = 0xE100000000000000;
      uint64_t v27 = 49;
      uint64_t v20 = 0xD000000000000033;
      uint64_t v24 = 0;
      uint64_t v59 = 0;
      uint64_t v58 = 0;
      uint64_t v26 = v43;
      uint64_t v17 = v44;
      uint64_t v19 = v45;
      uint64_t v21 = (uint64_t)v46;
      uint64_t v23 = v47;
      uint64_t v25 = v48;
      uint64_t v28 = v49;
      uint64_t v29 = v50;
    }
    v38[0] = v18;
    v38[1] = v57;
    v38[2] = v20;
    v38[3] = (uint64_t)v22;
    v38[4] = v24;
    v38[5] = v59;
    v38[6] = v27;
    v38[7] = v56;
    v38[8] = v58;
    outlined copy of MLModelMetadata?(v17, v42, v19, v21, v23, v25, v26, v28, v29);
    __m128 v33 = v39;
    uint64_t v34 = (uint64_t)v41;
    uint64_t v35 = v40;
    MLSupportVectorClassifier.Model.export(metadata:)(v38);
    swift_bridgeObjectRelease(v56);
    swift_bridgeObjectRelease((_BYTE)v22);
    swift_bridgeObjectRelease(v57);
    swift_bridgeObjectRelease(v59);
    swift_bridgeObjectRelease(v58);
    outlined destroy of MLActivityClassifier.ModelParameters(v34, type metadata accessor for MLSupportVectorClassifier.Model);
    if (v35)
    {
      return (*(uint64_t (**)(uint64_t *, uint64_t))(v53 + 8))(v54, v55);
    }
    else
    {
      uint64_t v36 = v54;
      Model.write(to:)(v54);
      uint64_t v37 = v53;
      (*(void (**)(uint64_t *, uint64_t))(v51 + 8))(v33, v52);
      return (*(uint64_t (**)(uint64_t *, uint64_t))(v37 + 8))(v36, v55);
    }
  }
  return result;
}

uint64_t MLSupportVectorClassifier.write(toFile:metadata:)(uint64_t a1, uint64_t a2, long long *a3)
{
  uint64_t v23 = v3;
  uint64_t v25 = a2;
  uint64_t v24 = a1;
  uint64_t v26 = type metadata accessor for URL.DirectoryHint(0);
  uint64_t v27 = *(void *)(v26 - 8);
  int64_t v5 = *(void *)(v27 + 64);
  uint64_t v6 = alloca(v5);
  int64_t v7 = alloca(v5);
  int64_t v8 = *(void *)(*(void *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for URL?)
                             - 8)
                 + 64);
  unint64_t v9 = alloca(v8);
  uint64_t v10 = alloca(v8);
  uint64_t v11 = type metadata accessor for URL(0);
  uint64_t v29 = *(void *)(v11 - 8);
  int64_t v12 = *(void *)(v29 + 64);
  uint64_t v13 = alloca(v12);
  int64_t v14 = alloca(v12);
  uint64_t v28 = *((void *)a3 + 8);
  long long v19 = *a3;
  long long v20 = a3[1];
  long long v21 = a3[2];
  long long v22 = a3[3];
  uint64_t v30 = v11;
  __swift_storeEnumTagSinglePayload((uint64_t)v17, 1, 1, v11);
  (*(void (**)(_OWORD *, void, uint64_t))(v27 + 104))(v17, enum case for URL.DirectoryHint.inferFromPath(_:), v26);
  uint64_t v15 = v25;
  swift_bridgeObjectRetain(v25);
  URL.init(filePath:directoryHint:relativeTo:)(v24, v15, v17, v17);
  v17[0] = v19;
  v17[1] = v20;
  void v17[2] = v21;
  v17[3] = v22;
  uint64_t v18 = v28;
  MLSupportVectorClassifier.write(to:metadata:)((uint64_t)v17, (uint64_t *)v17);
  return (*(uint64_t (**)(_OWORD *, uint64_t))(v29 + 8))(v17, v30);
}

unint64_t MLSupportVectorClassifier.description.getter()
{
  return MLSupportVectorClassifier.debugDescription.getter();
}

unint64_t MLSupportVectorClassifier.debugDescription.getter()
{
  uint64_t v1 = v0;
  v25._char object = (void *)type metadata accessor for MLClassifierMetrics.Contents(0);
  int64_t v2 = *(void *)(*((void *)v25._object - 1) + 64);
  uint64_t v3 = alloca(v2);
  int64_t v4 = alloca(v2);
  uint64_t v5 = type metadata accessor for MLSupportVectorClassifier(0);
  v25._uint64_t countAndFlagsBits = MLSupportVectorClassifier.ModelParameters.description.getter();
  int64_t v7 = v6;
  v22._uint64_t countAndFlagsBits = MLClassifierMetrics.description.getter();
  v22._char object = v8;
  uint64_t v9 = *(int *)(v5 + 40);
  uint64_t v10 = v7;
  outlined init with copy of MLTrainingSessionParameters(v1 + v9, (uint64_t)&v20, type metadata accessor for MLClassifierMetrics.Contents);
  LODWORD(v7) = swift_getEnumCaseMultiPayload(&v20, v25._object);
  outlined destroy of MLActivityClassifier.ModelParameters((uint64_t)&v20, type metadata accessor for MLClassifierMetrics.Contents);
  v25._char object = (void *)MLClassifierMetrics.description.getter();
  int64_t v12 = v11;
  unint64_t v23 = 0xD000000000000024;
  uint64_t v24 = "rtVectorClassifier.swift" + 0x8000000000000000;
  v13._uint64_t countAndFlagsBits = v25._countAndFlagsBits;
  v25._uint64_t countAndFlagsBits = (uint64_t)v10;
  v13._char object = v10;
  String.append(_:)(v13);
  v21._uint64_t countAndFlagsBits = 0xD00000000000001ELL;
  v21._char object = "ActivityClassifier\n\nParameters\n" + 0x8000000000000000;
  char object = (char)v22._object;
  String.append(_:)(v22);
  char v15 = (char)v21._object;
  String.append(_:)(v21);
  swift_bridgeObjectRelease(v15);
  if (v7 > 1)
  {
    char v18 = object;
  }
  else
  {
    v21._uint64_t countAndFlagsBits = 0xD000000000000020;
    v21._char object = "\nPerformance on Training Data\n" + 0x8000000000000000;
    v16._uint64_t countAndFlagsBits = (uint64_t)v25._object;
    v16._char object = v12;
    String.append(_:)(v16);
    char v17 = (char)v21._object;
    String.append(_:)(v21);
    swift_bridgeObjectRelease(object);
    char v18 = (char)v12;
    LOBYTE(v12) = v17;
  }
  swift_bridgeObjectRelease(v18);
  swift_bridgeObjectRelease((_BYTE)v12);
  swift_bridgeObjectRelease(v25._countAndFlagsBits);
  return v23;
}

NSAttributedString MLSupportVectorClassifier.playgroundDescription.getter()
{
  uint64_t v1 = v0;
  uint64_t v2 = type metadata accessor for NSAttributedString();
  v3._uint64_t countAndFlagsBits = MLSupportVectorClassifier.debugDescription.getter();
  v3._char object = v4;
  result.super.Class isa = NSAttributedString.__allocating_init(string:)(v3).super.isa;
  v1[3].super.Class isa = (Class)v2;
  v1->super.Class isa = result.super.isa;
  return result;
}

id MLSupportVectorClassifier.model.getter()
{
  uint64_t v1 = type metadata accessor for MLSupportVectorClassifier(0);
  return *(id *)(v0 + *(int *)(v1 + 20));
}

void MLSupportVectorClassifier.model.setter(uint64_t a1)
{
  uint64_t v2 = *(int *)(type metadata accessor for MLSupportVectorClassifier(0) + 20);

  *(void *)(v1 + v2) = a1;
}

void (*MLSupportVectorClassifier.model.modify())()
{
  return MLBoostedTreeRegressor.ModelParameters.maxDepth.modify;
}

uint64_t MLSupportVectorClassifier.targetColumn.getter()
{
  uint64_t v1 = *(int *)(type metadata accessor for MLSupportVectorClassifier(0) + 24);
  uint64_t v2 = *(void *)(v0 + v1);
  swift_bridgeObjectRetain(*(void *)(v0 + v1 + 8));
  return v2;
}

uint64_t MLSupportVectorClassifier.targetColumn.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(int *)(type metadata accessor for MLSupportVectorClassifier(0) + 24);
  uint64_t result = swift_bridgeObjectRelease(*(void *)(v2 + v3 + 8));
  *(void *)(v2 + v3) = a1;
  *(void *)(v2 + v3 + 8) = a2;
  return result;
}

void (*MLSupportVectorClassifier.targetColumn.modify())()
{
  return MLBoostedTreeRegressor.ModelParameters.maxDepth.modify;
}

uint64_t MLSupportVectorClassifier.featureColumns.getter()
{
  uint64_t v1 = type metadata accessor for MLSupportVectorClassifier(0);
  return swift_bridgeObjectRetain(*(void *)(v0 + *(int *)(v1 + 28)));
}

uint64_t MLSupportVectorClassifier.featureColumns.setter(uint64_t a1)
{
  uint64_t v2 = *(int *)(type metadata accessor for MLSupportVectorClassifier(0) + 28);
  uint64_t result = swift_bridgeObjectRelease(*(void *)(v1 + v2));
  *(void *)(v1 + v2) = a1;
  return result;
}

void (*MLSupportVectorClassifier.featureColumns.modify())()
{
  return MLBoostedTreeRegressor.ModelParameters.maxDepth.modify;
}

uint64_t MLSupportVectorClassifier.modelParameters.getter()
{
  uint64_t v2 = v0;
  uint64_t v3 = type metadata accessor for MLSupportVectorClassifier(0);
  return outlined init with copy of MLSupportVectorClassifier.ModelParameters(v1 + *(int *)(v3 + 32), v2);
}

uint64_t MLSupportVectorClassifier.trainingMetrics.getter()
{
  uint64_t v2 = v0;
  uint64_t v3 = type metadata accessor for MLSupportVectorClassifier(0);
  return outlined init with copy of MLTrainingSessionParameters(v1 + *(int *)(v3 + 36), v2, type metadata accessor for MLClassifierMetrics);
}

uint64_t MLSupportVectorClassifier.validationMetrics.getter()
{
  uint64_t v2 = v0;
  uint64_t v3 = type metadata accessor for MLSupportVectorClassifier(0);
  return outlined init with copy of MLTrainingSessionParameters(v1 + *(int *)(v3 + 40), v2, type metadata accessor for MLClassifierMetrics);
}

uint64_t MLSupportVectorClassifier.init(trainingData:targetColumn:featureColumns:parameters:)(void (*a1)(uint64_t *, uint64_t, uint64_t), uint64_t a2, void *a3, uint64_t a4, uint64_t a5)
{
  uint64_t v121 = v6;
  uint64_t v127 = a5;
  uint64_t v122 = a4;
  uint64_t v125 = a3;
  uint64_t v118 = a2;
  uint64_t v119 = a1;
  uint64_t v7 = v5;
  uint64_t v120 = type metadata accessor for DataFrame(0);
  uint64_t v124 = *(void *)(v120 - 8);
  int64_t v8 = *(void *)(v124 + 64);
  uint64_t v9 = alloca(v8);
  uint64_t v10 = alloca(v8);
  uint64_t v107 = v94;
  int64_t v103 = v8;
  uint64_t v11 = alloca(v8);
  int64_t v12 = alloca(v8);
  uint64_t v109 = v94;
  int64_t v13 = *(void *)(*(void *)(type metadata accessor for MLClassifierMetrics(0) - 8) + 64);
  int64_t v14 = alloca(v13);
  char v15 = alloca(v13);
  uint64_t v102 = v94;
  Swift::String v16 = alloca(v13);
  char v17 = alloca(v13);
  uint64_t v98 = v94;
  uint64_t v112 = *(void *)(type metadata accessor for MLSupportVectorClassifier.Model(0) - 8);
  int64_t v18 = *(void *)(v112 + 64);
  long long v19 = alloca(v18);
  uint64_t v20 = alloca(v18);
  char v111 = v94;
  int64_t v110 = v18;
  Swift::String v21 = alloca(v18);
  Swift::String v22 = alloca(v18);
  id v123 = v94;
  int64_t v23 = *(void *)(*(void *)(type metadata accessor for AnyColumn(0) - 8) + 64);
  uint64_t v24 = alloca(v23);
  Swift::String v25 = alloca(v23);
  uint64_t v114 = (uint64_t)v94;
  int64_t v26 = *(void *)(*(void *)(type metadata accessor for MLSupportVectorClassifier.Classifier(0) - 8) + 64);
  uint64_t v27 = alloca(v26);
  uint64_t v28 = alloca(v26);
  uint64_t v115 = v94;
  uint64_t v126 = (unsigned char *)type metadata accessor for MLSupportVectorClassifier.ModelParameters.ValidationData(0);
  int64_t v29 = *(void *)(*((void *)v126 - 1) + 64);
  uint64_t v30 = alloca(v29);
  uint64_t v31 = alloca(v29);
  uint64_t v128 = v94;
  uint64_t v113 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (training: DataFrame, validation: DataFrame?));
  uint64_t v101 = *(void *)(v113 - 8);
  int64_t v32 = *(void *)(v101 + 64);
  __m128 v33 = alloca(v32);
  uint64_t v34 = alloca(v32);
  uint64_t v106 = v94;
  uint64_t v35 = alloca(v32);
  uint64_t v36 = alloca(v32);
  uint64_t v99 = v94;
  int64_t v100 = v32;
  uint64_t v37 = alloca(v32);
  uint64_t v38 = alloca(v32);
  uint64_t v39 = type metadata accessor for MLSupportVectorClassifier(0);
  uint64_t v104 = v7 + *(int *)(v39 + 36);
  MLClassifierMetrics.init()();
  uint64_t v116 = v39;
  uint64_t v40 = *(int *)(v39 + 40);
  uint64_t v41 = lazy protocol witness table accessor for type MLCreateError and conformance MLCreateError();
  uint64_t v42 = swift_allocError(&type metadata for MLCreateError, v41, 0, 0);
  *(void *)uint64_t v43 = 0xD0000000000000C0;
  *(void *)(v43 + 8) = "essor\n\nParameters\n" + 0x8000000000000000;
  *(_OWORD *)(v43 + 16) = 0;
  *(_OWORD *)(v43 + 32) = 0;
  *(unsigned char *)(v43 + 48) = 0;
  uint64_t v105 = v7;
  *(void *)(v7 + v40) = v42;
  uint64_t v44 = type metadata accessor for MLClassifierMetrics.Contents(0);
  uint64_t v117 = v40 + v7;
  swift_storeEnumTagMultiPayload(v40 + v7, v44, 2);
  outlined init with copy of Either<LogisticRegressionClassifier<Float, String>, FullyConnectedNetworkClassifier<Float, String>>(v127 + 8, (uint64_t)&v96, &demangling cache variable for type metadata for Any?);
  if (!v97) {
    BUG();
  }
  uint64_t v45 = &v94[*(int *)(v113 + 48)];
  outlined init with take of Any(&v96, v95);
  swift_dynamicCast(v128, v95, (char *)&type metadata for Any + 8, v126, 7);
  unint64_t v46 = v119;
  uint64_t v47 = v121;
  MLSupportVectorClassifier.ModelParameters.ValidationData.generateDataFrames(trainingData:)((uint64_t)v94, (uint64_t)v45, v119);
  if (v47)
  {
    swift_bridgeObjectRelease((_BYTE)v125);
    swift_bridgeObjectRelease(v122);
    outlined destroy of MLSupportVectorClassifier.ModelParameters(v127);
    (*(void (**)(void (*)(uint64_t *, uint64_t, uint64_t), uint64_t))(v124 + 8))(v46, v120);
    outlined destroy of MLActivityClassifier.ModelParameters((uint64_t)v128, type metadata accessor for MLSupportVectorClassifier.ModelParameters.ValidationData);
    uint64_t v50 = v117;
LABEL_5:
    outlined destroy of MLActivityClassifier.ModelParameters(v104, type metadata accessor for MLClassifierMetrics);
    return outlined destroy of MLActivityClassifier.ModelParameters(v50, type metadata accessor for MLClassifierMetrics);
  }
  uint64_t v121 = (void (*)(void, void))v45;
  outlined destroy of MLActivityClassifier.ModelParameters((uint64_t)v128, type metadata accessor for MLSupportVectorClassifier.ModelParameters.ValidationData);
  char v48 = v122;
  uint64_t v49 = static _FeatureUtilities.selectFeaturesFromTrainingData(trainingData:targetColumn:featureColumns:)((uint64_t)v94, v118, v125, v122);
  uint64_t v126 = v94;
  uint64_t v52 = (uint64_t *)v49;
  swift_bridgeObjectRelease(v48);
  uint64_t v53 = v125;
  uint64_t v128 = 0;
  DataFrame.subscript.getter(v118, v125);
  uint64_t v54 = v127;
  outlined init with copy of MLSupportVectorClassifier.ModelParameters(v127, (uint64_t)v95);
  swift_bridgeObjectRetain((_BYTE)v53);
  swift_bridgeObjectRetain((_BYTE)v52);
  uint64_t v55 = (uint64_t)v128;
  MLSupportVectorClassifier.Classifier.init(labelsColumn:targetColumnName:featureColumnNames:parameters:)(v114, v118, v53, v52, (uint64_t)v95);
  if (v55)
  {
    swift_bridgeObjectRelease((_BYTE)v125);
    swift_bridgeObjectRelease((_BYTE)v52);
    outlined destroy of MLSupportVectorClassifier.ModelParameters(v54);
    (*(void (**)(void (*)(uint64_t *, uint64_t, uint64_t), uint64_t))(v124 + 8))(v119, v120);
    outlined destroy of Either<LogisticRegressionClassifier<Float, String>, FullyConnectedNetworkClassifier<Float, String>>((uint64_t)v126, &demangling cache variable for type metadata for (training: DataFrame, validation: DataFrame?));
    uint64_t v50 = v117;
    goto LABEL_5;
  }
  uint64_t v122 = (uint64_t)v52;
  MLSupportVectorClassifier.Classifier.fitted(to:validateOn:eventHandler:)((uint64_t)v126, (uint64_t)v121, 0, 0);
  uint64_t v56 = v116;
  uint64_t v57 = *(int *)(v116 + 24);
  uint64_t v128 = 0;
  uint64_t v58 = v105;
  *(void *)(v105 + v57) = v118;
  uint64_t v118 = v57;
  *(void *)(v58 + v57 + 8) = v125;
  uint64_t v125 = (void *)(v58 + *(int *)(v56 + 32));
  outlined init with copy of MLSupportVectorClassifier.ModelParameters(v127, (uint64_t)v125);
  uint64_t v114 = *(int *)(v56 + 28);
  *(void *)(v58 + v114) = v122;
  uint64_t v59 = (uint64_t)v111;
  outlined init with copy of MLTrainingSessionParameters((uint64_t)v123, (uint64_t)v111, type metadata accessor for MLSupportVectorClassifier.Model);
  uint64_t v60 = *(unsigned __int8 *)(v112 + 80);
  uint64_t v61 = ~*(unsigned __int8 *)(v112 + 80) & (v60 + 16);
  v110 += v61;
  uint64_t v112 = v60 | 7;
  uint64_t v62 = swift_allocObject(&unk_39BBE8, v110, v60 | 7);
  uint64_t v122 = v61;
  outlined init with take of MLClassifierMetrics(v59, v62 + v61, type metadata accessor for MLSupportVectorClassifier.Model);
  uint64_t v63 = (uint64_t)v128;
  specialized blockAwait<A>(_:)((uint64_t)&async function pointer to partial apply for closure #1 in MLSupportVectorClassifier.init(trainingData:targetColumn:featureColumns:parameters:), v62);
  uint64_t v65 = v64;
  uint64_t v66 = (uint64_t)v123;
  uint64_t v128 = (unsigned char *)v63;
  if (v63)
  {
    NSString v67 = v119;
    swift_release();
    outlined destroy of MLSupportVectorClassifier.ModelParameters(v127);
    (*(void (**)(void (*)(uint64_t *, uint64_t, uint64_t), uint64_t))(v124 + 8))(v67, v120);
    outlined destroy of MLActivityClassifier.ModelParameters(v66, type metadata accessor for MLSupportVectorClassifier.Model);
    outlined destroy of MLActivityClassifier.ModelParameters((uint64_t)v115, type metadata accessor for MLSupportVectorClassifier.Classifier);
    outlined destroy of Either<LogisticRegressionClassifier<Float, String>, FullyConnectedNetworkClassifier<Float, String>>((uint64_t)v126, &demangling cache variable for type metadata for (training: DataFrame, validation: DataFrame?));
LABEL_13:
    uint64_t v50 = v117;
    uint64_t v77 = (uint64_t)v125;
    uint64_t v78 = v114;
    swift_bridgeObjectRelease(*(void *)(v58 + v118 + 8));
    swift_bridgeObjectRelease(*(void *)(v58 + v78));
    outlined destroy of MLSupportVectorClassifier.ModelParameters(v77);
    goto LABEL_5;
  }
  swift_release();
  uint64_t v116 = *(int *)(v116 + 20);
  *(void *)(v58 + v116) = v65;
  outlined init with copy of MLTrainingSessionParameters(v66, v58, type metadata accessor for MLSupportVectorClassifier.Model);
  uint64_t v68 = (uint64_t)v111;
  outlined init with copy of MLTrainingSessionParameters(v66, (uint64_t)v111, type metadata accessor for MLSupportVectorClassifier.Model);
  uint64_t v69 = (uint64_t)v99;
  uint64_t v70 = (uint64_t)&v99[*(int *)(v113 + 48)];
  uint64_t v108 = *(void (**)(unsigned char *, unsigned char *, uint64_t))(v124 + 16);
  v108(v99, v126, v120);
  outlined init with copy of Either<LogisticRegressionClassifier<Float, String>, FullyConnectedNetworkClassifier<Float, String>>((uint64_t)v121, v70, &demangling cache variable for type metadata for DataFrame?);
  uint64_t v71 = *(unsigned __int8 *)(v101 + 80);
  int64_t v72 = ~v71 & (v110 + v71);
  uint64_t v73 = swift_allocObject(&unk_39BC10, v72 + v100, v112 | v71);
  outlined init with take of MLClassifierMetrics(v68, v73 + v122, type metadata accessor for MLSupportVectorClassifier.Model);
  outlined init with take of (training: DataFrame, validation: DataFrame?)(v69, v73 + v72);
  uint64_t v74 = (uint64_t)v98;
  uint64_t v75 = (uint64_t)v128;
  specialized blockAwait<A>(_:)((uint64_t)&async function pointer to partial apply for closure #2 in MLSupportVectorClassifier.init(trainingData:targetColumn:featureColumns:parameters:), v73);
  uint64_t v128 = (unsigned char *)v75;
  if (v75)
  {
    swift_release();
    outlined destroy of MLSupportVectorClassifier.ModelParameters(v127);
    (*(void (**)(void (*)(uint64_t *, uint64_t, uint64_t), uint64_t))(v124 + 8))(v119, v120);
LABEL_12:
    uint64_t v76 = v116;
    outlined destroy of MLActivityClassifier.ModelParameters((uint64_t)v123, type metadata accessor for MLSupportVectorClassifier.Model);
    outlined destroy of MLActivityClassifier.ModelParameters((uint64_t)v115, type metadata accessor for MLSupportVectorClassifier.Classifier);
    outlined destroy of Either<LogisticRegressionClassifier<Float, String>, FullyConnectedNetworkClassifier<Float, String>>((uint64_t)v126, &demangling cache variable for type metadata for (training: DataFrame, validation: DataFrame?));
    uint64_t v58 = v105;
    outlined destroy of MLActivityClassifier.ModelParameters(v105, type metadata accessor for MLSupportVectorClassifier.Model);

    goto LABEL_13;
  }
  swift_release();
  outlined assign with take of MLClassifierMetrics(v74, v104);
  uint64_t v79 = v106;
  uint64_t v80 = (uint64_t)&v106[*(int *)(v113 + 48)];
  uint64_t v81 = v120;
  v108(v106, v126, v120);
  outlined init with copy of Either<LogisticRegressionClassifier<Float, String>, FullyConnectedNetworkClassifier<Float, String>>((uint64_t)v121, v80, &demangling cache variable for type metadata for DataFrame?);
  if (__swift_getEnumTagSinglePayload(v80, 1, v81) == 1)
  {
    outlined destroy of MLSupportVectorClassifier.ModelParameters(v127);
    uint64_t v82 = *(void (**)(void (*)(uint64_t *, uint64_t, uint64_t), uint64_t))(v124 + 8);
    v82(v119, v81);
    outlined destroy of MLActivityClassifier.ModelParameters((uint64_t)v123, type metadata accessor for MLSupportVectorClassifier.Model);
    outlined destroy of MLActivityClassifier.ModelParameters((uint64_t)v115, type metadata accessor for MLSupportVectorClassifier.Classifier);
    outlined destroy of Either<LogisticRegressionClassifier<Float, String>, FullyConnectedNetworkClassifier<Float, String>>((uint64_t)v126, &demangling cache variable for type metadata for (training: DataFrame, validation: DataFrame?));
    outlined destroy of Either<LogisticRegressionClassifier<Float, String>, FullyConnectedNetworkClassifier<Float, String>>(v80, &demangling cache variable for type metadata for DataFrame?);
    return ((uint64_t (*)(unsigned char *, uint64_t))v82)(v79, v81);
  }
  else
  {
    uint64_t v83 = v124;
    uint64_t v113 = *(void *)(v124 + 32);
    id v84 = v109;
    uint64_t v85 = v80;
    uint64_t v86 = v81;
    ((void (*)(unsigned char *, uint64_t, uint64_t))v113)(v109, v85, v81);
    uint64_t v121 = *(void (**)(void, void))(v83 + 8);
    v121(v106, v81);
    outlined init with copy of MLTrainingSessionParameters((uint64_t)v123, (uint64_t)v111, type metadata accessor for MLSupportVectorClassifier.Model);
    v108(v107, v84, v81);
    uint64_t v87 = *(unsigned __int8 *)(v83 + 80);
    int64_t v88 = ~v87 & (v87 + v110);
    uint64_t v89 = swift_allocObject(&unk_39BC38, v88 + v103, v87 | v112);
    outlined init with take of MLClassifierMetrics((uint64_t)v111, v89 + v122, type metadata accessor for MLSupportVectorClassifier.Model);
    ((void (*)(uint64_t, unsigned char *, uint64_t))v113)(v89 + v88, v107, v86);
    uint64_t v90 = (uint64_t)v102;
    uint64_t v91 = (uint64_t)v128;
    specialized blockAwait<A>(_:)((uint64_t)&async function pointer to partial apply for closure #3 in MLSupportVectorClassifier.init(trainingData:targetColumn:featureColumns:parameters:), v89);
    uint64_t v128 = (unsigned char *)v91;
    if (v91)
    {
      swift_release();
      outlined destroy of MLSupportVectorClassifier.ModelParameters(v127);
      id v92 = (void (*)(unsigned char *, uint64_t))v121;
      v121(v119, v86);
      v92(v109, v86);
      goto LABEL_12;
    }
    swift_release();
    outlined destroy of MLSupportVectorClassifier.ModelParameters(v127);
    uint64_t v93 = (void (*)(unsigned char *, uint64_t))v121;
    v121(v119, v86);
    v93(v109, v86);
    outlined destroy of MLActivityClassifier.ModelParameters((uint64_t)v123, type metadata accessor for MLSupportVectorClassifier.Model);
    outlined destroy of MLActivityClassifier.ModelParameters((uint64_t)v115, type metadata accessor for MLSupportVectorClassifier.Classifier);
    outlined destroy of Either<LogisticRegressionClassifier<Float, String>, FullyConnectedNetworkClassifier<Float, String>>((uint64_t)v126, &demangling cache variable for type metadata for (training: DataFrame, validation: DataFrame?));
    return outlined assign with take of MLClassifierMetrics(v90, v117);
  }
}

uint64_t closure #1 in MLSupportVectorClassifier.init(trainingData:targetColumn:featureColumns:parameters:)(uint64_t a1)
{
  *(void *)(v1 + 16) = a1;
  uint64_t v2 = (void *)swift_task_alloc(dword_3ADEE4);
  *(void *)(v1 + 24) = v2;
  *uint64_t v2 = v1;
  v2[1] = closure #1 in MLRandomForestRegressor.init(checkpoint:);
  return MLSupportVectorClassifier.Model.exportAsCoreMLModel()();
}

uint64_t closure #2 in MLSupportVectorClassifier.init(trainingData:targetColumn:featureColumns:parameters:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  v3[2] = a1;
  uint64_t v5 = type metadata accessor for AnyClassificationMetrics(0);
  uint64_t v6 = swift_task_alloc((*(void *)(*(void *)(v5 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v3[3] = v6;
  uint64_t v7 = (void *)swift_task_alloc(dword_3ADEDC);
  v3[4] = v7;
  void *v7 = v3;
  v7[1] = closure #2 in MLSupportVectorClassifier.init(trainingData:targetColumn:featureColumns:parameters:);
  return MLSupportVectorClassifier.Model.computeMetrics(on:)(v6, a3);
}

uint64_t closure #2 in MLSupportVectorClassifier.init(trainingData:targetColumn:featureColumns:parameters:)()
{
  uint64_t v2 = *(void *)(*(void *)v1 + 32);
  *(void *)(*(void *)v1 + 40) = v0;
  swift_task_dealloc(v2);
  if (v0) {
    uint64_t v3 = closure #2 in MLSupportVectorClassifier.init(trainingData:targetColumn:featureColumns:parameters:);
  }
  else {
    uint64_t v3 = closure #2 in MLSupportVectorClassifier.init(trainingData:targetColumn:featureColumns:parameters:);
  }
  return swift_task_switch(v3, 0, 0);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  uint64_t v1 = *(void *)(v0 + 16);
  uint64_t v2 = *(void *)(v0 + 24);
  outlined init with take of MLClassifierMetrics(v2, v1, type metadata accessor for AnyClassificationMetrics);
  uint64_t v3 = type metadata accessor for MLClassifierMetrics.Contents(0);
  swift_storeEnumTagMultiPayload(v1, v3, 0);
  swift_task_dealloc(v2);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

{
  uint64_t v0;

  swift_task_dealloc(*(void *)(v0 + 24));
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t closure #3 in MLSupportVectorClassifier.init(trainingData:targetColumn:featureColumns:parameters:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  v3[2] = a1;
  uint64_t v5 = type metadata accessor for AnyClassificationMetrics(0);
  uint64_t v6 = swift_task_alloc((*(void *)(*(void *)(v5 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v3[3] = v6;
  uint64_t v7 = (void *)swift_task_alloc(dword_3ADEDC);
  v3[4] = v7;
  void *v7 = v3;
  v7[1] = closure #3 in MLSupportVectorClassifier.init(trainingData:targetColumn:featureColumns:parameters:);
  return MLSupportVectorClassifier.Model.computeMetrics(on:)(v6, a3);
}

uint64_t closure #3 in MLSupportVectorClassifier.init(trainingData:targetColumn:featureColumns:parameters:)()
{
  uint64_t v2 = *(void *)(*(void *)v1 + 32);
  *(void *)(*(void *)v1 + 40) = v0;
  swift_task_dealloc(v2);
  if (v0) {
    uint64_t v3 = closure #3 in MLSupportVectorClassifier.init(trainingData:targetColumn:featureColumns:parameters:);
  }
  else {
    uint64_t v3 = closure #3 in MLSupportVectorClassifier.init(trainingData:targetColumn:featureColumns:parameters:);
  }
  return swift_task_switch(v3, 0, 0);
}

{
  return closure #2 in MLSupportVectorClassifier.init(trainingData:targetColumn:featureColumns:parameters:)();
}

{
  return closure #2 in MLSupportVectorClassifier.init(trainingData:targetColumn:featureColumns:parameters:)();
}

uint64_t MLSupportVectorClassifier.init(trainingData:targetColumn:featureColumns:parameters:)(uint64_t *a1, uint64_t a2, void *a3, uint64_t a4, uint64_t a5)
{
  uint64_t v13 = a4;
  int64_t v14 = a3;
  uint64_t v15 = a2;
  int64_t v6 = *(void *)(*(void *)(type metadata accessor for DataFrame(0) - 8) + 64);
  uint64_t v7 = alloca(v6);
  int64_t v8 = alloca(v6);
  char v9 = *((unsigned char *)a1 + 8);
  uint64_t v11 = *a1;
  char v12 = v9;
  DataFrame.init(_:)((uint64_t)&v11);
  outlined init with copy of MLSupportVectorClassifier.ModelParameters(a5, (uint64_t)&v11);
  MLSupportVectorClassifier.init(trainingData:targetColumn:featureColumns:parameters:)((void (*)(uint64_t *, uint64_t, uint64_t))&v11, v15, v14, v13, (uint64_t)&v11);
  return outlined destroy of MLSupportVectorClassifier.ModelParameters(a5);
}

uint64_t closure #1 in MLSupportVectorClassifier.predictions(from:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  v3[4] = a3;
  v3[3] = a2;
  v3[2] = a1;
  return swift_task_switch(closure #1 in MLSupportVectorClassifier.predictions(from:), 0, 0);
}

uint64_t closure #1 in MLSupportVectorClassifier.predictions(from:)()
{
  uint64_t v1 = *(void *)(v0 + 32);
  uint64_t v2 = type metadata accessor for MLSupportVectorClassifier(0);
  DataFrame.validateContainsColumns(_:context:)(*(Swift::OpaquePointer *)(v1 + *(int *)(v2 + 28)), (Swift::String)__PAIR128__(0xE700000000000000, 0x65727574616546));
  if (v3) {
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
  uint64_t v5 = (void *)swift_task_alloc(dword_3ADEEC);
  *(void *)(v0 + 40) = v5;
  *uint64_t v5 = v0;
  v5[1] = closure #1 in MLSupportVectorClassifier.predictions(from:);
  return MLSupportVectorClassifier.Model.predictions(from:)(*(void *)(v0 + 16), *(void *)(v0 + 24));
}

{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;

  uint64_t v1 = *(void *)(*v0 + 40);
  uint64_t v2 = *v0;
  swift_task_dealloc(v1);
  return (*(uint64_t (**)(void))(v2 + 8))();
}

uint64_t sub_220BDA()
{
  return objectdestroyTm_4();
}

uint64_t sub_220BF0()
{
  return objectdestroyTm_4();
}

uint64_t closure #1 in MLSupportVectorClassifier.predictions(from:)partial apply(uint64_t a1)
{
  uint64_t v3 = *(void *)(type metadata accessor for DataFrame(0) - 8);
  uint64_t v4 = ~*(unsigned __int8 *)(v3 + 80) & (*(unsigned __int8 *)(v3 + 80) + 16);
  uint64_t v5 = v4 + *(void *)(v3 + 64);
  uint64_t v6 = *(unsigned __int8 *)(*(void *)(type metadata accessor for MLSupportVectorClassifier(0) - 8) + 80);
  uint64_t v7 = (void *)swift_task_alloc(dword_3AC63C);
  *(void *)(v2 + 16) = v7;
  void *v7 = v2;
  v7[1] = partial apply for closure #1 in MLActivityClassifier.init(trainingData:featureColumns:labelColumn:recordingFileColumn:parameters:);
  return closure #1 in MLSupportVectorClassifier.predictions(from:)(a1, v1 + v4, v1 + ((v6 + v5) & ~v6));
}

uint64_t closure #1 in MLSupportVectorClassifier.evaluation(on:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  v3[10] = a3;
  v3[9] = a2;
  void v3[8] = a1;
  uint64_t v4 = type metadata accessor for AnyClassificationMetrics(0);
  v3[11] = swift_task_alloc((*(void *)(*(void *)(v4 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  return swift_task_switch(closure #1 in MLSupportVectorClassifier.evaluation(on:), 0, 0);
}

uint64_t closure #1 in MLSupportVectorClassifier.evaluation(on:)()
{
  uint64_t v1 = *(void *)(v0 + 80);
  uint64_t v2 = type metadata accessor for MLSupportVectorClassifier(0);
  DataFrame.validateContainsColumns(_:context:)(*(Swift::OpaquePointer *)(v1 + *(int *)(v2 + 28)), (Swift::String)__PAIR128__(0xE700000000000000, 0x65727574616546));
  if (v3) {
    goto LABEL_3;
  }
  uint64_t v4 = *(void *)(v0 + 80);
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<String>);
  uint64_t inited = (void *)swift_initStackObject(v5, v0 + 16);
  inited[2] = 1;
  inited[3] = 2;
  uint64_t v7 = *(int *)(v2 + 24);
  uint64_t v8 = *(void *)(v4 + v7 + 8);
  inited[4] = *(void *)(v4 + v7);
  inited[5] = v8;
  swift_bridgeObjectRetain(v8);
  DataFrame.validateContainsColumns(_:context:)((Swift::OpaquePointer)inited, (Swift::String)__PAIR128__(0xE500000000000000, 0x6C6562614CLL));
  swift_setDeallocating(inited);
  specialized _ContiguousArrayStorage.__deallocating_deinit();
  if (v3)
  {
LABEL_3:
    char v9 = *(void **)(v0 + 64);
    *char v9 = v3;
    uint64_t v10 = type metadata accessor for MLClassifierMetrics.Contents(0);
    swift_storeEnumTagMultiPayload(v9, v10, 2);
    swift_task_dealloc(*(void *)(v0 + 88));
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
  else
  {
    char v12 = (void *)swift_task_alloc(dword_3ADEDC);
    *(void *)(v0 + 96) = v12;
    *char v12 = v0;
    v12[1] = closure #1 in MLSupportVectorClassifier.evaluation(on:);
    return MLSupportVectorClassifier.Model.computeMetrics(on:)(*(void *)(v0 + 88), *(void *)(v0 + 72));
  }
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t (*v3)();

  uint64_t v2 = *(void *)(*(void *)v1 + 96);
  *(void *)(*(void *)v1 + 104) = v0;
  swift_task_dealloc(v2);
  if (v0) {
    uint64_t v3 = closure #1 in MLSupportVectorClassifier.evaluation(on:);
  }
  else {
    uint64_t v3 = closure #1 in MLSupportVectorClassifier.evaluation(on:);
  }
  return swift_task_switch(v3, 0, 0);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  uint64_t v1 = *(void *)(v0 + 64);
  outlined init with take of MLClassifierMetrics(*(void *)(v0 + 88), v1, type metadata accessor for AnyClassificationMetrics);
  uint64_t v2 = type metadata accessor for MLClassifierMetrics.Contents(0);
  swift_storeEnumTagMultiPayload(v1, v2, 0);
  swift_task_dealloc(*(void *)(v0 + 88));
  return (*(uint64_t (**)(void))(v0 + 8))();
}

{
  uint64_t v0;
  void *v1;
  uint64_t v2;

  uint64_t v1 = *(void **)(v0 + 64);
  NSAttributedString *v1 = *(void *)(v0 + 104);
  uint64_t v2 = type metadata accessor for MLClassifierMetrics.Contents(0);
  swift_storeEnumTagMultiPayload(v1, v2, 2);
  swift_task_dealloc(*(void *)(v0 + 88));
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_220F6B()
{
  return objectdestroyTm_4();
}

uint64_t objectdestroyTm_4()
{
  uint64_t v1 = type metadata accessor for DataFrame(0);
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v30 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v3 = ~*(unsigned __int8 *)(v2 + 80) & (v30 + 16);
  uint64_t v4 = v3 + *(void *)(v2 + 64);
  uint64_t v5 = type metadata accessor for MLSupportVectorClassifier(0);
  uint64_t v6 = *(void *)(v5 - 8);
  uint64_t v31 = *(unsigned __int8 *)(v6 + 80);
  uint64_t v7 = ~v31 & (v31 + v4);
  uint64_t v32 = *(void *)(v6 + 64);
  uint64_t v35 = v1;
  uint64_t v8 = v1;
  char v9 = (int *)v5;
  uint64_t v34 = *(void (**)(uint64_t, uint64_t))(v2 + 8);
  v34(v0 + v3, v8);
  uint64_t v10 = v7 + v0;
  swift_bridgeObjectRelease(*(void *)(v0 + v7 + 8));
  swift_bridgeObjectRelease(*(void *)(v0 + v7 + 16));
  uint64_t v29 = v0;
  swift_bridgeObjectRelease(*(void *)(v0 + v7 + 32));
  uint64_t v11 = v7 + v0 + *(int *)(type metadata accessor for MLSupportVectorClassifier.Model(0) + 24);
  uint64_t v12 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Either<LinearSupportVectorClassifierModel<Double, String>, LinearSupportVectorClassifierModel<Double, Int>>);
  uint64_t v13 = &demangling cache variable for type metadata for LinearSupportVectorClassifierModel<Double, String>;
  if (swift_getEnumCaseMultiPayload(v11, v12) == 1) {
    uint64_t v13 = &demangling cache variable for type metadata for LinearSupportVectorClassifierModel<Double, Int>;
  }
  uint64_t v14 = __swift_instantiateConcreteTypeFromMangledName(v13);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v14 - 8) + 8))(v11, v14);

  swift_bridgeObjectRelease(*(void *)(v9[6] + v10 + 8));
  swift_bridgeObjectRelease(*(void *)(v9[7] + v10));
  uint64_t v15 = v9[8];
  if (*(void *)(v15 + v10 + 32)) {
    __swift_destroy_boxed_opaque_existential_1Tm((void *)(v10 + v15 + 8));
  }
  Swift::String v16 = (void *)(v10 + v9[9]);
  uint64_t v17 = type metadata accessor for MLClassifierMetrics.Contents(0);
  int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload(v16, v17);
  switch(EnumCaseMultiPayload)
  {
    case 2:
      swift_errorRelease(*v16);
      break;
    case 1:
      uint64_t v33 = type metadata accessor for MLClassifierMetrics.Precomputed(0);
      v34((uint64_t)v16 + *(int *)(v33 + 20), v35);
      v34((uint64_t)v16 + *(int *)(v33 + 24), v35);
      break;
    case 0:
      uint64_t v19 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Either<ClassificationMetrics<String>, ClassificationMetrics<Int>>);
      if (swift_getEnumCaseMultiPayload(v16, v19) == 1) {
        uint64_t v20 = &demangling cache variable for type metadata for ClassificationMetrics<Int>;
      }
      else {
        uint64_t v20 = &demangling cache variable for type metadata for ClassificationMetrics<String>;
      }
      uint64_t v21 = __swift_instantiateConcreteTypeFromMangledName(v20);
      (*(void (**)(void *, uint64_t))(*(void *)(v21 - 8) + 8))(v16, v21);
      break;
  }
  Swift::String v22 = (void *)(v9[10] + v10);
  int v23 = swift_getEnumCaseMultiPayload(v22, v17);
  switch(v23)
  {
    case 2:
      swift_errorRelease(*v22);
      break;
    case 1:
      uint64_t v26 = type metadata accessor for MLClassifierMetrics.Precomputed(0);
      v34((uint64_t)v22 + *(int *)(v26 + 20), v35);
      v34((uint64_t)v22 + *(int *)(v26 + 24), v35);
      break;
    case 0:
      uint64_t v24 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Either<ClassificationMetrics<String>, ClassificationMetrics<Int>>);
      if (swift_getEnumCaseMultiPayload(v22, v24) == 1) {
        Swift::String v25 = &demangling cache variable for type metadata for ClassificationMetrics<Int>;
      }
      else {
        Swift::String v25 = &demangling cache variable for type metadata for ClassificationMetrics<String>;
      }
      uint64_t v27 = __swift_instantiateConcreteTypeFromMangledName(v25);
      (*(void (**)(void *, uint64_t))(*(void *)(v27 - 8) + 8))(v22, v27);
      break;
  }
  return swift_deallocObject(v29, v32 + v7, v31 | v30 | 7);
}

uint64_t partial apply for closure #1 in MLSupportVectorClassifier.evaluation(on:)(uint64_t a1)
{
  uint64_t v3 = *(void *)(type metadata accessor for DataFrame(0) - 8);
  uint64_t v4 = ~*(unsigned __int8 *)(v3 + 80) & (*(unsigned __int8 *)(v3 + 80) + 16);
  uint64_t v5 = v4 + *(void *)(v3 + 64);
  uint64_t v6 = *(unsigned __int8 *)(*(void *)(type metadata accessor for MLSupportVectorClassifier(0) - 8) + 80);
  uint64_t v7 = (void *)swift_task_alloc(dword_3AC64C);
  *(void *)(v2 + 16) = v7;
  void *v7 = v2;
  v7[1] = partial apply for closure #1 in MLActivityClassifier.init(trainingData:featureColumns:labelColumn:recordingFileColumn:parameters:);
  return closure #1 in MLSupportVectorClassifier.evaluation(on:)(a1, v1 + v4, v1 + ((v6 + v5) & ~v6));
}

uint64_t outlined destroy of MLSupportVectorClassifier.ModelParameters(uint64_t a1)
{
  return a1;
}

uint64_t sub_2212E1()
{
  uint64_t v1 = type metadata accessor for MLSupportVectorClassifier.Model(0);
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = ~*(unsigned __int8 *)(v2 + 80) & (v3 + 16);
  uint64_t v5 = v4 + *(void *)(v2 + 64);
  swift_bridgeObjectRelease(*(void *)(v0 + v4 + 8));
  swift_bridgeObjectRelease(*(void *)(v0 + v4 + 16));
  swift_bridgeObjectRelease(*(void *)(v0 + v4 + 32));
  uint64_t v6 = v4 + v0 + *(int *)(v1 + 24);
  uint64_t v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Either<LinearSupportVectorClassifierModel<Double, String>, LinearSupportVectorClassifierModel<Double, Int>>);
  uint64_t v8 = &demangling cache variable for type metadata for LinearSupportVectorClassifierModel<Double, String>;
  if (swift_getEnumCaseMultiPayload(v6, v7) == 1) {
    uint64_t v8 = &demangling cache variable for type metadata for LinearSupportVectorClassifierModel<Double, Int>;
  }
  uint64_t v9 = __swift_instantiateConcreteTypeFromMangledName(v8);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v9 - 8) + 8))(v6, v9);
  return swift_deallocObject(v0, v5, v3 | 7);
}

uint64_t partial apply for closure #1 in MLSupportVectorClassifier.init(trainingData:targetColumn:featureColumns:parameters:)(uint64_t a1)
{
  type metadata accessor for MLSupportVectorClassifier.Model(0);
  uint64_t v2 = (void *)swift_task_alloc(dword_3AC65C);
  *(void *)(v1 + 16) = v2;
  *uint64_t v2 = v1;
  v2[1] = partial apply for closure #1 in MLActivityClassifier.init(trainingData:featureColumns:labelColumn:recordingFileColumn:parameters:);
  return closure #1 in MLSupportVectorClassifier.init(trainingData:targetColumn:featureColumns:parameters:)(a1);
}

uint64_t sub_221413()
{
  uint64_t v1 = v0;
  uint64_t v2 = type metadata accessor for MLSupportVectorClassifier.Model(0);
  uint64_t v3 = *(void *)(v2 - 8);
  uint64_t v4 = *(unsigned __int8 *)(v3 + 80);
  uint64_t v5 = ~*(unsigned __int8 *)(v3 + 80) & (v4 + 16);
  uint64_t v6 = v5 + *(void *)(v3 + 64);
  uint64_t v19 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (training: DataFrame, validation: DataFrame?));
  uint64_t v7 = *(void *)(v19 - 8);
  uint64_t v17 = *(unsigned __int8 *)(v7 + 80);
  uint64_t v8 = ~v17 & (v17 + v6);
  uint64_t v18 = *(void *)(v7 + 64);
  swift_bridgeObjectRelease(*(void *)(v1 + v5 + 8));
  swift_bridgeObjectRelease(*(void *)(v1 + v5 + 16));
  swift_bridgeObjectRelease(*(void *)(v1 + v5 + 32));
  uint64_t v9 = v5 + v1 + *(int *)(v2 + 24);
  uint64_t v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Either<LinearSupportVectorClassifierModel<Double, String>, LinearSupportVectorClassifierModel<Double, Int>>);
  uint64_t v11 = &demangling cache variable for type metadata for LinearSupportVectorClassifierModel<Double, String>;
  if (swift_getEnumCaseMultiPayload(v9, v10) == 1) {
    uint64_t v11 = &demangling cache variable for type metadata for LinearSupportVectorClassifierModel<Double, Int>;
  }
  uint64_t v12 = __swift_instantiateConcreteTypeFromMangledName(v11);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v12 - 8) + 8))(v9, v12);
  uint64_t v16 = v1;
  uint64_t v13 = type metadata accessor for DataFrame(0);
  uint64_t v20 = *(void (**)(uint64_t, uint64_t))(*(void *)(v13 - 8) + 8);
  v20(v1 + v8, v13);
  uint64_t v14 = v1 + v8 + *(int *)(v19 + 48);
  if (!__swift_getEnumTagSinglePayload(v14, 1, v13)) {
    v20(v14, v13);
  }
  return swift_deallocObject(v16, v18 + v8, v17 | v4 | 7);
}

uint64_t outlined init with take of (training: DataFrame, validation: DataFrame?)(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (training: DataFrame, validation: DataFrame?));
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v2 - 8) + 32))(a2, a1, v2);
  return a2;
}

uint64_t partial apply for closure #2 in MLSupportVectorClassifier.init(trainingData:targetColumn:featureColumns:parameters:)(uint64_t a1)
{
  uint64_t v3 = *(void *)(type metadata accessor for MLSupportVectorClassifier.Model(0) - 8);
  uint64_t v4 = ~*(unsigned __int8 *)(v3 + 80) & (*(unsigned __int8 *)(v3 + 80) + 16);
  uint64_t v5 = v4 + *(void *)(v3 + 64);
  uint64_t v6 = *(unsigned __int8 *)(*(void *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (training: DataFrame, validation: DataFrame?))
                                      - 8)
                          + 80);
  uint64_t v7 = (void *)swift_task_alloc(dword_3AC66C);
  *(void *)(v2 + 16) = v7;
  void *v7 = v2;
  v7[1] = partial apply for closure #1 in MLActivityClassifier.init(trainingData:featureColumns:labelColumn:recordingFileColumn:parameters:);
  return closure #2 in MLSupportVectorClassifier.init(trainingData:targetColumn:featureColumns:parameters:)(a1, v1 + v4, v1 + ((v6 + v5) & ~v6));
}

uint64_t sub_221646()
{
  uint64_t v16 = type metadata accessor for MLSupportVectorClassifier.Model(0);
  uint64_t v1 = *(void *)(v16 - 8);
  uint64_t v2 = *(unsigned __int8 *)(v1 + 80);
  uint64_t v3 = ~*(unsigned __int8 *)(v1 + 80) & (v2 + 16);
  uint64_t v4 = v3 + *(void *)(v1 + 64);
  uint64_t v12 = type metadata accessor for DataFrame(0);
  uint64_t v5 = *(void *)(v12 - 8);
  uint64_t v15 = *(unsigned __int8 *)(v5 + 80);
  uint64_t v14 = v5;
  uint64_t v6 = (v15 + v4) & ~v15;
  uint64_t v13 = v6 + *(void *)(v5 + 64);
  swift_bridgeObjectRelease(*(void *)(v0 + v3 + 8));
  swift_bridgeObjectRelease(*(void *)(v0 + v3 + 16));
  swift_bridgeObjectRelease(*(void *)(v0 + v3 + 32));
  uint64_t v7 = v3 + v0 + *(int *)(v16 + 24);
  uint64_t v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Either<LinearSupportVectorClassifierModel<Double, String>, LinearSupportVectorClassifierModel<Double, Int>>);
  uint64_t v9 = &demangling cache variable for type metadata for LinearSupportVectorClassifierModel<Double, String>;
  if (swift_getEnumCaseMultiPayload(v7, v8) == 1) {
    uint64_t v9 = &demangling cache variable for type metadata for LinearSupportVectorClassifierModel<Double, Int>;
  }
  uint64_t v10 = __swift_instantiateConcreteTypeFromMangledName(v9);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v10 - 8) + 8))(v7, v10);
  (*(void (**)(uint64_t, uint64_t))(v14 + 8))(v0 + v6, v12);
  return swift_deallocObject(v0, v13, v15 | v2 | 7);
}

uint64_t partial apply for closure #3 in MLSupportVectorClassifier.init(trainingData:targetColumn:featureColumns:parameters:)(uint64_t a1)
{
  uint64_t v3 = *(void *)(type metadata accessor for MLSupportVectorClassifier.Model(0) - 8);
  uint64_t v4 = ~*(unsigned __int8 *)(v3 + 80) & (*(unsigned __int8 *)(v3 + 80) + 16);
  uint64_t v5 = v4 + *(void *)(v3 + 64);
  uint64_t v6 = *(unsigned __int8 *)(*(void *)(type metadata accessor for DataFrame(0) - 8) + 80);
  uint64_t v7 = (void *)swift_task_alloc(dword_3AC67C);
  *(void *)(v2 + 16) = v7;
  void *v7 = v2;
  v7[1] = partial apply for closure #1 in MLActivityClassifier.init(trainingData:featureColumns:labelColumn:recordingFileColumn:parameters:);
  return closure #3 in MLSupportVectorClassifier.init(trainingData:targetColumn:featureColumns:parameters:)(a1, v1 + v4, v1 + ((v6 + v5) & ~v6));
}

unint64_t protocol witness for CustomStringConvertible.description.getter in conformance MLSupportVectorClassifier()
{
  return MLSupportVectorClassifier.description.getter();
}

unint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance MLSupportVectorClassifier()
{
  return MLSupportVectorClassifier.debugDescription.getter();
}

NSAttributedString protocol witness for CustomPlaygroundDisplayConvertible.playgroundDescription.getter in conformance MLSupportVectorClassifier()
{
  return MLSupportVectorClassifier.playgroundDescription.getter();
}

void *initializeBufferWithCopyOfBuffer for MLSupportVectorClassifier(void *a1, void *a2, int *a3)
{
  int v4 = *(_DWORD *)(*((void *)a3 - 1) + 80);
  if ((v4 & 0x20000) == 0)
  {
    *a1 = *a2;
    uint64_t v5 = a2[1];
    a1[1] = v5;
    uint64_t v72 = a2[2];
    a1[2] = v72;
    a1[3] = a2[3];
    uint64_t v6 = a2[4];
    a1[4] = v6;
    uint64_t v7 = *(int *)(type metadata accessor for MLSupportVectorClassifier.Model(0) + 24);
    uint64_t v66 = (char *)a1 + v7;
    uint64_t v8 = (char *)a2 + v7;
    swift_bridgeObjectRetain(v5);
    swift_bridgeObjectRetain(v72);
    swift_bridgeObjectRetain(v6);
    uint64_t v73 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Either<LinearSupportVectorClassifierModel<Double, String>, LinearSupportVectorClassifierModel<Double, Int>>);
    int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload(v8, v73);
    BOOL v10 = EnumCaseMultiPayload == 1;
    uint64_t v11 = &demangling cache variable for type metadata for LinearSupportVectorClassifierModel<Double, String>;
    if (EnumCaseMultiPayload == 1) {
      uint64_t v11 = &demangling cache variable for type metadata for LinearSupportVectorClassifierModel<Double, Int>;
    }
    uint64_t v12 = __swift_instantiateConcreteTypeFromMangledName(v11);
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v12 - 8) + 16))(v66, v8, v12);
    swift_storeEnumTagMultiPayload(v66, v73, v10);
    uint64_t v13 = a3[5];
    uint64_t v14 = *(void **)((char *)a2 + v13);
    *(void *)((char *)a1 + v13) = v14;
    uint64_t v15 = a3[6];
    *(void *)((char *)a1 + v15) = *(void *)((char *)a2 + v15);
    uint64_t v16 = *(void *)((char *)a2 + v15 + 8);
    *(void *)((char *)a1 + v15 + 8) = v16;
    uint64_t v17 = a3[7];
    uint64_t v18 = *(void *)((char *)a2 + v17);
    *(void *)((char *)a1 + v17) = v18;
    uint64_t v19 = a3[8];
    uint64_t v69 = (char *)a1 + v19;
    uint64_t v74 = (char *)a2 + v19;
    uint64_t v20 = (long long *)((char *)a2 + v19 + 8);
    uint64_t v63 = a1;
    uint64_t v21 = (_OWORD *)((char *)a1 + v19 + 8);
    *((void *)v21 - 1) = *(void *)((char *)a2 + v19);
    uint64_t v22 = *(void *)((char *)a2 + v19 + 32);
    v14;
    swift_bridgeObjectRetain(v16);
    swift_bridgeObjectRetain(v18);
    if (v22)
    {
      *((void *)v69 + 4) = v22;
      (**(void (***)(_OWORD *, long long *, uint64_t))(v22 - 8))(v21, v20, v22);
    }
    else
    {
      long long v25 = *v20;
      v21[1] = v20[1];
      *uint64_t v21 = v25;
    }
    *(_OWORD *)(v69 + 40) = *(_OWORD *)(v74 + 40);
    v69[56] = v74[56];
    uint64_t v26 = a3;
    uint64_t v27 = a3[9];
    uint64_t v24 = v63;
    uint64_t v28 = (void *)((char *)v63 + v27);
    uint64_t v29 = (char *)a2 + v27;
    uint64_t v75 = type metadata accessor for MLClassifierMetrics.Contents(0);
    unsigned int v30 = swift_getEnumCaseMultiPayload(v29, v75);
    if (v30 == 2)
    {
      uint64_t v36 = v28;
      uint64_t v37 = *(void *)v29;
      swift_errorRetain(*(void *)v29);
      *uint64_t v36 = v37;
      uint64_t v28 = v36;
      unsigned int v30 = 2;
    }
    else if (v30 == 1)
    {
      *uint64_t v28 = *(void *)v29;
      uint64_t v61 = type metadata accessor for MLClassifierMetrics.Precomputed(0);
      uint64_t v31 = *(int *)(v61 + 20);
      uint64_t v62 = (char *)v28 + v31;
      uint64_t v32 = type metadata accessor for DataFrame(0);
      uint64_t v70 = (char *)v28;
      uint64_t v33 = *(void (**)(char *, char *, uint64_t))(*(void *)(v32 - 8) + 16);
      uint64_t v34 = &v29[v31];
      uint64_t v24 = v63;
      v33(v62, v34, v32);
      uint64_t v35 = v32;
      uint64_t v26 = a3;
      v33(&v70[*(int *)(v61 + 24)], &v29[*(int *)(v61 + 24)], v35);
      uint64_t v28 = v70;
    }
    else
    {
      uint64_t v71 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Either<ClassificationMetrics<String>, ClassificationMetrics<Int>>);
      int v38 = swift_getEnumCaseMultiPayload(v29, v71);
      BOOL v39 = v38 == 1;
      uint64_t v40 = &demangling cache variable for type metadata for ClassificationMetrics<String>;
      if (v38 == 1) {
        uint64_t v40 = &demangling cache variable for type metadata for ClassificationMetrics<Int>;
      }
      uint64_t v41 = __swift_instantiateConcreteTypeFromMangledName(v40);
      (*(void (**)(void *, char *, uint64_t))(*(void *)(v41 - 8) + 16))(v28, v29, v41);
      swift_storeEnumTagMultiPayload(v28, v71, v39);
      uint64_t v26 = a3;
    }
    swift_storeEnumTagMultiPayload(v28, v75, v30);
    uint64_t v42 = v26[10];
    uint64_t v43 = (void *)((char *)v24 + v42);
    uint64_t v44 = (char *)a2 + v42;
    int v45 = swift_getEnumCaseMultiPayload((char *)a2 + v42, v75);
    if (v45 == 2)
    {
      uint64_t v50 = *(void *)v44;
      swift_errorRetain(*(void *)v44);
      *uint64_t v43 = v50;
      uint64_t v60 = 2;
    }
    else
    {
      if (v45 != 1)
      {
        uint64_t v54 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Either<ClassificationMetrics<String>, ClassificationMetrics<Int>>);
        int v55 = swift_getEnumCaseMultiPayload(v44, v54);
        BOOL v56 = v55 == 1;
        uint64_t v57 = &demangling cache variable for type metadata for ClassificationMetrics<String>;
        if (v55 == 1) {
          uint64_t v57 = &demangling cache variable for type metadata for ClassificationMetrics<Int>;
        }
        uint64_t v58 = __swift_instantiateConcreteTypeFromMangledName(v57);
        (*(void (**)(void *, char *, uint64_t))(*(void *)(v58 - 8) + 16))(v43, v44, v58);
        swift_storeEnumTagMultiPayload(v43, v54, v56);
        uint64_t v52 = v43;
        uint64_t v53 = v75;
        uint64_t v51 = 0;
        goto LABEL_23;
      }
      *uint64_t v43 = *(void *)v44;
      uint64_t v65 = type metadata accessor for MLClassifierMetrics.Precomputed(0);
      uint64_t v46 = *(int *)(v65 + 20);
      uint64_t v68 = (char *)v43 + v46;
      uint64_t v47 = type metadata accessor for DataFrame(0);
      char v48 = *(void (**)(char *, char *, uint64_t))(*(void *)(v47 - 8) + 16);
      uint64_t v49 = &v44[v46];
      uint64_t v24 = v63;
      v48(v68, v49, v47);
      v48((char *)v43 + *(int *)(v65 + 24), &v44[*(int *)(v65 + 24)], v47);
      uint64_t v60 = 1;
    }
    uint64_t v51 = v60;
    uint64_t v52 = v43;
    uint64_t v53 = v75;
LABEL_23:
    swift_storeEnumTagMultiPayload(v52, v53, v51);
    return v24;
  }
  uint64_t v23 = *a2;
  *a1 = *a2;
  uint64_t v24 = (void *)(v23 + ((v4 + 16) & ~v4));
  swift_retain();
  return v24;
}

uint64_t destroy for MLSupportVectorClassifier(void *a1, int *a2)
{
  swift_bridgeObjectRelease(a1[1]);
  swift_bridgeObjectRelease(a1[2]);
  swift_bridgeObjectRelease(a1[4]);
  int v4 = (char *)a1 + *(int *)(type metadata accessor for MLSupportVectorClassifier.Model(0) + 24);
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Either<LinearSupportVectorClassifierModel<Double, String>, LinearSupportVectorClassifierModel<Double, Int>>);
  uint64_t v6 = &demangling cache variable for type metadata for LinearSupportVectorClassifierModel<Double, String>;
  if (swift_getEnumCaseMultiPayload(v4, v5) == 1) {
    uint64_t v6 = &demangling cache variable for type metadata for LinearSupportVectorClassifierModel<Double, Int>;
  }
  uint64_t v7 = __swift_instantiateConcreteTypeFromMangledName(v6);
  (*(void (**)(char *, uint64_t))(*(void *)(v7 - 8) + 8))(v4, v7);

  swift_bridgeObjectRelease(*(void *)((char *)a1 + a2[6] + 8));
  swift_bridgeObjectRelease(*(void *)((char *)a1 + a2[7]));
  uint64_t v8 = a2[8];
  if (*(void *)((char *)a1 + v8 + 32)) {
    __swift_destroy_boxed_opaque_existential_1Tm((void *)((char *)a1 + v8 + 8));
  }
  uint64_t v9 = (char *)a1 + a2[9];
  uint64_t v10 = type metadata accessor for MLClassifierMetrics.Contents(0);
  int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload(v9, v10);
  switch(EnumCaseMultiPayload)
  {
    case 2:
      swift_errorRelease(*(void *)v9);
      break;
    case 1:
      uint64_t v30 = type metadata accessor for MLClassifierMetrics.Precomputed(0);
      uint64_t v14 = &v9[*(int *)(v30 + 20)];
      uint64_t v29 = v10;
      uint64_t v15 = type metadata accessor for DataFrame(0);
      uint64_t v16 = v14;
      uint64_t v17 = *(void (**)(char *, uint64_t))(*(void *)(v15 - 8) + 8);
      v17(v16, v15);
      uint64_t v18 = v15;
      uint64_t v10 = v29;
      v17(&v9[*(int *)(v30 + 24)], v18);
      break;
    case 0:
      uint64_t v12 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Either<ClassificationMetrics<String>, ClassificationMetrics<Int>>);
      if (swift_getEnumCaseMultiPayload(v9, v12) == 1) {
        uint64_t v13 = &demangling cache variable for type metadata for ClassificationMetrics<Int>;
      }
      else {
        uint64_t v13 = &demangling cache variable for type metadata for ClassificationMetrics<String>;
      }
      uint64_t v19 = __swift_instantiateConcreteTypeFromMangledName(v13);
      (*(void (**)(char *, uint64_t))(*(void *)(v19 - 8) + 8))(v9, v19);
      break;
  }
  uint64_t v20 = (void *)((char *)a1 + a2[10]);
  uint64_t result = swift_getEnumCaseMultiPayload(v20, v10);
  switch(result)
  {
    case 2:
      return swift_errorRelease(*v20);
    case 1:
      uint64_t v24 = type metadata accessor for MLClassifierMetrics.Precomputed(0);
      long long v25 = (char *)v20 + *(int *)(v24 + 20);
      uint64_t v26 = type metadata accessor for DataFrame(0);
      uint64_t v27 = *(void (**)(char *, uint64_t))(*(void *)(v26 - 8) + 8);
      v27(v25, v26);
      return ((uint64_t (*)(char *, uint64_t))v27)((char *)v20 + *(int *)(v24 + 24), v26);
    case 0:
      uint64_t v22 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Either<ClassificationMetrics<String>, ClassificationMetrics<Int>>);
      if (swift_getEnumCaseMultiPayload(v20, v22) == 1) {
        uint64_t v23 = &demangling cache variable for type metadata for ClassificationMetrics<Int>;
      }
      else {
        uint64_t v23 = &demangling cache variable for type metadata for ClassificationMetrics<String>;
      }
      uint64_t v28 = __swift_instantiateConcreteTypeFromMangledName(v23);
      return (*(uint64_t (**)(void *, uint64_t))(*(void *)(v28 - 8) + 8))(v20, v28);
  }
  return result;
}

void *initializeWithCopy for MLSupportVectorClassifier(void *a1, void *a2, int *a3)
{
  *a1 = *a2;
  uint64_t v4 = a2[1];
  a1[1] = v4;
  uint64_t v61 = a2[2];
  a1[2] = v61;
  a1[3] = a2[3];
  uint64_t v5 = a2[4];
  a1[4] = v5;
  uint64_t v6 = *(int *)(type metadata accessor for MLSupportVectorClassifier.Model(0) + 24);
  uint64_t v54 = (char *)a1 + v6;
  uint64_t v7 = (char *)a2 + v6;
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRetain(v61);
  swift_bridgeObjectRetain(v5);
  uint64_t v62 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Either<LinearSupportVectorClassifierModel<Double, String>, LinearSupportVectorClassifierModel<Double, Int>>);
  int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload(v7, v62);
  BOOL v9 = EnumCaseMultiPayload == 1;
  uint64_t v10 = &demangling cache variable for type metadata for LinearSupportVectorClassifierModel<Double, String>;
  if (EnumCaseMultiPayload == 1) {
    uint64_t v10 = &demangling cache variable for type metadata for LinearSupportVectorClassifierModel<Double, Int>;
  }
  uint64_t v11 = __swift_instantiateConcreteTypeFromMangledName(v10);
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v11 - 8) + 16))(v54, v7, v11);
  swift_storeEnumTagMultiPayload(v54, v62, v9);
  uint64_t v12 = a3[5];
  uint64_t v13 = *(void **)((char *)a2 + v12);
  *(void *)((char *)a1 + v12) = v13;
  uint64_t v14 = a3[6];
  *(void *)((char *)a1 + v14) = *(void *)((char *)a2 + v14);
  uint64_t v15 = *(void *)((char *)a2 + v14 + 8);
  *(void *)((char *)a1 + v14 + 8) = v15;
  uint64_t v16 = a3[7];
  uint64_t v17 = *(void *)((char *)a2 + v16);
  *(void *)((char *)a1 + v16) = v17;
  uint64_t v18 = a3[8];
  uint64_t v58 = (char *)a1 + v18;
  uint64_t v52 = (char *)a2 + v18;
  uint64_t v19 = (long long *)((char *)a2 + v18 + 8);
  int v55 = a1;
  uint64_t v20 = (_OWORD *)((char *)a1 + v18 + 8);
  *(void *)((char *)a1 + v18) = *(void *)((char *)a2 + v18);
  uint64_t v21 = *(void *)((char *)a2 + v18 + 32);
  v13;
  swift_bridgeObjectRetain(v15);
  swift_bridgeObjectRetain(v17);
  if (v21)
  {
    *((void *)v58 + 4) = v21;
    (**(void (***)(_OWORD *, long long *, uint64_t))(v21 - 8))(v20, v19, v21);
  }
  else
  {
    long long v22 = *v19;
    v20[1] = v19[1];
    *uint64_t v20 = v22;
  }
  *(_OWORD *)(v58 + 40) = *(_OWORD *)(v52 + 40);
  v58[56] = v52[56];
  uint64_t v23 = a3[9];
  uint64_t v24 = (char *)v55 + v23;
  long long v25 = (char *)a2 + v23;
  uint64_t v53 = type metadata accessor for MLClassifierMetrics.Contents(0);
  unsigned int v26 = swift_getEnumCaseMultiPayload(v25, v53);
  if (v26 == 2)
  {
    uint64_t v31 = *(void *)v25;
    swift_errorRetain(*(void *)v25);
    *(void *)uint64_t v24 = v31;
  }
  else if (v26 == 1)
  {
    *(void *)uint64_t v24 = *(void *)v25;
    uint64_t v59 = type metadata accessor for MLClassifierMetrics.Precomputed(0);
    uint64_t v27 = *(int *)(v59 + 20);
    uint64_t v51 = &v24[v27];
    uint64_t v28 = type metadata accessor for DataFrame(0);
    uint64_t v29 = &v25[v27];
    uint64_t v30 = *(void (**)(char *, char *, uint64_t))(*(void *)(v28 - 8) + 16);
    v30(v51, v29, v28);
    v30(&v24[*(int *)(v59 + 24)], &v25[*(int *)(v59 + 24)], v28);
  }
  else
  {
    uint64_t v60 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Either<ClassificationMetrics<String>, ClassificationMetrics<Int>>);
    int v32 = swift_getEnumCaseMultiPayload(v25, v60);
    BOOL v33 = v32 == 1;
    uint64_t v34 = &demangling cache variable for type metadata for ClassificationMetrics<String>;
    if (v32 == 1) {
      uint64_t v34 = &demangling cache variable for type metadata for ClassificationMetrics<Int>;
    }
    uint64_t v35 = __swift_instantiateConcreteTypeFromMangledName(v34);
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v35 - 8) + 16))(v24, v25, v35);
    swift_storeEnumTagMultiPayload(v24, v60, v33);
  }
  swift_storeEnumTagMultiPayload(v24, v53, v26);
  uint64_t v36 = a3[10];
  uint64_t v37 = (char *)v55 + v36;
  int v38 = (char *)a2 + v36;
  unsigned int v39 = swift_getEnumCaseMultiPayload((char *)a2 + v36, v53);
  if (v39 == 2)
  {
    uint64_t v44 = *(void *)v38;
    swift_errorRetain(v44);
    *(void *)uint64_t v37 = v44;
  }
  else if (v39 == 1)
  {
    *(void *)uint64_t v37 = *(void *)v38;
    uint64_t v57 = type metadata accessor for MLClassifierMetrics.Precomputed(0);
    uint64_t v40 = *(int *)(v57 + 20);
    uint64_t v64 = &v37[v40];
    uint64_t v41 = type metadata accessor for DataFrame(0);
    uint64_t v42 = &v38[v40];
    uint64_t v43 = *(void (**)(char *, char *, uint64_t))(*(void *)(v41 - 8) + 16);
    v43(v64, v42, v41);
    v43(&v37[*(int *)(v57 + 24)], &v38[*(int *)(v57 + 24)], v41);
  }
  else
  {
    uint64_t v45 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Either<ClassificationMetrics<String>, ClassificationMetrics<Int>>);
    int v46 = swift_getEnumCaseMultiPayload(v38, v45);
    uint64_t v65 = v38;
    BOOL v47 = v46 == 1;
    char v48 = &demangling cache variable for type metadata for ClassificationMetrics<String>;
    if (v46 == 1) {
      char v48 = &demangling cache variable for type metadata for ClassificationMetrics<Int>;
    }
    uint64_t v49 = __swift_instantiateConcreteTypeFromMangledName(v48);
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v49 - 8) + 16))(v37, v65, v49);
    swift_storeEnumTagMultiPayload(v37, v45, v47);
  }
  swift_storeEnumTagMultiPayload(v37, v53, v39);
  return v55;
}

void *assignWithCopy for MLSupportVectorClassifier(void *a1, void *a2, int *a3)
{
  *a1 = *a2;
  uint64_t v4 = a2[1];
  uint64_t v5 = a1[1];
  a1[1] = v4;
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRelease(v5);
  uint64_t v6 = a2[2];
  uint64_t v7 = a1[2];
  a1[2] = v6;
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRelease(v7);
  a1[3] = a2[3];
  uint64_t v8 = a2[4];
  uint64_t v9 = a1[4];
  a1[4] = v8;
  swift_bridgeObjectRetain(v8);
  swift_bridgeObjectRelease(v9);
  uint64_t v10 = type metadata accessor for MLSupportVectorClassifier.Model(0);
  if (a1 != a2)
  {
    uint64_t v11 = *(int *)(v10 + 24);
    uint64_t v12 = (char *)a2 + v11;
    uint64_t v75 = (char *)a2 + v11;
    uint64_t v13 = (uint64_t)a1 + v11;
    outlined destroy of Either<LogisticRegressionClassifier<Float, String>, FullyConnectedNetworkClassifier<Float, String>>(v13, &demangling cache variable for type metadata for Either<LinearSupportVectorClassifierModel<Double, String>, LinearSupportVectorClassifierModel<Double, Int>>);
    uint64_t v14 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Either<LinearSupportVectorClassifierModel<Double, String>, LinearSupportVectorClassifierModel<Double, Int>>);
    int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload(v12, v14);
    BOOL v16 = EnumCaseMultiPayload == 1;
    uint64_t v17 = &demangling cache variable for type metadata for LinearSupportVectorClassifierModel<Double, String>;
    if (EnumCaseMultiPayload == 1) {
      uint64_t v17 = &demangling cache variable for type metadata for LinearSupportVectorClassifierModel<Double, Int>;
    }
    uint64_t v18 = __swift_instantiateConcreteTypeFromMangledName(v17);
    (*(void (**)(uint64_t, char *, uint64_t))(*(void *)(v18 - 8) + 16))(v13, v75, v18);
    swift_storeEnumTagMultiPayload(v13, v14, v16);
  }
  uint64_t v19 = a3[5];
  uint64_t v20 = *(void **)((char *)a2 + v19);
  uint64_t v21 = *(void **)((char *)a1 + v19);
  *(void *)((char *)a1 + v19) = v20;
  v20;

  uint64_t v22 = a3[6];
  *(void *)((char *)a1 + v22) = *(void *)((char *)a2 + v22);
  uint64_t v23 = *(void *)((char *)a2 + v22 + 8);
  uint64_t v24 = *(void *)((char *)a1 + v22 + 8);
  *(void *)((char *)a1 + v22 + 8) = v23;
  swift_bridgeObjectRetain(v23);
  swift_bridgeObjectRelease(v24);
  uint64_t v25 = a3[7];
  uint64_t v26 = *(void *)((char *)a2 + v25);
  uint64_t v27 = *(void *)((char *)a1 + v25);
  *(void *)((char *)a1 + v25) = v26;
  swift_bridgeObjectRetain(v26);
  swift_bridgeObjectRelease(v27);
  uint64_t v28 = a3[8];
  uint64_t v29 = (char *)a1 + v28;
  uint64_t v30 = (char *)a2 + v28;
  uint64_t v31 = (uint64_t)a2 + v28 + 8;
  int v32 = (_OWORD *)((char *)a1 + v28 + 8);
  *(void *)((char *)a1 + v28) = *(void *)((char *)a2 + v28);
  uint64_t v33 = *(void *)((char *)a2 + v28 + 32);
  if (*(void *)((char *)a1 + v28 + 32))
  {
    if (v33)
    {
      __swift_assign_boxed_opaque_existential_0((void *)((char *)a1 + v28 + 8), (uint64_t *)v31);
      goto LABEL_12;
    }
    __swift_destroy_boxed_opaque_existential_1Tm((void *)((char *)a1 + v28 + 8));
  }
  else if (v33)
  {
    *((void *)v29 + 4) = v33;
    (**(void (***)(_OWORD *, uint64_t))(v33 - 8))(v32, v31);
    goto LABEL_12;
  }
  long long v34 = *(_OWORD *)v31;
  v32[1] = *(_OWORD *)(v31 + 16);
  _OWORD *v32 = v34;
LABEL_12:
  *((void *)v29 + 5) = *((void *)v30 + 5);
  *((void *)v29 + 6) = *((void *)v30 + 6);
  v29[56] = v30[56];
  uint64_t v35 = a2;
  if (a1 != a2)
  {
    uint64_t v36 = a3[9];
    uint64_t v37 = (void *)((char *)a1 + v36);
    int v38 = (void *)((char *)a2 + v36);
    outlined destroy of MLActivityClassifier.ModelParameters((uint64_t)v37, type metadata accessor for MLClassifierMetrics.Contents);
    uint64_t v39 = type metadata accessor for MLClassifierMetrics.Contents(0);
    unsigned int v40 = swift_getEnumCaseMultiPayload(v38, v39);
    unsigned int v65 = v40;
    if (v40 == 2)
    {
      uint64_t v45 = *v38;
      swift_errorRetain(v45);
      uint64_t v44 = 2;
      uint64_t *v37 = v45;
    }
    else if (v40 == 1)
    {
      uint64_t *v37 = *v38;
      uint64_t v70 = type metadata accessor for MLClassifierMetrics.Precomputed(0);
      uint64_t v67 = v39;
      uint64_t v41 = *(int *)(v70 + 20);
      uint64_t v63 = (char *)v37 + v41;
      uint64_t v64 = type metadata accessor for DataFrame(0);
      uint64_t v42 = *(void (**)(char *, char *, uint64_t))(*(void *)(v64 - 8) + 16);
      uint64_t v43 = (char *)v38 + v41;
      uint64_t v39 = v67;
      v42(v63, v43, v64);
      v42((char *)v37 + *(int *)(v70 + 24), (char *)v38 + *(int *)(v70 + 24), v64);
      uint64_t v44 = v65;
      uint64_t v35 = a2;
    }
    else
    {
      uint64_t v68 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Either<ClassificationMetrics<String>, ClassificationMetrics<Int>>);
      int v46 = swift_getEnumCaseMultiPayload(v38, v68);
      BOOL v71 = v46 == 1;
      BOOL v47 = &demangling cache variable for type metadata for ClassificationMetrics<String>;
      if (v46 == 1) {
        BOOL v47 = &demangling cache variable for type metadata for ClassificationMetrics<Int>;
      }
      uint64_t v48 = __swift_instantiateConcreteTypeFromMangledName(v47);
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(void *)(v48 - 8) + 16))(v37, v38, v48);
      swift_storeEnumTagMultiPayload(v37, v68, v71);
      uint64_t v44 = v65;
    }
    swift_storeEnumTagMultiPayload(v37, v39, v44);
    uint64_t v49 = a3[10];
    uint64_t v50 = (void *)((char *)a1 + v49);
    uint64_t v51 = (void *)((char *)v35 + v49);
    outlined destroy of MLActivityClassifier.ModelParameters((uint64_t)a1 + v49, type metadata accessor for MLClassifierMetrics.Contents);
    unsigned int v52 = swift_getEnumCaseMultiPayload(v51, v39);
    if (v52 == 2)
    {
      uint64_t v57 = *v51;
      swift_errorRetain(v57);
      uint64_t *v50 = v57;
    }
    else
    {
      unsigned int v74 = v52;
      if (v52 == 1)
      {
        uint64_t *v50 = *v51;
        uint64_t v66 = type metadata accessor for MLClassifierMetrics.Precomputed(0);
        uint64_t v53 = *(int *)(v66 + 20);
        uint64_t v72 = (char *)v50 + v53;
        uint64_t v69 = v39;
        uint64_t v54 = type metadata accessor for DataFrame(0);
        uint64_t v77 = *(void (**)(char *, char *, uint64_t))(*(void *)(v54 - 8) + 16);
        int v55 = (char *)v51 + v53;
        unsigned int v52 = 1;
        v77(v72, v55, v54);
        uint64_t v56 = v54;
        uint64_t v39 = v69;
        v77((char *)v50 + *(int *)(v66 + 24), (char *)v51 + *(int *)(v66 + 24), v56);
      }
      else
      {
        uint64_t v78 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Either<ClassificationMetrics<String>, ClassificationMetrics<Int>>);
        int v58 = swift_getEnumCaseMultiPayload(v51, v78);
        BOOL v59 = v58 == 1;
        uint64_t v60 = &demangling cache variable for type metadata for ClassificationMetrics<String>;
        if (v58 == 1) {
          uint64_t v60 = &demangling cache variable for type metadata for ClassificationMetrics<Int>;
        }
        uint64_t v61 = __swift_instantiateConcreteTypeFromMangledName(v60);
        (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(void *)(v61 - 8) + 16))(v50, v51, v61);
        swift_storeEnumTagMultiPayload(v50, v78, v59);
        unsigned int v52 = v74;
      }
    }
    swift_storeEnumTagMultiPayload(v50, v39, v52);
  }
  return a1;
}

uint64_t initializeWithTake for MLSupportVectorClassifier(uint64_t a1, uint64_t a2, int *a3)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  uint64_t v4 = *(int *)(type metadata accessor for MLSupportVectorClassifier.Model(0) + 24);
  uint64_t v5 = a1 + v4;
  uint64_t v6 = a2 + v4;
  uint64_t v58 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Either<LinearSupportVectorClassifierModel<Double, String>, LinearSupportVectorClassifierModel<Double, Int>>);
  int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload(v6, v58);
  BOOL v8 = EnumCaseMultiPayload == 1;
  uint64_t v9 = &demangling cache variable for type metadata for LinearSupportVectorClassifierModel<Double, String>;
  if (EnumCaseMultiPayload == 1) {
    uint64_t v9 = &demangling cache variable for type metadata for LinearSupportVectorClassifierModel<Double, Int>;
  }
  uint64_t v10 = __swift_instantiateConcreteTypeFromMangledName(v9);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v10 - 8) + 32))(v5, v6, v10);
  uint64_t v11 = v5;
  swift_storeEnumTagMultiPayload(v11, v58, v8);
  *(void *)(a1 + a3[5]) = *(void *)(a2 + a3[5]);
  *(_OWORD *)(a1 + a3[6]) = *(_OWORD *)(a2 + a3[6]);
  *(void *)(a1 + a3[7]) = *(void *)(a2 + a3[7]);
  uint64_t v13 = a3[8];
  long long v14 = *(_OWORD *)(a2 + v13);
  long long v15 = *(_OWORD *)(a2 + v13 + 16);
  long long v16 = *(_OWORD *)(a2 + v13 + 32);
  *(_OWORD *)(a1 + v13 + 41) = *(_OWORD *)(a2 + v13 + 41);
  *(_OWORD *)(a1 + v13 + 32) = v16;
  *(_OWORD *)(a1 + v13 + 16) = v15;
  *(_OWORD *)(a1 + v13) = v14;
  uint64_t v17 = a3[9];
  uint64_t v59 = a1;
  uint64_t v18 = (char *)(a1 + v17);
  uint64_t v19 = (char *)(a2 + v17);
  uint64_t v20 = type metadata accessor for MLClassifierMetrics.Contents(0);
  int v21 = swift_getEnumCaseMultiPayload(v19, v20);
  uint64_t v60 = v20;
  if (v21 == 1)
  {
    *(void *)uint64_t v18 = *(void *)v19;
    uint64_t v55 = type metadata accessor for MLClassifierMetrics.Precomputed(0);
    uint64_t v31 = *(int *)(v55 + 20);
    uint64_t v54 = &v18[v31];
    uint64_t v32 = type metadata accessor for DataFrame(0);
    uint64_t v33 = &v19[v31];
    long long v34 = *(void (**)(char *, char *, uint64_t))(*(void *)(v32 - 8) + 32);
    v34(v54, v33, v32);
    uint64_t v35 = v32;
    uint64_t v20 = v60;
    v34(&v18[*(int *)(v55 + 24)], &v19[*(int *)(v55 + 24)], v35);
    uint64_t v30 = 1;
    uint64_t v28 = v18;
    uint64_t v29 = v60;
LABEL_9:
    swift_storeEnumTagMultiPayload(v28, v29, v30);
    goto LABEL_11;
  }
  if (!v21)
  {
    uint64_t v22 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Either<ClassificationMetrics<String>, ClassificationMetrics<Int>>);
    int v23 = swift_getEnumCaseMultiPayload(v19, v22);
    BOOL v24 = v23 == 1;
    uint64_t v25 = &demangling cache variable for type metadata for ClassificationMetrics<String>;
    if (v23 == 1) {
      uint64_t v25 = &demangling cache variable for type metadata for ClassificationMetrics<Int>;
    }
    uint64_t v26 = __swift_instantiateConcreteTypeFromMangledName(v25);
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v26 - 8) + 32))(v18, v19, v26);
    BOOL v27 = v24;
    uint64_t v20 = v60;
    swift_storeEnumTagMultiPayload(v18, v22, v27);
    uint64_t v28 = v18;
    uint64_t v29 = v60;
    uint64_t v30 = 0;
    goto LABEL_9;
  }
  memcpy(v18, v19, *(void *)(*(void *)(v20 - 8) + 64));
LABEL_11:
  uint64_t v36 = a3[10];
  uint64_t v37 = v59;
  int v38 = (char *)(v36 + v59);
  uint64_t v39 = (char *)(v36 + a2);
  int v40 = swift_getEnumCaseMultiPayload(v39, v20);
  if (v40 == 1)
  {
    *(void *)int v38 = *(void *)v39;
    uint64_t v57 = type metadata accessor for MLClassifierMetrics.Precomputed(0);
    uint64_t v49 = *(int *)(v57 + 20);
    uint64_t v50 = type metadata accessor for DataFrame(0);
    uint64_t v51 = *(void (**)(char *, char *, uint64_t))(*(void *)(v50 - 8) + 32);
    v51(&v38[v49], &v39[v49], v50);
    uint64_t v52 = v50;
    uint64_t v37 = v59;
    v51(&v38[*(int *)(v57 + 24)], &v39[*(int *)(v57 + 24)], v52);
    uint64_t v48 = 1;
    int v46 = v38;
    uint64_t v47 = v60;
  }
  else
  {
    if (v40)
    {
      memcpy(v38, v39, *(void *)(*(void *)(v20 - 8) + 64));
      return v37;
    }
    uint64_t v41 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Either<ClassificationMetrics<String>, ClassificationMetrics<Int>>);
    int v42 = swift_getEnumCaseMultiPayload(v39, v41);
    BOOL v43 = v42 == 1;
    uint64_t v44 = &demangling cache variable for type metadata for ClassificationMetrics<String>;
    if (v42 == 1) {
      uint64_t v44 = &demangling cache variable for type metadata for ClassificationMetrics<Int>;
    }
    uint64_t v45 = __swift_instantiateConcreteTypeFromMangledName(v44);
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v45 - 8) + 32))(v38, v39, v45);
    swift_storeEnumTagMultiPayload(v38, v41, v43);
    int v46 = v38;
    uint64_t v47 = v60;
    uint64_t v48 = 0;
  }
  swift_storeEnumTagMultiPayload(v46, v47, v48);
  return v37;
}

void *assignWithTake for MLSupportVectorClassifier(void *a1, void *a2, int *a3)
{
  *a1 = *a2;
  uint64_t v4 = a1[1];
  a1[1] = a2[1];
  swift_bridgeObjectRelease(v4);
  uint64_t v5 = a1[2];
  a1[2] = a2[2];
  swift_bridgeObjectRelease(v5);
  a1[3] = a2[3];
  uint64_t v6 = a1[4];
  a1[4] = a2[4];
  swift_bridgeObjectRelease(v6);
  uint64_t v7 = type metadata accessor for MLSupportVectorClassifier.Model(0);
  if (a1 != a2)
  {
    uint64_t v8 = *(int *)(v7 + 24);
    uint64_t v9 = (char *)a2 + v8;
    uint64_t v70 = (char *)a2 + v8;
    uint64_t v10 = (uint64_t)a1 + v8;
    outlined destroy of Either<LogisticRegressionClassifier<Float, String>, FullyConnectedNetworkClassifier<Float, String>>(v10, &demangling cache variable for type metadata for Either<LinearSupportVectorClassifierModel<Double, String>, LinearSupportVectorClassifierModel<Double, Int>>);
    uint64_t v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Either<LinearSupportVectorClassifierModel<Double, String>, LinearSupportVectorClassifierModel<Double, Int>>);
    int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload(v9, v11);
    BOOL v13 = EnumCaseMultiPayload == 1;
    long long v14 = &demangling cache variable for type metadata for LinearSupportVectorClassifierModel<Double, String>;
    if (EnumCaseMultiPayload == 1) {
      long long v14 = &demangling cache variable for type metadata for LinearSupportVectorClassifierModel<Double, Int>;
    }
    uint64_t v15 = __swift_instantiateConcreteTypeFromMangledName(v14);
    (*(void (**)(uint64_t, char *, uint64_t))(*(void *)(v15 - 8) + 32))(v10, v70, v15);
    swift_storeEnumTagMultiPayload(v10, v11, v13);
  }
  uint64_t v16 = a3[5];
  uint64_t v17 = *(void **)((char *)a1 + v16);
  *(void *)((char *)a1 + v16) = *(void *)((char *)a2 + v16);

  uint64_t v18 = a3[6];
  *(void *)((char *)a1 + v18) = *(void *)((char *)a2 + v18);
  uint64_t v19 = *(void *)((char *)a1 + v18 + 8);
  *(void *)((char *)a1 + v18 + 8) = *(void *)((char *)a2 + v18 + 8);
  swift_bridgeObjectRelease(v19);
  uint64_t v20 = a3[7];
  uint64_t v21 = *(void *)((char *)a1 + v20);
  *(void *)((char *)a1 + v20) = *(void *)((char *)a2 + v20);
  swift_bridgeObjectRelease(v21);
  uint64_t v22 = a3[8];
  int v23 = (char *)a1 + v22;
  BOOL v24 = (char *)a2 + v22;
  uint64_t v25 = (long long *)((char *)a2 + v22 + 8);
  uint64_t v26 = (_OWORD *)((char *)a1 + v22 + 8);
  *(void *)((char *)a1 + v22) = *(void *)((char *)a2 + v22);
  if (*(void *)((char *)a1 + v22 + 32)) {
    __swift_destroy_boxed_opaque_existential_1Tm((void *)((char *)a1 + v22 + 8));
  }
  long long v27 = *v25;
  v26[1] = v25[1];
  *uint64_t v26 = v27;
  *(_OWORD *)(v23 + 40) = *(_OWORD *)(v24 + 40);
  v23[56] = v24[56];
  uint64_t v28 = a2;
  if (a1 == a2) {
    return a1;
  }
  uint64_t v29 = a3[9];
  uint64_t v30 = (void *)((char *)a1 + v29);
  uint64_t v31 = (void *)((char *)a2 + v29);
  outlined destroy of MLActivityClassifier.ModelParameters((uint64_t)v30, type metadata accessor for MLClassifierMetrics.Contents);
  uint64_t v69 = type metadata accessor for MLClassifierMetrics.Contents(0);
  int v32 = swift_getEnumCaseMultiPayload(v31, v69);
  if (v32 == 1)
  {
    *uint64_t v30 = *v31;
    uint64_t v66 = type metadata accessor for MLClassifierMetrics.Precomputed(0);
    uint64_t v41 = *(int *)(v66 + 20);
    uint64_t v64 = (char *)v30 + v41;
    uint64_t v42 = type metadata accessor for DataFrame(0);
    BOOL v43 = *(void (**)(char *, char *))(*(void *)(v42 - 8) + 32);
    uint64_t v44 = (char *)v31 + v41;
    uint64_t v45 = v42;
    v43(v64, v44);
    ((void (*)(char *, char *, uint64_t))v43)((char *)v30 + *(int *)(v66 + 24), (char *)v31 + *(int *)(v66 + 24), v45);
    uint64_t v28 = a2;
    uint64_t v40 = 1;
    uint64_t v37 = v30;
    uint64_t v38 = v69;
    uint64_t v39 = v69;
  }
  else
  {
    if (v32)
    {
      int v46 = v31;
      uint64_t v38 = v69;
      memcpy(v30, v46, *(void *)(*(void *)(v69 - 8) + 64));
      goto LABEL_16;
    }
    uint64_t v65 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Either<ClassificationMetrics<String>, ClassificationMetrics<Int>>);
    int v33 = swift_getEnumCaseMultiPayload(v31, v65);
    BOOL v34 = v33 == 1;
    uint64_t v35 = &demangling cache variable for type metadata for ClassificationMetrics<String>;
    if (v33 == 1) {
      uint64_t v35 = &demangling cache variable for type metadata for ClassificationMetrics<Int>;
    }
    uint64_t v36 = __swift_instantiateConcreteTypeFromMangledName(v35);
    (*(void (**)(void *, void *, uint64_t))(*(void *)(v36 - 8) + 32))(v30, v31, v36);
    swift_storeEnumTagMultiPayload(v30, v65, v34);
    uint64_t v37 = v30;
    uint64_t v38 = v69;
    uint64_t v39 = v69;
    uint64_t v40 = 0;
  }
  swift_storeEnumTagMultiPayload(v37, v39, v40);
LABEL_16:
  uint64_t v47 = a3[10];
  uint64_t v48 = (char *)a1 + v47;
  uint64_t v49 = (char *)v28 + v47;
  outlined destroy of MLActivityClassifier.ModelParameters((uint64_t)a1 + v47, type metadata accessor for MLClassifierMetrics.Contents);
  int v50 = swift_getEnumCaseMultiPayload(v49, v38);
  if (v50 == 1)
  {
    *(void *)uint64_t v48 = *(void *)v49;
    uint64_t v68 = type metadata accessor for MLClassifierMetrics.Precomputed(0);
    uint64_t v59 = *(int *)(v68 + 20);
    uint64_t v72 = &v48[v59];
    uint64_t v60 = type metadata accessor for DataFrame(0);
    uint64_t v61 = &v49[v59];
    uint64_t v62 = *(void (**)(char *, char *, uint64_t))(*(void *)(v60 - 8) + 32);
    v62(v72, v61, v60);
    v62(&v48[*(int *)(v68 + 24)], &v49[*(int *)(v68 + 24)], v60);
    uint64_t v58 = 1;
    uint64_t v56 = v48;
    uint64_t v57 = v69;
  }
  else
  {
    if (v50)
    {
      memcpy(v48, v49, *(void *)(*(void *)(v38 - 8) + 64));
      return a1;
    }
    uint64_t v51 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Either<ClassificationMetrics<String>, ClassificationMetrics<Int>>);
    int v52 = swift_getEnumCaseMultiPayload(v49, v51);
    BOOL v53 = v52 == 1;
    uint64_t v54 = &demangling cache variable for type metadata for ClassificationMetrics<String>;
    if (v52 == 1) {
      uint64_t v54 = &demangling cache variable for type metadata for ClassificationMetrics<Int>;
    }
    uint64_t v55 = __swift_instantiateConcreteTypeFromMangledName(v54);
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v55 - 8) + 32))(v48, v49, v55);
    swift_storeEnumTagMultiPayload(v48, v51, v53);
    uint64_t v56 = v48;
    uint64_t v57 = v69;
    uint64_t v58 = 0;
  }
  swift_storeEnumTagMultiPayload(v56, v57, v58);
  return a1;
}

uint64_t getEnumTagSinglePayload for MLSupportVectorClassifier(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_222DF7);
}

uint64_t sub_222DF7(uint64_t a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4 = a1;
  uint64_t v5 = type metadata accessor for MLSupportVectorClassifier.Model(0);
  if (*(_DWORD *)(*(void *)(v5 - 8) + 84) == a2) {
    return __swift_getEnumTagSinglePayload(v4, a2, v5);
  }
  if (a2 != 0x7FFFFFFF)
  {
    uint64_t v5 = type metadata accessor for MLClassifierMetrics(0);
    uint64_t v4 = *(int *)(a3 + 36) + a1;
    return __swift_getEnumTagSinglePayload(v4, a2, v5);
  }
  uint64_t result = 0;
  if ((*(void *)(a1 + *(int *)(a3 + 20)) & 0xFFFFFFFF00000001) == 0) {
    return (*(void *)(a1 + *(int *)(a3 + 20)) >> 1) + 1;
  }
  return result;
}

uint64_t storeEnumTagSinglePayload for MLSupportVectorClassifier(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_222E84);
}

uint64_t sub_222E84(uint64_t a1, unsigned int a2, int a3, uint64_t a4)
{
  uint64_t v6 = a1;
  uint64_t v7 = type metadata accessor for MLSupportVectorClassifier.Model(0);
  if (*(_DWORD *)(*(void *)(v7 - 8) + 84) != a3)
  {
    if (a3 == 0x7FFFFFFF)
    {
      uint64_t result = *(int *)(a4 + 20);
      *(void *)(a1 + result) = 2 * (a2 - 1);
      return result;
    }
    uint64_t v7 = type metadata accessor for MLClassifierMetrics(0);
    uint64_t v6 = *(int *)(a4 + 36) + a1;
  }
  return __swift_storeEnumTagSinglePayload(v6, a2, a2, v7);
}

uint64_t type metadata completion function for MLSupportVectorClassifier(uint64_t a1)
{
  uint64_t result = type metadata accessor for MLSupportVectorClassifier.Model(319);
  if (v2 <= 0x3F)
  {
    v4[0] = *(void *)(result - 8) + 64;
    v4[1] = (char *)&value witness table for Builtin.UnknownObject + 64;
    v4[2] = &unk_34F540;
    uint64_t v4[3] = (char *)&value witness table for Builtin.BridgeObject + 64;
    _OWORD v4[4] = &unk_34F558;
    uint64_t result = type metadata accessor for MLClassifierMetrics.Contents(319);
    if (v3 <= 0x3F)
    {
      uint64_t v5 = *(void *)(result - 8) + 64;
      uint64_t v6 = v5;
      swift_initStructMetadata(a1, 256, 7, v4, a1 + 16);
      return 0;
    }
  }
  return result;
}

uint64_t protocol witness for TabularClassificationTask.validationMetrics.getter in conformance MLSupportVectorClassifier()
{
  return MLSupportVectorClassifier.validationMetrics.getter();
}

unint64_t MLImageClassifier.ModelParameters.ClassifierType.description.getter()
{
  unint64_t result = 0xD000000000000015;
  if (!*v0) {
    return 0xD000000000000012;
  }
  return result;
}

BOOL static MLImageClassifier.ModelParameters.ClassifierType.== infix(_:_:)(uint64_t *a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5 = *a1;
  uint64_t v6 = *a2;
  if (v5)
  {
    if (v6) {
      return specialized static Array<A>.== infix(_:_:)(v5, v6);
    }
    return 0;
  }
  if (v6) {
    return 0;
  }
  swift_bridgeObjectRelease_n(0, 2, a3, a4, a5);
  return 1;
}

void MLImageClassifier.ModelParameters.ClassifierType.hash(into:)(uint64_t a1)
{
  uint64_t v2 = *v1;
  if (*v1)
  {
    Hasher._combine(_:)(1uLL);
    specialized Array<A>.hash(into:)(a1, v2);
  }
  else
  {
    Hasher._combine(_:)(0);
  }
}

Swift::Int MLImageClassifier.ModelParameters.ClassifierType.hashValue.getter()
{
  uint64_t v1 = *v0;
  Hasher.init(_seed:)(0);
  if (v1)
  {
    Hasher._combine(_:)(1uLL);
    specialized Array<A>.hash(into:)((uint64_t)v3, v1);
  }
  else
  {
    Hasher._combine(_:)(0);
  }
  return Hasher._finalize()();
}

BOOL protocol witness for static Equatable.== infix(_:_:) in conformance MLImageClassifier.ModelParameters.ClassifierType(uint64_t *a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return static MLImageClassifier.ModelParameters.ClassifierType.== infix(_:_:)(a1, a2, a3, a4, a5);
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance MLImageClassifier.ModelParameters.ClassifierType()
{
  return MLImageClassifier.ModelParameters.ClassifierType.hashValue.getter();
}

void protocol witness for Hashable.hash(into:) in conformance MLImageClassifier.ModelParameters.ClassifierType(uint64_t a1)
{
}

unint64_t protocol witness for CustomStringConvertible.description.getter in conformance MLImageClassifier.ModelParameters.ClassifierType()
{
  return MLImageClassifier.ModelParameters.ClassifierType.description.getter();
}

Swift::Void __swiftcall __spoils<cf,zf,sf,of,pf,rax,rdx,rcx,rdi,rsi,r8,r9,r10,r11,r12,xmm0,xmm1,xmm2,xmm3,xmm4,xmm5,xmm6,xmm7> MLImageClassifier.ModelParameters.ClassifierType.validate()()
{
  uint64_t v1 = *v0;
  if (*v0)
  {
    uint64_t v2 = *(void *)(v1 + 16);
    if (v2)
    {
      if (*(uint64_t *)(v1 + 32) > 0)
      {
        if (v2 == 1) {
          return;
        }
        for (uint64_t i = 5; ; ++i)
        {
          uint64_t v4 = i - 4 + 1;
          if (__OFADD__(1, i - 4)) {
            BUG();
          }
          if (*(uint64_t *)(v1 + 8 * i) <= 0) {
            break;
          }
          if (v4 == v2) {
            return;
          }
        }
      }
      uint64_t v5 = lazy protocol witness table accessor for type MLCreateError and conformance MLCreateError();
      swift_allocError(&type metadata for MLCreateError, v5, 0, 0);
      *(void *)uint64_t v6 = 0xD000000000000033;
      uint64_t v10 = "ssifier\n\nParameters\n";
    }
    else
    {
      uint64_t v5 = lazy protocol witness table accessor for type MLCreateError and conformance MLCreateError();
      swift_allocError(&type metadata for MLCreateError, v5, 0, 0);
      *(void *)uint64_t v6 = 0xD000000000000029;
      uint64_t v10 = " positive integers.";
    }
    *(void *)(v6 + 8) = (unint64_t)v10 | 0x8000000000000000;
    *(_OWORD *)(v6 + 16) = 0;
    *(_OWORD *)(v6 + 32) = 0;
    *(unsigned char *)(v6 + 48) = 0;
    swift_willThrow(&type metadata for MLCreateError, v5, v6, v7, v8, v9);
  }
}

uint64_t base witness table accessor for Equatable in MLImageClassifier.ModelParameters.ClassifierType()
{
  return lazy protocol witness table accessor for type MLImageClassifier.ModelParameters.ClassifierType and conformance MLImageClassifier.ModelParameters.ClassifierType();
}

uint64_t lazy protocol witness table accessor for type MLImageClassifier.ModelParameters.ClassifierType and conformance MLImageClassifier.ModelParameters.ClassifierType()
{
  uint64_t result = lazy protocol witness table cache variable for type MLImageClassifier.ModelParameters.ClassifierType and conformance MLImageClassifier.ModelParameters.ClassifierType;
  if (!lazy protocol witness table cache variable for type MLImageClassifier.ModelParameters.ClassifierType and conformance MLImageClassifier.ModelParameters.ClassifierType)
  {
    uint64_t result = swift_getWitnessTable(&protocol conformance descriptor for MLImageClassifier.ModelParameters.ClassifierType, &type metadata for MLImageClassifier.ModelParameters.ClassifierType);
    lazy protocol witness table cache variable for type MLImageClassifier.ModelParameters.ClassifierType and conformance MLImageClassifier.ModelParameters.ClassifierType = result;
  }
  return result;
}

ValueMetadata *type metadata accessor for MLImageClassifier.ModelParameters.ClassifierType()
{
  return &type metadata for MLImageClassifier.ModelParameters.ClassifierType;
}

uint64_t MLDataTable.stratifiedSplit(proportions:on:seed:)(uint64_t a1, uint64_t a2, void *a3, uint64_t a4, double a5)
{
  BOOL v13 = a3;
  uint64_t v15 = v5;
  uint64_t v14 = a2;
  uint64_t v16 = a1;
  if (a4 < 0)
  {
    _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, "Negative value is not representable", 35, 2, "Swift/Integers.swift", 20, 2, 3451, 1);
    BUG();
  }
  uint64_t v8 = *(void **)v6;
  unsigned __int8 v9 = *(unsigned char *)(v6 + 8);
  uint64_t v10 = type metadata accessor for MersenneTwisterGenerator();
  swift_allocObject(v10, 136, 7);
  uint64_t v12 = MersenneTwisterGenerator.init(seed:)(a4);
  specialized stratifiedSplitGenerator<A>(proportions:generator:dataTable:on:)(v16, (uint64_t)&v12, v8, v9, v14, v13, a5);
  return swift_release();
}

uint64_t MLDataTable.randomSplitBySequence(strategy:by:on:)(void *a1, uint64_t *a2, uint64_t a3, uint64_t a4, void *a5, uint64_t a6, void *a7)
{
  uint64_t v26 = a6;
  int v33 = a2;
  BOOL v34 = a1;
  double v37 = *(double *)a3;
  uint64_t v25 = *(void *)(a3 + 8);
  char v38 = *(unsigned char *)(a3 + 16);
  char v40 = *(unsigned char *)(a3 + 17);
  uint64_t v10 = *(void *)v7;
  int v11 = *(_DWORD *)(v7 + 8);
  char v39 = v11 & 1;
  outlined copy of Result<_DataTable, Error>(v10, v11);
  uint64_t v28 = a4;
  v12._uint64_t countAndFlagsBits = a4;
  uint64_t v27 = (uint64_t)a5;
  v12._char object = a5;
  MLDataTable.subscript.getter(v12);
  uint64_t v35 = v10;
  int v36 = v11;
  outlined consume of Result<_DataTable, Error>(v10, v11);
  uint64_t v31 = v29;
  char v32 = v30;
  MLUntypedColumn.dropDuplicates()();
  outlined consume of Result<_DataTable, Error>(v29, v30);
  if (v24)
  {
    outlined consume of Result<_DataTable, Error>(v23, 1);
    if (v40) {
      goto LABEL_10;
    }
    goto LABEL_7;
  }
  swift_retain();
  uint64_t v13 = CMLColumn.size.getter();
  outlined consume of Result<_DataTable, Error>(v23, 0);
  outlined consume of Result<_DataTable, Error>(v23, 0);
  if ((v40 & 1) == 0)
  {
LABEL_7:
    uint64_t v14 = 1;
    if ((v38 & 1) == 0) {
      uint64_t v14 = v25;
    }
    if (v37 == 0.0) {
      goto LABEL_10;
    }
    goto LABEL_11;
  }
  if (v13 < 50)
  {
LABEL_10:
    uint64_t v15 = v34;
    void *v34 = 0;
    *((unsigned char *)v15 + 8) = -1;
    uint64_t v16 = v33;
    uint64_t v17 = v35;
    *int v33 = v35;
    *((unsigned char *)v16 + 8) = v39;
    return outlined copy of Result<_DataTable, Error>(v17, v36);
  }
  double v37 = dbl_348EB0[(unint64_t)v13 < 0xC8];
  uint64_t v14 = 1;
LABEL_11:
  uint64_t v31 = v35;
  char v32 = v39;
  MLDataTable.randomSplitBySequence(proportion:by:on:seed:)(&v23, &v29, v28, v27, v26, a7, v37, v14);
  char v19 = v24;
  uint64_t v20 = v29;
  char v21 = v30;
  uint64_t v22 = v34;
  void *v34 = v23;
  *((unsigned char *)v22 + 8) = v19;
  uint64_t result = (uint64_t)v33;
  *int v33 = v20;
  *(unsigned char *)(result + 8) = v21;
  return result;
}

uint64_t MLDataTable.randomSplit(strategy:)(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v27 = a2;
  uint64_t v28 = a1;
  double v25 = *(double *)a3;
  uint64_t v26 = *(void *)(a3 + 8);
  char v4 = *(unsigned char *)(a3 + 16);
  char v5 = *(unsigned char *)(a3 + 17);
  uint64_t v6 = *(void *)v3;
  char v7 = *(unsigned char *)(v3 + 8);
  uint64_t v23 = v6;
  char v24 = v7;
  outlined copy of Result<_DataTable, Error>(v6, v7);
  Swift::Int v8 = MLDataTable.size.getter();
  uint64_t v9 = specialized RandomAccessCollection<>.distance(from:to:)(0, v8);
  outlined consume of Result<_DataTable, Error>(v6, v7);
  if (v5 != 1)
  {
    uint64_t v10 = 1;
    if ((v4 & 1) == 0) {
      uint64_t v10 = v26;
    }
    if (v25 != 0.0) {
      goto LABEL_8;
    }
LABEL_7:
    int v11 = v28;
    *uint64_t v28 = 0;
    *((unsigned char *)v11 + 8) = -1;
    Swift::String v12 = v27;
    *uint64_t v27 = v6;
    *((unsigned char *)v12 + 8) = v7;
    return outlined copy of Result<_DataTable, Error>(v6, v7);
  }
  if (v9 < 50) {
    goto LABEL_7;
  }
  uint64_t v10 = 1;
LABEL_8:
  uint64_t v21 = v6;
  char v22 = v7;
  MLDataTable.randomSplit(by:seed:)((uint64_t)&v23, (uint64_t)&v19, v10);
  uint64_t v14 = v23;
  uint64_t v15 = v19;
  char v16 = v20;
  char v17 = v24;
  outlined copy of Result<_DataTable, Error>(v23, v24);
  outlined copy of Result<_DataTable, Error>(v15, v16);
  outlined consume of Result<_DataTable, Error>(v15, v16);
  outlined consume of Result<_DataTable, Error>(v14, v17);
  uint64_t v18 = v28;
  *uint64_t v28 = v14;
  *((unsigned char *)v18 + 8) = v17;
  uint64_t result = (uint64_t)v27;
  *uint64_t v27 = v15;
  *(unsigned char *)(result + 8) = v16;
  return result;
}

uint64_t *specialized stratifiedSplitBySequenceGenerator<A>(proportions:generator:dataTable:by:on:)(uint64_t a1, uint64_t a2, uint64_t a3, int a4, uint64_t a5, void *a6, double a7, Swift::String a8)
{
  uint64_t v145 = a2;
  v157._uint64_t countAndFlagsBits = v9;
  uint64_t v143 = a1;
  LOBYTE(a4) = a4 & 1;
  LODWORD(v156) = a4;
  uint64_t v160 = a6;
  uint64_t v139 = v8;
  uint64_t v147 = a3;
  if ((_BYTE)a4)
  {
    outlined copy of Result<_DataTable, Error>(a3, 1);
    uint64_t v12 = tc_v1_flex_list_create(0);
    if (!v12) {
      BUG();
    }
    uint64_t v13 = v12;
    uint64_t v14 = type metadata accessor for CMLSequence();
    uint64_t v15 = swift_allocObject(v14, 25, 7);
    *(void *)(v15 + 16) = v13;
    *(unsigned char *)(v15 + 24) = 1;
    outlined consume of Result<_DataTable, Error>(a3, 1);
    char v16 = v160;
  }
  else
  {
    char v16 = a6;
    outlined copy of Result<_DataTable, Error>(a3, 0);
    _DataTable.columnNames.getter(a3);
    outlined consume of Result<_DataTable, Error>(a3, 0);
    uint64_t v15 = v151;
  }
  v161._uint64_t countAndFlagsBits = a5;
  v161._char object = v16;
  uint64_t v18 = alloca(24);
  uint64_t v19 = alloca(32);
  uint64_t v135 = &v161;
  uint64_t countAndFlagsBits = v157._countAndFlagsBits;
  char v21 = specialized Sequence.contains(where:)((uint64_t (*)(unint64_t *))partial apply for specialized closure #1 in Sequence<>.contains(_:), (uint64_t)v134, v15);
  v157._uint64_t countAndFlagsBits = countAndFlagsBits;
  swift_release();
  if ((v21 & 1) == 0)
  {
    v161._uint64_t countAndFlagsBits = 0x2064696C61766E49;
    v161._char object = (void *)0xE800000000000000;
    v27._uint64_t countAndFlagsBits = a5;
    v27._char object = v160;
LABEL_27:
    String.append(_:)(v27);
    v60._uint64_t countAndFlagsBits = 46;
    v60._char object = (void *)0xE100000000000000;
    String.append(_:)(v60);
    Swift::String v157 = v161;
    v60._char object = (void *)lazy protocol witness table accessor for type MLCreateError and conformance MLCreateError();
    swift_allocError(&type metadata for MLCreateError, v60._object, 0, 0);
    *(Swift::String *)uint64_t v61 = v157;
    *(_OWORD *)(v61 + 16) = 0;
    *(_OWORD *)(v61 + 32) = 0;
    *(unsigned char *)(v61 + 48) = 0;
    return (uint64_t *)swift_willThrow();
  }
  v148._uint64_t countAndFlagsBits = a5;
  if ((_BYTE)v156)
  {
    uint64_t v22 = v147;
    outlined copy of Result<_DataTable, Error>(v147, 1);
    uint64_t v23 = tc_v1_flex_list_create(0);
    if (!v23) {
      BUG();
    }
    uint64_t v24 = v23;
    uint64_t v25 = type metadata accessor for CMLSequence();
    uint64_t v26 = swift_allocObject(v25, 25, 7);
    *(void *)(v26 + 16) = v24;
    *(unsigned char *)(v26 + 24) = 1;
    outlined consume of Result<_DataTable, Error>(v22, 1);
  }
  else
  {
    uint64_t v22 = v147;
    uint64_t v28 = v147;
    outlined copy of Result<_DataTable, Error>(v147, 0);
    _DataTable.columnNames.getter(v28);
    outlined consume of Result<_DataTable, Error>(v22, 0);
    uint64_t v26 = v151;
  }
  Swift::String v161 = a8;
  uint64_t v29 = alloca(24);
  char v30 = alloca(32);
  uint64_t v164 = &v161;
  uint64_t v31 = v157._countAndFlagsBits;
  char v32 = specialized Sequence.contains(where:)((uint64_t (*)(unint64_t *))closure #1 in Sequence<>.contains(_:)specialized partial apply, (uint64_t)v163, v26);
  v157._uint64_t countAndFlagsBits = v31;
  swift_release();
  if ((v32 & 1) == 0)
  {
    v161._uint64_t countAndFlagsBits = 0x2064696C61766E49;
    v161._char object = (void *)0xE800000000000000;
    Swift::String v27 = a8;
    goto LABEL_27;
  }
  LODWORD(v159) = (_BYTE)v156 != 0;
  uint64_t v151 = v22;
  LOBYTE(v152) = (_BYTE)v156 != 0;
  uint64_t v33 = v22;
  v161._uint64_t countAndFlagsBits = v22;
  LOBYTE(v161._object) = (_BYTE)v156 != 0;
  outlined copy of Result<_DataTable, Error>(v22, (_BYTE)v156 != 0);
  v34._uint64_t countAndFlagsBits = v148._countAndFlagsBits;
  v34._char object = v160;
  MLDataTable.subscript.getter(v34);
  uint64_t v35 = v153;
  char v36 = object;
  uint64_t v136 = v153;
  char v137 = object;
  MLUntypedColumn.dropDuplicates()();
  outlined consume of Result<_DataTable, Error>(v35, v36);
  uint64_t v153 = v161._countAndFlagsBits;
  char object = (char)v161._object;
  double v37 = Array<A>.init(_:)((uint64_t)&v153, a7);
  outlined copy of Result<_DataTable, Error>(v33, (char)v159);
  char v38 = v160;
  swift_bridgeObjectRetain(v160);
  swift_bridgeObjectRetain(a8._object);
  uint64_t v39 = v157._countAndFlagsBits;
  uint64_t v162 = &v138;
  ML11MLDataValueOG_AHs5NeverOTg503_s8d81ML34stratifiedSplitBySequenceGenerator11proportions9generator9dataTable2by2onAA06f30K0VSaySdG_xzAIS2StKSGRzlFAA0N5G8OALXEfU_AF0F5TableVS2STf1cn_n = _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSay8CreateML11MLDataValueOG_AHs5NeverOTg503_s8d81ML34stratifiedSplitBySequenceGenerator11proportions9generator9dataTable2by2onAA06f30K0VSaySdG_xzAIS2StKSGRzlFAA0N5G8OALXEfU_AF0F5TableVS2STf1cn_n((uint64_t)v37, v33, v156, v148._countAndFlagsBits, v38, a8._countAndFlagsBits, a8._object);
  uint64_t v140 = v39;
  uint64_t v40 = v37[2];
  swift_bridgeObjectRetain(v37);
  unint64_t v146 = v37;
  long long v150 = specialized Dictionary.init<A>(uniqueKeysWithValues:)((uint64_t)v37, 0, v40);
  char v158 = specialized Array.init(repeating:count:)((uint64_t)_swiftEmptyArrayStorage, v40);
  LOBYTE(v38) = (_BYTE)v159;
  outlined copy of Result<_DataTable, Error>(v33, (char)v159);
  v34._uint64_t countAndFlagsBits = v148._countAndFlagsBits;
  v34._char object = v160;
  MLDataTable.subscript.getter(v34);
  outlined consume of Result<_DataTable, Error>(v33, (char)v38);
  uint64_t v153 = v161._countAndFlagsBits;
  char object = (char)v161._object;
  uint64_t v41 = Array<A>.init(_:)((uint64_t)&v153, a7);
  uint64_t v144 = (void *)v41[2];
  if (v144)
  {
    uint64_t v141 = v41;
    uint64_t v42 = (unsigned __int8 *)(v41 + 6);
    BOOL v43 = 0;
    do
    {
      v148._char object = v43;
      uint64_t v44 = (void *)*((void *)v42 - 2);
      uint64_t v45 = (void *)*((void *)v42 - 1);
      int v46 = v150;
      v157._uint64_t countAndFlagsBits = v150[2];
      uint64_t v159 = v42;
      int v47 = *v42;
      outlined copy of MLDataValue(v44, v45, *v42);
      if (!v157._countAndFlagsBits) {
        goto LABEL_71;
      }
      outlined copy of MLDataValue(v44, v45, v47);
      *(void *)&long long v48 = v44;
      *((void *)&v48 + 1) = v45;
      unint64_t v49 = specialized __RawDictionaryStorage.find<A>(_:)(v48, v47);
      BOOL v51 = (v50 & 1) == 0;
      int v52 = v47;
      if (v51)
      {
        outlined consume of MLDataValue(v44, v45, v47);
LABEL_71:
        swift_bridgeObjectRelease(ML11MLDataValueOG_AHs5NeverOTg503_s8d81ML34stratifiedSplitBySequenceGenerator11proportions9generator9dataTable2by2onAA06f30K0VSaySdG_xzAIS2StKSGRzlFAA0N5G8OALXEfU_AF0F5TableVS2STf1cn_n);
        swift_bridgeObjectRelease(v146);
        BUG();
      }
      uint64_t v53 = *(void *)(v46[7] + 8 * v49);
      uint64_t v54 = v44;
      v157._uint64_t countAndFlagsBits = (uint64_t)v45;
      LODWORD(v149) = v52;
      outlined consume of MLDataValue(v44, v45, v52);
      uint64_t v55 = v158;
      if (!swift_isUniquelyReferenced_nonNull_native(v158)) {
        uint64_t v55 = specialized _ArrayBuffer._consumeAndCreateNew()((uint64_t)v55);
      }
      if (v53 < 0) {
        BUG();
      }
      if ((unint64_t)v53 >= v55[2]) {
        BUG();
      }
      uint64_t v56 = (char *)v55[v53 + 4];
      char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v56);
      char v158 = v55;
      uint64_t v155 = v53;
      v55[v53 + 4] = v56;
      if (!isUniquelyReferenced_nonNull_native)
      {
        uint64_t v56 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *((void *)v56 + 2) + 1, 1, (uint64_t)v56);
        v158[v155 + 4] = v56;
      }
      unint64_t v58 = *((void *)v56 + 2);
      if (*((void *)v56 + 3) >> 1 <= v58)
      {
        uint64_t v56 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(*((void *)v56 + 3) >= 2uLL, v58 + 1, 1, (uint64_t)v56);
        v158[v155 + 4] = v56;
      }
      *((void *)v56 + 2) = v58 + 1;
      uint64_t v59 = (char *)v148._object;
      *(void *)&v56[8 * v58 + 32] = v148._object;
      BOOL v43 = v59 + 1;
      outlined consume of MLDataValue(v54, (void *)v157._countAndFlagsBits, v149);
      uint64_t v42 = v159 + 24;
    }
    while (v144 != v43);
    swift_bridgeObjectRelease(v150);
    uint64_t v41 = v141;
  }
  else
  {
    swift_bridgeObjectRelease(v150);
  }
  swift_bridgeObjectRelease(v41);
  uint64_t v63 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, MLUntypedColumn)>);
  uint64_t inited = swift_initStackObject(v63, v134);
  *(void *)(inited + 16) = 3;
  *(void *)(inited + 24) = 6;
  *(void *)(inited + 32) = 0x73656369646E69;
  *(void *)(inited + 40) = 0xE700000000000000;
  v161._uint64_t countAndFlagsBits = (uint64_t)v158;
  uint64_t v65 = alloca(24);
  uint64_t v66 = alloca(32);
  uint64_t v164 = &v161;
  swift_bridgeObjectRetain(v158);
  uint64_t ML14_UntypedColumnC_s5Error_pTgm5 = _ss6ResultOsRi_zrlE8catchingAByxq_Gxyq_YKXE_tcfC8CreateML14_UntypedColumnC_s5Error_pTgm5((void (*)(void *))_s8CreateML15MLUntypedColumnVyACxcSTRzAA22MLDataValueConvertible7ElementRpzlufcAA08_UntypedD0CyKXEfU_SaySaySiGG_TG5TA_0);
  char v69 = v68;
  swift_bridgeObjectRelease(v161._countAndFlagsBits);
  *(void *)(inited + 48) = ML14_UntypedColumnC_s5Error_pTgm5;
  *(unsigned char *)(inited + 56) = v69 & 1;
  *(Swift::String *)(inited + 64) = a8;
  v161._uint64_t countAndFlagsBits = (uint64_t)ML11MLDataValueOG_AHs5NeverOTg503_s8d81ML34stratifiedSplitBySequenceGenerator11proportions9generator9dataTable2by2onAA06f30K0VSaySdG_xzAIS2StKSGRzlFAA0N5G8OALXEfU_AF0F5TableVS2STf1cn_n;
  uint64_t v70 = alloca(24);
  BOOL v71 = alloca(32);
  uint64_t v164 = &v161;
  swift_bridgeObjectRetain(a8._object);
  uint64_t v72 = _ss6ResultOsRi_zrlE8catchingAByxq_Gxyq_YKXE_tcfC8CreateML14_UntypedColumnC_s5Error_pTgm5((void (*)(void *))_s8CreateML15MLUntypedColumnVyACxcSTRzAA11MLDataValueO7ElementRtzlufcAA08_UntypedD0CyKXEfU_SayAEG_TG5TA_0);
  char v74 = v73;
  swift_bridgeObjectRelease(v161._countAndFlagsBits);
  v157._uint64_t countAndFlagsBits = (uint64_t)v163;
  *(void *)(inited + 80) = v72;
  *(unsigned char *)(inited + 88) = v74 & 1;
  *(void *)(inited + 96) = v148._countAndFlagsBits;
  uint64_t v75 = v160;
  *(void *)(inited + 104) = v160;
  v161._uint64_t countAndFlagsBits = (uint64_t)v146;
  uint64_t v76 = alloca(24);
  uint64_t v77 = alloca(32);
  uint64_t v164 = &v161;
  swift_bridgeObjectRetain(v75);
  uint64_t v78 = _ss6ResultOsRi_zrlE8catchingAByxq_Gxyq_YKXE_tcfC8CreateML14_UntypedColumnC_s5Error_pTgm5((void (*)(void *))closure #1 in MLUntypedColumn.init<A>(_:)specialized partial apply);
  char v80 = v79;
  swift_bridgeObjectRelease(v161._countAndFlagsBits);
  *(void *)(inited + 112) = v78;
  *(unsigned char *)(inited + 120) = v80 & 1;
  uint64_t v81 = Dictionary.init(dictionaryLiteral:)(inited, &type metadata for String, &type metadata for MLUntypedColumn, &protocol witness table for String);
  uint64_t v82 = v140;
  specialized MLDataTable.init<A>(uniqueKeysWithValues:)(v81);
  if (v82)
  {
    swift_bridgeObjectRelease(v158);
    return (uint64_t *)outlined consume of Result<_DataTable, Error>(v151, v152);
  }
  uint64_t v83 = v161._countAndFlagsBits;
  int object_low = LOBYTE(v161._object);
  specialized stratifiedSplitGenerator<A>(proportions:generator:dataTable:on:)(v143, v145, (void *)v161._countAndFlagsBits, LOBYTE(v161._object), a8._countAndFlagsBits, a8._object, a7);
  LODWORD(v146) = object_low;
  uint64_t v143 = v83;
  uint64_t v159 = 0;
  char v85 = (_BYTE)v156 != 0;
  uint64_t v155 = v161._countAndFlagsBits;
  LOBYTE(v145) = v161._object;
  uint64_t v86 = v147;
  uint64_t v153 = v147;
  char object = (_BYTE)v156 != 0;
  outlined copy of Result<_DataTable, Error>(v147, (_BYTE)v156 != 0);
  v87._uint64_t countAndFlagsBits = v148._countAndFlagsBits;
  v87._char object = v160;
  MLDataTable.subscript.getter(v87);
  outlined consume of Result<_DataTable, Error>(v86, v85);
  uint64_t v88 = v161._countAndFlagsBits;
  char v89 = (char)v161._object;
  if (LOBYTE(v161._object))
  {
    uint64_t v90 = -1;
  }
  else
  {
    swift_retain();
    uint64_t v90 = CMLColumn.size.getter();
    outlined consume of Result<_DataTable, Error>(v88, 0);
  }
  outlined consume of Result<_DataTable, Error>(v88, v89);
  v148._char object = specialized Array.init(repeating:count:)(0, v90);
  uint64_t v91 = v155;
  uint64_t v153 = v155;
  char object = v145;
  int v92 = v145;
  outlined copy of Result<_DataTable, Error>(v155, v145);
  v93._uint64_t countAndFlagsBits = 0x73656369646E69;
  v93._char object = (void *)0xE700000000000000;
  MLDataTable.subscript.getter(v93);
  LODWORD(v160) = v92;
  outlined consume of Result<_DataTable, Error>(v91, v92);
  uint64_t v94 = v161._countAndFlagsBits;
  if (LOBYTE(v161._object) == 1)
  {
    outlined consume of Result<_DataTable, Error>(v161._countAndFlagsBits, 1);
LABEL_79:
    BUG();
  }
  swift_retain();
  uint64_t v95 = CMLColumn.size.getter();
  outlined consume of Result<_DataTable, Error>(v94, 0);
  outlined consume of Result<_DataTable, Error>(v94, 0);
  long long v96 = v159;
  if (v95 < 0) {
    goto LABEL_79;
  }
  uint64_t v97 = v158;
  if (v95)
  {
    uint64_t v98 = 0;
    uint64_t v147 = v95;
    while (1)
    {
      if (v98 == v95) {
        BUG();
      }
      uint64_t v156 = v98;
      if ((_BYTE)v145) {
        break;
      }
      uint64_t v99 = v155;
      uint64_t v100 = *(void *)(v155 + 16);
      outlined copy of Result<_DataTable, Error>(v155, 0);
      swift_retain();
      uint64_t v101 = specialized String.withCString<A>(_:)((uint64_t (*)(void))partial apply for closure #1 in CMLTable.column(name:), v100, 0x73656369646E69, 0xE700000000000000);
      if (v96)
      {
        swift_errorRelease(v96);
        swift_release();
        goto LABEL_75;
      }
      uint64_t v102 = v101;
      swift_release();
      outlined consume of Result<_DataTable, Error>(v99, 0);
      uint64_t v103 = type metadata accessor for _UntypedColumn();
      uint64_t v104 = swift_allocObject(v103, 24, 7);
      *(void *)(v104 + 16) = v102;
      swift_retain();
      _UntypedColumn.valueAtIndex(index:)(v156, a7);
      outlined consume of Result<_DataTable, Error>(v104, 0);
      outlined consume of Result<_DataTable, Error>(v104, 0);
      if ((_BYTE)v162 != 3) {
        goto LABEL_76;
      }
      long long v150 = v161._object;
      uint64_t v105 = (void *)v161._countAndFlagsBits;
      swift_retain();
      uint64_t v106 = CMLSequence.size.getter();
      uint64_t v144 = v105;
      if (v106)
      {
        uint64_t v107 = 0;
        while (1)
        {
          v157._uint64_t countAndFlagsBits = v107;
          swift_retain();
          uint64_t v108 = CMLSequence.value(at:)(v107);
          uint64_t v159 = v96;
          if (v96)
          {
            outlined consume of MLDataValue(v105, v150, 3);
            swift_unexpectedError(v159, "CreateML/SequenceType.swift", 27, 1, 36);
            BUG();
          }
          uint64_t v109 = v108;
          int64_t v110 = v150;
          outlined consume of MLDataValue(v105, v150, 3);
          MLDataValue.init(_:)(v109, a7);
          uint64_t v149 = v161._countAndFlagsBits;
          char v111 = (char)v162;
          swift_retain();
          uint64_t v112 = CMLSequence.size.getter();
          outlined consume of MLDataValue(v105, v110, 3);
          if (v157._countAndFlagsBits >= v112) {
            BUG();
          }
          if (v111) {
            BUG();
          }
          uint64_t v113 = v155;
          outlined copy of Result<_DataTable, Error>(v155, 0);
          v114._uint64_t countAndFlagsBits = 0x6F69746974726170;
          v114._char object = (void *)0xE90000000000006ELL;
          specialized MLDataTable.subscript.getter(v114, v113, (char)v160);
          outlined consume of Result<_DataTable, Error>(v113, 0);
          uint64_t v115 = v153;
          long long v96 = v159;
          if (object) {
            break;
          }
          outlined copy of Result<_DataTable, Error>(v153, 0);
          _UntypedColumn.valueAtIndex(index:)(v156, a7);
          outlined consume of Result<_DataTable, Error>(v115, 0);
          uint64_t v117 = v161._countAndFlagsBits;
          uint64_t v116 = v148._object;
          if ((_BYTE)v162)
          {
            outlined consume of MLDataValue((void *)v161._countAndFlagsBits, v161._object, (char)v162);
            outlined consume of Result<_DataTable, Error>(v115, 0);
            goto LABEL_51;
          }
          outlined consume of Result<_DataTable, Error>(v115, 0);
          if (!swift_isUniquelyReferenced_nonNull_native(v116)) {
LABEL_58:
          }
            uint64_t v116 = specialized _ArrayBuffer._consumeAndCreateNew()((uint64_t)v116);
LABEL_53:
          if (v149 < 0) {
            BUG();
          }
          if ((unint64_t)v149 >= v116[2]) {
            BUG();
          }
          uint64_t v118 = v157._countAndFlagsBits + 1;
          v148._char object = v116;
          v116[v149 + 4] = v117;
          uint64_t v107 = v118;
          uint64_t v105 = v144;
          if (v118 == CMLSequence.size.getter()) {
            goto LABEL_59;
          }
        }
        outlined consume of Result<_DataTable, Error>(v153, 1);
        uint64_t v116 = v148._object;
LABEL_51:
        uint64_t v117 = 0;
        if (!swift_isUniquelyReferenced_nonNull_native(v116)) {
          goto LABEL_58;
        }
        uint64_t v117 = 0;
        goto LABEL_53;
      }
LABEL_59:
      uint64_t v119 = v156 + 1;
      uint64_t v120 = v105;
      uint64_t v121 = v150;
      outlined consume of MLDataValue(v120, v150, 3);
      outlined consume of MLDataValue(v144, v121, 3);
      uint64_t v98 = v119;
      uint64_t v95 = v147;
      uint64_t v97 = v158;
      if (v119 == v147) {
        goto LABEL_60;
      }
    }
    outlined copy of Result<_DataTable, Error>(v155, 1);
    swift_willThrow();
LABEL_75:
    v161._uint64_t countAndFlagsBits = 0;
    v161._char object = (void *)0xE000000000000000;
    _StringGuts.grow(_:)(34);
    swift_bridgeObjectRelease(v161._object);
    uint64_t v131 = lazy protocol witness table accessor for type MLCreateError and conformance MLCreateError();
    uint64_t v132 = swift_allocError(&type metadata for MLCreateError, v131, 0, 0);
    *(void *)uint64_t v133 = 0xD000000000000027;
    *(void *)(v133 + 8) = "aTable by sequence." + 0x8000000000000000;
    *(_OWORD *)(v133 + 16) = 0;
    *(_OWORD *)(v133 + 32) = 0;
    *(unsigned char *)(v133 + 48) = 1;
    outlined consume of Result<_DataTable, Error>(v155, (char)v160);
    outlined consume of Result<_DataTable, Error>(v132, 1);
LABEL_76:
    BUG();
  }
LABEL_60:
  uint64_t v159 = v96;
  swift_bridgeObjectRelease(v97);
  v161._uint64_t countAndFlagsBits = (uint64_t)v148._object;
  uint64_t v122 = alloca(24);
  id v123 = alloca(24);
  uint64_t v164 = &v161;
  uint64_t v124 = _ss6ResultOsRi_zrlE8catchingAByxq_Gxyq_YKXE_tcfC8CreateML14_UntypedColumnC_s5Error_pTgm5((void (*)(void *))partial apply for specialized closure #1 in MLUntypedColumn.init<A>(_:));
  char v126 = v125;
  swift_bridgeObjectRelease(v161._countAndFlagsBits);
  MLDataTable.willMutate()();
  v161._uint64_t countAndFlagsBits = v124;
  char v127 = v126;
  char v128 = v126 & 1;
  LOBYTE(v161._object) = v128;
  outlined copy of Result<_DataTable, Error>(v124, v127);
  MLDataTable.addImpl(newColumn:named:)((uint64_t)&v161, 0x6F69746974726170, (void *)0xE90000000000006ELL);
  outlined consume of Result<_DataTable, Error>(v124, v127);
  uint64_t v129 = v151;
  char v130 = v152;
  if (!(_BYTE)v152)
  {
    outlined copy of Result<_DataTable, Error>(v151, 0);
    _DataTable.columnNamesDidChange()();
    outlined consume of Result<_DataTable, Error>(v129, 0);
  }
  outlined consume of Result<_DataTable, Error>(v143, (char)v146);
  outlined consume of Result<_DataTable, Error>(v155, (char)v160);
  outlined consume of Result<_DataTable, Error>(v124, v128);
  uint64_t result = v139;
  uint64_t *v139 = v129;
  *((unsigned char *)result + 8) = v130;
  return result;
}

uint64_t MLDataTable.stratifiedSplit<A>(proportions:on:generator:)(uint64_t a1, uint64_t a2, void *a3, uint64_t a4, uint64_t a5, uint64_t a6, double a7)
{
  char v9 = *((unsigned char *)v7 + 8);
  uint64_t v11 = *v7;
  char v12 = v9;
  return stratifiedSplitGenerator<A>(proportions:generator:dataTable:on:)(a1, a4, (uint64_t)&v11, a2, a3, a5, a7, a6);
}

uint64_t MLDataTable.randomSplit(by:seed:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = *v3;
  if (*((unsigned char *)v3 + 8))
  {
    swift_errorRetain(*v3);
    *(void *)a1 = v4;
    *(unsigned char *)(a1 + 8) = 1;
    *(void *)a2 = v4;
    *(unsigned char *)(a2 + 8) = 1;
    return swift_errorRetain(v4);
  }
  else
  {
    swift_retain();
    uint64_t v7 = CMLTable.split(fraction:seed:)(a3);
    uint64_t v12 = v8;
    uint64_t v9 = type metadata accessor for _DataTable();
    swift_allocObject(v9, 40, 7);
    uint64_t v11 = _DataTable.init(impl:)(v7);
    swift_allocObject(v9, 40, 7);
    uint64_t v10 = _DataTable.init(impl:)(v12);
    outlined consume of Result<_DataTable, Error>(v4, 0);
    *(void *)a1 = v11;
    uint64_t result = 0;
    *(unsigned char *)(a1 + 8) = 0;
    *(void *)a2 = v10;
    *(unsigned char *)(a2 + 8) = 0;
  }
  return result;
}

void *MLDataTable.randomSplitBySequence(proportion:by:on:seed:)(void *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, void *a6, double a7, uint64_t a8)
{
  char v50 = a6;
  v47._uint64_t countAndFlagsBits = a5;
  *(void *)unint64_t v49 = a4;
  *(void *)BOOL v43 = a3;
  double v44 = a7;
  uint64_t v41 = a2;
  uint64_t v42 = a1;
  uint64_t v9 = *(void *)v8;
  unsigned __int8 v10 = *(unsigned char *)(v8 + 8);
  uint64_t v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Double>);
  uint64_t inited = swift_initStackObject(v11, v33);
  *(void *)(inited + 16) = 2;
  *(void *)(inited + 24) = 4;
  double v13 = v44;
  *(double *)(inited + 32) = v44;
  *(double *)(inited + 40) = 1.0 - v13;
  if (a8 < 0)
  {
    _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, "Negative value is not representable", 35, 2, "Swift/Integers.swift", 20, 2, 3451, 1);
    BUG();
  }
  uint64_t v14 = inited;
  uint64_t v15 = type metadata accessor for MersenneTwisterGenerator();
  swift_allocObject(v15, 136, 7);
  uint64_t v39 = MersenneTwisterGenerator.init(seed:)(a8);
  v32._char object = v50;
  v32._uint64_t countAndFlagsBits = v47._countAndFlagsBits;
  specialized stratifiedSplitBySequenceGenerator<A>(proportions:generator:dataTable:by:on:)(v14, (uint64_t)&v39, v9, v10, *(uint64_t *)v43, *(void **)v49, 1.0 - v13, v32);
  swift_release();
  swift_setDeallocating(v14);
  char v16 = v35;
  int v17 = v36;
  LOBYTE(v49[0]) = v36 & 1;
  LOBYTE(v36) = v36 & 1;
  LODWORD(v47._countAndFlagsBits) = v17;
  outlined copy of Result<_DataTable, Error>((uint64_t)v35, v17);
  v18._uint64_t countAndFlagsBits = 0x6F69746974726170;
  v18._char object = (void *)0xE90000000000006ELL;
  MLDataTable.subscript.getter(v18);
  outlined consume of Result<_DataTable, Error>((uint64_t)v16, v17);
  uint64_t v19 = (uint64_t)v45;
  char v20 = v46;
  v47._char object = v45;
  char v48 = v46;
  double v37 = &type metadata for Int;
  char v38 = &protocol witness table for Int;
  uint64_t v35 = 0;
  static MLUntypedColumn.== infix(_:_:)((uint64_t)&v47._object, &v35);
  outlined consume of Result<_DataTable, Error>(v19, v20);
  __swift_destroy_boxed_opaque_existential_1Tm(&v35);
  uint64_t v21 = (uint64_t)v39;
  LODWORD(v50) = v40;
  uint64_t v45 = v16;
  LOBYTE(v14) = v49[0];
  char v46 = v49[0];
  v47._char object = v39;
  char v48 = v40;
  LOBYTE(v19) = v47._countAndFlagsBits;
  outlined copy of Result<_DataTable, Error>((uint64_t)v16, v47._countAndFlagsBits);
  MLDataTable.subscript.getter((uint64_t)&v47._object);
  outlined consume of Result<_DataTable, Error>(v21, (char)v50);
  outlined consume of Result<_DataTable, Error>((uint64_t)v16, v19);
  char v50 = v35;
  v43[0] = v36;
  uint64_t v35 = v16;
  LOBYTE(v36) = v14;
  outlined copy of Result<_DataTable, Error>((uint64_t)v16, v19);
  v18._uint64_t countAndFlagsBits = 0x6F69746974726170;
  v18._char object = (void *)0xE90000000000006ELL;
  MLDataTable.subscript.getter(v18);
  outlined consume of Result<_DataTable, Error>((uint64_t)v16, v19);
  uint64_t v22 = (uint64_t)v45;
  LOBYTE(v21) = v46;
  v47._char object = v45;
  char v48 = v46;
  double v37 = &type metadata for Int;
  char v38 = &protocol witness table for Int;
  uint64_t v35 = &dword_0 + 1;
  static MLUntypedColumn.== infix(_:_:)((uint64_t)&v47._object, &v35);
  outlined consume of Result<_DataTable, Error>(v22, v21);
  __swift_destroy_boxed_opaque_existential_1Tm(&v35);
  Swift::String v34 = v39;
  LOBYTE(v21) = v40;
  uint64_t v45 = v16;
  char v46 = v49[0];
  v47._char object = v39;
  char v48 = v40;
  double v44 = *(double *)&v16;
  LOBYTE(v14) = v47._countAndFlagsBits;
  outlined copy of Result<_DataTable, Error>((uint64_t)v16, v47._countAndFlagsBits);
  MLDataTable.subscript.getter((uint64_t)&v47._object);
  LOBYTE(v18._object) = v21;
  char v23 = v43[0];
  outlined consume of Result<_DataTable, Error>((uint64_t)v34, (char)v18._object);
  outlined consume of Result<_DataTable, Error>((uint64_t)v16, v14);
  uint64_t v24 = v35;
  char v25 = v36;
  uint64_t v35 = v50;
  LOBYTE(v36) = v23;
  uint64_t v26 = (uint64_t)v50;
  outlined copy of Result<_DataTable, Error>((uint64_t)v50, v23);
  Swift::Int v27 = MLDataTable.size.getter();
  *(void *)unint64_t v49 = specialized RandomAccessCollection<>.distance(from:to:)(0, v27);
  outlined consume of Result<_DataTable, Error>(v26, v23);
  uint64_t v35 = v24;
  LOBYTE(v36) = v25;
  outlined copy of Result<_DataTable, Error>((uint64_t)v24, v25);
  Swift::Int v28 = MLDataTable.size.getter();
  uint64_t v29 = specialized RandomAccessCollection<>.distance(from:to:)(0, v28);
  outlined consume of Result<_DataTable, Error>(*(uint64_t *)&v44, v47._countAndFlagsBits);
  outlined consume of Result<_DataTable, Error>((uint64_t)v24, v25);
  char v30 = v42;
  if (*(uint64_t *)v49 >= v29)
  {
    void *v42 = v24;
    *((unsigned char *)v30 + 8) = v25;
    uint64_t result = v41;
    *uint64_t v41 = v50;
    *((unsigned char *)result + 8) = v23;
  }
  else
  {
    void *v42 = v50;
    *((unsigned char *)v30 + 8) = v23;
    uint64_t result = v41;
    *uint64_t v41 = v24;
    *((unsigned char *)result + 8) = v25;
  }
  return result;
}

uint64_t MLDataTable.stratifiedSplitBySequence(proportions:by:on:seed:)(uint64_t a1, uint64_t a2, void *a3, uint64_t a4, void *a5, uint64_t a6, double a7)
{
  v16._uint64_t countAndFlagsBits = a4;
  v16._char object = a3;
  uint64_t v19 = v7;
  *(void *)Swift::String v18 = a2;
  int v17 = a5;
  *(void *)char v20 = a1;
  if (a6 < 0)
  {
    _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, "Negative value is not representable", 35, 2, "Swift/Integers.swift", 20, 2, 3451, 1);
    BUG();
  }
  uint64_t v10 = *(void *)v8;
  unsigned __int8 v11 = *(unsigned char *)(v8 + 8);
  uint64_t v12 = type metadata accessor for MersenneTwisterGenerator();
  swift_allocObject(v12, 136, 7);
  uint64_t v15 = MersenneTwisterGenerator.init(seed:)(a6);
  v14._char object = v17;
  v14._uint64_t countAndFlagsBits = v16._countAndFlagsBits;
  specialized stratifiedSplitBySequenceGenerator<A>(proportions:generator:dataTable:by:on:)(*(uint64_t *)v20, (uint64_t)&v15, v10, v11, *(uint64_t *)v18, v16._object, a7, v14);
  return swift_release();
}

uint64_t MLDataTable.stratifiedSplitBySequence<A>(proportions:by:on:generator:)(uint64_t a1, uint64_t a2, char *a3, uint64_t a4, void *a5, uint64_t a6, long long a7)
{
  char v8 = *((unsigned char *)v7 + 8);
  uint64_t v10 = *v7;
  char v11 = v8;
  return stratifiedSplitBySequenceGenerator<A>(proportions:generator:dataTable:by:on:)(a1, a6, (uint64_t)&v10, a2, a3, a4, *(double *)&a7, a5, a7, *((uint64_t *)&a7 + 1));
}

uint64_t MLHandActionClassifier.GraphCNN.writeMLPackage(to:metadata:)(uint64_t a1, long long *a2, double a3, double a4)
{
  uint64_t v63 = v4;
  uint64_t v84 = v5;
  uint64_t v76 = a1;
  uint64_t v83 = type metadata accessor for Model(0);
  uint64_t v82 = *(void *)(v83 - 8);
  int64_t v6 = *(void *)(v82 + 64);
  uint64_t v7 = alloca(v6);
  char v8 = alloca(v6);
  char v74 = &v55;
  uint64_t v79 = type metadata accessor for URL(0);
  uint64_t v80 = *(void *)(v79 - 8);
  int64_t v9 = *(void *)(v80 + 64);
  uint64_t v10 = alloca(v9);
  char v11 = alloca(v9);
  uint64_t v81 = &v55;
  uint64_t v12 = alloca(v9);
  double v13 = alloca(v9);
  char v73 = &v55;
  Swift::String v14 = alloca(v9);
  uint64_t v15 = alloca(v9);
  BOOL v71 = &v55;
  uint64_t v86 = type metadata accessor for Package(0);
  uint64_t v85 = *(void *)(v86 - 8);
  int64_t v16 = *(void *)(v85 + 64);
  int v17 = alloca(v16);
  Swift::String v18 = alloca(v16);
  uint64_t v72 = &v55;
  uint64_t v77 = type metadata accessor for MLPackageWritingOptions(0);
  uint64_t v78 = *(void *)(v77 - 8);
  int64_t v19 = *(void *)(v78 + 64);
  char v20 = alloca(v19);
  uint64_t v21 = alloca(v19);
  uint64_t v64 = &v55;
  uint64_t v65 = type metadata accessor for ScalarType(0);
  uint64_t v66 = *(void *)(v65 - 8);
  int64_t v22 = *(void *)(v66 + 64);
  char v23 = alloca(v22);
  uint64_t v24 = alloca(v22);
  uint64_t v67 = &v55;
  int64_t v25 = *(void *)(*(void *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ComputeDevice?)
                              - 8)
                  + 64);
  uint64_t v26 = alloca(v25);
  Swift::Int v27 = alloca(v25);
  char v68 = &v55;
  int64_t v28 = *(void *)(*(void *)(type metadata accessor for TensorShape(0) - 8) + 64);
  uint64_t v29 = alloca(v28);
  char v30 = alloca(v28);
  char v69 = &v55;
  long long v59 = *a2;
  long long v60 = a2[1];
  long long v61 = a2[2];
  long long v62 = a2[3];
  uint64_t v75 = *((void *)a2 + 8);
  uint64_t v31 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, Tensor)>);
  uint64_t v32 = *(void *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (String, Tensor))
                  - 8);
  uint64_t v33 = *(unsigned __int8 *)(v32 + 80);
  uint64_t v34 = ((int)v33 + 32) & ~*(unsigned __int8 *)(v32 + 80);
  uint64_t v35 = swift_allocObject(v31, v34 + *(void *)(v32 + 72), v33 | 7);
  uint64_t v70 = v35;
  *(void *)(v35 + 16) = 1;
  *(void *)(v35 + 24) = 2;
  *(void *)(v35 + v34) = 0x7365736F70;
  *(void *)(v35 + v34 + 8) = 0xE500000000000000;
  uint64_t v36 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Int>);
  uint64_t v37 = swift_allocObject(v36, 56, 7);
  *(void *)(v37 + 16) = 3;
  *(void *)(v37 + 24) = 6;
  uint64_t v38 = v84;
  uint64_t v39 = v84 + OBJC_IVAR____TtCV8CreateML22MLHandActionClassifier8GraphCNN_model;
  swift_beginAccess(v84 + OBJC_IVAR____TtCV8CreateML22MLHandActionClassifier8GraphCNN_model, v56, 0, 0);
  *(void *)(v37 + 32) = *(void *)(*(int *)(type metadata accessor for MLHandActionClassifier.GraphCNNModel(0) + 40)
                                    + v39);
  __m128i v40 = _mm_shuffle_epi32(_mm_loadu_si128((const __m128i *)(v38 + 24)), 78);
  *(__m128i *)(v37 + 40) = v40;
  uint64_t v41 = v69;
  TensorShape.init(_:)(v37, *(double *)v40.i64, a4);
  uint64_t v42 = type metadata accessor for ComputeDevice(0);
  uint64_t v43 = (uint64_t)v68;
  __swift_storeEnumTagSinglePayload((uint64_t)v68, 1, 1, v42);
  double v44 = v67;
  (*(void (**)(uint64_t *, void, uint64_t))(v66 + 104))(v67, enum case for ScalarType.float32(_:), v65);
  Tensor.init(zeros:scalarType:on:)(v41, v44, v43);
  uint64_t v45 = type metadata accessor for Tensor(0);
  uint64_t v46 = Dictionary.init(dictionaryLiteral:)(v70, &type metadata for String, v45, &protocol witness table for String);
  *(void *)&v57[0] = v84;
  swift_retain();
  Swift::String v47 = v64;
  static MLPackageWritingOptions.default.getter();
  uint64_t v48 = lazy protocol witness table accessor for type MLHandActionClassifier.GraphCNN.MLPackageRepresentation and conformance MLHandActionClassifier.GraphCNN.MLPackageRepresentation();
  uint64_t v49 = v63;
  Layer<>.writeMLPackage(withInput:output:to:options:)(v46, 0, v76, v47, &unk_39BCF0, v48);
  swift_bridgeObjectRelease(v46);
  (*(void (**)(uint64_t *, uint64_t))(v78 + 8))(v47, v77);
  if (v49) {
    return swift_release();
  }
  swift_release();
  BOOL v51 = v71;
  (*(void (**)(uint64_t *, uint64_t, uint64_t))(v80 + 16))(v71, v76, v79);
  uint64_t v52 = (uint64_t)v72;
  Package.init(url:)(v51);
  uint64_t v53 = v73;
  Package.rootModelURL.getter();
  uint64_t v54 = (uint64_t)v74;
  Model.init(contentsOf:)(v53);
  MLHandActionClassifier.GraphCNN.convertIntoClassifier(_:)(v54);
  Package.setRootModel(_:)(v54);
  (*(void (**)(uint64_t *, uint64_t))(v80 + 8))(v81, v79);
  v57[0] = v59;
  v57[1] = v60;
  v57[2] = v61;
  v57[3] = _mm_load_si128((const __m128i *)&v62);
  uint64_t v58 = v75;
  MLActivityClassifier.Model.addMetadata(_:_:)(v52, (uint64_t *)v57);
  (*(void (**)(uint64_t, uint64_t))(v82 + 8))(v54, v83);
  return (*(uint64_t (**)(uint64_t, uint64_t))(v85 + 8))(v52, v86);
}

uint64_t MLHandActionClassifier.GraphCNN.MLPackageRepresentation.forward(_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v66 = a2;
  uint64_t v56 = type metadata accessor for TensorShape(0);
  uint64_t v57 = *(void *)(v56 - 8);
  int64_t v2 = *(void *)(v57 + 64);
  uint64_t v3 = alloca(v2);
  uint64_t v4 = alloca(v2);
  uint64_t v58 = v52;
  uint64_t v5 = alloca(v2);
  int64_t v6 = alloca(v2);
  uint64_t v63 = v52;
  int64_t v7 = *(void *)(*(void *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (key: String, value: Tensor)?)
                             - 8)
                 + 64);
  char v8 = alloca(v7);
  int64_t v9 = alloca(v7);
  uint64_t v62 = type metadata accessor for Tensor(0);
  uint64_t v10 = *(void *)(v62 - 8);
  int64_t v11 = *(void *)(v10 + 64);
  uint64_t v12 = alloca(v11);
  double v13 = alloca(v11);
  long long v59 = v52;
  Swift::String v14 = alloca(v11);
  uint64_t v15 = alloca(v11);
  uint64_t v55 = v52;
  int64_t v16 = alloca(v11);
  int v17 = alloca(v11);
  Swift::String v18 = alloca(v11);
  int64_t v19 = alloca(v11);
  if (*(void *)(a1 + 16) != 1) {
    goto LABEL_6;
  }
  swift_bridgeObjectRetain(a1);
  specialized Collection.first.getter(a1);
  swift_bridgeObjectRelease(a1);
  uint64_t v20 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (key: String, value: Tensor));
  if (__swift_getEnumTagSinglePayload((uint64_t)v52, 1, v20) == 1)
  {
    outlined destroy of (key: String, value: Tensor)?((uint64_t)v52);
LABEL_6:
    _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, 0xD00000000000001FLL, "PackageExport.swift" + 0x8000000000000000, "CreateML/MLHandActionClassifier+PackageExport.swift", 51, 2, 28, 0);
    goto LABEL_8;
  }
  swift_bridgeObjectRelease(v52[8]);
  uint64_t v21 = *(int *)(v20 + 48);
  uint64_t v64 = v10;
  int64_t v22 = *(void (**)(unsigned char *, unsigned char *, uint64_t))(v10 + 32);
  uint64_t v23 = v62;
  v22(v52, &v52[v21], v62);
  v22(v52, v52, v23);
  uint64_t v65 = v52;
  Tensor.shape.getter(v52, v52, v24);
  uint64_t v60 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Int>);
  uint64_t v25 = swift_allocObject(v60, 56, 7);
  *(void *)(v25 + 16) = 3;
  *(void *)(v25 + 24) = 6;
  uint64_t v26 = v66;
  uint64_t v27 = v66 + OBJC_IVAR____TtCV8CreateML22MLHandActionClassifier8GraphCNN_model;
  swift_beginAccess(v66 + OBJC_IVAR____TtCV8CreateML22MLHandActionClassifier8GraphCNN_model, v52, 0, 0);
  uint64_t v61 = type metadata accessor for MLHandActionClassifier.GraphCNNModel(0);
  *(void *)(v25 + 32) = *(void *)(*(int *)(v61 + 40) + v27);
  __m128i v28 = _mm_shuffle_epi32(_mm_loadu_si128((const __m128i *)(v26 + 24)), 78);
  *(__m128i *)(v25 + 40) = v28;
  uint64_t v29 = v58;
  TensorShape.init(_:)(v25, *(double *)v28.i64);
  char v30 = (void *)TensorShape.dimensions.getter();
  uint64_t v31 = (void *)TensorShape.dimensions.getter();
  LOBYTE(v25) = (_BYTE)v31;
  LOBYTE(v26) = specialized static Array<A>.== infix(_:_:)(v30, v31);
  swift_bridgeObjectRelease((_BYTE)v30);
  swift_bridgeObjectRelease(v25);
  uint64_t v32 = *(void (**)(unsigned char *, uint64_t))(v57 + 8);
  uint64_t v33 = v56;
  v32(v29, v56);
  v32(v63, v33);
  if ((v26 & 1) == 0)
  {
    unint64_t v53 = 0;
    uint64_t v54 = (char *)0xE000000000000000;
    _StringGuts.grow(_:)(29);
    swift_bridgeObjectRelease((_BYTE)v54);
    unint64_t v53 = 0xD00000000000001ALL;
    uint64_t v54 = "There should be a single input." + 0x8000000000000000;
    uint64_t v47 = swift_allocObject(v60, 56, 7);
    char v48 = v47;
    *(void *)(v47 + 16) = 3;
    *(void *)(v47 + 24) = 6;
    *(void *)(v47 + 32) = *(void *)(v27 + *(int *)(v61 + 40));
    *(__m128i *)(v47 + 40) = _mm_shuffle_epi32(_mm_loadu_si128((const __m128i *)(v66 + 24)), 78);
    v49._uint64_t countAndFlagsBits = Array.description.getter(v47, &type metadata for Int);
    char object = (char)v49._object;
    String.append(_:)(v49);
    swift_bridgeObjectRelease(v48);
    swift_bridgeObjectRelease(object);
    v51._uint64_t countAndFlagsBits = 46;
    v51._char object = (void *)0xE100000000000000;
    String.append(_:)(v51);
    _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, v53, v54, "CreateML/MLHandActionClassifier+PackageExport.swift", 51, 2, 31, 0);
LABEL_8:
    BUG();
  }
  uint64_t v34 = (uint64_t)v59;
  Tensor.expandingShape(at:)(&outlined read-only object #0 of MLHandActionClassifier.GraphCNN.MLPackageRepresentation.forward(_:));
  uint64_t v35 = v55;
  MLHandActionClassifier.GraphCNN.callAsFunction(_:)(v34);
  uint64_t v66 = *(void *)(v64 + 8);
  uint64_t v36 = v62;
  ((void (*)(uint64_t, uint64_t))v66)(v34, v62);
  uint64_t v37 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, Tensor)>);
  uint64_t v38 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (String, Tensor));
  uint64_t v39 = *(void *)(v38 - 8);
  uint64_t v40 = *(unsigned __int8 *)(v39 + 80);
  uint64_t v41 = ((int)v40 + 32) & ~*(unsigned __int8 *)(v39 + 80);
  uint64_t v42 = swift_allocObject(v37, v41 + *(void *)(v39 + 72), v40 | 7);
  *(void *)(v42 + 16) = 1;
  *(void *)(v42 + 24) = 2;
  uint64_t v43 = v42 + v41 + *(int *)(v38 + 48);
  *(void *)(v42 + v41) = 0xD000000000000010;
  *(void *)(v42 + v41 + 8) = "labelProbabilityRaw" + 0x8000000000000000;
  (*(void (**)(uint64_t, unsigned char *, uint64_t))(v64 + 16))(v43, v35, v36);
  uint64_t v44 = Dictionary.init(dictionaryLiteral:)(v42, &type metadata for String, v36, &protocol witness table for String);
  uint64_t v45 = (void (*)(unsigned char *, uint64_t))v66;
  ((void (*)(unsigned char *, uint64_t))v66)(v35, v36);
  v45(v65, v36);
  return v44;
}

uint64_t protocol witness for Layer.forward(_:) in conformance MLHandActionClassifier.GraphCNN.MLPackageRepresentation(uint64_t *a1)
{
  uint64_t v3 = v1;
  uint64_t result = MLHandActionClassifier.GraphCNN.MLPackageRepresentation.forward(_:)(*a1, *v2);
  *uint64_t v3 = result;
  return result;
}

uint64_t protocol witness for _ComputeDevicePlaceable.place(on:) in conformance MLHandActionClassifier.GraphCNN.MLPackageRepresentation(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = lazy protocol witness table accessor for type MLHandActionClassifier.GraphCNN.MLPackageRepresentation and conformance MLHandActionClassifier.GraphCNN.MLPackageRepresentation();
  return Layer.place(on:)(a1, a2, v2);
}

uint64_t protocol witness for _ComputeDevicePlaceable.placed(on:) in conformance MLHandActionClassifier.GraphCNN.MLPackageRepresentation(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = lazy protocol witness table accessor for type MLHandActionClassifier.GraphCNN.MLPackageRepresentation and conformance MLHandActionClassifier.GraphCNN.MLPackageRepresentation();
  return Layer.placed(on:)(a1, a2, v2);
}

uint64_t MLHandActionClassifier.GraphCNN.convertIntoClassifier(_:)(uint64_t a1)
{
  uint64_t v30 = v1;
  uint64_t v39 = type metadata accessor for ModelKind(0);
  uint64_t v38 = *(void *)(v39 - 8);
  int64_t v2 = *(void *)(v38 + 64);
  uint64_t v3 = alloca(v2);
  uint64_t v4 = alloca(v2);
  uint64_t v29 = &v28;
  uint64_t v5 = alloca(v2);
  int64_t v6 = alloca(v2);
  uint64_t v32 = &v28;
  uint64_t v36 = type metadata accessor for MLProgram(0);
  uint64_t v37 = *(void *)(v36 - 8);
  int64_t v7 = *(void *)(v37 + 64);
  char v8 = alloca(v7);
  int64_t v9 = alloca(v7);
  uint64_t v31 = &v28;
  uint64_t v41 = type metadata accessor for FeatureType(0);
  uint64_t v33 = *(void *)(v41 - 8);
  int64_t v10 = *(void *)(v33 + 64);
  int64_t v11 = alloca(v10);
  uint64_t v12 = alloca(v10);
  uint64_t v35 = a1;
  Model.predictedFeatureName.setter(0x6C6562616CLL, 0xE500000000000000);
  outputProbabilityName = "shape does not match." + 0x8000000000000000;
  Model.predictedProbabilitiesName.setter(0xD000000000000012, "shape does not match." + 0x8000000000000000);
  uint64_t v13 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<FeatureDescription>);
  uint64_t v14 = *(void *)(type metadata accessor for FeatureDescription(0) - 8);
  uint64_t v34 = *(void *)(v14 + 72);
  uint64_t v15 = swift_allocObject(v13, ((*(unsigned __int8 *)(v14 + 80) + 32) & ~*(unsigned __int8 *)(v14 + 80)) + 2 * v34, *(unsigned __int8 *)(v14 + 80) | 7);
  *(void *)(v15 + 16) = 2;
  *(void *)(v15 + 24) = 4;
  FeatureType.StringParameters.init(optional:)(0);
  (*(void (**)(uint64_t *, void, uint64_t))(v33 + 104))(&v28, enum case for FeatureType.string(_:), v41);
  FeatureDescription.init(name:type:description:)(0x6C6562616CLL, 0xE500000000000000, &v28, 0, 0xE000000000000000);
  static FeatureType.dictionaryWithStringKeys(optional:)(0);
  int64_t v16 = v32;
  FeatureDescription.init(name:type:description:)(0xD000000000000012, outputProbabilityName, &v28, 0, 0xE000000000000000);
  uint64_t v17 = v15;
  uint64_t v18 = v39;
  Model.outputs.setter(v17);
  Model.kind.getter();
  uint64_t v19 = v38;
  LODWORD(v41) = (*(uint64_t (**)(uint64_t *, uint64_t))(v38 + 88))(v16, v18);
  if (v41 != enum case for ModelKind.mlProgram(_:))
  {
    (*(void (**)(uint64_t *, uint64_t))(v19 + 8))(v16, v18);
    _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, 0xD000000000000026, "ityClassifier.Model.swift" + 0x8000000000000000, "CreateML/MLHandActionClassifier+PackageExport.swift", 51, 2, 69, 0);
    BUG();
  }
  (*(void (**)(uint64_t *, uint64_t))(v19 + 96))(v16, v18);
  uint64_t v20 = v31;
  uint64_t v21 = v16;
  uint64_t v22 = v36;
  (*(void (**)(uint64_t *, uint64_t *, uint64_t))(v37 + 32))(v31, v21, v36);
  v23._char rawValue = *(void **)(v30 + 16);
  swift_bridgeObjectRetain(v23._rawValue);
  v42._uint64_t countAndFlagsBits = 0x6C6562616CLL;
  v42._char object = (void *)0xE500000000000000;
  MLProgram.addClassifierSpecification(classLabels:probabilityTensorName:outputProbabilityName:outputLabelName:)(v23, (Swift::String)__PAIR128__((unint64_t)("labelProbabilityRaw" + 0x8000000000000000), 0xD000000000000010), (Swift::String)__PAIR128__((unint64_t)outputProbabilityName, 0xD000000000000012), v42);
  swift_bridgeObjectRelease(v23._rawValue);
  uint64_t v24 = v29;
  uint64_t v25 = v22;
  uint64_t v26 = v37;
  (*(void (**)(uint64_t *, uint64_t *, uint64_t))(v37 + 16))(v29, v20, v25);
  (*(void (**)(uint64_t *, void, uint64_t))(v38 + 104))(v24, v41, v39);
  Model.kind.setter(v24);
  return (*(uint64_t (**)(uint64_t *, uint64_t))(v26 + 8))(v20, v36);
}

uint64_t lazy protocol witness table accessor for type MLHandActionClassifier.GraphCNN.MLPackageRepresentation and conformance MLHandActionClassifier.GraphCNN.MLPackageRepresentation()
{
  uint64_t result = lazy protocol witness table cache variable for type MLHandActionClassifier.GraphCNN.MLPackageRepresentation and conformance MLHandActionClassifier.GraphCNN.MLPackageRepresentation;
  if (!lazy protocol witness table cache variable for type MLHandActionClassifier.GraphCNN.MLPackageRepresentation and conformance MLHandActionClassifier.GraphCNN.MLPackageRepresentation)
  {
    uint64_t result = swift_getWitnessTable(&protocol conformance descriptor for MLHandActionClassifier.GraphCNN.MLPackageRepresentation, &unk_39BCF0);
    lazy protocol witness table cache variable for type MLHandActionClassifier.GraphCNN.MLPackageRepresentation and conformance MLHandActionClassifier.GraphCNN.MLPackageRepresentation = result;
  }
  return result;
}

{
  uint64_t result;

  uint64_t result = lazy protocol witness table cache variable for type MLHandActionClassifier.GraphCNN.MLPackageRepresentation and conformance MLHandActionClassifier.GraphCNN.MLPackageRepresentation;
  if (!lazy protocol witness table cache variable for type MLHandActionClassifier.GraphCNN.MLPackageRepresentation and conformance MLHandActionClassifier.GraphCNN.MLPackageRepresentation)
  {
    uint64_t result = swift_getWitnessTable(&protocol conformance descriptor for MLHandActionClassifier.GraphCNN.MLPackageRepresentation, &unk_39BCF0);
    lazy protocol witness table cache variable for type MLHandActionClassifier.GraphCNN.MLPackageRepresentation and conformance MLHandActionClassifier.GraphCNN.MLPackageRepresentation = result;
  }
  return result;
}

{
  uint64_t result;

  uint64_t result = lazy protocol witness table cache variable for type MLHandActionClassifier.GraphCNN.MLPackageRepresentation and conformance MLHandActionClassifier.GraphCNN.MLPackageRepresentation;
  if (!lazy protocol witness table cache variable for type MLHandActionClassifier.GraphCNN.MLPackageRepresentation and conformance MLHandActionClassifier.GraphCNN.MLPackageRepresentation)
  {
    uint64_t result = swift_getWitnessTable(&protocol conformance descriptor for MLHandActionClassifier.GraphCNN.MLPackageRepresentation, &unk_39BCF0);
    lazy protocol witness table cache variable for type MLHandActionClassifier.GraphCNN.MLPackageRepresentation and conformance MLHandActionClassifier.GraphCNN.MLPackageRepresentation = result;
  }
  return result;
}

{
  uint64_t result;

  uint64_t result = lazy protocol witness table cache variable for type MLHandActionClassifier.GraphCNN.MLPackageRepresentation and conformance MLHandActionClassifier.GraphCNN.MLPackageRepresentation;
  if (!lazy protocol witness table cache variable for type MLHandActionClassifier.GraphCNN.MLPackageRepresentation and conformance MLHandActionClassifier.GraphCNN.MLPackageRepresentation)
  {
    uint64_t result = swift_getWitnessTable(&protocol conformance descriptor for MLHandActionClassifier.GraphCNN.MLPackageRepresentation, &unk_39BCF0);
    lazy protocol witness table cache variable for type MLHandActionClassifier.GraphCNN.MLPackageRepresentation and conformance MLHandActionClassifier.GraphCNN.MLPackageRepresentation = result;
  }
  return result;
}

void *type metadata accessor for MLHandActionClassifier.GraphCNN.MLPackageRepresentation()
{
  return &unk_39BCF0;
}

uint64_t base witness table accessor for _BaseLayer in MLHandActionClassifier.GraphCNN.MLPackageRepresentation()
{
  return lazy protocol witness table accessor for type MLHandActionClassifier.GraphCNN.MLPackageRepresentation and conformance MLHandActionClassifier.GraphCNN.MLPackageRepresentation();
}

uint64_t base witness table accessor for _ComputeDevicePlaceable in MLHandActionClassifier.GraphCNN.MLPackageRepresentation()
{
  return lazy protocol witness table accessor for type MLHandActionClassifier.GraphCNN.MLPackageRepresentation and conformance MLHandActionClassifier.GraphCNN.MLPackageRepresentation();
}

uint64_t base witness table accessor for _Differentiable in MLHandActionClassifier.GraphCNN.MLPackageRepresentation()
{
  return lazy protocol witness table accessor for type MLHandActionClassifier.GraphCNN.MLPackageRepresentation and conformance MLHandActionClassifier.GraphCNN.MLPackageRepresentation();
}

uint64_t outlined destroy of (key: String, value: Tensor)?(uint64_t a1)
{
  uint64_t v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (key: String, value: Tensor)?);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v1 - 8) + 8))(a1, v1);
  return a1;
}

uint64_t type metadata instantiation function for RecommenderTrainingData(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_allocateGenericValueMetadata(a1, a2, a3, 64);
}

uint64_t destroy for RecommenderTrainingData(void *a1)
{
  return swift_release(a1[9]);
}

uint64_t initializeWithCopy for RecommenderTrainingData(uint64_t a1, uint64_t *a2)
{
  uint64_t v3 = *a2;
  *(void *)a1 = *a2;
  uint64_t v4 = a2[1];
  *(void *)(a1 + 8) = v4;
  uint64_t v5 = a2[2];
  *(void *)(a1 + 16) = v5;
  uint64_t v6 = a2[3];
  *(void *)(a1 + 24) = v6;
  *(_OWORD *)(a1 + 32) = *((_OWORD *)a2 + 2);
  *(unsigned char *)(a1 + 48) = *((unsigned char *)a2 + 48);
  uint64_t v7 = a2[7];
  *(void *)(a1 + 56) = v7;
  uint64_t v10 = a2[8];
  *(void *)(a1 + 64) = v10;
  uint64_t v9 = a2[9];
  *(void *)(a1 + 72) = v9;
  swift_bridgeObjectRetain(v3);
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRetain(v5);
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRetain(v7);
  swift_bridgeObjectRetain(v10);
  swift_retain(v9);
  return a1;
}

uint64_t *assignWithCopy for RecommenderTrainingData(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3 = *a2;
  uint64_t v4 = *a1;
  *a1 = *a2;
  swift_bridgeObjectRetain(v3);
  swift_bridgeObjectRelease(v4);
  uint64_t v5 = a2[1];
  uint64_t v6 = a1[1];
  a1[1] = v5;
  swift_bridgeObjectRetain(v5);
  swift_bridgeObjectRelease(v6);
  uint64_t v7 = a2[2];
  uint64_t v8 = a1[2];
  a1[2] = v7;
  swift_bridgeObjectRetain(v7);
  swift_bridgeObjectRelease(v8);
  uint64_t v9 = a2[3];
  uint64_t v10 = a1[3];
  a1[3] = v9;
  swift_bridgeObjectRetain(v9);
  swift_bridgeObjectRelease(v10);
  a1[4] = a2[4];
  a1[5] = a2[5];
  *((unsigned char *)a1 + 48) = *((unsigned char *)a2 + 48);
  uint64_t v11 = a2[7];
  uint64_t v12 = a1[7];
  a1[7] = v11;
  swift_bridgeObjectRetain(v11);
  swift_bridgeObjectRelease(v12);
  uint64_t v13 = a2[8];
  uint64_t v14 = a1[8];
  a1[8] = v13;
  swift_bridgeObjectRetain(v13);
  swift_bridgeObjectRelease(v14);
  uint64_t v15 = a2[9];
  uint64_t v16 = a1[9];
  a1[9] = v15;
  swift_retain(v15);
  swift_release(v16);
  return a1;
}

uint64_t assignWithTake for RecommenderTrainingData(uint64_t a1, uint64_t a2)
{
  swift_bridgeObjectRelease(*(void *)a1);
  uint64_t v3 = *(void *)(a1 + 8);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  swift_bridgeObjectRelease(v3);
  swift_bridgeObjectRelease(*(void *)(a1 + 16));
  uint64_t v4 = *(void *)(a1 + 24);
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  swift_bridgeObjectRelease(v4);
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  *(unsigned char *)(a1 + 48) = *(unsigned char *)(a2 + 48);
  swift_bridgeObjectRelease(*(void *)(a1 + 56));
  uint64_t v5 = *(void *)(a1 + 64);
  *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
  swift_bridgeObjectRelease(v5);
  uint64_t v6 = *(void *)(a1 + 72);
  *(void *)(a1 + 72) = *(void *)(a2 + 72);
  swift_release(v6);
  return a1;
}

uint64_t getEnumTagSinglePayload for RecommenderTrainingData(uint64_t a1, int a2)
{
  if (a2)
  {
    if (a2 < 0 && *(unsigned char *)(a1 + 80)) {
      int v2 = *(_DWORD *)a1 + 0x7FFFFFFF;
    }
    else {
      int v2 = (*(void *)a1 & 0xFFFFFFFF00000001) != 0 ? -1 : *(void *)a1 >> 1;
    }
  }
  else
  {
    int v2 = -1;
  }
  return (v2 + 1);
}

void storeEnumTagSinglePayload for RecommenderTrainingData(uint64_t a1, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)(a1 + 72) = 0;
    *(_OWORD *)(a1 + 56) = 0;
    *(_OWORD *)(a1 + 40) = 0;
    *(_OWORD *)(a1 + 24) = 0;
    *(_OWORD *)(a1 + 8) = 0;
    *(void *)a1 = a2 + 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(a1 + 80) = 1;
    }
  }
  else
  {
    if (a3 < 0) {
      *(unsigned char *)(a1 + 80) = 0;
    }
    if (a2) {
      *(void *)a1 = 2 * (a2 - 1);
    }
  }
}

uint64_t type metadata accessor for RecommenderTrainingData(uint64_t a1, uint64_t a2)
{
  return swift_getGenericMetadata(a1, a2, &nominal type descriptor for RecommenderTrainingData);
}

void *_sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lF11TabularData6ColumnVySaySdGG_14NeuralNetworks6TensorVsAE_pTg5036_s8CreateML20MLActivityClassifierV11e88BatcherV17asWeightedSamples4with11classLabels6labelsSayAA0hE6SampleVGAC13ConfigurationV_u12SSGAOSgtKF14g9Networks6I15VSaySdGSgKXEfU_SSTf1cn_n(uint64_t a1, uint64_t a2, void *a3, double a4, double a5)
{
  uint64_t v83 = v5;
  uint64_t v82 = a3;
  v72._uint64_t countAndFlagsBits = a2;
  int64_t v6 = *(void *)(*(void *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ComputeDevice?)
                             - 8)
                 + 64);
  uint64_t v7 = alloca(v6);
  uint64_t v8 = alloca(v6);
  uint64_t v62 = v60;
  uint64_t v63 = type metadata accessor for ScalarType(0);
  uint64_t v64 = *(void *)(v63 - 8);
  int64_t v9 = *(void *)(v64 + 64);
  uint64_t v10 = alloca(v9);
  uint64_t v11 = alloca(v9);
  uint64_t v65 = v60;
  uint64_t v66 = type metadata accessor for TensorShape(0);
  uint64_t v71 = *(void *)(v66 - 8);
  int64_t v12 = *(void *)(v71 + 64);
  uint64_t v13 = alloca(v12);
  uint64_t v14 = alloca(v12);
  uint64_t v81 = v60;
  int64_t v15 = *(void *)(*(void *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TensorShape?)
                              - 8)
                  + 64);
  uint64_t v16 = alloca(v15);
  uint64_t v17 = alloca(v15);
  uint64_t v67 = v60;
  uint64_t v18 = alloca(v15);
  uint64_t v19 = alloca(v15);
  char v73 = v60;
  uint64_t v68 = type metadata accessor for Tensor(0);
  uint64_t v69 = *(void *)(v68 - 8);
  int64_t v20 = *(void *)(v69 + 64);
  uint64_t v21 = alloca(v20);
  uint64_t v22 = alloca(v20);
  uint64_t v24 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Column<[Double]>);
  uint64_t v25 = lazy protocol witness table accessor for type FullyConnectedNetworkClassifier<Float, String> and conformance FullyConnectedNetworkClassifier<A, B>(&lazy protocol witness table cache variable for type Column<[Double]> and conformance Column<A>, &demangling cache variable for type metadata for Column<[Double]>, (uint64_t)&protocol conformance descriptor for Column<A>);
  uint64_t v79 = v24;
  uint64_t v26 = v24;
  uint64_t v27 = v25;
  uint64_t v28 = dispatch thunk of Collection.count.getter(v26, v25);
  if (v28)
  {
    uint64_t v78 = _swiftEmptyArrayStorage;
    int64_t v29 = 0;
    if (v28 > 0) {
      int64_t v29 = v28;
    }
    uint64_t v80 = v28;
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v29, 0);
    uint64_t v84 = v78;
    uint64_t v74 = v27;
    dispatch thunk of Collection.startIndex.getter(v79, v27);
    uint64_t v30 = v80;
    if (v80 < 0) {
      BUG();
    }
    unsigned int v77 = enum case for ScalarType.float32(_:);
    uint64_t v70 = a1;
    uint64_t v75 = v60;
    while (1)
    {
      BOOL v31 = v30 == 0;
      uint64_t v32 = v30 - 1;
      if (v31) {
        BUG();
      }
      uint64_t v80 = v32;
      uint64_t v33 = (void (*)(unsigned char *, void))dispatch thunk of Collection.subscript.read(v60, &v72._object, v79, v74);
      uint64_t v35 = *v34;
      swift_bridgeObjectRetain(*v34);
      v33(v60, 0);
      if (!v35) {
        break;
      }
      uint64_t v76 = v35;
      uint64_t v36 = (uint64_t)v73;
      uint64_t v37 = v66;
      __swift_storeEnumTagSinglePayload((uint64_t)v73, 1, 1, v66);
      uint64_t v38 = v36;
      uint64_t v39 = (uint64_t)v67;
      outlined init with copy of Either<LogisticRegressionClassifier<Float, String>, FullyConnectedNetworkClassifier<Float, String>>(v38, (uint64_t)v67, &demangling cache variable for type metadata for TensorShape?);
      if (__swift_getEnumTagSinglePayload(v39, 1, v37) == 1)
      {
        uint64_t v40 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Int>);
        uint64_t v41 = (void *)swift_allocObject(v40, 40, 7);
        v41[2] = 1;
        v41[3] = 2;
        uint64_t v42 = v76;
        v41[4] = *(void *)(v76 + 16);
        TensorShape.init(_:)(v41, a4, a5);
        outlined destroy of Tensor?(v39, &demangling cache variable for type metadata for TensorShape?);
      }
      else
      {
        (*(void (**)(unsigned char *, uint64_t, uint64_t))(v71 + 32))(v81, v39, v37);
        uint64_t v42 = v76;
      }
      uint64_t v43 = v65;
      (*(void (**)(unsigned char *, void, uint64_t))(v64 + 104))(v65, v77, v63);
      uint64_t v44 = type metadata accessor for ComputeDevice(0);
      uint64_t v45 = (uint64_t)v62;
      __swift_storeEnumTagSinglePayload((uint64_t)v62, 1, 1, v44);
      uint64_t v46 = alloca(24);
      uint64_t v47 = alloca(32);
      uint64_t v61 = v42;
      uint64_t v48 = v83;
      Tensor.init(unsafeUninitializedShape:scalarType:computeDevice:initializingWith:)(v81, v43, v45, partial apply for closure #1 in Array<A>.floatTensor(shape:));
      uint64_t v83 = v48;
      outlined destroy of Tensor?((uint64_t)v73, &demangling cache variable for type metadata for TensorShape?);
      swift_bridgeObjectRelease(v42);
      Swift::String v49 = v84;
      uint64_t v78 = v84;
      unint64_t v50 = v84[2];
      if (v84[3] >> 1 <= v50)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v84[3] >= 2uLL, v50 + 1, 1);
        Swift::String v49 = v78;
      }
      int v49[2] = v50 + 1;
      int v51 = *(unsigned __int8 *)(v69 + 80);
      uint64_t v84 = v49;
      (*(void (**)(char *, unsigned char *, uint64_t))(v69 + 32))((char *)v49 + ((v51 + 32) & ~v51) + *(void *)(v69 + 72) * v50, v75, v68);
      dispatch thunk of Collection.formIndex(after:)(&v72._object, v79, v74);
      uint64_t v30 = v80;
      if (!v80)
      {
        swift_bridgeObjectRelease((_BYTE)v82);
        return v84;
      }
    }
    uint64_t v52 = lazy protocol witness table accessor for type MLCreateError and conformance MLCreateError();
    swift_allocError(&type metadata for MLCreateError, v52, 0, 0);
    v53._uint64_t countAndFlagsBits = v72._countAndFlagsBits;
    char v54 = (char)v82;
    v53._char object = v82;
    static MLCreateError.featureNotFound(feature:)(v53);
    swift_willThrow(v53._countAndFlagsBits, v53._object, v55, v56, v57, v58);
    swift_bridgeObjectRelease(v54);
    return (void *)swift_release();
  }
  else
  {
    swift_bridgeObjectRelease((_BYTE)v82);
    return _swiftEmptyArrayStorage;
  }
}

void *_sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSnySiG_14NeuralNetworks6TensorVs5NeverOTg50128_s8CreateML20MLActivityClassifierV11DataBatcherV17asWeightedSamples4with11classLabels6labelsSayAA0hE6SampleVGAC13ConfigurationV_t12SSGAOSgtKF14d9Networks6F9VSiXEfU0_SaySayAIGGTf1cn_n(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v4 = v3;
  uint64_t v18 = a3;
  uint64_t v5 = a2;
  uint64_t v19 = type metadata accessor for Tensor(0);
  uint64_t v20 = *(void *)(v19 - 8);
  int64_t v6 = *(void *)(v20 + 64);
  uint64_t v7 = alloca(v6);
  uint64_t v8 = alloca(v6);
  uint64_t v22 = &v15;
  uint64_t v23 = a1;
  uint64_t v9 = a2 - a1;
  if (__OFSUB__(a2, a1)) {
    BUG();
  }
  if (a2 == a1) {
    return _swiftEmptyArrayStorage;
  }
  uint64_t v24 = _swiftEmptyArrayStorage;
  int64_t v10 = 0;
  if (v9 > 0) {
    int64_t v10 = v9;
  }
  specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v10, 0);
  if (v9 < 0) {
    BUG();
  }
  uint64_t v11 = v24;
  uint64_t v12 = v23;
  uint64_t v21 = v5;
  while (1)
  {
    if (v5 == v12) {
      BUG();
    }
    uint64_t v16 = v12;
    closure #2 in MLActivityClassifier.DataBatcher.asWeightedSamples(with:classLabels:labels:)(&v16, v18);
    if (v4) {
      break;
    }
    uint64_t v17 = 0;
    uint64_t v24 = v11;
    unint64_t v13 = v11[2];
    if (v11[3] >> 1 <= v13)
    {
      specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v11[3] >= 2uLL, v13 + 1, 1);
      uint64_t v11 = v24;
    }
    v11[2] = v13 + 1;
    (*(void (**)(char *, uint64_t *, uint64_t))(v20 + 32))((char *)v11+ ((*(unsigned __int8 *)(v20 + 80) + 32) & ~*(unsigned __int8 *)(v20 + 80))+ *(void *)(v20 + 72) * v13, v22, v19);
    uint64_t v5 = v21;
    if (v21 < v23) {
      BUG();
    }
    if (v12 >= v21) {
      BUG();
    }
    ++v12;
    uint64_t v4 = v17;
    if (v21 == v12) {
      return v11;
    }
  }
  swift_release();
  return v11;
}

void *_sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSaySaySiGG_14NeuralNetworks6TensorVs5NeverOTg50128_s8CreateML20MLActivityClassifierV11DataBatcherV17asWeightedSamples4with11classLabels6labelsSayAA0hE6SampleVGAC13ConfigurationV_t12SSGAOSgtKF14d9Networks6F13VSaySiGXEfU2_SaySSGTf1cn_n(uint64_t a1, uint64_t a2)
{
  int64_t v3 = *(void *)(*(void *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ComputeDevice?)
                             - 8)
                 + 64);
  uint64_t v4 = alloca(v3);
  uint64_t v5 = alloca(v3);
  uint64_t v22 = &v17;
  uint64_t v23 = type metadata accessor for Tensor(0);
  uint64_t v24 = *(void *)(v23 - 8);
  int64_t v6 = *(void *)(v24 + 64);
  uint64_t v7 = alloca(v6);
  uint64_t v8 = alloca(v6);
  uint64_t v21 = a1;
  int64_t v9 = *(void *)(a1 + 16);
  if (v9)
  {
    uint64_t v29 = a2;
    uint64_t v28 = v2;
    uint64_t v30 = _swiftEmptyArrayStorage;
    uint64_t v10 = 0;
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v9, 0);
    uint64_t v11 = v30;
    uint64_t v26 = type metadata accessor for ComputeDevice(0);
    int64_t v25 = v9;
    uint64_t v27 = &v17;
    do
    {
      uint64_t v18 = v10;
      uint64_t v17 = *(void *)(v21 + 8 * v10 + 32);
      char v12 = v17;
      uint64_t v19 = *(void *)(v29 + 16);
      uint64_t v13 = (uint64_t)v22;
      __swift_storeEnumTagSinglePayload((uint64_t)v22, 1, 1, v26);
      swift_bridgeObjectRetain(v12);
      uint64_t v20 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [Int]);
      uint64_t v14 = lazy protocol witness table accessor for type FullyConnectedNetworkClassifier<Float, String> and conformance FullyConnectedNetworkClassifier<A, B>(&lazy protocol witness table cache variable for type [Int] and conformance [A], &demangling cache variable for type metadata for [Int], (uint64_t)&protocol conformance descriptor for [A]);
      Tensor.init<A>(oneHotAtIndices:depth:onValue:offValue:on:)(&v17, v19, v13, v20, v14, 1.0, 0.0);
      uint64_t v30 = v11;
      unint64_t v15 = v11[2];
      if (v11[3] >> 1 <= v15)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v11[3] >= 2uLL, v15 + 1, 1);
        uint64_t v11 = v30;
      }
      uint64_t v10 = v18 + 1;
      v11[2] = v15 + 1;
      (*(void (**)(char *, uint64_t *, uint64_t))(v24 + 32))((char *)v11+ ((*(unsigned __int8 *)(v24 + 80) + 32) & ~*(unsigned __int8 *)(v24 + 80))+ *(void *)(v24 + 72) * v15, v27, v23);
    }
    while (v25 != v10);
    swift_bridgeObjectRelease(v29);
  }
  else
  {
    swift_bridgeObjectRelease(a2);
    return _swiftEmptyArrayStorage;
  }
  return v11;
}

uint64_t MLActivityClassifier.Trainer.train(on:validationData:eventHandler:)(uint64_t a1, void *a2, void (*a3)(void), uint64_t a4)
{
  uint64_t v225 = v5;
  uint64_t v217 = v6;
  uint64_t v202 = a4;
  v201 = a3;
  uint64_t v185 = v4;
  uint64_t v182 = type metadata accessor for Event(0, a2, a3);
  uint64_t v183 = *(void *)(v182 - 8);
  int64_t v7 = *(void *)(v183 + 64);
  uint64_t v8 = alloca(v7);
  int64_t v9 = alloca(v7);
  uint64_t v184 = &v175;
  uint64_t v196 = type metadata accessor for MetricsKey(0);
  uint64_t v187 = *(void *)(v196 - 8);
  int64_t v10 = *(void *)(v187 + 64);
  uint64_t v11 = alloca(v10);
  char v12 = alloca(v10);
  Swift::String v188 = &v175;
  uint64_t v13 = alloca(v10);
  uint64_t v14 = alloca(v10);
  uint64_t v186 = &v175;
  int64_t v15 = *(void *)(*(void *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for DataFrame?)
                              - 8)
                  + 64);
  uint64_t v16 = alloca(v15);
  uint64_t v17 = alloca(v15);
  v181 = &v175;
  uint64_t v192 = type metadata accessor for WeightedDataSample(0);
  int64_t v18 = *(void *)(*(void *)(v192 - 8) + 64);
  uint64_t v19 = alloca(v18);
  uint64_t v20 = alloca(v18);
  uint64_t v177 = &v175;
  int64_t v21 = *(void *)(*(void *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for WeightedDataSample?)
                              - 8)
                  + 64);
  uint64_t v22 = alloca(v21);
  uint64_t v23 = alloca(v21);
  uint64_t v193 = &v175;
  uint64_t v179 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for LazyMapSequence<Batches<LazyPrefetchingMapSequence<LazySequence<Sampling<[WeightedDataSample]>>, WeightedDataSample>>, WeightedDataSample>.Iterator);
  int64_t v24 = *(void *)(*(void *)(v179 - 8) + 64);
  int64_t v25 = alloca(v24);
  uint64_t v26 = alloca(v24);
  v205 = &v175;
  uint64_t v212 = type metadata accessor for Tensor(0);
  uint64_t v199 = *(void *)(v212 - 8);
  int64_t v27 = *(void *)(v199 + 64);
  uint64_t v28 = alloca(v27);
  uint64_t v29 = alloca(v27);
  uint64_t v189 = &v175;
  uint64_t v30 = alloca(v27);
  BOOL v31 = alloca(v27);
  double v180 = &v175;
  uint64_t v32 = alloca(v27);
  uint64_t v33 = alloca(v27);
  uint64_t v178 = &v175;
  uint64_t v34 = alloca(v27);
  uint64_t v35 = alloca(v27);
  v214 = &v175;
  uint64_t v218 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Dataset<[WeightedDataSample], WeightedDataSample>);
  uint64_t v216 = *(void *)(v218 - 8);
  int64_t v36 = *(void *)(v216 + 64);
  uint64_t v37 = alloca(v36);
  uint64_t v38 = alloca(v36);
  uint64_t v194 = &v175;
  uint64_t v39 = alloca(v36);
  uint64_t v40 = alloca(v36);
  uint64_t v222 = &v175;
  double v226 = COERCE_DOUBLE(type metadata accessor for LearningPhase(0));
  v213 = *(void (**)(uint64_t, uint64_t))(*(void *)&v226 - 8);
  int64_t v41 = *((void *)v213 + 8);
  uint64_t v42 = alloca(v41);
  uint64_t v43 = alloca(v41);
  uint64_t v209 = (char *)&v175;
  int64_t v44 = *(void *)(*(void *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for RegularizationKind?)
                              - 8)
                  + 64);
  uint64_t v45 = alloca(v44);
  uint64_t v46 = alloca(v44);
  v200 = &v175;
  int64_t v47 = *(void *)(*(void *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for GradientClippingMode?)
                              - 8)
                  + 64);
  uint64_t v48 = alloca(v47);
  Swift::String v49 = alloca(v47);
  v206 = (void (**)(uint64_t *, uint64_t *, uint64_t))&v175;
  int64_t v50 = *(void *)(*(void *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Adam<MLActivityClassifier.Model>)
                              - 8)
                  + 64);
  int v51 = alloca(v50);
  uint64_t v52 = alloca(v50);
  v220 = &v175;
  uint64_t v195 = type metadata accessor for MLActivityClassifier.Model(0);
  int64_t v53 = *(void *)(*(void *)(v195 - 8) + 64);
  char v54 = alloca(v53);
  uint64_t v55 = alloca(v53);
  uint64_t v207 = &v175;
  uint64_t v56 = alloca(v53);
  uint64_t v57 = alloca(v53);
  uint64_t v224 = (char *)&v175;
  uint64_t v219 = type metadata accessor for DataFrame(0);
  uint64_t v221 = *(void *)(v219 - 8);
  int64_t v58 = *(void *)(v221 + 64);
  long long v59 = alloca(v58);
  uint64_t v60 = alloca(v58);
  uint64_t v61 = alloca(v58);
  uint64_t v62 = alloca(v58);
  v215 = &v175;
  uint64_t v63 = v225;
  uint64_t result = MLActivityClassifier.Trainer.validateData(_:_:)(a1, a2);
  if (!v63)
  {
    v204 = &v175;
    uint64_t v190 = (uint64_t)a2;
    uint64_t v65 = (uint64_t)v215;
    (*(void (**)(uint64_t *, uint64_t, uint64_t))(v221 + 16))(v215, a1, v219);
    uint64_t v66 = *(int *)(type metadata accessor for MLActivityClassifier.Trainer(0) + 20);
    uint64_t v225 = 0;
    uint64_t v67 = v217;
    uint64_t v208 = *(void *)((char *)v217 + v66 + 48);
    v68._uint64_t countAndFlagsBits = v208;
    v198 = *(int **)((char *)v217 + v66 + 56);
    v68._char object = v198;
    DataFrame.convertNumericColumnsToFloat(except:)(v68);
    v68._uint64_t countAndFlagsBits = v65;
    uint64_t v69 = v198;
    char v223 = (void (*)(void **, uint64_t))MLActivityClassifier.Trainer.getClassLabels(_:_:)(v68._countAndFlagsBits);
    uint64_t v197 = *(void *)((char *)v67 + v66 + 8);
    double v210 = *(double *)((char *)v67 + v66 + 32);
    uint64_t v70 = *(void *)((char *)v67 + v66 + 40);
    uint64_t v203 = v66;
    LOBYTE(v66) = *((unsigned char *)v67 + v66 + 16);
    swift_bridgeObjectRetain(v70);
    uint64_t v71 = (uint64_t)v69;
    swift_bridgeObjectRetain((_BYTE)v69);
    Swift::String v72 = v223;
    swift_bridgeObjectRetain((_BYTE)v223);
    MLActivityClassifier.Model.init(windowSize:features:target:classLabels:randomSeed:)(*(uint64_t *)&v210, v70, v208, v71, (uint64_t)v72, v197, v66);
    uint64_t v73 = type metadata accessor for GradientClippingMode(0);
    uint64_t v74 = v206;
    __swift_storeEnumTagSinglePayload((uint64_t)v206, 1, 1, v73);
    uint64_t v75 = type metadata accessor for RegularizationKind(0);
    uint64_t v76 = (uint64_t)v200;
    __swift_storeEnumTagSinglePayload((uint64_t)v200, 1, 1, v75);
    uint64_t v208 = lazy protocol witness table accessor for type VNImageOption and conformance VNImageOption(&lazy protocol witness table cache variable for type MLActivityClassifier.Model and conformance MLActivityClassifier.Model, type metadata accessor for MLActivityClassifier.Model, (uint64_t)&protocol conformance descriptor for MLActivityClassifier.Model);
    uint64_t v77 = v195;
    Adam.init(for:learningRate:beta1:beta2:usesAMSGrad:epsilon:gradientClippingMode:regularizationKind:gradientScale:)(v224, 0, v74, v76, v195, v208, 0.001, 0.89999998, 0.99900001, 0.0000000099999999, 1.0);
    uint64_t v78 = (uint64_t)v209;
    double v79 = v226;
    uint64_t v80 = v213;
    (*((void (**)(char *, void, double))v213 + 13))(v209, enum case for LearningPhase.training(_:), COERCE_DOUBLE(*(void *)&v226));
    Layer.prepare(for:)(v78, v77, v208);
    v68._uint64_t countAndFlagsBits = v78;
    uint64_t v81 = v223;
    double v82 = ((double (*)(uint64_t, double))v80[1])(v68._countAndFlagsBits, COERCE_DOUBLE(*(void *)&v79));
    uint64_t v83 = (uint64_t)v215;
    uint64_t v84 = v225;
    MLActivityClassifier.Trainer.makeDataset(_:_:using:for:)(v81, (uint64_t)v215, (uint64_t)v224, 0, v82, COERCE_DOUBLE(1063675494));
    if (v84)
    {
      swift_bridgeObjectRelease((_BYTE)v81);
      outlined destroy of Tensor?((uint64_t)v220, &demangling cache variable for type metadata for Adam<MLActivityClassifier.Model>);
      uint64_t v85 = v83;
LABEL_4:
      (*(void (**)(uint64_t, uint64_t))(v221 + 8))(v85, v219);
      uint64_t v86 = v224;
      return outlined destroy of MLActivityClassifier.ModelParameters((uint64_t)v86, type metadata accessor for MLActivityClassifier.Model);
    }
    swift_bridgeObjectRetain((_BYTE)v81);
    uint64_t v87 = ClassificationMetricsContainer.init(classLabels:)((uint64_t)v81);
    uint64_t v225 = 0;
    uint64_t v88 = v87;
    uint64_t v90 = v89;
    uint64_t v91 = *(int *)(v195 + 72);
    int v92 = v224;
    uint64_t v209 = &v224[v91];
    uint64_t v93 = *(void *)&v224[v91];
    uint64_t v94 = *(void *)&v224[v91 + 8];
    uint64_t v95 = *(void *)&v224[v91 + 16];
    double v226 = *(double *)&v96;
    outlined consume of ClassificationMetricsContainer?(v93, v94, v95);
    *(void *)&v92[v91] = v88;
    *(void *)&v92[v91 + 8] = v90;
    *(double *)&v92[v91 + 16] = v226;
    uint64_t v97 = *(void *)((char *)v217 + v203);
    if (v97 < 0) {
      BUG();
    }
    uint64_t v98 = v225;
    uint64_t v99 = (void (*)(uint64_t *, uint64_t *, uint64_t))v223;
    if (!v97) {
      goto LABEL_34;
    }
    v206 = (void (**)(uint64_t *, uint64_t *, uint64_t))&v92[v91 + 8];
    uint64_t v100 = 0;
    uint64_t v197 = v97;
    while (2)
    {
      if (v100 == v97) {
        BUG();
      }
      BOOL v101 = *(void *)v209 == 0;
      v200 = (uint64_t *)v100;
      if (!v101)
      {
        uint64_t v102 = v98;
        uint64_t v225 = *((void *)v209 + 2);
        uint64_t v103 = *(void *)(v225 + 16);
        uint64_t v104 = type metadata accessor for _MetricUtilities.ConfusionMatrixMeter(0);
        swift_allocObject(v104, *(unsigned int *)(v104 + 48), *(unsigned __int16 *)(v104 + 52));
        uint64_t v105 = _MetricUtilities.ConfusionMatrixMeter.init(classCount:)(v103);
        if (v102)
        {
          long long v172 = v224;
          uint64_t v173 = v220;
          swift_bridgeObjectRelease((_BYTE)v223);
          (*(void (**)(uint64_t *, uint64_t))(v216 + 8))(v222, v218);
          outlined destroy of Tensor?((uint64_t)v173, &demangling cache variable for type metadata for Adam<MLActivityClassifier.Model>);
          (*(void (**)(uint64_t *, uint64_t))(v221 + 8))(v215, v219);
          uint64_t v86 = v172;
          return outlined destroy of MLActivityClassifier.ModelParameters((uint64_t)v86, type metadata accessor for MLActivityClassifier.Model);
        }
        uint64_t v106 = v105;
        uint64_t v107 = v209;
        swift_release();
        *(void *)uint64_t v107 = v106;
        uint64_t v108 = *(void *)(v225 + 16);
        swift_allocObject(v104, *(unsigned int *)(v104 + 48), *(unsigned __int16 *)(v104 + 52));
        uint64_t v109 = _MetricUtilities.ConfusionMatrixMeter.init(classCount:)(v108);
        uint64_t v98 = 0;
        int64_t v110 = (void (*)(uint64_t *, uint64_t *, uint64_t))v109;
        char v111 = v206;
        uint64_t v99 = *v206;
        swift_release();
        *char v111 = v110;
        uint64_t v100 = (uint64_t)v200;
      }
      uint64_t v225 = v98;
      uint64_t v208 = v100 + 1;
      static Tensor.zero.getter(v99);
      uint64_t v112 = (uint64_t)v205;
      Dataset.makeIterator()(v218);
      v213 = (void (*)(uint64_t, uint64_t))*(int *)(v179 + 44);
      double v226 = COERCE_DOUBLE(lazy protocol witness table accessor for type FullyConnectedNetworkClassifier<Float, String> and conformance FullyConnectedNetworkClassifier<A, B>(&lazy protocol witness table cache variable for type Batches<LazyPrefetchingMapSequence<LazySequence<Sampling<[WeightedDataSample]>>, WeightedDataSample>>.Iterator and conformance Batches<A>.Iterator, &demangling cache variable for type metadata for Batches<LazyPrefetchingMapSequence<LazySequence<Sampling<[WeightedDataSample]>>, WeightedDataSample>>.Iterator, (uint64_t)&protocol conformance descriptor for Batches<A>.Iterator));
      uint64_t v113 = v192;
      while (1)
      {
        uint64_t v114 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Batches<LazyPrefetchingMapSequence<LazySequence<Sampling<[WeightedDataSample]>>, WeightedDataSample>>.Iterator);
        dispatch thunk of IteratorProtocol.next()(v114, *(void *)&v226);
        uint64_t v115 = v112;
        char v116 = v211;
        if (v211)
        {
          uint64_t v117 = *(void (**)(uint64_t *))((char *)v213 + v115);
          uint64_t v176 = v211;
          uint64_t v118 = v193;
          v117(&v176);
          uint64_t v119 = (uint64_t)v118;
          swift_bridgeObjectRelease(v116);
          uint64_t v120 = (uint64_t)v118;
          uint64_t v121 = 0;
        }
        else
        {
          uint64_t v119 = (uint64_t)v193;
          uint64_t v120 = (uint64_t)v193;
          uint64_t v121 = 1;
        }
        __swift_storeEnumTagSinglePayload(v120, v121, 1, v113);
        uint64_t v98 = v225;
        int EnumTagSinglePayload = __swift_getEnumTagSinglePayload(v119, 1, v113);
        uint64_t v123 = v119;
        uint64_t v124 = v214;
        if (EnumTagSinglePayload == 1) {
          break;
        }
        uint64_t v125 = (uint64_t)v177;
        outlined init with take of WeightedDataSample(v123, (uint64_t)v177);
        static Task<>.checkCancellation()();
        if (v98)
        {
          swift_bridgeObjectRelease((_BYTE)v223);
          outlined destroy of MLActivityClassifier.ModelParameters(v125, type metadata accessor for WeightedDataSample);
          outlined destroy of Tensor?((uint64_t)v205, &demangling cache variable for type metadata for LazyMapSequence<Batches<LazyPrefetchingMapSequence<LazySequence<Sampling<[WeightedDataSample]>>, WeightedDataSample>>, WeightedDataSample>.Iterator);
          (*(void (**)(uint64_t *, uint64_t))(v199 + 8))(v124, v212);
          (*(void (**)(uint64_t *, uint64_t))(v216 + 8))(v222, v218);
          outlined destroy of Tensor?((uint64_t)v220, &demangling cache variable for type metadata for Adam<MLActivityClassifier.Model>);
          uint64_t v85 = (uint64_t)v215;
          goto LABEL_4;
        }
        char v126 = v178;
        MLActivityClassifier.Trainer.update(_:using:on:)(v224, v220, v125, v82, COERCE_DOUBLE(1063675494));
        uint64_t v225 = 0;
        static Tensor.+= infix(_:_:)(v214, v126);
        (*(void (**)(uint64_t *, uint64_t))(v199 + 8))(v126, v212);
        outlined destroy of MLActivityClassifier.ModelParameters(v125, type metadata accessor for WeightedDataSample);
        uint64_t v113 = v192;
        uint64_t v112 = (uint64_t)v205;
      }
      outlined destroy of Tensor?((uint64_t)v205, &demangling cache variable for type metadata for LazyMapSequence<Batches<LazyPrefetchingMapSequence<LazySequence<Sampling<[WeightedDataSample]>>, WeightedDataSample>>, WeightedDataSample>.Iterator);
      if (!*(void *)v209) {
        BUG();
      }
      swift_retain();
      uint64_t v127 = (uint64_t)v180;
      _MetricUtilities.ConfusionMatrixMeter.value(normalized:)(0, v82, COERCE_DOUBLE(1063675494));
      swift_release();
      uint64_t v128 = *((void *)v223 + 2);
      double v82 = static _MetricUtilities.top1Accuracy(confusionMatrix:classCount:)(v127, v128);
      double v226 = v82;
      uint64_t v129 = *(void (**)(uint64_t, uint64_t))(v199 + 8);
      uint64_t v130 = v127;
      uint64_t v131 = v212;
      v129(v130, v212);
      if (!v201)
      {
        uint64_t v144 = v214;
        goto LABEL_33;
      }
      uint64_t v191 = v128;
      v213 = v129;
      uint64_t v132 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(MetricsKey, Double)>);
      uint64_t v133 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (MetricsKey, Double));
      uint64_t v134 = *(void *)(v133 - 8);
      v198 = (int *)v133;
      double v210 = *(double *)(v134 + 72);
      uint64_t v135 = *(unsigned __int8 *)(v134 + 80);
      uint64_t v136 = ((int)v135 + 32) & ~*(unsigned __int8 *)(v134 + 80);
      uint64_t v137 = swift_allocObject(v132, v136 + 2 * *(void *)&v210, v135 | 7);
      *(void *)(v137 + 16) = 2;
      *(void *)(v137 + 24) = 4;
      uint64_t v138 = v202;
      swift_retain();
      static MetricsKey.trainingLoss.getter(v138);
      Tensor.scalar<A>(as:)(&type metadata for Double, &type metadata for Double, &protocol witness table for Double);
      uint64_t v139 = *(void *)&v210 + v137 + v136;
      uint64_t v140 = v198[12];
      static MetricsKey.trainingAccuracy.getter();
      double v82 = v226;
      *(double *)(v140 + v139) = v226;
      uint64_t v141 = lazy protocol witness table accessor for type VNImageOption and conformance VNImageOption(&lazy protocol witness table cache variable for type MetricsKey and conformance MetricsKey, (uint64_t (*)(uint64_t))&type metadata accessor for MetricsKey, (uint64_t)&protocol conformance descriptor for MetricsKey);
      double v226 = COERCE_DOUBLE(Dictionary.init(dictionaryLiteral:)(v137, v196, &type metadata for Double, v141));
      uint64_t v142 = (uint64_t)v181;
      outlined init with copy of Either<LogisticRegressionClassifier<Float, String>, FullyConnectedNetworkClassifier<Float, String>>(v190, (uint64_t)v181, &demangling cache variable for type metadata for DataFrame?);
      uint64_t v143 = v219;
      if (__swift_getEnumTagSinglePayload(v142, 1, v219) == 1)
      {
        outlined destroy of Tensor?(v142, &demangling cache variable for type metadata for DataFrame?);
LABEL_27:
        Swift::String v148 = v217;
        uint64_t v149 = v203;
        uint64_t v150 = *(void *)&v226;
LABEL_32:
        double v226 = *(double *)((char *)v148 + v149);
        uint64_t v162 = *v148;
        uint64_t v163 = v148[1];
        swift_bridgeObjectRetain(v163);
        uint64_t v164 = specialized _dictionaryUpCast<A, B, C, D>(_:)(v150);
        swift_bridgeObjectRelease(v150);
        uint64_t v165 = v184;
        Event.init(origin:itemCount:totalItemCount:metrics:)(v162, v163, v200, *(void *)&v226, 0, v164);
        uint64_t v166 = v202;
        long long v167 = v201;
        v201(v165);
        _sxRi_zRi0_zlySaySdGIsegr_SgWOe((uint64_t)v167, v166);
        (*(void (**)(uint64_t *, uint64_t))(v183 + 8))(v165, v182);
        uint64_t v98 = v225;
        uint64_t v131 = v212;
        uint64_t v144 = v214;
        uint64_t v129 = v213;
LABEL_33:
        v129((uint64_t)v144, v131);
        uint64_t v100 = v208;
        uint64_t v97 = v197;
        int v92 = v224;
        uint64_t v99 = (void (*)(uint64_t *, uint64_t *, uint64_t))v223;
        if (v208 != v197) {
          continue;
        }
LABEL_34:
        swift_bridgeObjectRelease((_BYTE)v99);
        v168.super.Class isa = MLActivityClassifier.Model.makeMLModel()().super.isa;
        if (v169)
        {
          (*(void (**)(uint64_t *, uint64_t))(v216 + 8))(v222, v218);
          outlined destroy of Tensor?((uint64_t)v220, &demangling cache variable for type metadata for Adam<MLActivityClassifier.Model>);
          (*(void (**)(uint64_t *, uint64_t))(v221 + 8))(v215, v219);
        }
        else
        {
          Class isa = v168.super.isa;
          (*(void (**)(uint64_t *, uint64_t))(v216 + 8))(v222, v218);
          outlined destroy of Tensor?((uint64_t)v220, &demangling cache variable for type metadata for Adam<MLActivityClassifier.Model>);
          (*(void (**)(uint64_t *, uint64_t))(v221 + 8))(v215, v219);
          uint64_t v171 = *(int *)(v195 + 68);

          *(void *)&v92[v171] = isa;
          outlined init with copy of MLTrainingSessionParameters((uint64_t)v92, v185, type metadata accessor for MLActivityClassifier.Model);
        }
        uint64_t v86 = v92;
        return outlined destroy of MLActivityClassifier.ModelParameters((uint64_t)v86, type metadata accessor for MLActivityClassifier.Model);
      }
      break;
    }
    uint64_t v145 = (uint64_t)v204;
    uint64_t v146 = v142;
    uint64_t v147 = v221;
    (*(void (**)(uint64_t *, uint64_t, uint64_t))(v221 + 32))(v204, v146, v143);
    if (DataFrameProtocol.isEmpty.getter(v143, &protocol witness table for DataFrame))
    {
      (*(void (**)(uint64_t, uint64_t))(v147 + 8))(v145, v143);
      goto LABEL_27;
    }
    uint64_t v151 = v224;
    outlined init with copy of MLTrainingSessionParameters((uint64_t)v224, (uint64_t)v207, type metadata accessor for MLActivityClassifier.Model);
    uint64_t v152 = v225;
    MLActivityClassifier.Trainer.makeDataset(_:_:using:for:)(v223, v145, (uint64_t)v151, 1, v82, COERCE_DOUBLE(1063675494));
    if (!v152)
    {
      if (!*(void *)v209) {
        BUG();
      }
      uint64_t v153 = (uint64_t)v194;
      MLActivityClassifier.Trainer.evaluate(model:using:classLabels:confussionMatrix:)((uint64_t)v207, v82, COERCE_DOUBLE(1063675494), (uint64_t)v194, (uint64_t)v223, v206);
      double v210 = v82;
      uint64_t v154 = (uint64_t)v186;
      uint64_t v225 = 0;
      (*(void (**)(uint64_t, uint64_t))(v216 + 8))(v153, v218);
      outlined destroy of MLActivityClassifier.ModelParameters((uint64_t)v207, type metadata accessor for MLActivityClassifier.Model);
      static MetricsKey.validationLoss.getter();
      double v155 = v226;
      unsigned __int8 isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*(void *)&v226);
      uint64_t v211 = *(void *)&v155;
      double v157 = v210;
      specialized _NativeDictionary.setValue(_:forKey:isUnique:)(v154, isUniquelyReferenced_nonNull_native, v210);
      uint64_t v158 = v211;
      swift_bridgeObjectRelease(0);
      double v226 = *(double *)(v187 + 8);
      (*(void (**)(uint64_t, uint64_t))&v226)(v154, v196);
      uint64_t v159 = (uint64_t)v188;
      static MetricsKey.validationAccuracy.getter();
      if (!*(void *)v209) {
        BUG();
      }
      swift_retain();
      uint64_t v160 = (uint64_t)v189;
      _MetricUtilities.ConfusionMatrixMeter.value(normalized:)(0, v157, COERCE_DOUBLE(1063675494));
      swift_release();
      double v210 = static _MetricUtilities.top1Accuracy(confusionMatrix:classCount:)(v160, v191);
      v213(v160, v212);
      unsigned __int8 v161 = swift_isUniquelyReferenced_nonNull_native(v158);
      uint64_t v211 = v158;
      double v82 = v210;
      specialized _NativeDictionary.setValue(_:forKey:isUnique:)(v159, v161, v210);
      uint64_t v150 = v211;
      swift_bridgeObjectRelease(0);
      (*(void (**)(uint64_t, uint64_t))&v226)(v159, v196);
      (*(void (**)(uint64_t *, uint64_t))(v221 + 8))(v204, v219);
      Swift::String v148 = v217;
      uint64_t v149 = v203;
      goto LABEL_32;
    }
    _sxRi_zRi0_zlySaySdGIsegr_SgWOe((uint64_t)v201, v202);
    swift_bridgeObjectRelease((_BYTE)v223);
    outlined destroy of MLActivityClassifier.ModelParameters((uint64_t)v207, type metadata accessor for MLActivityClassifier.Model);
    uint64_t v174 = *(void (**)(uint64_t *, uint64_t))(v221 + 8);
    v174(v204, v143);
    swift_bridgeObjectRelease(LOBYTE(v226));
    v213((uint64_t)v214, v212);
    (*(void (**)(uint64_t *, uint64_t))(v216 + 8))(v222, v218);
    outlined destroy of Tensor?((uint64_t)v220, &demangling cache variable for type metadata for Adam<MLActivityClassifier.Model>);
    v174(v215, v143);
    uint64_t v86 = v151;
    return outlined destroy of MLActivityClassifier.ModelParameters((uint64_t)v86, type metadata accessor for MLActivityClassifier.Model);
  }
  return result;
}

uint64_t MLActivityClassifier.Trainer.init(checkpoint:configuration:)(uint64_t a1, uint64_t a2)
{
  uint64_t v70 = v3;
  uint64_t v63 = a1;
  uint64_t v5 = v2;
  int64_t v6 = *(void *)(*(void *)(type metadata accessor for MLActivityClassifier.Model(0) - 8) + 64);
  int64_t v7 = alloca(v6);
  uint64_t v8 = alloca(v6);
  uint64_t v56 = &v38;
  int64_t v9 = *(void *)(*(void *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Adam<MLActivityClassifier.Model>)
                             - 8)
                 + 64);
  int64_t v10 = alloca(v9);
  uint64_t v11 = alloca(v9);
  uint64_t v61 = &v38;
  uint64_t v66 = type metadata accessor for URL(0);
  uint64_t v12 = *(void *)(v66 - 8);
  int64_t v13 = *(void *)(v12 + 64);
  uint64_t v14 = alloca(v13);
  int64_t v15 = alloca(v13);
  uint64_t v67 = &v38;
  *uint64_t v5 = 0xD00000000000001BLL;
  v5[1] = "Starting a new session in '" + 0x8000000000000000;
  uint64_t v16 = type metadata accessor for MLActivityClassifier.Trainer(0);
  uint64_t v17 = *(int *)(v16 + 24);
  *(void *)((char *)v5 + v17) = 0;
  outlined init with copy of MLTrainingSessionParameters(a2, (uint64_t)v5 + *(int *)(v16 + 20), type metadata accessor for MLActivityClassifier.Configuration);
  MLActivityClassifier.Trainer.initializeModel()();
  if (v19)
  {
    outlined destroy of MLActivityClassifier.ModelParameters(a2, type metadata accessor for MLActivityClassifier.Configuration);
    (*(void (**)(uint64_t, uint64_t))(v12 + 8))(v63, v66);
    return outlined destroy of MLActivityClassifier.ModelParameters((uint64_t)v5, type metadata accessor for MLActivityClassifier.Trainer);
  }
  else
  {
    uint64_t v70 = 0;
    uint64_t v64 = a2;
    uint64_t v65 = v12;
    uint64_t v58 = v17;
    uint64_t v57 = *(void *)((char *)v5 + v17);
    if (!v57) {
      BUG();
    }
    uint64_t v21 = (uint64_t)v5;
    uint64_t v22 = v67;
    uint64_t v23 = v63;
    URL.appendingPathComponent(_:)(0x7461446C65646F6DLL, 0xE900000000000061);
    v39[0] = 1;
    uint64_t v40 = 44;
    unint64_t v41 = 0xE100000000000000;
    uint64_t v42 = 0;
    char v69 = 1;
    unint64_t v43 = 0xE000000000000000;
    uint64_t v44 = 92;
    unint64_t v45 = 0xE100000000000000;
    char v46 = 1;
    uint64_t v47 = 34;
    unint64_t v48 = 0xE100000000000000;
    char v49 = 1;
    int64_t v50 = &outlined read-only object #0 of default argument 1 of MLDataTable.init(contentsOf:options:);
    uint64_t v51 = 10;
    unint64_t v52 = 0xE100000000000000;
    long long v53 = 0;
    char v54 = 1;
    uint64_t v55 = 0;
    uint64_t v24 = v70;
    MLDataTable.init(contentsOf:options:)(v22, v39);
    if (v24)
    {
      outlined destroy of MLActivityClassifier.ModelParameters(v64, type metadata accessor for MLActivityClassifier.Configuration);
      (*(void (**)(uint64_t, uint64_t))(v65 + 8))(v23, v66);
      return outlined destroy of MLActivityClassifier.ModelParameters(v21, type metadata accessor for MLActivityClassifier.Trainer);
    }
    else
    {
      uint64_t v67 = (uint64_t *)v21;
      uint64_t v25 = (uint64_t)v59;
      int v26 = v60;
      uint64_t v27 = specialized static _ModelCheckpoint<>.getCheckpointDictionary(from:)(v59, v60, 0.0);
      int v68 = v26;
      uint64_t v62 = v25;
      uint64_t v28 = OBJC_IVAR____TtCVV8CreateML20MLActivityClassifier7Trainer14ModelContainer_model + v57;
      uint64_t v29 = (void *)v27;
      swift_beginAccess(OBJC_IVAR____TtCVV8CreateML20MLActivityClassifier7Trainer14ModelContainer_model + v57, v39, 0, 0);
      uint64_t v30 = v28;
      BOOL v31 = v29;
      uint64_t v32 = (uint64_t)v56;
      outlined init with copy of MLTrainingSessionParameters(v30, (uint64_t)v56, type metadata accessor for MLActivityClassifier.Model);
      specialized static Adam.createOptimizer(for:checkpointDictionary:)(v32, (uint64_t)v31);
      uint64_t v70 = 0;
      uint64_t v33 = v63;
      outlined destroy of MLActivityClassifier.ModelParameters(v32, type metadata accessor for MLActivityClassifier.Model);
      if (!*(uint64_t *)((char *)v67 + v58)) {
        BUG();
      }
      swift_retain();
      uint64_t v34 = v33;
      uint64_t v35 = v33;
      uint64_t v36 = (uint64_t)v61;
      uint64_t v37 = v70;
      specialized _ModelCheckpoint<>.updateGraph<A>(from:optimizer:checkpointDictionary:)(0.0, v18, v35, (uint64_t)v61, v31);
      uint64_t v70 = v37;
      swift_release();
      outlined consume of Result<_DataTable, Error>(v62, v68);
      swift_bridgeObjectRelease((_BYTE)v31);
      outlined destroy of MLActivityClassifier.ModelParameters(v64, type metadata accessor for MLActivityClassifier.Configuration);
      (*(void (**)(uint64_t, uint64_t))(v65 + 8))(v34, v66);
      if (v37)
      {
        outlined destroy of Tensor?(v36, &demangling cache variable for type metadata for Adam<MLActivityClassifier.Model>);
        return outlined destroy of MLActivityClassifier.ModelParameters((uint64_t)v67, type metadata accessor for MLActivityClassifier.Trainer);
      }
      else
      {
        return outlined destroy of Tensor?(v36, &demangling cache variable for type metadata for Adam<MLActivityClassifier.Model>);
      }
    }
  }
}

void *_sSTsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFs18EnumeratedSequenceVySay14NeuralNetworks6TensorVGG_8CreateML18WeightedDataSampleVs5NeverOTg506_sSi14f9Networks6h2V8i4ML18klm32VIgynr_Si6offset_AC7elementtAFs5N11OIegnrzr_TRSiAjOIgynr_Tf1cn_n(uint64_t a1, void (*a2)(uint64_t, char *), uint64_t a3)
{
  uint64_t v30 = a3;
  BOOL v31 = a2;
  uint64_t v32 = *(void *)(type metadata accessor for WeightedDataSample(0) - 8);
  int64_t v3 = *(void *)(v32 + 64);
  uint64_t v4 = alloca(v3);
  uint64_t v5 = alloca(v3);
  unint64_t v41 = &v28;
  uint64_t v42 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (offset: Int, element: Tensor));
  int64_t v6 = *(void *)(*(void *)(v42 - 8) + 64);
  int64_t v7 = alloca(v6);
  uint64_t v8 = alloca(v6);
  uint64_t v33 = &v28;
  int64_t v9 = alloca(v6);
  int64_t v10 = alloca(v6);
  uint64_t v34 = &v28;
  uint64_t v11 = alloca(v6);
  uint64_t v12 = alloca(v6);
  uint64_t v35 = &v28;
  uint64_t v44 = _swiftEmptyArrayStorage;
  specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, 0, 0);
  int64_t v13 = v44;
  uint64_t v14 = *(void *)(a1 + 16);
  uint64_t v43 = a1;
  swift_bridgeObjectRetain(a1);
  uint64_t v36 = v14;
  if (v14)
  {
    uint64_t v15 = 0;
    uint64_t v37 = type metadata accessor for Tensor(0);
    uint64_t v16 = *(void *)(v37 - 8);
    uint64_t v17 = v43 + ((*(unsigned __int8 *)(v16 + 80) + 32) & ~*(unsigned __int8 *)(v16 + 80));
    uint64_t v39 = *(void (**)(char *, uint64_t, uint64_t))(v16 + 16);
    uint64_t v38 = v16;
    uint64_t v40 = *(void *)(v16 + 72);
    do
    {
      uint64_t v18 = v42;
      uint64_t v19 = (char *)v33 + *(int *)(v42 + 48);
      uint64_t v29 = v17;
      uint64_t v20 = v37;
      v39(v19, v17, v37);
      uint64_t v21 = *(int *)(v18 + 48);
      uint64_t v22 = (uint64_t)v34;
      uint64_t v23 = (char *)v34 + v21;
      uint64_t v28 = v15;
      uint64_t *v34 = v15;
      (*(void (**)(char *, char *, uint64_t))(v38 + 32))(v23, v19, v20);
      uint64_t v24 = v35;
      outlined init with take of DataFrame?(v22, (uint64_t)v35, &demangling cache variable for type metadata for (offset: Int, element: Tensor));
      v31(*v24, (char *)v24 + *(int *)(v42 + 48));
      outlined destroy of Tensor?((uint64_t)v24, &demangling cache variable for type metadata for (offset: Int, element: Tensor));
      int64_t v13 = v44;
      if (!swift_isUniquelyReferenced_nonNull_native(v44))
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v13[2] + 1, 1);
        int64_t v13 = v44;
      }
      unint64_t v25 = v13[2];
      uint64_t v26 = v28;
      if (v13[3] >> 1 <= v25)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v13[3] >= 2uLL, v25 + 1, 1);
        int64_t v13 = v44;
      }
      uint64_t v15 = v26 + 1;
      _OWORD v13[2] = v25 + 1;
      outlined init with take of WeightedDataSample((uint64_t)v41, (uint64_t)v13+ ((*(unsigned __int8 *)(v32 + 80) + 32) & ~*(unsigned __int8 *)(v32 + 80))+ *(void *)(v32 + 72) * v25);
      uint64_t v17 = v40 + v29;
    }
    while (v36 != v15);
  }
  swift_bridgeObjectRelease(v43);
  return v13;
}

BOOL specialized Sequence.allSatisfy(_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v43 = a2;
  uint64_t v2 = type metadata accessor for AnyColumn(0);
  uint64_t v3 = *(void *)(v2 - 8);
  int64_t v4 = *(void *)(v3 + 64);
  uint64_t v5 = alloca(v4);
  int64_t v6 = alloca(v4);
  uint64_t v34 = &v33;
  int64_t v7 = alloca(v4);
  uint64_t v8 = alloca(v4);
  uint64_t v35 = &v33;
  int64_t v9 = alloca(v4);
  int64_t v10 = alloca(v4);
  uint64_t v36 = &v33;
  int64_t v11 = *(void *)(*(void *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AnyColumn?)
                              - 8)
                  + 64);
  uint64_t v12 = alloca(v11);
  int64_t v13 = alloca(v11);
  uint64_t v14 = &v33;
  uint64_t v15 = *(void *)(a1 + 16);
  uint64_t v40 = a1;
  if (v15)
  {
    uint64_t v38 = v15;
    uint64_t v16 = a1 + ((*(unsigned __int8 *)(v3 + 80) + 32) & ~*(unsigned __int8 *)(v3 + 80));
    uint64_t v44 = *(void (**)(uint64_t *, uint64_t, uint64_t))(v3 + 16);
    uint64_t v39 = *(void *)(v3 + 72);
    swift_bridgeObjectRetain(a1);
    uint64_t v41 = v3;
    uint64_t v37 = &v33;
    while (1)
    {
      v44(v14, v16, v2);
      __swift_storeEnumTagSinglePayload((uint64_t)v14, 0, 1, v2);
      int EnumTagSinglePayload = __swift_getEnumTagSinglePayload((uint64_t)v14, 1, v2);
      BOOL v46 = EnumTagSinglePayload == 1;
      if (EnumTagSinglePayload == 1) {
        break;
      }
      uint64_t v33 = v16;
      uint64_t v18 = v36;
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(v41 + 32))(v36, v14, v2);
      uint64_t v19 = AnyColumn.name.getter();
      char v21 = v20;
      char v22 = specialized Set.contains(_:)(v19, v20, v43);
      swift_bridgeObjectRelease(v21);
      uint64_t v23 = v35;
      v44(v35, (uint64_t)v18, v2);
      BOOL v24 = 1;
      if (v22) {
        BOOL v24 = AnyColumn.wrappedElementType.getter() == (void)&type metadata for Double;
      }
      BOOL v45 = v24;
      uint64_t v42 = *(void (**)(uint64_t *, uint64_t))(v41 + 8);
      v42(v23, v2);
      unint64_t v25 = v34;
      v44(v34, (uint64_t)v18, v2);
      if (v45)
      {
        uint64_t v26 = v25;
        uint64_t v27 = v42;
        v42(v26, v2);
        v27(v18, v2);
      }
      else
      {
        uint64_t v28 = (void *)AnyColumn.wrappedElementType.getter();
        uint64_t v29 = v25;
        uint64_t v30 = v42;
        v42(v29, v2);
        v30(v18, v2);
        if (v28 != &type metadata for Float) {
          break;
        }
      }
      uint64_t v16 = v39 + v33;
      BOOL v31 = v38-- == 1;
      uint64_t v14 = v37;
      if (v31) {
        goto LABEL_12;
      }
    }
  }
  else
  {
    swift_bridgeObjectRetain(a1);
LABEL_12:
    __swift_storeEnumTagSinglePayload((uint64_t)v14, 1, 1, v2);
    BOOL v46 = 1;
  }
  swift_bridgeObjectRelease(v43);
  swift_bridgeObjectRelease(v40);
  return v46;
}

void *specialized Sequence.sorted(by:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  swift_bridgeObjectRetain(a1);
  swift_retain();
  uint64_t v5 = specialized _copySequenceToContiguousArray<A>(_:)(a1, a2, a3);
  swift_release();
  swift_bridgeObjectRelease(a1);
  uint64_t v8 = v5;
  specialized MutableCollection<>.sort(by:)(&v8);
  int64_t v6 = v8;
  if (v3) {
    swift_release();
  }
  return v6;
}

uint64_t specialized Sequence.first(where:)(void (*a1)(void *, void), void *a2)
{
  int64_t v50 = a2;
  uint64_t v51 = a1;
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for FilledColumn<Column<String>>);
  uint64_t v3 = *(void *)(v2 - 8);
  int64_t v4 = *(void *)(v3 + 64);
  uint64_t v5 = alloca(v4);
  int64_t v6 = alloca(v4);
  uint64_t v49 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for IndexingIterator<FilledColumn<Column<String>>>);
  int64_t v7 = *(void *)(*(void *)(v49 - 8) + 64);
  uint64_t v8 = alloca(v7);
  int64_t v9 = alloca(v7);
  uint64_t v42 = v3;
  uint64_t v44 = *(void (**)(void *, void (*)(void, void), uint64_t))(v3 + 16);
  v44(v40, (void (*)(void, void))v51, v2);
  uint64_t v10 = lazy protocol witness table accessor for type FullyConnectedNetworkClassifier<Float, String> and conformance FullyConnectedNetworkClassifier<A, B>(&lazy protocol witness table cache variable for type FilledColumn<Column<String>> and conformance FilledColumn<A>, &demangling cache variable for type metadata for FilledColumn<Column<String>>, (uint64_t)&protocol conformance descriptor for FilledColumn<A>);
  uint64_t v43 = v40;
  dispatch thunk of Sequence.makeIterator()(v2, v10);
  int64_t v11 = (void (*)(void *, void))*(int *)(v49 + 36);
  uint64_t v12 = lazy protocol witness table accessor for type FullyConnectedNetworkClassifier<Float, String> and conformance FullyConnectedNetworkClassifier<A, B>(&lazy protocol witness table cache variable for type FilledColumn<Column<String>> and conformance FilledColumn<A>, &demangling cache variable for type metadata for FilledColumn<Column<String>>, (uint64_t)&protocol conformance descriptor for FilledColumn<A>);
  uint64_t v51 = v11;
  uint64_t v13 = *(void *)((char *)v40 + (void)v11);
  unint64_t v48 = v40;
  uint64_t v47 = v2;
  uint64_t v14 = v2;
  uint64_t v15 = v12;
  dispatch thunk of Collection.endIndex.getter(v14, v12);
  if (v13 == v40[0])
  {
    uint64_t v16 = 0;
    char v17 = (char)v50;
    uint64_t v18 = (uint64_t)v48;
  }
  else
  {
    uint64_t v19 = (char *)v48 + (void)v51;
    BOOL v45 = v50 + 7;
    uint64_t v20 = v47;
    uint64_t v18 = (uint64_t)v48;
    uint64_t v46 = v15;
    uint64_t v49 = (uint64_t)v48 + (void)v51;
    while (1)
    {
      char v21 = v19;
      uint64_t v22 = v15;
      uint64_t v23 = v18;
      uint64_t v51 = (void (*)(void *, void))dispatch thunk of Collection.subscript.read(v40, v21, v20, v22);
      uint64_t v25 = *v24;
      uint64_t v41 = v24[1];
      swift_bridgeObjectRetain(v41);
      uint64_t v16 = v25;
      v51(v40, 0);
      uint64_t v26 = v43;
      v44(v43, (void (*)(void, void))v23, v20);
      dispatch thunk of Collection.formIndex(after:)(v49, v20, v46);
      (*(void (**)(void *, uint64_t))(v42 + 8))(v26, v20);
      LOBYTE(v27) = v41;
      uint64_t v51 = (void (*)(void *, void))v50[2];
      if (!v51) {
        break;
      }
      uint64_t v28 = v50[4];
      uint64_t v29 = v50[5];
      if (v28 != v16 || v29 != v41)
      {
        uint64_t v30 = v41;
        char v31 = _stringCompareWithSmolCheck(_:_:expecting:)(v28, v29, v16, v41, 0);
        uint64_t v27 = v30;
        if ((v31 & 1) == 0)
        {
          if (v51 == (void (*)(void *, void))((char *)&dword_0 + 1)) {
            break;
          }
          uint64_t v33 = v45;
          uint64_t v34 = 1;
          while (1)
          {
            if (__OFADD__(1, v34++)) {
              BUG();
            }
            uint64_t v36 = *(v33 - 1);
            uint64_t v37 = *v33;
            if (v36 == v16 && v37 == v27) {
              break;
            }
            char v38 = _stringCompareWithSmolCheck(_:_:expecting:)(v36, v37, v16, v30, 0);
            uint64_t v27 = v30;
            if (v38) {
              break;
            }
            v33 += 2;
            if ((void (*)(void *, void))v34 == v51) {
              goto LABEL_17;
            }
          }
        }
      }
      swift_bridgeObjectRelease(v27);
      uint64_t v51 = *(void (**)(void *, void))v49;
      uint64_t v32 = v48;
      uint64_t v20 = v47;
      uint64_t v15 = v46;
      dispatch thunk of Collection.endIndex.getter(v47, v46);
      uint64_t v19 = (char *)v49;
      uint64_t v18 = (uint64_t)v32;
      char v17 = (char)v50;
      if (v51 == (void (*)(void *, void))v40[0])
      {
        uint64_t v16 = 0;
        goto LABEL_18;
      }
    }
LABEL_17:
    char v17 = (char)v50;
    uint64_t v18 = (uint64_t)v48;
  }
LABEL_18:
  outlined destroy of Tensor?(v18, &demangling cache variable for type metadata for IndexingIterator<FilledColumn<Column<String>>>);
  swift_bridgeObjectRelease(v17);
  return v16;
}

uint64_t static MLActivityClassifier.Trainer.reshapeLabels(prediction:target:weights:)(unint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, void (*a5)(void, void, void), void (*a6)(unint64_t *, uint64_t))
{
  long long v59 = a6;
  unsigned __int8 v60 = a5;
  uint64_t v63 = a3;
  uint64_t v51 = a2;
  unint64_t v52 = a1;
  int64_t v6 = *(void *)(*(void *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Tensor?)
                             - 8)
                 + 64);
  int64_t v7 = alloca(v6);
  uint64_t v8 = alloca(v6);
  long long v53 = &v49;
  uint64_t v57 = type metadata accessor for TensorShape(0);
  uint64_t v62 = *(void *)(v57 - 8);
  int64_t v9 = *(void *)(v62 + 64);
  uint64_t v10 = alloca(v9);
  int64_t v11 = alloca(v9);
  uint64_t v55 = &v49;
  uint64_t v12 = alloca(v9);
  uint64_t v13 = alloca(v9);
  uint64_t v14 = type metadata accessor for Tensor(0);
  uint64_t v15 = *(void *)(v14 - 8);
  int64_t v16 = *(void *)(v15 + 64);
  char v17 = alloca(v16);
  uint64_t v18 = alloca(v16);
  char v54 = &v49;
  uint64_t v19 = alloca(v16);
  uint64_t v20 = alloca(v16);
  uint64_t v58 = &v49;
  char v21 = alloca(v16);
  uint64_t v22 = alloca(v16);
  uint64_t v23 = &v49;
  BOOL v24 = alloca(v16);
  uint64_t v25 = alloca(v16);
  uint64_t v61 = &v49;
  Tensor.transposed(permutation:)(&outlined read-only object #0 of static MLActivityClassifier.Trainer.reshapeLabels(prediction:target:weights:));
  uint64_t v26 = v60;
  unsigned __int8 v60 = *(void (**)(void, void, void))(v15 + 16);
  v60(&v49, v26, v14);
  outlined init with copy of Either<LogisticRegressionClassifier<Float, String>, FullyConnectedNetworkClassifier<Float, String>>((uint64_t)v59, v63, &demangling cache variable for type metadata for Tensor?);
  Tensor.shape.getter();
  uint64_t v27 = TensorShape.dimensions.getter();
  uint64_t v28 = *(void *)(v27 + 16);
  swift_bridgeObjectRelease(v27);
  long long v59 = *(void (**)(unint64_t *, uint64_t))(v62 + 8);
  v59(&v49, v57);
  if (v28 == 3)
  {
    uint64_t v29 = v58;
    Tensor.expandingShape(at:)(&outlined read-only object #1 of static MLActivityClassifier.Trainer.reshapeLabels(prediction:target:weights:));
    uint64_t v62 = *(void *)(v15 + 8);
    ((void (*)(unint64_t *, uint64_t))v62)(&v49, v14);
    uint64_t v30 = *(void (**)(unint64_t *, unint64_t *, uint64_t))(v15 + 32);
    v30(&v49, v29, v14);
    if (!__swift_getEnumTagSinglePayload(v63, 1, v14))
    {
      char v31 = v29;
      unsigned int v32 = 1;
      uint64_t v56 = &v49;
      v60(v31, v63, v14);
      uint64_t v33 = v55;
      Tensor.shape.getter();
      ((void (*)(unint64_t *, uint64_t))v62)(v31, v14);
      uint64_t v34 = TensorShape.dimensions.getter();
      uint64_t v35 = *(void *)(v34 + 16);
      swift_bridgeObjectRelease(v34);
      v59(v33, v57);
      if (v35 == 2)
      {
        int EnumTagSinglePayload = __swift_getEnumTagSinglePayload(v63, 1, v14);
        uint64_t v37 = (uint64_t)v53;
        char v38 = v61;
        if (!EnumTagSinglePayload)
        {
          uint64_t v39 = v58;
          v60(v58, v63, v14);
          uint64_t v40 = v54;
          Tensor.expandingShape(at:)(&outlined read-only object #2 of static MLActivityClassifier.Trainer.reshapeLabels(prediction:target:weights:));
          ((void (*)(unint64_t *, uint64_t))v62)(v39, v14);
          Tensor.expandingShape(at:)(&outlined read-only object #3 of static MLActivityClassifier.Trainer.reshapeLabels(prediction:target:weights:));
          char v38 = v61;
          ((void (*)(unint64_t *, uint64_t))v62)(v40, v14);
          unsigned int v32 = 0;
        }
        __swift_storeEnumTagSinglePayload(v37, v32, 1, v14);
        outlined assign with take of Tensor?(v37, v63);
        uint64_t v23 = v56;
        goto LABEL_11;
      }
      uint64_t v23 = v56;
    }
    char v38 = v61;
LABEL_11:
    v30(v52, v38, v14);
    return ((uint64_t (*)(uint64_t, unint64_t *, uint64_t))v30)(v51, v23, v14);
  }
  uint64_t v41 = v58;
  if (v28 != 2)
  {
    unint64_t v49 = 0;
    int64_t v50 = (char *)0xE000000000000000;
    _StringGuts.grow(_:)(28);
    swift_bridgeObjectRelease((_BYTE)v50);
    unint64_t v49 = 0xD00000000000001ALL;
    int64_t v50 = "n the input data" + 0x8000000000000000;
    uint64_t v44 = v55;
    Tensor.shape.getter();
    uint64_t v45 = lazy protocol witness table accessor for type VNImageOption and conformance VNImageOption(&lazy protocol witness table cache variable for type TensorShape and conformance TensorShape, (uint64_t (*)(uint64_t))&type metadata accessor for TensorShape, (uint64_t)&protocol conformance descriptor for TensorShape);
    uint64_t v46 = v57;
    v47._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter(v57, v45);
    char object = (char)v47._object;
    String.append(_:)(v47);
    swift_bridgeObjectRelease(object);
    v59(v44, v46);
    _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, v49, v50, "CreateML/MLActivityClassifier+Training.swift", 44, 2, 360, 0);
    BUG();
  }
  uint64_t v42 = v61;
  Tensor.reshaped(like:)(&v49);
  (*(void (**)(unint64_t *, unint64_t *, uint64_t))(v15 + 40))(v42, v41, v14);
  uint64_t v30 = *(void (**)(unint64_t *, unint64_t *, uint64_t))(v15 + 32);
  v30(v52, v42, v14);
  return ((uint64_t (*)(uint64_t, unint64_t *, uint64_t))v30)(v51, v23, v14);
}

void static MLCreateError.featureNotFound(feature:)(Swift::String a1)
{
  uint64_t v2 = v1;
  _StringGuts.grow(_:)(49);
  swift_bridgeObjectRelease(0xE000000000000000);
  *(void *)&long long v4 = 0x2065727574616546;
  *((void *)&v4 + 1) = 0xEF206E6D756C6F63;
  String.append(_:)(a1);
  v3._char object = " has an unsupported format: " + 0x8000000000000000;
  v3._uint64_t countAndFlagsBits = 0xD000000000000020;
  String.append(_:)(v3);
  *(_OWORD *)uint64_t v2 = v4;
  *(_OWORD *)(v2 + 16) = 0;
  *(_OWORD *)(v2 + 32) = 0;
  *(unsigned char *)(v2 + 48) = 0;
}

uint64_t specialized Sequence.compactMap<A>(_:)(void (*a1)(void *), uint64_t a2)
{
  uint64_t v43 = v2;
  uint64_t v47 = v3;
  uint64_t v36 = a2;
  uint64_t v37 = a1;
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Column<[String]>);
  uint64_t v5 = *(void *)(v4 - 8);
  int64_t v6 = *(void *)(v5 + 64);
  int64_t v7 = alloca(v6);
  uint64_t v8 = alloca(v6);
  uint64_t v48 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for IndexingIterator<Column<[String]>>);
  int64_t v9 = *(void *)(*(void *)(v48 - 8) + 64);
  uint64_t v10 = alloca(v9);
  int64_t v11 = alloca(v9);
  uint64_t v38 = v5;
  uint64_t v40 = *(void (**)(unsigned char *, uint64_t, uint64_t))(v5 + 16);
  v40(v34, v47, v4);
  uint64_t v12 = lazy protocol witness table accessor for type FullyConnectedNetworkClassifier<Float, String> and conformance FullyConnectedNetworkClassifier<A, B>(&lazy protocol witness table cache variable for type Column<[String]> and conformance Column<A>, &demangling cache variable for type metadata for Column<[String]>, (uint64_t)&protocol conformance descriptor for Column<A>);
  uint64_t v39 = v34;
  dispatch thunk of Sequence.makeIterator()(v4, v12);
  uint64_t v13 = *(int *)(v48 + 36);
  uint64_t v14 = lazy protocol witness table accessor for type FullyConnectedNetworkClassifier<Float, String> and conformance FullyConnectedNetworkClassifier<A, B>(&lazy protocol witness table cache variable for type Column<[String]> and conformance Column<A>, &demangling cache variable for type metadata for Column<[String]>, (uint64_t)&protocol conformance descriptor for Column<A>);
  uint64_t v48 = v13;
  uint64_t v15 = *(void *)&v34[v13];
  uint64_t v45 = v4;
  uint64_t v47 = v14;
  dispatch thunk of Collection.endIndex.getter(v4, v14);
  if (v15 == v41[0])
  {
    uint64_t v48 = (uint64_t)_swiftEmptyArrayStorage;
    int64_t v16 = v34;
LABEL_3:
    outlined destroy of Tensor?((uint64_t)v16, &demangling cache variable for type metadata for IndexingIterator<Column<[String]>>);
  }
  else
  {
    uint64_t v17 = v45;
    int64_t v16 = v34;
    uint64_t v18 = &v34[v48];
    uint64_t v48 = (uint64_t)_swiftEmptyArrayStorage;
    uint64_t v46 = v34;
    uint64_t v42 = v18;
    while (1)
    {
      uint64_t v19 = v16;
      uint64_t v44 = (void (*)(void *, void))dispatch thunk of Collection.subscript.read(v41, v18, v17, v47);
      uint64_t v21 = *v20;
      swift_bridgeObjectRetain(*v20);
      v44(v41, 0);
      uint64_t v22 = v19;
      uint64_t v23 = v39;
      v40(v39, (uint64_t)v22, v17);
      dispatch thunk of Collection.formIndex(after:)(v18, v17, v47);
      (*(void (**)(unsigned char *, uint64_t))(v38 + 8))(v23, v17);
      v41[0] = v21;
      uint64_t v24 = v43;
      v37(v41);
      if (v24) {
        break;
      }
      swift_bridgeObjectRelease(v21);
      uint64_t v25 = v35;
      uint64_t v43 = 0;
      if (v35)
      {
        if (!swift_isUniquelyReferenced_nonNull_native(v48)) {
          uint64_t v48 = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(void *)(v48 + 16) + 1, 1, v48);
        }
        uint64_t v26 = (uint64_t)v46;
        uint64_t v27 = v45;
        uint64_t v28 = v47;
        unint64_t v29 = *(void *)(v48 + 16);
        if (*(void *)(v48 + 24) >> 1 <= v29)
        {
          unsigned int v32 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(*(void *)(v48 + 24) >= 2uLL, v29 + 1, 1, v48);
          uint64_t v28 = v47;
          uint64_t v27 = v45;
          uint64_t v26 = (uint64_t)v46;
          uint64_t v48 = (uint64_t)v32;
        }
        uint64_t v30 = v48;
        *(void *)(v48 + 16) = v29 + 1;
        *(void *)(v30 + 8 * v29 + 32) = v25;
        char v31 = v42;
      }
      else
      {
        uint64_t v26 = (uint64_t)v46;
        uint64_t v27 = v45;
        uint64_t v28 = v47;
        char v31 = v42;
      }
      uint64_t v44 = *(void (**)(void *, void))v31;
      int64_t v16 = (unsigned char *)v26;
      uint64_t v18 = v31;
      uint64_t v17 = v27;
      dispatch thunk of Collection.endIndex.getter(v27, v28);
      if (v44 == (void (*)(void *, void))v41[0]) {
        goto LABEL_3;
      }
    }
    swift_bridgeObjectRelease(v21);
    outlined destroy of Tensor?((uint64_t)v46, &demangling cache variable for type metadata for IndexingIterator<Column<[String]>>);
    swift_bridgeObjectRelease(v48);
  }
  return v48;
}

void *specialized Sequence.compactMap<A>(_:)(void (*a1)(void *), uint64_t a2)
{
  uint64_t v55 = v2;
  long long v59 = v3;
  uint64_t v45 = a2;
  uint64_t v46 = a1;
  int64_t v4 = *(void *)(*(void *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Tensor?)
                             - 8)
                 + 64);
  uint64_t v5 = alloca(v4);
  int64_t v6 = alloca(v4);
  uint64_t v47 = v42;
  uint64_t v52 = type metadata accessor for Tensor(0);
  uint64_t v53 = *(void *)(v52 - 8);
  int64_t v7 = *(void *)(v53 + 64);
  uint64_t v8 = alloca(v7);
  int64_t v9 = alloca(v7);
  char v54 = v42;
  uint64_t v10 = alloca(v7);
  int64_t v11 = alloca(v7);
  uint64_t v51 = v42;
  uint64_t v12 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Column<[Float]>);
  uint64_t v13 = *(void *)(v12 - 8);
  int64_t v14 = *(void *)(v13 + 64);
  uint64_t v15 = alloca(v14);
  int64_t v16 = alloca(v14);
  uint64_t v58 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for IndexingIterator<Column<[Float]>>);
  int64_t v17 = *(void *)(*(void *)(v58 - 8) + 64);
  uint64_t v18 = alloca(v17);
  uint64_t v19 = alloca(v17);
  uint64_t v48 = v13;
  int64_t v50 = *(void (**)(unsigned char *, uint64_t *, uint64_t))(v13 + 16);
  v50(v42, v59, v12);
  uint64_t v20 = lazy protocol witness table accessor for type FullyConnectedNetworkClassifier<Float, String> and conformance FullyConnectedNetworkClassifier<A, B>(&lazy protocol witness table cache variable for type Column<[Float]> and conformance Column<A>, &demangling cache variable for type metadata for Column<[Float]>, (uint64_t)&protocol conformance descriptor for Column<A>);
  unint64_t v49 = v42;
  dispatch thunk of Sequence.makeIterator()(v12, v20);
  uint64_t v21 = (uint64_t *)*(int *)(v58 + 36);
  uint64_t v22 = lazy protocol witness table accessor for type FullyConnectedNetworkClassifier<Float, String> and conformance FullyConnectedNetworkClassifier<A, B>(&lazy protocol witness table cache variable for type Column<[Float]> and conformance Column<A>, &demangling cache variable for type metadata for Column<[Float]>, (uint64_t)&protocol conformance descriptor for Column<A>);
  long long v59 = v21;
  uint64_t v23 = *(void *)&v42[(void)v21];
  uint64_t v57 = v12;
  uint64_t v58 = v22;
  dispatch thunk of Collection.endIndex.getter(v12, v22);
  if (v23 == v43[0])
  {
    unsigned __int8 v60 = _swiftEmptyArrayStorage;
    uint64_t v24 = (uint64_t *)v42;
LABEL_3:
    outlined destroy of Tensor?((uint64_t)v24, &demangling cache variable for type metadata for IndexingIterator<Column<[Float]>>);
  }
  else
  {
    long long v59 = (uint64_t *)&v42[(void)v59];
    unsigned __int8 v60 = _swiftEmptyArrayStorage;
    uint64_t v24 = (uint64_t *)v42;
    uint64_t v25 = v57;
    uint64_t v26 = v58;
    uint64_t v56 = v42;
    while (1)
    {
      uint64_t v27 = (void (*)(void *, void))dispatch thunk of Collection.subscript.read(v43, v59, v25, v26);
      uint64_t v29 = *v28;
      swift_bridgeObjectRetain(*v28);
      v27(v43, 0);
      uint64_t v30 = v49;
      v50(v49, v24, v25);
      dispatch thunk of Collection.formIndex(after:)(v59, v25, v58);
      (*(void (**)(unsigned char *, uint64_t))(v48 + 8))(v30, v25);
      v43[0] = v29;
      uint64_t v31 = (uint64_t)v47;
      uint64_t v32 = v55;
      v46(v43);
      if (v32) {
        break;
      }
      swift_bridgeObjectRelease(v29);
      uint64_t v33 = v52;
      int EnumTagSinglePayload = __swift_getEnumTagSinglePayload(v31, 1, v52);
      uint64_t v35 = v31;
      uint64_t v55 = 0;
      if (EnumTagSinglePayload == 1)
      {
        outlined destroy of Tensor?(v31, &demangling cache variable for type metadata for Tensor?);
        uint64_t v25 = v57;
      }
      else
      {
        uint64_t v36 = *(void (**)(unsigned char *, uint64_t, uint64_t))(v53 + 32);
        uint64_t v37 = v51;
        v36(v51, v35, v33);
        v36(v54, (uint64_t)v37, v33);
        if (!swift_isUniquelyReferenced_nonNull_native(v60)) {
          unsigned __int8 v60 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v60[2] + 1, 1, (uint64_t)v60);
        }
        unint64_t v38 = v60[2];
        uint64_t v39 = v57;
        if (v60[3] >> 1 <= v38) {
          unsigned __int8 v60 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(v60[3] >= 2uLL, v38 + 1, 1, (uint64_t)v60);
        }
        uint64_t v40 = v60;
        v60[2] = v38 + 1;
        v36((unsigned char *)v40+ ((*(unsigned __int8 *)(v53 + 80) + 32) & ~*(unsigned __int8 *)(v53 + 80))+ *(void *)(v53 + 72) * v38, (uint64_t)v54, v52);
        uint64_t v25 = v39;
      }
      uint64_t v26 = v58;
      uint64_t v44 = *v59;
      dispatch thunk of Collection.endIndex.getter(v25, v58);
      uint64_t v24 = (uint64_t *)v56;
      if (v44 == v43[0]) {
        goto LABEL_3;
      }
    }
    swift_bridgeObjectRelease(v29);
    outlined destroy of Tensor?((uint64_t)v56, &demangling cache variable for type metadata for IndexingIterator<Column<[Float]>>);
    swift_bridgeObjectRelease((_BYTE)v60);
  }
  return v60;
}

char *specialized Sequence.compactMap<A>(_:)(uint64_t a1, void *a2)
{
  uint64_t v2 = a2;
  uint64_t v17 = *(void *)(a1 + 16);
  if (!v17)
  {
    uint64_t v3 = (char *)_swiftEmptyArrayStorage;
    goto LABEL_24;
  }
  uint64_t v18 = a1 + 32;
  char v20 = a1;
  swift_bridgeObjectRetain(a1);
  uint64_t v19 = a2 + 7;
  uint64_t v3 = (char *)_swiftEmptyArrayStorage;
  for (uint64_t i = 0; i != v17; ++i)
  {
    uint64_t v21 = v3;
    uint64_t v16 = v2[2];
    if (!v16) {
      goto LABEL_16;
    }
    uint64_t v4 = *(void *)(v18 + 16 * i);
    uint64_t v5 = *(void *)(v18 + 16 * i + 8);
    uint64_t v6 = a2[4];
    uint64_t v7 = a2[5];
    if ((v6 != v4 || v7 != v5)
      && (_stringCompareWithSmolCheck(_:_:expecting:)(v6, v7, *(void *)(v18 + 16 * i), *(void *)(v18 + 16 * i + 8), 0) & 1) == 0)
    {
      int64_t v9 = v19;
      uint64_t v10 = 1;
      while (v16 != v10)
      {
        uint64_t v8 = v10;
        uint64_t v11 = *(v9 - 1);
        uint64_t v12 = *v9;
        if (v11 != v4 || v12 != v5)
        {
          char v13 = _stringCompareWithSmolCheck(_:_:expecting:)(v11, v12, v4, v5, 0);
          uint64_t v10 = v8 + 1;
          v9 += 2;
          if ((v13 & 1) == 0) {
            continue;
          }
        }
        goto LABEL_8;
      }
LABEL_16:
      uint64_t v3 = v21;
      uint64_t v8 = 0;
      if (swift_isUniquelyReferenced_nonNull_native(v21))
      {
        uint64_t v8 = 0;
        goto LABEL_18;
      }
LABEL_22:
      uint64_t v3 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *((void *)v3 + 2) + 1, 1, (uint64_t)v3);
      goto LABEL_18;
    }
    uint64_t v8 = 0;
LABEL_8:
    uint64_t v3 = v21;
    if (!swift_isUniquelyReferenced_nonNull_native(v21)) {
      goto LABEL_22;
    }
LABEL_18:
    unint64_t v14 = *((void *)v3 + 2);
    if (*((void *)v3 + 3) >> 1 <= v14) {
      uint64_t v3 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(*((void *)v3 + 3) >= 2uLL, v14 + 1, 1, (uint64_t)v3);
    }
    *((void *)v3 + 2) = v14 + 1;
    *(void *)&v3[8 * v14 + 32] = v8;
    uint64_t v2 = a2;
  }
  swift_bridgeObjectRelease((_BYTE)a2);
  LOBYTE(v2) = v20;
LABEL_24:
  swift_bridgeObjectRelease((_BYTE)v2);
  return v3;
}

void static MLCreateError.metricNotFound(metric:)(Swift::String a1)
{
}

void static MLCreateError.validationClassNotFound(className:)(Swift::String a1, Swift::Int a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6 = v4;
  _StringGuts.grow(_:)(a2);
  swift_bridgeObjectRelease(0xE000000000000000);
  *(void *)&long long v9 = a3;
  *((void *)&v9 + 1) = a4;
  String.append(_:)(a1);
  v8._char object = "Validation class " + 0x8000000000000000;
  v8._uint64_t countAndFlagsBits = 0xD00000000000001BLL;
  String.append(_:)(v8);
  *(_OWORD *)uint64_t v6 = v9;
  *(_OWORD *)(v6 + 16) = 0;
  *(_OWORD *)(v6 + 32) = 0;
  *(unsigned char *)(v6 + 48) = 0;
}

void (*MLActivityClassifier.DataBatcher.asWeightedSamples(with:classLabels:labels:)(uint64_t a1, void (*a2)(void **, uint64_t), double a3, double a4))(void **, uint64_t)
{
  v119._uint64_t countAndFlagsBits = v4;
  uint64_t v98 = a2;
  uint64_t v110 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Column<[String]>);
  uint64_t v108 = *(void *)(v110 - 8);
  int64_t v6 = *(void *)(v108 + 64);
  uint64_t v7 = alloca(v6);
  Swift::String v8 = alloca(v6);
  uint64_t v107 = &v88;
  uint64_t v111 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Column<[Float]>);
  uint64_t v109 = *(void *)(v111 - 8);
  int64_t v9 = *(void *)(v109 + 64);
  uint64_t v10 = alloca(v9);
  uint64_t v11 = alloca(v9);
  uint64_t v106 = &v88;
  uint64_t v101 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Column<[Double]>);
  uint64_t v102 = *(void *)(v101 - 8);
  int64_t v12 = *(void *)(v102 + 64);
  char v13 = alloca(v12);
  unint64_t v14 = alloca(v12);
  uint64_t v95 = &v88;
  ML20MLActivityClassifierV11DataBatcherV17asWeightedSamples4with11classLabels6labelsSayAA0hE6SampleVGAC13ConfigurationV_t12SSGAOSgtKF14d9Networks6F13VSaySiGXEfU2_SaySSGTf1cn_n = (void *)type metadata accessor for AnyColumn(0);
  uint64_t v93 = *(ML20MLActivityClassifierV11DataBatcherV17asWeightedSamples4with11classLabels6labelsSayAA0hE6SampleVGAC13ConfigurationV_t12SSGAOSgtKF14d9Networks6F13VSaySiGXEfU2_SaySSGTf1cn_n
        - 1);
  int64_t v15 = *(void *)(v93 + 64);
  uint64_t v16 = alloca(v15);
  uint64_t v17 = alloca(v15);
  uint64_t v94 = &v88;
  uint64_t v103 = type metadata accessor for DataFrame.Rows(0);
  uint64_t v117 = *(void ***)(v103 - 8);
  int64_t v18 = (int64_t)v117[8];
  uint64_t v19 = alloca(v18);
  char v20 = alloca(v18);
  uint64_t v97 = &v88;
  uint64_t v21 = alloca(v18);
  uint64_t v22 = alloca(v18);
  uint64_t v115 = type metadata accessor for DataFrame(0);
  uint64_t v114 = *(void *)(v115 - 8);
  int64_t v23 = *(void *)(v114 + 64);
  uint64_t v24 = alloca(v23);
  uint64_t v25 = alloca(v23);
  uint64_t v26 = &v88;
  uint64_t v104 = a1;
  uint64_t v100 = *(void *)(a1 + 40);
  uint64_t v27 = v5;
  DataFrame.rows.getter();
  uint64_t v28 = DataFrame.Rows.count.getter();
  ML18WeightedDataSampleVs5NeverOTg506_sSi14f9Networks6h2V8i4ML18klm32VIgynr_Si6offset_AC7elementtAFs5N11OIegnrzr_TRSiAjOIgynr_Tf1cn_n = (void (*)(void **, uint64_t))v117[1];
  ML18WeightedDataSampleVs5NeverOTg506_sSi14f9Networks6h2V8i4ML18klm32VIgynr_Si6offset_AC7elementtAFs5N11OIegnrzr_TRSiAjOIgynr_Tf1cn_n(&v88, v103);
  Swift::Int v30 = timestampSeed()();
  uint64_t countAndFlagsBits = v119._countAndFlagsBits;
  MLActivityClassifier.DataBatcher.generateBatch(startingAt:rowCount:seed:)(0, v28, v30);
  if (!countAndFlagsBits)
  {
    uint64_t v99 = ML18WeightedDataSampleVs5NeverOTg506_sSi14f9Networks6h2V8i4ML18klm32VIgynr_Si6offset_AC7elementtAFs5N11OIegnrzr_TRSiAjOIgynr_Tf1cn_n;
    uint64_t v112 = v27;
    uint64_t v32 = _swiftEmptyArrayStorage;
    uint64_t v118 = _swiftEmptyArrayStorage;
    uint64_t v33 = *(void *)(v104 + 40);
    uint64_t v34 = *(void *)(v33 + 16);
    uint64_t v117 = &v88;
    if (v34)
    {
      uint64_t v96 = v34;
      v119._char object = 0;
      swift_bridgeObjectRetain(v33);
      uint64_t v113 = v33;
      uint64_t v35 = (void **)(v33 + 40);
      while (1)
      {
        ML18WeightedDataSampleVs5NeverOTg506_sSi14f9Networks6h2V8i4ML18klm32VIgynr_Si6offset_AC7elementtAFs5N11OIegnrzr_TRSiAjOIgynr_Tf1cn_n = (void (*)(void **, uint64_t))*(v35 - 1);
        int v92 = v35;
        uint64_t v36 = *v35;
        swift_bridgeObjectRetain(*v35);
        v119._uint64_t countAndFlagsBits = (uint64_t)ML18WeightedDataSampleVs5NeverOTg506_sSi14f9Networks6h2V8i4ML18klm32VIgynr_Si6offset_AC7elementtAFs5N11OIegnrzr_TRSiAjOIgynr_Tf1cn_n;
        v37._uint64_t countAndFlagsBits = (uint64_t)ML18WeightedDataSampleVs5NeverOTg506_sSi14f9Networks6h2V8i4ML18klm32VIgynr_Si6offset_AC7elementtAFs5N11OIegnrzr_TRSiAjOIgynr_Tf1cn_n;
        v37._char object = v36;
        unint64_t v38 = v26;
        Swift::Int_optional v39 = DataFrame.indexOfColumn(_:)(v37);
        if (v39.is_nil) {
          goto LABEL_16;
        }
        Swift::Int value = v39.value;
        uint64_t v41 = DataFrame.columns.getter(ML18WeightedDataSampleVs5NeverOTg506_sSi14f9Networks6h2V8i4ML18klm32VIgynr_Si6offset_AC7elementtAFs5N11OIegnrzr_TRSiAjOIgynr_Tf1cn_n, v36);
        if (value < 0) {
          BUG();
        }
        char v42 = v41;
        if ((unint64_t)value >= *(void *)(v41 + 16)) {
          BUG();
        }
        uint64_t v105 = (void **)v36;
        uint64_t v43 = v93;
        ML18WeightedDataSampleVs5NeverOTg506_sSi14f9Networks6h2V8i4ML18klm32VIgynr_Si6offset_AC7elementtAFs5N11OIegnrzr_TRSiAjOIgynr_Tf1cn_n = (void (*)(void **, uint64_t))v94;
        (*(void (**)(void **, uint64_t, void *))(v93 + 16))(v94, ((*(unsigned __int8 *)(v93 + 80) + 32) & ~*(unsigned __int8 *)(v93 + 80))+ v41+ *(void *)(v93 + 72) * value, ML20MLActivityClassifierV11DataBatcherV17asWeightedSamples4with11classLabels6labelsSayAA0hE6SampleVGAC13ConfigurationV_t12SSGAOSgtKF14d9Networks6F13VSaySiGXEfU2_SaySSGTf1cn_n);
        swift_bridgeObjectRelease(v42);
        uint64_t v44 = AnyColumn.wrappedElementType.getter();
        (*(void (**)(void *, void *))(v43 + 8))(ML18WeightedDataSampleVs5NeverOTg506_sSi14f9Networks6h2V8i4ML18klm32VIgynr_Si6offset_AC7elementtAFs5N11OIegnrzr_TRSiAjOIgynr_Tf1cn_n, ML20MLActivityClassifierV11DataBatcherV17asWeightedSamples4with11classLabels6labelsSayAA0hE6SampleVGAC13ConfigurationV_t12SSGAOSgtKF14d9Networks6F13VSaySiGXEfU2_SaySSGTf1cn_n);
        uint64_t v36 = v105;
        uint64_t v45 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [Double]);
        unint64_t v38 = v117;
        if (v44 != v45)
        {
LABEL_16:
          swift_bridgeObjectRelease(v113);
          uint64_t v52 = lazy protocol witness table accessor for type MLCreateError and conformance MLCreateError();
          swift_allocError(&type metadata for MLCreateError, v52, 0, 0);
          v53._uint64_t countAndFlagsBits = v119._countAndFlagsBits;
          v53._char object = v36;
          static MLCreateError.featureNotFound(feature:)(v53);
          swift_bridgeObjectRelease((_BYTE)v36);
          swift_willThrow(v36, v36, v54, v55, v56, v57);
          (*(void (**)(void **, uint64_t))(v114 + 8))(v38, v115);
          swift_bridgeObjectRelease((_BYTE)v118);
          return ML18WeightedDataSampleVs5NeverOTg506_sSi14f9Networks6h2V8i4ML18klm32VIgynr_Si6offset_AC7elementtAFs5N11OIegnrzr_TRSiAjOIgynr_Tf1cn_n;
        }
        ML18WeightedDataSampleVs5NeverOTg506_sSi14f9Networks6h2V8i4ML18klm32VIgynr_Si6offset_AC7elementtAFs5N11OIegnrzr_TRSiAjOIgynr_Tf1cn_n = (void (*)(void **, uint64_t))v95;
        DataFrame.subscript.getter(v119._countAndFlagsBits, v36, v44);
        swift_bridgeObjectRetain((_BYTE)v36);
        char object = v119._object;
        ML20MLActivityClassifierV11e88BatcherV17asWeightedSamples4with11classLabels6labelsSayAA0hE6SampleVGAC13ConfigurationV_u12SSGAOSgtKF14g9Networks6I15VSaySdGSgKXEfU_SSTf1cn_n = _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lF11TabularData6ColumnVySaySdGG_14NeuralNetworks6TensorVsAE_pTg5036_s8CreateML20MLActivityClassifierV11e88BatcherV17asWeightedSamples4with11classLabels6labelsSayAA0hE6SampleVGAC13ConfigurationV_u12SSGAOSgtKF14g9Networks6I15VSaySdGSgKXEfU_SSTf1cn_n((uint64_t)ML18WeightedDataSampleVs5NeverOTg506_sSi14f9Networks6h2V8i4ML18klm32VIgynr_Si6offset_AC7elementtAFs5N11OIegnrzr_TRSiAjOIgynr_Tf1cn_n, v119._countAndFlagsBits, v36, a3, a4);
        v119._char object = object;
        if (object) {
          break;
        }
        uint64_t v48 = ML20MLActivityClassifierV11e88BatcherV17asWeightedSamples4with11classLabels6labelsSayAA0hE6SampleVGAC13ConfigurationV_u12SSGAOSgtKF14g9Networks6I15VSaySdGSgKXEfU_SSTf1cn_n;
        (*(void (**)(void *, uint64_t))(v102 + 8))(ML18WeightedDataSampleVs5NeverOTg506_sSi14f9Networks6h2V8i4ML18klm32VIgynr_Si6offset_AC7elementtAFs5N11OIegnrzr_TRSiAjOIgynr_Tf1cn_n, v101);
        swift_bridgeObjectRelease((_BYTE)v36);
        uint64_t v32 = v118;
        if (!swift_isUniquelyReferenced_nonNull_native(v118)) {
          uint64_t v32 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v32[2] + 1, 1, (uint64_t)v32);
        }
        unint64_t v49 = v32[2];
        if (v32[3] >> 1 <= v49) {
          uint64_t v32 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(v32[3] >= 2uLL, v49 + 1, 1, (uint64_t)v32);
        }
        v32[2] = v49 + 1;
        v32[v49 + 4] = v48;
        uint64_t v118 = v32;
        uint64_t v35 = v92 + 2;
        BOOL v50 = v96-- == 1;
        uint64_t v26 = v117;
        uint64_t v51 = v100;
        if (v50)
        {
          swift_bridgeObjectRelease(v113);
          uint64_t countAndFlagsBits = (uint64_t)v119._object;
          goto LABEL_18;
        }
      }
      (*(void (**)(void *, uint64_t))(v102 + 8))(ML18WeightedDataSampleVs5NeverOTg506_sSi14f9Networks6h2V8i4ML18klm32VIgynr_Si6offset_AC7elementtAFs5N11OIegnrzr_TRSiAjOIgynr_Tf1cn_n, v101);
      swift_bridgeObjectRelease(v113);
      (*(void (**)(void **, uint64_t))(v114 + 8))(v38, v115);
      swift_bridgeObjectRelease((_BYTE)v36);
      swift_bridgeObjectRelease((_BYTE)v118);
    }
    else
    {
      uint64_t v51 = v100;
LABEL_18:
      uint64_t v58 = *(void (**)(void **, uint64_t))(v51 + 16);
      ML18WeightedDataSampleVs5NeverOTg506_sSi14f9Networks6h2V8i4ML18klm32VIgynr_Si6offset_AC7elementtAFs5N11OIegnrzr_TRSiAjOIgynr_Tf1cn_n = (void (*)(void **, uint64_t))v32[2];
      uint64_t v59 = v114;
      if (v58 == ML18WeightedDataSampleVs5NeverOTg506_sSi14f9Networks6h2V8i4ML18klm32VIgynr_Si6offset_AC7elementtAFs5N11OIegnrzr_TRSiAjOIgynr_Tf1cn_n)
      {
        unsigned __int8 v60 = v97;
        DataFrame.rows.getter();
        uint64_t v61 = DataFrame.Rows.count.getter();
        v99(v60, v103);
        if (v61 < 0) {
          BUG();
        }
        v119._uint64_t countAndFlagsBits = (uint64_t)_sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSnySiG_14NeuralNetworks6TensorVs5NeverOTg50128_s8CreateML20MLActivityClassifierV11DataBatcherV17asWeightedSamples4with11classLabels6labelsSayAA0hE6SampleVGAC13ConfigurationV_t12SSGAOSgtKF14d9Networks6F9VSiXEfU0_SaySayAIGGTf1cn_n(0, v61, (uint64_t *)&v118);
        ML20MLActivityClassifierV11DataBatcherV17asWeightedSamples4with11classLabels6labelsSayAA0hE6SampleVGAC13ConfigurationV_t12SSGAOSgtKF14d9Networks6F13VSaySiGXEfU2_SaySSGTf1cn_n = (void *)countAndFlagsBits;
        v119._char object = *(void **)(v104 + 48);
        uint64_t v62 = *(void *)(v104 + 56);
        uint64_t v88 = v119._object;
        uint64_t v89 = v62;
        swift_bridgeObjectRetain(v62);
        v63._uint64_t countAndFlagsBits = 0x7468676965775FLL;
        v63._char object = (void *)0xE700000000000000;
        String.append(_:)(v63);
        uint64_t v64 = (uint64_t)v88;
        uint64_t v65 = v89;
        uint64_t v66 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [Float]);
        v63._uint64_t countAndFlagsBits = v64;
        uint64_t v67 = v117;
        DataFrame.subscript.getter(v63._countAndFlagsBits, v65, v66);
        swift_bridgeObjectRelease(v65);
        uint64_t v68 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [String]);
        char v69 = v107;
        DataFrame.subscript.getter(v119._object, v62, v68);
        v119._char object = &v88;
        uint64_t v70 = alloca(32);
        uint64_t v71 = alloca(32);
        ML18WeightedDataSampleVs5NeverOTg506_sSi14f9Networks6h2V8i4ML18klm32VIgynr_Si6offset_AC7elementtAFs5N11OIegnrzr_TRSiAjOIgynr_Tf1cn_n = v98;
        uint64_t v90 = v98;
        uint64_t v91 = v112;
        Swift::String v72 = ML20MLActivityClassifierV11DataBatcherV17asWeightedSamples4with11classLabels6labelsSayAA0hE6SampleVGAC13ConfigurationV_t12SSGAOSgtKF14d9Networks6F13VSaySiGXEfU2_SaySSGTf1cn_n;
        uint64_t v73 = specialized Sequence.compactMap<A>(_:)((void (*)(void *))partial apply for closure #3 in MLActivityClassifier.DataBatcher.asWeightedSamples(with:classLabels:labels:), (uint64_t)&v88);
        if (!v72)
        {
          uint64_t v80 = v73;
          swift_bridgeObjectRetain((_BYTE)ML18WeightedDataSampleVs5NeverOTg506_sSi14f9Networks6h2V8i4ML18klm32VIgynr_Si6offset_AC7elementtAFs5N11OIegnrzr_TRSiAjOIgynr_Tf1cn_n);
          ML20MLActivityClassifierV11DataBatcherV17asWeightedSamples4with11classLabels6labelsSayAA0hE6SampleVGAC13ConfigurationV_t12SSGAOSgtKF14d9Networks6F13VSaySiGXEfU2_SaySSGTf1cn_n = _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSaySaySiGG_14NeuralNetworks6TensorVs5NeverOTg50128_s8CreateML20MLActivityClassifierV11DataBatcherV17asWeightedSamples4with11classLabels6labelsSayAA0hE6SampleVGAC13ConfigurationV_t12SSGAOSgtKF14d9Networks6F13VSaySiGXEfU2_SaySSGTf1cn_n(v80, (uint64_t)ML18WeightedDataSampleVs5NeverOTg506_sSi14f9Networks6h2V8i4ML18klm32VIgynr_Si6offset_AC7elementtAFs5N11OIegnrzr_TRSiAjOIgynr_Tf1cn_n);
          swift_bridgeObjectRelease(v80);
          uint64_t v81 = alloca(24);
          double v82 = alloca(32);
          uint64_t v90 = (void (*)(void **, uint64_t))v112;
          uint64_t v83 = v106;
          uint64_t v84 = specialized Sequence.compactMap<A>(_:)((void (*)(void *))partial apply for closure #5 in MLActivityClassifier.DataBatcher.asWeightedSamples(with:classLabels:labels:), (uint64_t)&v88);
          char v85 = (char)v84;
          uint64_t v105 = &v88;
          uint64_t v86 = alloca(32);
          uint64_t v87 = alloca(32);
          uint64_t v90 = (void (*)(void **, uint64_t))ML20MLActivityClassifierV11DataBatcherV17asWeightedSamples4with11classLabels6labelsSayAA0hE6SampleVGAC13ConfigurationV_t12SSGAOSgtKF14d9Networks6F13VSaySiGXEfU2_SaySSGTf1cn_n;
          uint64_t v91 = v84;
          LOBYTE(v80) = v119._countAndFlagsBits;
          ML18WeightedDataSampleVs5NeverOTg506_sSi14f9Networks6h2V8i4ML18klm32VIgynr_Si6offset_AC7elementtAFs5N11OIegnrzr_TRSiAjOIgynr_Tf1cn_n = (void (*)(void **, uint64_t))_sSTsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFs18EnumeratedSequenceVySay14NeuralNetworks6TensorVGG_8CreateML18WeightedDataSampleVs5NeverOTg506_sSi14f9Networks6h2V8i4ML18klm32VIgynr_Si6offset_AC7elementtAFs5N11OIegnrzr_TRSiAjOIgynr_Tf1cn_n(v119._countAndFlagsBits, (void (*)(uint64_t, char *))partial apply for closure #6 in MLActivityClassifier.DataBatcher.asWeightedSamples(with:classLabels:labels:), (uint64_t)&v88);
          v119._char object = 0;
          swift_bridgeObjectRelease(v80);
          (*(void (**)(void **, uint64_t))(v108 + 8))(v107, v110);
          (*(void (**)(void **, uint64_t))(v109 + 8))(v83, v111);
          (*(void (**)(void **, uint64_t))(v114 + 8))(v117, v115);
          swift_bridgeObjectRelease(v85);
          swift_bridgeObjectRelease((_BYTE)ML20MLActivityClassifierV11DataBatcherV17asWeightedSamples4with11classLabels6labelsSayAA0hE6SampleVGAC13ConfigurationV_t12SSGAOSgtKF14d9Networks6F13VSaySiGXEfU2_SaySSGTf1cn_n);
          swift_bridgeObjectRelease((_BYTE)v118);
          return ML18WeightedDataSampleVs5NeverOTg506_sSi14f9Networks6h2V8i4ML18klm32VIgynr_Si6offset_AC7elementtAFs5N11OIegnrzr_TRSiAjOIgynr_Tf1cn_n;
        }
        swift_bridgeObjectRelease(v119._countAndFlagsBits);
        (*(void (**)(void **, uint64_t))(v108 + 8))(v69, v110);
        (*(void (**)(void **, uint64_t))(v109 + 8))(v106, v111);
        (*(void (**)(void **, uint64_t))(v114 + 8))(v67, v115);
      }
      else
      {
        uint64_t v74 = lazy protocol witness table accessor for type MLCreateError and conformance MLCreateError();
        swift_allocError(&type metadata for MLCreateError, v74, 0, 0);
        static MLCreateError.featureCountMismatch(expected:actual:)(v58, ML18WeightedDataSampleVs5NeverOTg506_sSi14f9Networks6h2V8i4ML18klm32VIgynr_Si6offset_AC7elementtAFs5N11OIegnrzr_TRSiAjOIgynr_Tf1cn_n);
        swift_willThrow(v58, ML18WeightedDataSampleVs5NeverOTg506_sSi14f9Networks6h2V8i4ML18klm32VIgynr_Si6offset_AC7elementtAFs5N11OIegnrzr_TRSiAjOIgynr_Tf1cn_n, v75, v76, v77, v78);
        (*(void (**)(void **, uint64_t))(v59 + 8))(v117, v115);
      }
      swift_bridgeObjectRelease((_BYTE)v118);
    }
  }
  return ML18WeightedDataSampleVs5NeverOTg506_sSi14f9Networks6h2V8i4ML18klm32VIgynr_Si6offset_AC7elementtAFs5N11OIegnrzr_TRSiAjOIgynr_Tf1cn_n;
}

uint64_t (*MLActivityClassifier.Trainer.iterateTraining(using:validationSamples:)(uint64_t a1, uint64_t a2, double a3, double a4))()
{
  double v197 = *(double *)&v4;
  uint64_t v179 = a2;
  uint64_t v178 = a1;
  uint64_t v167 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Dataset<[WeightedDataSample], WeightedDataSample>.PrefetchMode);
  uint64_t v166 = *(void *)(v167 - 8);
  int64_t v6 = *(void *)(v166 + 64);
  uint64_t v7 = alloca(v6);
  Swift::String v8 = alloca(v6);
  uint64_t v175 = &v153;
  uint64_t v193 = type metadata accessor for MLActivityClassifier.Model(0);
  int64_t v9 = *(void *)(*(void *)(v193 - 8) + 64);
  uint64_t v10 = alloca(v9);
  uint64_t v11 = alloca(v9);
  MLModel v168 = &v153;
  int64_t v12 = alloca(v9);
  char v13 = alloca(v9);
  uint64_t v169 = &v153;
  unint64_t v14 = alloca(v9);
  int64_t v15 = alloca(v9);
  uint64_t v174 = &v153;
  uint64_t v16 = alloca(v9);
  uint64_t v17 = alloca(v9);
  uint64_t v165 = &v153;
  int64_t v18 = alloca(v9);
  uint64_t v19 = alloca(v9);
  uint64_t v164 = &v153;
  uint64_t v20 = type metadata accessor for MLActivityClassifier.Trainer(0);
  int64_t v21 = *(void *)(*(void *)(v20 - 8) + 64);
  uint64_t v22 = alloca(v21);
  int64_t v23 = alloca(v21);
  uint64_t v186 = &v153;
  uint64_t v24 = alloca(v21);
  uint64_t v25 = alloca(v21);
  uint64_t v196 = (uint64_t)&v153;
  uint64_t v177 = type metadata accessor for WeightedDataSample(0);
  int64_t v26 = *(void *)(*(void *)(v177 - 8) + 64);
  uint64_t v27 = alloca(v26);
  uint64_t v28 = alloca(v26);
  uint64_t v183 = (void (**)(uint64_t *, uint64_t *, uint64_t))&v153;
  int64_t v29 = *(void *)(*(void *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for WeightedDataSample?)
                              - 8)
                  + 64);
  Swift::Int v30 = alloca(v29);
  uint64_t v31 = alloca(v29);
  v181 = &v153;
  uint64_t v163 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for LazyMapSequence<Batches<LazyPrefetchingMapSequence<LazySequence<Sampling<[WeightedDataSample]>>, WeightedDataSample>>, WeightedDataSample>.Iterator);
  int64_t v32 = *(void *)(*(void *)(v163 - 8) + 64);
  uint64_t v33 = alloca(v32);
  uint64_t v34 = alloca(v32);
  uint64_t v194 = &v153;
  uint64_t v190 = type metadata accessor for Tensor(0);
  uint64_t v191 = *(void *)(v190 - 8);
  int64_t v35 = *(void *)(v191 + 64);
  uint64_t v36 = alloca(v35);
  Swift::String v37 = alloca(v35);
  uint64_t v176 = &v153;
  unint64_t v38 = alloca(v35);
  Swift::Int_optional v39 = alloca(v35);
  uint64_t v173 = &v153;
  uint64_t v40 = alloca(v35);
  uint64_t v41 = alloca(v35);
  uint64_t v184 = &v153;
  char v42 = alloca(v35);
  uint64_t v43 = alloca(v35);
  uint64_t v189 = &v153;
  uint64_t v188 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Dataset<[WeightedDataSample], WeightedDataSample>);
  uint64_t v185 = *(void *)(v188 - 8);
  int64_t v44 = *(void *)(v185 + 64);
  uint64_t v45 = alloca(v44);
  uint64_t v46 = alloca(v44);
  double v180 = &v153;
  uint64_t v47 = alloca(v44);
  uint64_t v48 = alloca(v44);
  uint64_t v187 = &v153;
  int64_t v49 = *(void *)(*(void *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Adam<MLActivityClassifier.Model>?)
                              - 8)
                  + 64);
  BOOL v50 = alloca(v49);
  uint64_t v51 = alloca(v49);
  uint64_t v195 = (uint64_t (*)())&v153;
  int64_t v52 = *(void *)(*(void *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for MLActivityClassifier.Model?)
                              - 8)
                  + 64);
  Swift::String v53 = alloca(v52);
  uint64_t v54 = alloca(v52);
  uint64_t v182 = &v153;
  uint64_t v55 = alloca(v52);
  uint64_t v56 = alloca(v52);
  uint64_t v57 = (uint64_t (*)())&v153;
  uint64_t v172 = v20;
  uint64_t v192 = *(int *)(v20 + 24);
  uint64_t v58 = v5;
  uint64_t v59 = *(void *)(v5 + v192);
  if (v59)
  {
    uint64_t v60 = OBJC_IVAR____TtCVV8CreateML20MLActivityClassifier7Trainer14ModelContainer_model + v59;
    swift_beginAccess(v60, v160, 0, 0);
    outlined init with copy of MLTrainingSessionParameters(v60, (uint64_t)&v153, type metadata accessor for MLActivityClassifier.Model);
    uint64_t v61 = v193;
    __swift_storeEnumTagSinglePayload((uint64_t)&v153, 0, 1, v193);
    outlined destroy of Tensor?((uint64_t)&v153, &demangling cache variable for type metadata for MLActivityClassifier.Model?);
  }
  else
  {
    uint64_t v61 = v193;
    __swift_storeEnumTagSinglePayload((uint64_t)&v153, 1, 1, v193);
    outlined destroy of Tensor?((uint64_t)&v153, &demangling cache variable for type metadata for MLActivityClassifier.Model?);
    MLActivityClassifier.Trainer.initializeModel()();
    double v197 = *(double *)&v91;
    if (v91) {
      return v57;
    }
  }
  uint64_t v62 = *(void *)(v5 + v192);
  if (!v62)
  {
    uint64_t v150 = (uint64_t)v182;
    __swift_storeEnumTagSinglePayload((uint64_t)v182, 1, 1, v61);
    uint64_t v151 = &demangling cache variable for type metadata for MLActivityClassifier.Model?;
    goto LABEL_53;
  }
  uint64_t v63 = OBJC_IVAR____TtCVV8CreateML20MLActivityClassifier7Trainer14ModelContainer_model + v62;
  swift_beginAccess(v63, v155, 0, 0);
  uint64_t v64 = (uint64_t)v182;
  outlined init with copy of MLTrainingSessionParameters(v63, (uint64_t)v182, type metadata accessor for MLActivityClassifier.Model);
  __swift_storeEnumTagSinglePayload(v64, 0, 1, v61);
  outlined destroy of Tensor?(v64, &demangling cache variable for type metadata for MLActivityClassifier.Model?);
  uint64_t v65 = *(void *)(v58 + v192);
  if (!v65)
  {
    uint64_t v152 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Adam<MLActivityClassifier.Model>);
    uint64_t v150 = (uint64_t)v195;
    __swift_storeEnumTagSinglePayload((uint64_t)v195, 1, 1, v152);
    uint64_t v151 = &demangling cache variable for type metadata for Adam<MLActivityClassifier.Model>?;
LABEL_53:
    outlined destroy of Tensor?(v150, v151);
    _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, 0xD00000000000001CLL, "ifier7Trainer14ModelContainer" + 0x8000000000000000, "CreateML/MLActivityClassifier+Training.swift", 44, 2, 226, 0);
    BUG();
  }
  uint64_t v66 = v58;
  uint64_t v67 = OBJC_IVAR____TtCVV8CreateML20MLActivityClassifier7Trainer14ModelContainer_optimizer + v65;
  swift_beginAccess(v67, v156, 0, 0);
  uint64_t v68 = (uint64_t)v195;
  outlined init with copy of Either<LogisticRegressionClassifier<Float, String>, FullyConnectedNetworkClassifier<Float, String>>(v67, (uint64_t)v195, &demangling cache variable for type metadata for Adam<MLActivityClassifier.Model>);
  uint64_t v69 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Adam<MLActivityClassifier.Model>);
  __swift_storeEnumTagSinglePayload(v68, 0, 1, v69);
  outlined destroy of Tensor?(v68, &demangling cache variable for type metadata for Adam<MLActivityClassifier.Model>?);
  uint64_t v195 = (uint64_t (*)())v66;
  uint64_t v70 = *(void *)&v197;
  if (!*(void *)(v66 + v192)) {
    BUG();
  }
  uint64_t v57 = MLActivityClassifier.Trainer.ModelContainer.model.modify((uint64_t)v170);
  if (*(void *)(v71 + *(int *)(v193 + 72)) && (ClassificationMetricsContainer.resetIteration()(), (uint64_t v70 = v72) != 0))
  {
    double v197 = *(double *)&v72;
    ((void (*)(void *, uint64_t))v57)(v170, 1);
  }
  else
  {
    ((void (*)(void *, void))v57)(v170, 0);
    uint64_t v73 = (uint64_t)v195 + *(int *)(v172 + 20);
    specialized Sequence<>.makeDataset(configuration:)(v73, v178);
    double v197 = *(double *)&v70;
    if (!v70)
    {
      static Tensor.zero.getter(v73);
      uint64_t v74 = (uint64_t)v194;
      Dataset.makeIterator()(v188);
      uint64_t v178 = *(int *)(v163 + 44);
      uint64_t v182 = (uint64_t *)lazy protocol witness table accessor for type FullyConnectedNetworkClassifier<Float, String> and conformance FullyConnectedNetworkClassifier<A, B>(&lazy protocol witness table cache variable for type Batches<LazyPrefetchingMapSequence<LazySequence<Sampling<[WeightedDataSample]>>, WeightedDataSample>>.Iterator and conformance Batches<A>.Iterator, &demangling cache variable for type metadata for Batches<LazyPrefetchingMapSequence<LazySequence<Sampling<[WeightedDataSample]>>, WeightedDataSample>>.Iterator, (uint64_t)&protocol conformance descriptor for Batches<A>.Iterator);
      uint64_t v75 = *(void *)&v197;
      while (1)
      {
        double v197 = *(double *)&v75;
        uint64_t v76 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Batches<LazyPrefetchingMapSequence<LazySequence<Sampling<[WeightedDataSample]>>, WeightedDataSample>>.Iterator);
        dispatch thunk of IteratorProtocol.next()(v76, v182);
        char v77 = v170[0];
        if (v170[0])
        {
          uint64_t v78 = *(void (**)(void *))(v74 + v178);
          v162[0] = v170[0];
          uint64_t v79 = (uint64_t)v181;
          v78(v162);
          swift_bridgeObjectRelease(v77);
          uint64_t v80 = v79;
          uint64_t v81 = 0;
        }
        else
        {
          uint64_t v79 = (uint64_t)v181;
          uint64_t v80 = (uint64_t)v181;
          uint64_t v81 = 1;
        }
        uint64_t v82 = v177;
        __swift_storeEnumTagSinglePayload(v80, v81, 1, v177);
        uint64_t v57 = v195;
        if (__swift_getEnumTagSinglePayload(v79, 1, v82) == 1) {
          break;
        }
        outlined init with take of WeightedDataSample(v79, (uint64_t)v183);
        uint64_t v83 = *(void *)&v197;
        static Task<>.checkCancellation()();
        uint64_t v75 = v83;
        uint64_t v84 = (uint64_t)v194;
        if (v83)
        {
          double v197 = *(double *)&v83;
          outlined destroy of MLActivityClassifier.ModelParameters((uint64_t)v183, type metadata accessor for WeightedDataSample);
          outlined destroy of Tensor?(v84, &demangling cache variable for type metadata for LazyMapSequence<Batches<LazyPrefetchingMapSequence<LazySequence<Sampling<[WeightedDataSample]>>, WeightedDataSample>>, WeightedDataSample>.Iterator);
          (*(void (**)(uint64_t *, uint64_t))(v191 + 8))(v189, v190);
          (*(void (**)(uint64_t *, uint64_t))(v185 + 8))(v187, v188);
          return v57;
        }
        outlined init with copy of MLTrainingSessionParameters((uint64_t)v57, v196, type metadata accessor for MLActivityClassifier.Trainer);
        uint64_t v85 = *(void *)((char *)v57 + v192);
        if (!v85) {
          BUG();
        }
        uint64_t v86 = (char *)(v85 + OBJC_IVAR____TtCVV8CreateML20MLActivityClassifier7Trainer14ModelContainer_model);
        swift_beginAccess(v85 + OBJC_IVAR____TtCVV8CreateML20MLActivityClassifier7Trainer14ModelContainer_model, v170, 33, 0);
        uint64_t v87 = (void *)(OBJC_IVAR____TtCVV8CreateML20MLActivityClassifier7Trainer14ModelContainer_optimizer + v85);
        swift_beginAccess(v87, v162, 33, 0);
        uint64_t v88 = v184;
        uint64_t v89 = v87;
        uint64_t v90 = v183;
        MLActivityClassifier.Trainer.update(_:using:on:)(v86, v89, (uint64_t)v183, a3, a4);
        outlined destroy of MLActivityClassifier.ModelParameters(v196, type metadata accessor for MLActivityClassifier.Trainer);
        swift_endAccess(v162);
        swift_endAccess(v170);
        static Tensor.+= infix(_:_:)(v189, v88);
        (*(void (**)(uint64_t *, uint64_t))(v191 + 8))(v88, v190);
        outlined destroy of MLActivityClassifier.ModelParameters((uint64_t)v90, type metadata accessor for WeightedDataSample);
        uint64_t v74 = (uint64_t)v194;
      }
      outlined destroy of Tensor?((uint64_t)v194, &demangling cache variable for type metadata for LazyMapSequence<Batches<LazyPrefetchingMapSequence<LazySequence<Sampling<[WeightedDataSample]>>, WeightedDataSample>>, WeightedDataSample>.Iterator);
      uint64_t v92 = *(void *)((char *)v57 + v192);
      if (!v92) {
        BUG();
      }
      uint64_t v93 = OBJC_IVAR____TtCVV8CreateML20MLActivityClassifier7Trainer14ModelContainer_model + v92;
      swift_beginAccess(v93, v162, 0, 0);
      uint64_t v94 = v93;
      uint64_t v95 = (uint64_t)v164;
      outlined init with copy of MLTrainingSessionParameters(v94, (uint64_t)v164, type metadata accessor for MLActivityClassifier.Model);
      uint64_t v96 = *(int *)(v193 + 72);
      uint64_t v97 = *(void *)(v95 + v96);
      uint64_t v98 = *(void *)(v95 + v96 + 8);
      uint64_t v196 = *(void *)(v95 + v96 + 16);
      outlined copy of ClassificationMetricsContainer?(v97, v98, v196);
      outlined destroy of MLActivityClassifier.ModelParameters(v95, type metadata accessor for MLActivityClassifier.Model);
      uint64_t v99 = *(void *)&v197;
      if (!v97) {
        BUG();
      }
      swift_release();
      swift_bridgeObjectRelease(v196);
      _MetricUtilities.ConfusionMatrixMeter.value(normalized:)(0, a3, a4);
      swift_release();
      uint64_t v100 = *(void *)((char *)v195 + v192);
      if (!v100) {
        BUG();
      }
      uint64_t v101 = OBJC_IVAR____TtCVV8CreateML20MLActivityClassifier7Trainer14ModelContainer_model + v100;
      swift_beginAccess(v101, v157, 0, 0);
      uint64_t v102 = (uint64_t)v165;
      outlined init with copy of MLTrainingSessionParameters(v101, (uint64_t)v165, type metadata accessor for MLActivityClassifier.Model);
      uint64_t v103 = *(int *)(v193 + 72);
      uint64_t v104 = *(void *)(v102 + v103);
      uint64_t v105 = *(void *)(v102 + v103 + 16);
      uint64_t v196 = *(void *)(v102 + v103 + 8);
      outlined copy of ClassificationMetricsContainer?(v104, v196, v105);
      outlined destroy of MLActivityClassifier.ModelParameters(v102, type metadata accessor for MLActivityClassifier.Model);
      if (!v104) {
        BUG();
      }
      swift_release();
      swift_release();
      uint64_t v106 = *(void *)(v105 + 16);
      swift_bridgeObjectRelease(v105);
      uint64_t v107 = (uint64_t)v173;
      uint64_t v196 = static _MetricUtilities.top1Accuracy(confusionMatrix:classCount:)((uint64_t)v173, v106);
      uint64_t v194 = *(uint64_t **)(v191 + 8);
      ((void (*)(uint64_t, uint64_t))v194)(v107, v190);
      uint64_t v108 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(MLProgress.Metric, Double)>);
      uint64_t inited = swift_initStackObject(v108, v154);
      *(void *)(inited + 16) = 2;
      *(void *)(inited + 24) = 4;
      *(unsigned char *)(inited + 32) = 0;
      Tensor.scalar<A>(as:)(&type metadata for Double, &type metadata for Double, &protocol witness table for Double);
      *(unsigned char *)(inited + 48) = 3;
      uint64_t v110 = v196;
      *(void *)(inited + 56) = v196;
      uint64_t v111 = lazy protocol witness table accessor for type MLProgress.Metric and conformance MLProgress.Metric();
      uint64_t v57 = (uint64_t (*)())Dictionary.init(dictionaryLiteral:)(inited, &type metadata for MLProgress.Metric, &type metadata for Double, v111);
      if (v179 && *(void *)(v179 + 16))
      {
        uint64_t v112 = (uint64_t)v195;
        outlined init with copy of MLTrainingSessionParameters((uint64_t)v195, (uint64_t)v186, type metadata accessor for MLActivityClassifier.Trainer);
        uint64_t v113 = *(void *)(v112 + v192);
        if (!v113) {
          BUG();
        }
        uint64_t v114 = v113 + OBJC_IVAR____TtCVV8CreateML20MLActivityClassifier7Trainer14ModelContainer_model;
        swift_beginAccess(v113 + OBJC_IVAR____TtCVV8CreateML20MLActivityClassifier7Trainer14ModelContainer_model, v158, 0, 0);
        outlined init with copy of MLTrainingSessionParameters(v114, (uint64_t)v174, type metadata accessor for MLActivityClassifier.Model);
        uint64_t v115 = v113 + OBJC_IVAR____TtCVV8CreateML20MLActivityClassifier7Trainer14ModelContainer_model;
        swift_beginAccess(v113 + OBJC_IVAR____TtCVV8CreateML20MLActivityClassifier7Trainer14ModelContainer_model, v159, 0, 0);
        uint64_t v196 = *(void *)(*(int *)(v193 + 60) + v115);
        uint64_t v116 = OBJC_IVAR____TtCVV8CreateML20MLActivityClassifier7Trainer14ModelContainer_model + v113;
        swift_beginAccess(v116, v161, 33, 0);
        uint64_t v117 = *(int *)(v193 + 72);
        if (!*(void *)(v117 + v116)) {
          BUG();
        }
        uint64_t v183 = (void (**)(uint64_t *, uint64_t *, uint64_t))(v117 + v116 + 8);
        uint64_t v118 = *(int *)(v172 + 20);
        uint64_t v171 = (uint64_t (*)())v179;
        uint64_t v119 = (uint64_t)v186;
        v181 = *(uint64_t **)((char *)v186 + v118 + 24);
        uint64_t v191 = type metadata accessor for ShuffleSampler(0);
        uint64_t v184 = *(uint64_t **)(v119 + v118 + 8);
        LODWORD(v119) = *(unsigned __int8 *)(v119 + v118 + 16);
        swift_bridgeObjectRetain(v196);
        swift_bridgeObjectRetain(v179);
        uint64_t v120 = v191;
        uint64_t v121 = ShuffleSampler.__allocating_init(seed:)(v184, v119);
        v170[3] = v120;
        v170[4] = &protocol witness table for ShuffleSampler;
        v170[0] = v121;
        (*(void (**)(uint64_t *, void, uint64_t))(v166 + 104))(v175, enum case for Dataset.PrefetchMode.serial<A, B>(_:), v167);
        uint64_t v191 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [WeightedDataSample]);
        uint64_t v184 = (uint64_t *)lazy protocol witness table accessor for type FullyConnectedNetworkClassifier<Float, String> and conformance FullyConnectedNetworkClassifier<A, B>(&lazy protocol witness table cache variable for type [WeightedDataSample] and conformance [A], &demangling cache variable for type metadata for [WeightedDataSample], (uint64_t)&protocol conformance descriptor for [A]);
        uint64_t v122 = lazy protocol witness table accessor for type VNImageOption and conformance VNImageOption(&lazy protocol witness table cache variable for type WeightedDataSample and conformance WeightedDataSample, type metadata accessor for WeightedDataSample, (uint64_t)&protocol conformance descriptor for WeightedDataSample);
        uint64_t v123 = lazy protocol witness table accessor for type VNImageOption and conformance VNImageOption(&lazy protocol witness table cache variable for type WeightedDataSample and conformance WeightedDataSample, type metadata accessor for WeightedDataSample, (uint64_t)&protocol conformance descriptor for WeightedDataSample);
        uint64_t v124 = (uint64_t)v180;
        Dataset.init<>(samples:batchSize:batchSampler:dropsLastPartialBatch:prefetchMode:transform:)(&v171, v181, v170, 0, v175, 0, 0, v191, v177, v184, v122, v123);
        uint64_t v125 = (uint64_t)v174;
        MLActivityClassifier.Trainer.evaluate(model:using:classLabels:confussionMatrix:)((uint64_t)v174, *(double *)&v110, a4, v124, v196, v183);
        if (v99)
        {
          double v197 = *(double *)&v99;
          char v126 = *(void (**)(uint64_t *, uint64_t))(v185 + 8);
          uint64_t v127 = v188;
          v126(v180, v188);
          outlined destroy of MLActivityClassifier.ModelParameters((uint64_t)v186, type metadata accessor for MLActivityClassifier.Trainer);
          swift_endAccess(v161);
          swift_bridgeObjectRelease(v196);
          swift_bridgeObjectRelease((_BYTE)v57);
          ((void (*)(uint64_t *, uint64_t))v194)(v189, v190);
          v126(v187, v127);
          outlined destroy of MLActivityClassifier.ModelParameters(v125, type metadata accessor for MLActivityClassifier.Model);
          return v57;
        }
        double v197 = *(double *)&v110;
        (*(void (**)(uint64_t *, uint64_t))(v185 + 8))(v180, v188);
        outlined destroy of MLActivityClassifier.ModelParameters((uint64_t)v186, type metadata accessor for MLActivityClassifier.Trainer);
        swift_endAccess(v161);
        swift_bridgeObjectRelease(v196);
        outlined destroy of MLActivityClassifier.ModelParameters(v125, type metadata accessor for MLActivityClassifier.Model);
        char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v57);
        v170[0] = v57;
        double v131 = v197;
        specialized _NativeDictionary.setValue(_:forKey:isUnique:)(4, isUniquelyReferenced_nonNull_native, v197);
        uint64_t v196 = v170[0];
        swift_bridgeObjectRelease(0);
        uint64_t v132 = *(void *)((char *)v195 + v192);
        if (!v132) {
          BUG();
        }
        uint64_t v133 = OBJC_IVAR____TtCVV8CreateML20MLActivityClassifier7Trainer14ModelContainer_model + v132;
        swift_beginAccess(v133, v170, 0, 0);
        uint64_t v134 = (uint64_t)v169;
        outlined init with copy of MLTrainingSessionParameters(v133, (uint64_t)v169, type metadata accessor for MLActivityClassifier.Model);
        uint64_t v135 = *(int *)(v193 + 72);
        uint64_t v136 = *(void *)(v134 + v135);
        uint64_t v137 = *(void *)(v134 + v135 + 8);
        double v197 = *(double *)(v134 + v135 + 16);
        outlined copy of ClassificationMetricsContainer?(v136, v137, *(uint64_t *)&v197);
        outlined destroy of MLActivityClassifier.ModelParameters(v134, type metadata accessor for MLActivityClassifier.Model);
        if (!v136) {
          BUG();
        }
        swift_release();
        swift_bridgeObjectRelease(LOBYTE(v197));
        _MetricUtilities.ConfusionMatrixMeter.value(normalized:)(0, v131, a4);
        swift_release();
        uint64_t v138 = *(void *)((char *)v195 + v192);
        if (!v138) {
          BUG();
        }
        uint64_t v139 = OBJC_IVAR____TtCVV8CreateML20MLActivityClassifier7Trainer14ModelContainer_model + v138;
        swift_beginAccess(v139, v161, 0, 0);
        uint64_t v140 = v139;
        uint64_t v141 = (uint64_t)v168;
        outlined init with copy of MLTrainingSessionParameters(v140, (uint64_t)v168, type metadata accessor for MLActivityClassifier.Model);
        uint64_t v142 = *(int *)(v193 + 72);
        uint64_t v143 = *(void *)(v141 + v142);
        uint64_t v144 = *(void *)(v141 + v142 + 16);
        double v197 = *(double *)(v141 + v142 + 8);
        outlined copy of ClassificationMetricsContainer?(v143, *(uint64_t *)&v197, v144);
        outlined destroy of MLActivityClassifier.ModelParameters(v141, type metadata accessor for MLActivityClassifier.Model);
        if (!v143) {
          BUG();
        }
        swift_release();
        swift_release();
        uint64_t v145 = *(void *)(v144 + 16);
        swift_bridgeObjectRelease(v144);
        uint64_t v146 = (uint64_t)v176;
        double v197 = static _MetricUtilities.top1Accuracy(confusionMatrix:classCount:)((uint64_t)v176, v145);
        uint64_t v147 = v146;
        uint64_t v129 = v194;
        ((void (*)(uint64_t, uint64_t))v194)(v147, v190);
        uint64_t v148 = v196;
        char v149 = swift_isUniquelyReferenced_nonNull_native(v196);
        uint64_t v171 = (uint64_t (*)())v148;
        specialized _NativeDictionary.setValue(_:forKey:isUnique:)(5, v149, v197);
        uint64_t v57 = v171;
        swift_bridgeObjectRelease(0);
      }
      else
      {
        uint64_t v129 = v194;
      }
      ((void (*)(uint64_t *, uint64_t))v129)(v189, v190);
      (*(void (**)(uint64_t *, uint64_t))(v185 + 8))(v187, v188);
    }
  }
  return v57;
}

Swift::Void __swiftcall __spoils<cf,zf,sf,of,pf,rax,rdx,rcx,rdi,rsi,r8,r9,r10,r11,r12,xmm0,xmm1,xmm2,xmm3,xmm4,xmm5,xmm6,xmm7> MLActivityClassifier.Trainer.initializeModel()()
{
  uint64_t v64 = v0;
  uint64_t v68 = v1;
  uint64_t v69 = type metadata accessor for MLActivityClassifier.Configuration(0);
  int64_t v2 = *(void *)(*(void *)(v69 - 8) + 64);
  uint64_t v3 = alloca(v2);
  uint64_t v4 = alloca(v2);
  uint64_t v60 = &v54;
  uint64_t v61 = type metadata accessor for MLActivityClassifier.Model(0);
  int64_t v5 = *(void *)(*(void *)(v61 - 8) + 64);
  int64_t v6 = alloca(v5);
  uint64_t v7 = alloca(v5);
  uint64_t v58 = &v54;
  uint64_t v8 = type metadata accessor for MLActivityClassifier.Trainer(0);
  int64_t v9 = *(void *)(*(void *)(v8 - 8) + 64);
  uint64_t v10 = alloca(v9);
  uint64_t v11 = alloca(v9);
  uint64_t v65 = &v54;
  int64_t v12 = *(void *)(*(void *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for DataFrame?)
                              - 8)
                  + 64);
  char v13 = alloca(v12);
  unint64_t v14 = alloca(v12);
  uint64_t v56 = &v54;
  int64_t v15 = alloca(v12);
  uint64_t v16 = alloca(v12);
  uint64_t v62 = &v54;
  uint64_t v17 = alloca(v12);
  int64_t v18 = alloca(v12);
  uint64_t v19 = type metadata accessor for DataFrame(0);
  uint64_t v66 = *(void *)(v19 - 8);
  int64_t v20 = *(void *)(v66 + 64);
  int64_t v21 = alloca(v20);
  uint64_t v22 = alloca(v20);
  uint64_t v59 = v8;
  int64_t v23 = (Swift::String *)(v68 + *(int *)(v8 + 20));
  uint64_t v57 = (uint64_t)v23 + *(int *)(v69 + 44);
  outlined init with copy of Either<LogisticRegressionClassifier<Float, String>, FullyConnectedNetworkClassifier<Float, String>>(v57, (uint64_t)&v54, &demangling cache variable for type metadata for DataFrame?);
  uint64_t v67 = v19;
  if (__swift_getEnumTagSinglePayload((uint64_t)&v54, 1, v19) == 1)
  {
    outlined destroy of Tensor?((uint64_t)&v54, &demangling cache variable for type metadata for DataFrame?);
    _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, 0xD000000000000019, "Failed to initalize training" + 0x8000000000000000, "CreateML/MLActivityClassifier+Training.swift", 44, 2, 195, 0);
    BUG();
  }
  (*(void (**)(uint64_t *, uint64_t *, uint64_t))(v66 + 32))(&v54, &v54, v67);
  uint64_t v24 = *(int *)(v69 + 48);
  uint64_t v63 = v23;
  uint64_t v25 = v62;
  outlined init with copy of Either<LogisticRegressionClassifier<Float, String>, FullyConnectedNetworkClassifier<Float, String>>((uint64_t)v23 + v24, (uint64_t)v62, &demangling cache variable for type metadata for DataFrame?);
  int64_t v26 = v64;
  MLActivityClassifier.Trainer.validateData(_:_:)((uint64_t)&v54, v25);
  uint64_t v69 = (uint64_t)v26;
  uint64_t v27 = (uint64_t)v25;
  uint64_t v28 = &v54;
  if (v26) {
    goto LABEL_5;
  }
  DataFrame.convertNumericColumnsToFloat(except:)(v63[3]);
  uint64_t v29 = v57;
  outlined destroy of Tensor?(v57, &demangling cache variable for type metadata for DataFrame?);
  uint64_t v64 = &v54;
  uint64_t v30 = v67;
  (*(void (**)(uint64_t, uint64_t *, uint64_t))(v66 + 16))(v29, &v54, v67);
  __swift_storeEnumTagSinglePayload(v29, 0, 1, v30);
  uint64_t v31 = (uint64_t)v65;
  outlined init with copy of MLTrainingSessionParameters(v68, (uint64_t)v65, type metadata accessor for MLActivityClassifier.Trainer);
  uint64_t v32 = v29;
  uint64_t v33 = (uint64_t)v56;
  outlined init with copy of Either<LogisticRegressionClassifier<Float, String>, FullyConnectedNetworkClassifier<Float, String>>(v32, (uint64_t)v56, &demangling cache variable for type metadata for DataFrame?);
  if (__swift_getEnumTagSinglePayload(v33, 1, v30) == 1) {
    BUG();
  }
  uint64_t v34 = (uint64_t)v63;
  int64_t v35 = MLActivityClassifier.Trainer.getClassLabels(_:_:)(v33);
  outlined destroy of MLActivityClassifier.ModelParameters(v31, type metadata accessor for MLActivityClassifier.Trainer);
  uint64_t v65 = *(uint64_t **)(v66 + 8);
  ((void (*)(uint64_t, uint64_t))v65)(v33, v67);
  uint64_t v36 = (uint64_t)v60;
  outlined init with copy of MLTrainingSessionParameters(v34, (uint64_t)v60, type metadata accessor for MLActivityClassifier.Configuration);
  swift_bridgeObjectRetain((_BYTE)v35);
  uint64_t v37 = (uint64_t)v58;
  uint64_t v38 = (uint64_t)v35;
  MLActivityClassifier.Model.init(classLabels:randomSeed:trainingConfiguration:)((uint64_t)v35, 0, 1u, v36);
  uint64_t v39 = type metadata accessor for MLActivityClassifier.Trainer.ModelContainer(0);
  uint64_t v40 = swift_allocObject(v39, *(unsigned int *)(v39 + 48), *(unsigned __int16 *)(v39 + 52));
  MLActivityClassifier.Trainer.ModelContainer.init(model:)(v37);
  uint64_t v41 = *(int *)(v59 + 24);
  uint64_t v42 = v68;
  swift_release();
  *(void *)(v42 + v41) = v40;
  uint64_t v43 = v69;
  uint64_t v44 = ClassificationMetricsContainer.init(classLabels:)(v38);
  uint64_t v69 = v43;
  uint64_t v27 = (uint64_t)v62;
  uint64_t v28 = v64;
  if (v43)
  {
LABEL_5:
    outlined destroy of Tensor?(v27, &demangling cache variable for type metadata for DataFrame?);
    (*(void (**)(uint64_t *, uint64_t))(v66 + 8))(v28, v67);
  }
  else
  {
    uint64_t v47 = v44;
    uint64_t v48 = v45;
    uint64_t v68 = v46;
    outlined destroy of Tensor?((uint64_t)v62, &demangling cache variable for type metadata for DataFrame?);
    ((void (*)(uint64_t *, uint64_t))v65)(v28, v67);
    uint64_t v49 = OBJC_IVAR____TtCVV8CreateML20MLActivityClassifier7Trainer14ModelContainer_model + v40;
    swift_beginAccess(v49, v55, 1, 0);
    uint64_t v50 = *(int *)(v61 + 72);
    uint64_t v51 = *(void *)(v50 + v49);
    uint64_t v52 = *(void *)(v50 + v49 + 8);
    uint64_t v53 = *(void *)(v50 + v49 + 16);
    *(void *)(v50 + v49) = v47;
    *(void *)(v50 + v49 + 8) = v48;
    *(void *)(v50 + v49 + 16) = v68;
    outlined consume of ClassificationMetricsContainer?(v51, v52, v53);
  }
}

uint64_t specialized static Adam.createOptimizer(for:checkpointDictionary:)(uint64_t a1, uint64_t a2)
{
  v35[0] = a1;
  v35[1] = v2;
  unint64_t v3 = 0xEC00000065746152;
  uint64_t v4 = 0x676E696E7261656CLL;
  int64_t v5 = *(void *)(*(void *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for RegularizationKind?)
                             - 8)
                 + 64);
  int64_t v6 = alloca(v5);
  uint64_t v7 = alloca(v5);
  uint64_t v36 = v35;
  int64_t v8 = *(void *)(*(void *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for GradientClippingMode?)
                             - 8)
                 + 64);
  int64_t v9 = alloca(v8);
  uint64_t v10 = alloca(v8);
  uint64_t v38 = v35;
  uint64_t v11 = specialized Dictionary.subscript.getter(0x676E696E7261656CLL, 0xEC00000065746152, a2);
  if (!v11) {
    goto LABEL_15;
  }
  if (*(void *)(v11 + 16) != 1) {
    goto LABEL_14;
  }
  unint64_t v3 = 0xE500000000000000;
  uint64_t v4 = 0x3161746562;
  double v40 = *(double *)(v11 + 32);
  swift_bridgeObjectRelease(v11);
  uint64_t v11 = specialized Dictionary.subscript.getter(0x3161746562, 0xE500000000000000, a2);
  if (v11)
  {
    if (*(void *)(v11 + 16) != 1)
    {
LABEL_14:
      swift_bridgeObjectRelease(v11);
      goto LABEL_15;
    }
    uint64_t v4 = 0x3261746562;
    double v41 = *(double *)(v11 + 32);
    swift_bridgeObjectRelease(v11);
    uint64_t v11 = specialized Dictionary.subscript.getter(0x3261746562, 0xE500000000000000, a2);
    if (v11)
    {
      if (*(void *)(v11 + 16) == 1)
      {
        unint64_t v12 = 0xEB00000000646172;
        uint64_t v13 = 0x47534D4173657375;
        double v42 = *(double *)(v11 + 32);
        swift_bridgeObjectRelease(v11);
        uint64_t v14 = specialized Dictionary.subscript.getter(0x47534D4173657375, 0xEB00000000646172, a2);
        if (v14)
        {
          if (*(void *)(v14 + 16) != 1) {
            goto LABEL_17;
          }
          unint64_t v12 = 0xE700000000000000;
          uint64_t v13 = 0x6E6F6C69737065;
          *(void *)uint64_t v43 = *(void *)(v14 + 32);
          swift_bridgeObjectRelease(v14);
          uint64_t v14 = specialized Dictionary.subscript.getter(0x6E6F6C69737065, 0xE700000000000000, a2);
          if (!v14) {
            goto LABEL_18;
          }
          if (*(void *)(v14 + 16) != 1)
          {
LABEL_17:
            swift_bridgeObjectRelease(v14);
            goto LABEL_18;
          }
          unint64_t v12 = 0xED0000656C616353;
          uint64_t v13 = 0x746E656964617267;
          double v37 = *(double *)(v14 + 32);
          swift_bridgeObjectRelease(v14);
          uint64_t v14 = specialized Dictionary.subscript.getter(0x746E656964617267, 0xED0000656C616353, a2);
          if (v14)
          {
            if (*(void *)(v14 + 16) == 1)
            {
              v15.f64[0] = 1.0;
              unsigned int v16 = *(_OWORD *)&_mm_cmpeq_sd((__m128d)*(unint64_t *)v43, v15) & 1;
              float v17 = *(double *)(v14 + 32);
              v43[0] = v17;
              swift_bridgeObjectRelease(v14);
              float v18 = v40;
              float v39 = v18;
              float v19 = v41;
              *(float *)&double v41 = v19;
              float v20 = v42;
              *(float *)&double v42 = v20;
              float v21 = v37;
              *(float *)&double v40 = v21;
              uint64_t v22 = type metadata accessor for GradientClippingMode(0);
              __swift_storeEnumTagSinglePayload((uint64_t)v38, 1, 1, v22);
              uint64_t v23 = type metadata accessor for RegularizationKind(0);
              uint64_t v24 = (uint64_t)v36;
              __swift_storeEnumTagSinglePayload((uint64_t)v36, 1, 1, v23);
              uint64_t v25 = type metadata accessor for MLActivityClassifier.Model(0);
              uint64_t v26 = lazy protocol witness table accessor for type VNImageOption and conformance VNImageOption(&lazy protocol witness table cache variable for type MLActivityClassifier.Model and conformance MLActivityClassifier.Model, type metadata accessor for MLActivityClassifier.Model, (uint64_t)&protocol conformance descriptor for MLActivityClassifier.Model);
              return Adam.init(for:learningRate:beta1:beta2:usesAMSGrad:epsilon:gradientClippingMode:regularizationKind:gradientScale:)(v35[0], v16, v38, v24, v25, v26, v39, *(float *)&v41, *(float *)&v42, *(float *)&v40, v43[0]);
            }
            goto LABEL_17;
          }
        }
LABEL_18:
        uint64_t v34 = lazy protocol witness table accessor for type MLCreateError and conformance MLCreateError();
        swift_allocError(&type metadata for MLCreateError, v34, 0, 0);
        v29._uint64_t countAndFlagsBits = v13;
        v29._char object = (void *)v12;
        goto LABEL_16;
      }
      goto LABEL_14;
    }
  }
LABEL_15:
  uint64_t v28 = lazy protocol witness table accessor for type MLCreateError and conformance MLCreateError();
  swift_allocError(&type metadata for MLCreateError, v28, 0, 0);
  v29._uint64_t countAndFlagsBits = v4;
  v29._char object = (void *)v3;
LABEL_16:
  static MLCreateError.checkoutDictionaryMissingOrInvalidValue(key:)(v29);
  return swift_willThrow(v29._countAndFlagsBits, v29._object, v30, v31, v32, v33);
}

uint64_t MLActivityClassifier.Trainer.validateData(_:_:)(uint64_t a1, void *a2)
{
  uint64_t v104 = v2;
  v96._char object = a2;
  uint64_t v108 = a1;
  uint64_t v99 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Column<String>);
  uint64_t v98 = *(void *)(v99 - 8);
  int64_t v4 = *(void *)(v98 + 64);
  int64_t v5 = alloca(v4);
  int64_t v6 = alloca(v4);
  uint64_t v102 = &v88;
  uint64_t v101 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for FilledColumn<Column<String>>);
  uint64_t v100 = *(void *)(v101 - 8);
  int64_t v7 = *(void *)(v100 + 64);
  int64_t v8 = alloca(v7);
  int64_t v9 = alloca(v7);
  uint64_t v103 = &v88;
  int64_t v10 = *(void *)(*(void *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for DataFrame?)
                              - 8)
                  + 64);
  uint64_t v11 = alloca(v10);
  unint64_t v12 = alloca(v10);
  uint64_t v97 = &v88;
  uint64_t v13 = type metadata accessor for DataFrame(0);
  uint64_t v14 = *(void *)(v13 - 8);
  int64_t v15 = *(void *)(v14 + 64);
  unsigned int v16 = alloca(v15);
  float v17 = alloca(v15);
  float v18 = &v88;
  uint64_t v92 = type metadata accessor for AnyColumn(0);
  uint64_t v93 = *(void *)(v92 - 8);
  int64_t v19 = *(void *)(v93 + 64);
  float v20 = alloca(v19);
  float v21 = alloca(v19);
  uint64_t v94 = &v88;
  uint64_t v22 = *(int *)(type metadata accessor for MLActivityClassifier.Trainer(0) + 20);
  uint64_t v105 = v3;
  uint64_t v23 = *(void *)(v3 + v22 + 40);
  uint64_t v24 = v22;
  uint64_t v25 = *(void *)(v23 + 16);
  uint64_t v110 = v14;
  uint64_t v111 = v13;
  uint64_t v112 = &v88;
  uint64_t v106 = v24;
  if (v25)
  {
    uint64_t v95 = v25;
    uint64_t v26 = v23;
    swift_bridgeObjectRetain(v23);
    uint64_t v109 = v26;
    uint64_t v27 = (void **)(v26 + 40);
    while (1)
    {
      uint64_t v28 = (uint64_t)*(v27 - 1);
      Swift::String v29 = *v27;
      swift_bridgeObjectRetain(*v27);
      v30._uint64_t countAndFlagsBits = v28;
      v30._char object = v29;
      if (DataFrame.indexOfColumn(_:)(v30).is_nil)
      {
        swift_bridgeObjectRelease(v109);
        uint64_t v58 = lazy protocol witness table accessor for type MLCreateError and conformance MLCreateError();
        swift_allocError(&type metadata for MLCreateError, v58, 0, 0);
        uint64_t v59 = v28;
        v60._char object = v29;
        static MLCreateError.featureNotFound(feature:)(v60);
        v60._uint64_t countAndFlagsBits = (uint64_t)v29;
        swift_bridgeObjectRelease((_BYTE)v29);
        return swift_willThrow(v60._countAndFlagsBits, v60._object, v61, v62, v63, v64);
      }
      uint64_t v107 = v27;
      uint64_t v31 = v94;
      v96._uint64_t countAndFlagsBits = v28;
      v113._uint64_t countAndFlagsBits = (uint64_t)v29;
      DataFrame.subscript.getter(v28, v29);
      uint64_t v32 = (void *)AnyColumn.wrappedElementType.getter();
      (*(void (**)(void **, uint64_t))(v93 + 8))(v31, v92);
      if (v32 != (void *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [Double])
        && v32 != (void *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [Float])
        && v32 != (void *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [Any])
        && v32 != &type metadata for Double
        && v32 != &type metadata for Float)
      {
        break;
      }
      swift_bridgeObjectRelease(v113._countAndFlagsBits);
      uint64_t v27 = v107 + 2;
      if (!--v95)
      {
        swift_bridgeObjectRelease(v109);
        uint64_t v13 = v111;
        float v18 = v112;
        uint64_t v24 = v106;
        goto LABEL_11;
      }
    }
    swift_bridgeObjectRelease(v109);
    uint64_t v90 = 0;
    unint64_t v91 = 0xE000000000000000;
    _StringGuts.grow(_:)(54);
    v65._uint64_t countAndFlagsBits = 0xD000000000000034;
    v65._char object = "No training data provided" + 0x8000000000000000;
    String.append(_:)(v65);
    uint64_t v88 = v32;
    uint64_t v66 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Any.Type);
    uint64_t v67 = String.init<A>(describing:)(&v88, v66);
    char v69 = (char)v68;
    v65._uint64_t countAndFlagsBits = v67;
    v65._char object = v68;
    String.append(_:)(v65);
    swift_bridgeObjectRelease(v69);
    uint64_t v70 = v90;
    uint64_t v71 = (void *)v91;
    uint64_t v72 = lazy protocol witness table accessor for type MLCreateError and conformance MLCreateError();
    swift_allocError(&type metadata for MLCreateError, v72, 0, 0);
    v65._uint64_t countAndFlagsBits = v96._countAndFlagsBits;
    uint64_t countAndFlagsBits = v113._countAndFlagsBits;
    v60._char object = (void *)v113._countAndFlagsBits;
    v74._uint64_t countAndFlagsBits = v70;
    v74._char object = v71;
    static MLCreateError.featureFormatNotSupported(feature:message:)(v60, v74);
    swift_bridgeObjectRelease((_BYTE)v71);
    v60._uint64_t countAndFlagsBits = countAndFlagsBits;
    swift_bridgeObjectRelease(countAndFlagsBits);
    return swift_willThrow(v60._countAndFlagsBits, v60._object, v61, v62, v63, v64);
  }
  else
  {
LABEL_11:
    uint64_t v33 = (uint64_t)v97;
    outlined init with copy of Either<LogisticRegressionClassifier<Float, String>, FullyConnectedNetworkClassifier<Float, String>>((uint64_t)v96._object, (uint64_t)v97, &demangling cache variable for type metadata for DataFrame?);
    if (__swift_getEnumTagSinglePayload(v33, 1, v13) == 1)
    {
      return outlined destroy of Tensor?(v33, &demangling cache variable for type metadata for DataFrame?);
    }
    else
    {
      (*(void (**)(void **, uint64_t, uint64_t))(v110 + 32))(v18, v33, v13);
      uint64_t v35 = *(void *)(v105 + v24 + 48);
      uint64_t v36 = v108;
      v113._uint64_t countAndFlagsBits = (uint64_t)MLActivityClassifier.Trainer.getClassLabels(_:_:)(v108);
      uint64_t v37 = DataFrame.columns.getter(v36, v35);
      uint64_t v38 = *(void *)(v37 + 16);
      uint64_t v39 = v37;
      swift_bridgeObjectRelease(v37);
      uint64_t v40 = DataFrame.columns.getter(v39, v35);
      uint64_t v41 = *(void *)(v40 + 16);
      uint64_t v42 = v40;
      swift_bridgeObjectRelease(v40);
      if (v38 != v41) {
        goto LABEL_15;
      }
      uint64_t v43 = DataFrame.columns.getter(v42, v35);
      char v44 = v43;
      uint64_t v45 = v104;
      MLE23validateContainsColumns_7contextySaySSG_SStKFSSAA9fG54Vcfu_33_06ca46402338970f1b3e0a01942d815dAISSTf3nnnpk_nTf1cn_n = _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSay11TabularData9AnyColumnVG_SSs5NeverOTg504_s11d75Data0B5FrameV8CreateMLE23validateContainsColumns_7contextySaySSG_SStKFSSAA9fG54Vcfu_33_06ca46402338970f1b3e0a01942d815dAISSTf3nnnpk_nTf1cn_n(v43);
      swift_bridgeObjectRelease(v44);
      uint64_t v47 = MLE23validateContainsColumns_7contextySaySSG_SStKFSSAA9fG54Vcfu_33_06ca46402338970f1b3e0a01942d815dAISSTf3nnnpk_nTf1cn_n;
      uint64_t v48 = (void *)specialized Set.init<A>(_:)((uint64_t)MLE23validateContainsColumns_7contextySaySSG_SStKFSSAA9fG54Vcfu_33_06ca46402338970f1b3e0a01942d815dAISSTf3nnnpk_nTf1cn_n);
      uint64_t v49 = DataFrame.columns.getter(v47, v89);
      char v50 = v49;
      uint64_t v51 = _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSay11TabularData9AnyColumnVG_SSs5NeverOTg504_s11d75Data0B5FrameV8CreateMLE23validateContainsColumns_7contextySaySSG_SStKFSSAA9fG54Vcfu_33_06ca46402338970f1b3e0a01942d815dAISSTf3nnnpk_nTf1cn_n(v49);
      swift_bridgeObjectRelease(v50);
      char v52 = specialized Set._isDisjoint<A>(with:)((uint64_t)v51, v48);
      swift_bridgeObjectRelease((_BYTE)v51);
      swift_bridgeObjectRelease((_BYTE)v48);
      if ((v52 & 1) == 0)
      {
        uint64_t v75 = v102;
        DataFrame.subscript.getter(*(void *)(v105 + v106 + 48), *(void *)(v105 + v106 + 56), &type metadata for String);
        uint64_t v90 = 0;
        unint64_t v91 = 0xE000000000000000;
        uint64_t v76 = lazy protocol witness table accessor for type FullyConnectedNetworkClassifier<Float, String> and conformance FullyConnectedNetworkClassifier<A, B>(&lazy protocol witness table cache variable for type Column<String> and conformance Column<A>, &demangling cache variable for type metadata for Column<String>, (uint64_t)&protocol conformance descriptor for Column<A>);
        uint64_t v107 = v45;
        char v77 = v103;
        uint64_t v78 = v99;
        OptionalColumnProtocol.filled(with:)(&v90, v99, v76);
        (*(void (**)(void **, uint64_t))(v98 + 8))(v75, v78);
        v113._uint64_t countAndFlagsBits = specialized Sequence.first(where:)((void (*)(void *, void))v77, v113._countAndFlagsBits);
        uint64_t v80 = v79;
        (*(void (**)(void **, uint64_t))(v100 + 8))(v77, v101);
        uint64_t v81 = v110;
        if (v80)
        {
          uint64_t v82 = lazy protocol witness table accessor for type MLCreateError and conformance MLCreateError();
          swift_allocError(&type metadata for MLCreateError, v82, 0, 0);
          v83._uint64_t countAndFlagsBits = v113._countAndFlagsBits;
          v83._char object = v80;
          static MLCreateError.validationClassNotFound(className:)(v83, 46, 0xD000000000000011, (uint64_t)("does not match training data" + 0x8000000000000000));
          swift_bridgeObjectRelease((_BYTE)v80);
          swift_willThrow(v80, v80, v84, v85, v86, v87);
        }
        return (*(uint64_t (**)(void **, uint64_t))(v81 + 8))(v112, v111);
      }
      else
      {
LABEL_15:
        swift_bridgeObjectRelease(v113._countAndFlagsBits);
        uint64_t v53 = lazy protocol witness table accessor for type MLCreateError and conformance MLCreateError();
        swift_allocError(&type metadata for MLCreateError, v53, 0, 0);
        *(void *)uint64_t v54 = 0xD00000000000002CLL;
        *(void *)(v54 + 8) = " or [Float], found: " + 0x8000000000000000;
        *(_OWORD *)(v54 + 16) = 0;
        *(_OWORD *)(v54 + 32) = 0;
        *(unsigned char *)(v54 + 48) = 0;
        swift_willThrow(&type metadata for MLCreateError, v53, v54, v55, v56, v57);
        return (*(uint64_t (**)(void **, uint64_t))(v110 + 8))(v112, v111);
      }
    }
  }
}

Swift::Void __swiftcall DataFrame.convertNumericColumnsToFloat(except:)(Swift::String except)
{
  char object = except._object;
  uint64_t countAndFlagsBits = except._countAndFlagsBits;
  int64_t v2 = *(void *)(*(void *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Column<[Float]>?)
                             - 8)
                 + 64);
  uint64_t v3 = alloca(v2);
  int64_t v4 = alloca(v2);
  uint64_t v41 = &v37;
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Column<[Float]>);
  uint64_t v47 = *(void *)(v5 - 8);
  int64_t v6 = *(void *)(v47 + 64);
  int64_t v7 = alloca(v6);
  int64_t v8 = alloca(v6);
  uint64_t v51 = &v37;
  uint64_t v9 = type metadata accessor for AnyColumn(0);
  uint64_t v52 = *(void *)(v9 - 8);
  int64_t v10 = *(void *)(v52 + 64);
  uint64_t v11 = alloca(v10);
  unint64_t v12 = alloca(v10);
  uint64_t v38 = &v37;
  uint64_t v13 = alloca(v10);
  uint64_t v14 = alloca(v10);
  uint64_t v55 = &v37;
  int64_t v15 = *(void *)(*(void *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AnyColumn?)
                              - 8)
                  + 64);
  unsigned int v16 = alloca(v15);
  float v17 = alloca(v15);
  float v18 = &v37;
  uint64_t v42 = v1;
  uint64_t v46 = DataFrame.columns.getter(&demangling cache variable for type metadata for AnyColumn?, except._object);
  uint64_t v19 = *(void *)(v46 + 16);
  if (v19)
  {
    uint64_t v20 = ((*(unsigned __int8 *)(v52 + 80) + 32) & ~*(unsigned __int8 *)(v52 + 80)) + v46;
    float v21 = *(void (**)(void, void, void))(v52 + 16);
    uint64_t v39 = *(void *)(v52 + 72);
    uint64_t v50 = v5;
    uint64_t v44 = v9;
    uint64_t v54 = &v37;
    uint64_t v49 = v21;
    while (1)
    {
      uint64_t v48 = v20;
      v21(v18, v20, v9);
      __swift_storeEnumTagSinglePayload((uint64_t)v18, 0, 1, v9);
      if (__swift_getEnumTagSinglePayload((uint64_t)v18, 1, v9) == 1) {
        goto LABEL_18;
      }
      uint64_t v53 = v19;
      uint64_t v22 = v55;
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(v52 + 32))(v55, v18, v9);
      uint64_t v23 = AnyColumn.wrappedElementType.getter();
      uint64_t v24 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [Float]);
      uint64_t v25 = v22;
      uint64_t v26 = v38;
      v21(v38, v25, v9);
      if (v23 == v24) {
        goto LABEL_8;
      }
      uint64_t v27 = AnyColumn.name.getter();
      char v29 = (char)v28;
      if (v27 == countAndFlagsBits && v28 == object) {
        break;
      }
      char v32 = _stringCompareWithSmolCheck(_:_:expecting:)(v27, v28, countAndFlagsBits, object, 0);
      swift_bridgeObjectRelease(v29);
      Swift::String v30 = *(void (**)(uint64_t *, uint64_t))(v52 + 8);
      uint64_t v9 = v44;
      v30(v26, v44);
      if ((v32 & 1) == 0)
      {
        uint64_t v33 = (uint64_t)v41;
        AnyColumn.convertedToFloatArrays()();
        if (__swift_getEnumTagSinglePayload(v33, 1, v50) == 1)
        {
          v30(v55, v9);
          outlined destroy of Tensor?(v33, &demangling cache variable for type metadata for Column<[Float]>?);
        }
        else
        {
          (*(void (**)(uint64_t *, uint64_t, uint64_t))(v47 + 32))(v51, v33, v50);
          uint64_t v34 = v55;
          uint64_t v35 = AnyColumn.name.getter();
          uint64_t v43 = v36;
          DataFrame.replaceColumn<A>(_:with:)(v35, v36, v51, v24);
          swift_bridgeObjectRelease(v43);
          (*(void (**)(uint64_t *, uint64_t))(v47 + 8))(v51, v50);
          v30(v34, v9);
        }
        float v18 = v54;
        uint64_t v31 = v53;
        goto LABEL_10;
      }
LABEL_9:
      float v18 = v54;
      uint64_t v31 = v53;
      v30(v55, v9);
LABEL_10:
      float v21 = v49;
      uint64_t v20 = v39 + v48;
      uint64_t v19 = v31 - 1;
      if (!v19) {
        goto LABEL_17;
      }
    }
    swift_bridgeObjectRelease((_BYTE)object);
LABEL_8:
    Swift::String v30 = *(void (**)(uint64_t *, uint64_t))(v52 + 8);
    uint64_t v9 = v44;
    v30(v26, v44);
    goto LABEL_9;
  }
LABEL_17:
  __swift_storeEnumTagSinglePayload((uint64_t)v18, 1, 1, v9);
LABEL_18:
  swift_bridgeObjectRelease(v46);
}

void *MLActivityClassifier.Trainer.getClassLabels(_:_:)(uint64_t a1)
{
  uint64_t v45 = a1;
  uint64_t v40 = 0;
  uint64_t v46 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for IndexingIterator<Column<String>>);
  int64_t v2 = *(void *)(*(void *)(v46 - 8) + 64);
  uint64_t v3 = alloca(v2);
  int64_t v4 = alloca(v2);
  uint64_t v43 = &v33;
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Column<String>);
  uint64_t v6 = *(void *)(v5 - 8);
  int64_t v7 = *(void *)(v6 + 64);
  int64_t v8 = alloca(v7);
  uint64_t v9 = alloca(v7);
  int64_t v10 = alloca(v7);
  uint64_t v11 = alloca(v7);
  uint64_t v12 = *(int *)(type metadata accessor for MLActivityClassifier.Trainer(0) + 20);
  DataFrame.subscript.getter(*(void *)(v1 + v12 + 48), *(void *)(v1 + v12 + 56), &type metadata for String);
  uint64_t v42 = v6;
  uint64_t v13 = *(void (**)(uint64_t *, uint64_t, uint64_t))(v6 + 16);
  uint64_t v41 = &v33;
  uint64_t v36 = v13;
  v13(&v33, (uint64_t)&v33, v5);
  uint64_t v14 = lazy protocol witness table accessor for type FullyConnectedNetworkClassifier<Float, String> and conformance FullyConnectedNetworkClassifier<A, B>(&lazy protocol witness table cache variable for type Column<String> and conformance Column<A>, &demangling cache variable for type metadata for Column<String>, (uint64_t)&protocol conformance descriptor for Column<A>);
  int64_t v15 = v43;
  uint64_t v35 = &v33;
  uint64_t v39 = v5;
  dispatch thunk of Sequence.makeIterator()(v5, v14);
  uint64_t v38 = (uint64_t *)((char *)v15 + *(int *)(v46 + 36));
  uint64_t v16 = lazy protocol witness table accessor for type FullyConnectedNetworkClassifier<Float, String> and conformance FullyConnectedNetworkClassifier<A, B>(&lazy protocol witness table cache variable for type Column<String> and conformance Column<A>, &demangling cache variable for type metadata for Column<String>, (uint64_t)&protocol conformance descriptor for Column<A>);
  uint64_t v44 = _swiftEmptyArrayStorage;
  uint64_t v45 = v16;
LABEL_2:
  uint64_t v17 = (uint64_t)v43;
  float v18 = v38;
  uint64_t v19 = v39;
  while (1)
  {
    uint64_t v46 = *v18;
    dispatch thunk of Collection.endIndex.getter(v19, v16);
    if (v46 == v34[0]) {
      break;
    }
    uint64_t v20 = (void (*)(void *, void))dispatch thunk of Collection.subscript.read(v34, v18, v19, v45);
    uint64_t v37 = *v21;
    uint64_t v46 = v21[1];
    swift_bridgeObjectRetain(v46);
    v20(v34, 0);
    uint64_t v22 = v35;
    v36(v35, v17, v19);
    uint64_t v23 = v45;
    dispatch thunk of Collection.formIndex(after:)(v18, v19, v45);
    (*(void (**)(uint64_t *, uint64_t))(v42 + 8))(v22, v19);
    uint64_t v16 = v23;
    if (v46)
    {
      uint64_t v24 = v37;
      uint64_t v25 = v44;
      if (!swift_isUniquelyReferenced_nonNull_native(v44)) {
        uint64_t v25 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v25[2] + 1, 1, (uint64_t)v25);
      }
      unint64_t v26 = v25[2];
      if (v25[3] >> 1 <= v26)
      {
        char v29 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(v25[3] >= 2uLL, v26 + 1, 1, (uint64_t)v25);
        uint64_t v27 = v24;
        uint64_t v16 = v23;
        uint64_t v25 = v29;
      }
      else
      {
        uint64_t v16 = v23;
        uint64_t v27 = v24;
      }
      v25[2] = v26 + 1;
      uint64_t v28 = 2 * v26;
      v25[v28 + 4] = v27;
      uint64_t v44 = v25;
      v25[v28 + 5] = v46;
      goto LABEL_2;
    }
  }
  outlined destroy of Tensor?(v17, &demangling cache variable for type metadata for IndexingIterator<Column<String>>);
  (*(void (**)(uint64_t *, uint64_t))(v42 + 8))(v41, v19);
  char v30 = (char)v44;
  uint64_t v31 = specialized Sequence.sorted(by:)((uint64_t)v44, (uint64_t)specialized closure #1 in Sequence<>.uniqued(), 0);
  swift_bridgeObjectRelease(v30);
  return v31;
}

uint64_t MLActivityClassifier.Trainer.makeDataset(_:_:using:for:)(void (*a1)(void **, uint64_t), uint64_t a2, uint64_t a3, int a4, double a5, double a6)
{
  uint64_t v53 = v7;
  uint64_t v9 = v8;
  LODWORD(v54) = a4;
  uint64_t v56 = (uint64_t *)a3;
  uint64_t v48 = a1;
  uint64_t v52 = v6;
  uint64_t v47 = (void (*)(void **, uint64_t))type metadata accessor for DataFrame.Rows(0);
  uint64_t v46 = *((void *)v47 - 1);
  int64_t v11 = *(void *)(v46 + 64);
  uint64_t v12 = alloca(v11);
  uint64_t v13 = alloca(v11);
  uint64_t v45 = &v43;
  unint64_t v50 = type metadata accessor for DataFrame(0);
  uint64_t v51 = *(void *)(v50 - 8);
  int64_t v14 = *(void *)(v51 + 64);
  int64_t v15 = alloca(v14);
  uint64_t v16 = alloca(v14);
  uint64_t v55 = &v43;
  int64_t v17 = *(void *)(*(void *)(type metadata accessor for MLActivityClassifier.DataBatcher(0) - 8) + 64);
  float v18 = alloca(v17);
  uint64_t v19 = alloca(v17);
  uint64_t v49 = &v43;
  uint64_t v20 = (uint64_t *)(v9 + *(int *)(type metadata accessor for MLActivityClassifier.Trainer(0) + 20));
  uint64_t v22 = (void *)v20[9];
  uint64_t v44 = v20[8];
  v21._uint64_t countAndFlagsBits = v44;
  v21._char object = v22;
  if (specialized DataFrame.containsColumn<A>(_:_:)(v21))
  {
    char v23 = v54 & 1;
    (*(void (**)(uint64_t *, uint64_t, unint64_t))(v51 + 16))(v55, a2, v50);
    uint64_t v54 = v20[6];
    unint64_t v50 = v20[7];
    char v24 = v50;
    uint64_t v56 = (uint64_t *)v20[4];
    uint64_t v51 = v20[5];
    swift_bridgeObjectRetain((_BYTE)v22);
    swift_bridgeObjectRetain(v24);
    uint64_t v25 = (void *)v51;
    swift_bridgeObjectRetain(v51);
    char v26 = v23;
    uint64_t v27 = (uint64_t)v49;
    uint64_t v28 = v53;
    uint64_t result = MLActivityClassifier.DataBatcher.init(input:sessionIdColumn:labelColumn:featureColumns:windowSize:sortSessions:mode:)((uint64_t)v55, v44, (uint64_t)v22, v54, v50, v25, a5, (uint64_t)v56, 0, v26);
    if (!v28)
    {
      uint64_t v30 = v27;
      uint64_t v31 = MLActivityClassifier.DataBatcher.asWeightedSamples(with:classLabels:labels:)((uint64_t)v20, v48, a5, a6);
      char v32 = (char)v31;
      specialized Sequence<>.makeDataset(configuration:)((uint64_t)v20, (uint64_t)v31);
      swift_bridgeObjectRelease(v32);
      return outlined destroy of MLActivityClassifier.ModelParameters(v30, type metadata accessor for MLActivityClassifier.DataBatcher);
    }
  }
  else
  {
    uint64_t v54 = v9;
    uint64_t v49 = v20;
    uint64_t v33 = *(uint64_t *)((char *)v56 + *(int *)(type metadata accessor for MLActivityClassifier.Model(0) + 64) + 40);
    swift_bridgeObjectRetain_n(v33, 2);
    uint64_t v55 = (uint64_t *)v33;
    uint64_t v34 = specialized Set.init<A>(_:)(v33);
    uint64_t v35 = DataFrame.columns.getter(v33, 2);
    swift_bridgeObjectRetain(v34);
    uint64_t v36 = v53;
    LOBYTE(v33) = specialized Sequence.allSatisfy(_:)(v35, v34);
    uint64_t v53 = v36;
    swift_bridgeObjectRelease(v34);
    swift_bridgeObjectRelease(v35);
    if (v33)
    {
      swift_bridgeObjectRelease((_BYTE)v55);
      return MLActivityClassifier.Trainer.makeFlatDataset(_:_:using:)(v48, a2, (uint64_t)v56);
    }
    else
    {
      uint64_t v37 = v45;
      DataFrame.rows.getter();
      uint64_t v56 = &v43;
      uint64_t v38 = alloca(40);
      uint64_t v39 = alloca(48);
      uint64_t v45 = (uint64_t *)v54;
      uint64_t v46 = (uint64_t)v55;
      uint64_t v47 = v48;
      uint64_t v40 = v53;
      ML08WeightedE6SampleVsAE_pTg5 = _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lF11TabularData0E5FrameV4RowsV_8CreateML08WeightedE6SampleVsAE_pTg5((void (*)(void *, void *))partial apply for closure #2 in MLActivityClassifier.Trainer.makeDataset(_:_:using:for:), (uint64_t)&v43);
      if (v40)
      {
        swift_bridgeObjectRelease((_BYTE)v55);
        return (*(uint64_t (**)(uint64_t *, void))(v46 + 8))(v37, v47);
      }
      else
      {
        uint64_t v42 = (uint64_t)ML08WeightedE6SampleVsAE_pTg5;
        (*(void (**)(uint64_t *, void))(v46 + 8))(v37, v47);
        swift_bridgeObjectRelease((_BYTE)v55);
        specialized Sequence<>.makeDataset(configuration:)((uint64_t)v49, v42);
        return swift_bridgeObjectRelease(v42);
      }
    }
  }
  return result;
}

uint64_t MLActivityClassifier.Trainer.update(_:using:on:)(char *a1, void *a2, uint64_t a3, double a4, double a5)
{
  uint64_t v118 = v6;
  uint64_t v121 = (unsigned char *)a3;
  uint64_t v122 = a2;
  uint64_t v123 = a1;
  uint64_t v100 = v5;
  uint64_t v110 = type metadata accessor for TensorShape(0);
  uint64_t v102 = *(void *)(v110 - 8);
  int64_t v7 = *(void *)(v102 + 64);
  uint64_t v8 = alloca(v7);
  uint64_t v9 = alloca(v7);
  uint64_t v105 = v93;
  int64_t v10 = alloca(v7);
  int64_t v11 = alloca(v7);
  uint64_t v111 = v93;
  uint64_t v12 = alloca(v7);
  uint64_t v13 = alloca(v7);
  uint64_t v103 = v93;
  uint64_t v119 = type metadata accessor for MLActivityClassifier.Model(0);
  int64_t v14 = *(void *)(*(void *)(v119 - 8) + 64);
  int64_t v15 = alloca(v14);
  uint64_t v16 = alloca(v14);
  uint64_t v99 = v93;
  uint64_t v17 = type metadata accessor for Tensor(0);
  uint64_t v117 = *(void *)(v17 - 8);
  int64_t v18 = *(void *)(v117 + 64);
  uint64_t v19 = alloca(v18);
  uint64_t v20 = alloca(v18);
  uint64_t v107 = v93;
  Swift::String v21 = alloca(v18);
  uint64_t v22 = alloca(v18);
  Swift::String v113 = v93;
  char v23 = alloca(v18);
  char v24 = alloca(v18);
  uint64_t v116 = (void (*)(uint64_t *, uint64_t))v93;
  uint64_t v25 = alloca(v18);
  char v26 = alloca(v18);
  uint64_t v108 = v93;
  int64_t v27 = *(void *)(*(void *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Tensor?)
                              - 8)
                  + 64);
  uint64_t v28 = alloca(v27);
  char v29 = alloca(v27);
  uint64_t v106 = v93;
  uint64_t v30 = alloca(v27);
  uint64_t v31 = alloca(v27);
  uint64_t v104 = v93;
  char v32 = alloca(v27);
  uint64_t v33 = alloca(v27);
  uint64_t v112 = v93;
  uint64_t v34 = alloca(v27);
  uint64_t v35 = alloca(v27);
  uint64_t v101 = v93;
  uint64_t v36 = alloca(v27);
  uint64_t v37 = alloca(v27);
  uint64_t v109 = v93;
  uint64_t v38 = alloca(v27);
  uint64_t v39 = alloca(v27);
  uint64_t v120 = v93;
  uint64_t v40 = alloca(v27);
  uint64_t v41 = alloca(v27);
  uint64_t v42 = alloca(v27);
  uint64_t v43 = alloca(v27);
  uint64_t v114 = v93;
  uint64_t v115 = v17;
  __swift_storeEnumTagSinglePayload((uint64_t)v93, 1, 1, v17);
  __swift_storeEnumTagSinglePayload((uint64_t)v93, 1, 1, v17);
  __swift_storeEnumTagSinglePayload((uint64_t)v93, 1, 1, v17);
  uint64_t v44 = (uint64_t)v99;
  outlined init with copy of MLTrainingSessionParameters((uint64_t)v123, (uint64_t)v99, type metadata accessor for MLActivityClassifier.Model);
  uint64_t v94 = (uint64_t)v121;
  uint64_t v95 = v114;
  uint64_t v121 = v93;
  Swift::String v96 = v93;
  uint64_t v97 = (uint64_t)v120;
  uint64_t v98 = v118;
  uint64_t v45 = lazy protocol witness table accessor for type VNImageOption and conformance VNImageOption(&lazy protocol witness table cache variable for type MLActivityClassifier.Model and conformance MLActivityClassifier.Model, type metadata accessor for MLActivityClassifier.Model, (uint64_t)&protocol conformance descriptor for MLActivityClassifier.Model);
  uint64_t v46 = v119;
  uint64_t v47 = valueWithGradient<A>(at:of:)(v108, v44, partial apply for closure #1 in MLActivityClassifier.Trainer.update(_:using:on:), v93, v119, v45);
  outlined destroy of MLActivityClassifier.ModelParameters(v44, type metadata accessor for MLActivityClassifier.Model);
  uint64_t v48 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Adam<MLActivityClassifier.Model>);
  uint64_t v49 = v123;
  Adam.update(_:with:)(v123, v47, v48);
  uint64_t v50 = (uint64_t)v114;
  swift_bridgeObjectRelease(v47);
  uint64_t v51 = v49;
  uint64_t v52 = v115;
  uint64_t v53 = *(int *)(v46 + 72);
  if (*(void *)&v51[v53])
  {
    uint64_t v54 = *(void *)&v51[v53];
    uint64_t v55 = (uint64_t)v109;
    outlined init with copy of Either<LogisticRegressionClassifier<Float, String>, FullyConnectedNetworkClassifier<Float, String>>(v50, (uint64_t)v109, &demangling cache variable for type metadata for Tensor?);
    if (__swift_getEnumTagSinglePayload(v55, 1, v52) == 1) {
      BUG();
    }
    uint64_t v119 = v54;
    uint64_t v118 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Int>);
    uint64_t v56 = (void *)swift_allocObject(v118, 48, 7);
    v56[2] = 2;
    v56[3] = 4;
    uint64_t v122 = v56;
    v56[4] = -1;
    uint64_t v57 = v50;
    uint64_t v58 = (uint64_t)v101;
    outlined init with copy of Either<LogisticRegressionClassifier<Float, String>, FullyConnectedNetworkClassifier<Float, String>>(v57, (uint64_t)v101, &demangling cache variable for type metadata for Tensor?);
    if (__swift_getEnumTagSinglePayload(v58, 1, v52) == 1) {
      BUG();
    }
    uint64_t v59 = v103;
    Tensor.shape.getter();
    uint64_t v123 = *(char **)(v117 + 8);
    ((void (*)(uint64_t, uint64_t))v123)(v58, v52);
    uint64_t v60 = specialized BidirectionalCollection.last.getter();
    char v62 = v61;
    uint64_t v63 = *(void **)(v102 + 8);
    uint64_t v64 = v59;
    uint64_t v65 = v110;
    ((void (*)(unsigned char *, uint64_t))v63)(v64, v110);
    if (v62) {
      BUG();
    }
    uint64_t v66 = v122;
    v122[5] = v60;
    uint64_t v67 = v111;
    TensorShape.init(_:)(v66, a4, a5);
    uint64_t v68 = (uint64_t)v109;
    Tensor.reshaped(to:)(v67);
    uint64_t v122 = v63;
    ((void (*)(unsigned char *, uint64_t))v63)(v67, v65);
    uint64_t v69 = v115;
    ((void (*)(uint64_t, uint64_t))v123)(v68, v115);
    uint64_t v70 = (uint64_t)v121;
    uint64_t v71 = (uint64_t)v112;
    outlined init with copy of Either<LogisticRegressionClassifier<Float, String>, FullyConnectedNetworkClassifier<Float, String>>((uint64_t)v121, (uint64_t)v112, &demangling cache variable for type metadata for Tensor?);
    if (__swift_getEnumTagSinglePayload(v71, 1, v69) == 1) {
      BUG();
    }
    uint64_t v72 = (void *)swift_allocObject(v118, 48, 7);
    v72[2] = 2;
    v72[3] = 4;
    v72[4] = -1;
    uint64_t v73 = (uint64_t)v104;
    outlined init with copy of Either<LogisticRegressionClassifier<Float, String>, FullyConnectedNetworkClassifier<Float, String>>(v70, (uint64_t)v104, &demangling cache variable for type metadata for Tensor?);
    if (__swift_getEnumTagSinglePayload(v73, 1, v69) == 1) {
      BUG();
    }
    Swift::String v74 = v105;
    Tensor.shape.getter();
    ((void (*)(uint64_t, uint64_t))v123)(v73, v69);
    uint64_t v75 = specialized BidirectionalCollection.last.getter();
    char v77 = v76;
    uint64_t v78 = v74;
    uint64_t v79 = v110;
    ((void (*)(unsigned char *, uint64_t))v122)(v78, v110);
    if (v77) {
      BUG();
    }
    v72[5] = v75;
    uint64_t v80 = v111;
    TensorShape.init(_:)(v72, a4, a5);
    uint64_t v81 = (uint64_t)v112;
    Tensor.reshaped(to:)(v80);
    ((void (*)(unsigned char *, uint64_t))v122)(v80, v79);
    uint64_t v82 = v115;
    ((void (*)(uint64_t, uint64_t))v123)(v81, v115);
    unsigned int v83 = 1;
    uint64_t v84 = v82;
    int EnumTagSinglePayload = __swift_getEnumTagSinglePayload((uint64_t)v120, 1, v82);
    uint64_t v86 = (uint64_t)v106;
    if (!EnumTagSinglePayload)
    {
      uint64_t v87 = v107;
      (*(void (**)(unsigned char *, unsigned char *, uint64_t))(v117 + 16))(v107, v120, v84);
      Tensor.flattened()();
      ((void (*)(unsigned char *, uint64_t))v123)(v87, v84);
      unsigned int v83 = 0;
    }
    __swift_storeEnumTagSinglePayload(v86, v83, 1, v84);
    uint64_t v88 = (uint64_t)v113;
    _MetricUtilities.ConfusionMatrixMeter.add(predicted:target:weights:)(v116, (uint64_t)v113, v86);
    uint64_t v89 = v86;
    uint64_t v52 = v84;
    outlined destroy of Tensor?(v89, &demangling cache variable for type metadata for Tensor?);
    uint64_t v90 = v84;
    unint64_t v91 = v123;
    ((void (*)(uint64_t, uint64_t))v123)(v88, v90);
    ((void (*)(void, uint64_t))v91)(v116, v52);
    uint64_t v50 = (uint64_t)v114;
  }
  (*(void (**)(uint64_t, unsigned char *, uint64_t))(v117 + 32))(v100, v108, v52);
  outlined destroy of Tensor?((uint64_t)v120, &demangling cache variable for type metadata for Tensor?);
  outlined destroy of Tensor?((uint64_t)v121, &demangling cache variable for type metadata for Tensor?);
  return outlined destroy of Tensor?(v50, &demangling cache variable for type metadata for Tensor?);
}

uint64_t MLActivityClassifier.Trainer.evaluate(model:using:classLabels:confussionMatrix:)(uint64_t a1, double a2, double a3, uint64_t a4, uint64_t a5, void (**a6)(uint64_t *, uint64_t *, uint64_t))
{
  uint64_t v190 = v6;
  uint64_t v169 = (void (**)(uint64_t *, uint64_t *, uint64_t))a6;
  uint64_t v180 = a1;
  uint64_t v170 = type metadata accessor for TensorShape(0);
  uint64_t v171 = *(void *)(v170 - 8);
  int64_t v7 = *(void *)(v171 + 64);
  uint64_t v8 = alloca(v7);
  uint64_t v9 = alloca(v7);
  uint64_t v172 = &v157;
  uint64_t v192 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (offset: Int, element: Tensor));
  int64_t v10 = *(void *)(*(void *)(v192 - 8) + 64);
  int64_t v11 = alloca(v10);
  uint64_t v12 = alloca(v10);
  uint64_t v182 = &v157;
  uint64_t v13 = alloca(v10);
  int64_t v14 = alloca(v10);
  uint64_t v167 = &v157;
  int64_t v15 = alloca(v10);
  uint64_t v16 = alloca(v10);
  MLModel v168 = &v157;
  uint64_t v176 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (label: Tensor, weight: Tensor?));
  int64_t v17 = *(void *)(*(void *)(v176 - 8) + 64);
  int64_t v18 = alloca(v17);
  uint64_t v19 = alloca(v17);
  uint64_t v159 = &v157;
  int64_t v20 = *(void *)(*(void *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Tensor?)
                              - 8)
                  + 64);
  Swift::String v21 = alloca(v20);
  uint64_t v22 = alloca(v20);
  uint64_t v173 = &v157;
  char v23 = alloca(v20);
  char v24 = alloca(v20);
  uint64_t v187 = &v157;
  uint64_t v25 = alloca(v20);
  char v26 = alloca(v20);
  v198 = &v157;
  int64_t v27 = alloca(v20);
  uint64_t v28 = alloca(v20);
  uint64_t v160 = &v157;
  char v29 = alloca(v20);
  uint64_t v30 = alloca(v20);
  unsigned __int8 v161 = (void (*)(unint64_t *, uint64_t))&v157;
  uint64_t v31 = alloca(v20);
  char v32 = alloca(v20);
  v200 = &v157;
  uint64_t v162 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (LSTM.State?, Tensor));
  int64_t v33 = *(void *)(*(void *)(v162 - 8) + 64);
  uint64_t v34 = alloca(v33);
  uint64_t v35 = alloca(v33);
  uint64_t v163 = &v157;
  int64_t v36 = *(void *)(*(void *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for LSTM.State?)
                              - 8)
                  + 64);
  uint64_t v37 = alloca(v36);
  uint64_t v38 = alloca(v36);
  uint64_t v164 = &v157;
  uint64_t v165 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (LSTM.State, Tensor));
  int64_t v39 = *(void *)(*(void *)(v165 - 8) + 64);
  uint64_t v40 = alloca(v39);
  uint64_t v41 = alloca(v39);
  uint64_t v177 = &v157;
  uint64_t v191 = type metadata accessor for WeightedDataSample(0);
  int64_t v42 = *(void *)(*(void *)(v191 - 8) + 64);
  uint64_t v43 = alloca(v42);
  uint64_t v44 = alloca(v42);
  uint64_t v199 = &v157;
  int64_t v45 = *(void *)(*(void *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for WeightedDataSample?)
                              - 8)
                  + 64);
  uint64_t v46 = alloca(v45);
  uint64_t v47 = alloca(v45);
  uint64_t v184 = &v157;
  uint64_t v48 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for LazyMapSequence<Batches<LazyPrefetchingMapSequence<LazySequence<Sampling<[WeightedDataSample]>>, WeightedDataSample>>, WeightedDataSample>.Iterator);
  int64_t v49 = *(void *)(*(void *)(v48 - 8) + 64);
  uint64_t v50 = alloca(v49);
  uint64_t v51 = alloca(v49);
  uint64_t v208 = type metadata accessor for Tensor(0);
  uint64_t v52 = *(void *)(v208 - 8);
  int64_t v53 = *(void *)(v52 + 64);
  uint64_t v54 = alloca(v53);
  uint64_t v55 = alloca(v53);
  uint64_t v183 = &v157;
  uint64_t v56 = alloca(v53);
  uint64_t v57 = alloca(v53);
  uint64_t v194 = (void (*)(uint64_t *, uint64_t))&v157;
  uint64_t v58 = alloca(v53);
  uint64_t v59 = alloca(v53);
  uint64_t v193 = &v157;
  uint64_t v60 = alloca(v53);
  char v61 = alloca(v53);
  uint64_t v185 = &v157;
  char v62 = alloca(v53);
  uint64_t v63 = alloca(v53);
  uint64_t v186 = &v157;
  uint64_t v64 = alloca(v53);
  uint64_t v65 = alloca(v53);
  uint64_t v178 = &v157;
  uint64_t v66 = alloca(v53);
  uint64_t v67 = alloca(v53);
  uint64_t v179 = &v157;
  uint64_t v68 = alloca(v53);
  uint64_t v69 = alloca(v53);
  uint64_t v188 = &v157;
  uint64_t v70 = alloca(v53);
  uint64_t v71 = alloca(v53);
  uint64_t v189 = &v157;
  uint64_t v72 = alloca(v53);
  uint64_t v73 = alloca(v53);
  v205 = (unint64_t *)&v157;
  Swift::String v74 = alloca(v53);
  uint64_t v75 = alloca(v53);
  uint64_t v196 = &v157;
  static Tensor.zero.getter();
  uint64_t v76 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Dataset<[WeightedDataSample], WeightedDataSample>);
  Dataset.makeIterator()(v76);
  uint64_t v166 = *(int *)(v48 + 44);
  uint64_t v158 = lazy protocol witness table accessor for type FullyConnectedNetworkClassifier<Float, String> and conformance FullyConnectedNetworkClassifier<A, B>(&lazy protocol witness table cache variable for type Batches<LazyPrefetchingMapSequence<LazySequence<Sampling<[WeightedDataSample]>>, WeightedDataSample>>.Iterator and conformance Batches<A>.Iterator, &demangling cache variable for type metadata for Batches<LazyPrefetchingMapSequence<LazySequence<Sampling<[WeightedDataSample]>>, WeightedDataSample>>.Iterator, (uint64_t)&protocol conformance descriptor for Batches<A>.Iterator);
  uint64_t v202 = _swiftEmptyArrayStorage;
  v201 = _swiftEmptyArrayStorage;
  v206 = _swiftEmptyArrayStorage;
  char v77 = &v157;
  uint64_t v204 = v52;
  for (i = &v157; ; char v77 = i)
  {
    uint64_t v78 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Batches<LazyPrefetchingMapSequence<LazySequence<Sampling<[WeightedDataSample]>>, WeightedDataSample>>.Iterator);
    dispatch thunk of IteratorProtocol.next()(v78, v158);
    char v79 = v174;
    if (v174)
    {
      uint64_t v80 = *(void (**)(uint64_t *))((char *)v77 + v166);
      uint64_t v157 = v174;
      uint64_t v81 = v184;
      v80(&v157);
      uint64_t v82 = (uint64_t)v81;
      swift_bridgeObjectRelease(v79);
      uint64_t v83 = (uint64_t)v81;
      uint64_t v84 = 0;
    }
    else
    {
      uint64_t v82 = (uint64_t)v184;
      uint64_t v83 = (uint64_t)v184;
      uint64_t v84 = 1;
    }
    uint64_t v85 = v191;
    __swift_storeEnumTagSinglePayload(v83, v84, 1, v191);
    int EnumTagSinglePayload = __swift_getEnumTagSinglePayload(v82, 1, v85);
    uint64_t v87 = (uint64_t)v199;
    if (EnumTagSinglePayload == 1) {
      break;
    }
    outlined init with take of WeightedDataSample(v82, (uint64_t)v199);
    uint64_t v88 = v190;
    static Task<>.checkCancellation()();
    uint64_t v190 = v88;
    if (v88)
    {
      outlined destroy of MLActivityClassifier.ModelParameters(v87, type metadata accessor for WeightedDataSample);
      outlined destroy of Tensor?((uint64_t)i, &demangling cache variable for type metadata for LazyMapSequence<Batches<LazyPrefetchingMapSequence<LazySequence<Sampling<[WeightedDataSample]>>, WeightedDataSample>>, WeightedDataSample>.Iterator);
      swift_bridgeObjectRelease((_BYTE)v201);
      (*(void (**)(uint64_t *, uint64_t))(v204 + 8))(v196, v208);
      swift_bridgeObjectRelease((_BYTE)v202);
      return swift_bridgeObjectRelease((_BYTE)v206);
    }
    uint64_t v89 = type metadata accessor for LSTM.State(0);
    uint64_t v90 = (uint64_t)v164;
    __swift_storeEnumTagSinglePayload((uint64_t)v164, 1, 1, v89);
    uint64_t v91 = v87;
    uint64_t v92 = (uint64_t)v163;
    uint64_t v93 = (char *)v163 + *(int *)(v162 + 48);
    outlined init with take of DataFrame?(v90, (uint64_t)v163, &demangling cache variable for type metadata for LSTM.State?);
    uint64_t v207 = *(void (**)(char *, uint64_t, uint64_t))(v204 + 16);
    v207(v93, v91, v208);
    uint64_t v94 = type metadata accessor for MLActivityClassifier.Model(0);
    uint64_t v95 = lazy protocol witness table accessor for type VNImageOption and conformance VNImageOption(&lazy protocol witness table cache variable for type MLActivityClassifier.Model and conformance MLActivityClassifier.Model, type metadata accessor for MLActivityClassifier.Model, (uint64_t)&protocol conformance descriptor for MLActivityClassifier.Model);
    uint64_t v96 = (uint64_t)v177;
    Layer.callAsFunction(_:)(v92, v94, v95);
    outlined destroy of Tensor?(v92, &demangling cache variable for type metadata for (LSTM.State?, Tensor));
    uint64_t v197 = v96 + *(int *)(v165 + 48);
    uint64_t v97 = (char *)v199 + *(int *)(v191 + 20);
    uint64_t v98 = *(int *)(v176 + 48);
    uint64_t v99 = v159;
    uint64_t v100 = (uint64_t)v159 + v98;
    uint64_t v101 = (uint64_t)&v97[v98];
    v207((char *)v159, (uint64_t)v97, v208);
    outlined init with copy of Either<LogisticRegressionClassifier<Float, String>, FullyConnectedNetworkClassifier<Float, String>>(v101, v100, &demangling cache variable for type metadata for Tensor?);
    uint64_t v203 = *(void (**)(uint64_t *, uint64_t *, uint64_t))(v204 + 32);
    v203(v188, v99, v208);
    outlined destroy of Tensor?(v100, &demangling cache variable for type metadata for Tensor?);
    uint64_t v102 = (uint64_t)v99 + *(int *)(v176 + 48);
    uint64_t v103 = v97;
    uint64_t v104 = v208;
    v207((char *)v99, (uint64_t)v103, v208);
    outlined init with copy of Either<LogisticRegressionClassifier<Float, String>, FullyConnectedNetworkClassifier<Float, String>>(v101, v102, &demangling cache variable for type metadata for Tensor?);
    uint64_t v105 = v161;
    outlined init with take of DataFrame?(v102, (uint64_t)v161, &demangling cache variable for type metadata for Tensor?);
    uint64_t v106 = *(void (**)(uint64_t *, uint64_t))(v204 + 8);
    v106(v99, v104);
    uint64_t v107 = v188;
    static MLActivityClassifier.Trainer.reshapeLabels(prediction:target:weights:)(v205, (uint64_t)v189, (uint64_t)v200, v197, (void (*)(void, void, void))v188, v105);
    outlined destroy of Tensor?((uint64_t)v105, &demangling cache variable for type metadata for Tensor?);
    v106(v107, v104);
    v207((char *)v179, (uint64_t)v205, v104);
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v201);
    uint64_t v175 = v106;
    if (isUniquelyReferenced_nonNull_native) {
      uint64_t v109 = v201;
    }
    else {
      uint64_t v109 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v201[2] + 1, 1, (uint64_t)v201);
    }
    unint64_t v110 = v109[2];
    if (v109[3] >> 1 <= v110) {
      uint64_t v109 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(v109[3] >= 2uLL, v110 + 1, 1, (uint64_t)v109);
    }
    v109[2] = v110 + 1;
    uint64_t v111 = (*(unsigned __int8 *)(v204 + 80) + 32) & ~*(unsigned __int8 *)(v204 + 80);
    v201 = v109;
    uint64_t v197 = *(void *)(v204 + 72);
    v203((void *)((char *)v109 + v111 + v197 * v110), v179, v104);
    v207((char *)v178, (uint64_t)v189, v104);
    if (swift_isUniquelyReferenced_nonNull_native(v202)) {
      uint64_t v112 = v202;
    }
    else {
      uint64_t v112 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v202[2] + 1, 1, (uint64_t)v202);
    }
    unint64_t v113 = v112[2];
    if (v112[3] >> 1 <= v113) {
      uint64_t v112 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(v112[3] >= 2uLL, v113 + 1, 1, (uint64_t)v112);
    }
    v112[2] = v113 + 1;
    uint64_t v202 = v112;
    uint64_t v181 = v111;
    uint64_t v114 = (uint64_t)v112 + v111 + v197 * v113;
    uint64_t v115 = v208;
    uint64_t v116 = (void (*)(uint64_t *, uint64_t, uint64_t))v203;
    v203((uint64_t *)v114, v178, v208);
    uint64_t v117 = (uint64_t)v160;
    outlined init with copy of Either<LogisticRegressionClassifier<Float, String>, FullyConnectedNetworkClassifier<Float, String>>((uint64_t)v200, (uint64_t)v160, &demangling cache variable for type metadata for Tensor?);
    if (__swift_getEnumTagSinglePayload(v117, 1, v115) == 1)
    {
      outlined destroy of Tensor?(v117, &demangling cache variable for type metadata for Tensor?);
    }
    else
    {
      uint64_t v118 = v186;
      v116(v186, v117, v115);
      v207((char *)v185, (uint64_t)v118, v115);
      if (!swift_isUniquelyReferenced_nonNull_native(v206)) {
        v206 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v206[2] + 1, 1, (uint64_t)v206);
      }
      uint64_t v119 = v181;
      unint64_t v120 = v206[2];
      if (v206[3] >> 1 <= v120) {
        v206 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(v206[3] >= 2uLL, v120 + 1, 1, (uint64_t)v206);
      }
      uint64_t v121 = v206;
      v206[2] = v120 + 1;
      uint64_t v115 = v208;
      v203((void *)((char *)v121 + v119 + v197 * v120), v185, v208);
      v175(v186, v115);
    }
    uint64_t v122 = v188;
    uint64_t v123 = (uint64_t)v189;
    uint64_t v124 = (uint64_t)v200;
    static MLActivityClassifier.Trainer.weightedCrossEntropy(logits:labels:weights:axis:)((uint64_t)v205, (uint64_t)v189, (uint64_t)v200, -1);
    static Tensor.+= infix(_:_:)(v196, v122);
    uint64_t v125 = v122;
    char v126 = (void (*)(uint64_t, uint64_t))v175;
    v175(v125, v115);
    outlined destroy of Tensor?(v124, &demangling cache variable for type metadata for Tensor?);
    v126(v123, v115);
    v126((uint64_t)v205, v115);
    outlined destroy of Tensor?((uint64_t)v177, &demangling cache variable for type metadata for (LSTM.State, Tensor));
    outlined destroy of MLActivityClassifier.ModelParameters((uint64_t)v199, type metadata accessor for WeightedDataSample);
  }
  outlined destroy of Tensor?((uint64_t)i, &demangling cache variable for type metadata for LazyMapSequence<Batches<LazyPrefetchingMapSequence<LazySequence<Sampling<[WeightedDataSample]>>, WeightedDataSample>>, WeightedDataSample>.Iterator);
  uint64_t v127 = v201;
  v200 = (uint64_t *)v201[2];
  if (v200)
  {
    unint64_t v128 = 0;
    uint64_t v129 = v208;
    uint64_t v130 = v204;
    do
    {
      if (v128 >= v127[2]) {
        BUG();
      }
      uint64_t v131 = v129;
      uint64_t v132 = (*(unsigned __int8 *)(v130 + 80) + 32) & ~*(unsigned __int8 *)(v130 + 80);
      uint64_t v133 = v130;
      unint64_t v134 = v128 * *(void *)(v130 + 72);
      uint64_t v207 = (void (*)(char *, uint64_t, uint64_t))v128;
      uint64_t v135 = (char *)v167 + *(int *)(v192 + 48);
      uint64_t v203 = *(void (**)(uint64_t *, uint64_t *, uint64_t))(v133 + 16);
      v203((uint64_t *)v135, (void *)((char *)v127 + v132 + v134), v131);
      uint64_t v136 = v133;
      uint64_t v137 = (char *)v168 + *(int *)(v192 + 48);
      *MLModel v168 = (uint64_t)v207;
      v205 = *(unint64_t **)(v136 + 32);
      ((void (*)(char *, char *, uint64_t))v205)(v137, v135, v208);
      uint64_t v138 = (char *)v182 + *(int *)(v192 + 48);
      *uint64_t v182 = (uint64_t)v207;
      ((void (*)(char *, char *, uint64_t))v205)(v138, v137, v208);
      uint64_t v139 = type metadata accessor for MLActivityClassifier.Model(0);
      if ((unint64_t)v207 >= v202[2]) {
        BUG();
      }
      v205 = *(unint64_t **)(*(void *)(v180 + *(int *)(v139 + 60)) + 16);
      v203(v193, (void *)((char *)v202 + v132 + v134), v208);
      unint64_t v140 = v206[2];
      uint64_t v141 = 1;
      if (v140)
      {
        if ((unint64_t)v207 >= v140) {
          BUG();
        }
        v203(v198, (void *)((char *)v206 + v132 + v134), v208);
        uint64_t v141 = 0;
      }
      __swift_storeEnumTagSinglePayload((uint64_t)v198, v141, 1, v208);
      uint64_t v203 = *v169;
      uint64_t v199 = (uint64_t *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Int>);
      uint64_t v142 = (void *)swift_allocObject(v199, 48, 7);
      v142[2] = 2;
      id v142[3] = 4;
      v142[4] = -1;
      v142[5] = v205;
      uint64_t v143 = v172;
      TensorShape.init(_:)(v142, a2, a3);
      Tensor.reshaped(to:)(v143);
      uint64_t v144 = *(void (**)(uint64_t *, uint64_t))(v171 + 8);
      uint64_t v145 = v170;
      v144(v143, v170);
      uint64_t v146 = (void *)swift_allocObject(v199, 48, 7);
      v146[2] = 2;
      v146[3] = 4;
      v146[4] = -1;
      v146[5] = v205;
      TensorShape.init(_:)(v146, a2, a3);
      Tensor.reshaped(to:)(v143);
      v144(v143, v145);
      uint64_t v147 = (uint64_t)v173;
      outlined init with copy of Either<LogisticRegressionClassifier<Float, String>, FullyConnectedNetworkClassifier<Float, String>>((uint64_t)v198, (uint64_t)v173, &demangling cache variable for type metadata for Tensor?);
      uint64_t v148 = v208;
      if (__swift_getEnumTagSinglePayload(v147, 1, v208) == 1)
      {
        outlined destroy of Tensor?(v147, &demangling cache variable for type metadata for Tensor?);
        uint64_t v149 = 1;
        uint64_t v150 = (uint64_t)v187;
      }
      else
      {
        uint64_t v150 = (uint64_t)v187;
        Tensor.flattened()();
        (*(void (**)(uint64_t, uint64_t))(v204 + 8))(v147, v148);
        uint64_t v149 = 0;
      }
      uint64_t v207 = (void (*)(char *, uint64_t, uint64_t))((char *)v207 + 1);
      __swift_storeEnumTagSinglePayload(v150, v149, 1, v148);
      uint64_t v151 = (uint64_t)v183;
      _MetricUtilities.ConfusionMatrixMeter.add(predicted:target:weights:)(v194, (uint64_t)v183, v150);
      outlined destroy of Tensor?(v150, &demangling cache variable for type metadata for Tensor?);
      uint64_t v130 = v204;
      uint64_t v152 = *(void (**)(uint64_t, uint64_t))(v204 + 8);
      uint64_t v153 = v151;
      uint64_t v129 = v208;
      v152(v153, v208);
      v152((uint64_t)v194, v129);
      outlined destroy of Tensor?((uint64_t)v198, &demangling cache variable for type metadata for Tensor?);
      v152((uint64_t)v193, v129);
      unint64_t v128 = (unint64_t)v207;
      outlined destroy of Tensor?((uint64_t)v182, &demangling cache variable for type metadata for (offset: Int, element: Tensor));
      uint64_t v127 = v201;
    }
    while (v200 != (uint64_t *)v128);
  }
  else
  {
    uint64_t v129 = v208;
    uint64_t v130 = v204;
  }
  swift_bridgeObjectRelease((_BYTE)v127);
  uint64_t v155 = v130;
  uint64_t v156 = v196;
  Tensor.scalar<A>(as:)(&type metadata for Double, &type metadata for Double, &protocol witness table for Double);
  (*(void (**)(uint64_t *, uint64_t))(v155 + 8))(v156, v129);
  swift_bridgeObjectRelease((_BYTE)v202);
  return swift_bridgeObjectRelease((_BYTE)v206);
}

uint64_t (*MLActivityClassifier.Trainer.ModelContainer.model.modify(uint64_t a1))()
{
  swift_beginAccess(OBJC_IVAR____TtCVV8CreateML20MLActivityClassifier7Trainer14ModelContainer_model + v1, a1, 33, 0);
  return HandPoseClassifierTrainingSessionDelegate.sourceTable.modify;
}

uint64_t MLActivityClassifier.Trainer.ModelContainer.init(model:)(uint64_t a1)
{
  uint64_t v40 = v1;
  uint64_t v39 = a1;
  uint64_t v30 = type metadata accessor for LearningPhase(0);
  uint64_t v31 = *(void *)(v30 - 8);
  int64_t v2 = *(void *)(v31 + 64);
  uint64_t v3 = alloca(v2);
  int64_t v4 = alloca(v2);
  char v32 = v28;
  int64_t v5 = *(void *)(*(void *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for RegularizationKind?)
                             - 8)
                 + 64);
  uint64_t v6 = alloca(v5);
  int64_t v7 = alloca(v5);
  uint64_t v34 = v28;
  int64_t v8 = *(void *)(*(void *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for GradientClippingMode?)
                             - 8)
                 + 64);
  uint64_t v9 = alloca(v8);
  int64_t v10 = alloca(v8);
  uint64_t v33 = type metadata accessor for MLActivityClassifier.Model(0);
  int64_t v11 = *(void *)(*(void *)(v33 - 8) + 64);
  uint64_t v12 = alloca(v11);
  uint64_t v13 = alloca(v11);
  int64_t v36 = v28;
  int64_t v14 = *(void *)(*(void *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Adam<MLActivityClassifier.Model>)
                              - 8)
                  + 64);
  int64_t v15 = alloca(v14);
  uint64_t v16 = alloca(v14);
  uint64_t v35 = v28;
  uint64_t v17 = v1 + OBJC_IVAR____TtCVV8CreateML20MLActivityClassifier7Trainer14ModelContainer_model;
  uint64_t v38 = v1 + OBJC_IVAR____TtCVV8CreateML20MLActivityClassifier7Trainer14ModelContainer_model;
  outlined init with copy of MLTrainingSessionParameters(v39, v1 + OBJC_IVAR____TtCVV8CreateML20MLActivityClassifier7Trainer14ModelContainer_model, type metadata accessor for MLActivityClassifier.Model);
  swift_beginAccess(v17, v28, 0, 0);
  outlined init with copy of MLTrainingSessionParameters(v17, (uint64_t)v28, type metadata accessor for MLActivityClassifier.Model);
  uint64_t v18 = type metadata accessor for GradientClippingMode(0);
  __swift_storeEnumTagSinglePayload((uint64_t)v28, 1, 1, v18);
  uint64_t v19 = type metadata accessor for RegularizationKind(0);
  uint64_t v20 = (uint64_t)v34;
  __swift_storeEnumTagSinglePayload((uint64_t)v34, 1, 1, v19);
  uint64_t v37 = lazy protocol witness table accessor for type VNImageOption and conformance VNImageOption(&lazy protocol witness table cache variable for type MLActivityClassifier.Model and conformance MLActivityClassifier.Model, type metadata accessor for MLActivityClassifier.Model, (uint64_t)&protocol conformance descriptor for MLActivityClassifier.Model);
  uint64_t v21 = (uint64_t)v35;
  uint64_t v22 = (uint64_t)v36;
  uint64_t v23 = v33;
  Adam.init(for:learningRate:beta1:beta2:usesAMSGrad:epsilon:gradientClippingMode:regularizationKind:gradientScale:)(v36, 0, v28, v20, v33, v37, 0.001, 0.89999998, 0.99900001, 0.0000000099999999, 1.0);
  outlined destroy of MLActivityClassifier.ModelParameters(v22, type metadata accessor for MLActivityClassifier.Model);
  outlined init with take of DataFrame?(v21, v40 + OBJC_IVAR____TtCVV8CreateML20MLActivityClassifier7Trainer14ModelContainer_optimizer, &demangling cache variable for type metadata for Adam<MLActivityClassifier.Model>);
  char v24 = v32;
  uint64_t v25 = v30;
  uint64_t v26 = v31;
  (*(void (**)(unsigned char *, void, uint64_t))(v31 + 104))(v32, enum case for LearningPhase.training(_:), v30);
  swift_beginAccess(v38, v29, 33, 0);
  Layer.prepare(for:)(v24, v23, v37);
  swift_endAccess(v29);
  outlined destroy of MLActivityClassifier.ModelParameters(v39, type metadata accessor for MLActivityClassifier.Model);
  (*(void (**)(unsigned char *, uint64_t))(v26 + 8))(v24, v25);
  return v40;
}

void *MLActivityClassifier.Trainer.ModelContainer.trainableSublayers()()
{
  uint64_t v55 = type metadata accessor for LSTM(0);
  uint64_t v60 = *(void *)(v55 - 8);
  int64_t v1 = *(void *)(v60 + 64);
  int64_t v2 = alloca(v1);
  uint64_t v3 = alloca(v1);
  uint64_t v58 = v41;
  uint64_t v64 = type metadata accessor for Dense(0);
  uint64_t v59 = *(void *)(v64 - 8);
  int64_t v4 = *(void *)(v59 + 64);
  int64_t v5 = alloca(v4);
  uint64_t v6 = alloca(v4);
  uint64_t v56 = v41;
  uint64_t v52 = type metadata accessor for Conv2D(0);
  uint64_t v57 = *(void *)(v52 - 8);
  int64_t v7 = *(void *)(v57 + 64);
  int64_t v8 = alloca(v7);
  uint64_t v9 = alloca(v7);
  int64_t v53 = v41;
  uint64_t v10 = type metadata accessor for BatchNorm(0);
  uint64_t v54 = *(void *)(v10 - 8);
  int64_t v11 = *(void *)(v54 + 64);
  uint64_t v12 = alloca(v11);
  uint64_t v13 = alloca(v11);
  uint64_t v51 = v41;
  uint64_t v14 = type metadata accessor for MLActivityClassifier.Model(0);
  int64_t v15 = *(void *)(*(void *)(v14 - 8) + 64);
  uint64_t v16 = alloca(v15);
  uint64_t v17 = alloca(v15);
  uint64_t v18 = OBJC_IVAR____TtCVV8CreateML20MLActivityClassifier7Trainer14ModelContainer_model + v0;
  swift_beginAccess(v18, v41, 0, 0);
  outlined init with copy of MLTrainingSessionParameters(v18, (uint64_t)v41, type metadata accessor for MLActivityClassifier.Model);
  uint64_t v19 = lazy protocol witness table accessor for type VNImageOption and conformance VNImageOption(&lazy protocol witness table cache variable for type MLActivityClassifier.Model and conformance MLActivityClassifier.Model, type metadata accessor for MLActivityClassifier.Model, (uint64_t)&protocol conformance descriptor for MLActivityClassifier.Model);
  uint64_t v20 = Layer.sublayers(recursively:)(1, v14, v19);
  outlined destroy of MLActivityClassifier.ModelParameters((uint64_t)v41, type metadata accessor for MLActivityClassifier.Model);
  swift_retain();
  uint64_t v21 = dispatch thunk of _AnySequenceBox._makeIterator()(v20);
  uint64_t v61 = v20;
  swift_release();
  uint64_t v62 = v21;
  dispatch thunk of _AnyIteratorBoxBase.next()(v20);
  if (v44)
  {
    uint64_t v63 = _swiftEmptyArrayStorage;
    uint64_t v65 = v10;
    uint64_t v22 = v64;
    while (1)
    {
      outlined init with take of MLIdentifier(&v43, (uint64_t)v45);
      outlined init with copy of TabularRegressionTask((uint64_t)v45, (uint64_t)v42);
      uint64_t v23 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Layer);
      char v24 = v51;
      if (!swift_dynamicCast(v51, v42, v23, v10, 0)) {
        break;
      }
      (*(void (**)(unsigned char *, uint64_t))(v54 + 8))(v24, v10);
LABEL_11:
      __swift_destroy_boxed_opaque_existential_1Tm(v42);
      outlined init with copy of TabularRegressionTask((uint64_t)v45, (uint64_t)&v48);
LABEL_12:
      __swift_destroy_boxed_opaque_existential_1Tm(v45);
      if (*((void *)&v49 + 1))
      {
        outlined init with take of MLIdentifier(&v48, (uint64_t)v42);
        outlined init with take of MLIdentifier(v42, (uint64_t)&v48);
        uint64_t v33 = v63;
        if (!swift_isUniquelyReferenced_nonNull_native(v63)) {
          uint64_t v33 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v33[2] + 1, 1, (uint64_t)v33);
        }
        unint64_t v34 = v33[2];
        if (v33[3] >> 1 <= v34) {
          uint64_t v33 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(v33[3] >= 2uLL, v34 + 1, 1, (uint64_t)v33);
        }
        v33[2] = v34 + 1;
        uint64_t v63 = v33;
        outlined init with take of MLIdentifier(&v48, (uint64_t)&v33[5 * v34 + 4]);
        uint64_t v22 = v64;
        uint64_t v10 = v65;
      }
      else
      {
        outlined destroy of Tensor?((uint64_t)&v48, &demangling cache variable for type metadata for Layer?);
      }
      dispatch thunk of _AnyIteratorBoxBase.next()(&v48);
      if (!v44) {
        goto LABEL_28;
      }
    }
    uint64_t v25 = v53;
    uint64_t v26 = v52;
    if (swift_dynamicCast(v53, v42, v23, v52, 0))
    {
      int64_t v27 = v25;
      uint64_t v28 = v26;
      uint64_t v29 = v57;
    }
    else
    {
      uint64_t v30 = v56;
      char v31 = swift_dynamicCast(v56, v42, v23, v22, 0);
      uint64_t v32 = v55;
      if (!v31)
      {
        uint64_t v35 = v58;
        if (!swift_dynamicCast(v58, v42, v23, v55, 0))
        {
          uint64_t v36 = v46;
          uint64_t v37 = v47;
          __swift_project_boxed_opaque_existential_0Tm(v45, v46);
          uint64_t v38 = Layer.parameters(recursively:)(0, v36, v37);
          uint64_t v39 = *(void *)(v38 + 16);
          swift_bridgeObjectRelease(v38);
          if (v39)
          {
            outlined init with copy of TabularRegressionTask((uint64_t)v45, (uint64_t)&v48);
          }
          else
          {
            long long v49 = 0;
            long long v48 = 0;
            uint64_t v50 = 0;
          }
          uint64_t v22 = v64;
          uint64_t v10 = v65;
          __swift_destroy_boxed_opaque_existential_1Tm(v42);
          goto LABEL_12;
        }
        (*(void (**)(unsigned char *, uint64_t))(v60 + 8))(v35, v32);
        uint64_t v22 = v64;
        goto LABEL_10;
      }
      int64_t v27 = v30;
      uint64_t v28 = v22;
      uint64_t v29 = v59;
    }
    (*(void (**)(unsigned char *, uint64_t))(v29 + 8))(v27, v28);
LABEL_10:
    uint64_t v10 = v65;
    goto LABEL_11;
  }
  uint64_t v63 = _swiftEmptyArrayStorage;
LABEL_28:
  swift_release();
  swift_release();
  return v63;
}

void *MLActivityClassifier.Trainer.ModelContainer.getCheckpointStatesDictionary()()
{
  int64_t v1 = *(void *)(*(void *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Adam<MLActivityClassifier.Model>)
                             - 8)
                 + 64);
  int64_t v2 = alloca(v1);
  uint64_t v3 = alloca(v1);
  uint64_t v4 = v0 + OBJC_IVAR____TtCVV8CreateML20MLActivityClassifier7Trainer14ModelContainer_optimizer;
  swift_beginAccess(v0 + OBJC_IVAR____TtCVV8CreateML20MLActivityClassifier7Trainer14ModelContainer_optimizer, v9, 0, 0);
  outlined init with copy of Either<LogisticRegressionClassifier<Float, String>, FullyConnectedNetworkClassifier<Float, String>>(v4, (uint64_t)&v8, &demangling cache variable for type metadata for Adam<MLActivityClassifier.Model>);
  int64_t v5 = MLActivityClassifier.Trainer.ModelContainer.trainableSublayers()();
  LOBYTE(v4) = (_BYTE)v5;
  uint64_t v6 = specialized _ModelCheckpoint<>.getCheckpointStatesDictionary<A>(optimizer:trainableSublayers:)((uint64_t)&v8, (uint64_t)v5);
  outlined destroy of Tensor?((uint64_t)&v8, &demangling cache variable for type metadata for Adam<MLActivityClassifier.Model>);
  swift_bridgeObjectRelease(v4);
  return v6;
}

Swift::Void __swiftcall __spoils<cf,zf,sf,of,pf,rax,rdx,rcx,rdi,rsi,r8,r9,r10,r11,r12,xmm0,xmm1,xmm2,xmm3,xmm4,xmm5,xmm6,xmm7> MLActivityClassifier.Trainer.ModelContainer.compileModel()()
{
  uint64_t v10 = type metadata accessor for MLActivityClassifier.Model(0);
  int64_t v1 = *(void *)(*(void *)(v10 - 8) + 64);
  int64_t v2 = alloca(v1);
  uint64_t v3 = alloca(v1);
  uint64_t v4 = OBJC_IVAR____TtCVV8CreateML20MLActivityClassifier7Trainer14ModelContainer_model + v0;
  swift_beginAccess(OBJC_IVAR____TtCVV8CreateML20MLActivityClassifier7Trainer14ModelContainer_model + v0, v9, 1, 0);
  outlined init with copy of MLTrainingSessionParameters(v4, (uint64_t)v9, type metadata accessor for MLActivityClassifier.Model);
  v5.super.Class isa = MLActivityClassifier.Model.makeMLModel()().super.isa;
  outlined destroy of MLActivityClassifier.ModelParameters((uint64_t)v9, type metadata accessor for MLActivityClassifier.Model);
  if (!v6)
  {
    uint64_t v7 = *(int *)(v10 + 68);
    uint64_t v8 = *(void **)(v4 + v7);
    *(MLModel *)(v4 + v7) = v5;
  }
}

uint64_t MLActivityClassifier.Trainer.ModelContainer.__deallocating_deinit()
{
  outlined destroy of MLActivityClassifier.ModelParameters(v0 + OBJC_IVAR____TtCVV8CreateML20MLActivityClassifier7Trainer14ModelContainer_model, type metadata accessor for MLActivityClassifier.Model);
  outlined destroy of Tensor?(v0 + OBJC_IVAR____TtCVV8CreateML20MLActivityClassifier7Trainer14ModelContainer_optimizer, &demangling cache variable for type metadata for Adam<MLActivityClassifier.Model>);
  return swift_deallocClassInstance(v0, *(unsigned int *)(*(void *)v0 + 48), *(unsigned __int16 *)(*(void *)v0 + 52));
}

uint64_t ObjC metadata update function for MLActivityClassifier.Trainer.ModelContainer()
{
  return type metadata accessor for MLActivityClassifier.Trainer.ModelContainer(0);
}

uint64_t type metadata accessor for MLActivityClassifier.Trainer.ModelContainer(uint64_t a1)
{
  return type metadata accessor for MLImageClassifier.CustomFeatureExtractor(a1, (uint64_t *)&type metadata singleton initialization cache for MLActivityClassifier.Trainer.ModelContainer, (uint64_t)&nominal type descriptor for MLActivityClassifier.Trainer.ModelContainer);
}

uint64_t type metadata completion function for MLActivityClassifier.Trainer.ModelContainer(uint64_t a1)
{
  uint64_t result = type metadata accessor for MLActivityClassifier.Model(319);
  if (v2 <= 0x3F)
  {
    v4[0] = *(void *)(result - 8) + 64;
    uint64_t result = type metadata accessor for Adam<MLActivityClassifier.Model>(319);
    if (v3 <= 0x3F)
    {
      v4[1] = *(void *)(result - 8) + 64;
      uint64_t result = swift_updateClassMetadata2(a1, 256, 2, v4, a1 + 80);
      if (!result) {
        return 0;
      }
    }
  }
  return result;
}

uint64_t type metadata accessor for Adam<MLActivityClassifier.Model>(uint64_t a1)
{
  uint64_t result = lazy cache variable for type metadata for Adam<MLActivityClassifier.Model>;
  if (!lazy cache variable for type metadata for Adam<MLActivityClassifier.Model>)
  {
    uint64_t v2 = type metadata accessor for MLActivityClassifier.Model(255);
    uint64_t v3 = lazy protocol witness table accessor for type VNImageOption and conformance VNImageOption(&lazy protocol witness table cache variable for type MLActivityClassifier.Model and conformance MLActivityClassifier.Model, type metadata accessor for MLActivityClassifier.Model, (uint64_t)&protocol conformance descriptor for MLActivityClassifier.Model);
    uint64_t result = type metadata accessor for Adam(a1, v2, v3);
    if (!v4) {
      lazy cache variable for type metadata for Adam<MLActivityClassifier.Model> = result;
    }
  }
  return result;
}

uint64_t *initializeBufferWithCopyOfBuffer for WeightedDataSample(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v3 = a1;
  int v4 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  if ((v4 & 0x20000) != 0)
  {
    uint64_t v15 = *a2;
    *uint64_t v3 = *a2;
    uint64_t v3 = (uint64_t *)(v15 + ((v4 + 16) & ~v4));
    swift_retain();
  }
  else
  {
    uint64_t v6 = type metadata accessor for Tensor(0);
    uint64_t v7 = *(void (**)(uint64_t *, uint64_t *, uint64_t))(*(void *)(v6 - 8) + 16);
    v7(a1, a2, v6);
    uint64_t v8 = *(int *)(a3 + 20);
    uint64_t v9 = (char *)a1 + v8;
    uint64_t v10 = (char *)a2 + v8;
    v7((uint64_t *)((char *)a1 + v8), (uint64_t *)((char *)a2 + v8), v6);
    uint64_t v11 = *(int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (label: Tensor, weight: Tensor?))
                 + 48);
    uint64_t v12 = &v9[v11];
    uint64_t v13 = &v10[v11];
    if (__swift_getEnumTagSinglePayload((uint64_t)v13, 1, v6))
    {
      uint64_t v14 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Tensor?);
      memcpy(v12, v13, *(void *)(*(void *)(v14 - 8) + 64));
    }
    else
    {
      v7((uint64_t *)v12, (uint64_t *)v13, v6);
      __swift_storeEnumTagSinglePayload((uint64_t)v12, 0, 1, v6);
    }
  }
  return v3;
}

uint64_t destroy for WeightedDataSample(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = type metadata accessor for Tensor(0);
  uint64_t v3 = *(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8);
  v3(a1, v2);
  uint64_t v4 = a1 + *(int *)(a2 + 20);
  v3(v4, v2);
  uint64_t v5 = v4
     + *(int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (label: Tensor, weight: Tensor?))
              + 48);
  uint64_t result = __swift_getEnumTagSinglePayload(v5, 1, v2);
  if (!result) {
    return v3(v5, v2);
  }
  return result;
}

char *initializeWithCopy for WeightedDataSample(char *a1, char *a2, uint64_t a3)
{
  uint64_t v4 = type metadata accessor for Tensor(0);
  uint64_t v5 = *(void (**)(void *, const void *, uint64_t))(*(void *)(v4 - 8) + 16);
  v5(a1, a2, v4);
  uint64_t v6 = *(int *)(a3 + 20);
  uint64_t v7 = &a1[v6];
  uint64_t v8 = &a2[v6];
  v5(&a1[v6], &a2[v6], v4);
  uint64_t v9 = *(int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (label: Tensor, weight: Tensor?))
              + 48);
  uint64_t v10 = &v7[v9];
  uint64_t v11 = &v8[v9];
  if (__swift_getEnumTagSinglePayload((uint64_t)v11, 1, v4))
  {
    uint64_t v12 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Tensor?);
    memcpy(v10, v11, *(void *)(*(void *)(v12 - 8) + 64));
  }
  else
  {
    v5(v10, v11, v4);
    __swift_storeEnumTagSinglePayload((uint64_t)v10, 0, 1, v4);
  }
  return a1;
}

char *assignWithCopy for WeightedDataSample(char *a1, char *a2, uint64_t a3)
{
  uint64_t v4 = type metadata accessor for Tensor(0);
  uint64_t v16 = *(void *)(v4 - 8);
  uint64_t v5 = *(void (**)(void *, const void *, uint64_t))(v16 + 24);
  v5(a1, a2, v4);
  uint64_t v6 = *(int *)(a3 + 20);
  uint64_t v7 = &a1[v6];
  uint64_t v8 = &a2[v6];
  v5(&a1[v6], &a2[v6], v4);
  uint64_t v9 = *(int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (label: Tensor, weight: Tensor?))
              + 48);
  uint64_t v10 = &v7[v9];
  uint64_t v11 = &v8[v9];
  int EnumTagSinglePayload = __swift_getEnumTagSinglePayload((uint64_t)v10, 1, v4);
  int v13 = __swift_getEnumTagSinglePayload((uint64_t)v11, 1, v4);
  if (!EnumTagSinglePayload)
  {
    if (!v13)
    {
      v5(v10, v11, v4);
      return a1;
    }
    (*(void (**)(char *, uint64_t))(v16 + 8))(v10, v4);
    goto LABEL_6;
  }
  if (v13)
  {
LABEL_6:
    uint64_t v14 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Tensor?);
    memcpy(v10, v11, *(void *)(*(void *)(v14 - 8) + 64));
    return a1;
  }
  (*(void (**)(char *, char *, uint64_t))(v16 + 16))(v10, v11, v4);
  __swift_storeEnumTagSinglePayload((uint64_t)v10, 0, 1, v4);
  return a1;
}

char *initializeWithTake for WeightedDataSample(char *a1, char *a2, uint64_t a3)
{
  uint64_t v4 = type metadata accessor for Tensor(0);
  uint64_t v5 = *(void (**)(void *, const void *, uint64_t))(*(void *)(v4 - 8) + 32);
  v5(a1, a2, v4);
  uint64_t v6 = *(int *)(a3 + 20);
  uint64_t v7 = &a1[v6];
  uint64_t v8 = &a2[v6];
  v5(&a1[v6], &a2[v6], v4);
  uint64_t v9 = *(int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (label: Tensor, weight: Tensor?))
              + 48);
  uint64_t v10 = &v7[v9];
  uint64_t v11 = &v8[v9];
  if (__swift_getEnumTagSinglePayload((uint64_t)v11, 1, v4))
  {
    uint64_t v12 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Tensor?);
    memcpy(v10, v11, *(void *)(*(void *)(v12 - 8) + 64));
  }
  else
  {
    v5(v10, v11, v4);
    __swift_storeEnumTagSinglePayload((uint64_t)v10, 0, 1, v4);
  }
  return a1;
}

char *assignWithTake for WeightedDataSample(char *a1, char *a2, uint64_t a3)
{
  uint64_t v4 = type metadata accessor for Tensor(0);
  uint64_t v16 = *(void *)(v4 - 8);
  uint64_t v5 = *(void (**)(void *, const void *, uint64_t))(v16 + 40);
  v5(a1, a2, v4);
  uint64_t v6 = *(int *)(a3 + 20);
  uint64_t v7 = &a1[v6];
  uint64_t v8 = &a2[v6];
  v5(&a1[v6], &a2[v6], v4);
  uint64_t v9 = *(int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (label: Tensor, weight: Tensor?))
              + 48);
  uint64_t v10 = &v7[v9];
  uint64_t v11 = &v8[v9];
  int EnumTagSinglePayload = __swift_getEnumTagSinglePayload((uint64_t)v10, 1, v4);
  int v13 = __swift_getEnumTagSinglePayload((uint64_t)v11, 1, v4);
  if (!EnumTagSinglePayload)
  {
    if (!v13)
    {
      v5(v10, v11, v4);
      return a1;
    }
    (*(void (**)(char *, uint64_t))(v16 + 8))(v10, v4);
    goto LABEL_6;
  }
  if (v13)
  {
LABEL_6:
    uint64_t v14 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Tensor?);
    memcpy(v10, v11, *(void *)(*(void *)(v14 - 8) + 64));
    return a1;
  }
  (*(void (**)(char *, char *, uint64_t))(v16 + 32))(v10, v11, v4);
  __swift_storeEnumTagSinglePayload((uint64_t)v10, 0, 1, v4);
  return a1;
}

uint64_t getEnumTagSinglePayload for WeightedDataSample(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_22E5E7);
}

uint64_t sub_22E5E7(uint64_t a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4 = a1;
  uint64_t v5 = type metadata accessor for Tensor(0);
  if (*(_DWORD *)(*(void *)(v5 - 8) + 84) != a2)
  {
    uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (label: Tensor, weight: Tensor?));
    uint64_t v4 = *(int *)(a3 + 20) + a1;
  }
  return __swift_getEnumTagSinglePayload(v4, a2, v5);
}

uint64_t storeEnumTagSinglePayload for WeightedDataSample(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_22E644);
}

uint64_t sub_22E644(uint64_t a1, unsigned int a2, int a3, uint64_t a4)
{
  uint64_t v6 = a1;
  uint64_t v7 = type metadata accessor for Tensor(0);
  if (*(_DWORD *)(*(void *)(v7 - 8) + 84) != a3)
  {
    uint64_t v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (label: Tensor, weight: Tensor?));
    uint64_t v6 = *(int *)(a4 + 20) + a1;
  }
  return __swift_storeEnumTagSinglePayload(v6, a2, a2, v7);
}

uint64_t type metadata accessor for WeightedDataSample(uint64_t a1)
{
  return type metadata accessor for MLImageClassifier.CustomFeatureExtractor(a1, (uint64_t *)&type metadata singleton initialization cache for WeightedDataSample, (uint64_t)&nominal type descriptor for WeightedDataSample);
}

uint64_t type metadata completion function for WeightedDataSample(uint64_t a1)
{
  uint64_t result = type metadata accessor for Tensor(319);
  if (v2 <= 0x3F)
  {
    uint64_t v3 = *(void *)(result - 8) + 64;
    v6[0] = v3;
    uint64_t result = type metadata accessor for Tensor?(319);
    if (v4 <= 0x3F)
    {
      swift_getTupleTypeLayout2(v5, v3);
      v6[1] = v5;
      swift_initStructMetadata(a1, 256, 2, v6, a1 + 16);
      return 0;
    }
  }
  return result;
}

uint64_t type metadata accessor for Tensor?(uint64_t a1)
{
  uint64_t result = lazy cache variable for type metadata for Tensor?;
  if (!lazy cache variable for type metadata for Tensor?)
  {
    uint64_t v2 = type metadata accessor for Tensor(255);
    uint64_t result = type metadata accessor for Optional(a1, v2);
    if (!v3) {
      lazy cache variable for type metadata for Tensor? = result;
    }
  }
  return result;
}

void *initializeBufferWithCopyOfBuffer for MLActivityClassifier.Trainer(void *a1, void *a2, uint64_t a3)
{
  uint64_t v3 = a1;
  int v4 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  if ((v4 & 0x20000) != 0)
  {
    uint64_t v13 = *a2;
    *uint64_t v3 = *a2;
    uint64_t v3 = (void *)(v13 + ((v4 + 16) & ~v4));
  }
  else
  {
    *a1 = *a2;
    uint64_t v23 = a2[1];
    a1[1] = v23;
    uint64_t v5 = *(int *)(a3 + 20);
    uint64_t v6 = (char *)a1 + v5;
    uint64_t v7 = (char *)a2 + v5;
    *(void *)((char *)a1 + v5) = *(void *)((char *)a2 + v5);
    *(void *)((char *)a1 + v5 + 8) = *(void *)((char *)a2 + v5 + 8);
    *((unsigned char *)a1 + v5 + 16) = *((unsigned char *)a2 + v5 + 16);
    *(_OWORD *)((char *)a1 + v5 + 24) = *(_OWORD *)((char *)a2 + v5 + 24);
    uint64_t v24 = *(void *)((char *)a2 + v5 + 40);
    *(void *)((char *)a1 + v5 + 40) = v24;
    *(void *)((char *)a1 + v5 + 48) = *(void *)((char *)a2 + v5 + 48);
    uint64_t v25 = *(void *)((char *)a2 + v5 + 56);
    *(void *)((char *)a1 + v5 + 56) = v25;
    *(void *)((char *)a1 + v5 + 64) = *(void *)((char *)a2 + v5 + 64);
    uint64_t v26 = *(void *)((char *)a2 + v5 + 72);
    *(void *)((char *)a1 + v5 + 72) = v26;
    uint64_t v22 = type metadata accessor for MLActivityClassifier.Configuration(0);
    uint64_t v8 = *(int *)(v22 + 44);
    uint64_t v20 = v6;
    uint64_t v9 = &v6[v8];
    uint64_t v21 = v7;
    uint64_t v10 = &v7[v8];
    uint64_t v11 = type metadata accessor for DataFrame(0);
    swift_bridgeObjectRetain(v23);
    swift_bridgeObjectRetain(v24);
    swift_bridgeObjectRetain(v25);
    swift_bridgeObjectRetain(v26);
    if (__swift_getEnumTagSinglePayload((uint64_t)v10, 1, v11))
    {
      uint64_t v12 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for DataFrame?);
      memcpy(v9, v10, *(void *)(*(void *)(v12 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v11 - 8) + 16))(v9, v10, v11);
      __swift_storeEnumTagSinglePayload((uint64_t)v9, 0, 1, v11);
    }
    uint64_t v14 = *(int *)(v22 + 48);
    uint64_t v15 = &v20[v14];
    uint64_t v16 = &v21[v14];
    if (__swift_getEnumTagSinglePayload((uint64_t)&v21[v14], 1, v11))
    {
      uint64_t v17 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for DataFrame?);
      memcpy(v15, v16, *(void *)(*(void *)(v17 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v11 - 8) + 16))(v15, v16, v11);
      __swift_storeEnumTagSinglePayload((uint64_t)v15, 0, 1, v11);
    }
    *(void *)((char *)a1 + *(int *)(a3 + 24)) = *(void *)((char *)a2 + *(int *)(a3 + 24));
  }
  swift_retain();
  return v3;
}

uint64_t destroy for MLActivityClassifier.Trainer(uint64_t a1, uint64_t a2)
{
  swift_bridgeObjectRelease(*(void *)(a1 + 8));
  uint64_t v2 = (void *)(a1 + *(int *)(a2 + 20));
  swift_bridgeObjectRelease(v2[5]);
  swift_bridgeObjectRelease(v2[7]);
  swift_bridgeObjectRelease(v2[9]);
  uint64_t v3 = type metadata accessor for MLActivityClassifier.Configuration(0);
  uint64_t v4 = (uint64_t)v2 + *(int *)(v3 + 44);
  uint64_t v5 = type metadata accessor for DataFrame(0);
  if (!__swift_getEnumTagSinglePayload(v4, 1, v5)) {
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v5 - 8) + 8))(v4, v5);
  }
  uint64_t v6 = (uint64_t)v2 + *(int *)(v3 + 48);
  if (!__swift_getEnumTagSinglePayload(v6, 1, v5)) {
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v5 - 8) + 8))(v6, v5);
  }
  return swift_release();
}

void *initializeWithCopy for MLActivityClassifier.Trainer(void *a1, void *a2, uint64_t a3)
{
  *a1 = *a2;
  uint64_t v20 = a2[1];
  a1[1] = v20;
  uint64_t v3 = *(int *)(a3 + 20);
  uint64_t v4 = (char *)a1 + v3;
  uint64_t v5 = (char *)a2 + v3;
  *(void *)((char *)a1 + v3) = *(void *)((char *)a2 + v3);
  *(void *)((char *)a1 + v3 + 8) = *(void *)((char *)a2 + v3 + 8);
  *((unsigned char *)a1 + v3 + 16) = *((unsigned char *)a2 + v3 + 16);
  *(_OWORD *)((char *)a1 + v3 + 24) = *(_OWORD *)((char *)a2 + v3 + 24);
  uint64_t v21 = *(void *)((char *)a2 + v3 + 40);
  *(void *)((char *)a1 + v3 + 40) = v21;
  *(void *)((char *)a1 + v3 + 48) = *(void *)((char *)a2 + v3 + 48);
  uint64_t v22 = *(void *)((char *)a2 + v3 + 56);
  *(void *)((char *)a1 + v3 + 56) = v22;
  *(void *)((char *)a1 + v3 + 64) = *(void *)((char *)a2 + v3 + 64);
  uint64_t v23 = *(void *)((char *)a2 + v3 + 72);
  *(void *)((char *)a1 + v3 + 72) = v23;
  uint64_t v19 = type metadata accessor for MLActivityClassifier.Configuration(0);
  uint64_t v6 = *(int *)(v19 + 44);
  uint64_t v17 = v4;
  uint64_t v7 = &v4[v6];
  uint64_t v18 = v5;
  uint64_t v8 = &v5[v6];
  uint64_t v9 = type metadata accessor for DataFrame(0);
  swift_bridgeObjectRetain(v20);
  swift_bridgeObjectRetain(v21);
  swift_bridgeObjectRetain(v22);
  swift_bridgeObjectRetain(v23);
  if (__swift_getEnumTagSinglePayload((uint64_t)v8, 1, v9))
  {
    uint64_t v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for DataFrame?);
    memcpy(v7, v8, *(void *)(*(void *)(v10 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v9 - 8) + 16))(v7, v8, v9);
    __swift_storeEnumTagSinglePayload((uint64_t)v7, 0, 1, v9);
  }
  uint64_t v11 = *(int *)(v19 + 48);
  uint64_t v12 = &v17[v11];
  uint64_t v13 = &v18[v11];
  if (__swift_getEnumTagSinglePayload((uint64_t)&v18[v11], 1, v9))
  {
    uint64_t v14 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for DataFrame?);
    memcpy(v12, v13, *(void *)(*(void *)(v14 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v9 - 8) + 16))(v12, v13, v9);
    __swift_storeEnumTagSinglePayload((uint64_t)v12, 0, 1, v9);
  }
  *(void *)((char *)a1 + *(int *)(a3 + 24)) = *(void *)((char *)a2 + *(int *)(a3 + 24));
  swift_retain();
  return a1;
}

void *assignWithCopy for MLActivityClassifier.Trainer(void *a1, void *a2, uint64_t a3)
{
  *a1 = *a2;
  uint64_t v5 = a2[1];
  uint64_t v6 = a1[1];
  a1[1] = v5;
  swift_bridgeObjectRetain(v5);
  swift_bridgeObjectRelease(v6);
  uint64_t v31 = a3;
  uint64_t v7 = *(int *)(a3 + 20);
  uint64_t v8 = (char *)a1 + v7;
  __src = (char *)a2 + v7;
  *(void *)((char *)a1 + v7) = *(void *)((char *)a2 + v7);
  *(void *)((char *)a1 + v7 + 8) = *(void *)((char *)a2 + v7 + 8);
  *((unsigned char *)a1 + v7 + 16) = *((unsigned char *)a2 + v7 + 16);
  *(void *)((char *)a1 + v7 + 24) = *(void *)((char *)a2 + v7 + 24);
  *(void *)((char *)a1 + v7 + 32) = *(void *)((char *)a2 + v7 + 32);
  uint64_t v9 = *(void *)((char *)a2 + v7 + 40);
  uint64_t v10 = *(void *)((char *)a1 + v7 + 40);
  *(void *)((char *)a1 + v7 + 40) = v9;
  swift_bridgeObjectRetain(v9);
  swift_bridgeObjectRelease(v10);
  *(void *)((char *)a1 + v7 + 48) = *(void *)((char *)a2 + v7 + 48);
  uint64_t v11 = *(void *)((char *)a2 + v7 + 56);
  uint64_t v12 = *(void *)((char *)a1 + v7 + 56);
  *(void *)((char *)a1 + v7 + 56) = v11;
  swift_bridgeObjectRetain(v11);
  swift_bridgeObjectRelease(v12);
  *(void *)((char *)a1 + v7 + 64) = *(void *)((char *)a2 + v7 + 64);
  uint64_t v13 = *(void *)((char *)a2 + v7 + 72);
  uint64_t v14 = *(void *)((char *)a1 + v7 + 72);
  *(void *)((char *)a1 + v7 + 72) = v13;
  swift_bridgeObjectRetain(v13);
  swift_bridgeObjectRelease(v14);
  uint64_t v32 = type metadata accessor for MLActivityClassifier.Configuration(0);
  uint64_t v15 = *(int *)(v32 + 44);
  unint64_t v34 = v8;
  uint64_t v16 = (uint64_t)&v8[v15];
  uint64_t v17 = &__src[v15];
  uint64_t v18 = type metadata accessor for DataFrame(0);
  __dst = (void *)v16;
  LODWORD(v16) = __swift_getEnumTagSinglePayload(v16, 1, v18);
  int EnumTagSinglePayload = __swift_getEnumTagSinglePayload((uint64_t)v17, 1, v18);
  if (v16)
  {
    if (EnumTagSinglePayload)
    {
      size_t v20 = *(void *)(*(void *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for DataFrame?)
                                  - 8)
                      + 64);
      uint64_t v21 = __dst;
LABEL_6:
      memcpy(v21, v17, v20);
      goto LABEL_9;
    }
    (*(void (**)(void *, char *, uint64_t))(*(void *)(v18 - 8) + 16))(__dst, v17, v18);
    __swift_storeEnumTagSinglePayload((uint64_t)__dst, 0, 1, v18);
  }
  else
  {
    uint64_t v22 = *(void *)(v18 - 8);
    if (EnumTagSinglePayload)
    {
      (*(void (**)(void *, uint64_t))(v22 + 8))(__dst, v18);
      size_t v20 = *(void *)(*(void *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for DataFrame?)
                                  - 8)
                      + 64);
      uint64_t v21 = __dst;
      goto LABEL_6;
    }
    (*(void (**)(void *, char *, uint64_t))(v22 + 24))(__dst, v17, v18);
  }
LABEL_9:
  uint64_t v23 = *(int *)(v32 + 48);
  uint64_t v24 = &__src[v23];
  uint64_t v35 = &v34[v23];
  int v25 = __swift_getEnumTagSinglePayload((uint64_t)v35, 1, v18);
  int v26 = __swift_getEnumTagSinglePayload((uint64_t)v24, 1, v18);
  if (v25)
  {
    if (!v26)
    {
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v18 - 8) + 16))(v35, v24, v18);
      __swift_storeEnumTagSinglePayload((uint64_t)v35, 0, 1, v18);
      goto LABEL_17;
    }
    size_t v27 = *(void *)(*(void *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for DataFrame?)
                                - 8)
                    + 64);
    uint64_t v28 = v35;
  }
  else
  {
    uint64_t v29 = *(void *)(v18 - 8);
    if (!v26)
    {
      (*(void (**)(char *, char *, uint64_t))(v29 + 24))(v35, v24, v18);
      goto LABEL_17;
    }
    (*(void (**)(char *, uint64_t))(v29 + 8))(v35, v18);
    size_t v27 = *(void *)(*(void *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for DataFrame?)
                                - 8)
                    + 64);
    uint64_t v28 = v35;
  }
  memcpy(v28, v24, v27);
LABEL_17:
  *(void *)((char *)a1 + *(int *)(v31 + 24)) = *(void *)((char *)a2 + *(int *)(v31 + 24));
  swift_retain();
  swift_release();
  return a1;
}

_OWORD *initializeWithTake for MLActivityClassifier.Trainer(_OWORD *a1, _OWORD *a2, uint64_t a3)
{
  *a1 = *a2;
  uint64_t v3 = *(int *)(a3 + 20);
  uint64_t v4 = (char *)a1 + v3;
  uint64_t v5 = (char *)a2 + v3;
  *(void *)((char *)a1 + v3) = *(void *)((char *)a2 + v3);
  *(void *)((char *)a1 + v3 + 8) = *(void *)((char *)a2 + v3 + 8);
  *((unsigned char *)a1 + v3 + 16) = *((unsigned char *)a2 + v3 + 16);
  *(_OWORD *)((char *)a1 + v3 + 24) = *(_OWORD *)((char *)a2 + v3 + 24);
  *(void *)((char *)a1 + v3 + 40) = *(void *)((char *)a2 + v3 + 40);
  *(_OWORD *)((char *)a1 + v3 + 48) = *(_OWORD *)((char *)a2 + v3 + 48);
  *(_OWORD *)((char *)a1 + v3 + 64) = *(_OWORD *)((char *)a2 + v3 + 64);
  uint64_t v17 = type metadata accessor for MLActivityClassifier.Configuration(0);
  uint64_t v6 = *(int *)(v17 + 44);
  uint64_t v16 = v4;
  __dst = &v4[v6];
  uint64_t v7 = &v5[v6];
  uint64_t v8 = type metadata accessor for DataFrame(0);
  if (__swift_getEnumTagSinglePayload((uint64_t)v7, 1, v8))
  {
    uint64_t v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for DataFrame?);
    memcpy(__dst, v7, *(void *)(*(void *)(v9 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v8 - 8) + 32))(__dst, v7, v8);
    __swift_storeEnumTagSinglePayload((uint64_t)__dst, 0, 1, v8);
  }
  uint64_t v10 = *(int *)(v17 + 48);
  uint64_t v11 = &v16[v10];
  uint64_t v12 = &v5[v10];
  if (__swift_getEnumTagSinglePayload((uint64_t)v12, 1, v8))
  {
    uint64_t v13 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for DataFrame?);
    memcpy(v11, v12, *(void *)(*(void *)(v13 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v8 - 8) + 32))(v11, v12, v8);
    __swift_storeEnumTagSinglePayload((uint64_t)v11, 0, 1, v8);
  }
  *(void *)((char *)a1 + *(int *)(a3 + 24)) = *(void *)((char *)a2 + *(int *)(a3 + 24));
  return a1;
}

void *assignWithTake for MLActivityClassifier.Trainer(void *a1, void *a2, uint64_t a3)
{
  *a1 = *a2;
  uint64_t v5 = a1[1];
  a1[1] = a2[1];
  swift_bridgeObjectRelease(v5);
  uint64_t v26 = a3;
  uint64_t v6 = *(int *)(a3 + 20);
  __src = (char *)a2 + v6;
  *(void *)((char *)a1 + v6) = *(void *)((char *)a2 + v6);
  *(void *)((char *)a1 + v6 + 8) = *(void *)((char *)a2 + v6 + 8);
  *((unsigned char *)a1 + v6 + 16) = *((unsigned char *)a2 + v6 + 16);
  *(_OWORD *)((char *)a1 + v6 + 24) = *(_OWORD *)((char *)a2 + v6 + 24);
  uint64_t v7 = *(void *)((char *)a1 + v6 + 40);
  *(void *)((char *)a1 + v6 + 40) = *(void *)((char *)a2 + v6 + 40);
  swift_bridgeObjectRelease(v7);
  *(void *)((char *)a1 + v6 + 48) = *(void *)((char *)a2 + v6 + 48);
  uint64_t v8 = *(void *)((char *)a1 + v6 + 56);
  *(void *)((char *)a1 + v6 + 56) = *(void *)((char *)a2 + v6 + 56);
  swift_bridgeObjectRelease(v8);
  *(void *)((char *)a1 + v6 + 64) = *(void *)((char *)a2 + v6 + 64);
  uint64_t v9 = *(void *)((char *)a1 + v6 + 72);
  *(void *)((char *)a1 + v6 + 72) = *(void *)((char *)a2 + v6 + 72);
  swift_bridgeObjectRelease(v9);
  uint64_t v27 = type metadata accessor for MLActivityClassifier.Configuration(0);
  uint64_t v10 = *(int *)(v27 + 44);
  uint64_t v29 = (char *)a1 + v6;
  uint64_t v11 = (uint64_t)a1 + v6 + v10;
  uint64_t v12 = (char *)a2 + v6 + v10;
  uint64_t v13 = type metadata accessor for DataFrame(0);
  __dst = (void *)v11;
  LODWORD(v11) = __swift_getEnumTagSinglePayload(v11, 1, v13);
  int EnumTagSinglePayload = __swift_getEnumTagSinglePayload((uint64_t)v12, 1, v13);
  if (v11)
  {
    if (EnumTagSinglePayload)
    {
      size_t v15 = *(void *)(*(void *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for DataFrame?)
                                  - 8)
                      + 64);
      uint64_t v16 = __dst;
LABEL_6:
      memcpy(v16, v12, v15);
      goto LABEL_9;
    }
    (*(void (**)(void *, char *, uint64_t))(*(void *)(v13 - 8) + 32))(__dst, v12, v13);
    __swift_storeEnumTagSinglePayload((uint64_t)__dst, 0, 1, v13);
  }
  else
  {
    uint64_t v17 = *(void *)(v13 - 8);
    if (EnumTagSinglePayload)
    {
      (*(void (**)(void *, uint64_t))(v17 + 8))(__dst, v13);
      size_t v15 = *(void *)(*(void *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for DataFrame?)
                                  - 8)
                      + 64);
      uint64_t v16 = __dst;
      goto LABEL_6;
    }
    (*(void (**)(void *, char *, uint64_t))(v17 + 40))(__dst, v12, v13);
  }
LABEL_9:
  uint64_t v18 = *(int *)(v27 + 48);
  uint64_t v19 = &__src[v18];
  uint64_t v30 = &v29[v18];
  int v20 = __swift_getEnumTagSinglePayload((uint64_t)v30, 1, v13);
  int v21 = __swift_getEnumTagSinglePayload((uint64_t)v19, 1, v13);
  if (v20)
  {
    if (!v21)
    {
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v13 - 8) + 32))(v30, v19, v13);
      __swift_storeEnumTagSinglePayload((uint64_t)v30, 0, 1, v13);
      goto LABEL_17;
    }
    size_t v22 = *(void *)(*(void *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for DataFrame?)
                                - 8)
                    + 64);
    uint64_t v23 = v30;
  }
  else
  {
    uint64_t v24 = *(void *)(v13 - 8);
    if (!v21)
    {
      (*(void (**)(char *, char *, uint64_t))(v24 + 40))(v30, v19, v13);
      goto LABEL_17;
    }
    (*(void (**)(char *, uint64_t))(v24 + 8))(v30, v13);
    size_t v22 = *(void *)(*(void *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for DataFrame?)
                                - 8)
                    + 64);
    uint64_t v23 = v30;
  }
  memcpy(v23, v19, v22);
LABEL_17:
  *(void *)((char *)a1 + *(int *)(v26 + 24)) = *(void *)((char *)a2 + *(int *)(v26 + 24));
  swift_release();
  return a1;
}

uint64_t getEnumTagSinglePayload for MLActivityClassifier.Trainer(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_22F2BB);
}

uint64_t sub_22F2BB(uint64_t a1, unsigned int a2, uint64_t a3)
{
  if (a2 == 0x7FFFFFFF)
  {
    uint64_t result = 0;
    if ((*(void *)(a1 + 8) & 0xFFFFFFFF00000001) == 0) {
      return (*(void *)(a1 + 8) >> 1) + 1;
    }
  }
  else
  {
    uint64_t v5 = type metadata accessor for MLActivityClassifier.Configuration(0);
    return __swift_getEnumTagSinglePayload(*(int *)(a3 + 20) + a1, a2, v5);
  }
  return result;
}

uint64_t storeEnumTagSinglePayload for MLActivityClassifier.Trainer(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_22F334);
}

uint64_t sub_22F334(uint64_t a1, unsigned int a2, int a3, uint64_t a4)
{
  if (a3 == 0x7FFFFFFF)
  {
    *(void *)(a1 + 8) = 2 * (a2 - 1);
  }
  else
  {
    uint64_t v5 = type metadata accessor for MLActivityClassifier.Configuration(0);
    return __swift_storeEnumTagSinglePayload(*(int *)(a4 + 20) + a1, a2, a2, v5);
  }
  return result;
}

uint64_t type metadata accessor for MLActivityClassifier.Trainer(uint64_t a1)
{
  return type metadata accessor for MLImageClassifier.CustomFeatureExtractor(a1, (uint64_t *)&type metadata singleton initialization cache for MLActivityClassifier.Trainer, (uint64_t)&nominal type descriptor for MLActivityClassifier.Trainer);
}

uint64_t type metadata completion function for MLActivityClassifier.Trainer(uint64_t a1)
{
  v3[0] = &unk_34F790;
  uint64_t result = type metadata accessor for MLActivityClassifier.Configuration(319);
  if (v2 <= 0x3F)
  {
    v3[1] = *(void *)(result - 8) + 64;
    v3[2] = &unk_34F7A8;
    swift_initStructMetadata(a1, 256, 3, v3, a1 + 16);
    return 0;
  }
  return result;
}

void static MLCreateError.featureFormatNotSupported(feature:message:)(Swift::String a1, Swift::String a2)
{
  char object = a2._object;
  uint64_t countAndFlagsBits = a2._countAndFlagsBits;
  uint64_t v4 = v2;
  _StringGuts.grow(_:)(47);
  swift_bridgeObjectRelease(0xE000000000000000);
  *(void *)&long long v6 = 0x2065727574616546;
  *((void *)&v6 + 1) = 0xEF206E6D756C6F63;
  String.append(_:)(a1);
  v5._char object = " was not found in the model" + 0x8000000000000000;
  v5._uint64_t countAndFlagsBits = 0xD00000000000001CLL;
  String.append(_:)(v5);
  v5._uint64_t countAndFlagsBits = countAndFlagsBits;
  v5._char object = object;
  String.append(_:)(v5);
  *(_OWORD *)uint64_t v4 = v6;
  *(_OWORD *)(v4 + 16) = 0;
  *(_OWORD *)(v4 + 32) = 0;
  *(unsigned char *)(v4 + 48) = 1;
}

uint64_t static MLActivityClassifier.Trainer.weightedCrossEntropy(logits:labels:weights:axis:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v53 = a3;
  uint64_t v61 = a2;
  uint64_t v6 = v4;
  int64_t v7 = *(void *)(*(void *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Tensor?)
                             - 8)
                 + 64);
  uint64_t v8 = alloca(v7);
  uint64_t v9 = alloca(v7);
  uint64_t v52 = &v51;
  uint64_t v10 = type metadata accessor for Tensor(0);
  uint64_t v59 = *(void *)(v10 - 8);
  int64_t v11 = *(void *)(v59 + 64);
  uint64_t v12 = alloca(v11);
  uint64_t v13 = alloca(v11);
  uint64_t v54 = &v51;
  uint64_t v14 = alloca(v11);
  size_t v15 = alloca(v11);
  uint64_t v60 = &v51;
  uint64_t v16 = alloca(v11);
  uint64_t v17 = alloca(v11);
  uint64_t v57 = &v51;
  uint64_t v18 = alloca(v11);
  uint64_t v19 = alloca(v11);
  uint64_t v65 = &v51;
  int v20 = alloca(v11);
  int v21 = alloca(v11);
  uint64_t v55 = &v51;
  size_t v22 = alloca(v11);
  uint64_t v23 = alloca(v11);
  uint64_t v56 = &v51;
  uint64_t v24 = alloca(v11);
  int v25 = alloca(v11);
  uint64_t v26 = alloca(v11);
  uint64_t v27 = alloca(v11);
  uint64_t v64 = &v51;
  if (a4 < 0)
  {
    uint64_t v28 = Tensor.rank.getter();
    BOOL v29 = __OFADD__(v28, a4);
    a4 += v28;
    if (v29) {
      BUG();
    }
  }
  uint64_t v62 = v6;
  uint64_t v30 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Int>);
  uint64_t v58 = v10;
  uint64_t v67 = v30;
  uint64_t v31 = (void *)swift_allocObject(v30, 40, 7);
  char v32 = (char)v31;
  v31[2] = 1;
  v31[3] = 2;
  v31[4] = a4;
  Tensor.max(alongAxes:)(v31);
  swift_bridgeObjectRelease(v32);
  uint64_t v33 = v64;
  static Tensor.- infix(_:_:)(a1, &v51);
  uint64_t v66 = *(void (**)(uint64_t *, uint64_t))(v59 + 8);
  v66(&v51, v58);
  exp(_:)(v33);
  unint64_t v34 = (void *)swift_allocObject(v67, 40, 7);
  char v35 = (char)v34;
  v34[2] = 1;
  v34[3] = 2;
  uint64_t v63 = a4;
  void v34[4] = a4;
  uint64_t v36 = v55;
  Tensor.sum(alongAxes:)(v34);
  swift_bridgeObjectRelease(v35);
  uint64_t v37 = v36;
  uint64_t v38 = v58;
  uint64_t v39 = &v51;
  log(_:)(v37);
  uint64_t v40 = v57;
  static Tensor.- infix(_:_:)(v64, v57);
  uint64_t v41 = v66;
  v66(v40, v38);
  int64_t v42 = v65;
  static Tensor.- prefix(_:)(&v51);
  v41(&v51, v38);
  uint64_t v43 = (uint64_t)v52;
  outlined init with copy of Either<LogisticRegressionClassifier<Float, String>, FullyConnectedNetworkClassifier<Float, String>>(v53, (uint64_t)v52, &demangling cache variable for type metadata for Tensor?);
  if (__swift_getEnumTagSinglePayload(v43, 1, v38) == 1)
  {
    outlined destroy of Tensor?(v43, &demangling cache variable for type metadata for Tensor?);
    static Tensor.* infix(_:_:)(v61, v42);
    uint64_t v44 = (void *)swift_allocObject(v67, 40, 7);
    v44[2] = 1;
    v44[3] = 2;
    v44[4] = v63;
    Tensor.sum(alongAxes:)(v44);
    swift_bridgeObjectRelease((_BYTE)v44);
    int64_t v45 = v66;
    v66(v40, v38);
    Tensor.sum()();
  }
  else
  {
    uint64_t v46 = v60;
    (*(void (**)(uint64_t *, uint64_t, uint64_t))(v59 + 32))(v60, v43, v38);
    uint64_t v47 = v54;
    static Tensor.* infix(_:_:)(v61, v46);
    static Tensor.* infix(_:_:)(v47, v65);
    long long v48 = v47;
    int64_t v45 = v66;
    v66(v48, v38);
    long long v49 = (void *)swift_allocObject(v67, 40, 7);
    int v49[2] = 1;
    v49[3] = 2;
    v49[4] = v63;
    Tensor.sum(alongAxes:)(v49);
    swift_bridgeObjectRelease((_BYTE)v49);
    v45(v40, v38);
    Tensor.sum()();
    v45(&v51, v38);
    uint64_t v39 = v60;
  }
  v45(v39, v38);
  v45(v65, v38);
  v45(v55, v38);
  v45(v56, v38);
  return ((uint64_t (*)(uint64_t *, uint64_t))v45)(v64, v38);
}

uint64_t closure #1 in MLActivityClassifier.Trainer.update(_:using:on:)(uint64_t a1, char *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v76 = a5;
  uint64_t v65 = a4;
  uint64_t v63 = a3;
  uint64_t v81 = a2;
  uint64_t v78 = a1;
  uint64_t v69 = v5;
  uint64_t v80 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (label: Tensor, weight: Tensor?));
  int64_t v6 = *(void *)(*(void *)(v80 - 8) + 64);
  int64_t v7 = alloca(v6);
  uint64_t v8 = alloca(v6);
  uint64_t v71 = &v63;
  int64_t v9 = *(void *)(*(void *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Tensor?)
                             - 8)
                 + 64);
  uint64_t v10 = alloca(v9);
  int64_t v11 = alloca(v9);
  uint64_t v68 = &v63;
  uint64_t v12 = alloca(v9);
  uint64_t v13 = alloca(v9);
  uint64_t v64 = &v63;
  uint64_t v14 = alloca(v9);
  size_t v15 = alloca(v9);
  uint64_t v66 = &v63;
  uint64_t v16 = alloca(v9);
  uint64_t v17 = alloca(v9);
  char v77 = &v63;
  uint64_t v73 = type metadata accessor for Tensor(0);
  uint64_t v18 = *(void *)(v73 - 8);
  int64_t v19 = *(void *)(v18 + 64);
  uint64_t v74 = v18;
  int v20 = alloca(v19);
  int v21 = alloca(v19);
  uint64_t v70 = &v63;
  size_t v22 = alloca(v19);
  uint64_t v23 = alloca(v19);
  uint64_t v72 = &v63;
  uint64_t v24 = alloca(v19);
  int v25 = alloca(v19);
  uint64_t v67 = (unint64_t *)&v63;
  uint64_t v26 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (LSTM.State?, Tensor));
  int64_t v27 = *(void *)(*(void *)(v26 - 8) + 64);
  uint64_t v28 = alloca(v27);
  BOOL v29 = alloca(v27);
  int64_t v30 = *(void *)(*(void *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for LSTM.State?)
                              - 8)
                  + 64);
  uint64_t v31 = alloca(v30);
  char v32 = alloca(v30);
  char v79 = (uint64_t *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (LSTM.State, Tensor));
  int64_t v33 = *(void *)(*(v79 - 1) + 64);
  unint64_t v34 = alloca(v33);
  char v35 = alloca(v33);
  uint64_t v36 = type metadata accessor for LSTM.State(0);
  __swift_storeEnumTagSinglePayload((uint64_t)&v63, 1, 1, v36);
  uint64_t v37 = (char *)&v63 + *(int *)(v26 + 48);
  outlined init with take of DataFrame?((uint64_t)&v63, (uint64_t)&v63, &demangling cache variable for type metadata for LSTM.State?);
  uint64_t v75 = *(void (**)(char *, char *, uint64_t))(v18 + 16);
  v75(v37, v81, v73);
  uint64_t v38 = type metadata accessor for MLActivityClassifier.Model(0);
  uint64_t v39 = lazy protocol witness table accessor for type VNImageOption and conformance VNImageOption(&lazy protocol witness table cache variable for type MLActivityClassifier.Model and conformance MLActivityClassifier.Model, type metadata accessor for MLActivityClassifier.Model, (uint64_t)&protocol conformance descriptor for MLActivityClassifier.Model);
  Layer.callAsFunction(_:)(&v63, v38, v39);
  outlined destroy of Tensor?((uint64_t)&v63, &demangling cache variable for type metadata for (LSTM.State?, Tensor));
  uint64_t v40 = *((int *)v79 + 12);
  char v79 = &v63;
  uint64_t v78 = (uint64_t)&v63 + v40;
  uint64_t v41 = &v81[*(int *)(type metadata accessor for WeightedDataSample(0) + 20)];
  uint64_t v42 = *(int *)(v80 + 48);
  uint64_t v43 = v71;
  uint64_t v44 = (uint64_t)v71 + v42;
  uint64_t v45 = (uint64_t)&v41[v42];
  uint64_t v46 = v73;
  v75((char *)v71, v41, v73);
  outlined init with copy of Either<LogisticRegressionClassifier<Float, String>, FullyConnectedNetworkClassifier<Float, String>>(v45, v44, &demangling cache variable for type metadata for Tensor?);
  uint64_t v81 = *(char **)(v74 + 32);
  ((void (*)(uint64_t *, uint64_t *, uint64_t))v81)(v70, v43, v46);
  outlined destroy of Tensor?(v44, &demangling cache variable for type metadata for Tensor?);
  uint64_t v47 = (uint64_t)v43 + *(int *)(v80 + 48);
  v75((char *)v43, v41, v46);
  uint64_t v48 = v46;
  outlined init with copy of Either<LogisticRegressionClassifier<Float, String>, FullyConnectedNetworkClassifier<Float, String>>(v45, v47, &demangling cache variable for type metadata for Tensor?);
  long long v49 = (void (*)(unint64_t *, uint64_t))v66;
  outlined init with take of DataFrame?(v47, (uint64_t)v66, &demangling cache variable for type metadata for Tensor?);
  uint64_t v50 = *(void (**)(uint64_t *, uint64_t))(v74 + 8);
  v50(v71, v46);
  uint64_t v51 = v67;
  uint64_t v52 = v70;
  static MLActivityClassifier.Trainer.reshapeLabels(prediction:target:weights:)(v67, (uint64_t)v72, (uint64_t)v77, v78, (void (*)(void, void, void))v70, v49);
  outlined destroy of Tensor?((uint64_t)v49, &demangling cache variable for type metadata for Tensor?);
  uint64_t v80 = (uint64_t)v50;
  v50(v52, v48);
  uint64_t v53 = v63;
  outlined destroy of Tensor?(v63, &demangling cache variable for type metadata for Tensor?);
  uint64_t v54 = (void (*)(uint64_t, uint64_t *, uint64_t))v81;
  ((void (*)(uint64_t, unint64_t *, uint64_t))v81)(v53, v51, v48);
  __swift_storeEnumTagSinglePayload(v53, 0, 1, v48);
  uint64_t v55 = v65;
  outlined destroy of Tensor?(v65, &demangling cache variable for type metadata for Tensor?);
  v54(v55, v72, v48);
  uint64_t v56 = v55;
  __swift_storeEnumTagSinglePayload(v55, 0, 1, v48);
  outlined assign with take of Tensor?((uint64_t)v77, v76);
  uint64_t v57 = (uint64_t)v64;
  outlined init with copy of Either<LogisticRegressionClassifier<Float, String>, FullyConnectedNetworkClassifier<Float, String>>(v53, (uint64_t)v64, &demangling cache variable for type metadata for Tensor?);
  uint64_t v58 = v57;
  if (__swift_getEnumTagSinglePayload(v57, 1, v48) == 1) {
    BUG();
  }
  uint64_t v59 = (uint64_t)v68;
  outlined init with copy of Either<LogisticRegressionClassifier<Float, String>, FullyConnectedNetworkClassifier<Float, String>>(v56, (uint64_t)v68, &demangling cache variable for type metadata for Tensor?);
  if (__swift_getEnumTagSinglePayload(v59, 1, v48) == 1) {
    BUG();
  }
  uint64_t v60 = (uint64_t)v77;
  outlined init with copy of Either<LogisticRegressionClassifier<Float, String>, FullyConnectedNetworkClassifier<Float, String>>(v76, (uint64_t)v77, &demangling cache variable for type metadata for Tensor?);
  static MLActivityClassifier.Trainer.weightedCrossEntropy(logits:labels:weights:axis:)(v57, v59, v60, -1);
  outlined destroy of Tensor?(v60, &demangling cache variable for type metadata for Tensor?);
  outlined destroy of Tensor?((uint64_t)v79, &demangling cache variable for type metadata for (LSTM.State, Tensor));
  uint64_t v61 = (uint64_t (*)(uint64_t, uint64_t))v80;
  ((void (*)(uint64_t, uint64_t))v80)(v59, v48);
  return v61(v58, v48);
}

uint64_t MLActivityClassifier.Trainer.makeFlatDataset(_:_:using:)(void *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v221 = v4;
  uint64_t v252 = v5;
  uint64_t v238 = a3;
  uint64_t v243 = a1;
  uint64_t v222 = v3;
  uint64_t v217 = *(void *)(type metadata accessor for WeightedDataSample(0) - 8);
  int64_t v7 = *(void *)(v217 + 64);
  uint64_t v8 = alloca(v7);
  int64_t v9 = alloca(v7);
  unint64_t v235 = &v201;
  uint64_t v240 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ColumnSlice<String>);
  uint64_t v241 = *(void *)(v240 - 8);
  int64_t v10 = *(void *)(v241 + 64);
  int64_t v11 = alloca(v10);
  uint64_t v12 = alloca(v10);
  uint64_t v253 = &v201;
  uint64_t v254 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Column<String>);
  uint64_t v242 = *(void *)(v254 - 8);
  int64_t v13 = *(void *)(v242 + 64);
  uint64_t v14 = alloca(v13);
  size_t v15 = alloca(v13);
  uint64_t v255 = &v201;
  int64_t v16 = *(void *)(*(void *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ScalarType?)
                              - 8)
                  + 64);
  uint64_t v17 = alloca(v16);
  uint64_t v18 = alloca(v16);
  uint64_t v216 = &v201;
  uint64_t v271 = type metadata accessor for Tensor(0);
  uint64_t v267 = *(void *)(v271 - 8);
  int64_t v19 = *(void *)(v267 + 64);
  int v20 = alloca(v19);
  int v21 = alloca(v19);
  uint64_t v218 = &v201;
  size_t v22 = alloca(v19);
  uint64_t v23 = alloca(v19);
  v236 = &v201;
  uint64_t v24 = alloca(v19);
  int v25 = alloca(v19);
  uint64_t v237 = &v201;
  uint64_t v26 = alloca(v19);
  int64_t v27 = alloca(v19);
  uint64_t v233 = &v201;
  uint64_t v28 = alloca(v19);
  BOOL v29 = alloca(v19);
  v213 = &v201;
  int64_t v30 = alloca(v19);
  uint64_t v31 = alloca(v19);
  v260 = &v201;
  uint64_t v207 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for IndexingIterator<ColumnSlice<Float>>);
  int64_t v32 = *(void *)(*(void *)(v207 - 8) + 64);
  int64_t v33 = alloca(v32);
  unint64_t v34 = alloca(v32);
  uint64_t v246 = &v201;
  uint64_t v265 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ColumnSlice<Float>);
  uint64_t v245 = *(void *)(v265 - 8);
  int64_t v35 = *(void *)(v245 + 64);
  uint64_t v36 = alloca(v35);
  uint64_t v37 = alloca(v35);
  char v223 = &v201;
  uint64_t v38 = alloca(v35);
  uint64_t v39 = alloca(v35);
  uint64_t v227 = &v201;
  uint64_t v228 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Column<Float>);
  uint64_t v208 = *(void *)(v228 - 8);
  int64_t v40 = *(void *)(v208 + 64);
  uint64_t v41 = alloca(v40);
  uint64_t v42 = alloca(v40);
  uint64_t v229 = &v201;
  int64_t v43 = *(void *)(*(void *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ComputeDevice?)
                              - 8)
                  + 64);
  uint64_t v44 = alloca(v43);
  uint64_t v45 = alloca(v43);
  uint64_t v251 = &v201;
  uint64_t v210 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for IndexingIterator<ColumnSlice<Double>>);
  int64_t v46 = *(void *)(*(void *)(v210 - 8) + 64);
  uint64_t v47 = alloca(v46);
  uint64_t v48 = alloca(v46);
  id v257 = &v201;
  int64_t v49 = *(void *)(*(void *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Tensor?)
                              - 8)
                  + 64);
  uint64_t v50 = alloca(v49);
  uint64_t v51 = alloca(v49);
  uint64_t v219 = &v201;
  uint64_t v52 = alloca(v49);
  uint64_t v53 = alloca(v49);
  uint64_t v249 = &v201;
  uint64_t v54 = alloca(v49);
  uint64_t v55 = alloca(v49);
  uint64_t v209 = &v201;
  uint64_t v56 = alloca(v49);
  uint64_t v57 = alloca(v49);
  uint64_t v211 = &v201;
  uint64_t v266 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ColumnSlice<Double>);
  uint64_t v248 = *(void *)(v266 - 8);
  int64_t v58 = *(void *)(v248 + 64);
  uint64_t v59 = alloca(v58);
  uint64_t v60 = alloca(v58);
  uint64_t v224 = &v201;
  uint64_t v61 = alloca(v58);
  uint64_t v62 = alloca(v58);
  v230 = &v201;
  uint64_t v231 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Column<Double>);
  uint64_t v212 = *(void *)(v231 - 8);
  int64_t v63 = *(void *)(v212 + 64);
  uint64_t v64 = alloca(v63);
  uint64_t v65 = alloca(v63);
  v232 = &v201;
  uint64_t v226 = type metadata accessor for AnyColumn(0);
  uint64_t v206 = *(void *)(v226 - 8);
  int64_t v66 = *(void *)(v206 + 64);
  uint64_t v67 = alloca(v66);
  uint64_t v68 = alloca(v66);
  unsigned __int8 v259 = &v201;
  v273 = (float *)type metadata accessor for DataFrame.Rows(0);
  char v272 = (void *)*((void *)v273 - 1);
  int64_t v69 = v272[8];
  uint64_t v70 = alloca(v69);
  uint64_t v71 = alloca(v69);
  uint64_t v72 = *(int *)(type metadata accessor for MLActivityClassifier.Model(0) + 64);
  uint64_t v268 = *(void *)(a3 + v72 + 40);
  swift_bridgeObjectRetain(v268);
  uint64_t v269 = a2;
  DataFrame.rows.getter();
  uint64_t v73 = DataFrame.Rows.count.getter();
  ((void (*)(uint64_t *, float *))v272[1])(&v201, v273);
  uint64_t v215 = v72;
  uint64_t v74 = *(void *)(v238 + v72 + 32);
  if (!v74) {
    BUG();
  }
  if (v73 == 0x8000000000000000 && v74 == -1) {
    BUG();
  }
  uint64_t v75 = v73 / v74;
  int64_t v76 = 0;
  if (v73 / v74 > 0) {
    int64_t v76 = v73 / v74;
  }
  char v77 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v76, 0, (uint64_t)_swiftEmptyArrayStorage);
  uint64_t v239 = v75;
  if (v75 < 0) {
    BUG();
  }
  uint64_t v261 = v77;
  if (v75)
  {
    uint64_t v78 = type metadata accessor for MLActivityClassifier.Trainer(0);
    unint64_t v79 = 0;
    uint64_t v234 = *(int *)(v78 + 20);
    v220 = (uint64_t *)(v268 + 40);
    uint64_t v80 = v259;
    uint64_t v81 = v239;
    while (1)
    {
      if (v79 == v81) {
        BUG();
      }
      unint64_t v82 = *(void *)(v238 + v215 + 32);
      int64_t v258 = v79 * v82;
      if (!is_mul_ok(v79, v82)) {
        BUG();
      }
      unint64_t v83 = v79 + 1;
      unint64_t v85 = v82;
      int64_t v84 = v83 * v82;
      if (!is_mul_ok(v83, v85)) {
        BUG();
      }
      if (v84 < v258) {
        BUG();
      }
      int64_t v250 = v84;
      unint64_t v214 = v83;
      uint64_t v262 = Dictionary.init(dictionaryLiteral:)(_swiftEmptyArrayStorage, &type metadata for String, v271, &protocol witness table for String);
      uint64_t v86 = *(void *)(v252 + v234 + 40);
      uint64_t v203 = *(void *)(v86 + 16);
      if (v203)
      {
        uint64_t v204 = v86 + 32;
        swift_bridgeObjectRetain(v86);
        unint64_t v87 = 0;
        uint64_t v205 = v86;
        do
        {
          if (v87 >= *(void *)(v86 + 16)) {
            BUG();
          }
          unint64_t v202 = v87;
          uint64_t v88 = 16 * v87;
          uint64_t v89 = *(void *)(v204 + v88);
          uint64_t v90 = *(void *)(v204 + v88 + 8);
          swift_bridgeObjectRetain(v90);
          uint64_t v264 = v89;
          DataFrame.subscript.getter(v89, v90);
          uint64_t v91 = (void *)AnyColumn.wrappedElementType.getter();
          uint64_t v92 = *(void (**)(uint64_t *, uint64_t))(v206 + 8);
          v92(v80, v226);
          uint64_t v225 = v90;
          if (v91 == &type metadata for Double)
          {
            DataFrame.subscript.getter(v264, v90, &type metadata for Double);
            uint64_t v109 = v230;
            Column.subscript.getter(v258, v250, v231);
            unint64_t v110 = v109;
            uint64_t v111 = v266;
            uint64_t v247 = *(void (**)(uint64_t *, uint64_t *, uint64_t))(v248 + 16);
            v247(v224, v110, v266);
            uint64_t v112 = lazy protocol witness table accessor for type FullyConnectedNetworkClassifier<Float, String> and conformance FullyConnectedNetworkClassifier<A, B>(&lazy protocol witness table cache variable for type ColumnSlice<Double> and conformance ColumnSlice<A>, &demangling cache variable for type metadata for ColumnSlice<Double>, (uint64_t)&protocol conformance descriptor for ColumnSlice<A>);
            dispatch thunk of Sequence.makeIterator()(v111, v112);
            uint64_t v113 = *(int *)(v210 + 36);
            uint64_t v114 = lazy protocol witness table accessor for type FullyConnectedNetworkClassifier<Float, String> and conformance FullyConnectedNetworkClassifier<A, B>(&lazy protocol witness table cache variable for type ColumnSlice<Double> and conformance ColumnSlice<A>, &demangling cache variable for type metadata for ColumnSlice<Double>, (uint64_t)&protocol conformance descriptor for ColumnSlice<A>);
            uint64_t v115 = v113;
            char v272 = *(void **)((char *)v257 + v113);
            uint64_t v116 = (uint64_t)v257;
            dispatch thunk of Collection.endIndex.getter(v266, v114);
            v273 = (float *)_swiftEmptyArrayStorage;
            if (v272 != (void *)v256[0])
            {
              uint64_t v135 = (void *)(v116 + v115);
              v273 = (float *)_swiftEmptyArrayStorage;
              char v272 = v135;
              uint64_t v263 = v114;
              do
              {
                uint64_t v136 = v135;
                uint64_t v137 = v266;
                uint64_t v138 = (void (*)(void *, void))dispatch thunk of Collection.subscript.read(v256, v136, v266, v114);
                double v244 = *(double *)v139;
                LOBYTE(v270) = *(unsigned char *)(v139 + 8);
                v138(v256, 0);
                unint64_t v140 = v224;
                v247(v224, (uint64_t *)v116, v137);
                dispatch thunk of Collection.formIndex(after:)(v272, v137, v114);
                (*(void (**)(uint64_t *, uint64_t))(v248 + 8))(v140, v137);
                if ((_BYTE)v270) {
                  BUG();
                }
                if (!swift_isUniquelyReferenced_nonNull_native(v273)) {
                  v273 = (float *)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *((void *)v273 + 2) + 1, 1, (uint64_t)v273);
                }
                unint64_t v141 = *((void *)v273 + 2);
                uint64_t v142 = v257;
                uint64_t v143 = v266;
                uint64_t v144 = v263;
                if (*((void *)v273 + 3) >> 1 <= v141)
                {
                  uint64_t v147 = (float *)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(*((void *)v273 + 3) >= 2uLL, v141 + 1, 1, (uint64_t)v273);
                  uint64_t v144 = v263;
                  uint64_t v143 = v266;
                  uint64_t v142 = v257;
                  v273 = v147;
                }
                float v145 = v244;
                uint64_t v146 = v273;
                *((void *)v273 + 2) = v141 + 1;
                v146[v141 + 8] = v145;
                uint64_t v135 = v272;
                uint64_t v270 = *v272;
                uint64_t v116 = (uint64_t)v142;
                uint64_t v114 = v144;
                dispatch thunk of Collection.endIndex.getter(v143, v144);
              }
              while (v270 != v256[0]);
            }
            outlined destroy of Tensor?(v116, &demangling cache variable for type metadata for IndexingIterator<ColumnSlice<Double>>);
            v256[0] = v273;
            uint64_t v117 = type metadata accessor for ComputeDevice(0);
            uint64_t v118 = (uint64_t)v251;
            __swift_storeEnumTagSinglePayload((uint64_t)v251, 1, 1, v117);
            uint64_t v119 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [Float]);
            uint64_t v120 = lazy protocol witness table accessor for type FullyConnectedNetworkClassifier<Float, String> and conformance FullyConnectedNetworkClassifier<A, B>(&lazy protocol witness table cache variable for type [Float] and conformance [A], &demangling cache variable for type metadata for [Float], (uint64_t)&protocol conformance descriptor for [A]);
            uint64_t v121 = (uint64_t)v211;
            Tensor.init<A>(_:on:)(v256, v118, v119, v120);
            __swift_storeEnumTagSinglePayload(v121, 0, 1, v271);
            specialized Dictionary.subscript.setter(v121, v264, v225);
            (*(void (**)(uint64_t *, uint64_t))(v248 + 8))(v230, v266);
            uint64_t v106 = v232;
            uint64_t v107 = v231;
            uint64_t v108 = v212;
          }
          else
          {
            v273 = (float *)v92;
            DataFrame.subscript.getter(v264, v90);
            uint64_t v93 = (void *)AnyColumn.wrappedElementType.getter();
            ((void (*)(uint64_t *, uint64_t))v273)(v80, v226);
            if (v93 != &type metadata for Float)
            {
              _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, 0xD000000000000023, "smatch: expected " + 0x8000000000000000, "CreateML/MLActivityClassifier+Training.swift", 44, 2, 527, 0);
              BUG();
            }
            DataFrame.subscript.getter(v264, v90, &type metadata for Float);
            uint64_t v94 = v227;
            Column.subscript.getter(v258, v250, v228);
            uint64_t v95 = v265;
            uint64_t v247 = *(void (**)(uint64_t *, uint64_t *, uint64_t))(v245 + 16);
            v247(v223, v94, v265);
            uint64_t v96 = lazy protocol witness table accessor for type FullyConnectedNetworkClassifier<Float, String> and conformance FullyConnectedNetworkClassifier<A, B>(&lazy protocol witness table cache variable for type ColumnSlice<Float> and conformance ColumnSlice<A>, &demangling cache variable for type metadata for ColumnSlice<Float>, (uint64_t)&protocol conformance descriptor for ColumnSlice<A>);
            uint64_t v97 = v246;
            dispatch thunk of Sequence.makeIterator()(v95, v96);
            uint64_t v98 = (void *)*(int *)(v207 + 36);
            char v272 = v98;
            uint64_t v99 = lazy protocol witness table accessor for type FullyConnectedNetworkClassifier<Float, String> and conformance FullyConnectedNetworkClassifier<A, B>(&lazy protocol witness table cache variable for type ColumnSlice<Float> and conformance ColumnSlice<A>, &demangling cache variable for type metadata for ColumnSlice<Float>, (uint64_t)&protocol conformance descriptor for ColumnSlice<A>);
            uint64_t v270 = *(void *)((char *)v98 + (void)v97);
            uint64_t v100 = (uint64_t)v97;
            dispatch thunk of Collection.endIndex.getter(v265, v99);
            v273 = (float *)_swiftEmptyArrayStorage;
            if (v270 != v256[0])
            {
              uint64_t v122 = (char *)v272 + (void)v97;
              v273 = (float *)_swiftEmptyArrayStorage;
              char v272 = (void *)((char *)v272 + (void)v97);
              uint64_t v263 = v99;
              do
              {
                uint64_t v123 = v100;
                uint64_t v124 = v265;
                uint64_t v125 = (void (*)(void *, void))dispatch thunk of Collection.subscript.read(v256, v122, v265, v99);
                LODWORD(v244) = *(_DWORD *)v126;
                LOBYTE(v270) = *(unsigned char *)(v126 + 4);
                v125(v256, 0);
                uint64_t v127 = v223;
                v247(v223, (uint64_t *)v123, v124);
                dispatch thunk of Collection.formIndex(after:)(v272, v124, v99);
                (*(void (**)(uint64_t *, uint64_t))(v245 + 8))(v127, v124);
                if ((_BYTE)v270) {
                  BUG();
                }
                if (!swift_isUniquelyReferenced_nonNull_native(v273)) {
                  v273 = (float *)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *((void *)v273 + 2) + 1, 1, (uint64_t)v273);
                }
                unint64_t v128 = *((void *)v273 + 2);
                uint64_t v129 = v246;
                uint64_t v130 = v265;
                uint64_t v131 = v263;
                if (*((void *)v273 + 3) >> 1 <= v128)
                {
                  unint64_t v134 = (float *)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(*((void *)v273 + 3) >= 2uLL, v128 + 1, 1, (uint64_t)v273);
                  uint64_t v131 = v263;
                  uint64_t v130 = v265;
                  uint64_t v129 = v246;
                  v273 = v134;
                }
                uint64_t v132 = v273;
                *((void *)v273 + 2) = v128 + 1;
                v132[v128 + 8] = *(float *)&v244;
                uint64_t v133 = (char *)v272;
                uint64_t v270 = *v272;
                uint64_t v100 = (uint64_t)v129;
                uint64_t v99 = v131;
                dispatch thunk of Collection.endIndex.getter(v130, v131);
                uint64_t v122 = v133;
              }
              while (v270 != v256[0]);
            }
            outlined destroy of Tensor?(v100, &demangling cache variable for type metadata for IndexingIterator<ColumnSlice<Float>>);
            v256[0] = v273;
            uint64_t v101 = type metadata accessor for ComputeDevice(0);
            uint64_t v102 = (uint64_t)v251;
            __swift_storeEnumTagSinglePayload((uint64_t)v251, 1, 1, v101);
            uint64_t v103 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [Float]);
            uint64_t v104 = lazy protocol witness table accessor for type FullyConnectedNetworkClassifier<Float, String> and conformance FullyConnectedNetworkClassifier<A, B>(&lazy protocol witness table cache variable for type [Float] and conformance [A], &demangling cache variable for type metadata for [Float], (uint64_t)&protocol conformance descriptor for [A]);
            uint64_t v105 = (uint64_t)v209;
            Tensor.init<A>(_:on:)(v256, v102, v103, v104);
            __swift_storeEnumTagSinglePayload(v105, 0, 1, v271);
            specialized Dictionary.subscript.setter(v105, v264, v225);
            (*(void (**)(uint64_t *, uint64_t))(v245 + 8))(v227, v265);
            uint64_t v106 = v229;
            uint64_t v107 = v228;
            uint64_t v108 = v208;
          }
          (*(void (**)(uint64_t *, uint64_t))(v108 + 8))(v106, v107);
          unint64_t v87 = v202 + 1;
          uint64_t v80 = v259;
          uint64_t v86 = v205;
        }
        while (v202 + 1 != v203);
        swift_bridgeObjectRelease(v205);
      }
      uint64_t v148 = *(float **)(v268 + 16);
      uint64_t v149 = _swiftEmptyArrayStorage;
      if (v148) {
        break;
      }
LABEL_56:
      uint64_t v167 = type metadata accessor for ScalarType(0);
      uint64_t v168 = (uint64_t)v216;
      __swift_storeEnumTagSinglePayload((uint64_t)v216, 1, 1, v167);
      Tensor.init(stacking:alongAxis:scalarType:)(v149, 0, v168);
      DataFrame.subscript.getter(*(void *)(v252 + v234 + 48), *(void *)(v252 + v234 + 56), &type metadata for String);
      Column.subscript.getter(v258, v250, v254);
      uint64_t v169 = specialized Collection<>.mostFrequent()();
      uint64_t v171 = v169;
      uint64_t v172 = (void *)v170;
      if ((v170 & 0xFFFFFFFFFFFFFFFDLL) == 0)
      {
        outlined consume of String??(v169, v170);
        uint64_t v171 = 0x3E656E6F6E3CLL;
        uint64_t v172 = (void *)0xE600000000000000;
      }
      uint64_t v173 = v243;
      uint64_t v174 = specialized Collection<>.firstIndex(of:)(v171, (uint64_t)v172, v243);
      if (v175)
      {
        swift_bridgeObjectRelease(v268);
        swift_bridgeObjectRelease((_BYTE)v261);
        uint64_t v194 = lazy protocol witness table accessor for type MLCreateError and conformance MLCreateError();
        swift_allocError(&type metadata for MLCreateError, v194, 0, 0);
        v195._uint64_t countAndFlagsBits = v171;
        v195._char object = v172;
        static MLCreateError.validationClassNotFound(className:)(v195, 46, 0xD000000000000011, (uint64_t)("does not match training data" + 0x8000000000000000));
        swift_bridgeObjectRelease((_BYTE)v172);
        swift_willThrow(v172, v172, v196, v197, v198, v199);
        (*(void (**)(uint64_t *, uint64_t))(v241 + 8))(v253, v240);
        (*(void (**)(uint64_t *, uint64_t))(v242 + 8))(v255, v254);
        (*(void (**)(uint64_t *, uint64_t))(v267 + 8))(v260, v271);
        char v193 = v262;
        return swift_bridgeObjectRelease(v193);
      }
      uint64_t v176 = v173;
      uint64_t v177 = v174;
      swift_bridgeObjectRelease((_BYTE)v172);
      uint64_t v178 = v176[2];
      uint64_t v179 = type metadata accessor for ComputeDevice(0);
      uint64_t v180 = (uint64_t)v251;
      __swift_storeEnumTagSinglePayload((uint64_t)v251, 1, 1, v179);
      uint64_t v181 = v237;
      Tensor.init(oneHotAtIndex:depth:onValue:offValue:on:)(v177, v178, v180, 1.0, 0.0);
      uint64_t v182 = *(void (**)(uint64_t *, uint64_t *, uint64_t))(v267 + 16);
      uint64_t v183 = v271;
      v182(v236, v260, v271);
      uint64_t v184 = (uint64_t)v218;
      v182(v218, v181, v183);
      uint64_t v185 = (uint64_t)v219;
      __swift_storeEnumTagSinglePayload((uint64_t)v219, 1, 1, v183);
      WeightedDataSample.init(features:labels:)((uint64_t)v236, v184, v185);
      uint64_t v186 = v261;
      unint64_t v187 = v261[2];
      if (v261[3] >> 1 <= v187) {
        uint64_t v186 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(v261[3] >= 2uLL, v187 + 1, 1, (uint64_t)v261);
      }
      uint64_t v80 = v259;
      v186[2] = v187 + 1;
      int v188 = *(unsigned __int8 *)(v217 + 80);
      uint64_t v261 = v186;
      outlined init with take of WeightedDataSample((uint64_t)v235, (uint64_t)v186 + ((v188 + 32) & ~v188) + *(void *)(v217 + 72) * v187);
      uint64_t v189 = *(void (**)(uint64_t *, uint64_t))(v267 + 8);
      uint64_t v190 = v271;
      v189(v237, v271);
      (*(void (**)(uint64_t *, uint64_t))(v241 + 8))(v253, v240);
      (*(void (**)(uint64_t *, uint64_t))(v242 + 8))(v255, v254);
      v189(v260, v190);
      swift_bridgeObjectRelease(v262);
      uint64_t v81 = v239;
      unint64_t v79 = v214;
      if (v214 == v239) {
        goto LABEL_62;
      }
    }
    swift_bridgeObjectRetain(v268);
    uint64_t v150 = v220;
    char v272 = _swiftEmptyArrayStorage;
    while (1)
    {
      uint64_t v151 = v262;
      if (*(void *)(v262 + 16))
      {
        v273 = v148;
        uint64_t v152 = *v150;
        uint64_t v153 = *(v150 - 1);
        swift_bridgeObjectRetain(*v150);
        unint64_t v154 = specialized __RawDictionaryStorage.find<A>(_:)(v153, v152);
        uint64_t v156 = 1;
        if (v155)
        {
          (*(void (**)(uint64_t *, unint64_t, uint64_t))(v267 + 16))(v249, *(void *)(v151 + 56) + *(void *)(v267 + 72) * v154, v271);
          uint64_t v156 = 0;
        }
        uint64_t v157 = (uint64_t)v249;
        uint64_t v158 = v271;
        __swift_storeEnumTagSinglePayload((uint64_t)v249, v156, 1, v271);
        swift_bridgeObjectRelease(v152);
        int EnumTagSinglePayload = __swift_getEnumTagSinglePayload(v157, 1, v158);
        uint64_t v148 = v273;
        if (EnumTagSinglePayload != 1)
        {
          uint64_t v160 = v157;
          unsigned __int8 v161 = *(void (**)(uint64_t *, uint64_t, uint64_t))(v267 + 32);
          uint64_t v162 = v213;
          uint64_t v163 = v271;
          v161(v213, v160, v271);
          v161(v233, (uint64_t)v162, v163);
          if (swift_isUniquelyReferenced_nonNull_native(v272)) {
            uint64_t v164 = v272;
          }
          else {
            uint64_t v164 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v272[2] + 1, 1, (uint64_t)v272);
          }
          unint64_t v165 = v164[2];
          if (v164[3] >> 1 <= v165) {
            uint64_t v164 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(v164[3] >= 2uLL, v165 + 1, 1, (uint64_t)v164);
          }
          v164[2] = v165 + 1;
          int v166 = *(unsigned __int8 *)(v267 + 80);
          char v272 = v164;
          v161((void *)((char *)v164 + ((v166 + 32) & ~v166) + *(void *)(v267 + 72) * v165), (uint64_t)v233, v271);
          uint64_t v148 = v273;
          goto LABEL_53;
        }
      }
      else
      {
        uint64_t v157 = (uint64_t)v249;
        __swift_storeEnumTagSinglePayload((uint64_t)v249, 1, 1, v271);
      }
      outlined destroy of Tensor?(v157, &demangling cache variable for type metadata for Tensor?);
LABEL_53:
      v150 += 2;
      uint64_t v148 = (float *)((char *)v148 - 1);
      if (!v148)
      {
        swift_bridgeObjectRelease(v268);
        uint64_t v149 = v272;
        goto LABEL_56;
      }
    }
  }
LABEL_62:
  swift_bridgeObjectRelease(v268);
  uint64_t v191 = type metadata accessor for MLActivityClassifier.Trainer(0);
  char v192 = (char)v261;
  specialized Sequence<>.makeDataset(configuration:)(*(int *)(v191 + 20) + v252, (uint64_t)v261);
  char v193 = v192;
  return swift_bridgeObjectRelease(v193);
}

uint64_t WeightedDataSample.init(features:labels:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v20 = a3;
  uint64_t v21 = a2;
  uint64_t v19 = a1;
  uint64_t v4 = v3;
  size_t v22 = v3;
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (label: Tensor, weight: Tensor?));
  uint64_t v6 = *(void *)(v5 - 8);
  uint64_t v23 = v5;
  int64_t v7 = *(void *)(v6 + 64);
  uint64_t v8 = alloca(v7);
  int64_t v9 = alloca(v7);
  uint64_t v24 = v18;
  int64_t v10 = alloca(v7);
  int64_t v11 = alloca(v7);
  uint64_t v12 = &v18[*(int *)(v5 + 48)];
  uint64_t v13 = type metadata accessor for Tensor(0);
  uint64_t v14 = *(void (**)(unsigned char *, uint64_t, uint64_t))(*(void *)(v13 - 8) + 32);
  v14(v18, v21, v13);
  outlined init with take of DataFrame?(v20, (uint64_t)v12, &demangling cache variable for type metadata for Tensor?);
  v14(v4, v19, v13);
  uint64_t v15 = (uint64_t)&v24[*(int *)(v23 + 48)];
  v14(v24, (uint64_t)v18, v13);
  outlined init with take of DataFrame?((uint64_t)v12, v15, &demangling cache variable for type metadata for Tensor?);
  int64_t v16 = &v22[*(int *)(type metadata accessor for WeightedDataSample(0) + 20)];
  v14(v16, (uint64_t)v24, v13);
  return outlined init with take of DataFrame?(v15, (uint64_t)&v16[*(int *)(v23 + 48)], &demangling cache variable for type metadata for Tensor?);
}

uint64_t *closure #2 in MLActivityClassifier.Trainer.makeDataset(_:_:using:for:)(uint64_t a1, uint64_t a2, uint64_t a3, void *a4, uint64_t *a5)
{
  uint64_t v137 = a5;
  uint64_t v141 = v6;
  uint64_t v155 = a3;
  uint64_t v148 = a1;
  uint64_t v142 = v5;
  int64_t v8 = *(void *)(*(void *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Tensor?)
                             - 8)
                 + 64);
  int64_t v9 = alloca(v8);
  int64_t v10 = alloca(v8);
  uint64_t v143 = &v132;
  int64_t v11 = alloca(v8);
  uint64_t v12 = alloca(v8);
  uint64_t v160 = &v132;
  int64_t v13 = *(void *)(*(void *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ScalarType?)
                              - 8)
                  + 64);
  uint64_t v14 = alloca(v13);
  uint64_t v15 = alloca(v13);
  uint64_t v139 = &v132;
  int64_t v16 = *(void *)(*(void *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ComputeDevice?)
                              - 8)
                  + 64);
  uint64_t v17 = alloca(v16);
  uint64_t v18 = alloca(v16);
  uint64_t v150 = &v132;
  uint64_t v19 = type metadata accessor for Tensor(0);
  v161._char object = *(void **)(v19 - 8);
  int64_t v20 = *((void *)v161._object + 8);
  uint64_t v21 = alloca(v20);
  size_t v22 = alloca(v20);
  uint64_t v144 = &v132;
  uint64_t v23 = alloca(v20);
  uint64_t v24 = alloca(v20);
  float v145 = &v132;
  int v25 = alloca(v20);
  uint64_t v26 = alloca(v20);
  uint64_t v151 = (char *)&v132;
  int64_t v27 = alloca(v20);
  uint64_t v28 = alloca(v20);
  uint64_t v136 = &v132;
  BOOL v29 = alloca(v20);
  int64_t v30 = alloca(v20);
  uint64_t v31 = alloca(v20);
  int64_t v32 = alloca(v20);
  unint64_t v154 = &v132;
  int64_t v33 = alloca(v20);
  unint64_t v34 = alloca(v20);
  unint64_t v134 = &v132;
  uint64_t v163 = (char *)_swiftEmptyArrayStorage;
  uint64_t v164 = v19;
  uint64_t v35 = Dictionary.init(dictionaryLiteral:)(_swiftEmptyArrayStorage, &type metadata for String, v19, &protocol witness table for String);
  uint64_t v36 = *(int *)(type metadata accessor for MLActivityClassifier.Trainer(0) + 20);
  uint64_t v138 = a2;
  uint64_t v140 = v36;
  uint64_t v37 = *(void *)(a2 + v36 + 40);
  uint64_t v38 = *(void *)(v37 + 16);
  uint64_t v152 = 1;
  uint64_t v149 = a4;
  uint64_t v159 = &v132;
  if (v38)
  {
    uint64_t v39 = v37;
    uint64_t v135 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [Float]);
    swift_bridgeObjectRetain(v39);
    uint64_t v153 = v39;
    int64_t v40 = (void (**)(void, void, void))(v39 + 40);
    while (1)
    {
      uint64_t v162 = v35;
      uint64_t v147 = v38;
      uint64_t v41 = (uint64_t)*(v40 - 1);
      uint64_t v132 = v40;
      uint64_t v42 = (void (*)(char *, char *, uint64_t))*v40;
      swift_bridgeObjectRetain(*v40);
      v161._uint64_t countAndFlagsBits = v41;
      uint64_t v43 = v41;
      uint64_t v44 = v135;
      DataFrame.Row.subscript.getter(v43, v42, v135);
      if (!v156) {
        break;
      }
      uint64_t v45 = type metadata accessor for ComputeDevice(0);
      uint64_t v46 = v44;
      uint64_t v47 = (uint64_t)v150;
      __swift_storeEnumTagSinglePayload((uint64_t)v150, 1, 1, v45);
      uint64_t v48 = lazy protocol witness table accessor for type FullyConnectedNetworkClassifier<Float, String> and conformance FullyConnectedNetworkClassifier<A, B>(&lazy protocol witness table cache variable for type [Float] and conformance [A], &demangling cache variable for type metadata for [Float], (uint64_t)&protocol conformance descriptor for [A]);
      int64_t v49 = v134;
      Tensor.init<A>(_:on:)(&v156, v47, v46, v48);
      uint64_t v133 = (void (*)(void *, void *, uint64_t))*((void *)v161._object + 4);
      v133(v154, v49, v164);
      uint64_t v50 = (void *)v162;
      char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v162);
      uint64_t v156 = v50;
      uint64_t v158 = v42;
      unint64_t v53 = specialized __RawDictionaryStorage.find<A>(_:)(v161._countAndFlagsBits, (uint64_t)v42);
      uint64_t v54 = v50;
      BOOL v55 = (v52 & 1) == 0;
      BOOL v56 = __OFADD__(v54[2], v55);
      Swift::Int v57 = v54[2] + v55;
      if (v56) {
        BUG();
      }
      char v58 = v52;
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _NativeDictionary<String, Tensor>);
      Swift::Bool v59 = _NativeDictionary.ensureUnique(isUnique:capacity:)(isUniquelyReferenced_nonNull_native, v57);
      uint64_t countAndFlagsBits = v161._countAndFlagsBits;
      if (v59)
      {
        unint64_t v53 = specialized __RawDictionaryStorage.find<A>(_:)(v161._countAndFlagsBits, (uint64_t)v158);
        if ((v58 & 1) != (v61 & 1))
        {
          KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(&type metadata for String);
          BUG();
        }
        uint64_t countAndFlagsBits = v161._countAndFlagsBits;
      }
      uint64_t v62 = v156;
      if (v58)
      {
        (*((void (**)(unint64_t, void *, uint64_t))v161._object + 5))(v156[7] + v53 * *((void *)v161._object + 9), v154, v164);
        uint64_t v63 = v147;
        char v64 = (char)v158;
      }
      else
      {
        v156[(v53 >> 6) + 8] |= 1 << v53;
        uint64_t v65 = v62[6];
        uint64_t v66 = 16 * v53;
        *(void *)(v65 + v66) = countAndFlagsBits;
        char v67 = (char)v158;
        *(void *)(v65 + v66 + 8) = v158;
        v133((void *)(v62[7] + v53 * *((void *)v161._object + 9)), v154, v164);
        uint64_t v68 = v62[2];
        BOOL v56 = __OFADD__(1, v68);
        uint64_t v69 = v68 + 1;
        uint64_t v63 = v147;
        if (v56) {
          BUG();
        }
        v62[2] = v69;
        swift_bridgeObjectRetain(v67);
        char v64 = v67;
      }
      uint64_t v35 = (uint64_t)v156;
      swift_bridgeObjectRelease(v64);
      swift_bridgeObjectRelease(0);
      int64_t v40 = v132 + 2;
      uint64_t v38 = v63 - 1;
      a4 = v149;
      if (!v38)
      {
        swift_bridgeObjectRelease(v153);
        goto LABEL_14;
      }
    }
    swift_bridgeObjectRelease(v153);
    uint64_t v104 = lazy protocol witness table accessor for type MLCreateError and conformance MLCreateError();
    uint64_t v101 = swift_allocError(&type metadata for MLCreateError, v104, 0, 0);
    uint64_t v105 = v161._countAndFlagsBits;
    v103._char object = v42;
    static MLCreateError.featureNotFound(feature:)(v103);
    v103._uint64_t countAndFlagsBits = (uint64_t)v42;
LABEL_32:
    swift_bridgeObjectRelease(v103._countAndFlagsBits);
    swift_willThrow(v103._countAndFlagsBits, v103._object, v106, v107, v108, v109);
    goto LABEL_40;
  }
LABEL_14:
  uint64_t v70 = *(void *)(v155 + 16);
  BOOL v71 = v70 == *(void *)(v35 + 16);
  uint64_t v72 = (uint64_t)v160;
  uint64_t v162 = v35;
  if (!v71)
  {
    uint64_t v156 = 0;
    unint64_t v157 = 0xE000000000000000;
    uint64_t v91 = v70;
    _StringGuts.grow(_:)(56);
    v92._uint64_t countAndFlagsBits = 0xD000000000000029;
    v92._char object = " be Float or Double" + 0x8000000000000000;
    String.append(_:)(v92);
    uint64_t v146 = v91;
    uint64_t v93 = dispatch thunk of CustomStringConvertible.description.getter(&type metadata for Int, &protocol witness table for Int);
    LOBYTE(v91) = (_BYTE)v94;
    v92._uint64_t countAndFlagsBits = v93;
    v92._char object = v94;
    String.append(_:)(v92);
    swift_bridgeObjectRelease(v91);
    v92._uint64_t countAndFlagsBits = 0x756F662074756220;
    v92._char object = (void *)0xEB0000000020646ELL;
    String.append(_:)(v92);
    uint64_t v146 = *(void *)(v35 + 16);
    uint64_t v95 = dispatch thunk of CustomStringConvertible.description.getter(&type metadata for Int, &protocol witness table for Int);
    char v97 = (char)v96;
    v92._uint64_t countAndFlagsBits = v95;
    v92._char object = v96;
    String.append(_:)(v92);
    swift_bridgeObjectRelease(v97);
    uint64_t v98 = (uint64_t)v156;
    uint64_t v99 = (void *)v157;
    uint64_t v100 = lazy protocol witness table accessor for type MLCreateError and conformance MLCreateError();
    uint64_t v101 = swift_allocError(&type metadata for MLCreateError, v100, 0, 0);
    v92._uint64_t countAndFlagsBits = 0;
    v103._char object = (void *)0xE000000000000000;
    v102._uint64_t countAndFlagsBits = v98;
    v102._char object = v99;
    static MLCreateError.featureFormatNotSupported(feature:message:)(v103, v102);
    v103._uint64_t countAndFlagsBits = (uint64_t)v99;
    goto LABEL_32;
  }
  if (!v70) {
    goto LABEL_33;
  }
  uint64_t v73 = v155;
  v161._uint64_t countAndFlagsBits = v70;
  swift_bridgeObjectRetain(v155);
  uint64_t v74 = (uint64_t *)(v73 + 40);
  uint64_t v163 = (char *)_swiftEmptyArrayStorage;
  uint64_t v75 = v161._countAndFlagsBits;
  do
  {
    v161._uint64_t countAndFlagsBits = v75;
    if (!*(void *)(v35 + 16))
    {
      __swift_storeEnumTagSinglePayload(v72, 1, 1, v164);
LABEL_27:
      outlined destroy of Tensor?(v72, &demangling cache variable for type metadata for Tensor?);
      goto LABEL_28;
    }
    uint64_t v76 = *v74;
    uint64_t v77 = *(v74 - 1);
    swift_bridgeObjectRetain(*v74);
    unint64_t v78 = specialized __RawDictionaryStorage.find<A>(_:)(v77, v76);
    uint64_t v79 = (uint64_t)v160;
    uint64_t v81 = 1;
    if (v80)
    {
      (*((void (**)(void *, unint64_t, uint64_t))v161._object + 2))(v160, *(void *)(v162 + 56) + *((void *)v161._object + 9) * v78, v164);
      uint64_t v81 = 0;
    }
    uint64_t v82 = v164;
    __swift_storeEnumTagSinglePayload(v79, v81, 1, v164);
    swift_bridgeObjectRelease(v76);
    uint64_t v83 = v82;
    uint64_t v72 = (uint64_t)v160;
    int EnumTagSinglePayload = __swift_getEnumTagSinglePayload((uint64_t)v160, 1, v83);
    uint64_t v35 = v162;
    if (EnumTagSinglePayload == 1) {
      goto LABEL_27;
    }
    uint64_t v85 = v72;
    uint64_t v86 = (void (*)(char *, char *, uint64_t))*((void *)v161._object + 4);
    unint64_t v87 = v136;
    uint64_t v88 = v164;
    v86((char *)v136, (char *)v85, v164);
    uint64_t v158 = v86;
    v86(v151, (char *)v87, v88);
    if (!swift_isUniquelyReferenced_nonNull_native(v163)) {
      uint64_t v163 = (char *)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *((void *)v163 + 2) + 1, 1, (uint64_t)v163);
    }
    unint64_t v89 = *((void *)v163 + 2);
    if (*((void *)v163 + 3) >> 1 <= v89) {
      uint64_t v163 = (char *)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(*((void *)v163 + 3) >= 2uLL, v89 + 1, 1, (uint64_t)v163);
    }
    uint64_t v90 = v163;
    *((void *)v163 + 2) = v89 + 1;
    v158(&v90[((*((unsigned __int8 *)v161._object + 80) + 32) & ~*((unsigned __int8 *)v161._object + 80))+ *((void *)v161._object + 9) * v89], v151, v164);
    uint64_t v35 = v162;
    uint64_t v72 = (uint64_t)v160;
LABEL_28:
    v74 += 2;
    uint64_t v75 = v161._countAndFlagsBits - 1;
  }
  while (v161._countAndFlagsBits != 1);
  swift_bridgeObjectRelease(v155);
  a4 = v149;
LABEL_33:
  uint64_t v110 = type metadata accessor for ScalarType(0);
  uint64_t v111 = (uint64_t)v139;
  __swift_storeEnumTagSinglePayload((uint64_t)v139, 1, 1, v110);
  Tensor.init(stacking:alongAxis:scalarType:)(v163, 0, v111);
  DataFrame.Row.subscript.getter(*(void *)(v138 + v140 + 48), *(void *)(v138 + v140 + 56), &type metadata for String);
  uint64_t v112 = (uint64_t)v156;
  if (!v157) {
    uint64_t v112 = 0;
  }
  uint64_t v113 = (void *)0xE000000000000000;
  if (v157) {
    uint64_t v113 = (void *)v157;
  }
  uint64_t v114 = specialized Collection<>.firstIndex(of:)(v112, (uint64_t)v113, a4);
  if ((v115 & 1) == 0)
  {
    uint64_t v116 = a4;
    uint64_t v117 = v114;
    swift_bridgeObjectRelease((_BYTE)v113);
    uint64_t v118 = v116[2];
    uint64_t v119 = type metadata accessor for ComputeDevice(0);
    uint64_t v120 = (uint64_t)v150;
    __swift_storeEnumTagSinglePayload((uint64_t)v150, 1, 1, v119);
    uint64_t v121 = (uint64_t)v145;
    Tensor.init(oneHotAtIndex:depth:onValue:offValue:on:)(v117, v118, v120, 1.0, 0.0);
    uint64_t v122 = (uint64_t)v144;
    uint64_t v123 = v164;
    (*((void (**)(void *, void *, uint64_t))v161._object + 4))(v144, v159, v164);
    uint64_t v124 = (uint64_t)v143;
    __swift_storeEnumTagSinglePayload((uint64_t)v143, 1, 1, v123);
    WeightedDataSample.init(features:labels:)(v122, v121, v124);
    swift_bridgeObjectRelease(v162);
    uint64_t result = (uint64_t *)v141;
    uint64_t v152 = v141;
    return result;
  }
  uint64_t v126 = lazy protocol witness table accessor for type MLCreateError and conformance MLCreateError();
  uint64_t v101 = swift_allocError(&type metadata for MLCreateError, v126, 0, 0);
  v127._uint64_t countAndFlagsBits = v112;
  v127._char object = v113;
  static MLCreateError.validationClassNotFound(className:)(v127, 46, 0xD000000000000011, (uint64_t)("does not match training data" + 0x8000000000000000));
  swift_bridgeObjectRelease((_BYTE)v113);
  swift_willThrow(v113, v113, v128, v129, v130, v131);
  (*((void (**)(void *, uint64_t))v161._object + 1))(v159, v164);
LABEL_40:
  swift_bridgeObjectRelease(v162);
  uint64_t result = v137;
  *uint64_t v137 = v101;
  return result;
}

uint64_t MLActivityClassifier.DataBatcher.next()()
{
  uint64_t v15 = v0;
  uint64_t v2 = type metadata accessor for DataFrame.Rows(0);
  uint64_t v3 = *(void *)(v2 - 8);
  int64_t v4 = *(void *)(v3 + 64);
  uint64_t v5 = alloca(v4);
  uint64_t v6 = alloca(v4);
  uint64_t v7 = *(void *)(v1 + *(int *)(type metadata accessor for MLActivityClassifier.DataBatcher(0) + 48));
  v14[1] = v1;
  DataFrame.rows.getter();
  uint64_t v8 = DataFrame.Rows.count.getter();
  (*(void (**)(void *, uint64_t))(v3 + 8))(v14, v2);
  if (v7 >= v8)
  {
    unsigned int v11 = 1;
    uint64_t v10 = v15;
  }
  else
  {
    Swift::Int v9 = timestampSeed()();
    uint64_t v10 = v15;
    MLActivityClassifier.DataBatcher.generateNextBatch(rowCount:seed:)(1, v9);
    unsigned int v11 = 0;
  }
  uint64_t v12 = type metadata accessor for DataFrame(0);
  return __swift_storeEnumTagSinglePayload(v10, v11, 1, v12);
}

uint64_t protocol witness for Sequence.makeIterator() in conformance MLActivityClassifier.DataBatcher()
{
  return specialized Sequence<>.makeIterator()();
}

uint64_t protocol witness for Sequence.underestimatedCount.getter in conformance MLActivityClassifier.DataBatcher()
{
  return getEnumTag for MLStyleTransfer.DataSource();
}

void *protocol witness for Sequence._copyToContiguousArray() in conformance MLActivityClassifier.DataBatcher()
{
  return specialized Sequence._copyToContiguousArray()();
}

void *specialized Sequence._copyToContiguousArray()()
{
  uint64_t v1 = specialized _copySequenceToContiguousArray<A>(_:)(v0);
  outlined destroy of MLActivityClassifier.ModelParameters(v0, type metadata accessor for MLActivityClassifier.DataBatcher);
  return v1;
}

uint64_t protocol witness for Sequence._copyContents(initializing:) in conformance MLActivityClassifier.DataBatcher(uint64_t a1, unsigned char *a2, uint64_t a3)
{
  return specialized Sequence._copyContents(initializing:)(a1, a2, a3);
}

uint64_t protocol witness for IteratorProtocol.next() in conformance MLActivityClassifier.DataBatcher()
{
  return MLActivityClassifier.DataBatcher.next()();
}

uint64_t associated type witness table accessor for Sequence.Iterator : IteratorProtocol in MLActivityClassifier.DataBatcher()
{
  return lazy protocol witness table accessor for type VNImageOption and conformance VNImageOption(&lazy protocol witness table cache variable for type MLActivityClassifier.DataBatcher and conformance MLActivityClassifier.DataBatcher, type metadata accessor for MLActivityClassifier.DataBatcher, (uint64_t)&protocol conformance descriptor for MLActivityClassifier.DataBatcher);
}

uint64_t protocol witness for DataSampleProtocol.features.getter in conformance WeightedDataSample()
{
  uint64_t v2 = v0;
  uint64_t v3 = type metadata accessor for Tensor(0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v3 - 8) + 16))(v2, v1, v3);
}

uint64_t protocol witness for DataSampleProtocol.labels.getter in conformance WeightedDataSample(uint64_t a1)
{
  uint64_t v3 = v1;
  uint64_t v16 = v1;
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (label: Tensor, weight: Tensor?));
  int64_t v5 = *(void *)(*(void *)(v4 - 8) + 64);
  uint64_t v6 = alloca(v5);
  uint64_t v7 = alloca(v5);
  uint64_t v8 = *(int *)(v4 + 48);
  uint64_t v15 = v3 + v8;
  uint64_t v9 = v2 + *(int *)(a1 + 20);
  uint64_t v17 = (uint64_t)&v15 + v8;
  uint64_t v10 = type metadata accessor for Tensor(0);
  uint64_t v11 = *(void *)(v10 - 8);
  (*(void (**)(uint64_t *, uint64_t, uint64_t))(v11 + 16))(&v15, v9, v10);
  uint64_t v12 = v9 + v8;
  uint64_t v13 = v17;
  outlined init with copy of Either<LogisticRegressionClassifier<Float, String>, FullyConnectedNetworkClassifier<Float, String>>(v12, v17, &demangling cache variable for type metadata for Tensor?);
  (*(void (**)(uint64_t, uint64_t *, uint64_t))(v11 + 32))(v16, &v15, v10);
  return outlined init with take of DataFrame?(v13, v15, &demangling cache variable for type metadata for Tensor?);
}

uint64_t protocol witness for DataSampleProtocol.init(features:labels:) in conformance WeightedDataSample(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (label: Tensor, weight: Tensor?));
  return WeightedDataSample.init(features:labels:)(a1, a2, a2 + *(int *)(v2 + 48));
}

uint64_t WeightedDataSample.init<A>(collating:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v43 = a3;
  v32[2] = v3;
  int64_t v5 = *(void *)(*(void *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Tensor?)
                             - 8)
                 + 64);
  uint64_t v6 = alloca(v5);
  uint64_t v7 = alloca(v5);
  uint64_t v38 = v32;
  uint64_t v8 = *(void *)(a3 + 8);
  uint64_t v42 = type metadata accessor for LazySequence(0, a2, v8);
  uint64_t v44 = *(void *)(v42 - 8);
  int64_t v9 = *(void *)(v44 + 64);
  uint64_t v10 = alloca(v9);
  uint64_t v11 = alloca(v9);
  uint64_t v12 = type metadata accessor for Tensor(255);
  uint64_t v45 = v12;
  uint64_t v36 = type metadata accessor for LazyMapSequence(0, a2, v12, v8);
  int64_t v13 = *(void *)(*(void *)(v36 - 8) + 64);
  uint64_t v14 = alloca(v13);
  uint64_t v15 = alloca(v13);
  uint64_t v41 = v32;
  int64_t v16 = *(void *)(*(void *)(v12 - 8) + 64);
  uint64_t v17 = alloca(v16);
  uint64_t v18 = alloca(v16);
  int64_t v33 = v32;
  uint64_t v19 = alloca(v16);
  int64_t v20 = alloca(v16);
  unint64_t v34 = v32;
  uint64_t v39 = a2;
  uint64_t v35 = v8;
  uint64_t v40 = a1;
  char v46 = Sequence.allSatisfy(_:)(closure #1 in WeightedDataSample.init<A>(collating:), 0, a2, v8);
  Sequence.lazy.getter(a2, v8);
  uint64_t v21 = v42;
  uint64_t WitnessTable = swift_getWitnessTable(&protocol conformance descriptor for LazySequence<A>, v42);
  size_t v22 = v41;
  LazySequenceProtocol.map<A>(_:)(specialized implicit closure #1 in WeightedDataSample.init<A>(collating:), 0, v21, v45, WitnessTable);
  uint64_t v44 = *(void *)(v44 + 8);
  ((void (*)(void *, uint64_t))v44)(v32, v21);
  v32[1] = v43;
  uint64_t v23 = v36;
  uint64_t v24 = swift_getWitnessTable(&protocol conformance descriptor for <> LazyMapSequence<A, B>, v36);
  Tensor.init<A>(collating:)(v22, v23, v24);
  Sequence.lazy.getter(v39, v35);
  uint64_t v25 = v42;
  LazySequenceProtocol.map<A>(_:)(specialized implicit closure #2 in WeightedDataSample.init<A>(collating:), 0, v42, v45, WitnessTable);
  uint64_t v26 = (void (*)(void *, uint64_t))v44;
  ((void (*)(void *, uint64_t))v44)(v32, v25);
  uint64_t v43 = v24;
  Tensor.init<A>(collating:)(v41, v23, v24);
  if (v46)
  {
    Sequence.lazy.getter(v39, v35);
    int64_t v27 = v41;
    uint64_t v28 = v42;
    LazySequenceProtocol.map<A>(_:)(closure #2 in WeightedDataSample.init<A>(collating:), 0, v42, v45, WitnessTable);
    v26(v32, v28);
    uint64_t v29 = (uint64_t)v38;
    Tensor.init<A>(collating:)(v27, v36, v43);
    unsigned int v30 = 0;
  }
  else
  {
    unsigned int v30 = 1;
    uint64_t v29 = (uint64_t)v38;
  }
  (*(void (**)(uint64_t))(*(void *)(v39 - 8) + 8))(v40);
  __swift_storeEnumTagSinglePayload(v29, v30, 1, v45);
  return WeightedDataSample.init(features:labels:)((uint64_t)v34, (uint64_t)v33, v29);
}

uint64_t closure #1 in WeightedDataSample.init<A>(collating:)(uint64_t a1)
{
  uint64_t v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (label: Tensor, weight: Tensor?));
  int64_t v2 = *(void *)(*(void *)(v1 - 8) + 64);
  uint64_t v3 = alloca(v2);
  uint64_t v4 = alloca(v2);
  int64_t v5 = *(void *)(*(void *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Tensor?)
                             - 8)
                 + 64);
  uint64_t v6 = alloca(v5);
  uint64_t v7 = alloca(v5);
  uint64_t v18 = &v17;
  uint64_t v8 = a1 + *(int *)(type metadata accessor for WeightedDataSample(0) + 20);
  uint64_t v9 = *(int *)(v1 + 48);
  uint64_t v19 = &v17;
  uint64_t v20 = (uint64_t)&v17 + v9;
  uint64_t v10 = type metadata accessor for Tensor(0);
  uint64_t v11 = *(void *)(v10 - 8);
  (*(void (**)(uint64_t *, uint64_t, uint64_t))(v11 + 16))(&v17, v8, v10);
  uint64_t v12 = v8 + v9;
  uint64_t v13 = v20;
  outlined init with copy of Either<LogisticRegressionClassifier<Float, String>, FullyConnectedNetworkClassifier<Float, String>>(v12, v20, &demangling cache variable for type metadata for Tensor?);
  uint64_t v14 = v13;
  uint64_t v15 = (uint64_t)v18;
  outlined init with take of DataFrame?(v14, (uint64_t)v18, &demangling cache variable for type metadata for Tensor?);
  (*(void (**)(uint64_t *, uint64_t))(v11 + 8))(v19, v10);
  LOBYTE(v10) = __swift_getEnumTagSinglePayload(v15, 1, v10) != 1;
  outlined destroy of Tensor?(v15, &demangling cache variable for type metadata for Tensor?);
  return v10;
}

uint64_t specialized implicit closure #1 in WeightedDataSample.init<A>(collating:)(uint64_t a1)
{
  uint64_t v2 = v1;
  uint64_t v3 = type metadata accessor for Tensor(0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v3 - 8) + 16))(v2, a1, v3);
}

uint64_t specialized implicit closure #2 in WeightedDataSample.init<A>(collating:)(uint64_t a1)
{
  uint64_t v14 = v1;
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (label: Tensor, weight: Tensor?));
  int64_t v3 = *(void *)(*(void *)(v2 - 8) + 64);
  uint64_t v4 = alloca(v3);
  int64_t v5 = alloca(v3);
  uint64_t v6 = a1 + *(int *)(type metadata accessor for WeightedDataSample(0) + 20);
  uint64_t v7 = *(int *)(v2 + 48);
  uint64_t v15 = &v13[v7];
  uint64_t v8 = type metadata accessor for Tensor(0);
  uint64_t v9 = *(void *)(v8 - 8);
  (*(void (**)(unsigned char *, uint64_t, uint64_t))(v9 + 16))(v13, v6, v8);
  uint64_t v10 = v6 + v7;
  uint64_t v11 = v15;
  outlined init with copy of Either<LogisticRegressionClassifier<Float, String>, FullyConnectedNetworkClassifier<Float, String>>(v10, (uint64_t)v15, &demangling cache variable for type metadata for Tensor?);
  (*(void (**)(uint64_t, unsigned char *, uint64_t))(v9 + 32))(v14, v13, v8);
  return outlined destroy of Tensor?((uint64_t)v11, &demangling cache variable for type metadata for Tensor?);
}

uint64_t closure #2 in WeightedDataSample.init<A>(collating:)(uint64_t a1)
{
  uint64_t v21 = v1;
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (label: Tensor, weight: Tensor?));
  int64_t v3 = *(void *)(*(void *)(v2 - 8) + 64);
  uint64_t v4 = alloca(v3);
  int64_t v5 = alloca(v3);
  int64_t v6 = *(void *)(*(void *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Tensor?)
                             - 8)
                 + 64);
  uint64_t v7 = alloca(v6);
  uint64_t v8 = alloca(v6);
  uint64_t v18 = v17;
  uint64_t v9 = a1 + *(int *)(type metadata accessor for WeightedDataSample(0) + 20);
  uint64_t v10 = *(int *)(v2 + 48);
  uint64_t v20 = &v17[v10];
  uint64_t v19 = v17;
  uint64_t v11 = type metadata accessor for Tensor(0);
  uint64_t v12 = *(void *)(v11 - 8);
  (*(void (**)(unsigned char *, uint64_t, uint64_t))(v12 + 16))(v17, v9, v11);
  uint64_t v13 = v9 + v10;
  uint64_t v14 = (uint64_t)v18;
  uint64_t v15 = v20;
  outlined init with copy of Either<LogisticRegressionClassifier<Float, String>, FullyConnectedNetworkClassifier<Float, String>>(v13, (uint64_t)v20, &demangling cache variable for type metadata for Tensor?);
  outlined init with take of DataFrame?((uint64_t)v15, v14, &demangling cache variable for type metadata for Tensor?);
  (*(void (**)(unsigned char *, uint64_t))(v12 + 8))(v19, v11);
  if (__swift_getEnumTagSinglePayload(v14, 1, v11) == 1) {
    BUG();
  }
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v12 + 32))(v21, v14, v11);
}

uint64_t protocol witness for Collatable.init<A>(collating:) in conformance WeightedDataSample(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return WeightedDataSample.init<A>(collating:)(a1, a2, a3);
}

uint64_t static MLCreateError.featureCountMismatch(expected:actual:)()
{
  uint64_t v1 = v0;
  _StringGuts.grow(_:)(46);
  swift_bridgeObjectRelease(0xE000000000000000);
  *(void *)&long long v8 = 0xD000000000000021;
  *((void *)&v8 + 1) = "were found in the input data" + 0x8000000000000000;
  v2._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter(&type metadata for Int, &protocol witness table for Int);
  char object = v2._object;
  String.append(_:)(v2);
  swift_bridgeObjectRelease(object);
  v4._uint64_t countAndFlagsBits = 0x6C6175746361202CLL;
  v4._char object = (void *)0xE900000000000020;
  String.append(_:)(v4);
  v5._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter(&type metadata for Int, &protocol witness table for Int);
  int64_t v6 = v5._object;
  String.append(_:)(v5);
  uint64_t result = swift_bridgeObjectRelease(v6);
  *(_OWORD *)uint64_t v1 = v8;
  *(_OWORD *)(v1 + 16) = 0;
  *(_OWORD *)(v1 + 32) = 0;
  *(unsigned char *)(v1 + 48) = 0;
  return result;
}

uint64_t closure #2 in MLActivityClassifier.DataBatcher.asWeightedSamples(with:classLabels:labels:)(uint64_t *a1, uint64_t *a2)
{
  uint64_t v5 = v2;
  uint64_t v40 = type metadata accessor for Tensor(0);
  uint64_t v38 = *(void *)(v40 - 8);
  int64_t v6 = *(void *)(v38 + 64);
  uint64_t v7 = alloca(v6);
  long long v8 = alloca(v6);
  uint64_t v37 = &v31;
  int64_t v9 = *(void *)(*(void *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ScalarType?)
                             - 8)
                 + 64);
  uint64_t v10 = alloca(v9);
  uint64_t v11 = alloca(v9);
  unint64_t v34 = &v31;
  uint64_t v12 = *a2;
  int64_t v13 = *(void *)(*a2 + 16);
  if (v13)
  {
    uint64_t v35 = v3;
    uint64_t v14 = *a1;
    uint64_t v42 = _swiftEmptyArrayStorage;
    uint64_t v39 = v12;
    swift_bridgeObjectRetain(v12);
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v13, 0);
    if (v14 < 0) {
      BUG();
    }
    uint64_t v15 = v14;
    int64_t v32 = v13;
    uint64_t v36 = v5;
    int64_t v16 = v42;
    uint64_t v17 = 0;
    uint64_t v18 = v40;
    uint64_t v19 = v38;
    uint64_t v33 = v14;
    do
    {
      uint64_t v20 = *(void *)(v39 + 8 * v17 + 32);
      if (v15 >= *(void *)(v20 + 16)) {
        BUG();
      }
      uint64_t v21 = (*(unsigned __int8 *)(v19 + 80) + 32) & ~*(unsigned __int8 *)(v19 + 80);
      uint64_t v31 = *(void *)(v19 + 72);
      (*(void (**)(uint64_t *, uint64_t, uint64_t))(v19 + 16))(v37, v21 + v20 + v15 * v31, v18);
      uint64_t v42 = v16;
      uint64_t v22 = v18;
      unint64_t v23 = v16[2];
      unint64_t v24 = v16[3];
      int64_t v25 = v23 + 1;
      if (v24 >> 1 <= v23)
      {
        int64_t v41 = v23 + 1;
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v24 >= 2, v25, 1);
        int64_t v25 = v41;
        uint64_t v22 = v40;
        int64_t v16 = v42;
      }
      ++v17;
      void v16[2] = v25;
      uint64_t v26 = (char *)v16 + v21 + v31 * v23;
      uint64_t v18 = v22;
      uint64_t v27 = v38;
      (*(void (**)(char *, uint64_t *))(v38 + 32))(v26, v37);
      uint64_t v19 = v27;
      uint64_t v15 = v33;
    }
    while (v32 != v17);
    swift_bridgeObjectRelease(v39);
  }
  else
  {
    int64_t v16 = _swiftEmptyArrayStorage;
  }
  uint64_t v28 = type metadata accessor for ScalarType(0);
  uint64_t v29 = (uint64_t)v34;
  __swift_storeEnumTagSinglePayload((uint64_t)v34, 1, 1, v28);
  return Tensor.init(stacking:alongAxis:scalarType:)(v16, 0, v29);
}

uint64_t closure #3 in MLActivityClassifier.DataBatcher.asWeightedSamples(with:classLabels:labels:)(uint64_t *a1, void *a2, uint64_t a3)
{
  uint64_t v4 = *a1;
  if (*a1)
  {
    uint64_t v14 = v3;
    swift_bridgeObjectRetain((_BYTE)a2);
    swift_bridgeObjectRetain(v4);
    int64_t v6 = specialized Sequence.compactMap<A>(_:)(v4, a2);
    swift_bridgeObjectRelease(v4);
    uint64_t v7 = *((void *)v6 + 2);
    if (v7 == *(void *)(a3 + *(int *)(type metadata accessor for MLActivityClassifier.DataBatcher(0) + 40)))
    {
      uint64_t result = (uint64_t)v14;
      *uint64_t v14 = v6;
      return result;
    }
    swift_bridgeObjectRelease((_BYTE)v6);
  }
  uint64_t v9 = lazy protocol witness table accessor for type MLCreateError and conformance MLCreateError();
  swift_allocError(&type metadata for MLCreateError, v9, 0, 0);
  *(void *)uint64_t v10 = 0xD00000000000002CLL;
  *(void *)(v10 + 8) = "found in the input data" + 0x8000000000000000;
  *(_OWORD *)(v10 + 16) = 0;
  *(_OWORD *)(v10 + 32) = 0;
  *(unsigned char *)(v10 + 48) = 0;
  return swift_willThrow(&type metadata for MLCreateError, v9, v10, v11, v12, v13);
}

uint64_t closure #5 in MLActivityClassifier.DataBatcher.asWeightedSamples(with:classLabels:labels:)(uint64_t *a1, uint64_t a2)
{
  uint64_t v4 = v2;
  int64_t v5 = *(void *)(*(void *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ComputeDevice?)
                             - 8)
                 + 64);
  int64_t v6 = alloca(v5);
  uint64_t v7 = alloca(v5);
  unint64_t v24 = &v22;
  uint64_t v8 = *a1;
  if (*a1
    && (uint64_t v25 = v3,
        uint64_t v9 = v4,
        uint64_t v10 = *(void *)(v8 + 16),
        v10 == *(void *)(a2 + *(int *)(type metadata accessor for MLActivityClassifier.DataBatcher(0) + 40))))
  {
    uint64_t v23 = v8;
    uint64_t v11 = type metadata accessor for ComputeDevice(0);
    uint64_t v12 = (uint64_t)v24;
    __swift_storeEnumTagSinglePayload((uint64_t)v24, 1, 1, v11);
    swift_bridgeObjectRetain(v8);
    uint64_t v13 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [Float]);
    uint64_t v14 = lazy protocol witness table accessor for type FullyConnectedNetworkClassifier<Float, String> and conformance FullyConnectedNetworkClassifier<A, B>(&lazy protocol witness table cache variable for type [Float] and conformance [A], &demangling cache variable for type metadata for [Float], (uint64_t)&protocol conformance descriptor for [A]);
    Tensor.init<A>(_:on:)(&v23, v12, v13, v14);
    uint64_t v15 = type metadata accessor for Tensor(0);
    return __swift_storeEnumTagSinglePayload(v9, 0, 1, v15);
  }
  else
  {
    uint64_t v17 = lazy protocol witness table accessor for type MLCreateError and conformance MLCreateError();
    swift_allocError(&type metadata for MLCreateError, v17, 0, 0);
    *(void *)uint64_t v18 = 0xD000000000000027;
    *(void *)(v18 + 8) = "Unsupported target shape: " + 0x8000000000000000;
    *(_OWORD *)(v18 + 16) = 0;
    *(_OWORD *)(v18 + 32) = 0;
    *(unsigned char *)(v18 + 48) = 0;
    return swift_willThrow(&type metadata for MLCreateError, v17, v18, v19, v20, v21);
  }
}

uint64_t closure #6 in MLActivityClassifier.DataBatcher.asWeightedSamples(with:classLabels:labels:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v27 = a4;
  uint64_t v6 = v4;
  int64_t v7 = *(void *)(*(void *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Tensor?)
                             - 8)
                 + 64);
  uint64_t v8 = alloca(v7);
  uint64_t v9 = alloca(v7);
  uint64_t v10 = type metadata accessor for Tensor(0);
  uint64_t v11 = *(void *)(v10 - 8);
  int64_t v12 = *(void *)(v11 + 64);
  uint64_t v13 = alloca(v12);
  uint64_t v14 = alloca(v12);
  uint64_t v15 = alloca(v12);
  int64_t v16 = alloca(v12);
  if (a1 < 0) {
    BUG();
  }
  if (*(void *)(a3 + 16) <= (unint64_t)a1) {
    BUG();
  }
  uint64_t v31 = &v26;
  uint64_t v30 = a2;
  uint64_t v29 = &v26;
  uint64_t v28 = v6;
  uint64_t v17 = (*(unsigned __int8 *)(v11 + 80) + 32) & ~*(unsigned __int8 *)(v11 + 80);
  uint64_t v18 = a1 * *(void *)(v11 + 72);
  uint64_t v19 = *(void (**)(uint64_t *, uint64_t, uint64_t))(v11 + 16);
  int64_t v32 = &v26;
  uint64_t v20 = v10;
  v19(&v26, v18 + v17 + a3, v10);
  if (*(void *)(v27 + 16) <= (unint64_t)a1) {
    BUG();
  }
  uint64_t v21 = v18 + v17 + v27;
  uint64_t v22 = (uint64_t)v31;
  uint64_t v23 = v21;
  v19(v31, v30, v20);
  uint64_t v24 = (uint64_t)v29;
  v19(v29, v23, v20);
  __swift_storeEnumTagSinglePayload(v24, 0, 1, v20);
  return WeightedDataSample.init(features:labels:)(v22, (uint64_t)v32, v24);
}

uint64_t specialized closure #1 in Sequence<>.uniqued()(uint64_t a1, uint64_t a2)
{
  return a1;
}

uint64_t specialized closure #1 in Sequence<>.uniqued()(uint64_t a1)
{
  return a1;
}

uint64_t specialized Set._isDisjoint<A>(with:)(uint64_t a1, void *a2)
{
  LOBYTE(v2) = 1;
  uint64_t v20 = a2;
  if (!a2[2]) {
    return v2;
  }
  uint64_t v3 = *(void *)(a1 + 16);
  if (!v3) {
    return v2;
  }
  uint64_t v17 = a1 + 32;
  uint64_t v19 = a1;
  swift_bridgeObjectRetain(a1);
  uint64_t v4 = 0;
  uint64_t v18 = v3;
  while (!v20[2])
  {
LABEL_12:
    if (++v4 == v3)
    {
      LOBYTE(v2) = 1;
      uint64_t v21 = v19;
      goto LABEL_15;
    }
  }
  uint64_t v2 = *(void *)(v17 + 16 * v4);
  uint64_t v5 = *(void *)(v17 + 16 * v4 + 8);
  uint64_t v6 = v20;
  Hasher.init(_seed:)(v20[5]);
  swift_bridgeObjectRetain(v5);
  uint64_t v21 = v5;
  String.hash(into:)(v16, v2);
  Swift::Int v7 = Hasher._finalize()();
  uint64_t v8 = ~(-1 << *((unsigned char *)v6 + 32));
  unint64_t v9 = v8 & v7;
  uint64_t v10 = v6[((v8 & (unint64_t)v7) >> 6) + 7];
  if (!_bittest64(&v10, v9))
  {
LABEL_11:
    swift_bridgeObjectRelease(v21);
    uint64_t v3 = v18;
    goto LABEL_12;
  }
  uint64_t v11 = v20[6];
  while (1)
  {
    uint64_t v12 = *(void *)(v11 + 16 * v9);
    uint64_t v13 = *(void *)(v11 + 16 * v9 + 8);
    if (v12 == v2 && v13 == v21) {
      break;
    }
    if (_stringCompareWithSmolCheck(_:_:expecting:)(v12, v13, v2, v21, 0)) {
      break;
    }
    unint64_t v9 = v8 & (v9 + 1);
    uint64_t v14 = v20[(v9 >> 6) + 7];
    if (!_bittest64(&v14, v9)) {
      goto LABEL_11;
    }
  }
  swift_bridgeObjectRelease(v19);
  LODWORD(v2) = 0;
LABEL_15:
  swift_bridgeObjectRelease(v21);
  return v2;
}

void *specialized _copySequenceToContiguousArray<A>(_:)(uint64_t a1)
{
  uint64_t v112 = (unsigned char *)a1;
  uint64_t v101 = type metadata accessor for Date(0);
  uint64_t v90 = *(void *)(v101 - 8);
  int64_t v1 = *(void *)(v90 + 64);
  uint64_t v2 = alloca(v1);
  uint64_t v3 = alloca(v1);
  Swift::String v102 = v87;
  uint64_t v108 = type metadata accessor for DataFrame.Rows(0);
  uint64_t v114 = *(void *)(v108 - 8);
  int64_t v4 = *(void *)(v114 + 64);
  uint64_t v5 = alloca(v4);
  uint64_t v6 = alloca(v4);
  uint64_t v94 = v87;
  Swift::Int v7 = alloca(v4);
  uint64_t v8 = alloca(v4);
  uint64_t v93 = v87;
  unint64_t v9 = alloca(v4);
  uint64_t v10 = alloca(v4);
  int64_t v11 = *(void *)(*(void *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for DataFrame?)
                              - 8)
                  + 64);
  uint64_t v12 = alloca(v11);
  uint64_t v13 = alloca(v11);
  uint64_t v106 = v87;
  uint64_t v113 = type metadata accessor for DataFrame(0);
  uint64_t v14 = *(void *)(v113 - 8);
  int64_t v15 = *(void *)(v14 + 64);
  int64_t v16 = alloca(v15);
  uint64_t v17 = alloca(v15);
  Swift::String v103 = v87;
  uint64_t v18 = alloca(v15);
  uint64_t v19 = alloca(v15);
  char v97 = v87;
  uint64_t v20 = type metadata accessor for MLActivityClassifier.DataBatcher(0);
  int64_t v21 = *(void *)(*(void *)(v20 - 8) + 64);
  uint64_t v22 = alloca(v21);
  uint64_t v23 = alloca(v21);
  uint64_t v100 = v14;
  uint64_t v24 = *(unsigned __int8 *)(v14 + 80);
  outlined init with copy of MLTrainingSessionParameters((uint64_t)v112, (uint64_t)v87, type metadata accessor for MLActivityClassifier.DataBatcher);
  uint64_t v91 = v20;
  uint64_t v104 = *(int *)(v20 + 48);
  uint64_t v25 = *(void *)&v87[v104];
  uint64_t v112 = v87;
  DataFrame.rows.getter();
  uint64_t v26 = DataFrame.Rows.count.getter();
  uint64_t v27 = *(void (**)(unsigned char *, uint64_t))(v114 + 8);
  Swift::String v92 = v87;
  uint64_t v28 = v87;
  uint64_t v105 = v27;
  v27(v87, v108);
  if (v25 < v26)
  {
    uint64_t v109 = 0;
    uint64_t v29 = _swiftEmptyArrayStorage;
    uint64_t v96 = (v24 + 32) & ~v24;
    uint64_t v99 = (char *)_swiftEmptyArrayStorage + v96;
    uint64_t v95 = v24 | 7;
    uint64_t v30 = 0;
    while (1)
    {
      uint64_t v111 = v29;
      uint64_t v31 = v102;
      Date.init()(v28);
      double v110 = Date.timeIntervalSince1970.getter(v28);
      int64_t v32 = *(void (**)(unsigned char *, uint64_t))(v90 + 8);
      v32(v31, v101);
      double v33 = v110 * 1000.0;
      if ((~COERCE__INT64(v110 * 1000.0) & 0x7FF0000000000000) == 0) {
        BUG();
      }
      if (v33 <= -9.223372036854778e18) {
        BUG();
      }
      if (v33 >= 9.223372036854776e18) {
        BUG();
      }
      uint64_t v34 = (uint64_t)v112;
      uint64_t v35 = *(void *)&v112[*(int *)(v91 + 32)];
      uint64_t v36 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [Double]);
      uint64_t v37 = swift_dynamicCastMetatype(v35, v36);
      uint64_t v114 = v30;
      uint64_t v98 = v32;
      if (v37)
      {
        uint64_t v38 = v104;
        uint64_t v39 = *(void *)(v34 + v104);
        BOOL v40 = __OFADD__(1, v39);
        uint64_t v41 = v39 + 1;
        if (v40) {
          BUG();
        }
        int64_t v107 = *(void *)(v34 + v104);
        uint64_t v42 = v93;
        DataFrame.rows.getter();
        uint64_t v43 = DataFrame.Rows.count.getter();
        v105(v42, v108);
        if (v43 < v41) {
          uint64_t v41 = v43;
        }
        *(void *)(v34 + v38) = v41;
        uint64_t v44 = v102;
        Date.init()(v42);
        double v110 = Date.timeIntervalSince1970.getter(v42);
        v98(v44, v101);
        double v45 = v110 * 1000.0;
        if ((~COERCE__INT64(v110 * 1000.0) & 0x7FF0000000000000) == 0) {
          BUG();
        }
        if (v45 <= -9.223372036854778e18) {
          BUG();
        }
        if (v45 >= 9.223372036854776e18) {
          BUG();
        }
        uint64_t v46 = v109;
        specialized MLActivityClassifier.DataBatcher.generateBatch<A>(startingAt:rowCount:seed:_:)(v107, 1, (int)v45);
      }
      else
      {
        uint64_t v47 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [Float]);
        if (!swift_dynamicCastMetatype(v35, v47))
        {
          unint64_t v88 = 0;
          unint64_t v89 = (char *)0xE000000000000000;
          _StringGuts.grow(_:)(24);
          swift_bridgeObjectRelease((_BYTE)v89);
          unint64_t v88 = 0xD000000000000016;
          unint64_t v89 = "ityClassifier+Batching.swift" + 0x8000000000000000;
          v85._uint64_t countAndFlagsBits = _typeName(_:qualified:)(v35, 0);
          char object = (char)v85._object;
          String.append(_:)(v85);
          swift_bridgeObjectRelease(object);
          _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, v88, v89, "CreateML/MLActivityClassifier+Batching.swift", 44, 2, 348, 0);
          BUG();
        }
        uint64_t v48 = v104;
        uint64_t v49 = *(void *)(v34 + v104);
        BOOL v40 = __OFADD__(1, v49);
        uint64_t v50 = v49 + 1;
        if (v40) {
          BUG();
        }
        int64_t v107 = *(void *)(v34 + v104);
        uint64_t v51 = v94;
        DataFrame.rows.getter();
        uint64_t v52 = DataFrame.Rows.count.getter();
        v105(v51, v108);
        if (v52 < v50) {
          uint64_t v50 = v52;
        }
        *(void *)(v34 + v48) = v50;
        unint64_t v53 = v102;
        Date.init()(v51);
        double v110 = Date.timeIntervalSince1970.getter(v51);
        v98(v53, v101);
        double v54 = v110 * 1000.0;
        if ((~COERCE__INT64(v110 * 1000.0) & 0x7FF0000000000000) == 0) {
          BUG();
        }
        if (v54 <= -9.223372036854778e18) {
          BUG();
        }
        if (v54 >= 9.223372036854776e18) {
          BUG();
        }
        uint64_t v46 = v109;
        specialized MLActivityClassifier.DataBatcher.generateBatch<A>(startingAt:rowCount:seed:_:)(v107, 1, (int)v54);
      }
      if (v46)
      {
        uint64_t v30 = v114;
        uint64_t v77 = v113;
        swift_errorRelease(v46);
        uint64_t v76 = v111;
        goto LABEL_46;
      }
      uint64_t v109 = 0;
      uint64_t v55 = (uint64_t)v106;
      uint64_t v30 = v114;
      uint64_t v56 = v113;
      Swift::Int v57 = *(void (**)(char *, char *, uint64_t))(v100 + 32);
      v57(v106, v103, v113);
      __swift_storeEnumTagSinglePayload(v55, 0, 1, v56);
      int EnumTagSinglePayload = __swift_getEnumTagSinglePayload(v55, 1, v56);
      uint64_t v59 = v56;
      uint64_t v60 = (uint64_t)v112;
      if (EnumTagSinglePayload == 1)
      {
        uint64_t v76 = v111;
        goto LABEL_47;
      }
      v57(v97, (char *)v55, v59);
      if (!v30) {
        break;
      }
      char v61 = v111;
      uint64_t v62 = v99;
LABEL_41:
      BOOL v40 = __OFSUB__(v30--, 1);
      if (v40) {
        BUG();
      }
      uint64_t v75 = v57;
      uint64_t v76 = v61;
      uint64_t v77 = v113;
      v75(v62, v97, v113);
      uint64_t v99 = &v62[*(void *)(v100 + 72)];
      uint64_t v114 = *(void *)(v60 + v104);
      unint64_t v78 = v92;
      DataFrame.rows.getter();
      uint64_t v79 = DataFrame.Rows.count.getter();
      uint64_t v28 = v78;
      v105(v78, v108);
      uint64_t v29 = v76;
      if (v114 >= v79) {
        goto LABEL_46;
      }
    }
    if ((v111[3] >> 1) + 0x4000000000000000 < 0) {
      BUG();
    }
    int64_t v63 = v111[3] & 0xFFFFFFFFFFFFFFFELL;
    if (v63 < 2) {
      int64_t v63 = 1;
    }
    uint64_t v64 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<DataFrame>);
    uint64_t v65 = *(void *)(v100 + 72);
    uint64_t v66 = v96;
    char v61 = (void *)swift_allocObject(v64, v96 + v63 * v65, v95);
    size_t v67 = _swift_stdlib_malloc_size(v61);
    if (!v65) {
      BUG();
    }
    uint64_t v68 = v67 - v66;
    uint64_t v69 = v66;
    if (v68 == 0x8000000000000000 && v65 == -1) {
      BUG();
    }
    uint64_t v114 = v68 / v65;
    v61[2] = v63;
    v61[3] = 2 * (v68 / v65);
    uint64_t v70 = (char *)v61 + v66;
    BOOL v71 = v111;
    uint64_t v72 = v111[3] >> 1;
    uint64_t v73 = v72 * v65;
    if (!v111[2])
    {
LABEL_40:
      uint64_t v62 = &v70[v73];
      uint64_t v30 = (v114 & 0x7FFFFFFFFFFFFFFFLL) - v72;
      swift_release();
      uint64_t v60 = (uint64_t)v112;
      goto LABEL_41;
    }
    uint64_t v74 = (char *)v111 + v69;
    if (v61 < v111 || v70 >= &v74[v73])
    {
      swift_arrayInitWithTakeFrontToBack((char *)v61 + v69, v74, v111[3] >> 1, v113);
    }
    else
    {
      if (v61 == v111)
      {
LABEL_39:
        v71[2] = 0;
        goto LABEL_40;
      }
      swift_arrayInitWithTakeBackToFront((char *)v61 + v69, v74, v111[3] >> 1, v113);
    }
    BOOL v71 = v111;
    goto LABEL_39;
  }
  uint64_t v76 = _swiftEmptyArrayStorage;
  uint64_t v30 = 0;
  uint64_t v77 = v113;
LABEL_46:
  uint64_t v80 = (uint64_t)v106;
  __swift_storeEnumTagSinglePayload((uint64_t)v106, 1, 1, v77);
  uint64_t v55 = v80;
  uint64_t v60 = (uint64_t)v112;
LABEL_47:
  outlined destroy of MLActivityClassifier.ModelParameters(v60, type metadata accessor for MLActivityClassifier.DataBatcher);
  outlined destroy of Tensor?(v55, &demangling cache variable for type metadata for DataFrame?);
  unint64_t v81 = v76[3];
  if (v81 >= 2)
  {
    unint64_t v82 = v81 >> 1;
    BOOL v40 = __OFSUB__(v82, v30);
    unint64_t v83 = v82 - v30;
    if (v40) {
      BUG();
    }
    v76[2] = v83;
  }
  return v76;
}

uint64_t partial apply for closure #1 in MLActivityClassifier.Trainer.update(_:using:on:)(uint64_t a1)
{
  return closure #1 in MLActivityClassifier.Trainer.update(_:using:on:)(a1, *(char **)(v1 + 16), *(void *)(v1 + 24), *(void *)(v1 + 32), *(void *)(v1 + 40));
}

uint64_t outlined assign with take of Tensor?(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Tensor?);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v2 - 8) + 40))(a2, a1, v2);
  return a2;
}

uint64_t outlined consume of ClassificationMetricsContainer?(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a1)
  {
    swift_release(a1);
    swift_release(a2);
    return swift_bridgeObjectRelease(a3);
  }
  return result;
}

void *specialized _copySequenceToContiguousArray<A>(_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v42 = a1;
  uint64_t v43 = 0;
  swift_bridgeObjectRetain(a1);
  swift_retain();
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [String]);
  uint64_t v5 = lazy protocol witness table accessor for type FullyConnectedNetworkClassifier<Float, String> and conformance FullyConnectedNetworkClassifier<A, B>(&lazy protocol witness table cache variable for type [String] and conformance [A], &demangling cache variable for type metadata for [String], (uint64_t)&protocol conformance descriptor for [A]);
  UniquedSequence.Iterator.init(base:projection:)((uint64_t)&v42, a2, a3, v4, (uint64_t)&type metadata for String, v5, (uint64_t)&protocol witness table for String);
  uint64_t v6 = v37;
  uint64_t v7 = v38;
  uint64_t v46 = v39;
  uint64_t v52 = v40;
  uint64_t v50 = v41;
  uint64_t v8 = *(void *)(v37 + 16);
  if (v38 == v8)
  {
    unint64_t v9 = _swiftEmptyArrayStorage;
    uint64_t v56 = 0;
  }
  else
  {
    uint64_t v10 = v37 + 40;
    unint64_t v9 = _swiftEmptyArrayStorage;
    uint64_t v55 = &_swiftEmptyArrayStorage[4];
    uint64_t v47 = v8;
    uint64_t v49 = v8 - 1;
    uint64_t v56 = 0;
    uint64_t v53 = v37;
    uint64_t v48 = v37 + 40;
    do
    {
      double v54 = v9;
      int64_t v11 = (uint64_t *)(v10 + 16 * v7);
      unint64_t v12 = v7;
      while (1)
      {
        if (v7 < 0) {
          BUG();
        }
        if (v12 >= *(void *)(v6 + 16)) {
          BUG();
        }
        unint64_t v51 = v12;
        uint64_t v13 = *(v11 - 1);
        uint64_t v14 = *v11;
        uint64_t v37 = v13;
        uint64_t v38 = v14;
        swift_bridgeObjectRetain(v14);
        v46(&v37);
        char v15 = specialized Set._Variant.insert(_:)(&v42, v44, v45);
        swift_bridgeObjectRelease(v43);
        if (v15) {
          break;
        }
        unint64_t v12 = v51 + 1;
        swift_bridgeObjectRelease(v14);
        v11 += 2;
        uint64_t v6 = v53;
        if (v47 == v12)
        {
          unint64_t v9 = v54;
          goto LABEL_23;
        }
      }
      uint64_t v16 = v56;
      if (v56)
      {
        unint64_t v9 = v54;
      }
      else
      {
        uint64_t v17 = v54;
        if ((v54[3] >> 1) + 0x4000000000000000 < 0) {
          BUG();
        }
        int64_t v18 = v54[3] & 0xFFFFFFFFFFFFFFFELL;
        if (v18 < 2) {
          int64_t v18 = 1;
        }
        uint64_t v19 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<String>);
        uint64_t v20 = (void *)swift_allocObject(v19, 16 * v18 + 32, 7);
        uint64_t v21 = (uint64_t)(_swift_stdlib_malloc_size(v20) - 32) / 16;
        uint64_t v22 = v20;
        int v20[2] = v18;
        v20[3] = 2 * v21;
        uint64_t v23 = v17[3] >> 1;
        size_t v24 = 2 * v23;
        if (v17[2])
        {
          uint64_t v25 = v22 + 4;
          if (v22 != v17 || v25 >= &v17[v24 + 4])
          {
            uint64_t v55 = v22;
            uint64_t v56 = v21;
            memmove(v25, v17 + 4, v24 * 8);
            uint64_t v22 = v55;
            uint64_t v21 = v56;
          }
          void v17[2] = 0;
        }
        uint64_t v55 = &v22[v24 + 4];
        uint64_t v26 = (v21 & 0x7FFFFFFFFFFFFFFFLL) - v23;
        uint64_t v27 = v22;
        swift_release();
        uint64_t v16 = v26;
        unint64_t v9 = v27;
      }
      BOOL v28 = __OFSUB__(v16, 1);
      uint64_t v29 = v16 - 1;
      if (v28) {
        BUG();
      }
      uint64_t v56 = v29;
      unint64_t v30 = v51;
      uint64_t v7 = v51 + 1;
      uint64_t v31 = v55;
      *uint64_t v55 = v13;
      v31[1] = v14;
      uint64_t v55 = v31 + 2;
      BOOL v32 = v49 == v30;
      uint64_t v6 = v53;
      uint64_t v10 = v48;
    }
    while (!v32);
  }
LABEL_23:
  swift_release();
  swift_bridgeObjectRelease(v6);
  swift_bridgeObjectRelease(v50);
  unint64_t v33 = v9[3];
  if (v33 >= 2)
  {
    unint64_t v34 = v33 >> 1;
    BOOL v28 = __OFSUB__(v34, v56);
    unint64_t v35 = v34 - v56;
    if (v28) {
      BUG();
    }
    v9[2] = v35;
  }
  return v9;
}

uint64_t specialized _copySequenceToContiguousArray<A>(_:)(double a1, double a2, double a3)
{
  *((double *)&v27 + 1) = a2;
  *(double *)&long double v28 = a3;
  uint64_t v3 = specialized StrideTo.underestimatedCount.getter();
  uint64_t v4 = v3;
  if (v3 <= 0)
  {
    if (v3 < 0) {
      BUG();
    }
    uint64_t v9 = _swiftEmptyArrayStorage[3] >> 1;
    *((void *)&v28 + 1) = _swiftEmptyArrayStorage;
    uint64_t v8 = &_swiftEmptyArrayStorage[4];
    double v12 = a3;
  }
  else
  {
    uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Double>);
    uint64_t v6 = (void *)swift_allocObject(v5, 8 * v4 + 32, 7);
    uint64_t v7 = (uint64_t)(_swift_stdlib_malloc_size(v6) - 32) / 8;
    _OWORD v6[2] = v4;
    v6[3] = 2 * v7;
    *((void *)&v28 + 1) = v6;
    uint64_t v8 = v6 + 4;
    uint64_t v9 = (v7 & 0x7FFFFFFFFFFFFFFFLL) - v4;
    uint64_t v10 = 0;
    double v11 = a1;
    double v12 = *(double *)&v28;
    do
    {
      BOOL v13 = *((double *)&v27 + 1) >= v11;
      if (v12 > 0.0) {
        BOOL v13 = v11 >= *((double *)&v27 + 1);
      }
      if (v13) {
        BUG();
      }
      a1 = (double)(int)++v10;
      *(double *)&long double v27 = v11;
      fma(v26, v27, v28);
      double v12 = *(double *)&v28;
      *v8++ = *(void *)&v27;
      double v11 = (double)(int)v10;
    }
    while (v4 != v10);
  }
  BOOL v14 = *((double *)&v27 + 1) >= a1;
  if (v12 > 0.0) {
    BOOL v14 = a1 >= *((double *)&v27 + 1);
  }
  while (!v14)
  {
    BOOL v15 = __OFADD__(1, v4++);
    if (v15) {
      BUG();
    }
    *(double *)&long double v27 = a1;
    a1 = (double)(int)v4;
    fma(v26, v27, v28);
    if (!v9)
    {
      *(void *)&long double v26 = v4;
      if ((*(void *)(*((void *)&v28 + 1) + 24) >> 1) + 0x4000000000000000 < 0) {
        BUG();
      }
      *((double *)&v26 + 1) = (double)(int)v4;
      int64_t v16 = *(void *)(*((void *)&v28 + 1) + 24) & 0xFFFFFFFFFFFFFFFELL;
      if (v16 < 2) {
        int64_t v16 = 1;
      }
      uint64_t v17 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Double>);
      int64_t v18 = (void *)swift_allocObject(v17, 8 * v16 + 32, 7);
      uint64_t v19 = (uint64_t)(_swift_stdlib_malloc_size(v18) - 32) / 8;
      int v18[2] = v16;
      void v18[3] = 2 * v19;
      uint64_t v20 = *(void *)(*((void *)&v28 + 1) + 24) >> 1;
      if (*(void *)(*((void *)&v28 + 1) + 16))
      {
        uint64_t v21 = v18 + 4;
        if (v18 != *((void **)&v28 + 1) || (unint64_t)v21 >= *((void *)&v28 + 1) + 8 * v20 + 32) {
          memmove(v21, (const void *)(*((void *)&v28 + 1) + 32), 8 * v20);
        }
        *(void *)(*((void *)&v28 + 1) + 16) = 0;
      }
      uint64_t v8 = &v18[v20 + 4];
      uint64_t v9 = (v19 & 0x7FFFFFFFFFFFFFFFLL) - v20;
      swift_release();
      *((void *)&v28 + 1) = v18;
    }
    BOOL v15 = __OFSUB__(v9--, 1);
    if (v15) {
      BUG();
    }
    BOOL v14 = *((double *)&v27 + 1) >= a1;
    void *v8 = *(void *)&v27;
    if (*(double *)&v28 > 0.0) {
      BOOL v14 = a1 >= *((double *)&v27 + 1);
    }
    ++v8;
  }
  uint64_t result = *((void *)&v28 + 1);
  unint64_t v23 = *(void *)(*((void *)&v28 + 1) + 24);
  if (v23 >= 2)
  {
    unint64_t v24 = v23 >> 1;
    BOOL v15 = __OFSUB__(v24, v9);
    unint64_t v25 = v24 - v9;
    if (v15) {
      BUG();
    }
    *(void *)(*((void *)&v28 + 1) + 16) = v25;
  }
  return result;
}

void *specialized _copySequenceToContiguousArray<A>(_:)(void *a1, uint64_t a2)
{
  unint64_t v2 = a1[2];
  unint64_t v3 = v2;
  unint64_t v37 = *(void *)(a2 + 16);
  if (v37 < v2) {
    unint64_t v3 = *(void *)(a2 + 16);
  }
  if (!v3)
  {
    uint64_t v7 = _swiftEmptyArrayStorage;
    uint64_t v14 = _swiftEmptyArrayStorage[3] >> 1;
    if (!v2) {
      goto LABEL_19;
    }
    goto LABEL_18;
  }
  uint64_t v4 = a2;
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, String)>);
  uint64_t v7 = (void *)swift_allocObject(v6, 32 * v3 + 32, 7);
  unint64_t v8 = v3;
  uint64_t v9 = (uint64_t)(_swift_stdlib_malloc_size(v7) - 32) / 32;
  v7[2] = v8;
  v7[3] = 2 * v9;
  uint64_t v10 = v9 & 0x7FFFFFFFFFFFFFFFLL;
  uint64_t v11 = a1[5];
  uint64_t v12 = *(void *)(v4 + 32);
  uint64_t v13 = *(void *)(v4 + 40);
  v7[4] = a1[4];
  void v7[5] = v11;
  v7[6] = v12;
  void v7[7] = v13;
  if (v8 == 1)
  {
    uint64_t v14 = v10 - 1;
    char v15 = v13;
    swift_bridgeObjectRetain(v11);
    swift_bridgeObjectRetain(v15);
    if (v2 == 1) {
      goto LABEL_19;
    }
    goto LABEL_18;
  }
  char v36 = v11;
  unint64_t v30 = a1;
  uint64_t v32 = v10;
  unint64_t v33 = v7;
  if (v2 == 1) {
LABEL_16:
  }
    BUG();
  unint64_t v31 = 1 - v2;
  unint64_t v16 = v8 - 2;
  uint64_t v17 = 56;
  uint64_t v18 = 0;
  unint64_t v34 = v2;
  char v35 = v13;
  while (1)
  {
    unint64_t v19 = v18 + 1;
    if (v18 + 1 >= v2) {
      BUG();
    }
    if (!(v18 + 1 - v37))
    {
      char v29 = v13;
      swift_bridgeObjectRetain(v36);
      swift_bridgeObjectRetain(v29);
      BUG();
    }
    if (v19 >= v37) {
      BUG();
    }
    uint64_t v20 = v30[(unint64_t)v17 / 8];
    uint64_t v21 = *(void *)(v4 + v17 - 8);
    uint64_t v22 = v4;
    uint64_t v23 = *(void *)(v4 + v17);
    v33[(unint64_t)v17 / 4 - 6] = v30[(unint64_t)v17 / 8 - 1];
    v33[(unint64_t)v17 / 4 - 5] = v20;
    v33[(unint64_t)v17 / 4 - 4] = v21;
    v33[(unint64_t)v17 / 4 - 3] = v23;
    if (v16 == v18) {
      break;
    }
    swift_bridgeObjectRetain(v20);
    swift_bridgeObjectRetain(v23);
    v17 += 16;
    ++v18;
    unint64_t v2 = v34;
    uint64_t v4 = v22;
    LOBYTE(v13) = v35;
    if (!(v19 + v31)) {
      goto LABEL_16;
    }
  }
  swift_bridgeObjectRetain(v36);
  swift_bridgeObjectRetain(v35);
  swift_bridgeObjectRetain(v20);
  swift_bridgeObjectRetain(v23);
  uint64_t v14 = v32 - v18 - 2;
  unint64_t v2 = v34;
  uint64_t v7 = v33;
  if (v34 > v37)
  {
LABEL_18:
    if (v2 <= v37) {
      BUG();
    }
  }
LABEL_19:
  unint64_t v24 = v7[3];
  if (v24 >= 2)
  {
    unint64_t v25 = v24 >> 1;
    BOOL v26 = __OFSUB__(v25, v14);
    unint64_t v27 = v25 - v14;
    if (v26) {
      BUG();
    }
    v7[2] = v27;
  }
  return v7;
}

uint64_t partial apply for closure #3 in MLActivityClassifier.DataBatcher.asWeightedSamples(with:classLabels:labels:)(uint64_t *a1)
{
  return closure #3 in MLActivityClassifier.DataBatcher.asWeightedSamples(with:classLabels:labels:)(a1, *(void **)(v1 + 16), *(void *)(v1 + 24));
}

uint64_t partial apply for closure #5 in MLActivityClassifier.DataBatcher.asWeightedSamples(with:classLabels:labels:)(uint64_t *a1)
{
  return closure #5 in MLActivityClassifier.DataBatcher.asWeightedSamples(with:classLabels:labels:)(a1, *(void *)(v1 + 16));
}

uint64_t partial apply for closure #6 in MLActivityClassifier.DataBatcher.asWeightedSamples(with:classLabels:labels:)(uint64_t a1, uint64_t a2)
{
  return closure #6 in MLActivityClassifier.DataBatcher.asWeightedSamples(with:classLabels:labels:)(a1, a2, *(void *)(v2 + 16), *(void *)(v2 + 24));
}

void partial apply for closure #1 in Array<A>.floatTensor(shape:)(float *a1, uint64_t a2)
{
  closure #1 in Array<A>.floatTensor(shape:)(a1, a2, *(void *)(v2 + 16));
}

#error "233DAB: call analysis failed (funcsize=61)"

uint64_t *partial apply for closure #2 in MLActivityClassifier.Trainer.makeDataset(_:_:using:for:)(uint64_t a1, uint64_t *a2)
{
  return closure #2 in MLActivityClassifier.Trainer.makeDataset(_:_:using:for:)(a1, *(void *)(v2 + 16), *(void *)(v2 + 24), *(void **)(v2 + 32), a2);
}

uint64_t outlined consume of String??(uint64_t a1, uint64_t a2)
{
  if (a2 != 2) {
    return swift_bridgeObjectRelease(a2);
  }
  return result;
}

uint64_t outlined destroy of Tensor?(uint64_t a1, uint64_t *a2)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(a2);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t _sSq3mapyqd_0_Sgqd_0_xqd__YKXEqd__YKs5ErrorRd__Ri_d_0_r0_lF11TabularData0D5FrameV_s5NeverO8CreateML24MLDecisionTreeClassifierV15ModelParametersV010ValidationD0OTg503_s8g4ML24ijk3V15lm75V13configuration10validationAE0A12MLComponents07BoostedD13ConfigurationV_11c7Data0N5e12VSgtcfcAE010N21N0OAMcAPmcfu_ApMcfu0_AOXMtTf1ncn_n(uint64_t a1)
{
  uint64_t v21 = v1;
  uint64_t v2 = type metadata accessor for DataFrame(0);
  uint64_t v18 = *(void *)(v2 - 8);
  int64_t v3 = *(void *)(v18 + 64);
  uint64_t v4 = alloca(v3);
  uint64_t v5 = alloca(v3);
  unint64_t v19 = &v17;
  int64_t v6 = *(void *)(*(void *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for DataFrame?)
                             - 8)
                 + 64);
  uint64_t v7 = alloca(v6);
  unint64_t v8 = alloca(v6);
  outlined init with copy of Either<LogisticRegressionClassifier<Float, String>, FullyConnectedNetworkClassifier<Float, String>>(a1, (uint64_t)&v17, &demangling cache variable for type metadata for DataFrame?);
  if (__swift_getEnumTagSinglePayload((uint64_t)&v17, 1, v2) == 1)
  {
    uint64_t v9 = type metadata accessor for MLDecisionTreeClassifier.ModelParameters.ValidationData(0);
    uint64_t v10 = v21;
    uint64_t v11 = 1;
    uint64_t v12 = v9;
  }
  else
  {
    uint64_t v13 = v19;
    uint64_t v14 = v18;
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(v18 + 32))(v19, &v17, v2);
    uint64_t v15 = v21;
    (*(void (**)(uint64_t, uint64_t *, uint64_t))(v14 + 16))(v21, v13, v2);
    uint64_t v20 = type metadata accessor for MLDecisionTreeClassifier.ModelParameters.ValidationData(0);
    swift_storeEnumTagMultiPayload(v15, v20, 2);
    (*(void (**)(uint64_t *, uint64_t))(v14 + 8))(v13, v2);
    uint64_t v10 = v15;
    uint64_t v11 = 0;
    uint64_t v12 = v20;
  }
  return __swift_storeEnumTagSinglePayload(v10, v11, 1, v12);
}

void MLDecisionTreeClassifier.predictions(from:)(uint64_t a1)
{
  int64_t v3 = v2;
  uint64_t v14 = v1;
  uint64_t v5 = type metadata accessor for DataFrame(0);
  uint64_t v13 = *(void *)(v5 - 8);
  int64_t v6 = *(void *)(v13 + 64);
  uint64_t v7 = alloca(v6);
  unint64_t v8 = alloca(v6);
  uint64_t v15 = &v12;
  uint64_t v9 = type metadata accessor for MLDecisionTreeClassifier(0);
  DataFrame.validateContainsColumns(_:context:)(*(Swift::OpaquePointer *)((char *)v3 + *(int *)(v9 + 28)), (Swift::String)__PAIR128__(0xE700000000000000, 0x65727574616546));
  if (!v10)
  {
    AnyTreeClassifierModel.applied(to:eventHandler:)(a1, 0, 0);
    uint64_t v11 = v15;
    DataFrame.subscript.getter(*v3, v3[1]);
    (*(void (**)(uint64_t *, uint64_t))(v13 + 8))(v11, v5);
  }
}

uint64_t type metadata accessor for MLDecisionTreeClassifier(uint64_t a1)
{
  uint64_t result = type metadata singleton initialization cache for MLDecisionTreeClassifier;
  if (!type metadata singleton initialization cache for MLDecisionTreeClassifier) {
    return swift_getSingletonMetadata(a1, &nominal type descriptor for MLDecisionTreeClassifier);
  }
  return result;
}

uint64_t MLDecisionTreeClassifier.predictions(from:)(uint64_t a1, __m128 a2)
{
  uint64_t v15 = v3;
  uint64_t v16 = v2;
  uint64_t v17 = type metadata accessor for DataFrame(0);
  uint64_t v18 = *(void *)(v17 - 8);
  int64_t v4 = *(void *)(v18 + 64);
  uint64_t v5 = alloca(v4);
  int64_t v6 = alloca(v4);
  int64_t v7 = *(void *)(*(void *)(type metadata accessor for AnyColumn(0) - 8) + 64);
  unint64_t v8 = alloca(v7);
  uint64_t v9 = alloca(v7);
  char v10 = *(unsigned char *)(a1 + 8);
  uint64_t v13 = *(void *)a1;
  char v14 = v10;
  outlined copy of Result<_DataTable, Error>(v13, v10);
  DataFrame.init(_:)((uint64_t)&v13);
  uint64_t v11 = v15;
  MLDecisionTreeClassifier.predictions(from:)((uint64_t)&v13);
  if (v11) {
    return (*(uint64_t (**)(uint64_t *, uint64_t))(v18 + 8))(&v13, v17);
  }
  *(double *)a2.i64 = (*(double (**)(uint64_t *, uint64_t))(v18 + 8))(&v13, v17);
  return MLUntypedColumn.init(_:convertArraysToShapedArrays:)((uint64_t)&v13, 1, a2);
}

uint64_t MLDecisionTreeClassifier.evaluation(on:)(uint64_t a1)
{
  int64_t v4 = v1;
  int64_t v5 = *(void *)(*(void *)(type metadata accessor for AnyClassificationMetrics(0) - 8) + 64);
  int64_t v6 = alloca(v5);
  int64_t v7 = alloca(v5);
  uint64_t v8 = type metadata accessor for MLDecisionTreeClassifier(0);
  uint64_t v9 = *(int *)(v8 + 28);
  uint64_t v28 = v2;
  v10._char rawValue = *(void **)(v2 + v9);
  uint64_t v27 = a1;
  DataFrame.validateContainsColumns(_:context:)(v10, (Swift::String)__PAIR128__(0xE700000000000000, 0x65727574616546));
  if (v11) {
    goto LABEL_6;
  }
  char v29 = &v25;
  unint64_t v30 = v4;
  uint64_t v12 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<String>);
  uint64_t inited = (void *)swift_initStackObject(v12, v26);
  inited[2] = 1;
  inited[3] = 2;
  uint64_t v14 = *(int *)(v8 + 24);
  uint64_t v15 = *(void *)(v28 + v14 + 8);
  inited[4] = *(void *)(v28 + v14);
  inited[5] = v15;
  swift_bridgeObjectRetain(v15);
  uint64_t v16 = v27;
  DataFrame.validateContainsColumns(_:context:)((Swift::OpaquePointer)inited, (Swift::String)__PAIR128__(0xE500000000000000, 0x6C6562614CLL));
  if (v11)
  {
    swift_setDeallocating(inited);
    specialized _ContiguousArrayStorage.__deallocating_deinit();
    int64_t v4 = v30;
LABEL_6:
    *int64_t v4 = v11;
    uint64_t v18 = type metadata accessor for MLClassifierMetrics.Contents(0);
    uint64_t v19 = 2;
    uint64_t v20 = v4;
    uint64_t v21 = v18;
    return swift_storeEnumTagMultiPayload(v20, v21, v19);
  }
  swift_setDeallocating(inited);
  specialized _ContiguousArrayStorage.__deallocating_deinit();
  uint64_t v17 = v29;
  AnyTreeClassifierModel.computeMetrics(on:)(v16);
  uint64_t v23 = (uint64_t)v17;
  uint64_t v24 = (uint64_t)v30;
  outlined init with take of MLClassifierMetrics(v23, (uint64_t)v30, type metadata accessor for AnyClassificationMetrics);
  uint64_t v20 = (void *)v24;
  uint64_t v21 = type metadata accessor for MLClassifierMetrics.Contents(0);
  uint64_t v19 = 0;
  return swift_storeEnumTagMultiPayload(v20, v21, v19);
}

{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  int64_t v4;
  void *v5;
  void *v6;
  char v7;
  uint64_t v9;
  char v10;
  uint64_t v11;

  uint64_t v11 = v1;
  uint64_t v2 = type metadata accessor for DataFrame(0);
  uint64_t v3 = *(void *)(v2 - 8);
  int64_t v4 = *(void *)(v3 + 64);
  int64_t v5 = alloca(v4);
  int64_t v6 = alloca(v4);
  int64_t v7 = *(unsigned char *)(a1 + 8);
  uint64_t v9 = *(void *)a1;
  Swift::OpaquePointer v10 = v7;
  outlined copy of Result<_DataTable, Error>(v9, v7);
  DataFrame.init(_:)((uint64_t)&v9);
  MLDecisionTreeClassifier.evaluation(on:)((uint64_t)&v9);
  return (*(uint64_t (**)(uint64_t *, uint64_t))(v3 + 8))(&v9, v2);
}

uint64_t MLDecisionTreeClassifier.write(to:metadata:)(uint64_t a1, uint64_t *a2)
{
  uint64_t v63 = v2;
  uint64_t v62 = v3;
  uint64_t v61 = a1;
  int64_t v4 = *(void *)(*(void *)(type metadata accessor for AnyTreeClassifierModel(0) - 8) + 64);
  int64_t v5 = alloca(v4);
  int64_t v6 = alloca(v4);
  uint64_t v45 = &v40;
  uint64_t v54 = type metadata accessor for Model(0);
  uint64_t v53 = *(void *)(v54 - 8);
  int64_t v7 = *(void *)(v53 + 64);
  uint64_t v8 = alloca(v7);
  uint64_t v9 = alloca(v7);
  uint64_t v42 = &v40;
  uint64_t v10 = type metadata accessor for URL(0);
  uint64_t v11 = *(void *)(v10 - 8);
  int64_t v12 = *(void *)(v11 + 64);
  uint64_t v13 = alloca(v12);
  uint64_t v14 = alloca(v12);
  uint64_t v47 = *a2;
  uint64_t v43 = a2[1];
  unint64_t v48 = a2[2];
  uint64_t v49 = (char *)a2[3];
  uint64_t v50 = a2[4];
  uint64_t v51 = a2[5];
  uint64_t v46 = a2[6];
  unint64_t v52 = a2[7];
  uint64_t v15 = a2[8];
  uint64_t v16 = v63;
  uint64_t result = static _ValidationUtilities.validateWriteLocation(atURL:defaultName:fileExtension:)(v61, 0xD000000000000016, (unint64_t)("count mismatch, expected " + 0x8000000000000000), 0x6C65646F6D6C6DLL, (void *)0xE700000000000000);
  if (!v16)
  {
    uint64_t v63 = 0;
    uint64_t v56 = &v40;
    uint64_t v57 = v10;
    uint64_t v55 = v11;
    outlined init with copy of MLTrainingSessionParameters(v62, (uint64_t)v45, type metadata accessor for AnyTreeClassifierModel);
    uint64_t v18 = v43;
    uint64_t v44 = v15;
    if (v43)
    {
      uint64_t v19 = v47;
      uint64_t v61 = v43;
      uint64_t v20 = v48;
      unint64_t v21 = v48;
      uint64_t v22 = (uint64_t)v49;
      uint64_t v60 = v49;
      uint64_t v23 = v50;
      uint64_t v24 = v50;
      uint64_t v25 = v51;
      uint64_t v58 = v51;
      uint64_t v26 = v46;
      uint64_t v27 = v46;
      uint64_t v28 = v52;
      unint64_t v59 = v52;
      uint64_t v62 = v15;
      uint64_t v29 = v47;
    }
    else
    {
      unint64_t v30 = NSFullUserName();
      unint64_t v31 = v30;
      uint64_t v29 = static String._unconditionallyBridgeFromObjectiveC(_:)(v31);
      uint64_t v61 = v32;

      uint64_t v60 = "RandomForestRegressor" + 0x8000000000000000;
      unint64_t v21 = 0xD000000000000033;
      unint64_t v59 = 0xE100000000000000;
      uint64_t v27 = 49;
      uint64_t v24 = 0;
      uint64_t v58 = 0;
      uint64_t v62 = 0;
      uint64_t v26 = v46;
      uint64_t v19 = v47;
      uint64_t v20 = v48;
      uint64_t v22 = (uint64_t)v49;
      uint64_t v23 = v50;
      uint64_t v25 = v51;
      uint64_t v28 = v52;
    }
    v41[0] = v29;
    v41[1] = v61;
    v41[2] = v21;
    v41[3] = v60;
    void v41[4] = v24;
    v41[5] = v58;
    v41[6] = v27;
    v41[7] = v59;
    char v41[8] = v62;
    outlined copy of MLModelMetadata?(v19, v18, v20, v22, v23, v25, v26, v28, v44);
    unint64_t v33 = v42;
    uint64_t v34 = (uint64_t)v45;
    uint64_t v35 = v63;
    specialized CoreMLExportable.export(metadata:)((uint64_t)v41);
    if (v35)
    {
      uint64_t v63 = v35;
      swift_bridgeObjectRelease(v59);
      swift_bridgeObjectRelease((_BYTE)v60);
      swift_bridgeObjectRelease(v61);
      swift_bridgeObjectRelease(v58);
      swift_bridgeObjectRelease(v62);
      outlined destroy of MLActivityClassifier.ModelParameters(v34, type metadata accessor for AnyTreeClassifierModel);
      uint64_t v36 = v55;
      uint64_t v37 = v57;
      uint64_t v39 = v56;
    }
    else
    {
      swift_bridgeObjectRelease(v59);
      swift_bridgeObjectRelease((_BYTE)v60);
      swift_bridgeObjectRelease(v61);
      swift_bridgeObjectRelease(v58);
      swift_bridgeObjectRelease(v62);
      outlined destroy of MLActivityClassifier.ModelParameters(v34, type metadata accessor for AnyTreeClassifierModel);
      uint64_t v38 = v56;
      Model.write(to:)(v56);
      uint64_t v63 = 0;
      uint64_t v36 = v55;
      (*(void (**)(uint64_t *, uint64_t))(v53 + 8))(v33, v54);
      uint64_t v39 = v38;
      uint64_t v37 = v57;
    }
    return (*(uint64_t (**)(uint64_t *, uint64_t))(v36 + 8))(v39, v37);
  }
  return result;
}

uint64_t MLDecisionTreeClassifier.write(toFile:metadata:)(uint64_t a1, uint64_t a2, long long *a3)
{
  uint64_t v23 = v3;
  uint64_t v25 = a2;
  uint64_t v24 = a1;
  uint64_t v26 = type metadata accessor for URL.DirectoryHint(0);
  uint64_t v27 = *(void *)(v26 - 8);
  int64_t v5 = *(void *)(v27 + 64);
  int64_t v6 = alloca(v5);
  int64_t v7 = alloca(v5);
  int64_t v8 = *(void *)(*(void *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for URL?)
                             - 8)
                 + 64);
  uint64_t v9 = alloca(v8);
  uint64_t v10 = alloca(v8);
  uint64_t v11 = type metadata accessor for URL(0);
  uint64_t v29 = *(void *)(v11 - 8);
  int64_t v12 = *(void *)(v29 + 64);
  uint64_t v13 = alloca(v12);
  uint64_t v14 = alloca(v12);
  uint64_t v28 = *((void *)a3 + 8);
  long long v19 = *a3;
  long long v20 = a3[1];
  long long v21 = a3[2];
  long long v22 = a3[3];
  uint64_t v30 = v11;
  __swift_storeEnumTagSinglePayload((uint64_t)v17, 1, 1, v11);
  (*(void (**)(_OWORD *, void, uint64_t))(v27 + 104))(v17, enum case for URL.DirectoryHint.inferFromPath(_:), v26);
  uint64_t v15 = v25;
  swift_bridgeObjectRetain(v25);
  URL.init(filePath:directoryHint:relativeTo:)(v24, v15, v17, v17);
  v17[0] = v19;
  v17[1] = v20;
  void v17[2] = v21;
  v17[3] = v22;
  uint64_t v18 = v28;
  MLDecisionTreeClassifier.write(to:metadata:)((uint64_t)v17, (uint64_t *)v17);
  return (*(uint64_t (**)(_OWORD *, uint64_t))(v29 + 8))(v17, v30);
}

id MLDecisionTreeClassifier.model.getter()
{
  uint64_t v1 = type metadata accessor for MLDecisionTreeClassifier(0);
  return *(id *)(v0 + *(int *)(v1 + 20));
}

unint64_t MLDecisionTreeClassifier.description.getter()
{
  return MLDecisionTreeClassifier.debugDescription.getter();
}

unint64_t MLDecisionTreeClassifier.debugDescription.getter()
{
  uint64_t v1 = v0;
  v25._char object = (void *)type metadata accessor for MLClassifierMetrics.Contents(0);
  int64_t v2 = *(void *)(*((void *)v25._object - 1) + 64);
  uint64_t v3 = alloca(v2);
  int64_t v4 = alloca(v2);
  uint64_t v5 = type metadata accessor for MLDecisionTreeClassifier(0);
  v25._uint64_t countAndFlagsBits = MLDecisionTreeClassifier.ModelParameters.description.getter();
  int64_t v7 = v6;
  v22._uint64_t countAndFlagsBits = MLClassifierMetrics.description.getter();
  v22._char object = v8;
  uint64_t v9 = *(int *)(v5 + 40);
  uint64_t v10 = v7;
  outlined init with copy of MLTrainingSessionParameters(v1 + v9, (uint64_t)&v20, type metadata accessor for MLClassifierMetrics.Contents);
  LODWORD(v7) = swift_getEnumCaseMultiPayload(&v20, v25._object);
  outlined destroy of MLActivityClassifier.ModelParameters((uint64_t)&v20, type metadata accessor for MLClassifierMetrics.Contents);
  v25._char object = (void *)MLClassifierMetrics.description.getter();
  int64_t v12 = v11;
  unint64_t v23 = 0xD000000000000023;
  uint64_t v24 = "DecisionTreeClassifier" + 0x8000000000000000;
  v13._uint64_t countAndFlagsBits = v25._countAndFlagsBits;
  v25._uint64_t countAndFlagsBits = (uint64_t)v10;
  v13._char object = v10;
  String.append(_:)(v13);
  v21._uint64_t countAndFlagsBits = 0xD00000000000001ELL;
  v21._char object = "ActivityClassifier\n\nParameters\n" + 0x8000000000000000;
  char object = (char)v22._object;
  String.append(_:)(v22);
  char v15 = (char)v21._object;
  String.append(_:)(v21);
  swift_bridgeObjectRelease(v15);
  if (v7 > 1)
  {
    char v18 = object;
  }
  else
  {
    v21._uint64_t countAndFlagsBits = 0xD000000000000020;
    v21._char object = "\nPerformance on Training Data\n" + 0x8000000000000000;
    v16._uint64_t countAndFlagsBits = (uint64_t)v25._object;
    v16._char object = v12;
    String.append(_:)(v16);
    char v17 = (char)v21._object;
    String.append(_:)(v21);
    swift_bridgeObjectRelease(object);
    char v18 = (char)v12;
    LOBYTE(v12) = v17;
  }
  swift_bridgeObjectRelease(v18);
  swift_bridgeObjectRelease((_BYTE)v12);
  swift_bridgeObjectRelease(v25._countAndFlagsBits);
  return v23;
}

NSAttributedString MLDecisionTreeClassifier.playgroundDescription.getter()
{
  uint64_t v1 = v0;
  uint64_t v2 = type metadata accessor for NSAttributedString();
  v3._uint64_t countAndFlagsBits = MLDecisionTreeClassifier.debugDescription.getter();
  v3._char object = v4;
  result.super.Class isa = NSAttributedString.__allocating_init(string:)(v3).super.isa;
  v1[3].super.Class isa = (Class)v2;
  v1->super.Class isa = result.super.isa;
  return result;
}

void key path setter for MLDecisionTreeClassifier.model : MLDecisionTreeClassifier(id *a1)
{
  id v1 = *a1;
  MLDecisionTreeClassifier.model.setter((uint64_t)v1);
}

void MLDecisionTreeClassifier.model.setter(uint64_t a1)
{
  uint64_t v2 = *(int *)(type metadata accessor for MLDecisionTreeClassifier(0) + 20);

  *(void *)(v1 + v2) = a1;
}

void (*MLDecisionTreeClassifier.model.modify(uint64_t a1))(uint64_t a1, char a2)
{
  *(void *)(a1 + 8) = v1;
  uint64_t v3 = *(int *)(type metadata accessor for MLDecisionTreeClassifier(0) + 20);
  *(_DWORD *)(a1 + 16) = v3;
  int64_t v4 = *(void **)(v1 + v3);
  *(void *)a1 = v4;
  v4;
  return MLActivityClassifier.model.modify;
}

uint64_t MLDecisionTreeClassifier.targetColumn.getter()
{
  uint64_t v1 = *(int *)(type metadata accessor for MLDecisionTreeClassifier(0) + 24);
  uint64_t v2 = *(void *)(v0 + v1);
  swift_bridgeObjectRetain(*(void *)(v0 + v1 + 8));
  return v2;
}

uint64_t MLDecisionTreeClassifier.targetColumn.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(int *)(type metadata accessor for MLDecisionTreeClassifier(0) + 24);
  uint64_t result = swift_bridgeObjectRelease(*(void *)(v2 + v3 + 8));
  *(void *)(v2 + v3) = a1;
  *(void *)(v2 + v3 + 8) = a2;
  return result;
}

void (*MLDecisionTreeClassifier.targetColumn.modify())()
{
  return MLBoostedTreeRegressor.ModelParameters.maxDepth.modify;
}

uint64_t MLDecisionTreeClassifier.featureColumns.getter()
{
  uint64_t v1 = type metadata accessor for MLDecisionTreeClassifier(0);
  return swift_bridgeObjectRetain(*(void *)(v0 + *(int *)(v1 + 28)));
}

uint64_t MLDecisionTreeClassifier.featureColumns.setter(uint64_t a1)
{
  uint64_t v2 = *(int *)(type metadata accessor for MLDecisionTreeClassifier(0) + 28);
  uint64_t result = swift_bridgeObjectRelease(*(void *)(v1 + v2));
  *(void *)(v1 + v2) = a1;
  return result;
}

void (*MLDecisionTreeClassifier.featureColumns.modify())()
{
  return MLBoostedTreeRegressor.ModelParameters.maxDepth.modify;
}

uint64_t MLDecisionTreeClassifier.modelParameters.getter()
{
  uint64_t v2 = v0;
  uint64_t v3 = type metadata accessor for MLDecisionTreeClassifier(0);
  return outlined init with copy of MLDecisionTreeClassifier.ModelParameters(v1 + *(int *)(v3 + 32), v2);
}

uint64_t MLDecisionTreeClassifier.trainingMetrics.getter()
{
  uint64_t v2 = v0;
  uint64_t v3 = type metadata accessor for MLDecisionTreeClassifier(0);
  return outlined init with copy of MLTrainingSessionParameters(v1 + *(int *)(v3 + 36), v2, type metadata accessor for MLClassifierMetrics);
}

uint64_t MLDecisionTreeClassifier.validationMetrics.getter()
{
  uint64_t v2 = v0;
  uint64_t v3 = type metadata accessor for MLDecisionTreeClassifier(0);
  return outlined init with copy of MLTrainingSessionParameters(v1 + *(int *)(v3 + 40), v2, type metadata accessor for MLClassifierMetrics);
}

uint64_t static MLDecisionTreeClassifier._defaultSessionParameters.getter()
{
  uint64_t v1 = v0;
  if (one-time initialization token for _defaultSessionParameters != -1) {
    swift_once(&one-time initialization token for _defaultSessionParameters, one-time initialization function for _defaultSessionParameters);
  }
  uint64_t v2 = type metadata accessor for MLTrainingSessionParameters(0);
  uint64_t v3 = __swift_project_value_buffer(v2, (uint64_t)static MLDecisionTreeClassifier._defaultSessionParameters);
  return outlined init with copy of MLTrainingSessionParameters(v3, v1, type metadata accessor for MLTrainingSessionParameters);
}

uint64_t MLDecisionTreeClassifier.init(_:targetColumn:featureColumns:parameters:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  v6[7] = a6;
  void v6[6] = a5;
  void v6[5] = a4;
  void v6[4] = a3;
  v6[3] = a2;
  _OWORD v6[2] = a1;
  return swift_task_switch(MLDecisionTreeClassifier.init(_:targetColumn:featureColumns:parameters:), 0, 0);
}

uint64_t MLDecisionTreeClassifier.init(_:targetColumn:featureColumns:parameters:)()
{
  uint64_t v14 = *(void *)(v0 + 48);
  long long v13 = *(_OWORD *)(v0 + 32);
  uint64_t v1 = *(void *)(v0 + 16);
  uint64_t v2 = (int *)type metadata accessor for MLDecisionTreeClassifier(0);
  *(void *)(v0 + 64) = v2;
  *(_DWORD *)(v0 + 96) = v2[9];
  MLClassifierMetrics.init()();
  uint64_t v3 = v2[10];
  *(_DWORD *)(v0 + 100) = v3;
  uint64_t v4 = lazy protocol witness table accessor for type MLCreateError and conformance MLCreateError();
  uint64_t v5 = swift_allocError(&type metadata for MLCreateError, v4, 0, 0);
  *(void *)uint64_t v6 = 0xD0000000000000C0;
  *(void *)(v6 + 8) = "essor\n\nParameters\n" + 0x8000000000000000;
  *(_OWORD *)(v6 + 16) = 0;
  *(_OWORD *)(v6 + 32) = 0;
  *(unsigned char *)(v6 + 48) = 0;
  *(void *)(v1 + v3) = v5;
  uint64_t v7 = type metadata accessor for MLClassifierMetrics.Contents(0);
  swift_storeEnumTagMultiPayload(v1 + v3, v7, 2);
  uint64_t v8 = v2[7];
  *(_DWORD *)(v0 + 104) = v8;
  *(void *)(v1 + v8) = v14;
  uint64_t v9 = v2[6];
  *(_DWORD *)(v0 + 108) = v9;
  *(_OWORD *)(v1 + v9) = v13;
  uint64_t v10 = (uint64_t (*)(void))((char *)&async function pointer to specialized CoreMLExportable.exportAsCoreMLModel()
                          + async function pointer to specialized CoreMLExportable.exportAsCoreMLModel());
  uint64_t v11 = (void *)swift_task_alloc(dword_3AE24C);
  *(void *)(v0 + 72) = v11;
  *uint64_t v11 = v0;
  v11[1] = MLDecisionTreeClassifier.init(_:targetColumn:featureColumns:parameters:);
  return v10();
}

{
  uint64_t v0;
  uint64_t v1;
  long long *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  long long v6;
  long long v7;
  long long v8;

  uint64_t v1 = *(void *)(v0 + 64);
  uint64_t v2 = *(long long **)(v0 + 56);
  uint64_t v3 = *(void *)(v0 + 16);
  uint64_t v4 = *(void *)(v0 + 24);
  *(void *)(v3 + *(int *)(v1 + 20)) = *(void *)(v0 + 88);
  outlined init with take of MLClassifierMetrics(v4, v3, type metadata accessor for AnyTreeClassifierModel);
  uint64_t v5 = *(int *)(v1 + 32);
  uint64_t v6 = *v2;
  uint64_t v7 = v2[1];
  uint64_t v8 = v2[2];
  *(_OWORD *)(v3 + v5 + 48) = v2[3];
  *(_OWORD *)(v3 + v5 + 32) = v8;
  *(_OWORD *)(v3 + v5 + 16) = v7;
  *(_OWORD *)(v3 + v5) = v6;
  return (*(uint64_t (**)(void))(v0 + 8))();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;

  uint64_t v7 = *(int *)(v0 + 108);
  uint64_t v6 = *(int *)(v0 + 104);
  uint64_t v1 = *(void *)(v0 + 16);
  uint64_t v2 = *(void *)(v0 + 24);
  uint64_t v3 = v1 + *(int *)(v0 + 100);
  uint64_t v4 = v1 + *(int *)(v0 + 96);
  outlined destroy of MLDecisionTreeClassifier.ModelParameters(*(void *)(v0 + 56));
  outlined destroy of MLActivityClassifier.ModelParameters(v2, type metadata accessor for AnyTreeClassifierModel);
  swift_bridgeObjectRelease(*(void *)(v1 + v7 + 8));
  swift_bridgeObjectRelease(*(void *)(v1 + v6));
  outlined destroy of MLActivityClassifier.ModelParameters(v4, type metadata accessor for MLClassifierMetrics);
  outlined destroy of MLActivityClassifier.ModelParameters(v3, type metadata accessor for MLClassifierMetrics);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t MLDecisionTreeClassifier.init(_:targetColumn:featureColumns:parameters:)(uint64_t a1)
{
  uint64_t v5 = *(void *)(*v2 + 72);
  uint64_t v4 = *v2;
  *(void *)(*v2 + 80) = v1;
  swift_task_dealloc(v5);
  if (v1)
  {
    uint64_t v6 = MLDecisionTreeClassifier.init(_:targetColumn:featureColumns:parameters:);
  }
  else
  {
    *(void *)(v4 + 88) = a1;
    uint64_t v6 = MLDecisionTreeClassifier.init(_:targetColumn:featureColumns:parameters:);
  }
  return swift_task_switch(v6, 0, 0);
}

uint64_t MLDecisionTreeClassifier.init(trainingData:targetColumn:featureColumns:parameters:)(void (*a1)(uint64_t *, uint64_t, uint64_t), uint64_t a2, char *a3, void (*a4)(unsigned char *, void *, uint64_t), uint64_t a5)
{
  uint64_t v203 = a4;
  _ = a3;
  uint64_t v7 = v5;
  v208._uint64_t countAndFlagsBits = a2;
  uint64_t v202 = v6;
  uint64_t v211 = a5;
  uint64_t v207 = a1;
  int64_t v8 = *(void *)(*(void *)(type metadata accessor for AnyClassificationMetrics(0) - 8) + 64);
  uint64_t v9 = alloca(v8);
  uint64_t v10 = alloca(v8);
  uint64_t v183 = v165;
  uint64_t v11 = alloca(v8);
  int64_t v12 = alloca(v8);
  uint64_t v179 = v165;
  int64_t v13 = *(void *)(*(void *)(type metadata accessor for MLClassifierMetrics(0) - 8) + 64);
  uint64_t v14 = alloca(v13);
  char v15 = alloca(v13);
  uint64_t v184 = v165;
  Swift::String v16 = alloca(v13);
  char v17 = alloca(v13);
  uint64_t v180 = v165;
  uint64_t v177 = *(void *)(type metadata accessor for AnyTreeClassifierModel(0) - 8);
  int64_t v18 = *(void *)(v177 + 64);
  long long v19 = alloca(v18);
  uint64_t v20 = alloca(v18);
  char v175 = v165;
  int64_t v176 = v18;
  Swift::String v21 = alloca(v18);
  Swift::String v22 = alloca(v18);
  uint64_t v206 = v165;
  int64_t v23 = *(void *)(*(void *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for DataFrame?)
                              - 8)
                  + 64);
  uint64_t v24 = alloca(v23);
  Swift::String v25 = alloca(v23);
  uint64_t v172 = v165;
  int64_t v26 = *(void *)(*(void *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AnyColumn?)
                              - 8)
                  + 64);
  uint64_t v27 = alloca(v26);
  uint64_t v28 = alloca(v26);
  uint64_t v199 = (uint64_t)v165;
  uint64_t v188 = type metadata accessor for AnyColumn(0);
  int64_t v29 = *(void *)(*(void *)(v188 - 8) + 64);
  uint64_t v30 = alloca(v29);
  unint64_t v31 = alloca(v29);
  char v192 = v165;
  uint64_t v32 = alloca(v29);
  unint64_t v33 = alloca(v29);
  uint64_t v196 = v165;
  uint64_t v34 = alloca(v29);
  uint64_t v35 = alloca(v29);
  uint64_t v198 = (uint64_t)v165;
  int64_t v36 = *(void *)(*(void *)(type metadata accessor for AnyTreeClassifier(0) - 8) + 64);
  uint64_t v37 = alloca(v36);
  uint64_t v38 = alloca(v36);
  uint64_t v205 = v165;
  uint64_t v214 = type metadata accessor for DataFrame(0);
  uint64_t v201 = *(void *)(v214 - 8);
  int64_t v39 = *(void *)(v201 + 64);
  uint64_t v40 = alloca(v39);
  uint64_t v41 = alloca(v39);
  uint64_t v182 = v165;
  uint64_t v42 = alloca(v39);
  uint64_t v43 = alloca(v39);
  Swift::String v195 = (void (*)(uint64_t *, uint64_t, uint64_t))v165;
  uint64_t v44 = alloca(v39);
  uint64_t v45 = alloca(v39);
  uint64_t v191 = v165;
  uint64_t v46 = alloca(v39);
  uint64_t v47 = alloca(v39);
  uint64_t v194 = v165;
  uint64_t v213 = type metadata accessor for MLDecisionTreeClassifier.ModelParameters.ValidationData(0);
  int64_t v48 = *(void *)(*(void *)(v213 - 8) + 64);
  uint64_t v49 = alloca(v48);
  uint64_t v50 = alloca(v48);
  uint64_t v216 = (void (*)(uint64_t, uint64_t))v165;
  uint64_t v197 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (training: DataFrame, validation: DataFrame?));
  int64_t v51 = *(void *)(*(void *)(v197 - 8) + 64);
  unint64_t v52 = alloca(v51);
  uint64_t v53 = alloca(v51);
  uint64_t v181 = v165;
  uint64_t v54 = alloca(v51);
  uint64_t v55 = alloca(v51);
  uint64_t v178 = v165;
  uint64_t v56 = alloca(v51);
  uint64_t v57 = alloca(v51);
  unint64_t v187 = v165;
  uint64_t v58 = alloca(v51);
  unint64_t v59 = alloca(v51);
  uint64_t v174 = v165;
  uint64_t v60 = alloca(v51);
  uint64_t v61 = alloca(v51);
  uint64_t v204 = v165;
  uint64_t v62 = alloca(v51);
  uint64_t v63 = alloca(v51);
  uint64_t v215 = v165;
  uint64_t v209 = type metadata accessor for BoostedTreeConfiguration(0);
  v208._char object = *(void **)(v209 - 8);
  int64_t v64 = *((void *)v208._object + 8);
  uint64_t v65 = alloca(v64);
  uint64_t v66 = alloca(v64);
  uint64_t v173 = v165;
  size_t v67 = alloca(v64);
  uint64_t v68 = alloca(v64);
  uint64_t v69 = type metadata accessor for MLDecisionTreeClassifier(0);
  uint64_t v185 = (uint64_t)v7 + *(int *)(v69 + 36);
  MLClassifierMetrics.init()();
  uint64_t v189 = v69;
  uint64_t v70 = (void *)((char *)v7 + *(int *)(v69 + 40));
  uint64_t v71 = lazy protocol witness table accessor for type MLCreateError and conformance MLCreateError();
  uint64_t v72 = swift_allocError(&type metadata for MLCreateError, v71, 0, 0);
  *(void *)uint64_t v73 = 0xD0000000000000C0;
  *(void *)(v73 + 8) = "essor\n\nParameters\n" + 0x8000000000000000;
  *(_OWORD *)(v73 + 16) = 0;
  *(_OWORD *)(v73 + 32) = 0;
  *(unsigned char *)(v73 + 48) = 0;
  uint64_t v190 = v7;
  *uint64_t v70 = v72;
  uint64_t v74 = type metadata accessor for MLClassifierMetrics.Contents(0);
  uint64_t v186 = v70;
  uint64_t v193 = v74;
  swift_storeEnumTagMultiPayload(v70, v74, 2);
  uint64_t v75 = v211;
  outlined init with copy of MLDecisionTreeClassifier.ModelParameters(v211, (uint64_t)v166);
  BoostedTreeConfiguration.init()();
  BoostedTreeConfiguration.maximumIterations.setter(1);
  BoostedTreeConfiguration.learningRate.setter(1.0);
  BoostedTreeConfiguration.maximumDepth.setter(*(void *)&v166[0]);
  BoostedTreeConfiguration.minimumLossReduction.setter(v167);
  double v76 = v168;
  BoostedTreeConfiguration.minimumChildWeight.setter(v168);
  uint64_t v210 = v165;
  BoostedTreeConfiguration.randomSeed.setter(v169);
  outlined destroy of MLDecisionTreeClassifier.ModelParameters((uint64_t)v166);
  outlined init with copy of Either<LogisticRegressionClassifier<Float, String>, FullyConnectedNetworkClassifier<Float, String>>(v75 + 8, (uint64_t)&v170, &demangling cache variable for type metadata for Any?);
  if (!v171) {
    BUG();
  }
  uint64_t v77 = v215;
  unint64_t v78 = (char *)v215 + *(int *)(v197 + 48);
  outlined init with take of Any(&v170, v166);
  uint64_t v79 = (uint64_t)v78;
  swift_dynamicCast(v216, v166, (char *)&type metadata for Any + 8, v213, 7);
  uint64_t v80 = (uint64_t)v78;
  unint64_t v81 = v207;
  uint64_t v82 = v202;
  MLDecisionTreeClassifier.ModelParameters.ValidationData.generateDataFrames(trainingData:)((uint64_t)v77, v80, v207);
  if (v82)
  {
    swift_bridgeObjectRelease((_BYTE)_);
    swift_bridgeObjectRelease((_BYTE)v203);
    outlined destroy of MLDecisionTreeClassifier.ModelParameters(v211);
    (*(void (**)(void (*)(uint64_t *, uint64_t, uint64_t), uint64_t))(v201 + 8))(v81, v214);
    outlined destroy of MLActivityClassifier.ModelParameters((uint64_t)v216, type metadata accessor for MLDecisionTreeClassifier.ModelParameters.ValidationData);
LABEL_4:
    (*((void (**)(unsigned char *, uint64_t))v208._object + 1))(v210, v209);
LABEL_6:
    outlined destroy of MLActivityClassifier.ModelParameters(v185, type metadata accessor for MLClassifierMetrics);
    return outlined destroy of MLActivityClassifier.ModelParameters((uint64_t)v186, type metadata accessor for MLClassifierMetrics);
  }
  uint64_t v202 = v79;
  outlined destroy of MLActivityClassifier.ModelParameters((uint64_t)v216, type metadata accessor for MLDecisionTreeClassifier.ModelParameters.ValidationData);
  char v83 = (char)v203;
  v200 = static _FeatureUtilities.selectFeaturesFromTrainingData(trainingData:targetColumn:featureColumns:)((uint64_t)v215, v208._countAndFlagsBits, _, (uint64_t)v203);
  swift_bridgeObjectRelease(v83);
  uint64_t v85 = (uint64_t)v204;
  uint64_t v86 = (uint64_t)&v204[*(int *)(v197 + 48)];
  uint64_t v87 = v214;
  uint64_t v203 = *(void (**)(unsigned char *, void *, uint64_t))(v201 + 16);
  v203(v204, v215, v214);
  outlined init with copy of Either<LogisticRegressionClassifier<Float, String>, FullyConnectedNetworkClassifier<Float, String>>(v202, v86, &demangling cache variable for type metadata for DataFrame?);
  int EnumTagSinglePayload = __swift_getEnumTagSinglePayload(v86, 1, v87);
  uint64_t v213 = 0;
  if (EnumTagSinglePayload == 1)
  {
    outlined destroy of Either<LogisticRegressionClassifier<Float, String>, FullyConnectedNetworkClassifier<Float, String>>(v86, &demangling cache variable for type metadata for DataFrame?);
    uint64_t v216 = *(void (**)(uint64_t, uint64_t))(v201 + 8);
    v216(v85, v87);
    goto LABEL_9;
  }
  uint64_t v97 = v86;
  uint64_t v98 = v201;
  (*(void (**)(unsigned char *, uint64_t, uint64_t))(v201 + 32))(v194, v97, v87);
  uint64_t v216 = *(void (**)(uint64_t, uint64_t))(v98 + 8);
  v216(v85, v87);
  uint64_t v99 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<String>);
  uint64_t inited = (void *)swift_initStackObject(v99, v165);
  inited[2] = 1;
  inited[3] = 2;
  inited[4] = v208._countAndFlagsBits;
  uint64_t v101 = _;
  inited[5] = _;
  swift_bridgeObjectRetain((_BYTE)v101);
  DataFrame.validateContainsColumns(_:context:)((Swift::OpaquePointer)inited, (Swift::String)__PAIR128__(0xEE00726569666973, 0x73616C4365657254));
  if (v102)
  {
    swift_setDeallocating(inited);
    specialized _ContiguousArrayStorage.__deallocating_deinit();
    swift_bridgeObjectRelease((_BYTE)v101);
    swift_bridgeObjectRelease((_BYTE)v200);
    outlined destroy of MLDecisionTreeClassifier.ModelParameters(v211);
    uint64_t v103 = v214;
    uint64_t v104 = v216;
    v216((uint64_t)v207, v214);
    v104((uint64_t)v194, v103);
LABEL_19:
    outlined destroy of Either<LogisticRegressionClassifier<Float, String>, FullyConnectedNetworkClassifier<Float, String>>((uint64_t)v215, &demangling cache variable for type metadata for (training: DataFrame, validation: DataFrame?));
    goto LABEL_4;
  }
  swift_setDeallocating(inited);
  specialized _ContiguousArrayStorage.__deallocating_deinit();
  uint64_t v114 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Any.Type>);
  char v115 = (void *)swift_allocObject(v114, 48, 7);
  v115[2] = 2;
  v115[3] = 4;
  v115[4] = &type metadata for String;
  v115[5] = &type metadata for Int;
  v116._uint64_t countAndFlagsBits = v208._countAndFlagsBits;
  v116._char object = v101;
  uint64_t v204 = v115;
  uint64_t v117 = v194;
  DataFrame.validateColumnTypes(_:_:context:)(v116, (Swift::OpaquePointer)v115, (Swift::String)__PAIR128__(0xEE00726569666973, 0x73616C4365657254));
  if (v118)
  {
    swift_bridgeObjectRelease((_BYTE)v101);
    swift_bridgeObjectRelease((_BYTE)v200);
    swift_bridgeObjectRelease((_BYTE)v204);
    outlined destroy of MLDecisionTreeClassifier.ModelParameters(v211);
    uint64_t v119 = v214;
    uint64_t v120 = v117;
    uint64_t v121 = v216;
    v216((uint64_t)v207, v214);
    v121((uint64_t)v120, v119);
    goto LABEL_19;
  }
  uint64_t v213 = 0;
  v216((uint64_t)v117, v214);
  swift_bridgeObjectRelease((_BYTE)v204);
LABEL_9:
  uint64_t v89 = v197;
  uint64_t v90 = v174;
  uint64_t v91 = (uint64_t)&v174[*(int *)(v197 + 48)];
  v203(v174, v215, v214);
  uint64_t v92 = v202;
  uint64_t v204 = (unsigned char *)v91;
  outlined init with copy of Either<LogisticRegressionClassifier<Float, String>, FullyConnectedNetworkClassifier<Float, String>>(v202, v91, &demangling cache variable for type metadata for DataFrame?);
  DataFrame.subscript.getter(v208._countAndFlagsBits, _);
  uint64_t v93 = v214;
  v216((uint64_t)v90, v214);
  uint64_t v94 = v187;
  uint64_t v95 = (uint64_t)&v187[*(int *)(v89 + 48)];
  v203(v187, v215, v93);
  outlined init with copy of Either<LogisticRegressionClassifier<Float, String>, FullyConnectedNetworkClassifier<Float, String>>(v92, v95, &demangling cache variable for type metadata for DataFrame?);
  uint64_t v96 = (uint64_t)v172;
  outlined init with take of DataFrame?(v95, (uint64_t)v172);
  if (__swift_getEnumTagSinglePayload(v96, 1, v93) == 1)
  {
    v216((uint64_t)v94, v93);
    outlined destroy of Either<LogisticRegressionClassifier<Float, String>, FullyConnectedNetworkClassifier<Float, String>>(v96, &demangling cache variable for type metadata for DataFrame?);
    __swift_storeEnumTagSinglePayload(v199, 1, 1, v188);
  }
  else
  {
    uint64_t v105 = v199;
    DataFrame.subscript.getter(v208._countAndFlagsBits, _);
    uint64_t v106 = v96;
    int64_t v107 = v216;
    v216(v106, v93);
    __swift_storeEnumTagSinglePayload(v105, 0, 1, v188);
    v107((uint64_t)v187, v93);
  }
  char object = (void (**)(unsigned char *, uint64_t))v208._object;
  uint64_t v109 = (uint64_t)_;
  uint64_t v110 = (uint64_t)v173;
  (*((void (**)(unsigned char *, unsigned char *, uint64_t))v208._object + 2))(v173, v210, v209);
  swift_bridgeObjectRetain(v109);
  uint64_t v111 = (uint64_t)v200;
  swift_bridgeObjectRetain((_BYTE)v200);
  uint64_t v112 = v213;
  AnyTreeClassifier.init(trainingLabelsColumn:validationLabelsColumn:annotationColumnName:featureColumnNames:configuration:)(v198, v199, v208._countAndFlagsBits, v109, v111, v110);
  if (v112)
  {
    swift_bridgeObjectRelease(v109);
    swift_bridgeObjectRelease(v111);
    outlined destroy of MLDecisionTreeClassifier.ModelParameters(v211);
    v216((uint64_t)v207, v214);
    outlined destroy of Either<LogisticRegressionClassifier<Float, String>, FullyConnectedNetworkClassifier<Float, String>>((uint64_t)v215, &demangling cache variable for type metadata for (training: DataFrame, validation: DataFrame?));
    object[1](v210, v209);
    outlined destroy of Either<LogisticRegressionClassifier<Float, String>, FullyConnectedNetworkClassifier<Float, String>>((uint64_t)v204, &demangling cache variable for type metadata for DataFrame?);
    goto LABEL_6;
  }
  outlined destroy of Either<LogisticRegressionClassifier<Float, String>, FullyConnectedNetworkClassifier<Float, String>>((uint64_t)v204, &demangling cache variable for type metadata for DataFrame?);
  uint64_t v113 = (uint64_t)v206;
  AnyTreeClassifier.fitted(to:validateOn:eventHandler:)(v215, v202, 0, 0, v76);
  uint64_t v213 = 0;
  if (!AnalyticsReporter.init()())
  {
    uint64_t v122 = v178;
    uint64_t v123 = (uint64_t)&v178[*(int *)(v197 + 48)];
    uint64_t v124 = v214;
    v203(v178, v215, v214);
    uint64_t v125 = v202;
    outlined init with copy of Either<LogisticRegressionClassifier<Float, String>, FullyConnectedNetworkClassifier<Float, String>>(v202, v123, &demangling cache variable for type metadata for DataFrame?);
    Swift::Int v126 = DataFrame.shape.getter(v125);
    uint64_t v127 = v124;
    uint64_t v113 = (uint64_t)v206;
    v216((uint64_t)v122, v127);
    AnalyticsReporter.reportDataMetrics(model:metricName:quantity:)(CreateML_ModelType_decisionTreeClassifier, (Swift::String)__PAIR128__((unint64_t)("vectorized_features" + 0x8000000000000000), 0xD000000000000015), v126);
    outlined destroy of Either<LogisticRegressionClassifier<Float, String>, FullyConnectedNetworkClassifier<Float, String>>(v123, &demangling cache variable for type metadata for DataFrame?);
    AnalyticsReporter.reportDataMetrics(model:metricName:quantity:)(CreateML_ModelType_decisionTreeClassifier, (Swift::String)__PAIR128__((unint64_t)("Number of Annotations" + 0x8000000000000000), 0xD000000000000010), *(void *)(*((void *)v205 + 3) + 16));
  }
  uint64_t v128 = v189;
  uint64_t v129 = *(int *)(v189 + 24);
  uint64_t v130 = v190;
  *(void *)((char *)v190 + v129) = v208._countAndFlagsBits;
  v208._uint64_t countAndFlagsBits = v129;
  *(void *)((char *)v130 + v129 + 8) = _;
  _ = (char *)v130 + *(int *)(v128 + 32);
  outlined init with copy of MLDecisionTreeClassifier.ModelParameters(v211, (uint64_t)_);
  uint64_t v198 = *(int *)(v128 + 28);
  *(void *)((char *)v130 + v198) = v200;
  uint64_t v131 = (uint64_t)v175;
  outlined init with copy of MLTrainingSessionParameters(v113, (uint64_t)v175, type metadata accessor for AnyTreeClassifierModel);
  uint64_t v132 = *(unsigned __int8 *)(v177 + 80);
  uint64_t v133 = ~*(unsigned __int8 *)(v177 + 80) & (v132 + 16);
  uint64_t v134 = swift_allocObject(&unk_39BD70, v133 + v176, v132 | 7);
  outlined init with take of MLClassifierMetrics(v131, v134 + v133, type metadata accessor for AnyTreeClassifierModel);
  uint64_t v135 = v213;
  specialized blockAwait<A>(_:)((uint64_t)&async function pointer to partial apply for closure #1 in MLDecisionTreeClassifier.init(trainingData:targetColumn:featureColumns:parameters:), v134);
  if (v135)
  {
    uint64_t v213 = v135;
    swift_release();
    outlined destroy of MLDecisionTreeClassifier.ModelParameters(v211);
    v216((uint64_t)v207, v214);
    outlined destroy of MLActivityClassifier.ModelParameters((uint64_t)v206, type metadata accessor for AnyTreeClassifierModel);
    outlined destroy of MLActivityClassifier.ModelParameters((uint64_t)v205, type metadata accessor for AnyTreeClassifier);
    outlined destroy of Either<LogisticRegressionClassifier<Float, String>, FullyConnectedNetworkClassifier<Float, String>>((uint64_t)v215, &demangling cache variable for type metadata for (training: DataFrame, validation: DataFrame?));
    (*((void (**)(unsigned char *, uint64_t))v208._object + 1))(v210, v209);
LABEL_26:
    uint64_t v138 = (uint64_t)_;
    uint64_t v139 = v198;
    swift_bridgeObjectRelease(*(void *)((char *)v130 + v208._countAndFlagsBits + 8));
    swift_bridgeObjectRelease(*(void *)((char *)v130 + v139));
    outlined destroy of MLDecisionTreeClassifier.ModelParameters(v138);
    goto LABEL_6;
  }
  uint64_t v137 = v136;
  swift_release();
  uint64_t v199 = *(int *)(v189 + 20);
  *(void *)((char *)v130 + v199) = v137;
  outlined init with copy of MLTrainingSessionParameters((uint64_t)v206, (uint64_t)v130, type metadata accessor for AnyTreeClassifierModel);
  AnyTreeClassifierModel.applied(to:eventHandler:)((uint64_t)v215, 0, 0);
  uint64_t v213 = 0;
  uint64_t v140 = *v130;
  uint64_t v141 = v130[1];
  DataFrame.subscript.getter(*v130, v141);
  uint64_t v142 = (uint64_t)v192;
  uint64_t v143 = v215;
  DataFrame.subscript.getter(v140, v141);
  uint64_t v144 = v179;
  AnyClassificationMetrics.init(_:_:)((uint64_t)v196, v142);
  uint64_t v145 = v214;
  v216((uint64_t)v191, v214);
  uint64_t v146 = (uint64_t)v144;
  uint64_t v147 = (uint64_t)v180;
  outlined init with take of MLClassifierMetrics(v146, (uint64_t)v180, type metadata accessor for AnyClassificationMetrics);
  swift_storeEnumTagMultiPayload(v147, v193, 0);
  outlined assign with take of MLClassifierMetrics(v147, v185);
  uint64_t v148 = v181;
  uint64_t v149 = (uint64_t)&v181[*(int *)(v197 + 48)];
  v203(v181, v143, v145);
  outlined init with copy of Either<LogisticRegressionClassifier<Float, String>, FullyConnectedNetworkClassifier<Float, String>>(v202, v149, &demangling cache variable for type metadata for DataFrame?);
  if (__swift_getEnumTagSinglePayload(v149, 1, v145) == 1)
  {
    outlined destroy of MLDecisionTreeClassifier.ModelParameters(v211);
    uint64_t v150 = v216;
    v216((uint64_t)v207, v145);
    outlined destroy of MLActivityClassifier.ModelParameters((uint64_t)v206, type metadata accessor for AnyTreeClassifierModel);
    outlined destroy of MLActivityClassifier.ModelParameters((uint64_t)v205, type metadata accessor for AnyTreeClassifier);
    outlined destroy of Either<LogisticRegressionClassifier<Float, String>, FullyConnectedNetworkClassifier<Float, String>>((uint64_t)v215, &demangling cache variable for type metadata for (training: DataFrame, validation: DataFrame?));
    (*((void (**)(unsigned char *, uint64_t))v208._object + 1))(v210, v209);
    outlined destroy of Either<LogisticRegressionClassifier<Float, String>, FullyConnectedNetworkClassifier<Float, String>>(v149, &demangling cache variable for type metadata for DataFrame?);
    return ((uint64_t (*)(unsigned char *, uint64_t))v150)(v148, v145);
  }
  else
  {
    uint64_t v151 = (uint64_t)v195;
    (*(void (**)(unsigned char *, uint64_t, uint64_t))(v201 + 32))(v195, v149, v145);
    v216((uint64_t)v148, v145);
    uint64_t v152 = v182;
    uint64_t v130 = v190;
    uint64_t v153 = v213;
    AnyTreeClassifierModel.applied(to:eventHandler:)(v151, 0, 0);
    uint64_t v213 = v153;
    unint64_t v154 = v210;
    if (v153)
    {
      outlined destroy of MLDecisionTreeClassifier.ModelParameters(v211);
      uint64_t v155 = v214;
      uint64_t v156 = v216;
      v216((uint64_t)v207, v214);
      v156((uint64_t)v195, v155);
      outlined destroy of MLActivityClassifier.ModelParameters((uint64_t)v206, type metadata accessor for AnyTreeClassifierModel);
      outlined destroy of MLActivityClassifier.ModelParameters((uint64_t)v205, type metadata accessor for AnyTreeClassifier);
      outlined destroy of Either<LogisticRegressionClassifier<Float, String>, FullyConnectedNetworkClassifier<Float, String>>((uint64_t)v215, &demangling cache variable for type metadata for (training: DataFrame, validation: DataFrame?));
      (*((void (**)(unsigned char *, uint64_t))v208._object + 1))(v154, v209);
      outlined destroy of MLActivityClassifier.ModelParameters((uint64_t)v130, type metadata accessor for AnyTreeClassifierModel);

      goto LABEL_26;
    }
    _ = (char *)*v130;
    uint64_t v157 = v130[1];
    DataFrame.subscript.getter(_, v157);
    uint64_t v158 = (uint64_t)v192;
    uint64_t v159 = v195;
    DataFrame.subscript.getter(_, v157);
    uint64_t v160 = (uint64_t)v183;
    AnyClassificationMetrics.init(_:_:)((uint64_t)v196, v158);
    Swift::String v161 = v152;
    uint64_t v162 = v214;
    uint64_t v163 = (void (*)(void (*)(uint64_t *, uint64_t, uint64_t), uint64_t))v216;
    v216((uint64_t)v161, v214);
    outlined destroy of MLDecisionTreeClassifier.ModelParameters(v211);
    v163(v207, v162);
    v163(v159, v162);
    outlined destroy of MLActivityClassifier.ModelParameters((uint64_t)v206, type metadata accessor for AnyTreeClassifierModel);
    outlined destroy of MLActivityClassifier.ModelParameters((uint64_t)v205, type metadata accessor for AnyTreeClassifier);
    outlined destroy of Either<LogisticRegressionClassifier<Float, String>, FullyConnectedNetworkClassifier<Float, String>>((uint64_t)v215, &demangling cache variable for type metadata for (training: DataFrame, validation: DataFrame?));
    (*((void (**)(unsigned char *, uint64_t))v208._object + 1))(v210, v209);
    uint64_t v164 = (uint64_t)v184;
    outlined init with take of MLClassifierMetrics(v160, (uint64_t)v184, type metadata accessor for AnyClassificationMetrics);
    swift_storeEnumTagMultiPayload(v164, v193, 0);
    return outlined assign with take of MLClassifierMetrics(v164, (uint64_t)v186);
  }
}

uint64_t closure #1 in MLDecisionTreeClassifier.init(trainingData:targetColumn:featureColumns:parameters:)(uint64_t a1)
{
  *(void *)(v1 + 16) = a1;
  uint64_t v2 = (uint64_t (*)(void))((char *)&async function pointer to specialized CoreMLExportable.exportAsCoreMLModel()
                         + async function pointer to specialized CoreMLExportable.exportAsCoreMLModel());
  uint64_t v3 = (void *)swift_task_alloc(dword_3AE24C);
  *(void *)(v1 + 24) = v3;
  *uint64_t v3 = v1;
  v3[1] = closure #1 in MLDecisionTreeClassifier.init(trainingData:targetColumn:featureColumns:parameters:);
  return v2();
}

{
  uint64_t v1;
  uint64_t *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  uint64_t v4 = *v2;
  uint64_t v5 = *(void *)(*v2 + 24);
  uint64_t v6 = *v2;
  swift_task_dealloc(v5);
  if (v1) {
    return (*(uint64_t (**)(void))(v6 + 8))();
  }
  *(void *)(v4 + 32) = a1;
  return swift_task_switch(closure #1 in MLDecisionTreeClassifier.init(trainingData:targetColumn:featureColumns:parameters:), 0, 0);
}

uint64_t MLDecisionTreeClassifier.init(trainingData:targetColumn:featureColumns:parameters:)(uint64_t *a1, uint64_t a2, char *a3, void (*a4)(unsigned char *, void *, uint64_t), uint64_t a5)
{
  int64_t v13 = a4;
  uint64_t v14 = a3;
  uint64_t v15 = a2;
  int64_t v6 = *(void *)(*(void *)(type metadata accessor for DataFrame(0) - 8) + 64);
  uint64_t v7 = alloca(v6);
  int64_t v8 = alloca(v6);
  char v9 = *((unsigned char *)a1 + 8);
  uint64_t v11 = *a1;
  char v12 = v9;
  DataFrame.init(_:)((uint64_t)&v11);
  outlined init with copy of MLDecisionTreeClassifier.ModelParameters(a5, (uint64_t)&v11);
  MLDecisionTreeClassifier.init(trainingData:targetColumn:featureColumns:parameters:)((void (*)(uint64_t *, uint64_t, uint64_t))&v11, v15, v14, v13, (uint64_t)&v11);
  return outlined destroy of MLDecisionTreeClassifier.ModelParameters(a5);
}

uint64_t MLDecisionTreeClassifier.init(checkpoint:)(uint64_t a1)
{
  uint64_t v96 = v2;
  uint64_t v95 = a1;
  uint64_t v3 = v1;
  uint64_t v90 = type metadata accessor for MLDecisionTreeClassifier.ModelParameters.ValidationData(0);
  int64_t v4 = *(void *)(*(void *)(v90 - 8) + 64);
  uint64_t v5 = alloca(v4);
  int64_t v6 = alloca(v4);
  uint64_t v86 = v76;
  uint64_t v7 = alloca(v4);
  int64_t v8 = alloca(v4);
  uint64_t v85 = v76;
  int64_t v9 = *(void *)(*(void *)(type metadata accessor for BoostedTreeConfiguration(0) - 8) + 64);
  uint64_t v10 = alloca(v9);
  uint64_t v11 = alloca(v9);
  uint64_t v77 = v76;
  uint64_t v88 = type metadata accessor for AnyTreeClassifier(0);
  int64_t v12 = *(void *)(*(void *)(v88 - 8) + 64);
  int64_t v13 = alloca(v12);
  uint64_t v14 = alloca(v12);
  char v83 = v76;
  uint64_t v15 = alloca(v12);
  Swift::String v16 = alloca(v12);
  unint64_t v78 = v76;
  uint64_t v82 = *(void *)(type metadata accessor for AnyTreeClassifierModel(0) - 8);
  int64_t v17 = *(void *)(v82 + 64);
  int64_t v18 = alloca(v17);
  long long v19 = alloca(v17);
  int64_t v84 = v76;
  uint64_t v20 = alloca(v17);
  Swift::String v21 = alloca(v17);
  unint64_t v81 = v76;
  Swift::String v22 = alloca(v17);
  int64_t v23 = alloca(v17);
  uint64_t v79 = v76;
  int64_t v80 = v17;
  uint64_t v24 = alloca(v17);
  Swift::String v25 = alloca(v17);
  uint64_t v94 = v76;
  uint64_t v26 = type metadata accessor for MLDecisionTreeClassifier(0);
  uint64_t v92 = v3 + *(int *)(v26 + 36);
  MLClassifierMetrics.init()();
  uint64_t v91 = v26;
  uint64_t v27 = (uint64_t *)(v3 + *(int *)(v26 + 40));
  uint64_t v28 = lazy protocol witness table accessor for type MLCreateError and conformance MLCreateError();
  uint64_t v29 = swift_allocError(&type metadata for MLCreateError, v28, 0, 0);
  *(void *)uint64_t v30 = 0xD0000000000000C0;
  *(void *)(v30 + 8) = "essor\n\nParameters\n" + 0x8000000000000000;
  *(_OWORD *)(v30 + 16) = 0;
  *(_OWORD *)(v30 + 32) = 0;
  *(unsigned char *)(v30 + 48) = 0;
  *uint64_t v27 = v29;
  uint64_t v31 = v95;
  uint64_t v32 = type metadata accessor for MLClassifierMetrics.Contents(0);
  uint64_t v93 = v27;
  swift_storeEnumTagMultiPayload(v27, v32, 2);
  uint64_t v33 = *(unsigned __int8 *)(v31 + *(int *)(type metadata accessor for MLCheckpoint(0) + 20));
  uint64_t v89 = v3;
  switch(v33)
  {
    case 0:
      uint64_t v34 = v31;
      uint64_t v35 = 0x696C616974696E69;
      unint64_t v36 = 0xEB0000000064657ALL;
      break;
    case 1:
      uint64_t v34 = v31;
      uint64_t v35 = 0x6974636172747865;
      goto LABEL_6;
    case 2:
      swift_bridgeObjectRelease(0);
      goto LABEL_9;
    case 3:
      uint64_t v34 = v31;
      uint64_t v35 = 0x697461756C617665;
LABEL_6:
      unint64_t v36 = 0xEA0000000000676ELL;
      break;
    case 4:
      uint64_t v34 = v31;
      unint64_t v36 = 0xEB00000000676E69;
      uint64_t v35 = 0x636E657265666E69;
      break;
    case 5:
      JUMPOUT(0x2369BCLL);
  }
  char v37 = _stringCompareWithSmolCheck(_:_:expecting:)(v35, v36, 0x676E696E69617274, 0xE800000000000000, 0);
  swift_bridgeObjectRelease(v36);
  BOOL v38 = (v37 & 1) == 0;
  uint64_t v31 = v34;
  if (v38)
  {
    swift_allocError(&type metadata for MLCreateError, v28, 0, 0);
    *(void *)uint64_t v48 = 0xD00000000000004ELL;
    *(void *)(v48 + 8) = "sifier\n\nParameters\n" + 0x8000000000000000;
    *(_OWORD *)(v48 + 16) = 0;
    *(_OWORD *)(v48 + 32) = 0;
    *(unsigned char *)(v48 + 48) = 0;
    swift_willThrow(&type metadata for MLCreateError, v28, v48, v49, v50, v51);
    unint64_t v52 = type metadata accessor for MLCheckpoint;
    uint64_t v53 = v34;
LABEL_15:
    outlined destroy of MLActivityClassifier.ModelParameters(v53, v52);
    uint64_t v64 = (uint64_t)v93;
    outlined destroy of MLActivityClassifier.ModelParameters(v92, type metadata accessor for MLClassifierMetrics);
    return outlined destroy of MLActivityClassifier.ModelParameters(v64, type metadata accessor for MLClassifierMetrics);
  }
LABEL_9:
  int64_t v39 = specialized _setUpCast<A, B>(_:)((uint64_t)&_swiftEmptySetSingleton);
  uint64_t v40 = (uint64_t)v77;
  BoostedTreeConfiguration.init()();
  uint64_t v41 = (uint64_t)v78;
  AnyTreeClassifier.init(labels:annotationColumnName:featureColumnNames:configuration:)((uint64_t)v39, 0, 0xE000000000000000, (uint64_t)_swiftEmptyArrayStorage, v40);
  uint64_t v42 = lazy protocol witness table accessor for type AnyTreeClassifier and conformance AnyTreeClassifier();
  uint64_t v43 = v79;
  uint64_t v87 = v42;
  uint64_t v44 = v96;
  UpdatableSupervisedTabularEstimator.readWithOptimizer(from:)(v31, v88, v42);
  uint64_t v96 = v44;
  outlined destroy of MLActivityClassifier.ModelParameters(v41, type metadata accessor for AnyTreeClassifier);
  if (v44)
  {
    uint64_t v45 = specialized _setUpCast<A, B>(_:)((uint64_t)&_swiftEmptySetSingleton);
    BoostedTreeConfiguration.init()();
    uint64_t v46 = (uint64_t)v83;
    AnyTreeClassifier.init(labels:annotationColumnName:featureColumnNames:configuration:)((uint64_t)v45, 0, 0xE000000000000000, (uint64_t)_swiftEmptyArrayStorage, v40);
    uint64_t v47 = v84;
    UpdatableSupervisedTabularEstimator.readWithOptimizer(from:)(v95, v88, v87);
    outlined destroy of MLActivityClassifier.ModelParameters(v46, type metadata accessor for AnyTreeClassifier);
    swift_errorRelease(v96);
    uint64_t v54 = (uint64_t)v47;
    uint64_t v96 = 0;
  }
  else
  {
    uint64_t v54 = (uint64_t)v43;
  }
  uint64_t v55 = (uint64_t)v94;
  outlined init with take of MLClassifierMetrics(v54, (uint64_t)v94, type metadata accessor for AnyTreeClassifierModel);
  uint64_t v56 = v55;
  uint64_t v57 = (uint64_t)v81;
  outlined init with copy of MLTrainingSessionParameters(v56, (uint64_t)v81, type metadata accessor for AnyTreeClassifierModel);
  uint64_t v58 = *(unsigned __int8 *)(v82 + 80);
  uint64_t v59 = ~*(unsigned __int8 *)(v82 + 80) & (v58 + 16);
  uint64_t v60 = swift_allocObject(&unk_39BD98, v59 + v80, v58 | 7);
  outlined init with take of MLClassifierMetrics(v57, v60 + v59, type metadata accessor for AnyTreeClassifierModel);
  uint64_t v61 = v96;
  specialized blockAwait<A>(_:)((uint64_t)&async function pointer to partial apply for closure #1 in MLDecisionTreeClassifier.init(checkpoint:), v60);
  uint64_t v63 = v62;
  swift_release();
  if (v61)
  {
    outlined destroy of MLActivityClassifier.ModelParameters(v95, type metadata accessor for MLCheckpoint);
    unint64_t v52 = type metadata accessor for AnyTreeClassifierModel;
    uint64_t v53 = (uint64_t)v94;
    goto LABEL_15;
  }
  uint64_t v66 = v91;
  uint64_t v67 = v89;
  *(void *)(v89 + *(int *)(v91 + 20)) = v63;
  outlined init with copy of MLTrainingSessionParameters((uint64_t)v94, v67, type metadata accessor for AnyTreeClassifierModel);
  uint64_t v68 = (uint64_t)v85;
  *uint64_t v85 = 0;
  *(_WORD *)(v68 + 16) = 256;
  swift_storeEnumTagMultiPayload(v68, v90, 0);
  uint64_t v69 = *(int *)(v66 + 32) + v67 + 8;
  *(_OWORD *)(v69 + 16) = 0;
  *(_OWORD *)uint64_t v69 = 0;
  *(void *)(v69 - 8) = 6;
  *(__m128 *)(v69 + 32) = _mm_loadh_ps((const double *)&qword_346D50);
  *(void *)(v69 + 48) = 42;
  uint64_t v70 = (uint64_t)v86;
  outlined init with copy of MLTrainingSessionParameters(v68, (uint64_t)v86, type metadata accessor for MLDecisionTreeClassifier.ModelParameters.ValidationData);
  void v76[3] = v90;
  boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1(v76);
  outlined init with take of MLClassifierMetrics(v70, (uint64_t)boxed_opaque_existential_1, type metadata accessor for MLDecisionTreeClassifier.ModelParameters.ValidationData);
  outlined assign with take of Any?((uint64_t)v76, v69);
  outlined destroy of MLActivityClassifier.ModelParameters(v68, type metadata accessor for MLDecisionTreeClassifier.ModelParameters.ValidationData);
  uint64_t v72 = v91;
  uint64_t v73 = *(int *)(v91 + 24);
  uint64_t v74 = v89;
  *(void *)(v89 + v73) = 0;
  *(void *)(v74 + v73 + 8) = 0xE000000000000000;
  uint64_t v75 = v74;
  outlined destroy of MLActivityClassifier.ModelParameters(v95, type metadata accessor for MLCheckpoint);
  outlined destroy of MLActivityClassifier.ModelParameters((uint64_t)v94, type metadata accessor for AnyTreeClassifierModel);
  uint64_t result = *(int *)(v72 + 28);
  *(void *)(v75 + result) = _swiftEmptyArrayStorage;
  return result;
}

void *static MLDecisionTreeClassifier.train(trainingData:targetColumn:featureColumns:parameters:sessionParameters:)(uint64_t a1, uint64_t a2, uint64_t a3, void (*a4)(void, void), uint64_t a5, uint64_t a6)
{
  uint64_t v21 = a6;
  uint64_t v22 = a5;
  int64_t v23 = a4;
  uint64_t v24 = a3;
  uint64_t v25 = a2;
  uint64_t v7 = type metadata accessor for DataFrame(0);
  uint64_t v8 = *(void *)(v7 - 8);
  int64_t v9 = *(void *)(v8 + 64);
  uint64_t v10 = alloca(v9);
  uint64_t v11 = alloca(v9);
  char v12 = *(unsigned char *)(a1 + 8);
  uint64_t v19 = *(void *)a1;
  char v20 = v12;
  outlined copy of Result<_DataTable, Error>(v19, v12);
  DataFrame.init(_:)((uint64_t)&v19);
  uint64_t v13 = static MLDecisionTreeClassifier.makeTrainingSession(trainingData:targetColumn:featureColumns:parameters:sessionParameters:)((void (*)(uint64_t *, uint64_t, uint64_t))&v19, v25, v24, v23, v22, v21);
  uint64_t v14 = v7;
  if (v6) {
    return (void *)(*(uint64_t (**)(uint64_t *, uint64_t))(v8 + 8))(&v19, v7);
  }
  uint64_t v16 = v13;
  (*(void (**)(uint64_t *, uint64_t))(v8 + 8))(&v19, v14);
  uint64_t v17 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for MLJob<MLDecisionTreeClassifier>);
  int64_t v18 = (void *)swift_allocObject(v17, *(unsigned int *)(v17 + 48), *(unsigned __int16 *)(v17 + 52));
  return specialized MLJob.init(_:)(v18, v16);
}

uint64_t static MLDecisionTreeClassifier.makeTrainingSession(trainingData:targetColumn:featureColumns:parameters:sessionParameters:)(uint64_t a1, uint64_t a2, uint64_t a3, void (*a4)(void, void), uint64_t a5, uint64_t a6)
{
  uint64_t v16 = a6;
  uint64_t v17 = a5;
  int64_t v18 = a4;
  uint64_t v19 = a3;
  uint64_t v7 = type metadata accessor for DataFrame(0);
  uint64_t v20 = *(void *)(v7 - 8);
  int64_t v8 = *(void *)(v20 + 64);
  int64_t v9 = alloca(v8);
  uint64_t v10 = alloca(v8);
  char v11 = *(unsigned char *)(a1 + 8);
  uint64_t v14 = *(void *)a1;
  char v15 = v11;
  outlined copy of Result<_DataTable, Error>(v14, v11);
  DataFrame.init(_:)((uint64_t)&v14);
  uint64_t v12 = static MLDecisionTreeClassifier.makeTrainingSession(trainingData:targetColumn:featureColumns:parameters:sessionParameters:)((void (*)(uint64_t *, uint64_t, uint64_t))&v14, a2, v19, v18, v17, v16);
  (*(void (**)(uint64_t *, uint64_t))(v20 + 8))(&v14, v7);
  return v12;
}

void *static MLDecisionTreeClassifier.resume(_:)(uint64_t a1)
{
  uint64_t v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for MLJob<MLDecisionTreeClassifier>);
  uint64_t v2 = (void *)swift_allocObject(v1, *(unsigned int *)(v1 + 48), *(unsigned __int16 *)(v1 + 52));
  swift_retain();
  return specialized MLJob.init(_:)(v2, a1);
}

void *static MLDecisionTreeClassifier.train(trainingData:targetColumn:featureColumns:parameters:sessionParameters:)(void (*a1)(uint64_t *, uint64_t, uint64_t), uint64_t a2, uint64_t a3, void (*a4)(void, void), uint64_t a5, uint64_t a6)
{
  uint64_t result = (void *)static MLDecisionTreeClassifier.makeTrainingSession(trainingData:targetColumn:featureColumns:parameters:sessionParameters:)(a1, a2, a3, a4, a5, a6);
  if (!v6)
  {
    uint64_t v8 = (uint64_t)result;
    uint64_t v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for MLJob<MLDecisionTreeClassifier>);
    uint64_t v10 = (void *)swift_allocObject(v9, *(unsigned int *)(v9 + 48), *(unsigned __int16 *)(v9 + 52));
    return specialized MLJob.init(_:)(v10, v8);
  }
  return result;
}

uint64_t static MLDecisionTreeClassifier.makeTrainingSession(trainingData:targetColumn:featureColumns:parameters:sessionParameters:)(void (*a1)(uint64_t *, uint64_t, uint64_t), uint64_t a2, uint64_t a3, void (*a4)(void, void), uint64_t a5, uint64_t a6)
{
  uint64_t v62 = v6;
  uint64_t v59 = a6;
  uint64_t v56 = a4;
  uint64_t v57 = a3;
  uint64_t v50 = a2;
  uint64_t v63 = a1;
  int64_t v8 = *(void *)(*(void *)(type metadata accessor for MLTrainingSessionParameters(0) - 8) + 64);
  uint64_t v9 = alloca(v8);
  uint64_t v10 = alloca(v8);
  uint64_t v54 = &v42;
  char v11 = alloca(v8);
  uint64_t v12 = alloca(v8);
  uint64_t v51 = &v42;
  int64_t v13 = *(void *)(*(void *)(type metadata accessor for BoostedTreeConfiguration(0) - 8) + 64);
  uint64_t v14 = alloca(v13);
  char v15 = alloca(v13);
  unint64_t v52 = &v42;
  uint64_t v64 = type metadata accessor for MLDecisionTreeClassifier.ModelParameters.ValidationData(0);
  int64_t v16 = *(void *)(*(void *)(v64 - 8) + 64);
  uint64_t v17 = alloca(v16);
  int64_t v18 = alloca(v16);
  uint64_t v19 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (training: DataFrame, validation: DataFrame?));
  int64_t v20 = *(void *)(*(void *)(v19 - 8) + 64);
  uint64_t v21 = alloca(v20);
  uint64_t v22 = alloca(v20);
  uint64_t v61 = &v42;
  int64_t v23 = alloca(v20);
  uint64_t v24 = alloca(v20);
  uint64_t v60 = &v42;
  uint64_t v25 = alloca(v20);
  uint64_t v26 = alloca(v20);
  uint64_t v65 = &v42;
  uint64_t v53 = a5;
  outlined init with copy of Either<LogisticRegressionClassifier<Float, String>, FullyConnectedNetworkClassifier<Float, String>>(a5 + 8, (uint64_t)&v42, &demangling cache variable for type metadata for Any?);
  if (!v43) {
    BUG();
  }
  uint64_t v58 = v19;
  uint64_t v27 = (uint64_t)v65;
  uint64_t v28 = (uint64_t)v65 + *(int *)(v19 + 48);
  outlined init with take of Any(&v42, &v44);
  swift_dynamicCast(&v42, &v44, (char *)&type metadata for Any + 8, v64, 7);
  uint64_t v29 = v62;
  MLDecisionTreeClassifier.ModelParameters.ValidationData.generateDataFrames(trainingData:)(v27, v28, v63);
  outlined destroy of MLActivityClassifier.ModelParameters((uint64_t)&v42, type metadata accessor for MLDecisionTreeClassifier.ModelParameters.ValidationData);
  if (!v29)
  {
    uint64_t v55 = 0;
    uint64_t v30 = (uint64_t)v60 + *(int *)(v58 + 48);
    uint64_t v31 = (void (*)(uint64_t *, uint64_t, uint64_t))type metadata accessor for DataFrame(0);
    uint64_t v64 = *((void *)v31 - 1);
    uint64_t v32 = *(void (**)(long long *, long long *, void))(v64 + 16);
    v32(v60, v65, v31);
    uint64_t v62 = v30;
    outlined init with copy of Either<LogisticRegressionClassifier<Float, String>, FullyConnectedNetworkClassifier<Float, String>>(v28, v30, &demangling cache variable for type metadata for DataFrame?);
    uint64_t v33 = (uint64_t)v61 + *(int *)(v58 + 48);
    uint64_t v63 = v31;
    v32(v61, v65, v31);
    outlined init with copy of Either<LogisticRegressionClassifier<Float, String>, FullyConnectedNetworkClassifier<Float, String>>(v28, v33, &demangling cache variable for type metadata for DataFrame?);
    outlined init with copy of MLDecisionTreeClassifier.ModelParameters(v53, (uint64_t)&v44);
    swift_bridgeObjectRetain((_BYTE)v56);
    swift_bridgeObjectRetain(v57);
    uint64_t v34 = (uint64_t)v52;
    BoostedTreeConfiguration.init()();
    BoostedTreeConfiguration.maximumIterations.setter(1);
    BoostedTreeConfiguration.learningRate.setter(1.0);
    BoostedTreeConfiguration.maximumDepth.setter(v44);
    BoostedTreeConfiguration.minimumLossReduction.setter(v47);
    BoostedTreeConfiguration.minimumChildWeight.setter(v48);
    BoostedTreeConfiguration.randomSeed.setter(v49);
    outlined destroy of MLDecisionTreeClassifier.ModelParameters((uint64_t)&v44);
    uint64_t v35 = (uint64_t)v51;
    outlined init with copy of MLTrainingSessionParameters(v59, (uint64_t)v51, type metadata accessor for MLTrainingSessionParameters);
    uint64_t v28 = type metadata accessor for TreeClassifierTrainingSessionDelegate(0);
    swift_allocObject(v28, *(unsigned int *)(v28 + 48), *(unsigned __int16 *)(v28 + 52));
    uint64_t v36 = v55;
    char v37 = TreeClassifierTrainingSessionDelegate.init(trainingData:validationData:targetColumn:featureColumns:configuration:sessionParameters:)((uint64_t)v60, v33, v50, v57, v56, v34, v35);
    if (v36)
    {
      outlined destroy of Either<LogisticRegressionClassifier<Float, String>, FullyConnectedNetworkClassifier<Float, String>>((uint64_t)v65, &demangling cache variable for type metadata for (training: DataFrame, validation: DataFrame?));
      (*(void (**)(long long *, void (*)(uint64_t *, uint64_t, uint64_t)))(v64 + 8))(v61, v63);
      outlined destroy of Either<LogisticRegressionClassifier<Float, String>, FullyConnectedNetworkClassifier<Float, String>>(v62, &demangling cache variable for type metadata for DataFrame?);
    }
    else
    {
      BOOL v38 = v37;
      (*(void (**)(long long *, void (*)(uint64_t *, uint64_t, uint64_t)))(v64 + 8))(v61, v63);
      outlined destroy of Either<LogisticRegressionClassifier<Float, String>, FullyConnectedNetworkClassifier<Float, String>>(v62, &demangling cache variable for type metadata for DataFrame?);
      uint64_t v45 = v28;
      uint64_t v46 = &protocol witness table for TreeClassifierTrainingSessionDelegate;
      *(void *)&long long v44 = v38;
      uint64_t v39 = (uint64_t)v54;
      outlined init with copy of MLTrainingSessionParameters(v59, (uint64_t)v54, type metadata accessor for MLTrainingSessionParameters);
      uint64_t v40 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for MLTrainingSession<MLDecisionTreeClassifier>);
      swift_allocObject(v40, *(unsigned int *)(v40 + 48), *(unsigned __int16 *)(v40 + 52));
      swift_retain();
      uint64_t v28 = specialized MLTrainingSession.init(delegate:parameters:modelType:)((uint64_t)&v44, v39, 3);
      outlined destroy of Either<LogisticRegressionClassifier<Float, String>, FullyConnectedNetworkClassifier<Float, String>>((uint64_t)v65, &demangling cache variable for type metadata for (training: DataFrame, validation: DataFrame?));
      swift_release();
    }
  }
  return v28;
}

uint64_t static MLDecisionTreeClassifier.restoreTrainingSession(sessionParameters:)(uint64_t a1)
{
  int64_t v2 = *(void *)(*(void *)(type metadata accessor for MLTrainingSessionParameters(0) - 8) + 64);
  uint64_t v3 = alloca(v2);
  int64_t v4 = alloca(v2);
  uint64_t v12 = v11;
  uint64_t v5 = alloca(v2);
  uint64_t v6 = alloca(v2);
  outlined init with copy of MLTrainingSessionParameters(a1, (uint64_t)v11, type metadata accessor for MLTrainingSessionParameters);
  uint64_t v7 = type metadata accessor for TreeClassifierTrainingSessionDelegate(0);
  swift_allocObject(v7, *(unsigned int *)(v7 + 48), *(unsigned __int16 *)(v7 + 52));
  uint64_t result = TreeClassifierTrainingSessionDelegate.init(sessionParameters:)((uint64_t)v11);
  if (!v1)
  {
    v11[3] = v7;
    v11[4] = &protocol witness table for TreeClassifierTrainingSessionDelegate;
    v11[0] = result;
    uint64_t v9 = (uint64_t)v12;
    outlined init with copy of MLTrainingSessionParameters(a1, (uint64_t)v12, type metadata accessor for MLTrainingSessionParameters);
    uint64_t v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for MLTrainingSession<MLDecisionTreeClassifier>);
    swift_allocObject(v10, *(unsigned int *)(v10 + 48), *(unsigned __int16 *)(v10 + 52));
    return specialized MLTrainingSession.init(delegate:parameters:modelType:)((uint64_t)v11, v9, 3);
  }
  return result;
}

uint64_t closure #1 in closure #1 in static MLDecisionTreeClassifier.resume(_:)(uint64_t a1, char a2, uint64_t a3, void (*a4)(uint64_t *), uint64_t a5)
{
  uint64_t v22 = a5;
  int64_t v23 = a4;
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Result<MLDecisionTreeClassifier, Error>);
  int64_t v7 = *(void *)(*(void *)(v6 - 8) + 64);
  int64_t v8 = alloca(v7);
  uint64_t v9 = alloca(v7);
  int64_t v10 = *(void *)(*(void *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TaskPriority?)
                              - 8)
                  + 64);
  char v11 = alloca(v10);
  uint64_t v12 = alloca(v10);
  if (a2)
  {
    uint64_t v19 = a1;
    swift_storeEnumTagMultiPayload(&v19, v6, 1);
    swift_errorRetain(a1);
    v23(&v19);
    return outlined destroy of Either<LogisticRegressionClassifier<Float, String>, FullyConnectedNetworkClassifier<Float, String>>((uint64_t)&v19, &demangling cache variable for type metadata for Result<MLDecisionTreeClassifier, Error>);
  }
  else
  {
    outlined init with copy of TabularRegressionTask(direct field offset for MLTrainingSession.delegate + a3, (uint64_t)v20);
    uint64_t v13 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TrainingSessionDelegate);
    uint64_t v14 = type metadata accessor for TreeClassifierTrainingSessionDelegate(0);
    swift_dynamicCast(&v21, v20, v13, v14, 7);
    uint64_t v15 = v21;
    uint64_t v16 = type metadata accessor for TaskPriority(0);
    __swift_storeEnumTagSinglePayload((uint64_t)&v19, 1, 1, v16);
    uint64_t v17 = swift_allocObject(&unk_39BDD0, 56, 7);
    *(_OWORD *)(v17 + 16) = 0;
    *(void *)(v17 + 32) = v15;
    *(void *)(v17 + 40) = v23;
    *(void *)(v17 + 48) = v22;
    swift_retain();
    _sScTss5NeverORs_rlE8priority9operationScTyxABGScPSg_xyYaYAcntcfCyt_Tgm5((uint64_t)&v19, (uint64_t)&async function pointer to partial apply for closure #1 in static MLDecisionTreeClassifier.handleResult(_:session:fulfill:), v17);
    return swift_release();
  }
}

uint64_t closure #1 in static MLDecisionTreeClassifier.handleResult(_:session:fulfill:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  void v6[4] = a6;
  v6[3] = a5;
  _OWORD v6[2] = a4;
  uint64_t v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Result<MLDecisionTreeClassifier, Error>);
  void v6[5] = swift_task_alloc((*(void *)(*(void *)(v7 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  return swift_task_switch(closure #1 in static MLDecisionTreeClassifier.handleResult(_:session:fulfill:), 0, 0);
}

uint64_t closure #1 in static MLDecisionTreeClassifier.handleResult(_:session:fulfill:)()
{
  uint64_t v1 = (char *)&async function pointer to specialized Result<>.init(catching:)
     + async function pointer to specialized Result<>.init(catching:);
  uint64_t v2 = dword_3AE654;
  swift_retain();
  uint64_t v3 = (void *)swift_task_alloc(v2);
  v0[6] = v3;
  *uint64_t v3 = v0;
  v3[1] = closure #1 in static MLDecisionTreeClassifier.handleResult(_:session:fulfill:);
  return ((uint64_t (*)(void, void))v1)(v0[5], v0[2]);
}

{
  uint64_t v0;

  swift_task_dealloc(*(void *)(*(void *)v0 + 48));
  return swift_task_switch(closure #1 in static MLDecisionTreeClassifier.handleResult(_:session:fulfill:), 0, 0);
}

{
  uint64_t v0;
  uint64_t v1;

  uint64_t v1 = *(void *)(v0 + 40);
  (*(void (**)(uint64_t))(v0 + 24))(v1);
  outlined destroy of Either<LogisticRegressionClassifier<Float, String>, FullyConnectedNetworkClassifier<Float, String>>(v1, &demangling cache variable for type metadata for Result<MLDecisionTreeClassifier, Error>);
  swift_task_dealloc(v1);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t MLDecisionTreeClassifier.init(delegate:)(uint64_t a1, uint64_t a2)
{
  v2[36] = a2;
  v2[35] = a1;
  uint64_t v3 = type metadata accessor for AnyClassificationMetrics(0);
  v2[37] = v3;
  unint64_t v4 = (*(void *)(*(void *)(v3 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v2[38] = swift_task_alloc(v4);
  v2[39] = swift_task_alloc(v4);
  unint64_t v5 = (*(void *)(*(void *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AnyClassificationMetrics?)
                              - 8)
                  + 64)
      + 15) & 0xFFFFFFFFFFFFFFF0;
  v2[40] = swift_task_alloc(v5);
  v2[41] = swift_task_alloc(v5);
  uint64_t v6 = type metadata accessor for MLClassifierMetrics(0);
  v2[42] = swift_task_alloc((*(void *)(*(void *)(v6 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AnyTreeClassifierModel?);
  v2[43] = swift_task_alloc((*(void *)(*(void *)(v7 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = type metadata accessor for MLDecisionTreeClassifier(0);
  v2[44] = v8;
  v2[45] = swift_task_alloc((*(void *)(*(void *)(v8 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for MLDecisionTreeClassifier.ModelParameters.ValidationData?);
  v2[46] = swift_task_alloc((*(void *)(*(void *)(v9 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = type metadata accessor for MLDecisionTreeClassifier.ModelParameters.ValidationData(0);
  v2[47] = v10;
  v2[48] = swift_task_alloc((*(void *)(*(void *)(v10 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for DataFrame?);
  v2[49] = swift_task_alloc((*(void *)(*(void *)(v11 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = type metadata accessor for BoostedTreeConfiguration(0);
  v2[50] = v12;
  uint64_t v13 = *(void *)(v12 - 8);
  v2[51] = v13;
  v2[52] = swift_task_alloc((*(void *)(v13 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PersistentParametersForTreeBasedMethods?);
  v2[53] = swift_task_alloc((*(void *)(*(void *)(v14 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v15 = type metadata accessor for PersistentParametersForTreeBasedMethods(0);
  v2[54] = v15;
  v2[55] = swift_task_alloc((*(void *)(*(void *)(v15 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  return swift_task_switch(MLDecisionTreeClassifier.init(delegate:), 0, 0);
}

uint64_t MLDecisionTreeClassifier.init(delegate:)()
{
  uint64_t v1 = *(void *)(v0 + 432);
  uint64_t v2 = *(void *)(v0 + 424);
  uint64_t v3 = OBJC_IVAR____TtC8CreateML37TreeClassifierTrainingSessionDelegate_trainingParameters + *(void *)(v0 + 288);
  swift_beginAccess(v3, v0 + 176, 0, 0);
  outlined init with copy of Either<LogisticRegressionClassifier<Float, String>, FullyConnectedNetworkClassifier<Float, String>>(v3, v2, &demangling cache variable for type metadata for PersistentParametersForTreeBasedMethods?);
  if (__swift_getEnumTagSinglePayload(v2, 1, v1) == 1) {
    BUG();
  }
  uint64_t v25 = (void *)(v0 + 144);
  uint64_t v4 = *(void *)(v0 + 440);
  uint64_t v5 = *(void *)(v0 + 432);
  uint64_t v6 = *(void *)(v0 + 416);
  uint64_t v27 = *(void *)(v0 + 408);
  uint64_t v7 = *(void *)(v0 + 400);
  uint64_t v33 = *(void *)(v0 + 392);
  uint64_t v31 = *(void *)(v0 + 368);
  uint64_t v29 = *(void *)(v0 + 376);
  outlined init with take of MLClassifierMetrics(*(void *)(v0 + 424), v4, type metadata accessor for PersistentParametersForTreeBasedMethods);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v27 + 16))(v6, v4 + *(int *)(v5 + 32), v7);
  outlined init with copy of Either<LogisticRegressionClassifier<Float, String>, FullyConnectedNetworkClassifier<Float, String>>(v4 + *(int *)(v5 + 20), v33, &demangling cache variable for type metadata for DataFrame?);
  *(_OWORD *)(v0 + 24) = 0;
  *(_OWORD *)(v0 + 40) = 0;
  *(void *)(v0 + 16) = BoostedTreeConfiguration.maximumDepth.getter();
  *(double *)(v0 + 56) = BoostedTreeConfiguration.minimumLossReduction.getter();
  *(double *)(v0 + 64) = BoostedTreeConfiguration.minimumChildWeight.getter();
  *(void *)(v0 + 72) = BoostedTreeConfiguration.randomSeed.getter();
  _sSq3mapyqd_0_Sgqd_0_xqd__YKXEqd__YKs5ErrorRd__Ri_d_0_r0_lF11TabularData0D5FrameV_s5NeverO8CreateML24MLDecisionTreeClassifierV15ModelParametersV010ValidationD0OTg503_s8g4ML24ijk3V15lm75V13configuration10validationAE0A12MLComponents07BoostedD13ConfigurationV_11c7Data0N5e12VSgtcfcAE010N21N0OAMcAPmcfu_ApMcfu0_AOXMtTf1ncn_n(v33);
  int EnumTagSinglePayload = __swift_getEnumTagSinglePayload(v31, 1, v29);
  uint64_t v9 = *(void *)(v0 + 384);
  if (EnumTagSinglePayload == 1)
  {
    uint64_t v10 = *(void *)(v0 + 368);
    swift_storeEnumTagMultiPayload(v9, *(void *)(v0 + 376), 3);
    outlined destroy of Either<LogisticRegressionClassifier<Float, String>, FullyConnectedNetworkClassifier<Float, String>>(v10, &demangling cache variable for type metadata for MLDecisionTreeClassifier.ModelParameters.ValidationData?);
  }
  else
  {
    outlined init with take of MLClassifierMetrics(*(void *)(v0 + 368), v9, type metadata accessor for MLDecisionTreeClassifier.ModelParameters.ValidationData);
  }
  uint64_t v11 = *(void *)(v0 + 440);
  uint64_t v30 = *(void *)(v0 + 432);
  uint64_t v34 = *(void *)(v0 + 416);
  uint64_t v32 = *(void *)(v0 + 408);
  uint64_t v23 = *(void *)(v0 + 400);
  uint64_t v24 = *(void *)(v0 + 392);
  uint64_t v12 = *(void *)(v0 + 384);
  uint64_t v13 = *(void *)(v0 + 288);
  uint64_t v28 = *(void *)(v0 + 344);
  *(void *)(v0 + 168) = *(void *)(v0 + 376);
  boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1(v25);
  outlined init with take of MLClassifierMetrics(v12, (uint64_t)boxed_opaque_existential_1, type metadata accessor for MLDecisionTreeClassifier.ModelParameters.ValidationData);
  outlined assign with take of Any?((uint64_t)v25, v0 + 24);
  outlined destroy of Either<LogisticRegressionClassifier<Float, String>, FullyConnectedNetworkClassifier<Float, String>>(v24, &demangling cache variable for type metadata for DataFrame?);
  (*(void (**)(uint64_t, uint64_t))(v32 + 8))(v34, v23);
  uint64_t v15 = *(int *)(v30 + 24);
  uint64_t v26 = *(void *)(v11 + v15);
  uint64_t v16 = *(void *)(v11 + v15 + 8);
  uint64_t v17 = *(void *)(v11 + *(int *)(v30 + 28));
  uint64_t v18 = OBJC_IVAR____TtC8CreateML37TreeClassifierTrainingSessionDelegate_model + v13;
  swift_beginAccess(v18, v0 + 200, 0, 0);
  outlined init with copy of Either<LogisticRegressionClassifier<Float, String>, FullyConnectedNetworkClassifier<Float, String>>(v18, v28, &demangling cache variable for type metadata for AnyTreeClassifierModel?);
  uint64_t v19 = type metadata accessor for AnyTreeClassifierModel(0);
  if (__swift_getEnumTagSinglePayload(v28, 1, v19) == 1) {
    BUG();
  }
  outlined init with copy of MLDecisionTreeClassifier.ModelParameters(v0 + 16, v0 + 80);
  uint64_t v20 = dword_3ACBE4;
  swift_bridgeObjectRetain(v16);
  swift_bridgeObjectRetain(v17);
  uint64_t v21 = (void *)swift_task_alloc(v20);
  *(void *)(v0 + 448) = v21;
  *uint64_t v21 = v0;
  v21[1] = MLDecisionTreeClassifier.init(delegate:);
  return MLDecisionTreeClassifier.init(_:targetColumn:featureColumns:parameters:)(*(void *)(v0 + 360), *(void *)(v0 + 344), v26, v16, v17, v0 + 80);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t (*v3)();

  uint64_t v2 = *(void *)(*(void *)v1 + 448);
  *(void *)(*(void *)v1 + 456) = v0;
  swift_task_dealloc(v2);
  if (v0) {
    uint64_t v3 = MLDecisionTreeClassifier.init(delegate:);
  }
  else {
    uint64_t v3 = MLDecisionTreeClassifier.init(delegate:);
  }
  return swift_task_switch(v3, 0, 0);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;

  uint64_t v1 = *(void *)(v0 + 328);
  uint64_t v2 = *(void *)(v0 + 296);
  uint64_t v3 = *(void *)(v0 + 288);
  outlined init with take of MLClassifierMetrics(*(void *)(v0 + 360), *(void *)(v0 + 280), type metadata accessor for MLDecisionTreeClassifier);
  uint64_t v4 = OBJC_IVAR____TtC8CreateML37TreeClassifierTrainingSessionDelegate_trainingMetrics + v3;
  swift_beginAccess(v4, v0 + 224, 0, 0);
  outlined init with copy of Either<LogisticRegressionClassifier<Float, String>, FullyConnectedNetworkClassifier<Float, String>>(v4, v1, &demangling cache variable for type metadata for AnyClassificationMetrics?);
  if (__swift_getEnumTagSinglePayload(v1, 1, v2) == 1) {
    BUG();
  }
  uint64_t v5 = *(void *)(v0 + 440);
  uint64_t v24 = *(void *)(v0 + 352);
  uint64_t v6 = *(void *)(v0 + 336);
  uint64_t v7 = *(void *)(v0 + 328);
  uint64_t v31 = *(void *)(v0 + 320);
  uint64_t v28 = *(void *)(v0 + 296);
  uint64_t v26 = *(void *)(v0 + 280);
  uint64_t v8 = *(void *)(v0 + 288);
  outlined destroy of MLDecisionTreeClassifier.ModelParameters(v0 + 16);
  outlined destroy of MLActivityClassifier.ModelParameters(v5, type metadata accessor for PersistentParametersForTreeBasedMethods);
  outlined init with take of MLClassifierMetrics(v7, v6, type metadata accessor for AnyClassificationMetrics);
  uint64_t v9 = type metadata accessor for MLClassifierMetrics.Contents(0);
  swift_storeEnumTagMultiPayload(v6, v9, 0);
  outlined assign with take of MLClassifierMetrics(v6, v26 + *(int *)(v24 + 36));
  uint64_t v10 = v8 + OBJC_IVAR____TtC8CreateML37TreeClassifierTrainingSessionDelegate_validationMetrics;
  swift_beginAccess(v8 + OBJC_IVAR____TtC8CreateML37TreeClassifierTrainingSessionDelegate_validationMetrics, v0 + 248, 0, 0);
  outlined init with copy of Either<LogisticRegressionClassifier<Float, String>, FullyConnectedNetworkClassifier<Float, String>>(v10, v31, &demangling cache variable for type metadata for AnyClassificationMetrics?);
  swift_release();
  if (__swift_getEnumTagSinglePayload(v31, 1, v28) == 1)
  {
    outlined destroy of Either<LogisticRegressionClassifier<Float, String>, FullyConnectedNetworkClassifier<Float, String>>(*(void *)(v0 + 320), &demangling cache variable for type metadata for AnyClassificationMetrics?);
  }
  else
  {
    uint64_t v32 = *(void *)(v0 + 352);
    uint64_t v11 = *(void *)(v0 + 312);
    uint64_t v12 = *(void *)(v0 + 280);
    uint64_t v29 = v9;
    uint64_t v13 = *(void *)(v0 + 304);
    outlined init with take of MLClassifierMetrics(*(void *)(v0 + 320), v11, type metadata accessor for AnyClassificationMetrics);
    outlined init with take of MLClassifierMetrics(v11, v13, type metadata accessor for AnyClassificationMetrics);
    uint64_t v14 = v12 + *(int *)(v32 + 40);
    outlined destroy of MLActivityClassifier.ModelParameters(v14, type metadata accessor for MLClassifierMetrics);
    outlined init with take of MLClassifierMetrics(v13, v14, type metadata accessor for AnyClassificationMetrics);
    swift_storeEnumTagMultiPayload(v14, v29, 0);
  }
  uint64_t v15 = *(void *)(v0 + 424);
  uint64_t v16 = *(void *)(v0 + 416);
  uint64_t v17 = *(void *)(v0 + 392);
  uint64_t v18 = *(void *)(v0 + 384);
  uint64_t v22 = *(void *)(v0 + 368);
  uint64_t v21 = *(void *)(v0 + 360);
  uint64_t v20 = *(void *)(v0 + 344);
  uint64_t v27 = *(void *)(v0 + 336);
  uint64_t v25 = *(void *)(v0 + 328);
  uint64_t v23 = *(void *)(v0 + 320);
  uint64_t v30 = *(void *)(v0 + 304);
  uint64_t v33 = *(void *)(v0 + 312);
  swift_task_dealloc(*(void *)(v0 + 440));
  swift_task_dealloc(v15);
  swift_task_dealloc(v16);
  swift_task_dealloc(v17);
  swift_task_dealloc(v18);
  swift_task_dealloc(v22);
  swift_task_dealloc(v21);
  swift_task_dealloc(v20);
  swift_task_dealloc(v27);
  swift_task_dealloc(v25);
  swift_task_dealloc(v23);
  swift_task_dealloc(v33);
  swift_task_dealloc(v30);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  uint64_t v1 = *(void *)(v0 + 440);
  uint64_t v2 = *(void *)(v0 + 424);
  uint64_t v3 = *(void *)(v0 + 416);
  uint64_t v14 = *(void *)(v0 + 392);
  uint64_t v13 = *(void *)(v0 + 384);
  uint64_t v12 = *(void *)(v0 + 368);
  uint64_t v11 = *(void *)(v0 + 360);
  uint64_t v10 = *(void *)(v0 + 344);
  uint64_t v9 = *(void *)(v0 + 336);
  uint64_t v8 = *(void *)(v0 + 328);
  uint64_t v7 = *(void *)(v0 + 320);
  uint64_t v6 = *(void *)(v0 + 312);
  uint64_t v5 = *(void *)(v0 + 304);
  swift_release();
  outlined destroy of MLDecisionTreeClassifier.ModelParameters(v0 + 16);
  outlined destroy of MLActivityClassifier.ModelParameters(v1, type metadata accessor for PersistentParametersForTreeBasedMethods);
  swift_task_dealloc(v1);
  swift_task_dealloc(v2);
  swift_task_dealloc(v3);
  swift_task_dealloc(v14);
  swift_task_dealloc(v13);
  swift_task_dealloc(v12);
  swift_task_dealloc(v11);
  swift_task_dealloc(v10);
  swift_task_dealloc(v9);
  swift_task_dealloc(v8);
  swift_task_dealloc(v7);
  swift_task_dealloc(v6);
  swift_task_dealloc(v5);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

unint64_t protocol witness for CustomStringConvertible.description.getter in conformance MLDecisionTreeClassifier()
{
  return MLDecisionTreeClassifier.description.getter();
}

unint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance MLDecisionTreeClassifier()
{
  return MLDecisionTreeClassifier.debugDescription.getter();
}

NSAttributedString protocol witness for CustomPlaygroundDisplayConvertible.playgroundDescription.getter in conformance MLDecisionTreeClassifier()
{
  return MLDecisionTreeClassifier.playgroundDescription.getter();
}

uint64_t protocol witness for TabularClassificationTask.validationMetrics.getter in conformance MLDecisionTreeClassifier()
{
  return MLDecisionTreeClassifier.validationMetrics.getter();
}

uint64_t outlined init with copy of MLDecisionTreeClassifier.ModelParameters(uint64_t a1, uint64_t a2)
{
  (*(void (**)(uint64_t, uint64_t))(*((void *)&type metadata for MLDecisionTreeClassifier.ModelParameters - 1)
                                           + 16))(a2, a1);
  return a2;
}

uint64_t outlined destroy of MLDecisionTreeClassifier.ModelParameters(uint64_t a1)
{
  return a1;
}

uint64_t outlined init with take of DataFrame?(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for DataFrame?);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v2 - 8) + 32))(a2, a1, v2);
  return a2;
}

uint64_t sub_237F35()
{
  return objectdestroyTm_3();
}

uint64_t partial apply for closure #1 in MLDecisionTreeClassifier.init(trainingData:targetColumn:featureColumns:parameters:)(uint64_t a1)
{
  type metadata accessor for AnyTreeClassifierModel(0);
  uint64_t v2 = (void *)swift_task_alloc(dword_3ACAE4);
  *(void *)(v1 + 16) = v2;
  *uint64_t v2 = v1;
  v2[1] = partial apply for closure #1 in MLActivityClassifier.init(trainingData:featureColumns:labelColumn:recordingFileColumn:parameters:);
  return closure #1 in MLDecisionTreeClassifier.init(trainingData:targetColumn:featureColumns:parameters:)(a1);
}

uint64_t sub_237FC3()
{
  return objectdestroyTm_3();
}

uint64_t partial apply for closure #1 in MLDecisionTreeClassifier.init(checkpoint:)(uint64_t a1)
{
  type metadata accessor for AnyTreeClassifierModel(0);
  uint64_t v2 = (void *)swift_task_alloc(dword_3ACAF4);
  *(void *)(v1 + 16) = v2;
  *uint64_t v2 = v1;
  v2[1] = partial apply for closure #1 in MLActivityClassifier.init(trainingData:featureColumns:labelColumn:recordingFileColumn:parameters:);
  return closure #1 in MLRandomForestClassifier.init(checkpoint:)(a1);
}

id sub_23805B()
{
  uint64_t v1 = v0;
  id result = MLDecisionTreeClassifier.model.getter();
  void *v1 = result;
  return result;
}

void sub_238075(id *a1)
{
}

void *initializeBufferWithCopyOfBuffer for MLDecisionTreeClassifier(void *a1, void *a2, int *a3)
{
  uint64_t v4 = a1;
  int v5 = *(_DWORD *)(*((void *)a3 - 1) + 80);
  if ((v5 & 0x20000) == 0)
  {
    *a1 = *a2;
    uint64_t v6 = a2[1];
    v4[1] = v6;
    uint64_t v7 = a2[2];
    swift_bridgeObjectRetain(v6);
    if (v7)
    {
      v4[2] = v7;
      uint64_t v4[3] = a2[3];
      uint64_t v8 = a2[4];
      void v4[4] = v8;
      swift_bridgeObjectRetain(v7);
      swift_bridgeObjectRetain(v8);
    }
    else
    {
      void v4[4] = a2[4];
      *((_OWORD *)v4 + 1) = *((_OWORD *)a2 + 1);
    }
    uint64_t v10 = type metadata accessor for AnyTreeClassifierModel(0);
    uint64_t v11 = *(int *)(v10 + 24);
    uint64_t v12 = type metadata accessor for BaseTreeClassifierModel(0);
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v12 - 8) + 16))((char *)v4 + v11, (char *)a2 + v11, v12);
    uint64_t v13 = *(int *)(v10 + 28);
    uint64_t v14 = *(void *)((char *)a2 + v13);
    char v15 = *((unsigned char *)a2 + v13 + 8);
    *(void *)((char *)v4 + v13) = v14;
    *((unsigned char *)v4 + v13 + 8) = v15;
    uint64_t v16 = a3[5];
    id v57 = *(id *)((char *)a2 + v16);
    *(void *)((char *)v4 + v16) = v57;
    uint64_t v17 = a3[6];
    *(void *)((char *)v4 + v17) = *(void *)((char *)a2 + v17);
    uint64_t v18 = *(void *)((char *)a2 + v17 + 8);
    *(void *)((char *)v4 + v17 + 8) = v18;
    uint64_t v19 = a3[7];
    uint64_t v59 = *(void *)((char *)a2 + v19);
    *(void *)((char *)v4 + v19) = v59;
    uint64_t v20 = a3[8];
    uint64_t v68 = (char *)v4 + v20;
    uint64_t v63 = (char *)a2 + v20;
    uint64_t v21 = (long long *)((char *)a2 + v20 + 8);
    uint64_t v65 = (_OWORD *)((char *)v4 + v20 + 8);
    *(void *)((char *)v4 + v20) = *(void *)((char *)a2 + v20);
    uint64_t v22 = *(void *)((char *)a2 + v20 + 32);
    swift_bridgeObjectRetain(v14);
    v57;
    swift_bridgeObjectRetain(v18);
    swift_bridgeObjectRetain(v59);
    if (v22)
    {
      *((void *)v68 + 4) = v22;
      (**(void (***)(_OWORD *, long long *, uint64_t))(v22 - 8))(v65, v21, v22);
    }
    else
    {
      long long v23 = *v21;
      v65[1] = v21[1];
      _OWORD *v65 = v23;
    }
    *(_OWORD *)(v68 + 40) = *(_OWORD *)(v63 + 40);
    *((void *)v68 + 7) = *((void *)v63 + 7);
    uint64_t v24 = a3[9];
    uint64_t v25 = (void *)((char *)v4 + v24);
    uint64_t v26 = (char *)a2 + v24;
    uint64_t v64 = type metadata accessor for MLClassifierMetrics.Contents(0);
    unsigned int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload(v26, v64);
    if (EnumCaseMultiPayload == 2)
    {
      uint64_t v32 = v25;
      uint64_t v33 = *(void *)v26;
      swift_errorRetain(*(void *)v26);
      void *v32 = v33;
      uint64_t v25 = v32;
      unsigned int EnumCaseMultiPayload = 2;
    }
    else if (EnumCaseMultiPayload == 1)
    {
      *uint64_t v25 = *(void *)v26;
      uint64_t v58 = (int *)type metadata accessor for MLClassifierMetrics.Precomputed(0);
      uint64_t v66 = v25;
      uint64_t v28 = v58[5];
      uint64_t v56 = (char *)v66 + v28;
      uint64_t v29 = type metadata accessor for DataFrame(0);
      uint64_t v60 = *(void (**)(char *, char *, uint64_t))(*(void *)(v29 - 8) + 16);
      uint64_t v30 = &v26[v28];
      uint64_t v25 = v66;
      v60(v56, v30, v29);
      uint64_t v31 = v29;
      unsigned int EnumCaseMultiPayload = 1;
      v60((char *)v66 + v58[6], &v26[v58[6]], v31);
    }
    else
    {
      uint64_t v69 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Either<ClassificationMetrics<String>, ClassificationMetrics<Int>>);
      int v34 = swift_getEnumCaseMultiPayload(v26, v69);
      BOOL v67 = v34 == 1;
      uint64_t v35 = &demangling cache variable for type metadata for ClassificationMetrics<String>;
      if (v34 == 1) {
        uint64_t v35 = &demangling cache variable for type metadata for ClassificationMetrics<Int>;
      }
      uint64_t v36 = __swift_instantiateConcreteTypeFromMangledName(v35);
      (*(void (**)(void *, char *, uint64_t))(*(void *)(v36 - 8) + 16))(v25, v26, v36);
      swift_storeEnumTagMultiPayload(v25, v69, v67);
    }
    swift_storeEnumTagMultiPayload(v25, v64, EnumCaseMultiPayload);
    uint64_t v37 = a3[10];
    BOOL v38 = (void *)((char *)v4 + v37);
    uint64_t v39 = (void *)((char *)a2 + v37);
    int v40 = swift_getEnumCaseMultiPayload(v39, v64);
    if (v40 == 2)
    {
      uint64_t v45 = *v39;
      swift_errorRetain(v45);
      uint64_t *v38 = v45;
      uint64_t v55 = 2;
    }
    else
    {
      if (v40 != 1)
      {
        uint64_t v49 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Either<ClassificationMetrics<String>, ClassificationMetrics<Int>>);
        int v50 = swift_getEnumCaseMultiPayload(v39, v49);
        BOOL v51 = v50 == 1;
        unint64_t v52 = &demangling cache variable for type metadata for ClassificationMetrics<String>;
        if (v50 == 1) {
          unint64_t v52 = &demangling cache variable for type metadata for ClassificationMetrics<Int>;
        }
        uint64_t v53 = __swift_instantiateConcreteTypeFromMangledName(v52);
        (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(void *)(v53 - 8) + 16))(v38, v39, v53);
        swift_storeEnumTagMultiPayload(v38, v49, v51);
        double v47 = v38;
        uint64_t v48 = v64;
        uint64_t v46 = 0;
        goto LABEL_24;
      }
      uint64_t *v38 = *v39;
      uint64_t v62 = type metadata accessor for MLClassifierMetrics.Precomputed(0);
      uint64_t v41 = *(int *)(v62 + 20);
      uint64_t v70 = (char *)v38 + v41;
      uint64_t v42 = type metadata accessor for DataFrame(0);
      uint64_t v43 = (char *)v39 + v41;
      long long v44 = *(void (**)(char *, char *, uint64_t))(*(void *)(v42 - 8) + 16);
      v44(v70, v43, v42);
      v44((char *)v38 + *(int *)(v62 + 24), (char *)v39 + *(int *)(v62 + 24), v42);
      uint64_t v55 = 1;
    }
    uint64_t v46 = v55;
    double v47 = v38;
    uint64_t v48 = v64;
LABEL_24:
    swift_storeEnumTagMultiPayload(v47, v48, v46);
    return v4;
  }
  uint64_t v9 = *a2;
  *uint64_t v4 = *a2;
  uint64_t v4 = (void *)(v9 + ((v5 + 16) & ~v5));
  swift_retain();
  return v4;
}

uint64_t destroy for MLDecisionTreeClassifier(void *a1, int *a2)
{
  swift_bridgeObjectRelease(a1[1]);
  uint64_t v4 = a1[2];
  if (v4)
  {
    swift_bridgeObjectRelease(v4);
    swift_bridgeObjectRelease(a1[4]);
  }
  uint64_t v5 = type metadata accessor for AnyTreeClassifierModel(0);
  uint64_t v6 = (char *)a1 + *(int *)(v5 + 24);
  uint64_t v7 = type metadata accessor for BaseTreeClassifierModel(0);
  (*(void (**)(char *, uint64_t))(*(void *)(v7 - 8) + 8))(v6, v7);
  swift_bridgeObjectRelease(*(void *)((char *)a1 + *(int *)(v5 + 28)));

  swift_bridgeObjectRelease(*(void *)((char *)a1 + a2[6] + 8));
  swift_bridgeObjectRelease(*(void *)((char *)a1 + a2[7]));
  uint64_t v8 = a2[8];
  if (*(void *)((char *)a1 + v8 + 32)) {
    __swift_destroy_boxed_opaque_existential_1Tm((void *)((char *)a1 + v8 + 8));
  }
  uint64_t v9 = (char *)a1 + a2[9];
  uint64_t v10 = type metadata accessor for MLClassifierMetrics.Contents(0);
  int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload(v9, v10);
  switch(EnumCaseMultiPayload)
  {
    case 2:
      swift_errorRelease(*(void *)v9);
      break;
    case 1:
      uint64_t v30 = type metadata accessor for MLClassifierMetrics.Precomputed(0);
      uint64_t v14 = &v9[*(int *)(v30 + 20)];
      uint64_t v29 = v10;
      uint64_t v15 = type metadata accessor for DataFrame(0);
      uint64_t v16 = v14;
      uint64_t v17 = *(void (**)(char *, uint64_t))(*(void *)(v15 - 8) + 8);
      v17(v16, v15);
      uint64_t v18 = v15;
      uint64_t v10 = v29;
      v17(&v9[*(int *)(v30 + 24)], v18);
      break;
    case 0:
      uint64_t v12 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Either<ClassificationMetrics<String>, ClassificationMetrics<Int>>);
      if (swift_getEnumCaseMultiPayload(v9, v12) == 1) {
        uint64_t v13 = &demangling cache variable for type metadata for ClassificationMetrics<Int>;
      }
      else {
        uint64_t v13 = &demangling cache variable for type metadata for ClassificationMetrics<String>;
      }
      uint64_t v19 = __swift_instantiateConcreteTypeFromMangledName(v13);
      (*(void (**)(char *, uint64_t))(*(void *)(v19 - 8) + 8))(v9, v19);
      break;
  }
  uint64_t v20 = (void *)((char *)a1 + a2[10]);
  uint64_t result = swift_getEnumCaseMultiPayload(v20, v10);
  switch(result)
  {
    case 2:
      return swift_errorRelease(*v20);
    case 1:
      uint64_t v24 = type metadata accessor for MLClassifierMetrics.Precomputed(0);
      uint64_t v25 = (char *)v20 + *(int *)(v24 + 20);
      uint64_t v26 = type metadata accessor for DataFrame(0);
      uint64_t v27 = *(void (**)(char *, uint64_t))(*(void *)(v26 - 8) + 8);
      v27(v25, v26);
      return ((uint64_t (*)(char *, uint64_t))v27)((char *)v20 + *(int *)(v24 + 24), v26);
    case 0:
      uint64_t v22 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Either<ClassificationMetrics<String>, ClassificationMetrics<Int>>);
      if (swift_getEnumCaseMultiPayload(v20, v22) == 1) {
        long long v23 = &demangling cache variable for type metadata for ClassificationMetrics<Int>;
      }
      else {
        long long v23 = &demangling cache variable for type metadata for ClassificationMetrics<String>;
      }
      uint64_t v28 = __swift_instantiateConcreteTypeFromMangledName(v23);
      return (*(uint64_t (**)(void *, uint64_t))(*(void *)(v28 - 8) + 8))(v20, v28);
  }
  return result;
}

void *initializeWithCopy for MLDecisionTreeClassifier(void *a1, void *a2, int *a3)
{
  *a1 = *a2;
  uint64_t v4 = a2[1];
  a1[1] = v4;
  uint64_t v5 = a2[2];
  swift_bridgeObjectRetain(v4);
  if (v5)
  {
    a1[2] = v5;
    a1[3] = a2[3];
    uint64_t v6 = a2[4];
    a1[4] = v6;
    swift_bridgeObjectRetain(v5);
    swift_bridgeObjectRetain(v6);
  }
  else
  {
    a1[4] = a2[4];
    *((_OWORD *)a1 + 1) = *((_OWORD *)a2 + 1);
  }
  uint64_t v7 = type metadata accessor for AnyTreeClassifierModel(0);
  uint64_t v8 = *(int *)(v7 + 24);
  uint64_t v9 = type metadata accessor for BaseTreeClassifierModel(0);
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v9 - 8) + 16))((char *)a1 + v8, (char *)a2 + v8, v9);
  uint64_t v10 = *(int *)(v7 + 28);
  uint64_t v11 = *(void *)((char *)a2 + v10);
  char v12 = *((unsigned char *)a2 + v10 + 8);
  *(void *)((char *)a1 + v10) = v11;
  *((unsigned char *)a1 + v10 + 8) = v12;
  uint64_t v13 = a3[5];
  uint64_t v14 = *(void **)((char *)a2 + v13);
  *(void *)((char *)a1 + v13) = v14;
  uint64_t v15 = a3[6];
  *(void *)((char *)a1 + v15) = *(void *)((char *)a2 + v15);
  uint64_t v16 = a1;
  uint64_t v17 = *(void *)((char *)a2 + v15 + 8);
  *(void *)((char *)v16 + v15 + 8) = v17;
  uint64_t v18 = a3[7];
  uint64_t v19 = *(void *)((char *)a2 + v18);
  *(void *)((char *)v16 + v18) = v19;
  uint64_t v20 = a3[8];
  uint64_t v62 = (char *)v16 + v20;
  uint64_t v53 = (char *)a2 + v20;
  uint64_t v21 = (long long *)((char *)a2 + v20 + 8);
  unint64_t v52 = v16;
  uint64_t v55 = (_OWORD *)((char *)v16 + v20 + 8);
  *(void *)((char *)v16 + v20) = *(void *)((char *)a2 + v20);
  uint64_t v22 = *(void *)((char *)a2 + v20 + 32);
  swift_bridgeObjectRetain(v11);
  v14;
  swift_bridgeObjectRetain(v17);
  swift_bridgeObjectRetain(v19);
  if (v22)
  {
    *((void *)v62 + 4) = v22;
    (**(void (***)(_OWORD *, long long *, uint64_t))(v22 - 8))(v55, v21, v22);
  }
  else
  {
    long long v23 = *v21;
    v55[1] = v21[1];
    *uint64_t v55 = v23;
  }
  *(_OWORD *)(v62 + 40) = *(_OWORD *)(v53 + 40);
  *((void *)v62 + 7) = *((void *)v53 + 7);
  uint64_t v24 = a3[9];
  uint64_t v25 = (char *)v52 + v24;
  uint64_t v26 = (char *)a2 + v24;
  uint64_t v54 = type metadata accessor for MLClassifierMetrics.Contents(0);
  unsigned int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload(v26, v54);
  if (EnumCaseMultiPayload == 2)
  {
    uint64_t v32 = *(void *)v26;
    swift_errorRetain(*(void *)v26);
    *(void *)uint64_t v25 = v32;
  }
  else if (EnumCaseMultiPayload == 1)
  {
    *(void *)uint64_t v25 = *(void *)v26;
    uint64_t v63 = type metadata accessor for MLClassifierMetrics.Precomputed(0);
    uint64_t v28 = *(int *)(v63 + 20);
    uint64_t v56 = &v25[v28];
    uint64_t v29 = type metadata accessor for DataFrame(0);
    uint64_t v30 = &v26[v28];
    uint64_t v31 = *(void (**)(char *, char *, uint64_t))(*(void *)(v29 - 8) + 16);
    v31(v56, v30, v29);
    v31(&v25[*(int *)(v63 + 24)], &v26[*(int *)(v63 + 24)], v29);
  }
  else
  {
    uint64_t v64 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Either<ClassificationMetrics<String>, ClassificationMetrics<Int>>);
    int v33 = swift_getEnumCaseMultiPayload(v26, v64);
    BOOL v34 = v33 == 1;
    uint64_t v35 = &demangling cache variable for type metadata for ClassificationMetrics<String>;
    if (v33 == 1) {
      uint64_t v35 = &demangling cache variable for type metadata for ClassificationMetrics<Int>;
    }
    uint64_t v36 = __swift_instantiateConcreteTypeFromMangledName(v35);
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v36 - 8) + 16))(v25, v26, v36);
    swift_storeEnumTagMultiPayload(v25, v64, v34);
  }
  swift_storeEnumTagMultiPayload(v25, v54, EnumCaseMultiPayload);
  uint64_t v37 = a3[10];
  BOOL v38 = (char *)v52 + v37;
  uint64_t v39 = (char *)a2 + v37;
  unsigned int v40 = swift_getEnumCaseMultiPayload((char *)a2 + v37, v54);
  if (v40 == 2)
  {
    uint64_t v45 = *(void *)v39;
    swift_errorRetain(v45);
    *(void *)BOOL v38 = v45;
  }
  else if (v40 == 1)
  {
    *(void *)BOOL v38 = *(void *)v39;
    uint64_t v58 = type metadata accessor for MLClassifierMetrics.Precomputed(0);
    uint64_t v41 = *(int *)(v58 + 20);
    uint64_t v60 = &v38[v41];
    uint64_t v42 = type metadata accessor for DataFrame(0);
    uint64_t v43 = &v39[v41];
    long long v44 = *(void (**)(char *, char *, uint64_t))(*(void *)(v42 - 8) + 16);
    v44(v60, v43, v42);
    v44(&v38[*(int *)(v58 + 24)], &v39[*(int *)(v58 + 24)], v42);
  }
  else
  {
    uint64_t v46 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Either<ClassificationMetrics<String>, ClassificationMetrics<Int>>);
    int v47 = swift_getEnumCaseMultiPayload(v39, v46);
    uint64_t v61 = v39;
    BOOL v48 = v47 == 1;
    uint64_t v49 = &demangling cache variable for type metadata for ClassificationMetrics<String>;
    if (v47 == 1) {
      uint64_t v49 = &demangling cache variable for type metadata for ClassificationMetrics<Int>;
    }
    uint64_t v50 = __swift_instantiateConcreteTypeFromMangledName(v49);
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v50 - 8) + 16))(v38, v61, v50);
    swift_storeEnumTagMultiPayload(v38, v46, v48);
  }
  swift_storeEnumTagMultiPayload(v38, v54, v40);
  return v52;
}

void *assignWithCopy for MLDecisionTreeClassifier(void *a1, void *a2, int *a3)
{
  *a1 = *a2;
  uint64_t v4 = a2[1];
  uint64_t v5 = a1[1];
  a1[1] = v4;
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRelease(v5);
  uint64_t v6 = a1 + 2;
  uint64_t v7 = a2 + 2;
  uint64_t v8 = a1[2];
  uint64_t v9 = a2[2];
  if (v8)
  {
    if (v9)
    {
      a1[2] = v9;
      swift_bridgeObjectRetain(v9);
      swift_bridgeObjectRelease(v8);
      uint64_t v10 = (char *)a2;
      a1[3] = a2[3];
      uint64_t v11 = a2[4];
      uint64_t v12 = a1[4];
      a1[4] = v11;
      swift_bridgeObjectRetain(v11);
      swift_bridgeObjectRelease(v12);
      goto LABEL_9;
    }
    outlined destroy of Either<LogisticRegressionClassifier<Float, String>, FullyConnectedNetworkClassifier<Float, String>>((uint64_t)(a1 + 2), &demangling cache variable for type metadata for FeatureVectorizer<Float>.Transformer);
    *uint64_t v6 = *v7;
    a1[4] = a2[4];
  }
  else
  {
    if (v9)
    {
      a1[2] = v9;
      uint64_t v10 = (char *)a2;
      a1[3] = a2[3];
      uint64_t v13 = a2[4];
      a1[4] = v13;
      swift_bridgeObjectRetain(v9);
      swift_bridgeObjectRetain(v13);
      goto LABEL_9;
    }
    a1[4] = a2[4];
    *uint64_t v6 = *v7;
  }
  uint64_t v10 = (char *)a2;
LABEL_9:
  uint64_t v14 = type metadata accessor for AnyTreeClassifierModel(0);
  uint64_t v15 = *(int *)(v14 + 24);
  uint64_t v16 = type metadata accessor for BaseTreeClassifierModel(0);
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v16 - 8) + 24))((char *)a1 + v15, &v10[v15], v16);
  uint64_t v17 = *(int *)(v14 + 28);
  uint64_t v18 = *(void *)&v10[v17];
  char v19 = v10[v17 + 8];
  uint64_t v20 = *(void *)((char *)a1 + v17);
  *(void *)((char *)a1 + v17) = v18;
  *((unsigned char *)a1 + v17 + 8) = v19;
  swift_bridgeObjectRetain(v18);
  swift_bridgeObjectRelease(v20);
  uint64_t v21 = a3[5];
  uint64_t v22 = *(void **)&v10[v21];
  long long v23 = *(void **)((char *)a1 + v21);
  *(void *)((char *)a1 + v21) = v22;
  v22;

  uint64_t v24 = a3[6];
  *(void *)((char *)a1 + v24) = *(void *)&v10[v24];
  uint64_t v25 = *(void *)&v10[v24 + 8];
  uint64_t v26 = *(void *)((char *)a1 + v24 + 8);
  *(void *)((char *)a1 + v24 + 8) = v25;
  swift_bridgeObjectRetain(v25);
  swift_bridgeObjectRelease(v26);
  uint64_t v27 = a3[7];
  uint64_t v28 = *(void *)&v10[v27];
  uint64_t v29 = *(void *)((char *)a1 + v27);
  *(void *)((char *)a1 + v27) = v28;
  swift_bridgeObjectRetain(v28);
  swift_bridgeObjectRelease(v29);
  uint64_t v30 = a3[8];
  uint64_t v31 = (void *)((char *)a1 + v30);
  uint64_t v32 = v10;
  int v33 = &v10[v30];
  uint64_t v34 = (uint64_t)v32 + v30 + 8;
  uint64_t v35 = (_OWORD *)((char *)a1 + v30 + 8);
  *(void *)((char *)a1 + v30) = *(void *)((char *)v32 + v30);
  uint64_t v36 = *(void *)((char *)v32 + v30 + 32);
  if (*(void *)((char *)a1 + v30 + 32))
  {
    if (v36)
    {
      __swift_assign_boxed_opaque_existential_0((void *)((char *)a1 + v30 + 8), (uint64_t *)v34);
      goto LABEL_16;
    }
    __swift_destroy_boxed_opaque_existential_1Tm((void *)((char *)a1 + v30 + 8));
  }
  else if (v36)
  {
    v31[4] = v36;
    (**(void (***)(_OWORD *, uint64_t))(v36 - 8))(v35, v34);
    goto LABEL_16;
  }
  long long v37 = *(_OWORD *)v34;
  v35[1] = *(_OWORD *)(v34 + 16);
  *uint64_t v35 = v37;
LABEL_16:
  v31[5] = *((void *)v33 + 5);
  v31[6] = *((void *)v33 + 6);
  v31[7] = *((void *)v33 + 7);
  BOOL v38 = a2;
  if (a1 != a2)
  {
    uint64_t v39 = a3[9];
    unsigned int v40 = (void *)((char *)a1 + v39);
    uint64_t v41 = (void *)((char *)a2 + v39);
    outlined destroy of MLActivityClassifier.ModelParameters((uint64_t)v40, type metadata accessor for MLClassifierMetrics.Contents);
    uint64_t v42 = type metadata accessor for MLClassifierMetrics.Contents(0);
    unsigned int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload(v41, v42);
    unsigned int v68 = EnumCaseMultiPayload;
    if (EnumCaseMultiPayload == 2)
    {
      uint64_t v48 = *v41;
      swift_errorRetain(v48);
      uint64_t v47 = 2;
      *unsigned int v40 = v48;
    }
    else if (EnumCaseMultiPayload == 1)
    {
      *unsigned int v40 = *v41;
      uint64_t v73 = type metadata accessor for MLClassifierMetrics.Precomputed(0);
      uint64_t v70 = v42;
      uint64_t v44 = *(int *)(v73 + 20);
      uint64_t v66 = (char *)v40 + v44;
      uint64_t v67 = type metadata accessor for DataFrame(0);
      uint64_t v45 = *(void (**)(char *, char *, uint64_t))(*(void *)(v67 - 8) + 16);
      uint64_t v46 = (char *)v41 + v44;
      uint64_t v42 = v70;
      v45(v66, v46, v67);
      v45((char *)v40 + *(int *)(v73 + 24), (char *)v41 + *(int *)(v73 + 24), v67);
      uint64_t v47 = v68;
      BOOL v38 = a2;
    }
    else
    {
      uint64_t v71 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Either<ClassificationMetrics<String>, ClassificationMetrics<Int>>);
      int v49 = swift_getEnumCaseMultiPayload(v41, v71);
      BOOL v74 = v49 == 1;
      uint64_t v50 = &demangling cache variable for type metadata for ClassificationMetrics<String>;
      if (v49 == 1) {
        uint64_t v50 = &demangling cache variable for type metadata for ClassificationMetrics<Int>;
      }
      uint64_t v51 = __swift_instantiateConcreteTypeFromMangledName(v50);
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(void *)(v51 - 8) + 16))(v40, v41, v51);
      swift_storeEnumTagMultiPayload(v40, v71, v74);
      uint64_t v47 = v68;
    }
    swift_storeEnumTagMultiPayload(v40, v42, v47);
    uint64_t v52 = a3[10];
    uint64_t v53 = (void *)((char *)a1 + v52);
    uint64_t v54 = (void *)((char *)v38 + v52);
    outlined destroy of MLActivityClassifier.ModelParameters((uint64_t)a1 + v52, type metadata accessor for MLClassifierMetrics.Contents);
    unsigned int v55 = swift_getEnumCaseMultiPayload(v54, v42);
    if (v55 == 2)
    {
      uint64_t v60 = *v54;
      swift_errorRetain(v60);
      *uint64_t v53 = v60;
    }
    else
    {
      unsigned int v77 = v55;
      if (v55 == 1)
      {
        *uint64_t v53 = *v54;
        uint64_t v69 = type metadata accessor for MLClassifierMetrics.Precomputed(0);
        uint64_t v56 = *(int *)(v69 + 20);
        uint64_t v75 = (char *)v53 + v56;
        uint64_t v72 = v42;
        uint64_t v57 = type metadata accessor for DataFrame(0);
        uint64_t v79 = *(void (**)(char *, char *, uint64_t))(*(void *)(v57 - 8) + 16);
        uint64_t v58 = (char *)v54 + v56;
        unsigned int v55 = 1;
        v79(v75, v58, v57);
        uint64_t v59 = v57;
        uint64_t v42 = v72;
        v79((char *)v53 + *(int *)(v69 + 24), (char *)v54 + *(int *)(v69 + 24), v59);
      }
      else
      {
        uint64_t v80 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Either<ClassificationMetrics<String>, ClassificationMetrics<Int>>);
        int v61 = swift_getEnumCaseMultiPayload(v54, v80);
        BOOL v62 = v61 == 1;
        uint64_t v63 = &demangling cache variable for type metadata for ClassificationMetrics<String>;
        if (v61 == 1) {
          uint64_t v63 = &demangling cache variable for type metadata for ClassificationMetrics<Int>;
        }
        uint64_t v64 = __swift_instantiateConcreteTypeFromMangledName(v63);
        (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(void *)(v64 - 8) + 16))(v53, v54, v64);
        swift_storeEnumTagMultiPayload(v53, v80, v62);
        unsigned int v55 = v77;
      }
    }
    swift_storeEnumTagMultiPayload(v53, v42, v55);
  }
  return a1;
}

uint64_t initializeWithTake for MLDecisionTreeClassifier(uint64_t a1, uint64_t a2, int *a3)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  uint64_t v5 = type metadata accessor for AnyTreeClassifierModel(0);
  uint64_t v6 = *(int *)(v5 + 24);
  uint64_t v7 = type metadata accessor for BaseTreeClassifierModel(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 32))(a1 + v6, a2 + v6, v7);
  uint64_t v8 = *(int *)(v5 + 28);
  *(unsigned char *)(a1 + v8 + 8) = *(unsigned char *)(a2 + v8 + 8);
  *(void *)(a1 + v8) = *(void *)(a2 + v8);
  *(void *)(a1 + a3[5]) = *(void *)(a2 + a3[5]);
  *(_OWORD *)(a1 + a3[6]) = *(_OWORD *)(a2 + a3[6]);
  *(void *)(a1 + a3[7]) = *(void *)(a2 + a3[7]);
  uint64_t v9 = a3[8];
  long long v10 = *(_OWORD *)(a2 + v9);
  long long v11 = *(_OWORD *)(a2 + v9 + 16);
  long long v12 = *(_OWORD *)(a2 + v9 + 32);
  *(_OWORD *)(a1 + v9 + 48) = *(_OWORD *)(a2 + v9 + 48);
  *(_OWORD *)(a1 + v9 + 32) = v12;
  *(_OWORD *)(a1 + v9 + 16) = v11;
  *(_OWORD *)(a1 + v9) = v10;
  uint64_t v51 = a3;
  uint64_t v13 = a3[9];
  uint64_t v14 = (char *)(v13 + a1);
  uint64_t v15 = (char *)(a2 + v13);
  uint64_t v16 = type metadata accessor for MLClassifierMetrics.Contents(0);
  int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload(v15, v16);
  if (EnumCaseMultiPayload == 1)
  {
    *(void *)uint64_t v14 = *(void *)v15;
    uint64_t v49 = type metadata accessor for MLClassifierMetrics.Precomputed(0);
    uint64_t v25 = *(int *)(v49 + 20);
    uint64_t v50 = &v14[v25];
    uint64_t v55 = v16;
    uint64_t v26 = type metadata accessor for DataFrame(0);
    uint64_t v27 = &v15[v25];
    uint64_t v28 = *(void (**)(char *, char *, uint64_t))(*(void *)(v26 - 8) + 32);
    v28(v50, v27, v26);
    uint64_t v29 = v26;
    uint64_t v16 = v55;
    v28(&v14[*(int *)(v49 + 24)], &v15[*(int *)(v49 + 24)], v29);
    uint64_t v24 = 1;
    uint64_t v22 = v14;
    uint64_t v23 = v55;
LABEL_7:
    swift_storeEnumTagMultiPayload(v22, v23, v24);
    goto LABEL_9;
  }
  if (!EnumCaseMultiPayload)
  {
    uint64_t v54 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Either<ClassificationMetrics<String>, ClassificationMetrics<Int>>);
    int v18 = swift_getEnumCaseMultiPayload(v15, v54);
    BOOL v19 = v18 == 1;
    uint64_t v20 = &demangling cache variable for type metadata for ClassificationMetrics<String>;
    if (v18 == 1) {
      uint64_t v20 = &demangling cache variable for type metadata for ClassificationMetrics<Int>;
    }
    uint64_t v21 = __swift_instantiateConcreteTypeFromMangledName(v20);
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v21 - 8) + 32))(v14, v15, v21);
    swift_storeEnumTagMultiPayload(v14, v54, v19);
    uint64_t v22 = v14;
    uint64_t v23 = v16;
    uint64_t v24 = 0;
    goto LABEL_7;
  }
  memcpy(v14, v15, *(void *)(*(void *)(v16 - 8) + 64));
LABEL_9:
  uint64_t v30 = v51[10];
  uint64_t v31 = (char *)(a1 + v30);
  uint64_t v32 = (char *)(v30 + a2);
  int v33 = swift_getEnumCaseMultiPayload(v32, v16);
  if (v33 == 1)
  {
    *(void *)uint64_t v31 = *(void *)v32;
    uint64_t v43 = type metadata accessor for MLClassifierMetrics.Precomputed(0);
    uint64_t v56 = v16;
    uint64_t v44 = *(int *)(v43 + 20);
    uint64_t v52 = &v31[v44];
    uint64_t v45 = type metadata accessor for DataFrame(0);
    uint64_t v46 = &v32[v44];
    uint64_t v47 = *(void (**)(char *, char *, uint64_t))(*(void *)(v45 - 8) + 32);
    v47(v52, v46, v45);
    v47(&v31[*(int *)(v43 + 24)], &v32[*(int *)(v43 + 24)], v45);
    uint64_t v42 = 1;
    unsigned int v40 = v31;
    uint64_t v41 = v56;
  }
  else
  {
    if (v33)
    {
      memcpy(v31, v32, *(void *)(*(void *)(v16 - 8) + 64));
      return a1;
    }
    uint64_t v34 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Either<ClassificationMetrics<String>, ClassificationMetrics<Int>>);
    int v35 = swift_getEnumCaseMultiPayload(v32, v34);
    uint64_t v36 = v16;
    BOOL v37 = v35 == 1;
    BOOL v38 = &demangling cache variable for type metadata for ClassificationMetrics<String>;
    if (v35 == 1) {
      BOOL v38 = &demangling cache variable for type metadata for ClassificationMetrics<Int>;
    }
    uint64_t v39 = __swift_instantiateConcreteTypeFromMangledName(v38);
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v39 - 8) + 32))(v31, v32, v39);
    swift_storeEnumTagMultiPayload(v31, v34, v37);
    unsigned int v40 = v31;
    uint64_t v41 = v36;
    uint64_t v42 = 0;
  }
  swift_storeEnumTagMultiPayload(v40, v41, v42);
  return a1;
}

void *assignWithTake for MLDecisionTreeClassifier(void *a1, void *a2, int *a3)
{
  *a1 = *a2;
  uint64_t v4 = a1[1];
  a1[1] = a2[1];
  swift_bridgeObjectRelease(v4);
  uint64_t v5 = a1 + 2;
  uint64_t v6 = a2 + 2;
  uint64_t v7 = a1[2];
  if (v7)
  {
    uint64_t v8 = a2[2];
    if (v8)
    {
      a1[2] = v8;
      swift_bridgeObjectRelease(v7);
      a1[3] = a2[3];
      uint64_t v9 = a1[4];
      a1[4] = a2[4];
      swift_bridgeObjectRelease(v9);
    }
    else
    {
      outlined destroy of Either<LogisticRegressionClassifier<Float, String>, FullyConnectedNetworkClassifier<Float, String>>((uint64_t)(a1 + 2), &demangling cache variable for type metadata for FeatureVectorizer<Float>.Transformer);
      *uint64_t v5 = *v6;
      a1[4] = a2[4];
    }
  }
  else
  {
    a1[4] = a2[4];
    *uint64_t v5 = *v6;
  }
  uint64_t v10 = type metadata accessor for AnyTreeClassifierModel(0);
  uint64_t v11 = *(int *)(v10 + 24);
  uint64_t v12 = type metadata accessor for BaseTreeClassifierModel(0);
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v12 - 8) + 40))((char *)a1 + v11, (char *)a2 + v11, v12);
  uint64_t v13 = *(int *)(v10 + 28);
  char v14 = *((unsigned char *)a2 + v13 + 8);
  uint64_t v15 = *(void *)((char *)a1 + v13);
  *(void *)((char *)a1 + v13) = *(void *)((char *)a2 + v13);
  *((unsigned char *)a1 + v13 + 8) = v14;
  swift_bridgeObjectRelease(v15);
  uint64_t v16 = a3[5];
  uint64_t v17 = *(void **)((char *)a1 + v16);
  *(void *)((char *)a1 + v16) = *(void *)((char *)a2 + v16);

  uint64_t v18 = a3[6];
  *(void *)((char *)a1 + v18) = *(void *)((char *)a2 + v18);
  uint64_t v19 = *(void *)((char *)a1 + v18 + 8);
  *(void *)((char *)a1 + v18 + 8) = *(void *)((char *)a2 + v18 + 8);
  swift_bridgeObjectRelease(v19);
  uint64_t v20 = a3[7];
  uint64_t v21 = *(void *)((char *)a1 + v20);
  *(void *)((char *)a1 + v20) = *(void *)((char *)a2 + v20);
  swift_bridgeObjectRelease(v21);
  uint64_t v22 = a3[8];
  uint64_t v23 = (char *)a1 + v22;
  uint64_t v24 = (char *)a2 + v22;
  uint64_t v25 = (long long *)((char *)a2 + v22 + 8);
  uint64_t v26 = (_OWORD *)((char *)a1 + v22 + 8);
  *(void *)((char *)a1 + v22) = *(void *)((char *)a2 + v22);
  if (*(void *)((char *)a1 + v22 + 32)) {
    __swift_destroy_boxed_opaque_existential_1Tm((void *)((char *)a1 + v22 + 8));
  }
  long long v27 = *v25;
  v26[1] = v25[1];
  *uint64_t v26 = v27;
  *(_OWORD *)(v23 + 40) = *(_OWORD *)(v24 + 40);
  *((void *)v23 + 7) = *((void *)v24 + 7);
  uint64_t v28 = a2;
  if (a1 == a2) {
    return a1;
  }
  uint64_t v29 = a3[9];
  uint64_t v30 = (void *)((char *)a1 + v29);
  uint64_t v31 = (void *)((char *)a2 + v29);
  outlined destroy of MLActivityClassifier.ModelParameters((uint64_t)v30, type metadata accessor for MLClassifierMetrics.Contents);
  uint64_t v71 = type metadata accessor for MLClassifierMetrics.Contents(0);
  int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload(v31, v71);
  if (EnumCaseMultiPayload == 1)
  {
    *uint64_t v30 = *v31;
    uint64_t v66 = type metadata accessor for MLClassifierMetrics.Precomputed(0);
    uint64_t v41 = *(int *)(v66 + 20);
    uint64_t v64 = (char *)v30 + v41;
    uint64_t v42 = type metadata accessor for DataFrame(0);
    uint64_t v43 = *(void (**)(char *, char *))(*(void *)(v42 - 8) + 32);
    uint64_t v44 = (char *)v31 + v41;
    uint64_t v45 = v42;
    v43(v64, v44);
    ((void (*)(char *, char *, uint64_t))v43)((char *)v30 + *(int *)(v66 + 24), (char *)v31 + *(int *)(v66 + 24), v45);
    uint64_t v28 = a2;
    uint64_t v40 = 1;
    BOOL v37 = v30;
    uint64_t v38 = v71;
    uint64_t v39 = v71;
  }
  else
  {
    if (EnumCaseMultiPayload)
    {
      uint64_t v46 = v31;
      uint64_t v38 = v71;
      memcpy(v30, v46, *(void *)(*(void *)(v71 - 8) + 64));
      goto LABEL_17;
    }
    uint64_t v65 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Either<ClassificationMetrics<String>, ClassificationMetrics<Int>>);
    int v33 = swift_getEnumCaseMultiPayload(v31, v65);
    BOOL v34 = v33 == 1;
    int v35 = &demangling cache variable for type metadata for ClassificationMetrics<String>;
    if (v33 == 1) {
      int v35 = &demangling cache variable for type metadata for ClassificationMetrics<Int>;
    }
    uint64_t v36 = __swift_instantiateConcreteTypeFromMangledName(v35);
    (*(void (**)(void *, void *, uint64_t))(*(void *)(v36 - 8) + 32))(v30, v31, v36);
    swift_storeEnumTagMultiPayload(v30, v65, v34);
    BOOL v37 = v30;
    uint64_t v38 = v71;
    uint64_t v39 = v71;
    uint64_t v40 = 0;
  }
  swift_storeEnumTagMultiPayload(v37, v39, v40);
LABEL_17:
  uint64_t v47 = a3[10];
  uint64_t v48 = (char *)a1 + v47;
  uint64_t v49 = (char *)v28 + v47;
  outlined destroy of MLActivityClassifier.ModelParameters((uint64_t)a1 + v47, type metadata accessor for MLClassifierMetrics.Contents);
  int v50 = swift_getEnumCaseMultiPayload(v49, v38);
  if (v50 == 1)
  {
    *(void *)uint64_t v48 = *(void *)v49;
    uint64_t v70 = type metadata accessor for MLClassifierMetrics.Precomputed(0);
    uint64_t v59 = *(int *)(v70 + 20);
    unsigned int v68 = &v48[v59];
    uint64_t v60 = type metadata accessor for DataFrame(0);
    int v61 = &v49[v59];
    BOOL v62 = *(void (**)(char *, char *, uint64_t))(*(void *)(v60 - 8) + 32);
    v62(v68, v61, v60);
    v62(&v48[*(int *)(v70 + 24)], &v49[*(int *)(v70 + 24)], v60);
    uint64_t v58 = 1;
    uint64_t v56 = v48;
    uint64_t v57 = v71;
  }
  else
  {
    if (v50)
    {
      memcpy(v48, v49, *(void *)(*(void *)(v38 - 8) + 64));
      return a1;
    }
    uint64_t v51 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Either<ClassificationMetrics<String>, ClassificationMetrics<Int>>);
    int v52 = swift_getEnumCaseMultiPayload(v49, v51);
    BOOL v53 = v52 == 1;
    uint64_t v54 = &demangling cache variable for type metadata for ClassificationMetrics<String>;
    if (v52 == 1) {
      uint64_t v54 = &demangling cache variable for type metadata for ClassificationMetrics<Int>;
    }
    uint64_t v55 = __swift_instantiateConcreteTypeFromMangledName(v54);
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v55 - 8) + 32))(v48, v49, v55);
    swift_storeEnumTagMultiPayload(v48, v51, v53);
    uint64_t v56 = v48;
    uint64_t v57 = v71;
    uint64_t v58 = 0;
  }
  swift_storeEnumTagMultiPayload(v56, v57, v58);
  return a1;
}

uint64_t getEnumTagSinglePayload for MLDecisionTreeClassifier(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_23965A);
}

uint64_t sub_23965A(uint64_t a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4 = a1;
  uint64_t v5 = type metadata accessor for AnyTreeClassifierModel(0);
  if (*(_DWORD *)(*(void *)(v5 - 8) + 84) == a2) {
    return __swift_getEnumTagSinglePayload(v4, a2, v5);
  }
  if (a2 != 0x7FFFFFFF)
  {
    uint64_t v5 = type metadata accessor for MLClassifierMetrics(0);
    uint64_t v4 = *(int *)(a3 + 36) + a1;
    return __swift_getEnumTagSinglePayload(v4, a2, v5);
  }
  uint64_t result = 0;
  if ((*(void *)(a1 + *(int *)(a3 + 20)) & 0xFFFFFFFF00000001) == 0) {
    return (*(void *)(a1 + *(int *)(a3 + 20)) >> 1) + 1;
  }
  return result;
}

uint64_t storeEnumTagSinglePayload for MLDecisionTreeClassifier(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_2396E7);
}

uint64_t sub_2396E7(uint64_t a1, unsigned int a2, int a3, uint64_t a4)
{
  uint64_t v6 = a1;
  uint64_t v7 = type metadata accessor for AnyTreeClassifierModel(0);
  if (*(_DWORD *)(*(void *)(v7 - 8) + 84) != a3)
  {
    if (a3 == 0x7FFFFFFF)
    {
      uint64_t result = *(int *)(a4 + 20);
      *(void *)(a1 + result) = 2 * (a2 - 1);
      return result;
    }
    uint64_t v7 = type metadata accessor for MLClassifierMetrics(0);
    uint64_t v6 = *(int *)(a4 + 36) + a1;
  }
  return __swift_storeEnumTagSinglePayload(v6, a2, a2, v7);
}

uint64_t type metadata completion function for MLDecisionTreeClassifier(uint64_t a1)
{
  uint64_t result = type metadata accessor for AnyTreeClassifierModel(319);
  if (v2 <= 0x3F)
  {
    v4[0] = *(void *)(result - 8) + 64;
    v4[1] = (char *)&value witness table for Builtin.UnknownObject + 64;
    v4[2] = &unk_34F9B0;
    uint64_t v4[3] = (char *)&value witness table for Builtin.BridgeObject + 64;
    void v4[4] = &unk_34F9C8;
    uint64_t result = type metadata accessor for MLClassifierMetrics.Contents(319);
    if (v3 <= 0x3F)
    {
      uint64_t v5 = *(void *)(result - 8) + 64;
      uint64_t v6 = v5;
      swift_initStructMetadata(a1, 256, 7, v4, a1 + 16);
      return 0;
    }
  }
  return result;
}

uint64_t sub_23980C()
{
  swift_unknownObjectRelease(v0[2]);
  swift_release(v0[4]);
  swift_release(v0[6]);
  return swift_deallocObject(v0, 56, 7);
}

uint64_t partial apply for closure #1 in static MLDecisionTreeClassifier.handleResult(_:session:fulfill:)(uint64_t a1)
{
  uint64_t v3 = v1[2];
  uint64_t v4 = v1[3];
  uint64_t v8 = v1[4];
  uint64_t v9 = v1[5];
  uint64_t v5 = v1[6];
  uint64_t v6 = (void *)swift_task_alloc(dword_3ACBC4);
  *(void *)(v2 + 16) = v6;
  *uint64_t v6 = v2;
  v6[1] = partial apply for specialized closure #1 in blockAwait<A>(_:);
  return closure #1 in static MLDecisionTreeClassifier.handleResult(_:session:fulfill:)(a1, v3, v4, v8, v9, v5);
}

uint64_t closure #1 in MLDecisionTreeClassifier.init(trainingData:targetColumn:featureColumns:parameters:)()
{
  return closure #1 in MLRandomForestRegressor.init(checkpoint:)();
}

char *_sSTsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFs12Zip2SequenceVy11TabularData6ColumnVy6CoreML13MLShapedArrayVySfGGAJySSGG_18CreateMLComponents16AnnotatedFeatureVyANSSGs5NeverOTg503_s6i4ML13kl13VySfGSgSSSg18m14MLComponents16opt21ADSSGIgngr_AE_AFtAJs5q43OIegnrzr_TR03_s8e75ML17MLSoundClassifierV10g64SourceO17annotatedFeaturesSay0A12MLComponents16gh4Vy04a4B013cD30tU36GSSGGSgyKFAnMSg_SSSgtXEfU_Tf3nnnpf_nTf1cn_n(void (*a1)(uint64_t *, void))
{
  uint64_t v116 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AnnotatedFeature<MLShapedArray<Float>, String>);
  uint64_t v117 = *(void *)(v116 - 8);
  int64_t v1 = *(void *)(v117 + 64);
  uint64_t v2 = alloca(v1);
  uint64_t v3 = alloca(v1);
  uint64_t v113 = &v107;
  uint64_t v4 = alloca(v1);
  uint64_t v5 = alloca(v1);
  uint64_t v119 = &v107;
  int64_t v6 = *(void *)(*(void *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for MLShapedArray<Float>?)
                             - 8)
                 + 64);
  uint64_t v7 = alloca(v6);
  uint64_t v8 = alloca(v6);
  uint64_t v107 = (uint64_t)&v107;
  uint64_t v9 = alloca(v6);
  uint64_t v10 = alloca(v6);
  uint64_t v112 = &v107;
  uint64_t v11 = alloca(v6);
  uint64_t v12 = alloca(v6);
  uint64_t v120 = &v107;
  uint64_t v13 = alloca(v6);
  char v14 = alloca(v6);
  uint64_t v109 = &v107;
  uint64_t v15 = alloca(v6);
  uint64_t v16 = alloca(v6);
  uint64_t v118 = &v107;
  uint64_t v17 = alloca(v6);
  uint64_t v18 = alloca(v6);
  Swift::Int v126 = &v107;
  uint64_t v115 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (MLShapedArray<Float>?, String?));
  int64_t v19 = *(void *)(*(void *)(v115 - 8) + 64);
  uint64_t v20 = alloca(v19);
  uint64_t v21 = alloca(v19);
  uint64_t v108 = &v107;
  uint64_t v22 = alloca(v19);
  uint64_t v23 = alloca(v19);
  uint64_t v110 = &v107;
  uint64_t v24 = alloca(v19);
  uint64_t v25 = alloca(v19);
  uint64_t v111 = &v107;
  uint64_t v26 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Column<String>);
  uint64_t v133 = *(void *)(v26 - 8);
  int64_t v27 = *(void *)(v133 + 64);
  uint64_t v28 = alloca(v27);
  uint64_t v29 = alloca(v27);
  uint64_t v125 = &v107;
  uint64_t v30 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Column<MLShapedArray<Float>>);
  uint64_t v31 = *(void *)(v30 - 8);
  uint64_t v129 = v30;
  uint64_t v127 = v31;
  int64_t v32 = *(void *)(v31 + 64);
  int v33 = alloca(v32);
  BOOL v34 = alloca(v32);
  uint64_t v124 = &v107;
  *(void *)&long long v136 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Zip2Sequence<Column<MLShapedArray<Float>>, Column<String>>);
  int64_t v35 = *(void *)(*(void *)(v136 - 8) + 64);
  uint64_t v36 = alloca(v35);
  BOOL v37 = alloca(v35);
  uint64_t v134 = &v107;
  uint64_t v137 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Zip2Sequence<Column<MLShapedArray<Float>>, Column<String>>.Iterator);
  int64_t v38 = *(void *)(*(void *)(v137 - 8) + 64);
  uint64_t v39 = alloca(v38);
  uint64_t v40 = alloca(v38);
  uint64_t v135 = &v107;
  uint64_t v41 = v26;
  uint64_t v128 = v26;
  uint64_t v122 = lazy protocol witness table accessor for type FullyConnectedNetworkClassifier<Float, String> and conformance FullyConnectedNetworkClassifier<A, B>(&lazy protocol witness table cache variable for type Column<MLShapedArray<Float>> and conformance Column<A>, &demangling cache variable for type metadata for Column<MLShapedArray<Float>>, (uint64_t)&protocol conformance descriptor for Column<A>);
  uint64_t v123 = a1;
  uint64_t v42 = dispatch thunk of Sequence.underestimatedCount.getter(v30, v122);
  uint64_t v121 = lazy protocol witness table accessor for type FullyConnectedNetworkClassifier<Float, String> and conformance FullyConnectedNetworkClassifier<A, B>(&lazy protocol witness table cache variable for type Column<String> and conformance Column<A>, &demangling cache variable for type metadata for Column<String>, (uint64_t)&protocol conformance descriptor for Column<A>);
  uint64_t v43 = dispatch thunk of Sequence.underestimatedCount.getter(v41, v121);
  if (v43 < v42) {
    uint64_t v42 = v43;
  }
  uint64_t v138 = (char *)_swiftEmptyArrayStorage;
  int64_t v44 = 0;
  if (v42 > 0) {
    int64_t v44 = v42;
  }
  specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v44, 0);
  uint64_t v45 = (uint64_t)v134;
  outlined init with copy of Either<LogisticRegressionClassifier<Float, String>, FullyConnectedNetworkClassifier<Float, String>>((uint64_t)v123, (uint64_t)v134, &demangling cache variable for type metadata for Zip2Sequence<Column<MLShapedArray<Float>>, Column<String>>);
  uint64_t v46 = v129;
  (*(void (**)(uint64_t *, uint64_t, uint64_t))(v127 + 32))(v124, v45, v129);
  uint64_t v47 = v135;
  dispatch thunk of Sequence.makeIterator()(v46, v122);
  (*(void (**)(uint64_t *, uint64_t, uint64_t))(v133 + 32))(v125, (uint64_t)v134 + *(int *)(v136 + 52), v128);
  uint64_t v48 = (char *)v47 + *(int *)(v137 + 52);
  dispatch thunk of Sequence.makeIterator()(v128, v121);
  uint64_t v130 = *(int *)(v137 + 56);
  *((unsigned char *)v47 + v130) = 0;
  if (v42 < 0) {
    BUG();
  }
  uint64_t v49 = (uint64_t)v47;
  uint64_t v114 = v48;
  uint64_t v50 = v129;
  if (!v42) {
    goto LABEL_23;
  }
  uint64_t v51 = (uint64_t *)((char *)v47
                  + *(int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for IndexingIterator<Column<MLShapedArray<Float>>>)
                           + 36));
  uint64_t v52 = v50;
  *(void *)&long long v136 = v51;
  do
  {
    BOOL v53 = v42 == 0;
    uint64_t v54 = v42 - 1;
    if (v53) {
      BUG();
    }
    uint64_t v55 = v135;
    if (*((unsigned char *)v135 + v130)) {
      BUG();
    }
    uint64_t v121 = v54;
    uint64_t v137 = *v51;
    uint64_t v56 = v52;
    uint64_t v57 = lazy protocol witness table accessor for type FullyConnectedNetworkClassifier<Float, String> and conformance FullyConnectedNetworkClassifier<A, B>(&lazy protocol witness table cache variable for type Column<MLShapedArray<Float>> and conformance Column<A>, &demangling cache variable for type metadata for Column<MLShapedArray<Float>>, (uint64_t)&protocol conformance descriptor for Column<A>);
    dispatch thunk of Collection.endIndex.getter(v56, v57);
    if (v137 == v131) {
      goto LABEL_44;
    }
    uint64_t v58 = (void (*)(uint64_t *, void))dispatch thunk of Collection.subscript.read(&v131, v136, v56, v57);
    outlined init with copy of Either<LogisticRegressionClassifier<Float, String>, FullyConnectedNetworkClassifier<Float, String>>(v59, (uint64_t)v112, &demangling cache variable for type metadata for MLShapedArray<Float>?);
    v58(&v131, 0);
    uint64_t v60 = v124;
    int v61 = v55;
    uint64_t v62 = v127;
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(v127 + 16))(v124, v61, v56);
    dispatch thunk of Collection.formIndex(after:)(v136, v56, v57);
    (*(void (**)(uint64_t *, uint64_t))(v62 + 8))(v60, v56);
    outlined init with take of DataFrame?((uint64_t)v112, (uint64_t)v120, &demangling cache variable for type metadata for MLShapedArray<Float>?);
    uint64_t v63 = *(int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for IndexingIterator<Column<String>>)
                 + 36);
    uint64_t v64 = v114;
    uint64_t v65 = *(void *)&v114[v63];
    uint64_t v66 = lazy protocol witness table accessor for type FullyConnectedNetworkClassifier<Float, String> and conformance FullyConnectedNetworkClassifier<A, B>(&lazy protocol witness table cache variable for type Column<String> and conformance Column<A>, &demangling cache variable for type metadata for Column<String>, (uint64_t)&protocol conformance descriptor for Column<A>);
    uint64_t v67 = v128;
    uint64_t v137 = v66;
    dispatch thunk of Collection.endIndex.getter(v128, v66);
    if (v65 == v131)
    {
      outlined destroy of Any?((uint64_t)v120, &demangling cache variable for type metadata for MLShapedArray<Float>?);
LABEL_44:
      BUG();
    }
    unsigned int v68 = &v64[v63];
    uint64_t v123 = (void (*)(uint64_t *, void))dispatch thunk of Collection.subscript.read(&v131, v68, v67, v137);
    uint64_t v134 = (uint64_t *)*v69;
    uint64_t v122 = v69[1];
    swift_bridgeObjectRetain(v122);
    v123(&v131, 0);
    uint64_t v70 = v125;
    (*(void (**)(uint64_t *, char *, uint64_t))(v133 + 16))(v125, v64, v67);
    dispatch thunk of Collection.formIndex(after:)(v68, v67, v137);
    (*(void (**)(uint64_t *, uint64_t))(v133 + 8))(v70, v67);
    uint64_t v71 = *(int *)(v115 + 48);
    uint64_t v72 = (uint64_t)v108;
    outlined init with take of DataFrame?((uint64_t)v120, (uint64_t)v108, &demangling cache variable for type metadata for MLShapedArray<Float>?);
    *(void *)(v72 + v71) = v134;
    unint64_t v73 = v122;
    *(void *)(v72 + v71 + 8) = v122;
    uint64_t v74 = v107;
    outlined init with copy of Either<LogisticRegressionClassifier<Float, String>, FullyConnectedNetworkClassifier<Float, String>>(v72, v107, &demangling cache variable for type metadata for MLShapedArray<Float>?);
    uint64_t v75 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for MLShapedArray<Float>);
    if (__swift_getEnumTagSinglePayload(v74, 1, v75) == 1) {
      BUG();
    }
    uint64_t v76 = (uint64_t)v134;
    if (!v73) {
      uint64_t v76 = 0;
    }
    unint64_t v77 = v73;
    if (!v73) {
      unint64_t v77 = 0xE000000000000000;
    }
    uint64_t v131 = v76;
    unint64_t v132 = v77;
    swift_bridgeObjectRetain(v73);
    AnnotatedFeature.init(feature:annotation:)(v74, &v131, v75, &type metadata for String);
    outlined destroy of Any?(v72, &demangling cache variable for type metadata for (MLShapedArray<Float>?, String?));
    unint64_t v78 = v138;
    if (!swift_isUniquelyReferenced_nonNull_native(v138))
    {
      specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, *((void *)v78 + 2) + 1, 1);
      unint64_t v78 = v138;
    }
    unint64_t v79 = *((void *)v78 + 2);
    if (*((void *)v78 + 3) >> 1 <= v79)
    {
      specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(*((void *)v78 + 3) >= 2uLL, v79 + 1, 1);
      unint64_t v78 = v138;
    }
    *((void *)v78 + 2) = v79 + 1;
    (*(void (**)(char *, uint64_t *, uint64_t))(v117 + 32))(&v78[((*(unsigned __int8 *)(v117 + 80) + 32) & ~*(unsigned __int8 *)(v117 + 80)) + *(void *)(v117 + 72) * v79], v113, v116);
    uint64_t v42 = v121;
    uint64_t v52 = v129;
    uint64_t v51 = (uint64_t *)v136;
  }
  while (v121);
  uint64_t v49 = (uint64_t)v135;
  uint64_t v50 = v129;
  if (!*((unsigned char *)v135 + v130))
  {
LABEL_23:
    uint64_t v80 = lazy protocol witness table accessor for type FullyConnectedNetworkClassifier<Float, String> and conformance FullyConnectedNetworkClassifier<A, B>(&lazy protocol witness table cache variable for type Column<MLShapedArray<Float>> and conformance Column<A>, &demangling cache variable for type metadata for Column<MLShapedArray<Float>>, (uint64_t)&protocol conformance descriptor for Column<A>);
    uint64_t v137 = v80;
    while (1)
    {
      uint64_t v81 = *(int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for IndexingIterator<Column<MLShapedArray<Float>>>)
                   + 36);
      *(void *)&long long v136 = *(void *)(v49 + v81);
      dispatch thunk of Collection.endIndex.getter(v50, v80);
      if ((void)v136 == v131) {
        break;
      }
      uint64_t v82 = v49 + v81;
      *(void *)&long long v136 = dispatch thunk of Collection.subscript.read(&v131, v82, v50, v80);
      outlined init with copy of Either<LogisticRegressionClassifier<Float, String>, FullyConnectedNetworkClassifier<Float, String>>(v83, (uint64_t)v118, &demangling cache variable for type metadata for MLShapedArray<Float>?);
      ((void (*)(uint64_t *, void))v136)(&v131, 0);
      int64_t v84 = v124;
      (*(void (**)(uint64_t *, uint64_t, uint64_t))(v127 + 16))(v124, v49, v50);
      dispatch thunk of Collection.formIndex(after:)(v82, v50, v137);
      (*(void (**)(uint64_t *, uint64_t))(v127 + 8))(v84, v50);
      outlined init with take of DataFrame?((uint64_t)v118, (uint64_t)v126, &demangling cache variable for type metadata for MLShapedArray<Float>?);
      uint64_t v85 = *(int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for IndexingIterator<Column<String>>)
                   + 36);
      uint64_t v86 = v114;
      *(void *)&long long v136 = *(void *)&v114[v85];
      uint64_t v87 = lazy protocol witness table accessor for type FullyConnectedNetworkClassifier<Float, String> and conformance FullyConnectedNetworkClassifier<A, B>(&lazy protocol witness table cache variable for type Column<String> and conformance Column<A>, &demangling cache variable for type metadata for Column<String>, (uint64_t)&protocol conformance descriptor for Column<A>);
      uint64_t v88 = v128;
      uint64_t v89 = v87;
      dispatch thunk of Collection.endIndex.getter(v128, v87);
      if ((void)v136 == v131)
      {
        outlined destroy of Any?((uint64_t)v126, &demangling cache variable for type metadata for MLShapedArray<Float>?);
        uint64_t v49 = (uint64_t)v135;
        break;
      }
      uint64_t v90 = &v86[v85];
      uint64_t v134 = (uint64_t *)v89;
      uint64_t v91 = (void (*)(uint64_t *, void))dispatch thunk of Collection.subscript.read(&v131, v90, v88, v89);
      long long v136 = *v92;
      swift_bridgeObjectRetain(*((void *)v92 + 1));
      v91(&v131, 0);
      uint64_t v93 = v125;
      (*(void (**)(uint64_t *, char *, uint64_t))(v133 + 16))(v125, v86, v88);
      dispatch thunk of Collection.formIndex(after:)(v90, v88, v134);
      (*(void (**)(uint64_t *, uint64_t))(v133 + 8))(v93, v88);
      uint64_t v94 = v115;
      uint64_t v95 = *(int *)(v115 + 48);
      uint64_t v96 = (uint64_t)v110;
      outlined init with take of DataFrame?((uint64_t)v126, (uint64_t)v110, &demangling cache variable for type metadata for MLShapedArray<Float>?);
      *(_OWORD *)(v96 + v95) = v136;
      uint64_t v97 = v96;
      uint64_t v98 = (uint64_t)v111;
      outlined init with take of DataFrame?(v97, (uint64_t)v111, &demangling cache variable for type metadata for (MLShapedArray<Float>?, String?));
      uint64_t v99 = *(int *)(v94 + 48);
      uint64_t v100 = *(void *)(v98 + v99);
      unint64_t v101 = *(void *)(v98 + v99 + 8);
      uint64_t v102 = (uint64_t)v109;
      outlined init with copy of Either<LogisticRegressionClassifier<Float, String>, FullyConnectedNetworkClassifier<Float, String>>(v98, (uint64_t)v109, &demangling cache variable for type metadata for MLShapedArray<Float>?);
      *(void *)&long long v136 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for MLShapedArray<Float>);
      if (__swift_getEnumTagSinglePayload(v102, 1, v136) == 1) {
        BUG();
      }
      if (!v101) {
        uint64_t v100 = 0;
      }
      unint64_t v103 = v101;
      if (!v101) {
        unint64_t v103 = 0xE000000000000000;
      }
      uint64_t v131 = v100;
      unint64_t v132 = v103;
      swift_bridgeObjectRetain(v101);
      AnnotatedFeature.init(feature:annotation:)(v102, &v131, v136, &type metadata for String);
      outlined destroy of Any?(v98, &demangling cache variable for type metadata for (MLShapedArray<Float>?, String?));
      uint64_t v104 = v138;
      if (!swift_isUniquelyReferenced_nonNull_native(v138))
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, *((void *)v104 + 2) + 1, 1);
        uint64_t v104 = v138;
      }
      uint64_t v49 = (uint64_t)v135;
      unint64_t v105 = *((void *)v104 + 2);
      if (*((void *)v104 + 3) >> 1 <= v105)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(*((void *)v104 + 3) >= 2uLL, v105 + 1, 1);
        uint64_t v49 = (uint64_t)v135;
        uint64_t v104 = v138;
      }
      *((void *)v104 + 2) = v105 + 1;
      (*(void (**)(char *, uint64_t *, uint64_t))(v117 + 32))(&v104[((*(unsigned __int8 *)(v117 + 80) + 32) & ~*(unsigned __int8 *)(v117 + 80))+ *(void *)(v117 + 72) * v105], v119, v116);
      uint64_t v50 = v129;
      uint64_t v80 = v137;
      if (*(unsigned char *)(v49 + v130)) {
        goto LABEL_39;
      }
    }
    *(unsigned char *)(v49 + v130) = 1;
  }
LABEL_39:
  outlined destroy of Any?(v49, &demangling cache variable for type metadata for Zip2Sequence<Column<MLShapedArray<Float>>, Column<String>>.Iterator);
  return v138;
}

uint64_t specialized Collection.first.getter()
{
  uint64_t v0 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Column<String>);
  uint64_t v1 = lazy protocol witness table accessor for type FullyConnectedNetworkClassifier<Float, String> and conformance FullyConnectedNetworkClassifier<A, B>(&lazy protocol witness table cache variable for type Column<String> and conformance Column<A>, &demangling cache variable for type metadata for Column<String>, (uint64_t)&protocol conformance descriptor for Column<A>);
  dispatch thunk of Collection.startIndex.getter(v0, v1);
  dispatch thunk of Collection.endIndex.getter(v0, v1);
  if (v7[0] == v6[0]) {
    return 0;
  }
  uint64_t v3 = (void (*)(void *, void))dispatch thunk of Collection.subscript.read(v6, v7, v0, v1);
  uint64_t v2 = *v4;
  swift_bridgeObjectRetain(v4[1]);
  v3(v6, 0);
  return v2;
}

{
  return specialized Collection.first.getter(&demangling cache variable for type metadata for Column<[Int]>, &lazy protocol witness table cache variable for type Column<[Int]> and conformance Column<A>);
}

{
  return specialized Collection.first.getter(&demangling cache variable for type metadata for Column<[Int32]>, &lazy protocol witness table cache variable for type Column<[Int32]> and conformance Column<A>);
}

{
  return specialized Collection.first.getter(&demangling cache variable for type metadata for Column<[UInt8]>, &lazy protocol witness table cache variable for type Column<[UInt8]> and conformance Column<A>);
}

{
  return specialized Collection.first.getter(&demangling cache variable for type metadata for Column<MLShapedArray<Int32>>, &lazy protocol witness table cache variable for type Column<MLShapedArray<Int32>> and conformance Column<A>, &demangling cache variable for type metadata for MLShapedArray<Int32>?);
}

{
  return specialized Collection.first.getter(&demangling cache variable for type metadata for Column<[Float]>, &lazy protocol witness table cache variable for type Column<[Float]> and conformance Column<A>);
}

{
  return specialized Collection.first.getter(&demangling cache variable for type metadata for Column<MLShapedArray<Float>>, &lazy protocol witness table cache variable for type Column<MLShapedArray<Float>> and conformance Column<A>, &demangling cache variable for type metadata for MLShapedArray<Float>?);
}

{
  return specialized Collection.first.getter(&demangling cache variable for type metadata for Column<[Double]>, &lazy protocol witness table cache variable for type Column<[Double]> and conformance Column<A>);
}

{
  return specialized Collection.first.getter(&demangling cache variable for type metadata for Column<MLShapedArray<Double>>, &lazy protocol witness table cache variable for type Column<MLShapedArray<Double>> and conformance Column<A>, &demangling cache variable for type metadata for MLShapedArray<Double>?);
}

{
  uint64_t v0;
  uint64_t v1;
  id v2;
  void (*v3)(void *, void);
  id *v4;
  void v6[4];
  void v7[5];

  uint64_t v0 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Column<MLMultiArray>);
  uint64_t v1 = lazy protocol witness table accessor for type FullyConnectedNetworkClassifier<Float, String> and conformance FullyConnectedNetworkClassifier<A, B>(&lazy protocol witness table cache variable for type Column<MLMultiArray> and conformance Column<A>, &demangling cache variable for type metadata for Column<MLMultiArray>, (uint64_t)&protocol conformance descriptor for Column<A>);
  dispatch thunk of Collection.startIndex.getter(v0, v1);
  dispatch thunk of Collection.endIndex.getter(v0, v1);
  if (v7[0] == v6[0]) {
    return 2;
  }
  uint64_t v3 = (void (*)(void *, void))dispatch thunk of Collection.subscript.read(v6, v7, v0, v1);
  uint64_t v2 = *v4;
  *v4;
  v3(v6, 0);
  return (uint64_t)v2;
}

uint64_t specialized Collection.first.getter(uint64_t a1)
{
  uint64_t v2 = v1;
  uint64_t v3 = *(void *)(a1 + 16);
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Column<[Double]>);
  uint64_t v5 = v4;
  if (v3)
  {
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(v2, ((*(unsigned __int8 *)(*(void *)(v4 - 8) + 80) + 32) & ~*(unsigned __int8 *)(*(void *)(v4 - 8) + 80)) + a1, v4);
    uint64_t v6 = 0;
  }
  else
  {
    uint64_t v6 = 1;
  }
  return __swift_storeEnumTagSinglePayload(v2, v6, 1, v5);
}

{
  uint64_t *v1;
  uint64_t v2;
  int64_t v3;
  void *v4;
  void *v5;
  int64_t v6;
  int v7;
  int v8;
  unsigned __int8 v9;
  unsigned __int8 v10;
  uint64_t v11;
  int v12;
  unsigned __int8 v13;
  uint64_t v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char v20;
  uint64_t *v21;
  char *v22;
  uint64_t v23;
  uint64_t *v24;
  uint64_t *v25;
  uint64_t v26;

  uint64_t v25 = v1;
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (key: String, value: MLProgram.Block));
  uint64_t v3 = *(void *)(*(void *)(v2 - 8) + 64);
  uint64_t v4 = alloca(v3);
  uint64_t v5 = alloca(v3);
  uint64_t v24 = (uint64_t *)&v24;
  uint64_t v6 = specialized Dictionary.startIndex.getter(a1);
  uint64_t v8 = v7;
  uint64_t v10 = v9;
  uint64_t v11 = specialized Dictionary.Keys.endIndex.getter(a1);
  if ((v10 | v13)) {
    BUG();
  }
  if (v8 != v12) {
    BUG();
  }
  if (v6 == v11) {
    return __swift_storeEnumTagSinglePayload((uint64_t)v25, 1, 1, v2);
  }
  uint64_t v26 = v2;
  uint64_t v15 = *(int *)(v2 + 48);
  uint64_t v16 = v24;
  uint64_t v17 = (uint64_t)v24 + v15;
  uint64_t v18 = specialized Dictionary.subscript.getter(v17, v6, v8, 0, a1);
  uint64_t v20 = v19;
  *uint64_t v16 = v18;
  v16[1] = v19;
  uint64_t v21 = v25;
  *uint64_t v25 = v18;
  v21[1] = v19;
  uint64_t v22 = (char *)v21 + *(int *)(v26 + 48);
  uint64_t v23 = type metadata accessor for MLProgram.Block(0);
  (*(void (**)(char *, uint64_t, uint64_t))(*(void *)(v23 - 8) + 16))(v22, v17, v23);
  swift_bridgeObjectRetain(v20);
  outlined destroy of Any?((uint64_t)v16, &demangling cache variable for type metadata for (key: String, value: MLProgram.Block));
  return __swift_storeEnumTagSinglePayload((uint64_t)v21, 0, 1, v26);
}

{
  int64_t v1;
  int v2;
  int v3;
  unsigned __int8 v4;
  unsigned __int8 v5;
  uint64_t v6;
  int v7;
  unsigned __int8 v8;

  uint64_t v1 = specialized _NativeDictionary.startIndex.getter(a1);
  uint64_t v3 = v2;
  uint64_t v5 = v4;
  uint64_t v6 = specialized Dictionary.Keys.endIndex.getter(a1);
  if ((v5 | v8)) {
    BUG();
  }
  if (v3 != v7) {
    BUG();
  }
  if (v1 == v6) {
    return 0;
  }
  else {
    return specialized Dictionary.Keys.subscript.getter(v1, v3, 0, a1);
  }
}

{
  if (*(void *)(a1 + 16)) {
    return *(void *)(a1 + 32);
  }
  else {
    return 0;
  }
}

{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unsigned int v4;
  uint64_t v5;
  uint64_t v6;

  uint64_t v2 = v1;
  uint64_t v3 = *(void *)(a1 + 16);
  uint64_t v4 = 0;
  uint64_t v5 = type metadata accessor for FeatureDescription(0);
  uint64_t v6 = v5;
  if (v3) {
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16))(v2, ((*(unsigned __int8 *)(*(void *)(v5 - 8) + 80) + 32) & ~*(unsigned __int8 *)(*(void *)(v5 - 8) + 80)) + a1, v5);
  }
  else {
    uint64_t v4 = 1;
  }
  return __swift_storeEnumTagSinglePayload(v2, v4, 1, v6);
}

{
  uint64_t *v1;
  uint64_t v2;
  int64_t v3;
  void *v4;
  void *v5;
  int64_t v6;
  int v7;
  int v8;
  unsigned __int8 v9;
  unsigned __int8 v10;
  uint64_t v11;
  int v12;
  unsigned __int8 v13;
  uint64_t v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char v20;
  uint64_t *v21;
  char *v22;
  uint64_t v23;
  uint64_t *v24;
  uint64_t *v25;
  uint64_t v26;

  uint64_t v25 = v1;
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (key: String, value: Tensor));
  uint64_t v3 = *(void *)(*(void *)(v2 - 8) + 64);
  uint64_t v4 = alloca(v3);
  uint64_t v5 = alloca(v3);
  uint64_t v24 = (uint64_t *)&v24;
  uint64_t v6 = specialized Dictionary.startIndex.getter(a1);
  uint64_t v8 = v7;
  uint64_t v10 = v9;
  uint64_t v11 = specialized Dictionary.Keys.endIndex.getter(a1);
  if ((v10 | v13)) {
    BUG();
  }
  if (v8 != v12) {
    BUG();
  }
  if (v6 == v11) {
    return __swift_storeEnumTagSinglePayload((uint64_t)v25, 1, 1, v2);
  }
  uint64_t v26 = v2;
  uint64_t v15 = *(int *)(v2 + 48);
  uint64_t v16 = v24;
  uint64_t v17 = (uint64_t)v24 + v15;
  uint64_t v18 = specialized Dictionary.subscript.getter(v17, v6, v8, 0, a1);
  uint64_t v20 = v19;
  *uint64_t v16 = v18;
  v16[1] = v19;
  uint64_t v21 = v25;
  *uint64_t v25 = v18;
  v21[1] = v19;
  uint64_t v22 = (char *)v21 + *(int *)(v26 + 48);
  uint64_t v23 = type metadata accessor for Tensor(0);
  (*(void (**)(char *, uint64_t, uint64_t))(*(void *)(v23 - 8) + 16))(v22, v17, v23);
  swift_bridgeObjectRetain(v20);
  outlined destroy of Any?((uint64_t)v16, &demangling cache variable for type metadata for (key: String, value: Tensor));
  return __swift_storeEnumTagSinglePayload((uint64_t)v21, 0, 1, v26);
}

_OWORD *specialized Collection.first.getter(uint64_t a1)
{
  if (*(void *)(a1 + 16)) {
    return (_OWORD *)outlined init with copy of Any(a1 + 32, (uint64_t)result);
  }
  result[1] = 0;
  *uint64_t result = 0;
  return result;
}

uint64_t specialized Collection.first.getter(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(a1);
  uint64_t v3 = lazy protocol witness table accessor for type FullyConnectedNetworkClassifier<Float, String> and conformance FullyConnectedNetworkClassifier<A, B>(a2, a1, (uint64_t)&protocol conformance descriptor for Column<A>);
  dispatch thunk of Collection.startIndex.getter(v2, v3);
  dispatch thunk of Collection.endIndex.getter(v2, v3);
  if (v9[0] == v8[0]) {
    return 2;
  }
  uint64_t v5 = (void (*)(void *, void))dispatch thunk of Collection.subscript.read(v8, v9, v2, v3);
  uint64_t v4 = *v6;
  swift_bridgeObjectRetain(*v6);
  v5(v8, 0);
  return v4;
}

uint64_t specialized Collection.first.getter(uint64_t *a1, uint64_t *a2, uint64_t *a3)
{
  uint64_t v16 = a3;
  uint64_t v17 = v3;
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(a1);
  uint64_t v5 = lazy protocol witness table accessor for type FullyConnectedNetworkClassifier<Float, String> and conformance FullyConnectedNetworkClassifier<A, B>(a2, a1, (uint64_t)&protocol conformance descriptor for Column<A>);
  dispatch thunk of Collection.startIndex.getter(v4, v5);
  dispatch thunk of Collection.endIndex.getter(v4, v5);
  if (v15 == v14[0])
  {
    unsigned int v6 = 1;
    uint64_t v7 = v17;
    uint64_t v8 = v16;
  }
  else
  {
    uint64_t v9 = (void (*)(void *, void))dispatch thunk of Collection.subscript.read(v14, &v15, v4, v5);
    uint64_t v7 = v17;
    uint64_t v10 = v16;
    outlined init with copy of Either<LogisticRegressionClassifier<Float, String>, FullyConnectedNetworkClassifier<Float, String>>(v11, v17, v16);
    unsigned int v6 = 0;
    v9(v14, 0);
    uint64_t v8 = v10;
  }
  uint64_t v12 = __swift_instantiateConcreteTypeFromMangledName(v8);
  return __swift_storeEnumTagSinglePayload(v7, v6, 1, v12);
}

Swift::OpaquePointer_optional __swiftcall __spoils<cf,zf,sf,of,pf,rax,rdx,rcx,rdi,rsi,r8,r9,r10,r11,r12,xmm0,xmm1,xmm2,xmm3,xmm4,xmm5,xmm6,xmm7> MLSoundClassifier.DataSource.annotatedFeatures()()
{
  uint64_t v43 = v0;
  uint64_t v2 = v1;
  uint64_t v41 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Zip2Sequence<Column<MLShapedArray<Float>>, Column<String>>);
  int64_t v3 = *(void *)(*(void *)(v41 - 8) + 64);
  uint64_t v4 = alloca(v3);
  uint64_t v5 = alloca(v3);
  uint64_t v39 = &v34;
  uint64_t v46 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Column<String>);
  uint64_t v40 = *(void *)(v46 - 8);
  int64_t v6 = *(void *)(v40 + 64);
  uint64_t v7 = alloca(v6);
  uint64_t v8 = alloca(v6);
  BOOL v53 = &v34;
  uint64_t v45 = type metadata accessor for AnyColumn(0);
  uint64_t v44 = *(void *)(v45 - 8);
  int64_t v9 = *(void *)(v44 + 64);
  uint64_t v10 = alloca(v9);
  uint64_t v11 = alloca(v9);
  int64_t v38 = (char *)&v34;
  uint64_t v48 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Column<MLShapedArray<Float>>);
  uint64_t v47 = *(void *)(v48 - 8);
  int64_t v12 = *(void *)(v47 + 64);
  uint64_t v13 = alloca(v12);
  char v14 = alloca(v12);
  uint64_t v50 = &v34;
  uint64_t v15 = type metadata accessor for MLSoundClassifier.DataSource(0);
  int64_t v16 = *(void *)(*(void *)(v15 - 8) + 64);
  uint64_t v17 = alloca(v16);
  uint64_t v18 = alloca(v16);
  uint64_t v51 = type metadata accessor for DataFrame(0);
  uint64_t v52 = *(void *)(v51 - 8);
  int64_t v19 = *(void *)(v52 + 64);
  uint64_t v20 = alloca(v19);
  uint64_t v21 = alloca(v19);
  outlined init with copy of MLSoundClassifier.DataSource(v2, (uint64_t)&v34);
  int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload(&v34, v15);
  if (EnumCaseMultiPayload == 3)
  {
    char v27 = v35;
    uint64_t v55 = v36;
    uint64_t v25 = v37;
    uint64_t v49 = v38;
    uint64_t v54 = v39;
    uint64_t v35 = v34;
    LOBYTE(v36) = v27;
    DataFrame.init(_:)((uint64_t)&v35);
  }
  else
  {
    if (EnumCaseMultiPayload != 4)
    {
      outlined destroy of MLSoundClassifier.DataSource((uint64_t)&v34);
      MLComponents16AnnotatedFeatureVyANSSGs5NeverOTg503_s6i4ML13kl13VySfGSgSSSg18m14MLComponents16opt21ADSSGIgngr_AE_AFtAJs5q43OIegnrzr_TR03_s8e75ML17MLSoundClassifierV10g64SourceO17annotatedFeaturesSay0A12MLComponents16gh4Vy04a4B013cD30tU36GSSGGSgyKFAnMSg_SSSgtXEfU_Tf3nnnpf_nTf1cn_n = 0;
      goto LABEL_9;
    }
    uint64_t v23 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (DataFrame, featureColumn: String, labelColumn: String, parameters: MLSoundClassifier.FeatureExtractionParameters));
    uint64_t v24 = *(int *)(v23 + 48);
    uint64_t v55 = *(uint64_t *)((char *)&v34 + v24);
    uint64_t v25 = *(uint64_t *)((char *)&v34 + v24 + 8);
    uint64_t v26 = *(int *)(v23 + 64);
    uint64_t v49 = *(char **)((char *)&v34 + v26);
    uint64_t v54 = *(uint64_t **)((char *)&v34 + v26 + 8);
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(v52 + 32))(&v34, &v34, v51);
  }
  MLComponents16AnnotatedFeatureVyANSSGs5NeverOTg503_s6i4ML13kl13VySfGSgSSSg18m14MLComponents16opt21ADSSGIgngr_AE_AFtAJs5q43OIegnrzr_TR03_s8e75ML17MLSoundClassifierV10g64SourceO17annotatedFeaturesSay0A12MLComponents16gh4Vy04a4B013cD30tU36GSSGGSgyKFAnMSg_SSSgtXEfU_Tf3nnnpf_nTf1cn_n = v38;
  DataFrame.subscript.getter(v55, v25);
  swift_bridgeObjectRelease(v25);
  uint64_t v29 = v43;
  static MLSoundClassifier.convertFeatures(_:)((uint64_t)MLComponents16AnnotatedFeatureVyANSSGs5NeverOTg503_s6i4ML13kl13VySfGSgSSSg18m14MLComponents16opt21ADSSGIgngr_AE_AFtAJs5q43OIegnrzr_TR03_s8e75ML17MLSoundClassifierV10g64SourceO17annotatedFeaturesSay0A12MLComponents16gh4Vy04a4B013cD30tU36GSSGGSgyKFAnMSg_SSSgtXEfU_Tf3nnnpf_nTf1cn_n);
  (*(void (**)(char *, uint64_t))(v44 + 8))(MLComponents16AnnotatedFeatureVyANSSGs5NeverOTg503_s6i4ML13kl13VySfGSgSSSg18m14MLComponents16opt21ADSSGIgngr_AE_AFtAJs5q43OIegnrzr_TR03_s8e75ML17MLSoundClassifierV10g64SourceO17annotatedFeaturesSay0A12MLComponents16gh4Vy04a4B013cD30tU36GSSGGSgyKFAnMSg_SSSgtXEfU_Tf3nnnpf_nTf1cn_n, v45);
  if (v29)
  {
    swift_bridgeObjectRelease((_BYTE)v54);
    (*(void (**)(uint64_t *, uint64_t))(v52 + 8))(&v34, v51);
  }
  else
  {
    char v31 = (char)v54;
    uint64_t v42 = &v34;
    DataFrame.subscript.getter(v49, v54, &type metadata for String);
    swift_bridgeObjectRelease(v31);
    int64_t v32 = (char *)v39;
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(v47 + 16))(v39, v50, v48);
    uint64_t v33 = v40;
    (*(void (**)(char *, uint64_t *, uint64_t))(v40 + 16))(&v32[*(int *)(v41 + 52)], v53, v46);
    MLComponents16AnnotatedFeatureVyANSSGs5NeverOTg503_s6i4ML13kl13VySfGSgSSSg18m14MLComponents16opt21ADSSGIgngr_AE_AFtAJs5q43OIegnrzr_TR03_s8e75ML17MLSoundClassifierV10g64SourceO17annotatedFeaturesSay0A12MLComponents16gh4Vy04a4B013cD30tU36GSSGGSgyKFAnMSg_SSSgtXEfU_Tf3nnnpf_nTf1cn_n = _sSTsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFs12Zip2SequenceVy11TabularData6ColumnVy6CoreML13MLShapedArrayVySfGGAJySSGG_18CreateMLComponents16AnnotatedFeatureVyANSSGs5NeverOTg503_s6i4ML13kl13VySfGSgSSSg18m14MLComponents16opt21ADSSGIgngr_AE_AFtAJs5q43OIegnrzr_TR03_s8e75ML17MLSoundClassifierV10g64SourceO17annotatedFeaturesSay0A12MLComponents16gh4Vy04a4B013cD30tU36GSSGGSgyKFAnMSg_SSSgtXEfU_Tf3nnnpf_nTf1cn_n((void (*)(uint64_t *, void))v32);
    outlined destroy of Any?((uint64_t)v32, &demangling cache variable for type metadata for Zip2Sequence<Column<MLShapedArray<Float>>, Column<String>>);
    (*(void (**)(uint64_t *, uint64_t))(v33 + 8))(v53, v46);
    (*(void (**)(uint64_t *, uint64_t))(v47 + 8))(v50, v48);
    (*(void (**)(uint64_t *, uint64_t))(v52 + 8))(v42, v51);
  }
LABEL_9:
  v30.value._char rawValue = MLComponents16AnnotatedFeatureVyANSSGs5NeverOTg503_s6i4ML13kl13VySfGSgSSSg18m14MLComponents16opt21ADSSGIgngr_AE_AFtAJs5q43OIegnrzr_TR03_s8e75ML17MLSoundClassifierV10g64SourceO17annotatedFeaturesSay0A12MLComponents16gh4Vy04a4B013cD30tU36GSSGGSgyKFAnMSg_SSSgtXEfU_Tf3nnnpf_nTf1cn_n;
  return v30;
}

uint64_t static MLSoundClassifier.DataSource.reformatFeatures(dataFrame:featureColumn:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v57 = v3;
  uint64_t v58 = a3;
  *(void *)&long long v56 = a1;
  uint64_t v45 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Column<MLMultiArray>);
  uint64_t v51 = *(void *)(v45 - 8);
  int64_t v4 = *(void *)(v51 + 64);
  uint64_t v5 = alloca(v4);
  int64_t v6 = alloca(v4);
  uint64_t v48 = &v43;
  uint64_t v7 = alloca(v4);
  uint64_t v8 = alloca(v4);
  uint64_t v47 = &v43;
  int64_t v9 = alloca(v4);
  uint64_t v10 = alloca(v4);
  uint64_t v52 = &v43;
  uint64_t v53 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Column<[Any?]>);
  uint64_t v46 = *(void *)(v53 - 8);
  int64_t v11 = *(void *)(v46 + 64);
  int64_t v12 = alloca(v11);
  uint64_t v13 = alloca(v11);
  uint64_t v54 = &v43;
  uint64_t v14 = type metadata accessor for AnyColumn(0);
  uint64_t v15 = *(void *)(v14 - 8);
  int64_t v16 = *(void *)(v15 + 64);
  uint64_t v17 = alloca(v16);
  uint64_t v18 = alloca(v16);
  uint64_t v55 = &v43;
  int64_t v19 = alloca(v16);
  uint64_t v20 = alloca(v16);
  uint64_t v59 = a2;
  DataFrame.subscript.getter(a2, v58);
  uint64_t v21 = AnyColumn.wrappedElementType.getter();
  uint64_t v22 = *(void (**)(uint64_t *, uint64_t))(v15 + 8);
  v22(&v43, v14);
  uint64_t v23 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [Any?]);
  if (swift_dynamicCastMetatype(v21, v23))
  {
    uint64_t v24 = v58;
    DataFrame.subscript.getter(v59, v58, v23);
    uint64_t v49 = type metadata accessor for OS_os_log(0, &lazy cache variable for type metadata for MLMultiArray, MLMultiArray_ptr);
    uint64_t v25 = v52;
    uint64_t v26 = v57;
    Column.map<A>(_:)(closure #1 in static MLSoundClassifier.DataSource.reformatFeatures(dataFrame:featureColumn:), 0, v53);
    uint64_t v57 = v26;
    char v27 = v48;
    uint64_t v28 = v25;
    uint64_t v29 = v45;
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(v51 + 16))(v48, v28, v45);
    uint64_t v50 = lazy protocol witness table accessor for type FullyConnectedNetworkClassifier<Float, String> and conformance FullyConnectedNetworkClassifier<A, B>(&lazy protocol witness table cache variable for type Column<MLMultiArray> and conformance Column<A>, &demangling cache variable for type metadata for Column<MLMultiArray>, (uint64_t)&protocol conformance descriptor for Column<A>);
    swift_bridgeObjectRetain_n(v24, 2);
    Swift::OpaquePointer_optional v30 = v47;
    Column.init<A>(name:contents:)(v59, v24, v27, v49, v29, v50);
    char v31 = v55;
    Column.eraseToAnyColumn()(v29);
    int64_t v32 = *(void (**)(uint64_t *, uint64_t))(v51 + 8);
    v32(v30, v29);
    DataFrame.subscript.setter(v31, v59, v58);
    v32(v52, v29);
    return (*(uint64_t (**)(uint64_t *, uint64_t))(v46 + 8))(v54, v53);
  }
  else
  {
    *(void *)&long long v44 = 0;
    *((void *)&v44 + 1) = 0xE000000000000000;
    _StringGuts.grow(_:)(101);
    v34._char object = "of labels missing files: " + 0x8000000000000000;
    v34._uint64_t countAndFlagsBits = 0xD000000000000062;
    String.append(_:)(v34);
    uint64_t v35 = v55;
    DataFrame.subscript.getter(v59, v58);
    uint64_t v36 = AnyColumn.wrappedElementType.getter();
    v22(v35, v14);
    uint64_t v37 = _typeName(_:qualified:)(v36, 0);
    LOBYTE(v35) = (_BYTE)v38;
    v34._uint64_t countAndFlagsBits = v37;
    v34._char object = v38;
    String.append(_:)(v34);
    swift_bridgeObjectRelease((_BYTE)v35);
    v34._uint64_t countAndFlagsBits = 46;
    v34._char object = (void *)0xE100000000000000;
    String.append(_:)(v34);
    long long v56 = v44;
    v34._char object = (void *)lazy protocol witness table accessor for type MLCreateError and conformance MLCreateError();
    swift_allocError(&type metadata for MLCreateError, v34._object, 0, 0);
    *(_OWORD *)uint64_t v39 = v56;
    *(_OWORD *)(v39 + 16) = 0;
    *(_OWORD *)(v39 + 32) = 0;
    *(unsigned char *)(v39 + 48) = 0;
    return swift_willThrow(&type metadata for MLCreateError, v34._object, v39, v40, v41, v42);
  }
}

void *specialized stratifiedSplitGenerator<A>(proportions:generator:fileURLAndLabel:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v70 = a2;
  uint64_t v71 = a1;
  uint64_t v75 = type metadata accessor for URL(0);
  uint64_t v5 = *(void *)(v75 - 8);
  int64_t v6 = *(void *)(v5 + 64);
  uint64_t v7 = alloca(v6);
  uint64_t v8 = alloca(v6);
  swift_bridgeObjectRetain(a3);
  uint64_t v87 = specialized _copyCollectionToContiguousArray<A>(_:)(a3);
  specialized MutableCollection<>.sort(by:)(&v87);
  uint64_t v81 = v3;
  if (v3)
  {
    swift_release();
    BUG();
  }
  swift_bridgeObjectRelease(a3);
  int64_t v9 = v87;
  uint64_t v74 = v87[2];
  if (v74)
  {
    unint64_t v73 = v87 + 4;
    uint64_t v10 = _swiftEmptyArrayStorage;
    uint64_t v72 = a3;
    unint64_t v11 = 0;
    uint64_t v67 = &v62;
    uint64_t v83 = v5;
    uint64_t v76 = v87;
    while (1)
    {
      if (v11 >= v9[2]) {
        BUG();
      }
      uint64_t v12 = v73[2 * v11];
      uint64_t v13 = v73[2 * v11 + 1];
      swift_bridgeObjectRetain_n(v13, 2);
      uint64_t v80 = v12;
      uint64_t v14 = specialized Dictionary.subscript.getter(v12, v13, v72);
      uint64_t v86 = v13;
      swift_bridgeObjectRelease(v13);
      if (!v14) {
        BUG();
      }
      uint64_t v82 = v14;
      uint64_t v15 = specialized _copyCollectionToContiguousArray<A>(_:)(0, *(void *)(v14 + 16));
      uint64_t v16 = v71;
      uint64_t v17 = v81;
      uint64_t v18 = specialized randomSplit<A>(indices:proportions:generator:)((uint64_t)v15, v71);
      uint64_t v81 = v17;
      if (v17) {
        break;
      }
      uint64_t v84 = v18;
      unint64_t v69 = v11;
      swift_release();
      uint64_t v68 = *(void *)(v16 + 16);
      if (v68)
      {
        unint64_t v19 = 0;
        uint64_t v20 = v83;
        uint64_t v21 = v10;
        uint64_t v22 = v86;
        do
        {
          BOOL v23 = v21[2] <= v19;
          unint64_t v78 = v19;
          if (v23)
          {
            uint64_t v25 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [URL]);
            uint64_t v26 = Dictionary.init(dictionaryLiteral:)(_swiftEmptyArrayStorage, &type metadata for String, v25, &protocol witness table for String);
            if (!swift_isUniquelyReferenced_nonNull_native(v21)) {
              uint64_t v21 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v21[2] + 1, 1, (uint64_t)v21);
            }
            unint64_t v27 = v21[2];
            if (v21[3] >> 1 <= v27) {
              uint64_t v21 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(v21[3] >= 2uLL, v27 + 1, 1, (uint64_t)v21);
            }
            uint64_t v24 = v84;
            v21[2] = v27 + 1;
            v21[v27 + 4] = v26;
            uint64_t v20 = v83;
            uint64_t v22 = v86;
            unint64_t v19 = v78;
          }
          else
          {
            uint64_t v24 = v84;
          }
          if (v19 >= *(void *)(v24 + 16)) {
            BUG();
          }
          uint64_t v28 = *(void *)(v24 + 8 * v19 + 32);
          int64_t v29 = *(void *)(v28 + 16);
          uint64_t v85 = _swiftEmptyArrayStorage;
          if (v29)
          {
            unint64_t v79 = v21;
            uint64_t v87 = _swiftEmptyArrayStorage;
            int64_t v30 = v29;
            swift_bridgeObjectRetain(v28);
            int64_t v64 = v30;
            specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v30, 0);
            uint64_t v85 = v87;
            uint64_t v65 = (*(unsigned __int8 *)(v20 + 80) + 32) & ~*(unsigned __int8 *)(v20 + 80);
            uint64_t v66 = v65 + v82;
            uint64_t v31 = 0;
            uint64_t v32 = v75;
            uint64_t v63 = v28;
            do
            {
              uint64_t v33 = *(void *)(v28 + 8 * v31 + 32);
              if (v33 < 0) {
                BUG();
              }
              if ((unint64_t)v33 >= *(void *)(v82 + 16)) {
                BUG();
              }
              uint64_t v77 = *(void *)(v20 + 72);
              Swift::String v34 = v67;
              (*(void (**)(uint64_t *, uint64_t, uint64_t))(v20 + 16))(v67, v66 + v77 * v33, v32);
              uint64_t v35 = v85;
              uint64_t v87 = v85;
              uint64_t v36 = v20;
              unint64_t v37 = v85[2];
              unint64_t v38 = v85[3];
              int64_t v39 = v37 + 1;
              if (v38 >> 1 <= v37)
              {
                uint64_t v85 = (void *)(v37 + 1);
                specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v38 >= 2, v39, 1);
                int64_t v39 = (int64_t)v85;
                uint64_t v36 = v83;
                uint64_t v32 = v75;
                uint64_t v35 = v87;
              }
              ++v31;
              void v35[2] = v39;
              uint64_t v85 = v35;
              uint64_t v40 = (char *)v35 + v65 + v77 * v37;
              uint64_t v20 = v36;
              (*(void (**)(char *, uint64_t *, uint64_t))(v36 + 32))(v40, v34, v32);
              uint64_t v28 = v63;
            }
            while (v64 != v31);
            swift_bridgeObjectRelease(v63);
            uint64_t v21 = v79;
            uint64_t v22 = v86;
          }
          swift_bridgeObjectRetain(v22);
          if (!swift_isUniquelyReferenced_nonNull_native(v21)) {
            uint64_t v21 = specialized _ArrayBuffer._consumeAndCreateNew()((uint64_t)v21);
          }
          if (v78 >= v21[2]) {
            BUG();
          }
          unint64_t v41 = v78;
          LOBYTE(v77) = swift_isUniquelyReferenced_nonNull_native(v21[v78 + 4]);
          uint64_t v87 = (void *)v21[v41 + 4];
          uint64_t v42 = v87;
          unint64_t v79 = v21;
          v21[v41 + 4] = 0x8000000000000000;
          unint64_t v44 = specialized __RawDictionaryStorage.find<A>(_:)(v80, v22);
          BOOL v45 = (v43 & 1) == 0;
          BOOL v46 = __OFADD__(v42[2], v45);
          Swift::Int v47 = v42[2] + v45;
          if (v46) {
            BUG();
          }
          char v48 = v43;
          __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _NativeDictionary<String, [URL]>);
          if (_NativeDictionary.ensureUnique(isUnique:capacity:)(v77, v47))
          {
            unint64_t v44 = specialized __RawDictionaryStorage.find<A>(_:)(v80, v86);
            if ((v48 & 1) != (v49 & 1))
            {
              KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(&type metadata for String);
              BUG();
            }
          }
          uint64_t v50 = v87;
          if (v48)
          {
            uint64_t v51 = v87[7];
            swift_bridgeObjectRelease(*(void *)(v51 + 8 * v44));
            *(void *)(v51 + 8 * v44) = v85;
          }
          else
          {
            v87[(v44 >> 6) + 8] |= 1 << v44;
            uint64_t v52 = v50[6];
            uint64_t v53 = 16 * v44;
            *(void *)(v52 + v53) = v80;
            char v54 = v86;
            *(void *)(v52 + v53 + 8) = v86;
            *(void *)(v50[7] + 8 * v44) = v85;
            uint64_t v55 = v50[2];
            BOOL v46 = __OFADD__(1, v55);
            uint64_t v56 = v55 + 1;
            if (v46) {
              BUG();
            }
            v50[2] = v56;
            swift_bridgeObjectRetain(v54);
          }
          unint64_t v57 = v78 + 1;
          uint64_t v21 = v79;
          uint64_t v58 = v79[v78 + 4];
          v79[v78 + 4] = v50;
          uint64_t v59 = v86;
          swift_bridgeObjectRelease(v86);
          swift_bridgeObjectRelease(v58);
          unint64_t v19 = v57;
          BOOL v60 = v57 == v68;
          uint64_t v20 = v83;
          uint64_t v22 = v59;
        }
        while (!v60);
      }
      else
      {
        uint64_t v21 = v10;
        LOBYTE(v22) = v86;
      }
      uint64_t v10 = v21;
      unint64_t v11 = v69 + 1;
      swift_bridgeObjectRelease(v22);
      swift_bridgeObjectRelease(v82);
      swift_bridgeObjectRelease(v84);
      int64_t v9 = v76;
      if (v11 == v74)
      {
        swift_release();
        return v10;
      }
    }
    swift_bridgeObjectRelease((_BYTE)v10);
    swift_release();
    swift_bridgeObjectRelease(v86);
    swift_bridgeObjectRelease(v82);
    return (void *)swift_release();
  }
  else
  {
    swift_release();
    return _swiftEmptyArrayStorage;
  }
}

uint64_t specialized randomSplit<A>(indices:proportions:generator:)(uint64_t a1, uint64_t a2)
{
  if (!*(void *)(a2 + 16))
  {
    uint64_t v8 = lazy protocol witness table accessor for type MLCreateError and conformance MLCreateError();
    swift_allocError(&type metadata for MLCreateError, v8, 0, 0);
    *(void *)uint64_t v6 = 0xD000000000000024;
    uint64_t v7 = "-zero proportion is required.";
    goto LABEL_16;
  }
  int64_t v59 = *(void *)(a2 + 16);
  double v3 = COERCE_DOUBLE(specialized Sequence<>.min()(a2));
  if (v4) {
    BUG();
  }
  if (v3 < 0.0)
  {
    uint64_t v5 = lazy protocol witness table accessor for type MLCreateError and conformance MLCreateError();
    swift_allocError(&type metadata for MLCreateError, v5, 0, 0);
    *(void *)uint64_t v6 = 0xD00000000000002ALL;
    uint64_t v7 = "";
LABEL_16:
    *(void *)(v6 + 8) = (unint64_t)v7 | 0x8000000000000000;
    *(_OWORD *)(v6 + 16) = 0;
    *(_OWORD *)(v6 + 32) = 0;
    *(unsigned char *)(v6 + 48) = 0;
    return swift_willThrow();
  }
  double v9 = COERCE_DOUBLE(specialized Sequence<>.max()(a2));
  if (v10) {
    BUG();
  }
  if (v9 <= 0.0)
  {
    uint64_t v19 = lazy protocol witness table accessor for type MLCreateError and conformance MLCreateError();
    swift_allocError(&type metadata for MLCreateError, v19, 0, 0);
    *(void *)uint64_t v6 = 0xD00000000000002DLL;
    uint64_t v7 = "e proportions are allowed.";
    goto LABEL_16;
  }
  uint64_t v11 = 0;
  uint64_t v55 = *(void *)(a1 + 16);
  uint64_t v56 = specialized _copyCollectionToContiguousArray<A>(_:)(0, v55);
  specialized MutableCollection<>.shuffle<A>(using:)();
  double v12 = 0.0;
  do
    double v12 = v12 + *(double *)(a2 + 8 * v11++ + 32);
  while (v59 != v11);
  uint64_t v13 = 0;
  double v64 = v12;
  specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v59, 0);
  uint64_t v14 = a2;
  int64_t v15 = v59;
  unint64_t v16 = _swiftEmptyArrayStorage[2];
  do
  {
    double v17 = *(double *)(v14 + 8 * v13 + 32);
    int64_t v18 = v16 + 1;
    if (_swiftEmptyArrayStorage[3] >> 1 <= v16)
    {
      specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(_swiftEmptyArrayStorage[3] >= 2uLL, v18, 1);
      double v12 = v64;
      int64_t v18 = v16 + 1;
      uint64_t v14 = a2;
      int64_t v15 = v59;
    }
    ++v13;
    _swiftEmptyArrayStorage[2] = v18;
    *(double *)&_swiftEmptyArrayStorage[v16 + 4] = v17 / v12;
    unint64_t v16 = v18;
  }
  while (v15 != v13);
  int64_t v62 = v18;
  swift_bridgeObjectRetain(_swiftEmptyArrayStorage);
  uint64_t v21 = 0;
  uint64_t v22 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, 1, 1, (uint64_t)_swiftEmptyArrayStorage);
  uint64_t v23 = v22[2];
  uint64_t v24 = 8 * v23;
  uint64_t v25 = &_swiftEmptyArrayStorage[4];
  do
  {
    if (v21 + v23) {
      __m128d v26 = (__m128d)*(unint64_t *)((char *)&v22[v21 + 3] + v24);
    }
    else {
      __m128d v26 = 0;
    }
    double v27 = *(double *)&v25[v21];
    uint64_t v28 = v23 + v21 + 1;
    if (v22[3] >> 1 <= (unint64_t)(v21 + v23))
    {
      char v29 = v22[3] >= 2uLL;
      uint64_t v30 = (uint64_t)v22;
      uint64_t v60 = v23;
      uint64_t v65 = v24;
      uint64_t v31 = v25;
      uint64_t v32 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(v29, v23 + v21 + 1, 1, v30);
      __m128d v26 = (__m128d)*(unint64_t *)&v26.f64[0];
      uint64_t v25 = v31;
      uint64_t v24 = v65;
      uint64_t v23 = v60;
      int64_t v18 = v62;
      uint64_t v22 = v32;
    }
    v22[2] = v28;
    *(double *)((char *)&v22[v21++ + 4] + v24) = v27 + v26.f64[0];
  }
  while (v18 != v21);
  swift_release_n(_swiftEmptyArrayStorage, 2);
  swift_bridgeObjectRetain(a1);
  ML11randomSplit7indices11proportions9generatorSayi7SiGGAF_i15SdGxztKSGRzlFSiL6XEfU1_SaySiGTf1cn_n = _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSaySdG_Sis5NeverOTg5058_s8CreateML11randomSplit7indices11proportions9generatorSayi7SiGGAF_i15SdGxztKSGRzlFSiL6XEfU1_SaySiGTf1cn_n((uint64_t)v22, a1, v26);
  swift_bridgeObjectRelease(v22);
  uint64_t v34 = 0;
  unint64_t v35 = 0;
  uint64_t v36 = _swiftEmptyArrayStorage;
  uint64_t v58 = ML11randomSplit7indices11proportions9generatorSayi7SiGGAF_i15SdGxztKSGRzlFSiL6XEfU1_SaySiGTf1cn_n;
  do
  {
    if (v35 >= ML11randomSplit7indices11proportions9generatorSayi7SiGGAF_i15SdGxztKSGRzlFSiL6XEfU1_SaySiGTf1cn_n[2]) {
      BUG();
    }
    unint64_t v63 = v35;
    if (v34 >= ML11randomSplit7indices11proportions9generatorSayi7SiGGAF_i15SdGxztKSGRzlFSiL6XEfU1_SaySiGTf1cn_n[v35 + 4])
    {
      unint64_t v37 = (char *)_swiftEmptyArrayStorage;
    }
    else
    {
      uint64_t v66 = v36;
      uint64_t v61 = v34;
      unint64_t v37 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, 1, 1, (uint64_t)_swiftEmptyArrayStorage);
      uint64_t v38 = v34;
      unint64_t v39 = v63;
      uint64_t v36 = v66;
      uint64_t v40 = v58;
      uint64_t v41 = a1;
      unint64_t v42 = v55;
      char v43 = v56;
      do
      {
        if (v38 < 0) {
          BUG();
        }
        if ((unint64_t)v34 >= v43[2]) {
          BUG();
        }
        unint64_t v44 = v43[v34 + 4];
        if (v44 >= v42) {
          BUG();
        }
        uint64_t v45 = *(void *)(v41 + 8 * v44 + 32);
        unint64_t v46 = *((void *)v37 + 2);
        if (*((void *)v37 + 3) >> 1 <= v46)
        {
          unint64_t v37 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(*((void *)v37 + 3) >= 2uLL, v46 + 1, 1, (uint64_t)v37);
          uint64_t v38 = v61;
          unint64_t v39 = v63;
          uint64_t v36 = v66;
          uint64_t v40 = v58;
          char v43 = v56;
          unint64_t v42 = v55;
          uint64_t v41 = a1;
        }
        *((void *)v37 + 2) = v46 + 1;
        *(void *)&v37[8 * v46 + 32] = v45;
        ++v34;
      }
      while (v34 < v40[v39 + 4]);
    }
    uint64_t v67 = v37;
    uint64_t v47 = (uint64_t)v36;
    if (swift_isUniquelyReferenced_nonNull_native(v36)) {
      uint64_t v36 = (void *)v47;
    }
    else {
      uint64_t v36 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(void *)(v47 + 16) + 1, 1, v47);
    }
    unint64_t v48 = v36[2];
    int64_t v49 = v59;
    ML11randomSplit7indices11proportions9generatorSayi7SiGGAF_i15SdGxztKSGRzlFSiL6XEfU1_SaySiGTf1cn_n = v58;
    unint64_t v50 = v63;
    uint64_t v51 = v67;
    if (v36[3] >> 1 <= v48)
    {
      uint64_t v52 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(v36[3] >= 2uLL, v48 + 1, 1, (uint64_t)v36);
      uint64_t v51 = v67;
      unint64_t v50 = v63;
      ML11randomSplit7indices11proportions9generatorSayi7SiGGAF_i15SdGxztKSGRzlFSiL6XEfU1_SaySiGTf1cn_n = v58;
      int64_t v49 = v59;
      uint64_t v36 = v52;
    }
    unint64_t v35 = v50 + 1;
    void v36[2] = v48 + 1;
    v36[v48 + 4] = v51;
  }
  while (v35 != v49);
  uint64_t v53 = ML11randomSplit7indices11proportions9generatorSayi7SiGGAF_i15SdGxztKSGRzlFSiL6XEfU1_SaySiGTf1cn_n;
  char v54 = v36;
  swift_bridgeObjectRelease(v53);
  swift_release();
  return (uint64_t)v54;
}

uint64_t MLSoundClassifier.DataSource.labeledSounds()()
{
  *(void *)&long long v104 = v0;
  uint64_t v106 = v1;
  uint64_t v2 = type metadata accessor for UTType(0);
  uint64_t v3 = *(void *)(v2 - 8);
  int64_t v4 = *(void *)(v3 + 64);
  uint64_t v5 = alloca(v4);
  uint64_t v6 = alloca(v4);
  uint64_t v109 = &v102;
  uint64_t v7 = alloca(v4);
  uint64_t v8 = alloca(v4);
  uint64_t v107 = &v102;
  uint64_t v110 = type metadata accessor for URL(0);
  uint64_t v111 = *(void *)(v110 - 8);
  int64_t v9 = *(void *)(v111 + 64);
  char v10 = alloca(v9);
  uint64_t v11 = alloca(v9);
  uint64_t v108 = (char *)&v102;
  double v12 = alloca(v9);
  uint64_t v13 = alloca(v9);
  uint64_t v112 = &v102;
  uint64_t v14 = type metadata accessor for MLSoundClassifier.DataSource(0);
  int64_t v15 = *(void *)(*(void *)(v14 - 8) + 64);
  unint64_t v16 = alloca(v15);
  double v17 = alloca(v15);
  outlined init with copy of MLSoundClassifier.DataSource(v106, (uint64_t)&v102);
  switch(swift_getEnumCaseMultiPayload(&v102, v14))
  {
    case 0u:
      int64_t v18 = (uint64_t *)v2;
      uint64_t v19 = (uint64_t)v112;
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(v111 + 32))(v112, &v102, v110);
      uint64_t v20 = (uint64_t)v107;
      static UTType.audio.getter();
      uint64_t v21 = v104;
      uint64_t v22 = static _FileUtilities.collectFilesLabeledByDirectoryName(at:type:)(v19, v20);
      uint64_t v23 = v21;
      if (v21)
      {
        (*(void (**)(uint64_t *, uint64_t *))(v3 + 8))(v107, v18);
        uint64_t v24 = v112;
        goto LABEL_6;
      }
      uint64_t v29 = (uint64_t)v22;
      (*(void (**)(uint64_t *, uint64_t *))(v3 + 8))(v107, v18);
      unint64_t v37 = v112;
      goto LABEL_13;
    case 1u:
      int64_t v18 = (uint64_t *)v2;
      uint64_t v25 = (uint64_t)v108;
      (*(void (**)(char *, uint64_t *, uint64_t))(v111 + 32))(v108, &v102, v110);
      uint64_t v26 = (uint64_t)v109;
      static UTType.audio.getter();
      uint64_t v27 = v104;
      uint64_t v28 = static _FileUtilities.collectFilesLabeledByFileName(at:type:)(v25, v26);
      uint64_t v23 = v27;
      if (!v27)
      {
        uint64_t v29 = v28;
        (*(void (**)(uint64_t *, uint64_t *))(v3 + 8))(v109, v18);
        unint64_t v37 = v108;
LABEL_13:
        (*(void (**)(void *, uint64_t))(v111 + 8))(v37, v110);
LABEL_14:
        uint64_t v38 = 1 << *(unsigned char *)(v29 + 32);
        uint64_t v39 = ~(-1 << v38);
        if (v38 >= 64) {
          uint64_t v39 = -1;
        }
        unint64_t v40 = *(void *)(v29 + 64) & v39;
        int64_t v103 = (unint64_t)(v38 + 63) >> 6;
        int64_t v18 = _swiftEmptyDictionarySingleton;
        uint64_t v41 = 0;
        uint64_t v112 = (uint64_t *)v29;
        while (1)
        {
          if (v40)
          {
            *(void *)&long long v104 = v23;
            _BitScanForward64(&v42, v40);
            uint64_t v108 = (char *)((v40 - 1) & v40);
            uint64_t v107 = v41;
            unint64_t v43 = v42 | ((void)v41 << 6);
          }
          else
          {
            BOOL v44 = __OFADD__(1, v41);
            int64_t v45 = (int64_t)v41 + 1;
            if (v44) {
              BUG();
            }
            if (v45 >= v103) {
              goto LABEL_43;
            }
            unint64_t v46 = *(void *)(v29 + 8 * v45 + 64);
            if (!v46)
            {
              int64_t v47 = v45 + 1;
              if (v45 + 1 >= v103) {
                goto LABEL_43;
              }
              unint64_t v46 = *(void *)(v29 + 8 * v45 + 72);
              if (!v46)
              {
                int64_t v47 = v45 + 2;
                if (v45 + 2 >= v103) {
                  goto LABEL_43;
                }
                unint64_t v46 = *(void *)(v29 + 8 * v45 + 80);
                if (!v46)
                {
                  int64_t v47 = v45 + 3;
                  if (v45 + 3 >= v103) {
                    goto LABEL_43;
                  }
                  unint64_t v46 = *(void *)(v29 + 8 * v45 + 88);
                  if (!v46)
                  {
                    v45 += 3;
                    while (1)
                    {
                      BOOL v44 = __OFADD__(1, v45++);
                      if (v44) {
                        BUG();
                      }
                      if (v45 >= v103) {
                        break;
                      }
                      unint64_t v46 = *(void *)(v29 + 8 * v45 + 64);
                      if (v46) {
                        goto LABEL_29;
                      }
                    }
LABEL_43:
                    swift_release();
                    swift_bridgeObjectRetain((_BYTE)v18);
                    uint64_t v66 = specialized _NativeDictionary.filter(_:)((uint64_t)v18);
                    swift_bridgeObjectRelease((_BYTE)v18);
                    uint64_t v67 = 1 << *((unsigned char *)v66 + 32);
                    uint64_t v68 = ~(-1 << v67);
                    if (v67 >= 64) {
                      uint64_t v68 = -1;
                    }
                    unint64_t v69 = v66[8] & v68;
                    uint64_t v112 = (uint64_t *)((unint64_t)(v67 + 63) >> 6);
                    uint64_t v109 = v66;
                    swift_retain();
                    uint64_t v70 = 0;
                    uint64_t v108 = "are not properly constructed." + 0x8000000000000000;
                    *(void *)&long long v104 = v23;
                    uint64_t v107 = v18;
                    while (1)
                    {
                      if (v69)
                      {
                        _BitScanForward64(&v71, v69);
                        uint64_t v111 = (v69 - 1) & v69;
                        uint64_t v106 = v70;
                        unint64_t v72 = v71 | (v70 << 6);
                        uint64_t v73 = (uint64_t)v109;
                      }
                      else
                      {
                        BOOL v44 = __OFADD__(1, v70);
                        uint64_t v74 = v70 + 1;
                        uint64_t v73 = (uint64_t)v109;
                        if (v44) {
                          BUG();
                        }
                        if (v74 >= (uint64_t)v112)
                        {
LABEL_68:
                          swift_release();
                          if (*(void *)(v73 + 16))
                          {
                            swift_bridgeObjectRelease((_BYTE)v18);
                            *(void *)&long long v105 = 0;
                            int64_t v18 = (uint64_t *)0xE000000000000000;
                            *((void *)&v105 + 1) = 0xE000000000000000;
                            _StringGuts.grow(_:)(69);
                            v89._char object = "eature data sources." + 0x8000000000000000;
                            v89._uint64_t countAndFlagsBits = 0xD000000000000017;
                            String.append(_:)(v89);
                            uint64_t v90 = specialized Collection.first.getter(v73);
                            if (v91) {
                              int64_t v18 = v91;
                            }
                            else {
                              uint64_t v90 = 0;
                            }
                            v92._uint64_t countAndFlagsBits = v90;
                            v92._char object = v18;
                            String.append(_:)(v92);
                            swift_bridgeObjectRelease((_BYTE)v18);
                            v92._char object = "Missing data for label " + 0x8000000000000000;
                            v92._uint64_t countAndFlagsBits = 0xD000000000000029;
                            String.append(_:)(v92);
                            uint64_t v93 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [URL]);
                            uint64_t v94 = Dictionary.Keys.description.getter(v73, &type metadata for String, v93, &protocol witness table for String);
                            char v96 = (char)v95;
                            v92._uint64_t countAndFlagsBits = v94;
                            v92._char object = v95;
                            String.append(_:)(v92);
                            swift_bridgeObjectRelease(v96);
                            v92._uint64_t countAndFlagsBits = 46;
                            v92._char object = (void *)0xE100000000000000;
                            String.append(_:)(v92);
                            long long v104 = v105;
                            v92._char object = (void *)lazy protocol witness table accessor for type MLCreateError and conformance MLCreateError();
                            swift_allocError(&type metadata for MLCreateError, v92._object, 0, 0);
                            *(_OWORD *)uint64_t v97 = v104;
                            *(_OWORD *)(v97 + 16) = 0;
                            *(_OWORD *)(v97 + 32) = 0;
                            *(unsigned char *)(v97 + 48) = 0;
                            swift_willThrow(&type metadata for MLCreateError, v92._object, v97, v98, v99, v100);
                            swift_release();
                          }
                          else
                          {
                            swift_release();
                          }
                          return (uint64_t)v18;
                        }
                        unint64_t i = v109[v74 + 8];
                        if (i)
                        {
                          uint64_t v76 = v74;
                        }
                        else
                        {
                          uint64_t v76 = v74 + 1;
                          if (v74 + 1 >= (uint64_t)v112) {
                            goto LABEL_68;
                          }
                          unint64_t i = v109[v74 + 9];
                          if (!i)
                          {
                            uint64_t v76 = v74 + 2;
                            if (v74 + 2 >= (uint64_t)v112) {
                              goto LABEL_68;
                            }
                            unint64_t i = v109[v74 + 10];
                            if (!i)
                            {
                              uint64_t v76 = v74 + 3;
                              if (v74 + 3 >= (uint64_t)v112) {
                                goto LABEL_68;
                              }
                              unint64_t i = v109[v74 + 11];
                              if (!i)
                              {
                                uint64_t v76 = v74 + 4;
                                if (v74 + 4 >= (uint64_t)v112) {
                                  goto LABEL_68;
                                }
                                unint64_t i = v109[v74 + 12];
                                if (!i)
                                {
                                  uint64_t v76 = v74 + 5;
                                  if (v74 + 5 >= (uint64_t)v112) {
                                    goto LABEL_68;
                                  }
                                  for (unint64_t i = v109[v74 + 13]; !i; unint64_t i = v109[v76 + 8])
                                  {
                                    BOOL v44 = __OFADD__(1, v76++);
                                    if (v44) {
                                      BUG();
                                    }
                                    if (v76 >= (uint64_t)v112) {
                                      goto LABEL_68;
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                        _BitScanForward64(&v77, i);
                        uint64_t v111 = i & (i - 1);
                        unint64_t v72 = v77 + (v76 << 6);
                        uint64_t v106 = v76;
                      }
                      uint64_t v78 = *(void *)(v73 + 48);
                      uint64_t v79 = 16 * v72;
                      uint64_t v80 = *(void *)(v78 + v79);
                      uint64_t v81 = *(void **)(v78 + v79 + 8);
                      *(void *)&long long v105 = 0;
                      *((void *)&v105 + 1) = 0xE000000000000000;
                      swift_bridgeObjectRetain((_BYTE)v81);
                      _StringGuts.grow(_:)(29);
                      swift_bridgeObjectRelease(BYTE8(v105));
                      *(void *)&long long v105 = 0xD000000000000019;
                      *((void *)&v105 + 1) = v108;
                      v82._uint64_t countAndFlagsBits = v80;
                      v82._char object = v81;
                      String.append(_:)(v82);
                      swift_bridgeObjectRelease((_BYTE)v81);
                      v82._uint64_t countAndFlagsBits = 11815;
                      v82._char object = (void *)0xE200000000000000;
                      String.append(_:)(v82);
                      long long v83 = v105;
                      LOBYTE(v110) = static os_log_type_t.error.getter(11815, 0xE200000000000000);
                      uint64_t v84 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Any>);
                      uint64_t v85 = swift_allocObject(v84, 64, 7);
                      *(void *)(v85 + 16) = 1;
                      *(void *)(v85 + 24) = 2;
                      *(void *)(v85 + 56) = &type metadata for String;
                      *(_OWORD *)(v85 + 32) = v83;
                      swift_bridgeObjectRetain(BYTE8(v83));
                      print(_:separator:terminator:)(v85, 32, 0xE100000000000000, 10, 0xE100000000000000);
                      swift_bridgeObjectRelease(v85);
                      type metadata accessor for OS_os_log(0, &lazy cache variable for type metadata for OS_os_log, OS_os_log_ptr);
                      uint64_t v86 = (void *)static OS_os_log.default.getter(0);
                      uint64_t v87 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<CVarArg>);
                      uint64_t v88 = swift_allocObject(v87, 72, 7);
                      *(void *)(v88 + 16) = 1;
                      *(void *)(v88 + 24) = 2;
                      *(void *)(v88 + 56) = &type metadata for String;
                      *(void *)(v88 + 64) = lazy protocol witness table accessor for type String and conformance String();
                      *(_OWORD *)(v88 + 32) = v83;
                      swift_bridgeObjectRetain(BYTE8(v83));
                      os_log(_:dso:log:type:_:)("%@\n", 3, 2, &dword_0, v86, v110, v88);
                      swift_bridgeObjectRelease(BYTE8(v83));

                      swift_bridgeObjectRelease(v88);
                      int64_t v18 = v107;
                      uint64_t v70 = v106;
                      unint64_t v69 = v111;
                    }
                  }
                }
              }
              int64_t v45 = v47;
            }
LABEL_29:
            _BitScanForward64(&v48, v46);
            *(void *)&long long v104 = v23;
            uint64_t v108 = (char *)(v46 & (v46 - 1));
            uint64_t v107 = (uint64_t *)v45;
            unint64_t v43 = v48 + (v45 << 6);
          }
          uint64_t v49 = *(void *)(v29 + 48);
          uint64_t v50 = *(void *)(v29 + 56);
          uint64_t v51 = *(void *)(v49 + 16 * v43);
          uint64_t v52 = *(void *)(v49 + 16 * v43 + 8);
          uint64_t v53 = *(void *)(v50 + 8 * v43);
          swift_bridgeObjectRetain(v52);
          swift_bridgeObjectRetain(v53);
          uint64_t v109 = static _AudioUtilities.validateAudioURLs(from:)(v53);
          swift_bridgeObjectRelease(v53);
          char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v18);
          *(void *)&long long v105 = v18;
          uint64_t v110 = v51;
          uint64_t v106 = v52;
          unint64_t v55 = specialized __RawDictionaryStorage.find<A>(_:)(v51, v52);
          LOBYTE(v111) = v56;
          BOOL v57 = (v56 & 1) == 0;
          BOOL v44 = __OFADD__(v18[2], v57);
          Swift::Int v58 = v18[2] + v57;
          if (v44) {
            BUG();
          }
          __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _NativeDictionary<String, [URL]>);
          Swift::Bool v59 = _NativeDictionary.ensureUnique(isUnique:capacity:)(isUniquelyReferenced_nonNull_native, v58);
          uint64_t v60 = v106;
          if (v59)
          {
            unint64_t v55 = specialized __RawDictionaryStorage.find<A>(_:)(v110, v106);
            if ((v111 & 1) != (v61 & 1))
            {
              KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(&type metadata for String);
              BUG();
            }
          }
          int64_t v18 = (uint64_t *)v105;
          if (v111)
          {
            uint64_t v60 = *(void *)(v105 + 56);
            swift_bridgeObjectRelease(*(void *)(v60 + 8 * v55));
            *(void *)(v60 + 8 * v55) = v109;
            LOBYTE(v60) = v106;
            uint64_t v29 = (uint64_t)v112;
          }
          else
          {
            *(void *)(v105 + 8 * (v55 >> 6) + 64) |= 1 << v55;
            uint64_t v62 = v18[6];
            uint64_t v63 = 16 * v55;
            *(void *)(v62 + v63) = v110;
            *(void *)(v62 + v63 + 8) = v60;
            *(void *)(v18[7] + 8 * v55) = v109;
            uint64_t v64 = v18[2];
            BOOL v44 = __OFADD__(1, v64);
            uint64_t v65 = v64 + 1;
            uint64_t v29 = (uint64_t)v112;
            if (v44) {
              BUG();
            }
            int v18[2] = v65;
            swift_bridgeObjectRetain(v60);
          }
          swift_bridgeObjectRelease(v60);
          swift_bridgeObjectRelease(0);
          uint64_t v23 = v104;
          uint64_t v41 = v107;
          unint64_t v40 = (unint64_t)v108;
        }
      }
      (*(void (**)(uint64_t *, uint64_t *))(v3 + 8))(v109, v18);
      uint64_t v24 = v108;
LABEL_6:
      (*(void (**)(void *, uint64_t))(v111 + 8))(v24, v110);
      return (uint64_t)v18;
    case 2u:
      uint64_t v29 = v102;
      uint64_t v23 = v104;
      goto LABEL_14;
    case 3u:
      char v30 = BYTE8(v104);
      char v31 = v105;
      outlined consume of Result<_DataTable, Error>(v102, v103);
      swift_bridgeObjectRelease(v31);
      swift_bridgeObjectRelease(v30);
      goto LABEL_10;
    case 4u:
      uint64_t v32 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (DataFrame, featureColumn: String, labelColumn: String, parameters: MLSoundClassifier.FeatureExtractionParameters));
      swift_bridgeObjectRelease(*(uint64_t *)((char *)&v102 + *(int *)(v32 + 48) + 8));
      swift_bridgeObjectRelease(*(uint64_t *)((char *)&v102 + *(int *)(v32 + 64) + 8));
      uint64_t v33 = type metadata accessor for DataFrame(0);
      (*(void (**)(uint64_t *, uint64_t))(*(void *)(v33 - 8) + 8))(&v102, v33);
LABEL_10:
      os_log_type_t v34 = static os_log_type_t.info.getter();
      v35._uint64_t countAndFlagsBits = 0xD000000000000044;
      v35._char object = "equires a training checkpoint." + 0x8000000000000000;
      log(_:type:)(v35, v34);
      uint64_t v36 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [URL]);
      return Dictionary.init(dictionaryLiteral:)(_swiftEmptyArrayStorage, &type metadata for String, v36, &protocol witness table for String);
  }
}

uint64_t MLSoundClassifier.DataSource.validate(modelParameters:)(uint64_t a1)
{
  unint64_t v37 = v1;
  uint64_t v36 = a1;
  uint64_t v44 = type metadata accessor for DataFrame(0);
  uint64_t v38 = *(void *)(v44 - 8);
  int64_t v3 = *(void *)(v38 + 64);
  int64_t v4 = alloca(v3);
  uint64_t v5 = alloca(v3);
  uint64_t v6 = alloca(v3);
  uint64_t v7 = alloca(v3);
  int64_t v45 = (uint64_t *)&v30;
  uint64_t v8 = type metadata accessor for MLSoundClassifier.DataSource(0);
  int64_t v9 = *(void *)(*(void *)(v8 - 8) + 64);
  char v10 = alloca(v9);
  uint64_t v11 = alloca(v9);
  outlined init with copy of MLSoundClassifier.DataSource(v2, (uint64_t)&v30);
  int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload(&v30, v8);
  if (EnumCaseMultiPayload == 3)
  {
    int v25 = v31;
    uint64_t v46 = v32;
    uint64_t v26 = v33;
    uint64_t v39 = v34;
    uint64_t v27 = v35;
    uint64_t v43 = v36;
    Swift::String v35 = v37;
    LOBYTE(v42) = v38;
    uint64_t v41 = v34;
    LOBYTE(v31) = v31 & 1;
    int64_t v45 = v30;
    LODWORD(v47) = v25;
    outlined copy of Result<_DataTable, Error>((uint64_t)v30, v25);
    DataFrame.init(_:)((uint64_t)&v30);
    uint64_t v28 = v37;
    MLSoundClassifier.DataSource.validateFeatures(dataFrame:featuresColumnName:labelsColumnName:)((uint64_t)&v30, v46, v26, v39, v27);
    if (v28)
    {
      (*(void (**)(uint64_t **, uint64_t))(v38 + 8))(&v30, v44);
      outlined consume of Result<_DataTable, Error>((uint64_t)v45, v47);
      swift_bridgeObjectRelease((_BYTE)v27);
      char v24 = (char)v26;
      return swift_bridgeObjectRelease(v24);
    }
    (*(void (**)(uint64_t **, uint64_t))(v38 + 8))(&v30, v44);
    swift_bridgeObjectRelease((_BYTE)v27);
    swift_bridgeObjectRelease((_BYTE)v26);
    char v30 = (uint64_t *)v43;
    uint64_t v31 = (uint64_t)v35;
    LOBYTE(v32) = v42 & 1;
    uint64_t v33 = (void *)v41;
    LOBYTE(v34) = v40 & 1;
    static MLSoundClassifier.validateFeatureExtractionParameters(featureExtractionParameters:parameters:)((uint64_t)&v30, v36);
    return outlined consume of Result<_DataTable, Error>((uint64_t)v45, v47);
  }
  else if (EnumCaseMultiPayload == 4)
  {
    uint64_t v13 = (int *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (DataFrame, featureColumn: String, labelColumn: String, parameters: MLSoundClassifier.FeatureExtractionParameters));
    uint64_t v14 = v13[12];
    uint64_t v47 = *(uint64_t *)((char *)&v30 + v14);
    int64_t v15 = *(uint64_t **)((char *)&v30 + v14 + 8);
    uint64_t v16 = v13[16];
    uint64_t v46 = *(uint64_t *)((char *)&v30 + v16);
    double v17 = *(uint64_t **)((char *)&v30 + v16 + 8);
    uint64_t v18 = v13[20];
    uint64_t v42 = *(uint64_t *)((char *)&v30 + v18);
    uint64_t v43 = *(uint64_t *)((char *)&v30 + v18 + 8);
    LOBYTE(v41) = *((unsigned char *)&v32 + v18);
    unint64_t v40 = *(void **)((char *)&v33 + v18);
    LOBYTE(v39) = *((unsigned char *)&v34 + v18);
    uint64_t v19 = (uint64_t)v45;
    uint64_t v20 = v38;
    (*(void (**)(uint64_t *, uint64_t **, uint64_t))(v38 + 32))(v45, &v30, v44);
    uint64_t v21 = v47;
    uint64_t v47 = (uint64_t)v15;
    uint64_t v22 = v46;
    uint64_t v46 = (uint64_t)v17;
    uint64_t v23 = v37;
    MLSoundClassifier.DataSource.validateFeatures(dataFrame:featuresColumnName:labelsColumnName:)(v19, v21, v15, v22, v17);
    if (v23)
    {
      (*(void (**)(uint64_t, uint64_t))(v20 + 8))(v19, v44);
      swift_bridgeObjectRelease(v47);
      char v24 = v46;
      return swift_bridgeObjectRelease(v24);
    }
    swift_bridgeObjectRelease(v46);
    swift_bridgeObjectRelease(v47);
    char v30 = (uint64_t *)v42;
    uint64_t v31 = v43;
    LOBYTE(v32) = v41 & 1;
    uint64_t v33 = v40;
    LOBYTE(v34) = v39 & 1;
    static MLSoundClassifier.validateFeatureExtractionParameters(featureExtractionParameters:parameters:)((uint64_t)&v30, v36);
    return (*(uint64_t (**)(uint64_t *, uint64_t))(v20 + 8))(v45, v44);
  }
  else
  {
    return outlined destroy of MLSoundClassifier.DataSource((uint64_t)&v30);
  }
}

uint64_t MLSoundClassifier.DataSource.validateFeatures(dataFrame:featuresColumnName:labelsColumnName:)(uint64_t a1, uint64_t a2, void *a3, uint64_t a4, void *a5)
{
  v54._char object = v5;
  uint64_t v53 = a5;
  v54._uint64_t countAndFlagsBits = a4;
  uint64_t v52 = a3;
  v55._uint64_t countAndFlagsBits = a2;
  uint64_t v56 = type metadata accessor for AnyColumn(0);
  uint64_t v57 = *(void *)(v56 - 8);
  int64_t v6 = *(void *)(v57 + 64);
  uint64_t v7 = alloca(v6);
  uint64_t v8 = alloca(v6);
  v55._char object = &v51;
  uint64_t v9 = type metadata accessor for DataFrame.Rows(0);
  uint64_t v10 = *(void *)(v9 - 8);
  int64_t v11 = *(void *)(v10 + 64);
  double v12 = alloca(v11);
  uint64_t v13 = alloca(v11);
  *(void *)&long long v58 = a1;
  DataFrame.rows.getter();
  BOOL v14 = specialized Collection.isEmpty.getter();
  (*(void (**)(long long *, uint64_t))(v10 + 8))(&v51, v9);
  if (v14)
  {
    uint64_t v15 = lazy protocol witness table accessor for type MLCreateError and conformance MLCreateError();
    swift_allocError(&type metadata for MLCreateError, v15, 0, 0);
    *(void *)uint64_t v16 = 0xD000000000000020;
    *(void *)(v16 + 8) = "umn is not of string type." + 0x8000000000000000;
    *(_OWORD *)(v16 + 16) = 0;
    *(_OWORD *)(v16 + 32) = 0;
    *(unsigned char *)(v16 + 48) = 0;
    return swift_willThrow(&type metadata for MLCreateError, v15, v16, v17, v18, v19);
  }
  uint64_t countAndFlagsBits = v54._countAndFlagsBits;
  uint64_t v21 = v53;
  v22._uint64_t countAndFlagsBits = v55._countAndFlagsBits;
  uint64_t v23 = v52;
  v22._char object = v52;
  Swift::Int_optional v24 = DataFrame.indexOfColumn(_:)(v22);
  if (v24.is_nil)
  {
    *(void *)&long long v51 = 0;
    *((void *)&v51 + 1) = 0xE000000000000000;
    _StringGuts.grow(_:)(50);
    swift_bridgeObjectRelease(BYTE8(v51));
    *(void *)&long long v51 = 0xD00000000000002FLL;
    *((void *)&v51 + 1) = "Classifier.DataSource.swift" + 0x8000000000000000;
    v34._uint64_t countAndFlagsBits = v55._countAndFlagsBits;
    v34._char object = v23;
    String.append(_:)(v34);
    v34._uint64_t countAndFlagsBits = 46;
    v34._char object = (void *)0xE100000000000000;
    String.append(_:)(v34);
    long long v58 = v51;
    uint64_t v15 = lazy protocol witness table accessor for type MLCreateError and conformance MLCreateError();
    swift_allocError(&type metadata for MLCreateError, v15, 0, 0);
    *(_OWORD *)uint64_t v16 = v58;
    *(_OWORD *)(v16 + 16) = 0;
    *(_OWORD *)(v16 + 32) = 0;
    *(unsigned char *)(v16 + 48) = 0;
    return swift_willThrow(&type metadata for MLCreateError, v15, v16, v17, v18, v19);
  }
  char object = v55._object;
  DataFrame.subscript.getter(v24.value);
  uint64_t v26 = AnyColumn.wrappedElementType.getter();
  if ((static MLSoundClassifier.DataSource.isNumericArray(_:)(v26) & 1) == 0)
  {
    uint64_t v35 = lazy protocol witness table accessor for type MLCreateError and conformance MLCreateError();
    swift_allocError(&type metadata for MLCreateError, v35, 0, 0);
    *(void *)uint64_t v36 = 0xD000000000000040;
    *(void *)(v36 + 8) = " table does not contain column " + 0x8000000000000000;
    *(_OWORD *)(v36 + 16) = 0;
    *(_OWORD *)(v36 + 32) = 0;
    *(unsigned char *)(v36 + 48) = 0;
    swift_willThrow(&type metadata for MLCreateError, v35, v36, v37, v38, v39);
    unint64_t v40 = object;
    return (*(uint64_t (**)(void *, uint64_t))(v57 + 8))(v40, v56);
  }
  v27._uint64_t countAndFlagsBits = countAndFlagsBits;
  v27._char object = v21;
  if (DataFrame.indexOfColumn(_:)(v27).is_nil)
  {
    *(void *)&long long v51 = 0;
    *((void *)&v51 + 1) = 0xE000000000000000;
    _StringGuts.grow(_:)(50);
    swift_bridgeObjectRelease(BYTE8(v51));
    *(void *)&long long v51 = 0xD00000000000002FLL;
    *((void *)&v51 + 1) = "Classifier.DataSource.swift" + 0x8000000000000000;
    v41._uint64_t countAndFlagsBits = countAndFlagsBits;
    v41._char object = v21;
    String.append(_:)(v41);
    v41._uint64_t countAndFlagsBits = 46;
    v41._char object = (void *)0xE100000000000000;
    String.append(_:)(v41);
    long long v58 = v51;
    v41._char object = (void *)lazy protocol witness table accessor for type MLCreateError and conformance MLCreateError();
    swift_allocError(&type metadata for MLCreateError, v41._object, 0, 0);
    *(_OWORD *)uint64_t v42 = v58;
    *(_OWORD *)(v42 + 16) = 0;
    *(_OWORD *)(v42 + 32) = 0;
    *(unsigned char *)(v42 + 48) = 0;
    swift_willThrow(&type metadata for MLCreateError, v41._object, v42, v43, v44, v45);
    unint64_t v40 = v55._object;
    return (*(uint64_t (**)(void *, uint64_t))(v57 + 8))(v40, v56);
  }
  v28._uint64_t countAndFlagsBits = countAndFlagsBits;
  v28._char object = v21;
  char v29 = specialized DataFrame.containsColumn<A>(_:_:)(v28);
  uint64_t v30 = v57;
  uint64_t v31 = v56;
  uint64_t v32 = v55._object;
  if (v29) {
    return (*(uint64_t (**)(void *, uint64_t))(v57 + 8))(v55._object, v56);
  }
  uint64_t v46 = lazy protocol witness table accessor for type MLCreateError and conformance MLCreateError();
  swift_allocError(&type metadata for MLCreateError, v46, 0, 0);
  *(void *)uint64_t v47 = 0xD00000000000003ALL;
  *(void *)(v47 + 8) = "multiarray type." + 0x8000000000000000;
  *(_OWORD *)(v47 + 16) = 0;
  *(_OWORD *)(v47 + 32) = 0;
  *(unsigned char *)(v47 + 48) = 0;
  swift_willThrow(&type metadata for MLCreateError, v46, v47, v48, v49, v50);
  return (*(uint64_t (**)(void *, uint64_t))(v30 + 8))(v32, v31);
}

uint64_t static MLSoundClassifier.DataSource.isNumericArray(_:)(uint64_t a1)
{
  LOBYTE(v1) = 1;
  if (__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for MLShapedArray<Float>) != a1
    && __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for MLShapedArray<Double>) != a1
    && type metadata accessor for OS_os_log(0, &lazy cache variable for type metadata for MLMultiArray, MLMultiArray_ptr) != a1&& __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [Float]) != a1&& __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [Double]) != a1&& __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [Float?]) != a1&& __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [Double?]) != a1)
  {
    LOBYTE(v1) = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [Any?]) == a1;
  }
  return v1;
}

void *MLSoundClassifier.DataSource.stratifiedSplit(proportions:seed:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  int64_t v4 = (void *)a2;
  uint64_t v5 = MLSoundClassifier.DataSource.labeledSounds()(a1, a2, a3);
  if (!v3)
  {
    uint64_t v11 = v5;
    uint64_t v10 = a1;
    if (a2 < 0)
    {
      _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, "Negative value is not representable", 35, 2, "Swift/Integers.swift", 20, 2, 3451, 1);
      BUG();
    }
    uint64_t v6 = type metadata accessor for MersenneTwisterGenerator();
    swift_allocObject(v6, 136, 7);
    uint64_t v9 = MersenneTwisterGenerator.init(seed:)(a2);
    char v7 = v11;
    int64_t v4 = specialized stratifiedSplitGenerator<A>(proportions:generator:fileURLAndLabel:)(v10, (uint64_t)&v9, v11);
    swift_bridgeObjectRelease(v7);
    swift_release();
  }
  return v4;
}

void *MLSoundClassifier.DataSource.stratifiedSplit<A>(proportions:generator:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5 = (void *)a1;
  uint64_t v6 = MLSoundClassifier.DataSource.labeledSounds()(a1, a2, a3);
  if (!v4)
  {
    char v7 = v6;
    uint64_t v5 = stratifiedSplitGenerator<A>(proportions:generator:fileURLAndLabel:)(a1, a2, v6, a3, a4);
    swift_bridgeObjectRelease(v7);
  }
  return v5;
}

void *closure #1 in static MLSoundClassifier.DataSource.reformatFeatures(dataFrame:featureColumn:)(uint64_t *a1)
{
  uint64_t v3 = *a1;
  if (*a1)
  {
    uint64_t v17 = result;
    uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>);
    uint64_t v5 = (void *)swift_allocObject(v4, 40, 7);
    _OWORD v5[2] = 1;
    v5[3] = 3;
    uint64_t v6 = *(void *)(v3 + 16);
    id v7 = objc_allocWithZone((Class)NSNumber);
    uint64_t v19 = v6;
    void v5[4] = [v7 initWithInteger:v6];
    v13[0] = v5;
    specialized Array._endMutation()(v7, "initWithInteger:");
    objc_allocWithZone((Class)MLMultiArray);
    id v8 = @nonobjc MLMultiArray.init(shape:dataType:)((uint64_t)v5, 65600);
    if (v2)
    {
      swift_unexpectedError(v2, "CreateML/MLSoundClassifier.DataSource.swift", 43, 1, 341);
      BUG();
    }
    id v18 = v8;
    uint64_t v15 = UnsafeMutableBufferPointer.init(_:)(v18, &type metadata for Double);
    uint64_t v20 = 0;
    if (v19)
    {
      uint64_t v9 = v3 + 32;
      uint64_t v10 = 0;
      uint64_t v16 = (char *)&type metadata for Any + 8;
      while (1)
      {
        outlined init with copy of Either<LogisticRegressionClassifier<Float, String>, FullyConnectedNetworkClassifier<Float, String>>(v9, (uint64_t)v13, &demangling cache variable for type metadata for Any?);
        if (!v13[3]) {
          break;
        }
        if (!swift_dynamicCast(&v14, v13, v16, &type metadata for Double, 6)) {
          goto LABEL_9;
        }
        uint64_t v11 = v14;
LABEL_10:
        *(void *)(v15 + 8 * v10++) = v11;
        v9 += 32;
        if (v19 == v10) {
          goto LABEL_11;
        }
      }
      outlined destroy of Any?((uint64_t)v13, &demangling cache variable for type metadata for Any?);
LABEL_9:
      uint64_t v11 = 0;
      goto LABEL_10;
    }
LABEL_11:
    uint64_t result = v17;
    id v12 = v18;
  }
  else
  {
    id v12 = 0;
  }
  *uint64_t result = v12;
  return result;
}

uint64_t type metadata accessor for MLSoundClassifier.DataSource(uint64_t a1)
{
  uint64_t result = type metadata singleton initialization cache for MLSoundClassifier.DataSource;
  if (!type metadata singleton initialization cache for MLSoundClassifier.DataSource) {
    return swift_getSingletonMetadata(a1, &nominal type descriptor for MLSoundClassifier.DataSource);
  }
  return result;
}

uint64_t outlined init with copy of MLSoundClassifier.DataSource(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = type metadata accessor for MLSoundClassifier.DataSource(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v2 - 8) + 16))(a2, a1, v2);
  return a2;
}

void *specialized _NativeDictionary.filter(_:)(uint64_t a1)
{
  uint64_t v2 = (void *)a1;
  char v3 = *(unsigned char *)(a1 + 32);
  unint64_t v4 = (unint64_t)((1 << v3) + 63) >> 6;
  int64_t v5 = 8 * v4;
  if ((v3 & 0x3Fu) <= 0xD
    || _stdlib_isOSVersionAtLeastOrVariantVersionAtLeast(_:_:_:_:_:_:)(0xCuLL, 3uLL, 0, 0xFuLL, 4uLL, 0)
    && swift_stdlib_isStackAllocationSafe(8 * v4, 8))
  {
    unint64_t v15 = (unint64_t)&v15;
    uint64_t v6 = alloca(v5);
    id v7 = alloca(v5);
    specialized UnsafeMutablePointer.assign(repeating:count:)(0, v4, (uint64_t)&v15);
    id v8 = specialized closure #1 in _NativeDictionary.filter(_:)(&v15, v4, a1);
    if (v1) {
      swift_willThrow(&v15, v4, v9, v10, v11, v12);
    }
    else {
      return v8;
    }
  }
  else
  {
    uint64_t v13 = (unint64_t *)swift_slowAlloc(8 * v4, -1);
    specialized UnsafeMutablePointer.assign(repeating:count:)(0, v4, (uint64_t)v13);
    uint64_t v2 = specialized closure #1 in _NativeDictionary.filter(_:)(v13, v4, a1);
    swift_slowDealloc(v13, -1, -1);
  }
  return v2;
}

uint64_t initializeBufferWithCopyOfBuffer for MLSoundClassifier.DataSource(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3 = a1;
  int v4 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  if ((v4 & 0x20000) != 0)
  {
    uint64_t v9 = *(void *)a2;
    *(void *)uint64_t v3 = *(void *)a2;
    uint64_t v3 = v9 + ((v4 + 16) & ~v4);
    swift_retain();
  }
  else
  {
    switch(swift_getEnumCaseMultiPayload(a2, a3))
    {
      case 0u:
        uint64_t v6 = type metadata accessor for URL(0);
        (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 16))(a1, a2, v6);
        uint64_t v7 = a3;
        uint64_t v8 = 0;
        goto LABEL_10;
      case 1u:
        uint64_t v10 = type metadata accessor for URL(0);
        (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v10 - 8) + 16))(a1, a2, v10);
        uint64_t v26 = 1;
        goto LABEL_9;
      case 2u:
        uint64_t v11 = *(void *)a2;
        *(void *)uint64_t v3 = *(void *)a2;
        swift_bridgeObjectRetain(v11);
        uint64_t v26 = 2;
        goto LABEL_9;
      case 3u:
        uint64_t v12 = *(void *)a2;
        char v13 = *(unsigned char *)(a2 + 8);
        outlined copy of Result<_DataTable, Error>(*(void *)a2, v13);
        *(void *)a1 = v12;
        *(unsigned char *)(a1 + 8) = v13;
        *(void *)(a1 + 16) = *(void *)(a2 + 16);
        uint64_t v14 = *(void *)(a2 + 24);
        *(void *)(v3 + 24) = v14;
        *(void *)(v3 + 32) = *(void *)(a2 + 32);
        uint64_t v15 = *(void *)(a2 + 40);
        *(void *)(v3 + 40) = v15;
        long long v16 = *(_OWORD *)(a2 + 64);
        *(_OWORD *)(v3 + 48) = *(_OWORD *)(a2 + 48);
        *(_OWORD *)(v3 + 64) = v16;
        *(unsigned char *)(v3 + 80) = *(unsigned char *)(a2 + 80);
        swift_bridgeObjectRetain(v14);
        swift_bridgeObjectRetain(v15);
        uint64_t v26 = 3;
        goto LABEL_9;
      case 4u:
        uint64_t v17 = type metadata accessor for DataFrame(0);
        (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v17 - 8) + 16))(a1, a2, v17);
        id v18 = (int *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (DataFrame, featureColumn: String, labelColumn: String, parameters: MLSoundClassifier.FeatureExtractionParameters));
        uint64_t v19 = v18[12];
        *(void *)(a1 + v19) = *(void *)(a2 + v19);
        uint64_t v20 = *(void *)(a2 + v19 + 8);
        *(void *)(v3 + v19 + 8) = v20;
        uint64_t v21 = v18[16];
        *(void *)(v3 + v21) = *(void *)(a2 + v21);
        uint64_t v22 = *(void *)(a2 + v21 + 8);
        *(void *)(v3 + v21 + 8) = v22;
        uint64_t v23 = v18[20];
        *(unsigned char *)(v3 + v23 + 32) = *(unsigned char *)(a2 + v23 + 32);
        long long v24 = *(_OWORD *)(a2 + v23);
        *(_OWORD *)(v3 + v23 + 16) = *(_OWORD *)(a2 + v23 + 16);
        *(_OWORD *)(v3 + v23) = v24;
        swift_bridgeObjectRetain(v20);
        swift_bridgeObjectRetain(v22);
        uint64_t v26 = 4;
LABEL_9:
        uint64_t v8 = v26;
        a1 = v3;
        uint64_t v7 = a3;
LABEL_10:
        swift_storeEnumTagMultiPayload(a1, v7, v8);
        break;
    }
  }
  return v3;
}

uint64_t destroy for MLSoundClassifier.DataSource(uint64_t a1, uint64_t a2)
{
  uint64_t result = swift_getEnumCaseMultiPayload(a1, a2);
  switch((int)result)
  {
    case 0:
    case 1:
      uint64_t v3 = type metadata accessor for URL(0);
      uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(a1, v3);
      break;
    case 2:
      uint64_t result = swift_bridgeObjectRelease(*(void *)a1);
      break;
    case 3:
      outlined consume of Result<_DataTable, Error>(*(void *)a1, *(_DWORD *)(a1 + 8));
      swift_bridgeObjectRelease(*(void *)(a1 + 24));
      uint64_t result = swift_bridgeObjectRelease(*(void *)(a1 + 40));
      break;
    case 4:
      uint64_t v4 = type metadata accessor for DataFrame(0);
      (*(void (**)(uint64_t, uint64_t))(*(void *)(v4 - 8) + 8))(a1, v4);
      uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (DataFrame, featureColumn: String, labelColumn: String, parameters: MLSoundClassifier.FeatureExtractionParameters));
      swift_bridgeObjectRelease(*(void *)(a1 + *(int *)(v5 + 48) + 8));
      uint64_t result = swift_bridgeObjectRelease(*(void *)(a1 + *(int *)(v5 + 64) + 8));
      break;
    default:
      return result;
  }
  return result;
}

uint64_t initializeWithCopy for MLSoundClassifier.DataSource(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = a1;
  switch(swift_getEnumCaseMultiPayload(a2, a3))
  {
    case 0u:
      uint64_t v5 = type metadata accessor for URL(0);
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16))(a1, a2, v5);
      uint64_t v6 = a3;
      uint64_t v7 = 0;
      goto LABEL_8;
    case 1u:
      uint64_t v8 = type metadata accessor for URL(0);
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v8 - 8) + 16))(a1, a2, v8);
      uint64_t v24 = 1;
      goto LABEL_7;
    case 2u:
      uint64_t v9 = *(void *)a2;
      *(void *)uint64_t v4 = *(void *)a2;
      swift_bridgeObjectRetain(v9);
      uint64_t v24 = 2;
      goto LABEL_7;
    case 3u:
      uint64_t v10 = *(void *)a2;
      char v11 = *(unsigned char *)(a2 + 8);
      outlined copy of Result<_DataTable, Error>(*(void *)a2, v11);
      *(void *)a1 = v10;
      *(unsigned char *)(a1 + 8) = v11;
      *(void *)(a1 + 16) = *(void *)(a2 + 16);
      uint64_t v12 = *(void *)(a2 + 24);
      *(void *)(v4 + 24) = v12;
      *(void *)(v4 + 32) = *(void *)(a2 + 32);
      uint64_t v13 = *(void *)(a2 + 40);
      *(void *)(v4 + 40) = v13;
      long long v14 = *(_OWORD *)(a2 + 64);
      *(_OWORD *)(v4 + 48) = *(_OWORD *)(a2 + 48);
      *(_OWORD *)(v4 + 64) = v14;
      *(unsigned char *)(v4 + 80) = *(unsigned char *)(a2 + 80);
      swift_bridgeObjectRetain(v12);
      swift_bridgeObjectRetain(v13);
      uint64_t v24 = 3;
      goto LABEL_7;
    case 4u:
      uint64_t v15 = type metadata accessor for DataFrame(0);
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v15 - 8) + 16))(a1, a2, v15);
      long long v16 = (int *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (DataFrame, featureColumn: String, labelColumn: String, parameters: MLSoundClassifier.FeatureExtractionParameters));
      uint64_t v17 = v16[12];
      *(void *)(a1 + v17) = *(void *)(a2 + v17);
      uint64_t v18 = *(void *)(a2 + v17 + 8);
      *(void *)(v4 + v17 + 8) = v18;
      uint64_t v19 = v16[16];
      *(void *)(v4 + v19) = *(void *)(a2 + v19);
      uint64_t v20 = *(void *)(a2 + v19 + 8);
      *(void *)(v4 + v19 + 8) = v20;
      uint64_t v21 = v16[20];
      *(unsigned char *)(v4 + v21 + 32) = *(unsigned char *)(a2 + v21 + 32);
      long long v22 = *(_OWORD *)(a2 + v21);
      *(_OWORD *)(v4 + v21 + 16) = *(_OWORD *)(a2 + v21 + 16);
      *(_OWORD *)(v4 + v21) = v22;
      swift_bridgeObjectRetain(v18);
      swift_bridgeObjectRetain(v20);
      uint64_t v24 = 4;
LABEL_7:
      uint64_t v7 = v24;
      a1 = v4;
      uint64_t v6 = a3;
LABEL_8:
      swift_storeEnumTagMultiPayload(a1, v6, v7);
      return v4;
  }
}

uint64_t assignWithCopy for MLSoundClassifier.DataSource(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3 = a1;
  if (a1 != a2)
  {
    outlined destroy of MLSoundClassifier.DataSource(a1);
    switch(swift_getEnumCaseMultiPayload(a2, a3))
    {
      case 0u:
        uint64_t v5 = type metadata accessor for URL(0);
        (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16))(a1, a2, v5);
        uint64_t v6 = a3;
        uint64_t v7 = 0;
        goto LABEL_9;
      case 1u:
        uint64_t v8 = type metadata accessor for URL(0);
        (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v8 - 8) + 16))(a1, a2, v8);
        uint64_t v24 = 1;
        goto LABEL_8;
      case 2u:
        uint64_t v9 = *(void *)a2;
        *(void *)uint64_t v3 = *(void *)a2;
        swift_bridgeObjectRetain(v9);
        uint64_t v24 = 2;
        goto LABEL_8;
      case 3u:
        uint64_t v10 = *(void *)a2;
        char v11 = *(unsigned char *)(a2 + 8);
        outlined copy of Result<_DataTable, Error>(*(void *)a2, v11);
        *(void *)a1 = v10;
        *(unsigned char *)(a1 + 8) = v11;
        *(void *)(a1 + 16) = *(void *)(a2 + 16);
        uint64_t v12 = *(void *)(a2 + 24);
        *(void *)(v3 + 24) = v12;
        *(void *)(v3 + 32) = *(void *)(a2 + 32);
        uint64_t v13 = *(void *)(a2 + 40);
        *(void *)(v3 + 40) = v13;
        long long v14 = *(_OWORD *)(a2 + 64);
        *(_OWORD *)(v3 + 48) = *(_OWORD *)(a2 + 48);
        *(_OWORD *)(v3 + 64) = v14;
        *(unsigned char *)(v3 + 80) = *(unsigned char *)(a2 + 80);
        swift_bridgeObjectRetain(v12);
        swift_bridgeObjectRetain(v13);
        uint64_t v24 = 3;
        goto LABEL_8;
      case 4u:
        uint64_t v15 = type metadata accessor for DataFrame(0);
        (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v15 - 8) + 16))(a1, a2, v15);
        long long v16 = (int *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (DataFrame, featureColumn: String, labelColumn: String, parameters: MLSoundClassifier.FeatureExtractionParameters));
        uint64_t v17 = v16[12];
        *(void *)(a1 + v17) = *(void *)(a2 + v17);
        uint64_t v18 = *(void *)(a2 + v17 + 8);
        *(void *)(v3 + v17 + 8) = v18;
        uint64_t v19 = v16[16];
        *(void *)(v3 + v19) = *(void *)(a2 + v19);
        uint64_t v20 = *(void *)(a2 + v19 + 8);
        *(void *)(v3 + v19 + 8) = v20;
        uint64_t v21 = v16[20];
        *(unsigned char *)(v3 + v21 + 32) = *(unsigned char *)(a2 + v21 + 32);
        long long v22 = *(_OWORD *)(a2 + v21);
        *(_OWORD *)(v3 + v21 + 16) = *(_OWORD *)(a2 + v21 + 16);
        *(_OWORD *)(v3 + v21) = v22;
        swift_bridgeObjectRetain(v18);
        swift_bridgeObjectRetain(v20);
        uint64_t v24 = 4;
LABEL_8:
        uint64_t v7 = v24;
        a1 = v3;
        uint64_t v6 = a3;
LABEL_9:
        swift_storeEnumTagMultiPayload(a1, v6, v7);
        break;
    }
  }
  return v3;
}

uint64_t outlined destroy of MLSoundClassifier.DataSource(uint64_t a1)
{
  uint64_t v1 = type metadata accessor for MLSoundClassifier.DataSource(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v1 - 8) + 8))(a1, v1);
  return a1;
}

unsigned char *initializeWithTake for MLSoundClassifier.DataSource(unsigned char *__dst, unsigned char *__src, uint64_t a3)
{
  int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload(__src, a3);
  if (EnumCaseMultiPayload == 4)
  {
    uint64_t v8 = type metadata accessor for DataFrame(0);
    (*(void (**)(unsigned char *, unsigned char *, uint64_t))(*(void *)(v8 - 8) + 32))(__dst, __src, v8);
    uint64_t v9 = (int *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (DataFrame, featureColumn: String, labelColumn: String, parameters: MLSoundClassifier.FeatureExtractionParameters));
    *(_OWORD *)&__dst[v9[12]] = *(_OWORD *)&__src[v9[12]];
    *(_OWORD *)&__dst[v9[16]] = *(_OWORD *)&__src[v9[16]];
    uint64_t v10 = v9[20];
    long long v11 = *(_OWORD *)&__src[v10 + 16];
    *(_OWORD *)&__dst[v10] = *(_OWORD *)&__src[v10];
    *(_OWORD *)&__dst[v10 + 16] = v11;
    __dst[v10 + 32] = __src[v10 + 32];
    uint64_t v14 = 4;
LABEL_7:
    uint64_t v7 = v14;
    uint64_t v6 = a3;
    goto LABEL_8;
  }
  if (EnumCaseMultiPayload == 1)
  {
    uint64_t v12 = type metadata accessor for URL(0);
    (*(void (**)(unsigned char *, unsigned char *, uint64_t))(*(void *)(v12 - 8) + 32))(__dst, __src, v12);
    uint64_t v14 = 1;
    goto LABEL_7;
  }
  if (EnumCaseMultiPayload)
  {
    memcpy(__dst, __src, *(void *)(*(void *)(a3 - 8) + 64));
    return __dst;
  }
  uint64_t v5 = type metadata accessor for URL(0);
  (*(void (**)(unsigned char *, unsigned char *, uint64_t))(*(void *)(v5 - 8) + 32))(__dst, __src, v5);
  uint64_t v6 = a3;
  uint64_t v7 = 0;
LABEL_8:
  swift_storeEnumTagMultiPayload(__dst, v6, v7);
  return __dst;
}

unsigned char *assignWithTake for MLSoundClassifier.DataSource(unsigned char *__dst, unsigned char *__src, uint64_t a3)
{
  if (__dst != __src)
  {
    outlined destroy of MLSoundClassifier.DataSource((uint64_t)__dst);
    int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload(__src, a3);
    if (EnumCaseMultiPayload == 4)
    {
      uint64_t v8 = type metadata accessor for DataFrame(0);
      (*(void (**)(unsigned char *, unsigned char *, uint64_t))(*(void *)(v8 - 8) + 32))(__dst, __src, v8);
      uint64_t v9 = (int *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (DataFrame, featureColumn: String, labelColumn: String, parameters: MLSoundClassifier.FeatureExtractionParameters));
      *(_OWORD *)&__dst[v9[12]] = *(_OWORD *)&__src[v9[12]];
      *(_OWORD *)&__dst[v9[16]] = *(_OWORD *)&__src[v9[16]];
      uint64_t v10 = v9[20];
      long long v11 = *(_OWORD *)&__src[v10 + 16];
      *(_OWORD *)&__dst[v10] = *(_OWORD *)&__src[v10];
      *(_OWORD *)&__dst[v10 + 16] = v11;
      __dst[v10 + 32] = __src[v10 + 32];
      uint64_t v14 = 4;
    }
    else
    {
      if (EnumCaseMultiPayload != 1)
      {
        if (EnumCaseMultiPayload)
        {
          memcpy(__dst, __src, *(void *)(*(void *)(a3 - 8) + 64));
          return __dst;
        }
        uint64_t v5 = type metadata accessor for URL(0);
        (*(void (**)(unsigned char *, unsigned char *, uint64_t))(*(void *)(v5 - 8) + 32))(__dst, __src, v5);
        uint64_t v6 = a3;
        uint64_t v7 = 0;
        goto LABEL_9;
      }
      uint64_t v12 = type metadata accessor for URL(0);
      (*(void (**)(unsigned char *, unsigned char *, uint64_t))(*(void *)(v12 - 8) + 32))(__dst, __src, v12);
      uint64_t v14 = 1;
    }
    uint64_t v7 = v14;
    uint64_t v6 = a3;
LABEL_9:
    swift_storeEnumTagMultiPayload(__dst, v6, v7);
  }
  return __dst;
}

uint64_t type metadata completion function for MLSoundClassifier.DataSource(uint64_t a1)
{
  uint64_t v1 = type metadata accessor for URL(319);
  uint64_t v2 = v1;
  if (v3 <= 0x3F)
  {
    v14[0] = *(void *)(v1 - 8) + 64;
    v14[1] = v14[0];
    void v14[2] = (char *)&value witness table for Builtin.BridgeObject + 64;
    v14[3] = "Q";
    uint64_t v4 = type metadata accessor for DataFrame(319);
    uint64_t v2 = v4;
    if (v5 <= 0x3F)
    {
      uint64_t v10 = *(void *)(v4 - 8) + 64;
      long long v11 = &unk_34FA08;
      uint64_t v12 = &unk_34FA08;
      uint64_t v13 = &unk_34FA20;
      uint64_t v2 = 0;
      swift_getTupleTypeLayout(v9, 0, 4);
      void v14[4] = v9;
      swift_initEnumMetadataMultiPayload(a1, 256, 5, v14, v6, v7);
    }
  }
  return v2;
}

void *specialized closure #1 in _NativeDictionary.filter(_:)(unint64_t *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = 1 << *(unsigned char *)(a3 + 32);
  uint64_t v5 = ~(-1 << v4);
  if (v4 >= 64) {
    uint64_t v5 = -1;
  }
  unint64_t v6 = *(void *)(a3 + 64) & v5;
  int64_t v7 = (unint64_t)(v4 + 63) >> 6;
  uint64_t v8 = 0;
  int64_t v9 = 0;
  while (1)
  {
    if (v6)
    {
      _BitScanForward64(&v10, v6);
      v6 &= v6 - 1;
      unint64_t v11 = v10 | (v9 << 6);
      goto LABEL_15;
    }
    BOOL v12 = __OFADD__(1, v9);
    int64_t v13 = v9 + 1;
    if (v12) {
      BUG();
    }
    if (v13 >= v7) {
      return specialized _NativeDictionary.extractDictionary(using:count:)(a1, a2, v8, a3);
    }
    unint64_t i = *(void *)(a3 + 8 * v13 + 64);
    if (i)
    {
      int64_t v15 = v13;
    }
    else
    {
      int64_t v15 = v13 + 1;
      if (v13 + 1 >= v7) {
        return specialized _NativeDictionary.extractDictionary(using:count:)(a1, a2, v8, a3);
      }
      unint64_t i = *(void *)(a3 + 8 * v13 + 72);
      if (!i)
      {
        int64_t v15 = v13 + 2;
        if (v13 + 2 >= v7) {
          return specialized _NativeDictionary.extractDictionary(using:count:)(a1, a2, v8, a3);
        }
        unint64_t i = *(void *)(a3 + 8 * v13 + 80);
        if (!i)
        {
          int64_t v15 = v13 + 3;
          if (v13 + 3 >= v7) {
            return specialized _NativeDictionary.extractDictionary(using:count:)(a1, a2, v8, a3);
          }
          for (unint64_t i = *(void *)(a3 + 8 * v13 + 88); !i; unint64_t i = *(void *)(a3 + 8 * v15 + 64))
          {
            BOOL v12 = __OFADD__(1, v15++);
            if (v12) {
              BUG();
            }
            if (v15 >= v7) {
              return specialized _NativeDictionary.extractDictionary(using:count:)(a1, a2, v8, a3);
            }
          }
        }
      }
    }
    _BitScanForward64(&v16, i);
    unint64_t v6 = i & (i - 1);
    unint64_t v11 = v16 + (v15 << 6);
    int64_t v9 = v15;
LABEL_15:
    if (!*(void *)(*(void *)(*(void *)(a3 + 56) + 8 * v11) + 16))
    {
      a1[v11 >> 6] |= 1 << v11;
      BOOL v12 = __OFADD__(1, v8++);
      if (v12) {
        BUG();
      }
    }
  }
}

void *specialized _NativeDictionary.extractDictionary(using:count:)(unint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v43 = a1;
  if (!a3) {
    return _swiftEmptyDictionarySingleton;
  }
  uint64_t v4 = a4;
  uint64_t v5 = a3;
  if (*(void *)(a4 + 16) != a3)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<String, [URL]>);
    uint64_t v6 = static _DictionaryStorage.allocate(capacity:)(v5);
    uint64_t v40 = a2;
    if (a2 <= 0) {
      unint64_t v7 = 0;
    }
    else {
      unint64_t v7 = *v43;
    }
    uint64_t v8 = 0;
    uint64_t v39 = v4;
    while (1)
    {
      uint64_t v36 = v5;
      if (v7)
      {
        _BitScanForward64(&v9, v7);
        uint64_t v42 = (v7 - 1) & v7;
        unint64_t v10 = v9 | (v8 << 6);
        uint64_t v41 = v8;
      }
      else
      {
        BOOL v11 = __OFADD__(1, v8);
        uint64_t v12 = v8 + 1;
        if (v11) {
          BUG();
        }
        if (v12 >= v40) {
          return (void *)v6;
        }
        unint64_t i = v43[v12];
        if (i)
        {
          uint64_t v14 = v12;
        }
        else
        {
          uint64_t v14 = v12 + 1;
          if (v12 + 1 >= v40) {
            return (void *)v6;
          }
          unint64_t i = v43[v12 + 1];
          if (!i)
          {
            uint64_t v14 = v12 + 2;
            if (v12 + 2 >= v40) {
              return (void *)v6;
            }
            unint64_t i = v43[v12 + 2];
            if (!i)
            {
              uint64_t v14 = v12 + 3;
              if (v12 + 3 >= v40) {
                return (void *)v6;
              }
              for (unint64_t i = v43[v12 + 3]; !i; unint64_t i = v43[v14])
              {
                BOOL v11 = __OFADD__(1, v14++);
                if (v11) {
                  BUG();
                }
                if (v14 >= v40) {
                  return (void *)v6;
                }
              }
            }
          }
        }
        _BitScanForward64(&v15, i);
        uint64_t v42 = i & (i - 1);
        uint64_t v41 = v14;
        unint64_t v10 = v15 + (v14 << 6);
      }
      uint64_t v16 = *(void *)(v4 + 48);
      uint64_t v17 = *(void *)(v4 + 56);
      uint64_t v18 = *(void *)(v16 + 16 * v10);
      uint64_t v19 = *(void *)(v16 + 16 * v10 + 8);
      uint64_t v20 = *(void *)(v17 + 8 * v10);
      Hasher.init(_seed:)(*(void *)(v6 + 40));
      swift_bridgeObjectRetain(v19);
      uint64_t v37 = v20;
      swift_bridgeObjectRetain(v20);
      uint64_t v38 = v18;
      String.hash(into:)(v35, v18);
      unint64_t v21 = Hasher._finalize()() & ~(-1 << *(unsigned char *)(v6 + 32));
      unint64_t v22 = v21 >> 6;
      unint64_t v23 = ~*(void *)(v6 + 8 * (v21 >> 6) + 64) >> v21 << v21;
      if (v23)
      {
        _BitScanForward64(&v24, v23);
        unint64_t v25 = v24 | v21 & 0xFFFFFFFFFFFFFFC0;
      }
      else
      {
        unint64_t v26 = (unint64_t)(63 - (-1 << *(unsigned char *)(v6 + 32))) >> 6;
        char v27 = 0;
        do
        {
          unint64_t v28 = v22 + 1;
          if (v22 + 1 == v26 && (v27 & 1) != 0) {
            BUG();
          }
          unint64_t v22 = 0;
          if (v28 != v26) {
            unint64_t v22 = v28;
          }
          v27 |= v28 == v26;
          uint64_t v29 = *(void *)(v6 + 8 * v22 + 64);
        }
        while (v29 == -1);
        unint64_t v30 = ~v29;
        uint64_t v31 = 64;
        if (v30) {
          _BitScanForward64((unint64_t *)&v31, v30);
        }
        unint64_t v25 = v31 + (v22 << 6);
      }
      *(void *)(v6 + 8 * (v25 >> 6) + 64) |= 1 << v25;
      uint64_t v32 = *(void *)(v6 + 48);
      uint64_t v33 = 16 * v25;
      *(void *)(v32 + v33) = v38;
      *(void *)(v32 + v33 + 8) = v19;
      *(void *)(*(void *)(v6 + 56) + 8 * v25) = v37;
      ++*(void *)(v6 + 16);
      uint64_t v5 = v36 - 1;
      uint64_t v8 = v41;
      if (__OFSUB__(v36, 1)) {
        BUG();
      }
      uint64_t v4 = v39;
      unint64_t v7 = v42;
      if (v36 == 1) {
        return (void *)v6;
      }
    }
  }
  swift_retain();
  return (void *)v4;
}

uint64_t specialized Dictionary.Keys.endIndex.getter(uint64_t a1)
{
  return 1 << *(unsigned char *)(a1 + 32);
}

uint64_t specialized Dictionary.Keys.subscript.getter(int64_t a1, int a2, uint64_t a3, uint64_t a4)
{
  if (a1 < 0 || 1 << *(unsigned char *)(a4 + 32) <= a1) {
    BUG();
  }
  uint64_t v5 = *(void *)(a4 + 8 * ((unint64_t)a1 >> 6) + 64);
  if (!_bittest64(&v5, a1)) {
    BUG();
  }
  if (*(_DWORD *)(a4 + 36) != a2) {
    BUG();
  }
  uint64_t v6 = *(void *)(a4 + 48);
  uint64_t v7 = 16 * a1;
  uint64_t v8 = *(void *)(v6 + v7);
  swift_bridgeObjectRetain(*(void *)(v6 + v7 + 8));
  return v8;
}

uint64_t outlined destroy of Any?(uint64_t a1, uint64_t *a2)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(a2);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

void *_sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSaySS4text_SS5labeltG_SSs5NeverOTg50111_s8CreateML16MLTextClassifierV10evaluation2on5usingAA19MLClassifierMetricsVx_So7NLModelCtSlRzSS4text_SS5labelt7B24RtzlFZS2SAK_SSALt_tXEfU_So0R0CTf1cn_n(uint64_t a1, void *a2)
{
  int64_t v2 = *(void *)(a1 + 16);
  if (v2)
  {
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v2, 0);
    unint64_t v3 = _swiftEmptyArrayStorage;
    uint64_t v4 = (uint64_t *)(a1 + 56);
    do
    {
      unint64_t v15 = v3;
      int64_t v14 = v2;
      uint64_t v5 = *(v4 - 2);
      uint64_t v6 = *v4;
      swift_bridgeObjectRetain(v5);
      char v16 = v6;
      swift_bridgeObjectRetain(v6);
      NSString v7 = String._bridgeToObjectiveC()();
      id v8 = [a2 predictedLabelForString:v7];
      id v9 = v8;

      if (v9)
      {
        uint64_t v17 = static String._unconditionallyBridgeFromObjectiveC(_:)(v9);
        unint64_t v18 = v10;
        swift_bridgeObjectRelease(v16);
        swift_bridgeObjectRelease(v5);
      }
      else
      {
        swift_bridgeObjectRelease(v16);
        swift_bridgeObjectRelease(v5);
        uint64_t v17 = 0;
        unint64_t v18 = 0xE000000000000000;
      }
      unint64_t v3 = v15;
      unint64_t v11 = v15[2];
      if (v15[3] >> 1 <= v11)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v15[3] >= 2uLL, v11 + 1, 1);
        unint64_t v3 = v15;
      }
      v3[2] = v11 + 1;
      uint64_t v12 = 2 * v11;
      v3[v12 + 4] = v17;
      v3[v12 + 5] = v18;
      v4 += 4;
      int64_t v2 = v14 - 1;
    }
    while (v14 != 1);
  }
  else
  {

    return _swiftEmptyArrayStorage;
  }
  return v3;
}

void *_sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSaySS4text_SS5labeltG_SSs5NeverOTg50111_s8CreateML16MLTextClassifierV10evaluation2on5usingAA19MLClassifierMetricsVx_So7NLModelCtSlRzSS4text_SS5labelt7B80RtzlFZS2SAK_SSALt_tcfu_33_9884fbf80a26ee2659924377586aa6b9SSAK_SSALtSSTf3nnnpk_nTf1cn_n(uint64_t a1)
{
  int64_t v1 = *(void *)(a1 + 16);
  if (v1)
  {
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v1, 0);
    int64_t v2 = (uint64_t *)(a1 + 56);
    do
    {
      int64_t v6 = v1;
      uint64_t v7 = *(v2 - 1);
      unint64_t v3 = _swiftEmptyArrayStorage[2];
      unint64_t v9 = _swiftEmptyArrayStorage[3];
      int64_t v10 = v3 + 1;
      uint64_t v8 = *v2;
      swift_bridgeObjectRetain(*v2);
      if (v9 >> 1 <= v3) {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v9 >= 2, v10, 1);
      }
      _swiftEmptyArrayStorage[2] = v10;
      uint64_t v4 = 2 * v3;
      _swiftEmptyArrayStorage[v4 + 4] = v7;
      _swiftEmptyArrayStorage[v4 + 5] = v8;
      v2 += 4;
      int64_t v1 = v6 - 1;
    }
    while (v6 != 1);
  }
  return _swiftEmptyArrayStorage;
}

void *_sSTsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFs12Zip2SequenceVy11TabularData6ColumnVySSGAKG_SS4text_SS5labelts5NeverOTg5043_sSSSgAAS2SIgggoo_AA_AAtSS4text_SS5labelts5k145OIegnrzr_TR095_s8CreateML16MLTextClassifierV23createAnnotatedFeatures33_F2EF627AFE10E52D0E593E242B327365LL_10a24Column05labelQ0SaySS0P0_X56R0tG11f30Data0T5FrameV_S2StFZSSAH_SSAItM19_ANtXEfU_Tf3nnnpf_nTf1cn_n(uint64_t a1)
{
  uint64_t v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Column<String>);
  uint64_t v80 = *(void **)(v1 - 8);
  int64_t v2 = v80[8];
  unint64_t v3 = alloca(v2);
  uint64_t v4 = alloca(v2);
  uint64_t v81 = &v72;
  uint64_t v89 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Zip2Sequence<Column<String>, Column<String>>);
  int64_t v5 = *(void *)(*(void *)(v89 - 8) + 64);
  int64_t v6 = alloca(v5);
  uint64_t v7 = alloca(v5);
  uint64_t v88 = &v72;
  uint64_t v84 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Zip2Sequence<Column<String>, Column<String>>.Iterator);
  int64_t v8 = *(void *)(*(void *)(v84 - 8) + 64);
  unint64_t v9 = alloca(v8);
  int64_t v10 = alloca(v8);
  long long v83 = &v72;
  uint64_t v11 = lazy protocol witness table accessor for type FullyConnectedNetworkClassifier<Float, String> and conformance FullyConnectedNetworkClassifier<A, B>(&lazy protocol witness table cache variable for type Column<String> and conformance Column<A>, &demangling cache variable for type metadata for Column<String>, (uint64_t)&protocol conformance descriptor for Column<A>);
  uint64_t v77 = v1;
  Swift::String v82 = (void (*)(void, void, void))v11;
  uint64_t v87 = dispatch thunk of Sequence.underestimatedCount.getter(v1, v11);
  uint64_t v12 = dispatch thunk of Sequence.underestimatedCount.getter(v1, v11);
  uint64_t v13 = v87;
  if (v12 < v87) {
    uint64_t v13 = v12;
  }
  uint64_t v87 = v13;
  uint64_t v86 = _swiftEmptyArrayStorage;
  int64_t v14 = 0;
  if (v13 > 0) {
    int64_t v14 = v13;
  }
  specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v14, 0);
  uint64_t v15 = (uint64_t)v88;
  outlined init with copy of Either<LogisticRegressionClassifier<Float, String>, FullyConnectedNetworkClassifier<Float, String>>(a1, (uint64_t)v88, &demangling cache variable for type metadata for Zip2Sequence<Column<String>, Column<String>>);
  uint64_t v85 = (void (*)(unint64_t *, uint64_t, uint64_t))v80[4];
  uint64_t v16 = v77;
  v85(v81, v15, v77);
  uint64_t v17 = v83;
  unint64_t v18 = v82;
  dispatch thunk of Sequence.makeIterator()(v16, v82);
  v85(v81, (uint64_t)v88 + *(int *)(v89 + 52), v16);
  uint64_t v19 = v16;
  uint64_t v20 = v84;
  uint64_t v78 = (char *)v17 + *(int *)(v84 + 52);
  uint64_t v21 = v87;
  dispatch thunk of Sequence.makeIterator()(v19, v18);
  uint64_t v79 = *(int *)(v20 + 56);
  *((unsigned char *)v83 + v79) = 0;
  if (v21 < 0) {
    BUG();
  }
  uint64_t v22 = (uint64_t)v83;
  if (!v21) {
    goto LABEL_24;
  }
  uint64_t v23 = *(int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for IndexingIterator<Column<String>>)
               + 36);
  unint64_t v24 = (uint64_t *)(v23 + v22);
  uint64_t v84 = (uint64_t)&v78[v23];
  uint64_t v73 = (uint64_t *)(v23 + v22);
  do
  {
    BOOL v25 = v21 == 0;
    uint64_t v26 = v21 - 1;
    if (v25) {
      BUG();
    }
    if (*(unsigned char *)(v22 + v79)) {
      BUG();
    }
    uint64_t v87 = v26;
    uint64_t v88 = (void *)*v24;
    uint64_t v27 = lazy protocol witness table accessor for type FullyConnectedNetworkClassifier<Float, String> and conformance FullyConnectedNetworkClassifier<A, B>(&lazy protocol witness table cache variable for type Column<String> and conformance Column<A>, &demangling cache variable for type metadata for Column<String>, (uint64_t)&protocol conformance descriptor for Column<A>);
    uint64_t v28 = v22;
    uint64_t v29 = v77;
    uint64_t v89 = v27;
    dispatch thunk of Collection.endIndex.getter(v77, v27);
    if (v88 == (void *)v74[0]) {
      BUG();
    }
    unint64_t v30 = (void (*)(void *, void))dispatch thunk of Collection.subscript.read(v74, v24, v29, v89);
    uint64_t v88 = (void *)*v31;
    Swift::String v82 = (void (*)(void, void, void))v31[1];
    swift_bridgeObjectRetain((_BYTE)v82);
    v30(v74, 0);
    uint64_t v32 = v81;
    uint64_t v75 = (void (*)(unint64_t *, uint64_t, uint64_t))v80[2];
    v75(v81, v28, v29);
    uint64_t v33 = v24;
    uint64_t v34 = v89;
    dispatch thunk of Collection.formIndex(after:)(v33, v29, v89);
    uint64_t v76 = (void (*)(unint64_t *, uint64_t))v80[1];
    v76(v32, v29);
    uint64_t v35 = v84;
    uint64_t v85 = *(void (**)(unint64_t *, uint64_t, uint64_t))v84;
    uint64_t v36 = v78;
    dispatch thunk of Collection.endIndex.getter(v29, v34);
    if (v85 == (void (*)(unint64_t *, uint64_t, uint64_t))v74[0])
    {
      swift_bridgeObjectRelease((_BYTE)v82);
      BUG();
    }
    uint64_t v38 = (void (*)(void *, void))dispatch thunk of Collection.subscript.read(v74, v35, v29, v89);
    uint64_t v39 = v37[1];
    uint64_t v40 = v39;
    unint64_t v41 = 0xE000000000000000;
    if (v39)
    {
      uint64_t v40 = *v37;
      unint64_t v41 = (unint64_t)v37[1];
    }
    unint64_t v72 = v41;
    uint64_t v85 = v40;
    swift_bridgeObjectRetain((_BYTE)v39);
    v38(v74, 0);
    uint64_t v42 = v81;
    v75(v81, (uint64_t)v36, v29);
    dispatch thunk of Collection.formIndex(after:)(v84, v29, v89);
    v76(v42, v29);
    unint64_t v43 = (unint64_t)v82;
    uint64_t v44 = (uint64_t)v88;
    if (!v82) {
      uint64_t v44 = 0;
    }
    uint64_t v88 = (void *)v44;
    if (!v82) {
      unint64_t v43 = 0xE000000000000000;
    }
    uint64_t v45 = v86;
    if (!swift_isUniquelyReferenced_nonNull_native(v86))
    {
      specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v45[2] + 1, 1);
      uint64_t v45 = v86;
    }
    unint64_t v46 = v45[2];
    if (v45[3] >> 1 <= v46)
    {
      specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v45[3] >= 2uLL, v46 + 1, 1);
      uint64_t v45 = v86;
    }
    v45[2] = v46 + 1;
    uint64_t v47 = 4 * v46;
    v45[v47 + 4] = v88;
    v45[v47 + 5] = v43;
    v45[v47 + 6] = v85;
    v45[v47 + 7] = v72;
    uint64_t v21 = v87;
    uint64_t v22 = (uint64_t)v83;
    unint64_t v24 = v73;
  }
  while (v87);
  if (!*((unsigned char *)v83 + v79))
  {
LABEL_24:
    uint64_t v89 = lazy protocol witness table accessor for type FullyConnectedNetworkClassifier<Float, String> and conformance FullyConnectedNetworkClassifier<A, B>(&lazy protocol witness table cache variable for type Column<String> and conformance Column<A>, &demangling cache variable for type metadata for Column<String>, (uint64_t)&protocol conformance descriptor for Column<A>);
    while (1)
    {
      uint64_t v87 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for IndexingIterator<Column<String>>);
      uint64_t v48 = *(int *)(v87 + 36);
      uint64_t v49 = *(void *)(v22 + v48);
      uint64_t v50 = v77;
      dispatch thunk of Collection.endIndex.getter(v77, v89);
      if (v49 == v74[0]) {
        break;
      }
      uint64_t v51 = v22 + v48;
      uint64_t v52 = (void (*)(void *, void))dispatch thunk of Collection.subscript.read(v74, v51, v50, v89);
      uint64_t v88 = (void *)*v53;
      uint64_t v84 = v53[1];
      swift_bridgeObjectRetain(v84);
      v52(v74, 0);
      Swift::String v54 = v81;
      Swift::String v82 = (void (*)(void, void, void))v80[2];
      v82(v81, v22, v50);
      uint64_t v55 = v51;
      uint64_t v56 = v89;
      dispatch thunk of Collection.formIndex(after:)(v55, v50, v89);
      uint64_t v85 = (void (*)(unint64_t *, uint64_t, uint64_t))v80[1];
      ((void (*)(unint64_t *, uint64_t))v85)(v54, v50);
      uint64_t v57 = *(int *)(v87 + 36);
      long long v58 = v78;
      uint64_t v87 = *(void *)&v78[v57];
      dispatch thunk of Collection.endIndex.getter(v50, v56);
      if (v87 == v74[0])
      {
        swift_bridgeObjectRelease(v84);
        uint64_t v22 = (uint64_t)v83;
        break;
      }
      Swift::Bool v59 = &v58[v57];
      uint64_t v76 = (void (*)(unint64_t *, uint64_t))dispatch thunk of Collection.subscript.read(v74, v59, v50, v89);
      uint64_t v61 = v60[1];
      uint64_t v62 = v61;
      unint64_t v63 = 0xE000000000000000;
      uint64_t v64 = v58;
      if (v61)
      {
        uint64_t v62 = *v60;
        unint64_t v63 = v60[1];
      }
      uint64_t v75 = (void (*)(unint64_t *, uint64_t, uint64_t))v63;
      uint64_t v87 = v62;
      swift_bridgeObjectRetain(v61);
      v76(v74, 0);
      uint64_t v65 = v81;
      v82(v81, v64, v50);
      dispatch thunk of Collection.formIndex(after:)(v59, v50, v89);
      ((void (*)(unint64_t *, uint64_t))v85)(v65, v50);
      unint64_t v66 = v84;
      uint64_t v67 = (uint64_t)v88;
      if (!v84) {
        uint64_t v67 = 0;
      }
      uint64_t v88 = (void *)v67;
      if (!v84) {
        unint64_t v66 = 0xE000000000000000;
      }
      uint64_t v68 = v86;
      if (!swift_isUniquelyReferenced_nonNull_native(v86))
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v68[2] + 1, 1);
        uint64_t v68 = v86;
      }
      unint64_t v69 = v68[2];
      if (v68[3] >> 1 <= v69)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v68[3] >= 2uLL, v69 + 1, 1);
        uint64_t v68 = v86;
      }
      v68[2] = v69 + 1;
      uint64_t v70 = 4 * v69;
      v68[v70 + 4] = v88;
      v68[v70 + 5] = v66;
      v68[v70 + 6] = v87;
      v68[v70 + 7] = v75;
      uint64_t v22 = (uint64_t)v83;
      if (*((unsigned char *)v83 + v79)) {
        goto LABEL_41;
      }
    }
    *(unsigned char *)(v22 + v79) = 1;
  }
LABEL_41:
  outlined destroy of Either<LogisticRegressionClassifier<Float, String>, FullyConnectedNetworkClassifier<Float, String>>(v22, &demangling cache variable for type metadata for Zip2Sequence<Column<String>, Column<String>>.Iterator);
  return v86;
}

uint64_t thunk for @escaping @callee_guaranteed (@unowned UnsafeMutableRawPointer?, @unowned Int) -> (@unowned Unmanaged<CFDictionaryRef>?)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = *(uint64_t (**)(uint64_t, uint64_t))(a1 + 32);
  uint64_t v5 = *(void *)(a1 + 40);
  swift_retain(v5);
  uint64_t v6 = v4(a2, a3);
  swift_release(v5);
  return v6;
}

void thunk for @escaping @callee_guaranteed (@guaranteed CFStringRef?, @unowned UnsafeMutablePointer<Bool>?) -> ()(uint64_t a1, void *a2, uint64_t a3)
{
  uint64_t v4 = *(void (**)(void *, uint64_t))(a1 + 32);
  uint64_t v5 = *(void *)(a1 + 40);
  swift_retain(v5);
  id v6 = a2;
  v4(a2, a3);
  swift_release(v5);
}

uint64_t specialized static MLTextClassifier.createClassifier<A, B>(trainingExamples:validatingExamples:modelParameters:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = a2;
  uint64_t TrainedModelWithData = a1;
  Class v6 = static MLTextClassifier.buildOptions(_:)(a3);
  if (!v3)
  {
    Class v44 = v6;
    uint64_t v7 = (uint64_t)_swiftEmptyArrayStorage;
    uint64_t v8 = (uint64_t)_swiftEmptyArrayStorage;
    uint64_t v39 = *(void *)(a1 + 16);
    if (v39)
    {
      aBlock = (void **)_swiftEmptyArrayStorage;
      uint64_t v9 = v39;
      specialized ContiguousArray.reserveCapacity(_:)(v39);
      type metadata accessor for OS_os_log(0, &lazy cache variable for type metadata for NSDictionary, NSDictionary_ptr);
      int64_t v10 = (uint64_t *)(a1 + 56);
      do
      {
        uint64_t v46 = v9;
        uint64_t v40 = *(v10 - 3);
        uint64_t v11 = *(v10 - 2);
        uint64_t v42 = *(v10 - 1);
        uint64_t v12 = *v10;
        uint64_t v13 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Any, Any)>);
        int64_t v14 = (void *)swift_allocObject(v13, 160, 7);
        void v14[2] = 2;
        v14[3] = 4;
        v14[7] = &type metadata for String;
        void v14[4] = 0x6C6562614CLL;
        v14[5] = 0xE500000000000000;
        v14[11] = &type metadata for String;
        void v14[8] = v42;
        v14[9] = v12;
        v14[15] = &type metadata for String;
        v14[12] = 0x676E69727453;
        v14[13] = 0xE600000000000000;
        v14[19] = &type metadata for String;
        v14[16] = v40;
        v14[17] = v11;
        swift_bridgeObjectRetain(v11);
        swift_bridgeObjectRetain(v12);
        NSDictionary.init(dictionaryLiteral:)(v14);
        specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()(v14);
        uint64_t v15 = aBlock[2];
        specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)(v15);
        specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)(v15);
        specialized ContiguousArray._endMutation()(v15);
        v10 += 4;
        uint64_t v9 = v46 - 1;
      }
      while (v46 != 1);
      uint64_t v8 = (uint64_t)aBlock;
      uint64_t v4 = a2;
      uint64_t v7 = (uint64_t)_swiftEmptyArrayStorage;
    }
    uint64_t v55 = v8;
    uint64_t v45 = *(void *)(v4 + 16);
    if (v45)
    {
      uint64_t v38 = v8;
      aBlock = (void **)_swiftEmptyArrayStorage;
      uint64_t v16 = v45;
      specialized ContiguousArray.reserveCapacity(_:)(v45);
      type metadata accessor for OS_os_log(0, &lazy cache variable for type metadata for NSDictionary, NSDictionary_ptr);
      uint64_t v17 = (uint64_t *)(v4 + 56);
      do
      {
        uint64_t v47 = v16;
        uint64_t v41 = *(v17 - 3);
        unint64_t v18 = v17;
        uint64_t v19 = *(v17 - 2);
        uint64_t v43 = *(v18 - 1);
        uint64_t v20 = *v18;
        uint64_t v21 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Any, Any)>);
        uint64_t v22 = (void *)swift_allocObject(v21, 160, 7);
        v22[2] = 2;
        v22[3] = 4;
        v22[7] = &type metadata for String;
        v22[4] = 0x6C6562614CLL;
        v22[5] = 0xE500000000000000;
        v22[11] = &type metadata for String;
        v22[8] = v43;
        v22[9] = v20;
        v22[15] = &type metadata for String;
        v22[12] = 0x676E69727453;
        v22[13] = 0xE600000000000000;
        v22[19] = &type metadata for String;
        v22[16] = v41;
        v22[17] = v19;
        swift_bridgeObjectRetain(v19);
        swift_bridgeObjectRetain(v20);
        NSDictionary.init(dictionaryLiteral:)(v22);
        specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()(v22);
        uint64_t v23 = aBlock[2];
        specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)(v23);
        specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)(v23);
        specialized ContiguousArray._endMutation()(v23);
        uint64_t v17 = v18 + 4;
        uint64_t v16 = v47 - 1;
      }
      while (v47 != 1);
      uint64_t v7 = (uint64_t)aBlock;
      uint64_t v8 = v38;
    }
    uint64_t v56 = 0;
    if (!swift_isUniquelyReferenced_nonNull_bridgeObject(v8) || (v8 & 0x4000000000000001) != 0)
    {
      uint64_t v8 = specialized _ArrayBuffer._consumeAndCreateNew()(v8);
      uint64_t v55 = v8;
    }
    uint64_t v24 = v8 & 0xFFFFFFFFFFFFF8;
    uint64_t v54 = v7;
    if (!swift_isUniquelyReferenced_nonNull_bridgeObject(v7) || (v7 & 0x4000000000000001) != 0)
    {
      uint64_t v7 = specialized _ArrayBuffer._consumeAndCreateNew()(v7);
      uint64_t v54 = v7;
    }
    uint64_t v52 = implicit closure #1 in closure #1 in closure #3 in static MLWordTagger.createWordTaggerModel<A, B>(trainingExamples:validatingExamples:modelParameters:);
    uint64_t v53 = 0;
    aBlock = _NSConcreteStackBlock;
    uint64_t v49 = 1107296256;
    uint64_t v50 = thunk for @escaping @callee_guaranteed (@unowned UnsafeMutableRawPointer?, @unowned Int) -> (@unowned Unmanaged<CFDictionaryRef>?);
    uint64_t v51 = &block_descriptor_8;
    BOOL v25 = _Block_copy(&aBlock);
    uint64_t v52 = MLBoostedTreeRegressor.ModelParameters.maxDepth.modify;
    uint64_t v53 = 0;
    uint64_t v26 = v25;
    aBlock = _NSConcreteStackBlock;
    uint64_t v49 = 1107296256;
    uint64_t v50 = thunk for @escaping @callee_guaranteed (@guaranteed CFStringRef?, @unowned UnsafeMutablePointer<Bool>?) -> ();
    uint64_t v51 = &block_descriptor_3;
    uint64_t v37 = _Block_copy(&aBlock);
    uint64_t TrainedModelWithData = NLPClassifierModelCreateTrainedModelWithData(v44, v39, v45, v24 + 32, (v7 & 0xFFFFFFFFFFFFF8) + 32);
    _Block_release(v37);
    uint64_t v27 = v26;
    _Block_release(v26);
    specialized Array._endMutation()(v26, v39);
    char v28 = v54;
    specialized Array._endMutation()(v27, v39);
    swift_bridgeObjectRelease(v55);
    uint64_t v29 = v56;
    if (v56)
    {
      uint64_t TrainedModelWithData = type metadata accessor for CFErrorRef(0);
      unint64_t v30 = (ValueMetadata *)TrainedModelWithData;
      uint64_t v31 = lazy protocol witness table accessor for type CFErrorRef and conformance CFErrorRef();
      swift_allocError(TrainedModelWithData, v31, 0, 0);
      *(void *)uint64_t v32 = v29;
    }
    else
    {
      if (TrainedModelWithData)
      {

        swift_bridgeObjectRelease(v28);
        return TrainedModelWithData;
      }
      unint64_t v30 = &type metadata for MLCreateError;
      uint64_t v31 = lazy protocol witness table accessor for type MLCreateError and conformance MLCreateError();
      swift_allocError(&type metadata for MLCreateError, v31, 0, 0);
      *(void *)uint64_t v32 = 0xD00000000000002DLL;
      *(void *)(v32 + 8) = "TextClassifier\n\nParameters\n" + 0x8000000000000000;
      *(_OWORD *)(v32 + 16) = 0;
      *(_OWORD *)(v32 + 32) = 0;
      *(unsigned char *)(v32 + 48) = 0;
    }
    swift_willThrow(v30, v31, v32, v33, v34, v35);

    swift_bridgeObjectRelease(v54);
  }
  return TrainedModelWithData;
}

id MLTextClassifier.model.getter()
{
  return *(id *)(v0 + 16);
}

void key path setter for MLTextClassifier.model : MLTextClassifier(id *a1)
{
  id v1 = *a1;
  MLTextClassifier.model.setter((uint64_t)v1);
}

void MLTextClassifier.model.setter(uint64_t a1)
{
  *(void *)(v1 + 16) = a1;
}

void (*MLTextClassifier.model.modify(void *a1))(uint64_t a1, char a2)
{
  a1[1] = v1;
  uint64_t v3 = *(void **)(v1 + 16);
  *a1 = v3;
  v3;
  return MLWordTagger.model.modify;
}

uint64_t MLTextClassifier.modelParameters.getter()
{
  uint64_t v2 = v0;
  uint64_t v3 = type metadata accessor for MLTextClassifier(0);
  return outlined init with copy of MLTrainingSessionParameters(v1 + *(int *)(v3 + 28), v2, type metadata accessor for MLTextClassifier.ModelParameters);
}

uint64_t type metadata accessor for MLTextClassifier(uint64_t a1)
{
  uint64_t result = type metadata singleton initialization cache for MLTextClassifier;
  if (!type metadata singleton initialization cache for MLTextClassifier) {
    return swift_getSingletonMetadata(a1, &nominal type descriptor for MLTextClassifier);
  }
  return result;
}

uint64_t MLTextClassifier.trainingMetrics.getter()
{
  uint64_t v2 = v0;
  uint64_t v3 = type metadata accessor for MLTextClassifier(0);
  return outlined init with copy of MLTrainingSessionParameters(v1 + *(int *)(v3 + 32), v2, type metadata accessor for MLClassifierMetrics);
}

uint64_t MLTextClassifier.validationMetrics.getter()
{
  uint64_t v2 = v0;
  uint64_t v3 = type metadata accessor for MLTextClassifier(0);
  return outlined init with copy of MLTrainingSessionParameters(v1 + *(int *)(v3 + 36), v2, type metadata accessor for MLClassifierMetrics);
}

uint64_t MLTextClassifier.init(trainingData:parameters:)(uint64_t a1, uint64_t a2, double a3)
{
  uint64_t v12 = a2;
  uint64_t v11 = v3;
  int64_t v5 = *(void *)(*(void *)(type metadata accessor for MLTextClassifier.ModelParameters(0) - 8) + 64);
  Class v6 = alloca(v5);
  uint64_t v7 = alloca(v5);
  uint64_t v8 = static _TextUtilities.getTextLabeledDictionary(from:)(a1, a3);
  if (v4)
  {
    outlined destroy of MLActivityClassifier.ModelParameters(v12, type metadata accessor for MLTextClassifier.ModelParameters);
    return outlined destroy of MLActivityClassifier.ModelParameters(a1, type metadata accessor for MLTextClassifier.DataSource);
  }
  else
  {
    uint64_t v10 = (uint64_t)v8;
    outlined init with copy of MLTrainingSessionParameters(v12, (uint64_t)&v11, type metadata accessor for MLTextClassifier.ModelParameters);
    MLTextClassifier.init(trainingData:parameters:)(v10, (uint64_t)&v11);
    outlined destroy of MLActivityClassifier.ModelParameters(v12, type metadata accessor for MLTextClassifier.ModelParameters);
    return outlined destroy of MLActivityClassifier.ModelParameters(a1, type metadata accessor for MLTextClassifier.DataSource);
  }
}

uint64_t MLTextClassifier.init(trainingData:parameters:)(uint64_t a1, uint64_t a2)
{
  uint64_t v18 = a2;
  v14[1] = v2;
  int64_t v4 = *(void *)(*(void *)(type metadata accessor for MLTextClassifier.ModelParameters(0) - 8) + 64);
  int64_t v5 = alloca(v4);
  Class v6 = alloca(v4);
  uint64_t v15 = v14;
  uint64_t v17 = type metadata accessor for DataFrame(0);
  uint64_t v16 = *(void *)(v17 - 8);
  int64_t v7 = *(void *)(v16 + 64);
  uint64_t v8 = alloca(v7);
  uint64_t v9 = alloca(v7);
  uint64_t v10 = alloca(v7);
  uint64_t v11 = alloca(v7);
  specialized generateTextDataFrame<A>(_:textColumn:labelColumn:using:)(a1, 1954047348, 0xE400000000000000, 0x6C6562616CLL, 0xE500000000000000);
  if (v3)
  {
    outlined destroy of MLActivityClassifier.ModelParameters(v18, type metadata accessor for MLTextClassifier.ModelParameters);
    return swift_bridgeObjectRelease(a1);
  }
  else
  {
    swift_bridgeObjectRelease(a1);
    (*(void (**)(void *, void *, uint64_t))(v16 + 16))(v14, v14, v17);
    uint64_t v13 = (uint64_t)v15;
    outlined init with copy of MLTrainingSessionParameters(v18, (uint64_t)v15, type metadata accessor for MLTextClassifier.ModelParameters);
    MLTextClassifier.init(trainingData:textColumn:labelColumn:parameters:)((uint64_t)v14, 1954047348, (void *)0xE400000000000000, (void *)0x6C6562616CLL, (void *)0xE500000000000000, v13);
    outlined destroy of MLActivityClassifier.ModelParameters(v18, type metadata accessor for MLTextClassifier.ModelParameters);
    return (*(uint64_t (**)(void *, uint64_t))(v16 + 8))(v14, v17);
  }
}

uint64_t MLTextClassifier.init(trainingData:textColumn:labelColumn:parameters:)(uint64_t a1, uint64_t a2, void *a3, void *a4, void *a5, uint64_t a6)
{
  uint64_t v173 = a4;
  double v167 = a3;
  uint64_t v8 = v6;
  uint64_t v162 = a2;
  uint64_t v175 = v7;
  uint64_t v169 = a6;
  id v172 = a5;
  uint64_t v151 = type metadata accessor for DataFrame.Rows(0);
  uint64_t v150 = *(void *)(v151 - 8);
  int64_t v9 = *(void *)(v150 + 64);
  uint64_t v10 = alloca(v9);
  uint64_t v11 = alloca(v9);
  uint64_t v152 = &v140;
  uint64_t v148 = type metadata accessor for MLTextClassifier.ModelAlgorithmType(0);
  int64_t v12 = *(void *)(*(void *)(v148 - 8) + 64);
  uint64_t v13 = alloca(v12);
  int64_t v14 = alloca(v12);
  uint64_t v147 = &v140;
  int64_t v15 = *(void *)(*(void *)(type metadata accessor for MLTextClassifier.FeatureExtractorType(0) - 8) + 64);
  uint64_t v16 = alloca(v15);
  uint64_t v17 = alloca(v15);
  uint64_t v149 = &v140;
  uint64_t v18 = alloca(v15);
  uint64_t v19 = alloca(v15);
  uint64_t v163 = &v140;
  uint64_t v156 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Zip2Sequence<Column<String>, Column<String>>);
  int64_t v20 = *(void *)(*(void *)(v156 - 8) + 64);
  uint64_t v21 = alloca(v20);
  uint64_t v22 = alloca(v20);
  uint64_t v157 = &v140;
  uint64_t v146 = type metadata accessor for MLTextClassifier.ModelParameters.ValidationData(0);
  int64_t v23 = *(void *)(*(void *)(v146 - 8) + 64);
  uint64_t v24 = alloca(v23);
  BOOL v25 = alloca(v23);
  uint64_t v144 = &v140;
  int64_t v26 = *(void *)(*(void *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for DataFrame?)
                              - 8)
                  + 64);
  uint64_t v27 = alloca(v26);
  char v28 = alloca(v26);
  uint64_t v145 = &v140;
  uint64_t v154 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Column<String>);
  uint64_t v159 = *(void *)(v154 - 8);
  int64_t v29 = *(void *)(v159 + 64);
  unint64_t v30 = alloca(v29);
  uint64_t v31 = alloca(v29);
  ML16MLTextClassifierV23createAnnotatedFeatures33_F2EF627AFE10E52D0E593E242B327365LL_10a24Column05labelQ0SaySS0P0_X56R0tG11f30Data0T5FrameV_S2StFZSSAH_SSAItM19_ANtXEfU_Tf3nnnpf_nTf1cn_n = &v140;
  int64_t v32 = *(void *)(*(void *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for FilledColumn<Column<String>>)
                              - 8)
                  + 64);
  uint64_t v33 = alloca(v32);
  uint64_t v34 = alloca(v32);
  uint64_t v155 = &v140;
  uint64_t v35 = type metadata accessor for DataFrame(0);
  uint64_t v36 = *(void *)(v35 - 8);
  int64_t v37 = *(void *)(v36 + 64);
  uint64_t v38 = alloca(v37);
  uint64_t v39 = alloca(v37);
  uint64_t v160 = &v140;
  uint64_t v40 = alloca(v37);
  uint64_t v41 = alloca(v37);
  uint64_t v174 = (void **)&v140;
  uint64_t v168 = a1;
  uint64_t v42 = v35;
  uint64_t v170 = v36;
  (*(void (**)(uint64_t *, uint64_t))(v36 + 16))(&v140, a1);
  uint64_t v43 = type metadata accessor for MLTextClassifier(0);
  uint64_t v44 = (uint64_t)v8 + *(int *)(v43 + 28);
  outlined init with copy of MLTrainingSessionParameters(v169, v44, type metadata accessor for MLTextClassifier.ModelParameters);
  MLTextClassifier.ModelParameters.validateRevision()();
  uint64_t v175 = v45;
  uint64_t v164 = v44;
  if (v45)
  {
    uint64_t v46 = v170;
    char v47 = (char)v172;
    char v48 = (char)v167;
LABEL_9:
    swift_bridgeObjectRelease(v48);
    swift_bridgeObjectRelease(v47);
    Swift::Bool v59 = *(void (**)(uint64_t, uint64_t))(v46 + 8);
    v59(v168, v42);
    v59((uint64_t)v174, v42);
    outlined destroy of MLActivityClassifier.ModelParameters(v169, type metadata accessor for MLTextClassifier.ModelParameters);
    return outlined destroy of MLActivityClassifier.ModelParameters(v164, type metadata accessor for MLTextClassifier.ModelParameters);
  }
  uint64_t v161 = v43;
  uint64_t v171 = v42;
  int v166 = v8;
  uint64_t v49 = type metadata accessor for MLTextClassifier.ModelParameters(0);
  uint64_t v50 = *(int *)(v49 + 36);
  uint64_t v46 = v170;
  if (!*(unsigned char *)(v44 + v50 + 8) && *(uint64_t *)(v44 + v50) <= 0)
  {
    uint64_t v54 = lazy protocol witness table accessor for type MLCreateError and conformance MLCreateError();
    swift_allocError(&type metadata for MLCreateError, v54, 0, 0);
    *(void *)uint64_t v55 = 0xD000000000000036;
    *(void *)(v55 + 8) = "bset of the training labels." + 0x8000000000000000;
    *(_OWORD *)(v55 + 16) = 0;
    *(_OWORD *)(v55 + 32) = 0;
    *(unsigned char *)(v55 + 48) = 0;
    swift_willThrow(&type metadata for MLCreateError, v54, v55, v56, v57, v58);
    goto LABEL_8;
  }
  MLTextClassifier.ModelParameters.validateCustomEmbeddingURL()();
  if (v52)
  {
LABEL_8:
    uint64_t v42 = v171;
    char v47 = (char)v172;
    char v48 = (char)v167;
    goto LABEL_9;
  }
  id v53 = v172;
  static MLTextClassifier.validateDataFrame(_:textColumn:labelColumn:)((uint64_t)v174, v162, v167, (uint64_t)v173, v172);
  uint64_t v175 = 0;
  DataFrame.subscript.getter(v173, v53, &type metadata for String);
  *(void *)&v143[0] = 0;
  *((void *)&v143[0] + 1) = 0xE000000000000000;
  uint64_t v61 = lazy protocol witness table accessor for type FullyConnectedNetworkClassifier<Float, String> and conformance FullyConnectedNetworkClassifier<A, B>(&lazy protocol witness table cache variable for type Column<String> and conformance Column<A>, &demangling cache variable for type metadata for Column<String>, (uint64_t)&protocol conformance descriptor for Column<A>);
  uint64_t v62 = v154;
  uint64_t v153 = v61;
  unint64_t v63 = ML16MLTextClassifierV23createAnnotatedFeatures33_F2EF627AFE10E52D0E593E242B327365LL_10a24Column05labelQ0SaySS0P0_X56R0tG11f30Data0T5FrameV_S2StFZSSAH_SSAItM19_ANtXEfU_Tf3nnnpf_nTf1cn_n;
  OptionalColumnProtocol.filled(with:)(v143, v154, v61);
  uint64_t v159 = *(void *)(v159 + 8);
  ((void (*)(uint64_t *, uint64_t))v159)(v63, v62);
  v166[1].super.uint64_t isa = (Class)specialized Set.init<A>(_:)();
  uint64_t v158 = v49;
  outlined init with copy of Either<LogisticRegressionClassifier<Float, String>, FullyConnectedNetworkClassifier<Float, String>>(v164 + *(int *)(v49 + 24), (uint64_t)&v141, &demangling cache variable for type metadata for Any?);
  if (!v142) {
    BUG();
  }
  outlined init with take of Any(&v141, v143);
  uint64_t v64 = (uint64_t)v144;
  swift_dynamicCast(v144, v143, (char *)&type metadata for Any + 8, v146, 7);
  uint64_t v65 = (uint64_t)v145;
  char v66 = (char)v167;
  uint64_t v67 = v175;
  MLTextClassifier.ModelParameters.ValidationData.createValidationData(trainingData:textColumn:labelColumn:)(v174, v162, v167, (uint64_t)v173, v172, v51);
  if (v67)
  {
    swift_bridgeObjectRelease(v66);
    swift_bridgeObjectRelease((_BYTE)v172);
    uint64_t v68 = *(void (**)(uint64_t, uint64_t))(v170 + 8);
    uint64_t v69 = v171;
    v68(v168, v171);
    outlined destroy of MLActivityClassifier.ModelParameters(v64, type metadata accessor for MLTextClassifier.ModelParameters.ValidationData);
    uint64_t v70 = v174;
    uint64_t v71 = v69;
LABEL_14:
    v68((uint64_t)v70, v71);
    outlined destroy of MLActivityClassifier.ModelParameters(v169, type metadata accessor for MLTextClassifier.ModelParameters);
LABEL_15:
    unint64_t v72 = v166;
LABEL_16:
    swift_bridgeObjectRelease(v72[1].super.isa);
    return outlined destroy of MLActivityClassifier.ModelParameters(v164, type metadata accessor for MLTextClassifier.ModelParameters);
  }
  outlined destroy of MLActivityClassifier.ModelParameters(v64, type metadata accessor for MLTextClassifier.ModelParameters.ValidationData);
  uint64_t v73 = v171;
  int EnumTagSinglePayload = __swift_getEnumTagSinglePayload(v65, 1, v171);
  uint64_t v175 = 0;
  if (EnumTagSinglePayload == 1)
  {
    outlined destroy of Either<LogisticRegressionClassifier<Float, String>, FullyConnectedNetworkClassifier<Float, String>>(v65, &demangling cache variable for type metadata for DataFrame?);
    ML16MLTextClassifierV23createAnnotatedFeatures33_F2EF627AFE10E52D0E593E242B327365LL_10a24Column05labelQ0SaySS0P0_X56R0tG11f30Data0T5FrameV_S2StFZSSAH_SSAItM19_ANtXEfU_Tf3nnnpf_nTf1cn_n = _swiftEmptyArrayStorage;
    uint64_t v75 = v173;
    uint64_t v76 = v162;
    uint64_t v77 = (uint64_t)v157;
  }
  else
  {
    (*(void (**)(uint64_t *, uint64_t, uint64_t))(v170 + 32))(v160, v65, v73);
    uint64_t v78 = ML16MLTextClassifierV23createAnnotatedFeatures33_F2EF627AFE10E52D0E593E242B327365LL_10a24Column05labelQ0SaySS0P0_X56R0tG11f30Data0T5FrameV_S2StFZSSAH_SSAItM19_ANtXEfU_Tf3nnnpf_nTf1cn_n;
    DataFrame.subscript.getter(v173, v172, &type metadata for String);
    *(void *)&v143[0] = 0;
    *((void *)&v143[0] + 1) = 0xE000000000000000;
    uint64_t v79 = v154;
    OptionalColumnProtocol.filled(with:)(v143, v154, v153);
    ((void (*)(uint64_t *, uint64_t))v159)(v78, v79);
    uint64_t v80 = specialized Set.init<A>(_:)();
    unint64_t v72 = v166;
    uint64_t isa = (uint64_t)v166[1].super.isa;
    swift_bridgeObjectRetain(isa);
    char v82 = specialized Set.isSubset(of:)(isa, v80);
    swift_bridgeObjectRelease(isa);
    swift_bridgeObjectRelease(v80);
    if ((v82 & 1) == 0)
    {
      swift_bridgeObjectRelease((_BYTE)v167);
      swift_bridgeObjectRelease((_BYTE)v172);
      uint64_t v101 = lazy protocol witness table accessor for type MLCreateError and conformance MLCreateError();
      swift_allocError(&type metadata for MLCreateError, v101, 0, 0);
      *(void *)uint64_t v102 = 0xD00000000000003ELL;
      *(void *)(v102 + 8) = " table is empty." + 0x8000000000000000;
      *(_OWORD *)(v102 + 16) = 0;
      *(_OWORD *)(v102 + 32) = 0;
      *(unsigned char *)(v102 + 48) = 2;
      swift_willThrow(&type metadata for MLCreateError, v101, v102, v103, v104, v105);
      uint64_t v106 = *(void (**)(uint64_t, uint64_t))(v170 + 8);
      uint64_t v107 = v171;
      v106(v168, v171);
      v106((uint64_t)v160, v107);
      v106((uint64_t)v174, v107);
      outlined destroy of MLActivityClassifier.ModelParameters(v169, type metadata accessor for MLTextClassifier.ModelParameters);
      goto LABEL_16;
    }
    uint64_t v77 = (uint64_t)v157;
    long long v83 = v160;
    DataFrame.subscript.getter(v162, v167, &type metadata for String);
    uint64_t v75 = v173;
    DataFrame.subscript.getter(v173, v172, &type metadata for String);
    uint64_t v84 = v175;
    ML16MLTextClassifierV23createAnnotatedFeatures33_F2EF627AFE10E52D0E593E242B327365LL_10a24Column05labelQ0SaySS0P0_X56R0tG11f30Data0T5FrameV_S2StFZSSAH_SSAItM19_ANtXEfU_Tf3nnnpf_nTf1cn_n = _sSTsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFs12Zip2SequenceVy11TabularData6ColumnVySSGAKG_SS4text_SS5labelts5NeverOTg5043_sSSSgAAS2SIgggoo_AA_AAtSS4text_SS5labelts5k145OIegnrzr_TR095_s8CreateML16MLTextClassifierV23createAnnotatedFeatures33_F2EF627AFE10E52D0E593E242B327365LL_10a24Column05labelQ0SaySS0P0_X56R0tG11f30Data0T5FrameV_S2StFZSSAH_SSAItM19_ANtXEfU_Tf3nnnpf_nTf1cn_n(v77);
    uint64_t v175 = v84;
    outlined destroy of Either<LogisticRegressionClassifier<Float, String>, FullyConnectedNetworkClassifier<Float, String>>(v77, &demangling cache variable for type metadata for Zip2Sequence<Column<String>, Column<String>>);
    (*(void (**)(uint64_t *, uint64_t))(v170 + 8))(v83, v171);
    uint64_t v76 = v162;
  }
  DataFrame.subscript.getter(v76, v167, &type metadata for String);
  uint64_t v85 = v75;
  char v86 = (char)v172;
  DataFrame.subscript.getter(v85, v172, &type metadata for String);
  uint64_t v87 = v175;
  uint64_t v173 = _sSTsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFs12Zip2SequenceVy11TabularData6ColumnVySSGAKG_SS4text_SS5labelts5NeverOTg5043_sSSSgAAS2SIgggoo_AA_AAtSS4text_SS5labelts5k145OIegnrzr_TR095_s8CreateML16MLTextClassifierV23createAnnotatedFeatures33_F2EF627AFE10E52D0E593E242B327365LL_10a24Column05labelQ0SaySS0P0_X56R0tG11f30Data0T5FrameV_S2StFZSSAH_SSAItM19_ANtXEfU_Tf3nnnpf_nTf1cn_n(v77);
  uint64_t v88 = v87;
  outlined destroy of Either<LogisticRegressionClassifier<Float, String>, FullyConnectedNetworkClassifier<Float, String>>(v77, &demangling cache variable for type metadata for Zip2Sequence<Column<String>, Column<String>>);
  swift_bridgeObjectRelease((_BYTE)v167);
  swift_bridgeObjectRelease(v86);
  uint64_t v89 = v164;
  uint64_t v90 = (uint64_t)v147;
  outlined init with copy of MLTrainingSessionParameters(v164, (uint64_t)v147, type metadata accessor for MLTextClassifier.ModelAlgorithmType);
  if (swift_getEnumCaseMultiPayload(v90, v148) != 2)
  {
    outlined destroy of MLActivityClassifier.ModelParameters(v90, type metadata accessor for MLTextClassifier.ModelAlgorithmType);
    goto LABEL_32;
  }
  uint64_t v91 = (uint64_t)v163;
  outlined init with take of MLTextClassifier.FeatureExtractorType(v90, (uint64_t)v163);
  ML16ColumnDescriptorVG_SSs5NeverOTg503_s8d131ML17FeatureVectorizerV11TransformerV10vectorized_13includingBias0A12MLComponents11DenseMatrixVyxG11TabularData0M5FrameV_SbtKFSSAA16fG54Vcfu_33_44daf68368b8b9c6f03dca699c8750fcAPSSTf3nnnpk_nTf1cn_n = _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSay8CreateML16ColumnDescriptorVG_SSs5NeverOTg503_s8d131ML17FeatureVectorizerV11TransformerV10vectorized_13includingBias0A12MLComponents11DenseMatrixVyxG11TabularData0M5FrameV_SbtKFSSAA16fG54Vcfu_33_44daf68368b8b9c6f03dca699c8750fcAPSSTf3nnnpk_nTf1cn_n((uint64_t)v173);
  uint64_t v93 = v89;
  uint64_t v94 = (uint64_t)ML16ColumnDescriptorVG_SSs5NeverOTg503_s8d131ML17FeatureVectorizerV11TransformerV10vectorized_13includingBias0A12MLComponents11DenseMatrixVyxG11TabularData0M5FrameV_SbtKFSSAA16fG54Vcfu_33_44daf68368b8b9c6f03dca699c8750fcAPSSTf3nnnpk_nTf1cn_n;
  uint64_t v95 = *(void **)(v93 + *(int *)(v158 + 20));
  if (v95)
  {
    uint64_t v175 = v87;
    id v172 = v95;
  }
  else
  {
    type metadata accessor for OS_os_log(0, &lazy cache variable for type metadata for NLLanguageRecognizer, NLLanguageRecognizer_ptr);
    id v121 = static NLLanguageRecognizer.dominantLanguage(for:)(v94);
    uint64_t v122 = v171;
    if (v87)
    {
      swift_bridgeObjectRelease((_BYTE)ML16MLTextClassifierV23createAnnotatedFeatures33_F2EF627AFE10E52D0E593E242B327365LL_10a24Column05labelQ0SaySS0P0_X56R0tG11f30Data0T5FrameV_S2StFZSSAH_SSAItM19_ANtXEfU_Tf3nnnpf_nTf1cn_n);
      swift_bridgeObjectRelease((_BYTE)v173);
      swift_bridgeObjectRelease(v94);
      uint64_t v68 = *(void (**)(uint64_t, uint64_t))(v170 + 8);
      v68(v168, v122);
      goto LABEL_42;
    }
    id v172 = v121;
    uint64_t v175 = 0;
    uint64_t v91 = (uint64_t)v163;
  }
  swift_bridgeObjectRelease(v94);
  uint64_t v96 = (uint64_t)v149;
  outlined init with copy of MLTrainingSessionParameters(v91, (uint64_t)v149, type metadata accessor for MLTextClassifier.FeatureExtractorType);
  id v97 = NLModelEmbeddingType.init(_:)(v96);
  uint64_t v98 = static String._unconditionallyBridgeFromObjectiveC(_:)(v97);
  char v100 = v99;
  if (v98 != 0x6D6F74737543 || v99 != 0xE600000000000000)
  {
    char v108 = _stringCompareWithSmolCheck(_:_:expecting:)(v98, v99, 0x6D6F74737543, 0xE600000000000000, 0);
    swift_bridgeObjectRelease(v100);
    if (v108) {
      goto LABEL_30;
    }
    type metadata accessor for OS_os_log(0, &lazy cache variable for type metadata for NLEmbedding, NLEmbedding_ptr);
    id v125 = v172;
    uint64_t v126 = v175;
    static NLEmbedding.requestIfNotPresent(embeddingType:language:)((uint64_t)v97, (uint64_t)v172);
    uint64_t v88 = v126;
    if (!v126)
    {
      outlined destroy of MLActivityClassifier.ModelParameters((uint64_t)v163, type metadata accessor for MLTextClassifier.FeatureExtractorType);

      goto LABEL_31;
    }
    swift_bridgeObjectRelease((_BYTE)ML16MLTextClassifierV23createAnnotatedFeatures33_F2EF627AFE10E52D0E593E242B327365LL_10a24Column05labelQ0SaySS0P0_X56R0tG11f30Data0T5FrameV_S2StFZSSAH_SSAItM19_ANtXEfU_Tf3nnnpf_nTf1cn_n);

    swift_bridgeObjectRelease((_BYTE)v173);
    uint64_t v68 = *(void (**)(uint64_t, uint64_t))(v170 + 8);
    uint64_t v122 = v171;
    v68(v168, v171);
LABEL_42:
    outlined destroy of MLActivityClassifier.ModelParameters((uint64_t)v163, type metadata accessor for MLTextClassifier.FeatureExtractorType);
    uint64_t v70 = v174;
    uint64_t v71 = v122;
    goto LABEL_14;
  }
  swift_bridgeObjectRelease(0);
LABEL_30:
  outlined destroy of MLActivityClassifier.ModelParameters((uint64_t)v163, type metadata accessor for MLTextClassifier.FeatureExtractorType);

  uint64_t v88 = v175;
LABEL_31:
  uint64_t v89 = v164;
LABEL_32:
  uint64_t v109 = (uint64_t)ML16MLTextClassifierV23createAnnotatedFeatures33_F2EF627AFE10E52D0E593E242B327365LL_10a24Column05labelQ0SaySS0P0_X56R0tG11f30Data0T5FrameV_S2StFZSSAH_SSAItM19_ANtXEfU_Tf3nnnpf_nTf1cn_n;
  swift_bridgeObjectRetain((_BYTE)ML16MLTextClassifierV23createAnnotatedFeatures33_F2EF627AFE10E52D0E593E242B327365LL_10a24Column05labelQ0SaySS0P0_X56R0tG11f30Data0T5FrameV_S2StFZSSAH_SSAItM19_ANtXEfU_Tf3nnnpf_nTf1cn_n);
  uint64_t v110 = specialized static MLTextClassifier.createClassifier<A, B>(trainingExamples:validatingExamples:modelParameters:)((uint64_t)v173, v109, v89);
  uint64_t v111 = v171;
  if (v88)
  {
    swift_bridgeObjectRelease(v109);
    uint64_t v112 = *(void (**)(uint64_t, uint64_t))(v170 + 8);
    v112(v168, v111);
    swift_bridgeObjectRelease(v109);
    v112((uint64_t)v174, v111);
    outlined destroy of MLActivityClassifier.ModelParameters(v169, type metadata accessor for MLTextClassifier.ModelParameters);
    swift_bridgeObjectRelease((_BYTE)v173);
    goto LABEL_15;
  }
  uint64_t v113 = (objc_class *)v110;
  swift_bridgeObjectRelease(v109);
  uint64_t v114 = v166;
  v166->super.uint64_t isa = v113;
  uint64_t v115 = v113;
  v116.super.uint64_t isa = NLModel.asCoreML()().super.isa;
  uint64_t v175 = v117;
  if (v117)
  {

    swift_bridgeObjectRelease(v109);
    swift_bridgeObjectRelease((_BYTE)v173);
    uint64_t v118 = v171;
    p_uint64_t isa = (id *)&v114->super.isa;
    uint64_t v120 = *(void (**)(uint64_t, uint64_t))(v170 + 8);
    v120(v168, v171);
    v120((uint64_t)v174, v118);
    outlined destroy of MLActivityClassifier.ModelParameters(v169, type metadata accessor for MLTextClassifier.ModelParameters);

    unint64_t v72 = (MLModel *)p_isa;
    goto LABEL_16;
  }
  v114[2].super.uint64_t isa = v116.super.isa;
  uint64_t v123 = v114;
  char v124 = (char)v173;
  specialized static MLTextClassifier.evaluation<A>(on:using:)((uint64_t)v173, v115);
  swift_bridgeObjectRelease(v124);
  if (*(void *)(v109 + 16))
  {
    specialized static MLTextClassifier.evaluation<A>(on:using:)(v109, v115);
    swift_bridgeObjectRelease(v109);
  }
  else
  {

    swift_bridgeObjectRelease(v109);
    uint64_t v127 = lazy protocol witness table accessor for type MLCreateError and conformance MLCreateError();
    uint64_t v128 = swift_allocError(&type metadata for MLCreateError, v127, 0, 0);
    *(void *)uint64_t v129 = 0xD00000000000001CLL;
    *(void *)(v129 + 8) = "CreateML/MLClassifier.swift" + 0x8000000000000000;
    *(_OWORD *)(v129 + 16) = 0;
    *(_OWORD *)(v129 + 32) = 0;
    *(unsigned char *)(v129 + 48) = 2;
    uint64_t v130 = *(int *)(v161 + 36);
    *(Class *)((char *)&v123->super.isa + v130) = (Class)v128;
    uint64_t v131 = (char *)v123 + v130;
    uint64_t v132 = type metadata accessor for MLClassifierMetrics.Contents(0);
    swift_storeEnumTagMultiPayload(v131, v132, 2);
  }
  uint64_t v133 = v174;
  uint64_t v134 = v152;
  DataFrame.rows.getter();
  int v135 = DataFrame.Rows.count.getter();
  (*(void (**)(uint64_t *, uint64_t))(v150 + 8))(v134, v151);
  long long v136 = v133;
  uint64_t v137 = v169;
  static MLTextClassifier.reportAnalytics(trainingExampleCount:labelCount:algorithm:language:)(v135, *((void *)v166[1].super.isa + 2), v169, *(void *)(v169 + *(int *)(v158 + 20)));
  uint64_t v138 = *(void (**)(uint64_t, uint64_t))(v170 + 8);
  uint64_t v139 = v171;
  v138(v168, v171);
  v138((uint64_t)v136, v139);
  return outlined destroy of MLActivityClassifier.ModelParameters(v137, type metadata accessor for MLTextClassifier.ModelParameters);
}

uint64_t static MLTextClassifier.validateDataFrame(_:textColumn:labelColumn:)(uint64_t a1, uint64_t a2, void *a3, uint64_t a4, void *a5)
{
  v42._char object = v5;
  uint64_t v41 = a5;
  v42._uint64_t countAndFlagsBits = a4;
  uint64_t v44 = type metadata accessor for AnyColumn(0);
  v40._char object = *(void **)(v44 - 8);
  int64_t v8 = *((void *)v40._object + 8);
  int64_t v9 = alloca(v8);
  uint64_t v10 = alloca(v8);
  uint64_t v43 = &v36;
  uint64_t v11 = alloca(v8);
  int64_t v12 = alloca(v8);
  v40._uint64_t countAndFlagsBits = a2;
  v13._uint64_t countAndFlagsBits = a2;
  uint64_t v39 = a3;
  v13._char object = a3;
  uint64_t v45 = a1;
  Swift::Int_optional v14 = DataFrame.indexOfColumn(_:)(v13);
  if (v14.is_nil)
  {
    uint64_t v37 = 0;
    unint64_t v38 = 0xE000000000000000;
    _StringGuts.grow(_:)(56);
    v27._uint64_t countAndFlagsBits = 0xD000000000000012;
    v27._char object = " natural language classifier." + 0x8000000000000000;
    String.append(_:)(v27);
    v27._uint64_t countAndFlagsBits = v40._countAndFlagsBits;
    v27._char object = v39;
    String.append(_:)(v27);
    v28._char object = "Text column name '" + 0x8000000000000000;
    v28._uint64_t countAndFlagsBits = 0xD000000000000024;
    goto LABEL_10;
  }
  DataFrame.subscript.getter(v14.value);
  uint64_t v15 = AnyColumn.wrappedElementType.getter();
  uint64_t v16 = (void (*)(uint64_t *, uint64_t))*((void *)v40._object + 1);
  v16(&v36, v44);
  if (swift_dynamicCastMetatype(v15, &type metadata for String))
  {
    uint64_t countAndFlagsBits = v42._countAndFlagsBits;
    v18._uint64_t countAndFlagsBits = v42._countAndFlagsBits;
    uint64_t v19 = v41;
    v18._char object = v41;
    Swift::Int_optional v20 = DataFrame.indexOfColumn(_:)(v18);
    if (!v20.is_nil)
    {
      uint64_t v21 = v43;
      DataFrame.subscript.getter(v20.value);
      uint64_t v22 = AnyColumn.wrappedElementType.getter();
      v16(v21, v44);
      uint64_t result = swift_dynamicCastMetatype(v22, &type metadata for String);
      if (result) {
        return result;
      }
      os_log_type_t v24 = static os_log_type_t.error.getter(v22, &type metadata for String);
      uint64_t v25 = 0xD00000000000002ELL;
      int64_t v26 = "Label column name '";
      goto LABEL_8;
    }
    uint64_t v37 = 0;
    unint64_t v38 = 0xE000000000000000;
    _StringGuts.grow(_:)(57);
    v30._uint64_t countAndFlagsBits = 0xD000000000000013;
    v30._char object = " not contain string elements." + 0x8000000000000000;
    String.append(_:)(v30);
    v30._uint64_t countAndFlagsBits = countAndFlagsBits;
    v30._char object = v19;
    String.append(_:)(v30);
    v28._char object = "Text column name '" + 0x8000000000000000;
    v28._uint64_t countAndFlagsBits = 0xD000000000000024;
LABEL_10:
    String.append(_:)(v28);
    uint64_t v25 = v37;
    int64_t v29 = (void *)v38;
    os_log_type_t v24 = static os_log_type_t.error.getter(0xD000000000000024, v28._object);
    goto LABEL_11;
  }
  os_log_type_t v24 = static os_log_type_t.error.getter(v15, &type metadata for String);
  uint64_t v25 = 0xD00000000000002DLL;
  int64_t v26 = " in the data frame. ";
LABEL_8:
  int64_t v29 = (void *)((unint64_t)v26 | 0x8000000000000000);
LABEL_11:
  v31._uint64_t countAndFlagsBits = v25;
  v31._char object = v29;
  log(_:type:)(v31, v24);
  v31._char object = (void *)lazy protocol witness table accessor for type MLCreateError and conformance MLCreateError();
  swift_allocError(&type metadata for MLCreateError, v31._object, 0, 0);
  *(void *)uint64_t v32 = v25;
  *(void *)(v32 + 8) = v29;
  *(_OWORD *)(v32 + 16) = 0;
  *(_OWORD *)(v32 + 32) = 0;
  *(unsigned char *)(v32 + 48) = 1;
  return swift_willThrow(&type metadata for MLCreateError, v31._object, v32, v33, v34, v35);
}

uint64_t specialized static MLTextClassifier.evaluation<A>(on:using:)(uint64_t a1, void *a2)
{
  uint64_t v3 = v2;
  id v4 = a2;
  ML16MLTextClassifierV10evaluation2on5usingAA19MLClassifierMetricsVx_So7NLModelCtSlRzSS4text_SS5labelt7B24RtzlFZS2SAK_SSALt_tXEfU_So0R0CTf1cn_n = _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSaySS4text_SS5labeltG_SSs5NeverOTg50111_s8CreateML16MLTextClassifierV10evaluation2on5usingAA19MLClassifierMetricsVx_So7NLModelCtSlRzSS4text_SS5labelt7B24RtzlFZS2SAK_SSALt_tXEfU_So0R0CTf1cn_n(a1, v4);
  ML16MLTextClassifierV10evaluation2on5usingAA19MLClassifierMetricsVx_So7NLModelCtSlRzSS4text_SS5labelt7B80RtzlFZS2SAK_SSALt_tcfu_33_9884fbf80a26ee2659924377586aa6b9SSAK_SSALtSSTf3nnnpk_nTf1cn_n = _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSaySS4text_SS5labeltG_SSs5NeverOTg50111_s8CreateML16MLTextClassifierV10evaluation2on5usingAA19MLClassifierMetricsVx_So7NLModelCtSlRzSS4text_SS5labelt7B80RtzlFZS2SAK_SSALt_tcfu_33_9884fbf80a26ee2659924377586aa6b9SSAK_SSALtSSTf3nnnpk_nTf1cn_n(a1);
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [String]);
  uint64_t v6 = lazy protocol witness table accessor for type FullyConnectedNetworkClassifier<Float, String> and conformance FullyConnectedNetworkClassifier<A, B>(&lazy protocol witness table cache variable for type [String] and conformance [A], &demangling cache variable for type metadata for [String], (uint64_t)&protocol conformance descriptor for [A]);
  ClassificationMetrics.init<A, B>(_:_:)(&ML16MLTextClassifierV10evaluation2on5usingAA19MLClassifierMetricsVx_So7NLModelCtSlRzSS4text_SS5labelt7B24RtzlFZS2SAK_SSALt_tXEfU_So0R0CTf1cn_n, &ML16MLTextClassifierV10evaluation2on5usingAA19MLClassifierMetricsVx_So7NLModelCtSlRzSS4text_SS5labelt7B80RtzlFZS2SAK_SSALt_tcfu_33_9884fbf80a26ee2659924377586aa6b9SSAK_SSALtSSTf3nnnpk_nTf1cn_n, &type metadata for String, v5, v5, &protocol witness table for String, v6, v6);
  uint64_t v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Either<ClassificationMetrics<String>, ClassificationMetrics<Int>>);
  swift_storeEnumTagMultiPayload(v3, v7, 0);
  uint64_t v8 = type metadata accessor for MLClassifierMetrics.Contents(0);
  return swift_storeEnumTagMultiPayload(v3, v8, 0);
}

char static MLTextClassifier.reportAnalytics(trainingExampleCount:labelCount:algorithm:language:)(int a1, int a2, uint64_t a3, uint64_t a4)
{
  char result = AnalyticsReporter.init()();
  if ((result & 1) == 0)
  {
    AnalyticsReporter.reportDataMetrics(model:metricName:quantity:)(CreateML_ModelType_textClassifier, (Swift::String)__PAIR128__((unint64_t)(" training session" + 0x8000000000000000), 0xD000000000000011), (float)a1);
    AnalyticsReporter.reportDataMetrics(model:metricName:quantity:)(CreateML_ModelType_textClassifier, (Swift::String)__PAIR128__((unint64_t)("Number of Images" + 0x8000000000000000), 0xD000000000000011), (float)a2);
    v6._uint64_t countAndFlagsBits = MLTextClassifier.ModelAlgorithmType.description.getter(15);
    char object = (char)v6._object;
    AnalyticsReporter.reportParameterSettings(model:parameterName:parameterValue:)(CreateML_ModelType_textClassifier, (Swift::String)__PAIR128__(0xE90000000000006DLL, 0x687469726F676C41), v6);
    swift_bridgeObjectRelease(object);
    if (a4)
    {
      uint64_t v8 = static String._unconditionallyBridgeFromObjectiveC(_:)(a4);
      uint64_t v10 = v9;
    }
    else
    {
      uint64_t v10 = "formers Text Embedding" + 0x8000000000000000;
      uint64_t v8 = 0xD000000000000014;
    }
    AnalyticsReporter.reportParameterSettings(model:parameterName:parameterValue:)(CreateML_ModelType_textClassifier, (Swift::String)__PAIR128__(0xE800000000000000, 0x65676175676E614CLL), (Swift::String)__PAIR128__((unint64_t)v10, v8));
    return swift_bridgeObjectRelease((_BYTE)v10);
  }
  return result;
}

uint64_t MLTextClassifier.init(trainingData:textColumn:labelColumn:parameters:)(uint64_t *a1, uint64_t a2, void *a3, void *a4, void *a5, uint64_t a6)
{
  Swift::String v18 = a4;
  uint64_t v19 = a3;
  uint64_t v22 = v6;
  uint64_t v21 = a2;
  Swift::Int_optional v20 = a5;
  int64_t v8 = *(void *)(*(void *)(type metadata accessor for MLTextClassifier.ModelParameters(0) - 8) + 64);
  int64_t v9 = alloca(v8);
  uint64_t v10 = alloca(v8);
  int64_t v11 = *(void *)(*(void *)(type metadata accessor for DataFrame(0) - 8) + 64);
  int64_t v12 = alloca(v11);
  Swift::String v13 = alloca(v11);
  char v14 = *((unsigned char *)a1 + 8);
  uint64_t v16 = *a1;
  char v17 = v14;
  DataFrame.init(_:)((uint64_t)&v16);
  outlined init with copy of MLTrainingSessionParameters(a6, (uint64_t)&v16, type metadata accessor for MLTextClassifier.ModelParameters);
  MLTextClassifier.init(trainingData:textColumn:labelColumn:parameters:)((uint64_t)&v16, v21, v19, v18, v20, (uint64_t)&v16);
  return outlined destroy of MLActivityClassifier.ModelParameters(a6, type metadata accessor for MLTextClassifier.ModelParameters);
}

void *unpackLabeledTexts(_:)(uint64_t a1)
{
  uint64_t v1 = a1;
  uint64_t v2 = 1 << *(unsigned char *)(a1 + 32);
  uint64_t v3 = ~(-1 << v2);
  if (v2 >= 64) {
    uint64_t v3 = -1;
  }
  unint64_t v4 = *(void *)(a1 + 64) & v3;
  int64_t v49 = (unint64_t)(v2 + 63) >> 6;
  swift_bridgeObjectRetain(a1);
  uint64_t v5 = _swiftEmptyArrayStorage;
  int64_t v6 = 0;
  uint64_t v7 = _swiftEmptyArrayStorage;
  while (1)
  {
    if (v4)
    {
      _BitScanForward64(&v8, v4);
      uint64_t v46 = (v4 - 1) & v4;
      int64_t v45 = v6;
      unint64_t v9 = v8 | (v6 << 6);
      goto LABEL_15;
    }
    BOOL v10 = __OFADD__(1, v6);
    int64_t v11 = v6 + 1;
    if (v10) {
      BUG();
    }
    if (v11 >= v49) {
      break;
    }
    unint64_t i = *(void *)(v1 + 8 * v11 + 64);
    if (i)
    {
      int64_t v13 = v11;
    }
    else
    {
      int64_t v13 = v11 + 1;
      if (v11 + 1 >= v49) {
        break;
      }
      unint64_t i = *(void *)(v1 + 8 * v11 + 72);
      if (!i)
      {
        int64_t v13 = v11 + 2;
        if (v11 + 2 >= v49) {
          break;
        }
        unint64_t i = *(void *)(v1 + 8 * v11 + 80);
        if (!i)
        {
          int64_t v13 = v11 + 3;
          if (v11 + 3 >= v49) {
            break;
          }
          for (unint64_t i = *(void *)(v1 + 8 * v11 + 88); !i; unint64_t i = *(void *)(v1 + 8 * v13 + 64))
          {
            BOOL v10 = __OFADD__(1, v13++);
            if (v10) {
              BUG();
            }
            if (v13 >= v49) {
              goto LABEL_57;
            }
          }
        }
      }
    }
    _BitScanForward64(&v14, i);
    uint64_t v46 = i & (i - 1);
    unint64_t v9 = v14 + (v13 << 6);
    int64_t v45 = v13;
LABEL_15:
    uint64_t v44 = (uint64_t)v5;
    uint64_t v43 = (uint64_t)v7;
    uint64_t v15 = *(void *)(*(void *)(v1 + 56) + 8 * v9);
    uint64_t v16 = *(void *)(v15 + 16);
    uint64_t v48 = v15;
    if (v16)
    {
      uint64_t v17 = 16 * v9;
      uint64_t v18 = *(void *)(v1 + 48);
      uint64_t v19 = *(void *)(v18 + v17);
      uint64_t v20 = *(void *)(v18 + v17 + 8);
      swift_bridgeObjectRetain(v20);
      swift_bridgeObjectRetain(v15);
      uint64_t v21 = (void *)static Array._allocateBufferUninitialized(minimumCapacity:)(v16);
      uint64_t v22 = v21;
      v21[2] = v16;
      v21[4] = v19;
      v21[5] = v20;
      if (v16 != 1)
      {
        v21[6] = v19;
        v21[7] = v20;
        if (v16 != 2)
        {
          uint64_t v23 = v16 - 2;
          os_log_type_t v24 = v21 + 9;
          do
          {
            *(v24 - 1) = v19;
            *os_log_type_t v24 = v20;
            swift_bridgeObjectRetain(v20);
            v24 += 2;
            --v23;
          }
          while (v23);
        }
        swift_bridgeObjectRetain(v20);
      }
    }
    else
    {
      swift_bridgeObjectRetain(v15);
      uint64_t v22 = _swiftEmptyArrayStorage;
    }
    uint64_t v25 = v22[2];
    int64_t v26 = *(void *)(v44 + 16);
    int64_t v27 = v25 + v26;
    if (__OFADD__(v25, v26)) {
      BUG();
    }
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v44);
    int64_t v29 = (void *)v44;
    if (!isUniquelyReferenced_nonNull_native || *(void *)(v44 + 24) >> 1 < v27)
    {
      if (v26 > v27) {
        int64_t v27 = v26;
      }
      int64_t v29 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(isUniquelyReferenced_nonNull_native, v27, 1, v44);
    }
    if (v22[2])
    {
      uint64_t v30 = v29[2];
      if ((v29[3] >> 1) - v30 < v25) {
        BUG();
      }
      uint64_t v5 = v29;
      unint64_t v31 = (unint64_t)&v29[2 * v30 + 4];
      if ((unint64_t)(v22 + 4) < v31 + 16 * v25 && v31 < (unint64_t)&v22[2 * v25 + 4])
      {
LABEL_68:
        _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize overlapping range", 49, 2, "Swift/UnsafePointer.swift", 25, 2, 1092, 1);
        BUG();
      }
      swift_arrayInitWithCopy(v31, v22 + 4, v25, &type metadata for String);
      if (v25)
      {
        BOOL v10 = __OFADD__(v5[2], v25);
        uint64_t v32 = v5[2] + v25;
        if (v10) {
          BUG();
        }
        _OWORD v5[2] = v32;
      }
    }
    else
    {
      uint64_t v5 = v29;
      if (v25) {
        BUG();
      }
    }
    swift_bridgeObjectRelease((_BYTE)v22);
    uint64_t v33 = *(void *)(v48 + 16);
    uint64_t v7 = (void *)v43;
    int64_t v34 = *(void *)(v43 + 16);
    int64_t v35 = v33 + v34;
    if (__OFADD__(v33, v34)) {
      BUG();
    }
    char v36 = swift_isUniquelyReferenced_nonNull_native(v43);
    if (!v36 || *(void *)(v43 + 24) >> 1 < v35)
    {
      if (v34 > v35) {
        int64_t v35 = v34;
      }
      uint64_t v7 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(v36, v35, 1, v43);
    }
    uint64_t v1 = a1;
    if (*(void *)(v48 + 16))
    {
      uint64_t v37 = v7[2];
      if ((v7[3] >> 1) - v37 < v33) {
        BUG();
      }
      unint64_t v38 = (unint64_t)&v7[2 * v37 + 4];
      if (v48 + 32 < v38 + 16 * v33 && v38 < v48 + 16 * v33 + 32) {
        goto LABEL_68;
      }
      swift_arrayInitWithCopy(v38, v48 + 32, v33, &type metadata for String);
      if (v33)
      {
        BOOL v10 = __OFADD__(v7[2], v33);
        uint64_t v39 = v7[2] + v33;
        if (v10) {
          BUG();
        }
        v7[2] = v39;
      }
    }
    else if (v33)
    {
      BUG();
    }
    swift_bridgeObjectRelease(v48);
    int64_t v6 = v45;
    unint64_t v4 = v46;
  }
LABEL_57:
  swift_release();
  Swift::String v40 = specialized _copySequenceToContiguousArray<A>(_:)(v7, (uint64_t)v5);
  swift_bridgeObjectRelease((_BYTE)v5);
  swift_bridgeObjectRelease((_BYTE)v7);
  uint64_t v41 = specialized _arrayForceCast<A, B>(_:)((uint64_t)v40);
  swift_release();
  return v41;
}

uint64_t specialized generateTextDataFrame<A>(_:textColumn:labelColumn:using:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v39 = unpackLabeledTexts(_:)(a1);
  specialized MutableCollection<>.shuffle<A>(using:)();
  int64_t v6 = v39[2];
  if (v6)
  {
    uint64_t v27 = a3;
    uint64_t v7 = v39[2];
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v6, 0);
    unint64_t v8 = _swiftEmptyArrayStorage;
    int64_t v29 = v39;
    unint64_t v9 = v39 + 5;
    int64_t v28 = v6;
    do
    {
      uint64_t v30 = v8;
      uint64_t v32 = *(v9 - 1);
      Swift::String v40 = v8;
      unint64_t v10 = v8[2];
      unint64_t v35 = v8[3];
      int64_t v37 = v10 + 1;
      uint64_t v34 = *v9;
      swift_bridgeObjectRetain(*v9);
      unint64_t v8 = v30;
      if (v35 >> 1 <= v10)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v35 >= 2, v37, 1);
        unint64_t v8 = v40;
      }
      _OWORD v8[2] = v37;
      uint64_t v11 = 2 * v10;
      v8[v11 + 4] = v32;
      v8[v11 + 5] = v34;
      v9 += 4;
      --v7;
    }
    while (v7);
    unint64_t v31 = v8;
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v6, 0);
    int64_t v12 = _swiftEmptyArrayStorage;
    int64_t v13 = v29 + 7;
    do
    {
      uint64_t v38 = *(v13 - 1);
      uint64_t v41 = v12;
      unint64_t v14 = v12[2];
      unint64_t v36 = v12[3];
      uint64_t v15 = v12;
      uint64_t v33 = *v13;
      swift_bridgeObjectRetain(*v13);
      int64_t v12 = v15;
      if (v36 >> 1 <= v14)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v36 >= 2, v14 + 1, 1);
        int64_t v12 = v41;
      }
      v12[2] = v14 + 1;
      uint64_t v16 = 2 * v14;
      v12[v16 + 4] = v38;
      v12[v16 + 5] = v33;
      v13 += 4;
      --v28;
    }
    while (v28);
    uint64_t v17 = v12;
    swift_release();
    a3 = v27;
    uint64_t v18 = v31;
  }
  else
  {
    swift_release();
    uint64_t v17 = _swiftEmptyArrayStorage;
    uint64_t v18 = _swiftEmptyArrayStorage;
  }
  uint64_t v19 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, [Any?])>);
  uint64_t v20 = (void *)swift_allocObject(v19, 80, 7);
  int v20[2] = 2;
  v20[3] = 4;
  v20[4] = a2;
  v20[5] = a3;
  swift_bridgeObjectRetain(a3);
  uint64_t v21 = specialized _arrayForceCast<A, B>(_:)((uint64_t)v18);
  swift_bridgeObjectRelease((_BYTE)v18);
  v20[6] = v21;
  v20[7] = a4;
  v20[8] = a5;
  swift_bridgeObjectRetain(a5);
  uint64_t v22 = specialized _arrayForceCast<A, B>(_:)((uint64_t)v17);
  swift_bridgeObjectRelease((_BYTE)v17);
  v20[9] = v22;
  return DataFrame.init(dictionaryLiteral:)(v20);
}

unint64_t MLTextClassifier.description.getter()
{
  return MLTextClassifier.debugDescription.getter();
}

unint64_t MLTextClassifier.debugDescription.getter()
{
  uint64_t v1 = v0;
  v25._char object = (void *)type metadata accessor for MLClassifierMetrics.Contents(0);
  int64_t v2 = *(void *)(*((void *)v25._object - 1) + 64);
  uint64_t v3 = alloca(v2);
  unint64_t v4 = alloca(v2);
  uint64_t v5 = type metadata accessor for MLTextClassifier(0);
  v25._uint64_t countAndFlagsBits = (uint64_t)MLTextClassifier.ModelParameters.description.getter(0);
  uint64_t v7 = v6;
  v22._uint64_t countAndFlagsBits = MLClassifierMetrics.description.getter();
  v22._char object = v8;
  uint64_t v9 = *(int *)(v5 + 36);
  unint64_t v10 = v7;
  outlined init with copy of MLTrainingSessionParameters(v1 + v9, (uint64_t)&v20, type metadata accessor for MLClassifierMetrics.Contents);
  LODWORD(v7) = swift_getEnumCaseMultiPayload(&v20, v25._object);
  outlined destroy of MLActivityClassifier.ModelParameters((uint64_t)&v20, type metadata accessor for MLClassifierMetrics.Contents);
  v25._char object = (void *)MLClassifierMetrics.description.getter();
  int64_t v12 = v11;
  unint64_t v23 = 0xD00000000000001BLL;
  os_log_type_t v24 = "subset of the training labels." + 0x8000000000000000;
  v13._uint64_t countAndFlagsBits = v25._countAndFlagsBits;
  v25._uint64_t countAndFlagsBits = (uint64_t)v10;
  v13._char object = v10;
  String.append(_:)(v13);
  v21._uint64_t countAndFlagsBits = 0xD00000000000001ELL;
  v21._char object = "ActivityClassifier\n\nParameters\n" + 0x8000000000000000;
  char object = (char)v22._object;
  String.append(_:)(v22);
  char v15 = (char)v21._object;
  String.append(_:)(v21);
  swift_bridgeObjectRelease(v15);
  if (v7 > 1)
  {
    char v18 = object;
  }
  else
  {
    v21._uint64_t countAndFlagsBits = 0xD000000000000020;
    v21._char object = "\nPerformance on Training Data\n" + 0x8000000000000000;
    v16._uint64_t countAndFlagsBits = (uint64_t)v25._object;
    v16._char object = v12;
    String.append(_:)(v16);
    char v17 = (char)v21._object;
    String.append(_:)(v21);
    swift_bridgeObjectRelease(object);
    char v18 = (char)v12;
    LOBYTE(v12) = v17;
  }
  swift_bridgeObjectRelease(v18);
  swift_bridgeObjectRelease((_BYTE)v12);
  swift_bridgeObjectRelease(v25._countAndFlagsBits);
  return v23;
}

NSAttributedString MLTextClassifier.playgroundDescription.getter()
{
  uint64_t v1 = v0;
  uint64_t v2 = type metadata accessor for OS_os_log(0, &lazy cache variable for type metadata for NSAttributedString, NSAttributedString_ptr);
  v3._uint64_t countAndFlagsBits = MLTextClassifier.debugDescription.getter();
  v3._char object = v4;
  result.super.uint64_t isa = NSAttributedString.__allocating_init(string:)(v3).super.isa;
  v1[3].super.uint64_t isa = (Class)v2;
  v1->super.uint64_t isa = result.super.isa;
  return result;
}

unint64_t protocol witness for CustomStringConvertible.description.getter in conformance MLTextClassifier()
{
  return MLTextClassifier.description.getter();
}

unint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance MLTextClassifier()
{
  return MLTextClassifier.debugDescription.getter();
}

NSAttributedString protocol witness for CustomPlaygroundDisplayConvertible.playgroundDescription.getter in conformance MLTextClassifier()
{
  return MLTextClassifier.playgroundDescription.getter();
}

uint64_t outlined init with take of MLTextClassifier.FeatureExtractorType(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = type metadata accessor for MLTextClassifier.FeatureExtractorType(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v2 - 8) + 32))(a2, a1, v2);
  return a2;
}

id sub_24107D()
{
  uint64_t v1 = v0;
  id result = MLTextClassifier.model.getter();
  void *v1 = result;
  return result;
}

void sub_241097(id *a1)
{
}

char *initializeBufferWithCopyOfBuffer for MLTextClassifier(char *a1, char **a2, int *a3)
{
  int v3 = *(_DWORD *)(*((void *)a3 - 1) + 80);
  unint64_t v4 = *a2;
  *(void *)a1 = *a2;
  if ((v3 & 0x20000) != 0)
  {
    int64_t v12 = &v4[(v3 + 16) & ~v3];
    swift_retain();
  }
  else
  {
    uint64_t v5 = a2[1];
    *((void *)a1 + 1) = v5;
    int64_t v6 = a2[2];
    *((void *)a1 + 2) = v6;
    uint64_t v7 = a3[7];
    unint64_t v8 = &a1[v7];
    uint64_t v9 = (char *)a2 + v7;
    uint64_t v61 = type metadata accessor for MLTextClassifier.ModelAlgorithmType(0);
    v4;
    swift_bridgeObjectRetain((_BYTE)v5);
    v6;
    if (swift_getEnumCaseMultiPayload(v9, v61) == 2)
    {
      uint64_t v10 = type metadata accessor for URL(0);
      if (__swift_getEnumTagSinglePayload((uint64_t)v9, 4, v10))
      {
        uint64_t v11 = type metadata accessor for MLTextClassifier.FeatureExtractorType(0);
        memcpy(v8, v9, *(void *)(*(void *)(v11 - 8) + 64));
      }
      else
      {
        (*(void (**)(char *, char *, uint64_t))(*(void *)(v10 - 8) + 16))(v8, v9, v10);
        __swift_storeEnumTagSinglePayload((uint64_t)v8, 0, 4, v10);
      }
      uint64_t v13 = *(int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (MLTextClassifier.FeatureExtractorType, revision: Int?))
                   + 48);
      v8[v13 + 8] = v9[v13 + 8];
      *(void *)&v8[v13] = *(void *)&v9[v13];
      swift_storeEnumTagMultiPayload(v8, v61, 2);
    }
    else
    {
      memcpy(v8, v9, *(void *)(*(void *)(v61 - 8) + 64));
    }
    unint64_t v14 = (int *)type metadata accessor for MLTextClassifier.ModelParameters(0);
    uint64_t v15 = v14[5];
    Swift::String v16 = *(void **)&v9[v15];
    *(void *)&v8[v15] = v16;
    uint64_t v17 = v14[6];
    char v18 = &v8[v17];
    uint64_t v62 = &v9[v17];
    uint64_t v19 = *(void *)&v9[v17 + 24];
    v16;
    if (v19)
    {
      *((void *)v18 + 3) = v19;
      (**(void (***)(char *, char *, uint64_t))(v19 - 8))(v18, v62, v19);
    }
    else
    {
      long long v20 = *(_OWORD *)v62;
      *((_OWORD *)v18 + 1) = *((_OWORD *)v62 + 1);
      *(_OWORD *)char v18 = v20;
    }
    uint64_t v21 = v14[7];
    *(void *)&v8[v21] = *(void *)&v9[v21];
    uint64_t v22 = *(void *)&v9[v21 + 8];
    *(void *)&v8[v21 + 8] = v22;
    uint64_t v23 = v14[8];
    *(void *)&v8[v23] = *(void *)&v9[v23];
    uint64_t v24 = *(void *)&v9[v23 + 8];
    *(void *)&v8[v23 + 8] = v24;
    uint64_t v25 = v14[9];
    v8[v25 + 8] = v9[v25 + 8];
    *(void *)&v8[v25] = *(void *)&v9[v25];
    uint64_t v26 = a3[8];
    uint64_t v27 = &a1[v26];
    int64_t v28 = (char *)a2 + v26;
    uint64_t v29 = type metadata accessor for MLClassifierMetrics.Contents(0);
    swift_bridgeObjectRetain(v22);
    swift_bridgeObjectRetain(v24);
    uint64_t v63 = v29;
    unsigned int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload(v28, v29);
    if (EnumCaseMultiPayload == 2)
    {
      uint64_t v35 = *(void *)v28;
      swift_errorRetain(*(void *)v28);
      *(void *)uint64_t v27 = v35;
    }
    else if (EnumCaseMultiPayload == 1)
    {
      *(void *)uint64_t v27 = *(void *)v28;
      uint64_t v55 = type metadata accessor for MLClassifierMetrics.Precomputed(0);
      uint64_t v31 = *(int *)(v55 + 20);
      uint64_t v56 = &v27[v31];
      uint64_t v32 = type metadata accessor for DataFrame(0);
      uint64_t v33 = &v28[v31];
      uint64_t v34 = *(void (**)(char *, char *, uint64_t))(*(void *)(v32 - 8) + 16);
      v34(v56, v33, v32);
      v34(&v27[*(int *)(v55 + 24)], &v28[*(int *)(v55 + 24)], v32);
    }
    else
    {
      uint64_t v36 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Either<ClassificationMetrics<String>, ClassificationMetrics<Int>>);
      int v37 = swift_getEnumCaseMultiPayload(v28, v36);
      BOOL v38 = v37 == 1;
      uint64_t v39 = &demangling cache variable for type metadata for ClassificationMetrics<String>;
      if (v37 == 1) {
        uint64_t v39 = &demangling cache variable for type metadata for ClassificationMetrics<Int>;
      }
      uint64_t v40 = __swift_instantiateConcreteTypeFromMangledName(v39);
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v40 - 8) + 16))(v27, v28, v40);
      swift_storeEnumTagMultiPayload(v27, v36, v38);
    }
    swift_storeEnumTagMultiPayload(v27, v63, EnumCaseMultiPayload);
    uint64_t v41 = a3[9];
    int64_t v12 = a1;
    Swift::String v42 = &a1[v41];
    uint64_t v43 = (char *)a2 + v41;
    int v44 = swift_getEnumCaseMultiPayload((char *)a2 + v41, v63);
    if (v44 == 2)
    {
      uint64_t v48 = *(void *)v43;
      swift_errorRetain(*(void *)v43);
      *(void *)Swift::String v42 = v48;
      swift_storeEnumTagMultiPayload(v42, v63, 2);
    }
    else if (v44 == 1)
    {
      *(void *)Swift::String v42 = *(void *)v43;
      uint64_t v59 = type metadata accessor for MLClassifierMetrics.Precomputed(0);
      uint64_t v45 = *(int *)(v59 + 20);
      uint64_t v46 = type metadata accessor for DataFrame(0);
      char v47 = *(void (**)(char *, char *, uint64_t))(*(void *)(v46 - 8) + 16);
      v47(&v42[v45], &v43[v45], v46);
      v47(&v42[*(int *)(v59 + 24)], &v43[*(int *)(v59 + 24)], v46);
      int64_t v12 = a1;
      swift_storeEnumTagMultiPayload(v42, v63, 1);
    }
    else
    {
      uint64_t v49 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Either<ClassificationMetrics<String>, ClassificationMetrics<Int>>);
      int v50 = swift_getEnumCaseMultiPayload(v43, v49);
      BOOL v51 = v50 == 1;
      uint64_t v52 = &demangling cache variable for type metadata for ClassificationMetrics<String>;
      if (v50 == 1) {
        uint64_t v52 = &demangling cache variable for type metadata for ClassificationMetrics<Int>;
      }
      uint64_t v53 = __swift_instantiateConcreteTypeFromMangledName(v52);
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v53 - 8) + 16))(v42, v43, v53);
      swift_storeEnumTagMultiPayload(v42, v49, v51);
      swift_storeEnumTagMultiPayload(v42, v63, 0);
      return a1;
    }
  }
  return v12;
}

uint64_t destroy for MLTextClassifier(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = a2;

  swift_bridgeObjectRelease(*(void *)(a1 + 8));
  uint64_t v4 = a1 + *(int *)(a2 + 28);
  uint64_t v5 = type metadata accessor for MLTextClassifier.ModelAlgorithmType(0);
  if (swift_getEnumCaseMultiPayload(v4, v5) == 2)
  {
    uint64_t v6 = type metadata accessor for URL(0);
    if (!__swift_getEnumTagSinglePayload(v4, 4, v6)) {
      (*(void (**)(uint64_t, uint64_t))(*(void *)(v6 - 8) + 8))(v4, v6);
    }
  }
  uint64_t v7 = (int *)type metadata accessor for MLTextClassifier.ModelParameters(0);

  uint64_t v8 = v7[6];
  if (*(void *)(v4 + v8 + 24)) {
    __swift_destroy_boxed_opaque_existential_1Tm((void *)(v4 + v8));
  }
  swift_bridgeObjectRelease(*(void *)(v4 + v7[7] + 8));
  swift_bridgeObjectRelease(*(void *)(v4 + v7[8] + 8));
  uint64_t v9 = (char *)(a1 + *(int *)(a2 + 32));
  uint64_t v10 = type metadata accessor for MLClassifierMetrics.Contents(0);
  int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload(v9, v10);
  switch(EnumCaseMultiPayload)
  {
    case 2:
      swift_errorRelease(*(void *)v9);
      break;
    case 1:
      uint64_t v30 = type metadata accessor for MLClassifierMetrics.Precomputed(0);
      unint64_t v14 = &v9[*(int *)(v30 + 20)];
      uint64_t v15 = type metadata accessor for DataFrame(0);
      Swift::String v16 = v14;
      uint64_t v17 = *(void (**)(char *, uint64_t))(*(void *)(v15 - 8) + 8);
      v17(v16, v15);
      uint64_t v18 = v15;
      uint64_t v2 = a2;
      v17(&v9[*(int *)(v30 + 24)], v18);
      break;
    case 0:
      uint64_t v12 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Either<ClassificationMetrics<String>, ClassificationMetrics<Int>>);
      if (swift_getEnumCaseMultiPayload(v9, v12) == 1) {
        uint64_t v13 = &demangling cache variable for type metadata for ClassificationMetrics<Int>;
      }
      else {
        uint64_t v13 = &demangling cache variable for type metadata for ClassificationMetrics<String>;
      }
      uint64_t v19 = __swift_instantiateConcreteTypeFromMangledName(v13);
      (*(void (**)(char *, uint64_t))(*(void *)(v19 - 8) + 8))(v9, v19);
      break;
  }
  long long v20 = (void *)(*(int *)(v2 + 36) + a1);
  uint64_t result = swift_getEnumCaseMultiPayload(v20, v10);
  switch(result)
  {
    case 2:
      return swift_errorRelease(*v20);
    case 1:
      uint64_t v24 = type metadata accessor for MLClassifierMetrics.Precomputed(0);
      uint64_t v25 = (char *)v20 + *(int *)(v24 + 20);
      uint64_t v26 = type metadata accessor for DataFrame(0);
      uint64_t v27 = *(void (**)(char *, uint64_t))(*(void *)(v26 - 8) + 8);
      v27(v25, v26);
      return ((uint64_t (*)(char *, uint64_t))v27)((char *)v20 + *(int *)(v24 + 24), v26);
    case 0:
      uint64_t v22 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Either<ClassificationMetrics<String>, ClassificationMetrics<Int>>);
      if (swift_getEnumCaseMultiPayload(v20, v22) == 1) {
        uint64_t v23 = &demangling cache variable for type metadata for ClassificationMetrics<Int>;
      }
      else {
        uint64_t v23 = &demangling cache variable for type metadata for ClassificationMetrics<String>;
      }
      uint64_t v28 = __swift_instantiateConcreteTypeFromMangledName(v23);
      return (*(uint64_t (**)(void *, uint64_t))(*(void *)(v28 - 8) + 8))(v20, v28);
  }
  return result;
}

void *initializeWithCopy for MLTextClassifier(void *a1, uint64_t a2, int *a3)
{
  int v3 = *(void **)a2;
  *a1 = *(void *)a2;
  uint64_t v4 = *(void *)(a2 + 8);
  a1[1] = v4;
  uint64_t v5 = *(void **)(a2 + 16);
  a1[2] = v5;
  uint64_t v6 = a3[7];
  uint64_t v7 = (char *)a1 + v6;
  uint64_t v8 = (char *)(a2 + v6);
  uint64_t v66 = type metadata accessor for MLTextClassifier.ModelAlgorithmType(0);
  v3;
  swift_bridgeObjectRetain(v4);
  v5;
  if (swift_getEnumCaseMultiPayload(v8, v66) == 2)
  {
    uint64_t v9 = type metadata accessor for URL(0);
    if (__swift_getEnumTagSinglePayload((uint64_t)v8, 4, v9))
    {
      uint64_t v10 = type metadata accessor for MLTextClassifier.FeatureExtractorType(0);
      memcpy(v7, v8, *(void *)(*(void *)(v10 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v9 - 8) + 16))(v7, v8, v9);
      __swift_storeEnumTagSinglePayload((uint64_t)v7, 0, 4, v9);
    }
    uint64_t v11 = *(int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (MLTextClassifier.FeatureExtractorType, revision: Int?))
                 + 48);
    v7[v11 + 8] = v8[v11 + 8];
    *(void *)&v7[v11] = *(void *)&v8[v11];
    swift_storeEnumTagMultiPayload(v7, v66, 2);
  }
  else
  {
    memcpy(v7, v8, *(void *)(*(void *)(v66 - 8) + 64));
  }
  uint64_t v12 = (int *)type metadata accessor for MLTextClassifier.ModelParameters(0);
  uint64_t v13 = v12[5];
  unint64_t v14 = *(void **)&v8[v13];
  *(void *)&v7[v13] = v14;
  uint64_t v15 = v12[6];
  Swift::String v16 = &v7[v15];
  uint64_t v67 = &v8[v15];
  uint64_t v17 = *(void *)&v8[v15 + 24];
  v14;
  if (v17)
  {
    *((void *)v16 + 3) = v17;
    (**(void (***)(char *, char *, uint64_t))(v17 - 8))(v16, v67, v17);
  }
  else
  {
    long long v18 = *(_OWORD *)v67;
    *((_OWORD *)v16 + 1) = *((_OWORD *)v67 + 1);
    *(_OWORD *)Swift::String v16 = v18;
  }
  uint64_t v19 = v12[7];
  *(void *)&v7[v19] = *(void *)&v8[v19];
  uint64_t v20 = *(void *)&v8[v19 + 8];
  *(void *)&v7[v19 + 8] = v20;
  uint64_t v21 = v12[8];
  *(void *)&v7[v21] = *(void *)&v8[v21];
  uint64_t v22 = *(void *)&v8[v21 + 8];
  *(void *)&v7[v21 + 8] = v22;
  uint64_t v23 = v12[9];
  v7[v23 + 8] = v8[v23 + 8];
  *(void *)&v7[v23] = *(void *)&v8[v23];
  uint64_t v24 = a3[8];
  uint64_t v25 = (void *)((char *)a1 + v24);
  uint64_t v26 = (uint64_t *)(a2 + v24);
  uint64_t v27 = type metadata accessor for MLClassifierMetrics.Contents(0);
  swift_bridgeObjectRetain(v20);
  swift_bridgeObjectRetain(v22);
  uint64_t v68 = v27;
  unsigned int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload(v26, v27);
  if (EnumCaseMultiPayload == 2)
  {
    uint64_t v34 = *v26;
    swift_errorRetain(v34);
    *uint64_t v25 = v34;
  }
  else
  {
    if (EnumCaseMultiPayload == 1)
    {
      *uint64_t v25 = *v26;
      uint64_t v57 = type metadata accessor for MLClassifierMetrics.Precomputed(0);
      uint64_t v29 = *(int *)(v57 + 20);
      uint64_t v58 = (char *)v25 + v29;
      uint64_t v30 = type metadata accessor for DataFrame(0);
      uint64_t v59 = v25;
      uint64_t v31 = *(void (**)(char *, char *, uint64_t))(*(void *)(v30 - 8) + 16);
      uint64_t v32 = (char *)v26 + v29;
      uint64_t v33 = a1;
      v31(v58, v32, v30);
      v31((char *)v59 + *(int *)(v57 + 24), (char *)v26 + *(int *)(v57 + 24), v30);
      uint64_t v25 = v59;
      goto LABEL_18;
    }
    uint64_t v35 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Either<ClassificationMetrics<String>, ClassificationMetrics<Int>>);
    int v36 = swift_getEnumCaseMultiPayload(v26, v35);
    BOOL v37 = v36 == 1;
    BOOL v38 = &demangling cache variable for type metadata for ClassificationMetrics<String>;
    if (v36 == 1) {
      BOOL v38 = &demangling cache variable for type metadata for ClassificationMetrics<Int>;
    }
    uint64_t v39 = __swift_instantiateConcreteTypeFromMangledName(v38);
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(void *)(v39 - 8) + 16))(v25, v26, v39);
    swift_storeEnumTagMultiPayload(v25, v35, v37);
  }
  uint64_t v33 = a1;
LABEL_18:
  swift_storeEnumTagMultiPayload(v25, v68, EnumCaseMultiPayload);
  uint64_t v40 = a3[9];
  uint64_t v41 = (char *)v33 + v40;
  Swift::String v42 = (void *)(v40 + a2);
  unsigned int v43 = swift_getEnumCaseMultiPayload(v40 + a2, v68);
  if (v43 == 2)
  {
    uint64_t v50 = *v42;
    swift_errorRetain(*v42);
    *(void *)uint64_t v41 = v50;
  }
  else if (v43 == 1)
  {
    *(void *)uint64_t v41 = *v42;
    uint64_t v64 = type metadata accessor for MLClassifierMetrics.Precomputed(0);
    int v44 = (char *)v42;
    uint64_t v45 = *(int *)(v64 + 20);
    uint64_t v61 = &v41[v45];
    uint64_t v46 = type metadata accessor for DataFrame(0);
    char v47 = &v44[v45];
    uint64_t v48 = *(void (**)(char *, char *, uint64_t))(*(void *)(v46 - 8) + 16);
    v48(v61, v47, v46);
    uint64_t v49 = v46;
    uint64_t v33 = a1;
    v48(&v41[*(int *)(v64 + 24)], &v44[*(int *)(v64 + 24)], v49);
  }
  else
  {
    uint64_t v51 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Either<ClassificationMetrics<String>, ClassificationMetrics<Int>>);
    int v52 = swift_getEnumCaseMultiPayload((char *)v42, v51);
    uint64_t v65 = v42;
    BOOL v53 = v52 == 1;
    uint64_t v54 = &demangling cache variable for type metadata for ClassificationMetrics<String>;
    if (v52 == 1) {
      uint64_t v54 = &demangling cache variable for type metadata for ClassificationMetrics<Int>;
    }
    uint64_t v55 = __swift_instantiateConcreteTypeFromMangledName(v54);
    (*(void (**)(char *, void *, uint64_t))(*(void *)(v55 - 8) + 16))(v41, v65, v55);
    swift_storeEnumTagMultiPayload(v41, v51, v53);
  }
  swift_storeEnumTagMultiPayload(v41, v68, v43);
  return v33;
}

uint64_t assignWithCopy for MLTextClassifier(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = *(void **)a2;
  uint64_t v6 = *(void **)a1;
  *(void *)a1 = *(void *)a2;
  v5;

  uint64_t v7 = *(void *)(a2 + 8);
  uint64_t v8 = *(void *)(a1 + 8);
  *(void *)(a1 + 8) = v7;
  swift_bridgeObjectRetain(v7);
  swift_bridgeObjectRelease(v8);
  uint64_t v9 = *(void **)(a2 + 16);
  uint64_t v10 = *(void **)(a1 + 16);
  *(void *)(a1 + 16) = v9;
  v9;

  uint64_t v70 = a3;
  uint64_t v11 = *(int *)(a3 + 28);
  uint64_t v12 = (char *)(a1 + v11);
  uint64_t v13 = (char *)(a2 + v11);
  uint64_t v69 = a1;
  if (a1 != a2)
  {
    outlined destroy of MLActivityClassifier.ModelParameters((uint64_t)v12, type metadata accessor for MLTextClassifier.ModelAlgorithmType);
    uint64_t v14 = type metadata accessor for MLTextClassifier.ModelAlgorithmType(0);
    if (swift_getEnumCaseMultiPayload(v13, v14) == 2)
    {
      uint64_t v15 = type metadata accessor for URL(0);
      if (__swift_getEnumTagSinglePayload((uint64_t)v13, 4, v15))
      {
        uint64_t v16 = type metadata accessor for MLTextClassifier.FeatureExtractorType(0);
        memcpy(v12, v13, *(void *)(*(void *)(v16 - 8) + 64));
      }
      else
      {
        (*(void (**)(char *, char *, uint64_t))(*(void *)(v15 - 8) + 16))(v12, v13, v15);
        __swift_storeEnumTagSinglePayload((uint64_t)v12, 0, 4, v15);
      }
      uint64_t v17 = *(int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (MLTextClassifier.FeatureExtractorType, revision: Int?))
                   + 48);
      v12[v17 + 8] = v13[v17 + 8];
      *(void *)&v12[v17] = *(void *)&v13[v17];
      swift_storeEnumTagMultiPayload(v12, v14, 2);
    }
    else
    {
      memcpy(v12, v13, *(void *)(*(void *)(v14 - 8) + 64));
    }
  }
  long long v18 = (int *)type metadata accessor for MLTextClassifier.ModelParameters(0);
  uint64_t v19 = v18[5];
  uint64_t v20 = *(void **)&v12[v19];
  uint64_t v21 = *(void **)&v13[v19];
  *(void *)&v12[v19] = v21;
  v21;

  uint64_t v22 = v18[6];
  uint64_t v23 = &v12[v22];
  uint64_t v24 = &v13[v22];
  uint64_t v25 = *(void *)&v13[v22 + 24];
  if (*(void *)&v12[v22 + 24])
  {
    if (v25)
    {
      __swift_assign_boxed_opaque_existential_0((uint64_t *)&v12[v22], (uint64_t *)&v13[v22]);
      goto LABEL_15;
    }
    __swift_destroy_boxed_opaque_existential_1Tm(&v12[v22]);
  }
  else if (v25)
  {
    *((void *)v23 + 3) = v25;
    (**(void (***)(char *, char *))(v25 - 8))(v23, v24);
    goto LABEL_15;
  }
  long long v26 = *(_OWORD *)v24;
  *((_OWORD *)v23 + 1) = *((_OWORD *)v24 + 1);
  *(_OWORD *)uint64_t v23 = v26;
LABEL_15:
  uint64_t v27 = a2;
  uint64_t v28 = v18[7];
  *(void *)&v12[v28] = *(void *)&v13[v28];
  uint64_t v29 = *(void *)&v13[v28 + 8];
  uint64_t v30 = *(void *)&v12[v28 + 8];
  *(void *)&v12[v28 + 8] = v29;
  swift_bridgeObjectRetain(v29);
  swift_bridgeObjectRelease(v30);
  uint64_t v31 = v18[8];
  *(void *)&v12[v31] = *(void *)&v13[v31];
  uint64_t v32 = *(void *)&v13[v31 + 8];
  uint64_t v33 = *(void *)&v12[v31 + 8];
  *(void *)&v12[v31 + 8] = v32;
  swift_bridgeObjectRetain(v32);
  swift_bridgeObjectRelease(v33);
  uint64_t v34 = v18[9];
  v12[v34 + 8] = v13[v34 + 8];
  *(void *)&v12[v34] = *(void *)&v13[v34];
  uint64_t result = v69;
  if (v69 != a2)
  {
    uint64_t v36 = *(int *)(v70 + 32);
    BOOL v37 = (char *)(v69 + v36);
    BOOL v38 = (char *)(a2 + v36);
    outlined destroy of MLActivityClassifier.ModelParameters((uint64_t)v37, type metadata accessor for MLClassifierMetrics.Contents);
    uint64_t v68 = type metadata accessor for MLClassifierMetrics.Contents(0);
    unsigned int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload(v38, v68);
    if (EnumCaseMultiPayload == 2)
    {
      uint64_t v44 = *(void *)v38;
      swift_errorRetain(*(void *)v38);
      *(void *)BOOL v37 = v44;
    }
    else if (EnumCaseMultiPayload == 1)
    {
      *(void *)BOOL v37 = *(void *)v38;
      uint64_t v66 = type metadata accessor for MLClassifierMetrics.Precomputed(0);
      uint64_t v40 = *(int *)(v66 + 20);
      uint64_t v67 = &v37[v40];
      uint64_t v41 = type metadata accessor for DataFrame(0);
      Swift::String v42 = *(void (**)(char *, char *, uint64_t))(*(void *)(v41 - 8) + 16);
      unsigned int v43 = &v38[v40];
      uint64_t v27 = a2;
      v42(v67, v43, v41);
      v42(&v37[*(int *)(v66 + 24)], &v38[*(int *)(v66 + 24)], v41);
      unsigned int EnumCaseMultiPayload = 1;
    }
    else
    {
      uint64_t v45 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Either<ClassificationMetrics<String>, ClassificationMetrics<Int>>);
      int v46 = swift_getEnumCaseMultiPayload(v38, v45);
      BOOL v47 = v46 == 1;
      uint64_t v48 = &demangling cache variable for type metadata for ClassificationMetrics<String>;
      if (v46 == 1) {
        uint64_t v48 = &demangling cache variable for type metadata for ClassificationMetrics<Int>;
      }
      uint64_t v49 = __swift_instantiateConcreteTypeFromMangledName(v48);
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v49 - 8) + 16))(v37, v38, v49);
      swift_storeEnumTagMultiPayload(v37, v45, v47);
      uint64_t v27 = a2;
    }
    swift_storeEnumTagMultiPayload(v37, v68, EnumCaseMultiPayload);
    uint64_t v50 = *(int *)(v70 + 36);
    uint64_t v51 = (char *)(v69 + v50);
    int v52 = (char *)(v50 + v27);
    outlined destroy of MLActivityClassifier.ModelParameters(v69 + v50, type metadata accessor for MLClassifierMetrics.Contents);
    unsigned int v53 = swift_getEnumCaseMultiPayload(v52, v68);
    if (v53 == 2)
    {
      uint64_t v59 = *(void *)v52;
      swift_errorRetain(*(void *)v52);
      *(void *)uint64_t v51 = v59;
    }
    else if (v53 == 1)
    {
      *(void *)uint64_t v51 = *(void *)v52;
      uint64_t v73 = type metadata accessor for MLClassifierMetrics.Precomputed(0);
      uint64_t v54 = v52;
      uint64_t v55 = *(int *)(v73 + 20);
      uint64_t v71 = &v51[v55];
      uint64_t v56 = type metadata accessor for DataFrame(0);
      uint64_t v57 = &v54[v55];
      uint64_t v58 = *(void (**)(char *, char *, uint64_t))(*(void *)(v56 - 8) + 16);
      v58(v71, v57, v56);
      v58(&v51[*(int *)(v73 + 24)], &v54[*(int *)(v73 + 24)], v56);
    }
    else
    {
      uint64_t v60 = v52;
      uint64_t v61 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Either<ClassificationMetrics<String>, ClassificationMetrics<Int>>);
      int v62 = swift_getEnumCaseMultiPayload(v60, v61);
      BOOL v63 = v62 == 1;
      uint64_t v64 = &demangling cache variable for type metadata for ClassificationMetrics<String>;
      if (v62 == 1) {
        uint64_t v64 = &demangling cache variable for type metadata for ClassificationMetrics<Int>;
      }
      uint64_t v65 = __swift_instantiateConcreteTypeFromMangledName(v64);
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v65 - 8) + 16))(v51, v60, v65);
      swift_storeEnumTagMultiPayload(v51, v61, v63);
    }
    swift_storeEnumTagMultiPayload(v51, v68, v53);
    return v69;
  }
  return result;
}

void *initializeWithTake for MLTextClassifier(void *a1, void *a2, uint64_t a3)
{
  uint64_t v3 = a3;
  *a1 = *a2;
  a1[1] = a2[1];
  a1[2] = a2[2];
  uint64_t v5 = *(int *)(a3 + 28);
  uint64_t v6 = (char *)a1 + v5;
  uint64_t v7 = (char *)a2 + v5;
  uint64_t v8 = type metadata accessor for MLTextClassifier.ModelAlgorithmType(0);
  uint64_t v56 = v3;
  if (swift_getEnumCaseMultiPayload(v7, v8) == 2)
  {
    uint64_t v9 = type metadata accessor for URL(0);
    if (__swift_getEnumTagSinglePayload((uint64_t)v7, 4, v9))
    {
      uint64_t v10 = type metadata accessor for MLTextClassifier.FeatureExtractorType(0);
      memcpy(v6, v7, *(void *)(*(void *)(v10 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v9 - 8) + 32))(v6, v7, v9);
      __swift_storeEnumTagSinglePayload((uint64_t)v6, 0, 4, v9);
    }
    uint64_t v11 = *(int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (MLTextClassifier.FeatureExtractorType, revision: Int?))
                 + 48);
    v6[v11 + 8] = v7[v11 + 8];
    *(void *)&v6[v11] = *(void *)&v7[v11];
    swift_storeEnumTagMultiPayload(v6, v8, 2);
    uint64_t v3 = v56;
  }
  else
  {
    memcpy(v6, v7, *(void *)(*(void *)(v8 - 8) + 64));
  }
  uint64_t v12 = (int *)type metadata accessor for MLTextClassifier.ModelParameters(0);
  *(void *)&v6[v12[5]] = *(void *)&v7[v12[5]];
  uint64_t v13 = v12[6];
  long long v14 = *(_OWORD *)&v7[v13];
  *(_OWORD *)&v6[v13 + 16] = *(_OWORD *)&v7[v13 + 16];
  *(_OWORD *)&v6[v13] = v14;
  *(_OWORD *)&v6[v12[7]] = *(_OWORD *)&v7[v12[7]];
  *(_OWORD *)&v6[v12[8]] = *(_OWORD *)&v7[v12[8]];
  uint64_t v15 = v12[9];
  *(void *)&v6[v15] = *(void *)&v7[v15];
  v6[v15 + 8] = v7[v15 + 8];
  uint64_t v16 = *(int *)(v3 + 32);
  uint64_t v17 = a1;
  long long v18 = (char *)a1 + v16;
  uint64_t v19 = (char *)a2 + v16;
  uint64_t v55 = type metadata accessor for MLClassifierMetrics.Contents(0);
  int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload(v19, v55);
  if (EnumCaseMultiPayload == 1)
  {
    *(void *)long long v18 = *(void *)v19;
    uint64_t v59 = type metadata accessor for MLClassifierMetrics.Precomputed(0);
    uint64_t v30 = *(int *)(v59 + 20);
    unsigned int v53 = &v18[v30];
    uint64_t v31 = type metadata accessor for DataFrame(0);
    uint64_t v32 = &v19[v30];
    uint64_t v33 = *(void (**)(char *, char *, uint64_t))(*(void *)(v31 - 8) + 32);
    v33(v53, v32, v31);
    uint64_t v34 = v31;
    uint64_t v3 = v56;
    v33(&v18[*(int *)(v59 + 24)], &v19[*(int *)(v59 + 24)], v34);
    uint64_t v17 = a1;
    uint64_t v29 = 1;
    long long v26 = v18;
    uint64_t v27 = v55;
    uint64_t v28 = v55;
LABEL_13:
    swift_storeEnumTagMultiPayload(v26, v28, v29);
    goto LABEL_15;
  }
  if (!EnumCaseMultiPayload)
  {
    uint64_t v58 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Either<ClassificationMetrics<String>, ClassificationMetrics<Int>>);
    int v21 = swift_getEnumCaseMultiPayload(v19, v58);
    BOOL v22 = v21 == 1;
    uint64_t v23 = &demangling cache variable for type metadata for ClassificationMetrics<String>;
    if (v21 == 1) {
      uint64_t v23 = &demangling cache variable for type metadata for ClassificationMetrics<Int>;
    }
    uint64_t v24 = __swift_instantiateConcreteTypeFromMangledName(v23);
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v24 - 8) + 32))(v18, v19, v24);
    BOOL v25 = v22;
    uint64_t v3 = v56;
    swift_storeEnumTagMultiPayload(v18, v58, v25);
    long long v26 = v18;
    uint64_t v27 = v55;
    uint64_t v28 = v55;
    uint64_t v29 = 0;
    goto LABEL_13;
  }
  uint64_t v35 = v18;
  uint64_t v27 = v55;
  memcpy(v35, v19, *(void *)(*(void *)(v55 - 8) + 64));
LABEL_15:
  uint64_t v36 = *(int *)(v3 + 36);
  BOOL v37 = (char *)v17 + v36;
  BOOL v38 = (char *)a2 + v36;
  int v39 = swift_getEnumCaseMultiPayload(v38, v27);
  if (v39 == 1)
  {
    *(void *)BOOL v37 = *(void *)v38;
    uint64_t v57 = type metadata accessor for MLClassifierMetrics.Precomputed(0);
    uint64_t v48 = *(int *)(v57 + 20);
    uint64_t v60 = &v37[v48];
    uint64_t v49 = type metadata accessor for DataFrame(0);
    uint64_t v50 = *(void (**)(char *, char *, uint64_t))(*(void *)(v49 - 8) + 32);
    uint64_t v51 = &v38[v48];
    uint64_t v17 = a1;
    v50(v60, v51, v49);
    v50(&v37[*(int *)(v57 + 24)], &v38[*(int *)(v57 + 24)], v49);
    uint64_t v47 = 1;
    uint64_t v45 = v37;
    uint64_t v46 = v55;
  }
  else
  {
    if (v39)
    {
      memcpy(v37, v38, *(void *)(*(void *)(v27 - 8) + 64));
      return v17;
    }
    uint64_t v40 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Either<ClassificationMetrics<String>, ClassificationMetrics<Int>>);
    int v41 = swift_getEnumCaseMultiPayload(v38, v40);
    BOOL v42 = v41 == 1;
    unsigned int v43 = &demangling cache variable for type metadata for ClassificationMetrics<String>;
    if (v41 == 1) {
      unsigned int v43 = &demangling cache variable for type metadata for ClassificationMetrics<Int>;
    }
    uint64_t v44 = __swift_instantiateConcreteTypeFromMangledName(v43);
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v44 - 8) + 32))(v37, v38, v44);
    swift_storeEnumTagMultiPayload(v37, v40, v42);
    uint64_t v45 = v37;
    uint64_t v46 = v55;
    uint64_t v47 = 0;
  }
  swift_storeEnumTagMultiPayload(v45, v46, v47);
  return v17;
}

void *assignWithTake for MLTextClassifier(void *a1, void *a2, uint64_t a3)
{
  uint64_t v5 = (void *)*a1;
  *a1 = *a2;

  uint64_t v6 = a1[1];
  a1[1] = a2[1];
  swift_bridgeObjectRelease(v6);
  uint64_t v7 = (void *)a1[2];
  a1[2] = a2[2];

  uint64_t v68 = a3;
  uint64_t v8 = *(int *)(a3 + 28);
  uint64_t v9 = (char *)a1 + v8;
  uint64_t v10 = (char *)a2 + v8;
  uint64_t v65 = a1;
  if (a1 != a2)
  {
    outlined destroy of MLActivityClassifier.ModelParameters((uint64_t)v9, type metadata accessor for MLTextClassifier.ModelAlgorithmType);
    uint64_t v11 = type metadata accessor for MLTextClassifier.ModelAlgorithmType(0);
    if (swift_getEnumCaseMultiPayload(v10, v11) == 2)
    {
      uint64_t v12 = type metadata accessor for URL(0);
      if (__swift_getEnumTagSinglePayload((uint64_t)v10, 4, v12))
      {
        uint64_t v13 = type metadata accessor for MLTextClassifier.FeatureExtractorType(0);
        memcpy(v9, v10, *(void *)(*(void *)(v13 - 8) + 64));
      }
      else
      {
        (*(void (**)(char *, char *, uint64_t))(*(void *)(v12 - 8) + 32))(v9, v10, v12);
        __swift_storeEnumTagSinglePayload((uint64_t)v9, 0, 4, v12);
      }
      uint64_t v14 = *(int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (MLTextClassifier.FeatureExtractorType, revision: Int?))
                   + 48);
      v9[v14 + 8] = v10[v14 + 8];
      *(void *)&v9[v14] = *(void *)&v10[v14];
      swift_storeEnumTagMultiPayload(v9, v11, 2);
    }
    else
    {
      memcpy(v9, v10, *(void *)(*(void *)(v11 - 8) + 64));
    }
  }
  uint64_t v15 = (int *)type metadata accessor for MLTextClassifier.ModelParameters(0);
  uint64_t v16 = v15[5];
  uint64_t v17 = *(void **)&v9[v16];
  *(void *)&v9[v16] = *(void *)&v10[v16];

  uint64_t v18 = v15[6];
  uint64_t v19 = &v9[v18];
  uint64_t v20 = &v10[v18];
  if (*(void *)&v9[v18 + 24]) {
    __swift_destroy_boxed_opaque_existential_1Tm(&v9[v18]);
  }
  long long v21 = *(_OWORD *)v20;
  *((_OWORD *)v19 + 1) = *((_OWORD *)v20 + 1);
  *(_OWORD *)uint64_t v19 = v21;
  uint64_t v22 = v15[7];
  *(void *)&v9[v22] = *(void *)&v10[v22];
  uint64_t v23 = *(void *)&v9[v22 + 8];
  *(void *)&v9[v22 + 8] = *(void *)&v10[v22 + 8];
  swift_bridgeObjectRelease(v23);
  uint64_t v24 = v15[8];
  *(void *)&v9[v24] = *(void *)&v10[v24];
  uint64_t v25 = *(void *)&v9[v24 + 8];
  *(void *)&v9[v24 + 8] = *(void *)&v10[v24 + 8];
  swift_bridgeObjectRelease(v25);
  uint64_t v26 = v15[9];
  v9[v26 + 8] = v10[v26 + 8];
  *(void *)&v9[v26] = *(void *)&v10[v26];
  uint64_t v27 = v65;
  uint64_t v28 = a2;
  if (v65 == a2) {
    return v27;
  }
  uint64_t v29 = *(int *)(v68 + 32);
  uint64_t v30 = (char *)v65 + v29;
  uint64_t v31 = (char *)a2 + v29;
  outlined destroy of MLActivityClassifier.ModelParameters((uint64_t)v30, type metadata accessor for MLClassifierMetrics.Contents);
  uint64_t v32 = type metadata accessor for MLClassifierMetrics.Contents(0);
  int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload(v31, v32);
  uint64_t v72 = v32;
  if (EnumCaseMultiPayload == 1)
  {
    *(void *)uint64_t v30 = *(void *)v31;
    uint64_t v67 = type metadata accessor for MLClassifierMetrics.Precomputed(0);
    uint64_t v42 = *(int *)(v67 + 20);
    uint64_t v64 = &v30[v42];
    uint64_t v43 = type metadata accessor for DataFrame(0);
    uint64_t v44 = *(void (**)(char *, char *, uint64_t))(*(void *)(v43 - 8) + 32);
    uint64_t v45 = &v31[v42];
    uint64_t v27 = v65;
    v44(v64, v45, v43);
    uint64_t v46 = v43;
    uint64_t v32 = v72;
    v44(&v30[*(int *)(v67 + 24)], &v31[*(int *)(v67 + 24)], v46);
    uint64_t v28 = a2;
    uint64_t v41 = 1;
    int v39 = v30;
    uint64_t v40 = v72;
  }
  else
  {
    if (EnumCaseMultiPayload)
    {
      memcpy(v30, v31, *(void *)(*(void *)(v32 - 8) + 64));
      goto LABEL_19;
    }
    uint64_t v66 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Either<ClassificationMetrics<String>, ClassificationMetrics<Int>>);
    int v34 = swift_getEnumCaseMultiPayload(v31, v66);
    BOOL v35 = v34 == 1;
    uint64_t v36 = &demangling cache variable for type metadata for ClassificationMetrics<String>;
    if (v34 == 1) {
      uint64_t v36 = &demangling cache variable for type metadata for ClassificationMetrics<Int>;
    }
    uint64_t v37 = __swift_instantiateConcreteTypeFromMangledName(v36);
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v37 - 8) + 32))(v30, v31, v37);
    BOOL v38 = v35;
    uint64_t v32 = v72;
    swift_storeEnumTagMultiPayload(v30, v66, v38);
    int v39 = v30;
    uint64_t v40 = v72;
    uint64_t v41 = 0;
  }
  swift_storeEnumTagMultiPayload(v39, v40, v41);
LABEL_19:
  uint64_t v47 = *(int *)(v68 + 36);
  uint64_t v48 = (char *)v27 + v47;
  uint64_t v49 = (char *)v28 + v47;
  outlined destroy of MLActivityClassifier.ModelParameters((uint64_t)v27 + v47, type metadata accessor for MLClassifierMetrics.Contents);
  int v50 = swift_getEnumCaseMultiPayload(v49, v32);
  if (v50 == 1)
  {
    *(void *)uint64_t v48 = *(void *)v49;
    uint64_t v69 = type metadata accessor for MLClassifierMetrics.Precomputed(0);
    uint64_t v59 = *(int *)(v69 + 20);
    uint64_t v71 = &v48[v59];
    uint64_t v60 = type metadata accessor for DataFrame(0);
    uint64_t v61 = *(void (**)(char *, char *, uint64_t))(*(void *)(v60 - 8) + 32);
    int v62 = &v49[v59];
    uint64_t v27 = v65;
    v61(v71, v62, v60);
    v61(&v48[*(int *)(v69 + 24)], &v49[*(int *)(v69 + 24)], v60);
    uint64_t v58 = 1;
    uint64_t v56 = v48;
    uint64_t v57 = v72;
  }
  else
  {
    if (v50)
    {
      memcpy(v48, v49, *(void *)(*(void *)(v32 - 8) + 64));
      return v27;
    }
    uint64_t v51 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Either<ClassificationMetrics<String>, ClassificationMetrics<Int>>);
    int v52 = swift_getEnumCaseMultiPayload(v49, v51);
    BOOL v53 = v52 == 1;
    uint64_t v54 = &demangling cache variable for type metadata for ClassificationMetrics<String>;
    if (v52 == 1) {
      uint64_t v54 = &demangling cache variable for type metadata for ClassificationMetrics<Int>;
    }
    uint64_t v55 = __swift_instantiateConcreteTypeFromMangledName(v54);
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v55 - 8) + 32))(v48, v49, v55);
    swift_storeEnumTagMultiPayload(v48, v51, v53);
    uint64_t v56 = v48;
    uint64_t v57 = v72;
    uint64_t v58 = 0;
  }
  swift_storeEnumTagMultiPayload(v56, v57, v58);
  return v27;
}

uint64_t getEnumTagSinglePayload for MLTextClassifier(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_2427F9);
}

uint64_t sub_2427F9(void *a1, unsigned int a2, uint64_t a3)
{
  if (a2 == 0x7FFFFFFF)
  {
    uint64_t result = 0;
    if ((*a1 & 0xFFFFFFFF00000001) == 0) {
      return (*a1 >> 1) + 1;
    }
  }
  else
  {
    uint64_t v5 = type metadata accessor for MLTextClassifier.ModelParameters(0);
    if (*(_DWORD *)(*(void *)(v5 - 8) + 84) == a2)
    {
      uint64_t v6 = *(int *)(a3 + 28);
    }
    else
    {
      uint64_t v5 = type metadata accessor for MLClassifierMetrics(0);
      uint64_t v6 = *(int *)(a3 + 32);
    }
    return __swift_getEnumTagSinglePayload((uint64_t)a1 + v6, a2, v5);
  }
  return result;
}

uint64_t storeEnumTagSinglePayload for MLTextClassifier(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_242887);
}

void sub_242887(void *a1, unsigned int a2, int a3, uint64_t a4)
{
  if (a3 == 0x7FFFFFFF)
  {
    *a1 = 2 * (a2 - 1);
  }
  else
  {
    uint64_t v6 = type metadata accessor for MLTextClassifier.ModelParameters(0);
    if (*(_DWORD *)(*(void *)(v6 - 8) + 84) == a3)
    {
      uint64_t v7 = *(int *)(a4 + 28);
    }
    else
    {
      uint64_t v6 = type metadata accessor for MLClassifierMetrics(0);
      uint64_t v7 = *(int *)(a4 + 32);
    }
    __swift_storeEnumTagSinglePayload((uint64_t)a1 + v7, a2, a2, v6);
  }
}

uint64_t type metadata completion function for MLTextClassifier(uint64_t a1)
{
  v4[0] = (char *)&value witness table for Builtin.UnknownObject + 64;
  v4[1] = (char *)&value witness table for Builtin.BridgeObject + 64;
  v4[2] = (char *)&value witness table for Builtin.UnknownObject + 64;
  uint64_t result = type metadata accessor for MLTextClassifier.ModelParameters(319);
  if (v2 <= 0x3F)
  {
    uint64_t v4[3] = *(void *)(result - 8) + 64;
    uint64_t result = type metadata accessor for MLClassifierMetrics.Contents(319);
    if (v3 <= 0x3F)
    {
      uint64_t v5 = *(void *)(result - 8) + 64;
      uint64_t v6 = v5;
      swift_initStructMetadata(a1, 256, 6, v4, a1 + 16);
      return 0;
    }
  }
  return result;
}

uint64_t block_copy_helper_6(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  return swift_retain(v2);
}

uint64_t block_destroy_helper_6(uint64_t a1)
{
  return swift_release(*(void *)(a1 + 40));
}

uint64_t lazy protocol witness table accessor for type CFErrorRef and conformance CFErrorRef()
{
  uint64_t result = lazy protocol witness table cache variable for type CFErrorRef and conformance CFErrorRef;
  if (!lazy protocol witness table cache variable for type CFErrorRef and conformance CFErrorRef)
  {
    uint64_t v1 = type metadata accessor for CFErrorRef(255);
    uint64_t result = swift_getWitnessTable(&protocol conformance descriptor for CFErrorRef, v1);
    lazy protocol witness table cache variable for type CFErrorRef and conformance CFErrorRef = result;
  }
  return result;
}

uint64_t static MLSoundClassifier.createTablePrinter(hasValidation:)(int a1)
{
  int v18 = a1;
  uint64_t v2 = v1;
  int64_t v3 = *(void *)(*(void *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for MetricsKey?)
                             - 8)
                 + 64);
  uint64_t v4 = alloca(v3);
  uint64_t v5 = alloca(v3);
  uint64_t v17 = &v16;
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, MetricsKey)>);
  uint64_t v7 = *(void *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (String, MetricsKey))
                 - 8);
  uint64_t v8 = *(unsigned __int8 *)(v7 + 80);
  uint64_t v9 = ((int)v8 + 32) & ~*(unsigned __int8 *)(v7 + 80);
  uint64_t v10 = swift_allocObject(v6, v9 + *(void *)(v7 + 72), v8 | 7);
  *(void *)(v10 + 16) = 1;
  *(void *)(v10 + 24) = 2;
  *(void *)(v10 + v9) = 0xD000000000000011;
  *(void *)(v10 + v9 + 8) = "eature extractor should be " + 0x8000000000000000;
  static MetricsKey.trainingAccuracy.getter();
  uint64_t v11 = type metadata accessor for MetricsKey(0);
  uint64_t v12 = Dictionary.init(dictionaryLiteral:)(v10, &type metadata for String, v11, &protocol witness table for String);
  uint64_t v16 = v12;
  if (v18)
  {
    uint64_t v13 = (uint64_t)v17;
    static MetricsKey.validationAccuracy.getter();
    __swift_storeEnumTagSinglePayload(v13, 0, 1, v11);
    specialized Dictionary.subscript.setter(v13, 0xD000000000000013, (uint64_t)("Swift/Array.swift" + 0x8000000000000000));
    uint64_t v12 = v16;
  }
  uint64_t v14 = type metadata accessor for TrainingTablePrinter(0);
  *(void *)(v2 + *(int *)(v14 + 24)) = v12;
  type metadata accessor for OS_os_log(0, &lazy cache variable for type metadata for OS_os_log, OS_os_log_ptr);
  *(void *)(v2 + *(int *)(v14 + 20)) = OS_os_log.init(subsystem:category:)(0xD000000000000022, "n" + 0x8000000000000000, 0x72705F656C626174, 0xED00007265746E69);
  return Date.init()(0xD000000000000022);
}

uint64_t static MLSoundClassifier.validateFeatureExtractionParameters(featureExtractionParameters:parameters:)(uint64_t a1, uint64_t a2)
{
  double v24 = *(double *)a1;
  double v25 = *(double *)(a1 + 8);
  char v2 = *(unsigned char *)(a1 + 16);
  uint64_t v26 = *(void *)(a1 + 24);
  char v27 = *(unsigned char *)(a1 + 32);
  uint64_t v3 = type metadata accessor for MLSoundClassifier.ModelParameters(0);
  if (v24 == *(double *)(a2 + *(int *)(v3 + 24)))
  {
    if (!_stdlib_isOSVersionAtLeastOrVariantVersionAtLeast(_:_:_:_:_:_:)(0xCuLL, 0, 0, 0xFuLL, 0, 0)) {
      goto LABEL_6;
    }
    if (v2) {
      double v25 = 0.975;
    }
    if (v25 == MLSoundClassifier.ModelParameters.featureExtractionTimeWindowSize.getter())
    {
LABEL_6:
      outlined init with copy of Either<LogisticRegressionClassifier<Float, String>, FullyConnectedNetworkClassifier<Float, String>>(*(int *)(v3 + 28) + a2, (uint64_t)v19, &demangling cache variable for type metadata for Any?);
      if (v20)
      {
        if (swift_dynamicCast(&v21, v19, (char *)&type metadata for Any + 8, &type metadata for MLSoundClassifier.ModelParameters.ModelAlgorithmType, 6))
        {
          uint64_t v4 = v21;
          char v5 = v22;
          char v6 = v23;
          goto LABEL_12;
        }
      }
      else
      {
        outlined destroy of Either<LogisticRegressionClassifier<Float, String>, FullyConnectedNetworkClassifier<Float, String>>((uint64_t)v19, &demangling cache variable for type metadata for Any?);
      }
      char v5 = 1;
      uint64_t v4 = 1;
      char v6 = 0;
LABEL_12:
      if (v27)
      {
        if (((v26 == v4) & v5) != 0) {
          return swift_bridgeObjectRelease(v6);
        }
      }
      else if (!((v26 != v4) | v5 & 1))
      {
        return swift_bridgeObjectRelease(v6);
      }
      uint64_t v13 = lazy protocol witness table accessor for type MLCreateError and conformance MLCreateError();
      swift_allocError(&type metadata for MLCreateError, v13, 0, 0);
      *(void *)uint64_t v14 = 0xD000000000000051;
      *(void *)(v14 + 8) = "del parameters: overlapFactor" + 0x8000000000000000;
      *(_OWORD *)(v14 + 16) = 0;
      *(_OWORD *)(v14 + 32) = 0;
      *(unsigned char *)(v14 + 48) = 0;
      swift_willThrow(&type metadata for MLCreateError, v13, v14, v15, v16, v17);
      return swift_bridgeObjectRelease(v6);
    }
    uint64_t v7 = lazy protocol witness table accessor for type MLCreateError and conformance MLCreateError();
    swift_allocError(&type metadata for MLCreateError, v7, 0, 0);
    *(void *)uint64_t v8 = 0xD00000000000005FLL;
    uint64_t v12 = "feature extractor";
  }
  else
  {
    uint64_t v7 = lazy protocol witness table accessor for type MLCreateError and conformance MLCreateError();
    swift_allocError(&type metadata for MLCreateError, v7, 0, 0);
    *(void *)uint64_t v8 = 0xD00000000000004DLL;
    uint64_t v12 = " feature values.";
  }
  *(void *)(v8 + 8) = (unint64_t)v12 | 0x8000000000000000;
  *(_OWORD *)(v8 + 16) = 0;
  *(_OWORD *)(v8 + 32) = 0;
  *(unsigned char *)(v8 + 48) = 0;
  return swift_willThrow(&type metadata for MLCreateError, v7, v8, v9, v10, v11);
}

void static MLSoundClassifier.convertFeatures(_:)(uint64_t a1)
{
  uint64_t v92 = v2;
  uint64_t v89 = v1;
  uint64_t v86 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Column<[Any?]>);
  uint64_t v85 = *(void *)(v86 - 8);
  int64_t v3 = *(void *)(v85 + 64);
  uint64_t v4 = alloca(v3);
  char v5 = alloca(v3);
  uint64_t v87 = &v65;
  uint64_t v83 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Column<[Double?]>);
  uint64_t v82 = *(void *)(v83 - 8);
  int64_t v6 = *(void *)(v82 + 64);
  uint64_t v7 = alloca(v6);
  uint64_t v8 = alloca(v6);
  uint64_t v84 = &v65;
  uint64_t v80 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Column<[Float?]>);
  uint64_t v79 = *(void *)(v80 - 8);
  int64_t v9 = *(void *)(v79 + 64);
  uint64_t v10 = alloca(v9);
  uint64_t v11 = alloca(v9);
  uint64_t v81 = &v65;
  uint64_t v77 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Column<[Any]>);
  uint64_t v76 = *(void *)(v77 - 8);
  int64_t v12 = *(void *)(v76 + 64);
  uint64_t v13 = alloca(v12);
  uint64_t v14 = alloca(v12);
  uint64_t v78 = &v65;
  uint64_t v74 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Column<[Double]>);
  uint64_t v73 = *(void *)(v74 - 8);
  int64_t v15 = *(void *)(v73 + 64);
  uint64_t v16 = alloca(v15);
  uint64_t v17 = alloca(v15);
  uint64_t v75 = &v65;
  uint64_t v71 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Column<[Float]>);
  uint64_t v70 = *(void *)(v71 - 8);
  int64_t v18 = *(void *)(v70 + 64);
  uint64_t v19 = alloca(v18);
  uint64_t v20 = alloca(v18);
  uint64_t v72 = &v65;
  uint64_t v68 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Column<MLMultiArray>);
  uint64_t v67 = *(void *)(v68 - 8);
  int64_t v21 = *(void *)(v67 + 64);
  char v22 = alloca(v21);
  uint64_t v23 = alloca(v21);
  uint64_t v69 = &v65;
  uint64_t v66 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Column<MLShapedArray<Double>>);
  uint64_t v24 = *(void *)(v66 - 8);
  int64_t v25 = *(void *)(v24 + 64);
  uint64_t v26 = alloca(v25);
  char v27 = alloca(v25);
  uint64_t v65 = (uint64_t)&v65;
  uint64_t v28 = AnyColumn.wrappedElementType.getter();
  uint64_t v29 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for MLShapedArray<Float>);
  uint64_t v90 = v28;
  if (swift_dynamicCastMetatype(v28, v29))
  {
    AnyColumn.assumingType<A>(_:)(v29, v29);
    return;
  }
  uint64_t v30 = v65;
  uint64_t v91 = v29;
  uint64_t v88 = a1;
  uint64_t v31 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for MLShapedArray<Double>);
  uint64_t v32 = v90;
  if (swift_dynamicCastMetatype(v90, v31))
  {
    double v33 = AnyColumn.assumingType<A>(_:)(v31, v31);
    uint64_t v34 = v66;
    Column.mapNonNil<A>(_:)(closure #1 in static MLSoundClassifier.convertFeatures(_:), 0, v66, v91);
    (*(void (**)(uint64_t, uint64_t, double))(v24 + 8))(v30, v34, v33);
    return;
  }
  uint64_t v35 = type metadata accessor for OS_os_log(0, &lazy cache variable for type metadata for MLMultiArray, MLMultiArray_ptr);
  if (swift_dynamicCastMetatype(v32, v35))
  {
    uint64_t v36 = v69;
    double v37 = AnyColumn.assumingType<A>(_:)(v35, v35);
    uint64_t v38 = v68;
    Column.mapNonNil<A>(_:)(closure #2 in static MLSoundClassifier.convertFeatures(_:), 0, v68, v91);
    int v39 = v36;
    uint64_t v40 = v38;
    uint64_t v41 = v67;
LABEL_19:
    (*(void (**)(uint64_t *, uint64_t, double))(v41 + 8))(v39, v40, v37);
    return;
  }
  uint64_t v42 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [Float]);
  if (swift_dynamicCastMetatype(v32, v42))
  {
    uint64_t v43 = v72;
    double v37 = AnyColumn.assumingType<A>(_:)(v42, v42);
    uint64_t v44 = v71;
    Column.mapNonNil<A>(_:)(closure #3 in static MLSoundClassifier.convertFeatures(_:), 0, v71, v91);
    int v39 = v43;
    uint64_t v40 = v44;
    uint64_t v41 = v70;
    goto LABEL_19;
  }
  uint64_t v45 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [Double]);
  if (swift_dynamicCastMetatype(v90, v45))
  {
    uint64_t v46 = v75;
    double v37 = AnyColumn.assumingType<A>(_:)(v45, v45);
    uint64_t v47 = v74;
    Column.mapNonNil<A>(_:)(closure #4 in static MLSoundClassifier.convertFeatures(_:), 0, v74, v91);
    int v39 = v46;
    uint64_t v40 = v47;
    uint64_t v41 = v73;
    goto LABEL_19;
  }
  uint64_t v48 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [Any]);
  if (swift_dynamicCastMetatype(v90, v48))
  {
    uint64_t v49 = v78;
    double v37 = AnyColumn.assumingType<A>(_:)(v48, v48);
    uint64_t v50 = v77;
    Column.mapNonNil<A>(_:)(partial apply for closure #5 in static MLSoundClassifier.convertFeatures(_:), 0, v77, v91);
    int v39 = v49;
    uint64_t v40 = v50;
    uint64_t v41 = v76;
    goto LABEL_19;
  }
  uint64_t v51 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [Float?]);
  if (swift_dynamicCastMetatype(v90, v51))
  {
    int v52 = v81;
    double v37 = AnyColumn.assumingType<A>(_:)(v51, v51);
    uint64_t v53 = v80;
    Column.mapNonNil<A>(_:)(closure #6 in static MLSoundClassifier.convertFeatures(_:), 0, v80, v91);
    int v39 = v52;
    uint64_t v40 = v53;
    uint64_t v41 = v79;
    goto LABEL_19;
  }
  uint64_t v54 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [Double?]);
  if (swift_dynamicCastMetatype(v90, v54))
  {
    uint64_t v55 = v84;
    double v37 = AnyColumn.assumingType<A>(_:)(v54, v54);
    uint64_t v56 = v83;
    Column.mapNonNil<A>(_:)(closure #7 in static MLSoundClassifier.convertFeatures(_:), 0, v83, v91);
    int v39 = v55;
    uint64_t v40 = v56;
    uint64_t v41 = v82;
    goto LABEL_19;
  }
  uint64_t v57 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [Any?]);
  if (swift_dynamicCastMetatype(v90, v57))
  {
    uint64_t v58 = v87;
    double v37 = AnyColumn.assumingType<A>(_:)(v57, v57);
    uint64_t v59 = v86;
    Column.mapNonNil<A>(_:)(partial apply for closure #8 in static MLSoundClassifier.convertFeatures(_:), 0, v86, v91);
    int v39 = v58;
    uint64_t v40 = v59;
    uint64_t v41 = v85;
    goto LABEL_19;
  }
  uint64_t v60 = lazy protocol witness table accessor for type MLCreateError and conformance MLCreateError();
  swift_allocError(&type metadata for MLCreateError, v60, 0, 0);
  *(void *)uint64_t v61 = 0xD000000000000040;
  *(void *)(v61 + 8) = "Classifier.swift" + 0x8000000000000000;
  *(_OWORD *)(v61 + 16) = 0;
  *(_OWORD *)(v61 + 32) = 0;
  *(unsigned char *)(v61 + 48) = 0;
  swift_willThrow(&type metadata for MLCreateError, v60, v61, v62, v63, v64);
}

uint64_t static MLSoundClassifier._defaultSessionParameters.getter()
{
  uint64_t v1 = v0;
  if (one-time initialization token for _defaultSessionParameters != -1) {
    swift_once(&one-time initialization token for _defaultSessionParameters, one-time initialization function for _defaultSessionParameters);
  }
  uint64_t v2 = type metadata accessor for MLTrainingSessionParameters(0);
  uint64_t v3 = __swift_project_value_buffer(v2, (uint64_t)static MLSoundClassifier._defaultSessionParameters);
  return outlined init with copy of MLTrainingSessionParameters(v3, v1, type metadata accessor for MLTrainingSessionParameters);
}

id MLSoundClassifier.model.getter()
{
  uint64_t v1 = type metadata accessor for MLSoundClassifier(0);
  return *(id *)(v0 + *(int *)(v1 + 24));
}

uint64_t type metadata accessor for MLSoundClassifier(uint64_t a1)
{
  uint64_t result = type metadata singleton initialization cache for MLSoundClassifier;
  if (!type metadata singleton initialization cache for MLSoundClassifier) {
    return swift_getSingletonMetadata(a1, &nominal type descriptor for MLSoundClassifier);
  }
  return result;
}

void key path setter for MLSoundClassifier.model : MLSoundClassifier(id *a1)
{
  id v1 = *a1;
  MLSoundClassifier.model.setter((uint64_t)v1);
}

void MLSoundClassifier.model.setter(uint64_t a1)
{
  uint64_t v2 = *(int *)(type metadata accessor for MLSoundClassifier(0) + 24);

  *(void *)(v1 + v2) = a1;
}

void (*MLSoundClassifier.model.modify(uint64_t a1))(uint64_t a1, char a2)
{
  *(void *)(a1 + 8) = v1;
  uint64_t v3 = *(int *)(type metadata accessor for MLSoundClassifier(0) + 24);
  *(_DWORD *)(a1 + 16) = v3;
  uint64_t v4 = *(void **)(v1 + v3);
  *(void *)a1 = v4;
  v4;
  return MLActivityClassifier.model.modify;
}

uint64_t MLSoundClassifier.modelParameters.getter()
{
  uint64_t v2 = v0;
  uint64_t v3 = type metadata accessor for MLSoundClassifier(0);
  return outlined init with copy of MLTrainingSessionParameters(v1 + *(int *)(v3 + 28), v2, type metadata accessor for MLSoundClassifier.ModelParameters);
}

uint64_t MLSoundClassifier.trainingMetrics.getter()
{
  uint64_t v2 = v0;
  uint64_t v3 = type metadata accessor for MLSoundClassifier(0);
  return outlined init with copy of MLTrainingSessionParameters(v1 + *(int *)(v3 + 32), v2, type metadata accessor for MLClassifierMetrics);
}

uint64_t MLSoundClassifier.validationMetrics.getter()
{
  uint64_t v2 = v0;
  uint64_t v3 = type metadata accessor for MLSoundClassifier(0);
  return outlined init with copy of MLTrainingSessionParameters(v1 + *(int *)(v3 + 36), v2, type metadata accessor for MLClassifierMetrics);
}

uint64_t MLSoundClassifier.init(trainingData:parameters:)(uint64_t a1, uint64_t a2)
{
  uint64_t v54 = v3;
  uint64_t v53 = a1;
  uint64_t v5 = v2;
  uint64_t v50 = *(void *)(type metadata accessor for MLSoundClassifier.ModelParameters(0) - 8);
  int64_t v49 = *(void *)(v50 + 64);
  int64_t v6 = alloca(v49);
  uint64_t v7 = alloca(v49);
  int v52 = &v45;
  uint64_t v8 = type metadata accessor for MLSoundClassifier(0);
  int64_t v9 = *(void *)(*(void *)(v8 - 8) + 64);
  uint64_t v10 = alloca(v9);
  uint64_t v11 = alloca(v9);
  uint64_t v51 = &v45;
  int64_t v12 = alloca(v9);
  uint64_t v13 = alloca(v9);
  uint64_t v56 = &v45;
  uint64_t v14 = type metadata accessor for TrainingTablePrinter(0);
  __swift_storeEnumTagSinglePayload(v5, 1, 1, v14);
  uint64_t v48 = v5 + *(int *)(v8 + 32);
  MLClassifierMetrics.init()();
  uint64_t v15 = *(int *)(v8 + 36);
  uint64_t v16 = lazy protocol witness table accessor for type MLCreateError and conformance MLCreateError();
  uint64_t v17 = swift_allocError(&type metadata for MLCreateError, v16, 0, 0);
  *(void *)uint64_t v18 = 0xD0000000000000C0;
  *(void *)(v18 + 8) = "essor\n\nParameters\n" + 0x8000000000000000;
  *(_OWORD *)(v18 + 16) = 0;
  *(_OWORD *)(v18 + 32) = 0;
  *(unsigned char *)(v18 + 48) = 0;
  uint64_t v55 = v5;
  *(void *)(v5 + v15) = v17;
  uint64_t v19 = type metadata accessor for MLClassifierMetrics.Contents(0);
  uint64_t v47 = v5 + v15;
  swift_storeEnumTagMultiPayload(v5 + v15, v19, 2);
  MLSoundClassifier.ModelParameters.validate()();
  if (v20)
  {
    uint64_t v21 = a2;
LABEL_4:
    uint64_t v26 = v55;
LABEL_5:
    outlined destroy of MLActivityClassifier.ModelParameters(v21, type metadata accessor for MLSoundClassifier.ModelParameters);
    outlined destroy of MLActivityClassifier.ModelParameters(v53, type metadata accessor for MLSoundClassifier.DataSource);
    outlined destroy of Either<LogisticRegressionClassifier<Float, String>, FullyConnectedNetworkClassifier<Float, String>>(v26, &demangling cache variable for type metadata for TrainingTablePrinter?);
    outlined destroy of MLActivityClassifier.ModelParameters(v48, type metadata accessor for MLClassifierMetrics);
    return outlined destroy of MLActivityClassifier.ModelParameters(v47, type metadata accessor for MLClassifierMetrics);
  }
  uint64_t v21 = a2;
  MLSoundClassifier.ModelParameters.ValidationData.validate(modelParameters:)(a2);
  *(Swift::OpaquePointer_optional *)&long long v22 = MLSoundClassifier.DataSource.annotatedFeatures()();
  if (v25) {
    goto LABEL_4;
  }
  char v28 = v22;
  if ((void)v22)
  {
    uint64_t v29 = v21;
    unsigned long long v30 = (unsigned __int128)MLSoundClassifier.ModelParameters.ValidationData.splitFeatures(trainingData:)((Swift::OpaquePointer)v22);
    if (v31)
    {
      swift_bridgeObjectRelease(v28);
      goto LABEL_4;
    }
    uint64_t v54 = (void *)*((void *)&v30 + 1);
    uint64_t v51 = (uint64_t *)v30;
    swift_bridgeObjectRelease(v28);
    outlined init with copy of MLTrainingSessionParameters(v21, (uint64_t)v52, type metadata accessor for MLSoundClassifier.ModelParameters);
    uint64_t v42 = *(unsigned __int8 *)(v50 + 80);
    uint64_t v43 = ~*(unsigned __int8 *)(v50 + 80) & (v42 + 32);
    uint64_t v44 = swift_allocObject(&unk_39BE80, v43 + v49, v42 | 7);
    *(void *)(v44 + 16) = v51;
    *(void *)(v44 + 24) = v54;
    outlined init with take of MLClassifierMetrics((uint64_t)v52, v44 + v43, type metadata accessor for MLSoundClassifier.ModelParameters);
    specialized blockAwait<A>(_:)((uint64_t)&async function pointer to partial apply for closure #1 in MLSoundClassifier.init(trainingData:parameters:), v44);
    swift_release();
    outlined destroy of MLActivityClassifier.ModelParameters(v29, type metadata accessor for MLSoundClassifier.ModelParameters);
    outlined destroy of MLActivityClassifier.ModelParameters(v53, type metadata accessor for MLSoundClassifier.DataSource);
    uint64_t v26 = v55;
  }
  else
  {
    uint64_t v32 = MLSoundClassifier.DataSource.labeledSounds()(v23, v24, *((void *)&v22 + 1));
    uint64_t v26 = v55;
    char v33 = v32;
    uint64_t v34 = specialized Sequence.flatMap<A>(_:)(v32);
    uint64_t v54 = v34;
    uint64_t v56 = 0;
    swift_bridgeObjectRelease(v33);
    unsigned long long v35 = (unsigned __int128)MLSoundClassifier.ModelParameters.ValidationData.splitFiles(trainingData:)((Swift::OpaquePointer)v34);
    uint64_t v56 = (uint64_t *)*((void *)&v35 + 1);
    swift_bridgeObjectRelease((_BYTE)v54);
    if (v36) {
      goto LABEL_5;
    }
    uint64_t v46 = v21;
    outlined init with copy of MLTrainingSessionParameters(v21, (uint64_t)v52, type metadata accessor for MLSoundClassifier.ModelParameters);
    uint64_t v37 = *(unsigned __int8 *)(v50 + 80);
    uint64_t v38 = ~*(unsigned __int8 *)(v50 + 80) & (v37 + 32);
    uint64_t v39 = swift_allocObject(&unk_39BE58, v38 + v49, v37 | 7);
    *(void *)(v39 + 16) = v35;
    *(void *)(v39 + 24) = v56;
    uint64_t v40 = v39;
    outlined init with take of MLClassifierMetrics((uint64_t)v52, v39 + v38, type metadata accessor for MLSoundClassifier.ModelParameters);
    uint64_t v41 = (uint64_t)v51;
    specialized blockAwait<A>(_:)((uint64_t)&async function pointer to partial apply for closure #2 in MLSoundClassifier.init(trainingData:parameters:), v40);
    swift_release();
    outlined destroy of MLActivityClassifier.ModelParameters(v46, type metadata accessor for MLSoundClassifier.ModelParameters);
    outlined destroy of MLActivityClassifier.ModelParameters(v53, type metadata accessor for MLSoundClassifier.DataSource);
    uint64_t v56 = (uint64_t *)v41;
  }
  outlined destroy of Either<LogisticRegressionClassifier<Float, String>, FullyConnectedNetworkClassifier<Float, String>>(v26, &demangling cache variable for type metadata for TrainingTablePrinter?);
  outlined destroy of MLActivityClassifier.ModelParameters(v48, type metadata accessor for MLClassifierMetrics);
  outlined destroy of MLActivityClassifier.ModelParameters(v47, type metadata accessor for MLClassifierMetrics);
  return outlined init with take of MLClassifierMetrics((uint64_t)v56, v26, type metadata accessor for MLSoundClassifier);
}

{
  uint64_t v2;
  uint64_t v3;
  int64_t v5;
  void *v6;
  void *v7;
  uint64_t v8;
  int64_t v9;
  void *v10;
  void *v11;
  void v13[6];

  v13[0] = v3;
  v13[1] = v2;
  uint64_t v5 = *(void *)(*(void *)(type metadata accessor for MLSoundClassifier.ModelParameters(0) - 8) + 64);
  int64_t v6 = alloca(v5);
  uint64_t v7 = alloca(v5);
  uint64_t v8 = type metadata accessor for MLSoundClassifier.DataSource(0);
  int64_t v9 = *(void *)(*(void *)(v8 - 8) + 64);
  uint64_t v10 = alloca(v9);
  uint64_t v11 = alloca(v9);
  v13[0] = a1;
  swift_storeEnumTagMultiPayload(v13, v8, 2);
  outlined init with copy of MLTrainingSessionParameters(a2, (uint64_t)v13, type metadata accessor for MLSoundClassifier.ModelParameters);
  MLSoundClassifier.init(trainingData:parameters:)((uint64_t)v13, (uint64_t)v13);
  return outlined destroy of MLActivityClassifier.ModelParameters(a2, type metadata accessor for MLSoundClassifier.ModelParameters);
}