uint64_t MLClassifier.featureColumns.getter()
{
  uint64_t v0;
  int64_t v1;
  void *v2;
  void *v3;
  int64_t v4;
  void *v5;
  void *v6;
  int64_t v7;
  void *v8;
  void *v9;
  uint64_t v10;
  int64_t v11;
  void *v12;
  void *v13;
  uint64_t v14;
  int64_t v15;
  void *v16;
  void *v17;
  uint64_t v18;
  int64_t v19;
  void *v20;
  void *v21;
  uint64_t v22;
  unsigned char *v23;
  uint64_t (*v24)(uint64_t);
  uint64_t (*v25)(uint64_t);
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unsigned char v30[8];
  uint64_t v31;
  uint64_t v32;
  unsigned char *v33;
  uint64_t v34;
  unsigned char *v35;
  uint64_t v36;
  unsigned char *v37;
  unsigned char *v38;

  v31 = v0;
  v32 = type metadata accessor for MLSupportVectorClassifier(0);
  v1 = *(void *)(*(void *)(v32 - 8) + 64);
  v2 = alloca(v1);
  v3 = alloca(v1);
  v33 = v30;
  v34 = type metadata accessor for MLLogisticRegressionClassifier(0);
  v4 = *(void *)(*(void *)(v34 - 8) + 64);
  v5 = alloca(v4);
  v6 = alloca(v4);
  v35 = v30;
  v36 = type metadata accessor for MLRandomForestClassifier(0);
  v7 = *(void *)(*(void *)(v36 - 8) + 64);
  v8 = alloca(v7);
  v9 = alloca(v7);
  v37 = v30;
  v10 = type metadata accessor for MLDecisionTreeClassifier(0);
  v11 = *(void *)(*(void *)(v10 - 8) + 64);
  v12 = alloca(v11);
  v13 = alloca(v11);
  v38 = v30;
  v14 = type metadata accessor for MLBoostedTreeClassifier(0);
  v15 = *(void *)(*(void *)(v14 - 8) + 64);
  v16 = alloca(v15);
  v17 = alloca(v15);
  v18 = type metadata accessor for MLClassifier(0);
  v19 = *(void *)(*(void *)(v18 - 8) + 64);
  v20 = alloca(v19);
  v21 = alloca(v19);
  outlined init with copy of MLTrainingSessionParameters(v31, (uint64_t)v30, type metadata accessor for MLClassifier);
  switch(swift_getEnumCaseMultiPayload(v30, v18))
  {
    case 0u:
      outlined init with take of MLClassifierMetrics((uint64_t)v30, (uint64_t)v30, type metadata accessor for MLBoostedTreeClassifier);
      v22 = *(void *)&v30[*(int *)(v14 + 28)];
      swift_bridgeObjectRetain(v22);
      v23 = v30;
      v24 = type metadata accessor for MLBoostedTreeClassifier;
      goto LABEL_9;
    case 1u:
      v25 = type metadata accessor for MLDecisionTreeClassifier;
      v26 = (uint64_t)v38;
      outlined init with take of MLClassifierMetrics((uint64_t)v30, (uint64_t)v38, type metadata accessor for MLDecisionTreeClassifier);
      v27 = *(int *)(v10 + 28);
      goto LABEL_8;
    case 2u:
      v25 = type metadata accessor for MLRandomForestClassifier;
      v26 = (uint64_t)v37;
      outlined init with take of MLClassifierMetrics((uint64_t)v30, (uint64_t)v37, type metadata accessor for MLRandomForestClassifier);
      v28 = v36;
      goto LABEL_7;
    case 3u:
      v25 = type metadata accessor for MLLogisticRegressionClassifier;
      v26 = (uint64_t)v35;
      outlined init with take of MLClassifierMetrics((uint64_t)v30, (uint64_t)v35, type metadata accessor for MLLogisticRegressionClassifier);
      v28 = v34;
      goto LABEL_7;
    case 4u:
      v25 = type metadata accessor for MLSupportVectorClassifier;
      v26 = (uint64_t)v33;
      outlined init with take of MLClassifierMetrics((uint64_t)v30, (uint64_t)v33, type metadata accessor for MLSupportVectorClassifier);
      v28 = v32;
LABEL_7:
      v27 = *(int *)(v28 + 28);
LABEL_8:
      v22 = *(void *)(v26 + v27);
      swift_bridgeObjectRetain(v22);
      v23 = (unsigned char *)v26;
      v24 = v25;
LABEL_9:
      outlined destroy of MLActivityClassifier.ModelParameters((uint64_t)v23, v24);
      return v22;
  }
}

unint64_t MLClassifier.description.getter()
{
  int64_t v1 = *(void *)(*(void *)(type metadata accessor for MLSupportVectorClassifier(0) - 8) + 64);
  v2 = alloca(v1);
  v3 = alloca(v1);
  uint64_t v27 = (uint64_t)&v27;
  int64_t v4 = *(void *)(*(void *)(type metadata accessor for MLLogisticRegressionClassifier(0) - 8) + 64);
  v5 = alloca(v4);
  v6 = alloca(v4);
  v28 = &v27;
  int64_t v7 = *(void *)(*(void *)(type metadata accessor for MLRandomForestClassifier(0) - 8) + 64);
  v8 = alloca(v7);
  v9 = alloca(v7);
  v29 = &v27;
  int64_t v10 = *(void *)(*(void *)(type metadata accessor for MLDecisionTreeClassifier(0) - 8) + 64);
  v11 = alloca(v10);
  v12 = alloca(v10);
  int64_t v13 = *(void *)(*(void *)(type metadata accessor for MLBoostedTreeClassifier(0) - 8) + 64);
  v14 = alloca(v13);
  v15 = alloca(v13);
  uint64_t v16 = type metadata accessor for MLClassifier(0);
  int64_t v17 = *(void *)(*(void *)(v16 - 8) + 64);
  v18 = alloca(v17);
  v19 = alloca(v17);
  outlined init with copy of MLTrainingSessionParameters(v0, (uint64_t)&v27, type metadata accessor for MLClassifier);
  switch(swift_getEnumCaseMultiPayload(&v27, v16))
  {
    case 0u:
      outlined init with take of MLClassifierMetrics((uint64_t)&v27, (uint64_t)&v27, type metadata accessor for MLBoostedTreeClassifier);
      unint64_t v20 = MLBoostedTreeClassifier.debugDescription.getter();
      v21 = &v27;
      v22 = type metadata accessor for MLBoostedTreeClassifier;
      goto LABEL_9;
    case 1u:
      v23 = type metadata accessor for MLDecisionTreeClassifier;
      outlined init with take of MLClassifierMetrics((uint64_t)&v27, (uint64_t)&v27, type metadata accessor for MLDecisionTreeClassifier);
      unint64_t v20 = MLDecisionTreeClassifier.debugDescription.getter();
      v21 = &v27;
      goto LABEL_8;
    case 2u:
      v23 = type metadata accessor for MLRandomForestClassifier;
      uint64_t v24 = (uint64_t)v29;
      outlined init with take of MLClassifierMetrics((uint64_t)&v27, (uint64_t)v29, type metadata accessor for MLRandomForestClassifier);
      unint64_t v25 = MLRandomForestClassifier.debugDescription.getter();
      goto LABEL_7;
    case 3u:
      v23 = type metadata accessor for MLLogisticRegressionClassifier;
      uint64_t v24 = (uint64_t)v28;
      outlined init with take of MLClassifierMetrics((uint64_t)&v27, (uint64_t)v28, type metadata accessor for MLLogisticRegressionClassifier);
      unint64_t v25 = MLLogisticRegressionClassifier.debugDescription.getter();
      goto LABEL_7;
    case 4u:
      v23 = type metadata accessor for MLSupportVectorClassifier;
      uint64_t v24 = v27;
      outlined init with take of MLClassifierMetrics((uint64_t)&v27, v27, type metadata accessor for MLSupportVectorClassifier);
      unint64_t v25 = MLSupportVectorClassifier.debugDescription.getter();
LABEL_7:
      unint64_t v20 = v25;
      v21 = (uint64_t *)v24;
LABEL_8:
      v22 = v23;
LABEL_9:
      outlined destroy of MLActivityClassifier.ModelParameters((uint64_t)v21, v22);
      return v20;
  }
}

unint64_t protocol witness for CustomStringConvertible.description.getter in conformance MLClassifier()
{
  return MLClassifier.description.getter();
}

unint64_t MLClassifier.debugDescription.getter()
{
  int64_t v1 = *(void *)(*(void *)(type metadata accessor for MLSupportVectorClassifier(0) - 8) + 64);
  v2 = alloca(v1);
  v3 = alloca(v1);
  uint64_t v27 = (uint64_t)&v27;
  int64_t v4 = *(void *)(*(void *)(type metadata accessor for MLLogisticRegressionClassifier(0) - 8) + 64);
  v5 = alloca(v4);
  v6 = alloca(v4);
  v28 = &v27;
  int64_t v7 = *(void *)(*(void *)(type metadata accessor for MLRandomForestClassifier(0) - 8) + 64);
  v8 = alloca(v7);
  v9 = alloca(v7);
  v29 = &v27;
  int64_t v10 = *(void *)(*(void *)(type metadata accessor for MLDecisionTreeClassifier(0) - 8) + 64);
  v11 = alloca(v10);
  v12 = alloca(v10);
  int64_t v13 = *(void *)(*(void *)(type metadata accessor for MLBoostedTreeClassifier(0) - 8) + 64);
  v14 = alloca(v13);
  v15 = alloca(v13);
  uint64_t v16 = type metadata accessor for MLClassifier(0);
  int64_t v17 = *(void *)(*(void *)(v16 - 8) + 64);
  v18 = alloca(v17);
  v19 = alloca(v17);
  outlined init with copy of MLTrainingSessionParameters(v0, (uint64_t)&v27, type metadata accessor for MLClassifier);
  switch(swift_getEnumCaseMultiPayload(&v27, v16))
  {
    case 0u:
      outlined init with take of MLClassifierMetrics((uint64_t)&v27, (uint64_t)&v27, type metadata accessor for MLBoostedTreeClassifier);
      unint64_t v20 = MLBoostedTreeClassifier.debugDescription.getter();
      v21 = &v27;
      v22 = type metadata accessor for MLBoostedTreeClassifier;
      goto LABEL_9;
    case 1u:
      v23 = type metadata accessor for MLDecisionTreeClassifier;
      outlined init with take of MLClassifierMetrics((uint64_t)&v27, (uint64_t)&v27, type metadata accessor for MLDecisionTreeClassifier);
      unint64_t v20 = MLDecisionTreeClassifier.debugDescription.getter();
      v21 = &v27;
      goto LABEL_8;
    case 2u:
      v23 = type metadata accessor for MLRandomForestClassifier;
      uint64_t v24 = (uint64_t)v29;
      outlined init with take of MLClassifierMetrics((uint64_t)&v27, (uint64_t)v29, type metadata accessor for MLRandomForestClassifier);
      unint64_t v25 = MLRandomForestClassifier.debugDescription.getter();
      goto LABEL_7;
    case 3u:
      v23 = type metadata accessor for MLLogisticRegressionClassifier;
      uint64_t v24 = (uint64_t)v28;
      outlined init with take of MLClassifierMetrics((uint64_t)&v27, (uint64_t)v28, type metadata accessor for MLLogisticRegressionClassifier);
      unint64_t v25 = MLLogisticRegressionClassifier.debugDescription.getter();
      goto LABEL_7;
    case 4u:
      v23 = type metadata accessor for MLSupportVectorClassifier;
      uint64_t v24 = v27;
      outlined init with take of MLClassifierMetrics((uint64_t)&v27, v27, type metadata accessor for MLSupportVectorClassifier);
      unint64_t v25 = MLSupportVectorClassifier.debugDescription.getter();
LABEL_7:
      unint64_t v20 = v25;
      v21 = (uint64_t *)v24;
LABEL_8:
      v22 = v23;
LABEL_9:
      outlined destroy of MLActivityClassifier.ModelParameters((uint64_t)v21, v22);
      return v20;
  }
}

unint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance MLClassifier()
{
  return MLClassifier.debugDescription.getter();
}

uint64_t MLClassifier.playgroundDescription.getter()
{
  v44 = v0;
  int64_t v2 = *(void *)(*(void *)(type metadata accessor for MLSupportVectorClassifier(0) - 8) + 64);
  v3 = alloca(v2);
  int64_t v4 = alloca(v2);
  v41 = &v40;
  int64_t v5 = *(void *)(*(void *)(type metadata accessor for MLLogisticRegressionClassifier(0) - 8) + 64);
  v6 = alloca(v5);
  int64_t v7 = alloca(v5);
  v42 = &v40;
  int64_t v8 = *(void *)(*(void *)(type metadata accessor for MLRandomForestClassifier(0) - 8) + 64);
  v9 = alloca(v8);
  int64_t v10 = alloca(v8);
  v43 = &v40;
  int64_t v11 = *(void *)(*(void *)(type metadata accessor for MLDecisionTreeClassifier(0) - 8) + 64);
  v12 = alloca(v11);
  int64_t v13 = alloca(v11);
  int64_t v14 = *(void *)(*(void *)(type metadata accessor for MLBoostedTreeClassifier(0) - 8) + 64);
  v15 = alloca(v14);
  uint64_t v16 = alloca(v14);
  uint64_t v17 = type metadata accessor for MLClassifier(0);
  int64_t v18 = *(void *)(*(void *)(v17 - 8) + 64);
  v19 = alloca(v18);
  unint64_t v20 = alloca(v18);
  outlined init with copy of MLTrainingSessionParameters(v1, (uint64_t)&v40, type metadata accessor for MLClassifier);
  switch(swift_getEnumCaseMultiPayload(&v40, v17))
  {
    case 0u:
      outlined init with take of MLClassifierMetrics((uint64_t)&v40, (uint64_t)&v40, type metadata accessor for MLBoostedTreeClassifier);
      uint64_t v21 = type metadata accessor for NSAttributedString();
      v22._countAndFlagsBits = MLBoostedTreeClassifier.debugDescription.getter();
      v22._object = v23;
      v24.super.isa = NSAttributedString.__allocating_init(string:)(v22).super.isa;
      unint64_t v25 = v44;
      v44[3].super.isa = (Class)v21;
      v25->super.isa = v24.super.isa;
      v26 = &v40;
      uint64_t v27 = type metadata accessor for MLBoostedTreeClassifier;
      return outlined destroy of MLActivityClassifier.ModelParameters((uint64_t)v26, v27);
    case 1u:
      v28 = type metadata accessor for MLDecisionTreeClassifier;
      outlined init with take of MLClassifierMetrics((uint64_t)&v40, (uint64_t)&v40, type metadata accessor for MLDecisionTreeClassifier);
      uint64_t v29 = type metadata accessor for NSAttributedString();
      v30._countAndFlagsBits = MLDecisionTreeClassifier.debugDescription.getter();
      v30._object = v31;
      v32.super.isa = NSAttributedString.__allocating_init(string:)(v30).super.isa;
      v33 = v44;
      v44[3].super.isa = (Class)v29;
      v33->super.isa = v32.super.isa;
      v26 = &v40;
      goto LABEL_8;
    case 2u:
      v28 = type metadata accessor for MLRandomForestClassifier;
      uint64_t v34 = (uint64_t)v43;
      outlined init with take of MLClassifierMetrics((uint64_t)&v40, (uint64_t)v43, type metadata accessor for MLRandomForestClassifier);
      uint64_t v35 = type metadata accessor for NSAttributedString();
      v36._countAndFlagsBits = MLRandomForestClassifier.debugDescription.getter();
      goto LABEL_7;
    case 3u:
      v28 = type metadata accessor for MLLogisticRegressionClassifier;
      uint64_t v34 = (uint64_t)v42;
      outlined init with take of MLClassifierMetrics((uint64_t)&v40, (uint64_t)v42, type metadata accessor for MLLogisticRegressionClassifier);
      uint64_t v35 = type metadata accessor for NSAttributedString();
      v36._countAndFlagsBits = MLLogisticRegressionClassifier.debugDescription.getter();
      goto LABEL_7;
    case 4u:
      v28 = type metadata accessor for MLSupportVectorClassifier;
      uint64_t v34 = (uint64_t)v41;
      outlined init with take of MLClassifierMetrics((uint64_t)&v40, (uint64_t)v41, type metadata accessor for MLSupportVectorClassifier);
      uint64_t v35 = type metadata accessor for NSAttributedString();
      v36._countAndFlagsBits = MLSupportVectorClassifier.debugDescription.getter();
LABEL_7:
      v37.super.isa = NSAttributedString.__allocating_init(string:)(v36).super.isa;
      v38 = v44;
      v44[3].super.isa = (Class)v35;
      v38->super.isa = v37.super.isa;
      v26 = (uint64_t *)v34;
LABEL_8:
      uint64_t v27 = v28;
      return outlined destroy of MLActivityClassifier.ModelParameters((uint64_t)v26, v27);
  }
}

uint64_t protocol witness for CustomPlaygroundDisplayConvertible.playgroundDescription.getter in conformance MLClassifier()
{
  return MLClassifier.playgroundDescription.getter();
}

uint64_t __swift_storeEnumTagSinglePayload(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(void))(*(void *)(a4 - 8) + 56))();
}

uint64_t outlined init with copy of Either<ClassificationMetrics<String>, ClassificationMetrics<Int>>(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Either<ClassificationMetrics<String>, ClassificationMetrics<Int>>);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v2 - 8) + 16))(a2, a1, v2);
  return a2;
}

uint64_t type metadata accessor for MLClassifier(uint64_t a1)
{
  uint64_t result = type metadata singleton initialization cache for MLClassifier;
  if (!type metadata singleton initialization cache for MLClassifier) {
    return swift_getSingletonMetadata(a1, &nominal type descriptor for MLClassifier);
  }
  return result;
}

uint64_t sub_68FBE()
{
  uint64_t v1 = type metadata accessor for DataFrame(0);
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v30 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v3 = ~*(unsigned __int8 *)(v2 + 80) & (v30 + 16);
  uint64_t v4 = v3 + *(void *)(v2 + 64);
  uint64_t v5 = type metadata accessor for MLSupportVectorClassifier(0);
  uint64_t v6 = *(void *)(v5 - 8);
  uint64_t v31 = *(unsigned __int8 *)(v6 + 80);
  uint64_t v7 = ~v31 & (v31 + v4);
  uint64_t v32 = *(void *)(v6 + 64);
  uint64_t v35 = v1;
  uint64_t v8 = v1;
  v9 = (int *)v5;
  uint64_t v34 = *(void (**)(uint64_t, uint64_t))(v2 + 8);
  v34(v0 + v3, v8);
  uint64_t v10 = v7 + v0;
  swift_bridgeObjectRelease(*(void *)(v0 + v7 + 8));
  swift_bridgeObjectRelease(*(void *)(v0 + v7 + 16));
  uint64_t v29 = v0;
  swift_bridgeObjectRelease(*(void *)(v0 + v7 + 32));
  uint64_t v11 = v7 + v0 + *(int *)(type metadata accessor for MLSupportVectorClassifier.Model(0) + 24);
  uint64_t v12 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Either<LinearSupportVectorClassifierModel<Double, String>, LinearSupportVectorClassifierModel<Double, Int>>);
  int64_t v13 = &demangling cache variable for type metadata for LinearSupportVectorClassifierModel<Double, String>;
  if (swift_getEnumCaseMultiPayload(v11, v12) == 1) {
    int64_t v13 = &demangling cache variable for type metadata for LinearSupportVectorClassifierModel<Double, Int>;
  }
  uint64_t v14 = __swift_instantiateConcreteTypeFromMangledName(v13);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v14 - 8) + 8))(v11, v14);

  swift_bridgeObjectRelease(*(void *)(v9[6] + v10 + 8));
  swift_bridgeObjectRelease(*(void *)(v9[7] + v10));
  uint64_t v15 = v9[8];
  if (*(void *)(v15 + v10 + 32)) {
    __swift_destroy_boxed_opaque_existential_1Tm((void *)(v10 + v15 + 8));
  }
  uint64_t v16 = (void *)(v10 + v9[9]);
  uint64_t v17 = type metadata accessor for MLClassifierMetrics.Contents(0);
  int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload(v16, v17);
  switch(EnumCaseMultiPayload)
  {
    case 2:
      swift_errorRelease(*v16);
      break;
    case 1:
      uint64_t v33 = type metadata accessor for MLClassifierMetrics.Precomputed(0);
      v34((uint64_t)v16 + *(int *)(v33 + 20), v35);
      v34((uint64_t)v16 + *(int *)(v33 + 24), v35);
      break;
    case 0:
      uint64_t v19 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Either<ClassificationMetrics<String>, ClassificationMetrics<Int>>);
      if (swift_getEnumCaseMultiPayload(v16, v19) == 1) {
        unint64_t v20 = &demangling cache variable for type metadata for ClassificationMetrics<Int>;
      }
      else {
        unint64_t v20 = &demangling cache variable for type metadata for ClassificationMetrics<String>;
      }
      uint64_t v21 = __swift_instantiateConcreteTypeFromMangledName(v20);
      (*(void (**)(void *, uint64_t))(*(void *)(v21 - 8) + 8))(v16, v21);
      break;
  }
  Swift::String v22 = (void *)(v9[10] + v10);
  int v23 = swift_getEnumCaseMultiPayload(v22, v17);
  switch(v23)
  {
    case 2:
      swift_errorRelease(*v22);
      break;
    case 1:
      uint64_t v26 = type metadata accessor for MLClassifierMetrics.Precomputed(0);
      v34((uint64_t)v22 + *(int *)(v26 + 20), v35);
      v34((uint64_t)v22 + *(int *)(v26 + 24), v35);
      break;
    case 0:
      uint64_t v24 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Either<ClassificationMetrics<String>, ClassificationMetrics<Int>>);
      if (swift_getEnumCaseMultiPayload(v22, v24) == 1) {
        unint64_t v25 = &demangling cache variable for type metadata for ClassificationMetrics<Int>;
      }
      else {
        unint64_t v25 = &demangling cache variable for type metadata for ClassificationMetrics<String>;
      }
      uint64_t v27 = __swift_instantiateConcreteTypeFromMangledName(v25);
      (*(void (**)(void *, uint64_t))(*(void *)(v27 - 8) + 8))(v22, v27);
      break;
  }
  return swift_deallocObject(v29, v32 + v7, v31 | v30 | 7);
}

uint64_t partial apply for closure #1 in MLSupportVectorClassifier.predictions(from:)(uint64_t a1)
{
  uint64_t v3 = *(void *)(type metadata accessor for DataFrame(0) - 8);
  uint64_t v4 = ~*(unsigned __int8 *)(v3 + 80) & (*(unsigned __int8 *)(v3 + 80) + 16);
  uint64_t v5 = v4 + *(void *)(v3 + 64);
  uint64_t v6 = *(unsigned __int8 *)(*(void *)(type metadata accessor for MLSupportVectorClassifier(0) - 8) + 80);
  uint64_t v7 = (void *)swift_task_alloc(dword_3AC63C);
  *(void *)(v2 + 16) = v7;
  *uint64_t v7 = v2;
  v7[1] = partial apply for closure #1 in MLActivityClassifier.init(trainingData:featureColumns:labelColumn:recordingFileColumn:parameters:);
  return closure #1 in MLSupportVectorClassifier.predictions(from:)(a1, v1 + v4, v1 + ((v6 + v5) & ~v6));
}

void *initializeBufferWithCopyOfBuffer for MLClassifier(void *a1, void *a2, uint64_t a3)
{
  uint64_t v3 = a1;
  int v4 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  if ((v4 & 0x20000) != 0)
  {
    uint64_t v8 = *a2;
    void *v3 = *a2;
    uint64_t v3 = (void *)(v8 + ((v4 + 16) & ~v4));
    swift_retain();
  }
  else
  {
    switch(swift_getEnumCaseMultiPayload(a2, a3))
    {
      case 0u:
        *a1 = *a2;
        uint64_t v5 = a2[1];
        v3[1] = v5;
        uint64_t v6 = a2[2];
        swift_bridgeObjectRetain(v5);
        if (v6)
        {
          v3[2] = v6;
          v3[3] = a2[3];
          uint64_t v7 = a2[4];
          v3[4] = v7;
          swift_bridgeObjectRetain(v6);
          swift_bridgeObjectRetain(v7);
        }
        else
        {
          v3[4] = a2[4];
          *((_OWORD *)v3 + 1) = *((_OWORD *)a2 + 1);
        }
        uint64_t v36 = type metadata accessor for AnyTreeClassifierModel(0);
        uint64_t v37 = *(int *)(v36 + 24);
        uint64_t v38 = type metadata accessor for BaseTreeClassifierModel(0);
        (*(void (**)(char *, char *, uint64_t))(*(void *)(v38 - 8) + 16))((char *)v3 + v37, (char *)a2 + v37, v38);
        uint64_t v39 = *(int *)(v36 + 28);
        uint64_t v266 = *(void *)((char *)a2 + v39);
        char v40 = *((unsigned char *)a2 + v39 + 8);
        *(void *)((char *)v3 + v39) = v266;
        *((unsigned char *)v3 + v39 + 8) = v40;
        v41 = (int *)type metadata accessor for MLBoostedTreeClassifier(0);
        uint64_t v42 = v41[5];
        id v276 = *(id *)((char *)a2 + v42);
        *(void *)((char *)v3 + v42) = v276;
        uint64_t v43 = v41[6];
        *(void *)((char *)v3 + v43) = *(void *)((char *)a2 + v43);
        uint64_t v44 = *(void *)((char *)a2 + v43 + 8);
        *(void *)((char *)v3 + v43 + 8) = v44;
        uint64_t v45 = v41[7];
        uint64_t v307 = *(void *)((char *)a2 + v45);
        *(void *)((char *)v3 + v45) = v307;
        v291 = v41;
        uint64_t v46 = v41[8];
        v47 = (char *)v3 + v46;
        v48 = (char *)a2 + v46;
        uint64_t v49 = *(void *)((char *)a2 + v46 + 24);
        swift_bridgeObjectRetain(v266);
        v276;
        swift_bridgeObjectRetain(v44);
        swift_bridgeObjectRetain(v307);
        if (v49)
        {
          *((void *)v47 + 3) = v49;
          (**(void (***)(char *, char *, uint64_t))(v49 - 8))(v47, v48, v49);
        }
        else
        {
          long long v103 = *(_OWORD *)v48;
          *((_OWORD *)v47 + 1) = *((_OWORD *)v48 + 1);
          *(_OWORD *)v47 = v103;
        }
        *((_OWORD *)v47 + 2) = *((_OWORD *)v48 + 2);
        *((_OWORD *)v47 + 3) = *((_OWORD *)v48 + 3);
        *((_OWORD *)v47 + 4) = *((_OWORD *)v48 + 4);
        *((void *)v47 + 10) = *((void *)v48 + 10);
        v47[88] = v48[88];
        *((_OWORD *)v47 + 6) = *((_OWORD *)v48 + 6);
        uint64_t v104 = v291[9];
        v105 = (void *)((char *)v3 + v104);
        v106 = a2;
        v107 = (void *)((char *)a2 + v104);
        uint64_t v271 = type metadata accessor for MLClassifierMetrics.Contents(0);
        unsigned int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload(v107, v271);
        if (EnumCaseMultiPayload == 2)
        {
          uint64_t v162 = *v107;
          swift_errorRetain(v162);
          uint64_t *v105 = v162;
        }
        else if (EnumCaseMultiPayload == 1)
        {
          uint64_t *v105 = *v107;
          v281 = (int *)type metadata accessor for MLClassifierMetrics.Precomputed(0);
          uint64_t v109 = v281[5];
          v260 = (char *)v105 + v109;
          v312 = v105;
          uint64_t v110 = type metadata accessor for DataFrame(0);
          v111 = *(void (**)(char *, char *, uint64_t))(*(void *)(v110 - 8) + 16);
          v112 = (char *)v107 + v109;
          v106 = a2;
          v111(v260, v112, v110);
          uint64_t v113 = v110;
          v105 = v312;
          v111((char *)v312 + v281[6], (char *)v107 + v281[6], v113);
          unsigned int EnumCaseMultiPayload = 1;
        }
        else
        {
          uint64_t v318 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Either<ClassificationMetrics<String>, ClassificationMetrics<Int>>);
          int v163 = swift_getEnumCaseMultiPayload(v107, v318);
          BOOL v286 = v163 == 1;
          v164 = &demangling cache variable for type metadata for ClassificationMetrics<String>;
          if (v163 == 1) {
            v164 = &demangling cache variable for type metadata for ClassificationMetrics<Int>;
          }
          uint64_t v165 = __swift_instantiateConcreteTypeFromMangledName(v164);
          (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(void *)(v165 - 8) + 16))(v105, v107, v165);
          swift_storeEnumTagMultiPayload(v105, v318, v286);
        }
        swift_storeEnumTagMultiPayload(v105, v271, EnumCaseMultiPayload);
        uint64_t v166 = v291[10];
        v167 = (char *)v3 + v166;
        v168 = (void *)((char *)v106 + v166);
        unsigned int v169 = swift_getEnumCaseMultiPayload(v168, v271);
        if (v169 == 2)
        {
          uint64_t v229 = *v168;
          swift_errorRetain(*v168);
          *(void *)v167 = v229;
        }
        else if (v169 == 1)
        {
          *(void *)v167 = *v168;
          uint64_t v296 = type metadata accessor for MLClassifierMetrics.Precomputed(0);
          v170 = v168;
          uint64_t v171 = *(int *)(v296 + 20);
          v319 = &v167[v171];
          uint64_t v172 = type metadata accessor for DataFrame(0);
          v173 = (char *)v170 + v171;
          v174 = *(void (**)(char *, char *, uint64_t))(*(void *)(v172 - 8) + 16);
          v174(v319, v173, v172);
          uint64_t v175 = *(int *)(v296 + 24);
          v176 = (char *)v170 + v175;
          unsigned int v169 = 1;
          v174(&v167[v175], v176, v172);
        }
        else
        {
          uint64_t v302 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Either<ClassificationMetrics<String>, ClassificationMetrics<Int>>);
          int v230 = swift_getEnumCaseMultiPayload(v168, v302);
          BOOL v231 = v230 == 1;
          v232 = &demangling cache variable for type metadata for ClassificationMetrics<String>;
          if (v230 == 1) {
            v232 = &demangling cache variable for type metadata for ClassificationMetrics<Int>;
          }
          uint64_t v233 = __swift_instantiateConcreteTypeFromMangledName(v232);
          (*(void (**)(char *, void *, uint64_t))(*(void *)(v233 - 8) + 16))(v167, v168, v233);
          swift_storeEnumTagMultiPayload(v167, v302, v231);
        }
        swift_storeEnumTagMultiPayload(v167, v271, v169);
        v234 = v3;
        uint64_t v235 = a3;
        uint64_t v236 = 0;
        goto LABEL_109;
      case 1u:
        *a1 = *a2;
        uint64_t v9 = a2[1];
        v3[1] = v9;
        uint64_t v10 = a2[2];
        swift_bridgeObjectRetain(v9);
        if (v10)
        {
          v3[2] = v10;
          v3[3] = a2[3];
          uint64_t v11 = a2[4];
          v3[4] = v11;
          swift_bridgeObjectRetain(v10);
          swift_bridgeObjectRetain(v11);
        }
        else
        {
          v3[4] = a2[4];
          *((_OWORD *)v3 + 1) = *((_OWORD *)a2 + 1);
        }
        uint64_t v50 = type metadata accessor for AnyTreeClassifierModel(0);
        uint64_t v51 = *(int *)(v50 + 24);
        uint64_t v52 = type metadata accessor for BaseTreeClassifierModel(0);
        (*(void (**)(char *, char *, uint64_t))(*(void *)(v52 - 8) + 16))((char *)v3 + v51, (char *)a2 + v51, v52);
        uint64_t v53 = *(int *)(v50 + 28);
        uint64_t v255 = *(void *)((char *)a2 + v53);
        char v54 = *((unsigned char *)a2 + v53 + 8);
        *(void *)((char *)v3 + v53) = v255;
        *((unsigned char *)v3 + v53 + 8) = v54;
        v55 = (int *)type metadata accessor for MLDecisionTreeClassifier(0);
        uint64_t v56 = v55[5];
        v57 = *(void **)((char *)a2 + v56);
        *(void *)((char *)v3 + v56) = v57;
        uint64_t v58 = v55[6];
        *(void *)((char *)v3 + v58) = *(void *)((char *)a2 + v58);
        uint64_t v59 = *(void *)((char *)a2 + v58 + 8);
        *(void *)((char *)v3 + v58 + 8) = v59;
        uint64_t v60 = v55[7];
        id v257 = *(id *)((char *)a2 + v60);
        *(void *)((char *)v3 + v60) = v257;
        v292 = v55;
        uint64_t v61 = v55[8];
        v308 = (char *)v3 + v61;
        v267 = (char *)a2 + v61;
        v62 = (long long *)((char *)a2 + v61 + 8);
        v277 = (_OWORD *)((char *)v3 + v61 + 8);
        *(void *)((char *)v3 + v61) = *(void *)((char *)a2 + v61);
        uint64_t v63 = *(void *)((char *)a2 + v61 + 32);
        swift_bridgeObjectRetain(v255);
        v57;
        swift_bridgeObjectRetain(v59);
        swift_bridgeObjectRetain((_BYTE)v257);
        if (v63)
        {
          *((void *)v308 + 4) = v63;
          (**(void (***)(_OWORD *, long long *, uint64_t))(v63 - 8))(v277, v62, v63);
        }
        else
        {
          long long v114 = *v62;
          v277[1] = v62[1];
          _OWORD *v277 = v114;
        }
        *(_OWORD *)(v308 + 40) = *(_OWORD *)(v267 + 40);
        *((void *)v308 + 7) = *((void *)v267 + 7);
        uint64_t v115 = v292[9];
        v116 = (void *)((char *)v3 + v115);
        v117 = a2;
        v118 = (void *)((char *)a2 + v115);
        uint64_t v272 = type metadata accessor for MLClassifierMetrics.Contents(0);
        unsigned int v119 = swift_getEnumCaseMultiPayload(v118, v272);
        if (v119 == 2)
        {
          uint64_t v177 = *v118;
          swift_errorRetain(v177);
          uint64_t *v116 = v177;
        }
        else if (v119 == 1)
        {
          uint64_t *v116 = *v118;
          v282 = (int *)type metadata accessor for MLClassifierMetrics.Precomputed(0);
          uint64_t v120 = v282[5];
          v261 = (char *)v116 + v120;
          v313 = v116;
          uint64_t v121 = type metadata accessor for DataFrame(0);
          v122 = *(void (**)(char *, char *, uint64_t))(*(void *)(v121 - 8) + 16);
          v123 = (char *)v118 + v120;
          v117 = a2;
          v122(v261, v123, v121);
          uint64_t v124 = v121;
          v116 = v313;
          v122((char *)v313 + v282[6], (char *)v118 + v282[6], v124);
          unsigned int v119 = 1;
        }
        else
        {
          uint64_t v320 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Either<ClassificationMetrics<String>, ClassificationMetrics<Int>>);
          int v178 = swift_getEnumCaseMultiPayload(v118, v320);
          BOOL v179 = v178 == 1;
          v180 = &demangling cache variable for type metadata for ClassificationMetrics<String>;
          if (v178 == 1) {
            v180 = &demangling cache variable for type metadata for ClassificationMetrics<Int>;
          }
          uint64_t v181 = __swift_instantiateConcreteTypeFromMangledName(v180);
          (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(void *)(v181 - 8) + 16))(v116, v118, v181);
          swift_storeEnumTagMultiPayload(v116, v320, v179);
          v117 = a2;
        }
        swift_storeEnumTagMultiPayload(v116, v272, v119);
        uint64_t v182 = v292[10];
        v183 = (char *)v3 + v182;
        v184 = (void *)((char *)v117 + v182);
        unsigned int v185 = swift_getEnumCaseMultiPayload(v184, v272);
        if (v185 == 2)
        {
          uint64_t v237 = *v184;
          swift_errorRetain(*v184);
          *(void *)v183 = v237;
        }
        else if (v185 == 1)
        {
          *(void *)v183 = *v184;
          uint64_t v297 = type metadata accessor for MLClassifierMetrics.Precomputed(0);
          v186 = v184;
          uint64_t v187 = *(int *)(v297 + 20);
          v321 = &v183[v187];
          uint64_t v188 = type metadata accessor for DataFrame(0);
          v189 = (char *)v186 + v187;
          v190 = *(void (**)(char *, char *, uint64_t))(*(void *)(v188 - 8) + 16);
          v190(v321, v189, v188);
          uint64_t v191 = *(int *)(v297 + 24);
          v192 = (char *)v186 + v191;
          unsigned int v185 = 1;
          v190(&v183[v191], v192, v188);
        }
        else
        {
          uint64_t v303 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Either<ClassificationMetrics<String>, ClassificationMetrics<Int>>);
          int v238 = swift_getEnumCaseMultiPayload(v184, v303);
          BOOL v239 = v238 == 1;
          v240 = &demangling cache variable for type metadata for ClassificationMetrics<String>;
          if (v238 == 1) {
            v240 = &demangling cache variable for type metadata for ClassificationMetrics<Int>;
          }
          uint64_t v241 = __swift_instantiateConcreteTypeFromMangledName(v240);
          (*(void (**)(char *, void *, uint64_t))(*(void *)(v241 - 8) + 16))(v183, v184, v241);
          swift_storeEnumTagMultiPayload(v183, v303, v239);
        }
        swift_storeEnumTagMultiPayload(v183, v272, v185);
        uint64_t v253 = 1;
        goto LABEL_108;
      case 2u:
        *a1 = *a2;
        uint64_t v12 = a2[1];
        v3[1] = v12;
        uint64_t v13 = a2[2];
        swift_bridgeObjectRetain(v12);
        if (v13)
        {
          v3[2] = v13;
          v3[3] = a2[3];
          uint64_t v14 = a2[4];
          v3[4] = v14;
          swift_bridgeObjectRetain(v13);
          swift_bridgeObjectRetain(v14);
        }
        else
        {
          v3[4] = a2[4];
          *((_OWORD *)v3 + 1) = *((_OWORD *)a2 + 1);
        }
        uint64_t v64 = type metadata accessor for AnyTreeClassifierModel(0);
        uint64_t v65 = *(int *)(v64 + 24);
        uint64_t v66 = type metadata accessor for BaseTreeClassifierModel(0);
        (*(void (**)(char *, char *, uint64_t))(*(void *)(v66 - 8) + 16))((char *)v3 + v65, (char *)a2 + v65, v66);
        uint64_t v67 = *(int *)(v64 + 28);
        uint64_t v268 = *(void *)((char *)a2 + v67);
        char v68 = *((unsigned char *)a2 + v67 + 8);
        *(void *)((char *)v3 + v67) = v268;
        *((unsigned char *)v3 + v67 + 8) = v68;
        v69 = (int *)type metadata accessor for MLRandomForestClassifier(0);
        uint64_t v70 = v69[5];
        id v278 = *(id *)((char *)a2 + v70);
        *(void *)((char *)v3 + v70) = v278;
        uint64_t v71 = v69[6];
        *(void *)((char *)v3 + v71) = *(void *)((char *)a2 + v71);
        uint64_t v72 = *(void *)((char *)a2 + v71 + 8);
        *(void *)((char *)v3 + v71 + 8) = v72;
        uint64_t v73 = v69[7];
        uint64_t v309 = *(void *)((char *)a2 + v73);
        *(void *)((char *)v3 + v73) = v309;
        v293 = v69;
        uint64_t v74 = v69[8];
        v75 = (char *)v3 + v74;
        v76 = (char *)a2 + v74;
        uint64_t v77 = *(void *)((char *)a2 + v74 + 24);
        swift_bridgeObjectRetain(v268);
        v278;
        swift_bridgeObjectRetain(v72);
        swift_bridgeObjectRetain(v309);
        if (v77)
        {
          *((void *)v75 + 3) = v77;
          (**(void (***)(char *, char *, uint64_t))(v77 - 8))(v75, v76, v77);
        }
        else
        {
          long long v125 = *(_OWORD *)v76;
          *((_OWORD *)v75 + 1) = *((_OWORD *)v76 + 1);
          *(_OWORD *)v75 = v125;
        }
        *((_OWORD *)v75 + 2) = *((_OWORD *)v76 + 2);
        *((_OWORD *)v75 + 3) = *((_OWORD *)v76 + 3);
        *((_OWORD *)v75 + 4) = *((_OWORD *)v76 + 4);
        *((void *)v75 + 10) = *((void *)v76 + 10);
        uint64_t v126 = v293[9];
        v127 = (void *)((char *)v3 + v126);
        v128 = a2;
        v129 = (void *)((char *)a2 + v126);
        uint64_t v273 = type metadata accessor for MLClassifierMetrics.Contents(0);
        unsigned int v130 = swift_getEnumCaseMultiPayload(v129, v273);
        if (v130 == 2)
        {
          uint64_t v193 = *v129;
          swift_errorRetain(v193);
          uint64_t *v127 = v193;
        }
        else if (v130 == 1)
        {
          uint64_t *v127 = *v129;
          v283 = (int *)type metadata accessor for MLClassifierMetrics.Precomputed(0);
          uint64_t v131 = v283[5];
          v262 = (char *)v127 + v131;
          v314 = v127;
          uint64_t v132 = type metadata accessor for DataFrame(0);
          v133 = *(void (**)(char *, char *, uint64_t))(*(void *)(v132 - 8) + 16);
          v134 = (char *)v129 + v131;
          v128 = a2;
          v133(v262, v134, v132);
          uint64_t v135 = v132;
          v127 = v314;
          v133((char *)v314 + v283[6], (char *)v129 + v283[6], v135);
          unsigned int v130 = 1;
        }
        else
        {
          uint64_t v322 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Either<ClassificationMetrics<String>, ClassificationMetrics<Int>>);
          int v194 = swift_getEnumCaseMultiPayload(v129, v322);
          BOOL v287 = v194 == 1;
          v195 = &demangling cache variable for type metadata for ClassificationMetrics<String>;
          if (v194 == 1) {
            v195 = &demangling cache variable for type metadata for ClassificationMetrics<Int>;
          }
          uint64_t v196 = __swift_instantiateConcreteTypeFromMangledName(v195);
          (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(void *)(v196 - 8) + 16))(v127, v129, v196);
          swift_storeEnumTagMultiPayload(v127, v322, v287);
        }
        swift_storeEnumTagMultiPayload(v127, v273, v130);
        uint64_t v197 = v293[10];
        v198 = (char *)v3 + v197;
        v199 = (void *)((char *)v128 + v197);
        unsigned int v200 = swift_getEnumCaseMultiPayload(v199, v273);
        if (v200 == 2)
        {
          uint64_t v242 = *v199;
          swift_errorRetain(*v199);
          *(void *)v198 = v242;
        }
        else if (v200 == 1)
        {
          *(void *)v198 = *v199;
          uint64_t v298 = type metadata accessor for MLClassifierMetrics.Precomputed(0);
          v201 = v199;
          uint64_t v202 = *(int *)(v298 + 20);
          v323 = &v198[v202];
          uint64_t v203 = type metadata accessor for DataFrame(0);
          v204 = (char *)v201 + v202;
          v205 = *(void (**)(char *, char *, uint64_t))(*(void *)(v203 - 8) + 16);
          v205(v323, v204, v203);
          uint64_t v206 = *(int *)(v298 + 24);
          v207 = (char *)v201 + v206;
          unsigned int v200 = 1;
          v205(&v198[v206], v207, v203);
        }
        else
        {
          uint64_t v304 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Either<ClassificationMetrics<String>, ClassificationMetrics<Int>>);
          int v243 = swift_getEnumCaseMultiPayload(v199, v304);
          BOOL v244 = v243 == 1;
          v245 = &demangling cache variable for type metadata for ClassificationMetrics<String>;
          if (v243 == 1) {
            v245 = &demangling cache variable for type metadata for ClassificationMetrics<Int>;
          }
          uint64_t v246 = __swift_instantiateConcreteTypeFromMangledName(v245);
          (*(void (**)(char *, void *, uint64_t))(*(void *)(v246 - 8) + 16))(v198, v199, v246);
          swift_storeEnumTagMultiPayload(v198, v304, v244);
        }
        swift_storeEnumTagMultiPayload(v198, v273, v200);
        uint64_t v253 = 2;
        goto LABEL_108;
      case 3u:
        *a1 = *a2;
        uint64_t v15 = a2[1];
        v3[1] = v15;
        uint64_t v16 = a2[2];
        swift_bridgeObjectRetain(v15);
        if (v16)
        {
          v3[2] = v16;
          v3[3] = a2[3];
          uint64_t v17 = a2[4];
          v3[4] = v17;
          swift_bridgeObjectRetain(v16);
          swift_bridgeObjectRetain(v17);
        }
        else
        {
          v3[4] = a2[4];
          *((_OWORD *)v3 + 1) = *((_OWORD *)a2 + 1);
        }
        uint64_t v78 = type metadata accessor for MLLogisticRegressionClassifier.Model(0);
        uint64_t v79 = *(int *)(v78 + 24);
        uint64_t v80 = type metadata accessor for BaseLogisticRegressionClassifierModel(0);
        (*(void (**)(char *, char *, uint64_t))(*(void *)(v80 - 8) + 16))((char *)v3 + v79, (char *)a2 + v79, v80);
        uint64_t v81 = *(int *)(v78 + 28);
        id v279 = *(id *)((char *)a2 + v81);
        char v82 = *((unsigned char *)a2 + v81 + 8);
        *(void *)((char *)v3 + v81) = v279;
        *((unsigned char *)v3 + v81 + 8) = v82;
        v83 = (int *)type metadata accessor for MLLogisticRegressionClassifier(0);
        uint64_t v84 = v83[5];
        id v258 = *(id *)((char *)a2 + v84);
        *(void *)((char *)v3 + v84) = v258;
        uint64_t v85 = v83[6];
        *(void *)((char *)v3 + v85) = *(void *)((char *)a2 + v85);
        uint64_t v86 = *(void *)((char *)a2 + v85 + 8);
        *(void *)((char *)v3 + v85 + 8) = v86;
        uint64_t v87 = v83[7];
        uint64_t v256 = *(void *)((char *)a2 + v87);
        *(void *)((char *)v3 + v87) = v256;
        v294 = v83;
        uint64_t v88 = v83[8];
        v89 = (char *)v3 + v88;
        v269 = (char *)a2 + v88;
        v90 = (long long *)((char *)a2 + v88 + 8);
        v310 = (_OWORD *)((char *)v3 + v88 + 8);
        *(void *)((char *)v3 + v88) = *(void *)((char *)a2 + v88);
        uint64_t v91 = *(void *)((char *)a2 + v88 + 32);
        swift_bridgeObjectRetain((_BYTE)v279);
        v258;
        swift_bridgeObjectRetain(v86);
        swift_bridgeObjectRetain(v256);
        if (v91)
        {
          *((void *)v89 + 4) = v91;
          (**(void (***)(_OWORD *, long long *, uint64_t))(v91 - 8))(v310, v90, v91);
        }
        else
        {
          long long v136 = *v90;
          v310[1] = v90[1];
          _OWORD *v310 = v136;
        }
        *(_OWORD *)(v89 + 40) = *(_OWORD *)(v269 + 40);
        *(_OWORD *)(v89 + 56) = *(_OWORD *)(v269 + 56);
        v89[72] = v269[72];
        uint64_t v137 = v294[9];
        v138 = (void *)((char *)v3 + v137);
        v139 = a2;
        v140 = (void *)((char *)a2 + v137);
        uint64_t v274 = type metadata accessor for MLClassifierMetrics.Contents(0);
        unsigned int v141 = swift_getEnumCaseMultiPayload(v140, v274);
        if (v141 == 2)
        {
          uint64_t v208 = *v140;
          swift_errorRetain(v208);
          uint64_t *v138 = v208;
        }
        else if (v141 == 1)
        {
          uint64_t *v138 = *v140;
          v284 = (int *)type metadata accessor for MLClassifierMetrics.Precomputed(0);
          uint64_t v142 = v284[5];
          v263 = (char *)v138 + v142;
          v315 = v138;
          uint64_t v143 = type metadata accessor for DataFrame(0);
          v144 = *(void (**)(char *, char *, uint64_t))(*(void *)(v143 - 8) + 16);
          v145 = (char *)v140 + v142;
          v139 = a2;
          v144(v263, v145, v143);
          uint64_t v146 = v143;
          v138 = v315;
          v144((char *)v315 + v284[6], (char *)v140 + v284[6], v146);
          unsigned int v141 = 1;
        }
        else
        {
          uint64_t v324 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Either<ClassificationMetrics<String>, ClassificationMetrics<Int>>);
          int v209 = swift_getEnumCaseMultiPayload(v140, v324);
          BOOL v210 = v209 == 1;
          v211 = &demangling cache variable for type metadata for ClassificationMetrics<String>;
          if (v209 == 1) {
            v211 = &demangling cache variable for type metadata for ClassificationMetrics<Int>;
          }
          uint64_t v212 = __swift_instantiateConcreteTypeFromMangledName(v211);
          (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(void *)(v212 - 8) + 16))(v138, v140, v212);
          swift_storeEnumTagMultiPayload(v138, v324, v210);
          v139 = a2;
        }
        swift_storeEnumTagMultiPayload(v138, v274, v141);
        uint64_t v213 = v294[10];
        v214 = (char *)v3 + v213;
        v215 = (void *)((char *)v139 + v213);
        unsigned int v216 = swift_getEnumCaseMultiPayload(v215, v274);
        if (v216 == 2)
        {
          uint64_t v247 = *v215;
          swift_errorRetain(*v215);
          *(void *)v214 = v247;
        }
        else if (v216 == 1)
        {
          *(void *)v214 = *v215;
          uint64_t v299 = type metadata accessor for MLClassifierMetrics.Precomputed(0);
          v217 = v215;
          uint64_t v218 = *(int *)(v299 + 20);
          v325 = &v214[v218];
          uint64_t v219 = type metadata accessor for DataFrame(0);
          v220 = (char *)v217 + v218;
          v221 = *(void (**)(char *, char *, uint64_t))(*(void *)(v219 - 8) + 16);
          v221(v325, v220, v219);
          uint64_t v222 = *(int *)(v299 + 24);
          v223 = (char *)v217 + v222;
          unsigned int v216 = 1;
          v221(&v214[v222], v223, v219);
        }
        else
        {
          uint64_t v305 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Either<ClassificationMetrics<String>, ClassificationMetrics<Int>>);
          int v248 = swift_getEnumCaseMultiPayload(v215, v305);
          BOOL v249 = v248 == 1;
          v250 = &demangling cache variable for type metadata for ClassificationMetrics<String>;
          if (v248 == 1) {
            v250 = &demangling cache variable for type metadata for ClassificationMetrics<Int>;
          }
          uint64_t v251 = __swift_instantiateConcreteTypeFromMangledName(v250);
          (*(void (**)(char *, void *, uint64_t))(*(void *)(v251 - 8) + 16))(v214, v215, v251);
          swift_storeEnumTagMultiPayload(v214, v305, v249);
        }
        swift_storeEnumTagMultiPayload(v214, v274, v216);
        uint64_t v253 = 3;
        goto LABEL_108;
      case 4u:
        *a1 = *a2;
        uint64_t v18 = a2[1];
        a1[1] = v18;
        uint64_t v288 = a2[2];
        a1[2] = v288;
        a1[3] = a2[3];
        uint64_t v19 = a2[4];
        a1[4] = v19;
        uint64_t v20 = *(int *)(type metadata accessor for MLSupportVectorClassifier.Model(0) + 24);
        v264 = (char *)a1 + v20;
        uint64_t v21 = (char *)a2 + v20;
        swift_bridgeObjectRetain(v18);
        swift_bridgeObjectRetain(v288);
        swift_bridgeObjectRetain(v19);
        uint64_t v289 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Either<LinearSupportVectorClassifierModel<Double, String>, LinearSupportVectorClassifierModel<Double, Int>>);
        int v22 = swift_getEnumCaseMultiPayload(v21, v289);
        BOOL v23 = v22 == 1;
        uint64_t v24 = &demangling cache variable for type metadata for LinearSupportVectorClassifierModel<Double, String>;
        if (v22 == 1) {
          uint64_t v24 = &demangling cache variable for type metadata for LinearSupportVectorClassifierModel<Double, Int>;
        }
        uint64_t v25 = __swift_instantiateConcreteTypeFromMangledName(v24);
        (*(void (**)(char *, char *, uint64_t))(*(void *)(v25 - 8) + 16))(v264, v21, v25);
        swift_storeEnumTagMultiPayload(v264, v289, v23);
        uint64_t v26 = (int *)type metadata accessor for MLSupportVectorClassifier(0);
        uint64_t v27 = v26[5];
        v28 = *(void **)((char *)a2 + v27);
        *(void *)((char *)v3 + v27) = v28;
        uint64_t v29 = v26[6];
        *(void *)((char *)v3 + v29) = *(void *)((char *)a2 + v29);
        uint64_t v30 = *(void *)((char *)a2 + v29 + 8);
        *(void *)((char *)v3 + v29 + 8) = v30;
        uint64_t v31 = v26[7];
        uint64_t v32 = *(void *)((char *)a2 + v31);
        *(void *)((char *)v3 + v31) = v32;
        v290 = v26;
        uint64_t v33 = v26[8];
        v306 = (char *)v3 + v33;
        v265 = (char *)a2 + v33;
        uint64_t v34 = (long long *)((char *)a2 + v33 + 8);
        v275 = (_OWORD *)((char *)v3 + v33 + 8);
        *(void *)((char *)v3 + v33) = *(void *)((char *)a2 + v33);
        uint64_t v35 = *(void *)((char *)a2 + v33 + 32);
        v28;
        swift_bridgeObjectRetain(v30);
        swift_bridgeObjectRetain(v32);
        if (v35)
        {
          *((void *)v306 + 4) = v35;
          (**(void (***)(_OWORD *, long long *, uint64_t))(v35 - 8))(v275, v34, v35);
        }
        else
        {
          long long v92 = *v34;
          v275[1] = v34[1];
          _OWORD *v275 = v92;
        }
        *(_OWORD *)(v306 + 40) = *(_OWORD *)(v265 + 40);
        v306[56] = v265[56];
        uint64_t v93 = v290[9];
        v94 = (void *)((char *)v3 + v93);
        v95 = a2;
        v96 = (void *)((char *)a2 + v93);
        uint64_t v270 = type metadata accessor for MLClassifierMetrics.Contents(0);
        unsigned int v97 = swift_getEnumCaseMultiPayload(v96, v270);
        if (v97 == 2)
        {
          uint64_t v147 = *v96;
          swift_errorRetain(v147);
          uint64_t *v94 = v147;
        }
        else if (v97 == 1)
        {
          uint64_t *v94 = *v96;
          v280 = (int *)type metadata accessor for MLClassifierMetrics.Precomputed(0);
          uint64_t v98 = v280[5];
          v259 = (char *)v94 + v98;
          v311 = v94;
          uint64_t v99 = type metadata accessor for DataFrame(0);
          v100 = *(void (**)(char *, char *, uint64_t))(*(void *)(v99 - 8) + 16);
          v101 = (char *)v96 + v98;
          v95 = a2;
          v100(v259, v101, v99);
          uint64_t v102 = v99;
          v94 = v311;
          v100((char *)v311 + v280[6], (char *)v96 + v280[6], v102);
          unsigned int v97 = 1;
        }
        else
        {
          uint64_t v316 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Either<ClassificationMetrics<String>, ClassificationMetrics<Int>>);
          int v148 = swift_getEnumCaseMultiPayload(v96, v316);
          BOOL v285 = v148 == 1;
          v149 = &demangling cache variable for type metadata for ClassificationMetrics<String>;
          if (v148 == 1) {
            v149 = &demangling cache variable for type metadata for ClassificationMetrics<Int>;
          }
          uint64_t v150 = __swift_instantiateConcreteTypeFromMangledName(v149);
          (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(void *)(v150 - 8) + 16))(v94, v96, v150);
          swift_storeEnumTagMultiPayload(v94, v316, v285);
        }
        swift_storeEnumTagMultiPayload(v94, v270, v97);
        uint64_t v151 = v290[10];
        v152 = (char *)v3 + v151;
        v153 = (void *)((char *)v95 + v151);
        unsigned int v154 = swift_getEnumCaseMultiPayload(v153, v270);
        if (v154 == 2)
        {
          uint64_t v224 = *v153;
          swift_errorRetain(*v153);
          *(void *)v152 = v224;
        }
        else if (v154 == 1)
        {
          *(void *)v152 = *v153;
          uint64_t v295 = type metadata accessor for MLClassifierMetrics.Precomputed(0);
          v155 = v153;
          uint64_t v156 = *(int *)(v295 + 20);
          v317 = &v152[v156];
          uint64_t v157 = type metadata accessor for DataFrame(0);
          v158 = (char *)v155 + v156;
          v159 = *(void (**)(char *, char *, uint64_t))(*(void *)(v157 - 8) + 16);
          v159(v317, v158, v157);
          uint64_t v160 = *(int *)(v295 + 24);
          v161 = (char *)v155 + v160;
          unsigned int v154 = 1;
          v159(&v152[v160], v161, v157);
        }
        else
        {
          uint64_t v301 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Either<ClassificationMetrics<String>, ClassificationMetrics<Int>>);
          int v225 = swift_getEnumCaseMultiPayload(v153, v301);
          BOOL v226 = v225 == 1;
          v227 = &demangling cache variable for type metadata for ClassificationMetrics<String>;
          if (v225 == 1) {
            v227 = &demangling cache variable for type metadata for ClassificationMetrics<Int>;
          }
          uint64_t v228 = __swift_instantiateConcreteTypeFromMangledName(v227);
          (*(void (**)(char *, void *, uint64_t))(*(void *)(v228 - 8) + 16))(v152, v153, v228);
          swift_storeEnumTagMultiPayload(v152, v301, v226);
        }
        swift_storeEnumTagMultiPayload(v152, v270, v154);
        uint64_t v253 = 4;
LABEL_108:
        uint64_t v236 = v253;
        v234 = v3;
        uint64_t v235 = a3;
LABEL_109:
        swift_storeEnumTagMultiPayload(v234, v235, v236);
        break;
    }
  }
  return v3;
}

uint64_t destroy for MLClassifier(void *a1, uint64_t a2)
{
  uint64_t result = swift_getEnumCaseMultiPayload(a1, a2);
  switch((int)result)
  {
    case 0:
      swift_bridgeObjectRelease(a1[1]);
      uint64_t v4 = a1[2];
      if (v4)
      {
        swift_bridgeObjectRelease(v4);
        swift_bridgeObjectRelease(a1[4]);
      }
      uint64_t v5 = type metadata accessor for AnyTreeClassifierModel(0);
      uint64_t v6 = (char *)a1 + *(int *)(v5 + 24);
      uint64_t v7 = type metadata accessor for BaseTreeClassifierModel(0);
      (*(void (**)(char *, uint64_t))(*(void *)(v7 - 8) + 8))(v6, v7);
      swift_bridgeObjectRelease(*(void *)((char *)a1 + *(int *)(v5 + 28)));
      uint64_t v8 = type metadata accessor for MLBoostedTreeClassifier(0);
      goto LABEL_11;
    case 1:
      swift_bridgeObjectRelease(a1[1]);
      uint64_t v9 = a1[2];
      if (v9)
      {
        swift_bridgeObjectRelease(v9);
        swift_bridgeObjectRelease(a1[4]);
      }
      uint64_t v10 = type metadata accessor for AnyTreeClassifierModel(0);
      uint64_t v11 = (char *)a1 + *(int *)(v10 + 24);
      uint64_t v12 = type metadata accessor for BaseTreeClassifierModel(0);
      (*(void (**)(char *, uint64_t))(*(void *)(v12 - 8) + 8))(v11, v12);
      swift_bridgeObjectRelease(*(void *)((char *)a1 + *(int *)(v10 + 28)));
      uint64_t v13 = type metadata accessor for MLDecisionTreeClassifier(0);
      goto LABEL_19;
    case 2:
      swift_bridgeObjectRelease(a1[1]);
      uint64_t v14 = a1[2];
      if (v14)
      {
        swift_bridgeObjectRelease(v14);
        swift_bridgeObjectRelease(a1[4]);
      }
      uint64_t v15 = type metadata accessor for AnyTreeClassifierModel(0);
      uint64_t v16 = (char *)a1 + *(int *)(v15 + 24);
      uint64_t v17 = type metadata accessor for BaseTreeClassifierModel(0);
      (*(void (**)(char *, uint64_t))(*(void *)(v17 - 8) + 8))(v16, v17);
      swift_bridgeObjectRelease(*(void *)((char *)a1 + *(int *)(v15 + 28)));
      uint64_t v8 = type metadata accessor for MLRandomForestClassifier(0);
LABEL_11:
      uint64_t v18 = (int *)v8;

      swift_bridgeObjectRelease(*(void *)((char *)a1 + v18[6] + 8));
      swift_bridgeObjectRelease(*(void *)((char *)a1 + v18[7]));
      uint64_t v19 = v18[8];
      if (!*(void *)((char *)a1 + v19 + 24)) {
        goto LABEL_22;
      }
      uint64_t v20 = (void *)((char *)a1 + v19);
      goto LABEL_21;
    case 3:
      swift_bridgeObjectRelease(a1[1]);
      uint64_t v21 = a1[2];
      if (v21)
      {
        swift_bridgeObjectRelease(v21);
        swift_bridgeObjectRelease(a1[4]);
      }
      uint64_t v22 = type metadata accessor for MLLogisticRegressionClassifier.Model(0);
      BOOL v23 = (char *)a1 + *(int *)(v22 + 24);
      uint64_t v24 = type metadata accessor for BaseLogisticRegressionClassifierModel(0);
      (*(void (**)(char *, uint64_t))(*(void *)(v24 - 8) + 8))(v23, v24);
      swift_bridgeObjectRelease(*(void *)((char *)a1 + *(int *)(v22 + 28)));
      uint64_t v13 = type metadata accessor for MLLogisticRegressionClassifier(0);
      goto LABEL_19;
    case 4:
      swift_bridgeObjectRelease(a1[1]);
      swift_bridgeObjectRelease(a1[2]);
      swift_bridgeObjectRelease(a1[4]);
      uint64_t v25 = (char *)a1 + *(int *)(type metadata accessor for MLSupportVectorClassifier.Model(0) + 24);
      uint64_t v26 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Either<LinearSupportVectorClassifierModel<Double, String>, LinearSupportVectorClassifierModel<Double, Int>>);
      uint64_t v27 = &demangling cache variable for type metadata for LinearSupportVectorClassifierModel<Double, String>;
      if (swift_getEnumCaseMultiPayload(v25, v26) == 1) {
        uint64_t v27 = &demangling cache variable for type metadata for LinearSupportVectorClassifierModel<Double, Int>;
      }
      uint64_t v28 = __swift_instantiateConcreteTypeFromMangledName(v27);
      (*(void (**)(char *, uint64_t))(*(void *)(v28 - 8) + 8))(v25, v28);
      uint64_t v13 = type metadata accessor for MLSupportVectorClassifier(0);
LABEL_19:
      uint64_t v18 = (int *)v13;

      swift_bridgeObjectRelease(*(void *)((char *)a1 + v18[6] + 8));
      swift_bridgeObjectRelease(*(void *)((char *)a1 + v18[7]));
      uint64_t v29 = v18[8];
      if (!*(void *)((char *)a1 + v29 + 32)) {
        goto LABEL_22;
      }
      uint64_t v20 = (void *)((char *)a1 + v29 + 8);
LABEL_21:
      __swift_destroy_boxed_opaque_existential_1Tm(v20);
LABEL_22:
      uint64_t v30 = (char *)a1 + v18[9];
      uint64_t v31 = type metadata accessor for MLClassifierMetrics.Contents(0);
      int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload(v30, v31);
      switch(EnumCaseMultiPayload)
      {
        case 2:
          swift_errorRelease(*(void *)v30);
          break;
        case 1:
          uint64_t v50 = type metadata accessor for MLClassifierMetrics.Precomputed(0);
          uint64_t v35 = &v30[*(int *)(v50 + 20)];
          uint64_t v49 = v31;
          uint64_t v36 = type metadata accessor for DataFrame(0);
          uint64_t v37 = v35;
          uint64_t v38 = *(void (**)(char *, uint64_t))(*(void *)(v36 - 8) + 8);
          v38(v37, v36);
          uint64_t v39 = v36;
          uint64_t v31 = v49;
          v38(&v30[*(int *)(v50 + 24)], v39);
          break;
        case 0:
          uint64_t v33 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Either<ClassificationMetrics<String>, ClassificationMetrics<Int>>);
          if (swift_getEnumCaseMultiPayload(v30, v33) == 1) {
            uint64_t v34 = &demangling cache variable for type metadata for ClassificationMetrics<Int>;
          }
          else {
            uint64_t v34 = &demangling cache variable for type metadata for ClassificationMetrics<String>;
          }
          uint64_t v40 = __swift_instantiateConcreteTypeFromMangledName(v34);
          (*(void (**)(char *, uint64_t))(*(void *)(v40 - 8) + 8))(v30, v40);
          break;
      }
      v41 = (void *)((char *)a1 + v18[10]);
      uint64_t result = swift_getEnumCaseMultiPayload(v41, v31);
      switch(result)
      {
        case 2:
          return swift_errorRelease(*v41);
        case 1:
          uint64_t v44 = type metadata accessor for MLClassifierMetrics.Precomputed(0);
          uint64_t v45 = (char *)v41 + *(int *)(v44 + 20);
          uint64_t v46 = type metadata accessor for DataFrame(0);
          v47 = *(void (**)(char *, uint64_t))(*(void *)(v46 - 8) + 8);
          v47(v45, v46);
          return ((uint64_t (*)(char *, uint64_t))v47)((char *)v41 + *(int *)(v44 + 24), v46);
        case 0:
          uint64_t v42 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Either<ClassificationMetrics<String>, ClassificationMetrics<Int>>);
          if (swift_getEnumCaseMultiPayload(v41, v42) == 1) {
            uint64_t v43 = &demangling cache variable for type metadata for ClassificationMetrics<Int>;
          }
          else {
            uint64_t v43 = &demangling cache variable for type metadata for ClassificationMetrics<String>;
          }
          uint64_t v48 = __swift_instantiateConcreteTypeFromMangledName(v43);
          return (*(uint64_t (**)(void *, uint64_t))(*(void *)(v48 - 8) + 8))(v41, v48);
      }
      return result;
    default:
      return result;
  }
}

void *initializeWithCopy for MLClassifier(void *a1, void *a2, uint64_t a3)
{
  unsigned int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload(a2, a3);
  switch(EnumCaseMultiPayload)
  {
    case 0u:
      *a1 = *a2;
      uint64_t v5 = a2[1];
      a1[1] = v5;
      uint64_t v6 = a2[2];
      swift_bridgeObjectRetain(v5);
      if (v6)
      {
        a1[2] = v6;
        a1[3] = a2[3];
        uint64_t v7 = a2[4];
        a1[4] = v7;
        swift_bridgeObjectRetain(v6);
        swift_bridgeObjectRetain(v7);
      }
      else
      {
        a1[4] = a2[4];
        *((_OWORD *)a1 + 1) = *((_OWORD *)a2 + 1);
      }
      uint64_t v35 = type metadata accessor for AnyTreeClassifierModel(0);
      uint64_t v36 = *(int *)(v35 + 24);
      uint64_t v37 = type metadata accessor for BaseTreeClassifierModel(0);
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v37 - 8) + 16))((char *)a1 + v36, (char *)a2 + v36, v37);
      uint64_t v38 = *(int *)(v35 + 28);
      uint64_t v166 = *(void *)((char *)a2 + v38);
      char v39 = *((unsigned char *)a2 + v38 + 8);
      *(void *)((char *)a1 + v38) = v166;
      *((unsigned char *)a1 + v38 + 8) = v39;
      uint64_t v40 = (int *)type metadata accessor for MLBoostedTreeClassifier(0);
      uint64_t v41 = v40[5];
      uint64_t v42 = *(void **)((char *)a2 + v41);
      *(void *)((char *)a1 + v41) = v42;
      uint64_t v43 = v40[6];
      *(void *)((char *)a1 + v43) = *(void *)((char *)a2 + v43);
      uint64_t v44 = a1;
      uint64_t v45 = *(void *)((char *)a2 + v43 + 8);
      *(void *)((char *)v44 + v43 + 8) = v45;
      uint64_t v46 = v40[7];
      uint64_t v179 = *(void *)((char *)a2 + v46);
      *(void *)((char *)v44 + v46) = v179;
      v176 = v40;
      uint64_t v47 = v40[8];
      uint64_t v48 = (char *)v44 + v47;
      uint64_t v49 = (char *)a2 + v47;
      uint64_t v50 = *(void *)((char *)a2 + v47 + 24);
      swift_bridgeObjectRetain(v166);
      v42;
      swift_bridgeObjectRetain(v45);
      swift_bridgeObjectRetain(v179);
      if (v50)
      {
        *((void *)v48 + 3) = v50;
        (**(void (***)(char *, char *, uint64_t))(v50 - 8))(v48, v49, v50);
      }
      else
      {
        long long v101 = *(_OWORD *)v49;
        *((_OWORD *)v48 + 1) = *((_OWORD *)v49 + 1);
        *(_OWORD *)uint64_t v48 = v101;
      }
      *((_OWORD *)v48 + 2) = *((_OWORD *)v49 + 2);
      *((_OWORD *)v48 + 3) = *((_OWORD *)v49 + 3);
      *((_OWORD *)v48 + 4) = *((_OWORD *)v49 + 4);
      *((void *)v48 + 10) = *((void *)v49 + 10);
      v48[88] = v49[88];
      *((_OWORD *)v48 + 6) = *((_OWORD *)v49 + 6);
      goto LABEL_34;
    case 1u:
      *a1 = *a2;
      uint64_t v8 = a2[1];
      a1[1] = v8;
      uint64_t v9 = a2[2];
      swift_bridgeObjectRetain(v8);
      if (v9)
      {
        a1[2] = v9;
        a1[3] = a2[3];
        uint64_t v10 = a2[4];
        a1[4] = v10;
        swift_bridgeObjectRetain(v9);
        swift_bridgeObjectRetain(v10);
      }
      else
      {
        a1[4] = a2[4];
        *((_OWORD *)a1 + 1) = *((_OWORD *)a2 + 1);
      }
      uint64_t v51 = type metadata accessor for AnyTreeClassifierModel(0);
      uint64_t v52 = *(int *)(v51 + 24);
      uint64_t v53 = type metadata accessor for BaseTreeClassifierModel(0);
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v53 - 8) + 16))((char *)a1 + v52, (char *)a2 + v52, v53);
      uint64_t v54 = *(int *)(v51 + 28);
      id v154 = *(id *)((char *)a2 + v54);
      char v55 = *((unsigned char *)a2 + v54 + 8);
      *(void *)((char *)a1 + v54) = v154;
      *((unsigned char *)a1 + v54 + 8) = v55;
      uint64_t v56 = (int *)type metadata accessor for MLDecisionTreeClassifier(0);
      uint64_t v57 = v56[5];
      uint64_t v58 = a1;
      uint64_t v59 = *(void **)((char *)a2 + v57);
      *(void *)((char *)v58 + v57) = v59;
      uint64_t v60 = v56[6];
      *(void *)((char *)v58 + v60) = *(void *)((char *)a2 + v60);
      uint64_t v61 = *(void *)((char *)a2 + v60 + 8);
      *(void *)((char *)v58 + v60 + 8) = v61;
      uint64_t v62 = v56[7];
      uint64_t v63 = a2;
      uint64_t v64 = *(void *)((char *)a2 + v62);
      *(void *)((char *)v58 + v62) = v64;
      uint64_t v177 = v56;
      uint64_t v65 = v56[8];
      v180 = (char *)v58 + v65;
      v167 = (char *)v63 + v65;
      uint64_t v66 = (long long *)((char *)v63 + v65 + 8);
      uint64_t v160 = (_OWORD *)((char *)v58 + v65 + 8);
      *(void *)((char *)v58 + v65) = *(void *)((char *)v63 + v65);
      uint64_t v67 = *(void *)((char *)v63 + v65 + 32);
      swift_bridgeObjectRetain((_BYTE)v154);
      v59;
      swift_bridgeObjectRetain(v61);
      swift_bridgeObjectRetain(v64);
      if (v67)
      {
        *((void *)v180 + 4) = v67;
        (**(void (***)(_OWORD *, long long *, uint64_t))(v67 - 8))(v160, v66, v67);
      }
      else
      {
        long long v102 = *v66;
        v160[1] = v66[1];
        *uint64_t v160 = v102;
      }
      *(_OWORD *)(v180 + 40) = *(_OWORD *)(v167 + 40);
      *((void *)v180 + 7) = *((void *)v167 + 7);
      goto LABEL_45;
    case 2u:
      *a1 = *a2;
      uint64_t v11 = a2[1];
      a1[1] = v11;
      uint64_t v12 = a2[2];
      swift_bridgeObjectRetain(v11);
      if (v12)
      {
        a1[2] = v12;
        a1[3] = a2[3];
        uint64_t v13 = a2[4];
        a1[4] = v13;
        swift_bridgeObjectRetain(v12);
        swift_bridgeObjectRetain(v13);
      }
      else
      {
        a1[4] = a2[4];
        *((_OWORD *)a1 + 1) = *((_OWORD *)a2 + 1);
      }
      uint64_t v68 = type metadata accessor for AnyTreeClassifierModel(0);
      uint64_t v69 = *(int *)(v68 + 24);
      uint64_t v70 = type metadata accessor for BaseTreeClassifierModel(0);
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v70 - 8) + 16))((char *)a1 + v69, (char *)a2 + v69, v70);
      uint64_t v71 = *(int *)(v68 + 28);
      uint64_t v168 = *(void *)((char *)a2 + v71);
      char v72 = *((unsigned char *)a2 + v71 + 8);
      *(void *)((char *)a1 + v71) = v168;
      *((unsigned char *)a1 + v71 + 8) = v72;
      uint64_t v73 = (int *)type metadata accessor for MLRandomForestClassifier(0);
      uint64_t v74 = v73[5];
      v75 = *(void **)((char *)a2 + v74);
      *(void *)((char *)a1 + v74) = v75;
      uint64_t v76 = v73[6];
      *(void *)((char *)a1 + v76) = *(void *)((char *)a2 + v76);
      uint64_t v77 = a1;
      uint64_t v78 = *(void *)((char *)a2 + v76 + 8);
      *(void *)((char *)v77 + v76 + 8) = v78;
      uint64_t v79 = v73[7];
      uint64_t v181 = *(void *)((char *)a2 + v79);
      *(void *)((char *)v77 + v79) = v181;
      v176 = v73;
      uint64_t v80 = v73[8];
      uint64_t v81 = (char *)v77 + v80;
      char v82 = (char *)a2 + v80;
      uint64_t v83 = *(void *)((char *)a2 + v80 + 24);
      swift_bridgeObjectRetain(v168);
      v75;
      swift_bridgeObjectRetain(v78);
      swift_bridgeObjectRetain(v181);
      if (v83)
      {
        *((void *)v81 + 3) = v83;
        (**(void (***)(char *, char *, uint64_t))(v83 - 8))(v81, v82, v83);
      }
      else
      {
        long long v103 = *(_OWORD *)v82;
        *((_OWORD *)v81 + 1) = *((_OWORD *)v82 + 1);
        *(_OWORD *)uint64_t v81 = v103;
      }
      *((_OWORD *)v81 + 2) = *((_OWORD *)v82 + 2);
      *((_OWORD *)v81 + 3) = *((_OWORD *)v82 + 3);
      *((_OWORD *)v81 + 4) = *((_OWORD *)v82 + 4);
      *((void *)v81 + 10) = *((void *)v82 + 10);
      goto LABEL_34;
    case 3u:
      *a1 = *a2;
      uint64_t v14 = a2[1];
      a1[1] = v14;
      uint64_t v15 = a2[2];
      swift_bridgeObjectRetain(v14);
      if (v15)
      {
        a1[2] = v15;
        a1[3] = a2[3];
        uint64_t v16 = a2[4];
        a1[4] = v16;
        swift_bridgeObjectRetain(v15);
        swift_bridgeObjectRetain(v16);
      }
      else
      {
        a1[4] = a2[4];
        *((_OWORD *)a1 + 1) = *((_OWORD *)a2 + 1);
      }
      uint64_t v84 = type metadata accessor for MLLogisticRegressionClassifier.Model(0);
      uint64_t v85 = *(int *)(v84 + 24);
      uint64_t v86 = type metadata accessor for BaseLogisticRegressionClassifierModel(0);
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v86 - 8) + 16))((char *)a1 + v85, (char *)a2 + v85, v86);
      uint64_t v87 = *(int *)(v84 + 28);
      uint64_t v161 = *(void *)((char *)a2 + v87);
      char v88 = *((unsigned char *)a2 + v87 + 8);
      *(void *)((char *)a1 + v87) = v161;
      *((unsigned char *)a1 + v87 + 8) = v88;
      v89 = (int *)type metadata accessor for MLLogisticRegressionClassifier(0);
      uint64_t v90 = v89[5];
      id v155 = *(id *)((char *)a2 + v90);
      *(void *)((char *)a1 + v90) = v155;
      uint64_t v91 = v89[6];
      *(void *)((char *)a1 + v91) = *(void *)((char *)a2 + v91);
      uint64_t v92 = *(void *)((char *)a2 + v91 + 8);
      *(void *)((char *)a1 + v91 + 8) = v92;
      uint64_t v93 = v89[7];
      uint64_t v94 = *(void *)((char *)a2 + v93);
      *(void *)((char *)a1 + v93) = v94;
      uint64_t v177 = v89;
      uint64_t v95 = v89[8];
      v96 = a1;
      unsigned int v97 = (char *)a1 + v95;
      unsigned int v169 = (char *)a2 + v95;
      uint64_t v98 = (long long *)((char *)a2 + v95 + 8);
      uint64_t v182 = (_OWORD *)((char *)v96 + v95 + 8);
      *(void *)((char *)v96 + v95) = *(void *)((char *)a2 + v95);
      uint64_t v99 = *(void *)((char *)a2 + v95 + 32);
      swift_bridgeObjectRetain(v161);
      v155;
      swift_bridgeObjectRetain(v92);
      swift_bridgeObjectRetain(v94);
      if (v99)
      {
        *((void *)v97 + 4) = v99;
        (**(void (***)(_OWORD *, long long *, uint64_t))(v99 - 8))(v182, v98, v99);
      }
      else
      {
        long long v123 = *v98;
        v182[1] = v98[1];
        *uint64_t v182 = v123;
      }
      *(_OWORD *)(v97 + 40) = *(_OWORD *)(v169 + 40);
      *(_OWORD *)(v97 + 56) = *(_OWORD *)(v169 + 56);
      v97[72] = v169[72];
LABEL_45:
      uint64_t v124 = v177[9];
      v105 = a1;
      long long v125 = (void *)((char *)a1 + v124);
      uint64_t v126 = (char *)a2 + v124;
      uint64_t v170 = type metadata accessor for MLClassifierMetrics.Contents(0);
      unsigned int v127 = swift_getEnumCaseMultiPayload(v126, v170);
      if (v127 == 2)
      {
        uint64_t v133 = *(void *)v126;
        swift_errorRetain(*(void *)v126);
        *long long v125 = v133;
      }
      else if (v127 == 1)
      {
        *long long v125 = *(void *)v126;
        uint64_t v163 = type metadata accessor for MLClassifierMetrics.Precomputed(0);
        unsigned int v185 = v125;
        uint64_t v128 = *(int *)(v163 + 20);
        uint64_t v157 = (char *)v185 + v128;
        uint64_t v129 = type metadata accessor for DataFrame(0);
        unsigned int v130 = *(void (**)(char *, char *, uint64_t))(*(void *)(v129 - 8) + 16);
        uint64_t v131 = &v126[v128];
        long long v125 = v185;
        v130(v157, v131, v129);
        uint64_t v132 = v129;
        v105 = a1;
        v130((char *)v185 + *(int *)(v163 + 24), &v126[*(int *)(v163 + 24)], v132);
      }
      else
      {
        uint64_t v186 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Either<ClassificationMetrics<String>, ClassificationMetrics<Int>>);
        int v134 = swift_getEnumCaseMultiPayload(v126, v186);
        BOOL v135 = v134 == 1;
        long long v136 = &demangling cache variable for type metadata for ClassificationMetrics<String>;
        if (v134 == 1) {
          long long v136 = &demangling cache variable for type metadata for ClassificationMetrics<Int>;
        }
        uint64_t v137 = __swift_instantiateConcreteTypeFromMangledName(v136);
        (*(void (**)(void *, char *, uint64_t))(*(void *)(v137 - 8) + 16))(v125, v126, v137);
        swift_storeEnumTagMultiPayload(v125, v186, v135);
      }
      uint64_t v121 = v170;
      swift_storeEnumTagMultiPayload(v125, v170, v127);
      uint64_t v122 = v177[10];
      goto LABEL_53;
    case 4u:
      *a1 = *a2;
      uint64_t v17 = a2[1];
      a1[1] = v17;
      uint64_t v18 = a2[2];
      a1[2] = v18;
      a1[3] = a2[3];
      uint64_t v174 = a2[4];
      a1[4] = v174;
      uint64_t v19 = *(int *)(type metadata accessor for MLSupportVectorClassifier.Model(0) + 24);
      v164 = (char *)a1 + v19;
      uint64_t v20 = (char *)a2 + v19;
      swift_bridgeObjectRetain(v17);
      swift_bridgeObjectRetain(v18);
      swift_bridgeObjectRetain(v174);
      uint64_t v175 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Either<LinearSupportVectorClassifierModel<Double, String>, LinearSupportVectorClassifierModel<Double, Int>>);
      int v21 = swift_getEnumCaseMultiPayload(v20, v175);
      BOOL v22 = v21 == 1;
      BOOL v23 = &demangling cache variable for type metadata for LinearSupportVectorClassifierModel<Double, String>;
      if (v21 == 1) {
        BOOL v23 = &demangling cache variable for type metadata for LinearSupportVectorClassifierModel<Double, Int>;
      }
      uint64_t v24 = __swift_instantiateConcreteTypeFromMangledName(v23);
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v24 - 8) + 16))(v164, v20, v24);
      swift_storeEnumTagMultiPayload(v164, v175, v22);
      uint64_t v25 = (int *)type metadata accessor for MLSupportVectorClassifier(0);
      uint64_t v26 = v25[5];
      uint64_t v27 = *(void **)((char *)a2 + v26);
      *(void *)((char *)a1 + v26) = v27;
      uint64_t v28 = v25[6];
      *(void *)((char *)a1 + v28) = *(void *)((char *)a2 + v28);
      uint64_t v29 = *(void *)((char *)a2 + v28 + 8);
      *(void *)((char *)a1 + v28 + 8) = v29;
      uint64_t v30 = v25[7];
      uint64_t v159 = *(void *)((char *)a2 + v30);
      *(void *)((char *)a1 + v30) = v159;
      v176 = v25;
      uint64_t v31 = v25[8];
      int v178 = (char *)a1 + v31;
      uint64_t v165 = (char *)a2 + v31;
      uint64_t v32 = (long long *)((char *)a2 + v31 + 8);
      uint64_t v33 = (_OWORD *)((char *)a1 + v31 + 8);
      *((void *)v33 - 1) = *(void *)((char *)a2 + v31);
      uint64_t v34 = *(void *)((char *)a2 + v31 + 32);
      v27;
      swift_bridgeObjectRetain(v29);
      swift_bridgeObjectRetain(v159);
      if (v34)
      {
        *((void *)v178 + 4) = v34;
        (**(void (***)(_OWORD *, long long *, uint64_t))(v34 - 8))(v33, v32, v34);
      }
      else
      {
        long long v100 = *v32;
        v33[1] = v32[1];
        _OWORD *v33 = v100;
      }
      *(_OWORD *)(v178 + 40) = *(_OWORD *)(v165 + 40);
      v178[56] = v165[56];
LABEL_34:
      uint64_t v104 = v176[9];
      v105 = a1;
      v106 = (void *)((char *)a1 + v104);
      v107 = (char *)a2 + v104;
      uint64_t v170 = type metadata accessor for MLClassifierMetrics.Contents(0);
      unsigned int v108 = swift_getEnumCaseMultiPayload(v107, v170);
      if (v108 == 2)
      {
        uint64_t v115 = v106;
        uint64_t v116 = *(void *)v107;
        swift_errorRetain(*(void *)v107);
        *uint64_t v115 = v116;
        v106 = v115;
      }
      else
      {
        if (v108 == 1)
        {
          void *v106 = *(void *)v107;
          uint64_t v162 = type metadata accessor for MLClassifierMetrics.Precomputed(0);
          uint64_t v109 = *(int *)(v162 + 20);
          uint64_t v156 = (char *)v106 + v109;
          uint64_t v110 = type metadata accessor for DataFrame(0);
          v183 = (char *)v106;
          v111 = *(void (**)(char *, char *, uint64_t))(*(void *)(v110 - 8) + 16);
          v112 = &v107[v109];
          uint64_t v113 = v176;
          v111(v156, v112, v110);
          uint64_t v114 = v110;
          v105 = a1;
          v111(&v183[*(int *)(v162 + 24)], &v107[*(int *)(v162 + 24)], v114);
          v106 = v183;
          goto LABEL_42;
        }
        uint64_t v184 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Either<ClassificationMetrics<String>, ClassificationMetrics<Int>>);
        int v117 = swift_getEnumCaseMultiPayload(v107, v184);
        BOOL v118 = v117 == 1;
        unsigned int v119 = &demangling cache variable for type metadata for ClassificationMetrics<String>;
        if (v117 == 1) {
          unsigned int v119 = &demangling cache variable for type metadata for ClassificationMetrics<Int>;
        }
        uint64_t v120 = __swift_instantiateConcreteTypeFromMangledName(v119);
        (*(void (**)(void *, char *, uint64_t))(*(void *)(v120 - 8) + 16))(v106, v107, v120);
        swift_storeEnumTagMultiPayload(v106, v184, v118);
      }
      uint64_t v113 = v176;
LABEL_42:
      uint64_t v121 = v170;
      swift_storeEnumTagMultiPayload(v106, v170, v108);
      uint64_t v122 = v113[10];
LABEL_53:
      v138 = (char *)v105 + v122;
      v139 = (char *)a2 + v122;
      unsigned int v140 = swift_getEnumCaseMultiPayload((char *)a2 + v122, v121);
      if (v140 == 2)
      {
        uint64_t v145 = *(void *)v139;
        swift_errorRetain(v145);
        *(void *)v138 = v145;
      }
      else if (v140 == 1)
      {
        *(void *)v138 = *(void *)v139;
        uint64_t v172 = type metadata accessor for MLClassifierMetrics.Precomputed(0);
        uint64_t v141 = *(int *)(v172 + 20);
        uint64_t v187 = &v138[v141];
        uint64_t v142 = type metadata accessor for DataFrame(0);
        uint64_t v143 = *(void (**)(char *, char *, uint64_t))(*(void *)(v142 - 8) + 16);
        v144 = &v139[v141];
        v105 = a1;
        v143(v187, v144, v142);
        v143(&v138[*(int *)(v172 + 24)], &v139[*(int *)(v172 + 24)], v142);
        unsigned int v140 = 1;
      }
      else
      {
        uint64_t v173 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Either<ClassificationMetrics<String>, ClassificationMetrics<Int>>);
        uint64_t v146 = v139;
        int v147 = swift_getEnumCaseMultiPayload(v139, v173);
        BOOL v148 = v147 == 1;
        v149 = &demangling cache variable for type metadata for ClassificationMetrics<String>;
        if (v147 == 1) {
          v149 = &demangling cache variable for type metadata for ClassificationMetrics<Int>;
        }
        uint64_t v150 = __swift_instantiateConcreteTypeFromMangledName(v149);
        (*(void (**)(char *, char *, uint64_t))(*(void *)(v150 - 8) + 16))(v138, v146, v150);
        swift_storeEnumTagMultiPayload(v138, v173, v148);
      }
      swift_storeEnumTagMultiPayload(v138, v170, v140);
      swift_storeEnumTagMultiPayload(v105, a3, EnumCaseMultiPayload);
      return v105;
  }
}

void *assignWithCopy for MLClassifier(void *a1, void *a2, uint64_t a3)
{
  uint64_t v3 = a1;
  if (a1 != a2)
  {
    outlined destroy of MLActivityClassifier.ModelParameters((uint64_t)a1, type metadata accessor for MLClassifier);
    unsigned int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload(a2, a3);
    uint64_t v157 = a3;
    switch(EnumCaseMultiPayload)
    {
      case 0u:
        *a1 = *a2;
        uint64_t v6 = a2[1];
        v3[1] = v6;
        uint64_t v7 = a2[2];
        swift_bridgeObjectRetain(v6);
        if (v7)
        {
          v3[2] = v7;
          v3[3] = a2[3];
          uint64_t v8 = a2[4];
          v3[4] = v8;
          swift_bridgeObjectRetain(v7);
          swift_bridgeObjectRetain(v8);
        }
        else
        {
          v3[4] = a2[4];
          *((_OWORD *)v3 + 1) = *((_OWORD *)a2 + 1);
        }
        uint64_t v36 = type metadata accessor for AnyTreeClassifierModel(0);
        uint64_t v37 = *(int *)(v36 + 24);
        uint64_t v38 = type metadata accessor for BaseTreeClassifierModel(0);
        (*(void (**)(char *, char *, uint64_t))(*(void *)(v38 - 8) + 16))((char *)v3 + v37, (char *)a2 + v37, v38);
        uint64_t v39 = *(int *)(v36 + 28);
        uint64_t v175 = *(void *)((char *)a2 + v39);
        char v40 = *((unsigned char *)a2 + v39 + 8);
        *(void *)((char *)v3 + v39) = v175;
        *((unsigned char *)v3 + v39 + 8) = v40;
        uint64_t v41 = (int *)type metadata accessor for MLBoostedTreeClassifier(0);
        uint64_t v42 = v41[5];
        id v181 = *(id *)((char *)a2 + v42);
        *(void *)((char *)v3 + v42) = v181;
        uint64_t v43 = v41[6];
        *(void *)((char *)v3 + v43) = *(void *)((char *)a2 + v43);
        uint64_t v44 = *(void *)((char *)a2 + v43 + 8);
        *(void *)((char *)v3 + v43 + 8) = v44;
        uint64_t v45 = v41[7];
        uint64_t v191 = *(void *)((char *)a2 + v45);
        *(void *)((char *)v3 + v45) = v191;
        v167 = v41;
        uint64_t v46 = v41[8];
        uint64_t v47 = (char *)v3 + v46;
        uint64_t v48 = (char *)a2 + v46;
        uint64_t v49 = *(void *)((char *)a2 + v46 + 24);
        swift_bridgeObjectRetain(v175);
        v181;
        swift_bridgeObjectRetain(v44);
        swift_bridgeObjectRetain(v191);
        if (v49)
        {
          *((void *)v47 + 3) = v49;
          (**(void (***)(char *, char *, uint64_t))(v49 - 8))(v47, v48, v49);
        }
        else
        {
          long long v80 = *(_OWORD *)v48;
          *((_OWORD *)v47 + 1) = *((_OWORD *)v48 + 1);
          *(_OWORD *)uint64_t v47 = v80;
        }
        *((void *)v47 + 4) = *((void *)v48 + 4);
        *((void *)v47 + 5) = *((void *)v48 + 5);
        *((void *)v47 + 6) = *((void *)v48 + 6);
        *((void *)v47 + 7) = *((void *)v48 + 7);
        *((void *)v47 + 8) = *((void *)v48 + 8);
        *((void *)v47 + 9) = *((void *)v48 + 9);
        *((void *)v47 + 10) = *((void *)v48 + 10);
        v47[88] = v48[88];
        *((void *)v47 + 12) = *((void *)v48 + 12);
        *((void *)v47 + 13) = *((void *)v48 + 13);
        goto LABEL_30;
      case 1u:
        *a1 = *a2;
        uint64_t v9 = a2[1];
        v3[1] = v9;
        uint64_t v10 = a2[2];
        swift_bridgeObjectRetain(v9);
        if (v10)
        {
          v3[2] = v10;
          v3[3] = a2[3];
          uint64_t v11 = a2[4];
          v3[4] = v11;
          swift_bridgeObjectRetain(v10);
          swift_bridgeObjectRetain(v11);
        }
        else
        {
          v3[4] = a2[4];
          *((_OWORD *)v3 + 1) = *((_OWORD *)a2 + 1);
        }
        uint64_t v113 = type metadata accessor for AnyTreeClassifierModel(0);
        uint64_t v114 = *(int *)(v113 + 24);
        uint64_t v115 = type metadata accessor for BaseTreeClassifierModel(0);
        (*(void (**)(char *, char *, uint64_t))(*(void *)(v115 - 8) + 16))((char *)v3 + v114, (char *)a2 + v114, v115);
        uint64_t v116 = *(int *)(v113 + 28);
        id v187 = *(id *)((char *)a2 + v116);
        char v117 = *((unsigned char *)a2 + v116 + 8);
        *(void *)((char *)v3 + v116) = v187;
        *((unsigned char *)v3 + v116 + 8) = v117;
        BOOL v118 = (int *)type metadata accessor for MLDecisionTreeClassifier(0);
        uint64_t v119 = v118[5];
        id v163 = *(id *)((char *)a2 + v119);
        *(void *)((char *)v3 + v119) = v163;
        uint64_t v120 = v118[6];
        *(void *)((char *)v3 + v120) = *(void *)((char *)a2 + v120);
        uint64_t v121 = v3;
        uint64_t v122 = *(void *)((char *)a2 + v120 + 8);
        *(void *)((char *)v121 + v120 + 8) = v122;
        uint64_t v123 = v118[7];
        id v160 = *(id *)((char *)a2 + v123);
        *(void *)((char *)v121 + v123) = v160;
        uint64_t v177 = v118;
        uint64_t v124 = v118[8];
        long long v125 = (void *)((char *)v121 + v124);
        uint64_t v170 = (void *)((char *)a2 + v124);
        uint64_t v126 = (long long *)((char *)a2 + v124 + 8);
        uint64_t v196 = (_OWORD *)((char *)v121 + v124 + 8);
        *(void *)((char *)v121 + v124) = *(void *)((char *)a2 + v124);
        uint64_t v127 = *(void *)((char *)a2 + v124 + 32);
        swift_bridgeObjectRetain((_BYTE)v187);
        v163;
        swift_bridgeObjectRetain(v122);
        swift_bridgeObjectRetain((_BYTE)v160);
        if (v127)
        {
          v125[4] = v127;
          (**(void (***)(_OWORD *, long long *, uint64_t))(v127 - 8))(v196, v126, v127);
        }
        else
        {
          long long v128 = *v126;
          v196[1] = v126[1];
          *uint64_t v196 = v128;
        }
        v125[5] = v170[5];
        v125[6] = v170[6];
        v125[7] = v170[7];
        goto LABEL_52;
      case 2u:
        *a1 = *a2;
        uint64_t v12 = a2[1];
        v3[1] = v12;
        uint64_t v13 = a2[2];
        swift_bridgeObjectRetain(v12);
        if (v13)
        {
          v3[2] = v13;
          v3[3] = a2[3];
          uint64_t v14 = a2[4];
          v3[4] = v14;
          swift_bridgeObjectRetain(v13);
          swift_bridgeObjectRetain(v14);
        }
        else
        {
          v3[4] = a2[4];
          *((_OWORD *)v3 + 1) = *((_OWORD *)a2 + 1);
        }
        uint64_t v50 = type metadata accessor for AnyTreeClassifierModel(0);
        uint64_t v51 = *(int *)(v50 + 24);
        uint64_t v52 = type metadata accessor for BaseTreeClassifierModel(0);
        (*(void (**)(char *, char *, uint64_t))(*(void *)(v52 - 8) + 16))((char *)v3 + v51, (char *)a2 + v51, v52);
        uint64_t v53 = *(int *)(v50 + 28);
        uint64_t v176 = *(void *)((char *)a2 + v53);
        char v54 = *((unsigned char *)a2 + v53 + 8);
        *(void *)((char *)v3 + v53) = v176;
        *((unsigned char *)v3 + v53 + 8) = v54;
        char v55 = (int *)type metadata accessor for MLRandomForestClassifier(0);
        uint64_t v56 = v55[5];
        id v182 = *(id *)((char *)a2 + v56);
        *(void *)((char *)v3 + v56) = v182;
        uint64_t v57 = v55[6];
        *(void *)((char *)v3 + v57) = *(void *)((char *)a2 + v57);
        uint64_t v58 = *(void *)((char *)a2 + v57 + 8);
        *(void *)((char *)v3 + v57 + 8) = v58;
        uint64_t v59 = v55[7];
        uint64_t v192 = *(void *)((char *)a2 + v59);
        *(void *)((char *)v3 + v59) = v192;
        v167 = v55;
        uint64_t v60 = v55[8];
        uint64_t v61 = (char *)v3 + v60;
        uint64_t v62 = (char *)a2 + v60;
        uint64_t v63 = *(void *)((char *)a2 + v60 + 24);
        swift_bridgeObjectRetain(v176);
        v182;
        swift_bridgeObjectRetain(v58);
        swift_bridgeObjectRetain(v192);
        if (v63)
        {
          *((void *)v61 + 3) = v63;
          (**(void (***)(char *, char *, uint64_t))(v63 - 8))(v61, v62, v63);
        }
        else
        {
          long long v81 = *(_OWORD *)v62;
          *((_OWORD *)v61 + 1) = *((_OWORD *)v62 + 1);
          *(_OWORD *)uint64_t v61 = v81;
        }
        *((void *)v61 + 4) = *((void *)v62 + 4);
        *((void *)v61 + 5) = *((void *)v62 + 5);
        *((void *)v61 + 6) = *((void *)v62 + 6);
        *((void *)v61 + 7) = *((void *)v62 + 7);
        *((void *)v61 + 8) = *((void *)v62 + 8);
        *((void *)v61 + 9) = *((void *)v62 + 9);
        *((void *)v61 + 10) = *((void *)v62 + 10);
        goto LABEL_30;
      case 3u:
        *a1 = *a2;
        uint64_t v15 = a2[1];
        v3[1] = v15;
        uint64_t v16 = a2[2];
        swift_bridgeObjectRetain(v15);
        if (v16)
        {
          v3[2] = v16;
          v3[3] = a2[3];
          uint64_t v17 = a2[4];
          v3[4] = v17;
          swift_bridgeObjectRetain(v16);
          swift_bridgeObjectRetain(v17);
        }
        else
        {
          v3[4] = a2[4];
          *((_OWORD *)v3 + 1) = *((_OWORD *)a2 + 1);
        }
        uint64_t v64 = type metadata accessor for MLLogisticRegressionClassifier.Model(0);
        uint64_t v65 = *(int *)(v64 + 24);
        uint64_t v66 = type metadata accessor for BaseLogisticRegressionClassifierModel(0);
        (*(void (**)(char *, char *, uint64_t))(*(void *)(v66 - 8) + 16))((char *)v3 + v65, (char *)a2 + v65, v66);
        uint64_t v67 = *(int *)(v64 + 28);
        uint64_t v193 = *(void *)((char *)a2 + v67);
        char v68 = *((unsigned char *)a2 + v67 + 8);
        *(void *)((char *)v3 + v67) = v193;
        *((unsigned char *)v3 + v67 + 8) = v68;
        uint64_t v69 = (int *)type metadata accessor for MLLogisticRegressionClassifier(0);
        uint64_t v70 = v69[5];
        id v158 = *(id *)((char *)a2 + v70);
        *(void *)((char *)v3 + v70) = v158;
        uint64_t v71 = v69[6];
        *(void *)((char *)v3 + v71) = *(void *)((char *)a2 + v71);
        id v161 = *(id *)((char *)a2 + v71 + 8);
        *(void *)((char *)v3 + v71 + 8) = v161;
        uint64_t v72 = v69[7];
        id v183 = *(id *)((char *)a2 + v72);
        *(void *)((char *)v3 + v72) = v183;
        uint64_t v177 = v69;
        uint64_t v73 = v69[8];
        uint64_t v74 = (char *)v3 + v73;
        v75 = v3;
        uint64_t v76 = (char *)a2 + v73;
        uint64_t v77 = (long long *)((char *)a2 + v73 + 8);
        uint64_t v168 = (_OWORD *)((char *)v75 + v73 + 8);
        *(void *)((char *)v75 + v73) = *(void *)((char *)a2 + v73);
        uint64_t v78 = *(void *)((char *)a2 + v73 + 32);
        swift_bridgeObjectRetain(v193);
        v158;
        swift_bridgeObjectRetain((_BYTE)v161);
        swift_bridgeObjectRetain((_BYTE)v183);
        if (v78)
        {
          *((void *)v74 + 4) = v78;
          (**(void (***)(_OWORD *, long long *, uint64_t))(v78 - 8))(v168, v77, v78);
        }
        else
        {
          long long v112 = *v77;
          v168[1] = v77[1];
          _OWORD *v168 = v112;
        }
        *((void *)v74 + 5) = *((void *)v76 + 5);
        *((void *)v74 + 6) = *((void *)v76 + 6);
        *((void *)v74 + 7) = *((void *)v76 + 7);
        *((void *)v74 + 8) = *((void *)v76 + 8);
        v74[72] = v76[72];
LABEL_52:
        uint64_t v129 = v177[9];
        unsigned int v130 = (void *)((char *)a1 + v129);
        uint64_t v131 = (char *)a2 + v129;
        uint64_t v171 = type metadata accessor for MLClassifierMetrics.Contents(0);
        unsigned int v132 = swift_getEnumCaseMultiPayload(v131, v171);
        if (v132 == 2)
        {
          uint64_t v137 = *(void *)v131;
          swift_errorRetain(*(void *)v131);
          *unsigned int v130 = v137;
        }
        else if (v132 == 1)
        {
          *unsigned int v130 = *(void *)v131;
          uint64_t v188 = (int *)type metadata accessor for MLClassifierMetrics.Precomputed(0);
          uint64_t v197 = v130;
          uint64_t v133 = v188[5];
          v164 = (char *)v197 + v133;
          uint64_t v134 = type metadata accessor for DataFrame(0);
          BOOL v135 = *(void (**)(char *, char *, uint64_t))(*(void *)(v134 - 8) + 16);
          long long v136 = &v131[v133];
          unsigned int v130 = v197;
          v135(v164, v136, v134);
          v135((char *)v197 + v188[6], &v131[v188[6]], v134);
          unsigned int v132 = 1;
        }
        else
        {
          uint64_t v198 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Either<ClassificationMetrics<String>, ClassificationMetrics<Int>>);
          int v138 = swift_getEnumCaseMultiPayload(v131, v198);
          BOOL v139 = v138 == 1;
          unsigned int v140 = &demangling cache variable for type metadata for ClassificationMetrics<String>;
          if (v138 == 1) {
            unsigned int v140 = &demangling cache variable for type metadata for ClassificationMetrics<Int>;
          }
          uint64_t v141 = __swift_instantiateConcreteTypeFromMangledName(v140);
          (*(void (**)(void *, char *, uint64_t))(*(void *)(v141 - 8) + 16))(v130, v131, v141);
          swift_storeEnumTagMultiPayload(v130, v198, v139);
        }
        swift_storeEnumTagMultiPayload(v130, v171, v132);
        uint64_t v142 = v177[10];
        uint64_t v3 = a1;
        uint64_t v143 = (char *)a1 + v142;
        v144 = (char *)a2 + v142;
        unsigned int v99 = swift_getEnumCaseMultiPayload(v144, v171);
        if (v99 == 2)
        {
          uint64_t v149 = *(void *)v144;
          swift_errorRetain(*(void *)v144);
          *(void *)uint64_t v143 = v149;
        }
        else if (v99 == 1)
        {
          *(void *)uint64_t v143 = *(void *)v144;
          uint64_t v179 = type metadata accessor for MLClassifierMetrics.Precomputed(0);
          uint64_t v145 = *(int *)(v179 + 20);
          v189 = &v143[v145];
          uint64_t v146 = type metadata accessor for DataFrame(0);
          int v147 = *(void (**)(char *, char *, uint64_t))(*(void *)(v146 - 8) + 16);
          BOOL v148 = &v144[v145];
          uint64_t v3 = a1;
          v147(v189, v148, v146);
          v147(&v143[*(int *)(v179 + 24)], &v144[*(int *)(v179 + 24)], v146);
          unsigned int v99 = 1;
        }
        else
        {
          uint64_t v150 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Either<ClassificationMetrics<String>, ClassificationMetrics<Int>>);
          int v151 = swift_getEnumCaseMultiPayload(v144, v150);
          BOOL v152 = v151 == 1;
          v153 = &demangling cache variable for type metadata for ClassificationMetrics<String>;
          if (v151 == 1) {
            v153 = &demangling cache variable for type metadata for ClassificationMetrics<Int>;
          }
          uint64_t v154 = __swift_instantiateConcreteTypeFromMangledName(v153);
          (*(void (**)(char *, char *, uint64_t))(*(void *)(v154 - 8) + 16))(v143, v144, v154);
          swift_storeEnumTagMultiPayload(v143, v150, v152);
          uint64_t v3 = a1;
        }
        uint64_t v110 = v143;
        uint64_t v111 = v171;
        break;
      case 4u:
        *a1 = *a2;
        uint64_t v18 = a2[1];
        a1[1] = v18;
        uint64_t v172 = a2[2];
        a1[2] = v172;
        a1[3] = a2[3];
        uint64_t v19 = a2[4];
        a1[4] = v19;
        uint64_t v20 = *(int *)(type metadata accessor for MLSupportVectorClassifier.Model(0) + 24);
        uint64_t v166 = (char *)a1 + v20;
        int v21 = (char *)a2 + v20;
        swift_bridgeObjectRetain(v18);
        swift_bridgeObjectRetain(v172);
        swift_bridgeObjectRetain(v19);
        uint64_t v173 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Either<LinearSupportVectorClassifierModel<Double, String>, LinearSupportVectorClassifierModel<Double, Int>>);
        int v22 = swift_getEnumCaseMultiPayload(v21, v173);
        BOOL v23 = v22 == 1;
        uint64_t v24 = &demangling cache variable for type metadata for LinearSupportVectorClassifierModel<Double, String>;
        if (v22 == 1) {
          uint64_t v24 = &demangling cache variable for type metadata for LinearSupportVectorClassifierModel<Double, Int>;
        }
        uint64_t v25 = __swift_instantiateConcreteTypeFromMangledName(v24);
        (*(void (**)(char *, char *, uint64_t))(*(void *)(v25 - 8) + 16))(v166, v21, v25);
        swift_storeEnumTagMultiPayload(v166, v173, v23);
        uint64_t v26 = (int *)type metadata accessor for MLSupportVectorClassifier(0);
        uint64_t v27 = v26[5];
        uint64_t v28 = *(void **)((char *)a2 + v27);
        *(void *)((char *)v3 + v27) = v28;
        uint64_t v29 = v26[6];
        *(void *)((char *)v3 + v29) = *(void *)((char *)a2 + v29);
        uint64_t v30 = *(void *)((char *)a2 + v29 + 8);
        *(void *)((char *)v3 + v29 + 8) = v30;
        uint64_t v31 = v26[7];
        id v180 = *(id *)((char *)a2 + v31);
        *(void *)((char *)v3 + v31) = v180;
        v167 = v26;
        uint64_t v32 = v26[8];
        v190 = (char *)v3 + v32;
        uint64_t v174 = (char *)a2 + v32;
        uint64_t v33 = (long long *)((char *)a2 + v32 + 8);
        uint64_t v34 = (_OWORD *)((char *)v3 + v32 + 8);
        *((void *)v34 - 1) = *(void *)((char *)a2 + v32);
        uint64_t v35 = *(void *)((char *)a2 + v32 + 32);
        v28;
        swift_bridgeObjectRetain(v30);
        swift_bridgeObjectRetain((_BYTE)v180);
        if (v35)
        {
          *((void *)v190 + 4) = v35;
          (**(void (***)(_OWORD *, long long *, uint64_t))(v35 - 8))(v34, v33, v35);
        }
        else
        {
          long long v79 = *v33;
          v34[1] = v33[1];
          *uint64_t v34 = v79;
        }
        *((void *)v190 + 5) = *((void *)v174 + 5);
        *((void *)v190 + 6) = *((void *)v174 + 6);
        v190[56] = v174[56];
LABEL_30:
        uint64_t v82 = v167[9];
        uint64_t v83 = (void *)((char *)a1 + v82);
        uint64_t v84 = (char *)a2 + v82;
        uint64_t v85 = type metadata accessor for MLClassifierMetrics.Contents(0);
        unsigned int v86 = swift_getEnumCaseMultiPayload(v84, v85);
        uint64_t v178 = v85;
        if (v86 == 2)
        {
          uint64_t v91 = v83;
          uint64_t v92 = *(void *)v84;
          swift_errorRetain(*(void *)v84);
          *uint64_t v91 = v92;
          uint64_t v83 = v91;
          unsigned int v86 = 2;
        }
        else if (v86 == 1)
        {
          void *v83 = *(void *)v84;
          uint64_t v159 = (int *)type metadata accessor for MLClassifierMetrics.Precomputed(0);
          uint64_t v87 = v159[5];
          uint64_t v162 = (char *)v83 + v87;
          int v194 = v83;
          uint64_t v88 = type metadata accessor for DataFrame(0);
          uint64_t v184 = *(void (**)(char *, char *, uint64_t))(*(void *)(v88 - 8) + 16);
          v89 = &v84[v87];
          uint64_t v85 = v178;
          v184(v162, v89, v88);
          uint64_t v90 = v88;
          uint64_t v83 = v194;
          v184((char *)v194 + v159[6], &v84[v159[6]], v90);
        }
        else
        {
          uint64_t v195 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Either<ClassificationMetrics<String>, ClassificationMetrics<Int>>);
          int v93 = swift_getEnumCaseMultiPayload(v84, v195);
          BOOL v185 = v93 == 1;
          uint64_t v94 = &demangling cache variable for type metadata for ClassificationMetrics<String>;
          if (v93 == 1) {
            uint64_t v94 = &demangling cache variable for type metadata for ClassificationMetrics<Int>;
          }
          uint64_t v95 = __swift_instantiateConcreteTypeFromMangledName(v94);
          (*(void (**)(void *, char *, uint64_t))(*(void *)(v95 - 8) + 16))(v83, v84, v95);
          swift_storeEnumTagMultiPayload(v83, v195, v185);
        }
        swift_storeEnumTagMultiPayload(v83, v85, v86);
        uint64_t v96 = v167[10];
        uint64_t v3 = a1;
        unsigned int v97 = (char *)a1 + v96;
        uint64_t v98 = (char *)a2 + v96;
        unsigned int v99 = swift_getEnumCaseMultiPayload(v98, v85);
        if (v99 == 2)
        {
          uint64_t v104 = *(void *)v98;
          swift_errorRetain(*(void *)v98);
          *(void *)unsigned int v97 = v104;
        }
        else if (v99 == 1)
        {
          *(void *)unsigned int v97 = *(void *)v98;
          uint64_t v169 = type metadata accessor for MLClassifierMetrics.Precomputed(0);
          uint64_t v100 = *(int *)(v169 + 20);
          uint64_t v186 = &v97[v100];
          uint64_t v101 = type metadata accessor for DataFrame(0);
          long long v102 = *(void (**)(char *, char *, uint64_t))(*(void *)(v101 - 8) + 16);
          long long v103 = &v98[v100];
          uint64_t v3 = a1;
          v102(v186, v103, v101);
          v102(&v97[*(int *)(v169 + 24)], &v98[*(int *)(v169 + 24)], v101);
          unsigned int v99 = 1;
        }
        else
        {
          uint64_t v105 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Either<ClassificationMetrics<String>, ClassificationMetrics<Int>>);
          int v106 = swift_getEnumCaseMultiPayload(v98, v105);
          BOOL v107 = v106 == 1;
          unsigned int v108 = &demangling cache variable for type metadata for ClassificationMetrics<String>;
          if (v106 == 1) {
            unsigned int v108 = &demangling cache variable for type metadata for ClassificationMetrics<Int>;
          }
          uint64_t v109 = __swift_instantiateConcreteTypeFromMangledName(v108);
          (*(void (**)(char *, char *, uint64_t))(*(void *)(v109 - 8) + 16))(v97, v98, v109);
          swift_storeEnumTagMultiPayload(v97, v105, v107);
          uint64_t v3 = a1;
        }
        uint64_t v110 = v97;
        uint64_t v111 = v178;
        break;
      case 5u:
        JUMPOUT(0x6C3D0);
    }
    swift_storeEnumTagMultiPayload(v110, v111, v99);
    swift_storeEnumTagMultiPayload(v3, v157, EnumCaseMultiPayload);
  }
  return v3;
}

uint64_t initializeWithTake for MLClassifier(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = a1;
  unsigned int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload(a2, a3);
  switch(EnumCaseMultiPayload)
  {
    case 0u:
      *(_OWORD *)a1 = *(_OWORD *)a2;
      *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
      *(void *)(a1 + 32) = *(void *)(a2 + 32);
      uint64_t v5 = type metadata accessor for AnyTreeClassifierModel(0);
      uint64_t v6 = *(int *)(v5 + 24);
      uint64_t v7 = type metadata accessor for BaseTreeClassifierModel(0);
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 32))(a1 + v6, a2 + v6, v7);
      uint64_t v8 = *(int *)(v5 + 28);
      *(unsigned char *)(a1 + v8 + 8) = *(unsigned char *)(a2 + v8 + 8);
      *(void *)(a1 + v8) = *(void *)(a2 + v8);
      uint64_t v9 = (int *)type metadata accessor for MLBoostedTreeClassifier(0);
      *(void *)(a1 + v9[5]) = *(void *)(a2 + v9[5]);
      *(_OWORD *)(a1 + v9[6]) = *(_OWORD *)(a2 + v9[6]);
      *(void *)(a1 + v9[7]) = *(void *)(a2 + v9[7]);
      uint64_t v10 = v9[8];
      uint64_t v11 = (void *)(a1 + v10);
      uint64_t v12 = (const void *)(a2 + v10);
      uint64_t v85 = 14;
      goto LABEL_4;
    case 1u:
      *(_OWORD *)a1 = *(_OWORD *)a2;
      *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
      *(void *)(a1 + 32) = *(void *)(a2 + 32);
      uint64_t v45 = type metadata accessor for AnyTreeClassifierModel(0);
      uint64_t v46 = *(int *)(v45 + 24);
      uint64_t v47 = type metadata accessor for BaseTreeClassifierModel(0);
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v47 - 8) + 32))(a1 + v46, a2 + v46, v47);
      uint64_t v48 = *(int *)(v45 + 28);
      *(unsigned char *)(a1 + v48 + 8) = *(unsigned char *)(a2 + v48 + 8);
      *(void *)(a1 + v48) = *(void *)(a2 + v48);
      uint64_t v9 = (int *)type metadata accessor for MLDecisionTreeClassifier(0);
      *(void *)(a1 + v9[5]) = *(void *)(a2 + v9[5]);
      *(_OWORD *)(a1 + v9[6]) = *(_OWORD *)(a2 + v9[6]);
      *(void *)(a1 + v9[7]) = *(void *)(a2 + v9[7]);
      uint64_t v49 = v9[8];
      long long v50 = *(_OWORD *)(a2 + v49);
      long long v51 = *(_OWORD *)(a2 + v49 + 16);
      long long v52 = *(_OWORD *)(a2 + v49 + 32);
      *(_OWORD *)(a1 + v49 + 48) = *(_OWORD *)(a2 + v49 + 48);
      *(_OWORD *)(a1 + v49 + 32) = v52;
      *(_OWORD *)(a1 + v49 + 16) = v51;
      *(_OWORD *)(a1 + v49) = v50;
      goto LABEL_14;
    case 2u:
      *(_OWORD *)a1 = *(_OWORD *)a2;
      *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
      *(void *)(a1 + 32) = *(void *)(a2 + 32);
      uint64_t v13 = type metadata accessor for AnyTreeClassifierModel(0);
      uint64_t v14 = *(int *)(v13 + 24);
      uint64_t v15 = type metadata accessor for BaseTreeClassifierModel(0);
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v15 - 8) + 32))(a1 + v14, a2 + v14, v15);
      uint64_t v16 = *(int *)(v13 + 28);
      *(unsigned char *)(a1 + v16 + 8) = *(unsigned char *)(a2 + v16 + 8);
      *(void *)(a1 + v16) = *(void *)(a2 + v16);
      uint64_t v9 = (int *)type metadata accessor for MLRandomForestClassifier(0);
      *(void *)(a1 + v9[5]) = *(void *)(a2 + v9[5]);
      *(_OWORD *)(a1 + v9[6]) = *(_OWORD *)(a2 + v9[6]);
      *(void *)(a1 + v9[7]) = *(void *)(a2 + v9[7]);
      uint64_t v17 = v9[8];
      uint64_t v11 = (void *)(a1 + v17);
      uint64_t v12 = (const void *)(a2 + v17);
      uint64_t v85 = 11;
LABEL_4:
      qmemcpy(v11, v12, 8 * v85);
      goto LABEL_14;
    case 3u:
      *(_OWORD *)a1 = *(_OWORD *)a2;
      *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
      *(void *)(a1 + 32) = *(void *)(a2 + 32);
      uint64_t v18 = type metadata accessor for MLLogisticRegressionClassifier.Model(0);
      uint64_t v19 = *(int *)(v18 + 24);
      uint64_t v20 = type metadata accessor for BaseLogisticRegressionClassifierModel(0);
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v20 - 8) + 32))(a1 + v19, a2 + v19, v20);
      uint64_t v21 = *(int *)(v18 + 28);
      *(unsigned char *)(a1 + v21 + 8) = *(unsigned char *)(a2 + v21 + 8);
      *(void *)(a1 + v21) = *(void *)(a2 + v21);
      uint64_t v9 = (int *)type metadata accessor for MLLogisticRegressionClassifier(0);
      *(void *)(a1 + v9[5]) = *(void *)(a2 + v9[5]);
      *(_OWORD *)(a1 + v9[6]) = *(_OWORD *)(a2 + v9[6]);
      *(void *)(a1 + v9[7]) = *(void *)(a2 + v9[7]);
      qmemcpy((void *)(a1 + v9[8]), (const void *)(a2 + v9[8]), 0x49uLL);
LABEL_14:
      uint64_t v53 = v9[9];
      __dsta = (char *)(v4 + v53);
      char v54 = (char *)(a2 + v53);
      uint64_t v105 = type metadata accessor for MLClassifierMetrics.Contents(0);
      int v55 = swift_getEnumCaseMultiPayload(v54, v105);
      if (v55 == 1)
      {
        *(void *)__dsta = *(void *)v54;
        uint64_t v94 = type metadata accessor for MLClassifierMetrics.Precomputed(0);
        uint64_t v62 = *(int *)(v94 + 20);
        uint64_t v89 = type metadata accessor for DataFrame(0);
        long long v102 = *(void (**)(char *, char *, uint64_t))(*(void *)(v89 - 8) + 32);
        v102(&__dsta[v62], &v54[v62], v89);
        v102(&__dsta[*(int *)(v94 + 24)], &v54[*(int *)(v94 + 24)], v89);
        uint64_t v61 = 1;
        uint64_t v59 = __dsta;
        uint64_t v60 = v105;
LABEL_20:
        swift_storeEnumTagMultiPayload(v59, v60, v61);
        goto LABEL_22;
      }
      if (!v55)
      {
        uint64_t v101 = (void *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Either<ClassificationMetrics<String>, ClassificationMetrics<Int>>);
        int v56 = swift_getEnumCaseMultiPayload(v54, v101);
        BOOL v93 = v56 == 1;
        uint64_t v57 = &demangling cache variable for type metadata for ClassificationMetrics<String>;
        if (v56 == 1) {
          uint64_t v57 = &demangling cache variable for type metadata for ClassificationMetrics<Int>;
        }
        uint64_t v58 = __swift_instantiateConcreteTypeFromMangledName(v57);
        (*(void (**)(char *, char *, uint64_t))(*(void *)(v58 - 8) + 32))(__dsta, v54, v58);
        swift_storeEnumTagMultiPayload(__dsta, v101, v93);
        uint64_t v59 = __dsta;
        uint64_t v60 = v105;
        uint64_t v61 = 0;
        goto LABEL_20;
      }
      memcpy(__dsta, v54, *(void *)(*(void *)(v105 - 8) + 64));
LABEL_22:
      uint64_t v63 = v9[10];
      uint64_t v64 = (char *)(v4 + v63);
      uint64_t v65 = (char *)(v63 + a2);
      int v66 = swift_getEnumCaseMultiPayload(v65, v105);
      if (v66 != 1) {
        goto LABEL_23;
      }
      *(void *)uint64_t v64 = *(void *)v65;
      __dstb = (int *)type metadata accessor for MLClassifierMetrics.Precomputed(0);
      uint64_t v75 = __dstb[5];
      long long v103 = &v64[v75];
      uint64_t v76 = type metadata accessor for DataFrame(0);
      uint64_t v77 = &v65[v75];
      uint64_t v78 = *(void (**)(char *, char *, uint64_t))(*(void *)(v76 - 8) + 32);
      v78(v103, v77, v76);
      long long v79 = __dstb;
      goto LABEL_34;
    case 4u:
      *(_OWORD *)a1 = *(_OWORD *)a2;
      *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
      *(void *)(a1 + 32) = *(void *)(a2 + 32);
      uint64_t v22 = *(int *)(type metadata accessor for MLSupportVectorClassifier.Model(0) + 24);
      uint64_t v23 = a1 + v22;
      uint64_t v24 = a2 + v22;
      uint64_t v25 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Either<LinearSupportVectorClassifierModel<Double, String>, LinearSupportVectorClassifierModel<Double, Int>>);
      int v26 = swift_getEnumCaseMultiPayload(v24, v25);
      BOOL v27 = v26 == 1;
      uint64_t v28 = &demangling cache variable for type metadata for LinearSupportVectorClassifierModel<Double, String>;
      if (v26 == 1) {
        uint64_t v28 = &demangling cache variable for type metadata for LinearSupportVectorClassifierModel<Double, Int>;
      }
      uint64_t v29 = __swift_instantiateConcreteTypeFromMangledName(v28);
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v29 - 8) + 32))(v23, v24, v29);
      uint64_t v30 = v23;
      uint64_t v4 = a1;
      swift_storeEnumTagMultiPayload(v30, v25, v27);
      uint64_t v31 = (int *)type metadata accessor for MLSupportVectorClassifier(0);
      *(void *)(a1 + v31[5]) = *(void *)(a2 + v31[5]);
      *(_OWORD *)(a1 + v31[6]) = *(_OWORD *)(a2 + v31[6]);
      *(void *)(a1 + v31[7]) = *(void *)(a2 + v31[7]);
      uint64_t v32 = v31[8];
      long long v33 = *(_OWORD *)(a2 + v32);
      long long v34 = *(_OWORD *)(a2 + v32 + 16);
      long long v35 = *(_OWORD *)(a2 + v32 + 32);
      *(_OWORD *)(a1 + v32 + 41) = *(_OWORD *)(a2 + v32 + 41);
      *(_OWORD *)(a1 + v32 + 32) = v35;
      *(_OWORD *)(a1 + v32 + 16) = v34;
      *(_OWORD *)(a1 + v32) = v33;
      uint64_t v36 = v31[9];
      uint64_t v100 = (char *)(a1 + v36);
      uint64_t v37 = (char *)(a2 + v36);
      uint64_t v105 = type metadata accessor for MLClassifierMetrics.Contents(0);
      int v38 = swift_getEnumCaseMultiPayload(v37, v105);
      if (v38 == 1)
      {
        *(void *)uint64_t v100 = *(void *)v37;
        uint64_t v91 = type metadata accessor for MLClassifierMetrics.Precomputed(0);
        uint64_t v80 = *(int *)(v91 + 20);
        uint64_t v87 = type metadata accessor for DataFrame(0);
        uint64_t v95 = *(void (**)(char *, char *, uint64_t))(*(void *)(v87 - 8) + 32);
        v95(&v100[v80], &v37[v80], v87);
        v95(&v100[*(int *)(v91 + 24)], &v37[*(int *)(v91 + 24)], v87);
        uint64_t v44 = 1;
        uint64_t v42 = v100;
        uint64_t v43 = v105;
LABEL_30:
        swift_storeEnumTagMultiPayload(v42, v43, v44);
        goto LABEL_32;
      }
      if (!v38)
      {
        uint64_t v92 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Either<ClassificationMetrics<String>, ClassificationMetrics<Int>>);
        int v39 = swift_getEnumCaseMultiPayload(v37, v92);
        BOOL v90 = v39 == 1;
        char v40 = &demangling cache variable for type metadata for ClassificationMetrics<String>;
        if (v39 == 1) {
          char v40 = &demangling cache variable for type metadata for ClassificationMetrics<Int>;
        }
        uint64_t v41 = __swift_instantiateConcreteTypeFromMangledName(v40);
        (*(void (**)(char *, char *, uint64_t))(*(void *)(v41 - 8) + 32))(v100, v37, v41);
        swift_storeEnumTagMultiPayload(v100, v92, v90);
        uint64_t v42 = v100;
        uint64_t v43 = v105;
        uint64_t v44 = 0;
        goto LABEL_30;
      }
      memcpy(v100, v37, *(void *)(*(void *)(v105 - 8) + 64));
LABEL_32:
      uint64_t v81 = v31[10];
      uint64_t v64 = (char *)(a1 + v81);
      uint64_t v65 = (char *)(v81 + a2);
      int v66 = swift_getEnumCaseMultiPayload(v65, v105);
      if (v66 == 1)
      {
        *(void *)uint64_t v64 = *(void *)v65;
        uint64_t v104 = (int *)type metadata accessor for MLClassifierMetrics.Precomputed(0);
        uint64_t v82 = v104[5];
        uint64_t v96 = &v64[v82];
        uint64_t v76 = type metadata accessor for DataFrame(0);
        uint64_t v83 = &v65[v82];
        uint64_t v78 = *(void (**)(char *, char *, uint64_t))(*(void *)(v76 - 8) + 32);
        v78(v96, v83, v76);
        long long v79 = v104;
LABEL_34:
        v78(&v64[v79[6]], &v65[v79[6]], v76);
        uint64_t v74 = 1;
        uint64_t v72 = v64;
        uint64_t v73 = v105;
      }
      else
      {
LABEL_23:
        if (v66)
        {
          memcpy(v64, v65, *(void *)(*(void *)(v105 - 8) + 64));
          goto LABEL_36;
        }
        uint64_t v67 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Either<ClassificationMetrics<String>, ClassificationMetrics<Int>>);
        int v68 = swift_getEnumCaseMultiPayload(v65, v67);
        BOOL v69 = v68 == 1;
        uint64_t v70 = &demangling cache variable for type metadata for ClassificationMetrics<String>;
        if (v68 == 1) {
          uint64_t v70 = &demangling cache variable for type metadata for ClassificationMetrics<Int>;
        }
        uint64_t v71 = __swift_instantiateConcreteTypeFromMangledName(v70);
        (*(void (**)(char *, char *, uint64_t))(*(void *)(v71 - 8) + 32))(v64, v65, v71);
        swift_storeEnumTagMultiPayload(v64, v67, v69);
        uint64_t v72 = v64;
        uint64_t v73 = v105;
        uint64_t v74 = 0;
      }
      swift_storeEnumTagMultiPayload(v72, v73, v74);
LABEL_36:
      swift_storeEnumTagMultiPayload(v4, a3, EnumCaseMultiPayload);
      return v4;
  }
}

uint64_t assignWithTake for MLClassifier(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a1 != a2)
  {
    outlined destroy of MLActivityClassifier.ModelParameters(a1, type metadata accessor for MLClassifier);
    uint64_t v70 = a3;
    unsigned int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload(a2, a3);
    switch(EnumCaseMultiPayload)
    {
      case 0u:
        *(_OWORD *)a1 = *(_OWORD *)a2;
        *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
        *(void *)(a1 + 32) = *(void *)(a2 + 32);
        uint64_t v6 = type metadata accessor for AnyTreeClassifierModel(0);
        uint64_t v7 = *(int *)(v6 + 24);
        uint64_t v8 = type metadata accessor for BaseTreeClassifierModel(0);
        (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v8 - 8) + 32))(a1 + v7, a2 + v7, v8);
        uint64_t v9 = *(int *)(v6 + 28);
        *(unsigned char *)(a1 + v9 + 8) = *(unsigned char *)(a2 + v9 + 8);
        *(void *)(a1 + v9) = *(void *)(a2 + v9);
        uint64_t v10 = (int *)type metadata accessor for MLBoostedTreeClassifier(0);
        *(void *)(a1 + v10[5]) = *(void *)(a2 + v10[5]);
        *(_OWORD *)(a1 + v10[6]) = *(_OWORD *)(a2 + v10[6]);
        *(void *)(a1 + v10[7]) = *(void *)(a2 + v10[7]);
        uint64_t v11 = v10[8];
        uint64_t v12 = (void *)(a1 + v11);
        uint64_t v13 = (const void *)(a2 + v11);
        uint64_t v69 = 14;
        goto LABEL_6;
      case 1u:
        *(_OWORD *)a1 = *(_OWORD *)a2;
        *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
        *(void *)(a1 + 32) = *(void *)(a2 + 32);
        uint64_t v14 = type metadata accessor for AnyTreeClassifierModel(0);
        uint64_t v15 = *(int *)(v14 + 24);
        uint64_t v16 = type metadata accessor for BaseTreeClassifierModel(0);
        (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v16 - 8) + 32))(a1 + v15, a2 + v15, v16);
        uint64_t v17 = *(int *)(v14 + 28);
        *(unsigned char *)(a1 + v17 + 8) = *(unsigned char *)(a2 + v17 + 8);
        *(void *)(a1 + v17) = *(void *)(a2 + v17);
        uint64_t v10 = (int *)type metadata accessor for MLDecisionTreeClassifier(0);
        *(void *)(a1 + v10[5]) = *(void *)(a2 + v10[5]);
        *(_OWORD *)(a1 + v10[6]) = *(_OWORD *)(a2 + v10[6]);
        *(void *)(a1 + v10[7]) = *(void *)(a2 + v10[7]);
        uint64_t v18 = v10[8];
        long long v19 = *(_OWORD *)(a2 + v18);
        long long v20 = *(_OWORD *)(a2 + v18 + 16);
        long long v21 = *(_OWORD *)(a2 + v18 + 32);
        *(_OWORD *)(a1 + v18 + 48) = *(_OWORD *)(a2 + v18 + 48);
        goto LABEL_11;
      case 2u:
        *(_OWORD *)a1 = *(_OWORD *)a2;
        *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
        *(void *)(a1 + 32) = *(void *)(a2 + 32);
        uint64_t v22 = type metadata accessor for AnyTreeClassifierModel(0);
        uint64_t v23 = *(int *)(v22 + 24);
        uint64_t v24 = type metadata accessor for BaseTreeClassifierModel(0);
        (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v24 - 8) + 32))(a1 + v23, a2 + v23, v24);
        uint64_t v25 = *(int *)(v22 + 28);
        *(unsigned char *)(a1 + v25 + 8) = *(unsigned char *)(a2 + v25 + 8);
        *(void *)(a1 + v25) = *(void *)(a2 + v25);
        uint64_t v10 = (int *)type metadata accessor for MLRandomForestClassifier(0);
        *(void *)(a1 + v10[5]) = *(void *)(a2 + v10[5]);
        *(_OWORD *)(a1 + v10[6]) = *(_OWORD *)(a2 + v10[6]);
        *(void *)(a1 + v10[7]) = *(void *)(a2 + v10[7]);
        uint64_t v26 = v10[8];
        uint64_t v12 = (void *)(a1 + v26);
        uint64_t v13 = (const void *)(a2 + v26);
        uint64_t v69 = 11;
LABEL_6:
        qmemcpy(v12, v13, 8 * v69);
        break;
      case 3u:
        *(_OWORD *)a1 = *(_OWORD *)a2;
        *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
        *(void *)(a1 + 32) = *(void *)(a2 + 32);
        uint64_t v27 = type metadata accessor for MLLogisticRegressionClassifier.Model(0);
        uint64_t v28 = *(int *)(v27 + 24);
        uint64_t v29 = type metadata accessor for BaseLogisticRegressionClassifierModel(0);
        (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v29 - 8) + 32))(a1 + v28, a2 + v28, v29);
        uint64_t v30 = *(int *)(v27 + 28);
        *(unsigned char *)(a1 + v30 + 8) = *(unsigned char *)(a2 + v30 + 8);
        *(void *)(a1 + v30) = *(void *)(a2 + v30);
        uint64_t v10 = (int *)type metadata accessor for MLLogisticRegressionClassifier(0);
        *(void *)(a1 + v10[5]) = *(void *)(a2 + v10[5]);
        *(_OWORD *)(a1 + v10[6]) = *(_OWORD *)(a2 + v10[6]);
        *(void *)(a1 + v10[7]) = *(void *)(a2 + v10[7]);
        qmemcpy((void *)(a1 + v10[8]), (const void *)(a2 + v10[8]), 0x49uLL);
        break;
      case 4u:
        *(_OWORD *)a1 = *(_OWORD *)a2;
        *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
        *(void *)(a1 + 32) = *(void *)(a2 + 32);
        uint64_t v31 = *(int *)(type metadata accessor for MLSupportVectorClassifier.Model(0) + 24);
        uint64_t v32 = a1 + v31;
        uint64_t v33 = a2 + v31;
        uint64_t v78 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Either<LinearSupportVectorClassifierModel<Double, String>, LinearSupportVectorClassifierModel<Double, Int>>);
        int v34 = swift_getEnumCaseMultiPayload(v33, v78);
        BOOL v35 = v34 == 1;
        uint64_t v36 = &demangling cache variable for type metadata for LinearSupportVectorClassifierModel<Double, String>;
        if (v34 == 1) {
          uint64_t v36 = &demangling cache variable for type metadata for LinearSupportVectorClassifierModel<Double, Int>;
        }
        uint64_t v37 = __swift_instantiateConcreteTypeFromMangledName(v36);
        (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v37 - 8) + 32))(v32, v33, v37);
        swift_storeEnumTagMultiPayload(v32, v78, v35);
        uint64_t v10 = (int *)type metadata accessor for MLSupportVectorClassifier(0);
        *(void *)(a1 + v10[5]) = *(void *)(a2 + v10[5]);
        *(_OWORD *)(a1 + v10[6]) = *(_OWORD *)(a2 + v10[6]);
        *(void *)(a1 + v10[7]) = *(void *)(a2 + v10[7]);
        uint64_t v18 = v10[8];
        long long v19 = *(_OWORD *)(a2 + v18);
        long long v20 = *(_OWORD *)(a2 + v18 + 16);
        long long v21 = *(_OWORD *)(a2 + v18 + 32);
        *(_OWORD *)(a1 + v18 + 41) = *(_OWORD *)(a2 + v18 + 41);
LABEL_11:
        *(_OWORD *)(a1 + v18 + 32) = v21;
        *(_OWORD *)(a1 + v18 + 16) = v20;
        *(_OWORD *)(a1 + v18) = v19;
        break;
      case 5u:
        JUMPOUT(0x6D1E0);
    }
    uint64_t v38 = v10[9];
    int v39 = (void *)(a1 + v38);
    char v40 = (char *)(a2 + v38);
    uint64_t v79 = type metadata accessor for MLClassifierMetrics.Contents(0);
    int v41 = swift_getEnumCaseMultiPayload(v40, v79);
    if (v41 == 1)
    {
      *int v39 = *(void *)v40;
      uint64_t v76 = type metadata accessor for MLClassifierMetrics.Precomputed(0);
      uint64_t v49 = v39;
      uint64_t v72 = (char *)v39;
      uint64_t v50 = *(int *)(v76 + 20);
      uint64_t v73 = (char *)v49 + v50;
      uint64_t v74 = type metadata accessor for DataFrame(0);
      uint64_t v81 = *(void (**)(char *, char *, uint64_t))(*(void *)(v74 - 8) + 32);
      v81(v73, &v40[v50], v74);
      v81(&v72[*(int *)(v76 + 24)], &v40[*(int *)(v76 + 24)], v74);
      uint64_t v48 = 1;
      uint64_t v45 = v72;
      uint64_t v46 = v79;
      uint64_t v47 = v79;
    }
    else
    {
      if (v41)
      {
        long long v51 = v40;
        uint64_t v46 = v79;
        memcpy(v39, v51, *(void *)(*(void *)(v79 - 8) + 64));
LABEL_20:
        uint64_t v52 = v10[10];
        uint64_t v53 = (char *)(a1 + v52);
        char v54 = (char *)(v52 + a2);
        int v55 = swift_getEnumCaseMultiPayload(v54, v46);
        if (v55 == 1)
        {
          *(void *)uint64_t v53 = *(void *)v54;
          uint64_t v82 = type metadata accessor for MLClassifierMetrics.Precomputed(0);
          uint64_t v64 = *(int *)(v82 + 20);
          uint64_t v77 = &v53[v64];
          uint64_t v65 = type metadata accessor for DataFrame(0);
          int v66 = &v54[v64];
          uint64_t v67 = *(void (**)(char *, char *, uint64_t))(*(void *)(v65 - 8) + 32);
          v67(v77, v66, v65);
          v67(&v53[*(int *)(v82 + 24)], &v54[*(int *)(v82 + 24)], v65);
          uint64_t v63 = 1;
          uint64_t v61 = v53;
          uint64_t v62 = v79;
        }
        else
        {
          if (v55)
          {
            memcpy(v53, v54, *(void *)(*(void *)(v46 - 8) + 64));
            goto LABEL_28;
          }
          uint64_t v56 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Either<ClassificationMetrics<String>, ClassificationMetrics<Int>>);
          int v57 = swift_getEnumCaseMultiPayload(v54, v56);
          BOOL v58 = v57 == 1;
          uint64_t v59 = &demangling cache variable for type metadata for ClassificationMetrics<String>;
          if (v57 == 1) {
            uint64_t v59 = &demangling cache variable for type metadata for ClassificationMetrics<Int>;
          }
          uint64_t v60 = __swift_instantiateConcreteTypeFromMangledName(v59);
          (*(void (**)(char *, char *, uint64_t))(*(void *)(v60 - 8) + 32))(v53, v54, v60);
          swift_storeEnumTagMultiPayload(v53, v56, v58);
          uint64_t v61 = v53;
          uint64_t v62 = v79;
          uint64_t v63 = 0;
        }
        swift_storeEnumTagMultiPayload(v61, v62, v63);
LABEL_28:
        swift_storeEnumTagMultiPayload(a1, v70, EnumCaseMultiPayload);
        return a1;
      }
      uint64_t v80 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Either<ClassificationMetrics<String>, ClassificationMetrics<Int>>);
      int v42 = swift_getEnumCaseMultiPayload(v40, v80);
      BOOL v75 = v42 == 1;
      uint64_t v43 = &demangling cache variable for type metadata for ClassificationMetrics<String>;
      if (v42 == 1) {
        uint64_t v43 = &demangling cache variable for type metadata for ClassificationMetrics<Int>;
      }
      uint64_t v44 = __swift_instantiateConcreteTypeFromMangledName(v43);
      (*(void (**)(void *, char *, uint64_t))(*(void *)(v44 - 8) + 32))(v39, v40, v44);
      swift_storeEnumTagMultiPayload(v39, v80, v75);
      uint64_t v45 = (char *)v39;
      uint64_t v46 = v79;
      uint64_t v47 = v79;
      uint64_t v48 = 0;
    }
    swift_storeEnumTagMultiPayload(v45, v47, v48);
    goto LABEL_20;
  }
  return a1;
}

uint64_t type metadata completion function for MLClassifier(uint64_t a1)
{
  uint64_t result = type metadata accessor for MLBoostedTreeClassifier(319);
  if (v2 <= 0x3F)
  {
    v9[0] = *(void *)(result - 8) + 64;
    uint64_t result = type metadata accessor for MLDecisionTreeClassifier(319);
    if (v3 <= 0x3F)
    {
      v9[1] = *(void *)(result - 8) + 64;
      uint64_t result = type metadata accessor for MLRandomForestClassifier(319);
      if (v4 <= 0x3F)
      {
        v9[2] = *(void *)(result - 8) + 64;
        uint64_t result = type metadata accessor for MLLogisticRegressionClassifier(319);
        if (v5 <= 0x3F)
        {
          v9[3] = *(void *)(result - 8) + 64;
          uint64_t result = type metadata accessor for MLSupportVectorClassifier(319);
          if (v8 <= 0x3F)
          {
            v9[4] = *(void *)(result - 8) + 64;
            swift_initEnumMetadataMultiPayload(a1, 256, 5, v9, v6, v7);
            return 0;
          }
        }
      }
    }
  }
  return result;
}

uint64_t destroy for AnnotatedFeatureStore(uint64_t *a1)
{
  return swift_bridgeObjectRelease(a1[11]);
}

uint64_t initializeWithCopy for AnnotatedFeatureStore(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)a2;
  unint64_t v4 = *(void *)(a2 + 8);
  outlined copy of Data._Representation(*(void *)a2, v4);
  *(void *)a1 = v3;
  *(void *)(a1 + 8) = v4;
  long long v5 = *(_OWORD *)(a2 + 32);
  long long v6 = *(_OWORD *)(a2 + 48);
  long long v7 = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  *(_OWORD *)(a1 + 32) = v5;
  *(_OWORD *)(a1 + 48) = v6;
  *(_OWORD *)(a1 + 64) = v7;
  uint64_t v8 = *(void *)(a2 + 80);
  *(void *)(a1 + 80) = v8;
  uint64_t v9 = *(void *)(a2 + 88);
  *(void *)(a1 + 88) = v9;
  swift_bridgeObjectRetain(v8);
  swift_bridgeObjectRetain(v9);
  return a1;
}

uint64_t assignWithCopy for AnnotatedFeatureStore(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)a2;
  unint64_t v5 = *(void *)(a2 + 8);
  outlined copy of Data._Representation(*(void *)a2, v5);
  uint64_t v6 = *(void *)a1;
  unint64_t v7 = *(void *)(a1 + 8);
  *(void *)a1 = v4;
  *(void *)(a1 + 8) = v5;
  outlined consume of Data._Representation(v6, v7);
  *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
  *(_DWORD *)(a1 + 20) = *(_DWORD *)(a2 + 20);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  *(void *)(a1 + 56) = *(void *)(a2 + 56);
  *(void *)(a1 + 64) = *(void *)(a2 + 64);
  *(void *)(a1 + 72) = *(void *)(a2 + 72);
  uint64_t v8 = *(void *)(a2 + 80);
  uint64_t v9 = *(void *)(a1 + 80);
  *(void *)(a1 + 80) = v8;
  swift_bridgeObjectRetain(v8);
  swift_bridgeObjectRelease(v9);
  uint64_t v10 = *(void *)(a2 + 88);
  uint64_t v11 = *(void *)(a1 + 88);
  *(void *)(a1 + 88) = v10;
  swift_bridgeObjectRetain(v10);
  swift_bridgeObjectRelease(v11);
  return a1;
}

void *__swift_memcpy96_8(void *a1, const void *a2)
{
  uint64_t result = a1;
  qmemcpy(a1, a2, 0x60uLL);
  return result;
}

uint64_t assignWithTake for AnnotatedFeatureStore(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)a1;
  unint64_t v5 = *(void *)(a1 + 8);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  outlined consume of Data._Representation(v4, v5);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
  *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
  *(void *)(a1 + 72) = *(void *)(a2 + 72);
  swift_bridgeObjectRelease(*(void *)(a1 + 80));
  uint64_t v6 = *(void *)(a1 + 88);
  *(_OWORD *)(a1 + 80) = *(_OWORD *)(a2 + 80);
  swift_bridgeObjectRelease(v6);
  return a1;
}

uint64_t getEnumTagSinglePayload for AnnotatedFeatureStore(uint64_t a1, int a2)
{
  if (a2)
  {
    if (a2 < 0 && *(unsigned char *)(a1 + 96)) {
      int v2 = *(_DWORD *)a1 + 0x7FFFFFFF;
    }
    else {
      int v2 = (*(void *)(a1 + 80) & 0xFFFFFFFF00000001) != 0 ? -1 : *(void *)(a1 + 80) >> 1;
    }
  }
  else
  {
    int v2 = -1;
  }
  return (v2 + 1);
}

void storeEnumTagSinglePayload for AnnotatedFeatureStore(uint64_t a1, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)(a1 + 88) = 0;
    *(_OWORD *)(a1 + 72) = 0;
    *(_OWORD *)(a1 + 56) = 0;
    *(_OWORD *)(a1 + 40) = 0;
    *(_OWORD *)(a1 + 24) = 0;
    *(_OWORD *)(a1 + 8) = 0;
    *(void *)a1 = a2 + 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(a1 + 96) = 1;
    }
  }
  else
  {
    if (a3 < 0) {
      *(unsigned char *)(a1 + 96) = 0;
    }
    if (a2) {
      *(void *)(a1 + 80) = 2 * (a2 - 1);
    }
  }
}

ValueMetadata *type metadata accessor for AnnotatedFeatureStore()
{
  return &type metadata for AnnotatedFeatureStore;
}

uint64_t AnnotatedFeatureStore.init(contentsOf:)(uint64_t a1, __m128 a2, __m128 a3, __m128 a4)
{
  os_log_t log = v5;
  uint64_t v110 = a1;
  uint64_t v101 = v4;
  uint64_t v90 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AnnotatedFeature<MLShapedArray<Float>, String>);
  uint64_t v91 = *(void *)(v90 - 8);
  int64_t v6 = *(void *)(v91 + 64);
  unint64_t v7 = alloca(v6);
  uint64_t v8 = alloca(v6);
  unsigned int v97 = v87;
  uint64_t v98 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for MLShapedArray<Float>);
  uint64_t v99 = *(void *)(v98 - 8);
  int64_t v9 = *(void *)(v99 + 64);
  uint64_t v10 = alloca(v9);
  uint64_t v11 = alloca(v9);
  uint64_t v92 = v87;
  uint64_t v12 = alloca(v9);
  uint64_t v13 = alloca(v9);
  uint64_t v100 = v87;
  uint64_t v111 = type metadata accessor for UTType(0);
  uint64_t v106 = *(void *)(v111 - 8);
  int64_t v14 = *(void *)(v106 + 64);
  uint64_t v15 = alloca(v14);
  uint64_t v16 = alloca(v14);
  uint64_t v109 = type metadata accessor for URL(0);
  *(void *)type = *(void *)(v109 - 8);
  int64_t v17 = *(void *)(*(void *)type + 64);
  uint64_t v18 = alloca(v17);
  long long v19 = alloca(v17);
  BOOL v107 = v87;
  long long v20 = alloca(v17);
  long long v21 = alloca(v17);
  uint64_t v22 = alloca(v17);
  uint64_t v23 = alloca(v17);
  BlobsFile.init()();
  *(void *)&v89[88] = _swiftEmptyArrayStorage;
  URL.appendingPathComponent(_:)(0x617461646174656DLL, 0xED00006E6F736A2ELL);
  URL.appendingPathComponent(_:)(0x7365727574616566, 0xEC0000006E69622ELL);
  static UTType.json.getter();
  uint64_t v104 = v87;
  BOOL v24 = static _FileUtilities.isReadableFile(at:of:)((uint64_t)v87, (uint64_t)v87);
  uint64_t v25 = *(void (**)(unsigned char *, uint64_t))(v106 + 8);
  v25(v87, v111);
  uint64_t v105 = v87;
  if (!v24
    || (static UTType.data.getter(),
        BOOL v26 = static _FileUtilities.isReadableFile(at:of:)((uint64_t)v87, (uint64_t)v87),
        v25(v87, v111),
        !v26))
  {
    uint64_t v33 = *(void (**)(uint64_t, uint64_t))(*(void *)type + 8);
    uint64_t v34 = v109;
    v33(v110, v109);
    goto LABEL_6;
  }
  uint64_t v27 = v104;
  os_log_t v28 = log;
  uint64_t v29 = Data.init(contentsOf:options:)(v104, 0);
  uint64_t v31 = v109;
  if (!v28)
  {
    uint64_t v111 = v30;
    uint64_t v42 = v29;
    uint64_t v43 = type metadata accessor for JSONDecoder(0);
    swift_allocObject(v43, *(unsigned int *)(v43 + 48), *(unsigned __int16 *)(v43 + 52));
    uint64_t v44 = JSONDecoder.init()();
    uint64_t v45 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [Metadata]);
    uint64_t v46 = lazy protocol witness table accessor for type [Metadata] and conformance <A> [A](&lazy protocol witness table cache variable for type [Metadata] and conformance <A> [A], (void (*)(void))lazy protocol witness table accessor for type Metadata and conformance Metadata, (uint64_t)&protocol conformance descriptor for <A> [A]);
    uint64_t v106 = v42;
    dispatch thunk of JSONDecoder.decode<A>(_:from:)(v45, v42, v111, v45, v46);
    v103[1] = v44;
    unsigned int v108 = v102;
    uint64_t v48 = v107;
    uint64_t v49 = v109;
    uint64_t v50 = *(void *)type;
    (*(void (**)(unsigned char *, unsigned char *, uint64_t))(*(void *)type + 16))(v107, v105, v109);
    uint64_t v51 = Data.init(contentsOf:options:)(v48, 0);
    BlobsFile.init(data:)(v51, v52, a2, a3, a4);
    uint64_t v33 = *(void (**)(uint64_t, uint64_t))(v50 + 8);
    v33((uint64_t)v107, v49);
    outlined assign with take of BlobsFile((uint64_t)v87, (uint64_t)v89);
    os_log_type_t v53 = static os_log_type_t.debug.getter();
    type metadata accessor for OS_os_log();
    char v54 = v108;
    swift_bridgeObjectRetain((_BYTE)v108);
    int v55 = (os_log_s *)static OS_os_log.default.getter(v54);
    if (os_log_type_enabled(v55, v53))
    {
      uint64_t v56 = (uint8_t *)swift_slowAlloc(12, -1);
      os_log_t log = v55;
      int v57 = v56;
      *(_DWORD *)uint64_t v56 = 134217984;
      BOOL v58 = v56 + 4;
      uint64_t v59 = (char *)*((void *)v108 + 2);
      *(_DWORD *)type = v53;
      uint64_t v60 = v108;
      long long v102 = v59;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v102, v103, v58, v57 + 12);
      swift_bridgeObjectRelease((_BYTE)v60);
      _os_log_impl(&dword_0, log, type[0], "Reading AnnotatedFeatureStore with %ld elements", v57, 0xCu);
      uint64_t v61 = v57;
      int v55 = log;
      swift_slowDealloc(v61, -1, -1);
    }
    else
    {
      uint64_t v60 = v108;
      swift_bridgeObjectRelease((_BYTE)v108);
    }
    os_log_t log = 0;

    uint64_t v96 = *((void *)v60 + 2);
    if (v96)
    {
      uint64_t v62 = v60 + 48;
      uint64_t v63 = 0;
      while (1)
      {
        uint64_t v64 = *(v62 - 2);
        uint64_t v95 = (char *)*(v62 - 1);
        BOOL v93 = v62;
        uint64_t v65 = (unsigned char *)*v62;
        qmemcpy(v88, v89, sizeof(v88));
        *(void *)type = v64;
        swift_bridgeObjectRetain(v64);
        BOOL v107 = v65;
        swift_bridgeObjectRetain((_BYTE)v65);
        outlined retain of BlobsFile(v88);
        uint64_t v94 = v63;
        int v66 = log;
        uint64_t v71 = BlobsFile.floatBlob(at:)(v63, (uint64_t)&v89[88], v67, v68, v69, v70);
        os_log_t log = v66;
        if (v66) {
          break;
        }
        uint64_t v72 = v71;
        outlined release of BlobsFile(v88);
        long long v102 = v72;
        uint64_t v73 = *(void *)type;
        swift_bridgeObjectRetain(type[0]);
        uint64_t v74 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [Float]);
        uint64_t v75 = lazy protocol witness table accessor for type [Float] and conformance [A]();
        uint64_t v76 = v100;
        MLShapedArray.init<A>(scalars:shape:)(&v102, v73, &type metadata for Float, v74, &protocol witness table for Float, v75);
        uint64_t v77 = v92;
        uint64_t v78 = v98;
        (*(void (**)(unsigned char *, unsigned char *, uint64_t))(v99 + 16))(v92, v76, v98);
        long long v102 = v95;
        LOBYTE(v76) = (_BYTE)v107;
        v103[0] = v107;
        swift_bridgeObjectRetain((_BYTE)v107);
        AnnotatedFeature.init(feature:annotation:)(v77, &v102, v78, &type metadata for String);
        swift_bridgeObjectRelease((_BYTE)v76);
        swift_bridgeObjectRelease(type[0]);
        uint64_t v79 = *(void **)&v89[88];
        if (!swift_isUniquelyReferenced_nonNull_native(*(void *)&v89[88])) {
          uint64_t v79 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v79[2] + 1, 1, (uint64_t)v79);
        }
        unint64_t v80 = v79[2];
        unint64_t v81 = v79[3];
        int64_t v82 = v80 + 1;
        if (v81 >> 1 <= v80)
        {
          *(void *)type = v80 + 1;
          uint64_t v85 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(v81 >= 2, v82, 1, (uint64_t)v79);
          int64_t v82 = *(void *)type;
          uint64_t v79 = v85;
        }
        uint64_t v83 = v94 + 1;
        v79[2] = v82;
        uint64_t v84 = (char *)v79
            + ((*(unsigned __int8 *)(v91 + 80) + 32) & ~*(unsigned __int8 *)(v91 + 80))
            + *(void *)(v91 + 72) * v80;
        uint64_t v63 = v83;
        (*(void (**)(char *, unsigned char *, uint64_t))(v91 + 32))(v84, v97, v90);
        *(void *)&v89[88] = v79;
        (*(void (**)(unsigned char *, uint64_t))(v99 + 8))(v100, v98);
        uint64_t v62 = v93 + 3;
        if (v96 == v63) {
          goto LABEL_20;
        }
      }
      swift_release();
      outlined consume of Data._Representation(v106, v111);
      outlined release of BlobsFile(v88);
      swift_bridgeObjectRelease((_BYTE)v107);
      swift_bridgeObjectRelease(type[0]);
      uint64_t v86 = v109;
      v33(v110, v109);
      swift_bridgeObjectRelease((_BYTE)v108);
      v33((uint64_t)v105, v86);
      v33((uint64_t)v104, v86);
      goto LABEL_8;
    }
LABEL_20:
    swift_release();
    outlined consume of Data._Representation(v106, v111);
    uint64_t v34 = v109;
    v33(v110, v109);
    swift_bridgeObjectRelease((_BYTE)v108);
LABEL_6:
    uint64_t v35 = v101;
    v33((uint64_t)v105, v34);
    v33((uint64_t)v104, v34);
    uint64_t result = *(void *)&v89[72];
    long long v37 = *(_OWORD *)&v89[80];
    uint64_t v38 = *(void *)&v89[16];
    long long v39 = *(_OWORD *)&v89[24];
    long long v40 = *(_OWORD *)&v89[40];
    long long v41 = *(_OWORD *)&v89[56];
    *(_OWORD *)uint64_t v35 = *(_OWORD *)v89;
    *(void *)(v35 + 16) = v38;
    *(_OWORD *)(v35 + 24) = v39;
    *(_OWORD *)(v35 + 40) = v40;
    *(_OWORD *)(v35 + 56) = v41;
    *(void *)(v35 + 72) = result;
    *(_OWORD *)(v35 + 80) = v37;
    return result;
  }
  uint64_t v32 = *(void (**)(uint64_t, uint64_t))(*(void *)type + 8);
  v32(v110, v109);
  v32((uint64_t)v105, v31);
  v32((uint64_t)v27, v31);
LABEL_8:
  long long v47 = *(_OWORD *)&v89[80];
  outlined consume of Data._Representation(*(uint64_t *)v89, *(unint64_t *)&v89[8]);
  swift_bridgeObjectRelease(BYTE8(v47));
  return swift_bridgeObjectRelease(v47);
}

uint64_t AnnotatedFeatureStore.write(to:)(uint64_t a1)
{
  uint64_t v3 = v2;
  uint64_t v5 = type metadata accessor for URL(0);
  uint64_t v6 = *(void *)(v5 - 8);
  int64_t v7 = *(void *)(v6 + 64);
  uint64_t v8 = alloca(v7);
  int64_t v9 = alloca(v7);
  uint64_t v10 = alloca(v7);
  uint64_t v11 = alloca(v7);
  uint64_t result = *(void *)(v3 + 88);
  uint64_t v13 = *(void *)(result + 16);
  if (v13)
  {
    uint64_t v29 = &v22;
    uint64_t v23 = v6;
    uint64_t v26 = a1;
    uint64_t v22 = (uint64_t)&v22;
    uint64_t v27 = v5;
    os_log_t v28 = v1;
    os_log_type_t v14 = static os_log_type_t.debug.getter();
    type metadata accessor for OS_os_log();
    outlined retain of AnnotatedFeatureStore((uint64_t *)v3);
    outlined retain of AnnotatedFeatureStore((uint64_t *)v3);
    uint64_t v15 = (os_log_s *)static OS_os_log.default.getter(v3);
    if (os_log_type_enabled(v15, v14))
    {
      uint64_t v16 = (_DWORD *)swift_slowAlloc(22, -1);
      *(_DWORD *)type = v14;
      int64_t v17 = v16;
      *uint64_t v16 = 134218240;
      uint64_t v25 = v13;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v25, &v26, v16 + 1, v16 + 3);
      *((_WORD *)v17 + 6) = 2048;
      outlined release of AnnotatedFeatureStore((uint64_t *)v3);
      uint64_t v25 = *(unsigned int *)(v3 + 16);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v25, &v26, (char *)v17 + 14, (char *)v17 + 22);
      outlined release of AnnotatedFeatureStore((uint64_t *)v3);
      _os_log_impl(&dword_0, v15, type[0], "Writing AnnotatedFeatureStore with %ld elements and %ld blobs", (uint8_t *)v17, 0x16u);
      swift_slowDealloc(v17, -1, -1);
    }
    else
    {

      outlined release of AnnotatedFeatureStore((uint64_t *)v3);
      outlined release of AnnotatedFeatureStore((uint64_t *)v3);
    }
    uint64_t v18 = v28;
    uint64_t result = static _FileUtilities.prepareForWriting(to:isDirectory:)(v26, 1);
    if (!v18)
    {
      uint64_t v19 = (uint64_t)v29;
      URL.appendingPathComponent(_:)(0x617461646174656DLL, 0xED00006E6F736A2ELL);
      AnnotatedFeatureStore.writeMetadata(to:)(v19);
      os_log_t v28 = *(void (**)(void, void))(v23 + 8);
      v28(v29, v27);
      uint64_t v20 = *(void *)v3;
      uint64_t v29 = *(uint64_t **)(v3 + 8);
      uint64_t v21 = v22;
      URL.appendingPathComponent(_:)(0x7365727574616566, 0xEC0000006E69622ELL);
      Data.write(to:options:)(v21, 1, v20, v29);
      return ((uint64_t (*)(uint64_t, uint64_t))v28)(v21, v27);
    }
  }
  return result;
}

uint64_t *outlined retain of AnnotatedFeatureStore(uint64_t *a1)
{
  uint64_t v1 = a1[10];
  uint64_t v2 = a1[11];
  outlined copy of Data._Representation(*a1, a1[1]);
  swift_bridgeObjectRetain(v1);
  swift_bridgeObjectRetain(v2);
  return a1;
}

uint64_t *outlined release of AnnotatedFeatureStore(uint64_t *a1)
{
  uint64_t v1 = a1[10];
  uint64_t v2 = a1[11];
  outlined consume of Data._Representation(*a1, a1[1]);
  swift_bridgeObjectRelease(v2);
  swift_bridgeObjectRelease(v1);
  return a1;
}

uint64_t AnnotatedFeatureStore.writeMetadata(to:)(uint64_t a1)
{
  uint64_t v48 = v1;
  uint64_t v49 = a1;
  uint64_t v41 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for MLShapedArray<Float>);
  uint64_t v42 = *(void *)(v41 - 8);
  int64_t v3 = *(void *)(v42 + 64);
  uint64_t v4 = alloca(v3);
  uint64_t v5 = alloca(v3);
  uint64_t v43 = &v34;
  uint64_t v44 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AnnotatedFeature<MLShapedArray<Float>, String>);
  uint64_t v6 = *(void *)(v44 - 8);
  int64_t v7 = *(void *)(v6 + 64);
  uint64_t v8 = alloca(v7);
  int64_t v9 = alloca(v7);
  unint64_t v52 = &v34;
  uint64_t v10 = *(void *)(v2 + 88);
  uint64_t v35 = v10;
  int64_t v11 = *(void *)(v10 + 16);
  if (v11)
  {
    uint64_t v51 = _swiftEmptyArrayStorage;
    swift_bridgeObjectRetain(v10);
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v11, 0);
    uint64_t v12 = v10 + ((*(unsigned __int8 *)(v6 + 80) + 32) & ~*(unsigned __int8 *)(v6 + 80));
    uint64_t v46 = *(void (**)(uint64_t *, uint64_t, uint64_t))(v6 + 16);
    uint64_t v47 = *(void *)(v6 + 72);
    uint64_t v13 = v51;
    uint64_t v45 = v6;
    do
    {
      int64_t v37 = v11;
      uint64_t v50 = v13;
      uint64_t v38 = v12;
      uint64_t v14 = v44;
      v46(v52, v12, v44);
      uint64_t v15 = v43;
      AnnotatedFeature.feature.getter(v14);
      uint64_t v16 = v41;
      uint64_t v39 = MLShapedArray.shape.getter(v41);
      int64_t v17 = v15;
      uint64_t v13 = v50;
      (*(void (**)(uint64_t *, uint64_t))(v42 + 8))(v17, v16);
      uint64_t v18 = v52;
      AnnotatedFeature.annotation.getter(v14);
      uint64_t v19 = (void *)v36[0];
      uint64_t v40 = v36[1];
      (*(void (**)(uint64_t *, uint64_t))(v45 + 8))(v18, v14);
      if (!swift_isUniquelyReferenced_nonNull_native(v13))
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v13[2] + 1, 1);
        uint64_t v13 = v51;
      }
      unint64_t v20 = v13[2];
      unint64_t v21 = v13[3];
      unint64_t v22 = v20 + 1;
      if (v21 >> 1 <= v20)
      {
        uint64_t v50 = v19;
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v21 >= 2, v20 + 1, 1);
        unint64_t v22 = v20 + 1;
        uint64_t v19 = v50;
        uint64_t v13 = v51;
      }
      v13[2] = v22;
      uint64_t v23 = 3 * v20;
      v13[v23 + 4] = v39;
      v13[v23 + 5] = v19;
      v13[v23 + 6] = v40;
      uint64_t v12 = v47 + v38;
      int64_t v11 = v37 - 1;
    }
    while (v37 != 1);
    outlined release of [Int?](&v35);
  }
  else
  {
    uint64_t v13 = _swiftEmptyArrayStorage;
  }
  uint64_t v24 = type metadata accessor for JSONEncoder(0);
  swift_allocObject(v24, *(unsigned int *)(v24 + 48), *(unsigned __int16 *)(v24 + 52));
  uint64_t v25 = JSONEncoder.init()();
  v36[0] = v13;
  uint64_t v26 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [Metadata]);
  uint64_t v27 = lazy protocol witness table accessor for type [Metadata] and conformance <A> [A](&lazy protocol witness table cache variable for type [Metadata] and conformance <A> [A], (void (*)(void))lazy protocol witness table accessor for type Metadata and conformance Metadata, (uint64_t)&protocol conformance descriptor for <A> [A]);
  unint64_t v52 = (uint64_t *)v25;
  uint64_t v28 = v48;
  uint64_t v29 = dispatch thunk of JSONEncoder.encode<A>(_:)(v36, v26, v27);
  if (v28)
  {
    swift_bridgeObjectRelease((_BYTE)v13);
  }
  else
  {
    uint64_t v32 = v29;
    unint64_t v33 = v30;
    swift_bridgeObjectRelease((_BYTE)v13);
    Data.write(to:options:)(v49, 0, v32, v33);
    outlined consume of Data._Representation(v32, v33);
  }
  return swift_release();
}

char Metadata.CodingKeys.init(stringValue:)(uint64_t a1, unint64_t a2)
{
  if (a1 == 0x5365727574616566 && a2 == 0xEC00000065706168)
  {
    unint64_t v2 = 0xEC00000065706168;
LABEL_6:
    swift_bridgeObjectRelease(v2);
    return 0;
  }
  if (_stringCompareWithSmolCheck(_:_:expecting:)(0x5365727574616566, 0xEC00000065706168, a1, a2, 0))
  {
    unint64_t v2 = a2;
    goto LABEL_6;
  }
  if (a1 == 0x697461746F6E6E61 && a2 == 0xEA00000000006E6FLL)
  {
    swift_bridgeObjectRelease(0xEA00000000006E6FLL);
    return 1;
  }
  else
  {
    char v4 = _stringCompareWithSmolCheck(_:_:expecting:)(0x697461746F6E6E61, 0xEA00000000006E6FLL, a1, a2, 0);
    swift_bridgeObjectRelease(a2);
    return 2 - (v4 & 1);
  }
}

uint64_t Metadata.CodingKeys.stringValue.getter(char a1)
{
  uint64_t result = 0x697461746F6E6E61;
  if ((a1 & 1) == 0) {
    return 0x5365727574616566;
  }
  return result;
}

uint64_t Metadata.encode(to:)(void *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v17 = v4;
  uint64_t v20 = a4;
  uint64_t v21 = a3;
  uint64_t v19 = a2;
  uint64_t v18 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<Metadata.CodingKeys>);
  uint64_t v22 = *(void *)(v18 - 8);
  int64_t v5 = *(void *)(v22 + 64);
  uint64_t v6 = alloca(v5);
  int64_t v7 = alloca(v5);
  uint64_t v8 = a1[3];
  uint64_t v9 = a1[4];
  __swift_project_boxed_opaque_existential_0Tm(a1, v8);
  uint64_t v10 = lazy protocol witness table accessor for type Metadata.CodingKeys and conformance Metadata.CodingKeys();
  dispatch thunk of Encoder.container<A>(keyedBy:)(&unk_397FF8, &unk_397FF8, v10, v8, v9);
  uint64_t v16 = v19;
  char v23 = 0;
  uint64_t v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [Int]);
  uint64_t v12 = lazy protocol witness table accessor for type [Int] and conformance <A> [A](&lazy protocol witness table cache variable for type [Int] and conformance <A> [A], (uint64_t)&protocol witness table for Int, (uint64_t)&protocol conformance descriptor for <A> [A]);
  uint64_t v13 = v18;
  uint64_t v14 = v17;
  KeyedEncodingContainer.encode<A>(_:forKey:)(&v16, &v23, v18, v11, v12);
  if (!v14)
  {
    v24[0] = 1;
    KeyedEncodingContainer.encode(_:forKey:)(v21, v20, v24, v13);
  }
  return (*(uint64_t (**)(uint64_t *, uint64_t))(v22 + 8))(&v16, v13);
}

uint64_t *Metadata.init(from:)(void *a1)
{
  uint64_t v20 = v1;
  uint64_t v17 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<Metadata.CodingKeys>);
  uint64_t v18 = *(void *)(v17 - 8);
  int64_t v2 = *(void *)(v18 + 64);
  int64_t v3 = alloca(v2);
  uint64_t v4 = alloca(v2);
  int64_t v5 = &v15;
  uint64_t v6 = a1[3];
  uint64_t v19 = (uint64_t *)a1[4];
  __swift_project_boxed_opaque_existential_0Tm(a1, v6);
  uint64_t v7 = lazy protocol witness table accessor for type Metadata.CodingKeys and conformance Metadata.CodingKeys();
  uint64_t v21 = &v15;
  uint64_t v8 = v20;
  dispatch thunk of Decoder.container<A>(keyedBy:)(&unk_397FF8, &unk_397FF8, v7, v6, v19);
  if (v8)
  {
    __swift_destroy_boxed_opaque_existential_1Tm(a1);
  }
  else
  {
    uint64_t v20 = a1;
    uint64_t v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [Int]);
    char v22 = 0;
    uint64_t v10 = lazy protocol witness table accessor for type [Int] and conformance <A> [A](&lazy protocol witness table cache variable for type [Int] and conformance <A> [A], (uint64_t)&protocol witness table for Int, (uint64_t)&protocol conformance descriptor for <A> [A]);
    uint64_t v11 = v17;
    KeyedDecodingContainer.decode<A>(_:forKey:)(v9, &v22, v17, v9, v10);
    v23[0] = 1;
    uint64_t v19 = v16;
    swift_bridgeObjectRetain((_BYTE)v16);
    KeyedDecodingContainer.decode(_:forKey:)(v23, v11);
    char v14 = v13;
    (*(void (**)(uint64_t *, uint64_t))(v18 + 8))(v21, v11);
    swift_bridgeObjectRetain(v14);
    __swift_destroy_boxed_opaque_existential_1Tm(v20);
    swift_bridgeObjectRelease(v14);
    int64_t v5 = v19;
    swift_bridgeObjectRelease((_BYTE)v19);
  }
  return v5;
}

uint64_t protocol witness for CodingKey.stringValue.getter in conformance Metadata.CodingKeys()
{
  return Metadata.CodingKeys.stringValue.getter(*v0);
}

char protocol witness for CodingKey.init(stringValue:) in conformance Metadata.CodingKeys(uint64_t a1, unint64_t a2)
{
  int64_t v3 = v2;
  char result = Metadata.CodingKeys.init(stringValue:)(a1, a2);
  char *v3 = result;
  return result;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance Metadata.CodingKeys(uint64_t a1)
{
  uint64_t v1 = lazy protocol witness table accessor for type Metadata.CodingKeys and conformance Metadata.CodingKeys();
  return CodingKey.description.getter(a1, v1);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance Metadata.CodingKeys(uint64_t a1)
{
  uint64_t v1 = lazy protocol witness table accessor for type Metadata.CodingKeys and conformance Metadata.CodingKeys();
  return CodingKey.debugDescription.getter(a1, v1);
}

uint64_t *protocol witness for Decodable.init(from:) in conformance Metadata(void *a1)
{
  int64_t v3 = v1;
  char result = Metadata.init(from:)(a1);
  if (!v2)
  {
    char *v3 = result;
    v3[1] = v5;
    v3[2] = v6;
  }
  return result;
}

uint64_t protocol witness for Encodable.encode(to:) in conformance Metadata(void *a1)
{
  return Metadata.encode(to:)(a1, *v1, v1[1], v1[2]);
}

uint64_t lazy protocol witness table accessor for type Metadata and conformance Metadata()
{
  uint64_t result = lazy protocol witness table cache variable for type Metadata and conformance Metadata;
  if (!lazy protocol witness table cache variable for type Metadata and conformance Metadata)
  {
    uint64_t result = swift_getWitnessTable(&protocol conformance descriptor for Metadata, &type metadata for Metadata);
    lazy protocol witness table cache variable for type Metadata and conformance Metadata = result;
  }
  return result;
}

{
  uint64_t result;

  uint64_t result = lazy protocol witness table cache variable for type Metadata and conformance Metadata;
  if (!lazy protocol witness table cache variable for type Metadata and conformance Metadata)
  {
    uint64_t result = swift_getWitnessTable(&protocol conformance descriptor for Metadata, &type metadata for Metadata);
    lazy protocol witness table cache variable for type Metadata and conformance Metadata = result;
  }
  return result;
}

uint64_t lazy protocol witness table accessor for type [Metadata] and conformance <A> [A](uint64_t *a1, void (*a2)(void), uint64_t a3)
{
  uint64_t result = *a1;
  if (!*a1)
  {
    uint64_t v5 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for [Metadata]);
    a2();
    uint64_t result = swift_getWitnessTable(a3, v5);
    *a1 = result;
  }
  return result;
}

uint64_t outlined assign with take of BlobsFile(uint64_t a1, uint64_t a2)
{
  return a2;
}

uint64_t *outlined retain of BlobsFile(uint64_t *a1)
{
  uint64_t v1 = a1[10];
  outlined copy of Data._Representation(*a1, a1[1]);
  swift_bridgeObjectRetain(v1);
  return a1;
}

uint64_t lazy protocol witness table accessor for type [Float] and conformance [A]()
{
  uint64_t result = lazy protocol witness table cache variable for type [Float] and conformance [A];
  if (!lazy protocol witness table cache variable for type [Float] and conformance [A])
  {
    uint64_t v1 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for [Float]);
    uint64_t result = swift_getWitnessTable(&protocol conformance descriptor for [A], v1);
    lazy protocol witness table cache variable for type [Float] and conformance [A] = result;
  }
  return result;
}

uint64_t *initializeBufferWithCopyOfBuffer for Metadata(uint64_t *a1, uint64_t *a2)
{
  return initializeBufferWithCopyOfBuffer for Metadata(a1, a2);
}

{
  uint64_t v3;
  uint64_t v4;

  int64_t v3 = *a2;
  *a1 = *a2;
  a1[1] = a2[1];
  uint64_t v4 = a2[2];
  a1[2] = v4;
  swift_bridgeObjectRetain(v3);
  swift_bridgeObjectRetain(v4);
  return a1;
}

uint64_t destroy for Metadata(void *a1)
{
  return swift_bridgeObjectRelease(a1[2]);
}

uint64_t *assignWithCopy for Metadata(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3 = *a2;
  uint64_t v4 = *a1;
  *a1 = *a2;
  swift_bridgeObjectRetain(v3);
  swift_bridgeObjectRelease(v4);
  a1[1] = a2[1];
  uint64_t v5 = a2[2];
  uint64_t v6 = a1[2];
  a1[2] = v5;
  swift_bridgeObjectRetain(v5);
  swift_bridgeObjectRelease(v6);
  return a1;
}

uint64_t *assignWithTake for Metadata(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3 = *a1;
  *a1 = *a2;
  swift_bridgeObjectRelease(v3);
  a1[1] = a2[1];
  uint64_t v4 = a1[2];
  a1[2] = a2[2];
  swift_bridgeObjectRelease(v4);
  return a1;
}

uint64_t getEnumTagSinglePayload for Metadata(uint64_t a1, int a2)
{
  if (a2)
  {
    if (a2 < 0 && *(unsigned char *)(a1 + 24)) {
      int v2 = *(_DWORD *)a1 + 0x7FFFFFFF;
    }
    else {
      int v2 = (*(void *)a1 & 0xFFFFFFFF00000001) != 0 ? -1 : *(void *)a1 >> 1;
    }
  }
  else
  {
    int v2 = -1;
  }
  return (v2 + 1);
}

void storeEnumTagSinglePayload for Metadata(uint64_t a1, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(a1 + 8) = 0;
    *(void *)a1 = a2 + 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(a1 + 24) = 1;
    }
  }
  else
  {
    if (a3 < 0) {
      *(unsigned char *)(a1 + 24) = 0;
    }
    if (a2) {
      *(void *)a1 = 2 * (a2 - 1);
    }
  }
}

ValueMetadata *type metadata accessor for Metadata()
{
  return &type metadata for Metadata;
}

uint64_t lazy protocol witness table accessor for type Metadata.CodingKeys and conformance Metadata.CodingKeys()
{
  uint64_t result = lazy protocol witness table cache variable for type Metadata.CodingKeys and conformance Metadata.CodingKeys;
  if (!lazy protocol witness table cache variable for type Metadata.CodingKeys and conformance Metadata.CodingKeys)
  {
    uint64_t result = swift_getWitnessTable(&protocol conformance descriptor for Metadata.CodingKeys, &unk_397FF8);
    lazy protocol witness table cache variable for type Metadata.CodingKeys and conformance Metadata.CodingKeys = result;
  }
  return result;
}

{
  uint64_t result;

  uint64_t result = lazy protocol witness table cache variable for type Metadata.CodingKeys and conformance Metadata.CodingKeys;
  if (!lazy protocol witness table cache variable for type Metadata.CodingKeys and conformance Metadata.CodingKeys)
  {
    uint64_t result = swift_getWitnessTable(&protocol conformance descriptor for Metadata.CodingKeys, &unk_397FF8);
    lazy protocol witness table cache variable for type Metadata.CodingKeys and conformance Metadata.CodingKeys = result;
  }
  return result;
}

{
  uint64_t result;

  uint64_t result = lazy protocol witness table cache variable for type Metadata.CodingKeys and conformance Metadata.CodingKeys;
  if (!lazy protocol witness table cache variable for type Metadata.CodingKeys and conformance Metadata.CodingKeys)
  {
    uint64_t result = swift_getWitnessTable(&protocol conformance descriptor for Metadata.CodingKeys, &unk_397FF8);
    lazy protocol witness table cache variable for type Metadata.CodingKeys and conformance Metadata.CodingKeys = result;
  }
  return result;
}

{
  uint64_t result;

  uint64_t result = lazy protocol witness table cache variable for type Metadata.CodingKeys and conformance Metadata.CodingKeys;
  if (!lazy protocol witness table cache variable for type Metadata.CodingKeys and conformance Metadata.CodingKeys)
  {
    uint64_t result = swift_getWitnessTable(&protocol conformance descriptor for Metadata.CodingKeys, &unk_397FF8);
    lazy protocol witness table cache variable for type Metadata.CodingKeys and conformance Metadata.CodingKeys = result;
  }
  return result;
}

uint64_t lazy protocol witness table accessor for type [Int] and conformance <A> [A](uint64_t *a1, uint64_t a2, uint64_t a3)
{
  uint64_t result = *a1;
  if (!*a1)
  {
    uint64_t v5 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for [Int]);
    uint64_t result = swift_getWitnessTable(a3, v5);
    *a1 = result;
  }
  return result;
}

uint64_t storeEnumTagSinglePayload for Metadata.CodingKeys(unsigned char *a1, unsigned int a2, unsigned int a3)
{
  LODWORD(result) = 0;
  if (a3 >= 0xFF)
  {
    unsigned int v4 = a3 + 1;
    LODWORD(result) = 1;
    if (v4 >= 0xFF00) {
      LODWORD(result) = 2 * (v4 >= 0xFFFF00) + 2;
    }
  }
  if (a2 > 0xFE)
  {
    unsigned int v5 = a2 - 255;
    int v6 = (v5 >> 8) + 1;
    *a1 = v5;
    uint64_t result = result;
    switch((int)result)
    {
      case 0:
        return result;
      case 1:
        a1[1] = v6;
        break;
      case 2:
        *(_WORD *)(a1 + 1) = v6;
        break;
      case 3:
LABEL_16:
        BUG();
      case 4:
        *(_DWORD *)(a1 + 1) = v6;
        break;
    }
  }
  else
  {
    uint64_t result = result;
    switch((int)result)
    {
      case 0:
        goto LABEL_11;
      case 1:
        a1[1] = 0;
        goto LABEL_11;
      case 2:
        *(_WORD *)(a1 + 1) = 0;
        goto LABEL_11;
      case 3:
        goto LABEL_16;
      case 4:
        *(_DWORD *)(a1 + 1) = 0;
LABEL_11:
        if (a2) {
          *a1 = a2 + 1;
        }
        break;
      case 5:
        JUMPOUT(0x6EBD4);
    }
  }
  return result;
}

void *type metadata accessor for Metadata.CodingKeys()
{
  return &unk_397FF8;
}

uint64_t base witness table accessor for Equatable in Metadata.CodingKeys()
{
  return lazy protocol witness table accessor for type Metadata.CodingKeys and conformance Metadata.CodingKeys();
}

uint64_t base witness table accessor for CustomDebugStringConvertible in Metadata.CodingKeys()
{
  return lazy protocol witness table accessor for type Metadata.CodingKeys and conformance Metadata.CodingKeys();
}

uint64_t base witness table accessor for CustomStringConvertible in Metadata.CodingKeys()
{
  return lazy protocol witness table accessor for type Metadata.CodingKeys and conformance Metadata.CodingKeys();
}

void *_sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSaySaySSG6tokens_AF6labelstG_AFs5NeverOTg5212_s8CreateML12MLWordTaggerV12trainingData11tokenColumn05labelH010parametersAC07TabularF00F5FrameV_S2SAC15ModelParametersVtKcfcSaySSGAM6tokens_AM6labelst_tcfu_33_29c983036b65b4698c68d5ff40418838AmN_AmOtAMTf3nnnpk_nTf1cn_n(uint64_t a1)
{
  int64_t v1 = *(void *)(a1 + 16);
  if (v1)
  {
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v1, 0);
    int v2 = (uint64_t *)(a1 + 32);
    do
    {
      int64_t v5 = v1;
      unint64_t v3 = _swiftEmptyArrayStorage[2];
      unint64_t v7 = _swiftEmptyArrayStorage[3];
      int64_t v8 = v3 + 1;
      uint64_t v6 = *v2;
      swift_bridgeObjectRetain(*v2);
      if (v7 >> 1 <= v3) {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v7 >= 2, v8, 1);
      }
      _swiftEmptyArrayStorage[2] = v8;
      _swiftEmptyArrayStorage[v3 + 4] = v6;
      v2 += 2;
      int64_t v1 = v5 - 1;
    }
    while (v5 != 1);
  }
  return _swiftEmptyArrayStorage;
}

void *_sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSay8CreateML11MLDataValueOG_SSsAE_pTg503_s8d97ML12MLWordTaggerV16createTextColumn_4name7context11TabularData0G0VySaySSGGAG0K5FrameV_S2StKFZAJSgt4AA11fG29OGSgKXEfU_AjQKXEfU_SSAPKXEfU_SSTf1cn_n(uint64_t a1, uint64_t a2, uint64_t a3)
{
  int64_t v3 = *(void *)(a1 + 16);
  if (v3)
  {
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v3, 0);
    unsigned int v4 = _swiftEmptyArrayStorage;
    for (i = (unsigned __int8 *)(a1 + 48); ; i += 24)
    {
      uint64_t v6 = v4;
      unint64_t v7 = (void *)*((void *)i - 2);
      int64_t v8 = (void *)*((void *)i - 1);
      char v22 = v7;
      char v23 = v8;
      if (*i != 2) {
        break;
      }
      outlined copy of MLDataValue(v7, v8, 2u);
      unsigned int v4 = v6;
      uint64_t v21 = v6;
      unint64_t v9 = v6[2];
      int64_t v10 = v9 + 1;
      if (v4[3] >> 1 <= v9)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v4[3] >= 2uLL, v10, 1);
        int64_t v10 = v9 + 1;
        unsigned int v4 = v21;
      }
      v4[2] = v10;
      uint64_t v11 = 2 * v9;
      v4[v11 + 4] = v22;
      v4[v11 + 5] = v23;
      if (!--v3)
      {
        uint64_t v17 = v4;
        swift_bridgeObjectRelease(a3);
        return v17;
      }
    }
    char v25 = *i;
    outlined copy of MLDataValue(v7, v8, *i);
    _StringGuts.grow(_:)(43);
    swift_bridgeObjectRetain(a3);
    swift_bridgeObjectRelease(0);
    *(void *)&long long v19 = a2;
    *((void *)&v19 + 1) = a3;
    v12._object = " in the data frame." + 0x8000000000000000;
    v12._countAndFlagsBits = 0xD000000000000029;
    String.append(_:)(v12);
    v12._object = (void *)lazy protocol witness table accessor for type MLCreateError and conformance MLCreateError();
    swift_allocError(&type metadata for MLCreateError, v12._object, 0, 0);
    *(_OWORD *)uint64_t v13 = v19;
    *(_OWORD *)(v13 + 16) = 0;
    *(_OWORD *)(v13 + 32) = 0;
    *(unsigned char *)(v13 + 48) = 1;
    swift_willThrow(&type metadata for MLCreateError, v12._object, v13, v14, v15, v16);
    outlined consume of MLDataValue(v22, v23, v25);
    swift_bridgeObjectRelease(a3);
    return (void *)swift_release();
  }
  else
  {
    swift_bridgeObjectRelease(a3);
    return _swiftEmptyArrayStorage;
  }
}

BOOL specialized Collection.isEmpty.getter()
{
  uint64_t v0 = type metadata accessor for DataFrame.Rows(0);
  uint64_t v1 = lazy protocol witness table accessor for type VNImageOption and conformance VNImageOption(&lazy protocol witness table cache variable for type DataFrame.Rows and conformance DataFrame.Rows, (uint64_t (*)(uint64_t))&type metadata accessor for DataFrame.Rows, (uint64_t)&protocol conformance descriptor for DataFrame.Rows);
  dispatch thunk of Collection.startIndex.getter(v0, v1);
  dispatch thunk of Collection.endIndex.getter(v0, v1);
  return v3 == v4;
}

{
  return specialized Collection.isEmpty.getter();
}

{
  return CMLSequence.size.getter() == 0;
}

{
  uint64_t v0;
  uint64_t v1;

  swift_retain();
  uint64_t v0 = CMLSequence.size.getter();
  uint64_t v1 = specialized RandomAccessCollection<>.distance(from:to:)(0, v0);
  swift_release();
  return v1 == 0;
}

{
  return MLDataTable.size.getter() == 0;
}

{
  return CMLSequence.size.getter() == 0;
}

{
  return CMLDictionary.size.getter() == 0;
}

uint64_t specialized Set.init<A>(_:)(uint64_t a1)
{
  uint64_t v1 = Set.init(minimumCapacity:)(*(void *)(a1 + 16), &type metadata for String, &protocol witness table for String);
  uint64_t v11 = v1;
  uint64_t v2 = *(void *)(a1 + 16);
  if (v2)
  {
    uint64_t v10 = a1;
    uint64_t v3 = (uint64_t *)(a1 + 40);
    do
    {
      uint64_t v4 = *(v3 - 1);
      uint64_t v5 = *v3;
      swift_bridgeObjectRetain(*v3);
      specialized Set._Variant.insert(_:)(&v8, v4, v5);
      swift_bridgeObjectRelease(v9);
      v3 += 2;
      --v2;
    }
    while (v2);
    swift_bridgeObjectRelease(v10);
    return v11;
  }
  else
  {
    uint64_t v6 = v1;
    swift_bridgeObjectRelease(a1);
  }
  return v6;
}

{
  uint64_t v1;
  uint64_t v2;
  int64_t v3;
  void *v4;
  void *v5;
  int64_t v6;
  void *v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t *v19;
  uint64_t v20;
  void (*v21)(uint64_t *, void);
  uint64_t *v22;
  unsigned char *v23;
  uint64_t v24;
  uint64_t v25;
  unsigned char v27[8];
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  unsigned char *v32;
  unsigned char *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;

  uint64_t v36 = a1;
  uint64_t v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Column<String>);
  uint64_t v2 = *(void *)(v1 - 8);
  int64_t v37 = v1;
  uint64_t v31 = v2;
  uint64_t v3 = *(void *)(v2 + 64);
  uint64_t v4 = alloca(v3);
  uint64_t v5 = alloca(v3);
  uint64_t v32 = v27;
  uint64_t v35 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for IndexingIterator<Column<String>>);
  uint64_t v6 = *(void *)(*(void *)(v35 - 8) + 64);
  unint64_t v7 = alloca(v6);
  uint64_t v8 = alloca(v6);
  uint64_t v9 = lazy protocol witness table accessor for type FullyConnectedNetworkClassifier<Float, String> and conformance FullyConnectedNetworkClassifier<A, B>(&lazy protocol witness table cache variable for type Column<String> and conformance Column<A>, &demangling cache variable for type metadata for Column<String>, (uint64_t)&protocol conformance descriptor for Column<A>);
  uint64_t v10 = dispatch thunk of Sequence.underestimatedCount.getter(v1, v9);
  uint64_t v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for String?);
  Swift::String v12 = lazy protocol witness table accessor for type String? and conformance <A> A?(&lazy protocol witness table cache variable for type String? and conformance <A> A?, &demangling cache variable for type metadata for String?);
  uint64_t v13 = Set.init(minimumCapacity:)(v10, v11, v12);
  uint64_t v34 = v13;
  uint64_t v14 = v37;
  dispatch thunk of Sequence.makeIterator()(v37, v9);
  uint64_t v15 = *(int *)(v35 + 36);
  uint64_t v16 = lazy protocol witness table accessor for type FullyConnectedNetworkClassifier<Float, String> and conformance FullyConnectedNetworkClassifier<A, B>(&lazy protocol witness table cache variable for type Column<String> and conformance Column<A>, &demangling cache variable for type metadata for Column<String>, (uint64_t)&protocol conformance descriptor for Column<A>);
  uint64_t v36 = v15;
  uint64_t v17 = *(void *)&v27[v15];
  uint64_t v35 = v16;
  dispatch thunk of Collection.endIndex.getter(v14, v16);
  if (v17 != v28)
  {
    unint64_t v33 = &v27[v36];
    uint64_t v18 = v37;
    long long v19 = (uint64_t *)&v27[v36];
    do
    {
      uint64_t v20 = v35;
      uint64_t v21 = (void (*)(uint64_t *, void))dispatch thunk of Collection.subscript.read(&v28, v19, v18, v35);
      uint64_t v36 = *v22;
      unint64_t v30 = v22[1];
      swift_bridgeObjectRetain(v30);
      v21(&v28, 0);
      char v23 = v32;
      uint64_t v24 = v31;
      (*(void (**)(unsigned char *, unsigned char *, uint64_t))(v31 + 16))(v32, v27, v37);
      dispatch thunk of Collection.formIndex(after:)(v19, v37, v20);
      (*(void (**)(unsigned char *, uint64_t))(v24 + 8))(v23, v37);
      uint64_t v18 = v37;
      specialized Set._Variant.insert(_:)(&v28, v36, v30);
      swift_bridgeObjectRelease(v29);
      char v25 = *v19;
      dispatch thunk of Collection.endIndex.getter(v18, v35);
    }
    while (v25 != v28);
    uint64_t v13 = v34;
  }
  outlined destroy of Either<LogisticRegressionClassifier<Float, String>, FullyConnectedNetworkClassifier<Float, String>>((uint64_t)v27, &demangling cache variable for type metadata for IndexingIterator<Column<String>>);
  return v13;
}

{
  uint64_t v1;
  int64_t v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  int64_t v7;
  void *v8;
  void *v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t *v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t *v21;
  uint64_t *v22;
  uint64_t v23;
  uint64_t v25;
  void (*v26)(uint64_t *, uint64_t, uint64_t);
  uint64_t *v27;
  uint64_t *v28;
  uint64_t *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;

  uint64_t v1 = type metadata accessor for URL(0);
  uint64_t v32 = *(void *)(v1 - 8);
  uint64_t v2 = *(void *)(v32 + 64);
  uint64_t v3 = alloca(v2);
  uint64_t v4 = alloca(v2);
  uint64_t v27 = &v25;
  uint64_t v5 = alloca(v2);
  uint64_t v6 = alloca(v2);
  uint64_t v28 = &v25;
  unint64_t v7 = *(void *)(*(void *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for URL?)
                             - 8)
                 + 64);
  uint64_t v8 = alloca(v7);
  uint64_t v9 = alloca(v7);
  uint64_t v10 = &v25;
  uint64_t v11 = *(void *)(a1 + 16);
  Swift::String v12 = lazy protocol witness table accessor for type VNImageOption and conformance VNImageOption(&lazy protocol witness table cache variable for type URL and conformance URL, (uint64_t (*)(uint64_t))&type metadata accessor for URL, (uint64_t)&protocol conformance descriptor for URL);
  uint64_t v31 = Set.init(minimumCapacity:)(v11, v1, v12);
  unint64_t v33 = a1;
  uint64_t v13 = *(void *)(a1 + 16);
  if (v13)
  {
    uint64_t v14 = v33 + ((*(unsigned __int8 *)(v32 + 80) + 32) & ~*(unsigned __int8 *)(v32 + 80));
    uint64_t v26 = *(void (**)(uint64_t *, uint64_t, uint64_t))(v32 + 16);
    unint64_t v30 = *(void *)(v32 + 72);
    uint64_t v29 = &v25;
    while (1)
    {
      v26(v10, v14, v1);
      __swift_storeEnumTagSinglePayload((uint64_t)v10, 0, 1, v1);
      if (__swift_getEnumTagSinglePayload((uint64_t)v10, 1, v1) == 1) {
        break;
      }
      uint64_t v15 = v14;
      uint64_t v16 = v27;
      uint64_t v17 = v10;
      uint64_t v18 = v1;
      long long v19 = v1;
      uint64_t v20 = v32;
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(v32 + 32))(v27, v17, v18);
      char v25 = v13;
      uint64_t v21 = v28;
      specialized Set._Variant.insert(_:)(v28, v16);
      char v22 = v21;
      char v23 = v25;
      (*(void (**)(uint64_t *, uint64_t))(v20 + 8))(v22, v19);
      uint64_t v1 = v19;
      uint64_t v10 = v29;
      uint64_t v14 = v30 + v15;
      uint64_t v13 = v23 - 1;
      if (!v13) {
        goto LABEL_5;
      }
    }
  }
  else
  {
LABEL_5:
    __swift_storeEnumTagSinglePayload((uint64_t)v10, 1, 1, v1);
  }
  swift_bridgeObjectRelease(v33);
  return v31;
}

{
  uint64_t v1;
  uint64_t v2;
  uint64_t i;
  uint64_t v4;
  uint64_t v5;
  uint64_t v7;
  uint64_t v8;

  uint64_t v1 = Set.init(minimumCapacity:)(*(void *)(a1 + 16), &type metadata for Int, &protocol witness table for Int);
  uint64_t v8 = v1;
  uint64_t v2 = *(void *)(a1 + 16);
  if (v2)
  {
    for (i = 0; i != v2; ++i)
    {
      uint64_t v4 = *(void *)(a1 + 8 * i + 32);
      specialized Set._Variant.insert(_:)(&v7, v4);
    }
    swift_bridgeObjectRelease(a1);
    return v8;
  }
  else
  {
    uint64_t v5 = v1;
    swift_bridgeObjectRelease(a1);
  }
  return v5;
}

{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  Swift::UInt v6;
  uint64_t v7;
  int v8;
  uint64_t v10[2];
  int v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  uint64_t v1 = *(void *)(a1 + 16);
  uint64_t v2 = lazy protocol witness table accessor for type MLRecommender.Identifier and conformance MLRecommender.Identifier();
  uint64_t v3 = Set.init(minimumCapacity:)(v1, &type metadata for MLRecommender.Identifier, v2);
  uint64_t v14 = v3;
  uint64_t v4 = *(void *)(a1 + 16);
  if (v4)
  {
    uint64_t v13 = a1;
    uint64_t v5 = (char *)(a1 + 48);
    do
    {
      Swift::String v12 = v4;
      uint64_t v6 = *((void *)v5 - 2);
      unint64_t v7 = *((void *)v5 - 1);
      uint64_t v8 = *v5;
      outlined copy of MLRecommender.Identifier(v6, v7, *v5);
      specialized Set._Variant.insert(_:)(v10, v6, v7, v8);
      outlined consume of MLRecommender.Identifier(v10[0], v10[1], v11);
      v5 += 24;
      uint64_t v4 = v12 - 1;
    }
    while (v12 != 1);
    swift_bridgeObjectRelease(v13);
    return v14;
  }
  else
  {
    swift_bridgeObjectRelease(a1);
  }
  return v3;
}

{
  int64_t v1;
  unint64_t v2;
  unint64_t v3;
  unint64_t v4;
  int64_t v5;
  unint64_t v6;
  int64_t v7;
  int64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  int64_t v24;
  uint64_t v25;

  char v22 = Set.init(minimumCapacity:)(*(void *)(a1 + 16), &type metadata for String, &protocol witness table for String);
  specialized _NativeDictionary.makeIterator()(a1);
  char v23 = v15;
  char v25 = v16;
  uint64_t v1 = v18;
  uint64_t v2 = v19;
  uint64_t v24 = (unint64_t)(v17 + 64) >> 6;
  while (1)
  {
    if (v2)
    {
      _BitScanForward64(&v3, v2);
      v2 &= v2 - 1;
      uint64_t v4 = v3 | (v1 << 6);
      goto LABEL_21;
    }
    uint64_t v5 = v1 + 1;
    if (__OFADD__(1, v1)) {
      BUG();
    }
    if (v5 >= v24) {
      goto LABEL_22;
    }
    uint64_t v6 = *(void *)(v25 + 8 * v5);
    if (!v6) {
      break;
    }
    unint64_t v7 = v1 + 1;
LABEL_20:
    _BitScanForward64(&v9, v6);
    uint64_t v2 = v6 & (v6 - 1);
    uint64_t v4 = v9 + (v7 << 6);
    uint64_t v1 = v7;
LABEL_21:
    uint64_t v10 = *(void *)(v23 + 48);
    uint64_t v11 = 16 * v4;
    Swift::String v12 = *(void *)(v10 + v11);
    uint64_t v13 = *(void *)(v10 + v11 + 8);
    swift_bridgeObjectRetain(v13);
    specialized Set._Variant.insert(_:)(&v20, v12, v13);
    swift_bridgeObjectRelease(v21);
  }
  unint64_t v7 = v1 + 2;
  if (v1 + 2 >= v24) {
    goto LABEL_22;
  }
  uint64_t v6 = *(void *)(v25 + 8 * v5 + 8);
  if (v6) {
    goto LABEL_20;
  }
  unint64_t v7 = v1 + 3;
  if (v1 + 3 >= v24) {
    goto LABEL_22;
  }
  uint64_t v6 = *(void *)(v25 + 8 * v5 + 16);
  if (v6) {
    goto LABEL_20;
  }
  unint64_t v7 = v1 + 4;
  if (v1 + 4 >= v24) {
    goto LABEL_22;
  }
  uint64_t v6 = *(void *)(v25 + 8 * v5 + 24);
  if (v6) {
    goto LABEL_20;
  }
  unint64_t v7 = v1 + 5;
  if (v1 + 5 >= v24) {
    goto LABEL_22;
  }
  uint64_t v6 = *(void *)(v25 + 8 * v5 + 32);
  if (v6) {
    goto LABEL_20;
  }
  uint64_t v8 = v1 + 6;
  while (v8 < v24)
  {
    uint64_t v6 = *(void *)(v25 + 8 * v8++);
    if (v6)
    {
      unint64_t v7 = v8 - 1;
      goto LABEL_20;
    }
  }
LABEL_22:
  swift_release();
  return v22;
}

{
  uint64_t v1;
  unint64_t v2;
  uint64_t *v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;

  uint64_t v13 = a1;
  uint64_t v1 = 0;
  uint64_t v14 = Set.init(minimumCapacity:)(0, &type metadata for String, &protocol witness table for String);
  uint64_t v15 = 0;
  while (1)
  {
    if (v1)
    {
      uint64_t v2 = *(void *)(v1 + 16);
      if (v2)
      {
        uint64_t v3 = (uint64_t *)(v1 + 40);
        uint64_t v4 = 0;
        do
        {
          if (v4 >= v2) {
            BUG();
          }
          ++v4;
          uint64_t v5 = v1;
          uint64_t v6 = *(v3 - 1);
          unint64_t v7 = *v3;
          swift_bridgeObjectRetain(*v3);
          uint64_t v8 = v6;
          uint64_t v1 = v5;
          specialized Set._Variant.insert(_:)(&v11, v8, v7);
          swift_bridgeObjectRelease(v12);
          uint64_t v2 = *(void *)(v5 + 16);
          v3 += 2;
        }
        while (v4 != v2);
      }
    }
    if (v15 == *(void *)(v13 + 16)) {
      break;
    }
    if (v15 >= *(void *)(v13 + 16)) {
      BUG();
    }
    uint64_t v9 = *(void *)(v13 + 8 * v15++ + 32);
    swift_bridgeObjectRetain(v9);
    swift_bridgeObjectRelease(v1);
    uint64_t v1 = v9;
  }
  swift_bridgeObjectRelease(v13);
  swift_bridgeObjectRelease(v1);
  return v14;
}

uint64_t specialized Set.init<A>(_:)()
{
  uint64_t v0 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for FilledColumn<Column<String>>);
  uint64_t v26 = *(void *)(v0 - 8);
  int64_t v1 = *(void *)(v26 + 64);
  uint64_t v2 = alloca(v1);
  uint64_t v3 = alloca(v1);
  uint64_t v27 = v25;
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for IndexingIterator<FilledColumn<Column<String>>>);
  int64_t v5 = *(void *)(*(void *)(v4 - 8) + 64);
  uint64_t v6 = alloca(v5);
  unint64_t v7 = alloca(v5);
  uint64_t v8 = lazy protocol witness table accessor for type FullyConnectedNetworkClassifier<Float, String> and conformance FullyConnectedNetworkClassifier<A, B>(&lazy protocol witness table cache variable for type FilledColumn<Column<String>> and conformance FilledColumn<A>, &demangling cache variable for type metadata for FilledColumn<Column<String>>, (uint64_t)&protocol conformance descriptor for FilledColumn<A>);
  uint64_t v9 = dispatch thunk of Sequence.underestimatedCount.getter(v0, v8);
  uint64_t v30 = Set.init(minimumCapacity:)(v9, &type metadata for String, &protocol witness table for String);
  uint64_t v28 = v30;
  dispatch thunk of Sequence.makeIterator()(v0, v8);
  uint64_t v10 = (uint64_t *)*(int *)(v4 + 36);
  uint64_t v11 = lazy protocol witness table accessor for type FullyConnectedNetworkClassifier<Float, String> and conformance FullyConnectedNetworkClassifier<A, B>(&lazy protocol witness table cache variable for type FilledColumn<Column<String>> and conformance FilledColumn<A>, &demangling cache variable for type metadata for FilledColumn<Column<String>>, (uint64_t)&protocol conformance descriptor for FilledColumn<A>);
  uint64_t v31 = v10;
  uint64_t v12 = *(uint64_t *)((char *)v25 + (void)v10);
  uint64_t v32 = v0;
  uint64_t v13 = v0;
  uint64_t v14 = v30;
  dispatch thunk of Collection.endIndex.getter(v13, v11);
  if (v12 != v25[0])
  {
    uint64_t v31 = (uint64_t *)((char *)v25 + (void)v31);
    uint64_t v15 = v32;
    uint64_t v29 = v11;
    do
    {
      uint64_t v16 = v31;
      uint64_t v17 = (void (*)(uint64_t *, void))dispatch thunk of Collection.subscript.read(v25, v31, v15, v11);
      uint64_t v30 = *v18;
      uint64_t v19 = v18[1];
      swift_bridgeObjectRetain(v19);
      v17(v25, 0);
      uint64_t v20 = v27;
      uint64_t v21 = v26;
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(v26 + 16))(v27, v25, v32);
      dispatch thunk of Collection.formIndex(after:)(v16, v32, v29);
      (*(void (**)(uint64_t *, uint64_t))(v21 + 8))(v20, v32);
      uint64_t v22 = v19;
      uint64_t v15 = v32;
      specialized Set._Variant.insert(_:)(v25, v30, v22);
      swift_bridgeObjectRelease(v25[1]);
      uint64_t v23 = *v16;
      dispatch thunk of Collection.endIndex.getter(v15, v29);
      uint64_t v11 = v29;
    }
    while (v23 != v25[0]);
    uint64_t v14 = v28;
  }
  outlined destroy of Either<LogisticRegressionClassifier<Float, String>, FullyConnectedNetworkClassifier<Float, String>>((uint64_t)v25, &demangling cache variable for type metadata for IndexingIterator<FilledColumn<Column<String>>>);
  return v14;
}

{
  uint64_t v0;
  uint64_t v1;
  int64_t v2;
  void *v3;
  void *v4;
  int64_t v5;
  void *v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  Swift::UInt v13;
  uint64_t v14;
  uint64_t v15;
  unsigned char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t *v19;
  unsigned char *v20;
  void (*v21)(void *, void);
  uint64_t v22;
  unsigned char *v23;
  uint64_t v24;
  uint64_t v25;
  unsigned char v27[8];
  void v28[4];
  uint64_t v29;
  unsigned char *v30;
  uint64_t v31;
  uint64_t *v32;
  uint64_t v33;
  uint64_t v34;
  Swift::UInt v35;
  uint64_t v36;

  uint64_t v0 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for DiscontiguousColumnSlice<Int>);
  int64_t v1 = *(void *)(v0 - 8);
  uint64_t v36 = v0;
  uint64_t v29 = v1;
  uint64_t v2 = *(void *)(v1 + 64);
  uint64_t v3 = alloca(v2);
  uint64_t v4 = alloca(v2);
  uint64_t v30 = v27;
  uint64_t v35 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for IndexingIterator<DiscontiguousColumnSlice<Int>>);
  int64_t v5 = *(void *)(*(void *)(v35 - 8) + 64);
  uint64_t v6 = alloca(v5);
  unint64_t v7 = alloca(v5);
  uint64_t v34 = lazy protocol witness table accessor for type FullyConnectedNetworkClassifier<Float, String> and conformance FullyConnectedNetworkClassifier<A, B>(&lazy protocol witness table cache variable for type DiscontiguousColumnSlice<Int> and conformance DiscontiguousColumnSlice<A>, &demangling cache variable for type metadata for DiscontiguousColumnSlice<Int>, (uint64_t)&protocol conformance descriptor for DiscontiguousColumnSlice<A>);
  uint64_t v8 = dispatch thunk of Sequence.underestimatedCount.getter(v0, v34);
  uint64_t v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Int?);
  uint64_t v10 = lazy protocol witness table accessor for type String? and conformance <A> A?(&lazy protocol witness table cache variable for type Int? and conformance <A> A?, &demangling cache variable for type metadata for Int?);
  uint64_t v11 = Set.init(minimumCapacity:)(v8, v9, v10);
  unint64_t v33 = v11;
  uint64_t v12 = v36;
  dispatch thunk of Sequence.makeIterator()(v36, v34);
  uint64_t v13 = *(int *)(v35 + 36);
  uint64_t v14 = lazy protocol witness table accessor for type FullyConnectedNetworkClassifier<Float, String> and conformance FullyConnectedNetworkClassifier<A, B>(&lazy protocol witness table cache variable for type DiscontiguousColumnSlice<Int> and conformance DiscontiguousColumnSlice<A>, &demangling cache variable for type metadata for DiscontiguousColumnSlice<Int>, (uint64_t)&protocol conformance descriptor for DiscontiguousColumnSlice<A>);
  uint64_t v35 = v13;
  uint64_t v15 = *(void *)&v27[v13];
  uint64_t v31 = v14;
  dispatch thunk of Collection.endIndex.getter(v12, v14);
  uint64_t v16 = v27;
  if (v15 != v28[0])
  {
    uint64_t v32 = (uint64_t *)&v27[v35];
    uint64_t v17 = v36;
    uint64_t v18 = v31;
    do
    {
      uint64_t v19 = v32;
      uint64_t v20 = v16;
      uint64_t v21 = (void (*)(void *, void))dispatch thunk of Collection.subscript.read(v28, v32, v17, v18);
      uint64_t v35 = *(void *)v22;
      LODWORD(v34) = *(unsigned __int8 *)(v22 + 8);
      v21(v28, 0);
      uint64_t v23 = v30;
      uint64_t v24 = v29;
      (*(void (**)(unsigned char *, unsigned char *, uint64_t))(v29 + 16))(v30, v20, v36);
      dispatch thunk of Collection.formIndex(after:)(v19, v36, v18);
      (*(void (**)(unsigned char *, uint64_t))(v24 + 8))(v23, v36);
      uint64_t v17 = v36;
      specialized Set._Variant.insert(_:)((uint64_t)v28, v35, v34);
      char v25 = *v19;
      dispatch thunk of Collection.endIndex.getter(v17, v18);
      uint64_t v16 = v20;
    }
    while (v25 != v28[0]);
    uint64_t v11 = v33;
  }
  outlined destroy of Either<LogisticRegressionClassifier<Float, String>, FullyConnectedNetworkClassifier<Float, String>>((uint64_t)v16, &demangling cache variable for type metadata for IndexingIterator<DiscontiguousColumnSlice<Int>>);
  return v11;
}

{
  uint64_t v0;
  uint64_t v1;
  int64_t v2;
  void *v3;
  void *v4;
  int64_t v5;
  void *v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  Swift::UInt v13;
  uint64_t v14;
  uint64_t v15;
  unsigned char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t *v19;
  unsigned char *v20;
  void (*v21)(void *, void);
  uint64_t v22;
  unsigned char *v23;
  uint64_t v24;
  uint64_t v25;
  unsigned char v27[8];
  void v28[4];
  uint64_t v29;
  unsigned char *v30;
  uint64_t v31;
  uint64_t *v32;
  uint64_t v33;
  uint64_t v34;
  Swift::UInt v35;
  uint64_t v36;

  uint64_t v0 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Column<Int>);
  int64_t v1 = *(void *)(v0 - 8);
  uint64_t v36 = v0;
  uint64_t v29 = v1;
  uint64_t v2 = *(void *)(v1 + 64);
  uint64_t v3 = alloca(v2);
  uint64_t v4 = alloca(v2);
  uint64_t v30 = v27;
  uint64_t v35 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for IndexingIterator<Column<Int>>);
  int64_t v5 = *(void *)(*(void *)(v35 - 8) + 64);
  uint64_t v6 = alloca(v5);
  unint64_t v7 = alloca(v5);
  uint64_t v34 = lazy protocol witness table accessor for type FullyConnectedNetworkClassifier<Float, String> and conformance FullyConnectedNetworkClassifier<A, B>(&lazy protocol witness table cache variable for type Column<Int> and conformance Column<A>, &demangling cache variable for type metadata for Column<Int>, (uint64_t)&protocol conformance descriptor for Column<A>);
  uint64_t v8 = dispatch thunk of Sequence.underestimatedCount.getter(v0, v34);
  uint64_t v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Int?);
  uint64_t v10 = lazy protocol witness table accessor for type String? and conformance <A> A?(&lazy protocol witness table cache variable for type Int? and conformance <A> A?, &demangling cache variable for type metadata for Int?);
  uint64_t v11 = Set.init(minimumCapacity:)(v8, v9, v10);
  unint64_t v33 = v11;
  uint64_t v12 = v36;
  dispatch thunk of Sequence.makeIterator()(v36, v34);
  uint64_t v13 = *(int *)(v35 + 36);
  uint64_t v14 = lazy protocol witness table accessor for type FullyConnectedNetworkClassifier<Float, String> and conformance FullyConnectedNetworkClassifier<A, B>(&lazy protocol witness table cache variable for type Column<Int> and conformance Column<A>, &demangling cache variable for type metadata for Column<Int>, (uint64_t)&protocol conformance descriptor for Column<A>);
  uint64_t v35 = v13;
  uint64_t v15 = *(void *)&v27[v13];
  uint64_t v31 = v14;
  dispatch thunk of Collection.endIndex.getter(v12, v14);
  uint64_t v16 = v27;
  if (v15 != v28[0])
  {
    uint64_t v32 = (uint64_t *)&v27[v35];
    uint64_t v17 = v36;
    uint64_t v18 = v31;
    do
    {
      uint64_t v19 = v32;
      uint64_t v20 = v16;
      uint64_t v21 = (void (*)(void *, void))dispatch thunk of Collection.subscript.read(v28, v32, v17, v18);
      uint64_t v35 = *(void *)v22;
      LODWORD(v34) = *(unsigned __int8 *)(v22 + 8);
      v21(v28, 0);
      uint64_t v23 = v30;
      uint64_t v24 = v29;
      (*(void (**)(unsigned char *, unsigned char *, uint64_t))(v29 + 16))(v30, v20, v36);
      dispatch thunk of Collection.formIndex(after:)(v19, v36, v18);
      (*(void (**)(unsigned char *, uint64_t))(v24 + 8))(v23, v36);
      uint64_t v17 = v36;
      specialized Set._Variant.insert(_:)((uint64_t)v28, v35, v34);
      char v25 = *v19;
      dispatch thunk of Collection.endIndex.getter(v17, v18);
      uint64_t v16 = v20;
    }
    while (v25 != v28[0]);
    uint64_t v11 = v33;
  }
  outlined destroy of Either<LogisticRegressionClassifier<Float, String>, FullyConnectedNetworkClassifier<Float, String>>((uint64_t)v16, &demangling cache variable for type metadata for IndexingIterator<Column<Int>>);
  return v11;
}

void *specialized Set.init<A>(_:)()
{
  uint64_t v0 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for FilledColumn<Column<Int>>);
  uint64_t v27 = *(void *)(v0 - 8);
  int64_t v1 = *(void *)(v27 + 64);
  uint64_t v2 = alloca(v1);
  uint64_t v3 = alloca(v1);
  uint64_t v28 = v25;
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for IndexingIterator<FilledColumn<Column<Int>>>);
  int64_t v5 = *(void *)(*(void *)(v4 - 8) + 64);
  uint64_t v6 = alloca(v5);
  unint64_t v7 = alloca(v5);
  uint64_t v8 = lazy protocol witness table accessor for type FullyConnectedNetworkClassifier<Float, String> and conformance FullyConnectedNetworkClassifier<A, B>(&lazy protocol witness table cache variable for type FilledColumn<Column<Int>> and conformance FilledColumn<A>, &demangling cache variable for type metadata for FilledColumn<Column<Int>>, (uint64_t)&protocol conformance descriptor for FilledColumn<A>);
  uint64_t v9 = dispatch thunk of Sequence.underestimatedCount.getter(v0, v8);
  uint64_t v32 = (void *)Set.init(minimumCapacity:)(v9, &type metadata for Int, &protocol witness table for Int);
  uint64_t v30 = v32;
  dispatch thunk of Sequence.makeIterator()(v0, v8);
  uint64_t v10 = *(int *)(v4 + 36);
  uint64_t v11 = lazy protocol witness table accessor for type FullyConnectedNetworkClassifier<Float, String> and conformance FullyConnectedNetworkClassifier<A, B>(&lazy protocol witness table cache variable for type FilledColumn<Column<Int>> and conformance FilledColumn<A>, &demangling cache variable for type metadata for FilledColumn<Column<Int>>, (uint64_t)&protocol conformance descriptor for FilledColumn<A>);
  uint64_t v12 = v10;
  uint64_t v13 = *(uint64_t *)((char *)v25 + v10);
  uint64_t v29 = v0;
  uint64_t v31 = v11;
  dispatch thunk of Collection.endIndex.getter(v0, v11);
  uint64_t v14 = v32;
  if (v13 != v25[0])
  {
    uint64_t v32 = (uint64_t *)((char *)v25 + v12);
    uint64_t v15 = v29;
    do
    {
      uint64_t v16 = v32;
      uint64_t v17 = (void (*)(uint64_t *, void))dispatch thunk of Collection.subscript.read(v25, v32, v15, v31);
      uint64_t v26 = *v18;
      v17(v25, 0);
      uint64_t v19 = v28;
      uint64_t v20 = v27;
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(v27 + 16))(v28, v25, v15);
      uint64_t v21 = v16;
      uint64_t v22 = v31;
      dispatch thunk of Collection.formIndex(after:)(v21, v15, v31);
      (*(void (**)(uint64_t *, uint64_t))(v20 + 8))(v19, v15);
      specialized Set._Variant.insert(_:)(v25, v26);
      uint64_t v23 = *v32;
      dispatch thunk of Collection.endIndex.getter(v15, v22);
    }
    while (v23 != v25[0]);
    uint64_t v14 = v30;
  }
  outlined destroy of Either<LogisticRegressionClassifier<Float, String>, FullyConnectedNetworkClassifier<Float, String>>((uint64_t)v25, &demangling cache variable for type metadata for IndexingIterator<FilledColumn<Column<Int>>>);
  return v14;
}

uint64_t specialized Set.init<A>(_:)(uint64_t a1, void (*a2)(uint64_t *), uint64_t a3)
{
  uint64_t v4 = *(void *)(a1 + 16);
  uint64_t v5 = lazy protocol witness table accessor for type MLRecommender.Identifier and conformance MLRecommender.Identifier();
  uint64_t v6 = Set.init(minimumCapacity:)(v4, &type metadata for MLRecommender.Identifier, v5);
  uint64_t v32 = v6;
  uint64_t v7 = *(void *)(a1 + 16);
  if (v7)
  {
    uint64_t v31 = a1;
    uint64_t v30 = a2;
    uint64_t v8 = (void *)(a1 + 80);
    uint64_t v33 = a3;
    do
    {
      uint64_t v26 = v7;
      uint64_t v29 = *(v8 - 6);
      uint64_t v9 = *(v8 - 5);
      uint64_t v10 = *(v8 - 3);
      uint64_t v27 = v10;
      uint64_t v11 = *(v8 - 2);
      uint64_t v12 = *v8;
      char v13 = *((unsigned char *)v8 - 32);
      int v34 = *((unsigned __int8 *)v8 - 8);
      uint64_t v16 = v29;
      uint64_t v17 = v9;
      LOBYTE(v18) = v13;
      uint64_t v19 = v10;
      uint64_t v20 = v11;
      uint64_t v28 = v11;
      char v21 = v34;
      uint64_t v22 = v12;
      outlined copy of MLRecommender.Identifier(v29, v9, v13);
      uint64_t v14 = v11;
      LOBYTE(v11) = v34;
      outlined copy of MLRecommender.Identifier(v10, v14, v34);
      v30(&v16);
      outlined consume of MLRecommender.Identifier(v29, v9, v13);
      outlined consume of MLRecommender.Identifier(v27, v28, v11);
      specialized Set._Variant.insert(_:)(&v16, v23, v24, v25);
      outlined consume of MLRecommender.Identifier(v16, v17, v18);
      v8 += 7;
      uint64_t v7 = v26 - 1;
    }
    while (v26 != 1);
    swift_release();
    swift_bridgeObjectRelease(v31);
    return v32;
  }
  else
  {
    swift_release();
    swift_bridgeObjectRelease(a1);
  }
  return v6;
}

uint64_t specialized Array.append<A>(contentsOf:)(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 16);
  uint64_t v3 = (void *)*v1;
  int64_t v4 = *(void *)(*v1 + 16);
  int64_t v5 = v2 + v4;
  if (__OFADD__(v2, v4)) {
    BUG();
  }
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v1);
  if (!isUniquelyReferenced_nonNull_native || v3[3] >> 1 < v5)
  {
    if (v4 > v5) {
      int64_t v5 = v4;
    }
    uint64_t v3 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(isUniquelyReferenced_nonNull_native, v5, 1, (uint64_t)v3);
  }
  if (*(void *)(a1 + 16))
  {
    uint64_t v7 = v3[2];
    if ((v3[3] >> 1) - v7 < v2) {
      BUG();
    }
    specialized UnsafeMutablePointer.initialize(from:count:)(a1 + 32, v2, (unint64_t)&v3[2 * v7 + 4]);
    if (v2)
    {
      BOOL v8 = __OFADD__(v3[2], v2);
      uint64_t v9 = v3[2] + v2;
      if (v8) {
        BUG();
      }
      v3[2] = v9;
    }
  }
  else if (v2)
  {
    BUG();
  }
  uint64_t result = swift_bridgeObjectRelease(a1);
  *int64_t v1 = v3;
  return result;
}

{
  char **v1;
  uint64_t v2;
  char *v3;
  int64_t v4;
  int64_t v5;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v7;
  BOOL v8;
  uint64_t v9;
  uint64_t result;

  uint64_t v2 = *(void *)(a1 + 16);
  uint64_t v3 = *v1;
  int64_t v4 = *((void *)*v1 + 2);
  int64_t v5 = v2 + v4;
  if (__OFADD__(v2, v4)) {
    BUG();
  }
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v1);
  if (!isUniquelyReferenced_nonNull_native || *((void *)v3 + 3) >> 1 < v5)
  {
    if (v4 > v5) {
      int64_t v5 = v4;
    }
    uint64_t v3 = (char *)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(isUniquelyReferenced_nonNull_native, v5, 1, (uint64_t)v3);
  }
  if (*(void *)(a1 + 16))
  {
    uint64_t v7 = *((void *)v3 + 2);
    if ((*((void *)v3 + 3) >> 1) - v7 < v2) {
      BUG();
    }
    specialized UnsafeMutablePointer.initialize(from:count:)((char *)(a1 + 32), v2, &v3[4 * v7 + 32]);
    if (v2)
    {
      BOOL v8 = __OFADD__(*((void *)v3 + 2), v2);
      uint64_t v9 = *((void *)v3 + 2) + v2;
      if (v8) {
        BUG();
      }
      *((void *)v3 + 2) = v9;
    }
  }
  else if (v2)
  {
    BUG();
  }
  uint64_t result = swift_bridgeObjectRelease(a1);
  *int64_t v1 = v3;
  return result;
}

{
  void *v1;
  uint64_t v2;
  void *v3;
  int64_t v4;
  int64_t v5;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v7;
  BOOL v8;
  uint64_t v9;
  uint64_t result;

  uint64_t v2 = *(void *)(a1 + 16);
  uint64_t v3 = (void *)*v1;
  int64_t v4 = *(void *)(*v1 + 16);
  int64_t v5 = v2 + v4;
  if (__OFADD__(v2, v4)) {
    BUG();
  }
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v1);
  if (!isUniquelyReferenced_nonNull_native || v3[3] >> 1 < v5)
  {
    if (v4 > v5) {
      int64_t v5 = v4;
    }
    uint64_t v3 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(isUniquelyReferenced_nonNull_native, v5, 1, (uint64_t)v3);
  }
  if (*(void *)(a1 + 16))
  {
    uint64_t v7 = v3[2];
    if ((v3[3] >> 1) - v7 < v2) {
      BUG();
    }
    specialized UnsafeMutablePointer.initialize(from:count:)((char *)(a1 + 32), v2, (char *)&v3[v7 + 4]);
    if (v2)
    {
      BOOL v8 = __OFADD__(v3[2], v2);
      uint64_t v9 = v3[2] + v2;
      if (v8) {
        BUG();
      }
      v3[2] = v9;
    }
  }
  else if (v2)
  {
    BUG();
  }
  uint64_t result = swift_bridgeObjectRelease(a1);
  *int64_t v1 = v3;
  return result;
}

{
  char **v1;
  uint64_t v2;
  char *v3;
  int64_t v4;
  int64_t v5;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v7;
  BOOL v8;
  uint64_t v9;
  uint64_t result;

  uint64_t v2 = *(void *)(a1 + 16);
  uint64_t v3 = *v1;
  int64_t v4 = *((void *)*v1 + 2);
  int64_t v5 = v2 + v4;
  if (__OFADD__(v2, v4)) {
    BUG();
  }
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v1);
  if (!isUniquelyReferenced_nonNull_native || *((void *)v3 + 3) >> 1 < v5)
  {
    if (v4 > v5) {
      int64_t v5 = v4;
    }
    uint64_t v3 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(isUniquelyReferenced_nonNull_native, v5, 1, (uint64_t)v3);
  }
  if (*(void *)(a1 + 16))
  {
    uint64_t v7 = *((void *)v3 + 2);
    if ((*((void *)v3 + 3) >> 1) - v7 < v2) {
      BUG();
    }
    specialized UnsafeMutablePointer.initialize(from:count:)((char *)(a1 + 32), v2, &v3[8 * v7 + 32]);
    if (v2)
    {
      BOOL v8 = __OFADD__(*((void *)v3 + 2), v2);
      uint64_t v9 = *((void *)v3 + 2) + v2;
      if (v8) {
        BUG();
      }
      *((void *)v3 + 2) = v9;
    }
  }
  else if (v2)
  {
    BUG();
  }
  uint64_t result = swift_bridgeObjectRelease(a1);
  *int64_t v1 = v3;
  return result;
}

{
  void *v1;
  uint64_t v2;
  void *v3;
  int64_t v4;
  int64_t v5;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v7;
  BOOL v8;
  uint64_t v9;
  uint64_t result;

  uint64_t v2 = *(void *)(a1 + 16);
  uint64_t v3 = (void *)*v1;
  int64_t v4 = *(void *)(*v1 + 16);
  int64_t v5 = v2 + v4;
  if (__OFADD__(v2, v4)) {
    BUG();
  }
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v1);
  if (!isUniquelyReferenced_nonNull_native || v3[3] >> 1 < v5)
  {
    if (v4 > v5) {
      int64_t v5 = v4;
    }
    uint64_t v3 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(isUniquelyReferenced_nonNull_native, v5, 1, (uint64_t)v3);
  }
  if (*(void *)(a1 + 16))
  {
    uint64_t v7 = v3[2];
    if ((v3[3] >> 1) - v7 < v2) {
      BUG();
    }
    specialized UnsafeMutablePointer.initialize(from:count:)(a1 + 32, v2, (unint64_t)&v3[v7 + 4]);
    if (v2)
    {
      BOOL v8 = __OFADD__(v3[2], v2);
      uint64_t v9 = v3[2] + v2;
      if (v8) {
        BUG();
      }
      v3[2] = v9;
    }
  }
  else if (v2)
  {
    BUG();
  }
  uint64_t result = swift_bridgeObjectRelease(a1);
  *int64_t v1 = v3;
  return result;
}

{
  void *v1;
  uint64_t v2;
  void *v3;
  int64_t v4;
  int64_t v5;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v7;
  BOOL v8;
  uint64_t v9;
  uint64_t result;

  uint64_t v2 = *(void *)(a1 + 16);
  uint64_t v3 = (void *)*v1;
  int64_t v4 = *(void *)(*v1 + 16);
  int64_t v5 = v2 + v4;
  if (__OFADD__(v2, v4)) {
    BUG();
  }
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v1);
  if (!isUniquelyReferenced_nonNull_native || v3[3] >> 1 < v5)
  {
    if (v4 > v5) {
      int64_t v5 = v4;
    }
    uint64_t v3 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(isUniquelyReferenced_nonNull_native, v5, 1, (uint64_t)v3);
  }
  if (*(void *)(a1 + 16))
  {
    uint64_t v7 = v3[2];
    if ((v3[3] >> 1) - v7 < v2) {
      BUG();
    }
    specialized UnsafeMutablePointer.initialize(from:count:)(a1 + 32, v2, (unint64_t)&v3[8 * v7 + 4]);
    if (v2)
    {
      BOOL v8 = __OFADD__(v3[2], v2);
      uint64_t v9 = v3[2] + v2;
      if (v8) {
        BUG();
      }
      v3[2] = v9;
    }
  }
  else if (v2)
  {
    BUG();
  }
  uint64_t result = swift_bridgeObjectRelease(a1);
  *int64_t v1 = v3;
  return result;
}

{
  void *v1;
  uint64_t v2;
  void *v3;
  int64_t v4;
  int64_t v5;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  BOOL v10;
  uint64_t v11;
  uint64_t result;

  uint64_t v2 = *(void *)(a1 + 16);
  uint64_t v3 = (void *)*v1;
  int64_t v4 = *(void *)(*v1 + 16);
  int64_t v5 = v2 + v4;
  if (__OFADD__(v2, v4)) {
    BUG();
  }
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v1);
  if (!isUniquelyReferenced_nonNull_native || v3[3] >> 1 < v5)
  {
    if (v4 > v5) {
      int64_t v5 = v4;
    }
    uint64_t v3 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(isUniquelyReferenced_nonNull_native, v5, 1, (uint64_t)v3);
  }
  if (*(void *)(a1 + 16))
  {
    uint64_t v7 = v3[2];
    if ((v3[3] >> 1) - v7 < v2) {
      BUG();
    }
    BOOL v8 = *(void *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AnnotatedFeature<MLShapedArray<Float>, String>)
                   - 8);
    uint64_t v9 = (*(unsigned __int8 *)(v8 + 80) + 32) & ~*(unsigned __int8 *)(v8 + 80);
    specialized UnsafeMutablePointer.initialize(from:count:)(a1 + v9, v2, (unint64_t)v3 + *(void *)(v8 + 72) * v7 + v9, &demangling cache variable for type metadata for AnnotatedFeature<MLShapedArray<Float>, String>);
    if (v2)
    {
      uint64_t v10 = __OFADD__(v3[2], v2);
      uint64_t v11 = v3[2] + v2;
      if (v10) {
        BUG();
      }
      v3[2] = v11;
    }
  }
  else if (v2)
  {
    BUG();
  }
  uint64_t result = swift_bridgeObjectRelease(a1);
  *int64_t v1 = v3;
  return result;
}

uint64_t specialized Array.append<A>(contentsOf:)(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4)
{
  unint64_t v5 = a4 >> 1;
  uint64_t v6 = v5 - a3;
  if (__OFSUB__(v5, a3)) {
    BUG();
  }
  uint64_t v7 = *v4;
  int64_t v8 = *((void *)*v4 + 2);
  int64_t v9 = v6 + v8;
  if (__OFADD__(v6, v8)) {
    BUG();
  }
  unint64_t v17 = v5;
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v7);
  if (!isUniquelyReferenced_nonNull_native || (int64_t v11 = *((void *)v7 + 3) >> 1, v11 < v9))
  {
    if (v8 > v9) {
      int64_t v9 = v8;
    }
    uint64_t v7 = (char *)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(isUniquelyReferenced_nonNull_native, v9, 1, (uint64_t)v7);
    int64_t v11 = *((void *)v7 + 3) >> 1;
  }
  if (v17 == a3)
  {
    if (v6 > 0) {
      BUG();
    }
  }
  else
  {
    uint64_t v12 = *((void *)v7 + 2);
    if (v11 - v12 < v6) {
      BUG();
    }
    specialized UnsafeMutablePointer.initialize(from:count:)((char *)(a2 + 4 * a3), v6, &v7[4 * v12 + 32]);
    if (v6 > 0)
    {
      BOOL v13 = __OFADD__(*((void *)v7 + 2), v6);
      uint64_t v14 = *((void *)v7 + 2) + v6;
      if (v13) {
        BUG();
      }
      *((void *)v7 + 2) = v14;
    }
  }
  uint64_t result = swift_unknownObjectRelease(a1);
  *int64_t v4 = v7;
  return result;
}

{
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  void *v7;
  int64_t v8;
  int64_t v9;
  char isUniquelyReferenced_nonNull_native;
  int64_t v11;
  uint64_t v12;
  BOOL v13;
  uint64_t v14;
  uint64_t result;
  unint64_t v17;

  unint64_t v5 = a4 >> 1;
  uint64_t v6 = v5 - a3;
  if (__OFSUB__(v5, a3)) {
    BUG();
  }
  uint64_t v7 = *(void **)v4;
  int64_t v8 = *(void *)(*(void *)v4 + 16);
  int64_t v9 = v6 + v8;
  if (__OFADD__(v6, v8)) {
    BUG();
  }
  unint64_t v17 = v5;
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v7);
  if (!isUniquelyReferenced_nonNull_native || (int64_t v11 = v7[3] >> 1, v11 < v9))
  {
    if (v8 > v9) {
      int64_t v9 = v8;
    }
    uint64_t v7 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(isUniquelyReferenced_nonNull_native, v9, 1, (uint64_t)v7);
    int64_t v11 = v7[3] >> 1;
  }
  if (v17 == a3)
  {
    if (v6 > 0) {
      BUG();
    }
  }
  else
  {
    uint64_t v12 = v7[2];
    if (v11 - v12 < v6) {
      BUG();
    }
    specialized UnsafeMutablePointer.initialize(from:count:)((char *)(a2 + 8 * a3), v6, (char *)&v7[v12 + 4]);
    if (v6 > 0)
    {
      BOOL v13 = __OFADD__(v7[2], v6);
      uint64_t v14 = v7[2] + v6;
      if (v13) {
        BUG();
      }
      v7[2] = v14;
    }
  }
  uint64_t result = swift_unknownObjectRelease(a1);
  *(void *)int64_t v4 = v7;
  return result;
}

uint64_t *specialized Array.append<A>(contentsOf:)(uint64_t a1)
{
  return specialized Array.append<A>(contentsOf:)(a1, (uint64_t (*)(void, uint64_t, uint64_t, uint64_t))specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:), (uint64_t (*)(void))&type metadata accessor for Model);
}

{
  return specialized Array.append<A>(contentsOf:)(a1, (uint64_t (*)(void, uint64_t, uint64_t, uint64_t))specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:), (uint64_t (*)(void))&type metadata accessor for NeuralNetwork.Layer);
}

{
  return specialized Array.append<A>(contentsOf:)(a1, (uint64_t (*)(void, uint64_t, uint64_t, uint64_t))specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:), (uint64_t (*)(void))&type metadata accessor for FeatureDescription);
}

uint64_t *specialized Array.append<A>(contentsOf:)(uint64_t a1, uint64_t (*a2)(void, uint64_t, uint64_t, uint64_t), uint64_t (*a3)(void))
{
  uint64_t v4 = *(void *)(a1 + 16);
  uint64_t v5 = *v3;
  uint64_t v6 = *(void *)(*v3 + 16);
  uint64_t v7 = v4 + v6;
  if (__OFADD__(v4, v6)) {
    BUG();
  }
  unsigned __int8 isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v5);
  if (!isUniquelyReferenced_nonNull_native || *(void *)(v5 + 24) >> 1 < v7)
  {
    if (v6 > v7) {
      uint64_t v7 = v6;
    }
    uint64_t v5 = a2(isUniquelyReferenced_nonNull_native, v7, 1, v5);
  }
  char v9 = a1;
  if (*(void *)(a1 + 16))
  {
    uint64_t v10 = *(void *)(v5 + 16);
    uint64_t v11 = (*(void *)(v5 + 24) >> 1) - v10;
    uint64_t v12 = a3(0);
    if (v11 < v4) {
      BUG();
    }
    uint64_t v13 = *(void *)(v12 - 8);
    uint64_t v14 = (*(unsigned __int8 *)(v13 + 80) + 32) & ~*(unsigned __int8 *)(v13 + 80);
    char v9 = a1;
    specialized UnsafeMutablePointer.initialize(from:count:)(a1 + v14, v4, v14 + v5 + *(void *)(v13 + 72) * v10, a3);
    if (v4)
    {
      BOOL v15 = __OFADD__(*(void *)(v5 + 16), v4);
      uint64_t v16 = *(void *)(v5 + 16) + v4;
      if (v15) {
        BUG();
      }
      *(void *)(v5 + 16) = v16;
    }
  }
  else if (v4)
  {
    BUG();
  }
  swift_bridgeObjectRelease(v9);
  uint64_t result = v3;
  uint64_t *v3 = v5;
  return result;
}

void *_sSTsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFs12Zip2SequenceVySaySaySSGGAIG_AH6tokens_AH6labelsts5NeverOTg5046_sSaySSGA3AIgggoo_AA_AAtAA6tokens_AA6labelsts5h93OIegnrzr_TR082_s8CreateML12MLWordTaggerV23createLabeledTokenPairs_15tokenColumnName05labeljK0J85Q72SSG6tokens_AG6labelstG11TabularData0P5FrameV_S2StKFZAgH_AgItAG_AGtXEfU1_Tf3nnnpf_nTf1cn_n(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = a2;
  uint64_t v3 = a1;
  unint64_t v4 = *(void *)(a1 + 16);
  unint64_t v27 = v4;
  unint64_t v24 = *(void *)(a2 + 16);
  if (v24 < v4) {
    unint64_t v4 = *(void *)(a2 + 16);
  }
  specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v4, 0);
  unint64_t v25 = v4;
  if (v4)
  {
    swift_bridgeObjectRetain(a1);
    swift_bridgeObjectRetain(a2);
    uint64_t v5 = _swiftEmptyArrayStorage;
    uint64_t v6 = 0;
    unint64_t v7 = v27;
    do
    {
      if (v7 == v6) {
        BUG();
      }
      if (v24 == v6) {
        BUG();
      }
      uint64_t v8 = *(void *)(v3 + 8 * v6 + 32);
      uint64_t v9 = *(void *)(v2 + 8 * v6 + 32);
      uint64_t v28 = v5;
      unint64_t v10 = v5[2];
      unint64_t v19 = v5[3];
      uint64_t v22 = v5;
      swift_bridgeObjectRetain(v8);
      swift_bridgeObjectRetain(v9);
      uint64_t v5 = v22;
      if (v19 >> 1 <= v10)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v19 >= 2, v10 + 1, 1);
        uint64_t v5 = v28;
      }
      ++v6;
      v5[2] = v10 + 1;
      uint64_t v11 = 2 * v10;
      v5[v11 + 4] = v8;
      v5[v11 + 5] = v9;
      unint64_t v12 = v25;
      uint64_t v3 = a1;
      uint64_t v2 = a2;
      unint64_t v7 = v27;
    }
    while (v25 != v6);
  }
  else
  {
    swift_bridgeObjectRetain(a1);
    swift_bridgeObjectRetain(a2);
    uint64_t v5 = _swiftEmptyArrayStorage;
    unint64_t v12 = 0;
    unint64_t v7 = v27;
  }
  if (v7 > v24)
  {
    do
    {
      if (v12 >= v7) {
        BUG();
      }
      if (v24 == v12) {
        break;
      }
      if (v24 <= v12) {
        BUG();
      }
      uint64_t v13 = *(void *)(v2 + 8 * v12 + 32);
      uint64_t v29 = v5;
      unint64_t v14 = v5[2];
      unint64_t v23 = v5[3];
      uint64_t v21 = *(void *)(v3 + 8 * v12 + 32);
      unint64_t v26 = v12;
      BOOL v15 = v5;
      swift_bridgeObjectRetain(v21);
      swift_bridgeObjectRetain(v13);
      uint64_t v5 = v15;
      if (v23 >> 1 <= v14)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v23 >= 2, v14 + 1, 1);
        uint64_t v5 = v29;
      }
      unint64_t v12 = v26 + 1;
      v5[2] = v14 + 1;
      uint64_t v16 = 2 * v14;
      v5[v16 + 4] = v21;
      v5[v16 + 5] = v13;
      unint64_t v7 = v27;
      uint64_t v3 = a1;
      uint64_t v2 = a2;
    }
    while (v27 != v26 + 1);
  }
  unint64_t v17 = v5;
  swift_bridgeObjectRelease(v2);
  swift_bridgeObjectRelease(v3);
  return v17;
}

uint64_t static MLWordTagger.validateDataFrame(_:tokenColumnName:labelColumnName:)(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4, char *a5)
{
  uint64_t v65 = v5;
  uint64_t v61 = a5;
  uint64_t v54 = a4;
  uint64_t v63 = a3;
  uint64_t v64 = a2;
  uint64_t v55 = type metadata accessor for DataFrame.Rows(0);
  uint64_t v57 = *(void *)(v55 - 8);
  int64_t v6 = *(void *)(v57 + 64);
  unint64_t v7 = alloca(v6);
  uint64_t v8 = alloca(v6);
  uint64_t v56 = &v53;
  uint64_t v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Column<[String]>);
  uint64_t v10 = *(void *)(v9 - 8);
  int64_t v11 = *(void *)(v10 + 64);
  unint64_t v12 = alloca(v11);
  uint64_t v13 = alloca(v11);
  uint64_t v62 = &v53;
  unint64_t v14 = alloca(v11);
  BOOL v15 = alloca(v11);
  v60._uint64_t countAndFlagsBits = a1;
  uint64_t v16 = v65;
  uint64_t result = static MLWordTagger.createTextColumn(_:name:context:)(a1, v64, v63, 0x6E656B6F54, (void *)0xE500000000000000);
  if (v16) {
    return result;
  }
  uint64_t v64 = v10;
  uint64_t v63 = &v53;
  uint64_t v65 = v9;
  static MLWordTagger.createTextColumn(_:name:context:)(v60._countAndFlagsBits, v54, v61, 0x6C6562614CLL, (void *)0xE500000000000000);
  uint64_t v61 = 0;
  int v18 = v56;
  DataFrame.rows.getter();
  unint64_t v19 = v18;
  BOOL v20 = specialized Collection.isEmpty.getter();
  uint64_t v21 = *(void (**)(uint64_t *, uint64_t))(v57 + 8);
  uint64_t v22 = v18;
  uint64_t v23 = v55;
  v21(v22, v55);
  if (v20)
  {
    os_log_type_t v24 = static os_log_type_t.default.getter(v22);
    v25._uint64_t countAndFlagsBits = 0xD000000000000015;
    v25._char object = "f tokens and labels at index " + 0x8000000000000000;
    log(_:type:)(v25, v24);
    uint64_t v26 = lazy protocol witness table accessor for type MLCreateError and conformance MLCreateError();
    swift_allocError(&type metadata for MLCreateError, v26, 0, 0);
    *(void *)uint64_t v27 = 0xD000000000000015;
    *(void *)(v27 + 8) = "f tokens and labels at index " + 0x8000000000000000;
    goto LABEL_19;
  }
  uint64_t v31 = v19;
  DataFrame.rows.getter();
  uint64_t v32 = DataFrame.Rows.count.getter();
  v21(v31, v23);
  BOOL v34 = v32 == 0;
  if (v32 < 0) {
    BUG();
  }
  uint64_t v35 = v32;
  uint64_t v36 = v65;
  int64_t v37 = v63;
  uint64_t v38 = v64;
  if (v34)
  {
LABEL_17:
    uint64_t v43 = *(void (**)(uint64_t *, uint64_t, uint64_t, uint64_t))(v38 + 8);
    v43(v62, v36, v33, v35);
    return ((uint64_t (*)(uint64_t *, uint64_t))v43)(v37, v36);
  }
  uint64_t v39 = 0;
  v60._uint64_t countAndFlagsBits = v35;
  while (1)
  {
    if (v35 == v39) {
      BUG();
    }
    Column.subscript.getter(v39, v36);
    uint64_t countAndFlagsBits = v59._countAndFlagsBits;
    if (v59._countAndFlagsBits)
    {
      uint64_t v41 = *(void *)(v59._countAndFlagsBits + 16);
      swift_bridgeObjectRelease(v59._countAndFlagsBits);
    }
    else
    {
      uint64_t v41 = 0;
    }
    Column.subscript.getter(v39, v65);
    if (v59._countAndFlagsBits) {
      break;
    }
    if (countAndFlagsBits) {
      goto LABEL_18;
    }
LABEL_16:
    ++v39;
    uint64_t v35 = v60._countAndFlagsBits;
    uint64_t v36 = v65;
    int64_t v37 = v63;
    uint64_t v38 = v64;
    if (v60._countAndFlagsBits == v39) {
      goto LABEL_17;
    }
  }
  uint64_t v42 = *(void *)(v59._countAndFlagsBits + 16);
  swift_bridgeObjectRelease(v59._countAndFlagsBits);
  if (countAndFlagsBits && v41 == v42) {
    goto LABEL_16;
  }
LABEL_18:
  v59._uint64_t countAndFlagsBits = 0;
  v59._char object = (void *)0xE000000000000000;
  _StringGuts.grow(_:)(48);
  swift_bridgeObjectRelease(v59._object);
  v60._uint64_t countAndFlagsBits = 0xD00000000000002DLL;
  v59._uint64_t countAndFlagsBits = 0xD00000000000002DLL;
  uint64_t v61 = " contain string elements." + 0x8000000000000000;
  v59._char object = " contain string elements." + 0x8000000000000000;
  uint64_t v58 = v39;
  v44._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter(&type metadata for Int, &protocol witness table for Int);
  char object = (char)v44._object;
  String.append(_:)(v44);
  swift_bridgeObjectRelease(object);
  v46._uint64_t countAndFlagsBits = 46;
  v46._char object = (void *)0xE100000000000000;
  String.append(_:)(v46);
  Swift::String v47 = v59;
  os_log_type_t v48 = static os_log_type_t.default.getter(46);
  log(_:type:)(v47, v48);
  swift_bridgeObjectRelease(v47._object);
  v59._uint64_t countAndFlagsBits = 0;
  v59._char object = (void *)0xE000000000000000;
  _StringGuts.grow(_:)(48);
  swift_bridgeObjectRelease(v59._object);
  v59._uint64_t countAndFlagsBits = v60._countAndFlagsBits;
  v59._char object = v61;
  uint64_t v58 = v39;
  v49._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter(&type metadata for Int, &protocol witness table for Int);
  char v50 = (char)v49._object;
  String.append(_:)(v49);
  swift_bridgeObjectRelease(v50);
  v46._uint64_t countAndFlagsBits = 46;
  v46._char object = (void *)0xE100000000000000;
  String.append(_:)(v46);
  Swift::String v60 = v59;
  uint64_t v26 = lazy protocol witness table accessor for type MLCreateError and conformance MLCreateError();
  swift_allocError(&type metadata for MLCreateError, v26, 0, 0);
  *(Swift::String *)uint64_t v27 = v60;
LABEL_19:
  *(_OWORD *)(v27 + 16) = 0;
  *(_OWORD *)(v27 + 32) = 0;
  *(unsigned char *)(v27 + 48) = 1;
  swift_willThrow(&type metadata for MLCreateError, v26, v27, v28, v29, v30);
  uint64_t v51 = *(void (**)(uint64_t *, uint64_t))(v64 + 8);
  uint64_t v52 = v65;
  v51(v62, v65);
  return ((uint64_t (*)(uint64_t *, uint64_t))v51)(v63, v52);
}

uint64_t static MLWordTagger.createTextColumn(_:name:context:)(uint64_t a1, uint64_t a2, void *a3, uint64_t a4, void *a5)
{
  v62._char object = v6;
  uint64_t v61 = a5;
  v62._uint64_t countAndFlagsBits = a4;
  v65[0]._char object = a3;
  uint64_t v64 = a1;
  uint64_t v63 = v5;
  uint64_t v55 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Column<[Any?]>);
  uint64_t v54 = *(void *)(v55 - 8);
  int64_t v7 = *(void *)(v54 + 64);
  uint64_t v8 = alloca(v7);
  uint64_t v9 = alloca(v7);
  Swift::String v60 = &v50;
  uint64_t v52 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Column<[MLDataValue]>);
  uint64_t countAndFlagsBits = *(void *)(v52 - 8);
  int64_t v10 = *(void *)(countAndFlagsBits + 64);
  int64_t v11 = alloca(v10);
  unint64_t v12 = alloca(v10);
  uint64_t v53 = &v50;
  uint64_t v59 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Column<[String]>);
  uint64_t v58 = *(void *)(v59 - 8);
  int64_t v13 = *(void *)(v58 + 64);
  unint64_t v14 = alloca(v13);
  BOOL v15 = alloca(v13);
  uint64_t v56 = &v50;
  uint64_t v16 = alloca(v13);
  unint64_t v17 = alloca(v13);
  uint64_t v57 = &v50;
  uint64_t v18 = type metadata accessor for AnyColumn(0);
  uint64_t v19 = *(void *)(v18 - 8);
  int64_t v20 = *(void *)(v19 + 64);
  uint64_t v21 = alloca(v20);
  uint64_t v22 = alloca(v20);
  v65[0]._uint64_t countAndFlagsBits = a2;
  Swift::Int_optional v23 = DataFrame.indexOfColumn(_:)((Swift::String)__PAIR128__((unint64_t)v65[0]._object, a2));
  if (v23.is_nil)
  {
    v50._uint64_t countAndFlagsBits = 0;
    v50._char object = (void *)0xE000000000000000;
    _StringGuts.grow(_:)(53);
    v27._uint64_t countAndFlagsBits = v62._countAndFlagsBits;
    v27._char object = v61;
    String.append(_:)(v27);
    v27._uint64_t countAndFlagsBits = 0x206E6D756C6F6320;
    v27._char object = (void *)0xEE002720656D616ELL;
    String.append(_:)(v27);
    String.append(_:)(v65[0]);
    v27._char object = " a word tagger model." + 0x8000000000000000;
    v27._uint64_t countAndFlagsBits = 0xD000000000000023;
    String.append(_:)(v27);
    Swift::String v28 = v50;
    os_log_type_t v29 = static os_log_type_t.error.getter(0xD000000000000023, " a word tagger model." + 0x8000000000000000);
    log(_:type:)(v28, v29);
    uint64_t v30 = lazy protocol witness table accessor for type MLCreateError and conformance MLCreateError();
    swift_allocError(&type metadata for MLCreateError, v30, 0, 0);
    *(Swift::String *)uint64_t v31 = v28;
LABEL_5:
    *(_OWORD *)(v31 + 16) = 0;
    *(_OWORD *)(v31 + 32) = 0;
    *(unsigned char *)(v31 + 48) = 1;
    return swift_willThrow(&type metadata for MLCreateError, v30, v31, v32, v33, v34);
  }
  DataFrame.subscript.getter(v23.value);
  uint64_t v24 = AnyColumn.wrappedElementType.getter();
  (*(void (**)(Swift::String *, uint64_t))(v19 + 8))(&v50, v18);
  uint64_t v25 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [String]);
  if (swift_dynamicCastMetatype(v24, v25)) {
    return DataFrame.subscript.getter(v65[0]._countAndFlagsBits, v65[0]._object, v25);
  }
  uint64_t v35 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [MLDataValue]);
  if (!swift_dynamicCastMetatype(v24, v35))
  {
    uint64_t v43 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [Any?]);
    if (swift_dynamicCastMetatype(v24, v43))
    {
      DataFrame.subscript.getter(v65[0]._countAndFlagsBits, v65[0]._object, v43);
      Swift::String v44 = v56;
      uint64_t v45 = v55;
      Swift::String v46 = v60;
      Column.map<A>(_:)(closure #2 in static MLWordTagger.createTextColumn(_:name:context:), 0, v55);
      (*(void (**)(Swift::String *, uint64_t))(v54 + 8))(v46, v45);
      uint64_t v41 = v63;
      uint64_t v42 = v44;
      return (*(uint64_t (**)(uint64_t, Swift::String *, uint64_t))(v58 + 32))(v41, v42, v59);
    }
    v50._uint64_t countAndFlagsBits = 0;
    v50._char object = (void *)0xE000000000000000;
    _StringGuts.grow(_:)(43);
    char object = (char)v50._object;
    os_log_type_t v48 = v61;
    swift_bridgeObjectRetain((_BYTE)v61);
    swift_bridgeObjectRelease(object);
    v50._uint64_t countAndFlagsBits = v62._countAndFlagsBits;
    v50._char object = v48;
    v49._uint64_t countAndFlagsBits = 0xD000000000000029;
    v49._char object = " in the data frame." + 0x8000000000000000;
    String.append(_:)(v49);
    *(Swift::String *)&v65[0]._char object = v50;
    uint64_t v30 = lazy protocol witness table accessor for type MLCreateError and conformance MLCreateError();
    swift_allocError(&type metadata for MLCreateError, v30, 0, 0);
    *(Swift::String *)uint64_t v31 = *(Swift::String *)&v65[0]._object;
    goto LABEL_5;
  }
  uint64_t v36 = v53;
  DataFrame.subscript.getter(v65[0]._countAndFlagsBits, v65[0]._object, v35);
  v65[0]._char object = &v50;
  int64_t v37 = alloca(32);
  uint64_t v38 = alloca(32);
  uint64_t countAndFlagsBits = v62._countAndFlagsBits;
  uint64_t v52 = (uint64_t)v61;
  uint64_t v39 = v61;
  uint64_t v40 = v62._object;
  Column.map<A>(_:)(partial apply for closure #1 in static MLWordTagger.createTextColumn(_:name:context:), &v50, v61);
  uint64_t result = (*(uint64_t (**)(Swift::String *, void *))(countAndFlagsBits + 8))(v36, v39);
  if (!v40)
  {
    uint64_t v41 = v63;
    uint64_t v42 = v57;
    return (*(uint64_t (**)(uint64_t, Swift::String *, uint64_t))(v58 + 32))(v41, v42, v59);
  }
  return result;
}

void *static MLWordTagger.createLabeledTokenPairs(_:tokenColumnName:labelColumnName:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v27 = a5;
  uint64_t v30 = a4;
  uint64_t v35 = a3;
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Column<[String]>);
  int64_t v6 = *(void *)(*(void *)(v5 - 8) + 64);
  int64_t v7 = alloca(v6);
  uint64_t v8 = alloca(v6);
  uint64_t v32 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [String]);
  uint64_t v28 = a1;
  DataFrame.subscript.getter(a2, v35, v32);
  uint64_t v31 = &v25;
  uint64_t v29 = v5;
  uint64_t v33 = lazy protocol witness table accessor for type FullyConnectedNetworkClassifier<Float, String> and conformance FullyConnectedNetworkClassifier<A, B>(&lazy protocol witness table cache variable for type Column<[String]> and conformance Column<A>, &demangling cache variable for type metadata for Column<[String]>, (uint64_t)&protocol conformance descriptor for Column<A>);
  uint64_t v9 = dispatch thunk of Sequence._copyToContiguousArray()(v5, v33);
  int64_t v10 = _swiftEmptyArrayStorage;
  int64_t v11 = _swiftEmptyArrayStorage;
  uint64_t v35 = *(void *)(v9 + 16);
  if (v35)
  {
    swift_retain();
    int64_t v11 = _swiftEmptyArrayStorage;
    uint64_t v12 = 0;
    uint64_t v34 = v9;
    do
    {
      uint64_t v13 = *(void *)(v9 + 8 * v12 + 32);
      if (v13)
      {
        swift_bridgeObjectRetain(*(void *)(v9 + 8 * v12 + 32));
        if (!swift_isUniquelyReferenced_nonNull_native(v11)) {
          int64_t v11 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v11[2] + 1, 1, (uint64_t)v11);
        }
        unint64_t v14 = v11[2];
        BOOL v15 = v11;
        if (v11[3] >> 1 <= v14) {
          BOOL v15 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(v11[3] >= 2uLL, v14 + 1, 1, (uint64_t)v11);
        }
        v15[2] = v14 + 1;
        int64_t v11 = v15;
        v15[v14 + 4] = v13;
        uint64_t v9 = v34;
      }
      ++v12;
    }
    while (v35 != v12);
    swift_release();
    int64_t v10 = _swiftEmptyArrayStorage;
  }
  uint64_t v26 = v11;
  swift_release();
  DataFrame.subscript.getter(v30, v27, v32);
  uint64_t v16 = dispatch thunk of Sequence._copyToContiguousArray()(v29, v33);
  uint64_t v35 = *(void *)(v16 + 16);
  if (v35)
  {
    swift_retain();
    int64_t v10 = _swiftEmptyArrayStorage;
    uint64_t v17 = 0;
    uint64_t v34 = v16;
    do
    {
      uint64_t v18 = *(void *)(v16 + 8 * v17 + 32);
      if (v18)
      {
        swift_bridgeObjectRetain(*(void *)(v16 + 8 * v17 + 32));
        if (!swift_isUniquelyReferenced_nonNull_native(v10)) {
          int64_t v10 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v10[2] + 1, 1, (uint64_t)v10);
        }
        unint64_t v19 = v10[2];
        int64_t v20 = v10;
        if (v10[3] >> 1 <= v19) {
          int64_t v20 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(v10[3] >= 2uLL, v19 + 1, 1, (uint64_t)v10);
        }
        v20[2] = v19 + 1;
        int64_t v10 = v20;
        v20[v19 + 4] = v18;
        uint64_t v16 = v34;
      }
      ++v17;
    }
    while (v35 != v17);
    swift_release();
  }
  swift_release();
  char v21 = (char)v26;
  char v22 = (char)v10;
  ML12MLWordTaggerV23createLabeledTokenPairs_15tokenColumnName05labeljK0J85Q72SSG6tokens_AG6labelstG11TabularData0P5FrameV_S2StKFZAgH_AgItAG_AGtXEfU1_Tf3nnnpf_nTf1cn_n = _sSTsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFs12Zip2SequenceVySaySaySSGGAIG_AH6tokens_AH6labelsts5NeverOTg5046_sSaySSGA3AIgggoo_AA_AAtAA6tokens_AA6labelsts5h93OIegnrzr_TR082_s8CreateML12MLWordTaggerV23createLabeledTokenPairs_15tokenColumnName05labeljK0J85Q72SSG6tokens_AG6labelstG11TabularData0P5FrameV_S2StKFZAgH_AgItAG_AGtXEfU1_Tf3nnnpf_nTf1cn_n((uint64_t)v26, (uint64_t)v10);
  swift_bridgeObjectRelease(v22);
  swift_bridgeObjectRelease(v21);
  return ML12MLWordTaggerV23createLabeledTokenPairs_15tokenColumnName05labeljK0J85Q72SSG6tokens_AG6labelstG11TabularData0P5FrameV_S2StKFZAgH_AgItAG_AGtXEfU1_Tf3nnnpf_nTf1cn_n;
}

id MLWordTagger.model.getter()
{
  return *(id *)(v0 + 16);
}

void key path setter for MLWordTagger.model : MLWordTagger(id *a1)
{
  id v1 = *a1;
  MLWordTagger.model.setter((uint64_t)v1);
}

void MLWordTagger.model.setter(uint64_t a1)
{
  *(void *)(v1 + 16) = a1;
}

void (*MLWordTagger.model.modify(void *a1))(uint64_t a1, char a2)
{
  a1[1] = v1;
  uint64_t v3 = *(void **)(v1 + 16);
  *a1 = v3;
  v3;
  return MLWordTagger.model.modify;
}

void MLWordTagger.model.modify(uint64_t a1, char a2)
{
  id v2 = *(id *)a1;
  uint64_t v3 = *(void *)(a1 + 8);
  unint64_t v4 = *(void **)(v3 + 16);
  if (a2)
  {
    id v5 = *(id *)a1;

    *(void *)(v3 + 16) = v5;
  }
  else
  {

    *(void *)(v3 + 16) = v2;
  }
}

uint64_t MLWordTagger.modelParameters.getter()
{
  return outlined init with copy of MLWordTagger.ModelParameters(v1 + 24, v0);
}

uint64_t outlined init with copy of MLWordTagger.ModelParameters(uint64_t a1, uint64_t a2)
{
  return a2;
}

uint64_t MLWordTagger.trainingMetrics.getter()
{
  uint64_t v2 = v0;
  uint64_t v3 = type metadata accessor for MLWordTagger(0);
  return outlined init with copy of MLTrainingSessionParameters(v1 + *(int *)(v3 + 32), v2, type metadata accessor for MLWordTaggerMetrics);
}

uint64_t type metadata accessor for MLWordTagger(uint64_t a1)
{
  uint64_t result = type metadata singleton initialization cache for MLWordTagger;
  if (!type metadata singleton initialization cache for MLWordTagger) {
    return swift_getSingletonMetadata(a1, &nominal type descriptor for MLWordTagger);
  }
  return result;
}

uint64_t MLWordTagger.validationMetrics.getter()
{
  uint64_t v2 = v0;
  uint64_t v3 = type metadata accessor for MLWordTagger(0);
  return outlined init with copy of MLTrainingSessionParameters(v1 + *(int *)(v3 + 36), v2, type metadata accessor for MLWordTaggerMetrics);
}

uint64_t MLWordTagger.init(trainingData:parameters:)(uint64_t a1, uint64_t a2)
{
  uint64_t v18 = a2;
  uint64_t v15 = v2;
  uint64_t v14 = type metadata accessor for DataFrame(0);
  uint64_t v17 = *(void *)(v14 - 8);
  int64_t v4 = *(void *)(v17 + 64);
  id v5 = alloca(v4);
  int64_t v6 = alloca(v4);
  uint64_t v16 = &v12;
  int64_t v7 = alloca(v4);
  uint64_t v8 = alloca(v4);
  static MLWordTagger.generateTextDataFrame(_:tokenColumn:labelColumn:)(a1, 1954047348, 0xE400000000000000, 0x736C6562616CLL, 0xE600000000000000);
  if (v3)
  {
    outlined destroy of MLWordTagger.ModelParameters(v18);
    return swift_bridgeObjectRelease(a1);
  }
  else
  {
    swift_bridgeObjectRelease(a1);
    uint64_t v10 = (uint64_t)v16;
    uint64_t v11 = v14;
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(v17 + 16))(v16, &v12, v14);
    outlined init with copy of MLWordTagger.ModelParameters(v18, (uint64_t)v13);
    MLWordTagger.init(trainingData:tokenColumn:labelColumn:parameters:)(v10, 1954047348, (uint64_t *)0xE400000000000000, 0x736C6562616CLL, (void *)0xE600000000000000, (uint64_t)v13);
    outlined destroy of MLWordTagger.ModelParameters(v18);
    return (*(uint64_t (**)(uint64_t *, uint64_t))(v17 + 8))(&v12, v11);
  }
}

uint64_t static MLWordTagger.generateTextDataFrame(_:tokenColumn:labelColumn:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v40 = a5;
  uint64_t v38 = a4;
  uint64_t v33 = a2;
  v31[2] = v5;
  uint64_t v35 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Column<[String]>);
  uint64_t v32 = *(void *)(v35 - 8);
  int64_t v7 = *(void *)(v32 + 64);
  uint64_t v8 = alloca(v7);
  uint64_t v9 = alloca(v7);
  uint64_t v39 = v31;
  uint64_t v10 = alloca(v7);
  uint64_t v11 = alloca(v7);
  uint64_t v36 = a1;
  uint64_t v12 = *(void *)(a1 + 16);
  swift_bridgeObjectRetain(a3);
  uint64_t v13 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [String]);
  uint64_t v34 = v31;
  Column.init(name:capacity:)(v33, a3, v12, v13);
  uint64_t v14 = v40;
  swift_bridgeObjectRetain(v40);
  uint64_t v15 = v38;
  uint64_t v16 = v14;
  uint64_t v40 = v13;
  Column.init(name:capacity:)(v38, v14, v12, v13);
  if (v12)
  {
    uint64_t v19 = v36;
    swift_bridgeObjectRetain(v36);
    int64_t v20 = (uint64_t *)(v19 + 40);
    do
    {
      uint64_t v38 = v12;
      uint64_t v21 = *v20;
      uint64_t v37 = *(v20 - 1);
      swift_bridgeObjectRetain(v21);
      uint64_t v22 = v35;
      Column.append(_:)(&v37, v35);
      uint64_t v37 = v21;
      uint64_t v16 = v22;
      uint64_t v23 = v38;
      Column.append(_:)(&v37, v16);
      swift_bridgeObjectRelease(v21);
      v20 += 2;
      uint64_t v12 = v23 - 1;
    }
    while (v12);
    uint64_t v15 = v36;
    swift_bridgeObjectRelease(v36);
  }
  DataFrame.init()(v15, v16, v17, v18);
  uint64_t v24 = v34;
  uint64_t v25 = v40;
  DataFrame.append<A>(column:)(v34, v40);
  uint64_t v26 = v39;
  DataFrame.append<A>(column:)(v39, v25);
  uint64_t v27 = *(void (**)(void *, uint64_t))(v32 + 8);
  uint64_t v28 = v26;
  uint64_t v29 = v35;
  v27(v28, v35);
  return ((uint64_t (*)(void *, uint64_t))v27)(v24, v29);
}

uint64_t outlined destroy of MLWordTagger.ModelParameters(uint64_t a1)
{
  return a1;
}

uint64_t MLWordTagger.init(trainingData:tokenColumn:labelColumn:parameters:)(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4, void *a5, uint64_t a6)
{
  uint64_t v295 = (void *)a4;
  uint64_t v296 = a3;
  uint64_t v8 = v6;
  uint64_t v287 = a2;
  uint64_t v309 = v7;
  v300 = (long long *)a6;
  id v310 = a5;
  uint64_t v304 = a1;
  uint64_t v276 = type metadata accessor for DataFrame.Rows(0);
  uint64_t v272 = *(void *)(v276 - 8);
  int64_t v9 = *(void *)(v272 + 64);
  uint64_t v10 = alloca(v9);
  uint64_t v11 = alloca(v9);
  v277 = &v267;
  int64_t v12 = *(void *)(*(void *)(type metadata accessor for MLWordTaggerMetrics(0) - 8) + 64);
  uint64_t v13 = alloca(v12);
  uint64_t v14 = alloca(v12);
  id v278 = &v267;
  uint64_t v15 = alloca(v12);
  uint64_t v16 = alloca(v12);
  uint64_t v271 = &v267;
  uint64_t v270 = type metadata accessor for MLWordTagger.ModelParameters.ValidationData(0);
  int64_t v17 = *(void *)(*(void *)(v270 - 8) + 64);
  uint64_t v18 = alloca(v17);
  uint64_t v19 = alloca(v17);
  v294 = &v267;
  int64_t v20 = *(void *)(*(void *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for DataFrame?)
                              - 8)
                  + 64);
  uint64_t v21 = alloca(v20);
  uint64_t v22 = alloca(v20);
  v284 = &v267;
  uint64_t v283 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for IndexingIterator<Column<[String]>>);
  int64_t v23 = *(void *)(*(void *)(v283 - 8) + 64);
  uint64_t v24 = alloca(v23);
  uint64_t v25 = alloca(v23);
  uint64_t v288 = &v267;
  uint64_t v26 = alloca(v23);
  uint64_t v27 = alloca(v23);
  uint64_t v307 = &v267;
  uint64_t v28 = alloca(v23);
  uint64_t v29 = alloca(v23);
  uint64_t v303 = &v267;
  uint64_t v302 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Column<[String]>);
  uint64_t v298 = *(void **)(v302 - 8);
  int64_t v30 = v298[8];
  uint64_t v31 = alloca(v30);
  uint64_t v32 = alloca(v30);
  v275 = &v267;
  uint64_t v33 = alloca(v30);
  uint64_t v34 = alloca(v30);
  uint64_t v274 = &v267;
  uint64_t v35 = alloca(v30);
  uint64_t v36 = alloca(v30);
  v291 = &v267;
  uint64_t v37 = alloca(v30);
  uint64_t v38 = alloca(v30);
  uint64_t v305 = &v267;
  uint64_t v39 = alloca(v30);
  uint64_t v40 = alloca(v30);
  v293 = &v267;
  uint64_t v41 = alloca(v30);
  uint64_t v42 = alloca(v30);
  v308 = &v267;
  uint64_t v43 = type metadata accessor for DataFrame(0);
  uint64_t v44 = *(void *)(v43 - 8);
  int64_t v45 = *(void *)(v44 + 64);
  Swift::String v46 = alloca(v45);
  Swift::String v47 = alloca(v45);
  uint64_t v289 = &v267;
  os_log_type_t v48 = alloca(v45);
  Swift::String v49 = alloca(v45);
  uint64_t v299 = (uint64_t *)v8;
  v8 += 24;
  outlined init with copy of MLWordTagger.ModelParameters((uint64_t)v300, (uint64_t)v8);
  v282 = v8;
  MLWordTagger.ModelParameters.validateRevision()();
  uint64_t v51 = v304;
  if (v50) {
    goto LABEL_2;
  }
  uint64_t v301 = v44;
  v306 = &v267;
  uint64_t v297 = v43;
  if (!*((unsigned char *)v299 + 128) && v299[15] <= 0)
  {
    uint64_t v62 = lazy protocol witness table accessor for type MLCreateError and conformance MLCreateError();
    uint64_t v63 = swift_allocError(&type metadata for MLCreateError, v62, 0, 0);
    *(void *)uint64_t v64 = 0xD000000000000036;
    *(void *)(v64 + 8) = "bset of the training labels." + 0x8000000000000000;
    *(_OWORD *)(v64 + 16) = 0;
    *(_OWORD *)(v64 + 32) = 0;
    *(unsigned char *)(v64 + 48) = 0;
    swift_willThrow(&type metadata for MLCreateError, v62, v64, v65, v66, v67);
    uint64_t v50 = v63;
    uint64_t v51 = v304;
    uint64_t v43 = v297;
    uint64_t v44 = v301;
LABEL_2:
    uint64_t v309 = v50;
    char v52 = 0;
    (*(void (**)(uint64_t, uint64_t))(v44 + 8))(v51, v43);
    swift_bridgeObjectRelease((_BYTE)v296);
    swift_bridgeObjectRelease((_BYTE)v310);
    outlined destroy of MLWordTagger.ModelParameters((uint64_t)v300);
LABEL_6:
    uint64_t result = outlined destroy of MLWordTagger.ModelParameters((uint64_t)v282);
    if (v52)
    {
      uint64_t v59 = type metadata accessor for MLWordTagger(0);
      return outlined destroy of MLActivityClassifier.ModelParameters((uint64_t)v299 + *(int *)(v59 + 32), type metadata accessor for MLWordTaggerMetrics);
    }
    return result;
  }
  uint64_t v53 = v304;
  uint64_t v54 = v304;
  uint64_t v55 = v287;
  uint64_t v56 = v287;
  uint64_t v57 = v296;
  static MLWordTagger.validateDataFrame(_:tokenColumnName:labelColumnName:)(v304, v287, v296, (uint64_t)v295, (char *)v310);
  DataFrame.init()(v54, v56, v60, v61);
  static MLWordTagger.createTextColumn(_:name:context:)(v53, v55, v57, 0x6E656B6F54, (void *)0xE500000000000000);
  uint64_t v68 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [String]);
  uint64_t v69 = (uint64_t)v308;
  uint64_t v285 = v68;
  DataFrame.append<A>(column:)(v308, v68);
  uint64_t v70 = (void (*)(uint64_t, uint64_t))v298[1];
  v70(v69, v302);
  uint64_t v71 = v293;
  static MLWordTagger.createTextColumn(_:name:context:)(v304, (uint64_t)v295, v310, 0x6C6562614CLL, (void *)0xE500000000000000);
  uint64_t v309 = 0;
  BOOL v286 = v288;
  uint64_t v72 = v285;
  DataFrame.append<A>(column:)(v71, v285);
  uint64_t v73 = v71;
  uint64_t v74 = v302;
  v293 = (uint64_t *)v70;
  v70((uint64_t)v73, v302);
  uint64_t v75 = (uint64_t)v305;
  DataFrame.subscript.getter(v295, v310, v72);
  v290 = (void (*)(uint64_t *, uint64_t, uint64_t))v298[2];
  v290(v291, v75, v74);
  uint64_t v76 = lazy protocol witness table accessor for type FullyConnectedNetworkClassifier<Float, String> and conformance FullyConnectedNetworkClassifier<A, B>(&lazy protocol witness table cache variable for type Column<[String]> and conformance Column<A>, &demangling cache variable for type metadata for Column<[String]>, (uint64_t)&protocol conformance descriptor for Column<A>);
  uint64_t v77 = (uint64_t)v303;
  uint64_t v279 = v76;
  dispatch thunk of Sequence.makeIterator()(v74, v76);
  uint64_t v78 = (uint64_t *)(v77 + *(int *)(v283 + 36));
  uint64_t v79 = lazy protocol witness table accessor for type FullyConnectedNetworkClassifier<Float, String> and conformance FullyConnectedNetworkClassifier<A, B>(&lazy protocol witness table cache variable for type Column<[String]> and conformance Column<A>, &demangling cache variable for type metadata for Column<[String]>, (uint64_t)&protocol conformance descriptor for Column<A>);
  v292 = _swiftEmptyArrayStorage;
  uint64_t v298 = (void *)v79;
  uint64_t v273 = v78;
  while (1)
  {
    v308 = (uint64_t *)*v78;
    uint64_t v80 = v79;
    dispatch thunk of Collection.endIndex.getter(v302, v79);
    if (v308 == (uint64_t *)v280) {
      break;
    }
    unint64_t v81 = v78;
    uint64_t v82 = (uint64_t)v303;
    uint64_t v83 = (void (*)(long long *, void))dispatch thunk of Collection.subscript.read(&v280, v81, v302, v80);
    v308 = (uint64_t *)*v84;
    swift_bridgeObjectRetain((_BYTE)v308);
    v83(&v280, 0);
    uint64_t v85 = v291;
    uint64_t v86 = v302;
    v290(v291, v82, v302);
    uint64_t v78 = v273;
    uint64_t v87 = v86;
    uint64_t v88 = v298;
    dispatch thunk of Collection.formIndex(after:)(v273, v87, v298);
    ((void (*)(uint64_t *, uint64_t))v293)(v85, v302);
    uint64_t v79 = (uint64_t)v88;
    if (v308)
    {
      uint64_t v89 = v292;
      uint64_t v90 = v78;
      if (!swift_isUniquelyReferenced_nonNull_native(v292)) {
        uint64_t v89 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v89[2] + 1, 1, (uint64_t)v89);
      }
      unint64_t v91 = v89[2];
      v292 = v89;
      uint64_t v79 = (uint64_t)v298;
      if (v89[3] >> 1 <= v91)
      {
        BOOL v93 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(v89[3] >= 2uLL, v91 + 1, 1, (uint64_t)v292);
        uint64_t v79 = (uint64_t)v298;
        v292 = v93;
      }
      uint64_t v92 = v292;
      v292[2] = v91 + 1;
      v92[v91 + 4] = v308;
      uint64_t v78 = v90;
    }
  }
  outlined destroy of Either<LogisticRegressionClassifier<Float, String>, FullyConnectedNetworkClassifier<Float, String>>((uint64_t)v303, &demangling cache variable for type metadata for IndexingIterator<Column<[String]>>);
  ((void (*)(uint64_t *, uint64_t))v293)(v305, v302);
  uint64_t v94 = v292;
  uint64_t v305 = (uint64_t *)v292[2];
  if (v305)
  {
    swift_bridgeObjectRetain((_BYTE)v292);
    uint64_t v95 = _swiftEmptyArrayStorage;
    uint64_t v96 = 0;
    do
    {
      uint64_t v97 = v94[v96 + 4];
      uint64_t v98 = *(void *)(v97 + 16);
      int64_t v99 = v95[2];
      int64_t v100 = v98 + v99;
      if (__OFADD__(v98, v99)) {
        BUG();
      }
      v308 = (uint64_t *)v96;
      uint64_t v303 = (uint64_t *)v97;
      swift_bridgeObjectRetain(v97);
      char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v95);
      long long v102 = v95;
      if (!isUniquelyReferenced_nonNull_native || v95[3] >> 1 < v100)
      {
        if (v99 > v100) {
          int64_t v100 = v99;
        }
        long long v102 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(isUniquelyReferenced_nonNull_native, v100, 1, (uint64_t)v95);
      }
      long long v103 = v294;
      char v104 = (char)v303;
      if (v303[2])
      {
        uint64_t v105 = v102[2];
        if ((v102[3] >> 1) - v105 < v98) {
          BUG();
        }
        uint64_t v95 = v102;
        unint64_t v106 = (unint64_t)&v102[2 * v105 + 4];
        if ((unint64_t)(v303 + 4) < v106 + 16 * v98 && v106 < (unint64_t)&v303[2 * v98 + 4])
        {
LABEL_165:
          _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize overlapping range", 49, 2, "Swift/UnsafePointer.swift", 25, 2, 1092, 1);
          BUG();
        }
        swift_arrayInitWithCopy(v106, v303 + 4, v98, &type metadata for String);
        char v104 = (char)v303;
        if (v98)
        {
          BOOL v107 = __OFADD__(v95[2], v98);
          uint64_t v108 = v95[2] + v98;
          if (v107) {
            BUG();
          }
          v95[2] = v108;
        }
      }
      else
      {
        uint64_t v95 = v102;
        if (v98) {
          BUG();
        }
      }
      swift_bridgeObjectRelease(v104);
      uint64_t v96 = (uint64_t)v308 + 1;
      uint64_t v94 = v292;
    }
    while (v305 != (uint64_t *)((char *)v308 + 1));
    swift_bridgeObjectRelease((_BYTE)v292);
  }
  else
  {
    uint64_t v95 = _swiftEmptyArrayStorage;
    long long v103 = v294;
  }
  swift_bridgeObjectRelease((_BYTE)v94);
  uint64_t v305 = (uint64_t *)specialized Set.init<A>(_:)((uint64_t)v95);
  v299[1] = (uint64_t)v305;
  outlined init with copy of Any?((uint64_t)(v300 + 2), (uint64_t)&v268);
  uint64_t v109 = v287;
  uint64_t v110 = v270;
  if (!v269) {
    BUG();
  }
  outlined init with take of Any(&v268, &v280);
  swift_bridgeObjectRetain((_BYTE)v305);
  swift_dynamicCast(v103, &v280, (char *)&type metadata for Any + 8, v110, 7);
  uint64_t v111 = (uint64_t)v284;
  uint64_t v112 = v109;
  char v113 = (char)v296;
  uint64_t v114 = (uint64_t)v103;
  char v115 = (char)v310;
  uint64_t v116 = v309;
  MLWordTagger.ModelParameters.ValidationData.createValidationData(trainingData:tokenColumnName:labelColumnName:)((uint64_t)v306, v112, (char *)v296, (uint64_t)v295, v310);
  uint64_t v309 = v116;
  if (v116)
  {
    swift_bridgeObjectRelease((_BYTE)v305);
    swift_bridgeObjectRelease(v113);
    swift_bridgeObjectRelease(v115);
    char v117 = *(void (**)(uint64_t, uint64_t))(v301 + 8);
    uint64_t v118 = v297;
    v117(v304, v297);
    outlined destroy of MLActivityClassifier.ModelParameters(v114, type metadata accessor for MLWordTagger.ModelParameters.ValidationData);
LABEL_39:
    uint64_t v119 = (uint64_t)v306;
    uint64_t v120 = v118;
    char v121 = 0;
LABEL_97:
    v117(v119, v120);
    outlined destroy of MLWordTagger.ModelParameters((uint64_t)v300);
LABEL_98:
    char v52 = 0;
    goto LABEL_99;
  }
  uint64_t v122 = (uint64_t)v306;
  outlined destroy of MLActivityClassifier.ModelParameters(v114, type metadata accessor for MLWordTagger.ModelParameters.ValidationData);
  uint64_t v123 = v297;
  if (__swift_getEnumTagSinglePayload(v111, 1, v297) == 1)
  {
    outlined destroy of Either<LogisticRegressionClassifier<Float, String>, FullyConnectedNetworkClassifier<Float, String>>(v111, &demangling cache variable for type metadata for DataFrame?);
    uint64_t v307 = _swiftEmptyArrayStorage;
    uint64_t v124 = (uint64_t)v295;
    goto LABEL_42;
  }
  (*(void (**)(uint64_t *, uint64_t, uint64_t))(v301 + 32))(v289, v111, v123);
  unsigned int v130 = v274;
  DataFrame.subscript.getter(v295, v310, v285);
  uint64_t v131 = v302;
  v290(v291, (uint64_t)v130, v302);
  uint64_t v132 = (uint64_t)v307;
  dispatch thunk of Sequence.makeIterator()(v131, v279);
  uint64_t v133 = v132;
  uint64_t v134 = (uint64_t *)(*(int *)(v283 + 36) + v132);
  v308 = _swiftEmptyArrayStorage;
  BOOL v135 = v298;
  v294 = v134;
  while (1)
  {
    uint64_t v303 = (uint64_t *)*v134;
    long long v136 = v134;
    dispatch thunk of Collection.endIndex.getter(v302, v135);
    if (v303 == (uint64_t *)v280) {
      break;
    }
    uint64_t v137 = v136;
    uint64_t v138 = v302;
    BOOL v139 = v298;
    unsigned int v140 = (void (*)(long long *, void))dispatch thunk of Collection.subscript.read(&v280, v137, v302, v298);
    uint64_t v303 = (uint64_t *)*v141;
    swift_bridgeObjectRetain((_BYTE)v303);
    v140(&v280, 0);
    uint64_t v142 = v291;
    v290(v291, (uint64_t)v307, v138);
    uint64_t v143 = v294;
    dispatch thunk of Collection.formIndex(after:)(v294, v138, v139);
    ((void (*)(uint64_t *, uint64_t))v293)(v142, v138);
    BOOL v135 = v139;
    uint64_t v133 = (uint64_t)v307;
    uint64_t v134 = v143;
    if (v303)
    {
      v144 = v143;
      uint64_t v145 = v308;
      if (!swift_isUniquelyReferenced_nonNull_native(v308)) {
        uint64_t v145 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v145[2] + 1, 1, (uint64_t)v145);
      }
      unint64_t v146 = v145[2];
      v308 = v145;
      BOOL v135 = v298;
      uint64_t v133 = (uint64_t)v307;
      if ((unint64_t)v145[3] >> 1 <= v146)
      {
        BOOL v148 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((unint64_t)v145[3] >= 2, v146 + 1, 1, (uint64_t)v308);
        uint64_t v134 = v144;
        uint64_t v133 = (uint64_t)v307;
        BOOL v135 = v298;
        v308 = v148;
      }
      else
      {
        uint64_t v134 = v144;
      }
      uint64_t v147 = (uint64_t)v308;
      v308[2] = v146 + 1;
      *(void *)(v147 + 8 * v146 + 32) = v303;
    }
  }
  outlined destroy of Either<LogisticRegressionClassifier<Float, String>, FullyConnectedNetworkClassifier<Float, String>>(v133, &demangling cache variable for type metadata for IndexingIterator<Column<[String]>>);
  ((void (*)(uint64_t *, uint64_t))v293)(v274, v302);
  uint64_t v149 = (uint64_t)v308;
  uint64_t v307 = (uint64_t *)v308[2];
  if (v307)
  {
    swift_bridgeObjectRetain((_BYTE)v308);
    uint64_t v150 = _swiftEmptyArrayStorage;
    int v151 = 0;
    do
    {
      v294 = v151;
      uint64_t v152 = *(void *)(v149 + 8 * (void)v151 + 32);
      uint64_t v153 = *(void *)(v152 + 16);
      int64_t v154 = v150[2];
      int64_t v155 = v153 + v154;
      if (__OFADD__(v153, v154)) {
        BUG();
      }
      uint64_t v303 = (uint64_t *)v152;
      swift_bridgeObjectRetain(v152);
      char v156 = swift_isUniquelyReferenced_nonNull_native(v150);
      if (!v156 || v150[3] >> 1 < v155)
      {
        if (v154 > v155) {
          int64_t v155 = v154;
        }
        uint64_t v150 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(v156, v155, 1, (uint64_t)v150);
      }
      char v157 = (char)v303;
      if (v303[2])
      {
        uint64_t v158 = v150[2];
        if ((v150[3] >> 1) - v158 < v153) {
          BUG();
        }
        unint64_t v159 = (unint64_t)&v150[2 * v158 + 4];
        if ((unint64_t)(v303 + 4) < v159 + 16 * v153 && v159 < (unint64_t)&v303[2 * v153 + 4]) {
          goto LABEL_165;
        }
        swift_arrayInitWithCopy(v159, v303 + 4, v153, &type metadata for String);
        char v157 = (char)v303;
        if (v153)
        {
          BOOL v107 = __OFADD__(v150[2], v153);
          uint64_t v160 = v150[2] + v153;
          if (v107) {
            BUG();
          }
          v150[2] = v160;
        }
      }
      else if (v153)
      {
        BUG();
      }
      swift_bridgeObjectRelease(v157);
      int v151 = (uint64_t *)((char *)v294 + 1);
      uint64_t v149 = (uint64_t)v308;
    }
    while (v307 != (uint64_t *)((char *)v294 + 1));
    swift_bridgeObjectRelease((_BYTE)v308);
  }
  else
  {
    uint64_t v150 = _swiftEmptyArrayStorage;
  }
  swift_bridgeObjectRelease(v149);
  uint64_t v177 = specialized Set.init<A>(_:)((uint64_t)v150);
  char v178 = v177;
  char v179 = (char)v305;
  char v180 = specialized Set.isSubset(of:)((uint64_t)v305, v177);
  swift_bridgeObjectRelease(v178);
  uint64_t v181 = v309;
  uint64_t v123 = v297;
  if ((v180 & 1) == 0)
  {
    swift_bridgeObjectRelease(v179);
    swift_bridgeObjectRelease((_BYTE)v296);
    swift_bridgeObjectRelease((_BYTE)v310);
    char v121 = 0;
    uint64_t v186 = lazy protocol witness table accessor for type MLCreateError and conformance MLCreateError();
    uint64_t v187 = swift_allocError(&type metadata for MLCreateError, v186, 0, 0);
    *(void *)uint64_t v188 = 0xD00000000000003CLL;
    *(void *)(v188 + 8) = "No validation data provided." + 0x8000000000000000;
    *(_OWORD *)(v188 + 16) = 0;
    *(_OWORD *)(v188 + 32) = 0;
    *(unsigned char *)(v188 + 48) = 2;
    uint64_t v309 = v187;
    swift_willThrow(&type metadata for MLCreateError, v186, v188, v189, v190, v191);
    goto LABEL_95;
  }
  char v182 = (char)v296;
  char v183 = (char)v310;
  uint64_t v184 = static MLWordTagger.createLabeledTokenPairs(_:tokenColumnName:labelColumnName:)((uint64_t)v289, v287, (uint64_t)v296, (uint64_t)v295, (uint64_t)v310);
  uint64_t v309 = v181;
  if (v181)
  {
    swift_bridgeObjectRelease(v179);
    swift_bridgeObjectRelease(v182);
    char v185 = v183;
    char v121 = 0;
    swift_bridgeObjectRelease(v185);
LABEL_95:
    char v117 = *(void (**)(uint64_t, uint64_t))(v301 + 8);
    v117(v304, v123);
    v117((uint64_t)v289, v123);
    uint64_t v119 = (uint64_t)v306;
    goto LABEL_96;
  }
  uint64_t v122 = (uint64_t)v306;
  uint64_t v194 = (uint64_t)v184;
  (*(void (**)(uint64_t *, uint64_t))(v301 + 8))(v289, v123);
  uint64_t v124 = (uint64_t)v295;
  uint64_t v307 = (uint64_t *)v194;
LABEL_42:
  char v125 = (char)v296;
  char v126 = (char)v310;
  uint64_t v127 = v309;
  long long v128 = static MLWordTagger.createLabeledTokenPairs(_:tokenColumnName:labelColumnName:)(v122, v287, (uint64_t)v296, v124, (uint64_t)v310);
  uint64_t v309 = v127;
  if (v127)
  {
    swift_bridgeObjectRelease((_BYTE)v305);
    swift_bridgeObjectRelease((_BYTE)v307);
    swift_bridgeObjectRelease(v125);
    char v129 = v126;
    char v121 = 0;
    swift_bridgeObjectRelease(v129);
    char v117 = *(void (**)(uint64_t, uint64_t))(v301 + 8);
    v117(v304, v123);
    uint64_t v119 = v122;
LABEL_96:
    uint64_t v120 = v123;
    goto LABEL_97;
  }
  v308 = v128;
  swift_bridgeObjectRelease(v126);
  id v161 = v299;
  uint64_t v162 = (uint64_t)v307;
  if (*((unsigned char *)v299 + 40) == 1)
  {
    v284 = (uint64_t *)*v282;
    uint64_t v163 = v309;
    ML12MLWordTaggerV12trainingData11tokenColumn05labelH010parametersAC07TabularF00F5FrameV_S2SAC15ModelParametersVtKcfcSaySSGAM6tokens_AM6labelst_tcfu_33_29c983036b65b4698c68d5ff40418838AmN_AmOtAMTf3nnnpk_nTf1cn_n = _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSaySaySSG6tokens_AF6labelstG_AFs5NeverOTg5212_s8CreateML12MLWordTaggerV12trainingData11tokenColumn05labelH010parametersAC07TabularF00F5FrameV_S2SAC15ModelParametersVtKcfcSaySSGAM6tokens_AM6labelst_tcfu_33_29c983036b65b4698c68d5ff40418838AmN_AmOtAMTf3nnnpk_nTf1cn_n((uint64_t)v308);
    uint64_t v295 = (void *)ML12MLWordTaggerV12trainingData11tokenColumn05labelH010parametersAC07TabularF00F5FrameV_S2SAC15ModelParametersVtKcfcSaySSGAM6tokens_AM6labelst_tcfu_33_29c983036b65b4698c68d5ff40418838AmN_AmOtAMTf3nnnpk_nTf1cn_n[2];
    uint64_t v309 = v163;
    if (v295)
    {
      swift_bridgeObjectRetain((_BYTE)ML12MLWordTaggerV12trainingData11tokenColumn05labelH010parametersAC07TabularF00F5FrameV_S2SAC15ModelParametersVtKcfcSaySSGAM6tokens_AM6labelst_tcfu_33_29c983036b65b4698c68d5ff40418838AmN_AmOtAMTf3nnnpk_nTf1cn_n);
      uint64_t v165 = _swiftEmptyArrayStorage;
      uint64_t v166 = 0;
      v294 = ML12MLWordTaggerV12trainingData11tokenColumn05labelH010parametersAC07TabularF00F5FrameV_S2SAC15ModelParametersVtKcfcSaySSGAM6tokens_AM6labelst_tcfu_33_29c983036b65b4698c68d5ff40418838AmN_AmOtAMTf3nnnpk_nTf1cn_n;
      do
      {
        uint64_t v303 = (uint64_t *)v166;
        v167 = (void *)ML12MLWordTaggerV12trainingData11tokenColumn05labelH010parametersAC07TabularF00F5FrameV_S2SAC15ModelParametersVtKcfcSaySSGAM6tokens_AM6labelst_tcfu_33_29c983036b65b4698c68d5ff40418838AmN_AmOtAMTf3nnnpk_nTf1cn_n[v166 + 4];
        uint64_t v168 = v167[2];
        int64_t v169 = v165[2];
        int64_t v170 = v168 + v169;
        if (__OFADD__(v168, v169)) {
          BUG();
        }
        id v310 = v167;
        swift_bridgeObjectRetain((_BYTE)v167);
        char v171 = swift_isUniquelyReferenced_nonNull_native(v165);
        if (!v171 || v165[3] >> 1 < v170)
        {
          if (v169 > v170) {
            int64_t v170 = v169;
          }
          uint64_t v165 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(v171, v170, 1, (uint64_t)v165);
        }
        char v172 = (char)v305;
        char v173 = (char)v310;
        if (*((void *)v310 + 2))
        {
          uint64_t v174 = v165[2];
          if ((v165[3] >> 1) - v174 < v168) {
            BUG();
          }
          unint64_t v175 = (unint64_t)&v165[2 * v174 + 4];
          if ((unint64_t)v310 + 32 < v175 + 16 * v168 && v175 < (unint64_t)v310 + 16 * v168 + 32) {
            goto LABEL_165;
          }
          swift_arrayInitWithCopy(v175, (char *)v310 + 32, v168, &type metadata for String);
          char v173 = (char)v310;
          if (v168)
          {
            BOOL v107 = __OFADD__(v165[2], v168);
            uint64_t v176 = v165[2] + v168;
            if (v107) {
              BUG();
            }
            v165[2] = v176;
          }
        }
        else if (v168)
        {
          BUG();
        }
        swift_bridgeObjectRelease(v173);
        uint64_t v166 = (uint64_t)v303 + 1;
        ML12MLWordTaggerV12trainingData11tokenColumn05labelH010parametersAC07TabularF00F5FrameV_S2SAC15ModelParametersVtKcfcSaySSGAM6tokens_AM6labelst_tcfu_33_29c983036b65b4698c68d5ff40418838AmN_AmOtAMTf3nnnpk_nTf1cn_n = v294;
      }
      while (v295 != (uint64_t *)((char *)v303 + 1));
      swift_bridgeObjectRelease((_BYTE)v294);
      id v161 = v299;
    }
    else
    {
      uint64_t v165 = _swiftEmptyArrayStorage;
      char v172 = (char)v305;
    }
    swift_bridgeObjectRelease((_BYTE)ML12MLWordTaggerV12trainingData11tokenColumn05labelH010parametersAC07TabularF00F5FrameV_S2SAC15ModelParametersVtKcfcSaySSGAM6tokens_AM6labelst_tcfu_33_29c983036b65b4698c68d5ff40418838AmN_AmOtAMTf3nnnpk_nTf1cn_n);
    uint64_t v195 = (void *)v161[6];
    if (v195)
    {
      id v196 = v195;
    }
    else
    {
      type metadata accessor for OS_os_log(0, &lazy cache variable for type metadata for NLLanguageRecognizer, NLLanguageRecognizer_ptr);
      uint64_t v204 = v309;
      id v196 = static NLLanguageRecognizer.dominantLanguage(for:)((uint64_t)v165);
      uint64_t v309 = v204;
      if (v204)
      {
        swift_bridgeObjectRelease(v172);
        swift_bridgeObjectRelease((_BYTE)v307);
        swift_bridgeObjectRelease((_BYTE)v308);
        swift_bridgeObjectRelease((_BYTE)v165);
        swift_bridgeObjectRelease((_BYTE)v296);
        char v117 = *(void (**)(uint64_t, uint64_t))(v301 + 8);
        uint64_t v118 = v297;
        v117(v304, v297);
        goto LABEL_39;
      }
    }
    id v310 = v196;
    swift_bridgeObjectRelease((_BYTE)v165);
    if (v284 == 2) {
      uint64_t v197 = &NLModelEmbeddingTypeContextual;
    }
    else {
      uint64_t v197 = &NLModelEmbeddingTypeDynamic;
    }
    uint64_t v198 = (void *)*v197;
    uint64_t v199 = static String._unconditionallyBridgeFromObjectiveC(_:)(*v197);
    char v201 = v200;
    if (v199 == 0x6D6F74737543 && v200 == 0xE600000000000000)
    {

      swift_bridgeObjectRelease(0);
    }
    else
    {
      char v202 = _stringCompareWithSmolCheck(_:_:expecting:)(v199, v200, 0x6D6F74737543, 0xE600000000000000, 0);
      id v203 = v198;
      swift_bridgeObjectRelease(v201);
      if (v202)
      {
      }
      else
      {
        type metadata accessor for OS_os_log(0, &lazy cache variable for type metadata for NLEmbedding, NLEmbedding_ptr);
        id v205 = v310;
        uint64_t v206 = v309;
        static NLEmbedding.requestIfNotPresent(embeddingType:language:)((uint64_t)v203, (uint64_t)v310);
        uint64_t v309 = v206;
        if (v206)
        {
          swift_bridgeObjectRelease((_BYTE)v305);
          swift_bridgeObjectRelease((_BYTE)v307);

          swift_bridgeObjectRelease((_BYTE)v308);
          swift_bridgeObjectRelease((_BYTE)v296);
          v207 = *(void (**)(uint64_t, uint64_t))(v301 + 8);
          uint64_t v208 = v297;
          v207(v304, v297);
          v207((uint64_t)v306, v208);
          outlined destroy of MLWordTagger.ModelParameters((uint64_t)v300);
          char v52 = 0;
          char v121 = 0;
          goto LABEL_99;
        }
      }
    }
    uint64_t v193 = v309;
    id v161 = v299;
    uint64_t v162 = (uint64_t)v307;
  }
  else
  {
    uint64_t v193 = v309;
  }
  swift_bridgeObjectRetain(v162);
  uint64_t v209 = v193;
  uint64_t v210 = specialized static MLWordTagger.createWordTaggerModel<A, B>(trainingExamples:validatingExamples:modelParameters:)((uint64_t)v308, v162, (uint64_t)v282);
  char v211 = (char)v305;
  if (v209)
  {
    uint64_t v309 = v209;
    swift_bridgeObjectRelease(v162);
    swift_bridgeObjectRelease(v211);
    swift_bridgeObjectRelease((_BYTE)v296);
    uint64_t v212 = *(void (**)(uint64_t, uint64_t))(v301 + 8);
    uint64_t v213 = v297;
    v212(v304, v297);
    swift_bridgeObjectRelease(v162);
    uint64_t v214 = v213;
    char v121 = 0;
    v212((uint64_t)v306, v214);
    outlined destroy of MLWordTagger.ModelParameters((uint64_t)v300);
    swift_bridgeObjectRelease((_BYTE)v308);
    goto LABEL_98;
  }
  v215 = (void *)v210;
  swift_bridgeObjectRelease(v162);
  uint64_t *v161 = (uint64_t)v215;
  uint64_t v216 = v162;
  id v217 = v215;
  v218.super.isa = NLModel.asCoreML()().super.isa;
  uint64_t v309 = v219;
  LOBYTE(v220) = v219 == 0;
  id v310 = v220;
  if (v219)
  {
    char v52 = 0;
    swift_bridgeObjectRelease((_BYTE)v305);
    swift_bridgeObjectRelease(v216);

    char v221 = (char)v308;
LABEL_130:
    swift_bridgeObjectRelease(v221);
LABEL_131:
    uint64_t v225 = v304;
    uint64_t v226 = (uint64_t)v306;
    swift_bridgeObjectRelease((_BYTE)v296);
    v227 = *(void (**)(uint64_t, uint64_t))(v301 + 8);
    uint64_t v228 = v225;
    uint64_t v229 = v297;
    v227(v228, v297);
    v227(v226, v229);
    outlined destroy of MLWordTagger.ModelParameters((uint64_t)v300);

    char v121 = (char)v310;
LABEL_99:
    uint64_t v192 = v299;
    swift_bridgeObjectRelease(v299[1]);
    if (v121) {

    }
    goto LABEL_6;
  }
  uint64_t v307 = (uint64_t *)v216;
  v299[2] = (uint64_t)v218.super.isa;
  uint64_t v222 = (uint64_t)v271;
  char v223 = (char)v308;
  uint64_t v224 = v309;
  static MLWordTagger.evaluate(on:using:)((uint64_t)v308, v217);
  uint64_t v309 = v224;
  if (v224)
  {
    char v52 = 0;
    swift_bridgeObjectRelease((_BYTE)v305);
    swift_bridgeObjectRelease((_BYTE)v307);

    char v221 = v223;
    goto LABEL_130;
  }
  swift_bridgeObjectRelease(v223);
  uint64_t v230 = type metadata accessor for MLWordTagger(0);
  outlined init with take of MLWordTaggerMetrics(v222, (uint64_t)v299 + *(int *)(v230 + 32));
  if (v307[2])
  {
    uint64_t v231 = v309;
    static MLWordTagger.evaluate(on:using:)((uint64_t)v307, v217);
    uint64_t v309 = v231;
    if (v231)
    {
      swift_bridgeObjectRelease((_BYTE)v305);
      swift_bridgeObjectRelease((_BYTE)v307);

      char v52 = 1;
      goto LABEL_131;
    }
    swift_bridgeObjectRelease((_BYTE)v307);

    outlined init with take of MLWordTaggerMetrics((uint64_t)v278, (uint64_t)v299 + *(int *)(v230 + 36));
  }
  else
  {

    swift_bridgeObjectRelease((_BYTE)v307);
    uint64_t v232 = lazy protocol witness table accessor for type MLCreateError and conformance MLCreateError();
    uint64_t v233 = swift_allocError(&type metadata for MLCreateError, v232, 0, 0);
    *(void *)uint64_t v234 = 0xD00000000000001CLL;
    *(void *)(v234 + 8) = "CreateML/MLClassifier.swift" + 0x8000000000000000;
    *(_OWORD *)(v234 + 16) = 0;
    *(_OWORD *)(v234 + 32) = 0;
    *(unsigned char *)(v234 + 48) = 2;
    uint64_t v235 = (uint64_t *)((char *)v299 + *(int *)(v230 + 36));
    *uint64_t v235 = v233;
    uint64_t v236 = type metadata accessor for MLClassifierMetrics.Contents(0);
    swift_storeEnumTagMultiPayload(v235, v236, 2);
  }
  uint64_t v237 = v275;
  char v238 = (char)v296;
  DataFrame.subscript.getter(v287, v296, v285);
  swift_bridgeObjectRelease(v238);
  uint64_t v239 = v302;
  v290(v291, (uint64_t)v237, v302);
  dispatch thunk of Sequence.makeIterator()(v239, v279);
  uint64_t v288 = (uint64_t *)((char *)v288 + *(int *)(v283 + 36));
  id v310 = _swiftEmptyArrayStorage;
  uint64_t v240 = v302;
LABEL_141:
  uint64_t v241 = v288;
  while (1)
  {
    uint64_t v242 = *v241;
    dispatch thunk of Collection.endIndex.getter(v240, v298);
    if (v242 == (void)v280) {
      break;
    }
    int v243 = v241;
    uint64_t v244 = (uint64_t)v286;
    v245 = (void (*)(long long *, void))dispatch thunk of Collection.subscript.read(&v280, v243, v240, v298);
    uint64_t v247 = *v246;
    swift_bridgeObjectRetain(*v246);
    v245(&v280, 0);
    int v248 = v291;
    uint64_t v249 = v244;
    uint64_t v241 = v288;
    v290(v291, v249, v240);
    dispatch thunk of Collection.formIndex(after:)(v241, v240, v298);
    ((void (*)(uint64_t *, uint64_t))v293)(v248, v240);
    if (v247)
    {
      uint64_t v250 = *(void *)(v247 + 16);
      swift_bridgeObjectRelease(v247);
      if (!swift_isUniquelyReferenced_nonNull_native(v310)) {
        id v310 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *((void *)v310 + 2) + 1, 1, (uint64_t)v310);
      }
      unint64_t v251 = *((void *)v310 + 2);
      if (*((void *)v310 + 3) >> 1 <= v251) {
        id v310 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(*((void *)v310 + 3) >= 2uLL, v251 + 1, 1, (uint64_t)v310);
      }
      v252 = v310;
      *((void *)v310 + 2) = v251 + 1;
      v252[v251 + 4] = v250;
      goto LABEL_141;
    }
  }
  outlined destroy of Either<LogisticRegressionClassifier<Float, String>, FullyConnectedNetworkClassifier<Float, String>>((uint64_t)v286, &demangling cache variable for type metadata for IndexingIterator<Column<[String]>>);
  ((void (*)(uint64_t *, uint64_t))v293)(v275, v240);
  uint64_t v253 = *((void *)v310 + 2);
  if (v253)
  {
    uint64_t v254 = 0;
    uint64_t v255 = 0;
    do
    {
      BOOL v107 = __OFADD__(*((void *)v310 + v254 + 4), v255);
      v255 += *((void *)v310 + v254 + 4);
      if (v107) {
        BUG();
      }
      ++v254;
    }
    while (v253 != v254);
    swift_bridgeObjectRelease((_BYTE)v310);
    float v256 = (float)(int)v255;
  }
  else
  {
    swift_bridgeObjectRelease((_BYTE)v310);
    float v256 = 0.0;
  }
  *(float *)&id v310 = v256;
  id v257 = v277;
  DataFrame.rows.getter();
  BOOL v258 = specialized Collection.isEmpty.getter();
  v259 = *(void (**)(uint64_t *, uint64_t))(v272 + 8);
  v259(v257, v276);
  LODWORD(v302) = 0;
  if (!v258)
  {
    v260 = v277;
    DataFrame.rows.getter();
    int v261 = DataFrame.Rows.count.getter();
    v259(v260, v276);
    *(float *)&uint64_t v302 = *(float *)&v310 / (float)v261;
  }
  uint64_t v262 = v305[2];
  swift_bridgeObjectRelease((_BYTE)v305);
  uint64_t v263 = (uint64_t)v300;
  char v264 = *((unsigned char *)v300 + 16);
  long long v280 = *v300;
  char v281 = v264;
  static MLWordTagger.reportAnalytics(averageTokenCount:labelCount:algorithm:language:)(v262, (uint64_t *)&v280, *((void *)v300 + 3), *(Swift::Float *)&v302);
  v265 = *(void (**)(uint64_t, uint64_t))(v301 + 8);
  uint64_t v266 = v297;
  v265(v304, v297);
  v265((uint64_t)v306, v266);
  return outlined destroy of MLWordTagger.ModelParameters(v263);
}

uint64_t specialized Set.isSubset(of:)(uint64_t a1, uint64_t a2)
{
  if (*(void *)(a1 + 16) >= *(void *)(a2 + 16))
  {
    uint64_t v3 = a2;
    uint64_t v4 = a1;
    uint64_t v5 = -1 << *(unsigned char *)(a2 + 32);
    uint64_t v34 = ~v5;
    uint64_t v6 = ~(-1 << -(char)v5);
    if (-v5 >= 64) {
      uint64_t v6 = -1;
    }
    unint64_t v2 = *(void *)(a2 + 56) & v6;
    uint64_t v38 = a2 + 56;
    int64_t v37 = (unint64_t)(63 - v5) >> 6;
    swift_bridgeObjectRetain(a2);
    int64_t v7 = 0;
    uint64_t v35 = a2;
    uint64_t v36 = a1;
    while (1)
    {
      unint64_t v8 = v2;
      if (v2)
      {
        _BitScanForward64(&v9, v2);
        uint64_t v10 = v2 & (v2 - 1);
        unint64_t v11 = v9 | (v7 << 6);
        int64_t v12 = v7;
      }
      else
      {
        int64_t v13 = v7 + 1;
        if (__OFADD__(1, v7)) {
          BUG();
        }
        LOBYTE(v2) = 1;
        if (v13 >= v37) {
          goto LABEL_34;
        }
        unint64_t i = *(void *)(v38 + 8 * v13);
        if (i)
        {
          int64_t v12 = v7 + 1;
        }
        else
        {
          int64_t v12 = v7 + 2;
          if (v7 + 2 >= v37) {
            goto LABEL_34;
          }
          unint64_t i = *(void *)(v38 + 8 * v13 + 8);
          if (!i)
          {
            int64_t v12 = v7 + 3;
            if (v7 + 3 >= v37) {
              goto LABEL_34;
            }
            unint64_t i = *(void *)(v38 + 8 * v13 + 16);
            if (!i)
            {
              int64_t v12 = v7 + 4;
              if (v7 + 4 >= v37) {
                goto LABEL_34;
              }
              for (unint64_t i = *(void *)(v38 + 8 * v13 + 24); !i; unint64_t i = *(void *)(v38 + 8 * v12))
              {
                if (__OFADD__(1, v12++)) {
                  BUG();
                }
                if (v12 >= v37) {
                  goto LABEL_34;
                }
              }
            }
          }
        }
        _BitScanForward64(&v15, i);
        uint64_t v10 = i & (i - 1);
        unint64_t v11 = v15 + (v12 << 6);
      }
      if (!*(void *)(v4 + 16)) {
        break;
      }
      unint64_t v31 = v10;
      int64_t v30 = v12;
      unint64_t v33 = v8;
      int64_t v32 = v7;
      uint64_t v16 = *(void *)(v3 + 48);
      uint64_t v17 = 16 * v11;
      uint64_t v18 = *(void *)(v16 + v17);
      unint64_t v2 = *(void *)(v16 + v17 + 8);
      Hasher.init(_seed:)(*(void *)(v4 + 40));
      swift_bridgeObjectRetain(v2);
      String.hash(into:)(v29, v18);
      Swift::Int v19 = Hasher._finalize()();
      uint64_t v20 = ~(-1 << *(unsigned char *)(v4 + 32));
      unint64_t v21 = v20 & v19;
      uint64_t v22 = *(void *)(v4 + 8 * ((v20 & (unint64_t)v19) >> 6) + 56);
      if (!_bittest64(&v22, v21))
      {
LABEL_32:
        swift_bridgeObjectRelease(v2);
        LODWORD(v2) = 0;
        uint64_t v3 = v35;
        goto LABEL_34;
      }
      uint64_t v23 = *(void *)(v36 + 48);
      while (1)
      {
        uint64_t v24 = *(void *)(v23 + 16 * v21);
        uint64_t v25 = *(void *)(v23 + 16 * v21 + 8);
        if (v24 == v18 && v25 == v2) {
          break;
        }
        if (_stringCompareWithSmolCheck(_:_:expecting:)(v24, v25, v18, v2, 0)) {
          break;
        }
        unint64_t v21 = v20 & (v21 + 1);
        uint64_t v26 = *(void *)(v36 + 8 * (v21 >> 6) + 56);
        if (!_bittest64(&v26, v21)) {
          goto LABEL_32;
        }
      }
      swift_bridgeObjectRelease(v2);
      uint64_t v3 = v35;
      uint64_t v4 = v36;
      int64_t v7 = v30;
      unint64_t v2 = v31;
    }
    LODWORD(v2) = 0;
LABEL_34:
    outlined consume of [String : [Int]].Iterator._Variant(v3);
  }
  else
  {
    LODWORD(v2) = 0;
  }
  return v2;
}

uint64_t specialized static MLWordTagger.createWordTaggerModel<A, B>(trainingExamples:validatingExamples:modelParameters:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = a2;
  uint64_t TrainedModelWithData = a1;
  Class v6 = static MLWordTagger.buildOptions(_:)(a3);
  if (!v3)
  {
    Class v44 = v6;
    uint64_t v7 = (uint64_t)_swiftEmptyArrayStorage;
    uint64_t v8 = (uint64_t)_swiftEmptyArrayStorage;
    uint64_t v42 = *(void *)(a1 + 16);
    if (v42)
    {
      aBlock = (void **)_swiftEmptyArrayStorage;
      uint64_t v9 = v42;
      specialized ContiguousArray.reserveCapacity(_:)(v42);
      type metadata accessor for OS_os_log(0, &lazy cache variable for type metadata for NSDictionary, NSDictionary_ptr);
      uint64_t v10 = (void *)(a1 + 40);
      do
      {
        int64_t v45 = v10;
        uint64_t v11 = *(v10 - 1);
        uint64_t v12 = *v10;
        uint64_t v13 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Any, Any)>);
        uint64_t v14 = (void *)swift_allocObject(v13, 160, 7);
        v14[2] = 2;
        v14[3] = 4;
        v14[7] = &type metadata for String;
        v14[4] = 0x7272416C6562614CLL;
        v14[5] = 0xEA00000000007961;
        uint64_t v15 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [String]);
        v14[11] = v15;
        v14[8] = v12;
        v14[15] = &type metadata for String;
        v14[12] = 0x7272416E656B6F54;
        v14[13] = 0xEA00000000007961;
        v14[19] = v15;
        v14[16] = v11;
        swift_bridgeObjectRetain(v11);
        swift_bridgeObjectRetain(v12);
        uint64_t v16 = v14;
        uint64_t v17 = NSDictionary.init(dictionaryLiteral:)(v14);
        specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()(v16);
        uint64_t v18 = aBlock[2];
        specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)(v18);
        specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)(v18);
        specialized ContiguousArray._endMutation()(v18, v17);
        uint64_t v10 = v45 + 2;
        --v9;
      }
      while (v9);
      uint64_t v8 = (uint64_t)aBlock;
      uint64_t v4 = a2;
      uint64_t v7 = (uint64_t)_swiftEmptyArrayStorage;
    }
    uint64_t v55 = v8;
    uint64_t v43 = *(void *)(v4 + 16);
    if (v43)
    {
      uint64_t v41 = v8;
      aBlock = (void **)_swiftEmptyArrayStorage;
      uint64_t v19 = v43;
      specialized ContiguousArray.reserveCapacity(_:)(v43);
      type metadata accessor for OS_os_log(0, &lazy cache variable for type metadata for NSDictionary, NSDictionary_ptr);
      uint64_t v20 = (void *)(v4 + 40);
      do
      {
        Swift::String v47 = v20;
        uint64_t v46 = *(v20 - 1);
        uint64_t v21 = *v20;
        uint64_t v22 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Any, Any)>);
        uint64_t v23 = (void *)swift_allocObject(v22, 160, 7);
        v23[2] = 2;
        v23[3] = 4;
        v23[7] = &type metadata for String;
        v23[4] = 0x7272416C6562614CLL;
        v23[5] = 0xEA00000000007961;
        uint64_t v24 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [String]);
        v23[11] = v24;
        v23[8] = v21;
        v23[15] = &type metadata for String;
        v23[12] = 0x7272416E656B6F54;
        v23[13] = 0xEA00000000007961;
        v23[19] = v24;
        v23[16] = v46;
        swift_bridgeObjectRetain(v46);
        swift_bridgeObjectRetain(v21);
        uint64_t v25 = v23;
        uint64_t v26 = NSDictionary.init(dictionaryLiteral:)(v23);
        specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()(v25);
        uint64_t v27 = aBlock[2];
        specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)(v27);
        specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)(v27);
        specialized ContiguousArray._endMutation()(v27, v26);
        uint64_t v20 = v47 + 2;
        --v19;
      }
      while (v19);
      uint64_t v7 = (uint64_t)aBlock;
      uint64_t v8 = v41;
    }
    uint64_t v56 = 0;
    if (!swift_isUniquelyReferenced_nonNull_bridgeObject(v8) || (v8 & 0x4000000000000001) != 0)
    {
      uint64_t v8 = specialized _ArrayBuffer._consumeAndCreateNew()(v8);
      uint64_t v55 = v8;
    }
    uint64_t v28 = v8 & 0xFFFFFFFFFFFFF8;
    uint64_t v54 = v7;
    if (!swift_isUniquelyReferenced_nonNull_bridgeObject(v7) || (v7 & 0x4000000000000001) != 0)
    {
      uint64_t v7 = specialized _ArrayBuffer._consumeAndCreateNew()(v7);
      uint64_t v54 = v7;
    }
    char v52 = implicit closure #1 in closure #1 in closure #3 in static MLWordTagger.createWordTaggerModel<A, B>(trainingExamples:validatingExamples:modelParameters:);
    uint64_t v53 = 0;
    aBlock = _NSConcreteStackBlock;
    uint64_t v49 = 1107296256;
    uint64_t v50 = thunk for @escaping @callee_guaranteed (@unowned UnsafeMutableRawPointer?, @unowned Int) -> (@unowned Unmanaged<CFDictionaryRef>?);
    uint64_t v51 = &block_descriptor_0;
    uint64_t v29 = _Block_copy(&aBlock);
    char v52 = MLBoostedTreeRegressor.ModelParameters.maxDepth.modify;
    uint64_t v53 = 0;
    int64_t v30 = v29;
    aBlock = _NSConcreteStackBlock;
    uint64_t v49 = 1107296256;
    uint64_t v50 = thunk for @escaping @callee_guaranteed (@guaranteed CFStringRef?, @unowned UnsafeMutablePointer<Bool>?) -> ();
    uint64_t v51 = &block_descriptor_4;
    uint64_t v40 = _Block_copy(&aBlock);
    uint64_t TrainedModelWithData = NLPSequenceModelCreateTrainedModelWithData(v44, v42, v43, v28 + 32, (v7 & 0xFFFFFFFFFFFFF8) + 32);
    _Block_release(v40);
    _Block_release(v30);
    specialized Array._endMutation()();
    char v31 = v54;
    specialized Array._endMutation()();
    swift_bridgeObjectRelease(v55);
    uint64_t v32 = v56;
    if (v56)
    {
      uint64_t TrainedModelWithData = type metadata accessor for CFErrorRef(0);
      unint64_t v33 = (ValueMetadata *)TrainedModelWithData;
      uint64_t v34 = lazy protocol witness table accessor for type VNImageOption and conformance VNImageOption(&lazy protocol witness table cache variable for type CFErrorRef and conformance CFErrorRef, type metadata accessor for CFErrorRef, (uint64_t)&protocol conformance descriptor for CFErrorRef);
      swift_allocError(TrainedModelWithData, v34, 0, 0);
      *(void *)uint64_t v35 = v32;
    }
    else
    {
      if (TrainedModelWithData)
      {

        swift_bridgeObjectRelease(v31);
        return TrainedModelWithData;
      }
      unint64_t v33 = &type metadata for MLCreateError;
      uint64_t v34 = lazy protocol witness table accessor for type MLCreateError and conformance MLCreateError();
      swift_allocError(&type metadata for MLCreateError, v34, 0, 0);
      *(void *)uint64_t v35 = 0xD000000000000025;
      *(void *)(v35 + 8) = "v24@?0r^{__CFString=}8^B16" + 0x8000000000000000;
      *(_OWORD *)(v35 + 16) = 0;
      *(_OWORD *)(v35 + 32) = 0;
      *(unsigned char *)(v35 + 48) = 0;
    }
    swift_willThrow(v33, v34, v35, v36, v37, v38);

    swift_bridgeObjectRelease(v54);
  }
  return TrainedModelWithData;
}

char static MLWordTagger.reportAnalytics(averageTokenCount:labelCount:algorithm:language:)(int a1, uint64_t *a2, uint64_t a3, Swift::Float a4)
{
  uint64_t v5 = *a2;
  char v6 = *((unsigned char *)a2 + 16);
  char result = AnalyticsReporter.init()();
  if ((result & 1) == 0)
  {
    AnalyticsReporter.reportDataMetrics(model:metricName:quantity:)(CreateML_ModelType_wordTagger, (Swift::String)__PAIR128__((unint64_t)("WordTagger\n\nParameters\n" + 0x8000000000000000), 0xD00000000000001BLL), a4);
    AnalyticsReporter.reportDataMetrics(model:metricName:quantity:)(CreateML_ModelType_wordTagger, (Swift::String)__PAIR128__((unint64_t)("Number of Annotations" + 0x8000000000000000), 0xD000000000000010), (float)a1);
    if (v6)
    {
      uint64_t v8 = a3;
      if ((_BYTE)v5)
      {
        if (v5 == 1)
        {
          uint64_t v9 = "Unspecified Language" + 0x8000000000000000;
          unint64_t v10 = 0xD000000000000027;
        }
        else
        {
          uint64_t v9 = "Average Tokens per Sequence" + 0x8000000000000000;
          unint64_t v10 = 0xD000000000000046;
        }
      }
      else
      {
        unint64_t v10 = 0xD000000000000016;
        uint64_t v9 = "ge Model Text Embedding" + 0x8000000000000000;
      }
      unint64_t v16 = v10;
      swift_bridgeObjectRetain((_BYTE)v9);
      v12._uint64_t countAndFlagsBits = 0x6C65646F4D20;
      v12._char object = (void *)0xE600000000000000;
      String.append(_:)(v12);
      swift_bridgeObjectRelease((_BYTE)v9);
      unint64_t v11 = v16;
    }
    else
    {
      uint64_t v9 = "Dynamic Text Embedding" + 0x8000000000000000;
      unint64_t v11 = 0xD00000000000001ELL;
      uint64_t v8 = a3;
    }
    AnalyticsReporter.reportParameterSettings(model:parameterName:parameterValue:)(CreateML_ModelType_wordTagger, (Swift::String)__PAIR128__(0xE90000000000006DLL, 0x687469726F676C41), (Swift::String)__PAIR128__((unint64_t)v9, v11));
    swift_bridgeObjectRelease((_BYTE)v9);
    if (v8)
    {
      uint64_t v13 = static String._unconditionallyBridgeFromObjectiveC(_:)(v8);
      uint64_t v15 = v14;
    }
    else
    {
      uint64_t v15 = "formers Text Embedding" + 0x8000000000000000;
      uint64_t v13 = 0xD000000000000014;
    }
    AnalyticsReporter.reportParameterSettings(model:parameterName:parameterValue:)(CreateML_ModelType_wordTagger, (Swift::String)__PAIR128__(0xE800000000000000, 0x65676175676E614CLL), (Swift::String)__PAIR128__((unint64_t)v15, v13));
    return swift_bridgeObjectRelease((_BYTE)v15);
  }
  return result;
}

uint64_t MLWordTagger.init(trainingData:tokenColumn:labelColumn:parameters:)(uint64_t *a1, uint64_t a2, uint64_t *a3, uint64_t a4, void *a5, uint64_t a6)
{
  uint64_t v15 = a4;
  unint64_t v16 = a3;
  uint64_t v18 = a2;
  uint64_t v17 = a5;
  int64_t v7 = *(void *)(*(void *)(type metadata accessor for DataFrame(0) - 8) + 64);
  uint64_t v8 = alloca(v7);
  uint64_t v9 = alloca(v7);
  char v10 = *((unsigned char *)a1 + 8);
  uint64_t v13 = *a1;
  char v14 = v10;
  DataFrame.init(_:)((uint64_t)&v13);
  outlined init with copy of MLWordTagger.ModelParameters(a6, (uint64_t)&v13);
  MLWordTagger.init(trainingData:tokenColumn:labelColumn:parameters:)((uint64_t)&v12, v18, v16, v15, v17, (uint64_t)&v13);
  return outlined destroy of MLWordTagger.ModelParameters(a6);
}

void *closure #1 in static MLWordTagger.createTextColumn(_:name:context:)(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = *a1;
  if (*a1)
  {
    uint64_t v8 = result;
    swift_bridgeObjectRetain(a3);
    swift_bridgeObjectRetain(v5);
    ML11MLDataValueOG_SSsAE_pTg503_s8d97ML12MLWordTaggerV16createTextColumn_4name7context11TabularData0G0VySaySSGGAG0K5FrameV_S2StKFZAJSgt4AA11fG29OGSgKXEfU_AjQKXEfU_SSAPKXEfU_SSTf1cn_n = _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSay8CreateML11MLDataValueOG_SSsAE_pTg503_s8d97ML12MLWordTaggerV16createTextColumn_4name7context11TabularData0G0VySaySSGGAG0K5FrameV_S2StKFZAJSgt4AA11fG29OGSgKXEfU_AjQKXEfU_SSAPKXEfU_SSTf1cn_n(v5, a2, a3);
    char result = (void *)swift_bridgeObjectRelease(v5);
    if (v4) {
      return result;
    }
    char result = v8;
  }
  else
  {
    ML11MLDataValueOG_SSsAE_pTg503_s8d97ML12MLWordTaggerV16createTextColumn_4name7context11TabularData0G0VySaySSGGAG0K5FrameV_S2StKFZAJSgt4AA11fG29OGSgKXEfU_AjQKXEfU_SSAPKXEfU_SSTf1cn_n = 0;
  }
  *char result = ML11MLDataValueOG_SSsAE_pTg503_s8d97ML12MLWordTaggerV16createTextColumn_4name7context11TabularData0G0VySaySSGGAG0K5FrameV_S2StKFZAJSgt4AA11fG29OGSgKXEfU_AjQKXEfU_SSAPKXEfU_SSTf1cn_n;
  return result;
}

void *closure #2 in static MLWordTagger.createTextColumn(_:name:context:)(uint64_t *a1)
{
  unint64_t v2 = v1;
  uint64_t v3 = *a1;
  if (v3) {
    char result = specialized _arrayConditionalCast<A, B>(_:)(v3);
  }
  else {
    char result = 0;
  }
  void *v2 = result;
  return result;
}

uint64_t static MLWordTagger.generateTextTable(_:tokenColumn:labelColumn:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v39 = a4;
  uint64_t v38 = a3;
  uint64_t v41 = v5;
  uint64_t v40 = a2;
  uint64_t v37 = a5;
  uint64_t v7 = *(void *)(a1 + 16);
  if (v7)
  {
    swift_bridgeObjectRetain(a1);
    uint64_t v42 = a1;
    uint64_t v8 = (uint64_t *)(a1 + 40);
    uint64_t v9 = _swiftEmptyArrayStorage;
    os_log_type_t v48 = _swiftEmptyArrayStorage;
    do
    {
      uint64_t v10 = *v8;
      uint64_t v36 = *(v8 - 1);
      swift_bridgeObjectRetain(v36);
      uint64_t v45 = v10;
      swift_bridgeObjectRetain(v10);
      uint64_t v46 = v7;
      if (!swift_isUniquelyReferenced_nonNull_native(v9)) {
        uint64_t v9 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v9[2] + 1, 1, (uint64_t)v9);
      }
      unint64_t v11 = v9[2];
      ML14_UntypedColumnC_s5Error_pTgm5 = v9;
      uint64_t v12 = v48;
      if (v9[3] >> 1 <= v11)
      {
        uint64_t v12 = v48;
        ML14_UntypedColumnC_s5Error_pTgm5 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(v9[3] >= 2uLL, v11 + 1, 1, (uint64_t)ML14_UntypedColumnC_s5Error_pTgm5);
      }
      uint64_t v13 = (uint64_t)ML14_UntypedColumnC_s5Error_pTgm5;
      ML14_UntypedColumnC_s5Error_pTgm5[2] = v11 + 1;
      *(void *)(v13 + 8 * v11 + 32) = v36;
      if (swift_isUniquelyReferenced_nonNull_native(v12)) {
        char v14 = v48;
      }
      else {
        char v14 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v48[2] + 1, 1, (uint64_t)v48);
      }
      unint64_t v15 = v14[2];
      if (v14[3] >> 1 <= v15) {
        char v14 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(v14[3] >= 2uLL, v15 + 1, 1, (uint64_t)v14);
      }
      v14[2] = v15 + 1;
      os_log_type_t v48 = v14;
      v14[v15 + 4] = v45;
      v8 += 2;
      uint64_t v7 = v46 - 1;
      uint64_t v9 = ML14_UntypedColumnC_s5Error_pTgm5;
    }
    while (v46 != 1);
    swift_bridgeObjectRelease(v42);
    unint64_t v16 = v48;
  }
  else
  {
    uint64_t v9 = _swiftEmptyArrayStorage;
    unint64_t v16 = _swiftEmptyArrayStorage;
  }
  uint64_t v43 = v9;
  uint64_t v17 = alloca(24);
  uint64_t v18 = alloca(32);
  ML14_UntypedColumnC_s5Error_pTgm5 = (void *)_ss6ResultOsRi_zrlE8catchingAByxq_Gxyq_YKXE_tcfC8CreateML14_UntypedColumnC_s5Error_pTgm5((void (*)(void *))partial apply for specialized closure #1 in MLUntypedColumn.init<A>(_:));
  LOBYTE(v45) = v19;
  swift_bridgeObjectRelease((_BYTE)v43);
  uint64_t v43 = v16;
  uint64_t v20 = alloca(24);
  uint64_t v21 = alloca(32);
  uint64_t v35 = &v43;
  os_log_type_t v48 = (void *)_ss6ResultOsRi_zrlE8catchingAByxq_Gxyq_YKXE_tcfC8CreateML14_UntypedColumnC_s5Error_pTgm5((void (*)(void *))closure #1 in MLUntypedColumn.init<A>(_:)specialized partial apply);
  LOBYTE(v46) = v22;
  swift_bridgeObjectRelease((_BYTE)v43);
  uint64_t v23 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, MLUntypedColumn)>);
  uint64_t inited = swift_initStackObject(v23, v34);
  *(void *)(inited + 16) = 2;
  *(void *)(inited + 24) = 4;
  *(void *)(inited + 32) = v40;
  char v25 = v38;
  *(void *)(inited + 40) = v38;
  uint64_t v26 = (uint64_t)ML14_UntypedColumnC_s5Error_pTgm5;
  *(void *)(inited + 48) = ML14_UntypedColumnC_s5Error_pTgm5;
  char v27 = v45;
  *(unsigned char *)(inited + 56) = v45 & 1;
  *(void *)(inited + 64) = v39;
  char v28 = v37;
  *(void *)(inited + 72) = v37;
  *(void *)(inited + 80) = v48;
  *(unsigned char *)(inited + 88) = v46 & 1;
  swift_bridgeObjectRetain(v25);
  outlined copy of Result<_DataTable, Error>(v26, v27);
  swift_bridgeObjectRetain(v28);
  LOBYTE(v26) = v46;
  uint64_t v29 = v48;
  outlined copy of Result<_DataTable, Error>((uint64_t)v48, v46);
  uint64_t v30 = Dictionary.init(dictionaryLiteral:)(inited, &type metadata for String, &type metadata for MLUntypedColumn, &protocol witness table for String);
  specialized MLDataTable.init<A>(uniqueKeysWithValues:)(v30);
  outlined consume of Result<_DataTable, Error>((uint64_t)v29, v26);
  uint64_t result = outlined consume of Result<_DataTable, Error>((uint64_t)ML14_UntypedColumnC_s5Error_pTgm5, v27);
  if (!v6)
  {
    uint64_t result = (uint64_t)v43;
    char v32 = v44;
    unint64_t v33 = v41;
    void *v41 = v43;
    *((unsigned char *)v33 + 8) = v32;
  }
  return result;
}

void *MLWordTagger.description.getter()
{
  return MLWordTagger.debugDescription.getter();
}

void *MLWordTagger.debugDescription.getter()
{
  uint64_t v1 = v0;
  v23._char object = (void *)type metadata accessor for MLClassifierMetrics.Contents(0);
  int64_t v2 = *(void *)(*((void *)v23._object - 1) + 64);
  uint64_t v3 = alloca(v2);
  uint64_t v4 = alloca(v2);
  v23._uint64_t countAndFlagsBits = (uint64_t)MLWordTagger.ModelParameters.description.getter();
  uint64_t v6 = v5;
  uint64_t v7 = type metadata accessor for MLWordTagger(0);
  v20._uint64_t countAndFlagsBits = MLClassifierMetrics.description.getter();
  v20._char object = v8;
  uint64_t v9 = *(int *)(v7 + 36);
  uint64_t v10 = v6;
  outlined init with copy of MLTrainingSessionParameters(v1 + v9, (uint64_t)&v19, type metadata accessor for MLClassifierMetrics.Contents);
  LODWORD(v23._object) = swift_getEnumCaseMultiPayload(&v19, v23._object);
  outlined destroy of MLActivityClassifier.ModelParameters((uint64_t)&v19, type metadata accessor for MLClassifierMetrics.Contents);
  v21._uint64_t countAndFlagsBits = MLClassifierMetrics.description.getter();
  uint64_t v12 = v11;
  v21._char object = (void *)0xD000000000000017;
  char v22 = "er than or equal to 1." + 0x8000000000000000;
  v13._uint64_t countAndFlagsBits = v23._countAndFlagsBits;
  v23._uint64_t countAndFlagsBits = (uint64_t)v10;
  v13._char object = v10;
  String.append(_:)(v13);
  v19._uint64_t countAndFlagsBits = 0xD00000000000001ELL;
  v19._char object = "ActivityClassifier\n\nParameters\n" + 0x8000000000000000;
  char object = (char)v20._object;
  String.append(_:)(v20);
  LOBYTE(v1) = v19._object;
  String.append(_:)(v19);
  swift_bridgeObjectRelease(v1);
  if (LODWORD(v23._object) > 1)
  {
    char v17 = object;
  }
  else
  {
    v19._uint64_t countAndFlagsBits = 0xD000000000000020;
    v19._char object = "\nPerformance on Training Data\n" + 0x8000000000000000;
    v15._uint64_t countAndFlagsBits = v21._countAndFlagsBits;
    v15._char object = v12;
    String.append(_:)(v15);
    char v16 = (char)v19._object;
    String.append(_:)(v19);
    swift_bridgeObjectRelease(object);
    char v17 = (char)v12;
    LOBYTE(v12) = v16;
  }
  swift_bridgeObjectRelease(v17);
  swift_bridgeObjectRelease((_BYTE)v12);
  swift_bridgeObjectRelease(v23._countAndFlagsBits);
  return v21._object;
}

NSAttributedString MLWordTagger.playgroundDescription.getter()
{
  uint64_t v1 = v0;
  uint64_t v2 = type metadata accessor for OS_os_log(0, &lazy cache variable for type metadata for NSAttributedString, NSAttributedString_ptr);
  v3._uint64_t countAndFlagsBits = (uint64_t)MLWordTagger.debugDescription.getter();
  v3._char object = v4;
  result.super.isa = NSAttributedString.__allocating_init(string:)(v3).super.isa;
  v1[3].super.isa = (Class)v2;
  v1->super.isa = result.super.isa;
  return result;
}

void *protocol witness for CustomStringConvertible.description.getter in conformance MLWordTagger()
{
  return MLWordTagger.description.getter();
}

void *protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance MLWordTagger()
{
  return MLWordTagger.debugDescription.getter();
}

NSAttributedString protocol witness for CustomPlaygroundDisplayConvertible.playgroundDescription.getter in conformance MLWordTagger()
{
  return MLWordTagger.playgroundDescription.getter();
}

void *specialized UnsafeMutablePointer.initialize(from:count:)(char *__src, uint64_t a2, char *a3)
{
  return specialized UnsafeMutablePointer.initialize(from:count:)(__src, a2, a3);
}

{
  if (a2 < 0)
  {
    _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize with negative count", 51, 2, "Swift/UnsafePointer.swift", 25, 2, 1090, 1);
    goto LABEL_7;
  }
  if (&a3[8 * a2] > __src && &__src[8 * a2] > a3)
  {
    _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize overlapping range", 49, 2, "Swift/UnsafePointer.swift", 25, 2, 1092, 1);
LABEL_7:
    BUG();
  }
  return memcpy(a3, __src, 8 * a2);
}

{
  if (a2 < 0)
  {
    _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize with negative count", 51, 2, "Swift/UnsafePointer.swift", 25, 2, 1090, 1);
    goto LABEL_7;
  }
  if (&a3[8 * a2] > __src && &__src[8 * a2] > a3)
  {
    _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize overlapping range", 49, 2, "Swift/UnsafePointer.swift", 25, 2, 1092, 1);
LABEL_7:
    BUG();
  }
  return memcpy(a3, __src, 8 * a2);
}

{
  return specialized UnsafeMutablePointer.initialize(from:count:)(__src, a2, a3);
}

{
  size_t v4;

  if (a2 < 0)
  {
    _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize with negative count", 51, 2, "Swift/UnsafePointer.swift", 25, 2, 1090, 1);
    goto LABEL_7;
  }
  uint64_t v4 = 16 * a2;
  if (&a3[16 * a2] > __src && &__src[v4] > a3)
  {
    _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize overlapping range", 49, 2, "Swift/UnsafePointer.swift", 25, 2, 1092, 1);
LABEL_7:
    BUG();
  }
  return memcpy(a3, __src, v4);
}

{
  if (a2 < 0)
  {
    _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize with negative count", 51, 2, "Swift/UnsafePointer.swift", 25, 2, 1090, 1);
    goto LABEL_7;
  }
  if (&a3[4 * a2] > __src && &__src[4 * a2] > a3)
  {
    _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize overlapping range", 49, 2, "Swift/UnsafePointer.swift", 25, 2, 1092, 1);
LABEL_7:
    BUG();
  }
  return memcpy(a3, __src, 4 * a2);
}

{
  if (a2 < 0)
  {
    _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize with negative count", 51, 2, "Swift/UnsafePointer.swift", 25, 2, 1090, 1);
    goto LABEL_7;
  }
  if (&a3[4 * a2] > __src && &__src[4 * a2] > a3)
  {
    _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize overlapping range", 49, 2, "Swift/UnsafePointer.swift", 25, 2, 1092, 1);
LABEL_7:
    BUG();
  }
  return memcpy(a3, __src, 4 * a2);
}

{
  return specialized UnsafeMutablePointer.initialize(from:count:)(__src, a2, a3);
}

{
  size_t v4;

  if (a2 < 0)
  {
    _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize with negative count", 51, 2, "Swift/UnsafePointer.swift", 25, 2, 1090, 1);
    goto LABEL_7;
  }
  uint64_t v4 = 32 * a2;
  if (&a3[32 * a2] > __src && &__src[v4] > a3)
  {
    _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize overlapping range", 49, 2, "Swift/UnsafePointer.swift", 25, 2, 1092, 1);
LABEL_7:
    BUG();
  }
  return memcpy(a3, __src, v4);
}

{
  size_t v4;

  if (a2 < 0)
  {
    _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize with negative count", 51, 2, "Swift/UnsafePointer.swift", 25, 2, 1090, 1);
    goto LABEL_7;
  }
  uint64_t v4 = 16 * a2;
  if (&a3[16 * a2] > __src && &__src[v4] > a3)
  {
    _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize overlapping range", 49, 2, "Swift/UnsafePointer.swift", 25, 2, 1092, 1);
LABEL_7:
    BUG();
  }
  return memcpy(a3, __src, v4);
}

{
  size_t v4;

  if (a2 < 0)
  {
    _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize with negative count", 51, 2, "Swift/UnsafePointer.swift", 25, 2, 1090, 1);
    goto LABEL_7;
  }
  uint64_t v4 = 24 * a2;
  if (&a3[24 * a2] > __src && &__src[v4] > a3)
  {
    _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize overlapping range", 49, 2, "Swift/UnsafePointer.swift", 25, 2, 1092, 1);
LABEL_7:
    BUG();
  }
  return memcpy(a3, __src, v4);
}

{
  size_t v4;

  if (a2 < 0)
  {
    _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize with negative count", 51, 2, "Swift/UnsafePointer.swift", 25, 2, 1090, 1);
    goto LABEL_7;
  }
  uint64_t v4 = 16 * a2;
  if (&a3[16 * a2] > __src && &__src[v4] > a3)
  {
    _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize overlapping range", 49, 2, "Swift/UnsafePointer.swift", 25, 2, 1092, 1);
LABEL_7:
    BUG();
  }
  return memcpy(a3, __src, v4);
}

{
  if (a2 < 0)
  {
    _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize with negative count", 51, 2, "Swift/UnsafePointer.swift", 25, 2, 1090, 1);
    goto LABEL_7;
  }
  if (&a3[4 * a2] > __src && &__src[4 * a2] > a3)
  {
    _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize overlapping range", 49, 2, "Swift/UnsafePointer.swift", 25, 2, 1092, 1);
LABEL_7:
    BUG();
  }
  return memcpy(a3, __src, 4 * a2);
}

{
  if (a2 < 0)
  {
    _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize with negative count", 51, 2, "Swift/UnsafePointer.swift", 25, 2, 1090, 1);
    goto LABEL_7;
  }
  if (&a3[8 * a2] > __src && &__src[8 * a2] > a3)
  {
    _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize overlapping range", 49, 2, "Swift/UnsafePointer.swift", 25, 2, 1092, 1);
LABEL_7:
    BUG();
  }
  return memcpy(a3, __src, 8 * a2);
}

uint64_t specialized UnsafeMutablePointer.initialize(from:count:)(unint64_t a1, uint64_t a2, unint64_t a3)
{
  if (a2 < 0)
  {
    _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize with negative count", 51, 2, "Swift/UnsafePointer.swift", 25, 2, 1090, 1);
    goto LABEL_7;
  }
  if (a3 + 16 * a2 > a1 && a1 + 16 * a2 > a3)
  {
    _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize overlapping range", 49, 2, "Swift/UnsafePointer.swift", 25, 2, 1092, 1);
LABEL_7:
    BUG();
  }
  return swift_arrayInitWithCopy(a3, a1, a2, &type metadata for String);
}

{
  return specialized UnsafeMutablePointer.initialize(from:count:)(a1, a2, a3, &demangling cache variable for type metadata for [(MLDataValue, MLDataValue)]?);
}

{
  return specialized UnsafeMutablePointer.initialize(from:count:)(a1, a2, a3, &demangling cache variable for type metadata for [(key: MLDataValue, value: MLDataValue)]?);
}

{
  return specialized UnsafeMutablePointer.initialize(from:count:)(a1, a2, a3, &demangling cache variable for type metadata for [MLDataValue]?);
}

{
  uint64_t v4;

  if (a2 < 0)
  {
    _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize with negative count", 51, 2, "Swift/UnsafePointer.swift", 25, 2, 1090, 1);
    goto LABEL_7;
  }
  if (a3 + 16 * a2 > a1 && a1 + 16 * a2 > a3)
  {
    _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize overlapping range", 49, 2, "Swift/UnsafePointer.swift", 25, 2, 1092, 1);
LABEL_7:
    BUG();
  }
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for String?);
  return swift_arrayInitWithCopy(a3, a1, a2, v4);
}

{
  return specialized UnsafeMutablePointer.initialize(from:count:)(a1, a2, a3, &demangling cache variable for type metadata for (String, Double));
}

{
  return specialized UnsafeMutablePointer.initialize(from:count:)(a1, a2, a3, &demangling cache variable for type metadata for Column<[Float]>);
}

{
  return specialized UnsafeMutablePointer.initialize(from:count:)(a1, a2, a3, &demangling cache variable for type metadata for [Float]);
}

{
  return specialized UnsafeMutablePointer.initialize(from:count:)(a1, a2, a3, &demangling cache variable for type metadata for Column<[Double]>);
}

{
  return specialized UnsafeMutablePointer.initialize(from:count:)(a1, a2, a3, &demangling cache variable for type metadata for [Double]);
}

{
  return specialized UnsafeMutablePointer.initialize(from:count:)(a1, a2, a3, (uint64_t)&type metadata for MLDataValue);
}

{
  return specialized UnsafeMutablePointer.initialize(from:count:)(a1, a2, a3, &demangling cache variable for type metadata for (MLDataValue, MLDataValue));
}

{
  uint64_t v4;

  if (a2 < 0)
  {
    _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize with negative count", 51, 2, "Swift/UnsafePointer.swift", 25, 2, 1090, 1);
    goto LABEL_7;
  }
  if (a3 + 56 * a2 > a1 && a1 + 56 * a2 > a3)
  {
    _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize overlapping range", 49, 2, "Swift/UnsafePointer.swift", 25, 2, 1092, 1);
LABEL_7:
    BUG();
  }
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for RecommendationMetrics<MLRecommender.Identifier>);
  return swift_arrayInitWithCopy(a3, a1, a2, v4);
}

{
  return specialized UnsafeMutablePointer.initialize(from:count:)(a1, a2, a3, (uint64_t (*)(void))&type metadata accessor for URL);
}

{
  return specialized UnsafeMutablePointer.initialize(from:count:)(a1, a2, a3, &demangling cache variable for type metadata for (String, CSVType));
}

{
  return specialized UnsafeMutablePointer.initialize(from:count:)(a1, a2, a3, &demangling cache variable for type metadata for (String, JSONType));
}

{
  uint64_t v4;

  if (a2 < 0)
  {
    _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize with negative count", 51, 2, "Swift/UnsafePointer.swift", 25, 2, 1090, 1);
    goto LABEL_7;
  }
  if (a3 + 32 * a2 > a1 && a1 + 32 * a2 > a3)
  {
    _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize overlapping range", 49, 2, "Swift/UnsafePointer.swift", 25, 2, 1092, 1);
LABEL_7:
    BUG();
  }
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (MLDataValue, Int));
  return swift_arrayInitWithCopy(a3, a1, a2, v4);
}

{
  return specialized UnsafeMutablePointer.initialize(from:count:)(a1, a2, a3, &demangling cache variable for type metadata for DataFrame.Slice?);
}

{
  return specialized UnsafeMutablePointer.initialize(from:count:)(a1, a2, a3, type metadata accessor for WeightedDataSample);
}

{
  return specialized UnsafeMutablePointer.initialize(from:count:)(a1, a2, a3, (uint64_t (*)(void))&type metadata accessor for Tensor);
}

{
  return specialized UnsafeMutablePointer.initialize(from:count:)(a1, a2, a3, (uint64_t (*)(void))&type metadata accessor for MLProgram.Value);
}

{
  return specialized UnsafeMutablePointer.initialize(from:count:)(a1, a2, a3, (uint64_t (*)(void))&type metadata accessor for FeatureDescription);
}

{
  return specialized UnsafeMutablePointer.initialize(from:count:)(a1, a2, a3, (uint64_t (*)(void))&type metadata accessor for NeuralNetwork.Layer);
}

{
  return specialized UnsafeMutablePointer.initialize(from:count:)(a1, a2, a3, &demangling cache variable for type metadata for Numeric);
}

{
  return specialized UnsafeMutablePointer.initialize(from:count:)(a1, a2, a3, &demangling cache variable for type metadata for AnnotatedFeature<URL, String>);
}

{
  if (a2 < 0)
  {
    _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize with negative count", 51, 2, "Swift/UnsafePointer.swift", 25, 2, 1090, 1);
    goto LABEL_7;
  }
  if (a3 + 8 * a2 > a1 && a1 + 8 * a2 > a3)
  {
    _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize overlapping range", 49, 2, "Swift/UnsafePointer.swift", 25, 2, 1092, 1);
LABEL_7:
    BUG();
  }
  return swift_arrayInitWithCopy(a3, a1, a2, &type metadata for MLDataValue.MultiArrayType);
}

{
  return specialized UnsafeMutablePointer.initialize(from:count:)(a1, a2, a3, &demangling cache variable for type metadata for (label: Int, keypoints: MLMultiArray));
}

{
  uint64_t v4;

  if (a2 < 0)
  {
    _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize with negative count", 51, 2, "Swift/UnsafePointer.swift", 25, 2, 1090, 1);
    goto LABEL_7;
  }
  if (a3 + 8 * a2 > a1 && a1 + 8 * a2 > a3)
  {
    _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize overlapping range", 49, 2, "Swift/UnsafePointer.swift", 25, 2, 1092, 1);
LABEL_7:
    BUG();
  }
  uint64_t v4 = type metadata accessor for OS_os_log(0, &lazy cache variable for type metadata for MLMultiArray, MLMultiArray_ptr);
  return swift_arrayInitWithCopy(a3, a1, a2, v4);
}

{
  return specialized UnsafeMutablePointer.initialize(from:count:)(a1, a2, a3, &demangling cache variable for type metadata for (label: String, confidence: Double));
}

{
  return specialized UnsafeMutablePointer.initialize(from:count:)(a1, a2, a3, &demangling cache variable for type metadata for [(label: String, confidence: Double)]);
}

{
  uint64_t v4;

  if (a2 < 0)
  {
    _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize with negative count", 51, 2, "Swift/UnsafePointer.swift", 25, 2, 1090, 1);
    goto LABEL_7;
  }
  if (a3 + 16 * a2 > a1 && a1 + 16 * a2 > a3)
  {
    _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize overlapping range", 49, 2, "Swift/UnsafePointer.swift", 25, 2, 1092, 1);
LABEL_7:
    BUG();
  }
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (tokens: [String], labels: [String]));
  return swift_arrayInitWithCopy(a3, a1, a2, v4);
}

{
  return specialized UnsafeMutablePointer.initialize(from:count:)(a1, a2, a3, &demangling cache variable for type metadata for [String]);
}

{
  return specialized UnsafeMutablePointer.initialize(from:count:)(a1, a2, a3, type metadata accessor for MLLinearRegressor);
}

{
  if (a2 < 0)
  {
    _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize with negative count", 51, 2, "Swift/UnsafePointer.swift", 25, 2, 1090, 1);
    goto LABEL_7;
  }
  if (a3 + 32 * a2 > a1 && a1 + 32 * a2 > a3)
  {
    _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize overlapping range", 49, 2, "Swift/UnsafePointer.swift", 25, 2, 1092, 1);
LABEL_7:
    BUG();
  }
  return swift_arrayInitWithCopy(a3, a1, a2, &type metadata for ColumnDescriptor);
}

{
  return specialized UnsafeMutablePointer.initialize(from:count:)(a1, a2, a3, &demangling cache variable for type metadata for ClassificationDistribution<String>);
}

{
  return specialized UnsafeMutablePointer.initialize(from:count:)(a1, a2, a3, &demangling cache variable for type metadata for ClassificationDistribution<Int>);
}

{
  return specialized UnsafeMutablePointer.initialize(from:count:)(a1, a2, a3, &demangling cache variable for type metadata for AnnotatedFeature<MLShapedArray<Double>, Int>);
}

{
  return specialized UnsafeMutablePointer.initialize(from:count:)(a1, a2, a3, &demangling cache variable for type metadata for AnnotatedFeature<MLShapedArray<Double>, String>);
}

{
  return specialized UnsafeMutablePointer.initialize(from:count:)(a1, a2, a3, type metadata accessor for MLLogisticRegressionClassifier);
}

{
  return specialized UnsafeMutablePointer.initialize(from:count:)(a1, a2, a3, (uint64_t (*)(void))&type metadata accessor for AnyColumn);
}

{
  return specialized UnsafeMutablePointer.initialize(from:count:)(a1, a2, a3, &demangling cache variable for type metadata for Column<[Any?]>);
}

{
  return specialized UnsafeMutablePointer.initialize(from:count:)(a1, a2, a3, &demangling cache variable for type metadata for Column<String>);
}

{
  return specialized UnsafeMutablePointer.initialize(from:count:)(a1, a2, a3, &demangling cache variable for type metadata for [MLObjectDetector.DecodableAnnotation]?);
}

{
  if (a2 < 0)
  {
    _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize with negative count", 51, 2, "Swift/UnsafePointer.swift", 25, 2, 1090, 1);
    goto LABEL_7;
  }
  if (a3 + 32 * a2 > a1 && a1 + 32 * a2 > a3)
  {
    _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize overlapping range", 49, 2, "Swift/UnsafePointer.swift", 25, 2, 1092, 1);
LABEL_7:
    BUG();
  }
  return swift_arrayInitWithCopy(a3, a1, a2, &type metadata for MLObjectDetector.NormalizedAnnotation);
}

{
  if (a2 < 0)
  {
    _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize with negative count", 51, 2, "Swift/UnsafePointer.swift", 25, 2, 1090, 1);
    goto LABEL_7;
  }
  if (a3 + 56 * a2 > a1 && a1 + 56 * a2 > a3)
  {
    _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize overlapping range", 49, 2, "Swift/UnsafePointer.swift", 25, 2, 1092, 1);
LABEL_7:
    BUG();
  }
  return swift_arrayInitWithCopy(a3, a1, a2, &type metadata for MLObjectDetector.ObjectAnnotation);
}

{
  return specialized UnsafeMutablePointer.initialize(from:count:)(a1, a2, a3, &demangling cache variable for type metadata for [MLObjectDetector.ObjectAnnotation]);
}

{
  return specialized UnsafeMutablePointer.initialize(from:count:)(a1, a2, a3, &demangling cache variable for type metadata for [String : Any]);
}

{
  return specialized UnsafeMutablePointer.initialize(from:count:)(a1, a2, a3, &demangling cache variable for type metadata for AnnotatedFeature<MLShapedArray<Float>, String>);
}

{
  if (a2 < 0)
  {
    _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize with negative count", 51, 2, "Swift/UnsafePointer.swift", 25, 2, 1090, 1);
    goto LABEL_7;
  }
  if (a3 + 24 * a2 > a1 && a1 + 24 * a2 > a3)
  {
    _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize overlapping range", 49, 2, "Swift/UnsafePointer.swift", 25, 2, 1092, 1);
LABEL_7:
    BUG();
  }
  return swift_arrayInitWithCopy(a3, a1, a2, &type metadata for Metadata);
}

{
  uint64_t v4;

  if (a2 < 0)
  {
    _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize with negative count", 51, 2, "Swift/UnsafePointer.swift", 25, 2, 1090, 1);
    goto LABEL_7;
  }
  if (a3 + 8 * a2 > a1 && a1 + 8 * a2 > a3)
  {
    _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize overlapping range", 49, 2, "Swift/UnsafePointer.swift", 25, 2, 1092, 1);
LABEL_7:
    BUG();
  }
  uint64_t v4 = type metadata accessor for NLLanguage(0);
  return swift_arrayInitWithCopy(a3, a1, a2, v4);
}

{
  return specialized UnsafeMutablePointer.initialize(from:count:)(a1, a2, a3, &demangling cache variable for type metadata for (label: Int, embedding: MLMultiArray));
}

{
  return specialized UnsafeMutablePointer.initialize(from:count:)(a1, a2, a3, (uint64_t (*)(void))&type metadata accessor for ItemSimilarityRecommenderConfiguration.SimilarItems);
}

{
  return specialized UnsafeMutablePointer.initialize(from:count:)(a1, a2, a3, (uint64_t (*)(void))&type metadata accessor for ItemSimilarityRecommenderConfiguration.ItemScore);
}

{
  return specialized UnsafeMutablePointer.initialize(from:count:)(a1, a2, a3, (uint64_t)&type metadata for MLRecommender.Identifier);
}

{
  uint64_t v4;

  if (a2 < 0)
  {
    _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize with negative count", 51, 2, "Swift/UnsafePointer.swift", 25, 2, 1090, 1);
    goto LABEL_7;
  }
  if (a3 + (a2 << 6) > a1 && a1 + (a2 << 6) > a3)
  {
    _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize overlapping range", 49, 2, "Swift/UnsafePointer.swift", 25, 2, 1092, 1);
LABEL_7:
    BUG();
  }
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Recommendation<MLRecommender.Identifier, MLRecommender.Identifier>);
  return swift_arrayInitWithCopy(a3, a1, a2, v4);
}

{
  return specialized UnsafeMutablePointer.initialize(from:count:)(a1, a2, a3, &demangling cache variable for type metadata for (user: MLRecommender.Identifier, item: MLRecommender.Identifier));
}

{
  return specialized UnsafeMutablePointer.initialize(from:count:)(a1, a2, a3, &demangling cache variable for type metadata for MLIdentifier);
}

{
  uint64_t v4;

  if (a2 < 0)
  {
    _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize with negative count", 51, 2, "Swift/UnsafePointer.swift", 25, 2, 1090, 1);
    goto LABEL_7;
  }
  if (a3 + 32 * a2 > a1 && a1 + 32 * a2 > a3)
  {
    _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize overlapping range", 49, 2, "Swift/UnsafePointer.swift", 25, 2, 1092, 1);
LABEL_7:
    BUG();
  }
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (item: MLRecommender.Identifier, score: Double));
  return swift_arrayInitWithCopy(a3, a1, a2, v4);
}

{
  return specialized UnsafeMutablePointer.initialize(from:count:)(a1, a2, a3, &demangling cache variable for type metadata for (text: String, distance: Double));
}

{
  return specialized UnsafeMutablePointer.initialize(from:count:)(a1, a2, a3, &demangling cache variable for type metadata for (predicted: String, label: String));
}

{
  return specialized UnsafeMutablePointer.initialize(from:count:)(a1, a2, a3, &demangling cache variable for type metadata for [MLActionClassifier.Prediction]);
}

{
  return specialized UnsafeMutablePointer.initialize(from:count:)(a1, a2, a3, &demangling cache variable for type metadata for [MLHandActionClassifier.Prediction]);
}

{
  return specialized UnsafeMutablePointer.initialize(from:count:)(a1, a2, a3, &demangling cache variable for type metadata for (text: String, label: String));
}

{
  uint64_t v4;

  if (a2 < 0)
  {
    _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize with negative count", 51, 2, "Swift/UnsafePointer.swift", 25, 2, 1090, 1);
    goto LABEL_7;
  }
  if (a3 + 32 * a2 > a1 && a1 + 32 * a2 > a3)
  {
    _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize overlapping range", 49, 2, "Swift/UnsafePointer.swift", 25, 2, 1092, 1);
LABEL_7:
    BUG();
  }
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Any?);
  return swift_arrayInitWithCopy(a3, a1, a2, v4);
}

{
  return specialized UnsafeMutablePointer.initialize(from:count:)(a1, a2, a3, &demangling cache variable for type metadata for [String : Double]);
}

{
  if (a2 < 0)
  {
    _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize with negative count", 51, 2, "Swift/UnsafePointer.swift", 25, 2, 1090, 1);
    goto LABEL_7;
  }
  if (a3 + 16 * a2 > a1 && a1 + 16 * a2 > a3)
  {
    _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize overlapping range", 49, 2, "Swift/UnsafePointer.swift", 25, 2, 1092, 1);
LABEL_7:
    BUG();
  }
  return swift_arrayInitWithCopy(a3, a1, a2, &type metadata for MLUntypedColumn);
}

uint64_t outlined init with take of MLWordTaggerMetrics(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = type metadata accessor for MLWordTaggerMetrics(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v2 - 8) + 32))(a2, a1, v2);
  return a2;
}

id sub_748A7()
{
  uint64_t v1 = v0;
  id result = MLWordTagger.model.getter();
  *uint64_t v1 = result;
  return result;
}

void sub_748C1(id *a1)
{
}

char *initializeBufferWithCopyOfBuffer for MLWordTagger(char *a1, char **a2, uint64_t a3)
{
  int v4 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  uint64_t v5 = *a2;
  *(void *)a1 = *a2;
  if ((v4 & 0x20000) == 0)
  {
    uint64_t v7 = a2[1];
    *((void *)a1 + 1) = v7;
    uint64_t v50 = a2[2];
    *((void *)a1 + 2) = v50;
    *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 3);
    a1[40] = *((unsigned char *)a2 + 40);
    uint64_t v8 = a2[6];
    *((void *)a1 + 6) = v8;
    uint64_t v55 = a1 + 56;
    char v52 = (long long *)(a2 + 7);
    uint64_t v9 = a2[10];
    v5;
    swift_bridgeObjectRetain((_BYTE)v7);
    v50;
    v8;
    if (v9)
    {
      *((void *)a1 + 10) = v9;
      (**((void (***)(_OWORD *, long long *, char *))v9 - 1))(v55, v52, v9);
    }
    else
    {
      long long v10 = *v52;
      *(_OWORD *)(a1 + 72) = *(_OWORD *)(a2 + 9);
      _OWORD *v55 = v10;
    }
    *((void *)a1 + 11) = a2[11];
    uint64_t v56 = a2[12];
    *((void *)a1 + 12) = v56;
    *((void *)a1 + 13) = a2[13];
    unint64_t v11 = a2[14];
    *((void *)a1 + 14) = v11;
    *((void *)a1 + 15) = a2[15];
    a1[128] = *((unsigned char *)a2 + 128);
    uint64_t v12 = *(int *)(a3 + 32);
    uint64_t v53 = &a1[v12];
    uint64_t v13 = type metadata accessor for MLClassifierMetrics.Contents(0);
    swift_bridgeObjectRetain((_BYTE)v56);
    swift_bridgeObjectRetain((_BYTE)v11);
    uint64_t v51 = (char *)a2 + v12;
    uint64_t v57 = v13;
    unsigned int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload((char *)a2 + v12, v13);
    if (EnumCaseMultiPayload == 2)
    {
      uint64_t v18 = *(void *)v51;
      swift_errorRetain(*(void *)v51);
      Swift::String v15 = v53;
      *(void *)uint64_t v53 = v18;
    }
    else
    {
      unsigned int v49 = EnumCaseMultiPayload;
      if (EnumCaseMultiPayload == 1)
      {
        Swift::String v15 = &a1[v12];
        *(void *)uint64_t v53 = *(void *)v51;
        uint64_t v42 = type metadata accessor for MLClassifierMetrics.Precomputed(0);
        uint64_t v16 = *(int *)(v42 + 20);
        uint64_t v43 = &v53[v16];
        uint64_t v44 = type metadata accessor for DataFrame(0);
        Swift::String v47 = *(void (**)(char *, char *, uint64_t))(*(void *)(v44 - 8) + 16);
        char v17 = &v51[v16];
        unsigned int EnumCaseMultiPayload = 1;
        v47(v43, v17, v44);
        v47(&v53[*(int *)(v42 + 24)], &v51[*(int *)(v42 + 24)], v44);
      }
      else
      {
        Swift::String v15 = &a1[v12];
        uint64_t v48 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Either<ClassificationMetrics<String>, ClassificationMetrics<Int>>);
        int v19 = swift_getEnumCaseMultiPayload(v51, v48);
        BOOL v20 = v19 == 1;
        Swift::String v21 = &demangling cache variable for type metadata for ClassificationMetrics<String>;
        if (v19 == 1) {
          Swift::String v21 = &demangling cache variable for type metadata for ClassificationMetrics<Int>;
        }
        uint64_t v22 = __swift_instantiateConcreteTypeFromMangledName(v21);
        (*(void (**)(char *, char *, uint64_t))(*(void *)(v22 - 8) + 16))(v53, v51, v22);
        swift_storeEnumTagMultiPayload(v53, v48, v20);
        unsigned int EnumCaseMultiPayload = v49;
      }
    }
    swift_storeEnumTagMultiPayload(v15, v57, EnumCaseMultiPayload);
    uint64_t v23 = *(int *)(a3 + 36);
    uint64_t v24 = &a1[v23];
    char v25 = (uint64_t *)((char *)a2 + v23);
    int v26 = swift_getEnumCaseMultiPayload(v25, v57);
    if (v26 == 2)
    {
      uint64_t v31 = *v25;
      swift_errorRetain(v31);
      *(void *)uint64_t v24 = v31;
      uint64_t v41 = 2;
    }
    else
    {
      if (v26 != 1)
      {
        uint64_t v35 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Either<ClassificationMetrics<String>, ClassificationMetrics<Int>>);
        int v36 = swift_getEnumCaseMultiPayload(v25, v35);
        BOOL v37 = v36 == 1;
        uint64_t v38 = &demangling cache variable for type metadata for ClassificationMetrics<String>;
        if (v36 == 1) {
          uint64_t v38 = &demangling cache variable for type metadata for ClassificationMetrics<Int>;
        }
        uint64_t v39 = __swift_instantiateConcreteTypeFromMangledName(v38);
        (*(void (**)(char *, uint64_t *, uint64_t))(*(void *)(v39 - 8) + 16))(v24, v25, v39);
        swift_storeEnumTagMultiPayload(v24, v35, v37);
        unint64_t v33 = v24;
        uint64_t v34 = v57;
        uint64_t v32 = 0;
        goto LABEL_21;
      }
      *(void *)uint64_t v24 = *v25;
      uint64_t v46 = type metadata accessor for MLClassifierMetrics.Precomputed(0);
      uint64_t v27 = *(int *)(v46 + 20);
      uint64_t v54 = &v24[v27];
      uint64_t v28 = type metadata accessor for DataFrame(0);
      uint64_t v29 = (char *)v25 + v27;
      uint64_t v30 = *(void (**)(char *, char *, uint64_t))(*(void *)(v28 - 8) + 16);
      v30(v54, v29, v28);
      v30(&v24[*(int *)(v46 + 24)], (char *)v25 + *(int *)(v46 + 24), v28);
      uint64_t v41 = 1;
    }
    uint64_t v32 = v41;
    unint64_t v33 = v24;
    uint64_t v34 = v57;
LABEL_21:
    swift_storeEnumTagMultiPayload(v33, v34, v32);
    return a1;
  }
  a1 = &v5[(v4 + 16) & ~v4];
  swift_retain();
  return a1;
}

uint64_t destroy for MLWordTagger(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = a2;

  swift_bridgeObjectRelease(*(void *)(a1 + 8));
  if (*(void *)(a1 + 80)) {
    __swift_destroy_boxed_opaque_existential_1Tm((void *)(a1 + 56));
  }
  swift_bridgeObjectRelease(*(void *)(a1 + 96));
  swift_bridgeObjectRelease(*(void *)(a1 + 112));
  int v4 = (char *)(a1 + *(int *)(a2 + 32));
  uint64_t v5 = type metadata accessor for MLClassifierMetrics.Contents(0);
  int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload(v4, v5);
  switch(EnumCaseMultiPayload)
  {
    case 2:
      swift_errorRelease(*(void *)v4);
      break;
    case 1:
      uint64_t v25 = type metadata accessor for MLClassifierMetrics.Precomputed(0);
      uint64_t v9 = &v4[*(int *)(v25 + 20)];
      uint64_t v10 = type metadata accessor for DataFrame(0);
      unint64_t v11 = v9;
      uint64_t v12 = *(void (**)(char *, uint64_t))(*(void *)(v10 - 8) + 8);
      v12(v11, v10);
      uint64_t v13 = v10;
      uint64_t v2 = a2;
      v12(&v4[*(int *)(v25 + 24)], v13);
      break;
    case 0:
      uint64_t v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Either<ClassificationMetrics<String>, ClassificationMetrics<Int>>);
      if (swift_getEnumCaseMultiPayload(v4, v7) == 1) {
        uint64_t v8 = &demangling cache variable for type metadata for ClassificationMetrics<Int>;
      }
      else {
        uint64_t v8 = &demangling cache variable for type metadata for ClassificationMetrics<String>;
      }
      uint64_t v14 = __swift_instantiateConcreteTypeFromMangledName(v8);
      (*(void (**)(char *, uint64_t))(*(void *)(v14 - 8) + 8))(v4, v14);
      break;
  }
  Swift::String v15 = (void *)(*(int *)(v2 + 36) + a1);
  uint64_t result = swift_getEnumCaseMultiPayload(v15, v5);
  switch(result)
  {
    case 2:
      return swift_errorRelease(*v15);
    case 1:
      uint64_t v19 = type metadata accessor for MLClassifierMetrics.Precomputed(0);
      BOOL v20 = (char *)v15 + *(int *)(v19 + 20);
      uint64_t v21 = type metadata accessor for DataFrame(0);
      uint64_t v22 = *(void (**)(char *, uint64_t))(*(void *)(v21 - 8) + 8);
      v22(v20, v21);
      return ((uint64_t (*)(char *, uint64_t))v22)((char *)v15 + *(int *)(v19 + 24), v21);
    case 0:
      uint64_t v17 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Either<ClassificationMetrics<String>, ClassificationMetrics<Int>>);
      if (swift_getEnumCaseMultiPayload(v15, v17) == 1) {
        uint64_t v18 = &demangling cache variable for type metadata for ClassificationMetrics<Int>;
      }
      else {
        uint64_t v18 = &demangling cache variable for type metadata for ClassificationMetrics<String>;
      }
      uint64_t v23 = __swift_instantiateConcreteTypeFromMangledName(v18);
      return (*(uint64_t (**)(void *, uint64_t))(*(void *)(v23 - 8) + 8))(v15, v23);
  }
  return result;
}

uint64_t initializeWithCopy for MLWordTagger(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = *(void **)a2;
  *(void *)a1 = *(void *)a2;
  uint64_t v6 = *(void *)(a2 + 8);
  *(void *)(a1 + 8) = v6;
  id v50 = *(id *)(a2 + 16);
  *(void *)(a1 + 16) = v50;
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  *(unsigned char *)(a1 + 40) = *(unsigned char *)(a2 + 40);
  uint64_t v7 = *(void **)(a2 + 48);
  *(void *)(a1 + 48) = v7;
  char v52 = (_OWORD *)(a1 + 56);
  uint64_t v55 = (long long *)(a2 + 56);
  uint64_t v8 = *(void *)(a2 + 80);
  v5;
  swift_bridgeObjectRetain(v6);
  v50;
  v7;
  if (v8)
  {
    *(void *)(a1 + 80) = v8;
    (**(void (***)(_OWORD *, long long *, uint64_t))(v8 - 8))(v52, v55, v8);
  }
  else
  {
    long long v9 = *v55;
    *(_OWORD *)(a1 + 72) = *(_OWORD *)(a2 + 72);
    *char v52 = v9;
  }
  *(void *)(a1 + 88) = *(void *)(a2 + 88);
  uint64_t v53 = *(void *)(a2 + 96);
  *(void *)(a1 + 96) = v53;
  *(void *)(a1 + 104) = *(void *)(a2 + 104);
  uint64_t v10 = *(void *)(a2 + 112);
  *(void *)(a1 + 112) = v10;
  *(void *)(a1 + 120) = *(void *)(a2 + 120);
  *(unsigned char *)(a1 + 128) = *(unsigned char *)(a2 + 128);
  uint64_t v11 = *(int *)(a3 + 32);
  uint64_t v56 = (void *)(a1 + v11);
  uint64_t v12 = (void *)(a2 + v11);
  uint64_t v13 = type metadata accessor for MLClassifierMetrics.Contents(0);
  swift_bridgeObjectRetain(v53);
  swift_bridgeObjectRetain(v10);
  uint64_t v54 = v13;
  unsigned int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload(v12, v13);
  uint64_t v45 = a1;
  if (EnumCaseMultiPayload == 2)
  {
    uint64_t v24 = *v12;
    swift_errorRetain(v24);
    Swift::String v15 = v56;
    *uint64_t v56 = v24;
  }
  else if (EnumCaseMultiPayload == 1)
  {
    Swift::String v15 = v56;
    *uint64_t v56 = *v12;
    uint64_t v46 = type metadata accessor for MLClassifierMetrics.Precomputed(0);
    uint64_t v16 = v12;
    uint64_t v17 = *(int *)(v46 + 20);
    uint64_t v44 = (char *)v56 + v17;
    uint64_t v18 = type metadata accessor for DataFrame(0);
    uint64_t v19 = (char *)v16 + v17;
    BOOL v20 = *(void (**)(char *, char *, uint64_t))(*(void *)(v18 - 8) + 16);
    v20(v44, v19, v18);
    uint64_t v21 = *(int *)(v46 + 24);
    uint64_t v22 = (char *)v16 + v21;
    uint64_t v23 = v18;
    unsigned int EnumCaseMultiPayload = 1;
    a1 = v45;
    v20((char *)v56 + v21, v22, v23);
  }
  else
  {
    Swift::String v15 = v56;
    id v51 = (id)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Either<ClassificationMetrics<String>, ClassificationMetrics<Int>>);
    int v25 = swift_getEnumCaseMultiPayload(v12, v51);
    Swift::String v47 = v12;
    BOOL v26 = v25 == 1;
    uint64_t v27 = &demangling cache variable for type metadata for ClassificationMetrics<String>;
    if (v25 == 1) {
      uint64_t v27 = &demangling cache variable for type metadata for ClassificationMetrics<Int>;
    }
    uint64_t v28 = __swift_instantiateConcreteTypeFromMangledName(v27);
    (*(void (**)(void *, void *, uint64_t))(*(void *)(v28 - 8) + 16))(v56, v47, v28);
    swift_storeEnumTagMultiPayload(v56, v51, v26);
  }
  swift_storeEnumTagMultiPayload(v15, v54, EnumCaseMultiPayload);
  uint64_t v29 = *(int *)(a3 + 36);
  uint64_t v30 = (char *)(v29 + a1);
  uint64_t v31 = (char *)(v29 + a2);
  unsigned int v32 = swift_getEnumCaseMultiPayload(v31, v54);
  if (v32 == 2)
  {
    uint64_t v37 = *(void *)v31;
    swift_errorRetain(*(void *)v31);
    *(void *)uint64_t v30 = v37;
  }
  else if (v32 == 1)
  {
    *(void *)uint64_t v30 = *(void *)v31;
    uint64_t v49 = type metadata accessor for MLClassifierMetrics.Precomputed(0);
    uint64_t v33 = *(int *)(v49 + 20);
    uint64_t v57 = &v30[v33];
    uint64_t v34 = type metadata accessor for DataFrame(0);
    uint64_t v35 = &v31[v33];
    int v36 = *(void (**)(char *, char *, uint64_t))(*(void *)(v34 - 8) + 16);
    v36(v57, v35, v34);
    v36(&v30[*(int *)(v49 + 24)], &v31[*(int *)(v49 + 24)], v34);
  }
  else
  {
    uint64_t v38 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Either<ClassificationMetrics<String>, ClassificationMetrics<Int>>);
    int v39 = swift_getEnumCaseMultiPayload(v31, v38);
    BOOL v40 = v39 == 1;
    uint64_t v41 = &demangling cache variable for type metadata for ClassificationMetrics<String>;
    if (v39 == 1) {
      uint64_t v41 = &demangling cache variable for type metadata for ClassificationMetrics<Int>;
    }
    uint64_t v42 = __swift_instantiateConcreteTypeFromMangledName(v41);
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v42 - 8) + 16))(v30, v31, v42);
    swift_storeEnumTagMultiPayload(v30, v38, v40);
  }
  swift_storeEnumTagMultiPayload(v30, v54, v32);
  return v45;
}

uint64_t assignWithCopy for MLWordTagger(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = *(void **)a2;
  uint64_t v6 = *(void **)a1;
  *(void *)a1 = *(void *)a2;
  v5;

  uint64_t v7 = *(void *)(a2 + 8);
  uint64_t v8 = *(void *)(a1 + 8);
  *(void *)(a1 + 8) = v7;
  swift_bridgeObjectRetain(v7);
  swift_bridgeObjectRelease(v8);
  long long v9 = *(void **)(a2 + 16);
  uint64_t v10 = *(void **)(a1 + 16);
  *(void *)(a1 + 16) = v9;
  v9;

  *(unsigned char *)(a1 + 40) = *(unsigned char *)(a2 + 40);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  uint64_t v11 = *(void **)(a1 + 48);
  uint64_t v12 = *(void **)(a2 + 48);
  *(void *)(a1 + 48) = v12;
  v12;

  uint64_t v13 = *(void *)(a2 + 80);
  if (*(void *)(a1 + 80))
  {
    if (v13)
    {
      __swift_assign_boxed_opaque_existential_0((uint64_t *)(a1 + 56), (uint64_t *)(a2 + 56));
      goto LABEL_8;
    }
    __swift_destroy_boxed_opaque_existential_1Tm((void *)(a1 + 56));
  }
  else if (v13)
  {
    *(void *)(a1 + 80) = v13;
    (**(void (***)(uint64_t, uint64_t))(v13 - 8))(a1 + 56, a2 + 56);
    goto LABEL_8;
  }
  long long v14 = *(_OWORD *)(a2 + 56);
  *(_OWORD *)(a1 + 72) = *(_OWORD *)(a2 + 72);
  *(_OWORD *)(a1 + 56) = v14;
LABEL_8:
  *(void *)(a1 + 88) = *(void *)(a2 + 88);
  uint64_t v15 = *(void *)(a2 + 96);
  uint64_t v16 = *(void *)(a1 + 96);
  *(void *)(a1 + 96) = v15;
  swift_bridgeObjectRetain(v15);
  swift_bridgeObjectRelease(v16);
  *(void *)(a1 + 104) = *(void *)(a2 + 104);
  uint64_t v17 = *(void *)(a2 + 112);
  uint64_t v18 = *(void *)(a1 + 112);
  *(void *)(a1 + 112) = v17;
  swift_bridgeObjectRetain(v17);
  swift_bridgeObjectRelease(v18);
  *(unsigned char *)(a1 + 128) = *(unsigned char *)(a2 + 128);
  *(void *)(a1 + 120) = *(void *)(a2 + 120);
  if (a1 != a2)
  {
    uint64_t v19 = *(int *)(a3 + 32);
    BOOL v20 = (char *)(a1 + v19);
    uint64_t v21 = (char *)(a2 + v19);
    outlined destroy of MLActivityClassifier.ModelParameters((uint64_t)v20, type metadata accessor for MLClassifierMetrics.Contents);
    uint64_t v47 = type metadata accessor for MLClassifierMetrics.Contents(0);
    unsigned int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload(v21, v47);
    if (EnumCaseMultiPayload == 2)
    {
      uint64_t v25 = *(void *)v21;
      swift_errorRetain(*(void *)v21);
      *(void *)BOOL v20 = v25;
      unsigned int EnumCaseMultiPayload = 2;
    }
    else if (EnumCaseMultiPayload == 1)
    {
      *(void *)BOOL v20 = *(void *)v21;
      uint64_t v48 = type metadata accessor for MLClassifierMetrics.Precomputed(0);
      uint64_t v23 = *(int *)(v48 + 20);
      uint64_t v45 = &v20[v23];
      uint64_t v46 = type metadata accessor for DataFrame(0);
      char v52 = *(void (**)(char *, char *, uint64_t))(*(void *)(v46 - 8) + 16);
      uint64_t v24 = &v21[v23];
      unsigned int EnumCaseMultiPayload = 1;
      v52(v45, v24, v46);
      v52(&v20[*(int *)(v48 + 24)], &v21[*(int *)(v48 + 24)], v46);
    }
    else
    {
      uint64_t v55 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Either<ClassificationMetrics<String>, ClassificationMetrics<Int>>);
      int v26 = swift_getEnumCaseMultiPayload(v21, v55);
      BOOL v53 = v26 == 1;
      uint64_t v27 = &demangling cache variable for type metadata for ClassificationMetrics<String>;
      if (v26 == 1) {
        uint64_t v27 = &demangling cache variable for type metadata for ClassificationMetrics<Int>;
      }
      uint64_t v28 = __swift_instantiateConcreteTypeFromMangledName(v27);
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v28 - 8) + 16))(v20, v21, v28);
      swift_storeEnumTagMultiPayload(v20, v55, v53);
    }
    uint64_t v29 = v20;
    uint64_t v30 = v47;
    swift_storeEnumTagMultiPayload(v29, v47, EnumCaseMultiPayload);
    uint64_t v31 = *(int *)(a3 + 36);
    unsigned int v32 = (char *)(a1 + v31);
    uint64_t v33 = (char *)(v31 + a2);
    outlined destroy of MLActivityClassifier.ModelParameters(a1 + v31, type metadata accessor for MLClassifierMetrics.Contents);
    unsigned int v34 = swift_getEnumCaseMultiPayload(v33, v47);
    if (v34 == 2)
    {
      uint64_t v39 = *(void *)v33;
      swift_errorRetain(v39);
      *(void *)unsigned int v32 = v39;
    }
    else
    {
      unsigned int v51 = v34;
      if (v34 == 1)
      {
        *(void *)unsigned int v32 = *(void *)v33;
        uint64_t v54 = type metadata accessor for MLClassifierMetrics.Precomputed(0);
        uint64_t v35 = *(int *)(v54 + 20);
        uint64_t v49 = &v32[v35];
        uint64_t v36 = type metadata accessor for DataFrame(0);
        uint64_t v56 = *(void (**)(char *, char *, uint64_t))(*(void *)(v36 - 8) + 16);
        uint64_t v37 = &v33[v35];
        unsigned int v34 = 1;
        v56(v49, v37, v36);
        uint64_t v38 = v36;
        uint64_t v30 = v47;
        v56(&v32[*(int *)(v54 + 24)], &v33[*(int *)(v54 + 24)], v38);
      }
      else
      {
        uint64_t v57 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Either<ClassificationMetrics<String>, ClassificationMetrics<Int>>);
        int v40 = swift_getEnumCaseMultiPayload(v33, v57);
        BOOL v41 = v40 == 1;
        uint64_t v42 = &demangling cache variable for type metadata for ClassificationMetrics<String>;
        if (v40 == 1) {
          uint64_t v42 = &demangling cache variable for type metadata for ClassificationMetrics<Int>;
        }
        uint64_t v43 = __swift_instantiateConcreteTypeFromMangledName(v42);
        (*(void (**)(char *, char *, uint64_t))(*(void *)(v43 - 8) + 16))(v32, v33, v43);
        swift_storeEnumTagMultiPayload(v32, v57, v41);
        unsigned int v34 = v51;
      }
    }
    swift_storeEnumTagMultiPayload(v32, v30, v34);
  }
  return a1;
}

void *initializeWithTake for MLWordTagger(void *a1, void *a2, uint64_t a3)
{
  uint64_t v3 = a3;
  *a1 = *a2;
  a1[1] = a2[1];
  a1[2] = a2[2];
  qmemcpy(a1 + 3, a2 + 3, 0x69uLL);
  uint64_t v6 = *(int *)(a3 + 32);
  __dst = (char *)a1 + v6;
  uint64_t v7 = (char *)a2 + v6;
  uint64_t v8 = type metadata accessor for MLClassifierMetrics.Contents(0);
  int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload(v7, v8);
  uint64_t v40 = v8;
  if (EnumCaseMultiPayload == 1)
  {
    *(void *)__dst = *(void *)v7;
    uint64_t v42 = type metadata accessor for MLClassifierMetrics.Precomputed(0);
    uint64_t v45 = v3;
    uint64_t v18 = *(int *)(v42 + 20);
    uint64_t v39 = &__dst[v18];
    uint64_t v19 = type metadata accessor for DataFrame(0);
    uint64_t v43 = *(void (**)(char *, char *, uint64_t))(*(void *)(v19 - 8) + 32);
    BOOL v20 = &v7[v18];
    uint64_t v3 = v45;
    v43(v39, v20, v19);
    uint64_t v21 = v19;
    uint64_t v8 = v40;
    v43(&__dst[*(int *)(v42 + 24)], &v7[*(int *)(v42 + 24)], v21);
    uint64_t v17 = 1;
    uint64_t v15 = __dst;
    uint64_t v16 = v40;
LABEL_7:
    swift_storeEnumTagMultiPayload(v15, v16, v17);
    goto LABEL_9;
  }
  if (!EnumCaseMultiPayload)
  {
    uint64_t v41 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Either<ClassificationMetrics<String>, ClassificationMetrics<Int>>);
    int v10 = swift_getEnumCaseMultiPayload(v7, v41);
    uint64_t v44 = v3;
    BOOL v11 = v10 == 1;
    uint64_t v12 = &demangling cache variable for type metadata for ClassificationMetrics<String>;
    if (v10 == 1) {
      uint64_t v12 = &demangling cache variable for type metadata for ClassificationMetrics<Int>;
    }
    uint64_t v13 = __swift_instantiateConcreteTypeFromMangledName(v12);
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v13 - 8) + 32))(__dst, v7, v13);
    BOOL v14 = v11;
    uint64_t v3 = v44;
    swift_storeEnumTagMultiPayload(__dst, v41, v14);
    uint64_t v15 = __dst;
    uint64_t v16 = v8;
    uint64_t v17 = 0;
    goto LABEL_7;
  }
  memcpy(__dst, v7, *(void *)(*(void *)(v8 - 8) + 64));
LABEL_9:
  uint64_t v22 = *(int *)(v3 + 36);
  uint64_t v23 = (char *)a1 + v22;
  uint64_t v24 = (char *)a2 + v22;
  int v25 = swift_getEnumCaseMultiPayload(v24, v8);
  if (v25 == 1)
  {
    *(void *)uint64_t v23 = *(void *)v24;
    __dsta = (int *)type metadata accessor for MLClassifierMetrics.Precomputed(0);
    uint64_t v34 = __dsta[5];
    uint64_t v46 = &v23[v34];
    uint64_t v35 = type metadata accessor for DataFrame(0);
    uint64_t v36 = &v24[v34];
    uint64_t v37 = *(void (**)(char *, char *, uint64_t))(*(void *)(v35 - 8) + 32);
    v37(v46, v36, v35);
    v37(&v23[__dsta[6]], &v24[__dsta[6]], v35);
    uint64_t v33 = 1;
    uint64_t v31 = v23;
    uint64_t v32 = v40;
  }
  else
  {
    if (v25)
    {
      memcpy(v23, v24, *(void *)(*(void *)(v8 - 8) + 64));
      return a1;
    }
    uint64_t v26 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Either<ClassificationMetrics<String>, ClassificationMetrics<Int>>);
    int v27 = swift_getEnumCaseMultiPayload(v24, v26);
    BOOL v28 = v27 == 1;
    uint64_t v29 = &demangling cache variable for type metadata for ClassificationMetrics<String>;
    if (v27 == 1) {
      uint64_t v29 = &demangling cache variable for type metadata for ClassificationMetrics<Int>;
    }
    uint64_t v30 = __swift_instantiateConcreteTypeFromMangledName(v29);
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v30 - 8) + 32))(v23, v24, v30);
    swift_storeEnumTagMultiPayload(v23, v26, v28);
    uint64_t v31 = v23;
    uint64_t v32 = v40;
    uint64_t v33 = 0;
  }
  swift_storeEnumTagMultiPayload(v31, v32, v33);
  return a1;
}

uint64_t assignWithTake for MLWordTagger(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = *(void **)a1;
  *(void *)a1 = *(void *)a2;

  uint64_t v7 = *(void *)(a1 + 8);
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  swift_bridgeObjectRelease(v7);
  uint64_t v8 = *(void **)(a1 + 16);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);

  *(unsigned char *)(a1 + 40) = *(unsigned char *)(a2 + 40);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  long long v9 = *(void **)(a1 + 48);
  *(void *)(a1 + 48) = *(void *)(a2 + 48);

  if (*(void *)(a1 + 80)) {
    __swift_destroy_boxed_opaque_existential_1Tm((void *)(a1 + 56));
  }
  long long v10 = *(_OWORD *)(a2 + 56);
  *(_OWORD *)(a1 + 72) = *(_OWORD *)(a2 + 72);
  *(_OWORD *)(a1 + 56) = v10;
  *(void *)(a1 + 88) = *(void *)(a2 + 88);
  uint64_t v11 = *(void *)(a1 + 96);
  *(void *)(a1 + 96) = *(void *)(a2 + 96);
  swift_bridgeObjectRelease(v11);
  *(void *)(a1 + 104) = *(void *)(a2 + 104);
  uint64_t v12 = *(void *)(a1 + 112);
  *(void *)(a1 + 112) = *(void *)(a2 + 112);
  swift_bridgeObjectRelease(v12);
  *(unsigned char *)(a1 + 128) = *(unsigned char *)(a2 + 128);
  *(void *)(a1 + 120) = *(void *)(a2 + 120);
  if (a1 == a2) {
    return a1;
  }
  uint64_t v48 = a3;
  uint64_t v13 = *(int *)(a3 + 32);
  BOOL v14 = (char *)(a1 + v13);
  uint64_t v15 = (char *)(a2 + v13);
  outlined destroy of MLActivityClassifier.ModelParameters((uint64_t)v14, type metadata accessor for MLClassifierMetrics.Contents);
  uint64_t v16 = type metadata accessor for MLClassifierMetrics.Contents(0);
  int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload(v15, v16);
  uint64_t v50 = v16;
  if (EnumCaseMultiPayload == 1)
  {
    *(void *)BOOL v14 = *(void *)v15;
    uint64_t v45 = type metadata accessor for MLClassifierMetrics.Precomputed(0);
    uint64_t v26 = *(int *)(v45 + 20);
    uint64_t v46 = &v14[v26];
    uint64_t v47 = type metadata accessor for DataFrame(0);
    char v52 = *(void (**)(char *, char *, uint64_t))(*(void *)(v47 - 8) + 32);
    int v27 = &v15[v26];
    uint64_t v16 = v50;
    v52(v46, v27, v47);
    v52(&v14[*(int *)(v45 + 24)], &v15[*(int *)(v45 + 24)], v47);
    uint64_t v25 = 1;
    uint64_t v23 = v14;
    uint64_t v24 = v50;
  }
  else
  {
    if (EnumCaseMultiPayload)
    {
      memcpy(v14, v15, *(void *)(*(void *)(v16 - 8) + 64));
      goto LABEL_12;
    }
    uint64_t v51 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Either<ClassificationMetrics<String>, ClassificationMetrics<Int>>);
    int v18 = swift_getEnumCaseMultiPayload(v15, v51);
    BOOL v19 = v18 == 1;
    BOOL v20 = &demangling cache variable for type metadata for ClassificationMetrics<String>;
    if (v18 == 1) {
      BOOL v20 = &demangling cache variable for type metadata for ClassificationMetrics<Int>;
    }
    uint64_t v21 = __swift_instantiateConcreteTypeFromMangledName(v20);
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v21 - 8) + 32))(v14, v15, v21);
    BOOL v22 = v19;
    uint64_t v16 = v50;
    swift_storeEnumTagMultiPayload(v14, v51, v22);
    uint64_t v23 = v14;
    uint64_t v24 = v50;
    uint64_t v25 = 0;
  }
  swift_storeEnumTagMultiPayload(v23, v24, v25);
LABEL_12:
  uint64_t v28 = *(int *)(v48 + 36);
  uint64_t v29 = (char *)(a1 + v28);
  uint64_t v30 = (char *)(v28 + a2);
  outlined destroy of MLActivityClassifier.ModelParameters(a1 + v28, type metadata accessor for MLClassifierMetrics.Contents);
  int v31 = swift_getEnumCaseMultiPayload(v30, v16);
  if (v31 == 1)
  {
    *(void *)uint64_t v29 = *(void *)v30;
    uint64_t v49 = type metadata accessor for MLClassifierMetrics.Precomputed(0);
    uint64_t v40 = *(int *)(v49 + 20);
    BOOL v53 = &v29[v40];
    uint64_t v41 = type metadata accessor for DataFrame(0);
    uint64_t v42 = &v30[v40];
    uint64_t v43 = *(void (**)(char *, char *, uint64_t))(*(void *)(v41 - 8) + 32);
    v43(v53, v42, v41);
    v43(&v29[*(int *)(v49 + 24)], &v30[*(int *)(v49 + 24)], v41);
    uint64_t v39 = 1;
    uint64_t v37 = v29;
    uint64_t v38 = v50;
  }
  else
  {
    if (v31)
    {
      memcpy(v29, v30, *(void *)(*(void *)(v16 - 8) + 64));
      return a1;
    }
    uint64_t v32 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Either<ClassificationMetrics<String>, ClassificationMetrics<Int>>);
    int v33 = swift_getEnumCaseMultiPayload(v30, v32);
    BOOL v34 = v33 == 1;
    uint64_t v35 = &demangling cache variable for type metadata for ClassificationMetrics<String>;
    if (v33 == 1) {
      uint64_t v35 = &demangling cache variable for type metadata for ClassificationMetrics<Int>;
    }
    uint64_t v36 = __swift_instantiateConcreteTypeFromMangledName(v35);
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v36 - 8) + 32))(v29, v30, v36);
    swift_storeEnumTagMultiPayload(v29, v32, v34);
    uint64_t v37 = v29;
    uint64_t v38 = v50;
    uint64_t v39 = 0;
  }
  swift_storeEnumTagMultiPayload(v37, v38, v39);
  return a1;
}

uint64_t getEnumTagSinglePayload for MLWordTagger(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_75B3E);
}

uint64_t sub_75B3E(void *a1, unsigned int a2, uint64_t a3)
{
  if (a2 == 0x7FFFFFFF)
  {
    uint64_t result = 0;
    if ((*a1 & 0xFFFFFFFF00000001) == 0) {
      return (*a1 >> 1) + 1;
    }
  }
  else
  {
    uint64_t v5 = type metadata accessor for MLWordTaggerMetrics(0);
    return __swift_getEnumTagSinglePayload((uint64_t)a1 + *(int *)(a3 + 32), a2, v5);
  }
  return result;
}

uint64_t storeEnumTagSinglePayload for MLWordTagger(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_75BB6);
}

uint64_t sub_75BB6(void *a1, unsigned int a2, int a3, uint64_t a4)
{
  if (a3 == 0x7FFFFFFF)
  {
    *a1 = 2 * (a2 - 1);
  }
  else
  {
    uint64_t v5 = type metadata accessor for MLWordTaggerMetrics(0);
    return __swift_storeEnumTagSinglePayload((uint64_t)a1 + *(int *)(a4 + 32), a2, a2, v5);
  }
  return result;
}

uint64_t type metadata completion function for MLWordTagger(uint64_t a1)
{
  v3[0] = (char *)&value witness table for Builtin.UnknownObject + 64;
  v3[1] = (char *)&value witness table for Builtin.BridgeObject + 64;
  v3[2] = (char *)&value witness table for Builtin.UnknownObject + 64;
  v3[3] = "i";
  uint64_t result = type metadata accessor for MLClassifierMetrics.Contents(319);
  if (v2 <= 0x3F)
  {
    uint64_t v4 = *(void *)(result - 8) + 64;
    uint64_t v5 = v4;
    swift_initStructMetadata(a1, 256, 6, v3, a1 + 16);
    return 0;
  }
  return result;
}

void *specialized UnsafeMutablePointer.initialize(from:count:)(char *__src, int64_t __n, char *__dst)
{
  if (__n < 0)
  {
    _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize with negative count", 51, 2, "Swift/UnsafePointer.swift", 25, 2, 1090, 1);
    goto LABEL_7;
  }
  if (&__dst[__n] > __src && &__src[__n] > __dst)
  {
    _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize overlapping range", 49, 2, "Swift/UnsafePointer.swift", 25, 2, 1092, 1);
LABEL_7:
    BUG();
  }
  return memcpy(__dst, __src, __n);
}

{
  if (__n < 0)
  {
    _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize with negative count", 51, 2, "Swift/UnsafePointer.swift", 25, 2, 1090, 1);
    goto LABEL_7;
  }
  if (&__dst[__n] > __src && &__src[__n] > __dst)
  {
    _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize overlapping range", 49, 2, "Swift/UnsafePointer.swift", 25, 2, 1092, 1);
LABEL_7:
    BUG();
  }
  return memcpy(__dst, __src, __n);
}

{
  if (__n < 0)
  {
    _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize with negative count", 51, 2, "Swift/UnsafePointer.swift", 25, 2, 1090, 1);
    goto LABEL_7;
  }
  if (&__dst[__n] > __src && &__src[__n] > __dst)
  {
    _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize overlapping range", 49, 2, "Swift/UnsafePointer.swift", 25, 2, 1092, 1);
LABEL_7:
    BUG();
  }
  return memcpy(__dst, __src, __n);
}

uint64_t specialized UnsafeMutablePointer.initialize(from:count:)(unint64_t a1, uint64_t a2, unint64_t a3, uint64_t *a4)
{
  if (a2 < 0)
  {
    _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize with negative count", 51, 2, "Swift/UnsafePointer.swift", 25, 2, 1090, 1);
    goto LABEL_7;
  }
  if (a3 + 8 * a2 > a1 && a1 + 8 * a2 > a3)
  {
    _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize overlapping range", 49, 2, "Swift/UnsafePointer.swift", 25, 2, 1092, 1);
LABEL_7:
    BUG();
  }
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(a4);
  return swift_arrayInitWithCopy(a3, a1, a2, v5);
}

{
  uint64_t v5;
  uint64_t v6;

  if (a2 < 0)
  {
    _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize with negative count", 51, 2, "Swift/UnsafePointer.swift", 25, 2, 1090, 1);
    goto LABEL_7;
  }
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(a4);
  uint64_t v6 = a2 * *(void *)(*(void *)(v5 - 8) + 72);
  if (a3 + v6 > a1 && a1 + v6 > a3)
  {
    _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize overlapping range", 49, 2, "Swift/UnsafePointer.swift", 25, 2, 1092, 1);
LABEL_7:
    BUG();
  }
  return swift_arrayInitWithCopy(a3, a1, a2, v5);
}

{
  uint64_t v5;

  if (a2 < 0)
  {
    _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize with negative count", 51, 2, "Swift/UnsafePointer.swift", 25, 2, 1090, 1);
    goto LABEL_7;
  }
  if (16 * a2 + a3 > a1 && a1 + 16 * a2 > a3)
  {
    _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize overlapping range", 49, 2, "Swift/UnsafePointer.swift", 25, 2, 1092, 1);
LABEL_7:
    BUG();
  }
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(a4);
  return swift_arrayInitWithCopy(a3, a1, a2, v5);
}

{
  uint64_t v5;

  if (a2 < 0)
  {
    _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize with negative count", 51, 2, "Swift/UnsafePointer.swift", 25, 2, 1090, 1);
    goto LABEL_7;
  }
  if (48 * a2 + a3 > a1 && a1 + 48 * a2 > a3)
  {
    _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize overlapping range", 49, 2, "Swift/UnsafePointer.swift", 25, 2, 1092, 1);
LABEL_7:
    BUG();
  }
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(a4);
  return swift_arrayInitWithCopy(a3, a1, a2, v5);
}

{
  uint64_t v5;

  if (a2 < 0)
  {
    _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize with negative count", 51, 2, "Swift/UnsafePointer.swift", 25, 2, 1090, 1);
    goto LABEL_7;
  }
  if (40 * a2 + a3 > a1 && a1 + 40 * a2 > a3)
  {
    _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize overlapping range", 49, 2, "Swift/UnsafePointer.swift", 25, 2, 1092, 1);
LABEL_7:
    BUG();
  }
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(a4);
  return swift_arrayInitWithCopy(a3, a1, a2, v5);
}

{
  uint64_t v5;

  if (a2 < 0)
  {
    _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize with negative count", 51, 2, "Swift/UnsafePointer.swift", 25, 2, 1090, 1);
    goto LABEL_7;
  }
  if (24 * a2 + a3 > a1 && a1 + 24 * a2 > a3)
  {
    _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize overlapping range", 49, 2, "Swift/UnsafePointer.swift", 25, 2, 1092, 1);
LABEL_7:
    BUG();
  }
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(a4);
  return swift_arrayInitWithCopy(a3, a1, a2, v5);
}

{
  uint64_t v5;

  if (a2 < 0)
  {
    _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize with negative count", 51, 2, "Swift/UnsafePointer.swift", 25, 2, 1090, 1);
    goto LABEL_7;
  }
  if (32 * a2 + a3 > a1 && a1 + 32 * a2 > a3)
  {
    _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize overlapping range", 49, 2, "Swift/UnsafePointer.swift", 25, 2, 1092, 1);
LABEL_7:
    BUG();
  }
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(a4);
  return swift_arrayInitWithCopy(a3, a1, a2, v5);
}

{
  uint64_t v5;

  if (a2 < 0)
  {
    _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize with negative count", 51, 2, "Swift/UnsafePointer.swift", 25, 2, 1090, 1);
    goto LABEL_7;
  }
  if (a3 + 8 * a2 > a1 && a1 + 8 * a2 > a3)
  {
    _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize overlapping range", 49, 2, "Swift/UnsafePointer.swift", 25, 2, 1092, 1);
LABEL_7:
    BUG();
  }
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(a4);
  return swift_arrayInitWithCopy(a3, a1, a2, v5);
}

uint64_t specialized UnsafeMutablePointer.initialize(from:count:)(unint64_t a1, uint64_t a2, unint64_t a3, uint64_t (*a4)(void))
{
  if (a2 < 0)
  {
    _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize with negative count", 51, 2, "Swift/UnsafePointer.swift", 25, 2, 1090, 1);
    goto LABEL_7;
  }
  uint64_t v5 = a4(0);
  uint64_t v6 = a2 * *(void *)(*(void *)(v5 - 8) + 72);
  if (a3 + v6 > a1 && a1 + v6 > a3)
  {
    _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize overlapping range", 49, 2, "Swift/UnsafePointer.swift", 25, 2, 1092, 1);
LABEL_7:
    BUG();
  }
  return swift_arrayInitWithCopy(a3, a1, a2, v5);
}

uint64_t specialized UnsafeMutablePointer.initialize(from:count:)(unint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  if (a2 < 0)
  {
    _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize with negative count", 51, 2, "Swift/UnsafePointer.swift", 25, 2, 1090, 1);
    goto LABEL_7;
  }
  if (a3 + 24 * a2 > a1 && a1 + 24 * a2 > a3)
  {
    _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize overlapping range", 49, 2, "Swift/UnsafePointer.swift", 25, 2, 1092, 1);
LABEL_7:
    BUG();
  }
  return swift_arrayInitWithCopy(a3, a1, a2, a4);
}

uint64_t lazy protocol witness table accessor for type String? and conformance <A> A?(uint64_t *a1, uint64_t *a2)
{
  uint64_t result = *a1;
  if (!*a1)
  {
    uint64_t v3 = __swift_instantiateConcreteTypeFromMangledNameAbstract(a2);
    uint64_t result = swift_getWitnessTable(&protocol conformance descriptor for <A> A?, v3);
    *a1 = result;
  }
  return result;
}

uint64_t block_copy_helper_0(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  return swift_retain(v2);
}

uint64_t block_destroy_helper_0(uint64_t a1)
{
  return swift_release(*(void *)(a1 + 40));
}

void *partial apply for closure #1 in static MLWordTagger.createTextColumn(_:name:context:)(uint64_t *a1)
{
  return closure #1 in static MLWordTagger.createTextColumn(_:name:context:)(a1, *(void *)(v1 + 16), *(void *)(v1 + 24));
}

uint64_t block_copy_helper_2(uint64_t a1, uint64_t a2)
{
  return block_copy_helper_0(a1, a2);
}

{
  uint64_t v2;

  uint64_t v2 = *(void *)(a2 + 40);
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  return swift_retain(v2);
}

uint64_t block_destroy_helper_3(uint64_t a1)
{
  return block_destroy_helper_0(a1);
}

{
  return swift_release(*(void *)(a1 + 40));
}

void *_sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSnySiG_SSs5NeverOTg565_s8CreateML11MLDataTableV11ColumnNamesV11descriptionSSvgSSSiXEfU_0F2ML0hI0V0kL0VTf1cn_n(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = a2 - a1;
  if (__OFSUB__(a2, a1)) {
    BUG();
  }
  uint64_t v4 = v2;
  if (a2 != a1)
  {
    int64_t v5 = 0;
    if (v3 > 0) {
      int64_t v5 = v3;
    }
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v5, 0);
    if (v3 < 0) {
      BUG();
    }
    uint64_t v6 = a1;
    uint64_t v7 = a2;
    while (1)
    {
      if (v7 == v6) {
        BUG();
      }
      CMLSequence.value(at:)(v6);
      if (v4) {
        break;
      }
      Swift::String v8 = CMLFeatureValue.stringValue()();
      uint64_t countAndFlagsBits = v8._countAndFlagsBits;
      if (v9)
      {
        swift_release();
        uint64_t v15 = "CreateML/MLDataTable.ColumnNames.swift";
        uint64_t v16 = 38;
        uint64_t v17 = 59;
        uint64_t v18 = v9;
LABEL_23:
        swift_unexpectedError(v18, v15, v16, 1, v17);
        BUG();
      }
      char object = v8._object;
      swift_release();
      unint64_t v11 = _swiftEmptyArrayStorage[2];
      unint64_t v12 = v11 + 1;
      if (_swiftEmptyArrayStorage[3] >> 1 <= v11)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(_swiftEmptyArrayStorage[3] >= 2uLL, v11 + 1, 1);
        unint64_t v12 = v11 + 1;
      }
      uint64_t v13 = 2 * v11;
      _swiftEmptyArrayStorage[2] = v12;
      _swiftEmptyArrayStorage[v13 + 4] = countAndFlagsBits;
      _swiftEmptyArrayStorage[v13 + 5] = object;
      uint64_t v7 = a2;
      if (a2 < a1) {
        BUG();
      }
      if (v6 >= a2) {
        BUG();
      }
      ++v6;
      uint64_t v4 = 0;
      if (a2 == v6) {
        goto LABEL_15;
      }
    }
    uint64_t v15 = "CreateML/SequenceType.swift";
    uint64_t v16 = 27;
    uint64_t v17 = 76;
    uint64_t v18 = v4;
    goto LABEL_23;
  }
LABEL_15:
  swift_release();
  return _swiftEmptyArrayStorage;
}

uint64_t MLDataTable.columnNames.getter()
{
  uint64_t v2 = v0;
  if (*(unsigned char *)(v1 + 8))
  {
    uint64_t v3 = tc_v1_flex_list_create(0);
    if (!v3) {
      BUG();
    }
    uint64_t v4 = v3;
    uint64_t v5 = type metadata accessor for CMLSequence();
    uint64_t result = swift_allocObject(v5, 25, 7);
    *(void *)(result + 16) = v4;
    *(unsigned char *)(result + 24) = 1;
    uint64_t *v2 = result;
  }
  else
  {
    uint64_t v7 = *(void *)v1;
    swift_retain();
    _DataTable.columnNames.getter(v7);
    return outlined consume of Result<_DataTable, Error>(v7, 0);
  }
  return result;
}

uint64_t MLDataTable.ColumnNames.startIndex.getter()
{
  return 0;
}

uint64_t MLDataTable.ColumnNames.endIndex.getter()
{
  swift_retain();
  uint64_t v0 = CMLSequence.size.getter();
  uint64_t v1 = specialized RandomAccessCollection<>.distance(from:to:)(0, v0);
  swift_release();
  return v1;
}

uint64_t MLDataTable.ColumnNames.subscript.getter(uint64_t a1)
{
  CMLSequence.value(at:)(a1);
  uint64_t countAndFlagsBits = CMLFeatureValue.stringValue()()._countAndFlagsBits;
  if (v2)
  {
    swift_errorRelease(v2);
    swift_release();
    _StringGuts.grow(_:)(37);
    swift_bridgeObjectRelease(0);
    v5._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter(&type metadata for Int, &protocol witness table for Int);
    char object = (char)v5._object;
    String.append(_:)(v5);
    swift_bridgeObjectRelease(object);
    v7._uint64_t countAndFlagsBits = 46;
    v7._char object = (void *)0xE100000000000000;
    String.append(_:)(v7);
    _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, 0xD000000000000022, "able.ColumnNames.swift" + 0x8000000000000000, "CreateML/MLDataTable.ColumnNames.swift", 38, 2, 17, 0);
    BUG();
  }
  uint64_t v3 = countAndFlagsBits;
  swift_release();
  return v3;
}

uint64_t protocol witness for RandomAccessCollection.index(_:offsetBy:limitedBy:) in conformance MLDataTable.ColumnNames(uint64_t *a1, uint64_t a2, uint64_t *a3)
{
  return protocol witness for RandomAccessCollection.index(_:offsetBy:limitedBy:) in conformance MLDataTable.ColumnNames(a1, a2, a3);
}

{
  uint64_t v3;
  uint64_t v4;
  uint64_t result;
  char v6;

  uint64_t v4 = v3;
  uint64_t result = specialized RandomAccessCollection.index(_:offsetBy:limitedBy:)(*a1, a2, *a3);
  *(void *)uint64_t v4 = result;
  *(unsigned char *)(v4 + 8) = v6 & 1;
  return result;
}

uint64_t protocol witness for BidirectionalCollection.index(before:) in conformance MLDataTable.ColumnNames(uint64_t *a1)
{
  uint64_t v2 = v1;
  uint64_t result = specialized RandomAccessCollection<>.index(before:)(*a1);
  uint64_t *v2 = result;
  return result;
}

uint64_t protocol witness for BidirectionalCollection.formIndex(before:) in conformance MLDataTable.ColumnNames(uint64_t *a1)
{
  uint64_t v1 = *a1 - 1;
  if (__OFSUB__(*a1, 1)) {
    BUG();
  }
  swift_retain();
  uint64_t v2 = CMLSequence.size.getter();
  uint64_t v3 = specialized RandomAccessCollection<>.distance(from:to:)(0, v2);
  uint64_t result = swift_release();
  if (v1 < 0 || v1 >= v3) {
    BUG();
  }
  *a1 = v1;
  return result;
}

uint64_t protocol witness for BidirectionalCollection.index(_:offsetBy:) in conformance MLDataTable.ColumnNames(uint64_t *a1, uint64_t a2)
{
  uint64_t v3 = v2;
  uint64_t result = specialized RandomAccessCollection<>.index(_:offsetBy:)(*a1, a2);
  uint64_t *v3 = result;
  return result;
}

uint64_t protocol witness for BidirectionalCollection.distance(from:to:) in conformance MLDataTable.ColumnNames(uint64_t *a1, uint64_t *a2)
{
  return specialized RandomAccessCollection<>.distance(from:to:)(*a1, *a2);
}

uint64_t protocol witness for Collection.endIndex.getter in conformance MLDataTable.ColumnNames()
{
  uint64_t v1 = v0;
  uint64_t result = MLDataTable.ColumnNames.endIndex.getter();
  *uint64_t v1 = result;
  return result;
}

uint64_t (*protocol witness for Collection.subscript.read in conformance MLDataTable.ColumnNames(uint64_t *a1, uint64_t *a2))(uint64_t a1)
{
  uint64_t v2 = MLDataTable.ColumnNames.subscript.getter(*a2);
  a1[2] = v3;
  *a1 = v2;
  a1[1] = v3;
  return protocol witness for Collection.subscript.read in conformance MLDataTable.ColumnNames;
}

uint64_t protocol witness for Collection.subscript.read in conformance MLDataTable.ColumnNames(uint64_t a1)
{
  return swift_bridgeObjectRelease(*(void *)(a1 + 16));
}

uint64_t protocol witness for Collection.subscript.getter in conformance MLDataTable.ColumnNames(uint64_t *a1)
{
  return specialized Collection<>.subscript.getter(*a1, a1[1], *v1);
}

uint64_t protocol witness for Collection.indices.getter in conformance MLDataTable.ColumnNames()
{
  uint64_t v1 = v0;
  uint64_t result = specialized RandomAccessCollection<>.indices.getter();
  *uint64_t v1 = result;
  v1[1] = v3;
  return result;
}

BOOL protocol witness for Collection.isEmpty.getter in conformance MLDataTable.ColumnNames()
{
  return specialized Collection.isEmpty.getter();
}

uint64_t protocol witness for Collection.count.getter in conformance MLDataTable.ColumnNames()
{
  return specialized Collection.count.getter();
}

uint64_t protocol witness for Collection._customIndexOfEquatableElement(_:) in conformance MLDataTable.ColumnNames()
{
  *(void *)uint64_t result = 0;
  *(_WORD *)(result + 8) = 256;
  return result;
}

void protocol witness for Collection._failEarlyRangeCheck(_:bounds:) in conformance MLDataTable.ColumnNames(uint64_t *a1, uint64_t *a2)
{
}

{
  specialized Collection._failEarlyRangeCheck(_:bounds:)(*a1, *a2, a2[1]);
}

{
  specialized Collection._failEarlyRangeCheck(_:bounds:)(*a1, a1[1], *a2, a2[1]);
}

void specialized Collection._failEarlyRangeCheck(_:bounds:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a1 < a2 || a3 < a1) {
    BUG();
  }
}

{
  specialized Collection._failEarlyRangeCheck(_:bounds:)(a1, a2, a3);
}

{
  if (a1 < a2 || a1 >= a3) {
    BUG();
  }
}

{
  specialized Collection._failEarlyRangeCheck(_:bounds:)(a1, a2, a3);
}

{
  specialized Collection._failEarlyRangeCheck(_:bounds:)(a1, a2, a3);
}

uint64_t specialized Collection._failEarlyRangeCheck(_:bounds:)(uint64_t a1, int a2, char a3, long long *a4)
{
  if ((a3 & 1) != 0
    || (char v9 = *((unsigned char *)a4 + 16),
        long long v8 = *a4,
        outlined init with take of [MLDataValue : MLDataValue].Index._Variant((uint64_t)&v8, (uint64_t)v6),
        outlined init with take of [MLDataValue : MLDataValue].Index._Variant((uint64_t)v6, (uint64_t)&v15),
        v17))
  {
    BUG();
  }
  if (v16 != a2) {
    BUG();
  }
  if (v15 > a1) {
    BUG();
  }
  char v11 = *((unsigned char *)a4 + 40);
  long long v10 = *(long long *)((char *)a4 + 24);
  outlined init with take of [MLDataValue : MLDataValue].Index._Variant((uint64_t)&v10, (uint64_t)v7);
  uint64_t result = outlined init with take of [MLDataValue : MLDataValue].Index._Variant((uint64_t)v7, (uint64_t)&v12);
  if (v14) {
    BUG();
  }
  if (v13 != a2) {
    BUG();
  }
  if (v12 < a1) {
    BUG();
  }
  return result;
}

{
  uint64_t result;
  unsigned char v6[24];
  unsigned char v7[24];
  long long v8;
  char v9;
  long long v10;
  char v11;
  uint64_t v12;
  int v13;
  char v14;
  uint64_t v15;
  int v16;
  char v17;

  if ((a3 & 1) != 0
    || (char v9 = *((unsigned char *)a4 + 16),
        long long v8 = *a4,
        outlined init with take of [MLDataValue : MLDataValue].Index._Variant((uint64_t)&v8, (uint64_t)v6),
        outlined init with take of [MLDataValue : MLDataValue].Index._Variant((uint64_t)v6, (uint64_t)&v15),
        v17))
  {
    BUG();
  }
  if (v16 != a2) {
    BUG();
  }
  if (v15 > a1) {
    BUG();
  }
  char v11 = *((unsigned char *)a4 + 40);
  long long v10 = *(long long *)((char *)a4 + 24);
  outlined init with take of [MLDataValue : MLDataValue].Index._Variant((uint64_t)&v10, (uint64_t)v7);
  uint64_t result = outlined init with take of [MLDataValue : MLDataValue].Index._Variant((uint64_t)v7, (uint64_t)&v12);
  if (v14) {
    BUG();
  }
  if (v13 != a2) {
    BUG();
  }
  if (v12 <= a1) {
    BUG();
  }
  return result;
}

uint64_t protocol witness for Collection.index(after:) in conformance MLDataTable.ColumnNames(uint64_t *a1)
{
  uint64_t v2 = v1;
  uint64_t result = specialized RandomAccessCollection<>.index(after:)(*a1);
  uint64_t *v2 = result;
  return result;
}

uint64_t protocol witness for Collection.formIndex(after:) in conformance MLDataTable.ColumnNames(uint64_t *a1)
{
  uint64_t v1 = *a1;
  swift_retain();
  uint64_t v2 = CMLSequence.size.getter();
  uint64_t v3 = specialized RandomAccessCollection<>.distance(from:to:)(0, v2);
  uint64_t result = swift_release();
  if (v1 < 0 || v1 >= v3) {
    BUG();
  }
  *a1 = v1 + 1;
  return result;
}

void *protocol witness for Sequence.makeIterator() in conformance MLDataTable.ColumnNames()
{
  *uint64_t result = *v1;
  result[1] = 0;
  return result;
}

uint64_t protocol witness for Sequence.underestimatedCount.getter in conformance MLDataTable.ColumnNames()
{
  return specialized Collection.underestimatedCount.getter();
}

uint64_t *protocol witness for Sequence._copyToContiguousArray() in conformance MLDataTable.ColumnNames()
{
  return specialized Collection._copyToContiguousArray()(*v0);
}

uint64_t protocol witness for Sequence._copyContents(initializing:) in conformance MLDataTable.ColumnNames(void *a1, uint64_t *a2, uint64_t a3)
{
  return specialized Sequence._copyContents(initializing:)(a1, a2, a3, *v3);
}

uint64_t protocol witness for Sequence.withContiguousStorageIfAvailable<A>(_:) in conformance MLDataTable.ColumnNames(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return Sequence.withContiguousStorageIfAvailable<A>(_:)(a1, a2, a4, a3);
}

char static MLDataTable.ColumnNames.== infix(_:_:)()
{
  return specialized Sequence<>.elementsEqual<A>(_:)();
}

char specialized Sequence<>.elementsEqual<A>(_:)()
{
  uint64_t v21 = 0;
  swift_retain();
  swift_retain();
  for (uint64_t i = 0; ; uint64_t i = v22)
  {
    swift_retain();
    uint64_t v1 = CMLSequence.size.getter();
    uint64_t v2 = specialized RandomAccessCollection<>.distance(from:to:)(0, v1);
    swift_release();
    if (i == v2)
    {
      Swift::String v20 = (Swift::String)0;
    }
    else
    {
      CMLSequence.value(at:)(i);
      Swift::String v20 = CMLFeatureValue.stringValue()();
      if (v3) {
        goto LABEL_28;
      }
      swift_release();
      swift_retain();
      uint64_t v4 = CMLSequence.size.getter();
      uint64_t v5 = specialized RandomAccessCollection<>.distance(from:to:)(0, v4);
      swift_release();
      if (i < 0 || i >= v5) {
        BUG();
      }
      ++i;
    }
    swift_retain();
    uint64_t v6 = CMLSequence.size.getter();
    uint64_t v7 = specialized RandomAccessCollection<>.distance(from:to:)(0, v6);
    swift_release();
    if (v21 == v7) {
      break;
    }
    uint64_t v22 = i;
    CMLSequence.value(at:)(v21);
    Swift::String v8 = CMLFeatureValue.stringValue()();
    if (v3)
    {
LABEL_28:
      swift_errorRelease(v3);
      swift_release();
      _StringGuts.grow(_:)(37);
      swift_bridgeObjectRelease(0);
      v17._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter(&type metadata for Int, &protocol witness table for Int);
      char object = (char)v17._object;
      String.append(_:)(v17);
      swift_bridgeObjectRelease(object);
      v19._uint64_t countAndFlagsBits = 46;
      v19._char object = (void *)0xE100000000000000;
      String.append(_:)(v19);
      _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, 0xD000000000000022, "able.ColumnNames.swift" + 0x8000000000000000, "CreateML/MLDataTable.ColumnNames.swift", 38, 2, 17, 0);
      BUG();
    }
    uint64_t countAndFlagsBits = v8._countAndFlagsBits;
    long long v10 = v8._object;
    swift_release();
    swift_retain();
    uint64_t v11 = CMLSequence.size.getter();
    uint64_t v12 = specialized RandomAccessCollection<>.distance(from:to:)(0, v11);
    swift_release();
    if (v21 >= v12) {
      BUG();
    }
    char v13 = (char)v20._object;
    if (!v20._object) {
      goto LABEL_21;
    }
    if (!v10) {
      goto LABEL_18;
    }
    if (v20 == __PAIR128__((unint64_t)v10, countAndFlagsBits))
    {
      swift_bridgeObjectRelease(v20._object);
      swift_bridgeObjectRelease((_BYTE)v10);
    }
    else
    {
      char v14 = _stringCompareWithSmolCheck(_:_:expecting:)(v20._countAndFlagsBits, v20._object, countAndFlagsBits, v10, 0);
      swift_bridgeObjectRelease(v20._object);
      swift_bridgeObjectRelease((_BYTE)v10);
      if ((v14 & 1) == 0)
      {
        swift_release();
        swift_release();
        return 0;
      }
    }
    ++v21;
  }
  char v13 = (char)v20._object;
  if (v20._object)
  {
LABEL_18:
    swift_release();
    swift_release();
    char v15 = v13;
LABEL_23:
    swift_bridgeObjectRelease(v15);
    return 0;
  }
  long long v10 = 0;
LABEL_21:
  swift_release();
  swift_release();
  if (v10)
  {
    char v15 = (char)v10;
    goto LABEL_23;
  }
  return 1;
}

BOOL specialized Sequence<>.elementsEqual<A>(_:)(uint64_t a1, uint64_t a2)
{
  unint64_t v2 = *(void *)(a2 + 16);
  unint64_t v3 = *(void *)(a1 + 16);
  unint64_t v4 = 0;
  unint64_t v5 = 0;
  do
  {
    if (v5 == v2)
    {
      unint64_t v6 = *(void *)(a2 + 16);
      uint64_t v7 = 0;
    }
    else
    {
      if (v5 >= v2) {
        BUG();
      }
      uint64_t v7 = *(void *)(a2 + 8 * v5 + 32);
      unint64_t v6 = v5 + 1;
    }
    BOOL result = v4 == v3;
    if (v4 == v3)
    {
      unint64_t v9 = *(void *)(a1 + 16);
      uint64_t v10 = 0;
    }
    else
    {
      if (v4 >= v3) {
        BUG();
      }
      uint64_t v10 = *(void *)(a1 + 8 * v4 + 32);
      unint64_t v9 = v4 + 1;
    }
    if (v5 == v2) {
      break;
    }
    BOOL result = 0;
    if (v4 == v3) {
      break;
    }
    unint64_t v4 = v9;
    unint64_t v5 = v6;
  }
  while (v7 == v10);
  return result;
}

char protocol witness for static Equatable.== infix(_:_:) in conformance MLDataTable.ColumnNames()
{
  return static MLDataTable.ColumnNames.== infix(_:_:)();
}

uint64_t MLDataTable.ColumnNames.description.getter()
{
  uint64_t v1 = *v0;
  swift_retain();
  uint64_t v2 = CMLSequence.size.getter();
  uint64_t v3 = specialized RandomAccessCollection<>.distance(from:to:)(0, v2);
  swift_retain();
  uint64_t v4 = CMLSequence.size.getter();
  uint64_t v5 = specialized RandomAccessCollection<>.distance(from:to:)(0, v4);
  swift_release();
  if (v5 < 0) {
    BUG();
  }
  swift_retain();
  uint64_t v6 = CMLSequence.size.getter();
  uint64_t v7 = specialized RandomAccessCollection<>.distance(from:to:)(0, v6);
  swift_release_n(v1);
  if (v3 < 0 || v7 < v3) {
    BUG();
  }
  swift_retain();
  ML11MLDataTableV11ColumnNamesV11descriptionSSvgSSSiXEfU_0F2ML0hI0V0kL0VTf1cn_n = _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSnySiG_SSs5NeverOTg565_s8CreateML11MLDataTableV11ColumnNamesV11descriptionSSvgSSSiXEfU_0F2ML0hI0V0kL0VTf1cn_n(0, v3);
  char v9 = (char)ML11MLDataTableV11ColumnNamesV11descriptionSSvgSSSiXEfU_0F2ML0hI0V0kL0VTf1cn_n;
  uint64_t v10 = Array.description.getter(ML11MLDataTableV11ColumnNamesV11descriptionSSvgSSSiXEfU_0F2ML0hI0V0kL0VTf1cn_n, &type metadata for String);
  swift_bridgeObjectRelease(v9);
  return v10;
}

uint64_t MLDataTable.ColumnNames.debugDescription.getter()
{
  uint64_t v1 = *v0;
  swift_retain_n(v1);
  uint64_t v2 = CMLSequence.size.getter();
  uint64_t v3 = specialized RandomAccessCollection<>.distance(from:to:)(0, v2);
  swift_retain();
  uint64_t v4 = CMLSequence.size.getter();
  uint64_t v5 = specialized RandomAccessCollection<>.distance(from:to:)(0, v4);
  swift_release();
  if (v5 < 0) {
    BUG();
  }
  swift_retain();
  uint64_t v6 = CMLSequence.size.getter();
  uint64_t v7 = specialized RandomAccessCollection<>.distance(from:to:)(0, v6);
  swift_release_n(v1);
  if (v3 < 0 || v7 < v3) {
    BUG();
  }
  swift_retain();
  ML11MLDataTableV11ColumnNamesV11descriptionSSvgSSSiXEfU_0F2ML0hI0V0kL0VTf1cn_n = _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSnySiG_SSs5NeverOTg565_s8CreateML11MLDataTableV11ColumnNamesV11descriptionSSvgSSSiXEfU_0F2ML0hI0V0kL0VTf1cn_n(0, v3);
  char v9 = (char)ML11MLDataTableV11ColumnNamesV11descriptionSSvgSSSiXEfU_0F2ML0hI0V0kL0VTf1cn_n;
  uint64_t v10 = Array.description.getter(ML11MLDataTableV11ColumnNamesV11descriptionSSvgSSSiXEfU_0F2ML0hI0V0kL0VTf1cn_n, &type metadata for String);
  swift_release();
  swift_bridgeObjectRelease(v9);
  return v10;
}

uint64_t MLDataTable.ColumnNames.playgroundDescription.getter()
{
  uint64_t v2 = v0;
  uint64_t v3 = *v1;
  swift_retain_n(v3);
  uint64_t v4 = CMLSequence.size.getter();
  uint64_t v5 = specialized RandomAccessCollection<>.distance(from:to:)(0, v4);
  swift_retain();
  uint64_t v6 = CMLSequence.size.getter();
  uint64_t v7 = specialized RandomAccessCollection<>.distance(from:to:)(0, v6);
  swift_release();
  if (v7 < 0) {
    BUG();
  }
  swift_retain();
  uint64_t v8 = CMLSequence.size.getter();
  uint64_t v9 = specialized RandomAccessCollection<>.distance(from:to:)(0, v8);
  swift_release_n(v3);
  if (v5 < 0 || v9 < v5) {
    BUG();
  }
  swift_retain();
  ML11MLDataTableV11ColumnNamesV11descriptionSSvgSSSiXEfU_0F2ML0hI0V0kL0VTf1cn_n = _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSnySiG_SSs5NeverOTg565_s8CreateML11MLDataTableV11ColumnNamesV11descriptionSSvgSSSiXEfU_0F2ML0hI0V0kL0VTf1cn_n(0, v5);
  char v11 = (char)ML11MLDataTableV11ColumnNamesV11descriptionSSvgSSSiXEfU_0F2ML0hI0V0kL0VTf1cn_n;
  uint64_t v12 = Array.description.getter(ML11MLDataTableV11ColumnNamesV11descriptionSSvgSSSiXEfU_0F2ML0hI0V0kL0VTf1cn_n, &type metadata for String);
  char v14 = v13;
  swift_release();
  swift_bridgeObjectRelease(v11);
  objc_allocWithZone((Class)NSAttributedString);
  id v15 = @nonobjc NSAttributedString.init(string:attributes:)(v12, v14, 0);
  uint64_t result = type metadata accessor for NSAttributedString();
  v2[3] = result;
  void *v2 = v15;
  return result;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance MLDataTable.ColumnNames()
{
  return MLDataTable.ColumnNames.description.getter();
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance MLDataTable.ColumnNames()
{
  return MLDataTable.ColumnNames.debugDescription.getter();
}

uint64_t protocol witness for CustomPlaygroundDisplayConvertible.playgroundDescription.getter in conformance MLDataTable.ColumnNames()
{
  return MLDataTable.ColumnNames.playgroundDescription.getter();
}

id @nonobjc NSAttributedString.init(string:attributes:)(uint64_t a1, char a2, uint64_t a3)
{
  NSString v5 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(a2);
  if (a3)
  {
    type metadata accessor for NSAttributedStringKey(0);
    lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey();
    v6.super.isa = Dictionary._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease(a3);
  }
  else
  {
    v6.super.isa = 0;
  }
  id v7 = [v3 initWithString:v5 attributes:v6.super.isa];

  return v7;
}

uint64_t base witness table accessor for BidirectionalCollection in MLDataTable.ColumnNames()
{
  return lazy protocol witness table accessor for type MLDataTable.ColumnNames and conformance MLDataTable.ColumnNames();
}

uint64_t lazy protocol witness table accessor for type MLDataTable.ColumnNames and conformance MLDataTable.ColumnNames()
{
  uint64_t result = lazy protocol witness table cache variable for type MLDataTable.ColumnNames and conformance MLDataTable.ColumnNames;
  if (!lazy protocol witness table cache variable for type MLDataTable.ColumnNames and conformance MLDataTable.ColumnNames)
  {
    uint64_t result = swift_getWitnessTable(&protocol conformance descriptor for MLDataTable.ColumnNames, &type metadata for MLDataTable.ColumnNames);
    lazy protocol witness table cache variable for type MLDataTable.ColumnNames and conformance MLDataTable.ColumnNames = result;
  }
  return result;
}

{
  uint64_t result;

  uint64_t result = lazy protocol witness table cache variable for type MLDataTable.ColumnNames and conformance MLDataTable.ColumnNames;
  if (!lazy protocol witness table cache variable for type MLDataTable.ColumnNames and conformance MLDataTable.ColumnNames)
  {
    uint64_t result = swift_getWitnessTable(&protocol conformance descriptor for MLDataTable.ColumnNames, &type metadata for MLDataTable.ColumnNames);
    lazy protocol witness table cache variable for type MLDataTable.ColumnNames and conformance MLDataTable.ColumnNames = result;
  }
  return result;
}

{
  uint64_t result;

  uint64_t result = lazy protocol witness table cache variable for type MLDataTable.ColumnNames and conformance MLDataTable.ColumnNames;
  if (!lazy protocol witness table cache variable for type MLDataTable.ColumnNames and conformance MLDataTable.ColumnNames)
  {
    uint64_t result = swift_getWitnessTable(&protocol conformance descriptor for MLDataTable.ColumnNames, &type metadata for MLDataTable.ColumnNames);
    lazy protocol witness table cache variable for type MLDataTable.ColumnNames and conformance MLDataTable.ColumnNames = result;
  }
  return result;
}

{
  uint64_t result;

  uint64_t result = lazy protocol witness table cache variable for type MLDataTable.ColumnNames and conformance MLDataTable.ColumnNames;
  if (!lazy protocol witness table cache variable for type MLDataTable.ColumnNames and conformance MLDataTable.ColumnNames)
  {
    uint64_t result = swift_getWitnessTable(&protocol conformance descriptor for MLDataTable.ColumnNames, &type metadata for MLDataTable.ColumnNames);
    lazy protocol witness table cache variable for type MLDataTable.ColumnNames and conformance MLDataTable.ColumnNames = result;
  }
  return result;
}

uint64_t associated type witness table accessor for Collection.Indices : RandomAccessCollection in MLDataTable.ColumnNames()
{
  return lazy protocol witness table accessor for type Range<Int> and conformance <> Range<A>(&lazy protocol witness table cache variable for type Range<Int> and conformance <> Range<A>, (uint64_t)&protocol conformance descriptor for <> Range<A>);
}

uint64_t associated type witness table accessor for Collection.SubSequence : RandomAccessCollection in MLDataTable.ColumnNames()
{
  return lazy protocol witness table accessor for type Slice<MLDataTable.ColumnNames> and conformance <> Slice<A>(&lazy protocol witness table cache variable for type Slice<MLDataTable.ColumnNames> and conformance <> Slice<A>, (void (*)(void))lazy protocol witness table accessor for type MLDataTable.ColumnNames and conformance MLDataTable.ColumnNames, (uint64_t)&protocol conformance descriptor for <> Slice<A>);
}

uint64_t base witness table accessor for Collection in MLDataTable.ColumnNames()
{
  return lazy protocol witness table accessor for type MLDataTable.ColumnNames and conformance MLDataTable.ColumnNames();
}

uint64_t associated type witness table accessor for Collection.Indices : BidirectionalCollection in MLDataTable.ColumnNames()
{
  return lazy protocol witness table accessor for type Range<Int> and conformance <> Range<A>(&lazy protocol witness table cache variable for type Range<Int> and conformance <> Range<A>, (uint64_t)&protocol conformance descriptor for <> Range<A>);
}

uint64_t associated type witness table accessor for Collection.SubSequence : BidirectionalCollection in MLDataTable.ColumnNames()
{
  return lazy protocol witness table accessor for type Slice<MLDataTable.ColumnNames> and conformance <> Slice<A>(&lazy protocol witness table cache variable for type Slice<MLDataTable.ColumnNames> and conformance <> Slice<A>, (void (*)(void))lazy protocol witness table accessor for type MLDataTable.ColumnNames and conformance MLDataTable.ColumnNames, (uint64_t)&protocol conformance descriptor for <> Slice<A>);
}

uint64_t lazy protocol witness table accessor for type Slice<MLDataTable.ColumnNames> and conformance <> Slice<A>(uint64_t *a1, void (*a2)(void), uint64_t a3)
{
  uint64_t result = *a1;
  if (!*a1)
  {
    uint64_t v5 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for Slice<MLDataTable.ColumnNames>);
    a2();
    uint64_t result = swift_getWitnessTable(a3, v5);
    *a1 = result;
  }
  return result;
}

uint64_t base witness table accessor for Sequence in MLDataTable.ColumnNames()
{
  return lazy protocol witness table accessor for type MLDataTable.ColumnNames and conformance MLDataTable.ColumnNames();
}

void *associated type witness table accessor for Collection.Index : Comparable in MLDataTable.ColumnNames()
{
  return &protocol witness table for Int;
}

uint64_t associated type witness table accessor for Collection.Indices : Collection in MLDataTable.ColumnNames()
{
  return lazy protocol witness table accessor for type Range<Int> and conformance <> Range<A>(&lazy protocol witness table cache variable for type Range<Int> and conformance <> Range<A>, (uint64_t)&protocol conformance descriptor for <> Range<A>);
}

uint64_t lazy protocol witness table accessor for type Range<Int> and conformance <> Range<A>(uint64_t *a1, uint64_t a2)
{
  uint64_t result = *a1;
  if (!*a1)
  {
    uint64_t v3 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for Range<Int>);
    lazy protocol witness table accessor for type Int and conformance Int();
    uint64_t result = swift_getWitnessTable(a2, v3);
    *a1 = result;
  }
  return result;
}

uint64_t associated type witness table accessor for Collection.SubSequence : Collection in MLDataTable.ColumnNames()
{
  return lazy protocol witness table accessor for type FullyConnectedNetworkClassifier<Float, String> and conformance FullyConnectedNetworkClassifier<A, B>(&lazy protocol witness table cache variable for type Slice<MLDataTable.ColumnNames> and conformance Slice<A>, &demangling cache variable for type metadata for Slice<MLDataTable.ColumnNames>, (uint64_t)&protocol conformance descriptor for Slice<A>);
}

uint64_t associated type witness table accessor for Sequence.Iterator : IteratorProtocol in MLDataTable.ColumnNames()
{
  return lazy protocol witness table accessor for type FullyConnectedNetworkClassifier<Float, String> and conformance FullyConnectedNetworkClassifier<A, B>(&lazy protocol witness table cache variable for type IndexingIterator<MLDataTable.ColumnNames> and conformance IndexingIterator<A>, &demangling cache variable for type metadata for IndexingIterator<MLDataTable.ColumnNames>, (uint64_t)&protocol conformance descriptor for IndexingIterator<A>);
}

ValueMetadata *type metadata accessor for MLDataTable.ColumnNames()
{
  return &type metadata for MLDataTable.ColumnNames;
}

uint64_t lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey()
{
  uint64_t result = lazy protocol witness table cache variable for type NSAttributedStringKey and conformance NSAttributedStringKey;
  if (!lazy protocol witness table cache variable for type NSAttributedStringKey and conformance NSAttributedStringKey)
  {
    uint64_t v1 = type metadata accessor for NSAttributedStringKey(255);
    uint64_t result = swift_getWitnessTable(&protocol conformance descriptor for NSAttributedStringKey, v1);
    lazy protocol witness table cache variable for type NSAttributedStringKey and conformance NSAttributedStringKey = result;
  }
  return result;
}

uint64_t protocol witness for RandomAccessCollection.distance(from:to:) in conformance MLDataTable.ColumnNames(uint64_t *a1, uint64_t *a2)
{
  return protocol witness for BidirectionalCollection.distance(from:to:) in conformance MLDataTable.ColumnNames(a1, a2);
}

uint64_t protocol witness for RandomAccessCollection.index(_:offsetBy:) in conformance MLDataTable.ColumnNames(uint64_t *a1, uint64_t a2)
{
  return protocol witness for BidirectionalCollection.index(_:offsetBy:) in conformance MLDataTable.ColumnNames(a1, a2);
}

uint64_t protocol witness for Collection._customLastIndexOfEquatableElement(_:) in conformance MLDataTable.ColumnNames()
{
  return protocol witness for Collection._customIndexOfEquatableElement(_:) in conformance MLDataTable.ColumnNames();
}

unint64_t MLWordTagger.ModelAlgorithmType.description.getter()
{
  unint64_t v1 = 0xD000000000000016;
  if (v0[16] != 1) {
    return 0xD00000000000001ELL;
  }
  if (*v0)
  {
    if (*v0 == 1)
    {
      uint64_t v2 = "Unspecified Language" + 0x8000000000000000;
      unint64_t v1 = 0xD000000000000027;
    }
    else
    {
      uint64_t v2 = "Average Tokens per Sequence" + 0x8000000000000000;
      unint64_t v1 = 0xD000000000000046;
    }
  }
  else
  {
    uint64_t v2 = "ge Model Text Embedding" + 0x8000000000000000;
  }
  unint64_t v5 = v1;
  swift_bridgeObjectRetain(v2);
  v4._uint64_t countAndFlagsBits = 0x6C65646F4D20;
  v4._char object = (void *)0xE600000000000000;
  String.append(_:)(v4);
  swift_bridgeObjectRelease(v2);
  return v5;
}

unint64_t MLWordTagger.ModelAlgorithmType.debugDescription.getter()
{
  unint64_t v1 = 0xD000000000000016;
  if (v0[16] != 1) {
    return 0xD00000000000001ELL;
  }
  if (*v0)
  {
    if (*v0 == 1)
    {
      uint64_t v2 = "Unspecified Language" + 0x8000000000000000;
      unint64_t v1 = 0xD000000000000027;
    }
    else
    {
      uint64_t v2 = "Average Tokens per Sequence" + 0x8000000000000000;
      unint64_t v1 = 0xD000000000000046;
    }
  }
  else
  {
    uint64_t v2 = "ge Model Text Embedding" + 0x8000000000000000;
  }
  unint64_t v5 = v1;
  swift_bridgeObjectRetain(v2);
  v4._uint64_t countAndFlagsBits = 0x6C65646F4D20;
  v4._char object = (void *)0xE600000000000000;
  String.append(_:)(v4);
  swift_bridgeObjectRelease(v2);
  return v5;
}

unint64_t MLWordTagger.ModelAlgorithmType.playgroundDescription.getter()
{
  uint64_t v2 = v0;
  unint64_t v3 = 0xD000000000000016;
  if (v1[16] == 1)
  {
    if (*v1)
    {
      if (*v1 == 1)
      {
        Swift::String v4 = "Unspecified Language" + 0x8000000000000000;
        unint64_t v3 = 0xD000000000000027;
      }
      else
      {
        Swift::String v4 = "Average Tokens per Sequence" + 0x8000000000000000;
        unint64_t v3 = 0xD000000000000046;
      }
    }
    else
    {
      Swift::String v4 = "ge Model Text Embedding" + 0x8000000000000000;
    }
    unint64_t v8 = v3;
    swift_bridgeObjectRetain(v4);
    v7._uint64_t countAndFlagsBits = 0x6C65646F4D20;
    v7._char object = (void *)0xE600000000000000;
    String.append(_:)(v7);
    swift_bridgeObjectRelease(v4);
    unint64_t result = v8;
    unint64_t v5 = v4;
  }
  else
  {
    unint64_t v5 = "Dynamic Text Embedding" + 0x8000000000000000;
    unint64_t result = 0xD00000000000001ELL;
  }
  v2[3] = (unint64_t)&type metadata for String;
  unint64_t *v2 = result;
  v2[1] = (unint64_t)v5;
  return result;
}

unint64_t protocol witness for CustomStringConvertible.description.getter in conformance MLWordTagger.ModelAlgorithmType()
{
  return MLWordTagger.ModelAlgorithmType.description.getter();
}

unint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance MLWordTagger.ModelAlgorithmType()
{
  return MLWordTagger.ModelAlgorithmType.debugDescription.getter();
}

unint64_t protocol witness for CustomPlaygroundDisplayConvertible.playgroundDescription.getter in conformance MLWordTagger.ModelAlgorithmType()
{
  return MLWordTagger.ModelAlgorithmType.playgroundDescription.getter();
}

ValueMetadata *type metadata accessor for MLWordTagger.ModelAlgorithmType()
{
  return &type metadata for MLWordTagger.ModelAlgorithmType;
}

uint64_t *initializeBufferWithCopyOfBuffer for MLHandActionClassifier.PersistentParameters(uint64_t *a1, uint64_t a2, int *a3)
{
  Swift::String v4 = a1;
  int v5 = *(_DWORD *)(*((void *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v21 = *(void *)a2;
    *Swift::String v4 = *(void *)a2;
    Swift::String v4 = (uint64_t *)(v21 + ((v5 + 16) & ~v5));
    swift_retain();
  }
  else
  {
    NSDictionary v6 = a3;
    uint64_t v7 = type metadata accessor for MLHandActionClassifier.DataSource(0);
    uint64_t v98 = v6;
    uint64_t v106 = v7;
    switch(swift_getEnumCaseMultiPayload(a2, v7))
    {
      case 0u:
        uint64_t v8 = type metadata accessor for URL(0);
        uint64_t v9 = *(void (**)(uint64_t *, uint64_t, uint64_t))(*(void *)(v8 - 8) + 16);
        v9(a1, a2, v8);
        uint64_t v10 = (int *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (at: URL, annotationFile: URL, videoColumn: String, labelColumn: String, startTimeColumn: String?, endTimeColumn: String?));
        v9((uint64_t *)((char *)a1 + v10[12]), a2 + v10[12], v8);
        uint64_t v11 = v10[16];
        *(uint64_t *)((char *)a1 + v11) = *(void *)(a2 + v11);
        uint64_t v12 = *(void *)(a2 + v11 + 8);
        *(uint64_t *)((char *)v4 + v11 + 8) = v12;
        uint64_t v13 = v10[20];
        *(uint64_t *)((char *)v4 + v13) = *(void *)(a2 + v13);
        uint64_t v14 = *(void *)(a2 + v13 + 8);
        *(uint64_t *)((char *)v4 + v13 + 8) = v14;
        uint64_t v15 = v10[24];
        *(uint64_t *)((char *)v4 + v15) = *(void *)(a2 + v15);
        uint64_t v16 = *(void *)(a2 + v15 + 8);
        *(uint64_t *)((char *)v4 + v15 + 8) = v16;
        uint64_t v17 = v10[28];
        *(uint64_t *)((char *)v4 + v17) = *(void *)(a2 + v17);
        uint64_t v18 = *(void *)(a2 + v17 + 8);
        *(uint64_t *)((char *)v4 + v17 + 8) = v18;
        swift_bridgeObjectRetain(v12);
        swift_bridgeObjectRetain(v14);
        swift_bridgeObjectRetain(v16);
        LOBYTE(v12) = v18;
        NSDictionary v6 = v98;
        swift_bridgeObjectRetain(v12);
        a1 = v4;
        uint64_t v19 = v106;
        uint64_t v20 = 0;
        goto LABEL_13;
      case 1u:
        uint64_t v22 = type metadata accessor for URL(0);
        (*(void (**)(uint64_t *, uint64_t, uint64_t))(*(void *)(v22 - 8) + 16))(a1, a2, v22);
        uint64_t v94 = 1;
        goto LABEL_7;
      case 2u:
        uint64_t v23 = type metadata accessor for URL(0);
        (*(void (**)(uint64_t *, uint64_t, uint64_t))(*(void *)(v23 - 8) + 16))(a1, a2, v23);
        uint64_t v94 = 2;
LABEL_7:
        uint64_t v20 = v94;
        uint64_t v19 = v7;
        goto LABEL_13;
      case 3u:
        uint64_t v24 = *(void *)a2;
        uint64_t v25 = v6;
        char v26 = *(unsigned char *)(a2 + 8);
        outlined copy of Result<_DataTable, Error>(*(void *)a2, v26);
        *a1 = v24;
        *((unsigned char *)a1 + 8) = v26;
        a1[2] = *(void *)(a2 + 16);
        uint64_t v27 = *(void *)(a2 + 24);
        v4[3] = v27;
        v4[4] = *(void *)(a2 + 32);
        uint64_t v28 = *(void *)(a2 + 40);
        v4[5] = v28;
        v4[6] = *(void *)(a2 + 48);
        uint64_t v29 = *(void *)(a2 + 56);
        v4[7] = v29;
        swift_bridgeObjectRetain(v27);
        swift_bridgeObjectRetain(v28);
        LOBYTE(v27) = v29;
        NSDictionary v6 = v25;
        swift_bridgeObjectRetain(v27);
        uint64_t v95 = 3;
        goto LABEL_12;
      case 4u:
        uint64_t v30 = *(void *)a2;
        char v31 = *(unsigned char *)(a2 + 8);
        outlined copy of Result<_DataTable, Error>(*(void *)a2, v31);
        *a1 = v30;
        *((unsigned char *)a1 + 8) = v31;
        a1[2] = *(void *)(a2 + 16);
        uint64_t v32 = *(void *)(a2 + 24);
        v4[3] = v32;
        v4[4] = *(void *)(a2 + 32);
        uint64_t v33 = *(void *)(a2 + 40);
        v4[5] = v33;
        v4[6] = *(void *)(a2 + 48);
        uint64_t v34 = *(void *)(a2 + 56);
        v4[7] = v34;
        v4[8] = *(void *)(a2 + 64);
        uint64_t v35 = *(void *)(a2 + 72);
        v4[9] = v35;
        swift_bridgeObjectRetain(v32);
        swift_bridgeObjectRetain(v33);
        LOBYTE(v32) = v34;
        NSDictionary v6 = v98;
        swift_bridgeObjectRetain(v32);
        swift_bridgeObjectRetain(v35);
        uint64_t v95 = 4;
        goto LABEL_12;
      case 5u:
        uint64_t v36 = type metadata accessor for DataFrame(0);
        (*(void (**)(uint64_t *, uint64_t, uint64_t))(*(void *)(v36 - 8) + 16))(a1, a2, v36);
        uint64_t v37 = (int *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (DataFrame, sessionIdColumn: String, labelColumn: String, featureColumn: String));
        uint64_t v38 = v37[12];
        *(uint64_t *)((char *)a1 + v38) = *(void *)(a2 + v38);
        uint64_t v39 = *(void *)(a2 + v38 + 8);
        *(uint64_t *)((char *)v4 + v38 + 8) = v39;
        uint64_t v40 = v37[16];
        *(uint64_t *)((char *)v4 + v40) = *(void *)(a2 + v40);
        uint64_t v41 = *(void *)(a2 + v40 + 8);
        *(uint64_t *)((char *)v4 + v40 + 8) = v41;
        uint64_t v42 = v37[20];
        *(uint64_t *)((char *)v4 + v42) = *(void *)(a2 + v42);
        uint64_t v43 = v6;
        uint64_t v44 = *(void *)(a2 + v42 + 8);
        *(uint64_t *)((char *)v4 + v42 + 8) = v44;
        swift_bridgeObjectRetain(v39);
        swift_bridgeObjectRetain(v41);
        LOBYTE(v39) = v44;
        NSDictionary v6 = v43;
        swift_bridgeObjectRetain(v39);
        uint64_t v95 = 5;
        goto LABEL_12;
      case 6u:
        uint64_t v45 = type metadata accessor for DataFrame(0);
        (*(void (**)(uint64_t *, uint64_t, uint64_t))(*(void *)(v45 - 8) + 16))(a1, a2, v45);
        uint64_t v46 = (int *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (DataFrame, videoColumn: String, labelColumn: String, startTimeColumn: String?, endTimeColumn: String?));
        uint64_t v47 = v46[12];
        *(uint64_t *)((char *)a1 + v47) = *(void *)(a2 + v47);
        uint64_t v48 = *(void *)(a2 + v47 + 8);
        *(uint64_t *)((char *)v4 + v47 + 8) = v48;
        uint64_t v49 = v46[16];
        *(uint64_t *)((char *)v4 + v49) = *(void *)(a2 + v49);
        uint64_t v50 = *(void *)(a2 + v49 + 8);
        *(uint64_t *)((char *)v4 + v49 + 8) = v50;
        uint64_t v51 = v46[20];
        *(uint64_t *)((char *)v4 + v51) = *(void *)(a2 + v51);
        uint64_t v52 = *(void *)(a2 + v51 + 8);
        *(uint64_t *)((char *)v4 + v51 + 8) = v52;
        uint64_t v53 = v46[24];
        *(uint64_t *)((char *)v4 + v53) = *(void *)(a2 + v53);
        uint64_t v54 = *(void *)(a2 + v53 + 8);
        *(uint64_t *)((char *)v4 + v53 + 8) = v54;
        swift_bridgeObjectRetain(v48);
        swift_bridgeObjectRetain(v50);
        LOBYTE(v48) = v52;
        NSDictionary v6 = v98;
        swift_bridgeObjectRetain(v48);
        swift_bridgeObjectRetain(v54);
        uint64_t v95 = 6;
LABEL_12:
        uint64_t v20 = v95;
        a1 = v4;
        uint64_t v19 = v106;
LABEL_13:
        swift_storeEnumTagMultiPayload(a1, v19, v20);
        uint64_t v55 = v6[5];
        uint64_t v56 = (char *)v4 + v55;
        uint64_t v57 = a2 + v55;
        uint64_t v58 = type metadata accessor for MLHandActionClassifier.ModelParameters.ValidationData(0);
        if (swift_getEnumCaseMultiPayload(v57, v58) != 1) {
          JUMPOUT(0x79277);
        }
        uint64_t v99 = v58;
        switch(swift_getEnumCaseMultiPayload(v57, v106))
        {
          case 0u:
            uint64_t v100 = type metadata accessor for URL(0);
            uint64_t v96 = *(void (**)(char *, uint64_t, uint64_t))(*(void *)(v100 - 8) + 16);
            v96(v56, v57, v100);
            uint64_t v59 = (int *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (at: URL, annotationFile: URL, videoColumn: String, labelColumn: String, startTimeColumn: String?, endTimeColumn: String?));
            v96(&v56[v59[12]], v57 + v59[12], v100);
            uint64_t v60 = v59[16];
            *(void *)&v56[v60] = *(void *)(v57 + v60);
            uint64_t v61 = *(void *)(v57 + v60 + 8);
            *(void *)&v56[v60 + 8] = v61;
            uint64_t v62 = v59[20];
            *(void *)&v56[v62] = *(void *)(v57 + v62);
            uint64_t v101 = *(void *)(v57 + v62 + 8);
            *(void *)&v56[v62 + 8] = v101;
            uint64_t v63 = v59[24];
            *(void *)&v56[v63] = *(void *)(v57 + v63);
            uint64_t v97 = *(void *)(v57 + v63 + 8);
            *(void *)&v56[v63 + 8] = v97;
            uint64_t v64 = v59[28];
            *(void *)&v56[v64] = *(void *)(v57 + v64);
            uint64_t v65 = *(void *)(v57 + v64 + 8);
            *(void *)&v56[v64 + 8] = v65;
            swift_bridgeObjectRetain(v61);
            swift_bridgeObjectRetain(v101);
            swift_bridgeObjectRetain(v97);
            swift_bridgeObjectRetain(v65);
            JUMPOUT(0x79272);
          case 1u:
            uint64_t v66 = type metadata accessor for URL(0);
            (*(void (**)(char *, uint64_t, uint64_t))(*(void *)(v66 - 8) + 16))(v56, v57, v66);
            swift_storeEnumTagMultiPayload(v56, v106, 1);
            break;
          case 2u:
            uint64_t v67 = type metadata accessor for URL(0);
            (*(void (**)(char *, uint64_t, uint64_t))(*(void *)(v67 - 8) + 16))(v56, v57, v67);
            swift_storeEnumTagMultiPayload(v56, v106, 2);
            break;
          case 3u:
            uint64_t v102 = *(void *)v57;
            char v68 = *(unsigned char *)(v57 + 8);
            outlined copy of Result<_DataTable, Error>(*(void *)v57, v68);
            *(void *)uint64_t v56 = v102;
            v56[8] = v68;
            *((void *)v56 + 2) = *(void *)(v57 + 16);
            uint64_t v69 = *(void *)(v57 + 24);
            *((void *)v56 + 3) = v69;
            *((void *)v56 + 4) = *(void *)(v57 + 32);
            uint64_t v70 = *(void *)(v57 + 40);
            *((void *)v56 + 5) = v70;
            *((void *)v56 + 6) = *(void *)(v57 + 48);
            uint64_t v71 = *(void *)(v57 + 56);
            *((void *)v56 + 7) = v71;
            swift_bridgeObjectRetain(v69);
            swift_bridgeObjectRetain(v70);
            swift_bridgeObjectRetain(v71);
            swift_storeEnumTagMultiPayload(v56, v106, 3);
            break;
          case 4u:
            uint64_t v103 = *(void *)v57;
            char v72 = *(unsigned char *)(v57 + 8);
            outlined copy of Result<_DataTable, Error>(*(void *)v57, v72);
            *(void *)uint64_t v56 = v103;
            v56[8] = v72;
            *((void *)v56 + 2) = *(void *)(v57 + 16);
            uint64_t v73 = *(void *)(v57 + 24);
            *((void *)v56 + 3) = v73;
            *((void *)v56 + 4) = *(void *)(v57 + 32);
            uint64_t v74 = *(void *)(v57 + 40);
            *((void *)v56 + 5) = v74;
            *((void *)v56 + 6) = *(void *)(v57 + 48);
            uint64_t v104 = *(void *)(v57 + 56);
            *((void *)v56 + 7) = v104;
            *((void *)v56 + 8) = *(void *)(v57 + 64);
            uint64_t v75 = *(void *)(v57 + 72);
            *((void *)v56 + 9) = v75;
            swift_bridgeObjectRetain(v73);
            swift_bridgeObjectRetain(v74);
            swift_bridgeObjectRetain(v104);
            swift_bridgeObjectRetain(v75);
            swift_storeEnumTagMultiPayload(v56, v106, 4);
            break;
          case 5u:
            uint64_t v76 = type metadata accessor for DataFrame(0);
            (*(void (**)(char *, uint64_t, uint64_t))(*(void *)(v76 - 8) + 16))(v56, v57, v76);
            uint64_t v77 = (int *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (DataFrame, sessionIdColumn: String, labelColumn: String, featureColumn: String));
            uint64_t v78 = v77[12];
            *(void *)&v56[v78] = *(void *)(v57 + v78);
            uint64_t v79 = *(void *)(v57 + v78 + 8);
            *(void *)&v56[v78 + 8] = v79;
            uint64_t v80 = v77[16];
            *(void *)&v56[v80] = *(void *)(v57 + v80);
            uint64_t v81 = *(void *)(v57 + v80 + 8);
            *(void *)&v56[v80 + 8] = v81;
            uint64_t v82 = v77[20];
            *(void *)&v56[v82] = *(void *)(v57 + v82);
            uint64_t v83 = *(void *)(v57 + v82 + 8);
            *(void *)&v56[v82 + 8] = v83;
            swift_bridgeObjectRetain(v79);
            swift_bridgeObjectRetain(v81);
            swift_bridgeObjectRetain(v83);
            swift_storeEnumTagMultiPayload(v56, v106, 5);
            break;
          case 6u:
            uint64_t v84 = type metadata accessor for DataFrame(0);
            (*(void (**)(char *, uint64_t, uint64_t))(*(void *)(v84 - 8) + 16))(v56, v57, v84);
            uint64_t v85 = (int *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (DataFrame, videoColumn: String, labelColumn: String, startTimeColumn: String?, endTimeColumn: String?));
            uint64_t v86 = v85[12];
            *(void *)&v56[v86] = *(void *)(v57 + v86);
            uint64_t v87 = *(void *)(v57 + v86 + 8);
            *(void *)&v56[v86 + 8] = v87;
            uint64_t v88 = v85[16];
            *(void *)&v56[v88] = *(void *)(v57 + v88);
            uint64_t v89 = *(void *)(v57 + v88 + 8);
            *(void *)&v56[v88 + 8] = v89;
            uint64_t v90 = v85[20];
            *(void *)&v56[v90] = *(void *)(v57 + v90);
            uint64_t v105 = *(void *)(v57 + v90 + 8);
            *(void *)&v56[v90 + 8] = v105;
            uint64_t v91 = v85[24];
            *(void *)&v56[v91] = *(void *)(v57 + v91);
            uint64_t v92 = *(void *)(v57 + v91 + 8);
            *(void *)&v56[v91 + 8] = v92;
            swift_bridgeObjectRetain(v87);
            swift_bridgeObjectRetain(v89);
            swift_bridgeObjectRetain(v105);
            swift_bridgeObjectRetain(v92);
            swift_storeEnumTagMultiPayload(v56, v106, 6);
            break;
          case 7u:
            JUMPOUT(0x7957CLL);
        }
        swift_storeEnumTagMultiPayload(v56, v99, 1);
        *(uint64_t *)((char *)v4 + v98[6]) = *(void *)(a2 + v98[6]);
        *(uint64_t *)((char *)v4 + v98[7]) = *(void *)(a2 + v98[7]);
        *(uint64_t *)((char *)v4 + v98[8]) = *(void *)(a2 + v98[8]);
        *(uint64_t *)((char *)v4 + v98[9]) = *(void *)(a2 + v98[9]);
        *(uint64_t *)((char *)v4 + v98[10]) = *(void *)(a2 + v98[10]);
        break;
    }
  }
  return v4;
}

uint64_t destroy for MLHandActionClassifier.PersistentParameters(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = a2;
  uint64_t v4 = type metadata accessor for MLHandActionClassifier.DataSource(0);
  switch(swift_getEnumCaseMultiPayload(a1, v4))
  {
    case 0u:
      uint64_t v6 = type metadata accessor for URL(0);
      uint64_t v7 = *(void (**)(uint64_t, uint64_t))(*(void *)(v6 - 8) + 8);
      v7(a1, v6);
      uint64_t v8 = (int *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (at: URL, annotationFile: URL, videoColumn: String, labelColumn: String, startTimeColumn: String?, endTimeColumn: String?));
      v7(a1 + v8[12], v6);
      uint64_t v2 = a2;
      swift_bridgeObjectRelease(*(void *)(a1 + v8[16] + 8));
      swift_bridgeObjectRelease(*(void *)(a1 + v8[20] + 8));
      swift_bridgeObjectRelease(*(void *)(a1 + v8[24] + 8));
      uint64_t v9 = v8[28];
      goto LABEL_8;
    case 1u:
    case 2u:
      uint64_t v5 = type metadata accessor for URL(0);
      (*(void (**)(uint64_t, uint64_t))(*(void *)(v5 - 8) + 8))(a1, v5);
      break;
    case 3u:
      outlined consume of Result<_DataTable, Error>(*(void *)a1, *(_DWORD *)(a1 + 8));
      swift_bridgeObjectRelease(*(void *)(a1 + 24));
      swift_bridgeObjectRelease(*(void *)(a1 + 40));
      uint64_t v10 = *(void *)(a1 + 56);
      goto LABEL_9;
    case 4u:
      outlined consume of Result<_DataTable, Error>(*(void *)a1, *(_DWORD *)(a1 + 8));
      swift_bridgeObjectRelease(*(void *)(a1 + 24));
      swift_bridgeObjectRelease(*(void *)(a1 + 40));
      swift_bridgeObjectRelease(*(void *)(a1 + 56));
      uint64_t v10 = *(void *)(a1 + 72);
      goto LABEL_9;
    case 5u:
      uint64_t v11 = type metadata accessor for DataFrame(0);
      (*(void (**)(uint64_t, uint64_t))(*(void *)(v11 - 8) + 8))(a1, v11);
      uint64_t v12 = (int *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (DataFrame, sessionIdColumn: String, labelColumn: String, featureColumn: String));
      swift_bridgeObjectRelease(*(void *)(a1 + v12[12] + 8));
      swift_bridgeObjectRelease(*(void *)(a1 + v12[16] + 8));
      uint64_t v9 = v12[20];
      goto LABEL_8;
    case 6u:
      uint64_t v13 = type metadata accessor for DataFrame(0);
      (*(void (**)(uint64_t, uint64_t))(*(void *)(v13 - 8) + 8))(a1, v13);
      uint64_t v14 = (int *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (DataFrame, videoColumn: String, labelColumn: String, startTimeColumn: String?, endTimeColumn: String?));
      swift_bridgeObjectRelease(*(void *)(a1 + v14[12] + 8));
      swift_bridgeObjectRelease(*(void *)(a1 + v14[16] + 8));
      swift_bridgeObjectRelease(*(void *)(a1 + v14[20] + 8));
      uint64_t v9 = v14[24];
LABEL_8:
      uint64_t v10 = *(void *)(a1 + v9 + 8);
LABEL_9:
      swift_bridgeObjectRelease(v10);
      break;
    default:
      break;
  }
  uint64_t v15 = *(int *)(v2 + 20) + a1;
  uint64_t v16 = type metadata accessor for MLHandActionClassifier.ModelParameters.ValidationData(0);
  uint64_t result = swift_getEnumCaseMultiPayload(v15, v16);
  if (result == 1)
  {
    uint64_t result = swift_getEnumCaseMultiPayload(v15, v4);
    switch((int)result)
    {
      case 0:
        uint64_t v19 = type metadata accessor for URL(0);
        uint64_t v20 = *(void (**)(uint64_t, uint64_t))(*(void *)(v19 - 8) + 8);
        v20(v15, v19);
        uint64_t v21 = (int *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (at: URL, annotationFile: URL, videoColumn: String, labelColumn: String, startTimeColumn: String?, endTimeColumn: String?));
        v20(v15 + v21[12], v19);
        swift_bridgeObjectRelease(*(void *)(v15 + v21[16] + 8));
        swift_bridgeObjectRelease(*(void *)(v15 + v21[20] + 8));
        swift_bridgeObjectRelease(*(void *)(v15 + v21[24] + 8));
        uint64_t v22 = v21[28];
        goto LABEL_19;
      case 1:
      case 2:
        uint64_t v18 = type metadata accessor for URL(0);
        return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v18 - 8) + 8))(v15, v18);
      case 3:
        outlined consume of Result<_DataTable, Error>(*(void *)v15, *(_DWORD *)(v15 + 8));
        swift_bridgeObjectRelease(*(void *)(v15 + 24));
        swift_bridgeObjectRelease(*(void *)(v15 + 40));
        return swift_bridgeObjectRelease(*(void *)(v15 + 56));
      case 4:
        outlined consume of Result<_DataTable, Error>(*(void *)v15, *(_DWORD *)(v15 + 8));
        swift_bridgeObjectRelease(*(void *)(v15 + 24));
        swift_bridgeObjectRelease(*(void *)(v15 + 40));
        swift_bridgeObjectRelease(*(void *)(v15 + 56));
        return swift_bridgeObjectRelease(*(void *)(v15 + 72));
      case 5:
        uint64_t v23 = type metadata accessor for DataFrame(0);
        (*(void (**)(uint64_t, uint64_t))(*(void *)(v23 - 8) + 8))(v15, v23);
        uint64_t v24 = (int *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (DataFrame, sessionIdColumn: String, labelColumn: String, featureColumn: String));
        swift_bridgeObjectRelease(*(void *)(v15 + v24[12] + 8));
        swift_bridgeObjectRelease(*(void *)(v15 + v24[16] + 8));
        uint64_t v22 = v24[20];
        goto LABEL_19;
      case 6:
        uint64_t v25 = type metadata accessor for DataFrame(0);
        (*(void (**)(uint64_t, uint64_t))(*(void *)(v25 - 8) + 8))(v15, v25);
        char v26 = (int *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (DataFrame, videoColumn: String, labelColumn: String, startTimeColumn: String?, endTimeColumn: String?));
        swift_bridgeObjectRelease(*(void *)(v15 + v26[12] + 8));
        swift_bridgeObjectRelease(*(void *)(v15 + v26[16] + 8));
        swift_bridgeObjectRelease(*(void *)(v15 + v26[20] + 8));
        uint64_t v22 = v26[24];
LABEL_19:
        uint64_t result = swift_bridgeObjectRelease(*(void *)(v15 + v22 + 8));
        break;
      default:
        return result;
    }
  }
  return result;
}

#error "7998E: stack frame is too big (funcsize=0)"

void *assignWithCopy for MLHandActionClassifier.PersistentParameters(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v5 = (void *)a1;
  if (a1 != a2)
  {
    outlined destroy of MLActivityClassifier.ModelParameters(a1, type metadata accessor for MLHandActionClassifier.DataSource);
    uint64_t v6 = type metadata accessor for MLHandActionClassifier.DataSource(0);
    uint64_t v84 = v6;
    switch(swift_getEnumCaseMultiPayload(a2, v6))
    {
      case 0u:
        uint64_t v7 = type metadata accessor for URL(0);
        uint64_t v90 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 16);
        v90(a1, a2, v7);
        uint64_t v8 = (int *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (at: URL, annotationFile: URL, videoColumn: String, labelColumn: String, startTimeColumn: String?, endTimeColumn: String?));
        v90(a1 + v8[12], a2 + v8[12], v7);
        uint64_t v9 = v8[16];
        *(void *)(a1 + v9) = *(void *)(a2 + v9);
        uint64_t v10 = *(void *)(a2 + v9 + 8);
        *(void *)((char *)v5 + v9 + 8) = v10;
        uint64_t v11 = v8[20];
        *(void *)((char *)v5 + v11) = *(void *)(a2 + v11);
        uint64_t v91 = *(void *)(a2 + v11 + 8);
        *(void *)((char *)v5 + v11 + 8) = v91;
        uint64_t v12 = v8[24];
        *(void *)((char *)v5 + v12) = *(void *)(a2 + v12);
        uint64_t v13 = *(void *)(a2 + v12 + 8);
        *(void *)((char *)v5 + v12 + 8) = v13;
        uint64_t v14 = v8[28];
        *(void *)((char *)v5 + v14) = *(void *)(a2 + v14);
        uint64_t v15 = *(void *)(a2 + v14 + 8);
        *(void *)((char *)v5 + v14 + 8) = v15;
        swift_bridgeObjectRetain(v10);
        swift_bridgeObjectRetain(v91);
        swift_bridgeObjectRetain(v13);
        swift_bridgeObjectRetain(v15);
        a1 = (uint64_t)v5;
        uint64_t v16 = v84;
        uint64_t v17 = 0;
        goto LABEL_12;
      case 1u:
        uint64_t v18 = type metadata accessor for URL(0);
        (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v18 - 8) + 16))(a1, a2, v18);
        uint64_t v78 = 1;
        goto LABEL_6;
      case 2u:
        uint64_t v19 = type metadata accessor for URL(0);
        (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v19 - 8) + 16))(a1, a2, v19);
        uint64_t v78 = 2;
LABEL_6:
        uint64_t v17 = v78;
        uint64_t v16 = v6;
        goto LABEL_12;
      case 3u:
        uint64_t v20 = *(void *)a2;
        char v21 = *(unsigned char *)(a2 + 8);
        outlined copy of Result<_DataTable, Error>(*(void *)a2, v21);
        *(void *)a1 = v20;
        *(unsigned char *)(a1 + 8) = v21;
        *(void *)(a1 + 16) = *(void *)(a2 + 16);
        uint64_t v22 = *(void *)(a2 + 24);
        v5[3] = v22;
        v5[4] = *(void *)(a2 + 32);
        uint64_t v23 = *(void *)(a2 + 40);
        v5[5] = v23;
        v5[6] = *(void *)(a2 + 48);
        uint64_t v24 = *(void *)(a2 + 56);
        v5[7] = v24;
        swift_bridgeObjectRetain(v22);
        swift_bridgeObjectRetain(v23);
        swift_bridgeObjectRetain(v24);
        uint64_t v79 = 3;
        goto LABEL_11;
      case 4u:
        uint64_t v25 = *(void *)a2;
        char v26 = *(unsigned char *)(a2 + 8);
        outlined copy of Result<_DataTable, Error>(*(void *)a2, v26);
        *(void *)a1 = v25;
        *(unsigned char *)(a1 + 8) = v26;
        *(void *)(a1 + 16) = *(void *)(a2 + 16);
        uint64_t v27 = *(void *)(a2 + 24);
        v5[3] = v27;
        v5[4] = *(void *)(a2 + 32);
        uint64_t v28 = *(void *)(a2 + 40);
        v5[5] = v28;
        v5[6] = *(void *)(a2 + 48);
        uint64_t v29 = *(void *)(a2 + 56);
        v5[7] = v29;
        v5[8] = *(void *)(a2 + 64);
        uint64_t v92 = *(void *)(a2 + 72);
        v5[9] = v92;
        swift_bridgeObjectRetain(v27);
        swift_bridgeObjectRetain(v28);
        swift_bridgeObjectRetain(v29);
        swift_bridgeObjectRetain(v92);
        uint64_t v79 = 4;
        goto LABEL_11;
      case 5u:
        uint64_t v30 = type metadata accessor for DataFrame(0);
        (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v30 - 8) + 16))(a1, a2, v30);
        char v31 = (int *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (DataFrame, sessionIdColumn: String, labelColumn: String, featureColumn: String));
        uint64_t v32 = v31[12];
        *(void *)(a1 + v32) = *(void *)(a2 + v32);
        uint64_t v33 = *(void *)(a2 + v32 + 8);
        *(void *)((char *)v5 + v32 + 8) = v33;
        uint64_t v34 = v31[16];
        *(void *)((char *)v5 + v34) = *(void *)(a2 + v34);
        uint64_t v35 = *(void *)(a2 + v34 + 8);
        *(void *)((char *)v5 + v34 + 8) = v35;
        uint64_t v36 = v31[20];
        *(void *)((char *)v5 + v36) = *(void *)(a2 + v36);
        uint64_t v37 = *(void *)(a2 + v36 + 8);
        *(void *)((char *)v5 + v36 + 8) = v37;
        swift_bridgeObjectRetain(v33);
        swift_bridgeObjectRetain(v35);
        swift_bridgeObjectRetain(v37);
        uint64_t v79 = 5;
        goto LABEL_11;
      case 6u:
        uint64_t v38 = type metadata accessor for DataFrame(0);
        (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v38 - 8) + 16))(a1, a2, v38);
        uint64_t v39 = (int *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (DataFrame, videoColumn: String, labelColumn: String, startTimeColumn: String?, endTimeColumn: String?));
        uint64_t v40 = v39[12];
        *(void *)(a1 + v40) = *(void *)(a2 + v40);
        uint64_t v41 = *(void *)(a2 + v40 + 8);
        *(void *)((char *)v5 + v40 + 8) = v41;
        uint64_t v42 = v39[16];
        *(void *)((char *)v5 + v42) = *(void *)(a2 + v42);
        uint64_t v93 = *(void *)(a2 + v42 + 8);
        *(void *)((char *)v5 + v42 + 8) = v93;
        uint64_t v43 = v39[20];
        *(void *)((char *)v5 + v43) = *(void *)(a2 + v43);
        uint64_t v44 = *(void *)(a2 + v43 + 8);
        *(void *)((char *)v5 + v43 + 8) = v44;
        uint64_t v45 = v39[24];
        *(void *)((char *)v5 + v45) = *(void *)(a2 + v45);
        uint64_t v46 = *(void *)(a2 + v45 + 8);
        *(void *)((char *)v5 + v45 + 8) = v46;
        swift_bridgeObjectRetain(v41);
        swift_bridgeObjectRetain(v93);
        swift_bridgeObjectRetain(v44);
        swift_bridgeObjectRetain(v46);
        uint64_t v79 = 6;
LABEL_11:
        uint64_t v17 = v79;
        a1 = (uint64_t)v5;
        uint64_t v16 = v84;
LABEL_12:
        swift_storeEnumTagMultiPayload(a1, v16, v17);
        uint64_t v94 = a3;
        uint64_t v47 = a3[5];
        uint64_t v48 = (char *)v5 + v47;
        uint64_t v49 = a2 + v47;
        outlined destroy of MLActivityClassifier.ModelParameters((uint64_t)v48, type metadata accessor for MLHandActionClassifier.ModelParameters.ValidationData);
        uint64_t v50 = type metadata accessor for MLHandActionClassifier.ModelParameters.ValidationData(0);
        if (swift_getEnumCaseMultiPayload(v49, v50) == 1)
        {
          uint64_t v80 = v50;
          unsigned int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload(v49, v84);
          switch(EnumCaseMultiPayload)
          {
            case 0u:
              uint64_t v85 = type metadata accessor for URL(0);
              uint64_t v82 = *(void (**)(char *, uint64_t, uint64_t))(*(void *)(v85 - 8) + 16);
              v82(v48, v49, v85);
              uint64_t v52 = (int *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (at: URL, annotationFile: URL, videoColumn: String, labelColumn: String, startTimeColumn: String?, endTimeColumn: String?));
              v82(&v48[v52[12]], v49 + v52[12], v85);
              uint64_t v53 = v52[16];
              *(void *)&v48[v53] = *(void *)(v49 + v53);
              uint64_t v54 = *(void *)(v49 + v53 + 8);
              *(void *)&v48[v53 + 8] = v54;
              uint64_t v55 = v52[20];
              *(void *)&v48[v55] = *(void *)(v49 + v55);
              uint64_t v86 = *(void *)(v49 + v55 + 8);
              *(void *)&v48[v55 + 8] = v86;
              uint64_t v56 = v52[24];
              *(void *)&v48[v56] = *(void *)(v49 + v56);
              uint64_t v83 = *(void *)(v49 + v56 + 8);
              *(void *)&v48[v56 + 8] = v83;
              uint64_t v57 = v52[28];
              *(void *)&v48[v57] = *(void *)(v49 + v57);
              uint64_t v58 = *(void *)(v49 + v57 + 8);
              *(void *)&v48[v57 + 8] = v58;
              swift_bridgeObjectRetain(v54);
              swift_bridgeObjectRetain(v86);
              char v59 = v83;
              goto LABEL_23;
            case 1u:
            case 2u:
              uint64_t v51 = type metadata accessor for URL(0);
              (*(void (**)(char *, uint64_t, uint64_t))(*(void *)(v51 - 8) + 16))(v48, v49, v51);
              goto LABEL_24;
            case 3u:
              uint64_t v87 = *(void *)v49;
              char v60 = *(unsigned char *)(v49 + 8);
              outlined copy of Result<_DataTable, Error>(*(void *)v49, v60);
              *(void *)uint64_t v48 = v87;
              v48[8] = v60;
              *((void *)v48 + 2) = *(void *)(v49 + 16);
              *((void *)v48 + 3) = *(void *)(v49 + 24);
              *((void *)v48 + 4) = *(void *)(v49 + 32);
              JUMPOUT(0x7A640);
            case 4u:
              uint64_t v88 = *(void *)v49;
              char v61 = *(unsigned char *)(v49 + 8);
              outlined copy of Result<_DataTable, Error>(*(void *)v49, v61);
              *(void *)uint64_t v48 = v88;
              v48[8] = v61;
              *((void *)v48 + 2) = *(void *)(v49 + 16);
              uint64_t v62 = *(void *)(v49 + 24);
              *((void *)v48 + 3) = v62;
              *((void *)v48 + 4) = *(void *)(v49 + 32);
              uint64_t v63 = *(void *)(v49 + 40);
              *((void *)v48 + 5) = v63;
              *((void *)v48 + 6) = *(void *)(v49 + 48);
              uint64_t v89 = *(void *)(v49 + 56);
              *((void *)v48 + 7) = v89;
              *((void *)v48 + 8) = *(void *)(v49 + 64);
              uint64_t v58 = *(void *)(v49 + 72);
              *((void *)v48 + 9) = v58;
              goto LABEL_22;
            case 5u:
              uint64_t v64 = type metadata accessor for DataFrame(0);
              (*(void (**)(char *, uint64_t, uint64_t))(*(void *)(v64 - 8) + 16))(v48, v49, v64);
              uint64_t v65 = (int *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (DataFrame, sessionIdColumn: String, labelColumn: String, featureColumn: String));
              uint64_t v66 = v65[12];
              *(void *)&v48[v66] = *(void *)(v49 + v66);
              uint64_t v67 = *(void *)(v49 + v66 + 8);
              *(void *)&v48[v66 + 8] = v67;
              uint64_t v68 = v65[16];
              *(void *)&v48[v68] = *(void *)(v49 + v68);
              uint64_t v69 = *(void *)(v49 + v68 + 8);
              *(void *)&v48[v68 + 8] = v69;
              uint64_t v70 = v65[20];
              *(void *)&v48[v70] = *(void *)(v49 + v70);
              uint64_t v58 = *(void *)(v49 + v70 + 8);
              *(void *)&v48[v70 + 8] = v58;
              swift_bridgeObjectRetain(v67);
              char v59 = v69;
              goto LABEL_23;
            case 6u:
              uint64_t v71 = type metadata accessor for DataFrame(0);
              (*(void (**)(char *, uint64_t, uint64_t))(*(void *)(v71 - 8) + 16))(v48, v49, v71);
              char v72 = (int *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (DataFrame, videoColumn: String, labelColumn: String, startTimeColumn: String?, endTimeColumn: String?));
              uint64_t v73 = v72[12];
              *(void *)&v48[v73] = *(void *)(v49 + v73);
              uint64_t v62 = *(void *)(v49 + v73 + 8);
              *(void *)&v48[v73 + 8] = v62;
              uint64_t v74 = v72[16];
              *(void *)&v48[v74] = *(void *)(v49 + v74);
              uint64_t v63 = *(void *)(v49 + v74 + 8);
              *(void *)&v48[v74 + 8] = v63;
              uint64_t v75 = v72[20];
              *(void *)&v48[v75] = *(void *)(v49 + v75);
              uint64_t v89 = *(void *)(v49 + v75 + 8);
              *(void *)&v48[v75 + 8] = v89;
              uint64_t v76 = v72[24];
              *(void *)&v48[v76] = *(void *)(v49 + v76);
              uint64_t v58 = *(void *)(v49 + v76 + 8);
              *(void *)&v48[v76 + 8] = v58;
LABEL_22:
              swift_bridgeObjectRetain(v62);
              swift_bridgeObjectRetain(v63);
              char v59 = v89;
LABEL_23:
              swift_bridgeObjectRetain(v59);
              swift_bridgeObjectRetain(v58);
LABEL_24:
              a3 = v94;
              swift_storeEnumTagMultiPayload(v48, v84, EnumCaseMultiPayload);
              swift_storeEnumTagMultiPayload(v48, v80, 1);
              break;
            case 7u:
              JUMPOUT(0x7A878);
          }
        }
        else
        {
          memcpy(v48, (const void *)v49, *(void *)(*(void *)(v50 - 8) + 64));
          a3 = v94;
        }
        return result;
    }
  }
  *(void *)((char *)v5 + a3[6]) = *(void *)(a2 + a3[6]);
  *(void *)((char *)v5 + a3[7]) = *(void *)(a2 + a3[7]);
  *(void *)((char *)v5 + a3[8]) = *(void *)(a2 + a3[8]);
  *(void *)((char *)v5 + a3[9]) = *(void *)(a2 + a3[9]);
  *(void *)((char *)v5 + a3[10]) = *(void *)(a2 + a3[10]);
  return v5;
}

char *initializeWithTake for MLHandActionClassifier.PersistentParameters(char *__dst, char *__src, int *a3)
{
  uint64_t v6 = type metadata accessor for MLHandActionClassifier.DataSource(0);
  uint64_t v38 = v6;
  switch(swift_getEnumCaseMultiPayload(__src, v6))
  {
    case 0u:
      uint64_t v7 = type metadata accessor for URL(0);
      uint64_t v39 = *(void (**)(char *, char *, uint64_t))(*(void *)(v7 - 8) + 32);
      v39(__dst, __src, v7);
      uint64_t v8 = (int *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (at: URL, annotationFile: URL, videoColumn: String, labelColumn: String, startTimeColumn: String?, endTimeColumn: String?));
      v39(&__dst[v8[12]], &__src[v8[12]], v7);
      *(_OWORD *)&__dst[v8[16]] = *(_OWORD *)&__src[v8[16]];
      *(_OWORD *)&__dst[v8[20]] = *(_OWORD *)&__src[v8[20]];
      *(_OWORD *)&__dst[v8[24]] = *(_OWORD *)&__src[v8[24]];
      *(_OWORD *)&__dst[v8[28]] = *(_OWORD *)&__src[v8[28]];
      uint64_t v9 = v38;
      uint64_t v10 = 0;
      goto LABEL_9;
    case 1u:
      uint64_t v11 = type metadata accessor for URL(0);
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v11 - 8) + 32))(__dst, __src, v11);
      uint64_t v33 = 1;
      goto LABEL_8;
    case 2u:
      uint64_t v12 = type metadata accessor for URL(0);
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v12 - 8) + 32))(__dst, __src, v12);
      uint64_t v33 = 2;
      goto LABEL_8;
    case 5u:
      uint64_t v13 = type metadata accessor for DataFrame(0);
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v13 - 8) + 32))(__dst, __src, v13);
      uint64_t v14 = (int *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (DataFrame, sessionIdColumn: String, labelColumn: String, featureColumn: String));
      *(_OWORD *)&__dst[v14[12]] = *(_OWORD *)&__src[v14[12]];
      *(_OWORD *)&__dst[v14[16]] = *(_OWORD *)&__src[v14[16]];
      *(_OWORD *)&__dst[v14[20]] = *(_OWORD *)&__src[v14[20]];
      uint64_t v33 = 5;
      goto LABEL_8;
    case 6u:
      uint64_t v15 = type metadata accessor for DataFrame(0);
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v15 - 8) + 32))(__dst, __src, v15);
      uint64_t v16 = (int *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (DataFrame, videoColumn: String, labelColumn: String, startTimeColumn: String?, endTimeColumn: String?));
      *(_OWORD *)&__dst[v16[12]] = *(_OWORD *)&__src[v16[12]];
      *(_OWORD *)&__dst[v16[16]] = *(_OWORD *)&__src[v16[16]];
      *(_OWORD *)&__dst[v16[20]] = *(_OWORD *)&__src[v16[20]];
      *(_OWORD *)&__dst[v16[24]] = *(_OWORD *)&__src[v16[24]];
      uint64_t v33 = 6;
LABEL_8:
      uint64_t v10 = v33;
      uint64_t v9 = v6;
LABEL_9:
      swift_storeEnumTagMultiPayload(__dst, v9, v10);
      break;
    default:
      memcpy(__dst, __src, *(void *)(*(void *)(v6 - 8) + 64));
      break;
  }
  uint64_t v40 = a3;
  uint64_t v17 = a3[5];
  uint64_t v18 = &__dst[v17];
  uint64_t v19 = &__src[v17];
  uint64_t v20 = type metadata accessor for MLHandActionClassifier.ModelParameters.ValidationData(0);
  if (swift_getEnumCaseMultiPayload(v19, v20) == 1)
  {
    uint64_t v35 = v20;
    switch(swift_getEnumCaseMultiPayload(v19, v38))
    {
      case 0u:
        uint64_t v37 = type metadata accessor for URL(0);
        uint64_t v36 = *(void (**)(char *, char *, uint64_t))(*(void *)(v37 - 8) + 32);
        v36(v18, v19, v37);
        char v21 = (int *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (at: URL, annotationFile: URL, videoColumn: String, labelColumn: String, startTimeColumn: String?, endTimeColumn: String?));
        v36(&v18[v21[12]], &v19[v21[12]], v37);
        *(_OWORD *)&v18[v21[16]] = *(_OWORD *)&v19[v21[16]];
        *(_OWORD *)&v18[v21[20]] = *(_OWORD *)&v19[v21[20]];
        *(_OWORD *)&v18[v21[24]] = *(_OWORD *)&v19[v21[24]];
        *(_OWORD *)&v18[v21[28]] = *(_OWORD *)&v19[v21[28]];
        uint64_t v22 = v18;
        uint64_t v23 = v38;
        uint64_t v24 = 0;
        goto LABEL_20;
      case 1u:
        uint64_t v26 = type metadata accessor for URL(0);
        (*(void (**)(char *, char *, uint64_t))(*(void *)(v26 - 8) + 32))(v18, v19, v26);
        uint64_t v34 = 1;
        goto LABEL_19;
      case 2u:
        uint64_t v27 = type metadata accessor for URL(0);
        (*(void (**)(char *, char *, uint64_t))(*(void *)(v27 - 8) + 32))(v18, v19, v27);
        uint64_t v34 = 2;
        goto LABEL_19;
      case 5u:
        uint64_t v28 = type metadata accessor for DataFrame(0);
        (*(void (**)(char *, char *, uint64_t))(*(void *)(v28 - 8) + 32))(v18, v19, v28);
        uint64_t v29 = (int *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (DataFrame, sessionIdColumn: String, labelColumn: String, featureColumn: String));
        *(_OWORD *)&v18[v29[12]] = *(_OWORD *)&v19[v29[12]];
        *(_OWORD *)&v18[v29[16]] = *(_OWORD *)&v19[v29[16]];
        *(_OWORD *)&v18[v29[20]] = *(_OWORD *)&v19[v29[20]];
        uint64_t v34 = 5;
        goto LABEL_19;
      case 6u:
        uint64_t v30 = type metadata accessor for DataFrame(0);
        (*(void (**)(char *, char *, uint64_t))(*(void *)(v30 - 8) + 32))(v18, v19, v30);
        char v31 = (int *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (DataFrame, videoColumn: String, labelColumn: String, startTimeColumn: String?, endTimeColumn: String?));
        *(_OWORD *)&v18[v31[12]] = *(_OWORD *)&v19[v31[12]];
        *(_OWORD *)&v18[v31[16]] = *(_OWORD *)&v19[v31[16]];
        *(_OWORD *)&v18[v31[20]] = *(_OWORD *)&v19[v31[20]];
        *(_OWORD *)&v18[v31[24]] = *(_OWORD *)&v19[v31[24]];
        uint64_t v34 = 6;
LABEL_19:
        uint64_t v24 = v34;
        uint64_t v22 = v18;
        uint64_t v23 = v38;
LABEL_20:
        swift_storeEnumTagMultiPayload(v22, v23, v24);
        break;
      default:
        memcpy(v18, v19, *(void *)(*(void *)(v38 - 8) + 64));
        break;
    }
    uint64_t v25 = v40;
    swift_storeEnumTagMultiPayload(v18, v35, 1);
  }
  else
  {
    memcpy(v18, v19, *(void *)(*(void *)(v20 - 8) + 64));
    uint64_t v25 = v40;
  }
  *(void *)&__dst[v25[6]] = *(void *)&__src[v25[6]];
  *(void *)&__dst[v25[7]] = *(void *)&__src[v25[7]];
  *(void *)&__dst[v25[8]] = *(void *)&__src[v25[8]];
  *(void *)&__dst[v25[9]] = *(void *)&__src[v25[9]];
  *(void *)&__dst[v25[10]] = *(void *)&__src[v25[10]];
  return __dst;
}

char *assignWithTake for MLHandActionClassifier.PersistentParameters(char *__dst, char *__src, int *a3)
{
  if (__dst != __src)
  {
    outlined destroy of MLActivityClassifier.ModelParameters((uint64_t)__dst, type metadata accessor for MLHandActionClassifier.DataSource);
    uint64_t v6 = type metadata accessor for MLHandActionClassifier.DataSource(0);
    uint64_t v38 = v6;
    switch(swift_getEnumCaseMultiPayload(__src, v6))
    {
      case 0u:
        uint64_t v7 = type metadata accessor for URL(0);
        uint64_t v39 = *(void (**)(char *, char *, uint64_t))(*(void *)(v7 - 8) + 32);
        v39(__dst, __src, v7);
        uint64_t v8 = (int *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (at: URL, annotationFile: URL, videoColumn: String, labelColumn: String, startTimeColumn: String?, endTimeColumn: String?));
        v39(&__dst[v8[12]], &__src[v8[12]], v7);
        *(_OWORD *)&__dst[v8[16]] = *(_OWORD *)&__src[v8[16]];
        *(_OWORD *)&__dst[v8[20]] = *(_OWORD *)&__src[v8[20]];
        *(_OWORD *)&__dst[v8[24]] = *(_OWORD *)&__src[v8[24]];
        *(_OWORD *)&__dst[v8[28]] = *(_OWORD *)&__src[v8[28]];
        uint64_t v9 = v38;
        uint64_t v10 = 0;
        goto LABEL_10;
      case 1u:
        uint64_t v11 = type metadata accessor for URL(0);
        (*(void (**)(char *, char *, uint64_t))(*(void *)(v11 - 8) + 32))(__dst, __src, v11);
        uint64_t v33 = 1;
        goto LABEL_9;
      case 2u:
        uint64_t v12 = type metadata accessor for URL(0);
        (*(void (**)(char *, char *, uint64_t))(*(void *)(v12 - 8) + 32))(__dst, __src, v12);
        uint64_t v33 = 2;
        goto LABEL_9;
      case 5u:
        uint64_t v13 = type metadata accessor for DataFrame(0);
        (*(void (**)(char *, char *, uint64_t))(*(void *)(v13 - 8) + 32))(__dst, __src, v13);
        uint64_t v14 = (int *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (DataFrame, sessionIdColumn: String, labelColumn: String, featureColumn: String));
        *(_OWORD *)&__dst[v14[12]] = *(_OWORD *)&__src[v14[12]];
        *(_OWORD *)&__dst[v14[16]] = *(_OWORD *)&__src[v14[16]];
        *(_OWORD *)&__dst[v14[20]] = *(_OWORD *)&__src[v14[20]];
        uint64_t v33 = 5;
        goto LABEL_9;
      case 6u:
        uint64_t v15 = type metadata accessor for DataFrame(0);
        (*(void (**)(char *, char *, uint64_t))(*(void *)(v15 - 8) + 32))(__dst, __src, v15);
        uint64_t v16 = (int *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (DataFrame, videoColumn: String, labelColumn: String, startTimeColumn: String?, endTimeColumn: String?));
        *(_OWORD *)&__dst[v16[12]] = *(_OWORD *)&__src[v16[12]];
        *(_OWORD *)&__dst[v16[16]] = *(_OWORD *)&__src[v16[16]];
        *(_OWORD *)&__dst[v16[20]] = *(_OWORD *)&__src[v16[20]];
        *(_OWORD *)&__dst[v16[24]] = *(_OWORD *)&__src[v16[24]];
        uint64_t v33 = 6;
LABEL_9:
        uint64_t v10 = v33;
        uint64_t v9 = v6;
LABEL_10:
        swift_storeEnumTagMultiPayload(__dst, v9, v10);
        break;
      default:
        memcpy(__dst, __src, *(void *)(*(void *)(v6 - 8) + 64));
        break;
    }
    uint64_t v40 = a3;
    uint64_t v17 = a3[5];
    uint64_t v18 = &__dst[v17];
    uint64_t v19 = &__src[v17];
    outlined destroy of MLActivityClassifier.ModelParameters((uint64_t)v18, type metadata accessor for MLHandActionClassifier.ModelParameters.ValidationData);
    uint64_t v20 = type metadata accessor for MLHandActionClassifier.ModelParameters.ValidationData(0);
    if (swift_getEnumCaseMultiPayload(v19, v20) == 1)
    {
      uint64_t v37 = v20;
      switch(swift_getEnumCaseMultiPayload(v19, v38))
      {
        case 0u:
          uint64_t v35 = type metadata accessor for URL(0);
          uint64_t v36 = *(void (**)(char *, char *, uint64_t))(*(void *)(v35 - 8) + 32);
          char v21 = v18;
          v36(v18, v19, v35);
          uint64_t v22 = (int *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (at: URL, annotationFile: URL, videoColumn: String, labelColumn: String, startTimeColumn: String?, endTimeColumn: String?));
          v36(&v21[v22[12]], &v19[v22[12]], v35);
          *(_OWORD *)&v21[v22[16]] = *(_OWORD *)&v19[v22[16]];
          *(_OWORD *)&v21[v22[20]] = *(_OWORD *)&v19[v22[20]];
          *(_OWORD *)&v21[v22[24]] = *(_OWORD *)&v19[v22[24]];
          *(_OWORD *)&v21[v22[28]] = *(_OWORD *)&v19[v22[28]];
          uint64_t v23 = v21;
          uint64_t v24 = v38;
          uint64_t v25 = 0;
          goto LABEL_21;
        case 1u:
          uint64_t v26 = type metadata accessor for URL(0);
          char v21 = v18;
          (*(void (**)(char *, char *, uint64_t))(*(void *)(v26 - 8) + 32))(v18, v19, v26);
          uint64_t v34 = 1;
          goto LABEL_20;
        case 2u:
          uint64_t v27 = type metadata accessor for URL(0);
          char v21 = v18;
          (*(void (**)(char *, char *, uint64_t))(*(void *)(v27 - 8) + 32))(v18, v19, v27);
          uint64_t v34 = 2;
          goto LABEL_20;
        case 5u:
          uint64_t v28 = type metadata accessor for DataFrame(0);
          (*(void (**)(char *, char *, uint64_t))(*(void *)(v28 - 8) + 32))(v18, v19, v28);
          uint64_t v29 = (int *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (DataFrame, sessionIdColumn: String, labelColumn: String, featureColumn: String));
          *(_OWORD *)&v18[v29[12]] = *(_OWORD *)&v19[v29[12]];
          *(_OWORD *)&v18[v29[16]] = *(_OWORD *)&v19[v29[16]];
          char v21 = v18;
          *(_OWORD *)&v18[v29[20]] = *(_OWORD *)&v19[v29[20]];
          uint64_t v34 = 5;
          goto LABEL_20;
        case 6u:
          uint64_t v30 = type metadata accessor for DataFrame(0);
          (*(void (**)(char *, char *, uint64_t))(*(void *)(v30 - 8) + 32))(v18, v19, v30);
          char v31 = (int *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (DataFrame, videoColumn: String, labelColumn: String, startTimeColumn: String?, endTimeColumn: String?));
          *(_OWORD *)&v18[v31[12]] = *(_OWORD *)&v19[v31[12]];
          *(_OWORD *)&v18[v31[16]] = *(_OWORD *)&v19[v31[16]];
          *(_OWORD *)&v18[v31[20]] = *(_OWORD *)&v19[v31[20]];
          char v21 = v18;
          *(_OWORD *)&v18[v31[24]] = *(_OWORD *)&v19[v31[24]];
          uint64_t v34 = 6;
LABEL_20:
          uint64_t v25 = v34;
          uint64_t v23 = v18;
          uint64_t v24 = v38;
LABEL_21:
          swift_storeEnumTagMultiPayload(v23, v24, v25);
          break;
        default:
          char v21 = v18;
          memcpy(v18, v19, *(void *)(*(void *)(v38 - 8) + 64));
          break;
      }
      a3 = v40;
      swift_storeEnumTagMultiPayload(v21, v37, 1);
    }
    else
    {
      memcpy(v18, v19, *(void *)(*(void *)(v20 - 8) + 64));
      a3 = v40;
    }
  }
  *(void *)&__dst[a3[6]] = *(void *)&__src[a3[6]];
  *(void *)&__dst[a3[7]] = *(void *)&__src[a3[7]];
  *(void *)&__dst[a3[8]] = *(void *)&__src[a3[8]];
  *(void *)&__dst[a3[9]] = *(void *)&__src[a3[9]];
  *(void *)&__dst[a3[10]] = *(void *)&__src[a3[10]];
  return __dst;
}

uint64_t getEnumTagSinglePayload for MLHandActionClassifier.PersistentParameters(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_7B1FD);
}

uint64_t sub_7B1FD(uint64_t a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4 = a1;
  uint64_t v5 = type metadata accessor for MLHandActionClassifier.DataSource(0);
  if (*(_DWORD *)(*(void *)(v5 - 8) + 84) != a2)
  {
    uint64_t v5 = type metadata accessor for MLHandActionClassifier.ModelParameters.ValidationData(0);
    uint64_t v4 = *(int *)(a3 + 20) + a1;
  }
  return __swift_getEnumTagSinglePayload(v4, a2, v5);
}

uint64_t storeEnumTagSinglePayload for MLHandActionClassifier.PersistentParameters(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_7B264);
}

uint64_t sub_7B264(uint64_t a1, unsigned int a2, int a3, uint64_t a4)
{
  uint64_t v6 = a1;
  uint64_t v7 = type metadata accessor for MLHandActionClassifier.DataSource(0);
  if (*(_DWORD *)(*(void *)(v7 - 8) + 84) != a3)
  {
    uint64_t v7 = type metadata accessor for MLHandActionClassifier.ModelParameters.ValidationData(0);
    uint64_t v6 = *(int *)(a4 + 20) + a1;
  }
  return __swift_storeEnumTagSinglePayload(v6, a2, a2, v7);
}

uint64_t type metadata accessor for MLHandActionClassifier.PersistentParameters(uint64_t a1)
{
  uint64_t result = type metadata singleton initialization cache for MLHandActionClassifier.PersistentParameters;
  if (!type metadata singleton initialization cache for MLHandActionClassifier.PersistentParameters) {
    return swift_getSingletonMetadata(a1, &nominal type descriptor for MLHandActionClassifier.PersistentParameters);
  }
  return result;
}

uint64_t type metadata completion function for MLHandActionClassifier.PersistentParameters(uint64_t a1)
{
  uint64_t result = type metadata accessor for MLHandActionClassifier.DataSource(319);
  if (v2 <= 0x3F)
  {
    v4[0] = *(void *)(result - 8) + 64;
    uint64_t result = type metadata accessor for MLHandActionClassifier.ModelParameters.ValidationData(319);
    if (v3 <= 0x3F)
    {
      v4[1] = *(void *)(result - 8) + 64;
      v4[2] = (char *)&value witness table for Builtin.Int64 + 64;
      v4[3] = (char *)&value witness table for Builtin.Int64 + 64;
      v4[4] = (char *)&value witness table for Builtin.Int64 + 64;
      v4[5] = (char *)&value witness table for Builtin.Int64 + 64;
      v4[6] = (char *)&value witness table for Builtin.Int64 + 64;
      v4[7] = (char *)&value witness table for () + 64;
      swift_initStructMetadata(a1, 256, 8, v4, a1 + 16);
      return 0;
    }
  }
  return result;
}

NSURL *MLHandActionClassifier.PersistentParameters.init(sessionDirectory:)(uint64_t *a1)
{
  uint64_t v174 = v2;
  char v171 = a1;
  uint64_t v3 = v1;
  int64_t v4 = *(void *)(*(void *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for MLHandActionClassifier.ModelParameters.ValidationData?)
                             - 8)
                 + 64);
  uint64_t v5 = alloca(v4);
  uint64_t v6 = alloca(v4);
  unint64_t v159 = &v143;
  uint64_t v154 = type metadata accessor for MLHandActionClassifier.ModelParameters.ValidationData(0);
  int64_t v7 = *(void *)(*(void *)(v154 - 8) + 64);
  uint64_t v8 = alloca(v7);
  uint64_t v9 = alloca(v7);
  uint64_t v147 = &v143;
  int64_t v10 = *(void *)(*(void *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for MLHandActionClassifier.DataSource?)
                              - 8)
                  + 64);
  uint64_t v11 = alloca(v10);
  uint64_t v12 = alloca(v10);
  uint64_t v158 = (uint64_t)&v143;
  uint64_t v152 = type metadata accessor for MLHandActionClassifier.DataSource(0);
  int64_t v13 = *(void *)(*(void *)(v152 - 8) + 64);
  uint64_t v14 = alloca(v13);
  uint64_t v15 = alloca(v13);
  uint64_t v143 = (uint64_t)&v143;
  uint64_t v16 = alloca(v13);
  uint64_t v17 = alloca(v13);
  uint64_t v160 = (uint64_t)&v143;
  uint64_t v145 = type metadata accessor for DataFrame(0);
  uint64_t v144 = *(void *)(v145 - 8);
  int64_t v18 = *(void *)(v144 + 64);
  uint64_t v19 = alloca(v18);
  uint64_t v20 = alloca(v18);
  unint64_t v146 = &v143;
  uint64_t v172 = type metadata accessor for URL(0);
  uint64_t v173 = *(void *)(v172 - 8);
  int64_t v21 = *(void *)(v173 + 64);
  uint64_t v22 = alloca(v21);
  uint64_t v23 = alloca(v21);
  uint64_t v153 = &v143;
  uint64_t v24 = alloca(v21);
  uint64_t v25 = alloca(v21);
  uint64_t v165 = &v143;
  uint64_t v26 = alloca(v21);
  uint64_t v27 = alloca(v21);
  v164 = &v143;
  uint64_t v28 = alloca(v21);
  uint64_t v29 = alloca(v21);
  uint64_t v30 = alloca(v21);
  char v31 = alloca(v21);
  uint64_t v32 = (int *)type metadata accessor for MLHandActionClassifier.PersistentParameters(0);
  uint64_t v33 = v3;
  uint64_t v155 = v32[6];
  *(void *)(v3 + v155) = 32;
  unint64_t v156 = v32[7];
  *(void *)(v3 + v156) = 80;
  uint64_t v157 = v32[8];
  *(void *)(v3 + v157) = 30;
  uint64_t v34 = v32[9];
  uint64_t v166 = v33;
  *(void *)(v33 + v34) = 0x403E000000000000;
  uint64_t v177 = &v143;
  URL.appendingPathComponent(_:)(0x69746164696C6176, 0xEE00617461446E6FLL);
  URL.appendingPathComponent(_:)(0xD000000000000010, "ObjectDetectorMetrics." + 0x8000000000000000);
  uint64_t v35 = v174;
  uint64_t v36 = Data.init(contentsOf:options:)(&v143, 0);
  uint64_t v174 = v35;
  if (v35)
  {
    uint64_t v38 = *(void (**)(uint64_t, uint64_t))(v173 + 8);
    uint64_t v39 = v172;
    v38((uint64_t)v171, v172);
    v38((uint64_t)&v143, v39);
    v38((uint64_t)v177, v39);
    return __stack_chk_guard;
  }
  uint64_t v148 = v34;
  id v161 = v32;
  uint64_t v41 = *(void (**)(uint64_t *, uint64_t))(v173 + 8);
  unint64_t v42 = v37;
  uint64_t v43 = v36;
  v41(&v143, v172);
  uint64_t v44 = objc_opt_self(NSPropertyListSerialization);
  uint64_t v169 = v43;
  unint64_t v168 = v42;
  Class isa = Data._bridgeToObjectiveC()().super.isa;
  id v182 = 0;
  id v46 = [v44 propertyListWithData:isa options:0 format:0 error:&v182];
  id v47 = v46;

  id v48 = v182;
  if (!v47)
  {
    uint64_t v74 = v48;
    _convertNSErrorToError(_:)(v48);

    swift_willThrow(v74, "propertyListWithData:options:format:error:", v75, v76, v77, v78);
    outlined consume of Data._Representation(v169, v168);
    uint64_t v79 = v172;
    v41(v171, v172);
    v41(v177, v79);
    return __stack_chk_guard;
  }
  uint64_t v49 = (void (*)(uint64_t, uint64_t))v41;
  _bridgeAnyObjectToAny(_:)(v47);
  swift_unknownObjectRelease(v47);
  outlined init with copy of Any((uint64_t)v205, (uint64_t)&v182);
  uint64_t v162 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [String : Any]);
  char v50 = swift_dynamicCast(v204, &v182, (char *)&type metadata for Any + 8, v162, 6);
  uint64_t v51 = v177;
  if (!v50)
  {
    uint64_t v80 = lazy protocol witness table accessor for type MLCreateError and conformance MLCreateError();
    swift_allocError(&type metadata for MLCreateError, v80, 0, 0);
    *(void *)uint64_t v81 = 0xD000000000000037;
    *(void *)(v81 + 8) = "parameters.plist" + 0x8000000000000000;
    *(_OWORD *)(v81 + 16) = 0;
    *(_OWORD *)(v81 + 32) = 0;
    *(unsigned char *)(v81 + 48) = 0;
    swift_willThrow(&type metadata for MLCreateError, v80, v81, v82, v83, v84);
    outlined consume of Data._Representation(v169, v168);
    uint64_t v85 = v172;
    v49((uint64_t)v171, v172);
    __swift_destroy_boxed_opaque_existential_1Tm(v205);
    v49((uint64_t)v51, v85);
    return __stack_chk_guard;
  }
  int64_t v170 = (char *)&type metadata for Any + 8;
  v167 = v49;
  uint64_t v52 = v204[0];
  specialized Dictionary.subscript.getter(0x69735F6863746162, 0xEA0000000000657ALL, v204[0]);
  if (!v185)
  {
    swift_bridgeObjectRelease(v52);
    outlined destroy of AnyColumn?((uint64_t)&v182, &demangling cache variable for type metadata for Any?);
    uint64_t v53 = v51;
    goto LABEL_27;
  }
  uint64_t v175 = v52;
  uint64_t v53 = v51;
  if (!swift_dynamicCast(v204, &v182, v170, &type metadata for Int, 6)) {
    goto LABEL_22;
  }
  uint64_t v54 = v204[0];
  char v55 = v175;
  specialized Dictionary.subscript.getter(0x726574695F78616DLL, 0xEE00736E6F697461, v175);
  if (!v185)
  {
    swift_bridgeObjectRelease(v55);
    outlined destroy of AnyColumn?((uint64_t)&v182, &demangling cache variable for type metadata for Any?);
    goto LABEL_27;
  }
  if (!swift_dynamicCast(v204, &v182, v170, &type metadata for Int, 6))
  {
LABEL_22:
    swift_bridgeObjectRelease(v175);
LABEL_27:
    uint64_t v86 = lazy protocol witness table accessor for type MLCreateError and conformance MLCreateError();
    swift_allocError(&type metadata for MLCreateError, v86, 0, 0);
    *(void *)uint64_t v87 = 0xD00000000000003FLL;
    *(void *)(v87 + 8) = "labeled_directories" + 0x8000000000000000;
    *(_OWORD *)(v87 + 16) = 0;
    *(_OWORD *)(v87 + 32) = 0;
    *(unsigned char *)(v87 + 48) = 0;
    swift_willThrow(&type metadata for MLCreateError, v86, v87, v88, v89, v90);
    outlined consume of Data._Representation(v169, v168);
    uint64_t v91 = v172;
    uint64_t v92 = (void (*)(uint64_t *, uint64_t))v167;
    v167((uint64_t)v171, v172);
    __swift_destroy_boxed_opaque_existential_1Tm(v205);
    v92(v53, v91);
    return __stack_chk_guard;
  }
  uint64_t v56 = v204[0];
  char v57 = v175;
  specialized Dictionary.subscript.getter(0x6D6172665F6D756ELL, 0xEA00000000007365, v175);
  if (!v185) {
    goto LABEL_25;
  }
  if (!swift_dynamicCast(v204, &v182, v170, &type metadata for Int, 6))
  {
    swift_bridgeObjectRelease(v175);
    uint64_t v53 = v177;
    goto LABEL_27;
  }
  uint64_t v163 = v204[0];
  char v57 = v175;
  specialized Dictionary.subscript.getter(0xD000000000000014, (uint64_t)("Empty training input." + 0x8000000000000000), v175);
  if (!v185) {
    goto LABEL_25;
  }
  if (!swift_dynamicCast(v204, &v182, v170, &type metadata for Int, 6))
  {
LABEL_29:
    swift_bridgeObjectRelease(v175);
    goto LABEL_26;
  }
  uint64_t v149 = v204[0];
  char v57 = v175;
  specialized Dictionary.subscript.getter(0x7246746567726174, 0xEF65746152656D61, v175);
  if (!v185)
  {
LABEL_25:
    swift_bridgeObjectRelease(v57);
    outlined destroy of AnyColumn?((uint64_t)&v182, &demangling cache variable for type metadata for Any?);
LABEL_26:
    uint64_t v53 = v177;
    goto LABEL_27;
  }
  uint64_t v58 = v170;
  if (!swift_dynamicCast(v204, &v182, v170, &type metadata for Double, 6)) {
    goto LABEL_29;
  }
  uint64_t v150 = v204[0];
  uint64_t v59 = v166;
  *(void *)(v166 + v155) = v54;
  *(void *)(v59 + v156) = v56;
  *(void *)(v59 + v157) = v163;
  char v60 = v164;
  URL.appendingPathComponent(_:)(1635017060, 0xE400000000000000);
  char v61 = v175;
  specialized Dictionary.subscript.getter(0x676E696E69617274, 0xE800000000000000, v175);
  if (v204[3])
  {
    if (swift_dynamicCast(&v182, v204, v58, v162, 6))
    {
      uint64_t v62 = (uint64_t)v182;
      uint64_t v63 = v153;
      uint64_t v64 = v60;
      uint64_t v65 = v172;
      uint64_t v173 = *(void *)(v173 + 16);
      ((void (*)(uint64_t *, uint64_t *, uint64_t))v173)(v153, v64, v172);
      uint64_t v66 = (uint64_t)v63;
      uint64_t v67 = v158;
      MLHandActionClassifier.DataSource.init(dictionary:tableFile:)(v62, v66);
      if (__swift_getEnumTagSinglePayload(v67, 1, v152) == 1)
      {
        swift_bridgeObjectRelease(v61);
        outlined destroy of AnyColumn?(v67, &demangling cache variable for type metadata for MLHandActionClassifier.DataSource?);
        uint64_t v68 = lazy protocol witness table accessor for type MLCreateError and conformance MLCreateError();
        swift_allocError(&type metadata for MLCreateError, v68, 0, 0);
        *(void *)uint64_t v69 = 0xD000000000000035;
        *(void *)(v69 + 8) = "o load validation data." + 0x8000000000000000;
        *(_OWORD *)(v69 + 16) = 0;
        *(_OWORD *)(v69 + 32) = 0;
        *(unsigned char *)(v69 + 48) = 0;
        swift_willThrow(&type metadata for MLCreateError, v68, v69, v70, v71, v72);
        outlined consume of Data._Representation(v169, v168);
        uint64_t v73 = (void (*)(uint64_t *, uint64_t))v167;
        v167((uint64_t)v171, v65);
        v73(v164, v65);
        __swift_destroy_boxed_opaque_existential_1Tm(v205);
        v73(v177, v65);
        return __stack_chk_guard;
      }
      uint64_t v125 = v160;
      outlined init with take of MLClassifierMetrics(v67, v160, type metadata accessor for MLHandActionClassifier.DataSource);
      uint64_t v122 = v125;
      uint64_t v123 = v166;
      uint64_t v124 = v166;
      goto LABEL_44;
    }
  }
  else
  {
    outlined destroy of AnyColumn?((uint64_t)v204, &demangling cache variable for type metadata for Any?);
  }
  uint64_t v93 = v177;
  uint64_t v94 = v165;
  uint64_t v95 = v172;
  uint64_t v173 = *(void *)(v173 + 16);
  ((void (*)(uint64_t *, uint64_t *, uint64_t))v173)(v165, v60, v172);
  LOBYTE(v182) = 1;
  *(_DWORD *)((char *)&v182 + 1) = *(_DWORD *)v181;
  HIDWORD(v182) = *(_DWORD *)&v181[3];
  uint64_t v183 = 44;
  unint64_t v184 = 0xE100000000000000;
  uint64_t v185 = 0;
  char v176 = 1;
  unint64_t v186 = 0xE000000000000000;
  uint64_t v187 = 92;
  unint64_t v188 = 0xE100000000000000;
  char v189 = 1;
  *(_DWORD *)uint64_t v190 = *(_DWORD *)v180;
  *(_DWORD *)&v190[3] = *(_DWORD *)&v180[3];
  uint64_t v191 = 34;
  unint64_t v192 = 0xE100000000000000;
  char v193 = 1;
  *(_DWORD *)&v194[3] = *(_DWORD *)&v179[3];
  *(_DWORD *)uint64_t v194 = *(_DWORD *)v179;
  uint64_t v195 = &outlined read-only object #0 of default argument 1 of MLDataTable.init(contentsOf:options:);
  uint64_t v196 = 10;
  unint64_t v197 = 0xE100000000000000;
  long long v198 = 0;
  char v199 = 1;
  *(_DWORD *)uint64_t v200 = *(_DWORD *)v178;
  *(_DWORD *)&v200[3] = *(_DWORD *)&v178[3];
  uint64_t v201 = 0;
  uint64_t v96 = v174;
  MLDataTable.init(contentsOf:options:)(v94, &v182);
  uint64_t v174 = v96;
  if (v96)
  {
    outlined consume of Data._Representation(v169, v168);
    swift_bridgeObjectRelease(v175);
    uint64_t v97 = (void (*)(uint64_t *, uint64_t))v167;
    v167((uint64_t)v171, v95);
    v97(v60, v95);
    __swift_destroy_boxed_opaque_existential_1Tm(v205);
    uint64_t v98 = v93;
LABEL_33:
    v97(v98, v95);
    return __stack_chk_guard;
  }
  id v182 = v202;
  LOBYTE(v183) = v203;
  uint64_t v99 = v146;
  DataFrame.init(_:)((uint64_t)&v182);
  uint64_t v100 = DataFrame.columns.getter(&v182, &v182);
  char v101 = v100;
  uint64_t v102 = v174;
  MLE23validateContainsColumns_7contextySaySSG_SStKFSSAA9fG54Vcfu_33_06ca46402338970f1b3e0a01942d815dAISSTf3nnnpk_nTf1cn_n = _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSay11TabularData9AnyColumnVG_SSs5NeverOTg504_s11d75Data0B5FrameV8CreateMLE23validateContainsColumns_7contextySaySSG_SStKFSSAA9fG54Vcfu_33_06ca46402338970f1b3e0a01942d815dAISSTf3nnnpk_nTf1cn_n(v100);
  uint64_t v174 = v102;
  swift_bridgeObjectRelease(v101);
  uint64_t v104 = 0x7472617473;
  char v105 = specialized Sequence<>.contains(_:)(0x7472617473, 0xE500000000000000, MLE23validateContainsColumns_7contextySaySSG_SStKFSSAA9fG54Vcfu_33_06ca46402338970f1b3e0a01942d815dAISSTf3nnnpk_nTf1cn_n);
  swift_bridgeObjectRelease((_BYTE)MLE23validateContainsColumns_7contextySaySSG_SStKFSSAA9fG54Vcfu_33_06ca46402338970f1b3e0a01942d815dAISSTf3nnnpk_nTf1cn_n);
  if ((v105 & 1) == 0) {
    uint64_t v104 = 0;
  }
  uint64_t v155 = v104;
  unint64_t v106 = 0;
  if (v105) {
    unint64_t v106 = 0xE500000000000000;
  }
  unint64_t v156 = v106;
  uint64_t v107 = DataFrame.columns.getter(MLE23validateContainsColumns_7contextySaySSG_SStKFSSAA9fG54Vcfu_33_06ca46402338970f1b3e0a01942d815dAISSTf3nnnpk_nTf1cn_n, 0xE500000000000000);
  char v108 = v107;
  uint64_t v109 = v174;
  uint64_t v110 = _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSay11TabularData9AnyColumnVG_SSs5NeverOTg504_s11d75Data0B5FrameV8CreateMLE23validateContainsColumns_7contextySaySSG_SStKFSSAA9fG54Vcfu_33_06ca46402338970f1b3e0a01942d815dAISSTf3nnnpk_nTf1cn_n(v107);
  uint64_t v174 = v109;
  swift_bridgeObjectRelease(v108);
  uint64_t v111 = 6581861;
  char v112 = specialized Sequence<>.contains(_:)(6581861, 0xE300000000000000, v110);
  swift_bridgeObjectRelease((_BYTE)v110);
  unint64_t v113 = 0;
  if ((v112 & 1) == 0) {
    uint64_t v111 = 0;
  }
  uint64_t v157 = v111;
  if (v112) {
    unint64_t v113 = 0xE300000000000000;
  }
  uint64_t v165 = (uint64_t *)v113;
  uint64_t v114 = (int *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (DataFrame, videoColumn: String, labelColumn: String, startTimeColumn: String?, endTimeColumn: String?));
  uint64_t v151 = v114[12];
  uint64_t v163 = v114[16];
  uint64_t v160 = v114[20];
  uint64_t v158 = v114[24];
  uint64_t v115 = v143;
  uint64_t v116 = v145;
  uint64_t v117 = v144;
  (*(void (**)(uint64_t, uint64_t *, uint64_t))(v144 + 16))(v143, v99, v145);
  uint64_t v118 = v151;
  *(void *)(v115 + v151) = 0x7461506F65646976;
  *(void *)(v115 + v118 + 8) = 0xE900000000000068;
  (*(void (**)(uint64_t *, uint64_t))(v117 + 8))(v99, v116);
  uint64_t v119 = v163;
  *(void *)(v115 + v163) = 0x6C6562616CLL;
  *(void *)(v115 + v119 + 8) = 0xE500000000000000;
  uint64_t v120 = v160;
  *(void *)(v115 + v160) = v155;
  *(void *)(v115 + v120 + 8) = v156;
  uint64_t v121 = v158;
  *(void *)(v115 + v158) = v157;
  *(void *)(v115 + v121 + 8) = v165;
  swift_storeEnumTagMultiPayload(v115, v152, 6);
  uint64_t v122 = v115;
  uint64_t v123 = v166;
  uint64_t v124 = v166;
LABEL_44:
  outlined init with take of MLClassifierMetrics(v122, v124, type metadata accessor for MLHandActionClassifier.DataSource);
  specialized Dictionary.subscript.getter(0x69746164696C6176, 0xEA00000000006E6FLL, v175);
  if (!v185)
  {
    outlined destroy of AnyColumn?((uint64_t)&v182, &demangling cache variable for type metadata for Any?);
    goto LABEL_49;
  }
  if (!swift_dynamicCast(v204, &v182, v170, v162, 6))
  {
LABEL_49:
    long long v136 = v161;
    swift_storeEnumTagMultiPayload(v123 + v161[5], v154, 2);
    goto LABEL_50;
  }
  uint64_t v126 = v204[0];
  uint64_t v127 = (uint64_t)v153;
  ((void (*)(uint64_t *, uint64_t *, uint64_t))v173)(v153, v177, v172);
  uint64_t v128 = (uint64_t)v159;
  MLHandActionClassifier.ModelParameters.ValidationData.init(dictionary:tableFile:)(v126, v127);
  if (__swift_getEnumTagSinglePayload(v128, 1, v154) == 1)
  {
    swift_bridgeObjectRelease(v175);
    outlined destroy of AnyColumn?((uint64_t)v159, &demangling cache variable for type metadata for MLHandActionClassifier.ModelParameters.ValidationData?);
    uint64_t v129 = lazy protocol witness table accessor for type MLCreateError and conformance MLCreateError();
    uint64_t v173 = 0;
    uint64_t v130 = v129;
    swift_allocError(&type metadata for MLCreateError, v129, 0, 0);
    *(void *)uint64_t v131 = 0xD000000000000037;
    BOOL v135 = "ion Classification algorithm." + 0x8000000000000000;
    goto LABEL_56;
  }
  uint64_t v142 = (uint64_t)v147;
  outlined init with take of MLClassifierMetrics((uint64_t)v159, (uint64_t)v147, type metadata accessor for MLHandActionClassifier.ModelParameters.ValidationData);
  long long v136 = v161;
  uint64_t v123 = v166;
  outlined init with take of MLClassifierMetrics(v142, v166 + v161[5], type metadata accessor for MLHandActionClassifier.ModelParameters.ValidationData);
LABEL_50:
  *(void *)(v123 + v136[10]) = v149;
  *(void *)(v123 + v148) = v150;
  char v137 = v175;
  specialized Dictionary.subscript.getter(0x687469726F676C61, 0xE90000000000006DLL, v175);
  swift_bridgeObjectRelease(v137);
  if (v185)
  {
    if (swift_dynamicCast(v204, &v182, v170, v162, 6))
    {
      MLHandActionClassifier.ModelParameters.ModelAlgorithmType.init(dictionary:)(v204[0]);
      if ((_BYTE)v182 != 1)
      {
        outlined consume of Data._Representation(v169, v168);
        uint64_t v95 = v172;
        uint64_t v97 = (void (*)(uint64_t *, uint64_t))v167;
        v167((uint64_t)v171, v172);
        v97(v164, v95);
        __swift_destroy_boxed_opaque_existential_1Tm(v205);
        uint64_t v98 = v177;
        goto LABEL_33;
      }
    }
  }
  else
  {
    outlined destroy of AnyColumn?((uint64_t)&v182, &demangling cache variable for type metadata for Any?);
  }
  uint64_t v130 = lazy protocol witness table accessor for type MLCreateError and conformance MLCreateError();
  swift_allocError(&type metadata for MLCreateError, v130, 0, 0);
  *(void *)uint64_t v131 = 0xD00000000000002DLL;
  BOOL v135 = "is missing training parameters." + 0x8000000000000000;
  LOBYTE(v132) = 1;
  uint64_t v173 = v132;
LABEL_56:
  uint64_t v138 = v172;
  BOOL v139 = v177;
  *(void *)(v131 + 8) = v135;
  *(_OWORD *)(v131 + 16) = 0;
  *(_OWORD *)(v131 + 32) = 0;
  *(unsigned char *)(v131 + 48) = 0;
  swift_willThrow(&type metadata for MLCreateError, v130, v131, v132, v133, v134);
  outlined consume of Data._Representation(v169, v168);
  unsigned int v140 = (void (*)(uint64_t *, uint64_t))v167;
  v167((uint64_t)v171, v138);
  v140(v164, v138);
  __swift_destroy_boxed_opaque_existential_1Tm(v205);
  v140(v139, v138);
  uint64_t v141 = v166;
  outlined destroy of MLActivityClassifier.ModelParameters(v166, type metadata accessor for MLHandActionClassifier.DataSource);
  if ((_BYTE)v173) {
    outlined destroy of MLActivityClassifier.ModelParameters(v161[5] + v141, type metadata accessor for MLHandActionClassifier.ModelParameters.ValidationData);
  }
  return __stack_chk_guard;
}

uint64_t MLHandActionClassifier.DataSource.init(dictionary:tableFile:)(uint64_t a1, uint64_t a2)
{
  uint64_t v111 = a2;
  uint64_t v4 = v2;
  uint64_t v110 = type metadata accessor for URL(0);
  uint64_t v112 = *(void *)(v110 - 8);
  int64_t v5 = *(void *)(v112 + 64);
  uint64_t v6 = alloca(v5);
  int64_t v7 = alloca(v5);
  uint64_t v8 = alloca(v5);
  uint64_t v9 = alloca(v5);
  uint64_t v10 = type metadata accessor for MLHandActionClassifier.DataSource(0);
  int64_t v11 = *(void *)(*(void *)(v10 - 8) + 64);
  uint64_t v12 = alloca(v11);
  int64_t v13 = alloca(v11);
  uint64_t v14 = alloca(v11);
  uint64_t v15 = alloca(v11);
  if (!*(void *)(a1 + 16))
  {
    swift_bridgeObjectRelease(a1);
LABEL_37:
    uint64_t v32 = v111;
    uint64_t v33 = v110;
    uint64_t v31 = v112;
    goto LABEL_38;
  }
  char v105 = v66;
  uint64_t v100 = v66;
  uint64_t v114 = v10;
  unint64_t v16 = specialized __RawDictionaryStorage.find<A>(_:)(1684957547, 0xE400000000000000);
  if ((v17 & 1) == 0) {
    goto LABEL_35;
  }
  uint64_t v108 = v4;
  outlined init with copy of Any(*(void *)(a1 + 56) + 32 * v16, (uint64_t)&v70);
  uint64_t v109 = (char *)&type metadata for Any + 8;
  if (!swift_dynamicCast(&v113, &v70, (char *)&type metadata for Any + 8, &type metadata for String, 6))
  {
    swift_bridgeObjectRelease(a1);
    uint64_t v4 = v108;
    goto LABEL_36;
  }
  int64_t v18 = (char *)*((void *)&v113 + 1);
  if (v113 == __PAIR128__(0xE900000000000079, 0x726F746365726964))
  {
    char v19 = 121;
    goto LABEL_10;
  }
  unint64_t v106 = v66;
  uint64_t v20 = v113;
  if (_stringCompareWithSmolCheck(_:_:expecting:)(0x726F746365726964, 0xE900000000000079, v113, *((void *)&v113 + 1), 0))
  {
    char v19 = (char)v18;
LABEL_10:
    swift_bridgeObjectRelease(v19);
    specialized Dictionary.subscript.getter(1752457584, 0xE400000000000000, a1);
    uint64_t v4 = v108;
    if (v74)
    {
      if (swift_dynamicCast(&v113, &v70, v109, &type metadata for String, 6))
      {
        long long v21 = v113;
        specialized Dictionary.subscript.getter(0x697461746F6E6E61, 0xEF656C69665F6E6FLL, a1);
        if (v74)
        {
          if (swift_dynamicCast(&v113, &v70, v109, &type metadata for String, 6))
          {
            uint64_t v22 = (void *)*((void *)&v113 + 1);
            *(void *)&long long v93 = v113;
            specialized Dictionary.subscript.getter(0x6F635F6F65646976, 0xEC0000006E6D756CLL, a1);
            if (v74)
            {
              unint64_t v106 = v22;
              if (!swift_dynamicCast(&v113, &v70, v109, &type metadata for String, 6))
              {
LABEL_61:
                swift_bridgeObjectRelease((_BYTE)v106);
                swift_bridgeObjectRelease(BYTE8(v21));
                swift_bridgeObjectRelease(a1);
                goto LABEL_62;
              }
              uint64_t v23 = *((void *)&v113 + 1);
              *((void *)&v93 + 1) = v113;
              specialized Dictionary.subscript.getter(0x6F635F6C6562616CLL, 0xEC0000006E6D756CLL, a1);
              if (v74)
              {
                if (swift_dynamicCast(&v113, &v70, v109, &type metadata for String, 6))
                {
                  uint64_t v67 = *((void *)&v113 + 1);
                  uint64_t v102 = v113;
                  specialized Dictionary.subscript.getter(0x6F635F6C6562616CLL, 0xEC0000006E6D756CLL, a1);
                  if (v74)
                  {
                    if (swift_dynamicCast(&v113, &v70, v109, &type metadata for String, 6))
                    {
                      uint64_t v24 = *((void *)&v113 + 1);
                      uint64_t v94 = v113;
LABEL_76:
                      uint64_t v95 = v24;
                      specialized Dictionary.subscript.getter(0x6F635F6C6562616CLL, 0xEC0000006E6D756CLL, a1);
                      swift_bridgeObjectRelease(a1);
                      uint64_t v101 = v23;
                      if (v74)
                      {
                        if (swift_dynamicCast(&v113, &v70, v109, &type metadata for String, 6))
                        {
                          uint64_t v47 = *((void *)&v113 + 1);
                          uint64_t v46 = v113;
                        }
                        else
                        {
                          uint64_t v46 = 0;
                          uint64_t v47 = 0;
                        }
                        uint64_t v92 = v47;
                        uint64_t v91 = v46;
                      }
                      else
                      {
                        outlined destroy of AnyColumn?((uint64_t)&v70, &demangling cache variable for type metadata for Any?);
                        uint64_t v91 = 0;
                        uint64_t v92 = 0;
                      }
                      id v48 = (int *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (at: URL, annotationFile: URL, videoColumn: String, labelColumn: String, startTimeColumn: String?, endTimeColumn: String?));
                      uint64_t v49 = (uint64_t)v105;
                      uint64_t v50 = v48[16];
                      uint64_t v69 = v48[20];
                      uint64_t v68 = v48[24];
                      uint64_t v109 = (char *)v48[28];
                      URL.init(fileURLWithPath:)(v21, *((void *)&v21 + 1));
                      swift_bridgeObjectRelease(BYTE8(v21));
                      char v51 = (char)v106;
                      URL.init(fileURLWithPath:)(v93, v106);
                      swift_bridgeObjectRelease(v51);
                      (*(void (**)(uint64_t, uint64_t))(v112 + 8))(v111, v110);
                      *(void *)(v49 + v50) = *((void *)&v93 + 1);
                      *(void *)(v49 + v50 + 8) = v101;
                      uint64_t v52 = v69;
                      *(void *)(v49 + v69) = v102;
                      *(void *)(v49 + v52 + 8) = v67;
                      uint64_t v53 = v68;
                      *(void *)(v49 + v68) = v94;
                      *(void *)(v49 + v53 + 8) = v95;
                      uint64_t v54 = v109;
                      *(void *)&v109[v49] = v91;
                      *(void *)&v54[v49 + 8] = v92;
                      uint64_t v10 = v114;
                      swift_storeEnumTagMultiPayload(v49, v114, 0);
                      uint64_t v29 = (uint64_t)v100;
                      outlined init with take of MLClassifierMetrics(v49, (uint64_t)v100, type metadata accessor for MLHandActionClassifier.DataSource);
                      goto LABEL_83;
                    }
                  }
                  else
                  {
                    outlined destroy of AnyColumn?((uint64_t)&v70, &demangling cache variable for type metadata for Any?);
                  }
                  uint64_t v94 = 0;
                  uint64_t v24 = 0;
                  goto LABEL_76;
                }
                swift_bridgeObjectRelease(v23);
                goto LABEL_61;
              }
              swift_bridgeObjectRelease(v23);
              char v38 = (char)v106;
            }
            else
            {
              char v38 = (char)v22;
            }
            swift_bridgeObjectRelease(v38);
            swift_bridgeObjectRelease(BYTE8(v21));
            swift_bridgeObjectRelease(a1);
            outlined destroy of AnyColumn?((uint64_t)&v70, &demangling cache variable for type metadata for Any?);
LABEL_62:
            uint64_t v10 = v114;
            (*(void (**)(uint64_t, uint64_t))(v112 + 8))(v111, v110);
LABEL_63:
            uint64_t v30 = 1;
            uint64_t v4 = v108;
            return __swift_storeEnumTagSinglePayload(v4, v30, 1, v10);
          }
          swift_bridgeObjectRelease(BYTE8(v21));
LABEL_35:
          swift_bridgeObjectRelease(a1);
          goto LABEL_36;
        }
        swift_bridgeObjectRelease(BYTE8(v21));
        swift_bridgeObjectRelease(a1);
        outlined destroy of AnyColumn?((uint64_t)&v70, &demangling cache variable for type metadata for Any?);
LABEL_36:
        uint64_t v10 = v114;
        goto LABEL_37;
      }
      swift_bridgeObjectRelease(a1);
    }
    else
    {
      swift_bridgeObjectRelease(a1);
      outlined destroy of AnyColumn?((uint64_t)&v70, &demangling cache variable for type metadata for Any?);
    }
    uint64_t v10 = v114;
    uint64_t v31 = v112;
    uint64_t v32 = v111;
    uint64_t v33 = v110;
LABEL_38:
    (*(void (**)(uint64_t, uint64_t))(v31 + 8))(v32, v33);
LABEL_39:
    uint64_t v30 = 1;
    return __swift_storeEnumTagSinglePayload(v4, v30, 1, v10);
  }
  if (v20 != 0xD000000000000013
    || (uint64_t v25 = "session_id_column" + 0x8000000000000000, v18 != "session_id_column" + 0x8000000000000000))
  {
    if (_stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000013, "session_id_column" + 0x8000000000000000, v20, v18, 0))
    {
      LOBYTE(v25) = (_BYTE)v18;
      goto LABEL_26;
    }
    if (v20 == 0x5F64656C6562616CLL && v18 == (char *)0xED000073656C6966)
    {
      char v35 = 102;
      goto LABEL_46;
    }
    if (_stringCompareWithSmolCheck(_:_:expecting:)(0x5F64656C6562616CLL, 0xED000073656C6966, v20, v18, 0))
    {
      char v35 = (char)v18;
LABEL_46:
      swift_bridgeObjectRelease(v35);
      specialized Dictionary.subscript.getter(1752457584, 0xE400000000000000, a1);
      swift_bridgeObjectRelease(a1);
      uint64_t v4 = v108;
      if (v74)
      {
        char v36 = swift_dynamicCast(&v113, &v70, v109, &type metadata for String, 6);
        uint64_t v10 = v114;
        if (v36)
        {
          char v37 = BYTE8(v113);
          uint64_t v28 = (uint64_t)v105;
          URL.init(fileURLWithPath:)(v113, *((void *)&v113 + 1));
          swift_bridgeObjectRelease(v37);
          (*(void (**)(uint64_t, uint64_t))(v112 + 8))(v111, v110);
          swift_storeEnumTagMultiPayload(v28, v10, 2);
          goto LABEL_29;
        }
LABEL_50:
        uint64_t v31 = v112;
        uint64_t v33 = v110;
        uint64_t v32 = v111;
        goto LABEL_38;
      }
LABEL_49:
      outlined destroy of AnyColumn?((uint64_t)&v70, &demangling cache variable for type metadata for Any?);
      uint64_t v10 = v114;
      goto LABEL_50;
    }
    if (v20 == 0xD000000000000016 && v18 == "start_time_column" + 0x8000000000000000)
    {
      swift_bridgeObjectRelease("start_time_column");
      uint64_t v10 = v114;
LABEL_59:
      (*(void (**)(void *, uint64_t, uint64_t))(v112 + 16))(v66, v111, v110);
      char v70 = 1;
      *(_DWORD *)uint64_t v71 = *(_DWORD *)v96;
      *(_DWORD *)&v71[3] = *(_DWORD *)&v96[3];
      uint64_t v72 = 44;
      unint64_t v73 = 0xE100000000000000;
      uint64_t v74 = 0;
      char v107 = 1;
      unint64_t v75 = 0xE000000000000000;
      uint64_t v76 = 92;
      unint64_t v77 = 0xE100000000000000;
      char v78 = 1;
      *(_DWORD *)uint64_t v79 = *(_DWORD *)v97;
      *(_DWORD *)&v79[3] = *(_DWORD *)&v97[3];
      uint64_t v80 = 34;
      unint64_t v81 = 0xE100000000000000;
      char v82 = 1;
      *(_DWORD *)&v83[3] = *(_DWORD *)&v98[3];
      *(_DWORD *)uint64_t v83 = *(_DWORD *)v98;
      uint64_t v84 = &outlined read-only object #0 of default argument 1 of MLDataTable.init(contentsOf:options:);
      uint64_t v85 = 10;
      unint64_t v86 = 0xE100000000000000;
      long long v87 = 0;
      char v88 = 1;
      *(_DWORD *)uint64_t v89 = v99[0];
      *(_DWORD *)&v89[3] = *(_DWORD *)((char *)v99 + 3);
      uint64_t v90 = 0;
      MLDataTable.init(contentsOf:options:)(v66, &v70);
      uint64_t v4 = v108;
      uint64_t v103 = v113;
      LOBYTE(v104) = BYTE8(v113);
      static MLHandActionClassifier.reformatKeypointsDataTable(table:featureColumn:)(&v103, 0x746E696F7079656BLL, (void *)0xE900000000000073, 0.0);
      specialized Dictionary.subscript.getter(0xD000000000000011, (uint64_t)("labeled_keypoints_data" + 0x8000000000000000), a1);
      if (v74)
      {
        if (swift_dynamicCast(&v113, &v70, v109, &type metadata for String, 6))
        {
          uint64_t v40 = *((void *)&v113 + 1);
          uint64_t v41 = v113;
          specialized Dictionary.subscript.getter(0x6F635F6C6562616CLL, 0xEC0000006E6D756CLL, a1);
          if (v74)
          {
            if (swift_dynamicCast(&v113, &v70, v109, &type metadata for String, 6))
            {
              uint64_t v42 = *((void *)&v113 + 1);
              char v105 = (void *)v113;
              specialized Dictionary.subscript.getter(0x5F65727574616566, 0xEE006E6D756C6F63, a1);
              swift_bridgeObjectRelease(a1);
              (*(void (**)(uint64_t, uint64_t))(v112 + 8))(v111, v110);
              if (v74)
              {
                if (swift_dynamicCast(&v113, &v70, v109, &type metadata for String, 6))
                {
                  long long v43 = v113;
                  char v44 = v104;
                  uint64_t v29 = (uint64_t)v100;
                  *uint64_t v100 = v103;
                  *(unsigned char *)(v29 + 8) = v44;
                  *(void *)(v29 + 16) = v41;
                  *(void *)(v29 + 24) = v40;
                  *(void *)(v29 + 32) = v105;
                  *(void *)(v29 + 40) = v42;
                  *(_OWORD *)(v29 + 48) = v43;
                  uint64_t v65 = 3;
LABEL_119:
                  uint64_t v10 = v114;
                  swift_storeEnumTagMultiPayload(v29, v114, v65);
LABEL_83:
                  uint64_t v4 = v108;
                  goto LABEL_30;
                }
                swift_bridgeObjectRelease(v42);
                swift_bridgeObjectRelease(v40);
              }
              else
              {
                swift_bridgeObjectRelease(v42);
                swift_bridgeObjectRelease(v40);
                outlined destroy of AnyColumn?((uint64_t)&v70, &demangling cache variable for type metadata for Any?);
              }
              uint64_t v4 = v108;
              uint64_t v10 = v114;
LABEL_101:
              outlined consume of Result<_DataTable, Error>(v103, v104);
              goto LABEL_39;
            }
            swift_bridgeObjectRelease(v40);
            swift_bridgeObjectRelease(a1);
          }
          else
          {
            swift_bridgeObjectRelease(v40);
            swift_bridgeObjectRelease(a1);
            outlined destroy of AnyColumn?((uint64_t)&v70, &demangling cache variable for type metadata for Any?);
          }
          uint64_t v10 = v114;
          uint64_t v58 = v111;
          uint64_t v59 = v110;
          uint64_t v57 = v112;
LABEL_100:
          (*(void (**)(uint64_t, uint64_t))(v57 + 8))(v58, v59);
          goto LABEL_101;
        }
        swift_bridgeObjectRelease(a1);
      }
      else
      {
        swift_bridgeObjectRelease(a1);
        outlined destroy of AnyColumn?((uint64_t)&v70, &demangling cache variable for type metadata for Any?);
      }
      uint64_t v57 = v112;
      uint64_t v58 = v111;
      uint64_t v59 = v110;
      goto LABEL_100;
    }
    char v39 = _stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000016, "start_time_column" + 0x8000000000000000, v20, v18, 0);
    uint64_t v10 = v114;
    if (v39)
    {
      swift_bridgeObjectRelease((_BYTE)v18);
      goto LABEL_59;
    }
    if (v20 == 0xD000000000000012 && v18 == "augmentation_options" + 0x8000000000000000)
    {
      swift_bridgeObjectRelease(("augmentation_options" + 0x8000000000000000));
      uint64_t v45 = v106;
    }
    else
    {
      char v55 = _stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000012, "augmentation_options" + 0x8000000000000000, v20, v18, 0);
      swift_bridgeObjectRelease((_BYTE)v18);
      BOOL v56 = (v55 & 1) == 0;
      uint64_t v10 = v114;
      uint64_t v45 = v106;
      if (v56)
      {
        (*(void (**)(uint64_t, uint64_t))(v112 + 8))(v111, v110);
        swift_bridgeObjectRelease(a1);
        goto LABEL_63;
      }
    }
    (*(void (**)(void *, uint64_t, uint64_t))(v112 + 16))(v45, v111, v110);
    char v70 = 1;
    *(_DWORD *)uint64_t v71 = v103;
    *(_DWORD *)&v71[3] = *(_DWORD *)((char *)&v103 + 3);
    uint64_t v72 = 44;
    unint64_t v73 = 0xE100000000000000;
    uint64_t v74 = 0;
    LOBYTE(v99[0]) = 1;
    unint64_t v75 = 0xE000000000000000;
    uint64_t v76 = 92;
    unint64_t v77 = 0xE100000000000000;
    char v78 = 1;
    *(_DWORD *)uint64_t v79 = *(_DWORD *)v96;
    *(_DWORD *)&v79[3] = *(_DWORD *)&v96[3];
    uint64_t v80 = 34;
    unint64_t v81 = 0xE100000000000000;
    char v82 = 1;
    *(_DWORD *)&v83[3] = *(_DWORD *)&v97[3];
    *(_DWORD *)uint64_t v83 = *(_DWORD *)v97;
    uint64_t v84 = &outlined read-only object #0 of default argument 1 of MLDataTable.init(contentsOf:options:);
    uint64_t v85 = 10;
    unint64_t v86 = 0xE100000000000000;
    long long v87 = 0;
    char v88 = 1;
    *(_DWORD *)uint64_t v89 = *(_DWORD *)v98;
    *(_DWORD *)&v89[3] = *(_DWORD *)&v98[3];
    uint64_t v90 = 0;
    MLDataTable.init(contentsOf:options:)(v45, &v70);
    uint64_t v60 = v113;
    char v61 = BYTE8(v113);
    specialized Dictionary.subscript.getter(0x6F635F6F65646976, 0xEC0000006E6D756CLL, a1);
    if (v74)
    {
      if (!swift_dynamicCast(&v113, &v70, v109, &type metadata for String, 6))
      {
        swift_bridgeObjectRelease(a1);
        outlined consume of Result<_DataTable, Error>(v60, v61);
        goto LABEL_109;
      }
      char v105 = (void *)*((void *)&v113 + 1);
      unint64_t v106 = (void *)v113;
      specialized Dictionary.subscript.getter(0x6F635F6C6562616CLL, 0xEC0000006E6D756CLL, a1);
      if (v74)
      {
        if (swift_dynamicCast(&v113, &v70, v109, &type metadata for String, 6))
        {
          long long v93 = v113;
          specialized Dictionary.subscript.getter(0x6F635F6C6562616CLL, 0xEC0000006E6D756CLL, a1);
          if (v74)
          {
            if (swift_dynamicCast(&v113, &v70, v109, &type metadata for String, 6))
            {
              uint64_t v62 = *((void *)&v113 + 1);
              uint64_t v101 = v113;
              goto LABEL_113;
            }
          }
          else
          {
            outlined destroy of AnyColumn?((uint64_t)&v70, &demangling cache variable for type metadata for Any?);
          }
          uint64_t v101 = 0;
          uint64_t v62 = 0;
LABEL_113:
          uint64_t v102 = v62;
          specialized Dictionary.subscript.getter(0x6F635F6C6562616CLL, 0xEC0000006E6D756CLL, a1);
          swift_bridgeObjectRelease(a1);
          (*(void (**)(uint64_t, uint64_t))(v112 + 8))(v111, v110);
          if (v74)
          {
            if (swift_dynamicCast(&v113, &v70, v109, &type metadata for String, 6))
            {
              uint64_t v64 = *((void *)&v113 + 1);
              uint64_t v63 = v113;
LABEL_118:
              uint64_t v29 = (uint64_t)v100;
              *uint64_t v100 = v60;
              *(unsigned char *)(v29 + 8) = v61 & 1;
              *(void *)(v29 + 16) = v106;
              *(void *)(v29 + 24) = v105;
              *(_OWORD *)(v29 + 32) = v93;
              *(void *)(v29 + 48) = v101;
              *(void *)(v29 + 56) = v102;
              *(void *)(v29 + 64) = v63;
              *(void *)(v29 + 72) = v64;
              uint64_t v65 = 4;
              goto LABEL_119;
            }
          }
          else
          {
            outlined destroy of AnyColumn?((uint64_t)&v70, &demangling cache variable for type metadata for Any?);
          }
          uint64_t v63 = 0;
          uint64_t v64 = 0;
          goto LABEL_118;
        }
        swift_bridgeObjectRelease(a1);
        outlined consume of Result<_DataTable, Error>(v60, v61);
        swift_bridgeObjectRelease((_BYTE)v105);
LABEL_109:
        (*(void (**)(uint64_t, uint64_t))(v112 + 8))(v111, v110);
        uint64_t v30 = 1;
        uint64_t v4 = v108;
        uint64_t v10 = v114;
        return __swift_storeEnumTagSinglePayload(v4, v30, 1, v10);
      }
      swift_bridgeObjectRelease(a1);
      outlined consume of Result<_DataTable, Error>(v60, v61);
      swift_bridgeObjectRelease((_BYTE)v105);
    }
    else
    {
      swift_bridgeObjectRelease(a1);
      outlined consume of Result<_DataTable, Error>(v60, v61);
    }
    outlined destroy of AnyColumn?((uint64_t)&v70, &demangling cache variable for type metadata for Any?);
    goto LABEL_109;
  }
LABEL_26:
  swift_bridgeObjectRelease((_BYTE)v25);
  specialized Dictionary.subscript.getter(1752457584, 0xE400000000000000, a1);
  swift_bridgeObjectRelease(a1);
  uint64_t v4 = v108;
  if (!v74) {
    goto LABEL_49;
  }
  char v26 = swift_dynamicCast(&v113, &v70, v109, &type metadata for String, 6);
  uint64_t v10 = v114;
  if (!v26) {
    goto LABEL_50;
  }
  char v27 = BYTE8(v113);
  uint64_t v28 = (uint64_t)v105;
  URL.init(fileURLWithPath:)(v113, *((void *)&v113 + 1));
  swift_bridgeObjectRelease(v27);
  (*(void (**)(uint64_t, uint64_t))(v112 + 8))(v111, v110);
  swift_storeEnumTagMultiPayload(v28, v10, 1);
LABEL_29:
  uint64_t v29 = (uint64_t)v100;
  outlined init with take of MLClassifierMetrics(v28, (uint64_t)v100, type metadata accessor for MLHandActionClassifier.DataSource);
LABEL_30:
  outlined init with take of MLClassifierMetrics(v29, v4, type metadata accessor for MLHandActionClassifier.DataSource);
  uint64_t v30 = 0;
  return __swift_storeEnumTagSinglePayload(v4, v30, 1, v10);
}

uint64_t MLHandActionClassifier.ModelParameters.ValidationData.init(dictionary:tableFile:)(uint64_t a1, uint64_t a2)
{
  uint64_t v54 = a2;
  uint64_t v4 = v2;
  uint64_t v5 = type metadata accessor for URL(0);
  uint64_t v6 = *(void *)(v5 - 8);
  int64_t v7 = *(void *)(v6 + 64);
  uint64_t v8 = alloca(v7);
  uint64_t v9 = alloca(v7);
  uint64_t v41 = &v40;
  int64_t v10 = *(void *)(*(void *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for MLHandActionClassifier.DataSource?)
                              - 8)
                  + 64);
  int64_t v11 = alloca(v10);
  uint64_t v12 = alloca(v10);
  uint64_t v40 = (uint64_t)&v40;
  uint64_t v13 = type metadata accessor for MLHandActionClassifier.DataSource(0);
  int64_t v14 = *(void *)(*(void *)(v13 - 8) + 64);
  uint64_t v15 = alloca(v14);
  unint64_t v16 = alloca(v14);
  uint64_t v42 = &v40;
  uint64_t v55 = type metadata accessor for MLHandActionClassifier.ModelParameters.ValidationData(0);
  int64_t v17 = *(void *)(*(void *)(v55 - 8) + 64);
  int64_t v18 = alloca(v17);
  char v19 = alloca(v17);
  uint64_t v50 = &v40;
  if (!*(void *)(a1 + 16)) {
    goto LABEL_10;
  }
  unint64_t v20 = specialized __RawDictionaryStorage.find<A>(_:)(1684957547, 0xE400000000000000);
  if ((v21 & 1) == 0) {
    goto LABEL_10;
  }
  uint64_t v53 = v4;
  outlined init with copy of Any(*(void *)(a1 + 56) + 32 * v20, (uint64_t)&v44);
  uint64_t v51 = (uint64_t)&type metadata for Any + 8;
  if (!swift_dynamicCast(&v48, &v44, (char *)&type metadata for Any + 8, &type metadata for String, 6))
  {
    uint64_t v4 = v53;
    goto LABEL_10;
  }
  uint64_t v52 = v6;
  uint64_t v22 = v48;
  uint64_t v23 = v49;
  if ((v48 != 1701736302 || v49 != 0xE400000000000000)
    && (_stringCompareWithSmolCheck(_:_:expecting:)(1701736302, 0xE400000000000000, v48, v49, 0) & 1) == 0)
  {
    if (v22 == 0x756F735F61746164 && v23 == 0xEB00000000656372)
    {
      char v29 = 114;
LABEL_18:
      swift_bridgeObjectRelease(v29);
      uint64_t v6 = v52;
      specialized Dictionary.subscript.getter(1635017060, 0xE400000000000000, a1);
      swift_bridgeObjectRelease(a1);
      if (v47)
      {
        uint64_t v30 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [String : Any]);
        if (swift_dynamicCast(&v48, &v44, v51, v30, 6))
        {
          uint64_t v51 = v48;
          uint64_t v31 = (uint64_t)v41;
          (*(void (**)(uint64_t *, uint64_t, uint64_t))(v6 + 16))(v41, v54, v5);
          uint64_t v32 = v40;
          MLHandActionClassifier.DataSource.init(dictionary:tableFile:)(v51, v31);
          (*(void (**)(uint64_t, uint64_t))(v6 + 8))(v54, v5);
          uint64_t v33 = v32;
          unsigned int v24 = 1;
          if (__swift_getEnumTagSinglePayload(v33, 1, v13) != 1)
          {
            uint64_t v37 = v33;
            uint64_t v38 = (uint64_t)v42;
            outlined init with take of MLClassifierMetrics(v37, (uint64_t)v42, type metadata accessor for MLHandActionClassifier.DataSource);
            uint64_t v39 = v38;
            uint64_t v26 = (uint64_t)v50;
            outlined init with take of MLClassifierMetrics(v39, (uint64_t)v50, type metadata accessor for MLHandActionClassifier.DataSource);
            uint64_t v25 = v55;
            goto LABEL_8;
          }
          outlined destroy of AnyColumn?(v33, &demangling cache variable for type metadata for MLHandActionClassifier.DataSource?);
          uint64_t v27 = 1;
          uint64_t v4 = v53;
LABEL_11:
          uint64_t v25 = v55;
          return __swift_storeEnumTagSinglePayload(v4, v27, 1, v25);
        }
      }
      else
      {
        outlined destroy of AnyColumn?((uint64_t)&v44, &demangling cache variable for type metadata for Any?);
      }
      uint64_t v4 = v53;
      goto LABEL_24;
    }
    uint64_t v43 = v22;
    if (_stringCompareWithSmolCheck(_:_:expecting:)(0x756F735F61746164, 0xEB00000000656372, v22, v23, 0))
    {
      char v29 = v23;
      goto LABEL_18;
    }
    if (v43 == 0x74696C7073 && v23 == 0xE500000000000000)
    {
      swift_bridgeObjectRelease(0);
      uint64_t v4 = v53;
      uint64_t v6 = v52;
      goto LABEL_30;
    }
    char v34 = _stringCompareWithSmolCheck(_:_:expecting:)(0x74696C7073, 0xE500000000000000, v43, v23, 0);
    swift_bridgeObjectRelease(v23);
    uint64_t v4 = v53;
    uint64_t v6 = v52;
    if (v34)
    {
LABEL_30:
      specialized Dictionary.subscript.getter(1635017060, 0xE400000000000000, a1);
      swift_bridgeObjectRelease(a1);
      if (v47)
      {
        uint64_t v35 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [String : Any]);
        if (swift_dynamicCast(&v48, &v44, v51, v35, 6))
        {
          MLSplitStrategy.init(dictionary:)(v48);
          (*(void (**)(uint64_t, uint64_t))(v6 + 8))(v54, v5);
          uint64_t v25 = v55;
          if (!v46)
          {
            __int16 v36 = v45;
            uint64_t v26 = (uint64_t)v50;
            *(_OWORD *)uint64_t v50 = v44;
            *(unsigned char *)(v26 + 16) = v36;
            *(unsigned char *)(v26 + 17) = HIBYTE(v36) & 1;
            unsigned int v24 = 0;
            goto LABEL_8;
          }
LABEL_25:
          uint64_t v27 = 1;
          return __swift_storeEnumTagSinglePayload(v4, v27, 1, v25);
        }
      }
      else
      {
        outlined destroy of AnyColumn?((uint64_t)&v44, &demangling cache variable for type metadata for Any?);
      }
LABEL_24:
      uint64_t v25 = v55;
      (*(void (**)(uint64_t, uint64_t))(v6 + 8))(v54, v5);
      goto LABEL_25;
    }
LABEL_10:
    (*(void (**)(uint64_t, uint64_t))(v6 + 8))(v54, v5);
    swift_bridgeObjectRelease(a1);
    uint64_t v27 = 1;
    goto LABEL_11;
  }
  (*(void (**)(uint64_t, uint64_t))(v52 + 8))(v54, v5);
  swift_bridgeObjectRelease(a1);
  swift_bridgeObjectRelease(v23);
  unsigned int v24 = 2;
  uint64_t v25 = v55;
  uint64_t v26 = (uint64_t)v50;
LABEL_8:
  swift_storeEnumTagMultiPayload(v26, v25, v24);
  uint64_t v4 = v53;
  outlined init with take of MLClassifierMetrics(v26, v53, type metadata accessor for MLHandActionClassifier.ModelParameters.ValidationData);
  uint64_t v27 = 0;
  return __swift_storeEnumTagSinglePayload(v4, v27, 1, v25);
}

uint64_t MLHandActionClassifier.ModelParameters.ModelAlgorithmType.init(dictionary:)(uint64_t a1)
{
  uint64_t v2 = v1;
  if (!*(void *)(a1 + 16)
    || (unint64_t v3 = specialized __RawDictionaryStorage.find<A>(_:)(0x687469726F676C61, 0xE90000000000006DLL), (v4 & 1) == 0))
  {
    long long v10 = 0;
    long long v9 = 0;
    swift_bridgeObjectRelease(a1);
    goto LABEL_9;
  }
  outlined init with copy of Any(*(void *)(a1 + 56) + 32 * v3, (uint64_t)&v9);
  swift_bridgeObjectRelease(a1);
  if (!*((void *)&v10 + 1))
  {
LABEL_9:
    uint64_t result = outlined destroy of AnyColumn?((uint64_t)&v9, &demangling cache variable for type metadata for Any?);
    goto LABEL_10;
  }
  uint64_t result = swift_dynamicCast(&v11, &v9, (char *)&type metadata for Any + 8, &type metadata for String, 6);
  if (!(_BYTE)result)
  {
LABEL_10:
    char v7 = 1;
    goto LABEL_11;
  }
  char v6 = v12;
  if (v11 != 7234407 || v12 != 0xE300000000000000)
  {
    char v7 = 0;
    char v8 = _stringCompareWithSmolCheck(_:_:expecting:)(7234407, 0xE300000000000000, v11, v12, 0);
    uint64_t result = swift_bridgeObjectRelease(v6);
    if (v8) {
      goto LABEL_11;
    }
    goto LABEL_10;
  }
  uint64_t result = swift_bridgeObjectRelease(0);
  char v7 = 0;
LABEL_11:
  char *v2 = v7;
  return result;
}

NSURL *MLHandActionClassifier.PersistentParameters.save(toSessionDirectory:)(uint64_t a1)
{
  uint64_t v94 = v1;
  uint64_t v3 = v2;
  uint64_t v87 = a1;
  int64_t v4 = *(void *)(*(void *)(type metadata accessor for MLHandActionClassifier.DataSource(0) - 8) + 64);
  uint64_t v5 = alloca(v4);
  char v6 = alloca(v4);
  uint64_t v80 = &v75;
  uint64_t v77 = type metadata accessor for MLHandActionClassifier.ModelParameters.ValidationData(0);
  int64_t v7 = *(void *)(*(void *)(v77 - 8) + 64);
  char v8 = alloca(v7);
  long long v9 = alloca(v7);
  char v78 = &v75;
  uint64_t v93 = type metadata accessor for URL(0);
  uint64_t v95 = *(void *)(v93 - 8);
  int64_t v10 = *(void *)(v95 + 64);
  uint64_t v11 = alloca(v10);
  uint64_t v12 = alloca(v10);
  uint64_t v76 = &v75;
  uint64_t v13 = alloca(v10);
  int64_t v14 = alloca(v10);
  uint64_t v75 = (uint64_t)&v75;
  uint64_t v15 = alloca(v10);
  unint64_t v16 = alloca(v10);
  uint64_t v89 = &v75;
  uint64_t v92 = type metadata accessor for MLHandActionClassifier.ModelParameters(0);
  int64_t v17 = *(void *)(*(void *)(v92 - 8) + 64);
  int64_t v18 = alloca(v17);
  char v19 = alloca(v17);
  unint64_t v86 = &v75;
  unint64_t v20 = alloca(v17);
  char v21 = alloca(v17);
  uint64_t v22 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, Any)>);
  uint64_t inited = swift_initStackObject(v22, v98);
  *(void *)(inited + 16) = 8;
  *(void *)(inited + 24) = 16;
  *(void *)(inited + 32) = 0x676E696E69617274;
  *(void *)(inited + 40) = 0xE800000000000000;
  uint64_t v24 = MLHandActionClassifier.DataSource.dictionary.getter();
  uint64_t v88 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [String : Any]);
  *(void *)(inited + 72) = v88;
  *(void *)(inited + 48) = v24;
  *(void *)(inited + 80) = 0x69746164696C6176;
  *(void *)(inited + 88) = 0xEA00000000006E6FLL;
  uint64_t v25 = (int *)type metadata accessor for MLHandActionClassifier.PersistentParameters(0);
  uint64_t v79 = v3 + v25[5];
  outlined init with copy of MLTrainingSessionParameters(v79, (uint64_t)&v75, type metadata accessor for MLHandActionClassifier.ModelParameters.ValidationData);
  uint64_t v81 = v25[6];
  uint64_t v26 = *(void *)(v3 + v81);
  uint64_t v82 = v25[7];
  uint64_t v27 = *(void *)(v3 + v82);
  uint64_t v83 = v25[8];
  uint64_t v28 = *(void *)(v3 + v83);
  uint64_t v84 = v25[10];
  uint64_t v29 = *(void *)(v3 + v84);
  uint64_t v85 = v25[9];
  uint64_t v30 = *(void *)(v3 + v85);
  uint64_t v31 = (int *)v92;
  *(uint64_t *)((char *)&v75 + *(int *)(v92 + 20)) = v26;
  *(uint64_t *)((char *)&v75 + v31[6]) = v27;
  *(uint64_t *)((char *)&v75 + v31[7]) = v28;
  *(uint64_t *)((char *)&v75 + v31[8]) = v29;
  *(uint64_t *)((char *)&v75 + v31[10]) = v30;
  uint64_t v32 = MLHandActionClassifier.ModelParameters.ValidationData.dictionary.getter();
  outlined destroy of MLActivityClassifier.ModelParameters((uint64_t)&v75, type metadata accessor for MLHandActionClassifier.ModelParameters.ValidationData);
  uint64_t v33 = v88;
  *(void *)(inited + 120) = v88;
  *(void *)(inited + 96) = v32;
  *(void *)(inited + 128) = 0x69735F6863746162;
  *(void *)(inited + 136) = 0xEA0000000000657ALL;
  uint64_t v34 = *(void *)(v3 + v81);
  *(void *)(inited + 168) = &type metadata for Int;
  *(void *)(inited + 144) = v34;
  *(void *)(inited + 176) = 0x6D6172665F6D756ELL;
  *(void *)(inited + 184) = 0xEA00000000007365;
  uint64_t v35 = *(void *)(v3 + v83);
  *(void *)(inited + 216) = &type metadata for Int;
  *(void *)(inited + 192) = v35;
  strcpy((char *)(inited + 224), "max_iterations");
  *(unsigned char *)(inited + 239) = -18;
  uint64_t v36 = *(void *)(v3 + v82);
  *(void *)(inited + 264) = &type metadata for Int;
  *(void *)(inited + 240) = v36;
  *(void *)(inited + 272) = 0xD000000000000014;
  *(void *)(inited + 280) = "Empty training input." + 0x8000000000000000;
  uint64_t v37 = *(void *)(v3 + v84);
  *(void *)(inited + 312) = &type metadata for Int;
  *(void *)(inited + 288) = v37;
  *(void *)(inited + 320) = 0x687469726F676C61;
  *(void *)(inited + 328) = 0xE90000000000006DLL;
  uint64_t v38 = MLHandActionClassifier.ModelParameters.ModelAlgorithmType.dictionary.getter();
  *(void *)(inited + 360) = v33;
  *(void *)(inited + 336) = v38;
  *(void *)(inited + 368) = 0x7246746567726174;
  *(void *)(inited + 376) = 0xEF65746152656D61;
  uint64_t v88 = v3;
  __m128 v39 = (__m128)*(unint64_t *)(v3 + v85);
  *(void *)(inited + 408) = &type metadata for Double;
  *(void *)(inited + 384) = v39.i64[0];
  LOBYTE(inited) = Dictionary.init(dictionaryLiteral:)(inited, &type metadata for String, (char *)&type metadata for Any + 8, &protocol witness table for String);
  uint64_t v40 = objc_opt_self(NSPropertyListSerialization);
  Class isa = Dictionary._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease(inited);
  id v96 = 0;
  id v42 = [v40 dataWithPropertyList:isa format:200 options:0 error:&v96];
  id v43 = v42;

  id v44 = v96;
  if (!v43)
  {
    uint64_t v50 = v44;
    _convertNSErrorToError(_:)(v44);

    swift_willThrow(v50, "dataWithPropertyList:format:options:error:", v51, v52, v53, v54);
    return __stack_chk_guard;
  }
  uint64_t v45 = static Data._unconditionallyBridgeFromObjectiveC(_:)(v43);
  unint64_t v47 = v46;

  uint64_t v48 = (uint64_t)v89;
  URL.appendingPathComponent(_:)(0xD000000000000010, "ObjectDetectorMetrics." + 0x8000000000000000);
  uint64_t v49 = v94;
  Data.write(to:options:)(v48, 0, v45, v47);
  if (!v49)
  {
    uint64_t v91 = v45;
    unint64_t v90 = v47;
    uint64_t v94 = 0;
    uint64_t v95 = *(void *)(v95 + 8);
    *(double *)v39.i64 = ((double (*)(uint64_t, uint64_t))v95)(v48, v93);
    MLHandActionClassifier.DataSource.table.getter(v39);
    char v55 = v97;
    if (v97 == -1)
    {
      uint64_t v58 = v94;
    }
    else
    {
      uint64_t v89 = (uint64_t *)v96;
      v97 &= 1u;
      uint64_t v56 = v75;
      URL.appendingPathComponent(_:)(1635017060, 0xE400000000000000);
      uint64_t v57 = v94;
      MLDataTable.write(to:)(v56);
      uint64_t v58 = v57;
      if (v57)
      {
        ((void (*)(uint64_t, uint64_t))v95)(v56, v93);
        outlined consume of Data._Representation(v91, v90);
        char v59 = v55;
        uint64_t v60 = (uint64_t)v89;
LABEL_15:
        outlined consume of MLDataTable?(v60, v59);
        return __stack_chk_guard;
      }
      ((void (*)(uint64_t, uint64_t))v95)(v56, v93);
      outlined consume of MLDataTable?((uint64_t)v89, v55);
    }
    uint64_t v61 = (uint64_t)v86;
    outlined init with copy of MLTrainingSessionParameters(v79, (uint64_t)v86, type metadata accessor for MLHandActionClassifier.ModelParameters.ValidationData);
    uint64_t v62 = *(void *)(v88 + v82);
    uint64_t v63 = *(void *)(v88 + v83);
    uint64_t v64 = *(void *)(v88 + v84);
    __m128 v65 = (__m128)*(unint64_t *)(v88 + v85);
    uint64_t v66 = (int *)v92;
    *(void *)(v61 + *(int *)(v92 + 20)) = *(void *)(v88 + v81);
    *(void *)(v61 + v66[6]) = v62;
    *(void *)(v61 + v66[7]) = v63;
    *(void *)(v61 + v66[8]) = v64;
    *(void *)(v61 + v66[10]) = v65.i64[0];
    uint64_t v67 = v61;
    uint64_t v68 = (uint64_t)v78;
    outlined init with copy of MLTrainingSessionParameters(v67, (uint64_t)v78, type metadata accessor for MLHandActionClassifier.ModelParameters.ValidationData);
    int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload(v68, v77);
    uint64_t v70 = (uint64_t)v76;
    uint64_t v94 = v58;
    if (EnumCaseMultiPayload == 1)
    {
      uint64_t v71 = (uint64_t)v80;
      outlined init with take of MLClassifierMetrics(v68, (uint64_t)v80, type metadata accessor for MLHandActionClassifier.DataSource);
      MLHandActionClassifier.DataSource.table.getter(v65);
      outlined destroy of MLActivityClassifier.ModelParameters(v71, type metadata accessor for MLHandActionClassifier.DataSource);
      id v72 = v96;
      char v73 = v97;
    }
    else
    {
      char v73 = -1;
      id v72 = 0;
    }
    outlined destroy of MLActivityClassifier.ModelParameters((uint64_t)v86, type metadata accessor for MLHandActionClassifier.ModelParameters.ValidationData);
    if (v73 == -1)
    {
      outlined consume of Data._Representation(v91, v90);
      return __stack_chk_guard;
    }
    id v96 = v72;
    char v97 = v73 & 1;
    uint64_t v92 = (uint64_t)v72;
    URL.appendingPathComponent(_:)(0x69746164696C6176, 0xEE00617461446E6FLL);
    MLDataTable.write(to:)(v70);
    ((void (*)(uint64_t, uint64_t))v95)(v70, v93);
    outlined consume of Data._Representation(v91, v90);
    char v59 = v73;
    uint64_t v60 = v92;
    goto LABEL_15;
  }
  (*(void (**)(uint64_t, uint64_t))(v95 + 8))(v48, v93);
  outlined consume of Data._Representation(v45, v47);
  return __stack_chk_guard;
}

uint64_t MLHandActionClassifier.DataSource.dictionary.getter()
{
  uint64_t v82 = type metadata accessor for URL(0);
  uint64_t v81 = *(uint64_t **)(v82 - 8);
  int64_t v1 = v81[8];
  uint64_t v2 = alloca(v1);
  uint64_t v3 = alloca(v1);
  int64_t v4 = alloca(v1);
  uint64_t v5 = alloca(v1);
  char v78 = &v56;
  char v6 = alloca(v1);
  int64_t v7 = alloca(v1);
  uint64_t v8 = type metadata accessor for MLHandActionClassifier.DataSource(0);
  int64_t v9 = *(void *)(*(void *)(v8 - 8) + 64);
  int64_t v10 = alloca(v9);
  uint64_t v11 = alloca(v9);
  outlined init with copy of MLTrainingSessionParameters(v0, (uint64_t)&v56, type metadata accessor for MLHandActionClassifier.DataSource);
  switch(swift_getEnumCaseMultiPayload(&v56, v8))
  {
    case 0u:
      uint64_t v12 = (int *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (at: URL, annotationFile: URL, videoColumn: String, labelColumn: String, startTimeColumn: String?, endTimeColumn: String?));
      uint64_t v13 = (char *)&v56 + v12[12];
      long long v73 = *(_OWORD *)((char *)&v56 + v12[16]);
      long long v72 = *(_OWORD *)((char *)&v56 + v12[20]);
      uint64_t v14 = v12[24];
      uint64_t v76 = *(uint64_t **)((char *)&v56 + v14);
      uint64_t v74 = *(uint64_t **)((char *)&v56 + v14 + 8);
      uint64_t v15 = v12[28];
      uint64_t v75 = *(uint64_t **)((char *)&v56 + v15);
      uint64_t v77 = *(uint64_t **)((char *)&v56 + v15 + 8);
      unint64_t v16 = (void (*)(uint64_t *, uint64_t *, uint64_t))v81[4];
      uint64_t v17 = v82;
      v16(&v56, &v56, v82);
      v16(v78, (uint64_t *)v13, v17);
      uint64_t v18 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, Any)>);
      uint64_t v19 = swift_allocObject(v18, 272, 7);
      *(void *)(v19 + 16) = 5;
      *(void *)(v19 + 24) = 10;
      *(void *)(v19 + 32) = 1684957547;
      *(void *)(v19 + 40) = 0xE400000000000000;
      *(void *)(v19 + 72) = &type metadata for String;
      *(void *)(v19 + 48) = 0x726F746365726964;
      *(void *)(v19 + 56) = 0xE900000000000079;
      *(void *)(v19 + 80) = 1752457584;
      *(void *)(v19 + 88) = 0xE400000000000000;
      uint64_t v79 = &v56;
      uint64_t v20 = URL.path.getter(v18);
      *(void *)(v19 + 120) = &type metadata for String;
      *(void *)(v19 + 96) = v20;
      *(void *)(v19 + 104) = v21;
      *(void *)(v19 + 128) = 0x697461746F6E6E61;
      *(void *)(v19 + 136) = 0xEF656C69665F6E6FLL;
      *(void *)(v19 + 168) = v17;
      boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1((void *)(v19 + 144));
      uint64_t v23 = v78;
      uint64_t v24 = v81;
      ((void (*)(void *, uint64_t *, uint64_t))v81[2])(boxed_opaque_existential_1, v78, v17);
      strcpy((char *)(v19 + 176), "video_column");
      *(unsigned char *)(v19 + 189) = 0;
      *(_WORD *)(v19 + 190) = -5120;
      *(void *)(v19 + 216) = &type metadata for String;
      *(_OWORD *)(v19 + 192) = v73;
      strcpy((char *)(v19 + 224), "label_column");
      *(unsigned char *)(v19 + 237) = 0;
      *(_WORD *)(v19 + 238) = -5120;
      *(void *)(v19 + 264) = &type metadata for String;
      *(_OWORD *)(v19 + 240) = v72;
      uint64_t v80 = Dictionary.init(dictionaryLiteral:)(v19, &type metadata for String, (char *)&type metadata for Any + 8, &protocol witness table for String);
      if (v74)
      {
        uint64_t v71 = &type metadata for String;
        uint64_t v69 = v76;
        uint64_t v70 = v74;
        specialized Dictionary.subscript.setter((uint64_t)&v69, 0xD000000000000011, (uint64_t)("labeled_video_data" + 0x8000000000000000));
      }
      if (v77)
      {
        uint64_t v71 = &type metadata for String;
        uint64_t v69 = v75;
        uint64_t v70 = v77;
        specialized Dictionary.subscript.setter((uint64_t)&v69, 0x656D69745F646E65, 0xEF6E6D756C6F635FLL);
      }
      uint64_t v25 = (void (*)(uint64_t *, uint64_t))v24[1];
      v25(v23, v17);
      v25(v79, v17);
      goto LABEL_19;
    case 1u:
      uint64_t v26 = v81;
      ((void (*)(uint64_t *, uint64_t *, uint64_t))v81[4])(&v56, &v56, v82);
      uint64_t v27 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, Any)>);
      uint64_t inited = (void *)swift_initStackObject(v27, v68);
      inited[2] = 2;
      inited[3] = 4;
      inited[4] = 1684957547;
      inited[5] = 0xE400000000000000;
      inited[9] = &type metadata for String;
      inited[6] = 0xD000000000000013;
      uint64_t v29 = "session_id_column" + 0x8000000000000000;
      goto LABEL_9;
    case 2u:
      uint64_t v26 = v81;
      ((void (*)(uint64_t *, uint64_t *, uint64_t))v81[4])(&v56, &v56, v82);
      uint64_t v27 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, Any)>);
      uint64_t inited = (void *)swift_initStackObject(v27, v67);
      inited[2] = 2;
      inited[3] = 4;
      inited[4] = 1684957547;
      inited[5] = 0xE400000000000000;
      inited[9] = &type metadata for String;
      inited[6] = 0x5F64656C6562616CLL;
      uint64_t v29 = (char *)0xED000073656C6966;
LABEL_9:
      inited[7] = v29;
      inited[10] = 1752457584;
      inited[11] = 0xE400000000000000;
      uint64_t v30 = URL.path.getter(v27);
      inited[15] = &type metadata for String;
      inited[12] = v30;
      inited[13] = v31;
      uint64_t v32 = Dictionary.init(dictionaryLiteral:)(inited, &type metadata for String, (char *)&type metadata for Any + 8, &protocol witness table for String);
      ((void (*)(uint64_t *, uint64_t))v26[1])(&v56, v82);
      return v32;
    case 3u:
      uint64_t v33 = v58;
      uint64_t v34 = v59;
      uint64_t v35 = v60;
      uint64_t v36 = v61;
      uint64_t v82 = v62;
      uint64_t v81 = v63;
      outlined consume of Result<_DataTable, Error>(v56, v57);
      goto LABEL_13;
    case 4u:
      uint64_t v81 = v58;
      uint64_t v37 = v59;
      uint64_t v82 = v60;
      char v78 = v61;
      uint64_t v77 = (uint64_t *)v62;
      uint64_t v38 = v63;
      uint64_t v79 = v64;
      __m128 v39 = v65;
      outlined consume of Result<_DataTable, Error>(v56, v57);
      goto LABEL_15;
    case 5u:
      uint64_t v40 = (int *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (DataFrame, sessionIdColumn: String, labelColumn: String, featureColumn: String));
      uint64_t v41 = v40[12];
      uint64_t v33 = *(uint64_t **)((char *)&v56 + v41);
      uint64_t v34 = *(uint64_t *)((char *)&v56 + v41 + 8);
      uint64_t v42 = v40[16];
      uint64_t v35 = *(uint64_t *)((char *)&v56 + v42);
      uint64_t v36 = *(uint64_t **)((char *)&v56 + v42 + 8);
      uint64_t v43 = v40[20];
      uint64_t v82 = *(uint64_t *)((char *)&v56 + v43);
      uint64_t v81 = *(uint64_t **)((char *)&v56 + v43 + 8);
      uint64_t v44 = type metadata accessor for DataFrame(0);
      (*(void (**)(uint64_t *, uint64_t))(*(void *)(v44 - 8) + 8))(&v56, v44);
LABEL_13:
      uint64_t v45 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, Any)>);
      uint64_t v46 = swift_initStackObject(v45, &v56);
      *(void *)(v46 + 16) = 4;
      *(void *)(v46 + 24) = 8;
      *(void *)(v46 + 32) = 1684957547;
      *(void *)(v46 + 40) = 0xE400000000000000;
      *(void *)(v46 + 72) = &type metadata for String;
      *(void *)(v46 + 48) = 0xD000000000000016;
      *(void *)(v46 + 56) = "start_time_column" + 0x8000000000000000;
      *(void *)(v46 + 80) = 0xD000000000000011;
      *(void *)(v46 + 88) = "labeled_keypoints_data" + 0x8000000000000000;
      *(void *)(v46 + 120) = &type metadata for String;
      *(void *)(v46 + 96) = v33;
      *(void *)(v46 + 104) = v34;
      strcpy((char *)(v46 + 128), "label_column");
      *(unsigned char *)(v46 + 141) = 0;
      *(_WORD *)(v46 + 142) = -5120;
      *(void *)(v46 + 168) = &type metadata for String;
      *(void *)(v46 + 144) = v35;
      *(void *)(v46 + 152) = v36;
      strcpy((char *)(v46 + 176), "feature_column");
      *(unsigned char *)(v46 + 191) = -18;
      *(void *)(v46 + 216) = &type metadata for String;
      *(void *)(v46 + 192) = v82;
      *(void *)(v46 + 200) = v81;
      uint64_t v32 = Dictionary.init(dictionaryLiteral:)(v46, &type metadata for String, (char *)&type metadata for Any + 8, &protocol witness table for String);
      break;
    case 6u:
      unint64_t v47 = (int *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (DataFrame, videoColumn: String, labelColumn: String, startTimeColumn: String?, endTimeColumn: String?));
      uint64_t v48 = v47[12];
      uint64_t v81 = *(uint64_t **)((char *)&v56 + v48);
      uint64_t v37 = *(uint64_t *)((char *)&v56 + v48 + 8);
      uint64_t v49 = v47[16];
      uint64_t v82 = *(uint64_t *)((char *)&v56 + v49);
      char v78 = *(uint64_t **)((char *)&v56 + v49 + 8);
      uint64_t v50 = v47[20];
      uint64_t v77 = *(uint64_t **)((char *)&v56 + v50);
      uint64_t v38 = *(uint64_t **)((char *)&v56 + v50 + 8);
      uint64_t v51 = v47[24];
      uint64_t v79 = *(uint64_t **)((char *)&v56 + v51);
      __m128 v39 = *(uint64_t **)((char *)&v56 + v51 + 8);
      uint64_t v52 = type metadata accessor for DataFrame(0);
      (*(void (**)(uint64_t *, uint64_t))(*(void *)(v52 - 8) + 8))(&v56, v52);
LABEL_15:
      uint64_t v53 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, Any)>);
      uint64_t v54 = swift_initStackObject(v53, v66);
      *(void *)(v54 + 16) = 3;
      *(void *)(v54 + 24) = 6;
      *(void *)(v54 + 32) = 1684957547;
      *(void *)(v54 + 40) = 0xE400000000000000;
      *(void *)(v54 + 72) = &type metadata for String;
      *(void *)(v54 + 48) = 0xD000000000000012;
      *(void *)(v54 + 56) = "augmentation_options" + 0x8000000000000000;
      strcpy((char *)(v54 + 80), "video_column");
      *(unsigned char *)(v54 + 93) = 0;
      *(_WORD *)(v54 + 94) = -5120;
      *(void *)(v54 + 120) = &type metadata for String;
      *(void *)(v54 + 96) = v81;
      *(void *)(v54 + 104) = v37;
      strcpy((char *)(v54 + 128), "label_column");
      *(unsigned char *)(v54 + 141) = 0;
      *(_WORD *)(v54 + 142) = -5120;
      *(void *)(v54 + 168) = &type metadata for String;
      *(void *)(v54 + 144) = v82;
      *(void *)(v54 + 152) = v78;
      uint64_t v80 = Dictionary.init(dictionaryLiteral:)(v54, &type metadata for String, (char *)&type metadata for Any + 8, &protocol witness table for String);
      if (v38)
      {
        uint64_t v71 = &type metadata for String;
        uint64_t v69 = v77;
        uint64_t v70 = v38;
        specialized Dictionary.subscript.setter((uint64_t)&v69, 0xD000000000000011, (uint64_t)("labeled_video_data" + 0x8000000000000000));
      }
      if (v39)
      {
        uint64_t v71 = &type metadata for String;
        uint64_t v69 = v79;
        uint64_t v70 = v39;
        specialized Dictionary.subscript.setter((uint64_t)&v69, 0x656D69745F646E65, 0xEF6E6D756C6F635FLL);
      }
LABEL_19:
      uint64_t v32 = v80;
      break;
  }
  return v32;
}

uint64_t MLHandActionClassifier.ModelParameters.ValidationData.dictionary.getter()
{
  int64_t v1 = *(void *)(*(void *)(type metadata accessor for MLHandActionClassifier.DataSource(0) - 8) + 64);
  uint64_t v2 = alloca(v1);
  uint64_t v3 = alloca(v1);
  uint64_t v4 = type metadata accessor for MLHandActionClassifier.ModelParameters.ValidationData(0);
  int64_t v5 = *(void *)(*(void *)(v4 - 8) + 64);
  char v6 = alloca(v5);
  int64_t v7 = alloca(v5);
  outlined init with copy of MLTrainingSessionParameters(v0, (uint64_t)&v23, type metadata accessor for MLHandActionClassifier.ModelParameters.ValidationData);
  int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload(&v23, v4);
  if (!EnumCaseMultiPayload)
  {
    char v13 = v24;
    char v14 = v25;
    uint64_t v15 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, Any)>);
    long long v31 = v23;
    uint64_t inited = (void *)swift_initStackObject(v15, &v23);
    inited[2] = 2;
    inited[3] = 4;
    inited[4] = 1684957547;
    inited[5] = 0xE400000000000000;
    inited[9] = &type metadata for String;
    inited[6] = 0x74696C7073;
    inited[7] = 0xE500000000000000;
    inited[10] = 1635017060;
    inited[11] = 0xE400000000000000;
    long long v28 = v31;
    char v29 = v13;
    char v30 = v14;
    uint64_t v17 = MLSplitStrategy.dictionary.getter();
    inited[15] = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [String : Any]);
    inited[12] = v17;
    uint64_t v18 = (char *)&type metadata for Any + 8;
    uint64_t v19 = inited;
    return Dictionary.init(dictionaryLiteral:)(v19, &type metadata for String, v18, &protocol witness table for String);
  }
  if (EnumCaseMultiPayload != 1)
  {
    uint64_t v20 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, Any)>);
    uint64_t v21 = (void *)swift_initStackObject(v20, v27);
    v21[2] = 1;
    v21[3] = 2;
    v21[4] = 1684957547;
    v21[5] = 0xE400000000000000;
    v21[9] = &type metadata for String;
    v21[6] = 1701736302;
    v21[7] = 0xE400000000000000;
    uint64_t v18 = (char *)&type metadata for Any + 8;
    uint64_t v19 = v21;
    return Dictionary.init(dictionaryLiteral:)(v19, &type metadata for String, v18, &protocol witness table for String);
  }
  outlined init with take of MLClassifierMetrics((uint64_t)&v23, (uint64_t)&v23, type metadata accessor for MLHandActionClassifier.DataSource);
  uint64_t v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, Any)>);
  int64_t v10 = (void *)swift_initStackObject(v9, v26);
  v10[2] = 2;
  v10[3] = 4;
  v10[4] = 1684957547;
  v10[5] = 0xE400000000000000;
  v10[9] = &type metadata for String;
  v10[6] = 0x756F735F61746164;
  v10[7] = 0xEB00000000656372;
  v10[10] = 1635017060;
  v10[11] = 0xE400000000000000;
  uint64_t v11 = MLHandActionClassifier.DataSource.dictionary.getter();
  v10[15] = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [String : Any]);
  v10[12] = v11;
  uint64_t v12 = Dictionary.init(dictionaryLiteral:)(v10, &type metadata for String, (char *)&type metadata for Any + 8, &protocol witness table for String);
  outlined destroy of MLActivityClassifier.ModelParameters((uint64_t)&v23, type metadata accessor for MLHandActionClassifier.DataSource);
  return v12;
}

uint64_t MLHandActionClassifier.ModelParameters.ModelAlgorithmType.dictionary.getter()
{
  uint64_t v0 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, Any)>);
  uint64_t inited = (void *)swift_initStackObject(v0, v3);
  inited[2] = 1;
  inited[3] = 2;
  inited[4] = 0x687469726F676C61;
  inited[5] = 0xE90000000000006DLL;
  inited[9] = &type metadata for String;
  inited[6] = 7234407;
  inited[7] = 0xE300000000000000;
  return Dictionary.init(dictionaryLiteral:)(inited, &type metadata for String, (char *)&type metadata for Any + 8, &protocol witness table for String);
}

void *MLHandActionClassifier.DataSource.table.getter(__m128 a1)
{
  uint64_t v91 = v2;
  uint64_t v92 = v1;
  uint64_t v80 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Column<String>);
  uint64_t v3 = *(void *)(v80 - 8);
  int64_t v4 = *(void *)(v3 + 64);
  int64_t v5 = alloca(v4);
  char v6 = alloca(v4);
  uint64_t v74 = &v72;
  int64_t v7 = *(void *)(*(void *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AnyColumn?)
                             - 8)
                 + 64);
  uint64_t v8 = alloca(v7);
  uint64_t v9 = alloca(v7);
  long long v73 = &v72;
  uint64_t v82 = type metadata accessor for AnyColumn(0);
  uint64_t v79 = *(void *)(v82 - 8);
  int64_t v10 = *(void *)(v79 + 64);
  uint64_t v11 = alloca(v10);
  uint64_t v12 = alloca(v10);
  uint64_t v75 = &v72;
  char v13 = alloca(v10);
  char v14 = alloca(v10);
  uint64_t v83 = &v72;
  uint64_t v15 = type metadata accessor for DataFrame(0);
  uint64_t v85 = *(void *)(v15 - 8);
  int64_t v16 = *(void *)(v85 + 64);
  uint64_t v17 = alloca(v16);
  uint64_t v18 = alloca(v16);
  uint64_t v87 = &v72;
  uint64_t v19 = alloca(v16);
  uint64_t v20 = alloca(v16);
  unint64_t v86 = &v72;
  uint64_t v21 = alloca(v16);
  uint64_t v22 = alloca(v16);
  long long v23 = alloca(v16);
  char v24 = alloca(v16);
  unint64_t v90 = &v72;
  uint64_t v25 = type metadata accessor for MLHandActionClassifier.DataSource(0);
  int64_t v26 = *(void *)(*(void *)(v25 - 8) + 64);
  uint64_t v27 = alloca(v26);
  long long v28 = alloca(v26);
  outlined init with copy of MLTrainingSessionParameters((uint64_t)v91, (uint64_t)&v72, type metadata accessor for MLHandActionClassifier.DataSource);
  switch(swift_getEnumCaseMultiPayload(&v72, v25))
  {
    case 0u:
      char v30 = (int *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (at: URL, annotationFile: URL, videoColumn: String, labelColumn: String, startTimeColumn: String?, endTimeColumn: String?));
      long long v31 = (char *)&v72 + v30[12];
      swift_bridgeObjectRelease(*(uint64_t *)((char *)&v72 + v30[16] + 8));
      swift_bridgeObjectRelease(*(uint64_t *)((char *)&v72 + v30[20] + 8));
      swift_bridgeObjectRelease(*(uint64_t *)((char *)&v72 + v30[24] + 8));
      swift_bridgeObjectRelease(*(uint64_t *)((char *)&v72 + v30[28] + 8));
      uint64_t v32 = type metadata accessor for URL(0);
      uint64_t v33 = *(void (**)(char *, uint64_t))(*(void *)(v32 - 8) + 8);
      v33(v31, v32);
      v33((char *)&v72, v32);
      goto LABEL_15;
    case 1u:
    case 2u:
      uint64_t v29 = type metadata accessor for URL(0);
      (*(void (**)(uint64_t *, uint64_t))(*(void *)(v29 - 8) + 8))(&v72, v29);
LABEL_15:
      uint64_t result = v92;
      *uint64_t v92 = 0;
      *((unsigned char *)result + 8) = -1;
      return result;
    case 3u:
      uint64_t v34 = v72;
      char v35 = (char)v73;
      char v36 = v77;
      char v37 = v79;
      swift_bridgeObjectRelease((_BYTE)v75);
      swift_bridgeObjectRelease(v36);
      swift_bridgeObjectRelease(v37);
      uint64_t v88 = v34;
      char v89 = v35 & 1;
      outlined copy of Result<_DataTable, Error>(v34, v35);
      static MLHandActionClassifier.reformatKeypointsDataTable(table:featureColumn:)(&v88, 0x746E696F7079656BLL, (void *)0xE900000000000073, *(double *)a1.i64);
      outlined consume of Result<_DataTable, Error>(v34, v35);
      goto LABEL_10;
    case 4u:
      uint64_t v38 = v72;
      LOBYTE(v91) = (_BYTE)v73;
      char v39 = v77;
      char v40 = v79;
      char v41 = v81;
      swift_bridgeObjectRelease((_BYTE)v75);
      swift_bridgeObjectRelease(v39);
      swift_bridgeObjectRelease(v41);
      swift_bridgeObjectRelease(v40);
      uint64_t result = v92;
      *uint64_t v92 = v38;
      *((unsigned char *)result + 8) = (_BYTE)v91;
      return result;
    case 5u:
      uint64_t v81 = v3;
      uint64_t v87 = &v72;
      uint64_t v43 = (int *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (DataFrame, sessionIdColumn: String, labelColumn: String, featureColumn: String));
      swift_bridgeObjectRelease(*(uint64_t *)((char *)&v72 + v43[12] + 8));
      swift_bridgeObjectRelease(*(uint64_t *)((char *)&v72 + v43[16] + 8));
      uint64_t v44 = v43[20];
      uint64_t v45 = *(uint64_t *)((char *)&v72 + v44);
      uint64_t v46 = *(void **)((char *)&v72 + v44 + 8);
      unint64_t v86 = (uint64_t *)v15;
      uint64_t v47 = v15;
      uint64_t v48 = v45;
      uint64_t v49 = v85;
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(v85 + 32))(v90, &v72, v47);
      uint64_t v50 = v83;
      uint64_t v84 = v48;
      uint64_t v91 = v46;
      DataFrame.subscript.getter(v48, v46);
      uint64_t v51 = (void *)AnyColumn.wrappedElementType.getter();
      uint64_t v52 = *(void (**)(uint64_t *, uint64_t))(v79 + 8);
      v52(v50, v82);
      if (v51 == &type metadata for String)
      {
        uint64_t v76 = v52;
        uint64_t v61 = v74;
        DataFrame.subscript.getter(v84, v91, &type metadata for String);
        uint64_t v62 = (uint64_t)v73;
        Column<A>.parseAsJSONArrays()();
        (*(void (**)(uint64_t *, uint64_t))(v81 + 8))(v61, v80);
        uint64_t v65 = v82;
        __swift_storeEnumTagSinglePayload(v62, 0, 1, v82);
        int EnumTagSinglePayload = __swift_getEnumTagSinglePayload(v62, 1, v65);
        char v55 = v90;
        if (EnumTagSinglePayload == 1)
        {
          uint64_t v67 = v62;
          uint64_t v56 = (uint64_t)v87;
          uint64_t v54 = v86;
          outlined destroy of AnyColumn?(v67, &demangling cache variable for type metadata for AnyColumn?);
          uint64_t v53 = v85;
        }
        else
        {
          uint64_t v68 = v75;
          uint64_t v69 = v79;
          (*(void (**)(uint64_t *, uint64_t, uint64_t))(v79 + 32))(v75, v62, v65);
          (*(void (**)(uint64_t *, uint64_t *, uint64_t))(v69 + 16))(v83, v68, v65);
          uint64_t v70 = v91;
          swift_bridgeObjectRetain((_BYTE)v91);
          DataFrame.subscript.setter(v83, v84, v70);
          char v55 = v90;
          v76(v68, v65);
          uint64_t v56 = (uint64_t)v87;
          uint64_t v53 = v85;
          uint64_t v54 = v86;
        }
      }
      else
      {
        uint64_t v53 = v49;
        uint64_t v54 = v86;
        char v55 = v90;
        uint64_t v56 = (uint64_t)v87;
      }
      *(double *)a1.i64 = (*(double (**)(uint64_t, uint64_t *, uint64_t *))(v53 + 16))(v56, v55, v54);
      MLDataTable.init(_:convertArraysToShapedArrays:)(v56, 0, a1);
      uint64_t v88 = v77;
      char v89 = v78;
      char v71 = (char)v91;
      static MLHandActionClassifier.reformatKeypointsDataTable(table:featureColumn:)(&v88, v84, v91, *(double *)a1.i64);
      (*(void (**)(uint64_t *, uint64_t *))(v53 + 8))(v55, v54);
      swift_bridgeObjectRelease(v71);
      uint64_t v64 = v92;
      uint64_t result = (void *)v88;
      char v63 = v89;
      goto LABEL_16;
    case 6u:
      char v57 = (int *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (DataFrame, videoColumn: String, labelColumn: String, startTimeColumn: String?, endTimeColumn: String?));
      swift_bridgeObjectRelease(*(uint64_t *)((char *)&v72 + v57[12] + 8));
      swift_bridgeObjectRelease(*(uint64_t *)((char *)&v72 + v57[16] + 8));
      swift_bridgeObjectRelease(*(uint64_t *)((char *)&v72 + v57[20] + 8));
      swift_bridgeObjectRelease(*(uint64_t *)((char *)&v72 + v57[24] + 8));
      uint64_t v58 = v86;
      uint64_t v59 = v85;
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(v85 + 32))(v86, &v72, v15);
      uint64_t v60 = (uint64_t)v87;
      *(double *)a1.i64 = (*(double (**)(uint64_t *, uint64_t *, uint64_t))(v59 + 16))(v87, v58, v15);
      MLDataTable.init(_:convertArraysToShapedArrays:)(v60, 0, a1);
      (*(void (**)(uint64_t *, uint64_t))(v59 + 8))(v58, v15);
LABEL_10:
      uint64_t result = (void *)v88;
      char v63 = v89;
      uint64_t v64 = v92;
LABEL_16:
      *uint64_t v64 = (uint64_t)result;
      *((unsigned char *)v64 + 8) = v63;
      return result;
  }
}

uint64_t outlined destroy of AnyColumn?(uint64_t a1, uint64_t *a2)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(a2);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

unsigned char *assignWithCopy for MLDecisionTreeClassifier.ModelParameters.ValidationData(unsigned char *__dst, unsigned char *__src, uint64_t a3)
{
  if (__dst != __src)
  {
    outlined destroy of MLDecisionTreeClassifier.ModelParameters.ValidationData((uint64_t)__dst);
    int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload(__src, a3);
    if (EnumCaseMultiPayload == 2)
    {
      uint64_t v7 = type metadata accessor for DataFrame(0);
      (*(void (**)(unsigned char *, unsigned char *, uint64_t))(*(void *)(v7 - 8) + 16))(__dst, __src, v7);
      swift_storeEnumTagMultiPayload(__dst, a3, 2);
    }
    else if (EnumCaseMultiPayload == 1)
    {
      uint64_t v5 = *(void *)__src;
      char v6 = __src[8];
      outlined copy of Result<_DataTable, Error>(*(void *)__src, v6);
      *(void *)__dst = v5;
      __dst[8] = v6;
      swift_storeEnumTagMultiPayload(__dst, a3, 1);
    }
    else
    {
      memcpy(__dst, __src, *(void *)(*(void *)(a3 - 8) + 64));
    }
  }
  return __dst;
}

uint64_t type metadata accessor for MLDecisionTreeClassifier.ModelParameters.ValidationData(uint64_t a1)
{
  uint64_t result = type metadata singleton initialization cache for MLDecisionTreeClassifier.ModelParameters.ValidationData;
  if (!type metadata singleton initialization cache for MLDecisionTreeClassifier.ModelParameters.ValidationData) {
    return swift_getSingletonMetadata(a1, &nominal type descriptor for MLDecisionTreeClassifier.ModelParameters.ValidationData);
  }
  return result;
}

void *assignWithTake for MLDecisionTreeClassifier.ModelParameters.ValidationData(void *__dst, void *__src, uint64_t a3)
{
  if (__dst != __src)
  {
    outlined destroy of MLDecisionTreeClassifier.ModelParameters.ValidationData((uint64_t)__dst);
    if (swift_getEnumCaseMultiPayload(__src, a3) == 2)
    {
      uint64_t v4 = type metadata accessor for DataFrame(0);
      (*(void (**)(void *, void *, uint64_t))(*(void *)(v4 - 8) + 32))(__dst, __src, v4);
      swift_storeEnumTagMultiPayload(__dst, a3, 2);
    }
    else
    {
      memcpy(__dst, __src, *(void *)(*(void *)(a3 - 8) + 64));
    }
  }
  return __dst;
}

uint64_t type metadata completion function for MLDecisionTreeClassifier.ModelParameters.ValidationData(uint64_t a1)
{
  v5[0] = &unk_348800;
  v5[1] = &unk_348818;
  uint64_t result = type metadata accessor for DataFrame(319);
  if (v4 <= 0x3F)
  {
    v5[2] = *(void *)(result - 8) + 64;
    swift_initEnumMetadataMultiPayload(a1, 256, 3, v5, v2, v3);
    return 0;
  }
  return result;
}

uint64_t MLDecisionTreeClassifier.ModelParameters.ValidationData.asTable()(__m128 a1)
{
  uint64_t v3 = v1;
  uint64_t v4 = type metadata accessor for DataFrame(0);
  uint64_t v27 = *(void *)(v4 - 8);
  int64_t v5 = *(void *)(v27 + 64);
  char v6 = alloca(v5);
  uint64_t v7 = alloca(v5);
  uint64_t v29 = &v25;
  uint64_t v8 = alloca(v5);
  uint64_t v9 = alloca(v5);
  long long v28 = &v25;
  uint64_t v10 = type metadata accessor for MLDecisionTreeClassifier.ModelParameters.ValidationData(0);
  int64_t v11 = *(void *)(*(void *)(v10 - 8) + 64);
  uint64_t v12 = alloca(v11);
  char v13 = alloca(v11);
  outlined init with copy of MLDecisionTreeClassifier.ModelParameters.ValidationData(v2, (uint64_t)&v25);
  uint64_t result = swift_getEnumCaseMultiPayload(&v25, v10);
  switch((int)result)
  {
    case 0:
      *(void *)uint64_t v3 = 0;
      *(unsigned char *)(v3 + 8) = -1;
      break;
    case 1:
      uint64_t result = v25;
      char v15 = v26;
      goto LABEL_7;
    case 2:
      int64_t v16 = v28;
      uint64_t v17 = v27;
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(v27 + 32))(v28, &v25, v4);
      uint64_t v18 = (uint64_t)v29;
      *(double *)a1.i64 = (*(double (**)(uint64_t *, uint64_t *, uint64_t))(v17 + 16))(v29, v16, v4);
      MLDataTable.init(_:convertArraysToShapedArrays:)(v18, 1, a1);
      (*(void (**)(uint64_t *, uint64_t))(v17 + 8))(v16, v4);
      uint64_t result = v30;
      char v15 = v31;
LABEL_7:
      *(void *)uint64_t v3 = result;
      *(unsigned char *)(v3 + 8) = v15;
      break;
    case 3:
      uint64_t v19 = v3;
      uint64_t empty = tc_v1_sframe_create_empty(0);
      if (!empty) {
        BUG();
      }
      uint64_t v21 = empty;
      uint64_t v22 = type metadata accessor for CMLTable();
      uint64_t v23 = swift_allocObject(v22, 24, 7);
      *(void *)(v23 + 16) = v21;
      uint64_t v24 = type metadata accessor for _DataTable();
      swift_allocObject(v24, 40, 7);
      uint64_t result = _DataTable.init(impl:)(v23);
      *(void *)uint64_t v19 = result;
      *(unsigned char *)(v19 + 8) = 0;
      break;
  }
  return result;
}

uint64_t outlined init with copy of MLDecisionTreeClassifier.ModelParameters.ValidationData(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = type metadata accessor for MLDecisionTreeClassifier.ModelParameters.ValidationData(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v2 - 8) + 16))(a2, a1, v2);
  return a2;
}

uint64_t MLDecisionTreeClassifier.ModelParameters.ValidationData.generateDataFrames(trainingData:)(uint64_t a1, uint64_t a2, void (*a3)(uint64_t *, uint64_t, uint64_t))
{
  uint64_t v55 = v3;
  char v57 = a3;
  uint64_t v56 = (uint64_t *)a2;
  uint64_t v54 = a1;
  uint64_t v5 = type metadata accessor for DataFrame(0);
  uint64_t v58 = *(void *)(v5 - 8);
  int64_t v6 = *(void *)(v58 + 64);
  uint64_t v7 = alloca(v6);
  uint64_t v8 = alloca(v6);
  uint64_t v50 = &v44;
  uint64_t v46 = type metadata accessor for DataFrame.Slice(0);
  uint64_t v51 = *(void *)(v46 - 8);
  int64_t v9 = *(void *)(v51 + 64);
  uint64_t v10 = alloca(v9);
  int64_t v11 = alloca(v9);
  uint64_t v48 = &v44;
  uint64_t v12 = alloca(v9);
  char v13 = alloca(v9);
  uint64_t v53 = &v44;
  char v14 = alloca(v9);
  char v15 = alloca(v9);
  uint64_t v52 = &v44;
  int64_t v16 = *(void *)(*(void *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for DataFrame.Slice?)
                              - 8)
                  + 64);
  uint64_t v17 = alloca(v16);
  uint64_t v18 = alloca(v16);
  uint64_t v47 = &v44;
  uint64_t v19 = alloca(v16);
  uint64_t v20 = alloca(v16);
  uint64_t v49 = &v44;
  uint64_t v21 = type metadata accessor for MLDecisionTreeClassifier.ModelParameters.ValidationData(0);
  int64_t v22 = *(void *)(*(void *)(v21 - 8) + 64);
  uint64_t v23 = alloca(v22);
  uint64_t v24 = alloca(v22);
  outlined init with copy of MLDecisionTreeClassifier.ModelParameters.ValidationData(v4, (uint64_t)&v44);
  switch(swift_getEnumCaseMultiPayload(&v44, v21))
  {
    case 0u:
      uint64_t v58 = v5;
      uint64_t v25 = (uint64_t)v49;
      uint64_t v26 = (uint64_t)v52;
      DataFrame.randomSplit(strategy:)((uint64_t)v49, (uint64_t)v52, (uint64_t)&v44);
      uint64_t v27 = v53;
      uint64_t v28 = v46;
      char v57 = *(void (**)(uint64_t *, uint64_t, uint64_t))(v51 + 16);
      v57(v53, v26, v46);
      DataFrame.init(_:)(v27);
      uint64_t v29 = (uint64_t)v47;
      outlined init with copy of DataFrame.Slice?(v25, (uint64_t)v47);
      if (__swift_getEnumTagSinglePayload(v29, 1, v28) == 1)
      {
        __swift_storeEnumTagSinglePayload((uint64_t)v56, 1, 1, v58);
        uint64_t v30 = *(void (**)(uint64_t *, uint64_t))(v51 + 8);
      }
      else
      {
        char v40 = v53;
        uint64_t v41 = v51;
        (*(void (**)(uint64_t *, uint64_t, uint64_t))(v51 + 32))(v53, v29, v28);
        uint64_t v42 = v48;
        v57(v48, (uint64_t)v40, v28);
        uint64_t v43 = (uint64_t)v56;
        DataFrame.init(_:)(v42);
        uint64_t v30 = *(void (**)(uint64_t *, uint64_t))(v41 + 8);
        v30(v53, v28);
        __swift_storeEnumTagSinglePayload(v43, 0, 1, v58);
      }
      v30(v52, v28);
      return outlined destroy of DataFrame.Slice?((uint64_t)v49);
    case 1u:
      uint64_t v35 = v44;
      char v36 = v45;
      (*(void (**)(uint64_t, void, uint64_t))(v58 + 16))(v54, v57, v5);
      uint64_t v44 = v35;
      char v45 = v36;
      uint64_t v37 = (uint64_t)v56;
      DataFrame.init(_:)((uint64_t)&v44);
      uint64_t v33 = v37;
      goto LABEL_10;
    case 2u:
      char v31 = *(void (**)(uint64_t *, uint64_t *, uint64_t))(v58 + 32);
      v31(v50, &v44, v5);
      if (DataFrameProtocol.isEmpty.getter(v5, &protocol witness table for DataFrame))
      {
        uint64_t v32 = v58;
        (*(void (**)(uint64_t *, uint64_t))(v58 + 8))(v50, v5);
        (*(void (**)(uint64_t, void, uint64_t))(v32 + 16))(v54, v57, v5);
LABEL_7:
        uint64_t v33 = (uint64_t)v56;
        uint64_t v34 = 1;
      }
      else
      {
        (*(void (**)(uint64_t, void, uint64_t))(v58 + 16))(v54, v57, v5);
        uint64_t v38 = (uint64_t)v56;
        v31(v56, v50, v5);
        uint64_t v33 = v38;
LABEL_10:
        uint64_t v34 = 0;
      }
      return __swift_storeEnumTagSinglePayload(v33, v34, 1, v5);
    case 3u:
      (*(void (**)(uint64_t, void, uint64_t))(v58 + 16))(v54, v57, v5);
      goto LABEL_7;
  }
}

void *initializeBufferWithCopyOfBuffer for MLHandPoseClassifier.PersistentParameters(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v4 = (void *)a1;
  int v5 = *(_DWORD *)(*((void *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v18 = *(void *)a2;
    *uint64_t v4 = *(void *)a2;
    uint64_t v4 = (void *)(v18 + ((v5 + 16) & ~v5));
    swift_retain();
  }
  else
  {
    int64_t v6 = a3;
    uint64_t v7 = type metadata accessor for MLHandPoseClassifier.DataSource(0);
    uint64_t v87 = v6;
    uint64_t v88 = v7;
    switch(swift_getEnumCaseMultiPayload(a2, v7))
    {
      case 0u:
        uint64_t v8 = type metadata accessor for URL(0);
        int64_t v9 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v8 - 8) + 16);
        v9(a1, a2, v8);
        uint64_t v10 = (int *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (at: URL, annotationFile: URL, imageColumn: String, labelColumn: String));
        v9(a1 + v10[12], a2 + v10[12], v8);
        uint64_t v11 = v10[16];
        *(void *)(a1 + v11) = *(void *)(a2 + v11);
        uint64_t v12 = *(void *)(a2 + v11 + 8);
        *(void *)((char *)v4 + v11 + 8) = v12;
        uint64_t v13 = v10[20];
        *(void *)((char *)v4 + v13) = *(void *)(a2 + v13);
        uint64_t v14 = *(void *)(a2 + v13 + 8);
        *(void *)((char *)v4 + v13 + 8) = v14;
        swift_bridgeObjectRetain(v12);
        LOBYTE(v12) = v14;
        int64_t v6 = v87;
        swift_bridgeObjectRetain(v12);
        char v15 = v4;
        uint64_t v16 = v88;
        uint64_t v17 = 0;
        break;
      case 1u:
        uint64_t v19 = type metadata accessor for URL(0);
        (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v19 - 8) + 16))(a1, a2, v19);
        uint64_t v79 = 1;
        goto LABEL_12;
      case 2u:
        uint64_t v20 = type metadata accessor for URL(0);
        (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v20 - 8) + 16))(a1, a2, v20);
        uint64_t v79 = 2;
        goto LABEL_12;
      case 3u:
        uint64_t v21 = v6;
        uint64_t v22 = *(void *)a2;
        char v23 = *(unsigned char *)(a2 + 8);
        outlined copy of Result<_DataTable, Error>(*(void *)a2, v23);
        *(void *)a1 = v22;
        *(unsigned char *)(a1 + 8) = v23;
        *(void *)(a1 + 16) = *(void *)(a2 + 16);
        uint64_t v24 = *(void *)(a2 + 24);
        v4[3] = v24;
        v4[4] = *(void *)(a2 + 32);
        uint64_t v25 = *(void *)(a2 + 40);
        v4[5] = v25;
        v4[6] = *(void *)(a2 + 48);
        uint64_t v26 = *(void *)(a2 + 56);
        v4[7] = v26;
        swift_bridgeObjectRetain(v24);
        LOBYTE(v24) = v25;
        int64_t v6 = v21;
        swift_bridgeObjectRetain(v24);
        swift_bridgeObjectRetain(v26);
        uint64_t v80 = 3;
        goto LABEL_10;
      case 4u:
        uint64_t v27 = v6;
        uint64_t v28 = *(void *)a2;
        char v29 = *(unsigned char *)(a2 + 8);
        outlined copy of Result<_DataTable, Error>(*(void *)a2, v29);
        *(void *)a1 = v28;
        *(unsigned char *)(a1 + 8) = v29;
        *(void *)(a1 + 16) = *(void *)(a2 + 16);
        uint64_t v30 = *(void *)(a2 + 24);
        v4[3] = v30;
        v4[4] = *(void *)(a2 + 32);
        uint64_t v31 = *(void *)(a2 + 40);
        v4[5] = v31;
        swift_bridgeObjectRetain(v30);
        LOBYTE(v30) = v31;
        int64_t v6 = v27;
        swift_bridgeObjectRetain(v30);
        uint64_t v80 = 4;
        goto LABEL_10;
      case 5u:
        uint64_t v32 = type metadata accessor for DataFrame(0);
        (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v32 - 8) + 16))(a1, a2, v32);
        uint64_t v33 = (int *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (DataFrame, sessionIdColumn: String, labelColumn: String, featureColumn: String));
        uint64_t v34 = v33[12];
        *(void *)(a1 + v34) = *(void *)(a2 + v34);
        uint64_t v35 = *(void *)(a2 + v34 + 8);
        *(void *)((char *)v4 + v34 + 8) = v35;
        uint64_t v36 = v33[16];
        *(void *)((char *)v4 + v36) = *(void *)(a2 + v36);
        uint64_t v37 = v6;
        uint64_t v38 = *(void *)(a2 + v36 + 8);
        *(void *)((char *)v4 + v36 + 8) = v38;
        uint64_t v39 = v33[20];
        *(void *)((char *)v4 + v39) = *(void *)(a2 + v39);
        uint64_t v40 = *(void *)(a2 + v39 + 8);
        *(void *)((char *)v4 + v39 + 8) = v40;
        swift_bridgeObjectRetain(v35);
        LOBYTE(v35) = v38;
        int64_t v6 = v37;
        swift_bridgeObjectRetain(v35);
        swift_bridgeObjectRetain(v40);
        uint64_t v80 = 5;
LABEL_10:
        uint64_t v17 = v80;
        char v15 = v4;
        uint64_t v16 = v88;
        break;
      case 6u:
        uint64_t v41 = type metadata accessor for DataFrame(0);
        (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v41 - 8) + 16))(a1, a2, v41);
        uint64_t v42 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (DataFrame, imageColumn: String, labelColumn: String));
        uint64_t v43 = *(int *)(v42 + 48);
        *(void *)(a1 + v43) = *(void *)(a2 + v43);
        uint64_t v44 = *(void *)(a2 + v43 + 8);
        *(void *)((char *)v4 + v43 + 8) = v44;
        uint64_t v45 = *(int *)(v42 + 64);
        *(void *)((char *)v4 + v45) = *(void *)(a2 + v45);
        uint64_t v46 = v6;
        uint64_t v47 = *(void *)(a2 + v45 + 8);
        *(void *)((char *)v4 + v45 + 8) = v47;
        swift_bridgeObjectRetain(v44);
        LOBYTE(v44) = v47;
        int64_t v6 = v46;
        swift_bridgeObjectRetain(v44);
        uint64_t v79 = 6;
LABEL_12:
        uint64_t v17 = v79;
        char v15 = v4;
        uint64_t v16 = v7;
        break;
    }
    swift_storeEnumTagMultiPayload(v15, v16, v17);
    uint64_t v48 = v6[5];
    uint64_t v49 = (char *)v4 + v48;
    uint64_t v50 = a2 + v48;
    uint64_t v51 = type metadata accessor for MLHandPoseClassifier.ModelParameters.ValidationData(0);
    if (swift_getEnumCaseMultiPayload(v50, v51) == 1)
    {
      uint64_t v86 = v51;
      switch(swift_getEnumCaseMultiPayload(v50, v88))
      {
        case 0u:
          uint64_t v83 = type metadata accessor for URL(0);
          uint64_t v82 = *(void (**)(char *, uint64_t, uint64_t))(*(void *)(v83 - 8) + 16);
          v82(v49, v50, v83);
          uint64_t v52 = (int *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (at: URL, annotationFile: URL, imageColumn: String, labelColumn: String));
          v82(&v49[v52[12]], v50 + v52[12], v83);
          uint64_t v53 = v52[16];
          *(void *)&v49[v53] = *(void *)(v50 + v53);
          uint64_t v54 = *(void *)(v50 + v53 + 8);
          *(void *)&v49[v53 + 8] = v54;
          uint64_t v55 = v52[20];
          *(void *)&v49[v55] = *(void *)(v50 + v55);
          uint64_t v56 = *(void *)(v50 + v55 + 8);
          *(void *)&v49[v55 + 8] = v56;
          swift_bridgeObjectRetain(v54);
          LOBYTE(v54) = v56;
          char v57 = v49;
          swift_bridgeObjectRetain(v54);
          uint64_t v58 = v49;
          uint64_t v59 = v88;
          uint64_t v60 = 0;
          goto LABEL_26;
        case 1u:
          JUMPOUT(0x801AFLL);
        case 2u:
          JUMPOUT(0x801D0);
        case 3u:
          uint64_t v84 = *(void *)v50;
          char v62 = *(unsigned char *)(v50 + 8);
          outlined copy of Result<_DataTable, Error>(*(void *)v50, v62);
          *(void *)uint64_t v49 = v84;
          v49[8] = v62;
          *((void *)v49 + 2) = *(void *)(v50 + 16);
          *((void *)v49 + 3) = *(void *)(v50 + 24);
          *((void *)v49 + 4) = *(void *)(v50 + 32);
          *((void *)v49 + 5) = *(void *)(v50 + 40);
          *((void *)v49 + 6) = *(void *)(v50 + 48);
          *((void *)v49 + 7) = *(void *)(v50 + 56);
          JUMPOUT(0x80246);
        case 4u:
          uint64_t v85 = *(void *)v50;
          char v63 = *(unsigned char *)(v50 + 8);
          outlined copy of Result<_DataTable, Error>(*(void *)v50, v63);
          *(void *)uint64_t v49 = v85;
          v49[8] = v63;
          *((void *)v49 + 2) = *(void *)(v50 + 16);
          *((void *)v49 + 3) = *(void *)(v50 + 24);
          *((void *)v49 + 4) = *(void *)(v50 + 32);
          JUMPOUT(0x802A1);
        case 5u:
          uint64_t v64 = type metadata accessor for DataFrame(0);
          (*(void (**)(char *, uint64_t, uint64_t))(*(void *)(v64 - 8) + 16))(v49, v50, v64);
          uint64_t v65 = (int *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (DataFrame, sessionIdColumn: String, labelColumn: String, featureColumn: String));
          uint64_t v66 = v65[12];
          *(void *)&v49[v66] = *(void *)(v50 + v66);
          uint64_t v67 = *(void *)(v50 + v66 + 8);
          *(void *)&v49[v66 + 8] = v67;
          uint64_t v68 = v65[16];
          *(void *)&v49[v68] = *(void *)(v50 + v68);
          uint64_t v69 = *(void *)(v50 + v68 + 8);
          *(void *)&v49[v68 + 8] = v69;
          uint64_t v70 = v65[20];
          *(void *)&v49[v70] = *(void *)(v50 + v70);
          uint64_t v71 = *(void *)(v50 + v70 + 8);
          *(void *)&v49[v70 + 8] = v71;
          swift_bridgeObjectRetain(v67);
          swift_bridgeObjectRetain(v69);
          LOBYTE(v67) = v71;
          char v57 = v49;
          swift_bridgeObjectRetain(v67);
          uint64_t v81 = 5;
          goto LABEL_25;
        case 6u:
          uint64_t v72 = type metadata accessor for DataFrame(0);
          (*(void (**)(char *, uint64_t, uint64_t))(*(void *)(v72 - 8) + 16))(v49, v50, v72);
          uint64_t v73 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (DataFrame, imageColumn: String, labelColumn: String));
          uint64_t v74 = *(int *)(v73 + 48);
          *(void *)&v49[v74] = *(void *)(v50 + v74);
          uint64_t v75 = *(void *)(v50 + v74 + 8);
          *(void *)&v49[v74 + 8] = v75;
          uint64_t v76 = *(int *)(v73 + 64);
          *(void *)&v49[v76] = *(void *)(v50 + v76);
          uint64_t v77 = *(void *)(v50 + v76 + 8);
          *(void *)&v49[v76 + 8] = v77;
          swift_bridgeObjectRetain(v75);
          LOBYTE(v75) = v77;
          char v57 = v49;
          swift_bridgeObjectRetain(v75);
          uint64_t v81 = 6;
LABEL_25:
          uint64_t v60 = v81;
          uint64_t v58 = v49;
          uint64_t v59 = v88;
LABEL_26:
          swift_storeEnumTagMultiPayload(v58, v59, v60);
          uint64_t v61 = v87;
          swift_storeEnumTagMultiPayload(v57, v86, 1);
          break;
        case 7u:
          JUMPOUT(0x80418);
      }
    }
    else
    {
      memcpy(v49, (const void *)v50, *(void *)(*(void *)(v51 - 8) + 64));
      uint64_t v61 = v87;
    }
    *(void *)((char *)v4 + v61[6]) = *(void *)(a2 + v61[6]);
    *(void *)((char *)v4 + v61[7]) = *(void *)(a2 + v61[7]);
    *(void *)((char *)v4 + v61[8]) = *(void *)(a2 + v61[8]);
  }
  return v4;
}

uint64_t destroy for MLHandPoseClassifier.PersistentParameters(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = a2;
  uint64_t v4 = type metadata accessor for MLHandPoseClassifier.DataSource(0);
  switch(swift_getEnumCaseMultiPayload(a1, v4))
  {
    case 0u:
      uint64_t v6 = type metadata accessor for URL(0);
      uint64_t v7 = *(void (**)(uint64_t, uint64_t))(*(void *)(v6 - 8) + 8);
      v7(a1, v6);
      uint64_t v8 = (int *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (at: URL, annotationFile: URL, imageColumn: String, labelColumn: String));
      v7(a1 + v8[12], v6);
      uint64_t v2 = a2;
      swift_bridgeObjectRelease(*(void *)(a1 + v8[16] + 8));
      uint64_t v9 = v8[20];
      goto LABEL_8;
    case 1u:
    case 2u:
      uint64_t v5 = type metadata accessor for URL(0);
      (*(void (**)(uint64_t, uint64_t))(*(void *)(v5 - 8) + 8))(a1, v5);
      break;
    case 3u:
      outlined consume of Result<_DataTable, Error>(*(void *)a1, *(_DWORD *)(a1 + 8));
      swift_bridgeObjectRelease(*(void *)(a1 + 24));
      swift_bridgeObjectRelease(*(void *)(a1 + 40));
      uint64_t v10 = *(void *)(a1 + 56);
      goto LABEL_9;
    case 4u:
      outlined consume of Result<_DataTable, Error>(*(void *)a1, *(_DWORD *)(a1 + 8));
      swift_bridgeObjectRelease(*(void *)(a1 + 24));
      uint64_t v10 = *(void *)(a1 + 40);
      goto LABEL_9;
    case 5u:
      uint64_t v11 = type metadata accessor for DataFrame(0);
      (*(void (**)(uint64_t, uint64_t))(*(void *)(v11 - 8) + 8))(a1, v11);
      uint64_t v12 = (int *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (DataFrame, sessionIdColumn: String, labelColumn: String, featureColumn: String));
      swift_bridgeObjectRelease(*(void *)(a1 + v12[12] + 8));
      swift_bridgeObjectRelease(*(void *)(a1 + v12[16] + 8));
      uint64_t v9 = v12[20];
      goto LABEL_8;
    case 6u:
      uint64_t v13 = type metadata accessor for DataFrame(0);
      (*(void (**)(uint64_t, uint64_t))(*(void *)(v13 - 8) + 8))(a1, v13);
      uint64_t v14 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (DataFrame, imageColumn: String, labelColumn: String));
      swift_bridgeObjectRelease(*(void *)(a1 + *(int *)(v14 + 48) + 8));
      uint64_t v9 = *(int *)(v14 + 64);
LABEL_8:
      uint64_t v10 = *(void *)(a1 + v9 + 8);
LABEL_9:
      swift_bridgeObjectRelease(v10);
      break;
    default:
      break;
  }
  uint64_t v15 = *(int *)(v2 + 20) + a1;
  uint64_t v16 = type metadata accessor for MLHandPoseClassifier.ModelParameters.ValidationData(0);
  uint64_t result = swift_getEnumCaseMultiPayload(v15, v16);
  if (result == 1)
  {
    uint64_t result = swift_getEnumCaseMultiPayload(v15, v4);
    switch((int)result)
    {
      case 0:
        uint64_t v19 = type metadata accessor for URL(0);
        uint64_t v20 = *(void (**)(uint64_t, uint64_t))(*(void *)(v19 - 8) + 8);
        v20(v15, v19);
        uint64_t v21 = (int *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (at: URL, annotationFile: URL, imageColumn: String, labelColumn: String));
        v20(v15 + v21[12], v19);
        swift_bridgeObjectRelease(*(void *)(v15 + v21[16] + 8));
        uint64_t v22 = v21[20];
        goto LABEL_19;
      case 1:
      case 2:
        uint64_t v18 = type metadata accessor for URL(0);
        return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v18 - 8) + 8))(v15, v18);
      case 3:
        outlined consume of Result<_DataTable, Error>(*(void *)v15, *(_DWORD *)(v15 + 8));
        swift_bridgeObjectRelease(*(void *)(v15 + 24));
        swift_bridgeObjectRelease(*(void *)(v15 + 40));
        return swift_bridgeObjectRelease(*(void *)(v15 + 56));
      case 4:
        outlined consume of Result<_DataTable, Error>(*(void *)v15, *(_DWORD *)(v15 + 8));
        swift_bridgeObjectRelease(*(void *)(v15 + 24));
        return swift_bridgeObjectRelease(*(void *)(v15 + 40));
      case 5:
        uint64_t v23 = type metadata accessor for DataFrame(0);
        (*(void (**)(uint64_t, uint64_t))(*(void *)(v23 - 8) + 8))(v15, v23);
        uint64_t v24 = (int *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (DataFrame, sessionIdColumn: String, labelColumn: String, featureColumn: String));
        swift_bridgeObjectRelease(*(void *)(v15 + v24[12] + 8));
        swift_bridgeObjectRelease(*(void *)(v15 + v24[16] + 8));
        uint64_t v22 = v24[20];
        goto LABEL_19;
      case 6:
        uint64_t v25 = type metadata accessor for DataFrame(0);
        (*(void (**)(uint64_t, uint64_t))(*(void *)(v25 - 8) + 8))(v15, v25);
        uint64_t v26 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (DataFrame, imageColumn: String, labelColumn: String));
        swift_bridgeObjectRelease(*(void *)(v15 + *(int *)(v26 + 48) + 8));
        uint64_t v22 = *(int *)(v26 + 64);
LABEL_19:
        uint64_t result = swift_bridgeObjectRelease(*(void *)(v15 + v22 + 8));
        break;
      default:
        return result;
    }
  }
  return result;
}

uint64_t initializeWithCopy for MLHandPoseClassifier.PersistentParameters(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = type metadata accessor for MLHandPoseClassifier.DataSource(0);
  uint64_t v84 = a3;
  uint64_t v90 = v6;
  switch(swift_getEnumCaseMultiPayload(a2, v6))
  {
    case 0u:
      uint64_t v7 = type metadata accessor for URL(0);
      uint64_t v8 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 16);
      v8(a1, a2, v7);
      uint64_t v9 = (int *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (at: URL, annotationFile: URL, imageColumn: String, labelColumn: String));
      v8(a1 + v9[12], a2 + v9[12], v7);
      uint64_t v10 = v9[16];
      *(void *)(a1 + v10) = *(void *)(a2 + v10);
      uint64_t v11 = *(void *)(a2 + v10 + 8);
      *(void *)(a1 + v10 + 8) = v11;
      uint64_t v12 = v9[20];
      *(void *)(a1 + v12) = *(void *)(a2 + v12);
      uint64_t v13 = *(void *)(a2 + v12 + 8);
      *(void *)(a1 + v12 + 8) = v13;
      swift_bridgeObjectRetain(v11);
      LOBYTE(v11) = v13;
      a3 = v84;
      swift_bridgeObjectRetain(v11);
      uint64_t v14 = a1;
      uint64_t v15 = v90;
      uint64_t v16 = v90;
      uint64_t v17 = 0;
      break;
    case 1u:
      uint64_t v18 = type metadata accessor for URL(0);
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v18 - 8) + 16))(a1, a2, v18);
      uint64_t v81 = 1;
      goto LABEL_10;
    case 2u:
      uint64_t v19 = type metadata accessor for URL(0);
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v19 - 8) + 16))(a1, a2, v19);
      uint64_t v81 = 2;
      goto LABEL_10;
    case 3u:
      uint64_t v20 = a3;
      uint64_t v21 = *(void *)a2;
      char v22 = *(unsigned char *)(a2 + 8);
      outlined copy of Result<_DataTable, Error>(*(void *)a2, v22);
      *(void *)a1 = v21;
      *(unsigned char *)(a1 + 8) = v22;
      *(void *)(a1 + 16) = *(void *)(a2 + 16);
      uint64_t v23 = *(void *)(a2 + 24);
      *(void *)(a1 + 24) = v23;
      *(void *)(a1 + 32) = *(void *)(a2 + 32);
      uint64_t v24 = *(void *)(a2 + 40);
      *(void *)(a1 + 40) = v24;
      *(void *)(a1 + 48) = *(void *)(a2 + 48);
      uint64_t v25 = *(void *)(a2 + 56);
      *(void *)(a1 + 56) = v25;
      swift_bridgeObjectRetain(v23);
      LOBYTE(v23) = v24;
      a3 = v20;
      swift_bridgeObjectRetain(v23);
      swift_bridgeObjectRetain(v25);
      uint64_t v82 = 3;
      goto LABEL_8;
    case 4u:
      uint64_t v26 = a3;
      uint64_t v27 = *(void *)a2;
      char v28 = *(unsigned char *)(a2 + 8);
      outlined copy of Result<_DataTable, Error>(*(void *)a2, v28);
      *(void *)a1 = v27;
      *(unsigned char *)(a1 + 8) = v28;
      *(void *)(a1 + 16) = *(void *)(a2 + 16);
      uint64_t v29 = *(void *)(a2 + 24);
      *(void *)(a1 + 24) = v29;
      *(void *)(a1 + 32) = *(void *)(a2 + 32);
      uint64_t v30 = *(void *)(a2 + 40);
      *(void *)(a1 + 40) = v30;
      swift_bridgeObjectRetain(v29);
      LOBYTE(v29) = v30;
      a3 = v26;
      swift_bridgeObjectRetain(v29);
      uint64_t v82 = 4;
      goto LABEL_8;
    case 5u:
      uint64_t v31 = type metadata accessor for DataFrame(0);
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v31 - 8) + 16))(a1, a2, v31);
      uint64_t v32 = (int *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (DataFrame, sessionIdColumn: String, labelColumn: String, featureColumn: String));
      uint64_t v33 = v32[12];
      *(void *)(a1 + v33) = *(void *)(a2 + v33);
      uint64_t v34 = *(void *)(a2 + v33 + 8);
      *(void *)(a1 + v33 + 8) = v34;
      uint64_t v35 = v32[16];
      *(void *)(a1 + v35) = *(void *)(a2 + v35);
      uint64_t v36 = a3;
      uint64_t v37 = *(void *)(a2 + v35 + 8);
      *(void *)(a1 + v35 + 8) = v37;
      uint64_t v38 = v32[20];
      *(void *)(a1 + v38) = *(void *)(a2 + v38);
      uint64_t v39 = *(void *)(a2 + v38 + 8);
      *(void *)(a1 + v38 + 8) = v39;
      swift_bridgeObjectRetain(v34);
      LOBYTE(v34) = v37;
      a3 = v36;
      swift_bridgeObjectRetain(v34);
      swift_bridgeObjectRetain(v39);
      uint64_t v82 = 5;
LABEL_8:
      uint64_t v17 = v82;
      uint64_t v14 = a1;
      uint64_t v15 = v90;
      uint64_t v16 = v90;
      break;
    case 6u:
      uint64_t v40 = type metadata accessor for DataFrame(0);
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v40 - 8) + 16))(a1, a2, v40);
      uint64_t v41 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (DataFrame, imageColumn: String, labelColumn: String));
      uint64_t v42 = *(int *)(v41 + 48);
      *(void *)(a1 + v42) = *(void *)(a2 + v42);
      uint64_t v43 = *(void *)(a2 + v42 + 8);
      *(void *)(a1 + v42 + 8) = v43;
      uint64_t v44 = *(int *)(v41 + 64);
      *(void *)(a1 + v44) = *(void *)(a2 + v44);
      uint64_t v45 = a3;
      uint64_t v46 = *(void *)(a2 + v44 + 8);
      *(void *)(a1 + v44 + 8) = v46;
      swift_bridgeObjectRetain(v43);
      LOBYTE(v43) = v46;
      a3 = v45;
      swift_bridgeObjectRetain(v43);
      uint64_t v81 = 6;
LABEL_10:
      uint64_t v17 = v81;
      uint64_t v14 = a1;
      uint64_t v16 = v6;
      uint64_t v15 = v6;
      break;
  }
  swift_storeEnumTagMultiPayload(v14, v15, v17);
  uint64_t v47 = a2;
  uint64_t v48 = a3[5];
  uint64_t v49 = a1 + v48;
  uint64_t v85 = v47;
  uint64_t v50 = v47 + v48;
  uint64_t v51 = type metadata accessor for MLHandPoseClassifier.ModelParameters.ValidationData(0);
  if (swift_getEnumCaseMultiPayload(v50, v51) != 1) {
    JUMPOUT(0x80B47);
  }
  uint64_t v89 = v51;
  switch(swift_getEnumCaseMultiPayload(v50, v16))
  {
    case 0u:
      uint64_t v86 = type metadata accessor for URL(0);
      uint64_t v52 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v86 - 8) + 16);
      uint64_t v53 = v49;
      v52(v49, v50, v86);
      uint64_t v54 = (int *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (at: URL, annotationFile: URL, imageColumn: String, labelColumn: String));
      v52(v54[12] + v53, v50 + v54[12], v86);
      uint64_t v55 = v54[16];
      *(void *)(v53 + v55) = *(void *)(v50 + v55);
      uint64_t v56 = *(void *)(v50 + v55 + 8);
      *(void *)(v53 + v55 + 8) = v56;
      uint64_t v57 = v54[20];
      *(void *)(v53 + v57) = *(void *)(v50 + v57);
      uint64_t v58 = *(void *)(v50 + v57 + 8);
      *(void *)(v53 + v57 + 8) = v58;
      swift_bridgeObjectRetain(v56);
      swift_bridgeObjectRetain(v58);
      JUMPOUT(0x80B42);
    case 1u:
      JUMPOUT(0x80B62);
    case 2u:
      JUMPOUT(0x80B83);
    case 3u:
      uint64_t v87 = *(void *)v50;
      char v59 = *(unsigned char *)(v50 + 8);
      outlined copy of Result<_DataTable, Error>(*(void *)v50, v59);
      uint64_t v60 = (void *)v49;
      *(void *)uint64_t v49 = v87;
      *(unsigned char *)(v49 + 8) = v59;
      *(void *)(v49 + 16) = *(void *)(v50 + 16);
      uint64_t v61 = *(void *)(v50 + 24);
      *(void *)(v49 + 24) = v61;
      *(void *)(v49 + 32) = *(void *)(v50 + 32);
      uint64_t v62 = *(void *)(v50 + 40);
      v60[5] = v62;
      v60[6] = *(void *)(v50 + 48);
      uint64_t v63 = *(void *)(v50 + 56);
      v60[7] = v63;
      swift_bridgeObjectRetain(v61);
      swift_bridgeObjectRetain(v62);
      swift_bridgeObjectRetain(v63);
      uint64_t v72 = 3;
      uint64_t v73 = v60;
      goto LABEL_23;
    case 4u:
      uint64_t v88 = *(void *)v50;
      char v64 = *(unsigned char *)(v50 + 8);
      outlined copy of Result<_DataTable, Error>(*(void *)v50, v64);
      uint64_t v60 = (void *)v49;
      *(void *)uint64_t v49 = v88;
      *(unsigned char *)(v49 + 8) = v64;
      *(void *)(v49 + 16) = *(void *)(v50 + 16);
      uint64_t v65 = *(void *)(v50 + 24);
      *(void *)(v49 + 24) = v65;
      *(void *)(v49 + 32) = *(void *)(v50 + 32);
      uint64_t v66 = *(void *)(v50 + 40);
      *(void *)(v49 + 40) = v66;
      swift_bridgeObjectRetain(v65);
      swift_bridgeObjectRetain(v66);
      uint64_t v83 = 4;
      goto LABEL_22;
    case 5u:
      uint64_t v67 = type metadata accessor for DataFrame(0);
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v67 - 8) + 16))(v49, v50, v67);
      uint64_t v68 = (int *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (DataFrame, sessionIdColumn: String, labelColumn: String, featureColumn: String));
      uint64_t v69 = v68[12];
      *(void *)(v49 + v69) = *(void *)(v50 + v69);
      *(void *)(v49 + v69 + 8) = *(void *)(v50 + v69 + 8);
      uint64_t v70 = v68[16];
      *(void *)(v49 + v70) = *(void *)(v50 + v70);
      *(void *)(v49 + v70 + 8) = *(void *)(v50 + v70 + 8);
      uint64_t v71 = v68[20];
      *(void *)(v49 + v71) = *(void *)(v50 + v71);
      *(void *)(v49 + v71 + 8) = *(void *)(v50 + v71 + 8);
      JUMPOUT(0x80CCFLL);
    case 6u:
      uint64_t v74 = type metadata accessor for DataFrame(0);
      uint64_t v60 = (void *)v49;
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v74 - 8) + 16))(v49, v50, v74);
      uint64_t v75 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (DataFrame, imageColumn: String, labelColumn: String));
      uint64_t v76 = *(int *)(v75 + 48);
      *(void *)(v49 + v76) = *(void *)(v50 + v76);
      uint64_t v77 = *(void *)(v50 + v76 + 8);
      *(void *)(v49 + v76 + 8) = v77;
      uint64_t v78 = *(int *)(v75 + 64);
      *(void *)(v49 + v78) = *(void *)(v50 + v78);
      uint64_t v79 = *(void *)(v50 + v78 + 8);
      *(void *)(v49 + v78 + 8) = v79;
      swift_bridgeObjectRetain(v77);
      swift_bridgeObjectRetain(v79);
      uint64_t v83 = 6;
LABEL_22:
      uint64_t v72 = v83;
      uint64_t v73 = (void *)v49;
LABEL_23:
      swift_storeEnumTagMultiPayload(v73, v90, v72);
      swift_storeEnumTagMultiPayload(v60, v89, 1);
      *(void *)(a1 + v84[6]) = *(void *)(v85 + v84[6]);
      *(void *)(a1 + v84[7]) = *(void *)(v85 + v84[7]);
      *(void *)(a1 + v84[8]) = *(void *)(v85 + v84[8]);
      return a1;
  }
}

uint64_t assignWithCopy for MLHandPoseClassifier.PersistentParameters(uint64_t a1, uint64_t a2, int *a3)
{
  if (a1 != a2)
  {
    outlined destroy of MLActivityClassifier.ModelParameters(a1, type metadata accessor for MLHandPoseClassifier.DataSource);
    uint64_t v6 = type metadata accessor for MLHandPoseClassifier.DataSource(0);
    uint64_t v76 = a3;
    uint64_t v81 = v6;
    switch(swift_getEnumCaseMultiPayload(a2, v6))
    {
      case 0u:
        uint64_t v7 = type metadata accessor for URL(0);
        uint64_t v8 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 16);
        v8(a1, a2, v7);
        uint64_t v9 = (int *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (at: URL, annotationFile: URL, imageColumn: String, labelColumn: String));
        v8(a1 + v9[12], a2 + v9[12], v7);
        uint64_t v10 = v9[16];
        *(void *)(a1 + v10) = *(void *)(a2 + v10);
        uint64_t v11 = *(void *)(a2 + v10 + 8);
        *(void *)(a1 + v10 + 8) = v11;
        uint64_t v12 = v9[20];
        *(void *)(a1 + v12) = *(void *)(a2 + v12);
        uint64_t v13 = *(void *)(a2 + v12 + 8);
        *(void *)(a1 + v12 + 8) = v13;
        swift_bridgeObjectRetain(v11);
        LOBYTE(v11) = v13;
        a3 = v76;
        swift_bridgeObjectRetain(v11);
        uint64_t v14 = a1;
        uint64_t v15 = v81;
        uint64_t v16 = 0;
        break;
      case 1u:
        uint64_t v17 = type metadata accessor for URL(0);
        (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v17 - 8) + 16))(a1, a2, v17);
        uint64_t v73 = 1;
        goto LABEL_11;
      case 2u:
        uint64_t v18 = type metadata accessor for URL(0);
        (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v18 - 8) + 16))(a1, a2, v18);
        uint64_t v73 = 2;
        goto LABEL_11;
      case 3u:
        uint64_t v19 = a3;
        uint64_t v20 = *(void *)a2;
        char v21 = *(unsigned char *)(a2 + 8);
        outlined copy of Result<_DataTable, Error>(*(void *)a2, v21);
        *(void *)a1 = v20;
        *(unsigned char *)(a1 + 8) = v21;
        *(void *)(a1 + 16) = *(void *)(a2 + 16);
        uint64_t v22 = *(void *)(a2 + 24);
        *(void *)(a1 + 24) = v22;
        *(void *)(a1 + 32) = *(void *)(a2 + 32);
        uint64_t v23 = *(void *)(a2 + 40);
        *(void *)(a1 + 40) = v23;
        *(void *)(a1 + 48) = *(void *)(a2 + 48);
        uint64_t v24 = *(void *)(a2 + 56);
        *(void *)(a1 + 56) = v24;
        swift_bridgeObjectRetain(v22);
        LOBYTE(v22) = v23;
        a3 = v19;
        swift_bridgeObjectRetain(v22);
        swift_bridgeObjectRetain(v24);
        uint64_t v74 = 3;
        goto LABEL_9;
      case 4u:
        uint64_t v25 = a3;
        uint64_t v26 = *(void *)a2;
        char v27 = *(unsigned char *)(a2 + 8);
        outlined copy of Result<_DataTable, Error>(*(void *)a2, v27);
        *(void *)a1 = v26;
        *(unsigned char *)(a1 + 8) = v27;
        *(void *)(a1 + 16) = *(void *)(a2 + 16);
        uint64_t v28 = *(void *)(a2 + 24);
        *(void *)(a1 + 24) = v28;
        *(void *)(a1 + 32) = *(void *)(a2 + 32);
        uint64_t v29 = *(void *)(a2 + 40);
        *(void *)(a1 + 40) = v29;
        swift_bridgeObjectRetain(v28);
        LOBYTE(v28) = v29;
        a3 = v25;
        swift_bridgeObjectRetain(v28);
        uint64_t v74 = 4;
        goto LABEL_9;
      case 5u:
        uint64_t v30 = type metadata accessor for DataFrame(0);
        (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v30 - 8) + 16))(a1, a2, v30);
        uint64_t v31 = (int *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (DataFrame, sessionIdColumn: String, labelColumn: String, featureColumn: String));
        uint64_t v32 = v31[12];
        *(void *)(a1 + v32) = *(void *)(a2 + v32);
        uint64_t v33 = *(void *)(a2 + v32 + 8);
        *(void *)(a1 + v32 + 8) = v33;
        uint64_t v34 = v31[16];
        *(void *)(a1 + v34) = *(void *)(a2 + v34);
        uint64_t v35 = a3;
        uint64_t v36 = *(void *)(a2 + v34 + 8);
        *(void *)(a1 + v34 + 8) = v36;
        uint64_t v37 = v31[20];
        *(void *)(a1 + v37) = *(void *)(a2 + v37);
        uint64_t v38 = *(void *)(a2 + v37 + 8);
        *(void *)(a1 + v37 + 8) = v38;
        swift_bridgeObjectRetain(v33);
        LOBYTE(v33) = v36;
        a3 = v35;
        swift_bridgeObjectRetain(v33);
        swift_bridgeObjectRetain(v38);
        uint64_t v74 = 5;
LABEL_9:
        uint64_t v16 = v74;
        uint64_t v14 = a1;
        uint64_t v15 = v81;
        break;
      case 6u:
        uint64_t v39 = type metadata accessor for DataFrame(0);
        (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v39 - 8) + 16))(a1, a2, v39);
        uint64_t v40 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (DataFrame, imageColumn: String, labelColumn: String));
        uint64_t v41 = *(int *)(v40 + 48);
        *(void *)(a1 + v41) = *(void *)(a2 + v41);
        uint64_t v42 = *(void *)(a2 + v41 + 8);
        *(void *)(a1 + v41 + 8) = v42;
        uint64_t v43 = *(int *)(v40 + 64);
        *(void *)(a1 + v43) = *(void *)(a2 + v43);
        uint64_t v44 = a3;
        uint64_t v45 = *(void *)(a2 + v43 + 8);
        *(void *)(a1 + v43 + 8) = v45;
        swift_bridgeObjectRetain(v42);
        LOBYTE(v42) = v45;
        a3 = v44;
        swift_bridgeObjectRetain(v42);
        uint64_t v73 = 6;
LABEL_11:
        uint64_t v16 = v73;
        uint64_t v14 = a1;
        uint64_t v15 = v6;
        break;
    }
    swift_storeEnumTagMultiPayload(v14, v15, v16);
    uint64_t v46 = a3[5];
    uint64_t v47 = (char *)(a1 + v46);
    uint64_t v48 = a2 + v46;
    outlined destroy of MLActivityClassifier.ModelParameters((uint64_t)v47, type metadata accessor for MLHandPoseClassifier.ModelParameters.ValidationData);
    uint64_t v49 = type metadata accessor for MLHandPoseClassifier.ModelParameters.ValidationData(0);
    if (swift_getEnumCaseMultiPayload(v48, v49) == 1)
    {
      uint64_t v80 = v49;
      switch(swift_getEnumCaseMultiPayload(v48, v81))
      {
        case 0u:
          uint64_t v77 = type metadata accessor for URL(0);
          uint64_t v75 = *(void (**)(char *, uint64_t, uint64_t))(*(void *)(v77 - 8) + 16);
          v75(v47, v48, v77);
          uint64_t v50 = (int *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (at: URL, annotationFile: URL, imageColumn: String, labelColumn: String));
          v75(&v47[v50[12]], v48 + v50[12], v77);
          uint64_t v51 = v50[16];
          *(void *)&v47[v51] = *(void *)(v48 + v51);
          uint64_t v52 = *(void *)(v48 + v51 + 8);
          *(void *)&v47[v51 + 8] = v52;
          uint64_t v53 = v50[20];
          *(void *)&v47[v53] = *(void *)(v48 + v53);
          uint64_t v54 = *(void *)(v48 + v53 + 8);
          *(void *)&v47[v53 + 8] = v54;
          swift_bridgeObjectRetain(v52);
          swift_bridgeObjectRetain(v54);
          JUMPOUT(0x811A4);
        case 1u:
          uint64_t v55 = type metadata accessor for URL(0);
          (*(void (**)(char *, uint64_t, uint64_t))(*(void *)(v55 - 8) + 16))(v47, v48, v55);
          swift_storeEnumTagMultiPayload(v47, v81, 1);
          break;
        case 2u:
          uint64_t v56 = type metadata accessor for URL(0);
          (*(void (**)(char *, uint64_t, uint64_t))(*(void *)(v56 - 8) + 16))(v47, v48, v56);
          swift_storeEnumTagMultiPayload(v47, v81, 2);
          break;
        case 3u:
          uint64_t v78 = *(void *)v48;
          char v57 = *(unsigned char *)(v48 + 8);
          outlined copy of Result<_DataTable, Error>(*(void *)v48, v57);
          *(void *)uint64_t v47 = v78;
          v47[8] = v57;
          *((void *)v47 + 2) = *(void *)(v48 + 16);
          uint64_t v58 = *(void *)(v48 + 24);
          *((void *)v47 + 3) = v58;
          *((void *)v47 + 4) = *(void *)(v48 + 32);
          uint64_t v59 = *(void *)(v48 + 40);
          *((void *)v47 + 5) = v59;
          *((void *)v47 + 6) = *(void *)(v48 + 48);
          uint64_t v60 = *(void *)(v48 + 56);
          *((void *)v47 + 7) = v60;
          swift_bridgeObjectRetain(v58);
          swift_bridgeObjectRetain(v59);
          swift_bridgeObjectRetain(v60);
          swift_storeEnumTagMultiPayload(v47, v81, 3);
          break;
        case 4u:
          uint64_t v79 = *(void *)v48;
          char v61 = *(unsigned char *)(v48 + 8);
          outlined copy of Result<_DataTable, Error>(*(void *)v48, v61);
          *(void *)uint64_t v47 = v79;
          v47[8] = v61;
          *((void *)v47 + 2) = *(void *)(v48 + 16);
          *((void *)v47 + 3) = *(void *)(v48 + 24);
          *((void *)v47 + 4) = *(void *)(v48 + 32);
          JUMPOUT(0x812AELL);
        case 5u:
          uint64_t v62 = type metadata accessor for DataFrame(0);
          (*(void (**)(char *, uint64_t, uint64_t))(*(void *)(v62 - 8) + 16))(v47, v48, v62);
          uint64_t v63 = (int *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (DataFrame, sessionIdColumn: String, labelColumn: String, featureColumn: String));
          uint64_t v64 = v63[12];
          *(void *)&v47[v64] = *(void *)(v48 + v64);
          *(void *)&v47[v64 + 8] = *(void *)(v48 + v64 + 8);
          uint64_t v65 = v63[16];
          *(void *)&v47[v65] = *(void *)(v48 + v65);
          *(void *)&v47[v65 + 8] = *(void *)(v48 + v65 + 8);
          *(void *)&v47[v63[20]] = *(void *)(v48 + v63[20]);
          JUMPOUT(0x8132ELL);
        case 6u:
          uint64_t v66 = type metadata accessor for DataFrame(0);
          (*(void (**)(char *, uint64_t, uint64_t))(*(void *)(v66 - 8) + 16))(v47, v48, v66);
          uint64_t v67 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (DataFrame, imageColumn: String, labelColumn: String));
          uint64_t v68 = *(int *)(v67 + 48);
          *(void *)&v47[v68] = *(void *)(v48 + v68);
          uint64_t v69 = *(void *)(v48 + v68 + 8);
          *(void *)&v47[v68 + 8] = v69;
          uint64_t v70 = *(int *)(v67 + 64);
          *(void *)&v47[v70] = *(void *)(v48 + v70);
          uint64_t v71 = *(void *)(v48 + v70 + 8);
          *(void *)&v47[v70 + 8] = v71;
          swift_bridgeObjectRetain(v69);
          swift_bridgeObjectRetain(v71);
          swift_storeEnumTagMultiPayload(v47, v81, 6);
          break;
        case 7u:
          JUMPOUT(0x81424);
      }
      swift_storeEnumTagMultiPayload(v47, v80, 1);
    }
    else
    {
      memcpy(v47, (const void *)v48, *(void *)(*(void *)(v49 - 8) + 64));
    }
    a3 = v76;
  }
  *(void *)(a1 + a3[6]) = *(void *)(a2 + a3[6]);
  *(void *)(a1 + a3[7]) = *(void *)(a2 + a3[7]);
  *(void *)(a1 + a3[8]) = *(void *)(a2 + a3[8]);
  return a1;
}

char *initializeWithTake for MLHandPoseClassifier.PersistentParameters(char *__dst, char *__src, int *a3)
{
  uint64_t v6 = type metadata accessor for MLHandPoseClassifier.DataSource(0);
  uint64_t v36 = a3;
  uint64_t v39 = v6;
  switch(swift_getEnumCaseMultiPayload(__src, v6))
  {
    case 0u:
      uint64_t v7 = type metadata accessor for URL(0);
      uint64_t v37 = *(void (**)(char *, char *, uint64_t))(*(void *)(v7 - 8) + 32);
      v37(__dst, __src, v7);
      uint64_t v8 = (int *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (at: URL, annotationFile: URL, imageColumn: String, labelColumn: String));
      uint64_t v9 = v7;
      a3 = v36;
      v37(&__dst[v8[12]], &__src[v8[12]], v9);
      *(_OWORD *)&__dst[v8[16]] = *(_OWORD *)&__src[v8[16]];
      *(_OWORD *)&__dst[v8[20]] = *(_OWORD *)&__src[v8[20]];
      uint64_t v10 = v6;
      uint64_t v11 = 0;
      goto LABEL_9;
    case 1u:
      uint64_t v12 = type metadata accessor for URL(0);
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v12 - 8) + 32))(__dst, __src, v12);
      uint64_t v32 = 1;
      goto LABEL_8;
    case 2u:
      uint64_t v13 = type metadata accessor for URL(0);
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v13 - 8) + 32))(__dst, __src, v13);
      uint64_t v32 = 2;
      goto LABEL_8;
    case 5u:
      uint64_t v14 = type metadata accessor for DataFrame(0);
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v14 - 8) + 32))(__dst, __src, v14);
      uint64_t v15 = (int *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (DataFrame, sessionIdColumn: String, labelColumn: String, featureColumn: String));
      *(_OWORD *)&__dst[v15[12]] = *(_OWORD *)&__src[v15[12]];
      *(_OWORD *)&__dst[v15[16]] = *(_OWORD *)&__src[v15[16]];
      *(_OWORD *)&__dst[v15[20]] = *(_OWORD *)&__src[v15[20]];
      uint64_t v32 = 5;
      goto LABEL_8;
    case 6u:
      uint64_t v16 = type metadata accessor for DataFrame(0);
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v16 - 8) + 32))(__dst, __src, v16);
      uint64_t v17 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (DataFrame, imageColumn: String, labelColumn: String));
      *(_OWORD *)&__dst[*(int *)(v17 + 48)] = *(_OWORD *)&__src[*(int *)(v17 + 48)];
      *(_OWORD *)&__dst[*(int *)(v17 + 64)] = *(_OWORD *)&__src[*(int *)(v17 + 64)];
      uint64_t v32 = 6;
LABEL_8:
      uint64_t v11 = v32;
      uint64_t v10 = v6;
LABEL_9:
      swift_storeEnumTagMultiPayload(__dst, v10, v11);
      break;
    default:
      memcpy(__dst, __src, *(void *)(*(void *)(v6 - 8) + 64));
      break;
  }
  uint64_t v18 = a3[5];
  uint64_t v19 = &__dst[v18];
  uint64_t v20 = &__src[v18];
  uint64_t v21 = type metadata accessor for MLHandPoseClassifier.ModelParameters.ValidationData(0);
  if (swift_getEnumCaseMultiPayload(v20, v21) == 1)
  {
    switch(swift_getEnumCaseMultiPayload(v20, v39))
    {
      case 0u:
        uint64_t v34 = type metadata accessor for URL(0);
        uint64_t v38 = *(void (**)(char *, char *, uint64_t))(*(void *)(v34 - 8) + 32);
        v38(v19, v20, v34);
        uint64_t v35 = (int *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (at: URL, annotationFile: URL, imageColumn: String, labelColumn: String));
        v38(&v19[v35[12]], &v20[v35[12]], v34);
        *(_OWORD *)&v19[v35[16]] = *(_OWORD *)&v20[v35[16]];
        *(_OWORD *)&v19[v35[20]] = *(_OWORD *)&v20[v35[20]];
        uint64_t v22 = v19;
        uint64_t v23 = v39;
        uint64_t v24 = 0;
        goto LABEL_20;
      case 1u:
        uint64_t v25 = type metadata accessor for URL(0);
        (*(void (**)(char *, char *, uint64_t))(*(void *)(v25 - 8) + 32))(v19, v20, v25);
        uint64_t v33 = 1;
        goto LABEL_19;
      case 2u:
        uint64_t v26 = type metadata accessor for URL(0);
        (*(void (**)(char *, char *, uint64_t))(*(void *)(v26 - 8) + 32))(v19, v20, v26);
        uint64_t v33 = 2;
        goto LABEL_19;
      case 5u:
        uint64_t v27 = type metadata accessor for DataFrame(0);
        (*(void (**)(char *, char *, uint64_t))(*(void *)(v27 - 8) + 32))(v19, v20, v27);
        uint64_t v28 = (int *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (DataFrame, sessionIdColumn: String, labelColumn: String, featureColumn: String));
        *(_OWORD *)&v19[v28[12]] = *(_OWORD *)&v20[v28[12]];
        *(_OWORD *)&v19[v28[16]] = *(_OWORD *)&v20[v28[16]];
        *(_OWORD *)&v19[v28[20]] = *(_OWORD *)&v20[v28[20]];
        uint64_t v33 = 5;
        goto LABEL_19;
      case 6u:
        uint64_t v29 = type metadata accessor for DataFrame(0);
        (*(void (**)(char *, char *, uint64_t))(*(void *)(v29 - 8) + 32))(v19, v20, v29);
        uint64_t v30 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (DataFrame, imageColumn: String, labelColumn: String));
        *(_OWORD *)&v19[*(int *)(v30 + 48)] = *(_OWORD *)&v20[*(int *)(v30 + 48)];
        *(_OWORD *)&v19[*(int *)(v30 + 64)] = *(_OWORD *)&v20[*(int *)(v30 + 64)];
        uint64_t v33 = 6;
LABEL_19:
        uint64_t v24 = v33;
        uint64_t v22 = v19;
        uint64_t v23 = v39;
LABEL_20:
        swift_storeEnumTagMultiPayload(v22, v23, v24);
        break;
      default:
        memcpy(v19, v20, *(void *)(*(void *)(v39 - 8) + 64));
        break;
    }
    swift_storeEnumTagMultiPayload(v19, v21, 1);
  }
  else
  {
    memcpy(v19, v20, *(void *)(*(void *)(v21 - 8) + 64));
  }
  *(void *)&__dst[v36[6]] = *(void *)&__src[v36[6]];
  *(void *)&__dst[v36[7]] = *(void *)&__src[v36[7]];
  *(void *)&__dst[v36[8]] = *(void *)&__src[v36[8]];
  return __dst;
}

char *assignWithTake for MLHandPoseClassifier.PersistentParameters(char *__dst, char *__src, int *a3)
{
  if (__dst != __src)
  {
    outlined destroy of MLActivityClassifier.ModelParameters((uint64_t)__dst, type metadata accessor for MLHandPoseClassifier.DataSource);
    uint64_t v6 = type metadata accessor for MLHandPoseClassifier.DataSource(0);
    uint64_t v37 = v6;
    switch(swift_getEnumCaseMultiPayload(__src, v6))
    {
      case 0u:
        uint64_t v7 = type metadata accessor for URL(0);
        uint64_t v38 = *(void (**)(char *, char *, uint64_t))(*(void *)(v7 - 8) + 32);
        v38(__dst, __src, v7);
        uint64_t v8 = (int *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (at: URL, annotationFile: URL, imageColumn: String, labelColumn: String));
        v38(&__dst[v8[12]], &__src[v8[12]], v7);
        *(_OWORD *)&__dst[v8[16]] = *(_OWORD *)&__src[v8[16]];
        *(_OWORD *)&__dst[v8[20]] = *(_OWORD *)&__src[v8[20]];
        uint64_t v9 = v37;
        uint64_t v10 = 0;
        goto LABEL_10;
      case 1u:
        uint64_t v11 = type metadata accessor for URL(0);
        (*(void (**)(char *, char *, uint64_t))(*(void *)(v11 - 8) + 32))(__dst, __src, v11);
        uint64_t v32 = 1;
        goto LABEL_9;
      case 2u:
        uint64_t v12 = type metadata accessor for URL(0);
        (*(void (**)(char *, char *, uint64_t))(*(void *)(v12 - 8) + 32))(__dst, __src, v12);
        uint64_t v32 = 2;
        goto LABEL_9;
      case 5u:
        uint64_t v13 = type metadata accessor for DataFrame(0);
        (*(void (**)(char *, char *, uint64_t))(*(void *)(v13 - 8) + 32))(__dst, __src, v13);
        uint64_t v14 = (int *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (DataFrame, sessionIdColumn: String, labelColumn: String, featureColumn: String));
        *(_OWORD *)&__dst[v14[12]] = *(_OWORD *)&__src[v14[12]];
        *(_OWORD *)&__dst[v14[16]] = *(_OWORD *)&__src[v14[16]];
        *(_OWORD *)&__dst[v14[20]] = *(_OWORD *)&__src[v14[20]];
        uint64_t v32 = 5;
        goto LABEL_9;
      case 6u:
        uint64_t v15 = type metadata accessor for DataFrame(0);
        (*(void (**)(char *, char *, uint64_t))(*(void *)(v15 - 8) + 32))(__dst, __src, v15);
        uint64_t v16 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (DataFrame, imageColumn: String, labelColumn: String));
        *(_OWORD *)&__dst[*(int *)(v16 + 48)] = *(_OWORD *)&__src[*(int *)(v16 + 48)];
        *(_OWORD *)&__dst[*(int *)(v16 + 64)] = *(_OWORD *)&__src[*(int *)(v16 + 64)];
        uint64_t v32 = 6;
LABEL_9:
        uint64_t v10 = v32;
        uint64_t v9 = v6;
LABEL_10:
        swift_storeEnumTagMultiPayload(__dst, v9, v10);
        break;
      default:
        memcpy(__dst, __src, *(void *)(*(void *)(v6 - 8) + 64));
        break;
    }
    uint64_t v39 = a3;
    uint64_t v17 = a3[5];
    uint64_t v18 = &__dst[v17];
    uint64_t v19 = &__src[v17];
    outlined destroy of MLActivityClassifier.ModelParameters((uint64_t)v18, type metadata accessor for MLHandPoseClassifier.ModelParameters.ValidationData);
    uint64_t v20 = type metadata accessor for MLHandPoseClassifier.ModelParameters.ValidationData(0);
    if (swift_getEnumCaseMultiPayload(v19, v20) == 1)
    {
      uint64_t v36 = v20;
      switch(swift_getEnumCaseMultiPayload(v19, v37))
      {
        case 0u:
          uint64_t v34 = type metadata accessor for URL(0);
          uint64_t v35 = *(void (**)(char *, char *, uint64_t))(*(void *)(v34 - 8) + 32);
          v35(v18, v19, v34);
          uint64_t v21 = (int *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (at: URL, annotationFile: URL, imageColumn: String, labelColumn: String));
          v35(&v18[v21[12]], &v19[v21[12]], v34);
          *(_OWORD *)&v18[v21[16]] = *(_OWORD *)&v19[v21[16]];
          *(_OWORD *)&v18[v21[20]] = *(_OWORD *)&v19[v21[20]];
          uint64_t v22 = v18;
          uint64_t v23 = v37;
          uint64_t v24 = 0;
          goto LABEL_21;
        case 1u:
          uint64_t v25 = type metadata accessor for URL(0);
          (*(void (**)(char *, char *, uint64_t))(*(void *)(v25 - 8) + 32))(v18, v19, v25);
          uint64_t v33 = 1;
          goto LABEL_20;
        case 2u:
          uint64_t v26 = type metadata accessor for URL(0);
          (*(void (**)(char *, char *, uint64_t))(*(void *)(v26 - 8) + 32))(v18, v19, v26);
          uint64_t v33 = 2;
          goto LABEL_20;
        case 5u:
          uint64_t v27 = type metadata accessor for DataFrame(0);
          (*(void (**)(char *, char *, uint64_t))(*(void *)(v27 - 8) + 32))(v18, v19, v27);
          uint64_t v28 = (int *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (DataFrame, sessionIdColumn: String, labelColumn: String, featureColumn: String));
          *(_OWORD *)&v18[v28[12]] = *(_OWORD *)&v19[v28[12]];
          *(_OWORD *)&v18[v28[16]] = *(_OWORD *)&v19[v28[16]];
          *(_OWORD *)&v18[v28[20]] = *(_OWORD *)&v19[v28[20]];
          uint64_t v33 = 5;
          goto LABEL_20;
        case 6u:
          uint64_t v29 = type metadata accessor for DataFrame(0);
          (*(void (**)(char *, char *, uint64_t))(*(void *)(v29 - 8) + 32))(v18, v19, v29);
          uint64_t v30 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (DataFrame, imageColumn: String, labelColumn: String));
          *(_OWORD *)&v18[*(int *)(v30 + 48)] = *(_OWORD *)&v19[*(int *)(v30 + 48)];
          *(_OWORD *)&v18[*(int *)(v30 + 64)] = *(_OWORD *)&v19[*(int *)(v30 + 64)];
          uint64_t v33 = 6;
LABEL_20:
          uint64_t v24 = v33;
          uint64_t v22 = v18;
          uint64_t v23 = v37;
LABEL_21:
          swift_storeEnumTagMultiPayload(v22, v23, v24);
          break;
        default:
          memcpy(v18, v19, *(void *)(*(void *)(v37 - 8) + 64));
          break;
      }
      a3 = v39;
      swift_storeEnumTagMultiPayload(v18, v36, 1);
    }
    else
    {
      memcpy(v18, v19, *(void *)(*(void *)(v20 - 8) + 64));
      a3 = v39;
    }
  }
  *(void *)&__dst[a3[6]] = *(void *)&__src[a3[6]];
  *(void *)&__dst[a3[7]] = *(void *)&__src[a3[7]];
  *(void *)&__dst[a3[8]] = *(void *)&__src[a3[8]];
  return __dst;
}

uint64_t getEnumTagSinglePayload for MLHandPoseClassifier.PersistentParameters(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_81C89);
}

uint64_t sub_81C89(uint64_t a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4 = a1;
  uint64_t v5 = type metadata accessor for MLHandPoseClassifier.DataSource(0);
  if (*(_DWORD *)(*(void *)(v5 - 8) + 84) != a2)
  {
    uint64_t v5 = type metadata accessor for MLHandPoseClassifier.ModelParameters.ValidationData(0);
    uint64_t v4 = *(int *)(a3 + 20) + a1;
  }
  return __swift_getEnumTagSinglePayload(v4, a2, v5);
}

uint64_t storeEnumTagSinglePayload for MLHandPoseClassifier.PersistentParameters(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_81CF0);
}

uint64_t sub_81CF0(uint64_t a1, unsigned int a2, int a3, uint64_t a4)
{
  uint64_t v6 = a1;
  uint64_t v7 = type metadata accessor for MLHandPoseClassifier.DataSource(0);
  if (*(_DWORD *)(*(void *)(v7 - 8) + 84) != a3)
  {
    uint64_t v7 = type metadata accessor for MLHandPoseClassifier.ModelParameters.ValidationData(0);
    uint64_t v6 = *(int *)(a4 + 20) + a1;
  }
  return __swift_storeEnumTagSinglePayload(v6, a2, a2, v7);
}

uint64_t type metadata accessor for MLHandPoseClassifier.PersistentParameters(uint64_t a1)
{
  uint64_t result = type metadata singleton initialization cache for MLHandPoseClassifier.PersistentParameters;
  if (!type metadata singleton initialization cache for MLHandPoseClassifier.PersistentParameters) {
    return swift_getSingletonMetadata(a1, &nominal type descriptor for MLHandPoseClassifier.PersistentParameters);
  }
  return result;
}

uint64_t type metadata completion function for MLHandPoseClassifier.PersistentParameters(uint64_t a1)
{
  uint64_t result = type metadata accessor for MLHandPoseClassifier.DataSource(319);
  if (v2 <= 0x3F)
  {
    v4[0] = *(void *)(result - 8) + 64;
    uint64_t result = type metadata accessor for MLHandPoseClassifier.ModelParameters.ValidationData(319);
    if (v3 <= 0x3F)
    {
      v4[1] = *(void *)(result - 8) + 64;
      v4[2] = (char *)&value witness table for Builtin.Int64 + 64;
      v4[3] = (char *)&value witness table for Builtin.Int64 + 64;
      v4[4] = (char *)&value witness table for Builtin.Int64 + 64;
      v4[5] = (char *)&value witness table for () + 64;
      swift_initStructMetadata(a1, 256, 6, v4, a1 + 16);
      return 0;
    }
  }
  return result;
}

NSURL *MLHandPoseClassifier.PersistentParameters.init(sessionDirectory:)(uint64_t *a1)
{
  uint64_t v130 = v2;
  unsigned int v140 = a1;
  unint64_t v3 = v1;
  int64_t v4 = *(void *)(*(void *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for MLHandPoseClassifier.ModelParameters.ValidationData?)
                             - 8)
                 + 64);
  uint64_t v5 = alloca(v4);
  uint64_t v6 = alloca(v4);
  uint64_t v117 = &v114;
  uint64_t v126 = type metadata accessor for MLHandPoseClassifier.ModelParameters.ValidationData(0);
  int64_t v7 = *(void *)(*(void *)(v126 - 8) + 64);
  uint64_t v8 = alloca(v7);
  uint64_t v9 = alloca(v7);
  uint64_t v118 = &v114;
  int64_t v10 = *(void *)(*(void *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for MLHandPoseClassifier.DataSource?)
                              - 8)
                  + 64);
  uint64_t v11 = alloca(v10);
  uint64_t v12 = alloca(v10);
  uint64_t v115 = &v114;
  uint64_t v123 = type metadata accessor for MLHandPoseClassifier.DataSource(0);
  int64_t v13 = *(void *)(*(void *)(v123 - 8) + 64);
  uint64_t v14 = alloca(v13);
  uint64_t v15 = alloca(v13);
  uint64_t v116 = &v114;
  uint64_t v125 = type metadata accessor for URL(0);
  uint64_t v134 = *(void (**)(uint64_t *, uint64_t *, uint64_t))(v125 - 8);
  int64_t v16 = *((void *)v134 + 8);
  uint64_t v17 = alloca(v16);
  uint64_t v18 = alloca(v16);
  uint64_t v124 = &v114;
  uint64_t v19 = alloca(v16);
  uint64_t v20 = alloca(v16);
  uint64_t v122 = &v114;
  uint64_t v21 = alloca(v16);
  uint64_t v22 = alloca(v16);
  BOOL v135 = &v114;
  uint64_t v23 = alloca(v16);
  uint64_t v24 = alloca(v16);
  uint64_t v25 = alloca(v16);
  uint64_t v26 = alloca(v16);
  uint64_t v27 = type metadata accessor for MLHandPoseClassifier.PersistentParameters(0);
  uint64_t v28 = v3;
  uint64_t v114 = *(int *)(v27 + 24);
  *(void *)((char *)v3 + v114) = 32;
  uint64_t v29 = *(int *)(v27 + 28);
  uint64_t v129 = v28;
  *(void *)((char *)v28 + v29) = 80;
  long long v136 = &v114;
  URL.appendingPathComponent(_:)(0x69746164696C6176, 0xEE00617461446E6FLL);
  URL.appendingPathComponent(_:)(0xD000000000000010, "ObjectDetectorMetrics." + 0x8000000000000000);
  uint64_t v30 = v130;
  uint64_t v31 = Data.init(contentsOf:options:)(&v114, 0);
  uint64_t v130 = v30;
  if (v30)
  {
    uint64_t v33 = v125;
    uint64_t v34 = (void (*)(uint64_t, uint64_t))*((void *)v134 + 1);
    v34(v140, v125);
    v34((uint64_t)&v114, v33);
    v34((uint64_t)v136, v33);
    return __stack_chk_guard;
  }
  unint64_t v35 = v32;
  uint64_t v119 = v29;
  uint64_t v128 = v27;
  uint64_t v36 = v125;
  uint64_t v37 = v31;
  uint64_t v138 = (void (*)(uint64_t *, uint64_t))*((void *)v134 + 1);
  v138(&v114, v125);
  uint64_t v38 = objc_opt_self(NSPropertyListSerialization);
  uint64_t v132 = v37;
  v39.super.Class isa = Data._bridgeToObjectiveC()().super.isa;
  unint64_t v131 = v35;
  Class isa = v39.super.isa;
  uint64_t v41 = v36;
  v145[0] = 0;
  id v42 = [v38 propertyListWithData:v39.super.isa options:0 format:0 error:v145];
  id v43 = v42;

  id v44 = v145[0];
  if (!v43)
  {
    uint64_t v66 = v44;
    _convertNSErrorToError(_:)(v44);

    swift_willThrow(v66, "propertyListWithData:options:format:error:", v67, v68, v69, v70);
    outlined consume of Data._Representation(v132, v131);
    uint64_t v63 = v138;
    v138((uint64_t *)v140, v41);
    uint64_t v64 = v136;
    uint64_t v65 = v41;
    goto LABEL_17;
  }
  uint64_t v45 = v36;
  _bridgeAnyObjectToAny(_:)(v43);
  swift_unknownObjectRelease(v43);
  outlined init with copy of Any((uint64_t)v166, (uint64_t)v145);
  uint64_t v46 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [String : Any]);
  if (!swift_dynamicCast(v165, v145, (char *)&type metadata for Any + 8, v46, 6))
  {
    uint64_t v71 = lazy protocol witness table accessor for type MLCreateError and conformance MLCreateError();
    swift_allocError(&type metadata for MLCreateError, v71, 0, 0);
    *(void *)uint64_t v72 = 0xD000000000000037;
    *(void *)(v72 + 8) = "parameters.plist" + 0x8000000000000000;
    *(_OWORD *)(v72 + 16) = 0;
    *(_OWORD *)(v72 + 32) = 0;
    *(unsigned char *)(v72 + 48) = 0;
    swift_willThrow(&type metadata for MLCreateError, v71, v72, v73, v74, v75);
    outlined consume of Data._Representation(v132, v131);
    uint64_t v63 = v138;
    v138((uint64_t *)v140, v41);
    __swift_destroy_boxed_opaque_existential_1Tm(v166);
    uint64_t v64 = v136;
    uint64_t v65 = v41;
    goto LABEL_17;
  }
  uint64_t v133 = (char *)&type metadata for Any + 8;
  uint64_t v127 = v46;
  uint64_t v47 = v165[0];
  specialized Dictionary.subscript.getter(0x69735F6863746162, 0xEA0000000000657ALL, v165[0]);
  uint64_t v48 = (void (*)(uint64_t, uint64_t))v138;
  if (!v146)
  {
    swift_bridgeObjectRelease(v47);
    _s11TabularData9AnyColumnVSgWOhTm_0((uint64_t)v145, &demangling cache variable for type metadata for Any?);
LABEL_20:
    uint64_t v76 = v140;
LABEL_24:
    uint64_t v77 = lazy protocol witness table accessor for type MLCreateError and conformance MLCreateError();
    swift_allocError(&type metadata for MLCreateError, v77, 0, 0);
    *(void *)uint64_t v78 = 0xD00000000000003FLL;
    *(void *)(v78 + 8) = "labeled_directories" + 0x8000000000000000;
    *(_OWORD *)(v78 + 16) = 0;
    *(_OWORD *)(v78 + 32) = 0;
    *(unsigned char *)(v78 + 48) = 0;
    swift_willThrow(&type metadata for MLCreateError, v77, v78, v79, v80, v81);
    outlined consume of Data._Representation(v132, v131);
    v48(v76, v45);
    __swift_destroy_boxed_opaque_existential_1Tm(v166);
    v48((uint64_t)v136, v45);
    return __stack_chk_guard;
  }
  uint64_t v137 = v47;
  if (!swift_dynamicCast(v165, v145, v133, &type metadata for Int, 6))
  {
    swift_bridgeObjectRelease(v137);
    goto LABEL_20;
  }
  uint64_t v49 = v165[0];
  char v50 = v137;
  specialized Dictionary.subscript.getter(0x726574695F78616DLL, 0xEE00736E6F697461, v137);
  if (!v146) {
    goto LABEL_21;
  }
  if (!swift_dynamicCast(v165, v145, v133, &type metadata for Int, 6))
  {
LABEL_22:
    swift_bridgeObjectRelease(v137);
    goto LABEL_23;
  }
  uint64_t v120 = v165[0];
  char v50 = v137;
  specialized Dictionary.subscript.getter(0xD000000000000014, (uint64_t)("Empty training input." + 0x8000000000000000), v137);
  if (!v146)
  {
LABEL_21:
    swift_bridgeObjectRelease(v50);
    _s11TabularData9AnyColumnVSgWOhTm_0((uint64_t)v145, &demangling cache variable for type metadata for Any?);
LABEL_23:
    uint64_t v76 = v140;
    uint64_t v48 = (void (*)(uint64_t, uint64_t))v138;
    goto LABEL_24;
  }
  if (!swift_dynamicCast(v165, v145, v133, &type metadata for Int, 6)) {
    goto LABEL_22;
  }
  uint64_t v121 = v165[0];
  uint64_t v51 = v129;
  *(void *)((char *)v129 + v114) = v49;
  *(void *)((char *)v51 + v119) = v120;
  URL.appendingPathComponent(_:)(1635017060, 0xE400000000000000);
  specialized Dictionary.subscript.getter(0x676E696E69617274, 0xE800000000000000, v137);
  if (!v165[3])
  {
    _s11TabularData9AnyColumnVSgWOhTm_0((uint64_t)v165, &demangling cache variable for type metadata for Any?);
    uint64_t v83 = v45;
    uint64_t v84 = v135;
    uint64_t v53 = v122;
LABEL_28:
    uint64_t v85 = (void (*)(uint64_t *, uint64_t *, uint64_t))*((void *)v134 + 2);
    v85(v53, v84, v83);
    LOBYTE(v145[0]) = 1;
    *(_DWORD *)((char *)v145 + 1) = *(_DWORD *)v144;
    HIDWORD(v145[0]) = *(_DWORD *)&v144[3];
    v145[1] = &stru_20 + 12;
    v145[2] = (id)0xE100000000000000;
    uint64_t v146 = 0;
    char v139 = 1;
    unint64_t v147 = 0xE000000000000000;
    uint64_t v148 = 92;
    unint64_t v149 = 0xE100000000000000;
    char v150 = 1;
    *(_DWORD *)uint64_t v151 = *(_DWORD *)v143;
    *(_DWORD *)&v151[3] = *(_DWORD *)&v143[3];
    uint64_t v152 = 34;
    unint64_t v153 = 0xE100000000000000;
    char v154 = 1;
    *(_DWORD *)&v155[3] = *(_DWORD *)&v142[3];
    *(_DWORD *)uint64_t v155 = *(_DWORD *)v142;
    unint64_t v156 = &outlined read-only object #0 of default argument 1 of MLDataTable.init(contentsOf:options:);
    uint64_t v157 = 10;
    unint64_t v158 = 0xE100000000000000;
    long long v159 = 0;
    char v160 = 1;
    *(_DWORD *)id v161 = *(_DWORD *)v141;
    *(_DWORD *)&v161[3] = *(_DWORD *)&v141[3];
    uint64_t v162 = 0;
    uint64_t v86 = v130;
    MLDataTable.init(contentsOf:options:)(v53, v145);
    uint64_t v130 = v86;
    if (v86)
    {
      outlined consume of Data._Representation(v132, v131);
      swift_bridgeObjectRelease(v137);
      uint64_t v87 = v138;
      v138((uint64_t *)v140, v83);
      v87(v135, v83);
      __swift_destroy_boxed_opaque_existential_1Tm(v166);
      v87(v136, v83);
      return __stack_chk_guard;
    }
    uint64_t v134 = v85;
    char v88 = v164;
    uint64_t v89 = v129;
    void *v129 = v163;
    *((unsigned char *)v89 + 8) = v88;
    v89[2] = 0x7461506567616D69;
    v89[3] = 0xE900000000000068;
    v89[4] = 0x6C6562616CLL;
    v89[5] = 0xE500000000000000;
    swift_storeEnumTagMultiPayload(v89, v123, 4);
    uint64_t v90 = v133;
    uint64_t v91 = v136;
    goto LABEL_32;
  }
  char v52 = swift_dynamicCast(v145, v165, v133, v127, 6);
  uint64_t v53 = v122;
  if (!v52)
  {
    uint64_t v83 = v45;
    uint64_t v84 = v135;
    goto LABEL_28;
  }
  id v54 = v145[0];
  uint64_t v55 = (uint64_t)v124;
  uint64_t v134 = (void (*)(uint64_t *, uint64_t *, uint64_t))*((void *)v134 + 2);
  v134(v124, v135, v45);
  uint64_t v56 = (uint64_t)v115;
  MLHandPoseClassifier.DataSource.init(dictionary:tableFile:)((uint64_t)v54, v55);
  if (__swift_getEnumTagSinglePayload(v56, 1, v123) == 1)
  {
    swift_bridgeObjectRelease(v137);
    _s11TabularData9AnyColumnVSgWOhTm_0(v56, &demangling cache variable for type metadata for MLHandPoseClassifier.DataSource?);
    uint64_t v57 = lazy protocol witness table accessor for type MLCreateError and conformance MLCreateError();
    swift_allocError(&type metadata for MLCreateError, v57, 0, 0);
    *(void *)uint64_t v58 = 0xD000000000000035;
    *(void *)(v58 + 8) = "o load validation data." + 0x8000000000000000;
    *(_OWORD *)(v58 + 16) = 0;
    *(_OWORD *)(v58 + 32) = 0;
    *(unsigned char *)(v58 + 48) = 0;
    swift_willThrow(&type metadata for MLCreateError, v57, v58, v59, v60, v61);
    outlined consume of Data._Representation(v132, v131);
    uint64_t v62 = v125;
    uint64_t v63 = v138;
    v138((uint64_t *)v140, v125);
    v63(v135, v62);
    __swift_destroy_boxed_opaque_existential_1Tm(v166);
    uint64_t v64 = v136;
    uint64_t v65 = v62;
LABEL_17:
    v63(v64, v65);
    return __stack_chk_guard;
  }
  uint64_t v92 = v56;
  uint64_t v93 = (uint64_t)v116;
  outlined init with take of MLClassifierMetrics(v92, (uint64_t)v116, type metadata accessor for MLHandPoseClassifier.DataSource);
  outlined init with take of MLClassifierMetrics(v93, (uint64_t)v129, type metadata accessor for MLHandPoseClassifier.DataSource);
  uint64_t v91 = v136;
  uint64_t v90 = v133;
LABEL_32:
  specialized Dictionary.subscript.getter(0x69746164696C6176, 0xEA00000000006E6FLL, v137);
  if (!v146)
  {
    _s11TabularData9AnyColumnVSgWOhTm_0((uint64_t)v145, &demangling cache variable for type metadata for Any?);
    goto LABEL_37;
  }
  if (!swift_dynamicCast(v165, v145, v90, v127, 6))
  {
LABEL_37:
    uint64_t v107 = v128;
    uint64_t v108 = v129;
    swift_storeEnumTagMultiPayload((char *)v129 + *(int *)(v128 + 20), v126, 2);
LABEL_38:
    *(void *)((char *)v108 + *(int *)(v107 + 32)) = v121;
    char v109 = v137;
    specialized Dictionary.subscript.getter(0x687469726F676C61, 0xE90000000000006DLL, v137);
    swift_bridgeObjectRelease(v109);
    if (v146)
    {
      char v110 = swift_dynamicCast(v165, v145, v133, v127, 6);
      uint64_t v111 = v136;
      unint64_t v106 = (void (*)(uint64_t, uint64_t))v138;
      if (v110)
      {
        MLHandPoseClassifier.ModelParameters.ModelAlgorithmType.init(dictionary:)(v165[0]);
        if (LOBYTE(v145[0]) != 1)
        {
          outlined consume of Data._Representation(v132, v131);
          v106(v140, v45);
          v106((uint64_t)v135, v45);
          __swift_destroy_boxed_opaque_existential_1Tm(v166);
          v106((uint64_t)v111, v45);
          return __stack_chk_guard;
        }
      }
    }
    else
    {
      _s11TabularData9AnyColumnVSgWOhTm_0((uint64_t)v145, &demangling cache variable for type metadata for Any?);
      unint64_t v106 = (void (*)(uint64_t, uint64_t))v138;
    }
    uint64_t v100 = lazy protocol witness table accessor for type MLCreateError and conformance MLCreateError();
    swift_allocError(&type metadata for MLCreateError, v100, 0, 0);
    char v99 = 1;
    *(void *)uint64_t v101 = 0xD00000000000002BLL;
    char v105 = "labeled_image_data" + 0x8000000000000000;
    goto LABEL_44;
  }
  uint64_t v94 = v91;
  uint64_t v95 = v165[0];
  uint64_t v96 = (uint64_t)v124;
  v134(v124, v94, v45);
  uint64_t v97 = v95;
  uint64_t v98 = (uint64_t)v117;
  MLHandPoseClassifier.ModelParameters.ValidationData.init(dictionary:tableFile:)(v97, v96);
  if (__swift_getEnumTagSinglePayload(v98, 1, v126) != 1)
  {
    uint64_t v113 = (uint64_t)v118;
    outlined init with take of MLClassifierMetrics(v98, (uint64_t)v118, type metadata accessor for MLHandPoseClassifier.ModelParameters.ValidationData);
    uint64_t v108 = v129;
    uint64_t v107 = v128;
    outlined init with take of MLClassifierMetrics(v113, (uint64_t)v129 + *(int *)(v128 + 20), type metadata accessor for MLHandPoseClassifier.ModelParameters.ValidationData);
    goto LABEL_38;
  }
  swift_bridgeObjectRelease(v137);
  _s11TabularData9AnyColumnVSgWOhTm_0(v98, &demangling cache variable for type metadata for MLHandPoseClassifier.ModelParameters.ValidationData?);
  char v99 = 0;
  uint64_t v100 = lazy protocol witness table accessor for type MLCreateError and conformance MLCreateError();
  swift_allocError(&type metadata for MLCreateError, v100, 0, 0);
  *(void *)uint64_t v101 = 0xD000000000000037;
  char v105 = "ion Classification algorithm." + 0x8000000000000000;
  unint64_t v106 = (void (*)(uint64_t, uint64_t))v138;
LABEL_44:
  *(void *)(v101 + 8) = v105;
  *(_OWORD *)(v101 + 16) = 0;
  *(_OWORD *)(v101 + 32) = 0;
  *(unsigned char *)(v101 + 48) = 0;
  swift_willThrow(&type metadata for MLCreateError, v100, v101, v102, v103, v104);
  outlined consume of Data._Representation(v132, v131);
  v106(v140, v45);
  v106((uint64_t)v135, v45);
  __swift_destroy_boxed_opaque_existential_1Tm(v166);
  v106((uint64_t)v136, v45);
  uint64_t v112 = v129;
  outlined destroy of MLActivityClassifier.ModelParameters((uint64_t)v129, type metadata accessor for MLHandPoseClassifier.DataSource);
  if (v99) {
    outlined destroy of MLActivityClassifier.ModelParameters((uint64_t)v112 + *(int *)(v128 + 20), type metadata accessor for MLHandPoseClassifier.ModelParameters.ValidationData);
  }
  return __stack_chk_guard;
}

uint64_t MLHandPoseClassifier.DataSource.init(dictionary:tableFile:)(uint64_t a1, uint64_t a2)
{
  uint64_t v100 = a2;
  uint64_t v4 = v2;
  uint64_t v99 = type metadata accessor for URL(0);
  uint64_t v98 = *(void *)(v99 - 8);
  int64_t v5 = *(void *)(v98 + 64);
  uint64_t v6 = alloca(v5);
  int64_t v7 = alloca(v5);
  uint64_t v8 = alloca(v5);
  uint64_t v9 = alloca(v5);
  uint64_t v10 = type metadata accessor for MLHandPoseClassifier.DataSource(0);
  int64_t v11 = *(void *)(*(void *)(v10 - 8) + 64);
  uint64_t v12 = alloca(v11);
  int64_t v13 = alloca(v11);
  uint64_t v14 = alloca(v11);
  uint64_t v15 = alloca(v11);
  if (*(void *)(a1 + 16))
  {
    uint64_t v93 = &v59;
    uint64_t v89 = &v59;
    uint64_t v101 = v10;
    unint64_t v16 = specialized __RawDictionaryStorage.find<A>(_:)(1684957547, 0xE400000000000000);
    if (v17)
    {
      uint64_t v97 = v4;
      outlined init with copy of Any(*(void *)(a1 + 56) + 32 * v16, (uint64_t)&v60);
      *(void *)&long long v92 = (char *)&type metadata for Any + 8;
      if (swift_dynamicCast(&v96, &v60, (char *)&type metadata for Any + 8, &type metadata for String, 6))
      {
        uint64_t v18 = (char *)*((void *)&v96 + 1);
        if (v96 == __PAIR128__(0xE900000000000079, 0x726F746365726964))
        {
          char v19 = 121;
LABEL_16:
          swift_bridgeObjectRelease(v19);
          specialized Dictionary.subscript.getter(1752457584, 0xE400000000000000, a1);
          uint64_t v4 = v97;
          if (v64)
          {
            if (swift_dynamicCast(&v96, &v60, v92, &type metadata for String, 6))
            {
              long long v26 = v96;
              specialized Dictionary.subscript.getter(0x697461746F6E6E61, 0xEF656C69665F6E6FLL, a1);
              if (v64)
              {
                if (!swift_dynamicCast(&v96, &v60, v92, &type metadata for String, 6)) {
                  goto LABEL_52;
                }
                uint64_t v27 = (uint64_t *)*((void *)&v96 + 1);
                uint64_t v81 = v96;
                specialized Dictionary.subscript.getter(0x6F635F6567616D69, 0xEC0000006E6D756CLL, a1);
                if (v64)
                {
                  uint64_t v94 = v27;
                  if (swift_dynamicCast(&v96, &v60, v92, &type metadata for String, 6))
                  {
                    uint64_t v28 = *((void *)&v96 + 1);
                    uint64_t v82 = v96;
                    specialized Dictionary.subscript.getter(0x6F635F6C6562616CLL, 0xEC0000006E6D756CLL, a1);
                    swift_bridgeObjectRelease(a1);
                    if (v64)
                    {
                      if (swift_dynamicCast(&v96, &v60, v92, &type metadata for String, 6))
                      {
                        long long v92 = v96;
                        uint64_t v29 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (at: URL, annotationFile: URL, imageColumn: String, labelColumn: String));
                        uint64_t v30 = (uint64_t)v93;
                        uint64_t v83 = v28;
                        uint64_t v31 = *(int *)(v29 + 64);
                        uint64_t v84 = *(int *)(v29 + 80);
                        URL.init(fileURLWithPath:)(v26, *((void *)&v26 + 1));
                        swift_bridgeObjectRelease(BYTE8(v26));
                        char v32 = (char)v94;
                        URL.init(fileURLWithPath:)(v81, v94);
                        swift_bridgeObjectRelease(v32);
                        (*(void (**)(uint64_t, uint64_t))(v98 + 8))(v100, v99);
                        *(void *)(v30 + v31) = v82;
                        *(void *)(v30 + v31 + 8) = v83;
                        *(_OWORD *)(v30 + v84) = v92;
                        uint64_t v10 = v101;
                        swift_storeEnumTagMultiPayload(v30, v101, 0);
                        uint64_t v33 = (uint64_t)v89;
                        outlined init with take of MLClassifierMetrics(v30, (uint64_t)v89, type metadata accessor for MLHandPoseClassifier.DataSource);
LABEL_25:
                        uint64_t v4 = v97;
LABEL_47:
                        outlined init with take of MLClassifierMetrics(v33, v4, type metadata accessor for MLHandPoseClassifier.DataSource);
                        uint64_t v23 = 0;
                        return __swift_storeEnumTagSinglePayload(v4, v23, 1, v10);
                      }
                      swift_bridgeObjectRelease(v28);
                      swift_bridgeObjectRelease((_BYTE)v94);
                      char v42 = BYTE8(v26);
                      goto LABEL_53;
                    }
                    swift_bridgeObjectRelease(v28);
                    swift_bridgeObjectRelease((_BYTE)v94);
                    char v41 = BYTE8(v26);
LABEL_50:
                    swift_bridgeObjectRelease(v41);
                    _s11TabularData9AnyColumnVSgWOhTm_0((uint64_t)&v60, &demangling cache variable for type metadata for Any?);
LABEL_54:
                    uint64_t v4 = v97;
                    (*(void (**)(uint64_t, uint64_t))(v98 + 8))(v100, v99);
                    uint64_t v23 = 1;
LABEL_55:
                    uint64_t v10 = v101;
                    return __swift_storeEnumTagSinglePayload(v4, v23, 1, v10);
                  }
                  swift_bridgeObjectRelease((_BYTE)v94);
LABEL_52:
                  swift_bridgeObjectRelease(BYTE8(v26));
                  char v42 = a1;
LABEL_53:
                  swift_bridgeObjectRelease(v42);
                  goto LABEL_54;
                }
                swift_bridgeObjectRelease((_BYTE)v27);
              }
              swift_bridgeObjectRelease(BYTE8(v26));
              char v41 = a1;
              goto LABEL_50;
            }
            swift_bridgeObjectRelease(a1);
            goto LABEL_36;
          }
          swift_bridgeObjectRelease(a1);
LABEL_27:
          _s11TabularData9AnyColumnVSgWOhTm_0((uint64_t)&v60, &demangling cache variable for type metadata for Any?);
LABEL_36:
          uint64_t v10 = v101;
          goto LABEL_37;
        }
        uint64_t v94 = &v59;
        uint64_t v25 = v96;
        if (_stringCompareWithSmolCheck(_:_:expecting:)(0x726F746365726964, 0xE900000000000079, v96, *((void *)&v96 + 1), 0))
        {
          char v19 = (char)v18;
          goto LABEL_16;
        }
        if (v25 == 0xD000000000000013)
        {
          uint64_t v34 = "session_id_column" + 0x8000000000000000;
          if (v18 == "session_id_column" + 0x8000000000000000) {
            goto LABEL_32;
          }
        }
        if (_stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000013, "session_id_column" + 0x8000000000000000, v25, v18, 0))
        {
          LOBYTE(v34) = (_BYTE)v18;
LABEL_32:
          swift_bridgeObjectRelease((_BYTE)v34);
          specialized Dictionary.subscript.getter(1752457584, 0xE400000000000000, a1);
          swift_bridgeObjectRelease(a1);
          uint64_t v4 = v97;
          if (!v64) {
            goto LABEL_27;
          }
          char v35 = swift_dynamicCast(&v96, &v60, v92, &type metadata for String, 6);
          uint64_t v10 = v101;
          if (!v35)
          {
LABEL_37:
            uint64_t v22 = v98;
            uint64_t v21 = v99;
            uint64_t v20 = v100;
            goto LABEL_11;
          }
          char v36 = BYTE8(v96);
          uint64_t v37 = (uint64_t)v93;
          URL.init(fileURLWithPath:)(v96, *((void *)&v96 + 1));
          swift_bridgeObjectRelease(v36);
          (*(void (**)(uint64_t, uint64_t))(v98 + 8))(v100, v99);
          swift_storeEnumTagMultiPayload(v37, v10, 1);
LABEL_46:
          uint64_t v33 = (uint64_t)v89;
          outlined init with take of MLClassifierMetrics(v37, (uint64_t)v89, type metadata accessor for MLHandPoseClassifier.DataSource);
          goto LABEL_47;
        }
        if (v25 == 0x5F64656C6562616CLL && v18 == (char *)0xED000073656C6966)
        {
          char v38 = 102;
LABEL_43:
          swift_bridgeObjectRelease(v38);
          specialized Dictionary.subscript.getter(1752457584, 0xE400000000000000, a1);
          swift_bridgeObjectRelease(a1);
          uint64_t v4 = v97;
          if (!v64) {
            goto LABEL_27;
          }
          char v39 = swift_dynamicCast(&v96, &v60, v92, &type metadata for String, 6);
          uint64_t v10 = v101;
          if (!v39) {
            goto LABEL_37;
          }
          char v40 = BYTE8(v96);
          uint64_t v37 = (uint64_t)v93;
          URL.init(fileURLWithPath:)(v96, *((void *)&v96 + 1));
          swift_bridgeObjectRelease(v40);
          (*(void (**)(uint64_t, uint64_t))(v98 + 8))(v100, v99);
          swift_storeEnumTagMultiPayload(v37, v10, 2);
          goto LABEL_46;
        }
        if (_stringCompareWithSmolCheck(_:_:expecting:)(0x5F64656C6562616CLL, 0xED000073656C6966, v25, v18, 0))
        {
          char v38 = (char)v18;
          goto LABEL_43;
        }
        if (v25 == 0xD000000000000016 && v18 == "start_time_column" + 0x8000000000000000)
        {
          swift_bridgeObjectRelease("start_time_column");
          uint64_t v10 = v101;
LABEL_62:
          (*(void (**)(uint64_t *, uint64_t, uint64_t))(v98 + 16))(&v59, v100, v99);
          char v60 = 1;
          *(_DWORD *)uint64_t v61 = *(_DWORD *)v85;
          *(_DWORD *)&v61[3] = *(_DWORD *)&v85[3];
          uint64_t v62 = 44;
          unint64_t v63 = 0xE100000000000000;
          uint64_t v64 = 0;
          char v95 = 1;
          unint64_t v65 = 0xE000000000000000;
          uint64_t v66 = 92;
          unint64_t v67 = 0xE100000000000000;
          char v68 = 1;
          *(_DWORD *)uint64_t v69 = *(_DWORD *)v86;
          *(_DWORD *)&v69[3] = *(_DWORD *)&v86[3];
          uint64_t v70 = 34;
          unint64_t v71 = 0xE100000000000000;
          char v72 = 1;
          *(_DWORD *)&v73[3] = *(_DWORD *)&v87[3];
          *(_DWORD *)uint64_t v73 = *(_DWORD *)v87;
          uint64_t v74 = &outlined read-only object #0 of default argument 1 of MLDataTable.init(contentsOf:options:);
          uint64_t v75 = 10;
          unint64_t v76 = 0xE100000000000000;
          long long v77 = 0;
          char v78 = 1;
          *(_DWORD *)uint64_t v79 = v88[0];
          *(_DWORD *)&v79[3] = *(_DWORD *)((char *)v88 + 3);
          uint64_t v80 = 0;
          MLDataTable.init(contentsOf:options:)(&v59, &v60);
          uint64_t v4 = v97;
          uint64_t v90 = v96;
          LOBYTE(v91) = BYTE8(v96);
          static MLHandPoseClassifier.reformatKeypointsDataTable(table:featureColumn:)(&v90, 0x746E696F7079656BLL, (void *)0xE900000000000073, 0.0);
          specialized Dictionary.subscript.getter(0xD000000000000011, (uint64_t)("labeled_keypoints_data" + 0x8000000000000000), a1);
          if (v64)
          {
            if (swift_dynamicCast(&v96, &v60, v92, &type metadata for String, 6))
            {
              uint64_t v44 = *((void *)&v96 + 1);
              uint64_t v45 = v96;
              specialized Dictionary.subscript.getter(0x6F635F6C6562616CLL, 0xEC0000006E6D756CLL, a1);
              if (v64)
              {
                if (swift_dynamicCast(&v96, &v60, v92, &type metadata for String, 6))
                {
                  uint64_t v46 = *((void *)&v96 + 1);
                  uint64_t v93 = (uint64_t *)v96;
                  specialized Dictionary.subscript.getter(0x5F65727574616566, 0xEE006E6D756C6F63, a1);
                  swift_bridgeObjectRelease(a1);
                  (*(void (**)(uint64_t, uint64_t))(v98 + 8))(v100, v99);
                  if (v64)
                  {
                    if (swift_dynamicCast(&v96, &v60, v92, &type metadata for String, 6))
                    {
                      long long v47 = v96;
                      char v48 = v91;
                      uint64_t v33 = (uint64_t)v89;
                      uint64_t *v89 = v90;
                      *(unsigned char *)(v33 + 8) = v48;
                      *(void *)(v33 + 16) = v45;
                      *(void *)(v33 + 24) = v44;
                      *(void *)(v33 + 32) = v93;
                      *(void *)(v33 + 40) = v46;
                      *(_OWORD *)(v33 + 48) = v47;
                      uint64_t v58 = 3;
LABEL_84:
                      uint64_t v10 = v101;
                      swift_storeEnumTagMultiPayload(v33, v101, v58);
                      goto LABEL_25;
                    }
                    swift_bridgeObjectRelease(v46);
                    swift_bridgeObjectRelease(v44);
                  }
                  else
                  {
                    swift_bridgeObjectRelease(v46);
                    swift_bridgeObjectRelease(v44);
                    _s11TabularData9AnyColumnVSgWOhTm_0((uint64_t)&v60, &demangling cache variable for type metadata for Any?);
                  }
                  uint64_t v4 = v97;
                  uint64_t v10 = v101;
LABEL_90:
                  outlined consume of Result<_DataTable, Error>(v90, v91);
                  goto LABEL_12;
                }
                swift_bridgeObjectRelease(v44);
                swift_bridgeObjectRelease(a1);
              }
              else
              {
                swift_bridgeObjectRelease(v44);
                swift_bridgeObjectRelease(a1);
                _s11TabularData9AnyColumnVSgWOhTm_0((uint64_t)&v60, &demangling cache variable for type metadata for Any?);
              }
              uint64_t v10 = v101;
              uint64_t v54 = v100;
              uint64_t v53 = v99;
              uint64_t v52 = v98;
LABEL_89:
              (*(void (**)(uint64_t, uint64_t))(v52 + 8))(v54, v53);
              goto LABEL_90;
            }
            swift_bridgeObjectRelease(a1);
          }
          else
          {
            swift_bridgeObjectRelease(a1);
            _s11TabularData9AnyColumnVSgWOhTm_0((uint64_t)&v60, &demangling cache variable for type metadata for Any?);
          }
          uint64_t v52 = v98;
          uint64_t v53 = v99;
          uint64_t v54 = v100;
          goto LABEL_89;
        }
        char v43 = _stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000016, "start_time_column" + 0x8000000000000000, v25, v18, 0);
        uint64_t v10 = v101;
        if (v43)
        {
          swift_bridgeObjectRelease((_BYTE)v18);
          goto LABEL_62;
        }
        if (v25 == 0xD000000000000012 && v18 == "o load training data." + 0x8000000000000000)
        {
          swift_bridgeObjectRelease(("o load training data." + 0x8000000000000000));
          uint64_t v49 = v94;
        }
        else
        {
          char v50 = _stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000012, "o load training data." + 0x8000000000000000, v25, v18, 0);
          swift_bridgeObjectRelease((_BYTE)v18);
          BOOL v51 = (v50 & 1) == 0;
          uint64_t v10 = v101;
          uint64_t v49 = v94;
          if (v51)
          {
            (*(void (**)(uint64_t, uint64_t))(v98 + 8))(v100, v99);
            swift_bridgeObjectRelease(a1);
            uint64_t v23 = 1;
            uint64_t v4 = v97;
            return __swift_storeEnumTagSinglePayload(v4, v23, 1, v10);
          }
        }
        (*(void (**)(uint64_t *, uint64_t, uint64_t))(v98 + 16))(v49, v100, v99);
        char v60 = 1;
        *(_DWORD *)uint64_t v61 = v90;
        *(_DWORD *)&v61[3] = *(_DWORD *)((char *)&v90 + 3);
        uint64_t v62 = 44;
        unint64_t v63 = 0xE100000000000000;
        uint64_t v64 = 0;
        LOBYTE(v88[0]) = 1;
        unint64_t v65 = 0xE000000000000000;
        uint64_t v66 = 92;
        unint64_t v67 = 0xE100000000000000;
        char v68 = 1;
        *(_DWORD *)uint64_t v69 = *(_DWORD *)v85;
        *(_DWORD *)&v69[3] = *(_DWORD *)&v85[3];
        uint64_t v70 = 34;
        unint64_t v71 = 0xE100000000000000;
        char v72 = 1;
        *(_DWORD *)&v73[3] = *(_DWORD *)&v86[3];
        *(_DWORD *)uint64_t v73 = *(_DWORD *)v86;
        uint64_t v74 = &outlined read-only object #0 of default argument 1 of MLDataTable.init(contentsOf:options:);
        uint64_t v75 = 10;
        unint64_t v76 = 0xE100000000000000;
        long long v77 = 0;
        char v78 = 1;
        *(_DWORD *)uint64_t v79 = *(_DWORD *)v87;
        *(_DWORD *)&v79[3] = *(_DWORD *)&v87[3];
        uint64_t v80 = 0;
        MLDataTable.init(contentsOf:options:)(v49, &v60);
        uint64_t v55 = v96;
        char v56 = BYTE8(v96);
        specialized Dictionary.subscript.getter(0x6F635F6567616D69, 0xEC0000006E6D756CLL, a1);
        if (v64)
        {
          if (swift_dynamicCast(&v96, &v60, v92, &type metadata for String, 6))
          {
            uint64_t v93 = (uint64_t *)*((void *)&v96 + 1);
            uint64_t v94 = (uint64_t *)v96;
            specialized Dictionary.subscript.getter(0x6F635F6C6562616CLL, 0xEC0000006E6D756CLL, a1);
            swift_bridgeObjectRelease(a1);
            (*(void (**)(uint64_t, uint64_t))(v98 + 8))(v100, v99);
            if (v64)
            {
              if (swift_dynamicCast(&v96, &v60, v92, &type metadata for String, 6))
              {
                long long v57 = v96;
                uint64_t v33 = (uint64_t)v89;
                uint64_t *v89 = v55;
                *(unsigned char *)(v33 + 8) = v56 & 1;
                *(void *)(v33 + 16) = v94;
                *(void *)(v33 + 24) = v93;
                *(_OWORD *)(v33 + 32) = v57;
                uint64_t v58 = 4;
                goto LABEL_84;
              }
              outlined consume of Result<_DataTable, Error>(v55, v56);
              swift_bridgeObjectRelease((_BYTE)v93);
            }
            else
            {
              outlined consume of Result<_DataTable, Error>(v55, v56);
              swift_bridgeObjectRelease((_BYTE)v93);
              _s11TabularData9AnyColumnVSgWOhTm_0((uint64_t)&v60, &demangling cache variable for type metadata for Any?);
            }
LABEL_94:
            uint64_t v23 = 1;
            uint64_t v4 = v97;
            goto LABEL_55;
          }
          swift_bridgeObjectRelease(a1);
          outlined consume of Result<_DataTable, Error>(v55, v56);
        }
        else
        {
          swift_bridgeObjectRelease(a1);
          outlined consume of Result<_DataTable, Error>(v55, v56);
          _s11TabularData9AnyColumnVSgWOhTm_0((uint64_t)&v60, &demangling cache variable for type metadata for Any?);
        }
        (*(void (**)(uint64_t, uint64_t))(v98 + 8))(v100, v99);
        goto LABEL_94;
      }
      swift_bridgeObjectRelease(a1);
      uint64_t v4 = v97;
    }
    else
    {
      swift_bridgeObjectRelease(a1);
    }
    uint64_t v10 = v101;
  }
  else
  {
    swift_bridgeObjectRelease(a1);
  }
  uint64_t v20 = v100;
  uint64_t v21 = v99;
  uint64_t v22 = v98;
LABEL_11:
  (*(void (**)(uint64_t, uint64_t))(v22 + 8))(v20, v21);
LABEL_12:
  uint64_t v23 = 1;
  return __swift_storeEnumTagSinglePayload(v4, v23, 1, v10);
}

uint64_t MLHandPoseClassifier.ModelParameters.ValidationData.init(dictionary:tableFile:)(uint64_t a1, uint64_t a2)
{
  uint64_t v54 = a2;
  uint64_t v4 = v2;
  uint64_t v5 = type metadata accessor for URL(0);
  uint64_t v6 = *(void *)(v5 - 8);
  int64_t v7 = *(void *)(v6 + 64);
  uint64_t v8 = alloca(v7);
  uint64_t v9 = alloca(v7);
  char v41 = &v40;
  int64_t v10 = *(void *)(*(void *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for MLHandPoseClassifier.DataSource?)
                              - 8)
                  + 64);
  int64_t v11 = alloca(v10);
  uint64_t v12 = alloca(v10);
  uint64_t v40 = (uint64_t)&v40;
  uint64_t v13 = type metadata accessor for MLHandPoseClassifier.DataSource(0);
  int64_t v14 = *(void *)(*(void *)(v13 - 8) + 64);
  uint64_t v15 = alloca(v14);
  unint64_t v16 = alloca(v14);
  char v42 = &v40;
  uint64_t v55 = type metadata accessor for MLHandPoseClassifier.ModelParameters.ValidationData(0);
  int64_t v17 = *(void *)(*(void *)(v55 - 8) + 64);
  uint64_t v18 = alloca(v17);
  char v19 = alloca(v17);
  char v50 = &v40;
  if (!*(void *)(a1 + 16)) {
    goto LABEL_10;
  }
  unint64_t v20 = specialized __RawDictionaryStorage.find<A>(_:)(1684957547, 0xE400000000000000);
  if ((v21 & 1) == 0) {
    goto LABEL_10;
  }
  uint64_t v53 = v4;
  outlined init with copy of Any(*(void *)(a1 + 56) + 32 * v20, (uint64_t)&v44);
  uint64_t v51 = (uint64_t)&type metadata for Any + 8;
  if (!swift_dynamicCast(&v48, &v44, (char *)&type metadata for Any + 8, &type metadata for String, 6))
  {
    uint64_t v4 = v53;
    goto LABEL_10;
  }
  uint64_t v52 = v6;
  uint64_t v22 = v48;
  uint64_t v23 = v49;
  if ((v48 != 1701736302 || v49 != 0xE400000000000000)
    && (_stringCompareWithSmolCheck(_:_:expecting:)(1701736302, 0xE400000000000000, v48, v49, 0) & 1) == 0)
  {
    if (v22 == 0x756F735F61746164 && v23 == 0xEB00000000656372)
    {
      char v29 = 114;
LABEL_18:
      swift_bridgeObjectRelease(v29);
      uint64_t v6 = v52;
      specialized Dictionary.subscript.getter(1635017060, 0xE400000000000000, a1);
      swift_bridgeObjectRelease(a1);
      if (v47)
      {
        uint64_t v30 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [String : Any]);
        if (swift_dynamicCast(&v48, &v44, v51, v30, 6))
        {
          uint64_t v51 = v48;
          uint64_t v31 = (uint64_t)v41;
          (*(void (**)(uint64_t *, uint64_t, uint64_t))(v6 + 16))(v41, v54, v5);
          uint64_t v32 = v40;
          MLHandPoseClassifier.DataSource.init(dictionary:tableFile:)(v51, v31);
          (*(void (**)(uint64_t, uint64_t))(v6 + 8))(v54, v5);
          uint64_t v33 = v32;
          unsigned int v24 = 1;
          if (__swift_getEnumTagSinglePayload(v33, 1, v13) != 1)
          {
            uint64_t v37 = v33;
            uint64_t v38 = (uint64_t)v42;
            outlined init with take of MLClassifierMetrics(v37, (uint64_t)v42, type metadata accessor for MLHandPoseClassifier.DataSource);
            uint64_t v39 = v38;
            uint64_t v26 = (uint64_t)v50;
            outlined init with take of MLClassifierMetrics(v39, (uint64_t)v50, type metadata accessor for MLHandPoseClassifier.DataSource);
            uint64_t v25 = v55;
            goto LABEL_8;
          }
          _s11TabularData9AnyColumnVSgWOhTm_0(v33, &demangling cache variable for type metadata for MLHandPoseClassifier.DataSource?);
          uint64_t v27 = 1;
          uint64_t v4 = v53;
LABEL_11:
          uint64_t v25 = v55;
          return __swift_storeEnumTagSinglePayload(v4, v27, 1, v25);
        }
      }
      else
      {
        _s11TabularData9AnyColumnVSgWOhTm_0((uint64_t)&v44, &demangling cache variable for type metadata for Any?);
      }
      uint64_t v4 = v53;
      goto LABEL_24;
    }
    uint64_t v43 = v22;
    if (_stringCompareWithSmolCheck(_:_:expecting:)(0x756F735F61746164, 0xEB00000000656372, v22, v23, 0))
    {
      char v29 = v23;
      goto LABEL_18;
    }
    if (v43 == 0x74696C7073 && v23 == 0xE500000000000000)
    {
      swift_bridgeObjectRelease(0);
      uint64_t v4 = v53;
      uint64_t v6 = v52;
      goto LABEL_30;
    }
    char v34 = _stringCompareWithSmolCheck(_:_:expecting:)(0x74696C7073, 0xE500000000000000, v43, v23, 0);
    swift_bridgeObjectRelease(v23);
    uint64_t v4 = v53;
    uint64_t v6 = v52;
    if (v34)
    {
LABEL_30:
      specialized Dictionary.subscript.getter(1635017060, 0xE400000000000000, a1);
      swift_bridgeObjectRelease(a1);
      if (v47)
      {
        uint64_t v35 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [String : Any]);
        if (swift_dynamicCast(&v48, &v44, v51, v35, 6))
        {
          MLSplitStrategy.init(dictionary:)(v48);
          (*(void (**)(uint64_t, uint64_t))(v6 + 8))(v54, v5);
          uint64_t v25 = v55;
          if (!v46)
          {
            __int16 v36 = v45;
            uint64_t v26 = (uint64_t)v50;
            *(_OWORD *)char v50 = v44;
            *(unsigned char *)(v26 + 16) = v36;
            *(unsigned char *)(v26 + 17) = HIBYTE(v36) & 1;
            unsigned int v24 = 0;
            goto LABEL_8;
          }
LABEL_25:
          uint64_t v27 = 1;
          return __swift_storeEnumTagSinglePayload(v4, v27, 1, v25);
        }
      }
      else
      {
        _s11TabularData9AnyColumnVSgWOhTm_0((uint64_t)&v44, &demangling cache variable for type metadata for Any?);
      }
LABEL_24:
      uint64_t v25 = v55;
      (*(void (**)(uint64_t, uint64_t))(v6 + 8))(v54, v5);
      goto LABEL_25;
    }
LABEL_10:
    (*(void (**)(uint64_t, uint64_t))(v6 + 8))(v54, v5);
    swift_bridgeObjectRelease(a1);
    uint64_t v27 = 1;
    goto LABEL_11;
  }
  (*(void (**)(uint64_t, uint64_t))(v52 + 8))(v54, v5);
  swift_bridgeObjectRelease(a1);
  swift_bridgeObjectRelease(v23);
  unsigned int v24 = 2;
  uint64_t v25 = v55;
  uint64_t v26 = (uint64_t)v50;
LABEL_8:
  swift_storeEnumTagMultiPayload(v26, v25, v24);
  uint64_t v4 = v53;
  outlined init with take of MLClassifierMetrics(v26, v53, type metadata accessor for MLHandPoseClassifier.ModelParameters.ValidationData);
  uint64_t v27 = 0;
  return __swift_storeEnumTagSinglePayload(v4, v27, 1, v25);
}

uint64_t MLHandPoseClassifier.ModelParameters.ModelAlgorithmType.init(dictionary:)(uint64_t a1)
{
  uint64_t v2 = v1;
  if (!*(void *)(a1 + 16)
    || (unint64_t v3 = specialized __RawDictionaryStorage.find<A>(_:)(0x687469726F676C61, 0xE90000000000006DLL), (v4 & 1) == 0))
  {
    long long v10 = 0;
    long long v9 = 0;
    swift_bridgeObjectRelease(a1);
    goto LABEL_9;
  }
  outlined init with copy of Any(*(void *)(a1 + 56) + 32 * v3, (uint64_t)&v9);
  swift_bridgeObjectRelease(a1);
  if (!*((void *)&v10 + 1))
  {
LABEL_9:
    uint64_t result = _s11TabularData9AnyColumnVSgWOhTm_0((uint64_t)&v9, &demangling cache variable for type metadata for Any?);
    goto LABEL_10;
  }
  uint64_t result = swift_dynamicCast(&v11, &v9, (char *)&type metadata for Any + 8, &type metadata for String, 6);
  if (!(_BYTE)result)
  {
LABEL_10:
    char v7 = 1;
    goto LABEL_11;
  }
  char v6 = v12;
  if (v11 != 7234407 || v12 != 0xE300000000000000)
  {
    char v7 = 0;
    char v8 = _stringCompareWithSmolCheck(_:_:expecting:)(7234407, 0xE300000000000000, v11, v12, 0);
    uint64_t result = swift_bridgeObjectRelease(v6);
    if (v8) {
      goto LABEL_11;
    }
    goto LABEL_10;
  }
  uint64_t result = swift_bridgeObjectRelease(0);
  char v7 = 0;
LABEL_11:
  char *v2 = v7;
  return result;
}

NSURL *MLHandPoseClassifier.PersistentParameters.save(toSessionDirectory:)(uint64_t a1, __m128 a2)
{
  uint64_t v89 = v2;
  uint64_t v4 = v3;
  uint64_t v84 = a1;
  int64_t v5 = *(void *)(*(void *)(type metadata accessor for MLHandPoseClassifier.DataSource(0) - 8) + 64);
  char v6 = alloca(v5);
  char v7 = alloca(v5);
  uint64_t v79 = &v71;
  uint64_t v75 = type metadata accessor for MLHandPoseClassifier.ModelParameters.ValidationData(0);
  int64_t v8 = *(void *)(*(void *)(v75 - 8) + 64);
  long long v9 = alloca(v8);
  long long v10 = alloca(v8);
  unint64_t v76 = &v71;
  uint64_t v88 = type metadata accessor for URL(0);
  uint64_t v87 = *(void **)(v88 - 8);
  int64_t v11 = v87[8];
  uint64_t v12 = alloca(v11);
  uint64_t v13 = alloca(v11);
  uint64_t v74 = &v71;
  int64_t v14 = alloca(v11);
  uint64_t v15 = alloca(v11);
  uint64_t v73 = &v71;
  unint64_t v16 = alloca(v11);
  int64_t v17 = alloca(v11);
  char v72 = &v71;
  uint64_t v80 = type metadata accessor for MLHandPoseClassifier.ModelParameters(0);
  int64_t v18 = *(void *)(*(void *)(v80 - 8) + 64);
  char v19 = alloca(v18);
  unint64_t v20 = alloca(v18);
  uint64_t v83 = &v71;
  char v21 = alloca(v18);
  uint64_t v22 = alloca(v18);
  int v91 = &v71;
  uint64_t v23 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, Any)>);
  uint64_t inited = swift_initStackObject(v23, v94);
  *(void *)(inited + 16) = 6;
  *(void *)(inited + 24) = 12;
  *(void *)(inited + 32) = 0x676E696E69617274;
  *(void *)(inited + 40) = 0xE800000000000000;
  uint64_t v25 = MLHandPoseClassifier.DataSource.dictionary.getter();
  uint64_t v90 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [String : Any]);
  *(void *)(inited + 72) = v90;
  *(void *)(inited + 48) = v25;
  *(void *)(inited + 80) = 0x69746164696C6176;
  *(void *)(inited + 88) = 0xEA00000000006E6FLL;
  uint64_t v26 = (int *)type metadata accessor for MLHandPoseClassifier.PersistentParameters(0);
  uint64_t v77 = v4 + v26[5];
  outlined init with copy of MLTrainingSessionParameters(v77, (uint64_t)&v71, type metadata accessor for MLHandPoseClassifier.ModelParameters.ValidationData);
  uint64_t v27 = v26[6];
  uint64_t v28 = *(void *)(v4 + v27);
  uint64_t v81 = v26[7];
  uint64_t v29 = *(void *)(v4 + v81);
  uint64_t v82 = v26[8];
  uint64_t v30 = *(void *)(v4 + v82);
  uint64_t v31 = v80;
  uint64_t v32 = (uint64_t)v91;
  *(uint64_t *)((char *)v91 + *(int *)(v80 + 20)) = v28;
  *(void *)(v32 + *(int *)(v31 + 24)) = v29;
  *(void *)(v32 + *(int *)(v31 + 28)) = v30;
  uint64_t v33 = MLHandPoseClassifier.ModelParameters.ValidationData.dictionary.getter();
  outlined destroy of MLActivityClassifier.ModelParameters((uint64_t)v91, type metadata accessor for MLHandPoseClassifier.ModelParameters.ValidationData);
  *(void *)(inited + 120) = v90;
  *(void *)(inited + 96) = v33;
  *(void *)(inited + 128) = 0x69735F6863746162;
  *(void *)(inited + 136) = 0xEA0000000000657ALL;
  uint64_t v78 = v27;
  uint64_t v34 = *(void *)(v4 + v27);
  *(void *)(inited + 168) = &type metadata for Int;
  *(void *)(inited + 144) = v34;
  strcpy((char *)(inited + 176), "max_iterations");
  *(unsigned char *)(inited + 191) = -18;
  uint64_t v35 = *(void *)(v4 + v81);
  *(void *)(inited + 216) = &type metadata for Int;
  *(void *)(inited + 192) = v35;
  *(void *)(inited + 224) = 0xD000000000000014;
  *(void *)(inited + 232) = "Empty training input." + 0x8000000000000000;
  int v91 = (uint64_t *)v4;
  uint64_t v36 = *(void *)(v4 + v82);
  *(void *)(inited + 264) = &type metadata for Int;
  *(void *)(inited + 240) = v36;
  *(void *)(inited + 272) = 0x687469726F676C61;
  *(void *)(inited + 280) = 0xE90000000000006DLL;
  uint64_t v37 = MLHandActionClassifier.ModelParameters.ModelAlgorithmType.dictionary.getter();
  *(void *)(inited + 312) = v90;
  *(void *)(inited + 288) = v37;
  LOBYTE(inited) = Dictionary.init(dictionaryLiteral:)(inited, &type metadata for String, (char *)&type metadata for Any + 8, &protocol witness table for String);
  uint64_t v38 = objc_opt_self(NSPropertyListSerialization);
  Class isa = Dictionary._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease(inited);
  id v92 = 0;
  id v40 = [v38 dataWithPropertyList:isa format:200 options:0 error:&v92];
  id v41 = v40;

  id v42 = v92;
  if (!v41)
  {
    uint64_t v48 = v42;
    _convertNSErrorToError(_:)(v42);

    swift_willThrow(v48, "dataWithPropertyList:format:options:error:", v49, v50, v51, v52);
    return __stack_chk_guard;
  }
  uint64_t v43 = static Data._unconditionallyBridgeFromObjectiveC(_:)(v41);
  unint64_t v45 = v44;

  char v46 = v72;
  URL.appendingPathComponent(_:)(0xD000000000000010, "ObjectDetectorMetrics." + 0x8000000000000000);
  uint64_t v47 = v89;
  Data.write(to:options:)(v46, 0, v43, v45);
  if (!v47)
  {
    uint64_t v86 = v43;
    unint64_t v85 = v45;
    uint64_t v90 = 0;
    uint64_t v89 = (double (*)(void, void))v87[1];
    *(double *)a2.i64 = v89(v46, v88);
    MLHandPoseClassifier.DataSource.table.getter(a2);
    char v53 = v93;
    if (v93 == -1)
    {
      uint64_t v56 = v90;
    }
    else
    {
      uint64_t v87 = v92;
      v93 &= 1u;
      uint64_t v54 = (uint64_t)v73;
      URL.appendingPathComponent(_:)(1635017060, 0xE400000000000000);
      uint64_t v55 = v90;
      MLDataTable.write(to:)(v54);
      uint64_t v56 = v55;
      if (v55)
      {
        v89(v54, v88);
        outlined consume of Data._Representation(v86, v85);
        char v57 = v53;
        uint64_t v58 = (uint64_t)v87;
LABEL_15:
        outlined consume of MLDataTable?(v58, v57);
        return __stack_chk_guard;
      }
      v89(v54, v88);
      outlined consume of MLDataTable?((uint64_t)v87, v53);
    }
    uint64_t v59 = (uint64_t)v83;
    outlined init with copy of MLTrainingSessionParameters(v77, (uint64_t)v83, type metadata accessor for MLHandPoseClassifier.ModelParameters.ValidationData);
    uint64_t v60 = *(uint64_t *)((char *)v91 + v81);
    uint64_t v61 = *(uint64_t *)((char *)v91 + v82);
    uint64_t v62 = v80;
    *(void *)(v59 + *(int *)(v80 + 20)) = *(uint64_t *)((char *)v91 + v78);
    *(void *)(v59 + *(int *)(v62 + 24)) = v60;
    *(void *)(v59 + *(int *)(v62 + 28)) = v61;
    uint64_t v63 = v59;
    uint64_t v64 = (uint64_t)v76;
    outlined init with copy of MLTrainingSessionParameters(v63, (uint64_t)v76, type metadata accessor for MLHandPoseClassifier.ModelParameters.ValidationData);
    int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload(v64, v75);
    uint64_t v66 = (uint64_t)v74;
    uint64_t v90 = v56;
    if (EnumCaseMultiPayload == 1)
    {
      uint64_t v67 = (uint64_t)v79;
      outlined init with take of MLClassifierMetrics(v64, (uint64_t)v79, type metadata accessor for MLHandPoseClassifier.DataSource);
      MLHandPoseClassifier.DataSource.table.getter(a2);
      outlined destroy of MLActivityClassifier.ModelParameters(v67, type metadata accessor for MLHandPoseClassifier.DataSource);
      id v68 = v92;
      char v69 = v93;
    }
    else
    {
      char v69 = -1;
      id v68 = 0;
    }
    outlined destroy of MLActivityClassifier.ModelParameters((uint64_t)v83, type metadata accessor for MLHandPoseClassifier.ModelParameters.ValidationData);
    if (v69 == -1)
    {
      outlined consume of Data._Representation(v86, v85);
      return __stack_chk_guard;
    }
    id v92 = v68;
    char v93 = v69 & 1;
    int v91 = (uint64_t *)v68;
    URL.appendingPathComponent(_:)(0x69746164696C6176, 0xEE00617461446E6FLL);
    MLDataTable.write(to:)(v66);
    v89(v66, v88);
    outlined consume of Data._Representation(v86, v85);
    char v57 = v69;
    uint64_t v58 = (uint64_t)v91;
    goto LABEL_15;
  }
  ((void (*)(uint64_t *, uint64_t))v87[1])(v46, v88);
  outlined consume of Data._Representation(v43, v45);
  return __stack_chk_guard;
}

uint64_t MLHandPoseClassifier.DataSource.dictionary.getter()
{
  uint64_t v1 = v0;
  uint64_t v68 = type metadata accessor for URL(0);
  uint64_t v2 = *(void *)(v68 - 8);
  int64_t v3 = *(void *)(v2 + 64);
  uint64_t v4 = alloca(v3);
  int64_t v5 = alloca(v3);
  uint64_t v67 = &v51;
  char v6 = alloca(v3);
  char v7 = alloca(v3);
  uint64_t v8 = type metadata accessor for MLHandPoseClassifier.DataSource(0);
  int64_t v9 = *(void *)(*(void *)(v8 - 8) + 64);
  long long v10 = alloca(v9);
  int64_t v11 = alloca(v9);
  outlined init with copy of MLTrainingSessionParameters(v1, (uint64_t)&v51, type metadata accessor for MLHandPoseClassifier.DataSource);
  switch(swift_getEnumCaseMultiPayload(&v51, v8))
  {
    case 0u:
      uint64_t v12 = (int *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (at: URL, annotationFile: URL, imageColumn: String, labelColumn: String));
      uint64_t v13 = (char *)&v51 + v12[12];
      long long v64 = *(_OWORD *)((char *)&v51 + v12[16]);
      long long v63 = *(_OWORD *)((char *)&v51 + v12[20]);
      uint64_t v65 = v2;
      int64_t v14 = *(void (**)(uint64_t *, uint64_t *, uint64_t))(v2 + 32);
      uint64_t v66 = &v51;
      uint64_t v15 = v68;
      v14(&v51, &v51, v68);
      v14(v67, (uint64_t *)v13, v15);
      uint64_t v16 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, Any)>);
      uint64_t inited = swift_initStackObject(v16, &v51);
      *(void *)(inited + 16) = 5;
      *(void *)(inited + 24) = 10;
      *(void *)(inited + 32) = 1684957547;
      *(void *)(inited + 40) = 0xE400000000000000;
      *(void *)(inited + 72) = &type metadata for String;
      *(void *)(inited + 48) = 0x726F746365726964;
      *(void *)(inited + 56) = 0xE900000000000079;
      *(void *)(inited + 80) = 1752457584;
      *(void *)(inited + 88) = 0xE400000000000000;
      uint64_t v18 = URL.path.getter(v16);
      *(void *)(inited + 120) = &type metadata for String;
      *(void *)(inited + 96) = v18;
      *(void *)(inited + 104) = v19;
      *(void *)(inited + 128) = 0x697461746F6E6E61;
      *(void *)(inited + 136) = 0xEF656C69665F6E6FLL;
      *(void *)(inited + 168) = v15;
      boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1((void *)(inited + 144));
      char v21 = v67;
      uint64_t v22 = v65;
      (*(void (**)(void *, uint64_t *, uint64_t))(v65 + 16))(boxed_opaque_existential_1, v67, v15);
      strcpy((char *)(inited + 176), "image_column");
      *(unsigned char *)(inited + 189) = 0;
      *(_WORD *)(inited + 190) = -5120;
      *(void *)(inited + 216) = &type metadata for String;
      *(_OWORD *)(inited + 192) = v64;
      strcpy((char *)(inited + 224), "label_column");
      *(unsigned char *)(inited + 237) = 0;
      *(_WORD *)(inited + 238) = -5120;
      *(void *)(inited + 264) = &type metadata for String;
      *(_OWORD *)(inited + 240) = v63;
      uint64_t v23 = Dictionary.init(dictionaryLiteral:)(inited, &type metadata for String, (char *)&type metadata for Any + 8, &protocol witness table for String);
      unsigned int v24 = *(void (**)(uint64_t *, uint64_t))(v22 + 8);
      v24(v21, v15);
      v24(v66, v15);
      return v23;
    case 1u:
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(v2 + 32))(&v51, &v51, v68);
      uint64_t v25 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, Any)>);
      uint64_t v26 = (void *)swift_initStackObject(v25, v62);
      v26[2] = 2;
      v26[3] = 4;
      v26[4] = 1684957547;
      v26[5] = 0xE400000000000000;
      v26[9] = &type metadata for String;
      v26[6] = 0xD000000000000013;
      uint64_t v27 = "session_id_column" + 0x8000000000000000;
      goto LABEL_5;
    case 2u:
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(v2 + 32))(&v51, &v51, v68);
      uint64_t v25 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, Any)>);
      uint64_t v26 = (void *)swift_initStackObject(v25, v61);
      v26[2] = 2;
      v26[3] = 4;
      v26[4] = 1684957547;
      v26[5] = 0xE400000000000000;
      v26[9] = &type metadata for String;
      v26[6] = 0x5F64656C6562616CLL;
      uint64_t v27 = (char *)0xED000073656C6966;
LABEL_5:
      v26[7] = v27;
      v26[10] = 1752457584;
      v26[11] = 0xE400000000000000;
      uint64_t v28 = URL.path.getter(v25);
      v26[15] = &type metadata for String;
      v26[12] = v28;
      v26[13] = v29;
      uint64_t v23 = Dictionary.init(dictionaryLiteral:)(v26, &type metadata for String, (char *)&type metadata for Any + 8, &protocol witness table for String);
      (*(void (**)(uint64_t *, uint64_t))(v2 + 8))(&v51, v68);
      return v23;
    case 3u:
      uint64_t v30 = v53;
      uint64_t v31 = v54;
      uint64_t v32 = v55;
      uint64_t v33 = v56;
      uint64_t v68 = v57;
      uint64_t v67 = v58;
      outlined consume of Result<_DataTable, Error>(v51, v52);
      goto LABEL_9;
    case 4u:
      uint64_t v34 = v53;
      uint64_t v35 = v54;
      uint64_t v36 = v55;
      uint64_t v37 = v56;
      outlined consume of Result<_DataTable, Error>(v51, v52);
      goto LABEL_11;
    case 5u:
      uint64_t v38 = (int *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (DataFrame, sessionIdColumn: String, labelColumn: String, featureColumn: String));
      uint64_t v39 = v38[12];
      uint64_t v30 = *(uint64_t *)((char *)&v51 + v39);
      uint64_t v31 = *(uint64_t *)((char *)&v51 + v39 + 8);
      uint64_t v40 = v38[16];
      uint64_t v32 = *(uint64_t *)((char *)&v51 + v40);
      uint64_t v33 = *(uint64_t *)((char *)&v51 + v40 + 8);
      uint64_t v41 = v38[20];
      uint64_t v68 = *(uint64_t *)((char *)&v51 + v41);
      uint64_t v67 = *(uint64_t **)((char *)&v51 + v41 + 8);
      uint64_t v42 = type metadata accessor for DataFrame(0);
      (*(void (**)(uint64_t *, uint64_t))(*(void *)(v42 - 8) + 8))(&v51, v42);
LABEL_9:
      uint64_t v43 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, Any)>);
      uint64_t v44 = swift_initStackObject(v43, v59);
      *(void *)(v44 + 16) = 4;
      *(void *)(v44 + 24) = 8;
      *(void *)(v44 + 32) = 1684957547;
      *(void *)(v44 + 40) = 0xE400000000000000;
      *(void *)(v44 + 72) = &type metadata for String;
      *(void *)(v44 + 48) = 0xD000000000000016;
      *(void *)(v44 + 56) = "start_time_column" + 0x8000000000000000;
      *(void *)(v44 + 80) = 0xD000000000000011;
      *(void *)(v44 + 88) = "labeled_keypoints_data" + 0x8000000000000000;
      *(void *)(v44 + 120) = &type metadata for String;
      *(void *)(v44 + 96) = v30;
      *(void *)(v44 + 104) = v31;
      strcpy((char *)(v44 + 128), "label_column");
      *(unsigned char *)(v44 + 141) = 0;
      *(_WORD *)(v44 + 142) = -5120;
      *(void *)(v44 + 168) = &type metadata for String;
      *(void *)(v44 + 144) = v32;
      *(void *)(v44 + 152) = v33;
      strcpy((char *)(v44 + 176), "feature_column");
      *(unsigned char *)(v44 + 191) = -18;
      *(void *)(v44 + 216) = &type metadata for String;
      *(void *)(v44 + 192) = v68;
      *(void *)(v44 + 200) = v67;
      break;
    case 6u:
      uint64_t v45 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (DataFrame, imageColumn: String, labelColumn: String));
      uint64_t v46 = *(int *)(v45 + 48);
      uint64_t v34 = *(uint64_t *)((char *)&v51 + v46);
      uint64_t v35 = *(uint64_t *)((char *)&v51 + v46 + 8);
      uint64_t v47 = *(int *)(v45 + 64);
      uint64_t v36 = *(uint64_t *)((char *)&v51 + v47);
      uint64_t v37 = *(uint64_t *)((char *)&v51 + v47 + 8);
      uint64_t v48 = type metadata accessor for DataFrame(0);
      (*(void (**)(uint64_t *, uint64_t))(*(void *)(v48 - 8) + 8))(&v51, v48);
LABEL_11:
      uint64_t v49 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, Any)>);
      uint64_t v44 = swift_initStackObject(v49, v60);
      *(void *)(v44 + 16) = 3;
      *(void *)(v44 + 24) = 6;
      *(void *)(v44 + 32) = 1684957547;
      *(void *)(v44 + 40) = 0xE400000000000000;
      *(void *)(v44 + 72) = &type metadata for String;
      *(void *)(v44 + 48) = 0xD000000000000012;
      *(void *)(v44 + 56) = "o load training data." + 0x8000000000000000;
      strcpy((char *)(v44 + 80), "image_column");
      *(unsigned char *)(v44 + 93) = 0;
      *(_WORD *)(v44 + 94) = -5120;
      *(void *)(v44 + 120) = &type metadata for String;
      *(void *)(v44 + 96) = v34;
      *(void *)(v44 + 104) = v35;
      strcpy((char *)(v44 + 128), "label_column");
      *(unsigned char *)(v44 + 141) = 0;
      *(_WORD *)(v44 + 142) = -5120;
      *(void *)(v44 + 168) = &type metadata for String;
      *(void *)(v44 + 144) = v36;
      *(void *)(v44 + 152) = v37;
      break;
  }
  return Dictionary.init(dictionaryLiteral:)(v44, &type metadata for String, (char *)&type metadata for Any + 8, &protocol witness table for String);
}

uint64_t MLHandPoseClassifier.ModelParameters.ValidationData.dictionary.getter()
{
  int64_t v1 = *(void *)(*(void *)(type metadata accessor for MLHandPoseClassifier.DataSource(0) - 8) + 64);
  uint64_t v2 = alloca(v1);
  int64_t v3 = alloca(v1);
  uint64_t v4 = type metadata accessor for MLHandPoseClassifier.ModelParameters.ValidationData(0);
  int64_t v5 = *(void *)(*(void *)(v4 - 8) + 64);
  char v6 = alloca(v5);
  char v7 = alloca(v5);
  outlined init with copy of MLTrainingSessionParameters(v0, (uint64_t)&v23, type metadata accessor for MLHandPoseClassifier.ModelParameters.ValidationData);
  int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload(&v23, v4);
  if (!EnumCaseMultiPayload)
  {
    char v13 = v24;
    char v14 = v25;
    uint64_t v15 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, Any)>);
    long long v31 = v23;
    uint64_t inited = (void *)swift_initStackObject(v15, &v23);
    inited[2] = 2;
    inited[3] = 4;
    inited[4] = 1684957547;
    inited[5] = 0xE400000000000000;
    inited[9] = &type metadata for String;
    inited[6] = 0x74696C7073;
    inited[7] = 0xE500000000000000;
    inited[10] = 1635017060;
    inited[11] = 0xE400000000000000;
    long long v28 = v31;
    char v29 = v13;
    char v30 = v14;
    uint64_t v17 = MLSplitStrategy.dictionary.getter();
    inited[15] = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [String : Any]);
    inited[12] = v17;
    uint64_t v18 = (char *)&type metadata for Any + 8;
    uint64_t v19 = inited;
    return Dictionary.init(dictionaryLiteral:)(v19, &type metadata for String, v18, &protocol witness table for String);
  }
  if (EnumCaseMultiPayload != 1)
  {
    uint64_t v20 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, Any)>);
    char v21 = (void *)swift_initStackObject(v20, v27);
    v21[2] = 1;
    v21[3] = 2;
    v21[4] = 1684957547;
    v21[5] = 0xE400000000000000;
    v21[9] = &type metadata for String;
    v21[6] = 1701736302;
    v21[7] = 0xE400000000000000;
    uint64_t v18 = (char *)&type metadata for Any + 8;
    uint64_t v19 = v21;
    return Dictionary.init(dictionaryLiteral:)(v19, &type metadata for String, v18, &protocol witness table for String);
  }
  outlined init with take of MLClassifierMetrics((uint64_t)&v23, (uint64_t)&v23, type metadata accessor for MLHandPoseClassifier.DataSource);
  uint64_t v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, Any)>);
  long long v10 = (void *)swift_initStackObject(v9, v26);
  v10[2] = 2;
  v10[3] = 4;
  v10[4] = 1684957547;
  v10[5] = 0xE400000000000000;
  v10[9] = &type metadata for String;
  v10[6] = 0x756F735F61746164;
  v10[7] = 0xEB00000000656372;
  v10[10] = 1635017060;
  v10[11] = 0xE400000000000000;
  uint64_t v11 = MLHandPoseClassifier.DataSource.dictionary.getter();
  v10[15] = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [String : Any]);
  v10[12] = v11;
  uint64_t v12 = Dictionary.init(dictionaryLiteral:)(v10, &type metadata for String, (char *)&type metadata for Any + 8, &protocol witness table for String);
  outlined destroy of MLActivityClassifier.ModelParameters((uint64_t)&v23, type metadata accessor for MLHandPoseClassifier.DataSource);
  return v12;
}

void *MLHandPoseClassifier.DataSource.table.getter(__m128 a1)
{
  uint64_t v82 = v2;
  uint64_t v88 = v1;
  uint64_t v75 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Column<String>);
  uint64_t v3 = *(void *)(v75 - 8);
  int64_t v4 = *(void *)(v3 + 64);
  int64_t v5 = alloca(v4);
  char v6 = alloca(v4);
  uint64_t v70 = &v68;
  int64_t v7 = *(void *)(*(void *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AnyColumn?)
                             - 8)
                 + 64);
  uint64_t v8 = alloca(v7);
  uint64_t v9 = alloca(v7);
  uint64_t v71 = &v68;
  uint64_t v78 = type metadata accessor for AnyColumn(0);
  uint64_t v74 = *(void *)(v78 - 8);
  int64_t v10 = *(void *)(v74 + 64);
  uint64_t v11 = alloca(v10);
  uint64_t v12 = alloca(v10);
  unint64_t v76 = &v68;
  char v13 = alloca(v10);
  char v14 = alloca(v10);
  uint64_t v79 = &v68;
  uint64_t v15 = type metadata accessor for DataFrame(0);
  uint64_t v81 = *(void *)(v15 - 8);
  int64_t v16 = *(void *)(v81 + 64);
  uint64_t v17 = alloca(v16);
  uint64_t v18 = alloca(v16);
  uint64_t v83 = &v68;
  uint64_t v19 = alloca(v16);
  uint64_t v20 = alloca(v16);
  uint64_t v87 = &v68;
  char v21 = alloca(v16);
  uint64_t v22 = alloca(v16);
  long long v23 = alloca(v16);
  char v24 = alloca(v16);
  uint64_t v86 = &v68;
  uint64_t v25 = type metadata accessor for MLHandPoseClassifier.DataSource(0);
  int64_t v26 = *(void *)(*(void *)(v25 - 8) + 64);
  uint64_t v27 = alloca(v26);
  long long v28 = alloca(v26);
  outlined init with copy of MLTrainingSessionParameters(v82, (uint64_t)&v68, type metadata accessor for MLHandPoseClassifier.DataSource);
  switch(swift_getEnumCaseMultiPayload(&v68, v25))
  {
    case 0u:
      char v30 = (int *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (at: URL, annotationFile: URL, imageColumn: String, labelColumn: String));
      long long v31 = (char *)&v68 + v30[12];
      swift_bridgeObjectRelease(*(uint64_t *)((char *)&v68 + v30[16] + 8));
      swift_bridgeObjectRelease(*(uint64_t *)((char *)&v68 + v30[20] + 8));
      uint64_t v32 = type metadata accessor for URL(0);
      uint64_t v33 = *(void (**)(char *, uint64_t))(*(void *)(v32 - 8) + 8);
      v33(v31, v32);
      v33((char *)&v68, v32);
      goto LABEL_16;
    case 1u:
    case 2u:
      uint64_t v29 = type metadata accessor for URL(0);
      (*(void (**)(uint64_t *, uint64_t))(*(void *)(v29 - 8) + 8))(&v68, v29);
LABEL_16:
      uint64_t result = v88;
      *uint64_t v88 = 0;
      *((unsigned char *)result + 8) = -1;
      return result;
    case 3u:
      uint64_t v34 = v68;
      char v35 = v69;
      char v36 = v73;
      char v37 = v75;
      swift_bridgeObjectRelease((_BYTE)v71);
      swift_bridgeObjectRelease(v36);
      swift_bridgeObjectRelease(v37);
      uint64_t v84 = v34;
      char v85 = v35 & 1;
      outlined copy of Result<_DataTable, Error>(v34, v35);
      static MLHandPoseClassifier.reformatKeypointsDataTable(table:featureColumn:)(&v84, 0x746E696F7079656BLL, (void *)0xE900000000000073, *(double *)a1.i64);
      outlined consume of Result<_DataTable, Error>(v34, v35);
      goto LABEL_10;
    case 4u:
      uint64_t v38 = v68;
      char v39 = v69;
      char v40 = v73;
      swift_bridgeObjectRelease((_BYTE)v71);
      swift_bridgeObjectRelease(v40);
      uint64_t result = v88;
      *uint64_t v88 = v38;
      *((unsigned char *)result + 8) = v39;
      return result;
    case 5u:
      uint64_t v77 = v3;
      uint64_t v83 = &v68;
      uint64_t v42 = (int *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (DataFrame, sessionIdColumn: String, labelColumn: String, featureColumn: String));
      swift_bridgeObjectRelease(*(uint64_t *)((char *)&v68 + v42[12] + 8));
      swift_bridgeObjectRelease(*(uint64_t *)((char *)&v68 + v42[16] + 8));
      uint64_t v43 = v42[20];
      uint64_t v82 = *(uint64_t *)((char *)&v68 + v43);
      uint64_t v44 = *(uint64_t **)((char *)&v68 + v43 + 8);
      uint64_t v80 = v15;
      uint64_t v45 = v15;
      uint64_t v46 = v81;
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(v81 + 32))(v86, &v68, v45);
      uint64_t v47 = v79;
      uint64_t v87 = v44;
      DataFrame.subscript.getter(v82, v44);
      uint64_t v48 = (void *)AnyColumn.wrappedElementType.getter();
      uint64_t v49 = *(void (**)(uint64_t *, uint64_t))(v74 + 8);
      v49(v47, v78);
      if (v48 == &type metadata for String)
      {
        uint64_t v58 = v70;
        DataFrame.subscript.getter(v82, v87, &type metadata for String);
        uint64_t v59 = (uint64_t)v71;
        Column<A>.parseAsJSONArrays()();
        (*(void (**)(uint64_t *, uint64_t))(v77 + 8))(v58, v75);
        uint64_t v62 = v78;
        __swift_storeEnumTagSinglePayload(v59, 0, 1, v78);
        int EnumTagSinglePayload = __swift_getEnumTagSinglePayload(v59, 1, v62);
        char v52 = v86;
        if (EnumTagSinglePayload == 1)
        {
          uint64_t v53 = (uint64_t)v83;
          _s11TabularData9AnyColumnVSgWOhTm_0(v59, &demangling cache variable for type metadata for AnyColumn?);
          uint64_t v51 = v80;
        }
        else
        {
          long long v64 = v76;
          uint64_t v65 = v59;
          uint64_t v66 = v74;
          (*(void (**)(uint64_t *, uint64_t, uint64_t))(v74 + 32))(v76, v65, v62);
          (*(void (**)(uint64_t *, uint64_t *, uint64_t))(v66 + 16))(v79, v64, v62);
          uint64_t v67 = v87;
          swift_bridgeObjectRetain((_BYTE)v87);
          DataFrame.subscript.setter(v79, v82, v67);
          char v52 = v86;
          v49(v76, v62);
          uint64_t v51 = v80;
          uint64_t v53 = (uint64_t)v83;
        }
        uint64_t v50 = v81;
      }
      else
      {
        uint64_t v50 = v46;
        uint64_t v51 = v80;
        char v52 = v86;
        uint64_t v53 = (uint64_t)v83;
      }
      *(double *)a1.i64 = (*(double (**)(uint64_t, uint64_t *, uint64_t))(v50 + 16))(v53, v52, v51);
      MLDataTable.init(_:convertArraysToShapedArrays:)(v53, 0, a1);
      uint64_t v84 = v72;
      char v85 = v73;
      static MLHandPoseClassifier.reformatKeypointsDataTable(table:featureColumn:)(&v84, v82, v87, *(double *)a1.i64);
      (*(void (**)(uint64_t *, uint64_t))(v50 + 8))(v52, v51);
      swift_bridgeObjectRelease((_BYTE)v87);
      uint64_t v61 = v88;
      uint64_t result = (void *)v84;
      char v60 = v85;
      goto LABEL_17;
    case 6u:
      uint64_t v54 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (DataFrame, imageColumn: String, labelColumn: String));
      swift_bridgeObjectRelease(*(uint64_t *)((char *)&v68 + *(int *)(v54 + 48) + 8));
      swift_bridgeObjectRelease(*(uint64_t *)((char *)&v68 + *(int *)(v54 + 64) + 8));
      uint64_t v55 = v87;
      uint64_t v56 = v81;
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(v81 + 32))(v87, &v68, v15);
      uint64_t v57 = (uint64_t)v83;
      *(double *)a1.i64 = (*(double (**)(uint64_t *, uint64_t *, uint64_t))(v56 + 16))(v83, v55, v15);
      MLDataTable.init(_:convertArraysToShapedArrays:)(v57, 0, a1);
      (*(void (**)(uint64_t *, uint64_t))(v56 + 8))(v55, v15);
LABEL_10:
      uint64_t result = (void *)v84;
      char v60 = v85;
      uint64_t v61 = v88;
LABEL_17:
      *uint64_t v61 = (uint64_t)result;
      *((unsigned char *)v61 + 8) = v60;
      return result;
    case 7u:
      JUMPOUT(0x8573CLL);
  }
}

uint64_t _s11TabularData9AnyColumnVSgWOhTm_0(uint64_t a1, uint64_t *a2)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(a2);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

void *MLObjectDetector.prediction(from:)(void *a1)
{
  return MLObjectDetector.modelPredictions(from:)(a1);
}

void *MLObjectDetector.modelPredictions(from:)(void *a1)
{
  type metadata accessor for OS_os_log(0, &lazy cache variable for type metadata for VNCoreMLModel, VNCoreMLModel_ptr);
  id v3 = *(id *)(*(void *)v2 + 24);
  id v4 = @nonobjc VNCoreMLModel.__allocating_init(for:)(v3);
  if (v1) {
    return a1;
  }
  id v5 = v4;
  id v6 = objc_allocWithZone((Class)VNCoreMLRequest);
  id v68 = v5;
  id v7 = [v6 initWithModel:v5];
  id v8 = objc_allocWithZone((Class)VNSequenceRequestHandler);
  id v67 = [v8 init];
  uint64_t v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>);
  int64_t v10 = (void *)swift_allocObject(v9, 40, 7);
  v10[2] = 1;
  v10[3] = 3;
  v10[4] = v7;
  *(void *)&long long v72 = v10;
  specialized Array._endMutation()();
  char v11 = v72;
  type metadata accessor for OS_os_log(0, &lazy cache variable for type metadata for VNRequest, VNRequest_ptr);
  id v69 = v7;
  Class isa = Array._bridgeToObjectiveC()().super.isa;
  char v13 = (NSURL *)swift_bridgeObjectRelease(v11);
  URL._bridgeToObjectiveC()(v13);
  uint64_t v15 = v14;
  *(void *)&long long v72 = 0;
  int64_t v16 = "performRequests:onImageURL:error:";
  LOBYTE(v7) = [v67 performRequests:isa onImageURL:v14 error:&v72];

  uint64_t v17 = (void *)v72;
  if (!(_BYTE)v7)
  {
    uint64_t v54 = (ValueMetadata *)(id)v72;
    _convertNSErrorToError(_:)(v17);
    uint64_t v48 = v54;

    uint64_t v53 = v68;
    uint64_t v18 = v69;
    goto LABEL_30;
  }
  uint64_t v18 = v69;
  id v19 = v69;
  v17;
  uint64_t v20 = outlined bridged method (ob) of @objc VNRequest.results.getter(v19);
  if (!v20
    || (char v21 = v20, v22 = (uint64_t)specialized _arrayConditionalCast<A, B>(_:)(v20), swift_bridgeObjectRelease(v21), !v22))
  {
    uint64_t v48 = &type metadata for MLCreateError;
    int64_t v16 = (const char *)lazy protocol witness table accessor for type MLCreateError and conformance MLCreateError();
    swift_allocError(&type metadata for MLCreateError, v16, 0, 0);
    *(void *)uint64_t v49 = 0xD000000000000046;
    *(void *)(v49 + 8) = "e Classification algorithm." + 0x8000000000000000;
    *(_OWORD *)(v49 + 16) = 0;
    *(_OWORD *)(v49 + 32) = 0;
    *(unsigned char *)(v49 + 48) = 0;
    uint64_t v53 = v68;
LABEL_30:
    swift_willThrow(v48, v16, v49, v50, v51, v52);

    return a1;
  }
  uint64_t v66 = v22;
  if ((v22 & 0x4000000000000001) != 0)
  {
    id v56 = v19;
    uint64_t v57 = v22 & 0xFFFFFFFFFFFFF8;
    if (v22) {
      uint64_t v57 = v22;
    }
    swift_bridgeObjectRetain(v22);
    uint64_t v58 = _CocoaArrayWrapper.endIndex.getter(v57);
    swift_bridgeObjectRelease(v22);
    if (v58 < 0) {
      BUG();
    }
    uint64_t v23 = v58;
    id v19 = v56;
  }
  else
  {
    uint64_t v23 = *(void *)((char *)&dword_10 + (v22 & 0xFFFFFFFFFFFFF8));
  }
  id v65 = v19;
  if (v23)
  {
    a1 = _swiftEmptyArrayStorage;
    uint64_t v24 = 0;
    uint64_t v64 = v23;
    do
    {
      if ((v22 & 0xC000000000000003) != 0) {
        id v25 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v24, v22);
      }
      else {
        id v25 = *(id *)(v22 + 8 * v24 + 32);
      }
      int64_t v26 = v25;
      id v27 = [v25 labels];
      id v28 = v27;

      uint64_t v29 = type metadata accessor for OS_os_log(0, &lazy cache variable for type metadata for VNClassificationObservation, VNClassificationObservation_ptr);
      uint64_t v30 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v28, v29);

      if ((v30 & 0xC000000000000003) != 0)
      {
        id v31 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(0, v30);
      }
      else
      {
        if (!*(void *)((char *)&dword_10 + (v30 & 0xFFFFFFFFFFFFF8))) {
          BUG();
        }
        id v31 = *(id *)(v30 + 32);
      }
      uint64_t v32 = v31;
      swift_bridgeObjectRelease(v30);
      id v33 = [v32 identifier];
      id v34 = v33;

      uint64_t v35 = static String._unconditionallyBridgeFromObjectiveC(_:)(v34);
      uint64_t v63 = v36;

      uint64_t v22 = v66;
      if ((v66 & 0xC000000000000003) != 0) {
        char v37 = (const char *)specialized _ArrayBuffer._getElementSlowPath(_:)(v24, v66);
      }
      else {
        char v37 = (const char *)*(id *)(v66 + 8 * v24 + 32);
      }
      uint64_t v38 = (char *)v37;
      [v37 boundingBox:&v72];
      long long v59 = v72;
      float v39 = *(float *)&v73;
      long long v61 = v73;

      if ((v66 & 0xC000000000000003) != 0) {
        id v40 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v24, v66);
      }
      else {
        id v40 = *(id *)(v66 + 8 * v24 + 32);
      }
      uint64_t v45 = v40;
      [v40 confidence:v41, v42, v43, v44, v59, v61];

      id v70 = (id)v35;
      if (!swift_isUniquelyReferenced_nonNull_native(a1)) {
        a1 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, a1[2] + 1, 1, (uint64_t)a1);
      }
      unint64_t v46 = a1[2];
      if (a1[3] >> 1 <= v46) {
        a1 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1[3] >= 2uLL, v46 + 1, 1, (uint64_t)a1);
      }
      ++v24;
      a1[2] = v46 + 1;
      uint64_t v47 = 7 * v46;
      a1[v47 + 4] = v70;
      a1[v47 + 5] = v63;
      *(_OWORD *)&a1[v47 + 6] = v60;
      *(_OWORD *)&a1[v47 + 8] = v62;
      *(double *)&a1[v47 + 10] = v39;
    }
    while (v64 != v24);
  }
  else
  {
    a1 = _swiftEmptyArrayStorage;
  }

  swift_bridgeObjectRelease(v22);
  return a1;
}

void *MLObjectDetector.predictions(from:)(uint64_t a1)
{
  v3[2] = v1;
  return _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSay10Foundation3URLVG_Say8CreateML16MLObjectDetectorV16ObjectAnnotationVGsAE_pTg5((void (*)(uint64_t, uint64_t *))partial apply for closure #1 in MLObjectDetector.predictions(from:), v3, a1);
}

void *closure #1 in MLObjectDetector.predictions(from:)(void *a1, uint64_t a2, void *a3)
{
  id v6 = v3;
  uint64_t result = MLObjectDetector.modelPredictions(from:)(a1);
  if (v4) {
    *a3 = v4;
  }
  else {
    void *v6 = result;
  }
  return result;
}

void *partial apply for closure #1 in MLObjectDetector.predictions(from:)(void *a1, void *a2)
{
  return closure #1 in MLObjectDetector.predictions(from:)(a1, *(void *)(v2 + 16), a2);
}

uint64_t MLCheckpoint.url.getter()
{
  uint64_t v2 = v0;
  uint64_t v3 = type metadata accessor for URL(0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v3 - 8) + 16))(v2, v1, v3);
}

uint64_t MLCheckpoint.url.setter(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for URL(0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v2 - 8) + 40))(v1, a1, v2);
}

void (*MLCheckpoint.url.modify())()
{
  return MLBoostedTreeRegressor.ModelParameters.maxDepth.modify;
}

char MLCheckpoint.phase.getter()
{
  uint64_t v2 = v0;
  char result = *(unsigned char *)(v1 + *(int *)(type metadata accessor for MLCheckpoint(0) + 20));
  unsigned char *v2 = result;
  return result;
}

uint64_t type metadata accessor for MLCheckpoint(uint64_t a1)
{
  uint64_t result = type metadata singleton initialization cache for MLCheckpoint;
  if (!type metadata singleton initialization cache for MLCheckpoint) {
    return swift_getSingletonMetadata(a1, &nominal type descriptor for MLCheckpoint);
  }
  return result;
}

uint64_t MLCheckpoint.phase.setter(char *a1)
{
  char v2 = *a1;
  uint64_t result = *(int *)(type metadata accessor for MLCheckpoint(0) + 20);
  *(unsigned char *)(v1 + result) = v2;
  return result;
}

void (*MLCheckpoint.phase.modify())()
{
  return MLBoostedTreeRegressor.ModelParameters.maxDepth.modify;
}

uint64_t MLCheckpoint.iteration.getter()
{
  return *(void *)(v0 + *(int *)(type metadata accessor for MLCheckpoint(0) + 24));
}

uint64_t MLCheckpoint.iteration.setter(uint64_t a1)
{
  uint64_t result = *(int *)(type metadata accessor for MLCheckpoint(0) + 24);
  *(void *)(v1 + result) = a1;
  return result;
}

void (*MLCheckpoint.iteration.modify())()
{
  return MLBoostedTreeRegressor.ModelParameters.maxDepth.modify;
}

uint64_t MLCheckpoint.date.getter()
{
  uint64_t v2 = v0;
  uint64_t v3 = v1 + *(int *)(type metadata accessor for MLCheckpoint(0) + 28);
  uint64_t v4 = type metadata accessor for Date(0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(v2, v3, v4);
}

uint64_t MLCheckpoint.date.setter(uint64_t a1)
{
  uint64_t v2 = v1 + *(int *)(type metadata accessor for MLCheckpoint(0) + 28);
  uint64_t v3 = type metadata accessor for Date(0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v3 - 8) + 40))(v2, a1, v3);
}

void (*MLCheckpoint.date.modify())()
{
  return MLBoostedTreeRegressor.ModelParameters.maxDepth.modify;
}

uint64_t MLCheckpoint.metrics.getter()
{
  uint64_t v1 = type metadata accessor for MLCheckpoint(0);
  return swift_bridgeObjectRetain(*(void *)(v0 + *(int *)(v1 + 32)));
}

uint64_t MLCheckpoint.metrics.setter(uint64_t a1)
{
  uint64_t v2 = *(int *)(type metadata accessor for MLCheckpoint(0) + 32);
  uint64_t result = swift_bridgeObjectRelease(*(void *)(v1 + v2));
  *(void *)(v1 + v2) = a1;
  return result;
}

void (*MLCheckpoint.metrics.modify())()
{
  return MLBoostedTreeRegressor.ModelParameters.maxDepth.modify;
}

CreateML::MLCheckpoint::CodingKeys_optional __swiftcall MLCheckpoint.CodingKeys.init(stringValue:)(Swift::String stringValue)
{
  if (stringValue._countAndFlagsBits == 7107189 && stringValue._object == (void *)0xE300000000000000)
  {
    char object = (void *)0xE300000000000000;
LABEL_6:
    swift_bridgeObjectRelease(object);
    return 0;
  }
  if (_stringCompareWithSmolCheck(_:_:expecting:)(7107189, 0xE300000000000000, stringValue._countAndFlagsBits, stringValue._object, 0))
  {
    char object = stringValue._object;
    goto LABEL_6;
  }
  if (stringValue._countAndFlagsBits == 0x6573616870 && stringValue._object == (void *)0xE500000000000000)
  {
    uint64_t v3 = (void *)0xE500000000000000;
LABEL_12:
    swift_bridgeObjectRelease(v3);
    return (CreateML::MLCheckpoint::CodingKeys_optional)1;
  }
  if (_stringCompareWithSmolCheck(_:_:expecting:)(0x6573616870, 0xE500000000000000, stringValue._countAndFlagsBits, stringValue._object, 0))
  {
    uint64_t v3 = stringValue._object;
    goto LABEL_12;
  }
  if (stringValue._countAndFlagsBits == 0x6F69746172657469 && stringValue._object == (void *)0xE90000000000006ELL)
  {
    uint64_t v4 = (void *)0xE90000000000006ELL;
LABEL_18:
    swift_bridgeObjectRelease(v4);
    return (CreateML::MLCheckpoint::CodingKeys_optional)2;
  }
  if (_stringCompareWithSmolCheck(_:_:expecting:)(0x6F69746172657469, 0xE90000000000006ELL, stringValue._countAndFlagsBits, stringValue._object, 0))
  {
    uint64_t v4 = stringValue._object;
    goto LABEL_18;
  }
  if (stringValue._countAndFlagsBits == 1702125924 && stringValue._object == (void *)0xE400000000000000)
  {
    id v5 = (void *)0xE400000000000000;
LABEL_24:
    swift_bridgeObjectRelease(v5);
    return (CreateML::MLCheckpoint::CodingKeys_optional)3;
  }
  if (_stringCompareWithSmolCheck(_:_:expecting:)(1702125924, 0xE400000000000000, stringValue._countAndFlagsBits, stringValue._object, 0))
  {
    id v5 = stringValue._object;
    goto LABEL_24;
  }
  if (stringValue._countAndFlagsBits == 0x697274654D6C7275 && stringValue._object == (void *)0xEA00000000007363)
  {
    id v6 = (void *)0xEA00000000007363;
LABEL_30:
    swift_bridgeObjectRelease(v6);
    return (CreateML::MLCheckpoint::CodingKeys_optional)4;
  }
  if (_stringCompareWithSmolCheck(_:_:expecting:)(0x697274654D6C7275, 0xEA00000000007363, stringValue._countAndFlagsBits, stringValue._object, 0))
  {
    id v6 = stringValue._object;
    goto LABEL_30;
  }
  if (stringValue._countAndFlagsBits == 0x7363697274656DLL && stringValue._object == (void *)0xE700000000000000)
  {
    swift_bridgeObjectRelease(0xE700000000000000);
    return (CreateML::MLCheckpoint::CodingKeys_optional)5;
  }
  else
  {
    char v7 = _stringCompareWithSmolCheck(_:_:expecting:)(0x7363697274656DLL, 0xE700000000000000, stringValue._countAndFlagsBits, stringValue._object, 0);
    swift_bridgeObjectRelease(stringValue._object);
    return (CreateML::MLCheckpoint::CodingKeys_optional)(6 - (v7 & 1));
  }
}

uint64_t MLCheckpoint.CodingKeys.stringValue.getter(char a1)
{
  switch(a1)
  {
    case 0:
      uint64_t result = 7107189;
      break;
    case 1:
      uint64_t result = 0x6573616870;
      break;
    case 2:
      uint64_t result = 0x6F69746172657469;
      break;
    case 3:
      uint64_t result = 1702125924;
      break;
    case 4:
      uint64_t result = 0x697274654D6C7275;
      break;
    case 5:
      uint64_t result = 0x7363697274656DLL;
      break;
  }
  return result;
}

uint64_t protocol witness for CodingKey.stringValue.getter in conformance MLCheckpoint.CodingKeys()
{
  return MLCheckpoint.CodingKeys.stringValue.getter(*v0);
}

CreateML::MLCheckpoint::CodingKeys_optional protocol witness for CodingKey.init(stringValue:) in conformance MLCheckpoint.CodingKeys(Swift::String a1)
{
  uint64_t v2 = v1;
  result.value = MLCheckpoint.CodingKeys.init(stringValue:)(a1).value;
  v2->value = result.value;
  return result;
}

unsigned char *protocol witness for CodingKey.init(intValue:) in conformance MLCheckpoint.CodingKeys()
{
  *CreateML::MLCheckpoint::CodingKeys_optional result = 6;
  return result;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance MLCheckpoint.CodingKeys(uint64_t a1)
{
  uint64_t v1 = lazy protocol witness table accessor for type MLCheckpoint.CodingKeys and conformance MLCheckpoint.CodingKeys();
  return CodingKey.description.getter(a1, v1);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance MLCheckpoint.CodingKeys(uint64_t a1)
{
  uint64_t v1 = lazy protocol witness table accessor for type MLCheckpoint.CodingKeys and conformance MLCheckpoint.CodingKeys();
  return CodingKey.debugDescription.getter(a1, v1);
}

uint64_t MLCheckpoint.init(from:)(void *a1)
{
  uint64_t v102 = v2;
  uint64_t v86 = v1;
  uint64_t v87 = type metadata accessor for Date(0);
  uint64_t v88 = *(void *)(v87 - 8);
  int64_t v3 = *(void *)(v88 + 64);
  uint64_t v4 = alloca(v3);
  id v5 = alloca(v3);
  char v93 = &v85;
  uint64_t v97 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<MLCheckpoint.CodingKeys>);
  uint64_t v95 = *(void *)(v97 - 8);
  int64_t v6 = *(void *)(v95 + 64);
  char v7 = alloca(v6);
  id v8 = alloca(v6);
  id v92 = &v85;
  int64_t v9 = *(void *)(*(void *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for URL?)
                             - 8)
                 + 64);
  int64_t v10 = alloca(v9);
  char v11 = alloca(v9);
  uint64_t v98 = type metadata accessor for URL(0);
  uint64_t v100 = *(void *)(v98 - 8);
  int64_t v12 = *(void *)(v100 + 64);
  char v13 = alloca(v12);
  char v14 = alloca(v12);
  uint64_t v99 = &v85;
  uint64_t v15 = alloca(v12);
  int64_t v16 = alloca(v12);
  uint64_t v101 = &v85;
  int v91 = (int *)type metadata accessor for MLCheckpoint(0);
  int64_t v17 = *(void *)(*((void *)v91 - 1) + 64);
  uint64_t v18 = alloca(v17);
  id v19 = alloca(v17);
  long long v96 = &v85;
  uint64_t v20 = a1[3];
  uint64_t v21 = a1[4];
  uint64_t v94 = a1;
  __swift_project_boxed_opaque_existential_0Tm(a1, v20);
  uint64_t v22 = dispatch thunk of Decoder.userInfo.getter(v20, v21);
  if (one-time initialization token for sessionDirectory != -1) {
    swift_once(&one-time initialization token for sessionDirectory, one-time initialization function for sessionDirectory);
  }
  uint64_t v23 = type metadata accessor for CodingUserInfoKey(0);
  uint64_t v24 = __swift_project_value_buffer(v23, (uint64_t)static CodingUserInfoKey.sessionDirectory);
  specialized Dictionary.subscript.getter(v24, v22);
  swift_bridgeObjectRelease(v22);
  if (!v90[3])
  {
    outlined destroy of Either<LogisticRegressionClassifier<Float, String>, FullyConnectedNetworkClassifier<Float, String>>((uint64_t)v90, &demangling cache variable for type metadata for Any?);
    __swift_storeEnumTagSinglePayload((uint64_t)&v85, 1, 1, v98);
LABEL_30:
    outlined destroy of Either<LogisticRegressionClassifier<Float, String>, FullyConnectedNetworkClassifier<Float, String>>((uint64_t)&v85, &demangling cache variable for type metadata for URL?);
    _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, 0xD00000000000002CLL, "CreateML/MLCheckpoint.swift" + 0x8000000000000000, "CreateML/MLCheckpoint.swift", 27, 2, 69, 0);
    BUG();
  }
  uint64_t v89 = (char *)&type metadata for Any + 8;
  uint64_t v25 = v98;
  unsigned __int8 v26 = swift_dynamicCast(&v85, v90, (char *)&type metadata for Any + 8, v98, 6);
  __swift_storeEnumTagSinglePayload((uint64_t)&v85, v26 ^ 1u, 1, v25);
  if (__swift_getEnumTagSinglePayload((uint64_t)&v85, 1, v25) == 1) {
    goto LABEL_30;
  }
  (*(void (**)(uint64_t *, uint64_t *, uint64_t))(v100 + 32))(v101, &v85, v25);
  id v27 = v94;
  uint64_t v28 = v94[3];
  uint64_t v29 = v94[4];
  __swift_project_boxed_opaque_existential_0Tm(v94, v28);
  uint64_t v30 = lazy protocol witness table accessor for type MLCheckpoint.CodingKeys and conformance MLCheckpoint.CodingKeys();
  uint64_t v31 = v102;
  dispatch thunk of Decoder.container<A>(keyedBy:)(&type metadata for MLCheckpoint.CodingKeys, &type metadata for MLCheckpoint.CodingKeys, v30, v28, v29);
  if (v31)
  {
    (*(void (**)(uint64_t *, uint64_t))(v100 + 8))(v101, v98);
    return __swift_destroy_boxed_opaque_existential_1Tm(v27);
  }
  LOBYTE(v90[0]) = 0;
  uint64_t v32 = lazy protocol witness table accessor for type VNImageOption and conformance VNImageOption(&lazy protocol witness table cache variable for type URL and conformance URL, (uint64_t (*)(uint64_t))&type metadata accessor for URL, (uint64_t)&protocol conformance descriptor for URL);
  KeyedDecodingContainer.decode<A>(_:forKey:)(v98, v90, v97, v98, v32);
  uint64_t v102 = 0;
  id v34 = objc_opt_self(NSFileManager);
  id v35 = [v34 defaultManager];
  id v36 = v35;
  URL.path.getter(v35);
  char v38 = v37;
  NSString v39 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(v38);
  unsigned __int8 v40 = [v36 fileExistsAtPath:v39];

  if (v40)
  {
    uint64_t v41 = v98;
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(v100 + 16))(v96, v99, v98);
  }
  else
  {
    uint64_t v42 = URL.path.getter(v39);
    char v44 = v43;
    URL.appendingPathComponent(_:)(v42, v43);
    swift_bridgeObjectRelease(v44);
    uint64_t v41 = v98;
  }
  v103[0] = 1;
  uint64_t v45 = lazy protocol witness table accessor for type MLPhase and conformance MLPhase();
  uint64_t v46 = v97;
  uint64_t v47 = v92;
  uint64_t v48 = v102;
  KeyedDecodingContainer.decode<A>(_:forKey:)(&type metadata for MLPhase, v103, v97, &type metadata for MLPhase, v45);
  if (v48)
  {
    uint64_t v102 = v48;
    uint64_t v49 = v41;
    uint64_t v50 = *(void (**)(uint64_t *, uint64_t))(v100 + 8);
    v50(v99, v49);
    uint64_t v51 = v46;
    char v52 = 0;
    (*(void (**)(uint64_t *, uint64_t))(v95 + 8))(v47, v51);
    v50(v101, v49);
    goto LABEL_13;
  }
  *((unsigned char *)v96 + v91[5]) = v90[0];
  LOBYTE(v90[0]) = 2;
  uint64_t v53 = KeyedDecodingContainer.decode(_:forKey:)(v90, v46);
  *(uint64_t *)((char *)v96 + v91[6]) = v53;
  LOBYTE(v90[0]) = 3;
  uint64_t v54 = lazy protocol witness table accessor for type VNImageOption and conformance VNImageOption(&lazy protocol witness table cache variable for type Date and conformance Date, (uint64_t (*)(uint64_t))&type metadata accessor for Date, (uint64_t)&protocol conformance descriptor for Date);
  uint64_t v55 = v87;
  KeyedDecodingContainer.decode<A>(_:forKey:)(v87, v90, v97, v87, v54);
  uint64_t v102 = 0;
  (*(void (**)(char *, uint64_t *, uint64_t))(v88 + 32))((char *)v96 + v91[7], v93, v55);
  uint64_t v57 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [MLProgress.Metric : Double]);
  v103[0] = 5;
  uint64_t v58 = lazy protocol witness table accessor for type [MLProgress.Metric : Double] and conformance <> [A : B](&lazy protocol witness table cache variable for type [MLProgress.Metric : Double] and conformance <> [A : B], (void (*)(void))lazy protocol witness table accessor for type MLProgress.Metric and conformance MLProgress.Metric, (uint64_t)&protocol witness table for Double, (uint64_t)&protocol conformance descriptor for <> [A : B]);
  uint64_t v59 = v97;
  uint64_t v60 = v102;
  KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)(v57, v103, v97, v57, v58);
  uint64_t v102 = v60;
  if (v60)
  {
    uint64_t v61 = v59;
    uint64_t v62 = v100;
LABEL_23:
    uint64_t v50 = *(void (**)(uint64_t *, uint64_t))(v62 + 8);
    uint64_t v49 = v98;
    v50(v99, v98);
    (*(void (**)(uint64_t *, uint64_t))(v95 + 8))(v47, v61);
    v50(v101, v49);
    char v52 = 1;
LABEL_13:
    __swift_destroy_boxed_opaque_existential_1Tm(v94);
    id v56 = (char *)v96;
    uint64_t result = ((uint64_t (*)(uint64_t *, uint64_t))v50)(v96, v49);
    if (v52) {
      return (*(uint64_t (**)(char *, uint64_t))(v88 + 8))(&v56[v91[7]], v87);
    }
    return result;
  }
  char v63 = v90[0];
  if (v90[0])
  {
    uint64_t v64 = v102;
    char v93 = specialized _NativeDictionary.mapValues<A>(_:)(v90[0]);
    uint64_t v102 = v64;
    swift_bridgeObjectRelease(v63);
  }
  else
  {
    uint64_t v65 = lazy protocol witness table accessor for type MLProgress.Metric and conformance MLProgress.Metric();
    char v93 = (uint64_t *)Dictionary.init(dictionaryLiteral:)(_swiftEmptyArrayStorage, &type metadata for MLProgress.Metric, v89, v65);
  }
  uint64_t v66 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [MLProgress.Metric : URL]);
  v103[0] = 4;
  uint64_t v67 = lazy protocol witness table accessor for type [MLProgress.Metric : URL] and conformance <> [A : B]();
  uint64_t v68 = v97;
  uint64_t v47 = v92;
  uint64_t v69 = v102;
  KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)(v66, v103, v97, v66, v67);
  uint64_t v102 = v69;
  if (v69)
  {
    swift_bridgeObjectRelease((_BYTE)v93);
    uint64_t v62 = v100;
    uint64_t v61 = v68;
    goto LABEL_23;
  }
  char v70 = v90[0];
  if (v90[0])
  {
    uint64_t v71 = alloca(24);
    long long v72 = alloca(32);
    uint64_t v87 = (uint64_t)v101;
    uint64_t v73 = v102;
    uint64_t v74 = specialized _NativeDictionary.mapValues<A>(_:)((void (*)(void *))partial apply for closure #2 in MLCheckpoint.init(from:), (uint64_t)&v85, v90[0]);
    swift_bridgeObjectRelease(v70);
    uint64_t v75 = specialized _NativeDictionary.mapValues<A>(_:)((uint64_t)v74);
    uint64_t v76 = v73;
    swift_release();
    uint64_t v77 = v100;
  }
  else
  {
    uint64_t v78 = lazy protocol witness table accessor for type MLProgress.Metric and conformance MLProgress.Metric();
    uint64_t v75 = (void *)Dictionary.init(dictionaryLiteral:)(_swiftEmptyArrayStorage, &type metadata for MLProgress.Metric, v89, v78);
    uint64_t v77 = v100;
    uint64_t v76 = v102;
  }
  uint64_t v79 = (uint64_t)v93;
  unsigned __int8 isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v93);
  v90[0] = v79;
  specialized _NativeDictionary.merge<A>(_:isUnique:uniquingKeysWith:)((uint64_t)v75, (uint64_t)specialized thunk for @escaping @callee_guaranteed (@in_guaranteed A, @in_guaranteed B) -> (@out A, @out B), 0, isUniquelyReferenced_nonNull_native, v90);
  if (v76)
  {
    swift_bridgeObjectRelease(0);
    BUG();
  }
  uint64_t v81 = v90[0];
  swift_bridgeObjectRelease(0);
  uint64_t v82 = *(void (**)(uint64_t *, uint64_t))(v77 + 8);
  uint64_t v83 = v98;
  v82(v99, v98);
  (*(void (**)(uint64_t *, uint64_t))(v95 + 8))(v92, v97);
  v82(v101, v83);
  uint64_t v84 = (uint64_t)v96;
  *(uint64_t *)((char *)v96 + v91[8]) = v81;
  outlined init with copy of MLCheckpoint(v84, v86);
  __swift_destroy_boxed_opaque_existential_1Tm(v94);
  return outlined destroy of MLCheckpoint(v84);
}

uint64_t closure #2 in MLCheckpoint.init(from:)()
{
  uint64_t v0 = URL.path.getter();
  uint64_t v2 = v1;
  URL.appendingPathComponent(_:)(v0, v1);
  return swift_bridgeObjectRelease(v2);
}

uint64_t MLCheckpoint.encode(to:)(void *a1)
{
  uint64_t v83 = v1;
  uint64_t v79 = (void *)v2;
  uint64_t v76 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<MLCheckpoint.CodingKeys>);
  uint64_t v78 = *(void *)(v76 - 8);
  int64_t v3 = *(void *)(v78 + 64);
  uint64_t v4 = alloca(v3);
  id v5 = alloca(v3);
  uint64_t v75 = v71;
  int64_t v6 = *(void *)(*(void *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for URL?)
                             - 8)
                 + 64);
  char v7 = alloca(v6);
  id v8 = alloca(v6);
  uint64_t v80 = type metadata accessor for URL(0);
  uint64_t v82 = *(void *)(v80 - 8);
  int64_t v9 = *(void *)(v82 + 64);
  int64_t v10 = alloca(v9);
  char v11 = alloca(v9);
  uint64_t v77 = v71;
  int64_t v12 = alloca(v9);
  char v13 = alloca(v9);
  uint64_t v81 = v71;
  uint64_t v14 = a1[3];
  uint64_t v15 = a1[4];
  uint64_t v74 = a1;
  __swift_project_boxed_opaque_existential_0Tm(a1, v14);
  uint64_t v16 = dispatch thunk of Encoder.userInfo.getter(v14, v15);
  if (one-time initialization token for sessionDirectory != -1) {
    swift_once(&one-time initialization token for sessionDirectory, one-time initialization function for sessionDirectory);
  }
  uint64_t v17 = type metadata accessor for CodingUserInfoKey(0);
  uint64_t v18 = __swift_project_value_buffer(v17, (uint64_t)static CodingUserInfoKey.sessionDirectory);
  specialized Dictionary.subscript.getter(v18, v16);
  swift_bridgeObjectRelease(v16);
  if (!v73[3])
  {
    outlined destroy of Either<LogisticRegressionClassifier<Float, String>, FullyConnectedNetworkClassifier<Float, String>>((uint64_t)v73, &demangling cache variable for type metadata for Any?);
    __swift_storeEnumTagSinglePayload((uint64_t)v71, 1, 1, v80);
LABEL_17:
    outlined destroy of Either<LogisticRegressionClassifier<Float, String>, FullyConnectedNetworkClassifier<Float, String>>((uint64_t)v71, &demangling cache variable for type metadata for URL?);
    _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, 0xD00000000000002CLL, " specify a session directory" + 0x8000000000000000, "CreateML/MLCheckpoint.swift", 27, 2, 104, 0);
    BUG();
  }
  uint64_t v19 = v80;
  unsigned __int8 v20 = swift_dynamicCast(v71, v73, (char *)&type metadata for Any + 8, v80, 6);
  __swift_storeEnumTagSinglePayload((uint64_t)v71, v20 ^ 1u, 1, v19);
  if (__swift_getEnumTagSinglePayload((uint64_t)v71, 1, v19) == 1) {
    goto LABEL_17;
  }
  (*(void (**)(void *, void *, uint64_t))(v82 + 32))(v81, v71, v19);
  uint64_t v21 = v74[3];
  uint64_t v22 = v74[4];
  __swift_project_boxed_opaque_existential_0Tm(v74, v21);
  uint64_t v23 = lazy protocol witness table accessor for type MLCheckpoint.CodingKeys and conformance MLCheckpoint.CodingKeys();
  dispatch thunk of Encoder.container<A>(keyedBy:)(&type metadata for MLCheckpoint.CodingKeys, &type metadata for MLCheckpoint.CodingKeys, v23, v21, v22);
  uint64_t v24 = URL.path.getter(&type metadata for MLCheckpoint.CodingKeys);
  uint64_t v74 = v25;
  v73[0] = v24;
  v73[1] = v25;
  uint64_t v26 = URL.path.getter(&type metadata for MLCheckpoint.CodingKeys);
  LOBYTE(v21) = v27;
  v71[0] = 0;
  v72[0] = v26;
  v72[1] = v27;
  v71[1] = 0xE000000000000000;
  uint64_t v28 = lazy protocol witness table accessor for type String and conformance String();
  uint64_t v29 = StringProtocol.replacingOccurrences<A, B>(of:with:options:range:)(v72, v71, 0, 0, 0, 1, &type metadata for String, &type metadata for String, &type metadata for String, v28, v28, v28);
  uint64_t v31 = v30;
  swift_bridgeObjectRelease((_BYTE)v74);
  swift_bridgeObjectRelease(v21);
  uint64_t v32 = v77;
  uint64_t v33 = v29;
  uint64_t v34 = v80;
  URL.init(fileURLWithPath:)(v33, v31);
  swift_bridgeObjectRelease(v31);
  LOBYTE(v73[0]) = 0;
  uint64_t v35 = lazy protocol witness table accessor for type VNImageOption and conformance VNImageOption(&lazy protocol witness table cache variable for type URL and conformance URL, (uint64_t (*)(uint64_t))&type metadata accessor for URL, (uint64_t)&protocol conformance descriptor for URL);
  uint64_t v36 = v76;
  uint64_t v37 = v83;
  KeyedEncodingContainer.encode<A>(_:forKey:)(v32, v73, v76, v34, v35);
  uint64_t v83 = v37;
  if (v37)
  {
    char v38 = v32;
    NSString v39 = *(void (**)(void *, uint64_t))(v82 + 8);
    v39(v38, v34);
    (*(void (**)(void *, uint64_t))(v78 + 8))(v75, v36);
    return ((uint64_t (*)(void *, uint64_t))v39)(v81, v34);
  }
  uint64_t v82 = *(void *)(v82 + 8);
  ((void (*)(void *, uint64_t))v82)(v32, v34);
  uint64_t v41 = type metadata accessor for MLCheckpoint(0);
  LOBYTE(v73[0]) = *((unsigned char *)v79 + *(int *)(v41 + 20));
  LOBYTE(v72[0]) = 1;
  uint64_t v42 = lazy protocol witness table accessor for type MLPhase and conformance MLPhase();
  uint64_t v43 = v75;
  uint64_t v44 = v83;
  KeyedEncodingContainer.encode<A>(_:forKey:)(v73, v72, v36, &type metadata for MLPhase, v42);
  uint64_t v83 = v44;
  if (v44)
  {
    uint64_t v45 = v43;
    uint64_t v49 = v36;
LABEL_10:
    (*(void (**)(void *, uint64_t))(v78 + 8))(v45, v49);
    return ((uint64_t (*)(void *, uint64_t))v82)(v81, v80);
  }
  uint64_t v77 = (void *)v41;
  uint64_t v46 = (uint64_t)v79;
  uint64_t v47 = *(void *)((char *)v79 + *(int *)(v41 + 24));
  LOBYTE(v73[0]) = 2;
  KeyedEncodingContainer.encode(_:forKey:)(v47, v73, v36);
  uint64_t v83 = 0;
  uint64_t v48 = v43;
  uint64_t v50 = v46;
  uint64_t v51 = v46 + *((int *)v77 + 7);
  LOBYTE(v73[0]) = 3;
  uint64_t v52 = type metadata accessor for Date(0);
  uint64_t v53 = lazy protocol witness table accessor for type VNImageOption and conformance VNImageOption(&lazy protocol witness table cache variable for type Date and conformance Date, (uint64_t (*)(uint64_t))&type metadata accessor for Date, (uint64_t)&protocol conformance descriptor for Date);
  uint64_t v54 = v51;
  uint64_t v55 = v76;
  uint64_t v56 = v83;
  KeyedEncodingContainer.encode<A>(_:forKey:)(v54, v73, v76, v52, v53);
  uint64_t v83 = v56;
  if (v56)
  {
    uint64_t v45 = v48;
    uint64_t v49 = v55;
    goto LABEL_10;
  }
  uint64_t v79 = *(void **)(v50 + *((int *)v77 + 8));
  uint64_t v57 = v48;
  uint64_t v58 = specialized Dictionary.compactMapValues<A>(_:)((uint64_t)v79);
  uint64_t v83 = 0;
  v73[0] = v58;
  LOBYTE(v72[0]) = 5;
  uint64_t v59 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [MLProgress.Metric : Double]);
  uint64_t v60 = lazy protocol witness table accessor for type [MLProgress.Metric : Double] and conformance <> [A : B](&lazy protocol witness table cache variable for type [MLProgress.Metric : Double] and conformance <> [A : B], (void (*)(void))lazy protocol witness table accessor for type MLProgress.Metric and conformance MLProgress.Metric, (uint64_t)&protocol witness table for Double, (uint64_t)&protocol conformance descriptor for <> [A : B]);
  uint64_t v61 = v83;
  KeyedEncodingContainer.encode<A>(_:forKey:)(v73, v72, v55, v59, v60);
  uint64_t v83 = v61;
  if (v61)
  {
    (*(void (**)(void *, uint64_t))(v78 + 8))(v57, v76);
    ((void (*)(void *, uint64_t))v82)(v81, v80);
    return swift_bridgeObjectRelease((_BYTE)v58);
  }
  else
  {
    swift_bridgeObjectRelease((_BYTE)v58);
    uint64_t v62 = v83;
    char v63 = specialized Dictionary.compactMapValues<A>(_:)((uint64_t)v79);
    uint64_t v64 = alloca(24);
    uint64_t v65 = alloca(32);
    v72[0] = v81;
    uint64_t v66 = specialized _NativeDictionary.mapValues<A>(_:)((void (*)(void *))partial apply for closure #3 in MLCheckpoint.encode(to:), (uint64_t)v71, (uint64_t)v63);
    uint64_t v83 = v62;
    swift_bridgeObjectRelease((_BYTE)v63);
    uint64_t v79 = v66;
    v73[0] = v66;
    LOBYTE(v72[0]) = 4;
    uint64_t v67 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [MLProgress.Metric : URL]);
    uint64_t v68 = lazy protocol witness table accessor for type [MLProgress.Metric : URL] and conformance <> [A : B]();
    uint64_t v69 = v76;
    uint64_t v70 = v83;
    KeyedEncodingContainer.encode<A>(_:forKey:)(v73, v72, v76, v67, v68);
    uint64_t v83 = v70;
    (*(void (**)(void *, uint64_t))(v78 + 8))(v57, v69);
    ((void (*)(void *, uint64_t))v82)(v81, v80);
    return swift_release();
  }
}

uint64_t closure #3 in MLCheckpoint.encode(to:)(uint64_t a1)
{
  v14[5] = v1;
  uint64_t v2 = URL.path.getter(a1);
  char v4 = v3;
  v14[2] = v2;
  v14[3] = v3;
  uint64_t v5 = URL.path.getter(a1);
  char v7 = v6;
  v14[0] = 0;
  v13[0] = v5;
  v13[1] = v6;
  v14[1] = 0xE000000000000000;
  uint64_t v8 = lazy protocol witness table accessor for type String and conformance String();
  uint64_t v9 = StringProtocol.replacingOccurrences<A, B>(of:with:options:range:)(v13, v14, 0, 0, 0, 1, &type metadata for String, &type metadata for String, &type metadata for String, v8, v8, v8);
  uint64_t v11 = v10;
  swift_bridgeObjectRelease(v4);
  swift_bridgeObjectRelease(v7);
  URL.init(fileURLWithPath:)(v9, v11);
  return swift_bridgeObjectRelease(v11);
}

uint64_t protocol witness for Decodable.init(from:) in conformance MLCheckpoint(void *a1)
{
  return MLCheckpoint.init(from:)(a1);
}

uint64_t protocol witness for Encodable.encode(to:) in conformance MLCheckpoint(void *a1)
{
  return MLCheckpoint.encode(to:)(a1);
}

uint64_t one-time initialization function for sessionDirectory()
{
  v7[0] = v0;
  int64_t v1 = *(void *)(*(void *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CodingUserInfoKey?)
                             - 8)
                 + 64);
  uint64_t v2 = alloca(v1);
  uint64_t v3 = alloca(v1);
  uint64_t v4 = type metadata accessor for CodingUserInfoKey(0);
  __swift_allocate_value_buffer(v4, static CodingUserInfoKey.sessionDirectory);
  uint64_t v5 = __swift_project_value_buffer(v4, (uint64_t)static CodingUserInfoKey.sessionDirectory);
  CodingUserInfoKey.init(rawValue:)(0xD000000000000010, " specify a session directory" + 0x8000000000000000);
  if (__swift_getEnumTagSinglePayload((uint64_t)v7, 1, v4) == 1) {
    BUG();
  }
  return (*(uint64_t (**)(uint64_t, void *, uint64_t))(*(void *)(v4 - 8) + 32))(v5, v7, v4);
}

uint64_t lazy protocol witness table accessor for type MLCheckpoint.CodingKeys and conformance MLCheckpoint.CodingKeys()
{
  uint64_t result = lazy protocol witness table cache variable for type MLCheckpoint.CodingKeys and conformance MLCheckpoint.CodingKeys;
  if (!lazy protocol witness table cache variable for type MLCheckpoint.CodingKeys and conformance MLCheckpoint.CodingKeys)
  {
    uint64_t result = swift_getWitnessTable(&protocol conformance descriptor for MLCheckpoint.CodingKeys, &type metadata for MLCheckpoint.CodingKeys);
    lazy protocol witness table cache variable for type MLCheckpoint.CodingKeys and conformance MLCheckpoint.CodingKeys = result;
  }
  return result;
}

{
  uint64_t result;

  uint64_t result = lazy protocol witness table cache variable for type MLCheckpoint.CodingKeys and conformance MLCheckpoint.CodingKeys;
  if (!lazy protocol witness table cache variable for type MLCheckpoint.CodingKeys and conformance MLCheckpoint.CodingKeys)
  {
    uint64_t result = swift_getWitnessTable(&protocol conformance descriptor for MLCheckpoint.CodingKeys, &type metadata for MLCheckpoint.CodingKeys);
    lazy protocol witness table cache variable for type MLCheckpoint.CodingKeys and conformance MLCheckpoint.CodingKeys = result;
  }
  return result;
}

{
  uint64_t result;

  uint64_t result = lazy protocol witness table cache variable for type MLCheckpoint.CodingKeys and conformance MLCheckpoint.CodingKeys;
  if (!lazy protocol witness table cache variable for type MLCheckpoint.CodingKeys and conformance MLCheckpoint.CodingKeys)
  {
    uint64_t result = swift_getWitnessTable(&protocol conformance descriptor for MLCheckpoint.CodingKeys, &type metadata for MLCheckpoint.CodingKeys);
    lazy protocol witness table cache variable for type MLCheckpoint.CodingKeys and conformance MLCheckpoint.CodingKeys = result;
  }
  return result;
}

{
  uint64_t result;

  uint64_t result = lazy protocol witness table cache variable for type MLCheckpoint.CodingKeys and conformance MLCheckpoint.CodingKeys;
  if (!lazy protocol witness table cache variable for type MLCheckpoint.CodingKeys and conformance MLCheckpoint.CodingKeys)
  {
    uint64_t result = swift_getWitnessTable(&protocol conformance descriptor for MLCheckpoint.CodingKeys, &type metadata for MLCheckpoint.CodingKeys);
    lazy protocol witness table cache variable for type MLCheckpoint.CodingKeys and conformance MLCheckpoint.CodingKeys = result;
  }
  return result;
}

uint64_t lazy protocol witness table accessor for type MLPhase and conformance MLPhase()
{
  uint64_t result = lazy protocol witness table cache variable for type MLPhase and conformance MLPhase;
  if (!lazy protocol witness table cache variable for type MLPhase and conformance MLPhase)
  {
    uint64_t result = swift_getWitnessTable(&protocol conformance descriptor for MLPhase, &type metadata for MLPhase);
    lazy protocol witness table cache variable for type MLPhase and conformance MLPhase = result;
  }
  return result;
}

{
  uint64_t result;

  uint64_t result = lazy protocol witness table cache variable for type MLPhase and conformance MLPhase;
  if (!lazy protocol witness table cache variable for type MLPhase and conformance MLPhase)
  {
    uint64_t result = swift_getWitnessTable(&protocol conformance descriptor for MLPhase, &type metadata for MLPhase);
    lazy protocol witness table cache variable for type MLPhase and conformance MLPhase = result;
  }
  return result;
}

{
  uint64_t result;

  uint64_t result = lazy protocol witness table cache variable for type MLPhase and conformance MLPhase;
  if (!lazy protocol witness table cache variable for type MLPhase and conformance MLPhase)
  {
    uint64_t result = swift_getWitnessTable(&protocol conformance descriptor for MLPhase, &type metadata for MLPhase);
    lazy protocol witness table cache variable for type MLPhase and conformance MLPhase = result;
  }
  return result;
}

{
  uint64_t result;

  uint64_t result = lazy protocol witness table cache variable for type MLPhase and conformance MLPhase;
  if (!lazy protocol witness table cache variable for type MLPhase and conformance MLPhase)
  {
    uint64_t result = swift_getWitnessTable(&protocol conformance descriptor for MLPhase, &type metadata for MLPhase);
    lazy protocol witness table cache variable for type MLPhase and conformance MLPhase = result;
  }
  return result;
}

uint64_t lazy protocol witness table accessor for type MLProgress.Metric and conformance MLProgress.Metric()
{
  uint64_t result = lazy protocol witness table cache variable for type MLProgress.Metric and conformance MLProgress.Metric;
  if (!lazy protocol witness table cache variable for type MLProgress.Metric and conformance MLProgress.Metric)
  {
    uint64_t result = swift_getWitnessTable(&protocol conformance descriptor for MLProgress.Metric, &type metadata for MLProgress.Metric);
    lazy protocol witness table cache variable for type MLProgress.Metric and conformance MLProgress.Metric = result;
  }
  return result;
}

{
  uint64_t result;

  uint64_t result = lazy protocol witness table cache variable for type MLProgress.Metric and conformance MLProgress.Metric;
  if (!lazy protocol witness table cache variable for type MLProgress.Metric and conformance MLProgress.Metric)
  {
    uint64_t result = swift_getWitnessTable(&protocol conformance descriptor for MLProgress.Metric, &type metadata for MLProgress.Metric);
    lazy protocol witness table cache variable for type MLProgress.Metric and conformance MLProgress.Metric = result;
  }
  return result;
}

{
  uint64_t result;

  uint64_t result = lazy protocol witness table cache variable for type MLProgress.Metric and conformance MLProgress.Metric;
  if (!lazy protocol witness table cache variable for type MLProgress.Metric and conformance MLProgress.Metric)
  {
    uint64_t result = swift_getWitnessTable(&protocol conformance descriptor for MLProgress.Metric, &type metadata for MLProgress.Metric);
    lazy protocol witness table cache variable for type MLProgress.Metric and conformance MLProgress.Metric = result;
  }
  return result;
}

{
  uint64_t result;

  uint64_t result = lazy protocol witness table cache variable for type MLProgress.Metric and conformance MLProgress.Metric;
  if (!lazy protocol witness table cache variable for type MLProgress.Metric and conformance MLProgress.Metric)
  {
    uint64_t result = swift_getWitnessTable(&protocol conformance descriptor for MLProgress.Metric, &type metadata for MLProgress.Metric);
    lazy protocol witness table cache variable for type MLProgress.Metric and conformance MLProgress.Metric = result;
  }
  return result;
}

{
  uint64_t result;

  uint64_t result = lazy protocol witness table cache variable for type MLProgress.Metric and conformance MLProgress.Metric;
  if (!lazy protocol witness table cache variable for type MLProgress.Metric and conformance MLProgress.Metric)
  {
    uint64_t result = swift_getWitnessTable(&protocol conformance descriptor for MLProgress.Metric, &type metadata for MLProgress.Metric);
    lazy protocol witness table cache variable for type MLProgress.Metric and conformance MLProgress.Metric = result;
  }
  return result;
}

uint64_t specialized _NativeDictionary.merge<A>(_:isUnique:uniquingKeysWith:)(uint64_t a1, uint64_t a2, uint64_t a3, int a4, uint64_t *a5)
{
  uint64_t v31 = a5;
  int v32 = a4;
  specialized LazyMapSequence.makeIterator()(a1, a2, a3);
  uint64_t v29 = a1;
  swift_bridgeObjectRetain(a1);
  uint64_t v30 = a3;
  swift_retain();
  specialized LazyMapSequence.Iterator.next()(a3);
  for (; v27; int v32 = v21)
  {
    char v6 = v25;
    outlined init with take of Any(&v26, v24);
    uint64_t v7 = *v31;
    char v33 = v6;
    char v8 = v6;
    unint64_t v10 = specialized __RawDictionaryStorage.find<A>(_:)(v6);
    BOOL v11 = (v9 & 1) == 0;
    BOOL v12 = __OFADD__(*(void *)(v7 + 16), v11);
    uint64_t v13 = *(void *)(v7 + 16) + v11;
    if (v12) {
      BUG();
    }
    char v14 = v9;
    if (*(void *)(v7 + 24) >= v13)
    {
      if ((v32 & 1) == 0)
      {
        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _NativeDictionary<MLProgress.Metric, Any>);
        _NativeDictionary.copy()();
      }
    }
    else
    {
      specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v13, v32);
      unint64_t v10 = specialized __RawDictionaryStorage.find<A>(_:)(v8);
      if ((v14 & 1) != (v15 & 1))
      {
        KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(&type metadata for MLProgress.Metric);
        BUG();
      }
    }
    if (v14)
    {
      outlined init with copy of Any((uint64_t)v24, (uint64_t)v23);
      __swift_destroy_boxed_opaque_existential_1Tm(v24);
      uint64_t v16 = (void *)(*(void *)(*v31 + 56) + 32 * v10);
      __swift_destroy_boxed_opaque_existential_1Tm(v16);
      uint64_t v17 = v23;
      outlined init with take of Any(v23, v16);
    }
    else
    {
      uint64_t v18 = (void *)*v31;
      v18[(v10 >> 6) + 8] |= 1 << v10;
      *(unsigned char *)(v18[6] + v10) = v33;
      uint64_t v17 = v24;
      outlined init with take of Any(v24, (_OWORD *)(v18[7] + 32 * v10));
      uint64_t v19 = v18[2];
      BOOL v12 = __OFADD__(1, v19);
      uint64_t v20 = v19 + 1;
      if (v12) {
        BUG();
      }
      v18[2] = v20;
    }
    uint64_t v21 = specialized LazyMapSequence.Iterator.next()(v17);
    LOBYTE(v21) = 1;
  }
  swift_release();
  swift_bridgeObjectRelease(v29);
  outlined consume of [String : [Int]].Iterator._Variant(v28);
  return swift_release();
}

uint64_t specialized thunk for @escaping @callee_guaranteed (@in_guaranteed A, @in_guaranteed B) -> (@out A, @out B)(_DWORD *a1)
{
  return specialized closure #1 in Dictionary.merge(_:uniquingKeysWith:)(v1, (uint64_t)(v1 + 8), *a1, (uint64_t)(a1 + 2));
}

uint64_t outlined init with copy of MLCheckpoint(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = type metadata accessor for MLCheckpoint(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v2 - 8) + 16))(a2, a1, v2);
  return a2;
}

uint64_t outlined destroy of MLCheckpoint(uint64_t a1)
{
  uint64_t v1 = type metadata accessor for MLCheckpoint(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v1 - 8) + 8))(a1, v1);
  return a1;
}

uint64_t partial apply for closure #2 in MLCheckpoint.init(from:)()
{
  return closure #2 in MLCheckpoint.init(from:)();
}

void *specialized _NativeDictionary.mapValues<A>(_:)(void (*a1)(void *), uint64_t a2, uint64_t a3)
{
  uint64_t v45 = v3;
  v34[1] = a2;
  uint64_t v35 = a1;
  int64_t v39 = 0;
  uint64_t v5 = type metadata accessor for URL(0);
  uint64_t v40 = *(void *)(v5 - 8);
  int64_t v6 = *(void *)(v40 + 64);
  uint64_t v7 = alloca(v6);
  char v8 = alloca(v6);
  char v9 = alloca(v6);
  unint64_t v10 = alloca(v6);
  char v38 = v34;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<MLProgress.Metric, URL>);
  uint64_t v11 = static _DictionaryStorage.copy(original:)(a3);
  uint64_t v12 = 1 << *(unsigned char *)(a3 + 32);
  uint64_t v13 = ~(-1 << v12);
  if (v12 >= 64) {
    uint64_t v13 = -1;
  }
  uint64_t v43 = a3;
  unint64_t v14 = *(void *)(a3 + 64) & v13;
  uint64_t v15 = v40;
  int64_t v42 = (unint64_t)(v12 + 63) >> 6;
  uint64_t v36 = v34;
  uint64_t v44 = (void *)v11;
  uint64_t v41 = v5;
  while (1)
  {
    if (v14)
    {
      _BitScanForward64(&v16, v14);
      uint64_t v37 = (v14 - 1) & v14;
      unint64_t v17 = v16 | (v39 << 6);
      uint64_t v18 = v38;
      goto LABEL_17;
    }
    int64_t v19 = v39 + 1;
    uint64_t v18 = v38;
    if (__OFADD__(1, v39)) {
      BUG();
    }
    if (v19 >= v42) {
      return v44;
    }
    unint64_t v20 = *(void *)(v43 + 8 * v19 + 64);
    if (!v20) {
      break;
    }
LABEL_16:
    _BitScanForward64(&v22, v20);
    uint64_t v37 = v20 & (v20 - 1);
    int64_t v39 = v19;
    unint64_t v17 = v22 + (v19 << 6);
LABEL_17:
    char v46 = *(unsigned char *)(*(void *)(v43 + 48) + v17);
    uint64_t v23 = v15;
    unint64_t v24 = v17 * *(void *)(v15 + 72);
    (*(void (**)(void *, unint64_t))(v23 + 16))(v18, v24 + *(void *)(v43 + 56));
    uint64_t v25 = v45;
    v35(v18);
    uint64_t v45 = v25;
    if (v25)
    {
      int v32 = v44;
      swift_release();
      (*(void (**)(void *, uint64_t))(v40 + 8))(v18, v41);
      return v32;
    }
    uint64_t v26 = v40;
    (*(void (**)(void *, uint64_t))(v40 + 8))(v18, v41);
    uint64_t v27 = v44;
    v44[(v17 >> 6) + 8] |= 1 << v17;
    *(unsigned char *)(v27[6] + v17) = v46;
    unint64_t v28 = v27[7] + v24;
    uint64_t v15 = v26;
    (*(void (**)(unint64_t, void *, uint64_t))(v26 + 32))(v28, v36, v41);
    uint64_t v29 = v27[2];
    BOOL v30 = __OFADD__(1, v29);
    uint64_t v31 = v29 + 1;
    if (v30) {
      BUG();
    }
    v27[2] = v31;
    unint64_t v14 = v37;
  }
  int64_t v21 = v39 + 2;
  if (v39 + 2 >= v42) {
    return v44;
  }
  unint64_t v20 = *(void *)(v43 + 8 * v19 + 72);
  if (v20) {
    goto LABEL_15;
  }
  int64_t v21 = v39 + 3;
  if (v39 + 3 >= v42) {
    return v44;
  }
  unint64_t v20 = *(void *)(v43 + 8 * v19 + 80);
  if (v20) {
    goto LABEL_15;
  }
  int64_t v21 = v39 + 4;
  if (v39 + 4 >= v42) {
    return v44;
  }
  unint64_t v20 = *(void *)(v43 + 8 * v19 + 88);
  if (v20)
  {
LABEL_15:
    int64_t v19 = v21;
    goto LABEL_16;
  }
  int64_t v19 = v39 + 4;
  while (1)
  {
    BOOL v30 = __OFADD__(1, v19++);
    if (v30) {
      BUG();
    }
    if (v19 >= v42) {
      return v44;
    }
    unint64_t v20 = *(void *)(v43 + 8 * v19 + 64);
    if (v20) {
      goto LABEL_16;
    }
  }
}

uint64_t partial apply for closure #3 in MLCheckpoint.encode(to:)(uint64_t a1)
{
  return closure #3 in MLCheckpoint.encode(to:)(a1);
}

void *initializeBufferWithCopyOfBuffer for MLCheckpoint(void *a1, void *a2, int *a3)
{
  uint64_t v3 = a1;
  int v4 = *(_DWORD *)(*((void *)a3 - 1) + 80);
  if ((v4 & 0x20000) != 0)
  {
    uint64_t v11 = *a2;
    void *v3 = *a2;
    uint64_t v3 = (void *)(v11 + ((v4 + 16) & ~v4));
    swift_retain(v11);
  }
  else
  {
    uint64_t v6 = type metadata accessor for URL(0);
    (*(void (**)(void *, void *, uint64_t))(*(void *)(v6 - 8) + 16))(a1, a2, v6);
    *((unsigned char *)a1 + a3[5]) = *((unsigned char *)a2 + a3[5]);
    *(void *)((char *)a1 + a3[6]) = *(void *)((char *)a2 + a3[6]);
    uint64_t v7 = a3[7];
    uint64_t v8 = type metadata accessor for Date(0);
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v8 - 8) + 16))((char *)a1 + v7, (char *)a2 + v7, v8);
    uint64_t v9 = a3[8];
    uint64_t v10 = *(void *)((char *)a2 + v9);
    *(void *)((char *)v3 + v9) = v10;
    swift_bridgeObjectRetain(v10);
  }
  return v3;
}

uint64_t destroy for MLCheckpoint(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = type metadata accessor for URL(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  uint64_t v3 = a1 + *(int *)(a2 + 28);
  uint64_t v4 = type metadata accessor for Date(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v4 - 8) + 8))(v3, v4);
  return swift_bridgeObjectRelease(*(void *)(a1 + *(int *)(a2 + 32)));
}

uint64_t initializeWithCopy for MLCheckpoint(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v5 = type metadata accessor for URL(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16))(a1, a2, v5);
  *(unsigned char *)(a1 + a3[5]) = *(unsigned char *)(a2 + a3[5]);
  *(void *)(a1 + a3[6]) = *(void *)(a2 + a3[6]);
  uint64_t v6 = a3[7];
  uint64_t v7 = type metadata accessor for Date(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 16))(a1 + v6, a2 + v6, v7);
  uint64_t v8 = a3[8];
  uint64_t v9 = *(void *)(a2 + v8);
  *(void *)(a1 + v8) = v9;
  swift_bridgeObjectRetain(v9);
  return a1;
}

uint64_t assignWithCopy for MLCheckpoint(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v5 = type metadata accessor for URL(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 24))(a1, a2, v5);
  *(unsigned char *)(a1 + a3[5]) = *(unsigned char *)(a2 + a3[5]);
  *(void *)(a1 + a3[6]) = *(void *)(a2 + a3[6]);
  uint64_t v6 = a3[7];
  uint64_t v7 = type metadata accessor for Date(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 24))(a1 + v6, a2 + v6, v7);
  uint64_t v8 = a3[8];
  uint64_t v9 = *(void *)(a2 + v8);
  uint64_t v10 = *(void *)(a1 + v8);
  *(void *)(a1 + v8) = v9;
  swift_bridgeObjectRetain(v9);
  swift_bridgeObjectRelease(v10);
  return a1;
}

uint64_t initializeWithTake for MLCheckpoint(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v4 = type metadata accessor for URL(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a1, a2, v4);
  *(unsigned char *)(a1 + a3[5]) = *(unsigned char *)(a2 + a3[5]);
  *(void *)(a1 + a3[6]) = *(void *)(a2 + a3[6]);
  uint64_t v5 = a3[7];
  uint64_t v6 = type metadata accessor for Date(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 32))(a1 + v5, a2 + v5, v6);
  *(void *)(a1 + a3[8]) = *(void *)(a2 + a3[8]);
  return a1;
}

uint64_t assignWithTake for MLCheckpoint(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v5 = type metadata accessor for URL(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 40))(a1, a2, v5);
  *(unsigned char *)(a1 + a3[5]) = *(unsigned char *)(a2 + a3[5]);
  *(void *)(a1 + a3[6]) = *(void *)(a2 + a3[6]);
  uint64_t v6 = a3[7];
  uint64_t v7 = type metadata accessor for Date(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 40))(a1 + v6, a2 + v6, v7);
  uint64_t v8 = a3[8];
  uint64_t v9 = *(void *)(a1 + v8);
  *(void *)(a1 + v8) = *(void *)(a2 + v8);
  swift_bridgeObjectRelease(v9);
  return a1;
}

uint64_t getEnumTagSinglePayload for MLCheckpoint(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_88E4A);
}

uint64_t sub_88E4A(uint64_t a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4 = a1;
  uint64_t v5 = type metadata accessor for URL(0);
  if (*(_DWORD *)(*(void *)(v5 - 8) + 84) == a2) {
    return __swift_getEnumTagSinglePayload(v4, a2, v5);
  }
  unsigned int v6 = 0;
  uint64_t v5 = type metadata accessor for Date(0);
  if (*(_DWORD *)(*(void *)(v5 - 8) + 84) == a2)
  {
    uint64_t v4 = *(int *)(a3 + 28) + a1;
    return __swift_getEnumTagSinglePayload(v4, a2, v5);
  }
  if ((*(void *)(a1 + *(int *)(a3 + 32)) & 0xFFFFFFFF00000001) == 0) {
    return (*(void *)(a1 + *(int *)(a3 + 32)) >> 1) + 1;
  }
  return v6;
}

uint64_t storeEnumTagSinglePayload for MLCheckpoint(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_88EDA);
}

uint64_t sub_88EDA(uint64_t a1, unsigned int a2, int a3, uint64_t a4)
{
  uint64_t v6 = a1;
  uint64_t v7 = type metadata accessor for URL(0);
  if (*(_DWORD *)(*(void *)(v7 - 8) + 84) == a3) {
    return __swift_storeEnumTagSinglePayload(v6, a2, a2, v7);
  }
  uint64_t v7 = type metadata accessor for Date(0);
  if (*(_DWORD *)(*(void *)(v7 - 8) + 84) == a3)
  {
    uint64_t v6 = *(int *)(a4 + 28) + a1;
    return __swift_storeEnumTagSinglePayload(v6, a2, a2, v7);
  }
  uint64_t result = *(int *)(a4 + 32);
  *(void *)(a1 + result) = 2 * (a2 - 1);
  return result;
}

uint64_t type metadata completion function for MLCheckpoint(uint64_t a1)
{
  uint64_t result = type metadata accessor for URL(319);
  if (v2 <= 0x3F)
  {
    v4[0] = *(void *)(result - 8) + 64;
    v4[1] = &unk_3488E0;
    v4[2] = (char *)&value witness table for Builtin.Int64 + 64;
    uint64_t result = type metadata accessor for Date(319);
    if (v3 <= 0x3F)
    {
      v4[3] = *(void *)(result - 8) + 64;
      v4[4] = (char *)&value witness table for Builtin.BridgeObject + 64;
      swift_initStructMetadata(a1, 256, 5, v4, a1 + 16);
      return 0;
    }
  }
  return result;
}

uint64_t getEnumTagSinglePayload for MLCheckpoint.CodingKeys(unsigned __int8 *a1, unsigned int a2)
{
  if (a2)
  {
    if (a2 < 0xFB) {
      goto LABEL_13;
    }
    unsigned int v2 = a2 + 5;
    int v3 = 1;
    if (v2 >= 0xFF00) {
      int v3 = 2 * (v2 >= 0xFFFF00) + 2;
    }
    if (v3 == 4) {
      int v4 = *(_DWORD *)(a1 + 1);
    }
    else {
      int v4 = v3 == 2 ? *(unsigned __int16 *)(a1 + 1) : a1[1];
    }
    if (v4)
    {
      int v5 = *a1 + (v4 << 8) - 6;
    }
    else
    {
LABEL_13:
      unsigned int v6 = *a1;
      int v7 = v6 - 6;
      BOOL v8 = v6 < 6;
      int v5 = -1;
      if (!v8) {
        int v5 = v7;
      }
    }
  }
  else
  {
    int v5 = -1;
  }
  return (v5 + 1);
}

uint64_t storeEnumTagSinglePayload for MLCheckpoint.CodingKeys(unsigned char *a1, unsigned int a2, unsigned int a3)
{
  LODWORD(result) = 0;
  if (a3 >= 0xFB)
  {
    unsigned int v4 = a3 + 5;
    LODWORD(result) = 1;
    if (v4 >= 0xFF00) {
      LODWORD(result) = 2 * (v4 >= 0xFFFF00) + 2;
    }
  }
  if (a2 > 0xFA)
  {
    unsigned int v5 = a2 - 251;
    int v6 = (v5 >> 8) + 1;
    *a1 = v5;
    uint64_t result = result;
    switch((int)result)
    {
      case 0:
        return result;
      case 1:
        a1[1] = v6;
        break;
      case 2:
        *(_WORD *)(a1 + 1) = v6;
        break;
      case 3:
LABEL_16:
        BUG();
      case 4:
        *(_DWORD *)(a1 + 1) = v6;
        break;
    }
  }
  else
  {
    uint64_t result = result;
    switch((int)result)
    {
      case 0:
        goto LABEL_11;
      case 1:
        a1[1] = 0;
        goto LABEL_11;
      case 2:
        *(_WORD *)(a1 + 1) = 0;
        goto LABEL_11;
      case 3:
        goto LABEL_16;
      case 4:
        *(_DWORD *)(a1 + 1) = 0;
LABEL_11:
        if (a2) {
          *a1 = a2 + 5;
        }
        break;
      case 5:
        JUMPOUT(0x8910CLL);
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for MLCheckpoint.CodingKeys()
{
  return &type metadata for MLCheckpoint.CodingKeys;
}

uint64_t base witness table accessor for Equatable in MLCheckpoint.CodingKeys()
{
  return lazy protocol witness table accessor for type MLCheckpoint.CodingKeys and conformance MLCheckpoint.CodingKeys();
}

uint64_t base witness table accessor for CustomDebugStringConvertible in MLCheckpoint.CodingKeys()
{
  return lazy protocol witness table accessor for type MLCheckpoint.CodingKeys and conformance MLCheckpoint.CodingKeys();
}

uint64_t base witness table accessor for CustomStringConvertible in MLCheckpoint.CodingKeys()
{
  return lazy protocol witness table accessor for type MLCheckpoint.CodingKeys and conformance MLCheckpoint.CodingKeys();
}

uint64_t MLDecisionTreeRegressor.ModelParameters.validationData.getter(__m128 a1)
{
  uint64_t v2 = type metadata accessor for MLDecisionTreeRegressor.ModelParameters.ValidationData(0);
  int64_t v3 = *(void *)(*(void *)(v2 - 8) + 64);
  unsigned int v4 = alloca(v3);
  unsigned int v5 = alloca(v3);
  outlined init with copy of Any?(v1, (uint64_t)&v9);
  if (!v10) {
    BUG();
  }
  outlined init with take of Any(&v9, v8);
  swift_dynamicCast(&v7, v8, (char *)&type metadata for Any + 8, v2, 7);
  MLDecisionTreeRegressor.ModelParameters.ValidationData.table.getter(a1);
  return outlined destroy of MLDecisionTreeRegressor.ModelParameters.ValidationData((uint64_t)&v7);
}

uint64_t key path getter for MLDecisionTreeRegressor.ModelParameters.validationData : MLDecisionTreeRegressor.ModelParameters(__m128 a1)
{
  uint64_t v2 = v1;
  MLDecisionTreeRegressor.ModelParameters.validationData.getter(a1);
  uint64_t result = v4;
  *(void *)uint64_t v2 = v4;
  *(unsigned char *)(v2 + 8) = v5;
  return result;
}

uint64_t key path setter for MLDecisionTreeRegressor.ModelParameters.validationData : MLDecisionTreeRegressor.ModelParameters(uint64_t a1)
{
  int v1 = *(_DWORD *)(a1 + 8);
  uint64_t v3 = *(void *)a1;
  char v4 = v1;
  outlined copy of MLDataTable?(v3, v1);
  return MLDecisionTreeRegressor.ModelParameters.validationData.setter((uint64_t)&v3);
}

uint64_t MLDecisionTreeRegressor.ModelParameters.validationData.setter(uint64_t a1)
{
  uint64_t v20 = v1;
  unsigned int v2 = 0;
  uint64_t v3 = type metadata accessor for MLDecisionTreeRegressor.ModelParameters.ValidationData(0);
  int64_t v4 = *(void *)(*(void *)(v3 - 8) + 64);
  char v5 = alloca(v4);
  int v6 = alloca(v4);
  uint64_t v19 = *(void *)a1;
  char v7 = *(unsigned char *)(a1 + 8);
  uint64_t v15 = v3;
  BOOL v8 = __swift_allocate_boxed_opaque_existential_1(&v13);
  uint64_t v9 = (uint64_t)v8;
  if (v7 == -1)
  {
    long long v13 = 0;
    __int16 v14 = 256;
    uint64_t v10 = v20;
  }
  else
  {
    uint64_t v18 = v8;
    uint64_t v16 = v19;
    char v17 = v7 & 1;
    if (MLDataTable.size.getter())
    {
      *(void *)&long long v13 = v19;
      BYTE8(v13) = v7 & 1;
      int v12 = 1;
    }
    else
    {
      outlined consume of MLDataTable?(v19, v7);
      int v12 = 3;
    }
    unsigned int v2 = v12;
    uint64_t v10 = v20;
    uint64_t v9 = (uint64_t)v18;
  }
  swift_storeEnumTagMultiPayload(&v13, v3, v2);
  outlined init with take of MLDecisionTreeRegressor.ModelParameters.ValidationData((uint64_t)&v13, v9);
  return outlined assign with take of Any?((uint64_t)&v13, v10);
}

uint64_t MLDecisionTreeRegressor.ModelParameters.validation.getter()
{
  uint64_t v2 = v0;
  outlined init with copy of Any?(v1, (uint64_t)&v6);
  if (!v7) {
    BUG();
  }
  outlined init with take of Any(&v6, v5);
  uint64_t v3 = type metadata accessor for MLDecisionTreeRegressor.ModelParameters.ValidationData(0);
  return swift_dynamicCast(v2, v5, (char *)&type metadata for Any + 8, v3, 7);
}

_OWORD *outlined init with take of Any(long long *a1, _OWORD *a2)
{
  uint64_t result = a2;
  long long v3 = *a1;
  a2[1] = a1[1];
  *a2 = v3;
  return result;
}

uint64_t outlined destroy of MLDecisionTreeRegressor.ModelParameters.ValidationData(uint64_t a1)
{
  uint64_t v1 = type metadata accessor for MLDecisionTreeRegressor.ModelParameters.ValidationData(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v1 - 8) + 8))(a1, v1);
  return a1;
}

uint64_t outlined init with take of MLDecisionTreeRegressor.ModelParameters.ValidationData(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = type metadata accessor for MLDecisionTreeRegressor.ModelParameters.ValidationData(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v2 - 8) + 32))(a2, a1, v2);
  return a2;
}

uint64_t (*MLDecisionTreeRegressor.ModelParameters.validationData.modify(uint64_t a1, __m128 a2))(uint64_t a1, char a2)
{
  *(void *)(a1 + 16) = v2;
  MLDecisionTreeRegressor.ModelParameters.validationData.getter(a2);
  return MLDecisionTreeRegressor.ModelParameters.validationData.modify;
}

uint64_t MLDecisionTreeRegressor.ModelParameters.validationData.modify(uint64_t a1, char a2)
{
  uint64_t v2 = *(void *)a1;
  char v3 = *(unsigned char *)(a1 + 8);
  uint64_t v6 = *(void *)a1;
  char v7 = v3;
  if ((a2 & 1) == 0) {
    return MLDecisionTreeRegressor.ModelParameters.validationData.setter((uint64_t)&v6);
  }
  char v4 = v3;
  outlined copy of MLDataTable?(v2, v3);
  MLDecisionTreeRegressor.ModelParameters.validationData.setter((uint64_t)&v6);
  return outlined consume of MLDataTable?(v2, v4);
}

uint64_t key path setter for MLDecisionTreeRegressor.ModelParameters.validation : MLDecisionTreeRegressor.ModelParameters(uint64_t a1)
{
  v6[0] = v1;
  int64_t v2 = *(void *)(*(void *)(type metadata accessor for MLDecisionTreeRegressor.ModelParameters.ValidationData(0) - 8)
                 + 64);
  char v3 = alloca(v2);
  char v4 = alloca(v2);
  outlined init with copy of MLDecisionTreeRegressor.ModelParameters.ValidationData(a1, (uint64_t)v6);
  return MLDecisionTreeRegressor.ModelParameters.validation.setter((uint64_t)v6);
}

uint64_t MLDecisionTreeRegressor.ModelParameters.validation.setter(uint64_t a1)
{
  v4[3] = type metadata accessor for MLDecisionTreeRegressor.ModelParameters.ValidationData(0);
  boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1(v4);
  outlined init with take of MLDecisionTreeRegressor.ModelParameters.ValidationData(a1, (uint64_t)boxed_opaque_existential_1);
  return outlined assign with take of Any?((uint64_t)v4, v1);
}

void (*MLDecisionTreeRegressor.ModelParameters.validation.modify(void *a1))(uint64_t a1, char a2)
{
  int64_t v2 = malloc(0xA0uLL);
  *a1 = v2;
  *((void *)v2 + 16) = v1;
  uint64_t v3 = type metadata accessor for MLDecisionTreeRegressor.ModelParameters.ValidationData(0);
  *((void *)v2 + 17) = v3;
  size_t v4 = *(void *)(*(void *)(v3 - 8) + 64);
  *((void *)v2 + 18) = malloc(v4);
  char v5 = malloc(v4);
  *((void *)v2 + 19) = v5;
  outlined init with copy of Any?(v1, (uint64_t)(v2 + 2));
  if (!*((void *)v2 + 7)) {
    BUG();
  }
  outlined init with take of Any(v2 + 2, v2);
  swift_dynamicCast(v5, v2, (char *)&type metadata for Any + 8, v3, 7);
  return MLDecisionTreeRegressor.ModelParameters.validation.modify;
}

void MLDecisionTreeRegressor.ModelParameters.validation.modify(uint64_t a1, char a2)
{
  int64_t v2 = *(void **)a1;
  uint64_t v3 = *(void **)(*(void *)a1 + 152);
  size_t v4 = *(void **)(*(void *)a1 + 144);
  uint64_t v8 = *(void *)(*(void *)a1 + 128);
  uint64_t v5 = *(void *)(*(void *)a1 + 136);
  if (a2)
  {
    outlined init with copy of MLDecisionTreeRegressor.ModelParameters.ValidationData((uint64_t)v3, (uint64_t)v4);
    v2[11] = v5;
    boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1(v2 + 8);
    outlined init with take of MLDecisionTreeRegressor.ModelParameters.ValidationData((uint64_t)v4, (uint64_t)boxed_opaque_existential_1);
    outlined assign with take of Any?((uint64_t)(v2 + 8), v8);
    outlined destroy of MLDecisionTreeRegressor.ModelParameters.ValidationData((uint64_t)v3);
  }
  else
  {
    v2[15] = v5;
    char v7 = __swift_allocate_boxed_opaque_existential_1(v2 + 12);
    outlined init with take of MLDecisionTreeRegressor.ModelParameters.ValidationData((uint64_t)v3, (uint64_t)v7);
    outlined assign with take of Any?((uint64_t)(v2 + 12), v8);
  }
  free(v3);
  free(v4);
  free(v2);
}

uint64_t MLDecisionTreeRegressor.ModelParameters.maxDepth.getter()
{
  return *(void *)(v0 + 32);
}

void MLDecisionTreeRegressor.ModelParameters.maxDepth.setter(uint64_t a1)
{
  *(void *)(v1 + 32) = a1;
}

void (*MLDecisionTreeRegressor.ModelParameters.maxDepth.modify())()
{
  return MLBoostedTreeRegressor.ModelParameters.maxDepth.modify;
}

double MLDecisionTreeRegressor.ModelParameters.minLossReduction.getter()
{
  return *(double *)(v0 + 40);
}

void MLDecisionTreeRegressor.ModelParameters.minLossReduction.setter(double a1)
{
  *(double *)(v1 + 40) = a1;
}

void (*MLDecisionTreeRegressor.ModelParameters.minLossReduction.modify())()
{
  return MLBoostedTreeRegressor.ModelParameters.maxDepth.modify;
}

double MLDecisionTreeRegressor.ModelParameters.minChildWeight.getter()
{
  return *(double *)(v0 + 48);
}

void MLDecisionTreeRegressor.ModelParameters.minChildWeight.setter(double a1)
{
  *(double *)(v1 + 48) = a1;
}

void (*MLDecisionTreeRegressor.ModelParameters.minChildWeight.modify())()
{
  return MLBoostedTreeRegressor.ModelParameters.maxDepth.modify;
}

uint64_t MLDecisionTreeRegressor.ModelParameters.randomSeed.getter()
{
  return *(void *)(v0 + 56);
}

void MLDecisionTreeRegressor.ModelParameters.randomSeed.setter(uint64_t a1)
{
  *(void *)(v1 + 56) = a1;
}

void (*MLDecisionTreeRegressor.ModelParameters.randomSeed.modify())()
{
  return MLBoostedTreeRegressor.ModelParameters.maxDepth.modify;
}

uint64_t MLDecisionTreeRegressor.ModelParameters.init(validation:maxDepth:minLossReduction:minChildWeight:randomSeed:)(uint64_t a1, uint64_t a2, uint64_t a3, double a4, double a5)
{
  uint64_t v14 = a3;
  double v15 = a5;
  double v16 = a4;
  uint64_t v6 = v5;
  uint64_t v7 = type metadata accessor for MLDecisionTreeRegressor.ModelParameters.ValidationData(0);
  int64_t v8 = *(void *)(*(void *)(v7 - 8) + 64);
  uint64_t v9 = alloca(v8);
  uint64_t v10 = alloca(v8);
  *(_OWORD *)(v6 + 16) = 0;
  *(_OWORD *)uint64_t v6 = 0;
  *(void *)(v6 + 32) = a2;
  *(double *)(v6 + 40) = v16;
  *(double *)(v6 + 48) = v15;
  *(void *)(v6 + 56) = v14;
  outlined init with copy of MLDecisionTreeRegressor.ModelParameters.ValidationData(a1, (uint64_t)v13);
  v13[3] = v7;
  boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1(v13);
  outlined init with take of MLDecisionTreeRegressor.ModelParameters.ValidationData((uint64_t)v13, (uint64_t)boxed_opaque_existential_1);
  outlined assign with take of Any?((uint64_t)v13, v6);
  return outlined destroy of MLDecisionTreeRegressor.ModelParameters.ValidationData(a1);
}

uint64_t MLDecisionTreeRegressor.ModelParameters.init(validationData:maxDepth:minLossReduction:minChildWeight:randomSeed:)(uint64_t *a1, uint64_t a2, uint64_t a3, double a4, double a5)
{
  uint64_t v6 = *a1;
  char v7 = *((unsigned char *)a1 + 8);
  *(_OWORD *)(v5 + 16) = 0;
  *(_OWORD *)uint64_t v5 = 0;
  *(void *)(v5 + 32) = a2;
  *(double *)(v5 + 40) = a4;
  *(double *)(v5 + 48) = a5;
  *(void *)(v5 + 56) = a3;
  uint64_t v9 = v6;
  char v10 = v7;
  return MLDecisionTreeRegressor.ModelParameters.validationData.setter((uint64_t)&v9);
}

uint64_t MLDecisionTreeRegressor.ModelParameters.description.getter()
{
  v0._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter(&type metadata for Int, &protocol witness table for Int);
  char object = v0._object;
  String.append(_:)(v0);
  swift_bridgeObjectRelease(object);
  v2._char object = (void *)0xE100000000000000;
  v2._uint64_t countAndFlagsBits = 10;
  String.append(_:)(v2);
  v9._uint64_t countAndFlagsBits = 0;
  v9._char object = (void *)0xE000000000000000;
  _StringGuts.grow(_:)(23);
  v2._uint64_t countAndFlagsBits = 0xD000000000000014;
  v2._char object = "Max Iterations: " + 0x8000000000000000;
  String.append(_:)(v2);
  Double.write<A>(to:)(&v9, &type metadata for DefaultStringInterpolation, &protocol witness table for DefaultStringInterpolation);
  v2._uint64_t countAndFlagsBits = 10;
  v2._char object = (void *)0xE100000000000000;
  String.append(_:)(v2);
  uint64_t v3 = v9._object;
  String.append(_:)(v9);
  swift_bridgeObjectRelease(v3);
  v9._uint64_t countAndFlagsBits = 0;
  v9._char object = (void *)0xE000000000000000;
  _StringGuts.grow(_:)(21);
  v2._char object = "Min Loss Reduction: " + 0x8000000000000000;
  v2._uint64_t countAndFlagsBits = 0xD000000000000012;
  String.append(_:)(v2);
  Double.write<A>(to:)(&v9, &type metadata for DefaultStringInterpolation, &protocol witness table for DefaultStringInterpolation);
  v2._uint64_t countAndFlagsBits = 10;
  v2._char object = (void *)0xE100000000000000;
  String.append(_:)(v2);
  size_t v4 = v9._object;
  String.append(_:)(v9);
  swift_bridgeObjectRelease(v4);
  v9._uint64_t countAndFlagsBits = 0;
  v9._char object = (void *)0xE000000000000000;
  _StringGuts.grow(_:)(16);
  swift_bridgeObjectRelease(v9._object);
  strcpy((char *)&v9, "Random Seed: ");
  HIWORD(v9._object) = -4864;
  v5._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter(&type metadata for Int, &protocol witness table for Int);
  uint64_t v6 = v5._object;
  String.append(_:)(v5);
  swift_bridgeObjectRelease(v6);
  v2._uint64_t countAndFlagsBits = 10;
  v2._char object = (void *)0xE100000000000000;
  String.append(_:)(v2);
  char v7 = v9._object;
  String.append(_:)(v9);
  swift_bridgeObjectRelease(v7);
  return 0x747065442078614DLL;
}

uint64_t MLDecisionTreeRegressor.ModelParameters.debugDescription.getter()
{
  return MLDecisionTreeRegressor.ModelParameters.description.getter();
}

uint64_t MLDecisionTreeRegressor.ModelParameters.playgroundDescription.getter()
{
  uint64_t v1 = v0;
  uint64_t result = MLDecisionTreeRegressor.ModelParameters.description.getter();
  v1[3] = (uint64_t)&type metadata for String;
  *uint64_t v1 = result;
  v1[1] = v3;
  return result;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance MLDecisionTreeRegressor.ModelParameters()
{
  return MLDecisionTreeRegressor.ModelParameters.description.getter();
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance MLDecisionTreeRegressor.ModelParameters()
{
  return MLDecisionTreeRegressor.ModelParameters.debugDescription.getter();
}

uint64_t protocol witness for CustomPlaygroundDisplayConvertible.playgroundDescription.getter in conformance MLDecisionTreeRegressor.ModelParameters()
{
  return MLDecisionTreeRegressor.ModelParameters.playgroundDescription.getter();
}

uint64_t sub_89BEF(__m128 a1)
{
  return key path getter for MLDecisionTreeRegressor.ModelParameters.validationData : MLDecisionTreeRegressor.ModelParameters(a1);
}

uint64_t sub_89BF9(uint64_t a1)
{
  return key path setter for MLDecisionTreeRegressor.ModelParameters.validationData : MLDecisionTreeRegressor.ModelParameters(a1);
}

uint64_t sub_89C03(uint64_t a1)
{
  return MLDecisionTreeRegressor.ModelParameters.validation.getter(a1);
}

uint64_t sub_89C1A(uint64_t a1)
{
  return key path setter for MLDecisionTreeRegressor.ModelParameters.validation : MLDecisionTreeRegressor.ModelParameters(a1);
}

uint64_t initializeWithCopy for MLDecisionTreeRegressor.ModelParameters(uint64_t a1, long long *a2)
{
  uint64_t v2 = *((void *)a2 + 3);
  if (v2)
  {
    *(void *)(a1 + 24) = v2;
    (**(void (***)(uint64_t, long long *))(v2 - 8))(a1, a2);
  }
  else
  {
    long long v3 = *a2;
    *(_OWORD *)(a1 + 16) = a2[1];
    *(_OWORD *)a1 = v3;
  }
  *(_OWORD *)(a1 + 32) = a2[2];
  *(_OWORD *)(a1 + 48) = a2[3];
  return a1;
}

uint64_t assignWithCopy for MLDecisionTreeRegressor.ModelParameters(uint64_t a1, long long *a2)
{
  uint64_t v2 = *((void *)a2 + 3);
  if (!*(void *)(a1 + 24))
  {
    if (v2)
    {
      *(void *)(a1 + 24) = v2;
      (**(void (***)(uint64_t, long long *))(v2 - 8))(a1, a2);
      goto LABEL_8;
    }
LABEL_7:
    long long v3 = *a2;
    *(_OWORD *)(a1 + 16) = a2[1];
    *(_OWORD *)a1 = v3;
    goto LABEL_8;
  }
  if (!v2)
  {
    __swift_destroy_boxed_opaque_existential_1Tm((void *)a1);
    goto LABEL_7;
  }
  __swift_assign_boxed_opaque_existential_0((uint64_t *)a1, (uint64_t *)a2);
LABEL_8:
  *(void *)(a1 + 32) = *((void *)a2 + 4);
  *(void *)(a1 + 40) = *((void *)a2 + 5);
  *(void *)(a1 + 48) = *((void *)a2 + 6);
  *(void *)(a1 + 56) = *((void *)a2 + 7);
  return a1;
}

uint64_t assignWithTake for MLDecisionTreeRegressor.ModelParameters(uint64_t a1, long long *a2)
{
  if (*(void *)(a1 + 24)) {
    __swift_destroy_boxed_opaque_existential_1Tm((void *)a1);
  }
  long long v2 = *a2;
  *(_OWORD *)(a1 + 16) = a2[1];
  *(_OWORD *)a1 = v2;
  *(void *)(a1 + 32) = *((void *)a2 + 4);
  *(_OWORD *)(a1 + 40) = *(long long *)((char *)a2 + 40);
  *(void *)(a1 + 56) = *((void *)a2 + 7);
  return a1;
}

uint64_t getEnumTagSinglePayload for MLDecisionTreeRegressor.ModelParameters(uint64_t a1, unsigned int a2)
{
  if (a2)
  {
    if (a2 >= 0x7FFFFFFF && *(unsigned char *)(a1 + 64))
    {
      int v2 = *(_DWORD *)a1 + 2147483646;
    }
    else
    {
      unint64_t v3 = *(void *)(a1 + 24);
      unint64_t v4 = v3 & 0xFFFFFFFF00000001;
      int v5 = (v3 >> 1) - 1;
      int v6 = -1;
      if (v5 >= 0) {
        int v6 = v5;
      }
      int v2 = v4 != 0 ? -1 : v6;
    }
  }
  else
  {
    int v2 = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for MLDecisionTreeRegressor.ModelParameters(uint64_t a1, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFE)
  {
    *(void *)(a1 + 56) = 0;
    *(_OWORD *)(a1 + 40) = 0;
    *(_OWORD *)(a1 + 24) = 0;
    *(_OWORD *)(a1 + 8) = 0;
    *(void *)a1 = a2 - 0x7FFFFFFF;
    if (a3 >= 0x7FFFFFFF) {
      *(unsigned char *)(a1 + 64) = 1;
    }
  }
  else
  {
    if (a3 >= 0x7FFFFFFF) {
      *(unsigned char *)(a1 + 64) = 0;
    }
    if (a2)
    {
      uint64_t result = 2 * a2;
      *(void *)(a1 + 24) = result;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for MLDecisionTreeRegressor.ModelParameters()
{
  return &type metadata for MLDecisionTreeRegressor.ModelParameters;
}

uint64_t MLModelMetadata.init(author:shortDescription:license:version:additional:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, long long a7, uint64_t a8)
{
  *(void *)uint64_t result = a1;
  *(void *)(result + 8) = a2;
  *(void *)(result + 16) = a3;
  *(void *)(result + 24) = a4;
  *(void *)(result + 32) = a5;
  *(void *)(result + 40) = a6;
  *(_OWORD *)(result + 48) = a7;
  *(void *)(result + 64) = a8;
  return result;
}

uint64_t MLModelMetadata.author.getter()
{
  uint64_t v1 = *v0;
  swift_bridgeObjectRetain(v0[1]);
  return v1;
}

uint64_t MLModelMetadata.author.setter(uint64_t a1, uint64_t a2)
{
  uint64_t result = swift_bridgeObjectRelease(v2[1]);
  void *v2 = a1;
  v2[1] = a2;
  return result;
}

void (*MLModelMetadata.author.modify())()
{
  return MLBoostedTreeRegressor.ModelParameters.maxDepth.modify;
}

uint64_t MLModelMetadata.shortDescription.getter()
{
  uint64_t v1 = *(void *)(v0 + 16);
  swift_bridgeObjectRetain(*(void *)(v0 + 24));
  return v1;
}

uint64_t MLModelMetadata.shortDescription.setter(uint64_t a1, uint64_t a2)
{
  uint64_t result = swift_bridgeObjectRelease(*(void *)(v2 + 24));
  *(void *)(v2 + 16) = a1;
  *(void *)(v2 + 24) = a2;
  return result;
}

void (*MLModelMetadata.shortDescription.modify())()
{
  return MLBoostedTreeRegressor.ModelParameters.maxDepth.modify;
}

uint64_t MLModelMetadata.license.getter()
{
  uint64_t v1 = *(void *)(v0 + 32);
  swift_bridgeObjectRetain(*(void *)(v0 + 40));
  return v1;
}

uint64_t MLModelMetadata.license.setter(uint64_t a1, uint64_t a2)
{
  uint64_t result = swift_bridgeObjectRelease(*(void *)(v2 + 40));
  *(void *)(v2 + 32) = a1;
  *(void *)(v2 + 40) = a2;
  return result;
}

void (*MLModelMetadata.license.modify())()
{
  return MLBoostedTreeRegressor.ModelParameters.maxDepth.modify;
}

uint64_t MLModelMetadata.version.getter()
{
  uint64_t v1 = *(void *)(v0 + 48);
  swift_bridgeObjectRetain(*(void *)(v0 + 56));
  return v1;
}

uint64_t MLModelMetadata.version.setter(uint64_t a1, uint64_t a2)
{
  uint64_t result = swift_bridgeObjectRelease(*(void *)(v2 + 56));
  *(void *)(v2 + 48) = a1;
  *(void *)(v2 + 56) = a2;
  return result;
}

void (*MLModelMetadata.version.modify())()
{
  return MLBoostedTreeRegressor.ModelParameters.maxDepth.modify;
}

uint64_t MLModelMetadata.additional.getter()
{
  return swift_bridgeObjectRetain(*(void *)(v0 + 64));
}

uint64_t MLModelMetadata.additional.setter(uint64_t a1)
{
  uint64_t result = swift_bridgeObjectRelease(*(void *)(v1 + 64));
  *(void *)(v1 + 64) = a1;
  return result;
}

void (*MLModelMetadata.additional.modify())()
{
  return MLBoostedTreeRegressor.ModelParameters.maxDepth.modify;
}

uint64_t destroy for MLModelMetadata(void *a1)
{
  return swift_bridgeObjectRelease(a1[8]);
}

void *initializeWithCopy for MLModelMetadata(void *a1, void *a2)
{
  *a1 = *a2;
  uint64_t v3 = a2[1];
  a1[1] = v3;
  a1[2] = a2[2];
  uint64_t v4 = a2[3];
  a1[3] = v4;
  a1[4] = a2[4];
  uint64_t v5 = a2[5];
  a1[5] = v5;
  a1[6] = a2[6];
  uint64_t v6 = a2[7];
  a1[7] = v6;
  uint64_t v7 = a2[8];
  a1[8] = v7;
  swift_bridgeObjectRetain(v3);
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRetain(v5);
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRetain(v7);
  return a1;
}

void *assignWithCopy for MLModelMetadata(void *a1, void *a2)
{
  *a1 = *a2;
  uint64_t v3 = a2[1];
  uint64_t v4 = a1[1];
  a1[1] = v3;
  swift_bridgeObjectRetain(v3);
  swift_bridgeObjectRelease(v4);
  a1[2] = a2[2];
  uint64_t v5 = a2[3];
  uint64_t v6 = a1[3];
  a1[3] = v5;
  swift_bridgeObjectRetain(v5);
  swift_bridgeObjectRelease(v6);
  a1[4] = a2[4];
  uint64_t v7 = a2[5];
  uint64_t v8 = a1[5];
  a1[5] = v7;
  swift_bridgeObjectRetain(v7);
  swift_bridgeObjectRelease(v8);
  a1[6] = a2[6];
  uint64_t v9 = a2[7];
  uint64_t v10 = a1[7];
  a1[7] = v9;
  swift_bridgeObjectRetain(v9);
  swift_bridgeObjectRelease(v10);
  uint64_t v11 = a1[8];
  uint64_t v12 = a2[8];
  a1[8] = v12;
  swift_bridgeObjectRetain(v12);
  swift_bridgeObjectRelease(v11);
  return a1;
}

void *__swift_memcpy72_8(void *a1, const void *a2)
{
  uint64_t result = a1;
  qmemcpy(a1, a2, 0x48uLL);
  return result;
}

void *assignWithTake for MLModelMetadata(void *a1, uint64_t a2)
{
  *a1 = *(void *)a2;
  uint64_t v3 = a1[1];
  a1[1] = *(void *)(a2 + 8);
  swift_bridgeObjectRelease(v3);
  a1[2] = *(void *)(a2 + 16);
  uint64_t v4 = a1[3];
  a1[3] = *(void *)(a2 + 24);
  swift_bridgeObjectRelease(v4);
  a1[4] = *(void *)(a2 + 32);
  uint64_t v5 = a1[5];
  a1[5] = *(void *)(a2 + 40);
  swift_bridgeObjectRelease(v5);
  a1[6] = *(void *)(a2 + 48);
  swift_bridgeObjectRelease(a1[7]);
  uint64_t v6 = a1[8];
  *(_OWORD *)(a1 + 7) = *(_OWORD *)(a2 + 56);
  swift_bridgeObjectRelease(v6);
  return a1;
}

uint64_t getEnumTagSinglePayload for MLModelMetadata(uint64_t a1, int a2)
{
  if (a2)
  {
    if (a2 < 0 && *(unsigned char *)(a1 + 72)) {
      int v2 = *(_DWORD *)a1 + 0x7FFFFFFF;
    }
    else {
      int v2 = (*(void *)(a1 + 8) & 0xFFFFFFFF00000001) != 0 ? -1 : *(void *)(a1 + 8) >> 1;
    }
  }
  else
  {
    int v2 = -1;
  }
  return (v2 + 1);
}

void storeEnumTagSinglePayload for MLModelMetadata(uint64_t a1, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(a1 + 40) = 0;
    *(_OWORD *)(a1 + 24) = 0;
    *(_OWORD *)(a1 + 8) = 0;
    *(_OWORD *)(a1 + 56) = 0;
    *(void *)a1 = a2 + 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(a1 + 72) = 1;
    }
  }
  else
  {
    if (a3 < 0) {
      *(unsigned char *)(a1 + 72) = 0;
    }
    if (a2) {
      *(void *)(a1 + 8) = 2 * (a2 - 1);
    }
  }
}

ValueMetadata *type metadata accessor for MLModelMetadata()
{
  return &type metadata for MLModelMetadata;
}

uint64_t *initializeBufferWithCopyOfBuffer for TreeRegressor(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v3 = a1;
  int v4 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  if ((v4 & 0x20000) != 0)
  {
    uint64_t v10 = *a2;
    uint64_t *v3 = *a2;
    uint64_t v3 = (uint64_t *)(v10 + ((v4 + 16) & ~v4));
    swift_retain(v10);
  }
  else
  {
    *a1 = *a2;
    uint64_t v5 = a2[1];
    a1[1] = v5;
    uint64_t v6 = a2[2];
    a1[2] = v6;
    uint64_t v13 = a2[3];
    a1[3] = v13;
    a1[4] = a2[4];
    uint64_t v14 = a2[5];
    a1[5] = v14;
    uint64_t v7 = *(int *)(a3 + 28);
    uint64_t v12 = (char *)a1 + v7;
    uint64_t v8 = (char *)a2 + v7;
    uint64_t v9 = type metadata accessor for BaseTreeRegressor(0);
    double v15 = *(void (**)(char *, char *, uint64_t))(*(void *)(v9 - 8) + 16);
    swift_bridgeObjectRetain(v5);
    swift_bridgeObjectRetain(v6);
    swift_bridgeObjectRetain(v13);
    swift_bridgeObjectRetain(v14);
    v15(v12, v8, v9);
  }
  return v3;
}

uint64_t destroy for TreeRegressor(void *a1, uint64_t a2)
{
  swift_bridgeObjectRelease(a1[1]);
  swift_bridgeObjectRelease(a1[2]);
  swift_bridgeObjectRelease(a1[3]);
  swift_bridgeObjectRelease(a1[5]);
  int v2 = (char *)a1 + *(int *)(a2 + 28);
  uint64_t v3 = type metadata accessor for BaseTreeRegressor(0);
  return (*(uint64_t (**)(char *, uint64_t))(*(void *)(v3 - 8) + 8))(v2, v3);
}

void *initializeWithCopy for TreeRegressor(void *a1, void *a2, uint64_t a3)
{
  *a1 = *a2;
  uint64_t v3 = a2[1];
  a1[1] = v3;
  uint64_t v4 = a2[2];
  a1[2] = v4;
  uint64_t v10 = a2[3];
  a1[3] = v10;
  a1[4] = a2[4];
  uint64_t v11 = a2[5];
  a1[5] = v11;
  uint64_t v5 = *(int *)(a3 + 28);
  uint64_t v9 = (char *)a1 + v5;
  uint64_t v6 = (char *)a2 + v5;
  uint64_t v7 = type metadata accessor for BaseTreeRegressor(0);
  uint64_t v12 = *(void (**)(char *, char *, uint64_t))(*(void *)(v7 - 8) + 16);
  swift_bridgeObjectRetain(v3);
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRetain(v10);
  swift_bridgeObjectRetain(v11);
  v12(v9, v6, v7);
  return a1;
}

void *assignWithCopy for TreeRegressor(void *a1, void *a2, uint64_t a3)
{
  *a1 = *a2;
  uint64_t v5 = a2[1];
  uint64_t v6 = a1[1];
  a1[1] = v5;
  swift_bridgeObjectRetain(v5);
  swift_bridgeObjectRelease(v6);
  uint64_t v7 = a2[2];
  uint64_t v8 = a1[2];
  a1[2] = v7;
  swift_bridgeObjectRetain(v7);
  swift_bridgeObjectRelease(v8);
  uint64_t v9 = a2[3];
  uint64_t v10 = a1[3];
  a1[3] = v9;
  swift_bridgeObjectRetain(v9);
  swift_bridgeObjectRelease(v10);
  a1[4] = a2[4];
  uint64_t v11 = a2[5];
  uint64_t v12 = a1[5];
  a1[5] = v11;
  swift_bridgeObjectRetain(v11);
  swift_bridgeObjectRelease(v12);
  uint64_t v13 = *(int *)(a3 + 28);
  uint64_t v14 = (char *)a1 + v13;
  double v15 = (char *)a2 + v13;
  uint64_t v16 = type metadata accessor for BaseTreeRegressor(0);
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v16 - 8) + 24))(v14, v15, v16);
  return a1;
}

uint64_t initializeWithTake for TreeRegressor(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  uint64_t v3 = *(int *)(a3 + 28);
  uint64_t v4 = a1 + v3;
  uint64_t v5 = v3 + a2;
  uint64_t v6 = type metadata accessor for BaseTreeRegressor(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 32))(v4, v5, v6);
  return a1;
}

void *assignWithTake for TreeRegressor(void *a1, void *a2, uint64_t a3)
{
  *a1 = *a2;
  uint64_t v5 = a1[1];
  a1[1] = a2[1];
  swift_bridgeObjectRelease(v5);
  uint64_t v6 = a1[2];
  a1[2] = a2[2];
  swift_bridgeObjectRelease(v6);
  uint64_t v7 = a1[3];
  a1[3] = a2[3];
  swift_bridgeObjectRelease(v7);
  a1[4] = a2[4];
  uint64_t v8 = a1[5];
  a1[5] = a2[5];
  swift_bridgeObjectRelease(v8);
  uint64_t v9 = *(int *)(a3 + 28);
  uint64_t v10 = (char *)a1 + v9;
  uint64_t v11 = (char *)a2 + v9;
  uint64_t v12 = type metadata accessor for BaseTreeRegressor(0);
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v12 - 8) + 40))(v10, v11, v12);
  return a1;
}

uint64_t getEnumTagSinglePayload for TreeRegressor(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_8A61C);
}

uint64_t sub_8A61C(uint64_t a1, unsigned int a2, uint64_t a3)
{
  if (a2 == 0x7FFFFFFF)
  {
    uint64_t result = 0;
    if ((*(void *)(a1 + 8) & 0xFFFFFFFF00000001) == 0) {
      return (*(void *)(a1 + 8) >> 1) + 1;
    }
  }
  else
  {
    uint64_t v5 = type metadata accessor for BaseTreeRegressor(0);
    return __swift_getEnumTagSinglePayload(*(int *)(a3 + 28) + a1, a2, v5);
  }
  return result;
}

uint64_t storeEnumTagSinglePayload for TreeRegressor(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_8A6A4);
}

uint64_t sub_8A6A4(uint64_t a1, unsigned int a2, int a3, uint64_t a4)
{
  if (a3 == 0x7FFFFFFF)
  {
    *(void *)(a1 + 8) = 2 * (a2 - 1);
  }
  else
  {
    uint64_t v5 = type metadata accessor for BaseTreeRegressor(0);
    return __swift_storeEnumTagSinglePayload(*(int *)(a4 + 28) + a1, a2, a2, v5);
  }
  return result;
}

uint64_t type metadata accessor for TreeRegressor(uint64_t a1)
{
  uint64_t result = type metadata singleton initialization cache for TreeRegressor;
  if (!type metadata singleton initialization cache for TreeRegressor) {
    return swift_getSingletonMetadata(a1, &nominal type descriptor for TreeRegressor);
  }
  return result;
}

uint64_t type metadata completion function for TreeRegressor(uint64_t a1)
{
  v3[0] = &unk_348B00;
  v3[1] = (char *)&value witness table for Builtin.BridgeObject + 64;
  v3[2] = &unk_348B18;
  uint64_t result = type metadata accessor for BaseTreeRegressor(319);
  if (v2 <= 0x3F)
  {
    v3[3] = *(void *)(result - 8) + 64;
    swift_initStructMetadata(a1, 256, 4, v3, a1 + 16);
    return 0;
  }
  return result;
}

uint64_t associated type witness table accessor for SupervisedTabularEstimator.Transformer : TabularTransformer in TreeRegressor()
{
  return lazy protocol witness table accessor for type TreeRegressorModel and conformance TreeRegressorModel(&lazy protocol witness table cache variable for type TreeRegressorModel and conformance TreeRegressorModel, type metadata accessor for TreeRegressorModel, (uint64_t)&protocol conformance descriptor for TreeRegressorModel);
}

void *_sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSay8CreateML16ColumnDescriptorVG_SSs5NeverOTg503_s8d131ML17FeatureVectorizerV11TransformerV10vectorized_13includingBias0A12MLComponents11DenseMatrixVyxG11TabularData0M5FrameV_SbtKFSSAA16fG54Vcfu_33_44daf68368b8b9c6f03dca699c8750fcAPSSTf3nnnpk_nTf1cn_n(uint64_t a1)
{
  int64_t v1 = *(void *)(a1 + 16);
  if (v1)
  {
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v1, 0);
    unint64_t v2 = (uint64_t *)(a1 + 40);
    do
    {
      int64_t v6 = v1;
      uint64_t v7 = *(v2 - 1);
      unint64_t v3 = _swiftEmptyArrayStorage[2];
      unint64_t v9 = _swiftEmptyArrayStorage[3];
      int64_t v10 = v3 + 1;
      uint64_t v8 = *v2;
      swift_bridgeObjectRetain(*v2);
      if (v9 >> 1 <= v3) {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v9 >= 2, v10, 1);
      }
      _swiftEmptyArrayStorage[2] = v10;
      uint64_t v4 = 2 * v3;
      _swiftEmptyArrayStorage[v4 + 4] = v7;
      _swiftEmptyArrayStorage[v4 + 5] = v8;
      v2 += 4;
      int64_t v1 = v6 - 1;
    }
    while (v6 != 1);
  }
  return _swiftEmptyArrayStorage;
}

char specialized Set.contains(_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(void *)(a3 + 16))
  {
    Hasher.init(_seed:)(*(void *)(a3 + 40));
    String.hash(into:)(v18, a1);
    Swift::Int v5 = Hasher._finalize()();
    uint64_t v6 = ~(-1 << *(unsigned char *)(a3 + 32));
    unint64_t v7 = v6 & v5;
    uint64_t v8 = *(void *)(a3 + 8 * ((v6 & (unint64_t)v5) >> 6) + 56);
    if (_bittest64(&v8, v7))
    {
      uint64_t v19 = a2;
      uint64_t v9 = *(void *)(a3 + 48);
      uint64_t v10 = *(void *)(v9 + 16 * v7);
      uint64_t v11 = *(void *)(v9 + 16 * v7 + 8);
      if (v10 == a1 && v11 == v19 || (_stringCompareWithSmolCheck(_:_:expecting:)(v10, v11, a1, v19, 0) & 1) != 0) {
        return 1;
      }
      unint64_t v13 = v6 & (v7 + 1);
      uint64_t v14 = *(void *)(a3 + 8 * (v13 >> 6) + 56);
      if (_bittest64(&v14, v13))
      {
        while (1)
        {
          uint64_t v15 = *(void *)(v9 + 16 * v13);
          uint64_t v16 = *(void *)(v9 + 16 * v13 + 8);
          if (v15 == a1 && v16 == v19) {
            break;
          }
          if (_stringCompareWithSmolCheck(_:_:expecting:)(v15, v16, a1, v19, 0)) {
            break;
          }
          unint64_t v13 = v6 & (v13 + 1);
          uint64_t v17 = *(void *)(a3 + 8 * (v13 >> 6) + 56);
          char result = 0;
          if (!_bittest64(&v17, v13)) {
            return result;
          }
        }
        return 1;
      }
    }
  }
  return 0;
}

uint64_t specialized Set.contains(_:)(uint64_t a1, uint64_t a2)
{
  unsigned int v2 = 0;
  uint64_t v3 = type metadata accessor for URL(0);
  uint64_t v19 = *(void *)(v3 - 8);
  int64_t v4 = *(void *)(v19 + 64);
  Swift::Int v5 = alloca(v4);
  uint64_t v6 = alloca(v4);
  if (*(void *)(a2 + 16))
  {
    uint64_t v7 = *(void *)(a2 + 40);
    uint64_t v8 = lazy protocol witness table accessor for type TreeRegressorModel and conformance TreeRegressorModel(&lazy protocol witness table cache variable for type URL and conformance URL, (uint64_t (*)(uint64_t))&type metadata accessor for URL, (uint64_t)&protocol conformance descriptor for URL);
    uint64_t v15 = a1;
    uint64_t v9 = dispatch thunk of Hashable._rawHashValue(seed:)(v7, v3, v8);
    uint64_t v16 = ~(-1 << *(unsigned char *)(a2 + 32));
    unint64_t v10 = v16 & v9;
    uint64_t v11 = *(void *)(a2 + 8 * ((v16 & (unint64_t)v9) >> 6) + 56);
    if (_bittest64(&v11, v10))
    {
      uint64_t v17 = *(void (**)(uint64_t *, unint64_t, uint64_t))(v19 + 16);
      uint64_t v18 = *(void *)(v19 + 72);
      do
      {
        v17(&v15, *(void *)(a2 + 48) + v10 * v18, v3);
        uint64_t v12 = lazy protocol witness table accessor for type TreeRegressorModel and conformance TreeRegressorModel(&lazy protocol witness table cache variable for type URL and conformance URL, (uint64_t (*)(uint64_t))&type metadata accessor for URL, (uint64_t)&protocol conformance descriptor for URL);
        unsigned int v2 = dispatch thunk of static Equatable.== infix(_:_:)(&v15, v15, v3, v12);
        (*(void (**)(uint64_t *, uint64_t))(v19 + 8))(&v15, v3);
        if (v2) {
          break;
        }
        unint64_t v10 = v16 & (v10 + 1);
        uint64_t v13 = *(void *)(a2 + 8 * (v10 >> 6) + 56);
      }
      while (_bittest64(&v13, v10));
    }
    else
    {
      return 0;
    }
  }
  return v2;
}

uint64_t TreeRegressor.init(annotationColumnName:featureColumnNames:configuration:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v23 = a2;
  uint64_t v24 = a1;
  uint64_t v7 = v4;
  uint64_t v22 = type metadata accessor for BoostedTreeConfiguration(0);
  uint64_t v21 = *(void *)(v22 - 8);
  int64_t v8 = *(void *)(v21 + 64);
  uint64_t v9 = alloca(v8);
  unint64_t v10 = alloca(v8);
  uint64_t v26 = &v18;
  uint64_t v19 = type metadata accessor for BaseTreeRegressor(0);
  uint64_t v20 = *(void *)(v19 - 8);
  int64_t v11 = *(void *)(v20 + 64);
  uint64_t v12 = alloca(v11);
  uint64_t v13 = alloca(v11);
  *(void *)uint64_t v7 = v24;
  *((void *)v7 + 1) = v23;
  uint64_t v25 = a3;
  *((void *)v7 + 2) = a3;
  *((void *)v7 + 3) = a3;
  *((void *)v7 + 4) = 0xD000000000000013;
  *((void *)v7 + 5) = "raining samples." + 0x8000000000000000;
  uint64_t v14 = v22;
  uint64_t v15 = v21;
  (*(void (**)(uint64_t *, uint64_t, uint64_t))(v21 + 16))(&v18, a4, v22);
  swift_bridgeObjectRetain(v25);
  BaseTreeRegressor.init(configuration:)(v26);
  (*(void (**)(uint64_t, uint64_t))(v15 + 8))(a4, v14);
  uint64_t v16 = type metadata accessor for TreeRegressor(0);
  return (*(uint64_t (**)(char *, uint64_t *, uint64_t))(v20 + 32))(&v7[*(int *)(v16 + 28)], &v18, v19);
}

uint64_t TreeRegressor.fitted(to:validateOn:eventHandler:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v90 = v5;
  uint64_t v71 = a4;
  uint64_t v72 = a3;
  uint64_t v66 = a2;
  uint64_t v89 = a1;
  uint64_t v67 = v4;
  int64_t v7 = *(void *)(*(void *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for DataFrame?)
                             - 8)
                 + 64);
  int64_t v8 = alloca(v7);
  uint64_t v9 = alloca(v7);
  uint64_t v65 = v63;
  uint64_t v77 = type metadata accessor for DataFrame(0);
  uint64_t v80 = *(void *)(v77 - 8);
  int64_t v10 = *(void *)(v80 + 64);
  int64_t v11 = alloca(v10);
  uint64_t v12 = alloca(v10);
  uint64_t v86 = v63;
  uint64_t v73 = type metadata accessor for BaseTreeRegressorModel(0);
  uint64_t v74 = *(void *)(v73 - 8);
  int64_t v13 = *(void *)(v74 + 64);
  uint64_t v14 = alloca(v13);
  uint64_t v15 = alloca(v13);
  uint64_t v70 = v63;
  uint64_t v16 = alloca(v13);
  uint64_t v17 = alloca(v13);
  uint64_t v75 = v63;
  uint64_t v18 = alloca(v13);
  uint64_t v19 = alloca(v13);
  uint64_t v81 = v63;
  uint64_t v87 = type metadata accessor for AnyColumn(0);
  uint64_t v78 = *(void *)(v87 - 8);
  int64_t v20 = *(void *)(v78 + 64);
  uint64_t v21 = alloca(v20);
  uint64_t v22 = alloca(v20);
  uint64_t v68 = v63;
  uint64_t v79 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for DenseMatrix<Float>);
  uint64_t v23 = *(void *)(v79 - 8);
  int64_t v24 = *(void *)(v23 + 64);
  uint64_t v25 = alloca(v24);
  uint64_t v26 = alloca(v24);
  uint64_t v69 = v63;
  uint64_t v27 = alloca(v24);
  unint64_t v28 = alloca(v24);
  uint64_t v88 = v63;
  uint64_t v29 = v6[3];
  uint64_t v76 = v6[4];
  uint64_t v85 = v6;
  uint64_t v30 = v6[5];
  uint64_t v64 = v89;
  swift_bridgeObjectRetain(v29);
  uint64_t v31 = v90;
  ML16ColumnDescriptorVsAE_pTg5 = _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSaySSG_8CreateML16ColumnDescriptorVsAE_pTg5((void (*)(void *, uint64_t *))closure #1 in FeatureVectorizer.fitted(to:)partial apply, (uint64_t)v63, v29);
  uint64_t result = swift_bridgeObjectRelease(v29);
  if (!v31)
  {
    uint64_t v82 = v23;
    swift_bridgeObjectRetain(v30);
    specialized FeatureVectorizer.Transformer.vectorized(_:includingBias:)(v89, 0, (uint64_t)ML16ColumnDescriptorVsAE_pTg5, v76, v30, (void (*)(uint64_t, void))specialized DataFrame.asMatrix<A>(of:descriptors:includingBias:));
    uint64_t v90 = 0;
    uint64_t v84 = ML16ColumnDescriptorVsAE_pTg5;
    uint64_t v83 = v30;
    uint64_t v34 = v68;
    DataFrame.subscript.getter(*v85, v85[1]);
    uint64_t v35 = AnyColumn.convertedToFloats()();
    uint64_t v78 = *(void *)(v78 + 8);
    ((void (*)(unsigned char *, uint64_t))v78)(v34, v87);
    uint64_t v89 = v35;
    if (!v35) {
      BUG();
    }
    uint64_t v36 = (uint64_t)v65;
    outlined init with copy of Either<LogisticRegressionClassifier<Float, String>, FullyConnectedNetworkClassifier<Float, String>>(v66, (uint64_t)v65, &demangling cache variable for type metadata for DataFrame?);
    uint64_t v37 = v77;
    int EnumTagSinglePayload = __swift_getEnumTagSinglePayload(v36, 1, v77);
    int64_t v39 = v86;
    if (EnumTagSinglePayload == 1)
    {
      outlined destroy of Either<LogisticRegressionClassifier<Float, String>, FullyConnectedNetworkClassifier<Float, String>>(v36, &demangling cache variable for type metadata for DataFrame?);
      type metadata accessor for TreeRegressor(0);
      uint64_t v40 = v88;
      uint64_t v41 = v90;
      BaseTreeRegressor.fitted(features:annotations:eventHandler:)(v88, v89, v72, v71);
      (*(void (**)(unsigned char *, uint64_t))(v82 + 8))(v40, v79);
      uint64_t v90 = v41;
      if (v41)
      {
        swift_bridgeObjectRelease(v83);
        swift_bridgeObjectRelease((_BYTE)v84);
        return swift_release();
      }
      swift_release();
      uint64_t v49 = *(void (**)(unsigned char *, unsigned char *, uint64_t))(v74 + 32);
      uint64_t v50 = v73;
      v49(v81, v70, v73);
      uint64_t v51 = v85;
    }
    else
    {
      uint64_t v42 = v36;
      uint64_t v43 = v37;
      uint64_t v44 = v80;
      (*(void (**)(unsigned char *, uint64_t, uint64_t))(v80 + 32))(v86, v42, v37);
      uint64_t v45 = (uint64_t)v39;
      char v46 = (char)v84;
      char v47 = v83;
      uint64_t v48 = v90;
      specialized FeatureVectorizer.Transformer.vectorized(_:includingBias:)(v45, 0, (uint64_t)v84, v76, v83, (void (*)(uint64_t, void))specialized DataFrame.asMatrix<A>(of:descriptors:includingBias:));
      uint64_t v90 = v48;
      if (v48)
      {
        swift_release();
        swift_bridgeObjectRelease(v47);
        swift_bridgeObjectRelease(v46);
        (*(void (**)(unsigned char *, uint64_t))(v44 + 8))(v86, v43);
        return (*(uint64_t (**)(unsigned char *, uint64_t))(v82 + 8))(v88, v79);
      }
      uint64_t v52 = v68;
      DataFrame.subscript.getter(*v85, v85[1]);
      uint64_t v53 = AnyColumn.convertedToFloats()();
      ((void (*)(unsigned char *, uint64_t))v78)(v52, v87);
      if (!v53) {
        BUG();
      }
      type metadata accessor for TreeRegressor(0);
      uint64_t v54 = v69;
      uint64_t v55 = v90;
      uint64_t v87 = v53;
      BaseTreeRegressor.fitted(trainingFeatures:trainingAnnotations:validationFeatures:validationAnnotations:eventHandler:)(v88, v89, v69, v53, v72, v71);
      uint64_t v90 = v55;
      uint64_t v56 = v79;
      uint64_t v57 = v82;
      if (v55)
      {
        swift_bridgeObjectRelease(v83);
        swift_bridgeObjectRelease((_BYTE)v84);
        swift_release();
        swift_release();
        uint64_t v58 = *(void (**)(unsigned char *, uint64_t))(v57 + 8);
        v58(v54, v56);
        (*(void (**)(unsigned char *, uint64_t))(v80 + 8))(v86, v77);
        return ((uint64_t (*)(unsigned char *, uint64_t))v58)(v88, v56);
      }
      swift_release();
      swift_release();
      uint64_t v59 = *(void (**)(unsigned char *, uint64_t))(v57 + 8);
      v59(v54, v56);
      (*(void (**)(unsigned char *, uint64_t))(v80 + 8))(v86, v77);
      v59(v88, v56);
      uint64_t v51 = v85;
      uint64_t v49 = *(void (**)(unsigned char *, unsigned char *, uint64_t))(v74 + 32);
      uint64_t v50 = v73;
      v49(v81, v75, v73);
    }
    uint64_t v89 = *v51;
    uint64_t v60 = v51[1];
    uint64_t v61 = type metadata accessor for TreeRegressorModel(0);
    uint64_t v62 = v67;
    v49((unsigned char *)v67 + *(int *)(v61 + 24), v81, v50);
    void *v62 = v89;
    v62[1] = v60;
    v62[2] = v84;
    v62[3] = v76;
    v62[4] = v83;
    return swift_bridgeObjectRetain(v60);
  }
  return result;
}

uint64_t TreeRegressor.annotationColumnID.getter()
{
  uint64_t v1 = *v0;
  uint64_t v2 = v0[1];
  swift_bridgeObjectRetain(v2);
  return ColumnID.init(_:_:)(v1, v2, &type metadata for Float);
}

uint64_t TreeRegressor.annotationColumnID.setter(uint64_t a1)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ColumnID<Float>);
  uint64_t v3 = ColumnID.name.getter(v2);
  uint64_t v5 = v4;
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  uint64_t result = swift_bridgeObjectRelease(v1[1]);
  *uint64_t v1 = v3;
  v1[1] = v5;
  return result;
}

uint64_t specialized FeatureVectorizer.Transformer.vectorized(_:includingBias:)(uint64_t a1, unsigned int a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return specialized FeatureVectorizer.Transformer.vectorized(_:includingBias:)(a1, a2, a3, a4, a5, (void (*)(uint64_t, void))specialized DataFrame.asMatrix<A>(of:descriptors:includingBias:));
}

{
  return specialized FeatureVectorizer.Transformer.vectorized(_:includingBias:)(a1, a2, a3, a4, a5, (void (*)(uint64_t, void))specialized DataFrame.asMatrix<A>(of:descriptors:includingBias:));
}

uint64_t specialized FeatureVectorizer.Transformer.vectorized(_:includingBias:)(uint64_t a1, unsigned int a2, uint64_t a3, uint64_t a4, uint64_t a5, void (*a6)(uint64_t, void))
{
  uint64_t v17 = a6;
  uint64_t v20 = a3;
  unsigned int v23 = a2;
  uint64_t v19 = a1;
  uint64_t v18 = v6;
  uint64_t v21 = type metadata accessor for DataFrame(0);
  uint64_t v22 = *(void *)(v21 - 8);
  int64_t v8 = *(void *)(v22 + 64);
  uint64_t v9 = alloca(v8);
  int64_t v10 = alloca(v8);
  swift_bridgeObjectRetain(a3);
  ML16ColumnDescriptorVG_SSs5NeverOTg503_s8d131ML17FeatureVectorizerV11TransformerV10vectorized_13includingBias0A12MLComponents11DenseMatrixVyxG11TabularData0M5FrameV_SbtKFSSAA16fG54Vcfu_33_44daf68368b8b9c6f03dca699c8750fcAPSSTf3nnnpk_nTf1cn_n = _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSay8CreateML16ColumnDescriptorVG_SSs5NeverOTg503_s8d131ML17FeatureVectorizerV11TransformerV10vectorized_13includingBias0A12MLComponents11DenseMatrixVyxG11TabularData0M5FrameV_SbtKFSSAA16fG54Vcfu_33_44daf68368b8b9c6f03dca699c8750fcAPSSTf3nnnpk_nTf1cn_n(a3);
  swift_bridgeObjectRelease(a3);
  uint64_t v16 = ML16ColumnDescriptorVG_SSs5NeverOTg503_s8d131ML17FeatureVectorizerV11TransformerV10vectorized_13includingBias0A12MLComponents11DenseMatrixVyxG11TabularData0M5FrameV_SbtKFSSAA16fG54Vcfu_33_44daf68368b8b9c6f03dca699c8750fcAPSSTf3nnnpk_nTf1cn_n;
  uint64_t v12 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [String]);
  uint64_t v13 = lazy protocol witness table accessor for type FullyConnectedNetworkClassifier<Float, String> and conformance FullyConnectedNetworkClassifier<A, B>(&lazy protocol witness table cache variable for type [String] and conformance [A], &demangling cache variable for type metadata for [String], (uint64_t)&protocol conformance descriptor for [A]);
  DataFrame.selecting<A>(columnNames:)(&v16, v12, v13);
  swift_bridgeObjectRelease((_BYTE)ML16ColumnDescriptorVG_SSs5NeverOTg503_s8d131ML17FeatureVectorizerV11TransformerV10vectorized_13includingBias0A12MLComponents11DenseMatrixVyxG11TabularData0M5FrameV_SbtKFSSAA16fG54Vcfu_33_44daf68368b8b9c6f03dca699c8750fcAPSSTf3nnnpk_nTf1cn_n);
  v17(v20, v23);
  return (*(uint64_t (**)(unsigned char *, uint64_t))(v22 + 8))(v15, v21);
}

uint64_t TreeRegressor.encode(_:to:)(uint64_t a1, uint64_t a2)
{
  uint64_t v15 = v2;
  uint64_t v3 = *(void *)(a1 + 32);
  uint64_t v14 = a1;
  long long v12 = *(_OWORD *)(a1 + 16);
  uint64_t v13 = v3;
  uint64_t v4 = *(void *)(a2 + 24);
  uint64_t v16 = *(void *)(a2 + 32);
  __swift_mutable_project_boxed_opaque_existential_1(a2, v4);
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for FeatureVectorizer<Float>.Transformer?);
  uint64_t v6 = lazy protocol witness table accessor for type FeatureVectorizer<Float>.Transformer? and conformance <A> A?();
  uint64_t result = ((uint64_t (*)(long long *, uint64_t, uint64_t, uint64_t, uint64_t))dispatch thunk of EstimatorEncoder.encode<A>(_:))(&v12, v5, v6, v4, v16);
  if (!v2)
  {
    uint64_t v8 = *(int *)(type metadata accessor for TreeRegressorModel(0) + 24) + v14;
    uint64_t v16 = *(void *)(a2 + 24);
    uint64_t v15 = *(void *)(a2 + 32);
    __swift_mutable_project_boxed_opaque_existential_1(a2, v16);
    uint64_t v9 = type metadata accessor for BaseTreeRegressorModel(0);
    uint64_t v10 = lazy protocol witness table accessor for type TreeRegressorModel and conformance TreeRegressorModel(&lazy protocol witness table cache variable for type BaseTreeRegressorModel and conformance BaseTreeRegressorModel, (uint64_t (*)(uint64_t))&type metadata accessor for BaseTreeRegressorModel, (uint64_t)&protocol conformance descriptor for BaseTreeRegressorModel);
    return dispatch thunk of EstimatorEncoder.encode<A>(_:)(v8, v9, v10, v16, v15, v11, v12, *((void *)&v12 + 1), v13);
  }
  return result;
}

uint64_t TreeRegressor.decode(from:)(uint64_t a1)
{
  uint64_t v26 = v2;
  uint64_t v21 = v3;
  uint64_t v19 = v1;
  uint64_t v24 = type metadata accessor for BaseTreeRegressorModel(0);
  uint64_t v20 = *(void *)(v24 - 8);
  int64_t v4 = *(void *)(v20 + 64);
  uint64_t v5 = alloca(v4);
  uint64_t v6 = alloca(v4);
  uint64_t v25 = v18;
  uint64_t v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for FeatureVectorizer<Float>.Transformer);
  uint64_t v8 = *(void *)(a1 + 24);
  uint64_t v27 = *(void *)(a1 + 32);
  __swift_mutable_project_boxed_opaque_existential_1(a1, v8);
  uint64_t v9 = lazy protocol witness table accessor for type FullyConnectedNetworkClassifier<Float, String> and conformance FullyConnectedNetworkClassifier<A, B>(&lazy protocol witness table cache variable for type FeatureVectorizer<Float>.Transformer and conformance FeatureVectorizer<A>.Transformer, &demangling cache variable for type metadata for FeatureVectorizer<Float>.Transformer, (uint64_t)&protocol conformance descriptor for FeatureVectorizer<A>.Transformer);
  uint64_t v10 = v26;
  uint64_t result = dispatch thunk of EstimatorDecoder.decode<A>(_:)(v7, v7, v9, v8, v27);
  if (!v10)
  {
    uint64_t v26 = v18[0];
    uint64_t v23 = v18[1];
    uint64_t v27 = v18[2];
    uint64_t v12 = *(void *)(a1 + 24);
    uint64_t v22 = *(void *)(a1 + 32);
    __swift_mutable_project_boxed_opaque_existential_1(a1, v12);
    uint64_t v13 = lazy protocol witness table accessor for type TreeRegressorModel and conformance TreeRegressorModel(&lazy protocol witness table cache variable for type BaseTreeRegressorModel and conformance BaseTreeRegressorModel, (uint64_t (*)(uint64_t))&type metadata accessor for BaseTreeRegressorModel, (uint64_t)&protocol conformance descriptor for BaseTreeRegressorModel);
    dispatch thunk of EstimatorDecoder.decode<A>(_:)(v24, v24, v13, v12, v22);
    uint64_t v14 = *v21;
    uint64_t v15 = v21[1];
    uint64_t v16 = type metadata accessor for TreeRegressorModel(0);
    uint64_t v17 = v19;
    (*(void (**)(char *, void *, uint64_t))(v20 + 32))((char *)v19 + *(int *)(v16 + 24), v25, v24);
    *uint64_t v17 = v14;
    v17[1] = v15;
    v17[2] = v26;
    v17[3] = v23;
    v17[4] = v27;
    return swift_bridgeObjectRetain(v15);
  }
  return result;
}

uint64_t protocol witness for SupervisedTabularEstimator.annotationColumnID.getter in conformance TreeRegressor()
{
  return TreeRegressor.annotationColumnID.getter();
}

uint64_t protocol witness for SupervisedTabularEstimator.annotationColumnID.setter in conformance TreeRegressor(uint64_t a1)
{
  return TreeRegressor.annotationColumnID.setter(a1);
}

void (*protocol witness for SupervisedTabularEstimator.annotationColumnID.modify in conformance TreeRegressor(void *a1))(uint64_t a1, char a2)
{
  uint64_t v2 = malloc(0x28uLL);
  *a1 = v2;
  void *v2 = v1;
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ColumnID<Float>);
  v2[1] = v3;
  uint64_t v4 = *(void *)(v3 - 8);
  v2[2] = v4;
  size_t v5 = *(void *)(v4 + 64);
  v2[3] = malloc(v5);
  v2[4] = malloc(v5);
  TreeRegressor.annotationColumnID.getter();
  return protocol witness for SupervisedTabularEstimator.annotationColumnID.modify in conformance TreeRegressor;
}

void protocol witness for SupervisedTabularEstimator.annotationColumnID.modify in conformance TreeRegressor(uint64_t a1, char a2)
{
  uint64_t v2 = *(void **)a1;
  uint64_t v3 = *(void **)(*(void *)a1 + 24);
  uint64_t v4 = *(void **)(*(void *)a1 + 32);
  if (a2)
  {
    uint64_t v5 = v2[2];
    uint64_t v6 = v2[1];
    (*(void (**)(void *, void *))(v5 + 16))(v3, v4);
    TreeRegressor.annotationColumnID.setter((uint64_t)v3);
    (*(void (**)(void *, uint64_t))(v5 + 8))(v4, v6);
  }
  else
  {
    TreeRegressor.annotationColumnID.setter(*(void *)(*(void *)a1 + 32));
  }
  free(v4);
  free(v3);
  free(v2);
}

uint64_t protocol witness for SupervisedTabularEstimator.fitted(to:validateOn:eventHandler:) in conformance TreeRegressor(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  TreeRegressor.fitted(to:validateOn:eventHandler:)(a2, a3, a4, a5);
  return protocol witness for SupervisedTabularEstimator.fitted(to:validateOn:eventHandler:) in conformance TreeRegressor(*(uint64_t (**)(void))(v5 + 8));
}

uint64_t protocol witness for SupervisedTabularEstimator.encode(_:to:) in conformance TreeRegressor(uint64_t a1, uint64_t a2)
{
  return TreeRegressor.encode(_:to:)(a1, a2);
}

uint64_t protocol witness for SupervisedTabularEstimator.decode(from:) in conformance TreeRegressor(uint64_t a1)
{
  return TreeRegressor.decode(from:)(a1);
}

uint64_t base witness table accessor for SupervisedTabularEstimator in TreeRegressor()
{
  return lazy protocol witness table accessor for type TreeRegressorModel and conformance TreeRegressorModel(&lazy protocol witness table cache variable for type TreeRegressor and conformance TreeRegressor, type metadata accessor for TreeRegressor, (uint64_t)&protocol conformance descriptor for TreeRegressor);
}

uint64_t TreeRegressor.makeTransformer()()
{
  uint64_t v2 = v0;
  uint64_t v3 = *v1;
  uint64_t v4 = v1[1];
  type metadata accessor for TreeRegressor(0);
  type metadata accessor for TreeRegressorModel(0);
  swift_bridgeObjectRetain(v4);
  uint64_t result = BaseTreeRegressor.makeTransformer()(v4);
  *(void *)uint64_t v2 = v3;
  *(void *)(v2 + 8) = v4;
  *(_OWORD *)(v2 + 16) = 0;
  *(void *)(v2 + 32) = 0;
  return result;
}

uint64_t TreeRegressor.update(_:with:eventHandler:)(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v29 = a4;
  uint64_t v30 = a3;
  uint64_t v35 = a2;
  uint64_t v26 = type metadata accessor for AnyColumn(0);
  uint64_t v27 = *(void *)(v26 - 8);
  int64_t v6 = *(void *)(v27 + 64);
  uint64_t v7 = alloca(v6);
  uint64_t v8 = alloca(v6);
  unint64_t v28 = &v24;
  uint64_t v31 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for DenseMatrix<Float>);
  uint64_t v32 = *(void *)(v31 - 8);
  int64_t v9 = *(void *)(v32 + 64);
  uint64_t v10 = alloca(v9);
  uint64_t v11 = alloca(v9);
  ML16ColumnDescriptorVsAE_pTg5 = (void *)a1[2];
  uint64_t v25 = v5;
  char v33 = &v24;
  uint64_t v34 = a1;
  if (ML16ColumnDescriptorVsAE_pTg5)
  {
    uint64_t v13 = a1[3];
    uint64_t v14 = (char *)a1[4];
  }
  else
  {
    uint64_t v20 = v5[2];
    uint64_t v21 = alloca(24);
    uint64_t v22 = alloca(32);
    uint64_t v26 = v35;
    swift_bridgeObjectRetain(v20);
    ML16ColumnDescriptorVsAE_pTg5 = _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSaySSG_8CreateML16ColumnDescriptorVsAE_pTg5((void (*)(void *, uint64_t *))partial apply for closure #1 in FeatureVectorizer.fitted(to:), (uint64_t)&v24, v20);
    uint64_t result = swift_bridgeObjectRelease(v20);
    if (v4) {
      return result;
    }
    uint64_t v13 = 0xD000000000000013;
    uint64_t v23 = v34;
    outlined consume of FeatureVectorizer<Float>.Transformer?(v34[2], v34[3], v34[4]);
    long long v23[2] = (uint64_t)ML16ColumnDescriptorVsAE_pTg5;
    v23[3] = 0xD000000000000013;
    uint64_t v14 = "raining samples." + 0x8000000000000000;
    v23[4] = (uint64_t)("raining samples." + 0x8000000000000000);
  }
  uint64_t result = specialized FeatureVectorizer.Transformer.vectorized(_:includingBias:)(v35, 0, (uint64_t)ML16ColumnDescriptorVsAE_pTg5, v13, (uint64_t)v14, (void (*)(uint64_t, void))specialized DataFrame.asMatrix<A>(of:descriptors:includingBias:));
  if (!v4)
  {
    uint64_t v16 = v28;
    DataFrame.subscript.getter(*v25, v25[1]);
    uint64_t v17 = AnyColumn.convertedToFloats()();
    (*(void (**)(uint64_t *, uint64_t))(v27 + 8))(v16, v26);
    if (!v17) {
      BUG();
    }
    type metadata accessor for TreeRegressor(0);
    uint64_t v18 = (char *)v34 + *(int *)(type metadata accessor for TreeRegressorModel(0) + 24);
    uint64_t v19 = v33;
    uint64_t v35 = v17;
    BaseTreeRegressor.update(_:features:annotations:eventHandler:)(v18, v33, v17, v30, v29);
    (*(void (**)(uint64_t *, uint64_t))(v32 + 8))(v19, v31);
    return swift_release();
  }
  return result;
}

uint64_t protocol witness for UpdatableSupervisedTabularEstimator.makeTransformer() in conformance TreeRegressor()
{
  return TreeRegressor.makeTransformer()();
}

uint64_t protocol witness for UpdatableSupervisedTabularEstimator.update(_:with:eventHandler:) in conformance TreeRegressor(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  TreeRegressor.update(_:with:eventHandler:)(a1, a2, a3, a4);
  return protocol witness for SupervisedTabularEstimator.fitted(to:validateOn:eventHandler:) in conformance TreeRegressor(*(uint64_t (**)(void))(v4 + 8));
}

uint64_t protocol witness for UpdatableSupervisedTabularEstimator.encodeWithOptimizer(_:to:) in conformance TreeRegressor(uint64_t a1, uint64_t a2)
{
  return protocol witness for SupervisedTabularEstimator.encode(_:to:) in conformance TreeRegressor(a1, a2);
}

uint64_t protocol witness for UpdatableSupervisedTabularEstimator.decodeWithOptimizer(from:) in conformance TreeRegressor(uint64_t a1)
{
  return protocol witness for SupervisedTabularEstimator.decode(from:) in conformance TreeRegressor(a1);
}

uint64_t lazy protocol witness table accessor for type FeatureVectorizer<Float>.Transformer? and conformance <A> A?()
{
  uint64_t result = lazy protocol witness table cache variable for type FeatureVectorizer<Float>.Transformer? and conformance <A> A?;
  if (!lazy protocol witness table cache variable for type FeatureVectorizer<Float>.Transformer? and conformance <A> A?)
  {
    uint64_t v1 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for FeatureVectorizer<Float>.Transformer?);
    lazy protocol witness table accessor for type FullyConnectedNetworkClassifier<Float, String> and conformance FullyConnectedNetworkClassifier<A, B>(&lazy protocol witness table cache variable for type FeatureVectorizer<Float>.Transformer and conformance FeatureVectorizer<A>.Transformer, &demangling cache variable for type metadata for FeatureVectorizer<Float>.Transformer, (uint64_t)&protocol conformance descriptor for FeatureVectorizer<A>.Transformer);
    uint64_t result = swift_getWitnessTable(&protocol conformance descriptor for <A> A?, v1);
    lazy protocol witness table cache variable for type FeatureVectorizer<Float>.Transformer? and conformance <A> A? = result;
  }
  return result;
}

uint64_t specialized DataFrame.asMatrix<A>(of:descriptors:includingBias:)(uint64_t a1, int a2)
{
  uint64_t v62 = v3;
  uint64_t v47 = v2;
  uint64_t v51 = type metadata accessor for AnyColumn(0);
  uint64_t v52 = *(void *)(v51 - 8);
  int64_t v5 = *(void *)(v52 + 64);
  int64_t v6 = alloca(v5);
  uint64_t v7 = alloca(v5);
  uint64_t v61 = &v43;
  uint64_t v48 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for FeatureMatrixBuilder<Float>);
  int64_t v8 = *(void *)(*(void *)(v48 - 8) + 64);
  int64_t v9 = alloca(v8);
  uint64_t v10 = alloca(v8);
  uint64_t v45 = v4;
  uint64_t v11 = a1;
  uint64_t v12 = DataFrame.shape.getter();
  swift_bridgeObjectRetain(a1);
  uint64_t v54 = &v43;
  specialized FeatureMatrixBuilder.init(rowCount:featureDescriptors:includesBias:)(v12, a1, a2);
  uint64_t v46 = *(void *)(a1 + 16);
  if (!v46)
  {
LABEL_19:
    uint64_t v35 = v54;
    uint64_t v36 = (char *)v54 + *(int *)(v48 + 44);
    uint64_t v37 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for DenseMatrix<Float>);
    (*(void (**)(uint64_t, char *, uint64_t))(*(void *)(v37 - 8) + 16))(v47, v36, v37);
    uint64_t v38 = (uint64_t)v35;
    return outlined destroy of Either<LogisticRegressionClassifier<Float, String>, FullyConnectedNetworkClassifier<Float, String>>(v38, &demangling cache variable for type metadata for FeatureMatrixBuilder<Float>);
  }
  swift_bridgeObjectRetain(a1);
  uint64_t v13 = 7;
  unint64_t v14 = 0;
  uint64_t v50 = "sessionDirectory" + 0x8000000000000000;
  uint64_t v49 = " values for feature '" + 0x8000000000000000;
  uint64_t v59 = a1;
  while (2)
  {
    uint64_t v60 = *(void *)(v11 + 8 * v13 - 24);
    uint64_t v15 = *(void *)(v11 + 8 * v13 - 16);
    uint64_t v16 = *(void *)(v11 + 8 * v13 - 8);
    uint64_t v58 = v13;
    unsigned __int8 v17 = *(unsigned char *)(v11 + 8 * v13);
    swift_bridgeObjectRetain(v15);
    uint64_t v57 = v16;
    uint64_t v18 = v16;
    char v19 = v17;
    outlined copy of ColumnDescriptor.ColumnTypeDescriptor(v18, v17);
    uint64_t v20 = v60;
    uint64_t v60 = v15;
    DataFrame.subscript.getter(v20, v15);
    uint64_t v21 = *v54;
    if (v14 >= *(void *)(*v54 + 16)) {
      BUG();
    }
    uint64_t v22 = v54[1];
    if (v14 >= *(void *)(v22 + 16)) {
      BUG();
    }
    uint64_t v23 = *(void *)(v21 + 8 * v58 - 16);
    uint64_t v24 = *(uint64_t **)(v21 + 8 * v58 - 8);
    unint64_t v44 = v14;
    uint64_t v25 = *(void *)(v22 + 8 * v14 + 32);
    switch(*(unsigned char *)(v21 + 8 * v58))
    {
      case 0:
      case 1:
      case 2:
      case 3:
        uint64_t v26 = v62;
        specialized FeatureMatrixBuilder.fillArray(from:size:column:)((uint64_t)v61, (unint64_t)v24, *(void *)(v22 + 8 * v14 + 32));
        goto LABEL_7;
      case 4:
        uint64_t v53 = *(unsigned __int8 *)(v21 + 8 * v58);
        uint64_t v56 = v23;
        swift_bridgeObjectRetain(v23);
        outlined copy of ColumnDescriptor.ColumnTypeDescriptor((uint64_t)v24, 4);
        uint64_t v55 = v24;
        uint64_t v28 = v62;
        specialized FeatureMatrixBuilder.fillCategorical(from:categories:column:)((uint64_t)v61, v24, v25);
        uint64_t v62 = v28;
        if (!v28) {
          goto LABEL_12;
        }
        LODWORD(v58) = v17;
        swift_bridgeObjectRelease(v56);
        outlined consume of ColumnDescriptor.ColumnTypeDescriptor((uint64_t)v55, 4);
        goto LABEL_22;
      case 5:
        uint64_t v53 = *(unsigned __int8 *)(v21 + 8 * v58);
        uint64_t v56 = v23;
        swift_bridgeObjectRetain(v23);
        outlined copy of ColumnDescriptor.ColumnTypeDescriptor((uint64_t)v24, 5);
        uint64_t v55 = v24;
        uint64_t v29 = v62;
        specialized FeatureMatrixBuilder.fillDictionary(from:descriptors:column:)((uint64_t)v61, (uint64_t)v24, v25, (void (*)(_OWORD *, uint64_t, uint64_t, uint64_t, void, uint64_t, uint64_t))specialized FeatureMatrixBuilder.fill(_:descriptor:row:column:));
        uint64_t v62 = v29;
        if (!v29)
        {
LABEL_12:
          uint64_t v11 = v59;
          uint64_t v27 = (uint64_t)v61;
          swift_bridgeObjectRelease(v56);
          outlined consume of ColumnDescriptor.ColumnTypeDescriptor((uint64_t)v55, v53);
LABEL_13:
          unint64_t v14 = v44 + 1;
          swift_bridgeObjectRelease(v60);
          outlined consume of ColumnDescriptor.ColumnTypeDescriptor(v57, v19);
          (*(void (**)(uint64_t, uint64_t))(v52 + 8))(v27, v51);
          uint64_t v13 = v58 + 4;
          if (v46 == v14)
          {
            swift_bridgeObjectRelease(v11);
            goto LABEL_19;
          }
          continue;
        }
        LODWORD(v58) = v17;
        swift_bridgeObjectRelease(v56);
        outlined consume of ColumnDescriptor.ColumnTypeDescriptor((uint64_t)v55, 5);
LABEL_22:
        char v39 = v59;
        uint64_t v40 = (uint64_t)v61;
        uint64_t v41 = v57;
        swift_bridgeObjectRelease(v60);
        outlined consume of ColumnDescriptor.ColumnTypeDescriptor(v41, v58);
        (*(void (**)(uint64_t, uint64_t))(v52 + 8))(v40, v51);
        swift_bridgeObjectRelease(v39);
        uint64_t v38 = (uint64_t)v54;
        return outlined destroy of Either<LogisticRegressionClassifier<Float, String>, FullyConnectedNetworkClassifier<Float, String>>(v38, &demangling cache variable for type metadata for FeatureMatrixBuilder<Float>);
      case 6:
        if (v24)
        {
          uint64_t v30 = 0xD00000000000002CLL;
          uint64_t v31 = v61;
          uint64_t v32 = v25;
          uint64_t v26 = v62;
          char v33 = &stru_20 + 28;
          uint64_t v34 = v49;
        }
        else
        {
          uint64_t v31 = v61;
          uint64_t v32 = *(void *)(v22 + 8 * v14 + 32);
          uint64_t v26 = v62;
          char v33 = &stru_20 + 21;
          uint64_t v30 = 0xD000000000000025;
          uint64_t v34 = v50;
        }
        specialized FeatureMatrixBuilder.fillInteger(from:column:)(v31, v32, v33, v30, v34);
LABEL_7:
        uint64_t v62 = v26;
        if (v26)
        {
          LODWORD(v58) = v17;
          goto LABEL_22;
        }
        uint64_t v11 = v59;
        uint64_t v27 = (uint64_t)v61;
        goto LABEL_13;
    }
  }
}

{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  int64_t v5;
  void *v6;
  void *v7;
  int64_t v8;
  void *v9;
  void *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unsigned __int8 v17;
  uint64_t v18;
  char v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t *v31;
  uint64_t v32;
  void *v33;
  char *v34;
  uint64_t *v35;
  char *v36;
  uint64_t v37;
  uint64_t v38;
  char v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v43;
  unint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  char *v49;
  char *v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t *v54;
  uint64_t *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t *v61;
  uint64_t v62;

  uint64_t v62 = v3;
  uint64_t v47 = v2;
  uint64_t v51 = type metadata accessor for AnyColumn(0);
  uint64_t v52 = *(void *)(v51 - 8);
  int64_t v5 = *(void *)(v52 + 64);
  int64_t v6 = alloca(v5);
  uint64_t v7 = alloca(v5);
  uint64_t v61 = &v43;
  uint64_t v48 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for FeatureMatrixBuilder<Double>);
  int64_t v8 = *(void *)(*(void *)(v48 - 8) + 64);
  int64_t v9 = alloca(v8);
  uint64_t v10 = alloca(v8);
  uint64_t v45 = v4;
  uint64_t v11 = a1;
  uint64_t v12 = DataFrame.shape.getter();
  swift_bridgeObjectRetain(a1);
  uint64_t v54 = &v43;
  specialized FeatureMatrixBuilder.init(rowCount:featureDescriptors:includesBias:)(v12, a1, a2);
  uint64_t v46 = *(void *)(a1 + 16);
  if (!v46)
  {
LABEL_19:
    uint64_t v35 = v54;
    uint64_t v36 = (char *)v54 + *(int *)(v48 + 44);
    uint64_t v37 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for DenseMatrix<Double>);
    (*(void (**)(uint64_t, char *, uint64_t))(*(void *)(v37 - 8) + 16))(v47, v36, v37);
    uint64_t v38 = (uint64_t)v35;
    return outlined destroy of Either<LogisticRegressionClassifier<Float, String>, FullyConnectedNetworkClassifier<Float, String>>(v38, &demangling cache variable for type metadata for FeatureMatrixBuilder<Double>);
  }
  swift_bridgeObjectRetain(a1);
  uint64_t v13 = 7;
  unint64_t v14 = 0;
  uint64_t v50 = "sessionDirectory" + 0x8000000000000000;
  uint64_t v49 = " values for feature '" + 0x8000000000000000;
  uint64_t v59 = a1;
  while (2)
  {
    uint64_t v60 = *(void *)(v11 + 8 * v13 - 24);
    uint64_t v15 = *(void *)(v11 + 8 * v13 - 16);
    uint64_t v16 = *(void *)(v11 + 8 * v13 - 8);
    uint64_t v58 = v13;
    unsigned __int8 v17 = *(unsigned char *)(v11 + 8 * v13);
    swift_bridgeObjectRetain(v15);
    uint64_t v57 = v16;
    uint64_t v18 = v16;
    char v19 = v17;
    outlined copy of ColumnDescriptor.ColumnTypeDescriptor(v18, v17);
    uint64_t v20 = v60;
    uint64_t v60 = v15;
    DataFrame.subscript.getter(v20, v15);
    uint64_t v21 = *v54;
    if (v14 >= *(void *)(*v54 + 16)) {
      BUG();
    }
    uint64_t v22 = v54[1];
    if (v14 >= *(void *)(v22 + 16)) {
      BUG();
    }
    uint64_t v23 = *(void *)(v21 + 8 * v58 - 16);
    uint64_t v24 = *(uint64_t **)(v21 + 8 * v58 - 8);
    unint64_t v44 = v14;
    uint64_t v25 = *(void *)(v22 + 8 * v14 + 32);
    switch(*(unsigned char *)(v21 + 8 * v58))
    {
      case 0:
      case 1:
      case 2:
      case 3:
        uint64_t v26 = v62;
        specialized FeatureMatrixBuilder.fillArray(from:size:column:)((uint64_t)v61, (unint64_t)v24, *(void *)(v22 + 8 * v14 + 32));
        goto LABEL_7;
      case 4:
        uint64_t v53 = *(unsigned __int8 *)(v21 + 8 * v58);
        uint64_t v56 = v23;
        swift_bridgeObjectRetain(v23);
        outlined copy of ColumnDescriptor.ColumnTypeDescriptor((uint64_t)v24, 4);
        uint64_t v55 = v24;
        uint64_t v28 = v62;
        specialized FeatureMatrixBuilder.fillCategorical(from:categories:column:)((uint64_t)v61, v24, v25);
        uint64_t v62 = v28;
        if (!v28) {
          goto LABEL_12;
        }
        LODWORD(v58) = v17;
        swift_bridgeObjectRelease(v56);
        outlined consume of ColumnDescriptor.ColumnTypeDescriptor((uint64_t)v55, 4);
        goto LABEL_22;
      case 5:
        uint64_t v53 = *(unsigned __int8 *)(v21 + 8 * v58);
        uint64_t v56 = v23;
        swift_bridgeObjectRetain(v23);
        outlined copy of ColumnDescriptor.ColumnTypeDescriptor((uint64_t)v24, 5);
        uint64_t v55 = v24;
        uint64_t v29 = v62;
        specialized FeatureMatrixBuilder.fillDictionary(from:descriptors:column:)((uint64_t)v61, (uint64_t)v24, v25, (void (*)(_OWORD *, uint64_t, uint64_t, uint64_t, void, uint64_t, uint64_t))specialized FeatureMatrixBuilder.fill(_:descriptor:row:column:));
        uint64_t v62 = v29;
        if (!v29)
        {
LABEL_12:
          uint64_t v11 = v59;
          uint64_t v27 = (uint64_t)v61;
          swift_bridgeObjectRelease(v56);
          outlined consume of ColumnDescriptor.ColumnTypeDescriptor((uint64_t)v55, v53);
LABEL_13:
          unint64_t v14 = v44 + 1;
          swift_bridgeObjectRelease(v60);
          outlined consume of ColumnDescriptor.ColumnTypeDescriptor(v57, v19);
          (*(void (**)(uint64_t, uint64_t))(v52 + 8))(v27, v51);
          uint64_t v13 = v58 + 4;
          if (v46 == v14)
          {
            swift_bridgeObjectRelease(v11);
            goto LABEL_19;
          }
          continue;
        }
        LODWORD(v58) = v17;
        swift_bridgeObjectRelease(v56);
        outlined consume of ColumnDescriptor.ColumnTypeDescriptor((uint64_t)v55, 5);
LABEL_22:
        char v39 = v59;
        uint64_t v40 = (uint64_t)v61;
        uint64_t v41 = v57;
        swift_bridgeObjectRelease(v60);
        outlined consume of ColumnDescriptor.ColumnTypeDescriptor(v41, v58);
        (*(void (**)(uint64_t, uint64_t))(v52 + 8))(v40, v51);
        swift_bridgeObjectRelease(v39);
        uint64_t v38 = (uint64_t)v54;
        return outlined destroy of Either<LogisticRegressionClassifier<Float, String>, FullyConnectedNetworkClassifier<Float, String>>(v38, &demangling cache variable for type metadata for FeatureMatrixBuilder<Double>);
      case 6:
        if (v24)
        {
          uint64_t v30 = 0xD00000000000002CLL;
          uint64_t v31 = v61;
          uint64_t v32 = v25;
          uint64_t v26 = v62;
          char v33 = &stru_20 + 28;
          uint64_t v34 = v49;
        }
        else
        {
          uint64_t v31 = v61;
          uint64_t v32 = *(void *)(v22 + 8 * v14 + 32);
          uint64_t v26 = v62;
          char v33 = &stru_20 + 21;
          uint64_t v30 = 0xD000000000000025;
          uint64_t v34 = v50;
        }
        specialized FeatureMatrixBuilder.fillInteger(from:column:)(v31, v32, v33, v30, v34);
LABEL_7:
        uint64_t v62 = v26;
        if (v26)
        {
          LODWORD(v58) = v17;
          goto LABEL_22;
        }
        uint64_t v11 = v59;
        uint64_t v27 = (uint64_t)v61;
        goto LABEL_13;
    }
  }
}

uint64_t specialized FeatureMatrixBuilder.init(rowCount:featureDescriptors:includesBias:)(uint64_t a1, uint64_t a2, int a3)
{
  uint64_t v30 = a1;
  *(void *)uint64_t v3 = a2;
  *(unsigned char *)(v3 + 16) = a3 & 1;
  uint64_t v4 = *(void *)(a2 + 16);
  uint64_t v32 = v3;
  if (v4)
  {
    int v33 = a3;
    swift_bridgeObjectRetain(a2);
    uint64_t v31 = a2;
    int64_t v5 = (unsigned char *)(a2 + 56);
    uint64_t v34 = (char *)_swiftEmptyArrayStorage;
    unint64_t v6 = 0;
    do
    {
      uint64_t v29 = v4;
      uint64_t v7 = *((void *)v5 - 1);
      char v8 = *v5;
      uint64_t v28 = *((void *)v5 - 2);
      swift_bridgeObjectRetain(v28);
      char v9 = v8;
      uint64_t v10 = v7;
      outlined copy of ColumnDescriptor.ColumnTypeDescriptor(v7, v9);
      unint64_t v27 = v6;
      if (!swift_isUniquelyReferenced_nonNull_native(v34)) {
        uint64_t v34 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *((void *)v34 + 2) + 1, 1, (uint64_t)v34);
      }
      unint64_t v11 = *((void *)v34 + 2);
      if (*((void *)v34 + 3) >> 1 <= v11) {
        uint64_t v34 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(*((void *)v34 + 3) >= 2uLL, v11 + 1, 1, (uint64_t)v34);
      }
      uint64_t v12 = v34;
      *((void *)v34 + 2) = v11 + 1;
      unint64_t v13 = v27;
      *(void *)&v12[8 * v11 + 32] = v27;
      unint64_t v14 = v13;
      uint64_t v15 = ColumnDescriptor.ColumnTypeDescriptor.featureSize.getter(v7, v9);
      swift_bridgeObjectRelease(v28);
      outlined consume of ColumnDescriptor.ColumnTypeDescriptor(v10, v9);
      BOOL v16 = __OFADD__(v15, v14);
      unint64_t v6 = v15 + v14;
      if (v16) {
        BUG();
      }
      v5 += 32;
      uint64_t v4 = v29 - 1;
    }
    while (v29 != 1);
    swift_bridgeObjectRelease(v31);
    *(void *)(v32 + 8) = v34;
    if ((v33 & 1) == 0)
    {
      char v17 = 0;
      unint64_t v18 = v6;
      goto LABEL_13;
    }
  }
  else
  {
    *(void *)(v3 + 8) = _swiftEmptyArrayStorage;
    unint64_t v6 = 0;
    unint64_t v18 = 0;
    char v17 = 0;
    if ((a3 & 1) == 0) {
      goto LABEL_13;
    }
  }
  unint64_t v18 = v6;
  BOOL v16 = __OFADD__(1, v6++);
  char v17 = 1;
  if (v16) {
    BUG();
  }
LABEL_13:
  LODWORD(v26[0]) = 0;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for FeatureMatrixBuilder<Float>);
  uint64_t v19 = lazy protocol witness table accessor for type Float and conformance Float();
  unint64_t v20 = v6;
  uint64_t v21 = v30;
  uint64_t result = DenseMatrix.init(rowCount:columnCount:layout:repeating:)(v30, v20, 0, v26, &type metadata for Float, v19);
  if (v17)
  {
    if (v21 < 0) {
      BUG();
    }
    if (v21)
    {
      for (unint64_t i = 0; i != v21; ++i)
      {
        uint64_t v24 = specialized DenseMatrix.subscript.modify(v26, i, v18);
        *uint64_t v25 = 1065353216;
        uint64_t result = ((uint64_t (*)(void *, void))v24)(v26, 0);
      }
    }
  }
  return result;
}

{
  uint64_t v3;
  uint64_t v4;
  unsigned char *v5;
  unint64_t v6;
  uint64_t v7;
  char v8;
  char v9;
  uint64_t v10;
  unint64_t v11;
  char *v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  BOOL v16;
  char v17;
  unint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t result;
  unint64_t i;
  void (*v24)(uint64_t);
  void *v25;
  void v26[4];
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  int v33;
  char *v34;

  uint64_t v30 = a1;
  *(void *)uint64_t v3 = a2;
  *(unsigned char *)(v3 + 16) = a3 & 1;
  uint64_t v4 = *(void *)(a2 + 16);
  if (v4)
  {
    int v33 = a3;
    uint64_t v31 = v3;
    swift_bridgeObjectRetain(a2);
    uint64_t v32 = a2;
    int64_t v5 = (unsigned char *)(a2 + 56);
    uint64_t v34 = (char *)_swiftEmptyArrayStorage;
    unint64_t v6 = 0;
    do
    {
      uint64_t v29 = v4;
      uint64_t v7 = *((void *)v5 - 1);
      char v8 = *v5;
      uint64_t v28 = *((void *)v5 - 2);
      swift_bridgeObjectRetain(v28);
      char v9 = v8;
      uint64_t v10 = v7;
      outlined copy of ColumnDescriptor.ColumnTypeDescriptor(v7, v9);
      unint64_t v27 = v6;
      if (!swift_isUniquelyReferenced_nonNull_native(v34)) {
        uint64_t v34 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *((void *)v34 + 2) + 1, 1, (uint64_t)v34);
      }
      unint64_t v11 = *((void *)v34 + 2);
      if (*((void *)v34 + 3) >> 1 <= v11) {
        uint64_t v34 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(*((void *)v34 + 3) >= 2uLL, v11 + 1, 1, (uint64_t)v34);
      }
      uint64_t v12 = v34;
      *((void *)v34 + 2) = v11 + 1;
      unint64_t v13 = v27;
      *(void *)&v12[8 * v11 + 32] = v27;
      unint64_t v14 = v13;
      uint64_t v15 = ColumnDescriptor.ColumnTypeDescriptor.featureSize.getter(v7, v9);
      swift_bridgeObjectRelease(v28);
      outlined consume of ColumnDescriptor.ColumnTypeDescriptor(v10, v9);
      BOOL v16 = __OFADD__(v15, v14);
      unint64_t v6 = v15 + v14;
      if (v16) {
        BUG();
      }
      v5 += 32;
      uint64_t v4 = v29 - 1;
    }
    while (v29 != 1);
    swift_bridgeObjectRelease(v32);
    *(void *)(v31 + 8) = v34;
    if ((v33 & 1) == 0)
    {
      char v17 = 0;
      unint64_t v18 = v6;
      goto LABEL_13;
    }
  }
  else
  {
    *(void *)(v3 + 8) = _swiftEmptyArrayStorage;
    unint64_t v6 = 0;
    unint64_t v18 = 0;
    char v17 = 0;
    if ((a3 & 1) == 0) {
      goto LABEL_13;
    }
  }
  unint64_t v18 = v6;
  BOOL v16 = __OFADD__(1, v6++);
  char v17 = 1;
  if (v16) {
    BUG();
  }
LABEL_13:
  v26[0] = 0;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for FeatureMatrixBuilder<Double>);
  uint64_t v19 = lazy protocol witness table accessor for type Double and conformance Double();
  unint64_t v20 = v6;
  uint64_t v21 = v30;
  uint64_t result = DenseMatrix.init(rowCount:columnCount:layout:repeating:)(v30, v20, 0, v26, &type metadata for Double, v19);
  if (v17)
  {
    if (v21 < 0) {
      BUG();
    }
    if (v21)
    {
      for (unint64_t i = 0; i != v21; ++i)
      {
        uint64_t v24 = specialized DenseMatrix.subscript.modify(v26, i, v18);
        *uint64_t v25 = 0x3FF0000000000000;
        uint64_t result = ((uint64_t (*)(void *, void))v24)(v26, 0);
      }
    }
  }
  return result;
}

uint64_t specialized FeatureMatrixBuilder.fillCategorical(from:categories:column:)(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v162 = v3;
  uint64_t v171 = v4;
  uint64_t v170 = a3;
  uint64_t v177 = a2;
  uint64_t v175 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Column<[String : Int]>);
  uint64_t v167 = *(void *)(v175 - 8);
  int64_t v5 = *(void *)(v167 + 64);
  unint64_t v6 = alloca(v5);
  uint64_t v7 = alloca(v5);
  uint64_t v166 = &v155;
  uint64_t v163 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Column<[String : Float]>);
  uint64_t v165 = *(void *)(v163 - 8);
  int64_t v8 = *(void *)(v165 + 64);
  char v9 = alloca(v8);
  uint64_t v10 = alloca(v8);
  char v164 = &v155;
  uint64_t v173 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Column<[String : Double]>);
  uint64_t v161 = *(void *)(v173 - 8);
  int64_t v11 = *(void *)(v161 + 64);
  uint64_t v12 = alloca(v11);
  unint64_t v13 = alloca(v11);
  uint64_t v169 = &v155;
  uint64_t v168 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Column<[String]>);
  uint64_t v160 = *(void *)(v168 - 8);
  int64_t v14 = *(void *)(v160 + 64);
  uint64_t v15 = alloca(v14);
  BOOL v16 = alloca(v14);
  long long v159 = &v155;
  uint64_t v17 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Column<String>);
  uint64_t v156 = *(void *)(v17 - 8);
  int64_t v18 = *(void *)(v156 + 64);
  uint64_t v19 = alloca(v18);
  unint64_t v20 = alloca(v18);
  uint64_t v21 = &v155;
  uint64_t v22 = AnyColumn.wrappedElementType.getter();
  if (!swift_dynamicCastMetatype(v22, &type metadata for String))
  {
    uint64_t v37 = AnyColumn.wrappedElementType.getter();
    uint64_t v38 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [String]);
    if (!swift_dynamicCastMetatype(v37, v38))
    {
      uint64_t v85 = AnyColumn.wrappedElementType.getter();
      uint64_t v86 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [String : Double]);
      if (swift_dynamicCastMetatype(v85, v86))
      {
        uint64_t v87 = v169;
        double v88 = AnyColumn.assumingType<A>(_:)(v86, v86);
        uint64_t v89 = v173;
        uint64_t v90 = Column.count.getter(v173);
        if (v90 < 0) {
          BUG();
        }
        uint64_t v91 = v161;
        if (v90)
        {
          uint64_t v172 = v177[2];
          v177 += 5;
          unint64_t v92 = 0;
          uint64_t v168 = v90;
          do
          {
            if (v92 == v90) {
              BUG();
            }
            char v176 = (uint64_t *)v92;
            Column.subscript.getter(v92, v89);
            uint64_t v93 = *(void *)&v157[0];
            if (!*(void *)&v157[0]) {
              uint64_t v93 = Dictionary.init(dictionaryLiteral:)(_swiftEmptyArrayStorage, &type metadata for String, &type metadata for Double, &protocol witness table for String);
            }
            if (v172)
            {
              uint64_t v94 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for FeatureMatrixBuilder<Float>);
              uint64_t v175 = v171 + *(int *)(v94 + 44);
              uint64_t v95 = v177;
              uint64_t v96 = 0;
              uint64_t v178 = v93;
              do
              {
                unint64_t v97 = v96 + v170;
                if (__OFADD__(v96, v170)) {
                  BUG();
                }
                if (*(void *)(v93 + 16))
                {
                  unint64_t v98 = (unint64_t)v95;
                  uint64_t v99 = *v95;
                  unint64_t v180 = v98;
                  *(void *)&long long v179 = *(void *)(v98 - 8);
                  swift_bridgeObjectRetain(v99);
                  uint64_t v100 = v179;
                  *(void *)&long long v179 = v99;
                  unint64_t v101 = specialized __RawDictionaryStorage.find<A>(_:)(v100, v99);
                  uint64_t v102 = 0;
                  if (v103) {
                    uint64_t v102 = *(uint64_t **)(*(void *)(v178 + 56) + 8 * v101);
                  }
                  uint64_t v174 = v102;
                  swift_bridgeObjectRelease(v179);
                  double v104 = *(double *)&v174;
                  uint64_t v95 = (uint64_t *)v180;
                }
                else
                {
                  double v104 = 0.0;
                }
                ++v96;
                float v105 = v104;
                *(float *)&long long v179 = v105;
                unint64_t v106 = specialized DenseMatrix.subscript.modify(v157, (unint64_t)v176, v97);
                *(void *)&double v88 = v179;
                _DWORD *v107 = v179;
                ((void (*)(_OWORD *, void))v106)(v157, 0);
                v95 += 2;
                uint64_t v93 = v178;
              }
              while (v172 != v96);
              swift_bridgeObjectRelease(v178);
              uint64_t v91 = v161;
              uint64_t v89 = v173;
              uint64_t v87 = v169;
            }
            else
            {
              swift_bridgeObjectRelease(v93);
            }
            unint64_t v92 = (unint64_t)v176 + 1;
            uint64_t v90 = v168;
          }
          while ((uint64_t *)((char *)v176 + 1) != (uint64_t *)v168);
        }
      }
      else
      {
        uint64_t v108 = AnyColumn.wrappedElementType.getter();
        uint64_t v109 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [String : Float]);
        if (swift_dynamicCastMetatype(v108, v109))
        {
          uint64_t v87 = v164;
          double v88 = AnyColumn.assumingType<A>(_:)(v109, v109);
          uint64_t v89 = v163;
          uint64_t v110 = Column.count.getter(v163);
          if (v110 < 0) {
            BUG();
          }
          uint64_t v91 = v165;
          if (v110)
          {
            uint64_t v172 = v177[2];
            v177 += 5;
            unint64_t v111 = 0;
            uint64_t v173 = v110;
            do
            {
              if (v111 == v110) {
                BUG();
              }
              char v176 = (uint64_t *)v111;
              Column.subscript.getter(v111, v89);
              uint64_t v112 = *(void *)&v157[0];
              if (!*(void *)&v157[0]) {
                uint64_t v112 = Dictionary.init(dictionaryLiteral:)(_swiftEmptyArrayStorage, &type metadata for String, &type metadata for Float, &protocol witness table for String);
              }
              if (v172)
              {
                uint64_t v113 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for FeatureMatrixBuilder<Float>);
                uint64_t v175 = v171 + *(int *)(v113 + 44);
                uint64_t v114 = v177;
                uint64_t v115 = 0;
                uint64_t v178 = v112;
                do
                {
                  unint64_t v116 = v115 + v170;
                  if (__OFADD__(v115, v170)) {
                    BUG();
                  }
                  if (*(void *)(v112 + 16))
                  {
                    uint64_t v117 = v114;
                    uint64_t v118 = *v114;
                    uint64_t v174 = v117;
                    *(void *)&long long v179 = *(v117 - 1);
                    swift_bridgeObjectRetain(v118);
                    unint64_t v180 = v118;
                    unint64_t v119 = specialized __RawDictionaryStorage.find<A>(_:)(v179, v118);
                    int v120 = 0;
                    if (v121) {
                      int v120 = *(_DWORD *)(*(void *)(v178 + 56) + 4 * v119);
                    }
                    LODWORD(v179) = v120;
                    swift_bridgeObjectRelease(v180);
                    unint64_t v122 = (unint64_t)v176;
                    uint64_t v114 = v174;
                  }
                  else
                  {
                    LODWORD(v179) = 0;
                    unint64_t v122 = (unint64_t)v176;
                  }
                  ++v115;
                  uint64_t v123 = specialized DenseMatrix.subscript.modify(v157, v122, v116);
                  *(void *)&double v88 = v179;
                  *uint64_t v124 = v179;
                  ((void (*)(_OWORD *, void))v123)(v157, 0);
                  v114 += 2;
                  uint64_t v112 = v178;
                }
                while (v172 != v115);
                swift_bridgeObjectRelease(v178);
                uint64_t v91 = v165;
                uint64_t v89 = v163;
                uint64_t v87 = v164;
              }
              else
              {
                swift_bridgeObjectRelease(v112);
              }
              unint64_t v111 = (unint64_t)v176 + 1;
              uint64_t v110 = v173;
            }
            while ((uint64_t *)((char *)v176 + 1) != (uint64_t *)v173);
          }
        }
        else
        {
          uint64_t v125 = AnyColumn.wrappedElementType.getter();
          uint64_t v126 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [String : Int]);
          if (!swift_dynamicCastMetatype(v125, v126))
          {
            *(void *)&v157[0] = 0;
            *((void *)&v157[0] + 1) = 0xE000000000000000;
            _StringGuts.grow(_:)(52);
            v142._char object = "', but got shape " + 0x8000000000000000;
            v142._uint64_t countAndFlagsBits = 0xD000000000000024;
            String.append(_:)(v142);
            uint64_t v143 = AnyColumn.name.getter();
            char v145 = (char)v144;
            v142._uint64_t countAndFlagsBits = v143;
            v142._char object = v144;
            String.append(_:)(v142);
            swift_bridgeObjectRelease(v145);
            v142._uint64_t countAndFlagsBits = 0x6720747562202C27;
            v142._char object = (void *)0xEB0000000020746FLL;
            String.append(_:)(v142);
            uint64_t v146 = AnyColumn.wrappedElementType.getter();
            uint64_t v147 = _typeName(_:qualified:)(v146, 0);
            char v149 = (char)v148;
            v142._uint64_t countAndFlagsBits = v147;
            v142._char object = v148;
            String.append(_:)(v142);
            swift_bridgeObjectRelease(v149);
            v142._uint64_t countAndFlagsBits = 46;
            v142._char object = (void *)0xE100000000000000;
            String.append(_:)(v142);
            long long v179 = v157[0];
            v142._char object = (void *)lazy protocol witness table accessor for type MLCreateError and conformance MLCreateError();
            uint64_t v150 = swift_allocError(&type metadata for MLCreateError, v142._object, 0, 0);
            *(_OWORD *)uint64_t v151 = v179;
            *(_OWORD *)(v151 + 16) = 0;
            *(_OWORD *)(v151 + 32) = 0;
            *(unsigned char *)(v151 + 48) = 0;
            uint64_t v162 = v150;
            return swift_willThrow(&type metadata for MLCreateError, v142._object, v151, v152, v153, v154);
          }
          uint64_t v87 = v166;
          double v88 = AnyColumn.assumingType<A>(_:)(v126, v126);
          uint64_t v89 = v175;
          uint64_t v127 = Column.count.getter(v175);
          if (v127 < 0) {
            BUG();
          }
          uint64_t v91 = v167;
          if (v127)
          {
            uint64_t v174 = (uint64_t *)v177[2];
            v177 += 5;
            unint64_t v128 = 0;
            uint64_t v173 = v127;
            do
            {
              if (v128 == v127) {
                BUG();
              }
              unint64_t v180 = v128;
              Column.subscript.getter(v128, v89);
              uint64_t v129 = *(void *)&v157[0];
              if (!*(void *)&v157[0]) {
                uint64_t v129 = Dictionary.init(dictionaryLiteral:)(_swiftEmptyArrayStorage, &type metadata for String, &type metadata for Int, &protocol witness table for String);
              }
              if (v174)
              {
                uint64_t v130 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for FeatureMatrixBuilder<Float>);
                uint64_t v172 = v171 + *(int *)(v130 + 44);
                unint64_t v131 = v177;
                uint64_t v132 = 0;
                char v176 = (uint64_t *)v129;
                do
                {
                  unint64_t v133 = (unint64_t)v132 + v170;
                  if (__OFADD__(v132, v170)) {
                    BUG();
                  }
                  if (*(void *)(v129 + 16))
                  {
                    uint64_t v134 = v131;
                    uint64_t v135 = *v131;
                    uint64_t v178 = (uint64_t)v134;
                    *(void *)&long long v179 = *(v134 - 1);
                    swift_bridgeObjectRetain(v135);
                    uint64_t v136 = v179;
                    *(void *)&long long v179 = v135;
                    unint64_t v137 = specialized __RawDictionaryStorage.find<A>(_:)(v136, v135);
                    if (v138) {
                      uint64_t v139 = *(void *)(*(void *)(v129 + 56) + 8 * v137);
                    }
                    else {
                      LODWORD(v139) = 0;
                    }
                    swift_bridgeObjectRelease(v179);
                    unint64_t v131 = (uint64_t *)v178;
                  }
                  else
                  {
                    LODWORD(v139) = 0;
                  }
                  uint64_t v132 = (uint64_t *)((char *)v132 + 1);
                  *(float *)&long long v179 = (float)(int)v139;
                  unsigned int v140 = specialized DenseMatrix.subscript.modify(v157, v180, v133);
                  *(void *)&double v88 = v179;
                  *uint64_t v141 = v179;
                  ((void (*)(_OWORD *, void))v140)(v157, 0);
                  v131 += 2;
                  uint64_t v129 = (uint64_t)v176;
                }
                while (v174 != v132);
                swift_bridgeObjectRelease((_BYTE)v176);
                uint64_t v91 = v167;
                uint64_t v89 = v175;
                uint64_t v87 = v166;
              }
              else
              {
                swift_bridgeObjectRelease(v129);
              }
              unint64_t v128 = v180 + 1;
              uint64_t v127 = v173;
            }
            while (v180 + 1 != v173);
          }
        }
      }
      return (*(uint64_t (**)(uint64_t *, uint64_t, double))(v91 + 8))(v87, v89, v88);
    }
    char v39 = v159;
    double v40 = AnyColumn.assumingType<A>(_:)(v38, v38);
    uint64_t v41 = v168;
    uint64_t v42 = Column.count.getter(v168);
    if (v42 < 0) {
      BUG();
    }
    uint64_t v43 = v160;
    if (!v42) {
      return (*(uint64_t (**)(uint64_t *, uint64_t, double))(v43 + 8))(v39, v41, v40);
    }
    char v176 = (uint64_t *)v177[2];
    v177 += 4;
    uint64_t v44 = 0;
    uint64_t v169 = (uint64_t *)v42;
    while (1)
    {
      if (v44 == v42) {
        BUG();
      }
      uint64_t v175 = v44;
      Column.subscript.getter(v44, v41);
      uint64_t v45 = *(void **)&v157[0];
      if (!*(void *)&v157[0]) {
        uint64_t v45 = _swiftEmptyArrayStorage;
      }
      uint64_t v46 = Set.init(minimumCapacity:)(v45[2], &type metadata for String, &protocol witness table for String);
      uint64_t v158 = v46;
      uint64_t v47 = v45[2];
      if (v47)
      {
        *(void *)&long long v179 = v45;
        uint64_t v48 = v45 + 5;
        do
        {
          uint64_t v49 = *(v48 - 1);
          uint64_t v50 = *v48;
          swift_bridgeObjectRetain(*v48);
          specialized Set._Variant.insert(_:)((uint64_t *)v157, v49, v50);
          swift_bridgeObjectRelease(BYTE8(v157[0]));
          v48 += 2;
          --v47;
        }
        while (v47);
        swift_bridgeObjectRelease(v179);
        uint64_t v51 = v158;
      }
      else
      {
        uint64_t v52 = v46;
        swift_bridgeObjectRelease((_BYTE)v45);
        uint64_t v51 = v52;
      }
      unint64_t v53 = v175;
      if (v176) {
        break;
      }
LABEL_55:
      uint64_t v83 = (uint64_t *)(v53 + 1);
      swift_bridgeObjectRelease(v51);
      uint64_t v42 = (uint64_t)v169;
      BOOL v84 = v83 == v169;
      uint64_t v44 = (uint64_t)v83;
      uint64_t v41 = v168;
      uint64_t v43 = v160;
      char v39 = v159;
      if (v84) {
        return (*(uint64_t (**)(uint64_t *, uint64_t, double))(v43 + 8))(v39, v41, v40);
      }
    }
    uint64_t v178 = v51;
    uint64_t v54 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for FeatureMatrixBuilder<Float>);
    uint64_t v51 = v178;
    uint64_t v172 = v171 + *(int *)(v54 + 44);
    uint64_t v55 = 0;
    while (1)
    {
      unint64_t v56 = (unint64_t)v55 + v170;
      if (__OFADD__(v55, v170)) {
        BUG();
      }
      if (*(void *)(v51 + 16)) {
        break;
      }
      LODWORD(v179) = 0;
LABEL_51:
      uint64_t v55 = (uint64_t *)((char *)v55 + 1);
      uint64_t v81 = specialized DenseMatrix.subscript.modify(v157, v53, v56);
      *(void *)&double v40 = v179;
      *uint64_t v82 = v179;
      ((void (*)(_OWORD *, void))v81)(v157, 0);
      uint64_t v51 = v178;
      if (v55 == v176) {
        goto LABEL_55;
      }
    }
    uint64_t v174 = v55;
    uint64_t v57 = 2 * (void)v55;
    unint64_t v58 = v177[2 * (void)v55];
    uint64_t v59 = v177[v57 + 1];
    Hasher.init(_seed:)(*(void *)(v51 + 40));
    swift_bridgeObjectRetain(v59);
    unint64_t v180 = v58;
    *(void *)&long long v179 = v59;
    String.hash(into:)(v157, v58);
    Swift::Int v60 = Hasher._finalize()();
    uint64_t v61 = ~(-1 << *(unsigned char *)(v178 + 32));
    unint64_t v62 = v61 & v60;
    uint64_t v63 = *(void *)(v178 + 8 * ((v61 & (unint64_t)v60) >> 6) + 56);
    if (_bittest64(&v63, v62))
    {
      uint64_t v64 = *(void *)(v178 + 48);
      uint64_t v65 = *(void *)(v64 + 16 * v62);
      uint64_t v173 = v64;
      uint64_t v66 = *(void *)(v64 + 16 * v62 + 8);
      LOBYTE(v67) = v179;
      uint64_t v55 = v174;
      if (v65 == v180)
      {
        int v68 = 1065353216;
        if (v66 == (void)v179) {
          goto LABEL_50;
        }
      }
      char v69 = _stringCompareWithSmolCheck(_:_:expecting:)(v65, v66, v180, v179, 0);
      LOBYTE(v67) = v179;
      int v68 = 1065353216;
      if (v69) {
        goto LABEL_50;
      }
      unint64_t v70 = v61 & (v62 + 1);
      uint64_t v71 = *(void *)(v178 + 8 * (v70 >> 6) + 56);
      if (_bittest64(&v71, v70))
      {
        uint64_t v72 = *(void *)(v173 + 16 * v70);
        uint64_t v73 = *(void *)(v173 + 16 * v70 + 8);
        if (v72 == v180)
        {
          int v68 = 1065353216;
          if (v73 == (void)v179) {
            goto LABEL_50;
          }
        }
        char v74 = _stringCompareWithSmolCheck(_:_:expecting:)(v72, v73, v180, v179, 0);
        unint64_t v75 = v180;
        uint64_t v67 = v179;
        int v68 = 1065353216;
        if (v74) {
          goto LABEL_50;
        }
        unint64_t v76 = v61 & (v70 + 1);
        uint64_t v77 = *(void *)(v178 + 8 * (v76 >> 6) + 56);
        if (_bittest64(&v77, v76))
        {
          while (1)
          {
            uint64_t v78 = *(void *)(v173 + 16 * v76);
            uint64_t v79 = *(void *)(v173 + 16 * v76 + 8);
            if (v78 == v75 && v79 == v67)
            {
              int v68 = 1065353216;
              goto LABEL_50;
            }
            if (_stringCompareWithSmolCheck(_:_:expecting:)(v78, v79, v75, v67, 0)) {
              break;
            }
            unint64_t v76 = v61 & (v76 + 1);
            uint64_t v80 = *(void *)(v178 + 8 * (v76 >> 6) + 56);
            uint64_t v67 = v179;
            unint64_t v75 = v180;
            if (!_bittest64(&v80, v76)) {
              goto LABEL_47;
            }
          }
          int v68 = 1065353216;
          LOBYTE(v67) = v179;
          goto LABEL_50;
        }
      }
LABEL_47:
      int v68 = 0;
    }
    else
    {
      int v68 = 0;
      LOBYTE(v67) = v179;
      uint64_t v55 = v174;
    }
LABEL_50:
    LODWORD(v179) = v68;
    swift_bridgeObjectRelease(v67);
    unint64_t v53 = v175;
    goto LABEL_51;
  }
  double v23 = AnyColumn.assumingType<A>(_:)(&type metadata for String, &type metadata for String);
  uint64_t v175 = v17;
  uint64_t v24 = Column.count.getter(v17);
  if (v24 < 0) {
    BUG();
  }
  uint64_t v25 = v175;
  if (v24)
  {
    uint64_t v174 = (uint64_t *)v177[2];
    v177 += 5;
    uint64_t v26 = 0;
    char v176 = &v155;
    uint64_t v173 = v24;
    while (1)
    {
      if (v26 == v24) {
        BUG();
      }
      *(void *)&long long v179 = v26;
      if (v174) {
        break;
      }
LABEL_16:
      uint64_t v26 = v179 + 1;
      uint64_t v24 = v173;
      uint64_t v21 = v176;
      if ((void)v179 + 1 == v173) {
        return (*(uint64_t (**)(uint64_t *, uint64_t, double))(v156 + 8))(v21, v25, v23);
      }
    }
    uint64_t v27 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for FeatureMatrixBuilder<Float>);
    uint64_t v172 = v171 + *(int *)(v27 + 44);
    uint64_t v28 = v177;
    uint64_t v29 = 0;
    while (1)
    {
      unint64_t v30 = (unint64_t)v29 + v170;
      if (__OFADD__(v29, v170)) {
        BUG();
      }
      uint64_t v178 = (uint64_t)v29;
      unint64_t v180 = *(v28 - 1);
      unint64_t v31 = *v28;
      swift_bridgeObjectRetain(*v28);
      Column.subscript.getter(v179, v25);
      char v32 = BYTE8(v157[0]);
      if (!*((void *)&v157[0] + 1)) {
        break;
      }
      if (v157[0] == __PAIR128__(v31, v180))
      {
        swift_bridgeObjectRelease(v31);
        swift_bridgeObjectRelease(v32);
        int v33 = 1065353216;
      }
      else
      {
        LOBYTE(v180) = _stringCompareWithSmolCheck(_:_:expecting:)(v180, v31, *(void *)&v157[0], *((void *)&v157[0] + 1), 0);
        swift_bridgeObjectRelease(v31);
        swift_bridgeObjectRelease(v32);
        int v33 = 1065353216;
        if ((v180 & 1) == 0) {
          goto LABEL_14;
        }
      }
LABEL_15:
      LODWORD(v180) = v33;
      uint64_t v29 = (uint64_t *)(v178 + 1);
      uint64_t v34 = specialized DenseMatrix.subscript.modify(v157, v179, v30);
      *(void *)&double v23 = v180;
      *uint64_t v35 = v180;
      ((void (*)(_OWORD *, void))v34)(v157, 0);
      v28 += 2;
      uint64_t v25 = v175;
      if (v174 == v29) {
        goto LABEL_16;
      }
    }
    swift_bridgeObjectRelease(v31);
LABEL_14:
    int v33 = 0;
    goto LABEL_15;
  }
  return (*(uint64_t (**)(uint64_t *, uint64_t, double))(v156 + 8))(v21, v25, v23);
}

{
  uint64_t v3;
  uint64_t v4;
  int64_t v5;
  void *v6;
  void *v7;
  int64_t v8;
  void *v9;
  void *v10;
  int64_t v11;
  void *v12;
  void *v13;
  int64_t v14;
  void *v15;
  void *v16;
  uint64_t v17;
  int64_t v18;
  void *v19;
  void *v20;
  uint64_t *v21;
  uint64_t v22;
  double v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t *v28;
  uint64_t *v29;
  unint64_t v30;
  double v31;
  char v32;
  unint64_t v33;
  void (*v34)(uint64_t);
  void *v35;
  uint64_t v37;
  uint64_t v38;
  uint64_t *v39;
  double v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  void *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  unint64_t v53;
  uint64_t v54;
  uint64_t *v55;
  unint64_t v56;
  uint64_t v57;
  unint64_t v58;
  uint64_t v59;
  Swift::Int v60;
  uint64_t v61;
  unint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  char v69;
  unint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  char v74;
  unint64_t v75;
  unint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  void (*v81)(uint64_t);
  void *v82;
  uint64_t *v83;
  BOOL v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t *v87;
  double v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  unint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t *v95;
  uint64_t v96;
  unint64_t v97;
  uint64_t *v98;
  uint64_t v99;
  unint64_t v100;
  uint64_t v101;
  char v102;
  void (*v103)(uint64_t);
  void *v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  unint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t *v111;
  uint64_t v112;
  unint64_t v113;
  unint64_t v114;
  uint64_t v115;
  uint64_t v116;
  unint64_t v117;
  int v118;
  char v119;
  float v120;
  unint64_t v121;
  void (*v122)(uint64_t);
  void *v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  unint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t *v130;
  uint64_t *v131;
  unint64_t v132;
  uint64_t *v133;
  uint64_t v134;
  uint64_t v135;
  unint64_t v136;
  char v137;
  uint64_t v138;
  void (*v139)(uint64_t);
  void *v140;
  Swift::String v141;
  uint64_t v142;
  void *v143;
  char v144;
  uint64_t v145;
  uint64_t v146;
  void *v147;
  char v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  _OWORD v156[4];
  uint64_t v157;
  uint64_t *v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;
  uint64_t *v163;
  uint64_t v164;
  uint64_t *v165;
  uint64_t v166;
  uint64_t v167;
  uint64_t *v168;
  uint64_t v169;
  uint64_t v170;
  uint64_t v171;
  uint64_t v172;
  uint64_t *v173;
  uint64_t v174;
  uint64_t *v175;
  uint64_t *v176;
  uint64_t v177;
  long long v178;
  double v179;

  uint64_t v161 = v3;
  uint64_t v170 = v4;
  uint64_t v169 = a3;
  char v176 = a2;
  uint64_t v174 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Column<[String : Int]>);
  uint64_t v166 = *(void *)(v174 - 8);
  int64_t v5 = *(void *)(v166 + 64);
  unint64_t v6 = alloca(v5);
  uint64_t v7 = alloca(v5);
  uint64_t v165 = &v154;
  uint64_t v162 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Column<[String : Float]>);
  char v164 = *(void *)(v162 - 8);
  int64_t v8 = *(void *)(v164 + 64);
  char v9 = alloca(v8);
  uint64_t v10 = alloca(v8);
  uint64_t v163 = &v154;
  uint64_t v172 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Column<[String : Double]>);
  uint64_t v160 = *(void *)(v172 - 8);
  int64_t v11 = *(void *)(v160 + 64);
  uint64_t v12 = alloca(v11);
  unint64_t v13 = alloca(v11);
  uint64_t v168 = &v154;
  uint64_t v167 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Column<[String]>);
  long long v159 = *(void *)(v167 - 8);
  int64_t v14 = *(void *)(v159 + 64);
  uint64_t v15 = alloca(v14);
  BOOL v16 = alloca(v14);
  uint64_t v158 = &v154;
  uint64_t v17 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Column<String>);
  uint64_t v155 = *(void *)(v17 - 8);
  int64_t v18 = *(void *)(v155 + 64);
  uint64_t v19 = alloca(v18);
  unint64_t v20 = alloca(v18);
  uint64_t v21 = &v154;
  uint64_t v22 = AnyColumn.wrappedElementType.getter();
  if (!swift_dynamicCastMetatype(v22, &type metadata for String))
  {
    uint64_t v37 = AnyColumn.wrappedElementType.getter();
    uint64_t v38 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [String]);
    if (!swift_dynamicCastMetatype(v37, v38))
    {
      uint64_t v85 = AnyColumn.wrappedElementType.getter();
      uint64_t v86 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [String : Double]);
      if (swift_dynamicCastMetatype(v85, v86))
      {
        uint64_t v87 = v168;
        double v88 = AnyColumn.assumingType<A>(_:)(v86, v86);
        uint64_t v89 = v172;
        uint64_t v90 = Column.count.getter(v172);
        if (v90 < 0) {
          BUG();
        }
        uint64_t v91 = v160;
        if (v90)
        {
          uint64_t v171 = v176[2];
          v176 += 5;
          unint64_t v92 = 0;
          uint64_t v167 = v90;
          do
          {
            if (v92 == v90) {
              BUG();
            }
            uint64_t v175 = (uint64_t *)v92;
            Column.subscript.getter(v92, v89);
            uint64_t v93 = *(void *)&v156[0];
            if (!*(void *)&v156[0]) {
              uint64_t v93 = Dictionary.init(dictionaryLiteral:)(_swiftEmptyArrayStorage, &type metadata for String, &type metadata for Double, &protocol witness table for String);
            }
            if (v171)
            {
              uint64_t v94 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for FeatureMatrixBuilder<Double>);
              uint64_t v174 = v170 + *(int *)(v94 + 44);
              uint64_t v95 = v176;
              uint64_t v96 = 0;
              uint64_t v177 = v93;
              do
              {
                unint64_t v97 = v96 + v169;
                if (__OFADD__(v96, v169)) {
                  BUG();
                }
                if (*(void *)(v93 + 16))
                {
                  unint64_t v98 = v95;
                  uint64_t v99 = *v95;
                  uint64_t v173 = v98;
                  *(void *)&uint64_t v178 = *(v98 - 1);
                  swift_bridgeObjectRetain(v99);
                  *(void *)&long long v179 = v99;
                  uint64_t v100 = specialized __RawDictionaryStorage.find<A>(_:)(v178, v99);
                  unint64_t v101 = 0;
                  if (v102) {
                    unint64_t v101 = *(void *)(*(void *)(v177 + 56) + 8 * v100);
                  }
                  *(void *)&uint64_t v178 = v101;
                  swift_bridgeObjectRelease(LOBYTE(v179));
                  uint64_t v95 = v173;
                }
                else
                {
                  *(void *)&uint64_t v178 = 0;
                }
                ++v96;
                char v103 = specialized DenseMatrix.subscript.modify(v156, (unint64_t)v175, v97);
                double v88 = *(double *)&v178;
                *double v104 = v178;
                ((void (*)(_OWORD *, void))v103)(v156, 0);
                v95 += 2;
                uint64_t v93 = v177;
              }
              while (v171 != v96);
              swift_bridgeObjectRelease(v177);
              uint64_t v91 = v160;
              uint64_t v89 = v172;
              uint64_t v87 = v168;
            }
            else
            {
              swift_bridgeObjectRelease(v93);
            }
            unint64_t v92 = (unint64_t)v175 + 1;
            uint64_t v90 = v167;
          }
          while ((uint64_t *)((char *)v175 + 1) != (uint64_t *)v167);
        }
      }
      else
      {
        float v105 = AnyColumn.wrappedElementType.getter();
        unint64_t v106 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [String : Float]);
        if (swift_dynamicCastMetatype(v105, v106))
        {
          uint64_t v87 = v163;
          double v88 = AnyColumn.assumingType<A>(_:)(v106, v106);
          uint64_t v89 = v162;
          uint64_t v107 = Column.count.getter(v162);
          if (v107 < 0) {
            BUG();
          }
          uint64_t v91 = v164;
          if (v107)
          {
            uint64_t v171 = v176[2];
            v176 += 5;
            uint64_t v108 = 0;
            uint64_t v172 = v107;
            do
            {
              if (v108 == v107) {
                BUG();
              }
              uint64_t v175 = (uint64_t *)v108;
              Column.subscript.getter(v108, v89);
              uint64_t v109 = *(void *)&v156[0];
              if (!*(void *)&v156[0]) {
                uint64_t v109 = Dictionary.init(dictionaryLiteral:)(_swiftEmptyArrayStorage, &type metadata for String, &type metadata for Float, &protocol witness table for String);
              }
              if (v171)
              {
                uint64_t v110 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for FeatureMatrixBuilder<Double>);
                uint64_t v174 = v170 + *(int *)(v110 + 44);
                unint64_t v111 = v176;
                uint64_t v112 = 0;
                uint64_t v177 = v109;
                do
                {
                  uint64_t v113 = v112 + v169;
                  if (__OFADD__(v112, v169)) {
                    BUG();
                  }
                  if (*(void *)(v109 + 16))
                  {
                    uint64_t v114 = (unint64_t)v111;
                    uint64_t v115 = *v111;
                    *(void *)&long long v179 = v114;
                    *(void *)&uint64_t v178 = *(void *)(v114 - 8);
                    swift_bridgeObjectRetain(v115);
                    unint64_t v116 = v178;
                    *(void *)&uint64_t v178 = v115;
                    uint64_t v117 = specialized __RawDictionaryStorage.find<A>(_:)(v116, v115);
                    uint64_t v118 = 0;
                    if (v119) {
                      uint64_t v118 = *(_DWORD *)(*(void *)(v177 + 56) + 4 * v117);
                    }
                    LODWORD(v173) = v118;
                    swift_bridgeObjectRelease(v178);
                    int v120 = *(float *)&v173;
                    char v121 = (unint64_t)v175;
                    unint64_t v111 = *(uint64_t **)&v179;
                  }
                  else
                  {
                    int v120 = 0.0;
                    char v121 = (unint64_t)v175;
                  }
                  ++v112;
                  *(double *)&uint64_t v178 = v120;
                  unint64_t v122 = specialized DenseMatrix.subscript.modify(v156, v121, v113);
                  double v88 = *(double *)&v178;
                  char *v123 = v178;
                  ((void (*)(_OWORD *, void))v122)(v156, 0);
                  v111 += 2;
                  uint64_t v109 = v177;
                }
                while (v171 != v112);
                swift_bridgeObjectRelease(v177);
                uint64_t v91 = v164;
                uint64_t v89 = v162;
                uint64_t v87 = v163;
              }
              else
              {
                swift_bridgeObjectRelease(v109);
              }
              uint64_t v108 = (unint64_t)v175 + 1;
              uint64_t v107 = v172;
            }
            while ((uint64_t *)((char *)v175 + 1) != (uint64_t *)v172);
          }
        }
        else
        {
          uint64_t v124 = AnyColumn.wrappedElementType.getter();
          uint64_t v125 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [String : Int]);
          if (!swift_dynamicCastMetatype(v124, v125))
          {
            *(void *)&v156[0] = 0;
            *((void *)&v156[0] + 1) = 0xE000000000000000;
            _StringGuts.grow(_:)(52);
            v141._char object = "', but got shape " + 0x8000000000000000;
            v141._uint64_t countAndFlagsBits = 0xD000000000000024;
            String.append(_:)(v141);
            Swift::String v142 = AnyColumn.name.getter();
            uint64_t v144 = (char)v143;
            v141._uint64_t countAndFlagsBits = v142;
            v141._char object = v143;
            String.append(_:)(v141);
            swift_bridgeObjectRelease(v144);
            v141._uint64_t countAndFlagsBits = 0x6720747562202C27;
            v141._char object = (void *)0xEB0000000020746FLL;
            String.append(_:)(v141);
            char v145 = AnyColumn.wrappedElementType.getter();
            uint64_t v146 = _typeName(_:qualified:)(v145, 0);
            uint64_t v148 = (char)v147;
            v141._uint64_t countAndFlagsBits = v146;
            v141._char object = v147;
            String.append(_:)(v141);
            swift_bridgeObjectRelease(v148);
            v141._uint64_t countAndFlagsBits = 46;
            v141._char object = (void *)0xE100000000000000;
            String.append(_:)(v141);
            uint64_t v178 = v156[0];
            v141._char object = (void *)lazy protocol witness table accessor for type MLCreateError and conformance MLCreateError();
            char v149 = swift_allocError(&type metadata for MLCreateError, v141._object, 0, 0);
            *(_OWORD *)uint64_t v150 = v178;
            *(_OWORD *)(v150 + 16) = 0;
            *(_OWORD *)(v150 + 32) = 0;
            *(unsigned char *)(v150 + 48) = 0;
            uint64_t v161 = v149;
            return swift_willThrow(&type metadata for MLCreateError, v141._object, v150, v151, v152, v153);
          }
          uint64_t v87 = v165;
          double v88 = AnyColumn.assumingType<A>(_:)(v125, v125);
          uint64_t v89 = v174;
          uint64_t v126 = Column.count.getter(v174);
          if (v126 < 0) {
            BUG();
          }
          uint64_t v91 = v166;
          if (v126)
          {
            uint64_t v173 = (uint64_t *)v176[2];
            v176 += 5;
            uint64_t v127 = 0;
            uint64_t v172 = v126;
            do
            {
              if (v127 == v126) {
                BUG();
              }
              *(void *)&long long v179 = v127;
              Column.subscript.getter(v127, v89);
              unint64_t v128 = *(void *)&v156[0];
              if (!*(void *)&v156[0]) {
                unint64_t v128 = Dictionary.init(dictionaryLiteral:)(_swiftEmptyArrayStorage, &type metadata for String, &type metadata for Int, &protocol witness table for String);
              }
              if (v173)
              {
                uint64_t v129 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for FeatureMatrixBuilder<Double>);
                uint64_t v171 = v170 + *(int *)(v129 + 44);
                uint64_t v130 = v176;
                unint64_t v131 = 0;
                uint64_t v175 = (uint64_t *)v128;
                do
                {
                  uint64_t v132 = (unint64_t)v131 + v169;
                  if (__OFADD__(v131, v169)) {
                    BUG();
                  }
                  if (*(void *)(v128 + 16))
                  {
                    unint64_t v133 = v130;
                    uint64_t v134 = *v130;
                    uint64_t v177 = (uint64_t)v133;
                    *(void *)&uint64_t v178 = *(v133 - 1);
                    swift_bridgeObjectRetain(v134);
                    uint64_t v135 = v178;
                    *(void *)&uint64_t v178 = v134;
                    uint64_t v136 = specialized __RawDictionaryStorage.find<A>(_:)(v135, v134);
                    if (v137) {
                      char v138 = *(void *)(*(void *)(v128 + 56) + 8 * v136);
                    }
                    else {
                      LODWORD(v138) = 0;
                    }
                    swift_bridgeObjectRelease(v178);
                    uint64_t v130 = (uint64_t *)v177;
                  }
                  else
                  {
                    LODWORD(v138) = 0;
                  }
                  unint64_t v131 = (uint64_t *)((char *)v131 + 1);
                  *(double *)&uint64_t v178 = (double)(int)v138;
                  uint64_t v139 = specialized DenseMatrix.subscript.modify(v156, *(unint64_t *)&v179, v132);
                  double v88 = *(double *)&v178;
                  uint64_t *v140 = v178;
                  ((void (*)(_OWORD *, void))v139)(v156, 0);
                  v130 += 2;
                  unint64_t v128 = (uint64_t)v175;
                }
                while (v173 != v131);
                swift_bridgeObjectRelease((_BYTE)v175);
                uint64_t v91 = v166;
                uint64_t v89 = v174;
                uint64_t v87 = v165;
              }
              else
              {
                swift_bridgeObjectRelease(v128);
              }
              uint64_t v127 = *(void *)&v179 + 1;
              uint64_t v126 = v172;
            }
            while (*(void *)&v179 + 1 != v172);
          }
        }
      }
      return (*(uint64_t (**)(uint64_t *, uint64_t, double))(v91 + 8))(v87, v89, v88);
    }
    char v39 = v158;
    double v40 = AnyColumn.assumingType<A>(_:)(v38, v38);
    uint64_t v41 = v167;
    uint64_t v42 = Column.count.getter(v167);
    if (v42 < 0) {
      BUG();
    }
    uint64_t v43 = v159;
    if (!v42) {
      return (*(uint64_t (**)(uint64_t *, uint64_t, double))(v43 + 8))(v39, v41, v40);
    }
    uint64_t v175 = (uint64_t *)v176[2];
    v176 += 4;
    uint64_t v44 = 0;
    uint64_t v168 = (uint64_t *)v42;
    while (1)
    {
      if (v44 == v42) {
        BUG();
      }
      uint64_t v174 = v44;
      Column.subscript.getter(v44, v41);
      uint64_t v45 = *(void **)&v156[0];
      if (!*(void *)&v156[0]) {
        uint64_t v45 = _swiftEmptyArrayStorage;
      }
      uint64_t v46 = Set.init(minimumCapacity:)(v45[2], &type metadata for String, &protocol witness table for String);
      uint64_t v157 = v46;
      uint64_t v47 = v45[2];
      if (v47)
      {
        *(void *)&uint64_t v178 = v45;
        uint64_t v48 = v45 + 5;
        do
        {
          uint64_t v49 = *(v48 - 1);
          uint64_t v50 = *v48;
          swift_bridgeObjectRetain(*v48);
          specialized Set._Variant.insert(_:)((uint64_t *)v156, v49, v50);
          swift_bridgeObjectRelease(BYTE8(v156[0]));
          v48 += 2;
          --v47;
        }
        while (v47);
        swift_bridgeObjectRelease(v178);
        uint64_t v51 = v157;
      }
      else
      {
        uint64_t v52 = v46;
        swift_bridgeObjectRelease((_BYTE)v45);
        uint64_t v51 = v52;
      }
      unint64_t v53 = v174;
      if (v175) {
        break;
      }
LABEL_55:
      uint64_t v83 = (uint64_t *)(v53 + 1);
      swift_bridgeObjectRelease(v51);
      uint64_t v42 = (uint64_t)v168;
      BOOL v84 = v83 == v168;
      uint64_t v44 = (uint64_t)v83;
      uint64_t v41 = v167;
      uint64_t v43 = v159;
      char v39 = v158;
      if (v84) {
        return (*(uint64_t (**)(uint64_t *, uint64_t, double))(v43 + 8))(v39, v41, v40);
      }
    }
    uint64_t v177 = v51;
    uint64_t v54 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for FeatureMatrixBuilder<Double>);
    uint64_t v51 = v177;
    uint64_t v171 = v170 + *(int *)(v54 + 44);
    uint64_t v55 = 0;
    while (1)
    {
      unint64_t v56 = (unint64_t)v55 + v169;
      if (__OFADD__(v55, v169)) {
        BUG();
      }
      if (*(void *)(v51 + 16)) {
        break;
      }
      *(void *)&uint64_t v178 = 0;
LABEL_51:
      uint64_t v55 = (uint64_t *)((char *)v55 + 1);
      uint64_t v81 = specialized DenseMatrix.subscript.modify(v156, v53, v56);
      double v40 = *(double *)&v178;
      *uint64_t v82 = v178;
      ((void (*)(_OWORD *, void))v81)(v156, 0);
      uint64_t v51 = v177;
      if (v55 == v175) {
        goto LABEL_55;
      }
    }
    uint64_t v173 = v55;
    uint64_t v57 = 2 * (void)v55;
    unint64_t v58 = v176[2 * (void)v55];
    uint64_t v59 = v176[v57 + 1];
    Hasher.init(_seed:)(*(void *)(v51 + 40));
    swift_bridgeObjectRetain(v59);
    *(void *)&long long v179 = v58;
    *(void *)&uint64_t v178 = v59;
    String.hash(into:)(v156, v58);
    Swift::Int v60 = Hasher._finalize()();
    uint64_t v61 = ~(-1 << *(unsigned char *)(v177 + 32));
    unint64_t v62 = v61 & v60;
    uint64_t v63 = *(void *)(v177 + 8 * ((v61 & (unint64_t)v60) >> 6) + 56);
    if (_bittest64(&v63, v62))
    {
      uint64_t v64 = *(void *)(v177 + 48);
      uint64_t v65 = *(void *)(v64 + 16 * v62);
      uint64_t v172 = v64;
      uint64_t v66 = *(void *)(v64 + 16 * v62 + 8);
      LOBYTE(v67) = v178;
      uint64_t v55 = v173;
      if (v65 == *(void *)&v179)
      {
        int v68 = 0x3FF0000000000000;
        if (v66 == (void)v178) {
          goto LABEL_50;
        }
      }
      char v69 = _stringCompareWithSmolCheck(_:_:expecting:)(v65, v66, *(void *)&v179, v178, 0);
      LOBYTE(v67) = v178;
      int v68 = 0x3FF0000000000000;
      if (v69) {
        goto LABEL_50;
      }
      unint64_t v70 = v61 & (v62 + 1);
      uint64_t v71 = *(void *)(v177 + 8 * (v70 >> 6) + 56);
      if (_bittest64(&v71, v70))
      {
        uint64_t v72 = *(void *)(v172 + 16 * v70);
        uint64_t v73 = *(void *)(v172 + 16 * v70 + 8);
        if (v72 == *(void *)&v179)
        {
          int v68 = 0x3FF0000000000000;
          if (v73 == (void)v178) {
            goto LABEL_50;
          }
        }
        char v74 = _stringCompareWithSmolCheck(_:_:expecting:)(v72, v73, *(void *)&v179, v178, 0);
        unint64_t v75 = *(void *)&v179;
        uint64_t v67 = v178;
        int v68 = 0x3FF0000000000000;
        if (v74) {
          goto LABEL_50;
        }
        unint64_t v76 = v61 & (v70 + 1);
        uint64_t v77 = *(void *)(v177 + 8 * (v76 >> 6) + 56);
        if (_bittest64(&v77, v76))
        {
          while (1)
          {
            uint64_t v78 = *(void *)(v172 + 16 * v76);
            uint64_t v79 = *(void *)(v172 + 16 * v76 + 8);
            if (v78 == v75 && v79 == v67)
            {
              int v68 = 0x3FF0000000000000;
              goto LABEL_50;
            }
            if (_stringCompareWithSmolCheck(_:_:expecting:)(v78, v79, v75, v67, 0)) {
              break;
            }
            unint64_t v76 = v61 & (v76 + 1);
            uint64_t v80 = *(void *)(v177 + 8 * (v76 >> 6) + 56);
            uint64_t v67 = v178;
            unint64_t v75 = *(void *)&v179;
            if (!_bittest64(&v80, v76)) {
              goto LABEL_47;
            }
          }
          int v68 = 0x3FF0000000000000;
          LOBYTE(v67) = v178;
          goto LABEL_50;
        }
      }
LABEL_47:
      int v68 = 0;
    }
    else
    {
      int v68 = 0;
      LOBYTE(v67) = v178;
      uint64_t v55 = v173;
    }
LABEL_50:
    *(void *)&uint64_t v178 = v68;
    swift_bridgeObjectRelease(v67);
    unint64_t v53 = v174;
    goto LABEL_51;
  }
  double v23 = AnyColumn.assumingType<A>(_:)(&type metadata for String, &type metadata for String);
  uint64_t v174 = v17;
  uint64_t v24 = Column.count.getter(v17);
  if (v24 < 0) {
    BUG();
  }
  uint64_t v25 = v174;
  if (v24)
  {
    uint64_t v173 = (uint64_t *)v176[2];
    v176 += 5;
    uint64_t v26 = 0;
    uint64_t v175 = &v154;
    uint64_t v172 = v24;
    while (1)
    {
      if (v26 == v24) {
        BUG();
      }
      *(void *)&uint64_t v178 = v26;
      if (v173) {
        break;
      }
LABEL_16:
      uint64_t v26 = v178 + 1;
      uint64_t v24 = v172;
      uint64_t v21 = v175;
      if ((void)v178 + 1 == v172) {
        return (*(uint64_t (**)(uint64_t *, uint64_t, double))(v155 + 8))(v21, v25, v23);
      }
    }
    uint64_t v27 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for FeatureMatrixBuilder<Double>);
    uint64_t v171 = v170 + *(int *)(v27 + 44);
    uint64_t v28 = v176;
    uint64_t v29 = 0;
    while (1)
    {
      unint64_t v30 = (unint64_t)v29 + v169;
      if (__OFADD__(v29, v169)) {
        BUG();
      }
      uint64_t v177 = (uint64_t)v29;
      *(void *)&long long v179 = *(v28 - 1);
      *(void *)&unint64_t v31 = *v28;
      swift_bridgeObjectRetain(*v28);
      Column.subscript.getter(v178, v25);
      char v32 = BYTE8(v156[0]);
      if (!*((void *)&v156[0] + 1)) {
        break;
      }
      if (v156[0] == __PAIR128__(*(unint64_t *)&v31, *(unint64_t *)&v179))
      {
        swift_bridgeObjectRelease(LOBYTE(v31));
        swift_bridgeObjectRelease(v32);
        int v33 = 0x3FF0000000000000;
      }
      else
      {
        LOBYTE(v179) = _stringCompareWithSmolCheck(_:_:expecting:)(*(void *)&v179, *(void *)&v31, *(void *)&v156[0], *((void *)&v156[0] + 1), 0);
        swift_bridgeObjectRelease(LOBYTE(v31));
        swift_bridgeObjectRelease(v32);
        int v33 = 0x3FF0000000000000;
        if ((LOBYTE(v179) & 1) == 0) {
          goto LABEL_14;
        }
      }
LABEL_15:
      *(void *)&long long v179 = v33;
      uint64_t v29 = (uint64_t *)(v177 + 1);
      uint64_t v34 = specialized DenseMatrix.subscript.modify(v156, v178, v30);
      double v23 = v179;
      *uint64_t v35 = *(void *)&v179;
      ((void (*)(_OWORD *, void))v34)(v156, 0);
      v28 += 2;
      uint64_t v25 = v174;
      if (v173 == v29) {
        goto LABEL_16;
      }
    }
    swift_bridgeObjectRelease(LOBYTE(v31));
LABEL_14:
    int v33 = 0;
    goto LABEL_15;
  }
  return (*(uint64_t (**)(uint64_t *, uint64_t, double))(v155 + 8))(v21, v25, v23);
}

uint64_t specialized FeatureMatrixBuilder.fillDictionary(from:descriptors:column:)(uint64_t a1, uint64_t a2, uint64_t a3, void (*a4)(_OWORD *, uint64_t, uint64_t, uint64_t, void, uint64_t, uint64_t))
{
  char v74 = a4;
  *(void *)&long long v70 = v4;
  uint64_t v71 = v5;
  uint64_t v72 = a3;
  uint64_t v73 = a2;
  uint64_t v68 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Column<[String : Any?]>);
  uint64_t v67 = *(void *)(v68 - 8);
  int64_t v6 = *(void *)(v67 + 64);
  uint64_t v7 = alloca(v6);
  int64_t v8 = alloca(v6);
  char v69 = &v53;
  uint64_t v65 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Column<[String : Float]>);
  uint64_t v64 = *(void *)(v65 - 8);
  int64_t v9 = *(void *)(v64 + 64);
  uint64_t v10 = alloca(v9);
  int64_t v11 = alloca(v9);
  uint64_t v66 = &v53;
  uint64_t v62 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Column<[String : Double]>);
  uint64_t v61 = *(void *)(v62 - 8);
  int64_t v12 = *(void *)(v61 + 64);
  unint64_t v13 = alloca(v12);
  int64_t v14 = alloca(v12);
  uint64_t v63 = &v53;
  uint64_t v59 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Column<[String : Int32]>);
  uint64_t v58 = *(void *)(v59 - 8);
  int64_t v15 = *(void *)(v58 + 64);
  BOOL v16 = alloca(v15);
  uint64_t v17 = alloca(v15);
  Swift::Int v60 = &v53;
  uint64_t v57 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Column<[String : UInt8]>);
  uint64_t v56 = *(void *)(v57 - 8);
  int64_t v18 = *(void *)(v56 + 64);
  uint64_t v19 = alloca(v18);
  unint64_t v20 = alloca(v18);
  uint64_t v55 = &v53;
  uint64_t v75 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Column<[String : Int]>);
  uint64_t v54 = *(void *)(v75 - 8);
  int64_t v21 = *(void *)(v54 + 64);
  uint64_t v22 = alloca(v21);
  double v23 = alloca(v21);
  uint64_t v24 = AnyColumn.wrappedElementType.getter();
  uint64_t v25 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [String : Int]);
  if (swift_dynamicCastMetatype(v24, v25))
  {
    double v26 = AnyColumn.assumingType<A>(_:)(v25, v25);
    specialized FeatureMatrixBuilder.fillDictionary<A>(from:descriptors:column:)((uint64_t)&v53, v73, v72, v74);
    uint64_t v27 = &v53;
    uint64_t v28 = v75;
    uint64_t v29 = v54;
    return (*(uint64_t (**)(long long *, uint64_t, double))(v29 + 8))(v27, v28, v26);
  }
  uint64_t v30 = (uint64_t)v55;
  uint64_t v75 = a1;
  uint64_t v31 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [String : UInt8]);
  if (swift_dynamicCastMetatype(v24, v31))
  {
    double v26 = AnyColumn.assumingType<A>(_:)(v31, v31);
    specialized FeatureMatrixBuilder.fillDictionary<A>(from:descriptors:column:)(v30, v73, v72, v74);
    uint64_t v27 = (long long *)v30;
    uint64_t v28 = v57;
    uint64_t v29 = v56;
    return (*(uint64_t (**)(long long *, uint64_t, double))(v29 + 8))(v27, v28, v26);
  }
  uint64_t v32 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [String : Int32]);
  if (swift_dynamicCastMetatype(v24, v32))
  {
    uint64_t v33 = (uint64_t)v60;
    double v26 = AnyColumn.assumingType<A>(_:)(v32, v32);
    specialized FeatureMatrixBuilder.fillDictionary<A>(from:descriptors:column:)(v33, v73, v72, v74);
    uint64_t v27 = (long long *)v33;
    uint64_t v28 = v59;
    uint64_t v29 = v58;
    return (*(uint64_t (**)(long long *, uint64_t, double))(v29 + 8))(v27, v28, v26);
  }
  uint64_t v34 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [String : Double]);
  if (swift_dynamicCastMetatype(v24, v34))
  {
    uint64_t v35 = (uint64_t)v63;
    double v26 = AnyColumn.assumingType<A>(_:)(v34, v34);
    specialized FeatureMatrixBuilder.fillDictionary<A>(from:descriptors:column:)(v35, v73, v72, v74);
    uint64_t v27 = (long long *)v35;
    uint64_t v28 = v62;
    uint64_t v29 = v61;
    return (*(uint64_t (**)(long long *, uint64_t, double))(v29 + 8))(v27, v28, v26);
  }
  uint64_t v36 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [String : Float]);
  if (swift_dynamicCastMetatype(v24, v36))
  {
    uint64_t v37 = (uint64_t)v66;
    double v26 = AnyColumn.assumingType<A>(_:)(v36, v36);
    specialized FeatureMatrixBuilder.fillDictionary<A>(from:descriptors:column:)(v37, v73, v72, v74);
    uint64_t v27 = (long long *)v37;
    uint64_t v28 = v65;
    uint64_t v29 = v64;
    return (*(uint64_t (**)(long long *, uint64_t, double))(v29 + 8))(v27, v28, v26);
  }
  uint64_t v38 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [String : Any?]);
  if (swift_dynamicCastMetatype(v24, v38))
  {
    uint64_t v39 = (uint64_t)v69;
    double v26 = AnyColumn.assumingType<A>(_:)(v38, v38);
    specialized FeatureMatrixBuilder.fillDictionary<A>(from:descriptors:column:)(v39, v73, v72, v74);
    uint64_t v27 = (long long *)v39;
    uint64_t v28 = v68;
    uint64_t v29 = v67;
    return (*(uint64_t (**)(long long *, uint64_t, double))(v29 + 8))(v27, v28, v26);
  }
  *(void *)&long long v53 = 0;
  *((void *)&v53 + 1) = 0xE000000000000000;
  _StringGuts.grow(_:)(56);
  v41._char object = "values for feature '" + 0x8000000000000000;
  v41._uint64_t countAndFlagsBits = 0xD000000000000028;
  String.append(_:)(v41);
  uint64_t v42 = AnyColumn.name.getter();
  char v44 = (char)v43;
  v41._uint64_t countAndFlagsBits = v42;
  v41._char object = v43;
  String.append(_:)(v41);
  swift_bridgeObjectRelease(v44);
  v41._uint64_t countAndFlagsBits = 0x6720747562202C27;
  v41._char object = (void *)0xEB0000000020746FLL;
  String.append(_:)(v41);
  uint64_t v45 = AnyColumn.wrappedElementType.getter();
  uint64_t v46 = _typeName(_:qualified:)(v45, 0);
  char v48 = (char)v47;
  v41._uint64_t countAndFlagsBits = v46;
  v41._char object = v47;
  String.append(_:)(v41);
  swift_bridgeObjectRelease(v48);
  v41._uint64_t countAndFlagsBits = 46;
  v41._char object = (void *)0xE100000000000000;
  String.append(_:)(v41);
  long long v70 = v53;
  v41._char object = (void *)lazy protocol witness table accessor for type MLCreateError and conformance MLCreateError();
  swift_allocError(&type metadata for MLCreateError, v41._object, 0, 0);
  *(_OWORD *)uint64_t v49 = v70;
  *(_OWORD *)(v49 + 16) = 0;
  *(_OWORD *)(v49 + 32) = 0;
  *(unsigned char *)(v49 + 48) = 0;
  return swift_willThrow(&type metadata for MLCreateError, v41._object, v49, v50, v51, v52);
}

uint64_t specialized FeatureMatrixBuilder.fillInteger(from:column:)(uint64_t *a1, uint64_t a2, void *a3, uint64_t a4, void *a5)
{
  uint64_t v85 = a5;
  v86._uint64_t countAndFlagsBits = a4;
  v86._char object = a3;
  uint64_t v90 = v5;
  uint64_t v87 = v6;
  *(void *)&long long v89 = a2;
  uint64_t v83 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Column<NSNumber>);
  uint64_t v82 = *(void *)(v83 - 8);
  int64_t v7 = *(void *)(v82 + 64);
  int64_t v8 = alloca(v7);
  int64_t v9 = alloca(v7);
  BOOL v84 = &v63;
  uint64_t v80 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Column<Double>);
  uint64_t v79 = *(void *)(v80 - 8);
  int64_t v10 = *(void *)(v79 + 64);
  int64_t v11 = alloca(v10);
  int64_t v12 = alloca(v10);
  uint64_t v81 = &v63;
  uint64_t v77 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Column<Float>);
  uint64_t v76 = *(void *)(v77 - 8);
  int64_t v13 = *(void *)(v76 + 64);
  int64_t v14 = alloca(v13);
  int64_t v15 = alloca(v13);
  uint64_t v78 = &v63;
  uint64_t v74 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Column<Int64>);
  uint64_t v73 = *(void *)(v74 - 8);
  int64_t v16 = *(void *)(v73 + 64);
  uint64_t v17 = alloca(v16);
  int64_t v18 = alloca(v16);
  uint64_t v75 = &v63;
  uint64_t v71 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Column<Int32>);
  uint64_t v70 = *(void *)(v71 - 8);
  int64_t v19 = *(void *)(v70 + 64);
  unint64_t v20 = alloca(v19);
  int64_t v21 = alloca(v19);
  uint64_t v72 = &v63;
  uint64_t v68 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Column<Int16>);
  uint64_t v67 = *(void *)(v68 - 8);
  int64_t v22 = *(void *)(v67 + 64);
  double v23 = alloca(v22);
  uint64_t v24 = alloca(v22);
  char v69 = &v63;
  uint64_t v66 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Column<Int8>);
  uint64_t v65 = *(void *)(v66 - 8);
  int64_t v25 = *(void *)(v65 + 64);
  double v26 = alloca(v25);
  uint64_t v27 = alloca(v25);
  uint64_t v91 = &v63;
  uint64_t v28 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Column<Int>);
  uint64_t v29 = *(void *)(v28 - 8);
  int64_t v30 = *(void *)(v29 + 64);
  uint64_t v31 = alloca(v30);
  uint64_t v32 = alloca(v30);
  uint64_t v88 = AnyColumn.wrappedElementType.getter();
  if (swift_dynamicCastMetatype(v88, &type metadata for Int))
  {
    double v33 = AnyColumn.assumingType<A>(_:)(&type metadata for Int, &type metadata for Int);
    specialized FeatureMatrixBuilder.fillInteger<A>(from:column:)((uint64_t)&v63, v89, &demangling cache variable for type metadata for Column<Int>);
    return (*(uint64_t (**)(uint64_t *, uint64_t, double))(v29 + 8))(&v63, v28, v33);
  }
  uint64_t v35 = (uint64_t)v91;
  uint64_t v36 = v88;
  if (swift_dynamicCastMetatype(v88, &type metadata for Int8))
  {
    double v37 = AnyColumn.assumingType<A>(_:)(&type metadata for Int8, &type metadata for Int8);
    specialized FeatureMatrixBuilder.fillInteger<A>(from:column:)(v35, v89);
    uint64_t v38 = v35;
    uint64_t v39 = v66;
    uint64_t v40 = v65;
    return (*(uint64_t (**)(uint64_t, uint64_t, double))(v40 + 8))(v38, v39, v37);
  }
  uint64_t v41 = swift_dynamicCastMetatype(v36, &type metadata for Int16);
  unint64_t v42 = v89;
  if (v41)
  {
    uint64_t v43 = (uint64_t)v69;
    double v37 = AnyColumn.assumingType<A>(_:)(&type metadata for Int16, &type metadata for Int16);
    specialized FeatureMatrixBuilder.fillInteger<A>(from:column:)(v43, v42);
    uint64_t v38 = v43;
    uint64_t v39 = v68;
    uint64_t v40 = v67;
    return (*(uint64_t (**)(uint64_t, uint64_t, double))(v40 + 8))(v38, v39, v37);
  }
  uint64_t v91 = a1;
  uint64_t v44 = v88;
  if (swift_dynamicCastMetatype(v88, &type metadata for Int32))
  {
    uint64_t v45 = (uint64_t)v72;
    double v37 = AnyColumn.assumingType<A>(_:)(&type metadata for Int32, &type metadata for Int32);
    specialized FeatureMatrixBuilder.fillInteger<A>(from:column:)(v45, v42);
    uint64_t v38 = v45;
    uint64_t v39 = v71;
    uint64_t v40 = v70;
    return (*(uint64_t (**)(uint64_t, uint64_t, double))(v40 + 8))(v38, v39, v37);
  }
  if (swift_dynamicCastMetatype(v44, &type metadata for Int64))
  {
    uint64_t v46 = (uint64_t)v75;
    double v37 = AnyColumn.assumingType<A>(_:)(&type metadata for Int64, &type metadata for Int64);
    specialized FeatureMatrixBuilder.fillInteger<A>(from:column:)(v46, v42, &demangling cache variable for type metadata for Column<Int64>);
    uint64_t v38 = v46;
    uint64_t v39 = v74;
    uint64_t v40 = v73;
    return (*(uint64_t (**)(uint64_t, uint64_t, double))(v40 + 8))(v38, v39, v37);
  }
  if (swift_dynamicCastMetatype(v44, &type metadata for Float))
  {
    uint64_t v47 = (uint64_t)v78;
    double v37 = AnyColumn.assumingType<A>(_:)(&type metadata for Float, &type metadata for Float);
    specialized FeatureMatrixBuilder.fillInteger<A>(from:column:)(v47, v42);
    uint64_t v38 = v47;
    uint64_t v39 = v77;
    uint64_t v40 = v76;
    return (*(uint64_t (**)(uint64_t, uint64_t, double))(v40 + 8))(v38, v39, v37);
  }
  if (swift_dynamicCastMetatype(v44, &type metadata for Double))
  {
    uint64_t v48 = (uint64_t)v81;
    double v37 = AnyColumn.assumingType<A>(_:)(&type metadata for Double, &type metadata for Double);
    specialized FeatureMatrixBuilder.fillInteger<A>(from:column:)(v48, v42);
    uint64_t v38 = v48;
    uint64_t v39 = v80;
    uint64_t v40 = v79;
    return (*(uint64_t (**)(uint64_t, uint64_t, double))(v40 + 8))(v38, v39, v37);
  }
  uint64_t v49 = type metadata accessor for OS_os_log(0, &lazy cache variable for type metadata for NSNumber, NSNumber_ptr);
  if (swift_dynamicCastMetatype(v44, v49))
  {
    uint64_t v50 = (uint64_t)v84;
    double v37 = AnyColumn.assumingType<A>(_:)(v49, v49);
    specialized FeatureMatrixBuilder.fillInteger(from:column:)(v50, v89, *(float *)&v37);
    uint64_t v38 = v50;
    uint64_t v39 = v83;
    uint64_t v40 = v82;
    return (*(uint64_t (**)(uint64_t, uint64_t, double))(v40 + 8))(v38, v39, v37);
  }
  *(void *)&long long v64 = 0;
  *((void *)&v64 + 1) = 0xE000000000000000;
  _StringGuts.grow(_:)((Swift::Int)v86._object);
  v51._uint64_t countAndFlagsBits = v86._countAndFlagsBits;
  v51._char object = v85;
  String.append(_:)(v51);
  uint64_t v52 = AnyColumn.name.getter();
  char v54 = (char)v53;
  v51._uint64_t countAndFlagsBits = v52;
  v51._char object = v53;
  String.append(_:)(v51);
  swift_bridgeObjectRelease(v54);
  v51._uint64_t countAndFlagsBits = 0x6720747562202C27;
  v51._char object = (void *)0xEB0000000020746FLL;
  String.append(_:)(v51);
  uint64_t v55 = AnyColumn.wrappedElementType.getter();
  uint64_t v56 = _typeName(_:qualified:)(v55, 0);
  char v58 = (char)v57;
  v51._uint64_t countAndFlagsBits = v56;
  v51._char object = v57;
  String.append(_:)(v51);
  swift_bridgeObjectRelease(v58);
  v51._uint64_t countAndFlagsBits = 46;
  v51._char object = (void *)0xE100000000000000;
  String.append(_:)(v51);
  long long v89 = v64;
  v51._char object = (void *)lazy protocol witness table accessor for type MLCreateError and conformance MLCreateError();
  swift_allocError(&type metadata for MLCreateError, v51._object, 0, 0);
  *(_OWORD *)uint64_t v59 = v89;
  *(_OWORD *)(v59 + 16) = 0;
  *(_OWORD *)(v59 + 32) = 0;
  *(unsigned char *)(v59 + 48) = 0;
  return swift_willThrow(&type metadata for MLCreateError, v51._object, v59, v60, v61, v62);
}

{
  uint64_t v5;
  uint64_t v6;
  int64_t v7;
  void *v8;
  void *v9;
  int64_t v10;
  void *v11;
  void *v12;
  int64_t v13;
  void *v14;
  void *v15;
  int64_t v16;
  void *v17;
  void *v18;
  int64_t v19;
  void *v20;
  void *v21;
  int64_t v22;
  void *v23;
  void *v24;
  int64_t v25;
  void *v26;
  void *v27;
  uint64_t v28;
  uint64_t v29;
  int64_t v30;
  void *v31;
  void *v32;
  double v33;
  uint64_t v35;
  uint64_t v36;
  double v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  unint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  Swift::String v51;
  uint64_t v52;
  void *v53;
  char v54;
  uint64_t v55;
  uint64_t v56;
  void *v57;
  char v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  long long v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t *v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t *v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t *v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t *v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t *v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t *v84;
  void *v85;
  Swift::String v86;
  uint64_t v87;
  uint64_t v88;
  long long v89;
  uint64_t v90;
  uint64_t *v91;

  uint64_t v85 = a5;
  v86._uint64_t countAndFlagsBits = a4;
  v86._char object = a3;
  uint64_t v90 = v5;
  uint64_t v87 = v6;
  *(void *)&long long v89 = a2;
  uint64_t v83 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Column<NSNumber>);
  uint64_t v82 = *(void *)(v83 - 8);
  int64_t v7 = *(void *)(v82 + 64);
  int64_t v8 = alloca(v7);
  int64_t v9 = alloca(v7);
  BOOL v84 = &v63;
  uint64_t v80 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Column<Double>);
  uint64_t v79 = *(void *)(v80 - 8);
  int64_t v10 = *(void *)(v79 + 64);
  int64_t v11 = alloca(v10);
  int64_t v12 = alloca(v10);
  uint64_t v81 = &v63;
  uint64_t v77 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Column<Float>);
  uint64_t v76 = *(void *)(v77 - 8);
  int64_t v13 = *(void *)(v76 + 64);
  int64_t v14 = alloca(v13);
  int64_t v15 = alloca(v13);
  uint64_t v78 = &v63;
  uint64_t v74 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Column<Int64>);
  uint64_t v73 = *(void *)(v74 - 8);
  int64_t v16 = *(void *)(v73 + 64);
  uint64_t v17 = alloca(v16);
  int64_t v18 = alloca(v16);
  uint64_t v75 = &v63;
  uint64_t v71 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Column<Int32>);
  uint64_t v70 = *(void *)(v71 - 8);
  int64_t v19 = *(void *)(v70 + 64);
  unint64_t v20 = alloca(v19);
  int64_t v21 = alloca(v19);
  uint64_t v72 = &v63;
  uint64_t v68 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Column<Int16>);
  uint64_t v67 = *(void *)(v68 - 8);
  int64_t v22 = *(void *)(v67 + 64);
  double v23 = alloca(v22);
  uint64_t v24 = alloca(v22);
  char v69 = &v63;
  uint64_t v66 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Column<Int8>);
  uint64_t v65 = *(void *)(v66 - 8);
  int64_t v25 = *(void *)(v65 + 64);
  double v26 = alloca(v25);
  uint64_t v27 = alloca(v25);
  uint64_t v91 = &v63;
  uint64_t v28 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Column<Int>);
  uint64_t v29 = *(void *)(v28 - 8);
  int64_t v30 = *(void *)(v29 + 64);
  uint64_t v31 = alloca(v30);
  uint64_t v32 = alloca(v30);
  uint64_t v88 = AnyColumn.wrappedElementType.getter();
  if (swift_dynamicCastMetatype(v88, &type metadata for Int))
  {
    double v33 = AnyColumn.assumingType<A>(_:)(&type metadata for Int, &type metadata for Int);
    specialized FeatureMatrixBuilder.fillInteger<A>(from:column:)((uint64_t)&v63, v89, &demangling cache variable for type metadata for Column<Int>);
    return (*(uint64_t (**)(uint64_t *, uint64_t, double))(v29 + 8))(&v63, v28, v33);
  }
  uint64_t v35 = (uint64_t)v91;
  uint64_t v36 = v88;
  if (swift_dynamicCastMetatype(v88, &type metadata for Int8))
  {
    double v37 = AnyColumn.assumingType<A>(_:)(&type metadata for Int8, &type metadata for Int8);
    specialized FeatureMatrixBuilder.fillInteger<A>(from:column:)(v35, v89);
    uint64_t v38 = v35;
    uint64_t v39 = v66;
    uint64_t v40 = v65;
    return (*(uint64_t (**)(uint64_t, uint64_t, double))(v40 + 8))(v38, v39, v37);
  }
  uint64_t v41 = swift_dynamicCastMetatype(v36, &type metadata for Int16);
  unint64_t v42 = v89;
  if (v41)
  {
    uint64_t v43 = (uint64_t)v69;
    double v37 = AnyColumn.assumingType<A>(_:)(&type metadata for Int16, &type metadata for Int16);
    specialized FeatureMatrixBuilder.fillInteger<A>(from:column:)(v43, v42);
    uint64_t v38 = v43;
    uint64_t v39 = v68;
    uint64_t v40 = v67;
    return (*(uint64_t (**)(uint64_t, uint64_t, double))(v40 + 8))(v38, v39, v37);
  }
  uint64_t v91 = a1;
  uint64_t v44 = v88;
  if (swift_dynamicCastMetatype(v88, &type metadata for Int32))
  {
    uint64_t v45 = (uint64_t)v72;
    double v37 = AnyColumn.assumingType<A>(_:)(&type metadata for Int32, &type metadata for Int32);
    specialized FeatureMatrixBuilder.fillInteger<A>(from:column:)(v45, v42);
    uint64_t v38 = v45;
    uint64_t v39 = v71;
    uint64_t v40 = v70;
    return (*(uint64_t (**)(uint64_t, uint64_t, double))(v40 + 8))(v38, v39, v37);
  }
  if (swift_dynamicCastMetatype(v44, &type metadata for Int64))
  {
    uint64_t v46 = (uint64_t)v75;
    double v37 = AnyColumn.assumingType<A>(_:)(&type metadata for Int64, &type metadata for Int64);
    specialized FeatureMatrixBuilder.fillInteger<A>(from:column:)(v46, v42, &demangling cache variable for type metadata for Column<Int64>);
    uint64_t v38 = v46;
    uint64_t v39 = v74;
    uint64_t v40 = v73;
    return (*(uint64_t (**)(uint64_t, uint64_t, double))(v40 + 8))(v38, v39, v37);
  }
  if (swift_dynamicCastMetatype(v44, &type metadata for Float))
  {
    uint64_t v47 = (uint64_t)v78;
    double v37 = AnyColumn.assumingType<A>(_:)(&type metadata for Float, &type metadata for Float);
    specialized FeatureMatrixBuilder.fillInteger<A>(from:column:)(v47, v42);
    uint64_t v38 = v47;
    uint64_t v39 = v77;
    uint64_t v40 = v76;
    return (*(uint64_t (**)(uint64_t, uint64_t, double))(v40 + 8))(v38, v39, v37);
  }
  if (swift_dynamicCastMetatype(v44, &type metadata for Double))
  {
    uint64_t v48 = (uint64_t)v81;
    double v37 = AnyColumn.assumingType<A>(_:)(&type metadata for Double, &type metadata for Double);
    specialized FeatureMatrixBuilder.fillInteger<A>(from:column:)(v48, v42);
    uint64_t v38 = v48;
    uint64_t v39 = v80;
    uint64_t v40 = v79;
    return (*(uint64_t (**)(uint64_t, uint64_t, double))(v40 + 8))(v38, v39, v37);
  }
  uint64_t v49 = type metadata accessor for OS_os_log(0, &lazy cache variable for type metadata for NSNumber, NSNumber_ptr);
  if (swift_dynamicCastMetatype(v44, v49))
  {
    uint64_t v50 = (uint64_t)v84;
    double v37 = AnyColumn.assumingType<A>(_:)(v49, v49);
    specialized FeatureMatrixBuilder.fillInteger(from:column:)(v50, v89, *(float *)&v37);
    uint64_t v38 = v50;
    uint64_t v39 = v83;
    uint64_t v40 = v82;
    return (*(uint64_t (**)(uint64_t, uint64_t, double))(v40 + 8))(v38, v39, v37);
  }
  *(void *)&long long v64 = 0;
  *((void *)&v64 + 1) = 0xE000000000000000;
  _StringGuts.grow(_:)((Swift::Int)v86._object);
  v51._uint64_t countAndFlagsBits = v86._countAndFlagsBits;
  v51._char object = v85;
  String.append(_:)(v51);
  uint64_t v52 = AnyColumn.name.getter();
  char v54 = (char)v53;
  v51._uint64_t countAndFlagsBits = v52;
  v51._char object = v53;
  String.append(_:)(v51);
  swift_bridgeObjectRelease(v54);
  v51._uint64_t countAndFlagsBits = 0x6720747562202C27;
  v51._char object = (void *)0xEB0000000020746FLL;
  String.append(_:)(v51);
  uint64_t v55 = AnyColumn.wrappedElementType.getter();
  uint64_t v56 = _typeName(_:qualified:)(v55, 0);
  char v58 = (char)v57;
  v51._uint64_t countAndFlagsBits = v56;
  v51._char object = v57;
  String.append(_:)(v51);
  swift_bridgeObjectRelease(v58);
  v51._uint64_t countAndFlagsBits = 46;
  v51._char object = (void *)0xE100000000000000;
  String.append(_:)(v51);
  long long v89 = v64;
  v51._char object = (void *)lazy protocol witness table accessor for type MLCreateError and conformance MLCreateError();
  swift_allocError(&type metadata for MLCreateError, v51._object, 0, 0);
  *(_OWORD *)uint64_t v59 = v89;
  *(_OWORD *)(v59 + 16) = 0;
  *(_OWORD *)(v59 + 32) = 0;
  *(unsigned char *)(v59 + 48) = 0;
  return swift_willThrow(&type metadata for MLCreateError, v51._object, v59, v60, v61, v62);
}

uint64_t specialized FeatureMatrixBuilder.fillArray(from:size:column:)(uint64_t a1, unint64_t a2, uint64_t a3)
{
  uint64_t v87 = v3;
  *(void *)&long long v85 = v4;
  uint64_t v88 = a3;
  unint64_t v89 = a2;
  uint64_t v84 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Column<MLMultiArray>);
  uint64_t v78 = *(void *)(v84 - 8);
  int64_t v5 = *(void *)(v78 + 64);
  uint64_t v6 = alloca(v5);
  int64_t v7 = alloca(v5);
  uint64_t v79 = &v62;
  uint64_t v83 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Column<MLShapedArray<Double>>);
  uint64_t v82 = *(void *)(v83 - 8);
  int64_t v8 = *(void *)(v82 + 64);
  int64_t v9 = alloca(v8);
  int64_t v10 = alloca(v8);
  uint64_t v80 = &v62;
  int64_t v11 = alloca(v8);
  int64_t v12 = alloca(v8);
  uint64_t v77 = &v62;
  uint64_t v75 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Column<MLShapedArray<Float>>);
  uint64_t v74 = *(void *)(v75 - 8);
  int64_t v13 = *(void *)(v74 + 64);
  int64_t v14 = alloca(v13);
  int64_t v15 = alloca(v13);
  uint64_t v76 = &v62;
  uint64_t v72 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Column<MLShapedArray<Int32>>);
  uint64_t v71 = *(void *)(v72 - 8);
  int64_t v16 = *(void *)(v71 + 64);
  uint64_t v17 = alloca(v16);
  int64_t v18 = alloca(v16);
  uint64_t v73 = &v62;
  uint64_t v69 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Column<[Double]>);
  uint64_t v68 = *(void *)(v69 - 8);
  int64_t v19 = *(void *)(v68 + 64);
  unint64_t v20 = alloca(v19);
  int64_t v21 = alloca(v19);
  uint64_t v70 = &v62;
  uint64_t v67 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Column<[Float]>);
  uint64_t v22 = *(void *)(v67 - 8);
  int64_t v23 = *(void *)(v22 + 64);
  uint64_t v24 = alloca(v23);
  int64_t v25 = alloca(v23);
  uint64_t v66 = &v62;
  uint64_t v64 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Column<[Int]>);
  uint64_t v65 = *(void *)(v64 - 8);
  int64_t v26 = *(void *)(v65 + 64);
  uint64_t v27 = alloca(v26);
  uint64_t v28 = alloca(v26);
  uint64_t v81 = a1;
  uint64_t v29 = AnyColumn.wrappedElementType.getter();
  uint64_t v30 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [Int]);
  uint64_t v86 = v29;
  if (swift_dynamicCastMetatype(v29, v30))
  {
    double v31 = AnyColumn.assumingType<A>(_:)(v30, v30);
    specialized FeatureMatrixBuilder.fillArray<A>(from:size:column:)((uint64_t)&v62, v89, v88);
    uint64_t v32 = &v62;
    uint64_t v33 = v64;
    uint64_t v34 = v65;
    return (*(uint64_t (**)(uint64_t *, uint64_t, double))(v34 + 8))(v32, v33, v31);
  }
  uint64_t v36 = (uint64_t)v66;
  uint64_t v37 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [Float]);
  if (swift_dynamicCastMetatype(v86, v37))
  {
    double v38 = AnyColumn.assumingType<A>(_:)(v37, v37);
    specialized FeatureMatrixBuilder.fillArray<A>(from:size:column:)(v36, v89, v88);
    return (*(uint64_t (**)(uint64_t, uint64_t, double))(v22 + 8))(v36, v67, v38);
  }
  else
  {
    uint64_t v39 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [Double]);
    if (swift_dynamicCastMetatype(v86, v39))
    {
      uint64_t v40 = (uint64_t)v70;
      double v31 = AnyColumn.assumingType<A>(_:)(v39, v39);
      specialized FeatureMatrixBuilder.fillArray<A>(from:size:column:)(v40, v89, v88);
      uint64_t v32 = (uint64_t *)v40;
      uint64_t v33 = v69;
      uint64_t v34 = v68;
      return (*(uint64_t (**)(uint64_t *, uint64_t, double))(v34 + 8))(v32, v33, v31);
    }
    uint64_t v41 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for MLShapedArray<Int32>);
    if (swift_dynamicCastMetatype(v86, v41))
    {
      uint64_t v42 = (uint64_t)v73;
      double v31 = AnyColumn.assumingType<A>(_:)(v41, v41);
      specialized FeatureMatrixBuilder.fillArray(from:size:column:)(v42, v89, v88);
      uint64_t v32 = (uint64_t *)v42;
      uint64_t v33 = v72;
      uint64_t v34 = v71;
      return (*(uint64_t (**)(uint64_t *, uint64_t, double))(v34 + 8))(v32, v33, v31);
    }
    uint64_t v43 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for MLShapedArray<Float>);
    if (swift_dynamicCastMetatype(v86, v43))
    {
      uint64_t v44 = (uint64_t)v76;
      double v31 = AnyColumn.assumingType<A>(_:)(v43, v43);
      specialized FeatureMatrixBuilder.fillArray<A>(from:size:column:)(v44, v89, v88);
      uint64_t v32 = (uint64_t *)v44;
      uint64_t v33 = v75;
      uint64_t v34 = v74;
      return (*(uint64_t (**)(uint64_t *, uint64_t, double))(v34 + 8))(v32, v33, v31);
    }
    uint64_t v45 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for MLShapedArray<Double>);
    if (swift_dynamicCastMetatype(v86, v45))
    {
      uint64_t v46 = (uint64_t)v77;
      double v31 = AnyColumn.assumingType<A>(_:)(v45, v45);
      specialized FeatureMatrixBuilder.fillArray<A>(from:size:column:)(v46, v89, v88);
      uint64_t v32 = (uint64_t *)v46;
      uint64_t v33 = v83;
      uint64_t v34 = v82;
      return (*(uint64_t (**)(uint64_t *, uint64_t, double))(v34 + 8))(v32, v33, v31);
    }
    uint64_t v47 = type metadata accessor for OS_os_log(0, &lazy cache variable for type metadata for MLMultiArray, MLMultiArray_ptr);
    if (swift_dynamicCastMetatype(v86, v47))
    {
      uint64_t v48 = v79;
      double v31 = AnyColumn.assumingType<A>(_:)(v47, v47);
      uint64_t v49 = (uint64_t)v80;
      Column.mapNonNil<A>(_:)(closure #1 in FeatureMatrixBuilder.fillArray(from:size:column:), 0, v84, v45);
      specialized FeatureMatrixBuilder.fillArray<A>(from:size:column:)(v49, v89, v88);
      (*(void (**)(uint64_t, uint64_t, double))(v82 + 8))(v49, v83, v31);
      uint64_t v32 = v48;
      uint64_t v33 = v84;
      uint64_t v34 = v78;
      return (*(uint64_t (**)(uint64_t *, uint64_t, double))(v34 + 8))(v32, v33, v31);
    }
    *(void *)&long long v63 = 0;
    *((void *)&v63 + 1) = 0xE000000000000000;
    _StringGuts.grow(_:)(65);
    v50._char object = "g-point values for feature '" + 0x8000000000000000;
    v50._uint64_t countAndFlagsBits = 0xD000000000000031;
    String.append(_:)(v50);
    uint64_t v51 = AnyColumn.name.getter();
    char v53 = (char)v52;
    v50._uint64_t countAndFlagsBits = v51;
    v50._char object = v52;
    String.append(_:)(v50);
    swift_bridgeObjectRelease(v53);
    v50._uint64_t countAndFlagsBits = 0x6720747562202C27;
    v50._char object = (void *)0xEB0000000020746FLL;
    String.append(_:)(v50);
    uint64_t v54 = AnyColumn.wrappedElementType.getter();
    uint64_t v55 = _typeName(_:qualified:)(v54, 0);
    char v57 = (char)v56;
    v50._uint64_t countAndFlagsBits = v55;
    v50._char object = v56;
    String.append(_:)(v50);
    swift_bridgeObjectRelease(v57);
    v50._uint64_t countAndFlagsBits = 46;
    v50._char object = (void *)0xE100000000000000;
    String.append(_:)(v50);
    long long v85 = v63;
    v50._char object = (void *)lazy protocol witness table accessor for type MLCreateError and conformance MLCreateError();
    swift_allocError(&type metadata for MLCreateError, v50._object, 0, 0);
    *(_OWORD *)uint64_t v58 = v85;
    *(_OWORD *)(v58 + 16) = 0;
    *(_OWORD *)(v58 + 32) = 0;
    *(unsigned char *)(v58 + 48) = 0;
    return swift_willThrow(&type metadata for MLCreateError, v50._object, v58, v59, v60, v61);
  }
}

{
  uint64_t v3;
  uint64_t v4;
  int64_t v5;
  void *v6;
  void *v7;
  int64_t v8;
  void *v9;
  void *v10;
  void *v11;
  void *v12;
  int64_t v13;
  void *v14;
  void *v15;
  int64_t v16;
  void *v17;
  void *v18;
  int64_t v19;
  void *v20;
  void *v21;
  uint64_t v22;
  int64_t v23;
  void *v24;
  void *v25;
  int64_t v26;
  void *v27;
  void *v28;
  uint64_t v29;
  uint64_t v30;
  double v31;
  uint64_t *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v36;
  uint64_t v37;
  double v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t *v48;
  uint64_t v49;
  Swift::String v50;
  uint64_t v51;
  void *v52;
  char v53;
  uint64_t v54;
  uint64_t v55;
  void *v56;
  char v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  long long v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t *v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t *v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t *v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t *v76;
  uint64_t *v77;
  uint64_t v78;
  uint64_t *v79;
  uint64_t *v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  long long v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  unint64_t v89;

  uint64_t v87 = v3;
  *(void *)&long long v85 = v4;
  uint64_t v88 = a3;
  unint64_t v89 = a2;
  uint64_t v84 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Column<MLMultiArray>);
  uint64_t v78 = *(void *)(v84 - 8);
  int64_t v5 = *(void *)(v78 + 64);
  uint64_t v6 = alloca(v5);
  int64_t v7 = alloca(v5);
  uint64_t v79 = &v62;
  uint64_t v83 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Column<MLShapedArray<Double>>);
  uint64_t v82 = *(void *)(v83 - 8);
  int64_t v8 = *(void *)(v82 + 64);
  int64_t v9 = alloca(v8);
  int64_t v10 = alloca(v8);
  uint64_t v80 = &v62;
  int64_t v11 = alloca(v8);
  int64_t v12 = alloca(v8);
  uint64_t v77 = &v62;
  uint64_t v75 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Column<MLShapedArray<Float>>);
  uint64_t v74 = *(void *)(v75 - 8);
  int64_t v13 = *(void *)(v74 + 64);
  int64_t v14 = alloca(v13);
  int64_t v15 = alloca(v13);
  uint64_t v76 = &v62;
  uint64_t v72 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Column<MLShapedArray<Int32>>);
  uint64_t v71 = *(void *)(v72 - 8);
  int64_t v16 = *(void *)(v71 + 64);
  uint64_t v17 = alloca(v16);
  int64_t v18 = alloca(v16);
  uint64_t v73 = &v62;
  uint64_t v69 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Column<[Double]>);
  uint64_t v68 = *(void *)(v69 - 8);
  int64_t v19 = *(void *)(v68 + 64);
  unint64_t v20 = alloca(v19);
  int64_t v21 = alloca(v19);
  uint64_t v70 = &v62;
  uint64_t v67 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Column<[Float]>);
  uint64_t v22 = *(void *)(v67 - 8);
  int64_t v23 = *(void *)(v22 + 64);
  uint64_t v24 = alloca(v23);
  int64_t v25 = alloca(v23);
  uint64_t v66 = &v62;
  uint64_t v64 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Column<[Int]>);
  uint64_t v65 = *(void *)(v64 - 8);
  int64_t v26 = *(void *)(v65 + 64);
  uint64_t v27 = alloca(v26);
  uint64_t v28 = alloca(v26);
  uint64_t v81 = a1;
  uint64_t v29 = AnyColumn.wrappedElementType.getter();
  uint64_t v30 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [Int]);
  uint64_t v86 = v29;
  if (swift_dynamicCastMetatype(v29, v30))
  {
    double v31 = AnyColumn.assumingType<A>(_:)(v30, v30);
    specialized FeatureMatrixBuilder.fillArray<A>(from:size:column:)((uint64_t)&v62, v89, v88);
    uint64_t v32 = &v62;
    uint64_t v33 = v64;
    uint64_t v34 = v65;
    return (*(uint64_t (**)(uint64_t *, uint64_t, double))(v34 + 8))(v32, v33, v31);
  }
  uint64_t v36 = (uint64_t)v66;
  uint64_t v37 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [Float]);
  if (swift_dynamicCastMetatype(v86, v37))
  {
    double v38 = AnyColumn.assumingType<A>(_:)(v37, v37);
    specialized FeatureMatrixBuilder.fillArray<A>(from:size:column:)(v36, v89, v88);
    return (*(uint64_t (**)(uint64_t, uint64_t, double))(v22 + 8))(v36, v67, v38);
  }
  else
  {
    uint64_t v39 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [Double]);
    if (swift_dynamicCastMetatype(v86, v39))
    {
      uint64_t v40 = (uint64_t)v70;
      double v31 = AnyColumn.assumingType<A>(_:)(v39, v39);
      specialized FeatureMatrixBuilder.fillArray<A>(from:size:column:)(v40, v89, v88);
      uint64_t v32 = (uint64_t *)v40;
      uint64_t v33 = v69;
      uint64_t v34 = v68;
      return (*(uint64_t (**)(uint64_t *, uint64_t, double))(v34 + 8))(v32, v33, v31);
    }
    uint64_t v41 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for MLShapedArray<Int32>);
    if (swift_dynamicCastMetatype(v86, v41))
    {
      uint64_t v42 = (uint64_t)v73;
      double v31 = AnyColumn.assumingType<A>(_:)(v41, v41);
      specialized FeatureMatrixBuilder.fillArray(from:size:column:)(v42, v89, v88);
      uint64_t v32 = (uint64_t *)v42;
      uint64_t v33 = v72;
      uint64_t v34 = v71;
      return (*(uint64_t (**)(uint64_t *, uint64_t, double))(v34 + 8))(v32, v33, v31);
    }
    uint64_t v43 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for MLShapedArray<Float>);
    if (swift_dynamicCastMetatype(v86, v43))
    {
      uint64_t v44 = (uint64_t)v76;
      double v31 = AnyColumn.assumingType<A>(_:)(v43, v43);
      specialized FeatureMatrixBuilder.fillArray<A>(from:size:column:)(v44, v89, v88);
      uint64_t v32 = (uint64_t *)v44;
      uint64_t v33 = v75;
      uint64_t v34 = v74;
      return (*(uint64_t (**)(uint64_t *, uint64_t, double))(v34 + 8))(v32, v33, v31);
    }
    uint64_t v45 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for MLShapedArray<Double>);
    if (swift_dynamicCastMetatype(v86, v45))
    {
      uint64_t v46 = (uint64_t)v77;
      double v31 = AnyColumn.assumingType<A>(_:)(v45, v45);
      specialized FeatureMatrixBuilder.fillArray<A>(from:size:column:)(v46, v89, v88);
      uint64_t v32 = (uint64_t *)v46;
      uint64_t v33 = v83;
      uint64_t v34 = v82;
      return (*(uint64_t (**)(uint64_t *, uint64_t, double))(v34 + 8))(v32, v33, v31);
    }
    uint64_t v47 = type metadata accessor for OS_os_log(0, &lazy cache variable for type metadata for MLMultiArray, MLMultiArray_ptr);
    if (swift_dynamicCastMetatype(v86, v47))
    {
      uint64_t v48 = v79;
      double v31 = AnyColumn.assumingType<A>(_:)(v47, v47);
      uint64_t v49 = (uint64_t)v80;
      Column.mapNonNil<A>(_:)(closure #1 in FeatureMatrixBuilder.fillArray(from:size:column:), 0, v84, v45);
      specialized FeatureMatrixBuilder.fillArray<A>(from:size:column:)(v49, v89, v88);
      (*(void (**)(uint64_t, uint64_t, double))(v82 + 8))(v49, v83, v31);
      uint64_t v32 = v48;
      uint64_t v33 = v84;
      uint64_t v34 = v78;
      return (*(uint64_t (**)(uint64_t *, uint64_t, double))(v34 + 8))(v32, v33, v31);
    }
    *(void *)&long long v63 = 0;
    *((void *)&v63 + 1) = 0xE000000000000000;
    _StringGuts.grow(_:)(65);
    v50._char object = "g-point values for feature '" + 0x8000000000000000;
    v50._uint64_t countAndFlagsBits = 0xD000000000000031;
    String.append(_:)(v50);
    uint64_t v51 = AnyColumn.name.getter();
    char v53 = (char)v52;
    v50._uint64_t countAndFlagsBits = v51;
    v50._char object = v52;
    String.append(_:)(v50);
    swift_bridgeObjectRelease(v53);
    v50._uint64_t countAndFlagsBits = 0x6720747562202C27;
    v50._char object = (void *)0xEB0000000020746FLL;
    String.append(_:)(v50);
    uint64_t v54 = AnyColumn.wrappedElementType.getter();
    uint64_t v55 = _typeName(_:qualified:)(v54, 0);
    char v57 = (char)v56;
    v50._uint64_t countAndFlagsBits = v55;
    v50._char object = v56;
    String.append(_:)(v50);
    swift_bridgeObjectRelease(v57);
    v50._uint64_t countAndFlagsBits = 46;
    v50._char object = (void *)0xE100000000000000;
    String.append(_:)(v50);
    long long v85 = v63;
    v50._char object = (void *)lazy protocol witness table accessor for type MLCreateError and conformance MLCreateError();
    swift_allocError(&type metadata for MLCreateError, v50._object, 0, 0);
    *(_OWORD *)uint64_t v58 = v85;
    *(_OWORD *)(v58 + 16) = 0;
    *(_OWORD *)(v58 + 32) = 0;
    *(unsigned char *)(v58 + 48) = 0;
    return swift_willThrow(&type metadata for MLCreateError, v50._object, v58, v59, v60, v61);
  }
}

{
  uint64_t v3;
  uint64_t v4;
  int64_t v5;
  void *v6;
  void *v7;
  uint64_t v8;
  int64_t v9;
  void *v10;
  void *v11;
  uint64_t result;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  BOOL v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  void *v26;
  uint64_t v27;
  void (*v28)(uint64_t);
  float *v29;
  Swift::String v30;
  uint64_t v31;
  void *v32;
  char v33;
  uint64_t v34;
  void *v35;
  char v36;
  uint64_t v37;
  uint64_t v38;
  void *v39;
  char v40;
  uint64_t v41;
  void *v42;
  char v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  _OWORD v48[2];
  uint64_t v49;
  uint64_t v50;
  unint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  long long v55;
  unint64_t v56;
  unint64_t v57;
  _OWORD *v58;
  uint64_t v59;
  uint64_t v60;
  float v61;
  unint64_t v62;
  uint64_t v63;
  uint64_t v64;
  _OWORD *v65;

  char v53 = v4;
  Swift::String v50 = a3;
  uint64_t v62 = a2;
  int64_t v5 = *(void *)(*(void *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for MLShapedArray<Int32>?)
                             - 8)
                 + 64);
  uint64_t v6 = alloca(v5);
  int64_t v7 = alloca(v5);
  uint64_t v58 = v48;
  int64_t v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for MLShapedArray<Int32>);
  uint64_t v64 = *(void *)(v8 - 8);
  int64_t v9 = *(void *)(v64 + 64);
  int64_t v10 = alloca(v9);
  int64_t v11 = alloca(v9);
  uint64_t v60 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Column<MLShapedArray<Int32>>);
  uint64_t v59 = a1;
  uint64_t result = Column.count.getter(v60);
  if (result < 0) {
    BUG();
  }
  uint64_t v54 = v3;
  if (result)
  {
    int64_t v13 = 0;
    long long v63 = v8;
    uint64_t v65 = v48;
    uint64_t v52 = result;
    while (1)
    {
      if (v13 == result) {
        BUG();
      }
      int64_t v14 = v8;
      int64_t v15 = (uint64_t)v58;
      Column.subscript.getter(v13, v60);
      int64_t v16 = v15;
      uint64_t v17 = v14;
      if (__swift_getEnumTagSinglePayload(v16, 1, v14) == 1)
      {
        int64_t v18 = lazy protocol witness table accessor for type FullyConnectedNetworkClassifier<Float, String> and conformance FullyConnectedNetworkClassifier<A, B>(&lazy protocol witness table cache variable for type MLShapedArray<Int32> and conformance MLShapedArray<A>, &demangling cache variable for type metadata for MLShapedArray<Int32>, (uint64_t)&protocol conformance descriptor for MLShapedArray<A>);
        MLShapedArrayProtocol.init(arrayLiteral:)(_swiftEmptyArrayStorage, v14, v18);
        uint64_t v17 = v14;
        outlined destroy of Either<LogisticRegressionClassifier<Float, String>, FullyConnectedNetworkClassifier<Float, String>>((uint64_t)v58, &demangling cache variable for type metadata for MLShapedArray<Int32>?);
      }
      else
      {
        (*(void (**)(_OWORD *, uint64_t, uint64_t))(v64 + 32))(v65, v16, v14);
      }
      int64_t v19 = MLShapedArray.shape.getter(v17);
      unint64_t v20 = *(void *)(v19 + 16) == 1;
      int64_t v21 = v62;
      char v57 = v13;
      if (!v20 || *(void *)(v19 + 32) != v62) {
        break;
      }
      uint64_t v51 = v13 + 1;
      swift_bridgeObjectRelease(v19);
      if (v21 < 0) {
        BUG();
      }
      if (v21)
      {
        uint64_t v22 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for FeatureMatrixBuilder<Float>);
        uint64_t v49 = v53 + *(int *)(v22 + 44);
        int64_t v23 = 0;
        do
        {
          uint64_t v24 = v23 + v50;
          if (__OFADD__(v23, v50)) {
            BUG();
          }
          *(void *)&uint64_t v55 = v23 + 1;
          int64_t v25 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Int>);
          int64_t v26 = (void *)swift_allocObject(v25, 40, 7);
          v26[2] = 1;
          v26[3] = 2;
          void v26[4] = v23;
          uint64_t v27 = lazy protocol witness table accessor for type FullyConnectedNetworkClassifier<Float, String> and conformance FullyConnectedNetworkClassifier<A, B>(&lazy protocol witness table cache variable for type MLShapedArray<Int32> and conformance MLShapedArray<A>, &demangling cache variable for type metadata for MLShapedArray<Int32>, (uint64_t)&protocol conformance descriptor for MLShapedArray<A>);
          MLShapedArrayProtocol.subscript.getter(v26, v63, v27);
          swift_bridgeObjectRelease((_BYTE)v26);
          uint64_t v61 = (float)SLODWORD(v48[0]);
          uint64_t v28 = specialized DenseMatrix.subscript.modify(v48, v57, v24);
          uint64_t *v29 = v61;
          ((void (*)(_OWORD *, void))v28)(v48, 0);
          int64_t v23 = v55;
        }
        while (v62 != (void)v55);
      }
      int64_t v8 = v63;
      (*(void (**)(_OWORD *, uint64_t))(v64 + 8))(v65, v63);
      int64_t v13 = v51;
      uint64_t result = v52;
      if (v51 == v52) {
        return result;
      }
    }
    swift_bridgeObjectRelease(v19);
    *(void *)&v48[0] = 0;
    *((void *)&v48[0] + 1) = 0xE000000000000000;
    _StringGuts.grow(_:)(84);
    v30._uint64_t countAndFlagsBits = 0xD000000000000023;
    v30._char object = " elements at row " + 0x8000000000000000;
    String.append(_:)(v30);
    uint64_t v56 = v62;
    double v31 = dispatch thunk of CustomStringConvertible.description.getter(&type metadata for Int, &protocol witness table for Int);
    uint64_t v33 = (char)v32;
    v30._uint64_t countAndFlagsBits = v31;
    v30._char object = v32;
    String.append(_:)(v30);
    swift_bridgeObjectRelease(v33);
    v30._uint64_t countAndFlagsBits = 0x656620726F66205DLL;
    v30._char object = (void *)0xEF27206572757461;
    String.append(_:)(v30);
    uint64_t v34 = Column.name.getter(v60);
    uint64_t v36 = (char)v35;
    v30._uint64_t countAndFlagsBits = v34;
    v30._char object = v35;
    String.append(_:)(v30);
    swift_bridgeObjectRelease(v36);
    v30._char object = "arrays with shape [" + 0x8000000000000000;
    v30._uint64_t countAndFlagsBits = 0xD000000000000011;
    String.append(_:)(v30);
    uint64_t v37 = MLShapedArray.shape.getter(v17);
    double v38 = Array.description.getter(v37, &type metadata for Int);
    uint64_t v40 = (char)v39;
    v30._uint64_t countAndFlagsBits = v38;
    v30._char object = v39;
    String.append(_:)(v30);
    swift_bridgeObjectRelease(v37);
    swift_bridgeObjectRelease(v40);
    v30._uint64_t countAndFlagsBits = 0x20776F7220746120;
    v30._char object = (void *)0xE800000000000000;
    String.append(_:)(v30);
    uint64_t v56 = v57;
    uint64_t v41 = dispatch thunk of CustomStringConvertible.description.getter(&type metadata for Int, &protocol witness table for Int);
    uint64_t v43 = (char)v42;
    v30._uint64_t countAndFlagsBits = v41;
    v30._char object = v42;
    String.append(_:)(v30);
    swift_bridgeObjectRelease(v43);
    v30._uint64_t countAndFlagsBits = 46;
    v30._char object = (void *)0xE100000000000000;
    String.append(_:)(v30);
    uint64_t v55 = v48[0];
    v30._char object = (void *)lazy protocol witness table accessor for type MLCreateError and conformance MLCreateError();
    swift_allocError(&type metadata for MLCreateError, v30._object, 0, 0);
    *(_OWORD *)uint64_t v44 = v55;
    *(_OWORD *)(v44 + 16) = 0;
    *(_OWORD *)(v44 + 32) = 0;
    *(unsigned char *)(v44 + 48) = 0;
    swift_willThrow(&type metadata for MLCreateError, v30._object, v44, v45, v46, v47);
    return (*(uint64_t (**)(_OWORD *, uint64_t))(v64 + 8))(v65, v63);
  }
  return result;
}

{
  uint64_t v3;
  uint64_t v4;
  int64_t v5;
  void *v6;
  void *v7;
  uint64_t v8;
  int64_t v9;
  void *v10;
  void *v11;
  uint64_t result;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  BOOL v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  void *v26;
  uint64_t v27;
  void (*v28)(uint64_t);
  double *v29;
  Swift::String v30;
  uint64_t v31;
  void *v32;
  char v33;
  uint64_t v34;
  void *v35;
  char v36;
  uint64_t v37;
  uint64_t v38;
  void *v39;
  char v40;
  uint64_t v41;
  void *v42;
  char v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  _OWORD v49[2];
  double v50;
  uint64_t v51;
  uint64_t v52;
  unint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  long long v57;
  unint64_t v58;
  unint64_t v59;
  uint64_t *v60;
  uint64_t v61;
  uint64_t v62;
  unint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t *v66;

  uint64_t v55 = v4;
  uint64_t v52 = a3;
  long long v63 = a2;
  int64_t v5 = *(void *)(*(void *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for MLShapedArray<Int32>?)
                             - 8)
                 + 64);
  uint64_t v6 = alloca(v5);
  int64_t v7 = alloca(v5);
  uint64_t v60 = &v48;
  int64_t v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for MLShapedArray<Int32>);
  uint64_t v65 = *(void *)(v8 - 8);
  int64_t v9 = *(void *)(v65 + 64);
  int64_t v10 = alloca(v9);
  int64_t v11 = alloca(v9);
  uint64_t v62 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Column<MLShapedArray<Int32>>);
  uint64_t v61 = a1;
  uint64_t result = Column.count.getter(v62);
  if (result < 0) {
    BUG();
  }
  uint64_t v56 = v3;
  if (result)
  {
    int64_t v13 = 0;
    uint64_t v64 = v8;
    uint64_t v66 = &v48;
    uint64_t v54 = result;
    while (1)
    {
      if (v13 == result) {
        BUG();
      }
      int64_t v14 = v8;
      int64_t v15 = (uint64_t)v60;
      Column.subscript.getter(v13, v62);
      int64_t v16 = v15;
      uint64_t v17 = v14;
      if (__swift_getEnumTagSinglePayload(v16, 1, v14) == 1)
      {
        int64_t v18 = lazy protocol witness table accessor for type FullyConnectedNetworkClassifier<Float, String> and conformance FullyConnectedNetworkClassifier<A, B>(&lazy protocol witness table cache variable for type MLShapedArray<Int32> and conformance MLShapedArray<A>, &demangling cache variable for type metadata for MLShapedArray<Int32>, (uint64_t)&protocol conformance descriptor for MLShapedArray<A>);
        MLShapedArrayProtocol.init(arrayLiteral:)(_swiftEmptyArrayStorage, v14, v18);
        uint64_t v17 = v14;
        outlined destroy of Either<LogisticRegressionClassifier<Float, String>, FullyConnectedNetworkClassifier<Float, String>>((uint64_t)v60, &demangling cache variable for type metadata for MLShapedArray<Int32>?);
      }
      else
      {
        (*(void (**)(uint64_t *, uint64_t, uint64_t))(v65 + 32))(v66, v16, v14);
      }
      int64_t v19 = MLShapedArray.shape.getter(v17);
      unint64_t v20 = *(void *)(v19 + 16) == 1;
      int64_t v21 = v63;
      uint64_t v59 = v13;
      if (!v20 || *(void *)(v19 + 32) != v63) {
        break;
      }
      char v53 = v13 + 1;
      swift_bridgeObjectRelease(v19);
      if (v21 < 0) {
        BUG();
      }
      if (v21)
      {
        uint64_t v22 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for FeatureMatrixBuilder<Double>);
        uint64_t v51 = v55 + *(int *)(v22 + 44);
        int64_t v23 = 0;
        do
        {
          uint64_t v24 = v23 + v52;
          if (__OFADD__(v23, v52)) {
            BUG();
          }
          *(void *)&char v57 = v23 + 1;
          int64_t v25 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Int>);
          int64_t v26 = (void *)swift_allocObject(v25, 40, 7);
          v26[2] = 1;
          v26[3] = 2;
          void v26[4] = v23;
          uint64_t v27 = lazy protocol witness table accessor for type FullyConnectedNetworkClassifier<Float, String> and conformance FullyConnectedNetworkClassifier<A, B>(&lazy protocol witness table cache variable for type MLShapedArray<Int32> and conformance MLShapedArray<A>, &demangling cache variable for type metadata for MLShapedArray<Int32>, (uint64_t)&protocol conformance descriptor for MLShapedArray<A>);
          MLShapedArrayProtocol.subscript.getter(v26, v64, v27);
          swift_bridgeObjectRelease((_BYTE)v26);
          Swift::String v50 = (double)SLODWORD(v49[0]);
          uint64_t v28 = specialized DenseMatrix.subscript.modify(v49, v59, v24);
          uint64_t *v29 = v50;
          ((void (*)(_OWORD *, void))v28)(v49, 0);
          int64_t v23 = v57;
        }
        while (v63 != (void)v57);
      }
      int64_t v8 = v64;
      (*(void (**)(uint64_t *, uint64_t))(v65 + 8))(v66, v64);
      int64_t v13 = v53;
      uint64_t result = v54;
      if (v53 == v54) {
        return result;
      }
    }
    swift_bridgeObjectRelease(v19);
    *(void *)&v49[0] = 0;
    *((void *)&v49[0] + 1) = 0xE000000000000000;
    _StringGuts.grow(_:)(84);
    v30._uint64_t countAndFlagsBits = 0xD000000000000023;
    v30._char object = " elements at row " + 0x8000000000000000;
    String.append(_:)(v30);
    uint64_t v58 = v63;
    double v31 = dispatch thunk of CustomStringConvertible.description.getter(&type metadata for Int, &protocol witness table for Int);
    uint64_t v33 = (char)v32;
    v30._uint64_t countAndFlagsBits = v31;
    v30._char object = v32;
    String.append(_:)(v30);
    swift_bridgeObjectRelease(v33);
    v30._uint64_t countAndFlagsBits = 0x656620726F66205DLL;
    v30._char object = (void *)0xEF27206572757461;
    String.append(_:)(v30);
    uint64_t v34 = Column.name.getter(v62);
    uint64_t v36 = (char)v35;
    v30._uint64_t countAndFlagsBits = v34;
    v30._char object = v35;
    String.append(_:)(v30);
    swift_bridgeObjectRelease(v36);
    v30._char object = "arrays with shape [" + 0x8000000000000000;
    v30._uint64_t countAndFlagsBits = 0xD000000000000011;
    String.append(_:)(v30);
    uint64_t v37 = MLShapedArray.shape.getter(v17);
    double v38 = Array.description.getter(v37, &type metadata for Int);
    uint64_t v40 = (char)v39;
    v30._uint64_t countAndFlagsBits = v38;
    v30._char object = v39;
    String.append(_:)(v30);
    swift_bridgeObjectRelease(v37);
    swift_bridgeObjectRelease(v40);
    v30._uint64_t countAndFlagsBits = 0x20776F7220746120;
    v30._char object = (void *)0xE800000000000000;
    String.append(_:)(v30);
    uint64_t v58 = v59;
    uint64_t v41 = dispatch thunk of CustomStringConvertible.description.getter(&type metadata for Int, &protocol witness table for Int);
    uint64_t v43 = (char)v42;
    v30._uint64_t countAndFlagsBits = v41;
    v30._char object = v42;
    String.append(_:)(v30);
    swift_bridgeObjectRelease(v43);
    v30._uint64_t countAndFlagsBits = 46;
    v30._char object = (void *)0xE100000000000000;
    String.append(_:)(v30);
    char v57 = v49[0];
    v30._char object = (void *)lazy protocol witness table accessor for type MLCreateError and conformance MLCreateError();
    swift_allocError(&type metadata for MLCreateError, v30._object, 0, 0);
    *(_OWORD *)uint64_t v44 = v57;
    *(_OWORD *)(v44 + 16) = 0;
    *(_OWORD *)(v44 + 32) = 0;
    *(unsigned char *)(v44 + 48) = 0;
    swift_willThrow(&type metadata for MLCreateError, v30._object, v44, v45, v46, v47);
    return (*(uint64_t (**)(uint64_t *, uint64_t))(v65 + 8))(v66, v64);
  }
  return result;
}

uint64_t specialized FeatureMatrixBuilder.fillInteger<A>(from:column:)(uint64_t a1, unint64_t a2)
{
  uint64_t v13 = v2;
  unint64_t v10 = a2;
  uint64_t v12 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Column<Int8>);
  uint64_t v11 = a1;
  uint64_t result = Column.count.getter(v12);
  if (result < 0) {
    BUG();
  }
  if (result)
  {
    uint64_t v4 = result;
    v13 += *(int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for FeatureMatrixBuilder<Float>)
                  + 44);
    for (unint64_t i = 0; i != v4; ++i)
    {
      Column.subscript.getter(i, v12);
      float v6 = 0.0;
      if (!BYTE1(v9[0])) {
        float v6 = (float)SLOBYTE(v9[0]);
      }
      float v14 = v6;
      int64_t v7 = specialized DenseMatrix.subscript.modify(v9, i, v10);
      float *v8 = v14;
      uint64_t result = ((uint64_t (*)(void *, void))v7)(v9, 0);
    }
  }
  return result;
}

{
  uint64_t v2;
  uint64_t result;
  uint64_t v4;
  unint64_t i;
  float v6;
  void (*v7)(uint64_t);
  float *v8;
  void v9[4];
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  float v14;

  uint64_t v13 = v2;
  unint64_t v10 = a2;
  uint64_t v12 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Column<Int16>);
  uint64_t v11 = a1;
  uint64_t result = Column.count.getter(v12);
  if (result < 0) {
    BUG();
  }
  if (result)
  {
    uint64_t v4 = result;
    v13 += *(int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for FeatureMatrixBuilder<Float>)
                  + 44);
    for (unint64_t i = 0; i != v4; ++i)
    {
      Column.subscript.getter(i, v12);
      float v6 = 0.0;
      if (!BYTE2(v9[0])) {
        float v6 = (float)SLOWORD(v9[0]);
      }
      float v14 = v6;
      int64_t v7 = specialized DenseMatrix.subscript.modify(v9, i, v10);
      float *v8 = v14;
      uint64_t result = ((uint64_t (*)(void *, void))v7)(v9, 0);
    }
  }
  return result;
}

{
  uint64_t v2;
  uint64_t result;
  uint64_t v4;
  unint64_t i;
  float v6;
  void (*v7)(uint64_t);
  float *v8;
  void v9[4];
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  float v14;

  uint64_t v13 = v2;
  unint64_t v10 = a2;
  uint64_t v12 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Column<Int32>);
  uint64_t v11 = a1;
  uint64_t result = Column.count.getter(v12);
  if (result < 0) {
    BUG();
  }
  if (result)
  {
    uint64_t v4 = result;
    v13 += *(int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for FeatureMatrixBuilder<Float>)
                  + 44);
    for (unint64_t i = 0; i != v4; ++i)
    {
      Column.subscript.getter(i, v12);
      float v6 = 0.0;
      if (!BYTE4(v9[0])) {
        float v6 = (float)SLODWORD(v9[0]);
      }
      float v14 = v6;
      int64_t v7 = specialized DenseMatrix.subscript.modify(v9, i, v10);
      float *v8 = v14;
      uint64_t result = ((uint64_t (*)(void *, void))v7)(v9, 0);
    }
  }
  return result;
}

{
  uint64_t v2;
  uint64_t result;
  uint64_t v4;
  unint64_t i;
  double v6;
  void (*v7)(uint64_t);
  double *v8;
  void v9[4];
  double v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  float v14 = v2;
  uint64_t v11 = a2;
  uint64_t v13 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Column<Int8>);
  uint64_t v12 = a1;
  uint64_t result = Column.count.getter(v13);
  if (result < 0) {
    BUG();
  }
  if (result)
  {
    uint64_t v4 = result;
    v14 += *(int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for FeatureMatrixBuilder<Double>)
                  + 44);
    for (unint64_t i = 0; i != v4; ++i)
    {
      Column.subscript.getter(i, v13);
      float v6 = 0.0;
      if (!BYTE1(v9[0])) {
        float v6 = (double)SLOBYTE(v9[0]);
      }
      unint64_t v10 = v6;
      int64_t v7 = specialized DenseMatrix.subscript.modify(v9, i, v11);
      float *v8 = v10;
      uint64_t result = ((uint64_t (*)(void *, void))v7)(v9, 0);
    }
  }
  return result;
}

{
  uint64_t v2;
  uint64_t result;
  uint64_t v4;
  unint64_t i;
  double v6;
  void (*v7)(uint64_t);
  double *v8;
  void v9[4];
  double v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  float v14 = v2;
  uint64_t v11 = a2;
  uint64_t v13 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Column<Int16>);
  uint64_t v12 = a1;
  uint64_t result = Column.count.getter(v13);
  if (result < 0) {
    BUG();
  }
  if (result)
  {
    uint64_t v4 = result;
    v14 += *(int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for FeatureMatrixBuilder<Double>)
                  + 44);
    for (unint64_t i = 0; i != v4; ++i)
    {
      Column.subscript.getter(i, v13);
      float v6 = 0.0;
      if (!BYTE2(v9[0])) {
        float v6 = (double)SLOWORD(v9[0]);
      }
      unint64_t v10 = v6;
      int64_t v7 = specialized DenseMatrix.subscript.modify(v9, i, v11);
      float *v8 = v10;
      uint64_t result = ((uint64_t (*)(void *, void))v7)(v9, 0);
    }
  }
  return result;
}

{
  uint64_t v2;
  uint64_t result;
  uint64_t v4;
  unint64_t i;
  double v6;
  void (*v7)(uint64_t);
  double *v8;
  void v9[4];
  double v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  float v14 = v2;
  uint64_t v11 = a2;
  uint64_t v13 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Column<Int32>);
  uint64_t v12 = a1;
  uint64_t result = Column.count.getter(v13);
  if (result < 0) {
    BUG();
  }
  if (result)
  {
    uint64_t v4 = result;
    v14 += *(int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for FeatureMatrixBuilder<Double>)
                  + 44);
    for (unint64_t i = 0; i != v4; ++i)
    {
      Column.subscript.getter(i, v13);
      float v6 = 0.0;
      if (!BYTE4(v9[0])) {
        float v6 = (double)SLODWORD(v9[0]);
      }
      unint64_t v10 = v6;
      int64_t v7 = specialized DenseMatrix.subscript.modify(v9, i, v11);
      float *v8 = v10;
      uint64_t result = ((uint64_t (*)(void *, void))v7)(v9, 0);
    }
  }
  return result;
}

{
  uint64_t v2;
  uint64_t result;
  uint64_t v4;
  unint64_t i;
  int v6;
  void (*v7)(uint64_t);
  _DWORD *v8;
  void v9[4];
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  int v14;

  uint64_t v13 = v2;
  unint64_t v10 = a2;
  uint64_t v12 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Column<Float>);
  uint64_t v11 = a1;
  uint64_t result = Column.count.getter(v12);
  if (result < 0) {
    BUG();
  }
  if (result)
  {
    uint64_t v4 = result;
    v13 += *(int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for FeatureMatrixBuilder<Float>)
                  + 44);
    for (unint64_t i = 0; i != v4; ++i)
    {
      Column.subscript.getter(i, v12);
      float v6 = 0;
      if (!BYTE4(v9[0])) {
        float v6 = v9[0];
      }
      float v14 = v6;
      int64_t v7 = specialized DenseMatrix.subscript.modify(v9, i, v10);
      float *v8 = v14;
      uint64_t result = ((uint64_t (*)(void *, void))v7)(v9, 0);
    }
  }
  return result;
}

{
  uint64_t v2;
  uint64_t result;
  uint64_t v4;
  unint64_t i;
  float v6;
  void (*v7)(uint64_t);
  float *v8;
  double v9;
  char v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  float v15;

  float v14 = v2;
  uint64_t v11 = a2;
  uint64_t v13 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Column<Double>);
  uint64_t v12 = a1;
  uint64_t result = Column.count.getter(v13);
  if (result < 0) {
    BUG();
  }
  if (result)
  {
    uint64_t v4 = result;
    v14 += *(int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for FeatureMatrixBuilder<Float>)
                  + 44);
    for (unint64_t i = 0; i != v4; ++i)
    {
      Column.subscript.getter(i, v13);
      float v6 = 0.0;
      if (!v10) {
        float v6 = v9;
      }
      int64_t v15 = v6;
      int64_t v7 = specialized DenseMatrix.subscript.modify(&v9, i, v11);
      float *v8 = v15;
      uint64_t result = ((uint64_t (*)(double *, void))v7)(&v9, 0);
    }
  }
  return result;
}

{
  uint64_t v2;
  uint64_t result;
  uint64_t v4;
  unint64_t i;
  double v6;
  void (*v7)(uint64_t);
  double *v8;
  void v9[4];
  double v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  float v14 = v2;
  uint64_t v11 = a2;
  uint64_t v13 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Column<Float>);
  uint64_t v12 = a1;
  uint64_t result = Column.count.getter(v13);
  if (result < 0) {
    BUG();
  }
  if (result)
  {
    uint64_t v4 = result;
    v14 += *(int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for FeatureMatrixBuilder<Double>)
                  + 44);
    for (unint64_t i = 0; i != v4; ++i)
    {
      Column.subscript.getter(i, v13);
      float v6 = 0.0;
      if (!BYTE4(v9[0])) {
        float v6 = *(float *)v9;
      }
      unint64_t v10 = v6;
      int64_t v7 = specialized DenseMatrix.subscript.modify(v9, i, v11);
      float *v8 = v10;
      uint64_t result = ((uint64_t (*)(void *, void))v7)(v9, 0);
    }
  }
  return result;
}

{
  uint64_t v2;
  uint64_t result;
  uint64_t v4;
  unint64_t i;
  uint64_t v6;
  void (*v7)(uint64_t);
  void *v8;
  uint64_t v9;
  char v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  int64_t v15 = v2;
  uint64_t v12 = a2;
  float v14 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Column<Double>);
  uint64_t v13 = a1;
  uint64_t result = Column.count.getter(v14);
  if (result < 0) {
    BUG();
  }
  if (result)
  {
    uint64_t v4 = result;
    v15 += *(int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for FeatureMatrixBuilder<Double>)
                  + 44);
    for (unint64_t i = 0; i != v4; ++i)
    {
      Column.subscript.getter(i, v14);
      float v6 = 0;
      if (!v10) {
        float v6 = v9;
      }
      uint64_t v11 = v6;
      int64_t v7 = specialized DenseMatrix.subscript.modify(&v9, i, v12);
      float *v8 = v11;
      uint64_t result = ((uint64_t (*)(uint64_t *, void))v7)(&v9, 0);
    }
  }
  return result;
}

uint64_t specialized FeatureMatrixBuilder.fillInteger<A>(from:column:)(uint64_t a1, unint64_t a2, uint64_t *a3)
{
  uint64_t v15 = v3;
  unint64_t v12 = a2;
  uint64_t v14 = __swift_instantiateConcreteTypeFromMangledName(a3);
  uint64_t v13 = a1;
  uint64_t result = Column.count.getter(v14);
  if (result < 0) {
    BUG();
  }
  if (result)
  {
    uint64_t v5 = result;
    v15 += *(int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for FeatureMatrixBuilder<Float>)
                  + 44);
    for (unint64_t i = 0; i != v5; ++i)
    {
      Column.subscript.getter(i, v14);
      float v7 = 0.0;
      if (!v11) {
        float v7 = (float)(int)v10;
      }
      float v16 = v7;
      int64_t v8 = specialized DenseMatrix.subscript.modify(&v10, i, v12);
      float *v9 = v16;
      uint64_t result = ((uint64_t (*)(uint64_t *, void))v8)(&v10, 0);
    }
  }
  return result;
}

{
  uint64_t v3;
  uint64_t result;
  uint64_t v5;
  unint64_t i;
  double v7;
  void (*v8)(uint64_t);
  double *v9;
  uint64_t v10;
  char v11;
  double v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  float v16 = v3;
  uint64_t v13 = a2;
  uint64_t v15 = __swift_instantiateConcreteTypeFromMangledName(a3);
  uint64_t v14 = a1;
  uint64_t result = Column.count.getter(v15);
  if (result < 0) {
    BUG();
  }
  if (result)
  {
    uint64_t v5 = result;
    v16 += *(int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for FeatureMatrixBuilder<Double>)
                  + 44);
    for (unint64_t i = 0; i != v5; ++i)
    {
      Column.subscript.getter(i, v15);
      float v7 = 0.0;
      if (!v11) {
        float v7 = (double)(int)v10;
      }
      unint64_t v12 = v7;
      int64_t v8 = specialized DenseMatrix.subscript.modify(&v10, i, v13);
      float *v9 = v12;
      uint64_t result = ((uint64_t (*)(uint64_t *, void))v8)(&v10, 0);
    }
  }
  return result;
}

uint64_t specialized FeatureMatrixBuilder.fillInteger(from:column:)(uint64_t a1, unint64_t a2, float a3)
{
  uint64_t v14 = v3;
  unint64_t v11 = a2;
  uint64_t v13 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Column<NSNumber>);
  uint64_t v12 = a1;
  uint64_t result = Column.count.getter(v13);
  if (result < 0) {
    BUG();
  }
  if (result)
  {
    uint64_t v5 = result;
    v14 += *(int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for FeatureMatrixBuilder<Float>)
                  + 44);
    for (unint64_t i = 0; i != v5; ++i)
    {
      Column.subscript.getter(i, v13);
      id v7 = v10[0];
      if (v10[0])
      {
        [v10[0] floatValue];
        float v15 = a3;
      }
      else
      {
        float v15 = 0.0;
      }
      int64_t v8 = specialized DenseMatrix.subscript.modify(v10, i, v11);
      a3 = v15;
      float *v9 = v15;
      uint64_t result = ((uint64_t (*)(id *, void))v8)(v10, 0);
    }
  }
  return result;
}

{
  uint64_t v3;
  uint64_t result;
  uint64_t v5;
  unint64_t i;
  id v7;
  float v8;
  void (*v9)(uint64_t);
  double *v10;
  id v11[4];
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  double v16;

  float v15 = v3;
  uint64_t v12 = a2;
  uint64_t v14 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Column<NSNumber>);
  uint64_t v13 = a1;
  uint64_t result = Column.count.getter(v14);
  if (result < 0) {
    BUG();
  }
  if (result)
  {
    uint64_t v5 = result;
    v15 += *(int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for FeatureMatrixBuilder<Double>)
                  + 44);
    for (unint64_t i = 0; i != v5; ++i)
    {
      Column.subscript.getter(i, v14);
      id v7 = v11[0];
      if (v11[0])
      {
        [v11[0] floatValue];
        *(float *)&float v16 = a3;

        int64_t v8 = *(float *)&v16;
      }
      else
      {
        int64_t v8 = 0.0;
      }
      float v16 = v8;
      int64_t v9 = specialized DenseMatrix.subscript.modify(v11, i, v12);
      a3 = *(float *)&v16;
      *uint64_t v10 = v16;
      uint64_t result = ((uint64_t (*)(id *, void))v9)(v11, 0);
    }
  }
  return result;
}

uint64_t specialized FeatureMatrixBuilder.fillArray<A>(from:size:column:)(uint64_t a1, unint64_t a2, uint64_t a3)
{
  uint64_t v34 = v4;
  uint64_t v32 = a3;
  uint64_t v38 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Column<[Int]>);
  uint64_t v37 = a1;
  uint64_t result = Column.count.getter(v38);
  if (result < 0) {
    BUG();
  }
  if (result)
  {
    uint64_t v35 = v3;
    unint64_t v36 = a2;
    unint64_t v6 = 0;
    uint64_t v33 = result;
    while (1)
    {
      if (v6 == result) {
        BUG();
      }
      Column.subscript.getter(v6, v38);
      id v7 = *(void **)&v31[0];
      if (!*(void *)&v31[0]) {
        id v7 = _swiftEmptyArrayStorage;
      }
      unint64_t v41 = v6;
      uint64_t v8 = v7[2];
      unint64_t v9 = v36;
      if (v8 != v36) {
        break;
      }
      if (v36)
      {
        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for FeatureMatrixBuilder<Float>);
        unint64_t v10 = 0;
        do
        {
          unint64_t v11 = v10 + v32;
          if (__OFADD__(v10, v32)) {
            BUG();
          }
          if (v10 >= v7[2]) {
            BUG();
          }
          *(float *)&long long v39 = (float)(int)v7[v10++ + 4];
          uint64_t v12 = specialized DenseMatrix.subscript.modify(v31, v41, v11);
          *uint64_t v13 = v39;
          ((void (*)(_OWORD *, void))v12)(v31, 0);
        }
        while (v36 != v10);
      }
      unint64_t v6 = v41 + 1;
      swift_bridgeObjectRelease((_BYTE)v7);
      uint64_t result = v33;
      if (v6 == v33) {
        return result;
      }
    }
    *(void *)&v31[0] = 0;
    *(void *)&long long v39 = v8;
    *((void *)&v31[0] + 1) = 0xE000000000000000;
    _StringGuts.grow(_:)(81);
    v14._uint64_t countAndFlagsBits = 0xD000000000000015;
    v14._char object = "ues for feature '" + 0x8000000000000000;
    String.append(_:)(v14);
    unint64_t v40 = v9;
    uint64_t v15 = dispatch thunk of CustomStringConvertible.description.getter(&type metadata for Int, &protocol witness table for Int);
    char v17 = (char)v16;
    v14._uint64_t countAndFlagsBits = v15;
    v14._char object = v16;
    String.append(_:)(v14);
    swift_bridgeObjectRelease(v17);
    v14._uint64_t countAndFlagsBits = 0xD000000000000017;
    v14._char object = "Expected arrays with " + 0x8000000000000000;
    String.append(_:)(v14);
    uint64_t v18 = Column.name.getter(v38);
    char v20 = (char)v19;
    v14._uint64_t countAndFlagsBits = v18;
    v14._char object = v19;
    String.append(_:)(v14);
    swift_bridgeObjectRelease(v20);
    v14._uint64_t countAndFlagsBits = 0x6720747562202C27;
    v14._char object = (void *)0xEB0000000020746FLL;
    String.append(_:)(v14);
    swift_bridgeObjectRelease((_BYTE)v7);
    unint64_t v40 = v39;
    uint64_t v21 = dispatch thunk of CustomStringConvertible.description.getter(&type metadata for Int, &protocol witness table for Int);
    char v23 = (char)v22;
    v14._uint64_t countAndFlagsBits = v21;
    v14._char object = v22;
    String.append(_:)(v14);
    swift_bridgeObjectRelease(v23);
    v14._char object = " elements for feature '" + 0x8000000000000000;
    v14._uint64_t countAndFlagsBits = 0xD000000000000011;
    String.append(_:)(v14);
    unint64_t v40 = v41;
    uint64_t v24 = dispatch thunk of CustomStringConvertible.description.getter(&type metadata for Int, &protocol witness table for Int);
    char v26 = (char)v25;
    v14._uint64_t countAndFlagsBits = v24;
    v14._char object = v25;
    String.append(_:)(v14);
    swift_bridgeObjectRelease(v26);
    v14._uint64_t countAndFlagsBits = 46;
    v14._char object = (void *)0xE100000000000000;
    String.append(_:)(v14);
    long long v39 = v31[0];
    v14._char object = (void *)lazy protocol witness table accessor for type MLCreateError and conformance MLCreateError();
    swift_allocError(&type metadata for MLCreateError, v14._object, 0, 0);
    *(_OWORD *)uint64_t v27 = v39;
    *(_OWORD *)(v27 + 16) = 0;
    *(_OWORD *)(v27 + 32) = 0;
    *(unsigned char *)(v27 + 48) = 0;
    return swift_willThrow(&type metadata for MLCreateError, v14._object, v27, v28, v29, v30);
  }
  return result;
}

{
  uint64_t v3;
  uint64_t v4;
  uint64_t result;
  unint64_t v6;
  void *v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  void (*v12)(uint64_t);
  void *v13;
  Swift::String v14;
  uint64_t v15;
  void *v16;
  char v17;
  uint64_t v18;
  void *v19;
  char v20;
  uint64_t v21;
  void *v22;
  char v23;
  uint64_t v24;
  void *v25;
  char v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  _OWORD v31[2];
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  uint64_t v37;
  uint64_t v38;
  long long v39;
  unint64_t v40;
  unint64_t v41;

  uint64_t v34 = v4;
  uint64_t v32 = a3;
  uint64_t v38 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Column<[Int]>);
  uint64_t v37 = a1;
  uint64_t result = Column.count.getter(v38);
  if (result < 0) {
    BUG();
  }
  if (result)
  {
    uint64_t v35 = v3;
    unint64_t v36 = a2;
    unint64_t v6 = 0;
    uint64_t v33 = result;
    while (1)
    {
      if (v6 == result) {
        BUG();
      }
      Column.subscript.getter(v6, v38);
      id v7 = *(void **)&v31[0];
      if (!*(void *)&v31[0]) {
        id v7 = _swiftEmptyArrayStorage;
      }
      unint64_t v41 = v6;
      uint64_t v8 = v7[2];
      unint64_t v9 = v36;
      if (v8 != v36) {
        break;
      }
      if (v36)
      {
        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for FeatureMatrixBuilder<Double>);
        unint64_t v10 = 0;
        do
        {
          unint64_t v11 = v10 + v32;
          if (__OFADD__(v10, v32)) {
            BUG();
          }
          if (v10 >= v7[2]) {
            BUG();
          }
          *(double *)&long long v39 = (double)(int)v7[v10++ + 4];
          uint64_t v12 = specialized DenseMatrix.subscript.modify(v31, v41, v11);
          *uint64_t v13 = v39;
          ((void (*)(_OWORD *, void))v12)(v31, 0);
        }
        while (v36 != v10);
      }
      unint64_t v6 = v41 + 1;
      swift_bridgeObjectRelease((_BYTE)v7);
      uint64_t result = v33;
      if (v6 == v33) {
        return result;
      }
    }
    *(void *)&v31[0] = 0;
    *(void *)&long long v39 = v8;
    *((void *)&v31[0] + 1) = 0xE000000000000000;
    _StringGuts.grow(_:)(81);
    v14._uint64_t countAndFlagsBits = 0xD000000000000015;
    v14._char object = "ues for feature '" + 0x8000000000000000;
    String.append(_:)(v14);
    unint64_t v40 = v9;
    uint64_t v15 = dispatch thunk of CustomStringConvertible.description.getter(&type metadata for Int, &protocol witness table for Int);
    char v17 = (char)v16;
    v14._uint64_t countAndFlagsBits = v15;
    v14._char object = v16;
    String.append(_:)(v14);
    swift_bridgeObjectRelease(v17);
    v14._uint64_t countAndFlagsBits = 0xD000000000000017;
    v14._char object = "Expected arrays with " + 0x8000000000000000;
    String.append(_:)(v14);
    uint64_t v18 = Column.name.getter(v38);
    char v20 = (char)v19;
    v14._uint64_t countAndFlagsBits = v18;
    v14._char object = v19;
    String.append(_:)(v14);
    swift_bridgeObjectRelease(v20);
    v14._uint64_t countAndFlagsBits = 0x6720747562202C27;
    v14._char object = (void *)0xEB0000000020746FLL;
    String.append(_:)(v14);
    swift_bridgeObjectRelease((_BYTE)v7);
    unint64_t v40 = v39;
    uint64_t v21 = dispatch thunk of CustomStringConvertible.description.getter(&type metadata for Int, &protocol witness table for Int);
    char v23 = (char)v22;
    v14._uint64_t countAndFlagsBits = v21;
    v14._char object = v22;
    String.append(_:)(v14);
    swift_bridgeObjectRelease(v23);
    v14._char object = " elements for feature '" + 0x8000000000000000;
    v14._uint64_t countAndFlagsBits = 0xD000000000000011;
    String.append(_:)(v14);
    unint64_t v40 = v41;
    uint64_t v24 = dispatch thunk of CustomStringConvertible.description.getter(&type metadata for Int, &protocol witness table for Int);
    char v26 = (char)v25;
    v14._uint64_t countAndFlagsBits = v24;
    v14._char object = v25;
    String.append(_:)(v14);
    swift_bridgeObjectRelease(v26);
    v14._uint64_t countAndFlagsBits = 46;
    v14._char object = (void *)0xE100000000000000;
    String.append(_:)(v14);
    long long v39 = v31[0];
    v14._char object = (void *)lazy protocol witness table accessor for type MLCreateError and conformance MLCreateError();
    swift_allocError(&type metadata for MLCreateError, v14._object, 0, 0);
    *(_OWORD *)uint64_t v27 = v39;
    *(_OWORD *)(v27 + 16) = 0;
    *(_OWORD *)(v27 + 32) = 0;
    *(unsigned char *)(v27 + 48) = 0;
    return swift_willThrow(&type metadata for MLCreateError, v14._object, v27, v28, v29, v30);
  }
  return result;
}

{
  uint64_t v3;
  uint64_t v4;
  uint64_t result;
  unint64_t v6;
  void *v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  void (*v12)(uint64_t);
  _DWORD *v13;
  Swift::String v14;
  uint64_t v15;
  void *v16;
  char v17;
  uint64_t v18;
  void *v19;
  char v20;
  uint64_t v21;
  void *v22;
  char v23;
  uint64_t v24;
  void *v25;
  char v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  _OWORD v31[2];
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  uint64_t v37;
  uint64_t v38;
  long long v39;
  unint64_t v40;
  unint64_t v41;

  uint64_t v34 = v4;
  uint64_t v32 = a3;
  uint64_t v38 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Column<[Float]>);
  uint64_t v37 = a1;
  uint64_t result = Column.count.getter(v38);
  if (result < 0) {
    BUG();
  }
  if (result)
  {
    uint64_t v35 = v3;
    unint64_t v36 = a2;
    unint64_t v6 = 0;
    uint64_t v33 = result;
    while (1)
    {
      if (v6 == result) {
        BUG();
      }
      Column.subscript.getter(v6, v38);
      id v7 = *(void **)&v31[0];
      if (!*(void *)&v31[0]) {
        id v7 = _swiftEmptyArrayStorage;
      }
      unint64_t v41 = v6;
      uint64_t v8 = v7[2];
      unint64_t v9 = v36;
      if (v8 != v36) {
        break;
      }
      if (v36)
      {
        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for FeatureMatrixBuilder<Float>);
        unint64_t v10 = 0;
        do
        {
          unint64_t v11 = v10 + v32;
          if (__OFADD__(v10, v32)) {
            BUG();
          }
          if (v10 >= v7[2]) {
            BUG();
          }
          LODWORD(v39) = *((_DWORD *)v7 + v10++ + 8);
          uint64_t v12 = specialized DenseMatrix.subscript.modify(v31, v41, v11);
          *uint64_t v13 = v39;
          ((void (*)(_OWORD *, void))v12)(v31, 0);
        }
        while (v36 != v10);
      }
      unint64_t v6 = v41 + 1;
      swift_bridgeObjectRelease((_BYTE)v7);
      uint64_t result = v33;
      if (v6 == v33) {
        return result;
      }
    }
    *(void *)&v31[0] = 0;
    *(void *)&long long v39 = v8;
    *((void *)&v31[0] + 1) = 0xE000000000000000;
    _StringGuts.grow(_:)(81);
    v14._uint64_t countAndFlagsBits = 0xD000000000000015;
    v14._char object = "ues for feature '" + 0x8000000000000000;
    String.append(_:)(v14);
    unint64_t v40 = v9;
    uint64_t v15 = dispatch thunk of CustomStringConvertible.description.getter(&type metadata for Int, &protocol witness table for Int);
    char v17 = (char)v16;
    v14._uint64_t countAndFlagsBits = v15;
    v14._char object = v16;
    String.append(_:)(v14);
    swift_bridgeObjectRelease(v17);
    v14._uint64_t countAndFlagsBits = 0xD000000000000017;
    v14._char object = "Expected arrays with " + 0x8000000000000000;
    String.append(_:)(v14);
    uint64_t v18 = Column.name.getter(v38);
    char v20 = (char)v19;
    v14._uint64_t countAndFlagsBits = v18;
    v14._char object = v19;
    String.append(_:)(v14);
    swift_bridgeObjectRelease(v20);
    v14._uint64_t countAndFlagsBits = 0x6720747562202C27;
    v14._char object = (void *)0xEB0000000020746FLL;
    String.append(_:)(v14);
    swift_bridgeObjectRelease((_BYTE)v7);
    unint64_t v40 = v39;
    uint64_t v21 = dispatch thunk of CustomStringConvertible.description.getter(&type metadata for Int, &protocol witness table for Int);
    char v23 = (char)v22;
    v14._uint64_t countAndFlagsBits = v21;
    v14._char object = v22;
    String.append(_:)(v14);
    swift_bridgeObjectRelease(v23);
    v14._char object = " elements for feature '" + 0x8000000000000000;
    v14._uint64_t countAndFlagsBits = 0xD000000000000011;
    String.append(_:)(v14);
    unint64_t v40 = v41;
    uint64_t v24 = dispatch thunk of CustomStringConvertible.description.getter(&type metadata for Int, &protocol witness table for Int);
    char v26 = (char)v25;
    v14._uint64_t countAndFlagsBits = v24;
    v14._char object = v25;
    String.append(_:)(v14);
    swift_bridgeObjectRelease(v26);
    v14._uint64_t countAndFlagsBits = 46;
    v14._char object = (void *)0xE100000000000000;
    String.append(_:)(v14);
    long long v39 = v31[0];
    v14._char object = (void *)lazy protocol witness table accessor for type MLCreateError and conformance MLCreateError();
    swift_allocError(&type metadata for MLCreateError, v14._object, 0, 0);
    *(_OWORD *)uint64_t v27 = v39;
    *(_OWORD *)(v27 + 16) = 0;
    *(_OWORD *)(v27 + 32) = 0;
    *(unsigned char *)(v27 + 48) = 0;
    return swift_willThrow(&type metadata for MLCreateError, v14._object, v27, v28, v29, v30);
  }
  return result;
}

{
  uint64_t v3;
  uint64_t v4;
  uint64_t result;
  unint64_t v6;
  void *v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  float v12;
  void (*v13)(uint64_t);
  _DWORD *v14;
  Swift::String v15;
  uint64_t v16;
  void *v17;
  char v18;
  uint64_t v19;
  void *v20;
  char v21;
  uint64_t v22;
  void *v23;
  char v24;
  uint64_t v25;
  void *v26;
  char v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  _OWORD v32[2];
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  unint64_t v37;
  uint64_t v38;
  uint64_t v39;
  long long v40;
  unint64_t v41;
  unint64_t v42;

  uint64_t v35 = v4;
  uint64_t v33 = a3;
  long long v39 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Column<[Double]>);
  uint64_t v38 = a1;
  uint64_t result = Column.count.getter(v39);
  if (result < 0) {
    BUG();
  }
  if (result)
  {
    unint64_t v36 = v3;
    uint64_t v37 = a2;
    unint64_t v6 = 0;
    uint64_t v34 = result;
    while (1)
    {
      if (v6 == result) {
        BUG();
      }
      Column.subscript.getter(v6, v39);
      id v7 = *(void **)&v32[0];
      if (!*(void *)&v32[0]) {
        id v7 = _swiftEmptyArrayStorage;
      }
      uint64_t v42 = v6;
      uint64_t v8 = v7[2];
      unint64_t v9 = v37;
      if (v8 != v37) {
        break;
      }
      if (v37)
      {
        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for FeatureMatrixBuilder<Float>);
        unint64_t v10 = 0;
        do
        {
          unint64_t v11 = v10 + v33;
          if (__OFADD__(v10, v33)) {
            BUG();
          }
          if (v10 >= v7[2]) {
            BUG();
          }
          uint64_t v12 = *(double *)&v7[v10 + 4];
          *(float *)&unint64_t v40 = v12;
          ++v10;
          uint64_t v13 = specialized DenseMatrix.subscript.modify(v32, v42, v11);
          void *v14 = v40;
          ((void (*)(_OWORD *, void))v13)(v32, 0);
        }
        while (v37 != v10);
      }
      unint64_t v6 = v42 + 1;
      swift_bridgeObjectRelease((_BYTE)v7);
      uint64_t result = v34;
      if (v6 == v34) {
        return result;
      }
    }
    *(void *)&v32[0] = 0;
    *(void *)&unint64_t v40 = v8;
    *((void *)&v32[0] + 1) = 0xE000000000000000;
    _StringGuts.grow(_:)(81);
    v15._uint64_t countAndFlagsBits = 0xD000000000000015;
    v15._char object = "ues for feature '" + 0x8000000000000000;
    String.append(_:)(v15);
    unint64_t v41 = v9;
    float v16 = dispatch thunk of CustomStringConvertible.description.getter(&type metadata for Int, &protocol witness table for Int);
    uint64_t v18 = (char)v17;
    v15._uint64_t countAndFlagsBits = v16;
    v15._char object = v17;
    String.append(_:)(v15);
    swift_bridgeObjectRelease(v18);
    v15._uint64_t countAndFlagsBits = 0xD000000000000017;
    v15._char object = "Expected arrays with " + 0x8000000000000000;
    String.append(_:)(v15);
    int64_t v19 = Column.name.getter(v39);
    uint64_t v21 = (char)v20;
    v15._uint64_t countAndFlagsBits = v19;
    v15._char object = v20;
    String.append(_:)(v15);
    swift_bridgeObjectRelease(v21);
    v15._uint64_t countAndFlagsBits = 0x6720747562202C27;
    v15._char object = (void *)0xEB0000000020746FLL;
    String.append(_:)(v15);
    swift_bridgeObjectRelease((_BYTE)v7);
    unint64_t v41 = v40;
    uint64_t v22 = dispatch thunk of CustomStringConvertible.description.getter(&type metadata for Int, &protocol witness table for Int);
    uint64_t v24 = (char)v23;
    v15._uint64_t countAndFlagsBits = v22;
    v15._char object = v23;
    String.append(_:)(v15);
    swift_bridgeObjectRelease(v24);
    v15._char object = " elements for feature '" + 0x8000000000000000;
    v15._uint64_t countAndFlagsBits = 0xD000000000000011;
    String.append(_:)(v15);
    unint64_t v41 = v42;
    int64_t v25 = dispatch thunk of CustomStringConvertible.description.getter(&type metadata for Int, &protocol witness table for Int);
    uint64_t v27 = (char)v26;
    v15._uint64_t countAndFlagsBits = v25;
    v15._char object = v26;
    String.append(_:)(v15);
    swift_bridgeObjectRelease(v27);
    v15._uint64_t countAndFlagsBits = 46;
    v15._char object = (void *)0xE100000000000000;
    String.append(_:)(v15);
    unint64_t v40 = v32[0];
    v15._char object = (void *)lazy protocol witness table accessor for type MLCreateError and conformance MLCreateError();
    swift_allocError(&type metadata for MLCreateError, v15._object, 0, 0);
    *(_OWORD *)uint64_t v28 = v40;
    *(_OWORD *)(v28 + 16) = 0;
    *(_OWORD *)(v28 + 32) = 0;
    *(unsigned char *)(v28 + 48) = 0;
    return swift_willThrow(&type metadata for MLCreateError, v15._object, v28, v29, v30, v31);
  }
  return result;
}

{
  uint64_t v3;
  uint64_t v4;
  uint64_t result;
  unint64_t v6;
  float *v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  void (*v12)(uint64_t);
  void *v13;
  Swift::String v14;
  uint64_t v15;
  void *v16;
  char v17;
  uint64_t v18;
  void *v19;
  char v20;
  uint64_t v21;
  void *v22;
  char v23;
  uint64_t v24;
  void *v25;
  char v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  _OWORD v31[2];
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  uint64_t v37;
  uint64_t v38;
  long long v39;
  unint64_t v40;
  unint64_t v41;

  uint64_t v34 = v4;
  uint64_t v32 = a3;
  uint64_t v38 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Column<[Float]>);
  uint64_t v37 = a1;
  uint64_t result = Column.count.getter(v38);
  if (result < 0) {
    BUG();
  }
  if (result)
  {
    uint64_t v35 = v3;
    unint64_t v36 = a2;
    unint64_t v6 = 0;
    uint64_t v33 = result;
    while (1)
    {
      if (v6 == result) {
        BUG();
      }
      Column.subscript.getter(v6, v38);
      id v7 = *(float **)&v31[0];
      if (!*(void *)&v31[0]) {
        id v7 = (float *)_swiftEmptyArrayStorage;
      }
      unint64_t v41 = v6;
      uint64_t v8 = *((void *)v7 + 2);
      unint64_t v9 = v36;
      if (v8 != v36) {
        break;
      }
      if (v36)
      {
        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for FeatureMatrixBuilder<Double>);
        unint64_t v10 = 0;
        do
        {
          unint64_t v11 = v10 + v32;
          if (__OFADD__(v10, v32)) {
            BUG();
          }
          if (v10 >= *((void *)v7 + 2)) {
            BUG();
          }
          *(double *)&long long v39 = v7[v10++ + 8];
          uint64_t v12 = specialized DenseMatrix.subscript.modify(v31, v41, v11);
          *uint64_t v13 = v39;
          ((void (*)(_OWORD *, void))v12)(v31, 0);
        }
        while (v36 != v10);
      }
      unint64_t v6 = v41 + 1;
      swift_bridgeObjectRelease((_BYTE)v7);
      uint64_t result = v33;
      if (v6 == v33) {
        return result;
      }
    }
    *(void *)&v31[0] = 0;
    *(void *)&long long v39 = v8;
    *((void *)&v31[0] + 1) = 0xE000000000000000;
    _StringGuts.grow(_:)(81);
    v14._uint64_t countAndFlagsBits = 0xD000000000000015;
    v14._char object = "ues for feature '" + 0x8000000000000000;
    String.append(_:)(v14);
    unint64_t v40 = v9;
    uint64_t v15 = dispatch thunk of CustomStringConvertible.description.getter(&type metadata for Int, &protocol witness table for Int);
    char v17 = (char)v16;
    v14._uint64_t countAndFlagsBits = v15;
    v14._char object = v16;
    String.append(_:)(v14);
    swift_bridgeObjectRelease(v17);
    v14._uint64_t countAndFlagsBits = 0xD000000000000017;
    v14._char object = "Expected arrays with " + 0x8000000000000000;
    String.append(_:)(v14);
    uint64_t v18 = Column.name.getter(v38);
    char v20 = (char)v19;
    v14._uint64_t countAndFlagsBits = v18;
    v14._char object = v19;
    String.append(_:)(v14);
    swift_bridgeObjectRelease(v20);
    v14._uint64_t countAndFlagsBits = 0x6720747562202C27;
    v14._char object = (void *)0xEB0000000020746FLL;
    String.append(_:)(v14);
    swift_bridgeObjectRelease((_BYTE)v7);
    unint64_t v40 = v39;
    uint64_t v21 = dispatch thunk of CustomStringConvertible.description.getter(&type metadata for Int, &protocol witness table for Int);
    char v23 = (char)v22;
    v14._uint64_t countAndFlagsBits = v21;
    v14._char object = v22;
    String.append(_:)(v14);
    swift_bridgeObjectRelease(v23);
    v14._char object = " elements for feature '" + 0x8000000000000000;
    v14._uint64_t countAndFlagsBits = 0xD000000000000011;
    String.append(_:)(v14);
    unint64_t v40 = v41;
    uint64_t v24 = dispatch thunk of CustomStringConvertible.description.getter(&type metadata for Int, &protocol witness table for Int);
    char v26 = (char)v25;
    v14._uint64_t countAndFlagsBits = v24;
    v14._char object = v25;
    String.append(_:)(v14);
    swift_bridgeObjectRelease(v26);
    v14._uint64_t countAndFlagsBits = 46;
    v14._char object = (void *)0xE100000000000000;
    String.append(_:)(v14);
    long long v39 = v31[0];
    v14._char object = (void *)lazy protocol witness table accessor for type MLCreateError and conformance MLCreateError();
    swift_allocError(&type metadata for MLCreateError, v14._object, 0, 0);
    *(_OWORD *)uint64_t v27 = v39;
    *(_OWORD *)(v27 + 16) = 0;
    *(_OWORD *)(v27 + 32) = 0;
    *(unsigned char *)(v27 + 48) = 0;
    return swift_willThrow(&type metadata for MLCreateError, v14._object, v27, v28, v29, v30);
  }
  return result;
}

{
  uint64_t v3;
  uint64_t v4;
  uint64_t result;
  unint64_t v6;
  void *v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  void (*v12)(uint64_t);
  void *v13;
  Swift::String v14;
  uint64_t v15;
  void *v16;
  char v17;
  uint64_t v18;
  void *v19;
  char v20;
  uint64_t v21;
  void *v22;
  char v23;
  uint64_t v24;
  void *v25;
  char v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  _OWORD v31[2];
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  uint64_t v37;
  uint64_t v38;
  long long v39;
  unint64_t v40;
  unint64_t v41;

  uint64_t v34 = v4;
  uint64_t v32 = a3;
  uint64_t v38 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Column<[Double]>);
  uint64_t v37 = a1;
  uint64_t result = Column.count.getter(v38);
  if (result < 0) {
    BUG();
  }
  if (result)
  {
    uint64_t v35 = v3;
    unint64_t v36 = a2;
    unint64_t v6 = 0;
    uint64_t v33 = result;
    while (1)
    {
      if (v6 == result) {
        BUG();
      }
      Column.subscript.getter(v6, v38);
      id v7 = *(void **)&v31[0];
      if (!*(void *)&v31[0]) {
        id v7 = _swiftEmptyArrayStorage;
      }
      unint64_t v41 = v6;
      uint64_t v8 = v7[2];
      unint64_t v9 = v36;
      if (v8 != v36) {
        break;
      }
      if (v36)
      {
        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for FeatureMatrixBuilder<Double>);
        unint64_t v10 = 0;
        do
        {
          unint64_t v11 = v10 + v32;
          if (__OFADD__(v10, v32)) {
            BUG();
          }
          if (v10 >= v7[2]) {
            BUG();
          }
          *(void *)&long long v39 = v7[v10++ + 4];
          uint64_t v12 = specialized DenseMatrix.subscript.modify(v31, v41, v11);
          *uint64_t v13 = v39;
          ((void (*)(_OWORD *, void))v12)(v31, 0);
        }
        while (v36 != v10);
      }
      unint64_t v6 = v41 + 1;
      swift_bridgeObjectRelease((_BYTE)v7);
      uint64_t result = v33;
      if (v6 == v33) {
        return result;
      }
    }
    *(void *)&v31[0] = 0;
    *(void *)&long long v39 = v8;
    *((void *)&v31[0] + 1) = 0xE000000000000000;
    _StringGuts.grow(_:)(81);
    v14._uint64_t countAndFlagsBits = 0xD000000000000015;
    v14._char object = "ues for feature '" + 0x8000000000000000;
    String.append(_:)(v14);
    unint64_t v40 = v9;
    uint64_t v15 = dispatch thunk of CustomStringConvertible.description.getter(&type metadata for Int, &protocol witness table for Int);
    char v17 = (char)v16;
    v14._uint64_t countAndFlagsBits = v15;
    v14._char object = v16;
    String.append(_:)(v14);
    swift_bridgeObjectRelease(v17);
    v14._uint64_t countAndFlagsBits = 0xD000000000000017;
    v14._char object = "Expected arrays with " + 0x8000000000000000;
    String.append(_:)(v14);
    uint64_t v18 = Column.name.getter(v38);
    char v20 = (char)v19;
    v14._uint64_t countAndFlagsBits = v18;
    v14._char object = v19;
    String.append(_:)(v14);
    swift_bridgeObjectRelease(v20);
    v14._uint64_t countAndFlagsBits = 0x6720747562202C27;
    v14._char object = (void *)0xEB0000000020746FLL;
    String.append(_:)(v14);
    swift_bridgeObjectRelease((_BYTE)v7);
    unint64_t v40 = v39;
    uint64_t v21 = dispatch thunk of CustomStringConvertible.description.getter(&type metadata for Int, &protocol witness table for Int);
    char v23 = (char)v22;
    v14._uint64_t countAndFlagsBits = v21;
    v14._char object = v22;
    String.append(_:)(v14);
    swift_bridgeObjectRelease(v23);
    v14._char object = " elements for feature '" + 0x8000000000000000;
    v14._uint64_t countAndFlagsBits = 0xD000000000000011;
    String.append(_:)(v14);
    unint64_t v40 = v41;
    uint64_t v24 = dispatch thunk of CustomStringConvertible.description.getter(&type metadata for Int, &protocol witness table for Int);
    char v26 = (char)v25;
    v14._uint64_t countAndFlagsBits = v24;
    v14._char object = v25;
    String.append(_:)(v14);
    swift_bridgeObjectRelease(v26);
    v14._uint64_t countAndFlagsBits = 46;
    v14._char object = (void *)0xE100000000000000;
    String.append(_:)(v14);
    long long v39 = v31[0];
    v14._char object = (void *)lazy protocol witness table accessor for type MLCreateError and conformance MLCreateError();
    swift_allocError(&type metadata for MLCreateError, v14._object, 0, 0);
    *(_OWORD *)uint64_t v27 = v39;
    *(_OWORD *)(v27 + 16) = 0;
    *(_OWORD *)(v27 + 32) = 0;
    *(unsigned char *)(v27 + 48) = 0;
    return swift_willThrow(&type metadata for MLCreateError, v14._object, v27, v28, v29, v30);
  }
  return result;
}

{
  uint64_t v3;
  uint64_t v4;
  int64_t v5;
  void *v6;
  void *v7;
  uint64_t v8;
  int64_t v9;
  void *v10;
  void *v11;
  uint64_t result;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  BOOL v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  void *v26;
  uint64_t v27;
  void (*v28)(uint64_t);
  _DWORD *v29;
  Swift::String v30;
  uint64_t v31;
  void *v32;
  char v33;
  uint64_t v34;
  void *v35;
  char v36;
  uint64_t v37;
  uint64_t v38;
  void *v39;
  char v40;
  uint64_t v41;
  void *v42;
  char v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  _OWORD v48[2];
  uint64_t v49;
  uint64_t v50;
  unint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  long long v55;
  unint64_t v56;
  unint64_t v57;
  _OWORD *v58;
  uint64_t v59;
  uint64_t v60;
  int v61;
  unint64_t v62;
  uint64_t v63;
  uint64_t v64;
  _OWORD *v65;

  char v53 = v4;
  Swift::String v50 = a3;
  uint64_t v62 = a2;
  uint64_t v5 = *(void *)(*(void *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for MLShapedArray<Float>?)
                             - 8)
                 + 64);
  unint64_t v6 = alloca(v5);
  id v7 = alloca(v5);
  uint64_t v58 = v48;
  uint64_t v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for MLShapedArray<Float>);
  uint64_t v64 = *(void *)(v8 - 8);
  unint64_t v9 = *(void *)(v64 + 64);
  unint64_t v10 = alloca(v9);
  unint64_t v11 = alloca(v9);
  uint64_t v60 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Column<MLShapedArray<Float>>);
  uint64_t v59 = a1;
  uint64_t result = Column.count.getter(v60);
  if (result < 0) {
    BUG();
  }
  uint64_t v54 = v3;
  if (result)
  {
    uint64_t v13 = 0;
    long long v63 = v8;
    uint64_t v65 = v48;
    uint64_t v52 = result;
    while (1)
    {
      if (v13 == result) {
        BUG();
      }
      Swift::String v14 = v8;
      uint64_t v15 = (uint64_t)v58;
      Column.subscript.getter(v13, v60);
      float v16 = v15;
      char v17 = v14;
      if (__swift_getEnumTagSinglePayload(v16, 1, v14) == 1)
      {
        uint64_t v18 = lazy protocol witness table accessor for type FullyConnectedNetworkClassifier<Float, String> and conformance FullyConnectedNetworkClassifier<A, B>(&lazy protocol witness table cache variable for type MLShapedArray<Float> and conformance MLShapedArray<A>, &demangling cache variable for type metadata for MLShapedArray<Float>, (uint64_t)&protocol conformance descriptor for MLShapedArray<A>);
        MLShapedArrayProtocol.init(arrayLiteral:)(_swiftEmptyArrayStorage, v14, v18);
        char v17 = v14;
        outlined destroy of Either<LogisticRegressionClassifier<Float, String>, FullyConnectedNetworkClassifier<Float, String>>((uint64_t)v58, &demangling cache variable for type metadata for MLShapedArray<Float>?);
      }
      else
      {
        (*(void (**)(_OWORD *, uint64_t, uint64_t))(v64 + 32))(v65, v16, v14);
      }
      int64_t v19 = MLShapedArray.shape.getter(v17);
      char v20 = *(void *)(v19 + 16) == 1;
      uint64_t v21 = v62;
      char v57 = v13;
      if (!v20 || *(void *)(v19 + 32) != v62) {
        break;
      }
      uint64_t v51 = v13 + 1;
      swift_bridgeObjectRelease(v19);
      if (v21 < 0) {
        BUG();
      }
      if (v21)
      {
        uint64_t v22 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for FeatureMatrixBuilder<Float>);
        uint64_t v49 = v53 + *(int *)(v22 + 44);
        char v23 = 0;
        do
        {
          uint64_t v24 = v23 + v50;
          if (__OFADD__(v23, v50)) {
            BUG();
          }
          *(void *)&uint64_t v55 = v23 + 1;
          int64_t v25 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Int>);
          char v26 = (void *)swift_allocObject(v25, 40, 7);
          v26[2] = 1;
          v26[3] = 2;
          void v26[4] = v23;
          uint64_t v27 = lazy protocol witness table accessor for type FullyConnectedNetworkClassifier<Float, String> and conformance FullyConnectedNetworkClassifier<A, B>(&lazy protocol witness table cache variable for type MLShapedArray<Float> and conformance MLShapedArray<A>, &demangling cache variable for type metadata for MLShapedArray<Float>, (uint64_t)&protocol conformance descriptor for MLShapedArray<A>);
          MLShapedArrayProtocol.subscript.getter(v26, v63, v27);
          swift_bridgeObjectRelease((_BYTE)v26);
          uint64_t v61 = v48[0];
          uint64_t v28 = specialized DenseMatrix.subscript.modify(v48, v57, v24);
          uint64_t *v29 = v61;
          ((void (*)(_OWORD *, void))v28)(v48, 0);
          char v23 = v55;
        }
        while (v62 != (void)v55);
      }
      uint64_t v8 = v63;
      (*(void (**)(_OWORD *, uint64_t))(v64 + 8))(v65, v63);
      uint64_t v13 = v51;
      uint64_t result = v52;
      if (v51 == v52) {
        return result;
      }
    }
    swift_bridgeObjectRelease(v19);
    *(void *)&v48[0] = 0;
    *((void *)&v48[0] + 1) = 0xE000000000000000;
    _StringGuts.grow(_:)(84);
    v30._uint64_t countAndFlagsBits = 0xD000000000000023;
    v30._char object = " elements at row " + 0x8000000000000000;
    String.append(_:)(v30);
    uint64_t v56 = v62;
    double v31 = dispatch thunk of CustomStringConvertible.description.getter(&type metadata for Int, &protocol witness table for Int);
    uint64_t v33 = (char)v32;
    v30._uint64_t countAndFlagsBits = v31;
    v30._char object = v32;
    String.append(_:)(v30);
    swift_bridgeObjectRelease(v33);
    v30._uint64_t countAndFlagsBits = 0x656620726F66205DLL;
    v30._char object = (void *)0xEF27206572757461;
    String.append(_:)(v30);
    uint64_t v34 = Column.name.getter(v60);
    unint64_t v36 = (char)v35;
    v30._uint64_t countAndFlagsBits = v34;
    v30._char object = v35;
    String.append(_:)(v30);
    swift_bridgeObjectRelease(v36);
    v30._char object = "arrays with shape [" + 0x8000000000000000;
    v30._uint64_t countAndFlagsBits = 0xD000000000000011;
    String.append(_:)(v30);
    uint64_t v37 = MLShapedArray.shape.getter(v17);
    uint64_t v38 = Array.description.getter(v37, &type metadata for Int);
    unint64_t v40 = (char)v39;
    v30._uint64_t countAndFlagsBits = v38;
    v30._char object = v39;
    String.append(_:)(v30);
    swift_bridgeObjectRelease(v37);
    swift_bridgeObjectRelease(v40);
    v30._uint64_t countAndFlagsBits = 0x20776F7220746120;
    v30._char object = (void *)0xE800000000000000;
    String.append(_:)(v30);
    uint64_t v56 = v57;
    unint64_t v41 = dispatch thunk of CustomStringConvertible.description.getter(&type metadata for Int, &protocol witness table for Int);
    uint64_t v43 = (char)v42;
    v30._uint64_t countAndFlagsBits = v41;
    v30._char object = v42;
    String.append(_:)(v30);
    swift_bridgeObjectRelease(v43);
    v30._uint64_t countAndFlagsBits = 46;
    v30._char object = (void *)0xE100000000000000;
    String.append(_:)(v30);
    uint64_t v55 = v48[0];
    v30._char object = (void *)lazy protocol witness table accessor for type MLCreateError and conformance MLCreateError();
    swift_allocError(&type metadata for MLCreateError, v30._object, 0, 0);
    *(_OWORD *)uint64_t v44 = v55;
    *(_OWORD *)(v44 + 16) = 0;
    *(_OWORD *)(v44 + 32) = 0;
    *(unsigned char *)(v44 + 48) = 0;
    swift_willThrow(&type metadata for MLCreateError, v30._object, v44, v45, v46, v47);
    return (*(uint64_t (**)(_OWORD *, uint64_t))(v64 + 8))(v65, v63);
  }
  return result;
}

{
  uint64_t v3;
  uint64_t v4;
  int64_t v5;
  void *v6;
  void *v7;
  uint64_t v8;
  int64_t v9;
  void *v10;
  void *v11;
  uint64_t result;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  BOOL v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  void *v26;
  uint64_t v27;
  float v28;
  void (*v29)(uint64_t);
  float *v30;
  Swift::String v31;
  uint64_t v32;
  void *v33;
  char v34;
  uint64_t v35;
  void *v36;
  char v37;
  uint64_t v38;
  uint64_t v39;
  void *v40;
  char v41;
  uint64_t v42;
  void *v43;
  char v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  double v49[4];
  uint64_t v50;
  uint64_t v51;
  unint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  long long v56;
  unint64_t v57;
  unint64_t v58;
  double *v59;
  uint64_t v60;
  uint64_t v61;
  float v62;
  unint64_t v63;
  uint64_t v64;
  uint64_t v65;
  double *v66;

  uint64_t v54 = v4;
  uint64_t v51 = a3;
  long long v63 = a2;
  uint64_t v5 = *(void *)(*(void *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for MLShapedArray<Double>?)
                             - 8)
                 + 64);
  unint64_t v6 = alloca(v5);
  id v7 = alloca(v5);
  uint64_t v59 = v49;
  uint64_t v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for MLShapedArray<Double>);
  uint64_t v65 = *(void *)(v8 - 8);
  unint64_t v9 = *(void *)(v65 + 64);
  unint64_t v10 = alloca(v9);
  unint64_t v11 = alloca(v9);
  uint64_t v61 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Column<MLShapedArray<Double>>);
  uint64_t v60 = a1;
  uint64_t result = Column.count.getter(v61);
  if (result < 0) {
    BUG();
  }
  uint64_t v55 = v3;
  if (result)
  {
    uint64_t v13 = 0;
    uint64_t v64 = v8;
    uint64_t v66 = v49;
    char v53 = result;
    while (1)
    {
      if (v13 == result) {
        BUG();
      }
      Swift::String v14 = v8;
      uint64_t v15 = (uint64_t)v59;
      Column.subscript.getter(v13, v61);
      float v16 = v15;
      char v17 = v14;
      if (__swift_getEnumTagSinglePayload(v16, 1, v14) == 1)
      {
        uint64_t v18 = lazy protocol witness table accessor for type FullyConnectedNetworkClassifier<Float, String> and conformance FullyConnectedNetworkClassifier<A, B>(&lazy protocol witness table cache variable for type MLShapedArray<Double> and conformance MLShapedArray<A>, &demangling cache variable for type metadata for MLShapedArray<Double>, (uint64_t)&protocol conformance descriptor for MLShapedArray<A>);
        MLShapedArrayProtocol.init(arrayLiteral:)(_swiftEmptyArrayStorage, v14, v18);
        char v17 = v14;
        outlined destroy of Either<LogisticRegressionClassifier<Float, String>, FullyConnectedNetworkClassifier<Float, String>>((uint64_t)v59, &demangling cache variable for type metadata for MLShapedArray<Double>?);
      }
      else
      {
        (*(void (**)(double *, uint64_t, uint64_t))(v65 + 32))(v66, v16, v14);
      }
      int64_t v19 = MLShapedArray.shape.getter(v17);
      char v20 = *(void *)(v19 + 16) == 1;
      uint64_t v21 = v63;
      uint64_t v58 = v13;
      if (!v20 || *(void *)(v19 + 32) != v63) {
        break;
      }
      uint64_t v52 = v13 + 1;
      swift_bridgeObjectRelease(v19);
      if (v21 < 0) {
        BUG();
      }
      if (v21)
      {
        uint64_t v22 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for FeatureMatrixBuilder<Float>);
        Swift::String v50 = v54 + *(int *)(v22 + 44);
        char v23 = 0;
        do
        {
          uint64_t v24 = v23 + v51;
          if (__OFADD__(v23, v51)) {
            BUG();
          }
          *(void *)&uint64_t v56 = v23 + 1;
          int64_t v25 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Int>);
          char v26 = (void *)swift_allocObject(v25, 40, 7);
          v26[2] = 1;
          v26[3] = 2;
          void v26[4] = v23;
          uint64_t v27 = lazy protocol witness table accessor for type FullyConnectedNetworkClassifier<Float, String> and conformance FullyConnectedNetworkClassifier<A, B>(&lazy protocol witness table cache variable for type MLShapedArray<Double> and conformance MLShapedArray<A>, &demangling cache variable for type metadata for MLShapedArray<Double>, (uint64_t)&protocol conformance descriptor for MLShapedArray<A>);
          MLShapedArrayProtocol.subscript.getter(v26, v64, v27);
          swift_bridgeObjectRelease((_BYTE)v26);
          uint64_t v28 = v49[0];
          uint64_t v62 = v28;
          uint64_t v29 = specialized DenseMatrix.subscript.modify(v49, v58, v24);
          *uint64_t v30 = v62;
          ((void (*)(double *, void))v29)(v49, 0);
          char v23 = v56;
        }
        while (v63 != (void)v56);
      }
      uint64_t v8 = v64;
      (*(void (**)(double *, uint64_t))(v65 + 8))(v66, v64);
      uint64_t v13 = v52;
      uint64_t result = v53;
      if (v52 == v53) {
        return result;
      }
    }
    swift_bridgeObjectRelease(v19);
    v49[0] = 0.0;
    v49[1] = -2.681561585988519e154;
    _StringGuts.grow(_:)(84);
    v31._uint64_t countAndFlagsBits = 0xD000000000000023;
    v31._char object = " elements at row " + 0x8000000000000000;
    String.append(_:)(v31);
    char v57 = v63;
    uint64_t v32 = dispatch thunk of CustomStringConvertible.description.getter(&type metadata for Int, &protocol witness table for Int);
    uint64_t v34 = (char)v33;
    v31._uint64_t countAndFlagsBits = v32;
    v31._char object = v33;
    String.append(_:)(v31);
    swift_bridgeObjectRelease(v34);
    v31._uint64_t countAndFlagsBits = 0x656620726F66205DLL;
    v31._char object = (void *)0xEF27206572757461;
    String.append(_:)(v31);
    uint64_t v35 = Column.name.getter(v61);
    uint64_t v37 = (char)v36;
    v31._uint64_t countAndFlagsBits = v35;
    v31._char object = v36;
    String.append(_:)(v31);
    swift_bridgeObjectRelease(v37);
    v31._char object = "arrays with shape [" + 0x8000000000000000;
    v31._uint64_t countAndFlagsBits = 0xD000000000000011;
    String.append(_:)(v31);
    uint64_t v38 = MLShapedArray.shape.getter(v17);
    long long v39 = Array.description.getter(v38, &type metadata for Int);
    unint64_t v41 = (char)v40;
    v31._uint64_t countAndFlagsBits = v39;
    v31._char object = v40;
    String.append(_:)(v31);
    swift_bridgeObjectRelease(v38);
    swift_bridgeObjectRelease(v41);
    v31._uint64_t countAndFlagsBits = 0x20776F7220746120;
    v31._char object = (void *)0xE800000000000000;
    String.append(_:)(v31);
    char v57 = v58;
    uint64_t v42 = dispatch thunk of CustomStringConvertible.description.getter(&type metadata for Int, &protocol witness table for Int);
    uint64_t v44 = (char)v43;
    v31._uint64_t countAndFlagsBits = v42;
    v31._char object = v43;
    String.append(_:)(v31);
    swift_bridgeObjectRelease(v44);
    v31._uint64_t countAndFlagsBits = 46;
    v31._char object = (void *)0xE100000000000000;
    String.append(_:)(v31);
    uint64_t v56 = *(_OWORD *)v49;
    v31._char object = (void *)lazy protocol witness table accessor for type MLCreateError and conformance MLCreateError();
    swift_allocError(&type metadata for MLCreateError, v31._object, 0, 0);
    *(_OWORD *)uint64_t v45 = v56;
    *(_OWORD *)(v45 + 16) = 0;
    *(_OWORD *)(v45 + 32) = 0;
    *(unsigned char *)(v45 + 48) = 0;
    swift_willThrow(&type metadata for MLCreateError, v31._object, v45, v46, v47, v48);
    return (*(uint64_t (**)(double *, uint64_t))(v65 + 8))(v66, v64);
  }
  return result;
}

{
  uint64_t v3;
  uint64_t v4;
  int64_t v5;
  void *v6;
  void *v7;
  uint64_t v8;
  int64_t v9;
  void *v10;
  void *v11;
  uint64_t result;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  BOOL v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  void *v26;
  uint64_t v27;
  void (*v28)(uint64_t);
  double *v29;
  Swift::String v30;
  uint64_t v31;
  void *v32;
  char v33;
  uint64_t v34;
  void *v35;
  char v36;
  uint64_t v37;
  uint64_t v38;
  void *v39;
  char v40;
  uint64_t v41;
  void *v42;
  char v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  _OWORD v49[2];
  double v50;
  uint64_t v51;
  uint64_t v52;
  unint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  long long v57;
  unint64_t v58;
  unint64_t v59;
  uint64_t *v60;
  uint64_t v61;
  uint64_t v62;
  unint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t *v66;

  uint64_t v55 = v4;
  uint64_t v52 = a3;
  long long v63 = a2;
  uint64_t v5 = *(void *)(*(void *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for MLShapedArray<Float>?)
                             - 8)
                 + 64);
  unint64_t v6 = alloca(v5);
  id v7 = alloca(v5);
  uint64_t v60 = &v48;
  uint64_t v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for MLShapedArray<Float>);
  uint64_t v65 = *(void *)(v8 - 8);
  unint64_t v9 = *(void *)(v65 + 64);
  unint64_t v10 = alloca(v9);
  unint64_t v11 = alloca(v9);
  uint64_t v62 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Column<MLShapedArray<Float>>);
  uint64_t v61 = a1;
  uint64_t result = Column.count.getter(v62);
  if (result < 0) {
    BUG();
  }
  uint64_t v56 = v3;
  if (result)
  {
    uint64_t v13 = 0;
    uint64_t v64 = v8;
    uint64_t v66 = &v48;
    uint64_t v54 = result;
    while (1)
    {
      if (v13 == result) {
        BUG();
      }
      Swift::String v14 = v8;
      uint64_t v15 = (uint64_t)v60;
      Column.subscript.getter(v13, v62);
      float v16 = v15;
      char v17 = v14;
      if (__swift_getEnumTagSinglePayload(v16, 1, v14) == 1)
      {
        uint64_t v18 = lazy protocol witness table accessor for type FullyConnectedNetworkClassifier<Float, String> and conformance FullyConnectedNetworkClassifier<A, B>(&lazy protocol witness table cache variable for type MLShapedArray<Float> and conformance MLShapedArray<A>, &demangling cache variable for type metadata for MLShapedArray<Float>, (uint64_t)&protocol conformance descriptor for MLShapedArray<A>);
        MLShapedArrayProtocol.init(arrayLiteral:)(_swiftEmptyArrayStorage, v14, v18);
        char v17 = v14;
        outlined destroy of Either<LogisticRegressionClassifier<Float, String>, FullyConnectedNetworkClassifier<Float, String>>((uint64_t)v60, &demangling cache variable for type metadata for MLShapedArray<Float>?);
      }
      else
      {
        (*(void (**)(uint64_t *, uint64_t, uint64_t))(v65 + 32))(v66, v16, v14);
      }
      int64_t v19 = MLShapedArray.shape.getter(v17);
      char v20 = *(void *)(v19 + 16) == 1;
      uint64_t v21 = v63;
      uint64_t v59 = v13;
      if (!v20 || *(void *)(v19 + 32) != v63) {
        break;
      }
      char v53 = v13 + 1;
      swift_bridgeObjectRelease(v19);
      if (v21 < 0) {
        BUG();
      }
      if (v21)
      {
        uint64_t v22 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for FeatureMatrixBuilder<Double>);
        uint64_t v51 = v55 + *(int *)(v22 + 44);
        char v23 = 0;
        do
        {
          uint64_t v24 = v23 + v52;
          if (__OFADD__(v23, v52)) {
            BUG();
          }
          *(void *)&char v57 = v23 + 1;
          int64_t v25 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Int>);
          char v26 = (void *)swift_allocObject(v25, 40, 7);
          v26[2] = 1;
          v26[3] = 2;
          void v26[4] = v23;
          uint64_t v27 = lazy protocol witness table accessor for type FullyConnectedNetworkClassifier<Float, String> and conformance FullyConnectedNetworkClassifier<A, B>(&lazy protocol witness table cache variable for type MLShapedArray<Float> and conformance MLShapedArray<A>, &demangling cache variable for type metadata for MLShapedArray<Float>, (uint64_t)&protocol conformance descriptor for MLShapedArray<A>);
          MLShapedArrayProtocol.subscript.getter(v26, v64, v27);
          swift_bridgeObjectRelease((_BYTE)v26);
          Swift::String v50 = *(float *)v49;
          uint64_t v28 = specialized DenseMatrix.subscript.modify(v49, v59, v24);
          uint64_t *v29 = v50;
          ((void (*)(_OWORD *, void))v28)(v49, 0);
          char v23 = v57;
        }
        while (v63 != (void)v57);
      }
      uint64_t v8 = v64;
      (*(void (**)(uint64_t *, uint64_t))(v65 + 8))(v66, v64);
      uint64_t v13 = v53;
      uint64_t result = v54;
      if (v53 == v54) {
        return result;
      }
    }
    swift_bridgeObjectRelease(v19);
    *(void *)&v49[0] = 0;
    *((void *)&v49[0] + 1) = 0xE000000000000000;
    _StringGuts.grow(_:)(84);
    v30._uint64_t countAndFlagsBits = 0xD000000000000023;
    v30._char object = " elements at row " + 0x8000000000000000;
    String.append(_:)(v30);
    uint64_t v58 = v63;
    double v31 = dispatch thunk of CustomStringConvertible.description.getter(&type metadata for Int, &protocol witness table for Int);
    uint64_t v33 = (char)v32;
    v30._uint64_t countAndFlagsBits = v31;
    v30._char object = v32;
    String.append(_:)(v30);
    swift_bridgeObjectRelease(v33);
    v30._uint64_t countAndFlagsBits = 0x656620726F66205DLL;
    v30._char object = (void *)0xEF27206572757461;
    String.append(_:)(v30);
    uint64_t v34 = Column.name.getter(v62);
    unint64_t v36 = (char)v35;
    v30._uint64_t countAndFlagsBits = v34;
    v30._char object = v35;
    String.append(_:)(v30);
    swift_bridgeObjectRelease(v36);
    v30._char object = "arrays with shape [" + 0x8000000000000000;
    v30._uint64_t countAndFlagsBits = 0xD000000000000011;
    String.append(_:)(v30);
    uint64_t v37 = MLShapedArray.shape.getter(v17);
    uint64_t v38 = Array.description.getter(v37, &type metadata for Int);
    unint64_t v40 = (char)v39;
    v30._uint64_t countAndFlagsBits = v38;
    v30._char object = v39;
    String.append(_:)(v30);
    swift_bridgeObjectRelease(v37);
    swift_bridgeObjectRelease(v40);
    v30._uint64_t countAndFlagsBits = 0x20776F7220746120;
    v30._char object = (void *)0xE800000000000000;
    String.append(_:)(v30);
    uint64_t v58 = v59;
    unint64_t v41 = dispatch thunk of CustomStringConvertible.description.getter(&type metadata for Int, &protocol witness table for Int);
    uint64_t v43 = (char)v42;
    v30._uint64_t countAndFlagsBits = v41;
    v30._char object = v42;
    String.append(_:)(v30);
    swift_bridgeObjectRelease(v43);
    v30._uint64_t countAndFlagsBits = 46;
    v30._char object = (void *)0xE100000000000000;
    String.append(_:)(v30);
    char v57 = v49[0];
    v30._char object = (void *)lazy protocol witness table accessor for type MLCreateError and conformance MLCreateError();
    swift_allocError(&type metadata for MLCreateError, v30._object, 0, 0);
    *(_OWORD *)uint64_t v44 = v57;
    *(_OWORD *)(v44 + 16) = 0;
    *(_OWORD *)(v44 + 32) = 0;
    *(unsigned char *)(v44 + 48) = 0;
    swift_willThrow(&type metadata for MLCreateError, v30._object, v44, v45, v46, v47);
    return (*(uint64_t (**)(uint64_t *, uint64_t))(v65 + 8))(v66, v64);
  }
  return result;
}

{
  uint64_t v3;
  uint64_t v4;
  int64_t v5;
  void *v6;
  void *v7;
  uint64_t v8;
  int64_t v9;
  void *v10;
  void *v11;
  uint64_t result;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  BOOL v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  void *v26;
  uint64_t v27;
  void (*v28)(uint64_t);
  void *v29;
  Swift::String v30;
  uint64_t v31;
  void *v32;
  char v33;
  uint64_t v34;
  void *v35;
  char v36;
  uint64_t v37;
  uint64_t v38;
  void *v39;
  char v40;
  uint64_t v41;
  void *v42;
  char v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  _OWORD v49[2];
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  unint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  long long v57;
  unint64_t v58;
  unint64_t v59;
  uint64_t *v60;
  uint64_t v61;
  uint64_t v62;
  unint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t *v66;

  uint64_t v55 = v4;
  uint64_t v52 = a3;
  long long v63 = a2;
  uint64_t v5 = *(void *)(*(void *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for MLShapedArray<Double>?)
                             - 8)
                 + 64);
  unint64_t v6 = alloca(v5);
  id v7 = alloca(v5);
  uint64_t v60 = &v48;
  uint64_t v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for MLShapedArray<Double>);
  uint64_t v65 = *(void *)(v8 - 8);
  unint64_t v9 = *(void *)(v65 + 64);
  unint64_t v10 = alloca(v9);
  unint64_t v11 = alloca(v9);
  uint64_t v62 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Column<MLShapedArray<Double>>);
  uint64_t v61 = a1;
  uint64_t result = Column.count.getter(v62);
  if (result < 0) {
    BUG();
  }
  uint64_t v56 = v3;
  if (result)
  {
    uint64_t v13 = 0;
    uint64_t v64 = v8;
    uint64_t v66 = &v48;
    uint64_t v54 = result;
    while (1)
    {
      if (v13 == result) {
        BUG();
      }
      Swift::String v14 = v8;
      uint64_t v15 = (uint64_t)v60;
      Column.subscript.getter(v13, v62);
      float v16 = v15;
      char v17 = v14;
      if (__swift_getEnumTagSinglePayload(v16, 1, v14) == 1)
      {
        uint64_t v18 = lazy protocol witness table accessor for type FullyConnectedNetworkClassifier<Float, String> and conformance FullyConnectedNetworkClassifier<A, B>(&lazy protocol witness table cache variable for type MLShapedArray<Double> and conformance MLShapedArray<A>, &demangling cache variable for type metadata for MLShapedArray<Double>, (uint64_t)&protocol conformance descriptor for MLShapedArray<A>);
        MLShapedArrayProtocol.init(arrayLiteral:)(_swiftEmptyArrayStorage, v14, v18);
        char v17 = v14;
        outlined destroy of Either<LogisticRegressionClassifier<Float, String>, FullyConnectedNetworkClassifier<Float, String>>((uint64_t)v60, &demangling cache variable for type metadata for MLShapedArray<Double>?);
      }
      else
      {
        (*(void (**)(uint64_t *, uint64_t, uint64_t))(v65 + 32))(v66, v16, v14);
      }
      int64_t v19 = MLShapedArray.shape.getter(v17);
      char v20 = *(void *)(v19 + 16) == 1;
      uint64_t v21 = v63;
      uint64_t v59 = v13;
      if (!v20 || *(void *)(v19 + 32) != v63) {
        break;
      }
      char v53 = v13 + 1;
      swift_bridgeObjectRelease(v19);
      if (v21 < 0) {
        BUG();
      }
      if (v21)
      {
        uint64_t v22 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for FeatureMatrixBuilder<Double>);
        uint64_t v51 = v55 + *(int *)(v22 + 44);
        char v23 = 0;
        do
        {
          uint64_t v24 = v23 + v52;
          if (__OFADD__(v23, v52)) {
            BUG();
          }
          *(void *)&char v57 = v23 + 1;
          int64_t v25 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Int>);
          char v26 = (void *)swift_allocObject(v25, 40, 7);
          v26[2] = 1;
          v26[3] = 2;
          void v26[4] = v23;
          uint64_t v27 = lazy protocol witness table accessor for type FullyConnectedNetworkClassifier<Float, String> and conformance FullyConnectedNetworkClassifier<A, B>(&lazy protocol witness table cache variable for type MLShapedArray<Double> and conformance MLShapedArray<A>, &demangling cache variable for type metadata for MLShapedArray<Double>, (uint64_t)&protocol conformance descriptor for MLShapedArray<A>);
          MLShapedArrayProtocol.subscript.getter(v26, v64, v27);
          swift_bridgeObjectRelease((_BYTE)v26);
          Swift::String v50 = *(void *)&v49[0];
          uint64_t v28 = specialized DenseMatrix.subscript.modify(v49, v59, v24);
          uint64_t *v29 = v50;
          ((void (*)(_OWORD *, void))v28)(v49, 0);
          char v23 = v57;
        }
        while (v63 != (void)v57);
      }
      uint64_t v8 = v64;
      (*(void (**)(uint64_t *, uint64_t))(v65 + 8))(v66, v64);
      uint64_t v13 = v53;
      uint64_t result = v54;
      if (v53 == v54) {
        return result;
      }
    }
    swift_bridgeObjectRelease(v19);
    *(void *)&v49[0] = 0;
    *((void *)&v49[0] + 1) = 0xE000000000000000;
    _StringGuts.grow(_:)(84);
    v30._uint64_t countAndFlagsBits = 0xD000000000000023;
    v30._char object = " elements at row " + 0x8000000000000000;
    String.append(_:)(v30);
    uint64_t v58 = v63;
    double v31 = dispatch thunk of CustomStringConvertible.description.getter(&type metadata for Int, &protocol witness table for Int);
    uint64_t v33 = (char)v32;
    v30._uint64_t countAndFlagsBits = v31;
    v30._char object = v32;
    String.append(_:)(v30);
    swift_bridgeObjectRelease(v33);
    v30._uint64_t countAndFlagsBits = 0x656620726F66205DLL;
    v30._char object = (void *)0xEF27206572757461;
    String.append(_:)(v30);
    uint64_t v34 = Column.name.getter(v62);
    unint64_t v36 = (char)v35;
    v30._uint64_t countAndFlagsBits = v34;
    v30._char object = v35;
    String.append(_:)(v30);
    swift_bridgeObjectRelease(v36);
    v30._char object = "arrays with shape [" + 0x8000000000000000;
    v30._uint64_t countAndFlagsBits = 0xD000000000000011;
    String.append(_:)(v30);
    uint64_t v37 = MLShapedArray.shape.getter(v17);
    uint64_t v38 = Array.description.getter(v37, &type metadata for Int);
    unint64_t v40 = (char)v39;
    v30._uint64_t countAndFlagsBits = v38;
    v30._char object = v39;
    String.append(_:)(v30);
    swift_bridgeObjectRelease(v37);
    swift_bridgeObjectRelease(v40);
    v30._uint64_t countAndFlagsBits = 0x20776F7220746120;
    v30._char object = (void *)0xE800000000000000;
    String.append(_:)(v30);
    uint64_t v58 = v59;
    unint64_t v41 = dispatch thunk of CustomStringConvertible.description.getter(&type metadata for Int, &protocol witness table for Int);
    uint64_t v43 = (char)v42;
    v30._uint64_t countAndFlagsBits = v41;
    v30._char object = v42;
    String.append(_:)(v30);
    swift_bridgeObjectRelease(v43);
    v30._uint64_t countAndFlagsBits = 46;
    v30._char object = (void *)0xE100000000000000;
    String.append(_:)(v30);
    char v57 = v49[0];
    v30._char object = (void *)lazy protocol witness table accessor for type MLCreateError and conformance MLCreateError();
    swift_allocError(&type metadata for MLCreateError, v30._object, 0, 0);
    *(_OWORD *)uint64_t v44 = v57;
    *(_OWORD *)(v44 + 16) = 0;
    *(_OWORD *)(v44 + 32) = 0;
    *(unsigned char *)(v44 + 48) = 0;
    swift_willThrow(&type metadata for MLCreateError, v30._object, v44, v45, v46, v47);
    return (*(uint64_t (**)(uint64_t *, uint64_t))(v65 + 8))(v66, v64);
  }
  return result;
}

uint64_t specialized FeatureMatrixBuilder.fillDictionary<A>(from:descriptors:column:)(uint64_t a1, uint64_t a2, uint64_t a3, void (*a4)(_OWORD *, uint64_t, uint64_t, uint64_t, void, uint64_t, uint64_t))
{
  uint64_t v30 = a4;
  uint64_t v44 = v4;
  uint64_t v31 = v5;
  uint64_t v29 = a3;
  char v6 = a2;
  uint64_t v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Column<[String : Int]>);
  uint64_t result = Column.count.getter(v8);
  if (result < 0) {
    BUG();
  }
  if (result)
  {
    uint64_t v40 = *(void *)(a2 + 16);
    uint64_t v33 = (unsigned char *)(a2 + 56);
    uint64_t v10 = 0;
    uint64_t v41 = a2;
    uint64_t v34 = a1;
    uint64_t v35 = v8;
    uint64_t v32 = result;
    while (1)
    {
      if (v10 == result) {
        BUG();
      }
      uint64_t v39 = v10;
      Column.subscript.getter(v10, v8);
      uint64_t v43 = *(void *)&v36[0];
      if (!*(void *)&v36[0]) {
        uint64_t v43 = Dictionary.init(dictionaryLiteral:)(_swiftEmptyArrayStorage, &type metadata for String, &type metadata for Int, &protocol witness table for String);
      }
      if (v40) {
        break;
      }
      swift_bridgeObjectRelease(v43);
LABEL_20:
      uint64_t v10 = v39 + 1;
      uint64_t result = v32;
      if (v39 + 1 == v32) {
        return result;
      }
    }
    swift_bridgeObjectRetain(v6);
    uint64_t v11 = 0;
    uint64_t v12 = v33;
    uint64_t v13 = v44;
    while (1)
    {
      uint64_t v37 = v11;
      uint64_t v44 = v13;
      uint64_t v42 = *((void *)v12 - 3);
      uint64_t v14 = *((void *)v12 - 2);
      uint64_t v15 = *((void *)v12 - 1);
      uint64_t v28 = v12;
      LOBYTE(v17) = *v12;
      uint64_t v16 = *(void *)(v43 + 16);
      swift_bridgeObjectRetain(v14);
      unsigned int v17 = v17;
      unsigned int v45 = v17;
      if (v16)
      {
        swift_bridgeObjectRetain(v14);
        uint64_t v38 = v15;
        outlined copy of ColumnDescriptor.ColumnTypeDescriptor(v15, v17);
        uint64_t v18 = v43;
        unint64_t v19 = specialized __RawDictionaryStorage.find<A>(_:)(v42, v14);
        if (v20)
        {
          uint64_t v21 = *(void *)(*(void *)(v18 + 56) + 8 * v19);
          swift_bridgeObjectRelease(v14);
          uint64_t v27 = &type metadata for Int;
          *(void *)&long long v26 = v21;
          outlined init with take of Any(&v26, v36);
          uint64_t v22 = v44;
          uint64_t v23 = v37;
          uint64_t v24 = v38;
          unsigned int v17 = v45;
          goto LABEL_15;
        }
        swift_bridgeObjectRelease(v14);
        uint64_t v22 = v44;
        uint64_t v24 = v38;
        unsigned int v17 = v45;
      }
      else
      {
        outlined copy of ColumnDescriptor.ColumnTypeDescriptor(v15, v17);
        uint64_t v22 = v44;
        uint64_t v24 = v15;
      }
      memset(v36, 0, sizeof(v36));
      uint64_t v23 = v37;
LABEL_15:
      if (__OFADD__(v23, v29)) {
        BUG();
      }
      uint64_t v25 = v24;
      v30(v36, v42, v14, v24, v17, v39, v23 + v29);
      uint64_t v13 = v22;
      if (v22)
      {
        uint64_t v44 = v22;
        swift_bridgeObjectRelease(v14);
        outlined consume of ColumnDescriptor.ColumnTypeDescriptor(v25, v45);
        swift_bridgeObjectRelease(v43);
        outlined destroy of Either<LogisticRegressionClassifier<Float, String>, FullyConnectedNetworkClassifier<Float, String>>((uint64_t)v36, &demangling cache variable for type metadata for Any?);
        return swift_bridgeObjectRelease(v41);
      }
      outlined destroy of Either<LogisticRegressionClassifier<Float, String>, FullyConnectedNetworkClassifier<Float, String>>((uint64_t)v36, &demangling cache variable for type metadata for Any?);
      swift_bridgeObjectRelease(v14);
      outlined consume of ColumnDescriptor.ColumnTypeDescriptor(v25, v45);
      uint64_t v12 = v28 + 32;
      uint64_t v11 = v23 + 1;
      if (v40 == v11)
      {
        uint64_t v44 = 0;
        swift_bridgeObjectRelease(v43);
        char v6 = v41;
        swift_bridgeObjectRelease(v41);
        uint64_t v8 = v35;
        goto LABEL_20;
      }
    }
  }
  return result;
}

{
  uint64_t v4;
  uint64_t v5;
  char v6;
  uint64_t v8;
  uint64_t result;
  uint64_t v10;
  uint64_t v11;
  unsigned char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unsigned int v17;
  uint64_t v18;
  unint64_t v19;
  char v20;
  char v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  long long v26;
  void *v27;
  unsigned char *v28;
  uint64_t v29;
  void (*v30)(_OWORD *, uint64_t, uint64_t, uint64_t, void, uint64_t, uint64_t);
  uint64_t v31;
  uint64_t v32;
  unsigned char *v33;
  uint64_t v34;
  uint64_t v35;
  _OWORD v36[2];
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  unsigned int v45;

  uint64_t v30 = a4;
  uint64_t v44 = v4;
  uint64_t v31 = v5;
  uint64_t v29 = a3;
  char v6 = a2;
  uint64_t v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Column<[String : UInt8]>);
  uint64_t result = Column.count.getter(v8);
  if (result < 0) {
    BUG();
  }
  if (result)
  {
    uint64_t v40 = *(void *)(a2 + 16);
    uint64_t v33 = (unsigned char *)(a2 + 56);
    uint64_t v10 = 0;
    uint64_t v41 = a2;
    uint64_t v34 = a1;
    uint64_t v35 = v8;
    uint64_t v32 = result;
    while (1)
    {
      if (v10 == result) {
        BUG();
      }
      uint64_t v39 = v10;
      Column.subscript.getter(v10, v8);
      uint64_t v43 = *(void *)&v36[0];
      if (!*(void *)&v36[0]) {
        uint64_t v43 = Dictionary.init(dictionaryLiteral:)(_swiftEmptyArrayStorage, &type metadata for String, &type metadata for UInt8, &protocol witness table for String);
      }
      if (v40) {
        break;
      }
      swift_bridgeObjectRelease(v43);
LABEL_20:
      uint64_t v10 = v39 + 1;
      uint64_t result = v32;
      if (v39 + 1 == v32) {
        return result;
      }
    }
    swift_bridgeObjectRetain(v6);
    uint64_t v11 = 0;
    uint64_t v12 = v33;
    uint64_t v13 = v44;
    while (1)
    {
      uint64_t v37 = v11;
      uint64_t v44 = v13;
      uint64_t v42 = *((void *)v12 - 3);
      uint64_t v14 = *((void *)v12 - 2);
      uint64_t v15 = *((void *)v12 - 1);
      uint64_t v28 = v12;
      LOBYTE(v17) = *v12;
      uint64_t v16 = *(void *)(v43 + 16);
      swift_bridgeObjectRetain(v14);
      unsigned int v17 = v17;
      unsigned int v45 = v17;
      if (v16)
      {
        swift_bridgeObjectRetain(v14);
        uint64_t v38 = v15;
        outlined copy of ColumnDescriptor.ColumnTypeDescriptor(v15, v17);
        uint64_t v18 = v43;
        unint64_t v19 = specialized __RawDictionaryStorage.find<A>(_:)(v42, v14);
        if (v20)
        {
          uint64_t v21 = *(unsigned char *)(*(void *)(v18 + 56) + v19);
          swift_bridgeObjectRelease(v14);
          uint64_t v27 = &type metadata for UInt8;
          LOBYTE(v26) = v21;
          outlined init with take of Any(&v26, v36);
          uint64_t v22 = v44;
          uint64_t v23 = v37;
          uint64_t v24 = v38;
          unsigned int v17 = v45;
          goto LABEL_15;
        }
        swift_bridgeObjectRelease(v14);
        uint64_t v22 = v44;
        uint64_t v24 = v38;
        unsigned int v17 = v45;
      }
      else
      {
        outlined copy of ColumnDescriptor.ColumnTypeDescriptor(v15, v17);
        uint64_t v22 = v44;
        uint64_t v24 = v15;
      }
      memset(v36, 0, sizeof(v36));
      uint64_t v23 = v37;
LABEL_15:
      if (__OFADD__(v23, v29)) {
        BUG();
      }
      uint64_t v25 = v24;
      v30(v36, v42, v14, v24, v17, v39, v23 + v29);
      uint64_t v13 = v22;
      if (v22)
      {
        uint64_t v44 = v22;
        swift_bridgeObjectRelease(v14);
        outlined consume of ColumnDescriptor.ColumnTypeDescriptor(v25, v45);
        swift_bridgeObjectRelease(v43);
        outlined destroy of Either<LogisticRegressionClassifier<Float, String>, FullyConnectedNetworkClassifier<Float, String>>((uint64_t)v36, &demangling cache variable for type metadata for Any?);
        return swift_bridgeObjectRelease(v41);
      }
      outlined destroy of Either<LogisticRegressionClassifier<Float, String>, FullyConnectedNetworkClassifier<Float, String>>((uint64_t)v36, &demangling cache variable for type metadata for Any?);
      swift_bridgeObjectRelease(v14);
      outlined consume of ColumnDescriptor.ColumnTypeDescriptor(v25, v45);
      uint64_t v12 = v28 + 32;
      uint64_t v11 = v23 + 1;
      if (v40 == v11)
      {
        uint64_t v44 = 0;
        swift_bridgeObjectRelease(v43);
        char v6 = v41;
        swift_bridgeObjectRelease(v41);
        uint64_t v8 = v35;
        goto LABEL_20;
      }
    }
  }
  return result;
}

{
  uint64_t v4;
  uint64_t v5;
  char v6;
  uint64_t v8;
  uint64_t result;
  uint64_t v10;
  uint64_t v11;
  unsigned char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unsigned int v17;
  uint64_t v18;
  unint64_t v19;
  char v20;
  int v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  long long v26;
  void *v27;
  unsigned char *v28;
  uint64_t v29;
  void (*v30)(_OWORD *, uint64_t, uint64_t, uint64_t, void, uint64_t, uint64_t);
  uint64_t v31;
  uint64_t v32;
  unsigned char *v33;
  uint64_t v34;
  uint64_t v35;
  _OWORD v36[2];
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  unsigned int v45;

  uint64_t v30 = a4;
  uint64_t v44 = v4;
  uint64_t v31 = v5;
  uint64_t v29 = a3;
  char v6 = a2;
  uint64_t v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Column<[String : Int32]>);
  uint64_t result = Column.count.getter(v8);
  if (result < 0) {
    BUG();
  }
  if (result)
  {
    uint64_t v40 = *(void *)(a2 + 16);
    uint64_t v33 = (unsigned char *)(a2 + 56);
    uint64_t v10 = 0;
    uint64_t v41 = a2;
    uint64_t v34 = a1;
    uint64_t v35 = v8;
    uint64_t v32 = result;
    while (1)
    {
      if (v10 == result) {
        BUG();
      }
      uint64_t v39 = v10;
      Column.subscript.getter(v10, v8);
      uint64_t v43 = *(void *)&v36[0];
      if (!*(void *)&v36[0]) {
        uint64_t v43 = Dictionary.init(dictionaryLiteral:)(_swiftEmptyArrayStorage, &type metadata for String, &type metadata for Int32, &protocol witness table for String);
      }
      if (v40) {
        break;
      }
      swift_bridgeObjectRelease(v43);
LABEL_20:
      uint64_t v10 = v39 + 1;
      uint64_t result = v32;
      if (v39 + 1 == v32) {
        return result;
      }
    }
    swift_bridgeObjectRetain(v6);
    uint64_t v11 = 0;
    uint64_t v12 = v33;
    uint64_t v13 = v44;
    while (1)
    {
      uint64_t v37 = v11;
      uint64_t v44 = v13;
      uint64_t v42 = *((void *)v12 - 3);
      uint64_t v14 = *((void *)v12 - 2);
      uint64_t v15 = *((void *)v12 - 1);
      uint64_t v28 = v12;
      LOBYTE(v17) = *v12;
      uint64_t v16 = *(void *)(v43 + 16);
      swift_bridgeObjectRetain(v14);
      unsigned int v17 = v17;
      unsigned int v45 = v17;
      if (v16)
      {
        swift_bridgeObjectRetain(v14);
        uint64_t v38 = v15;
        outlined copy of ColumnDescriptor.ColumnTypeDescriptor(v15, v17);
        uint64_t v18 = v43;
        unint64_t v19 = specialized __RawDictionaryStorage.find<A>(_:)(v42, v14);
        if (v20)
        {
          uint64_t v21 = *(_DWORD *)(*(void *)(v18 + 56) + 4 * v19);
          swift_bridgeObjectRelease(v14);
          uint64_t v27 = &type metadata for Int32;
          LODWORD(v26) = v21;
          outlined init with take of Any(&v26, v36);
          uint64_t v22 = v44;
          uint64_t v23 = v37;
          uint64_t v24 = v38;
          unsigned int v17 = v45;
          goto LABEL_15;
        }
        swift_bridgeObjectRelease(v14);
        uint64_t v22 = v44;
        uint64_t v24 = v38;
        unsigned int v17 = v45;
      }
      else
      {
        outlined copy of ColumnDescriptor.ColumnTypeDescriptor(v15, v17);
        uint64_t v22 = v44;
        uint64_t v24 = v15;
      }
      memset(v36, 0, sizeof(v36));
      uint64_t v23 = v37;
LABEL_15:
      if (__OFADD__(v23, v29)) {
        BUG();
      }
      uint64_t v25 = v24;
      v30(v36, v42, v14, v24, v17, v39, v23 + v29);
      uint64_t v13 = v22;
      if (v22)
      {
        uint64_t v44 = v22;
        swift_bridgeObjectRelease(v14);
        outlined consume of ColumnDescriptor.ColumnTypeDescriptor(v25, v45);
        swift_bridgeObjectRelease(v43);
        outlined destroy of Either<LogisticRegressionClassifier<Float, String>, FullyConnectedNetworkClassifier<Float, String>>((uint64_t)v36, &demangling cache variable for type metadata for Any?);
        return swift_bridgeObjectRelease(v41);
      }
      outlined destroy of Either<LogisticRegressionClassifier<Float, String>, FullyConnectedNetworkClassifier<Float, String>>((uint64_t)v36, &demangling cache variable for type metadata for Any?);
      swift_bridgeObjectRelease(v14);
      outlined consume of ColumnDescriptor.ColumnTypeDescriptor(v25, v45);
      uint64_t v12 = v28 + 32;
      uint64_t v11 = v23 + 1;
      if (v40 == v11)
      {
        uint64_t v44 = 0;
        swift_bridgeObjectRelease(v43);
        char v6 = v41;
        swift_bridgeObjectRelease(v41);
        uint64_t v8 = v35;
        goto LABEL_20;
      }
    }
  }
  return result;
}

{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char v7;
  uint64_t v9;
  uint64_t result;
  uint64_t v11;
  uint64_t v12;
  unsigned char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unsigned int v18;
  uint64_t v19;
  unint64_t v20;
  char v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  long long v25;
  void *v26;
  unsigned char *v27;
  uint64_t v28;
  void (*v29)(_OWORD *, uint64_t, uint64_t, uint64_t, void, uint64_t, uint64_t);
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  unsigned char *v33;
  uint64_t v34;
  uint64_t v35;
  _OWORD v36[2];
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  unsigned int v45;

  uint64_t v29 = a4;
  char v6 = v4;
  uint64_t v30 = v5;
  uint64_t v28 = a3;
  id v7 = a2;
  unint64_t v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Column<[String : Double]>);
  uint64_t result = Column.count.getter(v9);
  if (result < 0) {
    BUG();
  }
  if (result)
  {
    uint64_t v39 = *(void *)(a2 + 16);
    uint64_t v33 = (unsigned char *)(a2 + 56);
    uint64_t v11 = 0;
    uint64_t v40 = a2;
    uint64_t v34 = a1;
    uint64_t v35 = v9;
    uint64_t v32 = result;
    while (1)
    {
      if (v11 == result) {
        BUG();
      }
      uint64_t v38 = v11;
      Column.subscript.getter(v11, v9);
      uint64_t v44 = *(void *)&v36[0];
      if (!*(void *)&v36[0]) {
        uint64_t v44 = Dictionary.init(dictionaryLiteral:)(_swiftEmptyArrayStorage, &type metadata for String, &type metadata for Double, &protocol witness table for String);
      }
      if (v39) {
        break;
      }
      swift_bridgeObjectRelease(v44);
LABEL_20:
      uint64_t v11 = v38 + 1;
      uint64_t result = v32;
      if (v38 + 1 == v32) {
        return result;
      }
    }
    swift_bridgeObjectRetain(v7);
    uint64_t v12 = 0;
    uint64_t v13 = v33;
    uint64_t v14 = v6;
    while (1)
    {
      uint64_t v37 = v12;
      uint64_t v42 = v14;
      uint64_t v41 = *((void *)v13 - 3);
      uint64_t v15 = *((void *)v13 - 2);
      uint64_t v16 = *((void *)v13 - 1);
      uint64_t v27 = v13;
      LOBYTE(v18) = *v13;
      unsigned int v17 = *(void *)(v44 + 16);
      swift_bridgeObjectRetain(v15);
      uint64_t v18 = v18;
      uint64_t v43 = v16;
      unsigned int v45 = v18;
      if (v17)
      {
        swift_bridgeObjectRetain(v15);
        outlined copy of ColumnDescriptor.ColumnTypeDescriptor(v16, v18);
        unint64_t v19 = v44;
        char v20 = specialized __RawDictionaryStorage.find<A>(_:)(v41, v15);
        if (v21)
        {
          uint64_t v31 = *(void *)(*(void *)(v19 + 56) + 8 * v20);
          swift_bridgeObjectRelease(v15);
          long long v26 = &type metadata for Double;
          *(void *)&uint64_t v25 = v31;
          outlined init with take of Any(&v25, v36);
          uint64_t v22 = v42;
          uint64_t v23 = v37;
          uint64_t v24 = v43;
          uint64_t v18 = v45;
          goto LABEL_15;
        }
        swift_bridgeObjectRelease(v15);
        uint64_t v22 = v42;
        uint64_t v24 = v43;
        uint64_t v18 = v45;
      }
      else
      {
        outlined copy of ColumnDescriptor.ColumnTypeDescriptor(v16, v18);
        uint64_t v22 = v42;
        uint64_t v24 = v16;
      }
      memset(v36, 0, sizeof(v36));
      uint64_t v23 = v37;
LABEL_15:
      if (__OFADD__(v23, v28)) {
        BUG();
      }
      v29(v36, v41, v15, v24, v18, v38, v23 + v28);
      uint64_t v14 = v22;
      if (v22)
      {
        swift_bridgeObjectRelease(v15);
        outlined consume of ColumnDescriptor.ColumnTypeDescriptor(v43, v45);
        swift_bridgeObjectRelease(v44);
        outlined destroy of Either<LogisticRegressionClassifier<Float, String>, FullyConnectedNetworkClassifier<Float, String>>((uint64_t)v36, &demangling cache variable for type metadata for Any?);
        return swift_bridgeObjectRelease(v40);
      }
      outlined destroy of Either<LogisticRegressionClassifier<Float, String>, FullyConnectedNetworkClassifier<Float, String>>((uint64_t)v36, &demangling cache variable for type metadata for Any?);
      swift_bridgeObjectRelease(v15);
      outlined consume of ColumnDescriptor.ColumnTypeDescriptor(v43, v45);
      uint64_t v13 = v27 + 32;
      uint64_t v12 = v23 + 1;
      if (v39 == v12)
      {
        char v6 = 0;
        swift_bridgeObjectRelease(v44);
        id v7 = v40;
        swift_bridgeObjectRelease(v40);
        unint64_t v9 = v35;
        goto LABEL_20;
      }
    }
  }
  return result;
}

{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char v7;
  uint64_t v9;
  uint64_t result;
  uint64_t v11;
  uint64_t v12;
  unsigned char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unsigned int v18;
  uint64_t v19;
  unint64_t v20;
  char v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  long long v25;
  void *v26;
  unsigned char *v27;
  uint64_t v28;
  void (*v29)(_OWORD *, uint64_t, uint64_t, uint64_t, void, uint64_t, uint64_t);
  uint64_t v30;
  uint64_t v31;
  unsigned char *v32;
  uint64_t v33;
  uint64_t v34;
  _OWORD v35[2];
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  int v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  unsigned int v45;

  uint64_t v29 = a4;
  char v6 = v4;
  uint64_t v30 = v5;
  uint64_t v28 = a3;
  id v7 = a2;
  unint64_t v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Column<[String : Float]>);
  uint64_t result = Column.count.getter(v9);
  if (result < 0) {
    BUG();
  }
  if (result)
  {
    uint64_t v38 = *(void *)(a2 + 16);
    uint64_t v32 = (unsigned char *)(a2 + 56);
    uint64_t v11 = 0;
    uint64_t v39 = a2;
    uint64_t v33 = a1;
    uint64_t v34 = v9;
    uint64_t v31 = result;
    while (1)
    {
      if (v11 == result) {
        BUG();
      }
      uint64_t v37 = v11;
      Column.subscript.getter(v11, v9);
      uint64_t v44 = *(void *)&v35[0];
      if (!*(void *)&v35[0]) {
        uint64_t v44 = Dictionary.init(dictionaryLiteral:)(_swiftEmptyArrayStorage, &type metadata for String, &type metadata for Float, &protocol witness table for String);
      }
      if (v38) {
        break;
      }
      swift_bridgeObjectRelease(v44);
LABEL_20:
      uint64_t v11 = v37 + 1;
      uint64_t result = v31;
      if (v37 + 1 == v31) {
        return result;
      }
    }
    swift_bridgeObjectRetain(v7);
    uint64_t v12 = 0;
    uint64_t v13 = v32;
    uint64_t v14 = v6;
    while (1)
    {
      unint64_t v36 = v12;
      uint64_t v42 = v14;
      uint64_t v41 = *((void *)v13 - 3);
      uint64_t v15 = *((void *)v13 - 2);
      uint64_t v16 = *((void *)v13 - 1);
      uint64_t v27 = v13;
      LOBYTE(v18) = *v13;
      unsigned int v17 = *(void *)(v44 + 16);
      swift_bridgeObjectRetain(v15);
      uint64_t v18 = v18;
      uint64_t v43 = v16;
      unsigned int v45 = v18;
      if (v17)
      {
        swift_bridgeObjectRetain(v15);
        outlined copy of ColumnDescriptor.ColumnTypeDescriptor(v16, v18);
        unint64_t v19 = v44;
        char v20 = specialized __RawDictionaryStorage.find<A>(_:)(v41, v15);
        if (v21)
        {
          uint64_t v40 = *(_DWORD *)(*(void *)(v19 + 56) + 4 * v20);
          swift_bridgeObjectRelease(v15);
          long long v26 = &type metadata for Float;
          LODWORD(v25) = v40;
          outlined init with take of Any(&v25, v35);
          uint64_t v22 = v42;
          uint64_t v23 = v36;
          uint64_t v24 = v43;
          uint64_t v18 = v45;
          goto LABEL_15;
        }
        swift_bridgeObjectRelease(v15);
        uint64_t v22 = v42;
        uint64_t v24 = v43;
        uint64_t v18 = v45;
      }
      else
      {
        outlined copy of ColumnDescriptor.ColumnTypeDescriptor(v16, v18);
        uint64_t v22 = v42;
        uint64_t v24 = v16;
      }
      memset(v35, 0, sizeof(v35));
      uint64_t v23 = v36;
LABEL_15:
      if (__OFADD__(v23, v28)) {
        BUG();
      }
      v29(v35, v41, v15, v24, v18, v37, v23 + v28);
      uint64_t v14 = v22;
      if (v22)
      {
        swift_bridgeObjectRelease(v15);
        outlined consume of ColumnDescriptor.ColumnTypeDescriptor(v43, v45);
        swift_bridgeObjectRelease(v44);
        outlined destroy of Either<LogisticRegressionClassifier<Float, String>, FullyConnectedNetworkClassifier<Float, String>>((uint64_t)v35, &demangling cache variable for type metadata for Any?);
        return swift_bridgeObjectRelease(v39);
      }
      outlined destroy of Either<LogisticRegressionClassifier<Float, String>, FullyConnectedNetworkClassifier<Float, String>>((uint64_t)v35, &demangling cache variable for type metadata for Any?);
      swift_bridgeObjectRelease(v15);
      outlined consume of ColumnDescriptor.ColumnTypeDescriptor(v43, v45);
      uint64_t v13 = v27 + 32;
      uint64_t v12 = v23 + 1;
      if (v38 == v12)
      {
        char v6 = 0;
        swift_bridgeObjectRelease(v44);
        id v7 = v39;
        swift_bridgeObjectRelease(v39);
        unint64_t v9 = v34;
        goto LABEL_20;
      }
    }
  }
  return result;
}

{
  uint64_t v4;
  uint64_t v5;
  char v6;
  uint64_t v8;
  uint64_t result;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  BOOL v17;
  char v18;
  uint64_t v19;
  unint64_t v20;
  char v21;
  uint64_t v22;
  char v23;
  uint64_t v24;
  long long v25;
  uint64_t v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  void (*v30)(_OWORD *, uint64_t, uint64_t, uint64_t, void, uint64_t, uint64_t);
  uint64_t v31;
  char *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  _OWORD v36[2];
  long long v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  unsigned int v48;

  uint64_t v30 = a4;
  uint64_t v46 = v4;
  uint64_t v31 = v5;
  uint64_t v29 = a3;
  char v6 = a2;
  uint64_t v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Column<[String : Any?]>);
  uint64_t result = Column.count.getter(v8);
  if (result < 0) {
    BUG();
  }
  if (result)
  {
    uint64_t v10 = result;
    uint64_t v43 = *(void *)(a2 + 16);
    uint64_t v32 = (char *)(a2 + 56);
    uint64_t v11 = 0;
    uint64_t v44 = a2;
    uint64_t v33 = a1;
    uint64_t v34 = v8;
    uint64_t v35 = result;
    while (1)
    {
      if (v11 == v10) {
        BUG();
      }
      uint64_t v42 = v11;
      Column.subscript.getter(v11, v8);
      uint64_t v47 = *(void *)&v36[0];
      if (!*(void *)&v36[0])
      {
        uint64_t v12 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Any?);
        uint64_t v47 = Dictionary.init(dictionaryLiteral:)(_swiftEmptyArrayStorage, &type metadata for String, v12, &protocol witness table for String);
      }
      if (v43) {
        break;
      }
      uint64_t result = swift_bridgeObjectRelease(v47);
LABEL_22:
      uint64_t v11 = v42 + 1;
      if (v42 + 1 == v10) {
        return result;
      }
    }
    swift_bridgeObjectRetain(v6);
    unsigned int v45 = 0;
    uint64_t v13 = v32;
    while (1)
    {
      uint64_t v41 = *((void *)v13 - 3);
      uint64_t v14 = *((void *)v13 - 2);
      uint64_t v15 = *((void *)v13 - 1);
      uint64_t v16 = v47;
      unsigned int v17 = *(void *)(v47 + 16) == 0;
      uint64_t v27 = v13;
      uint64_t v18 = *v13;
      uint64_t v48 = *v13;
      uint64_t v40 = v14;
      if (v17) {
        break;
      }
      swift_bridgeObjectRetain_n(v14, 2);
      uint64_t v28 = v15;
      outlined copy of ColumnDescriptor.ColumnTypeDescriptor(v15, v18);
      unint64_t v19 = v41;
      char v20 = specialized __RawDictionaryStorage.find<A>(_:)(v41, v14);
      if (v21)
      {
        outlined init with copy of Either<LogisticRegressionClassifier<Float, String>, FullyConnectedNetworkClassifier<Float, String>>(*(void *)(v16 + 56) + 32 * v20, (uint64_t)&v37, &demangling cache variable for type metadata for Any?);
      }
      else
      {
        uint64_t v37 = 0;
        uint64_t v38 = 0;
        uint64_t v39 = 2;
      }
      swift_bridgeObjectRelease(v40);
      uint64_t v22 = v28;
      if (v39 == 2) {
        goto LABEL_15;
      }
      long long v26 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Any?);
      *(void *)&uint64_t v25 = swift_allocObject(&unk_398300, 48, 7);
      outlined init with take of Any?((uint64_t)&v37, v25 + 16);
      outlined init with take of Any(&v25, v36);
LABEL_17:
      if (__OFADD__(v45, v29)) {
        BUG();
      }
      uint64_t v23 = v40;
      uint64_t v24 = v46;
      v30(v36, v19, v40, v22, v48, v42, v45 + v29);
      uint64_t v46 = v24;
      if (v24)
      {
        swift_bridgeObjectRelease(v23);
        outlined consume of ColumnDescriptor.ColumnTypeDescriptor(v22, v48);
        swift_bridgeObjectRelease(v47);
        outlined destroy of Either<LogisticRegressionClassifier<Float, String>, FullyConnectedNetworkClassifier<Float, String>>((uint64_t)v36, &demangling cache variable for type metadata for Any?);
        return swift_bridgeObjectRelease(v44);
      }
      outlined destroy of Either<LogisticRegressionClassifier<Float, String>, FullyConnectedNetworkClassifier<Float, String>>((uint64_t)v36, &demangling cache variable for type metadata for Any?);
      swift_bridgeObjectRelease(v23);
      outlined consume of ColumnDescriptor.ColumnTypeDescriptor(v22, v48);
      uint64_t v13 = v27 + 32;
      if (v43 == ++v45)
      {
        swift_bridgeObjectRelease(v47);
        char v6 = v44;
        uint64_t result = swift_bridgeObjectRelease(v44);
        uint64_t v8 = v34;
        uint64_t v10 = v35;
        goto LABEL_22;
      }
    }
    uint64_t v37 = 0;
    uint64_t v38 = 0;
    uint64_t v39 = 2;
    swift_bridgeObjectRetain(v14);
    outlined copy of ColumnDescriptor.ColumnTypeDescriptor(v15, v18);
    uint64_t v22 = v15;
    unint64_t v19 = v41;
LABEL_15:
    outlined destroy of Either<LogisticRegressionClassifier<Float, String>, FullyConnectedNetworkClassifier<Float, String>>((uint64_t)&v37, &demangling cache variable for type metadata for Any??);
    memset(v36, 0, sizeof(v36));
    goto LABEL_17;
  }
  return result;
}

uint64_t specialized FeatureMatrixBuilder.fill(_:descriptor:row:column:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unsigned __int8 a5, uint64_t a6, unint64_t a7)
{
  uint64_t v125 = v7;
  v121._char object = v8;
  *(void *)&long long v122 = a6;
  uint64_t v124 = a4;
  outlined init with copy of Either<LogisticRegressionClassifier<Float, String>, FullyConnectedNetworkClassifier<Float, String>>(a1, (uint64_t)&v118, &demangling cache variable for type metadata for Any?);
  if (!*((void *)&v119 + 1)) {
    return outlined destroy of Either<LogisticRegressionClassifier<Float, String>, FullyConnectedNetworkClassifier<Float, String>>((uint64_t)&v118, &demangling cache variable for type metadata for Any?);
  }
  outlined init with take of Any(&v118, &v113);
  switch(a5)
  {
    case 0u:
    case 1u:
    case 2u:
    case 3u:
      specialized FeatureMatrixBuilder.fillArray(_:descriptor:size:row:column:)(&v113, a2, a3, v124, a5, v124, (void *)v122, a7, &demangling cache variable for type metadata for FeatureMatrixBuilder<Float>, (void (*)(unsigned char *, uint64_t, void, uint64_t, void, uint64_t, void *, uint64_t))specialized FeatureMatrixBuilder.fillArray<A>(_:descriptor:size:row:column:), (void (*)(unsigned char *, uint64_t, void, uint64_t, void, uint64_t, void *, uint64_t))specialized FeatureMatrixBuilder.fillArray<A>(_:descriptor:size:row:column:), (void (*)(unsigned char *, uint64_t, void, uint64_t, void, uint64_t, void *, uint64_t))specialized FeatureMatrixBuilder.fillArray<A>(_:descriptor:size:row:column:));
      return __swift_destroy_boxed_opaque_existential_1Tm(&v113);
    case 4u:
      outlined init with copy of Any((uint64_t)&v113, (uint64_t)&v118);
      uint64_t v12 = v124;
      swift_bridgeObjectRetain(v124);
      if (!swift_dynamicCast(&v115, &v118, (char *)&type metadata for Any + 8, &type metadata for String, 6))
      {
        outlined consume of ColumnDescriptor.ColumnTypeDescriptor(v12, 4);
        uint64_t v51 = a2;
        uint64_t v52 = (void *)a3;
        *(void *)&long long v118 = 0;
        *((void *)&v118 + 1) = 0xE000000000000000;
        _StringGuts.grow(_:)(62);
        v53._uint64_t countAndFlagsBits = 0xD000000000000024;
        v53._char object = "', but got shape ";
        goto LABEL_34;
      }
      v121._uint64_t countAndFlagsBits = *((void *)&v115 + 1);
      uint64_t v112 = *(void *)(v12 + 16);
      if (v112)
      {
        uint64_t v123 = (uint64_t *)v115;
        uint64_t v13 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for FeatureMatrixBuilder<Float>);
        v121._char object = (char *)v121._object + *(int *)(v13 + 44);
        uint64_t v14 = (uint64_t *)(v124 + 40);
        uint64_t v15 = 0;
        do
        {
          unint64_t v16 = v15 + a7;
          if (__OFADD__(v15, a7)) {
            BUG();
          }
          unsigned int v17 = (uint64_t *)*(v14 - 1);
          uint64_t v18 = *v14;
          if (v17 != v123 || (int v19 = 1065353216, v18 != v121._countAndFlagsBits))
          {
            int v19 = 1065353216;
            if ((_stringCompareWithSmolCheck(_:_:expecting:)(v17, v18, v123, v121._countAndFlagsBits, 0) & 1) == 0) {
              int v19 = 0;
            }
          }
          LODWORD(v126[0]) = v19;
          ++v15;
          char v20 = specialized DenseMatrix.subscript.modify(&v118, v122, v16);
          _DWORD *v21 = LODWORD(v126[0]);
          ((void (*)(long long *, void))v20)(&v118, 0);
          v14 += 2;
        }
        while (v112 != v15);
      }
      __swift_destroy_boxed_opaque_existential_1Tm(&v113);
      outlined consume of ColumnDescriptor.ColumnTypeDescriptor(v124, 4);
      return swift_bridgeObjectRelease(v121._countAndFlagsBits);
    case 5u:
      outlined init with copy of Any((uint64_t)&v113, (uint64_t)&v118);
      uint64_t v22 = v124;
      swift_bridgeObjectRetain(v124);
      uint64_t v23 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [String : Any]);
      if (swift_dynamicCast(&v115, &v118, (char *)&type metadata for Any + 8, v23, 6))
      {
        uint64_t v24 = v115;
        uint64_t v109 = *(void **)(v22 + 16);
        if (v109)
        {
          uint64_t v25 = (unsigned __int8 *)(v22 + 56);
          *(void *)uint64_t v126 = 0;
          uint64_t v111 = v115;
          while (1)
          {
            uint64_t v26 = *((void *)v25 - 3);
            uint64_t v27 = *((void *)v25 - 2);
            uint64_t v28 = *((void *)v25 - 1);
            BOOL v29 = *(void *)(v24 + 16) == 0;
            uint64_t v108 = v25;
            int v30 = *v25;
            v121._uint64_t countAndFlagsBits = v26;
            uint64_t v123 = (uint64_t *)v27;
            LODWORD(v112) = v30;
            if (v29)
            {
              long long v119 = 0;
              long long v118 = 0;
              swift_bridgeObjectRetain(v27);
              outlined copy of ColumnDescriptor.ColumnTypeDescriptor(v28, v30);
              uint64_t v37 = v28;
            }
            else
            {
              uint64_t v31 = v27;
              uint64_t v32 = v26;
              swift_bridgeObjectRetain_n(v31, 2);
              uint64_t v110 = v28;
              outlined copy of ColumnDescriptor.ColumnTypeDescriptor(v28, v30);
              uint64_t v33 = v32;
              char v34 = (char)v123;
              unint64_t v35 = specialized __RawDictionaryStorage.find<A>(_:)(v33, (uint64_t)v123);
              if (v36)
              {
                outlined init with copy of Any(*(void *)(v24 + 56) + 32 * v35, (uint64_t)&v118);
              }
              else
              {
                long long v119 = 0;
                long long v118 = 0;
              }
              swift_bridgeObjectRelease(v34);
              uint64_t v37 = v110;
            }
            if (__OFADD__(*(void *)v126, a7)) {
              BUG();
            }
            char v38 = (char)v123;
            uint64_t v39 = v125;
            specialized FeatureMatrixBuilder.fill(_:descriptor:row:column:)(&v118, v121._countAndFlagsBits, v123, v37, v112, v122, *(void *)v126 + a7);
            swift_bridgeObjectRelease(v38);
            uint64_t v125 = v39;
            if (v39) {
              break;
            }
            outlined consume of ColumnDescriptor.ColumnTypeDescriptor(v37, v112);
            outlined destroy of Either<LogisticRegressionClassifier<Float, String>, FullyConnectedNetworkClassifier<Float, String>>((uint64_t)&v118, &demangling cache variable for type metadata for Any?);
            uint64_t v25 = v108 + 32;
            ++*(void *)v126;
            uint64_t v24 = v111;
            if (v109 == *(void **)v126)
            {
              swift_bridgeObjectRelease(v111);
              uint64_t v22 = v124;
              goto LABEL_43;
            }
          }
          swift_bridgeObjectRelease(v111);
          outlined consume of ColumnDescriptor.ColumnTypeDescriptor(v37, v112);
          outlined destroy of Either<LogisticRegressionClassifier<Float, String>, FullyConnectedNetworkClassifier<Float, String>>((uint64_t)&v118, &demangling cache variable for type metadata for Any?);
          uint64_t v82 = v124;
        }
        else
        {
          swift_bridgeObjectRelease(v115);
LABEL_43:
          uint64_t v82 = v22;
        }
        outlined consume of ColumnDescriptor.ColumnTypeDescriptor(v82, 5);
        goto LABEL_57;
      }
      outlined consume of ColumnDescriptor.ColumnTypeDescriptor(v22, 5);
      uint64_t v51 = a2;
      uint64_t v52 = (void *)a3;
      *(void *)&long long v118 = 0;
      *((void *)&v118 + 1) = 0xE000000000000000;
      _StringGuts.grow(_:)(66);
      v53._uint64_t countAndFlagsBits = 0xD000000000000028;
      v53._char object = "values for feature '";
LABEL_34:
      v53._char object = (void *)((unint64_t)v53._object | 0x8000000000000000);
      goto LABEL_35;
    case 6u:
      if (!v124)
      {
        outlined init with copy of Any((uint64_t)&v113, (uint64_t)v107);
        uint64_t v67 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for BinaryInteger);
        if (!swift_dynamicCast(&v115, v107, (char *)&type metadata for Any + 8, v67, 6))
        {
          long long v116 = 0;
          long long v115 = 0;
          uint64_t v117 = 0;
          outlined destroy of Either<LogisticRegressionClassifier<Float, String>, FullyConnectedNetworkClassifier<Float, String>>((uint64_t)&v115, &demangling cache variable for type metadata for BinaryInteger?);
          outlined init with copy of Any((uint64_t)&v113, (uint64_t)v107);
          uint64_t v83 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for BinaryFloatingPoint);
          if (!swift_dynamicCast(&v115, v107, (char *)&type metadata for Any + 8, v83, 6))
          {
            long long v116 = 0;
            long long v115 = 0;
            uint64_t v117 = 0;
            outlined destroy of Either<LogisticRegressionClassifier<Float, String>, FullyConnectedNetworkClassifier<Float, String>>((uint64_t)&v115, &demangling cache variable for type metadata for BinaryFloatingPoint?);
            outlined init with copy of Any((uint64_t)&v113, (uint64_t)&v118);
            uint64_t v98 = type metadata accessor for OS_os_log(0, &lazy cache variable for type metadata for NSNumber, NSNumber_ptr);
            if (swift_dynamicCast(&v115, &v118, (char *)&type metadata for Any + 8, v98, 6))
            {
              uint64_t v81 = (void *)v115;
              float v79 = (float)(int)[(id)v115 integerValue];
LABEL_56:
              v126[0] = v79;
              __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for FeatureMatrixBuilder<Float>);
              uint64_t v99 = specialized DenseMatrix.subscript.modify(&v118, v122, a7);
              *uint64_t v100 = LODWORD(v126[0]);
              ((void (*)(long long *, void))v99)(&v118, 0);

LABEL_57:
              uint64_t v93 = &v113;
              return __swift_destroy_boxed_opaque_existential_1Tm(v93);
            }
LABEL_59:
            uint64_t v51 = a2;
            uint64_t v52 = (void *)a3;
            *(void *)&long long v118 = 0;
            *((void *)&v118 + 1) = 0xE000000000000000;
            _StringGuts.grow(_:)(63);
            v53._char object = "sessionDirectory" + 0x8000000000000000;
            v53._uint64_t countAndFlagsBits = 0xD000000000000025;
LABEL_35:
            String.append(_:)(v53);
            swift_bridgeObjectRetain((_BYTE)v52);
            v54._uint64_t countAndFlagsBits = v51;
            v54._char object = v52;
            String.append(_:)(v54);
            swift_bridgeObjectRelease((_BYTE)v52);
            v54._uint64_t countAndFlagsBits = 0x6720747562202C27;
            v54._char object = (void *)0xEB0000000020746FLL;
            String.append(_:)(v54);
            uint64_t v55 = v114;
            uint64_t v56 = __swift_project_boxed_opaque_existential_0Tm(&v113, v114);
            uint64_t DynamicType = swift_getDynamicType(v56, v55, 1);
            uint64_t v58 = _typeName(_:qualified:)(DynamicType, 0);
            LOBYTE(v55) = (_BYTE)v59;
            v54._uint64_t countAndFlagsBits = v58;
            v54._char object = v59;
            String.append(_:)(v54);
            swift_bridgeObjectRelease(v55);
            v54._uint64_t countAndFlagsBits = 0x20776F7220746120;
            v54._char object = (void *)0xE800000000000000;
            String.append(_:)(v54);
            *(void *)&long long v115 = v122;
            uint64_t v60 = dispatch thunk of CustomStringConvertible.description.getter(&type metadata for Int, &protocol witness table for Int);
            LOBYTE(v55) = (_BYTE)v61;
            v54._uint64_t countAndFlagsBits = v60;
            v54._char object = v61;
            String.append(_:)(v54);
            swift_bridgeObjectRelease(v55);
            v54._uint64_t countAndFlagsBits = 46;
            v54._char object = (void *)0xE100000000000000;
            String.append(_:)(v54);
            long long v122 = v118;
            v54._char object = (void *)lazy protocol witness table accessor for type MLCreateError and conformance MLCreateError();
            swift_allocError(&type metadata for MLCreateError, v54._object, 0, 0);
            *(_OWORD *)uint64_t v62 = v122;
            *(_OWORD *)(v62 + 16) = 0;
            *(_OWORD *)(v62 + 32) = 0;
            *(unsigned char *)(v62 + 48) = 0;
            swift_willThrow(&type metadata for MLCreateError, v54._object, v62, v63, v64, v65);
            uint64_t v66 = &v113;
            return __swift_destroy_boxed_opaque_existential_1Tm(v66);
          }
LABEL_45:
          outlined init with take of MLIdentifier(&v115, (uint64_t)&v118);
          uint64_t v84 = *((void *)&v119 + 1);
          uint64_t v85 = v120;
          uint64_t v86 = __swift_project_boxed_opaque_existential_0Tm(&v118, *((uint64_t *)&v119 + 1));
          uint64_t v87 = *(void *)(v84 - 8);
          int64_t v88 = *(void *)(v87 + 64);
          unint64_t v89 = alloca(v88);
          uint64_t v90 = alloca(v88);
          (*(void (**)(uint64_t *, void *, uint64_t))(v87 + 16))(&v106, v86, v84);
          v126[0] = specialized BinaryFloatingPoint.init<A>(_:)((uint64_t)&v106, v84, v85);
          __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for FeatureMatrixBuilder<Float>);
          uint64_t v91 = specialized DenseMatrix.subscript.modify(&v115, v122, a7);
          *unint64_t v92 = LODWORD(v126[0]);
          ((void (*)(long long *, void))v91)(&v115, 0);
          __swift_destroy_boxed_opaque_existential_1Tm(&v113);
          uint64_t v93 = &v118;
          return __swift_destroy_boxed_opaque_existential_1Tm(v93);
        }
        outlined init with take of MLIdentifier(&v115, (uint64_t)&v118);
        uint64_t v68 = *((void *)&v119 + 1);
        uint64_t v69 = (void *)v120;
        uint64_t v70 = __swift_project_boxed_opaque_existential_0Tm(&v118, *((uint64_t *)&v119 + 1));
        uint64_t v123 = &v106;
        uint64_t v71 = *(void *)(v68 - 8);
        int64_t v72 = *(void *)(v71 + 64);
        uint64_t v73 = alloca(v72);
        uint64_t v74 = alloca(v72);
        uint64_t v124 = v71;
        (*(void (**)(uint64_t *, void *, uint64_t))(v71 + 16))(&v106, v70, v68);
        *(void *)uint64_t v126 = v69;
        if (dispatch thunk of BinaryInteger.bitWidth.getter(v68, v69) < 65)
        {
          uint64_t v96 = *(void **)v126;
          LOBYTE(v121._countAndFlagsBits) = dispatch thunk of static BinaryInteger.isSigned.getter(v68, *(void *)v126);
          uint64_t v97 = dispatch thunk of BinaryInteger._lowWord.getter(v68, v96);
          (*(void (**)(uint64_t *, uint64_t))(v124 + 8))(&v106, v68);
          if ((v121._countAndFlagsBits & 1) == 0)
          {
            if (v97 < 0) {
              float v102 = (float)(int)(((unint64_t)v97 >> 1) | v97 & 1)
            }
                   + (float)(int)(((unint64_t)v97 >> 1) | v97 & 1);
            else {
              float v102 = (float)(int)v97;
            }
            v126[0] = v102;
            goto LABEL_69;
          }
          float v77 = (float)(int)v97;
        }
        else
        {
          uint64_t v75 = lazy protocol witness table accessor for type Float and conformance Float();
          uint64_t v76 = lazy protocol witness table accessor for type UInt32 and conformance UInt32();
          static BinaryFloatingPoint<>._convert<A>(from:)(&v115, &v106, &type metadata for Float, v68, v75, *(void *)v126, v76);
          (*(void (**)(uint64_t *, uint64_t))(v124 + 8))(&v106, v68);
          float v77 = *(float *)&v115;
        }
        v126[0] = v77;
LABEL_69:
        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for FeatureMatrixBuilder<Float>);
        char v103 = specialized DenseMatrix.subscript.modify(&v115, v122, a7);
        float v105 = v126[0];
        goto LABEL_70;
      }
      outlined init with copy of Any((uint64_t)&v113, (uint64_t)v107);
      uint64_t v40 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for BinaryInteger);
      if (!swift_dynamicCast(&v115, v107, (char *)&type metadata for Any + 8, v40, 6))
      {
        long long v116 = 0;
        long long v115 = 0;
        uint64_t v117 = 0;
        outlined destroy of Either<LogisticRegressionClassifier<Float, String>, FullyConnectedNetworkClassifier<Float, String>>((uint64_t)&v115, &demangling cache variable for type metadata for BinaryInteger?);
        outlined init with copy of Any((uint64_t)&v113, (uint64_t)v107);
        uint64_t v78 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for BinaryFloatingPoint);
        if (!swift_dynamicCast(&v115, v107, (char *)&type metadata for Any + 8, v78, 6))
        {
          float v79 = 0.0;
          long long v116 = 0;
          long long v115 = 0;
          uint64_t v117 = 0;
          outlined destroy of Either<LogisticRegressionClassifier<Float, String>, FullyConnectedNetworkClassifier<Float, String>>((uint64_t)&v115, &demangling cache variable for type metadata for BinaryFloatingPoint?);
          outlined init with copy of Any((uint64_t)&v113, (uint64_t)&v118);
          uint64_t v80 = type metadata accessor for OS_os_log(0, &lazy cache variable for type metadata for NSNumber, NSNumber_ptr);
          if (swift_dynamicCast(&v115, &v118, (char *)&type metadata for Any + 8, v80, 6))
          {
            uint64_t v81 = (void *)v115;
            [(id)v115 floatValue];
            goto LABEL_56;
          }
          goto LABEL_59;
        }
        goto LABEL_45;
      }
      outlined init with take of MLIdentifier(&v115, (uint64_t)&v118);
      uint64_t v41 = *((void *)&v119 + 1);
      uint64_t v42 = v120;
      uint64_t v43 = __swift_project_boxed_opaque_existential_0Tm(&v118, *((uint64_t *)&v119 + 1));
      *(void *)uint64_t v126 = &v106;
      uint64_t v44 = *(void *)(v41 - 8);
      int64_t v45 = *(void *)(v44 + 64);
      uint64_t v46 = alloca(v45);
      uint64_t v47 = alloca(v45);
      uint64_t v123 = (uint64_t *)v44;
      (*(void (**)(uint64_t *, void *, uint64_t))(v44 + 16))(&v106, v43, v41);
      uint64_t v124 = v42;
      if (dispatch thunk of BinaryInteger.bitWidth.getter(v41, v42) < 65)
      {
        uint64_t v94 = v124;
        LOBYTE(v121._countAndFlagsBits) = dispatch thunk of static BinaryInteger.isSigned.getter(v41, v124);
        uint64_t v95 = dispatch thunk of BinaryInteger._lowWord.getter(v41, v94);
        ((void (*)(uint64_t *, uint64_t))v123[1])(&v106, v41);
        if ((v121._countAndFlagsBits & 1) == 0)
        {
          if (v95 < 0) {
            float v101 = (float)(int)(((unint64_t)v95 >> 1) | v95 & 1)
          }
                 + (float)(int)(((unint64_t)v95 >> 1) | v95 & 1);
          else {
            float v101 = (float)(int)v95;
          }
          *(float *)&uint64_t v124 = v101;
          goto LABEL_66;
        }
        float v50 = (float)(int)v95;
      }
      else
      {
        uint64_t v48 = lazy protocol witness table accessor for type Float and conformance Float();
        uint64_t v49 = lazy protocol witness table accessor for type UInt32 and conformance UInt32();
        static BinaryFloatingPoint<>._convert<A>(from:)(&v115, &v106, &type metadata for Float, v41, v48, v124, v49);
        ((void (*)(uint64_t *, uint64_t))v123[1])(&v106, v41);
        float v50 = *(float *)&v115;
      }
      *(float *)&uint64_t v124 = v50;
LABEL_66:
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for FeatureMatrixBuilder<Float>);
      char v103 = specialized DenseMatrix.subscript.modify(&v115, v122, a7);
      float v105 = *(float *)&v124;
LABEL_70:
      *double v104 = v105;
      ((void (*)(long long *, void))v103)(&v115, 0);
      __swift_destroy_boxed_opaque_existential_1Tm(&v113);
      uint64_t v66 = &v118;
      return __swift_destroy_boxed_opaque_existential_1Tm(v66);
  }
}

uint64_t specialized FeatureMatrixBuilder.fill(_:descriptor:row:column:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unsigned __int8 a5, uint64_t a6, __m128d a7, unint64_t a8)
{
  uint64_t v125 = v8;
  v121._char object = v9;
  *(void *)&long long v122 = a6;
  v120.i64[0] = a4;
  outlined init with copy of Either<LogisticRegressionClassifier<Float, String>, FullyConnectedNetworkClassifier<Float, String>>(a1, (uint64_t)&v117, &demangling cache variable for type metadata for Any?);
  if (!*((void *)&v118 + 1)) {
    return outlined destroy of Either<LogisticRegressionClassifier<Float, String>, FullyConnectedNetworkClassifier<Float, String>>((uint64_t)&v117, &demangling cache variable for type metadata for Any?);
  }
  outlined init with take of Any(&v117, &v112);
  switch(a5)
  {
    case 0u:
    case 1u:
    case 2u:
    case 3u:
      specialized FeatureMatrixBuilder.fillArray(_:descriptor:size:row:column:)(&v112, a2, a3, v120.i64[0], a5, v120.i64[0], (void *)v122, a8, &demangling cache variable for type metadata for FeatureMatrixBuilder<Double>, (void (*)(unsigned char *, uint64_t, void, uint64_t, void, uint64_t, void *, uint64_t))specialized FeatureMatrixBuilder.fillArray<A>(_:descriptor:size:row:column:), (void (*)(unsigned char *, uint64_t, void, uint64_t, void, uint64_t, void *, uint64_t))specialized FeatureMatrixBuilder.fillArray<A>(_:descriptor:size:row:column:), (void (*)(unsigned char *, uint64_t, void, uint64_t, void, uint64_t, void *, uint64_t))specialized FeatureMatrixBuilder.fillArray<A>(_:descriptor:size:row:column:));
      return __swift_destroy_boxed_opaque_existential_1Tm(&v112);
    case 4u:
      outlined init with copy of Any((uint64_t)&v112, (uint64_t)&v117);
      uint64_t v13 = v120.i64[0];
      swift_bridgeObjectRetain(v120.i8[0]);
      if (!swift_dynamicCast(&v114, &v117, (char *)&type metadata for Any + 8, &type metadata for String, 6))
      {
        outlined consume of ColumnDescriptor.ColumnTypeDescriptor(v13, 4);
        uint64_t v51 = a2;
        uint64_t v52 = (void *)a3;
        *(void *)&long long v117 = 0;
        *((void *)&v117 + 1) = 0xE000000000000000;
        _StringGuts.grow(_:)(62);
        v53._uint64_t countAndFlagsBits = 0xD000000000000024;
        v53._char object = "', but got shape ";
        goto LABEL_34;
      }
      v121._uint64_t countAndFlagsBits = *((void *)&v114 + 1);
      uint64_t v111 = *(void *)(v13 + 16);
      if (v111)
      {
        uint64_t v124 = (uint64_t *)v114;
        uint64_t v14 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for FeatureMatrixBuilder<Double>);
        v121._char object = (char *)v121._object + *(int *)(v14 + 44);
        uint64_t v15 = (uint64_t *)(v120.i64[0] + 40);
        uint64_t v16 = 0;
        do
        {
          unint64_t v17 = v16 + a8;
          if (__OFADD__(v16, a8)) {
            BUG();
          }
          uint64_t v18 = (uint64_t *)*(v15 - 1);
          uint64_t v19 = *v15;
          if (v18 != v124 || (uint64_t v20 = 0x3FF0000000000000, v19 != v121._countAndFlagsBits))
          {
            uint64_t v20 = 0x3FF0000000000000;
            if ((_stringCompareWithSmolCheck(_:_:expecting:)(v18, v19, v124, v121._countAndFlagsBits, 0) & 1) == 0) {
              uint64_t v20 = 0;
            }
          }
          v123.i64[0] = v20;
          ++v16;
          uint64_t v21 = specialized DenseMatrix.subscript.modify(&v117, v122, v17);
          *uint64_t v22 = v123.i64[0];
          ((void (*)(long long *, void))v21)(&v117, 0);
          v15 += 2;
        }
        while (v111 != v16);
      }
      __swift_destroy_boxed_opaque_existential_1Tm(&v112);
      outlined consume of ColumnDescriptor.ColumnTypeDescriptor(v120.i64[0], 4);
      return swift_bridgeObjectRelease(v121._countAndFlagsBits);
    case 5u:
      outlined init with copy of Any((uint64_t)&v112, (uint64_t)&v117);
      uint64_t v23 = v120.i64[0];
      swift_bridgeObjectRetain(v120.i8[0]);
      uint64_t v24 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [String : Any]);
      if (swift_dynamicCast(&v114, &v117, (char *)&type metadata for Any + 8, v24, 6))
      {
        uint64_t v25 = v114;
        uint64_t v108 = *(void *)(v23 + 16);
        if (v108)
        {
          uint64_t v26 = (unsigned __int8 *)(v23 + 56);
          v123.i64[0] = 0;
          uint64_t v110 = v114;
          while (1)
          {
            uint64_t v27 = *((void *)v26 - 3);
            uint64_t v28 = *((void *)v26 - 2);
            uint64_t v29 = *((void *)v26 - 1);
            BOOL v30 = *(void *)(v25 + 16) == 0;
            uint64_t v107 = v26;
            int v31 = *v26;
            v121._uint64_t countAndFlagsBits = v27;
            uint64_t v124 = (uint64_t *)v28;
            LODWORD(v111) = v31;
            if (v30)
            {
              long long v118 = 0;
              long long v117 = 0;
              swift_bridgeObjectRetain(v28);
              outlined copy of ColumnDescriptor.ColumnTypeDescriptor(v29, v31);
              uint64_t v38 = v29;
            }
            else
            {
              uint64_t v32 = v28;
              uint64_t v33 = v27;
              swift_bridgeObjectRetain_n(v32, 2);
              uint64_t v109 = v29;
              outlined copy of ColumnDescriptor.ColumnTypeDescriptor(v29, v31);
              uint64_t v34 = v33;
              char v35 = (char)v124;
              unint64_t v36 = specialized __RawDictionaryStorage.find<A>(_:)(v34, (uint64_t)v124);
              if (v37)
              {
                outlined init with copy of Any(*(void *)(v25 + 56) + 32 * v36, (uint64_t)&v117);
              }
              else
              {
                long long v118 = 0;
                long long v117 = 0;
              }
              swift_bridgeObjectRelease(v35);
              uint64_t v38 = v109;
            }
            if (__OFADD__(v123.i64[0], a8)) {
              BUG();
            }
            char v39 = (char)v124;
            uint64_t v40 = v125;
            specialized FeatureMatrixBuilder.fill(_:descriptor:row:column:)(&v117, v121._countAndFlagsBits, v124, v38, v111, v122, v123.i64[0] + a8);
            swift_bridgeObjectRelease(v39);
            uint64_t v125 = v40;
            if (v40) {
              break;
            }
            outlined consume of ColumnDescriptor.ColumnTypeDescriptor(v38, v111);
            outlined destroy of Either<LogisticRegressionClassifier<Float, String>, FullyConnectedNetworkClassifier<Float, String>>((uint64_t)&v117, &demangling cache variable for type metadata for Any?);
            uint64_t v26 = v107 + 32;
            ++v123.i64[0];
            uint64_t v25 = v110;
            if (v108 == v123.i64[0])
            {
              swift_bridgeObjectRelease(v110);
              uint64_t v23 = v120.i64[0];
              goto LABEL_43;
            }
          }
          swift_bridgeObjectRelease(v110);
          outlined consume of ColumnDescriptor.ColumnTypeDescriptor(v38, v111);
          outlined destroy of Either<LogisticRegressionClassifier<Float, String>, FullyConnectedNetworkClassifier<Float, String>>((uint64_t)&v117, &demangling cache variable for type metadata for Any?);
          uint64_t v81 = v120.i64[0];
        }
        else
        {
          swift_bridgeObjectRelease(v114);
LABEL_43:
          uint64_t v81 = v23;
        }
        outlined consume of ColumnDescriptor.ColumnTypeDescriptor(v81, 5);
        goto LABEL_55;
      }
      outlined consume of ColumnDescriptor.ColumnTypeDescriptor(v23, 5);
      uint64_t v51 = a2;
      uint64_t v52 = (void *)a3;
      *(void *)&long long v117 = 0;
      *((void *)&v117 + 1) = 0xE000000000000000;
      _StringGuts.grow(_:)(66);
      v53._uint64_t countAndFlagsBits = 0xD000000000000028;
      v53._char object = "values for feature '";
LABEL_34:
      v53._char object = (void *)((unint64_t)v53._object | 0x8000000000000000);
      goto LABEL_35;
    case 6u:
      if (!v120.i64[0])
      {
        outlined init with copy of Any((uint64_t)&v112, (uint64_t)v106);
        uint64_t v67 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for BinaryInteger);
        if (swift_dynamicCast(&v114, v106, (char *)&type metadata for Any + 8, v67, 6))
        {
          outlined init with take of MLIdentifier(&v114, (uint64_t)&v117);
          uint64_t v68 = *((void *)&v118 + 1);
          uint64_t v69 = v119;
          uint64_t v70 = __swift_project_boxed_opaque_existential_0Tm(&v117, *((uint64_t *)&v118 + 1));
          uint64_t v124 = &v105;
          uint64_t v71 = *(void *)(v68 - 8);
          int64_t v72 = *(void *)(v71 + 64);
          uint64_t v73 = alloca(v72);
          uint64_t v74 = alloca(v72);
          v120.i64[0] = v71;
          (*(void (**)(uint64_t *, void *, uint64_t))(v71 + 16))(&v105, v70, v68);
          v123.i64[0] = v69;
          if (dispatch thunk of BinaryInteger.bitWidth.getter(v68, v69) < 65)
          {
            uint64_t v95 = v123.i64[0];
            LOBYTE(v121._countAndFlagsBits) = dispatch thunk of static BinaryInteger.isSigned.getter(v68, v123.i64[0]);
            uint64_t v96 = dispatch thunk of BinaryInteger._lowWord.getter(v68, v95);
            (*(void (**)(uint64_t *, uint64_t))(v120.i64[0] + 8))(&v105, v68);
            if (v121._countAndFlagsBits)
            {
              a7.f64[0] = (double)(int)v96;
            }
            else
            {
              __m128d v104 = _mm_sub_pd((__m128d)_mm_unpacklo_epi32((__m128i)(unint64_t)v96, (__m128i)xmmword_346D90), (__m128d)xmmword_346DA0);
              a7 = _mm_hadd_pd(v104, v104);
            }
          }
          else
          {
            uint64_t v75 = lazy protocol witness table accessor for type Double and conformance Double();
            uint64_t v76 = lazy protocol witness table accessor for type UInt64 and conformance UInt64();
            static BinaryFloatingPoint<>._convert<A>(from:)(&v114, &v105, &type metadata for Double, v68, v75, v123.i64[0], v76);
            (*(void (**)(uint64_t *, uint64_t))(v120.i64[0] + 8))(&v105, v68);
            a7 = (__m128d)(unint64_t)v114;
          }
          __m128 v123 = (__m128)a7;
          __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for FeatureMatrixBuilder<Double>);
          float v101 = specialized DenseMatrix.subscript.modify(&v114, v122, a8);
          uint64_t v103 = v123.i64[0];
          goto LABEL_62;
        }
        long long v115 = 0;
        long long v114 = 0;
        uint64_t v116 = 0;
        outlined destroy of Either<LogisticRegressionClassifier<Float, String>, FullyConnectedNetworkClassifier<Float, String>>((uint64_t)&v114, &demangling cache variable for type metadata for BinaryInteger?);
        outlined init with copy of Any((uint64_t)&v112, (uint64_t)v106);
        uint64_t v82 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for BinaryFloatingPoint);
        if (!swift_dynamicCast(&v114, v106, (char *)&type metadata for Any + 8, v82, 6))
        {
          long long v115 = 0;
          long long v114 = 0;
          uint64_t v116 = 0;
          outlined destroy of Either<LogisticRegressionClassifier<Float, String>, FullyConnectedNetworkClassifier<Float, String>>((uint64_t)&v114, &demangling cache variable for type metadata for BinaryFloatingPoint?);
          outlined init with copy of Any((uint64_t)&v112, (uint64_t)&v117);
          uint64_t v97 = type metadata accessor for OS_os_log(0, &lazy cache variable for type metadata for NSNumber, NSNumber_ptr);
          if (swift_dynamicCast(&v114, &v117, (char *)&type metadata for Any + 8, v97, 6))
          {
            float v79 = (void *)v114;
            double v80 = (double)(int)[(id)v114 integerValue];
LABEL_54:
            *(double *)v123.i64 = v80;
            __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for FeatureMatrixBuilder<Double>);
            uint64_t v98 = specialized DenseMatrix.subscript.modify(&v117, v122, a8);
            *uint64_t v99 = v123.i64[0];
            ((void (*)(long long *, void))v98)(&v117, 0);

LABEL_55:
            unint64_t v92 = &v112;
            return __swift_destroy_boxed_opaque_existential_1Tm(v92);
          }
LABEL_57:
          uint64_t v51 = a2;
          uint64_t v52 = (void *)a3;
          *(void *)&long long v117 = 0;
          *((void *)&v117 + 1) = 0xE000000000000000;
          _StringGuts.grow(_:)(63);
          v53._char object = "sessionDirectory" + 0x8000000000000000;
          v53._uint64_t countAndFlagsBits = 0xD000000000000025;
LABEL_35:
          String.append(_:)(v53);
          swift_bridgeObjectRetain((_BYTE)v52);
          v54._uint64_t countAndFlagsBits = v51;
          v54._char object = v52;
          String.append(_:)(v54);
          swift_bridgeObjectRelease((_BYTE)v52);
          v54._uint64_t countAndFlagsBits = 0x6720747562202C27;
          v54._char object = (void *)0xEB0000000020746FLL;
          String.append(_:)(v54);
          uint64_t v55 = v113;
          uint64_t v56 = __swift_project_boxed_opaque_existential_0Tm(&v112, v113);
          uint64_t DynamicType = swift_getDynamicType(v56, v55, 1);
          uint64_t v58 = _typeName(_:qualified:)(DynamicType, 0);
          LOBYTE(v55) = (_BYTE)v59;
          v54._uint64_t countAndFlagsBits = v58;
          v54._char object = v59;
          String.append(_:)(v54);
          swift_bridgeObjectRelease(v55);
          v54._uint64_t countAndFlagsBits = 0x20776F7220746120;
          v54._char object = (void *)0xE800000000000000;
          String.append(_:)(v54);
          *(void *)&long long v114 = v122;
          uint64_t v60 = dispatch thunk of CustomStringConvertible.description.getter(&type metadata for Int, &protocol witness table for Int);
          LOBYTE(v55) = (_BYTE)v61;
          v54._uint64_t countAndFlagsBits = v60;
          v54._char object = v61;
          String.append(_:)(v54);
          swift_bridgeObjectRelease(v55);
          v54._uint64_t countAndFlagsBits = 46;
          v54._char object = (void *)0xE100000000000000;
          String.append(_:)(v54);
          long long v122 = v117;
          v54._char object = (void *)lazy protocol witness table accessor for type MLCreateError and conformance MLCreateError();
          swift_allocError(&type metadata for MLCreateError, v54._object, 0, 0);
          *(_OWORD *)uint64_t v62 = v122;
          *(_OWORD *)(v62 + 16) = 0;
          *(_OWORD *)(v62 + 32) = 0;
          *(unsigned char *)(v62 + 48) = 0;
          swift_willThrow(&type metadata for MLCreateError, v54._object, v62, v63, v64, v65);
          uint64_t v66 = &v112;
          return __swift_destroy_boxed_opaque_existential_1Tm(v66);
        }
LABEL_45:
        outlined init with take of MLIdentifier(&v114, (uint64_t)&v117);
        uint64_t v83 = *((void *)&v118 + 1);
        uint64_t v84 = v119;
        uint64_t v85 = __swift_project_boxed_opaque_existential_0Tm(&v117, *((uint64_t *)&v118 + 1));
        uint64_t v86 = *(void *)(v83 - 8);
        int64_t v87 = *(void *)(v86 + 64);
        int64_t v88 = alloca(v87);
        unint64_t v89 = alloca(v87);
        (*(void (**)(uint64_t *, void *, uint64_t))(v86 + 16))(&v105, v85, v83);
        v123.i64[0] = specialized BinaryFloatingPoint.init<A>(_:)((uint64_t)&v105, v83, v84);
        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for FeatureMatrixBuilder<Double>);
        uint64_t v90 = specialized DenseMatrix.subscript.modify(&v114, v122, a8);
        *uint64_t v91 = v123.i64[0];
        ((void (*)(long long *, void))v90)(&v114, 0);
        __swift_destroy_boxed_opaque_existential_1Tm(&v112);
        unint64_t v92 = &v117;
        return __swift_destroy_boxed_opaque_existential_1Tm(v92);
      }
      outlined init with copy of Any((uint64_t)&v112, (uint64_t)v106);
      uint64_t v41 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for BinaryInteger);
      if (!swift_dynamicCast(&v114, v106, (char *)&type metadata for Any + 8, v41, 6))
      {
        long long v115 = 0;
        long long v114 = 0;
        uint64_t v116 = 0;
        outlined destroy of Either<LogisticRegressionClassifier<Float, String>, FullyConnectedNetworkClassifier<Float, String>>((uint64_t)&v114, &demangling cache variable for type metadata for BinaryInteger?);
        outlined init with copy of Any((uint64_t)&v112, (uint64_t)v106);
        uint64_t v77 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for BinaryFloatingPoint);
        if (!swift_dynamicCast(&v114, v106, (char *)&type metadata for Any + 8, v77, 6))
        {
          long long v115 = 0;
          long long v114 = 0;
          uint64_t v116 = 0;
          outlined destroy of Either<LogisticRegressionClassifier<Float, String>, FullyConnectedNetworkClassifier<Float, String>>((uint64_t)&v114, &demangling cache variable for type metadata for BinaryFloatingPoint?);
          outlined init with copy of Any((uint64_t)&v112, (uint64_t)&v117);
          uint64_t v78 = type metadata accessor for OS_os_log(0, &lazy cache variable for type metadata for NSNumber, NSNumber_ptr);
          if (swift_dynamicCast(&v114, &v117, (char *)&type metadata for Any + 8, v78, 6))
          {
            float v79 = (void *)v114;
            [(id)v114 floatValue];
            double v80 = 0.0;
            goto LABEL_54;
          }
          goto LABEL_57;
        }
        goto LABEL_45;
      }
      outlined init with take of MLIdentifier(&v114, (uint64_t)&v117);
      uint64_t v42 = *((void *)&v118 + 1);
      uint64_t v43 = v119;
      uint64_t v44 = __swift_project_boxed_opaque_existential_0Tm(&v117, *((uint64_t *)&v118 + 1));
      v123.i64[0] = (uint64_t)&v105;
      uint64_t v45 = *(void *)(v42 - 8);
      int64_t v46 = *(void *)(v45 + 64);
      uint64_t v47 = alloca(v46);
      uint64_t v48 = alloca(v46);
      uint64_t v124 = (uint64_t *)v45;
      (*(void (**)(uint64_t *, void *, uint64_t))(v45 + 16))(&v105, v44, v42);
      v120.i64[0] = v43;
      if (dispatch thunk of BinaryInteger.bitWidth.getter(v42, v43) < 65)
      {
        uint64_t v93 = v120.i64[0];
        LOBYTE(v121._countAndFlagsBits) = dispatch thunk of static BinaryInteger.isSigned.getter(v42, v120.i64[0]);
        uint64_t v94 = dispatch thunk of BinaryInteger._lowWord.getter(v42, v93);
        ((void (*)(uint64_t *, uint64_t))v124[1])(&v105, v42);
        if (v121._countAndFlagsBits)
        {
          a7.f64[0] = (double)(int)v94;
        }
        else
        {
          __m128d v100 = _mm_sub_pd((__m128d)_mm_unpacklo_epi32((__m128i)(unint64_t)v94, (__m128i)xmmword_346D90), (__m128d)xmmword_346DA0);
          a7 = _mm_hadd_pd(v100, v100);
        }
      }
      else
      {
        uint64_t v49 = lazy protocol witness table accessor for type Double and conformance Double();
        uint64_t v50 = lazy protocol witness table accessor for type UInt64 and conformance UInt64();
        static BinaryFloatingPoint<>._convert<A>(from:)(&v114, &v105, &type metadata for Double, v42, v49, v120.i64[0], v50);
        ((void (*)(uint64_t *, uint64_t))v124[1])(&v105, v42);
        a7 = (__m128d)(unint64_t)v114;
      }
      __m128 v120 = (__m128)a7;
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for FeatureMatrixBuilder<Double>);
      float v101 = specialized DenseMatrix.subscript.modify(&v114, v122, a8);
      uint64_t v103 = v120.i64[0];
LABEL_62:
      *float v102 = v103;
      ((void (*)(long long *, void))v101)(&v114, 0);
      __swift_destroy_boxed_opaque_existential_1Tm(&v112);
      uint64_t v66 = &v117;
      return __swift_destroy_boxed_opaque_existential_1Tm(v66);
  }
}

void specialized FeatureMatrixBuilder.fillArray(_:descriptor:size:row:column:)(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5, uint64_t a6, void *a7, uint64_t a8, uint64_t *a9, void (*a10)(unsigned char *, uint64_t, void, uint64_t, void, uint64_t, void *, uint64_t), void (*a11)(unsigned char *, uint64_t, void, uint64_t, void, uint64_t, void *, uint64_t), void (*a12)(unsigned char *, uint64_t, void, uint64_t, void, uint64_t, void *, uint64_t))
{
  uint64_t v100 = v12;
  uint64_t v101 = v13;
  uint64_t v102 = a6;
  int v105 = a5;
  uint64_t v103 = a4;
  *(void *)&long long v98 = a3;
  v104._uint64_t countAndFlagsBits = a2;
  int64_t v14 = *(void *)(*(void *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for MLShapedArray<Double>?)
                              - 8)
                  + 64);
  uint64_t v15 = alloca(v14);
  uint64_t v16 = alloca(v14);
  uint64_t v85 = v81;
  uint64_t v84 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for MLShapedArray<Double>);
  uint64_t v97 = *(void *)(v84 - 8);
  int64_t v17 = *(void *)(v97 + 64);
  uint64_t v18 = alloca(v17);
  uint64_t v19 = alloca(v17);
  int64_t v87 = v81;
  uint64_t v20 = alloca(v17);
  uint64_t v21 = alloca(v17);
  uint64_t v90 = v81;
  int64_t v22 = *(void *)(*(void *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for MLShapedArray<Float>?)
                              - 8)
                  + 64);
  uint64_t v23 = alloca(v22);
  uint64_t v24 = alloca(v22);
  uint64_t v83 = v81;
  uint64_t v96 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for MLShapedArray<Float>);
  uint64_t v88 = *(void *)(v96 - 8);
  int64_t v25 = *(void *)(v88 + 64);
  uint64_t v26 = alloca(v25);
  uint64_t v27 = alloca(v25);
  unint64_t v89 = v81;
  int64_t v28 = *(void *)(*(void *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for MLShapedArray<Int32>?)
                              - 8)
                  + 64);
  uint64_t v29 = alloca(v28);
  BOOL v30 = alloca(v28);
  uint64_t v99 = v81;
  uint64_t v31 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for MLShapedArray<Int32>);
  uint64_t v32 = *(void *)(v31 - 8);
  int64_t v33 = *(void *)(v32 + 64);
  uint64_t v34 = alloca(v33);
  char v35 = alloca(v33);
  uint64_t v86 = v81;
  v104._char object = a1;
  outlined init with copy of Any((uint64_t)a1, (uint64_t)v81);
  uint64_t v36 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for any Collection<Self.Collection.Element == Int>);
  if (swift_dynamicCast(v82, v81, (char *)&type metadata for Any + 8, v36, 6))
  {
    outlined init with take of MLIdentifier((long long *)v82, (uint64_t)&v93);
    uint64_t v37 = v94;
    v104._char object = v95;
    uint64_t v38 = (long long *)__swift_project_boxed_opaque_existential_0Tm(&v93, v94);
    uint64_t v39 = __swift_instantiateConcreteTypeFromMangledName(a9);
    uint64_t v40 = lazy protocol witness table accessor for type Int and conformance Int();
    FeatureMatrixBuilder.fillArray<A, B>(_:descriptor:size:row:column:)(v38, v104._countAndFlagsBits, (void *)v98, v103, v105, v102, (uint64_t)a7, a8, v39, v37, (uint64_t)&type metadata for Int, (uint64_t)v104._object, v40);
LABEL_8:
    __swift_destroy_boxed_opaque_existential_1Tm(&v93);
    return;
  }
  uint64_t v91 = v32;
  char object = v104._object;
  outlined init with copy of Any((uint64_t)v104._object, (uint64_t)v81);
  uint64_t v42 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for any Collection<Self.Collection.Element == Float>);
  if (swift_dynamicCast(v82, v81, (char *)&type metadata for Any + 8, v42, 6))
  {
    outlined init with take of MLIdentifier((long long *)v82, (uint64_t)&v93);
    uint64_t v43 = v94;
    v104._char object = v95;
    uint64_t v44 = (long long *)__swift_project_boxed_opaque_existential_0Tm(&v93, v94);
    uint64_t v45 = __swift_instantiateConcreteTypeFromMangledName(a9);
    uint64_t v46 = lazy protocol witness table accessor for type Float and conformance Float();
    uint64_t v47 = &type metadata for Float;
LABEL_7:
    FeatureMatrixBuilder.fillArray<A, B>(_:descriptor:size:row:column:)(v44, v104._countAndFlagsBits, (void *)v98, v103, v105, v102, (uint64_t)a7, a8, v45, v43, (uint64_t)v47, (uint64_t)v104._object, v46);
    goto LABEL_8;
  }
  outlined init with copy of Any((uint64_t)object, (uint64_t)v81);
  uint64_t v48 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for any Collection<Self.Collection.Element == Double>);
  if (swift_dynamicCast(v82, v81, (char *)&type metadata for Any + 8, v48, 6))
  {
    outlined init with take of MLIdentifier((long long *)v82, (uint64_t)&v93);
    uint64_t v43 = v94;
    v104._char object = v95;
    uint64_t v44 = (long long *)__swift_project_boxed_opaque_existential_0Tm(&v93, v94);
    uint64_t v45 = __swift_instantiateConcreteTypeFromMangledName(a9);
    uint64_t v46 = lazy protocol witness table accessor for type Double and conformance Double();
    uint64_t v47 = &type metadata for Double;
    goto LABEL_7;
  }
  outlined init with copy of Any((uint64_t)object, (uint64_t)&v93);
  uint64_t v49 = (uint64_t)v99;
  if (swift_dynamicCast(v99, &v93, (char *)&type metadata for Any + 8, v31, 6))
  {
    __swift_storeEnumTagSinglePayload(v49, 0, 1, v31);
    int EnumTagSinglePayload = __swift_getEnumTagSinglePayload(v49, 1, v31);
    uint64_t v51 = v96;
    if (EnumTagSinglePayload != 1)
    {
      uint64_t v52 = v49;
      uint64_t v92 = v31;
      Swift::String v53 = v86;
      uint64_t v54 = v91;
      (*(void (**)(unsigned char *, uint64_t, uint64_t))(v91 + 32))(v86, v52, v31);
      a10(v53, v104._countAndFlagsBits, v98, v103, v105, v102, a7, a8);
      uint64_t v55 = v53;
      uint64_t v56 = v92;
LABEL_16:
      (*(void (**)(unsigned char *, uint64_t))(v54 + 8))(v55, v56);
      return;
    }
  }
  else
  {
    __swift_storeEnumTagSinglePayload(v49, 1, 1, v31);
    uint64_t v51 = v96;
  }
  outlined destroy of Either<LogisticRegressionClassifier<Float, String>, FullyConnectedNetworkClassifier<Float, String>>(v49, &demangling cache variable for type metadata for MLShapedArray<Int32>?);
  uint64_t v99 = (char *)&type metadata for Any + 8;
  char v57 = v104._object;
  outlined init with copy of Any((uint64_t)v104._object, (uint64_t)&v93);
  uint64_t v58 = (uint64_t)v83;
  if (swift_dynamicCast(v83, &v93, v99, v51, 6))
  {
    __swift_storeEnumTagSinglePayload(v58, 0, 1, v51);
    uint64_t v59 = v58;
    if (__swift_getEnumTagSinglePayload(v58, 1, v51) != 1)
    {
      uint64_t v60 = v89;
      uint64_t v54 = v88;
      (*(void (**)(unsigned char *, uint64_t, uint64_t))(v88 + 32))(v89, v58, v51);
      a11(v60, v104._countAndFlagsBits, v98, v103, v105, v102, a7, a8);
      uint64_t v55 = v60;
      uint64_t v56 = v96;
      goto LABEL_16;
    }
  }
  else
  {
    __swift_storeEnumTagSinglePayload(v58, 1, 1, v51);
    uint64_t v59 = v58;
  }
  outlined destroy of Either<LogisticRegressionClassifier<Float, String>, FullyConnectedNetworkClassifier<Float, String>>(v59, &demangling cache variable for type metadata for MLShapedArray<Float>?);
  outlined init with copy of Any((uint64_t)v57, (uint64_t)&v93);
  uint64_t v61 = (uint64_t)v85;
  uint64_t v62 = v84;
  if (swift_dynamicCast(v85, &v93, v99, v84, 6))
  {
    __swift_storeEnumTagSinglePayload(v61, 0, 1, v62);
    if (__swift_getEnumTagSinglePayload(v61, 1, v62) != 1)
    {
      uint64_t v63 = v90;
      (*(void (**)(unsigned char *, uint64_t, uint64_t))(v97 + 32))(v90, v61, v62);
      a12(v63, v104._countAndFlagsBits, v98, v103, v105, v102, a7, a8);
      (*(void (**)(unsigned char *, uint64_t))(v97 + 8))(v63, v62);
      return;
    }
  }
  else
  {
    __swift_storeEnumTagSinglePayload(v61, 1, 1, v62);
  }
  outlined destroy of Either<LogisticRegressionClassifier<Float, String>, FullyConnectedNetworkClassifier<Float, String>>(v61, &demangling cache variable for type metadata for MLShapedArray<Double>?);
  uint64_t v64 = v104._object;
  outlined init with copy of Any((uint64_t)v104._object, (uint64_t)&v93);
  uint64_t v65 = type metadata accessor for OS_os_log(0, &lazy cache variable for type metadata for MLMultiArray, MLMultiArray_ptr);
  if (swift_dynamicCast(v82, &v93, v99, v65, 6))
  {
    id v66 = v82[0];
    uint64_t v67 = v87;
    v104._char object = v66;
    MLShapedArray.init(_:)(v66, &type metadata for Double, &protocol witness table for Double);
    a12(v67, v104._countAndFlagsBits, v98, v103, v105, v102, a7, a8);
    (*(void (**)(unsigned char *, uint64_t))(v97 + 8))(v67, v62);
  }
  else
  {
    uint64_t v68 = (void *)v98;
    *(void *)&long long v93 = 0;
    *((void *)&v93 + 1) = 0xE000000000000000;
    _StringGuts.grow(_:)(75);
    v69._char object = "g-point values for feature '" + 0x8000000000000000;
    v69._uint64_t countAndFlagsBits = 0xD000000000000031;
    String.append(_:)(v69);
    swift_bridgeObjectRetain((_BYTE)v68);
    v69._uint64_t countAndFlagsBits = v104._countAndFlagsBits;
    v69._char object = v68;
    String.append(_:)(v69);
    swift_bridgeObjectRelease((_BYTE)v68);
    v69._uint64_t countAndFlagsBits = 0x6720747562202C27;
    v69._char object = (void *)0xEB0000000020746FLL;
    String.append(_:)(v69);
    uint64_t v70 = v64[3];
    uint64_t v71 = __swift_project_boxed_opaque_existential_0Tm(v64, v70);
    uint64_t DynamicType = swift_getDynamicType(v71, v70, 1);
    uint64_t v73 = _typeName(_:qualified:)(DynamicType, 0);
    LOBYTE(v70) = (_BYTE)v74;
    v69._uint64_t countAndFlagsBits = v73;
    v69._char object = v74;
    String.append(_:)(v69);
    swift_bridgeObjectRelease(v70);
    v69._uint64_t countAndFlagsBits = 0x20776F7220746120;
    v69._char object = (void *)0xE800000000000000;
    String.append(_:)(v69);
    v82[0] = a7;
    uint64_t v75 = dispatch thunk of CustomStringConvertible.description.getter(&type metadata for Int, &protocol witness table for Int);
    LOBYTE(v70) = (_BYTE)v76;
    v69._uint64_t countAndFlagsBits = v75;
    v69._char object = v76;
    String.append(_:)(v69);
    swift_bridgeObjectRelease(v70);
    v69._uint64_t countAndFlagsBits = 46;
    v69._char object = (void *)0xE100000000000000;
    String.append(_:)(v69);
    long long v98 = v93;
    v69._char object = (void *)lazy protocol witness table accessor for type MLCreateError and conformance MLCreateError();
    swift_allocError(&type metadata for MLCreateError, v69._object, 0, 0);
    *(_OWORD *)uint64_t v77 = v98;
    *(_OWORD *)(v77 + 16) = 0;
    *(_OWORD *)(v77 + 32) = 0;
    *(unsigned char *)(v77 + 48) = 0;
    swift_willThrow(&type metadata for MLCreateError, v69._object, v77, v78, v79, v80);
  }
}

uint64_t specialized FeatureMatrixBuilder.fillArray<A>(_:descriptor:size:row:column:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, void *a6, unint64_t a7, uint64_t a8)
{
  uint64_t v44 = v8;
  uint64_t v43 = v9;
  *(void *)&long long v45 = a3;
  v46._uint64_t countAndFlagsBits = a2;
  uint64_t v39 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Int>);
  uint64_t inited = (void *)swift_initStackObject(v39, v37);
  inited[2] = 1;
  inited[3] = 2;
  v46._char object = a6;
  inited[4] = a6;
  uint64_t v42 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for MLShapedArray<Int32>);
  uint64_t v41 = a1;
  uint64_t v12 = MLShapedArray.shape.getter(v42);
  LOBYTE(a6) = v12;
  BOOL v13 = specialized static Array<A>.== infix(_:_:)((uint64_t)inited, v12);
  swift_bridgeObjectRelease((_BYTE)a6);
  uint64_t result = swift_setDeallocating(inited);
  if (v13)
  {
    if ((uint64_t)v46._object < 0) {
      BUG();
    }
    if (v46._object)
    {
      uint64_t v15 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for FeatureMatrixBuilder<Float>);
      v43 += *(int *)(v15 + 44);
      uint64_t v16 = 0;
      char object = v46._object;
      do
      {
        if (__OFADD__(v16, a8)) {
          BUG();
        }
        *(void *)&long long v45 = v16 + 1;
        uint64_t v18 = (void *)swift_allocObject(v39, 40, 7);
        v18[2] = 1;
        void v18[3] = 2;
        v18[4] = v16;
        uint64_t v19 = lazy protocol witness table accessor for type FullyConnectedNetworkClassifier<Float, String> and conformance FullyConnectedNetworkClassifier<A, B>(&lazy protocol witness table cache variable for type MLShapedArray<Int32> and conformance MLShapedArray<A>, &demangling cache variable for type metadata for MLShapedArray<Int32>, (uint64_t)&protocol conformance descriptor for MLShapedArray<A>);
        MLShapedArrayProtocol.subscript.getter(v18, v42, v19);
        swift_bridgeObjectRelease((_BYTE)v18);
        *(float *)&v46._uint64_t countAndFlagsBits = (float)SLODWORD(v38[0]);
        uint64_t v20 = specialized DenseMatrix.subscript.modify(v38, a7, v16 + a8);
        _DWORD *v21 = v46._countAndFlagsBits;
        ((void (*)(_OWORD *, void))v20)(v38, 0);
        uint64_t result = v45;
        uint64_t v16 = v45;
      }
      while (object != (void *)v45);
    }
  }
  else
  {
    *(void *)&v38[0] = 0;
    *((void *)&v38[0] + 1) = 0xE000000000000000;
    _StringGuts.grow(_:)(84);
    v22._uint64_t countAndFlagsBits = 0xD000000000000023;
    v22._char object = " elements at row " + 0x8000000000000000;
    String.append(_:)(v22);
    unint64_t v40 = (unint64_t)v46._object;
    uint64_t v23 = dispatch thunk of CustomStringConvertible.description.getter(&type metadata for Int, &protocol witness table for Int);
    char v25 = (char)v24;
    v22._uint64_t countAndFlagsBits = v23;
    v22._char object = v24;
    String.append(_:)(v22);
    swift_bridgeObjectRelease(v25);
    v22._uint64_t countAndFlagsBits = 0x656620726F66205DLL;
    v22._char object = (void *)0xEF27206572757461;
    String.append(_:)(v22);
    uint64_t v26 = (void *)v45;
    swift_bridgeObjectRetain(v45);
    v22._uint64_t countAndFlagsBits = v46._countAndFlagsBits;
    v22._char object = v26;
    String.append(_:)(v22);
    swift_bridgeObjectRelease((_BYTE)v26);
    v22._char object = "arrays with shape [" + 0x8000000000000000;
    v22._uint64_t countAndFlagsBits = 0xD000000000000011;
    String.append(_:)(v22);
    uint64_t v27 = MLShapedArray.shape.getter(v42);
    LOBYTE(v26) = v27;
    uint64_t v28 = Array.description.getter(v27, &type metadata for Int);
    char v30 = (char)v29;
    v22._uint64_t countAndFlagsBits = v28;
    v22._char object = v29;
    String.append(_:)(v22);
    swift_bridgeObjectRelease((_BYTE)v26);
    swift_bridgeObjectRelease(v30);
    v22._uint64_t countAndFlagsBits = 0x20776F7220746120;
    v22._char object = (void *)0xE800000000000000;
    String.append(_:)(v22);
    unint64_t v40 = a7;
    uint64_t v31 = dispatch thunk of CustomStringConvertible.description.getter(&type metadata for Int, &protocol witness table for Int);
    LOBYTE(v26) = (_BYTE)v32;
    v22._uint64_t countAndFlagsBits = v31;
    v22._char object = v32;
    String.append(_:)(v22);
    swift_bridgeObjectRelease((_BYTE)v26);
    v22._uint64_t countAndFlagsBits = 46;
    v22._char object = (void *)0xE100000000000000;
    String.append(_:)(v22);
    long long v45 = v38[0];
    v22._char object = (void *)lazy protocol witness table accessor for type MLCreateError and conformance MLCreateError();
    swift_allocError(&type metadata for MLCreateError, v22._object, 0, 0);
    *(_OWORD *)uint64_t v33 = v45;
    *(_OWORD *)(v33 + 16) = 0;
    *(_OWORD *)(v33 + 32) = 0;
    *(unsigned char *)(v33 + 48) = 0;
    return swift_willThrow(&type metadata for MLCreateError, v22._object, v33, v34, v35, v36);
  }
  return result;
}

{
  uint64_t v8;
  uint64_t v9;
  void *inited;
  uint64_t v12;
  BOOL v13;
  uint64_t result;
  uint64_t v15;
  uint64_t v16;
  void *object;
  void *v18;
  uint64_t v19;
  void (*v20)(uint64_t);
  uint64_t *v21;
  Swift::String v22;
  uint64_t v23;
  void *v24;
  char v25;
  void *v26;
  uint64_t v27;
  uint64_t v28;
  void *v29;
  char v30;
  uint64_t v31;
  void *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  unsigned char v37[40];
  _OWORD v38[2];
  uint64_t v39;
  unint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  long long v45;
  Swift::String v46;

  uint64_t v44 = v8;
  uint64_t v43 = v9;
  *(void *)&long long v45 = a3;
  v46._uint64_t countAndFlagsBits = a2;
  uint64_t v39 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Int>);
  uint64_t inited = (void *)swift_initStackObject(v39, v37);
  inited[2] = 1;
  inited[3] = 2;
  v46._char object = a6;
  inited[4] = a6;
  uint64_t v42 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for MLShapedArray<Int32>);
  uint64_t v41 = a1;
  uint64_t v12 = MLShapedArray.shape.getter(v42);
  LOBYTE(a6) = v12;
  BOOL v13 = specialized static Array<A>.== infix(_:_:)((uint64_t)inited, v12);
  swift_bridgeObjectRelease((_BYTE)a6);
  uint64_t result = swift_setDeallocating(inited);
  if (v13)
  {
    if ((uint64_t)v46._object < 0) {
      BUG();
    }
    if (v46._object)
    {
      uint64_t v15 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for FeatureMatrixBuilder<Double>);
      v43 += *(int *)(v15 + 44);
      uint64_t v16 = 0;
      char object = v46._object;
      do
      {
        if (__OFADD__(v16, a8)) {
          BUG();
        }
        *(void *)&long long v45 = v16 + 1;
        uint64_t v18 = (void *)swift_allocObject(v39, 40, 7);
        v18[2] = 1;
        void v18[3] = 2;
        v18[4] = v16;
        uint64_t v19 = lazy protocol witness table accessor for type FullyConnectedNetworkClassifier<Float, String> and conformance FullyConnectedNetworkClassifier<A, B>(&lazy protocol witness table cache variable for type MLShapedArray<Int32> and conformance MLShapedArray<A>, &demangling cache variable for type metadata for MLShapedArray<Int32>, (uint64_t)&protocol conformance descriptor for MLShapedArray<A>);
        MLShapedArrayProtocol.subscript.getter(v18, v42, v19);
        swift_bridgeObjectRelease((_BYTE)v18);
        *(double *)&v46._uint64_t countAndFlagsBits = (double)SLODWORD(v38[0]);
        uint64_t v20 = specialized DenseMatrix.subscript.modify(v38, a7, v16 + a8);
        _DWORD *v21 = v46._countAndFlagsBits;
        ((void (*)(_OWORD *, void))v20)(v38, 0);
        uint64_t result = v45;
        uint64_t v16 = v45;
      }
      while (object != (void *)v45);
    }
  }
  else
  {
    *(void *)&v38[0] = 0;
    *((void *)&v38[0] + 1) = 0xE000000000000000;
    _StringGuts.grow(_:)(84);
    v22._uint64_t countAndFlagsBits = 0xD000000000000023;
    v22._char object = " elements at row " + 0x8000000000000000;
    String.append(_:)(v22);
    unint64_t v40 = (unint64_t)v46._object;
    uint64_t v23 = dispatch thunk of CustomStringConvertible.description.getter(&type metadata for Int, &protocol witness table for Int);
    char v25 = (char)v24;
    v22._uint64_t countAndFlagsBits = v23;
    v22._char object = v24;
    String.append(_:)(v22);
    swift_bridgeObjectRelease(v25);
    v22._uint64_t countAndFlagsBits = 0x656620726F66205DLL;
    v22._char object = (void *)0xEF27206572757461;
    String.append(_:)(v22);
    uint64_t v26 = (void *)v45;
    swift_bridgeObjectRetain(v45);
    v22._uint64_t countAndFlagsBits = v46._countAndFlagsBits;
    v22._char object = v26;
    String.append(_:)(v22);
    swift_bridgeObjectRelease((_BYTE)v26);
    v22._char object = "arrays with shape [" + 0x8000000000000000;
    v22._uint64_t countAndFlagsBits = 0xD000000000000011;
    String.append(_:)(v22);
    uint64_t v27 = MLShapedArray.shape.getter(v42);
    LOBYTE(v26) = v27;
    uint64_t v28 = Array.description.getter(v27, &type metadata for Int);
    char v30 = (char)v29;
    v22._uint64_t countAndFlagsBits = v28;
    v22._char object = v29;
    String.append(_:)(v22);
    swift_bridgeObjectRelease((_BYTE)v26);
    swift_bridgeObjectRelease(v30);
    v22._uint64_t countAndFlagsBits = 0x20776F7220746120;
    v22._char object = (void *)0xE800000000000000;
    String.append(_:)(v22);
    unint64_t v40 = a7;
    uint64_t v31 = dispatch thunk of CustomStringConvertible.description.getter(&type metadata for Int, &protocol witness table for Int);
    LOBYTE(v26) = (_BYTE)v32;
    v22._uint64_t countAndFlagsBits = v31;
    v22._char object = v32;
    String.append(_:)(v22);
    swift_bridgeObjectRelease((_BYTE)v26);
    v22._uint64_t countAndFlagsBits = 46;
    v22._char object = (void *)0xE100000000000000;
    String.append(_:)(v22);
    long long v45 = v38[0];
    v22._char object = (void *)lazy protocol witness table accessor for type MLCreateError and conformance MLCreateError();
    swift_allocError(&type metadata for MLCreateError, v22._object, 0, 0);
    *(_OWORD *)uint64_t v33 = v45;
    *(_OWORD *)(v33 + 16) = 0;
    *(_OWORD *)(v33 + 32) = 0;
    *(unsigned char *)(v33 + 48) = 0;
    return swift_willThrow(&type metadata for MLCreateError, v22._object, v33, v34, v35, v36);
  }
  return result;
}

{
  uint64_t v8;
  uint64_t v9;
  void *inited;
  uint64_t v12;
  BOOL v13;
  uint64_t result;
  uint64_t v15;
  uint64_t v16;
  void *object;
  void *v18;
  uint64_t v19;
  void (*v20)(uint64_t);
  _DWORD *v21;
  Swift::String v22;
  uint64_t v23;
  void *v24;
  char v25;
  void *v26;
  uint64_t v27;
  uint64_t v28;
  void *v29;
  char v30;
  uint64_t v31;
  void *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  unsigned char v37[40];
  _OWORD v38[2];
  uint64_t v39;
  unint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  long long v45;
  Swift::String v46;

  uint64_t v44 = v8;
  uint64_t v43 = v9;
  *(void *)&long long v45 = a3;
  v46._uint64_t countAndFlagsBits = a2;
  uint64_t v39 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Int>);
  uint64_t inited = (void *)swift_initStackObject(v39, v37);
  inited[2] = 1;
  inited[3] = 2;
  v46._char object = a6;
  inited[4] = a6;
  uint64_t v42 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for MLShapedArray<Float>);
  uint64_t v41 = a1;
  uint64_t v12 = MLShapedArray.shape.getter(v42);
  LOBYTE(a6) = v12;
  BOOL v13 = specialized static Array<A>.== infix(_:_:)((uint64_t)inited, v12);
  swift_bridgeObjectRelease((_BYTE)a6);
  uint64_t result = swift_setDeallocating(inited);
  if (v13)
  {
    if ((uint64_t)v46._object < 0) {
      BUG();
    }
    if (v46._object)
    {
      uint64_t v15 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for FeatureMatrixBuilder<Float>);
      v43 += *(int *)(v15 + 44);
      uint64_t v16 = 0;
      char object = v46._object;
      do
      {
        if (__OFADD__(v16, a8)) {
          BUG();
        }
        *(void *)&long long v45 = v16 + 1;
        uint64_t v18 = (void *)swift_allocObject(v39, 40, 7);
        v18[2] = 1;
        void v18[3] = 2;
        v18[4] = v16;
        uint64_t v19 = lazy protocol witness table accessor for type FullyConnectedNetworkClassifier<Float, String> and conformance FullyConnectedNetworkClassifier<A, B>(&lazy protocol witness table cache variable for type MLShapedArray<Float> and conformance MLShapedArray<A>, &demangling cache variable for type metadata for MLShapedArray<Float>, (uint64_t)&protocol conformance descriptor for MLShapedArray<A>);
        MLShapedArrayProtocol.subscript.getter(v18, v42, v19);
        swift_bridgeObjectRelease((_BYTE)v18);
        LODWORD(v46._countAndFlagsBits) = v38[0];
        uint64_t v20 = specialized DenseMatrix.subscript.modify(v38, a7, v16 + a8);
        _DWORD *v21 = v46._countAndFlagsBits;
        ((void (*)(_OWORD *, void))v20)(v38, 0);
        uint64_t result = v45;
        uint64_t v16 = v45;
      }
      while (object != (void *)v45);
    }
  }
  else
  {
    *(void *)&v38[0] = 0;
    *((void *)&v38[0] + 1) = 0xE000000000000000;
    _StringGuts.grow(_:)(84);
    v22._uint64_t countAndFlagsBits = 0xD000000000000023;
    v22._char object = " elements at row " + 0x8000000000000000;
    String.append(_:)(v22);
    unint64_t v40 = (unint64_t)v46._object;
    uint64_t v23 = dispatch thunk of CustomStringConvertible.description.getter(&type metadata for Int, &protocol witness table for Int);
    char v25 = (char)v24;
    v22._uint64_t countAndFlagsBits = v23;
    v22._char object = v24;
    String.append(_:)(v22);
    swift_bridgeObjectRelease(v25);
    v22._uint64_t countAndFlagsBits = 0x656620726F66205DLL;
    v22._char object = (void *)0xEF27206572757461;
    String.append(_:)(v22);
    uint64_t v26 = (void *)v45;
    swift_bridgeObjectRetain(v45);
    v22._uint64_t countAndFlagsBits = v46._countAndFlagsBits;
    v22._char object = v26;
    String.append(_:)(v22);
    swift_bridgeObjectRelease((_BYTE)v26);
    v22._char object = "arrays with shape [" + 0x8000000000000000;
    v22._uint64_t countAndFlagsBits = 0xD000000000000011;
    String.append(_:)(v22);
    uint64_t v27 = MLShapedArray.shape.getter(v42);
    LOBYTE(v26) = v27;
    uint64_t v28 = Array.description.getter(v27, &type metadata for Int);
    char v30 = (char)v29;
    v22._uint64_t countAndFlagsBits = v28;
    v22._char object = v29;
    String.append(_:)(v22);
    swift_bridgeObjectRelease((_BYTE)v26);
    swift_bridgeObjectRelease(v30);
    v22._uint64_t countAndFlagsBits = 0x20776F7220746120;
    v22._char object = (void *)0xE800000000000000;
    String.append(_:)(v22);
    unint64_t v40 = a7;
    uint64_t v31 = dispatch thunk of CustomStringConvertible.description.getter(&type metadata for Int, &protocol witness table for Int);
    LOBYTE(v26) = (_BYTE)v32;
    v22._uint64_t countAndFlagsBits = v31;
    v22._char object = v32;
    String.append(_:)(v22);
    swift_bridgeObjectRelease((_BYTE)v26);
    v22._uint64_t countAndFlagsBits = 46;
    v22._char object = (void *)0xE100000000000000;
    String.append(_:)(v22);
    long long v45 = v38[0];
    v22._char object = (void *)lazy protocol witness table accessor for type MLCreateError and conformance MLCreateError();
    swift_allocError(&type metadata for MLCreateError, v22._object, 0, 0);
    *(_OWORD *)uint64_t v33 = v45;
    *(_OWORD *)(v33 + 16) = 0;
    *(_OWORD *)(v33 + 32) = 0;
    *(unsigned char *)(v33 + 48) = 0;
    return swift_willThrow(&type metadata for MLCreateError, v22._object, v33, v34, v35, v36);
  }
  return result;
}

{
  uint64_t v8;
  uint64_t v9;
  void *inited;
  uint64_t v12;
  BOOL v13;
  uint64_t result;
  uint64_t v15;
  uint64_t v16;
  void *object;
  void *v18;
  uint64_t v19;
  float v20;
  void (*v21)(uint64_t);
  _DWORD *v22;
  Swift::String v23;
  uint64_t v24;
  void *v25;
  char v26;
  void *v27;
  uint64_t v28;
  uint64_t v29;
  void *v30;
  char v31;
  uint64_t v32;
  void *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  unsigned char v38[40];
  double v39[4];
  uint64_t v40;
  unint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  long long v46;
  Swift::String v47;

  long long v45 = v8;
  uint64_t v44 = v9;
  *(void *)&Swift::String v46 = a3;
  v47._uint64_t countAndFlagsBits = a2;
  unint64_t v40 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Int>);
  uint64_t inited = (void *)swift_initStackObject(v40, v38);
  inited[2] = 1;
  inited[3] = 2;
  v47._char object = a6;
  inited[4] = a6;
  uint64_t v43 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for MLShapedArray<Double>);
  uint64_t v42 = a1;
  uint64_t v12 = MLShapedArray.shape.getter(v43);
  LOBYTE(a6) = v12;
  BOOL v13 = specialized static Array<A>.== infix(_:_:)((uint64_t)inited, v12);
  swift_bridgeObjectRelease((_BYTE)a6);
  uint64_t result = swift_setDeallocating(inited);
  if (v13)
  {
    if ((uint64_t)v47._object < 0) {
      BUG();
    }
    if (v47._object)
    {
      uint64_t v15 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for FeatureMatrixBuilder<Float>);
      v44 += *(int *)(v15 + 44);
      uint64_t v16 = 0;
      char object = v47._object;
      do
      {
        if (__OFADD__(v16, a8)) {
          BUG();
        }
        *(void *)&Swift::String v46 = v16 + 1;
        uint64_t v18 = (void *)swift_allocObject(v40, 40, 7);
        v18[2] = 1;
        void v18[3] = 2;
        v18[4] = v16;
        uint64_t v19 = lazy protocol witness table accessor for type FullyConnectedNetworkClassifier<Float, String> and conformance FullyConnectedNetworkClassifier<A, B>(&lazy protocol witness table cache variable for type MLShapedArray<Double> and conformance MLShapedArray<A>, &demangling cache variable for type metadata for MLShapedArray<Double>, (uint64_t)&protocol conformance descriptor for MLShapedArray<A>);
        MLShapedArrayProtocol.subscript.getter(v18, v43, v19);
        swift_bridgeObjectRelease((_BYTE)v18);
        uint64_t v20 = v39[0];
        *(float *)&v47._uint64_t countAndFlagsBits = v20;
        uint64_t v21 = specialized DenseMatrix.subscript.modify(v39, a7, v16 + a8);
        *Swift::String v22 = v47._countAndFlagsBits;
        ((void (*)(double *, void))v21)(v39, 0);
        uint64_t result = v46;
        uint64_t v16 = v46;
      }
      while (object != (void *)v46);
    }
  }
  else
  {
    v39[0] = 0.0;
    v39[1] = -2.681561585988519e154;
    _StringGuts.grow(_:)(84);
    v23._uint64_t countAndFlagsBits = 0xD000000000000023;
    v23._char object = " elements at row " + 0x8000000000000000;
    String.append(_:)(v23);
    uint64_t v41 = (unint64_t)v47._object;
    uint64_t v24 = dispatch thunk of CustomStringConvertible.description.getter(&type metadata for Int, &protocol witness table for Int);
    uint64_t v26 = (char)v25;
    v23._uint64_t countAndFlagsBits = v24;
    v23._char object = v25;
    String.append(_:)(v23);
    swift_bridgeObjectRelease(v26);
    v23._uint64_t countAndFlagsBits = 0x656620726F66205DLL;
    v23._char object = (void *)0xEF27206572757461;
    String.append(_:)(v23);
    uint64_t v27 = (void *)v46;
    swift_bridgeObjectRetain(v46);
    v23._uint64_t countAndFlagsBits = v47._countAndFlagsBits;
    v23._char object = v27;
    String.append(_:)(v23);
    swift_bridgeObjectRelease((_BYTE)v27);
    v23._char object = "arrays with shape [" + 0x8000000000000000;
    v23._uint64_t countAndFlagsBits = 0xD000000000000011;
    String.append(_:)(v23);
    uint64_t v28 = MLShapedArray.shape.getter(v43);
    LOBYTE(v27) = v28;
    uint64_t v29 = Array.description.getter(v28, &type metadata for Int);
    uint64_t v31 = (char)v30;
    v23._uint64_t countAndFlagsBits = v29;
    v23._char object = v30;
    String.append(_:)(v23);
    swift_bridgeObjectRelease((_BYTE)v27);
    swift_bridgeObjectRelease(v31);
    v23._uint64_t countAndFlagsBits = 0x20776F7220746120;
    v23._char object = (void *)0xE800000000000000;
    String.append(_:)(v23);
    uint64_t v41 = a7;
    uint64_t v32 = dispatch thunk of CustomStringConvertible.description.getter(&type metadata for Int, &protocol witness table for Int);
    LOBYTE(v27) = (_BYTE)v33;
    v23._uint64_t countAndFlagsBits = v32;
    v23._char object = v33;
    String.append(_:)(v23);
    swift_bridgeObjectRelease((_BYTE)v27);
    v23._uint64_t countAndFlagsBits = 46;
    v23._char object = (void *)0xE100000000000000;
    String.append(_:)(v23);
    Swift::String v46 = *(_OWORD *)v39;
    v23._char object = (void *)lazy protocol witness table accessor for type MLCreateError and conformance MLCreateError();
    swift_allocError(&type metadata for MLCreateError, v23._object, 0, 0);
    *(_OWORD *)uint64_t v34 = v46;
    *(_OWORD *)(v34 + 16) = 0;
    *(_OWORD *)(v34 + 32) = 0;
    *(unsigned char *)(v34 + 48) = 0;
    return swift_willThrow(&type metadata for MLCreateError, v23._object, v34, v35, v36, v37);
  }
  return result;
}

{
  uint64_t v8;
  uint64_t v9;
  void *inited;
  uint64_t v12;
  BOOL v13;
  uint64_t result;
  uint64_t v15;
  uint64_t v16;
  void *object;
  void *v18;
  uint64_t v19;
  void (*v20)(uint64_t);
  uint64_t *v21;
  Swift::String v22;
  uint64_t v23;
  void *v24;
  char v25;
  void *v26;
  uint64_t v27;
  uint64_t v28;
  void *v29;
  char v30;
  uint64_t v31;
  void *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  unsigned char v37[40];
  _OWORD v38[2];
  uint64_t v39;
  unint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  long long v45;
  Swift::String v46;

  uint64_t v44 = v8;
  uint64_t v43 = v9;
  *(void *)&long long v45 = a3;
  v46._uint64_t countAndFlagsBits = a2;
  uint64_t v39 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Int>);
  uint64_t inited = (void *)swift_initStackObject(v39, v37);
  inited[2] = 1;
  inited[3] = 2;
  v46._char object = a6;
  inited[4] = a6;
  uint64_t v42 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for MLShapedArray<Float>);
  uint64_t v41 = a1;
  uint64_t v12 = MLShapedArray.shape.getter(v42);
  LOBYTE(a6) = v12;
  BOOL v13 = specialized static Array<A>.== infix(_:_:)((uint64_t)inited, v12);
  swift_bridgeObjectRelease((_BYTE)a6);
  uint64_t result = swift_setDeallocating(inited);
  if (v13)
  {
    if ((uint64_t)v46._object < 0) {
      BUG();
    }
    if (v46._object)
    {
      uint64_t v15 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for FeatureMatrixBuilder<Double>);
      v43 += *(int *)(v15 + 44);
      uint64_t v16 = 0;
      char object = v46._object;
      do
      {
        if (__OFADD__(v16, a8)) {
          BUG();
        }
        *(void *)&long long v45 = v16 + 1;
        uint64_t v18 = (void *)swift_allocObject(v39, 40, 7);
        v18[2] = 1;
        void v18[3] = 2;
        v18[4] = v16;
        uint64_t v19 = lazy protocol witness table accessor for type FullyConnectedNetworkClassifier<Float, String> and conformance FullyConnectedNetworkClassifier<A, B>(&lazy protocol witness table cache variable for type MLShapedArray<Float> and conformance MLShapedArray<A>, &demangling cache variable for type metadata for MLShapedArray<Float>, (uint64_t)&protocol conformance descriptor for MLShapedArray<A>);
        MLShapedArrayProtocol.subscript.getter(v18, v42, v19);
        swift_bridgeObjectRelease((_BYTE)v18);
        *(double *)&v46._uint64_t countAndFlagsBits = *(float *)v38;
        uint64_t v20 = specialized DenseMatrix.subscript.modify(v38, a7, v16 + a8);
        _DWORD *v21 = v46._countAndFlagsBits;
        ((void (*)(_OWORD *, void))v20)(v38, 0);
        uint64_t result = v45;
        uint64_t v16 = v45;
      }
      while (object != (void *)v45);
    }
  }
  else
  {
    *(void *)&v38[0] = 0;
    *((void *)&v38[0] + 1) = 0xE000000000000000;
    _StringGuts.grow(_:)(84);
    v22._uint64_t countAndFlagsBits = 0xD000000000000023;
    v22._char object = " elements at row " + 0x8000000000000000;
    String.append(_:)(v22);
    unint64_t v40 = (unint64_t)v46._object;
    uint64_t v23 = dispatch thunk of CustomStringConvertible.description.getter(&type metadata for Int, &protocol witness table for Int);
    char v25 = (char)v24;
    v22._uint64_t countAndFlagsBits = v23;
    v22._char object = v24;
    String.append(_:)(v22);
    swift_bridgeObjectRelease(v25);
    v22._uint64_t countAndFlagsBits = 0x656620726F66205DLL;
    v22._char object = (void *)0xEF27206572757461;
    String.append(_:)(v22);
    uint64_t v26 = (void *)v45;
    swift_bridgeObjectRetain(v45);
    v22._uint64_t countAndFlagsBits = v46._countAndFlagsBits;
    v22._char object = v26;
    String.append(_:)(v22);
    swift_bridgeObjectRelease((_BYTE)v26);
    v22._char object = "arrays with shape [" + 0x8000000000000000;
    v22._uint64_t countAndFlagsBits = 0xD000000000000011;
    String.append(_:)(v22);
    uint64_t v27 = MLShapedArray.shape.getter(v42);
    LOBYTE(v26) = v27;
    uint64_t v28 = Array.description.getter(v27, &type metadata for Int);
    char v30 = (char)v29;
    v22._uint64_t countAndFlagsBits = v28;
    v22._char object = v29;
    String.append(_:)(v22);
    swift_bridgeObjectRelease((_BYTE)v26);
    swift_bridgeObjectRelease(v30);
    v22._uint64_t countAndFlagsBits = 0x20776F7220746120;
    v22._char object = (void *)0xE800000000000000;
    String.append(_:)(v22);
    unint64_t v40 = a7;
    uint64_t v31 = dispatch thunk of CustomStringConvertible.description.getter(&type metadata for Int, &protocol witness table for Int);
    LOBYTE(v26) = (_BYTE)v32;
    v22._uint64_t countAndFlagsBits = v31;
    v22._char object = v32;
    String.append(_:)(v22);
    swift_bridgeObjectRelease((_BYTE)v26);
    v22._uint64_t countAndFlagsBits = 46;
    v22._char object = (void *)0xE100000000000000;
    String.append(_:)(v22);
    long long v45 = v38[0];
    v22._char object = (void *)lazy protocol witness table accessor for type MLCreateError and conformance MLCreateError();
    swift_allocError(&type metadata for MLCreateError, v22._object, 0, 0);
    *(_OWORD *)uint64_t v33 = v45;
    *(_OWORD *)(v33 + 16) = 0;
    *(_OWORD *)(v33 + 32) = 0;
    *(unsigned char *)(v33 + 48) = 0;
    return swift_willThrow(&type metadata for MLCreateError, v22._object, v33, v34, v35, v36);
  }
  return result;
}

{
  uint64_t v8;
  uint64_t v9;
  void *inited;
  uint64_t v12;
  BOOL v13;
  uint64_t result;
  uint64_t v15;
  uint64_t v16;
  void *object;
  void *v18;
  uint64_t v19;
  void (*v20)(uint64_t);
  uint64_t *v21;
  Swift::String v22;
  uint64_t v23;
  void *v24;
  char v25;
  void *v26;
  uint64_t v27;
  uint64_t v28;
  void *v29;
  char v30;
  uint64_t v31;
  void *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  unsigned char v37[40];
  _OWORD v38[2];
  uint64_t v39;
  unint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  long long v45;
  Swift::String v46;

  uint64_t v44 = v8;
  uint64_t v43 = v9;
  *(void *)&long long v45 = a3;
  v46._uint64_t countAndFlagsBits = a2;
  uint64_t v39 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Int>);
  uint64_t inited = (void *)swift_initStackObject(v39, v37);
  inited[2] = 1;
  inited[3] = 2;
  v46._char object = a6;
  inited[4] = a6;
  uint64_t v42 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for MLShapedArray<Double>);
  uint64_t v41 = a1;
  uint64_t v12 = MLShapedArray.shape.getter(v42);
  LOBYTE(a6) = v12;
  BOOL v13 = specialized static Array<A>.== infix(_:_:)((uint64_t)inited, v12);
  swift_bridgeObjectRelease((_BYTE)a6);
  uint64_t result = swift_setDeallocating(inited);
  if (v13)
  {
    if ((uint64_t)v46._object < 0) {
      BUG();
    }
    if (v46._object)
    {
      uint64_t v15 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for FeatureMatrixBuilder<Double>);
      v43 += *(int *)(v15 + 44);
      uint64_t v16 = 0;
      char object = v46._object;
      do
      {
        if (__OFADD__(v16, a8)) {
          BUG();
        }
        *(void *)&long long v45 = v16 + 1;
        uint64_t v18 = (void *)swift_allocObject(v39, 40, 7);
        v18[2] = 1;
        void v18[3] = 2;
        v18[4] = v16;
        uint64_t v19 = lazy protocol witness table accessor for type FullyConnectedNetworkClassifier<Float, String> and conformance FullyConnectedNetworkClassifier<A, B>(&lazy protocol witness table cache variable for type MLShapedArray<Double> and conformance MLShapedArray<A>, &demangling cache variable for type metadata for MLShapedArray<Double>, (uint64_t)&protocol conformance descriptor for MLShapedArray<A>);
        MLShapedArrayProtocol.subscript.getter(v18, v42, v19);
        swift_bridgeObjectRelease((_BYTE)v18);
        v46._uint64_t countAndFlagsBits = *(void *)&v38[0];
        uint64_t v20 = specialized DenseMatrix.subscript.modify(v38, a7, v16 + a8);
        _DWORD *v21 = v46._countAndFlagsBits;
        ((void (*)(_OWORD *, void))v20)(v38, 0);
        uint64_t result = v45;
        uint64_t v16 = v45;
      }
      while (object != (void *)v45);
    }
  }
  else
  {
    *(void *)&v38[0] = 0;
    *((void *)&v38[0] + 1) = 0xE000000000000000;
    _StringGuts.grow(_:)(84);
    v22._uint64_t countAndFlagsBits = 0xD000000000000023;
    v22._char object = " elements at row " + 0x8000000000000000;
    String.append(_:)(v22);
    unint64_t v40 = (unint64_t)v46._object;
    uint64_t v23 = dispatch thunk of CustomStringConvertible.description.getter(&type metadata for Int, &protocol witness table for Int);
    char v25 = (char)v24;
    v22._uint64_t countAndFlagsBits = v23;
    v22._char object = v24;
    String.append(_:)(v22);
    swift_bridgeObjectRelease(v25);
    v22._uint64_t countAndFlagsBits = 0x656620726F66205DLL;
    v22._char object = (void *)0xEF27206572757461;
    String.append(_:)(v22);
    uint64_t v26 = (void *)v45;
    swift_bridgeObjectRetain(v45);
    v22._uint64_t countAndFlagsBits = v46._countAndFlagsBits;
    v22._char object = v26;
    String.append(_:)(v22);
    swift_bridgeObjectRelease((_BYTE)v26);
    v22._char object = "arrays with shape [" + 0x8000000000000000;
    v22._uint64_t countAndFlagsBits = 0xD000000000000011;
    String.append(_:)(v22);
    uint64_t v27 = MLShapedArray.shape.getter(v42);
    LOBYTE(v26) = v27;
    uint64_t v28 = Array.description.getter(v27, &type metadata for Int);
    char v30 = (char)v29;
    v22._uint64_t countAndFlagsBits = v28;
    v22._char object = v29;
    String.append(_:)(v22);
    swift_bridgeObjectRelease((_BYTE)v26);
    swift_bridgeObjectRelease(v30);
    v22._uint64_t countAndFlagsBits = 0x20776F7220746120;
    v22._char object = (void *)0xE800000000000000;
    String.append(_:)(v22);
    unint64_t v40 = a7;
    uint64_t v31 = dispatch thunk of CustomStringConvertible.description.getter(&type metadata for Int, &protocol witness table for Int);
    LOBYTE(v26) = (_BYTE)v32;
    v22._uint64_t countAndFlagsBits = v31;
    v22._char object = v32;
    String.append(_:)(v22);
    swift_bridgeObjectRelease((_BYTE)v26);
    v22._uint64_t countAndFlagsBits = 46;
    v22._char object = (void *)0xE100000000000000;
    String.append(_:)(v22);
    long long v45 = v38[0];
    v22._char object = (void *)lazy protocol witness table accessor for type MLCreateError and conformance MLCreateError();
    swift_allocError(&type metadata for MLCreateError, v22._object, 0, 0);
    *(_OWORD *)uint64_t v33 = v45;
    *(_OWORD *)(v33 + 16) = 0;
    *(_OWORD *)(v33 + 32) = 0;
    *(unsigned char *)(v33 + 48) = 0;
    return swift_willThrow(&type metadata for MLCreateError, v22._object, v33, v34, v35, v36);
  }
  return result;
}

uint64_t partial apply for closure #1 in FeatureVectorizer.fitted(to:)(void *a1, void *a2)
{
  return closure #1 in FeatureVectorizer.fitted(to:)(a1, *(void *)(v2 + 16), a2);
}

uint64_t outlined consume of FeatureVectorizer<Float>.Transformer?(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a1)
  {
    swift_bridgeObjectRelease(a1);
    return swift_bridgeObjectRelease(a3);
  }
  return result;
}

void specialized UnsafeMutablePointer.assign(repeating:count:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a2 < 0) {
    BUG();
  }
  if (a2)
  {
    __m128i si128 = _mm_load_si128((const __m128i *)&xmmword_348AD0);
    uint64_t v4 = 0;
    __m128i v5 = _mm_load_si128((const __m128i *)&xmmword_346D80);
    __m128i v6 = _mm_xor_si128(_mm_shuffle_epi32((__m128i)(unint64_t)(a2 - 1), 68), v5);
    __m128i v7 = _mm_load_si128(&xmmword_348AE0);
    do
    {
      __m128i v8 = _mm_xor_si128(si128, v5);
      __m128i v9 = _mm_cmpgt_epi32(v8, v6);
      __m128i v10 = _mm_or_si128(_mm_shuffle_epi32(v9, 245), _mm_and_si128(_mm_shuffle_epi32(_mm_cmpeq_epi32(v8, v6), 245), v9));
      if (~_mm_cvtsi128_si32(v10)) {
        *(void *)(a3 + 8 * v4) = a1;
      }
      if (_mm_extract_epi8(_mm_xor_si128(v10, (__m128i)-1), 8)) {
        *(void *)(a3 + 8 * v4 + 8) = a1;
      }
      v4 += 2;
      __m128i si128 = _mm_add_epi64(si128, v7);
    }
    while (((a2 + 1) & 0xFFFFFFFFFFFFFFFELL) != v4);
  }
}

char specialized Set._Variant.insert(_:)(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = a2;
  uint64_t v34 = a1;
  uint64_t v35 = v3;
  uint64_t v6 = *v3;
  Hasher.init(_seed:)(*(void *)(*v3 + 40));
  swift_bridgeObjectRetain(v6);
  uint64_t v36 = a3;
  String.hash(into:)(v32, a2);
  Swift::Int v7 = Hasher._finalize()();
  uint64_t v8 = ~(-1 << *(unsigned char *)(v6 + 32));
  unint64_t v9 = v8 & v7;
  uint64_t v10 = *(void *)(v6 + 8 * ((v8 & (unint64_t)v7) >> 6) + 56);
  if (_bittest64(&v10, v9))
  {
    uint64_t v11 = *(void *)(v6 + 48);
    uint64_t v12 = *(void *)(v11 + 16 * v9);
    uint64_t v13 = *(void *)(v11 + 16 * v9 + 8);
    if (v12 == v5 && v13 == v36)
    {
      uint64_t v14 = v36;
LABEL_15:
      swift_bridgeObjectRelease(v14);
      swift_bridgeObjectRelease(v6);
      Swift::String v22 = v34;
      uint64_t v23 = *(void *)(*v35 + 48);
      uint64_t v24 = 16 * v9;
      uint64_t v25 = *(void *)(v23 + v24 + 8);
      *uint64_t v34 = *(void *)(v23 + v24);
      v22[1] = v25;
      swift_bridgeObjectRetain(v25);
      return 0;
    }
    uint64_t v33 = v5;
    uint64_t v15 = v5;
    uint64_t v16 = v36;
    if (_stringCompareWithSmolCheck(_:_:expecting:)(v12, v13, v15, v36, 0))
    {
      uint64_t v14 = v16;
      goto LABEL_15;
    }
    unint64_t v9 = v8 & (v9 + 1);
    uint64_t v17 = *(void *)(v6 + 8 * (v9 >> 6) + 56);
    if (_bittest64(&v17, v9))
    {
      uint64_t v5 = v33;
      while (1)
      {
        uint64_t v18 = *(void *)(v11 + 16 * v9);
        uint64_t v19 = *(void *)(v11 + 16 * v9 + 8);
        if (v18 == v5 && v19 == v36) {
          break;
        }
        char v20 = _stringCompareWithSmolCheck(_:_:expecting:)(v18, v19, v33, v36, 0);
        uint64_t v5 = v33;
        if (v20) {
          break;
        }
        unint64_t v9 = v8 & (v9 + 1);
        uint64_t v21 = *(void *)(v6 + 8 * (v9 >> 6) + 56);
        if (!_bittest64(&v21, v9)) {
          goto LABEL_17;
        }
      }
      uint64_t v14 = v36;
      goto LABEL_15;
    }
    uint64_t v5 = v33;
  }
LABEL_17:
  swift_bridgeObjectRelease(v6);
  uint64_t v27 = v35;
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v35);
  v32[0] = *v27;
  *uint64_t v27 = 0x8000000000000000;
  uint64_t v29 = v36;
  swift_bridgeObjectRetain(v36);
  specialized _NativeSet.insertNew(_:at:isUnique:)(v5, v29, v9, isUniquelyReferenced_nonNull_native);
  uint64_t v30 = *v27;
  *uint64_t v27 = v32[0];
  swift_bridgeObjectRelease(v30);
  uint64_t v31 = v34;
  *uint64_t v34 = v5;
  v31[1] = v29;
  return 1;
}

{
  void *v3;
  void *v4;
  uint64_t v6;
  Swift::Int v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char v17;
  uint64_t v18;
  uint64_t *v19;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v21;
  char v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28[9];
  void *v29;
  uint64_t v30;
  uint64_t *v31;
  uint64_t v32;

  uint64_t v4 = v3;
  uint64_t v6 = *v3;
  Hasher.init(_seed:)(*(void *)(*v3 + 40));
  uint64_t v32 = a2;
  uint64_t v30 = a3;
  uint64_t v31 = a1;
  if (a3)
  {
    Hasher._combine(_:)(1u);
    swift_bridgeObjectRetain(v6);
    swift_bridgeObjectRetain(a3);
    String.hash(into:)(v28, a2);
    swift_bridgeObjectRelease(a3);
  }
  else
  {
    Hasher._combine(_:)(0);
    swift_bridgeObjectRetain(v6);
  }
  Swift::Int v7 = Hasher._finalize()();
  uint64_t v8 = ~(-1 << *(unsigned char *)(v6 + 32));
  unint64_t v9 = v8 & v7;
  uint64_t v10 = *(void *)(v6 + 8 * ((v8 & (unint64_t)v7) >> 6) + 56);
  uint64_t v11 = v6;
  if (!_bittest64(&v10, v9))
  {
    swift_bridgeObjectRelease(v6);
    uint64_t v19 = v31;
LABEL_16:
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v4);
    v28[0] = *v4;
    *uint64_t v4 = 0x8000000000000000;
    uint64_t v21 = v30;
    swift_bridgeObjectRetain(v30);
    Swift::String v22 = isUniquelyReferenced_nonNull_native;
    uint64_t v23 = v32;
    specialized _NativeSet.insertNew(_:at:isUnique:)(v32, v21, v9, v22);
    uint64_t v24 = *v4;
    *uint64_t v4 = v28[0];
    swift_bridgeObjectRelease(v24);
    void *v19 = v23;
    v19[1] = v21;
    return 1;
  }
  uint64_t v29 = v4;
  uint64_t v12 = *(void *)(v6 + 48);
  uint64_t v13 = v32;
  uint64_t v14 = v30;
  while (1)
  {
    uint64_t v15 = *(void *)(v12 + 16 * v9 + 8);
    if (v15) {
      break;
    }
    if (!v14) {
      goto LABEL_18;
    }
LABEL_13:
    unint64_t v9 = v8 & (v9 + 1);
    uint64_t v18 = *(void *)(v11 + 8 * (v9 >> 6) + 56);
    if (!_bittest64(&v18, v9))
    {
      swift_bridgeObjectRelease(v11);
      uint64_t v19 = v31;
      uint64_t v4 = v29;
      goto LABEL_16;
    }
  }
  if (!v14) {
    goto LABEL_13;
  }
  uint64_t v16 = *(void *)(v12 + 16 * v9);
  if (v16 != v13 || v15 != v14)
  {
    uint64_t v17 = _stringCompareWithSmolCheck(_:_:expecting:)(v16, v15, v32, v14, 0);
    uint64_t v14 = v30;
    uint64_t v13 = v32;
    if ((v17 & 1) == 0) {
      goto LABEL_13;
    }
  }
  swift_bridgeObjectRelease(v14);
LABEL_18:
  swift_bridgeObjectRelease(v11);
  uint64_t v26 = *(void *)(*v29 + 48);
  uint64_t v27 = *(void *)(v26 + 16 * v9 + 8);
  *(_OWORD *)uint64_t v31 = *(_OWORD *)(v26 + 16 * v9);
  swift_bridgeObjectRetain(v27);
  return 0;
}

char specialized Set._Variant.insert(_:)(uint64_t a1, Swift::UInt a2, char a3)
{
  uint64_t v4 = v3;
  Swift::UInt v6 = a2;
  uint64_t v7 = *v3;
  Hasher.init(_seed:)(*(void *)(*v3 + 40));
  char v8 = a3 & 1;
  if (v8)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(a2);
  }
  Swift::Int v9 = Hasher._finalize()();
  uint64_t v10 = ~(-1 << *(unsigned char *)(v7 + 32));
  unint64_t v11 = v10 & v9;
  uint64_t v12 = *(void *)(v7 + 8 * ((v10 & (unint64_t)v9) >> 6) + 56);
  if (_bittest64(&v12, v11))
  {
    uint64_t v13 = *(void *)(v7 + 48);
    do
    {
      if (*(unsigned char *)(v13 + 16 * v11 + 8))
      {
        if (v8) {
          goto LABEL_13;
        }
      }
      else if (!v8 && *(void *)(v13 + 16 * v11) == a2)
      {
LABEL_13:
        uint64_t v18 = *(void *)(*v4 + 48);
        Swift::UInt v6 = *(void *)(v18 + 16 * v11);
        char v8 = *(unsigned char *)(v18 + 16 * v11 + 8);
        char result = 0;
        goto LABEL_14;
      }
      unint64_t v11 = v10 & (v11 + 1);
      uint64_t v14 = *(void *)(v7 + 8 * (v11 >> 6) + 56);
    }
    while (_bittest64(&v14, v11));
  }
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v4);
  uint64_t v19 = *v4;
  *uint64_t v4 = 0x8000000000000000;
  specialized _NativeSet.insertNew(_:at:isUnique:)(a2, v8, v11, isUniquelyReferenced_nonNull_native);
  uint64_t v16 = *v4;
  *uint64_t v4 = v19;
  swift_bridgeObjectRelease(v16);
  char result = 1;
LABEL_14:
  *(void *)a1 = v6;
  *(unsigned char *)(a1 + 8) = v8 & 1;
  return result;
}

char specialized Set._Variant.insert(_:)(uint64_t *a1, uint64_t a2)
{
  uint64_t v3 = v2;
  uint64_t v5 = *v2;
  uint64_t v6 = static Hasher._hash(seed:_:)(*(void *)(v5 + 40), a2);
  uint64_t v7 = ~(-1 << *(unsigned char *)(v5 + 32));
  unint64_t v8 = v7 & v6;
  uint64_t v9 = *(void *)(v5 + 8 * ((v7 & (unint64_t)v6) >> 6) + 56);
  if (_bittest64(&v9, v8))
  {
    while (*(void *)(*(void *)(v5 + 48) + 8 * v8) != a2)
    {
      unint64_t v8 = v7 & (v8 + 1);
      uint64_t v10 = *(void *)(v5 + 8 * (v8 >> 6) + 56);
      if (!_bittest64(&v10, v8)) {
        goto LABEL_4;
      }
    }
    char result = 0;
  }
  else
  {
LABEL_4:
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v3);
    uint64_t v14 = *v3;
    void *v3 = 0x8000000000000000;
    specialized _NativeSet.insertNew(_:at:isUnique:)(a2, v8, isUniquelyReferenced_nonNull_native);
    uint64_t v12 = *v3;
    void *v3 = v14;
    swift_bridgeObjectRelease(v12);
    char result = 1;
  }
  *a1 = a2;
  return result;
}

char specialized Set._Variant.insert(_:)(uint64_t *a1, uint64_t *a2)
{
  unint64_t v40 = a2;
  uint64_t v34 = a1;
  uint64_t v3 = type metadata accessor for URL(0);
  uint64_t v38 = *(void *)(v3 - 8);
  int64_t v4 = *(void *)(v38 + 64);
  uint64_t v5 = alloca(v4);
  uint64_t v6 = alloca(v4);
  uint64_t v35 = &v29;
  uint64_t v39 = v2;
  uint64_t v7 = *v2;
  uint64_t v8 = *(void *)(*v2 + 40);
  uint64_t v9 = lazy protocol witness table accessor for type TreeRegressorModel and conformance TreeRegressorModel(&lazy protocol witness table cache variable for type URL and conformance URL, (uint64_t (*)(uint64_t))&type metadata accessor for URL, (uint64_t)&protocol conformance descriptor for URL);
  swift_bridgeObjectRetain(v7);
  uint64_t v36 = v3;
  uint64_t v10 = dispatch thunk of Hashable._rawHashValue(seed:)(v8, v3, v9);
  uint64_t v11 = v7;
  uint64_t v31 = ~(-1 << *(unsigned char *)(v7 + 32));
  unint64_t v12 = v31 & v10;
  uint64_t v13 = *(void *)(v7 + 8 * ((v31 & (unint64_t)v10) >> 6) + 56);
  if (_bittest64(&v13, v12))
  {
    uint64_t v14 = v38;
    uint64_t v37 = *(void (**)(uint64_t *, unint64_t, uint64_t))(v38 + 16);
    uint64_t v32 = *(void *)(v38 + 72);
    uint64_t v33 = v11;
    uint64_t v15 = v36;
    while (1)
    {
      unint64_t v16 = v12 * v32;
      uint64_t v17 = v35;
      v37(v35, v12 * v32 + *(void *)(v11 + 48), v15);
      uint64_t v18 = lazy protocol witness table accessor for type TreeRegressorModel and conformance TreeRegressorModel(&lazy protocol witness table cache variable for type URL and conformance URL, (uint64_t (*)(uint64_t))&type metadata accessor for URL, (uint64_t)&protocol conformance descriptor for URL);
      char isUniquelyReferenced_nonNull_native = dispatch thunk of static Equatable.== infix(_:_:)(v17, v40, v15, v18);
      uint64_t v19 = v14;
      char v20 = *(void (**)(uint64_t *, uint64_t))(v14 + 8);
      v20(v35, v15);
      if (isUniquelyReferenced_nonNull_native) {
        break;
      }
      unint64_t v12 = v31 & (v12 + 1);
      uint64_t v11 = v33;
      uint64_t v21 = *(void *)(v33 + 8 * (v12 >> 6) + 56);
      uint64_t v14 = v19;
      if (!_bittest64(&v21, v12))
      {
        swift_bridgeObjectRelease(v33);
        Swift::String v22 = v39;
        uint64_t v23 = (void (*)(uint64_t *, uint64_t, uint64_t))v37;
        goto LABEL_7;
      }
    }
    swift_bridgeObjectRelease(v33);
    uint64_t v28 = v36;
    v20(v40, v36);
    v37(v34, *(void *)(*v39 + 48) + v16, v28);
    return 0;
  }
  else
  {
    swift_bridgeObjectRelease(v7);
    uint64_t v23 = *(void (**)(uint64_t *, uint64_t, uint64_t))(v38 + 16);
    Swift::String v22 = v39;
LABEL_7:
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v22);
    uint64_t v24 = (uint64_t)v35;
    uint64_t v25 = v36;
    v23(v35, (uint64_t)v40, v36);
    uint64_t v30 = *v22;
    *Swift::String v22 = 0x8000000000000000;
    specialized _NativeSet.insertNew(_:at:isUnique:)(v24, v12, isUniquelyReferenced_nonNull_native);
    uint64_t v26 = *v22;
    *Swift::String v22 = v30;
    swift_bridgeObjectRelease(v26);
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(v38 + 32))(v34, v40, v25);
    return 1;
  }
}

char specialized Set._Variant.insert(_:)(void *a1, Swift::UInt a2, uint64_t a3, int a4)
{
  int v5 = a4;
  uint64_t v36 = a1;
  LOBYTE(v5) = a4 & 1;
  uint64_t v7 = *v4;
  Hasher.init(_seed:)(*(void *)(*v4 + 40));
  int v40 = v5;
  Swift::UInt v39 = a2;
  uint64_t v37 = v4;
  uint64_t v38 = a3;
  if ((_BYTE)v5)
  {
    Hasher._combine(_:)(1uLL);
    Hasher._combine(_:)(a2);
    swift_bridgeObjectRetain(v7);
  }
  else
  {
    Hasher._combine(_:)(0);
    swift_bridgeObjectRetain(v7);
    String.hash(into:)(v35, a2);
  }
  Swift::Int v8 = Hasher._finalize()();
  uint64_t v9 = ~(-1 << *(unsigned char *)(v7 + 32));
  unint64_t v10 = v9 & v8;
  uint64_t v11 = *(void *)(v7 + 8 * ((v9 & (unint64_t)v8) >> 6) + 56);
  if (!_bittest64(&v11, v10))
  {
    Swift::UInt v13 = v39;
    char v14 = v40;
LABEL_17:
    char v20 = v14 != 0;
    char v21 = v7;
    Swift::UInt v22 = v13;
    swift_bridgeObjectRelease(v21);
    uint64_t v23 = v37;
    LOBYTE(v39) = swift_isUniquelyReferenced_nonNull_native(*v37);
    v35[0] = *v23;
    void *v23 = 0x8000000000000000;
    uint64_t v24 = v38;
    outlined copy of MLRecommender.Identifier(v22, v38, v20);
    char v25 = v40;
    specialized _NativeSet.insertNew(_:at:isUnique:)(v22, v24, v40, v10, v39);
    uint64_t v26 = *v23;
    void *v23 = v35[0];
    swift_bridgeObjectRelease(v26);
    uint64_t v27 = v36;
    *uint64_t v36 = v22;
    v27[1] = v24;
    *((unsigned char *)v27 + 16) = v25 != 0;
    return 1;
  }
  uint64_t v12 = *(void *)(v7 + 48);
  Swift::UInt v13 = v39;
  char v14 = v40;
  while (1)
  {
    uint64_t v15 = 24 * v10;
    uint64_t v16 = *(void *)(v12 + 24 * v10);
    if (!*(unsigned char *)(v12 + 24 * v10 + 16)) {
      break;
    }
    if (v14 && v16 == v13)
    {
      swift_bridgeObjectRelease(v7);
      goto LABEL_19;
    }
LABEL_14:
    unint64_t v10 = v9 & (v10 + 1);
    uint64_t v19 = *(void *)(v7 + 8 * (v10 >> 6) + 56);
    if (!_bittest64(&v19, v10)) {
      goto LABEL_17;
    }
  }
  if (v14) {
    goto LABEL_14;
  }
  uint64_t v17 = *(void *)(v12 + v15 + 8);
  if (v16 != v13 || v17 != v38)
  {
    char v18 = _stringCompareWithSmolCheck(_:_:expecting:)(v16, v17, v39, v38, 0);
    char v14 = v40;
    Swift::UInt v13 = v39;
    if ((v18 & 1) == 0) {
      goto LABEL_14;
    }
  }
  uint64_t v29 = v13;
  swift_bridgeObjectRelease(v7);
  outlined consume of MLRecommender.Identifier(v29, v38, 0);
LABEL_19:
  uint64_t v30 = *(void *)(*v37 + 48);
  uint64_t v31 = *(void *)(v30 + 24 * v10);
  uint64_t v32 = *(void *)(v30 + v15 + 8);
  char v33 = *(unsigned char *)(v30 + v15 + 16);
  uint64_t v34 = v36;
  *uint64_t v36 = v31;
  v34[1] = v32;
  *((unsigned char *)v34 + 16) = v33;
  outlined copy of MLRecommender.Identifier(v31, v32, v33);
  return 0;
}

char specialized Set._Variant.insert(_:)(void *a1, void *a2)
{
  char v33 = a1;
  uint64_t v34 = v2;
  uint64_t v3 = *v2;
  uint64_t v4 = *(void *)(*v2 + 40);
  id v35 = a2;
  uint64_t v5 = static String._unconditionallyBridgeFromObjectiveC(_:)(a2);
  uint64_t v7 = v6;
  Hasher.init(_seed:)(v4);
  swift_bridgeObjectRetain(v3);
  String.hash(into:)(v31, v5);
  Swift::Int v8 = Hasher._finalize()();
  swift_bridgeObjectRelease(v7);
  uint64_t v9 = ~(-1 << *(unsigned char *)(v3 + 32));
  unint64_t v10 = v9 & v8;
  uint64_t v11 = *(void *)(v3 + 8 * (v10 >> 6) + 56);
  if (_bittest64(&v11, v10))
  {
    uint64_t v32 = v3;
    while (1)
    {
      uint64_t v12 = static String._unconditionallyBridgeFromObjectiveC(_:)(*(void *)(*(void *)(v3 + 48) + 8 * v10));
      uint64_t v14 = v13;
      uint64_t v15 = static String._unconditionallyBridgeFromObjectiveC(_:)(v35);
      uint64_t v19 = v16;
      if (v12 == v15 && v14 == v16)
      {
        uint64_t v27 = v33;
        uint64_t v28 = v34;
        id v29 = v35;
        swift_bridgeObjectRelease_n(v14, 2, v16, v17, v18);
        goto LABEL_10;
      }
      char v20 = _stringCompareWithSmolCheck(_:_:expecting:)(v12, v14, v15, v16, 0);
      swift_bridgeObjectRelease(v14);
      swift_bridgeObjectRelease(v19);
      if (v20) {
        break;
      }
      unint64_t v10 = v9 & (v10 + 1);
      uint64_t v3 = v32;
      uint64_t v21 = *(void *)(v32 + 8 * (v10 >> 6) + 56);
      if (!_bittest64(&v21, v10)) {
        goto LABEL_7;
      }
    }
    uint64_t v27 = v33;
    uint64_t v28 = v34;
    id v29 = v35;
LABEL_10:

    swift_bridgeObjectRelease(v32);
    uint64_t v30 = *(void **)(*(void *)(*v28 + 48) + 8 * v10);
    *uint64_t v27 = v30;
    v30;
    return 0;
  }
  else
  {
LABEL_7:
    swift_bridgeObjectRelease(v3);
    Swift::UInt v22 = v34;
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v34);
    v31[0] = *v22;
    *Swift::UInt v22 = 0x8000000000000000;
    id v24 = v35;
    specialized _NativeSet.insertNew(_:at:isUnique:)((uint64_t)v24, v10, isUniquelyReferenced_nonNull_native);
    uint64_t v25 = *v22;
    *Swift::UInt v22 = v31[0];
    swift_bridgeObjectRelease(v25);
    void *v33 = v24;
    return 1;
  }
}

uint64_t *specialized _NativeSet.resize(capacity:)(uint64_t a1)
{
  uint64_t v41 = v1;
  uint64_t v2 = *v1;
  uint64_t v3 = *(void *)(*v1 + 24);
  if (v3 <= a1) {
    uint64_t v3 = a1;
  }
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _SetStorage<String>);
  uint64_t v4 = static _SetStorage.resize(original:capacity:move:)(v2, v3, 1);
  if (!*(void *)(v2 + 16)) {
    goto LABEL_40;
  }
  uint64_t v5 = 1 << *(unsigned char *)(v2 + 32);
  uint64_t v44 = (void *)(v2 + 56);
  uint64_t v6 = ~(-1 << v5);
  if (v5 >= 64) {
    uint64_t v6 = -1;
  }
  unint64_t v7 = *(void *)(v2 + 56) & v6;
  int64_t v40 = (unint64_t)(v5 + 63) >> 6;
  swift_retain(v2);
  int64_t v8 = 0;
  uint64_t v39 = v2;
  while (1)
  {
    if (v7)
    {
      _BitScanForward64(&v9, v7);
      uint64_t v43 = (v7 - 1) & v7;
      unint64_t v10 = v9 | (v8 << 6);
      int64_t v11 = v8;
      goto LABEL_16;
    }
    BOOL v12 = __OFADD__(1, v8);
    int64_t v13 = v8 + 1;
    if (v12) {
      BUG();
    }
    if (v13 >= v40) {
      break;
    }
    uint64_t v14 = v44;
    unint64_t i = v44[v13];
    if (i)
    {
      int64_t v11 = v13;
    }
    else
    {
      int64_t v11 = v13 + 1;
      if (v13 + 1 >= v40) {
        goto LABEL_34;
      }
      unint64_t i = v44[v13 + 1];
      if (!i)
      {
        int64_t v11 = v13 + 2;
        if (v13 + 2 >= v40)
        {
LABEL_34:
          swift_release(v2);
          goto LABEL_36;
        }
        for (unint64_t i = v44[v13 + 2]; !i; unint64_t i = v44[v11])
        {
          BOOL v12 = __OFADD__(1, v11++);
          if (v12) {
            BUG();
          }
          if (v11 >= v40) {
            goto LABEL_34;
          }
        }
      }
    }
    _BitScanForward64(&v16, i);
    uint64_t v43 = i & (i - 1);
    unint64_t v10 = v16 + (v11 << 6);
LABEL_16:
    uint64_t v17 = *(void *)(v2 + 48);
    uint64_t v18 = 16 * v10;
    uint64_t v19 = *(void *)(v17 + v18);
    uint64_t v20 = *(void *)(v17 + v18 + 8);
    Hasher.init(_seed:)(*(void *)(v4 + 40));
    uint64_t v38 = v19;
    uint64_t v42 = v20;
    String.hash(into:)(v37, v19);
    unint64_t v21 = Hasher._finalize()() & ~(-1 << *(unsigned char *)(v4 + 32));
    unint64_t v22 = v21 >> 6;
    unint64_t v23 = ~*(void *)(v4 + 8 * (v21 >> 6) + 56) >> v21 << v21;
    if (v23)
    {
      _BitScanForward64(&v24, v23);
      unint64_t v25 = v24 | v21 & 0xFFFFFFFFFFFFFFC0;
    }
    else
    {
      unint64_t v26 = (unint64_t)(63 - (-1 << *(unsigned char *)(v4 + 32))) >> 6;
      char v27 = 0;
      do
      {
        unint64_t v28 = v22 + 1;
        if (v22 + 1 == v26 && (v27 & 1) != 0) {
          BUG();
        }
        unint64_t v22 = 0;
        if (v28 != v26) {
          unint64_t v22 = v28;
        }
        v27 |= v28 == v26;
        uint64_t v29 = *(void *)(v4 + 8 * v22 + 56);
      }
      while (v29 == -1);
      unint64_t v30 = ~v29;
      uint64_t v31 = 64;
      if (v30) {
        _BitScanForward64((unint64_t *)&v31, v30);
      }
      unint64_t v25 = v31 + (v22 << 6);
    }
    uint64_t v32 = v42;
    *(void *)(v4 + 8 * (v25 >> 6) + 56) |= 1 << v25;
    uint64_t v33 = *(void *)(v4 + 48);
    uint64_t v34 = 16 * v25;
    *(void *)(v33 + v34) = v38;
    *(void *)(v33 + v34 + 8) = v32;
    ++*(void *)(v4 + 16);
    int64_t v8 = v11;
    uint64_t v2 = v39;
    unint64_t v7 = v43;
  }
  swift_release(v2);
  uint64_t v14 = v44;
LABEL_36:
  uint64_t v35 = 1 << *(unsigned char *)(v2 + 32);
  if (v35 > 63) {
    specialized UnsafeMutablePointer.assign(repeating:count:)(0, (unint64_t)(v35 + 63) >> 6, (uint64_t)v14);
  }
  else {
    void *v14 = -1 << v35;
  }
  *(void *)(v2 + 16) = 0;
LABEL_40:
  swift_release(v2);
  char result = v41;
  uint64_t *v41 = v4;
  return result;
}

{
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  int64_t v8;
  unint64_t v9;
  unint64_t v10;
  BOOL v11;
  int64_t v12;
  unint64_t j;
  int64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  Swift::UInt v18;
  char v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t v25;
  char v26;
  unint64_t v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t *result;
  uint64_t i;
  int64_t v36;
  int64_t v37;
  void *v38;

  uint64_t v2 = *v1;
  uint64_t v3 = *(void *)(*v1 + 24);
  if (v3 <= a1) {
    uint64_t v3 = a1;
  }
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _SetStorage<Int?>);
  uint64_t v4 = static _SetStorage.resize(original:capacity:move:)(v2, v3, 1);
  if (*(void *)(v2 + 16))
  {
    uint64_t v5 = 1 << *(unsigned char *)(v2 + 32);
    uint64_t v6 = ~(-1 << v5);
    if (v5 >= 64) {
      uint64_t v6 = -1;
    }
    unint64_t v7 = *(void *)(v2 + 56) & v6;
    uint64_t v38 = (void *)(v2 + 56);
    uint64_t v37 = (unint64_t)(v5 + 63) >> 6;
    int64_t v8 = 0;
    for (i = v2; ; uint64_t v2 = i)
    {
      if (v7)
      {
        _BitScanForward64(&v9, v7);
        v7 &= v7 - 1;
        unint64_t v10 = v9 | (v8 << 6);
        uint64_t v36 = v8;
      }
      else
      {
        int64_t v11 = __OFADD__(1, v8);
        BOOL v12 = v8 + 1;
        if (v11) {
          BUG();
        }
        if (v12 >= v37)
        {
LABEL_39:
          uint64_t v33 = 1 << *(unsigned char *)(v2 + 32);
          if (v33 > 63) {
            specialized UnsafeMutablePointer.assign(repeating:count:)(0, (unint64_t)(v33 + 63) >> 6, (uint64_t)v38);
          }
          else {
            long long *v38 = -1 << v33;
          }
          *(void *)(v2 + 16) = 0;
          break;
        }
        j = v38[v12];
        if (j)
        {
          uint64_t v14 = v12;
        }
        else
        {
          uint64_t v14 = v12 + 1;
          if (v12 + 1 >= v37) {
            goto LABEL_39;
          }
          j = v38[v12 + 1];
          if (!j)
          {
            uint64_t v14 = v12 + 2;
            if (v12 + 2 >= v37) {
              goto LABEL_39;
            }
            j = v38[v12 + 2];
            if (!j)
            {
              uint64_t v14 = v12 + 3;
              if (v12 + 3 >= v37) {
                goto LABEL_39;
              }
              for (j = v38[v12 + 3]; !j; j = v38[v14])
              {
                int64_t v11 = __OFADD__(1, v14++);
                if (v11) {
                  BUG();
                }
                if (v14 >= v37) {
                  goto LABEL_39;
                }
              }
            }
          }
        }
        _BitScanForward64(&v15, j);
        unint64_t v7 = j & (j - 1);
        uint64_t v36 = v14;
        unint64_t v10 = v15 + (v14 << 6);
      }
      unint64_t v16 = *(void *)(v2 + 48);
      uint64_t v17 = 16 * v10;
      uint64_t v18 = *(void *)(v16 + v17);
      uint64_t v19 = *(unsigned char *)(v16 + v17 + 8);
      Hasher.init(_seed:)(*(void *)(v4 + 40));
      if (v19 == 1)
      {
        Hasher._combine(_:)(0);
      }
      else
      {
        Hasher._combine(_:)(1u);
        Hasher._combine(_:)(v18);
      }
      uint64_t v20 = Hasher._finalize()() & ~(-1 << *(unsigned char *)(v4 + 32));
      unint64_t v21 = v20 >> 6;
      unint64_t v22 = ~*(void *)(v4 + 8 * (v20 >> 6) + 56) >> v20 << v20;
      if (v22)
      {
        _BitScanForward64(&v23, v22);
        unint64_t v24 = v23 | v20 & 0xFFFFFFFFFFFFFFC0;
      }
      else
      {
        unint64_t v25 = (unint64_t)(63 - (-1 << *(unsigned char *)(v4 + 32))) >> 6;
        unint64_t v26 = 0;
        do
        {
          char v27 = v21 + 1;
          if (v21 + 1 == v25 && (v26 & 1) != 0) {
            BUG();
          }
          unint64_t v21 = 0;
          if (v27 != v25) {
            unint64_t v21 = v27;
          }
          v26 |= v27 == v25;
          unint64_t v28 = *(void *)(v4 + 8 * v21 + 56);
        }
        while (v28 == -1);
        uint64_t v29 = ~v28;
        unint64_t v30 = 64;
        if (v29) {
          _BitScanForward64((unint64_t *)&v30, v29);
        }
        unint64_t v24 = v30 + (v21 << 6);
      }
      *(void *)(v4 + 8 * (v24 >> 6) + 56) |= 1 << v24;
      uint64_t v31 = *(void *)(v4 + 48);
      uint64_t v32 = 16 * v24;
      *(void *)(v31 + v32) = v18;
      *(unsigned char *)(v31 + v32 + 8) = v19;
      ++*(void *)(v4 + 16);
      int64_t v8 = v36;
    }
  }
  swift_release();
  char result = v1;
  *uint64_t v1 = v4;
  return result;
}

{
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  int64_t v8;
  int64_t v9;
  unint64_t v10;
  unint64_t v11;
  BOOL v12;
  int64_t v13;
  unint64_t i;
  int64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t *result;
  uint64_t *v19;
  void *v20;

  uint64_t v19 = v1;
  uint64_t v2 = *v1;
  uint64_t v3 = *(void *)(*v1 + 24);
  if (v3 <= a1) {
    uint64_t v3 = a1;
  }
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _SetStorage<String?>);
  uint64_t v4 = static _SetStorage.resize(original:capacity:move:)(v2, v3, 1);
  if (*(void *)(v2 + 16))
  {
    uint64_t v5 = 1 << *(unsigned char *)(v2 + 32);
    uint64_t v20 = (void *)(v2 + 56);
    uint64_t v6 = ~(-1 << v5);
    if (v5 >= 64) {
      uint64_t v6 = -1;
    }
    unint64_t v7 = *(void *)(v2 + 56) & v6;
    int64_t v8 = (unint64_t)(v5 + 63) >> 6;
    swift_retain();
    unint64_t v9 = 0;
    while (1)
    {
      if (v7)
      {
        _BitScanForward64(&v10, v7);
        v7 &= v7 - 1;
        int64_t v11 = v10 | (v9 << 6);
      }
      else
      {
        BOOL v12 = __OFADD__(1, v9);
        int64_t v13 = v9 + 1;
        if (v12) {
          BUG();
        }
        if (v13 >= v8)
        {
LABEL_25:
          swift_release();
          uint64_t v17 = 1 << *(unsigned char *)(v2 + 32);
          if (v17 > 63) {
            specialized UnsafeMutablePointer.assign(repeating:count:)(0, (unint64_t)(v17 + 63) >> 6, (uint64_t)v20);
          }
          else {
            *uint64_t v20 = -1 << (1 << *(unsigned char *)(v2 + 32));
          }
          *(void *)(v2 + 16) = 0;
          break;
        }
        unint64_t i = v20[v13];
        if (i)
        {
          uint64_t v15 = v13;
        }
        else
        {
          uint64_t v15 = v13 + 1;
          if (v13 + 1 >= v8) {
            goto LABEL_25;
          }
          unint64_t i = v20[v13 + 1];
          if (!i)
          {
            uint64_t v15 = v13 + 2;
            if (v13 + 2 >= v8) {
              goto LABEL_25;
            }
            unint64_t i = v20[v13 + 2];
            if (!i)
            {
              uint64_t v15 = v13 + 3;
              if (v13 + 3 >= v8) {
                goto LABEL_25;
              }
              for (unint64_t i = v20[v13 + 3]; !i; unint64_t i = v20[v15])
              {
                BOOL v12 = __OFADD__(1, v15++);
                if (v12) {
                  BUG();
                }
                if (v15 >= v8) {
                  goto LABEL_25;
                }
              }
            }
          }
        }
        _BitScanForward64(&v16, i);
        unint64_t v7 = i & (i - 1);
        int64_t v11 = v16 + (v15 << 6);
        unint64_t v9 = v15;
      }
      specialized _NativeSet._unsafeInsertNew(_:)(*(void *)(*(void *)(v2 + 48) + 16 * v11), *(void *)(*(void *)(v2 + 48) + 16 * v11 + 8), v4);
    }
  }
  swift_release();
  char result = v19;
  void *v19 = v4;
  return result;
}

{
  uint64_t *v1;
  uint64_t v2;
  int64_t v3;
  void *v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  int64_t v12;
  unint64_t v13;
  unint64_t v14;
  BOOL v15;
  int64_t v16;
  unint64_t i;
  int64_t v18;
  unint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  unint64_t v26;
  unint64_t v27;
  unint64_t v28;
  unint64_t v29;
  unint64_t v30;
  char v31;
  unint64_t v32;
  uint64_t v33;
  unint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t *result;
  uint64_t v38;
  void (*v39)(uint64_t *, unint64_t, uint64_t);
  void *v40;
  uint64_t *v41;
  uint64_t v42;
  uint64_t *v43;
  int64_t v44;
  uint64_t v45;
  uint64_t v46;
  int64_t v47;
  void *v48;

  uint64_t v2 = a1;
  uint64_t v42 = type metadata accessor for URL(0);
  int64_t v40 = *(void **)(v42 - 8);
  uint64_t v3 = v40[8];
  uint64_t v4 = alloca(v3);
  uint64_t v5 = alloca(v3);
  uint64_t v43 = &v38;
  uint64_t v41 = v1;
  uint64_t v6 = *v1;
  if (*(void *)(*v1 + 24) > a1) {
    uint64_t v2 = *(void *)(*v1 + 24);
  }
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _SetStorage<URL>);
  unint64_t v7 = v6;
  int64_t v8 = static _SetStorage.resize(original:capacity:move:)(v6, v2, 1);
  if (*(void *)(v6 + 16))
  {
    unint64_t v9 = 1 << *(unsigned char *)(v6 + 32);
    uint64_t v48 = (void *)(v6 + 56);
    unint64_t v10 = ~(-1 << v9);
    if (v9 >= 64) {
      unint64_t v10 = -1;
    }
    int64_t v11 = *(void *)(v7 + 56) & v10;
    uint64_t v47 = (unint64_t)(v9 + 63) >> 6;
    swift_retain();
    BOOL v12 = 0;
    Swift::String v46 = v7;
    while (1)
    {
      if (v11)
      {
        _BitScanForward64(&v13, v11);
        long long v45 = (v11 - 1) & v11;
        uint64_t v14 = v13 | (v12 << 6);
        uint64_t v44 = v12;
      }
      else
      {
        uint64_t v15 = __OFADD__(1, v12);
        unint64_t v16 = v12 + 1;
        if (v15) {
          BUG();
        }
        if (v16 >= v47)
        {
LABEL_36:
          swift_release();
          uint64_t v36 = 1 << *(unsigned char *)(v7 + 32);
          if (v36 > 63) {
            specialized UnsafeMutablePointer.assign(repeating:count:)(0, (unint64_t)(v36 + 63) >> 6, (uint64_t)v48);
          }
          else {
            void *v48 = -1 << v36;
          }
          *(void *)(v7 + 16) = 0;
          break;
        }
        unint64_t i = v48[v16];
        if (i)
        {
          uint64_t v18 = v16;
        }
        else
        {
          uint64_t v18 = v16 + 1;
          if (v16 + 1 >= v47) {
            goto LABEL_36;
          }
          unint64_t i = v48[v16 + 1];
          if (!i)
          {
            uint64_t v18 = v16 + 2;
            if (v16 + 2 >= v47) {
              goto LABEL_36;
            }
            unint64_t i = v48[v16 + 2];
            if (!i)
            {
              uint64_t v18 = v16 + 3;
              if (v16 + 3 >= v47) {
                goto LABEL_36;
              }
              for (unint64_t i = v48[v16 + 3]; !i; unint64_t i = v48[v18])
              {
                uint64_t v15 = __OFADD__(1, v18++);
                if (v15) {
                  BUG();
                }
                if (v18 >= v47) {
                  goto LABEL_36;
                }
              }
            }
          }
        }
        _BitScanForward64(&v19, i);
        long long v45 = i & (i - 1);
        uint64_t v44 = v18;
        uint64_t v14 = v19 + (v18 << 6);
      }
      uint64_t v20 = v40[9];
      unint64_t v21 = *(void *)(v7 + 48) + v20 * v14;
      unint64_t v22 = v42;
      uint64_t v39 = (void (*)(uint64_t *, unint64_t, uint64_t))v40[4];
      v39(v43, v21, v42);
      unint64_t v23 = *(void *)(v8 + 40);
      unint64_t v24 = lazy protocol witness table accessor for type TreeRegressorModel and conformance TreeRegressorModel(&lazy protocol witness table cache variable for type URL and conformance URL, (uint64_t (*)(uint64_t))&type metadata accessor for URL, (uint64_t)&protocol conformance descriptor for URL);
      unint64_t v25 = dispatch thunk of Hashable._rawHashValue(seed:)(v23, v22, v24) & ~(-1 << *(unsigned char *)(v8 + 32));
      unint64_t v26 = v25 >> 6;
      char v27 = ~*(void *)(v8 + 8 * (v25 >> 6) + 56) >> v25 << v25;
      if (v27)
      {
        _BitScanForward64(&v28, v27);
        uint64_t v29 = v28 | v25 & 0xFFFFFFFFFFFFFFC0;
        unint64_t v7 = v46;
      }
      else
      {
        unint64_t v30 = (unint64_t)(63 - (-1 << *(unsigned char *)(v8 + 32))) >> 6;
        uint64_t v31 = 0;
        unint64_t v7 = v46;
        do
        {
          uint64_t v32 = v26 + 1;
          if (v26 + 1 == v30 && (v31 & 1) != 0) {
            BUG();
          }
          unint64_t v26 = 0;
          if (v32 != v30) {
            unint64_t v26 = v32;
          }
          v31 |= v32 == v30;
          uint64_t v33 = *(void *)(v8 + 8 * v26 + 56);
        }
        while (v33 == -1);
        uint64_t v34 = ~v33;
        uint64_t v35 = 64;
        if (v34) {
          _BitScanForward64((unint64_t *)&v35, v34);
        }
        uint64_t v29 = v35 + (v26 << 6);
      }
      *(void *)(v8 + 8 * (v29 >> 6) + 56) |= 1 << v29;
      v39((uint64_t *)(*(void *)(v8 + 48) + v29 * v20), (unint64_t)v43, v42);
      ++*(void *)(v8 + 16);
      BOOL v12 = v44;
      int64_t v11 = v45;
    }
  }
  swift_release();
  char result = v41;
  uint64_t *v41 = v8;
  return result;
}

{
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  int64_t v8;
  unint64_t v9;
  unint64_t v10;
  BOOL v11;
  int64_t v12;
  unint64_t j;
  int64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  Swift::UInt v18;
  uint64_t v19;
  char v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t v25;
  int64_t v26;
  uint64_t v27;
  unint64_t v28;
  char v29;
  unint64_t v30;
  uint64_t v31;
  unint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t *result;
  char v38[72];
  Swift::UInt v39;
  uint64_t i;
  uint64_t *v41;
  uint64_t v42;
  uint64_t v43;
  int64_t v44;
  int64_t v45;
  void *v46;
  char v47;

  uint64_t v41 = v1;
  uint64_t v2 = *v1;
  uint64_t v3 = *(void *)(*v1 + 24);
  if (v3 <= a1) {
    uint64_t v3 = a1;
  }
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _SetStorage<MLRecommender.Identifier>);
  uint64_t v4 = static _SetStorage.resize(original:capacity:move:)(v2, v3, 1);
  if (*(void *)(v2 + 16))
  {
    uint64_t v5 = 1 << *(unsigned char *)(v2 + 32);
    Swift::String v46 = (void *)(v2 + 56);
    uint64_t v6 = ~(-1 << v5);
    if (v5 >= 64) {
      uint64_t v6 = -1;
    }
    unint64_t v7 = *(void *)(v2 + 56) & v6;
    long long v45 = (unint64_t)(v5 + 63) >> 6;
    swift_retain();
    int64_t v8 = 0;
    for (i = v2; ; uint64_t v2 = i)
    {
      if (v7)
      {
        _BitScanForward64(&v9, v7);
        uint64_t v43 = (v7 - 1) & v7;
        unint64_t v10 = v9 | (v8 << 6);
        uint64_t v44 = v8;
      }
      else
      {
        int64_t v11 = __OFADD__(1, v8);
        BOOL v12 = v8 + 1;
        if (v11) {
          BUG();
        }
        if (v12 >= v45)
        {
LABEL_39:
          swift_release();
          uint64_t v36 = 1 << *(unsigned char *)(v2 + 32);
          if (v36 > 63) {
            specialized UnsafeMutablePointer.assign(repeating:count:)(0, (unint64_t)(v36 + 63) >> 6, (uint64_t)v46);
          }
          else {
            *Swift::String v46 = -1 << v36;
          }
          *(void *)(v2 + 16) = 0;
          break;
        }
        j = v46[v12];
        if (j)
        {
          uint64_t v14 = v12;
        }
        else
        {
          uint64_t v14 = v12 + 1;
          if (v12 + 1 >= v45) {
            goto LABEL_39;
          }
          j = v46[v12 + 1];
          if (!j)
          {
            uint64_t v14 = v12 + 2;
            if (v12 + 2 >= v45) {
              goto LABEL_39;
            }
            j = v46[v12 + 2];
            if (!j)
            {
              uint64_t v14 = v12 + 3;
              if (v12 + 3 >= v45) {
                goto LABEL_39;
              }
              for (j = v46[v12 + 3]; !j; j = v46[v14])
              {
                int64_t v11 = __OFADD__(1, v14++);
                if (v11) {
                  BUG();
                }
                if (v14 >= v45) {
                  goto LABEL_39;
                }
              }
            }
          }
        }
        _BitScanForward64(&v15, j);
        uint64_t v43 = j & (j - 1);
        uint64_t v44 = v14;
        unint64_t v10 = v15 + (v14 << 6);
      }
      unint64_t v16 = *(void *)(v2 + 48);
      uint64_t v17 = 24 * v10;
      uint64_t v18 = *(void *)(v16 + v17);
      uint64_t v19 = *(void *)(v16 + v17 + 8);
      uint64_t v20 = *(unsigned char *)(v16 + v17 + 16);
      Hasher.init(_seed:)(*(void *)(v4 + 40));
      uint64_t v47 = v20;
      uint64_t v39 = v18;
      uint64_t v42 = v19;
      if (v20)
      {
        Hasher._combine(_:)(1uLL);
        Hasher._combine(_:)(v18);
      }
      else
      {
        Hasher._combine(_:)(0);
        String.hash(into:)(v38, v18);
      }
      unint64_t v7 = v43;
      unint64_t v21 = Hasher._finalize()() & ~(-1 << *(unsigned char *)(v4 + 32));
      unint64_t v22 = v21 >> 6;
      unint64_t v23 = ~*(void *)(v4 + 8 * (v21 >> 6) + 56) >> v21 << v21;
      if (v23)
      {
        _BitScanForward64(&v24, v23);
        unint64_t v25 = v24 | v21 & 0xFFFFFFFFFFFFFFC0;
        unint64_t v26 = v44;
        char v27 = v42;
      }
      else
      {
        unint64_t v28 = (unint64_t)(63 - (-1 << *(unsigned char *)(v4 + 32))) >> 6;
        uint64_t v29 = 0;
        char v27 = v42;
        do
        {
          unint64_t v30 = v22 + 1;
          if (v22 + 1 == v28 && (v29 & 1) != 0) {
            BUG();
          }
          unint64_t v22 = 0;
          if (v30 != v28) {
            unint64_t v22 = v30;
          }
          v29 |= v30 == v28;
          uint64_t v31 = *(void *)(v4 + 8 * v22 + 56);
        }
        while (v31 == -1);
        uint64_t v32 = ~v31;
        uint64_t v33 = 64;
        if (v32) {
          _BitScanForward64((unint64_t *)&v33, v32);
        }
        unint64_t v25 = v33 + (v22 << 6);
        unint64_t v26 = v44;
      }
      uint64_t v34 = 24 * v25;
      *(void *)(v4 + 8 * (v25 >> 6) + 56) |= 1 << v25;
      uint64_t v35 = *(void *)(v4 + 48);
      *(void *)(v35 + v34) = v39;
      *(void *)(v35 + v34 + 8) = v27;
      *(unsigned char *)(v35 + v34 + 16) = v47;
      ++*(void *)(v4 + 16);
      int64_t v8 = v26;
    }
  }
  swift_release();
  char result = v41;
  uint64_t *v41 = v4;
  return result;
}

{
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  int64_t v8;
  unint64_t v9;
  unint64_t v10;
  BOOL v11;
  int64_t v12;
  unint64_t i;
  int64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  Swift::Int v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t v25;
  int64_t v26;
  unint64_t v27;
  char v28;
  unint64_t v29;
  uint64_t v30;
  unint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t *result;
  char v35[72];
  uint64_t v36;
  uint64_t *v37;
  uint64_t v38;
  uint64_t v39;
  int64_t v40;
  int64_t v41;
  void *v42;

  uint64_t v37 = v1;
  uint64_t v2 = *v1;
  uint64_t v3 = *(void *)(*v1 + 24);
  if (v3 <= a1) {
    uint64_t v3 = a1;
  }
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _SetStorage<NSURLResourceKey>);
  uint64_t v4 = static _SetStorage.resize(original:capacity:move:)(v2, v3, 1);
  if (*(void *)(v2 + 16))
  {
    uint64_t v5 = 1 << *(unsigned char *)(v2 + 32);
    uint64_t v42 = (void *)(v2 + 56);
    uint64_t v6 = ~(-1 << v5);
    if (v5 >= 64) {
      uint64_t v6 = -1;
    }
    unint64_t v7 = *(void *)(v2 + 56) & v6;
    uint64_t v41 = (unint64_t)(v5 + 63) >> 6;
    swift_retain(v2);
    int64_t v8 = 0;
    uint64_t v38 = v2;
    while (1)
    {
      if (v7)
      {
        _BitScanForward64(&v9, v7);
        uint64_t v39 = (v7 - 1) & v7;
        unint64_t v10 = v9 | (v8 << 6);
        int64_t v40 = v8;
      }
      else
      {
        int64_t v11 = __OFADD__(1, v8);
        BOOL v12 = v8 + 1;
        if (v11) {
          BUG();
        }
        if (v12 >= v41)
        {
LABEL_36:
          swift_release(v2);
          uint64_t v33 = 1 << *(unsigned char *)(v2 + 32);
          if (v33 > 63) {
            specialized UnsafeMutablePointer.assign(repeating:count:)(0, (unint64_t)(v33 + 63) >> 6, (uint64_t)v42);
          }
          else {
            int *v42 = -1 << v33;
          }
          *(void *)(v2 + 16) = 0;
          break;
        }
        unint64_t i = v42[v12];
        if (i)
        {
          uint64_t v14 = v12;
        }
        else
        {
          uint64_t v14 = v12 + 1;
          if (v12 + 1 >= v41) {
            goto LABEL_36;
          }
          unint64_t i = v42[v12 + 1];
          if (!i)
          {
            uint64_t v14 = v12 + 2;
            if (v12 + 2 >= v41) {
              goto LABEL_36;
            }
            unint64_t i = v42[v12 + 2];
            if (!i)
            {
              uint64_t v14 = v12 + 3;
              if (v12 + 3 >= v41) {
                goto LABEL_36;
              }
              for (unint64_t i = v42[v12 + 3]; !i; unint64_t i = v42[v14])
              {
                int64_t v11 = __OFADD__(1, v14++);
                if (v11) {
                  BUG();
                }
                if (v14 >= v41) {
                  goto LABEL_36;
                }
              }
            }
          }
        }
        _BitScanForward64(&v15, i);
        uint64_t v39 = i & (i - 1);
        int64_t v40 = v14;
        unint64_t v10 = v15 + (v14 << 6);
      }
      unint64_t v16 = *(void *)(v4 + 40);
      uint64_t v36 = *(void *)(*(void *)(v2 + 48) + 8 * v10);
      uint64_t v17 = static String._unconditionallyBridgeFromObjectiveC(_:)(v36);
      uint64_t v19 = v18;
      Hasher.init(_seed:)(v16);
      String.hash(into:)(v35, v17);
      uint64_t v20 = Hasher._finalize()();
      swift_bridgeObjectRelease(v19);
      unint64_t v21 = v20 & ~(-1 << *(unsigned char *)(v4 + 32));
      unint64_t v22 = v21 >> 6;
      unint64_t v23 = ~*(void *)(v4 + 8 * (v21 >> 6) + 56) >> v21 << v21;
      if (v23)
      {
        _BitScanForward64(&v24, v23);
        unint64_t v25 = v24 | v21 & 0xFFFFFFFFFFFFFFC0;
        uint64_t v2 = v38;
        unint64_t v26 = v40;
        unint64_t v7 = v39;
      }
      else
      {
        char v27 = (unint64_t)(63 - (-1 << *(unsigned char *)(v4 + 32))) >> 6;
        unint64_t v28 = 0;
        uint64_t v2 = v38;
        unint64_t v7 = v39;
        do
        {
          uint64_t v29 = v22 + 1;
          if (v22 + 1 == v27 && (v28 & 1) != 0) {
            BUG();
          }
          unint64_t v22 = 0;
          if (v29 != v27) {
            unint64_t v22 = v29;
          }
          v28 |= v29 == v27;
          unint64_t v30 = *(void *)(v4 + 8 * v22 + 56);
        }
        while (v30 == -1);
        uint64_t v31 = ~v30;
        uint64_t v32 = 64;
        if (v31) {
          _BitScanForward64((unint64_t *)&v32, v31);
        }
        unint64_t v25 = v32 + (v22 << 6);
        unint64_t v26 = v40;
      }
      *(void *)(v4 + 8 * (v25 >> 6) + 56) |= 1 << v25;
      *(void *)(*(void *)(v4 + 48) + 8 * v25) = v36;
      ++*(void *)(v4 + 16);
      int64_t v8 = v26;
    }
  }
  swift_release(v2);
  char result = v37;
  *uint64_t v37 = v4;
  return result;
}

uint64_t specialized _NativeSet.resize(capacity:)(uint64_t a1)
{
  uint64_t v32 = v1;
  uint64_t v2 = *v1;
  uint64_t v3 = *(void *)(*v1 + 24);
  if (v3 <= a1) {
    uint64_t v3 = a1;
  }
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _SetStorage<Int>);
  uint64_t v4 = static _SetStorage.resize(original:capacity:move:)(v2, v3, 1);
  if (!*(void *)(v2 + 16))
  {
    uint64_t result = swift_release();
    uint64_t v29 = v1;
    goto LABEL_41;
  }
  uint64_t v5 = 1 << *(unsigned char *)(v2 + 32);
  uint64_t v31 = -1 << v5;
  uint64_t v6 = ~(-1 << v5);
  if (v5 >= 64) {
    uint64_t v6 = -1;
  }
  uint64_t v34 = (uint64_t *)(v2 + 56);
  unint64_t v7 = *(void *)(v2 + 56) & v6;
  uint64_t v30 = 1 << *(unsigned char *)(v2 + 32);
  int64_t v33 = (unint64_t)(v5 + 63) >> 6;
  for (int64_t i = 0; ; int64_t i = v11)
  {
    if (v7)
    {
      _BitScanForward64(&v9, v7);
      v7 &= v7 - 1;
      unint64_t v10 = v9 | (i << 6);
      int64_t v11 = i;
      goto LABEL_18;
    }
    BOOL v12 = __OFADD__(1, i);
    int64_t v13 = i + 1;
    if (v12) {
      BUG();
    }
    if (v13 >= v33) {
      break;
    }
    unint64_t j = v34[v13];
    if (j)
    {
      int64_t v11 = v13;
    }
    else
    {
      int64_t v11 = v13 + 1;
      if (v13 + 1 >= v33) {
        break;
      }
      unint64_t j = v34[v13 + 1];
      if (!j)
      {
        int64_t v11 = v13 + 2;
        if (v13 + 2 >= v33) {
          break;
        }
        unint64_t j = v34[v13 + 2];
        if (!j)
        {
          int64_t v11 = v13 + 3;
          if (v13 + 3 >= v33) {
            break;
          }
          for (unint64_t j = v34[v13 + 3]; !j; unint64_t j = v34[v11])
          {
            BOOL v12 = __OFADD__(1, v11++);
            if (v12) {
              BUG();
            }
            if (v11 >= v33) {
              goto LABEL_36;
            }
          }
        }
      }
    }
    _BitScanForward64(&v15, j);
    unint64_t v7 = j & (j - 1);
    unint64_t v10 = v15 + (v11 << 6);
LABEL_18:
    uint64_t v16 = *(void *)(*(void *)(v2 + 48) + 8 * v10);
    unint64_t v17 = static Hasher._hash(seed:_:)(*(void *)(v4 + 40), v16) & ~(-1 << *(unsigned char *)(v4 + 32));
    unint64_t v18 = v17 >> 6;
    unint64_t v19 = ~*(void *)(v4 + 8 * (v17 >> 6) + 56) >> v17 << v17;
    if (v19)
    {
      _BitScanForward64(&v20, v19);
      unint64_t v21 = v20 | v17 & 0xFFFFFFFFFFFFFFC0;
    }
    else
    {
      unint64_t v22 = (unint64_t)(63 - (-1 << *(unsigned char *)(v4 + 32))) >> 6;
      char v23 = 0;
      do
      {
        unint64_t v24 = v18 + 1;
        if (v18 + 1 == v22 && (v23 & 1) != 0) {
          BUG();
        }
        unint64_t v18 = 0;
        if (v24 != v22) {
          unint64_t v18 = v24;
        }
        v23 |= v24 == v22;
        uint64_t v25 = *(void *)(v4 + 8 * v18 + 56);
      }
      while (v25 == -1);
      unint64_t v26 = ~v25;
      uint64_t v27 = 64;
      if (v26) {
        _BitScanForward64((unint64_t *)&v27, v26);
      }
      unint64_t v21 = v27 + (v18 << 6);
    }
    *(void *)(v4 + 8 * (v21 >> 6) + 56) |= 1 << v21;
    *(void *)(*(void *)(v4 + 48) + 8 * v21) = v16;
    ++*(void *)(v4 + 16);
  }
LABEL_36:
  if (v30 > 63) {
    specialized UnsafeMutablePointer.assign(repeating:count:)(0, v33, (uint64_t)v34);
  }
  else {
    *uint64_t v34 = v31;
  }
  uint64_t v29 = v32;
  *(void *)(v2 + 16) = 0;
  uint64_t result = swift_release();
LABEL_41:
  uint64_t *v29 = v4;
  return result;
}

uint64_t specialized _NativeSet._unsafeInsertNew(_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  Hasher.init(_seed:)(*(void *)(a3 + 40));
  if (a2)
  {
    Hasher._combine(_:)(1u);
    swift_bridgeObjectRetain(a2);
    String.hash(into:)(v8, a1);
    swift_bridgeObjectRelease(a2);
  }
  else
  {
    Hasher._combine(_:)(0);
  }
  Swift::Int v4 = Hasher._finalize()();
  unint64_t v5 = _HashTable.nextHole(atOrAfter:)(~(-1 << *(unsigned char *)(a3 + 32)) & v4, a3 + 56);
  *(void *)(a3 + 8 * (v5 >> 6) + 56) |= 1 << v5;
  uint64_t v6 = *(void *)(a3 + 48);
  uint64_t result = 16 * v5;
  *(void *)(v6 + result) = a1;
  *(void *)(v6 + result + 8) = a2;
  ++*(void *)(a3 + 16);
  return result;
}

uint64_t specialized _NativeSet.insertNew(_:at:isUnique:)(uint64_t a1, uint64_t a2, unint64_t a3, char a4)
{
  uint64_t v26 = a2;
  unint64_t v7 = *(void *)(*v4 + 16);
  unint64_t v8 = *(void *)(*v4 + 24);
  uint64_t v25 = v4;
  if (v8 <= v7 || (a4 & 1) == 0)
  {
    uint64_t v9 = v7 + 1;
    if (a4)
    {
      specialized _NativeSet.resize(capacity:)(v9);
    }
    else
    {
      if (v8 > v7)
      {
        specialized _NativeSet.copy()();
        goto LABEL_14;
      }
      specialized _NativeSet.copyAndResize(capacity:)(v9);
    }
    uint64_t v10 = *v4;
    Hasher.init(_seed:)(*(void *)(*v4 + 40));
    String.hash(into:)(v24, a1);
    Swift::Int v11 = Hasher._finalize()();
    uint64_t v12 = ~(-1 << *(unsigned char *)(v10 + 32));
    a3 = v12 & v11;
    uint64_t v13 = *(void *)(v10 + 8 * ((v12 & (unint64_t)v11) >> 6) + 56);
    if (_bittest64(&v13, a3))
    {
      uint64_t v14 = *(void *)(v10 + 48);
      do
      {
        uint64_t v15 = *(void *)(v14 + 16 * a3);
        uint64_t v16 = *(void *)(v14 + 16 * a3 + 8);
        if (v15 == a1 && v16 == v26 || (_stringCompareWithSmolCheck(_:_:expecting:)(v15, v16, a1, v26, 0) & 1) != 0)
        {
          ELEMENT_TYPE_OF_SET_VIOLATES_HASHABLE_REQUIREMENTS(_:)(&type metadata for String);
          BUG();
        }
        a3 = v12 & (a3 + 1);
        uint64_t v17 = *(void *)(v10 + 8 * (a3 >> 6) + 56);
      }
      while (_bittest64(&v17, a3));
    }
  }
LABEL_14:
  uint64_t result = *v25;
  *(void *)(result + 8 * (a3 >> 6) + 56) |= 1 << a3;
  uint64_t v19 = *(void *)(result + 48);
  uint64_t v20 = 16 * a3;
  *(void *)(v19 + v20) = a1;
  *(void *)(v19 + v20 + 8) = v26;
  uint64_t v21 = *(void *)(result + 16);
  BOOL v22 = __OFADD__(1, v21);
  uint64_t v23 = v21 + 1;
  if (v22) {
    BUG();
  }
  *(void *)(result + 16) = v23;
  return result;
}

{
  uint64_t *v4;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  Swift::Int v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char v18;
  uint64_t v19;
  uint64_t result;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  BOOL v24;
  uint64_t v25;
  uint64_t v26;
  unsigned char v27[72];
  uint64_t *v28;
  uint64_t v29;

  unint64_t v8 = *(void *)(*v4 + 16);
  uint64_t v9 = *(void *)(*v4 + 24);
  unint64_t v28 = v4;
  if (v9 > v8 && (a4 & 1) != 0) {
    goto LABEL_23;
  }
  uint64_t v10 = v8 + 1;
  uint64_t v29 = a1;
  if (a4)
  {
    specialized _NativeSet.resize(capacity:)(v10);
  }
  else
  {
    if (v9 > v8)
    {
      specialized _NativeSet.copy()();
LABEL_22:
      a1 = v29;
      goto LABEL_23;
    }
    specialized _NativeSet.copyAndResize(capacity:)(v10);
  }
  Swift::Int v11 = *v4;
  Hasher.init(_seed:)(*(void *)(*v4 + 40));
  if (a2)
  {
    Hasher._combine(_:)(1u);
    swift_bridgeObjectRetain(a2);
    String.hash(into:)(v27, v29);
    swift_bridgeObjectRelease(a2);
  }
  else
  {
    Hasher._combine(_:)(0);
  }
  uint64_t v12 = Hasher._finalize()();
  uint64_t v13 = ~(-1 << *(unsigned char *)(v11 + 32));
  a3 = v13 & v12;
  uint64_t v14 = *(void *)(v11 + 8 * ((v13 & (unint64_t)v12) >> 6) + 56);
  if (!_bittest64(&v14, a3)) {
    goto LABEL_22;
  }
  uint64_t v15 = *(void *)(v11 + 48);
  a1 = v29;
  do
  {
    uint64_t v16 = *(void *)(v15 + 16 * a3 + 8);
    if (v16)
    {
      if (a2)
      {
        if ((uint64_t v17 = *(void *)(v15 + 16 * a3), v17 == a1) && v16 == a2
          || (unint64_t v18 = _stringCompareWithSmolCheck(_:_:expecting:)(v17, v16, a1, a2, 0), a1 = v29, (v18 & 1) != 0))
        {
LABEL_26:
          uint64_t v26 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for String?);
          ELEMENT_TYPE_OF_SET_VIOLATES_HASHABLE_REQUIREMENTS(_:)(v26);
          BUG();
        }
      }
    }
    else if (!a2)
    {
      goto LABEL_26;
    }
    a3 = v13 & (a3 + 1);
    uint64_t v19 = *(void *)(v11 + 8 * (a3 >> 6) + 56);
  }
  while (_bittest64(&v19, a3));
LABEL_23:
  uint64_t result = *v28;
  *(void *)(result + 8 * (a3 >> 6) + 56) |= 1 << a3;
  uint64_t v21 = *(void *)(result + 48);
  BOOL v22 = 16 * a3;
  *(void *)(v21 + v22) = a1;
  *(void *)(v21 + v22 + 8) = a2;
  uint64_t v23 = *(void *)(result + 16);
  unint64_t v24 = __OFADD__(1, v23);
  uint64_t v25 = v23 + 1;
  if (v24) {
    BUG();
  }
  *(void *)(result + 16) = v25;
  return result;
}

uint64_t specialized _NativeSet.insertNew(_:at:isUnique:)(Swift::UInt a1, char a2, unint64_t a3, char a4)
{
  unint64_t v7 = *(void *)(*v4 + 16);
  unint64_t v8 = *(void *)(*v4 + 24);
  if (v8 <= v7 || (a4 & 1) == 0)
  {
    uint64_t v9 = v7 + 1;
    if (a4)
    {
      specialized _NativeSet.resize(capacity:)(v9);
    }
    else
    {
      if (v8 > v7)
      {
        specialized _NativeSet.copy()(v9);
        goto LABEL_19;
      }
      specialized _NativeSet.copyAndResize(capacity:)(v9);
    }
    uint64_t v10 = *v4;
    Hasher.init(_seed:)(*(void *)(*v4 + 40));
    if (a2)
    {
      Hasher._combine(_:)(0);
    }
    else
    {
      Hasher._combine(_:)(1u);
      Hasher._combine(_:)(a1);
    }
    Swift::Int v11 = Hasher._finalize()();
    uint64_t v12 = ~(-1 << *(unsigned char *)(v10 + 32));
    a3 = v12 & v11;
    uint64_t v13 = *(void *)(v10 + 8 * ((v12 & (unint64_t)v11) >> 6) + 56);
    if (_bittest64(&v13, a3))
    {
      uint64_t v14 = *(void *)(v10 + 48);
      do
      {
        if (*(unsigned char *)(v14 + 16 * a3 + 8))
        {
          if (a2) {
            goto LABEL_22;
          }
        }
        else if ((a2 & 1) == 0 && *(void *)(v14 + 16 * a3) == a1)
        {
LABEL_22:
          uint64_t v22 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Int?);
          ELEMENT_TYPE_OF_SET_VIOLATES_HASHABLE_REQUIREMENTS(_:)(v22);
          BUG();
        }
        a3 = v12 & (a3 + 1);
        uint64_t v15 = *(void *)(v10 + 8 * (a3 >> 6) + 56);
      }
      while (_bittest64(&v15, a3));
    }
  }
LABEL_19:
  uint64_t result = *v4;
  *(void *)(result + 8 * (a3 >> 6) + 56) |= 1 << a3;
  uint64_t v17 = *(void *)(result + 48);
  uint64_t v18 = 16 * a3;
  *(void *)(v17 + v18) = a1;
  *(unsigned char *)(v17 + v18 + 8) = a2 & 1;
  uint64_t v19 = *(void *)(result + 16);
  BOOL v20 = __OFADD__(1, v19);
  uint64_t v21 = v19 + 1;
  if (v20) {
    BUG();
  }
  *(void *)(result + 16) = v21;
  return result;
}

uint64_t specialized _NativeSet.insertNew(_:at:isUnique:)(uint64_t a1, unint64_t a2, char a3)
{
  unint64_t v6 = *(void *)(*v3 + 16);
  unint64_t v7 = *(void *)(*v3 + 24);
  if (v7 <= v6 || (a3 & 1) == 0)
  {
    uint64_t v8 = v6 + 1;
    if (a3)
    {
      specialized _NativeSet.resize(capacity:)(v8);
    }
    else
    {
      if (v7 > v6)
      {
        specialized _NativeSet.copy()(v8);
        goto LABEL_11;
      }
      specialized _NativeSet.copyAndResize(capacity:)(v8);
    }
    uint64_t v9 = *v3;
    uint64_t v10 = static Hasher._hash(seed:_:)(*(void *)(*v3 + 40), a1);
    uint64_t v11 = ~(-1 << *(unsigned char *)(v9 + 32));
    a2 = v11 & v10;
    uint64_t v12 = *(void *)(v9 + 8 * ((v11 & (unint64_t)v10) >> 6) + 56);
    if (_bittest64(&v12, a2))
    {
      do
      {
        if (*(void *)(*(void *)(v9 + 48) + 8 * a2) == a1)
        {
          ELEMENT_TYPE_OF_SET_VIOLATES_HASHABLE_REQUIREMENTS(_:)(&type metadata for Int);
          BUG();
        }
        a2 = v11 & (a2 + 1);
        uint64_t v13 = *(void *)(v9 + 8 * (a2 >> 6) + 56);
      }
      while (_bittest64(&v13, a2));
    }
  }
LABEL_11:
  uint64_t result = *v3;
  *(void *)(result + 8 * (a2 >> 6) + 56) |= 1 << a2;
  *(void *)(*(void *)(result + 48) + 8 * a2) = a1;
  uint64_t v15 = *(void *)(result + 16);
  BOOL v16 = __OFADD__(1, v15);
  uint64_t v17 = v15 + 1;
  if (v16) {
    BUG();
  }
  *(void *)(result + 16) = v17;
  return result;
}

{
  uint64_t *v3;
  uint64_t v6;
  int64_t v7;
  void *v8;
  void *v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  BOOL v23;
  uint64_t result;
  uint64_t v25;
  uint64_t v26;
  void (*v27)(uint64_t *, unint64_t, uint64_t);
  uint64_t v28;
  uint64_t *v29;
  uint64_t v30;
  uint64_t v31;

  uint64_t v30 = a1;
  unint64_t v6 = type metadata accessor for URL(0);
  uint64_t v31 = *(void *)(v6 - 8);
  unint64_t v7 = *(void *)(v31 + 64);
  uint64_t v8 = alloca(v7);
  uint64_t v9 = alloca(v7);
  uint64_t v10 = *(void *)(*v3 + 16);
  uint64_t v11 = *(void *)(*v3 + 24);
  uint64_t v29 = v3;
  if (v11 <= v10 || (a3 & 1) == 0)
  {
    uint64_t v12 = v10 + 1;
    if (a3)
    {
      specialized _NativeSet.resize(capacity:)(v12);
    }
    else
    {
      if (v11 > v10)
      {
        specialized _NativeSet.copy()(v12);
        goto LABEL_12;
      }
      specialized _NativeSet.copyAndResize(capacity:)(v12);
    }
    uint64_t v13 = *v3;
    uint64_t v14 = *(void *)(*v3 + 40);
    uint64_t v15 = lazy protocol witness table accessor for type TreeRegressorModel and conformance TreeRegressorModel(&lazy protocol witness table cache variable for type URL and conformance URL, (uint64_t (*)(uint64_t))&type metadata accessor for URL, (uint64_t)&protocol conformance descriptor for URL);
    BOOL v16 = dispatch thunk of Hashable._rawHashValue(seed:)(v14, v6, v15);
    uint64_t v26 = ~(-1 << *(unsigned char *)(v13 + 32));
    a2 = v26 & v16;
    uint64_t v17 = *(void *)(v13 + 8 * ((v26 & (unint64_t)v16) >> 6) + 56);
    if (_bittest64(&v17, a2))
    {
      uint64_t v27 = *(void (**)(uint64_t *, unint64_t, uint64_t))(v31 + 16);
      unint64_t v28 = *(void *)(v31 + 72);
      do
      {
        v27(&v25, *(void *)(v13 + 48) + a2 * v28, v6);
        uint64_t v18 = lazy protocol witness table accessor for type TreeRegressorModel and conformance TreeRegressorModel(&lazy protocol witness table cache variable for type URL and conformance URL, (uint64_t (*)(uint64_t))&type metadata accessor for URL, (uint64_t)&protocol conformance descriptor for URL);
        uint64_t v19 = dispatch thunk of static Equatable.== infix(_:_:)(&v25, v30, v6, v18);
        (*(void (**)(uint64_t *, uint64_t))(v31 + 8))(&v25, v6);
        if (v19)
        {
          ELEMENT_TYPE_OF_SET_VIOLATES_HASHABLE_REQUIREMENTS(_:)(v6);
          BUG();
        }
        a2 = v26 & (a2 + 1);
        BOOL v20 = *(void *)(v13 + 8 * (a2 >> 6) + 56);
      }
      while (_bittest64(&v20, a2));
    }
  }
LABEL_12:
  uint64_t v21 = *v29;
  *(void *)(v21 + 8 * (a2 >> 6) + 56) |= 1 << a2;
  (*(void (**)(unint64_t, uint64_t, uint64_t))(v31 + 32))(*(void *)(v21 + 48) + *(void *)(v31 + 72) * a2, v30, v6);
  uint64_t v22 = *(void *)(v21 + 16);
  uint64_t v23 = __OFADD__(1, v22);
  uint64_t result = v22 + 1;
  if (v23) {
    BUG();
  }
  *(void *)(v21 + 16) = result;
  return result;
}

{
  uint64_t *v3;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  Swift::Int v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t i;
  char v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t result;
  uint64_t v30;
  BOOL v31;
  uint64_t v32;
  uint64_t v33;
  unsigned char v34[72];
  uint64_t *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;

  unint64_t v6 = *(void *)(*v3 + 16);
  unint64_t v7 = *(void *)(*v3 + 24);
  uint64_t v35 = v3;
  if (v7 <= v6 || (a3 & 1) == 0)
  {
    uint64_t v8 = v6 + 1;
    uint64_t v38 = a1;
    if (a3)
    {
      specialized _NativeSet.resize(capacity:)(v8);
    }
    else
    {
      if (v7 > v6)
      {
        specialized _NativeSet.copy()();
LABEL_17:
        a1 = v38;
        goto LABEL_18;
      }
      specialized _NativeSet.copyAndResize(capacity:)(v8);
    }
    uint64_t v9 = *v3;
    uint64_t v10 = *(void *)(*v3 + 40);
    uint64_t v11 = static String._unconditionallyBridgeFromObjectiveC(_:)(v38);
    uint64_t v13 = v12;
    Hasher.init(_seed:)(v10);
    String.hash(into:)(v34, v11);
    uint64_t v14 = Hasher._finalize()();
    swift_bridgeObjectRelease(v13);
    uint64_t v36 = ~(-1 << *(unsigned char *)(v9 + 32));
    a2 = v36 & v14;
    uint64_t v15 = *(void *)(v9 + 8 * (a2 >> 6) + 56);
    if (_bittest64(&v15, a2))
    {
      uint64_t v37 = v9;
      BOOL v16 = static String._unconditionallyBridgeFromObjectiveC(_:)(*(void *)(*(void *)(v9 + 48) + 8 * a2));
      uint64_t v18 = v17;
      uint64_t v19 = static String._unconditionallyBridgeFromObjectiveC(_:)(v38);
      uint64_t v23 = v20;
      if (v16 == v19 && v18 == v20)
      {
LABEL_21:
        swift_bridgeObjectRelease_n(v18, 2, v20, v21, v22);
      }
      else
      {
        for (int64_t i = v16; ; int64_t i = v27)
        {
          uint64_t v25 = _stringCompareWithSmolCheck(_:_:expecting:)(i, v18, v19, v23, 0);
          swift_bridgeObjectRelease(v18);
          swift_bridgeObjectRelease(v23);
          if (v25) {
            break;
          }
          a2 = v36 & (a2 + 1);
          uint64_t v26 = *(void *)(v37 + 8 * (a2 >> 6) + 56);
          a1 = v38;
          if (!_bittest64(&v26, a2)) {
            goto LABEL_18;
          }
          uint64_t v27 = static String._unconditionallyBridgeFromObjectiveC(_:)(*(void *)(*(void *)(v37 + 48) + 8 * a2));
          uint64_t v18 = v28;
          uint64_t v19 = static String._unconditionallyBridgeFromObjectiveC(_:)(a1);
          uint64_t v23 = v20;
          if (v27 == v19 && v18 == v20) {
            goto LABEL_21;
          }
        }
      }
      int64_t v33 = type metadata accessor for NSURLResourceKey(0);
      ELEMENT_TYPE_OF_SET_VIOLATES_HASHABLE_REQUIREMENTS(_:)(v33);
      BUG();
    }
    goto LABEL_17;
  }
LABEL_18:
  uint64_t result = *v35;
  *(void *)(result + 8 * (a2 >> 6) + 56) |= 1 << a2;
  *(void *)(*(void *)(result + 48) + 8 * a2) = a1;
  uint64_t v30 = *(void *)(result + 16);
  uint64_t v31 = __OFADD__(1, v30);
  uint64_t v32 = v30 + 1;
  if (v31) {
    BUG();
  }
  *(void *)(result + 16) = v32;
  return result;
}

uint64_t specialized _NativeSet.insertNew(_:at:isUnique:)(Swift::UInt a1, uint64_t a2, int a3, unint64_t a4, char a5)
{
  uint64_t v32 = a2;
  unint64_t v9 = *(void *)(*v5 + 16);
  unint64_t v10 = *(void *)(*v5 + 24);
  uint64_t v30 = v5;
  if (v10 <= v9 || (a5 & 1) == 0)
  {
    uint64_t v11 = v9 + 1;
    Swift::UInt v33 = a1;
    if (a5)
    {
      specialized _NativeSet.resize(capacity:)(v11);
    }
    else
    {
      if (v10 > v9)
      {
        specialized _NativeSet.copy()();
LABEL_23:
        a1 = v33;
        goto LABEL_24;
      }
      specialized _NativeSet.copyAndResize(capacity:)(v11);
    }
    uint64_t v31 = *v5;
    Hasher.init(_seed:)(*(void *)(v31 + 40));
    if (a3)
    {
      Hasher._combine(_:)(1uLL);
      Hasher._combine(_:)(v33);
    }
    else
    {
      Hasher._combine(_:)(0);
      String.hash(into:)(v29, v33);
    }
    Swift::Int v12 = Hasher._finalize()();
    uint64_t v13 = v31;
    uint64_t v14 = ~(-1 << *(unsigned char *)(v31 + 32));
    a4 = v14 & v12;
    uint64_t v15 = *(void *)(v31 + 8 * ((v14 & (unint64_t)v12) >> 6) + 56);
    if (_bittest64(&v15, a4))
    {
      uint64_t v16 = *(void *)(v31 + 48);
      a1 = v33;
      while (1)
      {
        uint64_t v17 = *(void *)(v16 + 24 * a4);
        if (*(unsigned char *)(v16 + 24 * a4 + 16))
        {
          if ((a3 & 1) != 0 && v17 == a1) {
            goto LABEL_27;
          }
        }
        else if ((a3 & 1) == 0)
        {
          if ((uint64_t v18 = *(void *)(v16 + 24 * a4 + 8), v17 == a1) && v18 == v32
            || (int v19 = a3,
                Swift::UInt v20 = a1,
                char v21 = _stringCompareWithSmolCheck(_:_:expecting:)(v17, v18, a1, v32, 0),
                uint64_t v13 = v31,
                a1 = v20,
                a3 = v19,
                (v21 & 1) != 0))
          {
LABEL_27:
            ELEMENT_TYPE_OF_SET_VIOLATES_HASHABLE_REQUIREMENTS(_:)(&type metadata for MLRecommender.Identifier);
            BUG();
          }
        }
        a4 = v14 & (a4 + 1);
        uint64_t v22 = *(void *)(v13 + 8 * (a4 >> 6) + 56);
        if (!_bittest64(&v22, a4)) {
          goto LABEL_24;
        }
      }
    }
    goto LABEL_23;
  }
LABEL_24:
  uint64_t result = *v30;
  *(void *)(result + 8 * (a4 >> 6) + 56) |= 1 << a4;
  uint64_t v24 = *(void *)(result + 48);
  uint64_t v25 = 24 * a4;
  *(void *)(v24 + v25) = a1;
  *(void *)(v24 + v25 + 8) = v32;
  *(unsigned char *)(v24 + v25 + 16) = a3 & 1;
  uint64_t v26 = *(void *)(result + 16);
  BOOL v27 = __OFADD__(1, v26);
  uint64_t v28 = v26 + 1;
  if (v27) {
    BUG();
  }
  *(void *)(result + 16) = v28;
  return result;
}

uint64_t *specialized _NativeSet.copy()()
{
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _SetStorage<String>);
  uint64_t v24 = v0;
  uint64_t v1 = *v0;
  uint64_t v2 = static _SetStorage.copy(original:)(*v0);
  uint64_t v3 = v2;
  if (*(void *)(v1 + 16))
  {
    Swift::Int v4 = (void *)(v2 + 56);
    __src = (void *)(v1 + 56);
    unint64_t v5 = (unint64_t)((1 << *(unsigned char *)(v2 + 32)) + 63) >> 6;
    if (v2 != v1 || (unint64_t)v4 >= v1 + 8 * v5 + 56) {
      memmove(v4, __src, 8 * v5);
    }
    *(void *)(v3 + 16) = *(void *)(v1 + 16);
    uint64_t v6 = 1 << *(unsigned char *)(v1 + 32);
    uint64_t v7 = ~(-1 << v6);
    if (v6 >= 64) {
      uint64_t v7 = -1;
    }
    unint64_t v8 = *(void *)(v1 + 56) & v7;
    int64_t v9 = (unint64_t)(v6 + 63) >> 6;
    int64_t v10 = 0;
    while (1)
    {
      if (v8)
      {
        _BitScanForward64(&v11, v8);
        v8 &= v8 - 1;
        unint64_t v12 = v11 | (v10 << 6);
      }
      else
      {
        BOOL v13 = __OFADD__(1, v10);
        int64_t v14 = v10 + 1;
        if (v13) {
          BUG();
        }
        if (v14 >= v9) {
          break;
        }
        unint64_t i = *((void *)__src + v14);
        if (i)
        {
          int64_t v16 = v14;
        }
        else
        {
          int64_t v16 = v14 + 1;
          if (v14 + 1 >= v9) {
            break;
          }
          unint64_t i = *((void *)__src + v14 + 1);
          if (!i)
          {
            int64_t v16 = v14 + 2;
            if (v14 + 2 >= v9) {
              break;
            }
            unint64_t i = *((void *)__src + v14 + 2);
            if (!i)
            {
              int64_t v16 = v14 + 3;
              if (v14 + 3 >= v9) {
                break;
              }
              for (unint64_t i = *((void *)__src + v14 + 3); !i; unint64_t i = *((void *)__src + v16))
              {
                BOOL v13 = __OFADD__(1, v16++);
                if (v13) {
                  BUG();
                }
                if (v16 >= v9) {
                  goto LABEL_26;
                }
              }
            }
          }
        }
        _BitScanForward64(&v17, i);
        unint64_t v8 = i & (i - 1);
        unint64_t v12 = v17 + (v16 << 6);
        int64_t v10 = v16;
      }
      uint64_t v18 = *(void *)(v1 + 48);
      uint64_t v19 = 16 * v12;
      uint64_t v20 = *(void *)(v18 + v19);
      uint64_t v21 = *(void *)(v18 + v19 + 8);
      uint64_t v22 = *(void *)(v3 + 48);
      *(void *)(v22 + v19) = v20;
      *(void *)(v22 + v19 + 8) = v21;
      swift_bridgeObjectRetain(v21);
    }
  }
LABEL_26:
  swift_release(v1);
  uint64_t result = v24;
  *uint64_t v24 = v3;
  return result;
}

{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  void *v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  int64_t v9;
  int64_t v10;
  unint64_t v11;
  unint64_t v12;
  BOOL v13;
  int64_t v14;
  unint64_t i;
  int64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t *result;
  uint64_t *v22;
  void *__src;

  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _SetStorage<String?>);
  uint64_t v22 = v0;
  uint64_t v1 = *v0;
  uint64_t v2 = static _SetStorage.copy(original:)(*v0);
  uint64_t v3 = v2;
  if (*(void *)(v1 + 16))
  {
    Swift::Int v4 = (void *)(v2 + 56);
    __src = (void *)(v1 + 56);
    unint64_t v5 = (unint64_t)((1 << *(unsigned char *)(v2 + 32)) + 63) >> 6;
    if (v2 != v1 || (unint64_t)v4 >= v1 + 8 * v5 + 56) {
      memmove(v4, __src, 8 * v5);
    }
    *(void *)(v3 + 16) = *(void *)(v1 + 16);
    uint64_t v6 = 1 << *(unsigned char *)(v1 + 32);
    uint64_t v7 = ~(-1 << v6);
    if (v6 >= 64) {
      uint64_t v7 = -1;
    }
    unint64_t v8 = *(void *)(v1 + 56) & v7;
    int64_t v9 = (unint64_t)(v6 + 63) >> 6;
    int64_t v10 = 0;
    while (1)
    {
      if (v8)
      {
        _BitScanForward64(&v11, v8);
        v8 &= v8 - 1;
        unint64_t v12 = v11 | (v10 << 6);
      }
      else
      {
        BOOL v13 = __OFADD__(1, v10);
        int64_t v14 = v10 + 1;
        if (v13) {
          BUG();
        }
        if (v14 >= v9) {
          break;
        }
        unint64_t i = *((void *)__src + v14);
        if (i)
        {
          int64_t v16 = v14;
        }
        else
        {
          int64_t v16 = v14 + 1;
          if (v14 + 1 >= v9) {
            break;
          }
          unint64_t i = *((void *)__src + v14 + 1);
          if (!i)
          {
            int64_t v16 = v14 + 2;
            if (v14 + 2 >= v9) {
              break;
            }
            unint64_t i = *((void *)__src + v14 + 2);
            if (!i)
            {
              int64_t v16 = v14 + 3;
              if (v14 + 3 >= v9) {
                break;
              }
              for (unint64_t i = *((void *)__src + v14 + 3); !i; unint64_t i = *((void *)__src + v16))
              {
                BOOL v13 = __OFADD__(1, v16++);
                if (v13) {
                  BUG();
                }
                if (v16 >= v9) {
                  goto LABEL_26;
                }
              }
            }
          }
        }
        _BitScanForward64(&v17, i);
        unint64_t v8 = i & (i - 1);
        unint64_t v12 = v17 + (v16 << 6);
        int64_t v10 = v16;
      }
      uint64_t v18 = *(void *)(v1 + 48);
      uint64_t v19 = 16 * v12;
      uint64_t v20 = *(void *)(v18 + v19 + 8);
      *(_OWORD *)(*(void *)(v3 + 48) + v19) = *(_OWORD *)(v18 + v19);
      swift_bridgeObjectRetain(v20);
    }
  }
LABEL_26:
  swift_release();
  uint64_t result = v22;
  *uint64_t v22 = v3;
  return result;
}

{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  void *v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  int64_t v9;
  int64_t v10;
  unint64_t v11;
  unint64_t v12;
  BOOL v13;
  int64_t v14;
  unint64_t i;
  int64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char v23;
  uint64_t *result;
  uint64_t *v25;
  void *__src;

  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _SetStorage<MLRecommender.Identifier>);
  uint64_t v25 = v0;
  uint64_t v1 = *v0;
  uint64_t v2 = static _SetStorage.copy(original:)(*v0);
  uint64_t v3 = v2;
  if (*(void *)(v1 + 16))
  {
    Swift::Int v4 = (void *)(v2 + 56);
    __src = (void *)(v1 + 56);
    unint64_t v5 = (unint64_t)((1 << *(unsigned char *)(v2 + 32)) + 63) >> 6;
    if (v2 != v1 || (unint64_t)v4 >= v1 + 8 * v5 + 56) {
      memmove(v4, __src, 8 * v5);
    }
    *(void *)(v3 + 16) = *(void *)(v1 + 16);
    uint64_t v6 = 1 << *(unsigned char *)(v1 + 32);
    uint64_t v7 = ~(-1 << v6);
    if (v6 >= 64) {
      uint64_t v7 = -1;
    }
    unint64_t v8 = *(void *)(v1 + 56) & v7;
    int64_t v9 = (unint64_t)(v6 + 63) >> 6;
    int64_t v10 = 0;
    while (1)
    {
      if (v8)
      {
        _BitScanForward64(&v11, v8);
        v8 &= v8 - 1;
        unint64_t v12 = v11 | (v10 << 6);
      }
      else
      {
        BOOL v13 = __OFADD__(1, v10);
        int64_t v14 = v10 + 1;
        if (v13) {
          BUG();
        }
        if (v14 >= v9) {
          break;
        }
        unint64_t i = *((void *)__src + v14);
        if (i)
        {
          int64_t v16 = v14;
        }
        else
        {
          int64_t v16 = v14 + 1;
          if (v14 + 1 >= v9) {
            break;
          }
          unint64_t i = *((void *)__src + v14 + 1);
          if (!i)
          {
            int64_t v16 = v14 + 2;
            if (v14 + 2 >= v9) {
              break;
            }
            unint64_t i = *((void *)__src + v14 + 2);
            if (!i)
            {
              int64_t v16 = v14 + 3;
              if (v14 + 3 >= v9) {
                break;
              }
              for (unint64_t i = *((void *)__src + v14 + 3); !i; unint64_t i = *((void *)__src + v16))
              {
                BOOL v13 = __OFADD__(1, v16++);
                if (v13) {
                  BUG();
                }
                if (v16 >= v9) {
                  goto LABEL_26;
                }
              }
            }
          }
        }
        _BitScanForward64(&v17, i);
        unint64_t v8 = i & (i - 1);
        unint64_t v12 = v17 + (v16 << 6);
        int64_t v10 = v16;
      }
      uint64_t v18 = *(void *)(v1 + 48);
      uint64_t v19 = 24 * v12;
      uint64_t v20 = *(void *)(v18 + v19);
      uint64_t v21 = *(void *)(v18 + v19 + 8);
      uint64_t v22 = *(void *)(v3 + 48);
      uint64_t v23 = *(unsigned char *)(v18 + v19 + 16);
      *(void *)(v22 + v19) = v20;
      *(void *)(v22 + v19 + 8) = v21;
      *(unsigned char *)(v22 + v19 + 16) = v23;
      outlined copy of MLRecommender.Identifier(v20, v21, v23);
    }
  }
LABEL_26:
  swift_release();
  uint64_t result = v25;
  *uint64_t v25 = v3;
  return result;
}

{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  void *v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  int64_t v9;
  int64_t v10;
  unint64_t v11;
  unint64_t v12;
  BOOL v13;
  int64_t v14;
  unint64_t i;
  int64_t v16;
  unint64_t v17;
  void *v18;
  uint64_t *result;
  uint64_t *v20;
  void *__src;

  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _SetStorage<NSURLResourceKey>);
  uint64_t v20 = v0;
  uint64_t v1 = *v0;
  uint64_t v2 = static _SetStorage.copy(original:)(*v0);
  uint64_t v3 = v2;
  if (*(void *)(v1 + 16))
  {
    Swift::Int v4 = (void *)(v2 + 56);
    __src = (void *)(v1 + 56);
    unint64_t v5 = (unint64_t)((1 << *(unsigned char *)(v2 + 32)) + 63) >> 6;
    if (v2 != v1 || (unint64_t)v4 >= v1 + 8 * v5 + 56) {
      memmove(v4, __src, 8 * v5);
    }
    *(void *)(v3 + 16) = *(void *)(v1 + 16);
    uint64_t v6 = 1 << *(unsigned char *)(v1 + 32);
    uint64_t v7 = ~(-1 << v6);
    if (v6 >= 64) {
      uint64_t v7 = -1;
    }
    unint64_t v8 = *(void *)(v1 + 56) & v7;
    int64_t v9 = (unint64_t)(v6 + 63) >> 6;
    int64_t v10 = 0;
    while (1)
    {
      if (v8)
      {
        _BitScanForward64(&v11, v8);
        v8 &= v8 - 1;
        unint64_t v12 = v11 | (v10 << 6);
      }
      else
      {
        BOOL v13 = __OFADD__(1, v10);
        int64_t v14 = v10 + 1;
        if (v13) {
          BUG();
        }
        if (v14 >= v9) {
          break;
        }
        unint64_t i = *((void *)__src + v14);
        if (i)
        {
          int64_t v16 = v14;
        }
        else
        {
          int64_t v16 = v14 + 1;
          if (v14 + 1 >= v9) {
            break;
          }
          unint64_t i = *((void *)__src + v14 + 1);
          if (!i)
          {
            int64_t v16 = v14 + 2;
            if (v14 + 2 >= v9) {
              break;
            }
            unint64_t i = *((void *)__src + v14 + 2);
            if (!i)
            {
              int64_t v16 = v14 + 3;
              if (v14 + 3 >= v9) {
                break;
              }
              for (unint64_t i = *((void *)__src + v14 + 3); !i; unint64_t i = *((void *)__src + v16))
              {
                BOOL v13 = __OFADD__(1, v16++);
                if (v13) {
                  BUG();
                }
                if (v16 >= v9) {
                  goto LABEL_26;
                }
              }
            }
          }
        }
        _BitScanForward64(&v17, i);
        unint64_t v8 = i & (i - 1);
        unint64_t v12 = v17 + (v16 << 6);
        int64_t v10 = v16;
      }
      uint64_t v18 = *(void **)(*(void *)(v1 + 48) + 8 * v12);
      *(void *)(*(void *)(v3 + 48) + 8 * v12) = v18;
      v18;
    }
  }
LABEL_26:
  swift_release(v1);
  uint64_t result = v20;
  *uint64_t v20 = v3;
  return result;
}

uint64_t specialized _NativeSet.copy()()
{
  uint64_t v1 = v0;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _SetStorage<Int?>);
  uint64_t v2 = *v0;
  uint64_t v3 = static _SetStorage.copy(original:)(*v0);
  uint64_t v4 = v3;
  if (*(void *)(v2 + 16))
  {
    unint64_t v5 = (void *)(v3 + 56);
    uint64_t v6 = v2 + 56;
    unint64_t v7 = (unint64_t)((1 << *(unsigned char *)(v3 + 32)) + 63) >> 6;
    if (v3 != v2 || (unint64_t)v5 >= v2 + 8 * v7 + 56) {
      memmove(v5, (const void *)(v2 + 56), 8 * v7);
    }
    *(void *)(v4 + 16) = *(void *)(v2 + 16);
    uint64_t v8 = 1 << *(unsigned char *)(v2 + 32);
    uint64_t v9 = ~(-1 << v8);
    if (v8 >= 64) {
      uint64_t v9 = -1;
    }
    unint64_t v10 = *(void *)(v2 + 56) & v9;
    int64_t v11 = (unint64_t)(v8 + 63) >> 6;
    int64_t v12 = 0;
    while (1)
    {
      if (v10)
      {
        _BitScanForward64(&v13, v10);
        v10 &= v10 - 1;
        unint64_t v14 = v13 | (v12 << 6);
      }
      else
      {
        BOOL v15 = __OFADD__(1, v12);
        int64_t v16 = v12 + 1;
        if (v15) {
          BUG();
        }
        if (v16 >= v11) {
          break;
        }
        unint64_t i = *(void *)(v6 + 8 * v16);
        if (i)
        {
          int64_t v18 = v16;
        }
        else
        {
          int64_t v18 = v16 + 1;
          if (v16 + 1 >= v11) {
            break;
          }
          unint64_t i = *(void *)(v6 + 8 * v16 + 8);
          if (!i)
          {
            int64_t v18 = v16 + 2;
            if (v16 + 2 >= v11) {
              break;
            }
            unint64_t i = *(void *)(v6 + 8 * v16 + 16);
            if (!i)
            {
              int64_t v18 = v16 + 3;
              if (v16 + 3 >= v11) {
                break;
              }
              for (unint64_t i = *(void *)(v6 + 8 * v16 + 24); !i; unint64_t i = *(void *)(v6 + 8 * v18))
              {
                BOOL v15 = __OFADD__(1, v18++);
                if (v15) {
                  BUG();
                }
                if (v18 >= v11) {
                  goto LABEL_26;
                }
              }
            }
          }
        }
        _BitScanForward64(&v19, i);
        unint64_t v10 = i & (i - 1);
        unint64_t v14 = v19 + (v18 << 6);
        int64_t v12 = v18;
      }
      uint64_t v20 = *(void *)(v2 + 48);
      uint64_t v21 = 16 * v14;
      uint64_t v22 = *(void *)(v20 + v21);
      LOBYTE(v20) = *(unsigned char *)(v20 + v21 + 8);
      uint64_t v23 = *(void *)(v4 + 48);
      *(void *)(v23 + v21) = v22;
      *(unsigned char *)(v23 + v21 + 8) = v20;
    }
  }
LABEL_26:
  uint64_t result = swift_release();
  *uint64_t v1 = v4;
  return result;
}

{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  int64_t v11;
  int64_t v12;
  unint64_t v13;
  unint64_t v14;
  BOOL v15;
  int64_t v16;
  unint64_t i;
  int64_t v18;
  unint64_t v19;
  uint64_t result;

  uint64_t v1 = v0;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _SetStorage<Int>);
  uint64_t v2 = *v0;
  uint64_t v3 = static _SetStorage.copy(original:)(*v0);
  uint64_t v4 = v3;
  if (*(void *)(v2 + 16))
  {
    unint64_t v5 = (void *)(v3 + 56);
    uint64_t v6 = v2 + 56;
    unint64_t v7 = (unint64_t)((1 << *(unsigned char *)(v3 + 32)) + 63) >> 6;
    if (v3 != v2 || (unint64_t)v5 >= v2 + 8 * v7 + 56) {
      memmove(v5, (const void *)(v2 + 56), 8 * v7);
    }
    *(void *)(v4 + 16) = *(void *)(v2 + 16);
    uint64_t v8 = 1 << *(unsigned char *)(v2 + 32);
    uint64_t v9 = ~(-1 << v8);
    if (v8 >= 64) {
      uint64_t v9 = -1;
    }
    unint64_t v10 = *(void *)(v2 + 56) & v9;
    int64_t v11 = (unint64_t)(v8 + 63) >> 6;
    int64_t v12 = 0;
    while (1)
    {
      if (v10)
      {
        _BitScanForward64(&v13, v10);
        v10 &= v10 - 1;
        unint64_t v14 = v13 | (v12 << 6);
      }
      else
      {
        BOOL v15 = __OFADD__(1, v12);
        int64_t v16 = v12 + 1;
        if (v15) {
          BUG();
        }
        if (v16 >= v11) {
          break;
        }
        unint64_t i = *(void *)(v6 + 8 * v16);
        if (i)
        {
          int64_t v18 = v16;
        }
        else
        {
          int64_t v18 = v16 + 1;
          if (v16 + 1 >= v11) {
            break;
          }
          unint64_t i = *(void *)(v6 + 8 * v16 + 8);
          if (!i)
          {
            int64_t v18 = v16 + 2;
            if (v16 + 2 >= v11) {
              break;
            }
            unint64_t i = *(void *)(v6 + 8 * v16 + 16);
            if (!i)
            {
              int64_t v18 = v16 + 3;
              if (v16 + 3 >= v11) {
                break;
              }
              for (unint64_t i = *(void *)(v6 + 8 * v16 + 24); !i; unint64_t i = *(void *)(v6 + 8 * v18))
              {
                BOOL v15 = __OFADD__(1, v18++);
                if (v15) {
                  BUG();
                }
                if (v18 >= v11) {
                  goto LABEL_26;
                }
              }
            }
          }
        }
        _BitScanForward64(&v19, i);
        unint64_t v10 = i & (i - 1);
        unint64_t v14 = v19 + (v18 << 6);
        int64_t v12 = v18;
      }
      *(void *)(*(void *)(v4 + 48) + 8 * v14) = *(void *)(*(void *)(v2 + 48) + 8 * v14);
    }
  }
LABEL_26:
  uint64_t result = swift_release();
  *uint64_t v1 = v4;
  return result;
}

{
  uint64_t *v0;
  uint64_t *v1;
  int64_t v2;
  void *v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  char v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  int64_t v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;
  BOOL v22;
  int64_t v23;
  unint64_t i;
  int64_t v25;
  unint64_t v26;
  unint64_t v27;
  uint64_t result;
  uint64_t v29;
  uint64_t *v30;
  uint64_t v31;
  int64_t v32;
  uint64_t v33;
  int64_t v34;
  uint64_t *v35;
  uint64_t v36;
  void *__src;

  uint64_t v1 = v0;
  uint64_t v29 = type metadata accessor for URL(0);
  uint64_t v31 = *(void *)(v29 - 8);
  uint64_t v2 = *(void *)(v31 + 64);
  uint64_t v3 = alloca(v2);
  uint64_t v4 = alloca(v2);
  uint64_t v30 = &v29;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _SetStorage<URL>);
  unint64_t v5 = *v0;
  uint64_t v6 = static _SetStorage.copy(original:)(*v0);
  unint64_t v7 = v6;
  if (!*(void *)(v5 + 16))
  {
    uint64_t result = swift_release();
    goto LABEL_28;
  }
  uint64_t v35 = v0;
  uint64_t v8 = (void *)(v6 + 56);
  uint64_t v9 = *(unsigned char *)(v6 + 32);
  __src = (void *)(v5 + 56);
  unint64_t v10 = (unint64_t)((1 << v9) + 63) >> 6;
  if (v6 != v5 || (unint64_t)v8 >= v5 + 8 * v10 + 56) {
    memmove(v8, __src, 8 * v10);
  }
  int64_t v11 = *(void *)(v5 + 16);
  uint64_t v36 = v7;
  *(void *)(v7 + 16) = v11;
  int64_t v12 = 1 << *(unsigned char *)(v5 + 32);
  unint64_t v13 = ~(-1 << v12);
  if (v12 >= 64) {
    unint64_t v13 = -1;
  }
  Swift::UInt v33 = v5;
  unint64_t v14 = *(void *)(v5 + 56) & v13;
  uint64_t v34 = (unint64_t)(v12 + 63) >> 6;
  BOOL v15 = 0;
  int64_t v16 = v31;
  unint64_t v17 = v30;
  int64_t v18 = v29;
  while (1)
  {
    if (v14)
    {
      _BitScanForward64(&v19, v14);
      v14 &= v14 - 1;
      uint64_t v32 = v15;
      uint64_t v20 = v19 | (v15 << 6);
      uint64_t v21 = v33;
      goto LABEL_19;
    }
    uint64_t v22 = __OFADD__(1, v15);
    uint64_t v23 = v15 + 1;
    uint64_t v21 = v33;
    if (v22) {
      BUG();
    }
    if (v23 >= v34) {
      break;
    }
    unint64_t i = *((void *)__src + v23);
    if (i)
    {
      uint64_t v25 = v23;
    }
    else
    {
      uint64_t v25 = v23 + 1;
      if (v23 + 1 >= v34) {
        break;
      }
      unint64_t i = *((void *)__src + v23 + 1);
      if (!i)
      {
        uint64_t v25 = v23 + 2;
        if (v23 + 2 >= v34) {
          break;
        }
        unint64_t i = *((void *)__src + v23 + 2);
        if (!i)
        {
          uint64_t v25 = v23 + 3;
          if (v23 + 3 >= v34) {
            break;
          }
          for (unint64_t i = *((void *)__src + v23 + 3); !i; unint64_t i = *((void *)__src + v25))
          {
            uint64_t v22 = __OFADD__(1, v25++);
            if (v22) {
              BUG();
            }
            if (v25 >= v34) {
              goto LABEL_26;
            }
          }
        }
      }
    }
    _BitScanForward64(&v26, i);
    unint64_t v14 = i & (i - 1);
    uint64_t v20 = v26 + (v25 << 6);
    uint64_t v32 = v25;
LABEL_19:
    BOOL v27 = *(void *)(v16 + 72) * v20;
    (*(void (**)(uint64_t *, unint64_t, uint64_t))(v16 + 16))(v17, v27 + *(void *)(v21 + 48), v18);
    (*(void (**)(unint64_t, uint64_t *, uint64_t))(v16 + 32))(*(void *)(v36 + 48) + v27, v17, v18);
    BOOL v15 = v32;
  }
LABEL_26:
  uint64_t result = swift_release();
  uint64_t v1 = v35;
  unint64_t v7 = v36;
LABEL_28:
  *uint64_t v1 = v7;
  return result;
}

uint64_t *specialized _NativeSet.copyAndResize(capacity:)(uint64_t a1)
{
  int64_t v40 = v1;
  uint64_t v2 = *v1;
  uint64_t v3 = *(void *)(*v1 + 24);
  if (v3 <= a1) {
    uint64_t v3 = a1;
  }
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _SetStorage<String>);
  uint64_t v4 = static _SetStorage.resize(original:capacity:move:)(v2, v3, 0);
  if (!*(void *)(v2 + 16))
  {
    swift_release(v2);
    goto LABEL_36;
  }
  uint64_t v5 = 1 << *(unsigned char *)(v2 + 32);
  uint64_t v6 = ~(-1 << v5);
  if (v5 >= 64) {
    uint64_t v6 = -1;
  }
  unint64_t v7 = *(void *)(v2 + 56) & v6;
  int64_t v37 = (unint64_t)(v5 + 63) >> 6;
  swift_retain_n(v2, 2);
  int64_t v8 = 0;
  uint64_t v36 = v2;
  while (1)
  {
    if (v7)
    {
      _BitScanForward64(&v9, v7);
      uint64_t v39 = (v7 - 1) & v7;
      unint64_t v10 = v9 | (v8 << 6);
      int64_t v11 = v8;
      goto LABEL_16;
    }
    BOOL v12 = __OFADD__(1, v8);
    int64_t v13 = v8 + 1;
    if (v12) {
      BUG();
    }
    if (v13 >= v37) {
      break;
    }
    unint64_t i = *(void *)(v2 + 8 * v13 + 56);
    if (i)
    {
      int64_t v11 = v13;
    }
    else
    {
      int64_t v11 = v13 + 1;
      if (v13 + 1 >= v37) {
        break;
      }
      unint64_t i = *(void *)(v2 + 8 * v13 + 64);
      if (!i)
      {
        int64_t v11 = v13 + 2;
        if (v13 + 2 >= v37) {
          break;
        }
        for (unint64_t i = *(void *)(v2 + 8 * v13 + 72); !i; unint64_t i = *(void *)(v2 + 8 * v11 + 56))
        {
          BOOL v12 = __OFADD__(1, v11++);
          if (v12) {
            BUG();
          }
          if (v11 >= v37) {
            goto LABEL_34;
          }
        }
      }
    }
    _BitScanForward64(&v15, i);
    uint64_t v39 = i & (i - 1);
    unint64_t v10 = v15 + (v11 << 6);
LABEL_16:
    uint64_t v16 = *(void *)(v2 + 48);
    uint64_t v17 = 16 * v10;
    uint64_t v18 = *(void *)(v16 + v17);
    uint64_t v19 = *(void *)(v16 + v17 + 8);
    Hasher.init(_seed:)(*(void *)(v4 + 40));
    swift_bridgeObjectRetain(v19);
    uint64_t v38 = v18;
    String.hash(into:)(v35, v18);
    unint64_t v20 = Hasher._finalize()() & ~(-1 << *(unsigned char *)(v4 + 32));
    unint64_t v21 = v20 >> 6;
    unint64_t v22 = ~*(void *)(v4 + 8 * (v20 >> 6) + 56) >> v20 << v20;
    if (v22)
    {
      _BitScanForward64(&v23, v22);
      unint64_t v24 = v23 | v20 & 0xFFFFFFFFFFFFFFC0;
    }
    else
    {
      unint64_t v25 = (unint64_t)(63 - (-1 << *(unsigned char *)(v4 + 32))) >> 6;
      char v26 = 0;
      do
      {
        unint64_t v27 = v21 + 1;
        if (v21 + 1 == v25 && (v26 & 1) != 0) {
          BUG();
        }
        unint64_t v21 = 0;
        if (v27 != v25) {
          unint64_t v21 = v27;
        }
        v26 |= v27 == v25;
        uint64_t v28 = *(void *)(v4 + 8 * v21 + 56);
      }
      while (v28 == -1);
      unint64_t v29 = ~v28;
      uint64_t v30 = 64;
      if (v29) {
        _BitScanForward64((unint64_t *)&v30, v29);
      }
      unint64_t v24 = v30 + (v21 << 6);
    }
    uint64_t v31 = v38;
    *(void *)(v4 + 8 * (v24 >> 6) + 56) |= 1 << v24;
    uint64_t v32 = *(void *)(v4 + 48);
    uint64_t v33 = 16 * v24;
    *(void *)(v32 + v33) = v31;
    *(void *)(v32 + v33 + 8) = v19;
    ++*(void *)(v4 + 16);
    int64_t v8 = v11;
    uint64_t v2 = v36;
    unint64_t v7 = v39;
  }
LABEL_34:
  swift_release_n(v2, 3);
LABEL_36:
  uint64_t result = v40;
  *int64_t v40 = v4;
  return result;
}

{
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  int64_t v8;
  unint64_t v9;
  unint64_t v10;
  BOOL v11;
  int64_t v12;
  unint64_t j;
  int64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  Swift::UInt v18;
  char v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t v25;
  char v26;
  unint64_t v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t *result;
  uint64_t i;
  int64_t v35;
  int64_t v36;

  uint64_t v2 = *v1;
  uint64_t v3 = *(void *)(*v1 + 24);
  if (v3 <= a1) {
    uint64_t v3 = a1;
  }
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _SetStorage<Int?>);
  uint64_t v4 = static _SetStorage.resize(original:capacity:move:)(v2, v3, 0);
  if (*(void *)(v2 + 16))
  {
    uint64_t v5 = 1 << *(unsigned char *)(v2 + 32);
    uint64_t v6 = ~(-1 << v5);
    if (v5 >= 64) {
      uint64_t v6 = -1;
    }
    unint64_t v7 = *(void *)(v2 + 56) & v6;
    uint64_t v36 = (unint64_t)(v5 + 63) >> 6;
    int64_t v8 = 0;
    for (i = v2; ; uint64_t v2 = i)
    {
      if (v7)
      {
        _BitScanForward64(&v9, v7);
        v7 &= v7 - 1;
        unint64_t v10 = v9 | (v8 << 6);
        uint64_t v35 = v8;
      }
      else
      {
        int64_t v11 = __OFADD__(1, v8);
        BOOL v12 = v8 + 1;
        if (v11) {
          BUG();
        }
        if (v12 >= v36) {
          break;
        }
        unint64_t j = *(void *)(v2 + 8 * v12 + 56);
        if (j)
        {
          unint64_t v14 = v12;
        }
        else
        {
          unint64_t v14 = v12 + 1;
          if (v12 + 1 >= v36) {
            break;
          }
          unint64_t j = *(void *)(v2 + 8 * v12 + 64);
          if (!j)
          {
            unint64_t v14 = v12 + 2;
            if (v12 + 2 >= v36) {
              break;
            }
            unint64_t j = *(void *)(v2 + 8 * v12 + 72);
            if (!j)
            {
              unint64_t v14 = v12 + 3;
              if (v12 + 3 >= v36) {
                break;
              }
              for (unint64_t j = *(void *)(v2 + 8 * v12 + 80); !j; unint64_t j = *(void *)(v2 + 8 * v14 + 56))
              {
                int64_t v11 = __OFADD__(1, v14++);
                if (v11) {
                  BUG();
                }
                if (v14 >= v36) {
                  goto LABEL_39;
                }
              }
            }
          }
        }
        _BitScanForward64(&v15, j);
        unint64_t v7 = j & (j - 1);
        uint64_t v35 = v14;
        unint64_t v10 = v15 + (v14 << 6);
      }
      uint64_t v16 = *(void *)(v2 + 48);
      uint64_t v17 = 16 * v10;
      uint64_t v18 = *(void *)(v16 + v17);
      uint64_t v19 = *(unsigned char *)(v16 + v17 + 8);
      Hasher.init(_seed:)(*(void *)(v4 + 40));
      if (v19 == 1)
      {
        Hasher._combine(_:)(0);
      }
      else
      {
        Hasher._combine(_:)(1u);
        Hasher._combine(_:)(v18);
      }
      unint64_t v20 = Hasher._finalize()() & ~(-1 << *(unsigned char *)(v4 + 32));
      unint64_t v21 = v20 >> 6;
      unint64_t v22 = ~*(void *)(v4 + 8 * (v20 >> 6) + 56) >> v20 << v20;
      if (v22)
      {
        _BitScanForward64(&v23, v22);
        unint64_t v24 = v23 | v20 & 0xFFFFFFFFFFFFFFC0;
      }
      else
      {
        unint64_t v25 = (unint64_t)(63 - (-1 << *(unsigned char *)(v4 + 32))) >> 6;
        char v26 = 0;
        do
        {
          unint64_t v27 = v21 + 1;
          if (v21 + 1 == v25 && (v26 & 1) != 0) {
            BUG();
          }
          unint64_t v21 = 0;
          if (v27 != v25) {
            unint64_t v21 = v27;
          }
          v26 |= v27 == v25;
          uint64_t v28 = *(void *)(v4 + 8 * v21 + 56);
        }
        while (v28 == -1);
        unint64_t v29 = ~v28;
        uint64_t v30 = 64;
        if (v29) {
          _BitScanForward64((unint64_t *)&v30, v29);
        }
        unint64_t v24 = v30 + (v21 << 6);
      }
      *(void *)(v4 + 8 * (v24 >> 6) + 56) |= 1 << v24;
      uint64_t v31 = *(void *)(v4 + 48);
      uint64_t v32 = 16 * v24;
      *(void *)(v31 + v32) = v18;
      *(unsigned char *)(v31 + v32 + 8) = v19;
      ++*(void *)(v4 + 16);
      int64_t v8 = v35;
    }
  }
LABEL_39:
  swift_release();
  uint64_t result = v1;
  *uint64_t v1 = v4;
  return result;
}

{
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  int64_t i;
  unint64_t v9;
  unint64_t v10;
  int64_t v11;
  BOOL v12;
  int64_t v13;
  unint64_t j;
  unint64_t v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  char v23;
  unint64_t v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t *result;
  int64_t v29;
  uint64_t *v30;

  uint64_t v30 = v1;
  uint64_t v2 = *v1;
  uint64_t v3 = *(void *)(*v1 + 24);
  if (v3 <= a1) {
    uint64_t v3 = a1;
  }
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _SetStorage<Int>);
  uint64_t v4 = static _SetStorage.resize(original:capacity:move:)(v2, v3, 0);
  if (*(void *)(v2 + 16))
  {
    uint64_t v5 = 1 << *(unsigned char *)(v2 + 32);
    uint64_t v6 = ~(-1 << v5);
    if (v5 >= 64) {
      uint64_t v6 = -1;
    }
    unint64_t v7 = *(void *)(v2 + 56) & v6;
    unint64_t v29 = (unint64_t)(v5 + 63) >> 6;
    for (unint64_t i = 0; ; unint64_t i = v11)
    {
      if (v7)
      {
        _BitScanForward64(&v9, v7);
        v7 &= v7 - 1;
        unint64_t v10 = v9 | (i << 6);
        int64_t v11 = i;
      }
      else
      {
        BOOL v12 = __OFADD__(1, i);
        int64_t v13 = i + 1;
        if (v12) {
          BUG();
        }
        if (v13 >= v29) {
          break;
        }
        unint64_t j = *(void *)(v2 + 8 * v13 + 56);
        if (j)
        {
          int64_t v11 = v13;
        }
        else
        {
          int64_t v11 = v13 + 1;
          if (v13 + 1 >= v29) {
            break;
          }
          unint64_t j = *(void *)(v2 + 8 * v13 + 64);
          if (!j)
          {
            int64_t v11 = v13 + 2;
            if (v13 + 2 >= v29) {
              break;
            }
            unint64_t j = *(void *)(v2 + 8 * v13 + 72);
            if (!j)
            {
              int64_t v11 = v13 + 3;
              if (v13 + 3 >= v29) {
                break;
              }
              for (unint64_t j = *(void *)(v2 + 8 * v13 + 80); !j; unint64_t j = *(void *)(v2 + 8 * v11 + 56))
              {
                BOOL v12 = __OFADD__(1, v11++);
                if (v12) {
                  BUG();
                }
                if (v11 >= v29) {
                  goto LABEL_36;
                }
              }
            }
          }
        }
        _BitScanForward64(&v15, j);
        unint64_t v7 = j & (j - 1);
        unint64_t v10 = v15 + (v11 << 6);
      }
      uint64_t v16 = *(void *)(*(void *)(v2 + 48) + 8 * v10);
      uint64_t v17 = static Hasher._hash(seed:_:)(*(void *)(v4 + 40), v16) & ~(-1 << *(unsigned char *)(v4 + 32));
      uint64_t v18 = v17 >> 6;
      uint64_t v19 = ~*(void *)(v4 + 8 * (v17 >> 6) + 56) >> v17 << v17;
      if (v19)
      {
        _BitScanForward64(&v20, v19);
        unint64_t v21 = v20 | v17 & 0xFFFFFFFFFFFFFFC0;
      }
      else
      {
        unint64_t v22 = (unint64_t)(63 - (-1 << *(unsigned char *)(v4 + 32))) >> 6;
        unint64_t v23 = 0;
        do
        {
          unint64_t v24 = v18 + 1;
          if (v18 + 1 == v22 && (v23 & 1) != 0) {
            BUG();
          }
          uint64_t v18 = 0;
          if (v24 != v22) {
            uint64_t v18 = v24;
          }
          v23 |= v24 == v22;
          unint64_t v25 = *(void *)(v4 + 8 * v18 + 56);
        }
        while (v25 == -1);
        char v26 = ~v25;
        unint64_t v27 = 64;
        if (v26) {
          _BitScanForward64((unint64_t *)&v27, v26);
        }
        unint64_t v21 = v27 + (v18 << 6);
      }
      *(void *)(v4 + 8 * (v21 >> 6) + 56) |= 1 << v21;
      *(void *)(*(void *)(v4 + 48) + 8 * v21) = v16;
      ++*(void *)(v4 + 16);
    }
  }
LABEL_36:
  swift_release();
  uint64_t result = v30;
  *uint64_t v30 = v4;
  return result;
}

{
  uint64_t *v1;
  uint64_t v2;
  int64_t v3;
  void *v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  int64_t v12;
  unint64_t v13;
  unint64_t v14;
  BOOL v15;
  int64_t v16;
  unint64_t i;
  int64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t v26;
  unint64_t v27;
  unint64_t v28;
  unint64_t v29;
  char v30;
  unint64_t v31;
  uint64_t v32;
  unint64_t v33;
  uint64_t v34;
  uint64_t *result;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t *v39;
  int64_t v40;
  uint64_t v41;
  uint64_t v42;
  int64_t v43;
  uint64_t *v44;

  uint64_t v2 = a1;
  int64_t v37 = type metadata accessor for URL(0);
  uint64_t v38 = *(void *)(v37 - 8);
  uint64_t v3 = *(void *)(v38 + 64);
  uint64_t v4 = alloca(v3);
  uint64_t v5 = alloca(v3);
  uint64_t v39 = &v36;
  uint64_t v44 = v1;
  uint64_t v6 = *v1;
  if (*(void *)(*v1 + 24) > a1) {
    uint64_t v2 = *(void *)(*v1 + 24);
  }
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _SetStorage<URL>);
  unint64_t v7 = v6;
  int64_t v8 = static _SetStorage.resize(original:capacity:move:)(v6, v2, 0);
  if (!*(void *)(v6 + 16))
  {
    swift_release();
    goto LABEL_38;
  }
  unint64_t v9 = 1 << *(unsigned char *)(v6 + 32);
  unint64_t v10 = ~(-1 << v9);
  if (v9 >= 64) {
    unint64_t v10 = -1;
  }
  int64_t v11 = *(void *)(v7 + 56) & v10;
  uint64_t v43 = (unint64_t)(v9 + 63) >> 6;
  swift_retain();
  BOOL v12 = 0;
  uint64_t v42 = v7;
  while (1)
  {
    if (v11)
    {
      _BitScanForward64(&v13, v11);
      uint64_t v41 = (v11 - 1) & v11;
      unint64_t v14 = v13 | (v12 << 6);
      int64_t v40 = v12;
      goto LABEL_18;
    }
    unint64_t v15 = __OFADD__(1, v12);
    uint64_t v16 = v12 + 1;
    if (v15) {
      BUG();
    }
    if (v16 >= v43) {
      break;
    }
    unint64_t i = *(void *)(v7 + 8 * v16 + 56);
    if (i)
    {
      uint64_t v18 = v16;
    }
    else
    {
      uint64_t v18 = v16 + 1;
      if (v16 + 1 >= v43) {
        break;
      }
      unint64_t i = *(void *)(v7 + 8 * v16 + 64);
      if (!i)
      {
        uint64_t v18 = v16 + 2;
        if (v16 + 2 >= v43) {
          break;
        }
        unint64_t i = *(void *)(v7 + 8 * v16 + 72);
        if (!i)
        {
          uint64_t v18 = v16 + 3;
          if (v16 + 3 >= v43) {
            break;
          }
          for (unint64_t i = *(void *)(v7 + 8 * v16 + 80); !i; unint64_t i = *(void *)(v7 + 8 * v18 + 56))
          {
            unint64_t v15 = __OFADD__(1, v18++);
            if (v15) {
              BUG();
            }
            if (v18 >= v43) {
              goto LABEL_36;
            }
          }
        }
      }
    }
    _BitScanForward64(&v19, i);
    uint64_t v41 = i & (i - 1);
    int64_t v40 = v18;
    unint64_t v14 = v19 + (v18 << 6);
LABEL_18:
    unint64_t v20 = *(void *)(v38 + 72);
    unint64_t v21 = v37;
    (*(void (**)(uint64_t *, unint64_t, uint64_t))(v38 + 16))(v39, *(void *)(v7 + 48) + v20 * v14, v37);
    unint64_t v22 = *(void *)(v8 + 40);
    unint64_t v23 = lazy protocol witness table accessor for type TreeRegressorModel and conformance TreeRegressorModel(&lazy protocol witness table cache variable for type URL and conformance URL, (uint64_t (*)(uint64_t))&type metadata accessor for URL, (uint64_t)&protocol conformance descriptor for URL);
    unint64_t v24 = dispatch thunk of Hashable._rawHashValue(seed:)(v22, v21, v23) & ~(-1 << *(unsigned char *)(v8 + 32));
    unint64_t v25 = v24 >> 6;
    char v26 = ~*(void *)(v8 + 8 * (v24 >> 6) + 56) >> v24 << v24;
    if (v26)
    {
      _BitScanForward64(&v27, v26);
      uint64_t v28 = v27 | v24 & 0xFFFFFFFFFFFFFFC0;
      unint64_t v7 = v42;
    }
    else
    {
      unint64_t v29 = (unint64_t)(63 - (-1 << *(unsigned char *)(v8 + 32))) >> 6;
      uint64_t v30 = 0;
      unint64_t v7 = v42;
      do
      {
        uint64_t v31 = v25 + 1;
        if (v25 + 1 == v29 && (v30 & 1) != 0) {
          BUG();
        }
        unint64_t v25 = 0;
        if (v31 != v29) {
          unint64_t v25 = v31;
        }
        v30 |= v31 == v29;
        uint64_t v32 = *(void *)(v8 + 8 * v25 + 56);
      }
      while (v32 == -1);
      uint64_t v33 = ~v32;
      uint64_t v34 = 64;
      if (v33) {
        _BitScanForward64((unint64_t *)&v34, v33);
      }
      uint64_t v28 = v34 + (v25 << 6);
    }
    *(void *)(v8 + 8 * (v28 >> 6) + 56) |= 1 << v28;
    (*(void (**)(unint64_t, uint64_t *, uint64_t))(v38 + 32))(*(void *)(v8 + 48) + v28 * v20, v39, v37);
    ++*(void *)(v8 + 16);
    BOOL v12 = v40;
    int64_t v11 = v41;
  }
LABEL_36:
  swift_release_n(v7);
LABEL_38:
  uint64_t result = v44;
  void *v44 = v8;
  return result;
}

{
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  int64_t v8;
  unint64_t v9;
  unint64_t v10;
  BOOL v11;
  int64_t v12;
  unint64_t i;
  int64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  Swift::UInt v18;
  uint64_t v19;
  char v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t v26;
  char v27;
  unint64_t v28;
  uint64_t v29;
  unint64_t v30;
  uint64_t v31;
  int64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t *result;
  char v36[72];
  uint64_t v37;
  uint64_t v38;
  int64_t v39;
  int64_t v40;
  uint64_t *v41;
  char v42;

  uint64_t v41 = v1;
  uint64_t v2 = *v1;
  uint64_t v3 = *(void *)(*v1 + 24);
  if (v3 <= a1) {
    uint64_t v3 = a1;
  }
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _SetStorage<MLRecommender.Identifier>);
  uint64_t v4 = static _SetStorage.resize(original:capacity:move:)(v2, v3, 0);
  if (!*(void *)(v2 + 16))
  {
    swift_release();
    goto LABEL_41;
  }
  uint64_t v5 = 1 << *(unsigned char *)(v2 + 32);
  uint64_t v6 = ~(-1 << v5);
  if (v5 >= 64) {
    uint64_t v6 = -1;
  }
  unint64_t v7 = *(void *)(v2 + 56) & v6;
  int64_t v40 = (unint64_t)(v5 + 63) >> 6;
  swift_retain();
  int64_t v8 = 0;
  int64_t v37 = v2;
  while (1)
  {
    if (v7)
    {
      _BitScanForward64(&v9, v7);
      uint64_t v38 = (v7 - 1) & v7;
      unint64_t v10 = v9 | (v8 << 6);
      uint64_t v39 = v8;
      goto LABEL_18;
    }
    int64_t v11 = __OFADD__(1, v8);
    BOOL v12 = v8 + 1;
    if (v11) {
      BUG();
    }
    if (v12 >= v40) {
      break;
    }
    unint64_t i = *(void *)(v2 + 8 * v12 + 56);
    if (i)
    {
      unint64_t v14 = v12;
    }
    else
    {
      unint64_t v14 = v12 + 1;
      if (v12 + 1 >= v40) {
        break;
      }
      unint64_t i = *(void *)(v2 + 8 * v12 + 64);
      if (!i)
      {
        unint64_t v14 = v12 + 2;
        if (v12 + 2 >= v40) {
          break;
        }
        unint64_t i = *(void *)(v2 + 8 * v12 + 72);
        if (!i)
        {
          unint64_t v14 = v12 + 3;
          if (v12 + 3 >= v40) {
            break;
          }
          for (unint64_t i = *(void *)(v2 + 8 * v12 + 80); !i; unint64_t i = *(void *)(v2 + 8 * v14 + 56))
          {
            int64_t v11 = __OFADD__(1, v14++);
            if (v11) {
              BUG();
            }
            if (v14 >= v40) {
              goto LABEL_39;
            }
          }
        }
      }
    }
    _BitScanForward64(&v15, i);
    uint64_t v38 = i & (i - 1);
    uint64_t v39 = v14;
    unint64_t v10 = v15 + (v14 << 6);
LABEL_18:
    uint64_t v16 = *(void *)(v2 + 48);
    uint64_t v17 = 24 * v10;
    uint64_t v18 = *(void *)(v16 + v17);
    uint64_t v19 = *(void *)(v16 + v17 + 8);
    unint64_t v20 = *(unsigned char *)(v16 + v17 + 16);
    Hasher.init(_seed:)(*(void *)(v4 + 40));
    uint64_t v42 = v20;
    if (v20)
    {
      Hasher._combine(_:)(1uLL);
      Hasher._combine(_:)(v18);
    }
    else
    {
      Hasher._combine(_:)(0);
      swift_bridgeObjectRetain(v19);
      String.hash(into:)(v36, v18);
    }
    unint64_t v21 = Hasher._finalize()() & ~(-1 << *(unsigned char *)(v4 + 32));
    unint64_t v22 = v21 >> 6;
    unint64_t v23 = ~*(void *)(v4 + 8 * (v21 >> 6) + 56) >> v21 << v21;
    if (v23)
    {
      _BitScanForward64(&v24, v23);
      unint64_t v25 = v24 | v21 & 0xFFFFFFFFFFFFFFC0;
    }
    else
    {
      char v26 = (unint64_t)(63 - (-1 << *(unsigned char *)(v4 + 32))) >> 6;
      unint64_t v27 = 0;
      do
      {
        uint64_t v28 = v22 + 1;
        if (v22 + 1 == v26 && (v27 & 1) != 0) {
          BUG();
        }
        unint64_t v22 = 0;
        if (v28 != v26) {
          unint64_t v22 = v28;
        }
        v27 |= v28 == v26;
        unint64_t v29 = *(void *)(v4 + 8 * v22 + 56);
      }
      while (v29 == -1);
      uint64_t v30 = ~v29;
      uint64_t v31 = 64;
      if (v30) {
        _BitScanForward64((unint64_t *)&v31, v30);
      }
      unint64_t v25 = v31 + (v22 << 6);
    }
    uint64_t v32 = v39;
    uint64_t v33 = 24 * v25;
    *(void *)(v4 + 8 * (v25 >> 6) + 56) |= 1 << v25;
    uint64_t v34 = *(void *)(v4 + 48);
    *(void *)(v34 + v33) = v18;
    *(void *)(v34 + v33 + 8) = v19;
    *(unsigned char *)(v34 + v33 + 16) = v42;
    ++*(void *)(v4 + 16);
    int64_t v8 = v32;
    uint64_t v2 = v37;
    unint64_t v7 = v38;
  }
LABEL_39:
  swift_release_n(v2);
LABEL_41:
  uint64_t result = v41;
  uint64_t *v41 = v4;
  return result;
}

{
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  int64_t v8;
  unint64_t v9;
  unint64_t v10;
  BOOL v11;
  int64_t v12;
  unint64_t i;
  int64_t v14;
  unint64_t v15;
  void *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  id v21;
  Swift::Int v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t v26;
  unint64_t v27;
  unint64_t v28;
  char v29;
  unint64_t v30;
  uint64_t v31;
  unint64_t v32;
  uint64_t v33;
  int64_t v34;
  uint64_t *result;
  char v36[72];
  uint64_t v37;
  uint64_t v38;
  int64_t v39;
  int64_t v40;
  uint64_t *v41;

  uint64_t v41 = v1;
  uint64_t v2 = *v1;
  uint64_t v3 = *(void *)(*v1 + 24);
  if (v3 <= a1) {
    uint64_t v3 = a1;
  }
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _SetStorage<NSURLResourceKey>);
  uint64_t v4 = static _SetStorage.resize(original:capacity:move:)(v2, v3, 0);
  if (!*(void *)(v2 + 16))
  {
    swift_release(v2);
    goto LABEL_38;
  }
  uint64_t v5 = 1 << *(unsigned char *)(v2 + 32);
  uint64_t v6 = ~(-1 << v5);
  if (v5 >= 64) {
    uint64_t v6 = -1;
  }
  unint64_t v7 = *(void *)(v2 + 56) & v6;
  int64_t v40 = (unint64_t)(v5 + 63) >> 6;
  swift_retain(v2);
  int64_t v8 = 0;
  uint64_t v38 = v2;
  while (1)
  {
    if (v7)
    {
      _BitScanForward64(&v9, v7);
      int64_t v37 = (v7 - 1) & v7;
      unint64_t v10 = v9 | (v8 << 6);
      uint64_t v39 = v8;
      goto LABEL_18;
    }
    int64_t v11 = __OFADD__(1, v8);
    BOOL v12 = v8 + 1;
    if (v11) {
      BUG();
    }
    if (v12 >= v40) {
      break;
    }
    unint64_t i = *(void *)(v2 + 8 * v12 + 56);
    if (i)
    {
      unint64_t v14 = v12;
    }
    else
    {
      unint64_t v14 = v12 + 1;
      if (v12 + 1 >= v40) {
        break;
      }
      unint64_t i = *(void *)(v2 + 8 * v12 + 64);
      if (!i)
      {
        unint64_t v14 = v12 + 2;
        if (v12 + 2 >= v40) {
          break;
        }
        unint64_t i = *(void *)(v2 + 8 * v12 + 72);
        if (!i)
        {
          unint64_t v14 = v12 + 3;
          if (v12 + 3 >= v40) {
            break;
          }
          for (unint64_t i = *(void *)(v2 + 8 * v12 + 80); !i; unint64_t i = *(void *)(v2 + 8 * v14 + 56))
          {
            int64_t v11 = __OFADD__(1, v14++);
            if (v11) {
              BUG();
            }
            if (v14 >= v40) {
              goto LABEL_36;
            }
          }
        }
      }
    }
    _BitScanForward64(&v15, i);
    int64_t v37 = i & (i - 1);
    uint64_t v39 = v14;
    unint64_t v10 = v15 + (v14 << 6);
LABEL_18:
    uint64_t v16 = *(void **)(*(void *)(v2 + 48) + 8 * v10);
    uint64_t v17 = *(void *)(v4 + 40);
    uint64_t v18 = static String._unconditionallyBridgeFromObjectiveC(_:)(v16);
    unint64_t v20 = v19;
    Hasher.init(_seed:)(v17);
    unint64_t v21 = v16;
    String.hash(into:)(v36, v18);
    unint64_t v22 = Hasher._finalize()();
    swift_bridgeObjectRelease(v20);
    unint64_t v23 = v22 & ~(-1 << *(unsigned char *)(v4 + 32));
    unint64_t v24 = v23 >> 6;
    unint64_t v25 = ~*(void *)(v4 + 8 * (v23 >> 6) + 56) >> v23 << v23;
    if (v25)
    {
      _BitScanForward64(&v26, v25);
      unint64_t v27 = v26 | v23 & 0xFFFFFFFFFFFFFFC0;
      uint64_t v2 = v38;
    }
    else
    {
      uint64_t v28 = (unint64_t)(63 - (-1 << *(unsigned char *)(v4 + 32))) >> 6;
      unint64_t v29 = 0;
      uint64_t v2 = v38;
      do
      {
        uint64_t v30 = v24 + 1;
        if (v24 + 1 == v28 && (v29 & 1) != 0) {
          BUG();
        }
        unint64_t v24 = 0;
        if (v30 != v28) {
          unint64_t v24 = v30;
        }
        v29 |= v30 == v28;
        uint64_t v31 = *(void *)(v4 + 8 * v24 + 56);
      }
      while (v31 == -1);
      uint64_t v32 = ~v31;
      uint64_t v33 = 64;
      if (v32) {
        _BitScanForward64((unint64_t *)&v33, v32);
      }
      unint64_t v27 = v33 + (v24 << 6);
    }
    uint64_t v34 = v39;
    *(void *)(v4 + 8 * (v27 >> 6) + 56) |= 1 << v27;
    *(void *)(*(void *)(v4 + 48) + 8 * v27) = v21;
    ++*(void *)(v4 + 16);
    int64_t v8 = v34;
    unint64_t v7 = v37;
  }
LABEL_36:
  swift_release_n(v2, 2);
LABEL_38:
  uint64_t result = v41;
  uint64_t *v41 = v4;
  return result;
}

uint64_t specialized _NativeSet.copyAndResize(capacity:)(uint64_t a1)
{
  uint64_t v2 = v1;
  uint64_t v3 = *v1;
  uint64_t v4 = *(void *)(*v1 + 24);
  if (v4 <= a1) {
    uint64_t v4 = a1;
  }
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _SetStorage<String?>);
  uint64_t v22 = static _SetStorage.resize(original:capacity:move:)(v3, v4, 0);
  if (*(void *)(v3 + 16))
  {
    unint64_t v21 = v1;
    uint64_t v5 = 1 << *(unsigned char *)(v3 + 32);
    uint64_t v6 = ~(-1 << v5);
    if (v5 >= 64) {
      uint64_t v6 = -1;
    }
    unint64_t v7 = *(void *)(v3 + 56) & v6;
    int64_t v23 = (unint64_t)(v5 + 63) >> 6;
    swift_retain();
    int64_t v8 = 0;
    while (1)
    {
      if (v7)
      {
        _BitScanForward64(&v9, v7);
        v7 &= v7 - 1;
        unint64_t v10 = v9 | (v8 << 6);
      }
      else
      {
        BOOL v11 = __OFADD__(1, v8);
        int64_t v12 = v8 + 1;
        if (v11) {
          BUG();
        }
        if (v12 >= v23)
        {
LABEL_25:
          swift_release();
          uint64_t v2 = v21;
          break;
        }
        unint64_t i = *(void *)(v3 + 8 * v12 + 56);
        if (i)
        {
          int64_t v14 = v12;
        }
        else
        {
          int64_t v14 = v12 + 1;
          if (v12 + 1 >= v23) {
            goto LABEL_25;
          }
          unint64_t i = *(void *)(v3 + 8 * v12 + 64);
          if (!i)
          {
            int64_t v14 = v12 + 2;
            if (v12 + 2 >= v23) {
              goto LABEL_25;
            }
            unint64_t i = *(void *)(v3 + 8 * v12 + 72);
            if (!i)
            {
              int64_t v14 = v12 + 3;
              if (v12 + 3 >= v23) {
                goto LABEL_25;
              }
              for (unint64_t i = *(void *)(v3 + 8 * v12 + 80); !i; unint64_t i = *(void *)(v3 + 8 * v14 + 56))
              {
                BOOL v11 = __OFADD__(1, v14++);
                if (v11) {
                  BUG();
                }
                if (v14 >= v23) {
                  goto LABEL_25;
                }
              }
            }
          }
        }
        _BitScanForward64(&v15, i);
        unint64_t v7 = i & (i - 1);
        unint64_t v10 = v15 + (v14 << 6);
        int64_t v8 = v14;
      }
      uint64_t v16 = *(void *)(v3 + 48);
      uint64_t v17 = 16 * v10;
      uint64_t v18 = *(void *)(v16 + v17);
      uint64_t v19 = *(void *)(v16 + v17 + 8);
      swift_bridgeObjectRetain(v19);
      specialized _NativeSet._unsafeInsertNew(_:)(v18, v19, v22);
    }
  }
  swift_release();
  uint64_t result = v22;
  uint64_t *v2 = v22;
  return result;
}

void (*specialized DenseMatrix.subscript.modify(void *a1, unint64_t a2, unint64_t a3))(uint64_t a1)
{
  uint64_t v4 = malloc(0x60uLL);
  *a1 = v4;
  uint64_t v15 = (uint64_t)(v4 + 4);
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for DenseMatrix<Float>);
  if (DenseMatrix.layout.getter(v5))
  {
    unint64_t v11 = DenseMatrix.rowCount.getter(v5);
    unint64_t v13 = a3;
    unint64_t v12 = v11 * a3;
    if (!is_mul_ok(v11, v13)) {
      BUG();
    }
    BOOL v8 = __OFADD__(a2, v12);
    uint64_t v14 = a2 + v12;
    if (v8) {
      BUG();
    }
    void v4[10] = DenseMatrix.storage.modify(v4, v5);
    v4[11] = specialized ContiguousArray.subscript.modify(v15, v14);
    return DenseMatrix.subscript.modifyspecialized ;
  }
  else
  {
    unint64_t v6 = DenseMatrix.columnCount.getter(v5);
    unint64_t v7 = v6 * a2;
    if (!is_mul_ok(v6, a2)) {
      BUG();
    }
    BOOL v8 = __OFADD__(a3, v7);
    uint64_t v9 = a3 + v7;
    if (v8) {
      BUG();
    }
    void v4[8] = DenseMatrix.storage.modify(v4, v5);
    v4[9] = specialized ContiguousArray.subscript.modify(v15, v9);
    return DenseMatrix.subscript.modifyspecialized ;
  }
}

{
  void *v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  BOOL v8;
  uint64_t v9;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;

  uint64_t v4 = malloc(0x60uLL);
  *a1 = v4;
  uint64_t v15 = (uint64_t)(v4 + 4);
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for DenseMatrix<Double>);
  if (DenseMatrix.layout.getter(v5))
  {
    unint64_t v11 = DenseMatrix.rowCount.getter(v5);
    unint64_t v13 = a3;
    unint64_t v12 = v11 * a3;
    if (!is_mul_ok(v11, v13)) {
      BUG();
    }
    BOOL v8 = __OFADD__(a2, v12);
    uint64_t v14 = a2 + v12;
    if (v8) {
      BUG();
    }
    void v4[10] = DenseMatrix.storage.modify(v4, v5);
    v4[11] = specialized ContiguousArray.subscript.modify(v15, v14);
    return DenseMatrix.subscript.modifyspecialized ;
  }
  else
  {
    unint64_t v6 = DenseMatrix.columnCount.getter(v5);
    unint64_t v7 = v6 * a2;
    if (!is_mul_ok(v6, a2)) {
      BUG();
    }
    BOOL v8 = __OFADD__(a3, v7);
    uint64_t v9 = a3 + v7;
    if (v8) {
      BUG();
    }
    void v4[8] = DenseMatrix.storage.modify(v4, v5);
    v4[9] = specialized ContiguousArray.subscript.modify(v15, v9);
    return DenseMatrix.subscript.modifyspecialized ;
  }
}

void DenseMatrix.subscript.modifyspecialized (uint64_t a1)
{
}

{
  DenseMatrix.subscript.modifyspecialized (a1);
}

{
  void *v1;
  void (*v2)(void *, void);

  uint64_t v1 = *(void **)a1;
  uint64_t v2 = *(void (**)(void *, void))(*(void *)a1 + 64);
  (*(void (**)(uint64_t, void))(*(void *)a1 + 72))(*(void *)a1 + 32, 0);
  v2(v1, 0);
  free(v1);
}

{
  void *v1;
  void (*v2)(void *, void);

  uint64_t v1 = *(void **)a1;
  uint64_t v2 = *(void (**)(void *, void))(*(void *)a1 + 80);
  (*(void (**)(uint64_t, void))(*(void *)a1 + 88))(*(void *)a1 + 32, 0);
  v2(v1, 0);
  free(v1);
}

void (*specialized ContiguousArray.subscript.modify(uint64_t a1, uint64_t a2))()
{
  uint64_t v3 = (void *)*v2;
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v2);
  void *v2 = v3;
  if (!isUniquelyReferenced_nonNull_native)
  {
    uint64_t v3 = specialized _ContiguousArrayBuffer._consumeAndCreateNew()((uint64_t)v3);
    void *v2 = v3;
  }
  if (a2 < 0) {
    BUG();
  }
  if (v3[2] <= (unint64_t)a2) {
    BUG();
  }
  return MLBoostedTreeRegressor.ModelParameters.maxDepth.modify;
}

{
  char **v2;
  char *v3;
  char isUniquelyReferenced_nonNull_native;

  uint64_t v3 = *v2;
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v2);
  void *v2 = v3;
  if (!isUniquelyReferenced_nonNull_native)
  {
    uint64_t v3 = specialized _ContiguousArrayBuffer._consumeAndCreateNew()((uint64_t)v3);
    void *v2 = v3;
  }
  if (a2 < 0) {
    BUG();
  }
  if (*((void *)v3 + 2) <= (unint64_t)a2) {
    BUG();
  }
  return MLBoostedTreeRegressor.ModelParameters.maxDepth.modify;
}

double specialized BinaryFloatingPoint.init<A>(_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v89 = a1;
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness(0, a3, a2, &protocol requirements base descriptor for BinaryFloatingPoint, &associated type descriptor for BinaryFloatingPoint.RawSignificand);
  uint64_t v79 = *(void *)(AssociatedTypeWitness - 8);
  int64_t v4 = *(void *)(v79 + 64);
  uint64_t v5 = alloca(v4);
  unint64_t v6 = alloca(v4);
  uint64_t v81 = &v74;
  uint64_t v83 = swift_getAssociatedTypeWitness(0, a3, a2, &protocol requirements base descriptor for BinaryFloatingPoint, &associated type descriptor for BinaryFloatingPoint.RawExponent);
  uint64_t v82 = *(void *)(v83 - 8);
  int64_t v7 = *(void *)(v82 + 64);
  BOOL v8 = alloca(v7);
  uint64_t v9 = alloca(v7);
  uint64_t v84 = &v74;
  uint64_t v87 = *(void *)(a2 - 8);
  int64_t v10 = *(void *)(v87 + 64);
  unint64_t v11 = alloca(v10);
  unint64_t v12 = alloca(v10);
  *(void *)&long double v85 = &v74;
  unint64_t v13 = alloca(v10);
  uint64_t v14 = alloca(v10);
  uint64_t v75 = &v74;
  uint64_t v15 = alloca(v10);
  uint64_t v16 = alloca(v10);
  uint64_t v78 = &v74;
  uint64_t v17 = alloca(v10);
  uint64_t v18 = alloca(v10);
  uint64_t v76 = &v74;
  uint64_t v19 = alloca(v10);
  unint64_t v20 = alloca(v10);
  uint64_t v88 = &v74;
  unint64_t v21 = alloca(v10);
  uint64_t v22 = alloca(v10);
  uint64_t v23 = dispatch thunk of static BinaryFloatingPoint.exponentBitCount.getter(a2, a3);
  uint64_t v86 = a3;
  uint64_t v24 = dispatch thunk of static BinaryFloatingPoint.significandBitCount.getter(a2, a3);
  if (v23 != 15)
  {
    if (v23 == 11)
    {
      if (v24 == 52)
      {
        uint64_t v35 = v76;
        uint64_t v36 = v89;
        uint64_t v37 = v87;
        (*(void (**)(uint64_t *, uint64_t, uint64_t))(v87 + 16))(v76, v89, a2);
        LOBYTE(v35) = swift_dynamicCast(&v77, v35, a2, &type metadata for Double, 6);
        uint64_t v88 = *(uint64_t **)&v77;
        uint64_t v38 = v78;
        (*(void (**)(uint64_t *, uint64_t, uint64_t))(v37 + 32))(v78, v36, a2);
        if ((_BYTE)v35)
        {
          (*(void (**)(uint64_t *, uint64_t))(v37 + 8))(v38, a2);
          return *(double *)&v88;
        }
        else
        {
          uint64_t v62 = v86;
          LOBYTE(v89) = dispatch thunk of FloatingPoint.sign.getter(a2, *(void *)(v86 + 16));
          dispatch thunk of BinaryFloatingPoint.exponentBitPattern.getter(a2, v62);
          uint64_t v63 = v62;
          uint64_t v64 = v83;
          uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness(v63, a2, v83, &protocol requirements base descriptor for BinaryFloatingPoint, &associated conformance descriptor for BinaryFloatingPoint.BinaryFloatingPoint.RawExponent: UnsignedInteger);
          id v66 = v84;
          __int16 v67 = dispatch thunk of BinaryInteger._lowWord.getter(v64, *(void *)(AssociatedConformanceWitness + 8));
          (*(void (**)(uint64_t *, uint64_t))(v82 + 8))(v66, v64);
          uint64_t v68 = v81;
          Swift::String v69 = v78;
          uint64_t v70 = v86;
          dispatch thunk of BinaryFloatingPoint.significandBitPattern.getter(a2, v86);
          (*(void (**)(uint64_t *, uint64_t))(v87 + 8))(v69, a2);
          uint64_t v71 = AssociatedTypeWitness;
          uint64_t v72 = swift_getAssociatedConformanceWitness(v70, a2, AssociatedTypeWitness, &protocol requirements base descriptor for BinaryFloatingPoint, &associated conformance descriptor for BinaryFloatingPoint.BinaryFloatingPoint.RawSignificand: UnsignedInteger);
          uint64_t v73 = dispatch thunk of BinaryInteger._lowWord.getter(v71, *(void *)(v72 + 8));
          (*(void (**)(uint64_t *, uint64_t))(v79 + 8))(v68, v71);
          *(void *)&double result = v73 & 0xFFFFFFFFFFFFFLL | ((unint64_t)v89 << 63) | ((unint64_t)(v67 & 0x7FF) << 52);
        }
        return result;
      }
    }
    else if (v23 == 8 && v24 == 23)
    {
      unint64_t v25 = v75;
      uint64_t v26 = v89;
      uint64_t v27 = v87;
      (*(void (**)(uint64_t *, uint64_t, uint64_t))(v87 + 16))(v75, v89, a2);
      LOBYTE(v25) = swift_dynamicCast(&v77, v25, a2, &type metadata for Float, 6);
      float v28 = *(float *)&v77;
      LODWORD(v88) = LODWORD(v77);
      uint64_t v29 = *(void *)&v85;
      (*(void (**)(void, uint64_t, uint64_t))(v27 + 32))(*(void *)&v85, v26, a2);
      if ((_BYTE)v25)
      {
        (*(void (**)(uint64_t, uint64_t))(v27 + 8))(v29, a2);
        return *(float *)&v88;
      }
      else
      {
        uint64_t v42 = v86;
        LOBYTE(v89) = dispatch thunk of FloatingPoint.sign.getter(a2, *(void *)(v86 + 16)) & 1;
        uint64_t v43 = v84;
        dispatch thunk of BinaryFloatingPoint.exponentBitPattern.getter(a2, v42);
        uint64_t v44 = v83;
        uint64_t v45 = swift_getAssociatedConformanceWitness(v42, a2, v83, &protocol requirements base descriptor for BinaryFloatingPoint, &associated conformance descriptor for BinaryFloatingPoint.BinaryFloatingPoint.RawExponent: UnsignedInteger);
        uint64_t v88 = (uint64_t *)dispatch thunk of BinaryInteger._lowWord.getter(v44, *(void *)(v45 + 8));
        (*(void (**)(uint64_t *, uint64_t))(v82 + 8))(v43, v44);
        Swift::String v46 = v81;
        uint64_t v47 = *(void *)&v85;
        dispatch thunk of BinaryFloatingPoint.significandBitPattern.getter(a2, v42);
        (*(void (**)(uint64_t, uint64_t))(v87 + 8))(v47, a2);
        uint64_t v48 = v42;
        uint64_t v49 = AssociatedTypeWitness;
        uint64_t v50 = swift_getAssociatedConformanceWitness(v48, a2, AssociatedTypeWitness, &protocol requirements base descriptor for BinaryFloatingPoint, &associated conformance descriptor for BinaryFloatingPoint.BinaryFloatingPoint.RawSignificand: UnsignedInteger);
        unsigned int v51 = dispatch thunk of BinaryInteger._lowWord.getter(v49, *(void *)(v50 + 8));
        (*(void (**)(uint64_t *, uint64_t))(v79 + 8))(v46, v49);
        Float.init(sign:exponentBitPattern:significandBitPattern:)(v89, v88, v51);
      }
      return v28;
    }
LABEL_13:
    uint64_t v40 = lazy protocol witness table accessor for type Double and conformance Double();
    uint64_t v41 = v89;
    static BinaryFloatingPoint._convert<A>(from:)(&v77, v89, &type metadata for Double, a2, v40, v86);
    (*(void (**)(uint64_t, uint64_t))(v87 + 8))(v41, a2);
    return *(double *)&v77;
  }
  uint64_t v30 = v88;
  if (v24 != 63) {
    goto LABEL_13;
  }
  uint64_t v31 = v89;
  uint64_t v32 = v87;
  (*(void (**)(uint64_t *, uint64_t, uint64_t))(v87 + 16))(&v74, v89, a2);
  char v33 = swift_dynamicCast(&v77, &v74, a2, &type metadata for Float80, 6);
  long double v85 = v77;
  (*(void (**)(uint64_t *, uint64_t, uint64_t))(v32 + 32))(v30, v31, a2);
  if (v33)
  {
    (*(void (**)(uint64_t *, uint64_t))(v32 + 8))(v30, a2);
    return v85;
  }
  else
  {
    uint64_t v52 = v86;
    LOBYTE(v89) = dispatch thunk of FloatingPoint.sign.getter(a2, *(void *)(v86 + 16)) & 1;
    Swift::String v53 = v84;
    dispatch thunk of BinaryFloatingPoint.exponentBitPattern.getter(a2, v52);
    uint64_t v54 = v83;
    uint64_t v55 = swift_getAssociatedConformanceWitness(v52, a2, v83, &protocol requirements base descriptor for BinaryFloatingPoint, &associated conformance descriptor for BinaryFloatingPoint.BinaryFloatingPoint.RawExponent: UnsignedInteger);
    *(void *)&long double v85 = dispatch thunk of BinaryInteger._lowWord.getter(v54, *(void *)(v55 + 8));
    (*(void (**)(uint64_t *, uint64_t))(v82 + 8))(v53, v54);
    uint64_t v56 = v81;
    char v57 = v88;
    dispatch thunk of BinaryFloatingPoint.significandBitPattern.getter(a2, v52);
    (*(void (**)(uint64_t *, uint64_t))(v87 + 8))(v57, a2);
    uint64_t v58 = v52;
    uint64_t v59 = AssociatedTypeWitness;
    uint64_t v60 = swift_getAssociatedConformanceWitness(v58, a2, AssociatedTypeWitness, &protocol requirements base descriptor for BinaryFloatingPoint, &associated conformance descriptor for BinaryFloatingPoint.BinaryFloatingPoint.RawSignificand: UnsignedInteger);
    uint64_t v61 = dispatch thunk of BinaryInteger._lowWord.getter(v59, *(void *)(v60 + 8));
    (*(void (**)(uint64_t *, uint64_t))(v79 + 8))(v56, v59);
    return Float80.init(sign:exponentBitPattern:significandBitPattern:)(v89, *(void *)&v85, v61);
  }
}

float specialized BinaryFloatingPoint.init<A>(_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v89 = a1;
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness(0, a3, a2, &protocol requirements base descriptor for BinaryFloatingPoint, &associated type descriptor for BinaryFloatingPoint.RawSignificand);
  uint64_t v79 = *(void *)(AssociatedTypeWitness - 8);
  int64_t v4 = *(void *)(v79 + 64);
  uint64_t v5 = alloca(v4);
  unint64_t v6 = alloca(v4);
  uint64_t v81 = &v74;
  uint64_t v83 = swift_getAssociatedTypeWitness(0, a3, a2, &protocol requirements base descriptor for BinaryFloatingPoint, &associated type descriptor for BinaryFloatingPoint.RawExponent);
  uint64_t v82 = *(void *)(v83 - 8);
  int64_t v7 = *(void *)(v82 + 64);
  BOOL v8 = alloca(v7);
  uint64_t v9 = alloca(v7);
  uint64_t v84 = &v74;
  uint64_t v87 = *(void *)(a2 - 8);
  int64_t v10 = *(void *)(v87 + 64);
  unint64_t v11 = alloca(v10);
  unint64_t v12 = alloca(v10);
  *(void *)&long double v85 = &v74;
  unint64_t v13 = alloca(v10);
  uint64_t v14 = alloca(v10);
  uint64_t v74 = (uint64_t)&v74;
  uint64_t v15 = alloca(v10);
  uint64_t v16 = alloca(v10);
  long double v77 = &v74;
  uint64_t v17 = alloca(v10);
  uint64_t v18 = alloca(v10);
  uint64_t v75 = &v74;
  uint64_t v19 = alloca(v10);
  unint64_t v20 = alloca(v10);
  uint64_t v88 = &v74;
  unint64_t v21 = alloca(v10);
  uint64_t v22 = alloca(v10);
  uint64_t v23 = dispatch thunk of static BinaryFloatingPoint.exponentBitCount.getter(a2, a3);
  uint64_t v86 = a3;
  uint64_t v24 = dispatch thunk of static BinaryFloatingPoint.significandBitCount.getter(a2, a3);
  if (v23 == 15)
  {
    uint64_t v30 = v88;
    if (v24 != 63) {
      goto LABEL_13;
    }
    uint64_t v31 = v89;
    uint64_t v32 = v87;
    (*(void (**)(uint64_t *, uint64_t, uint64_t))(v87 + 16))(&v74, v89, a2);
    char v33 = swift_dynamicCast(&v76, &v74, a2, &type metadata for Float80, 6);
    long double v85 = v76;
    (*(void (**)(uint64_t *, uint64_t, uint64_t))(v32 + 32))(v30, v31, a2);
    if (v33)
    {
      (*(void (**)(uint64_t *, uint64_t))(v32 + 8))(v30, a2);
      return v85;
    }
    else
    {
      uint64_t v52 = v86;
      LOBYTE(v89) = dispatch thunk of FloatingPoint.sign.getter(a2, *(void *)(v86 + 16)) & 1;
      Swift::String v53 = v84;
      dispatch thunk of BinaryFloatingPoint.exponentBitPattern.getter(a2, v52);
      uint64_t v54 = v83;
      uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness(v52, a2, v83, &protocol requirements base descriptor for BinaryFloatingPoint, &associated conformance descriptor for BinaryFloatingPoint.BinaryFloatingPoint.RawExponent: UnsignedInteger);
      *(void *)&long double v85 = dispatch thunk of BinaryInteger._lowWord.getter(v54, *(void *)(AssociatedConformanceWitness + 8));
      (*(void (**)(uint64_t *, uint64_t))(v82 + 8))(v53, v54);
      uint64_t v56 = v81;
      char v57 = v88;
      dispatch thunk of BinaryFloatingPoint.significandBitPattern.getter(a2, v52);
      (*(void (**)(uint64_t *, uint64_t))(v87 + 8))(v57, a2);
      uint64_t v58 = v52;
      uint64_t v59 = AssociatedTypeWitness;
      uint64_t v60 = swift_getAssociatedConformanceWitness(v58, a2, AssociatedTypeWitness, &protocol requirements base descriptor for BinaryFloatingPoint, &associated conformance descriptor for BinaryFloatingPoint.BinaryFloatingPoint.RawSignificand: UnsignedInteger);
      uint64_t v61 = dispatch thunk of BinaryInteger._lowWord.getter(v59, *(void *)(v60 + 8));
      (*(void (**)(uint64_t *, uint64_t))(v79 + 8))(v56, v59);
      return Float80.init(sign:exponentBitPattern:significandBitPattern:)(v89, *(void *)&v85, v61);
    }
  }
  else
  {
    if (v23 != 11)
    {
      if (v23 == 8 && v24 == 23)
      {
        uint64_t v25 = v74;
        uint64_t v26 = v89;
        uint64_t v27 = v87;
        (*(void (**)(uint64_t, uint64_t, uint64_t))(v87 + 16))(v74, v89, a2);
        LOBYTE(v25) = swift_dynamicCast(&v76, v25, a2, &type metadata for Float, 6);
        float result = *(float *)&v76;
        LODWORD(v88) = LODWORD(v76);
        uint64_t v29 = *(void *)&v85;
        (*(void (**)(void, uint64_t, uint64_t))(v27 + 32))(*(void *)&v85, v26, a2);
        if ((_BYTE)v25)
        {
          (*(void (**)(uint64_t, uint64_t))(v27 + 8))(v29, a2);
          return *(float *)&v88;
        }
        else
        {
          uint64_t v42 = v86;
          LOBYTE(v89) = dispatch thunk of FloatingPoint.sign.getter(a2, *(void *)(v86 + 16)) & 1;
          uint64_t v43 = v84;
          dispatch thunk of BinaryFloatingPoint.exponentBitPattern.getter(a2, v42);
          uint64_t v44 = v83;
          uint64_t v45 = swift_getAssociatedConformanceWitness(v42, a2, v83, &protocol requirements base descriptor for BinaryFloatingPoint, &associated conformance descriptor for BinaryFloatingPoint.BinaryFloatingPoint.RawExponent: UnsignedInteger);
          uint64_t v88 = (uint64_t *)dispatch thunk of BinaryInteger._lowWord.getter(v44, *(void *)(v45 + 8));
          (*(void (**)(uint64_t *, uint64_t))(v82 + 8))(v43, v44);
          Swift::String v46 = v81;
          uint64_t v47 = *(void *)&v85;
          dispatch thunk of BinaryFloatingPoint.significandBitPattern.getter(a2, v42);
          (*(void (**)(uint64_t, uint64_t))(v87 + 8))(v47, a2);
          uint64_t v48 = v42;
          uint64_t v49 = AssociatedTypeWitness;
          uint64_t v50 = swift_getAssociatedConformanceWitness(v48, a2, AssociatedTypeWitness, &protocol requirements base descriptor for BinaryFloatingPoint, &associated conformance descriptor for BinaryFloatingPoint.BinaryFloatingPoint.RawSignificand: UnsignedInteger);
          unsigned int v51 = dispatch thunk of BinaryInteger._lowWord.getter(v49, *(void *)(v50 + 8));
          (*(void (**)(uint64_t *, uint64_t))(v79 + 8))(v46, v49);
          Float.init(sign:exponentBitPattern:significandBitPattern:)(v89, v88, v51);
        }
        return result;
      }
LABEL_13:
      uint64_t v40 = lazy protocol witness table accessor for type Float and conformance Float();
      uint64_t v41 = v89;
      static BinaryFloatingPoint._convert<A>(from:)(&v76, v89, &type metadata for Float, a2, v40, v86);
      (*(void (**)(uint64_t, uint64_t))(v87 + 8))(v41, a2);
      return *(float *)&v76;
    }
    if (v24 != 52) {
      goto LABEL_13;
    }
    uint64_t v35 = v75;
    uint64_t v36 = v89;
    uint64_t v37 = v87;
    (*(void (**)(uint64_t *, uint64_t, uint64_t))(v87 + 16))(v75, v89, a2);
    LOBYTE(v35) = swift_dynamicCast(&v76, v35, a2, &type metadata for Double, 6);
    uint64_t v88 = *(uint64_t **)&v76;
    uint64_t v38 = v77;
    (*(void (**)(uint64_t *, uint64_t, uint64_t))(v37 + 32))(v77, v36, a2);
    if ((_BYTE)v35)
    {
      (*(void (**)(uint64_t *, uint64_t))(v37 + 8))(v38, a2);
      return *(double *)&v88;
    }
    else
    {
      uint64_t v62 = v86;
      LOBYTE(v89) = dispatch thunk of FloatingPoint.sign.getter(a2, *(void *)(v86 + 16));
      dispatch thunk of BinaryFloatingPoint.exponentBitPattern.getter(a2, v62);
      uint64_t v63 = v62;
      uint64_t v64 = v83;
      uint64_t v65 = swift_getAssociatedConformanceWitness(v63, a2, v83, &protocol requirements base descriptor for BinaryFloatingPoint, &associated conformance descriptor for BinaryFloatingPoint.BinaryFloatingPoint.RawExponent: UnsignedInteger);
      id v66 = v84;
      __int16 v67 = dispatch thunk of BinaryInteger._lowWord.getter(v64, *(void *)(v65 + 8));
      (*(void (**)(uint64_t *, uint64_t))(v82 + 8))(v66, v64);
      uint64_t v68 = v81;
      Swift::String v69 = v77;
      uint64_t v70 = v86;
      dispatch thunk of BinaryFloatingPoint.significandBitPattern.getter(a2, v86);
      (*(void (**)(uint64_t *, uint64_t))(v87 + 8))(v69, a2);
      uint64_t v71 = AssociatedTypeWitness;
      uint64_t v72 = swift_getAssociatedConformanceWitness(v70, a2, AssociatedTypeWitness, &protocol requirements base descriptor for BinaryFloatingPoint, &associated conformance descriptor for BinaryFloatingPoint.BinaryFloatingPoint.RawSignificand: UnsignedInteger);
      uint64_t v73 = dispatch thunk of BinaryInteger._lowWord.getter(v71, *(void *)(v72 + 8));
      (*(void (**)(uint64_t *, uint64_t))(v79 + 8))(v68, v71);
      *(void *)&double v39 = v73 & 0xFFFFFFFFFFFFFLL | ((unint64_t)v89 << 63) | ((unint64_t)(v67 & 0x7FF) << 52);
    }
    return v39;
  }
}

uint64_t lazy protocol witness table accessor for type UInt32 and conformance UInt32()
{
  uint64_t result = lazy protocol witness table cache variable for type UInt32 and conformance UInt32;
  if (!lazy protocol witness table cache variable for type UInt32 and conformance UInt32)
  {
    uint64_t result = swift_getWitnessTable(&protocol conformance descriptor for UInt32, &type metadata for UInt32);
    lazy protocol witness table cache variable for type UInt32 and conformance UInt32 = result;
  }
  return result;
}

uint64_t sub_9DF22()
{
  if (*(void *)(v0 + 40)) {
    __swift_destroy_boxed_opaque_existential_1Tm((void *)(v0 + 16));
  }
  return swift_deallocObject(v0, 48, 7);
}

uint64_t lazy protocol witness table accessor for type UInt64 and conformance UInt64()
{
  uint64_t result = lazy protocol witness table cache variable for type UInt64 and conformance UInt64;
  if (!lazy protocol witness table cache variable for type UInt64 and conformance UInt64)
  {
    uint64_t result = swift_getWitnessTable(&protocol conformance descriptor for UInt64, &type metadata for UInt64);
    lazy protocol witness table cache variable for type UInt64 and conformance UInt64 = result;
  }
  return result;
}

uint64_t lazy protocol witness table accessor for type TreeRegressorModel and conformance TreeRegressorModel(uint64_t *a1, uint64_t (*a2)(uint64_t), uint64_t a3)
{
  uint64_t result = *a1;
  if (!*a1)
  {
    uint64_t v5 = a2(255);
    uint64_t result = swift_getWitnessTable(a3, v5);
    *a1 = result;
  }
  return result;
}

uint64_t protocol witness for SupervisedTabularEstimator.fitted(to:validateOn:eventHandler:) in conformance TreeRegressor(uint64_t (*a1)(void))
{
  return a1();
}

uint64_t closure #1 in FeatureVectorizer.fitted(to:)partial apply(void *a1, void *a2)
{
  return partial apply for closure #1 in FeatureVectorizer.fitted(to:)(a1, a2);
}

{
  return partial apply for closure #1 in FeatureVectorizer.fitted(to:)(a1, a2);
}

uint64_t one-time initialization function for sessionParameters()
{
  uint64_t v0 = (int *)type metadata accessor for MLTrainingSessionParameters(0);
  __swift_allocate_value_buffer((uint64_t)v0, static MLObjectDetector.__Defaults.sessionParameters);
  uint64_t v1 = __swift_project_value_buffer((uint64_t)v0, (uint64_t)static MLObjectDetector.__Defaults.sessionParameters);
  uint64_t v2 = type metadata accessor for URL(0);
  __swift_storeEnumTagSinglePayload(v1, 1, 1, v2);
  uint64_t result = v0[5];
  uint64_t v4 = v0[6];
  uint64_t v5 = v0[7];
  *(void *)(v1 + result) = 10;
  *(void *)(v1 + v4) = 50;
  *(void *)(v1 + v5) = 1000;
  return result;
}

uint64_t static MLObjectDetector.__Defaults.sessionParameters.getter()
{
  uint64_t v1 = v0;
  if (one-time initialization token for sessionParameters != -1) {
    swift_once(&one-time initialization token for sessionParameters, one-time initialization function for sessionParameters);
  }
  uint64_t v2 = type metadata accessor for MLTrainingSessionParameters(0);
  uint64_t v3 = __swift_project_value_buffer(v2, (uint64_t)static MLObjectDetector.__Defaults.sessionParameters);
  return outlined init with copy of MLTrainingSessionParameters(v3, v1);
}

uint64_t outlined init with copy of MLTrainingSessionParameters(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = type metadata accessor for MLTrainingSessionParameters(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v2 - 8) + 16))(a2, a1, v2);
  return a2;
}

ValueMetadata *type metadata accessor for MLObjectDetector.__Defaults()
{
  return &type metadata for MLObjectDetector.__Defaults;
}

NSString __swiftcall NSString.__allocating_init(string:)(Swift::String string)
{
  ObjCClassFromMetadata = (objc_class *)swift_getObjCClassFromMetadata();
  id v2 = objc_allocWithZone(ObjCClassFromMetadata);
  NSString v3 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(string._object);
  id v4 = [v2 initWithString:v3];

  return v4;
}

uint64_t MLDataTable.write(to:)(uint64_t a1)
{
  uint64_t v42 = v1;
  uint64_t v3 = type metadata accessor for URL(0);
  uint64_t v4 = *(void *)(v3 - 8);
  int64_t v5 = *(void *)(v4 + 64);
  unint64_t v6 = alloca(v5);
  int64_t v7 = alloca(v5);
  double v39 = &v38;
  BOOL v8 = alloca(v5);
  uint64_t v9 = alloca(v5);
  uint64_t v43 = *(void *)v2;
  char v46 = *(unsigned char *)(v2 + 8);
  uint64_t v10 = v3;
  (*(void (**)(uint64_t *, uint64_t))(v4 + 16))(&v38, a1);
  char v11 = URL.isFileURL.getter();
  uint64_t v45 = v10;
  if ((v11 & 1) == 0)
  {
    uint64_t v44 = v4;
    uint64_t v12 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Any>);
    uint64_t v13 = swift_allocObject(v12, 64, 7);
    *(void *)&long long v41 = 0;
    *(void *)(v13 + 16) = 1;
    uint64_t v40 = v13;
    *(void *)(v13 + 24) = 2;
    *((void *)&v41 + 1) = 0xE000000000000000;
    _StringGuts.grow(_:)(59);
    v14._uint64_t countAndFlagsBits = 0x27204C5255;
    v14._char object = (void *)0xE500000000000000;
    String.append(_:)(v14);
    uint64_t v15 = lazy protocol witness table accessor for type URL and conformance URL();
    uint64_t v16 = dispatch thunk of CustomStringConvertible.description.getter(v10, v15);
    char v18 = (char)v17;
    v14._uint64_t countAndFlagsBits = v16;
    v14._char object = v17;
    String.append(_:)(v14);
    swift_bridgeObjectRelease(v18);
    v14._char object = "ary values for feature '" + 0x8000000000000000;
    v14._uint64_t countAndFlagsBits = 0xD000000000000030;
    String.append(_:)(v14);
    if (one-time initialization token for tmpPath != -1) {
      swift_once(&one-time initialization token for tmpPath, one-time initialization function for tmpPath);
    }
    uint64_t countAndFlagsBits = tmpPath._countAndFlagsBits;
    char object = tmpPath._object;
    swift_bridgeObjectRetain(tmpPath._object);
    v21._uint64_t countAndFlagsBits = countAndFlagsBits;
    v21._char object = object;
    String.append(_:)(v21);
    swift_bridgeObjectRelease((_BYTE)object);
    v21._char object = (void *)0xE200000000000000;
    v21._uint64_t countAndFlagsBits = 10030;
    String.append(_:)(v21);
    long long v22 = v41;
    uint64_t v23 = v40;
    *(void *)(v40 + 56) = &type metadata for String;
    *(_OWORD *)(v23 + 32) = v22;
    print(_:separator:terminator:)(v23, 32, 0xE100000000000000, 10, 0xE100000000000000);
    swift_bridgeObjectRelease(v23);
    uint64_t v24 = v39;
    URL.init(fileURLWithPath:)(tmpPath._countAndFlagsBits, tmpPath._object);
    uint64_t v25 = v45;
    uint64_t v4 = v44;
    (*(void (**)(uint64_t *, uint64_t))(v44 + 8))(&v38, v45);
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(v4 + 32))(&v38, v24, v25);
  }
  v26._uint64_t countAndFlagsBits = 0x6C62615461746144;
  v26._char object = (void *)0xE900000000000065;
  URL.appendPathComponent(_:)(v26);
  uint64_t v27 = v42;
  static _FileUtilities.prepareForWriting(to:isDirectory:)((uint64_t)&v38, 1);
  if (v27) {
    return (*(uint64_t (**)(uint64_t *, uint64_t))(v4 + 8))(&v38, v45);
  }
  if (v46)
  {
    uint64_t v28 = v43;
    swift_errorRetain(v43);
    swift_willThrow(v28, 1, v29, v30, v31, v32);
    return (*(uint64_t (**)(uint64_t *, uint64_t))(v4 + 8))(&v38, v45);
  }
  uint64_t v44 = v4;
  uint64_t v34 = v43;
  uint64_t v35 = *(void *)(v43 + 16);
  swift_retain();
  uint64_t v42 = (objc_class *)URL.path.getter(v34);
  uint64_t v37 = v36;
  swift_retain();
  specialized String.withCString<A>(_:)(v42, v37, (char *)&dword_0 + 1, v35);
  (*(void (**)(uint64_t *, uint64_t))(v44 + 8))(&v38, v45);
  swift_bridgeObjectRelease(v37);
  return outlined consume of Result<_DataTable, Error>(v43, 0);
}

Swift::Void __swiftcall __spoils<cf,zf,sf,of,pf,rax,rdx,rcx,rdi,rsi,r8,r9,r10,r11,r12,xmm0,xmm1,xmm2,xmm3,xmm4,xmm5,xmm6,xmm7> MLDataTable.write(toDirectory:)(Swift::String toDirectory)
{
}

uint64_t MLDataTable.writeCSV(to:)(uint64_t a1)
{
  uint64_t v3 = *(void *)v2;
  char v4 = *(unsigned char *)(v2 + 8);
  if (URL.isFileURL.getter())
  {
    uint64_t result = static _FileUtilities.prepareForWriting(to:isDirectory:)(a1, 0);
    if (!v1)
    {
      uint64_t v6 = v3;
      if (v4)
      {
        swift_errorRetain(v3);
        return swift_willThrow(v3, 0, v7, v8, v9, v10);
      }
      else
      {
        uint64_t v16 = *(void *)(v3 + 16);
        outlined copy of Result<_DataTable, Error>(v6, 0);
        swift_retain();
        uint64_t v17 = (objc_class *)URL.path.getter(v16);
        uint64_t v19 = v18;
        swift_retain();
        specialized String.withCString<A>(_:)(v17, v19, 0, v16);
        swift_release();
        swift_bridgeObjectRelease(v19);
        return outlined consume of Result<_DataTable, Error>(v6, 0);
      }
    }
  }
  else
  {
    uint64_t v11 = lazy protocol witness table accessor for type MLCreateError and conformance MLCreateError();
    swift_allocError(&type metadata for MLCreateError, v11, 0, 0);
    *(void *)uint64_t v12 = 0xD00000000000002CLL;
    *(void *)(v12 + 8) = " tmp directory '" + 0x8000000000000000;
    *(_OWORD *)(v12 + 16) = 0;
    *(_OWORD *)(v12 + 32) = 0;
    *(unsigned char *)(v12 + 48) = 0;
    return swift_willThrow(&type metadata for MLCreateError, v11, v12, v13, v14, v15);
  }
  return result;
}

Swift::Void __swiftcall __spoils<cf,zf,sf,of,pf,rax,rdx,rcx,rdi,rsi,r8,r9,r10,r11,r12,xmm0,xmm1,xmm2,xmm3,xmm4,xmm5,xmm6,xmm7> MLDataTable.writeCSV(toFile:)(Swift::String toFile)
{
}

uint64_t MLDataTable.write(toDirectory:)(Swift::String string, void (*a2)(void *))
{
  uint64_t v17 = a2;
  uint64_t v20 = type metadata accessor for URL(0);
  uint64_t v21 = *(void *)(v20 - 8);
  int64_t v3 = *(void *)(v21 + 64);
  char v4 = alloca(v3);
  int64_t v5 = alloca(v3);
  uint64_t v19 = v15;
  uint64_t v18 = *v2;
  char v22 = *((unsigned char *)v2 + 8);
  type metadata accessor for NSString();
  swift_bridgeObjectRetain(string._object);
  NSString v6 = NSString.__allocating_init(string:)(string);
  id v7 = [v6 stringByExpandingTildeInPath];
  id v8 = v7;

  uint64_t v9 = static String._unconditionallyBridgeFromObjectiveC(_:)(v8);
  uint64_t v11 = v10;

  uint64_t v12 = v9;
  uint64_t v13 = v19;
  URL.init(fileURLWithPath:)(v12, v11);
  swift_bridgeObjectRelease(v11);
  v15[1] = v18;
  char v16 = v22;
  v17(v13);
  return (*(uint64_t (**)(void *, uint64_t))(v21 + 8))(v13, v20);
}

uint64_t specialized String.withCString<A>(_:)(objc_class *a1, uint64_t a2, void *a3, uint64_t a4)
{
  v9._reserved = a3;
  uint64_t v10 = a4;
  if ((a2 & 0x1000000000000000) != 0 || !(a2 & 0x2000000000000000 | (unint64_t)a1 & 0x1000000000000000))
  {
    _StringGuts._slowWithCString<A>(_:)(partial apply for closure #1 in CMLTable.save(to:type:), &v9._baseURL, a1, a2, (char *)&type metadata for () + 8);
    return swift_release();
  }
  else
  {
    if ((a2 & 0x2000000000000000) == 0)
    {
      uint64_t v11 = &v9;
      if (((unint64_t)a1 & 0x1000000000000000) != 0)
      {
        uint64_t v6 = (a2 & 0xFFFFFFFFFFFFFFFLL) + 32;
      }
      else
      {
        uint64_t v6 = _StringObject.sharedUTF8.getter(a1, a2);
        if (!v6)
        {
          id v7 = 0;
          goto LABEL_7;
        }
      }
      id v7 = (NSURL *)v6;
LABEL_7:
      closure #1 in CMLTable.save(to:type:)(v7, (uint64_t)a3, a4);
      return swift_release();
    }
    v9.super.Class isa = a1;
    v9._urlString = (NSString *)(a2 & 0xFFFFFFFFFFFFFFLL);
    closure #1 in CMLTable.save(to:type:)(&v9, (uint64_t)a3, a4);
    return swift_release();
  }
}

uint64_t lazy protocol witness table accessor for type URL and conformance URL()
{
  uint64_t result = lazy protocol witness table cache variable for type URL and conformance URL;
  if (!lazy protocol witness table cache variable for type URL and conformance URL)
  {
    uint64_t v1 = type metadata accessor for URL(255);
    uint64_t result = swift_getWitnessTable(&protocol conformance descriptor for URL, v1);
    lazy protocol witness table cache variable for type URL and conformance URL = result;
  }
  return result;
}

{
  uint64_t result;
  uint64_t v1;

  uint64_t result = lazy protocol witness table cache variable for type URL and conformance URL;
  if (!lazy protocol witness table cache variable for type URL and conformance URL)
  {
    uint64_t v1 = type metadata accessor for URL(255);
    uint64_t result = swift_getWitnessTable(&protocol conformance descriptor for URL, v1);
    lazy protocol witness table cache variable for type URL and conformance URL = result;
  }
  return result;
}

{
  uint64_t result;
  uint64_t v1;

  uint64_t result = lazy protocol witness table cache variable for type URL and conformance URL;
  if (!lazy protocol witness table cache variable for type URL and conformance URL)
  {
    uint64_t v1 = type metadata accessor for URL(255);
    uint64_t result = swift_getWitnessTable(&protocol conformance descriptor for URL, v1);
    lazy protocol witness table cache variable for type URL and conformance URL = result;
  }
  return result;
}

uint64_t type metadata accessor for NSString()
{
  uint64_t result = lazy cache variable for type metadata for NSString;
  if (!lazy cache variable for type metadata for NSString)
  {
    uint64_t v1 = objc_opt_self(NSString);
    uint64_t result = swift_getObjCClassMetadata(v1);
    lazy cache variable for type metadata for NSString = result;
  }
  return result;
}

NSURL *partial apply for closure #1 in CMLTable.save(to:type:)(NSURL *a1)
{
  return closure #1 in CMLTable.save(to:type:)(a1, *(void *)(v1 + 16), *(void *)(v1 + 24));
}

void *_sSTsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFs12Zip2SequenceVySaySo8NSNumberCGSaySo12MLMultiArrayCGG_Si5label_AL9embeddingts5NeverOTg505_sSo8f5CSo12gh42CSiADIgggdo_AB_ADtSi5label_AD9embeddingts5k128OIegnrzr_TR098_s8CreateML24MLFewShotSoundClassifierV5train33_E9D7D47DE11AB89722960D8AD055ABB6LLyyKFSi5label_So12bc15C9embeddingtM23A10C_AHtXEfU_Tf3nnnpf_nTf1cn_n(uint64_t a1, uint64_t a2)
{
  if ((a1 & 0x4000000000000001) != 0)
  {
    uint64_t v30 = a1 & 0xFFFFFFFFFFFFF8;
    if (a1) {
      uint64_t v30 = a1;
    }
    swift_bridgeObjectRetain(a1);
    uint64_t v31 = v30;
    uint64_t v2 = a2;
    uint64_t v3 = _CocoaArrayWrapper.endIndex.getter(v31);
    swift_bridgeObjectRelease(a1);
  }
  else
  {
    uint64_t v2 = a2;
    uint64_t v3 = *(void *)((char *)&dword_10 + (a1 & 0xFFFFFFFFFFFFF8));
  }
  if ((v2 & 0x4000000000000001) != 0)
  {
    uint64_t v32 = v2;
    uint64_t v33 = v2 & 0xFFFFFFFFFFFFF8;
    if (v32) {
      uint64_t v33 = v32;
    }
    swift_bridgeObjectRetain(v32);
    uint64_t v4 = _CocoaArrayWrapper.endIndex.getter(v33);
    swift_bridgeObjectRelease(v32);
  }
  else
  {
    uint64_t v4 = *(void *)((char *)&dword_10 + (v2 & 0xFFFFFFFFFFFFF8));
  }
  if (v4 < v3) {
    uint64_t v3 = v4;
  }
  id v48 = (id)v3;
  int64_t v5 = 0;
  if (v3 > 0) {
    int64_t v5 = v3;
  }
  int64_t v38 = v5;
  specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v5, 0);
  if (v3 < 0) {
    BUG();
  }
  if (v3)
  {
    if ((a1 & 0x4000000000000001) != 0)
    {
      uint64_t v6 = a1;
      uint64_t v46 = a1 & 0xFFFFFFFFFFFFF8;
      if ((a1 & 1) == 0) {
        uint64_t v6 = a1 & 0xFFFFFFFFFFFFF8;
      }
      swift_bridgeObjectRetain_n(a1, 2);
      swift_bridgeObjectRetain(a2);
      uint64_t v7 = v6;
      uint64_t v8 = a2;
      uint64_t v41 = _CocoaArrayWrapper.endIndex.getter(v7);
      swift_bridgeObjectRelease(a1);
    }
    else
    {
      uint64_t v46 = a1 & 0xFFFFFFFFFFFFF8;
      uint64_t v41 = *(void *)((char *)&dword_10 + (a1 & 0xFFFFFFFFFFFFF8));
      swift_bridgeObjectRetain(a1);
      uint64_t v8 = a2;
      swift_bridgeObjectRetain(a2);
    }
    uint64_t v11 = a1;
    unint64_t v37 = a1 & 0xC000000000000003;
    uint64_t v13 = v8;
    uint64_t v45 = v8 & 0xFFFFFFFFFFFFF8;
    if ((v8 & 1) == 0) {
      uint64_t v13 = v8 & 0xFFFFFFFFFFFFF8;
    }
    uint64_t v34 = v13;
    unint64_t v40 = v8 & 0xC000000000000003;
    unint64_t v14 = 0;
    do
    {
      if (v38 == v14) {
        BUG();
      }
      if (v41 == v14) {
        BUG();
      }
      if (v37)
      {
        id v15 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v14, v11);
      }
      else
      {
        if (v14 >= *(void *)(v46 + 16)) {
          BUG();
        }
        id v15 = *(id *)(v11 + 8 * v14 + 32);
      }
      char v16 = v15;
      if ((v8 & 0x4000000000000001) != 0)
      {
        swift_bridgeObjectRetain(v8);
        char v17 = v8;
        uint64_t v18 = _CocoaArrayWrapper.endIndex.getter(v34);
        swift_bridgeObjectRelease(v17);
      }
      else
      {
        uint64_t v18 = *(void *)(v45 + 16);
      }
      if (v14 == v18)
      {

        BUG();
      }
      if (v40)
      {
        id v19 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v14, a2);
      }
      else
      {
        if (v14 >= *(void *)(v45 + 16)) {
          BUG();
        }
        id v19 = *(id *)(a2 + 8 * v14 + 32);
      }
      id v43 = v19;
      id v35 = [v16 integerValue];

      unint64_t v20 = _swiftEmptyArrayStorage[2];
      if (_swiftEmptyArrayStorage[3] >> 1 <= v20) {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(_swiftEmptyArrayStorage[3] >= 2uLL, v20 + 1, 1);
      }
      ++v14;
      _swiftEmptyArrayStorage[2] = v20 + 1;
      uint64_t v21 = 2 * v20;
      _swiftEmptyArrayStorage[v21 + 4] = v35;
      _swiftEmptyArrayStorage[v21 + 5] = v43;
      uint64_t v12 = (uint64_t)v48;
      uint64_t v11 = a1;
      uint64_t v8 = a2;
    }
    while (v48 != (id)v14);
    uint64_t v9 = v45;
    uint64_t v10 = v46;
  }
  else
  {
    unint64_t v37 = a1 & 0xC000000000000003;
    uint64_t v8 = a2;
    uint64_t v9 = a2 & 0xFFFFFFFFFFFFF8;
    unint64_t v40 = a2 & 0xC000000000000003;
    swift_bridgeObjectRetain(a1);
    swift_bridgeObjectRetain(a2);
    uint64_t v10 = a1 & 0xFFFFFFFFFFFFF8;
    uint64_t v11 = a1;
    uint64_t v12 = 0;
  }
  uint64_t v22 = v11;
  uint64_t v47 = v10;
  if ((v11 & 1) == 0) {
    uint64_t v22 = v10;
  }
  uint64_t v39 = v22;
  if ((v8 & 1) == 0) {
    uint64_t v8 = v9;
  }
  uint64_t v42 = v8;
  while (1)
  {
    if ((v11 & 0x4000000000000001) != 0)
    {
      swift_bridgeObjectRetain(v11);
      uint64_t v23 = _CocoaArrayWrapper.endIndex.getter(v39);
      swift_bridgeObjectRelease(v11);
    }
    else
    {
      uint64_t v23 = *(void *)(v47 + 16);
    }
    if (v12 == v23)
    {
      swift_bridgeObjectRelease(a2);
      swift_bridgeObjectRelease(a1);
      return _swiftEmptyArrayStorage;
    }
    if (v37)
    {
      id v24 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v12, a1);
    }
    else
    {
      if (v12 < 0) {
        BUG();
      }
      if ((unint64_t)v12 >= *(void *)(v47 + 16)) {
        BUG();
      }
      id v24 = *(id *)(a1 + 8 * v12 + 32);
    }
    if (__OFADD__(1, v12)) {
      BUG();
    }
    id v49 = v24;
    if ((a2 & 0x4000000000000001) != 0)
    {
      swift_bridgeObjectRetain(a2);
      uint64_t v25 = _CocoaArrayWrapper.endIndex.getter(v42);
      swift_bridgeObjectRelease(a2);
    }
    else
    {
      uint64_t v25 = *(void *)(v9 + 16);
    }
    if (v12 == v25) {
      break;
    }
    if (v40)
    {
      id v26 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v12, a2);
    }
    else
    {
      if (v12 < 0) {
        BUG();
      }
      if ((unint64_t)v12 >= *(void *)(v9 + 16)) {
        BUG();
      }
      id v26 = *(id *)(a2 + 8 * v12 + 32);
    }
    id v44 = v26;
    id v36 = [v49 integerValue];

    unint64_t v27 = _swiftEmptyArrayStorage[2];
    if (_swiftEmptyArrayStorage[3] >> 1 <= v27) {
      specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(_swiftEmptyArrayStorage[3] >= 2uLL, v27 + 1, 1);
    }
    _swiftEmptyArrayStorage[2] = v27 + 1;
    uint64_t v28 = 2 * v27;
    _swiftEmptyArrayStorage[v28 + 4] = v36;
    _swiftEmptyArrayStorage[v28 + 5] = v44;
    ++v12;
    uint64_t v11 = a1;
  }
  swift_bridgeObjectRelease(a2);
  swift_bridgeObjectRelease(a1);

  return _swiftEmptyArrayStorage;
}

uint64_t MLFewShotSoundClassifier.modelParameters.getter()
{
  return outlined init with copy of MLTrainingSessionParameters(v1, v0, type metadata accessor for MLFewShotSoundClassifier.ModelParameters);
}

uint64_t MLFewShotSoundClassifier.trainingMetrics.getter()
{
  uint64_t v2 = v0;
  uint64_t v3 = type metadata accessor for MLFewShotSoundClassifier(0);
  return outlined init with copy of MLTrainingSessionParameters(v1 + *(int *)(v3 + 20), v2, type metadata accessor for MLClassifierMetrics);
}

uint64_t type metadata accessor for MLFewShotSoundClassifier(uint64_t a1)
{
  uint64_t result = type metadata singleton initialization cache for MLFewShotSoundClassifier;
  if (!type metadata singleton initialization cache for MLFewShotSoundClassifier) {
    return swift_getSingletonMetadata(a1, &nominal type descriptor for MLFewShotSoundClassifier);
  }
  return result;
}

uint64_t MLFewShotSoundClassifier.trainingMetrics.setter(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for MLFewShotSoundClassifier(0);
  return outlined assign with take of MLClassifierMetrics(a1, v1 + *(int *)(v2 + 20), type metadata accessor for MLClassifierMetrics);
}

void (*MLFewShotSoundClassifier.trainingMetrics.modify())()
{
  return MLBoostedTreeRegressor.ModelParameters.maxDepth.modify;
}

uint64_t MLFewShotSoundClassifier.validationMetrics.getter()
{
  uint64_t v2 = v0;
  uint64_t v3 = type metadata accessor for MLFewShotSoundClassifier(0);
  return outlined init with copy of MLTrainingSessionParameters(v1 + *(int *)(v3 + 24), v2, type metadata accessor for MLClassifierMetrics);
}

uint64_t MLFewShotSoundClassifier.validationMetrics.setter(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for MLFewShotSoundClassifier(0);
  return outlined assign with take of MLClassifierMetrics(a1, v1 + *(int *)(v2 + 24), type metadata accessor for MLClassifierMetrics);
}

void (*MLFewShotSoundClassifier.validationMetrics.modify())()
{
  return MLBoostedTreeRegressor.ModelParameters.maxDepth.modify;
}

double MLFewShotSoundClassifier.validationLoss.getter()
{
  return *(double *)(v0 + *(int *)(type metadata accessor for MLFewShotSoundClassifier(0) + 28));
}

uint64_t MLFewShotSoundClassifier.validationLoss.setter(double a1)
{
  uint64_t result = *(int *)(type metadata accessor for MLFewShotSoundClassifier(0) + 28);
  *(double *)(v1 + result) = a1;
  return result;
}

void (*MLFewShotSoundClassifier.validationLoss.modify())()
{
  return MLBoostedTreeRegressor.ModelParameters.maxDepth.modify;
}

void MLFewShotSoundClassifier.init(trainingData:modelParameters:)(uint64_t a1, uint64_t a2, double a3, __m128 a4, __m128 a5)
{
  uint64_t v125 = v6;
  uint64_t v7 = v5;
  uint64_t v8 = (int *)type metadata accessor for MLFewShotSoundClassifier(0);
  uint64_t v103 = v7 + v8[5];
  MLClassifierMetrics.init()();
  uint64_t v104 = v7 + v8[6];
  MLClassifierMetrics.init()();
  *(void *)(v7 + v8[7]) = 0;
  uint64_t v123 = v7;
  outlined init with copy of MLTrainingSessionParameters(a2, v7, type metadata accessor for MLFewShotSoundClassifier.ModelParameters);
  uint64_t v9 = v8;
  if (_stdlib_isOSVersionAtLeastOrVariantVersionAtLeast(_:_:_:_:_:_:)(0xDuLL, 0, 0, 0x10uLL, 0, 0)) {
    __m128 v10 = (__m128)*(unsigned int *)(a2 + 8);
  }
  else {
    __m128 v10 = (__m128)0x3C23D70Au;
  }
  float v116 = v10.f32[0];
  uint64_t v11 = type metadata accessor for MLFewShotSoundClassifier.ModelParameters(0);
  uint64_t v12 = MLFewShotSoundClassifier.DataSource.extractFeatures(with:)((void *)(a2 + *(int *)(v11 + 32)));
  uint64_t v13 = v125;
  uint64_t v113 = v9;
  if (!v125)
  {
    uint64_t v125 = (uint64_t *)v11;
    uint64_t v117 = a2;
    uint64_t v114 = a1;
    long long v118 = 0;
    uint64_t v16 = v123;
    *(void *)(v123 + v9[12]) = v12;
    uint64_t v124 = (uint64_t *)v9[8];
    *(uint64_t *)((char *)v124 + v16) = (uint64_t)&outlined read-only object #0 of MLFewShotSoundClassifier.init(trainingData:modelParameters:);
    char v17 = v12;
    *(void *)(v16 + v9[9]) = specialized Dictionary.init<A>(uniqueKeysWithValues:)((uint64_t)&outlined read-only object #0 of MLFewShotSoundClassifier.init(trainingData:modelParameters:), 0, 2);
    id v18 = [v17 trainingDataEmbeddings];
    id v19 = v18;
    uint64_t v20 = type metadata accessor for OS_os_log(0, &lazy cache variable for type metadata for MLMultiArray, MLMultiArray_ptr);
    uint64_t v21 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v19, v20);

    if ((v21 & 0x4000000000000001) != 0)
    {
      uint64_t v100 = v21 & 0xFFFFFFFFFFFFF8;
      if (v21) {
        uint64_t v100 = v21;
      }
      swift_bridgeObjectRetain(v21);
      uint64_t v22 = _CocoaArrayWrapper.endIndex.getter(v100);
      swift_bridgeObjectRelease(v21);
    }
    else
    {
      uint64_t v22 = *(void *)((char *)&dword_10 + (v21 & 0xFFFFFFFFFFFFF8));
    }
    if (!v22) {
      goto LABEL_23;
    }
    if ((v21 & 0xC000000000000003) != 0)
    {
      id v23 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(0, v21);
    }
    else
    {
      if (!*(void *)((char *)&dword_10 + (v21 & 0xFFFFFFFFFFFFF8))) {
        BUG();
      }
      id v23 = *(id *)(v21 + 32);
    }
    id v24 = v23;
    swift_bridgeObjectRelease(v21);
    id v25 = [v24 shape];
    id v26 = v25;

    uint64_t v27 = type metadata accessor for OS_os_log(0, &lazy cache variable for type metadata for NSNumber, NSNumber_ptr);
    uint64_t v21 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v26, v27);
    ((void (*)(id))objc_release)(v26);
    if ((v21 & 0x4000000000000001) != 0)
    {
      uint64_t v101 = v21 & 0xFFFFFFFFFFFFF8;
      if (v21) {
        uint64_t v101 = v21;
      }
      swift_bridgeObjectRetain(v21);
      uint64_t v28 = _CocoaArrayWrapper.endIndex.getter(v101);
      swift_bridgeObjectRelease(v21);
    }
    else
    {
      uint64_t v28 = *(void *)((char *)&dword_10 + (v21 & 0xFFFFFFFFFFFFF8));
    }
    if (v28 != 3)
    {
LABEL_23:
      uint64_t v15 = v123;
      swift_bridgeObjectRelease(v21);
      char v14 = 0;
      uint64_t v67 = lazy protocol witness table accessor for type MLCreateError and conformance MLCreateError();
      uint64_t v68 = swift_allocError(&type metadata for MLCreateError, v67, 0, 0);
      *(void *)uint64_t v69 = 0xD000000000000038;
      *(void *)(v69 + 8) = "ly be written to a file URL." + 0x8000000000000000;
      *(_OWORD *)(v69 + 16) = 0;
      *(_OWORD *)(v69 + 32) = 0;
      *(unsigned char *)(v69 + 48) = 2;
      uint64_t v125 = (uint64_t *)v68;
      swift_willThrow(&type metadata for MLCreateError, v67, v69, v70, v71, v72);
      outlined destroy of MLActivityClassifier.ModelParameters(v117, type metadata accessor for MLFewShotSoundClassifier.ModelParameters);
      outlined destroy of MLActivityClassifier.ModelParameters(v114, type metadata accessor for MLFewShotSoundClassifier.DataSource);
      uint64_t v13 = v118;
      goto LABEL_24;
    }
    uint64_t v29 = type metadata accessor for URL(0);
    Swift::String v121 = v102;
    uint64_t v119 = *(void *)(v29 - 8);
    __m128 v120 = *(void (**)(uint64_t *, uint64_t))(v119 + 64);
    uint64_t v30 = alloca((int64_t)v120);
    uint64_t v31 = alloca((int64_t)v120);
    long long v122 = v102;
    uint64_t v32 = v117 + *((int *)v125 + 9);
    uint64_t v33 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for URL?);
    uint64_t v125 = v102;
    int64_t v34 = *(void *)(*(void *)(v33 - 8) + 64);
    id v35 = alloca(v34);
    id v36 = alloca(v34);
    outlined init with copy of Either<LogisticRegressionClassifier<Float, String>, FullyConnectedNetworkClassifier<Float, String>>(v32, (uint64_t)v102, &demangling cache variable for type metadata for URL?);
    if (__swift_getEnumTagSinglePayload((uint64_t)v102, 1, v29) == 1)
    {
      outlined destroy of Adam<MLFewShotSoundClassifier.TemporalClassifier>((uint64_t)v102, &demangling cache variable for type metadata for URL?);
      uint64_t v37 = type metadata accessor for MLFewShotSoundClassifier.TemporalClassifier(0);
      Swift::String v121 = v102;
      uint64_t v115 = v37;
      int64_t v38 = *(void *)(*(void *)(v37 - 8) + 64);
      uint64_t v39 = alloca(v38);
      unint64_t v40 = alloca(v38);
      uint64_t v125 = v102;
      uint64_t v41 = alloca(v38);
      uint64_t v42 = alloca(v38);
      uint64_t v124 = *(uint64_t **)(*(uint64_t *)((char *)v124 + v123) + 16);
      if ((v21 & 0xC000000000000003) != 0)
      {
        id v43 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(1, v21);
      }
      else
      {
        if (*(void *)((char *)&dword_10 + (v21 & 0xFFFFFFFFFFFFF8)) <= 1uLL) {
          BUG();
        }
        id v43 = *(id *)(v21 + 40);
      }
      id v44 = v43;
      swift_bridgeObjectRelease(v21);
      id v45 = [v44 integerValue];

      MLFewShotSoundClassifier.TemporalClassifier.init(outputs:inputChannels:)((uint64_t)v124, (uint64_t)v45);
      long long v122 = (uint64_t *)type metadata accessor for ComputeDevice(0);
      uint64_t v124 = v102;
      uint64_t v46 = *(v122 - 1);
      int64_t v47 = *(void *)(v46 + 64);
      id v48 = alloca(v47);
      id v49 = alloca(v47);
      static ComputeDevice.cpu.getter();
      uint64_t v50 = lazy protocol witness table accessor for type MLFewShotSoundClassifier.TemporalClassifier and conformance MLFewShotSoundClassifier.TemporalClassifier();
      Layer.placed(on:)(v102, v115, v50);
      (*(void (**)(uint64_t *, uint64_t *))(v46 + 8))(v102, v122);
      outlined destroy of MLActivityClassifier.ModelParameters((uint64_t)v102, type metadata accessor for MLFewShotSoundClassifier.TemporalClassifier);
      unsigned int v51 = v113;
      uint64_t v52 = v123;
      outlined init with take of MLFewShotSoundClassifier.TemporalClassifier((uint64_t)v102, v123 + v113[10]);
      uint64_t v125 = v118;
    }
    else
    {
      uint64_t v74 = v119;
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(v119 + 32))(v122, v102, v29);
      uint64_t v75 = type metadata accessor for MLFewShotSoundClassifier.TemporalClassifier(0);
      uint64_t v108 = v102;
      uint64_t v115 = v75;
      int64_t v76 = *(void *)(*(void *)(v75 - 8) + 64);
      long double v77 = alloca(v76);
      uint64_t v78 = alloca(v76);
      uint64_t v111 = v102;
      uint64_t v109 = v102;
      int64_t v105 = v76;
      uint64_t v79 = alloca(v76);
      uint64_t v80 = alloca(v76);
      uint64_t v107 = v102;
      uint64_t v110 = v102;
      uint64_t v81 = alloca((int64_t)v120);
      uint64_t v82 = alloca((int64_t)v120);
      uint64_t v125 = *(uint64_t **)(v74 + 16);
      ((void (*)(uint64_t *, uint64_t *, uint64_t))v125)(v102, v122, v29);
      long long v112 = v102;
      if ((v21 & 0xC000000000000003) != 0)
      {
        id v83 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(1, v21);
      }
      else
      {
        if (*(void *)((char *)&dword_10 + (v21 & 0xFFFFFFFFFFFFF8)) <= 1uLL) {
          BUG();
        }
        id v83 = *(id *)(v21 + 40);
      }
      uint64_t v84 = v83;
      swift_bridgeObjectRelease(v21);
      id v106 = [v84 integerValue];

      uint64_t v124 = v102;
      long double v85 = alloca((int64_t)v120);
      uint64_t v86 = alloca((int64_t)v120);
      uint64_t v87 = v112;
      ((void (*)(uint64_t *, uint64_t *, uint64_t))v125)(v102, v112, v29);
      uint64_t v88 = v118;
      uint64_t v89 = Data.init(contentsOf:options:)(v102, 0);
      if (v88)
      {
        uint64_t v125 = v88;
        uint64_t v91 = *(void (**)(uint64_t *, uint64_t))(v119 + 8);
        v91(v102, v29);
        v91(v87, v29);
        outlined destroy of MLActivityClassifier.ModelParameters(v117, type metadata accessor for MLFewShotSoundClassifier.ModelParameters);
        outlined destroy of MLActivityClassifier.ModelParameters(v114, type metadata accessor for MLFewShotSoundClassifier.DataSource);
        v91(v122, v29);
        char v14 = 0;
LABEL_37:
        uint64_t v13 = v118;
        goto LABEL_6;
      }
      BlobsFile.init(data:)(v89, v90, v10, a4, a5);
      __m128 v120 = *(void (**)(uint64_t *, uint64_t))(v119 + 8);
      v120(v102, v29);
      uint64_t v92 = alloca(v105);
      long long v93 = alloca(v105);
      MLFewShotSoundClassifier.TemporalClassifier.init(inputChannels:blobsFile:)((unint64_t)v106, v102, *(double *)v10.i64);
      uint64_t v125 = 0;
      v120(v112, v29);
      uint64_t v94 = (uint64_t)v107;
      outlined init with take of MLFewShotSoundClassifier.TemporalClassifier((uint64_t)v102, (uint64_t)v107);
      uint64_t v95 = type metadata accessor for ComputeDevice(0);
      uint64_t v124 = v102;
      uint64_t v119 = *(void *)(v95 - 8);
      int64_t v96 = *(void *)(v119 + 64);
      uint64_t v97 = alloca(v96);
      long long v98 = alloca(v96);
      static ComputeDevice.cpu.getter();
      uint64_t v99 = lazy protocol witness table accessor for type MLFewShotSoundClassifier.TemporalClassifier and conformance MLFewShotSoundClassifier.TemporalClassifier();
      Layer.placed(on:)(v102, v115, v99);
      (*(void (**)(uint64_t *, uint64_t))(v119 + 8))(v102, v95);
      outlined destroy of MLActivityClassifier.ModelParameters(v94, type metadata accessor for MLFewShotSoundClassifier.TemporalClassifier);
      v120(v122, v29);
      unsigned int v51 = v113;
      uint64_t v52 = v123;
      outlined init with take of MLFewShotSoundClassifier.TemporalClassifier((uint64_t)v111, v123 + v113[10]);
    }
    Swift::String v121 = (uint64_t *)(v52 + v51[10]);
    uint64_t v53 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for GradientClippingMode?);
    uint64_t v124 = v102;
    int64_t v54 = *(void *)(*(void *)(v53 - 8) + 64);
    uint64_t v55 = alloca(v54);
    uint64_t v56 = alloca(v54);
    LODWORD(v102[0]) = 1065353216;
    unsigned int v57 = enum case for GradientClippingMode.byNorm(_:);
    uint64_t v58 = type metadata accessor for GradientClippingMode(0);
    (*(void (**)(uint64_t *, void, uint64_t))(*(void *)(v58 - 8) + 104))(v102, v57, v58);
    __swift_storeEnumTagSinglePayload((uint64_t)v102, 0, 1, v58);
    uint64_t v59 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for RegularizationKind?);
    long long v122 = v102;
    int64_t v60 = *(void *)(*(void *)(v59 - 8) + 64);
    uint64_t v61 = alloca(v60);
    uint64_t v62 = alloca(v60);
    uint64_t v63 = type metadata accessor for RegularizationKind(0);
    __swift_storeEnumTagSinglePayload((uint64_t)v102, 1, 1, v63);
    type metadata accessor for MLFewShotSoundClassifier.TemporalClassifier(0);
    uint64_t v64 = lazy protocol witness table accessor for type MLFewShotSoundClassifier.TemporalClassifier and conformance MLFewShotSoundClassifier.TemporalClassifier();
    *(void *)&double v65 = LODWORD(v116);
    Adam.init(for:learningRate:beta1:beta2:usesAMSGrad:epsilon:gradientClippingMode:regularizationKind:gradientScale:)(v121, 0, v102, v102, v115, v64, v116, 0.89999998, 0.99900001, 0.0000001, 1.0);
    id v66 = v125;
    MLFewShotSoundClassifier.train()(v65, COERCE_DOUBLE(1063675494));
    if (!v66)
    {
      outlined destroy of MLActivityClassifier.ModelParameters(v117, type metadata accessor for MLFewShotSoundClassifier.ModelParameters);
      outlined destroy of MLActivityClassifier.ModelParameters(v114, type metadata accessor for MLFewShotSoundClassifier.DataSource);
      return;
    }
    uint64_t v125 = v66;
    outlined destroy of MLActivityClassifier.ModelParameters(v117, type metadata accessor for MLFewShotSoundClassifier.ModelParameters);
    outlined destroy of MLActivityClassifier.ModelParameters(v114, type metadata accessor for MLFewShotSoundClassifier.DataSource);
    char v14 = 1;
    goto LABEL_37;
  }
  char v14 = 0;
  outlined destroy of MLActivityClassifier.ModelParameters(a2, type metadata accessor for MLFewShotSoundClassifier.ModelParameters);
  outlined destroy of MLActivityClassifier.ModelParameters(a1, type metadata accessor for MLFewShotSoundClassifier.DataSource);
LABEL_6:
  uint64_t v15 = v123;
LABEL_24:
  outlined destroy of MLActivityClassifier.ModelParameters(v15, type metadata accessor for MLFewShotSoundClassifier.ModelParameters);
  outlined destroy of MLActivityClassifier.ModelParameters(v103, type metadata accessor for MLClassifierMetrics);
  outlined destroy of MLActivityClassifier.ModelParameters(v104, type metadata accessor for MLClassifierMetrics);
  uint64_t v73 = v113;
  if (!v13)
  {
    swift_bridgeObjectRelease(*(void *)(v15 + v113[8]));
    swift_bridgeObjectRelease(*(void *)(v15 + v73[9]));
  }
  if (v14)
  {
    outlined destroy of MLActivityClassifier.ModelParameters(v15 + v73[10], type metadata accessor for MLFewShotSoundClassifier.TemporalClassifier);
    outlined destroy of Adam<MLFewShotSoundClassifier.TemporalClassifier>(v15 + v73[11], &demangling cache variable for type metadata for Adam<MLFewShotSoundClassifier.TemporalClassifier>);
  }
  if (!v13) {
}
  }

uint64_t MLFewShotSoundClassifier.train()(double a1, double a2)
{
  ML24MLFewShotSoundClassifierV5train33_E9D7D47DE11AB89722960D8AD055ABB6LLyyKFSi5label_So12bc15C9embeddingtM23A10C_AHtXEfU_Tf3nnnpf_nTf1cn_n = (void *)v2;
  Builtin::Int1 v4 = _stdlib_isOSVersionAtLeastOrVariantVersionAtLeast(_:_:_:_:_:_:)(0xDuLL, 0, 0, 0x10uLL, 0, 0);
  uint64_t v5 = 128;
  if (v4) {
    uint64_t v5 = v3[2];
  }
  uint64_t v226 = (unsigned char *)v5;
  uint64_t v200 = *v3;
  uint64_t v213 = (int *)type metadata accessor for MLFewShotSoundClassifier(0);
  uint64_t v6 = v213[12];
  v227 = v3;
  uint64_t v189 = v6;
  uint64_t v7 = *(void **)((char *)v3 + v6);
  id v8 = [v7 trainingDataLabels];
  id v9 = v8;
  uint64_t v190 = type metadata accessor for OS_os_log(0, &lazy cache variable for type metadata for NSNumber, NSNumber_ptr);
  uint64_t v10 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v9, v190);

  id v11 = [v7 trainingDataEmbeddings];
  id v12 = v11;
  uint64_t v191 = type metadata accessor for OS_os_log(0, &lazy cache variable for type metadata for MLMultiArray, MLMultiArray_ptr);
  uint64_t v13 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v12, v191);

  uint64_t v14 = (uint64_t)ML24MLFewShotSoundClassifierV5train33_E9D7D47DE11AB89722960D8AD055ABB6LLyyKFSi5label_So12bc15C9embeddingtM23A10C_AHtXEfU_Tf3nnnpf_nTf1cn_n;
  ML24MLFewShotSoundClassifierV5train33_E9D7D47DE11AB89722960D8AD055ABB6LLyyKFSi5label_So12bc15C9embeddingtM23A10C_AHtXEfU_Tf3nnnpf_nTf1cn_n = _sSTsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFs12Zip2SequenceVySaySo8NSNumberCGSaySo12MLMultiArrayCGG_Si5label_AL9embeddingts5NeverOTg505_sSo8f5CSo12gh42CSiADIgggdo_AB_ADtSi5label_AD9embeddingts5k128OIegnrzr_TR098_s8CreateML24MLFewShotSoundClassifierV5train33_E9D7D47DE11AB89722960D8AD055ABB6LLyyKFSi5label_So12bc15C9embeddingtM23A10C_AHtXEfU_Tf3nnnpf_nTf1cn_n(v10, v13);
  uint64_t v225 = v14;
  swift_bridgeObjectRelease(v13);
  swift_bridgeObjectRelease(v10);
  uint64_t v201 = v171;
  uint64_t v214 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Dataset<[(label: Int, embedding: MLMultiArray)], DataSample<Tensor, Tensor>>);
  uint64_t v211 = *(void *)(v214 - 8);
  int64_t v15 = *(void *)(v211 + 64);
  uint64_t v16 = alloca(v15);
  char v17 = alloca(v15);
  id v217 = v171;
  MLModel v218 = v171;
  id v18 = v213;
  int64_t v19 = *(void *)(*((void *)v213 - 1) + 64);
  uint64_t v20 = alloca(v19);
  uint64_t v21 = alloca(v19);
  uint64_t v224 = v171;
  outlined init with copy of MLTrainingSessionParameters((uint64_t)v227, (uint64_t)v171, type metadata accessor for MLFewShotSoundClassifier);
  uint64_t v206 = type metadata accessor for ComputeDevice(0);
  double v221 = COERCE_DOUBLE(v171);
  char v223 = *(unsigned char **)(v206 - 8);
  int64_t v22 = *((void *)v223 + 8);
  id v23 = alloca(v22);
  id v24 = alloca(v22);
  uint64_t v219 = v171;
  static ComputeDevice.cpu.getter();
  v207.i64[0] = (uint64_t)v171;
  v215 = *(unsigned char **)(*(void *)&v171[v18[8]] + 16);
  uint64_t v205 = (uint64_t)ML24MLFewShotSoundClassifierV5train33_E9D7D47DE11AB89722960D8AD055ABB6LLyyKFSi5label_So12bc15C9embeddingtM23A10C_AHtXEfU_Tf3nnnpf_nTf1cn_n;
  memset(v172, 0, 40);
  id v25 = alloca(v22);
  id v26 = alloca(v22);
  uint64_t v209 = v171;
  uint64_t v27 = v206;
  uint64_t v28 = v223;
  (*((void (**)(unsigned char *, unsigned char *, uint64_t))v223 + 2))(v171, v171, v206);
  uint64_t v29 = v28[80];
  uint64_t v30 = ~v28[80] & (v29 + 24);
  int64_t v192 = v22;
  uint64_t v31 = (char *)swift_allocObject(&unk_398348, v30 + v22, v29 | 7);
  uint64_t v222 = (void (*)(unsigned char *, unsigned char *))v31;
  *((void *)v31 + 2) = v215;
  (*((void (**)(char *, unsigned char *, uint64_t))v28 + 4))(&v31[v30], v209, v27);
  uint64_t v32 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Dataset<[(label: Int, embedding: MLMultiArray)], DataSample<Tensor, Tensor>>.PrefetchMode);
  v207.i64[0] = (uint64_t)v171;
  uint64_t v33 = *(void *)(v32 - 8);
  int64_t v34 = *(void *)(v33 + 64);
  id v35 = alloca(v34);
  id v36 = alloca(v34);
  (*(void (**)(unsigned char *, void, uint64_t))(v33 + 104))(v171, enum case for Dataset.PrefetchMode.serial<A, B>(_:), v32);
  swift_bridgeObjectRetain((_BYTE)ML24MLFewShotSoundClassifierV5train33_E9D7D47DE11AB89722960D8AD055ABB6LLyyKFSi5label_So12bc15C9embeddingtM23A10C_AHtXEfU_Tf3nnnpf_nTf1cn_n);
  v215 = (unsigned char *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [(label: Int, embedding: MLMultiArray)]);
  uint64_t v37 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for DataSample<Tensor, Tensor>);
  uint64_t v38 = lazy protocol witness table accessor for type FullyConnectedNetworkClassifier<Float, String> and conformance FullyConnectedNetworkClassifier<A, B>(&lazy protocol witness table cache variable for type [(label: Int, embedding: MLMultiArray)] and conformance [A], &demangling cache variable for type metadata for [(label: Int, embedding: MLMultiArray)], (uint64_t)&protocol conformance descriptor for [A]);
  uint64_t v39 = lazy protocol witness table accessor for type DataSample<Tensor, Tensor> and conformance <> DataSample<A, B>();
  uint64_t v40 = lazy protocol witness table accessor for type FullyConnectedNetworkClassifier<Float, String> and conformance FullyConnectedNetworkClassifier<A, B>(&lazy protocol witness table cache variable for type DataSample<Tensor, Tensor> and conformance DataSample<A, B>, &demangling cache variable for type metadata for DataSample<Tensor, Tensor>, (uint64_t)&protocol conformance descriptor for DataSample<A, B>);
  uint64_t v216 = v37;
  Dataset.init(samples:batchSize:batchSampler:dropsLastPartialBatch:prefetchMode:transform:)(&v205, v226, v172, 1, v171, partial apply for closure #1 in MLFewShotSoundClassifier.makeSoundDataset<A>(from:batchSize:device:), v222, v215, v37, v38, v39, v40);
  char v193 = (void (*)(unsigned char *, uint64_t))*((void *)v223 + 1);
  v193(v219, v206);
  outlined destroy of MLActivityClassifier.ModelParameters((uint64_t)v224, type metadata accessor for MLFewShotSoundClassifier);
  swift_bridgeObjectRelease((_BYTE)ML24MLFewShotSoundClassifierV5train33_E9D7D47DE11AB89722960D8AD055ABB6LLyyKFSi5label_So12bc15C9embeddingtM23A10C_AHtXEfU_Tf3nnnpf_nTf1cn_n);
  uint64_t v41 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for MLFewShotSoundClassifier.TemporalClassifier?);
  char v202 = v171;
  int64_t v194 = *(void *)(*(void *)(v41 - 8) + 64);
  uint64_t v42 = alloca(v194);
  id v43 = alloca(v194);
  v220 = v171;
  uint64_t v44 = (uint64_t)v227 + *(int *)(type metadata accessor for MLFewShotSoundClassifier.ModelParameters(0) + 36);
  int64_t v45 = *(void *)(*(void *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for URL?)
                              - 8)
                  + 64);
  uint64_t v46 = alloca(v45);
  int64_t v47 = alloca(v45);
  outlined init with copy of Either<LogisticRegressionClassifier<Float, String>, FullyConnectedNetworkClassifier<Float, String>>(v44, (uint64_t)v171, &demangling cache variable for type metadata for URL?);
  uint64_t v48 = type metadata accessor for URL(0);
  LODWORD(ML24MLFewShotSoundClassifierV5train33_E9D7D47DE11AB89722960D8AD055ABB6LLyyKFSi5label_So12bc15C9embeddingtM23A10C_AHtXEfU_Tf3nnnpf_nTf1cn_n) = 1;
  LODWORD(v44) = __swift_getEnumTagSinglePayload((uint64_t)v171, 1, v48);
  uint64_t v49 = (uint64_t)v227;
  uint64_t v50 = (uint64_t)v220;
  outlined destroy of Adam<MLFewShotSoundClassifier.TemporalClassifier>((uint64_t)v171, &demangling cache variable for type metadata for URL?);
  BOOL v51 = v44 == 1;
  uint64_t v52 = v213;
  if (!v51)
  {
    outlined init with copy of MLTrainingSessionParameters(v49 + v213[10], v50, type metadata accessor for MLFewShotSoundClassifier.TemporalClassifier);
    LODWORD(ML24MLFewShotSoundClassifierV5train33_E9D7D47DE11AB89722960D8AD055ABB6LLyyKFSi5label_So12bc15C9embeddingtM23A10C_AHtXEfU_Tf3nnnpf_nTf1cn_n) = 0;
  }
  uint64_t v53 = type metadata accessor for MLFewShotSoundClassifier.TemporalClassifier(0);
  __swift_storeEnumTagSinglePayload(v50, ML24MLFewShotSoundClassifierV5train33_E9D7D47DE11AB89722960D8AD055ABB6LLyyKFSi5label_So12bc15C9embeddingtM23A10C_AHtXEfU_Tf3nnnpf_nTf1cn_n, 1, v53);
  if (v200 <= 0) {
    BUG();
  }
  uint64_t v210 = v53;
  uint64_t v54 = v52[8];
  uint64_t v55 = type metadata accessor for _MetricUtilities.ConfusionMatrixMeter(0);
  uint64_t v56 = v54;
  uint64_t v198 = v55;
  unsigned int v203 = enum case for LearningPhase.training(_:);
  unsigned int v204 = enum case for LearningPhase.inference(_:);
  uint64_t v57 = 1;
  v58.i64[0] = 0x7FEFFFFFFFFFFFFFLL;
  double v199 = 1.797693134862316e308;
  uint64_t v208 = v54;
  while (1)
  {
    uint64_t v184 = v57;
    uint64_t v59 = *(void *)(*(void *)(v49 + v56) + 16);
    swift_allocObject(v198, *(unsigned int *)(v198 + 48), *(unsigned __int16 *)(v198 + 52));
    uint64_t v60 = v225;
    uint64_t v212 = _MetricUtilities.ConfusionMatrixMeter.init(classCount:)(v59);
    if (v60)
    {
LABEL_31:
      outlined destroy of Adam<MLFewShotSoundClassifier.TemporalClassifier>((uint64_t)v220, &demangling cache variable for type metadata for MLFewShotSoundClassifier.TemporalClassifier?);
      return (*(uint64_t (**)(unsigned char *, uint64_t))(v211 + 8))(v217, v214);
    }
    uint64_t v225 = 0;
    uint64_t v61 = type metadata accessor for LearningPhase(0);
    ML24MLFewShotSoundClassifierV5train33_E9D7D47DE11AB89722960D8AD055ABB6LLyyKFSi5label_So12bc15C9embeddingtM23A10C_AHtXEfU_Tf3nnnpf_nTf1cn_n = v229;
    char v223 = *(unsigned char **)(v61 - 8);
    int64_t v187 = *((void *)v223 + 8);
    uint64_t v62 = alloca(v187);
    uint64_t v63 = alloca(v187);
    unint64_t v186 = (void (*)(unsigned char *, void, uint64_t))*((void *)v223 + 13);
    v186(v229, v203, v61);
    uint64_t v64 = (uint64_t)v227 + v52[10];
    uint64_t v197 = lazy protocol witness table accessor for type MLFewShotSoundClassifier.TemporalClassifier and conformance MLFewShotSoundClassifier.TemporalClassifier();
    uint64_t v219 = (unsigned char *)v64;
    Layer.prepare(for:)(v229, v210, v197);
    double v65 = (void (*)(unsigned char *, uint64_t))*((void *)v223 + 1);
    uint64_t v185 = v61;
    unint64_t v188 = v65;
    v65(v229, v61);
    uint64_t v66 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for LazyMapSequence<Batches<LazyPrefetchingMapSequence<LazySequence<Sampling<[(label: Int, embedding: MLMultiArray)]>>, DataSample<Tensor, Tensor>>>, DataSample<Tensor, Tensor>>.Iterator);
    id v182 = v229;
    int64_t v67 = *(void *)(*(void *)(v66 - 8) + 64);
    uint64_t v68 = alloca(v67);
    uint64_t v69 = alloca(v67);
    uint64_t v70 = v229;
    Dataset.makeIterator()(v214);
    uint64_t v71 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for DataSample<Tensor, Tensor>?);
    uint64_t v183 = v229;
    int64_t v72 = *(void *)(*(void *)(v71 - 8) + 64);
    uint64_t v73 = alloca(v72);
    uint64_t v74 = alloca(v72);
    uint64_t v195 = v229;
    uint64_t v181 = *(int *)(v66 + 44);
    uint64_t v180 = lazy protocol witness table accessor for type FullyConnectedNetworkClassifier<Float, String> and conformance FullyConnectedNetworkClassifier<A, B>(&lazy protocol witness table cache variable for type Batches<LazyPrefetchingMapSequence<LazySequence<Sampling<[(label: Int, embedding: MLMultiArray)]>>, DataSample<Tensor, Tensor>>>.Iterator and conformance Batches<A>.Iterator, &demangling cache variable for type metadata for Batches<LazyPrefetchingMapSequence<LazySequence<Sampling<[(label: Int, embedding: MLMultiArray)]>>, DataSample<Tensor, Tensor>>>.Iterator, (uint64_t)&protocol conformance descriptor for Batches<A>.Iterator);
    uint64_t v75 = v216;
    for (i = v229; ; uint64_t v70 = i)
    {
      uint64_t v76 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Batches<LazyPrefetchingMapSequence<LazySequence<Sampling<[(label: Int, embedding: MLMultiArray)]>>, DataSample<Tensor, Tensor>>>.Iterator);
      dispatch thunk of IteratorProtocol.next()(v76, v180);
      char v77 = v172[0];
      if (v172[0])
      {
        uint64_t v78 = *(void (**)(uint64_t *))&v70[v181];
        uint64_t v205 = v172[0];
        uint64_t v79 = v195;
        v78(&v205);
        uint64_t v80 = (uint64_t)v79;
        swift_bridgeObjectRelease(v77);
        uint64_t v81 = (uint64_t)v79;
        uint64_t v82 = 0;
      }
      else
      {
        uint64_t v80 = (uint64_t)v195;
        uint64_t v81 = (uint64_t)v195;
        uint64_t v82 = 1;
      }
      __swift_storeEnumTagSinglePayload(v81, v82, 1, v75);
      uint64_t v83 = (uint64_t)v227;
      if (__swift_getEnumTagSinglePayload(v80, 1, v75) == 1) {
        break;
      }
      v215 = v229;
      uint64_t v84 = *(void *)(v75 - 8);
      int64_t v85 = *(void *)(v84 + 64);
      uint64_t v86 = alloca(v85);
      uint64_t v87 = alloca(v85);
      char v223 = v229;
      uint64_t v209 = (unsigned char *)v84;
      (*(void (**)(unsigned char *, uint64_t, uint64_t))(v84 + 32))(v229, v80, v75);
      uint64_t v88 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (loss: Tensor, predictions: Tensor));
      v172[6] = v229;
      uint64_t v177 = v88;
      int64_t v89 = *(void *)(*(void *)(v88 - 8) + 64);
      unint64_t v90 = alloca(v89);
      uint64_t v91 = alloca(v89);
      ML24MLFewShotSoundClassifierV5train33_E9D7D47DE11AB89722960D8AD055ABB6LLyyKFSi5label_So12bc15C9embeddingtM23A10C_AHtXEfU_Tf3nnnpf_nTf1cn_n = v229;
      uint64_t v92 = type metadata accessor for Tensor(0);
      uint64_t v174 = v229;
      uint64_t v93 = *(void *)(v92 - 8);
      uint64_t v94 = v92;
      MLModel v218 = (unsigned char *)v92;
      uint64_t v176 = v93;
      int64_t v95 = *(void *)(v93 + 64);
      int64_t v96 = alloca(v95);
      uint64_t v97 = alloca(v95);
      uint64_t v226 = v229;
      uint64_t v175 = v229;
      int64_t v173 = v95;
      long long v98 = alloca(v95);
      uint64_t v99 = alloca(v95);
      double v221 = COERCE_DOUBLE(v229);
      uint64_t v100 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Tensor?);
      uint64_t v178 = v229;
      uint64_t v224 = *(unsigned char **)(*(void *)(v100 - 8) + 64);
      uint64_t v101 = alloca((int64_t)v224);
      uint64_t v102 = alloca((int64_t)v224);
      __swift_storeEnumTagSinglePayload((uint64_t)v229, 1, 1, v94);
      long long v179 = v229;
      LODWORD(v222) = *(_DWORD *)(v83 + 24);
      uint64_t v103 = v210;
      int64_t v104 = *(void *)(*(void *)(v210 - 8) + 64);
      __m128 v207 = (__m128)*(unint64_t *)(v83 + 28);
      int64_t v105 = alloca(v104);
      id v106 = alloca(v104);
      outlined init with copy of MLTrainingSessionParameters((uint64_t)v219, (uint64_t)v229, type metadata accessor for MLFewShotSoundClassifier.TemporalClassifier);
      uint64_t v107 = alloca(48);
      uint64_t v108 = alloca(48);
      uint64_t v230 = v223;
      int v231 = (int)v222;
      __m128 v58 = _mm_shuffle_ps(v207, v207, 225);
      _mm_storel_ps((double *)&v232, v58);
      retaddr = v229;
      uint64_t v222 = (void (*)(unsigned char *, unsigned char *))valueWithGradient<A>(at:of:)(v226, v229, partial apply for closure #1 in MLFewShotSoundClassifier.performStep(on:), v229, v103, v197);
      outlined destroy of MLActivityClassifier.ModelParameters((uint64_t)v229, type metadata accessor for MLFewShotSoundClassifier.TemporalClassifier);
      uint64_t v109 = alloca((int64_t)v224);
      uint64_t v110 = alloca((int64_t)v224);
      outlined init with copy of Either<LogisticRegressionClassifier<Float, String>, FullyConnectedNetworkClassifier<Float, String>>((uint64_t)v229, (uint64_t)v229, &demangling cache variable for type metadata for Tensor?);
      uint64_t v111 = (uint64_t)v218;
      if (__swift_getEnumTagSinglePayload((uint64_t)v229, 1, (uint64_t)v218) == 1) {
        BUG();
      }
      uint64_t v224 = (char *)ML24MLFewShotSoundClassifierV5train33_E9D7D47DE11AB89722960D8AD055ABB6LLyyKFSi5label_So12bc15C9embeddingtM23A10C_AHtXEfU_Tf3nnnpf_nTf1cn_n
           + *(int *)(v177 + 48);
      uint64_t v112 = v111;
      uint64_t v113 = v111;
      uint64_t v114 = v176;
      (*(void (**)(double, unsigned char *, uint64_t))(v176 + 32))(COERCE_DOUBLE(*(void *)&v221), v229, v113);
      outlined destroy of Adam<MLFewShotSoundClassifier.TemporalClassifier>((uint64_t)v229, &demangling cache variable for type metadata for Tensor?);
      uint64_t v115 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Adam<MLFewShotSoundClassifier.TemporalClassifier>);
      char v116 = (char)v222;
      Adam.update(_:with:)(v219, v222, v115);
      swift_bridgeObjectRelease(v116);
      uint64_t v117 = (uint64_t)v226;
      (*(void (**)(void *, unsigned char *, uint64_t))(v114 + 16))(ML24MLFewShotSoundClassifierV5train33_E9D7D47DE11AB89722960D8AD055ABB6LLyyKFSi5label_So12bc15C9embeddingtM23A10C_AHtXEfU_Tf3nnnpf_nTf1cn_n, v226, v112);
      double v118 = v221;
      softmax(_:alongAxis:)(*(void *)&v221, -1);
      uint64_t v119 = *(void (**)(unsigned char *, unsigned char *))(v114 + 8);
      uint64_t v222 = v119;
      v119(*(unsigned char **)&v118, (unsigned char *)v112);
      v119((unsigned char *)v117, (unsigned char *)v112);
      uint64_t v226 = v229;
      __m128 v120 = alloca(v173);
      Swift::String v121 = alloca(v173);
      uint64_t v75 = v216;
      long long v122 = v223;
      DataSample.labels.getter(v216);
      _MetricUtilities.ConfusionMatrixMeter.add(predicted:target:)((uint64_t)v224, (uint64_t)v229);
      v222(v229, v218);
      outlined destroy of Adam<MLFewShotSoundClassifier.TemporalClassifier>((uint64_t)ML24MLFewShotSoundClassifierV5train33_E9D7D47DE11AB89722960D8AD055ABB6LLyyKFSi5label_So12bc15C9embeddingtM23A10C_AHtXEfU_Tf3nnnpf_nTf1cn_n, &demangling cache variable for type metadata for (loss: Tensor, predictions: Tensor));
      (*((void (**)(unsigned char *, uint64_t))v209 + 1))(v122, v75);
    }
    outlined destroy of Adam<MLFewShotSoundClassifier.TemporalClassifier>((uint64_t)i, &demangling cache variable for type metadata for LazyMapSequence<Batches<LazyPrefetchingMapSequence<LazySequence<Sampling<[(label: Int, embedding: MLMultiArray)]>>, DataSample<Tensor, Tensor>>>, DataSample<Tensor, Tensor>>.Iterator);
    uint64_t v123 = *(void (**)(unsigned char *, unsigned char *))(*(void *)(type metadata accessor for MLClassifierMetrics(0) - 8)
                                                   + 64);
    uint64_t v124 = alloca((int64_t)v123);
    uint64_t v125 = alloca((int64_t)v123);
    uint64_t v126 = v225;
    static _MetricUtilities.makeClassifierMetrics(confusionMeter:classLabels:)(*(double *)v58.i64, a2, v212, *(void *)(v83 + v208));
    uint64_t v225 = v126;
    if (v126)
    {
      swift_release();
      outlined destroy of Adam<MLFewShotSoundClassifier.TemporalClassifier>((uint64_t)v220, &demangling cache variable for type metadata for MLFewShotSoundClassifier.TemporalClassifier?);
      return (*(uint64_t (**)(unsigned char *, uint64_t))(v211 + 8))(v217, v214);
    }
    uint64_t v222 = v123;
    outlined assign with take of MLClassifierMetrics((uint64_t)v229, v83 + v213[5], type metadata accessor for MLClassifierMetrics);
    ML24MLFewShotSoundClassifierV5train33_E9D7D47DE11AB89722960D8AD055ABB6LLyyKFSi5label_So12bc15C9embeddingtM23A10C_AHtXEfU_Tf3nnnpf_nTf1cn_n = v229;
    uint64_t v127 = alloca(v187);
    unint64_t v128 = alloca(v187);
    uint64_t v129 = v185;
    v186(v229, v204, v185);
    Layer.prepare(for:)(v229, v210, v197);
    v188(v229, v129);
    char v223 = v229;
    MLModel v218 = *(unsigned char **)(v216 - 8);
    int64_t v130 = *((void *)v218 + 8);
    unint64_t v131 = alloca(v130);
    uint64_t v132 = alloca(v130);
    ML24MLFewShotSoundClassifierV5train33_E9D7D47DE11AB89722960D8AD055ABB6LLyyKFSi5label_So12bc15C9embeddingtM23A10C_AHtXEfU_Tf3nnnpf_nTf1cn_n = v229;
    unint64_t v133 = *(void **)(v83 + v189);
    id v134 = [v133 validationDataEmbeddings];
    id v135 = v134;
    uint64_t v226 = (unsigned char *)static Array._unconditionallyBridgeFromObjectiveC(_:)(v135, v191);

    id v136 = [v133 validationDataLabels];
    id v137 = v136;
    char v138 = (void *)static Array._unconditionallyBridgeFromObjectiveC(_:)(v137, v190);
    uint64_t v224 = v138;

    double v221 = COERCE_DOUBLE(v229);
    uint64_t v139 = alloca(v192);
    unsigned int v140 = alloca(v192);
    static ComputeDevice.cpu.getter();
    uint64_t v141 = ML24MLFewShotSoundClassifierV5train33_E9D7D47DE11AB89722960D8AD055ABB6LLyyKFSi5label_So12bc15C9embeddingtM23A10C_AHtXEfU_Tf3nnnpf_nTf1cn_n;
    LOBYTE(v133) = (_BYTE)v226;
    MLFewShotSoundClassifier.validationData(features:labels:device:)((uint64_t)v226, v138, (uint64_t)v229);
    swift_bridgeObjectRelease((_BYTE)v133);
    swift_bridgeObjectRelease((_BYTE)v224);
    v193(v229, v206);
    uint64_t v142 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (loss: Tensor, predictions: Tensor));
    uint64_t v226 = v229;
    int64_t v143 = *(void *)(*(void *)(v142 - 8) + 64);
    uint64_t v144 = alloca(v143);
    char v145 = alloca(v143);
    uint64_t v146 = &v229[*(int *)(v142 + 48)];
    MLFewShotSoundClassifier.performValidationStep(on:)((uint64_t)v229, (uint64_t)v146, v141);
    Tensor.scalar<A>(as:)(&type metadata for Float, &type metadata for Float, &protocol witness table for Float);
    a2 = *(float *)v172;
    double v147 = v199;
    double v221 = *(float *)v172;
    if (v199 >= *(float *)v172)
    {
      uint64_t v224 = v229;
      uint64_t v150 = (uint64_t)v220;
      outlined destroy of Adam<MLFewShotSoundClassifier.TemporalClassifier>((uint64_t)v220, &demangling cache variable for type metadata for MLFewShotSoundClassifier.TemporalClassifier?);
      outlined init with copy of MLTrainingSessionParameters((uint64_t)v219, v150, type metadata accessor for MLFewShotSoundClassifier.TemporalClassifier);
      __swift_storeEnumTagSinglePayload(v150, 0, 1, v210);
      uint64_t v151 = *(void *)(*(uint64_t *)((char *)v227 + v208) + 16);
      swift_allocObject(v198, *(unsigned int *)(v198 + 48), *(unsigned __int16 *)(v198 + 52));
      uint64_t v152 = v225;
      uint64_t v153 = _MetricUtilities.ConfusionMatrixMeter.init(classCount:)(v151);
      if (v152)
      {
        swift_release();
        outlined destroy of Adam<MLFewShotSoundClassifier.TemporalClassifier>((uint64_t)v224, &demangling cache variable for type metadata for (loss: Tensor, predictions: Tensor));
        (*((void (**)(void *, uint64_t))v218 + 1))(ML24MLFewShotSoundClassifierV5train33_E9D7D47DE11AB89722960D8AD055ABB6LLyyKFSi5label_So12bc15C9embeddingtM23A10C_AHtXEfU_Tf3nnnpf_nTf1cn_n, v216);
        outlined destroy of Adam<MLFewShotSoundClassifier.TemporalClassifier>((uint64_t)v220, &demangling cache variable for type metadata for MLFewShotSoundClassifier.TemporalClassifier?);
        return (*(uint64_t (**)(unsigned char *, uint64_t))(v211 + 8))(v217, v214);
      }
      uint64_t v154 = v153;
      uint64_t v209 = (unsigned char *)type metadata accessor for Tensor(0);
      v207.i64[0] = (uint64_t)v229;
      v215 = (unsigned char *)*((void *)v209 - 1);
      int64_t v155 = *((void *)v215 + 8);
      uint64_t v156 = alloca(v155);
      uint64_t v157 = alloca(v155);
      uint64_t v225 = 0;
      DataSample.labels.getter(v216);
      _MetricUtilities.ConfusionMatrixMeter.add(predicted:target:)((uint64_t)v146, (uint64_t)v229);
      (*((void (**)(unsigned char *, unsigned char *))v215 + 1))(v229, v209);
      uint64_t v158 = alloca((int64_t)v222);
      long long v159 = alloca((int64_t)v222);
      uint64_t v160 = v225;
      static _MetricUtilities.makeClassifierMetrics(confusionMeter:classLabels:)(v147, a2, v154, *(uint64_t *)((char *)v227 + v208));
      swift_release();
      swift_release();
      outlined destroy of Adam<MLFewShotSoundClassifier.TemporalClassifier>((uint64_t)v224, &demangling cache variable for type metadata for (loss: Tensor, predictions: Tensor));
      (*((void (**)(void *, uint64_t))v218 + 1))(ML24MLFewShotSoundClassifierV5train33_E9D7D47DE11AB89722960D8AD055ABB6LLyyKFSi5label_So12bc15C9embeddingtM23A10C_AHtXEfU_Tf3nnnpf_nTf1cn_n, v216);
      uint64_t v225 = v160;
      if (v160) {
        goto LABEL_31;
      }
      uint64_t v148 = v213;
      uint64_t v49 = (uint64_t)v227;
      outlined assign with take of MLClassifierMetrics((uint64_t)v229, (uint64_t)v227 + v213[6], type metadata accessor for MLClassifierMetrics);
      *(double *)v58.i64 = v221;
      double v199 = v221;
      uint64_t v149 = (uint64_t)v220;
    }
    else
    {
      swift_release();
      outlined destroy of Adam<MLFewShotSoundClassifier.TemporalClassifier>((uint64_t)v229, &demangling cache variable for type metadata for (loss: Tensor, predictions: Tensor));
      (*((void (**)(unsigned char *, uint64_t))v218 + 1))(v141, v216);
      uint64_t v148 = v213;
      uint64_t v149 = (uint64_t)v220;
      uint64_t v49 = (uint64_t)v227;
      *(double *)v58.i64 = v221;
    }
    uint64_t v161 = v184;
    BOOL v51 = v184 == v200;
    *(void *)(v49 + v148[7]) = v58.i64[0];
    uint64_t v56 = v208;
    if (v51) {
      break;
    }
    uint64_t v52 = v148;
    BOOL v162 = __OFADD__(1, v161);
    uint64_t v57 = v161 + 1;
    if (v162) {
      BUG();
    }
  }
  (*(void (**)(unsigned char *, uint64_t, uint64_t, uint64_t))(v211 + 8))(v217, v214, v161, v208);
  ML24MLFewShotSoundClassifierV5train33_E9D7D47DE11AB89722960D8AD055ABB6LLyyKFSi5label_So12bc15C9embeddingtM23A10C_AHtXEfU_Tf3nnnpf_nTf1cn_n = v229;
  uint64_t v164 = v210;
  int64_t v165 = *(void *)(*(void *)(v210 - 8) + 64);
  uint64_t v166 = alloca(v165);
  uint64_t v167 = alloca(v165);
  uint64_t v168 = alloca(v194);
  uint64_t v169 = alloca(v194);
  outlined init with take of MLFewShotSoundClassifier.TemporalClassifier?(v149, (uint64_t)v229);
  if (__swift_getEnumTagSinglePayload((uint64_t)v229, 1, v164) == 1)
  {
    uint64_t v170 = (uint64_t)v219;
    outlined init with copy of MLTrainingSessionParameters((uint64_t)v219, (uint64_t)v229, type metadata accessor for MLFewShotSoundClassifier.TemporalClassifier);
    outlined destroy of Adam<MLFewShotSoundClassifier.TemporalClassifier>((uint64_t)v229, &demangling cache variable for type metadata for MLFewShotSoundClassifier.TemporalClassifier?);
  }
  else
  {
    outlined init with take of MLFewShotSoundClassifier.TemporalClassifier((uint64_t)v229, (uint64_t)v229);
    uint64_t v170 = (uint64_t)v219;
  }
  return outlined assign with take of MLClassifierMetrics((uint64_t)v229, v170, type metadata accessor for MLFewShotSoundClassifier.TemporalClassifier);
}

uint64_t specialized Array._checkSubscript(_:wasNativeTypeChecked:)(uint64_t a1, char a2, uint64_t a3)
{
  return specialized Array._checkSubscript(_:wasNativeTypeChecked:)(a1, a2, a3);
}

{
  uint64_t result;

  if (a2)
  {
    if (a1 < 0) {
      BUG();
    }
    uint64_t result = 0xFFFFFFFFFFFFF8;
    if (*(void *)((char *)&dword_10 + (a3 & 0xFFFFFFFFFFFFF8)) <= (unint64_t)a1) {
      BUG();
    }
  }
  return result;
}

uint64_t lazy protocol witness table accessor for type MLFewShotSoundClassifier.TemporalClassifier and conformance MLFewShotSoundClassifier.TemporalClassifier()
{
  uint64_t result = lazy protocol witness table cache variable for type MLFewShotSoundClassifier.TemporalClassifier and conformance MLFewShotSoundClassifier.TemporalClassifier;
  if (!lazy protocol witness table cache variable for type MLFewShotSoundClassifier.TemporalClassifier and conformance MLFewShotSoundClassifier.TemporalClassifier)
  {
    uint64_t v1 = type metadata accessor for MLFewShotSoundClassifier.TemporalClassifier(255);
    uint64_t result = swift_getWitnessTable(&protocol conformance descriptor for MLFewShotSoundClassifier.TemporalClassifier, v1);
    lazy protocol witness table cache variable for type MLFewShotSoundClassifier.TemporalClassifier and conformance MLFewShotSoundClassifier.TemporalClassifier = result;
  }
  return result;
}

uint64_t outlined init with take of MLFewShotSoundClassifier.TemporalClassifier(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = type metadata accessor for MLFewShotSoundClassifier.TemporalClassifier(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v2 - 8) + 32))(a2, a1, v2);
  return a2;
}

uint64_t initializeBufferWithCopyOfBuffer for MLFewShotSoundClassifier(uint64_t a1, uint64_t *a2, int *a3)
{
  int v4 = *(_DWORD *)(*((void *)a3 - 1) + 80);
  if ((v4 & 0x20000) != 0)
  {
    uint64_t v12 = *a2;
    *(void *)a1 = *a2;
    uint64_t v13 = v12 + ((v4 + 16) & ~v4);
    swift_retain();
  }
  else
  {
    *(void *)a1 = *a2;
    *(_DWORD *)(a1 + 8) = *((_DWORD *)a2 + 2);
    *(void *)(a1 + 16) = a2[2];
    *(void *)(a1 + 24) = a2[3];
    *(_DWORD *)(a1 + 32) = *((_DWORD *)a2 + 8);
    uint64_t v5 = type metadata accessor for MLFewShotSoundClassifier.ModelParameters(0);
    uint64_t v6 = *(int *)(v5 + 32);
    uint64_t v7 = type metadata accessor for URL(0);
    __dst = *(void (**)(uint64_t, char *, uint64_t))(*(void *)(v7 - 8) + 16);
    __dst(a1 + v6, (char *)a2 + v6, v7);
    uint64_t v8 = *(int *)(v5 + 36);
    id v9 = (void *)(a1 + v8);
    uint64_t v10 = (char *)a2 + v8;
    if (__swift_getEnumTagSinglePayload((uint64_t)v10, 1, v7))
    {
      uint64_t v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for URL?);
      memcpy(v9, v10, *(void *)(*(void *)(v11 - 8) + 64));
    }
    else
    {
      __dst((uint64_t)v9, v10, v7);
      __swift_storeEnumTagSinglePayload((uint64_t)v9, 0, 1, v7);
    }
    uint64_t v14 = a3[5];
    uint64_t v15 = a1;
    uint64_t v16 = (char *)(a1 + v14);
    char v17 = (char *)a2 + v14;
    __dsta = (void *)type metadata accessor for MLClassifierMetrics.Contents(0);
    unsigned int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload(v17, __dsta);
    if (EnumCaseMultiPayload == 2)
    {
      uint64_t v23 = *(void *)v17;
      swift_errorRetain(*(void *)v17);
      *(void *)uint64_t v16 = v23;
    }
    else if (EnumCaseMultiPayload == 1)
    {
      *(void *)uint64_t v16 = *(void *)v17;
      uint64_t v104 = type metadata accessor for MLClassifierMetrics.Precomputed(0);
      uint64_t v19 = *(int *)(v104 + 20);
      uint64_t v107 = &v16[v19];
      uint64_t v20 = type metadata accessor for DataFrame(0);
      uint64_t v112 = v16;
      uint64_t v21 = *(void (**)(char *, char *, uint64_t))(*(void *)(v20 - 8) + 16);
      int64_t v22 = &v17[v19];
      uint64_t v15 = a1;
      v21(v107, v22, v20);
      v21(&v112[*(int *)(v104 + 24)], &v17[*(int *)(v104 + 24)], v20);
      uint64_t v16 = v112;
    }
    else
    {
      uint64_t v24 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Either<ClassificationMetrics<String>, ClassificationMetrics<Int>>);
      int v25 = swift_getEnumCaseMultiPayload(v17, v24);
      BOOL v26 = v25 == 1;
      uint64_t v27 = &demangling cache variable for type metadata for ClassificationMetrics<String>;
      if (v25 == 1) {
        uint64_t v27 = &demangling cache variable for type metadata for ClassificationMetrics<Int>;
      }
      uint64_t v28 = __swift_instantiateConcreteTypeFromMangledName(v27);
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v28 - 8) + 16))(v16, v17, v28);
      swift_storeEnumTagMultiPayload(v16, v24, v26);
      uint64_t v15 = a1;
    }
    swift_storeEnumTagMultiPayload(v16, __dsta, EnumCaseMultiPayload);
    uint64_t v29 = a3[6];
    uint64_t v30 = (char *)(v15 + v29);
    uint64_t v31 = (char *)a2 + v29;
    unsigned int v32 = swift_getEnumCaseMultiPayload(v31, __dsta);
    if (v32 == 2)
    {
      uint64_t v37 = *(void *)v31;
      swift_errorRetain(*(void *)v31);
      *(void *)uint64_t v30 = v37;
    }
    else if (v32 == 1)
    {
      *(void *)uint64_t v30 = *(void *)v31;
      uint64_t v113 = type metadata accessor for MLClassifierMetrics.Precomputed(0);
      uint64_t v33 = *(int *)(v113 + 20);
      uint64_t v108 = &v30[v33];
      uint64_t v34 = type metadata accessor for DataFrame(0);
      id v35 = *(void (**)(char *, char *, uint64_t))(*(void *)(v34 - 8) + 16);
      id v36 = &v31[v33];
      uint64_t v15 = a1;
      v35(v108, v36, v34);
      v35(&v30[*(int *)(v113 + 24)], &v31[*(int *)(v113 + 24)], v34);
      unsigned int v32 = 1;
    }
    else
    {
      uint64_t v38 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Either<ClassificationMetrics<String>, ClassificationMetrics<Int>>);
      int v39 = swift_getEnumCaseMultiPayload(v31, v38);
      BOOL v40 = v39 == 1;
      uint64_t v41 = &demangling cache variable for type metadata for ClassificationMetrics<String>;
      if (v39 == 1) {
        uint64_t v41 = &demangling cache variable for type metadata for ClassificationMetrics<Int>;
      }
      uint64_t v42 = __swift_instantiateConcreteTypeFromMangledName(v41);
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v42 - 8) + 16))(v30, v31, v42);
      swift_storeEnumTagMultiPayload(v30, v38, v40);
      uint64_t v15 = a1;
    }
    swift_storeEnumTagMultiPayload(v30, __dsta, v32);
    *(void *)(v15 + a3[7]) = *(uint64_t *)((char *)a2 + a3[7]);
    uint64_t v43 = a3[8];
    uint64_t v44 = *(uint64_t *)((char *)a2 + v43);
    *(void *)(v15 + v43) = v44;
    uint64_t v45 = a3[9];
    uint64_t v46 = v15;
    uint64_t v47 = *(uint64_t *)((char *)a2 + v45);
    *(void *)(v46 + v45) = v47;
    uint64_t v48 = a3[10];
    uint64_t v49 = v46 + v48;
    uint64_t v50 = (uint64_t)a2 + v48;
    uint64_t v51 = type metadata accessor for Conv2D(0);
    __dstd = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v51 - 8) + 16);
    swift_bridgeObjectRetain(v44);
    swift_bridgeObjectRetain(v47);
    __dstd(v49, v50, v51);
    uint64_t v52 = type metadata accessor for MLFewShotSoundClassifier.LeakyConv2D(0);
    *(_DWORD *)(*(int *)(v52 + 20) + v49) = *(_DWORD *)(*(int *)(v52 + 20) + v50);
    __dste = (int *)type metadata accessor for MLFewShotSoundClassifier.ConvolutionalNetwork(0);
    uint64_t v53 = __dste[5];
    uint64_t v54 = v53 + v49;
    uint64_t v109 = v53 + v49;
    uint64_t v114 = v50 + v53;
    *(_OWORD *)(v53 + v49) = *(_OWORD *)(v53 + v50);
    uint64_t v55 = type metadata accessor for MLFewShotSoundClassifier.CausalConv1D(0);
    uint64_t v56 = *(int *)(v55 + 20);
    uint64_t v101 = v54 + v56;
    uint64_t v57 = type metadata accessor for Conv1D(0);
    __m128 v58 = *(void (**)(uint64_t, uint64_t))(*(void *)(v57 - 8) + 16);
    uint64_t v59 = v114 + v56;
    uint64_t v60 = v57;
    v58(v101, v59);
    uint64_t v61 = v58;
    *(_DWORD *)(*(int *)(v55 + 24) + v109) = *(_DWORD *)(*(int *)(v55 + 24) + v114);
    uint64_t v62 = __dste[6];
    uint64_t v115 = v49 + v62;
    uint64_t v110 = v50 + v62;
    *(_OWORD *)(v62 + v49) = *(_OWORD *)(v62 + v50);
    uint64_t v63 = v60;
    uint64_t v105 = v60;
    uint64_t v64 = v60;
    double v65 = (void (*)(uint64_t, uint64_t, uint64_t))v61;
    ((void (*)(uint64_t, uint64_t, uint64_t))v61)(v49 + v62 + *(int *)(v55 + 20), v50 + v62 + *(int *)(v55 + 20), v64);
    *(_DWORD *)(*(int *)(v55 + 24) + v115) = *(_DWORD *)(*(int *)(v55 + 24) + v110);
    uint64_t v66 = __dste[7];
    uint64_t v116 = v49 + v66;
    uint64_t v111 = v50 + v66;
    *(_OWORD *)(v66 + v49) = *(_OWORD *)(v66 + v50);
    v65(v49 + v66 + *(int *)(v55 + 20), v50 + v66 + *(int *)(v55 + 20), v63);
    int64_t v67 = v65;
    *(_DWORD *)(*(int *)(v55 + 24) + v116) = *(_DWORD *)(*(int *)(v55 + 24) + v111);
    uint64_t v68 = __dste[8];
    uint64_t v69 = v49 + v68;
    uint64_t v70 = v50 + v68;
    *(_OWORD *)(v68 + v49) = *(_OWORD *)(v68 + v50);
    v67(v49 + v68 + *(int *)(v55 + 20), v50 + v68 + *(int *)(v55 + 20), v105);
    *(_DWORD *)(*(int *)(v55 + 24) + v69) = *(_DWORD *)(*(int *)(v55 + 24) + v70);
    uint64_t v71 = *(int *)(type metadata accessor for MLFewShotSoundClassifier.TemporalClassifier(0) + 20);
    uint64_t v72 = v71 + v49;
    uint64_t v73 = v71 + v50;
    uint64_t v74 = type metadata accessor for Dense(0);
    uint64_t v75 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v74 - 8) + 16);
    v75(v72, v73, v74);
    uint64_t v76 = type metadata accessor for MLFewShotSoundClassifier.MLP(0);
    v75(*(int *)(v76 + 20) + v72, *(int *)(v76 + 20) + v73, v74);
    uint64_t v77 = a3[11];
    uint64_t v78 = a1 + v77;
    uint64_t v79 = (uint64_t)a2 + v77;
    *(_OWORD *)(a1 + v77) = *(_OWORD *)((char *)a2 + v77);
    uint64_t v80 = (int *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Adam<MLFewShotSoundClassifier.TemporalClassifier>);
    uint64_t v81 = v80[12];
    __dstb = (void *)(v78 + v81);
    uint64_t v82 = (const void *)(v79 + v81);
    uint64_t v83 = type metadata accessor for GradientClippingMode(0);
    if (__swift_getEnumTagSinglePayload((uint64_t)v82, 1, v83))
    {
      uint64_t v84 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for GradientClippingMode?);
      memcpy(__dstb, v82, *(void *)(*(void *)(v84 - 8) + 64));
    }
    else
    {
      (*(void (**)(void *, const void *, uint64_t))(*(void *)(v83 - 8) + 16))(__dstb, v82, v83);
      __swift_storeEnumTagSinglePayload((uint64_t)__dstb, 0, 1, v83);
    }
    uint64_t v85 = v80[13];
    __dstc = (void *)(v78 + v85);
    uint64_t v86 = (const void *)(v79 + v85);
    uint64_t v87 = type metadata accessor for RegularizationKind(0);
    if (__swift_getEnumTagSinglePayload((uint64_t)v86, 1, v87))
    {
      uint64_t v88 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for RegularizationKind?);
      memcpy(__dstc, v86, *(void *)(*(void *)(v88 - 8) + 64));
    }
    else
    {
      (*(void (**)(void *, const void *, uint64_t))(*(void *)(v87 - 8) + 16))(__dstc, v86, v87);
      __swift_storeEnumTagSinglePayload((uint64_t)__dstc, 0, 1, v87);
    }
    *(_DWORD *)(v78 + v80[14]) = *(_DWORD *)(v79 + v80[14]);
    *(void *)(v78 + v80[15]) = *(void *)(v79 + v80[15]);
    uint64_t v89 = v80[16];
    uint64_t v90 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for OptimizerStateDictionary<MLFewShotSoundClassifier.TemporalClassifier>);
    uint64_t v91 = v78 + v89;
    uint64_t v92 = v79 + v89;
    uint64_t v93 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v90 - 8) + 16);
    v93(v91, v92, v90);
    v93(v78 + v80[17], v79 + v80[17], v90);
    uint64_t v94 = v80[18];
    int64_t v95 = (void *)(v94 + v78);
    int64_t v96 = (const void *)(v94 + v79);
    if (__swift_getEnumTagSinglePayload(v94 + v79, 1, v90))
    {
      uint64_t v97 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for OptimizerStateDictionary<MLFewShotSoundClassifier.TemporalClassifier>?);
      memcpy(v95, v96, *(void *)(*(void *)(v97 - 8) + 64));
    }
    else
    {
      v93((uint64_t)v95, (uint64_t)v96, v90);
      __swift_storeEnumTagSinglePayload((uint64_t)v95, 0, 1, v90);
    }
    uint64_t v13 = a1;
    uint64_t v98 = a3[12];
    uint64_t v99 = *(void **)((char *)a2 + v98);
    *(void *)(a1 + v98) = v99;
    v99;
  }
  return v13;
}

void destroy for MLFewShotSoundClassifier(uint64_t a1, int *a2)
{
  uint64_t v2 = a1;
  uint64_t v3 = type metadata accessor for MLFewShotSoundClassifier.ModelParameters(0);
  uint64_t v4 = a1 + *(int *)(v3 + 32);
  uint64_t v5 = type metadata accessor for URL(0);
  uint64_t v6 = *(void (**)(uint64_t, uint64_t))(*(void *)(v5 - 8) + 8);
  v6(v4, v5);
  uint64_t v7 = a1 + *(int *)(v3 + 36);
  if (!__swift_getEnumTagSinglePayload(v7, 1, v5)) {
    v6(v7, v5);
  }
  uint64_t v8 = (char *)(a1 + a2[5]);
  uint64_t v9 = type metadata accessor for MLClassifierMetrics.Contents(0);
  int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload(v8, v9);
  uint64_t v11 = a2;
  switch(EnumCaseMultiPayload)
  {
    case 2:
      swift_errorRelease(*(void *)v8);
      break;
    case 1:
      uint64_t v52 = type metadata accessor for MLClassifierMetrics.Precomputed(0);
      uint64_t v14 = &v8[*(int *)(v52 + 20)];
      uint64_t v15 = type metadata accessor for DataFrame(0);
      uint64_t v16 = *(void (**)(char *, uint64_t))(*(void *)(v15 - 8) + 8);
      char v17 = v14;
      uint64_t v2 = a1;
      v16(v17, v15);
      uint64_t v18 = v15;
      uint64_t v11 = a2;
      v16(&v8[*(int *)(v52 + 24)], v18);
      break;
    case 0:
      uint64_t v12 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Either<ClassificationMetrics<String>, ClassificationMetrics<Int>>);
      if (swift_getEnumCaseMultiPayload(v8, v12) == 1) {
        uint64_t v13 = &demangling cache variable for type metadata for ClassificationMetrics<Int>;
      }
      else {
        uint64_t v13 = &demangling cache variable for type metadata for ClassificationMetrics<String>;
      }
      uint64_t v19 = __swift_instantiateConcreteTypeFromMangledName(v13);
      (*(void (**)(char *, uint64_t))(*(void *)(v19 - 8) + 8))(v8, v19);
      break;
  }
  uint64_t v20 = (char *)(v2 + v11[6]);
  int v21 = swift_getEnumCaseMultiPayload(v20, v9);
  switch(v21)
  {
    case 2:
      swift_errorRelease(*(void *)v20);
      break;
    case 1:
      uint64_t v24 = type metadata accessor for MLClassifierMetrics.Precomputed(0);
      int v25 = &v20[*(int *)(v24 + 20)];
      uint64_t v26 = type metadata accessor for DataFrame(0);
      uint64_t v27 = *(void (**)(char *, uint64_t))(*(void *)(v26 - 8) + 8);
      v27(v25, v26);
      uint64_t v28 = *(int *)(v24 + 24);
      uint64_t v11 = a2;
      uint64_t v29 = v26;
      uint64_t v2 = a1;
      v27(&v20[v28], v29);
      break;
    case 0:
      uint64_t v22 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Either<ClassificationMetrics<String>, ClassificationMetrics<Int>>);
      if (swift_getEnumCaseMultiPayload(v20, v22) == 1) {
        uint64_t v23 = &demangling cache variable for type metadata for ClassificationMetrics<Int>;
      }
      else {
        uint64_t v23 = &demangling cache variable for type metadata for ClassificationMetrics<String>;
      }
      uint64_t v30 = __swift_instantiateConcreteTypeFromMangledName(v23);
      (*(void (**)(char *, uint64_t))(*(void *)(v30 - 8) + 8))(v20, v30);
      break;
  }
  swift_bridgeObjectRelease(*(void *)(v2 + v11[8]));
  swift_bridgeObjectRelease(*(void *)(v2 + v11[9]));
  uint64_t v31 = v2 + v11[10];
  uint64_t v32 = type metadata accessor for Conv2D(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v32 - 8) + 8))(v31, v32);
  uint64_t v53 = (int *)type metadata accessor for MLFewShotSoundClassifier.ConvolutionalNetwork(0);
  uint64_t v33 = v31 + v53[5];
  uint64_t v34 = type metadata accessor for MLFewShotSoundClassifier.CausalConv1D(0);
  uint64_t v35 = v33 + *(int *)(v34 + 20);
  uint64_t v36 = type metadata accessor for Conv1D(0);
  uint64_t v37 = *(void (**)(uint64_t, uint64_t))(*(void *)(v36 - 8) + 8);
  v37(v35, v36);
  v37(v31 + v53[6] + *(int *)(v34 + 20), v36);
  v37(v31 + v53[7] + *(int *)(v34 + 20), v36);
  v37(v31 + v53[8] + *(int *)(v34 + 20), v36);
  uint64_t v38 = v31 + *(int *)(type metadata accessor for MLFewShotSoundClassifier.TemporalClassifier(0) + 20);
  uint64_t v39 = type metadata accessor for Dense(0);
  BOOL v40 = *(void (**)(uint64_t, uint64_t))(*(void *)(v39 - 8) + 8);
  v40(v38, v39);
  uint64_t v41 = type metadata accessor for MLFewShotSoundClassifier.MLP(0);
  v40(v38 + *(int *)(v41 + 20), v39);
  uint64_t v42 = a1 + a2[11];
  uint64_t v43 = (int *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Adam<MLFewShotSoundClassifier.TemporalClassifier>);
  uint64_t v44 = v42 + v43[12];
  uint64_t v45 = type metadata accessor for GradientClippingMode(0);
  if (!__swift_getEnumTagSinglePayload(v44, 1, v45)) {
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v45 - 8) + 8))(v44, v45);
  }
  uint64_t v46 = v42 + v43[13];
  uint64_t v47 = type metadata accessor for RegularizationKind(0);
  if (!__swift_getEnumTagSinglePayload(v46, 1, v47)) {
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v47 - 8) + 8))(v46, v47);
  }
  uint64_t v48 = v42 + v43[16];
  uint64_t v49 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for OptimizerStateDictionary<MLFewShotSoundClassifier.TemporalClassifier>);
  uint64_t v50 = *(void (**)(uint64_t, uint64_t))(*(void *)(v49 - 8) + 8);
  v50(v48, v49);
  v50(v42 + v43[17], v49);
  uint64_t v51 = v42 + v43[18];
  if (!__swift_getEnumTagSinglePayload(v51, 1, v49)) {
    v50(v51, v49);
  }
}

uint64_t initializeWithCopy for MLFewShotSoundClassifier(uint64_t a1, uint64_t a2, int *a3)
{
  *(void *)a1 = *(void *)a2;
  *(_DWORD *)(a1 + 8) = *(_DWORD *)(a2 + 8);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  uint64_t v3 = type metadata accessor for MLFewShotSoundClassifier.ModelParameters(0);
  uint64_t v4 = *(int *)(v3 + 32);
  uint64_t v5 = type metadata accessor for URL(0);
  __dst = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16);
  __dst(v4 + a1, a2 + v4, v5);
  uint64_t v6 = *(int *)(v3 + 36);
  uint64_t v7 = (void *)(v6 + a1);
  uint64_t v8 = (const void *)(a2 + v6);
  if (__swift_getEnumTagSinglePayload((uint64_t)v8, 1, v5))
  {
    uint64_t v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for URL?);
    memcpy(v7, v8, *(void *)(*(void *)(v9 - 8) + 64));
  }
  else
  {
    __dst((uint64_t)v7, (uint64_t)v8, v5);
    __swift_storeEnumTagSinglePayload((uint64_t)v7, 0, 1, v5);
  }
  uint64_t v10 = a3[5];
  uint64_t v11 = (char *)(a1 + v10);
  uint64_t v12 = (char *)(a2 + v10);
  uint64_t v13 = type metadata accessor for MLClassifierMetrics.Contents(0);
  unsigned int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload(v12, v13);
  __dsta = (void *)v13;
  if (EnumCaseMultiPayload == 2)
  {
    uint64_t v19 = *(void *)v12;
    swift_errorRetain(*(void *)v12);
    *(void *)uint64_t v11 = v19;
  }
  else if (EnumCaseMultiPayload == 1)
  {
    *(void *)uint64_t v11 = *(void *)v12;
    uint64_t v100 = type metadata accessor for MLClassifierMetrics.Precomputed(0);
    uint64_t v15 = *(int *)(v100 + 20);
    uint64_t v102 = &v11[v15];
    uint64_t v16 = type metadata accessor for DataFrame(0);
    uint64_t v107 = v11;
    char v17 = *(void (**)(char *, char *, uint64_t))(*(void *)(v16 - 8) + 16);
    uint64_t v18 = &v12[v15];
    uint64_t v13 = (uint64_t)__dsta;
    v17(v102, v18, v16);
    v17(&v107[*(int *)(v100 + 24)], &v12[*(int *)(v100 + 24)], v16);
    uint64_t v11 = v107;
  }
  else
  {
    uint64_t v20 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Either<ClassificationMetrics<String>, ClassificationMetrics<Int>>);
    int v21 = swift_getEnumCaseMultiPayload(v12, v20);
    BOOL v22 = v21 == 1;
    uint64_t v23 = &demangling cache variable for type metadata for ClassificationMetrics<String>;
    if (v21 == 1) {
      uint64_t v23 = &demangling cache variable for type metadata for ClassificationMetrics<Int>;
    }
    uint64_t v24 = __swift_instantiateConcreteTypeFromMangledName(v23);
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v24 - 8) + 16))(v11, v12, v24);
    swift_storeEnumTagMultiPayload(v11, v20, v22);
    uint64_t v13 = (uint64_t)__dsta;
  }
  swift_storeEnumTagMultiPayload(v11, v13, EnumCaseMultiPayload);
  uint64_t v25 = a3[6];
  uint64_t v26 = (char *)(a1 + v25);
  uint64_t v27 = (char *)(a2 + v25);
  unsigned int v28 = swift_getEnumCaseMultiPayload(v27, v13);
  if (v28 == 2)
  {
    uint64_t v33 = *(void *)v27;
    swift_errorRetain(*(void *)v27);
    *(void *)uint64_t v26 = v33;
  }
  else if (v28 == 1)
  {
    *(void *)uint64_t v26 = *(void *)v27;
    uint64_t v108 = type metadata accessor for MLClassifierMetrics.Precomputed(0);
    uint64_t v29 = *(int *)(v108 + 20);
    uint64_t v103 = &v26[v29];
    uint64_t v30 = type metadata accessor for DataFrame(0);
    uint64_t v31 = *(void (**)(char *, char *, uint64_t))(*(void *)(v30 - 8) + 16);
    uint64_t v32 = &v27[v29];
    uint64_t v13 = (uint64_t)__dsta;
    v31(v103, v32, v30);
    v31(&v26[*(int *)(v108 + 24)], &v27[*(int *)(v108 + 24)], v30);
    unsigned int v28 = 1;
  }
  else
  {
    uint64_t v34 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Either<ClassificationMetrics<String>, ClassificationMetrics<Int>>);
    int v35 = swift_getEnumCaseMultiPayload(v27, v34);
    BOOL v36 = v35 == 1;
    uint64_t v37 = &demangling cache variable for type metadata for ClassificationMetrics<String>;
    if (v35 == 1) {
      uint64_t v37 = &demangling cache variable for type metadata for ClassificationMetrics<Int>;
    }
    uint64_t v38 = __swift_instantiateConcreteTypeFromMangledName(v37);
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v38 - 8) + 16))(v26, v27, v38);
    swift_storeEnumTagMultiPayload(v26, v34, v36);
    uint64_t v13 = (uint64_t)__dsta;
  }
  swift_storeEnumTagMultiPayload(v26, v13, v28);
  *(void *)(a1 + a3[7]) = *(void *)(a2 + a3[7]);
  uint64_t v39 = a3[8];
  uint64_t v40 = *(void *)(a2 + v39);
  *(void *)(a1 + v39) = v40;
  uint64_t v41 = a3[9];
  uint64_t v42 = *(void *)(a2 + v41);
  *(void *)(a1 + v41) = v42;
  uint64_t v43 = a3[10];
  uint64_t v44 = a1 + v43;
  uint64_t v45 = a2 + v43;
  uint64_t v46 = type metadata accessor for Conv2D(0);
  __dstd = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v46 - 8) + 16);
  swift_bridgeObjectRetain(v40);
  swift_bridgeObjectRetain(v42);
  __dstd(v44, v45, v46);
  uint64_t v47 = type metadata accessor for MLFewShotSoundClassifier.LeakyConv2D(0);
  *(_DWORD *)(*(int *)(v47 + 20) + v44) = *(_DWORD *)(*(int *)(v47 + 20) + v45);
  __dste = (int *)type metadata accessor for MLFewShotSoundClassifier.ConvolutionalNetwork(0);
  uint64_t v48 = __dste[5];
  uint64_t v49 = v48 + v44;
  uint64_t v104 = v48 + v44;
  uint64_t v109 = v45 + v48;
  *(_OWORD *)(v48 + v44) = *(_OWORD *)(v48 + v45);
  uint64_t v50 = type metadata accessor for MLFewShotSoundClassifier.CausalConv1D(0);
  uint64_t v51 = *(int *)(v50 + 20);
  uint64_t v96 = v49 + v51;
  uint64_t v52 = type metadata accessor for Conv1D(0);
  uint64_t v53 = *(void (**)(uint64_t, uint64_t))(*(void *)(v52 - 8) + 16);
  uint64_t v54 = v109 + v51;
  uint64_t v55 = v52;
  v53(v96, v54);
  uint64_t v56 = v53;
  *(_DWORD *)(*(int *)(v50 + 24) + v104) = *(_DWORD *)(*(int *)(v50 + 24) + v109);
  uint64_t v57 = __dste[6];
  uint64_t v110 = v44 + v57;
  uint64_t v105 = v45 + v57;
  *(_OWORD *)(v57 + v44) = *(_OWORD *)(v57 + v45);
  uint64_t v58 = v55;
  uint64_t v101 = v55;
  uint64_t v59 = v55;
  uint64_t v60 = (void (*)(uint64_t, uint64_t, uint64_t))v56;
  ((void (*)(uint64_t, uint64_t, uint64_t))v56)(v44 + v57 + *(int *)(v50 + 20), v45 + v57 + *(int *)(v50 + 20), v59);
  *(_DWORD *)(*(int *)(v50 + 24) + v110) = *(_DWORD *)(*(int *)(v50 + 24) + v105);
  uint64_t v61 = __dste[7];
  uint64_t v111 = v44 + v61;
  uint64_t v106 = v45 + v61;
  *(_OWORD *)(v61 + v44) = *(_OWORD *)(v61 + v45);
  v60(v44 + v61 + *(int *)(v50 + 20), v45 + v61 + *(int *)(v50 + 20), v58);
  uint64_t v62 = v60;
  *(_DWORD *)(*(int *)(v50 + 24) + v111) = *(_DWORD *)(*(int *)(v50 + 24) + v106);
  uint64_t v63 = __dste[8];
  uint64_t v64 = v44 + v63;
  uint64_t v65 = v45 + v63;
  *(_OWORD *)(v63 + v44) = *(_OWORD *)(v63 + v45);
  v62(v44 + v63 + *(int *)(v50 + 20), v45 + v63 + *(int *)(v50 + 20), v101);
  *(_DWORD *)(*(int *)(v50 + 24) + v64) = *(_DWORD *)(*(int *)(v50 + 24) + v65);
  uint64_t v66 = *(int *)(type metadata accessor for MLFewShotSoundClassifier.TemporalClassifier(0) + 20);
  uint64_t v67 = v66 + v44;
  uint64_t v68 = v66 + v45;
  uint64_t v69 = type metadata accessor for Dense(0);
  uint64_t v70 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v69 - 8) + 16);
  v70(v67, v68, v69);
  uint64_t v71 = type metadata accessor for MLFewShotSoundClassifier.MLP(0);
  v70(*(int *)(v71 + 20) + v67, *(int *)(v71 + 20) + v68, v69);
  uint64_t v72 = a3[11];
  uint64_t v73 = a1 + v72;
  uint64_t v74 = a2 + v72;
  *(_OWORD *)(a1 + v72) = *(_OWORD *)(a2 + v72);
  uint64_t v75 = (int *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Adam<MLFewShotSoundClassifier.TemporalClassifier>);
  uint64_t v76 = v75[12];
  __dstb = (void *)(v73 + v76);
  uint64_t v77 = (const void *)(v74 + v76);
  uint64_t v78 = type metadata accessor for GradientClippingMode(0);
  if (__swift_getEnumTagSinglePayload((uint64_t)v77, 1, v78))
  {
    uint64_t v79 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for GradientClippingMode?);
    memcpy(__dstb, v77, *(void *)(*(void *)(v79 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(*(void *)(v78 - 8) + 16))(__dstb, v77, v78);
    __swift_storeEnumTagSinglePayload((uint64_t)__dstb, 0, 1, v78);
  }
  uint64_t v80 = v75[13];
  __dstc = (void *)(v73 + v80);
  uint64_t v81 = (const void *)(v74 + v80);
  uint64_t v82 = type metadata accessor for RegularizationKind(0);
  if (__swift_getEnumTagSinglePayload((uint64_t)v81, 1, v82))
  {
    uint64_t v83 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for RegularizationKind?);
    memcpy(__dstc, v81, *(void *)(*(void *)(v83 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(*(void *)(v82 - 8) + 16))(__dstc, v81, v82);
    __swift_storeEnumTagSinglePayload((uint64_t)__dstc, 0, 1, v82);
  }
  *(_DWORD *)(v73 + v75[14]) = *(_DWORD *)(v74 + v75[14]);
  *(void *)(v73 + v75[15]) = *(void *)(v74 + v75[15]);
  uint64_t v84 = v75[16];
  uint64_t v85 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for OptimizerStateDictionary<MLFewShotSoundClassifier.TemporalClassifier>);
  uint64_t v86 = v73 + v84;
  uint64_t v87 = v74 + v84;
  uint64_t v88 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v85 - 8) + 16);
  v88(v86, v87, v85);
  v88(v73 + v75[17], v74 + v75[17], v85);
  uint64_t v89 = v75[18];
  uint64_t v90 = (void *)(v89 + v73);
  uint64_t v91 = (const void *)(v89 + v74);
  if (__swift_getEnumTagSinglePayload(v89 + v74, 1, v85))
  {
    uint64_t v92 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for OptimizerStateDictionary<MLFewShotSoundClassifier.TemporalClassifier>?);
    memcpy(v90, v91, *(void *)(*(void *)(v92 - 8) + 64));
  }
  else
  {
    v88((uint64_t)v90, (uint64_t)v91, v85);
    __swift_storeEnumTagSinglePayload((uint64_t)v90, 0, 1, v85);
  }
  uint64_t v93 = a3[12];
  uint64_t v94 = *(void **)(a2 + v93);
  *(void *)(a1 + v93) = v94;
  v94;
  return a1;
}

uint64_t assignWithCopy for MLFewShotSoundClassifier(uint64_t a1, uint64_t a2, int *a3)
{
  *(void *)a1 = *(void *)a2;
  *(_DWORD *)(a1 + 8) = *(_DWORD *)(a2 + 8);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(_DWORD *)(a1 + 24) = *(_DWORD *)(a2 + 24);
  *(_DWORD *)(a1 + 28) = *(_DWORD *)(a2 + 28);
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  uint64_t v3 = type metadata accessor for MLFewShotSoundClassifier.ModelParameters(0);
  uint64_t v4 = *(int *)(v3 + 32);
  uint64_t v5 = type metadata accessor for URL(0);
  uint64_t v127 = *(void *)(v5 - 8);
  __dst = *(void (**)(uint64_t, uint64_t, uint64_t))(v127 + 24);
  __dst(v4 + a1, a2 + v4, v5);
  uint64_t v6 = *(int *)(v3 + 36);
  uint64_t v7 = (void *)(v6 + a1);
  uint64_t v8 = (const void *)(a2 + v6);
  int EnumTagSinglePayload = __swift_getEnumTagSinglePayload((uint64_t)v7, 1, v5);
  int v10 = __swift_getEnumTagSinglePayload((uint64_t)v8, 1, v5);
  if (EnumTagSinglePayload)
  {
    if (!v10)
    {
      (*(void (**)(void *, const void *, uint64_t))(v127 + 16))(v7, v8, v5);
      __swift_storeEnumTagSinglePayload((uint64_t)v7, 0, 1, v5);
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  if (v10)
  {
    (*(void (**)(void *, uint64_t, uint64_t, void (*)(uint64_t, uint64_t, uint64_t)))(v127 + 8))(v7, v5, v11, __dst);
LABEL_6:
    uint64_t v12 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for URL?);
    memcpy(v7, v8, *(void *)(*(void *)(v12 - 8) + 64));
    goto LABEL_7;
  }
  __dst((uint64_t)v7, (uint64_t)v8, v5);
LABEL_7:
  uint64_t v13 = a1;
  uint64_t v14 = a2;
  if (a1 == a2) {
    goto LABEL_24;
  }
  uint64_t v15 = a3[5];
  uint64_t v16 = (char *)(a1 + v15);
  char v17 = (char *)(a2 + v15);
  outlined destroy of MLActivityClassifier.ModelParameters((uint64_t)v16, type metadata accessor for MLClassifierMetrics.Contents);
  __dsta = (void *)type metadata accessor for MLClassifierMetrics.Contents(0);
  unsigned int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload(v17, __dsta);
  if (EnumCaseMultiPayload == 2)
  {
    uint64_t v26 = *(void *)v17;
    swift_errorRetain(*(void *)v17);
    uint64_t v25 = 2;
    *(void *)uint64_t v16 = v26;
    uint64_t v24 = a2;
  }
  else if (EnumCaseMultiPayload == 1)
  {
    *(void *)uint64_t v16 = *(void *)v17;
    uint64_t v117 = type metadata accessor for MLClassifierMetrics.Precomputed(0);
    uint64_t v19 = *(int *)(v117 + 20);
    Swift::String v121 = &v16[v19];
    uint64_t v20 = type metadata accessor for DataFrame(0);
    int v21 = *(void (**)(char *, char *, uint64_t))(*(void *)(v20 - 8) + 16);
    BOOL v22 = &v17[v19];
    uint64_t v13 = a1;
    v21(v121, v22, v20);
    uint64_t v23 = v20;
    uint64_t v24 = a2;
    v21(&v16[*(int *)(v117 + 24)], &v17[*(int *)(v117 + 24)], v23);
    uint64_t v25 = 1;
  }
  else
  {
    unsigned int v27 = EnumCaseMultiPayload;
    uint64_t v28 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Either<ClassificationMetrics<String>, ClassificationMetrics<Int>>);
    int v29 = swift_getEnumCaseMultiPayload(v17, v28);
    BOOL v30 = v29 == 1;
    uint64_t v31 = &demangling cache variable for type metadata for ClassificationMetrics<String>;
    if (v29 == 1) {
      uint64_t v31 = &demangling cache variable for type metadata for ClassificationMetrics<Int>;
    }
    uint64_t v32 = __swift_instantiateConcreteTypeFromMangledName(v31);
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v32 - 8) + 16))(v16, v17, v32);
    swift_storeEnumTagMultiPayload(v16, v28, v30);
    uint64_t v13 = a1;
    uint64_t v24 = a2;
    uint64_t v25 = v27;
  }
  swift_storeEnumTagMultiPayload(v16, __dsta, v25);
  uint64_t v33 = a3[6];
  uint64_t v34 = (char *)(v13 + v33);
  int v35 = (char *)(v24 + v33);
  outlined destroy of MLActivityClassifier.ModelParameters((uint64_t)v34, type metadata accessor for MLClassifierMetrics.Contents);
  unsigned int v36 = swift_getEnumCaseMultiPayload(v35, __dsta);
  if (v36 == 2)
  {
    uint64_t v42 = *(void *)v35;
    swift_errorRetain(*(void *)v35);
    *(void *)uint64_t v34 = v42;
LABEL_22:
    uint64_t v14 = a2;
    goto LABEL_23;
  }
  if (v36 != 1)
  {
    uint64_t v43 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Either<ClassificationMetrics<String>, ClassificationMetrics<Int>>);
    int v44 = swift_getEnumCaseMultiPayload(v35, v43);
    BOOL v45 = v44 == 1;
    uint64_t v46 = &demangling cache variable for type metadata for ClassificationMetrics<String>;
    if (v44 == 1) {
      uint64_t v46 = &demangling cache variable for type metadata for ClassificationMetrics<Int>;
    }
    uint64_t v47 = __swift_instantiateConcreteTypeFromMangledName(v46);
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v47 - 8) + 16))(v34, v35, v47);
    swift_storeEnumTagMultiPayload(v34, v43, v45);
    uint64_t v13 = a1;
    goto LABEL_22;
  }
  *(void *)uint64_t v34 = *(void *)v35;
  uint64_t v128 = type metadata accessor for MLClassifierMetrics.Precomputed(0);
  uint64_t v37 = *(int *)(v128 + 20);
  long long v122 = &v34[v37];
  uint64_t v38 = type metadata accessor for DataFrame(0);
  uint64_t v39 = *(void (**)(char *, char *, uint64_t))(*(void *)(v38 - 8) + 16);
  uint64_t v40 = &v35[v37];
  uint64_t v13 = a1;
  v39(v122, v40, v38);
  uint64_t v41 = v38;
  uint64_t v14 = a2;
  v39(&v34[*(int *)(v128 + 24)], &v35[*(int *)(v128 + 24)], v41);
  unsigned int v36 = 1;
LABEL_23:
  swift_storeEnumTagMultiPayload(v34, __dsta, v36);
LABEL_24:
  *(void *)(v13 + a3[7]) = *(void *)(v14 + a3[7]);
  uint64_t v48 = a3[8];
  uint64_t v49 = *(void *)(v14 + v48);
  uint64_t v50 = v14;
  uint64_t v51 = *(void *)(v13 + v48);
  *(void *)(v13 + v48) = v49;
  swift_bridgeObjectRetain(v49);
  swift_bridgeObjectRelease(v51);
  uint64_t v52 = a3[9];
  uint64_t v53 = *(void *)(v50 + v52);
  uint64_t v54 = v50;
  uint64_t v55 = *(void *)(v13 + v52);
  *(void *)(v13 + v52) = v53;
  swift_bridgeObjectRetain(v53);
  swift_bridgeObjectRelease(v55);
  uint64_t v56 = a3[10];
  uint64_t v57 = v13 + v56;
  uint64_t v58 = v54 + v56;
  uint64_t v59 = type metadata accessor for Conv2D(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v59 - 8) + 24))(v57, v58, v59);
  uint64_t v60 = type metadata accessor for MLFewShotSoundClassifier.LeakyConv2D(0);
  *(_DWORD *)(*(int *)(v60 + 20) + v57) = *(_DWORD *)(*(int *)(v60 + 20) + v58);
  __dstd = (int *)type metadata accessor for MLFewShotSoundClassifier.ConvolutionalNetwork(0);
  uint64_t v61 = __dstd[5];
  uint64_t v62 = v57 + v61;
  uint64_t v123 = v57 + v61;
  uint64_t v129 = v58 + v61;
  *(void *)(v61 + v57) = *(void *)(v61 + v58);
  *(void *)(v61 + v57 + 8) = *(void *)(v61 + v58 + 8);
  uint64_t v63 = type metadata accessor for MLFewShotSoundClassifier.CausalConv1D(0);
  uint64_t v64 = *(int *)(v63 + 20);
  uint64_t v113 = v62 + v64;
  uint64_t v65 = type metadata accessor for Conv1D(0);
  uint64_t v66 = *(void (**)(uint64_t, uint64_t))(*(void *)(v65 - 8) + 24);
  uint64_t v67 = v129 + v64;
  uint64_t v68 = v65;
  v66(v113, v67);
  *(_DWORD *)(*(int *)(v63 + 24) + v123) = *(_DWORD *)(*(int *)(v63 + 24) + v129);
  uint64_t v69 = __dstd[6];
  uint64_t v130 = v57 + v69;
  uint64_t v124 = v58 + v69;
  *(void *)(v69 + v57) = *(void *)(v69 + v58);
  *(void *)(v69 + v57 + 8) = *(void *)(v69 + v58 + 8);
  uint64_t v118 = v68;
  ((void (*)(uint64_t, uint64_t, uint64_t))v66)(v57 + v69 + *(int *)(v63 + 20), v58 + v69 + *(int *)(v63 + 20), v68);
  *(_DWORD *)(*(int *)(v63 + 24) + v130) = *(_DWORD *)(*(int *)(v63 + 24) + v124);
  uint64_t v70 = __dstd[7];
  uint64_t v131 = v57 + v70;
  uint64_t v125 = v58 + v70;
  *(void *)(v70 + v57) = *(void *)(v70 + v58);
  *(void *)(v70 + v57 + 8) = *(void *)(v70 + v58 + 8);
  ((void (*)(uint64_t, uint64_t, uint64_t))v66)(v57 + v70 + *(int *)(v63 + 20), v58 + v70 + *(int *)(v63 + 20), v68);
  uint64_t v71 = (void (*)(uint64_t, uint64_t, uint64_t))v66;
  *(_DWORD *)(*(int *)(v63 + 24) + v131) = *(_DWORD *)(*(int *)(v63 + 24) + v125);
  uint64_t v72 = __dstd[8];
  uint64_t v73 = v57 + v72;
  uint64_t v74 = v58 + v72;
  *(void *)(v72 + v57) = *(void *)(v72 + v58);
  *(void *)(v72 + v57 + 8) = *(void *)(v72 + v58 + 8);
  v71(v57 + v72 + *(int *)(v63 + 20), v58 + v72 + *(int *)(v63 + 20), v118);
  *(_DWORD *)(*(int *)(v63 + 24) + v73) = *(_DWORD *)(*(int *)(v63 + 24) + v74);
  uint64_t v75 = *(int *)(type metadata accessor for MLFewShotSoundClassifier.TemporalClassifier(0) + 20);
  uint64_t v76 = v75 + v57;
  uint64_t v77 = v75 + v58;
  uint64_t v78 = type metadata accessor for Dense(0);
  uint64_t v79 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v78 - 8) + 24);
  v79(v76, v77, v78);
  uint64_t v80 = type metadata accessor for MLFewShotSoundClassifier.MLP(0);
  v79(*(int *)(v80 + 20) + v76, *(int *)(v80 + 20) + v77, v78);
  uint64_t v81 = a3[11];
  uint64_t v82 = (char *)(a1 + v81);
  uint64_t v83 = a2 + v81;
  *(_DWORD *)uint64_t v82 = *(_DWORD *)(a2 + v81);
  *((_DWORD *)v82 + 1) = *(_DWORD *)(a2 + v81 + 4);
  *((_DWORD *)v82 + 2) = *(_DWORD *)(a2 + v81 + 8);
  *((_DWORD *)v82 + 3) = *(_DWORD *)(a2 + v81 + 12);
  uint64_t v132 = (int *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Adam<MLFewShotSoundClassifier.TemporalClassifier>);
  uint64_t v84 = v132[12];
  __dstb = v82;
  uint64_t v85 = &v82[v84];
  uint64_t v119 = v83;
  uint64_t v86 = (const void *)(v83 + v84);
  uint64_t v87 = type metadata accessor for GradientClippingMode(0);
  LODWORD(v76) = __swift_getEnumTagSinglePayload((uint64_t)v85, 1, v87);
  int v88 = __swift_getEnumTagSinglePayload((uint64_t)v86, 1, v87);
  if (v76)
  {
    if (!v88)
    {
      (*(void (**)(char *, const void *, uint64_t))(*(void *)(v87 - 8) + 16))(v85, v86, v87);
      __swift_storeEnumTagSinglePayload((uint64_t)v85, 0, 1, v87);
      goto LABEL_30;
    }
    goto LABEL_29;
  }
  uint64_t v89 = *(void *)(v87 - 8);
  if (v88)
  {
    (*(void (**)(char *, uint64_t))(v89 + 8))(v85, v87);
LABEL_29:
    uint64_t v90 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for GradientClippingMode?);
    memcpy(v85, v86, *(void *)(*(void *)(v90 - 8) + 64));
    goto LABEL_30;
  }
  (*(void (**)(char *, const void *, uint64_t))(v89 + 24))(v85, v86, v87);
LABEL_30:
  uint64_t v91 = v132[13];
  uint64_t v92 = &__dstb[v91];
  uint64_t v93 = (const void *)(v119 + v91);
  uint64_t v94 = type metadata accessor for RegularizationKind(0);
  int v95 = __swift_getEnumTagSinglePayload((uint64_t)v92, 1, v94);
  int v96 = __swift_getEnumTagSinglePayload((uint64_t)v93, 1, v94);
  if (v95)
  {
    if (!v96)
    {
      (*(void (**)(char *, const void *, uint64_t))(*(void *)(v94 - 8) + 16))(v92, v93, v94);
      __swift_storeEnumTagSinglePayload((uint64_t)v92, 0, 1, v94);
      goto LABEL_36;
    }
    goto LABEL_35;
  }
  uint64_t v97 = *(void *)(v94 - 8);
  if (v96)
  {
    (*(void (**)(char *, uint64_t))(v97 + 8))(v92, v94);
LABEL_35:
    uint64_t v98 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for RegularizationKind?);
    memcpy(v92, v93, *(void *)(*(void *)(v98 - 8) + 64));
    goto LABEL_36;
  }
  (*(void (**)(char *, const void *, uint64_t))(v97 + 24))(v92, v93, v94);
LABEL_36:
  *(_DWORD *)&__dstb[v132[14]] = *(_DWORD *)(v119 + v132[14]);
  *(void *)&__dstb[v132[15]] = *(void *)(v119 + v132[15]);
  uint64_t v99 = v132[16];
  uint64_t v100 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for OptimizerStateDictionary<MLFewShotSoundClassifier.TemporalClassifier>);
  uint64_t v114 = *(void *)(v100 - 8);
  uint64_t v101 = *(void (**)(char *, uint64_t, uint64_t))(v114 + 24);
  v101(&__dstb[v99], v119 + v99, v100);
  uint64_t v126 = (void (*)(char *, const void *, uint64_t))v101;
  v101(&__dstb[v132[17]], v119 + v132[17], v100);
  uint64_t v102 = v132[18];
  uint64_t v103 = (const void *)(v102 + v119);
  __dstc = &__dstb[v102];
  LODWORD(v101) = __swift_getEnumTagSinglePayload((uint64_t)__dstc, 1, v100);
  int v104 = __swift_getEnumTagSinglePayload((uint64_t)v103, 1, v100);
  if (v101)
  {
    uint64_t v106 = a1;
    if (!v104)
    {
      (*(void (**)(char *, const void *, uint64_t))(v114 + 16))(__dstc, v103, v100);
      __swift_storeEnumTagSinglePayload((uint64_t)__dstc, 0, 1, v100);
      goto LABEL_47;
    }
    size_t v107 = *(void *)(*(void *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for OptimizerStateDictionary<MLFewShotSoundClassifier.TemporalClassifier>?)
                                 - 8)
                     + 64);
    uint64_t v108 = __dstc;
  }
  else
  {
    uint64_t v106 = a1;
    if (!v104)
    {
      v126(__dstc, v103, v100);
      goto LABEL_47;
    }
    (*(void (**)(char *, uint64_t, uint64_t, void (*)(char *, const void *, uint64_t)))(v114 + 8))(__dstc, v100, v105, v126);
    size_t v107 = *(void *)(*(void *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for OptimizerStateDictionary<MLFewShotSoundClassifier.TemporalClassifier>?)
                                 - 8)
                     + 64);
    uint64_t v108 = __dstc;
  }
  memcpy(v108, v103, v107);
LABEL_47:
  uint64_t v109 = a3[12];
  uint64_t v110 = *(void **)(a2 + v109);
  uint64_t v111 = *(void **)(v106 + v109);
  *(void *)(v106 + v109) = v110;
  v110;

  return v106;
}

uint64_t initializeWithTake for MLFewShotSoundClassifier(uint64_t a1, uint64_t a2, int *a3)
{
  *(void *)a1 = *(void *)a2;
  *(_DWORD *)(a1 + 8) = *(_DWORD *)(a2 + 8);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  uint64_t v3 = type metadata accessor for MLFewShotSoundClassifier.ModelParameters(0);
  uint64_t v4 = *(int *)(v3 + 32);
  uint64_t v5 = type metadata accessor for URL(0);
  __dst = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 32);
  __dst(v4 + a1, a2 + v4, v5);
  uint64_t v6 = *(int *)(v3 + 36);
  uint64_t v7 = (void *)(v6 + a1);
  uint64_t v8 = (const void *)(a2 + v6);
  if (__swift_getEnumTagSinglePayload((uint64_t)v8, 1, v5))
  {
    uint64_t v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for URL?);
    memcpy(v7, v8, *(void *)(*(void *)(v9 - 8) + 64));
  }
  else
  {
    __dst((uint64_t)v7, (uint64_t)v8, v5);
    __swift_storeEnumTagSinglePayload((uint64_t)v7, 0, 1, v5);
  }
  uint64_t v10 = a3[5];
  uint64_t v11 = (char *)(a1 + v10);
  uint64_t v12 = (char *)(a2 + v10);
  uint64_t v13 = type metadata accessor for MLClassifierMetrics.Contents(0);
  int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload(v12, v13);
  if (EnumCaseMultiPayload == 1)
  {
    *(void *)uint64_t v11 = *(void *)v12;
    uint64_t v101 = type metadata accessor for MLClassifierMetrics.Precomputed(0);
    uint64_t v23 = *(int *)(v101 + 20);
    __dstc = (void *)v13;
    uint64_t v24 = type metadata accessor for DataFrame(0);
    uint64_t v25 = *(void (**)(char *, char *, uint64_t))(*(void *)(v24 - 8) + 32);
    v25(&v11[v23], &v12[v23], v24);
    uint64_t v26 = v24;
    uint64_t v13 = (uint64_t)__dstc;
    v25(&v11[*(int *)(v101 + 24)], &v12[*(int *)(v101 + 24)], v26);
    uint64_t v22 = 1;
    uint64_t v20 = v11;
    uint64_t v21 = (uint64_t)__dstc;
LABEL_10:
    swift_storeEnumTagMultiPayload(v20, v21, v22);
    goto LABEL_12;
  }
  if (!EnumCaseMultiPayload)
  {
    uint64_t v15 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Either<ClassificationMetrics<String>, ClassificationMetrics<Int>>);
    int v16 = swift_getEnumCaseMultiPayload(v12, v15);
    BOOL v17 = v16 == 1;
    uint64_t v18 = &demangling cache variable for type metadata for ClassificationMetrics<String>;
    if (v16 == 1) {
      uint64_t v18 = &demangling cache variable for type metadata for ClassificationMetrics<Int>;
    }
    uint64_t v19 = __swift_instantiateConcreteTypeFromMangledName(v18);
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v19 - 8) + 32))(v11, v12, v19);
    swift_storeEnumTagMultiPayload(v11, v15, v17);
    uint64_t v20 = v11;
    uint64_t v21 = v13;
    uint64_t v22 = 0;
    goto LABEL_10;
  }
  memcpy(v11, v12, *(void *)(*(void *)(v13 - 8) + 64));
LABEL_12:
  uint64_t v27 = a3[6];
  uint64_t v28 = (char *)(a1 + v27);
  int v29 = (char *)(a2 + v27);
  int v30 = swift_getEnumCaseMultiPayload(v29, v13);
  if (v30 == 1)
  {
    *(void *)uint64_t v28 = *(void *)v29;
    uint64_t v102 = type metadata accessor for MLClassifierMetrics.Precomputed(0);
    uint64_t v39 = *(int *)(v102 + 20);
    __dstd = (void *)v13;
    uint64_t v40 = type metadata accessor for DataFrame(0);
    uint64_t v41 = *(void (**)(char *, char *, uint64_t))(*(void *)(v40 - 8) + 32);
    v41(&v28[v39], &v29[v39], v40);
    v41(&v28[*(int *)(v102 + 24)], &v29[*(int *)(v102 + 24)], v40);
    uint64_t v38 = 1;
    unsigned int v36 = v28;
    uint64_t v37 = (uint64_t)__dstd;
LABEL_18:
    swift_storeEnumTagMultiPayload(v36, v37, v38);
    goto LABEL_20;
  }
  if (!v30)
  {
    uint64_t v31 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Either<ClassificationMetrics<String>, ClassificationMetrics<Int>>);
    int v32 = swift_getEnumCaseMultiPayload(v29, v31);
    BOOL v33 = v32 == 1;
    uint64_t v34 = &demangling cache variable for type metadata for ClassificationMetrics<String>;
    if (v32 == 1) {
      uint64_t v34 = &demangling cache variable for type metadata for ClassificationMetrics<Int>;
    }
    uint64_t v35 = __swift_instantiateConcreteTypeFromMangledName(v34);
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v35 - 8) + 32))(v28, v29, v35);
    swift_storeEnumTagMultiPayload(v28, v31, v33);
    unsigned int v36 = v28;
    uint64_t v37 = v13;
    uint64_t v38 = 0;
    goto LABEL_18;
  }
  memcpy(v28, v29, *(void *)(*(void *)(v13 - 8) + 64));
LABEL_20:
  *(void *)(a1 + a3[7]) = *(void *)(a2 + a3[7]);
  *(void *)(a1 + a3[8]) = *(void *)(a2 + a3[8]);
  *(void *)(a1 + a3[9]) = *(void *)(a2 + a3[9]);
  uint64_t v42 = a3[10];
  uint64_t v43 = a1 + v42;
  uint64_t v44 = a2 + v42;
  uint64_t v45 = type metadata accessor for Conv2D(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v45 - 8) + 32))(v43, v44, v45);
  uint64_t v46 = type metadata accessor for MLFewShotSoundClassifier.LeakyConv2D(0);
  *(_DWORD *)(*(int *)(v46 + 20) + v43) = *(_DWORD *)(*(int *)(v46 + 20) + v44);
  __dste = (int *)type metadata accessor for MLFewShotSoundClassifier.ConvolutionalNetwork(0);
  uint64_t v47 = __dste[5];
  uint64_t v48 = v43 + v47;
  uint64_t v98 = v43 + v47;
  uint64_t v103 = v44 + v47;
  *(_OWORD *)(v47 + v43) = *(_OWORD *)(v47 + v44);
  uint64_t v49 = type metadata accessor for MLFewShotSoundClassifier.CausalConv1D(0);
  uint64_t v50 = *(int *)(v49 + 20);
  uint64_t v93 = v48 + v50;
  uint64_t v51 = type metadata accessor for Conv1D(0);
  uint64_t v52 = *(void (**)(uint64_t, uint64_t))(*(void *)(v51 - 8) + 32);
  uint64_t v53 = v103 + v50;
  uint64_t v54 = v51;
  v52(v93, v53);
  uint64_t v55 = v52;
  *(_DWORD *)(*(int *)(v49 + 24) + v98) = *(_DWORD *)(*(int *)(v49 + 24) + v103);
  uint64_t v56 = __dste[6];
  uint64_t v104 = v43 + v56;
  uint64_t v99 = v44 + v56;
  *(_OWORD *)(v56 + v43) = *(_OWORD *)(v56 + v44);
  uint64_t v57 = v54;
  uint64_t v97 = v54;
  uint64_t v58 = v54;
  uint64_t v59 = (void (*)(uint64_t, uint64_t, uint64_t))v55;
  ((void (*)(uint64_t, uint64_t, uint64_t))v55)(v43 + v56 + *(int *)(v49 + 20), v44 + v56 + *(int *)(v49 + 20), v58);
  *(_DWORD *)(*(int *)(v49 + 24) + v104) = *(_DWORD *)(*(int *)(v49 + 24) + v99);
  uint64_t v60 = __dste[7];
  uint64_t v105 = v43 + v60;
  uint64_t v100 = v44 + v60;
  *(_OWORD *)(v60 + v43) = *(_OWORD *)(v60 + v44);
  v59(v43 + v60 + *(int *)(v49 + 20), v44 + v60 + *(int *)(v49 + 20), v57);
  uint64_t v61 = v59;
  *(_DWORD *)(*(int *)(v49 + 24) + v105) = *(_DWORD *)(*(int *)(v49 + 24) + v100);
  uint64_t v62 = __dste[8];
  uint64_t v63 = v43 + v62;
  uint64_t v64 = v44 + v62;
  *(_OWORD *)(v62 + v43) = *(_OWORD *)(v62 + v44);
  v61(v43 + v62 + *(int *)(v49 + 20), v44 + v62 + *(int *)(v49 + 20), v97);
  *(_DWORD *)(*(int *)(v49 + 24) + v63) = *(_DWORD *)(*(int *)(v49 + 24) + v64);
  uint64_t v65 = *(int *)(type metadata accessor for MLFewShotSoundClassifier.TemporalClassifier(0) + 20);
  uint64_t v66 = v65 + v43;
  uint64_t v67 = v65 + v44;
  uint64_t v68 = type metadata accessor for Dense(0);
  uint64_t v69 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v68 - 8) + 32);
  v69(v66, v67, v68);
  uint64_t v70 = type metadata accessor for MLFewShotSoundClassifier.MLP(0);
  v69(*(int *)(v70 + 20) + v66, *(int *)(v70 + 20) + v67, v68);
  uint64_t v71 = a3[11];
  uint64_t v72 = a1 + v71;
  uint64_t v73 = a2 + v71;
  *(_OWORD *)(a1 + v71) = *(_OWORD *)(a2 + v71);
  uint64_t v74 = (int *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Adam<MLFewShotSoundClassifier.TemporalClassifier>);
  uint64_t v75 = v74[12];
  __dsta = (void *)(v72 + v75);
  uint64_t v76 = (const void *)(v73 + v75);
  uint64_t v77 = type metadata accessor for GradientClippingMode(0);
  if (__swift_getEnumTagSinglePayload((uint64_t)v76, 1, v77))
  {
    uint64_t v78 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for GradientClippingMode?);
    memcpy(__dsta, v76, *(void *)(*(void *)(v78 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(*(void *)(v77 - 8) + 32))(__dsta, v76, v77);
    __swift_storeEnumTagSinglePayload((uint64_t)__dsta, 0, 1, v77);
  }
  uint64_t v79 = v74[13];
  __dstb = (void *)(v72 + v79);
  uint64_t v80 = (const void *)(v73 + v79);
  uint64_t v81 = type metadata accessor for RegularizationKind(0);
  if (__swift_getEnumTagSinglePayload((uint64_t)v80, 1, v81))
  {
    uint64_t v82 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for RegularizationKind?);
    memcpy(__dstb, v80, *(void *)(*(void *)(v82 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(*(void *)(v81 - 8) + 32))(__dstb, v80, v81);
    __swift_storeEnumTagSinglePayload((uint64_t)__dstb, 0, 1, v81);
  }
  *(_DWORD *)(v72 + v74[14]) = *(_DWORD *)(v73 + v74[14]);
  *(void *)(v72 + v74[15]) = *(void *)(v73 + v74[15]);
  uint64_t v83 = v74[16];
  uint64_t v84 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for OptimizerStateDictionary<MLFewShotSoundClassifier.TemporalClassifier>);
  uint64_t v85 = v72 + v83;
  uint64_t v86 = v73 + v83;
  uint64_t v87 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v84 - 8) + 32);
  v87(v85, v86, v84);
  v87(v72 + v74[17], v73 + v74[17], v84);
  uint64_t v88 = v74[18];
  uint64_t v89 = (void *)(v88 + v72);
  uint64_t v90 = (const void *)(v88 + v73);
  if (__swift_getEnumTagSinglePayload(v88 + v73, 1, v84))
  {
    uint64_t v91 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for OptimizerStateDictionary<MLFewShotSoundClassifier.TemporalClassifier>?);
    memcpy(v89, v90, *(void *)(*(void *)(v91 - 8) + 64));
  }
  else
  {
    v87((uint64_t)v89, (uint64_t)v90, v84);
    __swift_storeEnumTagSinglePayload((uint64_t)v89, 0, 1, v84);
  }
  uint64_t result = a1;
  *(void *)(a1 + a3[12]) = *(void *)(a2 + a3[12]);
  return result;
}

uint64_t assignWithTake for MLFewShotSoundClassifier(uint64_t a1, uint64_t a2, int *a3)
{
  *(void *)a1 = *(void *)a2;
  *(_DWORD *)(a1 + 8) = *(_DWORD *)(a2 + 8);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  uint64_t v3 = type metadata accessor for MLFewShotSoundClassifier.ModelParameters(0);
  uint64_t v4 = *(int *)(v3 + 32);
  uint64_t v5 = type metadata accessor for URL(0);
  uint64_t v125 = *(void *)(v5 - 8);
  __dst = *(void (**)(uint64_t, uint64_t, uint64_t))(v125 + 40);
  __dst(v4 + a1, a2 + v4, v5);
  uint64_t v6 = *(int *)(v3 + 36);
  uint64_t v7 = (void *)(v6 + a1);
  uint64_t v8 = (const void *)(a2 + v6);
  int EnumTagSinglePayload = __swift_getEnumTagSinglePayload((uint64_t)v7, 1, v5);
  int v10 = __swift_getEnumTagSinglePayload((uint64_t)v8, 1, v5);
  if (EnumTagSinglePayload)
  {
    if (!v10)
    {
      (*(void (**)(void *, const void *, uint64_t))(v125 + 32))(v7, v8, v5);
      __swift_storeEnumTagSinglePayload((uint64_t)v7, 0, 1, v5);
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  if (v10)
  {
    (*(void (**)(void *, uint64_t, uint64_t, void (*)(uint64_t, uint64_t, uint64_t)))(v125 + 8))(v7, v5, v11, __dst);
LABEL_6:
    uint64_t v12 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for URL?);
    memcpy(v7, v8, *(void *)(*(void *)(v12 - 8) + 64));
    goto LABEL_7;
  }
  __dst((uint64_t)v7, (uint64_t)v8, v5);
LABEL_7:
  uint64_t v13 = a1;
  uint64_t v14 = a2;
  if (a1 == a2) {
    goto LABEL_24;
  }
  uint64_t v15 = a3[5];
  int v16 = (char *)(a1 + v15);
  BOOL v17 = (char *)(a2 + v15);
  outlined destroy of MLActivityClassifier.ModelParameters((uint64_t)v16, type metadata accessor for MLClassifierMetrics.Contents);
  uint64_t v18 = type metadata accessor for MLClassifierMetrics.Contents(0);
  int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload(v17, v18);
  __dsta = (void *)v18;
  if (EnumCaseMultiPayload == 1)
  {
    *(void *)int v16 = *(void *)v17;
    uint64_t v126 = type metadata accessor for MLClassifierMetrics.Precomputed(0);
    uint64_t v30 = *(int *)(v126 + 20);
    uint64_t v118 = &v16[v30];
    uint64_t v31 = type metadata accessor for DataFrame(0);
    int v32 = *(void (**)(char *, char *, uint64_t))(*(void *)(v31 - 8) + 32);
    BOOL v33 = &v17[v30];
    uint64_t v18 = (uint64_t)__dsta;
    v32(v118, v33, v31);
    uint64_t v34 = v31;
    uint64_t v13 = a1;
    v32(&v16[*(int *)(v126 + 24)], &v17[*(int *)(v126 + 24)], v34);
    uint64_t v14 = a2;
    uint64_t v29 = 1;
    uint64_t v27 = v16;
    uint64_t v28 = __dsta;
LABEL_14:
    swift_storeEnumTagMultiPayload(v27, v28, v29);
    goto LABEL_16;
  }
  if (!EnumCaseMultiPayload)
  {
    uint64_t v20 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Either<ClassificationMetrics<String>, ClassificationMetrics<Int>>);
    int v21 = swift_getEnumCaseMultiPayload(v17, v20);
    BOOL v22 = v21 == 1;
    uint64_t v23 = &demangling cache variable for type metadata for ClassificationMetrics<String>;
    if (v21 == 1) {
      uint64_t v23 = &demangling cache variable for type metadata for ClassificationMetrics<Int>;
    }
    uint64_t v24 = __swift_instantiateConcreteTypeFromMangledName(v23);
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v24 - 8) + 32))(v16, v17, v24);
    uint64_t v25 = v20;
    uint64_t v14 = a2;
    BOOL v26 = v22;
    uint64_t v18 = (uint64_t)__dsta;
    swift_storeEnumTagMultiPayload(v16, v25, v26);
    uint64_t v27 = v16;
    uint64_t v28 = __dsta;
    uint64_t v29 = 0;
    goto LABEL_14;
  }
  memcpy(v16, v17, *(void *)(*(void *)(v18 - 8) + 64));
LABEL_16:
  uint64_t v35 = a3[6];
  unsigned int v36 = (char *)(v13 + v35);
  uint64_t v37 = (char *)(v14 + v35);
  outlined destroy of MLActivityClassifier.ModelParameters((uint64_t)v36, type metadata accessor for MLClassifierMetrics.Contents);
  int v38 = swift_getEnumCaseMultiPayload(v37, v18);
  if (v38 == 1)
  {
    *(void *)unsigned int v36 = *(void *)v37;
    uint64_t v127 = type metadata accessor for MLClassifierMetrics.Precomputed(0);
    uint64_t v48 = *(int *)(v127 + 20);
    uint64_t v49 = type metadata accessor for DataFrame(0);
    uint64_t v50 = *(void (**)(char *, char *, uint64_t))(*(void *)(v49 - 8) + 32);
    v50(&v36[v48], &v37[v48], v49);
    uint64_t v51 = v49;
    uint64_t v13 = a1;
    v50(&v36[*(int *)(v127 + 24)], &v37[*(int *)(v127 + 24)], v51);
    uint64_t v14 = a2;
    uint64_t v47 = 1;
    uint64_t v45 = v36;
    uint64_t v46 = __dsta;
LABEL_22:
    swift_storeEnumTagMultiPayload(v45, v46, v47);
    goto LABEL_24;
  }
  if (!v38)
  {
    uint64_t v39 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Either<ClassificationMetrics<String>, ClassificationMetrics<Int>>);
    int v40 = swift_getEnumCaseMultiPayload(v37, v39);
    BOOL v41 = v40 == 1;
    uint64_t v42 = &demangling cache variable for type metadata for ClassificationMetrics<String>;
    if (v40 == 1) {
      uint64_t v42 = &demangling cache variable for type metadata for ClassificationMetrics<Int>;
    }
    uint64_t v43 = __swift_instantiateConcreteTypeFromMangledName(v42);
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v43 - 8) + 32))(v36, v37, v43);
    uint64_t v44 = v39;
    uint64_t v14 = a2;
    swift_storeEnumTagMultiPayload(v36, v44, v41);
    uint64_t v45 = v36;
    uint64_t v46 = __dsta;
    uint64_t v47 = 0;
    goto LABEL_22;
  }
  memcpy(v36, v37, *(void *)(*(void *)(v18 - 8) + 64));
LABEL_24:
  *(void *)(v13 + a3[7]) = *(void *)(v14 + a3[7]);
  uint64_t v52 = a3[8];
  uint64_t v53 = *(void *)(v13 + v52);
  *(void *)(v13 + v52) = *(void *)(v14 + v52);
  swift_bridgeObjectRelease(v53);
  uint64_t v54 = a3[9];
  uint64_t v55 = *(void *)(v13 + v54);
  *(void *)(v13 + v54) = *(void *)(v14 + v54);
  swift_bridgeObjectRelease(v55);
  uint64_t v56 = v13;
  uint64_t v57 = a3[10];
  uint64_t v58 = v56 + v57;
  uint64_t v59 = v14 + v57;
  uint64_t v60 = type metadata accessor for Conv2D(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v60 - 8) + 40))(v58, v59, v60);
  uint64_t v61 = type metadata accessor for MLFewShotSoundClassifier.LeakyConv2D(0);
  *(_DWORD *)(*(int *)(v61 + 20) + v58) = *(_DWORD *)(*(int *)(v61 + 20) + v59);
  __dstd = (int *)type metadata accessor for MLFewShotSoundClassifier.ConvolutionalNetwork(0);
  uint64_t v62 = __dstd[5];
  uint64_t v63 = v58 + v62;
  uint64_t v121 = v58 + v62;
  uint64_t v128 = v59 + v62;
  *(_OWORD *)(v62 + v58) = *(_OWORD *)(v62 + v59);
  uint64_t v64 = type metadata accessor for MLFewShotSoundClassifier.CausalConv1D(0);
  uint64_t v65 = *(int *)(v64 + 20);
  uint64_t v113 = v65 + v63;
  uint64_t v66 = type metadata accessor for Conv1D(0);
  uint64_t v67 = *(void (**)(uint64_t, uint64_t))(*(void *)(v66 - 8) + 40);
  uint64_t v68 = v128 + v65;
  uint64_t v69 = v66;
  v67(v113, v68);
  *(_DWORD *)(*(int *)(v64 + 24) + v121) = *(_DWORD *)(*(int *)(v64 + 24) + v128);
  uint64_t v70 = __dstd[6];
  uint64_t v129 = v58 + v70;
  uint64_t v122 = v59 + v70;
  *(_OWORD *)(v70 + v58) = *(_OWORD *)(v70 + v59);
  uint64_t v119 = v69;
  ((void (*)(uint64_t, uint64_t, uint64_t))v67)(v58 + v70 + *(int *)(v64 + 20), v59 + v70 + *(int *)(v64 + 20), v69);
  *(_DWORD *)(*(int *)(v64 + 24) + v129) = *(_DWORD *)(*(int *)(v64 + 24) + v122);
  uint64_t v71 = __dstd[7];
  uint64_t v130 = v58 + v71;
  uint64_t v123 = v59 + v71;
  *(_OWORD *)(v71 + v58) = *(_OWORD *)(v71 + v59);
  ((void (*)(uint64_t, uint64_t, uint64_t))v67)(v58 + v71 + *(int *)(v64 + 20), v59 + v71 + *(int *)(v64 + 20), v69);
  uint64_t v72 = (void (*)(uint64_t, uint64_t, uint64_t))v67;
  *(_DWORD *)(*(int *)(v64 + 24) + v130) = *(_DWORD *)(*(int *)(v64 + 24) + v123);
  uint64_t v73 = __dstd[8];
  uint64_t v74 = v58 + v73;
  uint64_t v75 = v59 + v73;
  *(_OWORD *)(v73 + v58) = *(_OWORD *)(v73 + v59);
  v72(v58 + v73 + *(int *)(v64 + 20), v59 + v73 + *(int *)(v64 + 20), v119);
  *(_DWORD *)(*(int *)(v64 + 24) + v74) = *(_DWORD *)(*(int *)(v64 + 24) + v75);
  uint64_t v76 = *(int *)(type metadata accessor for MLFewShotSoundClassifier.TemporalClassifier(0) + 20);
  uint64_t v77 = v76 + v58;
  uint64_t v78 = v76 + v59;
  uint64_t v79 = type metadata accessor for Dense(0);
  uint64_t v80 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v79 - 8) + 40);
  v80(v77, v78, v79);
  uint64_t v81 = type metadata accessor for MLFewShotSoundClassifier.MLP(0);
  v80(*(int *)(v81 + 20) + v77, *(int *)(v81 + 20) + v78, v79);
  uint64_t v82 = a3[11];
  uint64_t v83 = (char *)(a1 + v82);
  uint64_t v84 = a2 + v82;
  *(_OWORD *)(a1 + v82) = *(_OWORD *)(a2 + v82);
  uint64_t v131 = (int *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Adam<MLFewShotSoundClassifier.TemporalClassifier>);
  uint64_t v85 = v131[12];
  __dstb = v83;
  uint64_t v86 = &v83[v85];
  uint64_t v120 = v84;
  uint64_t v87 = (const void *)(v84 + v85);
  uint64_t v88 = type metadata accessor for GradientClippingMode(0);
  LODWORD(v77) = __swift_getEnumTagSinglePayload((uint64_t)v86, 1, v88);
  int v89 = __swift_getEnumTagSinglePayload((uint64_t)v87, 1, v88);
  if (v77)
  {
    if (!v89)
    {
      (*(void (**)(char *, const void *, uint64_t))(*(void *)(v88 - 8) + 32))(v86, v87, v88);
      __swift_storeEnumTagSinglePayload((uint64_t)v86, 0, 1, v88);
      goto LABEL_30;
    }
    goto LABEL_29;
  }
  uint64_t v90 = *(void *)(v88 - 8);
  if (v89)
  {
    (*(void (**)(char *, uint64_t))(v90 + 8))(v86, v88);
LABEL_29:
    uint64_t v91 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for GradientClippingMode?);
    memcpy(v86, v87, *(void *)(*(void *)(v91 - 8) + 64));
    goto LABEL_30;
  }
  (*(void (**)(char *, const void *, uint64_t))(v90 + 40))(v86, v87, v88);
LABEL_30:
  uint64_t v92 = v131[13];
  uint64_t v93 = &__dstb[v92];
  uint64_t v94 = (const void *)(v120 + v92);
  uint64_t v95 = type metadata accessor for RegularizationKind(0);
  int v96 = __swift_getEnumTagSinglePayload((uint64_t)v93, 1, v95);
  int v97 = __swift_getEnumTagSinglePayload((uint64_t)v94, 1, v95);
  if (v96)
  {
    if (!v97)
    {
      (*(void (**)(char *, const void *, uint64_t))(*(void *)(v95 - 8) + 32))(v93, v94, v95);
      __swift_storeEnumTagSinglePayload((uint64_t)v93, 0, 1, v95);
      goto LABEL_36;
    }
    goto LABEL_35;
  }
  uint64_t v98 = *(void *)(v95 - 8);
  if (v97)
  {
    (*(void (**)(char *, uint64_t))(v98 + 8))(v93, v95);
LABEL_35:
    uint64_t v99 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for RegularizationKind?);
    memcpy(v93, v94, *(void *)(*(void *)(v99 - 8) + 64));
    goto LABEL_36;
  }
  (*(void (**)(char *, const void *, uint64_t))(v98 + 40))(v93, v94, v95);
LABEL_36:
  *(_DWORD *)&__dstb[v131[14]] = *(_DWORD *)(v120 + v131[14]);
  *(void *)&__dstb[v131[15]] = *(void *)(v120 + v131[15]);
  uint64_t v100 = v131[16];
  uint64_t v101 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for OptimizerStateDictionary<MLFewShotSoundClassifier.TemporalClassifier>);
  uint64_t v114 = *(void *)(v101 - 8);
  uint64_t v102 = *(void (**)(char *, uint64_t, uint64_t))(v114 + 40);
  v102(&__dstb[v100], v120 + v100, v101);
  uint64_t v124 = (void (*)(char *, const void *, uint64_t))v102;
  v102(&__dstb[v131[17]], v120 + v131[17], v101);
  uint64_t v103 = v131[18];
  uint64_t v104 = (const void *)(v103 + v120);
  __dstc = &__dstb[v103];
  LODWORD(v102) = __swift_getEnumTagSinglePayload((uint64_t)__dstc, 1, v101);
  int v105 = __swift_getEnumTagSinglePayload((uint64_t)v104, 1, v101);
  if (v102)
  {
    uint64_t v107 = a1;
    if (!v105)
    {
      (*(void (**)(char *, const void *, uint64_t))(v114 + 32))(__dstc, v104, v101);
      __swift_storeEnumTagSinglePayload((uint64_t)__dstc, 0, 1, v101);
      goto LABEL_47;
    }
    size_t v108 = *(void *)(*(void *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for OptimizerStateDictionary<MLFewShotSoundClassifier.TemporalClassifier>?)
                                 - 8)
                     + 64);
    uint64_t v109 = __dstc;
  }
  else
  {
    uint64_t v107 = a1;
    if (!v105)
    {
      v124(__dstc, v104, v101);
      goto LABEL_47;
    }
    (*(void (**)(char *, uint64_t, uint64_t, void (*)(char *, const void *, uint64_t)))(v114 + 8))(__dstc, v101, v106, v124);
    size_t v108 = *(void *)(*(void *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for OptimizerStateDictionary<MLFewShotSoundClassifier.TemporalClassifier>?)
                                 - 8)
                     + 64);
    uint64_t v109 = __dstc;
  }
  memcpy(v109, v104, v108);
LABEL_47:
  uint64_t v110 = a3[12];
  uint64_t v111 = *(void **)(v107 + v110);
  *(void *)(v107 + v110) = *(void *)(a2 + v110);

  return v107;
}

uint64_t getEnumTagSinglePayload for MLFewShotSoundClassifier(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_A3764);
}

uint64_t sub_A3764(uint64_t a1, unsigned int a2, int *a3)
{
  uint64_t v4 = a1;
  uint64_t v5 = type metadata accessor for MLFewShotSoundClassifier.ModelParameters(0);
  if (*(_DWORD *)(*(void *)(v5 - 8) + 84) == a2) {
    return __swift_getEnumTagSinglePayload(v4, a2, v5);
  }
  uint64_t v5 = type metadata accessor for MLClassifierMetrics(0);
  if (*(_DWORD *)(*(void *)(v5 - 8) + 84) == a2)
  {
    uint64_t v6 = a3[5];
LABEL_11:
    uint64_t v4 = v6 + a1;
    return __swift_getEnumTagSinglePayload(v4, a2, v5);
  }
  if (a2 != 0x7FFFFFFF)
  {
    uint64_t v5 = type metadata accessor for MLFewShotSoundClassifier.TemporalClassifier(0);
    if (*(_DWORD *)(*(void *)(v5 - 8) + 84) == a2)
    {
      uint64_t v6 = a3[10];
    }
    else
    {
      uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Adam<MLFewShotSoundClassifier.TemporalClassifier>);
      uint64_t v6 = a3[11];
    }
    goto LABEL_11;
  }
  uint64_t result = 0;
  if ((*(void *)(a1 + a3[8]) & 0xFFFFFFFF00000001) == 0) {
    return (*(void *)(a1 + a3[8]) >> 1) + 1;
  }
  return result;
}

uint64_t storeEnumTagSinglePayload for MLFewShotSoundClassifier(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_A3822);
}

uint64_t sub_A3822(uint64_t a1, unsigned int a2, int a3, int *a4)
{
  uint64_t v6 = a1;
  uint64_t v7 = type metadata accessor for MLFewShotSoundClassifier.ModelParameters(0);
  if (*(_DWORD *)(*(void *)(v7 - 8) + 84) != a3)
  {
    uint64_t v7 = type metadata accessor for MLClassifierMetrics(0);
    if (*(_DWORD *)(*(void *)(v7 - 8) + 84) == a3)
    {
      uint64_t v8 = a4[5];
    }
    else
    {
      if (a3 == 0x7FFFFFFF)
      {
        uint64_t result = a4[8];
        *(void *)(a1 + result) = 2 * (a2 - 1);
        return result;
      }
      uint64_t v7 = type metadata accessor for MLFewShotSoundClassifier.TemporalClassifier(0);
      if (*(_DWORD *)(*(void *)(v7 - 8) + 84) == a3)
      {
        uint64_t v8 = a4[10];
      }
      else
      {
        uint64_t v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Adam<MLFewShotSoundClassifier.TemporalClassifier>);
        uint64_t v8 = a4[11];
      }
    }
    uint64_t v6 = v8 + a1;
  }
  return __swift_storeEnumTagSinglePayload(v6, a2, a2, v7);
}

uint64_t type metadata completion function for MLFewShotSoundClassifier(uint64_t a1)
{
  uint64_t result = type metadata accessor for MLFewShotSoundClassifier.ModelParameters(319);
  if (v2 <= 0x3F)
  {
    uint64_t v6 = *(void *)(result - 8) + 64;
    uint64_t result = type metadata accessor for MLClassifierMetrics.Contents(319);
    if (v3 <= 0x3F)
    {
      uint64_t v7 = *(void *)(result - 8) + 64;
      uint64_t v8 = v7;
      uint64_t v9 = (char *)&value witness table for Builtin.Int64 + 64;
      int v10 = (char *)&value witness table for Builtin.BridgeObject + 64;
      uint64_t v11 = (char *)&value witness table for Builtin.BridgeObject + 64;
      uint64_t result = type metadata accessor for MLFewShotSoundClassifier.TemporalClassifier(319);
      if (v4 <= 0x3F)
      {
        uint64_t v12 = *(void *)(result - 8) + 64;
        uint64_t result = type metadata accessor for Adam<MLFewShotSoundClassifier.TemporalClassifier>(319);
        if (v5 <= 0x3F)
        {
          uint64_t v13 = *(void *)(result - 8) + 64;
          uint64_t v14 = (char *)&value witness table for Builtin.UnknownObject + 64;
          swift_initStructMetadata(a1, 256, 9, &v6, a1 + 16);
          return 0;
        }
      }
    }
  }
  return result;
}

uint64_t type metadata accessor for Adam<MLFewShotSoundClassifier.TemporalClassifier>(uint64_t a1)
{
  uint64_t result = lazy cache variable for type metadata for Adam<MLFewShotSoundClassifier.TemporalClassifier>;
  if (!lazy cache variable for type metadata for Adam<MLFewShotSoundClassifier.TemporalClassifier>)
  {
    uint64_t v2 = type metadata accessor for MLFewShotSoundClassifier.TemporalClassifier(255);
    uint64_t v3 = lazy protocol witness table accessor for type MLFewShotSoundClassifier.TemporalClassifier and conformance MLFewShotSoundClassifier.TemporalClassifier();
    uint64_t result = type metadata accessor for Adam(a1, v2, v3);
    if (!v4) {
      lazy cache variable for type metadata for Adam<MLFewShotSoundClassifier.TemporalClassifier> = result;
    }
  }
  return result;
}

uint64_t sub_A39F5()
{
  uint64_t v1 = type metadata accessor for ComputeDevice(0);
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = ~*(unsigned __int8 *)(v2 + 80) & (v3 + 24);
  uint64_t v5 = v4 + v0;
  uint64_t v6 = *(void *)(v2 + 64) + v4;
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v5, v1);
  return swift_deallocObject(v0, v6, v3 | 7);
}

uint64_t partial apply for closure #1 in MLFewShotSoundClassifier.makeSoundDataset<A>(from:batchSize:device:)(uint64_t *a1)
{
  uint64_t v2 = type metadata accessor for ComputeDevice(0);
  return closure #1 in MLFewShotSoundClassifier.makeSoundDataset<A>(from:batchSize:device:)(a1, *(void **)(v1 + 16), (void (*)(void *, uint64_t))(v1+ (~*(unsigned __int8 *)(*(void *)(v2 - 8) + 80) & (*(unsigned __int8 *)(*(void *)(v2 - 8) + 80) + 24))));
}

uint64_t outlined init with take of MLFewShotSoundClassifier.TemporalClassifier?(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for MLFewShotSoundClassifier.TemporalClassifier?);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v2 - 8) + 32))(a2, a1, v2);
  return a2;
}

uint64_t outlined assign with take of MLClassifierMetrics(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v3 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v3 - 8) + 40))(a2, a1, v3);
  return a2;
}

uint64_t partial apply for closure #1 in MLFewShotSoundClassifier.performStep(on:)(void (*a1)(unsigned char *, uint64_t))
{
  return closure #1 in MLFewShotSoundClassifier.performStep(on:)(a1, *(void *)(v1 + 16), *(void *)(v1 + 40), *(float *)(v1 + 24), *(float *)(v1 + 28), *(float *)(v1 + 32));
}

uint64_t outlined destroy of Adam<MLFewShotSoundClassifier.TemporalClassifier>(uint64_t a1, uint64_t *a2)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(a2);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t MLImageClassifier.ModelParameters.algorithm.getter()
{
  uint64_t v2 = v0;
  int64_t v3 = *(void *)(*(void *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for MLImageClassifier.ModelParameters.ModelAlgorithmType?)
                             - 8)
                 + 64);
  uint64_t v4 = alloca(v3);
  uint64_t v5 = alloca(v3);
  outlined init with copy of Any?(v1 + 48, (uint64_t)v12);
  if (v13)
  {
    uint64_t v6 = type metadata accessor for MLImageClassifier.ModelParameters.ModelAlgorithmType(0);
    unsigned __int8 v7 = swift_dynamicCast(v12, v12, (char *)&type metadata for Any + 8, v6, 6);
    __swift_storeEnumTagSinglePayload((uint64_t)v12, v7 ^ 1u, 1, v6);
    if (__swift_getEnumTagSinglePayload((uint64_t)v12, 1, v6) != 1) {
      return outlined init with take of MLClassifierMetrics((uint64_t)v12, v2, type metadata accessor for MLImageClassifier.ModelParameters.ModelAlgorithmType);
    }
  }
  else
  {
    outlined destroy of Either<LogisticRegressionClassifier<Float, String>, FullyConnectedNetworkClassifier<Float, String>>((uint64_t)v12, &demangling cache variable for type metadata for Any?);
    uint64_t v9 = type metadata accessor for MLImageClassifier.ModelParameters.ModelAlgorithmType(0);
    __swift_storeEnumTagSinglePayload((uint64_t)v12, 1, 1, v9);
  }
  uint64_t v10 = *(int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (featureExtractor: MLImageClassifier.FeatureExtractorType, classifier: MLImageClassifier.ModelParameters.ClassifierType))
               + 48);
  *(void *)uint64_t v2 = 1;
  *(unsigned char *)(v2 + 8) = 0;
  uint64_t v11 = type metadata accessor for MLImageClassifier.FeatureExtractorType(0);
  swift_storeEnumTagMultiPayload(v2, v11, 0);
  *(void *)(v2 + v10) = 0;
  return outlined destroy of Either<LogisticRegressionClassifier<Float, String>, FullyConnectedNetworkClassifier<Float, String>>((uint64_t)v12, &demangling cache variable for type metadata for MLImageClassifier.ModelParameters.ModelAlgorithmType?);
}

uint64_t MLImageClassifier.ModelParameters.maxIterations.getter()
{
  return *(void *)v0;
}

void MLImageClassifier.ModelParameters.maxIterations.setter(uint64_t a1)
{
  *uint64_t v1 = a1;
}

void (*MLImageClassifier.ModelParameters.maxIterations.modify())()
{
  return MLBoostedTreeRegressor.ModelParameters.maxDepth.modify;
}

void *MLImageClassifier.ModelParameters.augmentationOptions.getter()
{
  *uint64_t result = *(void *)(v1 + 8);
  return result;
}

uint64_t MLImageClassifier.ModelParameters.augmentationOptions.setter(uint64_t *a1)
{
  uint64_t result = *a1;
  *(void *)(v1 + 8) = *a1;
  return result;
}

void (*MLImageClassifier.ModelParameters.augmentationOptions.modify())()
{
  return MLBoostedTreeRegressor.ModelParameters.maxDepth.modify;
}

uint64_t MLImageClassifier.ModelParameters.algorithm.setter(uint64_t a1)
{
  v4[3] = type metadata accessor for MLImageClassifier.ModelParameters.ModelAlgorithmType(0);
  boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1(v4);
  outlined init with take of MLClassifierMetrics(a1, (uint64_t)boxed_opaque_existential_1, type metadata accessor for MLImageClassifier.ModelParameters.ModelAlgorithmType);
  return outlined assign with take of Any?((uint64_t)v4, v1 + 48);
}

uint64_t outlined assign with take of Any?(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Any?);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v2 - 8) + 40))(a2, a1, v2);
  return a2;
}

void (*MLImageClassifier.ModelParameters.algorithm.modify(void *a1))(uint64_t a1, char a2)
{
  uint64_t v2 = malloc(0x60uLL);
  *a1 = v2;
  v2[8] = v1;
  uint64_t v3 = type metadata accessor for MLImageClassifier.ModelParameters.ModelAlgorithmType(0);
  v2[9] = v3;
  size_t v4 = *(void *)(*(void *)(v3 - 8) + 64);
  v2[10] = malloc(v4);
  v2[11] = malloc(v4);
  MLImageClassifier.ModelParameters.algorithm.getter();
  return MLImageClassifier.ModelParameters.algorithm.modify;
}

void MLImageClassifier.ModelParameters.algorithm.modify(uint64_t a1, char a2)
{
  uint64_t v2 = *(void **)a1;
  uint64_t v3 = *(void **)(*(void *)a1 + 88);
  size_t v4 = *(void **)(*(void *)a1 + 80);
  if (a2)
  {
    uint64_t v5 = v2[8];
    uint64_t v6 = v2[9];
    outlined init with copy of MLTrainingSessionParameters(v2[11], v2[10], type metadata accessor for MLImageClassifier.ModelParameters.ModelAlgorithmType);
    v2[3] = v6;
    boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1(v2);
    outlined init with take of MLClassifierMetrics((uint64_t)v4, (uint64_t)boxed_opaque_existential_1, type metadata accessor for MLImageClassifier.ModelParameters.ModelAlgorithmType);
    outlined assign with take of Any?((uint64_t)v2, v5 + 48);
    outlined destroy of MLActivityClassifier.ModelParameters((uint64_t)v3, type metadata accessor for MLImageClassifier.ModelParameters.ModelAlgorithmType);
  }
  else
  {
    uint64_t v8 = v2[8];
    v2[7] = v2[9];
    uint64_t v9 = __swift_allocate_boxed_opaque_existential_1(v2 + 4);
    outlined init with take of MLClassifierMetrics((uint64_t)v3, (uint64_t)v9, type metadata accessor for MLImageClassifier.ModelParameters.ModelAlgorithmType);
    outlined assign with take of Any?((uint64_t)(v2 + 4), v8 + 48);
  }
  free(v3);
  free(v4);
  free(v2);
}

uint64_t MLImageClassifier.ModelParameters.validationData.getter()
{
  int64_t v1 = *(void *)(*(void *)(type metadata accessor for MLImageClassifier.DataSource(0) - 8) + 64);
  uint64_t v2 = alloca(v1);
  uint64_t v3 = alloca(v1);
  uint64_t v4 = type metadata accessor for MLImageClassifier.ModelParameters.ValidationData(0);
  int64_t v5 = *(void *)(*(void *)(v4 - 8) + 64);
  uint64_t v6 = alloca(v5);
  unsigned __int8 v7 = alloca(v5);
  uint64_t v8 = alloca(v5);
  uint64_t v9 = alloca(v5);
  outlined init with copy of Any?(v0 + 16, (uint64_t)&v16);
  if (!v17) {
    BUG();
  }
  outlined init with take of Any(&v16, v15);
  swift_dynamicCast(&v14, v15, (char *)&type metadata for Any + 8, v4, 7);
  outlined init with copy of MLTrainingSessionParameters((uint64_t)&v14, (uint64_t)&v14, type metadata accessor for MLImageClassifier.ModelParameters.ValidationData);
  unsigned int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload(&v14, v4);
  uint64_t v11 = EnumCaseMultiPayload;
  switch(EnumCaseMultiPayload)
  {
    case 0u:
      break;
    case 1u:
      outlined init with take of MLClassifierMetrics((uint64_t)&v14, (uint64_t)&v14, type metadata accessor for MLImageClassifier.DataSource);
      uint64_t v11 = static _ImageUtilities.getImageURLsAndLabels(from:)((uint64_t)&v14);
      outlined destroy of MLActivityClassifier.ModelParameters((uint64_t)&v14, type metadata accessor for MLImageClassifier.DataSource);
      break;
    case 2u:
      uint64_t v11 = v14;
      break;
    case 3u:
      uint64_t v12 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [URL]);
      uint64_t v11 = Dictionary.init(dictionaryLiteral:)(_swiftEmptyArrayStorage, &type metadata for String, v12, &protocol witness table for String);
      break;
  }
  outlined destroy of MLActivityClassifier.ModelParameters((uint64_t)&v14, type metadata accessor for MLImageClassifier.ModelParameters.ValidationData);
  return v11;
}

uint64_t key path setter for MLImageClassifier.ModelParameters.validationData : MLImageClassifier.ModelParameters(uint64_t *a1)
{
  uint64_t v1 = *a1;
  swift_bridgeObjectRetain(*a1);
  return MLImageClassifier.ModelParameters.validationData.setter(v1);
}

uint64_t MLImageClassifier.ModelParameters.validationData.setter(uint64_t a1)
{
  uint64_t v17 = v1;
  unsigned int v2 = 0;
  uint64_t v3 = type metadata accessor for MLImageClassifier.ModelParameters.ValidationData(0);
  int64_t v4 = *(void *)(*(void *)(v3 - 8) + 64);
  int64_t v5 = alloca(v4);
  uint64_t v6 = alloca(v4);
  unsigned __int8 v7 = alloca(v4);
  uint64_t v8 = alloca(v4);
  if (a1)
  {
    if (*(void *)(a1 + 16))
    {
      *(void *)&long long v14 = a1;
      uint64_t v9 = type metadata accessor for MLImageClassifier.DataSource(0);
      swift_storeEnumTagMultiPayload(&v14, v9, 2);
      int v13 = 1;
    }
    else
    {
      swift_bridgeObjectRelease(a1);
      int v13 = 3;
    }
    unsigned int v2 = v13;
  }
  else
  {
    long long v14 = 0;
    __int16 v15 = 256;
  }
  uint64_t v10 = v17;
  swift_storeEnumTagMultiPayload(&v14, v3, v2);
  outlined init with take of MLClassifierMetrics((uint64_t)&v14, (uint64_t)&v14, type metadata accessor for MLImageClassifier.ModelParameters.ValidationData);
  uint64_t v16 = v3;
  uint64_t v11 = __swift_allocate_boxed_opaque_existential_1(&v14);
  outlined init with take of MLClassifierMetrics((uint64_t)&v14, (uint64_t)v11, type metadata accessor for MLImageClassifier.ModelParameters.ValidationData);
  return outlined assign with take of Any?((uint64_t)&v14, v10 + 16);
}

uint64_t MLImageClassifier.ModelParameters.validation.getter()
{
  uint64_t v2 = v0;
  outlined init with copy of Any?(v1 + 16, (uint64_t)&v6);
  if (!v7) {
    BUG();
  }
  outlined init with take of Any(&v6, v5);
  uint64_t v3 = type metadata accessor for MLImageClassifier.ModelParameters.ValidationData(0);
  return swift_dynamicCast(v2, v5, (char *)&type metadata for Any + 8, v3, 7);
}

uint64_t MLImageClassifier.ModelParameters.validation.setter(uint64_t a1)
{
  v4[3] = type metadata accessor for MLImageClassifier.ModelParameters.ValidationData(0);
  boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1(v4);
  outlined init with take of MLClassifierMetrics(a1, (uint64_t)boxed_opaque_existential_1, type metadata accessor for MLImageClassifier.ModelParameters.ValidationData);
  return outlined assign with take of Any?((uint64_t)v4, v1 + 16);
}

uint64_t (*MLImageClassifier.ModelParameters.validationData.modify(void *a1))(uint64_t *a1, char a2)
{
  a1[1] = v1;
  *a1 = MLImageClassifier.ModelParameters.validationData.getter(a1);
  return MLImageClassifier.ModelParameters.validationData.modify;
}

uint64_t MLImageClassifier.ModelParameters.validationData.modify(uint64_t *a1, char a2)
{
  uint64_t v2 = *a1;
  if ((a2 & 1) == 0) {
    return MLImageClassifier.ModelParameters.validationData.setter(*a1);
  }
  swift_bridgeObjectRetain(*a1);
  MLImageClassifier.ModelParameters.validationData.setter(v2);
  return swift_bridgeObjectRelease(v2);
}

uint64_t key path setter for MLImageClassifier.ModelParameters.algorithm : MLImageClassifier.ModelParameters(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(void), uint64_t (*a6)(void *))
{
  v13[0] = v6;
  int64_t v9 = *(void *)(*(void *)(a5(0) - 8) + 64);
  uint64_t v10 = alloca(v9);
  uint64_t v11 = alloca(v9);
  outlined init with copy of MLTrainingSessionParameters(a1, (uint64_t)v13, a5);
  return a6(v13);
}

void (*MLImageClassifier.ModelParameters.validation.modify(void *a1))(uint64_t a1, char a2)
{
  uint64_t v2 = malloc(0xA0uLL);
  *a1 = v2;
  *((void *)v2 + 16) = v1;
  uint64_t v3 = type metadata accessor for MLImageClassifier.ModelParameters.ValidationData(0);
  *((void *)v2 + 17) = v3;
  size_t v4 = *(void *)(*(void *)(v3 - 8) + 64);
  *((void *)v2 + 18) = malloc(v4);
  int64_t v5 = malloc(v4);
  *((void *)v2 + 19) = v5;
  outlined init with copy of Any?(v1 + 16, (uint64_t)(v2 + 2));
  if (!*((void *)v2 + 7)) {
    BUG();
  }
  outlined init with take of Any(v2 + 2, v2);
  swift_dynamicCast(v5, v2, (char *)&type metadata for Any + 8, v3, 7);
  return MLImageClassifier.ModelParameters.validation.modify;
}

void MLImageClassifier.ModelParameters.validation.modify(uint64_t a1, char a2)
{
  uint64_t v2 = *(void **)a1;
  uint64_t v3 = *(void **)(*(void *)a1 + 152);
  uint64_t v4 = *(void *)(*(void *)a1 + 144);
  uint64_t v5 = *(void *)(*(void *)a1 + 136);
  uint64_t v6 = *(void *)(*(void *)a1 + 128) + 16;
  if (a2)
  {
    uint64_t v10 = *(void **)(*(void *)a1 + 144);
    outlined init with copy of MLTrainingSessionParameters(*(void *)(*(void *)a1 + 152), v4, type metadata accessor for MLImageClassifier.ModelParameters.ValidationData);
    v2[11] = v5;
    uint64_t v7 = v10;
    boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1(v2 + 8);
    outlined init with take of MLClassifierMetrics((uint64_t)v10, (uint64_t)boxed_opaque_existential_1, type metadata accessor for MLImageClassifier.ModelParameters.ValidationData);
    outlined assign with take of Any?((uint64_t)(v2 + 8), v6);
    outlined destroy of MLActivityClassifier.ModelParameters((uint64_t)v3, type metadata accessor for MLImageClassifier.ModelParameters.ValidationData);
  }
  else
  {
    v2[15] = v5;
    uint64_t v7 = (void *)v4;
    int64_t v9 = __swift_allocate_boxed_opaque_existential_1(v2 + 12);
    outlined init with take of MLClassifierMetrics((uint64_t)v3, (uint64_t)v9, type metadata accessor for MLImageClassifier.ModelParameters.ValidationData);
    outlined assign with take of Any?((uint64_t)(v2 + 12), v6);
  }
  free(v3);
  free(v7);
  free(v2);
}

uint64_t MLImageClassifier.ModelParameters.featureExtractor.getter()
{
  uint64_t v1 = v0;
  int64_t v2 = *(void *)(*(void *)(type metadata accessor for MLImageClassifier.ModelParameters.ModelAlgorithmType(0) - 8)
                 + 64);
  uint64_t v3 = alloca(v2);
  uint64_t v4 = alloca(v2);
  MLImageClassifier.ModelParameters.algorithm.getter(0);
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (featureExtractor: MLImageClassifier.FeatureExtractorType, classifier: MLImageClassifier.ModelParameters.ClassifierType));
  swift_bridgeObjectRelease(*(void *)&v7[*(int *)(v5 + 48)]);
  return outlined init with take of MLClassifierMetrics((uint64_t)v7, v1, type metadata accessor for MLImageClassifier.FeatureExtractorType);
}

uint64_t MLImageClassifier.ModelParameters.featureExtractor.setter(uint64_t a1)
{
  uint64_t v14 = a1;
  uint64_t v15 = type metadata accessor for MLImageClassifier.ModelParameters.ModelAlgorithmType(0);
  int64_t v2 = *(void *)(*(void *)(v15 - 8) + 64);
  uint64_t v3 = alloca(v2);
  uint64_t v4 = alloca(v2);
  uint64_t v5 = alloca(v2);
  uint64_t v6 = alloca(v2);
  uint64_t v16 = v12;
  MLImageClassifier.ModelParameters.algorithm.getter();
  uint64_t v7 = *(int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (featureExtractor: MLImageClassifier.FeatureExtractorType, classifier: MLImageClassifier.ModelParameters.ClassifierType))
              + 48);
  uint64_t v8 = *(void *)&v12[v7];
  uint64_t v9 = v14;
  outlined init with copy of MLTrainingSessionParameters(v14, (uint64_t)v12, type metadata accessor for MLImageClassifier.FeatureExtractorType);
  *(void *)&v12[v7] = v8;
  v13[3] = v15;
  boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1(v13);
  outlined init with take of MLClassifierMetrics((uint64_t)v12, (uint64_t)boxed_opaque_existential_1, type metadata accessor for MLImageClassifier.ModelParameters.ModelAlgorithmType);
  outlined assign with take of Any?((uint64_t)v13, v1 + 48);
  outlined destroy of MLActivityClassifier.ModelParameters(v9, type metadata accessor for MLImageClassifier.FeatureExtractorType);
  return outlined destroy of MLActivityClassifier.ModelParameters((uint64_t)v16, type metadata accessor for MLImageClassifier.FeatureExtractorType);
}

void (*MLImageClassifier.ModelParameters.featureExtractor.modify(void *a1))(void *a1, char a2)
{
  *a1 = v1;
  uint64_t v2 = type metadata accessor for MLImageClassifier.ModelParameters.ModelAlgorithmType(0);
  uint64_t v3 = (char *)malloc(*(void *)(*(void *)(v2 - 8) + 64));
  a1[1] = v3;
  size_t v4 = *(void *)(*(void *)(type metadata accessor for MLImageClassifier.FeatureExtractorType(0) - 8) + 64);
  a1[2] = malloc(v4);
  uint64_t v5 = malloc(v4);
  a1[3] = v5;
  MLImageClassifier.ModelParameters.algorithm.getter();
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (featureExtractor: MLImageClassifier.FeatureExtractorType, classifier: MLImageClassifier.ModelParameters.ClassifierType));
  swift_bridgeObjectRelease(*(void *)&v3[*(int *)(v6 + 48)]);
  outlined init with take of MLClassifierMetrics((uint64_t)v3, (uint64_t)v5, type metadata accessor for MLImageClassifier.FeatureExtractorType);
  return MLImageClassifier.ModelParameters.featureExtractor.modify;
}

void MLImageClassifier.ModelParameters.featureExtractor.modify(void *a1, char a2)
{
  uint64_t v2 = (void *)a1[3];
  uint64_t v3 = (void *)a1[2];
  size_t v4 = (void *)a1[1];
  if (a2)
  {
    outlined init with copy of MLTrainingSessionParameters(a1[3], (uint64_t)v3, type metadata accessor for MLImageClassifier.FeatureExtractorType);
    MLImageClassifier.ModelParameters.featureExtractor.setter((uint64_t)v3);
    outlined destroy of MLActivityClassifier.ModelParameters((uint64_t)v2, type metadata accessor for MLImageClassifier.FeatureExtractorType);
  }
  else
  {
    MLImageClassifier.ModelParameters.featureExtractor.setter(a1[3]);
  }
  free(v2);
  free(v3);
  free(v4);
}

uint64_t MLImageClassifier.ModelParameters.init(validation:maxIterations:augmentation:algorithm:)(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4)
{
  uint64_t v23 = a4;
  uint64_t v28 = a2;
  uint64_t v27 = a1;
  uint64_t v6 = v4;
  uint64_t v24 = type metadata accessor for MLImageClassifier.ModelParameters.ModelAlgorithmType(0);
  int64_t v7 = *(void *)(*(void *)(v24 - 8) + 64);
  uint64_t v8 = alloca(v7);
  uint64_t v9 = alloca(v7);
  uint64_t v25 = &v20;
  uint64_t v10 = type metadata accessor for MLImageClassifier.ModelParameters.ValidationData(0);
  int64_t v11 = *(void *)(*(void *)(v10 - 8) + 64);
  uint64_t v12 = alloca(v11);
  int v13 = alloca(v11);
  uint64_t v14 = *a3;
  uint64_t v26 = v6 + 48;
  *(_OWORD *)(v6 + 64) = 0;
  *(_OWORD *)(v6 + 48) = 0;
  *(_OWORD *)(v6 + 32) = 0;
  *(_OWORD *)(v6 + 16) = 0;
  *(void *)uint64_t v6 = v28;
  *(void *)(v6 + 8) = v14;
  outlined init with copy of MLTrainingSessionParameters(a1, (uint64_t)&v20, type metadata accessor for MLImageClassifier.ModelParameters.ValidationData);
  uint64_t v22 = v10;
  boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1(v21);
  outlined init with take of MLClassifierMetrics((uint64_t)&v20, (uint64_t)boxed_opaque_existential_1, type metadata accessor for MLImageClassifier.ModelParameters.ValidationData);
  outlined assign with take of Any?((uint64_t)v21, v6 + 16);
  uint64_t v16 = v23;
  uint64_t v17 = (uint64_t)v25;
  outlined init with copy of MLTrainingSessionParameters(v23, (uint64_t)v25, type metadata accessor for MLImageClassifier.ModelParameters.ModelAlgorithmType);
  uint64_t v22 = v24;
  uint64_t v18 = __swift_allocate_boxed_opaque_existential_1(v21);
  outlined init with take of MLClassifierMetrics(v17, (uint64_t)v18, type metadata accessor for MLImageClassifier.ModelParameters.ModelAlgorithmType);
  outlined assign with take of Any?((uint64_t)v21, v26);
  outlined destroy of MLActivityClassifier.ModelParameters(v16, type metadata accessor for MLImageClassifier.ModelParameters.ModelAlgorithmType);
  return outlined destroy of MLActivityClassifier.ModelParameters(v27, type metadata accessor for MLImageClassifier.ModelParameters.ValidationData);
}

uint64_t MLImageClassifier.ModelParameters.init(featureExtractor:validation:maxIterations:augmentationOptions:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  uint64_t v27 = a4;
  uint64_t v25 = a3;
  uint64_t v24 = a2;
  uint64_t v22 = a1;
  uint64_t v5 = v4;
  uint64_t v23 = type metadata accessor for MLImageClassifier.ModelParameters.ModelAlgorithmType(0);
  int64_t v6 = *(void *)(*(void *)(v23 - 8) + 64);
  int64_t v7 = alloca(v6);
  uint64_t v8 = alloca(v6);
  uint64_t v9 = type metadata accessor for MLImageClassifier.ModelParameters.ValidationData(0);
  int64_t v10 = *(void *)(*(void *)(v9 - 8) + 64);
  int64_t v11 = alloca(v10);
  uint64_t v12 = alloca(v10);
  uint64_t v13 = *v27;
  uint64_t v26 = v5 + 16;
  uint64_t v27 = (uint64_t *)(v5 + 48);
  *(_OWORD *)(v5 + 64) = 0;
  *(_OWORD *)(v5 + 48) = 0;
  *(_OWORD *)(v5 + 32) = 0;
  *(_OWORD *)(v5 + 16) = 0;
  *(void *)uint64_t v5 = v25;
  *(void *)(v5 + 8) = v13;
  outlined init with copy of MLTrainingSessionParameters(a2, (uint64_t)v19, type metadata accessor for MLImageClassifier.ModelParameters.ValidationData);
  uint64_t v21 = v9;
  boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1(v20);
  outlined init with take of MLClassifierMetrics((uint64_t)v19, (uint64_t)boxed_opaque_existential_1, type metadata accessor for MLImageClassifier.ModelParameters.ValidationData);
  outlined assign with take of Any?((uint64_t)v20, v26);
  uint64_t v15 = *(int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (featureExtractor: MLImageClassifier.FeatureExtractorType, classifier: MLImageClassifier.ModelParameters.ClassifierType))
               + 48);
  uint64_t v16 = v22;
  outlined init with copy of MLTrainingSessionParameters(v22, (uint64_t)v19, type metadata accessor for MLImageClassifier.FeatureExtractorType);
  *(void *)&v19[v15] = 0;
  uint64_t v21 = v23;
  uint64_t v17 = __swift_allocate_boxed_opaque_existential_1(v20);
  outlined init with take of MLClassifierMetrics((uint64_t)v19, (uint64_t)v17, type metadata accessor for MLImageClassifier.ModelParameters.ModelAlgorithmType);
  outlined assign with take of Any?((uint64_t)v20, (uint64_t)v27);
  outlined destroy of MLActivityClassifier.ModelParameters(v24, type metadata accessor for MLImageClassifier.ModelParameters.ValidationData);
  return outlined destroy of MLActivityClassifier.ModelParameters(v16, type metadata accessor for MLImageClassifier.FeatureExtractorType);
}

uint64_t MLImageClassifier.ModelParameters.init(featureExtractor:validationData:maxIterations:augmentationOptions:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  uint64_t v20 = a2;
  uint64_t v19 = a1;
  uint64_t v7 = v4;
  uint64_t v8 = type metadata accessor for MLImageClassifier.ModelParameters.ModelAlgorithmType(0);
  int64_t v9 = *(void *)(*(void *)(v8 - 8) + 64);
  int64_t v10 = alloca(v9);
  int64_t v11 = alloca(v9);
  uint64_t v12 = *a4;
  uint64_t v18 = v7 + 48;
  *(_OWORD *)(v7 + 64) = 0;
  *(_OWORD *)(v7 + 48) = 0;
  *(_OWORD *)(v7 + 32) = 0;
  *(_OWORD *)(v7 + 16) = 0;
  *(void *)uint64_t v7 = a3;
  *(void *)(v7 + 8) = v12;
  MLImageClassifier.ModelParameters.validationData.setter(v20);
  uint64_t v13 = *(int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (featureExtractor: MLImageClassifier.FeatureExtractorType, classifier: MLImageClassifier.ModelParameters.ClassifierType))
               + 48);
  uint64_t v14 = v19;
  outlined init with copy of MLTrainingSessionParameters(v19, (uint64_t)v17, type metadata accessor for MLImageClassifier.FeatureExtractorType);
  *(void *)((char *)v17 + v13) = 0;
  v17[3] = v8;
  boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1(v17);
  outlined init with take of MLClassifierMetrics((uint64_t)v17, (uint64_t)boxed_opaque_existential_1, type metadata accessor for MLImageClassifier.ModelParameters.ModelAlgorithmType);
  outlined assign with take of Any?((uint64_t)v17, v18);
  return outlined destroy of MLActivityClassifier.ModelParameters(v14, type metadata accessor for MLImageClassifier.FeatureExtractorType);
}

{
  uint64_t v4;
  uint64_t v7;
  int64_t v8;
  void *v9;
  void *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  void *boxed_opaque_existential_1;
  unsigned char v18[16];
  void v19[4];
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;

  uint64_t v20 = a1;
  uint64_t v7 = v4;
  uint64_t v22 = type metadata accessor for MLImageClassifier.ModelParameters.ModelAlgorithmType(0);
  uint64_t v8 = *(void *)(*(void *)(v22 - 8) + 64);
  int64_t v9 = alloca(v8);
  int64_t v10 = alloca(v8);
  int64_t v11 = *a4;
  *(_OWORD *)(v7 + 64) = 0;
  *(_OWORD *)(v7 + 48) = 0;
  *(_OWORD *)(v7 + 32) = 0;
  *(_OWORD *)(v7 + 16) = 0;
  *(void *)uint64_t v7 = a3;
  *(void *)(v7 + 8) = v11;
  uint64_t v21 = a2;
  uint64_t v12 = static _ImageUtilities.getImageURLsAndLabels(from:)(a2);
  uint64_t v13 = v7 + 48;
  MLImageClassifier.ModelParameters.validationData.setter(v12);
  uint64_t v14 = *(int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (featureExtractor: MLImageClassifier.FeatureExtractorType, classifier: MLImageClassifier.ModelParameters.ClassifierType))
               + 48);
  uint64_t v15 = v20;
  outlined init with copy of MLTrainingSessionParameters(v20, (uint64_t)v18, type metadata accessor for MLImageClassifier.FeatureExtractorType);
  *(void *)&v18[v14] = 0;
  v19[3] = v22;
  boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1(v19);
  outlined init with take of MLClassifierMetrics((uint64_t)v18, (uint64_t)boxed_opaque_existential_1, type metadata accessor for MLImageClassifier.ModelParameters.ModelAlgorithmType);
  outlined assign with take of Any?((uint64_t)v19, v13);
  outlined destroy of MLActivityClassifier.ModelParameters(v21, type metadata accessor for MLImageClassifier.DataSource);
  return outlined destroy of MLActivityClassifier.ModelParameters(v15, type metadata accessor for MLImageClassifier.FeatureExtractorType);
}

unint64_t MLImageClassifier.ModelParameters.description.getter()
{
  int64_t v1 = *(void *)(*(void *)(type metadata accessor for MLImageClassifier.FeatureExtractorType(0) - 8) + 64);
  uint64_t v2 = alloca(v1);
  uint64_t v3 = alloca(v1);
  int64_t v4 = *(void *)(*(void *)(type metadata accessor for MLImageClassifier.ModelParameters.ModelAlgorithmType(0) - 8)
                 + 64);
  uint64_t v5 = alloca(v4);
  int64_t v6 = alloca(v4);
  uint64_t v24 = v0;
  MLImageClassifier.ModelParameters.algorithm.getter();
  uint64_t v7 = *(void *)&v20[*(int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (featureExtractor: MLImageClassifier.FeatureExtractorType, classifier: MLImageClassifier.ModelParameters.ClassifierType))
                              + 48)];
  outlined init with take of MLClassifierMetrics((uint64_t)v20, (uint64_t)v20, type metadata accessor for MLImageClassifier.FeatureExtractorType);
  unint64_t v22 = 0;
  uint64_t v23 = (char *)0xE000000000000000;
  _StringGuts.grow(_:)(22);
  swift_bridgeObjectRelease((_BYTE)v23);
  unint64_t v22 = 0xD000000000000013;
  uint64_t v23 = "ave MLMultiArray rank 3." + 0x8000000000000000;
  v8._uint64_t countAndFlagsBits = MLImageClassifier.FeatureExtractorType.description.getter();
  char object = (char)v8._object;
  String.append(_:)(v8);
  swift_bridgeObjectRelease(object);
  v10._uint64_t countAndFlagsBits = 10;
  v10._char object = (void *)0xE100000000000000;
  String.append(_:)(v10);
  strcpy((char *)&v25, "Classifier: ");
  BYTE5(v25._object) = 0;
  HIWORD(v25._object) = -5120;
  if (v7)
  {
    swift_bridgeObjectRelease(v7);
    int64_t v11 = "Feature Extractor: " + 0x8000000000000000;
    v12._uint64_t countAndFlagsBits = 0xD000000000000015;
  }
  else
  {
    int64_t v11 = "Multilayer Perceptron" + 0x8000000000000000;
    v12._uint64_t countAndFlagsBits = 0xD000000000000012;
  }
  v12._char object = v11;
  String.append(_:)(v12);
  swift_bridgeObjectRelease((_BYTE)v11);
  v13._uint64_t countAndFlagsBits = 10;
  v13._char object = (void *)0xE100000000000000;
  String.append(_:)(v13);
  char v14 = (char)v25._object;
  String.append(_:)(v25);
  swift_bridgeObjectRelease(v14);
  outlined destroy of MLActivityClassifier.ModelParameters((uint64_t)v20, type metadata accessor for MLImageClassifier.FeatureExtractorType);
  v25._uint64_t countAndFlagsBits = 0;
  v25._char object = (void *)0xE000000000000000;
  _StringGuts.grow(_:)(19);
  swift_bridgeObjectRelease(v25._object);
  v25._uint64_t countAndFlagsBits = 0xD000000000000010;
  v25._char object = "ansformer have different types." + 0x8000000000000000;
  uint64_t v21 = *v24;
  uint64_t v15 = dispatch thunk of CustomStringConvertible.description.getter(&type metadata for Int, &protocol witness table for Int);
  char v17 = (char)v16;
  v13._uint64_t countAndFlagsBits = v15;
  v13._char object = v16;
  String.append(_:)(v13);
  swift_bridgeObjectRelease(v17);
  v13._uint64_t countAndFlagsBits = 10;
  v13._char object = (void *)0xE100000000000000;
  String.append(_:)(v13);
  char v18 = (char)v25._object;
  String.append(_:)(v25);
  swift_bridgeObjectRelease(v18);
  return v22;
}

unint64_t MLImageClassifier.ModelParameters.debugDescription.getter()
{
  return MLImageClassifier.ModelParameters.description.getter();
}

unint64_t MLImageClassifier.ModelParameters.playgroundDescription.getter()
{
  int64_t v1 = v0;
  unint64_t result = MLImageClassifier.ModelParameters.description.getter();
  v1[3] = (unint64_t)&type metadata for String;
  *int64_t v1 = result;
  v1[1] = v3;
  return result;
}

unint64_t protocol witness for CustomStringConvertible.description.getter in conformance MLImageClassifier.ModelParameters()
{
  return MLImageClassifier.ModelParameters.description.getter();
}

unint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance MLImageClassifier.ModelParameters()
{
  return MLImageClassifier.ModelParameters.debugDescription.getter();
}

unint64_t protocol witness for CustomPlaygroundDisplayConvertible.playgroundDescription.getter in conformance MLImageClassifier.ModelParameters()
{
  return MLImageClassifier.ModelParameters.playgroundDescription.getter();
}

Swift::Void __swiftcall __spoils<cf,zf,sf,of,pf,rax,rdx,rcx,rdi,rsi,r8,r9,r10,r11,r12,xmm0,xmm1,xmm2,xmm3,xmm4,xmm5,xmm6,xmm7> MLImageClassifier.ModelParameters.validate()()
{
  int64_t v1 = *(void *)(*(void *)(type metadata accessor for MLImageClassifier.ModelParameters.ModelAlgorithmType(0) - 8)
                 + 64);
  uint64_t v2 = alloca(v1);
  unint64_t v3 = alloca(v1);
  MLImageClassifier.ModelParameters.algorithm.getter(0);
  MLImageClassifier.ModelParameters.ModelAlgorithmType.validate()();
  outlined destroy of MLActivityClassifier.ModelParameters((uint64_t)v18, type metadata accessor for MLImageClassifier.ModelParameters.ModelAlgorithmType);
  if (!v4)
  {
    uint64_t v5 = *v0;
    outlined init with copy of MLImageClassifier.ModelParameters((uint64_t)v0, (uint64_t)v18);
    if (v5 <= 0)
    {
      outlined destroy of MLImageClassifier.ModelParameters((uint64_t)v18);
    }
    else
    {
      uint64_t v6 = *(void *)&v18[0];
      outlined destroy of MLImageClassifier.ModelParameters((uint64_t)v18);
      if (v6 < 0x7FFFFFFF) {
        return;
      }
    }
    *(void *)&v18[0] = 0;
    *((void *)&v18[0] + 1) = 0xE000000000000000;
    _StringGuts.grow(_:)(87);
    v7._char object = "Logistic Regressor" + 0x8000000000000000;
    v7._uint64_t countAndFlagsBits = 0xD000000000000048;
    String.append(_:)(v7);
    LODWORD(v20) = 0x7FFFFFFF;
    uint64_t v8 = dispatch thunk of CustomStringConvertible.description.getter(&type metadata for Int32, &protocol witness table for Int32);
    char v10 = (char)v9;
    v7._uint64_t countAndFlagsBits = v8;
    v7._char object = v9;
    String.append(_:)(v7);
    swift_bridgeObjectRelease(v10);
    v7._uint64_t countAndFlagsBits = 0x6F6720747562202CLL;
    v7._char object = (void *)0xEA00000000002074;
    String.append(_:)(v7);
    uint64_t v20 = *v0;
    uint64_t v11 = dispatch thunk of CustomStringConvertible.description.getter(&type metadata for Int, &protocol witness table for Int);
    char v13 = (char)v12;
    v7._uint64_t countAndFlagsBits = v11;
    v7._char object = v12;
    String.append(_:)(v7);
    swift_bridgeObjectRelease(v13);
    v7._uint64_t countAndFlagsBits = 46;
    v7._char object = (void *)0xE100000000000000;
    String.append(_:)(v7);
    long long v19 = v18[0];
    v7._char object = (void *)lazy protocol witness table accessor for type MLCreateError and conformance MLCreateError();
    swift_allocError(&type metadata for MLCreateError, v7._object, 0, 0);
    *(_OWORD *)uint64_t v14 = v19;
    *(_OWORD *)(v14 + 16) = 0;
    *(_OWORD *)(v14 + 32) = 0;
    *(unsigned char *)(v14 + 48) = 0;
    swift_willThrow(&type metadata for MLCreateError, v7._object, v14, v15, v16, v17);
  }
}

uint64_t sub_A506F(uint64_t a1)
{
  return MLImageClassifier.ModelParameters.algorithm.getter(a1);
}

uint64_t sub_A5086(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return key path setter for MLImageClassifier.ModelParameters.algorithm : MLImageClassifier.ModelParameters(a1, a2, a3, a4, type metadata accessor for MLImageClassifier.ModelParameters.ModelAlgorithmType, (uint64_t (*)(void *))MLImageClassifier.ModelParameters.algorithm.setter);
}

uint64_t sub_A509F(uint64_t a1)
{
  uint64_t v2 = v1;
  uint64_t result = MLImageClassifier.ModelParameters.validationData.getter(a1);
  uint64_t *v2 = result;
  return result;
}

uint64_t sub_A50B9(uint64_t *a1)
{
  return key path setter for MLImageClassifier.ModelParameters.validationData : MLImageClassifier.ModelParameters(a1);
}

uint64_t sub_A50C3(uint64_t a1)
{
  return MLImageClassifier.ModelParameters.validation.getter(a1);
}

uint64_t sub_A50DA(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return key path setter for MLImageClassifier.ModelParameters.algorithm : MLImageClassifier.ModelParameters(a1, a2, a3, a4, type metadata accessor for MLImageClassifier.ModelParameters.ValidationData, (uint64_t (*)(void *))MLImageClassifier.ModelParameters.validation.setter);
}

uint64_t sub_A50F3(uint64_t a1)
{
  return MLImageClassifier.ModelParameters.featureExtractor.getter(a1);
}

uint64_t sub_A510A(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return key path setter for MLImageClassifier.ModelParameters.algorithm : MLImageClassifier.ModelParameters(a1, a2, a3, a4, type metadata accessor for MLImageClassifier.FeatureExtractorType, (uint64_t (*)(void *))MLImageClassifier.ModelParameters.featureExtractor.setter);
}

uint64_t destroy for MLImageClassifier.ModelParameters(void *a1)
{
  if (a1[5]) {
    uint64_t result = __swift_destroy_boxed_opaque_existential_1Tm(a1 + 2);
  }
  if (a1[9]) {
    return __swift_destroy_boxed_opaque_existential_1Tm(a1 + 6);
  }
  return result;
}

uint64_t initializeWithCopy for MLImageClassifier.ModelParameters(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  uint64_t v4 = (_OWORD *)(a1 + 16);
  uint64_t v5 = (long long *)(a2 + 16);
  uint64_t v6 = *(void *)(a2 + 40);
  if (v6)
  {
    *(void *)(a1 + 40) = v6;
    (**(void (***)(_OWORD *, long long *))(v6 - 8))(v4, v5);
  }
  else
  {
    long long v7 = *v5;
    v4[1] = v5[1];
    *uint64_t v4 = v7;
  }
  uint64_t v8 = (_OWORD *)(a1 + 48);
  uint64_t v9 = *(void *)(a2 + 72);
  char v10 = (long long *)(a2 + 48);
  if (v9)
  {
    *(void *)(a1 + 72) = v9;
    (**(void (***)(_OWORD *, long long *))(v9 - 8))(v8, v10);
  }
  else
  {
    long long v11 = *v10;
    *(_OWORD *)(a1 + 64) = v10[1];
    _OWORD *v8 = v11;
  }
  return a1;
}

uint64_t assignWithCopy for MLImageClassifier.ModelParameters(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  uint64_t v2 = *(void *)(a2 + 40);
  if (*(void *)(a1 + 40))
  {
    if (v2)
    {
      __swift_assign_boxed_opaque_existential_0((uint64_t *)(a1 + 16), (uint64_t *)(a2 + 16));
      goto LABEL_8;
    }
    __swift_destroy_boxed_opaque_existential_1Tm((void *)(a1 + 16));
  }
  else if (v2)
  {
    *(void *)(a1 + 40) = v2;
    (**(void (***)(uint64_t, uint64_t))(v2 - 8))(a1 + 16, a2 + 16);
    goto LABEL_8;
  }
  long long v3 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 16) = v3;
LABEL_8:
  uint64_t v4 = *(void *)(a2 + 72);
  if (!*(void *)(a1 + 72))
  {
    if (v4)
    {
      *(void *)(a1 + 72) = v4;
      (**(void (***)(uint64_t, uint64_t))(v4 - 8))(a1 + 48, a2 + 48);
      return a1;
    }
LABEL_14:
    long long v5 = *(_OWORD *)(a2 + 48);
    *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
    *(_OWORD *)(a1 + 48) = v5;
    return a1;
  }
  if (!v4)
  {
    __swift_destroy_boxed_opaque_existential_1Tm((void *)(a1 + 48));
    goto LABEL_14;
  }
  __swift_assign_boxed_opaque_existential_0((uint64_t *)(a1 + 48), (uint64_t *)(a2 + 48));
  return a1;
}

void *__swift_memcpy80_8(void *a1, const void *a2)
{
  uint64_t result = a1;
  qmemcpy(a1, a2, 0x50uLL);
  return result;
}

uint64_t assignWithTake for MLImageClassifier.ModelParameters(uint64_t a1, _OWORD *a2)
{
  *(_OWORD *)a1 = *a2;
  if (*(void *)(a1 + 40)) {
    __swift_destroy_boxed_opaque_existential_1Tm((void *)(a1 + 16));
  }
  long long v2 = a2[1];
  *(_OWORD *)(a1 + 32) = a2[2];
  *(_OWORD *)(a1 + 16) = v2;
  if (*(void *)(a1 + 72)) {
    __swift_destroy_boxed_opaque_existential_1Tm((void *)(a1 + 48));
  }
  long long v3 = a2[3];
  *(_OWORD *)(a1 + 64) = a2[4];
  *(_OWORD *)(a1 + 48) = v3;
  return a1;
}

uint64_t getEnumTagSinglePayload for MLImageClassifier.ModelParameters(uint64_t a1, unsigned int a2)
{
  if (a2)
  {
    if (a2 >= 0x7FFFFFFF && *(unsigned char *)(a1 + 80))
    {
      int v2 = *(_DWORD *)a1 + 2147483646;
    }
    else
    {
      unint64_t v3 = *(void *)(a1 + 40);
      unint64_t v4 = v3 & 0xFFFFFFFF00000001;
      int v5 = (v3 >> 1) - 1;
      int v6 = -1;
      if (v5 >= 0) {
        int v6 = v5;
      }
      int v2 = v4 != 0 ? -1 : v6;
    }
  }
  else
  {
    int v2 = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for MLImageClassifier.ModelParameters(uint64_t a1, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFE)
  {
    *(void *)(a1 + 72) = 0;
    *(_OWORD *)(a1 + 56) = 0;
    *(_OWORD *)(a1 + 40) = 0;
    *(_OWORD *)(a1 + 24) = 0;
    *(_OWORD *)(a1 + 8) = 0;
    *(void *)a1 = a2 - 0x7FFFFFFF;
    if (a3 >= 0x7FFFFFFF) {
      *(unsigned char *)(a1 + 80) = 1;
    }
  }
  else
  {
    if (a3 >= 0x7FFFFFFF) {
      *(unsigned char *)(a1 + 80) = 0;
    }
    if (a2)
    {
      uint64_t result = 2 * a2;
      *(void *)(a1 + 40) = result;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for MLImageClassifier.ModelParameters()
{
  return &type metadata for MLImageClassifier.ModelParameters;
}

void *__swift_memcpy8_8(void *a1, void *a2)
{
  uint64_t result = a1;
  *a1 = *a2;
  return result;
}

ValueMetadata *type metadata accessor for MLObjectDetector.ModelParameters.FeatureExtractorType()
{
  return &type metadata for MLObjectDetector.ModelParameters.FeatureExtractorType;
}

uint64_t MLHandActionClassifier.ModelParameters.init(validation:batchSize:maximumIterations:predictionWindowSize:augmentationOptions:algorithm:targetFrameRate:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t *a5, double a6)
{
  uint64_t v9 = v6;
  uint64_t v10 = *a5;
  outlined init with take of MLClassifierMetrics(a1, v6, type metadata accessor for MLHandActionClassifier.ModelParameters.ValidationData);
  long long v11 = (int *)type metadata accessor for MLHandActionClassifier.ModelParameters(0);
  *(void *)(v9 + v11[5]) = a2;
  *(void *)(v9 + v11[6]) = a3;
  *(void *)(v9 + v11[7]) = a4;
  *(void *)(v9 + v11[8]) = v10;
  uint64_t result = v11[10];
  *(double *)(v9 + result) = a6;
  return result;
}

uint64_t type metadata accessor for MLHandActionClassifier.ModelParameters.ValidationData(uint64_t a1)
{
  return type metadata accessor for MLImageClassifier.CustomFeatureExtractor(a1, (uint64_t *)&type metadata singleton initialization cache for MLHandActionClassifier.ModelParameters.ValidationData, (uint64_t)&nominal type descriptor for MLHandActionClassifier.ModelParameters.ValidationData);
}

uint64_t type metadata accessor for MLHandActionClassifier.ModelParameters(uint64_t a1)
{
  return type metadata accessor for MLImageClassifier.CustomFeatureExtractor(a1, (uint64_t *)&type metadata singleton initialization cache for MLHandActionClassifier.ModelParameters, (uint64_t)&nominal type descriptor for MLHandActionClassifier.ModelParameters);
}

uint64_t MLHandActionClassifier.ModelParameters.validation.getter()
{
  return outlined init with copy of MLHandActionClassifier.ModelParameters.ValidationData(v1, v0);
}

uint64_t outlined init with copy of MLHandActionClassifier.ModelParameters.ValidationData(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = type metadata accessor for MLHandActionClassifier.ModelParameters.ValidationData(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v2 - 8) + 16))(a2, a1, v2);
  return a2;
}

uint64_t MLHandActionClassifier.ModelParameters.validation.setter(uint64_t a1)
{
  return outlined assign with take of MLHandActionClassifier.ModelParameters.ValidationData(a1, v1);
}

uint64_t outlined assign with take of MLHandActionClassifier.ModelParameters.ValidationData(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = type metadata accessor for MLHandActionClassifier.ModelParameters.ValidationData(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v2 - 8) + 40))(a2, a1, v2);
  return a2;
}

void (*MLHandActionClassifier.ModelParameters.validation.modify())()
{
  return MLBoostedTreeRegressor.ModelParameters.maxDepth.modify;
}

uint64_t MLHandActionClassifier.ModelParameters.batchSize.getter()
{
  return *(void *)(v0 + *(int *)(type metadata accessor for MLHandActionClassifier.ModelParameters(0) + 20));
}

uint64_t MLHandActionClassifier.ModelParameters.batchSize.setter(uint64_t a1)
{
  uint64_t result = *(int *)(type metadata accessor for MLHandActionClassifier.ModelParameters(0) + 20);
  *(void *)(v1 + result) = a1;
  return result;
}

void (*MLHandActionClassifier.ModelParameters.batchSize.modify())()
{
  return MLBoostedTreeRegressor.ModelParameters.maxDepth.modify;
}

uint64_t MLHandActionClassifier.ModelParameters.maximumIterations.getter()
{
  return *(void *)(v0 + *(int *)(type metadata accessor for MLHandActionClassifier.ModelParameters(0) + 24));
}

uint64_t MLHandActionClassifier.ModelParameters.maximumIterations.setter(uint64_t a1)
{
  uint64_t result = *(int *)(type metadata accessor for MLHandActionClassifier.ModelParameters(0) + 24);
  *(void *)(v1 + result) = a1;
  return result;
}

void (*MLHandActionClassifier.ModelParameters.maximumIterations.modify())()
{
  return MLBoostedTreeRegressor.ModelParameters.maxDepth.modify;
}

uint64_t MLHandActionClassifier.ModelParameters.predictionWindowSize.getter()
{
  return *(void *)(v0 + *(int *)(type metadata accessor for MLHandActionClassifier.ModelParameters(0) + 28));
}

uint64_t MLHandActionClassifier.ModelParameters.predictionWindowSize.setter(uint64_t a1)
{
  uint64_t result = *(int *)(type metadata accessor for MLHandActionClassifier.ModelParameters(0) + 28);
  *(void *)(v1 + result) = a1;
  return result;
}

void (*MLHandActionClassifier.ModelParameters.predictionWindowSize.modify())()
{
  return MLBoostedTreeRegressor.ModelParameters.maxDepth.modify;
}

uint64_t MLHandActionClassifier.ModelParameters.augmentationOptions.getter()
{
  uint64_t v2 = v0;
  uint64_t result = *(void *)(v1 + *(int *)(type metadata accessor for MLHandActionClassifier.ModelParameters(0) + 32));
  void *v2 = result;
  return result;
}

uint64_t MLHandActionClassifier.ModelParameters.augmentationOptions.setter(uint64_t *a1)
{
  uint64_t v2 = *a1;
  uint64_t result = *(int *)(type metadata accessor for MLHandActionClassifier.ModelParameters(0) + 32);
  *(void *)(v1 + result) = v2;
  return result;
}

void (*MLHandActionClassifier.ModelParameters.augmentationOptions.modify())()
{
  return MLBoostedTreeRegressor.ModelParameters.maxDepth.modify;
}

void (*MLHandActionClassifier.ModelParameters.algorithm.modify())()
{
  return MLBoostedTreeRegressor.ModelParameters.maxDepth.modify;
}

double MLHandActionClassifier.ModelParameters.targetFrameRate.getter()
{
  return *(double *)(v0 + *(int *)(type metadata accessor for MLHandActionClassifier.ModelParameters(0) + 40));
}

uint64_t MLHandActionClassifier.ModelParameters.targetFrameRate.setter(double a1)
{
  uint64_t result = *(int *)(type metadata accessor for MLHandActionClassifier.ModelParameters(0) + 40);
  *(double *)(v1 + result) = a1;
  return result;
}

void (*MLHandActionClassifier.ModelParameters.targetFrameRate.modify())()
{
  return MLBoostedTreeRegressor.ModelParameters.maxDepth.modify;
}

void MLHandActionClassifier.ModelParameters.ModelAlgorithmType.hash(into:)()
{
}

char static MLHandActionClassifier.ModelParameters.ModelAlgorithmType.== infix(_:_:)()
{
  return 1;
}

Swift::Int MLHandActionClassifier.ModelParameters.ModelAlgorithmType.hashValue.getter()
{
  return Hasher._finalize()();
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance MLHandActionClassifier.ModelParameters.ModelAlgorithmType()
{
  return MLHandActionClassifier.ModelParameters.ModelAlgorithmType.hashValue.getter();
}

void protocol witness for Hashable.hash(into:) in conformance MLHandActionClassifier.ModelParameters.ModelAlgorithmType()
{
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance MLHandActionClassifier.ModelParameters.ModelAlgorithmType(uint64_t a1)
{
  return Hasher._finalize()();
}

char protocol witness for static Equatable.== infix(_:_:) in conformance MLHandActionClassifier.ModelParameters.ModelAlgorithmType()
{
  return 1;
}

char MLHandActionClassifier.ModelParameters.ValidationData.extractAnnotations(trainingData:)(uint64_t *a1, void *a2, __m128 a3)
{
  uint64_t v55 = v3;
  uint64_t v51 = v4;
  uint64_t v53 = a2;
  uint64_t v54 = a1;
  uint64_t v5 = type metadata accessor for MLHandActionClassifier.DataSource(0);
  int64_t v6 = *(void *)(*(void *)(v5 - 8) + 64);
  long long v7 = alloca(v6);
  uint64_t v8 = alloca(v6);
  *(void *)&long long v46 = &v41;
  uint64_t v9 = type metadata accessor for MLHandActionClassifier.ModelParameters.ValidationData(0);
  int64_t v10 = *(void *)(*(void *)(v9 - 8) + 64);
  long long v11 = alloca(v10);
  Swift::String v12 = alloca(v10);
  uint64_t v13 = v55;
  LOBYTE(v14) = MLHandActionClassifier.DataSource.videosWithAnnotations()(a3);
  if (v13) {
    return (char)v14;
  }
  uint64_t v47 = v5;
  uint64_t v52 = v48;
  LOBYTE(v55) = BYTE8(v48);
  outlined init with copy of MLHandActionClassifier.ModelParameters.ValidationData(v51, (uint64_t)&v41);
  int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload(&v41, v9);
  if (!EnumCaseMultiPayload)
  {
    uint64_t v51 = 0;
    long long v46 = v41;
    char v20 = BYTE1(v42);
    LOBYTE(v47) = v42;
    uint64_t v21 = v52;
    *(void *)&long long v48 = v52;
    char v22 = v55;
    BYTE8(v48) = v55;
    if (MLDataTable.size.getter() > 0)
    {
      uint64_t v42 = v21;
      char v43 = v22;
      long long v48 = v46;
      char v49 = v47;
      char v50 = v20 & 1;
      MLDataTable.randomSplitBySequence(strategy:by:on:)(&v41, &v44, (uint64_t)&v48, 0x7461506F65646976, (void *)0xE900000000000068, 0x6C6562616CLL, (void *)0xE500000000000000);
      outlined consume of Result<_DataTable, Error>(v21, v22);
      uint64_t v14 = (void *)v41;
      char v23 = BYTE8(v41);
      char v24 = v45;
      Swift::String v25 = v54;
      *uint64_t v54 = v44;
      *((unsigned char *)v25 + 8) = v24;
      uint64_t v26 = v53;
      *uint64_t v53 = v14;
      *((unsigned char *)v26 + 8) = v23;
      return (char)v14;
    }
LABEL_11:
    outlined consume of Result<_DataTable, Error>(v21, v22);
    uint64_t v29 = v54;
    *uint64_t v54 = 0;
    LOBYTE(v14) = -1;
    *((unsigned char *)v29 + 8) = -1;
    uint64_t v30 = v53;
    *uint64_t v53 = 0;
    *((unsigned char *)v30 + 8) = -1;
    return (char)v14;
  }
  if (EnumCaseMultiPayload != 1)
  {
    uint64_t v21 = v52;
    *(void *)&long long v48 = v52;
    char v22 = v55;
    BYTE8(v48) = v55;
    MLDataTable.size.getter();
    if (v27)
    {
      uint64_t v28 = v54;
      *uint64_t v54 = v21;
      *((unsigned char *)v28 + 8) = v22;
      uint64_t v14 = v53;
      *uint64_t v53 = 0;
      *((unsigned char *)v14 + 8) = -1;
      return (char)v14;
    }
    goto LABEL_11;
  }
  int v16 = swift_getEnumCaseMultiPayload(&v41, v47);
  if (v16 == 5)
  {
    outlined consume of Result<_DataTable, Error>(v52, v55);
    uint64_t v31 = (int *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (DataFrame, sessionIdColumn: String, labelColumn: String, featureColumn: String));
    swift_bridgeObjectRelease(*(void *)((char *)&v41 + v31[12] + 8));
    swift_bridgeObjectRelease(*(void *)((char *)&v41 + v31[16] + 8));
    swift_bridgeObjectRelease(*(void *)((char *)&v41 + v31[20] + 8));
    uint64_t v32 = type metadata accessor for DataFrame(0);
    (*(void (**)(long long *, uint64_t))(*(void *)(v32 - 8) + 8))(&v41, v32);
  }
  else
  {
    if (v16 != 3)
    {
      uint64_t v35 = v46;
      outlined init with take of MLClassifierMetrics((uint64_t)&v41, v46, type metadata accessor for MLHandActionClassifier.DataSource);
      MLHandActionClassifier.DataSource.videosWithAnnotations()(a3);
      outlined destroy of MLHandActionClassifier.ModelParameters.ValidationData(v35, type metadata accessor for MLHandActionClassifier.DataSource);
      char v36 = v55;
      uint64_t v14 = (void *)v48;
      char v37 = BYTE8(v48);
      int v38 = v54;
      *uint64_t v54 = v52;
      *((unsigned char *)v38 + 8) = v36;
      uint64_t v39 = v53;
      *uint64_t v53 = v14;
      *((unsigned char *)v39 + 8) = v37;
      return (char)v14;
    }
    outlined consume of Result<_DataTable, Error>(v52, v55);
    char v17 = v43;
    char v18 = v45;
    char v19 = BYTE8(v46);
    outlined consume of Result<_DataTable, Error>(v41, SBYTE8(v41));
    swift_bridgeObjectRelease(v19);
    swift_bridgeObjectRelease(v18);
    swift_bridgeObjectRelease(v17);
  }
  BOOL v33 = v54;
  *uint64_t v54 = 0;
  LOBYTE(v14) = -1;
  *((unsigned char *)v33 + 8) = -1;
  uint64_t v34 = v53;
  *uint64_t v53 = 0;
  *((unsigned char *)v34 + 8) = -1;
  return (char)v14;
}

unint64_t MLHandActionClassifier.ModelParameters.description.getter()
{
  _StringGuts.grow(_:)(23);
  swift_bridgeObjectRelease(0);
  uint64_t v1 = type metadata accessor for MLHandActionClassifier.ModelParameters(0);
  v2._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter(&type metadata for Int, &protocol witness table for Int);
  char object = (char)v2._object;
  String.append(_:)(v2);
  swift_bridgeObjectRelease(object);
  v4._uint64_t countAndFlagsBits = 10;
  v4._char object = (void *)0xE100000000000000;
  String.append(_:)(v4);
  strcpy((char *)&v15, "Batch Size: ");
  BYTE5(v15._object) = 0;
  HIWORD(v15._object) = -5120;
  v5._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter(&type metadata for Int, &protocol witness table for Int);
  char v6 = (char)v5._object;
  String.append(_:)(v5);
  swift_bridgeObjectRelease(v6);
  v4._uint64_t countAndFlagsBits = 10;
  v4._char object = (void *)0xE100000000000000;
  String.append(_:)(v4);
  String.append(_:)(v15);
  swift_bridgeObjectRelease(v15._object);
  _StringGuts.grow(_:)(27);
  swift_bridgeObjectRelease(0);
  v7._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter(&type metadata for Int, &protocol witness table for Int);
  char v8 = (char)v7._object;
  String.append(_:)(v7);
  swift_bridgeObjectRelease(v8);
  v4._uint64_t countAndFlagsBits = 10;
  v4._char object = (void *)0xE100000000000000;
  String.append(_:)(v4);
  v4._uint64_t countAndFlagsBits = 0xD000000000000018;
  v4._char object = "Maximum Iterations: " + 0x8000000000000000;
  String.append(_:)(v4);
  swift_bridgeObjectRelease(("Maximum Iterations: " + 0x8000000000000000));
  _StringGuts.grow(_:)(22);
  swift_bridgeObjectRelease(0);
  v15._uint64_t countAndFlagsBits = 0xD000000000000013;
  v15._char object = "Prediction Window Time: " + 0x8000000000000000;
  v9._uint64_t countAndFlagsBits = Double.description.getter(*(double *)(v0 + *(int *)(v1 + 40)));
  char v10 = (char)v9._object;
  String.append(_:)(v9);
  swift_bridgeObjectRelease(v10);
  v4._uint64_t countAndFlagsBits = 10;
  v4._char object = (void *)0xE100000000000000;
  String.append(_:)(v4);
  v4._uint64_t countAndFlagsBits = 0xD000000000000013;
  v12._char object = "Prediction Window Time: " + 0x8000000000000000;
  String.append(_:)(v12);
  swift_bridgeObjectRelease(("Prediction Window Time: " + 0x8000000000000000));
  _StringGuts.grow(_:)(25);
  swift_bridgeObjectRelease(0);
  v15._uint64_t countAndFlagsBits = 0xD000000000000016;
  v15._char object = "Target Frame Rate: " + 0x8000000000000000;
  long long v11 = "Model Algorithm: GCN\n" + 0x8000000000000000;
  v12._uint64_t countAndFlagsBits = 0;
  if (*(void *)(v0 + *(int *)(v1 + 32)) == 1) {
    v12._uint64_t countAndFlagsBits = 0xD000000000000011;
  }
  else {
    long long v11 = (char *)0xE000000000000000;
  }
  v12._char object = v11;
  String.append(_:)(v12);
  swift_bridgeObjectRelease((_BYTE)v11);
  v13._uint64_t countAndFlagsBits = 10;
  v13._char object = (void *)0xE100000000000000;
  String.append(_:)(v13);
  String.append(_:)(v15);
  swift_bridgeObjectRelease(v15._object);
  _StringGuts.grow(_:)(20);
  swift_bridgeObjectRelease(0);
  v13._char object = "Augmentation Options: " + 0x8000000000000000;
  v13._uint64_t countAndFlagsBits = 0xD000000000000015;
  String.append(_:)(v13);
  return 0xD000000000000014;
}

unint64_t MLHandActionClassifier.ModelParameters.debugDescription.getter()
{
  return MLHandActionClassifier.ModelParameters.description.getter();
}

unint64_t MLHandActionClassifier.ModelParameters.playgroundDescription.getter()
{
  uint64_t v1 = v0;
  unint64_t result = MLHandActionClassifier.ModelParameters.description.getter();
  v1[3] = (unint64_t)&type metadata for String;
  *uint64_t v1 = result;
  v1[1] = v3;
  return result;
}

unint64_t protocol witness for CustomStringConvertible.description.getter in conformance MLHandActionClassifier.ModelParameters()
{
  return MLHandActionClassifier.ModelParameters.description.getter();
}

unint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance MLHandActionClassifier.ModelParameters()
{
  return MLHandActionClassifier.ModelParameters.debugDescription.getter();
}

unint64_t protocol witness for CustomPlaygroundDisplayConvertible.playgroundDescription.getter in conformance MLHandActionClassifier.ModelParameters()
{
  return MLHandActionClassifier.ModelParameters.playgroundDescription.getter();
}

uint64_t base witness table accessor for Equatable in MLHandActionClassifier.ModelParameters.ModelAlgorithmType()
{
  return lazy protocol witness table accessor for type MLHandActionClassifier.ModelParameters.ModelAlgorithmType and conformance MLHandActionClassifier.ModelParameters.ModelAlgorithmType();
}

uint64_t lazy protocol witness table accessor for type MLHandActionClassifier.ModelParameters.ModelAlgorithmType and conformance MLHandActionClassifier.ModelParameters.ModelAlgorithmType()
{
  uint64_t result = lazy protocol witness table cache variable for type MLHandActionClassifier.ModelParameters.ModelAlgorithmType and conformance MLHandActionClassifier.ModelParameters.ModelAlgorithmType;
  if (!lazy protocol witness table cache variable for type MLHandActionClassifier.ModelParameters.ModelAlgorithmType and conformance MLHandActionClassifier.ModelParameters.ModelAlgorithmType)
  {
    uint64_t result = swift_getWitnessTable(&protocol conformance descriptor for MLHandActionClassifier.ModelParameters.ModelAlgorithmType, &type metadata for MLHandActionClassifier.ModelParameters.ModelAlgorithmType);
    lazy protocol witness table cache variable for type MLHandActionClassifier.ModelParameters.ModelAlgorithmType and conformance MLHandActionClassifier.ModelParameters.ModelAlgorithmType = result;
  }
  return result;
}

char *initializeBufferWithCopyOfBuffer for MLHandActionClassifier.ModelParameters(char *__dst, char *__src, int *a3)
{
  Swift::String v4 = __dst;
  int v5 = *(_DWORD *)(*((void *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v18 = *(void *)__src;
    *(void *)Swift::String v4 = *(void *)__src;
    Swift::String v4 = (char *)(v18 + ((v5 + 16) & ~v5));
    swift_retain();
  }
  else
  {
    uint64_t v7 = type metadata accessor for MLHandActionClassifier.ModelParameters.ValidationData(0);
    if (swift_getEnumCaseMultiPayload(__src, v7) == 1)
    {
      uint64_t v8 = type metadata accessor for MLHandActionClassifier.DataSource(0);
      switch(swift_getEnumCaseMultiPayload(__src, v8))
      {
        case 0u:
          uint64_t v45 = type metadata accessor for URL(0);
          uint64_t v51 = *(void (**)(char *, char *, uint64_t))(*(void *)(v45 - 8) + 16);
          v51(__dst, __src, v45);
          uint64_t v49 = v8;
          Swift::String v9 = (int *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (at: URL, annotationFile: URL, videoColumn: String, labelColumn: String, startTimeColumn: String?, endTimeColumn: String?));
          v51(&__dst[v9[12]], &__src[v9[12]], v45);
          uint64_t v10 = v9[16];
          *(void *)&__dst[v10] = *(void *)&__src[v10];
          uint64_t v11 = *(void *)&__src[v10 + 8];
          *(void *)&v4[v10 + 8] = v11;
          uint64_t v12 = v9[20];
          *(void *)&v4[v12] = *(void *)&__src[v12];
          uint64_t v52 = *(void *)&__src[v12 + 8];
          *(void *)&v4[v12 + 8] = v52;
          uint64_t v13 = v9[24];
          *(void *)&v4[v13] = *(void *)&__src[v13];
          uint64_t v46 = *(void *)&__src[v13 + 8];
          *(void *)&v4[v13 + 8] = v46;
          uint64_t v14 = v9[28];
          *(void *)&v4[v14] = *(void *)&__src[v14];
          uint64_t v15 = *(void *)&__src[v14 + 8];
          *(void *)&v4[v14 + 8] = v15;
          swift_bridgeObjectRetain(v11);
          swift_bridgeObjectRetain(v52);
          swift_bridgeObjectRetain(v46);
          swift_bridgeObjectRetain(v15);
          __dst = v4;
          uint64_t v16 = v49;
          uint64_t v17 = 0;
          goto LABEL_15;
        case 1u:
          uint64_t v19 = type metadata accessor for URL(0);
          (*(void (**)(char *, char *, uint64_t))(*(void *)(v19 - 8) + 16))(__dst, __src, v19);
          uint64_t v43 = 1;
          goto LABEL_9;
        case 2u:
          uint64_t v20 = type metadata accessor for URL(0);
          (*(void (**)(char *, char *, uint64_t))(*(void *)(v20 - 8) + 16))(__dst, __src, v20);
          uint64_t v43 = 2;
LABEL_9:
          uint64_t v17 = v43;
          uint64_t v16 = v8;
          goto LABEL_15;
        case 3u:
          uint64_t v50 = v8;
          uint64_t v21 = *(void *)__src;
          char v53 = __src[8];
          outlined copy of Result<_DataTable, Error>(*(void *)__src, v53);
          *(void *)__dst = v21;
          __dst[8] = v53;
          *((void *)__dst + 2) = *((void *)__src + 2);
          uint64_t v22 = *((void *)__src + 3);
          *((void *)v4 + 3) = v22;
          *((void *)v4 + 4) = *((void *)__src + 4);
          uint64_t v23 = *((void *)__src + 5);
          *((void *)v4 + 5) = v23;
          *((void *)v4 + 6) = *((void *)__src + 6);
          uint64_t v54 = *((void *)__src + 7);
          *((void *)v4 + 7) = v54;
          swift_bridgeObjectRetain(v22);
          swift_bridgeObjectRetain(v23);
          swift_bridgeObjectRetain(v54);
          uint64_t v44 = 3;
          goto LABEL_14;
        case 4u:
          uint64_t v50 = v8;
          uint64_t v24 = *(void *)__src;
          char v55 = __src[8];
          outlined copy of Result<_DataTable, Error>(*(void *)__src, v55);
          *(void *)__dst = v24;
          __dst[8] = v55;
          *((void *)__dst + 2) = *((void *)__src + 2);
          uint64_t v25 = *((void *)__src + 3);
          *((void *)v4 + 3) = v25;
          *((void *)v4 + 4) = *((void *)__src + 4);
          uint64_t v26 = *((void *)__src + 5);
          *((void *)v4 + 5) = v26;
          *((void *)v4 + 6) = *((void *)__src + 6);
          uint64_t v56 = *((void *)__src + 7);
          *((void *)v4 + 7) = v56;
          *((void *)v4 + 8) = *((void *)__src + 8);
          uint64_t v47 = *((void *)__src + 9);
          *((void *)v4 + 9) = v47;
          swift_bridgeObjectRetain(v25);
          swift_bridgeObjectRetain(v26);
          swift_bridgeObjectRetain(v56);
          swift_bridgeObjectRetain(v47);
          uint64_t v44 = 4;
          goto LABEL_14;
        case 5u:
          uint64_t v27 = type metadata accessor for DataFrame(0);
          (*(void (**)(char *, char *, uint64_t))(*(void *)(v27 - 8) + 16))(__dst, __src, v27);
          uint64_t v28 = (int *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (DataFrame, sessionIdColumn: String, labelColumn: String, featureColumn: String));
          uint64_t v29 = v28[12];
          *(void *)&__dst[v29] = *(void *)&__src[v29];
          uint64_t v30 = *(void *)&__src[v29 + 8];
          *(void *)&v4[v29 + 8] = v30;
          uint64_t v31 = v28[16];
          *(void *)&v4[v31] = *(void *)&__src[v31];
          uint64_t v57 = *(void *)&__src[v31 + 8];
          *(void *)&v4[v31 + 8] = v57;
          uint64_t v32 = v28[20];
          *(void *)&v4[v32] = *(void *)&__src[v32];
          uint64_t v50 = v8;
          uint64_t v33 = *(void *)&__src[v32 + 8];
          *(void *)&v4[v32 + 8] = v33;
          swift_bridgeObjectRetain(v30);
          swift_bridgeObjectRetain(v57);
          swift_bridgeObjectRetain(v33);
          uint64_t v44 = 5;
          goto LABEL_14;
        case 6u:
          uint64_t v34 = type metadata accessor for DataFrame(0);
          (*(void (**)(char *, char *, uint64_t))(*(void *)(v34 - 8) + 16))(__dst, __src, v34);
          uint64_t v35 = (int *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (DataFrame, videoColumn: String, labelColumn: String, startTimeColumn: String?, endTimeColumn: String?));
          uint64_t v36 = v35[12];
          *(void *)&__dst[v36] = *(void *)&__src[v36];
          uint64_t v37 = *(void *)&__src[v36 + 8];
          *(void *)&v4[v36 + 8] = v37;
          uint64_t v38 = v35[16];
          *(void *)&v4[v38] = *(void *)&__src[v38];
          uint64_t v58 = *(void *)&__src[v38 + 8];
          *(void *)&v4[v38 + 8] = v58;
          uint64_t v39 = v35[20];
          *(void *)&v4[v39] = *(void *)&__src[v39];
          uint64_t v48 = *(void *)&__src[v39 + 8];
          *(void *)&v4[v39 + 8] = v48;
          uint64_t v40 = v35[24];
          *(void *)&v4[v40] = *(void *)&__src[v40];
          uint64_t v50 = v8;
          uint64_t v41 = *(void *)&__src[v40 + 8];
          *(void *)&v4[v40 + 8] = v41;
          swift_bridgeObjectRetain(v37);
          swift_bridgeObjectRetain(v58);
          swift_bridgeObjectRetain(v48);
          swift_bridgeObjectRetain(v41);
          uint64_t v44 = 6;
LABEL_14:
          uint64_t v17 = v44;
          __dst = v4;
          uint64_t v16 = v50;
LABEL_15:
          swift_storeEnumTagMultiPayload(__dst, v16, v17);
          swift_storeEnumTagMultiPayload(v4, v7, 1);
          break;
        case 7u:
          JUMPOUT(0xA63E4);
      }
    }
    else
    {
      memcpy(__dst, __src, *(void *)(*(void *)(v7 - 8) + 64));
    }
    *(void *)&v4[a3[5]] = *(void *)&__src[a3[5]];
    *(void *)&v4[a3[6]] = *(void *)&__src[a3[6]];
    *(void *)&v4[a3[7]] = *(void *)&__src[a3[7]];
    *(void *)&v4[a3[8]] = *(void *)&__src[a3[8]];
    *(void *)&v4[a3[10]] = *(void *)&__src[a3[10]];
  }
  return v4;
}

uint64_t destroy for MLHandActionClassifier.ModelParameters(uint64_t a1)
{
  uint64_t v1 = type metadata accessor for MLHandActionClassifier.ModelParameters.ValidationData(0);
  uint64_t result = swift_getEnumCaseMultiPayload(a1, v1);
  if (result == 1)
  {
    uint64_t v3 = type metadata accessor for MLHandActionClassifier.DataSource(0);
    uint64_t result = swift_getEnumCaseMultiPayload(a1, v3);
    switch((int)result)
    {
      case 0:
        uint64_t v5 = type metadata accessor for URL(0);
        char v6 = *(void (**)(uint64_t, uint64_t))(*(void *)(v5 - 8) + 8);
        v6(a1, v5);
        uint64_t v7 = (int *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (at: URL, annotationFile: URL, videoColumn: String, labelColumn: String, startTimeColumn: String?, endTimeColumn: String?));
        v6(a1 + v7[12], v5);
        swift_bridgeObjectRelease(*(void *)(a1 + v7[16] + 8));
        swift_bridgeObjectRelease(*(void *)(a1 + v7[20] + 8));
        swift_bridgeObjectRelease(*(void *)(a1 + v7[24] + 8));
        uint64_t v8 = v7[28];
        goto LABEL_10;
      case 1:
      case 2:
        uint64_t v4 = type metadata accessor for URL(0);
        return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v4 - 8) + 8))(a1, v4);
      case 3:
        outlined consume of Result<_DataTable, Error>(*(void *)a1, *(_DWORD *)(a1 + 8));
        swift_bridgeObjectRelease(*(void *)(a1 + 24));
        swift_bridgeObjectRelease(*(void *)(a1 + 40));
        return swift_bridgeObjectRelease(*(void *)(a1 + 56));
      case 4:
        outlined consume of Result<_DataTable, Error>(*(void *)a1, *(_DWORD *)(a1 + 8));
        swift_bridgeObjectRelease(*(void *)(a1 + 24));
        swift_bridgeObjectRelease(*(void *)(a1 + 40));
        swift_bridgeObjectRelease(*(void *)(a1 + 56));
        return swift_bridgeObjectRelease(*(void *)(a1 + 72));
      case 5:
        uint64_t v9 = type metadata accessor for DataFrame(0);
        (*(void (**)(uint64_t, uint64_t))(*(void *)(v9 - 8) + 8))(a1, v9);
        uint64_t v10 = (int *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (DataFrame, sessionIdColumn: String, labelColumn: String, featureColumn: String));
        swift_bridgeObjectRelease(*(void *)(a1 + v10[12] + 8));
        swift_bridgeObjectRelease(*(void *)(a1 + v10[16] + 8));
        uint64_t v8 = v10[20];
        goto LABEL_10;
      case 6:
        uint64_t v11 = type metadata accessor for DataFrame(0);
        (*(void (**)(uint64_t, uint64_t))(*(void *)(v11 - 8) + 8))(a1, v11);
        uint64_t v12 = (int *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (DataFrame, videoColumn: String, labelColumn: String, startTimeColumn: String?, endTimeColumn: String?));
        swift_bridgeObjectRelease(*(void *)(a1 + v12[12] + 8));
        swift_bridgeObjectRelease(*(void *)(a1 + v12[16] + 8));
        swift_bridgeObjectRelease(*(void *)(a1 + v12[20] + 8));
        uint64_t v8 = v12[24];
LABEL_10:
        uint64_t result = swift_bridgeObjectRelease(*(void *)(a1 + v8 + 8));
        break;
      default:
        return result;
    }
  }
  return result;
}

char *initializeWithCopy for MLHandActionClassifier.ModelParameters(char *__dst, char *__src, int *a3)
{
  uint64_t v5 = __dst;
  uint64_t v6 = type metadata accessor for MLHandActionClassifier.ModelParameters.ValidationData(0);
  if (swift_getEnumCaseMultiPayload(__src, v6) == 1)
  {
    uint64_t v7 = type metadata accessor for MLHandActionClassifier.DataSource(0);
    switch(swift_getEnumCaseMultiPayload(__src, v7))
    {
      case 0u:
        uint64_t v43 = type metadata accessor for URL(0);
        uint64_t v49 = *(void (**)(char *, char *, uint64_t))(*(void *)(v43 - 8) + 16);
        v49(__dst, __src, v43);
        uint64_t v47 = v7;
        uint64_t v8 = (int *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (at: URL, annotationFile: URL, videoColumn: String, labelColumn: String, startTimeColumn: String?, endTimeColumn: String?));
        v49(&__dst[v8[12]], &__src[v8[12]], v43);
        uint64_t v9 = v8[16];
        *(void *)&__dst[v9] = *(void *)&__src[v9];
        uint64_t v10 = *(void *)&__src[v9 + 8];
        *(void *)&v5[v9 + 8] = v10;
        uint64_t v11 = v8[20];
        *(void *)&v5[v11] = *(void *)&__src[v11];
        uint64_t v50 = *(void *)&__src[v11 + 8];
        *(void *)&v5[v11 + 8] = v50;
        uint64_t v12 = v8[24];
        *(void *)&v5[v12] = *(void *)&__src[v12];
        uint64_t v44 = *(void *)&__src[v12 + 8];
        *(void *)&v5[v12 + 8] = v44;
        uint64_t v13 = v8[28];
        *(void *)&v5[v13] = *(void *)&__src[v13];
        uint64_t v14 = *(void *)&__src[v13 + 8];
        *(void *)&v5[v13 + 8] = v14;
        swift_bridgeObjectRetain(v10);
        swift_bridgeObjectRetain(v50);
        swift_bridgeObjectRetain(v44);
        swift_bridgeObjectRetain(v14);
        __dst = v5;
        uint64_t v15 = v47;
        uint64_t v16 = 0;
        goto LABEL_13;
      case 1u:
        uint64_t v17 = type metadata accessor for URL(0);
        (*(void (**)(char *, char *, uint64_t))(*(void *)(v17 - 8) + 16))(__dst, __src, v17);
        uint64_t v41 = 1;
        goto LABEL_7;
      case 2u:
        uint64_t v18 = type metadata accessor for URL(0);
        (*(void (**)(char *, char *, uint64_t))(*(void *)(v18 - 8) + 16))(__dst, __src, v18);
        uint64_t v41 = 2;
LABEL_7:
        uint64_t v16 = v41;
        uint64_t v15 = v7;
        goto LABEL_13;
      case 3u:
        uint64_t v48 = v7;
        uint64_t v19 = *(void *)__src;
        char v51 = __src[8];
        outlined copy of Result<_DataTable, Error>(*(void *)__src, v51);
        *(void *)__dst = v19;
        __dst[8] = v51;
        *((void *)__dst + 2) = *((void *)__src + 2);
        uint64_t v20 = *((void *)__src + 3);
        *((void *)v5 + 3) = v20;
        *((void *)v5 + 4) = *((void *)__src + 4);
        uint64_t v21 = *((void *)__src + 5);
        *((void *)v5 + 5) = v21;
        *((void *)v5 + 6) = *((void *)__src + 6);
        uint64_t v52 = *((void *)__src + 7);
        *((void *)v5 + 7) = v52;
        swift_bridgeObjectRetain(v20);
        swift_bridgeObjectRetain(v21);
        swift_bridgeObjectRetain(v52);
        uint64_t v42 = 3;
        goto LABEL_12;
      case 4u:
        uint64_t v48 = v7;
        uint64_t v22 = *(void *)__src;
        char v53 = __src[8];
        outlined copy of Result<_DataTable, Error>(*(void *)__src, v53);
        *(void *)__dst = v22;
        __dst[8] = v53;
        *((void *)__dst + 2) = *((void *)__src + 2);
        uint64_t v23 = *((void *)__src + 3);
        *((void *)v5 + 3) = v23;
        *((void *)v5 + 4) = *((void *)__src + 4);
        uint64_t v24 = *((void *)__src + 5);
        *((void *)v5 + 5) = v24;
        *((void *)v5 + 6) = *((void *)__src + 6);
        uint64_t v54 = *((void *)__src + 7);
        *((void *)v5 + 7) = v54;
        *((void *)v5 + 8) = *((void *)__src + 8);
        uint64_t v45 = *((void *)__src + 9);
        *((void *)v5 + 9) = v45;
        swift_bridgeObjectRetain(v23);
        swift_bridgeObjectRetain(v24);
        swift_bridgeObjectRetain(v54);
        swift_bridgeObjectRetain(v45);
        uint64_t v42 = 4;
        goto LABEL_12;
      case 5u:
        uint64_t v25 = type metadata accessor for DataFrame(0);
        (*(void (**)(char *, char *, uint64_t))(*(void *)(v25 - 8) + 16))(__dst, __src, v25);
        uint64_t v26 = (int *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (DataFrame, sessionIdColumn: String, labelColumn: String, featureColumn: String));
        uint64_t v27 = v26[12];
        *(void *)&__dst[v27] = *(void *)&__src[v27];
        uint64_t v28 = *(void *)&__src[v27 + 8];
        *(void *)&v5[v27 + 8] = v28;
        uint64_t v29 = v26[16];
        *(void *)&v5[v29] = *(void *)&__src[v29];
        uint64_t v55 = *(void *)&__src[v29 + 8];
        *(void *)&v5[v29 + 8] = v55;
        uint64_t v30 = v26[20];
        *(void *)&v5[v30] = *(void *)&__src[v30];
        uint64_t v48 = v7;
        uint64_t v31 = *(void *)&__src[v30 + 8];
        *(void *)&v5[v30 + 8] = v31;
        swift_bridgeObjectRetain(v28);
        swift_bridgeObjectRetain(v55);
        swift_bridgeObjectRetain(v31);
        uint64_t v42 = 5;
        goto LABEL_12;
      case 6u:
        uint64_t v32 = type metadata accessor for DataFrame(0);
        (*(void (**)(char *, char *, uint64_t))(*(void *)(v32 - 8) + 16))(__dst, __src, v32);
        uint64_t v33 = (int *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (DataFrame, videoColumn: String, labelColumn: String, startTimeColumn: String?, endTimeColumn: String?));
        uint64_t v34 = v33[12];
        *(void *)&__dst[v34] = *(void *)&__src[v34];
        uint64_t v35 = *(void *)&__src[v34 + 8];
        *(void *)&v5[v34 + 8] = v35;
        uint64_t v36 = v33[16];
        *(void *)&v5[v36] = *(void *)&__src[v36];
        uint64_t v56 = *(void *)&__src[v36 + 8];
        *(void *)&v5[v36 + 8] = v56;
        uint64_t v37 = v33[20];
        *(void *)&v5[v37] = *(void *)&__src[v37];
        uint64_t v46 = *(void *)&__src[v37 + 8];
        *(void *)&v5[v37 + 8] = v46;
        uint64_t v38 = v33[24];
        *(void *)&v5[v38] = *(void *)&__src[v38];
        uint64_t v48 = v7;
        uint64_t v39 = *(void *)&__src[v38 + 8];
        *(void *)&v5[v38 + 8] = v39;
        swift_bridgeObjectRetain(v35);
        swift_bridgeObjectRetain(v56);
        swift_bridgeObjectRetain(v46);
        swift_bridgeObjectRetain(v39);
        uint64_t v42 = 6;
LABEL_12:
        uint64_t v16 = v42;
        __dst = v5;
        uint64_t v15 = v48;
LABEL_13:
        swift_storeEnumTagMultiPayload(__dst, v15, v16);
        swift_storeEnumTagMultiPayload(v5, v6, 1);
        break;
    }
  }
  else
  {
    memcpy(__dst, __src, *(void *)(*(void *)(v6 - 8) + 64));
  }
  *(void *)&v5[a3[5]] = *(void *)&__src[a3[5]];
  *(void *)&v5[a3[6]] = *(void *)&__src[a3[6]];
  *(void *)&v5[a3[7]] = *(void *)&__src[a3[7]];
  *(void *)&v5[a3[8]] = *(void *)&__src[a3[8]];
  *(void *)&v5[a3[10]] = *(void *)&__src[a3[10]];
  return v5;
}

char *assignWithCopy for MLHandActionClassifier.ModelParameters(char *__dst, char *__src, int *a3)
{
  if (__dst != __src)
  {
    outlined destroy of MLHandActionClassifier.ModelParameters.ValidationData((uint64_t)__dst, type metadata accessor for MLHandActionClassifier.ModelParameters.ValidationData);
    uint64_t v5 = type metadata accessor for MLHandActionClassifier.ModelParameters.ValidationData(0);
    if (swift_getEnumCaseMultiPayload(__src, v5) == 1)
    {
      uint64_t v6 = type metadata accessor for MLHandActionClassifier.DataSource(0);
      unsigned int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload(__src, v6);
      switch(EnumCaseMultiPayload)
      {
        case 0u:
          uint64_t v36 = type metadata accessor for URL(0);
          uint64_t v42 = *(void (**)(char *, char *, uint64_t))(*(void *)(v36 - 8) + 16);
          v42(__dst, __src, v36);
          uint64_t v39 = v6;
          uint64_t v8 = (int *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (at: URL, annotationFile: URL, videoColumn: String, labelColumn: String, startTimeColumn: String?, endTimeColumn: String?));
          v42(&__dst[v8[12]], &__src[v8[12]], v36);
          uint64_t v9 = v8[16];
          *(void *)&__dst[v9] = *(void *)&__src[v9];
          uint64_t v10 = *(void *)&__src[v9 + 8];
          *(void *)&__dst[v9 + 8] = v10;
          uint64_t v11 = v8[20];
          *(void *)&__dst[v11] = *(void *)&__src[v11];
          uint64_t v43 = *(void *)&__src[v11 + 8];
          *(void *)&__dst[v11 + 8] = v43;
          uint64_t v12 = v8[24];
          *(void *)&__dst[v12] = *(void *)&__src[v12];
          uint64_t v37 = *(void *)&__src[v12 + 8];
          *(void *)&__dst[v12 + 8] = v37;
          uint64_t v13 = v8[28];
          *(void *)&__dst[v13] = *(void *)&__src[v13];
          goto LABEL_11;
        case 1u:
        case 2u:
          uint64_t v7 = type metadata accessor for URL(0);
          (*(void (**)(char *, char *, uint64_t))(*(void *)(v7 - 8) + 16))(__dst, __src, v7);
          goto LABEL_14;
        case 3u:
          uint64_t v40 = v6;
          uint64_t v14 = *(void *)__src;
          char v44 = __src[8];
          outlined copy of Result<_DataTable, Error>(*(void *)__src, v44);
          *(void *)__dst = v14;
          __dst[8] = v44;
          *((void *)__dst + 2) = *((void *)__src + 2);
          uint64_t v15 = *((void *)__src + 3);
          *((void *)__dst + 3) = v15;
          *((void *)__dst + 4) = *((void *)__src + 4);
          uint64_t v16 = *((void *)__src + 5);
          *((void *)__dst + 5) = v16;
          *((void *)__dst + 6) = *((void *)__src + 6);
          uint64_t v45 = *((void *)__src + 7);
          *((void *)__dst + 7) = v45;
          swift_bridgeObjectRetain(v15);
          LOBYTE(v15) = v16;
          uint64_t v6 = v40;
          swift_bridgeObjectRetain(v15);
          char v17 = v45;
          goto LABEL_13;
        case 4u:
          uint64_t v41 = v6;
          uint64_t v18 = *(void *)__src;
          char v46 = __src[8];
          outlined copy of Result<_DataTable, Error>(*(void *)__src, v46);
          *(void *)__dst = v18;
          __dst[8] = v46;
          *((void *)__dst + 2) = *((void *)__src + 2);
          uint64_t v19 = *((void *)__src + 3);
          *((void *)__dst + 3) = v19;
          *((void *)__dst + 4) = *((void *)__src + 4);
          uint64_t v20 = *((void *)__src + 5);
          *((void *)__dst + 5) = v20;
          *((void *)__dst + 6) = *((void *)__src + 6);
          uint64_t v47 = *((void *)__src + 7);
          *((void *)__dst + 7) = v47;
          *((void *)__dst + 8) = *((void *)__src + 8);
          uint64_t v38 = *((void *)__src + 9);
          *((void *)__dst + 9) = v38;
          swift_bridgeObjectRetain(v19);
          LOBYTE(v19) = v20;
          uint64_t v6 = v41;
          swift_bridgeObjectRetain(v19);
          swift_bridgeObjectRetain(v47);
          char v17 = v38;
          goto LABEL_13;
        case 5u:
          uint64_t v21 = type metadata accessor for DataFrame(0);
          (*(void (**)(char *, char *, uint64_t))(*(void *)(v21 - 8) + 16))(__dst, __src, v21);
          uint64_t v22 = (int *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (DataFrame, sessionIdColumn: String, labelColumn: String, featureColumn: String));
          uint64_t v23 = v22[12];
          *(void *)&__dst[v23] = *(void *)&__src[v23];
          uint64_t v24 = *(void *)&__src[v23 + 8];
          *(void *)&__dst[v23 + 8] = v24;
          uint64_t v25 = v22[16];
          *(void *)&__dst[v25] = *(void *)&__src[v25];
          uint64_t v48 = *(void *)&__src[v25 + 8];
          *(void *)&__dst[v25 + 8] = v48;
          uint64_t v26 = v22[20];
          *(void *)&__dst[v26] = *(void *)&__src[v26];
          uint64_t v39 = v6;
          uint64_t v27 = *(void *)&__src[v26 + 8];
          *(void *)&__dst[v26 + 8] = v27;
          swift_bridgeObjectRetain(v24);
          char v28 = v48;
          goto LABEL_12;
        case 6u:
          uint64_t v29 = type metadata accessor for DataFrame(0);
          (*(void (**)(char *, char *, uint64_t))(*(void *)(v29 - 8) + 16))(__dst, __src, v29);
          uint64_t v30 = (int *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (DataFrame, videoColumn: String, labelColumn: String, startTimeColumn: String?, endTimeColumn: String?));
          uint64_t v31 = v30[12];
          *(void *)&__dst[v31] = *(void *)&__src[v31];
          uint64_t v10 = *(void *)&__src[v31 + 8];
          *(void *)&__dst[v31 + 8] = v10;
          uint64_t v32 = v30[16];
          *(void *)&__dst[v32] = *(void *)&__src[v32];
          uint64_t v43 = *(void *)&__src[v32 + 8];
          *(void *)&__dst[v32 + 8] = v43;
          uint64_t v33 = v30[20];
          *(void *)&__dst[v33] = *(void *)&__src[v33];
          uint64_t v37 = *(void *)&__src[v33 + 8];
          *(void *)&__dst[v33 + 8] = v37;
          uint64_t v13 = v30[24];
          *(void *)&__dst[v13] = *(void *)&__src[v13];
          uint64_t v39 = v6;
LABEL_11:
          uint64_t v27 = *(void *)&__src[v13 + 8];
          *(void *)&__dst[v13 + 8] = v27;
          swift_bridgeObjectRetain(v10);
          swift_bridgeObjectRetain(v43);
          char v28 = v37;
LABEL_12:
          swift_bridgeObjectRetain(v28);
          char v17 = v27;
          uint64_t v6 = v39;
LABEL_13:
          swift_bridgeObjectRetain(v17);
LABEL_14:
          swift_storeEnumTagMultiPayload(__dst, v6, EnumCaseMultiPayload);
          swift_storeEnumTagMultiPayload(__dst, v5, 1);
          break;
      }
    }
    else
    {
      memcpy(__dst, __src, *(void *)(*(void *)(v5 - 8) + 64));
    }
  }
  *(void *)&__dst[a3[5]] = *(void *)&__src[a3[5]];
  *(void *)&__dst[a3[6]] = *(void *)&__src[a3[6]];
  *(void *)&__dst[a3[7]] = *(void *)&__src[a3[7]];
  *(void *)&__dst[a3[8]] = *(void *)&__src[a3[8]];
  *(void *)&__dst[a3[10]] = *(void *)&__src[a3[10]];
  return __dst;
}

char *initializeWithTake for MLHandActionClassifier.ModelParameters(char *__dst, char *__src, int *a3)
{
  uint64_t v5 = type metadata accessor for MLHandActionClassifier.ModelParameters.ValidationData(0);
  if (swift_getEnumCaseMultiPayload(__src, v5) == 1)
  {
    uint64_t v6 = type metadata accessor for MLHandActionClassifier.DataSource(0);
    switch(swift_getEnumCaseMultiPayload(__src, v6))
    {
      case 0u:
        uint64_t v19 = type metadata accessor for URL(0);
        uint64_t v20 = *(void (**)(char *, char *, uint64_t))(*(void *)(v19 - 8) + 32);
        v20(__dst, __src, v19);
        uint64_t v18 = v6;
        uint64_t v7 = (int *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (at: URL, annotationFile: URL, videoColumn: String, labelColumn: String, startTimeColumn: String?, endTimeColumn: String?));
        v20(&__dst[v7[12]], &__src[v7[12]], v19);
        *(_OWORD *)&__dst[v7[16]] = *(_OWORD *)&__src[v7[16]];
        *(_OWORD *)&__dst[v7[20]] = *(_OWORD *)&__src[v7[20]];
        *(_OWORD *)&__dst[v7[24]] = *(_OWORD *)&__src[v7[24]];
        *(_OWORD *)&__dst[v7[28]] = *(_OWORD *)&__src[v7[28]];
        uint64_t v8 = v18;
        uint64_t v9 = 0;
        goto LABEL_11;
      case 1u:
        uint64_t v10 = type metadata accessor for URL(0);
        (*(void (**)(char *, char *, uint64_t))(*(void *)(v10 - 8) + 32))(__dst, __src, v10);
        uint64_t v17 = 1;
        goto LABEL_10;
      case 2u:
        uint64_t v11 = type metadata accessor for URL(0);
        (*(void (**)(char *, char *, uint64_t))(*(void *)(v11 - 8) + 32))(__dst, __src, v11);
        uint64_t v17 = 2;
        goto LABEL_10;
      case 5u:
        uint64_t v12 = type metadata accessor for DataFrame(0);
        (*(void (**)(char *, char *, uint64_t))(*(void *)(v12 - 8) + 32))(__dst, __src, v12);
        uint64_t v13 = (int *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (DataFrame, sessionIdColumn: String, labelColumn: String, featureColumn: String));
        *(_OWORD *)&__dst[v13[12]] = *(_OWORD *)&__src[v13[12]];
        *(_OWORD *)&__dst[v13[16]] = *(_OWORD *)&__src[v13[16]];
        *(_OWORD *)&__dst[v13[20]] = *(_OWORD *)&__src[v13[20]];
        uint64_t v17 = 5;
        goto LABEL_10;
      case 6u:
        uint64_t v14 = type metadata accessor for DataFrame(0);
        (*(void (**)(char *, char *, uint64_t))(*(void *)(v14 - 8) + 32))(__dst, __src, v14);
        uint64_t v15 = (int *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (DataFrame, videoColumn: String, labelColumn: String, startTimeColumn: String?, endTimeColumn: String?));
        *(_OWORD *)&__dst[v15[12]] = *(_OWORD *)&__src[v15[12]];
        *(_OWORD *)&__dst[v15[16]] = *(_OWORD *)&__src[v15[16]];
        *(_OWORD *)&__dst[v15[20]] = *(_OWORD *)&__src[v15[20]];
        *(_OWORD *)&__dst[v15[24]] = *(_OWORD *)&__src[v15[24]];
        uint64_t v17 = 6;
LABEL_10:
        uint64_t v9 = v17;
        uint64_t v8 = v6;
LABEL_11:
        swift_storeEnumTagMultiPayload(__dst, v8, v9);
        break;
      default:
        memcpy(__dst, __src, *(void *)(*(void *)(v6 - 8) + 64));
        break;
    }
    swift_storeEnumTagMultiPayload(__dst, v5, 1);
  }
  else
  {
    memcpy(__dst, __src, *(void *)(*(void *)(v5 - 8) + 64));
  }
  *(void *)&__dst[a3[5]] = *(void *)&__src[a3[5]];
  *(void *)&__dst[a3[6]] = *(void *)&__src[a3[6]];
  *(void *)&__dst[a3[7]] = *(void *)&__src[a3[7]];
  *(void *)&__dst[a3[8]] = *(void *)&__src[a3[8]];
  *(void *)&__dst[a3[10]] = *(void *)&__src[a3[10]];
  return __dst;
}

char *assignWithTake for MLHandActionClassifier.ModelParameters(char *__dst, char *__src, int *a3)
{
  if (__dst != __src)
  {
    outlined destroy of MLHandActionClassifier.ModelParameters.ValidationData((uint64_t)__dst, type metadata accessor for MLHandActionClassifier.ModelParameters.ValidationData);
    uint64_t v5 = type metadata accessor for MLHandActionClassifier.ModelParameters.ValidationData(0);
    if (swift_getEnumCaseMultiPayload(__src, v5) == 1)
    {
      uint64_t v6 = type metadata accessor for MLHandActionClassifier.DataSource(0);
      switch(swift_getEnumCaseMultiPayload(__src, v6))
      {
        case 0u:
          uint64_t v19 = type metadata accessor for URL(0);
          uint64_t v20 = *(void (**)(char *, char *, uint64_t))(*(void *)(v19 - 8) + 32);
          v20(__dst, __src, v19);
          uint64_t v18 = v6;
          uint64_t v7 = (int *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (at: URL, annotationFile: URL, videoColumn: String, labelColumn: String, startTimeColumn: String?, endTimeColumn: String?));
          v20(&__dst[v7[12]], &__src[v7[12]], v19);
          *(_OWORD *)&__dst[v7[16]] = *(_OWORD *)&__src[v7[16]];
          *(_OWORD *)&__dst[v7[20]] = *(_OWORD *)&__src[v7[20]];
          *(_OWORD *)&__dst[v7[24]] = *(_OWORD *)&__src[v7[24]];
          *(_OWORD *)&__dst[v7[28]] = *(_OWORD *)&__src[v7[28]];
          uint64_t v8 = v18;
          uint64_t v9 = 0;
          goto LABEL_12;
        case 1u:
          uint64_t v10 = type metadata accessor for URL(0);
          (*(void (**)(char *, char *, uint64_t))(*(void *)(v10 - 8) + 32))(__dst, __src, v10);
          uint64_t v17 = 1;
          goto LABEL_11;
        case 2u:
          uint64_t v11 = type metadata accessor for URL(0);
          (*(void (**)(char *, char *, uint64_t))(*(void *)(v11 - 8) + 32))(__dst, __src, v11);
          uint64_t v17 = 2;
          goto LABEL_11;
        case 5u:
          uint64_t v12 = type metadata accessor for DataFrame(0);
          (*(void (**)(char *, char *, uint64_t))(*(void *)(v12 - 8) + 32))(__dst, __src, v12);
          uint64_t v13 = (int *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (DataFrame, sessionIdColumn: String, labelColumn: String, featureColumn: String));
          *(_OWORD *)&__dst[v13[12]] = *(_OWORD *)&__src[v13[12]];
          *(_OWORD *)&__dst[v13[16]] = *(_OWORD *)&__src[v13[16]];
          *(_OWORD *)&__dst[v13[20]] = *(_OWORD *)&__src[v13[20]];
          uint64_t v17 = 5;
          goto LABEL_11;
        case 6u:
          uint64_t v14 = type metadata accessor for DataFrame(0);
          (*(void (**)(char *, char *, uint64_t))(*(void *)(v14 - 8) + 32))(__dst, __src, v14);
          uint64_t v15 = (int *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (DataFrame, videoColumn: String, labelColumn: String, startTimeColumn: String?, endTimeColumn: String?));
          *(_OWORD *)&__dst[v15[12]] = *(_OWORD *)&__src[v15[12]];
          *(_OWORD *)&__dst[v15[16]] = *(_OWORD *)&__src[v15[16]];
          *(_OWORD *)&__dst[v15[20]] = *(_OWORD *)&__src[v15[20]];
          *(_OWORD *)&__dst[v15[24]] = *(_OWORD *)&__src[v15[24]];
          uint64_t v17 = 6;
LABEL_11:
          uint64_t v9 = v17;
          uint64_t v8 = v6;
LABEL_12:
          swift_storeEnumTagMultiPayload(__dst, v8, v9);
          break;
        default:
          memcpy(__dst, __src, *(void *)(*(void *)(v6 - 8) + 64));
          break;
      }
      swift_storeEnumTagMultiPayload(__dst, v5, 1);
    }
    else
    {
      memcpy(__dst, __src, *(void *)(*(void *)(v5 - 8) + 64));
    }
  }
  *(void *)&__dst[a3[5]] = *(void *)&__src[a3[5]];
  *(void *)&__dst[a3[6]] = *(void *)&__src[a3[6]];
  *(void *)&__dst[a3[7]] = *(void *)&__src[a3[7]];
  *(void *)&__dst[a3[8]] = *(void *)&__src[a3[8]];
  *(void *)&__dst[a3[10]] = *(void *)&__src[a3[10]];
  return __dst;
}

uint64_t getEnumTagSinglePayload for MLHandActionClassifier.ModelParameters(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_A7391);
}

uint64_t sub_A7391(uint64_t a1, unsigned int a2)
{
  uint64_t v2 = type metadata accessor for MLHandActionClassifier.ModelParameters.ValidationData(0);
  return __swift_getEnumTagSinglePayload(a1, a2, v2);
}

uint64_t storeEnumTagSinglePayload for MLHandActionClassifier.ModelParameters(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_A73D5);
}

uint64_t sub_A73D5(uint64_t a1, unsigned int a2)
{
  uint64_t v2 = type metadata accessor for MLHandActionClassifier.ModelParameters.ValidationData(0);
  return __swift_storeEnumTagSinglePayload(a1, a2, a2, v2);
}

uint64_t type metadata completion function for MLHandActionClassifier.ModelParameters(uint64_t a1)
{
  uint64_t result = type metadata accessor for MLHandActionClassifier.ModelParameters.ValidationData(319);
  if (v2 <= 0x3F)
  {
    v3[0] = *(void *)(result - 8) + 64;
    v3[1] = (char *)&value witness table for Builtin.Int64 + 64;
    v3[2] = (char *)&value witness table for Builtin.Int64 + 64;
    v3[3] = (char *)&value witness table for Builtin.Int64 + 64;
    void v3[4] = (char *)&value witness table for Builtin.Int64 + 64;
    void v3[5] = (char *)&value witness table for () + 64;
    v3[6] = (char *)&value witness table for Builtin.Int64 + 64;
    swift_initStructMetadata(a1, 256, 7, v3, a1 + 16);
    return 0;
  }
  return result;
}

uint64_t getEnumTagSinglePayload for MLHandActionClassifier.ModelParameters.ModelAlgorithmType(unsigned int *a1, int a2)
{
  if (!a2) {
    return 0;
  }
  unsigned int v2 = a2 + 1;
  int v3 = 1;
  if (v2 >= 0x100) {
    int v3 = 2 * (v2 >= 0x10000) + 2;
  }
  if (v3 == 4) {
    return *a1;
  }
  if (v3 == 2) {
    return *(unsigned __int16 *)a1;
  }
  return *(unsigned __int8 *)a1;
}

uint64_t storeEnumTagSinglePayload for MLHandActionClassifier.ModelParameters.ModelAlgorithmType(unsigned char *a1, int a2, int a3)
{
  if (a3)
  {
    unsigned int v3 = a3 + 1;
    LODWORD(result) = 1;
    if (v3 >= 0x100) {
      LODWORD(result) = 2 * (v3 >= 0x10000) + 2;
    }
  }
  else
  {
    LODWORD(result) = 0;
  }
  uint64_t result = result;
  if (a2)
  {
    switch((int)result)
    {
      case 0:
        return result;
      case 1:
        *a1 = a2;
        return result;
      case 2:
        *(_WORD *)a1 = a2;
        return result;
      case 3:
        goto LABEL_16;
      case 4:
        *(_DWORD *)a1 = a2;
        return result;
    }
  }
  switch((int)result)
  {
    case 0:
      return result;
    case 1:
      *a1 = 0;
      break;
    case 2:
      *(_WORD *)a1 = 0;
      break;
    case 3:
LABEL_16:
      BUG();
    case 4:
      *(_DWORD *)a1 = 0;
      break;
    case 5:
      JUMPOUT(0xA7560);
  }
  return result;
}

ValueMetadata *type metadata accessor for MLHandActionClassifier.ModelParameters.ModelAlgorithmType()
{
  return &type metadata for MLHandActionClassifier.ModelParameters.ModelAlgorithmType;
}

void *initializeBufferWithCopyOfBuffer for MLHandActionClassifier.ModelParameters.ValidationData(char *__dst, char *__src, uint64_t a3)
{
  unsigned int v3 = __dst;
  uint64_t v4 = *(void *)(a3 - 8);
  int v5 = *(_DWORD *)(v4 + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v20 = *(void *)__src;
    void *v3 = *(void *)__src;
    unsigned int v3 = (void *)(v20 + ((v5 + 16) & ~v5));
    swift_retain();
  }
  else if (swift_getEnumCaseMultiPayload(__src, a3) == 1)
  {
    uint64_t v7 = type metadata accessor for MLHandActionClassifier.DataSource(0);
    switch(swift_getEnumCaseMultiPayload(__src, v7))
    {
      case 0u:
        uint64_t v57 = v7;
        uint64_t v8 = type metadata accessor for URL(0);
        uint64_t v55 = *(void (**)(char *, char *, uint64_t))(*(void *)(v8 - 8) + 16);
        v55(__dst, __src, v8);
        uint64_t v9 = (int *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (at: URL, annotationFile: URL, videoColumn: String, labelColumn: String, startTimeColumn: String?, endTimeColumn: String?));
        v55(&__dst[v9[12]], &__src[v9[12]], v8);
        uint64_t v10 = v9[16];
        *(void *)&__dst[v10] = *(void *)&__src[v10];
        uint64_t v11 = *(void *)&__src[v10 + 8];
        *(void *)((char *)v3 + v10 + 8) = v11;
        uint64_t v12 = v9[20];
        *(void *)((char *)v3 + v12) = *(void *)&__src[v12];
        uint64_t v56 = *(void *)&__src[v12 + 8];
        *(void *)((char *)v3 + v12 + 8) = v56;
        uint64_t v13 = v9[24];
        *(void *)((char *)v3 + v13) = *(void *)&__src[v13];
        uint64_t v14 = *(void *)&__src[v13 + 8];
        *(void *)((char *)v3 + v13 + 8) = v14;
        uint64_t v15 = v9[28];
        *(void *)((char *)v3 + v15) = *(void *)&__src[v15];
        uint64_t v16 = *(void *)&__src[v15 + 8];
        *(void *)((char *)v3 + v15 + 8) = v16;
        swift_bridgeObjectRetain(v11);
        swift_bridgeObjectRetain(v56);
        swift_bridgeObjectRetain(v14);
        swift_bridgeObjectRetain(v16);
        uint64_t v17 = v3;
        uint64_t v18 = v57;
        uint64_t v19 = 0;
        break;
      case 1u:
        uint64_t v21 = type metadata accessor for URL(0);
        (*(void (**)(char *, char *, uint64_t))(*(void *)(v21 - 8) + 16))(__dst, __src, v21);
        uint64_t v53 = 1;
        goto LABEL_12;
      case 2u:
        uint64_t v22 = type metadata accessor for URL(0);
        (*(void (**)(char *, char *, uint64_t))(*(void *)(v22 - 8) + 16))(__dst, __src, v22);
        uint64_t v53 = 2;
        goto LABEL_12;
      case 3u:
        uint64_t v23 = *(void *)__src;
        uint64_t v58 = v7;
        char v24 = __src[8];
        outlined copy of Result<_DataTable, Error>(*(void *)__src, v24);
        *(void *)__dst = v23;
        __dst[8] = v24;
        *((void *)__dst + 2) = *((void *)__src + 2);
        uint64_t v25 = *((void *)__src + 3);
        v3[3] = v25;
        void v3[4] = *((void *)__src + 4);
        uint64_t v26 = *((void *)__src + 5);
        void v3[5] = v26;
        v3[6] = *((void *)__src + 6);
        uint64_t v27 = *((void *)__src + 7);
        v3[7] = v27;
        swift_bridgeObjectRetain(v25);
        swift_bridgeObjectRetain(v26);
        swift_bridgeObjectRetain(v27);
        uint64_t v54 = 3;
        goto LABEL_14;
      case 4u:
        uint64_t v28 = *(void *)__src;
        uint64_t v58 = v7;
        char v29 = __src[8];
        outlined copy of Result<_DataTable, Error>(*(void *)__src, v29);
        *(void *)__dst = v28;
        __dst[8] = v29;
        *((void *)__dst + 2) = *((void *)__src + 2);
        uint64_t v30 = *((void *)__src + 3);
        v3[3] = v30;
        void v3[4] = *((void *)__src + 4);
        uint64_t v31 = *((void *)__src + 5);
        void v3[5] = v31;
        v3[6] = *((void *)__src + 6);
        uint64_t v32 = *((void *)__src + 7);
        v3[7] = v32;
        void v3[8] = *((void *)__src + 8);
        uint64_t v33 = *((void *)__src + 9);
        v3[9] = v33;
        swift_bridgeObjectRetain(v30);
        swift_bridgeObjectRetain(v31);
        swift_bridgeObjectRetain(v32);
        swift_bridgeObjectRetain(v33);
        uint64_t v54 = 4;
        goto LABEL_14;
      case 5u:
        uint64_t v34 = type metadata accessor for DataFrame(0);
        (*(void (**)(char *, char *, uint64_t))(*(void *)(v34 - 8) + 16))(__dst, __src, v34);
        uint64_t v35 = (int *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (DataFrame, sessionIdColumn: String, labelColumn: String, featureColumn: String));
        uint64_t v36 = v35[12];
        *(void *)&__dst[v36] = *(void *)&__src[v36];
        uint64_t v37 = *(void *)&__src[v36 + 8];
        *(void *)((char *)v3 + v36 + 8) = v37;
        uint64_t v38 = v35[16];
        *(void *)((char *)v3 + v38) = *(void *)&__src[v38];
        uint64_t v39 = *(void *)&__src[v38 + 8];
        *(void *)((char *)v3 + v38 + 8) = v39;
        uint64_t v40 = v35[20];
        *(void *)((char *)v3 + v40) = *(void *)&__src[v40];
        uint64_t v41 = *(void *)&__src[v40 + 8];
        *(void *)((char *)v3 + v40 + 8) = v41;
        swift_bridgeObjectRetain(v37);
        swift_bridgeObjectRetain(v39);
        swift_bridgeObjectRetain(v41);
        uint64_t v53 = 5;
LABEL_12:
        uint64_t v19 = v53;
        uint64_t v17 = v3;
        uint64_t v18 = v7;
        break;
      case 6u:
        uint64_t v42 = type metadata accessor for DataFrame(0);
        (*(void (**)(char *, char *, uint64_t))(*(void *)(v42 - 8) + 16))(__dst, __src, v42);
        uint64_t v43 = (int *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (DataFrame, videoColumn: String, labelColumn: String, startTimeColumn: String?, endTimeColumn: String?));
        uint64_t v44 = v43[12];
        *(void *)&__dst[v44] = *(void *)&__src[v44];
        uint64_t v45 = *(void *)&__src[v44 + 8];
        *(void *)((char *)v3 + v44 + 8) = v45;
        uint64_t v46 = v43[16];
        *(void *)((char *)v3 + v46) = *(void *)&__src[v46];
        uint64_t v47 = *(void *)&__src[v46 + 8];
        *(void *)((char *)v3 + v46 + 8) = v47;
        uint64_t v48 = v43[20];
        *(void *)((char *)v3 + v48) = *(void *)&__src[v48];
        uint64_t v58 = v7;
        uint64_t v49 = *(void *)&__src[v48 + 8];
        *(void *)((char *)v3 + v48 + 8) = v49;
        uint64_t v50 = v43[24];
        *(void *)((char *)v3 + v50) = *(void *)&__src[v50];
        uint64_t v51 = *(void *)&__src[v50 + 8];
        *(void *)((char *)v3 + v50 + 8) = v51;
        swift_bridgeObjectRetain(v45);
        swift_bridgeObjectRetain(v47);
        swift_bridgeObjectRetain(v49);
        swift_bridgeObjectRetain(v51);
        uint64_t v54 = 6;
LABEL_14:
        uint64_t v19 = v54;
        uint64_t v17 = v3;
        uint64_t v18 = v58;
        break;
    }
    swift_storeEnumTagMultiPayload(v17, v18, v19);
    swift_storeEnumTagMultiPayload(v3, a3, 1);
  }
  else
  {
    memcpy(__dst, __src, *(void *)(v4 + 64));
  }
  return v3;
}

uint64_t destroy for MLHandActionClassifier.ModelParameters.ValidationData(uint64_t a1, uint64_t a2)
{
  uint64_t result = swift_getEnumCaseMultiPayload(a1, a2);
  if (result == 1)
  {
    uint64_t v3 = type metadata accessor for MLHandActionClassifier.DataSource(0);
    uint64_t result = swift_getEnumCaseMultiPayload(a1, v3);
    switch((int)result)
    {
      case 0:
        uint64_t v5 = type metadata accessor for URL(0);
        uint64_t v6 = *(void (**)(uint64_t, uint64_t))(*(void *)(v5 - 8) + 8);
        v6(a1, v5);
        uint64_t v7 = (int *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (at: URL, annotationFile: URL, videoColumn: String, labelColumn: String, startTimeColumn: String?, endTimeColumn: String?));
        v6(a1 + v7[12], v5);
        swift_bridgeObjectRelease(*(void *)(a1 + v7[16] + 8));
        swift_bridgeObjectRelease(*(void *)(a1 + v7[20] + 8));
        swift_bridgeObjectRelease(*(void *)(a1 + v7[24] + 8));
        uint64_t v8 = v7[28];
        goto LABEL_10;
      case 1:
      case 2:
        uint64_t v4 = type metadata accessor for URL(0);
        return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v4 - 8) + 8))(a1, v4);
      case 3:
        outlined consume of Result<_DataTable, Error>(*(void *)a1, *(_DWORD *)(a1 + 8));
        swift_bridgeObjectRelease(*(void *)(a1 + 24));
        swift_bridgeObjectRelease(*(void *)(a1 + 40));
        return swift_bridgeObjectRelease(*(void *)(a1 + 56));
      case 4:
        outlined consume of Result<_DataTable, Error>(*(void *)a1, *(_DWORD *)(a1 + 8));
        swift_bridgeObjectRelease(*(void *)(a1 + 24));
        swift_bridgeObjectRelease(*(void *)(a1 + 40));
        swift_bridgeObjectRelease(*(void *)(a1 + 56));
        return swift_bridgeObjectRelease(*(void *)(a1 + 72));
      case 5:
        uint64_t v9 = type metadata accessor for DataFrame(0);
        (*(void (**)(uint64_t, uint64_t))(*(void *)(v9 - 8) + 8))(a1, v9);
        uint64_t v10 = (int *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (DataFrame, sessionIdColumn: String, labelColumn: String, featureColumn: String));
        swift_bridgeObjectRelease(*(void *)(a1 + v10[12] + 8));
        swift_bridgeObjectRelease(*(void *)(a1 + v10[16] + 8));
        uint64_t v8 = v10[20];
        goto LABEL_10;
      case 6:
        uint64_t v11 = type metadata accessor for DataFrame(0);
        (*(void (**)(uint64_t, uint64_t))(*(void *)(v11 - 8) + 8))(a1, v11);
        uint64_t v12 = (int *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (DataFrame, videoColumn: String, labelColumn: String, startTimeColumn: String?, endTimeColumn: String?));
        swift_bridgeObjectRelease(*(void *)(a1 + v12[12] + 8));
        swift_bridgeObjectRelease(*(void *)(a1 + v12[16] + 8));
        swift_bridgeObjectRelease(*(void *)(a1 + v12[20] + 8));
        uint64_t v8 = v12[24];
LABEL_10:
        uint64_t result = swift_bridgeObjectRelease(*(void *)(a1 + v8 + 8));
        break;
      default:
        return result;
    }
  }
  return result;
}

char *initializeWithCopy for MLHandActionClassifier.ModelParameters.ValidationData(char *__dst, char *__src, uint64_t a3)
{
  if (swift_getEnumCaseMultiPayload(__src, a3) == 1)
  {
    uint64_t v5 = type metadata accessor for MLHandActionClassifier.DataSource(0);
    switch(swift_getEnumCaseMultiPayload(__src, v5))
    {
      case 0u:
        uint64_t v54 = v5;
        uint64_t v6 = type metadata accessor for URL(0);
        uint64_t v52 = *(void (**)(char *, char *, uint64_t))(*(void *)(v6 - 8) + 16);
        v52(__dst, __src, v6);
        uint64_t v7 = (int *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (at: URL, annotationFile: URL, videoColumn: String, labelColumn: String, startTimeColumn: String?, endTimeColumn: String?));
        v52(&__dst[v7[12]], &__src[v7[12]], v6);
        uint64_t v8 = v7[16];
        *(void *)&__dst[v8] = *(void *)&__src[v8];
        uint64_t v9 = *(void *)&__src[v8 + 8];
        *(void *)&__dst[v8 + 8] = v9;
        uint64_t v10 = v7[20];
        *(void *)&__dst[v10] = *(void *)&__src[v10];
        uint64_t v53 = *(void *)&__src[v10 + 8];
        *(void *)&__dst[v10 + 8] = v53;
        uint64_t v11 = v7[24];
        *(void *)&__dst[v11] = *(void *)&__src[v11];
        uint64_t v12 = *(void *)&__src[v11 + 8];
        *(void *)&__dst[v11 + 8] = v12;
        uint64_t v13 = v7[28];
        *(void *)&__dst[v13] = *(void *)&__src[v13];
        uint64_t v14 = *(void *)&__src[v13 + 8];
        *(void *)&__dst[v13 + 8] = v14;
        swift_bridgeObjectRetain(v9);
        swift_bridgeObjectRetain(v53);
        swift_bridgeObjectRetain(v12);
        swift_bridgeObjectRetain(v14);
        uint64_t v15 = __dst;
        uint64_t v16 = v54;
        uint64_t v17 = 0;
        break;
      case 1u:
        uint64_t v18 = type metadata accessor for URL(0);
        (*(void (**)(char *, char *, uint64_t))(*(void *)(v18 - 8) + 16))(__dst, __src, v18);
        uint64_t v50 = 1;
        goto LABEL_10;
      case 2u:
        uint64_t v19 = type metadata accessor for URL(0);
        (*(void (**)(char *, char *, uint64_t))(*(void *)(v19 - 8) + 16))(__dst, __src, v19);
        uint64_t v50 = 2;
        goto LABEL_10;
      case 3u:
        uint64_t v20 = *(void *)__src;
        uint64_t v55 = v5;
        char v21 = __src[8];
        outlined copy of Result<_DataTable, Error>(*(void *)__src, v21);
        *(void *)__dst = v20;
        __dst[8] = v21;
        *((void *)__dst + 2) = *((void *)__src + 2);
        uint64_t v22 = *((void *)__src + 3);
        *((void *)__dst + 3) = v22;
        *((void *)__dst + 4) = *((void *)__src + 4);
        uint64_t v23 = *((void *)__src + 5);
        *((void *)__dst + 5) = v23;
        *((void *)__dst + 6) = *((void *)__src + 6);
        uint64_t v24 = *((void *)__src + 7);
        *((void *)__dst + 7) = v24;
        swift_bridgeObjectRetain(v22);
        swift_bridgeObjectRetain(v23);
        swift_bridgeObjectRetain(v24);
        uint64_t v51 = 3;
        goto LABEL_12;
      case 4u:
        uint64_t v25 = *(void *)__src;
        uint64_t v55 = v5;
        char v26 = __src[8];
        outlined copy of Result<_DataTable, Error>(*(void *)__src, v26);
        *(void *)__dst = v25;
        __dst[8] = v26;
        *((void *)__dst + 2) = *((void *)__src + 2);
        uint64_t v27 = *((void *)__src + 3);
        *((void *)__dst + 3) = v27;
        *((void *)__dst + 4) = *((void *)__src + 4);
        uint64_t v28 = *((void *)__src + 5);
        *((void *)__dst + 5) = v28;
        *((void *)__dst + 6) = *((void *)__src + 6);
        uint64_t v29 = *((void *)__src + 7);
        *((void *)__dst + 7) = v29;
        *((void *)__dst + 8) = *((void *)__src + 8);
        uint64_t v30 = *((void *)__src + 9);
        *((void *)__dst + 9) = v30;
        swift_bridgeObjectRetain(v27);
        swift_bridgeObjectRetain(v28);
        swift_bridgeObjectRetain(v29);
        swift_bridgeObjectRetain(v30);
        uint64_t v51 = 4;
        goto LABEL_12;
      case 5u:
        uint64_t v31 = type metadata accessor for DataFrame(0);
        (*(void (**)(char *, char *, uint64_t))(*(void *)(v31 - 8) + 16))(__dst, __src, v31);
        uint64_t v32 = (int *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (DataFrame, sessionIdColumn: String, labelColumn: String, featureColumn: String));
        uint64_t v33 = v32[12];
        *(void *)&__dst[v33] = *(void *)&__src[v33];
        uint64_t v34 = *(void *)&__src[v33 + 8];
        *(void *)&__dst[v33 + 8] = v34;
        uint64_t v35 = v32[16];
        *(void *)&__dst[v35] = *(void *)&__src[v35];
        uint64_t v36 = *(void *)&__src[v35 + 8];
        *(void *)&__dst[v35 + 8] = v36;
        uint64_t v37 = v32[20];
        *(void *)&__dst[v37] = *(void *)&__src[v37];
        uint64_t v38 = *(void *)&__src[v37 + 8];
        *(void *)&__dst[v37 + 8] = v38;
        swift_bridgeObjectRetain(v34);
        swift_bridgeObjectRetain(v36);
        swift_bridgeObjectRetain(v38);
        uint64_t v50 = 5;
LABEL_10:
        uint64_t v17 = v50;
        uint64_t v15 = __dst;
        uint64_t v16 = v5;
        break;
      case 6u:
        uint64_t v39 = type metadata accessor for DataFrame(0);
        (*(void (**)(char *, char *, uint64_t))(*(void *)(v39 - 8) + 16))(__dst, __src, v39);
        uint64_t v40 = (int *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (DataFrame, videoColumn: String, labelColumn: String, startTimeColumn: String?, endTimeColumn: String?));
        uint64_t v41 = v40[12];
        *(void *)&__dst[v41] = *(void *)&__src[v41];
        uint64_t v42 = *(void *)&__src[v41 + 8];
        *(void *)&__dst[v41 + 8] = v42;
        uint64_t v43 = v40[16];
        *(void *)&__dst[v43] = *(void *)&__src[v43];
        uint64_t v44 = *(void *)&__src[v43 + 8];
        *(void *)&__dst[v43 + 8] = v44;
        uint64_t v45 = v40[20];
        *(void *)&__dst[v45] = *(void *)&__src[v45];
        uint64_t v55 = v5;
        uint64_t v46 = *(void *)&__src[v45 + 8];
        *(void *)&__dst[v45 + 8] = v46;
        uint64_t v47 = v40[24];
        *(void *)&__dst[v47] = *(void *)&__src[v47];
        uint64_t v48 = *(void *)&__src[v47 + 8];
        *(void *)&__dst[v47 + 8] = v48;
        swift_bridgeObjectRetain(v42);
        swift_bridgeObjectRetain(v44);
        swift_bridgeObjectRetain(v46);
        swift_bridgeObjectRetain(v48);
        uint64_t v51 = 6;
LABEL_12:
        uint64_t v17 = v51;
        uint64_t v15 = __dst;
        uint64_t v16 = v55;
        break;
    }
    swift_storeEnumTagMultiPayload(v15, v16, v17);
    swift_storeEnumTagMultiPayload(__dst, a3, 1);
  }
  else
  {
    memcpy(__dst, __src, *(void *)(*(void *)(a3 - 8) + 64));
  }
  return __dst;
}

char *assignWithCopy for MLHandActionClassifier.ModelParameters.ValidationData(char *__dst, char *__src, uint64_t a3)
{
  if (__dst != __src)
  {
    outlined destroy of MLHandActionClassifier.ModelParameters.ValidationData((uint64_t)__dst, type metadata accessor for MLHandActionClassifier.ModelParameters.ValidationData);
    if (swift_getEnumCaseMultiPayload(__src, a3) == 1)
    {
      uint64_t v5 = type metadata accessor for MLHandActionClassifier.DataSource(0);
      unsigned int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload(__src, v5);
      switch(EnumCaseMultiPayload)
      {
        case 0u:
          uint64_t v43 = v5;
          uint64_t v41 = type metadata accessor for URL(0);
          uint64_t v8 = *(void (**)(char *, char *, uint64_t))(*(void *)(v41 - 8) + 16);
          v8(__dst, __src, v41);
          unsigned int v45 = EnumCaseMultiPayload;
          uint64_t v9 = (int *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (at: URL, annotationFile: URL, videoColumn: String, labelColumn: String, startTimeColumn: String?, endTimeColumn: String?));
          v8(&__dst[v9[12]], &__src[v9[12]], v41);
          uint64_t v10 = v9[16];
          *(void *)&__dst[v10] = *(void *)&__src[v10];
          uint64_t v16 = *(void *)&__src[v10 + 8];
          *(void *)&__dst[v10 + 8] = v16;
          uint64_t v11 = v9[20];
          *(void *)&__dst[v11] = *(void *)&__src[v11];
          uint64_t v42 = *(void *)&__src[v11 + 8];
          *(void *)&__dst[v11 + 8] = v42;
          uint64_t v12 = v9[24];
          *(void *)&__dst[v12] = *(void *)&__src[v12];
          uint64_t v13 = *(void *)&__src[v12 + 8];
          *(void *)&__dst[v12 + 8] = v13;
          uint64_t v14 = v9[28];
          *(void *)&__dst[v14] = *(void *)&__src[v14];
          uint64_t v15 = *(void *)&__src[v14 + 8];
          *(void *)&__dst[v14 + 8] = v15;
          swift_bridgeObjectRetain(v16);
          LOBYTE(v16) = v42;
          goto LABEL_10;
        case 1u:
        case 2u:
          uint64_t v7 = type metadata accessor for URL(0);
          (*(void (**)(char *, char *, uint64_t))(*(void *)(v7 - 8) + 16))(__dst, __src, v7);
          goto LABEL_14;
        case 3u:
          uint64_t v43 = v5;
          uint64_t v17 = *(void *)__src;
          unsigned int v45 = EnumCaseMultiPayload;
          char v18 = __src[8];
          outlined copy of Result<_DataTable, Error>(*(void *)__src, v18);
          *(void *)__dst = v17;
          __dst[8] = v18;
          *((void *)__dst + 2) = *((void *)__src + 2);
          uint64_t v16 = *((void *)__src + 3);
          *((void *)__dst + 3) = v16;
          *((void *)__dst + 4) = *((void *)__src + 4);
          uint64_t v13 = *((void *)__src + 5);
          *((void *)__dst + 5) = v13;
          *((void *)__dst + 6) = *((void *)__src + 6);
          uint64_t v15 = *((void *)__src + 7);
          *((void *)__dst + 7) = v15;
          goto LABEL_10;
        case 4u:
          uint64_t v44 = v5;
          uint64_t v19 = *(void *)__src;
          unsigned int v46 = EnumCaseMultiPayload;
          char v20 = __src[8];
          outlined copy of Result<_DataTable, Error>(*(void *)__src, v20);
          *(void *)__dst = v19;
          __dst[8] = v20;
          *((void *)__dst + 2) = *((void *)__src + 2);
          uint64_t v21 = *((void *)__src + 3);
          *((void *)__dst + 3) = v21;
          *((void *)__dst + 4) = *((void *)__src + 4);
          uint64_t v22 = *((void *)__src + 5);
          *((void *)__dst + 5) = v22;
          *((void *)__dst + 6) = *((void *)__src + 6);
          uint64_t v23 = *((void *)__src + 7);
          *((void *)__dst + 7) = v23;
          *((void *)__dst + 8) = *((void *)__src + 8);
          uint64_t v24 = *((void *)__src + 9);
          *((void *)__dst + 9) = v24;
          goto LABEL_12;
        case 5u:
          uint64_t v25 = type metadata accessor for DataFrame(0);
          (*(void (**)(char *, char *, uint64_t))(*(void *)(v25 - 8) + 16))(__dst, __src, v25);
          char v26 = (int *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (DataFrame, sessionIdColumn: String, labelColumn: String, featureColumn: String));
          uint64_t v27 = v26[12];
          *(void *)&__dst[v27] = *(void *)&__src[v27];
          uint64_t v16 = *(void *)&__src[v27 + 8];
          *(void *)&__dst[v27 + 8] = v16;
          uint64_t v28 = v26[16];
          *(void *)&__dst[v28] = *(void *)&__src[v28];
          uint64_t v43 = v5;
          uint64_t v13 = *(void *)&__src[v28 + 8];
          *(void *)&__dst[v28 + 8] = v13;
          uint64_t v29 = v26[20];
          *(void *)&__dst[v29] = *(void *)&__src[v29];
          unsigned int v45 = EnumCaseMultiPayload;
          uint64_t v15 = *(void *)&__src[v29 + 8];
          *(void *)&__dst[v29 + 8] = v15;
LABEL_10:
          swift_bridgeObjectRetain(v16);
          char v30 = v13;
          uint64_t v5 = v43;
          swift_bridgeObjectRetain(v30);
          char v31 = v15;
          unsigned int EnumCaseMultiPayload = v45;
          break;
        case 6u:
          uint64_t v32 = type metadata accessor for DataFrame(0);
          (*(void (**)(char *, char *, uint64_t))(*(void *)(v32 - 8) + 16))(__dst, __src, v32);
          uint64_t v33 = (int *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (DataFrame, videoColumn: String, labelColumn: String, startTimeColumn: String?, endTimeColumn: String?));
          uint64_t v34 = v33[12];
          *(void *)&__dst[v34] = *(void *)&__src[v34];
          uint64_t v21 = *(void *)&__src[v34 + 8];
          *(void *)&__dst[v34 + 8] = v21;
          uint64_t v35 = v33[16];
          *(void *)&__dst[v35] = *(void *)&__src[v35];
          uint64_t v44 = v5;
          uint64_t v22 = *(void *)&__src[v35 + 8];
          *(void *)&__dst[v35 + 8] = v22;
          uint64_t v36 = v33[20];
          *(void *)&__dst[v36] = *(void *)&__src[v36];
          unsigned int v46 = EnumCaseMultiPayload;
          uint64_t v23 = *(void *)&__src[v36 + 8];
          *(void *)&__dst[v36 + 8] = v23;
          uint64_t v37 = v33[24];
          *(void *)&__dst[v37] = *(void *)&__src[v37];
          uint64_t v24 = *(void *)&__src[v37 + 8];
          *(void *)&__dst[v37 + 8] = v24;
LABEL_12:
          swift_bridgeObjectRetain(v21);
          char v38 = v22;
          uint64_t v5 = v44;
          swift_bridgeObjectRetain(v38);
          char v39 = v23;
          unsigned int EnumCaseMultiPayload = v46;
          swift_bridgeObjectRetain(v39);
          char v31 = v24;
          break;
      }
      swift_bridgeObjectRetain(v31);
LABEL_14:
      swift_storeEnumTagMultiPayload(__dst, v5, EnumCaseMultiPayload);
      swift_storeEnumTagMultiPayload(__dst, a3, 1);
    }
    else
    {
      memcpy(__dst, __src, *(void *)(*(void *)(a3 - 8) + 64));
    }
  }
  return __dst;
}

char *initializeWithTake for MLHandActionClassifier.ModelParameters.ValidationData(char *__dst, char *__src, uint64_t a3)
{
  if (swift_getEnumCaseMultiPayload(__src, a3) == 1)
  {
    uint64_t v4 = type metadata accessor for MLHandActionClassifier.DataSource(0);
    switch(swift_getEnumCaseMultiPayload(__src, v4))
    {
      case 0u:
        uint64_t v16 = type metadata accessor for URL(0);
        uint64_t v17 = *(void (**)(char *, char *, uint64_t))(*(void *)(v16 - 8) + 32);
        v17(__dst, __src, v16);
        uint64_t v5 = (int *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (at: URL, annotationFile: URL, videoColumn: String, labelColumn: String, startTimeColumn: String?, endTimeColumn: String?));
        v17(&__dst[v5[12]], &__src[v5[12]], v16);
        *(_OWORD *)&__dst[v5[16]] = *(_OWORD *)&__src[v5[16]];
        *(_OWORD *)&__dst[v5[20]] = *(_OWORD *)&__src[v5[20]];
        *(_OWORD *)&__dst[v5[24]] = *(_OWORD *)&__src[v5[24]];
        *(_OWORD *)&__dst[v5[28]] = *(_OWORD *)&__src[v5[28]];
        uint64_t v6 = v4;
        uint64_t v7 = 0;
        goto LABEL_11;
      case 1u:
        uint64_t v8 = type metadata accessor for URL(0);
        (*(void (**)(char *, char *, uint64_t))(*(void *)(v8 - 8) + 32))(__dst, __src, v8);
        uint64_t v15 = 1;
        goto LABEL_10;
      case 2u:
        uint64_t v9 = type metadata accessor for URL(0);
        (*(void (**)(char *, char *, uint64_t))(*(void *)(v9 - 8) + 32))(__dst, __src, v9);
        uint64_t v15 = 2;
        goto LABEL_10;
      case 5u:
        uint64_t v10 = type metadata accessor for DataFrame(0);
        (*(void (**)(char *, char *, uint64_t))(*(void *)(v10 - 8) + 32))(__dst, __src, v10);
        uint64_t v11 = (int *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (DataFrame, sessionIdColumn: String, labelColumn: String, featureColumn: String));
        *(_OWORD *)&__dst[v11[12]] = *(_OWORD *)&__src[v11[12]];
        *(_OWORD *)&__dst[v11[16]] = *(_OWORD *)&__src[v11[16]];
        *(_OWORD *)&__dst[v11[20]] = *(_OWORD *)&__src[v11[20]];
        uint64_t v15 = 5;
        goto LABEL_10;
      case 6u:
        uint64_t v12 = type metadata accessor for DataFrame(0);
        (*(void (**)(char *, char *, uint64_t))(*(void *)(v12 - 8) + 32))(__dst, __src, v12);
        uint64_t v13 = (int *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (DataFrame, videoColumn: String, labelColumn: String, startTimeColumn: String?, endTimeColumn: String?));
        *(_OWORD *)&__dst[v13[12]] = *(_OWORD *)&__src[v13[12]];
        *(_OWORD *)&__dst[v13[16]] = *(_OWORD *)&__src[v13[16]];
        *(_OWORD *)&__dst[v13[20]] = *(_OWORD *)&__src[v13[20]];
        *(_OWORD *)&__dst[v13[24]] = *(_OWORD *)&__src[v13[24]];
        uint64_t v15 = 6;
LABEL_10:
        uint64_t v7 = v15;
        uint64_t v6 = v4;
LABEL_11:
        swift_storeEnumTagMultiPayload(__dst, v6, v7);
        break;
      default:
        memcpy(__dst, __src, *(void *)(*(void *)(v4 - 8) + 64));
        break;
    }
    swift_storeEnumTagMultiPayload(__dst, a3, 1);
  }
  else
  {
    memcpy(__dst, __src, *(void *)(*(void *)(a3 - 8) + 64));
  }
  return __dst;
}

char *assignWithTake for MLHandActionClassifier.ModelParameters.ValidationData(char *__dst, char *__src, uint64_t a3)
{
  if (__dst != __src)
  {
    outlined destroy of MLHandActionClassifier.ModelParameters.ValidationData((uint64_t)__dst, type metadata accessor for MLHandActionClassifier.ModelParameters.ValidationData);
    if (swift_getEnumCaseMultiPayload(__src, a3) == 1)
    {
      uint64_t v4 = type metadata accessor for MLHandActionClassifier.DataSource(0);
      switch(swift_getEnumCaseMultiPayload(__src, v4))
      {
        case 0u:
          uint64_t v16 = type metadata accessor for URL(0);
          uint64_t v17 = *(void (**)(char *, char *, uint64_t))(*(void *)(v16 - 8) + 32);
          v17(__dst, __src, v16);
          uint64_t v5 = (int *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (at: URL, annotationFile: URL, videoColumn: String, labelColumn: String, startTimeColumn: String?, endTimeColumn: String?));
          v17(&__dst[v5[12]], &__src[v5[12]], v16);
          *(_OWORD *)&__dst[v5[16]] = *(_OWORD *)&__src[v5[16]];
          *(_OWORD *)&__dst[v5[20]] = *(_OWORD *)&__src[v5[20]];
          *(_OWORD *)&__dst[v5[24]] = *(_OWORD *)&__src[v5[24]];
          *(_OWORD *)&__dst[v5[28]] = *(_OWORD *)&__src[v5[28]];
          uint64_t v6 = v4;
          uint64_t v7 = 0;
          goto LABEL_12;
        case 1u:
          uint64_t v8 = type metadata accessor for URL(0);
          (*(void (**)(char *, char *, uint64_t))(*(void *)(v8 - 8) + 32))(__dst, __src, v8);
          uint64_t v15 = 1;
          goto LABEL_11;
        case 2u:
          uint64_t v9 = type metadata accessor for URL(0);
          (*(void (**)(char *, char *, uint64_t))(*(void *)(v9 - 8) + 32))(__dst, __src, v9);
          uint64_t v15 = 2;
          goto LABEL_11;
        case 5u:
          uint64_t v10 = type metadata accessor for DataFrame(0);
          (*(void (**)(char *, char *, uint64_t))(*(void *)(v10 - 8) + 32))(__dst, __src, v10);
          uint64_t v11 = (int *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (DataFrame, sessionIdColumn: String, labelColumn: String, featureColumn: String));
          *(_OWORD *)&__dst[v11[12]] = *(_OWORD *)&__src[v11[12]];
          *(_OWORD *)&__dst[v11[16]] = *(_OWORD *)&__src[v11[16]];
          *(_OWORD *)&__dst[v11[20]] = *(_OWORD *)&__src[v11[20]];
          uint64_t v15 = 5;
          goto LABEL_11;
        case 6u:
          uint64_t v12 = type metadata accessor for DataFrame(0);
          (*(void (**)(char *, char *, uint64_t))(*(void *)(v12 - 8) + 32))(__dst, __src, v12);
          uint64_t v13 = (int *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (DataFrame, videoColumn: String, labelColumn: String, startTimeColumn: String?, endTimeColumn: String?));
          *(_OWORD *)&__dst[v13[12]] = *(_OWORD *)&__src[v13[12]];
          *(_OWORD *)&__dst[v13[16]] = *(_OWORD *)&__src[v13[16]];
          *(_OWORD *)&__dst[v13[20]] = *(_OWORD *)&__src[v13[20]];
          *(_OWORD *)&__dst[v13[24]] = *(_OWORD *)&__src[v13[24]];
          uint64_t v15 = 6;
LABEL_11:
          uint64_t v7 = v15;
          uint64_t v6 = v4;
LABEL_12:
          swift_storeEnumTagMultiPayload(__dst, v6, v7);
          break;
        default:
          memcpy(__dst, __src, *(void *)(*(void *)(v4 - 8) + 64));
          break;
      }
      swift_storeEnumTagMultiPayload(__dst, a3, 1);
    }
    else
    {
      memcpy(__dst, __src, *(void *)(*(void *)(a3 - 8) + 64));
    }
  }
  return __dst;
}

uint64_t type metadata completion function for MLHandActionClassifier.ModelParameters.ValidationData(uint64_t a1)
{
  v5[0] = &unk_348E88;
  uint64_t result = type metadata accessor for MLHandActionClassifier.DataSource(319);
  if (v4 <= 0x3F)
  {
    v5[1] = *(void *)(result - 8) + 64;
    swift_initEnumMetadataMultiPayload(a1, 256, 2, v5, v2, v3);
    return 0;
  }
  return result;
}

uint64_t outlined destroy of MLHandActionClassifier.ModelParameters.ValidationData(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t v2 = a2(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

void *_sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSay8CreateML13MLRecommenderV10IdentifierOG_Sis5NeverOTg503_s8d4ML13f83V16buildRecommender20MLModelSpecification014ItemSimilarityE13ConfigurationVyFSiAC10G53Ocfu_32e3399fa1d635680dd9b269b7350fcff2AISiTf3nnnpk_nTf1cn_n(uint64_t a1)
{
  int64_t v1 = *(void *)(a1 + 16);
  if (!v1) {
    return _swiftEmptyArrayStorage;
  }
  specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v1, 0);
  uint64_t result = _swiftEmptyArrayStorage;
  uint64_t v3 = (unsigned char *)(a1 + 48);
  do
  {
    if (*v3 != 1) {
      BUG();
    }
    uint64_t v4 = *((void *)v3 - 2);
    uint64_t v7 = result;
    unint64_t v5 = result[2];
    int64_t v6 = v5 + 1;
    if (result[3] >> 1 <= v5)
    {
      specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(result[3] >= 2uLL, v6, 1);
      int64_t v6 = v5 + 1;
      uint64_t result = v7;
    }
    result[2] = v6;
    result[v5 + 4] = v4;
    v3 += 24;
    --v1;
  }
  while (v1);
  return result;
}

void *_sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSay8CreateML13MLRecommenderV10IdentifierOG_SSs5NeverOTg503_s8d4ML13f83V16buildRecommender20MLModelSpecification014ItemSimilarityE13ConfigurationVyFSSAC10G55Ocfu0_33_249550f2622063ad651cac1eac78e882AISSTf3nnnpk_nTf1cn_n(uint64_t a1)
{
  int64_t v1 = *(void *)(a1 + 16);
  if (!v1) {
    return _swiftEmptyArrayStorage;
  }
  specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v1, 0);
  uint64_t result = _swiftEmptyArrayStorage;
  uint64_t v3 = (char *)(a1 + 48);
  do
  {
    uint64_t v13 = result;
    int64_t v11 = v1;
    uint64_t v4 = *((void *)v3 - 2);
    uint64_t v5 = *((void *)v3 - 1);
    char v6 = *v3;
    if (*v3)
    {
      uint64_t v12 = 0;
      uint64_t v7 = 0;
    }
    else
    {
      uint64_t v8 = *((void *)v3 - 2);
      outlined copy of MLRecommender.Identifier(v4, *((void *)v3 - 1), 0);
      swift_bridgeObjectRetain(v5);
      uint64_t v4 = v8;
      uint64_t v12 = v8;
      uint64_t v7 = v5;
    }
    outlined consume of MLRecommender.Identifier(v4, v5, v6);
    if (!v7) {
      BUG();
    }
    uint64_t result = v13;
    unint64_t v9 = v13[2];
    if (v13[3] >> 1 <= v9)
    {
      specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v13[3] >= 2uLL, v9 + 1, 1);
      uint64_t result = v13;
    }
    result[2] = v9 + 1;
    uint64_t v10 = 2 * v9;
    result[v10 + 4] = v12;
    result[v10 + 5] = v7;
    v3 += 24;
    int64_t v1 = v11 - 1;
  }
  while (v11 != 1);
  return result;
}

void *_sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSaySi_SdtG_20MLModelSpecification38ItemSimilarityRecommenderConfigurationV0F5ScoreVs5NeverOTg508_sSiSd20d15Specification38fghi4V0C5j7VIgyyr_m8_SdtAEs5k125OIegnrzr_TR047_s8CreateML13MLRecommenderV16buildRecommender20a16Specification014cd3E13f32VyFAG12SimilarItemsVSiXEfU_AG0H5gu4_S14V2U_Tf3nnnpf_nTf1cn_n(uint64_t a1)
{
  uint64_t v16 = type metadata accessor for ItemSimilarityRecommenderConfiguration.ItemScore(0);
  uint64_t v17 = *(void *)(v16 - 8);
  int64_t v2 = *(void *)(v17 + 64);
  uint64_t v3 = alloca(v2);
  uint64_t v4 = alloca(v2);
  uint64_t v19 = &v16;
  int64_t v5 = *(void *)(a1 + 16);
  if (!v5) {
    return _swiftEmptyArrayStorage;
  }
  uint64_t v18 = v1;
  uint64_t v21 = _swiftEmptyArrayStorage;
  int64_t v6 = v5;
  specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v5, 0);
  uint64_t v7 = v21;
  uint64_t v8 = (double *)(a1 + 40);
  unint64_t v9 = v19;
  do
  {
    ItemSimilarityRecommenderConfiguration.ItemScore.init(itemID:similarityScore:)(*((void *)v8 - 1), *v8);
    uint64_t v21 = v7;
    uint64_t v10 = v9;
    unint64_t v11 = v7[2];
    unint64_t v12 = v7[3];
    int64_t v13 = v11 + 1;
    if (v12 >> 1 <= v11)
    {
      int64_t v20 = v11 + 1;
      specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v12 >= 2, v13, 1);
      int64_t v13 = v20;
      uint64_t v10 = v19;
      uint64_t v7 = v21;
    }
    v7[2] = v13;
    uint64_t v14 = (char *)v7
        + ((*(unsigned __int8 *)(v17 + 80) + 32) & ~*(unsigned __int8 *)(v17 + 80))
        + *(void *)(v17 + 72) * v11;
    unint64_t v9 = v10;
    (*(void (**)(char *, uint64_t *, uint64_t))(v17 + 32))(v14, v10, v16);
    v8 += 2;
    --v6;
  }
  while (v6);
  return v7;
}

uint64_t MLRecommender.write(to:metadata:)(uint64_t a1, uint64_t a2)
{
  uint64_t v10 = a1;
  uint64_t v2 = type metadata accessor for Model(0);
  uint64_t v11 = *(void *)(v2 - 8);
  int64_t v3 = *(void *)(v11 + 64);
  uint64_t v4 = alloca(v3);
  int64_t v5 = alloca(v3);
  uint64_t v6 = *(void *)(a2 + 64);
  v8[0] = *(_OWORD *)a2;
  v8[1] = *(_OWORD *)(a2 + 16);
  _OWORD v8[2] = *(_OWORD *)(a2 + 32);
  v8[3] = *(_OWORD *)(a2 + 48);
  uint64_t v9 = v6;
  MLRecommender.exportToCoreML(metadata:)((uint64_t *)v8);
  Model.write(to:)(v10);
  return (*(uint64_t (**)(_OWORD *, uint64_t))(v11 + 8))(v8, v2);
}

uint64_t MLRecommender.exportToCoreML(metadata:)(uint64_t *a1)
{
  uint64_t v1 = type metadata accessor for ModelKind(0);
  uint64_t v21 = *(void *)(v1 - 8);
  int64_t v2 = *(void *)(v21 + 64);
  int64_t v3 = alloca(v2);
  uint64_t v4 = alloca(v2);
  uint64_t v26 = *a1;
  uint64_t v22 = a1[1];
  uint64_t v29 = a1[2];
  uint64_t v30 = a1[3];
  uint64_t v24 = a1[4];
  unint64_t v25 = a1[5];
  uint64_t v27 = a1[6];
  uint64_t v28 = a1[7];
  uint64_t v23 = a1[8];
  Model.init()();
  Model.specificationVersion.setter(4);
  uint64_t v5 = MLRecommender.buildInputs()();
  Model.inputs.setter(v5);
  uint64_t v6 = MLRecommender.buildOutputs()();
  Model.outputs.setter(v6);
  MLRecommender.buildRecommender()();
  (*(void (**)(uint64_t *, void, uint64_t))(v21 + 104))(&v19, enum case for ModelKind.itemSimilarityRecommender(_:), v1);
  uint64_t v7 = v22;
  Model.kind.setter(&v19);
  Model.modelDescription.setter(0xD000000000000021, " list if not given." + 0x8000000000000000);
  if (v7)
  {
    uint64_t v8 = v30;
    swift_bridgeObjectRetain(v30);
    Model.modelDescription.setter(v29, v8);
    uint64_t v9 = v28;
    swift_bridgeObjectRetain(v28);
    Model.versionString.setter(v27, v9);
    swift_bridgeObjectRetain(v7);
    Model.author.setter(v26, v7);
    uint64_t v10 = v24;
    if (!v25) {
      uint64_t v10 = 0;
    }
    unint64_t v11 = 0xE000000000000000;
    if (v25) {
      unint64_t v11 = v25;
    }
    swift_bridgeObjectRetain(v25);
    Model.license.setter(v10, v11);
    char v12 = v23;
    if (v23)
    {
      uint64_t v13 = v23;
    }
    else
    {
      uint64_t v13 = Dictionary.init(dictionaryLiteral:)(_swiftEmptyArrayStorage, &type metadata for String, &type metadata for String, &protocol witness table for String);
      char v12 = 0;
    }
    swift_bridgeObjectRetain(v12);
    Model.metadata.setter(v13);
  }
  Swift::String v14 = getOSVersion()();
  uint64_t countAndFlagsBits = v14._countAndFlagsBits;
  char object = v14._object;
  uint64_t v17 = (uint64_t (*)(unsigned char *, void))Model.metadata.modify(v20);
  specialized Dictionary._Variant.setValue(_:forKey:)(countAndFlagsBits, (uint64_t)object, 0xD00000000000001ALL, (uint64_t)("Recommender Model" + 0x8000000000000000));
  return v17(v20, 0);
}

uint64_t MLRecommender.write(toFile:metadata:)(uint64_t a1, uint64_t a2, long long *a3)
{
  uint64_t v27 = v3;
  uint64_t v29 = a2;
  uint64_t v28 = a1;
  uint64_t v34 = type metadata accessor for Model(0);
  uint64_t v35 = *(void *)(v34 - 8);
  int64_t v5 = *(void *)(v35 + 64);
  uint64_t v6 = alloca(v5);
  uint64_t v7 = alloca(v5);
  uint64_t v30 = v21;
  uint64_t v31 = type metadata accessor for URL.DirectoryHint(0);
  uint64_t v32 = *(void *)(v31 - 8);
  int64_t v8 = *(void *)(v32 + 64);
  uint64_t v9 = alloca(v8);
  uint64_t v10 = alloca(v8);
  int64_t v11 = *(void *)(*(void *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for URL?)
                              - 8)
                  + 64);
  char v12 = alloca(v11);
  uint64_t v13 = alloca(v11);
  uint64_t v14 = type metadata accessor for URL(0);
  uint64_t v37 = *(void *)(v14 - 8);
  int64_t v15 = *(void *)(v37 + 64);
  uint64_t v16 = alloca(v15);
  uint64_t v17 = alloca(v15);
  uint64_t v33 = *((void *)a3 + 8);
  long long v23 = *a3;
  long long v24 = a3[1];
  long long v25 = a3[2];
  long long v26 = a3[3];
  uint64_t v36 = v14;
  __swift_storeEnumTagSinglePayload((uint64_t)v21, 1, 1, v14);
  (*(void (**)(_OWORD *, void, uint64_t))(v32 + 104))(v21, enum case for URL.DirectoryHint.inferFromPath(_:), v31);
  uint64_t v18 = v29;
  swift_bridgeObjectRetain(v29);
  URL.init(filePath:directoryHint:relativeTo:)(v28, v18, v21, v21);
  v21[0] = v23;
  v21[1] = v24;
  v21[2] = v25;
  void v21[3] = v26;
  uint64_t v22 = v33;
  uint64_t v19 = v30;
  MLRecommender.exportToCoreML(metadata:)((uint64_t *)v21);
  Model.write(to:)(v21);
  (*(void (**)(_OWORD *, uint64_t))(v35 + 8))(v19, v34);
  return (*(uint64_t (**)(_OWORD *, uint64_t))(v37 + 8))(v21, v36);
}

uint64_t MLRecommender.buildInputs()()
{
  uint64_t v38 = type metadata accessor for FeatureDescription(0);
  uint64_t v37 = *(void *)(v38 - 8);
  int64_t v1 = *(void *)(v37 + 64);
  int64_t v2 = alloca(v1);
  uint64_t v3 = alloca(v1);
  uint64_t v40 = &v37;
  uint64_t v4 = alloca(v1);
  int64_t v5 = alloca(v1);
  uint64_t v43 = &v37;
  uint64_t v6 = alloca(v1);
  uint64_t v7 = alloca(v1);
  uint64_t v42 = &v37;
  int64_t v8 = alloca(v1);
  uint64_t v9 = alloca(v1);
  uint64_t v44 = &v37;
  uint64_t v45 = type metadata accessor for FeatureType(0);
  uint64_t v41 = *(void **)(v45 - 8);
  int64_t v10 = v41[8];
  int64_t v11 = alloca(v10);
  char v12 = alloca(v10);
  unsigned int v46 = &v37;
  uint64_t v13 = alloca(v10);
  uint64_t v14 = alloca(v10);
  int64_t v15 = alloca(v10);
  uint64_t v16 = alloca(v10);
  LOBYTE(v47) = *(unsigned char *)(v0 + *(int *)(type metadata accessor for MLRecommender(0) + 44));
  if ((_BYTE)v47) {
    static FeatureType.dictionaryWithIntKeys(optional:)(0);
  }
  else {
    static FeatureType.dictionaryWithStringKeys(optional:)(0);
  }
  uint64_t v17 = v41;
  uint64_t v18 = (void (*)(uint64_t *, uint64_t *, uint64_t))v41[2];
  char v39 = &v37;
  uint64_t v19 = v45;
  v18(&v37, &v37, v45);
  FeatureDescription.init(name:type:description:)(0x736D657469, 0xE500000000000000, &v37, 0xD000000000000037, "responding scores." + 0x8000000000000000);
  FeatureType.IntParameters.init(optional:)(0);
  ((void (*)(uint64_t *, void, uint64_t))v17[13])(&v37, enum case for FeatureType.int(_:), v19);
  FeatureDescription.init(name:type:description:)(107, 0xE100000000000000, &v37, 0xD000000000000032, "te the recommendations." + 0x8000000000000000);
  int64_t v20 = v46;
  if ((_BYTE)v47) {
    static FeatureType.sequenceOfInt(optional:)(0);
  }
  else {
    static FeatureType.sequenceOfString(optional:)(0);
  }
  uint64_t v21 = v20;
  FeatureType.isOptional.setter(1);
  uint64_t v22 = v20;
  uint64_t v23 = v45;
  v18(&v37, v22, v45);
  FeatureDescription.init(name:type:description:)(0x7463697274736572, 0xE800000000000000, &v37, 0xD00000000000003BLL, " a recommendation." + 0x8000000000000000);
  v18(&v37, v21, v23);
  FeatureDescription.init(name:type:description:)(0x6564756C637865, 0xE700000000000000, &v37, 0xD000000000000063, "o generate recommendations." + 0x8000000000000000);
  uint64_t v24 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<FeatureDescription>);
  uint64_t v25 = v37;
  uint64_t v26 = *(void *)(v37 + 72);
  uint64_t v27 = *(unsigned __int8 *)(v37 + 80);
  uint64_t v28 = ((int)v27 + 32) & ~*(unsigned __int8 *)(v37 + 80);
  uint64_t v29 = swift_allocObject(v24, v28 + 4 * v26, v27 | 7);
  uint64_t v47 = v29;
  *(void *)(v29 + 16) = 4;
  *(void *)(v29 + 24) = 8;
  uint64_t v30 = v29 + v28;
  uint64_t v31 = *(void (**)(uint64_t, uint64_t *, uint64_t))(v25 + 16);
  uint64_t v32 = v38;
  v31(v30, v44, v38);
  v31(v30 + v26, v42, v32);
  v31(v30 + 2 * v26, v43, v32);
  (*(void (**)(uint64_t, uint64_t *, uint64_t))(v25 + 32))(v30 + 3 * v26, v40, v32);
  uint64_t v33 = *(void (**)(uint64_t *, uint64_t))(v25 + 8);
  v33(v43, v32);
  uint64_t v34 = (void (*)(uint64_t *, uint64_t))v41[1];
  uint64_t v35 = v45;
  v34(v46, v45);
  v33(v42, v32);
  v33(v44, v32);
  v34(v39, v35);
  return v47;
}

uint64_t MLRecommender.buildOutputs()()
{
  uint64_t v29 = type metadata accessor for FeatureDescription(0);
  uint64_t v32 = *(void *)(v29 - 8);
  int64_t v1 = *(void *)(v32 + 64);
  int64_t v2 = alloca(v1);
  uint64_t v3 = alloca(v1);
  uint64_t v33 = &v28;
  uint64_t v4 = alloca(v1);
  int64_t v5 = alloca(v1);
  uint64_t v34 = &v28;
  uint64_t v35 = type metadata accessor for FeatureType(0);
  uint64_t v6 = *(void *)(v35 - 8);
  int64_t v7 = *(void *)(v6 + 64);
  int64_t v8 = alloca(v7);
  uint64_t v9 = alloca(v7);
  uint64_t v36 = &v28;
  int64_t v10 = alloca(v7);
  int64_t v11 = alloca(v7);
  char v12 = alloca(v7);
  uint64_t v13 = alloca(v7);
  char v14 = *(unsigned char *)(v0 + *(int *)(type metadata accessor for MLRecommender(0) + 44));
  if (v14) {
    static FeatureType.sequenceOfInt(optional:)(0);
  }
  else {
    static FeatureType.sequenceOfString(optional:)(0);
  }
  uint64_t v30 = v6;
  int64_t v15 = *(void (**)(uint64_t *, uint64_t *, uint64_t))(v6 + 16);
  uint64_t v31 = &v28;
  v15(&v28, &v28, v35);
  FeatureDescription.init(name:type:description:)(0x6E656D6D6F636572, 0xEF736E6F69746164, &v28, 0xD000000000000044, "Horizontally Flip" + 0x8000000000000000);
  uint64_t v16 = v36;
  if (v14) {
    static FeatureType.dictionaryWithIntKeys(optional:)(0);
  }
  else {
    static FeatureType.dictionaryWithStringKeys(optional:)(0);
  }
  v15(&v28, v16, v35);
  FeatureDescription.init(name:type:description:)(0x7365726F6373, 0xE600000000000000, &v28, 0xD000000000000062, "t to least relevant." + 0x8000000000000000);
  uint64_t v17 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<FeatureDescription>);
  uint64_t v18 = v32;
  uint64_t v19 = *(void *)(v32 + 72);
  uint64_t v20 = *(unsigned __int8 *)(v32 + 80);
  uint64_t v21 = ((int)v20 + 32) & ~*(unsigned __int8 *)(v32 + 80);
  uint64_t v22 = swift_allocObject(v17, v21 + 2 * v19, v20 | 7);
  *(void *)(v22 + 16) = 2;
  *(void *)(v22 + 24) = 4;
  uint64_t v23 = v22 + v21;
  uint64_t v24 = v29;
  (*(void (**)(uint64_t, uint64_t *, uint64_t))(v18 + 16))(v23, v34, v29);
  (*(void (**)(uint64_t, uint64_t *, uint64_t))(v18 + 32))(v19 + v23, v33, v24);
  uint64_t v25 = *(void (**)(uint64_t *, uint64_t))(v30 + 8);
  uint64_t v26 = v35;
  v25(v36, v35);
  (*(void (**)(uint64_t *, uint64_t))(v18 + 8))(v34, v24);
  v25(v31, v26);
  return v22;
}

uint64_t MLRecommender.buildRecommender()()
{
  ItemSimilarityRecommenderConfiguration.init()();
  ItemSimilarityRecommenderConfiguration.itemInputFeatureName.setter(0x736D657469, 0xE500000000000000);
  ItemSimilarityRecommenderConfiguration.recommendationCountInputFeatureName.setter(107, 0xE100000000000000);
  ItemSimilarityRecommenderConfiguration.recommendedItemsOutputFeatureName.setter(0x6E656D6D6F636572, 0xEF736E6F69746164);
  ItemSimilarityRecommenderConfiguration.recommendedItemScoresOutputFeatureName.setter(0x7365726F6373, 0xE600000000000000);
  ItemSimilarityRecommenderConfiguration.itemInclusionInputFeatureName.setter(0x7463697274736572, 0xE800000000000000);
  ItemSimilarityRecommenderConfiguration.itemExclusionInputFeatureName.setter(0x6564756C637865, 0xE700000000000000);
  char v1 = *(unsigned char *)(v0 + *(int *)(type metadata accessor for MLRecommender(0) + 44));
  uint64_t v2 = *(void *)(v0 + 16);
  swift_bridgeObjectRetain(v2);
  if (v1 == 1)
  {
    ML13MLRecommenderV10IdentifierOG_Sis5NeverOTg503_s8d4ML13f83V16buildRecommender20MLModelSpecification014ItemSimilarityE13ConfigurationVyFSiAC10G53Ocfu_32e3399fa1d635680dd9b269b7350fcff2AISiTf3nnnpk_nTf1cn_n = _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSay8CreateML13MLRecommenderV10IdentifierOG_Sis5NeverOTg503_s8d4ML13f83V16buildRecommender20MLModelSpecification014ItemSimilarityE13ConfigurationVyFSiAC10G53Ocfu_32e3399fa1d635680dd9b269b7350fcff2AISiTf3nnnpk_nTf1cn_n(v2);
    swift_bridgeObjectRelease(v2);
    ItemSimilarityRecommenderConfiguration.itemIntIDs.setter(ML13MLRecommenderV10IdentifierOG_Sis5NeverOTg503_s8d4ML13f83V16buildRecommender20MLModelSpecification014ItemSimilarityE13ConfigurationVyFSiAC10G53Ocfu_32e3399fa1d635680dd9b269b7350fcff2AISiTf3nnnpk_nTf1cn_n, v12);
  }
  else
  {
    ML13MLRecommenderV10IdentifierOG_SSs5NeverOTg503_s8d4ML13f83V16buildRecommender20MLModelSpecification014ItemSimilarityE13ConfigurationVyFSSAC10G55Ocfu0_33_249550f2622063ad651cac1eac78e882AISSTf3nnnpk_nTf1cn_n = _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSay8CreateML13MLRecommenderV10IdentifierOG_SSs5NeverOTg503_s8d4ML13f83V16buildRecommender20MLModelSpecification014ItemSimilarityE13ConfigurationVyFSSAC10G55Ocfu0_33_249550f2622063ad651cac1eac78e882AISSTf3nnnpk_nTf1cn_n(v2);
    swift_bridgeObjectRelease(v2);
    ItemSimilarityRecommenderConfiguration.itemStringIDs.setter(ML13MLRecommenderV10IdentifierOG_SSs5NeverOTg503_s8d4ML13f83V16buildRecommender20MLModelSpecification014ItemSimilarityE13ConfigurationVyFSSAC10G55Ocfu0_33_249550f2622063ad651cac1eac78e882AISSTf3nnnpk_nTf1cn_n, v11);
  }
  uint64_t v5 = *(void *)(v2 + 16);
  uint64_t v6 = alloca(32);
  int64_t v7 = alloca(32);
  v11[0] = v0;
  v11[1] = v5;
  int64_t v8 = _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSnySiG_20MLModelSpecification38ItemSimilarityRecommenderConfigurationV12SimilarItemsVs5NeverOTg5((void (*)(uint64_t *))partial apply for closure #1 in MLRecommender.buildRecommender(), (uint64_t)&v10, 0, v5);
  return ItemSimilarityRecommenderConfiguration.itemItemSimilarities.setter(v8);
}

uint64_t closure #1 in MLRecommender.buildRecommender()(uint64_t *a1, const void *a2, uint64_t a3, double a4, double a5)
{
  uint64_t v12 = a3;
  uint64_t v5 = *a1;
  ItemSimilarityRecommenderConfiguration.SimilarItems.init()();
  ItemSimilarityRecommenderConfiguration.SimilarItems.itemID.setter(v5);
  memcpy(__dst, a2, sizeof(__dst));
  uint64_t v6 = specialized RecommenderModel.similarItems(itemIndex:count:)(v5, v12, a4, a5);
  uint64_t v7 = v13;
  ML13MLRecommenderV16buildRecommender20a16Specification014cd3E13f32VyFAG12SimilarItemsVSiXEfU_AG0H5gu4_S14V2U_Tf3nnnpf_nTf1cn_n = _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSaySi_SdtG_20MLModelSpecification38ItemSimilarityRecommenderConfigurationV0F5ScoreVs5NeverOTg508_sSiSd20d15Specification38fghi4V0C5j7VIgyyr_m8_SdtAEs5k125OIegnrzr_TR047_s8CreateML13MLRecommenderV16buildRecommender20a16Specification014cd3E13f32VyFAG12SimilarItemsVSiXEfU_AG0H5gu4_S14V2U_Tf3nnnpf_nTf1cn_n((uint64_t)v6);
  uint64_t v13 = v7;
  swift_bridgeObjectRelease((_BYTE)v6);
  return ItemSimilarityRecommenderConfiguration.SimilarItems.similarItems.setter(ML13MLRecommenderV16buildRecommender20a16Specification014cd3E13f32VyFAG12SimilarItemsVSiXEfU_AG0H5gu4_S14V2U_Tf3nnnpf_nTf1cn_n, v11);
}

uint64_t partial apply for closure #1 in MLRecommender.buildRecommender()(uint64_t *a1, double a2, double a3)
{
  return closure #1 in MLRecommender.buildRecommender()(a1, *(const void **)(v3 + 16), *(void *)(v3 + 24), a2, a3);
}

uint64_t MLSplitStrategy.dictionary.getter()
{
  if (*((unsigned char *)v0 + 17))
  {
    uint64_t v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, Any)>);
    uint64_t inited = (void *)swift_initStackObject(v1, v9);
    inited[2] = 1;
    inited[3] = 2;
    inited[4] = 1684957547;
    inited[5] = 0xE400000000000000;
    inited[9] = &type metadata for String;
    inited[6] = 0x6974616D6F747561;
    inited[7] = 0xE900000000000063;
    return Dictionary.init(dictionaryLiteral:)(inited, &type metadata for String, (char *)&type metadata for Any + 8, &protocol witness table for String);
  }
  else
  {
    uint64_t v4 = v0[1];
    uint64_t v12 = *v0;
    char v5 = *((unsigned char *)v0 + 16);
    uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, Any)>);
    uint64_t v7 = (void *)swift_initStackObject(v6, v8);
    v7[2] = 2;
    v7[3] = 4;
    void v7[4] = 1684957547;
    v7[5] = 0xE400000000000000;
    v7[9] = &type metadata for String;
    v7[6] = 0x6465786966;
    v7[7] = 0xE500000000000000;
    v7[10] = 0x6F69746172;
    v7[11] = 0xE500000000000000;
    v7[15] = &type metadata for Double;
    v7[12] = v12;
    uint64_t result = Dictionary.init(dictionaryLiteral:)(v7, &type metadata for String, (char *)&type metadata for Any + 8, &protocol witness table for String);
    uint64_t v11 = result;
    if ((v5 & 1) == 0)
    {
      v10[3] = &type metadata for Int;
      v10[0] = v4;
      specialized Dictionary.subscript.setter((uint64_t)v10, 1684366707, 0xE400000000000000);
      return v11;
    }
  }
  return result;
}

__int16 MLSplitStrategy.init(dictionary:)(uint64_t a1)
{
  char v2 = a1;
  uint64_t v3 = v1;
  if (!*(void *)(a1 + 16)) {
    goto LABEL_20;
  }
  unint64_t v4 = specialized __RawDictionaryStorage.find<A>(_:)(1684957547, 0xE400000000000000);
  if ((v5 & 1) == 0) {
    goto LABEL_20;
  }
  outlined init with copy of Any(*(void *)(a1 + 56) + 32 * v4, (uint64_t)v14);
  if (!swift_dynamicCast(&v16, v14, (char *)&type metadata for Any + 8, &type metadata for String, 6))goto LABEL_20; {
  uint64_t v6 = v16;
  }
  uint64_t v7 = v17;
  if (v16 == 0x6974616D6F747561 && v17 == 0xE900000000000063)
  {
    char v8 = 99;
LABEL_9:
    swift_bridgeObjectRelease(v8);
    __int16 result = swift_bridgeObjectRelease(v2);
    *(_OWORD *)uint64_t v3 = 0;
    *(_WORD *)(v3 + 16) = 256;
LABEL_10:
    *(unsigned char *)(v3 + 18) = 0;
    return result;
  }
  if (_stringCompareWithSmolCheck(_:_:expecting:)(0x6974616D6F747561, 0xE900000000000063, v16, v17, 0))
  {
    char v8 = v7;
    goto LABEL_9;
  }
  if (v6 == 0x6465786966 && v7 == 0xE500000000000000)
  {
    swift_bridgeObjectRelease(0);
  }
  else
  {
    char v10 = _stringCompareWithSmolCheck(_:_:expecting:)(0x6465786966, 0xE500000000000000, v6, v7, 0);
    swift_bridgeObjectRelease(v7);
    if ((v10 & 1) == 0) {
      goto LABEL_20;
    }
  }
  specialized Dictionary.subscript.getter(0x6F69746172, 0xE500000000000000, a1);
  if (!v15)
  {
    swift_bridgeObjectRelease(a1);
    __int16 result = outlined destroy of Any?((uint64_t)v14);
    goto LABEL_21;
  }
  if (swift_dynamicCast(&v16, v14, (char *)&type metadata for Any + 8, &type metadata for Double, 6))
  {
    uint64_t v11 = v16;
    specialized Dictionary.subscript.getter(1684366707, 0xE400000000000000, a1);
    swift_bridgeObjectRelease(a1);
    if (v15)
    {
      unsigned __int8 v12 = swift_dynamicCast(&v16, v14, (char *)&type metadata for Any + 8, &type metadata for Int, 6);
      if (v12) {
        uint64_t v13 = v16;
      }
      else {
        uint64_t v13 = 0;
      }
      __int16 result = v12 ^ 1;
    }
    else
    {
      outlined destroy of Any?((uint64_t)v14);
      __int16 result = 1;
      uint64_t v13 = 0;
    }
    *(void *)uint64_t v3 = v11;
    *(void *)(v3 + 8) = v13;
    *(_WORD *)(v3 + 16) = result;
    goto LABEL_10;
  }
LABEL_20:
  __int16 result = swift_bridgeObjectRelease(a1);
LABEL_21:
  *(_OWORD *)uint64_t v3 = 0;
  *(_WORD *)(v3 + 16) = 0;
  *(unsigned char *)(v3 + 18) = 1;
  return result;
}

Swift::tuple_ratio_Double_seed_Int __swiftcall MLSplitStrategy.resolve(count:)(Swift::Int count)
{
  if (*(unsigned char *)(v1 + 17))
  {
    Swift::Int v2 = 1;
    double v3 = 0.0;
    if (count >= 50) {
      double v3 = dbl_348EB0[(unint64_t)count < 0xC8];
    }
  }
  else
  {
    if (*(unsigned char *)(v1 + 16)) {
      Swift::Int v2 = 1;
    }
    else {
      Swift::Int v2 = *(void *)(v1 + 8);
    }
    double v3 = *(double *)v1;
  }
  result.ratio = v3;
  result.seed = v2;
  return result;
}

uint64_t __swift_memcpy18_8(uint64_t a1, uint64_t a2)
{
  uint64_t result = a1;
  *(_WORD *)(a1 + 16) = *(_WORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  return result;
}

uint64_t getEnumTagSinglePayload for MLSplitStrategy(uint64_t a1, int a2)
{
  uint64_t result = 0;
  if (a2)
  {
    if (*(unsigned char *)(a1 + 18)) {
      return (*(_DWORD *)a1 + 1);
    }
  }
  return result;
}

void storeEnumTagSinglePayload for MLSplitStrategy(uint64_t a1, int a2, int a3)
{
  if (!a2)
  {
    if (!a3) {
      return;
    }
    char v3 = 0;
    goto LABEL_6;
  }
  *(_WORD *)(a1 + 16) = 0;
  *(_OWORD *)a1 = 0;
  *(_DWORD *)a1 = a2 - 1;
  char v3 = 1;
  if (a3) {
LABEL_6:
  }
    *(unsigned char *)(a1 + 18) = v3;
}

uint64_t getEnumTag for MLSplitStrategy(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 17)) {
    return (*(_DWORD *)a1 + 1);
  }
  else {
    return 0;
  }
}

char destructiveInjectEnumTag for MLSplitStrategy(uint64_t a1, int a2)
{
  if (a2)
  {
    *(void *)(a1 + 8) = 0;
    *(void *)a1 = (a2 - 1);
    *(unsigned char *)(a1 + 16) = 0;
    char result = 1;
  }
  else
  {
    char result = 0;
  }
  *(unsigned char *)(a1 + 17) = result;
  return result;
}

ValueMetadata *type metadata accessor for MLSplitStrategy()
{
  return &type metadata for MLSplitStrategy;
}

uint64_t _sSq3mapyqd_0_Sgqd_0_xqd__YKXEqd__YKs5ErrorRd__Ri_d_0_r0_lF11TabularData0D5FrameV_s5NeverOSay8CreateML13MLRecommenderV10IdentifierOGTg5(void (*a1)(uint64_t *), uint64_t a2)
{
  uint64_t v19 = v2;
  uint64_t v18 = a2;
  uint64_t v17 = a1;
  uint64_t v4 = type metadata accessor for DataFrame(0);
  uint64_t v16 = *(void *)(v4 - 8);
  int64_t v5 = *(void *)(v16 + 64);
  uint64_t v6 = alloca(v5);
  uint64_t v7 = alloca(v5);
  uint64_t v20 = &v15;
  int64_t v8 = *(void *)(*(void *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for DataFrame?)
                             - 8)
                 + 64);
  uint64_t v9 = alloca(v8);
  char v10 = alloca(v8);
  outlined init with copy of Either<LogisticRegressionClassifier<Float, String>, FullyConnectedNetworkClassifier<Float, String>>(v3, (uint64_t)&v15, &demangling cache variable for type metadata for DataFrame?);
  if (__swift_getEnumTagSinglePayload((uint64_t)&v15, 1, v4) == 1) {
    return 0;
  }
  unsigned __int8 v12 = v20;
  uint64_t v13 = v16;
  (*(void (**)(uint64_t *, uint64_t *, uint64_t))(v16 + 32))(v20, &v15, v4);
  uint64_t v14 = v19;
  v17(v12);
  if (v14) {
    return (*(uint64_t (**)(uint64_t *, uint64_t))(v13 + 8))(v20, v4);
  }
  (*(void (**)(uint64_t *, uint64_t))(v13 + 8))(v20, v4);
  return v15;
}

void *_sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSay8CreateML11InteractionVG_Si_Sdts5NeverOTg503_s8d71ML16RecommenderModelV12similarItems9itemIndex5countSaySi_SdtGSi_SitFSi_q4AA11F44VXEfU1_AA13MLRecommenderV10IdentifierO_AMTG5AF0jK0VyAF0Y0V10IdentifierOARGTf1cn_n(uint64_t a1, uint64_t *a2, double a3, double a4)
{
  int64_t v4 = *(void *)(a1 + 16);
  if (v4)
  {
    uint64_t v14 = *(void *)(a1 + 16);
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v4, 0);
    uint64_t v15 = a2[10];
    uint64_t v16 = a2[11];
    uint64_t v17 = *(void (**)(uint64_t, uint64_t))(v16 + 8);
    int64_t v5 = (double *)(a1 + 40);
    do
    {
      uint64_t v13 = *((void *)v5 - 1);
      v6.f64[0] = *v5;
      __m128d v12 = (__m128d)*(unint64_t *)v5;
      v17(v15, v16);
      unint64_t v7 = _swiftEmptyArrayStorage[2];
      unint64_t v8 = v7 + 1;
      if (_swiftEmptyArrayStorage[3] >> 1 <= v7)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(_swiftEmptyArrayStorage[3] >= 2uLL, v7 + 1, 1);
        unint64_t v8 = v7 + 1;
      }
      a4 = fmin(a4, v12.f64[0]);
      double v9 = _mm_cmplt_sd(v12, v6).f64[0];
      _swiftEmptyArrayStorage[2] = v8;
      uint64_t v10 = 2 * v7;
      _swiftEmptyArrayStorage[v10 + 4] = v13;
      _swiftEmptyArrayStorage[v10 + 5] = ~*(void *)&v9 & *(void *)&a4 | *(void *)&v6.f64[0] & *(void *)&v9;
      v5 += 2;
      --v14;
    }
    while (v14);
  }
  outlined release of RecommenderModel<MLRecommender.Identifier, MLRecommender.Identifier>(a2);
  return _swiftEmptyArrayStorage;
}

void *_sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSaySi_SitG_Sis5NeverOTg5080_s8CreateML16RecommenderModelV21buildNewUserSeedItems5count12ratingCountsySi_Sayp51GtFS2i_Sit_tcfu_33_39c69c9f4ee04694167b65f5fa330960p1_tP10Tf3nnnpk_nTf1cn_n(uint64_t a1)
{
  int64_t v1 = *(void *)(a1 + 16);
  if (!v1) {
    return _swiftEmptyArrayStorage;
  }
  specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v1, 0);
  char result = _swiftEmptyArrayStorage;
  uint64_t v3 = (uint64_t *)(a1 + 32);
  do
  {
    uint64_t v4 = *v3;
    unint64_t v7 = result;
    unint64_t v5 = result[2];
    int64_t v6 = v5 + 1;
    if (result[3] >> 1 <= v5)
    {
      specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(result[3] >= 2uLL, v6, 1);
      int64_t v6 = v5 + 1;
      char result = v7;
    }
    result[2] = v6;
    result[v5 + 4] = v4;
    v3 += 2;
    --v1;
  }
  while (v1);
  return result;
}

void *_sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSay8CreateML13MLRecommenderV10IdentifierO_AJSd5scoretG_Si_SiSdAKtsAE_pTg503_s8d148ML11RecommenderV21buildInteractionTable_12nearestItemsAA0e6LookupF0VAA0C12TrainingDataVyxq_G_Sayq__q_Sd5scoretGSgtKFSi_SiSdAKtq__q_SdAKt_tKXEfU_AA13f3V10G27O_AqA16CosineSimilarityVTG5AF0kvW0VyA2JGTf1cn_nTm(uint64_t a1, uint64_t *a2)
{
  uint64_t v3 = v2;
  int64_t v4 = *(void *)(a1 + 16);
  if (v4)
  {
    uint64_t v35 = a2;
    uint64_t v32 = _swiftEmptyArrayStorage;
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v4, 0);
    unint64_t v5 = _swiftEmptyArrayStorage;
    int64_t v6 = (void *)(a1 + 80);
    while (1)
    {
      uint64_t v36 = v3;
      int64_t v25 = v4;
      uint64_t v27 = v5;
      uint64_t v7 = *(v6 - 6);
      uint64_t v8 = *(v6 - 5);
      LODWORD(v34) = *((_DWORD *)v6 - 8);
      unint64_t v5 = (void *)*(v6 - 3);
      uint64_t v9 = *(v6 - 2);
      LODWORD(v37) = *((_DWORD *)v6 - 2);
      uint64_t v26 = v6;
      uint64_t v33 = *v6;
      outlined copy of MLRecommender.Identifier(v7, v8, v34);
      outlined copy of MLRecommender.Identifier((uint64_t)v5, v9, v37);
      uint64_t v31 = v7;
      v19[0] = v7;
      uint64_t v30 = v8;
      v19[1] = v8;
      char v10 = v34;
      char v20 = v34 & 1;
      uint64_t v29 = v5;
      uint64_t v21 = v5;
      uint64_t v28 = v9;
      uint64_t v22 = v9;
      char v11 = v37;
      char v23 = v37 & 1;
      uint64_t v12 = v33;
      uint64_t v24 = v33;
      uint64_t v13 = v36;
      unint64_t v14 = specialized closure #1 in Recommender.buildInteractionTable(_:nearestItems:)((uint64_t)v19, (uint64_t)v35);
      uint64_t v36 = v13;
      if (v13) {
        break;
      }
      uint64_t v34 = v12;
      uint64_t v33 = v15;
      unint64_t v37 = v14;
      outlined consume of MLRecommender.Identifier(v31, v30, v10);
      outlined consume of MLRecommender.Identifier((uint64_t)v29, v28, v11);
      unint64_t v5 = v27;
      uint64_t v32 = v27;
      unint64_t v16 = v27[2];
      if (v27[3] >> 1 <= v16)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v27[3] >= 2uLL, v16 + 1, 1);
        unint64_t v5 = v32;
      }
      _OWORD v5[2] = v16 + 1;
      uint64_t v17 = 3 * v16;
      v5[v17 + 4] = v37;
      v5[v17 + 5] = v33;
      v5[v17 + 6] = v34;
      int64_t v6 = v26 + 7;
      int64_t v4 = v25 - 1;
      uint64_t v3 = v36;
      if (v25 == 1)
      {
        outlined release of RecommenderTrainingData<MLRecommender.Identifier, MLRecommender.Identifier>(v35);
        return v5;
      }
    }
    outlined consume of MLRecommender.Identifier(v31, v30, v10);
    outlined consume of MLRecommender.Identifier((uint64_t)v29, v28, v11);
    swift_release();
    outlined release of RecommenderTrainingData<MLRecommender.Identifier, MLRecommender.Identifier>(v35);
  }
  else
  {
    outlined release of RecommenderTrainingData<MLRecommender.Identifier, MLRecommender.Identifier>(a2);
    return _swiftEmptyArrayStorage;
  }
  return v5;
}

void *_sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lF13LinearAlgebra12SparseMatrixV15MajorCollectionVySd_G_Sis5NeverOTg50127_s8CreateML21ItemSimilarityTrainerV03getC21CountThresholdForUser8itemInfo0K4ListSiSayAA0C10StatisticsVy0C5ScoreQzGG_qd__tSlRd__z5_Sdt7b56Rtd__lFS2i_Sdt_tcfu0_33_39c69c9f4ee04694167b65f5fa330960z4_SdtZ10Tf3nnnpk_nTf1cn_nTm(void *a1)
{
  uint64_t v1 = a1[6];
  if (v1 < 0) {
    BUG();
  }
  uint64_t v2 = a1[3];
  unint64_t v3 = *(void *)(v2 + 16);
  if (v1 >= v3) {
    BUG();
  }
  if (v1 + 1 >= v3) {
    BUG();
  }
  uint64_t v4 = *(void *)(v2 + 8 * v1 + 40);
  BOOL v5 = __OFSUB__(v4, *(void *)(v2 + 8 * v1 + 32));
  uint64_t v6 = v4 - *(void *)(v2 + 8 * v1 + 32);
  if (v5) {
    BUG();
  }
  if (!v6) {
    return _swiftEmptyArrayStorage;
  }
  uint64_t v21 = a1[4];
  uint64_t v23 = a1[5];
  int64_t v7 = 0;
  if (v6 > 0) {
    int64_t v7 = v6;
  }
  specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v7, 0);
  if (v6 < 0) {
    BUG();
  }
  uint64_t v8 = *(void *)(v2 + 8 * v1 + 32);
  char result = _swiftEmptyArrayStorage;
  uint64_t v10 = *(void *)(v23 + 16);
  uint64_t v11 = *(void *)(v21 + 16);
  uint64_t v12 = v8;
  uint64_t v13 = v21;
  do
  {
    if (v6-- == 0) {
      BUG();
    }
    if (v8 < 0) {
      BUG();
    }
    if (v12 >= v11) {
      BUG();
    }
    if (v12 >= v10) {
      BUG();
    }
    uint64_t v15 = *(int *)(v13 + 4 * v12 + 32);
    uint64_t v22 = result;
    unint64_t v16 = result[2];
    int64_t v17 = v16 + 1;
    if (result[3] >> 1 <= v16)
    {
      uint64_t v18 = v10;
      uint64_t v19 = v11;
      uint64_t v20 = *(int *)(v13 + 4 * v12 + 32);
      specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(result[3] >= 2uLL, v17, 1);
      int64_t v17 = v16 + 1;
      uint64_t v15 = v20;
      uint64_t v11 = v19;
      uint64_t v10 = v18;
      uint64_t v13 = v21;
      char result = v22;
    }
    result[2] = v17;
    result[v16 + 4] = v15;
    ++v12;
  }
  while (v6);
  return result;
}

void *_sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSay8CreateML14RecommendationVyAF13MLRecommenderV10IdentifierOALGG_ALs5NeverOTg503_s8d4ML13g136V15recommendations9fromUsers8maxCount18restrictingToItems9excluding0L8ObservedAA11MLDataTableVSayAA12MLIdentifier_pG_SiAMSgAKSgSbtKFAC10h5OAA14F59VyA2QGcfu0_33_7b0562fa90875ac3238718c5c70eced2AtQTf3nnnpk_nTf1cn_nTm(uint64_t a1)
{
  int64_t v1 = *(void *)(a1 + 16);
  if (v1)
  {
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v1, 0);
    uint64_t v2 = (_DWORD *)(a1 + 48);
    do
    {
      int64_t v8 = v1;
      int v3 = *v2;
      uint64_t v9 = *((void *)v2 - 2);
      uint64_t v10 = *((void *)v2 - 1);
      outlined copy of MLRecommender.Identifier(v9, v10, *v2);
      unint64_t v4 = _swiftEmptyArrayStorage[2];
      int64_t v5 = v4 + 1;
      if (_swiftEmptyArrayStorage[3] >> 1 <= v4)
      {
        unint64_t v11 = _swiftEmptyArrayStorage[2];
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(_swiftEmptyArrayStorage[3] >= 2uLL, v5, 1);
        unint64_t v4 = v11;
      }
      _swiftEmptyArrayStorage[2] = v5;
      uint64_t v6 = 3 * v4;
      _swiftEmptyArrayStorage[v6 + 4] = v9;
      _swiftEmptyArrayStorage[v6 + 5] = v10;
      LOBYTE(_swiftEmptyArrayStorage[v6 + 6]) = v3 & 1;
      v2 += 16;
      int64_t v1 = v8 - 1;
    }
    while (v8 != 1);
  }
  return _swiftEmptyArrayStorage;
}

void *_sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSay8CreateML14RecommendationVyAF13MLRecommenderV10IdentifierOALGG_ALs5NeverOTg503_s8d4ML13g136V15recommendations9fromUsers8maxCount18restrictingToItems9excluding0L8ObservedAA11MLDataTableVSayAA12MLIdentifier_pG_SiAMSgAKSgSbtKFAC10h5OAA14F58VyA2QGcfu2_32d1e1b7ed5e9e4cd3ca03cf5b44db102cAtQTf3nnnpk_nTf1cn_nTm(uint64_t a1)
{
  int64_t v1 = *(void *)(a1 + 16);
  if (v1)
  {
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v1, 0);
    uint64_t v2 = (_DWORD *)(a1 + 72);
    do
    {
      int64_t v8 = v1;
      int v3 = *v2;
      uint64_t v9 = *((void *)v2 - 2);
      uint64_t v10 = *((void *)v2 - 1);
      outlined copy of MLRecommender.Identifier(v9, v10, *v2);
      unint64_t v4 = _swiftEmptyArrayStorage[2];
      int64_t v5 = v4 + 1;
      if (_swiftEmptyArrayStorage[3] >> 1 <= v4)
      {
        unint64_t v11 = _swiftEmptyArrayStorage[2];
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(_swiftEmptyArrayStorage[3] >= 2uLL, v5, 1);
        unint64_t v4 = v11;
      }
      _swiftEmptyArrayStorage[2] = v5;
      uint64_t v6 = 3 * v4;
      _swiftEmptyArrayStorage[v6 + 4] = v9;
      _swiftEmptyArrayStorage[v6 + 5] = v10;
      LOBYTE(_swiftEmptyArrayStorage[v6 + 6]) = v3 & 1;
      v2 += 16;
      int64_t v1 = v8 - 1;
    }
    while (v8 != 1);
  }
  return _swiftEmptyArrayStorage;
}

void *_sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSay8CreateML14RecommendationVyAF13MLRecommenderV10IdentifierOALGG_Sds5NeverOTg503_s8d4ML13g138V15recommendations9fromUsers8maxCount18restrictingToItems9excluding0L8ObservedAA11MLDataTableVSayAA12MLIdentifier_pG_SiAMSgAKSgSbtKFSdAA14f6VyAC10H57OASGcfu4_32ba0ef4f5a3599e9812b06a0e93fdc0a1ATSdTf3nnnpk_nTf1cn_n(uint64_t a1)
{
  int64_t v1 = *(void *)(a1 + 16);
  if (!v1) {
    return _swiftEmptyArrayStorage;
  }
  specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v1, 0);
  char result = _swiftEmptyArrayStorage;
  int v3 = (uint64_t *)(a1 + 80);
  do
  {
    uint64_t v4 = *v3;
    int64_t v7 = result;
    unint64_t v5 = result[2];
    int64_t v6 = v5 + 1;
    if (result[3] >> 1 <= v5)
    {
      specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(result[3] >= 2uLL, v6, 1);
      int64_t v6 = v5 + 1;
      char result = v7;
    }
    result[2] = v6;
    result[v5 + 4] = v4;
    v3 += 8;
    --v1;
  }
  while (v1);
  return result;
}

void *_sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSay8CreateML14RecommendationVyAF13MLRecommenderV10IdentifierOALGG_Sis5NeverOTg503_s8d4ML13g138V15recommendations9fromUsers8maxCount18restrictingToItems9excluding0L8ObservedAA11MLDataTableVSayAA12MLIdentifier_pG_SiAMSgAKSgSbtKFSiAA14f6VyAC10H58OASGcfu5_33_4d997128bfdac600b62536b5ddbe07b5ATSiTf3nnnpk_nTf1cn_n(uint64_t a1)
{
  int64_t v1 = *(void *)(a1 + 16);
  if (!v1) {
    return _swiftEmptyArrayStorage;
  }
  specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v1, 0);
  char result = _swiftEmptyArrayStorage;
  int v3 = (uint64_t *)(a1 + 88);
  do
  {
    uint64_t v4 = *v3;
    int64_t v7 = result;
    unint64_t v5 = result[2];
    int64_t v6 = v5 + 1;
    if (result[3] >> 1 <= v5)
    {
      specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(result[3] >= 2uLL, v6, 1);
      int64_t v6 = v5 + 1;
      char result = v7;
    }
    result[2] = v6;
    result[v5 + 4] = v4;
    v3 += 8;
    --v1;
  }
  while (v1);
  return result;
}

uint64_t _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lF(void (*a1)(unsigned char *, unsigned char *), uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, int a7, uint64_t a8)
{
  uint64_t v63 = v8;
  uint64_t v10 = v9;
  uint64_t v13 = a3;
  uint64_t v46 = a2;
  uint64_t v47 = a1;
  uint64_t v53 = a5;
  uint64_t v54 = *(void *)(a5 - 8);
  int64_t v14 = *(void *)(v54 + 64);
  uint64_t v15 = alloca(v14);
  unint64_t v16 = alloca(v14);
  uint64_t v56 = v45;
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness(0, *(void *)(a6 + 8), a3, &protocol requirements base descriptor for Sequence, &associated type descriptor for Sequence.Element);
  uint64_t v59 = *(void *)(AssociatedTypeWitness - 8);
  int64_t v17 = *(void *)(v59 + 64);
  uint64_t v18 = alloca(v17);
  uint64_t v19 = alloca(v17);
  uint64_t v49 = v45;
  uint64_t v65 = a4;
  int64_t v20 = *(void *)(*(void *)(a4 - 8) + 64);
  uint64_t v21 = alloca(v20);
  uint64_t v22 = alloca(v20);
  uint64_t v50 = v45;
  uint64_t v60 = swift_getAssociatedTypeWitness(0, a6, v13, &protocol requirements base descriptor for Collection, &associated type descriptor for Collection.Index);
  uint64_t v57 = *(void *)(v60 - 8);
  int64_t v23 = *(void *)(v57 + 64);
  uint64_t v24 = alloca(v23);
  int64_t v25 = alloca(v23);
  uint64_t v55 = v45;
  uint64_t v26 = alloca(v23);
  uint64_t v27 = alloca(v23);
  uint64_t v64 = v45;
  uint64_t v61 = a6;
  Swift::Int v28 = dispatch thunk of Collection.count.getter(v13, a6);
  if (!v28) {
    return static Array._allocateUninitialized(_:)(0, v65);
  }
  uint64_t v29 = v65;
  Swift::Int v62 = v28;
  uint64_t v58 = ContiguousArray.init()(v65);
  uint64_t v65 = type metadata accessor for ContiguousArray(0, v29);
  ContiguousArray.reserveCapacity(_:)(v62);
  dispatch thunk of Collection.startIndex.getter(v13, v61);
  Swift::Int v30 = v62;
  if (v62 < 0) {
    BUG();
  }
  uint64_t v31 = v64;
  uint64_t v51 = v13;
  uint64_t v52 = v10;
  while (1)
  {
    BOOL v32 = v30 == 0;
    Swift::Int v33 = v30 - 1;
    if (v32) {
      BUG();
    }
    Swift::Int v62 = v33;
    uint64_t v34 = (void (*)(unsigned char *, void))dispatch thunk of Collection.subscript.read(v45, v31, v13, v61);
    uint64_t v35 = v49;
    uint64_t v36 = AssociatedTypeWitness;
    (*(void (**)(unsigned char *, uint64_t, uint64_t))(v59 + 16))(v49, v37, AssociatedTypeWitness);
    v34(v45, 0);
    uint64_t v38 = v50;
    uint64_t v39 = v63;
    v47(v35, v56);
    if (v39) {
      break;
    }
    uint64_t v63 = 0;
    (*(void (**)(unsigned char *, uint64_t))(v59 + 8))(v35, v36);
    ContiguousArray.append(_:)(v38, v65);
    uint64_t v31 = v64;
    uint64_t v40 = v52;
    uint64_t v13 = v51;
    dispatch thunk of Collection.formIndex(after:)(v64, v51, v61);
    Swift::Int v30 = v62;
    if (!v62)
    {
      uint64_t v41 = v31;
      uint64_t v42 = v55;
      uint64_t v43 = v57;
      (*(void (**)(unsigned char *, unsigned char *, uint64_t))(v57 + 32))(v55, v41, v60);
      _expectEnd<A>(of:is:)(v40, v42, v13, v61);
      (*(void (**)(unsigned char *, uint64_t))(v43 + 8))(v42, v60);
      return v58;
    }
  }
  (*(void (**)(unsigned char *, uint64_t))(v59 + 8))(v35, v36);
  (*(void (**)(unsigned char *, uint64_t))(v57 + 8))(v64, v60);
  swift_release(v58);
  return (*(uint64_t (**)(uint64_t, unsigned char *, uint64_t))(v54 + 32))(a8, v56, v53);
}

void *_sSTsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFs12Zip2SequenceVySay8CreateML13MLRecommenderV10IdentifierOGAMG_AL4user_AL4itemts5NeverOTg503_s8f4ML13h3V10i35OA3EIgggoo_AE_AEtAE4user_AE4itemts5L188OIegnrzr_TR03_s8a4ML13c126V8evaluate2on10userColumn04itemG006ratingG07cutoffs17excludingObservedAA0C7MetricsV11TabularData0O5FrameV_S3SSgSaySiGSbtKFAC10D23O0F0_AS0H0tAS_AStXEfU3_Tf3nnnpf_nTf1cn_n(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = a1;
  unint64_t v3 = *(void *)(a1 + 16);
  unint64_t v41 = v3;
  unint64_t v36 = *(void *)(a2 + 16);
  if (v36 < v3) {
    unint64_t v3 = *(void *)(a2 + 16);
  }
  specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v3, 0);
  unint64_t v39 = v3;
  uint64_t v4 = _swiftEmptyArrayStorage;
  if (v3)
  {
    swift_bridgeObjectRetain(a1);
    swift_bridgeObjectRetain(a2);
    uint64_t v5 = 48;
    uint64_t v6 = 0;
    unint64_t v7 = v41;
    do
    {
      if (v7 == v6) {
        BUG();
      }
      if (v36 == v6) {
        BUG();
      }
      uint64_t v33 = v6;
      uint64_t v8 = *(void *)(v2 + v5 - 16);
      uint64_t v9 = *(void *)(v2 + v5 - 8);
      char v10 = *(unsigned char *)(v2 + v5);
      uint64_t v31 = v4;
      uint64_t v11 = *(void *)(a2 + v5 - 16);
      uint64_t v12 = *(void *)(a2 + v5 - 8);
      char v13 = *(unsigned char *)(a2 + v5);
      char v34 = v10;
      uint64_t v38 = v8;
      outlined copy of MLRecommender.Identifier(v8, v9, v10);
      uint64_t v30 = v11;
      uint64_t v14 = v11;
      uint64_t v4 = v31;
      char v42 = v13;
      outlined copy of MLRecommender.Identifier(v14, v12, v13);
      unint64_t v15 = v31[2];
      unint64_t v16 = v31[3];
      if (v16 >> 1 <= v15)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v16 >= 2, v15 + 1, 1);
        uint64_t v4 = v31;
      }
      uint64_t v6 = v33 + 1;
      v4[2] = v15 + 1;
      uint64_t v17 = 6 * v15;
      v4[v17 + 4] = v38;
      v4[v17 + 5] = v9;
      LOBYTE(v4[v17 + 6]) = v34 & 1;
      v4[v17 + 7] = v30;
      v4[v17 + 8] = v12;
      LOBYTE(v4[v17 + 9]) = v42 & 1;
      v5 += 24;
      unint64_t v18 = v39;
      uint64_t v2 = a1;
      unint64_t v7 = v41;
    }
    while (v39 != v33 + 1);
  }
  else
  {
    swift_bridgeObjectRetain(a1);
    swift_bridgeObjectRetain(a2);
    unint64_t v18 = 0;
    unint64_t v7 = v41;
  }
  if (v7 > v36)
  {
    uint64_t v19 = 24 * v18 + 48;
    do
    {
      if (v18 >= v7) {
        BUG();
      }
      if (v36 == v18) {
        break;
      }
      if (v36 <= v18) {
        BUG();
      }
      unint64_t v40 = v18;
      uint64_t v20 = *(void *)(v2 + v19 - 16);
      uint64_t v21 = *(void *)(v2 + v19 - 8);
      char v22 = *(unsigned char *)(v2 + v19);
      uint64_t v23 = *(void *)(a2 + v19 - 16);
      uint64_t v35 = *(void *)(a2 + v19 - 8);
      char v24 = *(unsigned char *)(a2 + v19);
      char v32 = v22;
      outlined copy of MLRecommender.Identifier(v20, v21, v22);
      char v43 = v24;
      outlined copy of MLRecommender.Identifier(v23, v35, v24);
      unint64_t v25 = v4[2];
      unint64_t v26 = v25 + 1;
      if (v4[3] >> 1 <= v25)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v4[3] >= 2uLL, v25 + 1, 1);
        unint64_t v26 = v25 + 1;
      }
      unint64_t v18 = v40 + 1;
      v4[2] = v26;
      uint64_t v27 = 6 * v25;
      v4[v27 + 4] = v20;
      v4[v27 + 5] = v21;
      LOBYTE(v4[v27 + 6]) = v32 & 1;
      v4[v27 + 7] = v23;
      v4[v27 + 8] = v35;
      LOBYTE(v4[v27 + 9]) = v43 & 1;
      v19 += 24;
      unint64_t v7 = v41;
      uint64_t v2 = a1;
    }
    while (v41 != v40 + 1);
  }
  swift_bridgeObjectRelease(a2);
  swift_bridgeObjectRelease(v2);
  return v4;
}

void *_sSTsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSay8CreateML13MLRecommenderV10IdentifierO4user_AJ4itemtG_AJs5NeverOTg503_s8d99ML16RecommenderModelV7metrics8expected9predicted7cutoffsSayAA21RecommendationMetricsVyxGGqd___qd_0_p10SiGtSTRd__y19_0_x4user_q_4itemt7b48Rtd__xAM_q_ANtAORtd_0_r0_lFZxxAM_q_ANt_tcfu_AA13f3V10g36O_AUSayAuM_AuNtGs15LazyMapSequenceVyP24AA0I0VyA2UGGAuM_AuNtGTG5s7KeyPathCyAjK_AjLtAJGTf1cn_n(uint64_t a1, uint64_t a2)
{
  uint64_t v37 = a2;
  int64_t v2 = *(void *)(a1 + 16);
  uint64_t v38 = _swiftEmptyArrayStorage;
  specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v2, 0);
  unint64_t v3 = _swiftEmptyArrayStorage;
  uint64_t v34 = a1;
  if (v2)
  {
    swift_bridgeObjectRetain(a1);
    uint64_t v4 = (unsigned __int8 *)(a1 + 72);
    do
    {
      uint64_t v31 = v3;
      int64_t v30 = v2;
      uint64_t v5 = *((void *)v4 - 5);
      uint64_t v36 = *((void *)v4 - 4);
      uint64_t v6 = *((void *)v4 - 2);
      uint64_t v7 = *((void *)v4 - 1);
      int v39 = *(v4 - 24);
      LODWORD(v40) = *v4;
      v23[0] = v5;
      v23[1] = v36;
      char v24 = v39;
      uint64_t v25 = v6;
      uint64_t v26 = v7;
      *(void *)&long long v35 = v7;
      char v27 = v40;
      uint64_t v32 = v5;
      outlined copy of MLRecommender.Identifier(v5, v36, v39);
      uint64_t v33 = v6;
      uint64_t v8 = v7;
      LOBYTE(v7) = v40;
      outlined copy of MLRecommender.Identifier(v6, v8, v40);
      uint64_t v9 = v5;
      uint64_t v10 = v36;
      outlined copy of MLRecommender.Identifier(v9, v36, v39);
      outlined copy of MLRecommender.Identifier(v6, v35, v7);
      swift_getAtKeyPath(v23, v37);
      uint64_t v11 = v32;
      uint64_t v12 = v10;
      LOBYTE(v10) = v39;
      outlined consume of MLRecommender.Identifier(v32, v12, v39);
      uint64_t v13 = v6;
      uint64_t v14 = v35;
      outlined consume of MLRecommender.Identifier(v13, v35, v40);
      uint64_t v15 = v11;
      unint64_t v3 = v31;
      outlined consume of MLRecommender.Identifier(v15, v36, v10);
      outlined consume of MLRecommender.Identifier(v33, v14, v40);
      long long v16 = v28;
      char v17 = v29;
      uint64_t v38 = v3;
      unint64_t v18 = v3[2];
      unint64_t v19 = v3[3];
      unint64_t v20 = v18 + 1;
      if (v19 >> 1 <= v18)
      {
        unint64_t v40 = v18 + 1;
        long long v35 = v28;
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v19 >= 2, v18 + 1, 1);
        unint64_t v20 = v40;
        long long v16 = v35;
        unint64_t v3 = v38;
      }
      v3[2] = v20;
      uint64_t v21 = 3 * v18;
      *(_OWORD *)&v3[v21 + 4] = v16;
      LOBYTE(v3[v21 + 6]) = v17 & 1;
      v4 += 48;
      int64_t v2 = v30 - 1;
    }
    while (v30 != 1);
  }
  else
  {
    swift_bridgeObjectRetain(a1);
  }
  swift_release();
  swift_bridgeObjectRelease(v34);
  return v3;
}

void *specialized _arrayForceCast<A, B>(_:)(uint64_t a1)
{
  uint64_t v12 = a1;
  int64_t v1 = *(void *)(a1 + 16);
  if (!v1) {
    return _swiftEmptyArrayStorage;
  }
  uint64_t v14 = _swiftEmptyArrayStorage;
  uint64_t v2 = 0;
  specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v1, 0);
  unint64_t v3 = _swiftEmptyArrayStorage;
  int64_t v13 = v1;
  do
  {
    uint64_t v4 = *(void *)(v12 + 8 * v2 + 32);
    uint64_t v10 = v4;
    swift_bridgeObjectRetain_n(v4, 2);
    uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [(key: MLDataValue, value: MLDataValue)]?);
    uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [(MLDataValue, MLDataValue)]?);
    swift_dynamicCast(&v9, &v10, v5, v6, 7);
    uint64_t v11 = v9;
    swift_bridgeObjectRelease(v4);
    if (!swift_isUniquelyReferenced_nonNull_native(v3))
    {
      specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v3[2] + 1, 1);
      unint64_t v3 = v14;
    }
    unint64_t v7 = v3[2];
    if (v3[3] >> 1 <= v7)
    {
      specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v3[3] >= 2uLL, v7 + 1, 1);
      unint64_t v3 = v14;
    }
    ++v2;
    v3[2] = v7 + 1;
    v3[v7 + 4] = v11;
  }
  while (v13 != v2);
  return v3;
}

{
  int64_t v1;
  uint64_t v2;
  void *v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  long long v8;
  void *v9;
  void *v10;
  uint64_t v11;
  int64_t v12;
  uint64_t v13;
  void *v14;

  uint64_t v11 = a1;
  int64_t v1 = *(void *)(a1 + 16);
  if (!v1) {
    return _swiftEmptyArrayStorage;
  }
  uint64_t v14 = _swiftEmptyArrayStorage;
  uint64_t v2 = 0;
  specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v1, 0);
  unint64_t v3 = _swiftEmptyArrayStorage;
  uint64_t v12 = v1;
  do
  {
    uint64_t v4 = *(void *)(v11 + 8 * v2 + 32);
    uint64_t v14 = v3;
    uint64_t v5 = v3[2];
    uint64_t v6 = v3[3];
    if (v6 >> 1 <= v5)
    {
      int64_t v13 = v4;
      specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v6 >= 2, v5 + 1, 1);
      uint64_t v4 = v13;
      unint64_t v3 = v14;
    }
    ++v2;
    uint64_t v9 = &type metadata for Double;
    uint64_t v10 = &protocol witness table for Double;
    *(void *)&uint64_t v8 = v4;
    v3[2] = v5 + 1;
    outlined init with take of MLIdentifier(&v8, (uint64_t)&v3[5 * v5 + 4]);
  }
  while (v12 != v2);
  return v3;
}

{
  int64_t v1;
  long long *v2;
  void *v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  long long v9;
  long long v10;
  long long v11;
  void *v12;

  int64_t v1 = *(void *)(a1 + 16);
  if (!v1) {
    return _swiftEmptyArrayStorage;
  }
  uint64_t v12 = _swiftEmptyArrayStorage;
  specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v1, 0);
  uint64_t v2 = (long long *)(a1 + 32);
  unint64_t v3 = _swiftEmptyArrayStorage;
  do
  {
    uint64_t v10 = *v2;
    uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Double, Double));
    uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (precision: Double, recall: Double));
    swift_dynamicCast(&v9, &v10, v4, v5, 7);
    uint64_t v11 = v9;
    if (!swift_isUniquelyReferenced_nonNull_native(v3))
    {
      specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v3[2] + 1, 1);
      unint64_t v3 = v12;
    }
    uint64_t v6 = v3[2];
    unint64_t v7 = v6 + 1;
    if (v3[3] >> 1 <= v6)
    {
      specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v3[3] >= 2uLL, v6 + 1, 1);
      unint64_t v7 = v6 + 1;
      unint64_t v3 = v12;
    }
    v3[2] = v7;
    *(_OWORD *)&v3[2 * v6 + 4] = v11;
    ++v2;
    --v1;
  }
  while (v1);
  return v3;
}

{
  int64_t v1;
  void *v2;
  void *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char v7;
  uint64_t v8;
  uint64_t v9;
  char v10;
  char v11;
  unint64_t v12;
  uint64_t v13;
  long long v15;
  char v16;
  uint64_t v17;
  long long v18;
  void v19[2];
  char v20;
  uint64_t v21;
  int64_t v22;
  void *v23;
  uint64_t v24;
  void *v25;

  int64_t v1 = *(void *)(a1 + 16);
  if (!v1) {
    return _swiftEmptyArrayStorage;
  }
  uint64_t v25 = _swiftEmptyArrayStorage;
  specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v1, 0);
  uint64_t v2 = _swiftEmptyArrayStorage;
  unint64_t v3 = (void *)(a1 + 56);
  do
  {
    uint64_t v23 = v2;
    char v22 = v1;
    uint64_t v4 = *(v3 - 3);
    uint64_t v5 = *(v3 - 2);
    uint64_t v6 = *v3;
    unint64_t v7 = *((unsigned char *)v3 - 8);
    v19[0] = v4;
    v19[1] = v5;
    unint64_t v20 = v7;
    uint64_t v21 = v6;
    outlined copy of MLRecommender.Identifier(v4, v5, v7);
    outlined copy of MLRecommender.Identifier(v4, v5, v7);
    uint64_t v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (MLRecommender.Identifier, score: Double));
    uint64_t v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (item: MLRecommender.Identifier, score: Double));
    swift_dynamicCast(&v15, v19, v8, v9, 7);
    unint64_t v18 = v15;
    uint64_t v10 = v16;
    char v24 = v17;
    uint64_t v11 = v7;
    uint64_t v2 = v23;
    outlined consume of MLRecommender.Identifier(v4, v5, v11);
    if (!swift_isUniquelyReferenced_nonNull_native(v2))
    {
      specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v2[2] + 1, 1);
      uint64_t v2 = v25;
    }
    uint64_t v12 = v2[2];
    if (v2[3] >> 1 <= v12)
    {
      specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v2[3] >= 2uLL, v12 + 1, 1);
      uint64_t v2 = v25;
    }
    v2[2] = v12 + 1;
    int64_t v13 = 4 * v12;
    *(_OWORD *)&v2[v13 + 4] = v18;
    LOBYTE(v2[v13 + 6]) = v10 & 1;
    v2[v13 + 7] = v24;
    v3 += 4;
    int64_t v1 = v22 - 1;
  }
  while (v22 != 1);
  return v2;
}

{
  int64_t v1;
  void *v2;
  uint64_t *v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  long long v8;
  void *v9;
  _UNKNOWN **v10;
  long long v11;
  unint64_t v12;
  int64_t v13;
  void *v14;

  int64_t v1 = *(void *)(a1 + 16);
  if (!v1) {
    return _swiftEmptyArrayStorage;
  }
  uint64_t v14 = _swiftEmptyArrayStorage;
  specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v1, 0);
  uint64_t v2 = _swiftEmptyArrayStorage;
  unint64_t v3 = (uint64_t *)(a1 + 40);
  do
  {
    *(void *)&uint64_t v11 = *(v3 - 1);
    uint64_t v4 = *v3;
    uint64_t v14 = v2;
    uint64_t v5 = v2[2];
    uint64_t v12 = v2[3];
    uint64_t v6 = v12 >> 1;
    int64_t v13 = v5 + 1;
    *((void *)&v11 + 1) = v4;
    swift_bridgeObjectRetain(v4);
    if (v6 <= v5)
    {
      specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v12 >= 2, v13, 1);
      uint64_t v2 = v14;
    }
    uint64_t v9 = &type metadata for String;
    uint64_t v10 = &protocol witness table for String;
    uint64_t v8 = v11;
    v2[2] = v13;
    outlined init with take of MLIdentifier(&v8, (uint64_t)&v2[5 * v5 + 4]);
    v3 += 2;
    --v1;
  }
  while (v1);
  return v2;
}

{
  int64_t v1;
  uint64_t v2;
  void *v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  long long v9;
  void *v10;
  _UNKNOWN **v11;
  uint64_t v12;
  int64_t v13;
  void *v14;

  uint64_t v12 = a1;
  int64_t v1 = *(void *)(a1 + 16);
  if (!v1) {
    return _swiftEmptyArrayStorage;
  }
  uint64_t v14 = _swiftEmptyArrayStorage;
  uint64_t v2 = 0;
  specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v1, 0);
  unint64_t v3 = _swiftEmptyArrayStorage;
  int64_t v13 = v1;
  do
  {
    uint64_t v4 = *(void *)(v12 + 8 * v2 + 32);
    uint64_t v14 = v3;
    uint64_t v5 = v3[2];
    uint64_t v6 = v3[3];
    if (v6 >> 1 <= v5)
    {
      unint64_t v7 = v4;
      specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v6 >= 2, v5 + 1, 1);
      uint64_t v4 = v7;
      unint64_t v3 = v14;
    }
    ++v2;
    uint64_t v10 = &type metadata for Int;
    uint64_t v11 = &protocol witness table for Int;
    *(void *)&uint64_t v9 = v4;
    v3[2] = v5 + 1;
    outlined init with take of MLIdentifier(&v9, (uint64_t)&v3[5 * v5 + 4]);
  }
  while (v13 != v2);
  return v3;
}

{
  int64_t v1;
  void *v2;
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  void v11[3];
  void v12[3];
  int64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  void *v17;

  int64_t v1 = *(void *)(a1 + 16);
  if (!v1) {
    return _swiftEmptyArrayStorage;
  }
  char v17 = _swiftEmptyArrayStorage;
  specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v1, 0);
  uint64_t v2 = _swiftEmptyArrayStorage;
  unint64_t v3 = (uint64_t *)(a1 + 48);
  do
  {
    int64_t v13 = v1;
    uint64_t v4 = *(v3 - 1);
    uint64_t v5 = *v3;
    v12[0] = *(v3 - 2);
    v12[1] = v4;
    v12[2] = v5;
    swift_bridgeObjectRetain_n(v4, 2);
    uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (String, Double));
    unint64_t v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (text: String, distance: Double));
    swift_dynamicCast(v11, v12, v6, v7, 7);
    uint64_t v14 = v11[0];
    uint64_t v15 = v11[1];
    long long v16 = v11[2];
    swift_bridgeObjectRelease(v4);
    if (!swift_isUniquelyReferenced_nonNull_native(v2))
    {
      specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v2[2] + 1, 1);
      uint64_t v2 = v17;
    }
    uint64_t v8 = v2[2];
    if (v2[3] >> 1 <= v8)
    {
      specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v2[3] >= 2uLL, v8 + 1, 1);
      uint64_t v2 = v17;
    }
    v2[2] = v8 + 1;
    uint64_t v9 = 3 * v8;
    v2[v9 + 4] = v14;
    v2[v9 + 5] = v15;
    v2[v9 + 6] = v16;
    v3 += 3;
    int64_t v1 = v13 - 1;
  }
  while (v13 != 1);
  return v2;
}

{
  int64_t v1;
  void *v2;
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  void v12[4];
  void v13[4];
  int64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  void *v19;

  int64_t v1 = *(void *)(a1 + 16);
  if (!v1) {
    return _swiftEmptyArrayStorage;
  }
  unint64_t v19 = _swiftEmptyArrayStorage;
  specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v1, 0);
  uint64_t v2 = _swiftEmptyArrayStorage;
  unint64_t v3 = (uint64_t *)(a1 + 56);
  do
  {
    uint64_t v14 = v1;
    uint64_t v4 = *(v3 - 2);
    uint64_t v5 = *(v3 - 1);
    uint64_t v6 = *v3;
    v13[0] = *(v3 - 3);
    v13[1] = v4;
    void v13[2] = v5;
    v13[3] = v6;
    swift_bridgeObjectRetain_n(v4, 2);
    swift_bridgeObjectRetain_n(v6, 2);
    unint64_t v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (String, String));
    uint64_t v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (text: String, label: String));
    swift_dynamicCast(v12, v13, v7, v8, 7);
    uint64_t v15 = v12[0];
    long long v16 = v12[1];
    char v17 = v12[2];
    unint64_t v18 = v12[3];
    swift_bridgeObjectRelease(v6);
    swift_bridgeObjectRelease(v4);
    if (!swift_isUniquelyReferenced_nonNull_native(v2))
    {
      specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v2[2] + 1, 1);
      uint64_t v2 = v19;
    }
    uint64_t v9 = v2[2];
    if (v2[3] >> 1 <= v9)
    {
      specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v2[3] >= 2uLL, v9 + 1, 1);
      uint64_t v2 = v19;
    }
    v2[2] = v9 + 1;
    uint64_t v10 = 4 * v9;
    v2[v10 + 4] = v15;
    v2[v10 + 5] = v16;
    v2[v10 + 6] = v17;
    v2[v10 + 7] = v18;
    v3 += 4;
    int64_t v1 = v14 - 1;
  }
  while (v14 != 1);
  return v2;
}

{
  int64_t v1;
  void *v2;
  uint64_t v3;
  unsigned char *v4;
  unsigned char *v5;
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  unsigned char v10[32];
  void *v11;

  int64_t v1 = *(void *)(a1 + 16);
  if (!v1) {
    return _swiftEmptyArrayStorage;
  }
  uint64_t v11 = _swiftEmptyArrayStorage;
  specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v1, 0);
  uint64_t v2 = _swiftEmptyArrayStorage;
  unint64_t v3 = a1 + 32;
  uint64_t v4 = v10;
  do
  {
    outlined init with copy of Either<LogisticRegressionClassifier<Float, String>, FullyConnectedNetworkClassifier<Float, String>>(v3, (uint64_t)v4, &demangling cache variable for type metadata for Any?);
    uint64_t v11 = v2;
    uint64_t v5 = v4;
    uint64_t v6 = v2[2];
    unint64_t v7 = v6 + 1;
    if (v2[3] >> 1 <= v6)
    {
      specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v2[3] >= 2uLL, v7, 1);
      uint64_t v5 = v10;
      uint64_t v2 = v11;
    }
    v2[2] = v7;
    uint64_t v8 = (uint64_t)&v2[4 * v6 + 4];
    uint64_t v4 = v5;
    outlined init with take of Any?((uint64_t)v5, v8);
    v3 += 32;
    --v1;
  }
  while (v1);
  return v2;
}

{
  int64_t v1;
  uint64_t v2;
  void *v3;
  uint64_t v4;
  unint64_t v5;
  unsigned char v7[32];
  uint64_t v8;
  int64_t v9;
  void *v10;
  _DWORD v11[11];

  uint64_t v8 = a1;
  int64_t v1 = *(void *)(a1 + 16);
  if (!v1) {
    return _swiftEmptyArrayStorage;
  }
  uint64_t v10 = _swiftEmptyArrayStorage;
  uint64_t v2 = 0;
  specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v1, 0);
  unint64_t v3 = _swiftEmptyArrayStorage;
  uint64_t v9 = v1;
  do
  {
    v11[0] = *(_DWORD *)(v8 + 4 * v2 + 32);
    uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Any?);
    swift_dynamicCast(v7, v11, &type metadata for Float, v4, 7);
    if (!swift_isUniquelyReferenced_nonNull_native(v3))
    {
      specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v3[2] + 1, 1);
      unint64_t v3 = v10;
    }
    uint64_t v5 = v3[2];
    if (v3[3] >> 1 <= v5)
    {
      specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v3[3] >= 2uLL, v5 + 1, 1);
      unint64_t v3 = v10;
    }
    ++v2;
    v3[2] = v5 + 1;
    outlined init with take of Any?((uint64_t)v7, (uint64_t)&v3[4 * v5 + 4]);
  }
  while (v9 != v2);
  return v3;
}

{
  int64_t v1;
  uint64_t v2;
  void *v3;
  uint64_t v4;
  unint64_t v5;
  unsigned char v7[32];
  uint64_t v8;
  uint64_t v9;
  int64_t v10;
  void *v11;

  uint64_t v9 = a1;
  int64_t v1 = *(void *)(a1 + 16);
  if (!v1) {
    return _swiftEmptyArrayStorage;
  }
  uint64_t v11 = _swiftEmptyArrayStorage;
  uint64_t v2 = 0;
  specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v1, 0);
  unint64_t v3 = _swiftEmptyArrayStorage;
  uint64_t v10 = v1;
  do
  {
    uint64_t v8 = *(void *)(v9 + 8 * v2 + 32);
    uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Any?);
    swift_dynamicCast(v7, &v8, &type metadata for Double, v4, 7);
    if (!swift_isUniquelyReferenced_nonNull_native(v3))
    {
      specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v3[2] + 1, 1);
      unint64_t v3 = v11;
    }
    uint64_t v5 = v3[2];
    if (v3[3] >> 1 <= v5)
    {
      specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v3[3] >= 2uLL, v5 + 1, 1);
      unint64_t v3 = v11;
    }
    ++v2;
    v3[2] = v5 + 1;
    outlined init with take of Any?((uint64_t)v7, (uint64_t)&v3[4 * v5 + 4]);
  }
  while (v10 != v2);
  return v3;
}

{
  int64_t v1;
  uint64_t v2;
  void *v3;
  uint64_t v4;
  unint64_t v5;
  unsigned char v7[32];
  uint64_t v8;
  int64_t v9;
  void *v10;
  _DWORD v11[11];

  uint64_t v8 = a1;
  int64_t v1 = *(void *)(a1 + 16);
  if (!v1) {
    return _swiftEmptyArrayStorage;
  }
  uint64_t v10 = _swiftEmptyArrayStorage;
  uint64_t v2 = 0;
  specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v1, 0);
  unint64_t v3 = _swiftEmptyArrayStorage;
  uint64_t v9 = v1;
  do
  {
    v11[0] = *(_DWORD *)(v8 + 4 * v2 + 32);
    uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Any?);
    swift_dynamicCast(v7, v11, &type metadata for Int32, v4, 7);
    if (!swift_isUniquelyReferenced_nonNull_native(v3))
    {
      specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v3[2] + 1, 1);
      unint64_t v3 = v10;
    }
    uint64_t v5 = v3[2];
    if (v3[3] >> 1 <= v5)
    {
      specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v3[3] >= 2uLL, v5 + 1, 1);
      unint64_t v3 = v10;
    }
    ++v2;
    v3[2] = v5 + 1;
    outlined init with take of Any?((uint64_t)v7, (uint64_t)&v3[4 * v5 + 4]);
  }
  while (v9 != v2);
  return v3;
}

{
  int64_t v1;
  uint64_t v2;
  void *v3;
  uint64_t v4;
  unint64_t v5;
  unsigned char v7[32];
  uint64_t v8;
  int64_t v9;
  void *v10;
  unsigned char v11[41];

  uint64_t v8 = a1;
  int64_t v1 = *(void *)(a1 + 16);
  if (!v1) {
    return _swiftEmptyArrayStorage;
  }
  uint64_t v10 = _swiftEmptyArrayStorage;
  uint64_t v2 = 0;
  specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v1, 0);
  unint64_t v3 = _swiftEmptyArrayStorage;
  uint64_t v9 = v1;
  do
  {
    v11[0] = *(unsigned char *)(v8 + v2 + 32);
    uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Any?);
    swift_dynamicCast(v7, v11, &type metadata for UInt8, v4, 7);
    if (!swift_isUniquelyReferenced_nonNull_native(v3))
    {
      specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v3[2] + 1, 1);
      unint64_t v3 = v10;
    }
    uint64_t v5 = v3[2];
    if (v3[3] >> 1 <= v5)
    {
      specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v3[3] >= 2uLL, v5 + 1, 1);
      unint64_t v3 = v10;
    }
    ++v2;
    v3[2] = v5 + 1;
    outlined init with take of Any?((uint64_t)v7, (uint64_t)&v3[4 * v5 + 4]);
  }
  while (v9 != v2);
  return v3;
}

{
  int64_t v1;
  uint64_t v2;
  void *v3;
  uint64_t v4;
  unint64_t v5;
  unsigned char v7[32];
  uint64_t v8;
  uint64_t v9;
  int64_t v10;
  void *v11;

  uint64_t v9 = a1;
  int64_t v1 = *(void *)(a1 + 16);
  if (!v1) {
    return _swiftEmptyArrayStorage;
  }
  uint64_t v11 = _swiftEmptyArrayStorage;
  uint64_t v2 = 0;
  specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v1, 0);
  unint64_t v3 = _swiftEmptyArrayStorage;
  uint64_t v10 = v1;
  do
  {
    uint64_t v8 = *(void *)(v9 + 8 * v2 + 32);
    uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Any?);
    swift_dynamicCast(v7, &v8, &type metadata for Int, v4, 7);
    if (!swift_isUniquelyReferenced_nonNull_native(v3))
    {
      specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v3[2] + 1, 1);
      unint64_t v3 = v11;
    }
    uint64_t v5 = v3[2];
    if (v3[3] >> 1 <= v5)
    {
      specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v3[3] >= 2uLL, v5 + 1, 1);
      unint64_t v3 = v11;
    }
    ++v2;
    v3[2] = v5 + 1;
    outlined init with take of Any?((uint64_t)v7, (uint64_t)&v3[4 * v5 + 4]);
  }
  while (v10 != v2);
  return v3;
}

{
  int64_t v1;
  void *v2;
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v7;
  unsigned char v9[32];
  void v10[2];
  int64_t v11;
  void *v12;

  int64_t v1 = *(void *)(a1 + 16);
  if (!v1) {
    return _swiftEmptyArrayStorage;
  }
  uint64_t v12 = _swiftEmptyArrayStorage;
  specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v1, 0);
  uint64_t v2 = _swiftEmptyArrayStorage;
  unint64_t v3 = (uint64_t *)(a1 + 40);
  do
  {
    uint64_t v4 = *v3;
    v10[0] = *(v3 - 1);
    v10[1] = v4;
    swift_bridgeObjectRetain(v4);
    uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Any?);
    swift_dynamicCast(v9, v10, &type metadata for String, v5, 7);
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v2);
    uint64_t v11 = v1;
    if (!isUniquelyReferenced_nonNull_native)
    {
      specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v2[2] + 1, 1);
      uint64_t v2 = v12;
    }
    unint64_t v7 = v2[2];
    if (v2[3] >> 1 <= v7)
    {
      specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v2[3] >= 2uLL, v7 + 1, 1);
      uint64_t v2 = v12;
    }
    v2[2] = v7 + 1;
    outlined init with take of Any?((uint64_t)v9, (uint64_t)&v2[4 * v7 + 4]);
    v3 += 2;
    int64_t v1 = v11 - 1;
  }
  while (v11 != 1);
  return v2;
}

char *specialized Sequence.compactMap<A>(_:)(uint64_t a1, uint64_t *a2)
{
  uint64_t v2 = a1;
  uint64_t v3 = 1 << *(unsigned char *)(a1 + 32);
  uint64_t v4 = ~(-1 << v3);
  if (v3 >= 64) {
    uint64_t v4 = -1;
  }
  unint64_t v5 = *(void *)(a1 + 56) & v4;
  int64_t v27 = (unint64_t)(v3 + 63) >> 6;
  swift_bridgeObjectRetain(a1);
  long long v28 = (char *)_swiftEmptyArrayStorage;
  int64_t v6 = 0;
  while (1)
  {
    if (v5)
    {
      _BitScanForward64(&v7, v5);
      v5 &= v5 - 1;
      unint64_t v8 = v7 | (v6 << 6);
      goto LABEL_17;
    }
    BOOL v9 = __OFADD__(1, v6);
    int64_t v10 = v6 + 1;
    if (v9) {
      BUG();
    }
    if (v10 >= v27) {
      break;
    }
    unint64_t i = *(void *)(v2 + 8 * v10 + 56);
    if (i)
    {
      int64_t v12 = v10;
    }
    else
    {
      int64_t v12 = v10 + 1;
      if (v10 + 1 >= v27) {
        break;
      }
      unint64_t i = *(void *)(v2 + 8 * v10 + 64);
      if (!i)
      {
        int64_t v12 = v10 + 2;
        if (v10 + 2 >= v27) {
          break;
        }
        unint64_t i = *(void *)(v2 + 8 * v10 + 72);
        if (!i)
        {
          int64_t v12 = v10 + 3;
          if (v10 + 3 >= v27) {
            break;
          }
          unint64_t i = *(void *)(v2 + 8 * v10 + 80);
          if (!i)
          {
            int64_t v12 = v10 + 4;
            if (v10 + 4 >= v27) {
              break;
            }
            for (unint64_t i = *(void *)(v2 + 8 * v10 + 88); !i; unint64_t i = *(void *)(v2 + 8 * v12 + 56))
            {
              BOOL v9 = __OFADD__(1, v12++);
              if (v9) {
                BUG();
              }
              if (v12 >= v27) {
                goto LABEL_32;
              }
            }
          }
        }
      }
    }
    _BitScanForward64(&v13, i);
    unint64_t v5 = i & (i - 1);
    unint64_t v8 = v13 + (v12 << 6);
    int64_t v6 = v12;
LABEL_17:
    uint64_t v14 = a2[3];
    if (*(void *)(v14 + 16))
    {
      unint64_t v26 = v5;
      int64_t v25 = v6;
      uint64_t v15 = *(void *)(v2 + 48);
      uint64_t v16 = 24 * v8;
      Swift::UInt v17 = *(void *)(v15 + v16);
      uint64_t v18 = *(void *)(v15 + v16 + 8);
      char v19 = *(unsigned char *)(v15 + v16 + 16);
      outlined copy of MLRecommender.Identifier(v17, v18, v19);
      unint64_t v20 = specialized __RawDictionaryStorage.find<A>(_:)(v17, v18, v19);
      if (v21)
      {
        uint64_t v22 = *(void *)(*(void *)(v14 + 56) + 8 * v20);
        outlined consume of MLRecommender.Identifier(v17, v18, v19);
        if (!swift_isUniquelyReferenced_nonNull_native(v28)) {
          long long v28 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *((void *)v28 + 2) + 1, 1, (uint64_t)v28);
        }
        unint64_t v23 = *((void *)v28 + 2);
        if (*((void *)v28 + 3) >> 1 <= v23) {
          long long v28 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(*((void *)v28 + 3) >= 2uLL, v23 + 1, 1, (uint64_t)v28);
        }
        *((void *)v28 + 2) = v23 + 1;
        *(void *)&v28[8 * v23 + 32] = v22;
      }
      else
      {
        outlined consume of MLRecommender.Identifier(v17, v18, v19);
      }
      uint64_t v2 = a1;
      int64_t v6 = v25;
      unint64_t v5 = v26;
    }
  }
LABEL_32:
  swift_release();
  outlined release of RecommenderTrainingData<MLRecommender.Identifier, MLRecommender.Identifier>(a2);
  return v28;
}

void *specialized RecommenderModel.similarItems(itemIndex:count:)(uint64_t a1, uint64_t a2, double a3, double a4)
{
  uint64_t v5 = v4[13];
  if (!v5) {
    BUG();
  }
  uint64_t v7 = v4[12];
  if (v7 <= a1) {
    return _swiftEmptyArrayStorage;
  }
  uint64_t v8 = InteractionLookupTable.interactionsFor(_:)(a1, v7, v5, v4[14]);
  uint64_t v12 = v11;
  BOOL v13 = __OFSUB__(v10 >> 1, v11);
  uint64_t v14 = (v10 >> 1) - v11;
  if (v13) {
    BUG();
  }
  uint64_t v15 = v9;
  unint64_t v16 = v10;
  if (v14 <= a2)
  {
    uint64_t v20 = v8;
    swift_unknownObjectRetain(v8);
    uint64_t v23 = v20;
    uint64_t v22 = specialized ArraySlice._copyToContiguousArray()(v20, v15, v12, v16);
    specialized MutableCollection<>.sort(by:)((uint64_t *)&v22, (uint64_t (*)(uint64_t))specialized _ContiguousArrayBuffer._consumeAndCreateNew(), (uint64_t (*)(void))specialized UnsafeMutableBufferPointer._stableSortImpl(by:));
    uint64_t v18 = v22;
    uint64_t v17 = v23;
  }
  else
  {
    uint64_t v17 = v8;
    uint64_t v18 = specialized Collection.min(count:sortedBy:)(a2, v8, v9, v12, v10);
  }
  outlined retain of RecommenderModel<MLRecommender.Identifier, MLRecommender.Identifier>(v4);
  ML11InteractionVG_Si_Sdts5NeverOTg503_s8d71ML16RecommenderModelV12similarItems9itemIndex5countSaySi_SdtGSi_SitFSi_q4AA11F44VXEfU1_AA13MLRecommenderV10IdentifierO_AMTG5AF0jK0VyAF0Y0V10IdentifierOARGTf1cn_n = _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSay8CreateML11InteractionVG_Si_Sdts5NeverOTg503_s8d71ML16RecommenderModelV12similarItems9itemIndex5countSaySi_SdtGSi_SitFSi_q4AA11F44VXEfU1_AA13MLRecommenderV10IdentifierO_AMTG5AF0jK0VyAF0Y0V10IdentifierOARGTf1cn_n((uint64_t)v18, v4, a3, a4);
  swift_bridgeObjectRelease((_BYTE)v18);
  swift_unknownObjectRelease(v17);
  return ML11InteractionVG_Si_Sdts5NeverOTg503_s8d71ML16RecommenderModelV12similarItems9itemIndex5countSaySi_SdtGSi_SitFSi_q4AA11F44VXEfU1_AA13MLRecommenderV10IdentifierO_AMTG5AF0jK0VyAF0Y0V10IdentifierOARGTf1cn_n;
}

id MLRecommender.model.getter()
{
  return *(id *)(v0 + 152);
}

void key path setter for MLRecommender.model : MLRecommender(id *a1)
{
  id v1 = *a1;
  MLRecommender.model.setter((uint64_t)v1);
}

void MLRecommender.model.setter(uint64_t a1)
{
  *(void *)(v1 + 152) = a1;
}

void (*MLRecommender.model.modify(void *a1))(uint64_t a1, char a2)
{
  a1[1] = v1;
  uint64_t v3 = *(void **)(v1 + 152);
  *a1 = v3;
  v3;
  return MLRecommender.model.modify;
}

void MLRecommender.model.modify(uint64_t a1, char a2)
{
  id v2 = *(id *)a1;
  uint64_t v3 = *(void *)(a1 + 8);
  uint64_t v4 = *(void **)(v3 + 152);
  if (a2)
  {
    id v5 = *(id *)a1;

    *(void *)(v3 + 152) = v5;
  }
  else
  {

    *(void *)(v3 + 152) = v2;
  }
}

uint64_t MLRecommender.userIdentifierColumn.getter()
{
  uint64_t v1 = *(void *)(v0 + 160);
  swift_bridgeObjectRetain(*(void *)(v0 + 168));
  return v1;
}

uint64_t MLRecommender.userIdentifierColumn.setter(uint64_t a1, uint64_t a2)
{
  uint64_t result = swift_bridgeObjectRelease(*(void *)(v2 + 168));
  *(void *)(v2 + 160) = a1;
  *(void *)(v2 + 168) = a2;
  return result;
}

void (*MLRecommender.userIdentifierColumn.modify())()
{
  return MLBoostedTreeRegressor.ModelParameters.maxDepth.modify;
}

uint64_t MLRecommender.itemIdentifierColumn.getter()
{
  uint64_t v1 = *(void *)(v0 + 176);
  swift_bridgeObjectRetain(*(void *)(v0 + 184));
  return v1;
}

uint64_t MLRecommender.itemIdentifierColumn.setter(uint64_t a1, uint64_t a2)
{
  uint64_t result = swift_bridgeObjectRelease(*(void *)(v2 + 184));
  *(void *)(v2 + 176) = a1;
  *(void *)(v2 + 184) = a2;
  return result;
}

void (*MLRecommender.itemIdentifierColumn.modify())()
{
  return MLBoostedTreeRegressor.ModelParameters.maxDepth.modify;
}

uint64_t MLRecommender.ratingColumn.getter()
{
  uint64_t v1 = *(void *)(v0 + 192);
  swift_bridgeObjectRetain(*(void *)(v0 + 200));
  return v1;
}

uint64_t MLRecommender.ratingColumn.setter(uint64_t a1, uint64_t a2)
{
  uint64_t result = swift_bridgeObjectRelease(*(void *)(v2 + 200));
  *(void *)(v2 + 192) = a1;
  *(void *)(v2 + 200) = a2;
  return result;
}

void (*MLRecommender.ratingColumn.modify())()
{
  return MLBoostedTreeRegressor.ModelParameters.maxDepth.modify;
}

uint64_t MLRecommender.modelParameters.getter()
{
  uint64_t v2 = v0;
  uint64_t v3 = type metadata accessor for MLRecommender(0);
  return outlined init with copy of MLRecommender.ModelParameters(v1 + *(int *)(v3 + 36), v2);
}

uint64_t type metadata accessor for MLRecommender(uint64_t a1)
{
  uint64_t result = type metadata singleton initialization cache for MLRecommender;
  if (!type metadata singleton initialization cache for MLRecommender) {
    return swift_getSingletonMetadata(a1, &nominal type descriptor for MLRecommender);
  }
  return result;
}

uint64_t outlined init with copy of MLRecommender.ModelParameters(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = type metadata accessor for MLRecommender.ModelParameters(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v2 - 8) + 16))(a2, a1, v2);
  return a2;
}

uint64_t MLRecommender.init(trainingData:userColumn:itemColumn:ratingColumn:parameters:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, void *a6, void *a7, unsigned char *a8)
{
  v190._uint64_t countAndFlagsBits = a4;
  uint64_t v11 = v8;
  uint64_t v205 = v9;
  v186._char object = a6;
  *(void *)&long long v199 = a5;
  uint64_t v206 = a1;
  uint64_t v178 = type metadata accessor for ModelKind(0);
  uint64_t v177 = *(void *)(v178 - 8);
  int64_t v12 = *(void *)(v177 + 64);
  BOOL v13 = alloca(v12);
  uint64_t v14 = alloca(v12);
  long long v179 = v168;
  uint64_t v184 = type metadata accessor for Model(0);
  uint64_t v175 = *(void *)(v184 - 8);
  int64_t v15 = *(void *)(v175 + 64);
  unint64_t v16 = alloca(v15);
  uint64_t v17 = alloca(v15);
  uint64_t v181 = v168;
  int64_t v176 = v15;
  uint64_t v18 = alloca(v15);
  char v19 = alloca(v15);
  uint64_t v185 = v168;
  uint64_t v200 = type metadata accessor for DataFrame(0);
  uint64_t v202 = *(void *)(v200 - 8);
  int64_t v20 = *(void *)(v202 + 64);
  char v21 = alloca(v20);
  uint64_t v22 = alloca(v20);
  int64_t v194 = v168;
  int64_t v23 = *(void *)(*(void *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for DataFrame?)
                              - 8)
                  + 64);
  char v24 = alloca(v23);
  int64_t v25 = alloca(v23);
  uint64_t v189 = v168;
  unint64_t v26 = alloca(v23);
  int64_t v27 = alloca(v23);
  uint64_t v195 = v168;
  uint64_t v201 = type metadata accessor for AnyColumn(0);
  uint64_t v187 = *(void *)(v201 - 8);
  int64_t v28 = *(void *)(v187 + 64);
  char v29 = alloca(v28);
  int64_t v30 = alloca(v28);
  unint64_t v188 = v168;
  uint64_t v31 = alloca(v28);
  uint64_t v32 = alloca(v28);
  char v193 = v168;
  __dst = v11;
  v11[12] = 0;
  __m128 v207 = (void (*)(unsigned char *, uint64_t))__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<String>);
  uint64_t inited = (void *)swift_initStackObject(v207, v171);
  inited[2] = 1;
  inited[3] = 2;
  v186._uint64_t countAndFlagsBits = a2;
  inited[4] = a2;
  inited[5] = a3;
  swift_bridgeObjectRetain(a3);
  DataFrame.validateContainsColumns(_:context:)((Swift::OpaquePointer)inited, (Swift::String)__PAIR128__(0xE400000000000000, 1919251285));
  if (v34)
  {
    swift_setDeallocating(inited);
    specialized _ContiguousArrayStorage.__deallocating_deinit();
    swift_bridgeObjectRelease(a3);
    swift_bridgeObjectRelease(v199);
    swift_bridgeObjectRelease((_BYTE)a7);
    outlined destroy of MLRecommender.ModelParameters((uint64_t)a8);
    (*(void (**)(uint64_t, uint64_t))(v202 + 8))(v206, v200);
    long long v35 = (id *)__dst;
    char v36 = 0;
    goto LABEL_17;
  }
  uint64_t v198 = (void *)a3;
  swift_setDeallocating(inited);
  specialized _ContiguousArrayStorage.__deallocating_deinit();
  uint64_t v37 = (void *)swift_initStackObject(v207, v172);
  v37[2] = 1;
  v37[3] = 2;
  v37[4] = v190._countAndFlagsBits;
  char v38 = v199;
  v37[5] = v199;
  swift_bridgeObjectRetain(v38);
  uint64_t v39 = v206;
  DataFrame.validateContainsColumns(_:context:)((Swift::OpaquePointer)v37, (Swift::String)__PAIR128__(0xE400000000000000, 1835365449));
  uint64_t v205 = v40;
  if (v40) {
    goto LABEL_4;
  }
  swift_setDeallocating(v37);
  specialized _ContiguousArrayStorage.__deallocating_deinit();
  if (a7)
  {
    uint64_t v37 = (void *)swift_initStackObject(v207, v173);
    v37[2] = 1;
    v37[3] = 2;
    char object = v186._object;
    v37[4] = v186._object;
    v37[5] = a7;
    swift_bridgeObjectRetain((_BYTE)a7);
    DataFrame.validateContainsColumns(_:context:)((Swift::OpaquePointer)v37, (Swift::String)__PAIR128__(0xE600000000000000, 0x676E69746152));
    uint64_t v205 = v42;
    if (v42)
    {
LABEL_4:
      char v36 = 0;
      swift_setDeallocating(v37);
      specialized _ContiguousArrayStorage.__deallocating_deinit();
      swift_bridgeObjectRelease((_BYTE)v198);
      swift_bridgeObjectRelease(v199);
      swift_bridgeObjectRelease((_BYTE)a7);
      outlined destroy of MLRecommender.ModelParameters((uint64_t)a8);
      (*(void (**)(uint64_t, uint64_t))(v202 + 8))(v39, v200);
      long long v35 = (id *)__dst;
      goto LABEL_17;
    }
    swift_setDeallocating(v37);
    specialized _ContiguousArrayStorage.__deallocating_deinit();
  }
  else
  {
    char object = v186._object;
  }
  char v43 = __dst;
  *((void *)__dst + 20) = v186._countAndFlagsBits;
  uint64_t v44 = v198;
  v43[21] = v198;
  v43[22] = v190._countAndFlagsBits;
  char v45 = v199;
  v43[23] = v199;
  v43[24] = object;
  v43[25] = a7;
  v190._char object = (void *)type metadata accessor for MLRecommender(0);
  uint64_t v180 = (uint64_t)v43 + *((int *)v190._object + 9);
  outlined init with copy of MLRecommender.ModelParameters((uint64_t)a8, v180);
  swift_bridgeObjectRetain((_BYTE)v44);
  swift_bridgeObjectRetain(v45);
  swift_bridgeObjectRetain((_BYTE)a7);
  uint64_t v46 = v193;
  DataFrame.subscript.getter(v186._countAndFlagsBits, v44);
  uint64_t v47 = v46;
  char v48 = static MLRecommender.extractIdentifiers(from:)();
  uint64_t v50 = v49;
  __m128 v207 = *(void (**)(unsigned char *, uint64_t))(v187 + 8);
  v207(v47, v201);
  uint64_t v196 = v50;
  if (!v50)
  {
    swift_bridgeObjectRelease((_BYTE)a7);
    swift_bridgeObjectRelease(v199);
    *(void *)uint64_t v174 = 0;
    *(void *)&v174[8] = 0xE000000000000000;
    _StringGuts.grow(_:)(82);
    v59._uint64_t countAndFlagsBits = 0x6C6F632072657355;
    v59._char object = (void *)0xED000027206E6D75;
    String.append(_:)(v59);
    uint64_t countAndFlagsBits = v186._countAndFlagsBits;
    v59._uint64_t countAndFlagsBits = v186._countAndFlagsBits;
    v59._char object = v44;
    String.append(_:)(v59);
    v59._char object = "com.apple.createml.version" + 0x8000000000000000;
    v59._uint64_t countAndFlagsBits = 0xD000000000000040;
    String.append(_:)(v59);
    DataFrame.subscript.getter(countAndFlagsBits, v44);
    swift_bridgeObjectRelease((_BYTE)v44);
    uint64_t v61 = AnyColumn.wrappedElementType.getter();
    Swift::Int v62 = v47;
LABEL_15:
    v207(v62, v201);
    v66._uint64_t countAndFlagsBits = _typeName(_:qualified:)(v61, 0);
    char v67 = (char)v66._object;
    String.append(_:)(v66);
    swift_bridgeObjectRelease(v67);
    v68._uint64_t countAndFlagsBits = 46;
    v68._char object = (void *)0xE100000000000000;
    String.append(_:)(v68);
    long long v199 = *(_OWORD *)v174;
    v68._char object = (void *)lazy protocol witness table accessor for type MLCreateError and conformance MLCreateError();
    swift_allocError(&type metadata for MLCreateError, v68._object, 0, 0);
    *(_OWORD *)uint64_t v69 = v199;
    *(_OWORD *)(v69 + 16) = 0;
    *(_OWORD *)(v69 + 32) = 0;
    *(unsigned char *)(v69 + 48) = 1;
    swift_willThrow(&type metadata for MLCreateError, v68._object, v69, v70, v71, v72);
    outlined destroy of MLRecommender.ModelParameters((uint64_t)a8);
    (*(void (**)(uint64_t, uint64_t))(v202 + 8))(v206, v200);
    long long v35 = (id *)__dst;
    goto LABEL_16;
  }
  *((unsigned char *)__dst + *((int *)v190._object + 10)) = v48 & 1;
  DataFrame.subscript.getter(v190._countAndFlagsBits, v199);
  char v51 = static MLRecommender.extractIdentifiers(from:)();
  uint64_t v53 = v52;
  v207(v47, v201);
  uint64_t v191 = v53;
  if (!v53)
  {
    swift_bridgeObjectRelease(v196);
    swift_bridgeObjectRelease((_BYTE)a7);
    swift_bridgeObjectRelease((_BYTE)v198);
    *(void *)uint64_t v174 = 0;
    *(void *)&v174[8] = 0xE000000000000000;
    _StringGuts.grow(_:)(82);
    v63._uint64_t countAndFlagsBits = 0x6C6F63206D657449;
    v63._char object = (void *)0xED000027206E6D75;
    String.append(_:)(v63);
    uint64_t v64 = v190._countAndFlagsBits;
    v63._uint64_t countAndFlagsBits = v190._countAndFlagsBits;
    uint64_t v65 = v199;
    v63._char object = (void *)v199;
    String.append(_:)(v63);
    v63._char object = "com.apple.createml.version" + 0x8000000000000000;
    v63._uint64_t countAndFlagsBits = 0xD000000000000040;
    String.append(_:)(v63);
    DataFrame.subscript.getter(v64, v65);
    swift_bridgeObjectRelease(v65);
    uint64_t v61 = AnyColumn.wrappedElementType.getter();
    Swift::Int v62 = v47;
    goto LABEL_15;
  }
  uint64_t v54 = (id *)__dst;
  *((unsigned char *)__dst + *((int *)v190._object + 11)) = v51 & 1;
  uint64_t v55 = (uint64_t)v188;
  DataFrame.subscript.getter(v190._countAndFlagsBits, v199);
  uint64_t v56 = v205;
  uint64_t v57 = static MLRecommender.extractNearestItems(itemColumn:parameters:)((uint64_t)v195, v55, (uint64_t)a8);
  uint64_t v205 = v56;
  if (!v56)
  {
    unint64_t v197 = v57;
    uint64_t v204 = v58;
    uint64_t v75 = v201;
    v207((unsigned char *)v55, v201);
    if (a7)
    {
      swift_bridgeObjectRetain((_BYTE)a7);
      uint64_t v76 = v193;
      DataFrame.subscript.getter(v186._object, a7);
      *(Swift::OpaquePointer_optional *)&long long v77 = AnyColumn.extractDoubles(fillValue:)(0.0);
      uint64_t v78 = (void *)v77;
      ((void (*)(unsigned char *, uint64_t, void))v207)(v76, v75, *((void *)&v77 + 1));
      int64_t v192 = v78;
      BOOL v79 = v78 == 0;
      char v80 = v199;
      if (v79)
      {
        swift_bridgeObjectRelease(v191);
        swift_bridgeObjectRelease(v196);
        swift_bridgeObjectRelease((_BYTE)a7);
        swift_bridgeObjectRelease(v80);
        swift_bridgeObjectRelease((_BYTE)v198);
        swift_bridgeObjectRelease(v197);
        swift_bridgeObjectRelease(v204);
        *(void *)uint64_t v174 = 0;
        *(void *)&v174[8] = 0xE000000000000000;
        _StringGuts.grow(_:)(92);
        v107._uint64_t countAndFlagsBits = 0x6320676E69746152;
        v107._char object = (void *)0xEF27206E6D756C6FLL;
        String.append(_:)(v107);
        size_t v108 = v186._object;
        v107._uint64_t countAndFlagsBits = (uint64_t)v186._object;
        v107._char object = a7;
        String.append(_:)(v107);
        v107._uint64_t countAndFlagsBits = 0xD000000000000048;
        v107._char object = "at, or Int but it contains " + 0x8000000000000000;
        String.append(_:)(v107);
        DataFrame.subscript.getter(v108, a7);
        swift_bridgeObjectRelease((_BYTE)a7);
        uint64_t v109 = AnyColumn.wrappedElementType.getter();
        v207(v76, v201);
        uint64_t v110 = _typeName(_:qualified:)(v109, 0);
        LOBYTE(v109) = (_BYTE)v111;
        v107._uint64_t countAndFlagsBits = v110;
        v107._char object = v111;
        String.append(_:)(v107);
        LOBYTE(v107._countAndFlagsBits) = v109;
        long long v35 = (id *)__dst;
        swift_bridgeObjectRelease(v107._countAndFlagsBits);
        v107._uint64_t countAndFlagsBits = 46;
        v107._char object = (void *)0xE100000000000000;
        String.append(_:)(v107);
        long long v199 = *(_OWORD *)v174;
        v107._char object = (void *)lazy protocol witness table accessor for type MLCreateError and conformance MLCreateError();
        swift_allocError(&type metadata for MLCreateError, v107._object, 0, 0);
        *(_OWORD *)uint64_t v112 = v199;
        *(_OWORD *)(v112 + 16) = 0;
        *(_OWORD *)(v112 + 32) = 0;
        *(unsigned char *)(v112 + 48) = 1;
        swift_willThrow(&type metadata for MLCreateError, v107._object, v112, v113, v114, v115);
        outlined destroy of MLRecommender.ModelParameters((uint64_t)a8);
        (*(void (**)(uint64_t, uint64_t))(v202 + 8))(v206, v200);
        goto LABEL_45;
      }
      swift_bridgeObjectRelease((_BYTE)a7);
      uint64_t v75 = v201;
    }
    else
    {
      int64_t v192 = specialized Array.init(repeating:count:)(*(void *)(v196 + 16), 1.0);
    }
    uint64_t v81 = (uint64_t)v189;
    outlined init with copy of Either<LogisticRegressionClassifier<Float, String>, FullyConnectedNetworkClassifier<Float, String>>((uint64_t)v195, (uint64_t)v189, &demangling cache variable for type metadata for DataFrame?);
    uint64_t v82 = v200;
    if (__swift_getEnumTagSinglePayload(v81, 1, v200) == 1)
    {
      outlined destroy of DataFrame?(v81);
      uint64_t v83 = 0;
      goto LABEL_28;
    }
    (*(void (**)(unsigned char *, uint64_t, uint64_t))(v202 + 32))(v194, v81, v82);
    uint64_t v84 = v193;
    DataFrame.subscript.getter(0x65726F6373, 0xE500000000000000);
    *(Swift::OpaquePointer_optional *)&long long v85 = AnyColumn.extractDoubles(fillValue:)(0.0);
    uint64_t v86 = v85;
    ((void (*)(unsigned char *, uint64_t, void))v207)(v84, v75, *((void *)&v85 + 1));
    if (v86)
    {
      uint64_t v83 = v86;
      uint64_t v82 = v200;
      (*(void (**)(unsigned char *, uint64_t))(v202 + 8))(v194, v200);
LABEL_28:
      char v87 = v197;
      uint64_t v88 = v196;
      if (v197)
      {
        if (!v204)
        {
          swift_bridgeObjectRelease(v197);
          char v116 = v83;
          goto LABEL_43;
        }
        if (v83)
        {
          uint64_t v182 = v83;
          unint64_t v89 = *(void *)(v83 + 16);
          uint64_t v90 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v89, 0, (uint64_t)_swiftEmptyArrayStorage);
          if (v89)
          {
            uint64_t v91 = v204;
            if (v89 > *(void *)(v197 + 16)) {
              BUG();
            }
            unint64_t v183 = v89;
            if (v89 > *(void *)(v204 + 16)) {
              BUG();
            }
            uint64_t v92 = 6;
            uint64_t v93 = 0;
            uint64_t v94 = (uint64_t)v90;
            do
            {
              uint64_t v95 = *(void *)(v197 + 8 * v92 - 16);
              uint64_t v96 = *(void *)(v197 + 8 * v92 - 8);
              int v97 = *(unsigned __int8 *)(v197 + 8 * v92);
              uint64_t v98 = *(unsigned char **)(v91 + 8 * v92 - 16);
              v190._char object = *(void **)(v91 + 8 * v92 - 8);
              int v99 = *(unsigned __int8 *)(v91 + 8 * v92);
              uint64_t v187 = v93;
              __m128 v207 = *(void (**)(unsigned char *, uint64_t))(v182 + 8 * v93 + 32);
              int64_t v194 = (unsigned char *)v95;
              uint64_t v189 = (unsigned char *)v96;
              LODWORD(v188) = v97;
              outlined copy of MLRecommender.Identifier(v95, v96, v97);
              char v193 = v98;
              uint64_t v100 = (uint64_t)v98;
              uint64_t v101 = v190._object;
              LODWORD(v201) = v99;
              outlined copy of MLRecommender.Identifier(v100, (uint64_t)v190._object, v99);
              unint64_t v102 = *(void *)(v94 + 16);
              int64_t v103 = v102 + 1;
              uint64_t v104 = (void *)v94;
              if (*(void *)(v94 + 24) >> 1 <= v102) {
                uint64_t v104 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(*(void *)(v94 + 24) >= 2uLL, v103, 1, v94);
              }
              unint64_t v105 = v183;
              uint64_t v93 = v187 + 1;
              v104[2] = v103;
              uint64_t v106 = 7 * v102;
              v104[v106 + 4] = v194;
              v104[v106 + 5] = v189;
              LOBYTE(v104[v106 + 6]) = v188 & 1;
              v104[v106 + 7] = v193;
              v104[v106 + 8] = v101;
              LOBYTE(v104[v106 + 9]) = v201 & 1;
              v104[v106 + 10] = v207;
              v92 += 3;
              uint64_t v94 = (uint64_t)v104;
              uint64_t v91 = v204;
            }
            while (v105 != v93);
          }
          else
          {
            uint64_t v94 = (uint64_t)v90;
            LOBYTE(v91) = v204;
          }
          uint64_t v204 = v94;
          swift_bridgeObjectRelease(v182);
          swift_bridgeObjectRelease(v91);
          swift_bridgeObjectRelease(v197);
          uint64_t v82 = v200;
          uint64_t v88 = v196;
LABEL_48:
          unint64_t v128 = *(void *)(v88 + 16);
          uint64_t v129 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v128, 0, (uint64_t)_swiftEmptyArrayStorage);
          if (v128)
          {
            if (v128 > *(void *)(v191 + 16)) {
              BUG();
            }
            unint64_t v197 = v128;
            if (v128 > v192[2]) {
              BUG();
            }
            uint64_t v130 = 6;
            uint64_t v131 = 0;
            uint64_t v132 = (uint64_t)v129;
            do
            {
              uint64_t v133 = *(void *)(v196 + 8 * v130 - 16);
              uint64_t v134 = *(void *)(v196 + 8 * v130 - 8);
              int v135 = *(unsigned __int8 *)(v196 + 8 * v130);
              id v136 = *(unsigned char **)(v191 + 8 * v130 - 16);
              v190._char object = *(void **)(v191 + 8 * v130 - 8);
              int v137 = *(unsigned __int8 *)(v191 + 8 * v130);
              uint64_t v187 = v131;
              __m128 v207 = (void (*)(unsigned char *, uint64_t))v192[v131 + 4];
              int64_t v194 = (unsigned char *)v133;
              uint64_t v189 = (unsigned char *)v134;
              LODWORD(v188) = v135;
              outlined copy of MLRecommender.Identifier(v133, v134, v135);
              char v193 = v136;
              uint64_t v138 = (uint64_t)v136;
              uint64_t v139 = v190._object;
              LODWORD(v201) = v137;
              outlined copy of MLRecommender.Identifier(v138, (uint64_t)v190._object, v137);
              unint64_t v140 = *(void *)(v132 + 16);
              int64_t v141 = v140 + 1;
              uint64_t v142 = (void *)v132;
              if (*(void *)(v132 + 24) >> 1 <= v140) {
                uint64_t v142 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(*(void *)(v132 + 24) >= 2uLL, v141, 1, v132);
              }
              unint64_t v143 = v197;
              uint64_t v131 = v187 + 1;
              v142[2] = v141;
              uint64_t v144 = 7 * v140;
              v142[v144 + 4] = v194;
              v142[v144 + 5] = v189;
              LOBYTE(v142[v144 + 6]) = v188 & 1;
              v142[v144 + 7] = v193;
              v142[v144 + 8] = v139;
              LOBYTE(v142[v144 + 9]) = v201 & 1;
              v142[v144 + 10] = v207;
              v130 += 3;
              uint64_t v132 = (uint64_t)v142;
            }
            while (v143 != v131);
            __m128 v207 = (void (*)(unsigned char *, uint64_t))v142;
            swift_bridgeObjectRelease(v196);
            swift_bridgeObjectRelease((_BYTE)v192);
            uint64_t v82 = v200;
          }
          else
          {
            __m128 v207 = (void (*)(unsigned char *, uint64_t))v129;
            swift_bridgeObjectRelease(v88);
            swift_bridgeObjectRelease((_BYTE)v192);
          }
          swift_bridgeObjectRelease(v191);
          uint64_t v145 = *(void *)(v180 + 16);
          double v146 = *(double *)(v180 + 8);
          if (*a8)
          {
            if (*a8 == 1)
            {
              p_src = &__src;
              char v148 = (char)v207;
              char v149 = v204;
              uint64_t v150 = v205;
              specialized Recommender.train(_:nearestItems:)((uint64_t)v207, v204, 50, v145, 4096, (char *)specialized Recommender.buildInteractionTable(_:nearestItems:), v146, &one-time initialization token for predictor, &static JaccardSimilarity.predictor, (uint64_t)one-time initialization function for predictor);
            }
            else
            {
              p_src = v168;
              char v148 = (char)v207;
              char v149 = v204;
              uint64_t v150 = v205;
              specialized Recommender.train(_:nearestItems:)((uint64_t)v207, v204, 50, v145, 4096, (char *)specialized Recommender.buildInteractionTable(_:nearestItems:), v146, &one-time initialization token for predictor, &static PearsonSimilarity.predictor, (uint64_t)one-time initialization function for predictor);
            }
          }
          else
          {
            p_src = &v170;
            char v148 = (char)v207;
            char v149 = v204;
            uint64_t v150 = v205;
            specialized Recommender.train(_:nearestItems:)((uint64_t)v207, v204, 50, v145, 4096, (char *)specialized Recommender.buildInteractionTable(_:nearestItems:), v146, &one-time initialization token for predictor, &static CosineSimilarity.predictor, (uint64_t)one-time initialization function for predictor);
          }
          uint64_t v205 = v150;
          if (v150)
          {
            swift_bridgeObjectRelease((_BYTE)v198);
            swift_bridgeObjectRelease(v199);
            swift_bridgeObjectRelease((_BYTE)a7);
            swift_bridgeObjectRelease(v148);
            swift_bridgeObjectRelease(v149);
            outlined destroy of MLRecommender.ModelParameters((uint64_t)a8);
            (*(void (**)(uint64_t, uint64_t))(v202 + 8))(v206, v82);
            outlined destroy of DataFrame?((uint64_t)v195);
            long long v35 = (id *)__dst;
          }
          else
          {
            swift_bridgeObjectRelease((_BYTE)v207);
            swift_bridgeObjectRelease(v204);
            uint64_t v151 = __dst;
            memcpy(__dst, p_src, 0x98uLL);
            id v152 = objc_allocWithZone((Class)MLModel);
            v151[19] = [v152 init];
            uint64_t v153 = v185;
            Model.init()();
            Model.specificationVersion.setter(4);
            uint64_t v154 = MLRecommender.buildInputs()();
            Model.inputs.setter(v154);
            uint64_t v155 = MLRecommender.buildOutputs()();
            Model.outputs.setter(v155);
            uint64_t v156 = v179;
            MLRecommender.buildRecommender()();
            (*(void (**)(unsigned char *, void, uint64_t))(v177 + 104))(v156, enum case for ModelKind.itemSimilarityRecommender(_:), v178);
            Model.kind.setter(v156);
            Model.modelDescription.setter(0xD000000000000021, " list if not given." + 0x8000000000000000);
            Swift::String v157 = getOSVersion()();
            uint64_t v201 = v157._countAndFlagsBits;
            uint64_t v158 = v157._object;
            __m128 v207 = (void (*)(unsigned char *, uint64_t))Model.metadata.modify(v174);
            specialized Dictionary._Variant.setValue(_:forKey:)(v201, (uint64_t)v158, 0xD00000000000001ALL, (uint64_t)("Recommender Model" + 0x8000000000000000));
            v207(v174, 0);
            uint64_t v159 = v184;
            uint64_t v160 = v175;
            (*(void (**)(unsigned char *, unsigned char *, uint64_t))(v175 + 16))(v181, v153, v184);
            uint64_t v161 = *(unsigned __int8 *)(v160 + 80);
            uint64_t v162 = ~*(unsigned __int8 *)(v160 + 80) & (v161 + 16);
            uint64_t v163 = swift_allocObject(&unk_3985E8, v162 + v176, v161 | 7);
            (*(void (**)(uint64_t, unsigned char *, uint64_t))(v160 + 32))(v163 + v162, v181, v159);
            uint64_t v164 = v205;
            specialized blockAwait<A>(_:)((uint64_t)&async function pointer to partial apply for closure #1 in MLRecommender.init(trainingData:userColumn:itemColumn:ratingColumn:parameters:), v163);
            if (!v164)
            {
              uint64_t v166 = v165;
              swift_release();
              uint64_t v167 = __dst;

              v167[19] = v166;
              LOBYTE(v167) = (_BYTE)v198;
              static MLRecommender.reportAnalytics(trainingData:userColumn:itemColumn:ratingColumn:parameters:)(v206, v186._countAndFlagsBits, (uint64_t)v198, v190._countAndFlagsBits, v199, (void (*)(uint64_t *, uint64_t))v186._object, (uint64_t)a7, (uint64_t)a8);
              swift_bridgeObjectRelease((_BYTE)v167);
              swift_bridgeObjectRelease(v199);
              swift_bridgeObjectRelease((_BYTE)a7);
              outlined destroy of MLRecommender.ModelParameters((uint64_t)a8);
              (*(void (**)(uint64_t, uint64_t))(v202 + 8))(v206, v200);
              (*(void (**)(unsigned char *, uint64_t))(v160 + 8))(v185, v184);
              return outlined destroy of DataFrame?((uint64_t)v195);
            }
            swift_bridgeObjectRelease((_BYTE)v198);
            swift_bridgeObjectRelease(v199);
            swift_bridgeObjectRelease((_BYTE)a7);
            swift_release();
            outlined destroy of MLRecommender.ModelParameters((uint64_t)a8);
            (*(void (**)(uint64_t, uint64_t))(v202 + 8))(v206, v200);
            (*(void (**)(unsigned char *, uint64_t))(v160 + 8))(v185, v184);
            outlined destroy of DataFrame?((uint64_t)v195);
            long long v35 = (id *)__dst;
            memcpy(v174, __dst, sizeof(v174));
            outlined release of RecommenderModel<MLRecommender.Identifier, MLRecommender.Identifier>((uint64_t *)v174);
          }
          goto LABEL_16;
        }
      }
      else
      {
        char v87 = v83;
      }
      swift_bridgeObjectRelease(v87);
      char v116 = v204;
LABEL_43:
      swift_bridgeObjectRelease(v116);
      uint64_t v204 = 0;
      goto LABEL_48;
    }
    swift_bridgeObjectRelease(v191);
    swift_bridgeObjectRelease(v196);
    swift_bridgeObjectRelease((_BYTE)a7);
    swift_bridgeObjectRelease(v199);
    swift_bridgeObjectRelease((_BYTE)v198);
    swift_bridgeObjectRelease((_BYTE)v192);
    swift_bridgeObjectRelease(v197);
    swift_bridgeObjectRelease(v204);
    uint64_t v117 = v193;
    *(void *)uint64_t v174 = 0;
    *(void *)&v174[8] = 0xE000000000000000;
    _StringGuts.grow(_:)(94);
    v118._uint64_t countAndFlagsBits = 0xD00000000000005BLL;
    v118._char object = "but it contains " + 0x8000000000000000;
    String.append(_:)(v118);
    DataFrame.subscript.getter(0x65726F6373, 0xE500000000000000);
    uint64_t v119 = AnyColumn.wrappedElementType.getter();
    v207(v117, v75);
    uint64_t v120 = _typeName(_:qualified:)(v119, 0);
    LOBYTE(v119) = (_BYTE)v121;
    v118._uint64_t countAndFlagsBits = v120;
    v118._char object = v121;
    String.append(_:)(v118);
    swift_bridgeObjectRelease(v119);
    v118._uint64_t countAndFlagsBits = 46;
    v118._char object = (void *)0xE100000000000000;
    String.append(_:)(v118);
    long long v199 = *(_OWORD *)v174;
    long long v35 = (id *)__dst;
    v118._char object = (void *)lazy protocol witness table accessor for type MLCreateError and conformance MLCreateError();
    swift_allocError(&type metadata for MLCreateError, v118._object, 0, 0);
    *(_OWORD *)uint64_t v122 = v199;
    *(_OWORD *)(v122 + 16) = 0;
    *(_OWORD *)(v122 + 32) = 0;
    *(unsigned char *)(v122 + 48) = 1;
    swift_willThrow(&type metadata for MLCreateError, v118._object, v122, v123, v124, v125);
    outlined destroy of MLRecommender.ModelParameters((uint64_t)a8);
    uint64_t v126 = *(void (**)(uint64_t, uint64_t))(v202 + 8);
    uint64_t v127 = v200;
    v126(v206, v200);
    v126((uint64_t)v194, v127);
LABEL_45:
    outlined destroy of DataFrame?((uint64_t)v195);
    goto LABEL_16;
  }
  long long v35 = v54;
  swift_bridgeObjectRelease((_BYTE)v198);
  swift_bridgeObjectRelease(v199);
  swift_bridgeObjectRelease((_BYTE)a7);
  swift_bridgeObjectRelease(v191);
  swift_bridgeObjectRelease(v196);
  outlined destroy of MLRecommender.ModelParameters((uint64_t)a8);
  (*(void (**)(uint64_t, uint64_t))(v202 + 8))(v206, v200);
  v207((unsigned char *)v55, v201);
LABEL_16:
  swift_bridgeObjectRelease(v35[21]);
  swift_bridgeObjectRelease(v35[23]);
  char v36 = 1;
LABEL_17:
  uint64_t result = swift_bridgeObjectRelease(v35[25]);
  if (v36)
  {
    uint64_t v74 = type metadata accessor for MLRecommender(0);
    return outlined destroy of MLRecommender.ModelParameters((uint64_t)v35 + *(int *)(v74 + 36));
  }
  return result;
}

uint64_t static MLRecommender.extractIdentifiers(from:)()
{
  uint64_t v62 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Column<Int>);
  uint64_t v61 = *(void *)(v62 - 8);
  int64_t v0 = *(void *)(v61 + 64);
  uint64_t v1 = alloca(v0);
  uint64_t v2 = alloca(v0);
  char v67 = v59;
  uint64_t v68 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for FilledColumn<Column<Int>>);
  uint64_t v3 = *(void *)(v68 - 8);
  int64_t v4 = *(void *)(v3 + 64);
  id v5 = alloca(v4);
  int64_t v6 = alloca(v4);
  uint64_t v70 = v59;
  uint64_t v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Column<String>);
  uint64_t v65 = *(void *)(v7 - 8);
  int64_t v8 = *(void *)(v65 + 64);
  uint64_t v9 = alloca(v8);
  unint64_t v10 = alloca(v8);
  uint64_t v64 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for FilledColumn<Column<String>>);
  uint64_t v60 = *(void *)(v64 - 8);
  int64_t v11 = *(void *)(v60 + 64);
  int64_t v12 = alloca(v11);
  BOOL v13 = alloca(v11);
  Swift::String v66 = v59;
  uint64_t v14 = AnyColumn.wrappedElementType.getter();
  if (swift_dynamicCastMetatype(v14, &type metadata for String))
  {
    double v15 = AnyColumn.assumingType<A>(_:)(&type metadata for String, &type metadata for String);
    v59[0] = 0;
    v59[1] = 0xE000000000000000;
    uint64_t v16 = lazy protocol witness table accessor for type FullyConnectedNetworkClassifier<Float, String> and conformance FullyConnectedNetworkClassifier<A, B>(&lazy protocol witness table cache variable for type Column<String> and conformance Column<A>, &demangling cache variable for type metadata for Column<String>, (uint64_t)&protocol conformance descriptor for Column<A>);
    uint64_t v17 = v66;
    OptionalColumnProtocol.filled(with:)(v59, v7, v16);
    (*(void (**)(void *, uint64_t, double))(v65 + 8))(v59, v7, v15);
    uint64_t v18 = lazy protocol witness table accessor for type FullyConnectedNetworkClassifier<Float, String> and conformance FullyConnectedNetworkClassifier<A, B>(&lazy protocol witness table cache variable for type FilledColumn<Column<String>> and conformance FilledColumn<A>, &demangling cache variable for type metadata for FilledColumn<Column<String>>, (uint64_t)&protocol conformance descriptor for FilledColumn<A>);
    uint64_t v19 = v64;
    uint64_t v20 = dispatch thunk of Collection.count.getter(v64, v18);
    char v21 = v17;
    if (v20)
    {
      uint64_t v69 = _swiftEmptyArrayStorage;
      int64_t v22 = 0;
      if (v20 > 0) {
        int64_t v22 = v20;
      }
      uint64_t v23 = v20;
      specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v22, 0);
      char v67 = v69;
      uint64_t v68 = v18;
      dispatch thunk of Collection.startIndex.getter(v19, v18);
      if (v23 < 0) {
        BUG();
      }
      uint64_t v24 = v23;
      uint64_t v25 = v68;
      unint64_t v26 = v67;
      char v21 = v66;
      do
      {
        uint64_t v65 = v24;
        int64_t v27 = v21;
        int64_t v28 = (void (*)(void *, void))dispatch thunk of Collection.subscript.read(v59, v63, v19, v25);
        uint64_t v70 = (void *)*v29;
        uint64_t v30 = v29[1];
        swift_bridgeObjectRetain(v30);
        v28(v59, 0);
        uint64_t v69 = v26;
        unint64_t v31 = v26[2];
        unint64_t v32 = v31 + 1;
        if (v26[3] >> 1 <= v31)
        {
          specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v26[3] >= 2uLL, v31 + 1, 1);
          unint64_t v32 = v31 + 1;
          int64_t v27 = v66;
          unint64_t v26 = v69;
        }
        v26[2] = v32;
        uint64_t v33 = 3 * v31;
        v26[v33 + 4] = v70;
        v26[v33 + 5] = v30;
        LOBYTE(v26[v33 + 6]) = 0;
        uint64_t v19 = v64;
        uint64_t v25 = v68;
        dispatch thunk of Collection.formIndex(after:)(v63, v64, v68);
        uint64_t v24 = v65 - 1;
        char v21 = v27;
      }
      while (v65 != 1);
    }
    (*(void (**)(void *, uint64_t))(v60 + 8))(v21, v19);
    return 0;
  }
  else
  {
    uint64_t v34 = v67;
    uint64_t v64 = v3;
    if (swift_dynamicCastMetatype(v14, &type metadata for Int))
    {
      long long v35 = v34;
      double v36 = AnyColumn.assumingType<A>(_:)(&type metadata for Int, &type metadata for Int);
      v59[0] = 0;
      uint64_t v37 = lazy protocol witness table accessor for type FullyConnectedNetworkClassifier<Float, String> and conformance FullyConnectedNetworkClassifier<A, B>(&lazy protocol witness table cache variable for type Column<Int> and conformance Column<A>, &demangling cache variable for type metadata for Column<Int>, (uint64_t)&protocol conformance descriptor for Column<A>);
      uint64_t v38 = v62;
      OptionalColumnProtocol.filled(with:)(v59, v62, v37);
      (*(void (**)(void *, uint64_t, double))(v61 + 8))(v35, v38, v36);
      uint64_t v39 = lazy protocol witness table accessor for type FullyConnectedNetworkClassifier<Float, String> and conformance FullyConnectedNetworkClassifier<A, B>(&lazy protocol witness table cache variable for type FilledColumn<Column<Int>> and conformance FilledColumn<A>, &demangling cache variable for type metadata for FilledColumn<Column<Int>>, (uint64_t)&protocol conformance descriptor for FilledColumn<A>);
      uint64_t v40 = v68;
      uint64_t v41 = dispatch thunk of Collection.count.getter(v68, v39);
      if (v41)
      {
        uint64_t v42 = v41;
        uint64_t v69 = _swiftEmptyArrayStorage;
        int64_t v43 = 0;
        if (v41 > 0) {
          int64_t v43 = v41;
        }
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v43, 0);
        char v67 = v69;
        uint64_t v44 = v70;
        Swift::String v66 = (void *)v39;
        dispatch thunk of Collection.startIndex.getter(v40, v39);
        uint64_t v65 = v42;
        if (v42 < 0) {
          BUG();
        }
        char v45 = v66;
        uint64_t v46 = v67;
        uint64_t v40 = v68;
        do
        {
          uint64_t v47 = v40;
          char v48 = (void (*)(void *, void))dispatch thunk of Collection.subscript.read(v59, v63, v40, v45);
          uint64_t v50 = (void *)*v49;
          v48(v59, 0);
          uint64_t v69 = v46;
          char v51 = v45;
          unint64_t v52 = v46[2];
          unint64_t v53 = v46[3];
          uint64_t v54 = v47;
          int64_t v55 = v52 + 1;
          if (v53 >> 1 <= v52)
          {
            uint64_t v70 = v50;
            uint64_t v57 = v51;
            specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v53 >= 2, v55, 1);
            uint64_t v54 = v68;
            uint64_t v50 = v70;
            char v51 = v57;
            uint64_t v46 = v69;
          }
          v46[2] = v55;
          uint64_t v56 = 3 * v52;
          v46[v56 + 4] = v50;
          v46[v56 + 5] = 0;
          LOBYTE(v46[v56 + 6]) = 1;
          uint64_t v40 = v54;
          char v45 = v51;
          dispatch thunk of Collection.formIndex(after:)(v63, v54, v51);
          --v65;
        }
        while (v65);
      }
      else
      {
        uint64_t v44 = v70;
      }
      (*(void (**)(void *, uint64_t))(v64 + 8))(v44, v40);
      return 1;
    }
    else
    {
      return 0;
    }
  }
}

uint64_t static MLRecommender.extractNearestItems(itemColumn:parameters:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v71 = v3;
  uint64_t ML13MLRecommenderV10IdentifierOGTg5 = a2;
  uint64_t v76 = a1;
  int64_t v5 = *(void *)(*(void *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for DataFrame?)
                             - 8)
                 + 64);
  int64_t v6 = alloca(v5);
  uint64_t v7 = alloca(v5);
  char v67 = v61;
  int64_t v8 = alloca(v5);
  uint64_t v9 = alloca(v5);
  uint64_t v68 = v61;
  unint64_t v10 = alloca(v5);
  int64_t v11 = alloca(v5);
  uint64_t v62 = v61;
  int64_t v12 = alloca(v5);
  BOOL v13 = alloca(v5);
  Swift::String v63 = v61;
  uint64_t v14 = alloca(v5);
  double v15 = alloca(v5);
  uint64_t v16 = type metadata accessor for DataFrame(0);
  uint64_t v74 = *(void *)(v16 - 8);
  int64_t v17 = *(void *)(v74 + 64);
  uint64_t v18 = alloca(v17);
  uint64_t v19 = alloca(v17);
  uint64_t v69 = v61;
  uint64_t v20 = alloca(v17);
  char v21 = alloca(v17);
  Swift::String v66 = v61;
  int64_t v22 = alloca(v17);
  uint64_t v23 = alloca(v17);
  uint64_t v65 = v61;
  uint64_t v24 = type metadata accessor for MLRecommender.ModelParameters(0);
  uint64_t v25 = *(int *)(v24 + 28);
  uint64_t v64 = a3;
  outlined init with copy of Either<LogisticRegressionClassifier<Float, String>, FullyConnectedNetworkClassifier<Float, String>>(a3 + v25, (uint64_t)v61, &demangling cache variable for type metadata for DataFrame?);
  unsigned int v26 = 1;
  uint64_t v70 = v61;
  int EnumTagSinglePayload = __swift_getEnumTagSinglePayload((uint64_t)v61, 1, v16);
  *(void *)&long long v72 = v16;
  if (EnumTagSinglePayload == 1)
  {
    outlined destroy of DataFrame?((uint64_t)v70);
    uint64_t v28 = *(int *)(v24 + 32);
    char v29 = *(unsigned char *)(v64 + v28 + 8);
    uint64_t v30 = v76;
    if (v29 == -1) {
      goto LABEL_6;
    }
    *(void *)&long long v73 = *(void *)(v64 + v28);
    BYTE8(v73) = v29 & 1;
    outlined copy of Result<_DataTable, Error>(v73, v29);
    DataFrame.init(_:)((uint64_t)&v73);
  }
  else
  {
    unint64_t v31 = *(void (**)(char *, char *, uint64_t))(v74 + 32);
    unint64_t v32 = v65;
    v31(v65, v70, v16);
    uint64_t v30 = v76;
    v31((char *)v76, v32, v16);
  }
  unsigned int v26 = 0;
LABEL_6:
  __swift_storeEnumTagSinglePayload(v30, v26, 1, v72);
  uint64_t v33 = ML13MLRecommenderV10IdentifierOGTg5;
  uint64_t v34 = AnyColumn.wrappedElementType.getter();
  if (swift_dynamicCastMetatype(v34, &type metadata for String))
  {
    uint64_t v35 = (uint64_t)v63;
    outlined init with copy of Either<LogisticRegressionClassifier<Float, String>, FullyConnectedNetworkClassifier<Float, String>>(v30, (uint64_t)v63, &demangling cache variable for type metadata for DataFrame?);
    double v36 = alloca(24);
    uint64_t v37 = alloca(32);
    uint64_t v62 = (char *)v33;
    uint64_t v38 = v71;
    uint64_t ML13MLRecommenderV10IdentifierOGTg5 = _sSq3mapyqd_0_Sgqd_0_xqd__YKXEqd__YKs5ErrorRd__Ri_d_0_r0_lF11TabularData0D5FrameV_s5NeverOSay8CreateML13MLRecommenderV10IdentifierOGTg5((void (*)(uint64_t *))partial apply for closure #1 in static MLRecommender.extractNearestItems(itemColumn:parameters:), (uint64_t)v61);
    uint64_t v76 = v38;
    outlined destroy of DataFrame?(v35);
    uint64_t v39 = v72;
    uint64_t v40 = v30;
    uint64_t v41 = (uint64_t)v62;
    outlined init with copy of Either<LogisticRegressionClassifier<Float, String>, FullyConnectedNetworkClassifier<Float, String>>(v40, (uint64_t)v62, &demangling cache variable for type metadata for DataFrame?);
    if (__swift_getEnumTagSinglePayload(v41, 1, v39) == 1) {
      return ML13MLRecommenderV10IdentifierOGTg5;
    }
    uint64_t v48 = v41;
    uint64_t v49 = v66;
    uint64_t v50 = v74;
    (*(void (**)(char *, uint64_t, uint64_t))(v74 + 32))(v66, v48, v39);
    uint64_t v45 = v76;
    closure #2 in static MLRecommender.extractNearestItems(itemColumn:parameters:)();
LABEL_15:
    if (v45)
    {
      (*(void (**)(char *, uint64_t))(v50 + 8))(v49, v39);
      BUG();
    }
    (*(void (**)(char *, uint64_t))(v50 + 8))(v49, v39);
    return ML13MLRecommenderV10IdentifierOGTg5;
  }
  if (!swift_dynamicCastMetatype(v34, &type metadata for Int))
  {
    *(void *)&long long v73 = 0;
    *((void *)&v73 + 1) = 0xE000000000000000;
    _StringGuts.grow(_:)(88);
    v51._uint64_t countAndFlagsBits = 0x6C6F63206D657449;
    v51._char object = (void *)0xED000027206E6D75;
    String.append(_:)(v51);
    uint64_t v52 = AnyColumn.name.getter();
    char v54 = (char)v53;
    v51._uint64_t countAndFlagsBits = v52;
    v51._char object = v53;
    String.append(_:)(v51);
    swift_bridgeObjectRelease(v54);
    v51._char object = "Max Similarity Iterations" + 0x8000000000000000;
    v51._uint64_t countAndFlagsBits = 0xD000000000000049;
    String.append(_:)(v51);
    long long v72 = v73;
    v51._char object = (void *)lazy protocol witness table accessor for type MLCreateError and conformance MLCreateError();
    swift_allocError(&type metadata for MLCreateError, v51._object, 0, 0);
    *(_OWORD *)uint64_t v55 = v72;
    *(_OWORD *)(v55 + 16) = 0;
    *(_OWORD *)(v55 + 32) = 0;
    *(unsigned char *)(v55 + 48) = 1;
    swift_willThrow(&type metadata for MLCreateError, v51._object, v55, v56, v57, v58);
    return outlined destroy of DataFrame?(v30);
  }
  uint64_t v42 = (uint64_t)v68;
  outlined init with copy of Either<LogisticRegressionClassifier<Float, String>, FullyConnectedNetworkClassifier<Float, String>>(v30, (uint64_t)v68, &demangling cache variable for type metadata for DataFrame?);
  int64_t v43 = alloca(24);
  uint64_t v44 = alloca(32);
  uint64_t v62 = (char *)v33;
  uint64_t v45 = v71;
  uint64_t ML13MLRecommenderV10IdentifierOGTg5 = _sSq3mapyqd_0_Sgqd_0_xqd__YKXEqd__YKs5ErrorRd__Ri_d_0_r0_lF11TabularData0D5FrameV_s5NeverOSay8CreateML13MLRecommenderV10IdentifierOGTg5((void (*)(uint64_t *))partial apply for closure #3 in static MLRecommender.extractNearestItems(itemColumn:parameters:), (uint64_t)v61);
  outlined destroy of DataFrame?(v42);
  uint64_t v39 = v72;
  uint64_t v46 = v30;
  uint64_t v47 = (uint64_t)v67;
  outlined init with copy of Either<LogisticRegressionClassifier<Float, String>, FullyConnectedNetworkClassifier<Float, String>>(v46, (uint64_t)v67, &demangling cache variable for type metadata for DataFrame?);
  if (__swift_getEnumTagSinglePayload(v47, 1, v39) != 1)
  {
    uint64_t v60 = v47;
    uint64_t v49 = v69;
    uint64_t v50 = v74;
    (*(void (**)(char *, uint64_t, uint64_t))(v74 + 32))(v69, v60, v39);
    closure #4 in static MLRecommender.extractNearestItems(itemColumn:parameters:)();
    goto LABEL_15;
  }
  return ML13MLRecommenderV10IdentifierOGTg5;
}

Swift::OpaquePointer_optional __swiftcall AnyColumn.extractDoubles(fillValue:)(Swift::Double fillValue)
{
  Swift::Double v54 = fillValue;
  uint64_t v53 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Column<Int>);
  Swift::String v51 = *(Swift::Double **)(v53 - 8);
  int64_t v1 = *((void *)v51 + 8);
  uint64_t v2 = alloca(v1);
  uint64_t v3 = alloca(v1);
  Swift::String v59 = v50;
  uint64_t v52 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Column<Float>);
  int64_t v4 = *(Swift::Double **)(v52 - 8);
  int64_t v5 = *((void *)v4 + 8);
  int64_t v6 = alloca(v5);
  uint64_t v7 = alloca(v5);
  uint64_t v58 = v50;
  uint64_t v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Column<Double>);
  uint64_t v61 = *(void *)(v8 - 8);
  int64_t v9 = *(void *)(v61 + 64);
  unint64_t v10 = alloca(v9);
  int64_t v11 = alloca(v9);
  uint64_t v57 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for FilledColumn<Column<Double>>);
  int64_t v12 = *(void *)(*(void *)(v57 - 8) + 64);
  BOOL v13 = alloca(v12);
  uint64_t v14 = alloca(v12);
  uint64_t v55 = v50;
  uint64_t v15 = AnyColumn.wrappedElementType.getter();
  if (!swift_dynamicCastMetatype(v15, &type metadata for Double))
  {
    uint64_t v55 = v4;
    if (swift_dynamicCastMetatype(v15, &type metadata for Float))
    {
      uint64_t v20 = v58;
      AnyColumn.assumingType<A>(_:)(&type metadata for Float, &type metadata for Float);
      uint64_t v21 = lazy protocol witness table accessor for type FullyConnectedNetworkClassifier<Float, String> and conformance FullyConnectedNetworkClassifier<A, B>(&lazy protocol witness table cache variable for type Column<Float> and conformance Column<A>, &demangling cache variable for type metadata for Column<Float>, (uint64_t)&protocol conformance descriptor for Column<A>);
      uint64_t v22 = v52;
      uint64_t v23 = dispatch thunk of Collection.count.getter(v52, v21);
      if (v23)
      {
        uint64_t v24 = v23;
        uint64_t v60 = _swiftEmptyArrayStorage;
        int64_t v25 = 0;
        if (v23 > 0) {
          int64_t v25 = v23;
        }
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v25, 0);
        unsigned int v26 = v60;
        Swift::String v59 = (Swift::Double *)v21;
        dispatch thunk of Collection.startIndex.getter(v22, v21);
        if (v24 < 0) {
          BUG();
        }
        int64_t v27 = v59;
        do
        {
          uint64_t v61 = v24;
          uint64_t v28 = (void (*)(Swift::Double *, void))dispatch thunk of Collection.subscript.read(v50, v56, v22, v27);
          double v30 = v54;
          if (!*(unsigned char *)(v29 + 4)) {
            double v30 = *(float *)v29;
          }
          uint64_t v57 = *(void *)&v30;
          v28(v50, 0);
          unint64_t v31 = v26;
          uint64_t v60 = v26;
          unint64_t v32 = v26[2];
          if (v26[3] >> 1 <= v32)
          {
            specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v26[3] >= 2uLL, v32 + 1, 1);
            unint64_t v31 = v60;
          }
          _OWORD v31[2] = v32 + 1;
          unsigned int v26 = v31;
          v31[v32 + 4] = v57;
          uint64_t v33 = v58;
          uint64_t v22 = v52;
          int64_t v27 = v59;
          dispatch thunk of Collection.formIndex(after:)(v56, v52, v59);
          uint64_t v24 = v61 - 1;
        }
        while (v61 != 1);
        uint64_t v19 = v26;
        uint64_t v20 = v33;
      }
      else
      {
        uint64_t v19 = _swiftEmptyArrayStorage;
      }
      uint64_t v47 = v20;
      uint64_t v48 = v22;
      uint64_t v49 = v55;
    }
    else
    {
      if (!swift_dynamicCastMetatype(v15, &type metadata for Int))
      {
        uint64_t v19 = 0;
        goto LABEL_33;
      }
      uint64_t v34 = v59;
      AnyColumn.assumingType<A>(_:)(&type metadata for Int, &type metadata for Int);
      uint64_t v35 = lazy protocol witness table accessor for type FullyConnectedNetworkClassifier<Float, String> and conformance FullyConnectedNetworkClassifier<A, B>(&lazy protocol witness table cache variable for type Column<Int> and conformance Column<A>, &demangling cache variable for type metadata for Column<Int>, (uint64_t)&protocol conformance descriptor for Column<A>);
      uint64_t v36 = v53;
      uint64_t v37 = dispatch thunk of Collection.count.getter(v53, v35);
      if (v37)
      {
        uint64_t v60 = _swiftEmptyArrayStorage;
        int64_t v38 = 0;
        if (v37 > 0) {
          int64_t v38 = v37;
        }
        uint64_t v61 = v37;
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v38, 0);
        uint64_t v19 = v60;
        uint64_t v58 = (Swift::Double *)v35;
        dispatch thunk of Collection.startIndex.getter(v36, v35);
        uint64_t v39 = v61;
        if (v61 < 0) {
          BUG();
        }
        uint64_t v40 = v58;
        do
        {
          uint64_t v61 = v39;
          uint64_t v41 = (void (*)(Swift::Double *, void))dispatch thunk of Collection.subscript.read(v50, v56, v36, v40);
          double v43 = v54;
          if (!*(unsigned char *)(v42 + 8)) {
            double v43 = (double)(int)*(void *)v42;
          }
          uint64_t v57 = *(void *)&v43;
          v41(v50, 0);
          uint64_t v44 = v19;
          uint64_t v60 = v19;
          unint64_t v45 = v19[2];
          if (v19[3] >> 1 <= v45)
          {
            specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v19[3] >= 2uLL, v45 + 1, 1);
            uint64_t v44 = v60;
          }
          v44[2] = v45 + 1;
          uint64_t v19 = v44;
          v44[v45 + 4] = v57;
          uint64_t v46 = v59;
          uint64_t v36 = v53;
          uint64_t v40 = v58;
          dispatch thunk of Collection.formIndex(after:)(v56, v53, v58);
          uint64_t v39 = v61 - 1;
        }
        while (v61 != 1);
        uint64_t v34 = v46;
      }
      else
      {
        uint64_t v19 = _swiftEmptyArrayStorage;
      }
      uint64_t v47 = v34;
      uint64_t v48 = v36;
      uint64_t v49 = v51;
    }
    (*((void (**)(Swift::Double *, uint64_t))v49 + 1))(v47, v48);
    goto LABEL_33;
  }
  AnyColumn.assumingType<A>(_:)(&type metadata for Double, &type metadata for Double);
  v50[0] = v54;
  uint64_t v16 = lazy protocol witness table accessor for type FullyConnectedNetworkClassifier<Float, String> and conformance FullyConnectedNetworkClassifier<A, B>(&lazy protocol witness table cache variable for type Column<Double> and conformance Column<A>, &demangling cache variable for type metadata for Column<Double>, (uint64_t)&protocol conformance descriptor for Column<A>);
  OptionalColumnProtocol.filled(with:)(v50, v8, v16);
  (*(void (**)(Swift::Double *, uint64_t))(v61 + 8))(v50, v8);
  uint64_t v17 = lazy protocol witness table accessor for type FullyConnectedNetworkClassifier<Float, String> and conformance FullyConnectedNetworkClassifier<A, B>(&lazy protocol witness table cache variable for type FilledColumn<Column<Double>> and conformance FilledColumn<A>, &demangling cache variable for type metadata for FilledColumn<Column<Double>>, (uint64_t)&protocol conformance descriptor for FilledColumn<A>);
  uint64_t v19 = (void *)dispatch thunk of Sequence._copyToContiguousArray()(v57, v17);
LABEL_33:
  v18.value._rawValue = v19;
  return v18;
}

uint64_t *specialized Recommender.train(_:nearestItems:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, char *a6, double a7, void *a8, _OWORD *a9, uint64_t a10)
{
  uint64_t v81 = a4;
  __dst = v10;
  BOOL v79 = a6;
  double v80 = v11;
  *(void *)&v76.f64[0] = a5;
  double v82 = a7;
  swift_bridgeObjectRetain(a1);
  specialized RecommenderTrainingData.init(_:)(a1);
  long long v75 = v63;
  long long v73 = v64;
  long long v74 = v65;
  LOBYTE(v78) = v66[0];
  long long v71 = *(_OWORD *)((char *)v66 + 8);
  uint64_t v13 = *((uint64_t *)&v66[1] + 1);
  double v14 = v80;
  *(double *)&uint64_t v15 = COERCE_DOUBLE(((uint64_t (*)(long long *, uint64_t, uint64_t, uint64_t, void, double))v79)(&v63, a2, a3, v81, *(void *)&v76.f64[0], v82));
  if (v14 != 0.0) {
    return outlined release of RecommenderTrainingData<MLRecommender.Identifier, MLRecommender.Identifier>((uint64_t *)&v63);
  }
  uint64_t v19 = v17;
  double v80 = *(double *)&v15;
  BOOL v79 = v16;
  uint64_t v81 = v13;
  *(void *)&v76.f64[0] = a3;
  double v82 = 0.0;
  outlined retain of RecommenderTrainingData<MLRecommender.Identifier, MLRecommender.Identifier>(&v63);
  if (*a8 != -1) {
    swift_once(a8, a10);
  }
  __src[0] = v75;
  __src[1] = v73;
  __src[2] = v74;
  LOBYTE(__src[3]) = v78;
  *(_OWORD *)((char *)&__src[3] + 8) = v71;
  *((void *)&__src[4] + 1) = v81;
  __src[5] = *a9;
  *(double *)&__src[6] = v80;
  *((void *)&__src[6] + 1) = v79;
  *(void *)&__src[7] = v19;
  *((void *)&__src[7] + 1) = _swiftEmptyArrayStorage;
  *(void *)&__src[8] = _swiftEmptyArrayStorage;
  *(_OWORD *)((char *)&__src[8] + 8) = 0;
  uint64_t v81 = *(uint64_t *)(v64 + 16);
  uint64_t v20 = v81;
  uint64_t v21 = specialized Array.init(repeating:count:)(0, v81);
  v62[1] = v66[0];
  v62[2] = v66[1];
  v62[0] = v65;
  uint64_t v69 = *((void *)&v66[0] + 1);
  long long v70 = v66[1];
  outlined retain of [Int](&v69);
  outlined retain of [Int](&v70);
  outlined retain of ContiguousArray<Double>((void *)&v70 + 1);
  specialized SparseMatrix.IndexedSequence.Iterator.init(base:)((uint64_t)v62);
  specialized SparseMatrix.IndexedSequence.Iterator.next()(v62, v20, v22, v23, v24, v25);
  if ((v27 & 1) == 0)
  {
    uint64_t v28 = v26;
    do
    {
      uint64_t v29 = v21;
      if (!swift_isUniquelyReferenced_nonNull_native(v21))
      {
        uint64_t v29 = v21;
        uint64_t v21 = specialized _ArrayBuffer._consumeAndCreateNew()((uint64_t)v21);
      }
      if (v28 < 0) {
        BUG();
      }
      if ((unint64_t)v28 >= v21[2]) {
        BUG();
      }
      uint64_t v34 = v21[v28 + 4];
      BOOL v35 = __OFADD__(1, v34);
      uint64_t v36 = v34 + 1;
      if (v35) {
        BUG();
      }
      v21[v28 + 4] = v36;
      specialized SparseMatrix.IndexedSequence.Iterator.next()(v29, v20, v30, v31, v32, v33);
      uint64_t v28 = v37;
    }
    while ((v38 & 1) == 0);
  }
  char v39 = v67;
  char v40 = v68;
  swift_release();
  swift_bridgeObjectRelease(v40);
  swift_bridgeObjectRelease(v39);
  swift_bridgeObjectRetain((_BYTE)v21);
  specialized RecommenderModel.computeStatistics(ratingCounts:)((uint64_t)v21, v20);
  swift_bridgeObjectRelease((_BYTE)v21);
  outlined release of RecommenderTrainingData<MLRecommender.Identifier, MLRecommender.Identifier>((uint64_t *)&v63);
  uint64_t v41 = *(void *)&v76.f64[0];
  if (v81 < *(uint64_t *)&v76.f64[0]) {
    uint64_t v41 = v81;
  }
  swift_bridgeObjectRelease(BYTE8(__src[7]));
  int64_t v42 = 0;
  if (v41 > 0) {
    int64_t v42 = v41;
  }
  double v43 = _swiftEmptyArrayStorage;
  *((void *)&__src[7] + 1) = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v42, 0, (uint64_t)_swiftEmptyArrayStorage);
  if (v41 < 0) {
    BUG();
  }
  *(void *)&long long v73 = v21;
  if (v41)
  {
    swift_bridgeObjectRetain((_BYTE)v21);
    double v44 = v82;
    double v43 = (void *)specialized Sequence._maxImplementation(count:sortedBy:)(v41, 0, (uint64_t)v21);
    double v45 = v44;
    swift_bridgeObjectRelease((_BYTE)v21);
    uint64_t v46 = __dst;
  }
  else
  {
    uint64_t v46 = __dst;
    double v45 = v82;
  }
  ML16RecommenderModelV21buildNewUserSeedItems5count12ratingCountsySi_Sayp51GtFS2i_Sit_tcfu_33_39c69c9f4ee04694167b65f5fa330960p1_tP10Tf3nnnpk_nTf1cn_n = _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSaySi_SitG_Sis5NeverOTg5080_s8CreateML16RecommenderModelV21buildNewUserSeedItems5count12ratingCountsySi_Sayp51GtFS2i_Sit_tcfu_33_39c69c9f4ee04694167b65f5fa330960p1_tP10Tf3nnnpk_nTf1cn_n((uint64_t)v43);
  swift_bridgeObjectRelease((_BYTE)v43);
  double v48 = *(double *)&ML16RecommenderModelV21buildNewUserSeedItems5count12ratingCountsySi_Sayp51GtFS2i_Sit_tcfu_33_39c69c9f4ee04694167b65f5fa330960p1_tP10Tf3nnnpk_nTf1cn_n;
  BOOL v79 = (char *)ML16RecommenderModelV21buildNewUserSeedItems5count12ratingCountsySi_Sayp51GtFS2i_Sit_tcfu_33_39c69c9f4ee04694167b65f5fa330960p1_tP10Tf3nnnpk_nTf1cn_n[2];
  if (v79)
  {
    *(double *)&long long v74 = v45;
    double v80 = *((double *)&__src[8] + 1);
    v49.f64[0] = *(double *)&__src[9] - *((double *)&__src[8] + 1);
    __m128d v50 = (__m128d)0x3FF0000000000000uLL;
    v50.f64[0] = 1.0 / (*(double *)&__src[9] - *((double *)&__src[8] + 1));
    __m128d v51 = _mm_cmple_sd((__m128d)0x3FF0000000000000uLL, v49);
    __m128d v76 = _mm_or_pd(_mm_andn_pd(v51, (__m128d)0x3FF0000000000000uLL), _mm_and_pd(v50, v51));
    uint64_t v52 = (char *)*((void *)&__src[7] + 1);
    uint64_t v53 = *(void *)&__src[8];
    Swift::Double v54 = 0;
    double v82 = v48;
    *(void *)&long long v75 = *(void *)&__src[8];
    do
    {
      uint64_t v55 = *(void *)(*(void *)&v48 + 8 * (void)v54 + 32);
      if (v55 < 0) {
        BUG();
      }
      if ((unint64_t)v55 >= *(void *)(v53 + 16)) {
        BUG();
      }
      uint64_t v81 = *(uint64_t *)(v53 + 8 * v55 + 32);
      if (!swift_isUniquelyReferenced_nonNull_native(v52)) {
        uint64_t v52 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *((void *)v52 + 2) + 1, 1, (uint64_t)v52);
      }
      unint64_t v56 = *((void *)v52 + 2);
      unint64_t v57 = *((void *)v52 + 3);
      unint64_t v58 = v56 + 1;
      if (v57 >> 1 <= v56)
      {
        unint64_t v78 = v56 + 1;
        uint64_t v61 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(v57 >= 2, v56 + 1, 1, (uint64_t)v52);
        unint64_t v58 = v78;
        uint64_t v52 = v61;
      }
      double v48 = v82;
      uint64_t v53 = v75;
      ++v54;
      double v59 = (*(double *)&v81 - v80) * v76.f64[0];
      *((void *)v52 + 2) = v58;
      uint64_t v60 = 16 * v56;
      *(void *)&v52[v60 + 32] = v55;
      *(double *)&v52[v60 + 40] = v59;
    }
    while (v79 != v54);
    swift_bridgeObjectRelease(LOBYTE(v48));
    *((void *)&__src[7] + 1) = v52;
    uint64_t v46 = __dst;
  }
  else
  {
    swift_bridgeObjectRelease((_BYTE)ML16RecommenderModelV21buildNewUserSeedItems5count12ratingCountsySi_Sayp51GtFS2i_Sit_tcfu_33_39c69c9f4ee04694167b65f5fa330960p1_tP10Tf3nnnpk_nTf1cn_n);
  }
  specialized MutableCollection<>.sort(by:)((uint64_t *)&__src[7] + 1, (uint64_t (*)(uint64_t))specialized _ArrayBuffer._consumeAndCreateNew(), (uint64_t (*)(void))specialized UnsafeMutableBufferPointer._stableSortImpl(by:));
  swift_bridgeObjectRelease(v73);
  return (uint64_t *)memcpy(v46, __src, 0x98uLL);
}

uint64_t closure #1 in MLRecommender.init(trainingData:userColumn:itemColumn:ratingColumn:parameters:)(uint64_t a1, uint64_t a2)
{
  *(void *)(v2 + 16) = a1;
  type metadata accessor for OS_os_log(0, &lazy cache variable for type metadata for MLModel, MLModel_ptr);
  uint64_t v3 = (void *)swift_task_alloc(dword_3A701C);
  *(void *)(v2 + 24) = v3;
  void *v3 = v2;
  v3[1] = closure #1 in MLRandomForestRegressor.init(checkpoint:);
  return static MLModel.compile(_:)(a2);
}

Swift::Bool static MLRecommender.reportAnalytics(trainingData:userColumn:itemColumn:ratingColumn:parameters:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, void (*a6)(uint64_t *, uint64_t), uint64_t a7, uint64_t a8)
{
  long long v65 = a6;
  uint64_t v67 = a5;
  uint64_t v58 = a4;
  uint64_t v66 = a3;
  uint64_t v64 = a2;
  uint64_t v57 = a1;
  uint64_t v63 = type metadata accessor for MLRecommender.ModelParameters(0);
  int64_t v8 = *(void *)(*(void *)(v63 - 8) + 64);
  int64_t v9 = alloca(v8);
  unint64_t v10 = alloca(v8);
  uint64_t v55 = (uint64_t)&v55;
  int64_t v11 = *(void *)(*(void *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for DataFrame?)
                              - 8)
                  + 64);
  int64_t v12 = alloca(v11);
  uint64_t v13 = alloca(v11);
  unint64_t v56 = &v55;
  int64_t v14 = *(void *)(*(void *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Column<Int>)
                              - 8)
                  + 64);
  uint64_t v15 = alloca(v14);
  uint64_t v16 = alloca(v14);
  uint64_t v60 = &v55;
  int64_t v17 = *(void *)(*(void *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Column<String>)
                              - 8)
                  + 64);
  Swift::OpaquePointer_optional v18 = alloca(v17);
  uint64_t v19 = alloca(v17);
  uint64_t v20 = type metadata accessor for AnyColumn(0);
  uint64_t v21 = *(void *)(v20 - 8);
  int64_t v22 = *(void *)(v21 + 64);
  uint64_t v23 = alloca(v22);
  uint64_t v24 = alloca(v22);
  uint64_t v25 = alloca(v22);
  uint64_t v26 = alloca(v22);
  Swift::Bool result = AnalyticsReporter.init()();
  if (!result)
  {
    uint64_t v62 = &v55;
    uint64_t v59 = v20;
    uint64_t v61 = &v55;
    if (a7) {
      Swift::Int v28 = String.count.getter(v65, a7);
    }
    else {
      Swift::Int v28 = 0;
    }
    uint64_t v29 = v66;
    uint64_t v30 = v64;
    AnalyticsReporter.reportDataMetrics(model:metricName:quantity:)(CreateML_ModelType_iterSimilarityRecommender, (Swift::String)__PAIR128__((unint64_t)("he upper strict-triangular." + 0x8000000000000000), 0xD000000000000011), v28);
    DataFrame.subscript.getter(v30, v29);
    uint64_t v31 = AnyColumn.wrappedElementType.getter();
    uint64_t v32 = *(void (**)(uint64_t *, uint64_t))(v21 + 8);
    v32(&v55, v59);
    uint64_t v33 = swift_dynamicCastMetatype(v31, &type metadata for String);
    long long v65 = v32;
    if (v33)
    {
      uint64_t v34 = (uint64_t)v61;
      DataFrame.subscript.getter(v30, v66, &type metadata for String);
      uint64_t v35 = specialized Set.init<A>(_:)(v34);
      uint64_t v36 = v67;
      uint64_t v37 = v62;
    }
    else
    {
      uint64_t v38 = swift_dynamicCastMetatype(v31, &type metadata for Int);
      uint64_t v36 = v67;
      uint64_t v37 = v62;
      if (!v38) {
        goto LABEL_10;
      }
      DataFrame.subscript.getter(v64, v66, &type metadata for Int);
      uint64_t v36 = v67;
      uint64_t v35 = specialized Set.init<A>(_:)();
    }
    Swift::Int v39 = *(void *)(v35 + 16);
    swift_bridgeObjectRelease(v35);
    AnalyticsReporter.reportDataMetrics(model:metricName:quantity:)(CreateML_ModelType_iterSimilarityRecommender, (Swift::String)__PAIR128__(0xEF73726573552066, 0x6F207265626D754ELL), v39);
LABEL_10:
    uint64_t v40 = v58;
    DataFrame.subscript.getter(v58, v36);
    uint64_t v41 = AnyColumn.wrappedElementType.getter();
    v65(v37, v59);
    if (swift_dynamicCastMetatype(v41, &type metadata for String))
    {
      uint64_t v42 = (uint64_t)v61;
      DataFrame.subscript.getter(v40, v67, &type metadata for String);
      uint64_t v43 = specialized Set.init<A>(_:)(v42);
      double v44 = (int *)v63;
    }
    else
    {
      uint64_t v45 = swift_dynamicCastMetatype(v41, &type metadata for Int);
      double v44 = (int *)v63;
      if (!v45) {
        goto LABEL_15;
      }
      DataFrame.subscript.getter(v58, v67, &type metadata for Int);
      double v44 = (int *)v63;
      uint64_t v43 = specialized Set.init<A>(_:)();
    }
    Swift::Int v46 = *(void *)(v43 + 16);
    swift_bridgeObjectRelease(v43);
    AnalyticsReporter.reportDataMetrics(model:metricName:quantity:)(CreateML_ModelType_iterSimilarityRecommender, (Swift::String)__PAIR128__(0xEF736D6574492066, 0x6F207265626D754ELL), v46);
LABEL_15:
    AnalyticsReporter.reportParameterSettings(model:parameterName:parameterValue:)(CreateML_ModelType_iterSimilarityRecommender, (Swift::String)__PAIR128__(0xEF65707954207974, 0x6972616C696D6953), (Swift::String)__PAIR128__(0xEF79746972616C69, 0x6D6973206D657449));
    Swift::Float v47 = *(double *)(a8 + 8);
    AnalyticsReporter.reportDataMetrics(model:metricName:quantity:)(CreateML_ModelType_iterSimilarityRecommender, (Swift::String)__PAIR128__(0xE900000000000064, 0x6C6F687365726854), v47);
    AnalyticsReporter.reportDataMetrics(model:metricName:quantity:)(CreateML_ModelType_iterSimilarityRecommender, (Swift::String)__PAIR128__(0xE900000000000074, 0x6E756F432078614DLL), *(void *)(a8 + 16));
    uint64_t v48 = (uint64_t)v56;
    outlined init with copy of Either<LogisticRegressionClassifier<Float, String>, FullyConnectedNetworkClassifier<Float, String>>(a8 + v44[7], (uint64_t)v56, &demangling cache variable for type metadata for DataFrame?);
    uint64_t v49 = type metadata accessor for DataFrame(0);
    int EnumTagSinglePayload = __swift_getEnumTagSinglePayload(v48, 1, v49);
    outlined destroy of DataFrame?(v48);
    uint64_t v51 = v55;
    outlined init with copy of MLRecommender.ModelParameters(a8, v55);
    if (EnumTagSinglePayload == 1)
    {
      char v52 = *(unsigned char *)(v51 + v44[8] + 8);
      outlined destroy of MLRecommender.ModelParameters(v51);
      if (v52 == -1)
      {
        uint64_t v53 = 0x6569666963657053;
        unint64_t v54 = 0xE900000000000064;
LABEL_20:
        AnalyticsReporter.reportParameterSettings(model:parameterName:parameterValue:)(CreateML_ModelType_iterSimilarityRecommender, (Swift::String)__PAIR128__(0xED0000736D657449, 0x207473657261654ELL), (Swift::String)__PAIR128__(v54, v53));
        return AnalyticsReporter.reportDataMetrics(model:metricName:quantity:)(CreateML_ModelType_iterSimilarityRecommender, (Swift::String)__PAIR128__((unint64_t)("Number of Ratings" + 0x8000000000000000), 0xD000000000000019), *(void *)(a8 + v44[9]));
      }
    }
    else
    {
      outlined destroy of MLRecommender.ModelParameters(v51);
    }
    uint64_t v53 = 0x6669636570736E55;
    unint64_t v54 = 0xEB00000000646569;
    goto LABEL_20;
  }
  return result;
}

void *closure #1 in static MLRecommender.extractNearestItems(itemColumn:parameters:)(void *a1)
{
  uint64_t v40 = a1;
  uint64_t v35 = v1;
  uint64_t v41 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Column<String>);
  uint64_t v44 = *(void *)(v41 - 8);
  int64_t v2 = *(void *)(v44 + 64);
  uint64_t v3 = alloca(v2);
  int64_t v4 = alloca(v2);
  uint64_t v43 = &v33;
  uint64_t v42 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for FilledColumn<Column<String>>);
  uint64_t v36 = *(void *)(v42 - 8);
  int64_t v5 = *(void *)(v36 + 64);
  int64_t v6 = alloca(v5);
  uint64_t v7 = alloca(v5);
  uint64_t v8 = AnyColumn.name.getter();
  char v10 = v9;
  DataFrame.subscript.getter(v8, v9, &type metadata for String);
  swift_bridgeObjectRelease(v10);
  v34[0] = 0;
  v34[1] = 0xE000000000000000;
  uint64_t v11 = lazy protocol witness table accessor for type FullyConnectedNetworkClassifier<Float, String> and conformance FullyConnectedNetworkClassifier<A, B>(&lazy protocol witness table cache variable for type Column<String> and conformance Column<A>, &demangling cache variable for type metadata for Column<String>, (uint64_t)&protocol conformance descriptor for Column<A>);
  uint64_t v12 = v42;
  uint64_t v13 = v41;
  int64_t v14 = v43;
  OptionalColumnProtocol.filled(with:)(v34, v41, v11);
  (*(void (**)(uint64_t *, uint64_t))(v44 + 8))(v14, v13);
  uint64_t v15 = lazy protocol witness table accessor for type FullyConnectedNetworkClassifier<Float, String> and conformance FullyConnectedNetworkClassifier<A, B>(&lazy protocol witness table cache variable for type FilledColumn<Column<String>> and conformance FilledColumn<A>, &demangling cache variable for type metadata for FilledColumn<Column<String>>, (uint64_t)&protocol conformance descriptor for FilledColumn<A>);
  uint64_t v16 = dispatch thunk of Collection.count.getter(v12, v15);
  if (v16)
  {
    Swift::Int v39 = _swiftEmptyArrayStorage;
    int64_t v17 = 0;
    if (v16 > 0) {
      int64_t v17 = v16;
    }
    uint64_t v44 = v16;
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v17, 0);
    Swift::OpaquePointer_optional v18 = (uint64_t *)v15;
    uint64_t v19 = v39;
    uint64_t v38 = &v33;
    uint64_t v43 = v18;
    dispatch thunk of Collection.startIndex.getter(v12, v18);
    uint64_t v20 = v44;
    if (v44 < 0) {
      BUG();
    }
    uint64_t v21 = v43;
    uint64_t v22 = v42;
    uint64_t v23 = v38;
    do
    {
      uint64_t v44 = v20;
      uint64_t v24 = v23;
      uint64_t v25 = (void (*)(void *, void))dispatch thunk of Collection.subscript.read(v34, v37, v22, v21);
      uint64_t v41 = *v26;
      uint64_t v27 = v26[1];
      swift_bridgeObjectRetain(v27);
      v25(v34, 0);
      Swift::Int v39 = v19;
      unint64_t v28 = v19[2];
      unint64_t v29 = v28 + 1;
      if (v19[3] >> 1 <= v28)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v19[3] >= 2uLL, v28 + 1, 1);
        unint64_t v29 = v28 + 1;
        uint64_t v24 = v38;
        uint64_t v19 = v39;
      }
      uint64_t v40 = v19;
      void v19[2] = v29;
      uint64_t v30 = 3 * v28;
      v19[v30 + 4] = v41;
      v19[v30 + 5] = v27;
      LOBYTE(v19[v30 + 6]) = 0;
      uint64_t v31 = v42;
      uint64_t v21 = v43;
      dispatch thunk of Collection.formIndex(after:)(v37, v42, v43);
      uint64_t v20 = v44 - 1;
      uint64_t v22 = v31;
      uint64_t v19 = v40;
      uint64_t v23 = v24;
    }
    while (v44 != 1);
  }
  else
  {
    uint64_t v19 = _swiftEmptyArrayStorage;
    uint64_t v22 = v12;
    uint64_t v23 = &v33;
  }
  (*(void (**)(uint64_t *, uint64_t))(v36 + 8))(v23, v22);
  Swift::Bool result = v35;
  *uint64_t v35 = v19;
  return result;
}

void *closure #2 in static MLRecommender.extractNearestItems(itemColumn:parameters:)()
{
  unint64_t v29 = v0;
  uint64_t v36 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Column<String>);
  uint64_t v35 = *(void *)(v36 - 8);
  int64_t v1 = *(void *)(v35 + 64);
  int64_t v2 = alloca(v1);
  uint64_t v3 = alloca(v1);
  uint64_t v34 = v28;
  uint64_t v37 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for FilledColumn<Column<String>>);
  uint64_t v30 = *(void *)(v37 - 8);
  int64_t v4 = *(void *)(v30 + 64);
  int64_t v5 = alloca(v4);
  int64_t v6 = alloca(v4);
  DataFrame.subscript.getter(0x72616C696D6973, 0xE700000000000000, &type metadata for String);
  v28[0] = 0;
  v28[1] = 0xE000000000000000;
  uint64_t v7 = lazy protocol witness table accessor for type FullyConnectedNetworkClassifier<Float, String> and conformance FullyConnectedNetworkClassifier<A, B>(&lazy protocol witness table cache variable for type Column<String> and conformance Column<A>, &demangling cache variable for type metadata for Column<String>, (uint64_t)&protocol conformance descriptor for Column<A>);
  uint64_t v8 = v36;
  uint64_t v9 = v34;
  OptionalColumnProtocol.filled(with:)(v28, v36, v7);
  (*(void (**)(void *, uint64_t))(v35 + 8))(v9, v8);
  uint64_t v10 = lazy protocol witness table accessor for type FullyConnectedNetworkClassifier<Float, String> and conformance FullyConnectedNetworkClassifier<A, B>(&lazy protocol witness table cache variable for type FilledColumn<Column<String>> and conformance FilledColumn<A>, &demangling cache variable for type metadata for FilledColumn<Column<String>>, (uint64_t)&protocol conformance descriptor for FilledColumn<A>);
  uint64_t v11 = dispatch thunk of Collection.count.getter(v37, v10);
  if (v11)
  {
    uint64_t v33 = _swiftEmptyArrayStorage;
    int64_t v12 = 0;
    if (v11 > 0) {
      int64_t v12 = v11;
    }
    uint64_t v35 = v11;
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v12, 0);
    uint64_t v13 = v33;
    uint64_t v32 = v10;
    dispatch thunk of Collection.startIndex.getter(v37, v10);
    uint64_t v14 = v35;
    if (v35 < 0) {
      BUG();
    }
    uint64_t v15 = v32;
    uint64_t v16 = v37;
    int64_t v17 = v28;
    do
    {
      uint64_t v35 = v14;
      Swift::OpaquePointer_optional v18 = v17;
      uint64_t v19 = (void (*)(void *, void))dispatch thunk of Collection.subscript.read(v28, v31, v16, v15);
      uint64_t v34 = (void *)*v20;
      uint64_t v21 = v20[1];
      swift_bridgeObjectRetain(v21);
      v19(v28, 0);
      uint64_t v33 = v13;
      unint64_t v22 = v13[2];
      unint64_t v23 = v13[3];
      unint64_t v24 = v22 + 1;
      if (v23 >> 1 <= v22)
      {
        uint64_t v36 = (uint64_t)v18;
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v23 >= 2, v22 + 1, 1);
        unint64_t v24 = v22 + 1;
        Swift::OpaquePointer_optional v18 = (void *)v36;
        uint64_t v13 = v33;
      }
      uint64_t v36 = (uint64_t)v13;
      void v13[2] = v24;
      uint64_t v25 = 3 * v22;
      v13[v25 + 4] = v34;
      v13[v25 + 5] = v21;
      LOBYTE(v13[v25 + 6]) = 0;
      uint64_t v26 = v37;
      uint64_t v15 = v32;
      dispatch thunk of Collection.formIndex(after:)(v31, v37, v32);
      uint64_t v14 = v35 - 1;
      uint64_t v16 = v26;
      uint64_t v13 = (void *)v36;
      int64_t v17 = v18;
    }
    while (v35 != 1);
  }
  else
  {
    uint64_t v13 = _swiftEmptyArrayStorage;
    uint64_t v16 = v37;
    int64_t v17 = v28;
  }
  (*(void (**)(void *, uint64_t))(v30 + 8))(v17, v16);
  Swift::Bool result = v29;
  void *v29 = v13;
  return result;
}

void *closure #3 in static MLRecommender.extractNearestItems(itemColumn:parameters:)(uint64_t a1)
{
  uint64_t v44 = a1;
  uint64_t v38 = v1;
  uint64_t v42 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Column<Int>);
  uint64_t v45 = *(void *)(v42 - 8);
  int64_t v2 = *(void *)(v45 + 64);
  uint64_t v3 = alloca(v2);
  int64_t v4 = alloca(v2);
  uint64_t v43 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for FilledColumn<Column<Int>>);
  uint64_t v39 = *(void *)(v43 - 8);
  int64_t v5 = *(void *)(v39 + 64);
  int64_t v6 = alloca(v5);
  uint64_t v7 = alloca(v5);
  Swift::Int v46 = v37;
  uint64_t v8 = AnyColumn.name.getter();
  char v10 = v9;
  DataFrame.subscript.getter(v8, v9, &type metadata for Int);
  swift_bridgeObjectRelease(v10);
  v37[0] = 0;
  uint64_t v11 = lazy protocol witness table accessor for type FullyConnectedNetworkClassifier<Float, String> and conformance FullyConnectedNetworkClassifier<A, B>(&lazy protocol witness table cache variable for type Column<Int> and conformance Column<A>, &demangling cache variable for type metadata for Column<Int>, (uint64_t)&protocol conformance descriptor for Column<A>);
  uint64_t v12 = v43;
  uint64_t v13 = v42;
  OptionalColumnProtocol.filled(with:)(v37, v42, v11);
  (*(void (**)(void *, uint64_t))(v45 + 8))(v37, v13);
  uint64_t v14 = lazy protocol witness table accessor for type FullyConnectedNetworkClassifier<Float, String> and conformance FullyConnectedNetworkClassifier<A, B>(&lazy protocol witness table cache variable for type FilledColumn<Column<Int>> and conformance FilledColumn<A>, &demangling cache variable for type metadata for FilledColumn<Column<Int>>, (uint64_t)&protocol conformance descriptor for FilledColumn<A>);
  uint64_t v15 = dispatch thunk of Collection.count.getter(v12, v14);
  if (v15)
  {
    uint64_t v16 = v15;
    uint64_t v41 = _swiftEmptyArrayStorage;
    int64_t v17 = 0;
    if (v15 > 0) {
      int64_t v17 = v15;
    }
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v17, 0);
    uint64_t v18 = v14;
    uint64_t v19 = v41;
    uint64_t v45 = v18;
    dispatch thunk of Collection.startIndex.getter(v12, v18);
    if (v16 < 0) {
      BUG();
    }
    uint64_t v42 = v16;
    uint64_t v20 = v45;
    uint64_t v21 = v43;
    do
    {
      uint64_t v22 = v20;
      uint64_t v23 = v21;
      unint64_t v24 = (void (*)(void *, void))dispatch thunk of Collection.subscript.read(v37, v40, v21, v22);
      uint64_t v26 = *v25;
      v24(v37, 0);
      uint64_t v41 = v19;
      uint64_t v27 = v23;
      unint64_t v28 = v19[2];
      unint64_t v29 = v19[3];
      int64_t v30 = v28 + 1;
      if (v29 >> 1 <= v28)
      {
        uint64_t v44 = v26;
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v29 >= 2, v30, 1);
        uint64_t v26 = v44;
        uint64_t v27 = v43;
        uint64_t v19 = v41;
      }
      void v19[2] = v30;
      uint64_t v31 = 3 * v28;
      v19[v31 + 4] = v26;
      v19[v31 + 5] = 0;
      LOBYTE(v19[v31 + 6]) = 1;
      uint64_t v32 = v46;
      uint64_t v33 = v27;
      uint64_t v20 = v45;
      dispatch thunk of Collection.formIndex(after:)(v40, v27, v45);
      BOOL v34 = v42-- == 1;
      uint64_t v21 = v33;
    }
    while (!v34);
    uint64_t v35 = v32;
  }
  else
  {
    uint64_t v19 = _swiftEmptyArrayStorage;
    uint64_t v35 = v46;
    uint64_t v21 = v12;
  }
  (*(void (**)(void *, uint64_t))(v39 + 8))(v35, v21);
  Swift::Bool result = v38;
  void *v38 = v19;
  return result;
}

void *closure #4 in static MLRecommender.extractNearestItems(itemColumn:parameters:)()
{
  BOOL v34 = v0;
  uint64_t v39 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Column<Int>);
  uint64_t v41 = *(void *)(v39 - 8);
  int64_t v1 = *(void *)(v41 + 64);
  int64_t v2 = alloca(v1);
  uint64_t v3 = alloca(v1);
  uint64_t v40 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for FilledColumn<Column<Int>>);
  uint64_t v35 = *(void *)(v40 - 8);
  int64_t v4 = *(void *)(v35 + 64);
  int64_t v5 = alloca(v4);
  int64_t v6 = alloca(v4);
  uint64_t v42 = v33;
  DataFrame.subscript.getter(0x72616C696D6973, 0xE700000000000000, &type metadata for Int);
  v33[0] = 0;
  uint64_t v7 = lazy protocol witness table accessor for type FullyConnectedNetworkClassifier<Float, String> and conformance FullyConnectedNetworkClassifier<A, B>(&lazy protocol witness table cache variable for type Column<Int> and conformance Column<A>, &demangling cache variable for type metadata for Column<Int>, (uint64_t)&protocol conformance descriptor for Column<A>);
  uint64_t v8 = v39;
  OptionalColumnProtocol.filled(with:)(v33, v39, v7);
  uint64_t v9 = v40;
  (*(void (**)(void *, uint64_t))(v41 + 8))(v33, v8);
  uint64_t v10 = lazy protocol witness table accessor for type FullyConnectedNetworkClassifier<Float, String> and conformance FullyConnectedNetworkClassifier<A, B>(&lazy protocol witness table cache variable for type FilledColumn<Column<Int>> and conformance FilledColumn<A>, &demangling cache variable for type metadata for FilledColumn<Column<Int>>, (uint64_t)&protocol conformance descriptor for FilledColumn<A>);
  uint64_t v11 = dispatch thunk of Collection.count.getter(v9, v10);
  if (v11)
  {
    uint64_t v12 = v11;
    uint64_t v38 = _swiftEmptyArrayStorage;
    int64_t v13 = 0;
    if (v11 > 0) {
      int64_t v13 = v11;
    }
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v13, 0);
    uint64_t v14 = v10;
    uint64_t v15 = v38;
    uint64_t v41 = v14;
    dispatch thunk of Collection.startIndex.getter(v9, v14);
    if (v12 < 0) {
      BUG();
    }
    uint64_t v39 = v12;
    uint64_t v16 = v41;
    uint64_t v17 = v40;
    do
    {
      uint64_t v18 = v16;
      uint64_t v19 = v17;
      uint64_t v20 = (void (*)(void *, void))dispatch thunk of Collection.subscript.read(v33, v37, v17, v18);
      uint64_t v22 = *v21;
      v20(v33, 0);
      uint64_t v38 = v15;
      uint64_t v23 = v19;
      unint64_t v24 = v15[2];
      unint64_t v25 = v15[3];
      int64_t v26 = v24 + 1;
      if (v25 >> 1 <= v24)
      {
        uint64_t v36 = v22;
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v25 >= 2, v26, 1);
        uint64_t v22 = v36;
        uint64_t v23 = v40;
        uint64_t v15 = v38;
      }
      _OWORD v15[2] = v26;
      uint64_t v27 = 3 * v24;
      v15[v27 + 4] = v22;
      v15[v27 + 5] = 0;
      LOBYTE(v15[v27 + 6]) = 1;
      unint64_t v28 = v42;
      uint64_t v29 = v23;
      uint64_t v16 = v41;
      dispatch thunk of Collection.formIndex(after:)(v37, v23, v41);
      BOOL v30 = v39-- == 1;
      uint64_t v17 = v29;
    }
    while (!v30);
    uint64_t v31 = v28;
  }
  else
  {
    uint64_t v15 = _swiftEmptyArrayStorage;
    uint64_t v31 = v42;
    uint64_t v17 = v9;
  }
  (*(void (**)(void *, uint64_t))(v35 + 8))(v31, v17);
  Swift::Bool result = v34;
  *BOOL v34 = v15;
  return result;
}

uint64_t MLRecommender.init(trainingData:userColumn:itemColumn:ratingColumn:parameters:)(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, void *a6, void *a7, uint64_t a8)
{
  uint64_t v20 = a4;
  uint64_t v21 = a3;
  uint64_t v25 = v8;
  uint64_t v24 = a2;
  uint64_t v22 = a6;
  uint64_t v23 = a5;
  int64_t v9 = *(void *)(*(void *)(type metadata accessor for MLRecommender.ModelParameters(0) - 8) + 64);
  uint64_t v10 = alloca(v9);
  uint64_t v11 = alloca(v9);
  int64_t v12 = *(void *)(*(void *)(type metadata accessor for DataFrame(0) - 8) + 64);
  int64_t v13 = alloca(v12);
  uint64_t v14 = alloca(v12);
  char v15 = *((unsigned char *)a1 + 8);
  uint64_t v18 = *a1;
  char v19 = v15;
  DataFrame.init(_:)((uint64_t)&v18);
  outlined init with copy of MLRecommender.ModelParameters(a8, (uint64_t)v17);
  MLRecommender.init(trainingData:userColumn:itemColumn:ratingColumn:parameters:)((uint64_t)v17, v24, v21, v20, v23, v22, a7, v17);
  return outlined destroy of MLRecommender.ModelParameters(a8);
}

uint64_t MLRecommender.ModelAlgorithmType.description.getter()
{
  return 0x6D6973206D657449;
}

uint64_t MLRecommender.recommendations(fromUsers:maxCount:restrictingToItems:excluding:excludingObserved:)(uint64_t a1, uint64_t a2, void *a3, uint64_t a4, int a5, __m128 a6)
{
  uint64_t v226 = a3;
  uint64_t v10 = v6;
  uint64_t v220 = a2;
  v231._uint64_t countAndFlagsBits = v7;
  LODWORD(v210) = a5;
  uint64_t v197 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Column<Double>);
  uint64_t v196 = *(void *)(v197 - 8);
  int64_t v11 = *(void *)(v196 + 64);
  int64_t v12 = alloca(v11);
  int64_t v13 = alloca(v11);
  uint64_t v200 = __dst;
  uint64_t v205 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Column<Int>);
  uint64_t v204 = *(void *)(v205 - 8);
  int64_t v14 = *(void *)(v204 + 64);
  char v15 = alloca(v14);
  uint64_t v16 = alloca(v14);
  uint64_t v189 = __dst;
  uint64_t v17 = alloca(v14);
  uint64_t v18 = alloca(v14);
  uint64_t v201 = __dst;
  char v19 = alloca(v14);
  uint64_t v20 = alloca(v14);
  unint64_t v211 = (unint64_t)__dst;
  uint64_t v195 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Column<String>);
  uint64_t v194 = *(void *)(v195 - 8);
  int64_t v21 = *(void *)(v194 + 64);
  uint64_t v22 = alloca(v21);
  uint64_t v23 = alloca(v21);
  Swift::String v190 = __dst;
  uint64_t v24 = alloca(v21);
  uint64_t v25 = alloca(v21);
  uint64_t v206 = __dst;
  uint64_t v26 = type metadata accessor for DataFrame(0);
  uint64_t v27 = *(void *)(v26 - 8);
  int64_t v28 = *(void *)(v27 + 64);
  uint64_t v29 = alloca(v28);
  BOOL v30 = alloca(v28);
  uint64_t v31 = alloca(v28);
  uint64_t v32 = alloca(v28);
  if (!*(void *)(a1 + 16))
  {
    uint64_t v38 = lazy protocol witness table accessor for type MLCreateError and conformance MLCreateError();
    uint64_t result = swift_allocError(&type metadata for MLCreateError, v38, 0, 0);
    *(void *)uint64_t v39 = 0xD000000000000050;
    *(void *)(v39 + 8) = "user identifiers." + 0x8000000000000000;
    *(_OWORD *)(v39 + 16) = 0;
    *(_OWORD *)(v39 + 32) = 0;
    *(unsigned char *)(v39 + 48) = 0;
    *(void *)uint64_t v10 = result;
    *(unsigned char *)(v10 + 8) = 1;
    return result;
  }
  int64_t v192 = __dst;
  MLModel v218 = __dst;
  uint64_t v191 = v26;
  uint64_t v202 = v27;
  unsigned int v203 = (uint64_t *)v10;
  uint64_t v33 = *(void *)a4;
  unsigned __int8 v34 = *(unsigned char *)(a4 + 8);
  uint64_t countAndFlagsBits = v231._countAndFlagsBits;
  uint64_t v36 = MLRecommender.mapUsers(_:)(a1);
  if (countAndFlagsBits)
  {
    uint64_t result = (uint64_t)v203;
    *unsigned int v203 = countAndFlagsBits;
LABEL_4:
    *(unsigned char *)(result + 8) = 1;
    return result;
  }
  uint64_t v213 = 0;
  uint64_t v214 = (void *)v33;
  uint64_t v40 = (uint64_t)v226;
  if (v226)
  {
    uint64_t v41 = (uint64_t)v36;
    swift_bridgeObjectRetain((_BYTE)v36);
    uint64_t v42 = v213;
    uint64_t v43 = MLRecommender.mapItems(_:)(v40);
    if (v42)
    {
      swift_bridgeObjectRelease_n(v41, 2, v44, v45, v46);
      uint64_t result = (uint64_t)v203;
      *unsigned int v203 = v42;
      goto LABEL_4;
    }
    uint64_t v224 = (void *)v41;
    uint64_t v213 = 0;
  }
  else
  {
    uint64_t v224 = v36;
    swift_bridgeObjectRetain((_BYTE)v36);
    uint64_t v43 = _swiftEmptyArrayStorage;
  }
  uint64_t v47 = specialized Set.init<A>(_:)((uint64_t)v43);
  uint64_t v48 = v47;
  char __src = v8;
  if (v34 == 0xFF)
  {
    uint64_t v60 = (char *)_swiftEmptyArrayStorage;
    goto LABEL_39;
  }
  uint64_t v221 = v47;
  v231._uint64_t countAndFlagsBits = v8[20];
  uint64_t v226 = (void *)v8[21];
  uint64_t v49 = v214;
  uint64_t v198 = (uint64_t)v214;
  char v50 = v34;
  int v223 = v34;
  char v51 = v34 & 1;
  char v199 = v51;
  outlined copy of Result<_DataTable, Error>((uint64_t)v214, v50);
  v52._uint64_t countAndFlagsBits = v231._countAndFlagsBits;
  v52._char object = v226;
  MLDataTable.subscript.getter(v52);
  uint64_t v219 = v227;
  LOBYTE(v207) = (_BYTE)v228;
  v231._uint64_t countAndFlagsBits = v8[22];
  uint64_t v226 = (void *)v8[23];
  uint64_t v198 = (uint64_t)v49;
  char v199 = v51;
  char v53 = v223;
  outlined copy of Result<_DataTable, Error>((uint64_t)v49, v223);
  v52._uint64_t countAndFlagsBits = v231._countAndFlagsBits;
  v52._char object = v226;
  MLDataTable.subscript.getter(v52);
  outlined consume of MLDataTable?((uint64_t)v49, v53);
  uint64_t v217 = (uint64_t)v227;
  unsigned __int8 v54 = v228;
  v227 = v49;
  LOBYTE(v228) = v51;
  Swift::Int v55 = MLDataTable.size.getter();
  if (v55 < 0) {
    BUG();
  }
  int v222 = v54;
  char v56 = (char)v207;
  int v209 = v207;
  if (!v55)
  {
    uint64_t v60 = (char *)_swiftEmptyArrayStorage;
LABEL_38:
    outlined consume of Result<_DataTable, Error>(v217, v222);
    outlined consume of Result<_DataTable, Error>((uint64_t)v219, v209);
    outlined consume of MLDataTable?((uint64_t)v214, v223);
    uint64_t v48 = v221;
LABEL_39:
    long long v71 = __src;
    memcpy(__dst, __src, sizeof(__dst));
    swift_bridgeObjectRetain((_BYTE)v60);
    uint64_t v72 = v220;
    uint64_t v73 = v213;
    long long v74 = specialized RecommenderModel.recommend<A>(users:limit:allowedItems:excludedInteractions:omittingObservedInteractions:)((uint64_t)v224, v220, v48, (uint64_t)v60, v210);
    unint64_t v78 = v60;
    uint64_t v79 = v73;
    if (v73)
    {
      swift_bridgeObjectRelease_n(v224, 2, v75, v76, v77);
      swift_bridgeObjectRelease_n(v78, 2, v80, v81, v82);
      uint64_t result = swift_bridgeObjectRelease(v48);
      uint64_t v83 = v203;
    }
    else
    {
      uint64_t v212 = v74;
      swift_bridgeObjectRelease((_BYTE)v224);
      __m128 v207 = v78;
      swift_bridgeObjectRelease((_BYTE)v78);
      swift_bridgeObjectRelease(v48);
      DataFrame.init()(v48, v72, v84, v85);
      uint64_t v216 = (int *)type metadata accessor for MLRecommender(0);
      uint64_t v86 = v216[10];
      uint64_t v217 = v71[20];
      uint64_t v87 = v71[21];
      char v88 = *((unsigned char *)v71 + v86);
      uint64_t v213 = v87;
      swift_bridgeObjectRetain(v87);
      if (v88)
      {
        ML14RecommendationVyAF13MLRecommenderV10IdentifierOALGG_ALs5NeverOTg503_s8d4ML13g136V15recommendations9fromUsers8maxCount18restrictingToItems9excluding0L8ObservedAA11MLDataTableVSayAA12MLIdentifier_pG_SiAMSgAKSgSbtKFAC10h5OAA14F59VyA2QGcfu0_33_7b0562fa90875ac3238718c5c70eced2AtQTf3nnnpk_nTf1cn_nTm = _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSay8CreateML14RecommendationVyAF13MLRecommenderV10IdentifierOALGG_ALs5NeverOTg503_s8d4ML13g136V15recommendations9fromUsers8maxCount18restrictingToItems9excluding0L8ObservedAA11MLDataTableVSayAA12MLIdentifier_pG_SiAMSgAKSgSbtKFAC10h5OAA14F59VyA2QGcfu0_33_7b0562fa90875ac3238718c5c70eced2AtQTf3nnnpk_nTf1cn_nTm((uint64_t)v212);
        uint64_t v90 = (uint64_t)ML14RecommendationVyAF13MLRecommenderV10IdentifierOALGG_ALs5NeverOTg503_s8d4ML13g136V15recommendations9fromUsers8maxCount18restrictingToItems9excluding0L8ObservedAA11MLDataTableVSayAA12MLIdentifier_pG_SiAMSgAKSgSbtKFAC10h5OAA14F59VyA2QGcfu0_33_7b0562fa90875ac3238718c5c70eced2AtQTf3nnnpk_nTf1cn_nTm;
        uint64_t v219 = 0;
        int64_t v91 = ML14RecommendationVyAF13MLRecommenderV10IdentifierOALGG_ALs5NeverOTg503_s8d4ML13g136V15recommendations9fromUsers8maxCount18restrictingToItems9excluding0L8ObservedAA11MLDataTableVSayAA12MLIdentifier_pG_SiAMSgAKSgSbtKFAC10h5OAA14F59VyA2QGcfu0_33_7b0562fa90875ac3238718c5c70eced2AtQTf3nnnpk_nTf1cn_nTm[2];
        if (v91)
        {
          v227 = _swiftEmptyArrayStorage;
          specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v91, 0);
          uint64_t v92 = v227;
          v231._uint64_t countAndFlagsBits = v90;
          uint64_t v93 = (unsigned char *)(v90 + 48);
          do
          {
            if (!*v93) {
              BUG();
            }
            uint64_t v94 = *((void *)v93 - 2);
            v227 = v92;
            unint64_t v95 = v92[2];
            unint64_t v96 = v92[3];
            int64_t v97 = v95 + 1;
            if (v96 >> 1 <= v95)
            {
              uint64_t v226 = (void *)(v95 + 1);
              uint64_t v220 = v94;
              specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v96 >= 2, v97, 1);
              int64_t v97 = (int64_t)v226;
              uint64_t v94 = v220;
              uint64_t v92 = v227;
            }
            v92[2] = v97;
            v92[v95 + 4] = v94;
            v93 += 24;
            --v91;
          }
          while (v91);
          swift_bridgeObjectRelease(v231._countAndFlagsBits);
        }
        else
        {
          swift_bridgeObjectRelease((_BYTE)ML14RecommendationVyAF13MLRecommenderV10IdentifierOALGG_ALs5NeverOTg503_s8d4ML13g136V15recommendations9fromUsers8maxCount18restrictingToItems9excluding0L8ObservedAA11MLDataTableVSayAA12MLIdentifier_pG_SiAMSgAKSgSbtKFAC10h5OAA14F59VyA2QGcfu0_33_7b0562fa90875ac3238718c5c70eced2AtQTf3nnnpk_nTf1cn_nTm);
          uint64_t v92 = _swiftEmptyArrayStorage;
        }
        v227 = v92;
        uint64_t v107 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [Int]);
        uint64_t v108 = lazy protocol witness table accessor for type FullyConnectedNetworkClassifier<Float, String> and conformance FullyConnectedNetworkClassifier<A, B>(&lazy protocol witness table cache variable for type [Int] and conformance [A], &demangling cache variable for type metadata for [Int], (uint64_t)&protocol conformance descriptor for [A]);
        unint64_t v109 = v211;
        Column.init<A>(name:contents:)(v217, v213, &v227, &type metadata for Int, v107, v108);
        DataFrame.append<A>(column:)(v109, &type metadata for Int);
        uint64_t v110 = (unsigned char *)v109;
        uint64_t v111 = v205;
        uint64_t v112 = v204;
      }
      else
      {
        uint64_t v98 = _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSay8CreateML14RecommendationVyAF13MLRecommenderV10IdentifierOALGG_ALs5NeverOTg503_s8d4ML13g136V15recommendations9fromUsers8maxCount18restrictingToItems9excluding0L8ObservedAA11MLDataTableVSayAA12MLIdentifier_pG_SiAMSgAKSgSbtKFAC10h5OAA14F59VyA2QGcfu0_33_7b0562fa90875ac3238718c5c70eced2AtQTf3nnnpk_nTf1cn_nTm((uint64_t)v212);
        int v99 = v98;
        uint64_t v219 = 0;
        int64_t v100 = v98[2];
        if (v100)
        {
          v227 = _swiftEmptyArrayStorage;
          int64_t v210 = v100;
          specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v100, 0);
          uint64_t v101 = v227;
          Swift::Int v208 = (Swift::Int)v99;
          unint64_t v102 = v99 + 6;
          do
          {
            if (*v102) {
              BUG();
            }
            uint64_t v226 = (void *)*((void *)v102 - 2);
            uint64_t v103 = *((void *)v102 - 1);
            v227 = v101;
            unint64_t v104 = v101[2];
            unint64_t v211 = v101[3];
            unint64_t v105 = v211 >> 1;
            v231._uint64_t countAndFlagsBits = v104 + 1;
            uint64_t v220 = v103;
            swift_bridgeObjectRetain(v103);
            if (v105 <= v104)
            {
              specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v211 >= 2, v231._countAndFlagsBits, 1);
              uint64_t v101 = v227;
            }
            v101[2] = v231._countAndFlagsBits;
            uint64_t v106 = 2 * v104;
            v101[v106 + 4] = v226;
            v101[v106 + 5] = v220;
            v102 += 24;
            --v210;
          }
          while (v210);
          swift_bridgeObjectRelease(v208);
        }
        else
        {
          swift_bridgeObjectRelease((_BYTE)v98);
          uint64_t v101 = _swiftEmptyArrayStorage;
        }
        v227 = v101;
        uint64_t v113 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [String]);
        uint64_t v114 = lazy protocol witness table accessor for type FullyConnectedNetworkClassifier<Float, String> and conformance FullyConnectedNetworkClassifier<A, B>(&lazy protocol witness table cache variable for type [String] and conformance [A], &demangling cache variable for type metadata for [String], (uint64_t)&protocol conformance descriptor for [A]);
        uint64_t v115 = v206;
        Column.init<A>(name:contents:)(v217, v213, &v227, &type metadata for String, v113, v114);
        DataFrame.append<A>(column:)(v115, &type metadata for String);
        uint64_t v110 = v115;
        uint64_t v111 = v195;
        uint64_t v112 = v194;
      }
      (*(void (**)(unsigned char *, uint64_t))(v112 + 8))(v110, v111);
      uint64_t v116 = v216[11];
      uint64_t v216 = (int *)*((void *)__src + 22);
      char v117 = *((unsigned char *)__src + v116);
      char __src = (void *)*((void *)__src + 23);
      swift_bridgeObjectRetain((_BYTE)__src);
      if (v117)
      {
        Swift::String v118 = v219;
        ML14RecommendationVyAF13MLRecommenderV10IdentifierOALGG_ALs5NeverOTg503_s8d4ML13g136V15recommendations9fromUsers8maxCount18restrictingToItems9excluding0L8ObservedAA11MLDataTableVSayAA12MLIdentifier_pG_SiAMSgAKSgSbtKFAC10h5OAA14F58VyA2QGcfu2_32d1e1b7ed5e9e4cd3ca03cf5b44db102cAtQTf3nnnpk_nTf1cn_nTm = _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSay8CreateML14RecommendationVyAF13MLRecommenderV10IdentifierOALGG_ALs5NeverOTg503_s8d4ML13g136V15recommendations9fromUsers8maxCount18restrictingToItems9excluding0L8ObservedAA11MLDataTableVSayAA12MLIdentifier_pG_SiAMSgAKSgSbtKFAC10h5OAA14F58VyA2QGcfu2_32d1e1b7ed5e9e4cd3ca03cf5b44db102cAtQTf3nnnpk_nTf1cn_nTm((uint64_t)v212);
        uint64_t v120 = (uint64_t)ML14RecommendationVyAF13MLRecommenderV10IdentifierOALGG_ALs5NeverOTg503_s8d4ML13g136V15recommendations9fromUsers8maxCount18restrictingToItems9excluding0L8ObservedAA11MLDataTableVSayAA12MLIdentifier_pG_SiAMSgAKSgSbtKFAC10h5OAA14F58VyA2QGcfu2_32d1e1b7ed5e9e4cd3ca03cf5b44db102cAtQTf3nnnpk_nTf1cn_nTm;
        uint64_t v206 = v118;
        int64_t v121 = ML14RecommendationVyAF13MLRecommenderV10IdentifierOALGG_ALs5NeverOTg503_s8d4ML13g136V15recommendations9fromUsers8maxCount18restrictingToItems9excluding0L8ObservedAA11MLDataTableVSayAA12MLIdentifier_pG_SiAMSgAKSgSbtKFAC10h5OAA14F58VyA2QGcfu2_32d1e1b7ed5e9e4cd3ca03cf5b44db102cAtQTf3nnnpk_nTf1cn_nTm[2];
        if (v121)
        {
          v227 = _swiftEmptyArrayStorage;
          specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v121, 0);
          uint64_t v122 = v227;
          v231._uint64_t countAndFlagsBits = v120;
          uint64_t v123 = (unsigned char *)(v120 + 48);
          do
          {
            if (!*v123) {
              BUG();
            }
            uint64_t v124 = *((void *)v123 - 2);
            v227 = v122;
            unint64_t v125 = v122[2];
            unint64_t v126 = v122[3];
            int64_t v127 = v125 + 1;
            if (v126 >> 1 <= v125)
            {
              uint64_t v226 = (void *)(v125 + 1);
              uint64_t v220 = v124;
              specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v126 >= 2, v127, 1);
              int64_t v127 = (int64_t)v226;
              uint64_t v124 = v220;
              uint64_t v122 = v227;
            }
            v122[2] = v127;
            v122[v125 + 4] = v124;
            v123 += 24;
            --v121;
          }
          while (v121);
          swift_bridgeObjectRelease(v231._countAndFlagsBits);
        }
        else
        {
          swift_bridgeObjectRelease((_BYTE)ML14RecommendationVyAF13MLRecommenderV10IdentifierOALGG_ALs5NeverOTg503_s8d4ML13g136V15recommendations9fromUsers8maxCount18restrictingToItems9excluding0L8ObservedAA11MLDataTableVSayAA12MLIdentifier_pG_SiAMSgAKSgSbtKFAC10h5OAA14F58VyA2QGcfu2_32d1e1b7ed5e9e4cd3ca03cf5b44db102cAtQTf3nnnpk_nTf1cn_nTm);
          uint64_t v122 = _swiftEmptyArrayStorage;
        }
        v227 = v122;
        uint64_t v138 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [Int]);
        uint64_t v139 = lazy protocol witness table accessor for type FullyConnectedNetworkClassifier<Float, String> and conformance FullyConnectedNetworkClassifier<A, B>(&lazy protocol witness table cache variable for type [Int] and conformance [A], &demangling cache variable for type metadata for [Int], (uint64_t)&protocol conformance descriptor for [A]);
        unint64_t v140 = v201;
        Column.init<A>(name:contents:)(v216, __src, &v227, &type metadata for Int, v138, v139);
        DataFrame.append<A>(column:)(v140, &type metadata for Int);
        int64_t v141 = v140;
        uint64_t v142 = v205;
        uint64_t v143 = v204;
      }
      else
      {
        unint64_t v128 = v219;
        uint64_t v129 = _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSay8CreateML14RecommendationVyAF13MLRecommenderV10IdentifierOALGG_ALs5NeverOTg503_s8d4ML13g136V15recommendations9fromUsers8maxCount18restrictingToItems9excluding0L8ObservedAA11MLDataTableVSayAA12MLIdentifier_pG_SiAMSgAKSgSbtKFAC10h5OAA14F58VyA2QGcfu2_32d1e1b7ed5e9e4cd3ca03cf5b44db102cAtQTf3nnnpk_nTf1cn_nTm((uint64_t)v212);
        uint64_t v130 = v129;
        uint64_t v206 = v128;
        int64_t v131 = v129[2];
        if (v131)
        {
          v227 = _swiftEmptyArrayStorage;
          int64_t v210 = v131;
          specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v131, 0);
          uint64_t v132 = v227;
          uint64_t v201 = v130;
          uint64_t v133 = v130 + 48;
          do
          {
            if (*v133) {
              BUG();
            }
            uint64_t v226 = (void *)*((void *)v133 - 2);
            uint64_t v134 = *((void *)v133 - 1);
            v227 = v132;
            unint64_t v135 = v132[2];
            unint64_t v211 = v132[3];
            unint64_t v136 = v211 >> 1;
            v231._uint64_t countAndFlagsBits = v135 + 1;
            uint64_t v220 = v134;
            swift_bridgeObjectRetain(v134);
            if (v136 <= v135)
            {
              specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v211 >= 2, v231._countAndFlagsBits, 1);
              uint64_t v132 = v227;
            }
            v132[2] = v231._countAndFlagsBits;
            uint64_t v137 = 2 * v135;
            v132[v137 + 4] = v226;
            v132[v137 + 5] = v220;
            v133 += 24;
            --v210;
          }
          while (v210);
          swift_bridgeObjectRelease((_BYTE)v201);
        }
        else
        {
          swift_bridgeObjectRelease((_BYTE)v129);
          uint64_t v132 = _swiftEmptyArrayStorage;
        }
        v227 = v132;
        uint64_t v144 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [String]);
        uint64_t v145 = lazy protocol witness table accessor for type FullyConnectedNetworkClassifier<Float, String> and conformance FullyConnectedNetworkClassifier<A, B>(&lazy protocol witness table cache variable for type [String] and conformance [A], &demangling cache variable for type metadata for [String], (uint64_t)&protocol conformance descriptor for [A]);
        double v146 = v190;
        Column.init<A>(name:contents:)(v216, __src, &v227, &type metadata for String, v144, v145);
        DataFrame.append<A>(column:)(v146, &type metadata for String);
        int64_t v141 = v146;
        uint64_t v142 = v195;
        uint64_t v143 = v194;
      }
      (*(void (**)(unsigned char *, uint64_t))(v143 + 8))(v141, v142);
      uint64_t v147 = (uint64_t)v212;
      uint64_t v148 = (uint64_t)v206;
      ML14RecommendationVyAF13MLRecommenderV10IdentifierOALGG_Sds5NeverOTg503_s8d4ML13g138V15recommendations9fromUsers8maxCount18restrictingToItems9excluding0L8ObservedAA11MLDataTableVSayAA12MLIdentifier_pG_SiAMSgAKSgSbtKFSdAA14f6VyAC10H57OASGcfu4_32ba0ef4f5a3599e9812b06a0e93fdc0a1ATSdTf3nnnpk_nTf1cn_n = _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSay8CreateML14RecommendationVyAF13MLRecommenderV10IdentifierOALGG_Sds5NeverOTg503_s8d4ML13g138V15recommendations9fromUsers8maxCount18restrictingToItems9excluding0L8ObservedAA11MLDataTableVSayAA12MLIdentifier_pG_SiAMSgAKSgSbtKFSdAA14f6VyAC10H57OASGcfu4_32ba0ef4f5a3599e9812b06a0e93fdc0a1ATSdTf3nnnpk_nTf1cn_n((uint64_t)v212);
      v231._uint64_t countAndFlagsBits = v148;
      v227 = ML14RecommendationVyAF13MLRecommenderV10IdentifierOALGG_Sds5NeverOTg503_s8d4ML13g138V15recommendations9fromUsers8maxCount18restrictingToItems9excluding0L8ObservedAA11MLDataTableVSayAA12MLIdentifier_pG_SiAMSgAKSgSbtKFSdAA14f6VyAC10H57OASGcfu4_32ba0ef4f5a3599e9812b06a0e93fdc0a1ATSdTf3nnnpk_nTf1cn_n;
      uint64_t v150 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [Double]);
      uint64_t v151 = lazy protocol witness table accessor for type FullyConnectedNetworkClassifier<Float, String> and conformance FullyConnectedNetworkClassifier<A, B>(&lazy protocol witness table cache variable for type [Double] and conformance [A], &demangling cache variable for type metadata for [Double], (uint64_t)&protocol conformance descriptor for [A]);
      id v152 = v200;
      Column.init<A>(name:contents:)(0x65726F6373, 0xE500000000000000, &v227, &type metadata for Double, v150, v151);
      uint64_t v153 = v218;
      DataFrame.append<A>(column:)(v152, &type metadata for Double);
      uint64_t v154 = v231._countAndFlagsBits;
      ML14RecommendationVyAF13MLRecommenderV10IdentifierOALGG_Sis5NeverOTg503_s8d4ML13g138V15recommendations9fromUsers8maxCount18restrictingToItems9excluding0L8ObservedAA11MLDataTableVSayAA12MLIdentifier_pG_SiAMSgAKSgSbtKFSiAA14f6VyAC10H58OASGcfu5_33_4d997128bfdac600b62536b5ddbe07b5ATSiTf3nnnpk_nTf1cn_n = _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSay8CreateML14RecommendationVyAF13MLRecommenderV10IdentifierOALGG_Sis5NeverOTg503_s8d4ML13g138V15recommendations9fromUsers8maxCount18restrictingToItems9excluding0L8ObservedAA11MLDataTableVSayAA12MLIdentifier_pG_SiAMSgAKSgSbtKFSiAA14f6VyAC10H58OASGcfu5_33_4d997128bfdac600b62536b5ddbe07b5ATSiTf3nnnpk_nTf1cn_n(v147);
      v231._uint64_t countAndFlagsBits = v154;
      swift_bridgeObjectRelease(v147);
      swift_bridgeObjectRelease((_BYTE)v224);
      swift_bridgeObjectRelease((_BYTE)v207);
      v227 = ML14RecommendationVyAF13MLRecommenderV10IdentifierOALGG_Sis5NeverOTg503_s8d4ML13g138V15recommendations9fromUsers8maxCount18restrictingToItems9excluding0L8ObservedAA11MLDataTableVSayAA12MLIdentifier_pG_SiAMSgAKSgSbtKFSiAA14f6VyAC10H58OASGcfu5_33_4d997128bfdac600b62536b5ddbe07b5ATSiTf3nnnpk_nTf1cn_n;
      uint64_t v156 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [Int]);
      uint64_t v157 = lazy protocol witness table accessor for type FullyConnectedNetworkClassifier<Float, String> and conformance FullyConnectedNetworkClassifier<A, B>(&lazy protocol witness table cache variable for type [Int] and conformance [A], &demangling cache variable for type metadata for [Int], (uint64_t)&protocol conformance descriptor for [A]);
      uint64_t v158 = v156;
      uint64_t v159 = v189;
      Column.init<A>(name:contents:)(1802396018, 0xE400000000000000, &v227, &type metadata for Int, v158, v157);
      DataFrame.append<A>(column:)(v159, &type metadata for Int);
      uint64_t v160 = (uint64_t)v192;
      uint64_t v161 = v191;
      *(double *)a6.i64 = (*(double (**)(unsigned char *, unsigned char *, uint64_t))(v202 + 16))(v192, v153, v191);
      uint64_t v83 = v203;
      uint64_t v162 = v231._countAndFlagsBits;
      MLDataTable.init(_:convertArraysToShapedArrays:)(v160, 0, a6);
      if (!v162)
      {
        (*(void (**)(unsigned char *, uint64_t))(v204 + 8))(v159, v205);
        (*(void (**)(unsigned char *, uint64_t))(v196 + 8))(v200, v197);
        return (*(uint64_t (**)(unsigned char *, uint64_t))(v202 + 8))(v218, v161);
      }
      (*(void (**)(unsigned char *, uint64_t))(v204 + 8))(v159, v205);
      (*(void (**)(unsigned char *, uint64_t))(v196 + 8))(v200, v197);
      uint64_t result = (*(uint64_t (**)(unsigned char *, uint64_t))(v202 + 8))(v218, v161);
      uint64_t v79 = v162;
    }
    uint64_t *v83 = v79;
    *((unsigned char *)v83 + 8) = 1;
    return result;
  }
  unsigned __int8 v230 = v54;
  uint64_t v57 = 0;
  Swift::Int v208 = v55;
  uint64_t v193 = type metadata accessor for MLRecommender(0);
  char v58 = *((unsigned char *)__src + *(int *)(v193 + 40));
  Swift::Int v59 = v208;
  uint64_t v60 = (char *)_swiftEmptyArrayStorage;
  char v225 = v58;
  while (1)
  {
    if (v59 == v57) {
      BUG();
    }
    if (v58)
    {
      if (v56) {
        goto LABEL_84;
      }
      uint64_t v61 = (uint64_t)v219;
      outlined copy of Result<_DataTable, Error>((uint64_t)v219, 0);
      _UntypedColumn.valueAtIndex(index:)(v57, *(double *)a6.i64);
      outlined consume of Result<_DataTable, Error>(v61, 0);
      uint64_t v62 = v227;
      if (v229)
      {
        outlined consume of MLDataValue(v227, v228, v229);
LABEL_84:
        swift_bridgeObjectRelease((_BYTE)v60);
        swift_bridgeObjectRelease_n(v224, 2, v163, v164, v165);
        swift_bridgeObjectRelease(v221);
        uint64_t v166 = lazy protocol witness table accessor for type MLCreateError and conformance MLCreateError();
        swift_allocError(&type metadata for MLCreateError, v166, 0, 0);
        *(void *)uint64_t v167 = 0xD000000000000022;
        uint64_t v171 = " or Int but it contains ";
        goto LABEL_93;
      }
      v231._uint64_t countAndFlagsBits = 0;
    }
    else
    {
      if (v56) {
        goto LABEL_86;
      }
      uint64_t v63 = (uint64_t)v219;
      outlined copy of Result<_DataTable, Error>((uint64_t)v219, 0);
      _UntypedColumn.valueAtIndex(index:)(v57, *(double *)a6.i64);
      outlined consume of Result<_DataTable, Error>(v63, 0);
      uint64_t v62 = v227;
      if (v229 != 2)
      {
        outlined consume of MLDataValue(v227, v228, v229);
LABEL_86:
        swift_bridgeObjectRelease((_BYTE)v60);
        swift_bridgeObjectRelease_n(v224, 2, v172, v173, v174);
        swift_bridgeObjectRelease(v221);
        uint64_t v166 = lazy protocol witness table accessor for type MLCreateError and conformance MLCreateError();
        swift_allocError(&type metadata for MLCreateError, v166, 0, 0);
        *(void *)uint64_t v167 = 0xD000000000000021;
        uint64_t v171 = "items identifiers.";
        goto LABEL_93;
      }
      v231._uint64_t countAndFlagsBits = (uint64_t)v228;
    }
    char v64 = *((unsigned char *)__src + *(int *)(v193 + 44));
    uint64_t v226 = v62;
    LOBYTE(v212) = v64;
    if (v64)
    {
      if (v230)
      {
        char v175 = v58;
        char v176 = (char)v224;
        swift_bridgeObjectRelease((_BYTE)v224);
        swift_bridgeObjectRelease(v221);
        char v177 = v175;
        uint64_t v178 = (uint64_t)v62;
      }
      else
      {
        uint64_t v65 = v217;
        outlined copy of Result<_DataTable, Error>(v217, 0);
        _UntypedColumn.valueAtIndex(index:)(v57, *(double *)a6.i64);
        outlined consume of Result<_DataTable, Error>(v65, 0);
        uint64_t v66 = v227;
        if (!v229)
        {
          uint64_t v216 = 0;
          goto LABEL_30;
        }
        outlined consume of MLDataValue(v227, v228, v229);
        char v183 = v58;
        char v176 = (char)v224;
        swift_bridgeObjectRelease((_BYTE)v224);
        swift_bridgeObjectRelease(v221);
        char v177 = v183;
        uint64_t v178 = (uint64_t)v226;
      }
      outlined consume of MLRecommender.Identifier(v178, v231._countAndFlagsBits, v177);
      swift_bridgeObjectRelease(v176);
      swift_bridgeObjectRelease((_BYTE)v60);
      uint64_t v166 = lazy protocol witness table accessor for type MLCreateError and conformance MLCreateError();
      swift_allocError(&type metadata for MLCreateError, v166, 0, 0);
      *(void *)uint64_t v167 = 0xD000000000000023;
      uint64_t v171 = " user identifiers.";
      goto LABEL_93;
    }
    if (v230) {
      break;
    }
    uint64_t v67 = v217;
    outlined copy of Result<_DataTable, Error>(v217, 0);
    _UntypedColumn.valueAtIndex(index:)(v57, *(double *)a6.i64);
    outlined consume of Result<_DataTable, Error>(v67, 0);
    uint64_t v66 = v227;
    if (v229 != 2)
    {
      outlined consume of MLDataValue(v227, v228, v229);
      char v184 = v58;
      char v180 = (char)v224;
      swift_bridgeObjectRelease((_BYTE)v224);
      swift_bridgeObjectRelease(v221);
      char v181 = v184;
      uint64_t v182 = (uint64_t)v226;
      goto LABEL_92;
    }
    uint64_t v216 = v228;
LABEL_30:
    if (!swift_isUniquelyReferenced_nonNull_native(v60)) {
      uint64_t v60 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *((void *)v60 + 2) + 1, 1, (uint64_t)v60);
    }
    unint64_t v68 = *((void *)v60 + 2);
    uint64_t v69 = v60;
    if (*((void *)v60 + 3) >> 1 <= v68) {
      uint64_t v69 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(*((void *)v60 + 3) >= 2uLL, v68 + 1, 1, (uint64_t)v60);
    }
    ++v57;
    *((void *)v69 + 2) = v68 + 1;
    uint64_t v60 = v69;
    uint64_t v70 = 48 * v68;
    *(void *)&v60[v70 + 32] = v226;
    *(void *)&v60[v70 + 40] = v231._countAndFlagsBits;
    char v58 = v225;
    v60[v70 + 48] = v225 & 1;
    *(void *)&v60[v70 + 56] = v66;
    *(void *)&v60[v70 + 64] = v216;
    v60[v70 + 72] = (char)v212;
    Swift::Int v59 = v208;
    char v56 = (char)v207;
    if (v208 == v57) {
      goto LABEL_38;
    }
  }
  char v179 = v58;
  char v180 = (char)v224;
  swift_bridgeObjectRelease((_BYTE)v224);
  swift_bridgeObjectRelease(v221);
  char v181 = v179;
  uint64_t v182 = (uint64_t)v62;
LABEL_92:
  outlined consume of MLRecommender.Identifier(v182, v231._countAndFlagsBits, v181);
  swift_bridgeObjectRelease(v180);
  swift_bridgeObjectRelease((_BYTE)v60);
  uint64_t v166 = lazy protocol witness table accessor for type MLCreateError and conformance MLCreateError();
  swift_allocError(&type metadata for MLCreateError, v166, 0, 0);
  *(void *)uint64_t v167 = 0xD000000000000022;
  uint64_t v171 = " items identifiers.";
LABEL_93:
  uint64_t v185 = (uint64_t)v214;
  char v186 = v223;
  char v187 = v222;
  *(void *)(v167 + 8) = (unint64_t)v171 | 0x8000000000000000;
  *(_OWORD *)(v167 + 16) = 0;
  *(_OWORD *)(v167 + 32) = 0;
  *(unsigned char *)(v167 + 48) = 0;
  swift_willThrow(&type metadata for MLCreateError, v166, v167, v168, v169, v170);
  outlined consume of MLDataTable?(v185, v186);
  outlined consume of Result<_DataTable, Error>((uint64_t)v219, v209);
  return outlined consume of Result<_DataTable, Error>(v217, v187);
}

void *MLRecommender.mapUsers(_:)(uint64_t a1)
{
  uint64_t v3 = type metadata accessor for MLRecommender(0);
  int64_t v4 = *(void *)(a1 + 16);
  if (*(unsigned char *)(v2 + *(int *)(v3 + 40)))
  {
    if (v4)
    {
      uint64_t v38 = v1;
      uint64_t v40 = _swiftEmptyArrayStorage;
      specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v4, 0);
      for (uint64_t i = a1 + 32; ; i += 40)
      {
        int64_t v37 = v4;
        outlined init with copy of TabularRegressionTask(i, (uint64_t)v30);
        uint64_t v6 = v31;
        uint64_t v7 = v32;
        uint64_t v8 = __swift_project_boxed_opaque_existential_0Tm(v30, v31);
        (*(void (**)(uint64_t, uint64_t))(v7 + 8))(v6, v7);
        int64_t v9 = v34;
        if (v36) {
          break;
        }
        __swift_destroy_boxed_opaque_existential_1Tm(v30);
        uint64_t v8 = v40;
        if (!swift_isUniquelyReferenced_nonNull_native(v40))
        {
          specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v8[2] + 1, 1);
          uint64_t v8 = v40;
        }
        unint64_t v10 = v8[2];
        unint64_t v11 = v8[3];
        uint64_t v12 = v10 + 1;
        if (v11 >> 1 <= v10)
        {
          uint64_t v39 = v10 + 1;
          specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v11 >= 2, v10 + 1, 1);
          uint64_t v12 = v39;
          uint64_t v8 = v40;
        }
        _OWORD v8[2] = v12;
        uint64_t v13 = 3 * v10;
        v8[v13 + 4] = v9;
        v8[v13 + 5] = 0;
        LOBYTE(v8[v13 + 6]) = 1;
        int64_t v4 = v37 - 1;
        if (v37 == 1) {
          return v8;
        }
      }
      outlined consume of MLDataValue(v34, v35, v36);
      uint64_t v23 = lazy protocol witness table accessor for type MLCreateError and conformance MLCreateError();
      swift_allocError(&type metadata for MLCreateError, v23, 0, 0);
      *(void *)uint64_t v24 = 0xD000000000000022;
      int64_t v28 = " or Int but it contains ";
LABEL_23:
      *(void *)(v24 + 8) = (unint64_t)v28 | 0x8000000000000000;
      *(_OWORD *)(v24 + 16) = 0;
      *(_OWORD *)(v24 + 32) = 0;
      *(unsigned char *)(v24 + 48) = 0;
      swift_willThrow(&type metadata for MLCreateError, v23, v24, v25, v26, v27);
      __swift_destroy_boxed_opaque_existential_1Tm(v30);
      swift_release();
      return v8;
    }
  }
  else if (v4)
  {
    uint64_t v38 = v1;
    uint64_t v40 = _swiftEmptyArrayStorage;
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v4, 0);
    uint64_t v14 = a1 + 32;
    while (1)
    {
      int64_t v37 = v4;
      uint64_t v39 = v14;
      outlined init with copy of TabularRegressionTask(v14, (uint64_t)v30);
      uint64_t v15 = v31;
      uint64_t v16 = v32;
      uint64_t v8 = __swift_project_boxed_opaque_existential_0Tm(v30, v31);
      (*(void (**)(uint64_t, uint64_t))(v16 + 8))(v15, v16);
      uint64_t v17 = v34;
      if (v36 != 2) {
        break;
      }
      uint64_t v33 = v35;
      __swift_destroy_boxed_opaque_existential_1Tm(v30);
      uint64_t v8 = v40;
      if (!swift_isUniquelyReferenced_nonNull_native(v40))
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v8[2] + 1, 1);
        uint64_t v8 = v40;
      }
      uint64_t v18 = v39;
      unint64_t v19 = v8[2];
      unint64_t v20 = v8[3];
      uint64_t v21 = v19 + 1;
      if (v20 >> 1 <= v19)
      {
        uint64_t v39 = v19 + 1;
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v20 >= 2, v19 + 1, 1);
        uint64_t v21 = v39;
        uint64_t v8 = v40;
      }
      _OWORD v8[2] = v21;
      uint64_t v22 = 3 * v19;
      v8[v22 + 4] = v17;
      v8[v22 + 5] = v33;
      LOBYTE(v8[v22 + 6]) = 0;
      uint64_t v14 = v18 + 40;
      int64_t v4 = v37 - 1;
      if (v37 == 1) {
        return v8;
      }
    }
    outlined consume of MLDataValue(v34, v35, v36);
    uint64_t v23 = lazy protocol witness table accessor for type MLCreateError and conformance MLCreateError();
    swift_allocError(&type metadata for MLCreateError, v23, 0, 0);
    *(void *)uint64_t v24 = 0xD000000000000021;
    int64_t v28 = "items identifiers.";
    goto LABEL_23;
  }
  return _swiftEmptyArrayStorage;
}

void *MLRecommender.mapItems(_:)(uint64_t a1)
{
  uint64_t v3 = type metadata accessor for MLRecommender(0);
  int64_t v4 = *(void *)(a1 + 16);
  if (*(unsigned char *)(v2 + *(int *)(v3 + 44)))
  {
    if (v4)
    {
      uint64_t v38 = v1;
      uint64_t v40 = _swiftEmptyArrayStorage;
      specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v4, 0);
      for (uint64_t i = a1 + 32; ; i += 40)
      {
        int64_t v37 = v4;
        outlined init with copy of TabularRegressionTask(i, (uint64_t)v30);
        uint64_t v6 = v31;
        uint64_t v7 = v32;
        uint64_t v8 = __swift_project_boxed_opaque_existential_0Tm(v30, v31);
        (*(void (**)(uint64_t, uint64_t))(v7 + 8))(v6, v7);
        int64_t v9 = v34;
        if (v36) {
          break;
        }
        __swift_destroy_boxed_opaque_existential_1Tm(v30);
        uint64_t v8 = v40;
        if (!swift_isUniquelyReferenced_nonNull_native(v40))
        {
          specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v8[2] + 1, 1);
          uint64_t v8 = v40;
        }
        unint64_t v10 = v8[2];
        unint64_t v11 = v8[3];
        uint64_t v12 = v10 + 1;
        if (v11 >> 1 <= v10)
        {
          uint64_t v39 = v10 + 1;
          specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v11 >= 2, v10 + 1, 1);
          uint64_t v12 = v39;
          uint64_t v8 = v40;
        }
        _OWORD v8[2] = v12;
        uint64_t v13 = 3 * v10;
        v8[v13 + 4] = v9;
        v8[v13 + 5] = 0;
        LOBYTE(v8[v13 + 6]) = 1;
        int64_t v4 = v37 - 1;
        if (v37 == 1) {
          return v8;
        }
      }
      outlined consume of MLDataValue(v34, v35, v36);
      uint64_t v23 = lazy protocol witness table accessor for type MLCreateError and conformance MLCreateError();
      swift_allocError(&type metadata for MLCreateError, v23, 0, 0);
      *(void *)uint64_t v24 = 0xD000000000000022;
      int64_t v28 = " recommendation.";
LABEL_23:
      *(void *)(v24 + 8) = (unint64_t)v28 | 0x8000000000000000;
      *(_OWORD *)(v24 + 16) = 0;
      *(_OWORD *)(v24 + 32) = 0;
      *(unsigned char *)(v24 + 48) = 0;
      swift_willThrow(&type metadata for MLCreateError, v23, v24, v25, v26, v27);
      __swift_destroy_boxed_opaque_existential_1Tm(v30);
      swift_release();
      return v8;
    }
  }
  else if (v4)
  {
    uint64_t v38 = v1;
    uint64_t v40 = _swiftEmptyArrayStorage;
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v4, 0);
    uint64_t v14 = a1 + 32;
    while (1)
    {
      int64_t v37 = v4;
      uint64_t v39 = v14;
      outlined init with copy of TabularRegressionTask(v14, (uint64_t)v30);
      uint64_t v15 = v31;
      uint64_t v16 = v32;
      uint64_t v8 = __swift_project_boxed_opaque_existential_0Tm(v30, v31);
      (*(void (**)(uint64_t, uint64_t))(v16 + 8))(v15, v16);
      uint64_t v17 = v34;
      if (v36 != 2) {
        break;
      }
      uint64_t v33 = v35;
      __swift_destroy_boxed_opaque_existential_1Tm(v30);
      uint64_t v8 = v40;
      if (!swift_isUniquelyReferenced_nonNull_native(v40))
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v8[2] + 1, 1);
        uint64_t v8 = v40;
      }
      uint64_t v18 = v39;
      unint64_t v19 = v8[2];
      unint64_t v20 = v8[3];
      uint64_t v21 = v19 + 1;
      if (v20 >> 1 <= v19)
      {
        uint64_t v39 = v19 + 1;
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v20 >= 2, v19 + 1, 1);
        uint64_t v21 = v39;
        uint64_t v8 = v40;
      }
      _OWORD v8[2] = v21;
      uint64_t v22 = 3 * v19;
      v8[v22 + 4] = v17;
      v8[v22 + 5] = v33;
      LOBYTE(v8[v22 + 6]) = 0;
      uint64_t v14 = v18 + 40;
      int64_t v4 = v37 - 1;
      if (v37 == 1) {
        return v8;
      }
    }
    outlined consume of MLDataValue(v34, v35, v36);
    uint64_t v23 = lazy protocol witness table accessor for type MLCreateError and conformance MLCreateError();
    swift_allocError(&type metadata for MLCreateError, v23, 0, 0);
    *(void *)uint64_t v24 = 0xD000000000000021;
    int64_t v28 = " item identifiers.";
    goto LABEL_23;
  }
  return _swiftEmptyArrayStorage;
}

void *specialized RecommenderModel.recommend<A>(users:limit:allowedItems:excludedInteractions:omittingObservedInteractions:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unsigned __int8 a5)
{
  unsigned __int8 v6 = a5;
  if (*(void *)(a4 + 16))
  {
    uint64_t v50 = *(void *)(a4 + 16);
    swift_bridgeObjectRetain(a4);
    char v53 = a4;
    uint64_t v8 = (unsigned __int8 *)(a4 + 72);
    int64_t v9 = _swiftEmptyDictionarySingleton;
    unint64_t v10 = 0;
    unint64_t v11 = 0;
    uint64_t v12 = 0;
    do
    {
      uint64_t v68 = (uint64_t)v10;
      uint64_t v66 = v11;
      uint64_t v69 = v9;
      Swift::UInt v67 = *((void *)v8 - 5);
      Swift::UInt v65 = *((void *)v8 - 4);
      LODWORD(v70) = *(v8 - 24);
      uint64_t v13 = *((void *)v8 - 2);
      uint64_t v14 = *((void *)v8 - 1);
      Swift::Int v59 = v8;
      unsigned __int8 v15 = *v8;
      outlined copy of MLRecommender.Identifier(v67, v65, (char)v70);
      outlined copy of MLRecommender.Identifier(v13, v14, v15);
      _sxRi_zRi0_zlySaySdGIsegr_SgWOe(v68, 0);
      uint64_t v16 = swift_allocObject(&unk_3986B8, 32, 7);
      *(void *)(v16 + 16) = specialized implicit closure #1 in RecommenderModel.recommend<A>(users:limit:allowedItems:excludedInteractions:omittingObservedInteractions:);
      uint64_t v68 = v16;
      *(void *)(v16 + 24) = 0;
      Swift::UInt v61 = v13;
      uint64_t v49 = v14;
      int v57 = v15;
      outlined copy of MLRecommender.Identifier(v13, v14, v15);
      _sxRi_zRi0_zlySaySdGIsegr_SgWOe((uint64_t)v66, v12);
      uint64_t v17 = (uint64_t)v69;
      char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v69);
      v63[0] = v17;
      unint64_t v20 = specialized __RawDictionaryStorage.find<A>(_:)(v67, v65, (char)v70);
      BOOL v21 = (v19 & 1) == 0;
      BOOL v22 = __OFADD__(v69[2], v21);
      Swift::Int v23 = v69[2] + v21;
      if (v22) {
        BUG();
      }
      char v24 = v19;
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _NativeDictionary<MLRecommender.Identifier, Set<MLRecommender.Identifier>>);
      Swift::Bool v25 = _NativeDictionary.ensureUnique(isUnique:capacity:)(isUniquelyReferenced_nonNull_native, v23);
      uint64_t v26 = (void *)v63[0];
      if (v25)
      {
        unint64_t v20 = specialized __RawDictionaryStorage.find<A>(_:)(v67, v65, (char)v70);
        if ((v24 & 1) != (v27 & 1))
        {
          KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(&type metadata for MLRecommender.Identifier);
          BUG();
        }
      }
      swift_bridgeObjectRelease(0);
      swift_bridgeObjectRetain((_BYTE)v26);
      LODWORD(v66) = v70;
      if ((v24 & 1) == 0)
      {
        uint64_t v28 = (*(uint64_t (**)(void))(v68 + 16))();
        v26[(v20 >> 6) + 8] |= 1 << v20;
        uint64_t v29 = v26[6];
        uint64_t v30 = 24 * v20;
        Swift::UInt v31 = v67;
        *(void *)(v29 + v30) = v67;
        Swift::UInt v32 = v65;
        *(void *)(v29 + v30 + 8) = v65;
        *(unsigned char *)(v29 + v30 + 16) = (_BYTE)v70;
        *(void *)(v26[7] + 8 * v20) = v28;
        uint64_t v33 = v26[2];
        BOOL v22 = __OFADD__(1, v33);
        uint64_t v34 = v33 + 1;
        if (v22) {
          BUG();
        }
        v26[2] = v34;
        outlined copy of MLRecommender.Identifier(v31, v32, (char)v66);
      }
      swift_bridgeObjectRelease((_BYTE)v26);
      uint64_t v69 = v26;
      specialized Set._Variant.insert(_:)(v63, v61, v49, v57);
      outlined consume of MLRecommender.Identifier(v63[0], v63[1], v64);
      outlined consume of MLRecommender.Identifier(v67, v65, (char)v66);
      int64_t v9 = v69;
      outlined consume of MLRecommender.Identifier(v61, v49, v57);
      uint64_t v8 = v59 + 48;
      unint64_t v10 = specialized implicit closure #1 in RecommenderModel.recommend<A>(users:limit:allowedItems:excludedInteractions:omittingObservedInteractions:);
      unint64_t v11 = thunk for @callee_guaranteed () -> (@owned [B])specialized partial apply;
      uint64_t v12 = v68;
      --v50;
    }
    while (v50);
    swift_bridgeObjectRelease(v53);
    uint64_t v60 = thunk for @callee_guaranteed () -> (@owned [B])specialized partial apply;
    uint64_t v62 = specialized implicit closure #1 in RecommenderModel.recommend<A>(users:limit:allowedItems:excludedInteractions:omittingObservedInteractions:);
    uint64_t v35 = a1;
    unsigned __int8 v6 = a5;
  }
  else
  {
    uint64_t v35 = a1;
    int64_t v9 = _swiftEmptyDictionarySingleton;
    uint64_t v62 = 0;
    uint64_t v60 = 0;
    uint64_t v68 = 0;
  }
  char v36 = _swiftEmptyArrayStorage;
  v63[0] = (uint64_t)_swiftEmptyArrayStorage;
  if (*(void *)(v35 + 16))
  {
    uint64_t v55 = *(void *)(v35 + 16);
    swift_bridgeObjectRetain(v35);
    int64_t v37 = (unsigned __int8 *)(v35 + 48);
    LODWORD(v66) = v6;
    uint64_t v69 = v9;
    while (1)
    {
      Swift::UInt v38 = *((void *)v37 - 2);
      uint64_t v39 = *((void *)v37 - 1);
      uint64_t v70 = (void *)v9[2];
      char v58 = v37;
      int v40 = *v37;
      Swift::UInt v65 = v38;
      outlined copy of MLRecommender.Identifier(v38, v39, v40);
      outlined copy of MLRecommender.Identifier(v38, v39, v40);
      uint64_t v41 = &_swiftEmptySetSingleton;
      char v36 = (void *)v39;
      Swift::UInt v42 = v65;
      if (v70)
      {
        unint64_t v43 = specialized __RawDictionaryStorage.find<A>(_:)(v65, (uint64_t)v36, v40);
        uint64_t v41 = &_swiftEmptySetSingleton;
        if (v44)
        {
          uint64_t v70 = *(void **)(v69[7] + 8 * v43);
          swift_bridgeObjectRetain((_BYTE)v70);
          uint64_t v41 = v70;
        }
      }
      uint64_t v70 = v41;
      outlined consume of MLRecommender.Identifier(v42, (uint64_t)v36, v40);
      uint64_t v45 = specialized RecommenderModel.recommend(for:limit:allowedItems:disallowedItems:omittingObservedInteractions:)(v42, (uint64_t)v36, v40, a2, a3, (uint64_t)v41, (char)v66);
      LODWORD(v67) = v40;
      swift_bridgeObjectRelease((_BYTE)v70);
      if (v5) {
        break;
      }
      specialized Array.append<A>(contentsOf:)((uint64_t)v45);
      outlined consume of MLRecommender.Identifier(v42, (uint64_t)v36, v67);
      int64_t v37 = v58 + 24;
      BOOL v46 = v55-- == 1;
      int64_t v9 = v69;
      if (v46)
      {
        swift_bridgeObjectRelease(a1);
        char v36 = (void *)v63[0];
        goto LABEL_20;
      }
    }
    outlined consume of MLRecommender.Identifier(v42, (uint64_t)v36, v67);
    swift_bridgeObjectRelease(a1);
    swift_bridgeObjectRelease(v63[0]);
    swift_bridgeObjectRelease((_BYTE)v69);
  }
  else
  {
LABEL_20:
    swift_bridgeObjectRelease((_BYTE)v9);
  }
  uint64_t v47 = v68;
  _sxRi_zRi0_zlySaySdGIsegr_SgWOe((uint64_t)v62, 0);
  _sxRi_zRi0_zlySaySdGIsegr_SgWOe((uint64_t)v60, v47);
  return v36;
}

uint64_t specialized RecommenderModel.recommend<A>(users:limit:allowedItems:excludedInteractions:omittingObservedInteractions:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, char a5)
{
  uint64_t v76 = a1;
  if (*(void *)(a4 + 16))
  {
    uint64_t v62 = *(void *)(a4 + 16);
    swift_bridgeObjectRetain(a4);
    char v63 = a4;
    uint64_t v7 = (unsigned __int8 *)(a4 + 72);
    uint64_t v8 = _swiftEmptyDictionarySingleton;
    int64_t v9 = 0;
    unint64_t v10 = 0;
    uint64_t v11 = 0;
    do
    {
      unint64_t v73 = (unint64_t)v9;
      uint64_t v77 = (uint64_t)v10;
      long long v71 = v8;
      Swift::UInt v74 = *((void *)v7 - 5);
      uint64_t v72 = *((void *)v7 - 4);
      LODWORD(v75) = *(v7 - 24);
      uint64_t v12 = *((void *)v7 - 2);
      uint64_t v13 = *((void *)v7 - 1);
      Swift::UInt v67 = v7;
      unsigned __int8 v14 = *v7;
      outlined copy of MLRecommender.Identifier(v74, v72, v75);
      outlined copy of MLRecommender.Identifier(v12, v13, v14);
      _sxRi_zRi0_zlySaySdGIsegr_SgWOe(v73, 0);
      uint64_t v15 = swift_allocObject(&unk_398690, 32, 7);
      *(void *)(v15 + 16) = specialized implicit closure #1 in RecommenderModel.recommend<A>(users:limit:allowedItems:excludedInteractions:omittingObservedInteractions:);
      uint64_t v65 = v15;
      *(void *)(v15 + 24) = 0;
      Swift::UInt v58 = v12;
      uint64_t v59 = v13;
      LODWORD(v73) = v14;
      outlined copy of MLRecommender.Identifier(v12, v13, v14);
      _sxRi_zRi0_zlySaySdGIsegr_SgWOe(v77, v11);
      uint64_t v16 = (uint64_t)v71;
      char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v71);
      v69[0] = v16;
      unint64_t v19 = specialized __RawDictionaryStorage.find<A>(_:)(v74, v72, v75);
      BOOL v20 = (v18 & 1) == 0;
      BOOL v21 = __OFADD__(v71[2], v20);
      Swift::Int v22 = v71[2] + v20;
      if (v21) {
        BUG();
      }
      char v23 = v18;
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _NativeDictionary<MLRecommender.Identifier, Set<MLRecommender.Identifier>>);
      Swift::Bool v24 = _NativeDictionary.ensureUnique(isUnique:capacity:)(isUniquelyReferenced_nonNull_native, v22);
      Swift::Bool v25 = (void *)v69[0];
      if (v24)
      {
        unint64_t v19 = specialized __RawDictionaryStorage.find<A>(_:)(v74, v72, v75);
        if ((v23 & 1) != (v26 & 1))
        {
          KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(&type metadata for MLRecommender.Identifier);
          BUG();
        }
      }
      swift_bridgeObjectRelease(0);
      swift_bridgeObjectRetain((_BYTE)v25);
      LODWORD(v77) = v75;
      if ((v23 & 1) == 0)
      {
        char v27 = v77;
        uint64_t v28 = (*(uint64_t (**)(void))(v65 + 16))();
        v25[(v19 >> 6) + 8] |= 1 << v19;
        uint64_t v29 = v25[6];
        uint64_t v30 = 24 * v19;
        Swift::UInt v31 = v74;
        *(void *)(v29 + v30) = v74;
        uint64_t v32 = v72;
        *(void *)(v29 + v30 + 8) = v72;
        *(unsigned char *)(v29 + v30 + 16) = v75;
        *(void *)(v25[7] + 8 * v19) = v28;
        uint64_t v33 = v25[2];
        BOOL v21 = __OFADD__(1, v33);
        uint64_t v34 = v33 + 1;
        if (v21) {
          BUG();
        }
        v25[2] = v34;
        outlined copy of MLRecommender.Identifier(v31, v32, v27);
      }
      swift_bridgeObjectRelease((_BYTE)v25);
      long long v71 = v25;
      specialized Set._Variant.insert(_:)(v69, v58, v59, v73);
      outlined consume of MLRecommender.Identifier(v69[0], v69[1], v70);
      outlined consume of MLRecommender.Identifier(v74, v72, v77);
      uint64_t v8 = v71;
      outlined consume of MLRecommender.Identifier(v58, v59, v73);
      uint64_t v7 = v67 + 48;
      int64_t v9 = specialized implicit closure #1 in RecommenderModel.recommend<A>(users:limit:allowedItems:excludedInteractions:omittingObservedInteractions:);
      unint64_t v10 = thunk for @callee_guaranteed () -> (@owned [B])specialized partial apply;
      uint64_t v11 = v65;
      --v62;
    }
    while (v62);
    swift_bridgeObjectRelease(v63);
    uint64_t v66 = thunk for @callee_guaranteed () -> (@owned [B])specialized partial apply;
    uint64_t v68 = specialized implicit closure #1 in RecommenderModel.recommend<A>(users:limit:allowedItems:excludedInteractions:omittingObservedInteractions:);
  }
  else
  {
    uint64_t v8 = _swiftEmptyDictionarySingleton;
    uint64_t v68 = 0;
    uint64_t v66 = 0;
    uint64_t v65 = 0;
  }
  v69[0] = (uint64_t)_swiftEmptyArrayStorage;
  uint64_t v35 = 1 << *(unsigned char *)(v76 + 32);
  uint64_t v36 = ~(-1 << v35);
  if (v35 >= 64) {
    uint64_t v36 = -1;
  }
  unint64_t v37 = *(void *)(v76 + 56) & v36;
  uint64_t v77 = (unint64_t)(v35 + 63) >> 6;
  swift_bridgeObjectRetain(v76);
  uint64_t v38 = 0;
  long long v71 = v8;
  while (v37)
  {
    _BitScanForward64(&v39, v37);
    unint64_t v73 = (v37 - 1) & v37;
    uint64_t v72 = v38;
    unint64_t v40 = v39 | (v38 << 6);
LABEL_30:
    uint64_t v45 = *(void *)(v76 + 48);
    uint64_t v46 = 24 * v40;
    Swift::UInt v47 = *(void *)(v45 + v46);
    uint64_t v48 = *(void *)(v45 + v46 + 8);
    Swift::UInt v74 = v8[2];
    unsigned int v49 = *(unsigned __int8 *)(v45 + v46 + 16);
    outlined copy of MLRecommender.Identifier(v47, v48, *(unsigned char *)(v45 + v46 + 16));
    Swift::UInt v75 = v47;
    outlined copy of MLRecommender.Identifier(v47, v48, v49);
    uint64_t v50 = &_swiftEmptySetSingleton;
    if (v74)
    {
      unint64_t v51 = specialized __RawDictionaryStorage.find<A>(_:)(v75, v48, v49);
      uint64_t v50 = &_swiftEmptySetSingleton;
      if (v52)
      {
        uint64_t v50 = *(void **)(v8[7] + 8 * v51);
        swift_bridgeObjectRetain((_BYTE)v50);
      }
    }
    uint64_t v53 = (uint64_t)v50;
    Swift::UInt v74 = (Swift::UInt)v50;
    Swift::UInt v54 = v75;
    outlined consume of MLRecommender.Identifier(v75, v48, v49);
    uint64_t v55 = specialized RecommenderModel.recommend(for:limit:allowedItems:disallowedItems:omittingObservedInteractions:)(v54, v48, v49, a2, a3, v53, a5);
    uint64_t v56 = v49;
    swift_bridgeObjectRelease(v74);
    if (v5)
    {
      outlined consume of MLRecommender.Identifier(v75, v48, v49);
      swift_release();
      swift_bridgeObjectRelease(v69[0]);
      swift_bridgeObjectRelease((_BYTE)v71);
      goto LABEL_42;
    }
    specialized Array.append<A>(contentsOf:)((uint64_t)v55);
    outlined consume of MLRecommender.Identifier(v75, v48, v49);
    uint64_t v8 = v71;
    uint64_t v38 = v72;
    unint64_t v37 = v73;
  }
  BOOL v21 = __OFADD__(1, v38);
  uint64_t v41 = v38 + 1;
  if (v21) {
    BUG();
  }
  if (v41 >= v77) {
    goto LABEL_41;
  }
  unint64_t v42 = *(void *)(v76 + 8 * v41 + 56);
  if (v42)
  {
LABEL_29:
    _BitScanForward64(&v44, v42);
    unint64_t v73 = v42 & (v42 - 1);
    uint64_t v72 = v41;
    unint64_t v40 = v44 + (v41 << 6);
    goto LABEL_30;
  }
  uint64_t v43 = v41 + 1;
  if (v41 + 1 >= v77) {
    goto LABEL_41;
  }
  unint64_t v42 = *(void *)(v76 + 8 * v41 + 64);
  if (v42) {
    goto LABEL_28;
  }
  uint64_t v43 = v41 + 2;
  if (v41 + 2 >= v77) {
    goto LABEL_41;
  }
  unint64_t v42 = *(void *)(v76 + 8 * v41 + 72);
  if (v42) {
    goto LABEL_28;
  }
  uint64_t v43 = v41 + 3;
  if (v41 + 3 >= v77) {
    goto LABEL_41;
  }
  unint64_t v42 = *(void *)(v76 + 8 * v41 + 80);
  if (v42) {
    goto LABEL_28;
  }
  uint64_t v43 = v41 + 4;
  if (v41 + 4 >= v77) {
    goto LABEL_41;
  }
  unint64_t v42 = *(void *)(v76 + 8 * v41 + 88);
  if (v42)
  {
LABEL_28:
    uint64_t v41 = v43;
    goto LABEL_29;
  }
  v41 += 4;
  while (1)
  {
    BOOL v21 = __OFADD__(1, v41++);
    if (v21) {
      BUG();
    }
    if (v41 >= v77) {
      break;
    }
    unint64_t v42 = *(void *)(v76 + 8 * v41 + 56);
    if (v42) {
      goto LABEL_29;
    }
  }
LABEL_41:
  swift_release();
  uint64_t v56 = v69[0];
  swift_bridgeObjectRelease((_BYTE)v8);
LABEL_42:
  _sxRi_zRi0_zlySaySdGIsegr_SgWOe((uint64_t)v68, 0);
  _sxRi_zRi0_zlySaySdGIsegr_SgWOe((uint64_t)v66, v65);
  return v56;
}

uint64_t MLRecommender.recommendations<A>(fromUsers:maxCount:restrictingToItems:excluding:excludingObserved:)(void **a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5, uint64_t a6, __m128 a7, uint64_t a8, uint64_t a9)
{
  uint64_t v37 = v9;
  uint64_t v36 = a2;
  int v43 = a5;
  uint64_t v12 = *a1;
  char v13 = *((unsigned char *)a1 + 8);
  uint64_t v41 = *(void **)a3;
  char v46 = *(unsigned char *)(a3 + 8);
  uint64_t v38 = *(void **)a4;
  char v47 = *(unsigned char *)(a4 + 8);
  uint64_t v34 = v12;
  LOBYTE(v44) = v13;
  LOBYTE(v35) = v13;
  uint64_t v42 = type metadata accessor for MLDataColumn(0, a6, a8, a4);
  if (MLDataColumn.count.getter(v42) < 0) {
    BUG();
  }
  uint64_t v40 = v10;
  unint64_t v39 = v33;
  uint64_t v34 = 0;
  unsigned __int8 v14 = alloca(49);
  uint64_t v15 = alloca(64);
  uint64_t v35 = a6;
  uint64_t v36 = a8;
  uint64_t v37 = a9;
  uint64_t v38 = v12;
  LOBYTE(v39) = v44;
  uint64_t v16 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Range<Int>);
  uint64_t v17 = lazy protocol witness table accessor for type Range<Int> and conformance <> Range<A>();
  uint64_t v18 = v16;
  uint64_t v19 = a6;
  uint64_t v20 = v45;
  uint64_t v44 = _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lF((void (*)(unsigned char *, unsigned char *))partial apply for closure #1 in MLRecommender.recommendations<A>(fromUsers:maxCount:restrictingToItems:excluding:excludingObserved:), (uint64_t)v33, v18, a6, (uint64_t)&type metadata for Never, v17, (int)&protocol witness table for Never, v32);
  uint64_t v45 = v20;
  if (v46 == -1)
  {
    ML12MLIdentifier_ps5NeverOTg5 = 0;
    uint64_t v25 = a6;
  }
  else
  {
    BOOL v21 = v41;
    uint64_t v34 = v41;
    LOBYTE(v35) = v46 & 1;
    uint64_t v22 = MLDataColumn.count.getter(v42);
    if (v22 < 0) {
      BUG();
    }
    char v23 = alloca(49);
    Swift::Bool v24 = alloca(64);
    uint64_t v25 = v19;
    v48[2] = v19;
    v48[3] = a8;
    uint64_t savedregs = a9;
    retaddr = v21;
    uint64_t v26 = v45;
    ML12MLIdentifier_ps5NeverOTg5 = _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSnySiG_8CreateML12MLIdentifier_ps5NeverOTg5((void (*)(uint64_t *))partial apply for closure #2 in MLRecommender.recommendations<A>(fromUsers:maxCount:restrictingToItems:excluding:excludingObserved:), (uint64_t)v48, 0, v22);
    uint64_t v45 = v26;
  }
  uint64_t v28 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for MLIdentifier);
  char v29 = v44;
  uint64_t v30 = _arrayForceCast<A, B>(_:)(v44, v25, v28);
  swift_bridgeObjectRelease(v29);
  uint64_t v34 = v38;
  LOBYTE(v35) = v47;
  MLRecommender.recommendations(fromUsers:maxCount:restrictingToItems:excluding:excludingObserved:)(v30, v36, ML12MLIdentifier_ps5NeverOTg5, (uint64_t)&v34, v43, a7);
  swift_bridgeObjectRelease(v30);
  return swift_bridgeObjectRelease((_BYTE)ML12MLIdentifier_ps5NeverOTg5);
}

uint64_t closure #1 in MLRecommender.recommendations<A>(fromUsers:maxCount:restrictingToItems:excluding:excludingObserved:)(uint64_t *a1, double a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v6 = *a1;
  uint64_t v7 = type metadata accessor for MLDataColumn(0, a5, a6, a5);
  return MLDataColumn.subscript.getter(v6, v7, a2);
}

uint64_t closure #2 in MLRecommender.recommendations<A>(fromUsers:maxCount:restrictingToItems:excluding:excludingObserved:)(uint64_t *a1, double a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v10 = *a1;
  v7[3] = a5;
  void v7[4] = a7;
  __swift_allocate_boxed_opaque_existential_1(v7);
  uint64_t v12 = type metadata accessor for MLDataColumn(0, a5, a6, v11);
  return MLDataColumn.subscript.getter(v10, v12, a2);
}

void *specialized RecommenderModel.recommend(for:limit:allowedItems:disallowedItems:omittingObservedInteractions:)(Swift::UInt a1, uint64_t a2, char a3, uint64_t a4, uint64_t a5, uint64_t a6, char a7)
{
  uint64_t v55 = a6;
  uint64_t v52 = a4;
  v47[0] = a1;
  v47[1] = a2;
  char v48 = a3 & 1;
  uint64_t v53 = v8;
  qmemcpy(v46, v8, sizeof(v46));
  uint64_t v51 = specialized CategoricalLookupTable.index(of:)(a1, a2, a3 & 1, *(uint64_t *)&v46[0], *((uint64_t *)&v46[0] + 1));
  char v11 = v10;
  outlined retain of RecommenderTrainingData<MLRecommender.Identifier, MLRecommender.Identifier>(v46);
  uint64_t v12 = specialized Sequence.compactMap<A>(_:)(a5, (uint64_t *)v46);
  uint64_t v49 = specialized Set.init<A>(_:)((uint64_t)v12);
  outlined retain of RecommenderTrainingData<MLRecommender.Identifier, MLRecommender.Identifier>(v46);
  char v13 = specialized Sequence.compactMap<A>(_:)(v55, (uint64_t *)v46);
  uint64_t v14 = specialized Set.init<A>(_:)((uint64_t)v13);
  uint64_t v15 = v14;
  LOBYTE(v54) = v11;
  uint64_t v55 = v7;
  if (v11)
  {
    BOOL v21 = &_swiftEmptySetSingleton;
  }
  else
  {
    char v16 = BYTE8(v46[3]);
    uint64_t v50 = v14;
    char v17 = v46[4];
    long long v36 = v46[2];
    LOBYTE(v37) = v46[3];
    uint64_t v38 = (const void *)*((void *)&v46[3] + 1);
    long long v39 = v46[4];
    uint64_t v40 = v51;
    swift_bridgeObjectRetain(BYTE8(v46[3]));
    swift_bridgeObjectRetain(v17);
    swift_retain();
    uint64_t v18 = v55;
    uint64_t v19 = _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lF13LinearAlgebra12SparseMatrixV15MajorCollectionVySd_G_Sis5NeverOTg50127_s8CreateML21ItemSimilarityTrainerV03getC21CountThresholdForUser8itemInfo0K4ListSiSayAA0C10StatisticsVy0C5ScoreQzGG_qd__tSlRd__z5_Sdt7b56Rtd__lFS2i_Sdt_tcfu0_33_39c69c9f4ee04694167b65f5fa330960z4_SdtZ10Tf3nnnpk_nTf1cn_nTm(&v36);
    uint64_t v55 = v18;
    swift_release();
    char v20 = v17;
    uint64_t v15 = v50;
    swift_bridgeObjectRelease(v20);
    swift_bridgeObjectRelease(v16);
    BOOL v21 = (void *)specialized Set.init<A>(_:)((uint64_t)v19);
  }
  if (*(void *)(v49 + 16))
  {
    uint64_t v22 = v55;
    char v23 = specialized Sequence.filter(_:)(v49, v15, a7, (uint64_t)v21);
  }
  else
  {
    swift_bridgeObjectRelease(v49);
    uint64_t v22 = v55;
    char v23 = specialized Sequence.filter(_:)(0, *(void *)(*(void *)&v46[1] + 16), v15, a7, (uint64_t)v21);
  }
  uint64_t v24 = (uint64_t)v23;
  uint64_t v55 = v22;
  if (v54)
  {
    char v27 = specialized RecommenderModel.scoreAll<A>(itemIndices:userScores:)((uint64_t)v23, (uint64_t)_swiftEmptyArrayStorage);
  }
  else
  {
    uint64_t v54 = (uint64_t)v23;
    char v25 = BYTE8(v46[3]);
    char v26 = v46[4];
    long long v41 = v46[2];
    char v42 = v46[3];
    uint64_t v43 = *((void *)&v46[3] + 1);
    long long v44 = v46[4];
    uint64_t v45 = v51;
    swift_bridgeObjectRetain(BYTE8(v46[3]));
    swift_bridgeObjectRetain(v26);
    swift_retain();
    char v27 = specialized RecommenderModel.scoreAll<A>(itemIndices:userScores:)(v54, &v41);
    swift_release();
    swift_bridgeObjectRelease(v26);
    char v28 = v25;
    uint64_t v24 = v54;
    swift_bridgeObjectRelease(v28);
  }
  uint64_t v29 = v52;
  if (v27[2] < v52) {
    uint64_t v29 = v27[2];
  }
  if (v29 < 0) {
    BUG();
  }
  if (v29)
  {
    uint64_t v30 = v55;
    Swift::UInt v31 = (void *)specialized Sequence._minImplementation(count:sortedBy:)(v29, v24, (uint64_t)v27);
    uint64_t v55 = v30;
  }
  else
  {
    Swift::UInt v31 = _swiftEmptyArrayStorage;
  }
  swift_bridgeObjectRelease((_BYTE)v27);
  swift_bridgeObjectRelease(v24);
  uint64_t v32 = alloca(40);
  uint64_t v33 = alloca(48);
  uint64_t v37 = v47;
  uint64_t v38 = v53;
  *(void *)&long long v39 = v31;
  ML14RecommendationVyAG13MLRecommenderV10IdentifierOAMGs5NeverOTg5 = _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSnySiG_8CreateML14RecommendationVyAG13MLRecommenderV10IdentifierOAMGs5NeverOTg5((void (*)(void *))partial apply for specialized closure #2 in RecommenderModel.recommend(for:limit:allowedItems:disallowedItems:omittingObservedInteractions:), (uint64_t)&v36, 0, v29);
  swift_bridgeObjectRelease((_BYTE)v31);
  return ML14RecommendationVyAG13MLRecommenderV10IdentifierOAMGs5NeverOTg5;
}

char MLRecommender.evaluation(on:userColumn:itemColumn:ratingColumn:cutoffs:excludingObserved:)(void *a1, uint64_t a2, char *a3, uint64_t a4, void *a5, uint64_t a6, long long a7, char a8)
{
  return MLRecommender.evaluate(on:userColumn:itemColumn:ratingColumn:cutoffs:excludingObserved:)(a1, a2, a3, a4, a5, a6, (void *)a7, *((uint64_t *)&a7 + 1), a8);
}

char MLRecommender.evaluate(on:userColumn:itemColumn:ratingColumn:cutoffs:excludingObserved:)(void *a1, uint64_t a2, char *a3, uint64_t a4, void *a5, uint64_t a6, void *a7, uint64_t a8, char a9)
{
  v181._uint64_t countAndFlagsBits = a4;
  _ = a3;
  uint64_t v160 = v9;
  to._uint64_t countAndFlagsBits = a2;
  uint64_t v184 = v10;
  char __src = v11;
  v163._uint64_t countAndFlagsBits = a6;
  char v177 = a5;
  uint64_t v171 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Column<String>);
  v163._char object = *(void **)(v171 - 8);
  int64_t v13 = *((void *)v163._object + 8);
  uint64_t v14 = alloca(v13);
  uint64_t v15 = alloca(v13);
  uint64_t v174 = &v152;
  uint64_t v180 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for FilledColumn<Column<String>>);
  uint64_t v166 = *(void *)(v180 - 8);
  int64_t v16 = *(void *)(v166 + 64);
  char v17 = alloca(v16);
  uint64_t v18 = alloca(v16);
  uint64_t v173 = &v152;
  uint64_t v19 = alloca(v16);
  char v20 = alloca(v16);
  char v175 = &v152;
  uint64_t v164 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Column<Int>);
  uint64_t v165 = *(void *)(v164 - 8);
  int64_t v21 = *(void *)(v165 + 64);
  uint64_t v22 = alloca(v21);
  char v23 = alloca(v21);
  uint64_t v172 = &v152;
  uint64_t v183 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for FilledColumn<Column<Int>>);
  uint64_t v167 = *(void *)(v183 - 8);
  int64_t v24 = *(void *)(v167 + 64);
  char v25 = alloca(v24);
  char v26 = alloca(v24);
  char v176 = &v152;
  char v27 = alloca(v24);
  char v28 = alloca(v24);
  uint64_t v169 = &v152;
  uint64_t v157 = type metadata accessor for AnyColumn(0);
  uint64_t v158 = *(void *)(v157 - 8);
  int64_t v29 = *(void *)(v158 + 64);
  uint64_t v30 = alloca(v29);
  Swift::UInt v31 = alloca(v29);
  uint64_t v159 = &v152;
  uint64_t v168 = type metadata accessor for DataFrame(0);
  uint64_t v32 = *(void *)(v168 - 8);
  int64_t v33 = *(void *)(v32 + 64);
  uint64_t v34 = alloca(v33);
  uint64_t v35 = alloca(v33);
  uint64_t v178 = &v152;
  char v186 = (void *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<String>);
  uint64_t inited = (void *)swift_initStackObject(v186, v154);
  inited[2] = 1;
  inited[3] = 2;
  inited[4] = to._countAndFlagsBits;
  char v37 = (char)_;
  inited[5] = _;
  swift_bridgeObjectRetain(v37);
  v181._char object = a1;
  DataFrame.validateContainsColumns(_:context:)((Swift::OpaquePointer)inited, (Swift::String)__PAIR128__(0xE400000000000000, 1919251285));
  if (v38) {
    goto LABEL_6;
  }
  uint64_t v170 = v32;
  swift_setDeallocating(inited);
  specialized _ContiguousArrayStorage.__deallocating_deinit();
  uint64_t inited = (void *)swift_initStackObject(v186, v155);
  inited[2] = 1;
  inited[3] = 2;
  inited[4] = v181._countAndFlagsBits;
  char v39 = (char)v177;
  inited[5] = v177;
  swift_bridgeObjectRetain(v39);
  DataFrame.validateContainsColumns(_:context:)((Swift::OpaquePointer)inited, (Swift::String)__PAIR128__(0xE400000000000000, 1835365449));
  if (v40) {
    goto LABEL_6;
  }
  swift_setDeallocating(inited);
  specialized _ContiguousArrayStorage.__deallocating_deinit();
  if (a7)
  {
    uint64_t inited = (void *)swift_initStackObject(v186, v156);
    inited[2] = 1;
    inited[3] = 2;
    inited[4] = v163._countAndFlagsBits;
    inited[5] = a7;
    swift_bridgeObjectRetain((_BYTE)a7);
    DataFrame.validateContainsColumns(_:context:)((Swift::OpaquePointer)inited, (Swift::String)__PAIR128__(0xE600000000000000, 0x676E69746152));
    uint64_t v179 = v41;
    uint64_t countAndFlagsBits = to._countAndFlagsBits;
    if (v41)
    {
LABEL_6:
      swift_setDeallocating(inited);
      return specialized _ContiguousArrayStorage.__deallocating_deinit();
    }
    swift_setDeallocating(inited);
    specialized _ContiguousArrayStorage.__deallocating_deinit();
  }
  else
  {
    uint64_t v179 = 0;
    uint64_t countAndFlagsBits = to._countAndFlagsBits;
  }
  long long v44 = (void *)swift_allocObject(v186, 64, 7);
  v44[2] = 2;
  v44[3] = 4;
  v44[4] = countAndFlagsBits;
  uint64_t v45 = _;
  v44[5] = _;
  v44[6] = v181._countAndFlagsBits;
  char v46 = (char)v177;
  v44[7] = v177;
  swift_bridgeObjectRetain((_BYTE)v45);
  swift_bridgeObjectRetain(v46);
  DataFrame.selecting(columnNames:)(v44);
  swift_bridgeObjectRelease((_BYTE)v44);
  char v47 = (Swift::String *)__src;
  v48._uint64_t countAndFlagsBits = to._countAndFlagsBits;
  v48._char object = v45;
  DataFrame.renameColumn(_:to:)(v48, *((Swift::String *)__src + 10));
  v48._uint64_t countAndFlagsBits = v181._countAndFlagsBits;
  v48._char object = v177;
  DataFrame.renameColumn(_:to:)(v48, v47[11]);
  if (a7)
  {
    uint64_t v49 = (void *)*((void *)__src + 25);
    if (v49)
    {
      to._uint64_t countAndFlagsBits = *((void *)__src + 24);
      uint64_t v50 = v159;
      uint64_t v51 = v163._countAndFlagsBits;
      DataFrame.subscript.getter(v163._countAndFlagsBits, a7);
      DataFrame.append(column:)(v50);
      (*(void (**)(uint64_t *, uint64_t))(v158 + 8))(v50, v157);
      v52._uint64_t countAndFlagsBits = v51;
      v52._char object = a7;
      v53._uint64_t countAndFlagsBits = to._countAndFlagsBits;
      v53._char object = v49;
      DataFrame.renameColumn(_:to:)(v52, v53);
    }
  }
  v181._uint64_t countAndFlagsBits = type metadata accessor for MLRecommender(0);
  uint64_t v54 = *((void *)__src + 20);
  uint64_t v55 = *((void *)__src + 21);
  char v177 = (void *)*(int *)(v181._countAndFlagsBits + 40);
  if (*((unsigned char *)v177 + (void)__src) == 1)
  {
    uint64_t v56 = v172;
    DataFrame.subscript.getter(v54, v55, &type metadata for Int);
    uint64_t v161 = 0;
    uint64_t v57 = lazy protocol witness table accessor for type FullyConnectedNetworkClassifier<Float, String> and conformance FullyConnectedNetworkClassifier<A, B>(&lazy protocol witness table cache variable for type Column<Int> and conformance Column<A>, &demangling cache variable for type metadata for Column<Int>, (uint64_t)&protocol conformance descriptor for Column<A>);
    Swift::UInt v58 = v169;
    uint64_t v59 = v164;
    OptionalColumnProtocol.filled(with:)(&v161, v164, v57);
    (*(void (**)(uint64_t *, uint64_t))(v165 + 8))(v56, v59);
    uint64_t v60 = lazy protocol witness table accessor for type FullyConnectedNetworkClassifier<Float, String> and conformance FullyConnectedNetworkClassifier<A, B>(&lazy protocol witness table cache variable for type FilledColumn<Column<Int>> and conformance FilledColumn<A>, &demangling cache variable for type metadata for FilledColumn<Column<Int>>, (uint64_t)&protocol conformance descriptor for FilledColumn<A>);
    uint64_t v61 = v183;
    uint64_t v62 = dispatch thunk of Collection.count.getter(v183, v60);
    if (v62)
    {
      char v187 = _swiftEmptyArrayStorage;
      int64_t v65 = 0;
      if (v62 > 0) {
        int64_t v65 = v62;
      }
      to._uint64_t countAndFlagsBits = v62;
      specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v65, 0);
      char v186 = v187;
      uint64_t v184 = v60;
      dispatch thunk of Collection.startIndex.getter(v61, v60);
      uint64_t v66 = to._countAndFlagsBits;
      if (to._countAndFlagsBits < 0) {
        BUG();
      }
      uint64_t v67 = v61;
      uint64_t v68 = v186;
      uint64_t v69 = v169;
      uint64_t v70 = v184;
      do
      {
        to._uint64_t countAndFlagsBits = v66;
        long long v71 = (void (*)(uint64_t *, void))dispatch thunk of Collection.subscript.read(&v161, v188, v67, v70);
        _ = (char *)*v72;
        v71(&v161, 0);
        char v187 = v68;
        uint64_t v73 = v70;
        unint64_t v74 = v68[2];
        uint64_t v75 = v67;
        if (v68[3] >> 1 <= v74)
        {
          specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v68[3] >= 2uLL, v74 + 1, 1);
          uint64_t v75 = v183;
          uint64_t v73 = v184;
          uint64_t v68 = v187;
        }
        v68[2] = v74 + 1;
        uint64_t v76 = 3 * v74;
        v68[v76 + 4] = _;
        v68[v76 + 5] = 0;
        LOBYTE(v68[v76 + 6]) = 1;
        uint64_t v67 = v75;
        uint64_t v70 = v73;
        dispatch thunk of Collection.formIndex(after:)(v188, v75, v73);
        uint64_t v66 = to._countAndFlagsBits - 1;
        int v64 = v188;
      }
      while (to._countAndFlagsBits != 1);
      char v186 = v68;
    }
    else
    {
      char v186 = _swiftEmptyArrayStorage;
      uint64_t v69 = v58;
    }
    uint64_t v94 = v69;
    uint64_t v95 = v183;
    uint64_t v96 = v167;
  }
  else
  {
    uint64_t v77 = v174;
    DataFrame.subscript.getter(v54, v55, &type metadata for String);
    uint64_t v161 = 0;
    unint64_t v162 = 0xE000000000000000;
    uint64_t v78 = lazy protocol witness table accessor for type FullyConnectedNetworkClassifier<Float, String> and conformance FullyConnectedNetworkClassifier<A, B>(&lazy protocol witness table cache variable for type Column<String> and conformance Column<A>, &demangling cache variable for type metadata for Column<String>, (uint64_t)&protocol conformance descriptor for Column<A>);
    uint64_t v79 = v171;
    OptionalColumnProtocol.filled(with:)(&v161, v171, v78);
    (*((void (**)(uint64_t *, uint64_t))v163._object + 1))(v77, v79);
    uint64_t v80 = lazy protocol witness table accessor for type FullyConnectedNetworkClassifier<Float, String> and conformance FullyConnectedNetworkClassifier<A, B>(&lazy protocol witness table cache variable for type FilledColumn<Column<String>> and conformance FilledColumn<A>, &demangling cache variable for type metadata for FilledColumn<Column<String>>, (uint64_t)&protocol conformance descriptor for FilledColumn<A>);
    uint64_t v81 = v180;
    uint64_t v82 = dispatch thunk of Collection.count.getter(v180, v80);
    if (v82)
    {
      char v187 = _swiftEmptyArrayStorage;
      int64_t v83 = 0;
      if (v82 > 0) {
        int64_t v83 = v82;
      }
      uint64_t v84 = v82;
      specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v83, 0);
      char v186 = v187;
      dispatch thunk of Collection.startIndex.getter(v81, v80);
      if (v84 < 0) {
        BUG();
      }
      uint64_t v85 = v84;
      uint64_t v86 = v80;
      uint64_t v87 = v186;
      uint64_t v81 = v180;
      uint64_t v184 = v86;
      do
      {
        to._uint64_t countAndFlagsBits = v85;
        char v88 = (void (*)(uint64_t *, void))dispatch thunk of Collection.subscript.read(&v161, v188, v81, v86);
        _ = (char *)*v89;
        uint64_t v90 = v89[1];
        swift_bridgeObjectRetain((_BYTE)v90);
        v88(&v161, 0);
        char v187 = v87;
        unint64_t v91 = v87[2];
        unint64_t v92 = v91 + 1;
        if (v87[3] >> 1 <= v91)
        {
          specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v87[3] >= 2uLL, v91 + 1, 1);
          unint64_t v92 = v91 + 1;
          uint64_t v87 = v187;
        }
        v87[2] = v92;
        uint64_t v93 = 3 * v91;
        v87[v93 + 4] = _;
        v87[v93 + 5] = v90;
        LOBYTE(v87[v93 + 6]) = 0;
        uint64_t v81 = v180;
        uint64_t v86 = v184;
        dispatch thunk of Collection.formIndex(after:)(v188, v180, v184);
        uint64_t v85 = to._countAndFlagsBits - 1;
      }
      while (to._countAndFlagsBits != 1);
      char v186 = v87;
    }
    else
    {
      char v186 = _swiftEmptyArrayStorage;
    }
    uint64_t v94 = v175;
    uint64_t v95 = v81;
    uint64_t v96 = v166;
  }
  (*(void (**)(uint64_t *, uint64_t, uint64_t, char *))(v96 + 8))(v94, v95, v63, v64);
  uint64_t v97 = v171;
  uint64_t v98 = v172;
  uint64_t v99 = *((void *)__src + 22);
  uint64_t v100 = *((void *)__src + 23);
  if (*((unsigned char *)__src + *(int *)(v181._countAndFlagsBits + 44)) == 1)
  {
    DataFrame.subscript.getter(v99, v100, &type metadata for Int);
    uint64_t v161 = 0;
    uint64_t v101 = lazy protocol witness table accessor for type FullyConnectedNetworkClassifier<Float, String> and conformance FullyConnectedNetworkClassifier<A, B>(&lazy protocol witness table cache variable for type Column<Int> and conformance Column<A>, &demangling cache variable for type metadata for Column<Int>, (uint64_t)&protocol conformance descriptor for Column<A>);
    unint64_t v102 = v176;
    uint64_t v103 = v164;
    OptionalColumnProtocol.filled(with:)(&v161, v164, v101);
    (*(void (**)(uint64_t *, uint64_t))(v165 + 8))(v98, v103);
    uint64_t v104 = lazy protocol witness table accessor for type FullyConnectedNetworkClassifier<Float, String> and conformance FullyConnectedNetworkClassifier<A, B>(&lazy protocol witness table cache variable for type FilledColumn<Column<Int>> and conformance FilledColumn<A>, &demangling cache variable for type metadata for FilledColumn<Column<Int>>, (uint64_t)&protocol conformance descriptor for FilledColumn<A>);
    uint64_t v105 = dispatch thunk of Collection.count.getter(v183, v104);
    if (v105)
    {
      uint64_t v109 = v105;
      char v187 = _swiftEmptyArrayStorage;
      int64_t v110 = 0;
      if (v105 > 0) {
        int64_t v110 = v105;
      }
      specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v110, 0);
      uint64_t v111 = v104;
      uint64_t v112 = (uint64_t)v187;
      uint64_t v113 = v183;
      to._uint64_t countAndFlagsBits = v111;
      dispatch thunk of Collection.startIndex.getter(v183, v111);
      _ = (char *)v109;
      if (v109 < 0) {
        BUG();
      }
      uint64_t v106 = v113;
      uint64_t v107 = to._countAndFlagsBits;
      do
      {
        uint64_t v114 = v106;
        uint64_t v115 = (void (*)(uint64_t *, void))dispatch thunk of Collection.subscript.read(&v161, v188, v106, v107);
        uint64_t v117 = *v116;
        v115(&v161, 0);
        char v187 = (void *)v112;
        unint64_t v118 = *(void *)(v112 + 16);
        unint64_t v119 = v118 + 1;
        if (*(void *)(v112 + 24) >> 1 <= v118)
        {
          specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(*(void *)(v112 + 24) >= 2uLL, v118 + 1, 1);
          unint64_t v119 = v118 + 1;
          uint64_t v114 = v183;
          uint64_t v112 = (uint64_t)v187;
        }
        *(void *)(v112 + 16) = v119;
        uint64_t v120 = 24 * v118;
        *(void *)(v112 + v120 + 32) = v117;
        *(void *)(v112 + v120 + 40) = 0;
        *(unsigned char *)(v112 + v120 + 48) = 1;
        int64_t v121 = v176;
        uint64_t v122 = to._countAndFlagsBits;
        dispatch thunk of Collection.formIndex(after:)(v188, v114, to._countAndFlagsBits);
        BOOL v123 = _-- == (unsigned char *)&dword_0 + 1;
        uint64_t v106 = v114;
        uint64_t v108 = v121;
        uint64_t v107 = v122;
      }
      while (!v123);
      uint64_t v138 = v121;
      to._uint64_t countAndFlagsBits = v112;
    }
    else
    {
      to._uint64_t countAndFlagsBits = (uint64_t)_swiftEmptyArrayStorage;
      uint64_t v138 = v102;
    }
    uint64_t v139 = v183;
    uint64_t v140 = v167;
  }
  else
  {
    DataFrame.subscript.getter(v99, v100, &type metadata for String);
    uint64_t v161 = 0;
    unint64_t v162 = 0xE000000000000000;
    uint64_t v124 = lazy protocol witness table accessor for type FullyConnectedNetworkClassifier<Float, String> and conformance FullyConnectedNetworkClassifier<A, B>(&lazy protocol witness table cache variable for type Column<String> and conformance Column<A>, &demangling cache variable for type metadata for Column<String>, (uint64_t)&protocol conformance descriptor for Column<A>);
    uint64_t v125 = v180;
    unint64_t v126 = v174;
    OptionalColumnProtocol.filled(with:)(&v161, v97, v124);
    (*((void (**)(uint64_t *, uint64_t))v163._object + 1))(v126, v97);
    uint64_t v127 = lazy protocol witness table accessor for type FullyConnectedNetworkClassifier<Float, String> and conformance FullyConnectedNetworkClassifier<A, B>(&lazy protocol witness table cache variable for type FilledColumn<Column<String>> and conformance FilledColumn<A>, &demangling cache variable for type metadata for FilledColumn<Column<String>>, (uint64_t)&protocol conformance descriptor for FilledColumn<A>);
    uint64_t v128 = dispatch thunk of Collection.count.getter(v125, v127);
    if (v128)
    {
      char v187 = _swiftEmptyArrayStorage;
      int64_t v129 = 0;
      if (v128 > 0) {
        int64_t v129 = v128;
      }
      uint64_t v130 = v128;
      specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v129, 0);
      to._uint64_t countAndFlagsBits = (uint64_t)v187;
      dispatch thunk of Collection.startIndex.getter(v125, v127);
      if (v130 < 0) {
        BUG();
      }
      uint64_t v131 = v130;
      uint64_t v125 = v180;
      uint64_t v132 = to._countAndFlagsBits;
      char v176 = (uint64_t *)v127;
      do
      {
        to._uint64_t countAndFlagsBits = v131;
        uint64_t v133 = (void (*)(uint64_t *, void))dispatch thunk of Collection.subscript.read(&v161, v188, v125, v127);
        _ = (char *)*v134;
        uint64_t v184 = (uint64_t)v134[1];
        swift_bridgeObjectRetain(v184);
        v133(&v161, 0);
        char v187 = (void *)v132;
        uint64_t v135 = v125;
        unint64_t v136 = *(void *)(v132 + 16);
        if (*(void *)(v132 + 24) >> 1 <= v136)
        {
          specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(*(void *)(v132 + 24) >= 2uLL, v136 + 1, 1);
          uint64_t v135 = v180;
          uint64_t v132 = (uint64_t)v187;
        }
        *(void *)(v132 + 16) = v136 + 1;
        uint64_t v137 = 24 * v136;
        *(void *)(v132 + v137 + 32) = _;
        *(void *)(v132 + v137 + 40) = v184;
        *(unsigned char *)(v132 + v137 + 48) = 0;
        uint64_t v125 = v135;
        uint64_t v127 = (uint64_t)v176;
        dispatch thunk of Collection.formIndex(after:)(v188, v135, v176);
        uint64_t v131 = to._countAndFlagsBits - 1;
      }
      while (to._countAndFlagsBits != 1);
      to._uint64_t countAndFlagsBits = v132;
    }
    else
    {
      to._uint64_t countAndFlagsBits = (uint64_t)_swiftEmptyArrayStorage;
    }
    uint64_t v138 = v173;
    uint64_t v139 = v125;
    uint64_t v140 = v166;
  }
  (*(void (**)(uint64_t *, uint64_t, uint64_t, uint64_t, uint64_t *))(v140 + 8))(v138, v139, v106, v107, v108);
  int64_t v141 = v186;
  swift_bridgeObjectRetain((_BYTE)v186);
  uint64_t v142 = specialized Set.init<A>(_:)((uint64_t)v141);
  memcpy(__dst, __src, sizeof(__dst));
  uint64_t v143 = *(void *)(a8 + 16);
  if (!v143) {
    BUG();
  }
  uint64_t v144 = v179;
  uint64_t v145 = specialized RecommenderModel.recommend<A>(users:limit:allowedItems:excludedInteractions:omittingObservedInteractions:)(v142, *(void *)(a8 + 8 * v143 + 24), (uint64_t)&_swiftEmptySetSingleton, (uint64_t)_swiftEmptyArrayStorage, a9);
  if (v144)
  {
    swift_bridgeObjectRelease((_BYTE)v186);
    swift_bridgeObjectRelease(to._countAndFlagsBits);
    (*(void (**)(uint64_t *, uint64_t))(v170 + 8))(v178, v168);
    return swift_bridgeObjectRelease(v142);
  }
  else
  {
    double v146 = (uint64_t (*)())v145;
    swift_bridgeObjectRelease(v142);
    char v147 = (char)v186;
    char v148 = to._countAndFlagsBits;
    ML13MLRecommenderV10IdentifierOGAMG_AL4user_AL4itemts5NeverOTg503_s8f4ML13h3V10i35OA3EIgggoo_AE_AEtAE4user_AE4itemts5L188OIegnrzr_TR03_s8a4ML13c126V8evaluate2on10userColumn04itemG006ratingG07cutoffs17excludingObservedAA0C7MetricsV11TabularData0O5FrameV_S3SSgSaySiGSbtKFAC10D23O0F0_AS0H0tAS_AStXEfU3_Tf3nnnpf_nTf1cn_n = _sSTsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFs12Zip2SequenceVySay8CreateML13MLRecommenderV10IdentifierOGAMG_AL4user_AL4itemts5NeverOTg503_s8f4ML13h3V10i35OA3EIgggoo_AE_AEtAE4user_AE4itemts5L188OIegnrzr_TR03_s8a4ML13c126V8evaluate2on10userColumn04itemG006ratingG07cutoffs17excludingObservedAA0C7MetricsV11TabularData0O5FrameV_S3SSgSaySiGSbtKFAC10D23O0F0_AS0H0tAS_AStXEfU3_Tf3nnnpf_nTf1cn_n((uint64_t)v186, to._countAndFlagsBits);
    uint64_t v179 = 0;
    swift_bridgeObjectRelease(v148);
    swift_bridgeObjectRelease(v147);
    uint64_t v150 = specialized static RecommenderModel.metrics<A, B>(expected:predicted:cutoffs:)((uint64_t)ML13MLRecommenderV10IdentifierOGAMG_AL4user_AL4itemts5NeverOTg503_s8f4ML13h3V10i35OA3EIgggoo_AE_AEtAE4user_AE4itemts5L188OIegnrzr_TR03_s8a4ML13c126V8evaluate2on10userColumn04itemG006ratingG07cutoffs17excludingObservedAA0C7MetricsV11TabularData0O5FrameV_S3SSgSaySiGSbtKFAC10D23O0F0_AS0H0tAS_AStXEfU3_Tf3nnnpf_nTf1cn_n, v146, (void (*)(uint64_t *))closure #6 in MLRecommender.evaluate(on:userColumn:itemColumn:ratingColumn:cutoffs:excludingObserved:), 0, a8);
    swift_bridgeObjectRelease((_BYTE)ML13MLRecommenderV10IdentifierOGAMG_AL4user_AL4itemts5NeverOTg503_s8f4ML13h3V10i35OA3EIgggoo_AE_AEtAE4user_AE4itemts5L188OIegnrzr_TR03_s8a4ML13c126V8evaluate2on10userColumn04itemG006ratingG07cutoffs17excludingObservedAA0C7MetricsV11TabularData0O5FrameV_S3SSgSaySiGSbtKFAC10D23O0F0_AS0H0tAS_AStXEfU3_Tf3nnnpf_nTf1cn_n);
    swift_bridgeObjectRelease((_BYTE)v146);
    (*(void (**)(uint64_t *, uint64_t))(v170 + 8))(v178, v168);
    uint64_t v151 = v160;
    *uint64_t v160 = *((unsigned char *)v177 + (void)__src);
    *((void *)v151 + 1) = v150;
    char result = a9 & 1;
    v151[16] = a9 & 1;
    *((void *)v151 + 3) = 0;
  }
  return result;
}

uint64_t MLRecommender.evaluation(on:userColumn:itemColumn:ratingColumn:cutoffs:excludingObserved:)(uint64_t a1, uint64_t a2, char *a3, uint64_t a4, void *a5, uint64_t a6, long long a7, char a8)
{
  uint64_t v19 = a4;
  int64_t v24 = a3;
  uint64_t v22 = a2;
  uint64_t v20 = a6;
  int64_t v21 = a5;
  uint64_t v9 = type metadata accessor for DataFrame(0);
  uint64_t v23 = *(void *)(v9 - 8);
  int64_t v10 = *(void *)(v23 + 64);
  char v11 = alloca(v10);
  uint64_t v12 = alloca(v10);
  char v13 = *(unsigned char *)(a1 + 8);
  uint64_t v17 = *(void *)a1;
  char v18 = v13;
  outlined copy of Result<_DataTable, Error>(v17, v13);
  DataFrame.init(_:)((uint64_t)&v17);
  uint64_t v14 = v24;
  int64_t v24 = v8;
  MLRecommender.evaluate(on:userColumn:itemColumn:ratingColumn:cutoffs:excludingObserved:)(&v16, v22, v14, v19, v21, v20, (void *)a7, *((uint64_t *)&a7 + 1), a8);
  return (*(uint64_t (**)(uint64_t *, uint64_t))(v23 + 8))(&v16, v9);
}

uint64_t closure #6 in MLRecommender.evaluate(on:userColumn:itemColumn:ratingColumn:cutoffs:excludingObserved:)(uint64_t a1)
{
  uint64_t v2 = *(void *)a1;
  uint64_t v3 = *(void *)(a1 + 8);
  uint64_t v4 = *(void *)(a1 + 24);
  uint64_t v5 = *(void *)(a1 + 32);
  char v6 = *(unsigned char *)(a1 + 16);
  char v7 = *(unsigned char *)(a1 + 40);
  *(void *)uint64_t v1 = *(void *)a1;
  *(void *)(v1 + 8) = v3;
  *(unsigned char *)(v1 + 16) = v6;
  *(void *)(v1 + 24) = v4;
  *(void *)(v1 + 32) = v5;
  *(unsigned char *)(v1 + 40) = v7;
  outlined copy of MLRecommender.Identifier(v2, v3, v6);
  return outlined copy of MLRecommender.Identifier(v4, v5, v7);
}

void *specialized static RecommenderModel.metrics<A, B>(expected:predicted:cutoffs:)(uint64_t a1, uint64_t (*a2)(), void (*a3)(uint64_t *), void *a4, uint64_t a5)
{
  uint64_t v142 = a5;
  uint64_t v150 = a4;
  uint64_t v144 = a3;
  uint64_t v151 = a2;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [(user: MLRecommender.Identifier, item: MLRecommender.Identifier)]);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for LazyMapSequence<[Recommendation<MLRecommender.Identifier, MLRecommender.Identifier>], (user: MLRecommender.Identifier, item: MLRecommender.Identifier)>);
  lazy protocol witness table accessor for type MLRecommender.Identifier and conformance MLRecommender.Identifier();
  lazy protocol witness table accessor for type MLRecommender.Identifier and conformance MLRecommender.Identifier();
  lazy protocol witness table accessor for type FullyConnectedNetworkClassifier<Float, String> and conformance FullyConnectedNetworkClassifier<A, B>(&lazy protocol witness table cache variable for type [(user: MLRecommender.Identifier, item: MLRecommender.Identifier)] and conformance [A], &demangling cache variable for type metadata for [(user: MLRecommender.Identifier, item: MLRecommender.Identifier)], (uint64_t)&protocol conformance descriptor for [A]);
  lazy protocol witness table accessor for type FullyConnectedNetworkClassifier<Float, String> and conformance FullyConnectedNetworkClassifier<A, B>(&lazy protocol witness table cache variable for type LazyMapSequence<[Recommendation<MLRecommender.Identifier, MLRecommender.Identifier>], (user: MLRecommender.Identifier, item: MLRecommender.Identifier)> and conformance LazyMapSequence<A, B>, &demangling cache variable for type metadata for LazyMapSequence<[Recommendation<MLRecommender.Identifier, MLRecommender.Identifier>], (user: MLRecommender.Identifier, item: MLRecommender.Identifier)>, (uint64_t)&protocol conformance descriptor for LazyMapSequence<A, B>);
  uint64_t KeyPath = swift_getKeyPath(&unk_3490A8);
  swift_retain();
  ML13MLRecommenderV10IdentifierO4user_AJ4itemtG_AJs5NeverOTg503_s8d99ML16RecommenderModelV7metrics8expected9predicted7cutoffsSayAA21RecommendationMetricsVyxGGqd___qd_0_p10SiGtSTRd__y19_0_x4user_q_4itemt7b48Rtd__xAM_q_ANtAORtd_0_r0_lFZxxAM_q_ANt_tcfu_AA13f3V10g36O_AUSayAuM_AuNtGs15LazyMapSequenceVyP24AA0I0VyA2UGGAuM_AuNtGTG5s7KeyPathCyAjK_AjLtAJGTf1cn_n = _sSTsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSay8CreateML13MLRecommenderV10IdentifierO4user_AJ4itemtG_AJs5NeverOTg503_s8d99ML16RecommenderModelV7metrics8expected9predicted7cutoffsSayAA21RecommendationMetricsVyxGGqd___qd_0_p10SiGtSTRd__y19_0_x4user_q_4itemt7b48Rtd__xAM_q_ANtAORtd_0_r0_lFZxxAM_q_ANt_tcfu_AA13f3V10g36O_AUSayAuM_AuNtGs15LazyMapSequenceVyP24AA0I0VyA2UGGAuM_AuNtGTG5s7KeyPathCyAjK_AjLtAJGTf1cn_n(a1, KeyPath);
  swift_release();
  uint64_t v7 = specialized Set.init<A>(_:)((uint64_t)ML13MLRecommenderV10IdentifierO4user_AJ4itemtG_AJs5NeverOTg503_s8d99ML16RecommenderModelV7metrics8expected9predicted7cutoffsSayAA21RecommendationMetricsVyxGGqd___qd_0_p10SiGtSTRd__y19_0_x4user_q_4itemt7b48Rtd__xAM_q_ANtAORtd_0_r0_lFZxxAM_q_ANt_tcfu_AA13f3V10g36O_AUSayAuM_AuNtGs15LazyMapSequenceVyP24AA0I0VyA2UGGAuM_AuNtGTG5s7KeyPathCyAjK_AjLtAJGTf1cn_n);
  swift_bridgeObjectRetain(v7);
  uint64_t v8 = specialized _copyCollectionToContiguousArray<A>(_:)(v7);
  swift_bridgeObjectRelease(v7);
  v131[0] = (uint64_t)v8;
  specialized MutableCollection<>.sort(by:)(v131, (uint64_t (*)(uint64_t))specialized _ContiguousArrayBuffer._consumeAndCreateNew(), (uint64_t (*)(void))specialized UnsafeMutableBufferPointer._stableSortImpl(by:));
  swift_bridgeObjectRelease(v7);
  unint64_t v9 = *(void *)(v142 + 16);
  int64_t v10 = v9 * *(void *)(v131[0] + 16);
  if (!is_mul_ok(v9, *(void *)(v131[0] + 16))) {
    BUG();
  }
  unint64_t v138 = *(void *)(v142 + 16);
  uint64_t v139 = v131[0];
  uint64_t v140 = 0;
  if (v10 <= 0) {
    int64_t v10 = 0;
  }
  char v11 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v10, 0, (uint64_t)_swiftEmptyArrayStorage);
  uint64_t v12 = *(void *)(a1 + 16);
  char v13 = _swiftEmptyDictionarySingleton;
  uint64_t v155 = _swiftEmptyDictionarySingleton;
  uint64_t v14 = 0;
  uint64_t v15 = 0;
  char v148 = v11;
  if (v12)
  {
    swift_bridgeObjectRetain(a1);
    uint64_t v149 = a1;
    uint64_t v16 = (unsigned __int8 *)(a1 + 72);
    uint64_t v155 = _swiftEmptyDictionarySingleton;
    uint64_t v17 = 0;
    char v18 = 0;
    Swift::UInt v19 = 0;
    do
    {
      Swift::UInt v156 = v19;
      uint64_t v160 = (uint64_t)v18;
      uint64_t v157 = v12;
      Swift::UInt v158 = *((void *)v16 - 5);
      uint64_t v159 = (_OWORD *)*((void *)v16 - 4);
      unsigned __int8 v20 = *(v16 - 24);
      LODWORD(v145[0]) = v20;
      uint64_t v21 = *((void *)v16 - 2);
      uint64_t v22 = *((void *)v16 - 1);
      uint64_t v153 = v16;
      int v23 = *v16;
      outlined copy of MLRecommender.Identifier(v158, (uint64_t)v159, v20);
      outlined copy of MLRecommender.Identifier(v21, v22, v23);
      _sxRi_zRi0_zlySaySdGIsegr_SgWOe((uint64_t)v17, 0);
      uint64_t v24 = swift_allocObject(&unk_398640, 32, 7);
      *(void *)(v24 + 16) = specialized implicit closure #2 in static RecommenderModel.metrics<A, B>(expected:predicted:cutoffs:);
      uint64_t v147 = v24;
      *(void *)(v24 + 24) = 0;
      double v146 = (void *)v21;
      uint64_t v154 = (void *)v22;
      LODWORD(v152) = v23;
      outlined copy of MLRecommender.Identifier(v21, v22, v23);
      _sxRi_zRi0_zlySaySdGIsegr_SgWOe(v160, v156);
      uint64_t v25 = (uint64_t)v155;
      char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v155);
      v131[0] = v25;
      unint64_t v28 = specialized __RawDictionaryStorage.find<A>(_:)(v158, (uint64_t)v159, v145[0]);
      BOOL v29 = (v27 & 1) == 0;
      BOOL v30 = __OFADD__(*(void *)(v25 + 16), v29);
      Swift::Int v31 = *(void *)(v25 + 16) + v29;
      if (v30) {
        BUG();
      }
      char v32 = v27;
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _NativeDictionary<MLRecommender.Identifier, [MLRecommender.Identifier]>);
      Swift::Bool v33 = _NativeDictionary.ensureUnique(isUnique:capacity:)(isUniquelyReferenced_nonNull_native, v31);
      uint64_t v34 = (void *)v131[0];
      uint64_t v155 = (void *)v131[0];
      Swift::UInt v35 = v158;
      if (v33)
      {
        unint64_t v28 = specialized __RawDictionaryStorage.find<A>(_:)(v158, (uint64_t)v159, v145[0]);
        if ((v32 & 1) != (v36 & 1))
        {
LABEL_62:
          KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(&type metadata for MLRecommender.Identifier);
          BUG();
        }
        uint64_t v34 = v155;
      }
      swift_bridgeObjectRelease(0);
      swift_bridgeObjectRetain((_BYTE)v34);
      LODWORD(v160) = LOBYTE(v145[0]);
      if ((v32 & 1) == 0)
      {
        char v37 = v145[0];
        uint64_t v38 = (*(uint64_t (**)(void))(v147 + 16))();
        uint64_t v34 = v155;
        uint64_t v39 = 24 * v28;
        v155[(v28 >> 6) + 8] |= 1 << v28;
        uint64_t v40 = v34[6];
        *(void *)(v40 + v39) = v35;
        uint64_t v41 = (uint64_t)v159;
        *(void *)(v40 + v39 + 8) = v159;
        *(unsigned char *)(v40 + v39 + 16) = v37;
        *(void *)(v34[7] + 8 * v28) = v38;
        uint64_t v42 = v34[2];
        BOOL v30 = __OFADD__(1, v42);
        uint64_t v43 = v42 + 1;
        if (v30) {
          BUG();
        }
        void v34[2] = v43;
        outlined copy of MLRecommender.Identifier(v35, v41, v160);
      }
      uint64_t v44 = v34[7];
      swift_bridgeObjectRelease((_BYTE)v34);
      uint64_t v45 = *(void **)(v44 + 8 * v28);
      char v46 = swift_isUniquelyReferenced_nonNull_native(v45);
      *(void *)(v44 + 8 * v28) = v45;
      if (!v46)
      {
        uint64_t v45 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v45[2] + 1, 1, (uint64_t)v45);
        *(void *)(v44 + 8 * v28) = v45;
      }
      unint64_t v47 = v45[2];
      uint64_t v48 = (uint64_t)v159;
      if (v45[3] >> 1 <= v47)
      {
        Swift::String v53 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(v45[3] >= 2uLL, v47 + 1, 1, (uint64_t)v45);
        uint64_t v48 = (uint64_t)v159;
        uint64_t v45 = v53;
        *(void *)(v44 + 8 * v28) = v53;
      }
      v45[2] = v47 + 1;
      uint64_t v49 = 3 * v47;
      uint64_t v50 = (uint64_t)v146;
      v45[v49 + 4] = v146;
      uint64_t v51 = (uint64_t)v154;
      v45[v49 + 5] = v154;
      char v52 = v152;
      LOBYTE(v45[v49 + 6]) = v152 & 1;
      outlined consume of MLRecommender.Identifier(v158, v48, v160);
      outlined consume of MLRecommender.Identifier(v50, v51, v52);
      uint64_t v16 = v153 + 48;
      uint64_t v17 = specialized implicit closure #2 in static RecommenderModel.metrics<A, B>(expected:predicted:cutoffs:);
      char v18 = partial apply for specialized thunk for @callee_guaranteed () -> (@owned [B]);
      Swift::UInt v19 = v147;
      uint64_t v12 = v157 - 1;
    }
    while (v157 != 1);
    swift_bridgeObjectRelease(v149);
    uint64_t v15 = v147;
    uint64_t v14 = partial apply for specialized thunk for @callee_guaranteed () -> (@owned [B]);
    uint64_t v140 = specialized implicit closure #2 in static RecommenderModel.metrics<A, B>(expected:predicted:cutoffs:);
    char v11 = v148;
    char v13 = _swiftEmptyDictionarySingleton;
  }
  uint64_t v130 = (uint64_t)v14;
  uint64_t v147 = v15;
  uint64_t v54 = v151;
  uint64_t v55 = (unsigned __int8 *)*((void *)v151 + 2);
  if (v55)
  {
    swift_bridgeObjectRetain((_BYTE)v151);
    swift_retain();
    uint64_t v56 = (void *)((char *)v54 + 88);
    uint64_t v154 = _swiftEmptyDictionarySingleton;
    uint64_t v57 = 0;
    Swift::UInt v58 = 0;
    Swift::UInt v59 = 0;
    do
    {
      uint64_t v159 = v57;
      v145[0] = v59;
      Swift::UInt v158 = (Swift::UInt)v58;
      uint64_t v153 = v55;
      uint64_t v60 = *v56;
      uint64_t v61 = *(v56 - 1);
      uint64_t v62 = *(v56 - 3);
      uint64_t v160 = v62;
      uint64_t v63 = *(v56 - 4);
      uint64_t v64 = *(v56 - 7);
      uint64_t v65 = *(v56 - 6);
      int v66 = *((unsigned __int8 *)v56 - 40);
      double v146 = v56;
      int v67 = *((unsigned __int8 *)v56 - 16);
      LODWORD(v156) = v67;
      v131[0] = v64;
      v131[1] = v65;
      LODWORD(v157) = v66;
      char v132 = v66;
      uint64_t v133 = v63;
      uint64_t v134 = v62;
      char v135 = v67;
      uint64_t v136 = v61;
      uint64_t v137 = v60;
      outlined copy of MLRecommender.Identifier(v64, v65, v66);
      outlined copy of MLRecommender.Identifier(v63, v62, v67);
      v144(v131);
      outlined consume of MLRecommender.Identifier(v64, v65, v157);
      outlined consume of MLRecommender.Identifier(v63, v160, v156);
      _sxRi_zRi0_zlySaySdGIsegr_SgWOe((uint64_t)v159, 0);
      uint64_t v159 = (_OWORD *)v125;
      LODWORD(v156) = v126;
      uint64_t v68 = swift_allocObject(&unk_398668, 32, 7);
      *(void *)(v68 + 16) = specialized implicit closure #2 in static RecommenderModel.metrics<A, B>(expected:predicted:cutoffs:);
      uint64_t v152 = v68;
      *(void *)(v68 + 24) = 0;
      uint64_t v157 = v127;
      uint64_t v149 = v128;
      LODWORD(v143) = v129;
      outlined copy of MLRecommender.Identifier(v127, v128, v129);
      _sxRi_zRi0_zlySaySdGIsegr_SgWOe(v158, v145[0]);
      uint64_t v69 = (uint64_t)v154;
      char v70 = swift_isUniquelyReferenced_nonNull_native(v154);
      v131[0] = v69;
      v145[0] = v124;
      unsigned __int8 v71 = v156;
      Swift::UInt v158 = specialized __RawDictionaryStorage.find<A>(_:)(v124, (uint64_t)v159, v156);
      LOBYTE(v160) = v72;
      BOOL v73 = (v72 & 1) == 0;
      BOOL v30 = __OFADD__(*(void *)(v69 + 16), v73);
      Swift::Int v74 = *(void *)(v69 + 16) + v73;
      if (v30) {
        BUG();
      }
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _NativeDictionary<MLRecommender.Identifier, [MLRecommender.Identifier]>);
      Swift::Bool v75 = _NativeDictionary.ensureUnique(isUnique:capacity:)(v70, v74);
      uint64_t v76 = (void *)v131[0];
      uint64_t v77 = v145[0];
      if (v75)
      {
        Swift::UInt v158 = specialized __RawDictionaryStorage.find<A>(_:)(v145[0], (uint64_t)v159, v71);
        if ((v160 & 1) != (v78 & 1)) {
          goto LABEL_62;
        }
      }
      swift_bridgeObjectRelease(0);
      swift_bridgeObjectRetain((_BYTE)v76);
      if ((v160 & 1) == 0)
      {
        uint64_t v79 = (*(uint64_t (**)(void))(v152 + 16))();
        Swift::UInt v80 = v158;
        Swift::UInt v81 = 24 * v158;
        v76[(v158 >> 6) + 8] |= 1 << v158;
        uint64_t v82 = v76[6];
        *(void *)(v82 + v81) = v77;
        uint64_t v83 = (uint64_t)v159;
        *(void *)(v82 + v81 + 8) = v159;
        *(unsigned char *)(v82 + v81 + 16) = v71;
        *(void *)(v76[7] + 8 * v80) = v79;
        uint64_t v84 = v76[2];
        BOOL v30 = __OFADD__(1, v84);
        uint64_t v85 = v84 + 1;
        if (v30) {
          BUG();
        }
        v76[2] = v85;
        outlined copy of MLRecommender.Identifier(v77, v83, v71);
      }
      LODWORD(v160) = v71;
      uint64_t v86 = v76[7];
      uint64_t v154 = v76;
      swift_bridgeObjectRelease((_BYTE)v76);
      Swift::UInt v87 = v158;
      char v88 = *(void **)(v86 + 8 * v158);
      char v89 = swift_isUniquelyReferenced_nonNull_native(v88);
      *(void *)(v86 + 8 * v87) = v88;
      if (!v89)
      {
        char v88 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v88[2] + 1, 1, (uint64_t)v88);
        *(void *)(v86 + 8 * v158) = v88;
      }
      unint64_t v90 = v88[2];
      uint64_t v91 = (uint64_t)v159;
      if (v88[3] >> 1 <= v90)
      {
        uint64_t v96 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(v88[3] >= 2uLL, v90 + 1, 1, (uint64_t)v88);
        uint64_t v91 = (uint64_t)v159;
        char v88 = v96;
        *(void *)(v86 + 8 * v158) = v96;
      }
      _DWORD v88[2] = v90 + 1;
      uint64_t v92 = 3 * v90;
      uint64_t v93 = v157;
      v88[v92 + 4] = v157;
      uint64_t v94 = v149;
      v88[v92 + 5] = v149;
      char v95 = (char)v143;
      LOBYTE(v88[v92 + 6]) = v143 & 1;
      outlined consume of MLRecommender.Identifier(v145[0], v91, v160);
      outlined consume of MLRecommender.Identifier(v93, v94, v95);
      uint64_t v56 = v146 + 8;
      uint64_t v57 = specialized implicit closure #2 in static RecommenderModel.metrics<A, B>(expected:predicted:cutoffs:);
      Swift::UInt v58 = thunk for @callee_guaranteed () -> (@owned [B])specialized partial apply;
      Swift::UInt v59 = v152;
      uint64_t v55 = v153 - 1;
    }
    while (v153 != (unsigned char *)&dword_0 + 1);
    swift_release();
    swift_bridgeObjectRelease((_BYTE)v151);
    uint64_t v151 = thunk for @callee_guaranteed () -> (@owned [B])specialized partial apply;
    int64_t v141 = specialized implicit closure #2 in static RecommenderModel.metrics<A, B>(expected:predicted:cutoffs:);
    char v11 = v148;
    char v13 = v154;
  }
  else
  {
    int64_t v141 = 0;
    uint64_t v151 = 0;
    uint64_t v152 = 0;
  }
  uint64_t v97 = v139;
  uint64_t v144 = *(void (**)(uint64_t *))(v139 + 16);
  if (v144)
  {
    unint64_t v98 = 0;
    uint64_t v154 = v13;
    do
    {
      if (v98 >= *(void *)(v97 + 16)) {
        BUG();
      }
      char v148 = v11;
      uint64_t v149 = v98;
      Swift::UInt v99 = *(void *)(v97 + 24 * v98 + 32);
      uint64_t v100 = *(void *)(v97 + 24 * v98 + 40);
      unsigned __int8 v101 = *(unsigned char *)(v97 + 24 * v98 + 48);
      LOBYTE(v153) = v101 & 1;
      uint64_t v102 = v155[2];
      outlined copy of MLRecommender.Identifier(v99, v100, v101);
      uint64_t v103 = _swiftEmptyArrayStorage;
      BOOL v104 = v102 == 0;
      uint64_t v105 = v154;
      uint64_t v160 = v100;
      LODWORD(v157) = v101;
      Swift::UInt v156 = v99;
      if (!v104)
      {
        uint64_t v103 = _swiftEmptyArrayStorage;
        outlined copy of MLRecommender.Identifier(v99, v100, v101);
        unint64_t v106 = specialized __RawDictionaryStorage.find<A>(_:)(v99, v100, (char)v153);
        if (v107)
        {
          uint64_t v103 = *(void **)(v155[7] + 8 * v106);
          swift_bridgeObjectRetain((_BYTE)v103);
        }
        outlined consume of MLRecommender.Identifier(v156, v160, v157);
      }
      uint64_t v108 = _swiftEmptyArrayStorage;
      if (v105[2])
      {
        Swift::UInt v109 = v156;
        uint64_t v110 = v160;
        uint64_t v108 = _swiftEmptyArrayStorage;
        outlined copy of MLRecommender.Identifier(v156, v160, v157);
        unint64_t v111 = specialized __RawDictionaryStorage.find<A>(_:)(v109, v110, (char)v153);
        if (v112)
        {
          uint64_t v108 = *(void **)(v105[7] + 8 * v111);
          swift_bridgeObjectRetain((_BYTE)v108);
        }
        outlined consume of MLRecommender.Identifier(v156, v160, v157);
      }
      uint64_t v113 = specialized static RecommenderModel.precisionRecall(expected:predicted:cutoffs:)((uint64_t)v103, (uint64_t)v108, v142);
      swift_bridgeObjectRelease((_BYTE)v108);
      uint64_t v143 = v103;
      uint64_t v150 = v113;
      if (v138)
      {
        uint64_t v114 = v160;
        Swift::UInt v115 = v156;
        if (v138 > v113[2]) {
          BUG();
        }
        double v146 = (void *)v103[2];
        uint64_t v116 = v113 + 4;
        uint64_t v117 = 0;
        char v118 = v157;
        char v11 = v148;
        do
        {
          Swift::UInt v158 = *(void *)(v142 + 8 * v117 + 32);
          uint64_t v159 = v116;
          *(_OWORD *)uint64_t v145 = *v116;
          outlined copy of MLRecommender.Identifier(v115, v114, v118);
          outlined copy of MLRecommender.Identifier(v115, v114, v118);
          unint64_t v119 = v11[2];
          uint64_t v120 = v11;
          if (v11[3] >> 1 <= v119) {
            uint64_t v120 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(v11[3] >= 2uLL, v119 + 1, 1, (uint64_t)v11);
          }
          ++v117;
          char v11 = v120;
          v120[2] = v119 + 1;
          uint64_t v121 = 7 * v119;
          Swift::UInt v122 = v156;
          v11[v121 + 4] = v156;
          uint64_t v114 = v160;
          v11[v121 + 5] = v160;
          LOBYTE(v11[v121 + 6]) = (_BYTE)v153;
          v11[v121 + 7] = v158;
          *(_OWORD *)&v11[v121 + 8] = *(_OWORD *)v145;
          v11[v121 + 10] = v146;
          char v118 = v157;
          outlined consume of MLRecommender.Identifier(v122, v114, v157);
          Swift::UInt v115 = v122;
          uint64_t v116 = v159 + 1;
        }
        while (v138 != v117);
      }
      else
      {
        char v11 = v148;
        uint64_t v114 = v160;
        char v118 = v157;
        Swift::UInt v115 = v156;
      }
      unint64_t v98 = v149 + 1;
      outlined consume of MLRecommender.Identifier(v115, v114, v118);
      swift_bridgeObjectRelease((_BYTE)v143);
      swift_bridgeObjectRelease((_BYTE)v150);
      uint64_t v97 = v139;
      LOBYTE(v13) = (_BYTE)v154;
    }
    while ((void (*)(uint64_t *))v98 != v144);
  }
  swift_release();
  swift_bridgeObjectRelease((_BYTE)v155);
  swift_bridgeObjectRelease((_BYTE)v13);
  _sxRi_zRi0_zlySaySdGIsegr_SgWOe((uint64_t)v140, 0);
  _sxRi_zRi0_zlySaySdGIsegr_SgWOe(v130, v147);
  _sxRi_zRi0_zlySaySdGIsegr_SgWOe((uint64_t)v141, 0);
  _sxRi_zRi0_zlySaySdGIsegr_SgWOe((uint64_t)v151, v152);
  return v11;
}

uint64_t MLRecommender.getSimilarItems(fromItems:maxCount:)(uint64_t a1, uint64_t a2, double a3, double a4)
{
  uint64_t v106 = a2;
  uint64_t v100 = v4;
  uint64_t v7 = *(int *)(type metadata accessor for MLRecommender(0) + 44);
  int64_t v8 = *(void *)(a1 + 16);
  char __src = v6;
  if (*((unsigned char *)v6 + v7))
  {
    if (v8)
    {
      uint64_t v121 = _swiftEmptyArrayStorage;
      specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v8, 0);
      uint64_t v9 = a1 + 32;
      do
      {
        BOOL v123 = (char *)v8;
        outlined init with copy of TabularRegressionTask(v9, (uint64_t)&v101);
        uint64_t v10 = v103;
        uint64_t v11 = v104;
        __swift_project_boxed_opaque_existential_0Tm(&v101, v103);
        (*(void (**)(uint64_t, uint64_t))(v11 + 8))(v10, v11);
        uint64_t v12 = v107;
        if (v109)
        {
          outlined consume of MLDataValue(v107, v108, v109);
          uint64_t v12 = 0;
        }
        __swift_destroy_boxed_opaque_existential_1Tm(&v101);
        char v13 = v121;
        if (swift_isUniquelyReferenced_nonNull_native(v121))
        {
          uint64_t v14 = v13;
        }
        else
        {
          specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v13[2] + 1, 1);
          uint64_t v14 = v121;
        }
        unint64_t v15 = v14[2];
        unint64_t v16 = v14[3];
        unint64_t v17 = v15 + 1;
        if (v16 >> 1 <= v15)
        {
          unint64_t v118 = v15 + 1;
          specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v16 >= 2, v15 + 1, 1);
          unint64_t v17 = v118;
          uint64_t v14 = v121;
        }
        v14[2] = v17;
        v14[v15 + 4] = v12;
        v9 += 40;
        int64_t v8 = (int64_t)(v123 - 1);
      }
      while (v123 != (unsigned char *)&dword_0 + 1);
    }
    else
    {
      uint64_t v14 = _swiftEmptyArrayStorage;
      unint64_t v17 = _swiftEmptyArrayStorage[2];
      if (!v17)
      {
        swift_bridgeObjectRelease(_swiftEmptyArrayStorage);
        unint64_t v28 = (char *)_swiftEmptyArrayStorage;
        ML14_UntypedColumnC_s5Error_pTgm5 = (char *)_swiftEmptyArrayStorage;
        Swift::UInt v124 = _swiftEmptyArrayStorage;
        BOOL v123 = (char *)_swiftEmptyArrayStorage;
LABEL_50:
        unsigned __int8 v101 = ML14_UntypedColumnC_s5Error_pTgm5;
        uint64_t v44 = alloca(24);
        uint64_t v45 = alloca(32);
        uint64_t v96 = &v101;
        ML14_UntypedColumnC_s5Error_pTgm5 = (char *)_ss6ResultOsRi_zrlE8catchingAByxq_Gxyq_YKXE_tcfC8CreateML14_UntypedColumnC_s5Error_pTgm5((void (*)(void *))partial apply for specialized closure #1 in MLUntypedColumn.init<A>(_:));
        LOBYTE(v117) = v46;
        swift_bridgeObjectRelease((_BYTE)v101);
        unsigned __int8 v101 = v28;
        unint64_t v47 = alloca(24);
        uint64_t v48 = alloca(24);
        uint64_t v127 = &v101;
        uint64_t v49 = (void (*)(void *))closure #1 in MLUntypedColumn.init<A>(_:)specialized partial apply;
        goto LABEL_78;
      }
    }
    unint64_t v27 = 0;
    unint64_t v28 = (char *)_swiftEmptyArrayStorage;
    ML14_UntypedColumnC_s5Error_pTgm5 = (char *)_swiftEmptyArrayStorage;
    Swift::UInt v124 = _swiftEmptyArrayStorage;
    BOOL v123 = (char *)_swiftEmptyArrayStorage;
    Swift::UInt v115 = v14;
    unint64_t v118 = v17;
    do
    {
      if (v27 >= v14[2]) {
        BUG();
      }
      uint64_t v114 = (void *)v27;
      Swift::UInt v29 = v14[v27 + 4];
      memcpy(__dst, __src, sizeof(__dst));
      Swift::UInt v110 = v29;
      BOOL v30 = specialized RecommenderModel.similarItems(to:count:)(v29, 0, 1, v106, a3, a4);
      uint64_t v111 = v30[2];
      if (v111)
      {
        Swift::Int v31 = v30 + 7;
        char v32 = 0;
        char v112 = v30;
        do
        {
          if ((unint64_t)v32 >= v30[2]) {
            BUG();
          }
          unint64_t v119 = v32;
          uint64_t v33 = *(v31 - 3);
          uint64_t v34 = *(v31 - 2);
          int v35 = *((_DWORD *)v31 - 2);
          double v117 = *(double *)v31;
          uint64_t v113 = (uint64_t *)v34;
          outlined copy of MLRecommender.Identifier(v33, v34, v35);
          char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(ML14_UntypedColumnC_s5Error_pTgm5);
          uint64_t v120 = v28;
          uint64_t v122 = v33;
          if (!isUniquelyReferenced_nonNull_native) {
            ML14_UntypedColumnC_s5Error_pTgm5 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *((void *)ML14_UntypedColumnC_s5Error_pTgm5 + 2) + 1, 1, (uint64_t)ML14_UntypedColumnC_s5Error_pTgm5);
          }
          unint64_t v37 = *((void *)ML14_UntypedColumnC_s5Error_pTgm5 + 2);
          if (*((void *)ML14_UntypedColumnC_s5Error_pTgm5 + 3) >> 1 <= v37) {
            ML14_UntypedColumnC_s5Error_pTgm5 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(*((void *)ML14_UntypedColumnC_s5Error_pTgm5 + 3) >= 2uLL, v37 + 1, 1, (uint64_t)ML14_UntypedColumnC_s5Error_pTgm5);
          }
          uint64_t v38 = ML14_UntypedColumnC_s5Error_pTgm5;
          *((void *)ML14_UntypedColumnC_s5Error_pTgm5 + 2) = v37 + 1;
          *(void *)&v38[8 * v37 + 32] = v110;
          if ((v35 & 1) == 0)
          {
            outlined consume of MLRecommender.Identifier(v122, (uint64_t)v113, 0);
            BUG();
          }
          unint64_t v28 = v120;
          if (!swift_isUniquelyReferenced_nonNull_native(v120)) {
            unint64_t v28 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *((void *)v28 + 2) + 1, 1, (uint64_t)v28);
          }
          unint64_t v39 = *((void *)v28 + 2);
          if (*((void *)v28 + 3) >> 1 <= v39) {
            unint64_t v28 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(*((void *)v28 + 3) >= 2uLL, v39 + 1, 1, (uint64_t)v28);
          }
          *((void *)v28 + 2) = v39 + 1;
          *(void *)&v28[8 * v39 + 32] = v122;
          if (!swift_isUniquelyReferenced_nonNull_native(v124)) {
            Swift::UInt v124 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v124[2] + 1, 1, (uint64_t)v124);
          }
          unint64_t v40 = v124[2];
          if (v124[3] >> 1 <= v40) {
            Swift::UInt v124 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(v124[3] >= 2uLL, v40 + 1, 1, (uint64_t)v124);
          }
          uint64_t v41 = v124;
          v124[2] = v40 + 1;
          a3 = v117;
          *(double *)&v41[v40 + 4] = v117;
          if (!swift_isUniquelyReferenced_nonNull_native(v123)) {
            BOOL v123 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *((void *)v123 + 2) + 1, 1, (uint64_t)v123);
          }
          unint64_t v42 = *((void *)v123 + 2);
          if (*((void *)v123 + 3) >> 1 <= v42) {
            BOOL v123 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(*((void *)v123 + 3) >= 2uLL, v42 + 1, 1, (uint64_t)v123);
          }
          char v32 = (uint64_t *)((char *)v119 + 1);
          uint64_t v43 = v123;
          *((void *)v123 + 2) = v42 + 1;
          *(void *)&v43[8 * v42 + 32] = v32;
          v31 += 4;
          BOOL v30 = v112;
        }
        while ((uint64_t *)v111 != v32);
      }
      unint64_t v27 = (unint64_t)v114 + 1;
      swift_bridgeObjectRelease((_BYTE)v30);
      uint64_t v14 = v115;
    }
    while (v27 != v118);
    swift_bridgeObjectRelease((_BYTE)v115);
    goto LABEL_50;
  }
  if (v8)
  {
    uint64_t v121 = _swiftEmptyArrayStorage;
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v8, 0);
    uint64_t v18 = a1 + 32;
    do
    {
      BOOL v123 = (char *)v8;
      outlined init with copy of TabularRegressionTask(v18, (uint64_t)&v101);
      uint64_t v19 = v103;
      uint64_t v20 = v104;
      __swift_project_boxed_opaque_existential_0Tm(&v101, v103);
      (*(void (**)(uint64_t, uint64_t))(v20 + 8))(v19, v20);
      uint64_t v21 = v107;
      if (v109 == 2)
      {
        Swift::UInt v124 = v108;
      }
      else
      {
        outlined consume of MLDataValue(v107, v108, v109);
        uint64_t v21 = 0;
        Swift::UInt v124 = (void *)0xE000000000000000;
      }
      __swift_destroy_boxed_opaque_existential_1Tm(&v101);
      uint64_t v22 = v121;
      if (!swift_isUniquelyReferenced_nonNull_native(v121))
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v22[2] + 1, 1);
        uint64_t v22 = v121;
      }
      unint64_t v23 = v22[2];
      unint64_t v24 = v22[3];
      unint64_t v25 = v23 + 1;
      if (v24 >> 1 <= v23)
      {
        unint64_t v116 = v23 + 1;
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v24 >= 2, v23 + 1, 1);
        unint64_t v25 = v116;
        uint64_t v22 = v121;
      }
      v22[2] = v25;
      uint64_t v26 = 2 * v23;
      v22[v26 + 4] = v21;
      v22[v26 + 5] = v124;
      v18 += 40;
      int64_t v8 = (int64_t)(v123 - 1);
    }
    while (v123 != (unsigned char *)&dword_0 + 1);
    goto LABEL_52;
  }
  uint64_t v22 = _swiftEmptyArrayStorage;
  unint64_t v25 = _swiftEmptyArrayStorage[2];
  if (v25)
  {
LABEL_52:
    Swift::UInt v115 = v22 + 4;
    uint64_t v50 = (char *)_swiftEmptyArrayStorage;
    ML14_UntypedColumnC_s5Error_pTgm5 = (char *)_swiftEmptyArrayStorage;
    Swift::UInt v124 = _swiftEmptyArrayStorage;
    BOOL v123 = (char *)_swiftEmptyArrayStorage;
    unint64_t v51 = 0;
    Swift::UInt v99 = v22;
    unint64_t v116 = v25;
    do
    {
      if (v51 >= v22[2]) {
        BUG();
      }
      unint64_t v118 = v51;
      uint64_t v52 = 2 * v51;
      Swift::UInt v53 = v115[v52];
      uint64_t v54 = v115[v52 + 1];
      memcpy(v98, __src, sizeof(v98));
      swift_bridgeObjectRetain_n(v54, 2);
      char v112 = (void *)v53;
      uint64_t v55 = specialized RecommenderModel.similarItems(to:count:)(v53, v54, 0, v106, a3, a4);
      uint64_t v122 = v54;
      swift_bridgeObjectRelease(v54);
      uint64_t v113 = (uint64_t *)v55[2];
      if (v113)
      {
        uint64_t v56 = v55 + 7;
        uint64_t v57 = 0;
        uint64_t v114 = v55;
        do
        {
          if ((unint64_t)v57 >= v55[2]) {
            BUG();
          }
          unint64_t v119 = v57;
          uint64_t v120 = v50;
          uint64_t v58 = *(v56 - 3);
          uint64_t v59 = *(v56 - 2);
          int v60 = *((_DWORD *)v56 - 2);
          double v117 = *(double *)v56;
          swift_bridgeObjectRetain(v122);
          outlined copy of MLRecommender.Identifier(v58, v59, v60);
          char v61 = swift_isUniquelyReferenced_nonNull_native(ML14_UntypedColumnC_s5Error_pTgm5);
          Swift::UInt v110 = v58;
          uint64_t v111 = v59;
          if (!v61) {
            ML14_UntypedColumnC_s5Error_pTgm5 = (char *)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *((void *)ML14_UntypedColumnC_s5Error_pTgm5 + 2) + 1, 1, (uint64_t)ML14_UntypedColumnC_s5Error_pTgm5);
          }
          unint64_t v62 = *((void *)ML14_UntypedColumnC_s5Error_pTgm5 + 2);
          if (*((void *)ML14_UntypedColumnC_s5Error_pTgm5 + 3) >> 1 <= v62) {
            ML14_UntypedColumnC_s5Error_pTgm5 = (char *)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(*((void *)ML14_UntypedColumnC_s5Error_pTgm5 + 3) >= 2uLL, v62 + 1, 1, (uint64_t)ML14_UntypedColumnC_s5Error_pTgm5);
          }
          uint64_t v63 = ML14_UntypedColumnC_s5Error_pTgm5;
          *((void *)ML14_UntypedColumnC_s5Error_pTgm5 + 2) = v62 + 1;
          uint64_t v64 = 16 * v62;
          *(void *)&v63[v64 + 32] = v112;
          *(void *)&v63[v64 + 40] = v122;
          if (v60) {
            BUG();
          }
          uint64_t v50 = v120;
          if (!swift_isUniquelyReferenced_nonNull_native(v120)) {
            uint64_t v50 = (char *)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *((void *)v50 + 2) + 1, 1, (uint64_t)v50);
          }
          unint64_t v65 = *((void *)v50 + 2);
          if (*((void *)v50 + 3) >> 1 <= v65) {
            uint64_t v50 = (char *)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(*((void *)v50 + 3) >= 2uLL, v65 + 1, 1, (uint64_t)v50);
          }
          *((void *)v50 + 2) = v65 + 1;
          uint64_t v66 = 16 * v65;
          *(void *)&v50[v66 + 32] = v110;
          *(void *)&v50[v66 + 40] = v111;
          if (!swift_isUniquelyReferenced_nonNull_native(v124)) {
            Swift::UInt v124 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v124[2] + 1, 1, (uint64_t)v124);
          }
          unint64_t v67 = v124[2];
          if (v124[3] >> 1 <= v67) {
            Swift::UInt v124 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(v124[3] >= 2uLL, v67 + 1, 1, (uint64_t)v124);
          }
          uint64_t v68 = v124;
          v124[2] = v67 + 1;
          a3 = v117;
          *(double *)&v68[v67 + 4] = v117;
          if (!swift_isUniquelyReferenced_nonNull_native(v123)) {
            BOOL v123 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *((void *)v123 + 2) + 1, 1, (uint64_t)v123);
          }
          unint64_t v69 = *((void *)v123 + 2);
          if (*((void *)v123 + 3) >> 1 <= v69) {
            BOOL v123 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(*((void *)v123 + 3) >= 2uLL, v69 + 1, 1, (uint64_t)v123);
          }
          uint64_t v57 = (uint64_t *)((char *)v119 + 1);
          char v70 = v123;
          *((void *)v123 + 2) = v69 + 1;
          *(void *)&v70[8 * v69 + 32] = v57;
          v56 += 4;
          uint64_t v55 = v114;
        }
        while (v113 != v57);
      }
      unint64_t v71 = v118 + 1;
      swift_bridgeObjectRelease(v122);
      swift_bridgeObjectRelease((_BYTE)v55);
      unint64_t v51 = v71;
      uint64_t v22 = v99;
    }
    while (v71 != v116);
    swift_bridgeObjectRelease((_BYTE)v99);
    goto LABEL_77;
  }
  swift_bridgeObjectRelease(_swiftEmptyArrayStorage);
  uint64_t v50 = (char *)_swiftEmptyArrayStorage;
  ML14_UntypedColumnC_s5Error_pTgm5 = (char *)_swiftEmptyArrayStorage;
  Swift::UInt v124 = _swiftEmptyArrayStorage;
  BOOL v123 = (char *)_swiftEmptyArrayStorage;
LABEL_77:
  unsigned __int8 v101 = ML14_UntypedColumnC_s5Error_pTgm5;
  char v72 = alloca(24);
  BOOL v73 = alloca(32);
  uint64_t v96 = &v101;
  ML14_UntypedColumnC_s5Error_pTgm5 = (char *)_ss6ResultOsRi_zrlE8catchingAByxq_Gxyq_YKXE_tcfC8CreateML14_UntypedColumnC_s5Error_pTgm5((void (*)(void *))partial apply for specialized closure #1 in MLUntypedColumn.init<A>(_:));
  LOBYTE(v117) = v74;
  swift_bridgeObjectRelease((_BYTE)v101);
  unsigned __int8 v101 = v50;
  Swift::Bool v75 = alloca(24);
  uint64_t v76 = alloca(24);
  uint64_t v127 = &v101;
  uint64_t v49 = (void (*)(void *))closure #1 in MLUntypedColumn.init<A>(_:)specialized partial apply;
LABEL_78:
  uint64_t v122 = _ss6ResultOsRi_zrlE8catchingAByxq_Gxyq_YKXE_tcfC8CreateML14_UntypedColumnC_s5Error_pTgm5(v49);
  LOBYTE(v120) = v77;
  swift_bridgeObjectRelease((_BYTE)v101);
  uint64_t v78 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, MLUntypedColumn)>);
  uint64_t inited = swift_initStackObject(v78, v95);
  *(void *)(inited + 16) = 4;
  *(void *)(inited + 24) = 8;
  *(void *)(inited + 32) = 0x64695F6D657469;
  *(void *)(inited + 40) = 0xE700000000000000;
  Swift::UInt v80 = ML14_UntypedColumnC_s5Error_pTgm5;
  *(void *)(inited + 48) = ML14_UntypedColumnC_s5Error_pTgm5;
  ML14_UntypedColumnC_s5Error_pTgm5 = v80;
  unsigned __int8 v81 = LOBYTE(v117);
  *(unsigned char *)(inited + 56) = LOBYTE(v117) & 1;
  *(void *)(inited + 64) = 0x72616C696D6973;
  *(void *)(inited + 72) = 0xE700000000000000;
  uint64_t v82 = v122;
  *(void *)(inited + 80) = v122;
  uint64_t v122 = v82;
  *(unsigned char *)(inited + 88) = v120 & 1;
  *(void *)(inited + 96) = 0x65726F6373;
  *(void *)(inited + 104) = 0xE500000000000000;
  LOBYTE(v101) = (_BYTE)v124;
  uint64_t v83 = alloca(24);
  uint64_t v84 = alloca(32);
  uint64_t v127 = &v101;
  LODWORD(v124) = v81;
  outlined copy of Result<_DataTable, Error>((uint64_t)v80, v81);
  LODWORD(v120) = v120;
  outlined copy of Result<_DataTable, Error>(v82, (char)v120);
  uint64_t v85 = _ss6ResultOsRi_zrlE8catchingAByxq_Gxyq_YKXE_tcfC8CreateML14_UntypedColumnC_s5Error_pTgm5((void (*)(void *))partial apply for specialized closure #1 in MLUntypedColumn.init<A>(_:));
  LOBYTE(v82) = v86;
  swift_bridgeObjectRelease((_BYTE)v101);
  unint64_t v119 = &v126;
  *(void *)(inited + 112) = v85;
  *(unsigned char *)(inited + 120) = v82 & 1;
  *(void *)(inited + 128) = 1802396018;
  *(void *)(inited + 136) = 0xE400000000000000;
  unsigned __int8 v101 = v123;
  Swift::UInt v87 = alloca(24);
  char v88 = alloca(32);
  uint64_t v127 = &v101;
  uint64_t v89 = _ss6ResultOsRi_zrlE8catchingAByxq_Gxyq_YKXE_tcfC8CreateML14_UntypedColumnC_s5Error_pTgm5((void (*)(void *))closure #1 in MLUntypedColumn.init<A>(_:)specialized partial apply);
  LOBYTE(v82) = v90;
  swift_bridgeObjectRelease((_BYTE)v101);
  *(void *)(inited + 144) = v89;
  *(unsigned char *)(inited + 152) = v82 & 1;
  uint64_t v91 = Dictionary.init(dictionaryLiteral:)(inited, &type metadata for String, &type metadata for MLUntypedColumn, &protocol witness table for String);
  specialized MLDataTable.init<A>(uniqueKeysWithValues:)(v91);
  outlined consume of Result<_DataTable, Error>(v122, (char)v120);
  uint64_t result = outlined consume of Result<_DataTable, Error>((uint64_t)ML14_UntypedColumnC_s5Error_pTgm5, (char)v124);
  if (!v5)
  {
    uint64_t result = (uint64_t)v101;
    char v93 = v102;
    uint64_t v94 = v100;
    *uint64_t v100 = v101;
    *((unsigned char *)v94 + 8) = v93;
  }
  return result;
}

uint64_t MLRecommender.getSimilarItems<A>(fromItems:maxCount:)(uint64_t a1, double a2, double a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v35 = a6;
  uint64_t v34 = v6;
  uint64_t v9 = *(void *)a1;
  char v10 = *(unsigned char *)(a1 + 8);
  uint64_t v11 = *(int *)(type metadata accessor for MLRecommender(0) + 44);
  uint64_t v33 = v7;
  if (*(unsigned char *)(v7 + v11))
  {
    uint64_t v31 = v9;
    char v13 = v10 & 1;
    LOBYTE(v32) = v13;
    uint64_t v14 = type metadata accessor for MLDataColumn(0, a5, v35, v12);
    uint64_t v15 = MLDataColumn.count.getter(v14);
    if (v15 < 0) {
      BUG();
    }
    unint64_t v16 = alloca(41);
    unint64_t v17 = alloca(48);
    uint64_t v31 = a5;
    uint64_t v32 = v35;
    uint64_t v33 = v9;
    LOBYTE(v34) = v13;
    uint64_t v18 = _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSnySiG_Sis5NeverOTg5((void (*)(void *))partial apply for closure #2 in MLRecommender.getSimilarItems<A>(fromItems:maxCount:), (uint64_t)v30, 0, v15);
    char v19 = (char)v18;
    uint64_t v20 = specialized _arrayForceCast<A, B>(_:)((uint64_t)v18);
    swift_bridgeObjectRelease(v19);
    uint64_t v21 = (uint64_t)v20;
  }
  else
  {
    uint64_t v31 = v9;
    char v22 = v10 & 1;
    LOBYTE(v32) = v22;
    uint64_t v23 = type metadata accessor for MLDataColumn(0, a5, v35, v12);
    uint64_t v24 = MLDataColumn.count.getter(v23);
    if (v24 < 0) {
      BUG();
    }
    unint64_t v25 = alloca(41);
    uint64_t v26 = alloca(48);
    uint64_t v31 = a5;
    uint64_t v32 = v35;
    uint64_t v33 = v9;
    LOBYTE(v34) = v22;
    unint64_t v27 = _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSnySiG_SSs5NeverOTg5((void (*)(void *))partial apply for closure #1 in MLRecommender.getSimilarItems<A>(fromItems:maxCount:), (uint64_t)v30, 0, v24);
    char v28 = (char)v27;
    uint64_t v20 = specialized _arrayForceCast<A, B>(_:)((uint64_t)v27);
    swift_bridgeObjectRelease(v28);
    uint64_t v21 = (uint64_t)v20;
  }
  MLRecommender.getSimilarItems(fromItems:maxCount:)(v21, 10, a2, a3);
  return swift_bridgeObjectRelease((_BYTE)v20);
}

void *closure #1 in MLRecommender.getSimilarItems<A>(fromItems:maxCount:)(uint64_t *a1, void *a2, char a3, uint64_t a4, uint64_t a5, double a6)
{
  uint64_t v21 = v6;
  uint64_t v20 = a5;
  uint64_t v19 = *(void *)(a4 - 8);
  int64_t v8 = *(void *)(v19 + 64);
  uint64_t v9 = alloca(v8);
  char v10 = alloca(v8);
  uint64_t v11 = *a1;
  unint64_t v16 = a2;
  LOBYTE(v17) = a3 & 1;
  uint64_t v12 = type metadata accessor for MLDataColumn(0, a4, a5, a4);
  MLDataColumn.subscript.getter(v11, v12, a6);
  (*(void (**)(uint64_t))(v20 + 32))(a4);
  (*(void (**)(uint64_t *, uint64_t))(v19 + 8))(&v15, a4);
  char v13 = v17;
  if (v18 != 2)
  {
    outlined consume of MLDataValue(v16, v17, v18);
    BUG();
  }
  uint64_t result = v21;
  void *v21 = v16;
  result[1] = v13;
  return result;
}

void *closure #2 in MLRecommender.getSimilarItems<A>(fromItems:maxCount:)(uint64_t *a1, void *a2, char a3, uint64_t a4, uint64_t a5, double a6)
{
  unint64_t v16 = v6;
  uint64_t v15 = *(void *)(a4 - 8);
  int64_t v9 = *(void *)(v15 + 64);
  char v10 = alloca(v9);
  uint64_t v11 = alloca(v9);
  uint64_t v12 = *a1;
  unint64_t v17 = a2;
  LOBYTE(v18) = a3 & 1;
  uint64_t v13 = type metadata accessor for MLDataColumn(0, a4, a5, a4);
  MLDataColumn.subscript.getter(v12, v13, a6);
  (*(void (**)(uint64_t, uint64_t))(a5 + 32))(a4, a5);
  (*(void (**)(uint64_t *, uint64_t))(v15 + 8))(&v15, a4);
  if (v19)
  {
    outlined consume of MLDataValue(v17, v18, v19);
    BUG();
  }
  uint64_t result = v16;
  *unint64_t v16 = v17;
  return result;
}

void *specialized RecommenderModel.similarItems(to:count:)(Swift::UInt a1, uint64_t a2, char a3, uint64_t a4, double a5, double a6)
{
  uint64_t v7 = v6;
  uint64_t v8 = *(void *)(v6 + 24);
  if (!*(void *)(v8 + 16)) {
    return _swiftEmptyArrayStorage;
  }
  uint64_t v34 = *(void *)(v7 + 16);
  unint64_t v10 = specialized __RawDictionaryStorage.find<A>(_:)(a1, a2, a3 & 1);
  if ((v11 & 1) == 0) {
    return _swiftEmptyArrayStorage;
  }
  uint64_t v12 = specialized RecommenderModel.similarItems(itemIndex:count:)(*(void *)(*(void *)(v8 + 56) + 8 * v10), a4, a5, a6);
  uint64_t v13 = v12[2];
  char v32 = (char)v12;
  if (v13)
  {
    unint64_t v31 = *(void *)(v34 + 16);
    uint64_t v14 = v12 + 5;
    uint64_t v15 = _swiftEmptyArrayStorage;
    do
    {
      unint64_t v16 = *(v14 - 1);
      if (v16 >= v31) {
        BUG();
      }
      uint64_t v30 = *v14;
      uint64_t v17 = 24 * v16;
      uint64_t v18 = *(void *)(v34 + v17 + 32);
      uint64_t v35 = (uint64_t)v15;
      uint64_t v19 = *(void *)(v34 + v17 + 40);
      char v20 = *(unsigned char *)(v34 + v17 + 48);
      outlined copy of MLRecommender.Identifier(v18, v19, v20);
      uint64_t v33 = v18;
      uint64_t v21 = v18;
      uint64_t v22 = v19;
      uint64_t v15 = (void *)v35;
      outlined copy of MLRecommender.Identifier(v21, v22, v20);
      uint64_t v29 = v13;
      if (!swift_isUniquelyReferenced_nonNull_native(v35)) {
        uint64_t v15 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(void *)(v35 + 16) + 1, 1, v35);
      }
      unint64_t v23 = v15[2];
      unint64_t v24 = v23 + 1;
      if (v15[3] >> 1 <= v23)
      {
        uint64_t v26 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(v15[3] >= 2uLL, v23 + 1, 1, (uint64_t)v15);
        unint64_t v24 = v23 + 1;
        uint64_t v15 = v26;
      }
      _OWORD v15[2] = v24;
      uint64_t v25 = 4 * v23;
      v15[v25 + 4] = v33;
      v15[v25 + 5] = v22;
      LOBYTE(v15[v25 + 6]) = v20 & 1;
      v15[v25 + 7] = v30;
      outlined consume of MLRecommender.Identifier(v33, v22, v20);
      v14 += 2;
      uint64_t v13 = v29 - 1;
    }
    while (v29 != 1);
  }
  else
  {
    uint64_t v15 = _swiftEmptyArrayStorage;
  }
  swift_bridgeObjectRelease(v32);
  char v28 = specialized _arrayForceCast<A, B>(_:)((uint64_t)v15);
  swift_bridgeObjectRelease((_BYTE)v15);
  return v28;
}

uint64_t MLRecommender.ModelAlgorithmType.debugDescription.getter()
{
  return 0x6D6973206D657449;
}

uint64_t MLRecommender.ModelAlgorithmType.playgroundDescription.getter()
{
  uint64_t v1 = v0;
  objc_allocWithZone((Class)NSAttributedString);
  id v2 = @nonobjc NSAttributedString.init(string:attributes:)(0x6D6973206D657449, 105, 0);
  uint64_t result = type metadata accessor for OS_os_log(0, &lazy cache variable for type metadata for NSAttributedString, NSAttributedString_ptr);
  v1[3] = result;
  *uint64_t v1 = v2;
  return result;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance MLRecommender.ModelAlgorithmType()
{
  return 0x6D6973206D657449;
}

uint64_t protocol witness for CustomPlaygroundDisplayConvertible.playgroundDescription.getter in conformance MLRecommender.ModelAlgorithmType()
{
  return MLRecommender.ModelAlgorithmType.playgroundDescription.getter();
}

uint64_t MLRecommender.SimilarityType.description.getter()
{
  if (!*v0) {
    return 0x656E69736F63;
  }
  if (*v0 == 1) {
    return 0x6472616363616ALL;
  }
  return 0x6E6F7372616570;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance MLRecommender.SimilarityType()
{
  return MLRecommender.SimilarityType.description.getter();
}

uint64_t MLRecommender.SimilarityType.playgroundDescription.getter()
{
  id v2 = v0;
  if (*v1)
  {
    if (*v1 == 1) {
      uint64_t v3 = 0x6472616363616ALL;
    }
    else {
      uint64_t v3 = 0x6E6F7372616570;
    }
  }
  else
  {
    uint64_t v3 = 0x656E69736F63;
  }
  objc_allocWithZone((Class)NSAttributedString);
  id v4 = @nonobjc NSAttributedString.init(string:attributes:)(v3, 0, 0);
  uint64_t result = type metadata accessor for OS_os_log(0, &lazy cache variable for type metadata for NSAttributedString, NSAttributedString_ptr);
  v2[3] = result;
  void *v2 = v4;
  return result;
}

uint64_t protocol witness for CustomPlaygroundDisplayConvertible.playgroundDescription.getter in conformance MLRecommender.SimilarityType()
{
  return MLRecommender.SimilarityType.playgroundDescription.getter();
}

uint64_t Int.identifierValue.getter(uint64_t a1)
{
  *(void *)uint64_t result = a1;
  *(void *)(result + 8) = 0;
  *(unsigned char *)(result + 16) = 0;
  return result;
}

uint64_t protocol witness for MLIdentifier.identifierValue.getter in conformance Int()
{
  return Int.identifierValue.getter(*v0);
}

uint64_t String.identifierValue.getter(uint64_t a1, uint64_t a2)
{
  *(void *)uint64_t v2 = a1;
  *(void *)(v2 + 8) = a2;
  *(unsigned char *)(v2 + 16) = 2;
  return swift_bridgeObjectRetain(a2);
}

uint64_t protocol witness for MLIdentifier.identifierValue.getter in conformance String()
{
  return String.identifierValue.getter(*v0, v0[1]);
}

uint64_t specialized UpperStrictlyTriangularMatrix.init(rowCount:columnCount:)(uint64_t a1, uint64_t a2)
{
  unint64_t v2 = specialized static UpperStrictlyTriangularMatrix.dataSize(_:_:)(a1, a2);
  unint64_t v24 = specialized ContiguousArray.init(repeating:count:)(v2, 0.0);
  if (a1 < 0) {
    BUG();
  }
  if (a1)
  {
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, a1, 0);
    unint64_t v3 = a2 - 1;
    if (__OFSUB__(a2, 1)) {
      BUG();
    }
    unint64_t v4 = 0;
    uint64_t v5 = a1;
    do
    {
      unint64_t v6 = v4 * v3;
      if (!is_mul_ok(v4, v3)) {
        BUG();
      }
      unint64_t v7 = v4 - 1;
      unint64_t v9 = v4 - 1;
      unint64_t v10 = v4;
      uint64_t v8 = (v4 - 1) * v4;
      if (!is_mul_ok(v9, v10)) {
        BUG();
      }
      uint64_t v11 = v8 / 2;
      BOOL v12 = __OFSUB__(v6, v11);
      unint64_t v13 = v6 - v11;
      if (v12) {
        BUG();
      }
      unint64_t v14 = v7 + 1;
      BOOL v12 = __OFSUB__(v13, v14);
      unint64_t v15 = v13 - v14;
      if (v12) {
        BUG();
      }
      unint64_t v16 = _swiftEmptyArrayStorage[2];
      if (_swiftEmptyArrayStorage[3] >> 1 <= v16)
      {
        unint64_t v23 = v3;
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(_swiftEmptyArrayStorage[3] >= 2uLL, v16 + 1, 1);
        unint64_t v3 = v23;
        uint64_t v5 = a1;
      }
      _swiftEmptyArrayStorage[2] = v16 + 1;
      _swiftEmptyArrayStorage[v16 + 4] = v15;
      unint64_t v4 = v14 + 1;
    }
    while (v14 + 1 != v5);
  }
  uint64_t v17 = v24[2];
  if (swift_isUniquelyReferenced_nonNull_native(_swiftEmptyArrayStorage)) {
    uint64_t v18 = (char *)_swiftEmptyArrayStorage;
  }
  else {
    uint64_t v18 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, _swiftEmptyArrayStorage[2] + 1, 1, (char *)_swiftEmptyArrayStorage);
  }
  unint64_t v19 = *((void *)v18 + 2);
  uint64_t v20 = a1;
  if (*((void *)v18 + 3) >> 1 <= v19)
  {
    uint64_t v22 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(*((void *)v18 + 3) >= 2uLL, v19 + 1, 1, v18);
    uint64_t v20 = a1;
    uint64_t v18 = v22;
  }
  *((void *)v18 + 2) = v19 + 1;
  *(void *)&v18[8 * v19 + 32] = v17;
  return v20;
}

char *specialized ItemSimilarityTrainer.processUser<A>(userIndex:ratings:)(uint64_t a1, void *a2)
{
  uint64_t v3 = a2[6];
  if (v3 < 0) {
    BUG();
  }
  uint64_t v5 = a2[3];
  uint64_t result = *(char **)(v5 + 16);
  if (v3 >= (unint64_t)result) {
    BUG();
  }
  if (v3 + 1 >= (unint64_t)result) {
    BUG();
  }
  uint64_t v7 = *(void *)(v5 + 8 * v3 + 32);
  uint64_t v8 = *(void *)(v5 + 8 * v3 + 40);
  if (v7 != v8)
  {
    if (__OFSUB__(v8, v7)) {
      BUG();
    }
    uint64_t v63 = a2[4];
    uint64_t v64 = a2[5];
    uint64_t v9 = v2[2];
    char v72 = v2;
    uint64_t v70 = a2[6];
    uint64_t v71 = a2[3];
    if (v9 >= v8 - v7)
    {
      uint64_t v13 = 0x7FFFFFFFFFFFFFFFLL;
      double v62 = 0.0;
    }
    else
    {
      uint64_t v10 = specialized Dictionary.subscript.getter(a1, v2[14]);
      if (v11)
      {
        uint64_t v12 = specialized ItemSimilarityTrainer.getItemCountThresholdForUser<A>(itemInfo:itemList:)(v2[9], a2);
        specialized Dictionary._Variant.setValue(_:forKey:)(v12, a1);
      }
      else
      {
        uint64_t v12 = v10;
      }
      uint64_t v7 = *(void *)(v5 + 8 * v70 + 32);
      uint64_t v8 = *(void *)(v5 + 8 * v70 + 40);
      if (__OFSUB__(v8, v7)) {
        BUG();
      }
      double v62 = 1.0 - (double)(int)v9 / (double)((int)v8 - (int)v7);
      uint64_t v13 = v12;
    }
    unint64_t v14 = a2;
    if (v8 < v7) {
      BUG();
    }
    uint64_t v61 = v8;
    uint64_t v60 = v7;
    uint64_t v15 = v2[12];
    if (swift_isUniquelyReferenced_nonNull_native(v15))
    {
      uint64_t v16 = v70;
      uint64_t v17 = v5;
      uint64_t result = (char *)v15;
    }
    else
    {
      uint64_t result = specialized _ContiguousArrayBuffer._consumeAndCreateNew()(v15);
      uint64_t v16 = v70;
      uint64_t v17 = v5;
    }
    v2[12] = result;
    uint64_t v18 = v60;
    uint64_t v19 = v61;
    if (v60 != v61)
    {
      uint64_t v57 = *(void *)(v64 + 16);
      uint64_t v58 = v2[9];
      uint64_t v65 = v58 + 32;
      uint64_t v56 = *(void *)(v63 + 16);
      uint64_t v20 = v60;
      uint64_t v54 = v13;
      do
      {
        if (v20 >= v19) {
          BUG();
        }
        if (v18 < 0) {
          BUG();
        }
        if (v20 >= v56) {
          BUG();
        }
        if (v20 >= v57) {
          BUG();
        }
        uint64_t v21 = v20 + 1;
        uint64_t v22 = *(int *)(v63 + 4 * (v20 + 1) + 28);
        if ((int)v22 < 0) {
          BUG();
        }
        if (*(void *)(v58 + 16) <= v22) {
          BUG();
        }
        Swift::Int v55 = *(int *)(v63 + 4 * (v20 + 1) + 28);
        uint64_t v23 = 32 * v22;
        if (v13 >= *(void *)(v65 + v23))
        {
          uint64_t v24 = *(void *)(v17 + 8 * v16 + 40);
          if (v24 <= v20) {
            BUG();
          }
          uint64_t v25 = *(void *)(v17 + 8 * v16 + 32);
          if (v24 < v25) {
            BUG();
          }
          if (v21 < v25) {
            BUG();
          }
          uint64_t v59 = v20;
          uint64_t v26 = v14;
          unint64_t v27 = result;
          double v52 = *(double *)(v64 + 8 * v21 + 24);
          uint64_t v68 = v24;
          outlined retain of SparseMatrix<Double>.MajorCollection(v26);
          uint64_t v28 = v68;
          uint64_t v66 = v21;
          if (v21 != v68)
          {
            Swift::UInt v53 = (double *)(v23 + v65 + 16);
            uint64_t v30 = v59;
            uint64_t v29 = v27;
            uint64_t v31 = v59;
            while (1)
            {
              if (v21 <= v31 || (uint64_t v32 = v30 + 1, v30 + 1 >= v28)) {
                BUG();
              }
              if (v32 >= v56) {
                BUG();
              }
              if (v32 >= v57) {
                BUG();
              }
              uint64_t v69 = v30 + 1;
              Swift::Int v33 = *(int *)(v63 + 4 * v30 + 36);
              double v48 = *(double *)(v64 + 8 * v30 + 40);
              if (v62 > 0.0
                && (uint64_t v34 = v29,
                    double v35 = COERCE_DOUBLE(specialized static BinaryFloatingPoint<>.random<A>(in:using:)((uint64_t)v26, 0.0, 1.0)),
                    uint64_t v29 = v34,
                    v62 >= v35))
              {
                uint64_t v28 = v68;
                uint64_t v43 = v69;
              }
              else
              {
                Swift::Int v36 = *(void *)(v58 + 16);
                Swift::Int v37 = v55;
                if (v36 <= v55) {
                  BUG();
                }
                if ((int)v33 < 0 || v36 <= v33) {
                  BUG();
                }
                if (v2[10] <= v55)
                {
                  _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, 0xD000000000000012, "gularMatrix.swift" + 0x8000000000000000, "LinearAlgebra/UpperStrictlyTriangularMatrix.swift", 49, 2, 61, 0);
                  goto LABEL_88;
                }
                if (v2[11] <= v33)
                {
                  unint64_t v45 = 0xD000000000000015;
                  uint64_t v47 = 64;
                  char v46 = "Row out of bounds.";
LABEL_87:
                  _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, v45, (unint64_t)v46 | 0x8000000000000000, "LinearAlgebra/UpperStrictlyTriangularMatrix.swift", 49, 2, v47, 0);
LABEL_88:
                  BUG();
                }
                double v50 = *v53;
                double v51 = *(double *)(v65 + 32 * v33 + 16);
                uint64_t v38 = v2[13];
                double v39 = 0.0;
                if ((int)v55 < (int)v33)
                {
                  unint64_t v40 = v29;
                  Swift::Int v41 = UpperStrictlyTriangularMatrix.dataIndex(_:_:)(v55, v33);
                  if (v41 < 0) {
                    BUG();
                  }
                  if ((unint64_t)v41 >= *((void *)v40 + 2)) {
                    BUG();
                  }
                  uint64_t v29 = v40;
                  double v39 = *(double *)&v40[8 * v41 + 32];
                  Swift::Int v37 = v55;
                }
                if ((int)v37 >= (int)v33)
                {
                  unint64_t v45 = 0xD00000000000003BLL;
                  uint64_t v47 = 52;
                  char v46 = "Column out of bounds.";
                  goto LABEL_87;
                }
                uint64_t v49 = (uint64_t)v29;
                swift_retain();
                swift_bridgeObjectRetain(v38);
                Swift::Int v42 = UpperStrictlyTriangularMatrix.dataIndex(_:_:)(v37, v33);
                swift_bridgeObjectRelease(v38);
                swift_release();
                uint64_t v26 = (void *)v49;
                if (swift_isUniquelyReferenced_nonNull_native(v49))
                {
                  unint64_t v2 = v72;
                  uint64_t v29 = (char *)v49;
                }
                else
                {
                  uint64_t v26 = (void *)v49;
                  uint64_t v29 = specialized _ContiguousArrayBuffer._consumeAndCreateNew()(v49);
                  unint64_t v2 = v72;
                }
                uint64_t v28 = v68;
                uint64_t v43 = v69;
                uint64_t v31 = v59;
                uint64_t v21 = v66;
                if (v42 < 0) {
                  BUG();
                }
                if ((unint64_t)v42 >= *((void *)v29 + 2)) {
                  BUG();
                }
                *(double *)&v29[8 * v42 + 32] = (v48 - v51) * (v52 - v50) + v39;
              }
              uint64_t v30 = v43;
              if (v68 - 1 == v43) {
                goto LABEL_56;
              }
            }
          }
          uint64_t v29 = v27;
LABEL_56:
          unint64_t v14 = a2;
          uint64_t v44 = v29;
          outlined release of SparseMatrix<Double>.MajorCollection(a2);
          uint64_t result = v44;
          uint64_t v16 = v70;
          uint64_t v17 = v71;
          uint64_t v13 = v54;
          uint64_t v18 = v60;
          uint64_t v19 = v61;
        }
        uint64_t v20 = v21;
      }
      while (v21 != v19);
      v2[12] = result;
    }
  }
  return result;
}

{
  void *v2;
  uint64_t v3;
  uint64_t v5;
  char *result;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char v10;
  uint64_t v11;
  void *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  uint64_t v29;
  void *v30;
  uint64_t v31;
  Swift::Int v32;
  __m128d v33;
  char *v34;
  void *v35;
  double v36;
  Swift::Int v37;
  Swift::Int v38;
  double v39;
  char *v40;
  Swift::Int v41;
  uint64_t v42;
  Swift::Int v43;
  BOOL v44;
  char *v45;
  unint64_t v46;
  const char *v47;
  uint64_t v48;
  __m128d v49;
  uint64_t v50;
  Swift::Int v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  __m128d v58;
  double v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  void *v69;

  uint64_t v69 = v2;
  uint64_t v3 = a2[6];
  if (v3 < 0) {
    BUG();
  }
  uint64_t v5 = a2[3];
  uint64_t result = *(char **)(v5 + 16);
  if (v3 >= (unint64_t)result) {
    BUG();
  }
  if (v3 + 1 >= (unint64_t)result) {
    BUG();
  }
  uint64_t v7 = *(void *)(v5 + 8 * v3 + 32);
  uint64_t v8 = *(void *)(v5 + 8 * v3 + 40);
  if (v7 != v8)
  {
    if (__OFSUB__(v8, v7)) {
      BUG();
    }
    uint64_t v61 = a2[4];
    double v62 = a2[5];
    uint64_t v9 = v2[2];
    unint64_t v67 = a2[6];
    uint64_t v68 = a2[3];
    if (v9 >= v8 - v7)
    {
      char v11 = 0x7FFFFFFFFFFFFFFFLL;
      uint64_t v59 = 0.0;
    }
    else
    {
      uint64_t v65 = specialized Dictionary.subscript.getter(a1, v2[14]);
      if (v10)
      {
        uint64_t v65 = specialized ItemSimilarityTrainer.getItemCountThresholdForUser<A>(itemInfo:itemList:)(v2[9], a2);
        specialized Dictionary._Variant.setValue(_:forKey:)(v65, a1);
      }
      uint64_t v7 = *(void *)(v5 + 8 * v67 + 32);
      uint64_t v8 = *(void *)(v5 + 8 * v67 + 40);
      if (__OFSUB__(v8, v7)) {
        BUG();
      }
      uint64_t v59 = 1.0 - (double)(int)v9 / (double)((int)v8 - (int)v7);
      char v11 = v65;
    }
    uint64_t v12 = a2;
    if (v8 < v7) {
      BUG();
    }
    uint64_t v57 = v8;
    uint64_t v56 = v7;
    uint64_t v13 = v2[12];
    uint64_t result = (char *)swift_isUniquelyReferenced_nonNull_native(v13);
    if ((_BYTE)result)
    {
      unint64_t v14 = v67;
      uint64_t v15 = v5;
      uint64_t v16 = v13;
    }
    else
    {
      uint64_t result = specialized _ContiguousArrayBuffer._consumeAndCreateNew()(v13);
      uint64_t v16 = (uint64_t)result;
      unint64_t v14 = v67;
      uint64_t v15 = v5;
    }
    v2[12] = v16;
    uint64_t v17 = v56;
    uint64_t v18 = v57;
    if (v56 != v57)
    {
      Swift::UInt v53 = *(void *)(v62 + 16);
      uint64_t v54 = v2[9];
      uint64_t v19 = v54 + 32;
      double v52 = *(void *)(v61 + 16);
      uint64_t v20 = v56;
      uint64_t v66 = v11;
      do
      {
        if (v20 >= v18) {
          BUG();
        }
        if (v17 < 0) {
          BUG();
        }
        if (v20 >= v52) {
          BUG();
        }
        if (v20 >= v53) {
          BUG();
        }
        uint64_t v21 = v20 + 1;
        uint64_t v22 = *(int *)(v61 + 4 * (v20 + 1) + 28);
        if ((int)v22 < 0) {
          BUG();
        }
        if (*(void *)(v54 + 16) <= v22) {
          BUG();
        }
        double v51 = *(int *)(v61 + 4 * (v20 + 1) + 28);
        if (v11 >= *(void *)(v19 + 16 * v22))
        {
          uint64_t v23 = *(void *)(v15 + 8 * v14 + 40);
          if (v23 <= v20) {
            BUG();
          }
          uint64_t v24 = *(void *)(v15 + 8 * v14 + 32);
          Swift::Int v55 = *(void *)(v15 + 8 * v14 + 40);
          if (v23 < v24) {
            BUG();
          }
          if (v21 < v24) {
            BUG();
          }
          uint64_t v25 = (char *)v16;
          uint64_t v49 = (__m128d)*(unint64_t *)(v62 + 8 * v21 + 24);
          uint64_t v26 = (uint64_t)v12;
          outlined retain of SparseMatrix<Double>.MajorCollection(v12);
          unint64_t v27 = v55;
          if (v21 != v55)
          {
            uint64_t v29 = v20;
            uint64_t v28 = v25;
            uint64_t v30 = v69;
            uint64_t v60 = v20;
            double v50 = v20 + 1;
            while (1)
            {
              if (v21 <= v20 || (uint64_t v31 = v29 + 1, v29 + 1 >= v27)) {
                BUG();
              }
              if (v31 >= v52) {
                BUG();
              }
              if (v31 >= v53) {
                BUG();
              }
              uint64_t v32 = *(int *)(v61 + 4 * v29 + 36);
              Swift::Int v33 = (__m128d)*(unint64_t *)(v62 + 8 * v29 + 40);
              if (v59 <= 0.0) {
                goto LABEL_37;
              }
              uint64_t v34 = v28;
              double v35 = v30;
              uint64_t v58 = (__m128d)*(unint64_t *)(v62 + 8 * v29 + 40);
              Swift::Int v36 = COERCE_DOUBLE(specialized static BinaryFloatingPoint<>.random<A>(in:using:)(v26, 0.0, 1.0));
              Swift::Int v33 = v58;
              uint64_t v30 = v35;
              uint64_t v20 = v60;
              uint64_t v28 = v34;
              if (v59 < v36)
              {
LABEL_37:
                Swift::Int v37 = *(void *)(v54 + 16);
                uint64_t v38 = v51;
                if (v37 <= v32 || (int)v32 < 0 || v37 <= v51) {
                  BUG();
                }
                if (v30[10] <= v51)
                {
                  _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, 0xD000000000000012, "gularMatrix.swift" + 0x8000000000000000, "LinearAlgebra/UpperStrictlyTriangularMatrix.swift", 49, 2, 61, 0);
                  goto LABEL_87;
                }
                if (v30[11] <= v32)
                {
                  char v46 = 0xD000000000000015;
                  double v48 = 64;
                  uint64_t v47 = "Row out of bounds.";
LABEL_86:
                  _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, v46, (unint64_t)v47 | 0x8000000000000000, "LinearAlgebra/UpperStrictlyTriangularMatrix.swift", 49, 2, v48, 0);
LABEL_87:
                  BUG();
                }
                uint64_t v64 = v30[13];
                double v39 = 0.0;
                if ((int)v51 < (int)v32)
                {
                  unint64_t v40 = v28;
                  Swift::Int v41 = UpperStrictlyTriangularMatrix.dataIndex(_:_:)(v51, v32);
                  if (v41 < 0) {
                    BUG();
                  }
                  if ((unint64_t)v41 >= *((void *)v40 + 2)) {
                    BUG();
                  }
                  uint64_t v28 = v40;
                  double v39 = *(double *)&v40[8 * v41 + 32];
                  uint64_t v38 = v51;
                }
                if ((_mm_cvtsi128_si32((__m128i)_mm_or_pd(_mm_cmpeq_pd(v49, (__m128d)0), _mm_cmpeq_pd(v33, (__m128d)0))) & 1) == 0)double v39 = v39 + 1.0; {
                if ((int)v38 >= (int)v32)
                }
                {
                  char v46 = 0xD00000000000003BLL;
                  double v48 = 52;
                  uint64_t v47 = "Column out of bounds.";
                  goto LABEL_86;
                }
                Swift::Int v42 = (uint64_t)v28;
                swift_retain();
                swift_bridgeObjectRetain(v64);
                uint64_t v43 = UpperStrictlyTriangularMatrix.dataIndex(_:_:)(v38, v32);
                swift_bridgeObjectRelease(v64);
                swift_release();
                uint64_t v26 = v42;
                if (swift_isUniquelyReferenced_nonNull_native(v42))
                {
                  uint64_t v30 = v69;
                  uint64_t v28 = (char *)v42;
                }
                else
                {
                  uint64_t v26 = v42;
                  uint64_t v28 = specialized _ContiguousArrayBuffer._consumeAndCreateNew()(v42);
                  uint64_t v30 = v69;
                }
                uint64_t v20 = v60;
                if (v43 < 0) {
                  BUG();
                }
                if ((unint64_t)v43 >= *((void *)v28 + 2)) {
                  BUG();
                }
                *(double *)&v28[8 * v43 + 32] = v39;
                unint64_t v27 = v55;
              }
              uint64_t v29 = v31;
              uint64_t v44 = v55 - 1 == v31;
              uint64_t v21 = v50;
              if (v44) {
                goto LABEL_56;
              }
            }
          }
          uint64_t v28 = v25;
LABEL_56:
          uint64_t v12 = a2;
          unint64_t v45 = v28;
          outlined release of SparseMatrix<Double>.MajorCollection(a2);
          uint64_t v16 = (uint64_t)v45;
          unint64_t v14 = v67;
          uint64_t v15 = v68;
          char v11 = v66;
          uint64_t v17 = v56;
          uint64_t v18 = v57;
          uint64_t v19 = v54 + 32;
        }
        uint64_t v20 = v21;
      }
      while (v21 != v18);
      uint64_t result = (char *)v69;
      v69[12] = v16;
    }
  }
  return result;
}

{
  void *v2;
  uint64_t v3;
  uint64_t v5;
  char *result;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  char *v25;
  char *v26;
  char *v27;
  char *v28;
  Swift::Int v29;
  char *v30;
  double v31;
  Swift::Int v32;
  uint64_t v33;
  uint64_t v34;
  Swift::Int v35;
  Swift::Int v36;
  char *v37;
  unint64_t v38;
  const char *v39;
  uint64_t v40;
  double v41;
  char *v42;
  uint64_t v43;
  Swift::Int v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  char *v49;
  char *v50;
  double v51;
  uint64_t v52;
  uint64_t v53;
  char *v55;
  char *v56;
  double v57;
  double v58;
  uint64_t v59;
  uint64_t v60;
  void *v61;

  uint64_t v3 = a2[6];
  if (v3 < 0) {
    BUG();
  }
  uint64_t v5 = a2[3];
  uint64_t result = *(char **)(v5 + 16);
  if (v3 >= (unint64_t)result) {
    BUG();
  }
  if (v3 + 1 >= (unint64_t)result) {
    BUG();
  }
  uint64_t v7 = *(void *)(v5 + 8 * v3 + 32);
  uint64_t v8 = *(char **)(v5 + 8 * v3 + 40);
  if ((char *)v7 != v8)
  {
    if (__OFSUB__(v8, v7)) {
      BUG();
    }
    double v52 = a2[4];
    Swift::UInt v53 = a2[5];
    uint64_t v9 = v2[2];
    uint64_t v61 = v2;
    uint64_t v59 = a2[6];
    uint64_t v60 = a2[3];
    if (v9 >= (uint64_t)&v8[-v7])
    {
      uint64_t v12 = 0x7FFFFFFFFFFFFFFFLL;
      double v51 = 0.0;
    }
    else
    {
      uint64_t v10 = specialized Dictionary.subscript.getter(a1, v2[14]);
      if (v11)
      {
        uint64_t v12 = specialized ItemSimilarityTrainer.getItemCountThresholdForUser<A>(itemInfo:itemList:)(v2[9], a2);
        specialized Dictionary._Variant.setValue(_:forKey:)(v12, a1);
      }
      else
      {
        uint64_t v12 = v10;
      }
      uint64_t v7 = *(void *)(v5 + 8 * v59 + 32);
      uint64_t v8 = *(char **)(v5 + 8 * v59 + 40);
      if (__OFSUB__(v8, v7)) {
        BUG();
      }
      double v51 = 1.0 - (double)(int)v9 / (double)((int)v8 - (int)v7);
    }
    if ((uint64_t)v8 < v7) {
      BUG();
    }
    uint64_t v49 = v8;
    double v48 = v7;
    uint64_t v13 = v2[12];
    uint64_t result = (char *)swift_isUniquelyReferenced_nonNull_native(v13);
    if (!(_BYTE)result)
    {
      uint64_t result = specialized _ContiguousArrayBuffer._consumeAndCreateNew()(v13);
      uint64_t v13 = (uint64_t)result;
    }
    unint64_t v14 = v59;
    uint64_t v15 = v5;
    v2[12] = v13;
    uint64_t v16 = v48;
    uint64_t v17 = v49;
    if ((char *)v48 != v49)
    {
      char v46 = *(void *)(v53 + 16);
      uint64_t v47 = v2[9];
      uint64_t v18 = v47 + 32;
      unint64_t v45 = *(void *)(v52 + 16);
      uint64_t v19 = (char *)v48;
      uint64_t v43 = v12;
      do
      {
        if ((uint64_t)v19 >= (uint64_t)v17) {
          BUG();
        }
        if (v16 < 0) {
          BUG();
        }
        if ((uint64_t)v19 >= v45) {
          BUG();
        }
        if ((uint64_t)v19 >= v46) {
          BUG();
        }
        uint64_t v56 = v19 + 1;
        uint64_t v20 = *(int *)(v52 + 4 * (void)(v19 + 1) + 28);
        if ((int)v20 < 0) {
          BUG();
        }
        if (*(void *)(v47 + 16) <= v20) {
          BUG();
        }
        uint64_t v44 = *(int *)(v52 + 4 * (void)(v19 + 1) + 28);
        if (v12 >= *(void *)(v18 + 16 * v20))
        {
          uint64_t v21 = *(char **)(v15 + 8 * v14 + 40);
          if ((uint64_t)v21 <= (uint64_t)v19) {
            BUG();
          }
          uint64_t v22 = *(void *)(v15 + 8 * v14 + 32);
          if ((uint64_t)v21 < v22) {
            BUG();
          }
          uint64_t v23 = v19 + 1;
          if ((uint64_t)v56 < v22) {
            BUG();
          }
          Swift::Int v41 = *(double *)(v53 + 8 * (void)v56 + 24);
          Swift::Int v55 = *(char **)(v15 + 8 * v14 + 40);
          uint64_t v24 = (uint64_t)a2;
          outlined retain of SparseMatrix<Double>.MajorCollection(a2);
          uint64_t v25 = v21;
          if (v56 != v21)
          {
            unint64_t v27 = v19;
            uint64_t v26 = (char *)v13;
            Swift::Int v42 = v19;
            while (1)
            {
              if ((uint64_t)v23 <= (uint64_t)v19 || (uint64_t v28 = v27 + 1, (uint64_t)(v27 + 1) >= (uint64_t)v25)) {
                BUG();
              }
              if ((uint64_t)v28 >= v45) {
                BUG();
              }
              if ((uint64_t)v28 >= v46) {
                BUG();
              }
              double v50 = v27 + 1;
              uint64_t v29 = *(int *)(v52 + 4 * (void)v27 + 36);
              uint64_t v57 = *(double *)(v53 + 8 * (void)v27 + 40);
              if (v51 > 0.0
                && (uint64_t v30 = v26,
                    uint64_t v31 = COERCE_DOUBLE(specialized static BinaryFloatingPoint<>.random<A>(in:using:)(v24, 0.0, 1.0)),
                    uint64_t v26 = v30,
                    v51 >= v31))
              {
                uint64_t v25 = v55;
                Swift::Int v37 = v50;
              }
              else
              {
                uint64_t v32 = *(void *)(v47 + 16);
                if (v32 <= v29 || (int)v29 < 0 || v32 <= v44) {
                  BUG();
                }
                if (v2[10] <= v44)
                {
                  _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, 0xD000000000000012, "gularMatrix.swift" + 0x8000000000000000, "LinearAlgebra/UpperStrictlyTriangularMatrix.swift", 49, 2, 61, 0);
                  goto LABEL_84;
                }
                if (v2[11] <= v29)
                {
                  uint64_t v38 = 0xD000000000000015;
                  unint64_t v40 = 64;
                  double v39 = "Row out of bounds.";
LABEL_83:
                  _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, v38, (unint64_t)v39 | 0x8000000000000000, "LinearAlgebra/UpperStrictlyTriangularMatrix.swift", 49, 2, v40, 0);
LABEL_84:
                  BUG();
                }
                if ((int)v44 >= (int)v29)
                {
                  uint64_t v38 = 0xD00000000000003BLL;
                  unint64_t v40 = 52;
                  double v39 = "Column out of bounds.";
                  goto LABEL_83;
                }
                Swift::Int v33 = v2[13];
                uint64_t v34 = (uint64_t)v26;
                double v35 = UpperStrictlyTriangularMatrix.dataIndex(_:_:)(v44, v29);
                if (v35 < 0) {
                  BUG();
                }
                if ((unint64_t)v35 >= *(void *)(v34 + 16)) {
                  BUG();
                }
                uint64_t v58 = v57 * v41 + *(double *)(v34 + 8 * v35 + 32);
                swift_retain();
                swift_bridgeObjectRetain(v33);
                Swift::Int v36 = UpperStrictlyTriangularMatrix.dataIndex(_:_:)(v44, v29);
                swift_bridgeObjectRelease(v33);
                swift_release();
                uint64_t v24 = v34;
                if (swift_isUniquelyReferenced_nonNull_native(v34))
                {
                  unint64_t v2 = v61;
                  uint64_t v26 = (char *)v34;
                }
                else
                {
                  uint64_t v24 = v34;
                  uint64_t v26 = specialized _ContiguousArrayBuffer._consumeAndCreateNew()(v34);
                  unint64_t v2 = v61;
                }
                uint64_t v23 = v56;
                uint64_t v25 = v55;
                Swift::Int v37 = v50;
                uint64_t v19 = v42;
                if (v36 < 0) {
                  BUG();
                }
                if ((unint64_t)v36 >= *((void *)v26 + 2)) {
                  BUG();
                }
                *(double *)&v26[8 * v36 + 32] = v58;
              }
              unint64_t v27 = v37;
              if (v55 - 1 == v37) {
                goto LABEL_53;
              }
            }
          }
          uint64_t v26 = (char *)v13;
LABEL_53:
          uint64_t v13 = (uint64_t)v26;
          outlined release of SparseMatrix<Double>.MajorCollection(a2);
          unint64_t v14 = v59;
          uint64_t v15 = v60;
          uint64_t v12 = v43;
          uint64_t v16 = v48;
          uint64_t v17 = v49;
          uint64_t v18 = v47 + 32;
        }
        uint64_t result = v56;
        uint64_t v19 = v56;
      }
      while (v56 != v17);
      v2[12] = v13;
    }
  }
  return result;
}

uint64_t specialized ItemSimilarityTrainer.getItemCountThresholdForUser<A>(itemInfo:itemList:)(uint64_t a1, void *a2)
{
  ML21ItemSimilarityTrainerV03getC21CountThresholdForUser8itemInfo0K4ListSiSayAA0C10StatisticsVy0C5ScoreQzGG_qd__tSlRd__z5_Sdt7b56Rtd__lFS2i_Sdt_tcfu0_33_39c69c9f4ee04694167b65f5fa330960z4_SdtZ10Tf3nnnpk_nTf1cn_nTm = _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lF13LinearAlgebra12SparseMatrixV15MajorCollectionVySd_G_Sis5NeverOTg50127_s8CreateML21ItemSimilarityTrainerV03getC21CountThresholdForUser8itemInfo0K4ListSiSayAA0C10StatisticsVy0C5ScoreQzGG_qd__tSlRd__z5_Sdt7b56Rtd__lFS2i_Sdt_tcfu0_33_39c69c9f4ee04694167b65f5fa330960z4_SdtZ10Tf3nnnpk_nTf1cn_nTm(a2);
  uint64_t v4 = *(void *)(v2 + 16);
  if (__OFADD__(1, v4)) {
    BUG();
  }
  uint64_t v5 = (uint64_t)ML21ItemSimilarityTrainerV03getC21CountThresholdForUser8itemInfo0K4ListSiSayAA0C10StatisticsVy0C5ScoreQzGG_qd__tSlRd__z5_Sdt7b56Rtd__lFS2i_Sdt_tcfu0_33_39c69c9f4ee04694167b65f5fa330960z4_SdtZ10Tf3nnnpk_nTf1cn_nTm;
  swift_bridgeObjectRetain(a1);
  unint64_t v6 = specialized Collection.min(count:sortedBy:)(v4 + 1, v5, a1);
  swift_bridgeObjectRelease(v5);
  if (v4 < 0) {
    BUG();
  }
  if ((unint64_t)v4 >= v6[2]) {
    BUG();
  }
  uint64_t v7 = v6[v4 + 4];
  swift_bridgeObjectRelease((_BYTE)v6);
  if (v7 < 0) {
    BUG();
  }
  if ((unint64_t)v7 >= *(void *)(a1 + 16)) {
    BUG();
  }
  return *(void *)(a1 + 32 * v7 + 32);
}

{
  uint64_t v2;
  void *ML21ItemSimilarityTrainerV03getC21CountThresholdForUser8itemInfo0K4ListSiSayAA0C10StatisticsVy0C5ScoreQzGG_qd__tSlRd__z5_Sdt7b56Rtd__lFS2i_Sdt_tcfu0_33_39c69c9f4ee04694167b65f5fa330960z4_SdtZ10Tf3nnnpk_nTf1cn_nTm;
  uint64_t v4;
  uint64_t v5;
  void *v6;
  uint64_t v7;

  ML21ItemSimilarityTrainerV03getC21CountThresholdForUser8itemInfo0K4ListSiSayAA0C10StatisticsVy0C5ScoreQzGG_qd__tSlRd__z5_Sdt7b56Rtd__lFS2i_Sdt_tcfu0_33_39c69c9f4ee04694167b65f5fa330960z4_SdtZ10Tf3nnnpk_nTf1cn_nTm = _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lF13LinearAlgebra12SparseMatrixV15MajorCollectionVySd_G_Sis5NeverOTg50127_s8CreateML21ItemSimilarityTrainerV03getC21CountThresholdForUser8itemInfo0K4ListSiSayAA0C10StatisticsVy0C5ScoreQzGG_qd__tSlRd__z5_Sdt7b56Rtd__lFS2i_Sdt_tcfu0_33_39c69c9f4ee04694167b65f5fa330960z4_SdtZ10Tf3nnnpk_nTf1cn_nTm(a2);
  uint64_t v4 = *(void *)(v2 + 16);
  if (__OFADD__(1, v4)) {
    BUG();
  }
  uint64_t v5 = (uint64_t)ML21ItemSimilarityTrainerV03getC21CountThresholdForUser8itemInfo0K4ListSiSayAA0C10StatisticsVy0C5ScoreQzGG_qd__tSlRd__z5_Sdt7b56Rtd__lFS2i_Sdt_tcfu0_33_39c69c9f4ee04694167b65f5fa330960z4_SdtZ10Tf3nnnpk_nTf1cn_nTm;
  swift_bridgeObjectRetain(a1);
  unint64_t v6 = specialized Collection.min(count:sortedBy:)(v4 + 1, v5, a1);
  swift_bridgeObjectRelease(v5);
  if (v4 < 0) {
    BUG();
  }
  if ((unint64_t)v4 >= v6[2]) {
    BUG();
  }
  uint64_t v7 = v6[v4 + 4];
  swift_bridgeObjectRelease((_BYTE)v6);
  if (v7 < 0) {
    BUG();
  }
  if ((unint64_t)v7 >= *(void *)(a1 + 16)) {
    BUG();
  }
  return *(void *)(a1 + 16 * v7 + 32);
}

char *specialized Collection.min(count:sortedBy:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unint64_t a5)
{
  if (a1 < 0) {
    BUG();
  }
  if (!a1) {
    return (char *)_swiftEmptyArrayStorage;
  }
  uint64_t v8 = (a5 >> 1) - a4;
  if (__OFSUB__(a5 >> 1, a4)) {
    BUG();
  }
  uint64_t v9 = a1;
  if (v8 < a1) {
    uint64_t v9 = (a5 >> 1) - a4;
  }
  if (v9 < v8 / 10) {
    return specialized Sequence._minImplementation(count:sortedBy:)(a1, a2, a3, a4, a5);
  }
  uint64_t v16 = a3;
  swift_unknownObjectRetain(a2);
  uint64_t v15 = specialized ArraySlice._copyToContiguousArray()(a2, v16, a4, a5);
  specialized MutableCollection<>.sort(by:)((uint64_t *)&v15, (uint64_t (*)(uint64_t))specialized _ContiguousArrayBuffer._consumeAndCreateNew(), (uint64_t (*)(void))specialized UnsafeMutableBufferPointer._stableSortImpl(by:));
  if (v5) {
    return (char *)swift_release();
  }
  uint64_t v11 = specialized Collection.prefix(_:)(v9, (uint64_t)v15);
  return (char *)specialized Array.init<A>(_:)(v11, v12, v13, v14);
}

void *specialized Collection.min(count:sortedBy:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v20 = v3;
  if (a1 < 0) {
    BUG();
  }
  if (a1)
  {
    uint64_t v5 = *(void *)(a2 + 16);
    unint64_t v6 = a1;
    if (v5 < a1) {
      unint64_t v6 = *(void *)(a2 + 16);
    }
    if (v6 >= v5 / 0xAuLL)
    {
      uint64_t v19 = a2;
      swift_bridgeObjectRetain_n(a3, 3);
      swift_bridgeObjectRetain(a2);
      uint64_t v7 = v20;
      specialized MutableCollection<>.sort(by:)(&v19, a3, (uint64_t (*)(uint64_t))specialized _ContiguousArrayBuffer._consumeAndCreateNew());
      if (v7)
      {
        swift_bridgeObjectRelease_n(a3, 3, v8, v9, v10);
        swift_release();
      }
      else
      {
        uint64_t v11 = specialized Collection.prefix(_:)(v6, v19);
        unint64_t v6 = (unint64_t)specialized Array.init<A>(_:)(v11, v12, v13, v14);
        swift_bridgeObjectRelease_n(a3, 3, v15, v16, v17);
      }
    }
    else
    {
      swift_bridgeObjectRetain(a3);
      unint64_t v6 = (unint64_t)specialized Sequence._minImplementation(count:sortedBy:)(a1, a2, a3);
      swift_bridgeObjectRelease(a3);
    }
  }
  else
  {
    swift_bridgeObjectRelease(a3);
    return _swiftEmptyArrayStorage;
  }
  return (void *)v6;
}

{
  uint64_t v3;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v19;
  uint64_t v20;

  uint64_t v20 = v3;
  if (a1 < 0) {
    BUG();
  }
  if (a1)
  {
    uint64_t v5 = *(void *)(a2 + 16);
    unint64_t v6 = a1;
    if (v5 < a1) {
      unint64_t v6 = *(void *)(a2 + 16);
    }
    if (v6 >= v5 / 0xAuLL)
    {
      uint64_t v19 = a2;
      swift_bridgeObjectRetain_n(a3, 3);
      swift_bridgeObjectRetain(a2);
      uint64_t v7 = v20;
      specialized MutableCollection<>.sort(by:)(&v19, a3, (uint64_t (*)(uint64_t))specialized _ContiguousArrayBuffer._consumeAndCreateNew());
      if (v7)
      {
        swift_bridgeObjectRelease_n(a3, 3, v8, v9, v10);
        swift_release();
      }
      else
      {
        uint64_t v11 = specialized Collection.prefix(_:)(v6, v19);
        unint64_t v6 = (unint64_t)specialized Array.init<A>(_:)(v11, v12, v13, v14);
        swift_bridgeObjectRelease_n(a3, 3, v15, v16, v17);
      }
    }
    else
    {
      swift_bridgeObjectRetain(a3);
      unint64_t v6 = (unint64_t)specialized Sequence._minImplementation(count:sortedBy:)(a1, a2, a3);
      swift_bridgeObjectRelease(a3);
    }
  }
  else
  {
    swift_bridgeObjectRelease(a3);
    return _swiftEmptyArrayStorage;
  }
  return (void *)v6;
}

uint64_t specialized CategoricalLookupTable.init<A>(_:)(uint64_t a1, void (*a2)(uint64_t *), uint64_t a3)
{
  swift_bridgeObjectRetain(a1);
  swift_retain();
  uint64_t v4 = specialized Set.init<A>(_:)(a1, a2, a3);
  char v5 = v4;
  unint64_t v6 = specialized _copyCollectionToContiguousArray<A>(_:)(v4);
  swift_bridgeObjectRelease(v5);
  v10[0] = (uint64_t)v6;
  swift_retain();
  specialized MutableCollection<>.sort(by:)(v10, (uint64_t (*)(uint64_t))specialized _ContiguousArrayBuffer._consumeAndCreateNew(), (uint64_t (*)(void))specialized UnsafeMutableBufferPointer._stableSortImpl(by:));
  swift_release();
  uint64_t v7 = v10[0];
  uint64_t v8 = *(void *)(v10[0] + 16);
  swift_retain();
  specialized Dictionary.init<A>(uniqueKeysWithValues:)(v7, 0, v8);
  swift_release();
  swift_bridgeObjectRelease(a1);
  return v7;
}

uint64_t specialized CategoricalLookupTable.index(of:)(Swift::UInt a1, uint64_t a2, char a3, uint64_t a4, uint64_t a5)
{
  if (*(void *)(a5 + 16) && (unint64_t v6 = specialized __RawDictionaryStorage.find<A>(_:)(a1, a2, a3 & 1), (v7 & 1) != 0)) {
    return *(void *)(*(void *)(a5 + 56) + 8 * v6);
  }
  else {
    return 0;
  }
}

uint64_t specialized SparseMatrix.IndexedSequence.Iterator.next()()
{
  uint64_t v1 = *(void *)(v0 + 48);
  if (*(unsigned char *)(v0 + 16))
  {
    uint64_t v2 = *(void *)(v0 + 8);
    if (v1 < v2)
    {
      uint64_t v3 = *(void *)(v0 + 56);
      if (v3 < 0) {
        BUG();
      }
      uint64_t v4 = *(void *)(v0 + 32);
      if ((unint64_t)v3 >= *(void *)(v4 + 16)) {
        BUG();
      }
      uint64_t v5 = *(int *)(v4 + 4 * v3 + 32);
      specialized ContiguousArray.subscript.getter(*(void *)(v0 + 56), *(void *)(v0 + 40));
      uint64_t v6 = v3 + 1;
      *(void *)(v0 + 56) = v6;
      if (v1 < -1) {
        BUG();
      }
      uint64_t v7 = *(void *)(v0 + 24);
      uint64_t v8 = v1 + 1;
      unint64_t v9 = *(void *)(v7 + 16);
      if (v1 + 1 >= v9) {
        BUG();
      }
      if (v6 >= *(void *)(v7 + 8 * v1 + 40))
      {
        if (v8 < v2)
        {
          if (v1 + 2 >= v9) {
            BUG();
          }
          if (v6 >= *(void *)(v7 + 8 * v1 + 48))
          {
            if (v1 + 2 >= v2)
            {
              uint64_t v8 = v1 + 2;
            }
            else
            {
              if (v1 + 3 >= v9) {
                BUG();
              }
              uint64_t v8 = v1 + 2;
              if (v6 >= *(void *)(v7 + 8 * v1 + 56))
              {
                uint64_t v10 = v1 + 4;
                while (v10 - 1 < v2)
                {
                  if (v10 >= (uint64_t)v9) {
                    BUG();
                  }
                  uint64_t v11 = v10 + 1;
                  BOOL v12 = v6 < *(void *)(v7 + 8 * v10++ + 32);
                  if (v12)
                  {
                    uint64_t v8 = v11 - 2;
                    goto LABEL_40;
                  }
                }
                uint64_t v8 = v2;
              }
            }
          }
        }
LABEL_40:
        *(void *)(v0 + 48) = v8;
      }
      return v5;
    }
    return 0;
  }
  uint64_t v13 = *(void *)v0;
  if (v1 >= *(void *)v0) {
    return 0;
  }
  uint64_t v14 = *(void *)(v0 + 56);
  if (v14 < 0) {
    BUG();
  }
  if ((unint64_t)v14 >= *(void *)(*(void *)(v0 + 32) + 16)) {
    BUG();
  }
  specialized ContiguousArray.subscript.getter(*(void *)(v0 + 56), *(void *)(v0 + 40));
  uint64_t v15 = v14 + 1;
  *(void *)(v0 + 56) = v15;
  if (v1 < -1) {
    BUG();
  }
  uint64_t v16 = *(void *)(v0 + 24);
  uint64_t v17 = v1 + 1;
  unint64_t v18 = *(void *)(v16 + 16);
  if (v1 + 1 >= v18) {
    BUG();
  }
  if (v15 >= *(void *)(v16 + 8 * v1 + 40))
  {
    if (v17 < v13)
    {
      if (v1 + 2 >= v18) {
        BUG();
      }
      if (v15 >= *(void *)(v16 + 8 * v1 + 48))
      {
        if (v1 + 2 >= v13)
        {
          uint64_t v17 = v1 + 2;
        }
        else
        {
          if (v1 + 3 >= v18) {
            BUG();
          }
          uint64_t v17 = v1 + 2;
          if (v15 >= *(void *)(v16 + 8 * v1 + 56))
          {
            uint64_t v19 = v1 + 4;
            while (v19 - 1 < v13)
            {
              if (v19 >= (uint64_t)v18) {
                BUG();
              }
              uint64_t v20 = v19 + 1;
              BOOL v12 = v15 < *(void *)(v16 + 8 * v19++ + 32);
              if (v12)
              {
                uint64_t v17 = v20 - 2;
                goto LABEL_43;
              }
            }
            uint64_t v17 = v13;
          }
        }
      }
    }
LABEL_43:
    *(void *)(v0 + 48) = v17;
  }
  return v1;
}

void *specialized implicit closure #2 in static RecommenderModel.metrics<A, B>(expected:predicted:cutoffs:)()
{
  return &_swiftEmptyArrayStorage;
}

void *specialized static RecommenderModel.precisionRecall(expected:predicted:cutoffs:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v41 = *(void *)(a2 + 16);
  if (v41)
  {
    uint64_t v4 = a2;
    int64_t v6 = *(void *)(a3 + 16);
    uint64_t v7 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v6, 0, (uint64_t)_swiftEmptyArrayStorage);
    uint64_t v8 = v6;
    uint64_t v44 = v7;
    uint64_t v47 = a2;
    if (v6)
    {
      double v48 = (void *)a1;
      int64_t v9 = v7[2];
      uint64_t v10 = 2 * v9;
      uint64_t v11 = 0;
      do
      {
        unint64_t v12 = v9;
        uint64_t v13 = *(void *)(a3 + 8 * v11 + 32);
        unint64_t v14 = v7[3];
        ++v9;
        if (v14 >> 1 <= v12)
        {
          unint64_t v45 = (void *)v8;
          uint64_t v7 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(v14 >= 2, v9, 1, (uint64_t)v7);
        }
        v7[2] = v9;
        v7[v10 + 4] = v13;
        v7[v10 + 5] = v11++;
        v10 += 2;
      }
      while (v8 != v11);
      uint64_t v44 = v7;
      uint64_t v4 = v47;
      a1 = (uint64_t)v48;
    }
    specialized MutableCollection<>.sort(by:)((uint64_t *)&v44, (uint64_t (*)(uint64_t))specialized _ArrayBuffer._consumeAndCreateNew(), (uint64_t (*)(void))specialized UnsafeMutableBufferPointer._stableSortImpl(by:));
    uint64_t v15 = specialized Array.init(repeating:count:)(v8, 0.0, 0.0);
    char v46 = (void *)a1;
    swift_bridgeObjectRetain(a1);
    specialized MutableCollection<>.sort(by:)((uint64_t *)&v46, (uint64_t (*)(uint64_t))specialized _ContiguousArrayBuffer._consumeAndCreateNew(), (uint64_t (*)(void))specialized UnsafeMutableBufferPointer._stableSortImpl(by:));
    double v48 = v46;
    uint64_t v16 = v44[2];
    char v42 = (char)v44;
    if (v16)
    {
      unint64_t v43 = v4 + 32;
      uint64_t v17 = v44 + 5;
      do
      {
        unint64_t v45 = v15;
        uint64_t v18 = *(v17 - 1);
        if (v41 < v18) {
          uint64_t v18 = v41;
        }
        if (v18 < 0) {
          BUG();
        }
        uint64_t v39 = v16;
        unint64_t v40 = v17;
        uint64_t v38 = *v17;
        uint64_t v19 = type metadata accessor for __ContiguousArrayStorageBase(0);
        swift_bridgeObjectRetain_n(v4, 2);
        swift_unknownObjectRetain_n(v4, 2);
        uint64_t v20 = (void *)swift_dynamicCastClass(v4, v19);
        if (!v20)
        {
          swift_bridgeObjectRelease(v4);
          uint64_t v20 = _swiftEmptyArrayStorage;
        }
        uint64_t v21 = v20[2];
        swift_release();
        if (v21 == v18)
        {
          char v22 = v47;
          uint64_t v23 = (void *)swift_dynamicCastClass(v47, v19);
          if (!v23)
          {
            swift_bridgeObjectRelease(v22);
            uint64_t v23 = _swiftEmptyArrayStorage;
          }
        }
        else
        {
          char v22 = v47;
          swift_bridgeObjectRelease(v47);
          uint64_t v23 = _swiftEmptyArrayStorage;
          if (v18)
          {
            uint64_t v31 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<MLRecommender.Identifier>);
            uint64_t v23 = (void *)swift_allocObject(v31, 24 * v18 + 32, 7);
            long long v32 = (uint64_t)(_swift_stdlib_malloc_size(v23) - 32);
            void v23[2] = v18;
            v23[3] = 2 * (v32 / 24);
            unint64_t v33 = (unint64_t)(v23 + 4);
            if (v43 < (unint64_t)&v23[3 * v18 + 4] && v33 < v43 + 24 * v18)
            {
              _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize overlapping range", 49, 2, "Swift/UnsafePointer.swift", 25, 2, 1092, 1);
              BUG();
            }
            swift_arrayInitWithCopy(v33, v43, v18, &type metadata for MLRecommender.Identifier);
            char v22 = v47;
          }
        }
        swift_bridgeObjectRelease(v22);
        char v46 = v23;
        specialized MutableCollection<>.sort(by:)((uint64_t *)&v46, (uint64_t (*)(uint64_t))specialized _ContiguousArrayBuffer._consumeAndCreateNew(), (uint64_t (*)(void))specialized UnsafeMutableBufferPointer._stableSortImpl(by:));
        swift_bridgeObjectRelease(v22);
        int v24 = specialized static RecommenderModel.intersectionCount(_:_:)((uint64_t)v48, (uint64_t)v46);
        swift_release();
        double v25 = (double)v24;
        double v26 = 0.0;
        if (v18) {
          double v26 = v25 / (double)(int)v18;
        }
        uint64_t v27 = v48[2];
        double v28 = 1.0;
        if (v27) {
          double v28 = v25 / (double)(int)v27;
        }
        uint64_t v15 = v45;
        char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v45);
        uint64_t v4 = v47;
        if (!isUniquelyReferenced_nonNull_native) {
          uint64_t v15 = specialized _ArrayBuffer._consumeAndCreateNew()((uint64_t)v15);
        }
        if (v38 < 0) {
          BUG();
        }
        if ((unint64_t)v38 >= v15[2]) {
          BUG();
        }
        uint64_t v30 = 2 * v38;
        *(double *)&v15[v30 + 4] = v26;
        *(double *)&v15[v30 + 5] = v28;
        uint64_t v17 = v40 + 2;
        uint64_t v16 = v39 - 1;
      }
      while (v39 != 1);
    }
    swift_release();
    swift_bridgeObjectRelease(v42);
    uint64_t v34 = specialized _arrayForceCast<A, B>(_:)((uint64_t)v15);
    swift_bridgeObjectRelease((_BYTE)v15);
    return v34;
  }
  else
  {
    uint64_t v36 = *(void *)(a3 + 16);
    if (!v36) {
      return _swiftEmptyArrayStorage;
    }
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (precision: Double, recall: Double));
    uint64_t v37 = static Array._allocateBufferUninitialized(minimumCapacity:)(v36);
    *(void *)(v37 + 16) = v36;
    __bzero(v37 + 32, 16 * v36);
    return (void *)v37;
  }
}

uint64_t specialized MutableCollection<>.sort(by:)(uint64_t *a1, uint64_t a2, uint64_t (*a3)(uint64_t))
{
  uint64_t v4 = *a1;
  swift_bridgeObjectRetain_n(a2, 2);
  if (!swift_isUniquelyReferenced_nonNull_native(v4)) {
    uint64_t v4 = a3(v4);
  }
  uint64_t v5 = *(void *)(v4 + 16);
  v10[0] = v4 + 32;
  v10[1] = v5;
  swift_bridgeObjectRetain(a2);
  specialized UnsafeMutableBufferPointer._stableSortImpl(by:)(v10, a2);
  *a1 = v4;
  return swift_bridgeObjectRelease_n(a2, 3, v6, v7, v8);
}

{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v10[2];

  uint64_t v4 = *a1;
  swift_bridgeObjectRetain_n(a2, 2);
  if (!swift_isUniquelyReferenced_nonNull_native(v4)) {
    uint64_t v4 = a3(v4);
  }
  uint64_t v5 = *(void *)(v4 + 16);
  v10[0] = v4 + 32;
  v10[1] = v5;
  swift_bridgeObjectRetain(a2);
  specialized UnsafeMutableBufferPointer._stableSortImpl(by:)(v10, a2);
  *a1 = v4;
  return swift_bridgeObjectRelease_n(a2, 3, v6, v7, v8);
}

uint64_t specialized MutableCollection<>.sort(by:)(uint64_t *a1, uint64_t (*a2)(uint64_t), uint64_t (*a3)(void))
{
  uint64_t v4 = *a1;
  if (!swift_isUniquelyReferenced_nonNull_native(*a1)) {
    uint64_t v4 = a2(v4);
  }
  uint64_t result = a3();
  *a1 = v4;
  return result;
}

{
  uint64_t v3;
  uint64_t result;

  uint64_t v3 = *a1;
  if (!swift_isUniquelyReferenced_nonNull_native(*a1)) {
    uint64_t v3 = a2(v3);
  }
  uint64_t result = a3();
  *a1 = v3;
  return result;
}

uint64_t specialized static RecommenderModel.intersectionCount(_:_:)(uint64_t a1, uint64_t a2)
{
  unint64_t v2 = *(void *)(a1 + 16);
  if (v2)
  {
    unint64_t v3 = *(void *)(a2 + 16);
    if (v3)
    {
      unint64_t v4 = 0;
      unint64_t v5 = 0;
      uint64_t v28 = 0;
      uint64_t v29 = a2;
      unint64_t v22 = v2;
      unint64_t v23 = *(void *)(a2 + 16);
      while (1)
      {
        if (v5 >= v2) {
          BUG();
        }
        if (v4 >= v3) {
          BUG();
        }
        unint64_t v24 = v5;
        uint64_t v6 = 24 * v5;
        uint64_t v7 = *(void *)(a1 + 24 * v5 + 32);
        uint64_t v8 = *(void *)(a1 + 24 * v5 + 40);
        char v9 = *(unsigned char *)(a1 + v6 + 48);
        uint64_t v10 = 24 * v4;
        uint64_t v11 = *(void *)(a2 + 24 * v4 + 32);
        unsigned __int8 v12 = *(unsigned char *)(a2 + 24 * v4 + 48);
        if (v9)
        {
          if ((v12 & 1) == 0) {
            goto LABEL_13;
          }
          a2 = v29;
          if (v7 == v11) {
            goto LABEL_31;
          }
          if (v7 < v11)
          {
LABEL_14:
            unint64_t v5 = v24 + 1;
            goto LABEL_33;
          }
        }
        else
        {
          if (v12)
          {
            uint64_t v26 = v8;
            swift_bridgeObjectRetain(v8);
            uint64_t v8 = v26;
LABEL_13:
            outlined consume of MLRecommender.Identifier(v7, v8, v9);
            a2 = v29;
            if (~v9 & v12) {
              goto LABEL_14;
            }
            goto LABEL_19;
          }
          uint64_t v13 = *(void *)(a2 + v10 + 40);
          if (v7 != v11 || v8 != v13)
          {
            uint64_t v14 = *(void *)(a2 + 24 * v4 + 32);
            uint64_t v27 = v8;
            a2 = v29;
            if ((_stringCompareWithSmolCheck(_:_:expecting:)(v7, v8, v11, v13, 0) & 1) == 0)
            {
              a2 = v29;
              if (_stringCompareWithSmolCheck(_:_:expecting:)(v7, v27, v14, v13, 1)) {
                goto LABEL_14;
              }
            }
          }
        }
LABEL_19:
        char v15 = *(unsigned char *)(a2 + v10 + 48);
        uint64_t v16 = *(void *)(a2 + v10 + 32);
        uint64_t v17 = *(void *)(a2 + v10 + 40);
        uint64_t v18 = *(void *)(a1 + v6 + 32);
        char v19 = *(unsigned char *)(a1 + v6 + 48);
        if (!v15)
        {
          if ((v19 & 1) == 0)
          {
            uint64_t v20 = *(void *)(a1 + v6 + 40);
            if (v16 == v18 && v17 == v20
              || (a2 = v29, (_stringCompareWithSmolCheck(_:_:expecting:)(v16, v17, v18, v20, 0) & 1) != 0)
              || (a2 = v29, (_stringCompareWithSmolCheck(_:_:expecting:)(v16, v17, v18, v20, 1) & 1) == 0))
            {
LABEL_31:
              if (__OFADD__(1, v28)) {
                BUG();
              }
              ++v28;
              unint64_t v5 = v24 + 1;
              ++v4;
              goto LABEL_33;
            }
            goto LABEL_26;
          }
          swift_bridgeObjectRetain(v17);
LABEL_25:
          outlined consume of MLRecommender.Identifier(v16, v17, v15);
          a2 = v29;
          if (v15) {
            goto LABEL_31;
          }
          goto LABEL_26;
        }
        if ((v19 & 1) == 0) {
          goto LABEL_25;
        }
        a2 = v29;
        if (v16 >= v18) {
          goto LABEL_31;
        }
LABEL_26:
        ++v4;
        unint64_t v5 = v24;
LABEL_33:
        unint64_t v2 = v22;
        unint64_t v3 = v23;
        if (v5 == v22 || v4 == v23) {
          return v28;
        }
      }
    }
  }
  return 0;
}

uint64_t specialized Collection.prefix(_:)(uint64_t a1, uint64_t a2)
{
  return specialized Collection.prefix(_:)(a1, a2);
}

{
  unint64_t v2;
  uint64_t v3;
  char v4;

  if (a1 < 0) {
    BUG();
  }
  unint64_t v2 = *(void *)(a2 + 16);
  unint64_t v3 = specialized Array.index(_:offsetBy:limitedBy:)(0, a1, v2);
  if (v4) {
    unint64_t v3 = v2;
  }
  if (v3 < 0) {
    BUG();
  }
  if (v2 < v3) {
    BUG();
  }
  return a2;
}

char specialized RecommenderTrainingData.init(_:)(uint64_t a1)
{
  uint64_t v39 = v1;
  lazy protocol witness table accessor for type MLRecommender.Identifier and conformance MLRecommender.Identifier();
  lazy protocol witness table accessor for type MLRecommender.Identifier and conformance MLRecommender.Identifier();
  uint64_t KeyPath = swift_getKeyPath(&unk_3490C8);
  swift_bridgeObjectRetain(a1);
  *(void *)&long long v3 = specialized CategoricalLookupTable.init<A>(_:)(a1, (void (*)(uint64_t *))partial apply for specialized implicit closure #1 in RecommenderTrainingData.init(_:), KeyPath);
  uint64_t v4 = v3;
  char v5 = BYTE8(v3);
  long long v40 = v3;
  uint64_t v6 = swift_getKeyPath(&unk_3490E8);
  swift_bridgeObjectRetain(a1);
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRetain(v5);
  *(void *)&long long v7 = specialized CategoricalLookupTable.init<A>(_:)(a1, (void (*)(uint64_t *))partial apply for specialized implicit closure #1 in RecommenderTrainingData.init(_:), v6);
  long long v8 = v7;
  long long v41 = v7;
  uint64_t v9 = *(void *)(v4 + 16);
  swift_bridgeObjectRetain(v7);
  swift_bridgeObjectRetain(BYTE8(v8));
  swift_bridgeObjectRelease(v5);
  swift_bridgeObjectRelease(v4);
  uint64_t v10 = *(void *)(v8 + 16);
  swift_bridgeObjectRelease(BYTE8(v8));
  swift_bridgeObjectRelease(v8);
  uint64_t v11 = specialized Array.init(repeating:count:)(0, v9 + 1);
  uint64_t v42 = v9;
  uint64_t v43 = v10;
  uint64_t v44 = v11;
  uint64_t v47 = *(void *)(a1 + 16);
  if (v47)
  {
    char v12 = BYTE8(v40);
    if (!*(void *)(*((void *)&v40 + 1) + 16)) {
      BUG();
    }
    Swift::UInt v49 = *(void *)(a1 + 32);
    uint64_t v50 = *(void *)(a1 + 40);
    Swift::UInt v13 = *(void *)(a1 + 56);
    uint64_t v14 = *(void *)(a1 + 64);
    char v15 = *(unsigned char *)(a1 + 72);
    double v45 = *(double *)(a1 + 80);
    char v16 = v40;
    char v55 = *(unsigned char *)(a1 + 48);
    outlined copy of MLRecommender.Identifier(v49, v50, v55);
    char v56 = v15;
    Swift::UInt v53 = v13;
    uint64_t v52 = v14;
    outlined copy of MLRecommender.Identifier(v13, v14, v15);
    swift_bridgeObjectRetain(v40);
    swift_bridgeObjectRetain(BYTE8(v40));
    unint64_t v17 = specialized __RawDictionaryStorage.find<A>(_:)(v49, v50, v55);
    if ((v18 & 1) == 0)
    {
LABEL_22:
      swift_bridgeObjectRelease(v12);
      swift_bridgeObjectRelease(v16);
      BUG();
    }
    uint64_t v46 = *(void *)(*(void *)(*((void *)&v40 + 1) + 56) + 8 * v17);
    swift_bridgeObjectRelease(BYTE8(v40));
    swift_bridgeObjectRelease(v40);
    if (!*(void *)(*((void *)&v8 + 1) + 16)) {
      BUG();
    }
    swift_bridgeObjectRetain(v8);
    swift_bridgeObjectRetain(BYTE8(v8));
    unint64_t v19 = specialized __RawDictionaryStorage.find<A>(_:)(v13, v14, v15);
    if ((v20 & 1) == 0)
    {
LABEL_13:
      swift_bridgeObjectRelease(BYTE8(v8));
      swift_bridgeObjectRelease(v8);
      BUG();
    }
    uint64_t v21 = (void *)(a1 + 136);
    uint64_t v48 = v47 - 1;
    uint64_t v51 = 0;
    char v22 = v8;
    uint64_t v23 = *((void *)&v8 + 1);
    uint64_t v24 = v53;
    while (1)
    {
      uint64_t v25 = *(void *)(*(void *)(v23 + 56) + 8 * v19);
      swift_bridgeObjectRelease(v23);
      swift_bridgeObjectRelease(v22);
      specialized SparseMatrix.subscript.setter(v46, v25, v45);
      outlined consume of MLRecommender.Identifier(v24, v52, v56);
      outlined consume of MLRecommender.Identifier(v49, v50, v55);
      if (v48 == v51) {
        break;
      }
      if ((unint64_t)(v51 + 1) >= *(void *)(a1 + 16)) {
        BUG();
      }
      if (!*(void *)(*((void *)&v40 + 1) + 16)) {
        BUG();
      }
      ++v51;
      Swift::UInt v26 = *(v21 - 6);
      uint64_t v27 = v21;
      uint64_t v28 = *(v21 - 5);
      char v29 = *((unsigned char *)v27 - 32);
      Swift::UInt v54 = *(v27 - 3);
      uint64_t v52 = *(v27 - 2);
      char v30 = *((unsigned char *)v27 - 8);
      uint64_t v38 = v27;
      double v45 = *(double *)v27;
      swift_bridgeObjectRetain(v40);
      swift_bridgeObjectRetain(BYTE8(v40));
      char v55 = v29;
      outlined copy of MLRecommender.Identifier(v26, v28, v29);
      char v56 = v30;
      char v31 = v30;
      outlined copy of MLRecommender.Identifier(v54, v52, v30);
      Swift::UInt v49 = v26;
      uint64_t v50 = v28;
      char v32 = v29;
      char v16 = v40;
      char v12 = BYTE8(v40);
      unint64_t v33 = specialized __RawDictionaryStorage.find<A>(_:)(v26, v28, v32);
      if ((v34 & 1) == 0) {
        goto LABEL_22;
      }
      uint64_t v35 = *(void *)(*(void *)(*((void *)&v40 + 1) + 56) + 8 * v33);
      swift_bridgeObjectRelease(BYTE8(v40));
      swift_bridgeObjectRelease(v40);
      uint64_t v23 = *((void *)&v8 + 1);
      char v22 = v8;
      if (!*(void *)(*((void *)&v8 + 1) + 16)) {
        BUG();
      }
      uint64_t v46 = v35;
      uint64_t v21 = v38 + 7;
      swift_bridgeObjectRetain(v8);
      swift_bridgeObjectRetain(BYTE8(v8));
      uint64_t v24 = v54;
      unint64_t v19 = specialized __RawDictionaryStorage.find<A>(_:)(v54, v52, v31);
      if ((v36 & 1) == 0) {
        goto LABEL_13;
      }
    }
    swift_bridgeObjectRelease(a1);
    uint64_t v9 = v42;
    uint64_t v10 = v43;
    char result = 0;
    uint64_t v11 = v44;
  }
  else
  {
    swift_bridgeObjectRelease(a1);
    char result = 0;
  }
  *(_OWORD *)uint64_t v39 = v40;
  *(_OWORD *)(v39 + 16) = v41;
  *(void *)(v39 + 32) = v9;
  *(void *)(v39 + 40) = v10;
  *(unsigned char *)(v39 + 48) = 0;
  *(void *)(v39 + 56) = v11;
  *(void *)(v39 + 64) = _swiftEmptyArrayStorage;
  *(void *)(v39 + 72) = _swiftEmptyArrayStorage;
  return result;
}

unint64_t specialized Recommender.buildInteractionTable(_:nearestItems:)(uint64_t a1, uint64_t a2, double a3, uint64_t a4, int64_t a5, uint64_t a6)
{
  unint64_t v7 = v6;
  double v74 = a3;
  if (a2)
  {
    outlined retain of RecommenderTrainingData<MLRecommender.Identifier, MLRecommender.Identifier>((void *)a1);
    ML13MLRecommenderV10IdentifierO_AJSd5scoretG_Si_SiSdAKtsAE_pTg503_s8d148ML11RecommenderV21buildInteractionTable_12nearestItemsAA0e6LookupF0VAA0C12TrainingDataVyxq_G_Sayq__q_Sd5scoretGSgtKFSi_SiSdAKtq__q_SdAKt_tKXEfU_AA13f3V10G27O_AqA16CosineSimilarityVTG5AF0kvW0VyA2JGTf1cn_nTm = _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSay8CreateML13MLRecommenderV10IdentifierO_AJSd5scoretG_Si_SiSdAKtsAE_pTg503_s8d148ML11RecommenderV21buildInteractionTable_12nearestItemsAA0e6LookupF0VAA0C12TrainingDataVyxq_G_Sayq__q_Sd5scoretGSgtKFSi_SiSdAKtq__q_SdAKt_tKXEfU_AA13f3V10G27O_AqA16CosineSimilarityVTG5AF0kvW0VyA2JGTf1cn_nTm(a2, (uint64_t *)a1);
    if (!v6)
    {
      uint64_t v38 = (uint64_t)ML13MLRecommenderV10IdentifierO_AJSd5scoretG_Si_SiSdAKtsAE_pTg503_s8d148ML11RecommenderV21buildInteractionTable_12nearestItemsAA0e6LookupF0VAA0C12TrainingDataVyxq_G_Sayq__q_Sd5scoretGSgtKFSi_SiSdAKtq__q_SdAKt_tKXEfU_AA13f3V10G27O_AqA16CosineSimilarityVTG5AF0kvW0VyA2JGTf1cn_nTm;
      type metadata accessor for InteractionTableBuilder();
      unint64_t v7 = static InteractionTableBuilder.createFromItemInteractions(interactions:maximumInteractionsPerItem:minimumInteractionScore:)(v38, a5, v74);
      double v74 = v39;
      swift_bridgeObjectRelease(v38);
    }
  }
  else
  {
    unint64_t v63 = v6;
    long long v10 = *(_OWORD *)(a1 + 48);
    long long v11 = *(_OWORD *)(a1 + 64);
    v42[0] = *(_OWORD *)(a1 + 32);
    v42[2] = v11;
    v42[1] = v10;
    LOBYTE(v72) = *(unsigned char *)(a1 + 48);
    Swift::Double score = *(double *)(a1 + 72);
    uint64_t v12 = *(void *)(a1 + 16);
    uint64_t v66 = *((void *)&v10 + 1);
    uint64_t v67 = *((void *)&v11 + 1);
    uint64_t v43 = v11;
    int64_t v71 = a5;
    uint64_t v13 = *(void *)(v12 + 16);
    long long v65 = *(_OWORD *)(a1 + 32);
    long long v64 = *(_OWORD *)(a1 + 56);
    uint64_t v70 = a6;
    outlined retain of [Int](&v66);
    outlined retain of [Int](&v43);
    outlined retain of ContiguousArray<Double>(&v67);
    outlined retain of [Int](&v66);
    outlined retain of [Int](&v43);
    outlined retain of ContiguousArray<Double>(&v67);
    uint64_t v14 = static PearsonSimilarity.buildItemStatistics(ratings:count:)(v42, v13);
    outlined release of [Int?](&v66);
    outlined release of [Int?](&v43);
    outlined release of _NativeDictionary<String?, Int>.Iterator(&v67);
    uint64_t v15 = specialized UpperStrictlyTriangularMatrix.init(rowCount:columnCount:)(v13, v13);
    uint64_t v16 = *(void *)&v42[0];
    double v49 = v74;
    int64_t v17 = v71;
    int64_t v50 = v71;
    uint64_t v51 = v70;
    long long v52 = v65;
    char v53 = (char)v72;
    long long v54 = v64;
    Swift::Double v55 = score;
    char v56 = v14;
    uint64_t v57 = v15;
    uint64_t v58 = v18;
    uint64_t v59 = v19;
    uint64_t v60 = v20;
    uint64_t v61 = _swiftEmptyDictionarySingleton;
    uint64_t v21 = v14[2];
    uint64_t v22 = type metadata accessor for InteractionTableBuilder();
    swift_initStackObject(v22, v41);
    *(void *)&long long v64 = InteractionTableBuilder.init(itemCount:maximumInteractionsPerItem:minimumInteractionScore:)(v21, v17, v74);
    if (v16 < 0) {
      BUG();
    }
    if (v16)
    {
      uint64_t v23 = 0;
      Swift::Int v69 = v16;
      do
      {
        *(void *)&double v74 = v23 + 1;
        char v24 = BYTE8(v54);
        Swift::Double score = *(double *)&v54;
        long long v44 = v52;
        char v45 = v53;
        long long v46 = v54;
        Swift::Double v47 = v55;
        uint64_t v48 = v23;
        swift_bridgeObjectRetain(v54);
        swift_bridgeObjectRetain(v24);
        swift_retain();
        specialized ItemSimilarityTrainer.processUser<A>(userIndex:ratings:)(v23, &v44);
        Swift::Int v25 = v69;
        swift_release();
        swift_bridgeObjectRelease(v24);
        swift_bridgeObjectRelease(LOBYTE(score));
        uint64_t v23 = *(void *)&v74;
      }
      while (v25 != *(void *)&v74);
    }
    char v72 = v56;
    uint64_t v26 = v59;
    char v27 = v60;
    *(void *)&long long v65 = v59;
    uint64_t v68 = v60;
    if (v58 >= 2)
    {
      uint64_t v70 = v57;
      if (v57 > 0)
      {
        double v62 = v72 + 4;
        int64_t v71 = v58;
        swift_retain();
        swift_bridgeObjectRetain(v27);
        int64_t v28 = v71;
        unint64_t v29 = 1;
        Swift::Int v30 = 0;
        double v31 = 0.0;
        do
        {
          if (*(void *)&v31 >= *(void *)(v26 + 16)) {
            BUG();
          }
          int64_t v32 = v29 + 1;
          if (__OFADD__(1, v29)) {
            BUG();
          }
          double v33 = *(double *)(v26 + 8 * *(void *)&v31 + 32);
          Swift::Int v34 = v30;
          if (v32 == v28)
          {
            Swift::Int v34 = v30 + 1;
            if (__OFADD__(1, v30)) {
              BUG();
            }
            int64_t v32 = v30 + 2;
            if (__OFADD__(1, v34)) {
              BUG();
            }
          }
          if (v30 < 0) {
            BUG();
          }
          unint64_t v35 = v72[2];
          if (v30 >= v35) {
            BUG();
          }
          if (v29 >= v35) {
            BUG();
          }
          Swift::Int v69 = v34;
          double v74 = v31;
          Swift::Double score = v33 / sqrt(*(double *)&v62[4 * v30 + 3] * *(double *)&v62[4 * v29 + 3]);
          InteractionTableBuilder.insert(_:_:score:)(v30, v29, score);
          InteractionTableBuilder.insert(_:_:score:)(v29, v30, score);
          int64_t v28 = v71;
          uint64_t v26 = v65;
          if (v32 >= v71) {
            break;
          }
          *(void *)&double v31 = *(void *)&v74 + 1;
          unint64_t v29 = v32;
          Swift::Int v30 = v69;
        }
        while (v69 < v70);
        swift_bridgeObjectRelease(v68);
        swift_release();
      }
    }
    unsigned long long v36 = (unsigned __int128)InteractionTableBuilder.finalize()();
    double v74 = *((double *)&v36 + 1);
    unint64_t v7 = v36;
    swift_release();
    char v37 = BYTE8(v54);
    Swift::Double score = *(double *)&v54;
    swift_bridgeObjectRelease((_BYTE)v61);
    swift_bridgeObjectRelease(v68);
    swift_release();
    swift_bridgeObjectRelease((_BYTE)v72);
    swift_release();
    swift_bridgeObjectRelease(v37);
    swift_bridgeObjectRelease(LOBYTE(score));
  }
  return v7;
}

{
  unint64_t v6;
  unint64_t v7;
  void *ML13MLRecommenderV10IdentifierO_AJSd5scoretG_Si_SiSdAKtsAE_pTg503_s8d148ML11RecommenderV21buildInteractionTable_12nearestItemsAA0e6LookupF0VAA0C12TrainingDataVyxq_G_Sayq__q_Sd5scoretGSgtKFSi_SiSdAKtq__q_SdAKt_tKXEfU_AA13f3V10G27O_AqA16CosineSimilarityVTG5AF0kvW0VyA2JGTf1cn_nTm;
  long long v10;
  long long v11;
  uint64_t v12;
  uint64_t v13;
  void *v14;
  uint64_t v15;
  uint64_t v16;
  int64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char v24;
  Swift::Int v25;
  uint64_t v26;
  char v27;
  int64_t v28;
  unint64_t v29;
  Swift::Int v30;
  double v31;
  int64_t v32;
  long long v33;
  Swift::Int v34;
  unint64_t v35;
  long long v36;
  unsigned long long v37;
  char v38;
  uint64_t v39;
  double v40;
  char v42[48];
  _OWORD v43[3];
  uint64_t v44;
  long long v45;
  char v46;
  long long v47;
  Swift::Double v48;
  uint64_t v49;
  double v50;
  int64_t v51;
  uint64_t v52;
  long long v53;
  char v54;
  long long v55;
  Swift::Double v56;
  void *v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  void *v62;
  void *v63;
  unint64_t v64;
  long long v65;
  long long v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  Swift::Int v70;
  uint64_t v71;
  Swift::Double score[3];
  int64_t v73;
  void *v74;
  double v75;

  unint64_t v7 = v6;
  Swift::Bool v75 = a3;
  if (a2)
  {
    outlined retain of RecommenderTrainingData<MLRecommender.Identifier, MLRecommender.Identifier>((void *)a1);
    ML13MLRecommenderV10IdentifierO_AJSd5scoretG_Si_SiSdAKtsAE_pTg503_s8d148ML11RecommenderV21buildInteractionTable_12nearestItemsAA0e6LookupF0VAA0C12TrainingDataVyxq_G_Sayq__q_Sd5scoretGSgtKFSi_SiSdAKtq__q_SdAKt_tKXEfU_AA13f3V10G27O_AqA16CosineSimilarityVTG5AF0kvW0VyA2JGTf1cn_nTm = _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSay8CreateML13MLRecommenderV10IdentifierO_AJSd5scoretG_Si_SiSdAKtsAE_pTg503_s8d148ML11RecommenderV21buildInteractionTable_12nearestItemsAA0e6LookupF0VAA0C12TrainingDataVyxq_G_Sayq__q_Sd5scoretGSgtKFSi_SiSdAKtq__q_SdAKt_tKXEfU_AA13f3V10G27O_AqA16CosineSimilarityVTG5AF0kvW0VyA2JGTf1cn_nTm(a2, (uint64_t *)a1);
    if (!v6)
    {
      double v39 = (uint64_t)ML13MLRecommenderV10IdentifierO_AJSd5scoretG_Si_SiSdAKtsAE_pTg503_s8d148ML11RecommenderV21buildInteractionTable_12nearestItemsAA0e6LookupF0VAA0C12TrainingDataVyxq_G_Sayq__q_Sd5scoretGSgtKFSi_SiSdAKtq__q_SdAKt_tKXEfU_AA13f3V10G27O_AqA16CosineSimilarityVTG5AF0kvW0VyA2JGTf1cn_nTm;
      type metadata accessor for InteractionTableBuilder();
      unint64_t v7 = static InteractionTableBuilder.createFromItemInteractions(interactions:maximumInteractionsPerItem:minimumInteractionScore:)(v39, a5, v75);
      Swift::Bool v75 = v40;
      swift_bridgeObjectRelease(v39);
    }
  }
  else
  {
    long long v64 = v6;
    long long v10 = *(_OWORD *)(a1 + 48);
    long long v11 = *(_OWORD *)(a1 + 64);
    v43[0] = *(_OWORD *)(a1 + 32);
    v43[2] = v11;
    v43[1] = v10;
    LOBYTE(v74) = *(unsigned char *)(a1 + 48);
    score[0] = *(Swift::Double *)(a1 + 72);
    uint64_t v12 = *(void *)(a1 + 16);
    uint64_t v67 = *((void *)&v10 + 1);
    uint64_t v68 = *((void *)&v11 + 1);
    long long v44 = v11;
    BOOL v73 = a5;
    uint64_t v13 = *(void *)(v12 + 16);
    uint64_t v66 = *(_OWORD *)(a1 + 32);
    long long v65 = *(_OWORD *)(a1 + 56);
    int64_t v71 = a6;
    outlined retain of [Int](&v67);
    outlined retain of [Int](&v44);
    outlined retain of ContiguousArray<Double>(&v68);
    outlined retain of [Int](&v67);
    outlined retain of [Int](&v44);
    outlined retain of ContiguousArray<Double>(&v68);
    uint64_t v14 = static JaccardSimilarity.buildItemStatistics(ratings:count:)(v43, v13);
    outlined release of [Int?](&v67);
    outlined release of [Int?](&v44);
    outlined release of _NativeDictionary<String?, Int>.Iterator(&v68);
    uint64_t v15 = specialized UpperStrictlyTriangularMatrix.init(rowCount:columnCount:)(v13, v13);
    uint64_t v16 = *(void *)&v43[0];
    int64_t v50 = v75;
    int64_t v17 = v73;
    uint64_t v51 = v73;
    long long v52 = v71;
    char v53 = v66;
    long long v54 = (char)v74;
    Swift::Double v55 = v65;
    char v56 = score[0];
    uint64_t v57 = v14;
    uint64_t v58 = v15;
    uint64_t v59 = v18;
    uint64_t v60 = v19;
    uint64_t v61 = v20;
    double v62 = _swiftEmptyDictionarySingleton;
    uint64_t v21 = v14[2];
    uint64_t v22 = type metadata accessor for InteractionTableBuilder();
    swift_initStackObject(v22, v42);
    *(void *)&long long v65 = InteractionTableBuilder.init(itemCount:maximumInteractionsPerItem:minimumInteractionScore:)(v21, v17, v75);
    if (v16 < 0) {
      BUG();
    }
    if (v16)
    {
      uint64_t v23 = 0;
      uint64_t v70 = v16;
      do
      {
        *(void *)&Swift::Bool v75 = v23 + 1;
        char v24 = BYTE8(v55);
        *(void *)&score[0] = v55;
        char v45 = v53;
        long long v46 = v54;
        Swift::Double v47 = v55;
        uint64_t v48 = v56;
        double v49 = v23;
        swift_bridgeObjectRetain(v55);
        swift_bridgeObjectRetain(v24);
        swift_retain();
        specialized ItemSimilarityTrainer.processUser<A>(userIndex:ratings:)(v23, &v45);
        Swift::Int v25 = v70;
        swift_release();
        swift_bridgeObjectRelease(v24);
        swift_bridgeObjectRelease(LOBYTE(score[0]));
        uint64_t v23 = *(void *)&v75;
      }
      while (v25 != *(void *)&v75);
    }
    double v74 = v57;
    uint64_t v26 = v60;
    char v27 = v61;
    *(void *)&uint64_t v66 = v60;
    Swift::Int v69 = v61;
    if (v59 >= 2)
    {
      int64_t v71 = v58;
      if (v58 > 0)
      {
        unint64_t v63 = v74 + 4;
        BOOL v73 = v59;
        swift_retain();
        swift_bridgeObjectRetain(v27);
        int64_t v28 = v73;
        unint64_t v29 = 1;
        Swift::Int v30 = 0;
        double v31 = 0.0;
        do
        {
          if (*(void *)&v31 >= *(void *)(v26 + 16)) {
            BUG();
          }
          int64_t v32 = v29 + 1;
          if (__OFADD__(1, v29)) {
            BUG();
          }
          double v33 = *(unint64_t *)(v26 + 8 * *(void *)&v31 + 32);
          Swift::Int v34 = v30;
          if (v32 == v28)
          {
            Swift::Int v34 = v30 + 1;
            if (__OFADD__(1, v30)) {
              BUG();
            }
            int64_t v32 = v30 + 2;
            if (__OFADD__(1, v34)) {
              BUG();
            }
          }
          if (v30 < 0) {
            BUG();
          }
          unint64_t v35 = v74[2];
          if (v30 >= v35) {
            BUG();
          }
          if (v29 >= v35) {
            BUG();
          }
          uint64_t v70 = v34;
          Swift::Bool v75 = v31;
          unsigned long long v36 = 0;
          if ((_mm_cvtsi128_si32((__m128i)_mm_or_pd(_mm_cmpeq_pd((__m128d)(unint64_t)v63[2 * v30 + 1], (__m128d)0), _mm_cmpeq_pd((__m128d)(unint64_t)v63[2 * v29 + 1], (__m128d)0))) & 1) == 0)
          {
            *(double *)&double v33 = *(double *)&v33
                            / (*(double *)&v63[2 * v30 + 1] + *(double *)&v63[2 * v29 + 1] - *(double *)&v33);
            unsigned long long v36 = v33;
          }
          *(_OWORD *)Swift::Double score = v36;
          InteractionTableBuilder.insert(_:_:score:)(v30, v29, *(Swift::Double *)&v36);
          InteractionTableBuilder.insert(_:_:score:)(v29, v30, score[0]);
          int64_t v28 = v73;
          uint64_t v26 = v66;
          if (v32 >= v73) {
            break;
          }
          *(void *)&double v31 = *(void *)&v75 + 1;
          unint64_t v29 = v32;
          Swift::Int v30 = v70;
        }
        while (v70 < v71);
        swift_bridgeObjectRelease(v69);
        swift_release();
      }
    }
    char v37 = (unsigned __int128)InteractionTableBuilder.finalize()();
    Swift::Bool v75 = *((double *)&v37 + 1);
    unint64_t v7 = v37;
    swift_release();
    score[0] = *((Swift::Double *)&v55 + 1);
    uint64_t v38 = v55;
    swift_bridgeObjectRelease((_BYTE)v62);
    swift_bridgeObjectRelease(v69);
    swift_release();
    swift_bridgeObjectRelease((_BYTE)v74);
    swift_release();
    swift_bridgeObjectRelease(LOBYTE(score[0]));
    swift_bridgeObjectRelease(v38);
  }
  return v7;
}

{
  unint64_t v6;
  unint64_t v7;
  void *ML13MLRecommenderV10IdentifierO_AJSd5scoretG_Si_SiSdAKtsAE_pTg503_s8d148ML11RecommenderV21buildInteractionTable_12nearestItemsAA0e6LookupF0VAA0C12TrainingDataVyxq_G_Sayq__q_Sd5scoretGSgtKFSi_SiSdAKtq__q_SdAKt_tKXEfU_AA13f3V10G27O_AqA16CosineSimilarityVTG5AF0kvW0VyA2JGTf1cn_nTm;
  long long v10;
  long long v11;
  uint64_t v12;
  uint64_t v13;
  void *v14;
  uint64_t v15;
  uint64_t v16;
  int64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char v24;
  Swift::Int v25;
  uint64_t v26;
  char v27;
  int64_t v28;
  unint64_t v29;
  Swift::Int v30;
  double v31;
  int64_t v32;
  long long v33;
  Swift::Int v34;
  unint64_t v35;
  long long v36;
  unsigned long long v37;
  char v38;
  uint64_t v39;
  double v40;
  char v42[48];
  _OWORD v43[3];
  uint64_t v44;
  long long v45;
  char v46;
  long long v47;
  Swift::Double v48;
  uint64_t v49;
  double v50;
  int64_t v51;
  uint64_t v52;
  long long v53;
  char v54;
  long long v55;
  Swift::Double v56;
  void *v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  void *v62;
  void *v63;
  unint64_t v64;
  long long v65;
  long long v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  Swift::Int v70;
  uint64_t v71;
  Swift::Double score[3];
  int64_t v73;
  void *v74;
  double v75;

  unint64_t v7 = v6;
  Swift::Bool v75 = a3;
  if (a2)
  {
    outlined retain of RecommenderTrainingData<MLRecommender.Identifier, MLRecommender.Identifier>((void *)a1);
    ML13MLRecommenderV10IdentifierO_AJSd5scoretG_Si_SiSdAKtsAE_pTg503_s8d148ML11RecommenderV21buildInteractionTable_12nearestItemsAA0e6LookupF0VAA0C12TrainingDataVyxq_G_Sayq__q_Sd5scoretGSgtKFSi_SiSdAKtq__q_SdAKt_tKXEfU_AA13f3V10G27O_AqA16CosineSimilarityVTG5AF0kvW0VyA2JGTf1cn_nTm = _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSay8CreateML13MLRecommenderV10IdentifierO_AJSd5scoretG_Si_SiSdAKtsAE_pTg503_s8d148ML11RecommenderV21buildInteractionTable_12nearestItemsAA0e6LookupF0VAA0C12TrainingDataVyxq_G_Sayq__q_Sd5scoretGSgtKFSi_SiSdAKtq__q_SdAKt_tKXEfU_AA13f3V10G27O_AqA16CosineSimilarityVTG5AF0kvW0VyA2JGTf1cn_nTm(a2, (uint64_t *)a1);
    if (!v6)
    {
      double v39 = (uint64_t)ML13MLRecommenderV10IdentifierO_AJSd5scoretG_Si_SiSdAKtsAE_pTg503_s8d148ML11RecommenderV21buildInteractionTable_12nearestItemsAA0e6LookupF0VAA0C12TrainingDataVyxq_G_Sayq__q_Sd5scoretGSgtKFSi_SiSdAKtq__q_SdAKt_tKXEfU_AA13f3V10G27O_AqA16CosineSimilarityVTG5AF0kvW0VyA2JGTf1cn_nTm;
      type metadata accessor for InteractionTableBuilder();
      unint64_t v7 = static InteractionTableBuilder.createFromItemInteractions(interactions:maximumInteractionsPerItem:minimumInteractionScore:)(v39, a5, v75);
      Swift::Bool v75 = v40;
      swift_bridgeObjectRelease(v39);
    }
  }
  else
  {
    long long v64 = v6;
    long long v10 = *(_OWORD *)(a1 + 48);
    long long v11 = *(_OWORD *)(a1 + 64);
    v43[0] = *(_OWORD *)(a1 + 32);
    v43[2] = v11;
    v43[1] = v10;
    LOBYTE(v74) = *(unsigned char *)(a1 + 48);
    score[0] = *(Swift::Double *)(a1 + 72);
    uint64_t v12 = *(void *)(a1 + 16);
    uint64_t v67 = *((void *)&v10 + 1);
    uint64_t v68 = *((void *)&v11 + 1);
    long long v44 = v11;
    BOOL v73 = a5;
    uint64_t v13 = *(void *)(v12 + 16);
    uint64_t v66 = *(_OWORD *)(a1 + 32);
    long long v65 = *(_OWORD *)(a1 + 56);
    int64_t v71 = a6;
    outlined retain of [Int](&v67);
    outlined retain of [Int](&v44);
    outlined retain of ContiguousArray<Double>(&v68);
    outlined retain of [Int](&v67);
    outlined retain of [Int](&v44);
    outlined retain of ContiguousArray<Double>(&v68);
    uint64_t v14 = static CosineSimilarity.buildItemStatistics(ratings:count:)(v43, v13);
    outlined release of [Int?](&v67);
    outlined release of [Int?](&v44);
    outlined release of _NativeDictionary<String?, Int>.Iterator(&v68);
    uint64_t v15 = specialized UpperStrictlyTriangularMatrix.init(rowCount:columnCount:)(v13, v13);
    uint64_t v16 = *(void *)&v43[0];
    int64_t v50 = v75;
    int64_t v17 = v73;
    uint64_t v51 = v73;
    long long v52 = v71;
    char v53 = v66;
    long long v54 = (char)v74;
    Swift::Double v55 = v65;
    char v56 = score[0];
    uint64_t v57 = v14;
    uint64_t v58 = v15;
    uint64_t v59 = v18;
    uint64_t v60 = v19;
    uint64_t v61 = v20;
    double v62 = _swiftEmptyDictionarySingleton;
    uint64_t v21 = v14[2];
    uint64_t v22 = type metadata accessor for InteractionTableBuilder();
    swift_initStackObject(v22, v42);
    *(void *)&long long v65 = InteractionTableBuilder.init(itemCount:maximumInteractionsPerItem:minimumInteractionScore:)(v21, v17, v75);
    if (v16 < 0) {
      BUG();
    }
    if (v16)
    {
      uint64_t v23 = 0;
      uint64_t v70 = v16;
      do
      {
        *(void *)&Swift::Bool v75 = v23 + 1;
        char v24 = BYTE8(v55);
        *(void *)&score[0] = v55;
        char v45 = v53;
        long long v46 = v54;
        Swift::Double v47 = v55;
        uint64_t v48 = v56;
        double v49 = v23;
        swift_bridgeObjectRetain(v55);
        swift_bridgeObjectRetain(v24);
        swift_retain();
        specialized ItemSimilarityTrainer.processUser<A>(userIndex:ratings:)(v23, &v45);
        Swift::Int v25 = v70;
        swift_release();
        swift_bridgeObjectRelease(v24);
        swift_bridgeObjectRelease(LOBYTE(score[0]));
        uint64_t v23 = *(void *)&v75;
      }
      while (v25 != *(void *)&v75);
    }
    double v74 = v57;
    uint64_t v26 = v60;
    char v27 = v61;
    *(void *)&uint64_t v66 = v60;
    Swift::Int v69 = v61;
    if (v59 >= 2)
    {
      int64_t v71 = v58;
      if (v58 > 0)
      {
        unint64_t v63 = v74 + 4;
        BOOL v73 = v59;
        swift_retain();
        swift_bridgeObjectRetain(v27);
        int64_t v28 = v73;
        unint64_t v29 = 1;
        Swift::Int v30 = 0;
        double v31 = 0.0;
        do
        {
          if (*(void *)&v31 >= *(void *)(v26 + 16)) {
            BUG();
          }
          int64_t v32 = v29 + 1;
          if (__OFADD__(1, v29)) {
            BUG();
          }
          double v33 = *(unint64_t *)(v26 + 8 * *(void *)&v31 + 32);
          Swift::Int v34 = v30;
          if (v32 == v28)
          {
            Swift::Int v34 = v30 + 1;
            if (__OFADD__(1, v30)) {
              BUG();
            }
            int64_t v32 = v30 + 2;
            if (__OFADD__(1, v34)) {
              BUG();
            }
          }
          if (v30 < 0) {
            BUG();
          }
          unint64_t v35 = v74[2];
          if (v30 >= v35) {
            BUG();
          }
          if (v29 >= v35) {
            BUG();
          }
          uint64_t v70 = v34;
          Swift::Bool v75 = v31;
          unsigned long long v36 = 0;
          if ((_mm_cvtsi128_si32((__m128i)_mm_or_pd(_mm_cmpeq_pd((__m128d)(unint64_t)v63[2 * v30 + 1], (__m128d)0), _mm_cmpeq_pd((__m128d)(unint64_t)v63[2 * v29 + 1], (__m128d)0))) & 1) == 0)
          {
            *(double *)&double v33 = *(double *)&v33 / sqrt(*(double *)&v63[2 * v30 + 1] * *(double *)&v63[2 * v29 + 1]);
            unsigned long long v36 = v33;
          }
          *(_OWORD *)Swift::Double score = v36;
          InteractionTableBuilder.insert(_:_:score:)(v30, v29, *(Swift::Double *)&v36);
          InteractionTableBuilder.insert(_:_:score:)(v29, v30, score[0]);
          int64_t v28 = v73;
          uint64_t v26 = v66;
          if (v32 >= v73) {
            break;
          }
          *(void *)&double v31 = *(void *)&v75 + 1;
          unint64_t v29 = v32;
          Swift::Int v30 = v70;
        }
        while (v70 < v71);
        swift_bridgeObjectRelease(v69);
        swift_release();
      }
    }
    char v37 = (unsigned __int128)InteractionTableBuilder.finalize()();
    Swift::Bool v75 = *((double *)&v37 + 1);
    unint64_t v7 = v37;
    swift_release();
    score[0] = *((Swift::Double *)&v55 + 1);
    uint64_t v38 = v55;
    swift_bridgeObjectRelease((_BYTE)v62);
    swift_bridgeObjectRelease(v69);
    swift_release();
    swift_bridgeObjectRelease((_BYTE)v74);
    swift_release();
    swift_bridgeObjectRelease(LOBYTE(score[0]));
    swift_bridgeObjectRelease(v38);
  }
  return v7;
}

unint64_t specialized RecommenderModel.computeStatistics(ratingCounts:)(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = v2;
  unint64_t v5 = *(void *)(*(void *)(v2 + 16) + 16);
  unint64_t v6 = specialized Array.init(repeating:count:)(v5, 0.0);
  swift_bridgeObjectRelease(*(void *)(v2 + 128));
  long long v7 = *(_OWORD *)(v2 + 32);
  long long v8 = *(_OWORD *)(v2 + 64);
  long long v21 = *(_OWORD *)(v2 + 48);
  long long v22 = v8;
  long long v20 = v7;
  uint64_t v25 = *((void *)&v21 + 1);
  uint64_t v26 = *((void *)&v8 + 1);
  uint64_t v27 = v8;
  outlined retain of [Int](&v25);
  outlined retain of [Int](&v27);
  outlined retain of ContiguousArray<Double>(&v26);
  specialized SparseMatrix.IndexedSequence.Iterator.init(base:)((uint64_t)&v20);
  if (!swift_isUniquelyReferenced_nonNull_native(v6)) {
    unint64_t v6 = specialized _ArrayBuffer._consumeAndCreateNew()((uint64_t)v6);
  }
  uint64_t v9 = v6;
  if (!swift_isUniquelyReferenced_nonNull_native(v6))
  {
    uint64_t v9 = v6;
    unint64_t v6 = specialized _ArrayBuffer._consumeAndCreateNew()((uint64_t)v6);
  }
  while (1)
  {
    specialized SparseMatrix.IndexedSequence.Iterator.next()(v9, a2, v10, *(void *)&v11, v12, v13);
    if (v12) {
      break;
    }
    if (v10 < 0) {
      BUG();
    }
    if ((unint64_t)v10 >= v6[2]) {
      BUG();
    }
    *(double *)&v6[v10 + 4] = v11 + *(double *)&v6[v10 + 4];
  }
  *(void *)(v2 + 128) = v6;
  uint64_t v28 = v23;
  char v14 = v24;
  swift_release();
  swift_bridgeObjectRelease(v14);
  unint64_t result = swift_bridgeObjectRelease(v28);
  *(_OWORD *)(v3 + 136) = xmmword_348EF0;
  if (v5)
  {
    if (v5 > *(void *)(a1 + 16)) {
      BUG();
    }
    double v16 = INFINITY;
    double v17 = -INFINITY;
    for (unint64_t result = 0; result != v5; ++result)
    {
      if (result >= v6[2]) {
        BUG();
      }
      double v18 = *(double *)&v6[result + 4] / fmax((double)(int)*(void *)(a1 + 8 * result + 32), 1.0);
      *(double *)&v6[result + 4] = v18;
      if (v16 <= v18)
      {
        double v19 = v18;
      }
      else
      {
        *(double *)(v3 + 136) = v18;
        double v19 = *(double *)&v6[result + 4];
        double v16 = v18;
      }
      if (v19 > v17)
      {
        *(double *)(v3 + 144) = v19;
        double v17 = v19;
      }
    }
    *(void *)(v3 + 128) = v6;
  }
  return result;
}

unint64_t specialized closure #1 in Recommender.buildInteractionTable(_:nearestItems:)(uint64_t a1, uint64_t a2)
{
  Swift::UInt v25 = *(void *)a1;
  uint64_t v2 = *(void *)(a1 + 8);
  char v26 = *(unsigned char *)(a1 + 16);
  uint64_t v3 = *(void *)(a2 + 24);
  if (!*(void *)(v3 + 16)
    || (Swift::UInt v22 = *(void *)(a1 + 24),
        uint64_t v24 = *(void *)(a1 + 32),
        char v4 = *(unsigned char *)(a1 + 40),
        uint64_t v23 = *(void *)(a1 + 48),
        unint64_t v5 = specialized __RawDictionaryStorage.find<A>(_:)(v25, v2, v26),
        (v6 & 1) == 0))
  {
    *(void *)&long long v20 = 0;
    *((void *)&v20 + 1) = 0xE000000000000000;
    _StringGuts.grow(_:)(51);
    long long v19 = v20;
    v9._char object = "item identifiers." + 0x8000000000000000;
    v9._uint64_t countAndFlagsBits = 0xD000000000000014;
    String.append(_:)(v9);
    *(void *)&long long v20 = v25;
    *((void *)&v20 + 1) = v2;
    char v10 = v26;
LABEL_8:
    char v21 = v10;
    _print_unlocked<A, B>(_:_:)(&v20, &v19, &type metadata for MLRecommender.Identifier, &type metadata for DefaultStringInterpolation, &protocol witness table for DefaultStringInterpolation);
    v12._char object = "Nearest items entry " + 0x8000000000000000;
    v12._uint64_t countAndFlagsBits = 0xD00000000000001DLL;
    String.append(_:)(v12);
    unint64_t v7 = *((void *)&v19 + 1);
    unint64_t v13 = v19;
    v12._char object = (void *)lazy protocol witness table accessor for type MLCreateError and conformance MLCreateError();
    swift_allocError(&type metadata for MLCreateError, v12._object, 0, 0);
    *(_OWORD *)uint64_t v14 = __PAIR128__(v7, v13);
    *(_OWORD *)(v14 + 16) = 0;
    *(_OWORD *)(v14 + 32) = 0;
    *(unsigned char *)(v14 + 48) = 0;
    swift_willThrow(&type metadata for MLCreateError, v12._object, v14, v15, v16, v17);
    return v7;
  }
  LOBYTE(v25) = v4;
  if (!*(void *)(v3 + 16)
    || (unint64_t v7 = *(void *)(*(void *)(v3 + 56) + 8 * v5),
        specialized __RawDictionaryStorage.find<A>(_:)(v22, v24, v25),
        (v8 & 1) == 0))
  {
    *(void *)&long long v20 = 0;
    *((void *)&v20 + 1) = 0xE000000000000000;
    _StringGuts.grow(_:)(51);
    long long v19 = v20;
    v11._char object = "item identifiers." + 0x8000000000000000;
    v11._uint64_t countAndFlagsBits = 0xD000000000000014;
    String.append(_:)(v11);
    *(void *)&long long v20 = v22;
    *((void *)&v20 + 1) = v24;
    char v10 = v25;
    goto LABEL_8;
  }
  return v7;
}

void *specialized Sequence.filter(_:)(uint64_t a1, uint64_t a2, uint64_t a3, char a4, uint64_t a5)
{
  if (a1 == a2) {
    goto LABEL_2;
  }
  if (a1 > a2) {
    BUG();
  }
  uint64_t v8 = a1;
  uint64_t v23 = a2;
  do
  {
    uint64_t v25 = v8;
    while (1)
    {
      if (v25 < a1) {
        BUG();
      }
      if (v8 >= a2) {
        BUG();
      }
      uint64_t v22 = v8 + 1;
      if (*(void *)(a3 + 16))
      {
        uint64_t v9 = static Hasher._hash(seed:_:)(*(void *)(a3 + 40), v8);
        uint64_t v10 = ~(-1 << *(unsigned char *)(a3 + 32));
        unint64_t v11 = v10 & v9;
        uint64_t v12 = *(void *)(a3 + 8 * (v11 >> 6) + 56);
        if (_bittest64(&v12, v11))
        {
          while (*(void *)(*(void *)(a3 + 48) + 8 * v11) != v8)
          {
            unint64_t v11 = v10 & (v11 + 1);
            uint64_t v13 = *(void *)(a3 + 8 * (v11 >> 6) + 56);
            if (!_bittest64(&v13, v11)) {
              goto LABEL_12;
            }
          }
          goto LABEL_18;
        }
      }
LABEL_12:
      if ((a4 & 1) == 0) {
        break;
      }
      if (!*(void *)(a5 + 16)) {
        break;
      }
      uint64_t v14 = static Hasher._hash(seed:_:)(*(void *)(a5 + 40), v8);
      uint64_t v15 = ~(-1 << *(unsigned char *)(a5 + 32));
      unint64_t v16 = v15 & v14;
      uint64_t v17 = *(void *)(a5 + 8 * (v16 >> 6) + 56);
      if (!_bittest64(&v17, v16)) {
        break;
      }
      while (*(void *)(*(void *)(a5 + 48) + 8 * v16) != v8)
      {
        unint64_t v16 = v15 & (v16 + 1);
        uint64_t v18 = *(void *)(a5 + 8 * (v16 >> 6) + 56);
        if (!_bittest64(&v18, v16)) {
          goto LABEL_20;
        }
      }
LABEL_18:
      a2 = v23;
      ++v8;
      if (v22 == v23) {
        goto LABEL_2;
      }
    }
LABEL_20:
    if (!swift_isUniquelyReferenced_nonNull_native(_swiftEmptyArrayStorage)) {
      specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, _swiftEmptyArrayStorage[2] + 1, 1);
    }
    unint64_t v19 = _swiftEmptyArrayStorage[2];
    int64_t v20 = v19 + 1;
    if (_swiftEmptyArrayStorage[3] >> 1 <= v19)
    {
      int64_t v26 = v19 + 1;
      unint64_t v21 = _swiftEmptyArrayStorage[2];
      specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(_swiftEmptyArrayStorage[3] >= 2uLL, v20, 1);
      int64_t v20 = v26;
      unint64_t v19 = v21;
    }
    _swiftEmptyArrayStorage[2] = v20;
    _swiftEmptyArrayStorage[v19 + 4] = v8;
    a2 = v23;
    ++v8;
  }
  while (v22 != v23);
LABEL_2:
  swift_bridgeObjectRelease(a5);
  swift_bridgeObjectRelease(a3);
  return _swiftEmptyArrayStorage;
}

void *specialized Sequence.filter(_:)(uint64_t a1, uint64_t a2, char a3, uint64_t a4)
{
  uint64_t v5 = a1;
  uint64_t v6 = 1 << *(unsigned char *)(a1 + 32);
  uint64_t v7 = ~(-1 << v6);
  if (v6 >= 64) {
    uint64_t v7 = -1;
  }
  unint64_t v37 = *(void *)(a1 + 56) & v7;
  uint64_t v8 = a2;
  int64_t v39 = (unint64_t)(v6 + 63) >> 6;
  long long v40 = _swiftEmptyArrayStorage;
  int64_t v9 = 0;
  uint64_t v35 = v5;
  while (1)
  {
LABEL_4:
    if (v37)
    {
      _BitScanForward64(&v10, v37);
      v37 &= v37 - 1;
      unint64_t v11 = v10 | (v9 << 6);
      int64_t v12 = v9;
      goto LABEL_17;
    }
    BOOL v13 = __OFADD__(1, v9);
    int64_t v14 = v9 + 1;
    if (v13) {
      BUG();
    }
    if (v14 >= v39) {
      break;
    }
    unint64_t i = *(void *)(v5 + 8 * v14 + 56);
    if (i)
    {
      int64_t v12 = v14;
    }
    else
    {
      int64_t v12 = v14 + 1;
      if (v14 + 1 >= v39) {
        break;
      }
      unint64_t i = *(void *)(v5 + 8 * v14 + 64);
      if (!i)
      {
        int64_t v12 = v14 + 2;
        if (v14 + 2 >= v39) {
          break;
        }
        unint64_t i = *(void *)(v5 + 8 * v14 + 72);
        if (!i)
        {
          int64_t v12 = v14 + 3;
          if (v14 + 3 >= v39) {
            break;
          }
          unint64_t i = *(void *)(v5 + 8 * v14 + 80);
          if (!i)
          {
            int64_t v12 = v14 + 4;
            if (v14 + 4 >= v39) {
              break;
            }
            for (unint64_t i = *(void *)(v5 + 8 * v14 + 88); !i; unint64_t i = *(void *)(v5 + 8 * v12 + 56))
            {
              BOOL v13 = __OFADD__(1, v12++);
              if (v13) {
                BUG();
              }
              if (v12 >= v39) {
                goto LABEL_41;
              }
            }
          }
        }
      }
    }
    _BitScanForward64(&v16, i);
    unint64_t v37 = i & (i - 1);
    unint64_t v11 = v16 + (v12 << 6);
LABEL_17:
    uint64_t v17 = *(void *)(*(void *)(v5 + 48) + 8 * v11);
    if (!*(void *)(v8 + 16)) {
      goto LABEL_23;
    }
    uint64_t v18 = static Hasher._hash(seed:_:)(*(void *)(a2 + 40), v17);
    uint64_t v8 = a2;
    uint64_t v19 = ~(-1 << *(unsigned char *)(a2 + 32));
    unint64_t v20 = v19 & v18;
    uint64_t v21 = *(void *)(a2 + 8 * (v20 >> 6) + 56);
    if (!_bittest64(&v21, v20)) {
      goto LABEL_23;
    }
    uint64_t v22 = *(void *)(a2 + 48);
    int64_t v9 = v12;
    if (*(void *)(v22 + 8 * v20) != v17)
    {
      while (1)
      {
        unint64_t v20 = v19 & (v20 + 1);
        uint64_t v23 = *(void *)(a2 + 8 * (v20 >> 6) + 56);
        if (!_bittest64(&v23, v20)) {
          break;
        }
        if (*(void *)(v22 + 8 * v20) == v17)
        {
LABEL_29:
          int64_t v9 = v12;
          goto LABEL_4;
        }
      }
LABEL_23:
      if ((a3 & 1) == 0) {
        goto LABEL_30;
      }
      if (!*(void *)(a4 + 16)) {
        goto LABEL_30;
      }
      uint64_t v24 = static Hasher._hash(seed:_:)(*(void *)(a4 + 40), v17);
      uint64_t v8 = a2;
      uint64_t v25 = ~(-1 << *(unsigned char *)(a4 + 32));
      unint64_t v26 = v25 & v24;
      uint64_t v27 = *(void *)(a4 + 8 * (v26 >> 6) + 56);
      if (!_bittest64(&v27, v26)) {
        goto LABEL_30;
      }
      uint64_t v28 = *(void *)(a4 + 48);
      int64_t v9 = v12;
      if (*(void *)(v28 + 8 * v26) != v17)
      {
        while (1)
        {
          unint64_t v26 = v25 & (v26 + 1);
          uint64_t v29 = *(void *)(a4 + 8 * (v26 >> 6) + 56);
          if (!_bittest64(&v29, v26)) {
            break;
          }
          if (*(void *)(v28 + 8 * v26) == v17) {
            goto LABEL_29;
          }
        }
LABEL_30:
        char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v40);
        double v31 = v40;
        if (!isUniquelyReferenced_nonNull_native)
        {
          specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v40[2] + 1, 1);
          double v31 = v40;
        }
        unint64_t v32 = v31[2];
        int64_t v33 = v32 + 1;
        uint64_t v8 = a2;
        int64_t v9 = v12;
        if (v31[3] >> 1 <= v32)
        {
          specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v31[3] >= 2uLL, v33, 1);
          int64_t v33 = v32 + 1;
          int64_t v9 = v12;
          uint64_t v8 = a2;
          double v31 = v40;
        }
        _OWORD v31[2] = v33;
        long long v40 = v31;
        v31[v32 + 4] = v17;
        uint64_t v5 = v35;
      }
    }
  }
LABEL_41:
  swift_bridgeObjectRelease(v8);
  swift_release();
  swift_bridgeObjectRelease(a4);
  return v40;
}

void *specialized implicit closure #1 in RecommenderModel.recommend<A>(users:limit:allowedItems:excludedInteractions:omittingObservedInteractions:)()
{
  return &_swiftEmptySetSingleton;
}

void *specialized RecommenderModel.scoreAll<A>(itemIndices:userScores:)(uint64_t a1, void *a2)
{
  char v4 = specialized RecommenderModel.score<A>(itemIndices:interactions:)(a1, a2);
  if (v4) {
    return v4;
  }
  uint64_t v6 = *(void *)(v2 + 120);
  swift_bridgeObjectRetain(v6);
  uint64_t v5 = specialized RecommenderModel.score<A>(itemIndices:interactions:)(a1, v6);
  swift_bridgeObjectRelease(v6);
  if (!v5)
  {
    double v30 = *(double *)(v2 + 136);
    double v28 = *(double *)(v2 + 144);
    int64_t v7 = *(void *)(a1 + 16);
    uint64_t v8 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v7, 0, (uint64_t)_swiftEmptyArrayStorage);
    int64_t v9 = v7;
    uint64_t v5 = v8;
    if (v9)
    {
      v10.f64[0] = v28 - v30;
      double v11 = _mm_cmple_sd((__m128d)0x3FF0000000000000uLL, v10).f64[0];
      *(void *)&double v29 = ~*(void *)&v11 & 0x3FF0000000000000 | COERCE_UNSIGNED_INT64(1.0 / (v28 - v30)) & *(void *)&v11;
      uint64_t v27 = *(void *)(v2 + 128);
      uint64_t v12 = *(void *)(v27 + 16);
      int64_t v31 = v9;
      swift_bridgeObjectRetain(a1);
      uint64_t v13 = v12;
      int64_t v14 = v31;
      uint64_t v15 = 0;
      int v16 = 1;
      do
      {
        uint64_t v17 = *(void *)(a1 + 8 * v15 + 32);
        if (v17 >= v13)
        {
          unint64_t v19 = v5[2];
          unint64_t v20 = v5[3];
          unint64_t v21 = v20 >> 1;
          int64_t v22 = v19 + 1;
          double v18 = 0.0;
        }
        else
        {
          if (v17 < 0) {
            BUG();
          }
          double v18 = (*(double *)(v27 + 8 * v17 + 32) - v30) * v29;
          unint64_t v19 = v5[2];
          unint64_t v20 = v5[3];
          unint64_t v21 = v20 >> 1;
          int64_t v22 = v19 + 1;
        }
        if (v21 <= v19)
        {
          uint64_t v23 = (uint64_t)v5;
          int v24 = v16;
          uint64_t v25 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(v20 >= 2, v22, v16, v23);
          int v16 = v24;
          int64_t v14 = v31;
          uint64_t v5 = v25;
        }
        ++v15;
        _OWORD v5[2] = v22;
        *(double *)&v5[v19 + 4] = v18;
      }
      while (v14 != v15);
      swift_bridgeObjectRelease(a1);
    }
  }
  return v5;
}

void *specialized RecommenderModel.scoreAll<A>(itemIndices:userScores:)(uint64_t a1, uint64_t a2)
{
  char v4 = specialized RecommenderModel.score<A>(itemIndices:interactions:)(a1, a2);
  if (v4) {
    return v4;
  }
  uint64_t v6 = *(void *)(v2 + 120);
  swift_bridgeObjectRetain(v6);
  uint64_t v5 = specialized RecommenderModel.score<A>(itemIndices:interactions:)(a1, v6);
  swift_bridgeObjectRelease(v6);
  if (!v5)
  {
    double v30 = *(double *)(v2 + 136);
    double v28 = *(double *)(v2 + 144);
    int64_t v7 = *(void *)(a1 + 16);
    uint64_t v8 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v7, 0, (uint64_t)_swiftEmptyArrayStorage);
    int64_t v9 = v7;
    uint64_t v5 = v8;
    if (v9)
    {
      v10.f64[0] = v28 - v30;
      double v11 = _mm_cmple_sd((__m128d)0x3FF0000000000000uLL, v10).f64[0];
      *(void *)&double v29 = ~*(void *)&v11 & 0x3FF0000000000000 | COERCE_UNSIGNED_INT64(1.0 / (v28 - v30)) & *(void *)&v11;
      uint64_t v27 = *(void *)(v2 + 128);
      uint64_t v12 = *(void *)(v27 + 16);
      int64_t v31 = v9;
      swift_bridgeObjectRetain(a1);
      uint64_t v13 = v12;
      int64_t v14 = v31;
      uint64_t v15 = 0;
      int v16 = 1;
      do
      {
        uint64_t v17 = *(void *)(a1 + 8 * v15 + 32);
        if (v17 >= v13)
        {
          unint64_t v19 = v5[2];
          unint64_t v20 = v5[3];
          unint64_t v21 = v20 >> 1;
          int64_t v22 = v19 + 1;
          double v18 = 0.0;
        }
        else
        {
          if (v17 < 0) {
            BUG();
          }
          double v18 = (*(double *)(v27 + 8 * v17 + 32) - v30) * v29;
          unint64_t v19 = v5[2];
          unint64_t v20 = v5[3];
          unint64_t v21 = v20 >> 1;
          int64_t v22 = v19 + 1;
        }
        if (v21 <= v19)
        {
          uint64_t v23 = (uint64_t)v5;
          int v24 = v16;
          uint64_t v25 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(v20 >= 2, v22, v16, v23);
          int v16 = v24;
          int64_t v14 = v31;
          uint64_t v5 = v25;
        }
        ++v15;
        _OWORD v5[2] = v22;
        *(double *)&v5[v19 + 4] = v18;
      }
      while (v14 != v15);
      swift_bridgeObjectRelease(a1);
    }
  }
  return v5;
}

uint64_t specialized closure #2 in RecommenderModel.recommend(for:limit:allowedItems:disallowedItems:omittingObservedInteractions:)(uint64_t a1, uint64_t a2, uint64_t a3, char a4, uint64_t a5, uint64_t a6)
{
  if (a1 < 0) {
    BUG();
  }
  if (*(void *)(a6 + 16) <= (unint64_t)a1) {
    BUG();
  }
  uint64_t v8 = v6;
  uint64_t v9 = *(void *)(a6 + 16 * a1 + 32);
  if (v9 < 0) {
    BUG();
  }
  uint64_t v11 = *(void *)(a5 + 16);
  if ((unint64_t)v9 >= *(void *)(v11 + 16)) {
    BUG();
  }
  uint64_t v15 = *(void *)(a6 + 32 + 16 * a1 + 8);
  uint64_t v18 = *(void *)(v11 + 24 * v9 + 32);
  uint64_t v19 = *(void *)(v11 + 24 * v9 + 40);
  char v12 = *(unsigned char *)(v11 + 24 * v9 + 48);
  uint64_t v16 = a3;
  uint64_t v17 = a2;
  outlined copy of MLRecommender.Identifier(a2, a3, a4);
  outlined copy of MLRecommender.Identifier(v18, v19, v12);
  *(void *)uint64_t v8 = v17;
  *(void *)(v8 + 8) = v16;
  *(unsigned char *)(v8 + 16) = a4 & 1;
  *(void *)(v8 + 24) = v18;
  uint64_t result = v19;
  *(void *)(v8 + 32) = v19;
  *(unsigned char *)(v8 + 40) = v12;
  *(void *)(v8 + 48) = v15;
  *(void *)(v8 + 56) = a1 + 1;
  return result;
}

void *specialized RecommenderModel.score<A>(itemIndices:interactions:)(uint64_t a1, uint64_t a2)
{
  uint64_t v46 = v2[13];
  if (!v46) {
    BUG();
  }
  uint64_t v42 = v2[14];
  uint64_t v47 = v2[12];
  char v4 = specialized Array.init(repeating:count:)(v47, 0.0);
  swift_bridgeObjectRetain(a2);
  uint64_t v48 = v4;
  if (!swift_isUniquelyReferenced_nonNull_native(v4)) {
    uint64_t v48 = specialized _ArrayBuffer._consumeAndCreateNew()((uint64_t)v4);
  }
  uint64_t v5 = *(void *)(a2 + 16);
  uint64_t v6 = v47;
  uint64_t v7 = v42;
  if (!v5)
  {
    swift_bridgeObjectRelease((_BYTE)v48);
    char v32 = a2;
LABEL_37:
    swift_bridgeObjectRelease(v32);
    return 0;
  }
  uint64_t v8 = a2 + 32;
  int64_t v39 = v48 + 4;
  uint64_t v9 = 0;
  uint64_t v10 = 0;
  long long v40 = v2;
  uint64_t v38 = a1;
  uint64_t v41 = *(void *)(a2 + 16);
  do
  {
    uint64_t v11 = *(void *)(v8 + 16 * v10);
    if (v11 < v6)
    {
      if (v11 < 0) {
        BUG();
      }
      unint64_t v12 = *(void *)(v7 + 16);
      if (v11 >= v12) {
        BUG();
      }
      if (v11 + 1 >= v12) {
        BUG();
      }
      uint64_t v13 = *(void *)(v7 + 8 * v11 + 32);
      uint64_t v14 = *(void *)(v7 + 8 * v11 + 40);
      if (v14 < v13) {
        BUG();
      }
      if (v13 < 0) {
        BUG();
      }
      unint64_t v15 = *(void *)(v46 + 16);
      if (v15 < v13 || (uint64_t)v15 < v14) {
        BUG();
      }
      if (v14 != v13)
      {
        uint64_t v16 = v14 - v13;
        if (v14 <= (unint64_t)v13) {
          BUG();
        }
        uint64_t v36 = v10;
        double v43 = *(double *)(v8 + 16 * v10 + 8);
        uint64_t v17 = v2[10];
        uint64_t v45 = v2[11];
        uint64_t v35 = *(void (**)(void *, uint64_t, uint64_t, double, double))(v45 + 16);
        uint64_t v37 = v9 + v14 - v13;
        swift_bridgeObjectRetain(v46);
        uint64_t v18 = (double *)(v46 + 40 + 16 * v13);
        do
        {
          uint64_t v19 = *((void *)v18 - 1);
          if (v19 < 0) {
            BUG();
          }
          if ((unint64_t)v19 >= v48[2]) {
            BUG();
          }
          v35(&v39[v19], v17, v45, v43, *v18);
          if (__OFADD__(1, v9++)) {
            BUG();
          }
          v18 += 2;
          --v16;
        }
        while (v16);
        swift_bridgeObjectRelease(v46);
        uint64_t v9 = v37;
        a1 = v38;
        uint64_t v2 = v40;
        uint64_t v6 = v47;
        uint64_t v5 = v41;
        uint64_t v7 = v42;
        uint64_t v8 = a2 + 32;
        uint64_t v10 = v36;
      }
    }
    ++v10;
  }
  while (v10 != v5);
  swift_bridgeObjectRelease(a2);
  if (v9 <= 0)
  {
    char v32 = (char)v48;
    goto LABEL_37;
  }
  int64_t v21 = *(void *)(a1 + 16);
  int64_t v22 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v21, 0, (uint64_t)_swiftEmptyArrayStorage);
  int64_t v44 = v21;
  if (v21)
  {
    swift_bridgeObjectRetain(a1);
    uint64_t v23 = 0;
    uint64_t v24 = v47;
    do
    {
      uint64_t v25 = *(void *)(a1 + 8 * v23 + 32);
      if (v25 >= v24)
      {
        unint64_t v27 = v22[2];
        unint64_t v28 = v22[3];
        unint64_t v29 = v28 >> 1;
        int64_t v30 = v27 + 1;
        double v26 = 0.0;
      }
      else
      {
        if (v25 < 0) {
          BUG();
        }
        if ((unint64_t)v25 >= v48[2]) {
          BUG();
        }
        double v26 = *(double *)&v39[v25];
        (*(void (**)(uint64_t, double))(v40[11] + 24))(v41, v26);
        uint64_t v24 = v47;
        unint64_t v27 = v22[2];
        unint64_t v28 = v22[3];
        unint64_t v29 = v28 >> 1;
        int64_t v30 = v27 + 1;
      }
      if (v29 <= v27)
      {
        int64_t v31 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(v28 >= 2, v30, 1, (uint64_t)v22);
        uint64_t v24 = v47;
        int64_t v22 = v31;
      }
      ++v23;
      v22[2] = v30;
      *(double *)&v22[v27 + 4] = v26;
    }
    while (v44 != v23);
    swift_bridgeObjectRelease((_BYTE)v48);
    char v33 = a1;
  }
  else
  {
    char v33 = (char)v48;
  }
  swift_bridgeObjectRelease(v33);
  return v22;
}

void *specialized RecommenderModel.score<A>(itemIndices:interactions:)(uint64_t a1, void *a2)
{
  uint64_t v53 = v2[13];
  if (!v53) {
    BUG();
  }
  uint64_t v3 = v2[12];
  uint64_t v54 = v2[14];
  unint64_t v63 = specialized Array.init(repeating:count:)(v3, 0.0);
  uint64_t v4 = a2[6];
  if (v4 < 0) {
    BUG();
  }
  uint64_t v5 = a2[3];
  unint64_t v6 = *(void *)(v5 + 16);
  if (v4 >= v6) {
    BUG();
  }
  uint64_t v55 = a2[4];
  uint64_t v52 = a2[5];
  unint64_t v60 = *(void *)(v5 + 8 * v4 + 32);
  outlined retain of SparseMatrix<Double>.MajorCollection(a2);
  if (!swift_isUniquelyReferenced_nonNull_native(v63)) {
    unint64_t v63 = specialized _ArrayBuffer._consumeAndCreateNew()((uint64_t)v63);
  }
  unint64_t v7 = v60;
  if (v4 + 1 >= v6) {
    BUG();
  }
  uint64_t v8 = *(void *)(v5 + 8 * v4 + 40);
  if (v60 == v8)
  {
    outlined release of SparseMatrix<Double>.MajorCollection(a2);
LABEL_43:
    swift_bridgeObjectRelease((_BYTE)v63);
    return 0;
  }
  uint64_t v48 = v5;
  uint64_t v47 = v4;
  uint64_t v9 = *(void *)(v52 + 16);
  uint64_t v10 = v55;
  unint64_t v11 = *(void *)(v55 + 16);
  double v49 = v63 + 4;
  uint64_t v12 = v53;
  uint64_t v13 = 0;
  uint64_t v51 = v2;
  uint64_t v14 = v54;
  uint64_t v50 = v3;
  uint64_t v44 = v8;
  uint64_t v45 = v9;
  unint64_t v46 = v11;
  do
  {
    if (v7 >= v11) {
      BUG();
    }
    if ((uint64_t)v7 >= v9) {
      BUG();
    }
    uint64_t v15 = *(int *)(v10 + 4 * v7 + 32);
    if (v3 > v15)
    {
      if ((int)v15 < 0) {
        BUG();
      }
      uint64_t v16 = *(void *)(v14 + 16);
      if (v16 <= v15) {
        BUG();
      }
      if (v15 + 1 >= v16) {
        BUG();
      }
      uint64_t v17 = *(void *)(v14 + 8 * v15 + 32);
      uint64_t v18 = *(void *)(v14 + 8 * v15 + 40);
      if (v18 < v17) {
        BUG();
      }
      if (v17 < 0) {
        BUG();
      }
      unint64_t v19 = *(void *)(v12 + 16);
      if (v19 < v17 || (uint64_t)v19 < v18) {
        BUG();
      }
      if (v18 == v17)
      {
        uint64_t v3 = v50;
      }
      else
      {
        uint64_t v20 = v18 - v17;
        if (v18 <= (unint64_t)v17) {
          BUG();
        }
        unint64_t v61 = v7;
        double v57 = *(double *)(v52 + 8 * v7 + 32);
        char v21 = v12;
        uint64_t v22 = v2[10];
        uint64_t v59 = v2[11];
        uint64_t v42 = *(void (**)(void *, uint64_t, uint64_t, double, double))(v59 + 16);
        uint64_t v43 = v13 + v18 - v17;
        swift_bridgeObjectRetain(v21);
        uint64_t v23 = (double *)(v53 + 40 + 16 * v17);
        do
        {
          uint64_t v24 = *((void *)v23 - 1);
          if (v24 < 0) {
            BUG();
          }
          if ((unint64_t)v24 >= v63[2]) {
            BUG();
          }
          v42(&v49[v24], v22, v59, v57, *v23);
          BOOL v25 = __OFADD__(1, v13++);
          if (v25) {
            BUG();
          }
          v23 += 2;
          --v20;
        }
        while (v20);
        uint64_t v12 = v53;
        swift_bridgeObjectRelease(v53);
        uint64_t v13 = v43;
        uint64_t v2 = v51;
        uint64_t v3 = v50;
        uint64_t v14 = v54;
        uint64_t v10 = v55;
        unint64_t v7 = v61;
        uint64_t v8 = v44;
        uint64_t v9 = v45;
        unint64_t v11 = v46;
      }
    }
    ++v7;
  }
  while (v7 != v8);
  outlined release of SparseMatrix<Double>.MajorCollection(a2);
  if (v13 <= 0) {
    goto LABEL_43;
  }
  int64_t v26 = *(void *)(a1 + 16);
  unint64_t v27 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v26, 0, (uint64_t)_swiftEmptyArrayStorage);
  int64_t v58 = v26;
  if (v26)
  {
    swift_bridgeObjectRetain(a1);
    uint64_t v28 = 0;
    uint64_t v29 = a1;
    do
    {
      uint64_t v30 = *(void *)(v29 + 8 * v28 + 32);
      if (v30 >= v3)
      {
        unint64_t v34 = v27[2];
        unint64_t v35 = v27[3];
        unint64_t v36 = v35 >> 1;
        int64_t v37 = v34 + 1;
        double v33 = 0.0;
      }
      else
      {
        if (v30 < 0) {
          BUG();
        }
        if ((unint64_t)v30 >= v63[2]) {
          BUG();
        }
        uint64_t v31 = *(void *)(v48 + 8 * v47 + 40);
        BOOL v25 = __OFSUB__(v31, *(void *)(v48 + 8 * v47 + 32));
        uint64_t v32 = v31 - *(void *)(v48 + 8 * v47 + 32);
        if (v25) {
          BUG();
        }
        double v33 = *(double *)&v49[v30];
        (*(void (**)(uint64_t, double))(v51[11] + 24))(v32, v33);
        uint64_t v29 = a1;
        unint64_t v34 = v27[2];
        unint64_t v35 = v27[3];
        unint64_t v36 = v35 >> 1;
        int64_t v37 = v34 + 1;
      }
      if (v36 <= v34)
      {
        uint64_t v38 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(v35 >= 2, v37, 1, (uint64_t)v27);
        uint64_t v29 = a1;
        unint64_t v27 = v38;
      }
      ++v28;
      v27[2] = v37;
      *(double *)&v27[v34 + 4] = v33;
    }
    while (v58 != v28);
    char v39 = v29;
    swift_bridgeObjectRelease((_BYTE)v63);
    char v40 = v39;
  }
  else
  {
    char v40 = (char)v63;
  }
  swift_bridgeObjectRelease(v40);
  return v27;
}

void specialized SparseMatrix.subscript.setter(uint64_t a1, uint64_t a2, double a3)
{
  double v22 = a3;
  uint64_t v4 = a1;
  uint64_t v5 = a2;
  if (*(unsigned char *)(v3 + 16))
  {
    uint64_t v5 = a1;
    uint64_t v4 = a2;
  }
  if (v4 < 0) {
    BUG();
  }
  uint64_t v6 = *(void *)(v3 + 24);
  unint64_t v7 = *(void *)(v6 + 16);
  if (v4 >= v7) {
    BUG();
  }
  if (v4 + 1 >= v7) {
    BUG();
  }
  int64_t v8 = *(void *)(v6 + 8 * v4 + 32);
  unint64_t v9 = *(void *)(v6 + 8 * v4 + 40);
  if (v8 == v9)
  {
    if (a3 == 0.0) {
      return;
    }
    goto LABEL_23;
  }
  if (v8 > (uint64_t)v9) {
    BUG();
  }
  if (v8 < 0) {
    BUG();
  }
  uint64_t v10 = *(void *)(v3 + 32);
  int64_t v11 = *(void *)(v10 + 16);
  if (v11 < (unint64_t)v8 || v11 < (uint64_t)v9) {
    BUG();
  }
  if (v5 < (uint64_t)0xFFFFFFFF80000000) {
    BUG();
  }
  if (v5 > 0x7FFFFFFF) {
    BUG();
  }
  double v23 = a3;
  uint64_t v21 = v10 + 32;
  uint64_t v12 = specialized Collection<>.firstIndex(of:)(v5, v10, v10 + 32, v8, 2 * v9 + 1);
  if (v13)
  {
    if (v23 == 0.0) {
      return;
    }
    if (v8 >= v9) {
      BUG();
    }
    if (*(_DWORD *)(v21 + 4 * v8) > (int)v5)
    {
      int64_t v15 = v8;
LABEL_22:
      int64_t v8 = v15;
LABEL_23:
      uint64_t v16 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SparseMatrix<Double>);
      uint64_t v17 = v8;
LABEL_24:
      SparseMatrix.insert(index:major:minor:value:)(v17, v4, v5, (uint64_t)&v22, v16);
      return;
    }
    int64_t v15 = v8 + 1;
    if (v8 + 1 != v9)
    {
      if (v8 + 1 >= v9) {
        BUG();
      }
      if (*(_DWORD *)(v21 + 4 * v8 + 4) > (int)v5) {
        goto LABEL_22;
      }
      int64_t v15 = v8 + 2;
      if (v8 + 2 != v9)
      {
        if (v8 + 2 >= v9) {
          BUG();
        }
        if (*(_DWORD *)(v21 + 4 * v8 + 8) > (int)v5) {
          goto LABEL_22;
        }
        int64_t v19 = v8 + 3;
        while (v19 != v9)
        {
          int64_t v15 = v8 + 3;
          if (v8 + 3 >= (uint64_t)v9) {
            BUG();
          }
          if (*(_DWORD *)(v10 + 4 * v8 + 44) > (int)v5) {
            goto LABEL_22;
          }
          BOOL v20 = __OFADD__(1, v15);
          int64_t v19 = v8 + 4;
          if (v20) {
            BUG();
          }
          ++v8;
        }
      }
    }
    uint64_t v16 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SparseMatrix<Double>);
    uint64_t v17 = v9;
    goto LABEL_24;
  }
  Swift::Int v14 = v12;
  if (v23 == 0.0)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SparseMatrix<Double>);
    SparseMatrix.remove(index:major:)(v14, v4);
  }
  else
  {
    uint64_t v18 = *(char **)(v3 + 40);
    if (!swift_isUniquelyReferenced_nonNull_native(v18)) {
      uint64_t v18 = specialized _ContiguousArrayBuffer._consumeAndCreateNew()((uint64_t)v18);
    }
    if (v14 < 0) {
      BUG();
    }
    if ((unint64_t)v14 >= *((void *)v18 + 2)) {
      BUG();
    }
    *(double *)&v18[8 * v14 + 32] = v23;
    *(void *)(v3 + 40) = v18;
  }
}

uint64_t outlined destroy of MLRecommender.ModelParameters(uint64_t a1)
{
  uint64_t v1 = type metadata accessor for MLRecommender.ModelParameters(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v1 - 8) + 8))(a1, v1);
  return a1;
}

uint64_t specialized Array._makeUniqueAndReserveCapacityIfNotUnique()()
{
  return specialized Array._makeUniqueAndReserveCapacityIfNotUnique()((uint64_t (*)(void, uint64_t, uint64_t, uint64_t))specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:));
}

{
  return specialized Array._makeUniqueAndReserveCapacityIfNotUnique()((uint64_t (*)(void, uint64_t, uint64_t, uint64_t))specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:));
}

{
  return specialized Array._makeUniqueAndReserveCapacityIfNotUnique()((uint64_t (*)(void, uint64_t, uint64_t, uint64_t))specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:));
}

{
  return specialized Array._makeUniqueAndReserveCapacityIfNotUnique()((uint64_t (*)(void, uint64_t, uint64_t, uint64_t))specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:));
}

{
  return specialized Array._makeUniqueAndReserveCapacityIfNotUnique()((uint64_t (*)(void, uint64_t, uint64_t, uint64_t))specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:));
}

{
  return specialized Array._makeUniqueAndReserveCapacityIfNotUnique()((uint64_t (*)(void, uint64_t, uint64_t, uint64_t))specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:));
}

{
  return specialized Array._makeUniqueAndReserveCapacityIfNotUnique()((uint64_t (*)(void, uint64_t, uint64_t, uint64_t))specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:));
}

{
  return specialized Array._makeUniqueAndReserveCapacityIfNotUnique()((uint64_t (*)(void, uint64_t, uint64_t, uint64_t))specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:));
}

{
  return specialized Array._makeUniqueAndReserveCapacityIfNotUnique()((uint64_t (*)(void, uint64_t, uint64_t, uint64_t))specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:));
}

uint64_t specialized Array._makeUniqueAndReserveCapacityIfNotUnique()(uint64_t (*a1)(void, uint64_t, uint64_t, uint64_t))
{
  uint64_t v2 = *v1;
  uint64_t result = swift_isUniquelyReferenced_nonNull_native(*v1);
  *uint64_t v1 = v2;
  if (!(_BYTE)result)
  {
    uint64_t result = a1(0, *(void *)(v2 + 16) + 1, 1, v2);
    *uint64_t v1 = result;
  }
  return result;
}

uint64_t specialized Array._reserveCapacityAssumingUniqueBuffer(oldCount:)(uint64_t a1)
{
  return specialized Array._reserveCapacityAssumingUniqueBuffer(oldCount:)(a1, (uint64_t (*)(BOOL, uint64_t, uint64_t))specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:));
}

{
  return specialized Array._reserveCapacityAssumingUniqueBuffer(oldCount:)(a1, (uint64_t (*)(BOOL, uint64_t, uint64_t))specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:));
}

{
  return specialized Array._reserveCapacityAssumingUniqueBuffer(oldCount:)(a1, (uint64_t (*)(BOOL, uint64_t, uint64_t))specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:));
}

{
  return specialized Array._reserveCapacityAssumingUniqueBuffer(oldCount:)(a1, (uint64_t (*)(BOOL, uint64_t, uint64_t))specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:));
}

{
  return specialized Array._reserveCapacityAssumingUniqueBuffer(oldCount:)(a1, (uint64_t (*)(BOOL, uint64_t, uint64_t))specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:));
}

{
  return specialized Array._reserveCapacityAssumingUniqueBuffer(oldCount:)(a1, (uint64_t (*)(BOOL, uint64_t, uint64_t))specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:));
}

{
  return specialized Array._reserveCapacityAssumingUniqueBuffer(oldCount:)(a1, (uint64_t (*)(BOOL, uint64_t, uint64_t))specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:));
}

{
  return specialized Array._reserveCapacityAssumingUniqueBuffer(oldCount:)(a1, (uint64_t (*)(BOOL, uint64_t, uint64_t))specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:));
}

{
  return specialized Array._reserveCapacityAssumingUniqueBuffer(oldCount:)(a1, (uint64_t (*)(BOOL, uint64_t, uint64_t))specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:));
}

uint64_t specialized Array._reserveCapacityAssumingUniqueBuffer(oldCount:)(uint64_t a1, uint64_t (*a2)(BOOL, uint64_t, uint64_t))
{
  uint64_t result = (uint64_t)a2;
  if (*(void *)(*(void *)v2 + 24) >> 1 < a1 + 1)
  {
    uint64_t result = a2(*(void *)(*(void *)v2 + 24) >= 2uLL, a1 + 1, 1);
    *(void *)uint64_t v2 = result;
  }
  return result;
}

uint64_t specialized Dictionary._Variant.setValue(_:forKey:)(long long *a1, uint64_t a2, uint64_t a3)
{
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v3);
  uint64_t v8 = *v3;
  void *v3 = 0x8000000000000000;
  specialized _NativeDictionary.setValue(_:forKey:isUnique:)(a1, a2, a3, isUniquelyReferenced_nonNull_native);
  uint64_t v6 = *v3;
  void *v3 = v8;
  return swift_bridgeObjectRelease(v6);
}

uint64_t specialized Dictionary._Variant.setValue(_:forKey:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return specialized Dictionary._Variant.setValue(_:forKey:)(a1, a2, a3, (void (*)(uint64_t, uint64_t, uint64_t, void))specialized _NativeDictionary.setValue(_:forKey:isUnique:));
}

{
  return specialized Dictionary._Variant.setValue(_:forKey:)(a1, a2, a3, (void (*)(uint64_t, uint64_t, uint64_t, void))specialized _NativeDictionary.setValue(_:forKey:isUnique:));
}

{
  void *v3;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v6;
  uint64_t v8;

  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v3);
  uint64_t v8 = *v3;
  void *v3 = 0x8000000000000000;
  specialized _NativeDictionary.setValue(_:forKey:isUnique:)(a1, a2, a3, isUniquelyReferenced_nonNull_native);
  uint64_t v6 = *v3;
  void *v3 = v8;
  return swift_bridgeObjectRelease(v6);
}

{
  return specialized Dictionary._Variant.setValue(_:forKey:)(a1, a2, a3, (void (*)(uint64_t, uint64_t, uint64_t, void))specialized _NativeDictionary.setValue(_:forKey:isUnique:));
}

{
  return specialized Dictionary._Variant.setValue(_:forKey:)(a1, a2, a3, (void (*)(uint64_t, uint64_t, uint64_t, void))specialized _NativeDictionary.setValue(_:forKey:isUnique:));
}

{
  return specialized Dictionary._Variant.setValue(_:forKey:)(a1, a2, a3, (void (*)(uint64_t, uint64_t, uint64_t, void))specialized _NativeDictionary.setValue(_:forKey:isUnique:));
}

uint64_t specialized Dictionary._Variant.setValue(_:forKey:)(uint64_t a1, char a2, uint64_t a3, uint64_t a4)
{
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v4);
  uint64_t v9 = *v4;
  *uint64_t v4 = 0x8000000000000000;
  specialized _NativeDictionary.setValue(_:forKey:isUnique:)(a1, a2 & 1, a3, a4, isUniquelyReferenced_nonNull_native);
  uint64_t v7 = *v4;
  *uint64_t v4 = v9;
  return swift_bridgeObjectRelease(v7);
}

uint64_t specialized Dictionary._Variant.setValue(_:forKey:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v4);
  uint64_t v9 = *v4;
  *uint64_t v4 = 0x8000000000000000;
  specialized _NativeDictionary.setValue(_:forKey:isUnique:)(a1, a2, a3, a4, isUniquelyReferenced_nonNull_native);
  uint64_t v7 = *v4;
  *uint64_t v4 = v9;
  return swift_bridgeObjectRelease(v7);
}

uint64_t sub_BAEF8()
{
  uint64_t v1 = type metadata accessor for Model(0);
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = ~*(unsigned __int8 *)(v2 + 80) & (v3 + 16);
  uint64_t v5 = v4 + v0;
  uint64_t v6 = *(void *)(v2 + 64) + v4;
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v5, v1);
  return swift_deallocObject(v0, v6, v3 | 7);
}

uint64_t partial apply for closure #1 in MLRecommender.init(trainingData:userColumn:itemColumn:ratingColumn:parameters:)(uint64_t a1)
{
  uint64_t v3 = type metadata accessor for Model(0);
  uint64_t v4 = v1
     + (~*(unsigned __int8 *)(*(void *)(v3 - 8) + 80) & (*(unsigned __int8 *)(*(void *)(v3 - 8)
                                                                                              + 80)
                                                           + 16));
  uint64_t v5 = (void *)swift_task_alloc(dword_3A5F34);
  *(void *)(v2 + 16) = v5;
  void *v5 = v2;
  v5[1] = partial apply for closure #1 in MLActivityClassifier.init(trainingData:featureColumns:labelColumn:recordingFileColumn:parameters:);
  return closure #1 in MLRecommender.init(trainingData:userColumn:itemColumn:ratingColumn:parameters:)(a1, v4);
}

uint64_t *outlined release of RecommenderModel<MLRecommender.Identifier, MLRecommender.Identifier>(uint64_t *a1)
{
  uint64_t v7 = *a1;
  uint64_t v12 = a1[1];
  uint64_t v1 = a1[2];
  uint64_t v2 = a1[3];
  uint64_t v3 = a1[7];
  uint64_t v4 = a1[8];
  uint64_t v9 = a1[12];
  uint64_t v10 = a1[13];
  uint64_t v11 = a1[14];
  uint64_t v6 = a1[15];
  uint64_t v8 = a1[16];
  swift_release();
  swift_bridgeObjectRelease(v4);
  swift_bridgeObjectRelease(v3);
  swift_bridgeObjectRelease(v2);
  swift_bridgeObjectRelease(v1);
  swift_bridgeObjectRelease(v12);
  swift_bridgeObjectRelease(v7);
  outlined consume of InteractionLookupTable?(v9, v10, v11);
  swift_bridgeObjectRelease(v8);
  swift_bridgeObjectRelease(v6);
  return a1;
}

uint64_t outlined consume of InteractionLookupTable?(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a2)
  {
    swift_bridgeObjectRelease(a2);
    return swift_bridgeObjectRelease(a3);
  }
  return result;
}

uint64_t partial apply for closure #1 in MLRecommender.recommendations<A>(fromUsers:maxCount:restrictingToItems:excluding:excludingObserved:)(uint64_t *a1, double a2)
{
  return closure #1 in MLRecommender.recommendations<A>(fromUsers:maxCount:restrictingToItems:excluding:excludingObserved:)(a1, a2, *(void *)(v2 + 40), *(unsigned __int8 *)(v2 + 48), *(void *)(v2 + 16), *(void *)(v2 + 24));
}

uint64_t partial apply for closure #2 in MLRecommender.recommendations<A>(fromUsers:maxCount:restrictingToItems:excluding:excludingObserved:)(uint64_t *a1, double a2)
{
  return closure #2 in MLRecommender.recommendations<A>(fromUsers:maxCount:restrictingToItems:excluding:excludingObserved:)(a1, a2, *(void *)(v2 + 40), *(unsigned __int8 *)(v2 + 48), *(void *)(v2 + 16), *(void *)(v2 + 24), *(void *)(v2 + 32));
}

uint64_t specialized Dictionary._Variant.setValue(_:forKey:)(uint64_t a1, uint64_t a2, uint64_t a3, void (*a4)(uint64_t, uint64_t, uint64_t, void))
{
  unsigned __int8 isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v4);
  uint64_t v9 = *v4;
  *uint64_t v4 = 0x8000000000000000;
  a4(a1, a2, a3, isUniquelyReferenced_nonNull_native);
  uint64_t v7 = *v4;
  *uint64_t v4 = v9;
  return swift_bridgeObjectRelease(v7);
}

uint64_t specialized Dictionary._Variant.setValue(_:forKey:)(long long *a1, uint64_t a2)
{
  unsigned __int8 isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v2);
  uint64_t v6 = *v2;
  void *v2 = 0x8000000000000000;
  specialized _NativeDictionary.setValue(_:forKey:isUnique:)(a1, a2, isUniquelyReferenced_nonNull_native);
  uint64_t v4 = *v2;
  void *v2 = v6;
  return swift_bridgeObjectRelease(v4);
}

{
  void *v2;
  unsigned __int8 isUniquelyReferenced_nonNull_native;
  uint64_t v4;
  uint64_t v6;

  unsigned __int8 isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v2);
  uint64_t v6 = *v2;
  void *v2 = 0x8000000000000000;
  specialized _NativeDictionary.setValue(_:forKey:isUnique:)(a1, a2, isUniquelyReferenced_nonNull_native);
  uint64_t v4 = *v2;
  void *v2 = v6;
  return swift_bridgeObjectRelease(v4);
}

uint64_t specialized Dictionary._Variant.setValue(_:forKey:)(uint64_t a1, uint64_t a2)
{
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v2);
  uint64_t v6 = *v2;
  void *v2 = 0x8000000000000000;
  specialized _NativeDictionary.setValue(_:forKey:isUnique:)(a1, a2, isUniquelyReferenced_nonNull_native);
  uint64_t v4 = *v2;
  void *v2 = v6;
  return swift_bridgeObjectRelease(v4);
}

uint64_t specialized Dictionary._Variant.setValue(_:forKey:)(long long *a1, char a2)
{
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v2);
  uint64_t v6 = *v2;
  void *v2 = 0x8000000000000000;
  specialized _NativeDictionary.setValue(_:forKey:isUnique:)(a1, a2, isUniquelyReferenced_nonNull_native);
  uint64_t v4 = *v2;
  void *v2 = v6;
  return swift_bridgeObjectRelease(v4);
}

uint64_t specialized UnsafeMutableBufferPointer.swapAt(_:_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a1 != a2)
  {
    if (!a3) {
      BUG();
    }
    uint64_t v3 = 16 * a1;
    uint64_t v4 = 16 * a2;
    uint64_t result = *(void *)(a3 + v3);
    uint64_t v6 = *(void *)(a3 + v3 + 8);
    *(_OWORD *)(a3 + v3) = *(_OWORD *)(a3 + v4);
    *(void *)(a3 + v4) = result;
    *(void *)(a3 + v4 + 8) = v6;
  }
  return result;
}

uint64_t specialized UnsafeMutableBufferPointer._stableSortImpl(by:)(uint64_t *a1, uint64_t a2)
{
  uint64_t v3 = a2;
  Swift::Int v4 = a1[1];
  swift_bridgeObjectRetain_n(a2, 3);
  Swift::Int v5 = _minimumMergeRunLength(_:)(v4);
  if (v5 >= v4)
  {
    if (v4 < 0) {
      BUG();
    }
    if (v4)
    {
      specialized MutableCollection<>._insertionSort(within:sortedEnd:by:)(0, v4, 1, a1, a2);
      char v71 = a2;
      goto LABEL_108;
    }
    char v71 = a2;
LABEL_107:
    swift_bridgeObjectRelease(v3);
    goto LABEL_108;
  }
  Swift::Int v86 = v5;
  char v90 = specialized static Array._allocateUninitialized(_:)(v4 / 2);
  uint64_t v89 = (char *)v6;
  uint64_t v99 = v4;
  if (v4 > 0)
  {
    uint64_t v100 = a2 + 32;
    uint64_t v98 = *a1;
    uint64_t v88 = *a1 - 8;
    uint64_t v8 = (char *)_swiftEmptyArrayStorage;
    uint64_t v9 = 0;
    Swift::Int v10 = v4;
    while (1)
    {
      uint64_t v11 = v9;
      Swift::Int v12 = v9 + 1;
      uint64_t v105 = (void *)v11;
      if (v12 >= v10)
      {
        uint64_t v13 = v98;
      }
      else
      {
        uint64_t v13 = v98;
        uint64_t v14 = *(void *)(v98 + 8 * v11 + 8);
        if (v14 < 0) {
          BUG();
        }
        unint64_t v15 = *(void *)(a2 + 16);
        if (v14 >= v15) {
          BUG();
        }
        unint64_t v16 = *(void *)(v98 + 8 * v11);
        if (v16 >= v15) {
          BUG();
        }
        uint64_t v17 = *(void *)(v100 + 16 * v14);
        uint64_t v18 = *(void *)(v100 + 16 * v16);
        Swift::Int v12 = v11 + 2;
        if (v11 + 2 < v10)
        {
          uint64_t v19 = *(void *)(v100 + 16 * v14);
          while (1)
          {
            unint64_t v20 = *(void *)(v98 + 8 * v12);
            if (v20 >= v15) {
              BUG();
            }
            if (v14 >= v15) {
              BUG();
            }
            Swift::Int v21 = v12;
            if (v17 < v18 == *(void *)(v100 + 16 * v20) >= v19) {
              break;
            }
            ++v12;
            uint64_t v19 = *(void *)(v100 + 16 * v20);
            uint64_t v14 = v20;
            if (v21 + 1 >= v10)
            {
              Swift::Int v12 = v10;
              break;
            }
          }
          uint64_t v11 = (uint64_t)v105;
        }
        if (v17 < v18)
        {
          if (v12 < v11) {
            BUG();
          }
          if (v12 > v11)
          {
            uint64_t v22 = v12 - 1;
            uint64_t v23 = v11;
            do
            {
              if (v23 != v22)
              {
                if (!v98)
                {
                  swift_bridgeObjectRelease_n(a2, 3, v18, v23, v11);
                  BUG();
                }
                uint64_t v24 = *(void *)(v98 + 8 * v23);
                *(void *)(v98 + 8 * v23) = *(void *)(v98 + 8 * v22);
                *(void *)(v98 + 8 * v22) = v24;
              }
              ++v23;
              uint64_t v18 = v22 - 1;
            }
            while (v23 < v22--);
          }
        }
      }
      if (v12 < v10)
      {
        if (__OFSUB__(v12, v11)) {
          BUG();
        }
        if (v12 - v11 < v86)
        {
          int64_t v26 = (char *)(v86 + v11);
          if (__OFADD__(v86, v11)) {
            BUG();
          }
          if ((uint64_t)v26 >= v10) {
            int64_t v26 = (char *)v10;
          }
          if ((uint64_t)v26 < v11) {
            BUG();
          }
          if ((char *)v12 != v26)
          {
            uint64_t v103 = v8;
            uint64_t v27 = v11;
            uint64_t v28 = v88;
            Swift::Int v29 = v12;
            do
            {
              uint64_t v30 = *(void *)(v13 + 8 * v29);
              uint64_t v31 = (void *)(v100 + 16 * v30);
              Swift::Int v32 = v12;
              do
              {
                if (v30 < 0) {
                  BUG();
                }
                unint64_t v33 = *(void *)(a2 + 16);
                if (v30 >= v33) {
                  BUG();
                }
                unint64_t v34 = *(void *)(v28 + 8 * v12);
                if (v34 >= v33) {
                  BUG();
                }
                if (*v31 >= *(void *)(v100 + 16 * v34)) {
                  break;
                }
                if (!v13)
                {
                  swift_bridgeObjectRelease_n(a2, 3, v28, v27, v31);
                  BUG();
                }
                *(void *)(v28 + 8 * v12 + 8) = v34;
                *(void *)(v28 + 8 * v12--) = v30;
              }
              while (v27 != v12);
              ++v29;
              v28 += 8;
              --v27;
              Swift::Int v12 = v32;
            }
            while ((char *)v29 != v26);
            Swift::Int v12 = (Swift::Int)v26;
            uint64_t v8 = v103;
            uint64_t v11 = (uint64_t)v105;
          }
        }
      }
      if (v12 < v11) {
        BUG();
      }
      uint64_t v97 = v12;
      if (!swift_isUniquelyReferenced_nonNull_native(v8)) {
        uint64_t v8 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *((void *)v8 + 2) + 1, 1, v8);
      }
      unint64_t v35 = v8;
      unint64_t v36 = *((void *)v8 + 2);
      uint64_t v104 = v35;
      unint64_t v37 = *((void *)v35 + 3);
      unint64_t v38 = v36 + 1;
      uint64_t v9 = v97;
      uint64_t v6 = (uint64_t)v105;
      if (v37 >> 1 <= v36)
      {
        uint64_t v70 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(v37 >= 2, v36 + 1, 1, v104);
        uint64_t v6 = (uint64_t)v105;
        uint64_t v9 = v97;
        uint64_t v104 = v70;
      }
      *((void *)v104 + 2) = v38;
      uint64_t v39 = 16 * v36;
      *(void *)&v104[v39 + 32] = v6;
      *(void *)&v104[v39 + 40] = v9;
      if (v36) {
        break;
      }
      unint64_t v38 = 1;
      uint64_t v8 = v104;
LABEL_84:
      Swift::Int v10 = v99;
      if (v9 >= v99) {
        goto LABEL_90;
      }
    }
    char v40 = v104 + 32;
    uint64_t v8 = v104;
    while (1)
    {
      uint64_t v41 = v38 - 1;
      if (v38 >= 4) {
        break;
      }
      if (v38 == 3)
      {
        uint64_t v42 = *((void *)v8 + 5);
        BOOL v43 = __OFSUB__(v42, *((void *)v8 + 4));
        uint64_t v44 = v42 - *((void *)v8 + 4);
        BOOL v45 = v43;
LABEL_58:
        if (v45) {
          BUG();
        }
        uint64_t v6 = v38 - 2;
        uint64_t v54 = 16 * (v38 - 2);
        uint64_t v55 = *(void *)&v40[v54 + 8];
        BOOL v43 = __OFSUB__(v55, *(void *)&v40[v54]);
        uint64_t v56 = v55 - *(void *)&v40[v54];
        BOOL v57 = v43;
        if (v43) {
          BUG();
        }
        uint64_t v58 = *(void *)&v40[16 * v41 + 8];
        BOOL v43 = __OFSUB__(v58, *(void *)&v40[16 * v41]);
        uint64_t v59 = v58 - *(void *)&v40[16 * v41];
        if (v43) {
          BUG();
        }
        uint64_t v7 = v59 + v56;
        if (__OFADD__(v59, v56)) {
          BUG();
        }
        if (v7 >= v44)
        {
          if (v44 >= v59) {
            uint64_t v6 = v38 - 1;
          }
          uint64_t v41 = v6;
          goto LABEL_75;
        }
        goto LABEL_67;
      }
      uint64_t v60 = *((void *)v8 + 5);
      BOOL v43 = __OFSUB__(v60, *((void *)v8 + 4));
      uint64_t v56 = v60 - *((void *)v8 + 4);
      BOOL v57 = v43;
LABEL_67:
      if (v57) {
        BUG();
      }
      uint64_t v6 = 16 * v41;
      uint64_t v61 = *(void *)&v40[16 * v41 + 8];
      BOOL v43 = __OFSUB__(v61, *(void *)&v40[16 * v41]);
      uint64_t v62 = v61 - *(void *)&v40[16 * v41];
      if (v43) {
        BUG();
      }
      if (v62 < v56) {
        goto LABEL_84;
      }
LABEL_75:
      if (v41 - 1 >= v38) {
        BUG();
      }
      if (!v98)
      {
        swift_bridgeObjectRelease_n(a2, 3, v6, 0, v7);
        BUG();
      }
      uint64_t v64 = 16 * (v41 - 1);
      unint64_t v94 = v41;
      long long v65 = &v40[16 * v41];
      uint64_t v66 = *(void *)&v40[v64];
      uint64_t v67 = *((void *)v65 + 1);
      __dst = v65;
      uint64_t v92 = (char *)(v98 + 8 * *(void *)v65);
      swift_bridgeObjectRetain(a2);
      specialized _merge<A>(low:mid:high:buffer:by:)((char *)(v98 + 8 * v66), v92, v98 + 8 * v67, v89, a2);
      if (v2) {
        goto LABEL_102;
      }
      uint64_t v8 = v104;
      if (v67 < v66) {
        BUG();
      }
      if (v94 > *((void *)v104 + 2)) {
        BUG();
      }
      uint64_t v68 = &v104[v64 + 32];
      *(void *)uint64_t v68 = v66;
      *((void *)v68 + 1) = v67;
      unint64_t v69 = *((void *)v104 + 2);
      if (v94 >= v69) {
        BUG();
      }
      unint64_t v38 = v69 - 1;
      memmove(__dst, __dst + 16, 16 * (v69 - 1 - v94));
      char v40 = v104 + 32;
      *((void *)v104 + 2) = v69 - 1;
      uint64_t v9 = v97;
      if (v69 <= 2) {
        goto LABEL_84;
      }
    }
    uint64_t v46 = 16 * v38;
    uint64_t v47 = *(void *)&v40[16 * v38 - 56];
    BOOL v43 = __OFSUB__(v47, *(void *)&v40[16 * v38 - 64]);
    uint64_t v48 = v47 - *(void *)&v40[16 * v38 - 64];
    if (v43) {
      BUG();
    }
    uint64_t v49 = *(void *)&v40[v46 - 40];
    BOOL v43 = __OFSUB__(v49, *(void *)&v40[v46 - 48]);
    uint64_t v44 = v49 - *(void *)&v40[v46 - 48];
    BOOL v45 = v43;
    if (v43) {
      BUG();
    }
    unint64_t v50 = v38 - 2;
    uint64_t v7 = 16 * (v38 - 2);
    uint64_t v51 = *(void *)&v40[v7 + 8];
    BOOL v43 = __OFSUB__(v51, *(void *)&v40[v7]);
    uint64_t v52 = v51 - *(void *)&v40[v7];
    if (v43) {
      BUG();
    }
    BOOL v43 = __OFADD__(v44, v52);
    uint64_t v53 = v44 + v52;
    if (v43) {
      BUG();
    }
    if (v53 >= v48)
    {
      uint64_t v63 = *(void *)&v40[16 * v41 + 8];
      BOOL v43 = __OFSUB__(v63, *(void *)&v40[16 * v41]);
      uint64_t v6 = v63 - *(void *)&v40[16 * v41];
      if (v43) {
        BUG();
      }
      if (v44 >= v6) {
        unint64_t v50 = v38 - 1;
      }
      uint64_t v41 = v50;
      goto LABEL_75;
    }
    goto LABEL_58;
  }
  uint64_t v8 = (char *)_swiftEmptyArrayStorage;
  unint64_t v38 = _swiftEmptyArrayStorage[2];
LABEL_90:
  if (v38 < 2)
  {
LABEL_105:
    swift_bridgeObjectRelease((_BYTE)v8);
    if (v99 < -1) {
      BUG();
    }
    char v71 = (char)v90;
    v90[2] = 0;
    uint64_t v3 = a2;
    swift_bridgeObjectRelease(a2);
    goto LABEL_107;
  }
  uint64_t v72 = *a1;
  __dsta = (void *)*a1;
  while (1)
  {
    if (v38 < 2) {
      BUG();
    }
    if (!v72)
    {
      swift_bridgeObjectRelease_n(a2, 3, v6, 0, v7);
      BUG();
    }
    BOOL v73 = v8 + 32;
    uint64_t v74 = 16 * (v38 - 2);
    uint64_t v75 = 16 * (v38 - 1);
    uint64_t v76 = *(void *)&v8[v74 + 32];
    uint64_t v104 = v8;
    uint64_t v77 = *(void *)&v8[v75 + 40];
    uint64_t v101 = v76;
    uint64_t v106 = (char *)(v72 + 8 * v76);
    char __src = (char *)(v72 + 8 * *(void *)&v73[v75]);
    char v93 = (void *)(v72 + 8 * v77);
    swift_bridgeObjectRetain(a2);
    specialized _merge<A>(low:mid:high:buffer:by:)(v106, __src, (unint64_t)v93, v89, a2);
    if (v2) {
      break;
    }
    if (v77 < v101) {
      BUG();
    }
    char v107 = (void *)v77;
    if (!swift_isUniquelyReferenced_nonNull_native(v104)) {
      uint64_t v104 = specialized _ArrayBuffer._consumeAndCreateNew()((uint64_t)v104);
    }
    uint64_t v8 = v104;
    if (v38 - 2 >= *((void *)v104 + 2)) {
      BUG();
    }
    *(void *)&v104[v74 + 32] = v101;
    *(void *)&v104[v74 + 40] = v107;
    unint64_t v78 = *((void *)v104 + 2);
    if (v38 > v78) {
      BUG();
    }
    memmove(&v104[v75 + 32], &v104[16 * v38 + 32], 16 * (v78 - v38));
    unint64_t v38 = v78 - 1;
    *((void *)v104 + 2) = v78 - 1;
    uint64_t v72 = (uint64_t)__dsta;
    if (v78 <= 2) {
      goto LABEL_105;
    }
  }
LABEL_102:
  swift_bridgeObjectRelease((_BYTE)v104);
  uint64_t v3 = a2;
  char v71 = (char)v90;
  if (v99 < -1) {
    BUG();
  }
  v90[2] = 0;
  swift_bridgeObjectRelease_n(a2, 2, v79, v80, v81);
LABEL_108:
  swift_bridgeObjectRelease(v71);
  return swift_bridgeObjectRelease_n(v3, 2, v82, v83, v84);
}

{
  uint64_t v2;
  uint64_t v3;
  Swift::Int v4;
  Swift::Int v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  Swift::Int v10;
  uint64_t v11;
  Swift::Int v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  Swift::Int v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  Swift::Int v29;
  uint64_t v30;
  void *v31;
  Swift::Int v32;
  unint64_t v33;
  unint64_t v34;
  char *v35;
  unint64_t v36;
  unint64_t v37;
  unint64_t v38;
  uint64_t v39;
  char *v40;
  uint64_t v41;
  uint64_t v42;
  BOOL v43;
  uint64_t v44;
  BOOL v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  unint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  BOOL v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  char *v65;
  uint64_t v66;
  uint64_t v67;
  char *v68;
  unint64_t v69;
  char *v70;
  char v71;
  uint64_t v72;
  char *v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  unint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  Swift::Int v86;
  uint64_t v88;
  char *v89;
  void *v90;
  char *__src;
  char *v92;
  void *v93;
  unint64_t v94;
  char *__dst;
  void *__dsta;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  char *v103;
  char *v104;
  void *v105;
  char *v106;
  void *v107;

  uint64_t v3 = a2;
  Swift::Int v4 = a1[1];
  swift_bridgeObjectRetain_n(a2, 3);
  Swift::Int v5 = _minimumMergeRunLength(_:)(v4);
  if (v5 >= v4)
  {
    if (v4 < 0) {
      BUG();
    }
    if (v4)
    {
      specialized MutableCollection<>._insertionSort(within:sortedEnd:by:)(0, v4, 1, a1, a2);
      char v71 = a2;
      goto LABEL_108;
    }
    char v71 = a2;
LABEL_107:
    swift_bridgeObjectRelease(v3);
    goto LABEL_108;
  }
  Swift::Int v86 = v5;
  char v90 = specialized static Array._allocateUninitialized(_:)(v4 / 2);
  uint64_t v89 = (char *)v6;
  uint64_t v99 = v4;
  if (v4 > 0)
  {
    uint64_t v100 = a2 + 32;
    uint64_t v98 = *a1;
    uint64_t v88 = *a1 - 8;
    uint64_t v8 = (char *)_swiftEmptyArrayStorage;
    uint64_t v9 = 0;
    Swift::Int v10 = v4;
    while (1)
    {
      uint64_t v11 = v9;
      Swift::Int v12 = v9 + 1;
      uint64_t v105 = (void *)v11;
      if (v12 >= v10)
      {
        uint64_t v13 = v98;
      }
      else
      {
        uint64_t v13 = v98;
        uint64_t v14 = *(void *)(v98 + 8 * v11 + 8);
        if (v14 < 0) {
          BUG();
        }
        unint64_t v15 = *(void *)(a2 + 16);
        if (v14 >= v15) {
          BUG();
        }
        unint64_t v16 = *(void *)(v98 + 8 * v11);
        if (v16 >= v15) {
          BUG();
        }
        uint64_t v17 = *(void *)(v100 + 32 * v14);
        uint64_t v18 = *(void *)(v100 + 32 * v16);
        Swift::Int v12 = v11 + 2;
        if (v11 + 2 < v10)
        {
          uint64_t v19 = *(void *)(v100 + 32 * v14);
          while (1)
          {
            unint64_t v20 = *(void *)(v98 + 8 * v12);
            if (v20 >= v15) {
              BUG();
            }
            if (v14 >= v15) {
              BUG();
            }
            Swift::Int v21 = v12;
            if (v17 < v18 == *(void *)(v100 + 32 * v20) >= v19) {
              break;
            }
            ++v12;
            uint64_t v19 = *(void *)(v100 + 32 * v20);
            uint64_t v14 = v20;
            if (v21 + 1 >= v10)
            {
              Swift::Int v12 = v10;
              break;
            }
          }
          uint64_t v11 = (uint64_t)v105;
        }
        if (v17 < v18)
        {
          if (v12 < v11) {
            BUG();
          }
          if (v12 > v11)
          {
            uint64_t v22 = v12 - 1;
            uint64_t v23 = v11;
            do
            {
              if (v23 != v22)
              {
                if (!v98)
                {
                  swift_bridgeObjectRelease_n(a2, 3, v18, v23, v11);
                  BUG();
                }
                uint64_t v24 = *(void *)(v98 + 8 * v23);
                *(void *)(v98 + 8 * v23) = *(void *)(v98 + 8 * v22);
                *(void *)(v98 + 8 * v22) = v24;
              }
              ++v23;
              uint64_t v18 = v22 - 1;
            }
            while (v23 < v22--);
          }
        }
      }
      if (v12 < v10)
      {
        if (__OFSUB__(v12, v11)) {
          BUG();
        }
        if (v12 - v11 < v86)
        {
          int64_t v26 = (char *)(v86 + v11);
          if (__OFADD__(v86, v11)) {
            BUG();
          }
          if ((uint64_t)v26 >= v10) {
            int64_t v26 = (char *)v10;
          }
          if ((uint64_t)v26 < v11) {
            BUG();
          }
          if ((char *)v12 != v26)
          {
            uint64_t v103 = v8;
            uint64_t v27 = v11;
            uint64_t v28 = v88;
            Swift::Int v29 = v12;
            do
            {
              uint64_t v30 = *(void *)(v13 + 8 * v29);
              uint64_t v31 = (void *)(v100 + 32 * v30);
              Swift::Int v32 = v12;
              do
              {
                if (v30 < 0) {
                  BUG();
                }
                unint64_t v33 = *(void *)(a2 + 16);
                if (v30 >= v33) {
                  BUG();
                }
                unint64_t v34 = *(void *)(v28 + 8 * v12);
                if (v34 >= v33) {
                  BUG();
                }
                if (*v31 >= *(void *)(v100 + 32 * v34)) {
                  break;
                }
                if (!v13)
                {
                  swift_bridgeObjectRelease_n(a2, 3, v28, v27, v31);
                  BUG();
                }
                *(void *)(v28 + 8 * v12 + 8) = v34;
                *(void *)(v28 + 8 * v12--) = v30;
              }
              while (v27 != v12);
              ++v29;
              v28 += 8;
              --v27;
              Swift::Int v12 = v32;
            }
            while ((char *)v29 != v26);
            Swift::Int v12 = (Swift::Int)v26;
            uint64_t v8 = v103;
            uint64_t v11 = (uint64_t)v105;
          }
        }
      }
      if (v12 < v11) {
        BUG();
      }
      uint64_t v97 = v12;
      if (!swift_isUniquelyReferenced_nonNull_native(v8)) {
        uint64_t v8 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *((void *)v8 + 2) + 1, 1, v8);
      }
      unint64_t v35 = v8;
      unint64_t v36 = *((void *)v8 + 2);
      uint64_t v104 = v35;
      unint64_t v37 = *((void *)v35 + 3);
      unint64_t v38 = v36 + 1;
      uint64_t v9 = v97;
      uint64_t v6 = (uint64_t)v105;
      if (v37 >> 1 <= v36)
      {
        uint64_t v70 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(v37 >= 2, v36 + 1, 1, v104);
        uint64_t v6 = (uint64_t)v105;
        uint64_t v9 = v97;
        uint64_t v104 = v70;
      }
      *((void *)v104 + 2) = v38;
      uint64_t v39 = 16 * v36;
      *(void *)&v104[v39 + 32] = v6;
      *(void *)&v104[v39 + 40] = v9;
      if (v36) {
        break;
      }
      unint64_t v38 = 1;
      uint64_t v8 = v104;
LABEL_84:
      Swift::Int v10 = v99;
      if (v9 >= v99) {
        goto LABEL_90;
      }
    }
    char v40 = v104 + 32;
    uint64_t v8 = v104;
    while (1)
    {
      uint64_t v41 = v38 - 1;
      if (v38 >= 4) {
        break;
      }
      if (v38 == 3)
      {
        uint64_t v42 = *((void *)v8 + 5);
        BOOL v43 = __OFSUB__(v42, *((void *)v8 + 4));
        uint64_t v44 = v42 - *((void *)v8 + 4);
        BOOL v45 = v43;
LABEL_58:
        if (v45) {
          BUG();
        }
        uint64_t v6 = v38 - 2;
        uint64_t v54 = 16 * (v38 - 2);
        uint64_t v55 = *(void *)&v40[v54 + 8];
        BOOL v43 = __OFSUB__(v55, *(void *)&v40[v54]);
        uint64_t v56 = v55 - *(void *)&v40[v54];
        BOOL v57 = v43;
        if (v43) {
          BUG();
        }
        uint64_t v58 = *(void *)&v40[16 * v41 + 8];
        BOOL v43 = __OFSUB__(v58, *(void *)&v40[16 * v41]);
        uint64_t v59 = v58 - *(void *)&v40[16 * v41];
        if (v43) {
          BUG();
        }
        uint64_t v7 = v59 + v56;
        if (__OFADD__(v59, v56)) {
          BUG();
        }
        if (v7 >= v44)
        {
          if (v44 >= v59) {
            uint64_t v6 = v38 - 1;
          }
          uint64_t v41 = v6;
          goto LABEL_75;
        }
        goto LABEL_67;
      }
      uint64_t v60 = *((void *)v8 + 5);
      BOOL v43 = __OFSUB__(v60, *((void *)v8 + 4));
      uint64_t v56 = v60 - *((void *)v8 + 4);
      BOOL v57 = v43;
LABEL_67:
      if (v57) {
        BUG();
      }
      uint64_t v6 = 16 * v41;
      uint64_t v61 = *(void *)&v40[16 * v41 + 8];
      BOOL v43 = __OFSUB__(v61, *(void *)&v40[16 * v41]);
      uint64_t v62 = v61 - *(void *)&v40[16 * v41];
      if (v43) {
        BUG();
      }
      if (v62 < v56) {
        goto LABEL_84;
      }
LABEL_75:
      if (v41 - 1 >= v38) {
        BUG();
      }
      if (!v98)
      {
        swift_bridgeObjectRelease_n(a2, 3, v6, 0, v7);
        BUG();
      }
      uint64_t v64 = 16 * (v41 - 1);
      unint64_t v94 = v41;
      long long v65 = &v40[16 * v41];
      uint64_t v66 = *(void *)&v40[v64];
      uint64_t v67 = *((void *)v65 + 1);
      __dst = v65;
      uint64_t v92 = (char *)(v98 + 8 * *(void *)v65);
      swift_bridgeObjectRetain(a2);
      specialized _merge<A>(low:mid:high:buffer:by:)((char *)(v98 + 8 * v66), v92, v98 + 8 * v67, v89, a2);
      if (v2) {
        goto LABEL_102;
      }
      uint64_t v8 = v104;
      if (v67 < v66) {
        BUG();
      }
      if (v94 > *((void *)v104 + 2)) {
        BUG();
      }
      uint64_t v68 = &v104[v64 + 32];
      *(void *)uint64_t v68 = v66;
      *((void *)v68 + 1) = v67;
      unint64_t v69 = *((void *)v104 + 2);
      if (v94 >= v69) {
        BUG();
      }
      unint64_t v38 = v69 - 1;
      memmove(__dst, __dst + 16, 16 * (v69 - 1 - v94));
      char v40 = v104 + 32;
      *((void *)v104 + 2) = v69 - 1;
      uint64_t v9 = v97;
      if (v69 <= 2) {
        goto LABEL_84;
      }
    }
    uint64_t v46 = 16 * v38;
    uint64_t v47 = *(void *)&v40[16 * v38 - 56];
    BOOL v43 = __OFSUB__(v47, *(void *)&v40[16 * v38 - 64]);
    uint64_t v48 = v47 - *(void *)&v40[16 * v38 - 64];
    if (v43) {
      BUG();
    }
    uint64_t v49 = *(void *)&v40[v46 - 40];
    BOOL v43 = __OFSUB__(v49, *(void *)&v40[v46 - 48]);
    uint64_t v44 = v49 - *(void *)&v40[v46 - 48];
    BOOL v45 = v43;
    if (v43) {
      BUG();
    }
    unint64_t v50 = v38 - 2;
    uint64_t v7 = 16 * (v38 - 2);
    uint64_t v51 = *(void *)&v40[v7 + 8];
    BOOL v43 = __OFSUB__(v51, *(void *)&v40[v7]);
    uint64_t v52 = v51 - *(void *)&v40[v7];
    if (v43) {
      BUG();
    }
    BOOL v43 = __OFADD__(v44, v52);
    uint64_t v53 = v44 + v52;
    if (v43) {
      BUG();
    }
    if (v53 >= v48)
    {
      uint64_t v63 = *(void *)&v40[16 * v41 + 8];
      BOOL v43 = __OFSUB__(v63, *(void *)&v40[16 * v41]);
      uint64_t v6 = v63 - *(void *)&v40[16 * v41];
      if (v43) {
        BUG();
      }
      if (v44 >= v6) {
        unint64_t v50 = v38 - 1;
      }
      uint64_t v41 = v50;
      goto LABEL_75;
    }
    goto LABEL_58;
  }
  uint64_t v8 = (char *)_swiftEmptyArrayStorage;
  unint64_t v38 = _swiftEmptyArrayStorage[2];
LABEL_90:
  if (v38 < 2)
  {
LABEL_105:
    swift_bridgeObjectRelease((_BYTE)v8);
    if (v99 < -1) {
      BUG();
    }
    char v71 = (char)v90;
    v90[2] = 0;
    uint64_t v3 = a2;
    swift_bridgeObjectRelease(a2);
    goto LABEL_107;
  }
  uint64_t v72 = *a1;
  __dsta = (void *)*a1;
  while (1)
  {
    if (v38 < 2) {
      BUG();
    }
    if (!v72)
    {
      swift_bridgeObjectRelease_n(a2, 3, v6, 0, v7);
      BUG();
    }
    BOOL v73 = v8 + 32;
    uint64_t v74 = 16 * (v38 - 2);
    uint64_t v75 = 16 * (v38 - 1);
    uint64_t v76 = *(void *)&v8[v74 + 32];
    uint64_t v104 = v8;
    uint64_t v77 = *(void *)&v8[v75 + 40];
    uint64_t v101 = v76;
    uint64_t v106 = (char *)(v72 + 8 * v76);
    char __src = (char *)(v72 + 8 * *(void *)&v73[v75]);
    char v93 = (void *)(v72 + 8 * v77);
    swift_bridgeObjectRetain(a2);
    specialized _merge<A>(low:mid:high:buffer:by:)(v106, __src, (unint64_t)v93, v89, a2);
    if (v2) {
      break;
    }
    if (v77 < v101) {
      BUG();
    }
    char v107 = (void *)v77;
    if (!swift_isUniquelyReferenced_nonNull_native(v104)) {
      uint64_t v104 = specialized _ArrayBuffer._consumeAndCreateNew()((uint64_t)v104);
    }
    uint64_t v8 = v104;
    if (v38 - 2 >= *((void *)v104 + 2)) {
      BUG();
    }
    *(void *)&v104[v74 + 32] = v101;
    *(void *)&v104[v74 + 40] = v107;
    unint64_t v78 = *((void *)v104 + 2);
    if (v38 > v78) {
      BUG();
    }
    memmove(&v104[v75 + 32], &v104[16 * v38 + 32], 16 * (v78 - v38));
    unint64_t v38 = v78 - 1;
    *((void *)v104 + 2) = v78 - 1;
    uint64_t v72 = (uint64_t)__dsta;
    if (v78 <= 2) {
      goto LABEL_105;
    }
  }
LABEL_102:
  swift_bridgeObjectRelease((_BYTE)v104);
  uint64_t v3 = a2;
  char v71 = (char)v90;
  if (v99 < -1) {
    BUG();
  }
  v90[2] = 0;
  swift_bridgeObjectRelease_n(a2, 2, v79, v80, v81);
LABEL_108:
  swift_bridgeObjectRelease(v71);
  return swift_bridgeObjectRelease_n(v3, 2, v82, v83, v84);
}

uint64_t specialized MutableCollection<>._insertionSort(within:sortedEnd:by:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4, uint64_t a5)
{
  if (a3 != a2)
  {
    uint64_t v5 = *a4;
    uint64_t v6 = *a4 - 8;
    uint64_t v7 = a3;
    do
    {
      uint64_t v8 = *(void *)(v5 + 8 * v7);
      uint64_t v9 = a3;
      do
      {
        if (v8 < 0) {
          BUG();
        }
        unint64_t v10 = *(void *)(a5 + 16);
        if (v8 >= v10) {
          BUG();
        }
        unint64_t v11 = *(void *)(v6 + 8 * v9);
        if (v11 >= v10) {
          BUG();
        }
        if (*(void *)(a5 + 32 + 16 * v8) >= *(void *)(a5 + 32 + 16 * v11)) {
          break;
        }
        if (!v5) {
          BUG();
        }
        *(void *)(v6 + 8 * v9 + 8) = v11;
        *(void *)(v6 + 8 * v9--) = v8;
      }
      while (a1 != v9);
      ++v7;
      v6 += 8;
      --a1;
    }
    while (v7 != a2);
  }
  return swift_bridgeObjectRelease(a5);
}

{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;

  if (a3 != a2)
  {
    uint64_t v5 = *a4;
    uint64_t v6 = *a4 - 8;
    uint64_t v7 = a3;
    do
    {
      uint64_t v8 = *(void *)(v5 + 8 * v7);
      uint64_t v9 = a3;
      do
      {
        if (v8 < 0) {
          BUG();
        }
        unint64_t v10 = *(void *)(a5 + 16);
        if (v8 >= v10) {
          BUG();
        }
        unint64_t v11 = *(void *)(v6 + 8 * v9);
        if (v11 >= v10) {
          BUG();
        }
        if (*(void *)(a5 + 32 + 32 * v8) >= *(void *)(a5 + 32 + 32 * v11)) {
          break;
        }
        if (!v5) {
          BUG();
        }
        *(void *)(v6 + 8 * v9 + 8) = v11;
        *(void *)(v6 + 8 * v9--) = v8;
      }
      while (a1 != v9);
      ++v7;
      v6 += 8;
      --a1;
    }
    while (v7 != a2);
  }
  return swift_bridgeObjectRelease(a5);
}

char specialized _merge<A>(low:mid:high:buffer:by:)(char *__src, char *a2, unint64_t a3, char *a4, uint64_t a5)
{
  uint64_t v5 = a4;
  uint64_t v7 = a2;
  uint64_t v8 = __src;
  int64_t v9 = a2 - __src;
  uint64_t v10 = a3 - (void)v7;
  uint64_t v11 = (uint64_t)(a3 - (void)v7) / 8;
  if (v9 / 8 >= v11)
  {
    uint64_t v25 = (uint64_t)(a3 - (void)v7) / 8;
    specialized UnsafeMutablePointer.moveInitialize(from:count:)(v7, v11, a4);
    Swift::Int v12 = &v5[8 * v25];
    if (v8 >= v7 || v10 <= 7) {
      goto LABEL_33;
    }
    unint64_t v16 = (char *)(a3 - 8);
    while (1)
    {
      uint64_t v17 = *((void *)v12 - 1);
      if (v17 < 0) {
        BUG();
      }
      unint64_t v18 = *(void *)(a5 + 16);
      if (v17 >= v18) {
        BUG();
      }
      unint64_t v19 = *((void *)v7 - 1);
      if (v19 >= v18) {
        BUG();
      }
      unint64_t v20 = v16 + 8;
      if (*(void *)(a5 + 32 + 16 * v17) >= *(void *)(a5 + 32 + 16 * v19))
      {
        unint64_t v19 = *((void *)v12 - 1);
        Swift::Int v21 = v7;
        if (v20 == v12)
        {
          BOOL v22 = v16 < v12;
          v12 -= 8;
          if (v22) {
            goto LABEL_30;
          }
        }
        else
        {
          v12 -= 8;
        }
      }
      else
      {
        Swift::Int v21 = v7 - 8;
        if (v20 == v7 && v16 < v7) {
          goto LABEL_30;
        }
      }
      *(void *)unint64_t v16 = v19;
LABEL_30:
      if (v21 > v8)
      {
        v16 -= 8;
        uint64_t v7 = v21;
        if (v12 > v5) {
          continue;
        }
      }
      uint64_t v7 = v21;
      goto LABEL_33;
    }
  }
  specialized UnsafeMutablePointer.moveInitialize(from:count:)(v8, v9 / 8, a4);
  Swift::Int v12 = &v5[8 * (v9 / 8)];
  if ((unint64_t)v7 < a3 && v9 > 7)
  {
    while (1)
    {
      unint64_t v13 = *(void *)v7;
      if (*(uint64_t *)v7 < 0) {
        BUG();
      }
      unint64_t v14 = *(void *)(a5 + 16);
      if (v13 >= v14) {
        BUG();
      }
      if (*(void *)v5 >= v14) {
        BUG();
      }
      if (*(void *)(a5 + 32 + 16 * v13) >= *(void *)(a5 + 32 + 16 * *(void *)v5)) {
        break;
      }
      BOOL v15 = v8 == v7;
      v7 += 8;
      if (!v15) {
        goto LABEL_11;
      }
LABEL_12:
      v8 += 8;
      if (v5 >= v12 || (unint64_t)v7 >= a3) {
        goto LABEL_14;
      }
    }
    unint64_t v13 = *(void *)v5;
    BOOL v15 = v8 == v5;
    v5 += 8;
    if (v15) {
      goto LABEL_12;
    }
LABEL_11:
    *(void *)uint64_t v8 = v13;
    goto LABEL_12;
  }
LABEL_14:
  uint64_t v7 = v8;
LABEL_33:
  specialized UnsafeMutablePointer.moveInitialize(from:count:)(v5, (v12 - v5) / 8, v7);
  swift_bridgeObjectRelease(a5);
  return 1;
}

{
  char *v5;
  char *v7;
  char *v8;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  unint64_t v13;
  unint64_t v14;
  BOOL v15;
  char *v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  char *v20;
  char *v21;
  BOOL v22;
  uint64_t v25;

  uint64_t v5 = a4;
  uint64_t v7 = a2;
  uint64_t v8 = __src;
  int64_t v9 = a2 - __src;
  uint64_t v10 = a3 - (void)v7;
  uint64_t v11 = (uint64_t)(a3 - (void)v7) / 8;
  if (v9 / 8 >= v11)
  {
    uint64_t v25 = (uint64_t)(a3 - (void)v7) / 8;
    specialized UnsafeMutablePointer.moveInitialize(from:count:)(v7, v11, a4);
    Swift::Int v12 = &v5[8 * v25];
    if (v8 >= v7 || v10 <= 7) {
      goto LABEL_33;
    }
    unint64_t v16 = (char *)(a3 - 8);
    while (1)
    {
      uint64_t v17 = *((void *)v12 - 1);
      if (v17 < 0) {
        BUG();
      }
      unint64_t v18 = *(void *)(a5 + 16);
      if (v17 >= v18) {
        BUG();
      }
      unint64_t v19 = *((void *)v7 - 1);
      if (v19 >= v18) {
        BUG();
      }
      unint64_t v20 = v16 + 8;
      if (*(void *)(a5 + 32 + 32 * v17) >= *(void *)(a5 + 32 + 32 * v19))
      {
        unint64_t v19 = *((void *)v12 - 1);
        Swift::Int v21 = v7;
        if (v20 == v12)
        {
          BOOL v22 = v16 < v12;
          v12 -= 8;
          if (v22) {
            goto LABEL_30;
          }
        }
        else
        {
          v12 -= 8;
        }
      }
      else
      {
        Swift::Int v21 = v7 - 8;
        if (v20 == v7 && v16 < v7) {
          goto LABEL_30;
        }
      }
      *(void *)unint64_t v16 = v19;
LABEL_30:
      if (v21 > v8)
      {
        v16 -= 8;
        uint64_t v7 = v21;
        if (v12 > v5) {
          continue;
        }
      }
      uint64_t v7 = v21;
      goto LABEL_33;
    }
  }
  specialized UnsafeMutablePointer.moveInitialize(from:count:)(v8, v9 / 8, a4);
  Swift::Int v12 = &v5[8 * (v9 / 8)];
  if ((unint64_t)v7 < a3 && v9 > 7)
  {
    while (1)
    {
      unint64_t v13 = *(void *)v7;
      if (*(uint64_t *)v7 < 0) {
        BUG();
      }
      unint64_t v14 = *(void *)(a5 + 16);
      if (v13 >= v14) {
        BUG();
      }
      if (*(void *)v5 >= v14) {
        BUG();
      }
      if (*(void *)(a5 + 32 + 32 * v13) >= *(void *)(a5 + 32 + 32 * *(void *)v5)) {
        break;
      }
      BOOL v15 = v8 == v7;
      v7 += 8;
      if (!v15) {
        goto LABEL_11;
      }
LABEL_12:
      v8 += 8;
      if (v5 >= v12 || (unint64_t)v7 >= a3) {
        goto LABEL_14;
      }
    }
    unint64_t v13 = *(void *)v5;
    BOOL v15 = v8 == v5;
    v5 += 8;
    if (v15) {
      goto LABEL_12;
    }
LABEL_11:
    *(void *)uint64_t v8 = v13;
    goto LABEL_12;
  }
LABEL_14:
  uint64_t v7 = v8;
LABEL_33:
  specialized UnsafeMutablePointer.moveInitialize(from:count:)(v5, (v12 - v5) / 8, v7);
  swift_bridgeObjectRelease(a5);
  return 1;
}

char *specialized Sequence._minImplementation(count:sortedBy:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unint64_t a5)
{
  int64_t v7 = 0;
  if (a1 > 0) {
    int64_t v7 = a1;
  }
  swift_unknownObjectRetain(a2);
  uint64_t v8 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v7, 0, (uint64_t)_swiftEmptyArrayStorage);
  uint64_t v9 = a1;
  uint64_t v53 = v8;
  uint64_t v10 = *((void *)v8 + 2);
  uint64_t v46 = a4;
  uint64_t v11 = a4;
  if (v10 < v9)
  {
    int64_t v12 = a5 >> 1;
    uint64_t v11 = a4;
    if (a5 >> 1 != a4)
    {
      if ((uint64_t)(a5 >> 1) <= a4) {
        BUG();
      }
      uint64_t v13 = 16 * a4;
      uint64_t v14 = a3;
      uint64_t v15 = *(void *)(a3 + 16 * v46);
      uint64_t v16 = *(void *)(a3 + 16 * v46 + 8);
      unint64_t v17 = v10 + 1;
      if (*((void *)v8 + 3) >> 1 <= (unint64_t)v10)
      {
        uint64_t v52 = v9;
        uint64_t v8 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(*((void *)v8 + 3) >= 2uLL, v10 + 1, 1, (uint64_t)v8);
        int64_t v12 = a5 >> 1;
        uint64_t v9 = v52;
        uint64_t v14 = a3;
      }
      uint64_t v11 = v46 + 1;
      *((void *)v8 + 2) = v17;
      uint64_t v18 = 16 * v10;
      *(void *)&v8[v18 + 32] = v15;
      *(void *)&v8[v18 + 40] = v16;
      uint64_t v53 = v8;
      if (v17 < v9)
      {
        unint64_t v19 = (uint64_t *)(v14 + v13 + 24);
        while (v12 != v11)
        {
          if (v12 <= v11) {
            BUG();
          }
          uint64_t v20 = *(v19 - 1);
          uint64_t v21 = *v19;
          uint64_t v22 = v17 + 1;
          if (*((void *)v8 + 3) >> 1 <= v17)
          {
            int64_t v23 = v17 + 1;
            uint64_t v24 = v9;
            uint64_t v50 = v12;
            uint64_t v44 = *(v19 - 1);
            uint64_t v8 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(*((void *)v8 + 3) >= 2uLL, v23, 1, (uint64_t)v8);
            uint64_t v20 = v44;
            int64_t v12 = v50;
            uint64_t v9 = v24;
          }
          *((void *)v8 + 2) = v22;
          *(void *)&v8[v18 + 48] = v20;
          *(void *)&v8[v18 + 56] = v21;
          uint64_t v53 = v8;
          v18 += 16;
          v19 += 2;
          ++v11;
          unint64_t v17 = v22;
          if (v22 >= v9) {
            goto LABEL_17;
          }
        }
        uint64_t v11 = v12;
      }
    }
  }
LABEL_17:
  uint64_t v51 = v11;
  specialized MutableCollection<>.sort(by:)((uint64_t *)&v53, (uint64_t (*)(uint64_t))specialized _ArrayBuffer._consumeAndCreateNew(), (uint64_t (*)(void))specialized UnsafeMutableBufferPointer._stableSortImpl(by:));
  if (v5)
  {
    uint64_t v25 = v53;
    swift_unknownObjectRelease(a2);
    swift_bridgeObjectRelease((_BYTE)v25);
  }
  else
  {
    int64_t v26 = a5 >> 1;
    uint64_t v27 = v11;
    if (v11 == a5 >> 1)
    {
      uint64_t v25 = v53;
    }
    else
    {
      uint64_t v29 = v11;
      uint64_t v30 = a3;
      do
      {
        if (v27 < v46 || v29 >= v26) {
          BUG();
        }
        uint64_t v25 = v53;
        uint64_t v31 = *((void *)v53 + 2);
        if (!v31) {
          BUG();
        }
        if (*(double *)&v53[16 * v31 + 24] > *(double *)(v30 + 16 * v29 + 8))
        {
          double v45 = *(double *)(v30 + 16 * v29 + 8);
          uint64_t v32 = *(void *)(v30 + 16 * v29);
          if (!swift_isUniquelyReferenced_nonNull_native(v53)) {
            uint64_t v25 = specialized _ArrayBuffer._consumeAndCreateNew()((uint64_t)v25);
          }
          int64_t v33 = *((void *)v25 + 2);
          int64_t v34 = v33 - 1;
          if (!v33) {
            BUG();
          }
          uint64_t v48 = v32;
          *((void *)v25 + 2) = v34;
          if (v33 == 1)
          {
            uint64_t v35 = 0;
          }
          else
          {
            int64_t v36 = v33 - 1;
            uint64_t v35 = 0;
            uint64_t v37 = v33 - 1;
            do
            {
              uint64_t v37 = (unint64_t)v37 >> 1;
              uint64_t v38 = v37 + v35;
              if (__OFADD__(v37, v35)) {
                BUG();
              }
              if (v37 + v35 < 0 || v38 >= v34) {
                BUG();
              }
              if (*(double *)&v25[16 * v38 + 40] <= v45)
              {
                uint64_t v37 = v36 + ~v37;
                uint64_t v35 = v38 + 1;
              }
              int64_t v36 = v37;
            }
            while (v37 > 0);
            if (v33 <= v35) {
              BUG();
            }
            if (v35 < 0) {
              BUG();
            }
          }
          if (*((void *)v25 + 3) >> 1 < (unint64_t)v33)
          {
            uint64_t v25 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(1, v33, 1, (uint64_t)v25);
            int64_t v34 = *((void *)v25 + 2);
          }
          uint64_t v39 = v34 - v35;
          if (v39 < 0)
          {
            _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.moveInitialize with negative count", 55, 2, "Swift/UnsafePointer.swift", 25, 2, 1046, 1);
            BUG();
          }
          uint64_t v40 = 16 * v35;
          uint64_t v41 = &v25[v40 + 32];
          uint64_t v42 = &v25[v40 + 48];
          memmove(v42, v41, 16 * v39);
          ++*((void *)v25 + 2);
          *((void *)v42 - 2) = v48;
          *((double *)v42 - 1) = v45;
          uint64_t v53 = v25;
          uint64_t v30 = a3;
          uint64_t v27 = v51;
        }
        ++v29;
      }
      while (v29 != v26);
    }
    swift_unknownObjectRelease(a2);
  }
  return v25;
}

char *specialized Sequence._minImplementation(count:sortedBy:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v50 = v3;
  uint64_t v4 = a3;
  uint64_t v5 = (char *)a1;
  uint64_t v57 = 0;
  int64_t v6 = 0;
  if (a1 > 0) {
    int64_t v6 = a1;
  }
  swift_bridgeObjectRetain(a3);
  swift_bridgeObjectRetain(a2);
  int64_t v7 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v6, 0, (uint64_t)_swiftEmptyArrayStorage);
  uint64_t v55 = v7;
  uint64_t v8 = *((void *)v7 + 2);
  if (v8 < a1)
  {
    uint64_t v9 = a2;
    uint64_t v10 = *(void *)(a2 + 16);
    if (v10)
    {
      uint64_t v11 = v5;
      uint64_t v56 = v4;
      uint64_t v12 = *(void *)(a2 + 32);
      unint64_t v13 = v8 + 1;
      if (*((void *)v7 + 3) >> 1 <= (unint64_t)v8)
      {
        uint64_t v47 = v10;
        uint64_t v53 = v8;
        int64_t v7 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(*((void *)v7 + 3) >= 2uLL, v8 + 1, 1, (uint64_t)v7);
        uint64_t v8 = v53;
        uint64_t v11 = v5;
        uint64_t v10 = v47;
        uint64_t v9 = a2;
      }
      *((void *)v7 + 2) = v13;
      *(void *)&v7[8 * v8 + 32] = v12;
      uint64_t v55 = v7;
      if (v13 >= (unint64_t)v11)
      {
        uint64_t v57 = 1;
      }
      else
      {
        uint64_t v14 = 8 * v8 + 40;
        uint64_t v15 = 1 - v10;
        uint64_t v16 = 0;
        while (v16 + v15)
        {
          uint64_t v5 = *(char **)(v9 + 8 * v16 + 40);
          unint64_t v17 = *((void *)v7 + 3);
          uint64_t v18 = v8 + v16 + 2;
          if (v17 >> 1 <= v13 + v16)
          {
            uint64_t v57 = v10;
            uint64_t v48 = v11;
            uint64_t v52 = v8;
            uint64_t v49 = v14;
            int64_t v7 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(v17 >= 2, v8 + v16 + 2, 1, (uint64_t)v7);
            uint64_t v14 = v49;
            uint64_t v8 = v52;
            uint64_t v11 = v48;
            uint64_t v10 = v57;
            uint64_t v9 = a2;
          }
          *((void *)v7 + 2) = v18;
          *(void *)&v7[8 * v16 + v14] = v5;
          uint64_t v55 = v7;
          uint64_t v19 = v13 + v16++ + 1;
          if (v19 >= (uint64_t)v11)
          {
            uint64_t v57 = v16 + 1;
            goto LABEL_17;
          }
        }
        uint64_t v57 = v10;
      }
LABEL_17:
      uint64_t v4 = v56;
    }
    else
    {
      uint64_t v57 = 0;
    }
  }
  swift_bridgeObjectRetain(v4);
  specialized MutableCollection<>.sort(by:)((uint64_t *)&v55, v4, (uint64_t (*)(uint64_t))specialized _ArrayBuffer._consumeAndCreateNew());
  if (v50)
  {
    char v23 = (char)v55;
    swift_bridgeObjectRelease_n(v4, 2, v20, v21, v22);
    swift_bridgeObjectRelease(a2);
    swift_bridgeObjectRelease(v23);
  }
  else
  {
    uint64_t v24 = a2;
    unint64_t v25 = *(void *)(a2 + 16);
    unint64_t v26 = v57;
    uint64_t v56 = v4;
    if (v57 == v25)
    {
      uint64_t v5 = v55;
    }
    else
    {
      uint64_t v29 = v4 + 32;
      unint64_t v51 = v25;
      do
      {
        if (v26 >= v25) {
          BUG();
        }
        uint64_t v5 = v55;
        uint64_t v30 = *((void *)v55 + 2);
        if (!v30) {
          BUG();
        }
        uint64_t v31 = *(void *)(v24 + 8 * v26 + 32);
        if (v31 < 0) {
          BUG();
        }
        unint64_t v32 = *(void *)(v56 + 16);
        if (v31 >= v32) {
          BUG();
        }
        unint64_t v33 = *(void *)&v55[8 * v30 + 24];
        if (v33 >= v32) {
          BUG();
        }
        int64_t v34 = (uint64_t *)(v29 + 16 * v31);
        uint64_t v21 = *v34;
        if (*v34 < *(void *)(v29 + 16 * v33))
        {
          uint64_t v57 = v26;
          if (!swift_isUniquelyReferenced_nonNull_native(v55)) {
            uint64_t v5 = specialized _ArrayBuffer._consumeAndCreateNew()((uint64_t)v5);
          }
          int64_t v37 = *((void *)v5 + 2);
          int64_t v38 = v37 - 1;
          if (!v37) {
            BUG();
          }
          *((void *)v5 + 2) = v38;
          if (v37 == 1)
          {
            uint64_t v39 = 0;
          }
          else
          {
            unint64_t v40 = *(void *)(v56 + 16);
            if (v31 >= v40) {
              BUG();
            }
            uint64_t v35 = *v34;
            int64_t v36 = v37 - 1;
            uint64_t v39 = 0;
            uint64_t v41 = v37 - 1;
            do
            {
              uint64_t v41 = (unint64_t)v41 >> 1;
              uint64_t v42 = v41 + v39;
              if (__OFADD__(v41, v39)) {
                BUG();
              }
              if (v41 + v39 < 0 || v42 >= v38) {
                BUG();
              }
              unint64_t v43 = *(void *)&v5[8 * v42 + 32];
              if (v43 >= v40) {
                BUG();
              }
              if (v35 >= *(void *)(v29 + 16 * v43))
              {
                uint64_t v41 = v36 + ~v41;
                uint64_t v39 = v42 + 1;
              }
              int64_t v36 = v41;
            }
            while (v41 > 0);
            if (v37 <= v39) {
              BUG();
            }
            if (v39 < 0) {
              BUG();
            }
          }
          if (*((void *)v5 + 3) >> 1 < (unint64_t)v37)
          {
            uint64_t v5 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(1, v37, 1, (uint64_t)v5);
            int64_t v38 = *((void *)v5 + 2);
          }
          uint64_t v44 = v38 - v39;
          if (v44 < 0)
          {
            swift_bridgeObjectRelease_n(v56, 2, v44, v35, v36);
            _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.moveInitialize with negative count", 55, 2, "Swift/UnsafePointer.swift", 25, 2, 1046, 1);
            BUG();
          }
          double v45 = &v5[8 * v39 + 32];
          uint64_t v46 = &v5[8 * v39 + 40];
          memmove(v46, v45, 8 * v44);
          ++*((void *)v5 + 2);
          *((void *)v46 - 1) = v31;
          uint64_t v55 = v5;
          uint64_t v24 = a2;
          unint64_t v26 = v57;
          unint64_t v25 = v51;
        }
        ++v26;
      }
      while (v26 != v25);
    }
    char v27 = v24;
    swift_bridgeObjectRelease_n(v56, 2, v24, v21, v22);
    swift_bridgeObjectRelease(v27);
  }
  return v5;
}

{
  uint64_t v3;
  uint64_t v4;
  char *v5;
  int64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char v23;
  uint64_t v24;
  unint64_t v25;
  unint64_t v26;
  char v27;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  unint64_t v33;
  uint64_t *v34;
  uint64_t v35;
  int64_t v36;
  int64_t v37;
  int64_t v38;
  uint64_t v39;
  unint64_t v40;
  uint64_t v41;
  uint64_t v42;
  unint64_t v43;
  uint64_t v44;
  char *v45;
  char *v46;
  uint64_t v47;
  char *v48;
  uint64_t v49;
  uint64_t v50;
  unint64_t v51;
  uint64_t v52;
  uint64_t v53;
  char *v55;
  uint64_t v56;
  uint64_t v57;

  uint64_t v50 = v3;
  uint64_t v4 = a3;
  uint64_t v5 = (char *)a1;
  uint64_t v57 = 0;
  int64_t v6 = 0;
  if (a1 > 0) {
    int64_t v6 = a1;
  }
  swift_bridgeObjectRetain(a3);
  swift_bridgeObjectRetain(a2);
  int64_t v7 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v6, 0, (uint64_t)_swiftEmptyArrayStorage);
  uint64_t v55 = v7;
  uint64_t v8 = *((void *)v7 + 2);
  if (v8 < a1)
  {
    uint64_t v9 = a2;
    uint64_t v10 = *(void *)(a2 + 16);
    if (v10)
    {
      uint64_t v11 = v5;
      uint64_t v56 = v4;
      uint64_t v12 = *(void *)(a2 + 32);
      unint64_t v13 = v8 + 1;
      if (*((void *)v7 + 3) >> 1 <= (unint64_t)v8)
      {
        uint64_t v47 = v10;
        uint64_t v53 = v8;
        int64_t v7 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(*((void *)v7 + 3) >= 2uLL, v8 + 1, 1, (uint64_t)v7);
        uint64_t v8 = v53;
        uint64_t v11 = v5;
        uint64_t v10 = v47;
        uint64_t v9 = a2;
      }
      *((void *)v7 + 2) = v13;
      *(void *)&v7[8 * v8 + 32] = v12;
      uint64_t v55 = v7;
      if (v13 >= (unint64_t)v11)
      {
        uint64_t v57 = 1;
      }
      else
      {
        uint64_t v14 = 8 * v8 + 40;
        uint64_t v15 = 1 - v10;
        uint64_t v16 = 0;
        while (v16 + v15)
        {
          uint64_t v5 = *(char **)(v9 + 8 * v16 + 40);
          unint64_t v17 = *((void *)v7 + 3);
          uint64_t v18 = v8 + v16 + 2;
          if (v17 >> 1 <= v13 + v16)
          {
            uint64_t v57 = v10;
            uint64_t v48 = v11;
            uint64_t v52 = v8;
            uint64_t v49 = v14;
            int64_t v7 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(v17 >= 2, v8 + v16 + 2, 1, (uint64_t)v7);
            uint64_t v14 = v49;
            uint64_t v8 = v52;
            uint64_t v11 = v48;
            uint64_t v10 = v57;
            uint64_t v9 = a2;
          }
          *((void *)v7 + 2) = v18;
          *(void *)&v7[8 * v16 + v14] = v5;
          uint64_t v55 = v7;
          uint64_t v19 = v13 + v16++ + 1;
          if (v19 >= (uint64_t)v11)
          {
            uint64_t v57 = v16 + 1;
            goto LABEL_17;
          }
        }
        uint64_t v57 = v10;
      }
LABEL_17:
      uint64_t v4 = v56;
    }
    else
    {
      uint64_t v57 = 0;
    }
  }
  swift_bridgeObjectRetain(v4);
  specialized MutableCollection<>.sort(by:)((uint64_t *)&v55, v4, (uint64_t (*)(uint64_t))specialized _ArrayBuffer._consumeAndCreateNew());
  if (v50)
  {
    char v23 = (char)v55;
    swift_bridgeObjectRelease_n(v4, 2, v20, v21, v22);
    swift_bridgeObjectRelease(a2);
    swift_bridgeObjectRelease(v23);
  }
  else
  {
    uint64_t v24 = a2;
    unint64_t v25 = *(void *)(a2 + 16);
    unint64_t v26 = v57;
    uint64_t v56 = v4;
    if (v57 == v25)
    {
      uint64_t v5 = v55;
    }
    else
    {
      uint64_t v29 = v4 + 32;
      unint64_t v51 = v25;
      do
      {
        if (v26 >= v25) {
          BUG();
        }
        uint64_t v5 = v55;
        uint64_t v30 = *((void *)v55 + 2);
        if (!v30) {
          BUG();
        }
        uint64_t v31 = *(void *)(v24 + 8 * v26 + 32);
        if (v31 < 0) {
          BUG();
        }
        unint64_t v32 = *(void *)(v56 + 16);
        if (v31 >= v32) {
          BUG();
        }
        unint64_t v33 = *(void *)&v55[8 * v30 + 24];
        if (v33 >= v32) {
          BUG();
        }
        int64_t v34 = (uint64_t *)(v29 + 32 * v31);
        uint64_t v21 = *v34;
        if (*v34 < *(void *)(v29 + 32 * v33))
        {
          uint64_t v57 = v26;
          if (!swift_isUniquelyReferenced_nonNull_native(v55)) {
            uint64_t v5 = specialized _ArrayBuffer._consumeAndCreateNew()((uint64_t)v5);
          }
          int64_t v37 = *((void *)v5 + 2);
          int64_t v38 = v37 - 1;
          if (!v37) {
            BUG();
          }
          *((void *)v5 + 2) = v38;
          if (v37 == 1)
          {
            uint64_t v39 = 0;
          }
          else
          {
            unint64_t v40 = *(void *)(v56 + 16);
            if (v31 >= v40) {
              BUG();
            }
            uint64_t v35 = *v34;
            int64_t v36 = v37 - 1;
            uint64_t v39 = 0;
            uint64_t v41 = v37 - 1;
            do
            {
              uint64_t v41 = (unint64_t)v41 >> 1;
              uint64_t v42 = v41 + v39;
              if (__OFADD__(v41, v39)) {
                BUG();
              }
              if (v41 + v39 < 0 || v42 >= v38) {
                BUG();
              }
              unint64_t v43 = *(void *)&v5[8 * v42 + 32];
              if (v43 >= v40) {
                BUG();
              }
              if (v35 >= *(void *)(v29 + 32 * v43))
              {
                uint64_t v41 = v36 + ~v41;
                uint64_t v39 = v42 + 1;
              }
              int64_t v36 = v41;
            }
            while (v41 > 0);
            if (v37 <= v39) {
              BUG();
            }
            if (v39 < 0) {
              BUG();
            }
          }
          if (*((void *)v5 + 3) >> 1 < (unint64_t)v37)
          {
            uint64_t v5 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(1, v37, 1, (uint64_t)v5);
            int64_t v38 = *((void *)v5 + 2);
          }
          uint64_t v44 = v38 - v39;
          if (v44 < 0)
          {
            swift_bridgeObjectRelease_n(v56, 2, v44, v35, v36);
            _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.moveInitialize with negative count", 55, 2, "Swift/UnsafePointer.swift", 25, 2, 1046, 1);
            BUG();
          }
          double v45 = &v5[8 * v39 + 32];
          uint64_t v46 = &v5[8 * v39 + 40];
          memmove(v46, v45, 8 * v44);
          ++*((void *)v5 + 2);
          *((void *)v46 - 1) = v31;
          uint64_t v55 = v5;
          uint64_t v24 = a2;
          unint64_t v26 = v57;
          unint64_t v25 = v51;
        }
        ++v26;
      }
      while (v26 != v25);
    }
    char v27 = v24;
    swift_bridgeObjectRelease_n(v56, 2, v24, v21, v22);
    swift_bridgeObjectRelease(v27);
  }
  return v5;
}

uint64_t specialized Sequence._minImplementation(count:sortedBy:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v55 = 0;
  int64_t v6 = 0;
  if (a1 > 0) {
    int64_t v6 = a1;
  }
  swift_bridgeObjectRetain(a2);
  uint64_t v52 = a3;
  swift_bridgeObjectRetain(a3);
  int64_t v7 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v6, 0, (uint64_t)_swiftEmptyArrayStorage);
  uint64_t v54 = v7;
  uint64_t v8 = *((void *)v7 + 2);
  uint64_t v9 = 0;
  unint64_t v10 = 0;
  if (v8 < a1)
  {
    uint64_t v9 = *(void *)(a2 + 16);
    if (v9)
    {
      uint64_t v11 = a3;
      unint64_t v46 = *(void *)(a3 + 16);
      if (v46)
      {
        int64_t v12 = a1;
        uint64_t v13 = *(void *)(a2 + 32);
        uint64_t v14 = *(void *)(a3 + 32);
        unint64_t v15 = v8 + 1;
        if (*((void *)v7 + 3) >> 1 <= (unint64_t)v8)
        {
          uint64_t v42 = *(void *)(a2 + 16);
          uint64_t v50 = a1;
          uint64_t v43 = *((void *)v7 + 2);
          int64_t v7 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(*((void *)v7 + 3) >= 2uLL, v8 + 1, 1, (uint64_t)v7);
          uint64_t v8 = v43;
          int64_t v12 = v50;
          uint64_t v9 = v42;
          uint64_t v11 = v52;
        }
        *((void *)v7 + 2) = v15;
        uint64_t v16 = 16 * v8;
        *(void *)&v7[v16 + 32] = v13;
        *(void *)&v7[v16 + 40] = v14;
        uint64_t v54 = v7;
        if (v15 >= v12)
        {
          uint64_t v9 = 1;
          uint64_t v55 = 0;
          unint64_t v10 = 1;
        }
        else
        {
          unint64_t v10 = 1;
          uint64_t v44 = 1 - v9;
          uint64_t v17 = 0;
          while (1)
          {
            if (!(v17 + v44))
            {
              LOBYTE(v7) = 1;
              uint64_t v55 = v7;
              unint64_t v10 = v9;
              goto LABEL_22;
            }
            uint64_t v18 = v17;
            ++v10;
            if (!(1 - v46 + v17)) {
              break;
            }
            ++v17;
            if (v18 + 1 >= v46) {
              BUG();
            }
            uint64_t v55 = *(char **)(a2 + 8 * v18 + 40);
            uint64_t v19 = *(void *)(v11 + 8 * v18 + 40);
            int64_t v53 = v8 + v18 + 2;
            if (*((void *)v7 + 3) >> 1 <= (unint64_t)(v18 + v8 + 1))
            {
              uint64_t v47 = v9;
              int64_t v49 = v12;
              uint64_t v45 = v8;
              int64_t v7 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(*((void *)v7 + 3) >= 2uLL, v53, 1, (uint64_t)v7);
              uint64_t v8 = v45;
              int64_t v12 = v49;
              uint64_t v9 = v47;
              uint64_t v11 = v52;
            }
            *((void *)v7 + 2) = v53;
            *(void *)&v7[v16 + 48] = v55;
            *(void *)&v7[v16 + 56] = v19;
            uint64_t v54 = v7;
            v16 += 16;
            if (v53 >= v12)
            {
              uint64_t v55 = 0;
              uint64_t v9 = v18 + 2;
              unint64_t v10 = v18 + 2;
              goto LABEL_22;
            }
          }
          LOBYTE(v7) = 1;
          uint64_t v55 = v7;
          uint64_t v9 = v46;
        }
      }
      else
      {
        LOBYTE(v7) = 1;
        uint64_t v55 = v7;
        unint64_t v10 = 1;
        uint64_t v9 = 0;
      }
    }
    else
    {
      LOBYTE(v7) = 1;
      uint64_t v55 = v7;
      uint64_t v9 = 0;
      unint64_t v10 = 0;
    }
  }
LABEL_22:
  uint64_t v20 = v9;
  specialized MutableCollection<>.sort(by:)((uint64_t *)&v54, (uint64_t (*)(uint64_t))specialized _ArrayBuffer._consumeAndCreateNew(), (uint64_t (*)(void))specialized UnsafeMutableBufferPointer._stableSortImpl(by:));
  if (v3)
  {
    char v21 = (char)v54;
    swift_bridgeObjectRelease(v52);
    swift_bridgeObjectRelease(a2);
    return swift_bridgeObjectRelease(v21);
  }
  else
  {
    uint64_t v23 = v52;
    uint64_t v24 = a2;
    if (!(_BYTE)v55)
    {
      unint64_t v25 = *(void *)(a2 + 16);
      if (v10 != v25)
      {
        unint64_t v26 = v20;
        do
        {
          if (v10 >= v25) {
            BUG();
          }
          unint64_t v27 = v10 + 1;
          if (v26 == *(void *)(v23 + 16)) {
            break;
          }
          if (v26 >= *(void *)(v23 + 16)) {
            BUG();
          }
          uint64_t v28 = v54;
          uint64_t v29 = *((void *)v54 + 2);
          if (!v29) {
            BUG();
          }
          if (*(double *)(v23 + 8 * v26 + 32) > *(double *)&v54[16 * v29 + 24])
          {
            uint64_t v55 = *(char **)(v23 + 8 * v26 + 32);
            unint64_t v48 = v26;
            uint64_t v30 = *(void *)(v24 + 8 * v10 + 32);
            if (!swift_isUniquelyReferenced_nonNull_native(v54)) {
              uint64_t v28 = specialized _ArrayBuffer._consumeAndCreateNew()((uint64_t)v28);
            }
            int64_t v31 = *((void *)v28 + 2);
            int64_t v32 = v31 - 1;
            double v33 = *(double *)&v55;
            if (!v31) {
              BUG();
            }
            *((void *)v28 + 2) = v32;
            if (v31 == 1)
            {
              uint64_t v34 = 0;
            }
            else
            {
              int64_t v35 = v31 - 1;
              uint64_t v34 = 0;
              uint64_t v36 = v31 - 1;
              do
              {
                uint64_t v36 = (unint64_t)v36 >> 1;
                uint64_t v37 = v36 + v34;
                if (__OFADD__(v36, v34)) {
                  BUG();
                }
                if (v36 + v34 < 0 || v37 >= v32) {
                  BUG();
                }
                if (v33 <= *(double *)&v28[16 * v37 + 40])
                {
                  uint64_t v36 = v35 + ~v36;
                  uint64_t v34 = v37 + 1;
                }
                int64_t v35 = v36;
              }
              while (v36 > 0);
              if (v31 <= v34) {
                BUG();
              }
              if (v34 < 0) {
                BUG();
              }
            }
            if (*((void *)v28 + 3) >> 1 <= (unint64_t)v32)
            {
              uint64_t v28 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(1, v31, 1, (uint64_t)v28);
              int64_t v32 = *((void *)v28 + 2);
            }
            uint64_t v38 = v32 - v34;
            if (v38 < 0)
            {
              _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.moveInitialize with negative count", 55, 2, "Swift/UnsafePointer.swift", 25, 2, 1046, 1);
              BUG();
            }
            uint64_t v39 = 16 * v34;
            unint64_t v40 = &v28[v39 + 32];
            uint64_t v41 = &v28[v39 + 48];
            memmove(v41, v40, 16 * v38);
            ++*((void *)v28 + 2);
            *((void *)v41 - 2) = v30;
            *((void *)v41 - 1) = v55;
            uint64_t v54 = v28;
            uint64_t v24 = a2;
            uint64_t v23 = v52;
            unint64_t v26 = v48;
          }
          ++v26;
          unint64_t v25 = *(void *)(v24 + 16);
          unint64_t v10 = v27;
        }
        while (v27 != v25);
      }
    }
    swift_bridgeObjectRelease(v23);
    swift_bridgeObjectRelease(v24);
    return (uint64_t)v54;
  }
}

void *specialized SparseMatrix.IndexedSequence.Iterator.init(base:)(uint64_t a1)
{
  uint64_t v2 = v1;
  uint64_t v3 = *(void *)a1;
  uint64_t v4 = *(void *)(a1 + 8);
  uint64_t v5 = *(void **)(a1 + 24);
  uint64_t v6 = *(void *)(a1 + 32);
  uint64_t v7 = *(void *)(a1 + 40);
  char v8 = *(unsigned char *)(a1 + 16) & 1;
  uint64_t v9 = v4;
  if (!v8) {
    uint64_t v9 = *(void *)a1;
  }
  uint64_t v17 = *(void *)(a1 + 24);
  uint64_t v20 = v3;
  uint64_t v21 = v4;
  uint64_t v22 = v5;
  char v23 = v8;
  if (v9 <= 0) {
    goto LABEL_6;
  }
  unint64_t v10 = v5[2];
  if (v10 < 2) {
    BUG();
  }
  if ((uint64_t)v5[5] <= 0)
  {
    uint64_t v11 = 1;
    if ((unint64_t)v9 > 1)
    {
      if (v10 < 3) {
        BUG();
      }
      if ((uint64_t)v5[6] <= 0)
      {
        uint64_t v11 = 2;
        if ((unint64_t)v9 >= 3)
        {
          if (v10 < 4) {
            BUG();
          }
          if ((uint64_t)v22[7] <= 0)
          {
            unint64_t v13 = v10 - 4;
            uint64_t v14 = 0;
            while (v14 + 3 < v9)
            {
              if (v13 == v14) {
                BUG();
              }
              uint64_t v15 = v14 + 1;
              if (v22[v14++ + 8] > 0)
              {
                uint64_t v11 = v15 + 2;
                goto LABEL_7;
              }
            }
            uint64_t v11 = v9;
          }
        }
      }
    }
  }
  else
  {
LABEL_6:
    uint64_t v11 = 0;
  }
LABEL_7:
  uint64_t v18 = v6;
  uint64_t v19 = v7;
  outlined retain of [Int](&v17);
  outlined retain of [Int](&v18);
  outlined retain of ContiguousArray<Double>(&v19);
  outlined release of SparseMatrix<Double>.MajorCollection((void *)a1);
  *(void *)uint64_t v2 = v20;
  *(void *)(v2 + 8) = v21;
  *(unsigned char *)(v2 + 16) = v23;
  uint64_t result = v22;
  *(void *)(v2 + 24) = v22;
  *(void *)(v2 + 32) = v6;
  *(void *)(v2 + 40) = v7;
  *(void *)(v2 + 48) = v11;
  *(void *)(v2 + 56) = 0;
  return result;
}

unint64_t specialized static UpperStrictlyTriangularMatrix.dataSize(_:_:)(unint64_t a1, uint64_t a2)
{
  BOOL v2 = __OFSUB__(a2, 1);
  unint64_t v3 = a2 - 1;
  if (v2) {
    BUG();
  }
  unint64_t v5 = v3;
  unint64_t v4 = a1 * v3;
  if (!is_mul_ok(a1, v5)) {
    BUG();
  }
  unint64_t v6 = a1 - 1;
  if (__OFSUB__(a1, 1)) {
    BUG();
  }
  int64_t v7 = v6 * a1;
  if (!is_mul_ok(v6, a1)) {
    BUG();
  }
  BOOL v2 = __OFSUB__(v4, v7 / 2);
  unint64_t v9 = v4 - v7 / 2;
  if (v2) {
    BUG();
  }
  return v9;
}

void *specialized ContiguousArray.init(repeating:count:)(uint64_t a1, double a2)
{
  if (a1 < 0) {
    BUG();
  }
  if (!a1) {
    return &_swiftEmptyArrayStorage;
  }
  uint64_t result = (void *)static ContiguousArray._allocateBufferUninitialized(minimumCapacity:)(a1, &type metadata for Double);
  result[2] = a1;
  for (uint64_t i = 0; i != a1; ++i)
    *(double *)&result[i + 4] = a2;
  return result;
}

char *specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(char a1, int64_t a2, char a3)
{
  uint64_t result = specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, *v3);
  uint64_t *v3 = (uint64_t)result;
  return result;
}

{
  uint64_t *v3;
  char *result;

  uint64_t result = specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, *v3, &demangling cache variable for type metadata for _ContiguousArrayStorage<(MLDataValue, MLDataValue)>, (void (*)(char *, uint64_t, char *))specialized UnsafeMutablePointer.initialize(from:count:));
  uint64_t *v3 = (uint64_t)result;
  return result;
}

{
  uint64_t *v3;
  char *result;

  uint64_t result = specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, *v3);
  uint64_t *v3 = (uint64_t)result;
  return result;
}

{
  uint64_t *v3;
  char *result;

  uint64_t result = specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, *v3, &demangling cache variable for type metadata for _ContiguousArrayStorage<Numeric>, (void (*)(char *, uint64_t, char *))specialized UnsafeMutablePointer.initialize(from:count:));
  uint64_t *v3 = (uint64_t)result;
  return result;
}

{
  uint64_t *v3;
  char *result;

  uint64_t result = specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, *v3);
  uint64_t *v3 = (uint64_t)result;
  return result;
}

{
  uint64_t *v3;
  char *result;

  uint64_t result = specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, *v3, &demangling cache variable for type metadata for _ContiguousArrayStorage<MLIdentifier>, (void (*)(char *, uint64_t, char *))specialized UnsafeMutablePointer.initialize(from:count:));
  uint64_t *v3 = (uint64_t)result;
  return result;
}

{
  uint64_t *v3;
  char *result;

  uint64_t result = specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, *v3, &demangling cache variable for type metadata for _ContiguousArrayStorage<(user: MLRecommender.Identifier, item: MLRecommender.Identifier)>, (void (*)(char *, uint64_t, char *))specialized UnsafeMutablePointer.initialize(from:count:));
  uint64_t *v3 = (uint64_t)result;
  return result;
}

long long specialized static BinaryFloatingPoint<>.random<A>(in:using:)@<xmm0>(uint64_t a1@<rdi>, double a2@<xmm0>, double a3@<xmm1>)
{
  if (a2 == a3) {
    BUG();
  }
  if ((~COERCE__INT64(a3 - a2) & 0x7FF0000000000000) == 0) {
    BUG();
  }
  uint64_t v6 = 0;
  double v7 = a3;
  double v8 = a2;
  double v9 = a3 - a2;
  swift_stdlib_random(&v6, 8);
  long long v4 = *(unint64_t *)&v9;
  long long v3 = *(unint64_t *)&v8;
  *(double *)&long long v4 = v9 * ((double)(int)v6 * 1.110223024625157e-16) + v8;
  if (*(double *)&v4 == v7)
  {
    *(double *)&long long v3 = specialized static BinaryFloatingPoint<>.random<A>(in:using:)(a1);
    return v3;
  }
  return v4;
}

uint64_t specialized Collection<>.firstIndex(of:)(int a1, uint64_t a2, uint64_t a3, int64_t a4, unint64_t a5)
{
  int64_t v5 = a5 >> 1;
  if (v5 == a4) {
    return 0;
  }
  if (v5 <= a4) {
    BUG();
  }
  if (*(_DWORD *)(a3 + 4 * a4) != a1)
  {
    int64_t v6 = a4 + 1;
    if (a4 + 1 == v5) {
      return 0;
    }
    if (a4 + 1 >= v5) {
      BUG();
    }
    if (*(_DWORD *)(a3 + 4 * a4 + 4) == a1)
    {
      return v6;
    }
    else
    {
      a4 = 0;
      while (1)
      {
        if (__OFADD__(1, v6++)) {
          BUG();
        }
        if (v6 == v5) {
          break;
        }
        if (v6 >= v5) {
          BUG();
        }
        if (*(_DWORD *)(a3 + 4 * v6) == a1) {
          return v6;
        }
      }
    }
  }
  return a4;
}

uint64_t specialized Sequence._maxImplementation(count:sortedBy:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = v3;
  uint64_t v5 = a2;
  unint64_t v47 = 0;
  int64_t v6 = 0;
  if (a1 > 0) {
    int64_t v6 = a1;
  }
  swift_bridgeObjectRetain(a3);
  double v7 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v6, 0, (uint64_t)_swiftEmptyArrayStorage);
  uint64_t v8 = a1;
  unint64_t v46 = v7;
  uint64_t v9 = v7[2];
  BOOL v10 = 0;
  if (v9 < a1)
  {
    uint64_t v11 = a2 + 1;
    if (__OFADD__(1, a2)) {
      BUG();
    }
    uint64_t v12 = a3;
    unint64_t v47 = *(void *)(a3 + 16);
    if (v47)
    {
      uint64_t v13 = *(void *)(a3 + 32);
      unint64_t v14 = v9 + 1;
      if (v7[3] >> 1 <= (unint64_t)v9)
      {
        double v7 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(v7[3] >= 2uLL, v14, 1, (uint64_t)v7);
        uint64_t v8 = a1;
        uint64_t v11 = v5 + 1;
        uint64_t v12 = a3;
      }
      v7[2] = v14;
      uint64_t v15 = 2 * v9;
      v7[v15 + 4] = v5;
      v7[v15 + 5] = v13;
      unint64_t v46 = v7;
      if (v14 >= v8)
      {
        uint64_t v5 = v11;
        unint64_t v47 = 1;
        BOOL v10 = 0;
      }
      else
      {
        uint64_t v42 = v4;
        unint64_t v38 = 1 - v47;
        uint64_t v16 = 0;
        while (1)
        {
          uint64_t v17 = v11 + v16;
          uint64_t v18 = v11 + v16 + 1;
          if (__OFADD__(1, v11 + v16)) {
            BUG();
          }
          BOOL v10 = v16 + v38 == 0;
          if (!(v16 + v38)) {
            break;
          }
          uint64_t v19 = v16 + 1;
          if (v16 + 1 >= v47) {
            BUG();
          }
          uint64_t v41 = *(void *)(v12 + 8 * v16 + 40);
          int64_t v20 = v9 + v16 + 2;
          if (v7[3] >> 1 <= (unint64_t)(v16 + v9 + 1))
          {
            uint64_t v40 = v9 + v16 + 2;
            uint64_t v43 = v11;
            uint64_t v39 = v8;
            double v7 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(v7[3] >= 2uLL, v20, 1, (uint64_t)v7);
            int64_t v20 = v40;
            uint64_t v8 = v39;
            uint64_t v11 = v43;
            uint64_t v12 = a3;
          }
          v7[2] = v20;
          v7[v15 + 6] = v17;
          v7[v15 + 7] = v41;
          unint64_t v46 = v7;
          v15 += 2;
          uint64_t v16 = v19;
          if (v20 >= v8)
          {
            unint64_t v47 = v19 + 1;
            uint64_t v5 = v18;
            uint64_t v4 = v42;
            BOOL v10 = 0;
            goto LABEL_20;
          }
        }
        uint64_t v5 = v11 + v16 + 1;
        uint64_t v4 = v42;
      }
    }
    else
    {
      uint64_t v5 = a2 + 1;
      BOOL v10 = 1;
      unint64_t v47 = 0;
    }
  }
LABEL_20:
  specialized MutableCollection<>.sort(by:)((uint64_t *)&v46, (uint64_t (*)(uint64_t))specialized _ArrayBuffer._consumeAndCreateNew(), (uint64_t (*)(void))specialized UnsafeMutableBufferPointer._stableSortImpl(by:));
  if (v4)
  {
    swift_bridgeObjectRelease(a3);
    return swift_bridgeObjectRelease((_BYTE)v46);
  }
  else
  {
    uint64_t v22 = a3;
    if (v10)
    {
      swift_bridgeObjectRelease(a3);
    }
    else
    {
      uint64_t v23 = v5 + 1;
      unint64_t v24 = v47;
      if (__OFADD__(1, v5)) {
LABEL_55:
      }
        BUG();
      uint64_t v25 = v5;
      while (v24 != *(void *)(v22 + 16))
      {
        if (v24 >= *(void *)(v22 + 16)) {
          BUG();
        }
        unint64_t v26 = v46;
        unint64_t v27 = v46[2];
        if (!v27) {
          BUG();
        }
        uint64_t v28 = *(void *)(v22 + 8 * v24 + 32);
        if (v28 >= v46[5])
        {
          uint64_t v29 = v46[2];
          uint64_t v30 = 0;
          uint64_t v31 = v29;
          do
          {
            uint64_t v31 = (unint64_t)v31 >> 1;
            unint64_t v32 = v31 + v30;
            if (__OFADD__(v31, v30)) {
              BUG();
            }
            if (v32 >= v27) {
              BUG();
            }
            if (v28 >= v46[2 * v32 + 5])
            {
              uint64_t v31 = v29 + ~v31;
              uint64_t v30 = v32 + 1;
            }
            uint64_t v29 = v31;
          }
          while (v31 > 0);
          unint64_t v47 = v24;
          uint64_t v44 = v25;
          if (v30 >= 2)
          {
            if (!swift_isUniquelyReferenced_nonNull_native(v46)) {
              unint64_t v26 = specialized _ArrayBuffer._consumeAndCreateNew()((uint64_t)v26);
            }
            double v33 = v26 + 6;
            for (uint64_t i = 1; i < v30; ++i)
            {
              if ((unint64_t)i >= v26[2]) {
                BUG();
              }
              *(v33 - 1) = *v33;
              ++v33;
            }
          }
          BOOL v35 = __OFSUB__(v30, 1);
          uint64_t v36 = v30 - 1;
          if (v35) {
            BUG();
          }
          if (!swift_isUniquelyReferenced_nonNull_native(v26)) {
            unint64_t v26 = specialized _ArrayBuffer._consumeAndCreateNew()((uint64_t)v26);
          }
          uint64_t v22 = a3;
          unint64_t v24 = v47;
          if (v36 < 0) {
            BUG();
          }
          if ((unint64_t)v36 >= v26[2]) {
            BUG();
          }
          uint64_t v37 = 2 * v36;
          v26[v37 + 4] = v44;
          v26[v37 + 5] = v28;
          unint64_t v46 = v26;
        }
        uint64_t v25 = v23;
        ++v24;
        BOOL v35 = __OFADD__(1, v23++);
        if (v35) {
          goto LABEL_55;
        }
      }
      swift_bridgeObjectRelease(v22);
    }
    return (uint64_t)v46;
  }
}

uint64_t specialized Array.index(_:offsetBy:limitedBy:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return specialized Array.index(_:offsetBy:limitedBy:)(a1, a2, a3);
}

{
  BOOL v3;
  uint64_t v4;
  uint64_t v5;

  uint64_t v3 = __OFSUB__(a3, a1);
  uint64_t v4 = a3 - a1;
  if (v3) {
    BUG();
  }
  if (a2 > 0)
  {
    if (v4 < 0 || v4 >= (unint64_t)a2) {
      goto LABEL_9;
    }
    return 0;
  }
  if (v4 <= 0 && v4 > a2) {
    return 0;
  }
LABEL_9:
  uint64_t v3 = __OFADD__(a2, a1);
  uint64_t v5 = a2 + a1;
  if (v3) {
    BUG();
  }
  return v5;
}

char *specialized ArraySlice._copyToContiguousArray()(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4)
{
  if ((a4 & 1) == 0) {
    goto LABEL_2;
  }
  uint64_t v7 = type metadata accessor for __ContiguousArrayStorageBase(0);
  swift_unknownObjectRetain_n(a1, 2);
  uint64_t v8 = (void *)swift_dynamicCastClass(a1, v7);
  if (!v8)
  {
    swift_unknownObjectRelease(a1);
    uint64_t v8 = _swiftEmptyArrayStorage;
  }
  uint64_t v9 = v8[2];
  swift_release();
  if (__OFSUB__(a4 >> 1, a3)) {
    BUG();
  }
  if (v9 != (a4 >> 1) - a3)
  {
    swift_unknownObjectRelease(a1);
LABEL_2:
    int64_t v6 = specialized _copyCollectionToContiguousArray<A>(_:)(a1, a2, a3, a4);
LABEL_9:
    swift_unknownObjectRelease(a1);
    return v6;
  }
  int64_t v6 = (char *)swift_dynamicCastClass(a1, v7);
  swift_unknownObjectRelease(a1);
  if (!v6)
  {
    int64_t v6 = (char *)_swiftEmptyArrayStorage;
    goto LABEL_9;
  }
  return v6;
}

void *partial apply for closure #2 in MLRecommender.getSimilarItems<A>(fromItems:maxCount:)(uint64_t *a1, double a2)
{
  return closure #2 in MLRecommender.getSimilarItems<A>(fromItems:maxCount:)(a1, *(void **)(v2 + 32), *(unsigned char *)(v2 + 40), *(void *)(v2 + 16), *(void *)(v2 + 24), a2);
}

void *partial apply for closure #1 in MLRecommender.getSimilarItems<A>(fromItems:maxCount:)(uint64_t *a1, double a2)
{
  return closure #1 in MLRecommender.getSimilarItems<A>(fromItems:maxCount:)(a1, *(void **)(v2 + 32), *(unsigned char *)(v2 + 40), *(void *)(v2 + 16), *(void *)(v2 + 24), a2);
}

id sub_C18B7()
{
  uint64_t v1 = v0;
  id result = MLRecommender.model.getter();
  *uint64_t v1 = result;
  return result;
}

void sub_C18D1(id *a1)
{
}

uint64_t initializeBufferWithCopyOfBuffer for MLRecommender(uint64_t a1, uint64_t *a2, int *a3)
{
  int v4 = *(_DWORD *)(*((void *)a3 - 1) + 80);
  uint64_t v5 = *a2;
  *(void *)a1 = *a2;
  if ((v4 & 0x20000) != 0)
  {
    a1 = v5 + ((v4 + 16) & ~v4);
    swift_retain();
  }
  else
  {
    uint64_t v6 = a2[1];
    *(void *)(a1 + 8) = v6;
    uint64_t v7 = a2[2];
    *(void *)(a1 + 16) = v7;
    uint64_t v36 = a2[3];
    *(void *)(a1 + 24) = v36;
    *(_OWORD *)(a1 + 32) = *((_OWORD *)a2 + 2);
    *(unsigned char *)(a1 + 48) = *((unsigned char *)a2 + 48);
    uint64_t v8 = a2[7];
    *(void *)(a1 + 56) = v8;
    uint64_t v31 = a2[8];
    *(void *)(a1 + 64) = v31;
    uint64_t v9 = a2[11];
    *(_OWORD *)(a1 + 72) = *(_OWORD *)(a2 + 9);
    *(void *)(a1 + 88) = v9;
    uint64_t v34 = a2[13];
    swift_bridgeObjectRetain(v5);
    swift_bridgeObjectRetain(v6);
    swift_bridgeObjectRetain(v7);
    swift_bridgeObjectRetain(v36);
    swift_bridgeObjectRetain(v8);
    swift_bridgeObjectRetain(v31);
    swift_retain();
    if (v34)
    {
      *(void *)(a1 + 96) = a2[12];
      *(void *)(a1 + 104) = v34;
      uint64_t v10 = a2[14];
      *(void *)(a1 + 112) = v10;
      swift_bridgeObjectRetain(v34);
      swift_bridgeObjectRetain(v10);
    }
    else
    {
      *(void *)(a1 + 112) = a2[14];
      *(_OWORD *)(a1 + 96) = *((_OWORD *)a2 + 6);
    }
    uint64_t v29 = a2[15];
    *(void *)(a1 + 120) = v29;
    uint64_t v25 = a2[16];
    *(void *)(a1 + 128) = v25;
    *(_OWORD *)(a1 + 136) = *(_OWORD *)(a2 + 17);
    id v26 = (id)a2[19];
    *(void *)(a1 + 152) = v26;
    *(void *)(a1 + 160) = a2[20];
    uint64_t v27 = a2[21];
    *(void *)(a1 + 168) = v27;
    *(void *)(a1 + 176) = a2[22];
    uint64_t v28 = a2[23];
    *(void *)(a1 + 184) = v28;
    *(void *)(a1 + 192) = a2[24];
    uint64_t v32 = a2[25];
    *(void *)(a1 + 200) = v32;
    uint64_t v11 = a3[9];
    uint64_t v12 = a1 + v11;
    uint64_t v13 = (uint64_t)a2 + v11;
    *(unsigned char *)(a1 + v11) = *((unsigned char *)a2 + v11);
    *(_OWORD *)(a1 + v11 + 8) = *(_OWORD *)((char *)a2 + v11 + 8);
    uint64_t v37 = (int *)type metadata accessor for MLRecommender.ModelParameters(0);
    uint64_t v14 = v37[7];
    uint64_t v33 = v12;
    uint64_t v15 = (void *)(v14 + v12);
    uint64_t v35 = v13;
    uint64_t v16 = (const void *)(v13 + v14);
    uint64_t v17 = type metadata accessor for DataFrame(0);
    swift_bridgeObjectRetain(v29);
    swift_bridgeObjectRetain(v25);
    v26;
    swift_bridgeObjectRetain(v27);
    swift_bridgeObjectRetain(v28);
    swift_bridgeObjectRetain(v32);
    if (__swift_getEnumTagSinglePayload((uint64_t)v16, 1, v17))
    {
      uint64_t v18 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for DataFrame?);
      memcpy(v15, v16, *(void *)(*(void *)(v18 - 8) + 64));
    }
    else
    {
      (*(void (**)(void *, const void *, uint64_t))(*(void *)(v17 - 8) + 16))(v15, v16, v17);
      __swift_storeEnumTagSinglePayload((uint64_t)v15, 0, 1, v17);
    }
    uint64_t v19 = v37[8];
    uint64_t v20 = v33 + v19;
    uint64_t v21 = (uint64_t *)(v35 + v19);
    char v22 = *(unsigned char *)(v35 + v19 + 8);
    if (v22 == -1)
    {
      *(unsigned char *)(v20 + 8) = *((unsigned char *)v21 + 8);
      *(void *)uint64_t v20 = *v21;
    }
    else
    {
      uint64_t v23 = *v21;
      outlined copy of Result<_DataTable, Error>(*v21, v22);
      *(void *)uint64_t v20 = v23;
      *(unsigned char *)(v20 + 8) = v22 & 1;
    }
    *(void *)(v33 + v37[9]) = *(void *)(v35 + v37[9]);
    *(unsigned char *)(a1 + a3[10]) = *((unsigned char *)a2 + a3[10]);
    *(unsigned char *)(a1 + a3[11]) = *((unsigned char *)a2 + a3[11]);
  }
  return a1;
}

uint64_t destroy for MLRecommender(uint64_t a1, uint64_t a2)
{
  swift_bridgeObjectRelease(*(void *)a1);
  swift_bridgeObjectRelease(*(void *)(a1 + 8));
  swift_bridgeObjectRelease(*(void *)(a1 + 16));
  swift_bridgeObjectRelease(*(void *)(a1 + 24));
  swift_bridgeObjectRelease(*(void *)(a1 + 56));
  swift_bridgeObjectRelease(*(void *)(a1 + 64));
  swift_release();
  uint64_t v3 = *(void *)(a1 + 104);
  if (v3)
  {
    swift_bridgeObjectRelease(v3);
    swift_bridgeObjectRelease(*(void *)(a1 + 112));
  }
  swift_bridgeObjectRelease(*(void *)(a1 + 120));
  swift_bridgeObjectRelease(*(void *)(a1 + 128));

  swift_bridgeObjectRelease(*(void *)(a1 + 168));
  swift_bridgeObjectRelease(*(void *)(a1 + 184));
  swift_bridgeObjectRelease(*(void *)(a1 + 200));
  uint64_t v4 = a1 + *(int *)(a2 + 36);
  uint64_t v5 = type metadata accessor for MLRecommender.ModelParameters(0);
  uint64_t v6 = v4 + *(int *)(v5 + 28);
  uint64_t v7 = type metadata accessor for DataFrame(0);
  if (!__swift_getEnumTagSinglePayload(v6, 1, v7)) {
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v7 - 8) + 8))(v6, v7);
  }
  uint64_t result = *(int *)(v5 + 32);
  char v9 = *(unsigned char *)(v4 + result + 8);
  if (v9 != -1) {
    return outlined consume of Result<_DataTable, Error>(*(void *)(v4 + result), v9 & 1);
  }
  return result;
}

uint64_t initializeWithCopy for MLRecommender(uint64_t a1, uint64_t *a2, int *a3)
{
  uint64_t v4 = *a2;
  *(void *)a1 = *a2;
  uint64_t v5 = a2[1];
  *(void *)(a1 + 8) = v5;
  uint64_t v6 = a2[2];
  *(void *)(a1 + 16) = v6;
  uint64_t v35 = a2[3];
  *(void *)(a1 + 24) = v35;
  *(_OWORD *)(a1 + 32) = *((_OWORD *)a2 + 2);
  *(unsigned char *)(a1 + 48) = *((unsigned char *)a2 + 48);
  uint64_t v7 = a2[7];
  *(void *)(a1 + 56) = v7;
  uint64_t v30 = a2[8];
  *(void *)(a1 + 64) = v30;
  uint64_t v8 = a2[11];
  *(_OWORD *)(a1 + 72) = *(_OWORD *)(a2 + 9);
  *(void *)(a1 + 88) = v8;
  uint64_t v33 = a2[13];
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRetain(v5);
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRetain(v35);
  swift_bridgeObjectRetain(v7);
  swift_bridgeObjectRetain(v30);
  swift_retain();
  if (v33)
  {
    *(void *)(a1 + 96) = a2[12];
    *(void *)(a1 + 104) = v33;
    uint64_t v9 = a2[14];
    *(void *)(a1 + 112) = v9;
    swift_bridgeObjectRetain(v33);
    swift_bridgeObjectRetain(v9);
  }
  else
  {
    *(void *)(a1 + 112) = a2[14];
    *(_OWORD *)(a1 + 96) = *((_OWORD *)a2 + 6);
  }
  uint64_t v28 = a2[15];
  *(void *)(a1 + 120) = v28;
  uint64_t v24 = a2[16];
  *(void *)(a1 + 128) = v24;
  *(_OWORD *)(a1 + 136) = *(_OWORD *)(a2 + 17);
  id v25 = (id)a2[19];
  *(void *)(a1 + 152) = v25;
  *(void *)(a1 + 160) = a2[20];
  uint64_t v26 = a2[21];
  *(void *)(a1 + 168) = v26;
  *(void *)(a1 + 176) = a2[22];
  uint64_t v27 = a2[23];
  *(void *)(a1 + 184) = v27;
  *(void *)(a1 + 192) = a2[24];
  uint64_t v31 = a2[25];
  *(void *)(a1 + 200) = v31;
  uint64_t v10 = a3[9];
  uint64_t v11 = a1 + v10;
  uint64_t v12 = (uint64_t)a2 + v10;
  *(unsigned char *)(a1 + v10) = *((unsigned char *)a2 + v10);
  *(_OWORD *)(a1 + v10 + 8) = *(_OWORD *)((char *)a2 + v10 + 8);
  uint64_t v36 = (int *)type metadata accessor for MLRecommender.ModelParameters(0);
  uint64_t v13 = v36[7];
  uint64_t v32 = v11;
  uint64_t v14 = (void *)(v13 + v11);
  uint64_t v34 = v12;
  uint64_t v15 = (const void *)(v12 + v13);
  uint64_t v16 = type metadata accessor for DataFrame(0);
  swift_bridgeObjectRetain(v28);
  swift_bridgeObjectRetain(v24);
  v25;
  swift_bridgeObjectRetain(v26);
  swift_bridgeObjectRetain(v27);
  swift_bridgeObjectRetain(v31);
  if (__swift_getEnumTagSinglePayload((uint64_t)v15, 1, v16))
  {
    uint64_t v17 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for DataFrame?);
    memcpy(v14, v15, *(void *)(*(void *)(v17 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(*(void *)(v16 - 8) + 16))(v14, v15, v16);
    __swift_storeEnumTagSinglePayload((uint64_t)v14, 0, 1, v16);
  }
  uint64_t v18 = v36[8];
  uint64_t v19 = v32 + v18;
  uint64_t v20 = (uint64_t *)(v34 + v18);
  char v21 = *(unsigned char *)(v34 + v18 + 8);
  if (v21 == -1)
  {
    *(unsigned char *)(v19 + 8) = *((unsigned char *)v20 + 8);
    *(void *)uint64_t v19 = *v20;
  }
  else
  {
    uint64_t v22 = *v20;
    outlined copy of Result<_DataTable, Error>(*v20, v21);
    *(void *)uint64_t v19 = v22;
    *(unsigned char *)(v19 + 8) = v21 & 1;
  }
  *(void *)(v32 + v36[9]) = *(void *)(v34 + v36[9]);
  *(unsigned char *)(a1 + a3[10]) = *((unsigned char *)a2 + a3[10]);
  *(unsigned char *)(a1 + a3[11]) = *((unsigned char *)a2 + a3[11]);
  return a1;
}

uint64_t *assignWithCopy for MLRecommender(uint64_t *a1, uint64_t *a2, int *a3)
{
  uint64_t v5 = *a2;
  uint64_t v6 = *a1;
  *a1 = *a2;
  swift_bridgeObjectRetain(v5);
  swift_bridgeObjectRelease(v6);
  uint64_t v7 = a2[1];
  uint64_t v8 = a1[1];
  a1[1] = v7;
  swift_bridgeObjectRetain(v7);
  swift_bridgeObjectRelease(v8);
  uint64_t v9 = a2[2];
  uint64_t v10 = a1[2];
  a1[2] = v9;
  swift_bridgeObjectRetain(v9);
  swift_bridgeObjectRelease(v10);
  uint64_t v11 = a2[3];
  uint64_t v12 = a1[3];
  a1[3] = v11;
  swift_bridgeObjectRetain(v11);
  swift_bridgeObjectRelease(v12);
  a1[4] = a2[4];
  a1[5] = a2[5];
  *((unsigned char *)a1 + 48) = *((unsigned char *)a2 + 48);
  uint64_t v13 = a2[7];
  uint64_t v14 = a1[7];
  a1[7] = v13;
  swift_bridgeObjectRetain(v13);
  swift_bridgeObjectRelease(v14);
  uint64_t v15 = a2[8];
  uint64_t v16 = a1[8];
  a1[8] = v15;
  swift_bridgeObjectRetain(v15);
  swift_bridgeObjectRelease(v16);
  a1[9] = a2[9];
  swift_retain();
  swift_release();
  *((_OWORD *)a1 + 5) = *((_OWORD *)a2 + 5);
  uint64_t v17 = a1 + 12;
  uint64_t v18 = a2 + 12;
  uint64_t v19 = a1[13];
  uint64_t v20 = a2[13];
  if (v19)
  {
    if (v20)
    {
      a1[12] = a2[12];
      uint64_t v21 = a2[13];
      a1[13] = v21;
      swift_bridgeObjectRetain(v21);
      swift_bridgeObjectRelease(v19);
      uint64_t v22 = a2[14];
      uint64_t v23 = a1[14];
      a1[14] = v22;
      swift_bridgeObjectRetain(v22);
      swift_bridgeObjectRelease(v23);
    }
    else
    {
      outlined destroy of InteractionLookupTable((uint64_t)(a1 + 12));
      *uint64_t v17 = *v18;
      a1[14] = a2[14];
    }
  }
  else if (v20)
  {
    a1[12] = a2[12];
    uint64_t v24 = a2[13];
    a1[13] = v24;
    uint64_t v25 = a2[14];
    a1[14] = v25;
    swift_bridgeObjectRetain(v24);
    swift_bridgeObjectRetain(v25);
  }
  else
  {
    a1[14] = a2[14];
    *uint64_t v17 = *v18;
  }
  uint64_t v26 = a2[15];
  uint64_t v27 = a1[15];
  a1[15] = v26;
  swift_bridgeObjectRetain(v26);
  swift_bridgeObjectRelease(v27);
  uint64_t v28 = a2[16];
  uint64_t v29 = a1[16];
  a1[16] = v28;
  swift_bridgeObjectRetain(v28);
  swift_bridgeObjectRelease(v29);
  a1[17] = a2[17];
  a1[18] = a2[18];
  uint64_t v30 = (void *)a2[19];
  uint64_t v31 = (void *)a1[19];
  a1[19] = (uint64_t)v30;
  v30;

  a1[20] = a2[20];
  uint64_t v32 = a2[21];
  uint64_t v33 = a1[21];
  a1[21] = v32;
  swift_bridgeObjectRetain(v32);
  swift_bridgeObjectRelease(v33);
  a1[22] = a2[22];
  uint64_t v34 = a2[23];
  uint64_t v35 = a1[23];
  a1[23] = v34;
  swift_bridgeObjectRetain(v34);
  swift_bridgeObjectRelease(v35);
  a1[24] = a2[24];
  uint64_t v36 = a2[25];
  uint64_t v37 = a1[25];
  a1[25] = v36;
  swift_bridgeObjectRetain(v36);
  swift_bridgeObjectRelease(v37);
  uint64_t v38 = a3[9];
  uint64_t v39 = (uint64_t)a1 + v38;
  uint64_t v40 = (uint64_t)a2 + v38;
  *((unsigned char *)a1 + v38) = *((unsigned char *)a2 + v38);
  *(uint64_t *)((char *)a1 + v38 + 8) = *(uint64_t *)((char *)a2 + v38 + 8);
  *(uint64_t *)((char *)a1 + v38 + 16) = *(uint64_t *)((char *)a2 + v38 + 16);
  uint64_t v61 = (int *)type metadata accessor for MLRecommender.ModelParameters(0);
  uint64_t v41 = v61[7];
  uint64_t v59 = v39;
  uint64_t v42 = v41 + v39;
  uint64_t v60 = v40;
  uint64_t v43 = (const void *)(v40 + v41);
  uint64_t v44 = type metadata accessor for DataFrame(0);
  __dst = (void *)v42;
  LODWORD(v42) = __swift_getEnumTagSinglePayload(v42, 1, v44);
  int EnumTagSinglePayload = __swift_getEnumTagSinglePayload((uint64_t)v43, 1, v44);
  if (v42)
  {
    if (EnumTagSinglePayload)
    {
      size_t v46 = *(void *)(*(void *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for DataFrame?)
                                  - 8)
                      + 64);
      unint64_t v47 = __dst;
LABEL_13:
      memcpy(v47, v43, v46);
      goto LABEL_16;
    }
    (*(void (**)(void *, const void *, uint64_t))(*(void *)(v44 - 8) + 16))(__dst, v43, v44);
    __swift_storeEnumTagSinglePayload((uint64_t)__dst, 0, 1, v44);
  }
  else
  {
    uint64_t v48 = *(void *)(v44 - 8);
    if (EnumTagSinglePayload)
    {
      (*(void (**)(void *, uint64_t))(v48 + 8))(__dst, v44);
      size_t v46 = *(void *)(*(void *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for DataFrame?)
                                  - 8)
                      + 64);
      unint64_t v47 = __dst;
      goto LABEL_13;
    }
    (*(void (**)(void *, const void *, uint64_t))(v48 + 24))(__dst, v43, v44);
  }
LABEL_16:
  uint64_t v49 = v61[8];
  uint64_t v50 = v59 + v49;
  uint64_t v51 = v60 + v49;
  char v52 = *(unsigned char *)(v60 + v49 + 8);
  if (*(unsigned char *)(v59 + v49 + 8) == 0xFF)
  {
    if (v52 == -1)
    {
      *(unsigned char *)(v50 + 8) = *(unsigned char *)(v51 + 8);
      *(void *)uint64_t v50 = *(void *)v51;
    }
    else
    {
      uint64_t v56 = *(void *)v51;
      outlined copy of Result<_DataTable, Error>(v56, v52);
      *(void *)uint64_t v50 = v56;
      *(unsigned char *)(v50 + 8) = v52 & 1;
    }
  }
  else if (v52 == -1)
  {
    outlined destroy of MLDataTable(v59 + v49);
    *(void *)uint64_t v50 = *(void *)v51;
    *(unsigned char *)(v50 + 8) = *(unsigned char *)(v51 + 8);
  }
  else
  {
    uint64_t v53 = *(void *)v51;
    outlined copy of Result<_DataTable, Error>(v53, v52);
    uint64_t v54 = *(void *)v50;
    *(void *)uint64_t v50 = v53;
    int v55 = *(_DWORD *)(v50 + 8);
    *(unsigned char *)(v50 + 8) = v52 & 1;
    outlined consume of Result<_DataTable, Error>(v54, v55);
  }
  *(void *)(v59 + v61[9]) = *(void *)(v60 + v61[9]);
  *((unsigned char *)a1 + a3[10]) = *((unsigned char *)a2 + a3[10]);
  *((unsigned char *)a1 + a3[11]) = *((unsigned char *)a2 + a3[11]);
  return a1;
}

uint64_t outlined destroy of InteractionLookupTable(uint64_t a1)
{
  return a1;
}

char *initializeWithTake for MLRecommender(char *a1, char *a2, uint64_t a3)
{
  memcpy(a1, a2, 0xD0uLL);
  uint64_t v13 = a3;
  uint64_t v4 = *(int *)(a3 + 36);
  uint64_t v5 = &a1[v4];
  uint64_t v6 = &a2[v4];
  a1[v4] = a2[v4];
  *(_OWORD *)&a1[v4 + 8] = *(_OWORD *)&a2[v4 + 8];
  uint64_t v15 = (int *)type metadata accessor for MLRecommender.ModelParameters(0);
  uint64_t v7 = v15[7];
  uint64_t v14 = v5;
  __dst = &v5[v7];
  uint64_t v8 = &v6[v7];
  uint64_t v9 = type metadata accessor for DataFrame(0);
  if (__swift_getEnumTagSinglePayload((uint64_t)v8, 1, v9))
  {
    uint64_t v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for DataFrame?);
    memcpy(__dst, v8, *(void *)(*(void *)(v10 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v9 - 8) + 32))(__dst, v8, v9);
    __swift_storeEnumTagSinglePayload((uint64_t)__dst, 0, 1, v9);
  }
  uint64_t v11 = v15[8];
  v14[v11 + 8] = v6[v11 + 8];
  *(void *)&v14[v11] = *(void *)&v6[v11];
  *(void *)&v14[v15[9]] = *(void *)&v6[v15[9]];
  a1[*(int *)(v13 + 40)] = a2[*(int *)(v13 + 40)];
  a1[*(int *)(v13 + 44)] = a2[*(int *)(v13 + 44)];
  return a1;
}

uint64_t *assignWithTake for MLRecommender(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v5 = *a1;
  *a1 = *a2;
  swift_bridgeObjectRelease(v5);
  uint64_t v6 = a1[1];
  a1[1] = a2[1];
  swift_bridgeObjectRelease(v6);
  uint64_t v7 = a1[2];
  a1[2] = a2[2];
  swift_bridgeObjectRelease(v7);
  uint64_t v8 = a1[3];
  a1[3] = a2[3];
  swift_bridgeObjectRelease(v8);
  *((_OWORD *)a1 + 2) = *((_OWORD *)a2 + 2);
  *((unsigned char *)a1 + 48) = *((unsigned char *)a2 + 48);
  uint64_t v9 = a1[7];
  a1[7] = a2[7];
  swift_bridgeObjectRelease(v9);
  uint64_t v10 = a1[8];
  a1[8] = a2[8];
  swift_bridgeObjectRelease(v10);
  a1[9] = a2[9];
  swift_release();
  *((_OWORD *)a1 + 5) = *((_OWORD *)a2 + 5);
  uint64_t v11 = a1 + 12;
  uint64_t v12 = a2 + 12;
  uint64_t v13 = a1[13];
  if (v13)
  {
    uint64_t v14 = a2[13];
    if (v14)
    {
      a1[12] = a2[12];
      a1[13] = v14;
      swift_bridgeObjectRelease(v13);
      uint64_t v15 = a1[14];
      a1[14] = a2[14];
      swift_bridgeObjectRelease(v15);
    }
    else
    {
      outlined destroy of InteractionLookupTable((uint64_t)(a1 + 12));
      _OWORD *v11 = *v12;
      a1[14] = a2[14];
    }
  }
  else
  {
    a1[14] = a2[14];
    _OWORD *v11 = *v12;
  }
  uint64_t v16 = a1[15];
  a1[15] = a2[15];
  swift_bridgeObjectRelease(v16);
  uint64_t v17 = a1[16];
  a1[16] = a2[16];
  swift_bridgeObjectRelease(v17);
  *(_OWORD *)(a1 + 17) = *(_OWORD *)(a2 + 17);
  uint64_t v18 = (void *)a1[19];
  a1[19] = a2[19];

  a1[20] = a2[20];
  uint64_t v19 = a1[21];
  a1[21] = a2[21];
  swift_bridgeObjectRelease(v19);
  a1[22] = a2[22];
  uint64_t v20 = a1[23];
  a1[23] = a2[23];
  swift_bridgeObjectRelease(v20);
  a1[24] = a2[24];
  uint64_t v21 = a1[25];
  a1[25] = a2[25];
  swift_bridgeObjectRelease(v21);
  uint64_t v44 = a3;
  uint64_t v22 = *(int *)(a3 + 36);
  uint64_t v23 = (uint64_t)a1 + v22;
  uint64_t v24 = (uint64_t)a2 + v22;
  *((unsigned char *)a1 + v22) = *((unsigned char *)a2 + v22);
  *(uint64_t *)((char *)a1 + v22 + 8) = *(uint64_t *)((char *)a2 + v22 + 8);
  *(uint64_t *)((char *)a1 + v22 + 16) = *(uint64_t *)((char *)a2 + v22 + 16);
  uint64_t v42 = (int *)type metadata accessor for MLRecommender.ModelParameters(0);
  uint64_t v25 = v42[7];
  uint64_t v41 = v23;
  uint64_t v26 = v25 + v23;
  uint64_t v43 = v24;
  uint64_t v27 = (const void *)(v24 + v25);
  uint64_t v28 = type metadata accessor for DataFrame(0);
  __dst = (void *)v26;
  LODWORD(v26) = __swift_getEnumTagSinglePayload(v26, 1, v28);
  int EnumTagSinglePayload = __swift_getEnumTagSinglePayload((uint64_t)v27, 1, v28);
  if (v26)
  {
    if (EnumTagSinglePayload)
    {
      size_t v30 = *(void *)(*(void *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for DataFrame?)
                                  - 8)
                      + 64);
      uint64_t v31 = __dst;
LABEL_11:
      memcpy(v31, v27, v30);
      goto LABEL_14;
    }
    (*(void (**)(void *, const void *, uint64_t))(*(void *)(v28 - 8) + 32))(__dst, v27, v28);
    __swift_storeEnumTagSinglePayload((uint64_t)__dst, 0, 1, v28);
  }
  else
  {
    uint64_t v32 = *(void *)(v28 - 8);
    if (EnumTagSinglePayload)
    {
      (*(void (**)(void *, uint64_t))(v32 + 8))(__dst, v28);
      size_t v30 = *(void *)(*(void *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for DataFrame?)
                                  - 8)
                      + 64);
      uint64_t v31 = __dst;
      goto LABEL_11;
    }
    (*(void (**)(void *, const void *, uint64_t))(v32 + 40))(__dst, v27, v28);
  }
LABEL_14:
  uint64_t v33 = v42[8];
  uint64_t v34 = v41 + v33;
  uint64_t v35 = v43;
  uint64_t v36 = v43 + v33;
  char v37 = *(unsigned char *)(v41 + v33 + 8);
  if (v37 == -1)
  {
    *(unsigned char *)(v34 + 8) = *(unsigned char *)(v36 + 8);
    *(void *)uint64_t v34 = *(void *)v36;
  }
  else
  {
    char v38 = *(unsigned char *)(v43 + v33 + 8);
    if (v38 == -1)
    {
      outlined destroy of MLDataTable(v34);
      *(void *)uint64_t v34 = *(void *)v36;
      *(unsigned char *)(v34 + 8) = *(unsigned char *)(v36 + 8);
    }
    else
    {
      uint64_t v39 = *(void *)v34;
      *(void *)uint64_t v34 = *(void *)v36;
      *(unsigned char *)(v34 + 8) = v38 & 1;
      outlined consume of Result<_DataTable, Error>(v39, v37 & 1);
    }
    uint64_t v35 = v43;
  }
  *(void *)(v41 + v42[9]) = *(void *)(v35 + v42[9]);
  *((unsigned char *)a1 + *(int *)(v44 + 40)) = *((unsigned char *)a2 + *(int *)(v44 + 40));
  *((unsigned char *)a1 + *(int *)(v44 + 44)) = *((unsigned char *)a2 + *(int *)(v44 + 44));
  return a1;
}

uint64_t getEnumTagSinglePayload for MLRecommender(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_C29CD);
}

uint64_t sub_C29CD(void *a1, unsigned int a2, uint64_t a3)
{
  if (a2 == 0x7FFFFFFF)
  {
    uint64_t result = 0;
    if ((*a1 & 0xFFFFFFFF00000001) == 0) {
      return (*a1 >> 1) + 1;
    }
  }
  else
  {
    uint64_t v5 = type metadata accessor for MLRecommender.ModelParameters(0);
    return __swift_getEnumTagSinglePayload((uint64_t)a1 + *(int *)(a3 + 36), a2, v5);
  }
  return result;
}

uint64_t storeEnumTagSinglePayload for MLRecommender(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_C2A45);
}

uint64_t sub_C2A45(void *a1, unsigned int a2, int a3, uint64_t a4)
{
  if (a3 == 0x7FFFFFFF)
  {
    *a1 = 2 * (a2 - 1);
  }
  else
  {
    uint64_t v5 = type metadata accessor for MLRecommender.ModelParameters(0);
    return __swift_storeEnumTagSinglePayload((uint64_t)a1 + *(int *)(a4 + 36), a2, a2, v5);
  }
  return result;
}

uint64_t type metadata completion function for MLRecommender(uint64_t a1)
{
  v3[0] = &unk_349038;
  v3[1] = (char *)&value witness table for Builtin.UnknownObject + 64;
  v3[2] = &unk_349050;
  v3[3] = &unk_349050;
  void v3[4] = &unk_349068;
  uint64_t result = type metadata accessor for MLRecommender.ModelParameters(319);
  if (v2 <= 0x3F)
  {
    void v3[5] = *(void *)(result - 8) + 64;
    v3[6] = &unk_349080;
    v3[7] = &unk_349080;
    swift_initStructMetadata(a1, 256, 8, v3, a1 + 16);
    return 0;
  }
  return result;
}

uint64_t dispatch thunk of MLIdentifier.identifierValue.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 8))();
}

void *outlined retain of RecommenderModel<MLRecommender.Identifier, MLRecommender.Identifier>(void *a1)
{
  uint64_t v1 = a1[1];
  uint64_t v2 = a1[2];
  uint64_t v3 = a1[3];
  uint64_t v4 = a1[7];
  uint64_t v11 = a1[8];
  uint64_t v8 = a1[12];
  uint64_t v9 = a1[13];
  uint64_t v10 = a1[14];
  uint64_t v7 = a1[15];
  uint64_t v6 = a1[16];
  swift_bridgeObjectRetain(*a1);
  swift_bridgeObjectRetain(v1);
  swift_bridgeObjectRetain(v2);
  swift_bridgeObjectRetain(v3);
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRetain(v11);
  swift_retain();
  outlined copy of InteractionLookupTable?(v8, v9, v10);
  swift_bridgeObjectRetain(v7);
  swift_bridgeObjectRetain(v6);
  return a1;
}

uint64_t outlined copy of InteractionLookupTable?(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a2)
  {
    swift_bridgeObjectRetain(a2);
    return swift_bridgeObjectRetain(a3);
  }
  return result;
}

char specialized implicit closure #1 in RecommenderTrainingData.init(_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v21 = a2;
  uint64_t v20 = v2;
  uint64_t v3 = *(void *)a1;
  uint64_t v23 = *(void *)(a1 + 8);
  uint64_t v4 = *(void *)(a1 + 24);
  uint64_t v24 = *(void *)(a1 + 32);
  uint64_t v5 = *(void *)(a1 + 48);
  char v6 = *(unsigned char *)(a1 + 16);
  char v7 = *(unsigned char *)(a1 + 40);
  v12[0] = v3;
  v12[1] = v23;
  char v13 = v6;
  uint64_t v14 = v4;
  uint64_t v22 = v4;
  uint64_t v15 = v24;
  char v16 = v7;
  uint64_t v17 = v5;
  outlined copy of MLRecommender.Identifier(v3, v23, v6);
  uint64_t v8 = v4;
  uint64_t v9 = v24;
  outlined copy of MLRecommender.Identifier(v8, v24, v7);
  swift_getAtKeyPath(v12, a2);
  outlined consume of MLRecommender.Identifier(v3, v23, v6);
  outlined consume of MLRecommender.Identifier(v22, v9, v7);
  char result = v19;
  uint64_t v11 = v20;
  *uint64_t v20 = v18;
  *((unsigned char *)v11 + 16) = result;
  return result;
}

uint64_t specialized closure #2 in RecommenderModel.recommend(for:limit:allowedItems:disallowedItems:omittingObservedInteractions:)(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  char v6 = v4;
  uint64_t result = specialized closure #2 in RecommenderModel.recommend(for:limit:allowedItems:disallowedItems:omittingObservedInteractions:)(*a1, *(void *)a2, *(void *)(a2 + 8), *(unsigned char *)(a2 + 16), a3, a4);
  if (!v5)
  {
    v6[3] = v11;
    v6[2] = v10;
    v6[1] = v9;
    _OWORD *v6 = v8;
  }
  return result;
}

uint64_t sub_C2DD4()
{
  return swift_deallocObject(v0, 32, 7);
}

uint64_t partial apply for specialized thunk for @callee_guaranteed () -> (@owned [B])()
{
  uint64_t v2 = v0;
  uint64_t result = (*(uint64_t (**)(void))(v1 + 16))();
  uint64_t *v2 = result;
  return result;
}

uint64_t sub_C2E11()
{
  return swift_deallocObject(v0, 32, 7);
}

uint64_t sub_C2E3C()
{
  return swift_deallocObject(v0, 32, 7);
}

void *outlined retain of RecommenderTrainingData<MLRecommender.Identifier, MLRecommender.Identifier>(void *a1)
{
  uint64_t v1 = a1[1];
  uint64_t v2 = a1[2];
  uint64_t v3 = a1[3];
  uint64_t v4 = a1[7];
  uint64_t v7 = a1[8];
  uint64_t v6 = a1[9];
  swift_bridgeObjectRetain(*a1);
  swift_bridgeObjectRetain(v1);
  swift_bridgeObjectRetain(v2);
  swift_bridgeObjectRetain(v3);
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRetain(v7);
  swift_retain(v6);
  return a1;
}

uint64_t partial apply for specialized closure #2 in RecommenderModel.recommend(for:limit:allowedItems:disallowedItems:omittingObservedInteractions:)(uint64_t *a1)
{
  return specialized closure #2 in RecommenderModel.recommend(for:limit:allowedItems:disallowedItems:omittingObservedInteractions:)(a1, v1[2], v1[3], v1[4]);
}

void *outlined retain of SparseMatrix<Double>.MajorCollection(void *a1)
{
  uint64_t v1 = a1[4];
  uint64_t v2 = a1[5];
  swift_bridgeObjectRetain(a1[3]);
  swift_bridgeObjectRetain(v1);
  swift_retain(v2);
  return a1;
}

uint64_t *outlined release of RecommenderTrainingData<MLRecommender.Identifier, MLRecommender.Identifier>(uint64_t *a1)
{
  uint64_t v6 = *a1;
  uint64_t v7 = a1[1];
  uint64_t v1 = a1[2];
  uint64_t v2 = a1[3];
  uint64_t v3 = a1[7];
  uint64_t v4 = a1[8];
  swift_release(a1[9]);
  swift_bridgeObjectRelease(v4);
  swift_bridgeObjectRelease(v3);
  swift_bridgeObjectRelease(v2);
  swift_bridgeObjectRelease(v1);
  swift_bridgeObjectRelease(v7);
  swift_bridgeObjectRelease(v6);
  return a1;
}

uint64_t sub_C2FBF()
{
  return swift_deallocObject(v0, 32, 7);
}

void *outlined retain of [Int](void *a1)
{
  return a1;
}

void *outlined retain of ContiguousArray<Double>(void *a1)
{
  return a1;
}

void *outlined release of SparseMatrix<Double>.MajorCollection(void *a1)
{
  uint64_t v1 = a1[3];
  uint64_t v2 = a1[4];
  swift_release(a1[5]);
  swift_bridgeObjectRelease(v2);
  swift_bridgeObjectRelease(v1);
  return a1;
}

char partial apply for specialized implicit closure #1 in RecommenderTrainingData.init(_:)(uint64_t a1)
{
  return specialized implicit closure #1 in RecommenderTrainingData.init(_:)(a1, v1);
}

void *partial apply for closure #3 in static MLRecommender.extractNearestItems(itemColumn:parameters:)(uint64_t a1)
{
  return closure #3 in static MLRecommender.extractNearestItems(itemColumn:parameters:)(a1);
}

void *partial apply for closure #1 in static MLRecommender.extractNearestItems(itemColumn:parameters:)(void *a1)
{
  return closure #1 in static MLRecommender.extractNearestItems(itemColumn:parameters:)(a1);
}

uint64_t thunk for @callee_guaranteed () -> (@owned [B])specialized partial apply()
{
  return partial apply for specialized thunk for @callee_guaranteed () -> (@owned [B])();
}

uint64_t MLRecommender.SimilarityType.debugDescription.getter()
{
  return MLRecommender.SimilarityType.description.getter();
}

uint64_t MLShapedArray<>.init(shape:nestedArray:)(uint64_t a1, uint64_t a2)
{
  return MLShapedArray<>.init(shape:nestedArray:)(a1, a2, &demangling cache variable for type metadata for [Any]);
}

{
  return MLShapedArray<>.init(shape:nestedArray:)(a1, a2, &demangling cache variable for type metadata for [Any?]);
}

uint64_t MLShapedArray<>.fillNested(partialIndex:partialShape:element:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unint64_t a5, uint64_t a6)
{
  uint64_t v56 = v7;
  long long v9 = (char *)a1;
  if (a5 >> 1 == a4)
  {
    outlined init with copy of Any?(a6, (uint64_t)&v53);
    if (v54)
    {
      if (swift_dynamicCast(v55, &v53, (char *)&type metadata for Any + 8, &type metadata for Double, 6))
      {
        *(void *)&long long v53 = *(void *)&v55[0];
        *(void *)&v55[0] = a1;
        swift_bridgeObjectRetain(a1);
        uint64_t v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for MLShapedArray<Double>);
        uint64_t v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [Int]);
        uint64_t v12 = lazy protocol witness table accessor for type FullyConnectedNetworkClassifier<Float, String> and conformance FullyConnectedNetworkClassifier<A, B>(&lazy protocol witness table cache variable for type [Int] and conformance [A], &demangling cache variable for type metadata for [Int], (uint64_t)&protocol conformance descriptor for [A]);
        return MLShapedArray.subscript.setter(&v53, v55, v10, v11, v12);
      }
    }
    else
    {
      outlined destroy of Any?((uint64_t)&v53);
    }
    uint64_t v28 = lazy protocol witness table accessor for type MLCreateError and conformance MLCreateError();
    swift_allocError(&type metadata for MLCreateError, v28, 0, 0);
    *(void *)uint64_t v29 = 0xD000000000000035;
    *(void *)(v29 + 8) = "Expected a nested array with " + 0x8000000000000000;
    *(_OWORD *)(v29 + 16) = 0;
    *(_OWORD *)(v29 + 32) = 0;
    *(unsigned char *)(v29 + 48) = 0;
    return swift_willThrow(&type metadata for MLCreateError, v28, v29, v30, v31, v32);
  }
  if ((uint64_t)(a5 >> 1) <= a4) {
    BUG();
  }
  uint64_t v61 = a2;
  unint64_t v62 = a5;
  *(void *)&long long v59 = v6;
  uint64_t v63 = a3;
  uint64_t v64 = *(void *)(a3 + 8 * a4);
  outlined init with copy of Any?(a6, (uint64_t)&v53);
  if (!v54)
  {
    outlined destroy of Any?((uint64_t)&v53);
    goto LABEL_27;
  }
  uint64_t v15 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [Any]);
  if (!swift_dynamicCast(v55, &v53, (char *)&type metadata for Any + 8, v15, 6)) {
    goto LABEL_27;
  }
  if (*(void *)(*(void *)&v55[0] + 16) != v64)
  {
    swift_bridgeObjectRelease(v55[0]);
LABEL_27:
    outlined init with copy of Any?(a6, (uint64_t)&v53);
    if (v54)
    {
      uint64_t v33 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [Any?]);
      if (swift_dynamicCast(v55, &v53, (char *)&type metadata for Any + 8, v33, 6))
      {
        uint64_t v34 = *(void *)&v55[0];
        if (*(void *)(*(void *)&v55[0] + 16) == v64)
        {
          uint64_t v35 = v61;
          swift_unknownObjectRetain(v61);
          unint64_t v62 = specialized Collection.dropFirst(_:)(1, v35, v63, a4, v62);
          uint64_t v60 = v36;
          uint64_t v63 = v37;
          uint64_t v61 = v38;
          swift_bridgeObjectRetain(a1);
          if (!swift_isUniquelyReferenced_nonNull_native(a1)) {
            long long v9 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(void *)(a1 + 16) + 1, 1, a1);
          }
          unint64_t v39 = *((void *)v9 + 2);
          if (*((void *)v9 + 3) >> 1 <= v39) {
            long long v9 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(*((void *)v9 + 3) >= 2uLL, v39 + 1, 1, (uint64_t)v9);
          }
          *((void *)v9 + 2) = v39 + 1;
          *(void *)&v9[8 * v39 + 32] = 0;
          uint64_t v57 = *(void *)(v34 + 16);
          if (v57)
          {
            uint64_t v40 = v34 + 32;
            unint64_t v41 = 0;
            uint64_t v58 = v34;
            while (1)
            {
              if (v41 >= *(void *)(v34 + 16)) {
                BUG();
              }
              *(void *)&long long v53 = v41;
              uint64_t v64 = v40;
              outlined init with copy of Any?(v40, (uint64_t)&v53 + 8);
              outlined init with take of Any?((uint64_t)&v53 + 8, (uint64_t)v55);
              unint64_t v42 = *((void *)v9 + 2);
              if (!swift_isUniquelyReferenced_nonNull_native(v9)) {
                long long v9 = specialized _ArrayBuffer._consumeAndCreateNew()((uint64_t)v9);
              }
              if (!v42) {
                BUG();
              }
              if (v42 > *((void *)v9 + 2)) {
                BUG();
              }
              *(void *)&v9[8 * v42 + 24] = v41;
              swift_bridgeObjectRetain((_BYTE)v9);
              uint64_t v43 = v59;
              MLShapedArray<>.fillNested(partialIndex:partialShape:element:)(v9, v62, v60, v63, v61, v55);
              *(void *)&long long v59 = v43;
              if (v43) {
                break;
              }
              ++v41;
              outlined destroy of Any?((uint64_t)v55);
              swift_bridgeObjectRelease((_BYTE)v9);
              uint64_t v40 = v64 + 32;
              uint64_t v34 = v58;
              if (v57 == v41) {
                goto LABEL_49;
              }
            }
            swift_unknownObjectRelease(v62);
            swift_bridgeObjectRelease((_BYTE)v9);
            outlined destroy of Any?((uint64_t)v55);
            swift_bridgeObjectRelease((_BYTE)v9);
            char v50 = v58;
            return swift_bridgeObjectRelease(v50);
          }
LABEL_49:
          swift_bridgeObjectRelease((_BYTE)v9);
          swift_bridgeObjectRelease(v34);
          uint64_t v48 = v62;
          return swift_unknownObjectRelease(v48);
        }
        swift_bridgeObjectRelease(v55[0]);
      }
    }
    else
    {
      outlined destroy of Any?((uint64_t)&v53);
    }
    *(void *)&long long v53 = 0;
    *((void *)&v53 + 1) = 0xE000000000000000;
    _StringGuts.grow(_:)(41);
    swift_bridgeObjectRelease(BYTE8(v53));
    *(void *)&long long v53 = 0xD00000000000001DLL;
    *((void *)&v53 + 1) = "ts of type Int or String." + 0x8000000000000000;
    *(void *)&v55[0] = v64;
    v44._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter(&type metadata for Int, &protocol witness table for Int);
    char object = (char)v44._object;
    String.append(_:)(v44);
    swift_bridgeObjectRelease(object);
    v46._uint64_t countAndFlagsBits = 0x746E656D656C6520;
    v46._char object = (void *)0xEA00000000002E73;
    String.append(_:)(v46);
    long long v59 = v53;
    uint64_t v28 = lazy protocol witness table accessor for type MLCreateError and conformance MLCreateError();
    swift_allocError(&type metadata for MLCreateError, v28, 0, 0);
    *(_OWORD *)uint64_t v29 = v59;
    *(_OWORD *)(v29 + 16) = 0;
    *(_OWORD *)(v29 + 32) = 0;
    *(unsigned char *)(v29 + 48) = 0;
    return swift_willThrow(&type metadata for MLCreateError, v28, v29, v30, v31, v32);
  }
  uint64_t v60 = *(void *)&v55[0];
  uint64_t v16 = v61;
  swift_unknownObjectRetain(v61);
  uint64_t v63 = specialized Collection.dropFirst(_:)(1, v16, v63, a4, v62);
  uint64_t v61 = v17;
  uint64_t v57 = v18;
  uint64_t v58 = v19;
  swift_bridgeObjectRetain(a1);
  if (!swift_isUniquelyReferenced_nonNull_native(a1)) {
    long long v9 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(void *)(a1 + 16) + 1, 1, a1);
  }
  unint64_t v20 = *((void *)v9 + 2);
  if (*((void *)v9 + 3) >> 1 <= v20) {
    long long v9 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(*((void *)v9 + 3) >= 2uLL, v20 + 1, 1, (uint64_t)v9);
  }
  uint64_t v21 = v60;
  *((void *)v9 + 2) = v20 + 1;
  uint64_t v64 = (uint64_t)v9;
  *(void *)&v9[8 * v20 + 32] = 0;
  uint64_t v52 = *(void *)(v21 + 16);
  if (!v52)
  {
LABEL_48:
    char v47 = v21;
    swift_bridgeObjectRelease(v64);
    swift_bridgeObjectRelease(v47);
    uint64_t v48 = v63;
    return swift_unknownObjectRelease(v48);
  }
  uint64_t v22 = v21 + 32;
  unint64_t v23 = 0;
  while (1)
  {
    if (v23 >= *(void *)(v21 + 16)) {
      BUG();
    }
    unint64_t v24 = v23;
    *(void *)&long long v53 = v23;
    unint64_t v62 = v22;
    outlined init with copy of Any(v22, (uint64_t)&v53 + 8);
    outlined init with take of Any((long long *)((char *)&v53 + 8), v55);
    uint64_t v25 = (char *)v64;
    unint64_t v26 = *(void *)(v64 + 16);
    if (!swift_isUniquelyReferenced_nonNull_native(v64)) {
      uint64_t v25 = specialized _ArrayBuffer._consumeAndCreateNew()((uint64_t)v25);
    }
    if (!v26) {
      BUG();
    }
    if (v26 > *((void *)v25 + 2)) {
      BUG();
    }
    *(void *)&v25[8 * v26 + 24] = v24;
    outlined init with copy of Any((uint64_t)v55, (uint64_t)v51);
    swift_bridgeObjectRetain((_BYTE)v25);
    uint64_t v64 = (uint64_t)v25;
    uint64_t v27 = v59;
    MLShapedArray<>.fillNested(partialIndex:partialShape:element:)(v25, v63, v61, v57, v58, v51);
    *(void *)&long long v59 = v27;
    if (v27) {
      break;
    }
    swift_bridgeObjectRelease(v64);
    outlined destroy of Any?((uint64_t)v51);
    __swift_destroy_boxed_opaque_existential_1Tm(v55);
    uint64_t v22 = v62 + 32;
    uint64_t v21 = v60;
    unint64_t v23 = v24 + 1;
    if (v52 == v24 + 1) {
      goto LABEL_48;
    }
  }
  swift_unknownObjectRelease(v63);
  char v49 = v64;
  swift_bridgeObjectRelease(v64);
  outlined destroy of Any?((uint64_t)v51);
  __swift_destroy_boxed_opaque_existential_1Tm(v55);
  swift_bridgeObjectRelease(v49);
  char v50 = v60;
  return swift_bridgeObjectRelease(v50);
}

uint64_t MLShapedArray<>.init(shape:nestedArray:)(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v17 = a3;
  uint64_t v21 = a2;
  uint64_t v18 = v3;
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for MLShapedArray<Double>);
  v16[0] = 0;
  uint64_t v6 = lazy protocol witness table accessor for type FullyConnectedNetworkClassifier<Float, String> and conformance FullyConnectedNetworkClassifier<A, B>(&lazy protocol witness table cache variable for type MLShapedArray<Double> and conformance MLShapedArray<A>, &demangling cache variable for type metadata for MLShapedArray<Double>, (uint64_t)&protocol conformance descriptor for MLShapedArray<A>);
  swift_bridgeObjectRetain(a1);
  uint64_t v20 = v5;
  MLShapedArrayProtocol.init(repeating:shape:)(v16, a1, v5, v6);
  uint64_t v7 = specialized MutableCollection.subscript.getter(0, a1);
  uint64_t v9 = v8;
  uint64_t v11 = v10;
  unint64_t v19 = v12;
  swift_bridgeObjectRelease(a1);
  v16[3] = __swift_instantiateConcreteTypeFromMangledName(v17);
  v16[0] = v21;
  uint64_t v21 = v7;
  uint64_t v13 = v9;
  uint64_t v14 = v18;
  MLShapedArray<>.fillNested(partialIndex:partialShape:element:)((uint64_t)_swiftEmptyArrayStorage, v7, v13, v11, v19, (uint64_t)v16);
  if (v4) {
    (*(void (**)(uint64_t))(*(void *)(v20 - 8) + 8))(v14);
  }
  swift_unknownObjectRelease(v21);
  return outlined destroy of Any?((uint64_t)v16);
}

uint64_t specialized Collection.dropFirst(_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unint64_t a5)
{
  if (a1 < 0) {
    BUG();
  }
  uint64_t v8 = a5 >> 1;
  uint64_t v9 = specialized Array.index(_:offsetBy:limitedBy:)(a4, a1, a5 >> 1);
  if (v10) {
    uint64_t v9 = v8;
  }
  if (v8 < v9) {
    BUG();
  }
  uint64_t v11 = specialized ArraySlice.subscript.getter(v9, v8, a2, a3, a4, a5);
  swift_unknownObjectRelease(a2);
  return v11;
}

uint64_t specialized ArraySlice.subscript.getter(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, unint64_t a6)
{
  if (a1 < a5) {
    BUG();
  }
  if ((uint64_t)(a6 >> 1) < a1 || (uint64_t)(a6 >> 1) < a2) {
    BUG();
  }
  if (a2 < a5) {
    BUG();
  }
  if (a2 < 0) {
    BUG();
  }
  swift_unknownObjectRetain(a3);
  return a3;
}

uint64_t NeuralNetwork.Layer.InnerProductParameters.init(from:)(uint64_t a1)
{
  uint64_t v52 = v1;
  uint64_t v48 = type metadata accessor for NeuralNetwork.WeightParameters(0);
  int64_t v3 = *(void *)(*(void *)(v48 - 8) + 64);
  uint64_t v4 = alloca(v3);
  uint64_t v5 = alloca(v3);
  uint64_t v40 = &v39;
  int64_t v6 = *(void *)(*(void *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NeuralNetwork.WeightParameters?)
                             - 8)
                 + 64);
  uint64_t v7 = alloca(v6);
  uint64_t v8 = alloca(v6);
  char v49 = &v39;
  int64_t v9 = *(void *)(*(void *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Tensor?)
                             - 8)
                 + 64);
  char v10 = alloca(v9);
  uint64_t v11 = alloca(v9);
  unint64_t v42 = &v39;
  uint64_t v53 = type metadata accessor for TensorShape(0);
  uint64_t v51 = *(void *)(v53 - 8);
  int64_t v12 = *(void *)(v51 + 64);
  uint64_t v13 = alloca(v12);
  uint64_t v14 = alloca(v12);
  uint64_t v43 = &v39;
  uint64_t v15 = alloca(v12);
  uint64_t v16 = alloca(v12);
  char v47 = &v39;
  uint64_t v46 = type metadata accessor for Tensor(0);
  uint64_t v17 = *(void *)(v46 - 8);
  int64_t v18 = *(void *)(v17 + 64);
  unint64_t v19 = alloca(v18);
  uint64_t v20 = alloca(v18);
  Swift::String v44 = &v39;
  uint64_t v21 = alloca(v18);
  uint64_t v22 = alloca(v18);
  Dense.weight.getter();
  Tensor.shape.getter();
  char v50 = *(void (**)(uint64_t *, uint64_t))(v17 + 8);
  unint64_t v41 = &v39;
  uint64_t v23 = v46;
  v50(&v39, v46);
  unint64_t v24 = v47;
  uint64_t v45 = TensorShape.subscript.getter(1);
  uint64_t v51 = *(void *)(v51 + 8);
  ((void (*)(uint64_t *, uint64_t))v51)(v24, v53);
  uint64_t v25 = v44;
  Dense.weight.getter();
  unint64_t v26 = v43;
  Tensor.shape.getter();
  uint64_t v27 = v25;
  uint64_t v28 = a1;
  v50(v27, v23);
  uint64_t v29 = TensorShape.subscript.getter(0);
  ((void (*)(uint64_t *, uint64_t))v51)(v26, v53);
  uint64_t v30 = v29;
  uint64_t v31 = (uint64_t)v42;
  uint64_t v32 = v23;
  NeuralNetwork.Layer.InnerProductParameters.init(inputChannelCount:outputChannelCount:)(v45, v30);
  Dense.bias.getter();
  if (__swift_getEnumTagSinglePayload(v31, 1, v23) == 1)
  {
    outlined destroy of Tensor?(v31);
    NeuralNetwork.Layer.InnerProductParameters.hasBias.setter(0);
  }
  else
  {
    uint64_t v53 = Tensor.scalars<A>(as:)(&type metadata for Float, &type metadata for Float, &protocol witness table for Float);
    v50((uint64_t *)v31, v23);
    NeuralNetwork.Layer.InnerProductParameters.hasBias.setter(1);
    uint64_t v33 = (uint64_t)v49;
    NeuralNetwork.WeightParameters.init(_:updatable:)(v53, 0);
    __swift_storeEnumTagSinglePayload(v33, 0, 1, v48);
    NeuralNetwork.Layer.InnerProductParameters.bias.setter(v33);
  }
  uint64_t v34 = v41;
  Dense.weight.getter();
  uint64_t v35 = Tensor.scalars<A>(as:)(&type metadata for Float, &type metadata for Float, &protocol witness table for Float);
  v50(v34, v32);
  uint64_t v36 = v40;
  NeuralNetwork.WeightParameters.init(_:updatable:)(v35, 0);
  NeuralNetwork.Layer.InnerProductParameters.weights.setter(v36);
  uint64_t v37 = type metadata accessor for Dense(0);
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v37 - 8) + 8))(v28, v37);
}

uint64_t *initializeBufferWithCopyOfBuffer for MLLogisticRegressionClassifier.PersistentParameters(uint64_t *a1, uint64_t *a2, int *a3)
{
  int64_t v3 = a1;
  int v4 = *(_DWORD *)(*((void *)a3 - 1) + 80);
  if ((v4 & 0x20000) != 0)
  {
    uint64_t v10 = *a2;
    uint64_t *v3 = *a2;
    int64_t v3 = (uint64_t *)(v10 + ((v4 + 16) & ~v4));
    swift_retain();
  }
  else
  {
    uint64_t v6 = type metadata accessor for DataFrame(0);
    uint64_t v21 = *(void (**)(uint64_t *, uint64_t *, uint64_t))(*(void *)(v6 - 8) + 16);
    v21(a1, a2, v6);
    uint64_t v7 = a3[5];
    __dst = (char *)a1 + v7;
    uint64_t v8 = (char *)a2 + v7;
    if (__swift_getEnumTagSinglePayload((uint64_t)v8, 1, v6))
    {
      uint64_t v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for DataFrame?);
      memcpy(__dst, v8, *(void *)(*(void *)(v9 - 8) + 64));
    }
    else
    {
      v21((uint64_t *)__dst, (uint64_t *)v8, v6);
      __swift_storeEnumTagSinglePayload((uint64_t)__dst, 0, 1, v6);
    }
    uint64_t v11 = a3[6];
    *(uint64_t *)((char *)a1 + v11) = *(uint64_t *)((char *)a2 + v11);
    uint64_t v12 = *(uint64_t *)((char *)a2 + v11 + 8);
    *(uint64_t *)((char *)v3 + v11 + 8) = v12;
    uint64_t v13 = a3[7];
    uint64_t v14 = *(uint64_t *)((char *)a2 + v13);
    *(uint64_t *)((char *)v3 + v13) = v14;
    uint64_t v15 = a3[8];
    __dsta = (char *)v3 + v15;
    uint64_t v16 = (long long *)((char *)a2 + v15 + 8);
    uint64_t v17 = (char *)a2 + v15;
    uint64_t v22 = (_OWORD *)((char *)v3 + v15 + 8);
    *(uint64_t *)((char *)v3 + v15) = *(uint64_t *)((char *)a2 + v15);
    uint64_t v18 = *(uint64_t *)((char *)a2 + v15 + 32);
    swift_bridgeObjectRetain(v12);
    swift_bridgeObjectRetain(v14);
    if (v18)
    {
      *((void *)__dsta + 4) = v18;
      (**(void (***)(_OWORD *, long long *, uint64_t))(v18 - 8))(v22, v16, v18);
    }
    else
    {
      long long v19 = *v16;
      v22[1] = v16[1];
      *uint64_t v22 = v19;
    }
    *(_OWORD *)(__dsta + 40) = *(_OWORD *)(v17 + 40);
    *(_OWORD *)(__dsta + 56) = *(_OWORD *)(v17 + 56);
    __dsta[72] = v17[72];
  }
  return v3;
}

uint64_t destroy for MLLogisticRegressionClassifier.PersistentParameters(uint64_t a1, int *a2)
{
  uint64_t v2 = type metadata accessor for DataFrame(0);
  int64_t v3 = *(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8);
  v3(a1, v2);
  uint64_t v4 = a1 + a2[5];
  if (!__swift_getEnumTagSinglePayload(v4, 1, v2)) {
    v3(v4, v2);
  }
  swift_bridgeObjectRelease(*(void *)(a1 + a2[6] + 8));
  swift_bridgeObjectRelease(*(void *)(a1 + a2[7]));
  uint64_t result = a2[8];
  if (*(void *)(a1 + result + 32)) {
    return __swift_destroy_boxed_opaque_existential_1Tm((void *)(result + a1 + 8));
  }
  return result;
}

char *initializeWithCopy for MLLogisticRegressionClassifier.PersistentParameters(char *a1, char *a2, int *a3)
{
  uint64_t v4 = type metadata accessor for DataFrame(0);
  uint64_t v21 = *(void (**)(void *, const void *, uint64_t))(*(void *)(v4 - 8) + 16);
  v21(a1, a2, v4);
  uint64_t v5 = a3[5];
  uint64_t v6 = &a1[v5];
  uint64_t v7 = &a2[v5];
  if (__swift_getEnumTagSinglePayload((uint64_t)v7, 1, v4))
  {
    uint64_t v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for DataFrame?);
    memcpy(v6, v7, *(void *)(*(void *)(v8 - 8) + 64));
  }
  else
  {
    v21(v6, v7, v4);
    __swift_storeEnumTagSinglePayload((uint64_t)v6, 0, 1, v4);
  }
  uint64_t v9 = a3[6];
  *(void *)&a1[v9] = *(void *)&a2[v9];
  uint64_t v10 = *(void *)&a2[v9 + 8];
  *(void *)&a1[v9 + 8] = v10;
  uint64_t v11 = a3[7];
  uint64_t v12 = *(void *)&a2[v11];
  *(void *)&a1[v11] = v12;
  uint64_t v13 = a3[8];
  uint64_t v22 = &a1[v13];
  uint64_t v14 = (long long *)&a2[v13 + 8];
  uint64_t v15 = &a2[v13];
  uint64_t v16 = &a1[v13 + 8];
  *(void *)&a1[v13] = *(void *)&a2[v13];
  uint64_t v17 = *(void *)&a2[v13 + 32];
  swift_bridgeObjectRetain(v10);
  swift_bridgeObjectRetain(v12);
  if (v17)
  {
    *((void *)v22 + 4) = v17;
    (**(void (***)(char *, long long *, uint64_t))(v17 - 8))(v16, v14, v17);
  }
  else
  {
    long long v18 = *v14;
    *((_OWORD *)v16 + 1) = v14[1];
    *(_OWORD *)uint64_t v16 = v18;
  }
  *(_OWORD *)(v22 + 40) = *(_OWORD *)(v15 + 40);
  *(_OWORD *)(v22 + 56) = *(_OWORD *)(v15 + 56);
  v22[72] = v15[72];
  return a1;
}

uint64_t assignWithCopy for MLLogisticRegressionClassifier.PersistentParameters(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v5 = type metadata accessor for DataFrame(0);
  uint64_t v28 = *(void *)(v5 - 8);
  uint64_t v27 = *(void (**)(uint64_t, uint64_t, uint64_t))(v28 + 24);
  v27(a1, a2, v5);
  unint64_t v26 = a3;
  uint64_t v6 = a3[5];
  uint64_t v7 = (void *)(a1 + v6);
  uint64_t v8 = (const void *)(a2 + v6);
  LODWORD(a3) = __swift_getEnumTagSinglePayload((uint64_t)v7, 1, v5);
  int EnumTagSinglePayload = __swift_getEnumTagSinglePayload((uint64_t)v8, 1, v5);
  if (a3)
  {
    if (EnumTagSinglePayload)
    {
      size_t v11 = *(void *)(*(void *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for DataFrame?)
                                  - 8)
                      + 64);
LABEL_6:
      memcpy(v7, v8, v11);
      goto LABEL_9;
    }
    (*(void (**)(void *, const void *, uint64_t))(v28 + 16))(v7, v8, v5);
    __swift_storeEnumTagSinglePayload((uint64_t)v7, 0, 1, v5);
  }
  else
  {
    if (EnumTagSinglePayload)
    {
      (*(void (**)(void *, uint64_t, uint64_t, void (*)(uint64_t, uint64_t, uint64_t)))(v28 + 8))(v7, v5, v10, v27);
      size_t v11 = *(void *)(*(void *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for DataFrame?)
                                  - 8)
                      + 64);
      goto LABEL_6;
    }
    v27((uint64_t)v7, (uint64_t)v8, v5);
  }
LABEL_9:
  uint64_t v12 = v26[6];
  *(void *)(a1 + v12) = *(void *)(a2 + v12);
  uint64_t v13 = *(void *)(a2 + v12 + 8);
  uint64_t v14 = *(void *)(a1 + v12 + 8);
  *(void *)(a1 + v12 + 8) = v13;
  swift_bridgeObjectRetain(v13);
  swift_bridgeObjectRelease(v14);
  uint64_t v15 = v26[7];
  uint64_t v16 = *(void *)(a2 + v15);
  uint64_t v17 = *(void *)(a1 + v15);
  *(void *)(a1 + v15) = v16;
  swift_bridgeObjectRetain(v16);
  swift_bridgeObjectRelease(v17);
  uint64_t v18 = v26[8];
  uint64_t v19 = a1 + v18;
  uint64_t v20 = a2 + v18 + 8;
  uint64_t v21 = v18 + a2;
  uint64_t v22 = (_OWORD *)(a1 + v18 + 8);
  *(void *)(a1 + v18) = *(void *)(a2 + v18);
  uint64_t v23 = *(void *)(a2 + v18 + 32);
  if (!*(void *)(a1 + v18 + 32))
  {
    if (v23)
    {
      *(void *)(v19 + 32) = v23;
      (**(void (***)(_OWORD *, uint64_t))(v23 - 8))(v22, v20);
      goto LABEL_16;
    }
LABEL_15:
    long long v24 = *(_OWORD *)v20;
    v22[1] = *(_OWORD *)(v20 + 16);
    *uint64_t v22 = v24;
    goto LABEL_16;
  }
  if (!v23)
  {
    __swift_destroy_boxed_opaque_existential_1Tm((void *)(a1 + v18 + 8));
    goto LABEL_15;
  }
  __swift_assign_boxed_opaque_existential_0((uint64_t *)(a1 + v18 + 8), (uint64_t *)v20);
LABEL_16:
  *(void *)(v19 + 40) = *(void *)(v21 + 40);
  *(void *)(v19 + 48) = *(void *)(v21 + 48);
  *(void *)(v19 + 56) = *(void *)(v21 + 56);
  *(void *)(v19 + 64) = *(void *)(v21 + 64);
  *(unsigned char *)(v19 + 72) = *(unsigned char *)(v21 + 72);
  return a1;
}

char *initializeWithTake for MLLogisticRegressionClassifier.PersistentParameters(char *a1, char *a2, int *a3)
{
  uint64_t v4 = type metadata accessor for DataFrame(0);
  uint64_t v9 = *(void (**)(void *, const void *, uint64_t))(*(void *)(v4 - 8) + 32);
  v9(a1, a2, v4);
  uint64_t v5 = a3[5];
  __dst = &a1[v5];
  uint64_t v6 = &a2[v5];
  if (__swift_getEnumTagSinglePayload((uint64_t)v6, 1, v4))
  {
    uint64_t v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for DataFrame?);
    memcpy(__dst, v6, *(void *)(*(void *)(v7 - 8) + 64));
  }
  else
  {
    v9(__dst, v6, v4);
    __swift_storeEnumTagSinglePayload((uint64_t)__dst, 0, 1, v4);
  }
  *(_OWORD *)&a1[a3[6]] = *(_OWORD *)&a2[a3[6]];
  *(void *)&a1[a3[7]] = *(void *)&a2[a3[7]];
  qmemcpy(&a1[a3[8]], &a2[a3[8]], 0x49uLL);
  return a1;
}

uint64_t assignWithTake for MLLogisticRegressionClassifier.PersistentParameters(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v5 = type metadata accessor for DataFrame(0);
  uint64_t v24 = *(void *)(v5 - 8);
  uint64_t v23 = *(void (**)(uint64_t, uint64_t, uint64_t))(v24 + 40);
  v23(a1, a2, v5);
  uint64_t v22 = a3;
  uint64_t v6 = a3[5];
  uint64_t v7 = (void *)(a1 + v6);
  uint64_t v8 = (const void *)(a2 + v6);
  LODWORD(a3) = __swift_getEnumTagSinglePayload((uint64_t)v7, 1, v5);
  int EnumTagSinglePayload = __swift_getEnumTagSinglePayload((uint64_t)v8, 1, v5);
  if (a3)
  {
    if (EnumTagSinglePayload)
    {
      size_t v11 = *(void *)(*(void *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for DataFrame?)
                                  - 8)
                      + 64);
LABEL_6:
      memcpy(v7, v8, v11);
      goto LABEL_9;
    }
    (*(void (**)(void *, const void *, uint64_t))(v24 + 32))(v7, v8, v5);
    __swift_storeEnumTagSinglePayload((uint64_t)v7, 0, 1, v5);
  }
  else
  {
    if (EnumTagSinglePayload)
    {
      (*(void (**)(void *, uint64_t, uint64_t, void (*)(uint64_t, uint64_t, uint64_t)))(v24 + 8))(v7, v5, v10, v23);
      size_t v11 = *(void *)(*(void *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for DataFrame?)
                                  - 8)
                      + 64);
      goto LABEL_6;
    }
    v23((uint64_t)v7, (uint64_t)v8, v5);
  }
LABEL_9:
  uint64_t v12 = v22[6];
  *(void *)(a1 + v12) = *(void *)(a2 + v12);
  uint64_t v13 = *(void *)(a1 + v12 + 8);
  *(void *)(a1 + v12 + 8) = *(void *)(a2 + v12 + 8);
  swift_bridgeObjectRelease(v13);
  uint64_t v14 = v22[7];
  uint64_t v15 = *(void *)(a1 + v14);
  *(void *)(a1 + v14) = *(void *)(a2 + v14);
  swift_bridgeObjectRelease(v15);
  uint64_t v16 = v22[8];
  uint64_t v17 = a1 + v16;
  uint64_t v18 = v16 + a2;
  uint64_t v19 = (_OWORD *)(a1 + v16 + 8);
  *(void *)(a1 + v16) = *(void *)(a2 + v16);
  if (*(void *)(a1 + v16 + 32)) {
    __swift_destroy_boxed_opaque_existential_1Tm((void *)(a1 + v16 + 8));
  }
  long long v20 = *(_OWORD *)(v18 + 8);
  v19[1] = *(_OWORD *)(v18 + 24);
  _OWORD *v19 = v20;
  *(_OWORD *)(v17 + 40) = *(_OWORD *)(v18 + 40);
  *(_OWORD *)(v17 + 56) = *(_OWORD *)(v18 + 56);
  *(unsigned char *)(v17 + 72) = *(unsigned char *)(v18 + 72);
  return a1;
}

uint64_t getEnumTagSinglePayload for MLLogisticRegressionClassifier.PersistentParameters(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_C45BD);
}

uint64_t sub_C45BD(uint64_t a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4 = a1;
  uint64_t v5 = type metadata accessor for DataFrame(0);
  if (*(_DWORD *)(*(void *)(v5 - 8) + 84) == a2) {
    return __swift_getEnumTagSinglePayload(v4, a2, v5);
  }
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for DataFrame?);
  if (*(_DWORD *)(*(void *)(v5 - 8) + 84) == a2)
  {
    uint64_t v4 = *(int *)(a3 + 20) + a1;
    return __swift_getEnumTagSinglePayload(v4, a2, v5);
  }
  uint64_t result = 0;
  if ((*(void *)(a1 + *(int *)(a3 + 24) + 8) & 0xFFFFFFFF00000001) == 0) {
    return (*(void *)(a1 + *(int *)(a3 + 24) + 8) >> 1) + 1;
  }
  return result;
}

uint64_t storeEnumTagSinglePayload for MLLogisticRegressionClassifier.PersistentParameters(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_C4651);
}

uint64_t sub_C4651(uint64_t a1, unsigned int a2, int a3, uint64_t a4)
{
  uint64_t v6 = a1;
  uint64_t v7 = type metadata accessor for DataFrame(0);
  if (*(_DWORD *)(*(void *)(v7 - 8) + 84) == a3) {
    return __swift_storeEnumTagSinglePayload(v6, a2, a2, v7);
  }
  uint64_t v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for DataFrame?);
  if (*(_DWORD *)(*(void *)(v7 - 8) + 84) == a3)
  {
    uint64_t v6 = *(int *)(a4 + 20) + a1;
    return __swift_storeEnumTagSinglePayload(v6, a2, a2, v7);
  }
  uint64_t result = *(int *)(a4 + 24);
  *(void *)(a1 + result + 8) = 2 * (a2 - 1);
  return result;
}

uint64_t type metadata accessor for MLLogisticRegressionClassifier.PersistentParameters(uint64_t a1)
{
  uint64_t result = type metadata singleton initialization cache for MLLogisticRegressionClassifier.PersistentParameters;
  if (!type metadata singleton initialization cache for MLLogisticRegressionClassifier.PersistentParameters) {
    return swift_getSingletonMetadata(a1, &nominal type descriptor for MLLogisticRegressionClassifier.PersistentParameters);
  }
  return result;
}

uint64_t type metadata completion function for MLLogisticRegressionClassifier.PersistentParameters(uint64_t a1)
{
  uint64_t result = type metadata accessor for DataFrame(319);
  if (v2 <= 0x3F)
  {
    v4[0] = *(void *)(result - 8) + 64;
    uint64_t result = type metadata accessor for DataFrame?(319);
    if (v3 <= 0x3F)
    {
      v4[1] = *(void *)(result - 8) + 64;
      v4[2] = &unk_349138;
      v4[3] = (char *)&value witness table for Builtin.BridgeObject + 64;
      v4[4] = &unk_349150;
      swift_initStructMetadata(a1, 256, 5, v4, a1 + 16);
      return 0;
    }
  }
  return result;
}

uint64_t _sSq3mapyqd_0_Sgqd_0_xqd__YKXEqd__YKs5ErrorRd__Ri_d_0_r0_lF11TabularData0D5FrameV_s5NeverO8CreateML30MLLogisticRegressionClassifierV15ModelParametersV010ValidationD0OTg503_s8g4ML30ijk13V20Persistentm48V16sessionDirectoryAE10Foundation3URLV_tKcfcAC05l5G0V14nd3O07c5N00N5E17VcAMmcfu_AmPcfu0_AOXMtTf1ncn_n(uint64_t a1)
{
  uint64_t v19 = v1;
  uint64_t v2 = type metadata accessor for DataFrame(0);
  uint64_t v17 = *(void *)(v2 - 8);
  int64_t v3 = *(void *)(v17 + 64);
  uint64_t v4 = alloca(v3);
  uint64_t v5 = alloca(v3);
  int64_t v6 = *(void *)(*(void *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for DataFrame?)
                             - 8)
                 + 64);
  uint64_t v7 = alloca(v6);
  uint64_t v8 = alloca(v6);
  outlined init with copy of DataFrame?(a1, (uint64_t)&v16);
  if (__swift_getEnumTagSinglePayload((uint64_t)&v16, 1, v2) == 1)
  {
    uint64_t v9 = type metadata accessor for MLLogisticRegressionClassifier.ModelParameters.ValidationData(0);
    uint64_t v10 = v19;
    uint64_t v11 = 1;
    uint64_t v12 = v9;
  }
  else
  {
    uint64_t v13 = v17;
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(v17 + 32))(&v16, &v16, v2);
    uint64_t v14 = v19;
    (*(void (**)(uint64_t, uint64_t *, uint64_t))(v13 + 16))(v19, &v16, v2);
    uint64_t v18 = type metadata accessor for MLLogisticRegressionClassifier.ModelParameters.ValidationData(0);
    swift_storeEnumTagMultiPayload(v14, v18, 2);
    (*(void (**)(uint64_t *, uint64_t))(v13 + 8))(&v16, v2);
    uint64_t v10 = v14;
    uint64_t v11 = 0;
    uint64_t v12 = v18;
  }
  return __swift_storeEnumTagSinglePayload(v10, v11, 1, v12);
}

NSURL *MLLogisticRegressionClassifier.PersistentParameters.init(sessionDirectory:)(uint64_t *a1)
{
  Swift::String v163 = v2;
  uint64_t v4 = v1;
  uint64_t v139 = type metadata accessor for CSVType(0);
  uint64_t v128 = *(void *)(v139 - 8);
  int64_t v5 = *(void *)(v128 + 64);
  int64_t v6 = alloca(v5);
  uint64_t v7 = alloca(v5);
  unint64_t v138 = &v126;
  int64_t v8 = *(void *)(*(void *)(type metadata accessor for CSVReadingOptions(0) - 8) + 64);
  uint64_t v9 = alloca(v8);
  uint64_t v10 = alloca(v8);
  uint64_t v127 = &v126;
  uint64_t v11 = alloca(v8);
  uint64_t v12 = alloca(v8);
  uint64_t v130 = &v126;
  int64_t v13 = *(void *)(*(void *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for MLLogisticRegressionClassifier.ModelParameters.ValidationData?)
                              - 8)
                  + 64);
  uint64_t v14 = alloca(v13);
  uint64_t v15 = alloca(v13);
  uint64_t v144 = &v126;
  int64_t v16 = *(void *)(*(void *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for DataFrame?)
                              - 8)
                  + 64);
  uint64_t v17 = alloca(v16);
  uint64_t v18 = alloca(v16);
  uint64_t v142 = &v126;
  uint64_t v19 = alloca(v16);
  long long v20 = alloca(v16);
  uint64_t v160 = &v126;
  uint64_t v21 = type metadata accessor for DataFrame(0);
  uint64_t v141 = *(void *)(v21 - 8);
  int64_t v22 = *(void *)(v141 + 64);
  uint64_t v23 = alloca(v22);
  uint64_t v24 = alloca(v22);
  uint64_t v140 = &v126;
  uint64_t v25 = alloca(v22);
  unint64_t v26 = alloca(v22);
  uint64_t v151 = &v126;
  uint64_t v150 = type metadata accessor for MLLogisticRegressionClassifier.ModelParameters.ValidationData(0);
  int64_t v27 = *(void *)(*(void *)(v150 - 8) + 64);
  uint64_t v28 = alloca(v27);
  uint64_t v29 = alloca(v27);
  uint64_t v145 = &v126;
  uint64_t v30 = alloca(v27);
  uint64_t v31 = alloca(v27);
  uint64_t v147 = &v126;
  uint64_t v32 = alloca(v27);
  uint64_t v33 = alloca(v27);
  uint64_t v154 = &v126;
  uint64_t v167 = type metadata accessor for URL(0);
  unint64_t v162 = *(void (**)(uint64_t *, uint64_t *, uint64_t))(v167 - 8);
  int64_t v34 = *((void *)v162 + 8);
  uint64_t v35 = alloca(v34);
  uint64_t v36 = alloca(v34);
  uint64_t v137 = &v126;
  uint64_t v37 = alloca(v34);
  uint64_t v38 = alloca(v34);
  uint64_t v143 = &v126;
  uint64_t v39 = alloca(v34);
  uint64_t v40 = alloca(v34);
  int v129 = &v126;
  unint64_t v41 = alloca(v34);
  unint64_t v42 = alloca(v34);
  double v146 = &v126;
  uint64_t v43 = alloca(v34);
  Swift::String v44 = alloca(v34);
  uint64_t v153 = &v126;
  uint64_t v45 = alloca(v34);
  uint64_t v46 = alloca(v34);
  uint64_t v149 = &v126;
  char v47 = alloca(v34);
  uint64_t v48 = alloca(v34);
  uint64_t v148 = type metadata accessor for MLLogisticRegressionClassifier.PersistentParameters(0);
  uint64_t v49 = *(int *)(v148 + 20);
  uint64_t v159 = v4;
  uint64_t v158 = (uint64_t)v4 + v49;
  uint64_t v152 = v21;
  __swift_storeEnumTagSinglePayload((uint64_t)v4 + v49, 1, 1, v21);
  URL.appendingPathComponent(_:)(0xD000000000000010, "ObjectDetectorMetrics." + 0x8000000000000000);
  char v50 = v163;
  uint64_t v51 = Data.init(contentsOf:options:)(&v126, 0);
  Swift::String v163 = v50;
  if (v50)
  {
    uint64_t v53 = (void (*)(uint64_t, uint64_t))*((void *)v162 + 1);
    uint64_t v54 = a1;
    uint64_t v55 = v167;
    v53((uint64_t)v54, v167);
    v53((uint64_t)&v126, v55);
    uint64_t v56 = v158;
LABEL_39:
    outlined destroy of Either<LogisticRegressionClassifier<Float, String>, FullyConnectedNetworkClassifier<Float, String>>(v56, &demangling cache variable for type metadata for DataFrame?);
    return __stack_chk_guard;
  }
  uint64_t v57 = v51;
  unint64_t v58 = v52;
  uint64_t v166 = a1;
  uint64_t v59 = v167;
  uint64_t v155 = (void (*)(uint64_t *, uint64_t))*((void *)v162 + 1);
  v155(&v126, v167);
  uint64_t v60 = objc_opt_self(NSPropertyListSerialization);
  v61.super.Class isa = Data._bridgeToObjectiveC()().super.isa;
  uint64_t v157 = v57;
  Class isa = v61.super.isa;
  unint64_t v156 = v58;
  v169[0] = 0;
  id v63 = [v60 propertyListWithData:v61.super.isa options:0 format:0 error:v169];
  id v64 = v63;

  id v65 = v169[0];
  if (!v64)
  {
    uint64_t v88 = v65;
    _convertNSErrorToError(_:)(v65);

    swift_willThrow(v88, "propertyListWithData:options:format:error:", v89, v90, v91, v92);
    outlined consume of Data._Representation(v157, v156);
    v155(v166, v59);
LABEL_38:
    uint64_t v56 = v158;
    goto LABEL_39;
  }
  _bridgeAnyObjectToAny(_:)(v64);
  swift_unknownObjectRelease(v64);
  outlined init with copy of Any((uint64_t)v171, (uint64_t)v169);
  uint64_t v66 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [String : Any]);
  if (!swift_dynamicCast(v168, v169, (char *)&type metadata for Any + 8, v66, 6))
  {
    uint64_t v93 = lazy protocol witness table accessor for type MLCreateError and conformance MLCreateError();
    swift_allocError(&type metadata for MLCreateError, v93, 0, 0);
    *(void *)uint64_t v94 = 0xD000000000000037;
    *(void *)(v94 + 8) = "parameters.plist" + 0x8000000000000000;
    *(_OWORD *)(v94 + 16) = 0;
    *(_OWORD *)(v94 + 32) = 0;
    *(unsigned char *)(v94 + 48) = 0;
    swift_willThrow(&type metadata for MLCreateError, v93, v94, v95, v96, v97);
    outlined consume of Data._Representation(v157, v156);
    uint64_t v98 = v166;
    uint64_t v99 = v167;
LABEL_37:
    v155(v98, v99);
    __swift_destroy_boxed_opaque_existential_1Tm(v171);
    goto LABEL_38;
  }
  uint64_t v67 = v168[0];
  specialized Dictionary.subscript.getter(0x746567726174, 0xE600000000000000, v168[0]);
  if (!v170) {
    goto LABEL_34;
  }
  if (!swift_dynamicCast(v168, v169, (char *)&type metadata for Any + 8, &type metadata for String, 6))
  {
LABEL_29:
    char v102 = v67;
LABEL_30:
    swift_bridgeObjectRelease(v102);
LABEL_36:
    uint64_t v104 = v166;
    uint64_t v105 = v167;
    uint64_t v106 = lazy protocol witness table accessor for type MLCreateError and conformance MLCreateError();
    swift_allocError(&type metadata for MLCreateError, v106, 0, 0);
    *(void *)uint64_t v107 = 0xD000000000000034;
    *(void *)(v107 + 8) = "ad training parameters." + 0x8000000000000000;
    *(_OWORD *)(v107 + 16) = 0;
    *(_OWORD *)(v107 + 32) = 0;
    *(unsigned char *)(v107 + 48) = 0;
    swift_willThrow(&type metadata for MLCreateError, v106, v107, v108, v109, v110);
    outlined consume of Data._Representation(v157, v156);
    uint64_t v98 = v104;
    uint64_t v99 = v105;
    goto LABEL_37;
  }
  uint64_t v131 = v168[0];
  uint64_t v68 = v168[1];
  specialized Dictionary.subscript.getter(0xD000000000000010, (uint64_t)("training parameters." + 0x8000000000000000), v67);
  if (!v170)
  {
    char v100 = v68;
LABEL_33:
    swift_bridgeObjectRelease(v100);
LABEL_34:
    char v103 = v67;
LABEL_35:
    swift_bridgeObjectRelease(v103);
    outlined destroy of Either<LogisticRegressionClassifier<Float, String>, FullyConnectedNetworkClassifier<Float, String>>((uint64_t)v169, &demangling cache variable for type metadata for Any?);
    goto LABEL_36;
  }
  uint64_t v165 = v68;
  uint64_t v69 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [String]);
  if (!swift_dynamicCast(v168, v169, (char *)&type metadata for Any + 8, v69, 6))
  {
LABEL_28:
    swift_bridgeObjectRelease(v165);
    goto LABEL_29;
  }
  uint64_t v70 = v168[0];
  specialized Dictionary.subscript.getter(0x617265744978616DLL, 0xED0000736E6F6974, v67);
  if (!v170)
  {
    char v101 = v70;
LABEL_32:
    swift_bridgeObjectRelease(v101);
    char v100 = v165;
    goto LABEL_33;
  }
  uint64_t v164 = v70;
  if (!swift_dynamicCast(v168, v169, (char *)&type metadata for Any + 8, &type metadata for Int, 6)) {
    goto LABEL_27;
  }
  uint64_t v132 = v168[0];
  specialized Dictionary.subscript.getter(0x746C616E6550316CLL, 0xE900000000000079, v67);
  if (!v170) {
    goto LABEL_31;
  }
  uint64_t v161 = v67;
  if (!swift_dynamicCast(v168, v169, (char *)&type metadata for Any + 8, &type metadata for Double, 6))goto LABEL_41; {
  uint64_t v133 = v168[0];
  }
  char v71 = v161;
  specialized Dictionary.subscript.getter(0x746C616E6550326CLL, 0xE900000000000079, v161);
  if (!v170)
  {
    swift_bridgeObjectRelease(v164);
    swift_bridgeObjectRelease(v165);
    char v103 = v71;
    goto LABEL_35;
  }
  if (!swift_dynamicCast(v168, v169, (char *)&type metadata for Any + 8, &type metadata for Double, 6))
  {
LABEL_41:
    swift_bridgeObjectRelease(v164);
    swift_bridgeObjectRelease(v165);
    char v102 = v161;
    goto LABEL_30;
  }
  uint64_t v134 = v168[0];
  uint64_t v67 = v161;
  specialized Dictionary.subscript.getter(0x657A695370657473, 0xE800000000000000, v161);
  if (!v170) {
    goto LABEL_31;
  }
  if (!swift_dynamicCast(v168, v169, (char *)&type metadata for Any + 8, &type metadata for Double, 6))
  {
LABEL_27:
    swift_bridgeObjectRelease(v164);
    goto LABEL_28;
  }
  uint64_t v135 = v168[0];
  specialized Dictionary.subscript.getter(0xD000000000000014, (uint64_t)("oating-point numbers." + 0x8000000000000000), v67);
  if (!v170)
  {
LABEL_31:
    char v101 = v164;
    goto LABEL_32;
  }
  if (!swift_dynamicCast(v168, v169, (char *)&type metadata for Any + 8, &type metadata for Double, 6))goto LABEL_27; {
  uint64_t v136 = v168[0];
  }
  specialized Dictionary.subscript.getter(0xD000000000000010, (uint64_t)("convergenceThreshold" + 0x8000000000000000), v67);
  swift_bridgeObjectRelease(v67);
  if (!v170)
  {
    swift_bridgeObjectRelease(v164);
    char v103 = v165;
    goto LABEL_35;
  }
  if (!swift_dynamicCast(v168, v169, (char *)&type metadata for Any + 8, &type metadata for Bool, 6))
  {
    swift_bridgeObjectRelease(v164);
    char v102 = v165;
    goto LABEL_30;
  }
  LOBYTE(v161) = v168[0];
  uint64_t v72 = v148;
  uint64_t v73 = *(int *)(v148 + 24);
  uint64_t v74 = v159;
  *(void *)((char *)v159 + v73) = v131;
  *(void *)((char *)v74 + v73 + 8) = v165;
  *(void *)((char *)v74 + *(int *)(v72 + 28)) = v164;
  uint64_t v75 = (uint64_t)v154;
  *(_OWORD *)uint64_t v154 = 0;
  *(_WORD *)(v75 + 16) = 256;
  uint64_t v76 = v150;
  swift_storeEnumTagMultiPayload(v75, v150, 0);
  uint64_t v77 = (uint64_t)v74 + *(int *)(v72 + 32) + 8;
  *(_OWORD *)(v77 + 16) = 0;
  *(_OWORD *)uint64_t v77 = 0;
  *(void *)(v77 - 8) = 10;
  *(__m128 *)(v77 + 32) = _mm_loadh_ps((const double *)&qword_349108);
  *(_OWORD *)(v77 + 48) = xmmword_349110;
  *(unsigned char *)(v77 + 64) = 1;
  uint64_t v78 = (uint64_t)v147;
  outlined init with copy of MLLogisticRegressionClassifier.ModelParameters.ValidationData(v75, (uint64_t)v147);
  uint64_t v170 = v76;
  boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1(v169);
  outlined init with take of MLLogisticRegressionClassifier.ModelParameters.ValidationData(v78, (uint64_t)boxed_opaque_existential_1);
  outlined assign with take of MLTrainingSession<MLImageClassifier>.Metadata((uint64_t)v169, v77, &demangling cache variable for type metadata for Any?);
  outlined destroy of MLLogisticRegressionClassifier.ModelParameters.ValidationData(v75);
  *(void *)(v77 - 8) = v132;
  *(void *)(v77 + 32) = v133;
  *(void *)(v77 + 40) = v134;
  *(void *)(v77 + 48) = v135;
  *(void *)(v77 + 56) = v136;
  uint64_t v147 = (uint64_t *)v77;
  *(unsigned char *)(v77 + 64) = v161;
  uint64_t v80 = v149;
  URL.appendingPathComponent(_:)(1635017060, 0xE400000000000000);
  URL.appendingPathComponent(_:)(0x69746164696C6176, 0xEE00617461446E6FLL);
  uint64_t v81 = v146;
  unint64_t v162 = (void (*)(uint64_t *, uint64_t *, uint64_t))*((void *)v162 + 2);
  v162(v146, v80, v167);
  uint64_t v82 = v163;
  DataFrame.init(contentsOfSFrameDirectory:columns:rows:)(v81, 0, 0, 0, 1);
  uint64_t v154 = v82;
  if (v82)
  {
    v162(v137, v149, v167);
    Swift::String v163 = specialized Dictionary.init(dictionaryLiteral:)((uint64_t)_swiftEmptyArrayStorage);
    uint64_t v160 = default argument 1 of CSVReadingOptions.init(hasHeaderRow:nilEncodings:trueEncodings:falseEncodings:floatingPointType:ignoresEmptyLines:usesQuoting:usesEscaping:delimiter:escapeCharacter:)();
    uint64_t v83 = specialized Set.init(_nonEmptyArrayLiteral:)((uint64_t)&outlined read-only object #0 of default argument 2 of CSVReadingOptions.init(hasHeaderRow:nilEncodings:trueEncodings:falseEncodings:floatingPointType:ignoresEmptyLines:usesQuoting:usesEscaping:delimiter:escapeCharacter:));
    uint64_t v84 = specialized Set.init(_nonEmptyArrayLiteral:)((uint64_t)&outlined read-only object #0 of default argument 3 of CSVReadingOptions.init(hasHeaderRow:nilEncodings:trueEncodings:falseEncodings:floatingPointType:ignoresEmptyLines:usesQuoting:usesEscaping:delimiter:escapeCharacter:));
    uint64_t v85 = *(uint64_t **)(v128 + 104);
    Swift::Int v86 = v138;
    LODWORD(v146) = enum case for CSVType.double(_:);
    uint64_t v151 = v85;
    ((void (*)(uint64_t *, void, uint64_t))v85)(v138, enum case for CSVType.double(_:), v139);
    Swift::UInt v87 = v127;
    CSVReadingOptions.init(hasHeaderRow:nilEncodings:trueEncodings:falseEncodings:floatingPointType:ignoresEmptyLines:usesQuoting:usesEscaping:delimiter:escapeCharacter:)(1, v160, v83, v84, v86, 1, 1, 0, 44, 0xE100000000000000, 92, 0xE100000000000000);
    DataFrame.init(contentsOfCSVFile:columns:rows:types:options:)(v137, 0, 0, 0, 1, v163, v87);
    Swift::String v163 = 0;
    (*(void (**)(void *, uint64_t *, uint64_t))(v141 + 32))(v159, v140, v152);
    v162(v143, v153, v167);
    unint64_t v162 = (void (*)(uint64_t *, uint64_t *, uint64_t))specialized Dictionary.init(dictionaryLiteral:)((uint64_t)_swiftEmptyArrayStorage);
    uint64_t v159 = default argument 1 of CSVReadingOptions.init(hasHeaderRow:nilEncodings:trueEncodings:falseEncodings:floatingPointType:ignoresEmptyLines:usesQuoting:usesEscaping:delimiter:escapeCharacter:)();
    uint64_t v148 = (uint64_t)specialized Set.init(_nonEmptyArrayLiteral:)((uint64_t)&outlined read-only object #0 of default argument 2 of CSVReadingOptions.init(hasHeaderRow:nilEncodings:trueEncodings:falseEncodings:floatingPointType:ignoresEmptyLines:usesQuoting:usesEscaping:delimiter:escapeCharacter:));
    Swift::UInt v115 = specialized Set.init(_nonEmptyArrayLiteral:)((uint64_t)&outlined read-only object #0 of default argument 3 of CSVReadingOptions.init(hasHeaderRow:nilEncodings:trueEncodings:falseEncodings:floatingPointType:ignoresEmptyLines:usesQuoting:usesEscaping:delimiter:escapeCharacter:));
    unint64_t v116 = v138;
    ((void (*)(uint64_t *, void, uint64_t))v151)(v138, v146, v139);
    unsigned int v117 = 1;
    unint64_t v118 = v130;
    CSVReadingOptions.init(hasHeaderRow:nilEncodings:trueEncodings:falseEncodings:floatingPointType:ignoresEmptyLines:usesQuoting:usesEscaping:delimiter:escapeCharacter:)(1, v159, v148, v115, v116, 1, 1, 0, 44, 0xE100000000000000, 92, 0xE100000000000000);
    unint64_t v119 = v163;
    DataFrame.init(contentsOfCSVFile:columns:rows:types:options:)(v143, 0, 0, 0, 1, v162, v118);
    if (v119) {
      swift_errorRelease(v119);
    }
    else {
      unsigned int v117 = 0;
    }
    swift_errorRelease(v154);
    uint64_t v120 = (uint64_t)v142;
    __swift_storeEnumTagSinglePayload((uint64_t)v142, v117, 1, v152);
    uint64_t v160 = (uint64_t *)v120;
  }
  else
  {
    (*(void (**)(void *, uint64_t *, uint64_t))(v141 + 32))(v159, v151, v152);
    char v112 = v129;
    v162(v129, v153, v167);
    unsigned int v113 = 1;
    uint64_t v114 = v154;
    DataFrame.init(contentsOfSFrameDirectory:columns:rows:)(v112, 0, 0, 0, 1);
    if (v114) {
      swift_errorRelease(v114);
    }
    else {
      unsigned int v113 = 0;
    }
    __swift_storeEnumTagSinglePayload((uint64_t)v160, v113, 1, v152);
  }
  uint64_t v121 = v158;
  outlined assign with take of MLTrainingSession<MLImageClassifier>.Metadata((uint64_t)v160, v158, &demangling cache variable for type metadata for DataFrame?);
  uint64_t v122 = (uint64_t)v144;
  _sSq3mapyqd_0_Sgqd_0_xqd__YKXEqd__YKs5ErrorRd__Ri_d_0_r0_lF11TabularData0D5FrameV_s5NeverO8CreateML30MLLogisticRegressionClassifierV15ModelParametersV010ValidationD0OTg503_s8g4ML30ijk13V20Persistentm48V16sessionDirectoryAE10Foundation3URLV_tKcfcAC05l5G0V14nd3O07c5N00N5E17VcAMmcfu_AmPcfu0_AOXMtTf1ncn_n(v121);
  if (__swift_getEnumTagSinglePayload(v122, 1, v150) == 1)
  {
    swift_storeEnumTagMultiPayload(v145, v150, 3);
    outlined destroy of Either<LogisticRegressionClassifier<Float, String>, FullyConnectedNetworkClassifier<Float, String>>((uint64_t)v144, &demangling cache variable for type metadata for MLLogisticRegressionClassifier.ModelParameters.ValidationData?);
  }
  else
  {
    outlined init with take of MLLogisticRegressionClassifier.ModelParameters.ValidationData((uint64_t)v144, (uint64_t)v145);
  }
  uint64_t v170 = v150;
  BOOL v123 = __swift_allocate_boxed_opaque_existential_1(v169);
  outlined init with take of MLLogisticRegressionClassifier.ModelParameters.ValidationData((uint64_t)v145, (uint64_t)v123);
  outlined assign with take of MLTrainingSession<MLImageClassifier>.Metadata((uint64_t)v169, (uint64_t)v147, &demangling cache variable for type metadata for Any?);
  outlined consume of Data._Representation(v157, v156);
  uint64_t v124 = v167;
  uint64_t v125 = v155;
  v155(v166, v167);
  v125(v153, v124);
  v125(v149, v124);
  __swift_destroy_boxed_opaque_existential_1Tm(v171);
  return __stack_chk_guard;
}

NSURL *MLLogisticRegressionClassifier.PersistentParameters.save(toSessionDirectory:)(uint64_t a1)
{
  uint64_t v68 = v1;
  uint64_t v60 = a1;
  int64_t v3 = *(void *)(*(void *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for DataFrame?)
                             - 8)
                 + 64);
  uint64_t v4 = alloca(v3);
  int64_t v5 = alloca(v3);
  id v65 = &v54;
  uint64_t v63 = type metadata accessor for CSVWritingOptions(0);
  uint64_t v59 = *(void *)(v63 - 8);
  int64_t v6 = *(void *)(v59 + 64);
  uint64_t v7 = alloca(v6);
  int64_t v8 = alloca(v6);
  unint64_t v58 = &v54;
  uint64_t v9 = alloca(v6);
  uint64_t v10 = alloca(v6);
  uint64_t v55 = &v54;
  uint64_t v67 = type metadata accessor for URL(0);
  uint64_t v69 = *(void *)(v67 - 8);
  int64_t v11 = *(void *)(v69 + 64);
  uint64_t v12 = alloca(v11);
  int64_t v13 = alloca(v11);
  NSData v61 = &v54;
  uint64_t v14 = alloca(v11);
  uint64_t v15 = alloca(v11);
  uint64_t v56 = &v54;
  int64_t v16 = alloca(v11);
  uint64_t v17 = alloca(v11);
  unint64_t v62 = &v54;
  uint64_t v18 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, Any)>);
  uint64_t inited = swift_initStackObject(v18, v71);
  *(void *)(inited + 16) = 8;
  *(void *)(inited + 24) = 16;
  *(void *)(inited + 32) = 0x746567726174;
  *(void *)(inited + 40) = 0xE600000000000000;
  long long v20 = (int *)type metadata accessor for MLLogisticRegressionClassifier.PersistentParameters(0);
  uint64_t v21 = v20[6];
  uint64_t v22 = *(void *)(v2 + v21);
  uint64_t v66 = *(void *)(v2 + v21 + 8);
  uint64_t v23 = v66;
  *(void *)(inited + 72) = &type metadata for String;
  *(void *)(inited + 48) = v22;
  *(void *)(inited + 56) = v23;
  *(void *)(inited + 80) = 0xD000000000000010;
  *(void *)(inited + 88) = "training parameters." + 0x8000000000000000;
  uint64_t v24 = *(void *)(v2 + v20[7]);
  *(void *)(inited + 120) = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [String]);
  *(void *)(inited + 96) = v24;
  strcpy((char *)(inited + 128), "maxIterations");
  *(_WORD *)(inited + 142) = -4864;
  uint64_t v57 = v20;
  uint64_t v25 = v20[8];
  uint64_t v26 = *(void *)(v2 + v25);
  *(void *)(inited + 168) = &type metadata for Int;
  *(void *)(inited + 144) = v26;
  *(void *)(inited + 176) = 0x746C616E6550316CLL;
  *(void *)(inited + 184) = 0xE900000000000079;
  uint64_t v27 = *(void *)(v2 + v25 + 40);
  *(void *)(inited + 216) = &type metadata for Double;
  *(void *)(inited + 192) = v27;
  *(void *)(inited + 224) = 0x746C616E6550326CLL;
  *(void *)(inited + 232) = 0xE900000000000079;
  uint64_t v28 = *(void *)(v2 + v25 + 48);
  *(void *)(inited + 264) = &type metadata for Double;
  *(void *)(inited + 240) = v28;
  *(void *)(inited + 272) = 0x657A695370657473;
  *(void *)(inited + 280) = 0xE800000000000000;
  uint64_t v29 = *(void *)(v2 + v25 + 56);
  *(void *)(inited + 312) = &type metadata for Double;
  *(void *)(inited + 288) = v29;
  *(void *)(inited + 320) = 0xD000000000000014;
  *(void *)(inited + 328) = "oating-point numbers." + 0x8000000000000000;
  uint64_t v30 = *(void *)(v2 + v25 + 64);
  *(void *)(inited + 360) = &type metadata for Double;
  *(void *)(inited + 336) = v30;
  *(void *)(inited + 368) = 0xD000000000000010;
  *(void *)(inited + 376) = "convergenceThreshold" + 0x8000000000000000;
  uint64_t v54 = v2;
  LOBYTE(v25) = *(unsigned char *)(v2 + v25 + 72);
  *(void *)(inited + 408) = &type metadata for Bool;
  *(unsigned char *)(inited + 384) = v25;
  swift_bridgeObjectRetain(v66);
  swift_bridgeObjectRetain(v24);
  LOBYTE(inited) = Dictionary.init(dictionaryLiteral:)(inited, &type metadata for String, (char *)&type metadata for Any + 8, &protocol witness table for String);
  uint64_t v31 = objc_opt_self(NSPropertyListSerialization);
  Class isa = Dictionary._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease(inited);
  id v70 = 0;
  id v33 = [v31 dataWithPropertyList:isa format:200 options:0 error:&v70];
  id v34 = v33;

  id v35 = v70;
  if (v34)
  {
    uint64_t v66 = static Data._unconditionallyBridgeFromObjectiveC(_:)(v34);
    unint64_t v37 = v36;

    uint64_t v38 = v62;
    URL.appendingPathComponent(_:)(0xD000000000000010, "ObjectDetectorMetrics." + 0x8000000000000000);
    uint64_t v39 = v66;
    unint64_t v64 = v37;
    uint64_t v40 = v68;
    Data.write(to:options:)(v38, 0, v66, v37);
    if (v40)
    {
      (*(void (**)(uint64_t *, uint64_t))(v69 + 8))(v38, v67);
      outlined consume of Data._Representation(v39, v64);
    }
    else
    {
      uint64_t v68 = *(void (**)(void, void))(v69 + 8);
      v68(v38, v67);
      uint64_t v46 = v56;
      URL.appendingPathComponent(_:)(1635017060, 0xE400000000000000);
      char v47 = v55;
      CSVWritingOptions.init(includesHeader:dateFormat:nilEncoding:trueEncoding:falseEncoding:newline:delimiter:)(1, 0, 0, 0, 0xE000000000000000, 1702195828, 0xE400000000000000, 0x65736C6166, 0xE500000000000000, 10, 0xE100000000000000, 44, 0xE100000000000000);
      uint64_t v69 = type metadata accessor for DataFrame(0);
      uint64_t v48 = v54;
      DataFrameProtocol.writeCSV(to:options:)(v46, v47, v69, &protocol witness table for DataFrame);
      unint64_t v62 = *(uint64_t **)(v59 + 8);
      ((void (*)(uint64_t *, uint64_t))v62)(v47, v63);
      v68(v46, v67);
      uint64_t v49 = v57[5] + v48;
      uint64_t v50 = (uint64_t)v65;
      outlined init with copy of DataFrame?(v49, (uint64_t)v65);
      if (__swift_getEnumTagSinglePayload(v50, 1, v69) == 1)
      {
        outlined consume of Data._Representation(v66, v64);
        outlined destroy of Either<LogisticRegressionClassifier<Float, String>, FullyConnectedNetworkClassifier<Float, String>>(v50, &demangling cache variable for type metadata for DataFrame?);
      }
      else
      {
        unint64_t v52 = v61;
        URL.appendingPathComponent(_:)(0x69746164696C6176, 0xEE00617461446E6FLL);
        uint64_t v53 = v58;
        CSVWritingOptions.init(includesHeader:dateFormat:nilEncoding:trueEncoding:falseEncoding:newline:delimiter:)(1, 0, 0, 0, 0xE000000000000000, 1702195828, 0xE400000000000000, 0x65736C6166, 0xE500000000000000, 10, 0xE100000000000000, 44, 0xE100000000000000);
        DataFrameProtocol.writeCSV(to:options:)(v52, v53, v69, &protocol witness table for DataFrame);
        outlined consume of Data._Representation(v66, v64);
        ((void (*)(uint64_t *, uint64_t))v62)(v53, v63);
        v68(v61, v67);
        (*(void (**)(uint64_t *))(*(void *)(v69 - 8) + 8))(v65);
      }
    }
  }
  else
  {
    unint64_t v41 = v35;
    _convertNSErrorToError(_:)(v35);

    swift_willThrow(v41, "dataWithPropertyList:format:options:error:", v42, v43, v44, v45);
  }
  return __stack_chk_guard;
}

uint64_t outlined destroy of MLLogisticRegressionClassifier.ModelParameters.ValidationData(uint64_t a1)
{
  uint64_t v1 = type metadata accessor for MLLogisticRegressionClassifier.ModelParameters.ValidationData(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v1 - 8) + 8))(a1, v1);
  return a1;
}

id static NLLanguageRecognizer.dominantLanguage(for:)(uint64_t a1)
{
  int64_t v1 = *(void *)(a1 + 16);
  if (v1)
  {
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v1, 0);
    uint64_t v2 = _swiftEmptyArrayStorage;
    id v27 = (id)objc_opt_self(NLLanguageRecognizer);
    int64_t v3 = (uint64_t *)(a1 + 40);
    do
    {
      uint64_t v28 = v2;
      int64_t v26 = v1;
      uint64_t v4 = *v3;
      swift_bridgeObjectRetain(*v3);
      NSString v5 = String._bridgeToObjectiveC()();
      id v6 = [v27 dominantLanguageForString:v5];
      uint64_t v7 = (NSString *)v6;

      if (!v7) {
        uint64_t v7 = NLLanguageUndetermined;
      }
      swift_bridgeObjectRelease(v4);
      uint64_t v2 = v28;
      unint64_t v8 = v28[2];
      unint64_t v9 = v8 + 1;
      if (v28[3] >> 1 <= v8)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v28[3] >= 2uLL, v8 + 1, 1);
        unint64_t v9 = v8 + 1;
        uint64_t v2 = v28;
      }
      v2[2] = v9;
      v2[v8 + 4] = v7;
      v3 += 2;
      int64_t v1 = v26 - 1;
    }
    while (v26 != 1);
  }
  else
  {
    uint64_t v2 = _swiftEmptyArrayStorage;
  }
  id v10 = specialized Collection<>.mostFrequent()((uint64_t)v2);
  swift_bridgeObjectRelease((_BYTE)v2);
  if (!v10) {
    goto LABEL_15;
  }
  uint64_t v11 = static String._unconditionallyBridgeFromObjectiveC(_:)(v10);
  uint64_t v13 = v12;
  uint64_t v14 = static String._unconditionallyBridgeFromObjectiveC(_:)(NLLanguageUndetermined);
  char v18 = v15;
  if (v11 == v14 && v13 == v15)
  {
    swift_bridgeObjectRelease_n(v13, 2, v15, v16, v17);
LABEL_15:
    uint64_t v20 = lazy protocol witness table accessor for type MLCreateError and conformance MLCreateError();
    swift_allocError(&type metadata for MLCreateError, v20, 0, 0);
    *(void *)uint64_t v21 = 0xD00000000000001ELL;
    *(void *)(v21 + 8) = "t and try again." + 0x8000000000000000;
    *(_OWORD *)(v21 + 16) = 0;
    *(_OWORD *)(v21 + 32) = 0;
    *(unsigned char *)(v21 + 48) = 0;
    swift_willThrow(&type metadata for MLCreateError, v20, v21, v22, v23, v24);

    return v10;
  }
  char v19 = _stringCompareWithSmolCheck(_:_:expecting:)(v11, v13, v14, v15, 0);
  swift_bridgeObjectRelease(v13);
  swift_bridgeObjectRelease(v18);
  if (v19) {
    goto LABEL_15;
  }
  return v10;
}

id static NLEmbedding.requestIfNotPresent(embeddingType:language:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = objc_opt_self(NLEmbedding);
  id result = [v2 assetsAvailableForEmbeddingType:a1 language:a2];
  if (!(_BYTE)result)
  {
    aBlock[4] = MLBoostedTreeRegressor.ModelParameters.maxDepth.modify;
    aBlock[5] = 0;
    aBlock[0] = _NSConcreteStackBlock;
    aBlock[1] = 1107296256;
    aBlock[2] = thunk for @escaping @callee_guaranteed (@unowned Int, @guaranteed Error?) -> ();
    aBlock[3] = &block_descriptor_1;
    uint64_t v4 = _Block_copy(aBlock);
    [v2 requestAssetsForEmbeddingType:a1 language:a2 withCompletionHandler:v4];
    _Block_release(v4);
    uint64_t v5 = lazy protocol witness table accessor for type MLCreateError and conformance MLCreateError();
    swift_allocError(&type metadata for MLCreateError, v5, 0, 0);
    *(void *)uint64_t v6 = 0xD000000000000080;
    *(void *)(v6 + 8) = "v24@?0q8@\"NSError\"16" + 0x8000000000000000;
    *(_OWORD *)(v6 + 16) = 0;
    *(_OWORD *)(v6 + 32) = 0;
    *(unsigned char *)(v6 + 48) = 0;
    return (id)swift_willThrow(&type metadata for MLCreateError, v5, v6, v7, v8, v9);
  }
  return result;
}

void thunk for @escaping @callee_guaranteed (@unowned Int, @guaranteed Error?) -> ()(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v4 = *(void (**)(uint64_t, void *))(a1 + 32);
  uint64_t v5 = *(void *)(a1 + 40);
  swift_retain(v5);
  id v6 = a3;
  v4(a2, a3);
  swift_release(v5);
}

uint64_t block_copy_helper_1(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  return swift_retain(v2);
}

{
  return block_copy_helper_6(a1, a2);
}

uint64_t block_destroy_helper_1(uint64_t a1)
{
  return swift_release(*(void *)(a1 + 40));
}

uint64_t specialized binaryDo<A, B, C>(_:_:_:)(uint64_t a1, char a2, uint64_t a3, char a4, uint64_t a5, uint64_t *a6)
{
  uint64_t v7 = a1;
  if (a2)
  {
    swift_errorRetain(a1);
    swift_bridgeObjectRelease(a5);
  }
  else if (a4)
  {
    swift_errorRetain(a3);
    swift_bridgeObjectRelease(a5);
    return a3;
  }
  else
  {
    v12[0] = a1;
    v11[0] = a3;
    outlined copy of Result<_DataTable, Error>(a3, 0);
    outlined copy of Result<_DataTable, Error>(a1, 0);
    closure #1 in MLDataTable.join(with:on:type:)(v12, v11, a5, a6);
    outlined consume of Result<_DataTable, Error>(a3, 0);
    outlined consume of Result<_DataTable, Error>(a1, 0);
    swift_bridgeObjectRelease(a5);
    return v11[1];
  }
  return v7;
}

uint64_t MLDataTable.init(contentsOf:options:)(void *a1, void *a2)
{
  uint64_t v136 = v3;
  char __src = a2;
  uint64_t v130 = v2;
  uint64_t v141 = type metadata accessor for URL(0);
  uint64_t v4 = *(void *)(v141 - 8);
  int64_t v5 = *(void *)(v4 + 64);
  id v6 = alloca(v5);
  uint64_t v7 = alloca(v5);
  uint64_t v133 = &v126;
  uint64_t v8 = alloca(v5);
  uint64_t v9 = alloca(v5);
  uint64_t v131 = &v126;
  id v10 = alloca(v5);
  uint64_t v11 = alloca(v5);
  uint64_t v137 = (uint64_t)&v126;
  int64_t v12 = *(void *)(*(void *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UTType?)
                              - 8)
                  + 64);
  uint64_t v13 = alloca(v12);
  uint64_t v14 = alloca(v12);
  uint64_t v15 = type metadata accessor for UTType(0);
  uint64_t v134 = *(void *)(v15 - 8);
  int64_t v16 = *(void *)(v134 + 64);
  uint64_t v17 = alloca(v16);
  char v18 = alloca(v16);
  uint64_t v142 = &v126;
  char v19 = alloca(v16);
  uint64_t v20 = alloca(v16);
  uint64_t v139 = &v126;
  memcpy(__dst, __src, sizeof(__dst));
  uint64_t v140 = a1;
  if ((URL.isFileURL.getter() & 1) == 0)
  {
    outlined release of MLDataTable.ParsingOptions(__dst);
    uint64_t v39 = lazy protocol witness table accessor for type MLCreateError and conformance MLCreateError();
    swift_allocError(&type metadata for MLCreateError, v39, 0, 0);
    *(void *)uint64_t v40 = 0xD00000000000002ALL;
    *(void *)(v40 + 8) = "Cannot determine the language." + 0x8000000000000000;
    *(_OWORD *)(v40 + 16) = 0;
    *(_OWORD *)(v40 + 32) = 0;
    *(unsigned char *)(v40 + 48) = 2;
    swift_willThrow();
    return (*(uint64_t (**)(void *, uint64_t))(v4 + 8))(v140, v141);
  }
  char __src = (void *)v4;
  uint64_t v21 = URL.pathExtension.getter();
  uint64_t v132 = v22;
  uint64_t v23 = v142;
  static UTType.data.getter();
  UTType.init(filenameExtension:conformingTo:)(v21, v132, v23);
  if (__swift_getEnumTagSinglePayload((uint64_t)&v126, 1, v15) == 1)
  {
    outlined release of MLDataTable.ParsingOptions(__dst);
    outlined destroy of UTType?((uint64_t)&v126);
    uint64_t v24 = v137;
    uint64_t v25 = v140;
    URL.appendingPathComponent(_:)(0x6C62615461746144, 0xE900000000000065);
    LOBYTE(v139) = URL.hasDirectoryPath.getter();
    int64_t v26 = __src;
    id v27 = (void (*)(uint64_t, uint64_t))*((void *)__src + 1);
    v27(v24, v141);
    uint64_t v142 = (uint64_t *)v27;
    if (v139)
    {
      uint64_t v28 = v131;
      URL.appendingPathComponent(_:)(0x6C62615461746144, 0xE900000000000065);
      uint64_t v29 = URL.path.getter(0x6C62615461746144);
      uint64_t v30 = v28;
      uint64_t v32 = v31;
      v27((uint64_t)v30, v141);
      if ((v32 & 0x1000000000000000) != 0 || !(v32 & 0x2000000000000000 | v29 & 0x1000000000000000))
      {
        uint64_t v122 = v136;
        _StringGuts._slowWithCString<A>(_:)(closure #1 in CMLTable.init(from:), 0, v29, v32, &type metadata for OpaquePointer);
        if (!v122) {
          goto LABEL_42;
        }
        goto LABEL_36;
      }
      id v33 = alloca(32);
      id v34 = alloca(32);
      __dst[2] = 0;
      __dst[1] = closure #1 in CMLTable.init(from:);
      if ((v32 & 0x2000000000000000) == 0)
      {
        if ((v29 & 0x1000000000000000) != 0)
        {
          uint64_t v35 = (v32 & 0xFFFFFFFFFFFFFFFLL) + 32;
          uint64_t v36 = v29 & 0xFFFFFFFFFFFFLL;
        }
        else
        {
          uint64_t v35 = _StringObject.sharedUTF8.getter(v29, v32);
          uint64_t v36 = v123;
        }
        uint64_t v37 = v136;
        uint64_t v38 = _sSRsRi_zrlE17withMemoryRebound2to_qd_1_qd__m_qd_1_SRyqd__Gqd_0_YKXEtqd_0_YKs5ErrorRd_0_Ri_d__Ri_d_1_r1_lFSRyxGq0_q_Ri_zRi0_zRi__Ri0__Ri_0_Ri0_0_r1_lys4Int8VsAD_pqd_1_Isgyrzr_SRys5UInt8VGqd_1_sAD_pAIRszAGRsd__sAD_pRsd_0_Ri_d_1_r_1_lIetMgyrzo_Tpq5s13OpaquePointerV_Tg507_sSRys4f5VGxs5e31_pIgyrzo_ACxsAD_pIegyrzr_lTRs13hI5V_TG5SRyAGGALsAD_pIgyrzo_Tf1cn_n(v35, v36, (uint64_t (*)(uint64_t))_ss11_StringGutsV11withCStringyxxSPys4Int8VGKXEKlFxSRyAEGKXEfU_s13OpaquePointerV_TG5TA_0);
        if (v37) {
          goto LABEL_36;
        }
        goto LABEL_41;
      }
      v128[0] = v29;
      v128[1] = v32 & 0xFFFFFFFFFFFFFFLL;
      uint64_t v101 = v136;
      uint64_t v102 = specialized handling<A, B>(_:_:)((uint64_t)v128);
      if (v101)
      {
LABEL_36:
        swift_bridgeObjectRelease(v32);
        return ((uint64_t (*)(void *, uint64_t))v142)(v140, v141);
      }
      if (!v102) {
        BUG();
      }
LABEL_48:
      v129[0] = v102;
      swift_bridgeObjectRelease(v32);
      goto LABEL_49;
    }
    uint64_t v57 = (void (**)(void *, void, uint64_t))v26;
    char v58 = URL.hasDirectoryPath.getter();
    uint64_t v59 = v133;
    ((void (**)(uint64_t *, void *, uint64_t))v57)[2](v133, v25, v141);
    if (v58)
    {
      uint64_t v60 = objc_opt_self(NSFileManager);
      id v61 = [v60 defaultManager];
      char __src = v61;
      uint64_t v62 = v137;
      URL.appendingPathComponent(_:)(0x686372615F726964, 0xEF696E692E657669);
      URL.path.getter(0x686372615F726964);
      uint64_t v64 = v63;
      id v65 = v142;
      ((void (*)(uint64_t, uint64_t))v142)(v62, v141);
      NSString v66 = String._bridgeToObjectiveC()();
      swift_bridgeObjectRelease(v64);
      uint64_t v67 = __src;
      LOBYTE(v139) = [__src fileExistsAtPath:v66];

      uint64_t v68 = v133;
      ((void (*)(uint64_t *, uint64_t))v65)(v133, v141);
      if ((_BYTE)v139)
      {
        uint64_t v70 = URL.path.getter(v68);
        uint64_t v32 = v69;
        if ((v69 & 0x1000000000000000) != 0 || !(v69 & 0x2000000000000000 | v70 & 0x1000000000000000))
        {
          uint64_t v124 = v136;
          _StringGuts._slowWithCString<A>(_:)(closure #1 in CMLTable.init(from:), 0, v70, v69, &type metadata for OpaquePointer);
          if (!v124) {
            goto LABEL_42;
          }
        }
        else
        {
          char v71 = alloca(32);
          uint64_t v72 = alloca(32);
          __dst[2] = 0;
          __dst[1] = closure #1 in CMLTable.init(from:);
          if ((v69 & 0x2000000000000000) != 0)
          {
            v128[0] = v70;
            v128[1] = v69 & 0xFFFFFFFFFFFFFFLL;
            uint64_t v117 = v136;
            uint64_t v102 = specialized handling<A, B>(_:_:)((uint64_t)v128);
            if (!v117)
            {
              if (!v102) {
                BUG();
              }
              goto LABEL_48;
            }
          }
          else
          {
            if ((v70 & 0x1000000000000000) != 0)
            {
              uint64_t v73 = (v69 & 0xFFFFFFFFFFFFFFFLL) + 32;
              uint64_t v74 = v70 & 0xFFFFFFFFFFFFLL;
            }
            else
            {
              uint64_t v73 = _StringObject.sharedUTF8.getter(v70, v69);
              uint64_t v74 = v125;
            }
            uint64_t v75 = v136;
            uint64_t v38 = _sSRsRi_zrlE17withMemoryRebound2to_qd_1_qd__m_qd_1_SRyqd__Gqd_0_YKXEtqd_0_YKs5ErrorRd_0_Ri_d__Ri_d_1_r1_lFSRyxGq0_q_Ri_zRi0_zRi__Ri0__Ri_0_Ri0_0_r1_lys4Int8VsAD_pqd_1_Isgyrzr_SRys5UInt8VGqd_1_sAD_pAIRszAGRsd__sAD_pRsd_0_Ri_d_1_r_1_lIetMgyrzo_Tpq5s13OpaquePointerV_Tg507_sSRys4f5VGxs5e31_pIgyrzo_ACxsAD_pIegyrzr_lTRs13hI5V_TG5SRyAGGALsAD_pIgyrzo_Tf1cn_n(v73, v74, (uint64_t (*)(uint64_t))_ss11_StringGutsV11withCStringyxxSPys4Int8VGKXEKlFxSRyAEGKXEfU_s13OpaquePointerV_TG5TA_0);
            if (!v75)
            {
LABEL_41:
              v129[0] = v38;
LABEL_42:
              swift_bridgeObjectRelease(v32);
LABEL_49:
              uint64_t v118 = v129[0];
              uint64_t v119 = type metadata accessor for CMLTable();
              uint64_t v103 = swift_allocObject(v119, 24, 7);
              *(void *)(v103 + 16) = v118;
              uint64_t v105 = v140;
              uint64_t v106 = v141;
              goto LABEL_50;
            }
          }
        }
        swift_bridgeObjectRelease(v32);
        goto LABEL_28;
      }
    }
    else
    {
      ((void (*)(uint64_t *, uint64_t))v142)(v59, v141);
    }
    v128[0] = 0;
    v128[1] = 0xE000000000000000;
    _StringGuts.grow(_:)(119);
    v83._uint64_t countAndFlagsBits = 0x7420666F204C5255;
    v83._char object = (void *)0xED00002720657079;
    String.append(_:)(v83);
    uint64_t v84 = URL.pathExtension.getter();
    Swift::Int v86 = v85;
    v83._uint64_t countAndFlagsBits = v84;
    v83._char object = v85;
    String.append(_:)(v83);
    swift_bridgeObjectRelease(v86);
    v83._char object = "only load from a file URL." + 0x8000000000000000;
    v83._uint64_t countAndFlagsBits = 0xD000000000000068;
    String.append(_:)(v83);
    uint64_t v87 = v128[0];
    uint64_t v88 = v128[1];
    uint64_t v89 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Any>);
    uint64_t v90 = (void *)swift_allocObject(v89, 64, 7);
    v90[2] = 1;
    v90[3] = 2;
    v90[7] = &type metadata for String;
    uint64_t v90[4] = v87;
    v90[5] = v88;
    swift_bridgeObjectRetain(v88);
    print(_:separator:terminator:)(v90, 32, 0xE100000000000000, 10, 0xE100000000000000);
    swift_bridgeObjectRelease(v90);
    v83._char object = (void *)lazy protocol witness table accessor for type MLCreateError and conformance MLCreateError();
    swift_allocError(&type metadata for MLCreateError, v83._object, 0, 0);
    *(void *)uint64_t v91 = v87;
    *(void *)(v91 + 8) = v88;
    *(_OWORD *)(v91 + 16) = 0;
    *(_OWORD *)(v91 + 32) = 0;
    *(unsigned char *)(v91 + 48) = 2;
    swift_willThrow();
LABEL_28:
    uint64_t v92 = v140;
    uint64_t v93 = v141;
    return ((uint64_t (*)(uint64_t *, uint64_t))v142)(v92, v93);
  }
  uint64_t v42 = v134;
  (*(void (**)(uint64_t *, uint64_t *, uint64_t))(v134 + 32))(v139, &v126, v15);
  uint64_t v43 = v142;
  static UTType.commaSeparatedText.getter();
  char v44 = UTType.conforms(to:)(v43);
  uint64_t v45 = v15;
  char v46 = v44;
  char v47 = *(uint64_t **)(v42 + 8);
  uint64_t v48 = v45;
  uint64_t v49 = v43;
  uint64_t v50 = v47;
  ((void (*)(uint64_t *, uint64_t))v47)(v49, v45);
  uint64_t v135 = v48;
  if (v46)
  {
    uint64_t v142 = v50;
    uint64_t v137 = type metadata accessor for CMLTable();
    uint64_t v51 = v140;
    uint64_t v52 = URL.path.getter(0);
    uint64_t v134 = v53;
    memcpy(v128, __dst, sizeof(v128));
    MLBoostedTreeRegressor.ModelParameters.maxDepth.modify();
    outlined init with take of MLDataTable.ParsingOptions?((uint64_t)v128, (uint64_t)v129);
    uint64_t v54 = v136;
    uint64_t v55 = CMLTable.__allocating_init(from:isCSV:options:)(v52, v134, 1, (uint64_t)v129);
    if (v54)
    {
      uint64_t v56 = v51;
LABEL_33:
      (*((void (**)(void *, uint64_t))__src + 1))(v56, v141);
      uint64_t v92 = v139;
      uint64_t v93 = v135;
      return ((uint64_t (*)(uint64_t *, uint64_t))v142)(v92, v93);
    }
    uint64_t v103 = v55;
    uint64_t v104 = v51;
  }
  else
  {
    uint64_t v76 = v142;
    static UTType.plainText.getter();
    LOBYTE(v137) = UTType.conforms(to:)(v76);
    ((void (*)(uint64_t *, uint64_t))v50)(v76, v48);
    if (v137)
    {
      uint64_t v142 = v50;
      uint64_t v137 = type metadata accessor for CMLTable();
      uint64_t v77 = URL.path.getter(0);
      uint64_t v79 = v78;
      memcpy(v128, __dst, sizeof(v128));
      MLBoostedTreeRegressor.ModelParameters.maxDepth.modify();
      outlined init with take of MLDataTable.ParsingOptions?((uint64_t)v128, (uint64_t)v129);
      int v80 = 1;
      uint64_t v81 = v77;
      uint64_t v82 = v79;
    }
    else
    {
      outlined release of MLDataTable.ParsingOptions(__dst);
      uint64_t v94 = v142;
      static UTType.json.getter();
      char v95 = UTType.conforms(to:)(v94);
      ((void (*)(uint64_t *, uint64_t))v50)(v94, v135);
      if ((v95 & 1) == 0)
      {
        v128[0] = 0;
        v128[1] = 0xE000000000000000;
        _StringGuts.grow(_:)(119);
        v107._uint64_t countAndFlagsBits = 0x7420666F204C5255;
        v107._char object = (void *)0xED00002720657079;
        String.append(_:)(v107);
        uint64_t v108 = URL.pathExtension.getter();
        uint64_t v110 = v109;
        v107._uint64_t countAndFlagsBits = v108;
        v107._char object = v109;
        String.append(_:)(v107);
        swift_bridgeObjectRelease(v110);
        v107._char object = "only load from a file URL." + 0x8000000000000000;
        v107._uint64_t countAndFlagsBits = 0xD000000000000068;
        String.append(_:)(v107);
        uint64_t v111 = v50;
        uint64_t v112 = v128[0];
        uint64_t v113 = v128[1];
        uint64_t v114 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Any>);
        Swift::UInt v115 = (void *)swift_allocObject(v114, 64, 7);
        v115[2] = 1;
        v115[3] = 2;
        v115[7] = &type metadata for String;
        v115[4] = v112;
        v115[5] = v113;
        swift_bridgeObjectRetain(v113);
        print(_:separator:terminator:)(v115, 32, 0xE100000000000000, 10, 0xE100000000000000);
        swift_bridgeObjectRelease(v115);
        v107._char object = (void *)lazy protocol witness table accessor for type MLCreateError and conformance MLCreateError();
        swift_allocError(&type metadata for MLCreateError, v107._object, 0, 0);
        *(void *)uint64_t v116 = v112;
        *(void *)(v116 + 8) = v113;
        *(_OWORD *)(v116 + 16) = 0;
        *(_OWORD *)(v116 + 32) = 0;
        *(unsigned char *)(v116 + 48) = 2;
        swift_willThrow();
        (*((void (**)(void *, uint64_t))__src + 1))(v140, v141);
        return ((uint64_t (*)(uint64_t *, uint64_t))v111)(v139, v135);
      }
      uint64_t v142 = v50;
      uint64_t v137 = type metadata accessor for CMLTable();
      uint64_t v96 = URL.path.getter(0);
      uint64_t v98 = v97;
      _s8CreateML11MLDataTableV14ParsingOptionsVSgWOi0_((uint64_t)v128);
      outlined init with take of MLDataTable.ParsingOptions?((uint64_t)v128, (uint64_t)v129);
      uint64_t v81 = v96;
      uint64_t v82 = v98;
      int v80 = 0;
    }
    uint64_t v99 = v136;
    uint64_t v100 = CMLTable.__allocating_init(from:isCSV:options:)(v81, v82, v80, (uint64_t)v129);
    if (v99)
    {
      uint64_t v56 = v140;
      goto LABEL_33;
    }
    uint64_t v103 = v100;
    uint64_t v104 = v140;
  }
  (*((void (**)(void *, uint64_t))__src + 1))(v104, v141);
  uint64_t v105 = v139;
  uint64_t v106 = v135;
LABEL_50:
  ((void (*)(uint64_t *, uint64_t))v142)(v105, v106);
  uint64_t v120 = type metadata accessor for _DataTable();
  swift_allocObject(v120, 40, 7);
  uint64_t result = _DataTable.init(impl:)(v103);
  uint64_t v121 = v130;
  *uint64_t v130 = result;
  *((unsigned char *)v121 + 8) = 0;
  return result;
}

uint64_t MLDataTable.ParsingOptions.init(containsHeader:delimiter:comment:escape:doubleQuote:quote:skipInitialSpaces:missingValues:lineTerminator:selectColumns:maxRows:skipRows:)(char a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, char a8, long long a9, char a10, long long a11, long long a12, uint64_t a13, char a14, uint64_t a15)
{
  uint64_t v16 = 0;
  if (a15 > 0) {
    uint64_t v16 = a15;
  }
  *(unsigned char *)uint64_t result = a1 & 1;
  *(void *)(result + 8) = a2;
  *(void *)(result + 16) = a3;
  *(void *)(result + 24) = a4;
  *(void *)(result + 32) = a5;
  *(void *)(result + 40) = a6;
  *(void *)(result + 48) = a7;
  *(unsigned char *)(result + 56) = a8 & 1;
  *(_OWORD *)(result + 64) = a9;
  *(unsigned char *)(result + 80) = a10 & 1;
  *(_OWORD *)(result + 88) = a11;
  *(_OWORD *)(result + 104) = a12;
  *(void *)(result + 120) = a13;
  *(unsigned char *)(result + 128) = a14 & 1;
  *(void *)(result + 136) = v16;
  return result;
}

char MLDataTable.ParsingOptions.containsHeader.getter()
{
  return *(unsigned char *)v0;
}

void MLDataTable.ParsingOptions.containsHeader.setter(char a1)
{
  *int64_t v1 = a1 & 1;
}

void (*MLDataTable.ParsingOptions.containsHeader.modify())()
{
  return MLBoostedTreeRegressor.ModelParameters.maxDepth.modify;
}

uint64_t MLDataTable.ParsingOptions.delimiter.getter()
{
  uint64_t v1 = *(void *)(v0 + 8);
  swift_bridgeObjectRetain(*(void *)(v0 + 16));
  return v1;
}

uint64_t MLDataTable.ParsingOptions.delimiter.setter(uint64_t a1, uint64_t a2)
{
  uint64_t result = swift_bridgeObjectRelease(*(void *)(v2 + 16));
  *(void *)(v2 + 8) = a1;
  *(void *)(v2 + 16) = a2;
  return result;
}

void (*MLDataTable.ParsingOptions.delimiter.modify())()
{
  return MLBoostedTreeRegressor.ModelParameters.maxDepth.modify;
}

uint64_t MLDataTable.ParsingOptions.comment.getter()
{
  uint64_t v1 = *(void *)(v0 + 24);
  swift_bridgeObjectRetain(*(void *)(v0 + 32));
  return v1;
}

uint64_t MLDataTable.ParsingOptions.comment.setter(uint64_t a1, uint64_t a2)
{
  uint64_t result = swift_bridgeObjectRelease(*(void *)(v2 + 32));
  *(void *)(v2 + 24) = a1;
  *(void *)(v2 + 32) = a2;
  return result;
}

void (*MLDataTable.ParsingOptions.comment.modify())()
{
  return MLBoostedTreeRegressor.ModelParameters.maxDepth.modify;
}

uint64_t MLDataTable.ParsingOptions.escape.getter()
{
  uint64_t v1 = *(void *)(v0 + 40);
  swift_bridgeObjectRetain(*(void *)(v0 + 48));
  return v1;
}

uint64_t MLDataTable.ParsingOptions.escape.setter(uint64_t a1, uint64_t a2)
{
  uint64_t result = swift_bridgeObjectRelease(*(void *)(v2 + 48));
  *(void *)(v2 + 40) = a1;
  *(void *)(v2 + 48) = a2;
  return result;
}

void (*MLDataTable.ParsingOptions.escape.modify())()
{
  return MLBoostedTreeRegressor.ModelParameters.maxDepth.modify;
}

char MLDataTable.ParsingOptions.doubleQuote.getter()
{
  return *(unsigned char *)(v0 + 56);
}

void MLDataTable.ParsingOptions.doubleQuote.setter(char a1)
{
  *(unsigned char *)(v1 + 56) = a1 & 1;
}

void (*MLDataTable.ParsingOptions.doubleQuote.modify())()
{
  return MLBoostedTreeRegressor.ModelParameters.maxDepth.modify;
}

uint64_t MLDataTable.ParsingOptions.quote.getter()
{
  uint64_t v1 = *(void *)(v0 + 64);
  swift_bridgeObjectRetain(*(void *)(v0 + 72));
  return v1;
}

uint64_t MLDataTable.ParsingOptions.quote.setter(uint64_t a1, uint64_t a2)
{
  uint64_t result = swift_bridgeObjectRelease(*(void *)(v2 + 72));
  *(void *)(v2 + 64) = a1;
  *(void *)(v2 + 72) = a2;
  return result;
}

void (*MLDataTable.ParsingOptions.quote.modify())()
{
  return MLBoostedTreeRegressor.ModelParameters.maxDepth.modify;
}

char MLDataTable.ParsingOptions.skipInitialSpaces.getter()
{
  return *(unsigned char *)(v0 + 80);
}

void MLDataTable.ParsingOptions.skipInitialSpaces.setter(char a1)
{
  *(unsigned char *)(v1 + 80) = a1 & 1;
}

void (*MLDataTable.ParsingOptions.skipInitialSpaces.modify())()
{
  return MLBoostedTreeRegressor.ModelParameters.maxDepth.modify;
}

uint64_t MLDataTable.ParsingOptions.missingValues.getter()
{
  return swift_bridgeObjectRetain(*(void *)(v0 + 88));
}

uint64_t MLDataTable.ParsingOptions.missingValues.setter(uint64_t a1)
{
  uint64_t result = swift_bridgeObjectRelease(*(void *)(v1 + 88));
  *(void *)(v1 + 88) = a1;
  return result;
}

void (*MLDataTable.ParsingOptions.missingValues.modify())()
{
  return MLBoostedTreeRegressor.ModelParameters.maxDepth.modify;
}

uint64_t MLDataTable.ParsingOptions.lineTerminator.getter()
{
  uint64_t v1 = *(void *)(v0 + 96);
  swift_bridgeObjectRetain(*(void *)(v0 + 104));
  return v1;
}

uint64_t MLDataTable.ParsingOptions.lineTerminator.setter(uint64_t a1, uint64_t a2)
{
  uint64_t result = swift_bridgeObjectRelease(*(void *)(v2 + 104));
  *(void *)(v2 + 96) = a1;
  *(void *)(v2 + 104) = a2;
  return result;
}

void (*MLDataTable.ParsingOptions.lineTerminator.modify())()
{
  return MLBoostedTreeRegressor.ModelParameters.maxDepth.modify;
}

uint64_t MLDataTable.ParsingOptions.selectColumns.getter()
{
  return swift_bridgeObjectRetain(*(void *)(v0 + 112));
}

uint64_t MLDataTable.ParsingOptions.selectColumns.setter(uint64_t a1)
{
  uint64_t result = swift_bridgeObjectRelease(*(void *)(v1 + 112));
  *(void *)(v1 + 112) = a1;
  return result;
}

void (*MLDataTable.ParsingOptions.selectColumns.modify())()
{
  return MLBoostedTreeRegressor.ModelParameters.maxDepth.modify;
}

uint64_t MLDataTable.ParsingOptions.maxRows.getter()
{
  return *(void *)(v0 + 120);
}

void MLDataTable.ParsingOptions.maxRows.setter(uint64_t a1, char a2)
{
  *(void *)(v2 + 120) = a1;
  *(unsigned char *)(v2 + 128) = a2 & 1;
}

void (*MLDataTable.ParsingOptions.maxRows.modify())()
{
  return MLBoostedTreeRegressor.ModelParameters.maxDepth.modify;
}

uint64_t MLDataTable.ParsingOptions.skipRows.getter()
{
  return *(void *)(v0 + 136);
}

void MLDataTable.ParsingOptions.skipRows.setter(uint64_t a1)
{
  *(void *)(v1 + 136) = a1;
}

void (*MLDataTable.ParsingOptions.skipRows.modify())()
{
  return MLBoostedTreeRegressor.ModelParameters.maxDepth.modify;
}

uint64_t _sSRsRi_zrlE17withMemoryRebound2to_qd_1_qd__m_qd_1_SRyqd__Gqd_0_YKXEtqd_0_YKs5ErrorRd_0_Ri_d__Ri_d_1_r1_lFSRyxGq0_q_Ri_zRi0_zRi__Ri0__Ri_0_Ri0_0_r1_lys4Int8VsAD_pqd_1_Isgyrzr_SRys5UInt8VGqd_1_sAD_pAIRszAGRsd__sAD_pRsd_0_Ri_d_1_r_1_lIetMgyrzo_Tpq5s13OpaquePointerV_Tg507_sSRys4f5VGxs5e31_pIgyrzo_ACxsAD_pIegyrzr_lTRs13hI5V_TG5SRyAGGALsAD_pIgyrzo_Tf1cn_n(uint64_t a1, uint64_t a2, uint64_t (*a3)(uint64_t))
{
  uint64_t v6 = v3;
  if (!a1) {
    a1 = 0;
  }
  uint64_t result = a3(a1);
  if (!v4) {
    return v6;
  }
  return result;
}

void *outlined release of MLDataTable.ParsingOptions(void *a1)
{
  uint64_t v6 = a1[2];
  uint64_t v1 = a1[4];
  uint64_t v2 = a1[6];
  uint64_t v3 = a1[9];
  uint64_t v4 = a1[11];
  uint64_t v7 = a1[14];
  swift_bridgeObjectRelease(a1[13]);
  swift_bridgeObjectRelease(v4);
  swift_bridgeObjectRelease(v3);
  swift_bridgeObjectRelease(v2);
  swift_bridgeObjectRelease(v1);
  swift_bridgeObjectRelease(v6);
  swift_bridgeObjectRelease(v7);
  return a1;
}

uint64_t outlined destroy of UTType?(uint64_t a1)
{
  uint64_t v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UTType?);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v1 - 8) + 8))(a1, v1);
  return a1;
}

uint64_t _ss11_StringGutsV11withCStringyxxSPys4Int8VGKXEKlFxSRyAEGKXEfU_s13OpaquePointerV_TG5TA_0()
{
  return partial apply for specialized closure #1 in _StringGuts.withCString<A>(_:)();
}

uint64_t partial apply for specialized closure #1 in _StringGuts.withCString<A>(_:)()
{
  uint64_t v3 = v0;
  uint64_t result = (*(uint64_t (**)(void))(v2 + 16))();
  if (!v1)
  {
    uint64_t result = v5;
    uint64_t *v3 = v5;
  }
  return result;
}

uint64_t _s8CreateML11MLDataTableV14ParsingOptionsVSgWOi0_(uint64_t a1)
{
  return __bzero(a1, 144);
}

uint64_t destroy for MLDataTable.ParsingOptions(void *a1)
{
  return swift_bridgeObjectRelease(a1[14]);
}

uint64_t initializeWithCopy for MLDataTable.ParsingOptions(uint64_t a1, uint64_t a2)
{
  *(unsigned char *)a1 = *(unsigned char *)a2;
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  uint64_t v3 = *(void *)(a2 + 16);
  *(void *)(a1 + 16) = v3;
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  uint64_t v9 = *(void *)(a2 + 32);
  *(void *)(a1 + 32) = v9;
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  uint64_t v10 = *(void *)(a2 + 48);
  *(void *)(a1 + 48) = v10;
  *(unsigned char *)(a1 + 56) = *(unsigned char *)(a2 + 56);
  *(void *)(a1 + 64) = *(void *)(a2 + 64);
  uint64_t v4 = *(void *)(a2 + 72);
  *(void *)(a1 + 72) = v4;
  *(unsigned char *)(a1 + 80) = *(unsigned char *)(a2 + 80);
  uint64_t v5 = *(void *)(a2 + 88);
  *(void *)(a1 + 88) = v5;
  *(void *)(a1 + 96) = *(void *)(a2 + 96);
  uint64_t v6 = *(void *)(a2 + 104);
  *(void *)(a1 + 104) = v6;
  uint64_t v7 = *(void *)(a2 + 112);
  *(void *)(a1 + 112) = v7;
  *(void *)(a1 + 120) = *(void *)(a2 + 120);
  *(unsigned char *)(a1 + 128) = *(unsigned char *)(a2 + 128);
  *(void *)(a1 + 136) = *(void *)(a2 + 136);
  swift_bridgeObjectRetain(v3);
  swift_bridgeObjectRetain(v9);
  swift_bridgeObjectRetain(v10);
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRetain(v5);
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRetain(v7);
  return a1;
}

uint64_t assignWithCopy for MLDataTable.ParsingOptions(uint64_t a1, uint64_t a2)
{
  *(unsigned char *)a1 = *(unsigned char *)a2;
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  uint64_t v3 = *(void *)(a2 + 16);
  uint64_t v4 = *(void *)(a1 + 16);
  *(void *)(a1 + 16) = v3;
  swift_bridgeObjectRetain(v3);
  swift_bridgeObjectRelease(v4);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  uint64_t v5 = *(void *)(a2 + 32);
  uint64_t v6 = *(void *)(a1 + 32);
  *(void *)(a1 + 32) = v5;
  swift_bridgeObjectRetain(v5);
  swift_bridgeObjectRelease(v6);
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  uint64_t v7 = *(void *)(a2 + 48);
  uint64_t v8 = *(void *)(a1 + 48);
  *(void *)(a1 + 48) = v7;
  swift_bridgeObjectRetain(v7);
  swift_bridgeObjectRelease(v8);
  *(unsigned char *)(a1 + 56) = *(unsigned char *)(a2 + 56);
  *(void *)(a1 + 64) = *(void *)(a2 + 64);
  uint64_t v9 = *(void *)(a2 + 72);
  uint64_t v10 = *(void *)(a1 + 72);
  *(void *)(a1 + 72) = v9;
  swift_bridgeObjectRetain(v9);
  swift_bridgeObjectRelease(v10);
  *(unsigned char *)(a1 + 80) = *(unsigned char *)(a2 + 80);
  uint64_t v11 = *(void *)(a2 + 88);
  uint64_t v12 = *(void *)(a1 + 88);
  *(void *)(a1 + 88) = v11;
  swift_bridgeObjectRetain(v11);
  swift_bridgeObjectRelease(v12);
  *(void *)(a1 + 96) = *(void *)(a2 + 96);
  uint64_t v13 = *(void *)(a2 + 104);
  uint64_t v14 = *(void *)(a1 + 104);
  *(void *)(a1 + 104) = v13;
  swift_bridgeObjectRetain(v13);
  swift_bridgeObjectRelease(v14);
  uint64_t v15 = *(void *)(a1 + 112);
  uint64_t v16 = *(void *)(a2 + 112);
  *(void *)(a1 + 112) = v16;
  swift_bridgeObjectRetain(v16);
  swift_bridgeObjectRelease(v15);
  *(unsigned char *)(a1 + 128) = *(unsigned char *)(a2 + 128);
  *(void *)(a1 + 120) = *(void *)(a2 + 120);
  *(void *)(a1 + 136) = *(void *)(a2 + 136);
  return a1;
}

void *__swift_memcpy144_8(void *a1, const void *a2)
{
  return memcpy(a1, a2, 0x90uLL);
}

uint64_t assignWithTake for MLDataTable.ParsingOptions(uint64_t a1, uint64_t a2)
{
  *(unsigned char *)a1 = *(unsigned char *)a2;
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  uint64_t v3 = *(void *)(a1 + 16);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  swift_bridgeObjectRelease(v3);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  uint64_t v4 = *(void *)(a1 + 32);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  swift_bridgeObjectRelease(v4);
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  uint64_t v5 = *(void *)(a1 + 48);
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  swift_bridgeObjectRelease(v5);
  *(unsigned char *)(a1 + 56) = *(unsigned char *)(a2 + 56);
  *(void *)(a1 + 64) = *(void *)(a2 + 64);
  uint64_t v6 = *(void *)(a1 + 72);
  *(void *)(a1 + 72) = *(void *)(a2 + 72);
  swift_bridgeObjectRelease(v6);
  *(unsigned char *)(a1 + 80) = *(unsigned char *)(a2 + 80);
  uint64_t v7 = *(void *)(a1 + 88);
  *(void *)(a1 + 88) = *(void *)(a2 + 88);
  swift_bridgeObjectRelease(v7);
  *(void *)(a1 + 96) = *(void *)(a2 + 96);
  swift_bridgeObjectRelease(*(void *)(a1 + 104));
  uint64_t v8 = *(void *)(a1 + 112);
  *(_OWORD *)(a1 + 104) = *(_OWORD *)(a2 + 104);
  swift_bridgeObjectRelease(v8);
  *(unsigned char *)(a1 + 128) = *(unsigned char *)(a2 + 128);
  *(void *)(a1 + 120) = *(void *)(a2 + 120);
  *(void *)(a1 + 136) = *(void *)(a2 + 136);
  return a1;
}

uint64_t getEnumTagSinglePayload for MLDataTable.ParsingOptions(uint64_t a1, int a2)
{
  if (a2)
  {
    if (a2 < 0 && *(unsigned char *)(a1 + 144)) {
      int v2 = *(_DWORD *)a1 + 0x7FFFFFFF;
    }
    else {
      int v2 = (*(void *)(a1 + 16) & 0xFFFFFFFF00000001) != 0 ? -1 : *(void *)(a1 + 16) >> 1;
    }
  }
  else
  {
    int v2 = -1;
  }
  return (v2 + 1);
}

void storeEnumTagSinglePayload for MLDataTable.ParsingOptions(uint64_t a1, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)(a1 + 136) = 0;
    *(_OWORD *)(a1 + 120) = 0;
    *(_OWORD *)(a1 + 104) = 0;
    *(_OWORD *)(a1 + 88) = 0;
    *(_OWORD *)(a1 + 72) = 0;
    *(_OWORD *)(a1 + 56) = 0;
    *(_OWORD *)(a1 + 40) = 0;
    *(_OWORD *)(a1 + 24) = 0;
    *(_OWORD *)(a1 + 8) = 0;
    *(void *)a1 = a2 + 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(a1 + 144) = 1;
    }
  }
  else
  {
    if (a3 < 0) {
      *(unsigned char *)(a1 + 144) = 0;
    }
    if (a2) {
      *(void *)(a1 + 16) = 2 * (a2 - 1);
    }
  }
}

ValueMetadata *type metadata accessor for MLDataTable.ParsingOptions()
{
  return &type metadata for MLDataTable.ParsingOptions;
}

char _Model.Output.init(variant:)(uint64_t a1, double a2)
{
  uint64_t v4 = v2;
  uint64_t v5 = *(void *)(a1 + 16);
  if (tc_v1_variant_is_sframe(v5))
  {
    uint64_t v6 = specialized handling<A, B>(_:_:)(v5);
    if (!v3)
    {
      uint64_t v7 = v6;
      uint64_t v29 = v4;
      if (!v6) {
        BUG();
      }
      uint64_t v8 = type metadata accessor for CMLTable();
      uint64_t v9 = swift_allocObject(v8, 24, 7);
      *(void *)(v9 + 16) = v7;
      swift_release();
      uint64_t v10 = type metadata accessor for _DataTable();
      swift_allocObject(v10, 40, 7);
      uint64_t v11 = _DataTable.init(impl:)(v9);
      uint64_t v12 = 0;
      uint64_t v13 = v11;
      char result = 0;
LABEL_9:
      uint64_t v4 = v29;
LABEL_10:
      *(void *)uint64_t v4 = v13;
      *(void *)(v4 + 8) = v12;
      *(unsigned char *)(v4 + 16) = result;
      return result;
    }
  }
  else if (tc_v1_variant_is_sarray(v5))
  {
    uint64_t v15 = specialized handling<A, B>(_:_:)(v5);
    if (!v3)
    {
      uint64_t v16 = v15;
      uint64_t v29 = v4;
      if (!v15) {
        BUG();
      }
      uint64_t v17 = type metadata accessor for CMLColumn();
      uint64_t v18 = swift_allocObject(v17, 24, 7);
      *(void *)(v18 + 16) = v16;
      swift_release();
      uint64_t v19 = type metadata accessor for _UntypedColumn();
      uint64_t v20 = swift_allocObject(v19, 24, 7);
      uint64_t v12 = 0;
      uint64_t v13 = v20;
      *(void *)(v20 + 16) = v18;
      char result = 32;
      goto LABEL_9;
    }
  }
  else if (tc_v1_variant_is_flexible_type(v5))
  {
    uint64_t v21 = CMLVariant.featureValue()();
    if (!v3)
    {
      MLDataValue.init(_:)(v21, a2);
      swift_release();
      uint64_t v13 = v26;
      uint64_t v12 = v27;
      char result = v28 | 0x40;
      goto LABEL_10;
    }
  }
  else if (tc_v1_variant_is_model(v5))
  {
    uint64_t v22 = specialized handling<A, B>(_:_:)(v5);
    if (!v3)
    {
      uint64_t v30 = v22;
      if (!v22) {
        BUG();
      }
      uint64_t v23 = type metadata accessor for CMLModel();
      uint64_t v13 = swift_allocObject(v23, 24, 7);
      *(void *)(v13 + 16) = v30;
      swift_release();
      uint64_t v12 = 0;
      char result = -96;
      goto LABEL_10;
    }
  }
  else
  {
    if (!tc_v1_variant_is_parameters(v5))
    {
      swift_release();
      char result = -32;
      uint64_t v13 = 0;
      uint64_t v12 = 0;
      goto LABEL_10;
    }
    uint64_t v24 = specialized handling<A, B>(_:_:)(v5);
    if (!v3)
    {
      uint64_t v31 = v24;
      if (!v24) {
        BUG();
      }
      uint64_t v25 = type metadata accessor for CMLParameters();
      uint64_t v13 = swift_allocObject(v25, 24, 7);
      *(void *)(v13 + 16) = v31;
      swift_release();
      uint64_t v12 = 0;
      char result = -64;
      goto LABEL_10;
    }
  }
  return swift_release();
}

uint64_t CMLParameters.featureValue(for:)(char a1)
{
  return CMLParameters.featureValue(for:)(a1, (uint64_t)partial apply for closure #1 in CMLParameters.featureValue(for:), (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))specialized String.withCString<A>(_:));
}

uint64_t CMLDictionary.size.getter()
{
  return CMLDictionary.size.getter((uint64_t (*)(void))&tc_v1_flex_dict_size);
}

uint64_t CMLDictionary.keyAndValue(at:)(uint64_t a1)
{
  type metadata accessor for CMLFeatureValue();
  uint64_t v3 = CMLFeatureValue.__allocating_init()();
  uint64_t v4 = CMLFeatureValue.__allocating_init()();
  if (a1 < 0)
  {
    _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, "Negative value is not representable", 35, 2, "Swift/Integers.swift", 20, 2, 3451, 1);
    BUG();
  }
  uint64_t v5 = v4;
  specialized handling<A, B, C, D, E>(_:_:_:_:_:)(*(void *)(v2 + 16), a1, *(void *)(v3 + 16), *(void *)(v4 + 16));
  if (v1)
  {
    swift_release(v3);
    swift_release(v5);
  }
  return v3;
}

Swift::String __swiftcall __spoils<cf,zf,sf,of,pf,rax,rdx,rcx,rdi,rsi,r8,r9,r10,r11,r12,xmm0,xmm1,xmm2,xmm3,xmm4,xmm5,xmm6,xmm7> CMLFeatureValue.stringValue()()
{
  result._uint64_t countAndFlagsBits = specialized handling<A, B>(_:_:)(*(void *)(v1 + 16));
  if (!v0)
  {
    if (!result._countAndFlagsBits) {
      BUG();
    }
    result._uint64_t countAndFlagsBits = String.init(cString:)(result._countAndFlagsBits);
  }
  return result;
}

uint64_t CMLParameters.add(key:column:)(char a1, uint64_t a2)
{
  return CMLParameters.add(key:column:)(a1, a2, partial apply for closure #1 in CMLParameters.add(key:column:), (void (*)(void, void *, void))specialized handling<A, B, C, D>(_:_:_:_:));
}

uint64_t CMLFeatureValue.__allocating_init(_:)(uint64_t a1)
{
  return CMLFeatureValue.__allocating_init(_:)(a1, specialized handling<A, B>(_:_:));
}

{
  return CMLFeatureValue.__allocating_init(_:)(a1, specialized handling<A, B>(_:_:));
}

{
  return CMLFeatureValue.__allocating_init(_:)(a1, specialized handling<A, B>(_:_:));
}

uint64_t CMLParameters.add(key:featureValue:)(char a1, uint64_t a2)
{
  uint64_t v3 = CMLParameters.Key.rawValue.getter(a1);
  uint64_t v5 = v4;
  swift_retain();
  swift_retain();
  specialized String.withCString<A>(_:)(v3, v5, v2, a2);
  return swift_bridgeObjectRelease(v5);
}

uint64_t CMLFeatureValue.__allocating_init(_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = String.utf8CString.getter(a1);
  swift_bridgeObjectRelease(a2);
  uint64_t v5 = specialized handling<A, B>(_:_:)(v4 + 32);
  uint64_t result = swift_release(v4);
  if (!v2)
  {
    if (!v5) {
      BUG();
    }
    uint64_t result = swift_allocObject(v3, 25, 7);
    *(void *)(result + 16) = v5;
    *(unsigned char *)(result + 24) = 1;
  }
  return result;
}

uint64_t CMLModel.callFunction(name:arguments:)(char a1, uint64_t a2)
{
  unint64_t v3 = MethodName.rawValue.getter(a1);
  char v5 = v4;
  uint64_t v9 = v2;
  uint64_t v10 = a2;
  uint64_t v6 = specialized String.withCString<A>(_:)((uint64_t (*)(void))partial apply for closure #1 in CMLModel.callFunction(name:arguments:), (uint64_t)v8, v3, v4);
  swift_bridgeObjectRelease(v5);
  return v6;
}

uint64_t CMLVariant.featureValue()()
{
  uint64_t result = specialized handling<A, B>(_:_:)(*(void *)(v1 + 16));
  uint64_t v3 = result;
  if (!v0)
  {
    if (!result) {
      BUG();
    }
    uint64_t v4 = type metadata accessor for CMLFeatureValue();
    uint64_t result = swift_allocObject(v4, 25, 7);
    *(void *)(result + 16) = v3;
    *(unsigned char *)(result + 24) = 1;
  }
  return result;
}

uint64_t CMLSequence.append(_:)(uint64_t a1)
{
  uint64_t result = specialized handling<A, B, C>(_:_:_:)(*(void *)(v2 + 16), *(void *)(a1 + 16));
  if (!v1 && result < 0) {
    BUG();
  }
  return result;
}

uint64_t CMLTable.__allocating_init(from:isCSV:options:)(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  int v88 = a3;
  uint64_t v90 = a2;
  uint64_t v87 = a1;
  outlined init with take of MLDataTable.ParsingOptions?(a4, (uint64_t)v60);
  uint64_t empty = tc_v1_parameters_create_empty(0);
  if (!empty) {
    BUG();
  }
  uint64_t v7 = empty;
  uint64_t v8 = type metadata accessor for CMLParameters();
  uint64_t inited = swift_initStackObject(v8, v67);
  *(void *)(inited + 16) = v7;
  uint64_t v9 = specialized handling<A, B>(_:_:)(0);
  if (v4)
  {
    swift_unexpectedError(v4, "CreateML/MLDataValueConvertible.swift", 37, 1, 118);
    BUG();
  }
  uint64_t v10 = v9;
  uint64_t v89 = v5;
  if (!v9) {
    BUG();
  }
  uint64_t v92 = (unsigned char *)type metadata accessor for CMLFeatureValue();
  uint64_t v11 = swift_initStackObject(v92, v61);
  *(void *)(v11 + 16) = v10;
  *(unsigned char *)(v11 + 24) = 1;
  CMLParameters.add(key:featureValue:)(9, v11);
  swift_release();
  outlined init with take of MLDataTable.ParsingOptions?((uint64_t)v60, (uint64_t)v57);
  if (_s8CreateML11MLDataTableV14ParsingOptionsVSgWOg((uint64_t)v57) != 1)
  {
    uint64_t v12 = specialized handling<A, B>(_:_:)(v57[0]);
    if (!v12) {
      BUG();
    }
    uint64_t v13 = swift_initStackObject(v92, v62);
    *(void *)(v13 + 16) = v12;
    *(unsigned char *)(v13 + 24) = 1;
    CMLParameters.add(key:featureValue:)(10, v13);
    swift_release();
    outlined init with take of MLDataTable.ParsingOptions?((uint64_t)v60, (uint64_t)&v68);
    uint64_t v14 = v69;
    uint64_t v15 = v70;
    swift_bridgeObjectRetain_n(v70, 2);
    uint64_t v16 = CMLFeatureValue.__allocating_init(_:)(v14, v15);
    swift_bridgeObjectRelease(v15);
    CMLParameters.add(key:featureValue:)(11, v16);
    swift_release();
    uint64_t v17 = v71;
    uint64_t v18 = v72;
    swift_bridgeObjectRetain_n(v72, 2);
    uint64_t v19 = CMLFeatureValue.__allocating_init(_:)(v17, v18);
    swift_bridgeObjectRelease(v18);
    CMLParameters.add(key:featureValue:)(12, v19);
    swift_release();
    uint64_t v20 = v73;
    uint64_t v21 = v74;
    swift_bridgeObjectRetain_n(v74, 2);
    uint64_t v22 = CMLFeatureValue.__allocating_init(_:)(v20, v21);
    swift_bridgeObjectRelease(v21);
    CMLParameters.add(key:featureValue:)(13, v22);
    swift_release();
    uint64_t v23 = specialized handling<A, B>(_:_:)(v75);
    if (!v23) {
      BUG();
    }
    uint64_t v24 = swift_initStackObject(v92, v63);
    *(void *)(v24 + 16) = v23;
    *(unsigned char *)(v24 + 24) = 1;
    CMLParameters.add(key:featureValue:)(14, v24);
    swift_release();
    uint64_t v25 = v76;
    uint64_t v26 = v77;
    swift_bridgeObjectRetain_n(v77, 2);
    uint64_t v27 = CMLFeatureValue.__allocating_init(_:)(v25, v26);
    swift_bridgeObjectRelease(v26);
    CMLParameters.add(key:featureValue:)(15, v27);
    swift_release();
    uint64_t v28 = specialized handling<A, B>(_:_:)(v78);
    if (!v28) {
      BUG();
    }
    uint64_t v29 = swift_initStackObject(v92, v64);
    *(void *)(v29 + 16) = v28;
    *(unsigned char *)(v29 + 24) = 1;
    CMLParameters.add(key:featureValue:)(16, v29);
    swift_release();
    uint64_t v30 = v79;
    swift_bridgeObjectRetain(v79);
    uint64_t v31 = specialized Array<A>.featureSequence.getter(v30);
    uint64_t v32 = CMLFeatureValue.__allocating_init(_:)(v31, specialized handling<A, B>(_:_:));
    swift_bridgeObjectRelease(v30);
    CMLParameters.add(key:featureValue:)(17, v32);
    swift_release();
    uint64_t v33 = v80;
    uint64_t v34 = v81;
    swift_bridgeObjectRetain_n(v81, 2);
    uint64_t v35 = CMLFeatureValue.__allocating_init(_:)(v33, v34);
    swift_bridgeObjectRelease(v34);
    CMLParameters.add(key:featureValue:)(18, v35);
    swift_release();
    uint64_t v36 = v82;
    if (v82)
    {
      swift_bridgeObjectRetain(v82);
      uint64_t v37 = specialized Array<A>.featureSequence.getter(v36);
      uint64_t v38 = CMLFeatureValue.__allocating_init(_:)(v37, specialized handling<A, B>(_:_:));
      swift_bridgeObjectRelease(v36);
      CMLParameters.add(key:featureValue:)(19, v38);
      swift_release();
    }
    uint64_t v39 = v92;
    if (!v84)
    {
      uint64_t v40 = specialized handling<A, B>(_:_:)(v83);
      if (!v40) {
        BUG();
      }
      uint64_t v41 = swift_initStackObject(v39, v66);
      *(void *)(v41 + 16) = v40;
      *(unsigned char *)(v41 + 24) = 1;
      CMLParameters.add(key:featureValue:)(20, v41);
      swift_release();
      uint64_t v39 = v92;
    }
    outlined release of MLDataTable.ParsingOptions?(v60);
    uint64_t v42 = specialized handling<A, B>(_:_:)(v85);
    if (!v42) {
      BUG();
    }
    uint64_t v43 = swift_initStackObject(v39, v65);
    *(void *)(v43 + 16) = v42;
    *(unsigned char *)(v43 + 24) = 1;
    CMLParameters.add(key:featureValue:)(21, v43);
    swift_release();
  }
  uint64_t v44 = v90;
  uint64_t v92 = v57;
  uint64_t v45 = alloca(32);
  char v46 = alloca(32);
  LOBYTE(v58) = v88 & 1;
  uint64_t v59 = (unsigned char *)inited;
  if ((v90 & 0x1000000000000000) != 0 || !(v90 & 0x2000000000000000 | v87 & 0x1000000000000000))
  {
    _StringGuts._slowWithCString<A>(_:)(partial apply for closure #1 in CMLTable.init(from:isCSV:options:), v57, v87, v90, &type metadata for OpaquePointer);
    swift_bridgeObjectRelease(v44);
    uint64_t v51 = v86;
  }
  else
  {
    char v47 = alloca(32);
    uint64_t v48 = alloca(32);
    char v58 = partial apply for closure #1 in CMLTable.init(from:isCSV:options:);
    uint64_t v59 = v57;
    if ((v90 & 0x2000000000000000) != 0)
    {
      uint64_t v68 = v87;
      uint64_t v69 = v90 & 0xFFFFFFFFFFFFFFLL;
      if (v88)
      {
        uint64_t v51 = specialized handling<A, B, C>(_:_:_:)((uint64_t)&v68, *(void *)(inited + 16));
        if (!v51) {
          BUG();
        }
      }
      else
      {
        uint64_t v52 = specialized handling<A, B>(_:_:)((uint64_t)&v68);
        uint64_t v51 = v52;
        if (!v52) {
          BUG();
        }
      }
      swift_bridgeObjectRelease(v90);
    }
    else
    {
      if ((v87 & 0x1000000000000000) != 0)
      {
        uint64_t v49 = (v90 & 0xFFFFFFFFFFFFFFFLL) + 32;
        uint64_t v50 = v87 & 0xFFFFFFFFFFFFLL;
      }
      else
      {
        uint64_t v49 = _StringObject.sharedUTF8.getter(v87, v90);
        uint64_t v50 = v56;
      }
      uint64_t v51 = _sSRsRi_zrlE17withMemoryRebound2to_qd_1_qd__m_qd_1_SRyqd__Gqd_0_YKXEtqd_0_YKs5ErrorRd_0_Ri_d__Ri_d_1_r1_lFSRyxGq0_q_Ri_zRi0_zRi__Ri0__Ri_0_Ri0_0_r1_lys4Int8VsAD_pqd_1_Isgyrzr_SRys5UInt8VGqd_1_sAD_pAIRszAGRsd__sAD_pRsd_0_Ri_d_1_r_1_lIetMgyrzo_Tpq5s13OpaquePointerV_Tg507_sSRys4f5VGxs5e31_pIgyrzo_ACxsAD_pIegyrzr_lTRs13hI5V_TG5SRyAGGALsAD_pIgyrzo_Tf1cn_n(v49, v50, (uint64_t (*)(uint64_t))partial apply for specialized closure #1 in _StringGuts.withCString<A>(_:));
      swift_bridgeObjectRelease(v90);
    }
  }
  uint64_t v53 = v89;
  uint64_t v54 = inited;
  swift_setDeallocating(inited);
  tc_v1_release(*(void *)(v54 + 16));
  uint64_t result = swift_allocObject(v53, 24, 7);
  *(void *)(result + 16) = v51;
  return result;
}

char __CMLFeatureValueType.init(rawValue:)(unint64_t a1)
{
  char result = 8;
  if (a1 <= 9) {
    return byte_34939E[a1];
  }
  return result;
}

unint64_t CMLFeatureValueType.init(_:)(char a1)
{
  return 0x605050403020100uLL >> (8 * a1);
}

unint64_t CMLFeatureValueType.rawValue.getter(char a1)
{
  return 0x7050403020100uLL >> (8 * a1);
}

uint64_t CMLFeatureValue.deinit()
{
  if (*(unsigned char *)(v0 + 24) == 1) {
    tc_v1_release(*(void *)(v0 + 16));
  }
  return v0;
}

uint64_t CMLFeatureValue.__deallocating_deinit(double a1)
{
  CMLFeatureValue.deinit(a1);
  return swift_deallocClassInstance(v1, 25, 7);
}

uint64_t type metadata accessor for CMLFeatureValue()
{
  return objc_opt_self(_TtC8CreateML15CMLFeatureValue);
}

uint64_t CMLFeatureValue.init(rawValue:ownsValue:)(uint64_t a1, char a2)
{
  uint64_t result = v2;
  *(void *)(v2 + 16) = a1;
  *(unsigned char *)(v2 + 24) = a2 & 1;
  return result;
}

uint64_t CMLFeatureValue.releaseRawValue()()
{
  uint64_t result = *(void *)(v0 + 16);
  if (!result) {
    BUG();
  }
  *(void *)(v0 + 16) = 0;
  *(unsigned char *)(v0 + 24) = 0;
  return result;
}

uint64_t CMLFeatureValue.__allocating_init()()
{
  uint64_t empty = tc_v1_ft_create_empty(0);
  if (!empty) {
    BUG();
  }
  uint64_t v2 = empty;
  uint64_t result = swift_allocObject(v0, 25, 7);
  *(void *)(result + 16) = v2;
  *(unsigned char *)(result + 24) = 1;
  return result;
}

uint64_t CMLFeatureValue.__allocating_init(_:)(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t v4 = a2(*(void *)(a1 + 16));
  if (v2) {
    return swift_release(a1);
  }
  uint64_t v6 = v4;
  if (!v4) {
    BUG();
  }
  swift_release(a1);
  uint64_t result = swift_allocObject(v3, 25, 7);
  *(void *)(result + 16) = v6;
  *(unsigned char *)(result + 24) = 1;
  return result;
}

unint64_t CMLFeatureValue.type.getter()
{
  unint64_t v1 = tc_v1_ft_type(*(void *)(v0 + 16));
  char v2 = __CMLFeatureValueType.init(rawValue:)(v1);
  if (v2 == 8) {
    BUG();
  }
  return CMLFeatureValueType.init(_:)(v2);
}

uint64_t CMLFeatureValue.isInt64.getter()
{
  return tc_v1_ft_is_int64(*(void *)(v0 + 16));
}

uint64_t CMLFeatureValue.isDouble.getter()
{
  return tc_v1_ft_is_double(*(void *)(v0 + 16));
}

uint64_t CMLFeatureValue.isUndefined.getter()
{
  return tc_v1_ft_is_undefined(*(void *)(v0 + 16));
}

uint64_t type metadata accessor for CMLSequence()
{
  return objc_opt_self(_TtC8CreateML11CMLSequence);
}

uint64_t CMLSequence.value(at:)(uint64_t a1)
{
  if (a1 < 0)
  {
    _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, "Negative value is not representable", 35, 2, "Swift/Integers.swift", 20, 2, 3451, 1);
    BUG();
  }
  uint64_t result = specialized handling<A, B, C>(_:_:_:)(*(void *)(v2 + 16), a1);
  uint64_t v4 = result;
  if (!v1)
  {
    if (!result) {
      BUG();
    }
    uint64_t v5 = type metadata accessor for CMLFeatureValue();
    uint64_t result = swift_allocObject(v5, 25, 7);
    *(void *)(result + 16) = v4;
    *(unsigned char *)(result + 24) = 1;
  }
  return result;
}

uint64_t CMLSequence.size.getter()
{
  return CMLDictionary.size.getter((uint64_t (*)(void))&tc_v1_flex_list_size);
}

uint64_t CMLFVTypeSequence.__deallocating_deinit()
{
  return CMLFVTypeSequence.__deallocating_deinit();
}

{
  uint64_t v0;

  tc_v1_release(*(void *)(v0 + 16));
  return swift_deallocClassInstance(v0, 24, 7);
}

uint64_t type metadata accessor for CMLFVTypeSequence()
{
  return objc_opt_self(_TtC8CreateML17CMLFVTypeSequence);
}

Swift::Int __swiftcall __spoils<cf,zf,sf,of,pf,rax,rdx,rcx,rdi,rsi,r8,r9,r10,r11,r12,xmm0,xmm1,xmm2,xmm3,xmm4,xmm5,xmm6,xmm7> CMLFVTypeSequence.append(_:)(CreateML::CMLFeatureValueType a1)
{
  uint64_t v3 = *(void *)(v2 + 16);
  char v4 = CMLFeatureValueType.rawValue.getter(a1);
  Swift::Int result = specialized handling<A, B, C>(_:_:_:)(v3, qword_3493A8[v4]);
  if (!v1 && result < 0) {
    BUG();
  }
  return result;
}

uint64_t type metadata accessor for CMLDictionary()
{
  return objc_opt_self(_TtC8CreateML13CMLDictionary);
}

uint64_t CMLDictionary.add(key:value:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v10 = v4;
  uint64_t v5 = a1;
  type metadata accessor for CMLFeatureValue();
  swift_bridgeObjectRetain(a2);
  uint64_t v6 = CMLFeatureValue.__allocating_init(_:)(a1, a2);
  if (!v3)
  {
    uint64_t v7 = v6;
    uint64_t v5 = specialized handling<A, B, C, D>(_:_:_:_:)(*(void *)(v10 + 16), *(void *)(v6 + 16), *(void *)(a3 + 16));
    swift_release(v7);
    if (v5 < 0) {
      BUG();
    }
  }
  return v5;
}

uint64_t type metadata accessor for CMLMultiArray()
{
  return objc_opt_self(_TtC8CreateML13CMLMultiArray);
}

Swift::Int __swiftcall __spoils<cf,zf,sf,of,pf,rax,rdx,rcx,rdi,rsi,r8,r9,r10,r11,r12,xmm0,xmm1,xmm2,xmm3,xmm4,xmm5,xmm6,xmm7> CMLMultiArray.dimensions()()
{
  return CMLMultiArray.dimensions()(specialized handling<A, B>(_:_:));
}

uint64_t CMLMultiArray.shape()()
{
  return CMLMultiArray.shape()(specialized handling<A, B>(_:_:));
}

uint64_t CMLMultiArray.strides()()
{
  return CMLMultiArray.shape()(specialized handling<A, B>(_:_:));
}

uint64_t CMLMultiArray.data()()
{
  return CMLMultiArray.shape()(specialized handling<A, B>(_:_:));
}

uint64_t CMLMultiArray.shape()(uint64_t (*a1)(void))
{
  uint64_t result = a1(*(void *)(v2 + 16));
  if (!v1 && !result) {
    BUG();
  }
  return result;
}

uint64_t type metadata accessor for CMLColumn()
{
  return objc_opt_self(_TtC8CreateML9CMLColumn);
}

uint64_t CMLColumn.__allocating_init(_:)(uint64_t a1, uint64_t a2)
{
  if (a1 < 0 || a2 < 0)
  {
    _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, "Negative value is not representable", 35, 2, "Swift/Integers.swift", 20, 2, 3451, 1);
    BUG();
  }
  uint64_t result = specialized handling<A, B, C>(_:_:_:)(a1, a2);
  uint64_t v5 = result;
  if (!v2)
  {
    if (!result) {
      BUG();
    }
    uint64_t result = swift_allocObject(v3, 24, 7);
    *(void *)(result + 16) = v5;
  }
  return result;
}

uint64_t CMLColumn.__allocating_init(repeating:count:)(uint64_t a1, uint64_t a2)
{
  if (a2 < 0)
  {
    _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, "Negative value is not representable", 35, 2, "Swift/Integers.swift", 20, 2, 3451, 1);
    BUG();
  }
  uint64_t v4 = specialized handling<A, B, C>(_:_:_:)(*(void *)(a1 + 16), a2);
  if (v2) {
    return swift_release();
  }
  uint64_t v6 = v4;
  if (!v4) {
    BUG();
  }
  swift_release();
  uint64_t result = swift_allocObject(v3, 24, 7);
  *(void *)(result + 16) = v6;
  return result;
}

uint64_t CMLColumn.__allocating_init(_:type:)(uint64_t a1, char a2)
{
  uint64_t v4 = v2;
  uint64_t v39 = v3;
  if (!CMLDictionary.size.getter((uint64_t (*)(void))&tc_v1_flex_list_size))
  {
    switch(a2)
    {
      case 0:
        uint64_t v10 = specialized handling<A, B>(_:_:)(0);
        if (v2) {
          return swift_release();
        }
        uint64_t v11 = v10;
        if (!v10) {
          BUG();
        }
        goto LABEL_18;
      case 1:
        uint64_t v22 = specialized handling<A, B>(_:_:)();
        if (v2) {
          return swift_release();
        }
        uint64_t v11 = v22;
        if (!v22) {
          BUG();
        }
LABEL_18:
        uint64_t v23 = type metadata accessor for CMLFeatureValue();
        uint64_t v24 = swift_allocObject(v23, 25, 7);
        *(void *)(v24 + 16) = v11;
        uint64_t v41 = v24;
        *(unsigned char *)(v24 + 24) = 1;
        goto LABEL_27;
      case 2:
        type metadata accessor for CMLFeatureValue();
        uint64_t v17 = CMLFeatureValue.__allocating_init(_:)(0, 0xE000000000000000);
        goto LABEL_24;
      case 3:
        uint64_t v18 = tc_v1_flex_list_create(0);
        if (!v18) {
          BUG();
        }
        uint64_t v19 = v18;
        type metadata accessor for CMLFeatureValue();
        uint64_t v20 = type metadata accessor for CMLSequence();
        uint64_t inited = swift_initStackObject(v20, v35);
        *(void *)(inited + 16) = v19;
        *(unsigned char *)(inited + 24) = 1;
        uint64_t v16 = specialized handling<A, B>(_:_:);
        goto LABEL_15;
      case 4:
        uint64_t v12 = tc_v1_flex_dict_create(0);
        if (!v12) {
          BUG();
        }
        uint64_t v13 = v12;
        type metadata accessor for CMLFeatureValue();
        uint64_t v14 = type metadata accessor for CMLDictionary();
        uint64_t inited = swift_initStackObject(v14, v38);
        *(void *)(inited + 16) = v13;
        uint64_t v16 = specialized handling<A, B>(_:_:);
LABEL_15:
        uint64_t v21 = inited;
        goto LABEL_23;
      case 5:
        type metadata accessor for CMLFeatureValue();
        uint64_t v17 = CMLFeatureValue.__allocating_init()(&tc_v1_flex_list_size);
        goto LABEL_26;
      case 6:
        uint64_t v25 = specialized handling<A, B, C, D, E>(_:_:_:_:_:)(1, (uint64_t)&unk_3940F8, (uint64_t)&unk_394120, (uint64_t)&unk_394148);
        if (v2)
        {
          swift_unexpectedError(v2, "CreateML/_ForwardingWrapper.swift", 33, 1, 378);
          BUG();
        }
        uint64_t v26 = v25;
        if (!v25) {
          BUG();
        }
        uint64_t v27 = type metadata accessor for CMLMultiArray();
        uint64_t v28 = swift_initStackObject(v27, v36);
        *(void *)(v28 + 16) = v26;
        type metadata accessor for CMLFeatureValue();
        uint64_t v16 = specialized handling<A, B>(_:_:);
        uint64_t v21 = v28;
LABEL_23:
        uint64_t v17 = CMLFeatureValue.__allocating_init(_:)(v21, v16);
LABEL_24:
        uint64_t v4 = v2;
        if (v2) {
          return swift_release();
        }
LABEL_26:
        uint64_t v41 = v17;
LABEL_27:
        uint64_t v40 = a1;
        uint64_t v29 = tc_v1_flex_list_create(0);
        if (!v29) {
          BUG();
        }
        uint64_t v30 = v29;
        uint64_t v31 = type metadata accessor for CMLSequence();
        uint64_t v32 = swift_initStackObject(v31, v34);
        *(void *)(v32 + 16) = v30;
        *(unsigned char *)(v32 + 24) = 1;
        CMLSequence.append(_:)(v41);
        if (v4)
        {
          swift_release();
          swift_release();
          swift_setDeallocating(v32);
          CMLFeatureValue.deinit();
          return swift_deallocClassInstance(v32, 25, 7);
        }
        swift_retain(v32);
        uint64_t v33 = specialized handling<A, B>(_:_:)(v30);
        if (!v33) {
          BUG();
        }
        swift_release();
        *(void *)(swift_initStackObject(v39, v37) + 16) = v33;
        uint64_t v7 = specialized handling<A, B, C>(_:_:_:)(v33, 0);
        if (!v7) {
          BUG();
        }
        swift_release();
        swift_release();
        swift_setDeallocating(v32);
        CMLFeatureValue.deinit();
        swift_deallocClassInstance(v32, 25, 7);
        swift_release();
        uint64_t v8 = v39;
        break;
    }
    goto LABEL_5;
  }
  uint64_t v6 = specialized handling<A, B>(_:_:)(*(void *)(a1 + 16));
  if (!v2)
  {
    uint64_t v7 = v6;
    if (!v6) {
      BUG();
    }
    swift_release();
    uint64_t v8 = v39;
LABEL_5:
    uint64_t result = swift_allocObject(v8, 24, 7);
    *(void *)(result + 16) = v7;
    return result;
  }
  return swift_release();
}

uint64_t CMLColumn.__allocating_init(concatenating:and:)(uint64_t a1, uint64_t a2)
{
  return CMLColumn.__allocating_init(concatenating:and:)(a1, a2, specialized handling<A, B, C>(_:_:_:));
}

uint64_t CMLColumn.size.getter()
{
  return CMLDictionary.size.getter((uint64_t (*)(void))&tc_v1_sarray_size);
}

uint64_t CMLDictionary.size.getter(uint64_t (*a1)(void))
{
  uint64_t result = a1(*(void *)(v1 + 16));
  if (result < 0) {
    BUG();
  }
  return result;
}

unint64_t CMLColumn.type.getter()
{
  unint64_t v1 = tc_v1_sarray_type(*(void *)(v0 + 16));
  char v2 = __CMLFeatureValueType.init(rawValue:)(v1);
  if (v2 == 8) {
    BUG();
  }
  return CMLFeatureValueType.init(_:)(v2);
}

uint64_t CMLColumn.value(at:)(uint64_t a1)
{
  if (a1 < 0)
  {
    _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, "Negative value is not representable", 35, 2, "Swift/Integers.swift", 20, 2, 3451, 1);
    BUG();
  }
  uint64_t result = specialized handling<A, B, C>(_:_:_:)(*(void *)(v2 + 16), a1);
  uint64_t v4 = result;
  if (!v1)
  {
    if (!result) {
      BUG();
    }
    uint64_t v5 = type metadata accessor for CMLFeatureValue();
    uint64_t result = swift_allocObject(v5, 25, 7);
    *(void *)(result + 16) = v4;
    *(unsigned char *)(result + 24) = 1;
  }
  return result;
}

Swift::Void __swiftcall __spoils<cf,zf,sf,of,pf,rax,rdx,rcx,rdi,rsi,r8,r9,r10,r11,r12,xmm0,xmm1,xmm2,xmm3,xmm4,xmm5,xmm6,xmm7> CMLColumn.materialize()()
{
  specialized handling<A, B>(_:_:)(*(void *)(v0 + 16));
}

uint64_t CMLColumn.sum()()
{
  return CMLColumn.sum()(specialized handling<A, B>(_:_:));
}

uint64_t CMLColumn.min()()
{
  return CMLColumn.sum()(specialized handling<A, B>(_:_:));
}

uint64_t CMLColumn.max()()
{
  return CMLColumn.sum()(specialized handling<A, B>(_:_:));
}

uint64_t CMLColumn.mean()()
{
  return CMLColumn.sum()(specialized handling<A, B>(_:_:));
}

uint64_t CMLColumn.stdev()()
{
  return CMLColumn.sum()(specialized handling<A, B>(_:_:));
}

uint64_t CMLColumn.sum()(uint64_t (*a1)(void))
{
  uint64_t result = a1(*(void *)(v2 + 16));
  uint64_t v4 = result;
  if (!v1)
  {
    if (!result) {
      BUG();
    }
    uint64_t v5 = type metadata accessor for CMLFeatureValue();
    uint64_t result = swift_allocObject(v5, 25, 7);
    *(void *)(result + 16) = v4;
    *(unsigned char *)(result + 24) = 1;
  }
  return result;
}

uint64_t CMLColumn.apply(transform:type:skipUndefined:)(uint64_t a1, uint64_t a2, char a3, char a4)
{
  uint64_t v14 = *v5;
  uint64_t v6 = swift_allocObject(&unk_3987B0, 32, 7);
  *(void *)(v6 + 16) = a1;
  *(void *)(v6 + 24) = a2;
  swift_retain();
  uint64_t v7 = (void *)specialized static UnsafeMutablePointer.allocate(capacity:)(1);
  uint64_t v8 = swift_allocObject(&unk_3987D8, 32, 7);
  *(void *)(v8 + 16) = partial apply for closure #1 in CMLColumn.apply(transform:type:skipUndefined:);
  *(void *)(v8 + 24) = v6;
  *uint64_t v7 = partial apply for thunk for @escaping @callee_guaranteed (@unowned OpaquePointer) -> (@unowned OpaquePointer);
  v7[1] = v8;
  uint64_t v9 = v5[2];
  uint64_t v10 = qword_3493A8[(char)CMLFeatureValueType.rawValue.getter(a3)];
  swift_retain();
  uint64_t v11 = specialized handling<A, B, C, D, E, F, G>(_:_:_:_:_:_:_:)(v9, (uint64_t)@objc invokeContext #1 (rawInput:context:error:) in CMLColumn.apply(transform:type:skipUndefined:), (uint64_t)@objc releaseContext #1 (context:) in CMLColumn.apply(transform:type:skipUndefined:), (uint64_t)v7, v10, a4);
  if (v4)
  {
    swift_unexpectedError(v4, "CreateML/_ForwardingWrapper.swift", 33, 1, 475);
    BUG();
  }
  uint64_t v12 = v11;
  if (!v11) {
    BUG();
  }
  swift_release();
  uint64_t result = swift_allocObject(v14, 24, 7);
  *(void *)(result + 16) = v12;
  return result;
}

uint64_t closure #1 in CMLColumn.apply(transform:type:skipUndefined:)(uint64_t a1, void (*a2)(uint64_t))
{
  uint64_t v2 = type metadata accessor for CMLFeatureValue();
  uint64_t v3 = swift_allocObject(v2, 25, 7);
  *(void *)(v3 + 16) = a1;
  *(unsigned char *)(v3 + 24) = 0;
  a2(v3);
  swift_release();
  uint64_t v4 = CMLFeatureValue.releaseRawValue()(v3);
  swift_release();
  return v4;
}

uint64_t specialized static UnsafeMutablePointer.allocate(capacity:)(uint64_t a1)
{
  if (((unint64_t)(a1 - 0x800000000000000) >> 60) < 0xF) {
    BUG();
  }
  return swift_slowAlloc(16 * a1, -1);
}

uint64_t type metadata accessor for CMLTable()
{
  return objc_opt_self(_TtC8CreateML8CMLTable);
}

uint64_t closure #1 in CMLTable.init(from:isCSV:options:)(uint64_t a1, char a2, uint64_t a3)
{
  uint64_t v5 = v3;
  if (a2)
  {
    uint64_t result = specialized handling<A, B, C>(_:_:_:)(a1, *(void *)(a3 + 16));
    if (v4) {
      return result;
    }
    if (!result) {
      BUG();
    }
  }
  else
  {
    uint64_t result = specialized handling<A, B>(_:_:)(a1);
    if (v4) {
      return result;
    }
    if (!result) {
      BUG();
    }
  }
  uint64_t *v5 = result;
  return result;
}

uint64_t specialized String.withCString<A>(_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v10 = a3;
  uint64_t v11 = a4;
  if ((a2 & 0x1000000000000000) != 0 || !(a2 & 0x2000000000000000 | a1 & 0x1000000000000000))
  {
    _StringGuts._slowWithCString<A>(_:)(partial apply for closure #1 in CMLParameters.add(key:featureValue:), v9, a1, a2, (char *)&type metadata for () + 8);
  }
  else
  {
    uint64_t v12 = v8;
    if ((a2 & 0x2000000000000000) != 0)
    {
      v8[0] = a1;
      v8[1] = a2 & 0xFFFFFFFFFFFFFFLL;
      specialized handling<A, B, C, D>(_:_:_:_:)(*(void *)(a3 + 16), (uint64_t)v8, *(void *)(a4 + 16));
    }
    else
    {
      if ((a1 & 0x1000000000000000) != 0)
      {
        uint64_t v4 = (a2 & 0xFFFFFFFFFFFFFFFLL) + 32;
        uint64_t v5 = a1 & 0xFFFFFFFFFFFFLL;
      }
      else
      {
        uint64_t v4 = _StringObject.sharedUTF8.getter(a1, a2);
        uint64_t v5 = v7;
      }
      _sSRsRi_zrlE17withMemoryRebound2to_qd_1_qd__m_qd_1_SRyqd__Gqd_0_YKXEtqd_0_YKs5ErrorRd_0_Ri_d__Ri_d_1_r1_lFSRyxGq0_q_Ri_zRi0_zRi__Ri0__Ri_0_Ri0_0_r1_lys4Int8VsAD_pqd_1_Isgyrzr_SRys5UInt8VGqd_1_sAD_pAIRszAGRsd__sAD_pRsd_0_Ri_d_1_r_1_lIetMgyrzo_Tpq5yt_Tg507_sSRys4f5VGxs5E34_pIgyrzo_ACxsAD_pIegyrzr_lTRyt_TG5SRyAGGytsAD_pIgyrzo_Tf1ncn_n038_ss11_StringGutsV11withCStringyxxSPys4F27VGKXEKlFxSRyAEGKXEfU_yt_Tg5SPyAGGxsAD_pRi_zRi0_zlyytIsgyrzo_Tf1nnc_n(v4, v5, (uint64_t (*)(uint64_t))partial apply for closure #1 in CMLParameters.add(key:featureValue:));
    }
  }
  swift_release();
  return swift_release();
}

{
  uint64_t v4;
  uint64_t v5;
  uint64_t v7;
  void v8[2];
  unsigned char v9[16];
  uint64_t v10;
  uint64_t v11;

  uint64_t v10 = a3;
  uint64_t v11 = a4;
  if ((a2 & 0x1000000000000000) != 0 || !(a2 & 0x2000000000000000 | a1 & 0x1000000000000000))
  {
    _StringGuts._slowWithCString<A>(_:)(partial apply for closure #1 in closure #1 in CMLTable.renameColumn(named:to:), v9, a1, a2, (char *)&type metadata for () + 8);
    return swift_release();
  }
  if ((a2 & 0x2000000000000000) == 0)
  {
    if ((a1 & 0x1000000000000000) != 0)
    {
      uint64_t v4 = (a2 & 0xFFFFFFFFFFFFFFFLL) + 32;
      uint64_t v5 = a1 & 0xFFFFFFFFFFFFLL;
    }
    else
    {
      uint64_t v4 = _StringObject.sharedUTF8.getter(a1, a2);
      uint64_t v5 = v7;
    }
    _sSRsRi_zrlE17withMemoryRebound2to_qd_1_qd__m_qd_1_SRyqd__Gqd_0_YKXEtqd_0_YKs5ErrorRd_0_Ri_d__Ri_d_1_r1_lFSRyxGq0_q_Ri_zRi0_zRi__Ri0__Ri_0_Ri0_0_r1_lys4Int8VsAD_pqd_1_Isgyrzr_SRys5UInt8VGqd_1_sAD_pAIRszAGRsd__sAD_pRsd_0_Ri_d_1_r_1_lIetMgyrzo_Tpq5yt_Tg507_sSRys4f5VGxs5E34_pIgyrzo_ACxsAD_pIegyrzr_lTRyt_TG5SRyAGGytsAD_pIgyrzo_Tf1ncn_n038_ss11_StringGutsV11withCStringyxxSPys4F27VGKXEKlFxSRyAEGKXEfU_yt_Tg5SPyAGGxsAD_pRi_zRi0_zlyytIsgyrzo_Tf1nnc_n(v4, v5, (uint64_t (*)(uint64_t))partial apply for closure #1 in closure #1 in CMLTable.renameColumn(named:to:));
    return swift_release();
  }
  v8[0] = a1;
  v8[1] = a2 & 0xFFFFFFFFFFFFFFLL;
  specialized handling<A, B, C, D>(_:_:_:_:)(*(void *)(a3 + 16), a4, (uint64_t)v8);
  return swift_release();
}

uint64_t specialized String.withCString<A>(_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v21 = v5;
  uint64_t v18 = a3;
  uint64_t v19 = a4;
  uint64_t v20 = a5;
  if ((a2 & 0x1000000000000000) != 0 || !(a2 & 0x2000000000000000 | a1 & 0x1000000000000000))
  {
    uint64_t v14 = v21;
    _StringGuts._slowWithCString<A>(_:)(partial apply for closure #1 in CMLTable.renameColumn(named:to:), v17, a1, a2, (char *)&type metadata for () + 8);
    if (!v14) {
      goto LABEL_12;
    }
LABEL_9:
    swift_release();
    return swift_bridgeObjectRelease(a4);
  }
  uint64_t v22 = v16;
  if ((a2 & 0x2000000000000000) != 0)
  {
    v16[0] = a1;
    v16[1] = a2 & 0xFFFFFFFFFFFFFFLL;
    swift_retain();
    uint64_t v12 = v21;
    specialized String.withCString<A>(_:)(a3, a4, a5, (uint64_t)v16);
    if (!v12) {
      goto LABEL_12;
    }
    goto LABEL_9;
  }
  if ((a1 & 0x1000000000000000) != 0)
  {
    uint64_t v9 = (a2 & 0xFFFFFFFFFFFFFFFLL) + 32;
    uint64_t v10 = a1 & 0xFFFFFFFFFFFFLL;
  }
  else
  {
    uint64_t v9 = _StringObject.sharedUTF8.getter(a1, a2);
    uint64_t v10 = v15;
  }
  uint64_t v11 = v21;
  _sSRsRi_zrlE17withMemoryRebound2to_qd_1_qd__m_qd_1_SRyqd__Gqd_0_YKXEtqd_0_YKs5ErrorRd_0_Ri_d__Ri_d_1_r1_lFSRyxGq0_q_Ri_zRi0_zRi__Ri0__Ri_0_Ri0_0_r1_lys4Int8VsAD_pqd_1_Isgyrzr_SRys5UInt8VGqd_1_sAD_pAIRszAGRsd__sAD_pRsd_0_Ri_d_1_r_1_lIetMgyrzo_Tpq5yt_Tg507_sSRys4f5VGxs5E34_pIgyrzo_ACxsAD_pIegyrzr_lTRyt_TG5SRyAGGytsAD_pIgyrzo_Tf1ncn_n038_ss11_StringGutsV11withCStringyxxSPys4F27VGKXEKlFxSRyAEGKXEfU_yt_Tg5SPyAGGxsAD_pRi_zRi0_zlyytIsgyrzo_Tf1nnc_n(v9, v10, partial apply for closure #1 in CMLTable.renameColumn(named:to:));
  if (v11) {
    goto LABEL_9;
  }
LABEL_12:
  swift_bridgeObjectRelease(a4);
  return swift_release();
}

uint64_t specialized String.withCString<A>(_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(uint64_t), void (*a6)(void, void *, void))
{
  uint64_t v9 = a5;
  uint64_t v17 = a3;
  uint64_t v18 = a4;
  if ((a2 & 0x1000000000000000) == 0 && a2 & 0x2000000000000000 | a1 & 0x1000000000000000)
  {
    uint64_t v20 = v15;
    if ((a2 & 0x2000000000000000) != 0)
    {
      v15[0] = a1;
      v15[1] = a2 & 0xFFFFFFFFFFFFFFLL;
      a6(*(void *)(a3 + 16), v15, *(void *)(a4 + 16));
      if (v6)
      {
        swift_release(a4);
        return swift_release(a3);
      }
    }
    else
    {
      if ((a1 & 0x1000000000000000) != 0)
      {
        uint64_t v10 = (a2 & 0xFFFFFFFFFFFFFFFLL) + 32;
        uint64_t v11 = a1 & 0xFFFFFFFFFFFFLL;
      }
      else
      {
        uint64_t v19 = a5;
        uint64_t v14 = _StringObject.sharedUTF8.getter(a1, a2);
        uint64_t v9 = v19;
        uint64_t v10 = v14;
      }
      _sSRsRi_zrlE17withMemoryRebound2to_qd_1_qd__m_qd_1_SRyqd__Gqd_0_YKXEtqd_0_YKs5ErrorRd_0_Ri_d__Ri_d_1_r1_lFSRyxGq0_q_Ri_zRi0_zRi__Ri0__Ri_0_Ri0_0_r1_lys4Int8VsAD_pqd_1_Isgyrzr_SRys5UInt8VGqd_1_sAD_pAIRszAGRsd__sAD_pRsd_0_Ri_d_1_r_1_lIetMgyrzo_Tpq5yt_Tg507_sSRys4f5VGxs5E34_pIgyrzo_ACxsAD_pIegyrzr_lTRyt_TG5SRyAGGytsAD_pIgyrzo_Tf1ncn_n038_ss11_StringGutsV11withCStringyxxSPys4F27VGKXEKlFxSRyAEGKXEfU_yt_Tg5SPyAGGxsAD_pRi_zRi0_zlyytIsgyrzo_Tf1nnc_n(v10, v11, v9);
      if (v6) {
        goto LABEL_7;
      }
    }
LABEL_12:
    swift_release(a3);
    uint64_t v12 = a4;
    return swift_release(v12);
  }
  _StringGuts._slowWithCString<A>(_:)(a5, v16, a1, a2, (char *)&type metadata for () + 8);
  if (!v6) {
    goto LABEL_12;
  }
LABEL_7:
  swift_release(a4);
  uint64_t v12 = a3;
  return swift_release(v12);
}

uint64_t specialized String.withCString<A>(_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, char a7, uint64_t a8)
{
  char v11 = a6;
  uint64_t v25 = a3;
  uint64_t v26 = a4;
  uint64_t v27 = a5;
  uint64_t v28 = a6;
  char v29 = a7 & 1;
  uint64_t v30 = a8;
  if ((a2 & 0x1000000000000000) != 0 || !(a2 & 0x2000000000000000 | a1 & 0x1000000000000000))
  {
    char v12 = a4;
    _StringGuts._slowWithCString<A>(_:)(partial apply for closure #1 in CMLAggregator.add(isMax:toColumnName:aggColumnName:outputColumnName:), v24, a1, a2, (char *)&type metadata for () + 8);
    if (v9)
    {
LABEL_7:
      swift_bridgeObjectRelease(v11);
      swift_bridgeObjectRelease(v12);
      return swift_release();
    }
    goto LABEL_13;
  }
  uint64_t v32 = &v22;
  if ((a2 & 0x2000000000000000) == 0)
  {
    char v12 = a4;
    if ((a1 & 0x1000000000000000) != 0)
    {
      uint64_t v13 = (a2 & 0xFFFFFFFFFFFFFFFLL) + 32;
      uint64_t v14 = a1 & 0xFFFFFFFFFFFFLL;
    }
    else
    {
      uint64_t v33 = v9;
      uint64_t v20 = _StringObject.sharedUTF8.getter(a1, a2);
      uint64_t v9 = v33;
      uint64_t v13 = v20;
      uint64_t v14 = v21;
    }
    _sSRsRi_zrlE17withMemoryRebound2to_qd_1_qd__m_qd_1_SRyqd__Gqd_0_YKXEtqd_0_YKs5ErrorRd_0_Ri_d__Ri_d_1_r1_lFSRyxGq0_q_Ri_zRi0_zRi__Ri0__Ri_0_Ri0_0_r1_lys4Int8VsAD_pqd_1_Isgyrzr_SRys5UInt8VGqd_1_sAD_pAIRszAGRsd__sAD_pRsd_0_Ri_d_1_r_1_lIetMgyrzo_Tpq5yt_Tg507_sSRys4f5VGxs5E34_pIgyrzo_ACxsAD_pIegyrzr_lTRyt_TG5SRyAGGytsAD_pIgyrzo_Tf1ncn_n038_ss11_StringGutsV11withCStringyxxSPys4F27VGKXEKlFxSRyAEGKXEfU_yt_Tg5SPyAGGxsAD_pRi_zRi0_zlyytIsgyrzo_Tf1nnc_n(v13, v14, partial apply for closure #1 in CMLAggregator.add(isMax:toColumnName:aggColumnName:outputColumnName:));
    if (v9) {
      goto LABEL_7;
    }
LABEL_13:
    swift_bridgeObjectRelease(v12);
    goto LABEL_14;
  }
  v23[0] = a1;
  v23[1] = a2 & 0xFFFFFFFFFFFFFFLL;
  uint64_t v31 = a6;
  uint64_t v33 = v9;
  uint64_t v34 = v8;
  swift_bridgeObjectRetain(a6);
  swift_retain();
  char v17 = v31;
  uint64_t v34 = a4;
  uint64_t v18 = v33;
  specialized String.withCString<A>(_:)(a3, a4, a5, v31, a7, a8, (uint64_t)v23);
  if (v18)
  {
    swift_bridgeObjectRelease(v17);
    swift_bridgeObjectRelease(v34);
    return swift_release();
  }
  swift_bridgeObjectRelease(v34);
  char v11 = v17;
LABEL_14:
  swift_release();
  return swift_bridgeObjectRelease(v11);
}

uint64_t specialized String.withCString<A>(_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, char a5, uint64_t a6, uint64_t a7)
{
  char v8 = a4;
  uint64_t v19 = a3;
  uint64_t v20 = a4;
  char v21 = a5 & 1;
  uint64_t v22 = a6;
  uint64_t v23 = a7;
  if ((a2 & 0x1000000000000000) != 0 || !(a2 & 0x2000000000000000 | a1 & 0x1000000000000000))
  {
    _StringGuts._slowWithCString<A>(_:)(partial apply for closure #1 in closure #1 in CMLAggregator.add(isMax:toColumnName:aggColumnName:outputColumnName:), v18, a1, a2, (char *)&type metadata for () + 8);
    if (!v7) {
      goto LABEL_12;
    }
LABEL_9:
    swift_release();
    return swift_bridgeObjectRelease(v8);
  }
  uint64_t v26 = v17;
  if ((a2 & 0x2000000000000000) != 0)
  {
    uint64_t v25 = a4;
    v17[0] = a1;
    v17[1] = a2 & 0xFFFFFFFFFFFFFFLL;
    uint64_t v24 = v7;
    swift_retain();
    char v8 = v25;
    uint64_t v14 = v24;
    specialized String.withCString<A>(_:)(a3, v25, a5, a6, a7, (uint64_t)v17);
    if (!v14) {
      goto LABEL_12;
    }
    goto LABEL_9;
  }
  if ((a1 & 0x1000000000000000) != 0)
  {
    uint64_t v12 = (a2 & 0xFFFFFFFFFFFFFFFLL) + 32;
    uint64_t v13 = a1 & 0xFFFFFFFFFFFFLL;
  }
  else
  {
    uint64_t v12 = _StringObject.sharedUTF8.getter(a1, a2);
    uint64_t v13 = v16;
  }
  _sSRsRi_zrlE17withMemoryRebound2to_qd_1_qd__m_qd_1_SRyqd__Gqd_0_YKXEtqd_0_YKs5ErrorRd_0_Ri_d__Ri_d_1_r1_lFSRyxGq0_q_Ri_zRi0_zRi__Ri0__Ri_0_Ri0_0_r1_lys4Int8VsAD_pqd_1_Isgyrzr_SRys5UInt8VGqd_1_sAD_pAIRszAGRsd__sAD_pRsd_0_Ri_d_1_r_1_lIetMgyrzo_Tpq5yt_Tg507_sSRys4f5VGxs5E34_pIgyrzo_ACxsAD_pIegyrzr_lTRyt_TG5SRyAGGytsAD_pIgyrzo_Tf1ncn_n038_ss11_StringGutsV11withCStringyxxSPys4F27VGKXEKlFxSRyAEGKXEfU_yt_Tg5SPyAGGxsAD_pRi_zRi0_zlyytIsgyrzo_Tf1nnc_n(v12, v13, partial apply for closure #1 in closure #1 in CMLAggregator.add(isMax:toColumnName:aggColumnName:outputColumnName:));
  if (v7) {
    goto LABEL_9;
  }
LABEL_12:
  swift_bridgeObjectRelease(v8);
  return swift_release();
}

uint64_t specialized String.withCString<A>(_:)(uint64_t a1, uint64_t a2, char a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  unsigned char v17[16] = a3 & 1;
  uint64_t v18 = a4;
  uint64_t v19 = a5;
  uint64_t v20 = a6;
  if ((a2 & 0x1000000000000000) != 0 || !(a2 & 0x2000000000000000 | a1 & 0x1000000000000000))
  {
    _StringGuts._slowWithCString<A>(_:)(partial apply for closure #1 in closure #1 in closure #1 in CMLAggregator.add(isMax:toColumnName:aggColumnName:outputColumnName:), v17, a1, a2, (char *)&type metadata for () + 8);
    return swift_release();
  }
  else
  {
    uint64_t v23 = v16;
    if ((a2 & 0x2000000000000000) == 0)
    {
      if ((a1 & 0x1000000000000000) != 0)
      {
        uint64_t v12 = (a2 & 0xFFFFFFFFFFFFFFFLL) + 32;
      }
      else
      {
        uint64_t v21 = v7;
        uint64_t v22 = v6;
        uint64_t v12 = _StringObject.sharedUTF8.getter(a1, a2);
        if (!v12)
        {
          char v13 = a3;
          uint64_t v14 = 0;
          goto LABEL_7;
        }
      }
      char v13 = a3;
      uint64_t v14 = v12;
LABEL_7:
      closure #1 in closure #1 in closure #1 in CMLAggregator.add(isMax:toColumnName:aggColumnName:outputColumnName:)(v14, v13, a4, a5, a6);
      return swift_release();
    }
    v16[0] = a1;
    v16[1] = a2 & 0xFFFFFFFFFFFFFFLL;
    closure #1 in closure #1 in closure #1 in CMLAggregator.add(isMax:toColumnName:aggColumnName:outputColumnName:)((uint64_t)v16, a3, a4, a5, a6);
    return swift_release();
  }
}

uint64_t specialized String.withCString<A>(_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t (*a8)(uint64_t), uint64_t (*a9)(uint64_t), uint64_t (*a10)(uint64_t), void (*a11)(void, uint64_t, uint64_t, void *))
{
  uint64_t v14 = a8;
  uint64_t v25 = a3;
  uint64_t v26 = a4;
  uint64_t v27 = a5;
  uint64_t v28 = a6;
  uint64_t v29 = a7;
  if ((a2 & 0x1000000000000000) != 0 || !(a2 & 0x2000000000000000 | a1 & 0x1000000000000000))
  {
    char v15 = a4;
    _StringGuts._slowWithCString<A>(_:)(a8, v24, a1, a2, (char *)&type metadata for () + 8);
    if (v11)
    {
LABEL_7:
      swift_bridgeObjectRelease(a6);
      swift_bridgeObjectRelease(v15);
      return swift_release();
    }
    goto LABEL_13;
  }
  uint64_t v31 = v23;
  if ((a2 & 0x2000000000000000) == 0)
  {
    char v15 = a4;
    if ((a1 & 0x1000000000000000) != 0)
    {
      uint64_t v16 = (a2 & 0xFFFFFFFFFFFFFFFLL) + 32;
      uint64_t v17 = a1 & 0xFFFFFFFFFFFFLL;
    }
    else
    {
      uint64_t v32 = v11;
      uint64_t v22 = _StringObject.sharedUTF8.getter(a1, a2);
      uint64_t v14 = a8;
      uint64_t v11 = v32;
      uint64_t v16 = v22;
    }
    _sSRsRi_zrlE17withMemoryRebound2to_qd_1_qd__m_qd_1_SRyqd__Gqd_0_YKXEtqd_0_YKs5ErrorRd_0_Ri_d__Ri_d_1_r1_lFSRyxGq0_q_Ri_zRi0_zRi__Ri0__Ri_0_Ri0_0_r1_lys4Int8VsAD_pqd_1_Isgyrzr_SRys5UInt8VGqd_1_sAD_pAIRszAGRsd__sAD_pRsd_0_Ri_d_1_r_1_lIetMgyrzo_Tpq5yt_Tg507_sSRys4f5VGxs5E34_pIgyrzo_ACxsAD_pIegyrzr_lTRyt_TG5SRyAGGytsAD_pIgyrzo_Tf1ncn_n038_ss11_StringGutsV11withCStringyxxSPys4F27VGKXEKlFxSRyAEGKXEfU_yt_Tg5SPyAGGxsAD_pRi_zRi0_zlyytIsgyrzo_Tf1nnc_n(v16, v17, v14);
    if (v11) {
      goto LABEL_7;
    }
LABEL_13:
    swift_bridgeObjectRelease(v15);
    goto LABEL_14;
  }
  v23[0] = a1;
  v23[1] = a2 & 0xFFFFFFFFFFFFFFLL;
  uint64_t v30 = a4;
  uint64_t v32 = v11;
  swift_bridgeObjectRetain(a6);
  swift_retain();
  char v19 = v30;
  uint64_t v20 = v32;
  specialized String.withCString<A>(_:)(a3, v30, a5, a6, a7, (uint64_t)v23, a9, a10, a11);
  if (v20)
  {
    swift_bridgeObjectRelease(a6);
    swift_bridgeObjectRelease(v19);
    return swift_release();
  }
  swift_bridgeObjectRelease(v19);
LABEL_14:
  swift_release();
  return swift_bridgeObjectRelease(a6);
}

uint64_t specialized String.withCString<A>(_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t (*a7)(uint64_t), uint64_t (*a8)(uint64_t), void (*a9)(void, uint64_t, uint64_t, void *))
{
  char v10 = a4;
  uint64_t v14 = a7;
  uint64_t v23 = a3;
  uint64_t v24 = a4;
  uint64_t v25 = a5;
  uint64_t v26 = a6;
  if ((a2 & 0x1000000000000000) != 0 || !(a2 & 0x2000000000000000 | a1 & 0x1000000000000000))
  {
    _StringGuts._slowWithCString<A>(_:)(a7, v22, a1, a2, (char *)&type metadata for () + 8);
    if (!v9) {
      goto LABEL_12;
    }
LABEL_9:
    swift_release();
    return swift_bridgeObjectRelease(v10);
  }
  uint64_t v29 = &v20;
  if ((a2 & 0x2000000000000000) != 0)
  {
    uint64_t v28 = a4;
    v21[0] = a1;
    v21[1] = a2 & 0xFFFFFFFFFFFFFFLL;
    uint64_t v27 = v9;
    swift_retain();
    char v10 = v28;
    uint64_t v17 = v27;
    specialized String.withCString<A>(_:)(a3, v28, a5, a6, (uint64_t)v21, a8, a9);
    if (!v17) {
      goto LABEL_12;
    }
    goto LABEL_9;
  }
  if ((a1 & 0x1000000000000000) != 0)
  {
    uint64_t v15 = (a2 & 0xFFFFFFFFFFFFFFFLL) + 32;
    uint64_t v16 = a1 & 0xFFFFFFFFFFFFLL;
  }
  else
  {
    uint64_t v19 = _StringObject.sharedUTF8.getter(a1, a2);
    uint64_t v14 = a7;
    uint64_t v15 = v19;
  }
  _sSRsRi_zrlE17withMemoryRebound2to_qd_1_qd__m_qd_1_SRyqd__Gqd_0_YKXEtqd_0_YKs5ErrorRd_0_Ri_d__Ri_d_1_r1_lFSRyxGq0_q_Ri_zRi0_zRi__Ri0__Ri_0_Ri0_0_r1_lys4Int8VsAD_pqd_1_Isgyrzr_SRys5UInt8VGqd_1_sAD_pAIRszAGRsd__sAD_pRsd_0_Ri_d_1_r_1_lIetMgyrzo_Tpq5yt_Tg507_sSRys4f5VGxs5E34_pIgyrzo_ACxsAD_pIegyrzr_lTRyt_TG5SRyAGGytsAD_pIgyrzo_Tf1ncn_n038_ss11_StringGutsV11withCStringyxxSPys4F27VGKXEKlFxSRyAEGKXEfU_yt_Tg5SPyAGGxsAD_pRi_zRi0_zlyytIsgyrzo_Tf1nnc_n(v15, v16, v14);
  if (v9) {
    goto LABEL_9;
  }
LABEL_12:
  swift_bridgeObjectRelease(v10);
  return swift_release();
}

uint64_t specialized String.withCString<A>(_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t (*a6)(uint64_t), void (*a7)(void, uint64_t, uint64_t, void *))
{
  uint64_t v13 = a3;
  uint64_t v14 = a4;
  uint64_t v15 = a5;
  if ((a2 & 0x1000000000000000) != 0 || !(a2 & 0x2000000000000000 | a1 & 0x1000000000000000))
  {
    _StringGuts._slowWithCString<A>(_:)(a6, v12, a1, a2, (char *)&type metadata for () + 8);
    return swift_release();
  }
  if ((a2 & 0x2000000000000000) == 0)
  {
    if ((a1 & 0x1000000000000000) != 0)
    {
      uint64_t v7 = (a2 & 0xFFFFFFFFFFFFFFFLL) + 32;
      uint64_t v8 = a1 & 0xFFFFFFFFFFFFLL;
    }
    else
    {
      uint64_t v16 = a6;
      uint64_t v10 = _StringObject.sharedUTF8.getter(a1, a2);
      a6 = v16;
      uint64_t v7 = v10;
    }
    _sSRsRi_zrlE17withMemoryRebound2to_qd_1_qd__m_qd_1_SRyqd__Gqd_0_YKXEtqd_0_YKs5ErrorRd_0_Ri_d__Ri_d_1_r1_lFSRyxGq0_q_Ri_zRi0_zRi__Ri0__Ri_0_Ri0_0_r1_lys4Int8VsAD_pqd_1_Isgyrzr_SRys5UInt8VGqd_1_sAD_pAIRszAGRsd__sAD_pRsd_0_Ri_d_1_r_1_lIetMgyrzo_Tpq5yt_Tg507_sSRys4f5VGxs5E34_pIgyrzo_ACxsAD_pIegyrzr_lTRyt_TG5SRyAGGytsAD_pIgyrzo_Tf1ncn_n038_ss11_StringGutsV11withCStringyxxSPys4F27VGKXEKlFxSRyAEGKXEfU_yt_Tg5SPyAGGxsAD_pRi_zRi0_zlyytIsgyrzo_Tf1nnc_n(v7, v8, a6);
    return swift_release();
  }
  v11[0] = a1;
  v11[1] = a2 & 0xFFFFFFFFFFFFFFLL;
  a7(*(void *)(a3 + 16), a4, a5, v11);
  return swift_release();
}

uint64_t closure #1 in CMLTable.init(from:)(uint64_t a1)
{
  return closure #1 in CMLTable.init(from:)(a1, specialized handling<A, B>(_:_:));
}

uint64_t closure #1 in CMLTable.init(joiningMultiple:and:columnNames:method:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6 = v4;
  uint64_t result = specialized handling<A, B, C, D, E>(_:_:_:_:_:)(*(void *)(a2 + 16), *(void *)(a3 + 16), *(void *)(a4 + 16), a1);
  if (!v5)
  {
    if (!result) {
      BUG();
    }
    uint64_t *v6 = result;
  }
  return result;
}

uint64_t CMLTable.__allocating_init(concatenating:and:)(uint64_t a1, uint64_t a2)
{
  return CMLColumn.__allocating_init(concatenating:and:)(a1, a2, specialized handling<A, B, C>(_:_:_:));
}

uint64_t CMLColumn.__allocating_init(concatenating:and:)(uint64_t a1, uint64_t a2, uint64_t (*a3)(void, void))
{
  uint64_t v5 = a3(*(void *)(a1 + 16), *(void *)(a2 + 16));
  if (v3)
  {
    swift_release(a1);
    return swift_release(a2);
  }
  else
  {
    uint64_t v8 = v4;
    if (!v5) {
      BUG();
    }
    uint64_t v7 = v5;
    swift_release(a1);
    swift_release(a2);
    uint64_t result = swift_allocObject(v8, 24, 7);
    *(void *)(result + 16) = v7;
  }
  return result;
}

Swift::Int __swiftcall __spoils<cf,zf,sf,of,pf,rax,rdx,rcx,rdi,rsi,r8,r9,r10,r11,r12,xmm0,xmm1,xmm2,xmm3,xmm4,xmm5,xmm6,xmm7> CMLTable.rows()()
{
  return CMLMultiArray.dimensions()(specialized handling<A, B>(_:_:));
}

Swift::Int __swiftcall __spoils<cf,zf,sf,of,pf,rax,rdx,rcx,rdi,rsi,r8,r9,r10,r11,r12,xmm0,xmm1,xmm2,xmm3,xmm4,xmm5,xmm6,xmm7> CMLTable.columns()()
{
  return CMLMultiArray.dimensions()(specialized handling<A, B>(_:_:));
}

uint64_t CMLMultiArray.dimensions()(uint64_t (*a1)(void))
{
  uint64_t result = a1(*(void *)(v2 + 16));
  if (!v1 && result < 0) {
    BUG();
  }
  return result;
}

uint64_t CMLTable.addColumn(name:_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  swift_retain(v3);
  swift_retain(a3);
  return specialized String.withCString<A>(_:)(a1, a2, v3, a3, partial apply for closure #1 in CMLTable.addColumn(name:_:), (void (*)(void, void *, void))specialized handling<A, B, C, D>(_:_:_:_:));
}

NSURL *closure #1 in CMLTable.removeColumn(name:)(uint64_t a1, uint64_t a2)
{
  return specialized handling<A, B, C>(_:_:_:)(*(void *)(a2 + 16), a1);
}

Swift::Void __swiftcall __spoils<cf,zf,sf,of,pf,rax,rdx,rcx,rdi,rsi,r8,r9,r10,r11,r12,xmm0,xmm1,xmm2,xmm3,xmm4,xmm5,xmm6,xmm7> CMLTable.renameColumn(named:to:)(Swift::String named, Swift::String to)
{
  char object = to._object;
  uint64_t countAndFlagsBits = to._countAndFlagsBits;
  swift_bridgeObjectRetain(to._object);
  swift_retain();
  specialized String.withCString<A>(_:)(named._countAndFlagsBits, (uint64_t)named._object, countAndFlagsBits, (uint64_t)object, v2);
}

uint64_t closure #1 in CMLTable.renameColumn(named:to:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return specialized String.withCString<A>(_:)(a2, a3, a4, a1);
}

NSURL *closure #1 in closure #1 in CMLTable.renameColumn(named:to:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return specialized handling<A, B, C, D>(_:_:_:_:)(*(void *)(a2 + 16), a3, a1);
}

uint64_t closure #1 in CMLTable.column(name:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = v2;
  uint64_t result = specialized handling<A, B, C>(_:_:_:)(*(void *)(a2 + 16), a1);
  if (!v3)
  {
    uint64_t v6 = result;
    if (!result) {
      BUG();
    }
    uint64_t v7 = type metadata accessor for CMLColumn();
    uint64_t result = swift_allocObject(v7, 24, 7);
    *(void *)(result + 16) = v6;
    *uint64_t v4 = result;
  }
  return result;
}

unint64_t closure #1 in CMLTable.columnType(name:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = v2;
  unint64_t result = specialized handling<A, B, C>(_:_:_:)(*(void *)(a2 + 16), a1);
  if (!v3)
  {
    char v6 = __CMLFeatureValueType.init(rawValue:)(result);
    if (v6 == 8) {
      BUG();
    }
    unint64_t result = CMLFeatureValueType.init(_:)(v6);
    *uint64_t v4 = result;
  }
  return result;
}

uint64_t closure #1 in CMLTable.sorted(by:increasingOrder:)(uint64_t a1, uint64_t a2, char a3)
{
  uint64_t v5 = v3;
  uint64_t result = specialized handling<A, B, C, D>(_:_:_:_:)(*(void *)(a2 + 16), a1, a3);
  if (!v4)
  {
    uint64_t v7 = result;
    if (!result) {
      BUG();
    }
    uint64_t v8 = type metadata accessor for CMLTable();
    uint64_t result = swift_allocObject(v8, 24, 7);
    *(void *)(result + 16) = v7;
    uint64_t *v5 = result;
  }
  return result;
}

uint64_t CMLTable.row(at:)(uint64_t a1)
{
  if (a1 < 0)
  {
    _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, "Negative value is not representable", 35, 2, "Swift/Integers.swift", 20, 2, 3451, 1);
    BUG();
  }
  uint64_t result = specialized handling<A, B, C>(_:_:_:)(*(void *)(v2 + 16), a1);
  uint64_t v4 = result;
  if (!v1)
  {
    if (!result) {
      BUG();
    }
    uint64_t v5 = type metadata accessor for CMLSequence();
    uint64_t result = swift_allocObject(v5, 25, 7);
    *(void *)(result + 16) = v4;
    *(unsigned char *)(result + 24) = 1;
  }
  return result;
}

uint64_t CMLTable.split(fraction:seed:)(uint64_t a1)
{
  uint64_t v4 = *v2;
  uint64_t v10 = 0;
  uint64_t v9 = 0;
  specialized handling<A, B, C, D, E, F>(_:_:_:_:_:_:)(v2[2], a1, (uint64_t)&v10, (uint64_t)&v9);
  if (!v1)
  {
    uint64_t v5 = v10;
    if (!v10) {
      BUG();
    }
    uint64_t v6 = swift_allocObject(v4, 24, 7);
    *(void *)(v6 + 16) = v5;
    uint64_t v7 = v9;
    if (!v9) {
      BUG();
    }
    uint64_t v3 = v6;
    *(void *)(swift_allocObject(v4, 24, 7) + 16) = v7;
  }
  return v3;
}

NSURL *closure #1 in CMLTable.save(to:type:)(NSURL *a1, uint64_t a2, uint64_t a3)
{
  uint64_t result = a1;
  if (a2 == 2)
  {
    uint64_t v4 = *(void *)(a3 + 16);
    uint64_t v5 = "json";
  }
  else if (a2 == 1)
  {
    uint64_t v4 = *(void *)(a3 + 16);
    uint64_t v5 = "binary";
  }
  else
  {
    if (a2) {
      return result;
    }
    uint64_t v4 = *(void *)(a3 + 16);
    uint64_t v5 = "csv";
  }
  return specialized handling<A, B, C, D, E>(_:_:_:_:_:)(v4, (uint64_t)result, (uint64_t)v5, 0);
}

Swift::String __swiftcall __spoils<cf,zf,sf,of,pf,rax,rdx,rcx,rdi,rsi,r8,r9,r10,r11,r12,xmm0,xmm1,xmm2,xmm3,xmm4,xmm5,xmm6,xmm7> CMLTable.description()()
{
  result._uint64_t countAndFlagsBits = specialized handling<A, B>(_:_:)(*(void *)(v1 + 16));
  if (!v0)
  {
    uint64_t v3 = specialized handling<A, B>(_:_:)(result._countAndFlagsBits);
    if (!v3) {
      BUG();
    }
    result._uint64_t countAndFlagsBits = String.init(cString:)(v3);
  }
  return result;
}

uint64_t CMLTable.apply(transform:type:)(uint64_t a1, uint64_t a2, char a3)
{
  uint64_t v5 = swift_allocObject(&unk_398800, 32, 7);
  *(void *)(v5 + 16) = a1;
  *(void *)(v5 + 24) = a2;
  swift_retain();
  uint64_t v6 = (void *)specialized static UnsafeMutablePointer.allocate(capacity:)(1);
  uint64_t v7 = swift_allocObject(&unk_398828, 32, 7);
  *(void *)(v7 + 16) = partial apply for closure #1 in CMLTable.apply(transform:type:);
  *(void *)(v7 + 24) = v5;
  void *v6 = thunk for @escaping @callee_guaranteed (@unowned OpaquePointer) -> (@unowned OpaquePointer)partial apply;
  v6[1] = v7;
  uint64_t v8 = *(void *)(v4 + 16);
  uint64_t v9 = qword_3493A8[(char)CMLFeatureValueType.rawValue.getter(a3)];
  swift_retain();
  uint64_t v10 = specialized handling<A, B, C, D, E, F>(_:_:_:_:_:_:)(v8, (uint64_t)@objc invokeContext #1 (rawInput:context:error:) in CMLTable.apply(transform:type:), (uint64_t)@objc releaseContext #1 (context:) in CMLTable.apply(transform:type:), (uint64_t)v6, v9);
  if (v3)
  {
    swift_unexpectedError(v3, "CreateML/_ForwardingWrapper.swift", 33, 1);
    BUG();
  }
  uint64_t v11 = v10;
  if (!v10) {
    BUG();
  }
  swift_release();
  uint64_t v12 = type metadata accessor for CMLColumn();
  uint64_t result = swift_allocObject(v12, 24, 7);
  *(void *)(result + 16) = v11;
  return result;
}

uint64_t closure #1 in CMLTable.apply(transform:type:)(uint64_t a1, void (*a2)(uint64_t))
{
  uint64_t v2 = type metadata accessor for CMLSequence();
  uint64_t v3 = swift_allocObject(v2, 25, 7);
  *(void *)(v3 + 16) = a1;
  *(unsigned char *)(v3 + 24) = 0;
  a2(v3);
  swift_release();
  uint64_t v4 = CMLFeatureValue.releaseRawValue()(v3);
  swift_release();
  return v4;
}

uint64_t releaseContext #1 (context:) in CMLColumn.apply(transform:type:skipUndefined:)(uint64_t a1)
{
  if (a1)
  {
    uint64_t v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ());
    swift_arrayDestroy(a1, 1, v1);
    return swift_slowDealloc(a1, -1, -1);
  }
  return result;
}

uint64_t invokeContext #1 (rawInput:context:error:) in CMLColumn.apply(transform:type:skipUndefined:)(uint64_t a1, uint64_t a2)
{
  if (!a2) {
    BUG();
  }
  if (!a1) {
    BUG();
  }
  uint64_t v2 = *(void (**)(void *))a2;
  uint64_t v3 = *(void *)(a2 + 8);
  v5[0] = a1;
  swift_retain(v3);
  v2(v5);
  swift_release(v3);
  return v5[1];
}

uint64_t @objc invokeContext #1 (rawInput:context:error:) in CMLTable.apply(transform:type:)(uint64_t a1, uint64_t a2)
{
  return invokeContext #1 (rawInput:context:error:) in CMLColumn.apply(transform:type:skipUndefined:)(a1, a2);
}

uint64_t @objc releaseContext #1 (context:) in CMLTable.apply(transform:type:)(uint64_t a1)
{
  return releaseContext #1 (context:) in CMLColumn.apply(transform:type:skipUndefined:)(a1);
}

uint64_t closure #1 in CMLTable.fillMissing(columnNamed:with:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = v3;
  uint64_t result = specialized handling<A, B, C, D>(_:_:_:_:)(*(void *)(a2 + 16), a1, *(void *)(a3 + 16));
  if (!v4)
  {
    uint64_t v7 = result;
    if (!result) {
      BUG();
    }
    uint64_t v8 = type metadata accessor for CMLTable();
    uint64_t result = swift_allocObject(v8, 24, 7);
    *(void *)(result + 16) = v7;
    uint64_t *v5 = result;
  }
  return result;
}

uint64_t CMLTable.filtered(_:columnName:isExcluding:)(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  uint64_t v12 = *v5;
  uint64_t v7 = v5[2];
  uint64_t v8 = *(void *)(a1 + 16);
  uint64_t v9 = String.utf8CString.getter(a2);
  uint64_t v10 = specialized handling<A, B, C, D, E>(_:_:_:_:_:)(v7, v8, v9 + 32, a4);
  uint64_t result = swift_release();
  if (!v4)
  {
    if (!v10) {
      BUG();
    }
    uint64_t result = swift_allocObject(v12, 24, 7);
    *(void *)(result + 16) = v10;
  }
  return result;
}

uint64_t closure #1 in CMLTable.stack(columnName:to:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return closure #1 in CMLTable.stack(columnName:to:)(a1, a2, a3, a4, (uint64_t (*)(void))partial apply for closure #1 in closure #1 in CMLTable.stack(columnName:to:));
}

uint64_t closure #1 in closure #1 in CMLTable.stack(columnName:to:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = v3;
  uint64_t result = specialized handling<A, B, C, D, E>(_:_:_:_:_:)(*(void *)(a2 + 16), a3, a1, 0);
  if (!v4)
  {
    uint64_t v7 = result;
    if (!result) {
      BUG();
    }
    uint64_t v8 = type metadata accessor for CMLTable();
    uint64_t result = swift_allocObject(v8, 24, 7);
    *(void *)(result + 16) = v7;
    uint64_t *v5 = result;
  }
  return result;
}

uint64_t closure #1 in CMLTable.unstack(columnName:newColumnName:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return closure #1 in CMLTable.stack(columnName:to:)(a1, a2, a3, a4, (uint64_t (*)(void))partial apply for closure #1 in closure #1 in CMLTable.unstack(columnName:newColumnName:));
}

uint64_t closure #1 in CMLTable.stack(columnName:to:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(void))
{
  uint64_t v7 = v5;
  uint64_t v10 = a4;
  uint64_t v11 = a1;
  uint64_t result = specialized String.withCString<A>(_:)(a5, (uint64_t)v9, a2, a3);
  if (!v6) {
    *uint64_t v7 = result;
  }
  return result;
}

uint64_t closure #1 in closure #1 in CMLTable.unstack(columnName:newColumnName:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = v3;
  uint64_t result = specialized handling<A, B, C, D>(_:_:_:_:)(*(void *)(a2 + 16), a3, a1);
  if (!v4)
  {
    uint64_t v7 = result;
    if (!result) {
      BUG();
    }
    uint64_t v8 = type metadata accessor for CMLTable();
    uint64_t result = swift_allocObject(v8, 24, 7);
    *(void *)(result + 16) = v7;
    uint64_t *v5 = result;
  }
  return result;
}

uint64_t closure #1 in CMLTable.pack(columnNames:newColumnName:type:value:)(uint64_t a1, uint64_t a2, uint64_t a3, char a4, uint64_t a5)
{
  uint64_t v14 = v5;
  uint64_t v8 = *(void *)(a2 + 16);
  uint64_t v9 = *(void *)(a3 + 16);
  char v10 = CMLFeatureValueType.rawValue.getter(a4);
  uint64_t result = specialized handling<A, B, C, D, E, F>(_:_:_:_:_:_:)(v8, v9, a1, qword_3493A8[v10], *(void *)(a5 + 16));
  if (!v6)
  {
    uint64_t v12 = result;
    if (!result) {
      BUG();
    }
    uint64_t v13 = type metadata accessor for CMLTable();
    uint64_t result = swift_allocObject(v13, 24, 7);
    *(void *)(result + 16) = v12;
    uint64_t *v14 = result;
  }
  return result;
}

uint64_t closure #1 in CMLTable.unpack(columnName:types:limit:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6 = v4;
  uint64_t v9 = a2;
  uint64_t v10 = a1;
  uint64_t v11 = a3;
  uint64_t v12 = a4;
  uint64_t result = specialized String.withCString<A>(_:)((uint64_t (*)(void))partial apply for closure #1 in closure #1 in CMLTable.unpack(columnName:types:limit:), (uint64_t)v8, 0, 0xE000000000000000);
  if (!v5) {
    uint64_t *v6 = result;
  }
  return result;
}

uint64_t closure #1 in closure #1 in CMLTable.unpack(columnName:types:limit:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v15 = v5;
  type metadata accessor for CMLFeatureValue();
  uint64_t v8 = CMLFeatureValue.__allocating_init()(a1);
  uint64_t v9 = specialized handling<A, B, C, D, E, F, G>(_:_:_:_:_:_:_:)(*(void *)(a2 + 16), a3, a1, *(void *)(a4 + 16), *(void *)(v8 + 16), *(void *)(a5 + 16));
  if (v6) {
    return swift_release();
  }
  uint64_t v11 = v9;
  if (!v9) {
    BUG();
  }
  swift_release();
  uint64_t v12 = type metadata accessor for CMLTable();
  uint64_t result = swift_allocObject(v12, 24, 7);
  *(void *)(result + 16) = v11;
  uint64_t *v15 = result;
  return result;
}

uint64_t type metadata accessor for CMLVariant()
{
  return objc_opt_self(_TtC8CreateML10CMLVariant);
}

uint64_t type metadata accessor for CMLParameters()
{
  return objc_opt_self(_TtC8CreateML13CMLParameters);
}

uint64_t closure #1 in CMLParameters.featureValue(for:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = v2;
  uint64_t result = specialized handling<A, B, C>(_:_:_:)(*(void *)(a2 + 16), a1);
  if (!v3)
  {
    uint64_t v6 = result;
    if (!result) {
      BUG();
    }
    uint64_t v7 = type metadata accessor for CMLFeatureValue();
    uint64_t result = swift_allocObject(v7, 25, 7);
    *(void *)(result + 16) = v6;
    *(unsigned char *)(result + 24) = 1;
    *uint64_t v4 = result;
  }
  return result;
}

uint64_t CMLParameters.table(for:)(char a1)
{
  return CMLParameters.featureValue(for:)(a1, (uint64_t)partial apply for closure #1 in CMLParameters.table(for:), (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))specialized String.withCString<A>(_:));
}

uint64_t CMLParameters.featureValue(for:)(char a1, uint64_t a2, uint64_t (*a3)(uint64_t, uint64_t, uint64_t, uint64_t))
{
  uint64_t v4 = CMLParameters.Key.rawValue.getter(a1);
  char v6 = v5;
  uint64_t v7 = a3(a2, v3, v4, v5);
  swift_bridgeObjectRelease(v6);
  return v7;
}

uint64_t closure #1 in CMLParameters.table(for:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = v2;
  uint64_t result = specialized handling<A, B, C>(_:_:_:)(*(void *)(a2 + 16), a1);
  if (!v3)
  {
    uint64_t v6 = result;
    if (!result) {
      BUG();
    }
    uint64_t v7 = type metadata accessor for CMLTable();
    uint64_t result = swift_allocObject(v7, 24, 7);
    *(void *)(result + 16) = v6;
    *uint64_t v4 = result;
  }
  return result;
}

NSURL *closure #1 in CMLParameters.add(key:featureValue:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return specialized handling<A, B, C, D>(_:_:_:_:)(*(void *)(a2 + 16), a1, *(void *)(a3 + 16));
}

uint64_t CMLParameters.add(key:table:)(char a1, uint64_t a2)
{
  return CMLParameters.add(key:column:)(a1, a2, partial apply for closure #1 in CMLParameters.add(key:table:), (void (*)(void, void *, void))specialized handling<A, B, C, D>(_:_:_:_:));
}

uint64_t CMLParameters.add(key:column:)(char a1, uint64_t a2, uint64_t (*a3)(uint64_t), void (*a4)(void, void *, void))
{
  uint64_t v5 = CMLParameters.Key.rawValue.getter(a1);
  uint64_t v7 = v6;
  swift_retain();
  swift_retain();
  specialized String.withCString<A>(_:)(v5, v7, v4, a2, a3, a4);
  return swift_bridgeObjectRelease(v7);
}

uint64_t closure #1 in CMLTable.addColumn(name:_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(void, uint64_t, void))
{
  return a4(*(void *)(a2 + 16), a1, *(void *)(a3 + 16));
}

uint64_t type metadata accessor for CMLAggregator()
{
  return objc_opt_self(_TtC8CreateML13CMLAggregator);
}

Swift::Void __swiftcall __spoils<cf,zf,sf,of,pf,rax,rdx,rcx,rdi,rsi,r8,r9,r10,r11,r12,xmm0,xmm1,xmm2,xmm3,xmm4,xmm5,xmm6,xmm7> CMLAggregator.add(operation:toColumnName:fromColumnName:)(Swift::String operation, Swift::String toColumnName, Swift::String fromColumnName)
{
  *((void *)&v4 + 1) = specialized handling<A, B, C, D, E>(_:_:_:_:_:);
  *(void *)&long long v4 = partial apply for closure #1 in closure #1 in closure #1 in CMLAggregator.add(operation:toColumnName:fromColumnName:);
  *((void *)&v3 + 1) = partial apply for closure #1 in closure #1 in CMLAggregator.add(operation:toColumnName:fromColumnName:);
  *(void *)&long long v3 = partial apply for closure #1 in CMLAggregator.add(operation:toColumnName:fromColumnName:);
  CMLAggregator.add(operation:toColumnName:fromColumnName:)(operation._countAndFlagsBits, (uint64_t)operation._object, toColumnName._countAndFlagsBits, (uint64_t)toColumnName._object, fromColumnName._countAndFlagsBits, (uint64_t)fromColumnName._object, v3, v4);
}

Swift::Void __swiftcall __spoils<cf,zf,sf,of,pf,rax,rdx,rcx,rdi,rsi,r8,r9,r10,r11,r12,xmm0,xmm1,xmm2,xmm3,xmm4,xmm5,xmm6,xmm7> CMLAggregator.add(isMax:toColumnName:aggColumnName:outputColumnName:)(Swift::Bool isMax, Swift::String toColumnName, Swift::String aggColumnName, Swift::String outputColumnName)
{
  uint64_t countAndFlagsBits = outputColumnName._countAndFlagsBits;
  char object = aggColumnName._object;
  uint64_t v7 = aggColumnName._countAndFlagsBits;
  uint64_t v8 = toColumnName._object;
  swift_bridgeObjectRetain(aggColumnName._object);
  swift_bridgeObjectRetain(outputColumnName._object);
  swift_retain();
  specialized String.withCString<A>(_:)(toColumnName._countAndFlagsBits, (uint64_t)v8, v7, (uint64_t)object, countAndFlagsBits, (uint64_t)outputColumnName._object, isMax, v4);
}

uint64_t closure #1 in CMLAggregator.add(isMax:toColumnName:aggColumnName:outputColumnName:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, char a6, uint64_t a7)
{
  return specialized String.withCString<A>(_:)(a2, a3, a4, a5, a6, a7, a1);
}

uint64_t closure #1 in closure #1 in CMLAggregator.add(isMax:toColumnName:aggColumnName:outputColumnName:)(uint64_t a1, uint64_t a2, uint64_t a3, char a4, uint64_t a5, uint64_t a6)
{
  return specialized String.withCString<A>(_:)(a2, a3, a4, a5, a6, a1);
}

NSURL *closure #1 in closure #1 in closure #1 in CMLAggregator.add(isMax:toColumnName:aggColumnName:outputColumnName:)(uint64_t a1, char a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v7 = *(void *)(a3 + 16);
  if (a2) {
    return specialized handling<A, B, C, D, E>(_:_:_:_:_:)(v7, a4, a5, a1);
  }
  else {
    return specialized handling<A, B, C, D, E>(_:_:_:_:_:)(v7, a4, a5, a1);
  }
}

Swift::Void __swiftcall __spoils<cf,zf,sf,of,pf,rax,rdx,rcx,rdi,rsi,r8,r9,r10,r11,r12,xmm0,xmm1,xmm2,xmm3,xmm4,xmm5,xmm6,xmm7> CMLAggregator.add(concatToColumnName:keyColumnName:valueColumnName:)(Swift::String concatToColumnName, Swift::String keyColumnName, Swift::String valueColumnName)
{
  *((void *)&v4 + 1) = specialized handling<A, B, C, D, E>(_:_:_:_:_:);
  *(void *)&long long v4 = partial apply for closure #1 in closure #1 in closure #1 in CMLAggregator.add(concatToColumnName:keyColumnName:valueColumnName:);
  *((void *)&v3 + 1) = partial apply for closure #1 in closure #1 in CMLAggregator.add(concatToColumnName:keyColumnName:valueColumnName:);
  *(void *)&long long v3 = partial apply for closure #1 in CMLAggregator.add(concatToColumnName:keyColumnName:valueColumnName:);
  CMLAggregator.add(operation:toColumnName:fromColumnName:)(concatToColumnName._countAndFlagsBits, (uint64_t)concatToColumnName._object, keyColumnName._countAndFlagsBits, (uint64_t)keyColumnName._object, valueColumnName._countAndFlagsBits, (uint64_t)valueColumnName._object, v3, v4);
}

uint64_t CMLAggregator.add(operation:toColumnName:fromColumnName:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, long long a7, long long a8)
{
  swift_bridgeObjectRetain(a4);
  swift_bridgeObjectRetain(a6);
  swift_retain();
  return specialized String.withCString<A>(_:)(a1, a2, a3, a4, a5, a6, v8, (uint64_t (*)(uint64_t))a7, *((uint64_t (**)(uint64_t))&a7 + 1), (uint64_t (*)(uint64_t))a8, *((void (**)(void, uint64_t, uint64_t, void *))&a8 + 1));
}

uint64_t closure #1 in CMLAggregator.add(operation:toColumnName:fromColumnName:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, long long a7, void (*a8)(void, uint64_t, uint64_t, void *))
{
  return specialized String.withCString<A>(_:)(a2, a3, a4, a5, a6, a1, (uint64_t (*)(uint64_t))a7, *((uint64_t (**)(uint64_t))&a7 + 1), a8);
}

uint64_t closure #1 in closure #1 in CMLAggregator.add(operation:toColumnName:fromColumnName:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t (*a6)(uint64_t), void (*a7)(void, uint64_t, uint64_t, void *))
{
  return specialized String.withCString<A>(_:)(a2, a3, a4, a5, a1, a6, a7);
}

uint64_t closure #1 in closure #1 in closure #1 in CMLAggregator.add(operation:toColumnName:fromColumnName:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(void, uint64_t, uint64_t, uint64_t))
{
  return a5(*(void *)(a2 + 16), a3, a4, a1);
}

uint64_t type metadata accessor for CMLPlot()
{
  return objc_opt_self(_TtC8CreateML7CMLPlot);
}

CGImageRef_optional __swiftcall CMLPlot.toImage()()
{
  DeviceRGB = CGColorSpaceCreateDeviceRGB();
  CGContextRef v2 = CGBitmapContextCreate(0, 0x2D0uLL, 0x226uLL, 8uLL, 0, DeviceRGB, 1u);
  if (v2)
  {
    uint64_t v3 = (uint64_t)v2;
    uint64_t v4 = *(void *)(v0 + 16);
    uint64_t v5 = v2;
    specialized handling<A, B, C, D, E>(_:_:_:_:_:)(v4, 0, v3, 0);

    CGImageRef Image = CGBitmapContextCreateImage(v5);
  }
  else
  {

    return 0;
  }
  return (CGImageRef_optional)Image;
}

Swift::Void __swiftcall CMLPlot.nextIteration()()
{
  specialized handling<A, B, C>(_:_:_:)(*(void *)(v0 + 16), 0);
}

Swift::Bool __swiftcall CMLPlot.finishedStreaming()()
{
  return specialized handling<A, B, C>(_:_:_:)(*(void *)(v0 + 16), 0);
}

uint64_t CMLEmbedding.__deallocating_deinit()
{
  return swift_deallocClassInstance(v0, 16, 7);
}

uint64_t type metadata accessor for CMLEmbedding()
{
  return objc_opt_self(_TtC8CreateML12CMLEmbedding);
}

uint64_t type metadata accessor for CMLGazetteer()
{
  return objc_opt_self(_TtC8CreateML12CMLGazetteer);
}

uint64_t type metadata accessor for CMLModel()
{
  return objc_opt_self(_TtC8CreateML8CMLModel);
}

uint64_t closure #1 in CMLModel.init(name:)(uint64_t a1)
{
  return closure #1 in CMLTable.init(from:)(a1, specialized handling<A, B>(_:_:));
}

uint64_t closure #1 in CMLModel.init(url:)(uint64_t a1)
{
  return closure #1 in CMLTable.init(from:)(a1, specialized handling<A, B>(_:_:));
}

uint64_t closure #1 in CMLTable.init(from:)(uint64_t a1, uint64_t (*a2)(uint64_t))
{
  uint64_t v4 = v2;
  uint64_t result = a2(a1);
  if (!v3)
  {
    if (!result) {
      BUG();
    }
    *uint64_t v4 = result;
  }
  return result;
}

Swift::String __swiftcall __spoils<cf,zf,sf,of,pf,rax,rdx,rcx,rdi,rsi,r8,r9,r10,r11,r12,xmm0,xmm1,xmm2,xmm3,xmm4,xmm5,xmm6,xmm7> CMLModel.name()()
{
  result._uint64_t countAndFlagsBits = specialized handling<A, B>(_:_:)(*(void *)(v1 + 16));
  if (!v0)
  {
    if (!result._countAndFlagsBits) {
      BUG();
    }
    result._uint64_t countAndFlagsBits = String.init(cString:)(result._countAndFlagsBits);
  }
  return result;
}

uint64_t closure #1 in CMLModel.callFunction(name:arguments:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = v3;
  uint64_t result = specialized handling<A, B, C, D>(_:_:_:_:)(*(void *)(a2 + 16), a1, *(void *)(a3 + 16));
  if (!v4)
  {
    uint64_t v7 = result;
    if (!result) {
      BUG();
    }
    uint64_t v8 = type metadata accessor for CMLVariant();
    uint64_t result = swift_allocObject(v8, 24, 7);
    *(void *)(result + 16) = v7;
    uint64_t *v5 = result;
  }
  return result;
}

uint64_t partial apply for closure #1 in CMLModel.callFunction(name:arguments:)(uint64_t a1)
{
  return closure #1 in CMLModel.callFunction(name:arguments:)(a1, *(void *)(v1 + 16), *(void *)(v1 + 24));
}

uint64_t sub_CB89E()
{
  swift_release(*(void *)(v0 + 24));
  return swift_deallocObject(v0, 32, 7);
}

uint64_t partial apply for closure #1 in CMLColumn.apply(transform:type:skipUndefined:)(uint64_t a1)
{
  return closure #1 in CMLColumn.apply(transform:type:skipUndefined:)(a1, *(void (**)(uint64_t))(v1 + 16));
}

uint64_t partial apply for thunk for @escaping @callee_guaranteed (@unowned OpaquePointer) -> (@unowned OpaquePointer)(void *a1)
{
  uint64_t v3 = v1;
  uint64_t result = (*(uint64_t (**)(void))(v2 + 16))(*a1);
  uint64_t *v3 = result;
  return result;
}

uint64_t partial apply for closure #1 in CMLParameters.featureValue(for:)(uint64_t a1)
{
  return closure #1 in CMLParameters.featureValue(for:)(a1, v1);
}

uint64_t partial apply for closure #1 in closure #1 in CMLTable.unpack(columnName:types:limit:)(uint64_t a1)
{
  return closure #1 in closure #1 in CMLTable.unpack(columnName:types:limit:)(a1, v1[2], v1[3], v1[4], v1[5]);
}

uint64_t partial apply for closure #1 in closure #1 in CMLTable.unstack(columnName:newColumnName:)(uint64_t a1)
{
  return closure #1 in closure #1 in CMLTable.unstack(columnName:newColumnName:)(a1, *(void *)(v1 + 16), *(void *)(v1 + 24));
}

uint64_t partial apply for closure #1 in closure #1 in CMLTable.stack(columnName:to:)(uint64_t a1)
{
  return closure #1 in closure #1 in CMLTable.stack(columnName:to:)(a1, *(void *)(v1 + 16), *(void *)(v1 + 24));
}

uint64_t partial apply for closure #1 in CMLTable.apply(transform:type:)(uint64_t a1)
{
  return closure #1 in CMLTable.apply(transform:type:)(a1, *(void (**)(uint64_t))(v1 + 16));
}

uint64_t partial apply for closure #1 in CMLAggregator.add(concatToColumnName:keyColumnName:valueColumnName:)(uint64_t a1)
{
  return partial apply for closure #1 in CMLAggregator.add(concatToColumnName:keyColumnName:valueColumnName:)(a1, (uint64_t)partial apply for closure #1 in closure #1 in CMLAggregator.add(concatToColumnName:keyColumnName:valueColumnName:), (uint64_t)partial apply for closure #1 in closure #1 in closure #1 in CMLAggregator.add(concatToColumnName:keyColumnName:valueColumnName:), (void (*)(void, uint64_t, uint64_t, void *))specialized handling<A, B, C, D, E>(_:_:_:_:_:));
}

uint64_t closure #1 in CMLCallFunction(name:arguments:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = v2;
  uint64_t result = specialized handling<A, B, C>(_:_:_:)(a1, *(void *)(a2 + 16));
  if (!v3)
  {
    uint64_t v6 = result;
    if (!result) {
      BUG();
    }
    uint64_t v7 = type metadata accessor for CMLVariant();
    uint64_t result = swift_allocObject(v7, 24, 7);
    *(void *)(result + 16) = v6;
    *uint64_t v4 = result;
  }
  return result;
}

uint64_t partial apply for closure #1 in closure #1 in CMLAggregator.add(concatToColumnName:keyColumnName:valueColumnName:)(uint64_t a1)
{
  return closure #1 in closure #1 in CMLAggregator.add(operation:toColumnName:fromColumnName:)(a1, v1[2], v1[3], v1[4], v1[5], partial apply for closure #1 in closure #1 in closure #1 in CMLAggregator.add(concatToColumnName:keyColumnName:valueColumnName:), (void (*)(void, uint64_t, uint64_t, void *))specialized handling<A, B, C, D, E>(_:_:_:_:_:));
}

uint64_t partial apply for closure #1 in closure #1 in closure #1 in CMLAggregator.add(concatToColumnName:keyColumnName:valueColumnName:)(uint64_t a1)
{
  return closure #1 in closure #1 in closure #1 in CMLAggregator.add(operation:toColumnName:fromColumnName:)(a1, v1[2], v1[3], v1[4], (uint64_t (*)(void, uint64_t, uint64_t, uint64_t))specialized handling<A, B, C, D, E>(_:_:_:_:_:));
}

uint64_t partial apply for closure #1 in CMLAggregator.add(operation:toColumnName:fromColumnName:)(uint64_t a1)
{
  return partial apply for closure #1 in CMLAggregator.add(concatToColumnName:keyColumnName:valueColumnName:)(a1, (uint64_t)partial apply for closure #1 in closure #1 in CMLAggregator.add(operation:toColumnName:fromColumnName:), (uint64_t)partial apply for closure #1 in closure #1 in closure #1 in CMLAggregator.add(operation:toColumnName:fromColumnName:), (void (*)(void, uint64_t, uint64_t, void *))specialized handling<A, B, C, D, E>(_:_:_:_:_:));
}

uint64_t partial apply for closure #1 in CMLAggregator.add(concatToColumnName:keyColumnName:valueColumnName:)(uint64_t a1, uint64_t a2, uint64_t a3, void (*a4)(void, uint64_t, uint64_t, void *))
{
  *((void *)&v6 + 1) = a3;
  *(void *)&long long v6 = a2;
  return closure #1 in CMLAggregator.add(operation:toColumnName:fromColumnName:)(a1, v4[2], v4[3], v4[4], v4[5], v4[6], v6, a4);
}

uint64_t partial apply for closure #1 in closure #1 in CMLAggregator.add(operation:toColumnName:fromColumnName:)(uint64_t a1)
{
  return closure #1 in closure #1 in CMLAggregator.add(operation:toColumnName:fromColumnName:)(a1, v1[2], v1[3], v1[4], v1[5], partial apply for closure #1 in closure #1 in closure #1 in CMLAggregator.add(operation:toColumnName:fromColumnName:), (void (*)(void, uint64_t, uint64_t, void *))specialized handling<A, B, C, D, E>(_:_:_:_:_:));
}

uint64_t partial apply for closure #1 in closure #1 in closure #1 in CMLAggregator.add(operation:toColumnName:fromColumnName:)(uint64_t a1)
{
  return closure #1 in closure #1 in closure #1 in CMLAggregator.add(operation:toColumnName:fromColumnName:)(a1, v1[2], v1[3], v1[4], (uint64_t (*)(void, uint64_t, uint64_t, uint64_t))specialized handling<A, B, C, D, E>(_:_:_:_:_:));
}

uint64_t partial apply for closure #1 in CMLAggregator.add(isMax:toColumnName:aggColumnName:outputColumnName:)(uint64_t a1)
{
  return closure #1 in CMLAggregator.add(isMax:toColumnName:aggColumnName:outputColumnName:)(a1, *(void *)(v1 + 16), *(void *)(v1 + 24), *(void *)(v1 + 32), *(void *)(v1 + 40), *(_DWORD *)(v1 + 48), *(void *)(v1 + 56));
}

uint64_t partial apply for closure #1 in closure #1 in CMLAggregator.add(isMax:toColumnName:aggColumnName:outputColumnName:)(uint64_t a1)
{
  return closure #1 in closure #1 in CMLAggregator.add(isMax:toColumnName:aggColumnName:outputColumnName:)(a1, *(void *)(v1 + 16), *(void *)(v1 + 24), *(_DWORD *)(v1 + 32), *(void *)(v1 + 40), *(void *)(v1 + 48));
}

NSURL *partial apply for closure #1 in closure #1 in closure #1 in CMLAggregator.add(isMax:toColumnName:aggColumnName:outputColumnName:)(uint64_t a1)
{
  return closure #1 in closure #1 in closure #1 in CMLAggregator.add(isMax:toColumnName:aggColumnName:outputColumnName:)(a1, *(_DWORD *)(v1 + 16), *(void *)(v1 + 24), *(void *)(v1 + 32), *(void *)(v1 + 40));
}

uint64_t partial apply for closure #1 in CMLParameters.table(for:)(uint64_t a1)
{
  return closure #1 in CMLParameters.table(for:)(a1, v1);
}

uint64_t partial apply for closure #1 in CMLParameters.add(key:column:)(uint64_t a1)
{
  return closure #1 in CMLTable.addColumn(name:_:)(a1, *(void *)(v1 + 16), *(void *)(v1 + 24), (uint64_t (*)(void, uint64_t, void))specialized handling<A, B, C, D>(_:_:_:_:));
}

NSURL *partial apply for closure #1 in CMLParameters.add(key:featureValue:)(uint64_t a1)
{
  return closure #1 in CMLParameters.add(key:featureValue:)(a1, *(void *)(v1 + 16), *(void *)(v1 + 24));
}

uint64_t partial apply for closure #1 in CMLParameters.add(key:table:)(uint64_t a1)
{
  return closure #1 in CMLTable.addColumn(name:_:)(a1, *(void *)(v1 + 16), *(void *)(v1 + 24), (uint64_t (*)(void, uint64_t, void))specialized handling<A, B, C, D>(_:_:_:_:));
}

uint64_t partial apply for closure #1 in CMLTable.addColumn(name:_:)(uint64_t a1)
{
  return closure #1 in CMLTable.addColumn(name:_:)(a1, *(void *)(v1 + 16), *(void *)(v1 + 24), (uint64_t (*)(void, uint64_t, void))specialized handling<A, B, C, D>(_:_:_:_:));
}

uint64_t outlined init with take of MLDataTable.ParsingOptions?(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for MLDataTable.ParsingOptions?);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v2 - 8) + 32))(a2, a1, v2);
  return a2;
}

uint64_t _s8CreateML11MLDataTableV14ParsingOptionsVSgWOg(uint64_t a1)
{
  uint64_t result = 0;
  if ((*(void *)(a1 + 16) & 0xFFFFFFFF00000001) == 0) {
    return (*(void *)(a1 + 16) >> 1) + 1;
  }
  return result;
}

uint64_t partial apply for closure #1 in CMLTable.init(from:isCSV:options:)(uint64_t a1)
{
  return closure #1 in CMLTable.init(from:isCSV:options:)(a1, *(_DWORD *)(v1 + 16), *(void *)(v1 + 24));
}

uint64_t *outlined release of MLDataTable.ParsingOptions?(uint64_t *a1)
{
  return a1;
}

uint64_t outlined consume of MLDataTable.ParsingOptions?(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15)
{
  if (a3)
  {
    swift_bridgeObjectRelease(a3);
    swift_bridgeObjectRelease(a5);
    swift_bridgeObjectRelease(a7);
    swift_bridgeObjectRelease(a10);
    swift_bridgeObjectRelease(a12);
    swift_bridgeObjectRelease(a14);
    return swift_bridgeObjectRelease(a15);
  }
  return result;
}

uint64_t partial apply for closure #1 in CMLTable.renameColumn(named:to:)(uint64_t a1)
{
  return closure #1 in CMLTable.renameColumn(named:to:)(a1, v1[2], v1[3], v1[4]);
}

NSURL *partial apply for closure #1 in closure #1 in CMLTable.renameColumn(named:to:)(uint64_t a1)
{
  return closure #1 in closure #1 in CMLTable.renameColumn(named:to:)(a1, *(void *)(v1 + 16), *(void *)(v1 + 24));
}

uint64_t getEnumTagSinglePayload for CMLFeatureValueType(unsigned __int8 *a1, unsigned int a2)
{
  if (a2)
  {
    if (a2 < 0xFA) {
      goto LABEL_13;
    }
    unsigned int v2 = a2 + 6;
    int v3 = 1;
    if (v2 >= 0xFF00) {
      int v3 = 2 * (v2 >= 0xFFFF00) + 2;
    }
    if (v3 == 4) {
      int v4 = *(_DWORD *)(a1 + 1);
    }
    else {
      int v4 = v3 == 2 ? *(unsigned __int16 *)(a1 + 1) : a1[1];
    }
    if (v4)
    {
      int v5 = *a1 + (v4 << 8) - 7;
    }
    else
    {
LABEL_13:
      unsigned int v6 = *a1;
      int v7 = v6 - 7;
      BOOL v8 = v6 < 7;
      int v5 = -1;
      if (!v8) {
        int v5 = v7;
      }
    }
  }
  else
  {
    int v5 = -1;
  }
  return (v5 + 1);
}

uint64_t storeEnumTagSinglePayload for CMLFeatureValueType(unsigned char *a1, unsigned int a2, unsigned int a3)
{
  LODWORD(result) = 0;
  if (a3 >= 0xFA)
  {
    unsigned int v4 = a3 + 6;
    LODWORD(result) = 1;
    if (v4 >= 0xFF00) {
      LODWORD(result) = 2 * (v4 >= 0xFFFF00) + 2;
    }
  }
  if (a2 > 0xF9)
  {
    unsigned int v5 = a2 - 250;
    int v6 = (v5 >> 8) + 1;
    *a1 = v5;
    uint64_t result = result;
    switch((int)result)
    {
      case 0:
        return result;
      case 1:
        a1[1] = v6;
        break;
      case 2:
        *(_WORD *)(a1 + 1) = v6;
        break;
      case 3:
LABEL_16:
        BUG();
      case 4:
        *(_DWORD *)(a1 + 1) = v6;
        break;
    }
  }
  else
  {
    uint64_t result = result;
    switch((int)result)
    {
      case 0:
        goto LABEL_11;
      case 1:
        a1[1] = 0;
        goto LABEL_11;
      case 2:
        *(_WORD *)(a1 + 1) = 0;
        goto LABEL_11;
      case 3:
        goto LABEL_16;
      case 4:
        *(_DWORD *)(a1 + 1) = 0;
LABEL_11:
        if (a2) {
          *a1 = a2 + 6;
        }
        break;
      case 5:
        JUMPOUT(0xCBE34);
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for CMLFeatureValueType()
{
  return &type metadata for CMLFeatureValueType;
}

uint64_t base witness table accessor for Equatable in CMLFeatureValueType()
{
  return lazy protocol witness table accessor for type CMLFeatureValueType and conformance CMLFeatureValueType();
}

uint64_t lazy protocol witness table accessor for type CMLFeatureValueType and conformance CMLFeatureValueType()
{
  uint64_t result = lazy protocol witness table cache variable for type CMLFeatureValueType and conformance CMLFeatureValueType;
  if (!lazy protocol witness table cache variable for type CMLFeatureValueType and conformance CMLFeatureValueType)
  {
    uint64_t result = swift_getWitnessTable(&protocol conformance descriptor for CMLFeatureValueType, &type metadata for CMLFeatureValueType);
    lazy protocol witness table cache variable for type CMLFeatureValueType and conformance CMLFeatureValueType = result;
  }
  return result;
}

uint64_t thunk for @escaping @callee_guaranteed (@unowned OpaquePointer) -> (@unowned OpaquePointer)partial apply(void *a1)
{
  return partial apply for thunk for @escaping @callee_guaranteed (@unowned OpaquePointer) -> (@unowned OpaquePointer)(a1);
}

uint64_t sub_CBE9A()
{
  return sub_CB89E();
}

uint64_t sub_CBEA4()
{
  return sub_CB89E();
}

uint64_t sub_CBEAE()
{
  return sub_CB89E();
}

uint64_t @objc invokeContext #1 (rawInput:context:error:) in CMLColumn.apply(transform:type:skipUndefined:)(uint64_t a1, uint64_t a2)
{
  return @objc invokeContext #1 (rawInput:context:error:) in CMLTable.apply(transform:type:)(a1, a2);
}

uint64_t @objc releaseContext #1 (context:) in CMLColumn.apply(transform:type:skipUndefined:)(uint64_t a1)
{
  return @objc releaseContext #1 (context:) in CMLTable.apply(transform:type:)(a1);
}

uint64_t CMLGazetteer.__deallocating_deinit()
{
  return CMLEmbedding.__deallocating_deinit();
}

uint64_t static MLActionClassifier.FeatureExtractor.extractFeatures(from:targetFrameRate:)(uint64_t a1, __m128 a2)
{
  v8[0] = *(double *)a2.i64;
  v8[1] = v2;
  int64_t v4 = *(void *)(*(void *)(type metadata accessor for MLActionClassifier.DataSource(0) - 8) + 64);
  unsigned int v5 = alloca(v4);
  int v6 = alloca(v4);
  outlined init with copy of MLTrainingSessionParameters(a1, (uint64_t)v8, type metadata accessor for MLActionClassifier.DataSource);
  uint64_t result = MLActionClassifier.FeatureExtractor.__allocating_init(source:)((uint64_t)v8, a2);
  if (!v3)
  {
    MLActionClassifier.FeatureExtractor.extractFeaturesFromFileTable(_:)(v8[0]);
    return swift_release();
  }
  return result;
}

uint64_t MLActionClassifier.FeatureExtractor.__allocating_init(source:)(uint64_t a1, __m128 a2)
{
  MLActionClassifier.DataSource.videosWithAnnotations()(a2);
  uint64_t result = outlined destroy of MLActivityClassifier.ModelParameters(a1, type metadata accessor for MLActionClassifier.DataSource);
  if (!v2)
  {
    uint64_t result = swift_allocObject(v3, 64, 7);
    *(void *)(result + 32) = _swiftEmptyArrayStorage;
    *(void *)(result + 40) = _swiftEmptyArrayStorage;
    *(void *)(result + 48) = _swiftEmptyArrayStorage;
    *(void *)(result + 56) = _swiftEmptyArrayStorage;
    *(void *)(result + 16) = v5;
    *(unsigned char *)(result + 24) = v6;
  }
  return result;
}

uint64_t MLActionClassifier.FeatureExtractor.extractFeaturesFromFileTable(_:)(double a1)
{
  v359[0] = v2;
  double v312 = a1;
  uint64_t v316 = v1;
  uint64_t v335 = type metadata accessor for URL(0);
  uint64_t v334 = *(void *)(v335 - 8);
  int64_t v4 = *(void *)(v334 + 64);
  uint64_t v5 = alloca(v4);
  char v6 = alloca(v4);
  v337 = &v307;
  CMTimeValue v363 = type metadata accessor for Date(0);
  Float64 v7 = *(double *)(v363 - 8);
  int64_t v8 = *(void *)(*(void *)&v7 + 64);
  uint64_t v9 = alloca(v8);
  uint64_t v10 = alloca(v8);
  v357 = &v307;
  os_log_t log = (os_log_t)type metadata accessor for _TablePrinter(0);
  int64_t v11 = *(void *)(*((void *)log - 1) + 64);
  uint64_t v12 = alloca(v11);
  uint64_t v13 = alloca(v11);
  v313 = &v307;
  uint64_t v14 = alloca(v11);
  uint64_t v15 = alloca(v11);
  v345 = &v307;
  uint64_t v16 = *(void *)(v3 + 16);
  v326 = (uint64_t *)v3;
  int v17 = *(unsigned __int8 *)(v3 + 24);
  v327 = (void *)v16;
  LOBYTE(v328) = v17;
  outlined copy of Result<_DataTable, Error>(v16, v17);
  Swift::Int v18 = MLDataTable.size.getter();
  *(void *)type = specialized RandomAccessCollection<>.distance(from:to:)(0, v18);
  CMTimeValue v347 = v16;
  int v336 = v17;
  outlined consume of Result<_DataTable, Error>(v16, v17);
  if (one-time initialization token for logger != -1) {
    swift_once(&one-time initialization token for logger, one-time initialization function for logger);
  }
  uint64_t v19 = type metadata accessor for Logger(0);
  uint64_t v338 = __swift_project_value_buffer(v19, (uint64_t)static MLActionClassifier.logger);
  uint64_t v20 = (os_log_s *)Logger.logObject.getter();
  os_log_type_t v21 = static os_log_type_t.info.getter();
  BOOL v22 = os_log_type_enabled(v20, v21);
  Float64 seconds = v7;
  if (v22)
  {
    uint64_t v23 = (uint8_t *)swift_slowAlloc(12, -1);
    *(_DWORD *)uint64_t v23 = 134217984;
    uint64_t v24 = *(void **)type;
    v327 = *(void **)type;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v327, &v328, v23 + 4, v23 + 12);
    _os_log_impl(&dword_0, v20, v21, "Processing %ld annotated video clips", v23, 0xCu);
    swift_slowDealloc(v23, -1, -1);
    uint64_t v25 = v20;
    uint64_t v26 = v24;
  }
  else
  {
    uint64_t v25 = v20;

    uint64_t v26 = *(void **)type;
  }
  os_log_t v27 = log;
  uint64_t v28 = v345;
  uint64_t v29 = (char *)v345 + *((int *)log + 5);
  Date.init()(v25);
  uint64_t *v28 = (uint64_t)v26;
  type metadata accessor for OS_os_log();
  uint64_t v30 = OS_os_log.init(subsystem:category:)(0xD000000000000023, "ctor" + 0x8000000000000000, 0x72705F656C626174, 0xED00007265746E69);
  uint64_t v315 = *((int *)v27 + 6);
  *(uint64_t *)((char *)v28 + v315) = v30;
  uint64_t v31 = *((int *)v27 + 7);
  *(uint64_t *)((char *)v28 + v31) = 0xD000000000000015;
  *(uint64_t *)((char *)v28 + v31 + 8) = (uint64_t)("ml.handActionClassifier" + 0x8000000000000000);
  uint64_t v32 = v357;
  Date.init()(0xD000000000000023);
  v314 = v29;
  (*(void (**)(char *, uint64_t *, CMTimeValue))(*(void *)&seconds + 40))(v29, v32, v363);
  _TablePrinter.beginTable()();
  _TablePrinter.printRow(currentFileIndex:)(0);
  CMTimeValue v33 = v347;
  v327 = (void *)v347;
  char v34 = v336;
  LOBYTE(v328) = v336;
  v317 = v326 + 4;
  uint64_t v318 = v326 + 6;
  v319 = v326 + 5;
  v326 += 7;
  double v35 = 0.0;
  long long v329 = 0;
  outlined copy of Result<_DataTable, Error>(v347, v336);
  v362.CMTimeValue value = v33;
  LOBYTE(v362.timescale) = v34;
  if (!MLDataTable.size.getter())
  {
    char v36 = v34;
    goto LABEL_139;
  }
  CMTimeValue value = kCMTimeZero.value;
  CMTimeScale timescale = kCMTimeZero.timescale;
  CMTimeFlags flags = kCMTimeZero.flags;
  CMTimeEpoch epoch = kCMTimeZero.epoch;
  CMTimeValue v343 = kCMTimeIndefinite.value;
  CMTimeScale v354 = kCMTimeIndefinite.timescale;
  CMTimeFlags v355 = kCMTimeIndefinite.flags;
  CMTimeEpoch v344 = kCMTimeIndefinite.epoch;
  v340 = (char *)&type metadata for Any + 8;
  char v36 = v34;
  uint64_t v37 = 0;
  do
  {
    MLDataTable.Rows.subscript.getter(v37);
    CMTimeValue v363 = v362.value;
    uint64_t v38 = *(void *)&v362.timescale;
    v357 = (uint64_t *)v362.epoch;
    outlined copy of Result<_DataTable, Error>(v33, v36);
    uint64_t v39 = specialized RandomAccessCollection<>.index(after:)(v37);
    outlined consume of Result<_DataTable, Error>(v33, v36);
    *(void *)&long long v329 = v39;
    Swift::Int currentFileIndex = *((void *)&v329 + 1);
    uint64_t v40 = *((void *)&v329 + 1) + 1;
    if (__OFADD__(1, *((void *)&v329 + 1))) {
      BUG();
    }
    ++*((void *)&v329 + 1);
    BOOL v41 = *(void *)(v38 + 16) == 0;
    uint64_t v351 = v38;
    if (v41) {
      goto LABEL_148;
    }
    swift_retain();
    swift_bridgeObjectRetain(v38);
    uint64_t v42 = v357;
    swift_retain();
    char v43 = v38;
    unint64_t v44 = specialized __RawDictionaryStorage.find<A>(_:)(0x7461506F65646976, 0xE900000000000068);
    if ((v45 & 1) == 0)
    {
      swift_release();
      swift_bridgeObjectRelease(v38);
      swift_release();
LABEL_148:
      v362.CMTimeValue value = 0;
      *(void *)&v362.CMTimeScale timescale = 0xE000000000000000;
      _StringGuts.grow(_:)(52);
      v285._uint64_t countAndFlagsBits = 0xD000000000000029;
      v285._char object = "Annotated Video Clips" + 0x8000000000000000;
      String.append(_:)(v285);
      Swift::Int v348 = currentFileIndex;
      uint64_t v286 = dispatch thunk of CustomStringConvertible.description.getter(&type metadata for Int, &protocol witness table for Int);
      char v288 = (char)v287;
      v285._uint64_t countAndFlagsBits = v286;
      v285._char object = v287;
      String.append(_:)(v285);
      swift_bridgeObjectRelease(v288);
      v285._char object = (void *)0xE900000000000065;
      v285._uint64_t countAndFlagsBits = 0x6C626174206E6920;
      String.append(_:)(v285);
      *(_OWORD *)v359 = *(_OWORD *)&v362.value;
      v285._char object = (void *)lazy protocol witness table accessor for type MLCreateError and conformance MLCreateError();
      swift_allocError(&type metadata for MLCreateError, v285._object, 0, 0);
      *(_OWORD *)uint64_t v289 = *(_OWORD *)v359;
      *(_OWORD *)(v289 + 16) = 0;
      *(_OWORD *)(v289 + 32) = 0;
      *(unsigned char *)(v289 + 48) = 0;
      swift_willThrow(&type metadata for MLCreateError, v285._object, v289, v290, v291, v292);
      swift_release();
      swift_bridgeObjectRelease(v351);
LABEL_149:
      swift_release();
LABEL_150:
      outlined consume of Result<_DataTable, Error>((uint64_t)v327, v328);
      return outlined destroy of MLActivityClassifier.ModelParameters((uint64_t)v345, type metadata accessor for _TablePrinter);
    }
    Swift::Int v311 = v40;
    uint64_t v46 = *(void *)(*(void *)(v38 + 56) + 8 * v44);
    swift_retain_n(v42);
    Float64 v47 = v359[0];
    uint64_t v48 = CMLSequence.value(at:)(v46);
    uint64_t v49 = v42;
    v359[0] = v47;
    if (v47 != 0.0) {
      goto LABEL_164;
    }
    uint64_t v50 = v48;
    swift_release();
    MLDataValue.init(_:)(v50, v35);
    swift_bridgeObjectRelease(v38);
    swift_release();
    swift_release_n(v49);
    os_log_t v51 = *(os_log_t *)&v362.timescale;
    if (LOBYTE(v362.epoch) != 2)
    {
      char v284 = v362.epoch;
LABEL_144:
      outlined consume of MLDataValue((void *)v362.value, *(void **)&v362.timescale, v284);
      goto LABEL_148;
    }
    if (!*(void *)(v38 + 16))
    {
      char v284 = 2;
      goto LABEL_144;
    }
    *(void *)type = v362.value;
    swift_retain();
    swift_bridgeObjectRetain(v38);
    swift_retain();
    unint64_t v52 = specialized __RawDictionaryStorage.find<A>(_:)(0x6C6562616CLL, 0xE500000000000000);
    if ((v53 & 1) == 0)
    {
      swift_release();
      swift_bridgeObjectRelease(v38);
      swift_release();
LABEL_147:
      outlined consume of MLDataValue(*(void **)type, v51, 2);
      goto LABEL_148;
    }
    os_log_t log = v51;
    uint64_t v54 = *(void *)(*(void *)(v38 + 56) + 8 * v52);
    swift_retain_n(v357);
    uint64_t v55 = v357;
    Float64 v56 = v359[0];
    uint64_t v57 = CMLSequence.value(at:)(v54);
    v359[0] = v56;
    if (v56 != 0.0) {
      goto LABEL_164;
    }
    uint64_t v58 = v57;
    swift_release();
    MLDataValue.init(_:)(v58, v35);
    swift_bridgeObjectRelease(v43);
    swift_release();
    swift_release_n(v55);
    os_log_t v51 = log;
    if (LOBYTE(v362.epoch) != 2)
    {
      outlined consume of MLDataValue((void *)v362.value, *(void **)&v362.timescale, v362.epoch);
      goto LABEL_147;
    }
    v332 = (void *)v362.value;
    v331 = *(void **)&v362.timescale;
    uint64_t v59 = objc_opt_self(NSFileManager);
    id v60 = [v59 defaultManager];
    id v61 = v60;
    NSString v62 = String._bridgeToObjectiveC()();
    unsigned __int8 v63 = [v61 fileExistsAtPath:v62];

    if (!v63)
    {
      outlined consume of MLDataValue(v332, v331, 2);
      v362.CMTimeValue value = 0;
      *(void *)&v362.CMTimeScale timescale = 0xE000000000000000;
      _StringGuts.grow(_:)(26);
      swift_bridgeObjectRelease(v362.timescale);
      v362.CMTimeValue value = 0xD000000000000018;
      *(void *)&v362.CMTimeScale timescale = "h or label string at row " + 0x8000000000000000;
      v294 = *(void **)type;
      v295._uint64_t countAndFlagsBits = *(void *)type;
      os_log_t v296 = log;
      v295._char object = log;
      String.append(_:)(v295);
      outlined consume of MLDataValue(v294, v296, 2);
      *(_OWORD *)v359 = *(_OWORD *)&v362.value;
      v295._char object = (void *)lazy protocol witness table accessor for type MLCreateError and conformance MLCreateError();
      swift_allocError(&type metadata for MLCreateError, v295._object, 0, 0);
      *(_OWORD *)uint64_t v297 = *(_OWORD *)v359;
      *(_OWORD *)(v297 + 16) = 0;
      *(_OWORD *)(v297 + 32) = 0;
      *(unsigned char *)(v297 + 48) = 0;
      swift_willThrow(&type metadata for MLCreateError, v295._object, v297, v298, v299, v300);
      swift_release();
      swift_bridgeObjectRelease(v351);
      goto LABEL_149;
    }
    URL.init(fileURLWithPath:)(*(void *)type, log);
    uint64_t v320 = URL.lastPathComponent.getter();
    uint64_t v356 = v64;
    if ((_BYTE)v336)
    {
      uint64_t v65 = v347;
      outlined copy of Result<_DataTable, Error>(v347, 1);
      uint64_t v66 = tc_v1_flex_list_create(0);
      if (!v66) {
        BUG();
      }
      uint64_t v67 = v66;
      outlined consume of Result<_DataTable, Error>(v65, 1);
      uint64_t v68 = type metadata accessor for CMLSequence();
      uint64_t v69 = swift_allocObject(v68, 25, 7);
      *(void *)(v69 + 16) = v67;
      *(unsigned char *)(v69 + 24) = 1;
      Swift::Int v348 = v69;
    }
    else
    {
      uint64_t v70 = v347;
      uint64_t v71 = v347;
      outlined copy of Result<_DataTable, Error>(v347, 0);
      _DataTable.columnNames.getter(v71);
      outlined consume of Result<_DataTable, Error>(v70, 0);
      uint64_t v69 = v348;
    }
    swift_retain_n(v69);
    uint64_t v72 = CMLSequence.size.getter();
    uint64_t v73 = specialized RandomAccessCollection<>.distance(from:to:)(0, v72);
    swift_release();
    if (!v73)
    {
      uint64_t v87 = v69;
      goto LABEL_33;
    }
    Float64 v74 = 0.0;
    while (1)
    {
      Float64 seconds = v74;
      Float64 v75 = v359[0];
      CMLSequence.value(at:)(*(uint64_t *)&v74);
      if (v75 != 0.0)
      {
LABEL_161:
        uint64_t v301 = "CreateML/SequenceType.swift";
        uint64_t v302 = 27;
        Float64 v303 = v75;
        goto LABEL_162;
      }
      Swift::String v76 = CMLFeatureValue.stringValue()();
      v359[0] = v78;
      if (v78 != 0.0)
      {
LABEL_163:
        swift_errorRelease(*(void *)&v359[0]);
        swift_release();
        v362.CMTimeValue value = 0;
        *(void *)&v362.CMTimeScale timescale = 0xE000000000000000;
        _StringGuts.grow(_:)(37);
        swift_bridgeObjectRelease(v362.timescale);
        v362.CMTimeValue value = 0xD000000000000022;
        *(void *)&v362.CMTimeScale timescale = "able.ColumnNames.swift" + 0x8000000000000000;
        v310[0] = seconds;
        v304._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter(&type metadata for Int, &protocol witness table for Int);
        char object = (char)v304._object;
        String.append(_:)(v304);
        swift_bridgeObjectRelease(object);
        v306._uint64_t countAndFlagsBits = 46;
        v306._char object = (void *)0xE100000000000000;
        String.append(_:)(v306);
        _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, v362.value, *(void *)&v362.timescale, "CreateML/MLDataTable.ColumnNames.swift", 38, 2, 17, 0);
        BUG();
      }
      uint64_t countAndFlagsBits = v76._countAndFlagsBits;
      uint64_t v80 = v76._object;
      swift_release();
      swift_retain();
      uint64_t v81 = CMLSequence.size.getter();
      uint64_t v82 = specialized RandomAccessCollection<>.distance(from:to:)(0, v81);
      swift_release();
      if (*(uint64_t *)&seconds >= v82) {
        BUG();
      }
      Float64 v83 = seconds;
      if (countAndFlagsBits == 0x7472617473 && v80 == (void *)0xE500000000000000)
      {
        swift_release_n(v69);
        swift_bridgeObjectRelease(0);
        goto LABEL_37;
      }
      char v84 = _stringCompareWithSmolCheck(_:_:expecting:)(countAndFlagsBits, v80, 0x7472617473, 0xE500000000000000, 0);
      swift_bridgeObjectRelease((_BYTE)v80);
      if (v84) {
        break;
      }
      swift_retain();
      *(void *)&Float64 v74 = *(void *)&v83 + 1;
      uint64_t v85 = CMLSequence.size.getter();
      uint64_t v86 = specialized RandomAccessCollection<>.distance(from:to:)(0, v85);
      swift_release();
      if (*(void *)&v83 + 1 == v86)
      {
        uint64_t v87 = v69;
LABEL_33:
        swift_release_n(v87);
        goto LABEL_34;
      }
    }
    swift_release_n(v69);
LABEL_37:
    uint64_t v90 = v351;
    if (!*(void *)(v351 + 16)) {
      goto LABEL_64;
    }
    swift_retain();
    swift_bridgeObjectRetain(v90);
    uint64_t v91 = v357;
    swift_retain();
    unint64_t v92 = specialized __RawDictionaryStorage.find<A>(_:)(0x7472617473, 0xE500000000000000);
    if ((v93 & 1) == 0)
    {
      swift_release();
      swift_bridgeObjectRelease(v90);
      swift_release();
      goto LABEL_46;
    }
    uint64_t v94 = *(void *)(*(void *)(v90 + 56) + 8 * v92);
    swift_retain_n(v91);
    Float64 v95 = v359[0];
    uint64_t v96 = CMLSequence.value(at:)(v94);
    v359[0] = v95;
    if (v95 != 0.0) {
      goto LABEL_164;
    }
    uint64_t v97 = v96;
    swift_release();
    MLDataValue.init(_:)(v97, v77);
    swift_bridgeObjectRelease(v90);
    swift_release();
    swift_release_n(v91);
    CMTimeValue v98 = v362.value;
    if (LOBYTE(v362.epoch) != 1)
    {
      outlined consume of MLDataValue((void *)v362.value, *(void **)&v362.timescale, v362.epoch);
LABEL_46:
      uint64_t v110 = v356;
      if (*(void *)(v90 + 16))
      {
        swift_retain();
        swift_bridgeObjectRetain(v90);
        uint64_t v111 = v357;
        swift_retain();
        unint64_t v112 = specialized __RawDictionaryStorage.find<A>(_:)(0x7472617473, 0xE500000000000000);
        if (v113)
        {
          uint64_t v114 = *(void *)(*(void *)(v90 + 56) + 8 * v112);
          swift_retain_n(v111);
          Float64 v115 = v359[0];
          uint64_t v116 = CMLSequence.value(at:)(v114);
          v359[0] = v115;
          if (v115 == 0.0)
          {
            uint64_t v117 = v116;
            swift_release();
            MLDataValue.init(_:)(v117, v77);
            swift_bridgeObjectRelease(v90);
            swift_release();
            swift_release_n(v111);
            CMTimeValue v118 = v362.value;
            if (LOBYTE(v362.epoch))
            {
              outlined consume of MLDataValue((void *)v362.value, *(void **)&v362.timescale, v362.epoch);
              goto LABEL_52;
            }
            if (v362.value >= 0)
            {
              double value_low = (double)SLODWORD(v362.value);
LABEL_62:
              CMTimeMakeWithSeconds(&v362, value_low, 1000);
              CMTimeValue v88 = v362.value;
              LODWORD(v350) = v362.timescale;
              CMTimeValue v129 = v362.flags;
              CMTimeEpoch v346 = v362.epoch;
              goto LABEL_71;
            }
            uint64_t v100 = *(void **)type;
            os_log_t v243 = log;
            outlined copy of MLDataValue(*(void **)type, log, 2u);
            outlined copy of MLDataValue(v100, v243, 2u);
            uint64_t v244 = (os_log_s *)Logger.logObject.getter();
            os_log_type_t v245 = static os_log_type_t.info.getter();
            Float64 seconds = *(double *)&v244;
            *(_DWORD *)v339 = v245;
            if (!os_log_type_enabled(v244, v245)) {
              goto LABEL_133;
            }
            uint64_t v104 = swift_slowAlloc(22, -1);
            CMTimeValue v333 = swift_slowAlloc(32, -1);
            v362.CMTimeValue value = v333;
            *(_DWORD *)uint64_t v104 = 134218242;
            Swift::Int v348 = v118;
            UnsafeMutableRawBufferPointer.copyMemory(from:)(&v348, v349, v104 + 4, v104 + 12);
            *(_WORD *)(v104 + 12) = 2080;
            uint64_t v350 = v104 + 14;
            os_log_t v246 = log;
            outlined copy of MLDataValue(v100, log, 2u);
            Swift::Int v348 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)((uint64_t)v100, (int64_t)v246, &v362.value);
            UnsafeMutableRawBufferPointer.copyMemory(from:)(&v348, v349, v350, v104 + 22);
            outlined consume of MLDataValue(v100, v246, 2);
            outlined consume of MLDataValue(v100, v246, 2);
            outlined consume of MLDataValue(v100, v246, 2);
            Float64 v106 = seconds;
            Float64 v107 = seconds;
            os_log_type_t v108 = v339[0];
            uint64_t v109 = "Start time %ld specified in video file %s is negative, using 0.0 automatically.";
LABEL_132:
            _os_log_impl(&dword_0, *(os_log_t *)&v107, v108, v109, (uint8_t *)v104, 0x16u);
            CMTimeValue v247 = v333;
            swift_arrayDestroy(v333, 1, v340);
            swift_slowDealloc(v247, -1, -1);
            uint64_t v141 = v347;
            swift_slowDealloc(v104, -1, -1);
            Float64 v140 = v106;
LABEL_67:

            CMTimeValue v88 = value;
            LODWORD(v350) = timescale;
            CMTimeValue v129 = flags;
            CMTimeEpoch v346 = epoch;
            goto LABEL_72;
          }
LABEL_164:
          swift_release();
          uint64_t v301 = "CreateML/MLDataTable.Row.swift";
          uint64_t v302 = 30;
          Float64 v303 = v359[0];
LABEL_162:
          swift_unexpectedError(*(void *)&v303, v301, v302, 1);
          BUG();
        }
        swift_release();
        swift_bridgeObjectRelease(v90);
        swift_release();
LABEL_52:
        uint64_t v110 = v356;
        if (*(void *)(v90 + 16))
        {
          swift_retain();
          swift_bridgeObjectRetain(v90);
          uint64_t v119 = v357;
          swift_retain();
          unint64_t v120 = specialized __RawDictionaryStorage.find<A>(_:)(0x7472617473, 0xE500000000000000);
          if (v121)
          {
            uint64_t v122 = *(void *)(*(void *)(v90 + 56) + 8 * v120);
            swift_retain_n(v119);
            Float64 v123 = v359[0];
            uint64_t v124 = CMLSequence.value(at:)(v122);
            v359[0] = v123;
            if (v123 != 0.0) {
              goto LABEL_164;
            }
            uint64_t v125 = v124;
            swift_release();
            MLDataValue.init(_:)(v125, v77);
            swift_bridgeObjectRelease(v90);
            swift_release();
            swift_release_n(v119);
            uint64_t v126 = (void *)v362.value;
            uint64_t v127 = *(void **)&v362.timescale;
            if (LOBYTE(v362.epoch) == 2)
            {
              Float64 v128 = v359[0];
              static _VideoUtilities.getSecondsFromTimeString(_:)(*(long long *)&v362.value);
              v359[0] = v128;
              if (v128 == 0.0)
              {
                Float64 seconds = v77;
                outlined consume of MLDataValue(v126, v127, 2);
                CMTimeMakeWithSeconds(&v362, seconds, 1000);
                CMTimeValue v88 = v362.value;
                LODWORD(v350) = v362.timescale;
                CMTimeValue v129 = v362.flags;
                CMTimeEpoch v130 = v362.epoch;
                goto LABEL_70;
              }
              outlined consume of MLDataValue(v332, v331, 2);
              outlined consume of MLDataValue(v126, v127, 2);
              outlined consume of MLDataValue(*(void **)type, log, 2);
              swift_release();
              swift_bridgeObjectRelease(v90);
              swift_release();
              swift_bridgeObjectRelease(v356);
              (*(void (**)(uint64_t *, uint64_t))(v334 + 8))(v337, v335);
              outlined consume of Result<_DataTable, Error>((uint64_t)v327, v328);
              return outlined destroy of MLActivityClassifier.ModelParameters((uint64_t)v345, type metadata accessor for _TablePrinter);
            }
            outlined consume of MLDataValue((void *)v362.value, *(void **)&v362.timescale, v362.epoch);
          }
          else
          {
            swift_release();
            swift_bridgeObjectRelease(v90);
            swift_release();
          }
LABEL_64:
          uint64_t v110 = v356;
        }
      }
      swift_bridgeObjectRetain_n(v110, 2);
      uint64_t v131 = (void *)Logger.logObject.getter();
      os_log_type_t v132 = static os_log_type_t.error.getter(v110, 2);
      if (!os_log_type_enabled((os_log_t)v131, v132))
      {

        swift_bridgeObjectRelease_n(v110, 2, v142, v143, v144);
        CMTimeValue v88 = value;
        LODWORD(v350) = timescale;
        CMTimeFlags v89 = flags;
        goto LABEL_69;
      }
      int64_t v133 = v110;
      uint64_t v134 = (uint8_t *)swift_slowAlloc(12, -1);
      Float64 seconds = COERCE_DOUBLE(swift_slowAlloc(32, -1));
      *(Float64 *)&v362.CMTimeValue value = seconds;
      *(_DWORD *)uint64_t v134 = 136315138;
      *(void *)v339 = v134 + 4;
      swift_bridgeObjectRetain(v133);
      Swift::Int v348 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v320, v133, &v362.value);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v348, v349, *(void *)v339, v134 + 12);
      swift_bridgeObjectRelease_n(v133, 3, v135, v136, v137);
      _os_log_impl(&dword_0, (os_log_t)v131, v132, "Unsupported start time format in annotation file. Please provide either a Double or Int value in seconds, or a String value in hours:minutes:seconds.fraction, minutes:seconds.fraction, or seconds.fraction format. Skipping start time for file %s", v134, 0xCu);
      Float64 v138 = seconds;
      swift_arrayDestroy(*(void *)&seconds, 1, v340);
      swift_slowDealloc(*(void *)&v138, -1, -1);
      uint64_t v139 = v347;
      swift_slowDealloc(v134, -1, -1);
      Float64 v140 = *(double *)&v131;
      uint64_t v141 = v139;
      goto LABEL_67;
    }
    double value_low = *(double *)&v362.value;
    if (*(double *)&v362.value >= 0.0) {
      goto LABEL_62;
    }
    uint64_t v100 = *(void **)type;
    os_log_t v101 = log;
    outlined copy of MLDataValue(*(void **)type, log, 2u);
    outlined copy of MLDataValue(v100, v101, 2u);
    uint64_t v102 = (os_log_s *)Logger.logObject.getter();
    os_log_type_t v103 = static os_log_type_t.info.getter();
    Float64 seconds = *(double *)&v102;
    *(_DWORD *)v339 = v103;
    if (os_log_type_enabled(v102, v103))
    {
      uint64_t v104 = swift_slowAlloc(22, -1);
      CMTimeValue v333 = swift_slowAlloc(32, -1);
      v362.CMTimeValue value = v333;
      *(_DWORD *)uint64_t v104 = 134218242;
      Swift::Int v348 = v98;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v348, v349, v104 + 4, v104 + 12);
      *(_WORD *)(v104 + 12) = 2080;
      uint64_t v350 = v104 + 14;
      os_log_t v105 = log;
      outlined copy of MLDataValue(v100, log, 2u);
      Swift::Int v348 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)((uint64_t)v100, (int64_t)v105, &v362.value);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v348, v349, v350, v104 + 22);
      outlined consume of MLDataValue(v100, v105, 2);
      outlined consume of MLDataValue(v100, v105, 2);
      outlined consume of MLDataValue(v100, v105, 2);
      Float64 v106 = seconds;
      Float64 v107 = seconds;
      os_log_type_t v108 = v339[0];
      uint64_t v109 = "Start time %f specified in video file %s is negative, using 0.0 automatically.";
      goto LABEL_132;
    }
LABEL_133:
    os_log_t v248 = log;
    outlined consume of MLDataValue(v100, log, 2);
    outlined consume of MLDataValue(v100, v248, 2);

LABEL_34:
    CMTimeValue v88 = value;
    LODWORD(v350) = timescale;
    CMTimeFlags v89 = flags;
LABEL_69:
    CMTimeValue v129 = v89;
    CMTimeEpoch v130 = epoch;
LABEL_70:
    CMTimeEpoch v346 = v130;
LABEL_71:
    uint64_t v141 = v347;
LABEL_72:
    *(void *)v339 = v88;
    CMTimeValue v333 = v129;
    if ((_BYTE)v336)
    {
      outlined copy of Result<_DataTable, Error>(v141, 1);
      uint64_t v145 = tc_v1_flex_list_create(0);
      if (!v145) {
        BUG();
      }
      uint64_t v146 = v141;
      uint64_t v147 = v145;
      outlined consume of Result<_DataTable, Error>(v146, 1);
      uint64_t v148 = type metadata accessor for CMLSequence();
      uint64_t v149 = swift_allocObject(v148, 25, 7);
      *(void *)(v149 + 16) = v147;
      *(unsigned char *)(v149 + 24) = 1;
      Swift::Int v348 = v149;
    }
    else
    {
      outlined copy of Result<_DataTable, Error>(v141, 0);
      _DataTable.columnNames.getter(v141);
      outlined consume of Result<_DataTable, Error>(v141, 0);
      uint64_t v149 = v348;
    }
    swift_retain_n(v149);
    uint64_t v150 = CMLSequence.size.getter();
    uint64_t v151 = specialized RandomAccessCollection<>.distance(from:to:)(0, v150);
    swift_release();
    if (!v151)
    {
      swift_release_n(v149);
      outlined consume of MLDataValue(*(void **)type, log, 2);
      CMTimeValue v164 = v343;
      unsigned int v165 = v354;
      uint64_t v166 = v355;
      CMTimeEpoch v167 = v344;
      Float64 v153 = v359[0];
LABEL_117:
      LOBYTE(v169) = v351;
      goto LABEL_121;
    }
    Float64 v152 = 0.0;
    Float64 v153 = v359[0];
    while (1)
    {
      Float64 seconds = v152;
      Float64 v75 = v153;
      CMLSequence.value(at:)(*(uint64_t *)&v152);
      if (v153 != 0.0) {
        goto LABEL_161;
      }
      Swift::String v154 = CMLFeatureValue.stringValue()();
      v359[0] = v156;
      if (v156 != 0.0) {
        goto LABEL_163;
      }
      uint64_t v157 = v154._countAndFlagsBits;
      uint64_t v158 = v154._object;
      swift_release();
      swift_retain();
      uint64_t v159 = CMLSequence.size.getter();
      uint64_t v160 = specialized RandomAccessCollection<>.distance(from:to:)(0, v159);
      swift_release();
      if (*(uint64_t *)&seconds >= v160) {
        BUG();
      }
      if (v157 == 6581861 && v158 == (void *)0xE300000000000000)
      {
        swift_release_n(v149);
        swift_bridgeObjectRelease(0);
        goto LABEL_89;
      }
      char v161 = _stringCompareWithSmolCheck(_:_:expecting:)(v157, v158, 6581861, 0xE300000000000000, 0);
      swift_bridgeObjectRelease((_BYTE)v158);
      if (v161) {
        break;
      }
      *(void *)&Float64 v152 = *(void *)&seconds + 1;
      swift_retain();
      uint64_t v162 = CMLSequence.size.getter();
      uint64_t v163 = specialized RandomAccessCollection<>.distance(from:to:)(0, v162);
      swift_release();
      BOOL v41 = *(void *)&v152 == v163;
      Float64 v153 = v359[0];
      if (v41)
      {
        swift_release_n(v149);
        outlined consume of MLDataValue(*(void **)type, log, 2);
        CMTimeValue v164 = v343;
        unsigned int v165 = v354;
        uint64_t v166 = v355;
        CMTimeEpoch v167 = v344;
        goto LABEL_117;
      }
    }
    swift_release_n(v149);
LABEL_89:
    uint64_t v168 = v357;
    uint64_t v169 = v351;
    if (!*(void *)(v351 + 16)) {
      goto LABEL_104;
    }
    swift_retain();
    swift_bridgeObjectRetain(v169);
    swift_retain();
    unint64_t v170 = specialized __RawDictionaryStorage.find<A>(_:)(6581861, 0xE300000000000000);
    if ((v171 & 1) == 0)
    {
      swift_release();
      swift_bridgeObjectRelease(v169);
      swift_release();
      uint64_t v188 = v356;
      goto LABEL_98;
    }
    uint64_t v172 = *(void *)(*(void *)(v169 + 56) + 8 * v170);
    swift_retain_n(v168);
    Float64 v173 = v359[0];
    uint64_t v174 = CMLSequence.value(at:)(v172);
    v359[0] = v173;
    if (v173 != 0.0) {
      goto LABEL_164;
    }
    uint64_t v175 = v174;
    swift_release();
    MLDataValue.init(_:)(v175, v155);
    swift_bridgeObjectRelease(v169);
    swift_release();
    swift_release_n(v168);
    CMTimeValue v176 = v362.value;
    if (LOBYTE(v362.epoch) != 1)
    {
      outlined consume of MLDataValue((void *)v362.value, *(void **)&v362.timescale, v362.epoch);
      uint64_t v188 = v356;
LABEL_98:
      if (*(void *)(v169 + 16))
      {
        swift_retain();
        swift_bridgeObjectRetain(v169);
        uint64_t v189 = v357;
        swift_retain();
        unint64_t v190 = specialized __RawDictionaryStorage.find<A>(_:)(6581861, 0xE300000000000000);
        if (v191)
        {
          uint64_t v192 = *(void *)(*(void *)(v169 + 56) + 8 * v190);
          swift_retain_n(v189);
          Float64 v193 = v359[0];
          uint64_t v194 = CMLSequence.value(at:)(v192);
          v359[0] = v193;
          if (v193 != 0.0) {
            goto LABEL_164;
          }
          uint64_t v195 = v194;
          swift_release();
          MLDataValue.init(_:)(v195, v155);
          swift_bridgeObjectRelease(v169);
          swift_release();
          swift_release_n(v189);
          CMTimeValue v196 = v362.value;
          if (LOBYTE(v362.epoch))
          {
            outlined consume of MLDataValue((void *)v362.value, *(void **)&v362.timescale, v362.epoch);
            uint64_t v188 = v356;
            goto LABEL_105;
          }
          if (v362.value >= 0)
          {
            outlined consume of MLDataValue(*(void **)type, log, 2);
            CMTimeMakeWithSeconds(&v362, (double)(int)v196, 1000);
            CMTimeValue v164 = v362.value;
            unsigned int v165 = v362.timescale;
            uint64_t v166 = v362.flags;
            CMTimeEpoch v167 = v362.epoch;
            Float64 v153 = v359[0];
            goto LABEL_121;
          }
          char v177 = *(void **)type;
          outlined copy of MLDataValue(*(void **)type, log, 2u);
          uint64_t v178 = (os_log_s *)Logger.logObject.getter();
          os_log_type_t v249 = static os_log_type_t.info.getter();
          int v250 = v249;
          if (!os_log_type_enabled(v178, v249)) {
            goto LABEL_137;
          }
          LODWORD(seconds) = v250;
          uint64_t v251 = swift_slowAlloc(22, -1);
          os_log_t v321 = v178;
          uint64_t v182 = v251;
          CMTimeValue v322 = swift_slowAlloc(32, -1);
          v362.CMTimeValue value = v322;
          *(_DWORD *)uint64_t v182 = 134218242;
          Swift::Int v348 = v196;
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v348, v349, v182 + 4, v182 + 12);
          *(_WORD *)(v182 + 12) = 2080;
          uint64_t v323 = v182 + 14;
          os_log_t v252 = log;
          outlined copy of MLDataValue(v177, log, 2u);
          Swift::Int v348 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)((uint64_t)v177, (int64_t)v252, &v362.value);
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v348, v349, v323, v182 + 22);
          outlined consume of MLDataValue(v177, v252, 2);
          outlined consume of MLDataValue(v177, v252, 2);
          outlined consume of MLDataValue(v177, v252, 2);
          os_log_t v184 = v321;
          uint64_t v185 = v321;
          os_log_type_t v186 = LOBYTE(seconds);
          char v187 = "End time %ld specified in video file %s is negative, using end of file automatically.";
LABEL_136:
          _os_log_impl(&dword_0, v185, v186, v187, (uint8_t *)v182, 0x16u);
          CMTimeValue v253 = v322;
          swift_arrayDestroy(v322, 1, v340);
          swift_slowDealloc(v253, -1, -1);
          uint64_t v214 = (uint8_t *)v182;
LABEL_116:
          swift_slowDealloc(v214, -1, -1);

          CMTimeValue v164 = v343;
          unsigned int v165 = v354;
          uint64_t v166 = v355;
          CMTimeEpoch v167 = v344;
          Float64 v153 = v359[0];
          goto LABEL_117;
        }
        swift_release();
        swift_bridgeObjectRelease(v169);
        swift_release();
LABEL_104:
        uint64_t v188 = v356;
      }
LABEL_105:
      outlined consume of MLDataValue(*(void **)type, log, 2);
      if (*(void *)(v169 + 16))
      {
        swift_retain();
        swift_bridgeObjectRetain(v169);
        uint64_t v197 = v357;
        swift_retain();
        unint64_t v198 = specialized __RawDictionaryStorage.find<A>(_:)(6581861, 0xE300000000000000);
        if (v199)
        {
          uint64_t v200 = *(void *)(*(void *)(v169 + 56) + 8 * v198);
          swift_retain_n(v197);
          Float64 v201 = v359[0];
          uint64_t v202 = CMLSequence.value(at:)(v200);
          v359[0] = v201;
          if (v201 != 0.0) {
            goto LABEL_164;
          }
          uint64_t v203 = v202;
          swift_release();
          MLDataValue.init(_:)(v203, v155);
          swift_bridgeObjectRelease(v169);
          swift_release();
          swift_release_n(v197);
          uint64_t v204 = (void *)v362.value;
          uint64_t v205 = *(void **)&v362.timescale;
          if (LOBYTE(v362.epoch) == 2)
          {
            Float64 v206 = v359[0];
            static _VideoUtilities.getSecondsFromTimeString(_:)(*(long long *)&v362.value);
            if (v206 == 0.0)
            {
              v359[0] = v155;
              outlined consume of MLDataValue(v204, v205, 2);
              CMTimeMakeWithSeconds(&v362, v359[0], 1000);
              CMTimeValue v164 = v362.value;
              unsigned int v165 = v362.timescale;
              uint64_t v166 = v362.flags;
              CMTimeEpoch v167 = v362.epoch;
              Float64 v153 = 0.0;
              goto LABEL_120;
            }
            outlined consume of MLDataValue(v332, v331, 2);
            outlined consume of MLDataValue(v204, v205, 2);
            swift_release();
            swift_bridgeObjectRelease(v351);
            swift_release();
            swift_bridgeObjectRelease(v356);
            (*(void (**)(uint64_t *, uint64_t))(v334 + 8))(v337, v335);
            outlined consume of Result<_DataTable, Error>((uint64_t)v327, v328);
            return outlined destroy of MLActivityClassifier.ModelParameters((uint64_t)v345, type metadata accessor for _TablePrinter);
          }
          outlined consume of MLDataValue((void *)v362.value, *(void **)&v362.timescale, v362.epoch);
        }
        else
        {
          swift_release();
          swift_bridgeObjectRelease(v169);
          swift_release();
        }
        uint64_t v188 = v356;
      }
      swift_bridgeObjectRetain_n(v188, 2);
      int64_t v207 = v188;
      os_log_t v184 = (os_log_t)Logger.logObject.getter();
      os_log_type_t v208 = static os_log_type_t.error.getter(v188, 2);
      if (!os_log_type_enabled(v184, v208))
      {

        swift_bridgeObjectRelease_n(v207, 2, v215, v216, v217);
        goto LABEL_119;
      }
      int v209 = (uint8_t *)swift_slowAlloc(12, -1);
      Float64 seconds = COERCE_DOUBLE(swift_slowAlloc(32, -1));
      *(Float64 *)&v362.CMTimeValue value = seconds;
      *(_DWORD *)int v209 = 136315138;
      os_log_t log = (os_log_t)(v209 + 4);
      swift_bridgeObjectRetain(v207);
      Swift::Int v348 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v320, v207, &v362.value);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v348, v349, log, v209 + 12);
      swift_bridgeObjectRelease_n(v207, 3, v210, v211, v212);
      _os_log_impl(&dword_0, v184, v208, "Unsupported end time format in annotation file. Please provide either a Double or Int value in seconds, or a String value in hours:minutes:seconds.fraction, minutes:seconds.fraction, or seconds.fraction format. Skipping end time for file %s", v209, 0xCu);
      Float64 v213 = seconds;
      swift_arrayDestroy(*(void *)&seconds, 1, v340);
      swift_slowDealloc(*(void *)&v213, -1, -1);
      uint64_t v214 = v209;
      goto LABEL_116;
    }
    if (*(double *)&v362.value >= 0.0)
    {
      Float64 seconds = *(double *)&v362.value;
      outlined consume of MLDataValue(*(void **)type, log, 2);
      CMTimeMakeWithSeconds(&v362, seconds, 1000);
      CMTimeValue v164 = v362.value;
      unsigned int v165 = v362.timescale;
      uint64_t v166 = v362.flags;
      CMTimeEpoch v167 = v362.epoch;
      Float64 v153 = v359[0];
    }
    else
    {
      char v177 = *(void **)type;
      outlined copy of MLDataValue(*(void **)type, log, 2u);
      uint64_t v178 = (os_log_s *)Logger.logObject.getter();
      os_log_type_t v179 = static os_log_type_t.info.getter();
      int v180 = v179;
      if (os_log_type_enabled(v178, v179))
      {
        LODWORD(seconds) = v180;
        uint64_t v181 = swift_slowAlloc(22, -1);
        os_log_t v321 = v178;
        uint64_t v182 = v181;
        CMTimeValue v322 = swift_slowAlloc(32, -1);
        v362.CMTimeValue value = v322;
        *(_DWORD *)uint64_t v182 = 134218242;
        Swift::Int v348 = v176;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v348, v349, v182 + 4, v182 + 12);
        *(_WORD *)(v182 + 12) = 2080;
        uint64_t v323 = v182 + 14;
        os_log_t v183 = log;
        outlined copy of MLDataValue(v177, log, 2u);
        Swift::Int v348 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)((uint64_t)v177, (int64_t)v183, &v362.value);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v348, v349, v323, v182 + 22);
        outlined consume of MLDataValue(v177, v183, 2);
        outlined consume of MLDataValue(v177, v183, 2);
        outlined consume of MLDataValue(v177, v183, 2);
        os_log_t v184 = v321;
        uint64_t v185 = v321;
        os_log_type_t v186 = LOBYTE(seconds);
        char v187 = "End time %f specified in video file %s is negative, using end of file automatically.";
        goto LABEL_136;
      }
LABEL_137:
      os_log_t v254 = log;
      outlined consume of MLDataValue(v177, log, 2);
      outlined consume of MLDataValue(v177, v254, 2);

LABEL_119:
      CMTimeValue v164 = v343;
      unsigned int v165 = v354;
      uint64_t v166 = v355;
      CMTimeEpoch v167 = v344;
      Float64 v153 = v359[0];
LABEL_120:
      LOBYTE(v169) = v351;
    }
LABEL_121:
    MLModel v218 = static _VideoUtilities.getHumanKeyPointsFromVideoUrl(url:startTime:endTime:targetFrameRate:)(v337, *(CMTimeValue *)v339, v350 | (unint64_t)(v333 << 32), v346, v164, v165 | (unint64_t)(v166 << 32), v312, v167);
    if (v153 != 0.0)
    {
      outlined consume of MLDataValue(v332, v331, 2);
      swift_release();
      swift_bridgeObjectRelease(v169);
      swift_release();
      swift_bridgeObjectRelease(v356);
      (*(void (**)(uint64_t *, uint64_t))(v334 + 8))(v337, v335);
      goto LABEL_150;
    }
    uint64_t v219 = (uint64_t)v218;
    v359[0] = 0.0;
    uint64_t v220 = (uint64_t)v218[2];
    *(void *)type = specialized Array.init(repeating:count:)(currentFileIndex, v220);
    os_log_t log = (os_log_t)specialized Array.init(repeating:count:)((uint64_t)v332, (uint64_t)v331, v220);
    Float64 seconds = COERCE_DOUBLE(specialized Array.init(repeating:count:)(v320, v356, v220));
    swift_beginAccess((Float64 *)v317, &v362, 33, 0);
    specialized Array.append<A>(contentsOf:)(v219);
    swift_endAccess(&v362);
    swift_beginAccess(v318, &v362, 33, 0);
    specialized Array.append<A>(contentsOf:)(*(uint64_t *)type);
    swift_endAccess(&v362);
    swift_beginAccess(v319, &v362, 33, 0);
    specialized Array.append<A>(contentsOf:)((uint64_t)log);
    swift_endAccess(&v362);
    swift_beginAccess(v326, &v362, 33, 0);
    specialized Array.append<A>(contentsOf:)(*(uint64_t *)&seconds);
    swift_endAccess(&v362);
    uint64_t v221 = (uint64_t)v345;
    _TablePrinter.printRow(currentFileIndex:)(currentFileIndex);
    uint64_t v222 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<CVarArg>);
    uint64_t v223 = swift_allocObject(v222, 72, 7);
    *(void *)(v223 + 16) = 1;
    *(void *)(v223 + 24) = 2;
    double v35 = -Date.timeIntervalSinceNow.getter();
    *(void *)(v223 + 56) = &type metadata for Double;
    *(void *)(v223 + 64) = &protocol witness table for Double;
    *(double *)(v223 + 32) = v35;
    Float64 seconds = COERCE_DOUBLE(String.init(format:_:)(1714826789, 0xE400000000000000, v223));
    int64_t v225 = v224;
    uint64_t v226 = v313;
    outlined init with copy of MLTrainingSessionParameters(v221, (uint64_t)v313, type metadata accessor for _TablePrinter);
    swift_bridgeObjectRetain(v225);
    v227 = (os_log_s *)Logger.logObject.getter();
    os_log_type_t v228 = static os_log_type_t.debug.getter();
    int v229 = v228;
    if (os_log_type_enabled(v227, v228))
    {
      os_log_t log = v227;
      uint64_t v230 = swift_slowAlloc(32, -1);
      *(_DWORD *)type = v229;
      uint64_t v231 = v230;
      Swift::Int currentFileIndex = swift_slowAlloc(32, -1);
      v362.CMTimeValue value = currentFileIndex;
      *(_DWORD *)uint64_t v231 = 134218498;
      Swift::Int v348 = v311;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v348, v349, v231 + 4, v231 + 12);
      *(_WORD *)(v231 + 12) = 2048;
      uint64_t v232 = (uint64_t)v226;
      Swift::Int v233 = *v226;
      outlined destroy of MLActivityClassifier.ModelParameters(v232, type metadata accessor for _TablePrinter);
      Swift::Int v348 = v233;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v348, v349, v231 + 14, v231 + 22);
      *(_WORD *)(v231 + 22) = 2080;
      swift_bridgeObjectRetain(v225);
      Swift::Int v348 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(*(uint64_t *)&seconds, v225, &v362.value);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v348, v349, v231 + 24, v231 + 32);
      swift_bridgeObjectRelease_n(v225, 3, v234, v235, v236);
      os_log_t v237 = log;
      _os_log_impl(&dword_0, log, type[0], "Extracted features from %ld out of %ld annotated video clips, elapsed time: %s", (uint8_t *)v231, 0x20u);
      Swift::Int v238 = currentFileIndex;
      swift_arrayDestroy(currentFileIndex, 1, v340);
      swift_slowDealloc(v238, -1, -1);
      swift_slowDealloc(v231, -1, -1);
      swift_release();
      swift_bridgeObjectRelease(v351);
      swift_release();
      os_log_t v239 = v237;
    }
    else
    {
      outlined destroy of MLActivityClassifier.ModelParameters((uint64_t)v226, type metadata accessor for _TablePrinter);
      swift_release();
      swift_bridgeObjectRelease(v351);
      swift_release();
      swift_bridgeObjectRelease_n(v225, 2, v240, v241, v242);
      os_log_t v239 = v227;
    }

    (*(void (**)(uint64_t *, uint64_t))(v334 + 8))(v337, v335);
    uint64_t v37 = v329;
    CMTimeValue v33 = (CMTimeValue)v327;
    char v36 = v328;
    v362.CMTimeValue value = (CMTimeValue)v327;
    LOBYTE(v362.timescale) = v328;
  }
  while (v37 != MLDataTable.size.getter());
LABEL_139:
  outlined consume of Result<_DataTable, Error>(v33, v36);
  static os_log_type_t.info.getter();
  uint64_t v255 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<CVarArg>);
  float v256 = (void *)swift_allocObject(v255, 72, 7);
  char v257 = (char)v256;
  v256[2] = 1;
  v256[3] = 2;
  v256[7] = &type metadata for Int;
  v256[8] = &protocol witness table for Int;
  v256[4] = 3;
  os_log(_:dso:log:type:_:)("event: %lu", 10);
  swift_bridgeObjectRelease(v257);
  uint64_t v258 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, MLUntypedColumn)>);
  uint64_t inited = swift_initStackObject(v258, v308);
  *(void *)(inited + 16) = 4;
  *(void *)(inited + 24) = 8;
  *(void *)(inited + 32) = 0x6C6562616CLL;
  *(void *)(inited + 40) = 0xE500000000000000;
  v260 = v319;
  swift_beginAccess(v319, &v327, 0, 0);
  v362.CMTimeValue value = *v260;
  int v261 = alloca(24);
  uint64_t v262 = alloca(32);
  uint64_t v309 = &v362;
  swift_bridgeObjectRetain(v362.value);
  uint64_t ML14_UntypedColumnC_s5Error_pTgm5 = _ss6ResultOsRi_zrlE8catchingAByxq_Gxyq_YKXE_tcfC8CreateML14_UntypedColumnC_s5Error_pTgm5((void (*)(void *))partial apply for specialized closure #1 in MLUntypedColumn.init<A>(_:));
  LOBYTE(v260) = v264;
  swift_bridgeObjectRelease(v362.value);
  *(void *)(inited + 48) = ML14_UntypedColumnC_s5Error_pTgm5;
  *(unsigned char *)(inited + 56) = v260 & 1;
  *(void *)(inited + 64) = 0x5F6E6F6973736573;
  *(void *)(inited + 72) = 0xEA00000000006469;
  v265 = v318;
  swift_beginAccess(v318, &v362, 0, 0);
  Swift::Int v348 = *v265;
  uint64_t v266 = alloca(24);
  uint64_t v267 = alloca(32);
  uint64_t v309 = (CMTime *)&v348;
  swift_bridgeObjectRetain(v348);
  uint64_t v268 = _ss6ResultOsRi_zrlE8catchingAByxq_Gxyq_YKXE_tcfC8CreateML14_UntypedColumnC_s5Error_pTgm5((void (*)(void *))partial apply for specialized closure #1 in MLUntypedColumn.init<A>(_:));
  LOBYTE(v260) = v269;
  swift_bridgeObjectRelease(v348);
  *(void *)(inited + 80) = v268;
  *(unsigned char *)(inited + 88) = v260 & 1;
  *(void *)(inited + 96) = 0x746E696F7079656BLL;
  *(void *)(inited + 104) = 0xE900000000000073;
  uint64_t v270 = (Float64 *)v317;
  swift_beginAccess((Float64 *)v317, &v348, 0, 0);
  v310[0] = *v270;
  uint64_t v271 = alloca(24);
  uint64_t v272 = alloca(32);
  uint64_t v309 = (CMTime *)v310;
  swift_bridgeObjectRetain(LOBYTE(v310[0]));
  uint64_t v273 = _ss6ResultOsRi_zrlE8catchingAByxq_Gxyq_YKXE_tcfC8CreateML14_UntypedColumnC_s5Error_pTgm5((void (*)(void *))partial apply for specialized closure #1 in MLUntypedColumn.init<A>(_:));
  LOBYTE(v260) = v274;
  swift_bridgeObjectRelease(LOBYTE(v310[0]));
  *(void *)(inited + 112) = v273;
  *(unsigned char *)(inited + 120) = v260 & 1;
  *(void *)(inited + 128) = 0x7461506F65646976;
  *(void *)(inited + 136) = 0xE900000000000068;
  v275 = v326;
  swift_beginAccess(v326, v310, 0, 0);
  uint64_t v324 = *v275;
  uint64_t v276 = alloca(24);
  v277 = alloca(32);
  uint64_t v309 = (CMTime *)&v324;
  swift_bridgeObjectRetain(v324);
  uint64_t v278 = _ss6ResultOsRi_zrlE8catchingAByxq_Gxyq_YKXE_tcfC8CreateML14_UntypedColumnC_s5Error_pTgm5((void (*)(void *))closure #1 in MLUntypedColumn.init<A>(_:)specialized partial apply);
  LOBYTE(v260) = v279;
  swift_bridgeObjectRelease(v324);
  *(void *)(inited + 144) = v278;
  *(unsigned char *)(inited + 152) = v260 & 1;
  uint64_t v280 = Dictionary.init(dictionaryLiteral:)(inited, &type metadata for String, &type metadata for MLUntypedColumn, &protocol witness table for String);
  Float64 v281 = v359[0];
  specialized MLDataTable.init<A>(uniqueKeysWithValues:)(v280);
  if (v281 == 0.0)
  {
    char v282 = v325;
    uint64_t v283 = v316;
    *uint64_t v316 = v324;
    *((unsigned char *)v283 + 8) = v282;
  }
  return outlined destroy of MLActivityClassifier.ModelParameters((uint64_t)v345, type metadata accessor for _TablePrinter);
}

uint64_t static MLActionClassifier.FeatureExtractor.extractFeatures(from:targetFrameRate:)(uint64_t a1, double a2)
{
  double v10 = a2;
  uint64_t v11 = v2;
  uint64_t v5 = *(void *)a1;
  char v6 = *(unsigned char *)(a1 + 8);
  uint64_t inited = swift_initStackObject(v4, v9);
  *(void *)(inited + 32) = _swiftEmptyArrayStorage;
  *(void *)(inited + 40) = _swiftEmptyArrayStorage;
  *(void *)(inited + 48) = _swiftEmptyArrayStorage;
  *(void *)(inited + 56) = _swiftEmptyArrayStorage;
  *(void *)(inited + 16) = v5;
  *(unsigned char *)(inited + 24) = v6;
  if (v3) {
    return outlined copy of Result<_DataTable, Error>(v5, v6);
  }
  outlined copy of Result<_DataTable, Error>(v5, v6);
  MLActionClassifier.FeatureExtractor.extractFeaturesFromFileTable(_:)(v10);
  return swift_release();
}

uint64_t type metadata accessor for MLActionClassifier.FeatureExtractor()
{
  return objc_opt_self(_TtCV8CreateML18MLActionClassifier16FeatureExtractor);
}

void *MLWordEmbedding.prediction(from:maxCount:maxDistance:distanceType:)(double a1)
{
  uint64_t v1 = NLEmbedding.neighbors(for:maximumCount:distanceType:)();
  uint64_t v2 = *(void *)(v1 + 16);
  char v13 = v1;
  if (v2)
  {
    uint64_t v3 = (double *)(v1 + 48);
    do
    {
      if (a1 > *v3)
      {
        double v15 = *v3;
        uint64_t v11 = *((void *)v3 - 2);
        uint64_t v12 = *((void *)v3 - 1);
        swift_bridgeObjectRetain(v12);
        if (!swift_isUniquelyReferenced_nonNull_native(_swiftEmptyArrayStorage)) {
          specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, _swiftEmptyArrayStorage[2] + 1, 1);
        }
        unint64_t v4 = _swiftEmptyArrayStorage[2];
        int64_t v5 = v4 + 1;
        double v6 = v15;
        if (_swiftEmptyArrayStorage[3] >> 1 <= v4)
        {
          unint64_t v14 = _swiftEmptyArrayStorage[2];
          specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(_swiftEmptyArrayStorage[3] >= 2uLL, v5, 1);
          unint64_t v4 = v14;
          double v6 = v15;
        }
        _swiftEmptyArrayStorage[2] = v5;
        uint64_t v7 = 3 * v4;
        _swiftEmptyArrayStorage[v7 + 4] = v11;
        _swiftEmptyArrayStorage[v7 + 5] = v12;
        *(double *)&_swiftEmptyArrayStorage[v7 + 6] = v6;
      }
      v3 += 3;
      --v2;
    }
    while (v2);
  }
  swift_bridgeObjectRelease(v13);
  int64_t v8 = specialized _arrayForceCast<A, B>(_:)((uint64_t)_swiftEmptyArrayStorage);
  swift_release();
  return v8;
}

uint64_t MLLogisticRegressionClassifier.ModelParameters.init(validation:maxIterations:l1Penalty:l2Penalty:stepSize:convergenceThreshold:featureRescaling:)(uint64_t a1, uint64_t a2, char a3, double a4, double a5, double a6, double a7)
{
  double v20 = a7;
  double v22 = a6;
  double v23 = a5;
  double v24 = a4;
  uint64_t v19 = a1;
  uint64_t v9 = v7;
  uint64_t v10 = type metadata accessor for MLLogisticRegressionClassifier.ModelParameters.ValidationData(0);
  int64_t v11 = *(void *)(*(void *)(v10 - 8) + 64);
  uint64_t v12 = alloca(v11);
  char v13 = alloca(v11);
  uint64_t v21 = v9 + 8;
  *(_OWORD *)(v9 + 24) = 0;
  *(_OWORD *)(v9 + 8) = 0;
  *(void *)uint64_t v9 = a2;
  *(double *)(v9 + 40) = v24;
  *(double *)(v9 + 48) = v23;
  *(double *)(v9 + 56) = v22;
  *(double *)(v9 + 64) = v20;
  *(unsigned char *)(v9 + 72) = a3 & 1;
  uint64_t v14 = v19;
  outlined init with copy of MLLogisticRegressionClassifier.ModelParameters.ValidationData(v19, (uint64_t)&v17);
  void v18[3] = v10;
  boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1(v18);
  outlined init with take of MLLogisticRegressionClassifier.ModelParameters.ValidationData((uint64_t)&v17, (uint64_t)boxed_opaque_existential_1);
  outlined assign with take of Any?((uint64_t)v18, v21);
  return outlined destroy of MLLogisticRegressionClassifier.ModelParameters.ValidationData(v14);
}

uint64_t MLLogisticRegressionClassifier.ModelParameters.validation.setter(uint64_t a1)
{
  v4[3] = type metadata accessor for MLLogisticRegressionClassifier.ModelParameters.ValidationData(0);
  boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1(v4);
  outlined init with take of MLLogisticRegressionClassifier.ModelParameters.ValidationData(a1, (uint64_t)boxed_opaque_existential_1);
  return outlined assign with take of Any?((uint64_t)v4, v1 + 8);
}

uint64_t MLLogisticRegressionClassifier.ModelParameters.maxIterations.getter()
{
  return *(void *)v0;
}

void MLLogisticRegressionClassifier.ModelParameters.maxIterations.setter(uint64_t a1)
{
  *uint64_t v1 = a1;
}

void (*MLLogisticRegressionClassifier.ModelParameters.maxIterations.modify())()
{
  return MLBoostedTreeRegressor.ModelParameters.maxDepth.modify;
}

uint64_t MLLogisticRegressionClassifier.ModelParameters.validationData.getter(__m128 a1)
{
  uint64_t v2 = type metadata accessor for MLLogisticRegressionClassifier.ModelParameters.ValidationData(0);
  int64_t v3 = *(void *)(*(void *)(v2 - 8) + 64);
  unint64_t v4 = alloca(v3);
  int64_t v5 = alloca(v3);
  outlined init with copy of Any?(v1 + 8, (uint64_t)&v9);
  if (!v10) {
    BUG();
  }
  outlined init with take of Any(&v9, v8);
  swift_dynamicCast(&v7, v8, (char *)&type metadata for Any + 8, v2, 7);
  MLLogisticRegressionClassifier.ModelParameters.ValidationData.asTable()(a1);
  return outlined destroy of MLLogisticRegressionClassifier.ModelParameters.ValidationData((uint64_t)&v7);
}

uint64_t key path getter for MLLogisticRegressionClassifier.ModelParameters.validationData : MLLogisticRegressionClassifier.ModelParameters(__m128 a1)
{
  uint64_t v2 = v1;
  MLLogisticRegressionClassifier.ModelParameters.validationData.getter(a1);
  uint64_t result = v4;
  *(void *)uint64_t v2 = v4;
  *(unsigned char *)(v2 + 8) = v5;
  return result;
}

uint64_t key path setter for MLLogisticRegressionClassifier.ModelParameters.validationData : MLLogisticRegressionClassifier.ModelParameters(uint64_t a1)
{
  int v1 = *(_DWORD *)(a1 + 8);
  uint64_t v3 = *(void *)a1;
  char v4 = v1;
  outlined copy of MLDataTable?(v3, v1);
  return MLLogisticRegressionClassifier.ModelParameters.validationData.setter((uint64_t)&v3);
}

uint64_t MLLogisticRegressionClassifier.ModelParameters.validationData.setter(uint64_t a1)
{
  uint64_t v18 = v1;
  unsigned int v2 = 0;
  uint64_t v3 = type metadata accessor for MLLogisticRegressionClassifier.ModelParameters.ValidationData(0);
  int64_t v4 = *(void *)(*(void *)(v3 - 8) + 64);
  char v5 = alloca(v4);
  double v6 = alloca(v4);
  uint64_t v17 = *(void *)a1;
  char v7 = *(unsigned char *)(a1 + 8);
  uint64_t v13 = v3;
  uint64_t v16 = __swift_allocate_boxed_opaque_existential_1(&v11);
  if (v7 == -1)
  {
    long long v11 = 0;
    __int16 v12 = 256;
  }
  else
  {
    uint64_t v14 = v17;
    char v15 = v7 & 1;
    if (MLDataTable.size.getter())
    {
      *(void *)&long long v11 = v17;
      BYTE8(v11) = v7 & 1;
      int v10 = 1;
    }
    else
    {
      outlined consume of MLDataTable?(v17, v7);
      int v10 = 3;
    }
    unsigned int v2 = v10;
  }
  uint64_t v8 = v18;
  swift_storeEnumTagMultiPayload(&v11, v3, v2);
  outlined init with take of MLLogisticRegressionClassifier.ModelParameters.ValidationData((uint64_t)&v11, (uint64_t)v16);
  return outlined assign with take of Any?((uint64_t)&v11, v8 + 8);
}

uint64_t MLLogisticRegressionClassifier.ModelParameters.validation.getter()
{
  uint64_t v2 = v0;
  outlined init with copy of Any?(v1 + 8, (uint64_t)&v6);
  if (!v7) {
    BUG();
  }
  outlined init with take of Any(&v6, v5);
  uint64_t v3 = type metadata accessor for MLLogisticRegressionClassifier.ModelParameters.ValidationData(0);
  return swift_dynamicCast(v2, v5, (char *)&type metadata for Any + 8, v3, 7);
}

uint64_t (*MLLogisticRegressionClassifier.ModelParameters.validationData.modify(uint64_t a1, __m128 a2))(uint64_t a1, char a2)
{
  *(void *)(a1 + 16) = v2;
  MLLogisticRegressionClassifier.ModelParameters.validationData.getter(a2);
  return MLLogisticRegressionClassifier.ModelParameters.validationData.modify;
}

uint64_t MLLogisticRegressionClassifier.ModelParameters.validationData.modify(uint64_t a1, char a2)
{
  uint64_t v2 = *(void *)a1;
  char v3 = *(unsigned char *)(a1 + 8);
  uint64_t v6 = *(void *)a1;
  char v7 = v3;
  if ((a2 & 1) == 0) {
    return MLLogisticRegressionClassifier.ModelParameters.validationData.setter((uint64_t)&v6);
  }
  char v4 = v3;
  outlined copy of MLDataTable?(v2, v3);
  MLLogisticRegressionClassifier.ModelParameters.validationData.setter((uint64_t)&v6);
  return outlined consume of MLDataTable?(v2, v4);
}

uint64_t outlined copy of MLDataTable?(uint64_t a1, char a2)
{
  if (a2 != -1) {
    return outlined copy of Result<_DataTable, Error>(a1, a2 & 1);
  }
  return result;
}

uint64_t key path setter for MLLogisticRegressionClassifier.ModelParameters.validation : MLLogisticRegressionClassifier.ModelParameters(uint64_t a1)
{
  v6[0] = v1;
  int64_t v2 = *(void *)(*(void *)(type metadata accessor for MLLogisticRegressionClassifier.ModelParameters.ValidationData(0)
                             - 8)
                 + 64);
  char v3 = alloca(v2);
  char v4 = alloca(v2);
  outlined init with copy of MLLogisticRegressionClassifier.ModelParameters.ValidationData(a1, (uint64_t)v6);
  return MLLogisticRegressionClassifier.ModelParameters.validation.setter((uint64_t)v6);
}

void (*MLLogisticRegressionClassifier.ModelParameters.validation.modify(void *a1))(uint64_t a1, char a2)
{
  int64_t v2 = malloc(0xA0uLL);
  *a1 = v2;
  *((void *)v2 + 16) = v1;
  uint64_t v3 = type metadata accessor for MLLogisticRegressionClassifier.ModelParameters.ValidationData(0);
  *((void *)v2 + 17) = v3;
  size_t v4 = *(void *)(*(void *)(v3 - 8) + 64);
  *((void *)v2 + 18) = malloc(v4);
  char v5 = malloc(v4);
  *((void *)v2 + 19) = v5;
  outlined init with copy of Any?(v1 + 8, (uint64_t)(v2 + 2));
  if (!*((void *)v2 + 7)) {
    BUG();
  }
  outlined init with take of Any(v2 + 2, v2);
  swift_dynamicCast(v5, v2, (char *)&type metadata for Any + 8, v3, 7);
  return MLLogisticRegressionClassifier.ModelParameters.validation.modify;
}

void MLLogisticRegressionClassifier.ModelParameters.validation.modify(uint64_t a1, char a2)
{
  int64_t v2 = *(void **)a1;
  uint64_t v3 = *(void **)(*(void *)a1 + 152);
  uint64_t v4 = *(void *)(*(void *)a1 + 144);
  uint64_t v5 = *(void *)(*(void *)a1 + 136);
  uint64_t v6 = *(void *)(*(void *)a1 + 128) + 8;
  if (a2)
  {
    int v10 = *(void **)(*(void *)a1 + 144);
    outlined init with copy of MLLogisticRegressionClassifier.ModelParameters.ValidationData(*(void *)(*(void *)a1 + 152), v4);
    v2[11] = v5;
    char v7 = v10;
    boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1(v2 + 8);
    outlined init with take of MLLogisticRegressionClassifier.ModelParameters.ValidationData((uint64_t)v10, (uint64_t)boxed_opaque_existential_1);
    outlined assign with take of Any?((uint64_t)(v2 + 8), v6);
    outlined destroy of MLLogisticRegressionClassifier.ModelParameters.ValidationData((uint64_t)v3);
  }
  else
  {
    v2[15] = v5;
    char v7 = (void *)v4;
    long long v9 = __swift_allocate_boxed_opaque_existential_1(v2 + 12);
    outlined init with take of MLLogisticRegressionClassifier.ModelParameters.ValidationData((uint64_t)v3, (uint64_t)v9);
    outlined assign with take of Any?((uint64_t)(v2 + 12), v6);
  }
  free(v3);
  free(v7);
  free(v2);
}

double MLLogisticRegressionClassifier.ModelParameters.l1Penalty.getter()
{
  return *(double *)(v0 + 40);
}

void MLLogisticRegressionClassifier.ModelParameters.l1Penalty.setter(double a1)
{
  *(double *)(v1 + 40) = a1;
}

void (*MLLogisticRegressionClassifier.ModelParameters.l1Penalty.modify())()
{
  return MLBoostedTreeRegressor.ModelParameters.maxDepth.modify;
}

double MLLogisticRegressionClassifier.ModelParameters.l2Penalty.getter()
{
  return *(double *)(v0 + 48);
}

void MLLogisticRegressionClassifier.ModelParameters.l2Penalty.setter(double a1)
{
  *(double *)(v1 + 48) = a1;
}

void (*MLLogisticRegressionClassifier.ModelParameters.l2Penalty.modify())()
{
  return MLBoostedTreeRegressor.ModelParameters.maxDepth.modify;
}

double MLLogisticRegressionClassifier.ModelParameters.stepSize.getter()
{
  return *(double *)(v0 + 56);
}

void MLLogisticRegressionClassifier.ModelParameters.stepSize.setter(double a1)
{
  *(double *)(v1 + 56) = a1;
}

void (*MLLogisticRegressionClassifier.ModelParameters.stepSize.modify())()
{
  return MLBoostedTreeRegressor.ModelParameters.maxDepth.modify;
}

double MLLogisticRegressionClassifier.ModelParameters.convergenceThreshold.getter()
{
  return *(double *)(v0 + 64);
}

void MLLogisticRegressionClassifier.ModelParameters.convergenceThreshold.setter(double a1)
{
  *(double *)(v1 + 64) = a1;
}

void (*MLLogisticRegressionClassifier.ModelParameters.convergenceThreshold.modify())()
{
  return MLBoostedTreeRegressor.ModelParameters.maxDepth.modify;
}

char MLLogisticRegressionClassifier.ModelParameters.featureRescaling.getter()
{
  return *(unsigned char *)(v0 + 72);
}

void MLLogisticRegressionClassifier.ModelParameters.featureRescaling.setter(char a1)
{
  *(unsigned char *)(v1 + 72) = a1 & 1;
}

void (*MLLogisticRegressionClassifier.ModelParameters.featureRescaling.modify())()
{
  return MLBoostedTreeRegressor.ModelParameters.maxDepth.modify;
}

uint64_t MLLogisticRegressionClassifier.ModelParameters.init(validationData:maxIterations:l1Penalty:l2Penalty:stepSize:convergenceThreshold:featureRescaling:)(uint64_t *a1, uint64_t a2, char a3, double a4, double a5, double a6, double a7)
{
  uint64_t v8 = *a1;
  char v9 = *((unsigned char *)a1 + 8);
  *(_OWORD *)(v7 + 24) = 0;
  *(_OWORD *)(v7 + 8) = 0;
  *(void *)uint64_t v7 = a2;
  *(double *)(v7 + 40) = a4;
  *(double *)(v7 + 48) = a5;
  *(double *)(v7 + 56) = a6;
  *(double *)(v7 + 64) = a7;
  *(unsigned char *)(v7 + 72) = a3 & 1;
  uint64_t v11 = v8;
  char v12 = v9;
  return MLLogisticRegressionClassifier.ModelParameters.validationData.setter((uint64_t)&v11);
}

unint64_t MLLogisticRegressionClassifier.ModelParameters.description.getter()
{
  _StringGuts.grow(_:)(19);
  swift_bridgeObjectRelease(0xE000000000000000);
  v1._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter(&type metadata for Int, &protocol witness table for Int);
  char object = v1._object;
  String.append(_:)(v1);
  swift_bridgeObjectRelease(object);
  v3._uint64_t countAndFlagsBits = 10;
  v3._char object = (void *)0xE100000000000000;
  String.append(_:)(v3);
  v13._uint64_t countAndFlagsBits = 0;
  v13._char object = (void *)0xE000000000000000;
  v3._char object = (void *)0xEC000000203A7974;
  v3._uint64_t countAndFlagsBits = 0x6C616E655020314CLL;
  String.append(_:)(v3);
  Double.write<A>(to:)(&v13, &type metadata for DefaultStringInterpolation, &protocol witness table for DefaultStringInterpolation);
  v3._uint64_t countAndFlagsBits = 10;
  v3._char object = (void *)0xE100000000000000;
  String.append(_:)(v3);
  uint64_t v4 = v13._object;
  String.append(_:)(v13);
  swift_bridgeObjectRelease(v4);
  v13._uint64_t countAndFlagsBits = 0;
  v13._char object = (void *)0xE000000000000000;
  v3._uint64_t countAndFlagsBits = 0x6C616E655020324CLL;
  v3._char object = (void *)0xEC000000203A7974;
  String.append(_:)(v3);
  Double.write<A>(to:)(&v13, &type metadata for DefaultStringInterpolation, &protocol witness table for DefaultStringInterpolation);
  v3._uint64_t countAndFlagsBits = 10;
  v3._char object = (void *)0xE100000000000000;
  String.append(_:)(v3);
  uint64_t v5 = v13._object;
  String.append(_:)(v13);
  swift_bridgeObjectRelease(v5);
  v13._uint64_t countAndFlagsBits = 0;
  v13._char object = (void *)0xE000000000000000;
  v3._uint64_t countAndFlagsBits = 0x7A69532070657453;
  v3._char object = (void *)0xEB00000000203A65;
  String.append(_:)(v3);
  Double.write<A>(to:)(&v13, &type metadata for DefaultStringInterpolation, &protocol witness table for DefaultStringInterpolation);
  v3._uint64_t countAndFlagsBits = 10;
  v3._char object = (void *)0xE100000000000000;
  String.append(_:)(v3);
  uint64_t v6 = v13._object;
  String.append(_:)(v13);
  swift_bridgeObjectRelease(v6);
  v13._uint64_t countAndFlagsBits = 0;
  v13._char object = (void *)0xE000000000000000;
  _StringGuts.grow(_:)(26);
  v3._uint64_t countAndFlagsBits = 0xD000000000000017;
  v3._char object = "ml.actionClassifier" + 0x8000000000000000;
  String.append(_:)(v3);
  Double.write<A>(to:)(&v13, &type metadata for DefaultStringInterpolation, &protocol witness table for DefaultStringInterpolation);
  v3._uint64_t countAndFlagsBits = 10;
  v9._char object = (void *)0xE100000000000000;
  String.append(_:)(v9);
  uint64_t v7 = v13._object;
  String.append(_:)(v13);
  swift_bridgeObjectRelease(v7);
  v13._uint64_t countAndFlagsBits = 0;
  v13._char object = (void *)0xE000000000000000;
  _StringGuts.grow(_:)(22);
  swift_bridgeObjectRelease(v13._object);
  v13._uint64_t countAndFlagsBits = 0xD000000000000013;
  unsigned __int8 v8 = *(unsigned char *)(v0 + 72);
  v9._uint64_t countAndFlagsBits = 0x65736C6166;
  if (v8) {
    v9._uint64_t countAndFlagsBits = 1702195828;
  }
  v13._char object = "Convergence Threshold: " + 0x8000000000000000;
  v9._char object = (void *)((v8 ^ 1u | 0xFFFFFFFFFFFFFFE4) << 56);
  String.append(_:)(v9);
  swift_bridgeObjectRelease(v9._object);
  v10._uint64_t countAndFlagsBits = 10;
  v10._char object = (void *)0xE100000000000000;
  String.append(_:)(v10);
  uint64_t v11 = v13._object;
  String.append(_:)(v13);
  swift_bridgeObjectRelease(v11);
  return 0xD000000000000010;
}

unint64_t protocol witness for CustomStringConvertible.description.getter in conformance MLLogisticRegressionClassifier.ModelParameters()
{
  return MLLogisticRegressionClassifier.ModelParameters.description.getter();
}

unint64_t MLLogisticRegressionClassifier.ModelParameters.debugDescription.getter()
{
  return MLLogisticRegressionClassifier.ModelParameters.description.getter();
}

unint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance MLLogisticRegressionClassifier.ModelParameters()
{
  return MLLogisticRegressionClassifier.ModelParameters.debugDescription.getter();
}

unint64_t MLLogisticRegressionClassifier.ModelParameters.playgroundDescription.getter()
{
  Swift::String v1 = v0;
  unint64_t result = MLLogisticRegressionClassifier.ModelParameters.description.getter();
  v1[3] = (unint64_t)&type metadata for String;
  *Swift::String v1 = result;
  v1[1] = v3;
  return result;
}

unint64_t protocol witness for CustomPlaygroundDisplayConvertible.playgroundDescription.getter in conformance MLLogisticRegressionClassifier.ModelParameters()
{
  return MLLogisticRegressionClassifier.ModelParameters.playgroundDescription.getter();
}

uint64_t sub_CF5D4(__m128 a1)
{
  return key path getter for MLLogisticRegressionClassifier.ModelParameters.validationData : MLLogisticRegressionClassifier.ModelParameters(a1);
}

uint64_t sub_CF5DE(uint64_t a1)
{
  return key path setter for MLLogisticRegressionClassifier.ModelParameters.validationData : MLLogisticRegressionClassifier.ModelParameters(a1);
}

uint64_t sub_CF5E8(uint64_t a1)
{
  return MLLogisticRegressionClassifier.ModelParameters.validation.getter(a1);
}

uint64_t sub_CF5FF(uint64_t a1)
{
  return key path setter for MLLogisticRegressionClassifier.ModelParameters.validation : MLLogisticRegressionClassifier.ModelParameters(a1);
}

uint64_t destroy for MLLogisticRegressionClassifier.ModelParameters(uint64_t a1)
{
  if (*(void *)(a1 + 32)) {
    return __swift_destroy_boxed_opaque_existential_1Tm((void *)(a1 + 8));
  }
  return result;
}

uint64_t initializeWithCopy for MLLogisticRegressionClassifier.ModelParameters(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  uint64_t v4 = (_OWORD *)(a1 + 8);
  uint64_t v5 = (long long *)(a2 + 8);
  uint64_t v6 = *(void *)(a2 + 32);
  if (v6)
  {
    *(void *)(a1 + 32) = v6;
    (**(void (***)(_OWORD *, long long *))(v6 - 8))(v4, v5);
  }
  else
  {
    long long v7 = *v5;
    v4[1] = v5[1];
    *uint64_t v4 = v7;
  }
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
  *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
  *(unsigned char *)(a1 + 72) = *(unsigned char *)(a2 + 72);
  return a1;
}

uint64_t assignWithCopy for MLLogisticRegressionClassifier.ModelParameters(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  uint64_t v2 = *(void *)(a2 + 32);
  if (!*(void *)(a1 + 32))
  {
    if (v2)
    {
      *(void *)(a1 + 32) = v2;
      (**(void (***)(uint64_t, uint64_t))(v2 - 8))(a1 + 8, a2 + 8);
      goto LABEL_8;
    }
LABEL_7:
    long long v3 = *(_OWORD *)(a2 + 8);
    *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
    *(_OWORD *)(a1 + 8) = v3;
    goto LABEL_8;
  }
  if (!v2)
  {
    __swift_destroy_boxed_opaque_existential_1Tm((void *)(a1 + 8));
    goto LABEL_7;
  }
  __swift_assign_boxed_opaque_existential_0((uint64_t *)(a1 + 8), (uint64_t *)(a2 + 8));
LABEL_8:
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  *(void *)(a1 + 56) = *(void *)(a2 + 56);
  *(void *)(a1 + 64) = *(void *)(a2 + 64);
  *(unsigned char *)(a1 + 72) = *(unsigned char *)(a2 + 72);
  return a1;
}

void *__swift_memcpy73_8(void *a1, const void *a2)
{
  uint64_t result = a1;
  qmemcpy(a1, a2, 0x49uLL);
  return result;
}

uint64_t assignWithTake for MLLogisticRegressionClassifier.ModelParameters(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  if (*(void *)(a1 + 32)) {
    __swift_destroy_boxed_opaque_existential_1Tm((void *)(a1 + 8));
  }
  long long v2 = *(_OWORD *)(a2 + 8);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  *(_OWORD *)(a1 + 8) = v2;
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
  *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
  *(unsigned char *)(a1 + 72) = *(unsigned char *)(a2 + 72);
  return a1;
}

uint64_t getEnumTagSinglePayload for MLLogisticRegressionClassifier.ModelParameters(uint64_t a1, unsigned int a2)
{
  if (a2)
  {
    if (a2 >= 0x7FFFFFFF && *(unsigned char *)(a1 + 73))
    {
      int v2 = *(_DWORD *)a1 + 2147483646;
    }
    else
    {
      unint64_t v3 = *(void *)(a1 + 32);
      unint64_t v4 = v3 & 0xFFFFFFFF00000001;
      int v5 = (v3 >> 1) - 1;
      int v6 = -1;
      if (v5 >= 0) {
        int v6 = v5;
      }
      int v2 = v4 != 0 ? -1 : v6;
    }
  }
  else
  {
    int v2 = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for MLLogisticRegressionClassifier.ModelParameters(uint64_t a1, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFE)
  {
    *(_OWORD *)(a1 + 56) = 0;
    *(_OWORD *)(a1 + 40) = 0;
    *(_OWORD *)(a1 + 24) = 0;
    *(_OWORD *)(a1 + 8) = 0;
    *(void *)a1 = a2 - 0x7FFFFFFF;
    *(unsigned char *)(a1 + 72) = 0;
    if (a3 >= 0x7FFFFFFF) {
      *(unsigned char *)(a1 + 73) = 1;
    }
  }
  else
  {
    if (a3 >= 0x7FFFFFFF) {
      *(unsigned char *)(a1 + 73) = 0;
    }
    if (a2)
    {
      uint64_t result = 2 * a2;
      *(void *)(a1 + 32) = result;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for MLLogisticRegressionClassifier.ModelParameters()
{
  return &type metadata for MLLogisticRegressionClassifier.ModelParameters;
}

void *_sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSaySdG_Sds5NeverOTg5015_sS2dIgyd_S2ds5d16OIegnrzr_TR011_sF77Iegnr_C58Iegyd_TR40_ss3absyxxSLRzs13SignedNumericRzlFSd_TG5Tf3npf_nTf3nnnpf_nTf1cn_n(uint64_t a1)
{
  int64_t v1 = *(void *)(a1 + 16);
  if (!v1) {
    return _swiftEmptyArrayStorage;
  }
  uint64_t v2 = 0;
  int64_t v10 = *(void *)(a1 + 16);
  specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v1, 0);
  int64_t v3 = v1;
  uint64_t v4 = a1;
  uint64_t result = _swiftEmptyArrayStorage;
  do
  {
    double v6 = *(double *)(v4 + 8 * v2 + 32);
    unsigned __int8 v8 = result;
    unint64_t v7 = result[2];
    if (result[3] >> 1 <= v7)
    {
      specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(result[3] >= 2uLL, v7 + 1, 1);
      int64_t v3 = v10;
      uint64_t v4 = a1;
      uint64_t result = v8;
    }
    ++v2;
    result[2] = v7 + 1;
    *(double *)&result[v7 + 4] = fabs(v6);
  }
  while (v3 != v2);
  return result;
}

uint64_t static _MetricUtilities.makeClassifierMetrics(confusionMeter:classLabels:)(double a1, double a2, uint64_t a3, uint64_t a4)
{
  uint64_t v37 = v5;
  uint64_t v26 = v4;
  uint64_t v27 = type metadata accessor for DataFrame(0);
  uint64_t v28 = *(void *)(v27 - 8);
  int64_t v7 = *(void *)(v28 + 64);
  unsigned __int8 v8 = alloca(v7);
  Swift::String v9 = alloca(v7);
  uint64_t v31 = &v26;
  int64_t v10 = alloca(v7);
  uint64_t v11 = alloca(v7);
  uint64_t v32 = &v26;
  uint64_t v38 = type metadata accessor for Tensor(0);
  uint64_t v12 = *(void *)(v38 - 8);
  int64_t v13 = *(void *)(v12 + 64);
  uint64_t v14 = alloca(v13);
  char v15 = alloca(v13);
  _MetricUtilities.ConfusionMatrixMeter.value(normalized:)(0, a1, a2);
  uint64_t v16 = *(void *)(a4 + 16);
  uint64_t v30 = &v26;
  double v36 = static _MetricUtilities.top1Accuracy(confusionMatrix:classCount:)((uint64_t)&v26, v16);
  double v35 = *(double *)&a4;
  uint64_t v17 = v37;
  _MetricUtilities.ConfusionMatrixMeter.valueAsMetricTable(classLabels:)(a4);
  if (v17) {
    return (*(uint64_t (**)(double **, uint64_t))(v12 + 8))(v30, v38);
  }
  uint64_t v37 = v12;
  uint64_t v19 = v33;
  unsigned __int8 v20 = v34;
  uint64_t v21 = (uint64_t)v30;
  static _MetricUtilities.precisionRecall(confusionMatrix:classLabels:)((uint64_t)v30, *(uint64_t *)&v35);
  uint64_t v29 = v33;
  unsigned __int8 v39 = v34;
  double v35 = 1.0 - v36;
  uint64_t v33 = v19;
  LODWORD(v36) = v20;
  unsigned __int8 v34 = v20 & 1;
  outlined copy of Result<_DataTable, Error>(v19, v20);
  DataFrame.init(_:)((uint64_t)&v33);
  uint64_t v33 = v29;
  unsigned __int8 v34 = v39;
  DataFrame.init(_:)((uint64_t)&v33);
  outlined consume of Result<_DataTable, Error>(v19, SLOBYTE(v36));
  (*(void (**)(uint64_t, uint64_t))(v37 + 8))(v21, v38);
  double v22 = v26;
  double *v26 = v35;
  uint64_t v38 = type metadata accessor for MLClassifierMetrics.Precomputed(0);
  double v23 = *(void (**)(char *, double **, uint64_t))(v28 + 32);
  uint64_t v24 = v27;
  v23((char *)v22 + *(int *)(v38 + 20), v32, v27);
  v23((char *)v22 + *(int *)(v38 + 24), v31, v24);
  uint64_t v25 = type metadata accessor for MLClassifierMetrics.Contents(0);
  return swift_storeEnumTagMultiPayload(v22, v25, 1);
}

void *_sSTsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFs12Zip2SequenceVySaySdGAHG_Sds5NeverOTg5022_sS3dIegyyd_Sd_SdtSds5f68OIegnrzr_TR059_s8CreateML16_MetricUtilitiesV4rmse6target10predictionJ35SayH19G_AGtFZS2d_Sdtcfu0_Tf3nnnpf_nTf1cn_nTm(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = a1;
  unint64_t v3 = *(void *)(a1 + 16);
  unint64_t v22 = v3;
  unint64_t v23 = *(void *)(a2 + 16);
  if (v23 < v3) {
    unint64_t v3 = *(void *)(a2 + 16);
  }
  specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v3, 0);
  uint64_t v4 = _swiftEmptyArrayStorage;
  if (v3)
  {
    unint64_t v24 = v3;
    swift_bridgeObjectRetain(a1);
    swift_bridgeObjectRetain(a2);
    unint64_t v5 = v3;
    uint64_t v6 = 0;
    int v7 = 1;
    unint64_t v8 = v22;
    unint64_t v9 = v23;
    do
    {
      if (v8 == v6) {
        BUG();
      }
      if (v9 == v6) {
        BUG();
      }
      double v10 = *(double *)(v2 + 8 * v6 + 32);
      double v11 = *(double *)(a2 + 8 * v6 + 32);
      uint64_t v27 = v4;
      unint64_t v12 = v4[2];
      unint64_t v13 = v4[3];
      int64_t v14 = v12 + 1;
      if (v13 >> 1 <= v12)
      {
        int v15 = v7;
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v13 >= 2, v14, v7);
        int64_t v14 = v12 + 1;
        int v7 = v15;
        unint64_t v5 = v24;
        unint64_t v9 = v23;
        unint64_t v8 = v22;
        uint64_t v4 = v27;
      }
      ++v6;
      v4[2] = v14;
      *(double *)&v4[v12 + 4] = v10 - v11;
      uint64_t v2 = a1;
    }
    while (v5 != v6);
  }
  else
  {
    swift_bridgeObjectRetain(a1);
    swift_bridgeObjectRetain(a2);
    unint64_t v5 = 0;
    unint64_t v8 = v22;
    unint64_t v9 = v23;
  }
  if (v8 <= v9)
  {
    LOBYTE(v16) = a2;
  }
  else
  {
    uint64_t v16 = a2;
    do
    {
      if (v5 >= v8) {
        BUG();
      }
      if (v9 == v5) {
        break;
      }
      if (v9 <= v5) {
        BUG();
      }
      double v17 = *(double *)(v2 + 8 * v5 + 32);
      double v18 = *(double *)(v16 + 8 * v5 + 32);
      unint64_t v19 = v4[2];
      int64_t v20 = v19 + 1;
      if (v4[3] >> 1 <= v19)
      {
        unint64_t v25 = v5;
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v4[3] >= 2uLL, v20, 1);
        unint64_t v5 = v25;
        unint64_t v9 = v23;
        unint64_t v8 = v22;
        uint64_t v16 = a2;
      }
      ++v5;
      v4[2] = v20;
      *(double *)&v4[v19 + 4] = v17 - v18;
    }
    while (v8 != v5);
  }
  swift_bridgeObjectRelease(v16);
  swift_bridgeObjectRelease(v2);
  return v4;
}

char *specialized Sequence.compactMap<A>(_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v8 = *(void *)(a1 + 16);
  if (v8)
  {
    uint64_t v2 = a1;
    swift_bridgeObjectRetain(a1);
    uint64_t v3 = a2;
    uint64_t v4 = (char *)_swiftEmptyArrayStorage;
    unint64_t v5 = 0;
    uint64_t v10 = v2;
    do
    {
      if (v5 >= *(void *)(v3 + 16)) {
        BUG();
      }
      if (*(unsigned char *)(v3 + v5 + 32) == 1)
      {
        uint64_t v9 = *(void *)(v2 + 8 * v5 + 32);
        if (!swift_isUniquelyReferenced_nonNull_native(v4)) {
          uint64_t v4 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *((void *)v4 + 2) + 1, 1, (uint64_t)v4);
        }
        unint64_t v6 = *((void *)v4 + 2);
        if (*((void *)v4 + 3) >> 1 <= v6) {
          uint64_t v4 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(*((void *)v4 + 3) >= 2uLL, v6 + 1, 1, (uint64_t)v4);
        }
        uint64_t v3 = a2;
        *((void *)v4 + 2) = v6 + 1;
        *(void *)&v4[8 * v6 + 32] = v9;
        uint64_t v2 = v10;
      }
      ++v5;
    }
    while (v8 != v5);
    swift_bridgeObjectRelease(v3);
    swift_bridgeObjectRelease(v2);
  }
  else
  {
    swift_bridgeObjectRelease(a2);
    return (char *)_swiftEmptyArrayStorage;
  }
  return v4;
}

uint64_t _MetricUtilities.ConfusionMatrixMeter.add(predicted:target:)(uint64_t a1, uint64_t a2)
{
  v29[0] = v2;
  v29[1] = a2;
  uint64_t v30 = type metadata accessor for FloatingPointRoundingRule(0);
  uint64_t v3 = *(void **)(v30 - 8);
  int64_t v4 = v3[8];
  unint64_t v5 = alloca(v4);
  unint64_t v6 = alloca(v4);
  uint64_t v38 = type metadata accessor for ScalarType(0);
  uint64_t v42 = *(void *)(v38 - 8);
  int64_t v7 = *(void *)(v42 + 64);
  uint64_t v8 = alloca(v7);
  uint64_t v9 = alloca(v7);
  uint64_t v41 = type metadata accessor for Tensor(0);
  uint64_t v33 = *(void *)(v41 - 8);
  int64_t v10 = *(void *)(v33 + 64);
  double v11 = alloca(v10);
  unint64_t v12 = alloca(v10);
  uint64_t v32 = v29;
  unint64_t v13 = alloca(v10);
  int64_t v14 = alloca(v10);
  unsigned __int8 v39 = v29;
  int v15 = alloca(v10);
  uint64_t v16 = alloca(v10);
  uint64_t v31 = v29;
  Tensor.argmax(squeezingAxis:)(1);
  static ScalarType.int.getter();
  unsigned int v40 = enum case for FloatingPointRoundingRule.towardZero(_:);
  unsigned __int8 v34 = (void (*)(void *, void, uint64_t))v3[13];
  uint64_t v17 = v30;
  v34(v29, enum case for FloatingPointRoundingRule.towardZero(_:), v30);
  uint64_t v37 = v29;
  double v18 = v39;
  Tensor.cast(to:roundingRule:)(v29, v29);
  double v35 = (void (*)(void *, uint64_t))v3[1];
  v35(v29, v17);
  double v36 = *(void (**)(void *, uint64_t))(v42 + 8);
  v36(v29, v38);
  uint64_t v42 = *(void *)(v33 + 8);
  ((void (*)(void *, uint64_t))v42)(v18, v41);
  unint64_t v19 = v32;
  Tensor.argmax(squeezingAxis:)(1);
  static ScalarType.int.getter();
  int64_t v20 = v37;
  v34(v37, v40, v17);
  Tensor.cast(to:roundingRule:)(v29, v20);
  v35(v20, v17);
  v36(v29, v38);
  ((void (*)(void *, uint64_t))v42)(v19, v41);
  uint64_t v21 = v31;
  v22._rawValue = (void *)Tensor.scalars<A>(as:)(&type metadata for Int, &type metadata for Int, &protocol witness table for Int);
  unint64_t v23 = v39;
  v24._rawValue = (void *)Tensor.scalars<A>(as:)(&type metadata for Int, &type metadata for Int, &protocol witness table for Int);
  LOBYTE(v20) = v24._rawValue;
  _MetricUtilities.ConfusionMatrixMeter.add(predictedIds:targetIds:)(v22, v24);
  swift_bridgeObjectRelease(v22._rawValue);
  swift_bridgeObjectRelease((_BYTE)v20);
  unint64_t v25 = v23;
  uint64_t v26 = v41;
  uint64_t v27 = (uint64_t (*)(void *, uint64_t))v42;
  ((void (*)(void *, uint64_t))v42)(v25, v41);
  return v27(v21, v26);
}

double static _MetricUtilities.rmse(target:prediction:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a1 + 16);
  if (v2 != *(void *)(a2 + 16))
  {
    _StringGuts.grow(_:)(50);
    swift_bridgeObjectRelease(0);
    v18._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter(&type metadata for Int, &protocol witness table for Int);
    char object = (char)v18._object;
    String.append(_:)(v18);
    swift_bridgeObjectRelease(object);
    v20._char object = "Size of targets " + 0x8000000000000000;
    v20._uint64_t countAndFlagsBits = 0xD000000000000011;
    String.append(_:)(v20);
    v21._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter(&type metadata for Int, &protocol witness table for Int);
    char v22 = (char)v21._object;
    String.append(_:)(v21);
    swift_bridgeObjectRelease(v22);
    v20._uint64_t countAndFlagsBits = 0x20746F6E206F6420;
    v20._char object = (void *)0xED0000686374616DLL;
    String.append(_:)(v20);
    _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, 0xD000000000000010, "n matrix dimension" + 0x8000000000000000, "CreateML/_MetricUtilities.swift", 31, 2, 24, 0);
    BUG();
  }
  swift_bridgeObjectRetain(a2);
  swift_bridgeObjectRetain(a1);
  ML16_MetricUtilitiesV4rmse6target10predictionJ35SayH19G_AGtFZS2d_Sdtcfu0_Tf3nnnpf_nTf1cn_nTm = _sSTsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFs12Zip2SequenceVySaySdGAHG_Sds5NeverOTg5022_sS3dIegyyd_Sd_SdtSds5f68OIegnrzr_TR059_s8CreateML16_MetricUtilitiesV4rmse6target10predictionJ35SayH19G_AGtFZS2d_Sdtcfu0_Tf3nnnpf_nTf1cn_nTm(a2, a1);
  swift_bridgeObjectRelease(a1);
  swift_bridgeObjectRelease(a2);
  int64_t v4 = ML16_MetricUtilitiesV4rmse6target10predictionJ35SayH19G_AGtFZS2d_Sdtcfu0_Tf3nnnpf_nTf1cn_nTm;
  int64_t v5 = ML16_MetricUtilitiesV4rmse6target10predictionJ35SayH19G_AGtFZS2d_Sdtcfu0_Tf3nnnpf_nTf1cn_nTm[2];
  if (v5)
  {
    uint64_t v6 = 0;
    Swift::OpaquePointer v24 = v4;
    int64_t v25 = v5;
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v5, 0);
    int64_t v7 = v25;
    uint64_t v8 = _swiftEmptyArrayStorage;
    unint64_t v9 = _swiftEmptyArrayStorage[2];
    int v10 = 1;
    do
    {
      double v11 = *(double *)&v4[v6 + 4];
      unint64_t v23 = v8;
      unint64_t v12 = v8[3];
      if (v12 >> 1 <= v9)
      {
        int v13 = v10;
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v12 >= 2, v9 + 1, v10);
        int v10 = v13;
        int64_t v7 = v25;
        int64_t v4 = v24;
        uint64_t v8 = v23;
      }
      ++v6;
      _OWORD v8[2] = v9 + 1;
      *(double *)&v8[v9++ + 4] = v11 * v11;
    }
    while (v7 != v6);
    swift_bridgeObjectRelease((_BYTE)v4);
  }
  else
  {
    swift_bridgeObjectRelease((_BYTE)ML16_MetricUtilitiesV4rmse6target10predictionJ35SayH19G_AGtFZS2d_Sdtcfu0_Tf3nnnpf_nTf1cn_nTm);
    uint64_t v8 = _swiftEmptyArrayStorage;
  }
  uint64_t v14 = v8[2];
  double v15 = 0.0;
  if (v14)
  {
    for (uint64_t i = 0; i != v14; ++i)
      double v15 = v15 + *(double *)&v8[i + 4];
  }
  swift_bridgeObjectRelease((_BYTE)v8);
  return sqrt(v15 / (double)(int)v2);
}

uint64_t static _MetricUtilities.maximumError(target:prediction:)(uint64_t a1, uint64_t a2)
{
  if (*(void *)(a1 + 16) != *(void *)(a2 + 16))
  {
    _StringGuts.grow(_:)(50);
    swift_bridgeObjectRelease(0);
    v6._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter(&type metadata for Int, &protocol witness table for Int);
    char object = (char)v6._object;
    String.append(_:)(v6);
    swift_bridgeObjectRelease(object);
    v8._char object = "Size of targets " + 0x8000000000000000;
    v8._uint64_t countAndFlagsBits = 0xD000000000000011;
    String.append(_:)(v8);
    v9._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter(&type metadata for Int, &protocol witness table for Int);
    char v10 = (char)v9._object;
    String.append(_:)(v9);
    swift_bridgeObjectRelease(v10);
    v8._uint64_t countAndFlagsBits = 0x20746F6E206F6420;
    v8._char object = (void *)0xED0000686374616DLL;
    String.append(_:)(v8);
    _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, 0xD000000000000010, "n matrix dimension" + 0x8000000000000000, "CreateML/_MetricUtilities.swift", 31, 2, 32, 0);
    BUG();
  }
  swift_bridgeObjectRetain(a2);
  swift_bridgeObjectRetain(a1);
  ML16_MetricUtilitiesV4rmse6target10predictionJ35SayH19G_AGtFZS2d_Sdtcfu0_Tf3nnnpf_nTf1cn_nTm = _sSTsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFs12Zip2SequenceVySaySdGAHG_Sds5NeverOTg5022_sS3dIegyyd_Sd_SdtSds5f68OIegnrzr_TR059_s8CreateML16_MetricUtilitiesV4rmse6target10predictionJ35SayH19G_AGtFZS2d_Sdtcfu0_Tf3nnnpf_nTf1cn_nTm(a2, a1);
  swift_bridgeObjectRelease(a1);
  swift_bridgeObjectRelease(a2);
  uint64_t v3 = _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSaySdG_Sds5NeverOTg5015_sS2dIgyd_S2ds5d16OIegnrzr_TR011_sF77Iegnr_C58Iegyd_TR40_ss3absyxxSLRzs13SignedNumericRzlFSd_TG5Tf3npf_nTf3nnnpf_nTf1cn_n((uint64_t)ML16_MetricUtilitiesV4rmse6target10predictionJ35SayH19G_AGtFZS2d_Sdtcfu0_Tf3nnnpf_nTf1cn_nTm);
  swift_bridgeObjectRelease((_BYTE)ML16_MetricUtilitiesV4rmse6target10predictionJ35SayH19G_AGtFZS2d_Sdtcfu0_Tf3nnnpf_nTf1cn_nTm);
  uint64_t v4 = specialized Sequence<>.max()((uint64_t)v3);
  swift_bridgeObjectRelease((_BYTE)v3);
  return v4;
}

uint64_t _MetricUtilities.ConfusionMatrixMeter.init(classCount:)(uint64_t a1)
{
  uint64_t v2 = v1;
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for MLShapedArray<Int32>);
  uint64_t v13 = *(void *)(v3 - 8);
  int64_t v4 = *(void *)(v13 + 64);
  int64_t v5 = alloca(v4);
  Swift::String v6 = alloca(v4);
  uint64_t v14 = &v12;
  *(void *)(v2 + 16) = a1;
  v15[0] = 0;
  uint64_t v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Int>);
  Swift::String v8 = (void *)swift_allocObject(v7, 48, 7);
  _OWORD v8[2] = 2;
  v8[3] = 4;
  _OWORD v8[4] = a1;
  v8[5] = a1;
  uint64_t v9 = lazy protocol witness table accessor for type FullyConnectedNetworkClassifier<Float, String> and conformance FullyConnectedNetworkClassifier<A, B>(&lazy protocol witness table cache variable for type MLShapedArray<Int32> and conformance MLShapedArray<A>, &demangling cache variable for type metadata for MLShapedArray<Int32>, (uint64_t)&protocol conformance descriptor for MLShapedArray<A>);
  char v10 = v14;
  MLShapedArrayProtocol.init(repeating:shape:)(v15, v8, v3, v9);
  (*(void (**)(uint64_t, uint64_t *, uint64_t))(v13 + 32))(v2 + OBJC_IVAR____TtCV8CreateML16_MetricUtilities20ConfusionMatrixMeter_confusion, v10, v3);
  return v2;
}

Swift::Void __swiftcall _MetricUtilities.ConfusionMatrixMeter.add(predictedIds:targetIds:)(Swift::OpaquePointer predictedIds, Swift::OpaquePointer targetIds)
{
  rawValue = predictedIds._rawValue;
  uint64_t v40 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for MLShapedArray<Int32>);
  uint64_t v39 = *(void *)(v40 - 8);
  int64_t v4 = *(void *)(v39 + 64);
  int64_t v5 = alloca(v4);
  Swift::String v6 = alloca(v4);
  uint64_t v32 = &v26;
  uint64_t v33 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for MLShapedArraySlice<Int32>);
  uint64_t v34 = *(void *)(v33 - 8);
  int64_t v7 = *(void *)(v34 + 64);
  Swift::String v8 = alloca(v7);
  uint64_t v9 = alloca(v7);
  double v35 = &v26;
  char v10 = alloca(v7);
  double v11 = alloca(v7);
  double v36 = &v26;
  char v43 = targetIds._rawValue;
  uint64_t v42 = *((void *)targetIds._rawValue + 2);
  if (v42)
  {
    uint64_t v37 = *((void *)predictedIds._rawValue + 2);
    if (v37)
    {
      uint64_t v12 = v43[4];
      uint64_t v13 = OBJC_IVAR____TtCV8CreateML16_MetricUtilities20ConfusionMatrixMeter_confusion + v2;
      swift_bridgeObjectRetain((_BYTE)v43);
      swift_bridgeObjectRetain(predictedIds._rawValue);
      uint64_t v14 = 0;
      uint64_t v41 = v13;
      swift_beginAccess(v13, v27, 0, 0);
      --v42;
      uint64_t v38 = predictedIds._rawValue;
      do
      {
        uint64_t v30 = v14;
        uint64_t v15 = rawValue[v14 + 4];
        uint64_t v16 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Int>);
        uint64_t v17 = (void *)swift_allocObject(v16, 48, 7);
        void v17[2] = 2;
        v17[3] = 4;
        void v17[4] = v12;
        uint64_t v31 = v17;
        v17[5] = v15;
        Swift::String v18 = (void *)swift_allocObject(v16, 48, 7);
        v18[2] = 2;
        void v18[3] = 4;
        void v18[4] = v12;
        _OWORD v18[5] = v15;
        unint64_t v19 = v32;
        uint64_t v20 = v40;
        (*(void (**)(uint64_t *, uint64_t, uint64_t))(v39 + 16))(v32, v41, v40);
        uint64_t v21 = lazy protocol witness table accessor for type FullyConnectedNetworkClassifier<Float, String> and conformance FullyConnectedNetworkClassifier<A, B>(&lazy protocol witness table cache variable for type MLShapedArray<Int32> and conformance MLShapedArray<A>, &demangling cache variable for type metadata for MLShapedArray<Int32>, (uint64_t)&protocol conformance descriptor for MLShapedArray<A>);
        char v22 = v35;
        MLShapedArrayProtocol.subscript.getter(v18, v20, v21);
        swift_bridgeObjectRelease((_BYTE)v18);
        (*(void (**)(uint64_t *, uint64_t))(v39 + 8))(v19, v20);
        uint64_t v23 = lazy protocol witness table accessor for type FullyConnectedNetworkClassifier<Float, String> and conformance FullyConnectedNetworkClassifier<A, B>(&lazy protocol witness table cache variable for type MLShapedArraySlice<Int32> and conformance MLShapedArraySlice<A>, &demangling cache variable for type metadata for MLShapedArraySlice<Int32>, (uint64_t)&protocol conformance descriptor for MLShapedArraySlice<A>);
        uint64_t v24 = v33;
        MLShapedArrayProtocol.scalar.getter(v33, v23);
        (*(void (**)(uint64_t *, uint64_t))(v34 + 8))(v22, v24);
        if (v29) {
          BUG();
        }
        if (__OFADD__(1, v28)) {
          BUG();
        }
        ++v28;
        int64_t v25 = v36;
        MLShapedArraySlice.init(scalar:)(&v28, &type metadata for Int32, &protocol witness table for Int32);
        swift_beginAccess(v41, &v28, 33, 0);
        MLShapedArrayProtocol.subscript.setter(v25, v31, v40, v21);
        swift_endAccess(&v28);
        rawValue = v38;
        if (v42 == v30) {
          break;
        }
        uint64_t v12 = v43[v30 + 5];
        uint64_t v14 = v30 + 1;
      }
      while (v37 != v30 + 1);
      swift_bridgeObjectRelease((_BYTE)v38);
      swift_bridgeObjectRelease((_BYTE)v43);
    }
  }
}

uint64_t _MetricUtilities.ConfusionMatrixMeter.valueAsMetricTable(classLabels:)(uint64_t a1)
{
  id v60 = v1;
  uint64_t v51 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for MLShapedArraySlice<Int32>);
  uint64_t v52 = *(void *)(v51 - 8);
  int64_t v4 = *(void *)(v52 + 64);
  int64_t v5 = alloca(v4);
  Swift::String v6 = alloca(v4);
  char v53 = v48;
  uint64_t v54 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for MLShapedArray<Int32>);
  uint64_t v61 = *(void *)(v54 - 8);
  int64_t v7 = *(void *)(v61 + 64);
  Swift::String v8 = alloca(v7);
  uint64_t v9 = alloca(v7);
  uint64_t v55 = v48;
  unint64_t v10 = *(void *)(a1 + 16);
  uint64_t v65 = v3;
  if (v10 != *(void *)(v3 + 16))
  {
    _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, 0xD000000000000042, "Utilities.swift" + 0x8000000000000000, "CreateML/_MetricUtilities.swift", 31, 2, 67, 0);
    BUG();
  }
  if (v10)
  {
    uint64_t v62 = v65 + OBJC_IVAR____TtCV8CreateML16_MetricUtilities20ConfusionMatrixMeter_confusion;
    uint64_t v59 = a1 + 32;
    uint64_t v58 = (uint64_t *)(a1 + 40);
    uint64_t v11 = 0;
    Float64 v74 = _swiftEmptyArrayStorage;
    uint64_t v72 = _swiftEmptyArrayStorage;
    uint64_t v73 = (char *)_swiftEmptyArrayStorage;
    unint64_t v64 = v10;
    do
    {
      if (v11 == v10) {
        BUG();
      }
      uint64_t v57 = v11 + 1;
      uint64_t v12 = *(void *)(v65 + 16);
      uint64_t v50 = v12;
      if (v12 < 0) {
        BUG();
      }
      if (v12)
      {
        swift_beginAccess(v62, v49, 0, 0);
        Float64 v56 = (uint64_t *)(v59 + 16 * v11);
        uint64_t v13 = v58;
        unint64_t v14 = 0;
        uint64_t v67 = v11;
        do
        {
          uint64_t v66 = v13;
          uint64_t v15 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Int>);
          uint64_t v16 = (void *)swift_allocObject(v15, 48, 7);
          void v16[2] = 2;
          v16[3] = 4;
          void v16[4] = v11;
          unint64_t v69 = v14;
          v16[5] = v14;
          uint64_t v17 = v55;
          uint64_t v18 = v54;
          (*(void (**)(unsigned char *, uint64_t, uint64_t))(v61 + 16))(v55, v62, v54);
          uint64_t v19 = lazy protocol witness table accessor for type FullyConnectedNetworkClassifier<Float, String> and conformance FullyConnectedNetworkClassifier<A, B>(&lazy protocol witness table cache variable for type MLShapedArray<Int32> and conformance MLShapedArray<A>, &demangling cache variable for type metadata for MLShapedArray<Int32>, (uint64_t)&protocol conformance descriptor for MLShapedArray<A>);
          uint64_t v20 = v53;
          MLShapedArrayProtocol.subscript.getter(v16, v18, v19);
          swift_bridgeObjectRelease((_BYTE)v16);
          (*(void (**)(unsigned char *, uint64_t))(v61 + 8))(v17, v18);
          uint64_t v21 = lazy protocol witness table accessor for type FullyConnectedNetworkClassifier<Float, String> and conformance FullyConnectedNetworkClassifier<A, B>(&lazy protocol witness table cache variable for type MLShapedArraySlice<Int32> and conformance MLShapedArraySlice<A>, &demangling cache variable for type metadata for MLShapedArraySlice<Int32>, (uint64_t)&protocol conformance descriptor for MLShapedArraySlice<A>);
          uint64_t v22 = v51;
          MLShapedArrayProtocol.scalar.getter(v51, v21);
          (*(void (**)(unsigned char *, uint64_t))(v52 + 8))(v20, v22);
          if (BYTE4(v70) || (int)v70 <= 0)
          {
            uint64_t v11 = v67;
            uint64_t v26 = v66;
          }
          else
          {
            uint64_t v63 = v70;
            uint64_t v23 = *v56;
            uint64_t v24 = v56[1];
            swift_bridgeObjectRetain(v24);
            char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v72);
            uint64_t v26 = v66;
            uint64_t v68 = v24;
            if (!isUniquelyReferenced_nonNull_native) {
              uint64_t v72 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v72[2] + 1, 1, (uint64_t)v72);
            }
            unint64_t v27 = v72[2];
            if (v72[3] >> 1 <= v27) {
              uint64_t v72 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(v72[3] >= 2uLL, v27 + 1, 1, (uint64_t)v72);
            }
            int v28 = v72;
            void v72[2] = v27 + 1;
            uint64_t v29 = 2 * v27;
            v28[v29 + 4] = v23;
            v28[v29 + 5] = v68;
            if (v69 >= v64) {
              BUG();
            }
            uint64_t v30 = *(v26 - 1);
            uint64_t v31 = *v26;
            swift_bridgeObjectRetain(*v26);
            char v32 = swift_isUniquelyReferenced_nonNull_native(v74);
            uint64_t v68 = v31;
            if (!v32) {
              Float64 v74 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v74[2] + 1, 1, (uint64_t)v74);
            }
            unint64_t v33 = v74[2];
            if (v74[3] >> 1 <= v33) {
              Float64 v74 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(v74[3] >= 2uLL, v33 + 1, 1, (uint64_t)v74);
            }
            uint64_t v34 = v74;
            v74[2] = v33 + 1;
            uint64_t v35 = 2 * v33;
            v34[v35 + 4] = v30;
            v34[v35 + 5] = v68;
            if (!swift_isUniquelyReferenced_nonNull_native(v73)) {
              uint64_t v73 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *((void *)v73 + 2) + 1, 1, (uint64_t)v73);
            }
            uint64_t v36 = v63;
            unint64_t v37 = *((void *)v73 + 2);
            if (*((void *)v73 + 3) >> 1 <= v37) {
              uint64_t v73 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(*((void *)v73 + 3) >= 2uLL, v37 + 1, 1, (uint64_t)v73);
            }
            uint64_t v38 = v73;
            *((void *)v73 + 2) = v37 + 1;
            *(void *)&v38[8 * v37 + 32] = v36;
            uint64_t v11 = v67;
          }
          unint64_t v14 = v69 + 1;
          uint64_t v13 = v26 + 2;
        }
        while (v50 != v69 + 1);
      }
      uint64_t v11 = v57;
      unint64_t v10 = v64;
    }
    while (v57 != v64);
  }
  else
  {
    Float64 v74 = _swiftEmptyArrayStorage;
    uint64_t v72 = _swiftEmptyArrayStorage;
    uint64_t v73 = (char *)_swiftEmptyArrayStorage;
  }
  uint64_t v39 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, MLDataValueConvertible)>);
  uint64_t inited = (void *)swift_initStackObject(v39, v48);
  inited[2] = 3;
  inited[3] = 6;
  inited[4] = 0x7373616C63;
  inited[5] = 0xE500000000000000;
  uint64_t v41 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [String]);
  inited[9] = v41;
  uint64_t v42 = lazy protocol witness table accessor for type [String] and conformance <A> [A](&lazy protocol witness table cache variable for type [String] and conformance <A> [A], &demangling cache variable for type metadata for [String]);
  inited[10] = v42;
  inited[6] = v72;
  inited[11] = 0x6574636964657270;
  inited[12] = 0xEF7373616C635F64;
  inited[16] = v41;
  inited[17] = v42;
  inited[13] = v74;
  inited[18] = 0x746E756F63;
  inited[19] = 0xE500000000000000;
  inited[23] = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [Int]);
  inited[24] = lazy protocol witness table accessor for type [String] and conformance <A> [A](&lazy protocol witness table cache variable for type [Int] and conformance <A> [A], &demangling cache variable for type metadata for [Int]);
  inited[20] = v73;
  uint64_t v43 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for MLDataValueConvertible);
  uint64_t v44 = Dictionary.init(dictionaryLiteral:)(inited, &type metadata for String, v43, &protocol witness table for String);
  uint64_t result = MLDataTable.init(dictionary:)(v44);
  if (!v2)
  {
    uint64_t result = v70;
    char v46 = v71;
    Float64 v47 = v60;
    *id v60 = v70;
    *((unsigned char *)v47 + 8) = v46;
  }
  return result;
}

uint64_t _MetricUtilities.ConfusionMatrixMeter.__deallocating_deinit()
{
  uint64_t v1 = v0 + OBJC_IVAR____TtCV8CreateML16_MetricUtilities20ConfusionMatrixMeter_confusion;
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for MLShapedArray<Int32>);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(v1, v2);
  return swift_deallocClassInstance(v0, *(unsigned int *)(*(void *)v0 + 48), *(unsigned __int16 *)(*(void *)v0 + 52));
}

uint64_t ObjC metadata update function for _MetricUtilities.ConfusionMatrixMeter()
{
  return type metadata accessor for _MetricUtilities.ConfusionMatrixMeter(0);
}

uint64_t type metadata accessor for _MetricUtilities.ConfusionMatrixMeter(uint64_t a1)
{
  uint64_t result = type metadata singleton initialization cache for _MetricUtilities.ConfusionMatrixMeter;
  if (!type metadata singleton initialization cache for _MetricUtilities.ConfusionMatrixMeter) {
    return swift_getSingletonMetadata(a1, &nominal type descriptor for _MetricUtilities.ConfusionMatrixMeter);
  }
  return result;
}

uint64_t type metadata completion function for _MetricUtilities.ConfusionMatrixMeter(uint64_t a1)
{
  v3[0] = (char *)&value witness table for Builtin.Int64 + 64;
  uint64_t result = type metadata accessor for MLShapedArray<Int32>(319);
  if (v2 <= 0x3F)
  {
    v3[1] = *(void *)(result - 8) + 64;
    uint64_t result = swift_updateClassMetadata2(a1, 256, 2, v3, a1 + 80);
    if (!result) {
      return 0;
    }
  }
  return result;
}

uint64_t type metadata accessor for MLShapedArray<Int32>(uint64_t a1)
{
  uint64_t result = lazy cache variable for type metadata for MLShapedArray<Int32>;
  if (!lazy cache variable for type metadata for MLShapedArray<Int32>)
  {
    uint64_t result = type metadata accessor for MLShapedArray(a1, &type metadata for Int32, &protocol witness table for Int32);
    if (!v2) {
      lazy cache variable for type metadata for MLShapedArray<Int32> = result;
    }
  }
  return result;
}

uint64_t static _MetricUtilities.supplementConfusionMatrixWithMissingClasses(_:classes:)(uint64_t a1, uint64_t a2, double a3)
{
  uint64_t v39 = a2;
  uint64_t v40 = v3;
  unsigned int v5 = *(_DWORD *)(a1 + 8);
  uint64_t v44 = *(void *)a1;
  uint64_t v4 = v44;
  LOBYTE(v43) = v5 & 1;
  char v45 = v5 & 1;
  outlined copy of Result<_DataTable, Error>(v44, v5);
  v6._uint64_t countAndFlagsBits = 0x7373616C63;
  v6._char object = (void *)0xE500000000000000;
  MLDataTable.subscript.getter(v6);
  LODWORD(v49) = v5;
  outlined consume of Result<_DataTable, Error>(v44, v5);
  uint64_t v36 = v47;
  char v37 = v48;
  MLUntypedColumn.dropDuplicates()(v44, v5);
  outlined consume of Result<_DataTable, Error>(v47, v48);
  if ((v5 & 1) != 0
    || (outlined copy of Result<_DataTable, Error>(v44, 0),
        _UntypedColumn.type.getter(),
        outlined consume of Result<_DataTable, Error>(v44, 0),
        (_BYTE)v47 != 2))
  {
    outlined consume of Result<_DataTable, Error>(v44, v45);
    BUG();
  }
  int64_t v7 = specialized Array<A>.init(_:)(v44, 0, a3);
  unint64_t v8 = *(void *)(v39 + 16);
  unint64_t v46 = v7[2];
  if (v46 < v8)
  {
    uint64_t v41 = 0;
    char v45 = v43;
    uint64_t v43 = v39 + 32;
    char v9 = v49;
    unint64_t v49 = v8;
    outlined copy of Result<_DataTable, Error>(v44, v9);
    swift_bridgeObjectRetain(v39);
    unint64_t v10 = v49;
    uint64_t v38 = v7 + 9;
    uint64_t v11 = 0;
    uint64_t v42 = v7;
    unint64_t v12 = v46;
    while (1)
    {
      if (v11 == v10) {
        BUG();
      }
      uint64_t v13 = *(void *)(v43 + 16 * v11);
      uint64_t v14 = *(void *)(v43 + 16 * v11 + 8);
      if (!v12) {
        goto LABEL_11;
      }
      uint64_t v15 = v7[4];
      uint64_t v16 = v7[5];
      if (v15 == v13 && v16 == v14) {
        goto LABEL_15;
      }
      if ((_stringCompareWithSmolCheck(_:_:expecting:)(v15, v16, *(void *)(v43 + 16 * v11), *(void *)(v43 + 16 * v11 + 8), 0) & 1) == 0)break; {
LABEL_14:
      }
      unint64_t v10 = v49;
LABEL_15:
      if (++v11 == v10)
      {
        swift_bridgeObjectRelease((_BYTE)v7);
        swift_bridgeObjectRelease(v39);
        uint64_t result = v44;
        char v33 = v45;
        uint64_t v34 = v40;
        *uint64_t v40 = v44;
        *((unsigned char *)v34 + 8) = v33;
        return result;
      }
    }
    if (v12 == 1) {
      goto LABEL_11;
    }
    uint64_t v24 = v7[6];
    uint64_t v25 = v7[7];
    if (v24 == v13 && v25 == v14 || (_stringCompareWithSmolCheck(_:_:expecting:)(v24, v25, v13, v14, 0) & 1) != 0) {
      goto LABEL_14;
    }
    if (v12 == 2)
    {
LABEL_11:
      uint64_t v17 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, MLDataValueConvertible)>);
      uint64_t inited = (void *)swift_initStackObject(v17, v35);
      inited[2] = 3;
      inited[3] = 6;
      inited[4] = 0x7373616C63;
      inited[5] = 0xE500000000000000;
      inited[9] = &type metadata for String;
      inited[10] = &protocol witness table for String;
      inited[6] = v13;
      inited[7] = v14;
      inited[11] = 0x6574636964657270;
      inited[12] = 0xEF7373616C635F64;
      inited[16] = &type metadata for String;
      inited[17] = &protocol witness table for String;
      inited[13] = v13;
      inited[14] = v14;
      inited[18] = 0x746E756F63;
      inited[19] = 0xE500000000000000;
      inited[23] = &type metadata for Int;
      inited[24] = &protocol witness table for Int;
      inited[20] = 0;
      swift_bridgeObjectRetain_n(v14, 2);
      uint64_t v19 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for MLDataValueConvertible);
      uint64_t v20 = Dictionary.init(dictionaryLiteral:)(inited, &type metadata for String, v19, &protocol witness table for String);
      uint64_t v21 = v41;
      MLDataTable.init(dictionary:)(v20);
      uint64_t v41 = v21;
      if (v21)
      {
        swift_errorRelease(v41);
        _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, 0xD00000000000003BLL, " and predictions " + 0x8000000000000000, "CreateML/_MetricUtilities.swift", 31, 2, 95, 0);
        BUG();
      }
      uint64_t v22 = v47;
      char v23 = v48;
      MLDataTable.append(contentsOf:)((uint64_t)&v47);
      outlined consume of Result<_DataTable, Error>(v22, v23);
    }
    else
    {
      uint64_t v26 = v38;
      uint64_t v27 = 2;
      while (1)
      {
        if (__OFADD__(1, v27++)) {
          BUG();
        }
        uint64_t v29 = *(v26 - 1);
        uint64_t v30 = *v26;
        if (v29 == v13 && v30 == v14) {
          break;
        }
        if (_stringCompareWithSmolCheck(_:_:expecting:)(v29, v30, v13, v14, 0)) {
          break;
        }
        v26 += 2;
        if (v27 == v46) {
          goto LABEL_11;
        }
      }
    }
    int64_t v7 = v42;
    unint64_t v12 = v46;
    goto LABEL_14;
  }
  swift_bridgeObjectRelease((_BYTE)v7);
  uint64_t v31 = v40;
  *uint64_t v40 = v44;
  *((unsigned char *)v31 + 8) = v43;
  return outlined copy of Result<_DataTable, Error>(v4, v49);
}

uint64_t static _MetricUtilities.supplementPrecisionRecallWithMissingClasses(_:classes:)(uint64_t a1, uint64_t a2, double a3)
{
  uint64_t v39 = a2;
  uint64_t v40 = v3;
  int v5 = *(_DWORD *)(a1 + 8);
  uint64_t v45 = *(void *)a1;
  uint64_t v4 = v45;
  char v46 = v5 & 1;
  outlined copy of Result<_DataTable, Error>(v45, v5);
  v6._uint64_t countAndFlagsBits = 0x7373616C63;
  v6._char object = (void *)0xE500000000000000;
  MLDataTable.subscript.getter(v6);
  LODWORD(v48) = v5;
  outlined consume of Result<_DataTable, Error>(v45, v5);
  if (v43
    || (outlined copy of Result<_DataTable, Error>(v42, 0),
        _UntypedColumn.type.getter(),
        outlined consume of Result<_DataTable, Error>(v42, 0),
        (_BYTE)v45 != 2))
  {
    outlined consume of Result<_DataTable, Error>(v42, v43);
    BUG();
  }
  int64_t v7 = specialized Array<A>.init(_:)(v42, 0, a3);
  unint64_t v8 = v7[2];
  unint64_t v9 = *(void *)(v39 + 16);
  if (v8 < v9)
  {
    uint64_t v42 = v45;
    char v43 = v5 & 1;
    uint64_t v34 = v39 + 32;
    unint64_t v47 = v9;
    outlined copy of Result<_DataTable, Error>(v45, v48);
    swift_bridgeObjectRetain(v39);
    unint64_t v10 = v47;
    uint64_t v38 = v7 + 9;
    uint64_t v11 = 0;
    uint64_t v35 = " to the computed confusion." + 0x8000000000000000;
    uint64_t v36 = "missed_predicting_this" + 0x8000000000000000;
    char v37 = "predicted_correctly" + 0x8000000000000000;
    uint64_t v41 = v7;
    unint64_t v44 = v8;
    while (1)
    {
      if (v11 == v10) {
        BUG();
      }
      uint64_t v12 = *(void *)(v34 + 16 * v11);
      uint64_t v13 = *(void *)(v34 + 16 * v11 + 8);
      if (!v8) {
        break;
      }
      uint64_t v14 = v7[4];
      uint64_t v15 = v7[5];
      if (v14 == v12 && v15 == v13) {
        goto LABEL_26;
      }
      uint64_t v48 = v11;
      if ((_stringCompareWithSmolCheck(_:_:expecting:)(v14, v15, v12, v13, 0) & 1) == 0)
      {
        if (v8 != 1)
        {
          uint64_t v16 = v7[6];
          uint64_t v17 = v7[7];
          if (v16 == v12 && v17 == v13
            || (_stringCompareWithSmolCheck(_:_:expecting:)(v16, v17, v12, v13, 0) & 1) != 0)
          {
            goto LABEL_25;
          }
          if (v8 != 2)
          {
            uint64_t v18 = v38;
            uint64_t v19 = 2;
            do
            {
              if (__OFADD__(1, v19++)) {
                BUG();
              }
              uint64_t v21 = *(v18 - 1);
              uint64_t v22 = *v18;
              if (v21 == v12 && v22 == v13) {
                goto LABEL_24;
              }
              if (_stringCompareWithSmolCheck(_:_:expecting:)(v21, v22, v12, v13, 0)) {
                goto LABEL_24;
              }
              v18 += 2;
            }
            while (v19 != v44);
          }
        }
LABEL_23:
        uint64_t v23 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, MLDataValueConvertible)>);
        uint64_t inited = swift_initStackObject(v23, v33);
        *(void *)(inited + 16) = 7;
        *(void *)(inited + 24) = 14;
        strcpy((char *)(inited + 32), "actual_count");
        *(unsigned char *)(inited + 45) = 0;
        *(_WORD *)(inited + 46) = -5120;
        *(void *)(inited + 72) = &type metadata for Int;
        *(void *)(inited + 80) = &protocol witness table for Int;
        *(void *)(inited + 48) = 0;
        *(void *)(inited + 88) = 0x7373616C63;
        *(void *)(inited + 96) = 0xE500000000000000;
        *(void *)(inited + 128) = &type metadata for String;
        *(void *)(inited + 136) = &protocol witness table for String;
        *(void *)(inited + 104) = v12;
        *(void *)(inited + 112) = v13;
        *(void *)(inited + 144) = 0xD000000000000016;
        *(void *)(inited + 152) = v35;
        *(void *)(inited + 184) = &type metadata for Int;
        *(void *)(inited + 192) = &protocol witness table for Int;
        *(void *)(inited + 160) = 0;
        *(void *)(inited + 200) = 0x6F69736963657270;
        *(void *)(inited + 208) = 0xE90000000000006ELL;
        *(void *)(inited + 240) = &type metadata for Double;
        *(void *)(inited + 248) = &protocol witness table for Double;
        *(void *)(inited + 216) = 0;
        *(void *)(inited + 256) = 0x6C6C61636572;
        *(void *)(inited + 264) = 0xE600000000000000;
        *(void *)(inited + 296) = &type metadata for Double;
        *(void *)(inited + 304) = &protocol witness table for Double;
        *(void *)(inited + 272) = 0x7FF8000000000000;
        *(void *)(inited + 312) = 0xD000000000000013;
        *(void *)(inited + 320) = v36;
        *(void *)(inited + 352) = &type metadata for Int;
        *(void *)(inited + 360) = &protocol witness table for Int;
        *(void *)(inited + 328) = 0;
        *(void *)(inited + 368) = 0xD00000000000001ALL;
        *(void *)(inited + 376) = v37;
        *(void *)(inited + 408) = &type metadata for Int;
        *(void *)(inited + 416) = &protocol witness table for Int;
        *(void *)(inited + 384) = 0;
        swift_bridgeObjectRetain(v13);
        uint64_t v25 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for MLDataValueConvertible);
        uint64_t v26 = Dictionary.init(dictionaryLiteral:)(inited, &type metadata for String, v25, &protocol witness table for String);
        MLDataTable.init(dictionary:)(v26);
        uint64_t v27 = v45;
        char v28 = v46;
        MLDataTable.append(contentsOf:)((uint64_t)&v45);
        outlined consume of Result<_DataTable, Error>(v27, v28);
LABEL_24:
        int64_t v7 = v41;
        unint64_t v8 = v44;
      }
LABEL_25:
      unint64_t v10 = v47;
      uint64_t v11 = v48;
LABEL_26:
      if (++v11 == v10)
      {
        swift_bridgeObjectRelease((_BYTE)v7);
        swift_bridgeObjectRelease(v39);
        uint64_t result = v42;
        char v30 = v43;
        uint64_t v31 = v40;
        *uint64_t v40 = v42;
        *((unsigned char *)v31 + 8) = v30;
        return result;
      }
    }
    uint64_t v48 = v11;
    goto LABEL_23;
  }
  swift_bridgeObjectRelease((_BYTE)v7);
  char v32 = v40;
  *uint64_t v40 = v45;
  *((unsigned char *)v32 + 8) = v5 & 1;
  return outlined copy of Result<_DataTable, Error>(v4, v48);
}

uint64_t _MetricUtilities.ConfusionMatrixMeter.value(normalized:)(int a1, double a2, double a3)
{
  int v78 = a1;
  uint64_t v76 = v3;
  uint64_t v63 = type metadata accessor for FloatingPointRoundingRule(0);
  uint64_t v64 = *(void *)(v63 - 8);
  int64_t v5 = *(void *)(v64 + 64);
  Swift::String v6 = alloca(v5);
  int64_t v7 = alloca(v5);
  uint64_t v65 = v62;
  uint64_t v73 = type metadata accessor for ScalarType(0);
  uint64_t v72 = *(void *)(v73 - 8);
  int64_t v8 = *(void *)(v72 + 64);
  unint64_t v9 = alloca(v8);
  unint64_t v10 = alloca(v8);
  Float64 v74 = v62;
  int64_t v11 = *(void *)(*(void *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ComputeDevice?)
                              - 8)
                  + 64);
  uint64_t v12 = alloca(v11);
  uint64_t v13 = alloca(v11);
  uint64_t v67 = v62;
  uint64_t v79 = type metadata accessor for Tensor(0);
  uint64_t v66 = *(void *)(v79 - 8);
  int64_t v14 = *(void *)(v66 + 64);
  uint64_t v15 = alloca(v14);
  uint64_t v16 = alloca(v14);
  uint64_t v68 = v62;
  uint64_t v17 = alloca(v14);
  uint64_t v18 = alloca(v14);
  uint64_t v70 = v62;
  uint64_t v19 = alloca(v14);
  uint64_t v20 = alloca(v14);
  unint64_t v69 = v62;
  uint64_t v21 = alloca(v14);
  uint64_t v22 = alloca(v14);
  char v71 = v62;
  uint64_t v23 = alloca(v14);
  uint64_t v24 = alloca(v14);
  Float64 v75 = v62;
  uint64_t v25 = alloca(v14);
  uint64_t v26 = alloca(v14);
  uint64_t v80 = v62;
  uint64_t v27 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for MLShapedArray<Int32>);
  uint64_t v28 = *(void *)(v27 - 8);
  int64_t v29 = *(void *)(v28 + 64);
  char v30 = alloca(v29);
  uint64_t v31 = alloca(v29);
  type metadata accessor for MLMultiArray();
  uint64_t v32 = OBJC_IVAR____TtCV8CreateML16_MetricUtilities20ConfusionMatrixMeter_confusion + v4;
  swift_beginAccess(OBJC_IVAR____TtCV8CreateML16_MetricUtilities20ConfusionMatrixMeter_confusion + v4, v62, 0, 0);
  (*(void (**)(unsigned char *, uint64_t, uint64_t))(v28 + 16))(v62, v32, v27);
  uint64_t v33 = lazy protocol witness table accessor for type FullyConnectedNetworkClassifier<Float, String> and conformance FullyConnectedNetworkClassifier<A, B>(&lazy protocol witness table cache variable for type MLShapedArray<Int32> and conformance MLShapedArray<A>, &demangling cache variable for type metadata for MLShapedArray<Int32>, (uint64_t)&protocol conformance descriptor for MLShapedArray<A>);
  uint64_t v34 = MLMultiArray.init<A>(_:)(v62, v27, v33);
  uint64_t v35 = type metadata accessor for ComputeDevice(0);
  uint64_t v36 = v67;
  __swift_storeEnumTagSinglePayload((uint64_t)v67, 1, 1, v35);
  char v37 = (void *)v34;
  uint64_t v38 = v75;
  id v77 = v37;
  Tensor.init(_:device:)(v77, v36, a2, a3);
  uint64_t v39 = v74;
  (*(void (**)(unsigned char *, void, uint64_t))(v72 + 104))(v74, enum case for ScalarType.float32(_:), v73);
  uint64_t v40 = v65;
  uint64_t v41 = v63;
  uint64_t v42 = v64;
  (*(void (**)(unsigned char *, void, uint64_t))(v64 + 104))(v65, enum case for FloatingPointRoundingRule.towardZero(_:), v63);
  Tensor.cast(to:roundingRule:)(v39, v40);
  (*(void (**)(unsigned char *, uint64_t))(v42 + 8))(v40, v41);
  char v43 = v38;
  uint64_t v44 = v66;
  (*(void (**)(unsigned char *, uint64_t))(v72 + 8))(v74, v73);
  uint64_t v45 = *(void (**)(unsigned char *, uint64_t))(v44 + 8);
  v45(v43, v79);
  if (v78)
  {
    uint64_t v46 = Tensor.rank.getter();
    if (v46 < 0) {
      BUG();
    }
    unint64_t v47 = specialized Sequence.reversed()(0, v46);
    char v48 = (char)v47;
    unint64_t v49 = v71;
    Tensor.transposed(permutation:)(v47);
    swift_bridgeObjectRelease(v48);
    uint64_t v50 = v70;
    Tensor.sum(squeezingAxes:)(&outlined read-only object #0 of _MetricUtilities.ConfusionMatrixMeter.value(normalized:));
    uint64_t v51 = v68;
    Tensor.init(floatLiteral:)(1.0e-12);
    uint64_t v52 = v69;
    static Tensor.+ infix(_:_:)(v50, v51);
    char v53 = v51;
    uint64_t v54 = v79;
    v45(v53, v79);
    v45(v50, v54);
    uint64_t v55 = v75;
    static Tensor./ infix(_:_:)(v49, v52);
    v45(v52, v54);
    Float64 v56 = v55;
    v45(v49, v54);
    uint64_t v57 = Tensor.rank.getter();
    if (v57 < 0) {
      BUG();
    }
    uint64_t v58 = specialized Sequence.reversed()(0, v57);
    char v59 = (char)v58;
    Tensor.transposed(permutation:)(v58);

    swift_bridgeObjectRelease(v59);
    uint64_t v60 = v79;
    v45(v56, v79);
    return ((uint64_t (*)(unsigned char *, uint64_t))v45)(v80, v60);
  }
  else
  {

    return (*(uint64_t (**)(uint64_t, unsigned char *, uint64_t))(v44 + 32))(v76, v80, v79);
  }
}

double static _MetricUtilities.top1Accuracy(confusionMatrix:classCount:)(uint64_t a1, uint64_t a2)
{
  double v26 = *(double *)&a1;
  int64_t v3 = *(void *)(*(void *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ComputeDevice?)
                             - 8)
                 + 64);
  uint64_t v4 = alloca(v3);
  int64_t v5 = alloca(v3);
  uint64_t v6 = type metadata accessor for Tensor(0);
  uint64_t v7 = *(void *)(v6 - 8);
  int64_t v8 = *(void *)(v7 + 64);
  unint64_t v9 = alloca(v8);
  unint64_t v10 = alloca(v8);
  int64_t v11 = alloca(v8);
  uint64_t v12 = alloca(v8);
  uint64_t v13 = alloca(v8);
  int64_t v14 = alloca(v8);
  if (a2 < 0) {
    BUG();
  }
  v24[0] = 0;
  v24[1] = a2;
  uint64_t v22 = v6;
  uint64_t v23 = a2;
  uint64_t v21 = (uint64_t *)&v21;
  uint64_t v25 = v7;
  uint64_t v15 = type metadata accessor for ComputeDevice(0);
  __swift_storeEnumTagSinglePayload((uint64_t)&v21, 1, 1, v15);
  uint64_t v16 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Range<Int>);
  uint64_t v17 = lazy protocol witness table accessor for type Range<Int> and conformance <> Range<A>();
  Tensor.init<A>(oneHotAtIndices:depth:onValue:offValue:on:)(v24, v23, &v21, v16, v17, 1.0, 0.0);
  static Tensor.* infix(_:_:)(*(void *)&v26, &v21);
  Tensor.sum()();
  uint64_t v18 = *(void (**)(uint64_t *, uint64_t))(v25 + 8);
  uint64_t v19 = v22;
  v18((uint64_t *)&v21, v22);
  Tensor.scalar<A>(as:)(&type metadata for Float, &type metadata for Float, &protocol witness table for Float);
  v18((uint64_t *)&v21, v19);
  LODWORD(v25) = v24[0];
  Tensor.sum()();
  Tensor.scalar<A>(as:)(&type metadata for Float, &type metadata for Float, &protocol witness table for Float);
  v18((uint64_t *)&v21, v19);
  double v26 = (float)(*(float *)&v25 / (float)(*(float *)v24 + 1.0e-12));
  v18(v21, v19);
  return v26;
}

uint64_t type metadata accessor for MLMultiArray()
{
  uint64_t result = lazy cache variable for type metadata for MLMultiArray;
  if (!lazy cache variable for type metadata for MLMultiArray)
  {
    uint64_t v1 = objc_opt_self(MLMultiArray);
    uint64_t result = swift_getObjCClassMetadata(v1);
    lazy cache variable for type metadata for MLMultiArray = result;
  }
  return result;
}

uint64_t static _MetricUtilities.precisionRecall(confusionMatrix:classLabels:)(uint64_t a1, uint64_t a2)
{
  uint64_t v109 = a1;
  Float64 v95 = v2;
  uint64_t v4 = type metadata accessor for Tensor(0);
  uint64_t v93 = *(void *)(v4 - 8);
  int64_t v5 = *(void *)(v93 + 64);
  uint64_t v6 = alloca(v5);
  uint64_t v7 = alloca(v5);
  uint64_t v97 = &v88;
  int64_t v8 = alloca(v5);
  unint64_t v9 = alloca(v5);
  uint64_t v100 = &v88;
  unint64_t v10 = alloca(v5);
  int64_t v11 = alloca(v5);
  os_log_type_t v103 = &v88;
  uint64_t v12 = alloca(v5);
  uint64_t v13 = alloca(v5);
  uint64_t v104 = &v88;
  int64_t v14 = alloca(v5);
  uint64_t v15 = alloca(v5);
  CMTimeValue v98 = &v88;
  uint64_t v16 = alloca(v5);
  uint64_t v17 = alloca(v5);
  os_log_t v105 = &v88;
  uint64_t v18 = alloca(v5);
  uint64_t v19 = alloca(v5);
  uint64_t v99 = &v88;
  uint64_t v20 = alloca(v5);
  uint64_t v21 = alloca(v5);
  uint64_t v94 = *(void *)(a2 + 16);
  if (v94)
  {
    uint64_t v112 = v4;
    os_log_t v101 = &v88;
    swift_bridgeObjectRetain(a2);
    uint64_t v96 = a2;
    uint64_t v22 = (void *)(a2 + 40);
    uint64_t v23 = (char *)_swiftEmptyArrayStorage;
    uint64_t v24 = 0;
    Float64 v107 = _swiftEmptyArrayStorage;
    Float64 v106 = _swiftEmptyArrayStorage;
    uint64_t v102 = _swiftEmptyArrayStorage;
    do
    {
      uint64_t v110 = v23;
      uint64_t v90 = *(v22 - 1);
      unint64_t v92 = v22;
      uint64_t v25 = *v22;
      uint64_t v26 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<TensorRangeExpression?>);
      uint64_t v111 = v24;
      uint64_t v27 = (void *)swift_allocObject(v26, 72, 7);
      v27[2] = 1;
      v27[3] = 2;
      v27[7] = &type metadata for Int;
      v27[8] = &protocol witness table for Int;
      v27[4] = v24;
      uint64_t v91 = v25;
      swift_bridgeObjectRetain(v25);
      uint64_t v28 = v99;
      Tensor.subscript.getter(v27);
      swift_bridgeObjectRelease((_BYTE)v27);
      int64_t v29 = (void *)swift_allocObject(v26, 72, 7);
      LOBYTE(v27) = (_BYTE)v29;
      void v29[2] = 1;
      v29[3] = 2;
      v29[7] = &type metadata for Int;
      v29[8] = &protocol witness table for Int;
      v29[4] = v111;
      Tensor.subscript.getter(v29);
      swift_bridgeObjectRelease((_BYTE)v27);
      os_log_type_t v108 = *(void (**)(uint64_t *, uint64_t))(v93 + 8);
      char v30 = v28;
      uint64_t v31 = v112;
      v108(v30, v112);
      Tensor.sum(alongAxes:)(&outlined read-only object #0 of static _MetricUtilities.precisionRecall(confusionMatrix:classLabels:));
      uint64_t v115 = v26;
      uint64_t v32 = (void *)swift_allocObject(v26, 72, 7);
      LOBYTE(v27) = (_BYTE)v32;
      v32[2] = 1;
      v32[3] = 2;
      v32[7] = &type metadata for Int;
      v32[8] = &protocol witness table for Int;
      v32[4] = 0;
      uint64_t v33 = v98;
      Tensor.subscript.getter(v32);
      swift_bridgeObjectRelease((_BYTE)v27);
      v108(v33, v31);
      uint64_t v34 = (void *)swift_allocObject(v26, 72, 7);
      LOBYTE(v27) = (_BYTE)v34;
      void v34[2] = 1;
      v34[3] = 2;
      v34[7] = &type metadata for Int;
      v34[8] = &protocol witness table for Int;
      void v34[4] = v111;
      uint64_t v35 = v104;
      Tensor.subscript.getter(v34);
      swift_bridgeObjectRelease((_BYTE)v27);
      uint64_t v36 = v31;
      uint64_t v37 = v31;
      uint64_t v38 = v108;
      v108(v35, v37);
      uint64_t v39 = v105;
      uint64_t v40 = v103;
      static Tensor./ infix(_:_:)(v105, v103);
      v38(v40, v36);
      v38(v39, v36);
      uint64_t v41 = (void *)swift_allocObject(v115, 72, 7);
      LOBYTE(v36) = (_BYTE)v41;
      v41[2] = 1;
      v41[3] = 2;
      v41[7] = &type metadata for Int;
      v41[8] = &protocol witness table for Int;
      uint64_t v42 = v111;
      v41[4] = v111;
      char v43 = v99;
      Tensor.subscript.getter(v41);
      swift_bridgeObjectRelease(v36);
      uint64_t v44 = (void *)swift_allocObject(v115, 72, 7);
      LOBYTE(v36) = (_BYTE)v44;
      v44[2] = 1;
      v44[3] = 2;
      v44[7] = &type metadata for Int;
      v44[8] = &protocol witness table for Int;
      v44[4] = v42;
      Tensor.subscript.getter(v44);
      swift_bridgeObjectRelease(v36);
      v108(v43, v112);
      uint64_t v45 = v98;
      Tensor.sum(alongAxes:)(&outlined read-only object #1 of static _MetricUtilities.precisionRecall(confusionMatrix:classLabels:));
      uint64_t v46 = v115;
      unint64_t v47 = (void *)swift_allocObject(v115, 72, 7);
      LOBYTE(v36) = (_BYTE)v47;
      void v47[2] = 1;
      v47[3] = 2;
      v47[7] = &type metadata for Int;
      v47[8] = &protocol witness table for Int;
      v47[4] = v111;
      Tensor.subscript.getter(v47);
      swift_bridgeObjectRelease(v36);
      char v48 = v45;
      unint64_t v49 = v108;
      v108(v48, v112);
      uint64_t v50 = (void *)swift_allocObject(v46, 72, 7);
      LOBYTE(v36) = (_BYTE)v50;
      v50[2] = 1;
      v50[3] = 2;
      v50[7] = &type metadata for Int;
      v50[8] = &protocol witness table for Int;
      Swift::Double v50[4] = 0;
      uint64_t v51 = v104;
      Tensor.subscript.getter(v50);
      swift_bridgeObjectRelease(v36);
      uint64_t v52 = v112;
      v49(v51, v112);
      char v53 = v105;
      uint64_t v54 = v103;
      static Tensor./ infix(_:_:)(v105, v103);
      v49(v54, v52);
      v49(v53, v52);
      uint64_t v55 = (void *)swift_allocObject(v115, 72, 7);
      _OWORD v55[2] = 1;
      v55[3] = 2;
      v55[7] = &type metadata for Int;
      v55[8] = &protocol witness table for Int;
      v55[4] = v111;
      Float64 v56 = v99;
      Tensor.subscript.getter(v55);
      swift_bridgeObjectRelease((_BYTE)v55);
      Tensor.sum()();
      v49(v56, v112);
      uint64_t v57 = v102;
      if (!swift_isUniquelyReferenced_nonNull_native(v102)) {
        uint64_t v57 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v57[2] + 1, 1, (uint64_t)v57);
      }
      unint64_t v58 = v57[2];
      char v59 = v97;
      if (v57[3] >> 1 <= v58) {
        uint64_t v57 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(v57[3] >= 2uLL, v58 + 1, 1, (uint64_t)v57);
      }
      v57[2] = v58 + 1;
      uint64_t v60 = 2 * v58;
      v57[v60 + 4] = v90;
      uint64_t v102 = v57;
      v57[v60 + 5] = v91;
      Tensor.scalar<A>(as:)(&type metadata for Float, &type metadata for Float, &protocol witness table for Float);
      LODWORD(v115) = v113;
      uint64_t v61 = v107;
      if (!swift_isUniquelyReferenced_nonNull_native(v107)) {
        uint64_t v61 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v61[2] + 1, 1, (uint64_t)v61);
      }
      unint64_t v62 = v61[2];
      if (v61[3] >> 1 <= v62) {
        uint64_t v61 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(v61[3] >= 2uLL, v62 + 1, 1, (uint64_t)v61);
      }
      double v63 = *(float *)&v115;
      v61[2] = v62 + 1;
      Float64 v107 = v61;
      *(double *)&v61[v62 + 4] = v63;
      Tensor.scalar<A>(as:)(&type metadata for Float, &type metadata for Float, &protocol witness table for Float);
      LODWORD(v115) = v113;
      uint64_t v64 = v106;
      if (!swift_isUniquelyReferenced_nonNull_native(v106)) {
        uint64_t v64 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v64[2] + 1, 1, (uint64_t)v64);
      }
      unint64_t v65 = v64[2];
      if (v64[3] >> 1 <= v65) {
        uint64_t v64 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(v64[3] >= 2uLL, v65 + 1, 1, (uint64_t)v64);
      }
      double v66 = *(float *)&v115;
      v64[2] = v65 + 1;
      Float64 v106 = v64;
      *(double *)&v64[v65 + 4] = v66;
      Tensor.scalar<A>(as:)(&type metadata for Float, &type metadata for Float, &protocol witness table for Float);
      __m128i v67 = _mm_cvtsi32_si128(v113);
      if ((~_mm_cvtsi128_si32(v67) & 0x7F800000) == 0) {
        BUG();
      }
      if (*(float *)v67.i32 <= -9.2233731e18) {
        BUG();
      }
      if (*(float *)v67.i32 >= 9.223372e18) {
        BUG();
      }
      LODWORD(v115) = v67.i32[0];
      uint64_t v68 = v110;
      if (!swift_isUniquelyReferenced_nonNull_native(v110)) {
        uint64_t v68 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *((void *)v68 + 2) + 1, 1, (uint64_t)v68);
      }
      unint64_t v69 = *((void *)v68 + 2);
      float v70 = *(float *)&v115;
      if (*((void *)v68 + 3) >> 1 <= v69)
      {
        id v77 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(*((void *)v68 + 3) >= 2uLL, v69 + 1, 1, (uint64_t)v68);
        float v70 = *(float *)&v115;
        uint64_t v68 = v77;
      }
      uint64_t v110 = v68;
      uint64_t v71 = v111 + 1;
      *((void *)v68 + 2) = v69 + 1;
      uint64_t v72 = v71;
      *(void *)&v68[8 * v69 + 32] = (int)v70;
      uint64_t v73 = v59;
      uint64_t v74 = v112;
      Float64 v75 = v108;
      v108(v73, v112);
      v75(v100, v74);
      uint64_t v76 = v74;
      uint64_t v23 = v110;
      v75(v101, v76);
      uint64_t v22 = v92 + 2;
      uint64_t v24 = v72;
    }
    while (v94 != v72);
    swift_bridgeObjectRelease(v96);
    int v78 = v102;
  }
  else
  {
    int v78 = _swiftEmptyArrayStorage;
    Float64 v107 = _swiftEmptyArrayStorage;
    Float64 v106 = _swiftEmptyArrayStorage;
    uint64_t v110 = (char *)_swiftEmptyArrayStorage;
  }
  uint64_t v79 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, MLDataValueConvertible)>);
  uint64_t inited = swift_initStackObject(v79, v89);
  *(void *)(inited + 16) = 4;
  *(void *)(inited + 24) = 8;
  *(void *)(inited + 32) = 0x7373616C63;
  *(void *)(inited + 40) = 0xE500000000000000;
  *(void *)(inited + 72) = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [String]);
  *(void *)(inited + 80) = lazy protocol witness table accessor for type [String] and conformance <A> [A](&lazy protocol witness table cache variable for type [String] and conformance <A> [A], &demangling cache variable for type metadata for [String]);
  *(void *)(inited + 48) = v78;
  *(void *)(inited + 88) = 0x6F69736963657270;
  *(void *)(inited + 96) = 0xE90000000000006ELL;
  uint64_t v81 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [Double]);
  *(void *)(inited + 128) = v81;
  uint64_t v82 = lazy protocol witness table accessor for type [String] and conformance <A> [A](&lazy protocol witness table cache variable for type [Double] and conformance <A> [A], &demangling cache variable for type metadata for [Double]);
  *(void *)(inited + 136) = v82;
  *(void *)(inited + 104) = v107;
  *(void *)(inited + 144) = 0x6C6C61636572;
  *(void *)(inited + 152) = 0xE600000000000000;
  *(void *)(inited + 184) = v81;
  *(void *)(inited + 192) = v82;
  *(void *)(inited + 160) = v106;
  strcpy((char *)(inited + 200), "actual_count");
  *(unsigned char *)(inited + 213) = 0;
  *(_WORD *)(inited + 214) = -5120;
  *(void *)(inited + 240) = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [Int]);
  *(void *)(inited + 248) = lazy protocol witness table accessor for type [String] and conformance <A> [A](&lazy protocol witness table cache variable for type [Int] and conformance <A> [A], &demangling cache variable for type metadata for [Int]);
  *(void *)(inited + 216) = v110;
  uint64_t v83 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for MLDataValueConvertible);
  uint64_t v84 = Dictionary.init(dictionaryLiteral:)(inited, &type metadata for String, v83, &protocol witness table for String);
  uint64_t result = MLDataTable.init(dictionary:)(v84);
  if (!v3)
  {
    uint64_t result = v113;
    char v86 = v114;
    uint64_t v87 = v95;
    uint64_t *v95 = v113;
    *((unsigned char *)v87 + 8) = v86;
  }
  return result;
}

uint64_t _MetricUtilities.ConfusionMatrixMeter.add(predicted:target:weights:)(void (*a1)(uint64_t *, uint64_t), uint64_t a2, uint64_t a3)
{
  uint64_t v58 = v3;
  uint64_t v63 = a3;
  uint64_t v66 = a2;
  unint64_t v69 = (void (*)(uint64_t *, uint64_t))a1;
  uint64_t v67 = type metadata accessor for FloatingPointRoundingRule(0);
  uint64_t v64 = *(void *)(v67 - 8);
  int64_t v4 = *(void *)(v64 + 64);
  int64_t v5 = alloca(v4);
  uint64_t v6 = alloca(v4);
  char v53 = &v52;
  uint64_t v68 = type metadata accessor for ScalarType(0);
  uint64_t v65 = *(void *)(v68 - 8);
  int64_t v7 = *(void *)(v65 + 64);
  int64_t v8 = alloca(v7);
  unint64_t v9 = alloca(v7);
  uint64_t v54 = &v52;
  int64_t v10 = *(void *)(*(void *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Tensor?)
                              - 8)
                  + 64);
  int64_t v11 = alloca(v10);
  uint64_t v12 = alloca(v10);
  uint64_t v13 = type metadata accessor for Tensor(0);
  uint64_t v14 = *(void *)(v13 - 8);
  int64_t v15 = *(void *)(v14 + 64);
  uint64_t v16 = alloca(v15);
  uint64_t v17 = alloca(v15);
  uint64_t v18 = alloca(v15);
  uint64_t v19 = alloca(v15);
  float v70 = &v52;
  uint64_t v20 = alloca(v15);
  uint64_t v21 = alloca(v15);
  outlined init with copy of Tensor?(v63, (uint64_t)&v52);
  if (__swift_getEnumTagSinglePayload((uint64_t)&v52, 1, v13) == 1)
  {
    outlined destroy of Tensor?((uint64_t)&v52);
    return _MetricUtilities.ConfusionMatrixMeter.add(predicted:target:)((uint64_t)v69, v66);
  }
  else
  {
    char v59 = &v52;
    uint64_t v56 = v14;
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(v14 + 32))(&v52, &v52, v13);
    uint64_t v60 = &v52;
    Tensor.argmax(squeezingAxis:)(1);
    uint64_t v23 = v54;
    static ScalarType.int.getter();
    unsigned int v61 = enum case for FloatingPointRoundingRule.towardZero(_:);
    uint64_t v24 = v64;
    uint64_t v55 = *(void (**)(uint64_t *))(v64 + 104);
    uint64_t v25 = v53;
    uint64_t v62 = v13;
    uint64_t v26 = v67;
    v55(v53);
    uint64_t v27 = v60;
    Tensor.cast(to:roundingRule:)(v23, v25);
    uint64_t v64 = *(void *)(v24 + 8);
    ((void (*)(uint64_t *, uint64_t))v64)(v25, v26);
    uint64_t v65 = *(void *)(v65 + 8);
    ((void (*)(uint64_t *, uint64_t))v65)(v23, v68);
    uint64_t v28 = *(void (**)(uint64_t *, uint64_t))(v56 + 8);
    uint64_t v29 = v62;
    v28(v27, v62);
    unint64_t v69 = v28;
    char v30 = v70;
    uint64_t v63 = Tensor.scalars<A>(as:)(&type metadata for Int, &type metadata for Int, &protocol witness table for Int);
    v28(v30, v29);
    uint64_t v31 = v60;
    Tensor.argmax(squeezingAxis:)(1);
    static ScalarType.int.getter();
    uint64_t v32 = v67;
    ((void (*)(uint64_t *, void, uint64_t))v55)(v25, v61, v67);
    Tensor.cast(to:roundingRule:)(v23, v25);
    ((void (*)(uint64_t *, uint64_t))v64)(v25, v32);
    ((void (*)(uint64_t *, uint64_t))v65)(v23, v68);
    uint64_t v33 = v31;
    uint64_t v34 = v62;
    uint64_t v35 = v69;
    v69(v33, v62);
    uint64_t v36 = v70;
    uint64_t v66 = Tensor.scalars<A>(as:)(&type metadata for Int, &type metadata for Int, &protocol witness table for Int);
    v35(v36, v34);
    uint64_t v37 = Tensor.scalars<A>(as:)(&type metadata for Float, &type metadata for Float, &protocol witness table for Float);
    int64_t v38 = *(void *)(v37 + 16);
    if (v38)
    {
      uint64_t v57 = _swiftEmptyArrayStorage;
      uint64_t v39 = 0;
      uint64_t v68 = v37;
      float v70 = (uint64_t *)v38;
      specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v38, 0);
      uint64_t v40 = v70;
      uint64_t v41 = v68;
      uint64_t v42 = v57;
      unint64_t v43 = v57[2];
      int v44 = 1;
      do
      {
        float v45 = *(float *)(v41 + 4 * (void)v39 + 32);
        uint64_t v57 = v42;
        unint64_t v46 = v42[3];
        if (v46 >> 1 <= v43)
        {
          int v47 = v44;
          *(float *)&uint64_t v67 = v45;
          specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v46 >= 2, v43 + 1, v44);
          float v45 = *(float *)&v67;
          int v44 = v47;
          uint64_t v40 = v70;
          uint64_t v41 = v68;
          uint64_t v42 = v57;
        }
        uint64_t v39 = (uint64_t *)((char *)v39 + 1);
        v42[2] = v43 + 1;
        *((unsigned char *)v42 + v43++ + 32) = v45 == 1.0;
      }
      while (v40 != v39);
      swift_bridgeObjectRelease(v41);
    }
    else
    {
      swift_bridgeObjectRelease(v37);
      uint64_t v42 = _swiftEmptyArrayStorage;
    }
    swift_bridgeObjectRetain((_BYTE)v42);
    char v48 = v63;
    unint64_t v49 = specialized Sequence.compactMap<A>(_:)(v63, (uint64_t)v42);
    swift_bridgeObjectRelease(v48);
    swift_bridgeObjectRetain((_BYTE)v42);
    char v50 = v66;
    uint64_t v51 = specialized Sequence.compactMap<A>(_:)(v66, (uint64_t)v42);
    swift_bridgeObjectRelease((_BYTE)v42);
    swift_bridgeObjectRelease(v50);
    _MetricUtilities.ConfusionMatrixMeter.add(predictedIds:targetIds:)((Swift::OpaquePointer)v49, (Swift::OpaquePointer)v51);
    swift_bridgeObjectRelease((_BYTE)v49);
    swift_bridgeObjectRelease((_BYTE)v51);
    return ((uint64_t (*)(uint64_t *, uint64_t))v69)(v59, v62);
  }
}

char *specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(char a1, int64_t a2, char a3, char *a4)
{
  int64_t v5 = a2;
  if (a3)
  {
    unint64_t v7 = *((void *)a4 + 3);
    if ((uint64_t)(v7 >> 1) >= a2)
    {
      int64_t v5 = *((void *)a4 + 3) >> 1;
    }
    else
    {
      if ((uint64_t)((v7 >> 1) + 0x4000000000000000) < 0) {
        BUG();
      }
      int64_t v8 = v7 & 0xFFFFFFFFFFFFFFFELL;
      if (v8 > a2) {
        int64_t v5 = v8;
      }
    }
  }
  int64_t v9 = *((void *)a4 + 2);
  if (v5 <= v9) {
    int64_t v5 = *((void *)a4 + 2);
  }
  if (v5)
  {
    uint64_t v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Int>);
    int64_t v11 = (char *)swift_allocObject(v10, 8 * v5 + 32, 7);
    long long v12 = (uint64_t)(_swift_stdlib_malloc_size(v11) - 32);
    *((void *)v11 + 2) = v9;
    *((void *)v11 + 3) = 2 * (v12 / 8);
  }
  else
  {
    int64_t v11 = (char *)_swiftEmptyArrayStorage;
  }
  uint64_t v13 = v11 + 32;
  uint64_t v14 = a4 + 32;
  if (a1)
  {
    if (v11 != a4 || &v14[8 * v9] <= v13) {
      memmove(v13, v14, 8 * v9);
    }
    *((void *)a4 + 2) = 0;
  }
  else
  {
    memcpy(v13, v14, 8 * v9);
  }
  swift_bridgeObjectRelease((_BYTE)a4);
  return v11;
}

{
  int64_t v5;
  unint64_t v7;
  int64_t v8;
  int64_t v9;
  uint64_t v10;
  char *v11;
  long long v12;
  char *v13;
  char *v14;
  size_t v15;

  int64_t v5 = a2;
  if (a3)
  {
    unint64_t v7 = *((void *)a4 + 3);
    if ((uint64_t)(v7 >> 1) >= a2)
    {
      int64_t v5 = *((void *)a4 + 3) >> 1;
    }
    else
    {
      if ((uint64_t)((v7 >> 1) + 0x4000000000000000) < 0) {
        BUG();
      }
      int64_t v8 = v7 & 0xFFFFFFFFFFFFFFFELL;
      if (v8 > a2) {
        int64_t v5 = v8;
      }
    }
  }
  int64_t v9 = *((void *)a4 + 2);
  if (v5 <= v9) {
    int64_t v5 = *((void *)a4 + 2);
  }
  if (v5)
  {
    uint64_t v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Range<Int>>);
    int64_t v11 = (char *)swift_allocObject(v10, 16 * v5 + 32, 7);
    long long v12 = (uint64_t)(_swift_stdlib_malloc_size(v11) - 32);
    *((void *)v11 + 2) = v9;
    *((void *)v11 + 3) = 2 * (v12 / 16);
  }
  else
  {
    int64_t v11 = (char *)_swiftEmptyArrayStorage;
  }
  uint64_t v13 = v11 + 32;
  uint64_t v14 = a4 + 32;
  int64_t v15 = 16 * v9;
  if (a1)
  {
    if (v11 != a4 || &v14[v15] <= v13) {
      memmove(v13, v14, v15);
    }
    *((void *)a4 + 2) = 0;
  }
  else
  {
    memcpy(v13, v14, v15);
  }
  swift_bridgeObjectRelease((_BYTE)a4);
  return v11;
}

void *specialized Sequence.reversed()(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = specialized _copyCollectionToContiguousArray<A>(_:)(a1, a2);
  unint64_t v3 = v2[2];
  if (v3 >= 2)
  {
    unint64_t v5 = v3 >> 1;
    unint64_t v6 = v3 - 1;
    unint64_t v7 = 0;
    unint64_t v11 = v5;
    do
    {
      if (v7 != v6)
      {
        unint64_t v8 = v2[2];
        if (v7 >= v8) {
          BUG();
        }
        if (v6 >= v8) {
          BUG();
        }
        uint64_t v9 = v2[v7 + 4];
        uint64_t v10 = v2[v6 + 4];
        if (!swift_isUniquelyReferenced_nonNull_native(v2)) {
          uint64_t v2 = specialized _ArrayBuffer._consumeAndCreateNew()((uint64_t)v2);
        }
        v2[v7 + 4] = v10;
        v2[v6 + 4] = v9;
        unint64_t v5 = v11;
      }
      ++v7;
      --v6;
    }
    while (v5 != v7);
  }
  return v2;
}

uint64_t *specialized _copyCollectionToContiguousArray<A>(_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = a2 - a1;
  if (__OFSUB__(a2, a1)) {
    BUG();
  }
  if (!v2) {
    return _swiftEmptyArrayStorage;
  }
  if (v2 <= 0)
  {
    int64_t v4 = _swiftEmptyArrayStorage;
  }
  else
  {
    uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Int>);
    int64_t v4 = (uint64_t *)swift_allocObject(v3, 8 * v2 + 32, 7);
    long long v5 = (uint64_t)(_swift_stdlib_malloc_size(v4) - 32);
    v4[2] = v2;
    v4[3] = 2 * (v5 / 8);
  }
  if (specialized Sequence._copySequenceContents(initializing:)(v7, v4 + 4, v2, a1, a2) != v2) {
    BUG();
  }
  return v4;
}

uint64_t specialized Sequence._copySequenceContents(initializing:)(uint64_t *a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  if (!a2) {
    goto LABEL_5;
  }
  if (!a3)
  {
LABEL_6:
    uint64_t v5 = a4;
    goto LABEL_7;
  }
  if (a3 < 0) {
    BUG();
  }
  if (a5 == a4)
  {
LABEL_5:
    a3 = 0;
    goto LABEL_6;
  }
  if (a5 < a4) {
    BUG();
  }
  if (a5 <= a4) {
    BUG();
  }
  uint64_t v5 = a4 + 1;
  *a2 = a4;
  if (a3 != 1)
  {
    if (v5 == a5)
    {
      a3 = 1;
      uint64_t v5 = a5;
    }
    else
    {
      if (v5 >= a5) {
        BUG();
      }
      a2[1] = v5;
      if (a3 == 2)
      {
        uint64_t v5 = a4 + 2;
      }
      else if (a4 + 2 == a5)
      {
LABEL_21:
        uint64_t v5 = a5;
        a3 = a5 - a4;
      }
      else
      {
        uint64_t v7 = 0;
        while (1)
        {
          uint64_t v8 = a4 + v7 + 2;
          if (v8 >= a5) {
            BUG();
          }
          a2[v7 + 2] = v8;
          if (!(v7 + 3 - a3)) {
            break;
          }
          if (!(++v7 + a4 - a5 + 2)) {
            goto LABEL_21;
          }
        }
        uint64_t v5 = a4 + v7 + 3;
      }
    }
  }
LABEL_7:
  *a1 = a4;
  a1[1] = a5;
  a1[2] = v5;
  return a3;
}

{
  uint64_t result;
  uint64_t v6;

  if (!a2)
  {
    uint64_t result = 0;
    goto LABEL_13;
  }
  if (!a3) {
    goto LABEL_11;
  }
  if (a3 < 0) {
    BUG();
  }
  uint64_t result = a4;
  if (!a4) {
    goto LABEL_13;
  }
  if (a4 <= 0) {
    BUG();
  }
  *a2 = a5;
  if (a3 == 1)
  {
LABEL_11:
    uint64_t result = a3;
    goto LABEL_13;
  }
  unint64_t v6 = 1;
  while (1)
  {
    if (a3 == v6) {
      BUG();
    }
    if (a4 == v6) {
      break;
    }
    a2[v6++] = a5;
    if (a3 == v6) {
      goto LABEL_11;
    }
  }
  uint64_t result = a4;
LABEL_13:
  *a1 = a4;
  a1[1] = a5;
  a1[2] = result;
  return result;
}

char *specialized _ArrayBuffer._consumeAndCreateNew()(uint64_t a1)
{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(void *)(a1 + 16), 0, (char *)a1);
}

{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(void *)(a1 + 16), 0, a1);
}

{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(void *)(a1 + 16), 0, a1);
}

{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(void *)(a1 + 16), 0, a1);
}

{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(void *)(a1 + 16), 0, a1);
}

{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(void *)(a1 + 16), 0, (char *)a1);
}

{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(void *)(a1 + 16), 0, a1);
}

uint64_t outlined init with copy of Tensor?(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Tensor?);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v2 - 8) + 16))(a2, a1, v2);
  return a2;
}

uint64_t outlined destroy of Tensor?(uint64_t a1)
{
  uint64_t v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Tensor?);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v1 - 8) + 8))(a1, v1);
  return a1;
}

uint64_t lazy protocol witness table accessor for type [String] and conformance <A> [A](uint64_t *a1, uint64_t *a2)
{
  uint64_t result = *a1;
  if (!*a1)
  {
    uint64_t v3 = __swift_instantiateConcreteTypeFromMangledNameAbstract(a2);
    uint64_t result = swift_getWitnessTable(&protocol conformance descriptor for <A> [A], v3);
    *a1 = result;
  }
  return result;
}

ValueMetadata *type metadata accessor for _MetricUtilities()
{
  return &type metadata for _MetricUtilities;
}

uint64_t destroy for MLActivityClassifier.PersistentParameters(uint64_t a1)
{
  outlined consume of Result<_DataTable, Error>(*(void *)a1, *(_DWORD *)(a1 + 8));
  char v1 = *(unsigned char *)(a1 + 24);
  if (v1 != -1) {
    outlined consume of Result<_DataTable, Error>(*(void *)(a1 + 16), v1 & 1);
  }
  return swift_bridgeObjectRelease(*(void *)(a1 + 32));
}

uint64_t initializeWithCopy for MLActivityClassifier.PersistentParameters(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)a2;
  char v4 = *(unsigned char *)(a2 + 8);
  outlined copy of Result<_DataTable, Error>(*(void *)a2, v4);
  *(void *)a1 = v3;
  *(unsigned char *)(a1 + 8) = v4;
  uint64_t v5 = (uint64_t *)(a2 + 16);
  char v6 = *(unsigned char *)(a2 + 24);
  if (v6 == -1)
  {
    *(unsigned char *)(a1 + 24) = *(unsigned char *)(a2 + 24);
    *(void *)(a1 + 16) = *v5;
  }
  else
  {
    uint64_t v7 = *v5;
    outlined copy of Result<_DataTable, Error>(*v5, v6);
    *(void *)(a1 + 16) = v7;
    *(unsigned char *)(a1 + 24) = v6 & 1;
  }
  uint64_t v8 = *(void *)(a2 + 32);
  *(void *)(a1 + 32) = v8;
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
  *(void *)(a1 + 56) = *(void *)(a2 + 56);
  swift_bridgeObjectRetain(v8);
  return a1;
}

uint64_t assignWithCopy for MLActivityClassifier.PersistentParameters(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)a2;
  char v5 = *(unsigned char *)(a2 + 8);
  outlined copy of Result<_DataTable, Error>(*(void *)a2, v5);
  uint64_t v6 = *(void *)a1;
  *(void *)a1 = v4;
  int v7 = *(_DWORD *)(a1 + 8);
  *(unsigned char *)(a1 + 8) = v5;
  outlined consume of Result<_DataTable, Error>(v6, v7);
  uint64_t v8 = (uint64_t *)(a1 + 16);
  uint64_t v9 = (uint64_t *)(a2 + 16);
  char v10 = *(unsigned char *)(a2 + 24);
  if (*(unsigned char *)(a1 + 24) == 0xFF)
  {
    if (v10 == -1)
    {
      *(unsigned char *)(a1 + 24) = *(unsigned char *)(a2 + 24);
      uint64_t *v8 = *v9;
    }
    else
    {
      uint64_t v14 = *v9;
      outlined copy of Result<_DataTable, Error>(*v9, v10);
      *(void *)(a1 + 16) = v14;
      *(unsigned char *)(a1 + 24) = v10 & 1;
    }
  }
  else if (v10 == -1)
  {
    outlined destroy of MLDataTable(a1 + 16);
    uint64_t *v8 = *v9;
    *(unsigned char *)(a1 + 24) = *(unsigned char *)(a2 + 24);
  }
  else
  {
    uint64_t v11 = *v9;
    outlined copy of Result<_DataTable, Error>(*v9, v10);
    uint64_t v12 = *(void *)(a1 + 16);
    *(void *)(a1 + 16) = v11;
    int v13 = *(_DWORD *)(a1 + 24);
    *(unsigned char *)(a1 + 24) = v10 & 1;
    outlined consume of Result<_DataTable, Error>(v12, v13);
  }
  uint64_t v15 = *(void *)(a2 + 32);
  uint64_t v16 = *(void *)(a1 + 32);
  *(void *)(a1 + 32) = v15;
  swift_bridgeObjectRetain(v15);
  swift_bridgeObjectRelease(v16);
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  *(void *)(a1 + 56) = *(void *)(a2 + 56);
  return a1;
}

uint64_t outlined destroy of MLDataTable(uint64_t a1)
{
  return a1;
}

uint64_t assignWithTake for MLActivityClassifier.PersistentParameters(uint64_t a1, uint64_t a2)
{
  char v4 = *(unsigned char *)(a2 + 8);
  uint64_t v5 = *(void *)a1;
  *(void *)a1 = *(void *)a2;
  int v6 = *(_DWORD *)(a1 + 8);
  *(unsigned char *)(a1 + 8) = v4;
  outlined consume of Result<_DataTable, Error>(v5, v6);
  int v7 = (void *)(a1 + 16);
  uint64_t v8 = (void *)(a2 + 16);
  char v9 = *(unsigned char *)(a1 + 24);
  if (v9 == -1)
  {
    *(unsigned char *)(a1 + 24) = *(unsigned char *)(a2 + 24);
    *int v7 = *v8;
  }
  else
  {
    char v10 = *(unsigned char *)(a2 + 24);
    if (v10 == -1)
    {
      outlined destroy of MLDataTable(a1 + 16);
      *int v7 = *v8;
      *(unsigned char *)(a1 + 24) = *(unsigned char *)(a2 + 24);
    }
    else
    {
      uint64_t v11 = *(void *)(a1 + 16);
      *(void *)(a1 + 16) = *v8;
      *(unsigned char *)(a1 + 24) = v10 & 1;
      outlined consume of Result<_DataTable, Error>(v11, v9 & 1);
    }
  }
  uint64_t v12 = *(void *)(a1 + 32);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  swift_bridgeObjectRelease(v12);
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
  *(void *)(a1 + 56) = *(void *)(a2 + 56);
  return a1;
}

uint64_t getEnumTagSinglePayload for MLActivityClassifier.PersistentParameters(uint64_t a1, int a2)
{
  if (a2)
  {
    if (a2 < 0 && *(unsigned char *)(a1 + 64)) {
      int v2 = *(_DWORD *)a1 + 0x7FFFFFFF;
    }
    else {
      int v2 = (*(void *)(a1 + 32) & 0xFFFFFFFF00000001) != 0 ? -1 : *(void *)(a1 + 32) >> 1;
    }
  }
  else
  {
    int v2 = -1;
  }
  return (v2 + 1);
}

void storeEnumTagSinglePayload for MLActivityClassifier.PersistentParameters(uint64_t a1, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)(a1 + 56) = 0;
    *(_OWORD *)(a1 + 40) = 0;
    *(_OWORD *)(a1 + 24) = 0;
    *(_OWORD *)(a1 + 8) = 0;
    *(void *)a1 = a2 + 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(a1 + 64) = 1;
    }
  }
  else
  {
    if (a3 < 0) {
      *(unsigned char *)(a1 + 64) = 0;
    }
    if (a2) {
      *(void *)(a1 + 32) = 2 * (a2 - 1);
    }
  }
}

ValueMetadata *type metadata accessor for MLActivityClassifier.PersistentParameters()
{
  return &type metadata for MLActivityClassifier.PersistentParameters;
}

NSURL *MLActivityClassifier.PersistentParameters.init(sessionDirectory:)(uint64_t a1)
{
  uint64_t v64 = v2;
  uint64_t v55 = v1;
  uint64_t v3 = type metadata accessor for URL(0);
  uint64_t v4 = *(void *)(v3 - 8);
  int64_t v5 = *(void *)(v4 + 64);
  int v6 = alloca(v5);
  int v7 = alloca(v5);
  char v59 = &v54;
  uint64_t v8 = alloca(v5);
  char v9 = alloca(v5);
  uint64_t v60 = &v54;
  char v10 = alloca(v5);
  uint64_t v11 = alloca(v5);
  URL.appendingPathComponent(_:)(0xD000000000000010, "ObjectDetectorMetrics." + 0x8000000000000000);
  uint64_t v12 = v64;
  uint64_t v13 = Data.init(contentsOf:options:)(&v54, 0);
  uint64_t v64 = v12;
  if (v12)
  {
    uint64_t v15 = *(void (**)(uint64_t, uint64_t))(v4 + 8);
    char v16 = 0;
    v15(a1, v3);
    v15((uint64_t)&v54, v3);
    goto LABEL_21;
  }
  uint64_t v70 = a1;
  uint64_t v17 = *(void (**)(uint64_t, uint64_t))(v4 + 8);
  unint64_t v18 = v14;
  uint64_t v19 = v13;
  unsigned int v61 = v17;
  v17((uint64_t)&v54, v3);
  uint64_t v20 = objc_opt_self(NSPropertyListSerialization);
  uint64_t v66 = v19;
  unint64_t v65 = v18;
  Class isa = Data._bridgeToObjectiveC()().super.isa;
  v86[0] = 0;
  id v22 = [v20 propertyListWithData:isa options:0 format:0 error:v86];
  id v23 = v22;

  id v24 = v86[0];
  uint64_t v15 = (void (*)(uint64_t, uint64_t))v3;
  if (!v23)
  {
    uint64_t v36 = v24;
    _convertNSErrorToError(_:)(v24);

    swift_willThrow();
    char v16 = 0;
    outlined consume of Data._Representation(v66, v65);
    v61(v70, v3);
    goto LABEL_21;
  }
  _bridgeAnyObjectToAny(_:)(v23);
  swift_unknownObjectRelease(v23);
  outlined init with copy of Any((uint64_t)v105, (uint64_t)v86);
  uint64_t v25 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [String : Any]);
  if (!swift_dynamicCast(v73, v86, (char *)&type metadata for Any + 8, v25, 6))
  {
    uint64_t v37 = lazy protocol witness table accessor for type MLCreateError and conformance MLCreateError();
    char v16 = 0;
    swift_allocError(&type metadata for MLCreateError, v37, 0, 0);
    *(void *)uint64_t v38 = 0xD000000000000037;
    *(void *)(v38 + 8) = "parameters.plist" + 0x8000000000000000;
    *(_OWORD *)(v38 + 16) = 0;
    *(_OWORD *)(v38 + 32) = 0;
    *(unsigned char *)(v38 + 48) = 0;
    swift_willThrow();
    outlined consume of Data._Representation(v66, v65);
    uint64_t v39 = v70;
    uint64_t v40 = v3;
LABEL_20:
    v61(v39, v40);
    __swift_destroy_boxed_opaque_existential_1Tm(v105);
    goto LABEL_21;
  }
  uint64_t v69 = v3;
  uint64_t v15 = (void (*)(uint64_t, uint64_t))v73[0];
  specialized Dictionary.subscript.getter(0xD000000000000012, (uint64_t)(" precision recall." + 0x8000000000000000), v73[0]);
  if (!v87)
  {
    swift_bridgeObjectRelease(v15);
    outlined destroy of Any?((uint64_t)v86);
LABEL_19:
    uint64_t v41 = v70;
    uint64_t v42 = lazy protocol witness table accessor for type MLCreateError and conformance MLCreateError();
    swift_allocError(&type metadata for MLCreateError, v42, 0, 0);
    *(void *)uint64_t v43 = 0xD00000000000003FLL;
    char v16 = 0;
    *(void *)(v43 + 8) = "labeled_directories" + 0x8000000000000000;
    *(_OWORD *)(v43 + 16) = 0;
    *(_OWORD *)(v43 + 32) = 0;
    *(unsigned char *)(v43 + 48) = 0;
    swift_willThrow();
    outlined consume of Data._Representation(v66, v65);
    uint64_t v39 = v41;
    uint64_t v40 = v69;
    goto LABEL_20;
  }
  uint64_t v67 = v15;
  uint64_t v26 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [String]);
  if (!swift_dynamicCast(v73, v86, (char *)&type metadata for Any + 8, v26, 6))
  {
    swift_bridgeObjectRelease(v67);
    goto LABEL_19;
  }
  uint64_t v27 = v73[0];
  swift_bridgeObjectRetain(v73[0]);
  uint64_t v28 = (uint64_t)v67;
  specialized Dictionary.subscript.getter(0xD000000000000011, (uint64_t)("featureColumnNames" + 0x8000000000000000), (uint64_t)v67);
  uint64_t v68 = (void (*)(uint64_t, uint64_t))v27;
  if (!v87)
  {
    swift_bridgeObjectRelease(v27);
    swift_bridgeObjectRelease(v28);
    outlined destroy of Any?((uint64_t)v86);
LABEL_26:
    uint64_t v32 = v70;
LABEL_32:
    uint64_t v33 = v69;
LABEL_33:
    uint64_t v46 = lazy protocol witness table accessor for type MLCreateError and conformance MLCreateError();
    swift_allocError(&type metadata for MLCreateError, v46, 0, 0);
    *(void *)uint64_t v47 = 0xD00000000000003FLL;
    *(void *)(v47 + 8) = "labeled_directories" + 0x8000000000000000;
    *(_OWORD *)(v47 + 16) = 0;
    *(_OWORD *)(v47 + 32) = 0;
    *(unsigned char *)(v47 + 48) = 0;
    swift_willThrow();
    outlined consume of Data._Representation(v66, v65);
    v61(v32, v33);
    __swift_destroy_boxed_opaque_existential_1Tm(v105);
    char v16 = 1;
    uint64_t v15 = v68;
    goto LABEL_21;
  }
  if (!swift_dynamicCast(v73, v86, (char *)&type metadata for Any + 8, &type metadata for Int, 6))
  {
    swift_bridgeObjectRelease(v68);
    swift_bridgeObjectRelease(v67);
    goto LABEL_26;
  }
  uint64_t v56 = v73[0];
  uint64_t v29 = (uint64_t)v67;
  specialized Dictionary.subscript.getter(0x7A69536863746162, 0xE900000000000065, (uint64_t)v67);
  if (!v87)
  {
    swift_bridgeObjectRelease(v68);
    swift_bridgeObjectRelease(v29);
    float v45 = v86;
LABEL_30:
    outlined destroy of Any?((uint64_t)v45);
    goto LABEL_31;
  }
  if (!swift_dynamicCast(v73, v86, (char *)&type metadata for Any + 8, &type metadata for Int, 6))
  {
    swift_bridgeObjectRelease(v68);
    swift_bridgeObjectRelease(v67);
LABEL_31:
    uint64_t v32 = v70;
    goto LABEL_32;
  }
  uint64_t v57 = v73[0];
  uint64_t v30 = (uint64_t)v67;
  specialized Dictionary.subscript.getter(0xD000000000000014, (uint64_t)("maximumIterations" + 0x8000000000000000), (uint64_t)v67);
  swift_bridgeObjectRelease(v30);
  if (!v104)
  {
    swift_bridgeObjectRelease(v68);
    float v45 = (id *)v103;
    goto LABEL_30;
  }
  char v31 = swift_dynamicCast(&v72, v103, (char *)&type metadata for Any + 8, &type metadata for Int, 6);
  uint64_t v32 = v70;
  uint64_t v33 = v69;
  if (!v31)
  {
    swift_bridgeObjectRelease(v68);
    goto LABEL_33;
  }
  uint64_t v67 = (void (*)(void, void))v72;
  uint64_t v34 = v60;
  URL.appendingPathComponent(_:)(1635017060, 0xE400000000000000);
  char v16 = 1;
  char v62 = 1;
  LOBYTE(v86[0]) = 1;
  v86[1] = &stru_20 + 12;
  v86[2] = (id)0xE100000000000000;
  uint64_t v87 = 0;
  unint64_t v88 = 0xE000000000000000;
  uint64_t v89 = 92;
  unint64_t v90 = 0xE100000000000000;
  char v91 = 1;
  uint64_t v92 = 34;
  unint64_t v93 = 0xE100000000000000;
  char v94 = 1;
  Float64 v95 = &outlined read-only object #0 of default argument 1 of MLDataTable.init(contentsOf:options:);
  uint64_t v96 = 10;
  unint64_t v97 = 0xE100000000000000;
  long long v98 = 0;
  char v99 = 1;
  uint64_t v100 = 0;
  uint64_t v35 = v64;
  MLDataTable.init(contentsOf:options:)(v34, v86);
  if (!v35)
  {
    LOBYTE(v71) = v102;
    uint64_t v58 = v101;
    LODWORD(v60) = v102;
    outlined copy of Result<_DataTable, Error>(v101, v102);
    URL.appendingPathComponent(_:)(0x69746164696C6176, 0xEE00617461446E6FLL);
    LOBYTE(v73[0]) = 1;
    v73[1] = 44;
    v73[2] = 0xE100000000000000;
    v73[3] = 0;
    char v63 = 1;
    void v73[4] = 0xE000000000000000;
    v73[5] = 92;
    v73[6] = 0xE100000000000000;
    char v74 = 1;
    uint64_t v75 = 34;
    unint64_t v76 = 0xE100000000000000;
    char v77 = 1;
    int v78 = &outlined read-only object #0 of default argument 1 of MLDataTable.init(contentsOf:options:);
    uint64_t v79 = 10;
    unint64_t v80 = 0xE100000000000000;
    long long v81 = 0;
    char v82 = 1;
    uint64_t v83 = 0;
    MLDataTable.init(contentsOf:options:)(v59, v73);
    uint64_t v64 = 0;
    outlined consume of Data._Representation(v66, v65);
    uint64_t v48 = v84;
    char v49 = v85;
    v61(v32, v69);
    __swift_destroy_boxed_opaque_existential_1Tm(v105);
    outlined copy of MLDataTable?(v48, v49);
    outlined consume of MLDataTable?(0, 255);
    char v50 = (char)v60;
    uint64_t v51 = v58;
    outlined copy of Result<_DataTable, Error>(v58, (char)v60);
    outlined copy of MLDataTable?(v48, v49);
    outlined consume of MLDataTable?(v48, v49);
    outlined consume of Result<_DataTable, Error>(v51, v50);
    uint64_t v52 = v55;
    uint64_t *v55 = v51;
    *((unsigned char *)v52 + 8) = (_BYTE)v60;
    v52[2] = v48;
    *((unsigned char *)v52 + 24) = v49;
    char v53 = v68;
    v52[4] = (uint64_t)v68;
    v52[5] = v56;
    v52[6] = v57;
    v52[7] = (uint64_t)v67;
    outlined consume of Result<_DataTable, Error>(v51, v71);
    outlined consume of MLDataTable?(v48, v49);
    swift_bridgeObjectRelease(v53);
    return __stack_chk_guard;
  }
  outlined consume of Data._Representation(v66, v65);
  uint64_t v15 = v68;
  swift_bridgeObjectRelease(v68);
  v61(v32, v69);
  __swift_destroy_boxed_opaque_existential_1Tm(v105);
LABEL_21:
  outlined consume of MLDataTable?(0, 255);
  if (v16) {
    swift_bridgeObjectRelease(v15);
  }
  return __stack_chk_guard;
}

uint64_t MLActivityClassifier.PersistentParameters.init(trainingData:validationData:featureColumnNames:labelColumnName:recordingFileColumn:modelParameters:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, char a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9 = v8;
  swift_bridgeObjectRelease(a5);
  swift_bridgeObjectRelease(a7);
  uint64_t v20 = *(void *)a1;
  uint64_t v19 = *(void *)a2;
  int v10 = *(_DWORD *)(a2 + 8);
  char v25 = *(unsigned char *)(a1 + 8);
  uint64_t v11 = (int *)type metadata accessor for MLActivityClassifier.ModelParameters(0);
  uint64_t v12 = v11[6];
  if (*(unsigned char *)(a8 + v12 + 8)) {
    uint64_t v13 = 10;
  }
  else {
    uint64_t v13 = *(void *)(a8 + v12);
  }
  uint64_t v22 = v13;
  uint64_t v14 = v11[7];
  if (*(unsigned char *)(a8 + v14 + 8)) {
    uint64_t v15 = 32;
  }
  else {
    uint64_t v15 = *(void *)(a8 + v14);
  }
  uint64_t v23 = v15;
  uint64_t v16 = v11[8];
  if (*(unsigned char *)(a8 + v16 + 8)) {
    uint64_t v17 = 100;
  }
  else {
    uint64_t v17 = *(void *)(a8 + v16);
  }
  uint64_t v24 = v17;
  swift_bridgeObjectRetain(a3);
  outlined copy of MLDataTable?(v19, v10);
  outlined copy of Result<_DataTable, Error>(v20, v25);
  outlined destroy of MLActivityClassifier.ModelParameters(a8);
  outlined copy of Result<_DataTable, Error>(v20, v25);
  outlined copy of MLDataTable?(v19, v10);
  outlined consume of MLDataTable?(v19, v10);
  outlined consume of Result<_DataTable, Error>(v20, v25);
  *(void *)uint64_t v9 = v20;
  *(unsigned char *)(v9 + 8) = v25;
  *(void *)(v9 + 16) = v19;
  *(unsigned char *)(v9 + 24) = v10;
  *(void *)(v9 + 32) = a3;
  *(void *)(v9 + 40) = v22;
  *(void *)(v9 + 48) = v23;
  *(void *)(v9 + 56) = v24;
  outlined consume of Result<_DataTable, Error>(v20, v25);
  outlined consume of MLDataTable?(v19, v10);
  return swift_bridgeObjectRelease(a3);
}

NSURL *MLActivityClassifier.PersistentParameters.save(toSessionDirectory:)(uint64_t a1)
{
  uint64_t v36 = v1;
  uint64_t v41 = a1;
  uint64_t v44 = type metadata accessor for URL(0);
  uint64_t v42 = *(void *)(v44 - 8);
  int64_t v3 = *(void *)(v42 + 64);
  uint64_t v4 = alloca(v3);
  int64_t v5 = alloca(v3);
  uint64_t v39 = &v35;
  int v6 = alloca(v3);
  int v7 = alloca(v3);
  uint64_t v37 = &v35;
  uint64_t v8 = alloca(v3);
  uint64_t v9 = alloca(v3);
  uint64_t v46 = &v35;
  uint64_t v38 = *(void **)v2;
  char v47 = *(unsigned char *)(v2 + 8);
  uint64_t v40 = *(void **)(v2 + 16);
  char v48 = *(unsigned char *)(v2 + 24);
  uint64_t v10 = *(void *)(v2 + 32);
  uint64_t v11 = *(void *)(v2 + 40);
  uint64_t v43 = *(void *)(v2 + 48);
  unint64_t v45 = *(void *)(v2 + 56);
  uint64_t v12 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, Any)>);
  uint64_t inited = (void *)swift_initStackObject(v12, v51);
  inited[2] = 4;
  inited[3] = 8;
  inited[4] = 0xD000000000000012;
  inited[5] = " precision recall." + 0x8000000000000000;
  inited[9] = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [String]);
  inited[6] = v10;
  inited[10] = 0xD000000000000011;
  inited[11] = "featureColumnNames" + 0x8000000000000000;
  inited[15] = &type metadata for Int;
  inited[12] = v11;
  inited[16] = 0x7A69536863746162;
  inited[17] = 0xE900000000000065;
  inited[21] = &type metadata for Int;
  inited[18] = v43;
  inited[22] = 0xD000000000000014;
  inited[23] = "maximumIterations" + 0x8000000000000000;
  inited[27] = &type metadata for Int;
  inited[24] = v45;
  swift_bridgeObjectRetain(v10);
  LOBYTE(inited) = Dictionary.init(dictionaryLiteral:)(inited, &type metadata for String, (char *)&type metadata for Any + 8, &protocol witness table for String);
  uint64_t v14 = objc_opt_self(NSPropertyListSerialization);
  Class isa = Dictionary._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease((_BYTE)inited);
  id v49 = 0;
  id v16 = [v14 dataWithPropertyList:isa format:200 options:0 error:&v49];
  id v17 = v16;

  id v18 = v49;
  if (v17)
  {
    uint64_t v19 = static Data._unconditionallyBridgeFromObjectiveC(_:)(v17);
    unint64_t v45 = v20;

    uint64_t v21 = v46;
    URL.appendingPathComponent(_:)(0xD000000000000010, "ObjectDetectorMetrics." + 0x8000000000000000);
    uint64_t v22 = v21;
    unint64_t v23 = v45;
    uint64_t v24 = v36;
    Data.write(to:options:)(v22, 0, v19, v45);
    if (v24)
    {
      (*(void (**)(uint64_t *, uint64_t))(v42 + 8))(v46, v44);
      outlined consume of Data._Representation(v19, v23);
    }
    else
    {
      uint64_t v43 = v19;
      uint64_t v30 = v46;
      uint64_t v46 = *(uint64_t **)(v42 + 8);
      ((void (*)(uint64_t *, uint64_t))v46)(v30, v44);
      id v49 = v38;
      LOBYTE(v50) = v47 & 1;
      outlined copy of Result<_DataTable, Error>((uint64_t)v38, v47);
      uint64_t v31 = (uint64_t)v37;
      URL.appendingPathComponent(_:)(1635017060, 0xE400000000000000);
      MLDataTable.write(to:)(v31);
      ((void (*)(uint64_t, uint64_t))v46)(v31, v44);
      outlined consume of Result<_DataTable, Error>((uint64_t)v49, v50);
      uint64_t v32 = v43;
      if (v48 == -1)
      {
        outlined consume of Data._Representation(v43, v45);
      }
      else
      {
        id v49 = v40;
        LOBYTE(v50) = v48 & 1;
        outlined copy of MLDataTable?((uint64_t)v40, v48);
        uint64_t v33 = (uint64_t)v39;
        URL.appendingPathComponent(_:)(0x69746164696C6176, 0xEE00617461446E6FLL);
        MLDataTable.write(to:)(v33);
        outlined consume of Data._Representation(v32, v45);
        ((void (*)(uint64_t, uint64_t))v46)(v33, v44);
        outlined consume of Result<_DataTable, Error>((uint64_t)v49, v50);
      }
    }
  }
  else
  {
    char v25 = v18;
    _convertNSErrorToError(_:)(v18);

    swift_willThrow(v25, "dataWithPropertyList:format:options:error:", v26, v27, v28, v29);
  }
  return __stack_chk_guard;
}

uint64_t outlined destroy of MLActivityClassifier.ModelParameters(uint64_t a1)
{
  uint64_t v1 = type metadata accessor for MLActivityClassifier.ModelParameters(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v1 - 8) + 8))(a1, v1);
  return a1;
}

uint64_t outlined consume of MLDataTable?(uint64_t a1, char a2)
{
  if (a2 != -1) {
    return outlined consume of Result<_DataTable, Error>(a1, a2 & 1);
  }
  return result;
}

uint64_t _sSq3mapyqd_0_Sgqd_0_xqd__YKXEqd__YKs5ErrorRd__Ri_d_0_r0_lF11TabularData0D5FrameV_s5NeverO8CreateML23MLRandomForestRegressorV15ModelParametersV010ValidationD0OTg503_s8g4ML23ijk3V15lm76V13configuration10validationAE0A12MLComponents24BoostedTreeConfigurationV_11c7Data0O5e12VSgtcfcAE010N21O0OAMcAPmcfu_ApMcfu0_AOXMtTf1ncn_n(uint64_t a1)
{
  uint64_t v21 = v1;
  uint64_t v2 = type metadata accessor for DataFrame(0);
  uint64_t v18 = *(void *)(v2 - 8);
  int64_t v3 = *(void *)(v18 + 64);
  uint64_t v4 = alloca(v3);
  int64_t v5 = alloca(v3);
  uint64_t v19 = &v17;
  int64_t v6 = *(void *)(*(void *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for DataFrame?)
                             - 8)
                 + 64);
  int v7 = alloca(v6);
  uint64_t v8 = alloca(v6);
  outlined init with copy of Either<LogisticRegressionClassifier<Float, String>, FullyConnectedNetworkClassifier<Float, String>>(a1, (uint64_t)&v17, &demangling cache variable for type metadata for DataFrame?);
  if (__swift_getEnumTagSinglePayload((uint64_t)&v17, 1, v2) == 1)
  {
    uint64_t v9 = type metadata accessor for MLRandomForestRegressor.ModelParameters.ValidationData(0);
    uint64_t v10 = v21;
    uint64_t v11 = 1;
    uint64_t v12 = v9;
  }
  else
  {
    uint64_t v13 = v19;
    uint64_t v14 = v18;
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(v18 + 32))(v19, &v17, v2);
    uint64_t v15 = v21;
    (*(void (**)(uint64_t, uint64_t *, uint64_t))(v14 + 16))(v21, v13, v2);
    uint64_t v20 = type metadata accessor for MLRandomForestRegressor.ModelParameters.ValidationData(0);
    swift_storeEnumTagMultiPayload(v15, v20, 2);
    (*(void (**)(uint64_t *, uint64_t))(v14 + 8))(v13, v2);
    uint64_t v10 = v15;
    uint64_t v11 = 0;
    uint64_t v12 = v20;
  }
  return __swift_storeEnumTagSinglePayload(v10, v11, 1, v12);
}

uint64_t MLRandomForestRegressor.ModelParameters.init(validation:maxDepth:maxIterations:minLossReduction:minChildWeight:randomSeed:rowSubsample:columnSubsample:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, double a5, double a6, double a7, double a8)
{
  uint64_t v18 = a4;
  uint64_t v20 = a3;
  uint64_t v9 = v8;
  double v19 = a8;
  double v21 = a7;
  double v22 = a6;
  double v23 = a5;
  uint64_t v10 = type metadata accessor for MLRandomForestRegressor.ModelParameters.ValidationData(0);
  int64_t v11 = *(void *)(*(void *)(v10 - 8) + 64);
  uint64_t v12 = alloca(v11);
  uint64_t v13 = alloca(v11);
  *(_OWORD *)(v9 + 16) = 0;
  *(_OWORD *)uint64_t v9 = 0;
  *(void *)(v9 + 104) = 0;
  *(_OWORD *)(v9 + 88) = 0;
  *(void *)(v9 + 32) = a2;
  *(void *)(v9 + 40) = v20;
  *(double *)(v9 + 48) = v23;
  *(double *)(v9 + 56) = v22;
  *(void *)(v9 + 64) = v18;
  *(double *)(v9 + 72) = v21;
  *(double *)(v9 + 80) = v19;
  outlined init with copy of MLRandomForestRegressor.ModelParameters.ValidationData(a1, (uint64_t)&v16);
  v17[3] = v10;
  boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1(v17);
  outlined init with take of MLRandomForestRegressor.ModelParameters.ValidationData((uint64_t)&v16, (uint64_t)boxed_opaque_existential_1);
  outlined assign with take of Any?((uint64_t)v17, v9);
  return outlined destroy of MLRandomForestRegressor.ModelParameters.ValidationData(a1);
}

uint64_t outlined init with copy of MLRandomForestRegressor.ModelParameters.ValidationData(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = type metadata accessor for MLRandomForestRegressor.ModelParameters.ValidationData(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v2 - 8) + 16))(a2, a1, v2);
  return a2;
}

uint64_t MLRandomForestRegressor.ModelParameters.validation.getter()
{
  uint64_t v2 = v0;
  outlined init with copy of Either<LogisticRegressionClassifier<Float, String>, FullyConnectedNetworkClassifier<Float, String>>(v1, (uint64_t)&v6, &demangling cache variable for type metadata for Any?);
  if (!v7) {
    BUG();
  }
  outlined init with take of Any(&v6, v5);
  uint64_t v3 = type metadata accessor for MLRandomForestRegressor.ModelParameters.ValidationData(0);
  return swift_dynamicCast(v2, v5, (char *)&type metadata for Any + 8, v3, 7);
}

uint64_t MLRandomForestRegressor.ModelParameters.init(validationData:maxDepth:maxIterations:minLossReduction:minChildWeight:randomSeed:rowSubsample:columnSubsample:)(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, double a5, double a6, double a7, double a8)
{
  uint64_t v9 = *a1;
  *(_OWORD *)(v8 + 16) = 0;
  *(_OWORD *)uint64_t v8 = 0;
  *(void *)(v8 + 104) = 0;
  char v10 = *((unsigned char *)a1 + 8);
  *(_OWORD *)(v8 + 88) = 0;
  *(void *)(v8 + 32) = a2;
  *(void *)(v8 + 40) = a3;
  *(double *)(v8 + 48) = a5;
  *(double *)(v8 + 56) = a6;
  *(void *)(v8 + 64) = a4;
  *(double *)(v8 + 72) = a7;
  *(double *)(v8 + 80) = a8;
  uint64_t v12 = v9;
  char v13 = v10;
  return MLRandomForestRegressor.ModelParameters.validationData.setter((uint64_t)&v12);
}

uint64_t MLRandomForestRegressor.ModelParameters.init(configuration:validation:)(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = v2;
  int64_t v4 = *(void *)(*(void *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for MLRandomForestRegressor.ModelParameters.ValidationData?)
                             - 8)
                 + 64);
  int64_t v5 = alloca(v4);
  long long v6 = alloca(v4);
  uint64_t v7 = type metadata accessor for MLRandomForestRegressor.ModelParameters.ValidationData(0);
  int64_t v8 = *(void *)(*(void *)(v7 - 8) + 64);
  uint64_t v9 = alloca(v8);
  char v10 = alloca(v8);
  uint64_t v18 = v15;
  *(_OWORD *)(v3 + 16) = 0;
  *(_OWORD *)uint64_t v3 = 0;
  *(_OWORD *)(v3 + 88) = 0;
  *(void *)(v3 + 104) = 0;
  *(void *)(v3 + 32) = BoostedTreeConfiguration.maximumDepth.getter();
  *(void *)(v3 + 40) = BoostedTreeConfiguration.maximumIterations.getter();
  *(double *)(v3 + 48) = BoostedTreeConfiguration.minimumLossReduction.getter();
  *(double *)(v3 + 56) = BoostedTreeConfiguration.minimumChildWeight.getter();
  *(void *)(v3 + 64) = BoostedTreeConfiguration.randomSeed.getter();
  *(double *)(v3 + 72) = BoostedTreeConfiguration.rowSubsample.getter();
  *(double *)(v3 + 80) = BoostedTreeConfiguration.columnSubsample.getter();
  uint64_t v17 = a2;
  _sSq3mapyqd_0_Sgqd_0_xqd__YKXEqd__YKs5ErrorRd__Ri_d_0_r0_lF11TabularData0D5FrameV_s5NeverO8CreateML23MLRandomForestRegressorV15ModelParametersV010ValidationD0OTg503_s8g4ML23ijk3V15lm76V13configuration10validationAE0A12MLComponents24BoostedTreeConfigurationV_11c7Data0O5e12VSgtcfcAE010N21O0OAMcAPmcfu_ApMcfu0_AOXMtTf1ncn_n(a2);
  if (__swift_getEnumTagSinglePayload((uint64_t)v15, 1, v7) == 1)
  {
    uint64_t v11 = (uint64_t)v18;
    swift_storeEnumTagMultiPayload(v18, v7, 3);
    outlined destroy of Either<LogisticRegressionClassifier<Float, String>, FullyConnectedNetworkClassifier<Float, String>>((uint64_t)v15, &demangling cache variable for type metadata for MLRandomForestRegressor.ModelParameters.ValidationData?);
  }
  else
  {
    uint64_t v11 = (uint64_t)v18;
    outlined init with take of MLRandomForestRegressor.ModelParameters.ValidationData((uint64_t)v15, (uint64_t)v18);
  }
  v16[3] = v7;
  boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1(v16);
  outlined init with take of MLRandomForestRegressor.ModelParameters.ValidationData(v11, (uint64_t)boxed_opaque_existential_1);
  outlined assign with take of Any?((uint64_t)v16, v3);
  outlined destroy of Either<LogisticRegressionClassifier<Float, String>, FullyConnectedNetworkClassifier<Float, String>>(v17, &demangling cache variable for type metadata for DataFrame?);
  uint64_t v13 = type metadata accessor for BoostedTreeConfiguration(0);
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v13 - 8) + 8))(a1, v13);
}

uint64_t MLRandomForestRegressor.ModelParameters.description.getter()
{
  v0._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter(&type metadata for Int, &protocol witness table for Int);
  char object = v0._object;
  String.append(_:)(v0);
  swift_bridgeObjectRelease(object);
  v2._char object = (void *)0xE100000000000000;
  v2._uint64_t countAndFlagsBits = 10;
  String.append(_:)(v2);
  _StringGuts.grow(_:)(19);
  swift_bridgeObjectRelease(0xE000000000000000);
  v3._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter(&type metadata for Int, &protocol witness table for Int);
  int64_t v4 = v3._object;
  String.append(_:)(v3);
  swift_bridgeObjectRelease(v4);
  v2._uint64_t countAndFlagsBits = 10;
  v2._char object = (void *)0xE100000000000000;
  String.append(_:)(v2);
  v2._uint64_t countAndFlagsBits = 0xD000000000000010;
  v2._char object = "ansformer have different types." + 0x8000000000000000;
  String.append(_:)(v2);
  swift_bridgeObjectRelease("ansformer have different types." + 0x8000000000000000);
  v13._uint64_t countAndFlagsBits = 0;
  v13._char object = (void *)0xE000000000000000;
  _StringGuts.grow(_:)(23);
  v2._uint64_t countAndFlagsBits = 0xD000000000000014;
  v2._char object = "Max Iterations: " + 0x8000000000000000;
  String.append(_:)(v2);
  Double.write<A>(to:)(&v13, &type metadata for DefaultStringInterpolation, &protocol witness table for DefaultStringInterpolation);
  v2._uint64_t countAndFlagsBits = 10;
  v2._char object = (void *)0xE100000000000000;
  String.append(_:)(v2);
  int64_t v5 = v13._object;
  String.append(_:)(v13);
  swift_bridgeObjectRelease(v5);
  v13._uint64_t countAndFlagsBits = 0;
  v13._char object = (void *)0xE000000000000000;
  _StringGuts.grow(_:)(21);
  v2._char object = "Min Loss Reduction: " + 0x8000000000000000;
  v2._uint64_t countAndFlagsBits = 0xD000000000000012;
  String.append(_:)(v2);
  Double.write<A>(to:)(&v13, &type metadata for DefaultStringInterpolation, &protocol witness table for DefaultStringInterpolation);
  v2._uint64_t countAndFlagsBits = 10;
  v2._char object = (void *)0xE100000000000000;
  String.append(_:)(v2);
  long long v6 = v13._object;
  String.append(_:)(v13);
  swift_bridgeObjectRelease(v6);
  v13._uint64_t countAndFlagsBits = 0;
  v13._char object = (void *)0xE000000000000000;
  _StringGuts.grow(_:)(16);
  swift_bridgeObjectRelease(v13._object);
  strcpy((char *)&v13, "Random Seed: ");
  HIWORD(v13._object) = -4864;
  v7._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter(&type metadata for Int, &protocol witness table for Int);
  int64_t v8 = v7._object;
  String.append(_:)(v7);
  swift_bridgeObjectRelease(v8);
  v2._uint64_t countAndFlagsBits = 10;
  v2._char object = (void *)0xE100000000000000;
  String.append(_:)(v2);
  uint64_t v9 = v13._object;
  String.append(_:)(v13);
  swift_bridgeObjectRelease(v9);
  v13._uint64_t countAndFlagsBits = 0;
  v13._char object = (void *)0xE000000000000000;
  _StringGuts.grow(_:)(18);
  v2._uint64_t countAndFlagsBits = 0x7362755320776F52;
  v2._char object = (void *)0xEF203A656C706D61;
  String.append(_:)(v2);
  Double.write<A>(to:)(&v13, &type metadata for DefaultStringInterpolation, &protocol witness table for DefaultStringInterpolation);
  v2._uint64_t countAndFlagsBits = 10;
  v2._char object = (void *)0xE100000000000000;
  String.append(_:)(v2);
  char v10 = v13._object;
  String.append(_:)(v13);
  swift_bridgeObjectRelease(v10);
  v13._uint64_t countAndFlagsBits = 0;
  v13._char object = (void *)0xE000000000000000;
  _StringGuts.grow(_:)(21);
  v2._char object = "Min Child Weight: " + 0x8000000000000000;
  v2._uint64_t countAndFlagsBits = 0xD000000000000012;
  String.append(_:)(v2);
  Double.write<A>(to:)(&v13, &type metadata for DefaultStringInterpolation, &protocol witness table for DefaultStringInterpolation);
  v2._uint64_t countAndFlagsBits = 10;
  v2._char object = (void *)0xE100000000000000;
  String.append(_:)(v2);
  uint64_t v11 = v13._object;
  String.append(_:)(v13);
  swift_bridgeObjectRelease(v11);
  return 0x747065442078614DLL;
}

uint64_t MLRandomForestRegressor.ModelParameters.validationData.getter(__m128 a1)
{
  uint64_t v2 = type metadata accessor for MLRandomForestRegressor.ModelParameters.ValidationData(0);
  int64_t v3 = *(void *)(*(void *)(v2 - 8) + 64);
  int64_t v4 = alloca(v3);
  int64_t v5 = alloca(v3);
  outlined init with copy of Either<LogisticRegressionClassifier<Float, String>, FullyConnectedNetworkClassifier<Float, String>>(v1, (uint64_t)&v9, &demangling cache variable for type metadata for Any?);
  if (!v10) {
    BUG();
  }
  outlined init with take of Any(&v9, v8);
  swift_dynamicCast(&v7, v8, (char *)&type metadata for Any + 8, v2, 7);
  MLRandomForestRegressor.ModelParameters.ValidationData.table.getter(a1);
  return outlined destroy of MLRandomForestRegressor.ModelParameters.ValidationData((uint64_t)&v7);
}

uint64_t key path getter for MLRandomForestRegressor.ModelParameters.validationData : MLRandomForestRegressor.ModelParameters(__m128 a1)
{
  uint64_t v2 = v1;
  MLRandomForestRegressor.ModelParameters.validationData.getter(a1);
  uint64_t result = v4;
  *(void *)uint64_t v2 = v4;
  *(unsigned char *)(v2 + 8) = v5;
  return result;
}

uint64_t key path setter for MLRandomForestRegressor.ModelParameters.validationData : MLRandomForestRegressor.ModelParameters(uint64_t a1)
{
  int v1 = *(_DWORD *)(a1 + 8);
  uint64_t v3 = *(void *)a1;
  char v4 = v1;
  outlined copy of MLDataTable?(v3, v1);
  return MLRandomForestRegressor.ModelParameters.validationData.setter((uint64_t)&v3);
}

uint64_t MLRandomForestRegressor.ModelParameters.validationData.setter(uint64_t a1)
{
  uint64_t v20 = v1;
  unsigned int v2 = 0;
  uint64_t v3 = type metadata accessor for MLRandomForestRegressor.ModelParameters.ValidationData(0);
  int64_t v4 = *(void *)(*(void *)(v3 - 8) + 64);
  char v5 = alloca(v4);
  long long v6 = alloca(v4);
  uint64_t v19 = *(void *)a1;
  char v7 = *(unsigned char *)(a1 + 8);
  uint64_t v15 = v3;
  int64_t v8 = __swift_allocate_boxed_opaque_existential_1(&v13);
  uint64_t v9 = (uint64_t)v8;
  if (v7 == -1)
  {
    long long v13 = 0;
    __int16 v14 = 256;
    uint64_t v10 = v20;
  }
  else
  {
    uint64_t v18 = v8;
    uint64_t v16 = v19;
    char v17 = v7 & 1;
    if (MLDataTable.size.getter())
    {
      *(void *)&long long v13 = v19;
      BYTE8(v13) = v7 & 1;
      int v12 = 1;
    }
    else
    {
      outlined consume of MLDataTable?(v19, v7);
      int v12 = 3;
    }
    unsigned int v2 = v12;
    uint64_t v10 = v20;
    uint64_t v9 = (uint64_t)v18;
  }
  swift_storeEnumTagMultiPayload(&v13, v3, v2);
  outlined init with take of MLRandomForestRegressor.ModelParameters.ValidationData((uint64_t)&v13, v9);
  return outlined assign with take of Any?((uint64_t)&v13, v10);
}

uint64_t (*MLRandomForestRegressor.ModelParameters.validationData.modify(uint64_t a1, __m128 a2))(uint64_t a1, char a2)
{
  *(void *)(a1 + 16) = v2;
  MLRandomForestRegressor.ModelParameters.validationData.getter(a2);
  return MLRandomForestRegressor.ModelParameters.validationData.modify;
}

uint64_t MLRandomForestRegressor.ModelParameters.validationData.modify(uint64_t a1, char a2)
{
  uint64_t v2 = *(void *)a1;
  char v3 = *(unsigned char *)(a1 + 8);
  uint64_t v6 = *(void *)a1;
  char v7 = v3;
  if ((a2 & 1) == 0) {
    return MLRandomForestRegressor.ModelParameters.validationData.setter((uint64_t)&v6);
  }
  char v4 = v3;
  outlined copy of MLDataTable?(v2, v3);
  MLRandomForestRegressor.ModelParameters.validationData.setter((uint64_t)&v6);
  return outlined consume of MLDataTable?(v2, v4);
}

uint64_t key path setter for MLRandomForestRegressor.ModelParameters.validation : MLRandomForestRegressor.ModelParameters(uint64_t a1)
{
  v6[0] = v1;
  int64_t v2 = *(void *)(*(void *)(type metadata accessor for MLRandomForestRegressor.ModelParameters.ValidationData(0) - 8)
                 + 64);
  char v3 = alloca(v2);
  char v4 = alloca(v2);
  outlined init with copy of MLRandomForestRegressor.ModelParameters.ValidationData(a1, (uint64_t)v6);
  return MLRandomForestRegressor.ModelParameters.validation.setter((uint64_t)v6);
}

uint64_t MLRandomForestRegressor.ModelParameters.validation.setter(uint64_t a1)
{
  v4[3] = type metadata accessor for MLRandomForestRegressor.ModelParameters.ValidationData(0);
  boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1(v4);
  outlined init with take of MLRandomForestRegressor.ModelParameters.ValidationData(a1, (uint64_t)boxed_opaque_existential_1);
  return outlined assign with take of Any?((uint64_t)v4, v1);
}

uint64_t outlined init with take of MLRandomForestRegressor.ModelParameters.ValidationData(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = type metadata accessor for MLRandomForestRegressor.ModelParameters.ValidationData(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v2 - 8) + 32))(a2, a1, v2);
  return a2;
}

uint64_t outlined destroy of MLRandomForestRegressor.ModelParameters.ValidationData(uint64_t a1)
{
  uint64_t v1 = type metadata accessor for MLRandomForestRegressor.ModelParameters.ValidationData(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v1 - 8) + 8))(a1, v1);
  return a1;
}

void (*MLRandomForestRegressor.ModelParameters.validation.modify(void *a1))(uint64_t a1, char a2)
{
  uint64_t v2 = malloc(0xA0uLL);
  *a1 = v2;
  *((void *)v2 + 16) = v1;
  uint64_t v3 = type metadata accessor for MLRandomForestRegressor.ModelParameters.ValidationData(0);
  *((void *)v2 + 17) = v3;
  size_t v4 = *(void *)(*(void *)(v3 - 8) + 64);
  *((void *)v2 + 18) = malloc(v4);
  char v5 = malloc(v4);
  *((void *)v2 + 19) = v5;
  outlined init with copy of Either<LogisticRegressionClassifier<Float, String>, FullyConnectedNetworkClassifier<Float, String>>(v1, (uint64_t)(v2 + 2), &demangling cache variable for type metadata for Any?);
  if (!*((void *)v2 + 7)) {
    BUG();
  }
  outlined init with take of Any(v2 + 2, v2);
  swift_dynamicCast(v5, v2, (char *)&type metadata for Any + 8, v3, 7);
  return MLRandomForestRegressor.ModelParameters.validation.modify;
}

void MLRandomForestRegressor.ModelParameters.validation.modify(uint64_t a1, char a2)
{
  uint64_t v2 = *(void **)a1;
  uint64_t v3 = *(void **)(*(void *)a1 + 152);
  size_t v4 = *(void **)(*(void *)a1 + 144);
  uint64_t v8 = *(void *)(*(void *)a1 + 128);
  uint64_t v5 = *(void *)(*(void *)a1 + 136);
  if (a2)
  {
    outlined init with copy of MLRandomForestRegressor.ModelParameters.ValidationData((uint64_t)v3, (uint64_t)v4);
    v2[11] = v5;
    boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1(v2 + 8);
    outlined init with take of MLRandomForestRegressor.ModelParameters.ValidationData((uint64_t)v4, (uint64_t)boxed_opaque_existential_1);
    outlined assign with take of Any?((uint64_t)(v2 + 8), v8);
    outlined destroy of MLRandomForestRegressor.ModelParameters.ValidationData((uint64_t)v3);
  }
  else
  {
    v2[15] = v5;
    char v7 = __swift_allocate_boxed_opaque_existential_1(v2 + 12);
    outlined init with take of MLRandomForestRegressor.ModelParameters.ValidationData((uint64_t)v3, (uint64_t)v7);
    outlined assign with take of Any?((uint64_t)(v2 + 12), v8);
  }
  free(v3);
  free(v4);
  free(v2);
}

uint64_t MLRandomForestRegressor.ModelParameters.maxDepth.getter()
{
  return *(void *)(v0 + 32);
}

void MLRandomForestRegressor.ModelParameters.maxDepth.setter(uint64_t a1)
{
  *(void *)(v1 + 32) = a1;
}

void (*MLRandomForestRegressor.ModelParameters.maxDepth.modify())()
{
  return MLBoostedTreeRegressor.ModelParameters.maxDepth.modify;
}

uint64_t MLRandomForestRegressor.ModelParameters.maxIterations.getter()
{
  return *(void *)(v0 + 40);
}

void MLRandomForestRegressor.ModelParameters.maxIterations.setter(uint64_t a1)
{
  *(void *)(v1 + 40) = a1;
}

void (*MLRandomForestRegressor.ModelParameters.maxIterations.modify())()
{
  return MLBoostedTreeRegressor.ModelParameters.maxDepth.modify;
}

double MLRandomForestRegressor.ModelParameters.minLossReduction.getter()
{
  return *(double *)(v0 + 48);
}

void MLRandomForestRegressor.ModelParameters.minLossReduction.setter(double a1)
{
  *(double *)(v1 + 48) = a1;
}

void (*MLRandomForestRegressor.ModelParameters.minLossReduction.modify())()
{
  return MLBoostedTreeRegressor.ModelParameters.maxDepth.modify;
}

double MLRandomForestRegressor.ModelParameters.minChildWeight.getter()
{
  return *(double *)(v0 + 56);
}

void MLRandomForestRegressor.ModelParameters.minChildWeight.setter(double a1)
{
  *(double *)(v1 + 56) = a1;
}

void (*MLRandomForestRegressor.ModelParameters.minChildWeight.modify())()
{
  return MLBoostedTreeRegressor.ModelParameters.maxDepth.modify;
}

uint64_t MLRandomForestRegressor.ModelParameters.randomSeed.getter()
{
  return *(void *)(v0 + 64);
}

void MLRandomForestRegressor.ModelParameters.randomSeed.setter(uint64_t a1)
{
  *(void *)(v1 + 64) = a1;
}

void (*MLRandomForestRegressor.ModelParameters.randomSeed.modify())()
{
  return MLBoostedTreeRegressor.ModelParameters.maxDepth.modify;
}

double MLRandomForestRegressor.ModelParameters.rowSubsample.getter()
{
  return *(double *)(v0 + 72);
}

void MLRandomForestRegressor.ModelParameters.rowSubsample.setter(double a1)
{
  *(double *)(v1 + 72) = a1;
}

void (*MLRandomForestRegressor.ModelParameters.rowSubsample.modify())()
{
  return MLBoostedTreeRegressor.ModelParameters.maxDepth.modify;
}

double MLRandomForestRegressor.ModelParameters.columnSubsample.getter()
{
  return *(double *)(v0 + 80);
}

void MLRandomForestRegressor.ModelParameters.columnSubsample.setter(double a1)
{
  *(double *)(v1 + 80) = a1;
}

void (*MLRandomForestRegressor.ModelParameters.columnSubsample.modify())()
{
  return MLBoostedTreeRegressor.ModelParameters.maxDepth.modify;
}

uint64_t MLRandomForestRegressor.ModelParameters.debugDescription.getter()
{
  return MLRandomForestRegressor.ModelParameters.description.getter();
}

uint64_t MLRandomForestRegressor.ModelParameters.playgroundDescription.getter()
{
  uint64_t v1 = v0;
  uint64_t result = MLRandomForestRegressor.ModelParameters.description.getter();
  v1[3] = (uint64_t)&type metadata for String;
  *uint64_t v1 = result;
  v1[1] = v3;
  return result;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance MLRandomForestRegressor.ModelParameters()
{
  return MLRandomForestRegressor.ModelParameters.description.getter();
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance MLRandomForestRegressor.ModelParameters()
{
  return MLRandomForestRegressor.ModelParameters.debugDescription.getter();
}

uint64_t protocol witness for CustomPlaygroundDisplayConvertible.playgroundDescription.getter in conformance MLRandomForestRegressor.ModelParameters()
{
  return MLRandomForestRegressor.ModelParameters.playgroundDescription.getter();
}

uint64_t sub_D55BB(__m128 a1)
{
  return key path getter for MLRandomForestRegressor.ModelParameters.validationData : MLRandomForestRegressor.ModelParameters(a1);
}

uint64_t sub_D55C5(uint64_t a1)
{
  return key path setter for MLRandomForestRegressor.ModelParameters.validationData : MLRandomForestRegressor.ModelParameters(a1);
}

uint64_t sub_D55CF(uint64_t a1)
{
  return MLRandomForestRegressor.ModelParameters.validation.getter(a1);
}

uint64_t sub_D55E6(uint64_t a1)
{
  return key path setter for MLRandomForestRegressor.ModelParameters.validation : MLRandomForestRegressor.ModelParameters(a1);
}

uint64_t initializeWithCopy for MLRandomForestRegressor.ModelParameters(uint64_t a1, long long *a2)
{
  uint64_t v2 = *((void *)a2 + 3);
  if (v2)
  {
    *(void *)(a1 + 24) = v2;
    (**(void (***)(uint64_t, long long *))(v2 - 8))(a1, a2);
  }
  else
  {
    long long v3 = *a2;
    *(_OWORD *)(a1 + 16) = a2[1];
    *(_OWORD *)a1 = v3;
  }
  *(_OWORD *)(a1 + 32) = a2[2];
  *(_OWORD *)(a1 + 48) = a2[3];
  *(_OWORD *)(a1 + 64) = a2[4];
  *(_OWORD *)(a1 + 80) = a2[5];
  *(_OWORD *)(a1 + 96) = a2[6];
  return a1;
}

uint64_t assignWithCopy for MLRandomForestRegressor.ModelParameters(uint64_t a1, long long *a2)
{
  uint64_t v2 = *((void *)a2 + 3);
  if (!*(void *)(a1 + 24))
  {
    if (v2)
    {
      *(void *)(a1 + 24) = v2;
      (**(void (***)(uint64_t, long long *))(v2 - 8))(a1, a2);
      goto LABEL_8;
    }
LABEL_7:
    long long v3 = *a2;
    *(_OWORD *)(a1 + 16) = a2[1];
    *(_OWORD *)a1 = v3;
    goto LABEL_8;
  }
  if (!v2)
  {
    __swift_destroy_boxed_opaque_existential_1Tm((void *)a1);
    goto LABEL_7;
  }
  __swift_assign_boxed_opaque_existential_0((uint64_t *)a1, (uint64_t *)a2);
LABEL_8:
  *(void *)(a1 + 32) = *((void *)a2 + 4);
  *(void *)(a1 + 40) = *((void *)a2 + 5);
  *(void *)(a1 + 48) = *((void *)a2 + 6);
  *(void *)(a1 + 56) = *((void *)a2 + 7);
  *(void *)(a1 + 64) = *((void *)a2 + 8);
  *(void *)(a1 + 72) = *((void *)a2 + 9);
  *(void *)(a1 + 80) = *((void *)a2 + 10);
  *(void *)(a1 + 88) = *((void *)a2 + 11);
  *(void *)(a1 + 96) = *((void *)a2 + 12);
  *(void *)(a1 + 104) = *((void *)a2 + 13);
  return a1;
}

uint64_t assignWithTake for MLRandomForestRegressor.ModelParameters(uint64_t a1, long long *a2)
{
  if (*(void *)(a1 + 24)) {
    __swift_destroy_boxed_opaque_existential_1Tm((void *)a1);
  }
  long long v2 = *a2;
  *(_OWORD *)(a1 + 16) = a2[1];
  *(_OWORD *)a1 = v2;
  *(_OWORD *)(a1 + 32) = a2[2];
  *(_OWORD *)(a1 + 48) = a2[3];
  *(void *)(a1 + 64) = *((void *)a2 + 8);
  *(_OWORD *)(a1 + 72) = *(long long *)((char *)a2 + 72);
  *(_OWORD *)(a1 + 88) = *(long long *)((char *)a2 + 88);
  *(void *)(a1 + 104) = *((void *)a2 + 13);
  return a1;
}

ValueMetadata *type metadata accessor for MLRandomForestRegressor.ModelParameters()
{
  return &type metadata for MLRandomForestRegressor.ModelParameters;
}

uint64_t static Conv2D.loadLayer(from:layerName:)(uint64_t a1, void *a2, uint64_t a3, double a4, double a5)
{
  v117[0] = v6;
  v117[1] = v5;
  int64_t v9 = *(void *)(*(void *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Tensor?)
                             - 8)
                 + 64);
  uint64_t v10 = alloca(v9);
  uint64_t v11 = alloca(v9);
  uint64_t v126 = v117;
  int v12 = alloca(v9);
  long long v13 = alloca(v9);
  double v132 = COERCE_DOUBLE(v117);
  int64_t v14 = *(void *)(*(void *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TensorShape?)
                              - 8)
                  + 64);
  uint64_t v15 = alloca(v14);
  uint64_t v16 = alloca(v14);
  double v133 = COERCE_DOUBLE(v117);
  uint64_t v129 = type metadata accessor for Tensor(0);
  uint64_t v124 = *(void *)(v129 - 8);
  int64_t v17 = *(void *)(v124 + 64);
  uint64_t v18 = alloca(v17);
  uint64_t v19 = alloca(v17);
  uint64_t v125 = v117;
  uint64_t v20 = alloca(v17);
  double v21 = alloca(v17);
  Float64 v128 = v117;
  uint64_t v130 = type metadata accessor for TensorShape(0);
  uint64_t v131 = *(void *)(v130 - 8);
  int64_t v22 = *(void *)(v131 + 64);
  double v23 = alloca(v22);
  uint64_t v24 = alloca(v22);
  double v134 = COERCE_DOUBLE(v117);
  char v25 = alloca(v22);
  uint64_t v26 = alloca(v22);
  Float64 v123 = v117;
  double v143 = *(double *)&a2;
  double v141 = *(double *)&a2;
  uint64_t v142 = a3;
  swift_bridgeObjectRetain(a3);
  v27._uint64_t countAndFlagsBits = 0x7468676965772ELL;
  v27._char object = (void *)0xE700000000000000;
  String.append(_:)(v27);
  char v28 = v142;
  *(double *)&uint64_t v29 = COERCE_DOUBLE(specialized Dictionary.subscript.getter(*(uint64_t *)&v141, v142, a1));
  swift_bridgeObjectRelease(v28);
  if (*(double *)&v29 == 0.0)
  {
    double v141 = 0.0;
    uint64_t v142 = 0xE000000000000000;
    _StringGuts.grow(_:)(39);
    char v64 = v142;
    swift_bridgeObjectRetain(a3);
    swift_bridgeObjectRelease(v64);
    double v141 = v143;
    uint64_t v142 = a3;
    v65._uint64_t countAndFlagsBits = 0xD000000000000025;
    v65._char object = "predictionWindowSize";
LABEL_22:
    v65._char object = (void *)((unint64_t)v65._object | 0x8000000000000000);
LABEL_28:
    String.append(_:)(v65);
    double v71 = v141;
    uint64_t v72 = v142;
    uint64_t v73 = lazy protocol witness table accessor for type MLCreateError and conformance MLCreateError();
    swift_allocError(&type metadata for MLCreateError, v73, 0, 0);
    *(double *)uint64_t v74 = v71;
    *(void *)(v74 + 8) = v72;
    *(_OWORD *)(v74 + 16) = 0;
    *(_OWORD *)(v74 + 32) = 0;
    *(unsigned char *)(v74 + 48) = 2;
    return swift_willThrow(&type metadata for MLCreateError, v73, v74, v75, v76, v77);
  }
  uint64_t v140 = v29;
  uint64_t v139 = a1;
  double v141 = v143;
  uint64_t v142 = a3;
  swift_bridgeObjectRetain(a3);
  v30._uint64_t countAndFlagsBits = 0x2E7468676965772ELL;
  v30._char object = (void *)0xED00006570616873;
  String.append(_:)(v30);
  char v31 = v142;
  uint64_t v32 = v139;
  *(double *)&uint64_t v33 = COERCE_DOUBLE(specialized Dictionary.subscript.getter(*(uint64_t *)&v141, v142, v139));
  swift_bridgeObjectRelease(v31);
  if (*(double *)&v33 == 0.0)
  {
    swift_bridgeObjectRelease(v140);
    double v141 = 0.0;
    uint64_t v142 = 0xE000000000000000;
    _StringGuts.grow(_:)(45);
    char v66 = v142;
    swift_bridgeObjectRetain(a3);
    swift_bridgeObjectRelease(v66);
    double v141 = v143;
    uint64_t v142 = a3;
    v65._uint64_t countAndFlagsBits = 0xD00000000000002BLL;
    v65._char object = "d in state dictionary";
    goto LABEL_22;
  }
  double v138 = *(double *)&v33;
  double v141 = v143;
  uint64_t v142 = a3;
  uint64_t v136 = a3;
  swift_bridgeObjectRetain(a3);
  v34._uint64_t countAndFlagsBits = 0x736564697274732ELL;
  v34._char object = (void *)0xE800000000000000;
  String.append(_:)(v34);
  char v35 = v142;
  uint64_t v36 = specialized Dictionary.subscript.getter(*(uint64_t *)&v141, v142, v32);
  LOBYTE(v34._countAndFlagsBits) = v35;
  char v37 = LOBYTE(v138);
  swift_bridgeObjectRelease(v34._countAndFlagsBits);
  char v38 = v140;
  if (!v36)
  {
LABEL_24:
    swift_bridgeObjectRelease(v37);
    swift_bridgeObjectRelease(v38);
    double v141 = 0.0;
    uint64_t v142 = 0xE000000000000000;
    _StringGuts.grow(_:)(40);
    char v67 = v142;
    uint64_t v68 = v136;
    swift_bridgeObjectRetain(v136);
    swift_bridgeObjectRelease(v67);
    double v141 = v143;
    uint64_t v142 = v68;
    uint64_t v69 = "t found in state dictionary";
LABEL_27:
    v65._char object = (void *)((unint64_t)v69 | 0x8000000000000000);
    v65._uint64_t countAndFlagsBits = 0xD000000000000026;
    goto LABEL_28;
  }
  if (*(void *)(v36 + 16) != 2)
  {
    swift_bridgeObjectRelease(v36);
    goto LABEL_24;
  }
  double v141 = v143;
  uint64_t v39 = v136;
  uint64_t v142 = v136;
  swift_bridgeObjectRetain(v136);
  v40._uint64_t countAndFlagsBits = 0x676E69646461702ELL;
  v40._char object = (void *)0xE800000000000000;
  String.append(_:)(v40);
  char v41 = v142;
  uint64_t v42 = specialized Dictionary.subscript.getter(*(uint64_t *)&v141, v142, v139);
  swift_bridgeObjectRelease(v41);
  if (!v42)
  {
LABEL_26:
    swift_bridgeObjectRelease(v36);
    swift_bridgeObjectRelease(LOBYTE(v138));
    swift_bridgeObjectRelease(v140);
    double v141 = 0.0;
    uint64_t v142 = 0xE000000000000000;
    _StringGuts.grow(_:)(40);
    char v70 = v142;
    swift_bridgeObjectRetain(v39);
    swift_bridgeObjectRelease(v70);
    double v141 = v143;
    uint64_t v142 = v39;
    uint64_t v69 = "nd in state dictionary";
    goto LABEL_27;
  }
  if (*(void *)(v42 + 16) != 2)
  {
    swift_bridgeObjectRelease(v42);
    goto LABEL_26;
  }
  uint64_t v135 = v42;
  double v141 = v143;
  uint64_t v142 = v39;
  swift_bridgeObjectRetain(v39);
  v43._uint64_t countAndFlagsBits = 0x6F6974616C69642ELL;
  v43._char object = (void *)0xEA0000000000736ELL;
  String.append(_:)(v43);
  char v44 = v142;
  uint64_t v45 = specialized Dictionary.subscript.getter(*(uint64_t *)&v141, v142, v139);
  swift_bridgeObjectRelease(v44);
  uint64_t v46 = v45;
  BOOL v47 = v45 == 0;
  char v48 = v140;
  char v49 = LOBYTE(v138);
  if (v47)
  {
LABEL_30:
    swift_bridgeObjectRelease(v135);
    swift_bridgeObjectRelease(v36);
    swift_bridgeObjectRelease(v49);
    swift_bridgeObjectRelease(v48);
    double v141 = 0.0;
    uint64_t v142 = 0xE000000000000000;
    _StringGuts.grow(_:)(42);
    char v79 = v142;
    swift_bridgeObjectRetain(v39);
    swift_bridgeObjectRelease(v79);
    double v141 = v143;
    uint64_t v142 = v39;
    v65._uint64_t countAndFlagsBits = 0xD000000000000028;
    v65._char object = "nd in state dictionary";
    goto LABEL_22;
  }
  if (*(void *)(v46 + 16) != 2)
  {
    swift_bridgeObjectRelease(v46);
    goto LABEL_30;
  }
  uint64_t v127 = v46;
  double v141 = v143;
  uint64_t v142 = v39;
  swift_bridgeObjectRetain(v39);
  v50._char object = (char *)&loc_EFE14 - 0x14FFFFFFFF9A8F9FLL;
  v50._uint64_t countAndFlagsBits = 0x6F4370756F72672ELL;
  String.append(_:)(v50);
  char v51 = v142;
  uint64_t v52 = specialized Dictionary.subscript.getter(*(uint64_t *)&v141, v142, v139);
  swift_bridgeObjectRelease(v51);
  uint64_t v53 = v52;
  char v54 = LOBYTE(v138);
  char v55 = v140;
  if (!v53)
  {
LABEL_32:
    swift_bridgeObjectRelease(v127);
    swift_bridgeObjectRelease(v135);
    swift_bridgeObjectRelease(v36);
    swift_bridgeObjectRelease(v54);
    swift_bridgeObjectRelease(v55);
    double v141 = 0.0;
    uint64_t v142 = 0xE000000000000000;
    _StringGuts.grow(_:)(43);
    char v80 = v142;
    swift_bridgeObjectRetain(v39);
    swift_bridgeObjectRelease(v80);
    double v141 = v143;
    uint64_t v142 = v39;
    v65._uint64_t countAndFlagsBits = 0xD000000000000029;
    v65._char object = "ound in state dictionary";
    goto LABEL_22;
  }
  if (*(void *)(v53 + 16) != 1)
  {
    swift_bridgeObjectRelease(v53);
    goto LABEL_32;
  }
  uint64_t v119 = v53;
  int64_t v56 = *(void *)(*(void *)&v138 + 16);
  uint64_t v118 = v36;
  if (v56)
  {
    double v141 = COERCE_DOUBLE(_swiftEmptyArrayStorage);
    uint64_t v57 = 0;
    int64_t v137 = v56;
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v56, 0);
    int64_t v58 = v137;
    double v59 = v141;
    a4 = -9.223372036854778e18;
    a5 = 9.223372036854776e18;
    do
    {
      double v60 = *(double *)(*(void *)&v138 + 8 * v57 + 32);
      if ((~*(void *)&v60 & 0x7FF0000000000000) == 0) {
        BUG();
      }
      if (v60 <= -9.223372036854778e18) {
        BUG();
      }
      if (v60 >= 9.223372036854776e18) {
        BUG();
      }
      double v141 = v59;
      unint64_t v61 = *(void *)(*(void *)&v59 + 16);
      unint64_t v62 = *(void *)(*(void *)&v59 + 24);
      int64_t v63 = v61 + 1;
      if (v62 >> 1 <= v61)
      {
        unint64_t v121 = *(void *)(*(void *)&v59 + 16);
        double v120 = v60;
        int64_t v122 = v61 + 1;
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v62 >= 2, v63, 1);
        int64_t v63 = v122;
        unint64_t v61 = v121;
        double v60 = v120;
        a5 = 9.223372036854776e18;
        a4 = -9.223372036854778e18;
        int64_t v58 = v137;
        double v59 = v141;
      }
      ++v57;
      *(void *)(*(void *)&v59 + 16) = v63;
      *(void *)(*(void *)&v59 + 8 * v61 + 32) = (int)v60;
    }
    while (v58 != v57);
    swift_bridgeObjectRelease(LOBYTE(v138));
  }
  else
  {
    swift_bridgeObjectRelease(LOBYTE(v138));
    double v59 = COERCE_DOUBLE(_swiftEmptyArrayStorage);
  }
  long long v81 = v123;
  TensorShape.init(_:)(*(void *)&v59, a4, a5);
  uint64_t v82 = *(void *)&v133;
  uint64_t v83 = v130;
  double v138 = *(double *)(v131 + 16);
  (*(void (**)(void, void *, uint64_t))&v138)(*(void *)&v133, v81, v130);
  __swift_storeEnumTagSinglePayload(v82, 0, 1, v83);
  LOBYTE(v83) = v140;
  Array<A>.floatTensor(shape:)(v82, v140);
  swift_bridgeObjectRelease(v83);
  outlined destroy of Either<LogisticRegressionClassifier<Float, String>, FullyConnectedNetworkClassifier<Float, String>>(v82, &demangling cache variable for type metadata for TensorShape?);
  uint64_t v84 = *(void *)&v132;
  __swift_storeEnumTagSinglePayload(*(uint64_t *)&v132, 1, 1, v129);
  double v141 = v143;
  uint64_t v142 = v39;
  swift_bridgeObjectRetain(v39);
  v85._uint64_t countAndFlagsBits = 0x736169622ELL;
  v85._char object = (void *)0xE500000000000000;
  String.append(_:)(v85);
  LOBYTE(v81) = v142;
  uint64_t v86 = v139;
  *(double *)&uint64_t v87 = COERCE_DOUBLE(specialized Dictionary.subscript.getter(*(uint64_t *)&v141, v142, v139));
  swift_bridgeObjectRelease((_BYTE)v81);
  uint64_t v140 = v87;
  if (*(double *)&v87 != 0.0)
  {
    double v141 = v143;
    uint64_t v142 = v136;
    swift_bridgeObjectRetain(v136);
    v88._uint64_t countAndFlagsBits = 0x68732E736169622ELL;
    v88._char object = (void *)0xEB00000000657061;
    String.append(_:)(v88);
    char v89 = v142;
    *(double *)&uint64_t v90 = COERCE_DOUBLE(specialized Dictionary.subscript.getter(*(uint64_t *)&v141, v142, v86));
    swift_bridgeObjectRelease(v89);
    if (*(double *)&v90 == 0.0)
    {
      swift_bridgeObjectRelease(v140);
    }
    else
    {
      uint64_t v91 = v90;
      int64_t v92 = *(int64_t *)(v90 + 16);
      if (*(double *)&v92 == 0.0)
      {
        swift_bridgeObjectRelease(v90);
        double v96 = COERCE_DOUBLE(_swiftEmptyArrayStorage);
      }
      else
      {
        double v141 = COERCE_DOUBLE(_swiftEmptyArrayStorage);
        uint64_t v93 = 0;
        uint64_t v139 = v91;
        double v143 = *(double *)&v92;
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v92, 0);
        double v94 = v143;
        uint64_t v95 = v139;
        double v96 = v141;
        a4 = -9.223372036854778e18;
        a5 = 9.223372036854776e18;
        int v97 = 1;
        do
        {
          double v98 = *(double *)(v95 + 8 * v93 + 32);
          if ((~*(void *)&v98 & 0x7FF0000000000000) == 0) {
            BUG();
          }
          if (v98 <= -9.223372036854778e18) {
            BUG();
          }
          if (v98 >= 9.223372036854776e18) {
            BUG();
          }
          double v141 = v96;
          unint64_t v99 = *(void *)(*(void *)&v96 + 16);
          unint64_t v100 = *(void *)(*(void *)&v96 + 24);
          int64_t v101 = v99 + 1;
          if (v100 >> 1 <= v99)
          {
            int v102 = v97;
            *(double *)&uint64_t v136 = v98;
            int64_t v137 = v99 + 1;
            specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v100 >= 2, v101, v97);
            int64_t v101 = v137;
            double v98 = *(double *)&v136;
            int v97 = v102;
            a5 = 9.223372036854776e18;
            a4 = -9.223372036854778e18;
            double v94 = v143;
            uint64_t v95 = v139;
            double v96 = v141;
          }
          ++v93;
          *(void *)(*(void *)&v96 + 16) = v101;
          *(void *)(*(void *)&v96 + 8 * v99 + 32) = (int)v98;
        }
        while (*(void *)&v94 != v93);
        swift_bridgeObjectRelease(v95);
      }
      double v103 = v134;
      TensorShape.init(_:)(*(void *)&v96, a4, a5);
      uint64_t v104 = *(void *)&v133;
      uint64_t v105 = v130;
      (*(void (**)(void, double, uint64_t))&v138)(*(void *)&v133, COERCE_DOUBLE(*(void *)&v103), v130);
      __swift_storeEnumTagSinglePayload(v104, 0, 1, v105);
      uint64_t v106 = (uint64_t)v126;
      LOBYTE(v103) = v140;
      Array<A>.floatTensor(shape:)(v104, v140);
      swift_bridgeObjectRelease(LOBYTE(v103));
      outlined destroy of Either<LogisticRegressionClassifier<Float, String>, FullyConnectedNetworkClassifier<Float, String>>(v104, &demangling cache variable for type metadata for TensorShape?);
      (*(void (**)(double, uint64_t))(v131 + 8))(COERCE_DOUBLE(*(void *)&v134), v105);
      uint64_t v84 = *(void *)&v132;
      outlined destroy of Either<LogisticRegressionClassifier<Float, String>, FullyConnectedNetworkClassifier<Float, String>>(*(uint64_t *)&v132, &demangling cache variable for type metadata for Tensor?);
      __swift_storeEnumTagSinglePayload(v106, 0, 1, v129);
      outlined init with take of Tensor?(v106, v84);
    }
  }
  uint64_t v107 = v129;
  (*(void (**)(void *, void *, uint64_t))(v124 + 16))(v125, v128, v129);
  uint64_t v108 = (uint64_t)v126;
  outlined init with copy of Tensor?(v84, (uint64_t)v126);
  unint64_t v109 = *(void *)(v118 + 16);
  if (!v109) {
    BUG();
  }
  double v110 = *(double *)(v118 + 32);
  if ((~*(void *)&v110 & 0x7FF0000000000000) == 0) {
    BUG();
  }
  if (v110 <= -9.223372036854778e18) {
    BUG();
  }
  if (v110 >= 9.223372036854776e18) {
    BUG();
  }
  double v132 = *(double *)(v118 + 32);
  if (v109 < 2) {
    BUG();
  }
  double v143 = *(double *)(v118 + 40);
  swift_bridgeObjectRelease(v118);
  if ((~*(void *)&v143 & 0x7FF0000000000000) == 0) {
    BUG();
  }
  if (v143 <= -9.223372036854778e18) {
    BUG();
  }
  if (v143 >= 9.223372036854776e18) {
    BUG();
  }
  unint64_t v111 = *(void *)(v135 + 16);
  if (!v111) {
    BUG();
  }
  double v112 = *(double *)(v135 + 32);
  if ((~*(void *)&v112 & 0x7FF0000000000000) == 0) {
    BUG();
  }
  if (v112 <= -9.223372036854778e18) {
    BUG();
  }
  if (v112 >= 9.223372036854776e18) {
    BUG();
  }
  double v133 = *(double *)(v135 + 32);
  if (v111 < 2) {
    BUG();
  }
  uint64_t v139 = *(uint64_t *)(v135 + 40);
  swift_bridgeObjectRelease(v135);
  if ((~v139 & 0x7FF0000000000000) == 0) {
    BUG();
  }
  if (*(double *)&v139 <= -9.223372036854778e18) {
    BUG();
  }
  if (*(double *)&v139 >= 9.223372036854776e18) {
    BUG();
  }
  unint64_t v113 = *(void *)(v127 + 16);
  if (!v113) {
    BUG();
  }
  double v114 = *(double *)(v127 + 32);
  if ((~*(void *)&v114 & 0x7FF0000000000000) == 0) {
    BUG();
  }
  if (v114 <= -9.223372036854778e18) {
    BUG();
  }
  if (v114 >= 9.223372036854776e18) {
    BUG();
  }
  double v134 = *(double *)(v127 + 32);
  if (v113 < 2) {
    BUG();
  }
  uint64_t v140 = *(uint64_t *)(v127 + 40);
  swift_bridgeObjectRelease(v127);
  if ((~v140 & 0x7FF0000000000000) == 0) {
    BUG();
  }
  if (*(double *)&v140 <= -9.223372036854778e18) {
    BUG();
  }
  if (*(double *)&v140 >= 9.223372036854776e18) {
    BUG();
  }
  if (!*(void *)(v119 + 16)) {
    BUG();
  }
  double v138 = *(double *)(v119 + 32);
  swift_bridgeObjectRelease(v119);
  if ((~*(void *)&v138 & 0x7FF0000000000000) == 0) {
    BUG();
  }
  double v115 = v132;
  double v116 = v133;
  if (v138 <= -9.223372036854778e18) {
    BUG();
  }
  if (v138 >= 9.223372036854776e18) {
    BUG();
  }
  Conv2D.init(weight:bias:stride:padding:dilation:groupCount:)(v125, v108, (int)v132, (int)v143, (int)v133, (int)*(double *)&v139, (int)v134, (int)*(double *)&v140, (int)v138);
  outlined destroy of Either<LogisticRegressionClassifier<Float, String>, FullyConnectedNetworkClassifier<Float, String>>(v84, &demangling cache variable for type metadata for Tensor?);
  (*(void (**)(void *, uint64_t, double, double, double))(v124 + 8))(v128, v107, v115, 9.223372036854776e18, v116);
  return (*(uint64_t (**)(void *, uint64_t))(v131 + 8))(v123, v130);
}

BOOL AnalyticsReporter.init()()
{
  uint64_t v0 = objc_opt_self(NSUserDefaults);
  id v1 = [v0 standardUserDefaults];
  id v2 = v1;
  NSString v3 = String._bridgeToObjectiveC()();
  unsigned __int8 v4 = [v2 BOOLForKey:v3];

  return v4 != 0;
}

Swift::Bool __swiftcall AnalyticsReporter.reportDataMetrics(model:metricName:quantity:)(CreateML::ModelType model, Swift::String metricName, Swift::Float quantity)
{
  Swift::Float v21 = quantity;
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, NSObject)>);
  uint64_t inited = (NSNumber *)swift_initStackObject(v3, v20);
  inited[2].super.super.Class isa = (Class)&dword_4;
  inited[3].super.super.Class isa = (Class)&dword_8;
  inited[4].super.super.Class isa = (Class)0x6574616C706D6554;
  inited[5].super.super.Class isa = (Class)0xE800000000000000;
  ModelType.description.getter(model);
  uint64_t v6 = v5;
  char v7 = (objc_class *)String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(v6);
  inited[6].super.super.Class isa = v7;
  inited[7].super.super.Class isa = (Class)0x614E63697274654DLL;
  inited[8].super.super.Class isa = (Class)0xEA0000000000656DLL;
  inited[9].super.super.Class isa = (Class)String._bridgeToObjectiveC()();
  inited[10].super.super.Class isa = (Class)0x797469746E617551;
  inited[11].super.super.Class isa = (Class)0xE800000000000000;
  *(void *)&double v8 = LODWORD(v21);
  inited[12].super.super.Class isa = Float._bridgeToObjectiveC()().super.super.isa;
  inited[13].super.super.Class isa = (Class)0x656C646E7542;
  inited[14].super.super.Class isa = (Class)0xE600000000000000;
  int64_t v9 = objc_opt_self(NSBundle);
  id v10 = [v9 mainBundle:v8];
  id v11 = v10;
  outlined bridged method (ob) of @objc NSBundle.bundleIdentifier.getter(v11);
  long long v13 = "found in state dictionary" + 0x8000000000000000;
  if (v12) {
    long long v13 = v12;
  }
  int64_t v14 = (objc_class *)String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(v13);
  inited[15].super.super.Class isa = v14;
  uint64_t v15 = type metadata accessor for NSObject();
  v16._rawValue = (void *)Dictionary.init(dictionaryLiteral:)(inited, &type metadata for String, v15, &protocol witness table for String);
  v17._char object = "ml.parameter_setting" + 0x8000000000000000;
  v17._uint64_t countAndFlagsBits = 0xD00000000000001FLL;
  Swift::Bool v18 = AnalyticsReporter.analyticsSendEventWrapper(_:_:)(v17, v16);
  swift_bridgeObjectRelease(v16._rawValue);
  return v18;
}

Swift::Bool __swiftcall AnalyticsReporter.reportDataMetrics(model:metricName:quantity:)(CreateML::ModelType model, Swift::String metricName, Swift::Int quantity)
{
  Swift::Int v21 = quantity;
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, NSObject)>);
  uint64_t inited = (NSNumber *)swift_initStackObject(v3, v20);
  inited[2].super.super.Class isa = (Class)&dword_4;
  inited[3].super.super.Class isa = (Class)&dword_8;
  inited[4].super.super.Class isa = (Class)0x6574616C706D6554;
  inited[5].super.super.Class isa = (Class)0xE800000000000000;
  ModelType.description.getter(model);
  char v6 = v5;
  char v7 = (objc_class *)String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(v6);
  inited[6].super.super.Class isa = v7;
  inited[7].super.super.Class isa = (Class)0x614E63697274654DLL;
  inited[8].super.super.Class isa = (Class)0xEA0000000000656DLL;
  inited[9].super.super.Class isa = (Class)String._bridgeToObjectiveC()();
  inited[10].super.super.Class isa = (Class)0x797469746E617551;
  inited[11].super.super.Class isa = (Class)0xE800000000000000;
  inited[12].super.super.Class isa = Int._bridgeToObjectiveC()().super.super.isa;
  inited[13].super.super.Class isa = (Class)0x656C646E7542;
  inited[14].super.super.Class isa = (Class)0xE600000000000000;
  double v8 = objc_opt_self(NSBundle);
  id v9 = [v8 mainBundle];
  id v10 = v9;
  outlined bridged method (ob) of @objc NSBundle.bundleIdentifier.getter(v10);
  int v12 = "found in state dictionary" + 0x8000000000000000;
  if (v11) {
    LOBYTE(v12) = v11;
  }
  long long v13 = (objc_class *)String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease((_BYTE)v12);
  inited[15].super.super.Class isa = v13;
  uint64_t v14 = type metadata accessor for NSObject();
  v15._char rawValue = (void *)Dictionary.init(dictionaryLiteral:)(inited, &type metadata for String, v14, &protocol witness table for String);
  char rawValue = (char)v15._rawValue;
  v17._char object = "ml.parameter_setting" + 0x8000000000000000;
  v17._uint64_t countAndFlagsBits = 0xD00000000000001FLL;
  Swift::Bool v18 = AnalyticsReporter.analyticsSendEventWrapper(_:_:)(v17, v15);
  swift_bridgeObjectRelease(rawValue);
  return v18;
}

Swift::Bool __swiftcall AnalyticsReporter.reportParameterSettings(model:parameterName:parameterValue:)(CreateML::ModelType model, Swift::String parameterName, Swift::String parameterValue)
{
  char object = parameterValue._object;
  uint64_t countAndFlagsBits = parameterValue._countAndFlagsBits;
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, NSObject)>);
  uint64_t inited = swift_initStackObject(v3, v20);
  *(void *)(inited + 16) = 4;
  *(void *)(inited + 24) = 8;
  *(void *)(inited + 32) = 0x6574616C706D6554;
  *(void *)(inited + 40) = 0xE800000000000000;
  ModelType.description.getter(model);
  char v6 = v5;
  NSString v7 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(v6);
  *(void *)(inited + 48) = v7;
  strcpy((char *)(inited + 56), "ParameterName");
  *(_WORD *)(inited + 70) = -4864;
  *(void *)(inited + 72) = String._bridgeToObjectiveC()();
  strcpy((char *)(inited + 80), "ParameterValue");
  *(unsigned char *)(inited + 95) = -18;
  *(void *)(inited + 96) = String._bridgeToObjectiveC()();
  *(void *)(inited + 104) = 0x656C646E7542;
  *(void *)(inited + 112) = 0xE600000000000000;
  double v8 = objc_opt_self(NSBundle);
  id v9 = [v8 mainBundle];
  id v10 = v9;
  outlined bridged method (ob) of @objc NSBundle.bundleIdentifier.getter(v10);
  int v12 = "found in state dictionary" + 0x8000000000000000;
  if (v11) {
    LOBYTE(v12) = v11;
  }
  NSString v13 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease((_BYTE)v12);
  *(void *)(inited + 120) = v13;
  uint64_t v14 = type metadata accessor for NSObject();
  v15._char rawValue = (void *)Dictionary.init(dictionaryLiteral:)(inited, &type metadata for String, v14, &protocol witness table for String);
  char rawValue = (char)v15._rawValue;
  v17._char object = "ml.template_used" + 0x8000000000000000;
  v17._uint64_t countAndFlagsBits = 0xD000000000000024;
  Swift::Bool v18 = AnalyticsReporter.analyticsSendEventWrapper(_:_:)(v17, v15);
  swift_bridgeObjectRelease(rawValue);
  return v18;
}

Swift::Bool __swiftcall AnalyticsReporter.analyticsSendEventWrapper(_:_:)(Swift::String a1, Swift::OpaquePointer a2)
{
  NSString v3 = String._bridgeToObjectiveC()();
  unsigned __int8 v4 = (Swift::OpaquePointer *)swift_allocObject(&unk_398B28, 24, 7);
  v4[2]._char rawValue = a2._rawValue;
  aBlock[4] = partial apply for closure #1 in AnalyticsReporter.analyticsSendEventWrapper(_:_:);
  aBlock[5] = v4;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = thunk for @escaping @callee_guaranteed () -> (@owned [String : NSObject]?);
  aBlock[3] = &block_descriptor_2;
  char v5 = _Block_copy(aBlock);
  swift_bridgeObjectRetain(a2._rawValue);
  swift_release();
  LOBYTE(a2._rawValue) = AnalyticsSendEventLazy(v3, v5);
  _Block_release(v5);

  return (Swift::Bool)a2._rawValue;
}

uint64_t AnalyticsReporter.reportTemplateUsed(model:mode:)(Swift::String a1)
{
  char countAndFlagsBits = a1._countAndFlagsBits;
  unint64_t v25 = ModelType.description.getter(a1._countAndFlagsBits);
  uint64_t v26 = v2;
  if (LOBYTE(a1._object) != 2)
  {
    a1._char countAndFlagsBits = 0x68636E7953202D20;
    if (((uint64_t)a1._object & 1) == 0) {
      a1._char countAndFlagsBits = 0x636E797341202D20;
    }
    unint64_t v3 = 0xEE0073756F6E6F72;
    if (((uint64_t)a1._object & 1) == 0) {
      unint64_t v3 = 0xEF73756F6E6F7268;
    }
    a1._char object = (void *)v3;
    String.append(_:)(a1);
    swift_bridgeObjectRelease(v3);
  }
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, NSObject)>);
  uint64_t inited = (void *)swift_initStackObject(v4, v24);
  inited[2] = 3;
  inited[3] = 6;
  inited[4] = 0x6574616C706D6554;
  inited[5] = 0xE800000000000000;
  ModelType.description.getter(countAndFlagsBits);
  char v7 = v6;
  NSString v8 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(v7);
  inited[6] = v8;
  inited[7] = 0x656C646E7542;
  inited[8] = 0xE600000000000000;
  id v9 = objc_opt_self(NSBundle);
  id v10 = [v9 mainBundle];
  id v11 = v10;
  outlined bridged method (ob) of @objc NSBundle.bundleIdentifier.getter(v11);
  NSString v13 = "found in state dictionary" + 0x8000000000000000;
  if (v12) {
    LOBYTE(v13) = v12;
  }
  NSString v14 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease((_BYTE)v13);
  inited[9] = v14;
  inited[10] = 0x6574616C706D6554;
  inited[11] = 0xEF65736F62726556;
  char v15 = v26;
  NSString v16 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(v15);
  inited[12] = v16;
  uint64_t v17 = type metadata accessor for NSObject();
  v18._char rawValue = (void *)Dictionary.init(dictionaryLiteral:)(inited, &type metadata for String, v17, &protocol witness table for String);
  char rawValue = (char)v18._rawValue;
  v20._char object = "@\"NSDictionary\"8@?0" + 0x8000000000000000;
  v20._char countAndFlagsBits = 0xD000000000000020;
  LOBYTE(v21) = AnalyticsReporter.analyticsSendEventWrapper(_:_:)(v20, v18);
  unsigned int v22 = v21;
  swift_bridgeObjectRelease(rawValue);
  return v22;
}

Swift::Bool __swiftcall AnalyticsReporter.reportEventDuration(model:task:startTime:)(CreateML::ModelType model, Swift::String task, Swift::Double startTime)
{
  double v22 = CFAbsoluteTimeGetCurrent() - startTime;
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, NSObject)>);
  uint64_t inited = (NSNumber *)swift_initStackObject(v3, v21);
  inited[2].super.super.Class isa = (Class)&dword_4;
  inited[3].super.super.Class isa = (Class)&dword_8;
  inited[4].super.super.Class isa = (Class)0x6574616C706D6554;
  inited[5].super.super.Class isa = (Class)0xE800000000000000;
  ModelType.description.getter(model);
  char v6 = v5;
  char v7 = (objc_class *)String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(v6);
  inited[6].super.super.Class isa = v7;
  inited[7].super.super.Class isa = (Class)1802723668;
  inited[8].super.super.Class isa = (Class)0xE400000000000000;
  inited[9].super.super.Class isa = (Class)String._bridgeToObjectiveC()();
  inited[10].super.super.Class isa = (Class)0x6E6F697461727544;
  inited[11].super.super.Class isa = (Class)0xE800000000000000;
  double v8 = v22;
  inited[12].super.super.Class isa = Double._bridgeToObjectiveC()().super.super.isa;
  inited[13].super.super.Class isa = (Class)0x656C646E7542;
  inited[14].super.super.Class isa = (Class)0xE600000000000000;
  id v9 = objc_opt_self(NSBundle);
  id v10 = [v9 mainBundle:v8];
  id v11 = v10;
  outlined bridged method (ob) of @objc NSBundle.bundleIdentifier.getter(v11);
  NSString v13 = "found in state dictionary" + 0x8000000000000000;
  if (v12) {
    LOBYTE(v13) = v12;
  }
  NSString v14 = (objc_class *)String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease((_BYTE)v13);
  inited[15].super.super.Class isa = v14;
  uint64_t v15 = type metadata accessor for NSObject();
  v16._char rawValue = (void *)Dictionary.init(dictionaryLiteral:)(inited, &type metadata for String, v15, &protocol witness table for String);
  char rawValue = (char)v16._rawValue;
  v18._char object = "Indeterminate bundle" + 0x8000000000000000;
  v18._char countAndFlagsBits = 0xD000000000000021;
  Swift::Bool v19 = AnalyticsReporter.analyticsSendEventWrapper(_:_:)(v18, v16);
  swift_bridgeObjectRelease(rawValue);
  return v19;
}

uint64_t outlined bridged method (ob) of @objc NSBundle.bundleIdentifier.getter(id a1)
{
  id v1 = [a1 bundleIdentifier];
  id v2 = v1;

  if (!v2) {
    return 0;
  }
  uint64_t v3 = static String._unconditionallyBridgeFromObjectiveC(_:)(v2);

  return v3;
}

uint64_t sub_D716E()
{
  swift_bridgeObjectRelease(*(void *)(v0 + 16));
  return swift_deallocObject(v0, 24, 7);
}

uint64_t partial apply for closure #1 in AnalyticsReporter.analyticsSendEventWrapper(_:_:)()
{
  return swift_bridgeObjectRetain(*(void *)(v0 + 16));
}

uint64_t block_destroy_helper_2(uint64_t a1)
{
  return swift_release(*(void *)(a1 + 40));
}

{
  return block_destroy_helper_6(a1);
}

void *specialized DataFrame.findColumn<A>(defaultName:type:where:)(Swift::String a1, void *a2)
{
  uint64_t v98 = v2;
  char countAndFlagsBits = (void *)a1._countAndFlagsBits;
  uint64_t v119 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Column<[Any?]>);
  uint64_t v5 = *(void *)(v119 - 8);
  int64_t v6 = *(void *)(v5 + 64);
  char v7 = alloca(v6);
  double v8 = alloca(v6);
  double v110 = &v94;
  id v9 = alloca(v6);
  id v10 = alloca(v6);
  unint64_t v111 = &v94;
  id v11 = alloca(v6);
  uint64_t v12 = alloca(v6);
  unint64_t v100 = &v94;
  NSString v13 = alloca(v6);
  NSString v14 = alloca(v6);
  unint64_t v99 = &v94;
  int64_t v15 = *(void *)(*(void *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AnyColumn?)
                              - 8)
                  + 64);
  Swift::OpaquePointer v16 = alloca(v15);
  uint64_t v17 = alloca(v15);
  uint64_t v117 = &v94;
  uint64_t v114 = type metadata accessor for AnyColumn(0);
  uint64_t v120 = *(void *)(v114 - 8);
  int64_t v18 = *(void *)(v120 + 64);
  Swift::Bool v19 = alloca(v18);
  Swift::String v20 = alloca(v18);
  uint64_t v104 = &v94;
  unsigned int v21 = alloca(v18);
  double v22 = alloca(v18);
  double v115 = &v94;
  double v23 = alloca(v18);
  uint64_t v24 = alloca(v18);
  unint64_t v109 = &v94;
  v106._char countAndFlagsBits = a1._countAndFlagsBits;
  char object = a1._object;
  Swift::Int_optional v25 = DataFrame.indexOfColumn(_:)(a1);
  uint64_t v121 = v5;
  v106._char object = a2;
  if (!v25.is_nil)
  {
    Swift::Int value = v25.value;
    uint64_t v27 = DataFrame.columns.getter(a1._countAndFlagsBits, a1._object);
    if (value < 0) {
      BUG();
    }
    if ((unint64_t)value >= *(void *)(v27 + 16)) {
      BUG();
    }
    uint64_t v28 = v120;
    uint64_t v29 = ((*(unsigned __int8 *)(v120 + 80) + 32) & ~*(unsigned __int8 *)(v120 + 80))
        + v27
        + *(void *)(v120 + 72) * value;
    Swift::String v30 = v109;
    uint64_t v118 = (char *)v27;
    char countAndFlagsBits = (void *)v114;
    (*(void (**)(uint64_t *, uint64_t, uint64_t))(v120 + 16))(v109, v29, v114);
    swift_bridgeObjectRelease((_BYTE)v118);
    uint64_t v31 = AnyColumn.wrappedElementType.getter();
    a1._char object = countAndFlagsBits;
    (*(void (**)(uint64_t *, void *))(v28 + 8))(v30, countAndFlagsBits);
    a1._char countAndFlagsBits = (uint64_t)&demangling cache variable for type metadata for [Any?];
    uint64_t v32 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [Any?]);
    uint64_t v5 = v121;
    if (v31 == v32)
    {
      swift_bridgeObjectRetain((_BYTE)object);
      return (void *)v106._countAndFlagsBits;
    }
  }
  if (DataFrame.shape.getter(a1._countAndFlagsBits) <= 0)
  {
    uint64_t v59 = lazy protocol witness table accessor for type MLCreateError and conformance MLCreateError();
    swift_allocError(&type metadata for MLCreateError, v59, 0, 0);
    *(void *)uint64_t v60 = 0xD00000000000001ALL;
    char v64 = "not in Data Table." + 0x8000000000000000;
LABEL_77:
    *(void *)(v60 + 8) = v64;
    *(_OWORD *)(v60 + 16) = 0;
    *(_OWORD *)(v60 + 32) = 0;
    *(unsigned char *)(v60 + 48) = 1;
    swift_willThrow(&type metadata for MLCreateError, v59, v60, v61, v62, v63);
    return countAndFlagsBits;
  }
  uint64_t v33 = DataFrame.columns.getter(a1._countAndFlagsBits, a1._object);
  *(void *)&v107[0] = _swiftEmptyArrayStorage;
  int v97 = *(char **)(v33 + 16);
  uint64_t v34 = v114;
  uint64_t v35 = (uint64_t)v117;
  uint64_t v113 = v33;
  if (v97)
  {
    unint64_t v36 = 0;
    while (1)
    {
      if (v36 >= *(void *)(v33 + 16)) {
        BUG();
      }
      uint64_t v37 = (*(unsigned __int8 *)(v120 + 80) + 32) & ~*(unsigned __int8 *)(v120 + 80);
      double v116 = *(char **)(v120 + 72);
      uint64_t v118 = (char *)v36;
      uint64_t v38 = v35;
      (*(void (**)(uint64_t, unint64_t, uint64_t))(v120 + 16))(v35, v37 + v33 + v36 * (void)v116, v34);
      __swift_storeEnumTagSinglePayload(v35, 0, 1, v34);
      if (__swift_getEnumTagSinglePayload(v35, 1, v34) == 1) {
        break;
      }
      int64_t v122 = *(void (**)(uint64_t *, uint64_t, uint64_t))(v120 + 32);
      v122(v115, v35, v34);
      uint64_t v39 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [Any?]);
      Swift::String v40 = v115;
      uint64_t v112 = v39;
      if (AnyColumn.wrappedElementType.getter() == v39)
      {
        char v41 = (void (*)(uint64_t, uint64_t *, uint64_t))v122;
        v122(v104, (uint64_t)v40, v34);
        uint64_t v42 = *(void *)&v107[0];
        char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*(void *)&v107[0]);
        char v44 = v41;
        if (!isUniquelyReferenced_nonNull_native)
        {
          specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(void *)(v42 + 16) + 1, 1);
          char v44 = v41;
          uint64_t v42 = *(void *)&v107[0];
        }
        unint64_t v45 = *(void *)(v42 + 16);
        unint64_t v46 = v45 + 1;
        if (*(void *)(v42 + 24) >> 1 <= v45)
        {
          specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(*(void *)(v42 + 24) >= 2uLL, v45 + 1, 1);
          unint64_t v46 = v45 + 1;
          char v44 = (void (*)(uint64_t, uint64_t *, uint64_t))v122;
          uint64_t v42 = *(void *)&v107[0];
        }
        *(void *)(v42 + 16) = v46;
        uint64_t v47 = v42 + v37 + (void)v116 * v45;
        uint64_t v48 = v114;
        v44(v47, v104, v114);
        *(void *)&v107[0] = v42;
        uint64_t v34 = v48;
        uint64_t v5 = v121;
      }
      else
      {
        (*(void (**)(uint64_t *, uint64_t))(v120 + 8))(v40, v34);
      }
      unint64_t v36 = (unint64_t)(v118 + 1);
      uint64_t v35 = (uint64_t)v117;
      uint64_t v33 = v113;
      if (v97 == v118 + 1) {
        goto LABEL_18;
      }
    }
  }
  else
  {
LABEL_18:
    uint64_t v38 = v35;
    __swift_storeEnumTagSinglePayload(v35, 1, 1, v34);
  }
  swift_bridgeObjectRelease(v113);
  _s11TabularData9AnyColumnVSgWOhTm_1(v38, &demangling cache variable for type metadata for AnyColumn?);
  char v49 = *(uint64_t **)&v107[0];
  int64_t v50 = *(void *)(*(void *)&v107[0] + 16);
  if (v50)
  {
    *(void *)&v107[0] = _swiftEmptyArrayStorage;
    double v115 = (uint64_t *)v50;
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v50, 0);
    uint64_t v118 = (char *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [Any?]);
    uint64_t v51 = (*(unsigned __int8 *)(v120 + 80) + 32) & ~*(unsigned __int8 *)(v120 + 80);
    uint64_t v117 = v49;
    uint64_t v52 = (char *)v49 + v51;
    uint64_t v112 = *(void *)(v120 + 16);
    double v116 = *(char **)(v120 + 72);
    do
    {
      uint64_t v53 = v109;
      uint64_t v54 = v114;
      ((void (*)(uint64_t *, char *, uint64_t))v112)(v109, v52, v114);
      double v55 = AnyColumn.assumingType<A>(_:)(v118, v118);
      (*(void (**)(uint64_t *, uint64_t, double))(v120 + 8))(v53, v54, v55);
      int64_t v56 = *(char **)&v107[0];
      if (!swift_isUniquelyReferenced_nonNull_native(*(void *)&v107[0]))
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, *((void *)v56 + 2) + 1, 1);
        int64_t v56 = *(char **)&v107[0];
      }
      unint64_t v57 = *((void *)v56 + 2);
      if (*((void *)v56 + 3) >> 1 <= v57)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(*((void *)v56 + 3) >= 2uLL, v57 + 1, 1);
        int64_t v56 = *(char **)&v107[0];
      }
      *((void *)v56 + 2) = v57 + 1;
      uint64_t v5 = v121;
      (*(void (**)(char *, uint64_t *, uint64_t))(v121 + 32))(&v56[((*(unsigned __int8 *)(v121 + 80) + 32) & ~*(unsigned __int8 *)(v121 + 80)) + *(void *)(v121 + 72) * v57], v110, v119);
      uint64_t v52 = &v52[(void)v116];
      double v115 = (uint64_t *)((char *)v115 - 1);
    }
    while (v115);
    int64_t v122 = (void (*)(uint64_t *, uint64_t, uint64_t))v56;
    int64_t v58 = v117;
    swift_release();
  }
  else
  {
    int64_t v58 = *(uint64_t **)&v107[0];
    swift_release();
    int64_t v122 = (void (*)(uint64_t *, uint64_t, uint64_t))_swiftEmptyArrayStorage;
  }
  double v65 = (double)(int)DataFrame.shape.getter(v58) * 0.2;
  if ((~*(void *)&v65 & 0x7FF0000000000000) == 0) {
    BUG();
  }
  if (v65 <= -9.223372036854778e18) {
    BUG();
  }
  if (v65 >= 9.223372036854776e18) {
    BUG();
  }
  uint64_t v66 = DataFrame.shape.getter(v58);
  uint64_t v67 = 10;
  if (v66 < 10) {
    uint64_t v67 = v66;
  }
  if (v67 <= (int)v65) {
    uint64_t v67 = (int)v65;
  }
  if (v67 < 0) {
    BUG();
  }
  uint64_t v68 = v119;
  uint64_t v69 = v111;
  if (!v67)
  {
LABEL_76:
    swift_bridgeObjectRelease((_BYTE)v122);
    *(void *)&v107[0] = 0;
    *((void *)&v107[0] + 1) = 0xE000000000000000;
    _StringGuts.grow(_:)(166);
    v88._char countAndFlagsBits = 0xD000000000000098;
    v88._char object = "Annotations file is empty." + 0x8000000000000000;
    String.append(_:)(v88);
    v88._char countAndFlagsBits = v106._countAndFlagsBits;
    v88._char object = object;
    String.append(_:)(v88);
    v88._char countAndFlagsBits = 0x2E316567616D693ALL;
    v88._char object = (void *)0xEC0000002E67706ALL;
    String.append(_:)(v88);
    char v64 = (char *)*((void *)&v107[0] + 1);
    char countAndFlagsBits = *(void **)&v107[0];
    uint64_t v59 = lazy protocol witness table accessor for type MLCreateError and conformance MLCreateError();
    swift_allocError(&type metadata for MLCreateError, v59, 0, 0);
    *(void *)uint64_t v60 = countAndFlagsBits;
    goto LABEL_77;
  }
  double v110 = (uint64_t *)*((void *)v122 + 2);
  char v70 = 0;
  double v116 = (char *)&type metadata for Any + 8;
  uint64_t v117 = (uint64_t *)v67;
  while (1)
  {
    if (v70 == (uint64_t *)v67) {
      BUG();
    }
    if (v110) {
      break;
    }
LABEL_75:
    char v70 = (uint64_t *)((char *)v70 + 1);
    if (v70 == (uint64_t *)v67) {
      goto LABEL_76;
    }
  }
  unint64_t v109 = v70;
  double v115 = (uint64_t *)((char *)v122 + ((*(unsigned __int8 *)(v5 + 80) + 32) & ~*(unsigned __int8 *)(v5 + 80)));
  swift_bridgeObjectRetain((_BYTE)v122);
  uint64_t v118 = *(char **)(v5 + 16);
  uint64_t v112 = *(void *)(v5 + 72);
  uint64_t v71 = 0;
  while (1)
  {
    uint64_t v114 = v71;
    ((void (*)(uint64_t *, char *, uint64_t))v118)(v69, (char *)v115 + v71 * v112, v68);
    Column.subscript.getter(v109, v68);
    uint64_t v72 = v108;
    if (v108) {
      break;
    }
LABEL_62:
    swift_bridgeObjectRelease(v108);
    uint64_t v69 = v111;
LABEL_63:
    uint64_t v71 = v114 + 1;
    (*(void (**)(uint64_t *, uint64_t))(v5 + 8))(v69, v68);
    if ((uint64_t *)v71 == v110)
    {
      swift_bridgeObjectRelease((_BYTE)v122);
      uint64_t v67 = (uint64_t)v117;
      char v70 = v109;
      goto LABEL_75;
    }
  }
  int64_t v73 = *(void *)(v108 + 16);
  *(void *)&v101[0] = _swiftEmptyArrayStorage;
  specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v73, 0);
  uint64_t v74 = *(void **)&v101[0];
  if (v73)
  {
    uint64_t v75 = v72 + 32;
    while (1)
    {
      outlined init with copy of Any?(v75, (uint64_t)v107);
      uint64_t v76 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Any?);
      uint64_t v77 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [String : Any]);
      if (!swift_dynamicCast(&v102, v107, v76, v77, 6)) {
        break;
      }
      uint64_t v120 = v102;
      if (!swift_isUniquelyReferenced_nonNull_native(v74))
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v74[2] + 1, 1);
        uint64_t v74 = *(void **)&v101[0];
      }
      unint64_t v78 = v74[2];
      unint64_t v79 = v74[3];
      uint64_t v80 = v78 + 1;
      if (v79 >> 1 <= v78)
      {
        uint64_t v113 = v78 + 1;
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v79 >= 2, v78 + 1, 1);
        uint64_t v80 = v113;
        uint64_t v74 = *(void **)&v101[0];
      }
      v74[2] = v80;
      v74[v78 + 4] = v120;
      v75 += 32;
      if (!--v73)
      {
        uint64_t v5 = v121;
        goto LABEL_55;
      }
    }
    *(void *)&long long v102 = 0;
    swift_release();
    swift_bridgeObjectRelease(v102);
    uint64_t v5 = v121;
    goto LABEL_61;
  }
  if (!*(void *)(*(void *)&v101[0] + 16))
  {
    swift_release();
LABEL_61:
    uint64_t v68 = v119;
    goto LABEL_62;
  }
LABEL_55:
  uint64_t v81 = v74[4];
  swift_bridgeObjectRetain(v81);
  swift_release();
  if (!*(void *)(v81 + 16)
    || (unint64_t v82 = specialized __RawDictionaryStorage.find<A>(_:)(0x6C6562616CLL, 0xE500000000000000), (v83 & 1) == 0))
  {
    swift_bridgeObjectRelease(v81);
    goto LABEL_61;
  }
  outlined init with copy of Any(*(void *)(v81 + 56) + 32 * v82, (uint64_t)v101);
  outlined init with take of Any(v101, v107);
  if (*(void *)(v81 + 16))
  {
    unint64_t v84 = specialized __RawDictionaryStorage.find<A>(_:)(0x616E6964726F6F63, 0xEB00000000736574);
    if (v85)
    {
      outlined init with copy of Any(*(void *)(v81 + 56) + 32 * v84, (uint64_t)&v102);
    }
    else
    {
      long long v103 = 0;
      long long v102 = 0;
    }
    uint64_t v69 = v111;
  }
  else
  {
    long long v103 = 0;
    long long v102 = 0;
    uint64_t v69 = v111;
  }
  swift_bridgeObjectRelease(v81);
  if (!*((void *)&v103 + 1))
  {
    __swift_destroy_boxed_opaque_existential_1Tm(v107);
    _s11TabularData9AnyColumnVSgWOhTm_1((uint64_t)&v102, &demangling cache variable for type metadata for Any?);
    uint64_t v68 = v119;
    uint64_t v5 = v121;
    goto LABEL_62;
  }
  outlined init with take of Any(&v102, v101);
  outlined init with take of Any(v107, &v102);
  char v86 = swift_dynamicCast(v95, &v102, v116, &type metadata for String, 6);
  uint64_t v68 = v119;
  if (!v86)
  {
    outlined init with take of Any(v101, &v102);
    __swift_destroy_boxed_opaque_existential_1Tm(&v102);
    goto LABEL_74;
  }
  swift_bridgeObjectRelease(BYTE8(v95[0]));
  outlined init with take of Any(v101, &v102);
  outlined init with take of Any(&v102, v95);
  uint64_t v87 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [String : Any]);
  if (!swift_dynamicCast(&v96, v95, v116, v87, 6))
  {
LABEL_74:
    swift_bridgeObjectRelease(v108);
    uint64_t v5 = v121;
    goto LABEL_63;
  }
  swift_bridgeObjectRelease(v96);
  swift_bridgeObjectRelease(v108);
  swift_bridgeObjectRelease((_BYTE)v122);
  uint64_t v89 = v68;
  uint64_t v90 = *(void (**)(uint64_t *, uint64_t *, uint64_t))(v121 + 32);
  uint64_t v91 = v100;
  v90(v100, v69, v89);
  swift_bridgeObjectRelease((_BYTE)v122);
  int64_t v92 = v99;
  v90(v99, v91, v89);
  char countAndFlagsBits = (void *)Column.name.getter(v89);
  (*(void (**)(uint64_t *, uint64_t))(v121 + 8))(v92, v89);
  return countAndFlagsBits;
}

Swift::Void __swiftcall __spoils<cf,zf,sf,of,pf,rax,rdx,rcx,rdi,rsi,r8,r9,r10,r11,r12,xmm0,xmm1,xmm2,xmm3,xmm4,xmm5,xmm6,xmm7> DataFrame.flattenNestedArrays(in:shape:)(Swift::String in, Swift::OpaquePointer shape)
{
  *(void *)&long long v69 = v2;
  char rawValue = shape._rawValue;
  uint64_t v56 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Column<[Any?]>);
  uint64_t v72 = *(long long **)(v56 - 8);
  int64_t v4 = *((void *)v72 + 8);
  uint64_t v5 = alloca(v4);
  int64_t v6 = alloca(v4);
  unint64_t v57 = &v54;
  uint64_t v55 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Column<[Any]>);
  uint64_t v64 = *(void *)(v55 - 8);
  int64_t v7 = *(void *)(v64 + 64);
  double v8 = alloca(v7);
  id v9 = alloca(v7);
  uint64_t v66 = &v54;
  uint64_t v65 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Column<MLShapedArray<Double>>);
  uint64_t v59 = *(void *)(v65 - 8);
  int64_t v10 = *(void *)(v59 + 64);
  id v11 = alloca(v10);
  uint64_t v12 = alloca(v10);
  int64_t v58 = &v54;
  NSString v13 = alloca(v10);
  NSString v14 = alloca(v10);
  int64_t v73 = &v54;
  uint64_t v71 = type metadata accessor for AnyColumn(0);
  v70._char object = *(void **)(v71 - 8);
  int64_t v15 = *((void *)v70._object + 8);
  Swift::OpaquePointer v16 = alloca(v15);
  uint64_t v17 = alloca(v15);
  uint64_t v61 = &v54;
  int64_t v18 = alloca(v15);
  Swift::Bool v19 = alloca(v15);
  uint64_t v60 = &v54;
  Swift::String v20 = alloca(v15);
  unsigned int v21 = alloca(v15);
  v70._char countAndFlagsBits = in._countAndFlagsBits;
  uint64_t v22 = v3;
  DataFrame.subscript.getter(in._countAndFlagsBits, in._object);
  uint64_t v23 = AnyColumn.wrappedElementType.getter();
  uint64_t v24 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [Any]);
  char object = in._object;
  uint64_t v62 = &v54;
  if (v23 == v24)
  {
    DataFrame.subscript.getter(v70._countAndFlagsBits, in._object, v23);
    uint64_t v72 = &v54;
    uint64_t v35 = alloca(24);
    unint64_t v36 = alloca(32);
    uint64_t v55 = (uint64_t)rawValue;
    uint64_t v37 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for MLShapedArray<Double>);
    uint64_t v38 = v55;
    uint64_t v39 = v69;
    Column.mapNonNil<A>(_:)(partial apply for closure #1 in DataFrame.flattenNestedArrays(in:shape:), &v54, v55, v37);
    if (v39)
    {
      Swift::String v40 = v66;
      uint64_t v41 = v38;
      uint64_t v42 = (long long *)v64;
LABEL_9:
      (*((void (**)(long long *, uint64_t))v42 + 1))(v40, v41);
      uint64_t v28 = v71;
      uint64_t v29 = (void (**)(_OWORD *, uint64_t))v70._object;
      goto LABEL_13;
    }
    uint64_t v68 = v22;
    *(void *)&long long v69 = 0;
    (*(void (**)(long long *, uint64_t))(v64 + 8))(v66, v38);
    int64_t v50 = v60;
    uint64_t v51 = v65;
    Column.eraseToAnyColumn()(v65);
LABEL_12:
    uint64_t v28 = v71;
    (*(void (**)(long long *, uint64_t))(v59 + 8))(v73, v51);
    uint64_t v53 = object;
    swift_bridgeObjectRetain((_BYTE)object);
    DataFrame.subscript.setter(v50, v70._countAndFlagsBits, v53);
    uint64_t v29 = (void (**)(_OWORD *, uint64_t))v70._object;
    goto LABEL_13;
  }
  uint64_t v68 = v22;
  uint64_t v25 = AnyColumn.wrappedElementType.getter();
  if (v25 == __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [Any?]))
  {
    Swift::String v43 = v57;
    DataFrame.subscript.getter(v70._countAndFlagsBits, object, v25);
    int64_t v73 = &v54;
    char v44 = alloca(24);
    unint64_t v45 = alloca(32);
    uint64_t v55 = (uint64_t)rawValue;
    uint64_t v46 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for MLShapedArray<Double>);
    uint64_t v47 = v58;
    uint64_t v48 = v56;
    uint64_t v49 = v69;
    Column.mapNonNil<A>(_:)(partial apply for closure #2 in DataFrame.flattenNestedArrays(in:shape:), &v54, v56, v46);
    if (v49)
    {
      Swift::String v40 = v43;
      uint64_t v41 = v48;
      uint64_t v42 = v72;
      goto LABEL_9;
    }
    *(void *)&long long v69 = 0;
    (*((void (**)(long long *, uint64_t))v72 + 1))(v43, v48);
    uint64_t v52 = v61;
    uint64_t v51 = v65;
    Column.eraseToAnyColumn()(v65);
    int64_t v73 = v47;
    int64_t v50 = v52;
    goto LABEL_12;
  }
  uint64_t v26 = AnyColumn.wrappedElementType.getter();
  BOOL v27 = v26 == __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for MLShapedArray<Double>);
  uint64_t v28 = v71;
  uint64_t v29 = (void (**)(_OWORD *, uint64_t))v70._object;
  if (!v27)
  {
    *(void *)&long long v54 = 0;
    *((void *)&v54 + 1) = 0xE000000000000000;
    _StringGuts.grow(_:)(73);
    v30._char countAndFlagsBits = 0x27206E6D756C6F43;
    v30._char object = (void *)0xE800000000000000;
    String.append(_:)(v30);
    v30._char countAndFlagsBits = v70._countAndFlagsBits;
    v30._char object = object;
    String.append(_:)(v30);
    v30._char object = "ml.disableAnalyticsLogging" + 0x8000000000000000;
    v30._char countAndFlagsBits = 0xD00000000000003FLL;
    String.append(_:)(v30);
    long long v69 = v54;
    v30._char object = (void *)lazy protocol witness table accessor for type MLCreateError and conformance MLCreateError();
    swift_allocError(&type metadata for MLCreateError, v30._object, 0, 0);
    *(_OWORD *)uint64_t v31 = v69;
    *(_OWORD *)(v31 + 16) = 0;
    *(_OWORD *)(v31 + 32) = 0;
    *(unsigned char *)(v31 + 48) = 1;
    swift_willThrow(&type metadata for MLCreateError, v30._object, v31, v32, v33, v34);
  }
LABEL_13:
  v29[1](v62, v28);
}

uint64_t closure #1 in DataFrame.flattenNestedArrays(in:shape:)(uint64_t *a1, uint64_t a2, uint64_t (*a3)(uint64_t, uint64_t))
{
  uint64_t v5 = v3;
  uint64_t v6 = *a1;
  swift_bridgeObjectRetain(a2);
  swift_bridgeObjectRetain(v6);
  uint64_t result = a3(a2, v6);
  if (!v4)
  {
    uint64_t v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for MLShapedArray<Double>);
    return __swift_storeEnumTagSinglePayload(v5, 0, 1, v8);
  }
  return result;
}

uint64_t partial apply for closure #2 in DataFrame.flattenNestedArrays(in:shape:)(uint64_t *a1)
{
  return closure #1 in DataFrame.flattenNestedArrays(in:shape:)(a1, *(void *)(v1 + 16), MLShapedArray<>.init(shape:nestedArray:));
}

uint64_t partial apply for closure #1 in DataFrame.flattenNestedArrays(in:shape:)(uint64_t *a1)
{
  return closure #1 in DataFrame.flattenNestedArrays(in:shape:)(a1, *(void *)(v1 + 16), MLShapedArray<>.init(shape:nestedArray:));
}

uint64_t _s11TabularData9AnyColumnVSgWOhTm_1(uint64_t a1, uint64_t *a2)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(a2);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t CMLParameters.setValidation(table:)(unsigned char *a1)
{
  return CMLParameters.setValidation(table:)(a1, 3);
}

uint64_t CMLParameters.setTraining(table:)(unsigned char *a1)
{
  return CMLParameters.setValidation(table:)(a1, 4);
}

uint64_t CMLParameters.setValidation(table:)(unsigned char *a1, uint64_t a2)
{
  if (a1[8])
  {
    uint64_t v2 = *(void *)a1;
    swift_errorRetain(v2);
    return swift_willThrow(v2, a2, v3, v4, v5, v6);
  }
  else
  {
    uint64_t v8 = *(void *)(*(void *)a1 + 16);
    swift_retain();
    CMLParameters.add(key:table:)(a2, v8);
    return swift_release();
  }
}

uint64_t CMLParameters.setOptions(dictionary:)(uint64_t a1)
{
  type metadata accessor for CMLFeatureValue();
  swift_retain();
  uint64_t result = CMLFeatureValue.__allocating_init(_:)(a1);
  if (!v1)
  {
    CMLParameters.add(key:featureValue:)(6, result);
    return swift_release();
  }
  return result;
}

uint64_t MLImageClassifier.write(to:metadata:)(char *a1, uint64_t *a2)
{
  uint64_t v70 = v2;
  uint64_t v72 = v3;
  uint64_t v71 = a1;
  int64_t v4 = *(void *)(*(void *)(type metadata accessor for MLImageClassifier.Model(0) - 8) + 64);
  uint64_t v5 = alloca(v4);
  uint64_t v6 = alloca(v4);
  uint64_t v53 = v50;
  uint64_t v62 = type metadata accessor for Model(0);
  uint64_t v61 = *(void *)(v62 - 8);
  int64_t v7 = *(void *)(v61 + 64);
  uint64_t v8 = alloca(v7);
  id v9 = alloca(v7);
  uint64_t v51 = v50;
  int64_t v10 = *(void *)(*(void *)(type metadata accessor for MLImageClassifier.FeatureExtractorType(0) - 8) + 64);
  id v11 = alloca(v10);
  uint64_t v12 = alloca(v10);
  uint64_t v68 = v50;
  int64_t v13 = *(void *)(*(void *)(type metadata accessor for MLImageClassifier.ModelParameters.ModelAlgorithmType(0) - 8)
                  + 64);
  NSString v14 = alloca(v13);
  int64_t v15 = alloca(v13);
  int64_t v73 = v50;
  uint64_t v16 = type metadata accessor for URL(0);
  uint64_t v17 = *(void *)(v16 - 8);
  int64_t v18 = *(void *)(v17 + 64);
  Swift::Bool v19 = alloca(v18);
  Swift::String v20 = alloca(v18);
  uint64_t v55 = *a2;
  uint64_t v54 = a2[1];
  uint64_t v56 = a2[2];
  unint64_t v57 = (char *)a2[3];
  uint64_t v58 = a2[4];
  uint64_t v59 = a2[5];
  uint64_t v69 = a2[6];
  uint64_t v60 = (uint64_t *)a2[7];
  uint64_t v21 = a2[8];
  uint64_t v22 = v71;
  uint64_t v23 = v70;
  uint64_t result = static _ValidationUtilities.validateWriteLocation(atURL:defaultName:fileExtension:)((uint64_t)v71, 0x616C436567616D49, 0xEF72656966697373, 0x6C65646F6D6C6DLL, (void *)0xE700000000000000);
  if (!v23)
  {
    uint64_t v52 = 0;
    uint64_t v64 = v21;
    uint64_t v63 = v50;
    uint64_t v67 = v16;
    uint64_t v66 = v17;
    uint64_t v25 = v72;
    uint64_t v26 = (uint64_t)v73;
    MLImageClassifier.ModelParameters.algorithm.getter(v22);
    uint64_t v27 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (featureExtractor: MLImageClassifier.FeatureExtractorType, classifier: MLImageClassifier.ModelParameters.ClassifierType));
    swift_bridgeObjectRelease(*(void *)(v26 + *(int *)(v27 + 48)));
    outlined init with take of MLImageClassifier.FeatureExtractorType(v26, (uint64_t)v68);
    uint64_t v28 = type metadata accessor for MLImageClassifier(0);
    outlined init with copy of MLImageClassifier.Model(v25 + *(int *)(v28 + 32), (uint64_t)v53);
    if (v54)
    {
      uint64_t v29 = v55;
      uint64_t v65 = v55;
      uint64_t v30 = v54;
      uint64_t v31 = v56;
      uint64_t v32 = v56;
      uint64_t v33 = (uint64_t)v57;
      uint64_t v71 = v57;
      uint64_t v34 = v58;
      uint64_t v35 = v58;
      uint64_t v36 = v59;
      uint64_t v72 = v59;
      uint64_t v37 = v69;
      uint64_t v38 = v69;
      uint64_t v39 = (uint64_t)v60;
      int64_t v73 = v60;
      uint64_t v40 = v64;
      uint64_t v70 = v64;
    }
    else
    {
      uint64_t v41 = NSFullUserName();
      uint64_t v42 = v41;
      uint64_t v65 = static String._unconditionallyBridgeFromObjectiveC(_:)(v42);
      uint64_t v30 = v43;

      uint64_t v71 = "RandomForestRegressor" + 0x8000000000000000;
      int64_t v73 = (uint64_t *)0xE100000000000000;
      uint64_t v38 = 49;
      uint64_t v32 = 0xD000000000000033;
      uint64_t v35 = 0;
      uint64_t v72 = 0;
      uint64_t v70 = 0;
      uint64_t v37 = v69;
      uint64_t v29 = v55;
      uint64_t v31 = v56;
      uint64_t v33 = (uint64_t)v57;
      uint64_t v34 = v58;
      uint64_t v36 = v59;
      uint64_t v39 = (uint64_t)v60;
      uint64_t v40 = v64;
    }
    v50[0] = v65;
    uint64_t v69 = v30;
    v50[1] = v30;
    v50[2] = v32;
    v50[3] = (uint64_t)v71;
    Swift::Double v50[4] = v35;
    v50[5] = v72;
    v50[6] = v38;
    v50[7] = (uint64_t)v73;
    v50[8] = v70;
    outlined copy of MLModelMetadata?(v29, v54, v31, v33, v34, v36, v37, v39, v40);
    char v44 = v51;
    uint64_t v45 = (uint64_t)v68;
    uint64_t v46 = (uint64_t)v53;
    uint64_t v47 = v52;
    MLImageClassifier.Model.export(metadata:featureExtractorType:)(v50, (uint64_t)v68);
    swift_bridgeObjectRelease((_BYTE)v73);
    swift_bridgeObjectRelease((_BYTE)v71);
    swift_bridgeObjectRelease(v69);
    swift_bridgeObjectRelease(v72);
    swift_bridgeObjectRelease(v70);
    outlined destroy of MLActivityClassifier.ModelParameters(v46, type metadata accessor for MLImageClassifier.Model);
    if (v47)
    {
      outlined destroy of MLActivityClassifier.ModelParameters(v45, type metadata accessor for MLImageClassifier.FeatureExtractorType);
      uint64_t v48 = v63;
    }
    else
    {
      uint64_t v49 = v63;
      Model.write(to:)(v63);
      (*(void (**)(uint64_t *, uint64_t))(v61 + 8))(v44, v62);
      outlined destroy of MLActivityClassifier.ModelParameters((uint64_t)v68, type metadata accessor for MLImageClassifier.FeatureExtractorType);
      uint64_t v48 = v49;
    }
    return (*(uint64_t (**)(uint64_t *, uint64_t))(v66 + 8))(v48, v67);
  }
  return result;
}

uint64_t outlined init with copy of MLImageClassifier.Model(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = type metadata accessor for MLImageClassifier.Model(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v2 - 8) + 16))(a2, a1, v2);
  return a2;
}

uint64_t MLImageClassifier.write(toFile:metadata:)(Swift::String string, long long *a2)
{
  uint64_t v17 = v2;
  uint64_t v19 = v3;
  stringa = string._object;
  uint64_t v5 = type metadata accessor for URL(0);
  uint64_t v6 = *(void *)(v5 - 8);
  int64_t v7 = *(void *)(v6 + 64);
  uint64_t v8 = alloca(v7);
  id v9 = alloca(v7);
  long long v13 = *a2;
  long long v14 = a2[1];
  long long v15 = a2[2];
  long long v16 = a2[3];
  uint64_t v20 = *((void *)a2 + 8);
  uint64_t v21 = (char *)v11;
  uint64_t result = static _ValidationUtilities.validateWriteLocation(atPath:defaultName:)(string, 0x616C436567616D49, (void *)0xEF72656966697373);
  if (!v2)
  {
    v11[0] = v13;
    v11[1] = v14;
    void v11[2] = v15;
    uint64_t v11[3] = v16;
    uint64_t v12 = v20;
    MLImageClassifier.write(to:metadata:)(v21, (uint64_t *)v11);
    return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v21, v5);
  }
  return result;
}

uint64_t type metadata instantiation function for CategoricalLookupTable(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_allocateGenericValueMetadata(a1, a2, a3, 32);
}

uint64_t *initializeBufferWithCopyOfBuffer for CategoricalLookupTable(uint64_t *a1, uint64_t *a2)
{
  return initializeBufferWithCopyOfBuffer for CategoricalLookupTable(a1, a2);
}

{
  uint64_t v3;
  uint64_t v4;

  uint64_t v3 = *a2;
  *a1 = *a2;
  int64_t v4 = a2[1];
  a1[1] = v4;
  swift_bridgeObjectRetain(v3);
  swift_bridgeObjectRetain(v4);
  return a1;
}

uint64_t *assignWithCopy for CategoricalLookupTable(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3 = *a2;
  uint64_t v4 = *a1;
  *a1 = *a2;
  swift_bridgeObjectRetain(v3);
  swift_bridgeObjectRelease(v4);
  uint64_t v5 = a2[1];
  uint64_t v6 = a1[1];
  a1[1] = v5;
  swift_bridgeObjectRetain(v5);
  swift_bridgeObjectRelease(v6);
  return a1;
}

void *assignWithTake for CategoricalLookupTable(void *a1, _OWORD *a2)
{
  swift_bridgeObjectRelease(*a1);
  uint64_t v3 = a1[1];
  *(_OWORD *)a1 = *a2;
  swift_bridgeObjectRelease(v3);
  return a1;
}

uint64_t getEnumTagSinglePayload for CategoricalLookupTable(uint64_t a1, int a2)
{
  if (a2)
  {
    if (a2 < 0 && *(unsigned char *)(a1 + 16)) {
      int v2 = *(_DWORD *)a1 + 0x7FFFFFFF;
    }
    else {
      int v2 = (*(void *)a1 & 0xFFFFFFFF00000001) != 0 ? -1 : *(void *)a1 >> 1;
    }
  }
  else
  {
    int v2 = -1;
  }
  return (v2 + 1);
}

void storeEnumTagSinglePayload for CategoricalLookupTable(uint64_t a1, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)(a1 + 8) = 0;
    *(void *)a1 = a2 + 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(a1 + 16) = 1;
    }
  }
  else
  {
    if (a3 < 0) {
      *(unsigned char *)(a1 + 16) = 0;
    }
    if (a2) {
      *(void *)a1 = 2 * (a2 - 1);
    }
  }
}

uint64_t type metadata accessor for CategoricalLookupTable(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for CategoricalLookupTable);
}

uint64_t MLSoundClassifier.ModelParameters.validation.getter()
{
  return outlined init with copy of MLSoundClassifier.ModelParameters.ValidationData(v1, v0);
}

uint64_t outlined init with copy of MLSoundClassifier.ModelParameters.ValidationData(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = type metadata accessor for MLSoundClassifier.ModelParameters.ValidationData(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v2 - 8) + 16))(a2, a1, v2);
  return a2;
}

uint64_t MLSoundClassifier.ModelParameters.validation.setter(uint64_t a1)
{
  return outlined assign with take of MLSoundClassifier.ModelParameters.ValidationData(a1, v1);
}

uint64_t outlined assign with take of MLSoundClassifier.ModelParameters.ValidationData(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = type metadata accessor for MLSoundClassifier.ModelParameters.ValidationData(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v2 - 8) + 40))(a2, a1, v2);
  return a2;
}

void (*MLSoundClassifier.ModelParameters.validation.modify())()
{
  return MLBoostedTreeRegressor.ModelParameters.maxDepth.modify;
}

uint64_t MLSoundClassifier.ModelParameters.maxIterations.getter()
{
  return *(void *)(v0 + *(int *)(type metadata accessor for MLSoundClassifier.ModelParameters(0) + 20));
}

uint64_t type metadata accessor for MLSoundClassifier.ModelParameters(uint64_t a1)
{
  uint64_t result = type metadata singleton initialization cache for MLSoundClassifier.ModelParameters;
  if (!type metadata singleton initialization cache for MLSoundClassifier.ModelParameters) {
    return swift_getSingletonMetadata(a1, &nominal type descriptor for MLSoundClassifier.ModelParameters);
  }
  return result;
}

uint64_t MLSoundClassifier.ModelParameters.maxIterations.setter(uint64_t a1)
{
  uint64_t result = *(int *)(type metadata accessor for MLSoundClassifier.ModelParameters(0) + 20);
  *(void *)(v1 + result) = a1;
  return result;
}

void (*MLSoundClassifier.ModelParameters.maxIterations.modify())()
{
  return MLBoostedTreeRegressor.ModelParameters.maxDepth.modify;
}

double MLSoundClassifier.ModelParameters.overlapFactor.getter()
{
  return *(double *)(v0 + *(int *)(type metadata accessor for MLSoundClassifier.ModelParameters(0) + 24));
}

uint64_t MLSoundClassifier.ModelParameters.overlapFactor.setter(double a1)
{
  uint64_t result = *(int *)(type metadata accessor for MLSoundClassifier.ModelParameters(0) + 24);
  *(double *)(v1 + result) = a1;
  return result;
}

void (*MLSoundClassifier.ModelParameters.overlapFactor.modify())()
{
  return MLBoostedTreeRegressor.ModelParameters.maxDepth.modify;
}

char MLSoundClassifier.ModelParameters.algorithm.getter()
{
  uint64_t v2 = v0;
  uint64_t v3 = type metadata accessor for MLSoundClassifier.ModelParameters(0);
  outlined init with copy of Any?(v1 + *(int *)(v3 + 28), (uint64_t)v8);
  if (!v9)
  {
    outlined destroy of Any?((uint64_t)v8);
    goto LABEL_5;
  }
  if (!swift_dynamicCast(&v10, v8, (char *)&type metadata for Any + 8, &type metadata for MLSoundClassifier.ModelParameters.ModelAlgorithmType, 6))
  {
LABEL_5:
    char v5 = 1;
    uint64_t v4 = 1;
    uint64_t v6 = 0;
    goto LABEL_6;
  }
  uint64_t v4 = v10;
  char v5 = v11;
  uint64_t v6 = v12;
LABEL_6:
  *(void *)uint64_t v2 = v4;
  char result = v5 & 1;
  *(unsigned char *)(v2 + 8) = result;
  *(void *)(v2 + 16) = v6;
  return result;
}

uint64_t key path getter for MLSoundClassifier.ModelParameters.algorithm : MLSoundClassifier.ModelParameters()
{
  uint64_t v1 = v0;
  MLSoundClassifier.ModelParameters.algorithm.getter();
  uint64_t result = v3;
  *(void *)uint64_t v1 = v3;
  *(unsigned char *)(v1 + 8) = v4;
  *(void *)(v1 + 16) = v5;
  return result;
}

uint64_t key path setter for MLSoundClassifier.ModelParameters.algorithm : MLSoundClassifier.ModelParameters(uint64_t a1)
{
  uint64_t v1 = *(void *)a1;
  char v2 = *(unsigned char *)(a1 + 8);
  uint64_t v3 = *(void *)(a1 + 16);
  uint64_t v5 = v1;
  char v6 = v2;
  uint64_t v7 = v3;
  swift_bridgeObjectRetain(v3);
  return MLSoundClassifier.ModelParameters.algorithm.setter(&v5);
}

uint64_t MLSoundClassifier.ModelParameters.algorithm.setter(uint64_t *a1)
{
  uint64_t v2 = *a1;
  char v3 = *((unsigned char *)a1 + 8);
  uint64_t v4 = a1[2];
  uint64_t v10 = &type metadata for MLSoundClassifier.ModelParameters.ModelAlgorithmType;
  uint64_t v7 = v2;
  char v8 = v3;
  uint64_t v9 = v4;
  uint64_t v5 = type metadata accessor for MLSoundClassifier.ModelParameters(0);
  return outlined assign with take of Any?((uint64_t)&v7, v1 + *(int *)(v5 + 28));
}

void (*MLSoundClassifier.ModelParameters.algorithm.modify(void *a1))(int **a1, char a2)
{
  uint64_t v2 = (char *)malloc(0x60uLL);
  *a1 = v2;
  *((void *)v2 + 10) = v1;
  uint64_t v3 = *(int *)(type metadata accessor for MLSoundClassifier.ModelParameters(0) + 28);
  *((_DWORD *)v2 + 22) = v3;
  outlined init with copy of Any?(v1 + v3, (uint64_t)v2);
  if (!*((void *)v2 + 3))
  {
    outlined destroy of Any?((uint64_t)v2);
    goto LABEL_5;
  }
  if (!swift_dynamicCast(v2 + 56, v2, (char *)&type metadata for Any + 8, &type metadata for MLSoundClassifier.ModelParameters.ModelAlgorithmType, 6))
  {
LABEL_5:
    char v5 = 1;
    uint64_t v4 = 1;
    uint64_t v6 = 0;
    goto LABEL_6;
  }
  uint64_t v4 = *((void *)v2 + 7);
  char v5 = v2[64];
  uint64_t v6 = *((void *)v2 + 9);
LABEL_6:
  *((void *)v2 + 4) = v4;
  v2[40] = v5 & 1;
  *((void *)v2 + 6) = v6;
  return MLSoundClassifier.ModelParameters.algorithm.modify;
}

void MLSoundClassifier.ModelParameters.algorithm.modify(int **a1, char a2)
{
  uint64_t v2 = *a1;
  uint64_t v3 = *((void *)*a1 + 4);
  char v4 = *((unsigned char *)*a1 + 40);
  uint64_t v5 = *((void *)*a1 + 6);
  uint64_t v6 = *((void *)v2 + 10) + v2[22];
  *((void *)v2 + 3) = &type metadata for MLSoundClassifier.ModelParameters.ModelAlgorithmType;
  *(void *)uint64_t v2 = v3;
  *((unsigned char *)v2 + 8) = v4;
  *((void *)v2 + 2) = v5;
  if (a2)
  {
    swift_bridgeObjectRetain(v5);
    outlined assign with take of Any?((uint64_t)v2, v6);
    swift_bridgeObjectRelease(*((void *)v2 + 6));
  }
  else
  {
    outlined assign with take of Any?((uint64_t)v2, v6);
  }
  free(v2);
}

double MLSoundClassifier.ModelParameters.featureExtractionTimeWindowSize.getter()
{
  uint64_t v1 = type metadata accessor for MLSoundClassifier.ModelParameters(0);
  outlined init with copy of Any?(v0 + *(int *)(v1 + 28), (uint64_t)v6);
  if (v7)
  {
    if (swift_dynamicCast(&v8, v6, (char *)&type metadata for Any + 8, &type metadata for MLSoundClassifier.ModelParameters.ModelAlgorithmType, 6))
    {
      uint64_t v2 = v8;
      char v3 = v9;
      swift_bridgeObjectRelease(v10);
      if (!v3 && v2 == 1) {
        return 0.975;
      }
    }
  }
  else
  {
    outlined destroy of Any?((uint64_t)v6);
  }
  uint64_t v4 = *(int *)(v1 + 32);
  if (!*(unsigned char *)(v0 + v4 + 8)) {
    return *(double *)(v0 + v4);
  }
  return 0.975;
}

uint64_t MLSoundClassifier.ModelParameters.featureExtractionTimeWindowSize.setter(double a1)
{
  uint64_t result = *(int *)(type metadata accessor for MLSoundClassifier.ModelParameters(0) + 32);
  *(double *)(v1 + result) = a1;
  *(unsigned char *)(v1 + result + 8) = 0;
  return result;
}

uint64_t (*MLSoundClassifier.ModelParameters.featureExtractionTimeWindowSize.modify(uint64_t a1))(uint64_t *a1)
{
  *(void *)(a1 + 8) = v1;
  *(double *)a1 = MLSoundClassifier.ModelParameters.featureExtractionTimeWindowSize.getter();
  return MLSoundClassifier.ModelParameters.featureExtractionTimeWindowSize.modify;
}

uint64_t MLSoundClassifier.ModelParameters.featureExtractionTimeWindowSize.modify(uint64_t *a1)
{
  uint64_t v1 = *a1;
  uint64_t v2 = a1[1];
  uint64_t result = *(int *)(type metadata accessor for MLSoundClassifier.ModelParameters(0) + 32);
  *(void *)(v2 + result) = v1;
  *(unsigned char *)(v2 + result + 8) = 0;
  return result;
}

uint64_t MLSoundClassifier.ModelParameters.init(validation:maxIterations:overlapFactor:algorithm:)(uint64_t a1, uint64_t a2, uint64_t *a3, double a4)
{
  double v15 = a4;
  uint64_t v5 = v4;
  uint64_t v16 = *a3;
  char v18 = *((unsigned char *)a3 + 8);
  uint64_t v17 = a3[2];
  uint64_t v6 = (int *)type metadata accessor for MLSoundClassifier.ModelParameters(0);
  uint64_t v7 = v6[7];
  *(_OWORD *)(v5 + v7 + 16) = 0;
  *(_OWORD *)(v5 + v7) = 0;
  uint64_t v8 = v6[8];
  *(void *)(v5 + v8) = 0;
  uint64_t v9 = v5 + v7;
  *(unsigned char *)(v5 + v8 + 8) = 1;
  *(void *)(v5 + v6[9]) = 32;
  outlined init with copy of MLSoundClassifier.ModelParameters.ValidationData(a1, v5);
  *(void *)(v5 + v6[5]) = a2;
  *(double *)(v5 + v6[6]) = v15;
  long long v14 = &type metadata for MLSoundClassifier.ModelParameters.ModelAlgorithmType;
  uint64_t v11 = v16;
  char v12 = v18;
  uint64_t v13 = v17;
  outlined assign with take of Any?((uint64_t)&v11, v9);
  return outlined destroy of MLSoundClassifier.ModelParameters.ValidationData(a1);
}

uint64_t outlined destroy of MLSoundClassifier.ModelParameters.ValidationData(uint64_t a1)
{
  uint64_t v1 = type metadata accessor for MLSoundClassifier.ModelParameters.ValidationData(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v1 - 8) + 8))(a1, v1);
  return a1;
}

uint64_t MLSoundClassifier.ModelParameters.init(validation:maxIterations:overlapFactor:)(uint64_t a1, uint64_t a2, double a3)
{
  uint64_t v4 = v3;
  uint64_t v5 = (int *)type metadata accessor for MLSoundClassifier.ModelParameters(0);
  uint64_t v6 = v5[7];
  *(_OWORD *)(v4 + v6 + 16) = 0;
  *(_OWORD *)(v4 + v6) = 0;
  uint64_t v7 = v5[8];
  *(void *)(v4 + v7) = 0;
  *(unsigned char *)(v4 + v7 + 8) = 1;
  *(void *)(v4 + v5[9]) = 32;
  outlined init with take of MLSoundClassifier.ModelParameters.ValidationData(a1, v4);
  *(void *)(v4 + v5[5]) = a2;
  uint64_t result = v5[6];
  *(double *)(v4 + result) = a3;
  return result;
}

uint64_t outlined init with take of MLSoundClassifier.ModelParameters.ValidationData(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = type metadata accessor for MLSoundClassifier.ModelParameters.ValidationData(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v2 - 8) + 32))(a2, a1, v2);
  return a2;
}

uint64_t MLSoundClassifier.ModelParameters.init(validation:maxIterations:overlapFactor:algorithm:featureExtractionTimeWindowSize:)(uint64_t a1, uint64_t a2, uint64_t a3, double a4, double a5)
{
  double v32 = a5;
  double v27 = a4;
  uint64_t v30 = a2;
  uint64_t v6 = v5;
  uint64_t v28 = *(void *)a3;
  char v33 = *(unsigned char *)(a3 + 8);
  uint64_t v29 = *(void *)(a3 + 16);
  uint64_t v7 = (int *)type metadata accessor for MLSoundClassifier.ModelParameters(0);
  uint64_t v8 = v7[7];
  *(_OWORD *)(v6 + v8 + 16) = 0;
  *(_OWORD *)(v6 + v8) = 0;
  *(void *)&double v9 = v7[8];
  *(void *)(v6 + *(void *)&v9) = 0;
  uint64_t v10 = v6 + v8;
  *(unsigned char *)(v6 + *(void *)&v9 + 8) = 1;
  *(void *)(v6 + v7[9]) = 32;
  uint64_t v31 = a1;
  outlined init with copy of MLSoundClassifier.ModelParameters.ValidationData(a1, v6);
  *(void *)(v6 + v7[5]) = v30;
  *(double *)(v6 + v7[6]) = v27;
  uint64_t v26 = &type metadata for MLSoundClassifier.ModelParameters.ModelAlgorithmType;
  uint64_t v23 = v28;
  LOBYTE(v24) = v33;
  uint64_t v25 = v29;
  outlined assign with take of Any?((uint64_t)&v23, v10);
  double v11 = v32;
  *(double *)(v6 + *(void *)&v9) = v32;
  *(unsigned char *)(v6 + *(void *)&v9 + 8) = 0;
  if (v11 < 0.5)
  {
    uint64_t v23 = 0;
    double v32 = v9;
    unint64_t v24 = 0xE000000000000000;
    _StringGuts.grow(_:)(108);
    v12._char countAndFlagsBits = 0xD000000000000056;
    v12._char object = ". Clamping it to " + 0x8000000000000000;
    String.append(_:)(v12);
    Double.write<A>(to:)(&v23, &type metadata for DefaultStringInterpolation, &protocol witness table for DefaultStringInterpolation);
    v12._char object = "ximum supported value " + 0x8000000000000000;
    v12._char countAndFlagsBits = 0xD000000000000011;
    String.append(_:)(v12);
    Double.write<A>(to:)(&v23, &type metadata for DefaultStringInterpolation, &protocol witness table for DefaultStringInterpolation);
    v12._char countAndFlagsBits = 46;
    v12._char object = (void *)0xE100000000000000;
    String.append(_:)(v12);
    uint64_t v13 = v23;
    long long v14 = (void *)v24;
    os_log_type_t v15 = static os_log_type_t.default.getter(46);
    v12._char countAndFlagsBits = v13;
    v12._char object = v14;
    log(_:type:)(v12, v15);
    swift_bridgeObjectRelease((_BYTE)v14);
    outlined destroy of MLSoundClassifier.ModelParameters.ValidationData(v31);
    uint64_t result = 0x3FE0000000000000;
LABEL_5:
    double v22 = v32;
    *(void *)(v6 + *(void *)&v32) = result;
    *(unsigned char *)(v6 + *(void *)&v22 + 8) = 0;
    return result;
  }
  uint64_t v17 = v31;
  if (v11 > 15.0)
  {
    uint64_t v23 = 0;
    double v32 = v9;
    unint64_t v24 = 0xE000000000000000;
    _StringGuts.grow(_:)(108);
    v18._char countAndFlagsBits = 0xD000000000000056;
    v18._char object = "r MLShapedArray<Double> values." + 0x8000000000000000;
    String.append(_:)(v18);
    Double.write<A>(to:)(&v23, &type metadata for DefaultStringInterpolation, &protocol witness table for DefaultStringInterpolation);
    v18._char object = "ximum supported value " + 0x8000000000000000;
    v18._char countAndFlagsBits = 0xD000000000000011;
    String.append(_:)(v18);
    Double.write<A>(to:)(&v23, &type metadata for DefaultStringInterpolation, &protocol witness table for DefaultStringInterpolation);
    v18._char countAndFlagsBits = 46;
    v18._char object = (void *)0xE100000000000000;
    String.append(_:)(v18);
    uint64_t v19 = v23;
    uint64_t v20 = (void *)v24;
    os_log_type_t v21 = static os_log_type_t.default.getter(46);
    v18._char countAndFlagsBits = v19;
    v18._char object = v20;
    log(_:type:)(v18, v21);
    swift_bridgeObjectRelease((_BYTE)v20);
    outlined destroy of MLSoundClassifier.ModelParameters.ValidationData(v17);
    uint64_t result = 0x402E000000000000;
    goto LABEL_5;
  }
  return outlined destroy of MLSoundClassifier.ModelParameters.ValidationData(v31);
}

uint64_t MLSoundClassifier.ModelParameters.FeaturePrintType.description.getter()
{
  return 0x756F732065707974;
}

void MLSoundClassifier.ModelParameters.FeaturePrintType.hash(into:)()
{
}

char static MLSoundClassifier.ModelParameters.FeaturePrintType.== infix(_:_:)()
{
  return 1;
}

Swift::Int MLSoundClassifier.ModelParameters.FeaturePrintType.hashValue.getter()
{
  return Hasher._finalize()();
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance MLSoundClassifier.ModelParameters.FeaturePrintType()
{
  return MLSoundClassifier.ModelParameters.FeaturePrintType.hashValue.getter();
}

void protocol witness for Hashable.hash(into:) in conformance MLSoundClassifier.ModelParameters.FeaturePrintType()
{
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance MLSoundClassifier.ModelParameters.FeaturePrintType()
{
  return 0x756F732065707974;
}

Swift::Void __swiftcall __spoils<cf,zf,sf,of,pf,rax,rdx,rcx,rdi,rsi,r8,r9,r10,r11,r12,xmm0,xmm1,xmm2,xmm3,xmm4,xmm5,xmm6,xmm7> MLSoundClassifier.ModelParameters.validate()()
{
  uint64_t v1 = type metadata accessor for MLSoundClassifier.ModelParameters(0);
  outlined init with copy of Any?(v0 + *(int *)(v1 + 28), (uint64_t)&v5);
  if (!v8)
  {
    outlined destroy of Any?((uint64_t)&v5);
    goto LABEL_5;
  }
  if (!swift_dynamicCast(&v9, &v5, (char *)&type metadata for Any + 8, &type metadata for MLSoundClassifier.ModelParameters.ModelAlgorithmType, 6))
  {
LABEL_5:
    char v3 = 1;
    uint64_t v2 = 1;
    uint64_t v4 = 0;
    goto LABEL_6;
  }
  uint64_t v2 = v9;
  char v3 = v10;
  uint64_t v4 = v11;
LABEL_6:
  uint64_t v5 = v2;
  char v6 = v3 & 1;
  uint64_t v7 = v4;
  MLSoundClassifier.ModelParameters.ModelAlgorithmType.validate()();
  swift_bridgeObjectRelease(v4);
}

unint64_t MLSoundClassifier.ModelParameters.description.getter()
{
  _StringGuts.grow(_:)(19);
  swift_bridgeObjectRelease(0);
  unint64_t v21 = 0xD000000000000010;
  double v22 = "ansformer have different types." + 0x8000000000000000;
  uint64_t v1 = type metadata accessor for MLSoundClassifier.ModelParameters(0);
  uint64_t v2 = *(void *)(v0 + *(int *)(v1 + 20));
  uint64_t v20 = v0;
  uint64_t v16 = v2;
  v3._char countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter(&type metadata for Int, &protocol witness table for Int);
  char object = (char)v3._object;
  String.append(_:)(v3);
  swift_bridgeObjectRelease(object);
  v5._char object = (void *)0xE100000000000000;
  v5._char countAndFlagsBits = 10;
  String.append(_:)(v5);
  unint64_t v25 = 0xD000000000000010;
  unint64_t v21 = 0;
  double v22 = (char *)0xE000000000000000;
  _StringGuts.grow(_:)(19);
  v5._char object = "nimum supported value " + 0x8000000000000000;
  v5._char countAndFlagsBits = 0xD000000000000010;
  String.append(_:)(v5);
  Double.write<A>(to:)(&v21, &type metadata for DefaultStringInterpolation, &protocol witness table for DefaultStringInterpolation);
  v5._char countAndFlagsBits = 10;
  v5._char object = (void *)0xE100000000000000;
  String.append(_:)(v5);
  uint64_t v6 = v21;
  uint64_t v7 = v22;
  unint64_t v21 = v25;
  double v22 = "ansformer have different types." + 0x8000000000000000;
  swift_bridgeObjectRetain(("ansformer have different types." + 0x8000000000000000));
  v5._char countAndFlagsBits = v6;
  v5._char object = v7;
  String.append(_:)(v5);
  swift_bridgeObjectRelease(("ansformer have different types." + 0x8000000000000000));
  swift_bridgeObjectRelease((_BYTE)v7);
  unint64_t v19 = v21;
  unint64_t v25 = (unint64_t)v22;
  unint64_t v21 = 0;
  double v22 = (char *)0xE000000000000000;
  _StringGuts.grow(_:)(18);
  swift_bridgeObjectRelease((_BYTE)v22);
  outlined init with copy of Any?(v0 + *(int *)(v1 + 28), (uint64_t)&v21);
  if (!v24)
  {
    outlined destroy of Any?((uint64_t)&v21);
    goto LABEL_5;
  }
  if (!swift_dynamicCast(&v16, &v21, (char *)&type metadata for Any + 8, &type metadata for MLSoundClassifier.ModelParameters.ModelAlgorithmType, 6))
  {
LABEL_5:
    char v9 = 1;
    uint64_t v8 = 1;
    uint64_t v10 = 0;
    goto LABEL_6;
  }
  uint64_t v8 = v16;
  char v9 = v17;
  uint64_t v10 = v18;
LABEL_6:
  unint64_t v21 = v8;
  LOBYTE(v22) = v9 & 1;
  uint64_t v23 = v10;
  unint64_t v11 = MLSoundClassifier.ModelParameters.ModelAlgorithmType.description.getter();
  uint64_t v13 = v12;
  swift_bridgeObjectRelease(v10);
  v14._char countAndFlagsBits = v11;
  v14._char object = v13;
  String.append(_:)(v14);
  swift_bridgeObjectRelease((_BYTE)v13);
  unint64_t v21 = v19;
  LOBYTE(v11) = v25;
  double v22 = (char *)v25;
  swift_bridgeObjectRetain(v25);
  v14._char countAndFlagsBits = 0xD000000000000010;
  v14._char object = "Overlap factor: " + 0x8000000000000000;
  String.append(_:)(v14);
  swift_bridgeObjectRelease(v11);
  swift_bridgeObjectRelease(("Overlap factor: " + 0x8000000000000000));
  return v21;
}

unint64_t protocol witness for CustomStringConvertible.description.getter in conformance MLSoundClassifier.ModelParameters()
{
  return MLSoundClassifier.ModelParameters.description.getter();
}

unint64_t MLSoundClassifier.ModelParameters.debugDescription.getter()
{
  return MLSoundClassifier.ModelParameters.description.getter();
}

unint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance MLSoundClassifier.ModelParameters()
{
  return MLSoundClassifier.ModelParameters.debugDescription.getter();
}

unint64_t MLSoundClassifier.ModelParameters.playgroundDescription.getter()
{
  uint64_t v1 = v0;
  unint64_t result = MLSoundClassifier.ModelParameters.description.getter();
  v1[3] = (unint64_t)&type metadata for String;
  *uint64_t v1 = result;
  v1[1] = v3;
  return result;
}

unint64_t protocol witness for CustomPlaygroundDisplayConvertible.playgroundDescription.getter in conformance MLSoundClassifier.ModelParameters()
{
  return MLSoundClassifier.ModelParameters.playgroundDescription.getter();
}

uint64_t base witness table accessor for Equatable in MLSoundClassifier.ModelParameters.FeaturePrintType()
{
  return lazy protocol witness table accessor for type MLSoundClassifier.ModelParameters.FeaturePrintType and conformance MLSoundClassifier.ModelParameters.FeaturePrintType();
}

uint64_t lazy protocol witness table accessor for type MLSoundClassifier.ModelParameters.FeaturePrintType and conformance MLSoundClassifier.ModelParameters.FeaturePrintType()
{
  uint64_t result = lazy protocol witness table cache variable for type MLSoundClassifier.ModelParameters.FeaturePrintType and conformance MLSoundClassifier.ModelParameters.FeaturePrintType;
  if (!lazy protocol witness table cache variable for type MLSoundClassifier.ModelParameters.FeaturePrintType and conformance MLSoundClassifier.ModelParameters.FeaturePrintType)
  {
    uint64_t result = swift_getWitnessTable(&protocol conformance descriptor for MLSoundClassifier.ModelParameters.FeaturePrintType, &type metadata for MLSoundClassifier.ModelParameters.FeaturePrintType);
    lazy protocol witness table cache variable for type MLSoundClassifier.ModelParameters.FeaturePrintType and conformance MLSoundClassifier.ModelParameters.FeaturePrintType = result;
  }
  return result;
}

uint64_t sub_D9904()
{
  return key path getter for MLSoundClassifier.ModelParameters.algorithm : MLSoundClassifier.ModelParameters();
}

uint64_t sub_D990E(uint64_t a1)
{
  return key path setter for MLSoundClassifier.ModelParameters.algorithm : MLSoundClassifier.ModelParameters(a1);
}

void sub_D9918()
{
  *uint64_t v0 = MLSoundClassifier.ModelParameters.featureExtractionTimeWindowSize.getter();
}

uint64_t sub_D9933(double *a1)
{
  return MLSoundClassifier.ModelParameters.featureExtractionTimeWindowSize.setter(*a1);
}

char *initializeBufferWithCopyOfBuffer for MLSoundClassifier.ModelParameters(char *__dst, char *__src, int *a3)
{
  uint64_t v4 = __dst;
  int v5 = *(_DWORD *)(*((void *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v13 = *(void *)__src;
    *(void *)uint64_t v4 = *(void *)__src;
    uint64_t v4 = (char *)(v13 + ((v5 + 16) & ~v5));
    swift_retain();
  }
  else
  {
    uint64_t v7 = type metadata accessor for MLSoundClassifier.ModelParameters.ValidationData(0);
    int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload(__src, v7);
    if (EnumCaseMultiPayload == 2)
    {
      uint64_t v14 = *(void *)__src;
      *(void *)uint64_t v4 = *(void *)__src;
      swift_bridgeObjectRetain(v14);
      swift_storeEnumTagMultiPayload(v4, v7, 2);
    }
    else if (EnumCaseMultiPayload == 1)
    {
      uint64_t v9 = type metadata accessor for MLSoundClassifier.DataSource(0);
      switch(swift_getEnumCaseMultiPayload(__src, v9))
      {
        case 0u:
          uint64_t v10 = type metadata accessor for URL(0);
          (*(void (**)(char *, char *, uint64_t))(*(void *)(v10 - 8) + 16))(__dst, __src, v10);
          uint64_t v11 = v9;
          uint64_t v12 = 0;
          goto LABEL_15;
        case 1u:
          uint64_t v15 = type metadata accessor for URL(0);
          (*(void (**)(char *, char *, uint64_t))(*(void *)(v15 - 8) + 16))(__dst, __src, v15);
          uint64_t v36 = 1;
          goto LABEL_11;
        case 2u:
          uint64_t v16 = *(void *)__src;
          *(void *)uint64_t v4 = *(void *)__src;
          swift_bridgeObjectRetain(v16);
          uint64_t v36 = 2;
LABEL_11:
          uint64_t v12 = v36;
          __dst = v4;
          uint64_t v11 = v9;
          goto LABEL_15;
        case 3u:
          uint64_t v39 = v9;
          uint64_t v17 = *(void *)__src;
          char v38 = __src[8];
          outlined copy of Result<_DataTable, Error>(*(void *)__src, v38);
          *(void *)__dst = v17;
          __dst[8] = v38;
          *((void *)__dst + 2) = *((void *)__src + 2);
          uint64_t v18 = *((void *)__src + 3);
          *((void *)v4 + 3) = v18;
          *((void *)v4 + 4) = *((void *)__src + 4);
          uint64_t v19 = *((void *)__src + 5);
          *((void *)v4 + 5) = v19;
          long long v20 = *((_OWORD *)__src + 4);
          *((_OWORD *)v4 + 3) = *((_OWORD *)__src + 3);
          *((_OWORD *)v4 + 4) = v20;
          v4[80] = __src[80];
          swift_bridgeObjectRetain(v18);
          swift_bridgeObjectRetain(v19);
          uint64_t v37 = 3;
          goto LABEL_14;
        case 4u:
          uint64_t v21 = type metadata accessor for DataFrame(0);
          (*(void (**)(char *, char *, uint64_t))(*(void *)(v21 - 8) + 16))(__dst, __src, v21);
          double v22 = (int *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (DataFrame, featureColumn: String, labelColumn: String, parameters: MLSoundClassifier.FeatureExtractionParameters));
          uint64_t v23 = v22[12];
          *(void *)&__dst[v23] = *(void *)&__src[v23];
          uint64_t v24 = *(void *)&__src[v23 + 8];
          *(void *)&v4[v23 + 8] = v24;
          uint64_t v25 = v22[16];
          *(void *)&v4[v25] = *(void *)&__src[v25];
          uint64_t v39 = v9;
          uint64_t v26 = *(void *)&__src[v25 + 8];
          *(void *)&v4[v25 + 8] = v26;
          uint64_t v27 = v22[20];
          v4[v27 + 32] = __src[v27 + 32];
          long long v28 = *(_OWORD *)&__src[v27];
          *(_OWORD *)&v4[v27 + 16] = *(_OWORD *)&__src[v27 + 16];
          *(_OWORD *)&v4[v27] = v28;
          swift_bridgeObjectRetain(v24);
          swift_bridgeObjectRetain(v26);
          uint64_t v37 = 4;
LABEL_14:
          uint64_t v12 = v37;
          __dst = v4;
          uint64_t v11 = v39;
LABEL_15:
          swift_storeEnumTagMultiPayload(__dst, v11, v12);
          swift_storeEnumTagMultiPayload(v4, v7, 1);
          break;
      }
    }
    else
    {
      memcpy(__dst, __src, *(void *)(*(void *)(v7 - 8) + 64));
    }
    *(void *)&v4[a3[5]] = *(void *)&__src[a3[5]];
    *(void *)&v4[a3[6]] = *(void *)&__src[a3[6]];
    uint64_t v29 = a3[7];
    uint64_t v30 = &v4[v29];
    uint64_t v31 = &__src[v29];
    uint64_t v32 = *(void *)&__src[v29 + 24];
    if (v32)
    {
      *((void *)v30 + 3) = v32;
      (**(void (***)(char *, char *))(v32 - 8))(v30, v31);
    }
    else
    {
      long long v33 = *(_OWORD *)v31;
      *((_OWORD *)v30 + 1) = *((_OWORD *)v31 + 1);
      *(_OWORD *)uint64_t v30 = v33;
    }
    uint64_t v34 = a3[8];
    v4[v34 + 8] = __src[v34 + 8];
    *(void *)&v4[v34] = *(void *)&__src[v34];
    *(void *)&v4[a3[9]] = *(void *)&__src[a3[9]];
  }
  return v4;
}

uint64_t destroy for MLSoundClassifier.ModelParameters(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = type metadata accessor for MLSoundClassifier.ModelParameters.ValidationData(0);
  int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload(a1, v3);
  if (EnumCaseMultiPayload == 2)
  {
LABEL_5:
    uint64_t v7 = *(void *)a1;
LABEL_6:
    swift_bridgeObjectRelease(v7);
  }
  else if (EnumCaseMultiPayload == 1)
  {
    uint64_t v5 = type metadata accessor for MLSoundClassifier.DataSource(0);
    switch(swift_getEnumCaseMultiPayload(a1, v5))
    {
      case 0u:
      case 1u:
        uint64_t v6 = type metadata accessor for URL(0);
        (*(void (**)(uint64_t, uint64_t))(*(void *)(v6 - 8) + 8))(a1, v6);
        break;
      case 2u:
        goto LABEL_5;
      case 3u:
        outlined consume of Result<_DataTable, Error>(*(void *)a1, *(_DWORD *)(a1 + 8));
        swift_bridgeObjectRelease(*(void *)(a1 + 24));
        uint64_t v7 = *(void *)(a1 + 40);
        goto LABEL_6;
      case 4u:
        uint64_t v9 = type metadata accessor for DataFrame(0);
        (*(void (**)(uint64_t, uint64_t))(*(void *)(v9 - 8) + 8))(a1, v9);
        uint64_t v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (DataFrame, featureColumn: String, labelColumn: String, parameters: MLSoundClassifier.FeatureExtractionParameters));
        swift_bridgeObjectRelease(*(void *)(a1 + *(int *)(v10 + 48) + 8));
        uint64_t v7 = *(void *)(a1 + *(int *)(v10 + 64) + 8);
        goto LABEL_6;
      default:
        break;
    }
  }
  uint64_t result = *(int *)(a2 + 28);
  if (*(void *)(a1 + result + 24)) {
    return __swift_destroy_boxed_opaque_existential_1Tm((void *)(result + a1));
  }
  return result;
}

char *initializeWithCopy for MLSoundClassifier.ModelParameters(char *__dst, char *__src, int *a3)
{
  uint64_t v5 = __dst;
  uint64_t v6 = type metadata accessor for MLSoundClassifier.ModelParameters.ValidationData(0);
  int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload(__src, v6);
  if (EnumCaseMultiPayload == 2)
  {
    uint64_t v12 = *(void *)__src;
    *(void *)uint64_t v5 = *(void *)__src;
    swift_bridgeObjectRetain(v12);
    swift_storeEnumTagMultiPayload(v5, v6, 2);
  }
  else if (EnumCaseMultiPayload == 1)
  {
    uint64_t v8 = type metadata accessor for MLSoundClassifier.DataSource(0);
    switch(swift_getEnumCaseMultiPayload(__src, v8))
    {
      case 0u:
        uint64_t v9 = type metadata accessor for URL(0);
        (*(void (**)(char *, char *, uint64_t))(*(void *)(v9 - 8) + 16))(__dst, __src, v9);
        uint64_t v10 = v8;
        uint64_t v11 = 0;
        goto LABEL_13;
      case 1u:
        uint64_t v13 = type metadata accessor for URL(0);
        (*(void (**)(char *, char *, uint64_t))(*(void *)(v13 - 8) + 16))(__dst, __src, v13);
        uint64_t v34 = 1;
        goto LABEL_9;
      case 2u:
        uint64_t v14 = *(void *)__src;
        *(void *)uint64_t v5 = *(void *)__src;
        swift_bridgeObjectRetain(v14);
        uint64_t v34 = 2;
LABEL_9:
        uint64_t v11 = v34;
        __dst = v5;
        uint64_t v10 = v8;
        goto LABEL_13;
      case 3u:
        uint64_t v37 = v8;
        uint64_t v15 = *(void *)__src;
        char v36 = __src[8];
        outlined copy of Result<_DataTable, Error>(*(void *)__src, v36);
        *(void *)__dst = v15;
        __dst[8] = v36;
        *((void *)__dst + 2) = *((void *)__src + 2);
        uint64_t v16 = *((void *)__src + 3);
        *((void *)v5 + 3) = v16;
        *((void *)v5 + 4) = *((void *)__src + 4);
        uint64_t v17 = *((void *)__src + 5);
        *((void *)v5 + 5) = v17;
        long long v18 = *((_OWORD *)__src + 4);
        *((_OWORD *)v5 + 3) = *((_OWORD *)__src + 3);
        *((_OWORD *)v5 + 4) = v18;
        v5[80] = __src[80];
        swift_bridgeObjectRetain(v16);
        swift_bridgeObjectRetain(v17);
        uint64_t v35 = 3;
        goto LABEL_12;
      case 4u:
        uint64_t v19 = type metadata accessor for DataFrame(0);
        (*(void (**)(char *, char *, uint64_t))(*(void *)(v19 - 8) + 16))(__dst, __src, v19);
        long long v20 = (int *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (DataFrame, featureColumn: String, labelColumn: String, parameters: MLSoundClassifier.FeatureExtractionParameters));
        uint64_t v21 = v20[12];
        *(void *)&__dst[v21] = *(void *)&__src[v21];
        uint64_t v22 = *(void *)&__src[v21 + 8];
        *(void *)&v5[v21 + 8] = v22;
        uint64_t v23 = v20[16];
        *(void *)&v5[v23] = *(void *)&__src[v23];
        uint64_t v37 = v8;
        uint64_t v24 = *(void *)&__src[v23 + 8];
        *(void *)&v5[v23 + 8] = v24;
        uint64_t v25 = v20[20];
        v5[v25 + 32] = __src[v25 + 32];
        long long v26 = *(_OWORD *)&__src[v25];
        *(_OWORD *)&v5[v25 + 16] = *(_OWORD *)&__src[v25 + 16];
        *(_OWORD *)&v5[v25] = v26;
        swift_bridgeObjectRetain(v22);
        swift_bridgeObjectRetain(v24);
        uint64_t v35 = 4;
LABEL_12:
        uint64_t v11 = v35;
        __dst = v5;
        uint64_t v10 = v37;
LABEL_13:
        swift_storeEnumTagMultiPayload(__dst, v10, v11);
        swift_storeEnumTagMultiPayload(v5, v6, 1);
        break;
    }
  }
  else
  {
    memcpy(__dst, __src, *(void *)(*(void *)(v6 - 8) + 64));
  }
  *(void *)&v5[a3[5]] = *(void *)&__src[a3[5]];
  *(void *)&v5[a3[6]] = *(void *)&__src[a3[6]];
  uint64_t v27 = a3[7];
  long long v28 = &v5[v27];
  uint64_t v29 = &__src[v27];
  uint64_t v30 = *(void *)&__src[v27 + 24];
  if (v30)
  {
    *((void *)v28 + 3) = v30;
    (**(void (***)(char *, char *))(v30 - 8))(v28, v29);
  }
  else
  {
    long long v31 = *(_OWORD *)v29;
    *((_OWORD *)v28 + 1) = *((_OWORD *)v29 + 1);
    *(_OWORD *)long long v28 = v31;
  }
  uint64_t v32 = a3[8];
  v5[v32 + 8] = __src[v32 + 8];
  *(void *)&v5[v32] = *(void *)&__src[v32];
  *(void *)&v5[a3[9]] = *(void *)&__src[a3[9]];
  return v5;
}

char *assignWithCopy for MLSoundClassifier.ModelParameters(char *__dst, char *__src, int *a3)
{
  uint64_t v5 = __dst;
  if (__dst != __src)
  {
    outlined destroy of MLSoundClassifier.ModelParameters.ValidationData((uint64_t)__dst);
    uint64_t v6 = type metadata accessor for MLSoundClassifier.ModelParameters.ValidationData(0);
    int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload(__src, v6);
    if (EnumCaseMultiPayload == 2)
    {
      uint64_t v12 = *(void *)__src;
      *(void *)uint64_t v5 = *(void *)__src;
      swift_bridgeObjectRetain(v12);
      swift_storeEnumTagMultiPayload(v5, v6, 2);
    }
    else if (EnumCaseMultiPayload == 1)
    {
      uint64_t v8 = type metadata accessor for MLSoundClassifier.DataSource(0);
      switch(swift_getEnumCaseMultiPayload(__src, v8))
      {
        case 0u:
          uint64_t v9 = type metadata accessor for URL(0);
          (*(void (**)(char *, char *, uint64_t))(*(void *)(v9 - 8) + 16))(__dst, __src, v9);
          uint64_t v10 = v8;
          uint64_t v11 = 0;
          goto LABEL_14;
        case 1u:
          uint64_t v13 = type metadata accessor for URL(0);
          (*(void (**)(char *, char *, uint64_t))(*(void *)(v13 - 8) + 16))(__dst, __src, v13);
          uint64_t v34 = 1;
          goto LABEL_10;
        case 2u:
          uint64_t v14 = *(void *)__src;
          *(void *)uint64_t v5 = *(void *)__src;
          swift_bridgeObjectRetain(v14);
          uint64_t v34 = 2;
LABEL_10:
          uint64_t v11 = v34;
          __dst = v5;
          uint64_t v10 = v8;
          goto LABEL_14;
        case 3u:
          uint64_t v37 = v8;
          uint64_t v15 = *(void *)__src;
          char v36 = __src[8];
          outlined copy of Result<_DataTable, Error>(*(void *)__src, v36);
          *(void *)__dst = v15;
          __dst[8] = v36;
          *((void *)__dst + 2) = *((void *)__src + 2);
          uint64_t v16 = *((void *)__src + 3);
          *((void *)v5 + 3) = v16;
          *((void *)v5 + 4) = *((void *)__src + 4);
          uint64_t v17 = *((void *)__src + 5);
          *((void *)v5 + 5) = v17;
          long long v18 = *((_OWORD *)__src + 4);
          *((_OWORD *)v5 + 3) = *((_OWORD *)__src + 3);
          *((_OWORD *)v5 + 4) = v18;
          v5[80] = __src[80];
          swift_bridgeObjectRetain(v16);
          swift_bridgeObjectRetain(v17);
          uint64_t v35 = 3;
          goto LABEL_13;
        case 4u:
          uint64_t v19 = type metadata accessor for DataFrame(0);
          (*(void (**)(char *, char *, uint64_t))(*(void *)(v19 - 8) + 16))(__dst, __src, v19);
          long long v20 = (int *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (DataFrame, featureColumn: String, labelColumn: String, parameters: MLSoundClassifier.FeatureExtractionParameters));
          uint64_t v21 = v20[12];
          *(void *)&__dst[v21] = *(void *)&__src[v21];
          uint64_t v22 = *(void *)&__src[v21 + 8];
          *(void *)&v5[v21 + 8] = v22;
          uint64_t v23 = v20[16];
          *(void *)&v5[v23] = *(void *)&__src[v23];
          uint64_t v37 = v8;
          uint64_t v24 = *(void *)&__src[v23 + 8];
          *(void *)&v5[v23 + 8] = v24;
          uint64_t v25 = v20[20];
          v5[v25 + 32] = __src[v25 + 32];
          long long v26 = *(_OWORD *)&__src[v25];
          *(_OWORD *)&v5[v25 + 16] = *(_OWORD *)&__src[v25 + 16];
          *(_OWORD *)&v5[v25] = v26;
          swift_bridgeObjectRetain(v22);
          swift_bridgeObjectRetain(v24);
          uint64_t v35 = 4;
LABEL_13:
          uint64_t v11 = v35;
          __dst = v5;
          uint64_t v10 = v37;
LABEL_14:
          swift_storeEnumTagMultiPayload(__dst, v10, v11);
          swift_storeEnumTagMultiPayload(v5, v6, 1);
          break;
      }
    }
    else
    {
      memcpy(__dst, __src, *(void *)(*(void *)(v6 - 8) + 64));
    }
  }
  *(void *)&v5[a3[5]] = *(void *)&__src[a3[5]];
  *(void *)&v5[a3[6]] = *(void *)&__src[a3[6]];
  uint64_t v27 = a3[7];
  long long v28 = &v5[v27];
  uint64_t v29 = &__src[v27];
  uint64_t v30 = *(void *)&__src[v27 + 24];
  if (!*(void *)&v5[v27 + 24])
  {
    if (v30)
    {
      *((void *)v28 + 3) = v30;
      (**(void (***)(char *, char *))(v30 - 8))(v28, v29);
      goto LABEL_22;
    }
LABEL_21:
    long long v31 = *(_OWORD *)v29;
    *((_OWORD *)v28 + 1) = *((_OWORD *)v29 + 1);
    *(_OWORD *)long long v28 = v31;
    goto LABEL_22;
  }
  if (!v30)
  {
    __swift_destroy_boxed_opaque_existential_1Tm(&v5[v27]);
    goto LABEL_21;
  }
  __swift_assign_boxed_opaque_existential_0((uint64_t *)&v5[v27], (uint64_t *)&__src[v27]);
LABEL_22:
  uint64_t v32 = a3[8];
  v5[v32 + 8] = __src[v32 + 8];
  *(void *)&v5[v32] = *(void *)&__src[v32];
  *(void *)&v5[a3[9]] = *(void *)&__src[a3[9]];
  return v5;
}

unsigned char *initializeWithTake for MLSoundClassifier.ModelParameters(unsigned char *__dst, unsigned char *__src, int *a3)
{
  uint64_t v5 = type metadata accessor for MLSoundClassifier.ModelParameters.ValidationData(0);
  if (swift_getEnumCaseMultiPayload(__src, v5) == 1)
  {
    uint64_t v6 = type metadata accessor for MLSoundClassifier.DataSource(0);
    int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload(__src, v6);
    if (EnumCaseMultiPayload == 4)
    {
      uint64_t v11 = type metadata accessor for DataFrame(0);
      (*(void (**)(unsigned char *, unsigned char *, uint64_t))(*(void *)(v11 - 8) + 32))(__dst, __src, v11);
      uint64_t v12 = (int *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (DataFrame, featureColumn: String, labelColumn: String, parameters: MLSoundClassifier.FeatureExtractionParameters));
      *(_OWORD *)&__dst[v12[12]] = *(_OWORD *)&__src[v12[12]];
      *(_OWORD *)&__dst[v12[16]] = *(_OWORD *)&__src[v12[16]];
      uint64_t v13 = v12[20];
      long long v14 = *(_OWORD *)&__src[v13 + 16];
      *(_OWORD *)&__dst[v13] = *(_OWORD *)&__src[v13];
      *(_OWORD *)&__dst[v13 + 16] = v14;
      __dst[v13 + 32] = __src[v13 + 32];
      uint64_t v20 = 4;
    }
    else
    {
      if (EnumCaseMultiPayload != 1)
      {
        if (EnumCaseMultiPayload)
        {
          memcpy(__dst, __src, *(void *)(*(void *)(v6 - 8) + 64));
          goto LABEL_12;
        }
        uint64_t v8 = type metadata accessor for URL(0);
        (*(void (**)(unsigned char *, unsigned char *, uint64_t))(*(void *)(v8 - 8) + 32))(__dst, __src, v8);
        uint64_t v9 = v6;
        uint64_t v10 = 0;
LABEL_10:
        swift_storeEnumTagMultiPayload(__dst, v9, v10);
LABEL_12:
        swift_storeEnumTagMultiPayload(__dst, v5, 1);
        goto LABEL_13;
      }
      uint64_t v15 = type metadata accessor for URL(0);
      (*(void (**)(unsigned char *, unsigned char *, uint64_t))(*(void *)(v15 - 8) + 32))(__dst, __src, v15);
      uint64_t v20 = 1;
    }
    uint64_t v10 = v20;
    uint64_t v9 = v6;
    goto LABEL_10;
  }
  memcpy(__dst, __src, *(void *)(*(void *)(v5 - 8) + 64));
LABEL_13:
  *(void *)&__dst[a3[5]] = *(void *)&__src[a3[5]];
  *(void *)&__dst[a3[6]] = *(void *)&__src[a3[6]];
  uint64_t v16 = a3[7];
  long long v17 = *(_OWORD *)&__src[v16];
  *(_OWORD *)&__dst[v16 + 16] = *(_OWORD *)&__src[v16 + 16];
  *(_OWORD *)&__dst[v16] = v17;
  uint64_t v18 = a3[8];
  *(void *)&__dst[v18] = *(void *)&__src[v18];
  __dst[v18 + 8] = __src[v18 + 8];
  *(void *)&__dst[a3[9]] = *(void *)&__src[a3[9]];
  return __dst;
}

char *assignWithTake for MLSoundClassifier.ModelParameters(char *__dst, char *__src, int *a3)
{
  if (__dst != __src)
  {
    outlined destroy of MLSoundClassifier.ModelParameters.ValidationData((uint64_t)__dst);
    uint64_t v5 = type metadata accessor for MLSoundClassifier.ModelParameters.ValidationData(0);
    if (swift_getEnumCaseMultiPayload(__src, v5) != 1)
    {
      memcpy(__dst, __src, *(void *)(*(void *)(v5 - 8) + 64));
      goto LABEL_14;
    }
    uint64_t v6 = type metadata accessor for MLSoundClassifier.DataSource(0);
    int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload(__src, v6);
    if (EnumCaseMultiPayload == 4)
    {
      uint64_t v11 = type metadata accessor for DataFrame(0);
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v11 - 8) + 32))(__dst, __src, v11);
      uint64_t v12 = (int *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (DataFrame, featureColumn: String, labelColumn: String, parameters: MLSoundClassifier.FeatureExtractionParameters));
      *(_OWORD *)&__dst[v12[12]] = *(_OWORD *)&__src[v12[12]];
      *(_OWORD *)&__dst[v12[16]] = *(_OWORD *)&__src[v12[16]];
      uint64_t v13 = v12[20];
      long long v14 = *(_OWORD *)&__src[v13 + 16];
      *(_OWORD *)&__dst[v13] = *(_OWORD *)&__src[v13];
      *(_OWORD *)&__dst[v13 + 16] = v14;
      __dst[v13 + 32] = __src[v13 + 32];
      uint64_t v21 = 4;
    }
    else
    {
      if (EnumCaseMultiPayload != 1)
      {
        if (EnumCaseMultiPayload)
        {
          memcpy(__dst, __src, *(void *)(*(void *)(v6 - 8) + 64));
          goto LABEL_13;
        }
        uint64_t v8 = type metadata accessor for URL(0);
        (*(void (**)(char *, char *, uint64_t))(*(void *)(v8 - 8) + 32))(__dst, __src, v8);
        uint64_t v9 = v6;
        uint64_t v10 = 0;
LABEL_11:
        swift_storeEnumTagMultiPayload(__dst, v9, v10);
LABEL_13:
        swift_storeEnumTagMultiPayload(__dst, v5, 1);
        goto LABEL_14;
      }
      uint64_t v15 = type metadata accessor for URL(0);
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v15 - 8) + 32))(__dst, __src, v15);
      uint64_t v21 = 1;
    }
    uint64_t v10 = v21;
    uint64_t v9 = v6;
    goto LABEL_11;
  }
LABEL_14:
  *(void *)&__dst[a3[5]] = *(void *)&__src[a3[5]];
  *(void *)&__dst[a3[6]] = *(void *)&__src[a3[6]];
  uint64_t v16 = a3[7];
  long long v17 = &__dst[v16];
  if (*(void *)&__dst[v16 + 24]) {
    __swift_destroy_boxed_opaque_existential_1Tm(&__dst[v16]);
  }
  long long v18 = *(_OWORD *)&__src[v16];
  *((_OWORD *)v17 + 1) = *(_OWORD *)&__src[v16 + 16];
  *(_OWORD *)long long v17 = v18;
  uint64_t v19 = a3[8];
  *(void *)&__dst[v19] = *(void *)&__src[v19];
  __dst[v19 + 8] = __src[v19 + 8];
  *(void *)&__dst[a3[9]] = *(void *)&__src[a3[9]];
  return __dst;
}

uint64_t getEnumTagSinglePayload for MLSoundClassifier.ModelParameters(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_DA5D4);
}

uint64_t sub_DA5D4(uint64_t a1, unsigned int a2, uint64_t a3)
{
  unsigned int v4 = 0;
  uint64_t v5 = type metadata accessor for MLSoundClassifier.ModelParameters.ValidationData(0);
  if (*(_DWORD *)(*(void *)(v5 - 8) + 84) == a2) {
    return __swift_getEnumTagSinglePayload(a1, a2, v5);
  }
  int v7 = -1;
  if ((int)((*(void *)(a1 + *(int *)(a3 + 28) + 24) >> 1) - 1) >= 0) {
    int v7 = (*(void *)(a1 + *(int *)(a3 + 28) + 24) >> 1) - 1;
  }
  unsigned int v8 = v7 + 1;
  if ((*(void *)(a1 + *(int *)(a3 + 28) + 24) & 0xFFFFFFFF00000001) == 0) {
    return v8;
  }
  return v4;
}

uint64_t storeEnumTagSinglePayload for MLSoundClassifier.ModelParameters(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_DA65A);
}

uint64_t sub_DA65A(uint64_t a1, unsigned int a2, int a3, uint64_t a4)
{
  uint64_t v6 = type metadata accessor for MLSoundClassifier.ModelParameters.ValidationData(0);
  if (*(_DWORD *)(*(void *)(v6 - 8) + 84) == a3) {
    return __swift_storeEnumTagSinglePayload(a1, a2, a2, v6);
  }
  uint64_t result = *(int *)(a4 + 28);
  *(void *)(a1 + result + 24) = 2 * a2;
  return result;
}

uint64_t type metadata completion function for MLSoundClassifier.ModelParameters(uint64_t a1)
{
  uint64_t result = type metadata accessor for MLSoundClassifier.ModelParameters.ValidationData(319);
  if (v2 <= 0x3F)
  {
    v3[0] = *(void *)(result - 8) + 64;
    v3[1] = (char *)&value witness table for Builtin.Int64 + 64;
    v3[2] = (char *)&value witness table for Builtin.Int64 + 64;
    void v3[3] = " ";
    void v3[4] = &unk_3497C0;
    void v3[5] = (char *)&value witness table for Builtin.Int64 + 64;
    swift_initStructMetadata(a1, 256, 6, v3, a1 + 16);
    return 0;
  }
  return result;
}

uint64_t __swift_memcpy0_1(uint64_t a1)
{
  return a1;
}

uint64_t storeEnumTagSinglePayload for MLSoundClassifier.ModelParameters.FeaturePrintType(unsigned char *a1, int a2, int a3)
{
  if (a3)
  {
    unsigned int v3 = a3 + 1;
    LODWORD(result) = 1;
    if (v3 >= 0x100) {
      LODWORD(result) = 2 * (v3 >= 0x10000) + 2;
    }
  }
  else
  {
    LODWORD(result) = 0;
  }
  uint64_t result = result;
  if (a2)
  {
    switch((int)result)
    {
      case 0:
        return result;
      case 1:
        *a1 = a2;
        return result;
      case 2:
        *(_WORD *)a1 = a2;
        return result;
      case 3:
        goto LABEL_16;
      case 4:
        *(_DWORD *)a1 = a2;
        return result;
    }
  }
  switch((int)result)
  {
    case 0:
      return result;
    case 1:
      *a1 = 0;
      break;
    case 2:
      *(_WORD *)a1 = 0;
      break;
    case 3:
LABEL_16:
      BUG();
    case 4:
      *(_DWORD *)a1 = 0;
      break;
  }
  return result;
}

ValueMetadata *type metadata accessor for MLSoundClassifier.ModelParameters.FeaturePrintType()
{
  return &type metadata for MLSoundClassifier.ModelParameters.FeaturePrintType;
}

uint64_t MLDataTable.rows.getter()
{
  uint64_t v2 = *(void *)v1;
  char v3 = *(unsigned char *)(v1 + 8);
  *(void *)uint64_t v0 = *(void *)v1;
  *(unsigned char *)(v0 + 8) = v3;
  return outlined copy of Result<_DataTable, Error>(v2, v3);
}

uint64_t MLDataTable.Rows.subscript.getter(uint64_t a1)
{
  char v3 = v1;
  uint64_t v4 = *(void *)v2;
  if (*(unsigned char *)(v2 + 8))
  {
    outlined copy of Result<_DataTable, Error>(*(void *)v2, 1);
    uint64_t v5 = tc_v1_flex_list_create(0);
    if (!v5) {
      BUG();
    }
    uint64_t v6 = v5;
    uint64_t v7 = type metadata accessor for CMLSequence();
    uint64_t v8 = swift_allocObject(v7, 25, 7);
    *(void *)(v8 + 16) = v6;
    *(unsigned char *)(v8 + 24) = 1;
    outlined consume of Result<_DataTable, Error>(v4, 1);
    uint64_t v9 = tc_v1_flex_list_create(0);
    if (!v9) {
      BUG();
    }
    uint64_t v10 = v9;
    uint64_t result = swift_allocObject(v7, 25, 7);
    *(void *)(result + 16) = v10;
    *(unsigned char *)(result + 24) = 1;
    uint64_t *v3 = v8;
    v3[1] = (uint64_t)_swiftEmptyDictionarySingleton;
    v3[2] = result;
  }
  else
  {
    outlined copy of Result<_DataTable, Error>(v4, 0);
    swift_retain();
    uint64_t v12 = CMLTable.row(at:)(a1);
    swift_release();
    outlined copy of Result<_DataTable, Error>(v4, 0);
    _DataTable.columnNames.getter(v4);
    outlined consume of Result<_DataTable, Error>(v4, 0);
    outlined copy of Result<_DataTable, Error>(v4, 0);
    uint64_t v13 = _DataTable.columnIndexes.getter();
    outlined consume of Result<_DataTable, Error>(v4, 0);
    outlined consume of Result<_DataTable, Error>(v4, 0);
    uint64_t result = (uint64_t)v3;
    uint64_t *v3 = v14;
    v3[1] = v13;
    v3[2] = v12;
  }
  return result;
}

uint64_t MLDataTable.Rows.startIndex.getter()
{
  return 0;
}

Swift::Int MLDataTable.Rows.endIndex.getter()
{
  return MLDataTable.size.getter();
}

uint64_t protocol witness for RandomAccessCollection.index(_:offsetBy:limitedBy:) in conformance MLDataTable.Rows(uint64_t *a1, uint64_t a2, uint64_t *a3)
{
  return protocol witness for RandomAccessCollection.index(_:offsetBy:limitedBy:) in conformance MLDataTable.Rows(a1, a2, a3);
}

{
  uint64_t v3;
  uint64_t v4;
  uint64_t result;
  char v6;

  uint64_t v4 = v3;
  uint64_t result = specialized RandomAccessCollection.index(_:offsetBy:limitedBy:)(*a1, a2, *a3);
  *(void *)uint64_t v4 = result;
  *(unsigned char *)(v4 + 8) = v6 & 1;
  return result;
}

uint64_t protocol witness for BidirectionalCollection.index(before:) in conformance MLDataTable.Rows(uint64_t *a1)
{
  uint64_t v2 = v1;
  uint64_t result = specialized RandomAccessCollection<>.index(before:)(*a1);
  uint64_t *v2 = result;
  return result;
}

uint64_t protocol witness for BidirectionalCollection.formIndex(before:) in conformance MLDataTable.Rows(uint64_t *a1)
{
  uint64_t result = specialized RandomAccessCollection<>.index(before:)(*a1);
  *a1 = result;
  return result;
}

uint64_t protocol witness for BidirectionalCollection.index(_:offsetBy:) in conformance MLDataTable.Rows(uint64_t *a1, uint64_t a2)
{
  char v3 = v2;
  uint64_t result = specialized RandomAccessCollection<>.index(_:offsetBy:)(*a1, a2);
  uint64_t *v3 = result;
  return result;
}

uint64_t protocol witness for BidirectionalCollection.distance(from:to:) in conformance MLDataTable.Rows(uint64_t *a1, uint64_t *a2)
{
  return specialized RandomAccessCollection<>.distance(from:to:)(*a1, *a2);
}

Swift::Int protocol witness for Collection.endIndex.getter in conformance MLDataTable.Rows()
{
  uint64_t v1 = v0;
  Swift::Int result = MLDataTable.Rows.endIndex.getter();
  *uint64_t v1 = result;
  return result;
}

uint64_t (*protocol witness for Collection.subscript.read in conformance MLDataTable.Rows(uint64_t a1, uint64_t *a2))(void *a1)
{
  return protocol witness for Collection.subscript.read in conformance MLDataTable.Rows;
}

uint64_t protocol witness for Collection.subscript.read in conformance MLDataTable.Rows(void *a1)
{
  uint64_t v1 = a1[1];
  uint64_t v2 = a1[2];
  swift_release(*a1);
  swift_bridgeObjectRelease(v1);
  return swift_release(v2);
}

uint64_t protocol witness for Collection.subscript.getter in conformance MLDataTable.Rows(uint64_t *a1)
{
  return specialized Collection<>.subscript.getter(*a1, a1[1], *(void *)v1, *(unsigned char *)(v1 + 8));
}

uint64_t protocol witness for Collection.indices.getter in conformance MLDataTable.Rows()
{
  uint64_t v1 = v0;
  uint64_t result = specialized RandomAccessCollection<>.indices.getter();
  *uint64_t v1 = result;
  v1[1] = v3;
  return result;
}

BOOL protocol witness for Collection.isEmpty.getter in conformance MLDataTable.Rows()
{
  return specialized Collection.isEmpty.getter();
}

uint64_t protocol witness for Collection.count.getter in conformance MLDataTable.Rows()
{
  return specialized Collection.count.getter();
}

void protocol witness for Collection._failEarlyRangeCheck(_:bounds:) in conformance MLDataTable.Rows(uint64_t *a1, uint64_t *a2)
{
}

{
  specialized Collection._failEarlyRangeCheck(_:bounds:)(*a1, *a2, a2[1]);
}

{
  specialized Collection._failEarlyRangeCheck(_:bounds:)(*a1, a1[1], *a2, a2[1]);
}

uint64_t protocol witness for Collection.index(after:) in conformance MLDataTable.Rows(uint64_t *a1)
{
  uint64_t v2 = v1;
  uint64_t result = specialized RandomAccessCollection<>.index(after:)(*a1);
  uint64_t *v2 = result;
  return result;
}

uint64_t protocol witness for Collection.formIndex(after:) in conformance MLDataTable.Rows(uint64_t *a1)
{
  uint64_t result = specialized RandomAccessCollection<>.index(after:)(*a1);
  *a1 = result;
  return result;
}

uint64_t protocol witness for Sequence.makeIterator() in conformance MLDataTable.Rows()
{
  char v2 = *(unsigned char *)(v1 + 8);
  *(void *)uint64_t result = *(void *)v1;
  *(unsigned char *)(result + 8) = v2;
  *(void *)(result + 16) = 0;
  return result;
}

void *protocol witness for Sequence._copyToContiguousArray() in conformance MLDataTable.Rows()
{
  return specialized Collection._copyToContiguousArray()(*(void *)v0, *(unsigned char *)(v0 + 8));
}

Swift::Int protocol witness for Sequence._copyContents(initializing:) in conformance MLDataTable.Rows(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return specialized Sequence._copyContents(initializing:)(a1, a2, a3, *(void *)v3, *(unsigned char *)(v3 + 8));
}

uint64_t MLDataTable.Rows.description.getter(double a1)
{
  uint64_t v2 = *(void *)v1;
  char v3 = *(unsigned char *)(v1 + 8);
  outlined copy of Result<_DataTable, Error>(*(void *)v1, v3);
  Swift::Int v4 = MLDataTable.size.getter();
  uint64_t v5 = specialized RandomAccessCollection<>.distance(from:to:)(0, v4);
  outlined consume of Result<_DataTable, Error>(v2, v3);
  uint64_t v44 = v5;
  uint64_t v6 = 0x2020203A7379654BLL;
  if (v5 <= 0) {
    uint64_t v6 = 0x2020203A79654BLL;
  }
  uint64_t v45 = v6;
  uint64_t v48 = v2;
  char v49 = v3;
  outlined copy of Result<_DataTable, Error>(v2, v3);
  Swift::Int v7 = MLDataTable.size.getter();
  uint64_t v8 = specialized RandomAccessCollection<>.distance(from:to:)(0, v7);
  uint64_t v47 = v2;
  char v50 = v3;
  outlined consume of Result<_DataTable, Error>(v2, v3);
  uint64_t v9 = 10;
  if (v8 < 10) {
    uint64_t v9 = v8;
  }
  if (v9 < 0) {
    BUG();
  }
  if (v9)
  {
    uint64_t v10 = 0;
    for (i = v9; i != v10; uint64_t v9 = i)
    {
      if (v10 == v9) {
        BUG();
      }
      if (v10)
      {
        MLDataTable.Rows.subscript.getter(v10);
        swift_bridgeObjectRelease(v49);
        swift_release();
        uint64_t v11 = MLDataTable.Row.Values.description.getter(a1);
        uint64_t v13 = v12;
        swift_release();
        v14._uint64_t countAndFlagsBits = v11;
        v14._char object = v13;
        String.append(_:)(v14);
        swift_bridgeObjectRelease((_BYTE)v13);
        uint64_t v48 = 0x2020202020200A20;
        char v49 = 32;
        swift_bridgeObjectRetain(32);
        v14._uint64_t countAndFlagsBits = 32;
        v14._char object = (void *)0xE100000000000000;
        String.append(_:)(v14);
        swift_bridgeObjectRelease(32);
        v14._uint64_t countAndFlagsBits = 0x2020202020200A20;
        v14._char object = (void *)0xEA00000000002020;
        String.append(_:)(v14);
        swift_bridgeObjectRelease(32);
      }
      else
      {
        MLDataTable.Rows.subscript.getter(0);
        swift_release();
        swift_bridgeObjectRelease(v49);
        swift_retain();
        uint64_t v15 = CMLSequence.size.getter();
        int64_t v16 = specialized RandomAccessCollection<>.distance(from:to:)(0, v15);
        swift_retain();
        uint64_t v17 = CMLSequence.size.getter();
        uint64_t v18 = specialized RandomAccessCollection<>.distance(from:to:)(0, v17);
        swift_release();
        if (v18 < 0) {
          BUG();
        }
        swift_retain();
        uint64_t v19 = CMLSequence.size.getter();
        uint64_t v20 = specialized RandomAccessCollection<>.distance(from:to:)(0, v19);
        swift_release_n(v48);
        if (v16 < 0 || v20 < v16) {
          BUG();
        }
        if (v16)
        {
          specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v16, 0);
          uint64_t v21 = 0;
          for (j = v16; j != v21; int64_t v16 = j)
          {
            if (v16 == v21) {
              BUG();
            }
            CMLSequence.value(at:)(v21);
            Swift::String v22 = CMLFeatureValue.stringValue()();
            uint64_t countAndFlagsBits = v22._countAndFlagsBits;
            char object = v22._object;
            swift_release();
            if (v23)
            {
              swift_unexpectedError(v23, "CreateML/MLDataTable.ColumnNames.swift", 38, 1, 59);
              BUG();
            }
            unint64_t v24 = _swiftEmptyArrayStorage[2];
            unint64_t v25 = v24 + 1;
            if (_swiftEmptyArrayStorage[3] >> 1 <= v24)
            {
              specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(_swiftEmptyArrayStorage[3] >= 2uLL, v24 + 1, 1);
              unint64_t v25 = v24 + 1;
            }
            ++v21;
            _swiftEmptyArrayStorage[2] = v25;
            uint64_t v26 = 2 * v24;
            _swiftEmptyArrayStorage[v26 + 4] = countAndFlagsBits;
            _swiftEmptyArrayStorage[v26 + 5] = object;
          }
        }
        uint64_t v27 = Array.description.getter(_swiftEmptyArrayStorage, &type metadata for String);
        uint64_t v29 = v28;
        swift_release();
        swift_bridgeObjectRelease(_swiftEmptyArrayStorage);
        v30._uint64_t countAndFlagsBits = v27;
        v30._char object = v29;
        String.append(_:)(v30);
        swift_bridgeObjectRelease((_BYTE)v29);
        if (v44 <= 0)
        {
          v35._uint64_t countAndFlagsBits = 0x203A65756C61560ALL;
          v35._char object = (void *)0xE800000000000000;
          String.append(_:)(v35);
        }
        else
        {
          MLDataTable.Rows.subscript.getter(0);
          swift_bridgeObjectRelease(v49);
          swift_release();
          uint64_t v31 = MLDataTable.Row.Values.description.getter(a1);
          long long v33 = v32;
          swift_release();
          v34._uint64_t countAndFlagsBits = v31;
          v34._char object = v33;
          String.append(_:)(v34);
          swift_bridgeObjectRelease((_BYTE)v33);
          v34._uint64_t countAndFlagsBits = 0x3A7365756C61560ALL;
          v34._char object = (void *)0xE900000000000020;
          String.append(_:)(v34);
          swift_bridgeObjectRelease(32);
        }
        uint64_t v10 = 0;
      }
      ++v10;
    }
  }
  uint64_t v36 = v9;
  outlined copy of Result<_DataTable, Error>(v47, v50);
  Swift::Int v37 = MLDataTable.size.getter();
  uint64_t v38 = specialized RandomAccessCollection<>.distance(from:to:)(0, v37);
  outlined consume of Result<_DataTable, Error>(v47, v50);
  if (v36 < v38)
  {
    v39._uint64_t countAndFlagsBits = 0x2E2E2E202CLL;
    v39._char object = (void *)0xE500000000000000;
    String.append(_:)(v39);
  }
  return v45;
}

uint64_t MLDataTable.Rows.debugDescription.getter(double a1)
{
  return MLDataTable.Rows.description.getter(a1);
}

uint64_t MLDataTable.Rows.playgroundDescription.getter(double a1)
{
  uint64_t v2 = v1;
  uint64_t v3 = MLDataTable.Rows.description.getter(a1);
  char v5 = v4;
  objc_allocWithZone((Class)NSAttributedString);
  id v6 = @nonobjc NSAttributedString.init(string:attributes:)(v3, v5, 0);
  uint64_t result = type metadata accessor for NSAttributedString();
  v2[3] = result;
  void *v2 = v6;
  return result;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance MLDataTable.Rows(double a1)
{
  return MLDataTable.Rows.description.getter(a1);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance MLDataTable.Rows(double a1)
{
  return MLDataTable.Rows.debugDescription.getter(a1);
}

uint64_t protocol witness for CustomPlaygroundDisplayConvertible.playgroundDescription.getter in conformance MLDataTable.Rows(double a1)
{
  return MLDataTable.Rows.playgroundDescription.getter(a1);
}

uint64_t base witness table accessor for BidirectionalCollection in MLDataTable.Rows()
{
  return lazy protocol witness table accessor for type MLDataTable.Rows and conformance MLDataTable.Rows();
}

uint64_t lazy protocol witness table accessor for type MLDataTable.Rows and conformance MLDataTable.Rows()
{
  uint64_t result = lazy protocol witness table cache variable for type MLDataTable.Rows and conformance MLDataTable.Rows;
  if (!lazy protocol witness table cache variable for type MLDataTable.Rows and conformance MLDataTable.Rows)
  {
    uint64_t result = swift_getWitnessTable(&protocol conformance descriptor for MLDataTable.Rows, &type metadata for MLDataTable.Rows);
    lazy protocol witness table cache variable for type MLDataTable.Rows and conformance MLDataTable.Rows = result;
  }
  return result;
}

{
  uint64_t result;

  uint64_t result = lazy protocol witness table cache variable for type MLDataTable.Rows and conformance MLDataTable.Rows;
  if (!lazy protocol witness table cache variable for type MLDataTable.Rows and conformance MLDataTable.Rows)
  {
    uint64_t result = swift_getWitnessTable(&protocol conformance descriptor for MLDataTable.Rows, &type metadata for MLDataTable.Rows);
    lazy protocol witness table cache variable for type MLDataTable.Rows and conformance MLDataTable.Rows = result;
  }
  return result;
}

{
  uint64_t result;

  uint64_t result = lazy protocol witness table cache variable for type MLDataTable.Rows and conformance MLDataTable.Rows;
  if (!lazy protocol witness table cache variable for type MLDataTable.Rows and conformance MLDataTable.Rows)
  {
    uint64_t result = swift_getWitnessTable(&protocol conformance descriptor for MLDataTable.Rows, &type metadata for MLDataTable.Rows);
    lazy protocol witness table cache variable for type MLDataTable.Rows and conformance MLDataTable.Rows = result;
  }
  return result;
}

{
  uint64_t result;

  uint64_t result = lazy protocol witness table cache variable for type MLDataTable.Rows and conformance MLDataTable.Rows;
  if (!lazy protocol witness table cache variable for type MLDataTable.Rows and conformance MLDataTable.Rows)
  {
    uint64_t result = swift_getWitnessTable(&protocol conformance descriptor for MLDataTable.Rows, &type metadata for MLDataTable.Rows);
    lazy protocol witness table cache variable for type MLDataTable.Rows and conformance MLDataTable.Rows = result;
  }
  return result;
}

uint64_t associated type witness table accessor for Collection.SubSequence : RandomAccessCollection in MLDataTable.Rows()
{
  return lazy protocol witness table accessor for type Slice<MLDataTable.Rows> and conformance <> Slice<A>(&lazy protocol witness table cache variable for type Slice<MLDataTable.Rows> and conformance <> Slice<A>, (void (*)(void))lazy protocol witness table accessor for type MLDataTable.Rows and conformance MLDataTable.Rows, (uint64_t)&protocol conformance descriptor for <> Slice<A>);
}

uint64_t base witness table accessor for Collection in MLDataTable.Rows()
{
  return lazy protocol witness table accessor for type MLDataTable.Rows and conformance MLDataTable.Rows();
}

uint64_t associated type witness table accessor for Collection.SubSequence : BidirectionalCollection in MLDataTable.Rows()
{
  return lazy protocol witness table accessor for type Slice<MLDataTable.Rows> and conformance <> Slice<A>(&lazy protocol witness table cache variable for type Slice<MLDataTable.Rows> and conformance <> Slice<A>, (void (*)(void))lazy protocol witness table accessor for type MLDataTable.Rows and conformance MLDataTable.Rows, (uint64_t)&protocol conformance descriptor for <> Slice<A>);
}

uint64_t lazy protocol witness table accessor for type Slice<MLDataTable.Rows> and conformance <> Slice<A>(uint64_t *a1, void (*a2)(void), uint64_t a3)
{
  uint64_t result = *a1;
  if (!*a1)
  {
    uint64_t v5 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for Slice<MLDataTable.Rows>);
    a2();
    uint64_t result = swift_getWitnessTable(a3, v5);
    *a1 = result;
  }
  return result;
}

uint64_t base witness table accessor for Sequence in MLDataTable.Rows()
{
  return lazy protocol witness table accessor for type MLDataTable.Rows and conformance MLDataTable.Rows();
}

uint64_t associated type witness table accessor for Collection.SubSequence : Collection in MLDataTable.Rows()
{
  return lazy protocol witness table accessor for type FullyConnectedNetworkClassifier<Float, String> and conformance FullyConnectedNetworkClassifier<A, B>(&lazy protocol witness table cache variable for type Slice<MLDataTable.Rows> and conformance Slice<A>, &demangling cache variable for type metadata for Slice<MLDataTable.Rows>, (uint64_t)&protocol conformance descriptor for Slice<A>);
}

uint64_t associated type witness table accessor for Sequence.Iterator : IteratorProtocol in MLDataTable.Rows()
{
  return lazy protocol witness table accessor for type FullyConnectedNetworkClassifier<Float, String> and conformance FullyConnectedNetworkClassifier<A, B>(&lazy protocol witness table cache variable for type IndexingIterator<MLDataTable.Rows> and conformance IndexingIterator<A>, &demangling cache variable for type metadata for IndexingIterator<MLDataTable.Rows>, (uint64_t)&protocol conformance descriptor for IndexingIterator<A>);
}

uint64_t initializeBufferWithCopyOfBuffer for MLDataTable.Rows(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)a2;
  char v3 = *(unsigned char *)(a2 + 8);
  outlined copy of Result<_DataTable, Error>(*(void *)a2, v3);
  *(void *)a1 = v2;
  *(unsigned char *)(a1 + 8) = v3;
  return a1;
}

uint64_t destroy for MLDataTable.Rows(uint64_t a1)
{
  return outlined consume of Result<_DataTable, Error>(*(void *)a1, *(_DWORD *)(a1 + 8));
}

uint64_t assignWithCopy for MLDataTable.Rows(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)a2;
  char v4 = *(unsigned char *)(a2 + 8);
  outlined copy of Result<_DataTable, Error>(*(void *)a2, v4);
  uint64_t v5 = *(void *)a1;
  *(void *)a1 = v3;
  int v6 = *(_DWORD *)(a1 + 8);
  *(unsigned char *)(a1 + 8) = v4;
  outlined consume of Result<_DataTable, Error>(v5, v6);
  return a1;
}

uint64_t assignWithTake for MLDataTable.Rows(uint64_t a1, uint64_t a2)
{
  char v3 = *(unsigned char *)(a2 + 8);
  uint64_t v4 = *(void *)a1;
  *(void *)a1 = *(void *)a2;
  int v5 = *(_DWORD *)(a1 + 8);
  *(unsigned char *)(a1 + 8) = v3;
  outlined consume of Result<_DataTable, Error>(v4, v5);
  return a1;
}

uint64_t getEnumTagSinglePayload for MLDataTable.Rows(uint64_t a1, unsigned int a2)
{
  if (a2)
  {
    if (a2 >= 0xFF && *(unsigned char *)(a1 + 9))
    {
      int v2 = *(_DWORD *)a1 + 254;
    }
    else
    {
      int v2 = -1;
      if (*(unsigned __int8 *)(a1 + 8) >= 2u) {
        int v2 = *(unsigned __int8 *)(a1 + 8) ^ 0xFF;
      }
    }
  }
  else
  {
    int v2 = -1;
  }
  return (v2 + 1);
}

void storeEnumTagSinglePayload for MLDataTable.Rows(uint64_t a1, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFE)
  {
    *(void *)a1 = a2 - 255;
    *(unsigned char *)(a1 + 8) = 0;
    if (a3 >= 0xFF) {
      *(unsigned char *)(a1 + 9) = 1;
    }
  }
  else
  {
    if (a3 >= 0xFF) {
      *(unsigned char *)(a1 + 9) = 0;
    }
    if (a2) {
      *(unsigned char *)(a1 + 8) = -(char)a2;
    }
  }
}